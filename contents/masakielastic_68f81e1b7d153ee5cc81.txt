{"context": "\u30d0\u30ea\u30c7\u30fc\u30b7\u30e7\u30f3\u306e\u969b\u306b\u60f3\u5b9a\u5916\u306e\u6587\u5b57\u304c\u901a\u3063\u3066\u3044\u306a\u3044\u304b\u8abf\u3079\u308b\u306b\u306f Unicode \u3067\u5b9a\u7fa9\u3055\u308c\u308b\u3059\u3079\u3066\u306e\u6587\u5b57\u3092\u8a66\u3059\u3053\u3068\u304c\u5fc5\u8981\u3067\u3059\u3002UTF-8 \u306e\u5834\u5408\u3001\u30b3\u30fc\u30c9\u30dd\u30a4\u30f3\u30c8\u306e\u7bc4\u56f2\u306f U+0000 \u304b\u3089 U+7FFF\u3001U+E000 \u304b\u3089 U+10FFFF \u307e\u3067\u3067\u3059\u3002\nPHP 5 \u306e\u6a19\u6e96\u95a2\u6570\u3067\u3042\u308b chr \u306f U+0080 \u3088\u308a\u3082\u5927\u304d\u3044\u30b3\u30fc\u30c9\u30dd\u30a4\u30f3\u30c8\u306e\u7bc4\u56f2\u306b\u306f\u5bfe\u5fdc\u3057\u3066\u304a\u3089\u305a\u3001\u4e3b\u8981\u306a\u62e1\u5f35\u30e2\u30b8\u30e5\u30fc\u30eb\u306b\u3082\u8a72\u5f53\u3059\u308b\u95a2\u6570\u306f\u7686\u7121\u306a\u306e\u3067\u3001\u81ea\u5206\u3067\u95a2\u6570\u3092\u5b9a\u7fa9\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\u30d9\u30f3\u30c1\u30de\u30fc\u30af\u306e\u7d50\u679c\u304b\u3089 html_entity_decode \u3084 chr \u3092\u4f7f\u3063\u305f\u65b9\u6cd5\u304c\u3082\u3063\u3068\u3088\u3044\u3068\u8003\u3048\u3089\u308c\u307e\u3059\u3002\n\n\u30ef\u30f3\u30e9\u30a4\u30ca\u30fc\nRuby \u3092\u5229\u7528\u3059\u308b\u5834\u5408\u3001\u6b21\u306e\u3088\u3046\u306a\u30b3\u30fc\u30c9\u306b\u306a\u308a\u307e\u3059\u3002\nruby -e 'puts ARGV[0].to_i(16).chr(\"UTF-8\")' 0x3042\n\n\u8907\u6570\u306e\u30b3\u30fc\u30c9\u30dd\u30a4\u30f3\u30c8\u3092\u53d7\u3051\u3064\u3051\u305f\u3044\u5834\u5408\u3001\u5c11\u3057\u30b3\u30fc\u30c9\u3092\u4fee\u6b63\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\nruby -e 'ARGV.each {|cp| puts cp.to_i(16).chr(\"UTF-8\")}' 0x3042 0x3044 0x3046 0x3048 0x304A\n\nPHP \u30d0\u30fc\u30b8\u30e7\u30f3\u3082\u3084\u3063\u3066\u307f\u3088\u3046\u3002PHP 5.6 \u306e\u6642\u70b9\u3067 mb_decode_numericentity \u304c\u3082\u3063\u3068\u3082\u30b3\u30f3\u30d1\u30af\u30c8\u3067\u3042\u308b\u3002\nphp -r 'array_shift($argv); echo mb_decode_numericentity(\"&#\".hexdec($argv[0]).\";\", [0, 0x10FFFF, 0, 0xFFFFFF], \"UTF-8\"), PHP_EOL;' 0x3042\n\n\u8907\u6570\u306e\u30b3\u30fc\u30c9\u30dd\u30a4\u30f3\u30c8\u3092\u3068\u308b\u30d0\u30fc\u30b8\u30e7\u30f3\u306f\u6b21\u306e\u3068\u304a\u308a\u3002\nphp -r 'array_shift($argv); foreach ($argv as $cp) echo mb_decode_numericentity(\"&#\".hexdec($cp).\";\", [0, 0x10FFFF, 0, 0xFFFFFF], \"UTF-8\"), PHP_EOL;' 0x3042 0x3044 0x3046 0x3048 0x304A\n\n\nmb_chr\nPHP 7.2 \u304b\u3089 mb_chr \u304c\u5229\u7528\u3067\u304d\u308b\u3088\u3046\u306a\u308b\u4e88\u5b9a\u3067\u3059\u3002\n\nIntlChar::chr\nPHP 7 \u304b\u3089 IntlChar::chr \u3092\u4f7f\u3046\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\nUTF-32 \u304b\u3089\u306e\u5909\u63db\n\u6587\u5b57\u30b3\u30fc\u30c9\u5909\u63db\u95a2\u6570\u306e mb_convert_encoding \u3082\u3057\u304f\u306f UConverter::transcode \u3092\u4f7f\u3044\u307e\u3059\u3002iconv \u95a2\u6570\u306f\u3042\u307e\u308a\u4f7f\u308f\u308c\u3066\u3044\u306a\u3044\u306e\u3067\u7701\u7565\u3057\u307e\u3059\u3002\u3053\u308c\u3089\u306e\u95a2\u6570\u3092\u4f7f\u3046\u30e1\u30ea\u30c3\u30c8\u306f\u5b9f\u88c5\u306e\u9593\u9055\u3044\u304c\u5c11\u306a\u304f\u3066\u3059\u3080\u3053\u3068\u3067\u3059\u3002\u7b46\u8005\u306f\u6587\u5b57\u30b3\u30fc\u30c9\u5909\u63db\u95a2\u6570\u4ee5\u5916\u306e\u95a2\u6570\u3092\u4f7f\u3063\u305f\u5b9f\u88c5\u306b\u9593\u9055\u3044\u304c\u306a\u3044\u306e\u304b\u3092\u78ba\u8a8d\u3059\u308b\u305f\u3081\u306b\u3053\u306e\u65b9\u6cd5\u3092\u9078\u3073\u307e\u3059\u3002\u30c7\u30e1\u30ea\u30c3\u30c8\u306f\u30d1\u30d5\u30a3\u30fc\u30de\u30f3\u30b9\u3067\u3059\u3002\u3059\u3079\u3066\u306e\u6587\u5b57\u30924\u30d0\u30a4\u30c8\u3067\u751f\u6210\u3057\u305f\u4e0a\u3067\u5225\u306e\u30d0\u30a4\u30c8\u5217\u306b\u5909\u63db\u3059\u308b\u3053\u3068\u306b\u306a\u308b\u304b\u3089\u3067\u3059\u3002\nfunction utf8_chr($cp) {\n\n    if (!is_int($cp)) {\n        exit(\"$cp is not integer\\n\");\n    }\n\n    if ($cp < 0 || (0xD7FF < $cp && $cp < 0xE000) || 0x10FFFF < $cp) {\n        exit(\"$cp is out of range\\n\");\n    }\n\n    return mb_convert_encoding(pack('N', $cp), 'UTF-8', 'UTF-32BE');\n}\n\nfunction utf8_chr2($cp) {\n\n    if (!is_int($cp)) {\n        exit(\"$cp is not integer\\n\");\n    }\n\n    if ($cp < 0 || (0xD7FF < $cp && $cp < 0xE000) || 0x10FFFF < $cp) {\n        exit(\"$cp is out of range\\n\");\n    }\n\n    return UConverter::transcode(pack('N', $cp), 'UTF8', 'UTF32_BigEndian');\n}\n\n\nHTML \u306e\u6570\u5024\u6587\u5b57\u53c2\u7167\n\u3053\u306e\u65b9\u6cd5\u3067\u4f7f\u3046\u95a2\u6570\u306f mb_decode_numericentity \u3082\u3057\u304f\u306f html_entity_decode \u3067\u3059\u3002\u5b9f\u88c5\u306e\u305f\u3081\u306e\u30b3\u30fc\u30c9\u91cf\u304c\u5c11\u306a\u304f\u3001\u51e6\u7406\u901f\u5ea6\u304c\u901f\u3044\u306e\u3067\u3001\u904b\u7528\u74b0\u5883\u3067\u4f7f\u3046\u3068\u3088\u3044\u3067\u3057\u3087\u3046\u3002html_entity_decode \u3092\u4f7f\u3046\u5834\u5408\u3001U+009F \u4ee5\u4e0b\u306e\u7bc4\u56f2\u3067\u306f\u6587\u5b57\u3067\u306f\u306a\u304f\u6570\u5024\u6587\u5b57\u53c2\u7167\u3092\u305d\u306e\u307e\u307e\u8fd4\u3059\u306e\u3067\u3001\u3053\u306e\u7bc4\u56f2\u306e\u6587\u5b57\u306f chr \u95a2\u6570\u3092\u4f7f\u3063\u3066\u751f\u6210\u3057\u307e\u3059\u3002chr \u3092\u4f7f\u3063\u305f\u3084\u308a\u65b9\u306f\u5f8c\u3067\u7d39\u4ecb\u3057\u307e\u3059\u3002\nfunction utf8_chr3($cp) {\n\n    if (!is_int($cp)) {\n        exit(\"$cp is not integer\\n\");\n    }\n\n    if ($cp < 0 || (0xD7FF < $cp && $cp < 0xE000) || 0x10FFFF < $cp) {\n        exit(\"$cp is out of range\\n\");\n    }\n\n    return mb_decode_numericentity('&#'.$cp.';', [0, 0x10FFFF, 0, 0xFFFFFF], 'UTF-8');\n}\n\nfunction utf8_chr4($cp) {\n\n    if (!is_int($cp)) {\n        exit(\"$cp is not integer\\n\");\n    }\n\n    if ($cp < 0 || (0xD7FF < $cp && $cp < 0xE000) || 0x10FFFF < $cp) {\n        exit(\"$cp is out of range\\n\");\n    }\n\n    if ($cp < 0x80) {\n        return chr($cp);\n    } else if ($cp < 0xA0) {\n        return chr(0xC0 | $cp >> 6).chr(0x80 | $cp & 0x3F);\n    }\n\n    return html_entity_decode('&#'.$cp.';');\n}\n\n\nUnicode \u30a8\u30b9\u30b1\u30fc\u30d7\u30b7\u30fc\u30b1\u30f3\u30b9\njson_decode \u3082\u3057\u304f\u306f transliterator_transliterate \u3092\u4f7f\u3044\u307e\u3059\u3002\u3069\u3061\u3089\u306e\u95a2\u6570\u30824\u6841\u56fa\u5b9a\u9577\u306e\u30a8\u30b9\u30b1\u30fc\u30d7\u30b7\u30fc\u30b1\u30f3\u30b9 (\\uXXXX)\u3057\u304b\u6271\u3048\u306a\u3044\u306e\u3067\u3001U+10000 \u3068\u305d\u308c\u4ee5\u964d\u306e\u7bc4\u56f2\u306f2\u3064\u306e\u30a8\u30b9\u30b1\u30fc\u30d7\u30b7\u30fc\u30b1\u30f3\u30b9 (\\uXXXX\\uYYYY) \u3092\u7d44\u307f\u5408\u308f\u305b\u308b\u3053\u3068\u306b\u306a\u308a\u307e\u3059\u3002HTML \u306e\u6570\u5024\u6587\u5b57\u53c2\u7167\u3088\u308a\u3082\u30b3\u30fc\u30c9\u304c\u5c11\u3057\u9577\u304f\u306a\u308a\u307e\u3059\u3002\nfunction utf8_chr5($cp) {\n\n    if (!is_int($cp)) {\n        exit(\"$cp is not integer\\n\");\n    }\n\n    if ($cp < 0 || (0xD7FF < $cp && $cp < 0xE000) || 0x10FFFF < $cp) {\n        exit(\"$cp is out of range\\n\");\n    }\n\n    if ($cp < 0x10000) {\n        return json_decode('\"\\u'.bin2hex(pack('n', $cp)).'\"');\n    }\n\n    // Q: Isn\u2019t there a simpler way to do this?\n    // http://unicode.org/faq/utf_bom.html#utf16-4\n    $lead = 0xD800 - (0x10000 >> 10) + ($cp >> 10);\n    $trail = 0xDC00 + ($cp & 0x3FF);\n\n    return json_decode('\"\\u'.bin2hex(pack('n', $lead)).'\\u'.bin2hex(pack('n', $trail)).'\"');\n}\n\nfunction utf8_chr6($cp) {\n\n    if (!is_int($cp)) {\n        exit(\"$cp is not integer\\n\");\n    }\n\n    if ($cp < 0 || (0xD7FF < $cp && $cp < 0xE000) || 0x10FFFF < $cp) {\n        exit(\"$cp is out of range\\n\");\n    }\n\n    if ($cp < 0x10000) {\n        $hex = dechex($cp);\n        $hex = str_repeat('0', 4 - strlen($hex)).$hex;\n\n        return transliterator_transliterate('Hex-Any/Java', '\\u'.$hex);\n    }\n\n    $high = 0xD800 | $cp - 0x10000 >> 10;\n    $low = 0xDC00 | $cp - 0x10000 & 0x3FF;\n\n    return transliterator_transliterate('Hex-Any/Java', \n        '\\u'.dechex($high).'\\u'.dechex($low));\n}\n\n\n\u30d3\u30c3\u30c8\u6f14\u7b97\u3068 chr\nC/C++ \u8a00\u8a9e\u3067 UTF-8 \u306e\u6587\u5b57\u5217\u95a2\u6570\u3092\u81ea\u5206\u3067\u5b9a\u7fa9\u3059\u308b\u5834\u5408\u3001\u30d3\u30c3\u30c8\u6f14\u7b97\u306f\u5fc5\u9808\u3067\u3059\u3002\u30d5\u30ec\u30fc\u30e0\u30ef\u30fc\u30af\u3084\u30e9\u30a4\u30d6\u30e9\u30ea\u306e\u30c6\u30b9\u30c8\u30b1\u30fc\u30b9\u3067\u63a1\u7528\u3055\u308c\u3066\u3044\u307e\u3059\u3002Unicode Standard \u306e3\u7ae0\u306b\u30d3\u30c3\u30c8\u306e\u5206\u5e03\u304c\u8a18\u8f09\u3055\u308c\u3066\u3044\u307e\u3059 (\u30c6\u30fc\u30d6\u30eb 3-6)\u3002\n\n\n\n\u30b9\u30ab\u30e9\u30fc\u5024\n\u7b2c1\u30d0\u30a4\u30c8\n\u7b2c2\u30d0\u30a4\u30c8\n\u7b2c3\u30d0\u30a4\u30c8\n\u7b2c4\u30d0\u30a4\u30c8\n\n\n\n\n00000000 0xxxxxxx\n0xxxxxxx\n\n\n\n\n\n00000yyy yyxxxxxx\n110yyyyy\n10xxxxxx\n\n\n\n\nzzzzyyyy yyxxxxxx\n1110zzzz\n10yyyyyy\n10xxxxxx\n\n\n\n000uuuuu zzzzyyyy yyxxxxxx\n11110uuu\n10uuzzzz\n10yyyyyy\n10xxxxxx\n\n\n\nfunction utf8_chr7($cp) {\n\n    if (!is_int($cp)) {\n        exit(\"$cp is not integer\\n\");\n    }\n\n    if ($cp < 0 || (0xD7FF < $cp && $cp < 0xE000) || 0x10FFFF < $cp) {\n        exit(\"$cp is out of range\\n\");\n    }\n\n    if ($cp < 0x80) {\n\n        return chr($cp);\n\n    } else if ($cp < 0x800) {\n\n        return chr(0xC0 | $cp >> 6)\n              .chr(0x80  | $cp & 0x3F);\n\n    } else if ($cp < 0x10000) {\n\n        return chr(0xE0 | $cp >> 12)\n               .chr(0x80 | $cp >> 6 & 0x3F)\n               .chr(0x80 | $cp & 0x3F);       \n\n    }\n\n    return chr(0xF0 | $cp >> 18)\n          .chr(0x80 | $cp >> 12 & 0x3F)\n          .chr(0x80 | $cp >> 6 & 0x3F)\n          .chr(0x80 | $cp & 0x3F);\n}\n\n\n\u30d3\u30c3\u30c8\u6f14\u7b97\u306e\u8a08\u7b97\u904e\u7a0b\n\u8a08\u7b97\u904e\u7a0b\u3092\u308f\u304b\u308a\u3084\u3059\u3044\u3088\u3046\u306b\u3059\u308b\u305f\u3081\u306b\u3001\u30d3\u30c3\u30c8\u6f14\u7b97\u306b\u4f7f\u3046\u6570\u5024\u30922\u9032\u6570\u306b\u66f8\u304d\u63db\u3048\u305f\u3082\u306e\u306f\u6b21\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002\nvar_dump(\n    '$' === utf8_chr8(0x0024),\n    '\u00a2' === utf8_chr8(0x00A2),\n    '\u20ac' === utf8_chr8(0x20AC),\n    '?' === utf8_chr8(0x10348)\n);\n\nfunction utf8_chr8($cp) {\n\n    if (!is_int($cp)) {\n        exit(\"$cp is not integer\\n\");\n    }\n\n    if ($cp < 0 || (0xD7FF < $cp && $cp < 0xE000) || 0x10FFFF < $cp) {\n        exit(\"$cp is out of range\\n\");\n    }\n\n    if ($cp < 0x80) {\n\n        return chr($cp);\n\n    } else if ($cp < 0x800) {\n\n        return chr(0b11000000 + ($cp >> 6))\n              .chr(0b10000000 + ($cp & 0b111111));\n\n    } else if ($cp < 0x10000) {\n\n        return chr(0b11100000 + ($cp >> 12))\n              .chr(0b10000000 + ($cp >> 6 & 0b111111))\n              .chr(0b10000000 + ($cp & 0b111111));       \n\n    }\n\n    return chr(0b11110000 + ($cp >> 18))\n          .chr(0b10000000 + ($cp >> 12 & 0b111111))\n          .chr(0b10000000 + ($cp >> 6 & 0b111111))\n          .chr(0b10000000 + ($cp & 0b111111));\n}\n\nWikipedia \u306e UTF-8 \u306e\u8a18\u4e8b\u306b\u306f1\u30d0\u30a4\u30c8\u6587\u5b57\u304b\u30894\u30d0\u30a4\u30c8\u6587\u5b57\u307e\u3067\u306e\u5bfe\u5fdc\u8868\u304c\u8a18\u8f09\u3055\u308c\u3066\u3044\u308b\u3002\n\n\u5148\u307b\u3069\u5b9f\u88c5\u3057\u305f\u95a2\u6570\u304c\u30d0\u30a4\u30c8\u5217\u306e\u8a08\u7b97\u7d50\u679c\u304c\u60f3\u5b9a\u3069\u304a\u308a\u306b\u306a\u3063\u3066\u3044\u308b\u304b4\u30d0\u30a4\u30c8\u6587\u5b57\u306e U+10348 \u3067\u8a66\u3057\u3066\u307f\u3088\u3046\u3002\n$cp = 0x10348;\n$char = \"\\xF0\\x90\\x8D\\x88\";\n\nvar_dump(\n    '10000001101001000' === decbin($cp),\n    [\n        '11110000' === decbin(ord($char[0])),\n        '10010000' === decbin(ord($char[1])),\n        '10001101' === decbin(ord($char[2])),\n        '10001000' === decbin(ord($char[3]))\n    ],\n    '11110000' === decbin(0b11110000 + ($cp >> 18)),\n    '10010000' === decbin(0b10000000 + ($cp >> 12 & 0b111111)),\n    '10001101' === decbin(0b10000000 + ($cp >> 6 & 0b111111)),\n    '10001000' === decbin(0b10000000 + ($cp & 0b111111))\n);\n\n\n\u30c6\u30b9\u30c8\n\u540c\u3058\u30b3\u30fc\u30c9\u30dd\u30a4\u30f3\u30c8\u304b\u3089\u540c\u3058\u6587\u5b57\u304c\u751f\u6210\u3055\u308c\u308b\u304b\u6bd4\u8f03\u3057\u307e\u3059\u3002\ntest('utf8_chr', 'utf8_chr2');\n\nfunction test($callable, $callable2) {\n\n    for ($i = 0; $i < 0x110000; ++$i) {\n\n        if ($i > 0xD7FF && $i < 0xE000) {\n            continue;\n        }\n\n        $char = $callable($i);\n        $char2 = $callable2($i);\n        $hex = strtoupper(dechex($i));\n\n        if ($char !== $char2) {\n            echo 'U+',\n            $i < 0x1000 ? str_repeat('0', 4 - strlen($hex)) : '',\n            $hex, PHP_EOL;\n        }\n\n    }\n}\n\n\n\u30d9\u30f3\u30c1\u30de\u30fc\u30af\n\u7b46\u8005\u306e\u30de\u30b7\u30f3\u3067\u306f html_entity_decode \u3092\u4f7f\u3063\u305f\u30b3\u30fc\u30c9\u304c\u6700\u901f\u3067\u30012\u4f4d\u304c chr \u3067\u3057\u305f\u3002transliterator_transliterate\u3000\u306f\u4e00\u6841\u9045\u3044\u306e\u3067\u3001\u4f7f\u308f\u306a\u3044\u307b\u3046\u304c\u3088\u3044\u3067\u3057\u3087\u3046\u3002\narray (\n  'html_entity_decode' => 0.12990903854370117,\n  'chr' => 0.16111207008361816,\n  'json_decode' => 0.23690009117126465,\n  'mb_decode_numericentity' => 0.2619929313659668,\n  'mb_convert_encoding' => 0.42672300338745117,\n  'UConverter::transcode' => 0.51613211631774902,\n  'transliterator_transliterate' => 6.8395729064941406,\n)\n\n$ret = [\n  'mb_convert_encoding' => timer(function() {\n    utf8_chr(0x10FFFF);\n  }),\n  'UConverter::transcode' => timer(function() {\n    utf8_chr2(0x10FFFF);\n  }),\n  'mb_decode_numericentity' => timer(function() {\n    utf8_chr3(0x10FFFF);\n  }),\n  'html_entity_decode' => timer(function() {\n    utf8_chr4(0x10FFFF);\n  }),\n  'json_decode' => timer(function() {\n    utf8_chr5(0x10FFFF);\n  }),\n  'transliterator_transliterate' => timer(function() {\n    utf8_chr6(0x10FFFF);\n  }),\n  'chr' => timer(function() {\n    utf8_chr7(0x10FFFF);\n  })\n];\n\nasort($ret);\nvar_export($ret);\n\nfunction timer($callable, $repeat = 100000) {\n\n    if (!is_int($repeat)) {\n        exit(\"$repeat is not integer\");\n    }\n\n    if ($repeat < 0) {\n        exit(\"$repeat is not positive integer\");\n    }\n\n    $start = microtime(true);\n\n    do {\n        $callable();\n    } while($repeat -= 1);\n\n    $stop = microtime(true);\n\n    return  $stop - $start;\n}\n\n\u30d0\u30ea\u30c7\u30fc\u30b7\u30e7\u30f3\u306e\u969b\u306b\u60f3\u5b9a\u5916\u306e\u6587\u5b57\u304c\u901a\u3063\u3066\u3044\u306a\u3044\u304b\u8abf\u3079\u308b\u306b\u306f Unicode \u3067\u5b9a\u7fa9\u3055\u308c\u308b\u3059\u3079\u3066\u306e\u6587\u5b57\u3092\u8a66\u3059\u3053\u3068\u304c\u5fc5\u8981\u3067\u3059\u3002UTF-8 \u306e\u5834\u5408\u3001\u30b3\u30fc\u30c9\u30dd\u30a4\u30f3\u30c8\u306e\u7bc4\u56f2\u306f U+0000 \u304b\u3089 U+7FFF\u3001U+E000 \u304b\u3089 U+10FFFF \u307e\u3067\u3067\u3059\u3002\n\nPHP 5 \u306e\u6a19\u6e96\u95a2\u6570\u3067\u3042\u308b chr \u306f U+0080 \u3088\u308a\u3082\u5927\u304d\u3044\u30b3\u30fc\u30c9\u30dd\u30a4\u30f3\u30c8\u306e\u7bc4\u56f2\u306b\u306f\u5bfe\u5fdc\u3057\u3066\u304a\u3089\u305a\u3001\u4e3b\u8981\u306a\u62e1\u5f35\u30e2\u30b8\u30e5\u30fc\u30eb\u306b\u3082\u8a72\u5f53\u3059\u308b\u95a2\u6570\u306f\u7686\u7121\u306a\u306e\u3067\u3001\u81ea\u5206\u3067\u95a2\u6570\u3092\u5b9a\u7fa9\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\u30d9\u30f3\u30c1\u30de\u30fc\u30af\u306e\u7d50\u679c\u304b\u3089 html_entity_decode \u3084 chr \u3092\u4f7f\u3063\u305f\u65b9\u6cd5\u304c\u3082\u3063\u3068\u3088\u3044\u3068\u8003\u3048\u3089\u308c\u307e\u3059\u3002\n\n## \u30ef\u30f3\u30e9\u30a4\u30ca\u30fc\n\nRuby \u3092\u5229\u7528\u3059\u308b\u5834\u5408\u3001\u6b21\u306e\u3088\u3046\u306a\u30b3\u30fc\u30c9\u306b\u306a\u308a\u307e\u3059\u3002\n\n```rb\nruby -e 'puts ARGV[0].to_i(16).chr(\"UTF-8\")' 0x3042\n```\n\n\u8907\u6570\u306e\u30b3\u30fc\u30c9\u30dd\u30a4\u30f3\u30c8\u3092\u53d7\u3051\u3064\u3051\u305f\u3044\u5834\u5408\u3001\u5c11\u3057\u30b3\u30fc\u30c9\u3092\u4fee\u6b63\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\n\n```rb\nruby -e 'ARGV.each {|cp| puts cp.to_i(16).chr(\"UTF-8\")}' 0x3042 0x3044 0x3046 0x3048 0x304A\n```\n\nPHP \u30d0\u30fc\u30b8\u30e7\u30f3\u3082\u3084\u3063\u3066\u307f\u3088\u3046\u3002PHP 5.6 \u306e\u6642\u70b9\u3067 mb_decode_numericentity \u304c\u3082\u3063\u3068\u3082\u30b3\u30f3\u30d1\u30af\u30c8\u3067\u3042\u308b\u3002\n\n```php\nphp -r 'array_shift($argv); echo mb_decode_numericentity(\"&#\".hexdec($argv[0]).\";\", [0, 0x10FFFF, 0, 0xFFFFFF], \"UTF-8\"), PHP_EOL;' 0x3042\n```\n\n\u8907\u6570\u306e\u30b3\u30fc\u30c9\u30dd\u30a4\u30f3\u30c8\u3092\u3068\u308b\u30d0\u30fc\u30b8\u30e7\u30f3\u306f\u6b21\u306e\u3068\u304a\u308a\u3002\n\n```php\nphp -r 'array_shift($argv); foreach ($argv as $cp) echo mb_decode_numericentity(\"&#\".hexdec($cp).\";\", [0, 0x10FFFF, 0, 0xFFFFFF], \"UTF-8\"), PHP_EOL;' 0x3042 0x3044 0x3046 0x3048 0x304A\n```\n\n## mb_chr\n\nPHP 7.2 \u304b\u3089 mb_chr \u304c\u5229\u7528\u3067\u304d\u308b\u3088\u3046\u306a\u308b\u4e88\u5b9a\u3067\u3059\u3002\n\n## IntlChar::chr\n\nPHP 7 \u304b\u3089 `IntlChar::chr` \u3092\u4f7f\u3046\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\n## UTF-32 \u304b\u3089\u306e\u5909\u63db\n\n\u6587\u5b57\u30b3\u30fc\u30c9\u5909\u63db\u95a2\u6570\u306e mb_convert_encoding \u3082\u3057\u304f\u306f UConverter::transcode \u3092\u4f7f\u3044\u307e\u3059\u3002iconv \u95a2\u6570\u306f\u3042\u307e\u308a\u4f7f\u308f\u308c\u3066\u3044\u306a\u3044\u306e\u3067\u7701\u7565\u3057\u307e\u3059\u3002\u3053\u308c\u3089\u306e\u95a2\u6570\u3092\u4f7f\u3046\u30e1\u30ea\u30c3\u30c8\u306f\u5b9f\u88c5\u306e\u9593\u9055\u3044\u304c\u5c11\u306a\u304f\u3066\u3059\u3080\u3053\u3068\u3067\u3059\u3002\u7b46\u8005\u306f\u6587\u5b57\u30b3\u30fc\u30c9\u5909\u63db\u95a2\u6570\u4ee5\u5916\u306e\u95a2\u6570\u3092\u4f7f\u3063\u305f\u5b9f\u88c5\u306b\u9593\u9055\u3044\u304c\u306a\u3044\u306e\u304b\u3092\u78ba\u8a8d\u3059\u308b\u305f\u3081\u306b\u3053\u306e\u65b9\u6cd5\u3092\u9078\u3073\u307e\u3059\u3002\u30c7\u30e1\u30ea\u30c3\u30c8\u306f\u30d1\u30d5\u30a3\u30fc\u30de\u30f3\u30b9\u3067\u3059\u3002\u3059\u3079\u3066\u306e\u6587\u5b57\u30924\u30d0\u30a4\u30c8\u3067\u751f\u6210\u3057\u305f\u4e0a\u3067\u5225\u306e\u30d0\u30a4\u30c8\u5217\u306b\u5909\u63db\u3059\u308b\u3053\u3068\u306b\u306a\u308b\u304b\u3089\u3067\u3059\u3002\n\n```php\nfunction utf8_chr($cp) {\n\n    if (!is_int($cp)) {\n        exit(\"$cp is not integer\\n\");\n    }\n\n    if ($cp < 0 || (0xD7FF < $cp && $cp < 0xE000) || 0x10FFFF < $cp) {\n        exit(\"$cp is out of range\\n\");\n    }\n\n    return mb_convert_encoding(pack('N', $cp), 'UTF-8', 'UTF-32BE');\n}\n\nfunction utf8_chr2($cp) {\n\n    if (!is_int($cp)) {\n        exit(\"$cp is not integer\\n\");\n    }\n\n    if ($cp < 0 || (0xD7FF < $cp && $cp < 0xE000) || 0x10FFFF < $cp) {\n        exit(\"$cp is out of range\\n\");\n    }\n\n    return UConverter::transcode(pack('N', $cp), 'UTF8', 'UTF32_BigEndian');\n}\n```\n\n## HTML \u306e\u6570\u5024\u6587\u5b57\u53c2\u7167\n\n\u3053\u306e\u65b9\u6cd5\u3067\u4f7f\u3046\u95a2\u6570\u306f mb_decode_numericentity \u3082\u3057\u304f\u306f html_entity_decode \u3067\u3059\u3002\u5b9f\u88c5\u306e\u305f\u3081\u306e\u30b3\u30fc\u30c9\u91cf\u304c\u5c11\u306a\u304f\u3001\u51e6\u7406\u901f\u5ea6\u304c\u901f\u3044\u306e\u3067\u3001\u904b\u7528\u74b0\u5883\u3067\u4f7f\u3046\u3068\u3088\u3044\u3067\u3057\u3087\u3046\u3002html_entity_decode \u3092\u4f7f\u3046\u5834\u5408\u3001U+009F \u4ee5\u4e0b\u306e\u7bc4\u56f2\u3067\u306f\u6587\u5b57\u3067\u306f\u306a\u304f\u6570\u5024\u6587\u5b57\u53c2\u7167\u3092\u305d\u306e\u307e\u307e\u8fd4\u3059\u306e\u3067\u3001\u3053\u306e\u7bc4\u56f2\u306e\u6587\u5b57\u306f chr \u95a2\u6570\u3092\u4f7f\u3063\u3066\u751f\u6210\u3057\u307e\u3059\u3002chr \u3092\u4f7f\u3063\u305f\u3084\u308a\u65b9\u306f\u5f8c\u3067\u7d39\u4ecb\u3057\u307e\u3059\u3002\n\n```php\nfunction utf8_chr3($cp) {\n\n    if (!is_int($cp)) {\n        exit(\"$cp is not integer\\n\");\n    }\n\n    if ($cp < 0 || (0xD7FF < $cp && $cp < 0xE000) || 0x10FFFF < $cp) {\n        exit(\"$cp is out of range\\n\");\n    }\n\n    return mb_decode_numericentity('&#'.$cp.';', [0, 0x10FFFF, 0, 0xFFFFFF], 'UTF-8');\n}\n\nfunction utf8_chr4($cp) {\n\n    if (!is_int($cp)) {\n        exit(\"$cp is not integer\\n\");\n    }\n\n    if ($cp < 0 || (0xD7FF < $cp && $cp < 0xE000) || 0x10FFFF < $cp) {\n        exit(\"$cp is out of range\\n\");\n    }\n\n    if ($cp < 0x80) {\n        return chr($cp);\n    } else if ($cp < 0xA0) {\n        return chr(0xC0 | $cp >> 6).chr(0x80 | $cp & 0x3F);\n    }\n\n    return html_entity_decode('&#'.$cp.';');\n}\n```\n\n## Unicode \u30a8\u30b9\u30b1\u30fc\u30d7\u30b7\u30fc\u30b1\u30f3\u30b9\n\njson_decode \u3082\u3057\u304f\u306f transliterator_transliterate \u3092\u4f7f\u3044\u307e\u3059\u3002\u3069\u3061\u3089\u306e\u95a2\u6570\u30824\u6841\u56fa\u5b9a\u9577\u306e\u30a8\u30b9\u30b1\u30fc\u30d7\u30b7\u30fc\u30b1\u30f3\u30b9 (\\uXXXX)\u3057\u304b\u6271\u3048\u306a\u3044\u306e\u3067\u3001U+10000 \u3068\u305d\u308c\u4ee5\u964d\u306e\u7bc4\u56f2\u306f2\u3064\u306e\u30a8\u30b9\u30b1\u30fc\u30d7\u30b7\u30fc\u30b1\u30f3\u30b9 (\\uXXXX\\uYYYY) \u3092\u7d44\u307f\u5408\u308f\u305b\u308b\u3053\u3068\u306b\u306a\u308a\u307e\u3059\u3002HTML \u306e\u6570\u5024\u6587\u5b57\u53c2\u7167\u3088\u308a\u3082\u30b3\u30fc\u30c9\u304c\u5c11\u3057\u9577\u304f\u306a\u308a\u307e\u3059\u3002\n\n```php\nfunction utf8_chr5($cp) {\n\n    if (!is_int($cp)) {\n        exit(\"$cp is not integer\\n\");\n    }\n\n    if ($cp < 0 || (0xD7FF < $cp && $cp < 0xE000) || 0x10FFFF < $cp) {\n        exit(\"$cp is out of range\\n\");\n    }\n\n    if ($cp < 0x10000) {\n        return json_decode('\"\\u'.bin2hex(pack('n', $cp)).'\"');\n    }\n\n    // Q: Isn\u2019t there a simpler way to do this?\n    // http://unicode.org/faq/utf_bom.html#utf16-4\n    $lead = 0xD800 - (0x10000 >> 10) + ($cp >> 10);\n    $trail = 0xDC00 + ($cp & 0x3FF);\n\n    return json_decode('\"\\u'.bin2hex(pack('n', $lead)).'\\u'.bin2hex(pack('n', $trail)).'\"');\n}\n\nfunction utf8_chr6($cp) {\n\n    if (!is_int($cp)) {\n        exit(\"$cp is not integer\\n\");\n    }\n\n    if ($cp < 0 || (0xD7FF < $cp && $cp < 0xE000) || 0x10FFFF < $cp) {\n        exit(\"$cp is out of range\\n\");\n    }\n\n    if ($cp < 0x10000) {\n        $hex = dechex($cp);\n        $hex = str_repeat('0', 4 - strlen($hex)).$hex;\n\n        return transliterator_transliterate('Hex-Any/Java', '\\u'.$hex);\n    }\n\n    $high = 0xD800 | $cp - 0x10000 >> 10;\n    $low = 0xDC00 | $cp - 0x10000 & 0x3FF;\n\n    return transliterator_transliterate('Hex-Any/Java', \n        '\\u'.dechex($high).'\\u'.dechex($low));\n}\n```\n\n## \u30d3\u30c3\u30c8\u6f14\u7b97\u3068 chr\n\nC/C++ \u8a00\u8a9e\u3067 UTF-8 \u306e\u6587\u5b57\u5217\u95a2\u6570\u3092\u81ea\u5206\u3067\u5b9a\u7fa9\u3059\u308b\u5834\u5408\u3001\u30d3\u30c3\u30c8\u6f14\u7b97\u306f\u5fc5\u9808\u3067\u3059\u3002\u30d5\u30ec\u30fc\u30e0\u30ef\u30fc\u30af\u3084\u30e9\u30a4\u30d6\u30e9\u30ea\u306e\u30c6\u30b9\u30c8\u30b1\u30fc\u30b9\u3067\u63a1\u7528\u3055\u308c\u3066\u3044\u307e\u3059\u3002Unicode Standard \u306e[3\u7ae0](http://www.unicode.org/versions/Unicode7.0.0/ch03.pdf)\u306b\u30d3\u30c3\u30c8\u306e\u5206\u5e03\u304c\u8a18\u8f09\u3055\u308c\u3066\u3044\u307e\u3059 (\u30c6\u30fc\u30d6\u30eb 3-6)\u3002\n\n|\u30b9\u30ab\u30e9\u30fc\u5024|\u7b2c1\u30d0\u30a4\u30c8|\u7b2c2\u30d0\u30a4\u30c8|\u7b2c3\u30d0\u30a4\u30c8|\u7b2c4\u30d0\u30a4\u30c8| \n|:---------------------------|---------:|:--------:|---------:|---------:|\n|          00000000 0xxxxxxx | 0xxxxxxx |          |          |          |\n|          00000yyy yyxxxxxx | 110yyyyy | 10xxxxxx |          |          |\n|          zzzzyyyy yyxxxxxx | 1110zzzz | 10yyyyyy | 10xxxxxx |          |\n| 000uuuuu zzzzyyyy yyxxxxxx | 11110uuu | 10uuzzzz | 10yyyyyy | 10xxxxxx |\n\n\n```php\nfunction utf8_chr7($cp) {\n\n    if (!is_int($cp)) {\n        exit(\"$cp is not integer\\n\");\n    }\n\n    if ($cp < 0 || (0xD7FF < $cp && $cp < 0xE000) || 0x10FFFF < $cp) {\n        exit(\"$cp is out of range\\n\");\n    }\n\n    if ($cp < 0x80) {\n\n        return chr($cp);\n\n    } else if ($cp < 0x800) {\n\n        return chr(0xC0 | $cp >> 6)\n              .chr(0x80  | $cp & 0x3F);\n\n    } else if ($cp < 0x10000) {\n\n        return chr(0xE0 | $cp >> 12)\n               .chr(0x80 | $cp >> 6 & 0x3F)\n               .chr(0x80 | $cp & 0x3F);       \n\n    }\n\n    return chr(0xF0 | $cp >> 18)\n          .chr(0x80 | $cp >> 12 & 0x3F)\n          .chr(0x80 | $cp >> 6 & 0x3F)\n          .chr(0x80 | $cp & 0x3F);\n}\n```\n\n### \u30d3\u30c3\u30c8\u6f14\u7b97\u306e\u8a08\u7b97\u904e\u7a0b\n\n\u8a08\u7b97\u904e\u7a0b\u3092\u308f\u304b\u308a\u3084\u3059\u3044\u3088\u3046\u306b\u3059\u308b\u305f\u3081\u306b\u3001\u30d3\u30c3\u30c8\u6f14\u7b97\u306b\u4f7f\u3046\u6570\u5024\u30922\u9032\u6570\u306b\u66f8\u304d\u63db\u3048\u305f\u3082\u306e\u306f\u6b21\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002\n\n```php\nvar_dump(\n    '$' === utf8_chr8(0x0024),\n    '\u00a2' === utf8_chr8(0x00A2),\n    '\u20ac' === utf8_chr8(0x20AC),\n    '?' === utf8_chr8(0x10348)\n);\n\nfunction utf8_chr8($cp) {\n\n    if (!is_int($cp)) {\n        exit(\"$cp is not integer\\n\");\n    }\n\n    if ($cp < 0 || (0xD7FF < $cp && $cp < 0xE000) || 0x10FFFF < $cp) {\n        exit(\"$cp is out of range\\n\");\n    }\n\n    if ($cp < 0x80) {\n\n        return chr($cp);\n\n    } else if ($cp < 0x800) {\n\n        return chr(0b11000000 + ($cp >> 6))\n              .chr(0b10000000 + ($cp & 0b111111));\n\n    } else if ($cp < 0x10000) {\n\n        return chr(0b11100000 + ($cp >> 12))\n              .chr(0b10000000 + ($cp >> 6 & 0b111111))\n              .chr(0b10000000 + ($cp & 0b111111));       \n\n    }\n\n    return chr(0b11110000 + ($cp >> 18))\n          .chr(0b10000000 + ($cp >> 12 & 0b111111))\n          .chr(0b10000000 + ($cp >> 6 & 0b111111))\n          .chr(0b10000000 + ($cp & 0b111111));\n}\n```\n\nWikipedia \u306e [UTF-8](http://en.wikipedia.org/wiki/UTF-8#Examples) \u306e\u8a18\u4e8b\u306b\u306f1\u30d0\u30a4\u30c8\u6587\u5b57\u304b\u30894\u30d0\u30a4\u30c8\u6587\u5b57\u307e\u3067\u306e\u5bfe\u5fdc\u8868\u304c\u8a18\u8f09\u3055\u308c\u3066\u3044\u308b\u3002\n\n![UTF-8 \u306e\u4f8b](https://qiita-image-store.s3.amazonaws.com/0/349/fe3fa119-dffd-a546-c220-8e5dfb52890c.png)\n\n\u5148\u307b\u3069\u5b9f\u88c5\u3057\u305f\u95a2\u6570\u304c\u30d0\u30a4\u30c8\u5217\u306e\u8a08\u7b97\u7d50\u679c\u304c\u60f3\u5b9a\u3069\u304a\u308a\u306b\u306a\u3063\u3066\u3044\u308b\u304b4\u30d0\u30a4\u30c8\u6587\u5b57\u306e U+10348 \u3067\u8a66\u3057\u3066\u307f\u3088\u3046\u3002\n\n```php\n$cp = 0x10348;\n$char = \"\\xF0\\x90\\x8D\\x88\";\n\nvar_dump(\n    '10000001101001000' === decbin($cp),\n    [\n        '11110000' === decbin(ord($char[0])),\n        '10010000' === decbin(ord($char[1])),\n        '10001101' === decbin(ord($char[2])),\n        '10001000' === decbin(ord($char[3]))\n    ],\n    '11110000' === decbin(0b11110000 + ($cp >> 18)),\n    '10010000' === decbin(0b10000000 + ($cp >> 12 & 0b111111)),\n    '10001101' === decbin(0b10000000 + ($cp >> 6 & 0b111111)),\n    '10001000' === decbin(0b10000000 + ($cp & 0b111111))\n);\n```\n\n## \u30c6\u30b9\u30c8\n\n\n\u540c\u3058\u30b3\u30fc\u30c9\u30dd\u30a4\u30f3\u30c8\u304b\u3089\u540c\u3058\u6587\u5b57\u304c\u751f\u6210\u3055\u308c\u308b\u304b\u6bd4\u8f03\u3057\u307e\u3059\u3002\n\n```php\ntest('utf8_chr', 'utf8_chr2');\n\nfunction test($callable, $callable2) {\n\n    for ($i = 0; $i < 0x110000; ++$i) {\n\n        if ($i > 0xD7FF && $i < 0xE000) {\n            continue;\n        }\n\n        $char = $callable($i);\n        $char2 = $callable2($i);\n        $hex = strtoupper(dechex($i));\n\n        if ($char !== $char2) {\n            echo 'U+',\n            $i < 0x1000 ? str_repeat('0', 4 - strlen($hex)) : '',\n            $hex, PHP_EOL;\n        }\n\n    }\n}\n```\n\n## \u30d9\u30f3\u30c1\u30de\u30fc\u30af\n\n\u7b46\u8005\u306e\u30de\u30b7\u30f3\u3067\u306f html_entity_decode \u3092\u4f7f\u3063\u305f\u30b3\u30fc\u30c9\u304c\u6700\u901f\u3067\u30012\u4f4d\u304c chr \u3067\u3057\u305f\u3002transliterator_transliterate\u3000\u306f\u4e00\u6841\u9045\u3044\u306e\u3067\u3001\u4f7f\u308f\u306a\u3044\u307b\u3046\u304c\u3088\u3044\u3067\u3057\u3087\u3046\u3002\n\n```php\narray (\n  'html_entity_decode' => 0.12990903854370117,\n  'chr' => 0.16111207008361816,\n  'json_decode' => 0.23690009117126465,\n  'mb_decode_numericentity' => 0.2619929313659668,\n  'mb_convert_encoding' => 0.42672300338745117,\n  'UConverter::transcode' => 0.51613211631774902,\n  'transliterator_transliterate' => 6.8395729064941406,\n)\n```\n\n```php\n$ret = [\n  'mb_convert_encoding' => timer(function() {\n    utf8_chr(0x10FFFF);\n  }),\n  'UConverter::transcode' => timer(function() {\n    utf8_chr2(0x10FFFF);\n  }),\n  'mb_decode_numericentity' => timer(function() {\n    utf8_chr3(0x10FFFF);\n  }),\n  'html_entity_decode' => timer(function() {\n    utf8_chr4(0x10FFFF);\n  }),\n  'json_decode' => timer(function() {\n    utf8_chr5(0x10FFFF);\n  }),\n  'transliterator_transliterate' => timer(function() {\n    utf8_chr6(0x10FFFF);\n  }),\n  'chr' => timer(function() {\n    utf8_chr7(0x10FFFF);\n  })\n];\n\nasort($ret);\nvar_export($ret);\n\nfunction timer($callable, $repeat = 100000) {\n\n    if (!is_int($repeat)) {\n        exit(\"$repeat is not integer\");\n    }\n\n    if ($repeat < 0) {\n        exit(\"$repeat is not positive integer\");\n    }\n\n    $start = microtime(true);\n\n    do {\n        $callable();\n    } while($repeat -= 1);\n    \n    $stop = microtime(true);\n\n    return  $stop - $start;\n}\n```\n", "tags": ["PHP", "unicode"]}