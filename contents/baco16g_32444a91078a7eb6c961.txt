{"tags": ["WebGL", "GLSL"], "context": "\u3053\u306e\u8a18\u4e8b\u306f\u3001\u65e9\u7a32\u7530\u5927\u5b66 AdventCalender 2016 14\u65e5\u76ee\u3067\u3059\u3002\n\u3068\u3042\u308bGLSL\u304a\u3058\u3055\u3093\u304c\u30d5\u30e9\u30b0\u30e1\u30f3\u30c8\u30b7\u30a7\u30fc\u30c0\u3067\u6e29\u6cc9\u3092\u6398\u308b\u8a71\u3092\u3057\u307e\u3059 \n\u6700\u7d42\u7684\u306b\u6398\u308c\u305f\u6e29\u6cc9\u306f\u3053\u3061\u3089\u3067\u3059\u3002PC\u3067\u306e\u95b2\u89a7\u3092\u63a8\u5968\u3002\n\n\uff08\u6e6f\u306b\u898b\u3048\u306a\u304f\u3066\u3082\u3001\u300c\u3053\u308c\u306f\u6e6f\u3060...\u300d\u3068\u8a00\u3044\u805e\u304b\u305b\u307e\u3057\u3087\u3046\uff09\n\n\u306f\u3058\u3081\u306b\n\n\u672c\u8a18\u4e8b\u306f\u3001\u7d041\u30f6\u6708\u306eGLSL\u5b66\u7fd2\u3092\u307e\u3068\u3081\u308b\u3053\u3068\u304c\u76ee\u7684\u3067\u3059\u3002\n\u7c21\u6613\u7684\u306b\u30b3\u30fc\u30c9\u3092\u63b2\u8f09\u3059\u308b\u305f\u3081\u306b\u3001The Book of Shaders\u306e\u30aa\u30f3\u30e9\u30a4\u30f3\u30a8\u30c7\u30a3\u30bf\u3092\u4f7f\u7528\u3057\u3066\u3044\u307e\u3059\u3002\u89e3\u8aac\u7b49\u306f\u3001\u3053\u3061\u3089\u306b\u30b3\u30e1\u30f3\u30c8\u3067\u63b2\u8f09\u3057\u307e\u3059\u3002\n\n\nGLSL\u3068\u306f\nC\u8a00\u8a9e\u3092\u30d9\u30fc\u30b9\u3068\u3057\u305f\u30b7\u30a7\u30fc\u30c7\u30a3\u30f3\u30b0\u8a00\u8a9e\u3067\u3059\u3002\n\u8a73\u3057\u304f\u306f\u5049\u5927\u306a\u5148\u4eba\u305f\u3061\u306e\u66f8\u7269\u3092\u304a\u8aad\u307f\u304f\u3060\u3055\u3044\u3002\n- wgld.org\n- GPU \u3067\u6696\u3092\u53d6\u308a\u305f\u3044\u4eba\u306e\u305f\u3081\u306e GLSL Advent Calendar 2016\n\n\u672c\u7de8\n\n\u3042\u3089\u3059\u3058\n\u304a\u3058\u3044\u3055\u3093\u306f\u5c71\u3078\u67f4\u5208\u308a\u306b\u3001\u304a\u3070\u3042\u3055\u3093\u306f\u5ddd\u3078\u6d17\u6fef\u306b\u884c\u304d\u307e\u3057\u305f\u3002\n\u305d\u3057\u3066\u3001GLSL\u304a\u3058\u3055\u3093\u306f\u706b\u5c71\u5730\u5e2f\u3078\u6e29\u6cc9\u3092\u6398\u308a\u306b\u884c\u304d\u307e\u3057\u305f\u3068\u3055...\n\n\u6398\u308a\u3084\u3059\u305d\u3046\u306a\u571f\u58cc\u3092\u63a2\u3059\nGLSL\u304a\u3058\u3055\u3093\u304c\u706b\u5c71\u5730\u5e2f\u3078\u5230\u7740\u3059\u308b\u3068\u3001\u305d\u3053\u306f\u4e00\u9762\u3001\u7802\u5229(\u7070\u8272)\u3070\u304b\u308a\u3002\u5f7c\u306f\u3001\u6e29\u6cc9\u3092\u6398\u308b\u305f\u3081\u306b\u30b9\u30b3\u30c3\u30d7\u3092\u5165\u308c\u3084\u3059\u305d\u3046\u306a\u571f(\u8336\u8272)\u306e\u5730\u9762\u3092\u63a2\u3057\u59cb\u3081\u307e\u3057\u305f\nprecision mediump float;\n\nvoid main(){\n    vec3 gravel = vec3(0.3, 0.3, 0.3); // \u7802\u5229\u306eRGB\n    vec3 soil = vec3(0.7, 0.5, 0.3); // \u571f\u306eRGB\n\n    //-------------------------\n    // \u4ee3\u5165\u5024\u3092soil\u306b\u5909\u66f4\u3059\u308b\n    //-------------------------\n    vec3 color = gravel;\n\n    gl_FragColor = vec4(color, 1.0); // \u51fa\u529b\u3059\u308b\u8272\n}\n\n\n\u5b9f\u884c\u7d50\u679c\u306f\u3053\u3061\u3089\n\n\n[ \u89e3\u8aac ]\ngl_FragColor\u306b\u3001\u6700\u7d42\u7684\u306b\u51fa\u529b\u3055\u308c\u308b\u8272\u30924\u6b21\u5143\u30d9\u30af\u30c8\u30eb\u3068\u3057\u3066\u4ee3\u5165\u3057\u307e\u3059\u30024\u6b21\u5143\u3067\u3042\u308b\u7406\u7531\u306f\u3001\u7dda\u5f62\u4ee3\u6570\u306e\u5e73\u884c\u79fb\u52d5\u51e6\u7406\u4e91\u3005\u304c\u95a2\u308f\u3063\u3066\u304f\u308b\u3089\u3057\u3044\u306e\u3067\u3059\u304c\u3001\u5272\u611b\u3057\u307e\u3059\u3002\u3061\u306a\u307f\u306b\u4eca\u56de\u306f1\u9762\u30d9\u30bf\u5857\u308a\u3067\u3059\u304c\u3001\u30d5\u30e9\u30b0\u30e1\u30f3\u30c8\u30b7\u30a7\u30fc\u30c0\u3067\u306f1\u30641\u3064\u306e\u30d4\u30af\u30bb\u30eb\u3054\u3068\u306b\u63cf\u753b\u51e6\u7406\u304c\u8d70\u308a\u307e\u3059\u3002\n\n\u76ee\u304b\u3089\u30d3\u30fc\u30e0\u3067\u7a74\u3092\u6398\u308b\nGLSL\u304a\u3058\u3055\u3093\u306f\u3001\u76ee\u304b\u3089\u30d3\u30fc\u30e0(ray)\u3092\u653e\u3064\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\u3044\u3084\u3041\u3001\u3059\u3054\u3044\u3067\u3059\u306d\uff01 \u305d\u308c\u3067\u306f\u3001\u5730\u9762\u306b\u30d3\u30fc\u30e0\u3092\u5f53\u3066\u3066\u3001\u7a74\u3092\u6398\u308a\u307e\u3057\u3087\u3046\u3002\uff08\u7802\u5229\u306e\u5730\u9762\u3067\u3082\u826f\u304b\u3063\u305f\u306e\u3067\u306f...\uff1f\uff09\nprecision mediump float;\nuniform vec2 u_resolution;\n\n//===================================\n// \u30fb\u30ec\u30a4\u30de\u30fc\u30c1\u30f3\u30b0\u306e\u53c2\u8003\n// https://wgld.org/d/glsl/g008.html\n\n// \u30fb\u8ddd\u96e2\u95a2\u6570\n// http://iquilezles.org/www/articles/distfunctions/distfunctions.htm\n//===================================\n\n// \u8ddd\u96e2\u95a2\u6570\uff08sphere\uff09\nfloat dHole(vec3 p) {\n    return length(p) - 1.0;\n}\n\n//===================================\n// \u30fb\u30e1\u30a4\u30f3\u95a2\u6570\n//===================================\n\nvoid main() {\n    // \u8272\u306e\u5ba3\u8a00\n    vec3 sand = vec3(0.7, 0.5, 0.3);\n    vec3 hole = vec3(0.4, 0.2, 0.0);\n\n    // color\u306e\u521d\u671f\u5316\n    vec3 color = vec3(0.0);\n\n    // \u5ea7\u6a19\u306e\u6b63\u898f\u5316(range: -1.0 ~ 1.0)\n    vec2 p = (gl_FragCoord.xy * 2.0 - u_resolution) / min(u_resolution.x, u_resolution.y);\n\n    // \u30ab\u30e1\u30e9\u306e\u30bb\u30c3\u30c6\u30a3\u30f3\u30b0\n    vec3 cPos = vec3(0.0, 0.0, 2.0);    // \u30ab\u30e1\u30e9\u306e\u4f4d\u7f6e\uff08GLSL\u304a\u3058\u3055\u3093\u306e\u7acb\u3061\u4f4d\u7f6e\uff09\n    vec3 cDir = vec3(0.0, 0.0, -1.0);   // \u30ab\u30e1\u30e9\u306e\u6ce8\u8996\u70b9\uff08GLSL\u304a\u3058\u3055\u3093\u306e\u8996\u70b9\uff09\n    vec3 cUp  = vec3(0.0, 1.0, 0.0);    // \u30ab\u30e1\u30e9\u306e\u4e0a\u65b9\u5411\uff08GLSL\u304a\u3058\u3055\u3093\u306e\u982d\u4e0a\uff09\n    vec3 cSide = cross(cDir, cUp);      // \u5916\u7a4d\u3092\u4f7f\u3063\u3066\u6a2a\u65b9\u5411\u3092\u7b97\u51fa\n    float targetDepth = 1.0;            // \u6df1\u5ea6\n\n    // \u30ec\u30a4\u306e\u751f\u6210\n    vec3 ray = normalize(cSide * p.x + cUp * p.y + cDir * targetDepth);\n\n    // \u30ec\u30a4\u30de\u30fc\u30c1\u30f3\u30b0\u30eb\u30fc\u30d7\n    float dist = 0.0;   // \u30ec\u30a4\u3068\u7a74\u306e\u8ddd\u96e2\n    float rLen = 0.0;   // \u30ec\u30a4\u306e\u9577\u3055\n    vec3  rPos = cPos;  // \u30ec\u30a4\u306e\u5148\u7aef\n    for (int i = 0; i < 8; i++) {\n        dist = dHole(rPos);\n        rLen += dist;\n        rPos = cPos + ray * rLen;\n    }\n\n    // \u885d\u7a81\u5224\u5b9a\u3067\u8272\u306e\u51fa\u3057\u308f\u3051\n    if (abs(dist) < 0.001) {\n        color = hole;\n    } else {\n        color = sand;\n    }\n\n    // \u6700\u7d42\u7684\u306b\u8a72\u5f53\u30d4\u30af\u30bb\u30eb\u306b\u51fa\u529b\u3059\u308b\u8272\n    gl_FragColor = vec4(color, 1.0);\n}\n\n\n\u5b9f\u884c\u7d50\u679c\u306f\u3053\u3061\u3089\n\n\n\n[ \u89e3\u8aac ]\n\u5186\u3092\u66f8\u304f\u3060\u3051\u3067\u3042\u308c\u3070\u3001length\u95a2\u6570\u3084step\u95a2\u6570\u3092\u4f7f\u3048\u3070\u5b9f\u88c5\u3067\u304d\u307e\u3059\u3002\u3057\u304b\u3057\u4eca\u56de\u306f\u3001\u5f8c\u308d\u306e\u9805\u76ee\u3067\u300c\u5149(ray)\u300d\u3092\u4f7f\u3046\u305f\u3081\u3001\u30ec\u30a4\u30de\u30fc\u30c1\u30f3\u30b0\u3067\u5b9f\u88c5\u3057\u3066\u3044\u307e\u3059\u3002\u30ec\u30a4\u30de\u30fc\u30c1\u30f3\u30b0\u3068\u306f\u3001\u305d\u306e\u540d\u306e\u901a\u308a\u3001\u5149\u3092\u5f90\u3005\u306b\u9032\u3081\u3066\u3001\u5149\u3068\u7269\u4f53\u306e\u885d\u7a81\u5224\u5b9a\u3092\u884c\u3046\u624b\u6cd5\u3067\u3059\u3002\u3053\u308c\u306b\u3088\u308a\u3001\u5149\u304c\u7269\u4f53\u306b\u885d\u7a81\u3057\u305f\u304b\u5426\u304b\u3067\u51e6\u7406\u3092\u66f8\u304d\u5206\u3051\u308b\u3053\u3068\u304c\u53ef\u80fd\u306b\u306a\u308a\u307e\u3059\u3002\n\uff08\u6ce8\uff09\n\u3061\u306a\u307f\u306b\u4eca\u56de\u306f\u300c\u7a74\u300d\u3068\u79f0\u3057\u3066\u3044\u307e\u3059\u304c\u3001\u63cf\u304b\u308c\u3066\u3044\u308b\u306e\u306f\u7acb\u4f53\u7684\u306a\u300c\u7403\u4f53\u300d\u3067\u3059\u3002\u305d\u306e\u305f\u3081\u3001\u6cd5\u7dda\u60c5\u5831\u3092\u4f7f\u3048\u3070\u3001\u9670\u3092\u843d\u3068\u3057\u3066\u7acb\u4f53\u7684\u306b\u898b\u305b\u308b\u3053\u3068\u3082\u3067\u304d\u307e\u3059\u3002\n\n\u304a\u6e6f\u304c\u6e67\u304d\u51fa\u3066\u304d\u305f\nGLSL\u304a\u3058\u3055\u3093\u304c\u7a74\u3092\u6398\u308a\u7d9a\u3051\u308b\u3053\u3068\u6570\u5341\u5206\u3001\u3088\u3046\u3084\u304f\u6e6f\u304c\u6e67\u304d\u51fa\u3066\u304d\u307e\u3057\u305f\u3002\u5b63\u7bc0\u306f\u51ac\u3067\u3059\u304b\u3089\u3001\u65e9\u304f\u6d78\u304b\u308a\u305f\u3044\u3067\u3059\u306d\u3002\nprecision mediump float;\nuniform vec2 u_resolution;\nuniform float u_time;\n\n//===================================\n// \u30fb\u30e9\u30f3\u30c0\u30e0 / \u30ce\u30a4\u30ba / \u975e\u6574\u6570\u30d6\u30e9\u30a6\u30f3\u904b\u52d5\n// https://thebookofshaders.com/13/?lan=jp\n//===================================\n\nfloat random (in vec2 p) { \n    return fract(sin(dot(p.xy,vec2(12.9898,78.233)))*43758.5453123);\n}\n\nfloat noise (in vec2 p) {\n    vec2 i = floor(p);\n    vec2 f = fract(p);\n    float a = random(i);\n    float b = random(i + vec2(1.0, 0.0));\n    float c = random(i + vec2(0.0, 1.0));\n    float d = random(i + vec2(1.0, 1.0));\n    vec2 u = f * f * (3.0 - 2.0 * f);\n    return mix(a, b, u.x) + (c - a)* u.y * (1.0 - u.x) + (d - b) * u.x * u.y;\n}\n\n#define OCTAVES 4\nfloat fbm (in vec2 p) {\n    float value = 0.0;\n    float amplitud = 0.1;\n    float frequency = 0.0;\n    for (int i = 0; i < OCTAVES; i++) {\n        value += amplitud * noise(p);\n        p *= 2.0;\n        amplitud *= 0.8;\n    }\n    return value;\n}\n\n//===================================\n// \u30fb\u8ddd\u96e2\u95a2\u6570\n// http://iquilezles.org/www/articles/distfunctions/distfunctions.htm\n//===================================\n\nfloat dSpring(vec3 p) {\n    vec3 n = normalize(vec3(0.0, 1.0, 0.0));\n    float gush = fbm(vec2(p.x, length(p * 2.5) - u_time * 3.0) * 0.15); // \u6e67\u304d\u51fa\u308b\u52d5\u304d\u3092\u5b9f\u88c5\n    return dot(p, n) + gush;\n}\n\n//===================================\n// \u30fb\u6cd5\u7dda\u306e\u53d6\u5f97\n// https://wgld.org/d/glsl/g010.html\n//===================================\n\nvec3 genNormal(vec3 p) {\n    float d = 0.001;\n    return normalize(vec3(\n        dSpring(p + vec3(  d, 0.0, 0.0)) - dSpring(p + vec3( -d, 0.0, 0.0)),\n        dSpring(p + vec3(0.0,   d, 0.0)) - dSpring(p + vec3(0.0,  -d, 0.0)),\n        dSpring(p + vec3(0.0, 0.0,   d)) - dSpring(p + vec3(0.0, 0.0,  -d))\n    ));\n}\n\n//===================================\n// \u30fb\u30e1\u30a4\u30f3\u95a2\u6570\n//===================================\n\nvoid main() {\n    // \u8272\u306e\u5ba3\u8a00\n    vec3 spring = vec3(0.9, 0.9, 0.6);\n\n    // color\u306e\u521d\u671f\u5316\n    vec3 color = vec3(0.0);\n\n    // \u5ea7\u6a19\u306e\u6b63\u898f\u5316(range: -1.0 ~ 1.0)\n    vec2 p = (gl_FragCoord.xy * 2.0 - u_resolution) / min(u_resolution.x, u_resolution.y);\n\n    // \u30ab\u30e1\u30e9\u306e\u30bb\u30c3\u30c6\u30a3\u30f3\u30b0\n    vec3 cPos = vec3(0.0,  4.0,   3.0);     // \u30ab\u30e1\u30e9\u306e\u4f4d\u7f6e\uff08GLSL\u304a\u3058\u3055\u3093\u306e\u7acb\u3061\u4f4d\u7f6e\uff09\n    vec3 cDir = vec3(0.0, -1.0,  -1.0);     // \u30ab\u30e1\u30e9\u306e\u6ce8\u8996\u70b9\uff08GLSL\u304a\u3058\u3055\u3093\u306e\u8996\u70b9\uff09\n    vec3 cUp  = vec3(0.0,  0.5,   1.0);     // \u30ab\u30e1\u30e9\u306e\u4e0a\u65b9\u5411\uff08GLSL\u304a\u3058\u3055\u3093\u306e\u982d\u4e0a\uff09\n    vec3 cSide = cross(cDir, cUp);          // \u5916\u7a4d\u3092\u4f7f\u3063\u3066\u6a2a\u65b9\u5411\u3092\u7b97\u51fa\n    float targetDepth = 1.0;                // \u6df1\u5ea6\n\n    // \u30ec\u30a4\u306e\u751f\u6210\n    vec3 ray = normalize(cSide * p.x + cUp * p.y + cDir * targetDepth);\n\n    // \u30ec\u30a4\u30de\u30fc\u30c1\u30f3\u30b0\u30eb\u30fc\u30d7\n    float dist = 0.0;   // \u30ec\u30a4\u3068\u7a74\u306e\u8ddd\u96e2\n    float rLen = 0.0;   // \u30ec\u30a4\u306e\u9577\u3055\n    vec3  rPos = cPos;  // \u30ec\u30a4\u306e\u5148\u7aef\n    for (int i = 0; i < 32; i++) {\n        dist = dSpring(rPos);\n        rLen += dist;\n        rPos = cPos + ray * rLen;\n    }\n\n    // \u885d\u7a81\u5224\u5b9a\u3067\u8272\u306e\u51fa\u3057\u308f\u3051\n    if (abs(dist) < 0.001) {\n        vec3 normal = genNormal(rPos);  // \u7269\u4f53\u306e\u6cd5\u7dda\u60c5\u5831\u3092\u53d6\u5f97\n        vec3 light = normalize(vec3(1.0, 1.0, 0.0));    // \u30e9\u30a4\u30c8\u306e\u4f4d\u7f6e\n        float diff = max(dot(normal, light), 0.1);  // \u62e1\u6563\u5149\u3092\u5185\u7a4d\u3067\u7b97\u51fa\n        color = spring * diff;\n    } else {\n        color = vec3(0.0);\n    }\n\n    // \u6700\u7d42\u7684\u306b\u8a72\u5f53\u30d4\u30af\u30bb\u30eb\u306b\u51fa\u529b\u3059\u308b\u8272\n    gl_FragColor = vec4(color, 1.0);\n}\n\n\u5b9f\u884c\u7d50\u679c\u306f\u3053\u3061\u3089 / PC\u3067\u306e\u95b2\u89a7\u3092\u63a8\u5968\n\n\n[ \u89e3\u8aac ]\n\u3053\u3053\u3067\u4e3b\u306b\u884c\u306a\u3063\u3066\u3044\u308b\u3053\u3068\u306f\u3001\u4e3b\u306b3\u3064\u3067\u3059\u3002\n- \u8ddd\u96e2\u95a2\u6570\u3092sphere\u304b\u3089plane\u306b\u5909\u66f4\n- \u6cd5\u7dda\u60c5\u5831\u3068\u30e9\u30a4\u30c8\u3092\u53d6\u308a\u5165\u308c\u3066\u3001\u62e1\u6563\u5149\u3092\u5b9f\u88c5\n- \u975e\u6574\u6570\u30d6\u30e9\u30a6\u30f3\u904b\u52d5\u3092\u4f7f\u3063\u3066\u3001\u7269\u4f53\u306b\u63fa\u3089\u304e\u3092\u4f5c\u308b\n\u3053\u3061\u3089\u306e\u30b5\u30a4\u30c8\u3067\u306f\u3001\u69d8\u3005\u306a\u7269\u4f53\u306e\u8ddd\u96e2\u95a2\u6570\u3092\u793a\u3057\u3066\u304f\u308c\u3066\u3044\u308b\u306e\u3067\u3001\u3068\u3066\u3082\u4fbf\u5229\u3067\u3059\u306d\uff01\n\n\u7167\u660e\u3092\u3064\u3051\u308b\nGLSL\u304a\u3058\u3055\u3093\u306f\u3001\u6e29\u6cc9\u3092\u6398\u308a\u5f53\u3066\u305f\u304b\u3089\u306b\u306f\u4e00\u652b\u5343\u91d1\u3092\u72d9\u304a\u3046\u3001\u3068\u8003\u3048\u307e\u3057\u305f\u3002\u305d\u3053\u3067\u3001\u7167\u660e\u5668\u5177\u3092\u4f7f\u3063\u3066\u3001\u3044\u3044\u611f\u3058\u306a\u96f0\u56f2\u6c17\u306e\u6e29\u6cc9\u3092\u4f5c\u308a\u59cb\u3081\u307e\u3057\u305f\u3002\nprecision mediump float;\nuniform vec2 u_resolution;\nuniform float u_time;\n\n//===================================\n// \u30fb\u30e9\u30f3\u30c0\u30e0 / \u30ce\u30a4\u30ba / \u975e\u6574\u6570\u30d6\u30e9\u30a6\u30f3\u904b\u52d5\n// http://iquilezles.org/www/articles/distfunctions/distfunctions.htm\n//===================================\n\nfloat random (in vec2 p) { \n    return fract(sin(dot(p.xy,vec2(12.9898,78.233)))*43758.5453123);\n}\n\nfloat noise (in vec2 p) {\n    vec2 i = floor(p);\n    vec2 f = fract(p);\n    float a = random(i);\n    float b = random(i + vec2(1.0, 0.0));\n    float c = random(i + vec2(0.0, 1.0));\n    float d = random(i + vec2(1.0, 1.0));\n    vec2 u = f * f * (3.0 - 2.0 * f);\n    return mix(a, b, u.x) + (c - a)* u.y * (1.0 - u.x) + (d - b) * u.x * u.y;\n}\n\n#define OCTAVES 4\nfloat fbm (in vec2 p) {\n    float value = 0.0;\n    float amplitud = 0.2;\n    float frequency = .9;\n    for (int i = 0; i < OCTAVES; i++) {\n        value += amplitud * noise(p);\n        p *= 2.0;\n        amplitud *= 0.8;\n    }\n    return value;\n}\n\n//===================================\n// \u30fb\u8ddd\u96e2\u95a2\u6570\n// http://iquilezles.org/www/articles/distfunctions/distfunctions.htm\n//===================================\n\nfloat dSpring(vec3 p) {\n    vec3 n = normalize(vec3(0.0, 1.0, 0.0));\n\n    // \u8907\u6570\u306e\u975e\u6574\u6570\u30d6\u30e9\u30a6\u30f3\u904b\u52d5\u3092\u91cd\u306d\u5408\u308f\u305b\u3066\u3001\u4e0d\u898f\u5247\u3063\u307d\u3044\u63fa\u3089\u304e\u306b\u3059\u308b\n    float s = fbm(vec2(p.x, length(p * 1.5) - u_time * 1.25) * .075);\n    float t = fbm(vec2(p.x, length(p * 2.5) - u_time * 2.75) * .125);\n    float u = fbm(vec2(p.x, length(p * 3.5) - u_time * 0.75) * .075);\n    float v = s + t + u;\n    return dot(p, n) + v;\n}\n\n//===================================\n// \u30fb\u6cd5\u7dda\u306e\u53d6\u5f97\n// https://wgld.org/d/glsl/g010.html\n//===================================\n\nvec3 genNormal(vec3 p) {\n    float d = 0.001;\n    return normalize(vec3(\n        dSpring(p + vec3(  d, 0.0, 0.0)) - dSpring(p + vec3( -d, 0.0, 0.0)),\n        dSpring(p + vec3(0.0,   d, 0.0)) - dSpring(p + vec3(0.0,  -d, 0.0)),\n        dSpring(p + vec3(0.0, 0.0,   d)) - dSpring(p + vec3(0.0, 0.0,  -d))\n    ));\n}\n\n//===================================\n// \u30fb\u30e1\u30a4\u30f3\u95a2\u6570\n//===================================\n\nvoid main() {\n    // \u8272\u306e\u5ba3\u8a00\n    vec3 spring = vec3(0.9, 0.9, 0.6);\n\n    // color\u306e\u521d\u671f\u5316\n    vec3 color = vec3(0.0);\n\n    // \u5ea7\u6a19\u306e\u6b63\u898f\u5316(range: -1.0 ~ 1.0)\n    vec2 p = (gl_FragCoord.xy * 2.0 - u_resolution) / min(u_resolution.x, u_resolution.y);\n\n    // \u30ab\u30e1\u30e9\u306e\u30bb\u30c3\u30c6\u30a3\u30f3\u30b0\n    vec3 cPos = vec3(0.0,  3.0,   6.0);     // \u30ab\u30e1\u30e9\u306e\u4f4d\u7f6e\uff08GLSL\u304a\u3058\u3055\u3093\u306e\u7acb\u3061\u4f4d\u7f6e\uff09\n    vec3 cDir = vec3(0.0,  -1.0,  -1.0);        // \u30ab\u30e1\u30e9\u306e\u6ce8\u8996\u70b9\uff08GLSL\u304a\u3058\u3055\u3093\u306e\u8996\u70b9\uff09\n    vec3 cUp  = vec3(0.0,   0.5,   1.0);    // \u30ab\u30e1\u30e9\u306e\u4e0a\u65b9\u5411\uff08GLSL\u304a\u3058\u3055\u3093\u306e\u982d\u4e0a\uff09\n    vec3 cSide = cross(cDir, cUp);          // \u5916\u7a4d\u3092\u4f7f\u3063\u3066\u6a2a\u65b9\u5411\u3092\u7b97\u51fa\n    float targetDepth = 1.0;                // \u6df1\u5ea6\n\n    // \u30ec\u30a4\u306e\u751f\u6210\n    vec3 ray = normalize(cSide * p.x + cUp * p.y + cDir * targetDepth);\n\n    // \u30ec\u30a4\u30de\u30fc\u30c1\u30f3\u30b0\u30eb\u30fc\u30d7\n    float dist = 0.0;   // \u30ec\u30a4\u3068\u7a74\u306e\u8ddd\u96e2\n    float rLen = 0.0;   // \u30ec\u30a4\u306e\u9577\u3055\n    vec3  rPos = cPos;  // \u30ec\u30a4\u306e\u5148\u7aef\n    for (int i = 0; i < 32; i++) {\n        dist = dSpring(rPos);\n        rLen += dist;\n        rPos = cPos + ray * rLen;\n    }\n\n    // \u885d\u7a81\u5224\u5b9a\u3067\u8272\u306e\u51fa\u3057\u308f\u3051\n    if (abs(dist) < 0.001) {\n        vec3 normal = genNormal(rPos);  // \u7269\u4f53\u306e\u6cd5\u7dda\u60c5\u5831\u3092\u53d6\u5f97\n        vec3 light = normalize(vec3(sin(u_time), 1.2, 0.0));    // \u30e9\u30a4\u30c8\u306e\u4f4d\u7f6e\n        float diff = max(dot(normal, light), 0.1);  // \u62e1\u6563\u53cd\u5c04\u5149\u3092\u5185\u7a4d\u3067\u7b97\u51fa\n\n        vec3 eye = reflect(normalize(rPos - cPos), normal);\n        float speculer = pow(clamp(dot(eye, light), 0.0, 1.0) * 1.025, 30.0);   // \u53cd\u5c04\u5149\u3092\u7b97\u51fa\n\n        color = (spring + speculer) * diff;\n    } else {\n        color = vec3(0.0);\n    }\n\n    // \u6700\u7d42\u7684\u306b\u8a72\u5f53\u30d4\u30af\u30bb\u30eb\u306b\u51fa\u529b\u3059\u308b\u8272\n    gl_FragColor = vec4(color, 1.0);\n}\n\n\u5b9f\u884c\u7d50\u679c\u306f\u3053\u3061\u3089 / PC\u3067\u306e\u95b2\u89a7\u3092\u63a8\u5968\n\n\n[ \u89e3\u8aac ]\n\u3053\u3053\u3067\u4e3b\u306b\u884c\u306a\u3063\u3066\u3044\u308b\u3053\u3068\u306f\u3001\u4e3b\u306b2\u3064\u3067\u3059\u3002\n- \u53cd\u5c04\u5149\u306e\u5b9f\u88c5\n- \u975e\u6574\u6570\u30d6\u30e9\u30a6\u30f3\u904b\u52d5\u3092\u8907\u6570\u4f7f\u3063\u3066\u3001\u4e0d\u898f\u5247\u3063\u307d\u3044\u63fa\u3089\u304e\u3092\u4f5c\u308b\n\n\u307e\u3068\u3081\nGLSL\u3067\u6e29\u6cc9\uff08\u306e\u3088\u3046\u306a\u3082\u306e\uff09\u3092\u63cf\u753b\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3057\u305f \n\u5ca9\u3084\u6e6f\u6c17\u3082\u63cf\u753b\u3057\u3066\u3001\u9732\u5929\u98a8\u5442\u3092\u4f5c\u308a\u305f\u304f\u306a\u3063\u3066\u3057\u307e\u3044\u307e\u3059\u3002\n\u30b7\u30a7\u30fc\u30c0\u306f\u3068\u3063\u3064\u304d\u306b\u304f\u3044\u5370\u8c61\u304c\u3042\u308b\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u304c\u3001\u5049\u5927\u306a\u5148\u4eba\u305f\u3061\u304c\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u3084\u95a2\u6570\u3092\u7528\u610f\u3057\u3066\u304f\u308c\u3066\u3044\u307e\u3059\u306e\u3067\u3001\u3080\u3057\u308d\u5b66\u3073\u6613\u3044\u306f\u305a\u3067\u3059\u3002\n\u300c\u305d\u308d\u305d\u308dWebGL\u6848\u4ef6\u3092\u62b1\u3048\u59cb\u3081\u305d\u3046...\u300d\u3068\u3044\u3046\u65b9\u306f\u3001\u662f\u975e\u3001\u30b7\u30a7\u30fc\u30c0\u306b\u3082\u30c8\u30e9\u30a4\u3057\u3066\u307f\u3066\u304f\u3060\u3055\u3044\uff01\n\u3053\u306e\u8a18\u4e8b\u306f\u3001[\u65e9\u7a32\u7530\u5927\u5b66 AdventCalender 2016](http://qiita.com/advent-calendar/2016/waseda) 14\u65e5\u76ee\u3067\u3059\u3002\n\n\u3068\u3042\u308bGLSL\u304a\u3058\u3055\u3093\u304c\u30d5\u30e9\u30b0\u30e1\u30f3\u30c8\u30b7\u30a7\u30fc\u30c0\u3067\u6e29\u6cc9\u3092\u6398\u308b\u8a71\u3092\u3057\u307e\u3059:hotsprings: \n\u6700\u7d42\u7684\u306b\u6398\u308c\u305f\u6e29\u6cc9\u306f[\u3053\u3061\u3089](http://glslsandbox.com/e#37293.0)\u3067\u3059\u3002PC\u3067\u306e\u95b2\u89a7\u3092\u63a8\u5968\u3002\n\n![\u30a2\u30a6\u30c8\u30d7\u30c3\u30c8](https://media.giphy.com/media/l4JzcaH0TpPbegA4U/giphy.gif \"\u30a2\u30a6\u30c8\u30d7\u30c3\u30c8\")\n\n\uff08\u6e6f\u306b\u898b\u3048\u306a\u304f\u3066\u3082\u3001\u300c\u3053\u308c\u306f\u6e6f\u3060...\u300d\u3068\u8a00\u3044\u805e\u304b\u305b\u307e\u3057\u3087\u3046\uff09\n\n\n\n\n# \u306f\u3058\u3081\u306b\n- \u672c\u8a18\u4e8b\u306f\u3001\u7d041\u30f6\u6708\u306eGLSL\u5b66\u7fd2\u3092\u307e\u3068\u3081\u308b\u3053\u3068\u304c\u76ee\u7684\u3067\u3059\u3002\n- \u7c21\u6613\u7684\u306b\u30b3\u30fc\u30c9\u3092\u63b2\u8f09\u3059\u308b\u305f\u3081\u306b\u3001[The Book of Shaders](http://thebookofshaders.com/edit.php)\u306e\u30aa\u30f3\u30e9\u30a4\u30f3\u30a8\u30c7\u30a3\u30bf\u3092\u4f7f\u7528\u3057\u3066\u3044\u307e\u3059\u3002\u89e3\u8aac\u7b49\u306f\u3001\u3053\u3061\u3089\u306b\u30b3\u30e1\u30f3\u30c8\u3067\u63b2\u8f09\u3057\u307e\u3059\u3002\n\n\n\n# GLSL\u3068\u306f\nC\u8a00\u8a9e\u3092\u30d9\u30fc\u30b9\u3068\u3057\u305f\u30b7\u30a7\u30fc\u30c7\u30a3\u30f3\u30b0\u8a00\u8a9e\u3067\u3059\u3002\n\u8a73\u3057\u304f\u306f\u5049\u5927\u306a\u5148\u4eba\u305f\u3061\u306e\u66f8\u7269\u3092\u304a\u8aad\u307f\u304f\u3060\u3055\u3044\u3002\n- [wgld.org](https://wgld.org/)\n- [GPU \u3067\u6696\u3092\u53d6\u308a\u305f\u3044\u4eba\u306e\u305f\u3081\u306e GLSL Advent Calendar 2016](http://qiita.com/advent-calendar/2016/glsl)\n\n\n\n# \u672c\u7de8\n## \u3042\u3089\u3059\u3058\n\u304a\u3058\u3044\u3055\u3093\u306f\u5c71\u3078\u67f4\u5208\u308a\u306b\u3001\u304a\u3070\u3042\u3055\u3093\u306f\u5ddd\u3078\u6d17\u6fef\u306b\u884c\u304d\u307e\u3057\u305f\u3002\n\u305d\u3057\u3066\u3001GLSL\u304a\u3058\u3055\u3093\u306f\u706b\u5c71\u5730\u5e2f\u3078\u6e29\u6cc9\u3092\u6398\u308a\u306b\u884c\u304d\u307e\u3057\u305f\u3068\u3055...:peach:\n\n\n## \u6398\u308a\u3084\u3059\u305d\u3046\u306a\u571f\u58cc\u3092\u63a2\u3059\nGLSL\u304a\u3058\u3055\u3093\u304c\u706b\u5c71\u5730\u5e2f\u3078\u5230\u7740\u3059\u308b\u3068\u3001\u305d\u3053\u306f\u4e00\u9762\u3001\u7802\u5229(\u7070\u8272)\u3070\u304b\u308a\u3002\u5f7c\u306f\u3001\u6e29\u6cc9\u3092\u6398\u308b\u305f\u3081\u306b\u30b9\u30b3\u30c3\u30d7\u3092\u5165\u308c\u3084\u3059\u305d\u3046\u306a\u571f(\u8336\u8272)\u306e\u5730\u9762\u3092\u63a2\u3057\u59cb\u3081\u307e\u3057\u305f:mag:\n\n```glsl\nprecision mediump float;\n\nvoid main(){\n\tvec3 gravel = vec3(0.3, 0.3, 0.3); // \u7802\u5229\u306eRGB\n\tvec3 soil = vec3(0.7, 0.5, 0.3); // \u571f\u306eRGB\n\t\n\t//-------------------------\n\t// \u4ee3\u5165\u5024\u3092soil\u306b\u5909\u66f4\u3059\u308b\n\t//-------------------------\n\tvec3 color = gravel;\n\t\n\tgl_FragColor = vec4(color, 1.0); // \u51fa\u529b\u3059\u308b\u8272\n}\n\n```\n\n[\u5b9f\u884c\u7d50\u679c\u306f\u3053\u3061\u3089](http://thebookofshaders.com/edit.php?log=161213122606)\n\n![soil](https://qiita-image-store.s3.amazonaws.com/0/136455/6aaadfc3-0d0a-2e8b-2ef5-8cc4a7670a47.gif)\n\n\n### [ \u89e3\u8aac ]\ngl_FragColor\u306b\u3001\u6700\u7d42\u7684\u306b\u51fa\u529b\u3055\u308c\u308b\u8272\u30924\u6b21\u5143\u30d9\u30af\u30c8\u30eb\u3068\u3057\u3066\u4ee3\u5165\u3057\u307e\u3059\u30024\u6b21\u5143\u3067\u3042\u308b\u7406\u7531\u306f\u3001\u7dda\u5f62\u4ee3\u6570\u306e\u5e73\u884c\u79fb\u52d5\u51e6\u7406\u4e91\u3005\u304c\u95a2\u308f\u3063\u3066\u304f\u308b\u3089\u3057\u3044\u306e\u3067\u3059\u304c\u3001\u5272\u611b\u3057\u307e\u3059\u3002\u3061\u306a\u307f\u306b\u4eca\u56de\u306f1\u9762\u30d9\u30bf\u5857\u308a\u3067\u3059\u304c\u3001\u30d5\u30e9\u30b0\u30e1\u30f3\u30c8\u30b7\u30a7\u30fc\u30c0\u3067\u306f1\u30641\u3064\u306e\u30d4\u30af\u30bb\u30eb\u3054\u3068\u306b\u63cf\u753b\u51e6\u7406\u304c\u8d70\u308a\u307e\u3059\u3002\n\n\n## \u76ee\u304b\u3089\u30d3\u30fc\u30e0\u3067\u7a74\u3092\u6398\u308b\nGLSL\u304a\u3058\u3055\u3093\u306f\u3001\u76ee\u304b\u3089\u30d3\u30fc\u30e0(ray)\u3092\u653e\u3064\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\u3044\u3084\u3041\u3001\u3059\u3054\u3044\u3067\u3059\u306d\uff01 \u305d\u308c\u3067\u306f\u3001\u5730\u9762\u306b\u30d3\u30fc\u30e0\u3092\u5f53\u3066\u3066\u3001\u7a74\u3092\u6398\u308a\u307e\u3057\u3087\u3046\u3002\uff08\u7802\u5229\u306e\u5730\u9762\u3067\u3082\u826f\u304b\u3063\u305f\u306e\u3067\u306f...\uff1f\uff09:cyclone:\n\n\n```glsl\nprecision mediump float;\nuniform vec2 u_resolution;\n\n//===================================\n// \u30fb\u30ec\u30a4\u30de\u30fc\u30c1\u30f3\u30b0\u306e\u53c2\u8003\n// https://wgld.org/d/glsl/g008.html\n\n// \u30fb\u8ddd\u96e2\u95a2\u6570\n// http://iquilezles.org/www/articles/distfunctions/distfunctions.htm\n//===================================\n\n// \u8ddd\u96e2\u95a2\u6570\uff08sphere\uff09\nfloat dHole(vec3 p) {\n\treturn length(p) - 1.0;\n}\n\n//===================================\n// \u30fb\u30e1\u30a4\u30f3\u95a2\u6570\n//===================================\n\nvoid main() {\n\t// \u8272\u306e\u5ba3\u8a00\n\tvec3 sand = vec3(0.7, 0.5, 0.3);\n\tvec3 hole = vec3(0.4, 0.2, 0.0);\n\t\n\t// color\u306e\u521d\u671f\u5316\n\tvec3 color = vec3(0.0);\n\t\n\t// \u5ea7\u6a19\u306e\u6b63\u898f\u5316(range: -1.0 ~ 1.0)\n\tvec2 p = (gl_FragCoord.xy * 2.0 - u_resolution) / min(u_resolution.x, u_resolution.y);\n\t\n\t// \u30ab\u30e1\u30e9\u306e\u30bb\u30c3\u30c6\u30a3\u30f3\u30b0\n\tvec3 cPos = vec3(0.0, 0.0, 2.0); \t// \u30ab\u30e1\u30e9\u306e\u4f4d\u7f6e\uff08GLSL\u304a\u3058\u3055\u3093\u306e\u7acb\u3061\u4f4d\u7f6e\uff09\n\tvec3 cDir = vec3(0.0, 0.0, -1.0); \t// \u30ab\u30e1\u30e9\u306e\u6ce8\u8996\u70b9\uff08GLSL\u304a\u3058\u3055\u3093\u306e\u8996\u70b9\uff09\n\tvec3 cUp  = vec3(0.0, 1.0, 0.0); \t// \u30ab\u30e1\u30e9\u306e\u4e0a\u65b9\u5411\uff08GLSL\u304a\u3058\u3055\u3093\u306e\u982d\u4e0a\uff09\n\tvec3 cSide = cross(cDir, cUp);\t\t// \u5916\u7a4d\u3092\u4f7f\u3063\u3066\u6a2a\u65b9\u5411\u3092\u7b97\u51fa\n\tfloat targetDepth = 1.0;\t\t\t// \u6df1\u5ea6\n\t\n\t// \u30ec\u30a4\u306e\u751f\u6210\n\tvec3 ray = normalize(cSide * p.x + cUp * p.y + cDir * targetDepth);\n\t\n\t// \u30ec\u30a4\u30de\u30fc\u30c1\u30f3\u30b0\u30eb\u30fc\u30d7\n\tfloat dist = 0.0; \t// \u30ec\u30a4\u3068\u7a74\u306e\u8ddd\u96e2\n\tfloat rLen = 0.0; \t// \u30ec\u30a4\u306e\u9577\u3055\n\tvec3  rPos = cPos;\t// \u30ec\u30a4\u306e\u5148\u7aef\n\tfor (int i = 0; i < 8; i++) {\n\t\tdist = dHole(rPos);\n\t\trLen += dist;\n\t\trPos = cPos + ray * rLen;\n\t}\n\t\n\t// \u885d\u7a81\u5224\u5b9a\u3067\u8272\u306e\u51fa\u3057\u308f\u3051\n\tif (abs(dist) < 0.001) {\n\t\tcolor = hole;\n\t} else {\n\t\tcolor = sand;\n\t}\n\n\t// \u6700\u7d42\u7684\u306b\u8a72\u5f53\u30d4\u30af\u30bb\u30eb\u306b\u51fa\u529b\u3059\u308b\u8272\n\tgl_FragColor = vec4(color, 1.0);\n}\n```\n\n- [\u5b9f\u884c\u7d50\u679c\u306f\u3053\u3061\u3089](http://thebookofshaders.com/edit.php?log=161213122520)\n\n<img width=\"396\" alt=\"hole\" src=\"https://qiita-image-store.s3.amazonaws.com/0/136455/9021b8e9-0845-8646-1997-466222b130a3.png\">\n\n\n### [ \u89e3\u8aac ]\n\u5186\u3092\u66f8\u304f\u3060\u3051\u3067\u3042\u308c\u3070\u3001length\u95a2\u6570\u3084step\u95a2\u6570\u3092\u4f7f\u3048\u3070\u5b9f\u88c5\u3067\u304d\u307e\u3059\u3002\u3057\u304b\u3057\u4eca\u56de\u306f\u3001\u5f8c\u308d\u306e\u9805\u76ee\u3067\u300c\u5149(ray)\u300d\u3092\u4f7f\u3046\u305f\u3081\u3001\u30ec\u30a4\u30de\u30fc\u30c1\u30f3\u30b0\u3067\u5b9f\u88c5\u3057\u3066\u3044\u307e\u3059\u3002\u30ec\u30a4\u30de\u30fc\u30c1\u30f3\u30b0\u3068\u306f\u3001\u305d\u306e\u540d\u306e\u901a\u308a\u3001\u5149\u3092\u5f90\u3005\u306b\u9032\u3081\u3066\u3001\u5149\u3068\u7269\u4f53\u306e\u885d\u7a81\u5224\u5b9a\u3092\u884c\u3046\u624b\u6cd5\u3067\u3059\u3002\u3053\u308c\u306b\u3088\u308a\u3001\u5149\u304c\u7269\u4f53\u306b\u885d\u7a81\u3057\u305f\u304b\u5426\u304b\u3067\u51e6\u7406\u3092\u66f8\u304d\u5206\u3051\u308b\u3053\u3068\u304c\u53ef\u80fd\u306b\u306a\u308a\u307e\u3059\u3002\n\n\uff08\u6ce8\uff09\n\u3061\u306a\u307f\u306b\u4eca\u56de\u306f\u300c\u7a74\u300d\u3068\u79f0\u3057\u3066\u3044\u307e\u3059\u304c\u3001\u63cf\u304b\u308c\u3066\u3044\u308b\u306e\u306f\u7acb\u4f53\u7684\u306a\u300c\u7403\u4f53\u300d\u3067\u3059\u3002\u305d\u306e\u305f\u3081\u3001\u6cd5\u7dda\u60c5\u5831\u3092\u4f7f\u3048\u3070\u3001\u9670\u3092\u843d\u3068\u3057\u3066\u7acb\u4f53\u7684\u306b\u898b\u305b\u308b\u3053\u3068\u3082\u3067\u304d\u307e\u3059\u3002\n\n\n## \u304a\u6e6f\u304c\u6e67\u304d\u51fa\u3066\u304d\u305f\nGLSL\u304a\u3058\u3055\u3093\u304c\u7a74\u3092\u6398\u308a\u7d9a\u3051\u308b\u3053\u3068\u6570\u5341\u5206\u3001\u3088\u3046\u3084\u304f\u6e6f\u304c\u6e67\u304d\u51fa\u3066\u304d\u307e\u3057\u305f\u3002\u5b63\u7bc0\u306f\u51ac\u3067\u3059\u304b\u3089\u3001\u65e9\u304f\u6d78\u304b\u308a\u305f\u3044\u3067\u3059\u306d\u3002:hotsprings:\n\n```glsl\nprecision mediump float;\nuniform vec2 u_resolution;\nuniform float u_time;\n\n//===================================\n// \u30fb\u30e9\u30f3\u30c0\u30e0 / \u30ce\u30a4\u30ba / \u975e\u6574\u6570\u30d6\u30e9\u30a6\u30f3\u904b\u52d5\n// https://thebookofshaders.com/13/?lan=jp\n//===================================\n\nfloat random (in vec2 p) { \n\treturn fract(sin(dot(p.xy,vec2(12.9898,78.233)))*43758.5453123);\n}\n\nfloat noise (in vec2 p) {\n\tvec2 i = floor(p);\n\tvec2 f = fract(p);\n\tfloat a = random(i);\n\tfloat b = random(i + vec2(1.0, 0.0));\n\tfloat c = random(i + vec2(0.0, 1.0));\n\tfloat d = random(i + vec2(1.0, 1.0));\n\tvec2 u = f * f * (3.0 - 2.0 * f);\n\treturn mix(a, b, u.x) + (c - a)* u.y * (1.0 - u.x) + (d - b) * u.x * u.y;\n}\n\n#define OCTAVES 4\nfloat fbm (in vec2 p) {\n\tfloat value = 0.0;\n\tfloat amplitud = 0.1;\n\tfloat frequency = 0.0;\n\tfor (int i = 0; i < OCTAVES; i++) {\n\t\tvalue += amplitud * noise(p);\n\t\tp *= 2.0;\n\t\tamplitud *= 0.8;\n\t}\n\treturn value;\n}\n\n//===================================\n// \u30fb\u8ddd\u96e2\u95a2\u6570\n// http://iquilezles.org/www/articles/distfunctions/distfunctions.htm\n//===================================\n\nfloat dSpring(vec3 p) {\n\tvec3 n = normalize(vec3(0.0, 1.0, 0.0));\n\tfloat gush = fbm(vec2(p.x, length(p * 2.5) - u_time * 3.0) * 0.15); // \u6e67\u304d\u51fa\u308b\u52d5\u304d\u3092\u5b9f\u88c5\n\treturn dot(p, n) + gush;\n}\n\n//===================================\n// \u30fb\u6cd5\u7dda\u306e\u53d6\u5f97\n// https://wgld.org/d/glsl/g010.html\n//===================================\n\nvec3 genNormal(vec3 p) {\n\tfloat d = 0.001;\n\treturn normalize(vec3(\n\t\tdSpring(p + vec3(  d, 0.0, 0.0)) - dSpring(p + vec3( -d, 0.0, 0.0)),\n\t\tdSpring(p + vec3(0.0,   d, 0.0)) - dSpring(p + vec3(0.0,  -d, 0.0)),\n\t\tdSpring(p + vec3(0.0, 0.0,   d)) - dSpring(p + vec3(0.0, 0.0,  -d))\n\t));\n}\n\n//===================================\n// \u30fb\u30e1\u30a4\u30f3\u95a2\u6570\n//===================================\n\nvoid main() {\n\t// \u8272\u306e\u5ba3\u8a00\n\tvec3 spring = vec3(0.9, 0.9, 0.6);\n\n\t// color\u306e\u521d\u671f\u5316\n\tvec3 color = vec3(0.0);\n\t\n\t// \u5ea7\u6a19\u306e\u6b63\u898f\u5316(range: -1.0 ~ 1.0)\n\tvec2 p = (gl_FragCoord.xy * 2.0 - u_resolution) / min(u_resolution.x, u_resolution.y);\n\t\n\t// \u30ab\u30e1\u30e9\u306e\u30bb\u30c3\u30c6\u30a3\u30f3\u30b0\n\tvec3 cPos = vec3(0.0,  4.0,   3.0); \t// \u30ab\u30e1\u30e9\u306e\u4f4d\u7f6e\uff08GLSL\u304a\u3058\u3055\u3093\u306e\u7acb\u3061\u4f4d\u7f6e\uff09\n\tvec3 cDir = vec3(0.0, -1.0,  -1.0);\t\t// \u30ab\u30e1\u30e9\u306e\u6ce8\u8996\u70b9\uff08GLSL\u304a\u3058\u3055\u3093\u306e\u8996\u70b9\uff09\n\tvec3 cUp  = vec3(0.0,  0.5,   1.0); \t// \u30ab\u30e1\u30e9\u306e\u4e0a\u65b9\u5411\uff08GLSL\u304a\u3058\u3055\u3093\u306e\u982d\u4e0a\uff09\n\tvec3 cSide = cross(cDir, cUp);\t\t\t// \u5916\u7a4d\u3092\u4f7f\u3063\u3066\u6a2a\u65b9\u5411\u3092\u7b97\u51fa\n\tfloat targetDepth = 1.0;\t\t\t\t// \u6df1\u5ea6\n\t\n\t// \u30ec\u30a4\u306e\u751f\u6210\n\tvec3 ray = normalize(cSide * p.x + cUp * p.y + cDir * targetDepth);\n\t\n\t// \u30ec\u30a4\u30de\u30fc\u30c1\u30f3\u30b0\u30eb\u30fc\u30d7\n\tfloat dist = 0.0; \t// \u30ec\u30a4\u3068\u7a74\u306e\u8ddd\u96e2\n\tfloat rLen = 0.0; \t// \u30ec\u30a4\u306e\u9577\u3055\n\tvec3  rPos = cPos;\t// \u30ec\u30a4\u306e\u5148\u7aef\n\tfor (int i = 0; i < 32; i++) {\n\t\tdist = dSpring(rPos);\n\t\trLen += dist;\n\t\trPos = cPos + ray * rLen;\n\t}\n\t\n\t// \u885d\u7a81\u5224\u5b9a\u3067\u8272\u306e\u51fa\u3057\u308f\u3051\n\tif (abs(dist) < 0.001) {\n\t\tvec3 normal = genNormal(rPos);\t// \u7269\u4f53\u306e\u6cd5\u7dda\u60c5\u5831\u3092\u53d6\u5f97\n\t\tvec3 light = normalize(vec3(1.0, 1.0, 0.0));\t// \u30e9\u30a4\u30c8\u306e\u4f4d\u7f6e\n\t\tfloat diff = max(dot(normal, light), 0.1);\t// \u62e1\u6563\u5149\u3092\u5185\u7a4d\u3067\u7b97\u51fa\n\t\tcolor = spring * diff;\n\t} else {\n\t\tcolor = vec3(0.0);\n\t}\n\n\t// \u6700\u7d42\u7684\u306b\u8a72\u5f53\u30d4\u30af\u30bb\u30eb\u306b\u51fa\u529b\u3059\u308b\u8272\n\tgl_FragColor = vec4(color, 1.0);\n}\n```\n\n[\u5b9f\u884c\u7d50\u679c\u306f\u3053\u3061\u3089](http://thebookofshaders.com/edit.php?log=161213154528) / PC\u3067\u306e\u95b2\u89a7\u3092\u63a8\u5968\n\n![spring](https://qiita-image-store.s3.amazonaws.com/0/136455/45d5788b-282e-5f9b-4eb0-70639978e13f.gif)\n\n\n\n### [ \u89e3\u8aac ]\n\u3053\u3053\u3067\u4e3b\u306b\u884c\u306a\u3063\u3066\u3044\u308b\u3053\u3068\u306f\u3001\u4e3b\u306b3\u3064\u3067\u3059\u3002\n- \u8ddd\u96e2\u95a2\u6570\u3092sphere\u304b\u3089plane\u306b\u5909\u66f4\n- \u6cd5\u7dda\u60c5\u5831\u3068\u30e9\u30a4\u30c8\u3092\u53d6\u308a\u5165\u308c\u3066\u3001\u62e1\u6563\u5149\u3092\u5b9f\u88c5\n- \u975e\u6574\u6570\u30d6\u30e9\u30a6\u30f3\u904b\u52d5\u3092\u4f7f\u3063\u3066\u3001\u7269\u4f53\u306b\u63fa\u3089\u304e\u3092\u4f5c\u308b\n\n[\u3053\u3061\u3089\u306e\u30b5\u30a4\u30c8](http://iquilezles.org/www/articles/distfunctions/distfunctions.htm)\u3067\u306f\u3001\u69d8\u3005\u306a\u7269\u4f53\u306e\u8ddd\u96e2\u95a2\u6570\u3092\u793a\u3057\u3066\u304f\u308c\u3066\u3044\u308b\u306e\u3067\u3001\u3068\u3066\u3082\u4fbf\u5229\u3067\u3059\u306d\uff01\n\n## \u7167\u660e\u3092\u3064\u3051\u308b\nGLSL\u304a\u3058\u3055\u3093\u306f\u3001\u6e29\u6cc9\u3092\u6398\u308a\u5f53\u3066\u305f\u304b\u3089\u306b\u306f\u4e00\u652b\u5343\u91d1\u3092\u72d9\u304a\u3046\u3001\u3068\u8003\u3048\u307e\u3057\u305f\u3002\u305d\u3053\u3067\u3001\u7167\u660e\u5668\u5177\u3092\u4f7f\u3063\u3066\u3001\u3044\u3044\u611f\u3058\u306a\u96f0\u56f2\u6c17\u306e\u6e29\u6cc9\u3092\u4f5c\u308a\u59cb\u3081\u307e\u3057\u305f\u3002:hotsprings:\n\n```glsl\nprecision mediump float;\nuniform vec2 u_resolution;\nuniform float u_time;\n\n//===================================\n// \u30fb\u30e9\u30f3\u30c0\u30e0 / \u30ce\u30a4\u30ba / \u975e\u6574\u6570\u30d6\u30e9\u30a6\u30f3\u904b\u52d5\n// http://iquilezles.org/www/articles/distfunctions/distfunctions.htm\n//===================================\n\nfloat random (in vec2 p) { \n\treturn fract(sin(dot(p.xy,vec2(12.9898,78.233)))*43758.5453123);\n}\n\nfloat noise (in vec2 p) {\n\tvec2 i = floor(p);\n\tvec2 f = fract(p);\n\tfloat a = random(i);\n\tfloat b = random(i + vec2(1.0, 0.0));\n\tfloat c = random(i + vec2(0.0, 1.0));\n\tfloat d = random(i + vec2(1.0, 1.0));\n\tvec2 u = f * f * (3.0 - 2.0 * f);\n\treturn mix(a, b, u.x) + (c - a)* u.y * (1.0 - u.x) + (d - b) * u.x * u.y;\n}\n\n#define OCTAVES 4\nfloat fbm (in vec2 p) {\n\tfloat value = 0.0;\n\tfloat amplitud = 0.2;\n\tfloat frequency = .9;\n\tfor (int i = 0; i < OCTAVES; i++) {\n\t\tvalue += amplitud * noise(p);\n\t\tp *= 2.0;\n\t\tamplitud *= 0.8;\n\t}\n\treturn value;\n}\n\n//===================================\n// \u30fb\u8ddd\u96e2\u95a2\u6570\n// http://iquilezles.org/www/articles/distfunctions/distfunctions.htm\n//===================================\n\nfloat dSpring(vec3 p) {\n\tvec3 n = normalize(vec3(0.0, 1.0, 0.0));\n    \n    // \u8907\u6570\u306e\u975e\u6574\u6570\u30d6\u30e9\u30a6\u30f3\u904b\u52d5\u3092\u91cd\u306d\u5408\u308f\u305b\u3066\u3001\u4e0d\u898f\u5247\u3063\u307d\u3044\u63fa\u3089\u304e\u306b\u3059\u308b\n\tfloat s = fbm(vec2(p.x, length(p * 1.5) - u_time * 1.25) * .075);\n\tfloat t = fbm(vec2(p.x, length(p * 2.5) - u_time * 2.75) * .125);\n\tfloat u = fbm(vec2(p.x, length(p * 3.5) - u_time * 0.75) * .075);\n\tfloat v = s + t + u;\n\treturn dot(p, n) + v;\n}\n\n//===================================\n// \u30fb\u6cd5\u7dda\u306e\u53d6\u5f97\n// https://wgld.org/d/glsl/g010.html\n//===================================\n\nvec3 genNormal(vec3 p) {\n\tfloat d = 0.001;\n\treturn normalize(vec3(\n\t\tdSpring(p + vec3(  d, 0.0, 0.0)) - dSpring(p + vec3( -d, 0.0, 0.0)),\n\t\tdSpring(p + vec3(0.0,   d, 0.0)) - dSpring(p + vec3(0.0,  -d, 0.0)),\n\t\tdSpring(p + vec3(0.0, 0.0,   d)) - dSpring(p + vec3(0.0, 0.0,  -d))\n\t));\n}\n\n//===================================\n// \u30fb\u30e1\u30a4\u30f3\u95a2\u6570\n//===================================\n\nvoid main() {\n\t// \u8272\u306e\u5ba3\u8a00\n\tvec3 spring = vec3(0.9, 0.9, 0.6);\n\n\t// color\u306e\u521d\u671f\u5316\n\tvec3 color = vec3(0.0);\n\t\n\t// \u5ea7\u6a19\u306e\u6b63\u898f\u5316(range: -1.0 ~ 1.0)\n\tvec2 p = (gl_FragCoord.xy * 2.0 - u_resolution) / min(u_resolution.x, u_resolution.y);\n\t\n\t// \u30ab\u30e1\u30e9\u306e\u30bb\u30c3\u30c6\u30a3\u30f3\u30b0\n\tvec3 cPos = vec3(0.0,  3.0,\t  6.0); \t// \u30ab\u30e1\u30e9\u306e\u4f4d\u7f6e\uff08GLSL\u304a\u3058\u3055\u3093\u306e\u7acb\u3061\u4f4d\u7f6e\uff09\n\tvec3 cDir = vec3(0.0,  -1.0,  -1.0);\t\t// \u30ab\u30e1\u30e9\u306e\u6ce8\u8996\u70b9\uff08GLSL\u304a\u3058\u3055\u3093\u306e\u8996\u70b9\uff09\n\tvec3 cUp  = vec3(0.0, \t0.5,   1.0); \t// \u30ab\u30e1\u30e9\u306e\u4e0a\u65b9\u5411\uff08GLSL\u304a\u3058\u3055\u3093\u306e\u982d\u4e0a\uff09\n\tvec3 cSide = cross(cDir, cUp);\t\t\t// \u5916\u7a4d\u3092\u4f7f\u3063\u3066\u6a2a\u65b9\u5411\u3092\u7b97\u51fa\n\tfloat targetDepth = 1.0;\t\t\t\t// \u6df1\u5ea6\n\t\n\t// \u30ec\u30a4\u306e\u751f\u6210\n\tvec3 ray = normalize(cSide * p.x + cUp * p.y + cDir * targetDepth);\n\t\n\t// \u30ec\u30a4\u30de\u30fc\u30c1\u30f3\u30b0\u30eb\u30fc\u30d7\n\tfloat dist = 0.0; \t// \u30ec\u30a4\u3068\u7a74\u306e\u8ddd\u96e2\n\tfloat rLen = 0.0; \t// \u30ec\u30a4\u306e\u9577\u3055\n\tvec3  rPos = cPos;\t// \u30ec\u30a4\u306e\u5148\u7aef\n\tfor (int i = 0; i < 32; i++) {\n\t\tdist = dSpring(rPos);\n\t\trLen += dist;\n\t\trPos = cPos + ray * rLen;\n\t}\n\t\n\t// \u885d\u7a81\u5224\u5b9a\u3067\u8272\u306e\u51fa\u3057\u308f\u3051\n\tif (abs(dist) < 0.001) {\n\t\tvec3 normal = genNormal(rPos);\t// \u7269\u4f53\u306e\u6cd5\u7dda\u60c5\u5831\u3092\u53d6\u5f97\n\t\tvec3 light = normalize(vec3(sin(u_time), 1.2, 0.0));\t// \u30e9\u30a4\u30c8\u306e\u4f4d\u7f6e\n\t\tfloat diff = max(dot(normal, light), 0.1);\t// \u62e1\u6563\u53cd\u5c04\u5149\u3092\u5185\u7a4d\u3067\u7b97\u51fa\n    \t\n    \tvec3 eye = reflect(normalize(rPos - cPos), normal);\n\t\tfloat speculer = pow(clamp(dot(eye, light), 0.0, 1.0) * 1.025, 30.0);\t// \u53cd\u5c04\u5149\u3092\u7b97\u51fa\n\n\t\tcolor = (spring + speculer) * diff;\n\t} else {\n\t\tcolor = vec3(0.0);\n\t}\n\n\t// \u6700\u7d42\u7684\u306b\u8a72\u5f53\u30d4\u30af\u30bb\u30eb\u306b\u51fa\u529b\u3059\u308b\u8272\n\tgl_FragColor = vec4(color, 1.0);\n}\n```\n\n[\u5b9f\u884c\u7d50\u679c\u306f\u3053\u3061\u3089](http://thebookofshaders.com/edit.php?log=161213125808) / PC\u3067\u306e\u95b2\u89a7\u3092\u63a8\u5968\n\n![\u30a2\u30a6\u30c8\u30d7\u30c3\u30c8](https://media.giphy.com/media/l4JzcaH0TpPbegA4U/giphy.gif \"\u30a2\u30a6\u30c8\u30d7\u30c3\u30c8\")\n\n### [ \u89e3\u8aac ]\n\u3053\u3053\u3067\u4e3b\u306b\u884c\u306a\u3063\u3066\u3044\u308b\u3053\u3068\u306f\u3001\u4e3b\u306b2\u3064\u3067\u3059\u3002\n- \u53cd\u5c04\u5149\u306e\u5b9f\u88c5\n- \u975e\u6574\u6570\u30d6\u30e9\u30a6\u30f3\u904b\u52d5\u3092\u8907\u6570\u4f7f\u3063\u3066\u3001\u4e0d\u898f\u5247\u3063\u307d\u3044\u63fa\u3089\u304e\u3092\u4f5c\u308b\n\n# \u307e\u3068\u3081\n\nGLSL\u3067\u6e29\u6cc9\uff08\u306e\u3088\u3046\u306a\u3082\u306e\uff09\u3092\u63cf\u753b\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3057\u305f :clap:\n\u5ca9\u3084\u6e6f\u6c17\u3082\u63cf\u753b\u3057\u3066\u3001\u9732\u5929\u98a8\u5442\u3092\u4f5c\u308a\u305f\u304f\u306a\u3063\u3066\u3057\u307e\u3044\u307e\u3059\u3002\n\n\u30b7\u30a7\u30fc\u30c0\u306f\u3068\u3063\u3064\u304d\u306b\u304f\u3044\u5370\u8c61\u304c\u3042\u308b\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u304c\u3001\u5049\u5927\u306a\u5148\u4eba\u305f\u3061\u304c\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u3084\u95a2\u6570\u3092\u7528\u610f\u3057\u3066\u304f\u308c\u3066\u3044\u307e\u3059\u306e\u3067\u3001\u3080\u3057\u308d\u5b66\u3073\u6613\u3044\u306f\u305a\u3067\u3059\u3002\n\u300c\u305d\u308d\u305d\u308dWebGL\u6848\u4ef6\u3092\u62b1\u3048\u59cb\u3081\u305d\u3046...\u300d\u3068\u3044\u3046\u65b9\u306f\u3001\u662f\u975e\u3001\u30b7\u30a7\u30fc\u30c0\u306b\u3082\u30c8\u30e9\u30a4\u3057\u3066\u307f\u3066\u304f\u3060\u3055\u3044\uff01\n\n\n\n"}