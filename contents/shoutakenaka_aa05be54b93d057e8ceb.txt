{"tags": ["Ruby", "ActiveRecord", "MySQL"], "context": " More than 1 year has passed since last update.Ruby on Rails (DB\u306fMySQL) \u3067\u958b\u767a\u3092\u3057\u3066\u3044\u308b\u67d0\u6848\u4ef6\u3067\n\n\u904b\u7528\u306e\u90fd\u5408\u4e0a\u3001\u30a2\u30d7\u30ea\u5916\u304b\u3089 SQL \u3067\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u306e\u5185\u5bb9\u3092\u76f4\u63a5\u53c2\u7167\u3067\u304d\u308b\u5fc5\u8981\u304c\u3042\u308b\u306e\u3067\u3001\u30bb\u30f3\u30b7\u30c6\u30a3\u30d6\u306a\u30c7\u30fc\u30bf\u306f AES_ENCRYPT \u95a2\u6570\u3067\u6697\u53f7\u5316\u3057\u3066\u3001\u30a2\u30d7\u30ea\u4ee5\u5916\u304b\u3089\u3082\u5fa9\u53f7\u3067\u304d\u308b\u3088\u3046\u306b\u3059\u308b\u3053\u3068\n\n\u3068\u3044\u3046\u8981\u4ef6\u304c\u3042\u308a\u307e\u3057\u305f\u3002\n\u5358\u306b\u6697\u53f7\u5316\u3059\u308c\u3070\u3044\u3044\u3060\u3051\u306a\u3089 attr_encrypted gem \u306a\u3069\u3092\u4f7f\u3063\u3066\u900f\u904e\u7684\u306b Ruby \u5074\u3067\u6697\u53f7\u5316\uff0f\u5fa9\u53f7\u3059\u308c\u3070\u697d\u306b\u5b9f\u88c5\u3067\u304d\u307e\u3059\u304c\u3001\u3044\u3061\u3044\u3061 MySQL \u5074\u3067 AES_ENCRYPT\uff0fAES_DECRYPT \u3055\u305b\u308b\u3068\u306a\u308b\u3068\u3001\u304b\u306a\u308a\u5b9f\u88c5\u304c\u9762\u5012\u3067\u3059\u3002\n\u305d\u3053\u3067\u3001Ruby \u5074\u3067 MySQL \u306e AES_ENCRYPT\uff0fAES_DECRYPT \u3068\u540c\u4e00\u306e\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u3067\u900f\u904e\u7684\u306b\u6697\u53f7\u5316\uff0f\u5fa9\u53f7\u3059\u308b\u65b9\u6cd5\u3092\u8003\u3048\u3066\u307f\u307e\u3057\u305f\u3002\n\n\u7d50\u8ad6\nattr_encrypted gem \u3092\u4f7f\u3044\u3001\u30ad\u30fc\u3068\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u4e0b\u8a18\u306e\u3088\u3046\u306b\u8a2d\u5b9a\u3059\u308c\u3070 OK \u3067\u3059\u3002\n\nsome_model.rb\nclass SomeModel < ActiveRecord::Base\n  attr_encrypted :email,\n    :algorithm => \"aes-128-ecb\",\n    :iv => \"\",\n    :key => :generate_key,\n    :encode => false\n\n  def generate_key()\n    key = \"KEY_STR\"\n    final_key = \"\\0\" * 16\n    key.length.times do |i|\n      final_key[i % 16] = (final_key[i % 16].ord ^ key[i].ord).chr\n    end\n    return final_key\n  end\nend\n\n\n\u3061\u306a\u307f\u306b\u52d5\u4f5c\u3092\u78ba\u8a8d\u3057\u305f\u74b0\u5883\u306f\n\nRuby 1.9.3 p374\nRails 3.2.13\nattr_encrypted 1.2.1\nMySQL 5.1.68\n\n\n\u8a73\u7d30\n\nattr_encrypted \u3067\u900f\u904e\u7684\u306b\u6697\u53f7\u5316\uff0f\u5fa9\u53f7\u3059\u308b\nattr_encrypted \u306f\u3001\u900f\u904e\u7684\u306b\u6697\u53f7\u5316\uff0f\u5fa9\u53f7\u3059\u308b\u305f\u3081\u306e gem \u3067\u3059\u3002gem install attr_encrypted \u3067\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3067\u304d\u307e\u3059\u3002\nRails \u3067 ActiveRecord \u3092\u4f7f\u3063\u3066\u3044\u308b\u5834\u5408\u3001\n\n20130421999999_create_some_models.rb\nclass CreateSomeModels < ActiveRecord::Migration\n  def change\n    create_table :some_models do |t|\n      t.binary :encrypted_email\n      t.timestamps\n    end\n  end\nend\n\n\n\u3068\u3044\u3046\u30c6\u30fc\u30d6\u30eb\u306b\u5bfe\u3057\u3066\u3001\n\nsome_model.rb\nclass SomeModel < ActiveRecord::Base\n  attr_encrypted :email\nend\n\n\n\u3068\u3044\u3046\u30e2\u30c7\u30eb\u3092\u4f5c\u308b\u3068\u3001\nmodel = SomeModel.new\nmodel.email = \"foo@bar.com\"\nmodel.save!\n\n\u3068\u66f8\u3051\u3070\u6587\u5b57\u5217 \"foo@bar.com\" \u304c\u6697\u53f7\u5316\u3055\u308c\u3066 encrypted_email \u30ab\u30e9\u30e0\u306b\u4fdd\u5b58\u3055\u308c\u307e\u3059\u3002\u30c7\u30d5\u30a9\u30eb\u30c8\u3067\u306f\u30e2\u30c7\u30eb\u306e\u5c5e\u6027\u306b\u5bfe\u5fdc\u3059\u308b\u30ab\u30e9\u30e0\u306b\u306f encrypted_ \u3068\u3044\u3046\u30d7\u30ec\u30d5\u30a3\u30c3\u30af\u30b9\u3092\u4ed8\u3051\u306a\u3051\u308c\u3070\u306a\u308a\u307e\u305b\u3093\u304c\u3001\u30aa\u30d7\u30b7\u30e7\u30f3\u3067\u30d7\u30ec\u30d5\u30a3\u30c3\u30af\u30b9\u3084\u30b5\u30d5\u30a3\u30c3\u30af\u30b9\u3092\u8abf\u6574\u3059\u308b\u3053\u3068\u304c\u53ef\u80fd\u3067\u3059\u3002\n\u3053\u306e gem \u3092\u30d9\u30fc\u30b9\u306b\u3001\u30d1\u30e9\u30e1\u30fc\u30bf\u306a\u3069\u3092\u8abf\u6574\u3057\u3066 AES_ENCRYPT\uff0fAES_DECRYPT \u4e92\u63db\u306e\u6697\u53f7\u5316\uff0f\u5fa9\u53f7\u3092\u5b9f\u73fe\u3057\u307e\u3059\u3002\n\n\u6697\u53f7\u5316\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u3001\u521d\u671f\u5316\u30d9\u30af\u30c8\u30eb\u3092\u5909\u66f4\u3059\u308b\nattr_encrypted (\u3068\u3044\u3046\u304b\u5185\u90e8\u3067\u6697\u53f7\u5316\uff0f\u5fa9\u53f7\u306b\u4f7f\u3063\u3066\u308b encryptor gem) \u306f\u30c7\u30d5\u30a9\u30eb\u30c8\u3067 aes-256-cbc \u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u3092\u4f7f\u3046\u3088\u3046\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u304c\u3001MySQL 5.1 \u30ea\u30d5\u30a1\u30ec\u30f3\u30b9\u306e 12.13. Encryption and Compression Functions \u306b\u3088\u308b\u3068\u3001MySQL 5.1\u306e\u5b9f\u88c5\u3067\u306f\n\nBlock Length: 128bit\nBlock Mode: ECB\nData Padding: Padded by bytes which Asc() equal for number of padded bytes (done automagically)\nKey Padding: 0x00 padded to multiple of 16 bytes\nIV: None\n\n\u3068\u3044\u3046\u3053\u3068\u306a\u306e\u3067\u3001\u6697\u53f7\u5316\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u3092 aes-128-ecb \u306b\u5909\u66f4\u3057\u307e\u3059\u3002\n\u307e\u305f\u3001\u521d\u671f\u5316\u30d9\u30af\u30c8\u30eb\u3092\u660e\u793a\u7684\u306b\u6307\u5b9a\u3057\u306a\u3044\u3068\u3001\u5185\u90e8\u3067 OpenSSL::Cipher.pkcs5_keyivgen \u304c\u4f7f\u308f\u308c\u3066\u3057\u307e\u3046 (\u3053\u306e\u30e1\u30bd\u30c3\u30c9\u306f\u5185\u90e8\u3067\u521d\u671f\u5316\u30d9\u30af\u30c8\u30eb\u3092\u751f\u6210\u3059\u308b) \u306e\u3067\u3001\u660e\u793a\u7684\u306b\u7a7a\u306e\u521d\u671f\u5316\u30d9\u30af\u30c8\u30eb\u3092\u6307\u5b9a\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\n\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u306f attr_encrypted \u30e1\u30bd\u30c3\u30c9\u306e :algorithm\u3001\u521d\u671f\u5316\u30d9\u30af\u30c8\u30eb\u306f :iv \u3067\u5909\u66f4\u3067\u304d\u307e\u3059\u3002\n\nsome_model.rb\nclass SomeModel < ActiveRecord::Base\n  attr_encrypted :email,\n    :algorithm => \"aes-128-ecb\",\n    :iv => \"\"\nend\n\n\n\n\u30ad\u30fc\u3092\u5909\u63db\u3059\u308b\nMySQL \u306f AES_ENCRYPT\uff0fAES_DECRYPT \u306b\u6307\u5b9a\u3055\u308c\u305f\u30ad\u30fc\u3092\u5909\u63db\u3057\u305f\u4e0a\u3067\u6697\u53f7\u5316\uff0f\u5fa9\u53f7\u306b\u4f7f\u7528\u3057\u3066\u3044\u307e\u3059\u3002\n\u3069\u3093\u306a\u5b9f\u88c5\u306b\u306a\u3063\u3066\u3044\u308b\u304b\u3068\u3044\u3046\u3068\n\nmy_aes.c\nstatic int my_aes_create_key(KEYINSTANCE *aes_key,\n        enum encrypt_dir direction,\n        const char *key, int key_length)\n{\n  uint8 rkey[AES_KEY_LENGTH/8];\n  uint8 *rkey_end=rkey+AES_KEY_LENGTH/8;\n  uint8 *ptr;\n  const char *sptr;\n  const char *key_end=key+key_length;\n\n  bzero((char*) rkey,AES_KEY_LENGTH/8);\n\n  for (ptr= rkey, sptr= key; sptr < key_end; ptr++,sptr++)\n  {\n    if (ptr == rkey_end)\n      ptr= rkey;  /*  Just loop over tmp_key until we used all key */\n    *ptr^= (uint8) *sptr;\n  }\n  ...\n}\n\n\nAES_KEY_LENGTH \u306f 128 \u3068\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u308b\u306e\u3067\u3001\u30ad\u30fc\u306e\u5909\u63db\u306f\u6b21\u306e\u3088\u3046\u306a\u51e6\u7406\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u3002\n\n0 \u3067\u521d\u671f\u5316\u3055\u308c\u305f 16 \u30d0\u30a4\u30c8\u306e\u914d\u5217 rkey \u3092\u4f5c\u308b\u3002\n\u6307\u5b9a\u3055\u308c\u305f\u30ad\u30fc key \u3068 rkey \u306e XOR \u3092\u3068\u3063\u3066 rkey \u306b\u683c\u7d0d\u3057\u3066\u3044\u304f\u3002key \u3068 rkey \u306e 1 \u30d0\u30a4\u30c8\u76ee\u306e XOR \u3092 rkey \u306e 1 \u30d0\u30a4\u30c8\u76ee\u306b\u683c\u7d0d\u3001key \u3068 rkey \u306e 2 \u30d0\u30a4\u30c8\u76ee\u306e XOR \u3092 rkey \u306e 2 \u30d0\u30a4\u30c8\u76ee\u306b\u683c\u7d0d... \u3068\u3044\u3046\u611f\u3058\u3002\n\u30ab\u30a6\u30f3\u30bf\u304c 16 \u306e\u500d\u6570\u3092\u8d85\u3048\u305f\u3089\u3001rkey \u306e\u65b9\u306e\u30ab\u30a6\u30f3\u30bf\u3092 1 \u306b\u623b\u3059\u3002key \u306e 17 \u30d0\u30a4\u30c8\u76ee \u3068 rkey \u306e 1 \u30d0\u30a4\u30c8\u76ee\u306e XOR \u3092 rkey \u306e 1 \u30d0\u30a4\u30c8\u76ee\u306b\u683c\u7d0d\u3001key \u306e 18 \u30d0\u30a4\u30c8\u76ee\u3068 rkey \u306e 2 \u30d0\u30a4\u30c8\u76ee\u306e XOR \u3092 rkey \u306e 2 \u30d0\u30a4\u30c8\u76ee\u306b\u683c\u7d0d... \u3068\u3044\u3046\u611f\u3058\u3002\n\n\u3053\u308c\u3092 Ruby \u306e\u30b3\u30fc\u30c9\u306b\u8d77\u3053\u3057\u305f\u306e\u304c\u3001\u4e0b\u8a18\u306e generate_key \u30e1\u30bd\u30c3\u30c9\u3067\u3059\u3002\ndef generate_key()\n  key = \"KEY_STR\"\n  final_key = \"\\0\" * 16\n  key.length.times do |i|\n    final_key[i % 16] = (final_key[i % 16].ord ^ key[i].ord).chr\n  end\n  return final_key\nend\n\nattr_encrypted \u3067\u306f\u3001:key \u3067\u30ad\u30fc\u751f\u6210\u30e1\u30bd\u30c3\u30c9\u3092\u6307\u5b9a\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u308b\u306e\u3067\u3001some_model.rb \u306f\u6b21\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002\n\nsome_model.rb\nclass SomeModel < ActiveRecord::Base\n  attr_encrypted :email,\n    :algorithm => \"aes-128-ecb\",\n    :iv => \"\",\n    :key => :generate_key\n\n  def generate_key()\n    key = \"KEY_STR\"\n    final_key = \"\\0\" * 16\n    key.length.times do |i|\n      final_key[i % 16] = (final_key[i % 16].ord ^ key[i].ord).chr\n    end\n    return final_key\n  end\nend\n\n\n\n\u30a8\u30f3\u30b3\u30fc\u30c9\u3092\u6291\u5236\u3059\u308b\nActiveRecord \u3067 attr_encrypted \u3092\u4f7f\u3046\u5834\u5408\u3001\u30c7\u30d5\u30a9\u30eb\u30c8\u3067\u306f\u6697\u53f7\u5316\u3057\u305f\u7d50\u679c\u3092 BASE64 \u30a8\u30f3\u30b3\u30fc\u30c9\u3057\u305f\u3046\u3048\u3067\u683c\u7d0d\u3059\u308b\u3088\u3046\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u3002AES_DECRYPT \u3059\u308b\u3060\u3051\u3067\u5fa9\u53f7\u3067\u304d\u308b\u3088\u3046\u306b\u3057\u305f\u3044\u306e\u3067\u3001:encode => false \u3092\u6307\u5b9a\u3057\u3066\u30a8\u30f3\u30b3\u30fc\u30c9\u51e6\u7406\u3092\u6291\u5236\u3057\u307e\u3059\u3002\n\u4ee5\u4e0a\u3067\u3001AES_ENCRYPT\uff0fAES_DECRYPT \u4e92\u63db\u306e\u65b9\u5f0f\u3067\u900f\u904e\u7684\u306b\u6697\u53f7\u5316\uff0f\u5fa9\u53f7\u3092\u884c\u3048\u308b\u30e2\u30c7\u30eb\u306e\u5b8c\u6210\u3067\u3059\u3002\n\nsome_model.rb\nclass SomeModel < ActiveRecord::Base\n  attr_encrypted :email,\n    :algorithm => \"aes-128-ecb\",\n    :iv => \"\",\n    :key => :generate_key,\n    :encode => false\n\n  def generate_key()\n    key = \"KEY_STR\"\n    final_key = \"\\0\" * 16\n    key.length.times do |i|\n      final_key[i % 16] = (final_key[i % 16].ord ^ key[i].ord).chr\n    end\n    return final_key\n  end\nend\n\n\nRuby on Rails (DB\u306fMySQL) \u3067\u958b\u767a\u3092\u3057\u3066\u3044\u308b\u67d0\u6848\u4ef6\u3067\n\n> \u904b\u7528\u306e\u90fd\u5408\u4e0a\u3001\u30a2\u30d7\u30ea\u5916\u304b\u3089 SQL \u3067\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u306e\u5185\u5bb9\u3092\u76f4\u63a5\u53c2\u7167\u3067\u304d\u308b\u5fc5\u8981\u304c\u3042\u308b\u306e\u3067\u3001\u30bb\u30f3\u30b7\u30c6\u30a3\u30d6\u306a\u30c7\u30fc\u30bf\u306f AES_ENCRYPT \u95a2\u6570\u3067\u6697\u53f7\u5316\u3057\u3066\u3001\u30a2\u30d7\u30ea\u4ee5\u5916\u304b\u3089\u3082\u5fa9\u53f7\u3067\u304d\u308b\u3088\u3046\u306b\u3059\u308b\u3053\u3068\n\n\u3068\u3044\u3046\u8981\u4ef6\u304c\u3042\u308a\u307e\u3057\u305f\u3002\n\n\u5358\u306b\u6697\u53f7\u5316\u3059\u308c\u3070\u3044\u3044\u3060\u3051\u306a\u3089 attr_encrypted gem \u306a\u3069\u3092\u4f7f\u3063\u3066\u900f\u904e\u7684\u306b Ruby \u5074\u3067\u6697\u53f7\u5316\uff0f\u5fa9\u53f7\u3059\u308c\u3070\u697d\u306b\u5b9f\u88c5\u3067\u304d\u307e\u3059\u304c\u3001\u3044\u3061\u3044\u3061 MySQL \u5074\u3067 AES_ENCRYPT\uff0fAES_DECRYPT \u3055\u305b\u308b\u3068\u306a\u308b\u3068\u3001\u304b\u306a\u308a\u5b9f\u88c5\u304c\u9762\u5012\u3067\u3059\u3002\n\n\u305d\u3053\u3067\u3001Ruby \u5074\u3067 MySQL \u306e AES_ENCRYPT\uff0fAES_DECRYPT \u3068\u540c\u4e00\u306e\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u3067\u900f\u904e\u7684\u306b\u6697\u53f7\u5316\uff0f\u5fa9\u53f7\u3059\u308b\u65b9\u6cd5\u3092\u8003\u3048\u3066\u307f\u307e\u3057\u305f\u3002\n\n\n# \u7d50\u8ad6\n\nattr_encrypted gem \u3092\u4f7f\u3044\u3001\u30ad\u30fc\u3068\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u4e0b\u8a18\u306e\u3088\u3046\u306b\u8a2d\u5b9a\u3059\u308c\u3070 OK \u3067\u3059\u3002\n\n```ruby:some_model.rb\nclass SomeModel < ActiveRecord::Base\n  attr_encrypted :email,\n    :algorithm => \"aes-128-ecb\",\n    :iv => \"\",\n    :key => :generate_key,\n    :encode => false\n\n  def generate_key()\n    key = \"KEY_STR\"\n    final_key = \"\\0\" * 16\n    key.length.times do |i|\n      final_key[i % 16] = (final_key[i % 16].ord ^ key[i].ord).chr\n    end\n    return final_key\n  end\nend\n```\n\n\u3061\u306a\u307f\u306b\u52d5\u4f5c\u3092\u78ba\u8a8d\u3057\u305f\u74b0\u5883\u306f\n\n* Ruby 1.9.3 p374\n* Rails 3.2.13\n* attr_encrypted 1.2.1\n* MySQL 5.1.68\n\n\n# \u8a73\u7d30\n\n## attr_encrypted \u3067\u900f\u904e\u7684\u306b\u6697\u53f7\u5316\uff0f\u5fa9\u53f7\u3059\u308b\n\n[attr_encrypted](https://github.com/shuber/attr_encrypted) \u306f\u3001\u900f\u904e\u7684\u306b\u6697\u53f7\u5316\uff0f\u5fa9\u53f7\u3059\u308b\u305f\u3081\u306e gem \u3067\u3059\u3002`gem install attr_encrypted` \u3067\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3067\u304d\u307e\u3059\u3002\n\nRails \u3067 ActiveRecord \u3092\u4f7f\u3063\u3066\u3044\u308b\u5834\u5408\u3001\n\n```ruby:20130421999999_create_some_models.rb\nclass CreateSomeModels < ActiveRecord::Migration\n  def change\n    create_table :some_models do |t|\n      t.binary :encrypted_email\n      t.timestamps\n    end\n  end\nend\n```\n\n\u3068\u3044\u3046\u30c6\u30fc\u30d6\u30eb\u306b\u5bfe\u3057\u3066\u3001\n\n```ruby:some_model.rb\nclass SomeModel < ActiveRecord::Base\n  attr_encrypted :email\nend\n```\n\n\u3068\u3044\u3046\u30e2\u30c7\u30eb\u3092\u4f5c\u308b\u3068\u3001\n\n```ruby\nmodel = SomeModel.new\nmodel.email = \"foo@bar.com\"\nmodel.save!\n```\n\n\u3068\u66f8\u3051\u3070\u6587\u5b57\u5217 \"foo@bar.com\" \u304c\u6697\u53f7\u5316\u3055\u308c\u3066 encrypted_email \u30ab\u30e9\u30e0\u306b\u4fdd\u5b58\u3055\u308c\u307e\u3059\u3002\u30c7\u30d5\u30a9\u30eb\u30c8\u3067\u306f\u30e2\u30c7\u30eb\u306e\u5c5e\u6027\u306b\u5bfe\u5fdc\u3059\u308b\u30ab\u30e9\u30e0\u306b\u306f `encrypted_` \u3068\u3044\u3046\u30d7\u30ec\u30d5\u30a3\u30c3\u30af\u30b9\u3092\u4ed8\u3051\u306a\u3051\u308c\u3070\u306a\u308a\u307e\u305b\u3093\u304c\u3001\u30aa\u30d7\u30b7\u30e7\u30f3\u3067\u30d7\u30ec\u30d5\u30a3\u30c3\u30af\u30b9\u3084\u30b5\u30d5\u30a3\u30c3\u30af\u30b9\u3092\u8abf\u6574\u3059\u308b\u3053\u3068\u304c\u53ef\u80fd\u3067\u3059\u3002\n\n\u3053\u306e gem \u3092\u30d9\u30fc\u30b9\u306b\u3001\u30d1\u30e9\u30e1\u30fc\u30bf\u306a\u3069\u3092\u8abf\u6574\u3057\u3066 AES_ENCRYPT\uff0fAES_DECRYPT \u4e92\u63db\u306e\u6697\u53f7\u5316\uff0f\u5fa9\u53f7\u3092\u5b9f\u73fe\u3057\u307e\u3059\u3002\n\n\n## \u6697\u53f7\u5316\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u3001\u521d\u671f\u5316\u30d9\u30af\u30c8\u30eb\u3092\u5909\u66f4\u3059\u308b\n\nattr_encrypted (\u3068\u3044\u3046\u304b\u5185\u90e8\u3067\u6697\u53f7\u5316\uff0f\u5fa9\u53f7\u306b\u4f7f\u3063\u3066\u308b encryptor gem) \u306f\u30c7\u30d5\u30a9\u30eb\u30c8\u3067 aes-256-cbc \u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u3092\u4f7f\u3046\u3088\u3046\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u304c\u3001MySQL 5.1 \u30ea\u30d5\u30a1\u30ec\u30f3\u30b9\u306e [12.13. Encryption and Compression Functions](http://dev.mysql.com/doc/refman/5.1/en/encryption-functions.html) \u306b\u3088\u308b\u3068\u3001MySQL 5.1\u306e\u5b9f\u88c5\u3067\u306f\n\n> Block Length: 128bit\n> Block Mode: ECB\n> Data Padding: Padded by bytes which Asc() equal for number of padded bytes (done automagically)\n> Key Padding: 0x00 padded to multiple of 16 bytes\n> IV: None\n\n\u3068\u3044\u3046\u3053\u3068\u306a\u306e\u3067\u3001\u6697\u53f7\u5316\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u3092 aes-128-ecb \u306b\u5909\u66f4\u3057\u307e\u3059\u3002\n\n\u307e\u305f\u3001\u521d\u671f\u5316\u30d9\u30af\u30c8\u30eb\u3092\u660e\u793a\u7684\u306b\u6307\u5b9a\u3057\u306a\u3044\u3068\u3001\u5185\u90e8\u3067 OpenSSL::Cipher.pkcs5_keyivgen \u304c\u4f7f\u308f\u308c\u3066\u3057\u307e\u3046 (\u3053\u306e\u30e1\u30bd\u30c3\u30c9\u306f\u5185\u90e8\u3067\u521d\u671f\u5316\u30d9\u30af\u30c8\u30eb\u3092\u751f\u6210\u3059\u308b) \u306e\u3067\u3001\u660e\u793a\u7684\u306b\u7a7a\u306e\u521d\u671f\u5316\u30d9\u30af\u30c8\u30eb\u3092\u6307\u5b9a\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\n\n\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u306f attr_encrypted \u30e1\u30bd\u30c3\u30c9\u306e :algorithm\u3001\u521d\u671f\u5316\u30d9\u30af\u30c8\u30eb\u306f :iv \u3067\u5909\u66f4\u3067\u304d\u307e\u3059\u3002\n\n```ruby:some_model.rb\nclass SomeModel < ActiveRecord::Base\n  attr_encrypted :email,\n    :algorithm => \"aes-128-ecb\",\n    :iv => \"\"\nend\n```\n\n\n## \u30ad\u30fc\u3092\u5909\u63db\u3059\u308b\n\nMySQL \u306f AES_ENCRYPT\uff0fAES_DECRYPT \u306b\u6307\u5b9a\u3055\u308c\u305f\u30ad\u30fc\u3092\u5909\u63db\u3057\u305f\u4e0a\u3067\u6697\u53f7\u5316\uff0f\u5fa9\u53f7\u306b\u4f7f\u7528\u3057\u3066\u3044\u307e\u3059\u3002\n\n\u3069\u3093\u306a\u5b9f\u88c5\u306b\u306a\u3063\u3066\u3044\u308b\u304b\u3068\u3044\u3046\u3068\n\n```c:my_aes.c\nstatic int my_aes_create_key(KEYINSTANCE *aes_key,\n        enum encrypt_dir direction,\n        const char *key, int key_length)\n{\n  uint8 rkey[AES_KEY_LENGTH/8];\n  uint8 *rkey_end=rkey+AES_KEY_LENGTH/8;\n  uint8 *ptr;\n  const char *sptr;\n  const char *key_end=key+key_length;\n\n  bzero((char*) rkey,AES_KEY_LENGTH/8);\n\n  for (ptr= rkey, sptr= key; sptr < key_end; ptr++,sptr++)\n  {\n    if (ptr == rkey_end)\n      ptr= rkey;  /*  Just loop over tmp_key until we used all key */\n    *ptr^= (uint8) *sptr;\n  }\n  ...\n}\n```\n\nAES_KEY_LENGTH \u306f 128 \u3068\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u308b\u306e\u3067\u3001\u30ad\u30fc\u306e\u5909\u63db\u306f\u6b21\u306e\u3088\u3046\u306a\u51e6\u7406\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u3002\n\n+ 0 \u3067\u521d\u671f\u5316\u3055\u308c\u305f 16 \u30d0\u30a4\u30c8\u306e\u914d\u5217 rkey \u3092\u4f5c\u308b\u3002\n+ \u6307\u5b9a\u3055\u308c\u305f\u30ad\u30fc key \u3068 rkey \u306e XOR \u3092\u3068\u3063\u3066 rkey \u306b\u683c\u7d0d\u3057\u3066\u3044\u304f\u3002key \u3068 rkey \u306e 1 \u30d0\u30a4\u30c8\u76ee\u306e XOR \u3092 rkey \u306e 1 \u30d0\u30a4\u30c8\u76ee\u306b\u683c\u7d0d\u3001key \u3068 rkey \u306e 2 \u30d0\u30a4\u30c8\u76ee\u306e XOR \u3092 rkey \u306e 2 \u30d0\u30a4\u30c8\u76ee\u306b\u683c\u7d0d... \u3068\u3044\u3046\u611f\u3058\u3002\n+ \u30ab\u30a6\u30f3\u30bf\u304c 16 \u306e\u500d\u6570\u3092\u8d85\u3048\u305f\u3089\u3001rkey \u306e\u65b9\u306e\u30ab\u30a6\u30f3\u30bf\u3092 1 \u306b\u623b\u3059\u3002key \u306e 17 \u30d0\u30a4\u30c8\u76ee \u3068 rkey \u306e 1 \u30d0\u30a4\u30c8\u76ee\u306e XOR \u3092 rkey \u306e 1 \u30d0\u30a4\u30c8\u76ee\u306b\u683c\u7d0d\u3001key \u306e 18 \u30d0\u30a4\u30c8\u76ee\u3068 rkey \u306e 2 \u30d0\u30a4\u30c8\u76ee\u306e XOR \u3092 rkey \u306e 2 \u30d0\u30a4\u30c8\u76ee\u306b\u683c\u7d0d... \u3068\u3044\u3046\u611f\u3058\u3002\n\n\u3053\u308c\u3092 Ruby \u306e\u30b3\u30fc\u30c9\u306b\u8d77\u3053\u3057\u305f\u306e\u304c\u3001\u4e0b\u8a18\u306e generate_key \u30e1\u30bd\u30c3\u30c9\u3067\u3059\u3002\n\n```ruby\ndef generate_key()\n  key = \"KEY_STR\"\n  final_key = \"\\0\" * 16\n  key.length.times do |i|\n    final_key[i % 16] = (final_key[i % 16].ord ^ key[i].ord).chr\n  end\n  return final_key\nend\n```\n\nattr_encrypted \u3067\u306f\u3001:key \u3067\u30ad\u30fc\u751f\u6210\u30e1\u30bd\u30c3\u30c9\u3092\u6307\u5b9a\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u308b\u306e\u3067\u3001some_model.rb \u306f\u6b21\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002\n\n```ruby:some_model.rb\nclass SomeModel < ActiveRecord::Base\n  attr_encrypted :email,\n    :algorithm => \"aes-128-ecb\",\n    :iv => \"\",\n    :key => :generate_key\n\n  def generate_key()\n    key = \"KEY_STR\"\n    final_key = \"\\0\" * 16\n    key.length.times do |i|\n      final_key[i % 16] = (final_key[i % 16].ord ^ key[i].ord).chr\n    end\n    return final_key\n  end\nend\n```\n\n\n# \u30a8\u30f3\u30b3\u30fc\u30c9\u3092\u6291\u5236\u3059\u308b\n\nActiveRecord \u3067 attr_encrypted \u3092\u4f7f\u3046\u5834\u5408\u3001\u30c7\u30d5\u30a9\u30eb\u30c8\u3067\u306f\u6697\u53f7\u5316\u3057\u305f\u7d50\u679c\u3092 BASE64 \u30a8\u30f3\u30b3\u30fc\u30c9\u3057\u305f\u3046\u3048\u3067\u683c\u7d0d\u3059\u308b\u3088\u3046\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u3002AES_DECRYPT \u3059\u308b\u3060\u3051\u3067\u5fa9\u53f7\u3067\u304d\u308b\u3088\u3046\u306b\u3057\u305f\u3044\u306e\u3067\u3001:encode => false \u3092\u6307\u5b9a\u3057\u3066\u30a8\u30f3\u30b3\u30fc\u30c9\u51e6\u7406\u3092\u6291\u5236\u3057\u307e\u3059\u3002\n\n\u4ee5\u4e0a\u3067\u3001AES_ENCRYPT\uff0fAES_DECRYPT \u4e92\u63db\u306e\u65b9\u5f0f\u3067\u900f\u904e\u7684\u306b\u6697\u53f7\u5316\uff0f\u5fa9\u53f7\u3092\u884c\u3048\u308b\u30e2\u30c7\u30eb\u306e\u5b8c\u6210\u3067\u3059\u3002\n\n```ruby:some_model.rb\nclass SomeModel < ActiveRecord::Base\n  attr_encrypted :email,\n    :algorithm => \"aes-128-ecb\",\n    :iv => \"\",\n    :key => :generate_key,\n    :encode => false\n\n  def generate_key()\n    key = \"KEY_STR\"\n    final_key = \"\\0\" * 16\n    key.length.times do |i|\n      final_key[i % 16] = (final_key[i % 16].ord ^ key[i].ord).chr\n    end\n    return final_key\n  end\nend\n```\n"}