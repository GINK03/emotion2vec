{"context": " More than 1 year has passed since last update.\n\ntl;dr\n\n\nfind_by_...\u306f\u975e\u63a8\u5968\u306b\u306a\u3063\u305f\u308f\u3051\u3067\u306f\u306a\u3044\n\u5b9f\u969b\u306fmethod_missing\u3067\u30ad\u30e3\u30c3\u30c1\u3057\u3066find_by\u547c\u3093\u3067\u308b\u3060\u3051\n\nfind_by\u304c\u3061\u3087\u3063\u3068\u901f\u3044\n\n\n2\u56de\u76ee\u4ee5\u964d\u306f\u30e1\u30bd\u30c3\u30c9\u5b9a\u7fa9\u6e08\u307f\u306b\u306a\u308b\u306e\u3067\u305d\u3053\u307e\u3067\u5dee\u306f\u958b\u304b\u306a\u3044\u3088\u3046\u306a\u6c17\u3082\u3059\u308b\u3093\u3060\u3051\u3069\u2026\n\u30e1\u30bd\u30c3\u30c9\u30b3\u30fc\u30eb\u304c1\u6bb5\u591a\u3044\u305b\u3044\uff1f\n\n\n\n\nfind_by_...\n\nActiveRecord\u3067\u30ec\u30b3\u30fc\u30c9\u30921\u4ef6\u53d6\u308a\u51fa\u3057\u305f\u3044\u3068\u304d\uff0cfind_by_...\u3068find_by\u3068\u3044\u30462\u7a2e\u985e\u306e\u30e1\u30bd\u30c3\u30c9\u304c\u5229\u7528\u3067\u304d\u308b\uff0e\n\u3053\u306efind_by_...\uff0c\u3066\u3063\u304d\u308adeprecated\u306b\u306a\u3063\u305f\u3082\u3093\u3060\u3068\u601d\u3063\u3066\u3044\u305f\u306e\u3067\u3059\u304c\uff0cRails 4.2\u6642\u70b9\u3067\u307e\u3060\u751f\u304d\u3066\u3044\u305f\uff0e\n\n\nRails 4.0\u3067\u3082\u5f15\u304d\u7d9a\u304d\u4f7f\u3048\u308bfinder\u30e1\u30bd\u30c3\u30c9\nUser.find_by_email('foo@example.com')\n\nUser.find_by_email_and_name('foo@example.com', 'Foo Bar')\n\nRails 4\u3067\u975e\u63a8\u5968\u306b\u306a\u3063\u305f/\u306a\u3063\u3066\u3044\u306a\u3044finder\u30e1\u30bd\u30c3\u30c9\u3092\u6574\u7406\u3059\u308b - Qiita\n\n\u3058\u3083\u3042find_by\u3068\u3069\u3063\u3061\u4f7f\u3063\u3066\u3082\u3044\u3044\u306e\u304b\uff0c\u96d1\u306b\u691c\u8a3c\u3057\u3066\u307f\u308b\uff0e\n\n\u4eee\u8aac\nfind_by_...\u306f\u5b9f\u88c5\u306b\u969b\u3057\uff0cmethod_missing\u3084\u305d\u308c\u306b\u985e\u3059\u308b\u3088\u3046\u306a\u30e1\u30bf\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u3092\u5229\u7528\u3057\u3066\u3044\u308b\u3068\u8003\u3048\u3089\u308c\u308b\uff0e\n\u306a\u3089\u3070find_by\u304c\u30d1\u30d5\u30a9\u30fc\u30de\u30f3\u30b9\u306b\u512a\u308c\u3066\u3044\u308b\u3088\u3046\u306a\u6c17\u304c\u3059\u308b\uff0e\n\nBenchmark\n\u74b0\u5883\u306fCloud9\u4e0a\uff0cRuby 2.2.1p85\uff0cactiverecord 4.2.4\uff0cDB\u306fsqlite\uff0e\n\u30ed\u30fc\u30ab\u30eb\u30de\u30b7\u30f3\u3067\u3084\u3063\u3066\u306a\u3044\u3053\u3068\u306b\u6df1\u3044\u610f\u5473\u306f\u7121\u3044\u3067\u3059\uff0e\n$ ruby -v\nruby 2.2.1p85 (2015-02-26 revision 49769) [x86_64-linux]\n\n\u30b9\u30af\u30ea\u30d7\u30c8\u306f\u4ee5\u4e0b\uff08pry\u3067\u5b9f\u884c\uff09\uff0e\u9069\u5f53\u306b\u66f8\u3044\u305f\u306e\u3067\u4e0d\u9069\u5207\u306a\u3089\u3054\u3081\u3093\u306a\u3055\u3044\uff0e\nN = 100000\n\nBenchmark.bm 24 do |r|\n  r.report 'find_by(email: \"\")' do  \n    N.times { User.find_by(email: email) }\n  end\n\n  r.report 'find_by_email(\"\")' do\n    N.times { User.find_by_email(email) }\n  end\nend\n\n# =>                                user     system      total        real\n# => find_by(email: \"\")        18.910000   3.970000  22.880000 ( 22.908217)\n# => find_by_email(\"\")         20.070000   4.300000  24.370000 ( 24.944700)\n\n\u4e88\u60f3\u901a\u308afind_by\u304c\u3061\u3087\u3063\u3068\u65e9\u3044\uff0e\n\uff08\u3061\u306a\u307f\u306busers table\u306b\u306findex\u3092\u8cbc\u3063\u3066\u3044\u306a\u3044\uff0e\u308f\u3059\u308c\u3066\u305f\uff0e\uff09\n\nImplementation of find_by_...\n\n10/23 JST 00:00\u6642\u70b9\u3067\u6700\u65b0\u306ecommit\u304b\u3089\uff0e\nactiverecord/lib/active_record/dynamic_matchers.rb#L14-L23\nmodule ActiveRecord\n  module DynamicMatchers #:nodoc:\n\n    # ...\n\n    def method_missing(name, *arguments, &block)\n      match = Method.match(self, name)\n\n      if match && match.valid?\n        match.define\n        send(name, *arguments, &block)\n      else\n        super\n      end\n    end\n\n    # ...\n\n  end\nend\n\nActiveRecord::DynamicMatchers.method_missing\u3067\u5b9f\u88c5\u3055\u308c\u3066\u3044\u308b\uff0e\u4e88\u60f3\u901a\u308a\uff0c\u3080\u3057\u308d\u5f53\u305f\u308a\u524d\u306e\u3088\u3046\u306b\uff08\uff1f\uff09method_missing\uff0e\nMethod.match(self, name)\u304c\u602a\u3057\u3044\uff0e\u5c11\u3057\u4e0b\u306bMethod class\u304c\u3042\u308b\uff0e\nactiverecord/lib/active_record/dynamic_matchers.rb#L31-L38\nmodule ActiveRecord\n  module DynamicMatchers #:nodoc:\n\n    # ...\n\n    class Method\n      @matchers = []\n\n      class << self\n        attr_reader :matchers\n\n        def match(model, name)\n          klass = matchers.find { |k| name =~ k.pattern }\n          klass.new(model, name) if klass\n        end\n\n        def pattern\n          @pattern ||= /\\A#{prefix}_([_a-zA-Z]\\w*)#{suffix}\\Z/\n        end\n\n        def prefix\n          raise NotImplementedError\n        end\n\n        def suffix\n          ''\n        end\n      end\n\n      # ...\n\n    end # end of `Method` class\n  end\nend\n\nMatch.prefix\u3068Match.suffix\u3067\u30e1\u30bd\u30c3\u30c9\u540d\u3092\u63a2\u7d22\u3057\u3066\u308b\uff0e\u3055\u3089\u306b\u4e0b\u3092\u898b\u308b\uff0e\nactiverecord/lib/active_record/dynamic_matchers.rb#L93-L119\nmodule ActiveRecord\n  module DynamicMatchers #:nodoc:\n\n    # ...\n\n    class FindBy < Method\n      Method.matchers << self\n\n      def self.prefix\n        \"find_by\"\n      end\n\n      def finder\n        \"find_by\"\n      end\n    end\n\n    class FindByBang < Method\n      Method.matchers << self\n\n      def self.prefix\n        \"find_by\"\n      end\n\n      def self.suffix\n        \"!\"\n      end\n\n      def finder\n        \"find_by!\"\n      end\n    end\n  enc\nend\n\nMethod\u3092\u7d99\u627f\u3057\u305fFindBy\u3068\u3044\u3046\u30af\u30e9\u30b9\u304c\u3042\u308b\uff0e\u305d\u3053\u3067prefx\u3068suffix\u3092\u6c7a\u3081\u3066\u308b\uff0e\n\u3068\u3053\u308d\u3067\uff0cActiveRecord::DynamicMatchers.method_missing\u3067\u306fmatch\u3057\u305f\u3042\u3068\u306bMethod#define\u3092\u8aad\u3093\u3067\u3044\u308b\uff0e\nmodule ActiveRecord\n  module DynamicMatchers #:nodoc:\n\n    # ...\n\n    class Method\n\n      # ...\n\n      def define\n        model.class_eval <<-CODE, __FILE__, __LINE__ + 1\n          def self.#{name}(#{signature})\n            #{body}\n          end\n        CODE\n      end\n\n      # ...\n\n    end\n  end\nend\n\n\u305d\u3046\u3044\u3046\u3053\u3068\u3067\u3059\uff0e\n\u5b9f\u969b\u306b\u5b9f\u88c5\u3055\u308c\u308b\u30e1\u30bd\u30c3\u30c9\u306e\u5b9f\u4f53\uff08Method#body\uff09\u3092\u898b\u3066\u307f\u308b\uff0e\nactiverecord/lib/active_record/dynamic_matchers.rb#L72-L86\nmodule ActiveRecord\n  module DynamicMatchers #:nodoc:\n\n    # ...\n\n    class Method\n\n      # ...\n\n      def body\n        \"#{finder}(#{attributes_hash})\"\n      end\n\n      def signature\n        attribute_names.map { |name| \"_#{name}\" }.join(', ')\n      end\n\n      def attributes_hash\n        \"{\" + attribute_names.map { |name| \":#{name} => _#{name}\" }.join(',') + \"}\"\n      end\n\n      # ...\n\n    end\n  end\nend\n\nfind_by_hoge(\"\")\u304b\u3089find_by(hoge: \"\")\u3092\u547c\u3093\u3067\u308b\u3060\u3051\u3067\u3059\u306d\uff0e\n\uff08attribute_names\u306fname.match(self.class.pattern)[1].split('_and_'): \u3064\u307e\u308a\uff0c\u30e1\u30bd\u30c3\u30c9\u540d\u3092\u3044\u3044\u611f\u3058\u306b\u30d0\u30e9\u3057\u305f\u3060\u3051\uff09\n\nImplementation of find_by\n\n\u540c\u69d8\u306b10/23 JST 00:00\u6642\u70b9\u3067\u6700\u65b0\u306ecommit\u304b\u3089\uff0e\nactiverecord/lib/active_record/core.rb#L174-L201\nmodule ActiveRecord\n  module Core\n    module ClassMethods\n\n      # ...\n\n      def find_by(*args) # :nodoc:\n        return super if scope_attributes? || !(Hash === args.first) || reflect_on_all_aggregations.any?\n\n        hash = args.first\n\n        return super if hash.values.any? { |v|\n          v.nil? || Array === v || Hash === v || Relation === v\n        }\n\n        # We can't cache Post.find_by(author: david) ...yet\n        return super unless hash.keys.all? { |k| columns_hash.has_key?(k.to_s) }\n\n        keys = hash.keys\n\n        statement = cached_find_by_statement(keys) { |params|\n          wheres = keys.each_with_object({}) { |param, o|\n            o[param] = params.bind\n          }\n          where(wheres).limit(1)\n        }\n        begin\n          statement.execute(hash.values, self, connection).first\n        rescue TypeError => e\n          raise ActiveRecord::StatementInvalid.new(e.message, e)\n        rescue RangeError\n          nil\n         end\n       end\n\n       # ...\n\n    end\n  end\nend\n\n\nReferences\n\nRails 4\u3067\u975e\u63a8\u5968\u306b\u306a\u3063\u305f/\u306a\u3063\u3066\u3044\u306a\u3044finder\u30e1\u30bd\u30c3\u30c9\u3092\u6574\u7406\u3059\u308b - Qiita\n\n## tl;dr\n\n* `find_by_...`\u306f\u975e\u63a8\u5968\u306b\u306a\u3063\u305f\u308f\u3051\u3067\u306f\u306a\u3044\n* \u5b9f\u969b\u306f`method_missing`\u3067\u30ad\u30e3\u30c3\u30c1\u3057\u3066`find_by`\u547c\u3093\u3067\u308b\u3060\u3051\n* `find_by`\u304c\u3061\u3087\u3063\u3068\u901f\u3044\n  - 2\u56de\u76ee\u4ee5\u964d\u306f\u30e1\u30bd\u30c3\u30c9\u5b9a\u7fa9\u6e08\u307f\u306b\u306a\u308b\u306e\u3067\u305d\u3053\u307e\u3067\u5dee\u306f\u958b\u304b\u306a\u3044\u3088\u3046\u306a\u6c17\u3082\u3059\u308b\u3093\u3060\u3051\u3069\u2026\n  - \u30e1\u30bd\u30c3\u30c9\u30b3\u30fc\u30eb\u304c1\u6bb5\u591a\u3044\u305b\u3044\uff1f\n\n## `find_by_...`\nActiveRecord\u3067\u30ec\u30b3\u30fc\u30c9\u30921\u4ef6\u53d6\u308a\u51fa\u3057\u305f\u3044\u3068\u304d\uff0c`find_by_...`\u3068`find_by`\u3068\u3044\u30462\u7a2e\u985e\u306e\u30e1\u30bd\u30c3\u30c9\u304c\u5229\u7528\u3067\u304d\u308b\uff0e\n\u3053\u306e`find_by_...`\uff0c\u3066\u3063\u304d\u308adeprecated\u306b\u306a\u3063\u305f\u3082\u3093\u3060\u3068\u601d\u3063\u3066\u3044\u305f\u306e\u3067\u3059\u304c\uff0cRails 4.2\u6642\u70b9\u3067\u307e\u3060\u751f\u304d\u3066\u3044\u305f\uff0e\n\n> ### Rails 4.0\u3067\u3082\u5f15\u304d\u7d9a\u304d\u4f7f\u3048\u308bfinder\u30e1\u30bd\u30c3\u30c9\n> \n> ```ruby\n> User.find_by_email('foo@example.com')\n>\n> User.find_by_email_and_name('foo@example.com', 'Foo Bar')\n> ```\n> <cite>[Rails 4\u3067\u975e\u63a8\u5968\u306b\u306a\u3063\u305f/\u306a\u3063\u3066\u3044\u306a\u3044finder\u30e1\u30bd\u30c3\u30c9\u3092\u6574\u7406\u3059\u308b - Qiita][jnchito]</cite>\n\n \u3058\u3083\u3042`find_by`\u3068\u3069\u3063\u3061\u4f7f\u3063\u3066\u3082\u3044\u3044\u306e\u304b\uff0c\u96d1\u306b\u691c\u8a3c\u3057\u3066\u307f\u308b\uff0e\n\n## \u4eee\u8aac\n`find_by_...`\u306f\u5b9f\u88c5\u306b\u969b\u3057\uff0c`method_missing`\u3084\u305d\u308c\u306b\u985e\u3059\u308b\u3088\u3046\u306a\u30e1\u30bf\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u3092\u5229\u7528\u3057\u3066\u3044\u308b\u3068\u8003\u3048\u3089\u308c\u308b\uff0e\n\u306a\u3089\u3070`find_by`\u304c\u30d1\u30d5\u30a9\u30fc\u30de\u30f3\u30b9\u306b\u512a\u308c\u3066\u3044\u308b\u3088\u3046\u306a\u6c17\u304c\u3059\u308b\uff0e\n\n## Benchmark\n\u74b0\u5883\u306f[Cloud9](https://c9.io/)\u4e0a\uff0cRuby 2.2.1p85\uff0cactiverecord 4.2.4\uff0cDB\u306fsqlite\uff0e\n\u30ed\u30fc\u30ab\u30eb\u30de\u30b7\u30f3\u3067\u3084\u3063\u3066\u306a\u3044\u3053\u3068\u306b\u6df1\u3044\u610f\u5473\u306f\u7121\u3044\u3067\u3059\uff0e\n\n```\n$ ruby -v\nruby 2.2.1p85 (2015-02-26 revision 49769) [x86_64-linux]\n```\n\n\u30b9\u30af\u30ea\u30d7\u30c8\u306f\u4ee5\u4e0b\uff08pry\u3067\u5b9f\u884c\uff09\uff0e\u9069\u5f53\u306b\u66f8\u3044\u305f\u306e\u3067\u4e0d\u9069\u5207\u306a\u3089\u3054\u3081\u3093\u306a\u3055\u3044\uff0e\n\n```ruby\nN = 100000\n\nBenchmark.bm 24 do |r|\n  r.report 'find_by(email: \"\")' do  \n    N.times { User.find_by(email: email) }\n  end\n\n  r.report 'find_by_email(\"\")' do\n    N.times { User.find_by_email(email) }\n  end\nend\n\n# =>                                user     system      total        real\n# => find_by(email: \"\")        18.910000   3.970000  22.880000 ( 22.908217)\n# => find_by_email(\"\")         20.070000   4.300000  24.370000 ( 24.944700)\n```\n\n\u4e88\u60f3\u901a\u308a`find_by`\u304c\u3061\u3087\u3063\u3068\u65e9\u3044\uff0e\n\n\uff08\u3061\u306a\u307f\u306b`users` table\u306b\u306findex\u3092\u8cbc\u3063\u3066\u3044\u306a\u3044\uff0e\u308f\u3059\u308c\u3066\u305f\uff0e\uff09\n\n## Implementation of `find_by_...`\n[10/23 JST 00:00\u6642\u70b9\u3067\u6700\u65b0\u306ecommit](https://github.com/rails/rails/tree/279012c76cb54ddc73a0f36888179b2ac90de54e)\u304b\u3089\uff0e\n\n[activerecord/lib/active_record/dynamic_matchers.rb#L14-L23](https://github.com/rails/rails/blob/279012c76cb54ddc73a0f36888179b2ac90de54e/activerecord/lib/active_record/dynamic_matchers.rb#L14-L23)\n\n```ruby\nmodule ActiveRecord\n  module DynamicMatchers #:nodoc:\n\n    # ...\n\n    def method_missing(name, *arguments, &block)\n      match = Method.match(self, name)\n\n      if match && match.valid?\n        match.define\n        send(name, *arguments, &block)\n      else\n        super\n      end\n    end\n\n    # ...\n\n  end\nend\n```\n\n`ActiveRecord::DynamicMatchers.method_missing`\u3067\u5b9f\u88c5\u3055\u308c\u3066\u3044\u308b\uff0e\u4e88\u60f3\u901a\u308a\uff0c\u3080\u3057\u308d\u5f53\u305f\u308a\u524d\u306e\u3088\u3046\u306b\uff08\uff1f\uff09`method_missing`\uff0e\n\n`Method.match(self, name)`\u304c\u602a\u3057\u3044\uff0e\u5c11\u3057\u4e0b\u306b`Method` class\u304c\u3042\u308b\uff0e\n\n[activerecord/lib/active_record/dynamic_matchers.rb#L31-L38](https://github.com/rails/rails/blob/279012c76cb54ddc73a0f36888179b2ac90de54e/activerecord/lib/active_record/dynamic_matchers.rb#L31-L38)\n\n```ruby\nmodule ActiveRecord\n  module DynamicMatchers #:nodoc:\n\n    # ...\n\n    class Method\n      @matchers = []\n\n      class << self\n        attr_reader :matchers\n\n        def match(model, name)\n          klass = matchers.find { |k| name =~ k.pattern }\n          klass.new(model, name) if klass\n        end\n\n        def pattern\n          @pattern ||= /\\A#{prefix}_([_a-zA-Z]\\w*)#{suffix}\\Z/\n        end\n\n        def prefix\n          raise NotImplementedError\n        end\n\n        def suffix\n          ''\n        end\n      end\n\n      # ...\n\n    end # end of `Method` class\n  end\nend\n```\n\n`Match.prefix`\u3068`Match.suffix`\u3067\u30e1\u30bd\u30c3\u30c9\u540d\u3092\u63a2\u7d22\u3057\u3066\u308b\uff0e\u3055\u3089\u306b\u4e0b\u3092\u898b\u308b\uff0e\n\n[activerecord/lib/active_record/dynamic_matchers.rb#L93-L119](https://github.com/rails/rails/blob/279012c76cb54ddc73a0f36888179b2ac90de54e/activerecord/lib/active_record/dynamic_matchers.rb#L93-L119)\n\n```ruby\nmodule ActiveRecord\n  module DynamicMatchers #:nodoc:\n\n    # ...\n\n    class FindBy < Method\n      Method.matchers << self\n\n      def self.prefix\n        \"find_by\"\n      end\n\n      def finder\n        \"find_by\"\n      end\n    end\n\n    class FindByBang < Method\n      Method.matchers << self\n\n      def self.prefix\n        \"find_by\"\n      end\n\n      def self.suffix\n        \"!\"\n      end\n\n      def finder\n        \"find_by!\"\n      end\n    end\n  enc\nend\n```\n\n`Method`\u3092\u7d99\u627f\u3057\u305f`FindBy`\u3068\u3044\u3046\u30af\u30e9\u30b9\u304c\u3042\u308b\uff0e\u305d\u3053\u3067`prefx`\u3068`suffix`\u3092\u6c7a\u3081\u3066\u308b\uff0e\n\n\u3068\u3053\u308d\u3067\uff0c`ActiveRecord::DynamicMatchers.method_missing`\u3067\u306f`match`\u3057\u305f\u3042\u3068\u306b`Method#define`\u3092\u8aad\u3093\u3067\u3044\u308b\uff0e\n\n```ruby\nmodule ActiveRecord\n  module DynamicMatchers #:nodoc:\n\n    # ...\n\n    class Method\n\n      # ...\n\n      def define\n        model.class_eval <<-CODE, __FILE__, __LINE__ + 1\n          def self.#{name}(#{signature})\n            #{body}\n          end\n        CODE\n      end\n\n      # ...\n\n    end\n  end\nend\n```\n\n\u305d\u3046\u3044\u3046\u3053\u3068\u3067\u3059\uff0e\n\n\u5b9f\u969b\u306b\u5b9f\u88c5\u3055\u308c\u308b\u30e1\u30bd\u30c3\u30c9\u306e\u5b9f\u4f53\uff08`Method#body`\uff09\u3092\u898b\u3066\u307f\u308b\uff0e\n\n[activerecord/lib/active_record/dynamic_matchers.rb#L72-L86](https://github.com/rails/rails/blob/279012c76cb54ddc73a0f36888179b2ac90de54e/activerecord/lib/active_record/dynamic_matchers.rb#L72-L86)\n\n```ruby\nmodule ActiveRecord\n  module DynamicMatchers #:nodoc:\n\n    # ...\n\n    class Method\n\n      # ...\n\n      def body\n        \"#{finder}(#{attributes_hash})\"\n      end\n\n      def signature\n        attribute_names.map { |name| \"_#{name}\" }.join(', ')\n      end\n\n      def attributes_hash\n        \"{\" + attribute_names.map { |name| \":#{name} => _#{name}\" }.join(',') + \"}\"\n      end\n\n      # ...\n\n    end\n  end\nend\n```\n\n`find_by_hoge(\"\")`\u304b\u3089`find_by(hoge: \"\")`\u3092\u547c\u3093\u3067\u308b\u3060\u3051\u3067\u3059\u306d\uff0e\n\uff08`attribute_names`\u306f`name.match(self.class.pattern)[1].split('_and_')`: \u3064\u307e\u308a\uff0c\u30e1\u30bd\u30c3\u30c9\u540d\u3092\u3044\u3044\u611f\u3058\u306b\u30d0\u30e9\u3057\u305f\u3060\u3051\uff09\n\n## Implementation of `find_by`\n\u540c\u69d8\u306b[10/23 JST 00:00\u6642\u70b9\u3067\u6700\u65b0\u306ecommit](https://github.com/rails/rails/tree/279012c76cb54ddc73a0f36888179b2ac90de54e)\u304b\u3089\uff0e\n\n[activerecord/lib/active_record/core.rb#L174-L201](https://github.com/rails/rails/blob/279012c76cb54ddc73a0f36888179b2ac90de54e/activerecord/lib/active_record/core.rb#L174-L201)\n\n```ruby\nmodule ActiveRecord\n  module Core\n    module ClassMethods\n\n      # ...\n\n      def find_by(*args) # :nodoc:\n        return super if scope_attributes? || !(Hash === args.first) || reflect_on_all_aggregations.any?\n\n        hash = args.first\n\n        return super if hash.values.any? { |v|\n          v.nil? || Array === v || Hash === v || Relation === v\n        }\n\n        # We can't cache Post.find_by(author: david) ...yet\n        return super unless hash.keys.all? { |k| columns_hash.has_key?(k.to_s) }\n\n        keys = hash.keys\n\n        statement = cached_find_by_statement(keys) { |params|\n          wheres = keys.each_with_object({}) { |param, o|\n            o[param] = params.bind\n          }\n          where(wheres).limit(1)\n        }\n        begin\n          statement.execute(hash.values, self, connection).first\n        rescue TypeError => e\n          raise ActiveRecord::StatementInvalid.new(e.message, e)\n        rescue RangeError\n          nil\n         end\n       end\n\n       # ...\n\n    end\n  end\nend\n```\n\n## References\n* [Rails 4\u3067\u975e\u63a8\u5968\u306b\u306a\u3063\u305f/\u306a\u3063\u3066\u3044\u306a\u3044finder\u30e1\u30bd\u30c3\u30c9\u3092\u6574\u7406\u3059\u308b - Qiita][jnchito]\n\n\n[jnchito]: http://qiita.com/jnchito/items/2b7d64851665071ed6e6\n", "tags": ["Ruby", "Rails", "ActiveRecord"]}