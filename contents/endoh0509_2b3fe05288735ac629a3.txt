{"context": " More than 1 year has passed since last update.PImage\u3068Mat\u306e\u5909\u63db\u306b\u3064\u3044\u3066\n\u524d\u306e\u8a18\u4e8b\u3067\u306fProcessing\u4e0a\u3067OpenCV\u3092\u4f7f\u3046\u65b9\u6cd5\u3092\u66f8\u3044\u305f\u3051\u3069\nMat\u306e\u307e\u307e\u3067\u306fProcessing\u3067\u8868\u793a\u3067\u304d\u306a\u3044\u306e\u3067PImage\u3078\u5909\u63db\u3057\u307e\u3059\n\u3053\u306e\u5909\u63db\u306f\u30e9\u30a4\u30d6\u30e9\u30ea\u5316\u3057\u3066\u3044\u308b\u65b9\u304c\u3044\u305f\u306e\u3067\"Mat(OpenCV)\u3068BufferedImage\u3068PImage(Procesing)\u3092\u76f8\u4e92\u5909\u63db\u53ef\u80fd\u306a\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u4f5c\u3063\u3066\u307f\u305f\"\u306b\u3042\u308bImageTranslater\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u4f7f\u3048\u3070\u7c21\u5358\u306b\u3067\u304d\u308b\n\u4e0b\u8a18\u306e\u30b5\u30f3\u30d7\u30eb\u3067\u306fOpenCV\u306eVideoCapture\u30af\u30e9\u30b9\u3067\u30ad\u30e3\u30d7\u30c1\u30e3\u3092\u64ae\u308a\n\u7279\u5fb4\u70b9\u3092\u691c\u51fa\u3057\u3066\u304b\u3089Mat\u304b\u3089PImage\u3078\u5909\u63db\u3057\u3066\u8868\u793a\u3057\u3066\u3044\u308b\n\u691c\u51fa\u3057\u305f\u7279\u5fb4\u70b9\u306fProcessing\u306eellipse\u3067\u63cf\u753b\u3057\u3066\u3044\u308b\n\nTestOpenCV.pde\nimport imageTranslater.*;\nimport org.opencv.core.*;\nimport org.opencv.imgproc.*;\nimport org.opencv.highgui.*;\nimport org.opencv.features2d.*;\n\nImageTranslater imgTrans;\nVideoCapture capture;\nFeatureDetection feature;\nMat captureImage;\nPImage img;\n\nvoid setup() {\n  imgTrans = new ImageTranslater(this);\n  System.loadLibrary(Core.NATIVE_LIBRARY_NAME);\n  capture = new VideoCapture(0);\n  feature = new FeatureDetection(FeatureDetector.SIFT);\n  captureImage = new Mat();\n  size(640, 480);\n}\n\nvoid draw() {\n  background(0);\n  noStroke();\n  fill(255, 255, 0, 100);\n  if (capture.isOpened()) { \n    capture.read(captureImage);\n    Size sz = new Size(width, height);\n    Mat resizeimage = new Mat();\n    Imgproc.resize(captureImage, resizeimage, sz);\n    feature.setImage(resizeimage);\n    feature.detection();\n    image(imgTrans.MatToPImageRGB(this, resizeimage), 0, 0);\n    for (Point p : feature.getPoints ()) {\n      ellipse((float)p.x, (float)p.y, 10, 10);\n    }\n  }\n}\n\n\n\nFeatureDetection.pde\npublic class FeatureDetection {\n\n  Mat image;\n  FeatureDetector featuer;\n  MatOfKeyPoint keyPoints;\n\n  public FeatureDetection(int _type) {\n    image = new Mat();\n    featuer = FeatureDetector.create(_type);\n    keyPoints = new MatOfKeyPoint();\n  }\n\n  public void detection() {\n    featuer.detect(image, keyPoints);\n  }\n\n  public Point[] getPoints() {\n    Point[] points = new Point[keyPoints.toArray().length];\n    for (int i = 0; i < points.length; i++) {\n      points[i] = keyPoints.toArray()[i].pt;\n    }\n    return points;\n  }\n\n  public void setImage(Mat _image) {\n    image = _image;\n  }\n}\n\n\n\n\u3082\u3057\u304f\u306f\"OpenCV 2.4.4 and Processing\"\u3067\u306fPImage->BufferedImage->Mat\u306e\u3088\u3046\u306b\u5909\u63db\u3057\u3066\u3044\u308b\n\u53c2\u8003 : \nImageBuffer\u3078\u306e\u5909\u63db\nhttp://www.magicandlove.com/blog/2013/04/04/opencv-2-4-4-and-processing/\n\u5909\u63db\u30e9\u30a4\u30d6\u30e9\u30ea\nhttps://sites.google.com/site/gutugutu30/other/matopencvtobufferedimagetopimageprocesingwoxianghubianhuankenengnaraiburariwozuottemita\nPImage\u3068Mat\u306e\u5909\u63db\u306b\u3064\u3044\u3066\n[\u524d\u306e\u8a18\u4e8b](http://qiita.com/endoh0509/items/1cb6b0e3ac2e16899893)\u3067\u306fProcessing\u4e0a\u3067OpenCV\u3092\u4f7f\u3046\u65b9\u6cd5\u3092\u66f8\u3044\u305f\u3051\u3069\nMat\u306e\u307e\u307e\u3067\u306fProcessing\u3067\u8868\u793a\u3067\u304d\u306a\u3044\u306e\u3067PImage\u3078\u5909\u63db\u3057\u307e\u3059\n\u3053\u306e\u5909\u63db\u306f\u30e9\u30a4\u30d6\u30e9\u30ea\u5316\u3057\u3066\u3044\u308b\u65b9\u304c\u3044\u305f\u306e\u3067[\"Mat(OpenCV)\u3068BufferedImage\u3068PImage(Procesing)\u3092\u76f8\u4e92\u5909\u63db\u53ef\u80fd\u306a\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u4f5c\u3063\u3066\u307f\u305f\"](http://www.magicandlove.com/blog/2013/04/04/opencv-2-4-4-and-processing/)\u306b\u3042\u308b***ImageTranslater***\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u4f7f\u3048\u3070\u7c21\u5358\u306b\u3067\u304d\u308b\n\n\u4e0b\u8a18\u306e\u30b5\u30f3\u30d7\u30eb\u3067\u306fOpenCV\u306eVideoCapture\u30af\u30e9\u30b9\u3067\u30ad\u30e3\u30d7\u30c1\u30e3\u3092\u64ae\u308a\n\u7279\u5fb4\u70b9\u3092\u691c\u51fa\u3057\u3066\u304b\u3089Mat\u304b\u3089PImage\u3078\u5909\u63db\u3057\u3066\u8868\u793a\u3057\u3066\u3044\u308b\n\u691c\u51fa\u3057\u305f\u7279\u5fb4\u70b9\u306fProcessing\u306eellipse\u3067\u63cf\u753b\u3057\u3066\u3044\u308b\n\n```lang:TestOpenCV.pde\nimport imageTranslater.*;\nimport org.opencv.core.*;\nimport org.opencv.imgproc.*;\nimport org.opencv.highgui.*;\nimport org.opencv.features2d.*;\n\nImageTranslater imgTrans;\nVideoCapture capture;\nFeatureDetection feature;\nMat captureImage;\nPImage img;\n\nvoid setup() {\n  imgTrans = new ImageTranslater(this);\n  System.loadLibrary(Core.NATIVE_LIBRARY_NAME);\n  capture = new VideoCapture(0);\n  feature = new FeatureDetection(FeatureDetector.SIFT);\n  captureImage = new Mat();\n  size(640, 480);\n}\n\nvoid draw() {\n  background(0);\n  noStroke();\n  fill(255, 255, 0, 100);\n  if (capture.isOpened()) { \n    capture.read(captureImage);\n    Size sz = new Size(width, height);\n    Mat resizeimage = new Mat();\n    Imgproc.resize(captureImage, resizeimage, sz);\n    feature.setImage(resizeimage);\n    feature.detection();\n    image(imgTrans.MatToPImageRGB(this, resizeimage), 0, 0);\n    for (Point p : feature.getPoints ()) {\n      ellipse((float)p.x, (float)p.y, 10, 10);\n    }\n  }\n}\n```\n```lang:FeatureDetection.pde\npublic class FeatureDetection {\n\n  Mat image;\n  FeatureDetector featuer;\n  MatOfKeyPoint keyPoints;\n\n  public FeatureDetection(int _type) {\n    image = new Mat();\n    featuer = FeatureDetector.create(_type);\n    keyPoints = new MatOfKeyPoint();\n  }\n\n  public void detection() {\n    featuer.detect(image, keyPoints);\n  }\n\n  public Point[] getPoints() {\n    Point[] points = new Point[keyPoints.toArray().length];\n    for (int i = 0; i < points.length; i++) {\n      points[i] = keyPoints.toArray()[i].pt;\n    }\n    return points;\n  }\n\n  public void setImage(Mat _image) {\n    image = _image;\n  }\n}\n```\n![TestOpenCV.png](https://qiita-image-store.s3.amazonaws.com/0/80816/9e39c8ac-709d-30e7-e0d1-13e2f942a938.png)\n\n\n\u3082\u3057\u304f\u306f[\"OpenCV 2.4.4 and Processing\"](http://www.magicandlove.com/blog/2013/04/04/opencv-2-4-4-and-processing/)\u3067\u306fPImage->BufferedImage->Mat\u306e\u3088\u3046\u306b\u5909\u63db\u3057\u3066\u3044\u308b\n\n\u53c2\u8003 : \nImageBuffer\u3078\u306e\u5909\u63db\nhttp://www.magicandlove.com/blog/2013/04/04/opencv-2-4-4-and-processing/\n\u5909\u63db\u30e9\u30a4\u30d6\u30e9\u30ea\nhttps://sites.google.com/site/gutugutu30/other/matopencvtobufferedimagetopimageprocesingwoxianghubianhuankenengnaraiburariwozuottemita\n", "tags": ["processing", "OpenCV"]}