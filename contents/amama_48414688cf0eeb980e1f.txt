{"context": "\n\n18\u65e5\u76ee\n\u65e5\u6570\u3058\u3083\u306a\u304f\u3066\u7ae0\u3054\u3068\u306b\u66f8\u304f\u3053\u3068\u306b\u3057\u305f.\u6642\u9593\u53d6\u308c\u306a\u3044.\n\n2.4 Mark 2: let(rec) expressions\ninstantiate\u3092ELet\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u306e\u30de\u30c3\u30c1\u306b\u5bfe\u5fdc\u3055\u305b\u308b\u3060\u3051\u3060\u304b\u3089\u3084\u3063\u3066\u306d.\u3058\u3083\u306d\u30fc\u3093\u3058\u3083.\n\nExercise 2.10\n\u3059\u308b\u3079\u304d\u3053\u3068\u306f,\n1. defs\u306e\u4e2d\u306e\u305d\u308c\u305e\u308c\u306e\u5b9a\u7fa9\u306e\u53f3\u5074\u3092instantiate\u3059\u308b.\n2. 1.\u3067\u51fa\u3066\u304d\u305faddr\u3068defs\u306e\u540d\u524d\u3067,\u65b0\u3057\u3044\u540d\u524d\u3068addr\u306e\u5bfe\u5fdc(\u74b0\u5883)\u3092\u4f5c\u3063\u3066\u73fe\u5728\u306e\u74b0\u5883\u306b\u304f\u3063\u3064\u3051\u308b.\n3. body\u30922.\u306e\u74b0\u5883\u3092\u5f15\u6570\u306b\u3057\u3066instantiate\u3092\u547c\u3076.\n\u3053\u308c\u306flet\u306e\u307f\u3092\u6271\u3048\u308b.\nlet\u306einstantiate\u7d50\u679c\u306f\u975e\u5faa\u74b0\u30b0\u30e9\u30d5\u3092\u8868\u73fe\u3059\u308b\u306e\u306b\u5bfe\u3057,letrec\u306e\u7d50\u679c\u306f\u5faa\u74b0\u30b0\u30e9\u30d5\u3067\u3042\u308b.\n\nExercise 2.11\n\u306a\u3093\u3068\u304b\u3057\u3066letrec\u306b\u5bfe\u5fdc\u3055\u305b\u3066\u306d.\u3058\u3083\u306d\u30fc\u3093\u3058\u3083.\n(\u30d2\u30f3\u30c8: \u307b\u307clet\u3068\u540c\u3058\u3060\u3051\u3069,\u30b9\u30c6\u30c3\u30d71\u3067instantiate\u3059\u308b\u3068\u304d\u306b\u30b9\u30c6\u30c3\u30d72\u3067\u3067\u304d\u305f\u74b0\u5883\u3092\u6e21\u3059\u3053\u3068)\n\u3053\u308c\u3092Haskell\u3067\u3059\u308b\u3068\u4f55\u6545\u304b\u3046\u307e\u304f\u3044\u304f\u304c,\u975e\u6b63\u683c\u95a2\u6570\u578b\u8a00\u8a9e\u3067\u306f\u95a2\u6570\u306b\u6e21\u3055\u308c\u305f\u5165\u529b\u306f,\u305d\u306e\u95a2\u6570\u304c\u547c\u3073\u51fa\u3055\u308c\u308b\u307e\u3067\u8a55\u4fa1\u3055\u308c\u308b\u5fc5\u8981\u304c\u306a\u3044\u304b\u3089\u3060.\n\u672c\u5f53\u306b\u3053\u308c\u3092\u5b9f\u88c5\u3059\u308b\u3068\u304d\u306b\u306f\u3053\u308c\u3092\u81ea\u5206\u3067\u3084\u3089\u306a\u3051\u308c\u3070\u306a\u3089\u306a\u3044.\n\u305d\u308c\u305e\u308c\u306eallocate\u3055\u308c\u305f(\u30eb\u30fc\u30c8)\u30ce\u30fc\u30c9\u306e\u30a2\u30c9\u30ec\u30b9\u3092\u8a08\u7b97\u3057,\u305d\u306e\u60c5\u5831\u3092\u74b0\u5883\u306b\u53cd\u6620\u3057,\u305d\u306e\u5f8c\u5b9a\u7fa9\u3092instantiate\u3057\u306a\u3051\u308c\u3070\u306a\u3089\u306a\u3044.\n\nExercise 2.12\nmain = letrec f = f x in f\u3092\u5b9f\u884c\u3059\u308b\u3068\u4f55\u304c\u8d77\u304d\u308b\u304b.\n\u2192\u7121\u9650\u30eb\u30fc\u30d7\nHaskell\u306a\u3069\u306e\u5f37\u3044\u578b\u4ed8\u304d\u8a00\u8a9e\u3060\u3068\u4f55\u304c\u8d77\u3053\u308b\u304b?\n\u2192\u30a8\u30e9\u30fc\n2.4\u7d42\u308f\u308a.\u77ed\u3059\u304e!\ndiff\u3068\u3063\u305f\u3084\u30fc\u3064\nletrec\u304c\u30d0\u30b0\u3063\u3066\u305f\u306e\u3067\u76f4\u3057\u305f\n\nLanguage.hs\ndiff --git a/Language.hs b/Language.hs\nindex e9d4fbd..7f81355 100644\n--- a/Language.hs\n+++ b/Language.hs\n@@ -50,7 +50,7 @@ preludeDefs :: CoreProgram\n preludeDefs\n     = [ (\"I\", [\"x\"], EVar \"x\"),\n         (\"K\", [\"x\",\"y\"], EVar \"x\"),\n-        (\"F\",[\"x\",\"y\"], EVar \"y\"),\n+        (\"F\", [\"x\",\"y\"], EVar \"y\"),\n         (\"S\", [\"x\",\"y\",\"z\"], EAp (EAp (EVar \"x\") (EVar \"z\")) (EAp (EVar \"y\") (EVar \"z\"))),\n         (\"C\", [\"x\",\"y\",\"z\"], EAp (EVar \"x\") (EAp (EVar \"y\") (EVar \"z\"))),\n         (\"B\", [\"x\",\"y\",\"z\"], EAp (EAp (EVar \"x\") (EVar \"z\")) (EVar \"y\")),\n@@ -255,7 +255,7 @@ pExpr =     pApply (pOneOrMore pAexpr) mk_ap\n     where\n     mk_ap e = foldl1 EAp e\n     mk_let _ defns _ e = ELet nonRecursive  defns  e\n-    mk_letrec _ defns _ e = ELet nonRecursive defns e\n+    mk_letrec _ defns _ e = ELet recursive defns e\n     mk_case _ e _ a = ECase e a\n     mk_lam _ v _ e = ELam v e\n\n\n\n\nMain.hs\ndiff --git a/Main.hs b/Main.hs\nindex f6bfb48..261a53b 100644\n--- a/Main.hs\n+++ b/Main.hs\n@@ -1,3 +1,5 @@\n+import Data.List\n+\n import Language\n import Utils\n\n@@ -87,7 +89,7 @@ scStep (stack, dump, heap, globals, stats) sc_name arg_names body\n         new_stack = if length arg_names + 1 <= length stack then result_addr : (drop (length arg_names + 1) stack) else error \"too few arguments\"\n         (new_heap, result_addr) = instantiate body heap env\n         env = arg_bindings ++ globals\n-        arg_bindings = zip2 arg_names (getargs heap stack)\n+        arg_bindings = zip arg_names (getargs heap stack)\n         new_stats = (s, if elem sc_name [prim | (prim, _, _) <- preludeDefs] then (rsc, rp + 1) else (rsc + 1, rp), d) where (s, (rsc, rp), d) = stats\n\n -- now getargs since getArgs conflicts with Gofer standard.prelude\n@@ -112,15 +114,36 @@ instantiate (ELet isrec defs body) heap env = instantiateLet isrec defs body hea\n instantiate (ECase e alts) heap env = error \"Can\u2019t instantiate case exprs\"\n\n instantiateConstr tag arity heap env = error \"Can\u2019t instantiate constructors yet\"\n-instantiateLet isrec defs body heap env = error \"Can\u2019t instantiate let(rec)s yet\"\n\n+instantiateLet isrec defs body heap env = instantiate body new_heap new_env -- cheated\n+    where\n+    ((new_heap, new_env), result_addr) = mapAccumR f (heap, env) defs\n+    f (heap, env) (name, expr) = ((heap1, (name, a1) : env), a1)\n+        where\n+        (heap1, a1) = instantiate expr heap (if isrec then new_env else env)\n+-- \u6b63\u683c\u8a55\u4fa1\u3060\u3068map\u306e\u4e2d\u3067\u306einstantiate\u306e\u4e2d\u306eEVar\u306e\u51fa\u73fe\u3092\u30de\u30fc\u30af\u3057\u3066bind\u306e\u4e2d\u306b\u305d\u306e\u8b58\u5225\u5b50\u304c\u3042\u308b\u304b\u3069\u3046\u304b\u3092\u8abf\u3079,\u6709\u3063\u305f\u3089addr=-index\u306a\u3069\u3069\u3057\u3066\u304a\u304d,\u5168\u3066\u306erhss\u306einstantiate\u304c\u7d42\u308f\u3063\u305f\u3089addr\u304c\u8ca0\u306b\u306a\u3063\u3066\u3044\u308b\u6240\u3092\u5b9f\u969b\u306eaddr\u306b\u76f4\u3059?\n+-- instantiate\u306e\u578b\u304c\u5909\u308f\u308b\u3088\u307f\u305f\u3044\u306a.isrec\u3068bind\u3092\u5f15\u5efb\u306a\u3055\u306a\u3044\u3068\u3044\u3051\u306a\u3044\n+{-\n+instantiateLet isrec defs body heap env = instantiate body new_heap new_env --error \"Can\u2019t instantiate let(rec)s yet\"\n+    where\n+    new_env = local ++ env\n+    (new_heap, instanceOfRhss) = getrhss isrec (rhssOf defs) heap (if isrec then new_env else env)\n+    local = zip (bindersOf defs) instanceOfRhss\n+\n+getrhss :: IsRec -> [CoreExpr] -> TiHeap -> ASSOC Name Addr -> (TiHeap, [Addr])\n+getrhss isrec rhss heap env = (new_heap, result_addr)\n+    where\n+    (new_heap, result_addr) = foldr get_rhs (heap, []) rhss\n+    get_rhs expr (heap, addr) = (new_heap, result_addr : addr)\n+        where (new_heap, result_addr) = instantiate expr heap env\n+-}\n showResults :: [TiState] -> String\n showResults states = iDisplay (iConcat [ iLayn (map showState states), showStats (last states) ])\n\n showState :: TiState -> Iseq\n showState (stack, dump, heap, globals, stats)\n     = iConcat [\n-        showStack heap stack, iNewline,\n+        showStack heap stack, iNewline ,\n         showHeap heap, iNewline\n     ]\n\n@@ -192,7 +215,8 @@ showStats (stack, dump, heap, globals, stats)\n     ]\n\n main :: IO ()\n-main = putStrLn $ runProg $ \"main = K I I I I 3\"\n+main = putStrLn $ runProg $ \"main = letrec x = x f in x; x = 5; two = S C I; inc = S C; three = inc two; add = C S (C C); mul = C\"\n+--main = putStrLn $ runProg $ \"pair x y f =f x y ; fst p = p K ; snd p= p F; f x y = letrec a = pair x b ; b = pair y a in fst (snd (snd (snd a))) ; main = f 3 4\"\n --main = putStrLn $ iDisplay $ pprExpr (ELet nonRecursive [(\"att\", ENum 2)] (EAp (EAp (EVar \"+\") (EVar \"att\")) (EVar \"1\")))\n --main = putStrLn( pprint $ parse  \"f=3;\\ng x y = let z = x in z ;\\nh x = case (let y = x in y) of\\n<1> -> 2 ;\\n<2> -> 5;\\n i = g (1 + 2 * 3) (5 - 1 / 2)\")\n --main = putStrLn $ show $ pOneOrMoreWithSep (pLit \"x\") (pLit \";\") [(1,\"x\"),(1,\";\"),(1,\"x\") ,(1,\";\"),(2,\"x\"),(2,\";\"),(2,\"x\"),(2,\";\"),(2,\"x\") ]\n\n\n# 18\u65e5\u76ee\n\u65e5\u6570\u3058\u3083\u306a\u304f\u3066\u7ae0\u3054\u3068\u306b\u66f8\u304f\u3053\u3068\u306b\u3057\u305f.\u6642\u9593\u53d6\u308c\u306a\u3044.\n\n## 2.4 Mark 2: `let(rec)` expressions\n`instantiate`\u3092`ELet`\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u306e\u30de\u30c3\u30c1\u306b\u5bfe\u5fdc\u3055\u305b\u308b\u3060\u3051\u3060\u304b\u3089\u3084\u3063\u3066\u306d.\u3058\u3083\u306d\u30fc\u3093\u3058\u3083.\n\n### Exercise 2.10\n\u3059\u308b\u3079\u304d\u3053\u3068\u306f,\n1. `defs`\u306e\u4e2d\u306e\u305d\u308c\u305e\u308c\u306e\u5b9a\u7fa9\u306e\u53f3\u5074\u3092instantiate\u3059\u308b.\n2. 1.\u3067\u51fa\u3066\u304d\u305faddr\u3068defs\u306e\u540d\u524d\u3067,\u65b0\u3057\u3044\u540d\u524d\u3068addr\u306e\u5bfe\u5fdc(\u74b0\u5883)\u3092\u4f5c\u3063\u3066\u73fe\u5728\u306e\u74b0\u5883\u306b\u304f\u3063\u3064\u3051\u308b.\n3. body\u30922.\u306e\u74b0\u5883\u3092\u5f15\u6570\u306b\u3057\u3066`instantiate`\u3092\u547c\u3076.\n\n\u3053\u308c\u306flet\u306e\u307f\u3092\u6271\u3048\u308b.\nlet\u306einstantiate\u7d50\u679c\u306f\u975e\u5faa\u74b0\u30b0\u30e9\u30d5\u3092\u8868\u73fe\u3059\u308b\u306e\u306b\u5bfe\u3057,letrec\u306e\u7d50\u679c\u306f\u5faa\u74b0\u30b0\u30e9\u30d5\u3067\u3042\u308b.\n\n### Exercise 2.11\n\u306a\u3093\u3068\u304b\u3057\u3066`letrec`\u306b\u5bfe\u5fdc\u3055\u305b\u3066\u306d.\u3058\u3083\u306d\u30fc\u3093\u3058\u3083.\n(\u30d2\u30f3\u30c8: \u307b\u307clet\u3068\u540c\u3058\u3060\u3051\u3069,\u30b9\u30c6\u30c3\u30d71\u3067instantiate\u3059\u308b\u3068\u304d\u306b\u30b9\u30c6\u30c3\u30d72\u3067\u3067\u304d\u305f\u74b0\u5883\u3092\u6e21\u3059\u3053\u3068)\n\n\u3053\u308c\u3092Haskell\u3067\u3059\u308b\u3068\u4f55\u6545\u304b\u3046\u307e\u304f\u3044\u304f\u304c,\u975e\u6b63\u683c\u95a2\u6570\u578b\u8a00\u8a9e\u3067\u306f\u95a2\u6570\u306b\u6e21\u3055\u308c\u305f\u5165\u529b\u306f,\u305d\u306e\u95a2\u6570\u304c\u547c\u3073\u51fa\u3055\u308c\u308b\u307e\u3067\u8a55\u4fa1\u3055\u308c\u308b\u5fc5\u8981\u304c\u306a\u3044\u304b\u3089\u3060.\n\u672c\u5f53\u306b\u3053\u308c\u3092\u5b9f\u88c5\u3059\u308b\u3068\u304d\u306b\u306f\u3053\u308c\u3092\u81ea\u5206\u3067\u3084\u3089\u306a\u3051\u308c\u3070\u306a\u3089\u306a\u3044.\n\u305d\u308c\u305e\u308c\u306eallocate\u3055\u308c\u305f(\u30eb\u30fc\u30c8)\u30ce\u30fc\u30c9\u306e\u30a2\u30c9\u30ec\u30b9\u3092\u8a08\u7b97\u3057,\u305d\u306e\u60c5\u5831\u3092\u74b0\u5883\u306b\u53cd\u6620\u3057,\u305d\u306e\u5f8c\u5b9a\u7fa9\u3092instantiate\u3057\u306a\u3051\u308c\u3070\u306a\u3089\u306a\u3044.\n\n### Exercise 2.12\n`main = letrec f = f x in f`\u3092\u5b9f\u884c\u3059\u308b\u3068\u4f55\u304c\u8d77\u304d\u308b\u304b.\n\u2192\u7121\u9650\u30eb\u30fc\u30d7\nHaskell\u306a\u3069\u306e\u5f37\u3044\u578b\u4ed8\u304d\u8a00\u8a9e\u3060\u3068\u4f55\u304c\u8d77\u3053\u308b\u304b?\n\u2192\u30a8\u30e9\u30fc\n\n***2.4\u7d42\u308f\u308a.\u77ed\u3059\u304e!***\n\ndiff\u3068\u3063\u305f\u3084\u30fc\u3064\nletrec\u304c\u30d0\u30b0\u3063\u3066\u305f\u306e\u3067\u76f4\u3057\u305f\n\n```hs:Language.hs\ndiff --git a/Language.hs b/Language.hs\nindex e9d4fbd..7f81355 100644\n--- a/Language.hs\n+++ b/Language.hs\n@@ -50,7 +50,7 @@ preludeDefs :: CoreProgram\n preludeDefs\n     = [ (\"I\", [\"x\"], EVar \"x\"),\n         (\"K\", [\"x\",\"y\"], EVar \"x\"),\n-        (\"F\",[\"x\",\"y\"], EVar \"y\"),\n+        (\"F\", [\"x\",\"y\"], EVar \"y\"),\n         (\"S\", [\"x\",\"y\",\"z\"], EAp (EAp (EVar \"x\") (EVar \"z\")) (EAp (EVar \"y\") (EVar \"z\"))),\n         (\"C\", [\"x\",\"y\",\"z\"], EAp (EVar \"x\") (EAp (EVar \"y\") (EVar \"z\"))),\n         (\"B\", [\"x\",\"y\",\"z\"], EAp (EAp (EVar \"x\") (EVar \"z\")) (EVar \"y\")),\n@@ -255,7 +255,7 @@ pExpr =     pApply (pOneOrMore pAexpr) mk_ap\n     where\n     mk_ap e = foldl1 EAp e\n     mk_let _ defns _ e = ELet nonRecursive  defns  e\n-    mk_letrec _ defns _ e = ELet nonRecursive defns e\n+    mk_letrec _ defns _ e = ELet recursive defns e\n     mk_case _ e _ a = ECase e a\n     mk_lam _ v _ e = ELam v e\n \n```\n\n```hs:Main.hs\ndiff --git a/Main.hs b/Main.hs\nindex f6bfb48..261a53b 100644\n--- a/Main.hs\n+++ b/Main.hs\n@@ -1,3 +1,5 @@\n+import Data.List\n+\n import Language\n import Utils\n \n@@ -87,7 +89,7 @@ scStep (stack, dump, heap, globals, stats) sc_name arg_names body\n         new_stack = if length arg_names + 1 <= length stack then result_addr : (drop (length arg_names + 1) stack) else error \"too few arguments\"\n         (new_heap, result_addr) = instantiate body heap env\n         env = arg_bindings ++ globals\n-        arg_bindings = zip2 arg_names (getargs heap stack)\n+        arg_bindings = zip arg_names (getargs heap stack)\n         new_stats = (s, if elem sc_name [prim | (prim, _, _) <- preludeDefs] then (rsc, rp + 1) else (rsc + 1, rp), d) where (s, (rsc, rp), d) = stats\n \n -- now getargs since getArgs conflicts with Gofer standard.prelude\n@@ -112,15 +114,36 @@ instantiate (ELet isrec defs body) heap env = instantiateLet isrec defs body hea\n instantiate (ECase e alts) heap env = error \"Can\u2019t instantiate case exprs\"\n \n instantiateConstr tag arity heap env = error \"Can\u2019t instantiate constructors yet\"\n-instantiateLet isrec defs body heap env = error \"Can\u2019t instantiate let(rec)s yet\"\n \n+instantiateLet isrec defs body heap env = instantiate body new_heap new_env -- cheated\n+    where\n+    ((new_heap, new_env), result_addr) = mapAccumR f (heap, env) defs\n+    f (heap, env) (name, expr) = ((heap1, (name, a1) : env), a1)\n+        where\n+        (heap1, a1) = instantiate expr heap (if isrec then new_env else env)\n+-- \u6b63\u683c\u8a55\u4fa1\u3060\u3068map\u306e\u4e2d\u3067\u306einstantiate\u306e\u4e2d\u306eEVar\u306e\u51fa\u73fe\u3092\u30de\u30fc\u30af\u3057\u3066bind\u306e\u4e2d\u306b\u305d\u306e\u8b58\u5225\u5b50\u304c\u3042\u308b\u304b\u3069\u3046\u304b\u3092\u8abf\u3079,\u6709\u3063\u305f\u3089addr=-index\u306a\u3069\u3069\u3057\u3066\u304a\u304d,\u5168\u3066\u306erhss\u306einstantiate\u304c\u7d42\u308f\u3063\u305f\u3089addr\u304c\u8ca0\u306b\u306a\u3063\u3066\u3044\u308b\u6240\u3092\u5b9f\u969b\u306eaddr\u306b\u76f4\u3059?\n+-- instantiate\u306e\u578b\u304c\u5909\u308f\u308b\u3088\u307f\u305f\u3044\u306a.isrec\u3068bind\u3092\u5f15\u5efb\u306a\u3055\u306a\u3044\u3068\u3044\u3051\u306a\u3044\n+{-\n+instantiateLet isrec defs body heap env = instantiate body new_heap new_env --error \"Can\u2019t instantiate let(rec)s yet\"\n+    where\n+    new_env = local ++ env\n+    (new_heap, instanceOfRhss) = getrhss isrec (rhssOf defs) heap (if isrec then new_env else env)\n+    local = zip (bindersOf defs) instanceOfRhss\n+\n+getrhss :: IsRec -> [CoreExpr] -> TiHeap -> ASSOC Name Addr -> (TiHeap, [Addr])\n+getrhss isrec rhss heap env = (new_heap, result_addr)\n+    where\n+    (new_heap, result_addr) = foldr get_rhs (heap, []) rhss\n+    get_rhs expr (heap, addr) = (new_heap, result_addr : addr)\n+        where (new_heap, result_addr) = instantiate expr heap env\n+-}\n showResults :: [TiState] -> String\n showResults states = iDisplay (iConcat [ iLayn (map showState states), showStats (last states) ])\n \n showState :: TiState -> Iseq\n showState (stack, dump, heap, globals, stats)\n     = iConcat [\n-        showStack heap stack, iNewline,\n+        showStack heap stack, iNewline ,\n         showHeap heap, iNewline\n     ]\n \n@@ -192,7 +215,8 @@ showStats (stack, dump, heap, globals, stats)\n     ]\n \n main :: IO ()\n-main = putStrLn $ runProg $ \"main = K I I I I 3\"\n+main = putStrLn $ runProg $ \"main = letrec x = x f in x; x = 5; two = S C I; inc = S C; three = inc two; add = C S (C C); mul = C\"\n+--main = putStrLn $ runProg $ \"pair x y f =f x y ; fst p = p K ; snd p= p F; f x y = letrec a = pair x b ; b = pair y a in fst (snd (snd (snd a))) ; main = f 3 4\"\n --main = putStrLn $ iDisplay $ pprExpr (ELet nonRecursive [(\"att\", ENum 2)] (EAp (EAp (EVar \"+\") (EVar \"att\")) (EVar \"1\")))\n --main = putStrLn( pprint $ parse  \"f=3;\\ng x y = let z = x in z ;\\nh x = case (let y = x in y) of\\n<1> -> 2 ;\\n<2> -> 5;\\n i = g (1 + 2 * 3) (5 - 1 / 2)\")\n --main = putStrLn $ show $ pOneOrMoreWithSep (pLit \"x\") (pLit \";\") [(1,\"x\"),(1,\";\"),(1,\"x\") ,(1,\";\"),(2,\"x\"),(2,\";\"),(2,\"x\"),(2,\";\"),(2,\"x\") ]\n```\n", "tags": ["\u30a4\u30f3\u30d7\u30ea\u30e1\u30f3\u30c6\u30a3\u30f3\u30b0\u30d5\u30a1\u30f3\u30af\u30b7\u30e7\u30ca\u30eb\u30e9\u30f3\u30b2\u30fc\u30b8\u30ba"]}