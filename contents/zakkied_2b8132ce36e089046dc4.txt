{"context": " More than 1 year has passed since last update.\u30d5\u3099\u30ed\u30af\u3099 \u3092\u66f8\u3044\u3066\u7d50\u679c\u3092\u30a4\u30f3\u30bf\u30fc\u30cd\u30c3\u30c8\u306b\u516c\u958b\u3057\u3088\u3046! \u3068\u3042\u3063\u305f\u306e\u3067\u3001\u516c\u958b\u3057\u3066\u307f\u308b\u3002\n\u624b\u5143\u306e\u74b0\u5883\u3060\u3068\n\nbench(10000, 1000): time=5.7 (6.235) msec.\nbench(1000, 10000): time=4.6 (5.096) msec\n\n\u5927\u4e08\u592b\u3063\u307d\u3044\u3002\nbench(Nproc, Mloop) ->\n    Ring = create(Nproc, Mloop),\n    start(Ring, testtest).\n\ncreate(Nproc, Mloop) ->\n    spawn(fun() -> create_node0(Nproc, Mloop) end).\n\nstart(Pid0, Message) ->\n    statistics(runtime),\n    statistics(wall_clock),\n    Pid0 ! Message.\n\ncreate_node0(N, M) ->\n    Pid0 = self(),\n    Pid1 = spawn(fun() -> create_node(2, N, M, Pid0) end),\n    loop(Pid1, M),\n    {_, Time1} = statistics(runtime),\n    {_, Time2} = statistics(wall_clock),\n    U1 = Time1 / 1000,\n    U2 = Time2 / 1000,\n    io:format(\"time=~p (~p) msec.~n\", [U1, U2]).\n\ncreate_node(N, N, M, Pid0) ->\n    loop(Pid0, M);\ncreate_node(I, N, M, Pid0) ->\n    PidNext = spawn(fun() -> create_node(I+1, N, M, Pid0) end),\n    loop(PidNext, M).\n\nloop(Pid, 0) ->\n    %io:format(\"finished:~p~n\", [Pid]);\n    void;\nloop(Pid, M) ->\n    receive\n        Any ->\n            %io:format(\"Received:~p~n\", [Any]),\n            Pid ! Any,\n            loop(Pid, M-1)\n    end.\n\n\u30d5\u3099\u30ed\u30af\u3099 \u3092\u66f8\u3044\u3066\u7d50\u679c\u3092\u30a4\u30f3\u30bf\u30fc\u30cd\u30c3\u30c8\u306b\u516c\u958b\u3057\u3088\u3046! \u3068\u3042\u3063\u305f\u306e\u3067\u3001\u516c\u958b\u3057\u3066\u307f\u308b\u3002\n\n\u624b\u5143\u306e\u74b0\u5883\u3060\u3068\n\n- bench(10000, 1000): time=5.7 (6.235) msec.\n- bench(1000, 10000): time=4.6 (5.096) msec\n\n\u5927\u4e08\u592b\u3063\u307d\u3044\u3002\n\n```erlang\nbench(Nproc, Mloop) ->\n\tRing = create(Nproc, Mloop),\n\tstart(Ring, testtest).\n\ncreate(Nproc, Mloop) ->\n\tspawn(fun() -> create_node0(Nproc, Mloop) end).\n\nstart(Pid0, Message) ->\n\tstatistics(runtime),\n\tstatistics(wall_clock),\n\tPid0 ! Message.\n\ncreate_node0(N, M) ->\n\tPid0 = self(),\n\tPid1 = spawn(fun() -> create_node(2, N, M, Pid0) end),\n\tloop(Pid1, M),\n\t{_, Time1} = statistics(runtime),\n\t{_, Time2} = statistics(wall_clock),\n\tU1 = Time1 / 1000,\n\tU2 = Time2 / 1000,\n\tio:format(\"time=~p (~p) msec.~n\", [U1, U2]).\n\ncreate_node(N, N, M, Pid0) ->\n\tloop(Pid0, M);\ncreate_node(I, N, M, Pid0) ->\n\tPidNext = spawn(fun() -> create_node(I+1, N, M, Pid0) end),\n\tloop(PidNext, M).\n\nloop(Pid, 0) ->\n\t%io:format(\"finished:~p~n\", [Pid]);\n\tvoid;\nloop(Pid, M) ->\n\treceive\n\t\tAny ->\n\t\t\t%io:format(\"Received:~p~n\", [Any]),\n\t\t\tPid ! Any,\n\t\t\tloop(Pid, M-1)\n\tend.\n```", "tags": ["Erlang"]}