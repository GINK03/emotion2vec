{"context": " More than 1 year has passed since last update.iOS9\u304b\u3089\u306e\u30a2\u30d7\u30ea\u6700\u9069\u5316\u306e\u4ed5\u7d44\u307fAppThinning\u306e\u305f\u3081\u3001Xcode7 beta\u304b\u3089\u306f\u30a2\u30d7\u30ea\u3078\u306ebitcode\u306e\u57cb\u3081\u8fbc\u307f\u304c\u30c7\u30d5\u30a9\u30eb\u30c8\u3067\u6709\u52b9\u306b\u306a\u308a\u307e\u3057\u305f\u3002\nhttps://developer.apple.com/library/prerelease/ios/documentation/IDEs/Conceptual/AppDistributionGuide/AppThinning/AppThinning.html\nhttp://qiita.com/usagimaru/items/cb19f283db4ac0cd8bd6\nbitcode\u3068\u306f\u4f55\u304b\u3092\u611f\u3058\u53d6\u308b\u305f\u3081\u306e\u30a8\u30f3\u30c8\u30ea\u3067\u3059\u3002\n\u7d9a\u304d\nXcode7\u3067\u306eembed-bitcode\u30aa\u30d7\u30b7\u30e7\u30f3 http://qiita.com/gamako/items/4ebfd048c5aed4f68595\n\nbitcode\u3068\u306f\nLLVM\u306e\u30d3\u30eb\u30c9\u30d5\u30ed\u30fc\u306f\u3001\u3056\u3063\u304f\u308a\u6b21\u306e\u3088\u3046\u306a\u624b\u9806\u3067\u884c\u308f\u308c\u307e\u3059\u3002\n\n\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u3092\u4e2d\u9593\u8868\u73fe(LLVM IR)\u306b\u5909\u63db\nLLVM IR\u306e\u30ec\u30d9\u30eb\u3067\u6700\u9069\u5316\n\u30bf\u30fc\u30b2\u30c3\u30c8cpu\u306e\u30a2\u30bb\u30f3\u30d6\u30ea\u30b3\u30fc\u30c9\u306b\u5909\u63db\n\nbitcode\u306fLLVM IR\u3092\u30d0\u30a4\u30ca\u30ea\u30d5\u30a1\u30a4\u30eb\u306b\u53ce\u3081\u308b\u305f\u3081\u306e\u30d5\u30a1\u30a4\u30eb\u30d5\u30a9\u30fc\u30de\u30c3\u30c8\u3067\u3059\u3002\n\nbitcode\u306b\u3055\u308f\u3063\u3066\u307f\u3088\u3046\n\u7c21\u5358\u306a\u30b3\u30fc\u30c9\u3067\u30c6\u30b9\u30c8\u3057\u3066\u307f\u307e\u3059\u3002\nHello World\u306ac\u306e\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u3092\u7528\u610f\u3057\u307e\u3059\u3002\n#include <stdio.h>\n\nint main() {\n    printf(\"Hello, World\\n\");\n\n    return 0;\n}\n\n\n\u5b9f\u884c\u30d5\u30a1\u30a4\u30eb\u3092\u51fa\u529b\u3057\u3066\u3001\u5b9f\u884c\u3067\u304d\u308b\u3053\u3068\u3092\u78ba\u8a8d\u3057\u307e\u3059\u3002\u3067\u304d\u307e\u3057\u305f\u3002\n% clang sample.c\n% ./a.out\nHello, World\n\n\nc\u3092LLVM IR\u306b\u5909\u63db\nLLVM IR\u3092\u51fa\u529b\u3057\u3066\u307f\u308b\n\uff08\u30aa\u30d7\u30b7\u30e7\u30f3-c\u306f\u7121\u304f\u3066\u3082\u30a8\u30e9\u30fc\u3057\u306a\u304b\u3063\u305f\u3002\uff09\n% clang -c -S -emit-llvm sample.c\n\n\u51fa\u529b\u3055\u308c\u305fLLVM IR\u30d5\u30a1\u30a4\u30eb\u3092\u51fa\u529b\u3057\u3066\u307f\u308b\u3068\u3001\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u30c6\u30ad\u30b9\u30c8\u3067\u3042\u308b\u3053\u3068\u304c\u308f\u304b\u308a\u307e\u3059\n% cat sample.ll\n; ModuleID = 'sample.c'\ntarget datalayout = \"e-m:o-i64:64-f80:128-n8:16:32:64-S128\"\ntarget triple = \"x86_64-apple-macosx10.10.0\"\n\n@.str = private unnamed_addr constant [14 x i8] c\"Hello, World\\0A\\00\", align 1\n\n; Function Attrs: nounwind ssp uwtable\ndefine i32 @main() #0 {\n  %1 = alloca i32, align 4\n  store i32 0, i32* %1\n  %2 = call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([14 x i8]* @.str, i32 0, i32 0))\n  ret i32 0\n}\n\ndeclare i32 @printf(i8*, ...) #1\n\nattributes #0 = { nounwind ssp uwtable \"less-precise-fpmad\"=\"false\" \"no-frame-pointer-elim\"=\"true\" \"no-frame-pointer-elim-non-leaf\" \"no-infs-fp-math\"=\"false\" \"no-nans-fp-math\"=\"false\" \"stack-protector-buffer-size\"=\"8\" \"unsafe-fp-math\"=\"false\" \"use-soft-float\"=\"false\" }\nattributes #1 = { \"less-precise-fpmad\"=\"false\" \"no-frame-pointer-elim\"=\"true\" \"no-frame-pointer-elim-non-leaf\" \"no-infs-fp-math\"=\"false\" \"no-nans-fp-math\"=\"false\" \"stack-protector-buffer-size\"=\"8\" \"unsafe-fp-math\"=\"false\" \"use-soft-float\"=\"false\" }\n\n!llvm.ident = !{!0}\n\n!0 = metadata !{metadata !\"Apple LLVM version 6.1.0 (clang-602.0.53) (based on LLVM 3.6.0svn)\"}\n\n\nc\u3092bitcode\u306b\u5909\u63db\u3059\u308b\n\u307e\u305f\u3001bitcode\u51fa\u529b\u3059\u308b\u306b\u306f\u6b21\u306e\u3088\u3046\u306b\u3057\u307e\u3059\u3002\n% clang -c -emit-llvm sample.c\n\nsample.bc\u3068\u3044\u3046\u30d5\u30a1\u30a4\u30eb\u304c\u51fa\u529b\u3055\u308c\u3066\u3044\u308b\u3002\u4e2d\u8eab\u306f\u30d0\u30a4\u30ca\u30ea\u306a\u306e\u3067\u30c0\u30f3\u30d7\u51fa\u529b\u3057\u3066\u307f\u307e\u3059\u3002\n% hexdump -C sample.bc\n00000000  de c0 17 0b 00 00 00 00  14 00 00 00 30 05 00 00  |............0...|\n00000010  07 00 00 01 42 43 c0 de  21 0c 00 00 49 01 00 00  |....BC..!...I...|\n00000020  0b 82 20 00 02 00 00 00  12 00 00 00 07 81 23 91  |.. ...........#.|\n\n...\n\n00000530  0c 83 11 01 01 00 23 06  04 00 18 42 16 00 00 00  |......#....B....|\n00000540  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|\n00000550\n\n\nbitcode\u3092LLVM IR\u306b\u5909\u63db\nbitcode\u30d5\u30a1\u30a4\u30eb\u306fllvm-dis\u30b3\u30de\u30f3\u30c9\u3067\u30c6\u30ad\u30b9\u30c8\u306eLLVM IR\u3068\u3057\u3066\u51fa\u529b\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n% /usr/local/Cellar/llvm/3.6.1/bin/llvm-dis sample.bc\n\n% cat sample.ll\n; ModuleID = 'sample.bc'\ntarget datalayout = \"e-m:o-i64:64-f80:128-n8:16:32:64-S128\"\ntarget triple = \"x86_64-apple-macosx10.10.0\"\n\n@.str = private unnamed_addr constant [14 x i8] c\"Hello, World\\0A\\00\", align 1\n\n; Function Attrs: nounwind ssp uwtable\ndefine i32 @main() #0 {\n  %1 = alloca i32, align 4\n  store i32 0, i32* %1\n  %2 = call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([14 x i8]* @.str, i32 0, i32 0))\n  ret i32 0\n}\n\ndeclare i32 @printf(i8*, ...) #1\n\nattributes #0 = { nounwind ssp uwtable \"less-precise-fpmad\"=\"false\" \"no-frame-pointer-elim\"=\"true\" \"no-frame-pointer-elim-non-leaf\" \"no-infs-fp-math\"=\"false\" \"no-nans-fp-math\"=\"false\" \"stack-protector-buffer-size\"=\"8\" \"unsafe-fp-math\"=\"false\" \"use-soft-float\"=\"false\" }\nattributes #1 = { \"less-precise-fpmad\"=\"false\" \"no-frame-pointer-elim\"=\"true\" \"no-frame-pointer-elim-non-leaf\" \"no-infs-fp-math\"=\"false\" \"no-nans-fp-math\"=\"false\" \"stack-protector-buffer-size\"=\"8\" \"unsafe-fp-math\"=\"false\" \"use-soft-float\"=\"false\" }\n\n!llvm.ident = !{!0}\n\n!0 = !{!\"Apple LLVM version 6.1.0 (clang-602.0.53) (based on LLVM 3.6.0svn)\"}\n\n\nbitcode\u3092\u76f4\u63a5\u5b9f\u884c\nbitcode\u30d5\u30a1\u30a4\u30eb\u306flli\u30b3\u30de\u30f3\u30c9\u3067\u76f4\u63a5\u5b9f\u884c\u3067\u304d\u307e\u3059\n% /usr/local/Cellar/llvm/3.6.1/bin/lli sample.bc\nHello, World\n\n\nbitcode\u304b\u3089\u5b9f\u884c\u30d5\u30a1\u30a4\u30eb\u3092\u4f5c\u6210\nllc\u30b3\u30de\u30f3\u30c9\u3067\u30bf\u30fc\u30b2\u30c3\u30c8CPU\u306e\u30a2\u30bb\u30f3\u30d6\u30e9\u3092\u51fa\u529b\u3057\u3001\u3053\u308c\u3092\u30ea\u30f3\u30af\u3057\u3066\u5b9f\u884c\u30d5\u30a1\u30a4\u30eb\u3092\u3064\u304f\u308b\u3053\u3068\u3082\u3067\u304d\u307e\u3059\u3002\n% /usr/local/Cellar/llvm/3.6.1/bin/llc sample.bc\n% cat sample.s\n    .section    __TEXT,__text,regular,pure_instructions\n    .macosx_version_min 10, 10\n    .globl  _main\n    .align  4, 0x90\n_main:                                  ## @main\n    .cfi_startproc\n## BB#0:\n    pushq   %rbp\nLtmp0:\n    .cfi_def_cfa_offset 16\nLtmp1:\n    .cfi_offset %rbp, -16\n    movq    %rsp, %rbp\nLtmp2:\n    .cfi_def_cfa_register %rbp\n    subq    $16, %rsp\n    movl    $0, -4(%rbp)\n    leaq    L_.str(%rip), %rdi\n    xorl    %eax, %eax\n    callq   _printf\n    xorl    %eax, %eax\n    addq    $16, %rsp\n    popq    %rbp\n    retq\n    .cfi_endproc\n\n    .section    __TEXT,__cstring,cstring_literals\nL_.str:                                 ## @.str\n    .asciz  \"Hello, World\\n\"\n\n\n.subsections_via_symbols\n\n% clang sample.s\n\n% ./a.out\nHello, World\n\n\nbitcode\u3092cpp\u306b\u5909\u66f4\n\u3055\u3089\u306b\u3001llc\u30b3\u30de\u30f3\u30c9\u306f\u51fa\u529b\u30a2\u30fc\u30ad\u30c6\u30af\u30c1\u30e3\u306bcpp\u3068\u6307\u5b9a\u3059\u308b\u3068\u3001cpp\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u306b\u5909\u63db\u3057\u3066\u304f\u308c\u308b\u3088\u3046\u3067\u3059\u3002\n\u898b\u3066\u306e\u3068\u304a\u308a\u3001LLVM\u306e\u30d5\u30ec\u30fc\u30e0\u30ef\u30fc\u30af\u3092\u3064\u304b\u3063\u3066\u5b9f\u73fe\u3059\u308b\u5f62\u306b\u306a\u308b\u3088\u3046\u306a\u306e\u3067\u7c21\u5358\u306b\u8aad\u3081\u308b\u611f\u3058\u3067\u306f\u3042\u308a\u307e\u305b\u3093\u304c\u3001\u6ce8\u610f\u6df1\u304f\u898b\u308c\u3070\"Hello World\"\u6587\u5b57\u5217\u3092\u5f15\u6570\u306b\u4e0e\u3048\u3066\u5916\u90e8\u306eprintf\u95a2\u6570\u3092\u547c\u3073\u51fa\u3057\u3066\u3044\u308b\u306e\u304c\u8aad\u307f\u53d6\u308c\u308b\u3088\u3046\u306a\u3001\u3001\u3001\n\uff08\u5143\u30bd\u30fc\u30b9\u304cprintf\u306e\u547c\u3073\u51fa\u3057\u3060\u3051\u3060\u3063\u305f\u306e\u3067\u3001\u304b\u3048\u3063\u3066\u985e\u4f3c\u6027\u3092\u898b\u3064\u3051\u308b\u306e\u304c\u96e3\u3057\u304f\u306a\u3063\u3066\u3057\u307e\u3044\u307e\u3057\u305f\u3002\uff09\n\u672c\u30a8\u30f3\u30c8\u30ea\u306f\u3053\u3053\u307e\u3067\u3067\u3059\u3002\n% /usr/local/Cellar/llvm/3.6.1/bin/llc -march=cpp -o sample1.cpp sample1.bc\n\n% cat sample1.cpp\n// Generated by llvm2cpp - DO NOT MODIFY!\n\n#include <llvm/Pass.h>\n#include <llvm/PassManager.h>\n#include <llvm/ADT/SmallVector.h>\n#include <llvm/Analysis/Verifier.h>\n#include <llvm/IR/BasicBlock.h>\n#include <llvm/IR/CallingConv.h>\n#include <llvm/IR/Constants.h>\n#include <llvm/IR/DerivedTypes.h>\n#include <llvm/IR/Function.h>\n#include <llvm/IR/GlobalVariable.h>\n#include <llvm/IR/IRPrintingPasses.h>\n#include <llvm/IR/InlineAsm.h>\n#include <llvm/IR/Instructions.h>\n#include <llvm/IR/LLVMContext.h>\n#include <llvm/IR/Module.h>\n#include <llvm/Support/FormattedStream.h>\n#include <llvm/Support/MathExtras.h>\n#include <algorithm>\nusing namespace llvm;\n\nModule* makeLLVMModule();\n\nint main(int argc, char**argv) {\n  Module* Mod = makeLLVMModule();\n  verifyModule(*Mod, PrintMessageAction);\n  PassManager PM;\n  PM.add(createPrintModulePass(&outs()));\n  PM.run(*Mod);\n  return 0;\n}\n\n\nModule* makeLLVMModule() {\n // Module Construction\n Module* mod = new Module(\"sample1.bc\", getGlobalContext());\n mod->setDataLayout(\"0x7fc65a4080b0\");\n mod->setTargetTriple(\"x86_64-apple-macosx10.10.0\");\n\n // Type Definitions\n ArrayType* ArrayTy_0 = ArrayType::get(IntegerType::get(mod->getContext(), 8), 14);\n\n PointerType* PointerTy_1 = PointerType::get(ArrayTy_0, 0);\n\n std::vector<Type*>FuncTy_2_args;\n FunctionType* FuncTy_2 = FunctionType::get(\n  /*Result=*/IntegerType::get(mod->getContext(), 32),\n  /*Params=*/FuncTy_2_args,\n  /*isVarArg=*/false);\n\n PointerType* PointerTy_3 = PointerType::get(IntegerType::get(mod->getContext(), 32), 0);\n\n PointerType* PointerTy_4 = PointerType::get(IntegerType::get(mod->getContext(), 8), 0);\n\n std::vector<Type*>FuncTy_6_args;\n FuncTy_6_args.push_back(PointerTy_4);\n FunctionType* FuncTy_6 = FunctionType::get(\n  /*Result=*/IntegerType::get(mod->getContext(), 32),\n  /*Params=*/FuncTy_6_args,\n  /*isVarArg=*/true);\n\n PointerType* PointerTy_5 = PointerType::get(FuncTy_6, 0);\n\n\n // Function Declarations\n\n Function* func_main = mod->getFunction(\"main\");\n if (!func_main) {\n func_main = Function::Create(\n  /*Type=*/FuncTy_2,\n  /*Linkage=*/GlobalValue::ExternalLinkage,\n  /*Name=*/\"main\", mod);\n func_main->setCallingConv(CallingConv::C);\n }\n AttributeSet func_main_PAL;\n {\n  SmallVector<AttributeSet, 4> Attrs;\n  AttributeSet PAS;\n   {\n    AttrBuilder B;\n    B.addAttribute(Attribute::NoUnwind);\n    B.addAttribute(Attribute::StackProtect);\n    B.addAttribute(Attribute::UWTable);\n    PAS = AttributeSet::get(mod->getContext(), ~0U, B);\n   }\n\n  Attrs.push_back(PAS);\n  func_main_PAL = AttributeSet::get(mod->getContext(), Attrs);\n\n }\n func_main->setAttributes(func_main_PAL);\n\n Function* func_printf = mod->getFunction(\"printf\");\n if (!func_printf) {\n func_printf = Function::Create(\n  /*Type=*/FuncTy_6,\n  /*Linkage=*/GlobalValue::ExternalLinkage,\n  /*Name=*/\"printf\", mod); // (external, no body)\n func_printf->setCallingConv(CallingConv::C);\n }\n AttributeSet func_printf_PAL;\n {\n  SmallVector<AttributeSet, 4> Attrs;\n  AttributeSet PAS;\n   {\n    AttrBuilder B;\n    PAS = AttributeSet::get(mod->getContext(), ~0U, B);\n   }\n\n  Attrs.push_back(PAS);\n  func_printf_PAL = AttributeSet::get(mod->getContext(), Attrs);\n\n }\n func_printf->setAttributes(func_printf_PAL);\n\n // Global Variable Declarations\n\n\n GlobalVariable* gvar_array__str = new GlobalVariable(/*Module=*/*mod,\n /*Type=*/ArrayTy_0,\n /*isConstant=*/true,\n /*Linkage=*/GlobalValue::PrivateLinkage,\n /*Initializer=*/0, // has initializer, specified below\n /*Name=*/\".str\");\n gvar_array__str->setAlignment(1);\n\n // Constant Definitions\n Constant *const_array_7 = ConstantDataArray::getString(mod->getContext(), \"Hello, World\\x0A\", true);\n ConstantInt* const_int32_8 = ConstantInt::get(mod->getContext(), APInt(32, StringRef(\"1\"), 10));\n ConstantInt* const_int32_9 = ConstantInt::get(mod->getContext(), APInt(32, StringRef(\"0\"), 10));\n std::vector<Constant*> const_ptr_10_indices;\n const_ptr_10_indices.push_back(const_int32_9);\n const_ptr_10_indices.push_back(const_int32_9);\n Constant* const_ptr_10 = ConstantExpr::getGetElementPtr(gvar_array__str, const_ptr_10_indices);\n\n // Global Variable Definitions\n gvar_array__str->setInitializer(const_array_7);\n\n // Function Definitions\n\n // Function: main (func_main)\n {\n\n  BasicBlock* label_11 = BasicBlock::Create(mod->getContext(), \"\",func_main,0);\n\n  // Block  (label_11)\n  AllocaInst* ptr_12 = new AllocaInst(IntegerType::get(mod->getContext(), 32), \"\", label_11);\n  ptr_12->setAlignment(4);\n  StoreInst* void_13 = new StoreInst(const_int32_9, ptr_12, false, label_11);\n  CallInst* int32_14 = CallInst::Create(func_printf, const_ptr_10, \"\", label_11);\n  int32_14->setCallingConv(CallingConv::C);\n  int32_14->setTailCall(false);\n  AttributeSet int32_14_PAL;\n  int32_14->setAttributes(int32_14_PAL);\n\n  ReturnInst::Create(mod->getContext(), const_int32_9, label_11);\n\n }\n\n return mod;\n}\n\n\n\u53c2\u8003\nhttps://blog.ymyzk.com/2015/07/clang-llvm-ir-assembly/\nhttp://llamerad-jp.hatenablog.com/entry/2015/05/14/072225\nhttp://stackoverflow.com/questions/14107743/llvm-and-compiler-nomenclature\nhttp://d.hatena.ne.jp/Akiva/20101220/1292881596\nhttp://d.hatena.ne.jp/wagavulin/20110910/1315620620\nhttp://www.ibm.com/developerworks/jp/opensource/library/os-createcompilerllvm1/\n\niOS9\u304b\u3089\u306e\u30a2\u30d7\u30ea\u6700\u9069\u5316\u306e\u4ed5\u7d44\u307f`AppThinning`\u306e\u305f\u3081\u3001Xcode7 beta\u304b\u3089\u306f\u30a2\u30d7\u30ea\u3078\u306ebitcode\u306e\u57cb\u3081\u8fbc\u307f\u304c\u30c7\u30d5\u30a9\u30eb\u30c8\u3067\u6709\u52b9\u306b\u306a\u308a\u307e\u3057\u305f\u3002\n\nhttps://developer.apple.com/library/prerelease/ios/documentation/IDEs/Conceptual/AppDistributionGuide/AppThinning/AppThinning.html\nhttp://qiita.com/usagimaru/items/cb19f283db4ac0cd8bd6\n\nbitcode\u3068\u306f\u4f55\u304b\u3092\u611f\u3058\u53d6\u308b\u305f\u3081\u306e\u30a8\u30f3\u30c8\u30ea\u3067\u3059\u3002\n\n\u7d9a\u304d\nXcode7\u3067\u306eembed-bitcode\u30aa\u30d7\u30b7\u30e7\u30f3 http://qiita.com/gamako/items/4ebfd048c5aed4f68595\n\n# bitcode\u3068\u306f\n\nLLVM\u306e\u30d3\u30eb\u30c9\u30d5\u30ed\u30fc\u306f\u3001\u3056\u3063\u304f\u308a\u6b21\u306e\u3088\u3046\u306a\u624b\u9806\u3067\u884c\u308f\u308c\u307e\u3059\u3002\n\n1. \u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u3092\u4e2d\u9593\u8868\u73fe(LLVM IR)\u306b\u5909\u63db\n2. LLVM IR\u306e\u30ec\u30d9\u30eb\u3067\u6700\u9069\u5316\n3. \u30bf\u30fc\u30b2\u30c3\u30c8cpu\u306e\u30a2\u30bb\u30f3\u30d6\u30ea\u30b3\u30fc\u30c9\u306b\u5909\u63db\n\nbitcode\u306fLLVM IR\u3092\u30d0\u30a4\u30ca\u30ea\u30d5\u30a1\u30a4\u30eb\u306b\u53ce\u3081\u308b\u305f\u3081\u306e\u30d5\u30a1\u30a4\u30eb\u30d5\u30a9\u30fc\u30de\u30c3\u30c8\u3067\u3059\u3002\n\n# bitcode\u306b\u3055\u308f\u3063\u3066\u307f\u3088\u3046\n\n\u7c21\u5358\u306a\u30b3\u30fc\u30c9\u3067\u30c6\u30b9\u30c8\u3057\u3066\u307f\u307e\u3059\u3002\n\nHello World\u306ac\u306e\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u3092\u7528\u610f\u3057\u307e\u3059\u3002\n\n```c\n#include <stdio.h>\n\nint main() {\n\tprintf(\"Hello, World\\n\");\n\n\treturn 0;\n}\n\n```\n\n\u5b9f\u884c\u30d5\u30a1\u30a4\u30eb\u3092\u51fa\u529b\u3057\u3066\u3001\u5b9f\u884c\u3067\u304d\u308b\u3053\u3068\u3092\u78ba\u8a8d\u3057\u307e\u3059\u3002\u3067\u304d\u307e\u3057\u305f\u3002\n\n```\n% clang sample.c\n% ./a.out\nHello, World\n```\n\n## c\u3092LLVM IR\u306b\u5909\u63db\n\nLLVM IR\u3092\u51fa\u529b\u3057\u3066\u307f\u308b\n\uff08\u30aa\u30d7\u30b7\u30e7\u30f3`-c`\u306f\u7121\u304f\u3066\u3082\u30a8\u30e9\u30fc\u3057\u306a\u304b\u3063\u305f\u3002\uff09\n\n```\n% clang -c -S -emit-llvm sample.c\n```\n\n\u51fa\u529b\u3055\u308c\u305fLLVM IR\u30d5\u30a1\u30a4\u30eb\u3092\u51fa\u529b\u3057\u3066\u307f\u308b\u3068\u3001\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u30c6\u30ad\u30b9\u30c8\u3067\u3042\u308b\u3053\u3068\u304c\u308f\u304b\u308a\u307e\u3059\n\n```\n% cat sample.ll\n; ModuleID = 'sample.c'\ntarget datalayout = \"e-m:o-i64:64-f80:128-n8:16:32:64-S128\"\ntarget triple = \"x86_64-apple-macosx10.10.0\"\n\n@.str = private unnamed_addr constant [14 x i8] c\"Hello, World\\0A\\00\", align 1\n\n; Function Attrs: nounwind ssp uwtable\ndefine i32 @main() #0 {\n  %1 = alloca i32, align 4\n  store i32 0, i32* %1\n  %2 = call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([14 x i8]* @.str, i32 0, i32 0))\n  ret i32 0\n}\n\ndeclare i32 @printf(i8*, ...) #1\n\nattributes #0 = { nounwind ssp uwtable \"less-precise-fpmad\"=\"false\" \"no-frame-pointer-elim\"=\"true\" \"no-frame-pointer-elim-non-leaf\" \"no-infs-fp-math\"=\"false\" \"no-nans-fp-math\"=\"false\" \"stack-protector-buffer-size\"=\"8\" \"unsafe-fp-math\"=\"false\" \"use-soft-float\"=\"false\" }\nattributes #1 = { \"less-precise-fpmad\"=\"false\" \"no-frame-pointer-elim\"=\"true\" \"no-frame-pointer-elim-non-leaf\" \"no-infs-fp-math\"=\"false\" \"no-nans-fp-math\"=\"false\" \"stack-protector-buffer-size\"=\"8\" \"unsafe-fp-math\"=\"false\" \"use-soft-float\"=\"false\" }\n\n!llvm.ident = !{!0}\n\n!0 = metadata !{metadata !\"Apple LLVM version 6.1.0 (clang-602.0.53) (based on LLVM 3.6.0svn)\"}\n```\n\n## c\u3092bitcode\u306b\u5909\u63db\u3059\u308b\n\n\u307e\u305f\u3001bitcode\u51fa\u529b\u3059\u308b\u306b\u306f\u6b21\u306e\u3088\u3046\u306b\u3057\u307e\u3059\u3002\n\n```\n% clang -c -emit-llvm sample.c\n```\n\nsample.bc\u3068\u3044\u3046\u30d5\u30a1\u30a4\u30eb\u304c\u51fa\u529b\u3055\u308c\u3066\u3044\u308b\u3002\u4e2d\u8eab\u306f\u30d0\u30a4\u30ca\u30ea\u306a\u306e\u3067\u30c0\u30f3\u30d7\u51fa\u529b\u3057\u3066\u307f\u307e\u3059\u3002\n\n```\n% hexdump -C sample.bc\n00000000  de c0 17 0b 00 00 00 00  14 00 00 00 30 05 00 00  |............0...|\n00000010  07 00 00 01 42 43 c0 de  21 0c 00 00 49 01 00 00  |....BC..!...I...|\n00000020  0b 82 20 00 02 00 00 00  12 00 00 00 07 81 23 91  |.. ...........#.|\n\n...\n\n00000530  0c 83 11 01 01 00 23 06  04 00 18 42 16 00 00 00  |......#....B....|\n00000540  00 00 00 00 00 00 00 00  00 00 00 00 00 00 00 00  |................|\n00000550\n```\n## bitcode\u3092LLVM IR\u306b\u5909\u63db\n\nbitcode\u30d5\u30a1\u30a4\u30eb\u306fllvm-dis\u30b3\u30de\u30f3\u30c9\u3067\u30c6\u30ad\u30b9\u30c8\u306eLLVM IR\u3068\u3057\u3066\u51fa\u529b\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\n```\n% /usr/local/Cellar/llvm/3.6.1/bin/llvm-dis sample.bc\n```\n```\n% cat sample.ll\n; ModuleID = 'sample.bc'\ntarget datalayout = \"e-m:o-i64:64-f80:128-n8:16:32:64-S128\"\ntarget triple = \"x86_64-apple-macosx10.10.0\"\n\n@.str = private unnamed_addr constant [14 x i8] c\"Hello, World\\0A\\00\", align 1\n\n; Function Attrs: nounwind ssp uwtable\ndefine i32 @main() #0 {\n  %1 = alloca i32, align 4\n  store i32 0, i32* %1\n  %2 = call i32 (i8*, ...)* @printf(i8* getelementptr inbounds ([14 x i8]* @.str, i32 0, i32 0))\n  ret i32 0\n}\n\ndeclare i32 @printf(i8*, ...) #1\n\nattributes #0 = { nounwind ssp uwtable \"less-precise-fpmad\"=\"false\" \"no-frame-pointer-elim\"=\"true\" \"no-frame-pointer-elim-non-leaf\" \"no-infs-fp-math\"=\"false\" \"no-nans-fp-math\"=\"false\" \"stack-protector-buffer-size\"=\"8\" \"unsafe-fp-math\"=\"false\" \"use-soft-float\"=\"false\" }\nattributes #1 = { \"less-precise-fpmad\"=\"false\" \"no-frame-pointer-elim\"=\"true\" \"no-frame-pointer-elim-non-leaf\" \"no-infs-fp-math\"=\"false\" \"no-nans-fp-math\"=\"false\" \"stack-protector-buffer-size\"=\"8\" \"unsafe-fp-math\"=\"false\" \"use-soft-float\"=\"false\" }\n\n!llvm.ident = !{!0}\n\n!0 = !{!\"Apple LLVM version 6.1.0 (clang-602.0.53) (based on LLVM 3.6.0svn)\"}\n```\n\n## bitcode\u3092\u76f4\u63a5\u5b9f\u884c\n\nbitcode\u30d5\u30a1\u30a4\u30eb\u306flli\u30b3\u30de\u30f3\u30c9\u3067\u76f4\u63a5\u5b9f\u884c\u3067\u304d\u307e\u3059\n\n```\n% /usr/local/Cellar/llvm/3.6.1/bin/lli sample.bc\nHello, World\n```\n\n## bitcode\u304b\u3089\u5b9f\u884c\u30d5\u30a1\u30a4\u30eb\u3092\u4f5c\u6210\n\nllc\u30b3\u30de\u30f3\u30c9\u3067\u30bf\u30fc\u30b2\u30c3\u30c8CPU\u306e\u30a2\u30bb\u30f3\u30d6\u30e9\u3092\u51fa\u529b\u3057\u3001\u3053\u308c\u3092\u30ea\u30f3\u30af\u3057\u3066\u5b9f\u884c\u30d5\u30a1\u30a4\u30eb\u3092\u3064\u304f\u308b\u3053\u3068\u3082\u3067\u304d\u307e\u3059\u3002\n\n```\n% /usr/local/Cellar/llvm/3.6.1/bin/llc sample.bc\n% cat sample.s\n\t.section\t__TEXT,__text,regular,pure_instructions\n\t.macosx_version_min 10, 10\n\t.globl\t_main\n\t.align\t4, 0x90\n_main:                                  ## @main\n\t.cfi_startproc\n## BB#0:\n\tpushq\t%rbp\nLtmp0:\n\t.cfi_def_cfa_offset 16\nLtmp1:\n\t.cfi_offset %rbp, -16\n\tmovq\t%rsp, %rbp\nLtmp2:\n\t.cfi_def_cfa_register %rbp\n\tsubq\t$16, %rsp\n\tmovl\t$0, -4(%rbp)\n\tleaq\tL_.str(%rip), %rdi\n\txorl\t%eax, %eax\n\tcallq\t_printf\n\txorl\t%eax, %eax\n\taddq\t$16, %rsp\n\tpopq\t%rbp\n\tretq\n\t.cfi_endproc\n\n\t.section\t__TEXT,__cstring,cstring_literals\nL_.str:                                 ## @.str\n\t.asciz\t\"Hello, World\\n\"\n\n\n.subsections_via_symbols\n```\n```\n% clang sample.s\n```\n```\n% ./a.out\nHello, World\n```\n\n## bitcode\u3092cpp\u306b\u5909\u66f4\n\n\u3055\u3089\u306b\u3001llc\u30b3\u30de\u30f3\u30c9\u306f\u51fa\u529b\u30a2\u30fc\u30ad\u30c6\u30af\u30c1\u30e3\u306bcpp\u3068\u6307\u5b9a\u3059\u308b\u3068\u3001cpp\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u306b\u5909\u63db\u3057\u3066\u304f\u308c\u308b\u3088\u3046\u3067\u3059\u3002\n\n\u898b\u3066\u306e\u3068\u304a\u308a\u3001LLVM\u306e\u30d5\u30ec\u30fc\u30e0\u30ef\u30fc\u30af\u3092\u3064\u304b\u3063\u3066\u5b9f\u73fe\u3059\u308b\u5f62\u306b\u306a\u308b\u3088\u3046\u306a\u306e\u3067\u7c21\u5358\u306b\u8aad\u3081\u308b\u611f\u3058\u3067\u306f\u3042\u308a\u307e\u305b\u3093\u304c\u3001\u6ce8\u610f\u6df1\u304f\u898b\u308c\u3070\"Hello World\"\u6587\u5b57\u5217\u3092\u5f15\u6570\u306b\u4e0e\u3048\u3066\u5916\u90e8\u306eprintf\u95a2\u6570\u3092\u547c\u3073\u51fa\u3057\u3066\u3044\u308b\u306e\u304c\u8aad\u307f\u53d6\u308c\u308b\u3088\u3046\u306a\u3001\u3001\u3001\n\uff08\u5143\u30bd\u30fc\u30b9\u304cprintf\u306e\u547c\u3073\u51fa\u3057\u3060\u3051\u3060\u3063\u305f\u306e\u3067\u3001\u304b\u3048\u3063\u3066\u985e\u4f3c\u6027\u3092\u898b\u3064\u3051\u308b\u306e\u304c\u96e3\u3057\u304f\u306a\u3063\u3066\u3057\u307e\u3044\u307e\u3057\u305f\u3002\uff09\n\n\u672c\u30a8\u30f3\u30c8\u30ea\u306f\u3053\u3053\u307e\u3067\u3067\u3059\u3002\n\n```\n% /usr/local/Cellar/llvm/3.6.1/bin/llc -march=cpp -o sample1.cpp sample1.bc\n```\n```\n% cat sample1.cpp\n// Generated by llvm2cpp - DO NOT MODIFY!\n\n#include <llvm/Pass.h>\n#include <llvm/PassManager.h>\n#include <llvm/ADT/SmallVector.h>\n#include <llvm/Analysis/Verifier.h>\n#include <llvm/IR/BasicBlock.h>\n#include <llvm/IR/CallingConv.h>\n#include <llvm/IR/Constants.h>\n#include <llvm/IR/DerivedTypes.h>\n#include <llvm/IR/Function.h>\n#include <llvm/IR/GlobalVariable.h>\n#include <llvm/IR/IRPrintingPasses.h>\n#include <llvm/IR/InlineAsm.h>\n#include <llvm/IR/Instructions.h>\n#include <llvm/IR/LLVMContext.h>\n#include <llvm/IR/Module.h>\n#include <llvm/Support/FormattedStream.h>\n#include <llvm/Support/MathExtras.h>\n#include <algorithm>\nusing namespace llvm;\n\nModule* makeLLVMModule();\n\nint main(int argc, char**argv) {\n  Module* Mod = makeLLVMModule();\n  verifyModule(*Mod, PrintMessageAction);\n  PassManager PM;\n  PM.add(createPrintModulePass(&outs()));\n  PM.run(*Mod);\n  return 0;\n}\n\n\nModule* makeLLVMModule() {\n // Module Construction\n Module* mod = new Module(\"sample1.bc\", getGlobalContext());\n mod->setDataLayout(\"0x7fc65a4080b0\");\n mod->setTargetTriple(\"x86_64-apple-macosx10.10.0\");\n\n // Type Definitions\n ArrayType* ArrayTy_0 = ArrayType::get(IntegerType::get(mod->getContext(), 8), 14);\n\n PointerType* PointerTy_1 = PointerType::get(ArrayTy_0, 0);\n\n std::vector<Type*>FuncTy_2_args;\n FunctionType* FuncTy_2 = FunctionType::get(\n  /*Result=*/IntegerType::get(mod->getContext(), 32),\n  /*Params=*/FuncTy_2_args,\n  /*isVarArg=*/false);\n\n PointerType* PointerTy_3 = PointerType::get(IntegerType::get(mod->getContext(), 32), 0);\n\n PointerType* PointerTy_4 = PointerType::get(IntegerType::get(mod->getContext(), 8), 0);\n\n std::vector<Type*>FuncTy_6_args;\n FuncTy_6_args.push_back(PointerTy_4);\n FunctionType* FuncTy_6 = FunctionType::get(\n  /*Result=*/IntegerType::get(mod->getContext(), 32),\n  /*Params=*/FuncTy_6_args,\n  /*isVarArg=*/true);\n\n PointerType* PointerTy_5 = PointerType::get(FuncTy_6, 0);\n\n\n // Function Declarations\n\n Function* func_main = mod->getFunction(\"main\");\n if (!func_main) {\n func_main = Function::Create(\n  /*Type=*/FuncTy_2,\n  /*Linkage=*/GlobalValue::ExternalLinkage,\n  /*Name=*/\"main\", mod);\n func_main->setCallingConv(CallingConv::C);\n }\n AttributeSet func_main_PAL;\n {\n  SmallVector<AttributeSet, 4> Attrs;\n  AttributeSet PAS;\n   {\n    AttrBuilder B;\n    B.addAttribute(Attribute::NoUnwind);\n    B.addAttribute(Attribute::StackProtect);\n    B.addAttribute(Attribute::UWTable);\n    PAS = AttributeSet::get(mod->getContext(), ~0U, B);\n   }\n\n  Attrs.push_back(PAS);\n  func_main_PAL = AttributeSet::get(mod->getContext(), Attrs);\n\n }\n func_main->setAttributes(func_main_PAL);\n\n Function* func_printf = mod->getFunction(\"printf\");\n if (!func_printf) {\n func_printf = Function::Create(\n  /*Type=*/FuncTy_6,\n  /*Linkage=*/GlobalValue::ExternalLinkage,\n  /*Name=*/\"printf\", mod); // (external, no body)\n func_printf->setCallingConv(CallingConv::C);\n }\n AttributeSet func_printf_PAL;\n {\n  SmallVector<AttributeSet, 4> Attrs;\n  AttributeSet PAS;\n   {\n    AttrBuilder B;\n    PAS = AttributeSet::get(mod->getContext(), ~0U, B);\n   }\n\n  Attrs.push_back(PAS);\n  func_printf_PAL = AttributeSet::get(mod->getContext(), Attrs);\n\n }\n func_printf->setAttributes(func_printf_PAL);\n\n // Global Variable Declarations\n\n\n GlobalVariable* gvar_array__str = new GlobalVariable(/*Module=*/*mod,\n /*Type=*/ArrayTy_0,\n /*isConstant=*/true,\n /*Linkage=*/GlobalValue::PrivateLinkage,\n /*Initializer=*/0, // has initializer, specified below\n /*Name=*/\".str\");\n gvar_array__str->setAlignment(1);\n\n // Constant Definitions\n Constant *const_array_7 = ConstantDataArray::getString(mod->getContext(), \"Hello, World\\x0A\", true);\n ConstantInt* const_int32_8 = ConstantInt::get(mod->getContext(), APInt(32, StringRef(\"1\"), 10));\n ConstantInt* const_int32_9 = ConstantInt::get(mod->getContext(), APInt(32, StringRef(\"0\"), 10));\n std::vector<Constant*> const_ptr_10_indices;\n const_ptr_10_indices.push_back(const_int32_9);\n const_ptr_10_indices.push_back(const_int32_9);\n Constant* const_ptr_10 = ConstantExpr::getGetElementPtr(gvar_array__str, const_ptr_10_indices);\n\n // Global Variable Definitions\n gvar_array__str->setInitializer(const_array_7);\n\n // Function Definitions\n\n // Function: main (func_main)\n {\n\n  BasicBlock* label_11 = BasicBlock::Create(mod->getContext(), \"\",func_main,0);\n\n  // Block  (label_11)\n  AllocaInst* ptr_12 = new AllocaInst(IntegerType::get(mod->getContext(), 32), \"\", label_11);\n  ptr_12->setAlignment(4);\n  StoreInst* void_13 = new StoreInst(const_int32_9, ptr_12, false, label_11);\n  CallInst* int32_14 = CallInst::Create(func_printf, const_ptr_10, \"\", label_11);\n  int32_14->setCallingConv(CallingConv::C);\n  int32_14->setTailCall(false);\n  AttributeSet int32_14_PAL;\n  int32_14->setAttributes(int32_14_PAL);\n\n  ReturnInst::Create(mod->getContext(), const_int32_9, label_11);\n\n }\n\n return mod;\n}\n```\n\n\n# \u53c2\u8003\n\nhttps://blog.ymyzk.com/2015/07/clang-llvm-ir-assembly/\nhttp://llamerad-jp.hatenablog.com/entry/2015/05/14/072225\nhttp://stackoverflow.com/questions/14107743/llvm-and-compiler-nomenclature\nhttp://d.hatena.ne.jp/Akiva/20101220/1292881596\nhttp://d.hatena.ne.jp/wagavulin/20110910/1315620620\nhttp://www.ibm.com/developerworks/jp/opensource/library/os-createcompilerllvm1/\n\n", "tags": ["iOS9", "Xcode", "LLVM", "bitcode"]}