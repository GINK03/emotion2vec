{"context": "AWS\u306e\u8e0f\u307f\u53f0\u30db\u30b9\u30c8\u306e\u30e6\u30fc\u30b6\u30fc\u7ba1\u7406\u3063\u3066\u3069\u3046\u3057\u3066\u3044\u307e\u3059\u304b\uff1fIAM\u30e6\u30fc\u30b6\u30fc\u3068\u30db\u30b9\u30c8\u30e6\u30fc\u30b6\u30fc\u3067\u7ba1\u7406\u304c2\u91cd\u306b\u306a\u308a\u3001\u5927\u5909\u2025\u306a\u3093\u3068\u304b\u306a\u3089\u306a\u3044\u304b\u306a\u3041\u3068\u601d\u3063\u3066\u3044\u305f\u3089\u3001IAM\u30e6\u30fc\u30b6\u30fc\u3054\u3068\u306bCodeDeploy\u7528\u306eSSH\u516c\u958b\u9375\u304c\u767b\u9332\u3067\u304d\u308b\u306e\u3092\u898b\u3064\u3051\u305f\u306e\u3067\u3001\u4eca\u56de\u306f\u3053\u308c\u3092\u4f7f\u3063\u3066\u30db\u30b9\u30c8\u30e6\u30fc\u30b6\u30fc\u3092\u7ba1\u7406\u3092\u3059\u308b\u6a5f\u69cb\u3092\u4f5c\u3063\u3066\u307f\u307e\u3057\u305f\u3002\n\n\u3084\u308a\u305f\u3044\u3053\u3068\n\n\u81ea\u52d5\u3067IAM\u306b\u767b\u9332\u3055\u308c\u3066\u3044\u308b\u30e6\u30fc\u30b6\u30fc\u3068\u540c\u3058\u30e6\u30fc\u30b6\u30fc\u3092\u30db\u30b9\u30c8\u306b\u4f5c\u6210\u3059\u308b\nIAM\u30e6\u30fc\u30b6\u30fc\u3054\u3068\u306b\u767b\u9332\u3057\u3066\u3044\u308bCodeDeploy\u306eSSH\u516c\u958b\u9375\u3092\u53d6\u5f97\u3057\uff0c~/.ssh/authorized_keys\u306b\u30bb\u30c3\u30c8\u3059\u308b\n\n\n\u4e3b\u306a\u90e8\u54c1\u306e\u691c\u8a3c\n\n\u30db\u30b9\u30c8\u306b\u767b\u9332\u3055\u308c\u3066\u3044\u308b\u30e6\u30fc\u30b6\u30fc\u4e00\u89a7\u3092\u53d6\u5f97\u3059\u308b\n\u76f4\u63a5\u30db\u30b9\u30c8\u306b\u4f5c\u6210\u3055\u308c\u3066\u3044\u308b\u30e6\u30fc\u30b6\u30fc\u306e\u53d6\u5f97\u65b9\u6cd5\u304c\u308f\u304b\u3089\u306a\u304b\u3063\u305f\u306e\u3067\u3001sed\u3092\u99c6\u4f7f\u3057\u3066/home\u76f4\u4e0b\u306b\u4f5c\u6210\u3055\u308c\u3066\u3044\u308b\u30e6\u30fc\u30b6\u30fc\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u306e\u4e00\u89a7\u3092\u53d6\u5f97\u3059\u308b\u3088\u3046\u306b\u3057\u307e\u3057\u305f\u3002\nfind /home -maxdepth 1 -type d | grep '^/home/' | sed -e 's/^\\/home\\/\\(.\\)/\\1/'\n\n\nIAM\u30e6\u30fc\u30b6\u30fc\u306e\u4e00\u89a7\u3092\u53d6\u5f97\u3059\u308b\naws-cli\u3067\uff0cIAM\u30e6\u30fc\u30b6\u30fc\u306e\u540d\u524d\u4e00\u89a7\u3092\u53d6\u5f97\u3067\u304d\u307e\u3057\u305f\u3002\naws iam list-users | jq -r '.Users[].UserName'\n\n\nIAM\u30e6\u30fc\u30b6\u30fc\u306eCodeDeploy\u7528SSH\u516c\u958b\u9375\u3092\u53d6\u5f97\u3059\u308b\n\u30e6\u30fc\u30b6\u30fc\u3054\u3068\u306b\u9375\u306eID\u4e00\u89a7\u3092\u53d6\u5f97\u3057\u3066\u3001ID\u304b\u3089\u9375\u306e\u5b9f\u4f53\u304c\u53d6\u308c\u307e\u3057\u305f\u3002\nkey_ids=$(aws iam list-ssh-public-keys --user-name $iam_user | jq -r 'select(.SSHPublicKeys[].Status == \"Active\") | .SSHPublicKeys[].SSHPublicKeyId')\nfor key_id in $key_ids; do\n  aws iam get-ssh-public-key --user-name $iam_user --ssh-public-key-id $key_id --encoding SSH | jq -r '.SSHPublicKey.SSHPublicKeyBody' >> authorized_keys\ndone\n\n\n\u5b8c\u6210\u7248\u306e\u30b9\u30af\u30ea\u30d7\u30c8\n\u6700\u7d42\u7684\u306b\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u30d5\u30ed\u30fc\u3092\u5b9f\u884c\u3055\u305b\u308b\u3088\u3046\u306b\u3057\u307e\u3057\u305f\u3002\n\n\u30db\u30b9\u30c8\u306bIAM\u30e6\u30fc\u30b6\u30fc\u3068\u540c\u3058\u540d\u524d\u3067\u30e6\u30fc\u30b6\u30fc\u3092\u4f5c\u6210\nIAM\u30e6\u30fc\u30b6\u30fc\u3054\u3068\u306b\u767b\u9332\u3057\u3066\u3044\u308bCodeDeploy\u306eSSH\u516c\u958b\u9375\u3092\u53d6\u5f97\u3057\u3001\u66f4\u65b0\u304c\u3042\u308b\u5834\u5408\u306f~/.ssh/authorized_keys\u306b\u30bb\u30c3\u30c8\nIAM\u30e6\u30fc\u30b6\u30fc\u304b\u3089\u524a\u9664\u3055\u308c\u305f\u30e6\u30fc\u30b6\u30fc\u306f\u30db\u30b9\u30c8\u304b\u3089\u3082\u524a\u9664\n\u9375\u306e\u66f4\u65b0\u3084IAM\u304b\u3089\u524a\u9664\u304c\u3042\u3063\u305f\u30e6\u30fc\u30b6\u30fc\u304c\u73fe\u5728SSH\u3067\u63a5\u7d9a\u3057\u3066\u3044\u308b\u5834\u5408\u306f\u3001\u30b3\u30cd\u30af\u30b7\u30e7\u30f3\u3092\u5f37\u5236\u5207\u65ad\n\n#!/bin/bash\nPATH=$PATH:/sbin:/bin:/usr/sbin:/usr/bin:/opt/aws/bin\nfunction contains() {\n  for row in $1; do\n    if [ \"$row\" == \"$2\" ]; then\n      echo \"y\"\n      return 0\n    fi\n  done\n  echo \"n\"\n  return 1\n}\n# current users in host.\nhost_users=$(find /home -maxdepth 1 -type d | grep '^/home/' | sed -e 's/^\\/home\\/\\(.\\)/\\1/')\n# create iam users\niam_users=$(aws iam list-users | jq -r '.Users[].UserName')\nfor iam_user in $iam_users; do\n  user_home=\"/home/$iam_user\"\n  user_ssh_dir=\"$user_home/.ssh\"\n  useradd \"$iam_user\"\n  # setup ssh directory\n  mkdir -p \"$user_ssh_dir\"\n  chown -R \"$iam_user:$iam_user\" \"$user_home\"\n  chmod -R 500 \"$user_home\"\n  # setup ssh key\n  touch \"$user_ssh_dir/authorized_keys\"\n  touch \"$user_ssh_dir/new_authorized_keys\"\n  key_ids=$(aws iam list-ssh-public-keys --user-name $iam_user | jq -r 'select(.SSHPublicKeys[].Status == \"Active\") | .SSHPublicKeys[].SSHPublicKeyId')\n  for key_id in $key_ids; do\n    aws iam get-ssh-public-key --user-name $iam_user --ssh-public-key-id $key_id --encoding SSH | jq -r '.SSHPublicKey.SSHPublicKeyBody' >> \"$user_ssh_dir/new_authorized_keys\"\n  done\n  keys_diff=$(diff \"$user_ssh_dir/authorized_keys\" \"$user_ssh_dir/new_authorized_keys\")\n  if [ \"$keys_diff\" == \"\" ]; then\n    rm -f \"$user_ssh_dir/new_authorized_keys\"\n    continue\n  fi\n  rm -f \"$user_ssh_dir/authorized_keys\"\n  mv \"$user_ssh_dir/new_authorized_keys\" \"$user_ssh_dir/authorized_keys\"\n  chown \"$iam_user:$iam_user\" \"$user_ssh_dir/authorized_keys\"\n  chmod 500 \"$user_ssh_dir/authorized_keys\"\n  ps aux | grep \"sshd: $iam_user@pts/\" | grep -v grep | awk '{ print \"kill -9\", $2 }' | sh\ndone\n# delete iam user deleted by aws from host\nfor host_user in $host_users; do\n  # if ec2-user, not action\n  if [ \"$host_user\" = \"ec2-user\" ]; then\n    continue\n  fi\n  if [[ \"$(contains \"${iam_users[@]}\" \"$host_user\")\" == \"y\" ]]; then\n    continue\n  fi\n  ps aux | grep \"sshd: $host_user@pts/\" | grep -v grep | awk '{ print \"kill -9\", $2 }' | sh\n  userdel -r \"$host_user\"\n  rm -rf \"/home/$host_user\"\n  echo \"delete $host_user from host.\"\ndone\n\n\u3042\u3068\u306f\u3001cron\u3067\u3053\u308c\u3092\u9069\u5f53\u306a\u9593\u9694\u3067\u307e\u308f\u3057\u3066\u3042\u3052\u308c\u3070\u5b8c\u6210\u3067\u3059\u3002\n\u304a\u624b\u7269\u306e\u74b0\u5883\u306b\u76f4\u3050\u306b\u30c7\u30d7\u30ed\u30a4\u3067\u304d\u308b\u3088\u3046\u306bCloudFromation\u306e\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u3092\u4f5c\u3063\u3066\u307f\u307e\u3057\u305f\u306e\u3067\u3001\u826f\u3051\u308c\u3070\u4f7f\u3063\u3066\u304f\u3060\u3055\u3044\u3002\n{\n  \"AWSTemplateFormatVersion\": \"2010-09-09\",\n\n  \"Description\" : \"Bastion Instance\",\n\n  \"Parameters\" : {\n    \"KeyName\" : {\n      \"Description\"           : \"Name of an existing EC2 KeyPair to enable SSH access to the instances\",\n      \"Type\"                  : \"AWS::EC2::KeyPair::KeyName\",\n      \"ConstraintDescription\" : \"can contain only alphanumeric characters, spaces, dashes and underscores.\"\n    },\n    \"InstanceType\" : {\n      \"Description\"           : \"Instance type for node.\",\n      \"Type\"                  : \"String\",\n      \"Default\"               : \"t2.nano\",\n      \"AllowedValues\"         : [ \"t2.nano\", \"t2.micro\",\"t2.small\",\"t2.medium\",\"m3.medium\",\"m3.large\",\"m3.xlarge\",\"m3.2xlarge\",\"c3.large\",\"c3.xlarge\",\"c3.2xlarge\",\"c3.4xlarge\",\"c3.8xlarge\" ],\n      \"ConstraintDescription\" : \"must be a valid T2, M3 or C3 instance type.\"\n    },\n    \"Subnets\" : {\n      \"Description\"           : \"ID of your existing subnet for launching Bastion\",\n      \"Type\"                  : \"List<AWS::EC2::Subnet::Id>\"\n    },\n    \"SSHSecurityGroup\" : {\n      \"Description\"           : \"SecurityGroup for accessing with SSH\",\n      \"Type\"                  : \"AWS::EC2::SecurityGroup::Id\"\n    },\n    \"ElasticIpId\": {\n      \"Description\"           : \"ID of ElasticIp for launching Bastion\",\n      \"Type\"                  : \"String\",\n      \"AllowedPattern\"        : \"eipalloc-[a-z0-9]{8}\",\n      \"ConstraintDescription\" : \"Input format is eipalloc-xxxxxxxx\"\n    },\n    \"Recurrence\" : {\n      \"Type\"                  : \"String\",\n      \"Description\"           : \"schedule for updating keys. crontab style syntax. ex) 0 0 * * *\",\n      \"AllowedPattern\"        : \"(((([*])|(((([0-5])?[0-9])((-(([0-5])?[0-9])))?)))((/(([0-9])?([0-9])?([0-9])?([0-9])?([0-9])?([0-9])?([0-9])?([0-9])?([0-9])?([0-9])?[0-9])))?))(,(((([*])|(((([0-5])?[0-9])((-(([0-5])?[0-9])))?)))((/(([0-9])?([0-9])?([0-9])?([0-9])?([0-9])?([0-9])?([0-9])?([0-9])?([0-9])?([0-9])?[0-9])))?)))* (((([*])|(((((([0-1])?[0-9]))|(([2][0-3])))((-(((([0-1])?[0-9]))|(([2][0-3])))))?)))((/(([0-9])?([0-9])?([0-9])?([0-9])?([0-9])?([0-9])?([0-9])?([0-9])?([0-9])?([0-9])?[0-9])))?))(,(((([*])|(((((([0-1])?[0-9]))|(([2][0-3])))((-(((([0-1])?[0-9]))|(([2][0-3])))))?)))((/(([0-9])?([0-9])?([0-9])?([0-9])?([0-9])?([0-9])?([0-9])?([0-9])?([0-9])?([0-9])?[0-9])))?)))* (((((((([*])|(((((([1-2])?[0-9]))|(([3][0-1]))|(([1-9])))((-(((([1-2])?[0-9]))|(([3][0-1]))|(([1-9])))))?)))((/(([0-9])?([0-9])?([0-9])?([0-9])?([0-9])?([0-9])?([0-9])?([0-9])?([0-9])?([0-9])?[0-9])))?))|(L)|(((((([1-2])?[0-9]))|(([3][0-1]))|(([1-9])))W))))(,(((((([*])|(((((([1-2])?[0-9]))|(([3][0-1]))|(([1-9])))((-(((([1-2])?[0-9]))|(([3][0-1]))|(([1-9])))))?)))((/(([0-9])?([0-9])?([0-9])?([0-9])?([0-9])?([0-9])?([0-9])?([0-9])?([0-9])?([0-9])?[0-9])))?))|(L)|(((((([1-2])?[0-9]))|(([3][0-1]))|(([1-9])))W)))))*)|([?])) (((([*])|((((([1-9]))|(([1][0-2])))((-((([1-9]))|(([1][0-2])))))?))|((((JAN)|(FEB)|(MAR)|(APR)|(MAY)|(JUN)|(JUL)|(AUG)|(SEP)|(OKT)|(NOV)|(DEC))((-((JAN)|(FEB)|(MAR)|(APR)|(MAY)|(JUN)|(JUL)|(AUG)|(SEP)|(OKT)|(NOV)|(DEC))))?)))((/(([0-9])?([0-9])?([0-9])?([0-9])?([0-9])?([0-9])?([0-9])?([0-9])?([0-9])?([0-9])?[0-9])))?))(,(((([*])|((((([1-9]))|(([1][0-2])))((-((([1-9]))|(([1][0-2])))))?))|((((JAN)|(FEB)|(MAR)|(APR)|(MAY)|(JUN)|(JUL)|(AUG)|(SEP)|(OKT)|(NOV)|(DEC))((-((JAN)|(FEB)|(MAR)|(APR)|(MAY)|(JUN)|(JUL)|(AUG)|(SEP)|(OKT)|(NOV)|(DEC))))?)))((/(([0-9])?([0-9])?([0-9])?([0-9])?([0-9])?([0-9])?([0-9])?([0-9])?([0-9])?([0-9])?[0-9])))?)))* (((((((([*])|((([0-6])((-([0-6])))?))|((((SUN)|(MON)|(TUE)|(WED)|(THU)|(FRI)|(SAT))((-((SUN)|(MON)|(TUE)|(WED)|(THU)|(FRI)|(SAT))))?)))((/(([0-9])?([0-9])?([0-9])?([0-9])?([0-9])?([0-9])?([0-9])?([0-9])?([0-9])?([0-9])?[0-9])))?))|((([0-6])L))|(W)|(([#][1-5]))))(,(((((([*])|((([0-6])((-([0-6])))?))|((((SUN)|(MON)|(TUE)|(WED)|(THU)|(FRI)|(SAT))((-((SUN)|(MON)|(TUE)|(WED)|(THU)|(FRI)|(SAT))))?)))((/(([0-9])?([0-9])?([0-9])?([0-9])?([0-9])?([0-9])?([0-9])?([0-9])?([0-9])?([0-9])?[0-9])))?))|((([0-6])L))|(W)|(([#][1-5])))))*)|([?]))((( (((([*])|((([1-2][0-9][0-9][0-9])((-([1-2][0-9][0-9][0-9])))?)))((/(([0-9])?([0-9])?([0-9])?([0-9])?([0-9])?([0-9])?([0-9])?([0-9])?([0-9])?([0-9])?[0-9])))?))(,(((([*])|((([1-2][0-9][0-9][0-9])((-([1-2][0-9][0-9][0-9])))?)))((/(([0-9])?([0-9])?([0-9])?([0-9])?([0-9])?([0-9])?([0-9])?([0-9])?([0-9])?([0-9])?[0-9])))?)))*))?)\",\n      \"Default\"               : \"*/10 * * * *\"\n    }\n  },\n\n  \"Mappings\": {\n     \"AWSBastionAMI\" : {\n      \"ap-northeast-1\" : { \"AMI\" : \"ami-383c1956\" }\n    }\n  },\n\n  \"Resources\" : {\n\n    \"BastionRole\": {\n      \"Type\": \"AWS::IAM::Role\",\n      \"Properties\": {\n        \"AssumeRolePolicyDocument\": {\n           \"Statement\": [ {\n              \"Effect\": \"Allow\",\n              \"Principal\": {\n                 \"Service\": [ \"ec2.amazonaws.com\" ]\n              },\n              \"Action\": [ \"sts:AssumeRole\" ]\n           } ]\n        },\n        \"Path\": \"/\",\n        \"Policies\": [ {\n          \"PolicyName\": \"Bastion_Takeover\",\n          \"PolicyDocument\": {\n            \"Statement\": [ {\n               \"Effect\": \"Allow\",\n               \"Action\": [\n                  \"iam:ListUsers\",\n                  \"iam:ListSshPublicKeys\",\n                  \"iam:GetSshPublicKey\",\n                  \"ec2:AssociateAddress\"\n               ],\n               \"Resource\": \"*\"\n            } ]\n          }\n        } ]\n      }\n    },\n\n    \"BastionRoleProfile\": {\n       \"Type\": \"AWS::IAM::InstanceProfile\",\n       \"Properties\": {\n          \"Path\": \"/\",\n          \"Roles\": [ {\n             \"Ref\": \"BastionRole\"\n          } ]\n       }\n    },\n\n    \"BastionLaunchConfig\" : {\n      \"Type\" : \"AWS::AutoScaling::LaunchConfiguration\",\n      \"Metadata\" : {\n        \"AWS::CloudFormation::Init\" : {\n          \"config\" : {\n            \"packages\" : {\n              \"yum\" : {\n                \"jq\" : []\n              }\n            },\n            \"files\" : {\n              \"/etc/sshkey-update/cron.sh\" : {\n                \"content\" : { \"Fn::Join\" : [ \"\\n\", [\n                  \"#!/bin/bash\",\n                  \"PATH=$PATH:/sbin:/bin:/usr/sbin:/usr/bin:/opt/aws/bin\",\n                  \"function contains() {\",\n                  \"  for row in $1; do\",\n                  \"    if [ \\\"$row\\\" == \\\"$2\\\" ]; then\",\n                  \"      echo \\\"y\\\"\",\n                  \"      return 0\",\n                  \"    fi\",\n                  \"  done\",\n                  \"  echo \\\"n\\\"\",\n                  \"  return 1\",\n                  \"}\",\n                  \"# current users in host.\",\n                  \"host_users=$(find /home -maxdepth 1 -type d | grep '^/home/' | sed -e 's/^\\\\/home\\\\/\\\\(.\\\\)/\\\\1/')\",\n                  \"# create iam users\",\n                  \"iam_users=$(aws iam list-users | jq -r '.Users[].UserName')\",\n                  \"for iam_user in $iam_users; do\",\n                  \"  user_home=\\\"/home/$iam_user\\\"\",\n                  \"  user_ssh_dir=\\\"$user_home/.ssh\\\"\",\n                  \"  useradd \\\"$iam_user\\\"\",\n                  \"  # setup ssh directory\",\n                  \"  mkdir -p \\\"$user_ssh_dir\\\"\",\n                  \"  chown -R \\\"$iam_user:$iam_user\\\" \\\"$user_home\\\"\",\n                  \"  chmod -R 500 \\\"$user_home\\\"\",\n                  \"  # setup ssh key\",\n                  \"  touch \\\"$user_ssh_dir/authorized_keys\\\"\",\n                  \"  touch \\\"$user_ssh_dir/new_authorized_keys\\\"\",\n                  \"  key_ids=$(aws iam list-ssh-public-keys --user-name $iam_user | jq -r 'select(.SSHPublicKeys[].Status == \\\"Active\\\") | .SSHPublicKeys[].SSHPublicKeyId')\",\n                  \"  for key_id in $key_ids; do\",\n                  \"    aws iam get-ssh-public-key --user-name $iam_user --ssh-public-key-id $key_id --encoding SSH | jq -r '.SSHPublicKey.SSHPublicKeyBody' >> \\\"$user_ssh_dir/new_authorized_keys\\\"\",\n                  \"  done\",\n                  \"  keys_diff=$(diff \\\"$user_ssh_dir/authorized_keys\\\" \\\"$user_ssh_dir/new_authorized_keys\\\")\",\n                  \"  if [ \\\"$keys_diff\\\" == \\\"\\\" ]; then\",\n                  \"    rm -f \\\"$user_ssh_dir/new_authorized_keys\\\"\",\n                  \"    continue\",\n                  \"  fi\",\n                  \"  rm -f \\\"$user_ssh_dir/authorized_keys\\\"\",\n                  \"  mv \\\"$user_ssh_dir/new_authorized_keys\\\" \\\"$user_ssh_dir/authorized_keys\\\"\",\n                  \"  chown \\\"$iam_user:$iam_user\\\" \\\"$user_ssh_dir/authorized_keys\\\"\",\n                  \"  chmod 500 \\\"$user_ssh_dir/authorized_keys\\\"\",\n                  \"  ps aux | grep \\\"sshd: $iam_user@pts/\\\" | grep -v grep | awk '{ print \\\"kill -9\\\", $2 }' | sh\",\n                  \"done\",\n                  \"# delete iam user deleted by aws management console from host\",\n                  \"for host_user in $host_users; do\",\n                  \"  # if ec2-user, not action\",\n                  \"  if [ \\\"$host_user\\\" = \\\"ec2-user\\\" ]; then\",\n                  \"    continue\",\n                  \"  fi\",\n                  \"  if [[ \\\"$(contains \\\"${iam_users[@]}\\\" \\\"$host_user\\\")\\\" == \\\"y\\\" ]]; then\",\n                  \"    continue\",\n                  \"  fi\",\n                  \"  ps aux | grep \\\"sshd: $host_user@pts/\\\" | grep -v grep | awk '{ print \\\"kill -9\\\", $2 }' | sh\",\n                  \"  userdel -r \\\"$host_user\\\"\",\n                  \"  rm -rf \\\"/home/$host_user\\\"\",\n                  \"  echo \\\"delete $host_user from host.\\\"\",\n                  \"done\"\n                ]]},\n                \"mode\"  : \"0755\",\n                \"owner\" : \"root\",\n                \"group\" : \"root\"\n              }\n            }\n          }\n        }\n      },\n      \"Properties\" : {\n          \"InstanceType\"             : { \"Ref\" : \"InstanceType\" },\n          \"KeyName\"                  : { \"Ref\" : \"KeyName\" },\n          \"ImageId\"                  : { \"Fn::FindInMap\" : [ \"AWSBastionAMI\", { \"Ref\" : \"AWS::Region\" }, \"AMI\"] },\n          \"IamInstanceProfile\"       : { \"Ref\" : \"BastionRoleProfile\" },\n          \"AssociatePublicIpAddress\" : \"true\",\n          \"SecurityGroups\"           : [ { \"Ref\" : \"SSHSecurityGroup\" } ],\n          \"UserData\"                 : { \"Fn::Base64\" : { \"Fn::Join\" : [ \"\", [\n            \"#!/bin/bash\\n\",\n            \"yum update -y\\n\",\n            \"export AWS_DEFAULT_REGION=\", { \"Ref\" : \"AWS::Region\" }, \"\\n\",\n            \"/opt/aws/bin/cfn-init -s \", { \"Ref\" : \"AWS::StackId\" }, \" -r BastionLaunchConfig --region \", { \"Ref\" : \"AWS::Region\" }, \"\\n\",\n            \"echo \\\"\", { \"Ref\" : \"Recurrence\" }, \" /bin/bash /etc/sshkey-update/cron.sh\\\" >> /tmp/$$.tmp\\n\",\n            \"crontab /tmp/$$.tmp && rm -rf /tmp/$$.tmp\\n\",\n            \"/bin/bash /etc/sshkey-update/cron.sh\\n\",\n            \"instanceId=$(curl http://169.254.169.254/latest/meta-data/instance-id)\\n\",\n            \"aws ec2 associate-address --instance-id $instanceId --allocation-id \", { \"Ref\" : \"ElasticIpId\" }, \"\\n\"\n          ]]}\n        }\n      }\n    },\n    \"BastionAutoScalingGroup\" : {\n      \"Type\"                      : \"AWS::AutoScaling::AutoScalingGroup\",\n      \"Properties\" : {\n        \"LaunchConfigurationName\" : { \"Ref\" : \"BastionLaunchConfig\" },\n        \"MaxSize\"                 : \"1\",\n        \"MinSize\"                 : \"1\",\n        \"VPCZoneIdentifier\"       : { \"Ref\" : \"Subnets\" },\n        \"Tags\"                    : [\n          { \"Key\" : \"Name\", \"Value\" : \"bastion\", \"PropagateAtLaunch\" : \"true\" }\n        ]\n      }\n    }\n  }\n}\n\nAWS\u306e\u8e0f\u307f\u53f0\u30db\u30b9\u30c8\u306e\u30e6\u30fc\u30b6\u30fc\u7ba1\u7406\u3063\u3066\u3069\u3046\u3057\u3066\u3044\u307e\u3059\u304b\uff1fIAM\u30e6\u30fc\u30b6\u30fc\u3068\u30db\u30b9\u30c8\u30e6\u30fc\u30b6\u30fc\u3067\u7ba1\u7406\u304c2\u91cd\u306b\u306a\u308a\u3001\u5927\u5909\u2025\u306a\u3093\u3068\u304b\u306a\u3089\u306a\u3044\u304b\u306a\u3041\u3068\u601d\u3063\u3066\u3044\u305f\u3089\u3001IAM\u30e6\u30fc\u30b6\u30fc\u3054\u3068\u306bCodeDeploy\u7528\u306eSSH\u516c\u958b\u9375\u304c\u767b\u9332\u3067\u304d\u308b\u306e\u3092\u898b\u3064\u3051\u305f\u306e\u3067\u3001\u4eca\u56de\u306f\u3053\u308c\u3092\u4f7f\u3063\u3066\u30db\u30b9\u30c8\u30e6\u30fc\u30b6\u30fc\u3092\u7ba1\u7406\u3092\u3059\u308b\u6a5f\u69cb\u3092\u4f5c\u3063\u3066\u307f\u307e\u3057\u305f\u3002\n\n# \u3084\u308a\u305f\u3044\u3053\u3068\n\n1. \u81ea\u52d5\u3067IAM\u306b\u767b\u9332\u3055\u308c\u3066\u3044\u308b\u30e6\u30fc\u30b6\u30fc\u3068\u540c\u3058\u30e6\u30fc\u30b6\u30fc\u3092\u30db\u30b9\u30c8\u306b\u4f5c\u6210\u3059\u308b\n2. IAM\u30e6\u30fc\u30b6\u30fc\u3054\u3068\u306b\u767b\u9332\u3057\u3066\u3044\u308bCodeDeploy\u306eSSH\u516c\u958b\u9375\u3092\u53d6\u5f97\u3057\uff0c`~/.ssh/authorized_keys`\u306b\u30bb\u30c3\u30c8\u3059\u308b\n\n# \u4e3b\u306a\u90e8\u54c1\u306e\u691c\u8a3c\n\n## \u30db\u30b9\u30c8\u306b\u767b\u9332\u3055\u308c\u3066\u3044\u308b\u30e6\u30fc\u30b6\u30fc\u4e00\u89a7\u3092\u53d6\u5f97\u3059\u308b\n\n\u76f4\u63a5\u30db\u30b9\u30c8\u306b\u4f5c\u6210\u3055\u308c\u3066\u3044\u308b\u30e6\u30fc\u30b6\u30fc\u306e\u53d6\u5f97\u65b9\u6cd5\u304c\u308f\u304b\u3089\u306a\u304b\u3063\u305f\u306e\u3067\u3001sed\u3092\u99c6\u4f7f\u3057\u3066`/home`\u76f4\u4e0b\u306b\u4f5c\u6210\u3055\u308c\u3066\u3044\u308b\u30e6\u30fc\u30b6\u30fc\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u306e\u4e00\u89a7\u3092\u53d6\u5f97\u3059\u308b\u3088\u3046\u306b\u3057\u307e\u3057\u305f\u3002\n\n```bash\nfind /home -maxdepth 1 -type d | grep '^/home/' | sed -e 's/^\\/home\\/\\(.\\)/\\1/'\n```\n\n## IAM\u30e6\u30fc\u30b6\u30fc\u306e\u4e00\u89a7\u3092\u53d6\u5f97\u3059\u308b\n\naws-cli\u3067\uff0cIAM\u30e6\u30fc\u30b6\u30fc\u306e\u540d\u524d\u4e00\u89a7\u3092\u53d6\u5f97\u3067\u304d\u307e\u3057\u305f\u3002\n\n```bash\naws iam list-users | jq -r '.Users[].UserName'\n```\n\n## IAM\u30e6\u30fc\u30b6\u30fc\u306eCodeDeploy\u7528SSH\u516c\u958b\u9375\u3092\u53d6\u5f97\u3059\u308b\n\n\u30e6\u30fc\u30b6\u30fc\u3054\u3068\u306b\u9375\u306eID\u4e00\u89a7\u3092\u53d6\u5f97\u3057\u3066\u3001ID\u304b\u3089\u9375\u306e\u5b9f\u4f53\u304c\u53d6\u308c\u307e\u3057\u305f\u3002\n\n```bash\nkey_ids=$(aws iam list-ssh-public-keys --user-name $iam_user | jq -r 'select(.SSHPublicKeys[].Status == \"Active\") | .SSHPublicKeys[].SSHPublicKeyId')\nfor key_id in $key_ids; do\n  aws iam get-ssh-public-key --user-name $iam_user --ssh-public-key-id $key_id --encoding SSH | jq -r '.SSHPublicKey.SSHPublicKeyBody' >> authorized_keys\ndone\n```\n\n# \u5b8c\u6210\u7248\u306e\u30b9\u30af\u30ea\u30d7\u30c8\n\n\u6700\u7d42\u7684\u306b\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u30d5\u30ed\u30fc\u3092\u5b9f\u884c\u3055\u305b\u308b\u3088\u3046\u306b\u3057\u307e\u3057\u305f\u3002\n\n1. \u30db\u30b9\u30c8\u306bIAM\u30e6\u30fc\u30b6\u30fc\u3068\u540c\u3058\u540d\u524d\u3067\u30e6\u30fc\u30b6\u30fc\u3092\u4f5c\u6210\n2. IAM\u30e6\u30fc\u30b6\u30fc\u3054\u3068\u306b\u767b\u9332\u3057\u3066\u3044\u308bCodeDeploy\u306eSSH\u516c\u958b\u9375\u3092\u53d6\u5f97\u3057\u3001\u66f4\u65b0\u304c\u3042\u308b\u5834\u5408\u306f`~/.ssh/authorized_keys`\u306b\u30bb\u30c3\u30c8\n3. IAM\u30e6\u30fc\u30b6\u30fc\u304b\u3089\u524a\u9664\u3055\u308c\u305f\u30e6\u30fc\u30b6\u30fc\u306f\u30db\u30b9\u30c8\u304b\u3089\u3082\u524a\u9664\n4. \u9375\u306e\u66f4\u65b0\u3084IAM\u304b\u3089\u524a\u9664\u304c\u3042\u3063\u305f\u30e6\u30fc\u30b6\u30fc\u304c\u73fe\u5728SSH\u3067\u63a5\u7d9a\u3057\u3066\u3044\u308b\u5834\u5408\u306f\u3001\u30b3\u30cd\u30af\u30b7\u30e7\u30f3\u3092\u5f37\u5236\u5207\u65ad\n\n```bash\n#!/bin/bash\nPATH=$PATH:/sbin:/bin:/usr/sbin:/usr/bin:/opt/aws/bin\nfunction contains() {\n  for row in $1; do\n    if [ \"$row\" == \"$2\" ]; then\n      echo \"y\"\n      return 0\n    fi\n  done\n  echo \"n\"\n  return 1\n}\n# current users in host.\nhost_users=$(find /home -maxdepth 1 -type d | grep '^/home/' | sed -e 's/^\\/home\\/\\(.\\)/\\1/')\n# create iam users\niam_users=$(aws iam list-users | jq -r '.Users[].UserName')\nfor iam_user in $iam_users; do\n  user_home=\"/home/$iam_user\"\n  user_ssh_dir=\"$user_home/.ssh\"\n  useradd \"$iam_user\"\n  # setup ssh directory\n  mkdir -p \"$user_ssh_dir\"\n  chown -R \"$iam_user:$iam_user\" \"$user_home\"\n  chmod -R 500 \"$user_home\"\n  # setup ssh key\n  touch \"$user_ssh_dir/authorized_keys\"\n  touch \"$user_ssh_dir/new_authorized_keys\"\n  key_ids=$(aws iam list-ssh-public-keys --user-name $iam_user | jq -r 'select(.SSHPublicKeys[].Status == \"Active\") | .SSHPublicKeys[].SSHPublicKeyId')\n  for key_id in $key_ids; do\n    aws iam get-ssh-public-key --user-name $iam_user --ssh-public-key-id $key_id --encoding SSH | jq -r '.SSHPublicKey.SSHPublicKeyBody' >> \"$user_ssh_dir/new_authorized_keys\"\n  done\n  keys_diff=$(diff \"$user_ssh_dir/authorized_keys\" \"$user_ssh_dir/new_authorized_keys\")\n  if [ \"$keys_diff\" == \"\" ]; then\n    rm -f \"$user_ssh_dir/new_authorized_keys\"\n    continue\n  fi\n  rm -f \"$user_ssh_dir/authorized_keys\"\n  mv \"$user_ssh_dir/new_authorized_keys\" \"$user_ssh_dir/authorized_keys\"\n  chown \"$iam_user:$iam_user\" \"$user_ssh_dir/authorized_keys\"\n  chmod 500 \"$user_ssh_dir/authorized_keys\"\n  ps aux | grep \"sshd: $iam_user@pts/\" | grep -v grep | awk '{ print \"kill -9\", $2 }' | sh\ndone\n# delete iam user deleted by aws from host\nfor host_user in $host_users; do\n  # if ec2-user, not action\n  if [ \"$host_user\" = \"ec2-user\" ]; then\n    continue\n  fi\n  if [[ \"$(contains \"${iam_users[@]}\" \"$host_user\")\" == \"y\" ]]; then\n    continue\n  fi\n  ps aux | grep \"sshd: $host_user@pts/\" | grep -v grep | awk '{ print \"kill -9\", $2 }' | sh\n  userdel -r \"$host_user\"\n  rm -rf \"/home/$host_user\"\n  echo \"delete $host_user from host.\"\ndone\n```\n\n\u3042\u3068\u306f\u3001cron\u3067\u3053\u308c\u3092\u9069\u5f53\u306a\u9593\u9694\u3067\u307e\u308f\u3057\u3066\u3042\u3052\u308c\u3070\u5b8c\u6210\u3067\u3059\u3002\n\u304a\u624b\u7269\u306e\u74b0\u5883\u306b\u76f4\u3050\u306b\u30c7\u30d7\u30ed\u30a4\u3067\u304d\u308b\u3088\u3046\u306bCloudFromation\u306e\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u3092\u4f5c\u3063\u3066\u307f\u307e\u3057\u305f\u306e\u3067\u3001\u826f\u3051\u308c\u3070\u4f7f\u3063\u3066\u304f\u3060\u3055\u3044\u3002\n\n```json\n{\n  \"AWSTemplateFormatVersion\": \"2010-09-09\",\n\n  \"Description\" : \"Bastion Instance\",\n\n  \"Parameters\" : {\n    \"KeyName\" : {\n      \"Description\"           : \"Name of an existing EC2 KeyPair to enable SSH access to the instances\",\n      \"Type\"                  : \"AWS::EC2::KeyPair::KeyName\",\n      \"ConstraintDescription\" : \"can contain only alphanumeric characters, spaces, dashes and underscores.\"\n    },\n    \"InstanceType\" : {\n      \"Description\"           : \"Instance type for node.\",\n      \"Type\"                  : \"String\",\n      \"Default\"               : \"t2.nano\",\n      \"AllowedValues\"         : [ \"t2.nano\", \"t2.micro\",\"t2.small\",\"t2.medium\",\"m3.medium\",\"m3.large\",\"m3.xlarge\",\"m3.2xlarge\",\"c3.large\",\"c3.xlarge\",\"c3.2xlarge\",\"c3.4xlarge\",\"c3.8xlarge\" ],\n      \"ConstraintDescription\" : \"must be a valid T2, M3 or C3 instance type.\"\n    },\n    \"Subnets\" : {\n      \"Description\"           : \"ID of your existing subnet for launching Bastion\",\n      \"Type\"                  : \"List<AWS::EC2::Subnet::Id>\"\n    },\n    \"SSHSecurityGroup\" : {\n      \"Description\"           : \"SecurityGroup for accessing with SSH\",\n      \"Type\"                  : \"AWS::EC2::SecurityGroup::Id\"\n    },\n    \"ElasticIpId\": {\n      \"Description\"           : \"ID of ElasticIp for launching Bastion\",\n      \"Type\"                  : \"String\",\n      \"AllowedPattern\"        : \"eipalloc-[a-z0-9]{8}\",\n      \"ConstraintDescription\" : \"Input format is eipalloc-xxxxxxxx\"\n    },\n    \"Recurrence\" : {\n      \"Type\"                  : \"String\",\n      \"Description\"           : \"schedule for updating keys. crontab style syntax. ex) 0 0 * * *\",\n      \"AllowedPattern\"        : \"(((([*])|(((([0-5])?[0-9])((-(([0-5])?[0-9])))?)))((/(([0-9])?([0-9])?([0-9])?([0-9])?([0-9])?([0-9])?([0-9])?([0-9])?([0-9])?([0-9])?[0-9])))?))(,(((([*])|(((([0-5])?[0-9])((-(([0-5])?[0-9])))?)))((/(([0-9])?([0-9])?([0-9])?([0-9])?([0-9])?([0-9])?([0-9])?([0-9])?([0-9])?([0-9])?[0-9])))?)))* (((([*])|(((((([0-1])?[0-9]))|(([2][0-3])))((-(((([0-1])?[0-9]))|(([2][0-3])))))?)))((/(([0-9])?([0-9])?([0-9])?([0-9])?([0-9])?([0-9])?([0-9])?([0-9])?([0-9])?([0-9])?[0-9])))?))(,(((([*])|(((((([0-1])?[0-9]))|(([2][0-3])))((-(((([0-1])?[0-9]))|(([2][0-3])))))?)))((/(([0-9])?([0-9])?([0-9])?([0-9])?([0-9])?([0-9])?([0-9])?([0-9])?([0-9])?([0-9])?[0-9])))?)))* (((((((([*])|(((((([1-2])?[0-9]))|(([3][0-1]))|(([1-9])))((-(((([1-2])?[0-9]))|(([3][0-1]))|(([1-9])))))?)))((/(([0-9])?([0-9])?([0-9])?([0-9])?([0-9])?([0-9])?([0-9])?([0-9])?([0-9])?([0-9])?[0-9])))?))|(L)|(((((([1-2])?[0-9]))|(([3][0-1]))|(([1-9])))W))))(,(((((([*])|(((((([1-2])?[0-9]))|(([3][0-1]))|(([1-9])))((-(((([1-2])?[0-9]))|(([3][0-1]))|(([1-9])))))?)))((/(([0-9])?([0-9])?([0-9])?([0-9])?([0-9])?([0-9])?([0-9])?([0-9])?([0-9])?([0-9])?[0-9])))?))|(L)|(((((([1-2])?[0-9]))|(([3][0-1]))|(([1-9])))W)))))*)|([?])) (((([*])|((((([1-9]))|(([1][0-2])))((-((([1-9]))|(([1][0-2])))))?))|((((JAN)|(FEB)|(MAR)|(APR)|(MAY)|(JUN)|(JUL)|(AUG)|(SEP)|(OKT)|(NOV)|(DEC))((-((JAN)|(FEB)|(MAR)|(APR)|(MAY)|(JUN)|(JUL)|(AUG)|(SEP)|(OKT)|(NOV)|(DEC))))?)))((/(([0-9])?([0-9])?([0-9])?([0-9])?([0-9])?([0-9])?([0-9])?([0-9])?([0-9])?([0-9])?[0-9])))?))(,(((([*])|((((([1-9]))|(([1][0-2])))((-((([1-9]))|(([1][0-2])))))?))|((((JAN)|(FEB)|(MAR)|(APR)|(MAY)|(JUN)|(JUL)|(AUG)|(SEP)|(OKT)|(NOV)|(DEC))((-((JAN)|(FEB)|(MAR)|(APR)|(MAY)|(JUN)|(JUL)|(AUG)|(SEP)|(OKT)|(NOV)|(DEC))))?)))((/(([0-9])?([0-9])?([0-9])?([0-9])?([0-9])?([0-9])?([0-9])?([0-9])?([0-9])?([0-9])?[0-9])))?)))* (((((((([*])|((([0-6])((-([0-6])))?))|((((SUN)|(MON)|(TUE)|(WED)|(THU)|(FRI)|(SAT))((-((SUN)|(MON)|(TUE)|(WED)|(THU)|(FRI)|(SAT))))?)))((/(([0-9])?([0-9])?([0-9])?([0-9])?([0-9])?([0-9])?([0-9])?([0-9])?([0-9])?([0-9])?[0-9])))?))|((([0-6])L))|(W)|(([#][1-5]))))(,(((((([*])|((([0-6])((-([0-6])))?))|((((SUN)|(MON)|(TUE)|(WED)|(THU)|(FRI)|(SAT))((-((SUN)|(MON)|(TUE)|(WED)|(THU)|(FRI)|(SAT))))?)))((/(([0-9])?([0-9])?([0-9])?([0-9])?([0-9])?([0-9])?([0-9])?([0-9])?([0-9])?([0-9])?[0-9])))?))|((([0-6])L))|(W)|(([#][1-5])))))*)|([?]))((( (((([*])|((([1-2][0-9][0-9][0-9])((-([1-2][0-9][0-9][0-9])))?)))((/(([0-9])?([0-9])?([0-9])?([0-9])?([0-9])?([0-9])?([0-9])?([0-9])?([0-9])?([0-9])?[0-9])))?))(,(((([*])|((([1-2][0-9][0-9][0-9])((-([1-2][0-9][0-9][0-9])))?)))((/(([0-9])?([0-9])?([0-9])?([0-9])?([0-9])?([0-9])?([0-9])?([0-9])?([0-9])?([0-9])?[0-9])))?)))*))?)\",\n      \"Default\"               : \"*/10 * * * *\"\n    }\n  },\n\n  \"Mappings\": {\n     \"AWSBastionAMI\" : {\n      \"ap-northeast-1\" : { \"AMI\" : \"ami-383c1956\" }\n    }\n  },\n\n  \"Resources\" : {\n\n    \"BastionRole\": {\n      \"Type\": \"AWS::IAM::Role\",\n      \"Properties\": {\n        \"AssumeRolePolicyDocument\": {\n           \"Statement\": [ {\n              \"Effect\": \"Allow\",\n              \"Principal\": {\n                 \"Service\": [ \"ec2.amazonaws.com\" ]\n              },\n              \"Action\": [ \"sts:AssumeRole\" ]\n           } ]\n        },\n        \"Path\": \"/\",\n        \"Policies\": [ {\n          \"PolicyName\": \"Bastion_Takeover\",\n          \"PolicyDocument\": {\n            \"Statement\": [ {\n               \"Effect\": \"Allow\",\n               \"Action\": [\n                  \"iam:ListUsers\",\n                  \"iam:ListSshPublicKeys\",\n                  \"iam:GetSshPublicKey\",\n                  \"ec2:AssociateAddress\"\n               ],\n               \"Resource\": \"*\"\n            } ]\n          }\n        } ]\n      }\n    },\n\n    \"BastionRoleProfile\": {\n       \"Type\": \"AWS::IAM::InstanceProfile\",\n       \"Properties\": {\n          \"Path\": \"/\",\n          \"Roles\": [ {\n             \"Ref\": \"BastionRole\"\n          } ]\n       }\n    },\n\n    \"BastionLaunchConfig\" : {\n      \"Type\" : \"AWS::AutoScaling::LaunchConfiguration\",\n      \"Metadata\" : {\n        \"AWS::CloudFormation::Init\" : {\n          \"config\" : {\n            \"packages\" : {\n              \"yum\" : {\n                \"jq\" : []\n              }\n            },\n            \"files\" : {\n              \"/etc/sshkey-update/cron.sh\" : {\n                \"content\" : { \"Fn::Join\" : [ \"\\n\", [\n                  \"#!/bin/bash\",\n                  \"PATH=$PATH:/sbin:/bin:/usr/sbin:/usr/bin:/opt/aws/bin\",\n                  \"function contains() {\",\n                  \"  for row in $1; do\",\n                  \"    if [ \\\"$row\\\" == \\\"$2\\\" ]; then\",\n                  \"      echo \\\"y\\\"\",\n                  \"      return 0\",\n                  \"    fi\",\n                  \"  done\",\n                  \"  echo \\\"n\\\"\",\n                  \"  return 1\",\n                  \"}\",\n                  \"# current users in host.\",\n                  \"host_users=$(find /home -maxdepth 1 -type d | grep '^/home/' | sed -e 's/^\\\\/home\\\\/\\\\(.\\\\)/\\\\1/')\",\n                  \"# create iam users\",\n                  \"iam_users=$(aws iam list-users | jq -r '.Users[].UserName')\",\n                  \"for iam_user in $iam_users; do\",\n                  \"  user_home=\\\"/home/$iam_user\\\"\",\n                  \"  user_ssh_dir=\\\"$user_home/.ssh\\\"\",\n                  \"  useradd \\\"$iam_user\\\"\",\n                  \"  # setup ssh directory\",\n                  \"  mkdir -p \\\"$user_ssh_dir\\\"\",\n                  \"  chown -R \\\"$iam_user:$iam_user\\\" \\\"$user_home\\\"\",\n                  \"  chmod -R 500 \\\"$user_home\\\"\",\n                  \"  # setup ssh key\",\n                  \"  touch \\\"$user_ssh_dir/authorized_keys\\\"\",\n                  \"  touch \\\"$user_ssh_dir/new_authorized_keys\\\"\",\n                  \"  key_ids=$(aws iam list-ssh-public-keys --user-name $iam_user | jq -r 'select(.SSHPublicKeys[].Status == \\\"Active\\\") | .SSHPublicKeys[].SSHPublicKeyId')\",\n                  \"  for key_id in $key_ids; do\",\n                  \"    aws iam get-ssh-public-key --user-name $iam_user --ssh-public-key-id $key_id --encoding SSH | jq -r '.SSHPublicKey.SSHPublicKeyBody' >> \\\"$user_ssh_dir/new_authorized_keys\\\"\",\n                  \"  done\",\n                  \"  keys_diff=$(diff \\\"$user_ssh_dir/authorized_keys\\\" \\\"$user_ssh_dir/new_authorized_keys\\\")\",\n                  \"  if [ \\\"$keys_diff\\\" == \\\"\\\" ]; then\",\n                  \"    rm -f \\\"$user_ssh_dir/new_authorized_keys\\\"\",\n                  \"    continue\",\n                  \"  fi\",\n                  \"  rm -f \\\"$user_ssh_dir/authorized_keys\\\"\",\n                  \"  mv \\\"$user_ssh_dir/new_authorized_keys\\\" \\\"$user_ssh_dir/authorized_keys\\\"\",\n                  \"  chown \\\"$iam_user:$iam_user\\\" \\\"$user_ssh_dir/authorized_keys\\\"\",\n                  \"  chmod 500 \\\"$user_ssh_dir/authorized_keys\\\"\",\n                  \"  ps aux | grep \\\"sshd: $iam_user@pts/\\\" | grep -v grep | awk '{ print \\\"kill -9\\\", $2 }' | sh\",\n                  \"done\",\n                  \"# delete iam user deleted by aws management console from host\",\n                  \"for host_user in $host_users; do\",\n                  \"  # if ec2-user, not action\",\n                  \"  if [ \\\"$host_user\\\" = \\\"ec2-user\\\" ]; then\",\n                  \"    continue\",\n                  \"  fi\",\n                  \"  if [[ \\\"$(contains \\\"${iam_users[@]}\\\" \\\"$host_user\\\")\\\" == \\\"y\\\" ]]; then\",\n                  \"    continue\",\n                  \"  fi\",\n                  \"  ps aux | grep \\\"sshd: $host_user@pts/\\\" | grep -v grep | awk '{ print \\\"kill -9\\\", $2 }' | sh\",\n                  \"  userdel -r \\\"$host_user\\\"\",\n                  \"  rm -rf \\\"/home/$host_user\\\"\",\n                  \"  echo \\\"delete $host_user from host.\\\"\",\n                  \"done\"\n                ]]},\n                \"mode\"  : \"0755\",\n                \"owner\" : \"root\",\n                \"group\" : \"root\"\n              }\n            }\n          }\n        }\n      },\n      \"Properties\" : {\n          \"InstanceType\"             : { \"Ref\" : \"InstanceType\" },\n          \"KeyName\"                  : { \"Ref\" : \"KeyName\" },\n          \"ImageId\"                  : { \"Fn::FindInMap\" : [ \"AWSBastionAMI\", { \"Ref\" : \"AWS::Region\" }, \"AMI\"] },\n          \"IamInstanceProfile\"       : { \"Ref\" : \"BastionRoleProfile\" },\n          \"AssociatePublicIpAddress\" : \"true\",\n          \"SecurityGroups\"           : [ { \"Ref\" : \"SSHSecurityGroup\" } ],\n          \"UserData\"                 : { \"Fn::Base64\" : { \"Fn::Join\" : [ \"\", [\n            \"#!/bin/bash\\n\",\n            \"yum update -y\\n\",\n            \"export AWS_DEFAULT_REGION=\", { \"Ref\" : \"AWS::Region\" }, \"\\n\",\n            \"/opt/aws/bin/cfn-init -s \", { \"Ref\" : \"AWS::StackId\" }, \" -r BastionLaunchConfig --region \", { \"Ref\" : \"AWS::Region\" }, \"\\n\",\n            \"echo \\\"\", { \"Ref\" : \"Recurrence\" }, \" /bin/bash /etc/sshkey-update/cron.sh\\\" >> /tmp/$$.tmp\\n\",\n            \"crontab /tmp/$$.tmp && rm -rf /tmp/$$.tmp\\n\",\n            \"/bin/bash /etc/sshkey-update/cron.sh\\n\",\n            \"instanceId=$(curl http://169.254.169.254/latest/meta-data/instance-id)\\n\",\n            \"aws ec2 associate-address --instance-id $instanceId --allocation-id \", { \"Ref\" : \"ElasticIpId\" }, \"\\n\"\n          ]]}\n        }\n      }\n    },\n    \"BastionAutoScalingGroup\" : {\n      \"Type\"                      : \"AWS::AutoScaling::AutoScalingGroup\",\n      \"Properties\" : {\n        \"LaunchConfigurationName\" : { \"Ref\" : \"BastionLaunchConfig\" },\n        \"MaxSize\"                 : \"1\",\n        \"MinSize\"                 : \"1\",\n        \"VPCZoneIdentifier\"       : { \"Ref\" : \"Subnets\" },\n        \"Tags\"                    : [\n          { \"Key\" : \"Name\", \"Value\" : \"bastion\", \"PropagateAtLaunch\" : \"true\" }\n        ]\n      }\n    }\n  }\n}\n```\n", "tags": ["AWS", "IAM", "SSH"]}