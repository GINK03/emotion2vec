{"tags": ["Java", "java8"], "context": "\u4e0e\u3048\u3089\u308c\u305f\u30ea\u30b9\u30c8\u304b\u3089n\u500b\u306e\u8981\u7d20\u3092\u53d6\u308a\u51fa\u3059\u9806\u5217\u3092\u30b9\u30c8\u30ea\u30fc\u30e0\u3068\u3057\u3066\u751f\u6210\u3057\u307e\u3059\u3002\n    static <T> List<T> cons(T head, List<T> tail) {\n        List<T> list = new ArrayList<>();\n        list.add(head);\n        list.addAll(tail);\n        return list;\n    }\n\n    static <T> List<T> remove(T e, List<T> list) {\n        List<T> newList = new ArrayList<>(list);\n        newList.remove(e);\n        return newList;\n    }\n\n    public static <E> Stream<List<E>> permutations(int n, List<E> list) {\n        if (n <= 0) return Stream.of(new ArrayList<>());\n        return list.stream()\n            .flatMap(h -> permutations(n - 1, remove(h, list))\n                .map(t -> cons(h, t)));\n    }\n\n\u30ea\u30b9\u30c8\u306e\u4e2d\u304b\u3089\u8981\u7d20\u3092\u3072\u3068\u3064\u53d6\u308a\u51fa\u3057\u307e\u3059\uff08h\uff09\u3002\u6b8b\u308a\u306e\u8981\u7d20\uff08remove(h, list)\uff09\u306e\u9806\u5217\u3092\u3059\u3079\u3066\u6c42\u3081\u3066\u3001\u5f97\u3089\u308c\u305f\u305d\u308c\u305e\u308c\u306e\u30ea\u30b9\u30c8\u306e\u5148\u982d\u306b\u53d6\u308a\u51fa\u3057\u305f\u8981\u7d20\uff08h\uff09\u3092\u8ffd\u52a0\uff08cons(h, t)\uff09\u3057\u307e\u3059\u3002\u3053\u308c\u3067\u53d6\u308a\u51fa\u3057\u305f\u8981\u7d20\u3092\u5148\u982d\u3068\u3059\u308b\u3059\u3079\u3066\u306e\u9806\u5217\u304c\u6c42\u307e\u308a\u307e\u3059\u3002\u3059\u3079\u3066\u306e\u8981\u7d20\u306b\u3064\u3044\u3066\u3053\u308c\u3092\u884c\u3046\u3068\u3059\u3079\u3066\u306e\u9806\u5217\u304c\u5f97\u3089\u308c\u307e\u3059\u3002\ncons()\u306fLisp\u7cfb\u306e\u8a00\u8a9e\u3084\u95a2\u6570\u578b\u8a00\u8a9e\u3092\u3084\u3063\u3066\u3044\u308b\u4eba\u304b\u3089\u898b\u308b\u3068\u7b11\u3044\u3082\u306e\u3067\u3059\u306d\u3002\n\u30ea\u30b9\u30c8[1, 2, 3]\u306e\u4e2d\u304b\u30892\u3064\u53d6\u308b\u9806\u5217\u3092\u751f\u6210\u3057\u3066\u307f\u307e\u3059\u3002\n    @Test\n    public void testPermutationsN() {\n        permutations(2, Arrays.asList(1, 2, 3))\n            .forEach(System.out::println);\n    }\n\n\u7d50\u679c\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002\n[1, 2]\n[1, 3]\n[2, 1]\n[2, 3]\n[3, 1]\n[3, 2]\n\n\u3053\u308c\u3092\u4f7f\u3063\u3066\u8986\u9762\u7b97\u300cSEND + MORE = MONEY\u300d\u3092\u89e3\u3044\u3066\u307f\u307e\u3059\u3002\n\u554f\u984c\u306b\u8868\u308c\u308b\u82f1\u5b57\u306fS, E, N, D, M, O, R, Y\u306e8\u7a2e\u985e\u306a\u306e\u3067\u3001\u30ea\u30b9\u30c8[0, 1, ... , 9]\u304b\u30898\u500b\u3092\u53d6\u308a\u51fa\u3059\u9806\u5217\u3092\u5f97\u3066\u3001\u30d5\u30a3\u30eb\u30bf\u30fc\u3067\u5f0f\u3092\u6e80\u305f\u3059\u304b\u3069\u3046\u304b\u3092\u30c1\u30a7\u30c3\u30af\u3057\u307e\u3059\u3002S\u3068M\u306f\u5148\u982d\u306b\u73fe\u308c\u308b\u306e\u30670\u306b\u306f\u306a\u308a\u307e\u305b\u3093\u3002\n    int number(int... args) {\n        return IntStream.of(args).reduce(0, (a, b) -> 10 * a + b);\n    }\n\n    boolean check(int s, int e, int n, int d, int m, int o, int r, int y) {\n        if (s == 0 || m == 0) return false;\n        int send = number(s, e, n, d);\n        int more = number(m, o, r, e);\n        int money = number(m, o, n, e, y);\n        if (send + more != money) return false;\n        System.out.printf(\"%s + %s = %s%n\", send, more, money);\n        return true;\n    }\n\n    @Test\n    public void testSendMoreMoney() {\n        permutations(8, Arrays.asList(0, 1, 2, 3, 4, 5, 6, 7, 8, 9))\n            .filter(l -> check(\n                l.get(0), l.get(1), l.get(2), l.get(3),\n                l.get(4), l.get(5), l.get(6), l.get(7)))\n            .forEach(System.out::println);\n    }\n\n\u7d50\u679c\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002\n9567 + 1085 = 10652\n[9, 5, 6, 7, 1, 0, 8, 2]\n\n\u79c1\u306e\u74b0\u5883\u3067\u306fpermutations(8, Arrays.asList(0, 1, 2, 3, 4, 5, 6, 7, 8, 9))\u306e\u5f8c\u306b.parallel()\u3092\u3064\u3051\u308b\u3068\u5c11\u3057\u3060\u3051\u901f\u304f\u306a\u308a\u307e\u3057\u305f\u3002\n\u30ea\u30b9\u30c8\u306e\u30b9\u30c8\u30ea\u30fc\u30e0\u3067\u306f\u306a\u304f\u30ea\u30b9\u30c8\u306e\u30ea\u30b9\u30c8\u3092\u8fd4\u3059\u5834\u5408\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002\n    public static <E> List<List<E>> permutationsList(int n, List<E> list) {\n        if (n <= 0) return Arrays.asList(Arrays.asList());\n        List<List<E>> result = new ArrayList<>();\n        for (E head : list)\n            for (List<E> tail : permutationsList(n - 1, remove(head, list)))\n                result.add(cons(head, tail));\n        return result;\n    }\n\n\u3053\u3063\u3061\u306e\u65b9\u304c\u5206\u304b\u308a\u3084\u3059\u3044\u3088\u3046\u306b\u601d\u3048\u308b\u306e\u306f\u53e4\u3044\u4eba\u9593\u3060\u304b\u3089\u306a\u306e\u3067\u3057\u3087\u3046\u304b\uff1f\n\u4e0e\u3048\u3089\u308c\u305f\u30ea\u30b9\u30c8\u304b\u3089n\u500b\u306e\u8981\u7d20\u3092\u53d6\u308a\u51fa\u3059\u9806\u5217\u3092\u30b9\u30c8\u30ea\u30fc\u30e0\u3068\u3057\u3066\u751f\u6210\u3057\u307e\u3059\u3002\n\n```java\n    static <T> List<T> cons(T head, List<T> tail) {\n        List<T> list = new ArrayList<>();\n        list.add(head);\n        list.addAll(tail);\n        return list;\n    }\n\n    static <T> List<T> remove(T e, List<T> list) {\n        List<T> newList = new ArrayList<>(list);\n        newList.remove(e);\n        return newList;\n    }\n\n    public static <E> Stream<List<E>> permutations(int n, List<E> list) {\n        if (n <= 0) return Stream.of(new ArrayList<>());\n        return list.stream()\n            .flatMap(h -> permutations(n - 1, remove(h, list))\n                .map(t -> cons(h, t)));\n    }\n```\n\n\u30ea\u30b9\u30c8\u306e\u4e2d\u304b\u3089\u8981\u7d20\u3092\u3072\u3068\u3064\u53d6\u308a\u51fa\u3057\u307e\u3059\uff08`h`\uff09\u3002\u6b8b\u308a\u306e\u8981\u7d20\uff08`remove(h, list)`\uff09\u306e\u9806\u5217\u3092\u3059\u3079\u3066\u6c42\u3081\u3066\u3001\u5f97\u3089\u308c\u305f\u305d\u308c\u305e\u308c\u306e\u30ea\u30b9\u30c8\u306e\u5148\u982d\u306b\u53d6\u308a\u51fa\u3057\u305f\u8981\u7d20\uff08`h`\uff09\u3092\u8ffd\u52a0\uff08`cons(h, t)`\uff09\u3057\u307e\u3059\u3002\u3053\u308c\u3067\u53d6\u308a\u51fa\u3057\u305f\u8981\u7d20\u3092\u5148\u982d\u3068\u3059\u308b\u3059\u3079\u3066\u306e\u9806\u5217\u304c\u6c42\u307e\u308a\u307e\u3059\u3002\u3059\u3079\u3066\u306e\u8981\u7d20\u306b\u3064\u3044\u3066\u3053\u308c\u3092\u884c\u3046\u3068\u3059\u3079\u3066\u306e\u9806\u5217\u304c\u5f97\u3089\u308c\u307e\u3059\u3002\n\n`cons()`\u306fLisp\u7cfb\u306e\u8a00\u8a9e\u3084\u95a2\u6570\u578b\u8a00\u8a9e\u3092\u3084\u3063\u3066\u3044\u308b\u4eba\u304b\u3089\u898b\u308b\u3068\u7b11\u3044\u3082\u306e\u3067\u3059\u306d\u3002\n\n\u30ea\u30b9\u30c8[1, 2, 3]\u306e\u4e2d\u304b\u30892\u3064\u53d6\u308b\u9806\u5217\u3092\u751f\u6210\u3057\u3066\u307f\u307e\u3059\u3002\n\n```java\n    @Test\n    public void testPermutationsN() {\n        permutations(2, Arrays.asList(1, 2, 3))\n            .forEach(System.out::println);\n    }\n```\n\n\u7d50\u679c\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002\n\n```java\n[1, 2]\n[1, 3]\n[2, 1]\n[2, 3]\n[3, 1]\n[3, 2]\n```\n\n\u3053\u308c\u3092\u4f7f\u3063\u3066\u8986\u9762\u7b97\u300cSEND + MORE = MONEY\u300d\u3092\u89e3\u3044\u3066\u307f\u307e\u3059\u3002\n\u554f\u984c\u306b\u8868\u308c\u308b\u82f1\u5b57\u306fS, E, N, D, M, O, R, Y\u306e8\u7a2e\u985e\u306a\u306e\u3067\u3001\u30ea\u30b9\u30c8[0, 1, ... , 9]\u304b\u30898\u500b\u3092\u53d6\u308a\u51fa\u3059\u9806\u5217\u3092\u5f97\u3066\u3001\u30d5\u30a3\u30eb\u30bf\u30fc\u3067\u5f0f\u3092\u6e80\u305f\u3059\u304b\u3069\u3046\u304b\u3092\u30c1\u30a7\u30c3\u30af\u3057\u307e\u3059\u3002S\u3068M\u306f\u5148\u982d\u306b\u73fe\u308c\u308b\u306e\u30670\u306b\u306f\u306a\u308a\u307e\u305b\u3093\u3002\n\n```java\n    int number(int... args) {\n        return IntStream.of(args).reduce(0, (a, b) -> 10 * a + b);\n    }\n\n    boolean check(int s, int e, int n, int d, int m, int o, int r, int y) {\n        if (s == 0 || m == 0) return false;\n        int send = number(s, e, n, d);\n        int more = number(m, o, r, e);\n        int money = number(m, o, n, e, y);\n        if (send + more != money) return false;\n        System.out.printf(\"%s + %s = %s%n\", send, more, money);\n        return true;\n    }\n\n    @Test\n    public void testSendMoreMoney() {\n        permutations(8, Arrays.asList(0, 1, 2, 3, 4, 5, 6, 7, 8, 9))\n            .filter(l -> check(\n            \tl.get(0), l.get(1), l.get(2), l.get(3),\n                l.get(4), l.get(5), l.get(6), l.get(7)))\n            .forEach(System.out::println);\n    }\n```\n\n\u7d50\u679c\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002\n\n```java\n9567 + 1085 = 10652\n[9, 5, 6, 7, 1, 0, 8, 2]\n```\n\n\u79c1\u306e\u74b0\u5883\u3067\u306f`permutations(8, Arrays.asList(0, 1, 2, 3, 4, 5, 6, 7, 8, 9))`\u306e\u5f8c\u306b`.parallel()`\u3092\u3064\u3051\u308b\u3068\u5c11\u3057\u3060\u3051\u901f\u304f\u306a\u308a\u307e\u3057\u305f\u3002\n\n\u30ea\u30b9\u30c8\u306e\u30b9\u30c8\u30ea\u30fc\u30e0\u3067\u306f\u306a\u304f\u30ea\u30b9\u30c8\u306e\u30ea\u30b9\u30c8\u3092\u8fd4\u3059\u5834\u5408\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002\n\n```java\n    public static <E> List<List<E>> permutationsList(int n, List<E> list) {\n        if (n <= 0) return Arrays.asList(Arrays.asList());\n        List<List<E>> result = new ArrayList<>();\n        for (E head : list)\n            for (List<E> tail : permutationsList(n - 1, remove(head, list)))\n                result.add(cons(head, tail));\n        return result;\n    }\n```\n\n\u3053\u3063\u3061\u306e\u65b9\u304c\u5206\u304b\u308a\u3084\u3059\u3044\u3088\u3046\u306b\u601d\u3048\u308b\u306e\u306f\u53e4\u3044\u4eba\u9593\u3060\u304b\u3089\u306a\u306e\u3067\u3057\u3087\u3046\u304b\uff1f\n"}