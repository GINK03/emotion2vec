{"context": "ASP.NET Web API \u30d1\u30a4\u30d7\u30e9\u30a4\u30f3\u3092\u62e1\u5f35\u3059\u308b\u30b5\u30f3\u30d7\u30eb\u3067\u3059\u3002\n\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u306e\u307f\u3067\u3059\u304c\u3001\u5185\u5bb9\u3092\u5fd8\u308c\u306a\u3044\u305f\u3081\u306e\u5099\u5fd8\u9332\u3068\u3057\u3066\u3001\u3001\u3001\n\u25cf\u53c2\u7167\nASP.NET Web API 2\nASP.NET Web API HTTP \u30e1\u30c3\u30bb\u30fc\u30b8\u30e9\u30a4\u30d5\u30b5\u30a4\u30af\u30eb\u30dd\u30b9\u30bf\u30fc\n\n\u30b5\u30f3\u30d7\u30eb\u30bd\u30fc\u30b9\n\nProgram.cs\n    class Program\n    {\n        private static string baseAddress = \"http://localhost:9000/\";\n\n        static void Main(string[] args)\n        {\n            using (WebApp.Start<Startup>(url: baseAddress))\n            {\n                HttpClient client = new HttpClient();\n\n                var response = client.GetAsync(baseAddress + \"MySelfHost/Values\").Result;\n\n                Console.WriteLine(response);\n                Console.WriteLine(response.Content.ReadAsStringAsync().Result);\n            }\n\n            Console.ReadLine();\n        }\n    }\n\n\nValuesController.cs\n    public class ValuesController : ApiController\n    {\n        public IEnumerable<string> Get()\n        {\n            return new string[] { \"Value1\", \"Value2\" };\n        }\n\n        public string Get(int id)\n        {\n            throw new Exception(\"test\");\n            //return \"Value\";\n        }\n\n        public void Post([FromBody]string value)\n        {\n        }\n\n        public void Post(int id, [FromBody]string value)\n        {\n        }\n\n        public void Put(int id, [FromBody]string value)\n        {\n        }\n\n        public void Delete(int id)\n        {\n        }\n    }\n\n\nStartup.cs\n    public class Startup\n    {\n        public void Configuration(IAppBuilder appBuilder)\n        {\n            HttpConfiguration config = new HttpConfiguration();\n\n            var previousSelector =\n            config.Services.GetService(typeof(IHttpControllerSelector)) as IHttpControllerSelector;\n            config.Services.Replace(typeof(IHttpControllerSelector),\n                                    new MyWebApiControllerSelector(config) { PreviousSelector = previousSelector });\n\n            config.Services.Replace(typeof(IHttpActionSelector), new MyWebApiActionSelector());\n\n            config.Services.Replace(typeof(IExceptionHandler), new MyExceptionHandler());\n\n            config.MessageHandlers.Add(new MyMessageHandler());\n\n            config.Routes.MapHttpRoute(\n                        name: \"DefaultApi\",\n                        routeTemplate: \"{namespace}/{controller}\",\n                        handler: null,\n                        defaults: null,\n                        constraints: null\n            );\n\n            appBuilder.UseWebApi(config);\n        }\n    }\n\n\nMyMessageHandler.cs\n    internal class MyMessageHandler : DelegatingHandler\n    {\n        protected override async Task<HttpResponseMessage> SendAsync(HttpRequestMessage request,\n                                                               CancellationToken cancellationToken)\n        {\n            Debug.WriteLine(\"request\");\n            var response = await base.SendAsync(request, cancellationToken);\n            Debug.WriteLine(\"response\");\n            return response;\n        }\n    }\n\n\nMyWebApiControllerSelector.cs\n    internal class MyWebApiControllerSelector : DefaultHttpControllerSelector\n    {\n        private HttpConfiguration _config;\n\n        public IHttpControllerSelector PreviousSelector { get; set; }\n\n        public MyWebApiControllerSelector(HttpConfiguration configuration) : \n            base(configuration)\n        {\n            _config = configuration;\n        }\n\n        public override HttpControllerDescriptor SelectController(HttpRequestMessage request)\n        {\n            IHttpRouteData routeData = request.GetRouteData();\n\n            string namespaceName = GetRouteVariable<string>(routeData, \"namespace\");\n            string controllerName = GetRouteVariable<string>(routeData, \"controller\");\n\n            string className = namespaceName + \".\" + controllerName + \"Controller\";\n\n            IAssembliesResolver assembliesResolver =\n                _config.Services.GetAssembliesResolver();\n            IHttpControllerTypeResolver controllersResolver =\n                _config.Services.GetHttpControllerTypeResolver();\n\n            ICollection<Type> controllerTypes =\n                controllersResolver.GetControllerTypes(assembliesResolver);\n\n            //var hoge = AppDomain.CurrentDomain.GetAssemblies();\n\n            Type typ = null;\n            foreach (var t in controllerTypes)\n            {\n                if (t.FullName == className)\n                {\n                    typ = t;\n                    break;\n                }\n            }\n\n            if (typ == null)\n            {\n                throw new Exception(\"\u30b3\u30f3\u30c8\u30ed\u30fc\u30e9\u304c\u3042\u308a\u307e\u305b\u3093\u3002\");\n            }\n\n            HttpControllerDescriptor ret = new HttpControllerDescriptor();\n            ret.Configuration = _config;\n            ret.ControllerName = controllerName + \"Controller\";\n            ret.ControllerType = typ;\n\n            return ret;\n        }\n\n        private static T GetRouteVariable<T>(IHttpRouteData routeData, string name)\n        {\n            //\u623b\u308a\u5024\n            object result = null;\n\n            //\u53d6\u5f97\u5bfe\u8c61\u306e\u30c7\u30fc\u30bf\u304crouteData\u306b\u542b\u307e\u308c\u3066\u3044\u305f\u3089\u3001\u8fd4\u3059\u3002\n            //\u542b\u307e\u308c\u3066\u3044\u306a\u3051\u308c\u3070\u3001<T>\u306edefault\u3092\u8fd4\u3059\n            if (routeData.Values.TryGetValue(name, out result))\n            {\n                return (T)result;\n            }\n            return default(T);\n        }\n    }\n\n\nMyWebApiActionSelector.cs\n    internal class MyWebApiActionSelector : ApiControllerActionSelector\n    {\n        public override HttpActionDescriptor SelectAction\n            (HttpControllerContext controllerContext)\n        {\n            HttpActionDescriptor actionDescriptor =\n                base.SelectAction(controllerContext);\n\n\n\n            return actionDescriptor;\n        }\n    }\n\n\nMyExceptionHandler.cs\n    internal class MyExceptionHandler : ExceptionHandler\n    {\n        public override void Handle(ExceptionHandlerContext context)\n        {\n            context.Result = new MyErrorResult(context.Request, context.Exception);\n\n            base.Handle(context);\n        }\n    }\n\n\nMyErrorResult.cs\n    internal class MyErrorResult : IHttpActionResult\n    {\n        private Exception exception;\n        private HttpRequestMessage request;\n\n        public MyErrorResult(HttpRequestMessage request, Exception exception)\n        {\n            this.request = request;\n            this.exception = exception;\n        }\n\n        public Task<HttpResponseMessage> ExecuteAsync(CancellationToken cancellationToken)\n        {\n            JObject json = new JObject();\n            json.Add(\"status\", (int)HttpStatusCode.InternalServerError);\n            json.Add(\"message\", exception.Message);\n            json.Add(\"stackTrace\", exception.StackTrace);\n\n            HttpResponseMessage response =\n                request.CreateErrorResponse(\n                    HttpStatusCode.InternalServerError, \n                    json.ToString(), exception\n                );\n\n            return Task.FromResult(response);\n        }\n    }\n\n\nASP.NET Web API \u30d1\u30a4\u30d7\u30e9\u30a4\u30f3\u3092\u62e1\u5f35\u3059\u308b\u30b5\u30f3\u30d7\u30eb\u3067\u3059\u3002\n\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u306e\u307f\u3067\u3059\u304c\u3001\u5185\u5bb9\u3092\u5fd8\u308c\u306a\u3044\u305f\u3081\u306e\u5099\u5fd8\u9332\u3068\u3057\u3066\u3001\u3001\u3001\n\n\u25cf\u53c2\u7167\n[ASP.NET Web API 2](https://msdn.microsoft.com/ja-jp/library/Dn448365%28v=VS.118%29.aspx?f=255&MSPPError=-2147217396)\n[ASP.NET Web API HTTP \u30e1\u30c3\u30bb\u30fc\u30b8\u30e9\u30a4\u30d5\u30b5\u30a4\u30af\u30eb\u30dd\u30b9\u30bf\u30fc](https://blogs.msdn.microsoft.com/chack/2013/02/17/asp-net-web-api-http/)\n\n# \u30b5\u30f3\u30d7\u30eb\u30bd\u30fc\u30b9\n## Program.cs\n```csharp\n    class Program\n    {\n        private static string baseAddress = \"http://localhost:9000/\";\n\n        static void Main(string[] args)\n        {\n            using (WebApp.Start<Startup>(url: baseAddress))\n            {\n                HttpClient client = new HttpClient();\n\n                var response = client.GetAsync(baseAddress + \"MySelfHost/Values\").Result;\n\n                Console.WriteLine(response);\n                Console.WriteLine(response.Content.ReadAsStringAsync().Result);\n            }\n\n            Console.ReadLine();\n        }\n    }\n```\n\n## ValuesController.cs\n```csharp\n    public class ValuesController : ApiController\n    {\n        public IEnumerable<string> Get()\n        {\n            return new string[] { \"Value1\", \"Value2\" };\n        }\n\n        public string Get(int id)\n        {\n            throw new Exception(\"test\");\n            //return \"Value\";\n        }\n\n        public void Post([FromBody]string value)\n        {\n        }\n\n        public void Post(int id, [FromBody]string value)\n        {\n        }\n\n        public void Put(int id, [FromBody]string value)\n        {\n        }\n\n        public void Delete(int id)\n        {\n        }\n    }\n```\n\n## Startup.cs\n```csharp\n    public class Startup\n    {\n        public void Configuration(IAppBuilder appBuilder)\n        {\n            HttpConfiguration config = new HttpConfiguration();\n\n            var previousSelector =\n            config.Services.GetService(typeof(IHttpControllerSelector)) as IHttpControllerSelector;\n            config.Services.Replace(typeof(IHttpControllerSelector),\n                                    new MyWebApiControllerSelector(config) { PreviousSelector = previousSelector });\n\n            config.Services.Replace(typeof(IHttpActionSelector), new MyWebApiActionSelector());\n\n            config.Services.Replace(typeof(IExceptionHandler), new MyExceptionHandler());\n\n            config.MessageHandlers.Add(new MyMessageHandler());\n\n            config.Routes.MapHttpRoute(\n                        name: \"DefaultApi\",\n                        routeTemplate: \"{namespace}/{controller}\",\n                        handler: null,\n                        defaults: null,\n                        constraints: null\n            );\n\n            appBuilder.UseWebApi(config);\n        }\n    }\n```\n\n## MyMessageHandler.cs\n```csharp\n    internal class MyMessageHandler : DelegatingHandler\n    {\n        protected override async Task<HttpResponseMessage> SendAsync(HttpRequestMessage request,\n                                                               CancellationToken cancellationToken)\n        {\n            Debug.WriteLine(\"request\");\n            var response = await base.SendAsync(request, cancellationToken);\n            Debug.WriteLine(\"response\");\n            return response;\n        }\n    }\n```\n\n## MyWebApiControllerSelector.cs\n```csharp\n    internal class MyWebApiControllerSelector : DefaultHttpControllerSelector\n    {\n        private HttpConfiguration _config;\n\n        public IHttpControllerSelector PreviousSelector { get; set; }\n\n        public MyWebApiControllerSelector(HttpConfiguration configuration) : \n            base(configuration)\n        {\n            _config = configuration;\n        }\n\n        public override HttpControllerDescriptor SelectController(HttpRequestMessage request)\n        {\n            IHttpRouteData routeData = request.GetRouteData();\n\n            string namespaceName = GetRouteVariable<string>(routeData, \"namespace\");\n            string controllerName = GetRouteVariable<string>(routeData, \"controller\");\n\n            string className = namespaceName + \".\" + controllerName + \"Controller\";\n\n            IAssembliesResolver assembliesResolver =\n                _config.Services.GetAssembliesResolver();\n            IHttpControllerTypeResolver controllersResolver =\n                _config.Services.GetHttpControllerTypeResolver();\n\n            ICollection<Type> controllerTypes =\n                controllersResolver.GetControllerTypes(assembliesResolver);\n\n            //var hoge = AppDomain.CurrentDomain.GetAssemblies();\n\n            Type typ = null;\n            foreach (var t in controllerTypes)\n            {\n                if (t.FullName == className)\n                {\n                    typ = t;\n                    break;\n                }\n            }\n\n            if (typ == null)\n            {\n                throw new Exception(\"\u30b3\u30f3\u30c8\u30ed\u30fc\u30e9\u304c\u3042\u308a\u307e\u305b\u3093\u3002\");\n            }\n\n            HttpControllerDescriptor ret = new HttpControllerDescriptor();\n            ret.Configuration = _config;\n            ret.ControllerName = controllerName + \"Controller\";\n            ret.ControllerType = typ;\n\n            return ret;\n        }\n\n        private static T GetRouteVariable<T>(IHttpRouteData routeData, string name)\n        {\n            //\u623b\u308a\u5024\n            object result = null;\n\n            //\u53d6\u5f97\u5bfe\u8c61\u306e\u30c7\u30fc\u30bf\u304crouteData\u306b\u542b\u307e\u308c\u3066\u3044\u305f\u3089\u3001\u8fd4\u3059\u3002\n            //\u542b\u307e\u308c\u3066\u3044\u306a\u3051\u308c\u3070\u3001<T>\u306edefault\u3092\u8fd4\u3059\n            if (routeData.Values.TryGetValue(name, out result))\n            {\n                return (T)result;\n            }\n            return default(T);\n        }\n    }\n```\n\n## MyWebApiActionSelector.cs\n```csharp\n    internal class MyWebApiActionSelector : ApiControllerActionSelector\n    {\n        public override HttpActionDescriptor SelectAction\n            (HttpControllerContext controllerContext)\n        {\n            HttpActionDescriptor actionDescriptor =\n                base.SelectAction(controllerContext);\n\n            \n\n            return actionDescriptor;\n        }\n    }\n```\n\n## MyExceptionHandler.cs\n```csharp\n    internal class MyExceptionHandler : ExceptionHandler\n    {\n        public override void Handle(ExceptionHandlerContext context)\n        {\n            context.Result = new MyErrorResult(context.Request, context.Exception);\n\n            base.Handle(context);\n        }\n    }\n```\n\n## MyErrorResult.cs\n```csharp\n    internal class MyErrorResult : IHttpActionResult\n    {\n        private Exception exception;\n        private HttpRequestMessage request;\n\n        public MyErrorResult(HttpRequestMessage request, Exception exception)\n        {\n            this.request = request;\n            this.exception = exception;\n        }\n\n        public Task<HttpResponseMessage> ExecuteAsync(CancellationToken cancellationToken)\n        {\n            JObject json = new JObject();\n            json.Add(\"status\", (int)HttpStatusCode.InternalServerError);\n            json.Add(\"message\", exception.Message);\n            json.Add(\"stackTrace\", exception.StackTrace);\n\n            HttpResponseMessage response =\n                request.CreateErrorResponse(\n                    HttpStatusCode.InternalServerError, \n                    json.ToString(), exception\n                );\n\n            return Task.FromResult(response);\n        }\n    }\n```\n", "tags": ["C#", "WebAPI"]}