{"context": "\u30102016/08/25\u8ffd\u8a18\u3011\niOS\u5074Unity5.4.0f3 \u306b\u3088\u308b\u30b7\u30fc\u30f3\u30a2\u30bb\u30c3\u30c8\u30d0\u30f3\u30c9\u30eb\u306e\u30ed\u30fc\u30c9\u51e6\u7406(StreamingAssets\u30d5\u30a9\u30eb\u30c0\u3092\u4f7f\u7528)\nXcode\u3067\u5b9f\u884c\u3059\u308b\u3068\u304d\u306e\u6ce8\u610f\u70b9\u3068\u3057\u3066\u3001\niOS\u306eBuildSettings ->OtherSettings->Strip EngineCode\u306e\u30c1\u30a7\u30c3\u30af\u3092\u5916\u3059\u3002\n\u3053\u3046\u3057\u306a\u3044\u3068AnimatorController\u304c\u30a8\u30e9\u30fc\u3092\u8d77\u3053\u3057\u3066\u518d\u751f\u3055\u308c\u306a\u3044\u3002\n\u4e0b\u8a18URL\u306bstrippinglevel\u3068AnimatorController\u306b\u95a2\u3057\u3066\u305d\u308c\u3063\u307d\u3044\u3053\u3068\u304c\u66f8\u3044\u3066\u3042\u308b\nhttp://forum.unity3d.com/threads/could-not-produce-class-with-id-91-ios.267548/\nhttp://docs.unity3d.com/Manual/webgl-building.html\nUnity5.4.0f3 \u306b\u3088\u308b\u30b7\u30fc\u30f3\u30a2\u30bb\u30c3\u30c8\u30d0\u30f3\u30c9\u30eb\u306e\u30ed\u30fc\u30c9\u51e6\u7406\u306e\u5099\u5fd8\u9332\n    public List<Texture2D> TextureLists = new List<Texture2D> ();\n    public List<Material> MaterialLists = new List<Material> ();\n    public List<GameObject> GameObjectLists = new List<GameObject> ();\n    List<string> listMaster = new List<string> ();\n\n    public void TestLoc1_BundleLoadStreamingAssets ()\n    {\n\n        #if UNITY_IPHONE\n        AssetBundle manifestBundle = AssetBundle.LoadFromFile (Application.dataPath + \"/Raw/iOS\");\n        #elif UNITY_EDITOR\n        AssetBundle manifestBundle = AssetBundle.LoadFromFile (Application.streamingAssetsPath + \"/iOS\");\n        #endif\n        AssetBundleManifest manifest = manifestBundle.LoadAsset (\"AssetBundleManifest\") as AssetBundleManifest;\n        List<string> ListA = new List<string> ();\n\n        // \u30b7\u30fc\u30f3\u306b\u5fc5\u8981\u306a\u3082\u306e\n        ListA.Add (\u30d5\u30a9\u30eb\u30c0\u30a2\u30bb\u30c3\u30c8\u30d0\u30f3\u30c9\u30eb\u540d\uff11);\n        ListA.Add (\u30d5\u30a9\u30eb\u30c0\u30a2\u30bb\u30c3\u30c8\u30d0\u30f3\u30c9\u30eb\u540d\uff12);\n        ListA.Add (\u30d5\u30a9\u30eb\u30c0\u30a2\u30bb\u30c3\u30c8\u30d0\u30f3\u30c9\u30eb\u540d\uff13);\n        ListA.Add (\u30d5\u30a9\u30eb\u30c0\u30a2\u30bb\u30c3\u30c8\u30d0\u30f3\u30c9\u30eb\u540d\uff14);\n        ListA.Add (\u30d5\u30a9\u30eb\u30c0\u30a2\u30bb\u30c3\u30c8\u30d0\u30f3\u30c9\u30eb\u540d\uff15);\n        ListA.Add (\u30d5\u30a9\u30eb\u30c0\u30a2\u30bb\u30c3\u30c8\u30d0\u30f3\u30c9\u30eb\u540d\uff16);\n\n        // \u30b7\u30fc\u30f3        \n        ListA.Add (\u30b7\u30fc\u30f3\u306e\u30a2\u30bb\u30c3\u30c8\u30d0\u30f3\u30c9\u30eb\u540d);\n\n        listMaster.AddRange (ListA);\n\n        bool noDependenceFlg = false;\n\n        while ( noDependenceFlg == false ) {\n            List<string> ListB = new List<string> ();\n            // \uff11\u6bb5\u968e\u30cd\u30b9\u30c8\u3055\u308c\u305f\u4f9d\u5b58\u95a2\u4fc2\u30ea\u30b9\u30c8\u3092\u4f5c\u6210\n            foreach (string bundlename in ListA) {\n                // \u76f4\u63a5\u306e\u4f9d\u5b58\u95a2\u4fc2\u30ea\u30b9\u30c8\u3092\u53d6\u5f97\n                string[] dependenceArray = manifest.GetDirectDependencies (bundlename);\n\n                ListB.AddRange (dependenceArray);\n            }\n\n            // \u91cd\u8907\u6392\u9664\n            ListB = ListB.Distinct ().ToList ();\n\n            ListA.Sort ();\n            ListB.Sort ();\n\n            if ( (ListB.Count == 0) || (ListA.SequenceEqual (ListB) == true) ) {\n                noDependenceFlg = true;\n            } else {\n                // \uff11\u6bb5\u968e\u30cd\u30b9\u30c8\u3055\u308c\u305f\u4f9d\u5b58\u95a2\u4fc2\u30ea\u30b9\u30c8\u3092\u4f5c\u6210\n                foreach (string dependenceBundle in ListB) {\n                    // \u3059\u3067\u306b\u5b58\u5728\u3059\u308c\u3070\u524a\u9664\u3057\u3066\u6700\u5f8c\u5c3e\u306b\u8ffd\u52a0\n                    if ( listMaster.Contains (dependenceBundle) == true ) {\n                        listMaster.Remove (dependenceBundle);\n                    }\n                    listMaster.Add (dependenceBundle);\n                }\n                ListA.Clear ();\n                ListA.AddRange (ListB);\n            }\n        }\n\n        listMaster.Reverse ();\n\n        Debug.Log (\"Count=\" + listMaster.Count.ToString ());\n\n        foreach (string bundleName in listMaster) {\n            string bundleString = bundleName;\n            Debug.Log (\"bundleName=\" + bundleName);\n\n            #if UNITY_IPHONE\n            AssetBundle bundleData = AssetBundle.LoadFromFile (Application.dataPath + \"/Raw/\" + bundleName);\n            #elif UNITY_EDITOR\n            AssetBundle bundleData = AssetBundle.LoadFromFile (Application.streamingAssetsPath + \"/\" + bundleName);\n            #endif\n\n            if ( bundleData.isStreamedSceneAssetBundle == true ) {\n                string[] sceneString = bundleData.GetAllScenePaths ();\n\n                Debug.Log (\"scene=\" + sceneString [0]);\n                string scenePath = Path.GetFileNameWithoutExtension (sceneString [0]);\n                SceneManager.LoadSceneAsync (scenePath, LoadSceneMode.Additive);\n                return;\n            }\n            UnityEngine.Object[] objects = bundleData.LoadAllAssets ();\n\n            foreach (UnityEngine.Object obj in objects) {\n                Debug.Log (\"Name=\" + obj.name + \" Type=\" + obj.GetType ().ToString ());\n\n                if ( obj.GetType () == typeof(GameObject) ) {\n                    GameObjectLists.Add (obj as UnityEngine.GameObject);\n                    Instantiate (obj);\n                } else if ( obj.GetType () == typeof(Texture2D) ) {\n                    TextureDic.Add (obj as Texture2D);\n                } else if ( obj.GetType () == typeof(Material) ) {\n                    Debug.Log (\"<color=red>Main Material= \" + obj.name + \"</color>\");\n                    MaterialDic.Add (obj as Material);\n                }\n            }\n            //            bundleData.Unload (false);\n        }\n\n    }\n\n\nAndroid\u5074Unity5.4.0f3 \u306b\u3088\u308b\u30b7\u30fc\u30f3\u30a2\u30bb\u30c3\u30c8\u30d0\u30f3\u30c9\u30eb\u306e\u30ed\u30fc\u30c9\u51e6\u7406(StreamingAssets\u30d5\u30a9\u30eb\u30c0\u3092\u4f7f\u7528)\nAndroid\u5074Unity5.4.0f3 \u306b\u3088\u308b\u30b7\u30fc\u30f3\u30a2\u30bb\u30c3\u30c8\u30d0\u30f3\u30c9\u30eb\u306e\u30ed\u30fc\u30c9\u51e6\u7406\u306e\u5099\u5fd8\u9332\n    public List<Texture2D> TextureLists = new List<Texture2D> ();\n    public List<Material> MaterialLists = new List<Material> ();\n    public List<GameObject> GameObjectLists = new List<GameObject> ();\n    List<string> listMaster = new List<string> ();\n\n    public void TestLoc1_Android_BundleLoadStreamingAssets()\n    {\n        StartCoroutine(loadBundle_StreamingAssets());\n    }\n\n    IEnumerator loadBundle_StreamingAssets()\n    {\n        string loadPath = \"jar:file://\" + Application.dataPath + \"!/assets/AssetBundle/\";\n\n        string manifestPath = loadPath + \"Android\";\n\n        Debug.Log(\"manifestPath=\" + manifestPath);\n\n        var www = WWW.LoadFromCacheOrDownload(manifestPath,1);\n        yield return www;\n        AssetBundle manifestBundle = www.assetBundle;\n\n        AssetBundleManifest manifest = manifestBundle.LoadAsset(\"AssetBundleManifest\") as AssetBundleManifest;\n\n        List<string> ListA = new List<string>();\n\n\n        ListA.Add(\u30a2\u30bb\u30c3\u30c8\u30d0\u30f3\u30c9\u30eb\u540d\uff11);\n        ListA.Add(\u30a2\u30bb\u30c3\u30c8\u30d0\u30f3\u30c9\u30eb\u540d\uff12);\n        ListA.Add(\u30a2\u30bb\u30c3\u30c8\u30d0\u30f3\u30c9\u30eb\u540d\uff13);\n        ListA.Add(\u30a2\u30bb\u30c3\u30c8\u30d0\u30f3\u30c9\u30eb\u540d\uff14);\n        ListA.Add(\u30a2\u30bb\u30c3\u30c8\u30d0\u30f3\u30c9\u30eb\u540d\uff15);\n        ListA.Add(\u30a2\u30bb\u30c3\u30c8\u30d0\u30f3\u30c9\u30eb\u540d\uff16);\n\n\n        ListA.Add(\u30b7\u30fc\u30f3\u30a2\u30bb\u30c3\u30c8\u30d0\u30f3\u30c9\u30eb\u540d);\n\n        listMaster.AddRange(ListA);\n\n        bool noDependenceFlg = false;\n\n        while (noDependenceFlg == false)\n        {\n            List<string> ListB = new List<string>();\n            // \uff11\u6bb5\u968e\u30cd\u30b9\u30c8\u3055\u308c\u305f\u4f9d\u5b58\u95a2\u4fc2\u30ea\u30b9\u30c8\u3092\u4f5c\u6210\n            foreach (string bundlename in ListA)\n            {\n                // \u76f4\u63a5\u306e\u4f9d\u5b58\u95a2\u4fc2\u30ea\u30b9\u30c8\u3092\u53d6\u5f97\n                string[] dependenceArray = manifest.GetDirectDependencies(bundlename);\n\n                ListB.AddRange(dependenceArray);\n            }\n\n            // \u91cd\u8907\u6392\u9664\n            ListB = ListB.Distinct().ToList();\n\n            ListA.Sort();\n            ListB.Sort();\n\n            if ((ListB.Count == 0) || (ListA.SequenceEqual(ListB) == true))\n            {\n                noDependenceFlg = true;\n            }\n            else {\n                // \uff11\u6bb5\u968e\u30cd\u30b9\u30c8\u3055\u308c\u305f\u4f9d\u5b58\u95a2\u4fc2\u30ea\u30b9\u30c8\u3092\u4f5c\u6210\n                foreach (string dependenceBundle in ListB)\n                {\n                    // \u3059\u3067\u306b\u5b58\u5728\u3059\u308c\u3070\u524a\u9664\u3057\u3066\u6700\u5f8c\u5c3e\u306b\u8ffd\u52a0\n                    if (listMaster.Contains(dependenceBundle) == true)\n                    {\n                        listMaster.Remove(dependenceBundle);\n                    }\n                    listMaster.Add(dependenceBundle);\n                }\n                ListA.Clear();\n                ListA.AddRange(ListB);\n            }\n        }\n\n        listMaster.Reverse();\n\n        Debug.Log(\"Count=\" + listMaster.Count.ToString());\n\n\n        foreach (string bundleName in listMaster)\n        {\n            string bundleString = bundleName;\n            Debug.Log(\"bundleName=\" + \"jar:file://\" + Application.dataPath + \"!/assets/AssetBundle/\" + bundleName);\n\n            var wwwfile = WWW.LoadFromCacheOrDownload(\"jar:file://\" + Application.dataPath + \"!/assets/AssetBundle/\" + bundleName, 1);\n            yield return wwwfile;\n            AssetBundle bundleData = wwwfile.assetBundle;\n\n            if ( bundleData.isStreamedSceneAssetBundle == true ) {\n                string[] sceneString = bundleData.GetAllScenePaths ();\n\n                string scenePath = Path.GetFileNameWithoutExtension (sceneString [0]);\n                SceneManager.LoadSceneAsync (scenePath, LoadSceneMode.Additive);\n                return;\n            }\n            UnityEngine.Object[] objects = bundleData.LoadAllAssets();\n\n            foreach (UnityEngine.Object obj in objects)\n            {\n                Debug.Log(\"Name=\" + obj.name + \" Type=\" + obj.GetType().ToString());\n\n                if (obj.GetType() == typeof(GameObject))\n                {\n                    GameObjectLists.Add(obj as UnityEngine.GameObject);\n                    Instantiate(obj);\n                }\n                else if (obj.GetType() == typeof(Texture2D))\n                {\n                    TextureDic.Add(obj as Texture2D);\n                }\n                else if (obj.GetType() == typeof(Material))\n                {\n                    Debug.Log(\"<color=red>Main Material= \" + obj.name + \"</color>\");\n                    MaterialDic.Add(obj as Material);\n                }\n            }\n            //            bundleData.Unload (false);\n        }\n\n    }\n\n\n\u30102016/03/04\u8ffd\u8a18\u3011\nCreateFromMemory\u306e\u30d0\u30b0\u306f\u30d0\u30fc\u30b8\u30e7\u30f35.2.4\u3067\u4fee\u6b63\u3055\u308c\u305f\u6a21\u69d8\nhttps://unity3d.com/jp/unity/whats-new/unity-5.2.4\n\u25a0AssetBundles: CreateFromMemory \u3067\u975e\u5727\u7e2e\u306e\u30a2\u30bb\u30c3\u30c8\u30d0\u30f3\u30c9\u30eb\u3092\u30ed\u30fc\u30c9\u3057\u3088\u3046\u3068\u3059\u308b\u3068\u30af\u30e9\u30c3\u30b7\u30e5\u3057\u3066\u3057\u307e\u3046\u554f\u984c\u3092\u4fee\u6b63(698667)\n\u30102015/08/05\u8ffd\u8a18\u3011\nCreateFromMemory\u3068\u7121\u5727\u7e2e\u30a2\u30bb\u30c3\u30c8\u30d0\u30f3\u30c9\u30eb(BuildAssetBundleOptions.UncompressedAssetBundle)\u306e\u7d44\u307f\u5408\u308f\u305b\u3001\nCreateFromMemoryImmediate\u3068\u7121\u5727\u7e2e\u30a2\u30bb\u30c3\u30c8\u30d0\u30f3\u30c9\u30eb(BuildAssetBundleOptions.UncompressedAssetBundle)\u306e\u7d44\u307f\u5408\u308f\u305b\u3001\u306b\u306f\n\u73fe\u5728Unity\u5074\u306b\u30d0\u30b0\u304c\u3042\u308b\u306e\u3067\u4f7f\u7528\u3057\u306a\u3044\u3067\u304f\u3060\u3055\u3044\uff08\u516c\u5f0f\u898b\u89e3\u3067\u3059\uff09\u3002\n\u7121\u5727\u7e2e\u306e\u30a2\u30bb\u30c3\u30c8\u30d0\u30f3\u30c9\u30eb\u3092\u4f7f\u7528\u3057\u305f\u3044\u6642\u306f\u3001CreateFromFile\u3000\u3092\u4f7f\u7528\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n\n\u25cfUnity5.3.0f4\u306e\u6642\n\u25a0\u30a2\u30bb\u30c3\u30c8\u30d0\u30f3\u30c9\u30eb\u306e\u30a8\u30af\u30b9\u30dd\u30fc\u30c8\n\u25cf\u25cf\u7121\u5727\u7e2e\u30a2\u30bb\u30c3\u30c8\u30d0\u30f3\u30c9\u30eb\u25cf\u25cf\nBuildPipeline.BuildAssetBundles(\u51fa\u529b\u5148, BuildAssetBundleOptions.UncompressedAssetBundle, \u30d7\u30e9\u30c3\u30c8\u30d5\u30a9\u30fc\u30e0);\n\n\u25cf\u25cfLZMA\u5727\u7e2e\u30a2\u30bb\u30c3\u30c8\u30d0\u30f3\u30c9\u30eb\u25cf\u25cf\nBuildPipeline.BuildAssetBundles(\u51fa\u529b\u5148, BuildAssetBundleOptions.None, \u30d7\u30e9\u30c3\u30c8\u30d5\u30a9\u30fc\u30e0);\n\n\u25cf\u25cfLZ4\u5727\u7e2e\u30a2\u30bb\u30c3\u30c8\u30d0\u30f3\u30c9\u30eb\u25cf\u25cf\nBuildPipeline.BuildAssetBundles(\u51fa\u529b\u5148, BuildAssetBundleOptions.ChunkBasedCompression, \u30d7\u30e9\u30c3\u30c8\u30d5\u30a9\u30fc\u30e0);\n\n\u25a0\u30a2\u30bb\u30c3\u30c8\u30d0\u30f3\u30c9\u30eb\u306e\u30ed\u30fc\u30c9\n\u25a0WWW\u3092\u4f7f\u7528\u3057\u3066StreamingAssets\u304b\u3089\u30a2\u30bb\u30c3\u30c8\u30d0\u30f3\u30c9\u30eb\u30ed\u30fc\u30c9\npublic List<Object> publicObjectList = new List<Object>();\n\nIEnumerator LoadAssetBundle()\n{\n    //****************************\n    // WWW\u3092\u4f7f\u7528\u3057\u3066StreamingAssets\u304b\u3089\u30a2\u30bb\u30c3\u30c8\u30d0\u30f3\u30c9\u30eb\u30ed\u30fc\u30c9\n    WWW baseCommonWww = new WWW(Application.streamingAssetsPath + \u30a2\u30bb\u30c3\u30c8\u30d0\u30f3\u30c9\u30eb\u540d);\n    yield return baseCommonWww;\n    AssetBundle baseCommonBundle = baseCommonWww.assetBundle;\n    //****************************\n    Object[] baseCommonObjects = baseCommonBundle.LoadAllAssets();\n\n    foreach (Object obj in baseCommonObjects)\n    {\n        Debug.Log(\"obj=\" + obj.name);\n        Debug.Log(\"objtype=\" + obj.GetType().ToString());\n\n        publicObjectList.Add(obj);\n    }\n}\n\n\u25a0LoadFromFile\u3092\u4f7f\u7528\u3057\u3066StreamingAssets\u304b\u3089\u30a2\u30bb\u30c3\u30c8\u30d0\u30f3\u30c9\u30eb\u30ed\u30fc\u30c9\npublic List<Object> publicObjectList = new List<Object>();\n\n\u30e1\u30bd\u30c3\u30c9\u540d()\n{\n    //****************************\n    // LoadFromFile LZMA\u5727\u7e2e\n    //AssetBundle baseCommonBundle = AssetBundle.LoadFromFile(Application.streamingAssetsPath + \u30a2\u30bb\u30c3\u30c8\u30d0\u30f3\u30c9\u30eb\u540d);\n    // LoadFromFile \u5727\u7e2e\u306a\u3057\n    //AssetBundle baseCommonBundle = AssetBundle.LoadFromFile(Application.streamingAssetsPath + \u30a2\u30bb\u30c3\u30c8\u30d0\u30f3\u30c9\u30eb\u540d);\n    // LoadFromFile LZ4\u5727\u7e2e\n    //AssetBundle baseCommonBundle = AssetBundle.LoadFromFile(Application.streamingAssetsPath + \u30a2\u30bb\u30c3\u30c8\u30d0\u30f3\u30c9\u30eb\u540d);\n    //****************************\n\n    Object[] baseCommonObjects = baseCommonBundle.LoadAllAssets();\n\n    foreach (Object obj in baseCommonObjects)\n    {\n        Debug.Log(\"obj=\" + obj.name);\n        Debug.Log(\"objtype=\" + obj.GetType().ToString());\n\n        publicObjectList.Add(obj);\n    }\n}\n\n\n\u25a0LoadFromFileAsync\u3092\u4f7f\u7528\u3057\u3066StreamingAssets\u304b\u3089\u30a2\u30bb\u30c3\u30c8\u30d0\u30f3\u30c9\u30eb\u30ed\u30fc\u30c9\npublic List<Object> publicObjectList = new List<Object>();\n\nIEnumerator LoadAssetBundle()\n{\n    //****************************\n    // LoadFromFileAsync LZMA\u5727\u7e2e\n    //AssetBundleCreateRequest baseCommonRequest = AssetBundle.LoadFromFileAsync(Application.streamingAssetsPath + \u30a2\u30bb\u30c3\u30c8\u30d0\u30f3\u30c9\u30eb\u540d);\n    // LoadFromFileAsync \u5727\u7e2e\u306a\u3057\n    //AssetBundleCreateRequest baseCommonRequest = AssetBundle.LoadFromFileAsync(Application.streamingAssetsPath + \u30a2\u30bb\u30c3\u30c8\u30d0\u30f3\u30c9\u30eb\u540d);\n    // LoadFromFileAsync LZ4\u5727\u7e2e\n    //AssetBundleCreateRequest baseCommonRequest = AssetBundle.LoadFromFileAsync(Application.streamingAssetsPath + \u30a2\u30bb\u30c3\u30c8\u30d0\u30f3\u30c9\u30eb\u540d);\n\n    //yield return StartCoroutine(BundleRequestWait(baseCommonRequest));\n    //AssetBundle baseCommonBundle = baseCommonRequest.assetBundle;\n    //****************************\n\n    Object[] baseCommonObjects = baseCommonBundle.LoadAllAssets();\n\n    foreach (Object obj in baseCommonObjects)\n    {\n        Debug.Log(\"obj=\" + obj.name);\n        Debug.Log(\"objtype=\" + obj.GetType().ToString());\n\n        publicObjectList.Add(obj);\n    }\n}\n\nIEnumerator BundleRequestWait(AssetBundleCreateRequest assetBundleCreateRequest)\n{\n\n    while(assetBundleCreateRequest.isDone == false)\n    {\n        Debug.Log(\"wait\");\n        yield return 0;\n    }\n}\n\n\u25a0LoadFromMemory\u3092\u4f7f\u7528\u3057\u3066StreamingAssets\u304b\u3089\u30a2\u30bb\u30c3\u30c8\u30d0\u30f3\u30c9\u30eb\u30ed\u30fc\u30c9\npublic List<Object> publicObjectList = new List<Object>();\n\n\u30e1\u30bd\u30c3\u30c9\u540d()\n{\n    //****************************\n    // LoadFromMemory LZMA\u5727\u7e2e\n    //byte[] bundleData = System.IO.File.ReadAllBytes(Application.streamingAssetsPath + \u30a2\u30bb\u30c3\u30c8\u30d0\u30f3\u30c9\u30eb\u540d); // \u8aad\u307f\u8fbc\u307f\n    // LoadFromMemory \u5727\u7e2e\u306a\u3057\n    //byte[] bundleData = System.IO.File.ReadAllBytes(Application.streamingAssetsPath + \u30a2\u30bb\u30c3\u30c8\u30d0\u30f3\u30c9\u30eb\u540d); // \u8aad\u307f\u8fbc\u307f\n    // LoadFromMemory LZ4\u5727\u7e2e\n    //byte[] bundleData = System.IO.File.ReadAllBytes(Application.streamingAssetsPath + \u30a2\u30bb\u30c3\u30c8\u30d0\u30f3\u30c9\u30eb\u540d); // \u8aad\u307f\u8fbc\u307f\n\n    //AssetBundle baseCommonBundle = AssetBundle.LoadFromMemory(bundleData);\n    //****************************\n\n    Object[] baseCommonObjects = baseCommonBundle.LoadAllAssets();\n\n    foreach (Object obj in baseCommonObjects)\n    {\n        Debug.Log(\"obj=\" + obj.name);\n        Debug.Log(\"objtype=\" + obj.GetType().ToString());\n\n        publicObjectList.Add(obj);\n    }\n}\n\n\n\u25a0LoadFromMemoryAsync\u3092\u4f7f\u7528\u3057\u3066StreamingAssets\u304b\u3089\u30a2\u30bb\u30c3\u30c8\u30d0\u30f3\u30c9\u30eb\u30ed\u30fc\u30c9\npublic List<Object> publicObjectList = new List<Object>();\n\nIEnumerator LoadAssetBundle()\n{\n    //****************************\n    // LoadFromMemoryAsync LZMA\u5727\u7e2e\n    //byte[] bundleData = System.IO.File.ReadAllBytes(Application.streamingAssetsPath + \u30a2\u30bb\u30c3\u30c8\u30d0\u30f3\u30c9\u30eb\u540d); // \u8aad\u307f\u8fbc\u307f\n    // LoadFromMemoryAsync \u5727\u7e2e\u306a\u3057\n    //byte[] bundleData = System.IO.File.ReadAllBytes(Application.streamingAssetsPath + \u30a2\u30bb\u30c3\u30c8\u30d0\u30f3\u30c9\u30eb\u540d); // \u8aad\u307f\u8fbc\u307f\n    // LoadFromMemoryAsync LZ4\u5727\u7e2e\n    byte[] bundleData = System.IO.File.ReadAllBytes(Application.streamingAssetsPath + \u30a2\u30bb\u30c3\u30c8\u30d0\u30f3\u30c9\u30eb\u540d); // \u8aad\u307f\u8fbc\u307f\n    AssetBundleCreateRequest baseCommonRequest = AssetBundle.LoadFromMemoryAsync(bundleData);\n    yield return StartCoroutine(BundleRequestWait(baseCommonRequest));\n    AssetBundle baseCommonBundle = baseCommonRequest.assetBundle;\n    //****************************\n\n    Object[] baseCommonObjects = baseCommonBundle.LoadAllAssets();\n\n    foreach (Object obj in baseCommonObjects)\n    {\n        Debug.Log(\"obj=\" + obj.name);\n        Debug.Log(\"objtype=\" + obj.GetType().ToString());\n\n        publicObjectList.Add(obj);\n    }\n}\n\nIEnumerator BundleRequestWait(AssetBundleCreateRequest assetBundleCreateRequest)\n{\n\n    while(assetBundleCreateRequest.isDone == false)\n    {\n        Debug.Log(\"wait\");\n        yield return 0;\n    }\n}\n\n\n\n\n\u25cfUnity4.6.2\u306e\u6642\n\n\u25a0\u30a2\u30bb\u30c3\u30c8\u30d0\u30f3\u30c9\u30eb\u306e\u4f5c\u6210(\u5727\u7e2e)\n\nExportAssetBundles.cs\n[MenuItem(\"Assets/Build AssetBundle From Selection - Track dependencies\")]\nstatic void ExportResource()\n{\n\n    string path = EditorUtility.SaveFilePanel(\"Save Resource\", \"\", \"New Resource\", \"unity3d\");\n    {\n        // Build the resource file from the active selection.\n        Object[] selection = Selection.GetFiltered(typeof(Object), SelectionMode.DeepAssets);\n        BuildPipeline.BuildAssetBundle(Selection.activeObject, selection, path,\n               BuildAssetBundleOptions.CollectDependencies  | BuildAssetBundleOptions.CompleteAssets);\u3000\n    }\n}\n\n\n\n\u25a0\u30a2\u30bb\u30c3\u30c8\u30d0\u30f3\u30c9\u30eb\u306e\u4f5c\u6210(\u975e\u5727\u7e2e)\n\nExportAssetBundles.cs\n[MenuItem(\"Assets/Build AssetBundle From Selection - Track dependencies\")]\nstatic void ExportResource()\n{\n\n    string path = EditorUtility.SaveFilePanel(\"Save Resource\", \"\", \"New Resource\", \"unity3d\");\n    {\n        // Build the resource file from the active selection.\n        Object[] selection = Selection.GetFiltered(typeof(Object), SelectionMode.DeepAssets);\n        BuildPipeline.BuildAssetBundle(Selection.activeObject, selection, path,\n               BuildAssetBundleOptions.CollectDependencies  \n             | BuildAssetBundleOptions.CompleteAssets\n             | BuildAssetBundleOptions.UncompressedAssetBundle);\u3000\n    }\n}\n\n\n\n\n\u25a0\u30a2\u30bb\u30c3\u30c8\u30d0\u30f3\u30c9\u30eb\u306e\u30ed\u30fc\u30c9\uff08\u975e\u5727\u7e2e\uff09\n\nAssetBundleTestLoader.cs\n\npublic void CreateSingleFileLoad()\n{\n    string path = \"C://AssetBundleTest/StreamingAssets/myAssetBundle.unity3d\";\n\n    AssetBundle NoCompress = AssetBundle.CreateFromFile(path);\n\n    Object[] selection = NoCompress.LoadAll();\n\n    Instantiate(NoCompress.mainAsset);\n\n    NoCompress.Unload(false);\n    Debug.Log(\"Asset End\");\n\n}\n\n\n\n\u25a0\u30a2\u30bb\u30c3\u30c8\u30d0\u30f3\u30c9\u30eb\u306e\u30ed\u30fc\u30c9\uff08\u5727\u7e2e LoadAssetBundle_CreateMemory\uff09\n\nLoadAssetBundleData.cs\n\npublic void OnLoadAssetBundle()\n{\n    StartCoroutine(LoadAssetBundle_CreateMemory());\n}\n\nIEnumerator LoadAssetBundle_CreateMemory()\n{\n    // Application.dataPath\u306fAssets\u306e\u76f4\u4e0b\u306e\u30d5\u30a9\u30eb\u30c0\u306e\u4e8b\n    string path = Application.dataPath + \"/StreamingAssets/myAssetBundle.unity3d\";\n\n    WWW www = new WWW(\"file://\" + path);\n    yield return www;\n    var assetBundleCreateRequest = AssetBundle.CreateFromMemory(www.bytes);\n    yield return assetBundleCreateRequest;\n    AssetBundle assetBundle = assetBundleCreateRequest.assetBundle;\n\n    Object[] objectArray = assetBundle.LoadAll();\n    List<Object> myList = new List<Object>();\n\n    myList.AddRange(objectArray);\n\n    foreach(Object obj in myList)\n    {\n        Instantiate(obj);\n    }\n}\n\n\n\n\u25a0\u8907\u6570\u30a2\u30bb\u30c3\u30c8\u30d0\u30f3\u30c9\u30eb\u306e\u4f5c\u6210\uff08\u975e\u5727\u7e2e\uff09\n\nExportAssetBundles.cs\n\n[MenuItem(\"Assets/Build MultiFolder\")]\nstatic void ExportMultiResource()\n{\n// \u4fdd\u5b58\u5148\u306e\u30d5\u30eb\u30d1\u30b9(Assets\u304b\u3089\u306e\u30d1\u30b9\u3067\u306f\u306a\u3044)\nstring path = \"C://AssetBundleTest/StreamingAssets/\";\nstring filename = \"myAssetBundle\";\nstring afterpath = \".unity3d\";\n\n// Prefabs\u30d5\u30a9\u30eb\u30c0\u5185\u304b\u3089Prefab\u62e1\u5f35\u5b50\u306e\u307f\u306e\u30d5\u30a1\u30a4\u30eb\u3092\u53d6\u5f97\nstring[] fs = System.IO.Directory.GetFiles(Application.dataPath + \"/Prefabs\", \"*.prefab\");\n\nList<string> BundleList = new List<string>();\nList<Object> BundleObjectList = new List<Object>();\nBundleList.AddRange(fs);\n\nint index = 0;\nforeach(string pathname in BundleList)\n{\n\n    // \u30d1\u30b9\u304b\u3089\u62e1\u5f35\u5b50\u3042\u308a\u30d5\u30a1\u30a4\u30eb\u540d\u306e\u307f\u3092\u62bd\u51fa\n    string fileNameLong = System.IO.Path.GetFileName(pathname);\n    Debug.Log(\"fileNameLong=\" + fileNameLong);\n\n    // \u6307\u5b9a\u30d1\u30b9\u3088\u308aPrefab\u3092\u53d6\u5f97\n    GameObject BundleObject = Resources.LoadAssetAtPath<GameObject>(\"Assets/Prefabs/\" + fileNameLong);\n    // Object\u30ea\u30b9\u30c8\u306b\u8ffd\u52a0\n    BundleObjectList.Add(BundleObject);\n\n    // \u30a2\u30bb\u30c3\u30c8\u30d0\u30f3\u30c9\u30eb\u51fa\u529b\u5148\u30d1\u30b9\n    string exportfilename = path + filename + index.ToString() + afterpath;\n    Debug.Log(\"BundleName=\" + exportfilename);\n\n    // \u30a2\u30bb\u30c3\u30c8\u30d0\u30f3\u30c9\u30eb\u4f5c\u6210\n    BuildPipeline.BuildAssetBundle(BundleObject, BundleObjectList.ToArray(), exportfilename,\n                                           BuildAssetBundleOptions.CollectDependencies\n                                           | BuildAssetBundleOptions.CompleteAssets\n                                           | BuildAssetBundleOptions.UncompressedAssetBundle);\n\n    // \u62e1\u5f35\u5b50\u3042\u308a\u30d5\u30a1\u30a4\u30eb\u540d\u304b\u3089\u30d5\u30a1\u30a4\u30eb\u540d\u306e\u307f\u3092\u62bd\u51fa\n    string fileName = System.IO.Path.GetFileNameWithoutExtension(fileNameLong);\n    Debug.Log(\"fileName=\" + fileName);\n    BundleObjectList.Clear();\n\n    index++;\n}\n\n\n\n\u25a0\u8907\u6570\u30a2\u30bb\u30c3\u30c8\u30d0\u30f3\u30c9\u30eb\u306e\u30ed\u30fc\u30c9\uff08\u975e\u5727\u7e2e\uff09\n\nAssetBundleTestLoader.cs\npublic void CreateMultiFileLoad()\n{\n    // Prefabs\u30d5\u30a9\u30eb\u30c0\u5185\u304b\u3089Prefab\u62e1\u5f35\u5b50\u306e\u307f\u3092\u53d6\u5f97\n    string[] fs = System.IO.Directory.GetFiles(\"C://AssetBundleTest/StreamingAssets\", \"*.unity3d\");\n\n    List<string> BundleList = new List<string>();\n    List<Object> BundleObjectList = new List<Object>();\n    BundleList.AddRange(fs);\n\n    foreach (string pathname in BundleList)\n    {\n        AssetBundle NoCompress = AssetBundle.CreateFromFile(pathname);\n\n        //Object[] selection = NoCompress.LoadAll();\n\n        Instantiate(NoCompress.mainAsset);\n\n        NoCompress.Unload(false);\n    }\n}\n\n\n\n\u25cfUnity5.0.0\u306e\u6642\n\u30fbPrefab\u3092\u30a2\u30bb\u30c3\u30c8\u30d0\u30f3\u30c9\u30eb\u306b\u3057\u305f\u3044\u6642\u3001Inspector\u306e\u6700\u4e0b\u6bb5\u306b\u3042\u308bAssetBundle\u3092\u30af\u30ea\u30c3\u30af\u3057\u3066\u3001\u540d\u524d\u3092\u4ed8\u3051\u308b\n\u3000\u8a66\u3057\u306btestcanvas\u3068\u540d\u4ed8\u3051\u308b\n\n\u30fb\u30a2\u30bb\u30c3\u30c8\u30d0\u30f3\u30c9\u30eb\u4f5c\u6210\u7528\u306e\u4e0b\u8a18\u30b9\u30af\u30ea\u30d7\u30c8\u3092\u66f8\u304f\n\u4e8b\u524d\u306bStreamingAssets\u30d5\u30a9\u30eb\u30c0\u306e\u4e2d\u306bBuildOutPut\u30d5\u30a9\u30eb\u30c0\u3092\u4f5c\u6210\u3059\u308b\u5fc5\u8981\u3042\u308a\n\nExportAssetBundles.cs\n\nusing UnityEngine;\nusing UnityEditor;\nusing System.Collections;\n\npublic class ExportAssetBundles : MonoBehaviour\n{\n\n    [MenuItem(\"Assets/Unity 5.x Build AssetBundle\")]\n    static void ExportResource_Unity5()\n    {\n        Debug.Log(\"Target=\" + EditorUserBuildSettings.activeBuildTarget.ToString());\n\n        // PlatForm\u540d\u3092\u305d\u306e\u307e\u307e\u51fa\u529b\u30d5\u30a9\u30eb\u30c0\u3068\u3057\u3066\u4f7f\u7528\u3059\u308b\u3002\n        string OutPutPath = Application.streamingAssetsPath + \"/\" + EditorUserBuildSettings.activeBuildTarget.ToString();\n\n        // \u6307\u5b9a\u30d5\u30a9\u30eb\u30c0\u5b58\u5728\u30c1\u30a7\u30c3\u30af\n        if (Directory.Exists(OutPutPath) == false )\n        {\n            Directory.CreateDirectory(OutPutPath);\n        }\n\n        // \u30d7\u30e9\u30c3\u30c8\u30d5\u30a9\u30fc\u30e0\u540d(Android\u30fbiOS)\u306e\u30de\u30cb\u30d5\u30a7\u30b9\u30c8\u306e\u30a2\u30bb\u30c3\u30c8\u30d0\u30f3\u30c9\u30eb\u304c\u4f5c\u3089\u308c\u308b\u3002\n        BuildPipeline.BuildAssetBundles(OutPutPath, 0, EditorUserBuildSettings.activeBuildTarget);\n        Debug.Log(\"ComPress End\");\n    }\n}\n\n\n\u30fb\u30e1\u30cb\u30e5\u30fc\u3088\u308a\"Unity 5.x Build AssetBundle\"\u3092\u30af\u30ea\u30c3\u30af\n\n\u30fbStreamingAssets\u306e\u4e0b\u306bBuildOutPut\u304c\u4f5c\u6210\u3055\u308c\u3066\u3044\u308b\u3002\n\u30fbBuildOutPut\u30d5\u30a9\u30eb\u30c0\u306e\u4e2d\u306b\u306f\u4e0b\u8a18\u30d5\u30a1\u30a4\u30eb\u304c\u4f5c\u6210\u3055\u308c\u308b\u3002\n\u3000BuildOutPut\n\u3000BuildOutPut.meta\n\u3000BuildOutPut.manifest\n\u3000BuildOutPut.manifest.meta\n\u3000testcanvas\n\u3000testcanvas.meta\n\u3000testcanvas.manifest\n\u3000testcanvas.manifest.meta\n\u25a0\u30a2\u30bb\u30c3\u30c8\u30d0\u30f3\u30c9\u30eb\u3000\u30ed\u30fc\u30c9(CreateFromFile)\n\nAssetBundleLoad_Unity5.cs\nusing UnityEngine;\nusing System.Collections;\npublic class AssetBundleLoad_Unity5 : MonoBehaviour {\n    public void CreateFileAssetBundleFileLoad()\n    {\n        // \u30de\u30cb\u30d5\u30a7\u30b9\u30c8\u304c\u5165\u3063\u3066\u3044\u308b\u30d5\u30a1\u30a4\u30eb\u3092\u30d1\u30b9\u3067\u6307\u5b9a\n        string path = Application.streamingAssetsPath + \"/\" + \"BuildOutPut\" + \"/\";\n        // \u30de\u30cb\u30d5\u30a7\u30b9\u30c8\u306e\u30a2\u30bb\u30c3\u30c8\u30d0\u30f3\u30c9\u30eb\u3092\u4f5c\u6210\n        // (\u30de\u30cb\u30d5\u30a7\u30b9\u30c8\u306e\u30a2\u30bb\u30c3\u30c8\u30d0\u30f3\u30c9\u30eb\u306e\u4e2d\u306b\u30a2\u30bb\u30c3\u30c8\u30d0\u30f3\u30c9\u30eb\u5316\u3057\u305f\u30c7\u30fc\u30bf\u7fa4\u304c\u5165\u3063\u3066\u3044\u308b)\n        AssetBundle NoCompress = AssetBundle.CreateFromFile(path + \"BuildOutPut\");\n        string[] AssetList = NoCompress.GetAllAssetNames();\n        // \u30de\u30cb\u30d5\u30a7\u30b9\u30c8\u5168\u30a2\u30bb\u30c3\u30c8\u30d0\u30f3\u30c9\u30eb\u306e\u4e2d\u8eab\u3092\u30eb\u30fc\u30d7\n        foreach (string AssetNames in AssetList)\n        {\n            // \u30de\u30cb\u30d5\u30a7\u30b9\u30c8\u306e\u30a2\u30bb\u30c3\u30c8\u30d0\u30f3\u30c9\u30eb\u304b\u3089\u30de\u30cb\u30d5\u30a7\u30b9\u30c8\u30c7\u30fc\u30bf\u3092\u30ed\u30fc\u30c9\n            AssetBundleManifest manifest = NoCompress.LoadAsset<AssetBundleManifest>(AssetNames);\n            // \u30de\u30cb\u30d5\u30a7\u30b9\u30c8\u304b\u3089\u5168\u30de\u30cb\u30d5\u30a7\u30b9\u30c8\u540d\u3092\u53d6\u5f97\n            string[] bundleNames = manifest.GetAllAssetBundles();\n            // \u5168\u30de\u30cb\u30d5\u30a7\u30b9\u30c8\u5185\u3092\u30eb\u30fc\u30d7\n            foreach (string bundleName in bundleNames)\n            {\n                // \u6307\u5b9a\u30d1\u30b9\u306e\u30a2\u30bb\u30c3\u30c8\u30d0\u30f3\u30c9\u30eb\u3092\u53d6\u5f97\n                AssetBundle inBundleName = AssetBundle.CreateFromFile(path + bundleName);\n                // \u542b\u307e\u308c\u308b\u30a2\u30bb\u30c3\u30c8\u30d0\u30f3\u30c9\u30eb\u30ea\u30b9\u30c8\u3092\u53d6\u5f97\n                string[] inBundleList = inBundleName.GetAllAssetNames();\n                // \u6307\u5b9a\u30d1\u30b9\u306e\u5168\u30a2\u30bb\u30c3\u30c8\u30d0\u30f3\u30c9\u30eb\u5185\u3092\u30eb\u30fc\u30d7\n                foreach (string inBundleNameString in inBundleList)\n                {\n                    GameObject prefab = inBundleName.LoadAsset<GameObject>(inBundleNameString);\n                    Instantiate(prefab);\n                }\n            }\n        }\n    }\n}\n\n\n\u25a0\u30a2\u30bb\u30c3\u30c8\u30d0\u30f3\u30c9\u30eb\u3000\u30ed\u30fc\u30c9(CreateFromMemory)\n\nAssetBundleManager.cs\nusing UnityEngine;\nusing System.Collections;\nusing System.Collections.Generic;\nusing System.IO;\n\npublic class AssetBundleManager : MonoBehaviour {\n\n    /// <summary>\n    /// UnZip\u5b8c\u4e86\u5f8c\u306b\u30b3\u30fc\u30eb\u3055\u308c\u308b\n    /// </summary>\n    public void CreateFromMemoryLoad()\n    {\n        StartCoroutine(\"FromMemoryLoad\");\n    }\n\n    /// <summary>\n    /// UnZip\u3057\u305fByte\u914d\u5217\u304b\u3089AssetBundle\u3092\u53d6\u308a\u51fa\u3059\u3002\n    /// </summary>\n    /// <returns></returns>\n    IEnumerator FromMemoryLoad()\n    {\n        // Zip\u30d5\u30a1\u30a4\u30eb\u30ea\u30b9\u30c8\u5185\u3092\u30eb\u30fc\u30d7\n        foreach (DownLoadData downloaddata in SingletonDownLoadData.Instance.DownLoadDataList)\n        {\n            List<MemoryStream> UnZipDataList = downloaddata.UnZipDataList;\n            List<string> UnZipFileList = downloaddata.FileNameList;\n\n            int test = 0;\n            // \u89e3\u51cd\u3057\u305fZip\u30d5\u30a1\u30a4\u30eb\u30ea\u30b9\u30c8\u5185\u3092\u30eb\u30fc\u30d7\n            foreach(MemoryStream m_stream in UnZipDataList )\n            {\n                Debug.Log(\"test=\" + test.ToString());\n                AssetBundleCreateRequest assetBundleCreateRequest = AssetBundle.CreateFromMemory(m_stream.GetBuffer());\n\n                // AssetBundleCreateRequest\u306e\u5b8c\u4e86\u5f85\u3061\n                yield return StartCoroutine(WaitBundleRequest(assetBundleCreateRequest));\n\n                AssetBundle assetBundle = assetBundleCreateRequest.assetBundle;\n                if (assetBundle != null)\n                {\n                    string[] AssetList = assetBundle.GetAllAssetNames();\n                    // \u30de\u30cb\u30d5\u30a7\u30b9\u30c8\u5168\u30a2\u30bb\u30c3\u30c8\u30d0\u30f3\u30c9\u30eb\u306e\u4e2d\u8eab\u3092\u30eb\u30fc\u30d7\n                    foreach (string AssetNames in AssetList)\n                    {\n                        // \u30de\u30cb\u30d5\u30a7\u30b9\u30c8\u306e\u30a2\u30bb\u30c3\u30c8\u30d0\u30f3\u30c9\u30eb\u304b\u3089\u30de\u30cb\u30d5\u30a7\u30b9\u30c8\u30c7\u30fc\u30bf\u3092\u30ed\u30fc\u30c9\n                        AssetBundleManifest manifest = assetBundle.LoadAsset<AssetBundleManifest>(AssetNames);\n                        // \u30de\u30cb\u30d5\u30a7\u30b9\u30c8\u304b\u3089\u5168\u30d0\u30f3\u30c9\u30eb\u540d\u3092\u53d6\u5f97\n                        string[] bundleNames = manifest.GetAllAssetBundles();\n\n                        // \u6307\u5b9a\u30de\u30cb\u30d5\u30a7\u30b9\u30c8\u5185\u3092\u30eb\u30fc\u30d7\n                        foreach (string bundleName in bundleNames)\n                        {\n                            int i = 0;\n                            AssetBundleCreateRequest TargetAssetBundleCreateRequest = new AssetBundleCreateRequest();\n                            foreach (string filename in UnZipFileList)\n                            {\n                                if (bundleName == filename)\n                                {\n                                    TargetAssetBundleCreateRequest = AssetBundle.CreateFromMemory(UnZipDataList.ToArray()[i].GetBuffer());\n                                    break;\n                                }\n                                i++;\n                            }\n\n                            // \u30bf\u30fc\u30b2\u30c3\u30c8\u3068\u306a\u308bAssetBundleCreateRequest\u306e\u5b8c\u4e86\u5f85\u3061\n                            yield return StartCoroutine(WaitBundleRequest(TargetAssetBundleCreateRequest));\n                            // \u6307\u5b9a\u30c7\u30fc\u30bf\u306e\u30a2\u30bb\u30c3\u30c8\u30d0\u30f3\u30c9\u30eb\u3092\u53d6\u5f97\n                            AssetBundle TargetAssetBundle = TargetAssetBundleCreateRequest.assetBundle;\n\n                            // \u542b\u307e\u308c\u308b\u30a2\u30bb\u30c3\u30c8\u30d0\u30f3\u30c9\u30eb\u30ea\u30b9\u30c8\u3092\u53d6\u5f97\n                            string[] inBundleList = TargetAssetBundle.GetAllAssetNames();\n                            // \u6307\u5b9a\u30c7\u30fc\u30bf\u306e\u5168\u30a2\u30bb\u30c3\u30c8\u30d0\u30f3\u30c9\u30eb\u5185\u3092\u30eb\u30fc\u30d7\n                            foreach (string inBundleNameString in inBundleList)\n                            {\n                                GameObject prefab = TargetAssetBundle.LoadAsset<GameObject>(inBundleNameString);\n                                Instantiate(prefab);\n                            }\n                        }\n                    }\n                }\n                test++;\n            }\n        }\n    }\n\n    /// <summary>\n    /// AssetBundleCreateRequest\u306eisDone\u3092\u5f85\u3064\n    /// </summary>\n    /// <returns></returns>\n    IEnumerator WaitBundleRequest(AssetBundleCreateRequest GetRequest)\n    {\n        while (GetRequest.isDone == false)\n        {\n            yield return 0;\n        }\n    }\n}\n\n\n\n\u25a0 Unity5.1.0f3 \u30a2\u30bb\u30c3\u30c8\u30d0\u30f3\u30c9\u30eb\u4f5c\u6210\uff0bGZip\uff0bTar\n\nusing UnityEngine;\nusing UnityEditor;\nusing System.Collections;\nusing System.Collections.Generic;\nusing Ionic.Zlib;\nusing System.IO;\nusing System.Text;\nusing System;\nusing ICSharpCode.SharpZipLib.Tar;\n\n    [MenuItem(\"Assets/AssetBundle/Export_Android\")]\n    static void Export_Android_AssetBundle()\n    {\n        ExportAllAssetBundleIntoAllFile(BuildTarget.Android);\n    }\n\n    [MenuItem(\"Assets/AssetBundle/Export_iOS\")]\n    static void Export_iPhone_AssetBundle()\n    {\n        ExportAllAssetBundleIntoAllFile(BuildTarget.iOS);\n\n    }\n\n\n    static void ExportAllAssetBundleIntoAllFile(BuildTarget Target)\n    {\n        Debug.Log(\"Target=\" + Target.ToString());\n\n        // \u89aa\u30c7\u30a3\u30ec\u30af\u30c8\u30ea+AssetBundle\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\n        string strCurrent = System.IO.Directory.GetCurrentDirectory() + \"/\" + \"AssetBundle\";\n\n        // PlatForm\u540d\u3092\u305d\u306e\u307e\u307e\u51fa\u529b\u30d5\u30a9\u30eb\u30c0\u3068\u3057\u3066\u4f7f\u7528\u3059\u308b\u3002\n        string OutPutPath = strCurrent + \"/\" + Target;\n\n\n        DirectoryInfo di = new DirectoryInfo(OutPutPath);\n        // \u6307\u5b9a\u30d5\u30a9\u30eb\u30c0\u5b58\u5728\u30c1\u30a7\u30c3\u30af\n        if (Directory.Exists(OutPutPath) == true)\n        {\n            //\u30d5\u30a9\u30eb\u30c0\u4ee5\u4e0b\u306e\u3059\u3079\u3066\u306e\u30d5\u30a1\u30a4\u30eb\u3001\u30d5\u30a9\u30eb\u30c0\u306e\u5c5e\u6027\u3092\u524a\u9664\n            RemoveReadonlyAttribute(di);\n\n            //\u30d5\u30a9\u30eb\u30c0\u3092\u6839\u3053\u305d\u304e\u524a\u9664\n            di.Delete(true);            // \u5b58\u5728\u3059\u308c\u3070\u524a\u9664\n        }\n        // \u30d5\u30a9\u30eb\u30c0\u3092\u4f5c\u308a\u76f4\u3059\u304b\u65b0\u898f\u4f5c\u6210\n        Directory.CreateDirectory(OutPutPath);\n\n        // \u30d7\u30e9\u30c3\u30c8\u30d5\u30a9\u30fc\u30e0\u540d(Android\u30fbiOS)\u306e\u30de\u30cb\u30d5\u30a7\u30b9\u30c8\u306e\u30a2\u30bb\u30c3\u30c8\u30d0\u30f3\u30c9\u30eb\u304c\u4f5c\u3089\u308c\u308b\u3002\n        BuildPipeline.BuildAssetBundles(OutPutPath, BuildAssetBundleOptions.UncompressedAssetBundle, Target);\n        Debug.Log(\"Export End\");\n\n        // \u62e1\u5f35\u5b50\u304c\u30de\u30cb\u30d5\u30a7\u30b9\u30c8\u306e\u3082\u306e\u3092\u524a\u9664\n        foreach (string file in Directory.GetFiles(OutPutPath, \"*.manifest\"))\n        {\n            File.Delete(file);\n        }\n\n\n        // Gzip\u30d5\u30a9\u30eb\u30c0\u3092\u4f5c\u6210\n        Directory.CreateDirectory(OutPutPath + \"/Gzip\");\n\n        // HTTP\u30ea\u30b9\u30c8\u306e\u4f5c\u6210\n        Encoding sjisEnc = Encoding.GetEncoding(\"Shift_JIS\");\n\n\n        // \u5168\u30d5\u30a1\u30a4\u30eb\u3092Gzip\u5727\u7e2e\n        foreach (string file in Directory.GetFiles(OutPutPath, \"*.*\"))\n        {\n            string filename = System.IO.Path.GetFileNameWithoutExtension(file);\n\n            // \u51fa\u529b\u30d5\u30a1\u30a4\u30eb\u306e\u62e1\u5f35\u5b50\u306f\u300c.gz\u300d\n            string outFile = OutPutPath + \"/Gzip/\" + filename  + \".gz\";\n\n            int num;\n            byte[] buf = new byte[1024]; // 1Kbytes\u305a\u3064\u51e6\u7406\u3059\u308b\n\n            FileStream inStream // \u5165\u529b\u30b9\u30c8\u30ea\u30fc\u30e0\n              = new FileStream(file, FileMode.Open, FileAccess.Read);\n\n            // \u30d5\u30a1\u30a4\u30eb\u30b5\u30a4\u30ba\u3092\u30d0\u30a4\u30c8\u306b\u5909\u63db\n            byte[] filesizehedder = new byte[8];\n            filesizehedder = BitConverter.GetBytes(inStream.Length);\n\n\n            FileStream outStream // \u51fa\u529b\u30b9\u30c8\u30ea\u30fc\u30e0\n              = new FileStream(outFile, FileMode.Create);\n\n            GZipStream compStream // \u5727\u7e2e\u30b9\u30c8\u30ea\u30fc\u30e0\n              = new GZipStream(\n                outStream,  // \u51fa\u529b\u5148\u3068\u306a\u308b\u30b9\u30c8\u30ea\u30fc\u30e0\u3092\u6307\u5b9a\n                CompressionMode.Compress); // \u5727\u7e2e\u3092\u6307\u5b9a\n\n            using (inStream)\n            using (outStream)\n            using (compStream)\n            {\n                //compStream.Write(filesizehedder, 0, 8);\n\n                while ((num = inStream.Read(buf, 0, buf.Length)) > 0)\n                {\n                    compStream.Write(buf, 0, num);\n                }\n            }\n        }\n\n\n\n        // Tar\u30d5\u30a9\u30eb\u30c0\u3092\u4f5c\u6210\n        Directory.CreateDirectory(OutPutPath + \"/Gzip/Tar\");\n\n        StreamWriter writer =\n          new StreamWriter(OutPutPath + \"/Gzip/Tar/httplist.txt\", true, sjisEnc);\n        // \u5168\u30d5\u30a1\u30a4\u30ebGzip\u3092Tar\u30a2\u30fc\u30ab\u30a4\u30d6\u306b\u3059\u308b\n        foreach (string file in Directory.GetFiles(OutPutPath + \"/Gzip\", \"*.*\"))\n        {\n            string filename = System.IO.Path.GetFileNameWithoutExtension(file);\n            // \u51fa\u529b\u30d5\u30a1\u30a4\u30eb\u306e\u62e1\u5f35\u5b50\u306f\u300c.tar\u300d\n            string outFile = OutPutPath + \"/Gzip/Tar/\" + filename + \".tar\";\n\n            Debug.Log(\"filename=\" + filename);\n            Debug.Log(\"outFile=\" + outFile);\n            // Tar\u30d5\u30a1\u30a4\u30eb\u4f5c\u6210\n            CreateTar(outFile, file);\n            // HTTP\u30ea\u30b9\u30c8\u306b\u66f8\u304d\u8fbc\u307f\n            writer.WriteLine(\"DownLoadUrlAdd(\" + \"\\\"\" + \"http://999.99.99.999/Tar/\" + Path.GetFileName(outFile) + \"\\\"\" + \");\");\n            Debug.Log(\"WriteLine\");\n\n        }\n        writer.Close();\n\n        Debug.Log(\"HttpList End\");\n\n    }\n\n    /// <summary>\n    /// Tar\u30d5\u30a1\u30a4\u30eb\u4f5c\u6210\n    /// </summary>\n    /// <param name=\"outputTarFilename\">Output .tar.gz file</param>\n    /// <param name=\"sourceDirectory\">Input directory containing files to be added to GZipped tar archive</param>\n    private static void CreateTar(string outputTarFilename, string readfilename)\n    {\n        using (FileStream fs = new FileStream(outputTarFilename, FileMode.Create, FileAccess.Write, FileShare.None))\n        using (TarArchive tarArchive = TarArchive.CreateOutputTarArchive(fs))\n        {\n            TarEntry tarEntry = TarEntry.CreateEntryFromFile(readfilename);\n            tarArchive.WriteEntry(tarEntry, true);\n        }\n    }\n\n\n**\u30102016/08/25\u8ffd\u8a18\u3011**\n\n**iOS\u5074Unity5.4.0f3 \u306b\u3088\u308b\u30b7\u30fc\u30f3\u30a2\u30bb\u30c3\u30c8\u30d0\u30f3\u30c9\u30eb\u306e\u30ed\u30fc\u30c9\u51e6\u7406(StreamingAssets\u30d5\u30a9\u30eb\u30c0\u3092\u4f7f\u7528)**\n\nXcode\u3067\u5b9f\u884c\u3059\u308b\u3068\u304d\u306e\u6ce8\u610f\u70b9\u3068\u3057\u3066\u3001\niOS\u306e**BuildSettings ->OtherSettings->Strip EngineCode**\u306e\u30c1\u30a7\u30c3\u30af\u3092\u5916\u3059\u3002\n\n\u3053\u3046\u3057\u306a\u3044\u3068**AnimatorController**\u304c\u30a8\u30e9\u30fc\u3092\u8d77\u3053\u3057\u3066\u518d\u751f\u3055\u308c\u306a\u3044\u3002\n\n\u4e0b\u8a18URL\u306b**strippinglevel**\u3068**AnimatorController**\u306b\u95a2\u3057\u3066\u305d\u308c\u3063\u307d\u3044\u3053\u3068\u304c\u66f8\u3044\u3066\u3042\u308b\nhttp://forum.unity3d.com/threads/could-not-produce-class-with-id-91-ios.267548/\nhttp://docs.unity3d.com/Manual/webgl-building.html\n\n**Unity5.4.0f3 \u306b\u3088\u308b\u30b7\u30fc\u30f3\u30a2\u30bb\u30c3\u30c8\u30d0\u30f3\u30c9\u30eb\u306e\u30ed\u30fc\u30c9\u51e6\u7406\u306e\u5099\u5fd8\u9332**\n\n```\n    public List<Texture2D> TextureLists = new List<Texture2D> ();\n    public List<Material> MaterialLists = new List<Material> ();\n    public List<GameObject> GameObjectLists = new List<GameObject> ();\n    List<string> listMaster = new List<string> ();\n\n    public void TestLoc1_BundleLoadStreamingAssets ()\n    {\n\n        #if UNITY_IPHONE\n        AssetBundle manifestBundle = AssetBundle.LoadFromFile (Application.dataPath + \"/Raw/iOS\");\n        #elif UNITY_EDITOR\n        AssetBundle manifestBundle = AssetBundle.LoadFromFile (Application.streamingAssetsPath + \"/iOS\");\n        #endif\n        AssetBundleManifest manifest = manifestBundle.LoadAsset (\"AssetBundleManifest\") as AssetBundleManifest;\n        List<string> ListA = new List<string> ();\n\n        // \u30b7\u30fc\u30f3\u306b\u5fc5\u8981\u306a\u3082\u306e\n        ListA.Add (\u30d5\u30a9\u30eb\u30c0\u30a2\u30bb\u30c3\u30c8\u30d0\u30f3\u30c9\u30eb\u540d\uff11);\n        ListA.Add (\u30d5\u30a9\u30eb\u30c0\u30a2\u30bb\u30c3\u30c8\u30d0\u30f3\u30c9\u30eb\u540d\uff12);\n        ListA.Add (\u30d5\u30a9\u30eb\u30c0\u30a2\u30bb\u30c3\u30c8\u30d0\u30f3\u30c9\u30eb\u540d\uff13);\n        ListA.Add (\u30d5\u30a9\u30eb\u30c0\u30a2\u30bb\u30c3\u30c8\u30d0\u30f3\u30c9\u30eb\u540d\uff14);\n        ListA.Add (\u30d5\u30a9\u30eb\u30c0\u30a2\u30bb\u30c3\u30c8\u30d0\u30f3\u30c9\u30eb\u540d\uff15);\n        ListA.Add (\u30d5\u30a9\u30eb\u30c0\u30a2\u30bb\u30c3\u30c8\u30d0\u30f3\u30c9\u30eb\u540d\uff16);\n\n        // \u30b7\u30fc\u30f3        \n        ListA.Add (\u30b7\u30fc\u30f3\u306e\u30a2\u30bb\u30c3\u30c8\u30d0\u30f3\u30c9\u30eb\u540d);\n\n        listMaster.AddRange (ListA);\n\n        bool noDependenceFlg = false;\n\n        while ( noDependenceFlg == false ) {\n            List<string> ListB = new List<string> ();\n            // \uff11\u6bb5\u968e\u30cd\u30b9\u30c8\u3055\u308c\u305f\u4f9d\u5b58\u95a2\u4fc2\u30ea\u30b9\u30c8\u3092\u4f5c\u6210\n            foreach (string bundlename in ListA) {\n                // \u76f4\u63a5\u306e\u4f9d\u5b58\u95a2\u4fc2\u30ea\u30b9\u30c8\u3092\u53d6\u5f97\n                string[] dependenceArray = manifest.GetDirectDependencies (bundlename);\n\n                ListB.AddRange (dependenceArray);\n            }\n\n            // \u91cd\u8907\u6392\u9664\n            ListB = ListB.Distinct ().ToList ();\n\n            ListA.Sort ();\n            ListB.Sort ();\n\n            if ( (ListB.Count == 0) || (ListA.SequenceEqual (ListB) == true) ) {\n                noDependenceFlg = true;\n            } else {\n                // \uff11\u6bb5\u968e\u30cd\u30b9\u30c8\u3055\u308c\u305f\u4f9d\u5b58\u95a2\u4fc2\u30ea\u30b9\u30c8\u3092\u4f5c\u6210\n                foreach (string dependenceBundle in ListB) {\n                    // \u3059\u3067\u306b\u5b58\u5728\u3059\u308c\u3070\u524a\u9664\u3057\u3066\u6700\u5f8c\u5c3e\u306b\u8ffd\u52a0\n                    if ( listMaster.Contains (dependenceBundle) == true ) {\n                        listMaster.Remove (dependenceBundle);\n                    }\n                    listMaster.Add (dependenceBundle);\n                }\n                ListA.Clear ();\n                ListA.AddRange (ListB);\n            }\n        }\n\n        listMaster.Reverse ();\n\n        Debug.Log (\"Count=\" + listMaster.Count.ToString ());\n\n        foreach (string bundleName in listMaster) {\n            string bundleString = bundleName;\n            Debug.Log (\"bundleName=\" + bundleName);\n\n            #if UNITY_IPHONE\n            AssetBundle bundleData = AssetBundle.LoadFromFile (Application.dataPath + \"/Raw/\" + bundleName);\n            #elif UNITY_EDITOR\n            AssetBundle bundleData = AssetBundle.LoadFromFile (Application.streamingAssetsPath + \"/\" + bundleName);\n            #endif\n\n            if ( bundleData.isStreamedSceneAssetBundle == true ) {\n                string[] sceneString = bundleData.GetAllScenePaths ();\n\n                Debug.Log (\"scene=\" + sceneString [0]);\n                string scenePath = Path.GetFileNameWithoutExtension (sceneString [0]);\n                SceneManager.LoadSceneAsync (scenePath, LoadSceneMode.Additive);\n                return;\n            }\n            UnityEngine.Object[] objects = bundleData.LoadAllAssets ();\n\n            foreach (UnityEngine.Object obj in objects) {\n                Debug.Log (\"Name=\" + obj.name + \" Type=\" + obj.GetType ().ToString ());\n\n                if ( obj.GetType () == typeof(GameObject) ) {\n                    GameObjectLists.Add (obj as UnityEngine.GameObject);\n                    Instantiate (obj);\n                } else if ( obj.GetType () == typeof(Texture2D) ) {\n                    TextureDic.Add (obj as Texture2D);\n                } else if ( obj.GetType () == typeof(Material) ) {\n                    Debug.Log (\"<color=red>Main Material= \" + obj.name + \"</color>\");\n                    MaterialDic.Add (obj as Material);\n                }\n            }\n            //            bundleData.Unload (false);\n        }\n\n    }\n\n```\n\n\n\n\n**Android\u5074Unity5.4.0f3 \u306b\u3088\u308b\u30b7\u30fc\u30f3\u30a2\u30bb\u30c3\u30c8\u30d0\u30f3\u30c9\u30eb\u306e\u30ed\u30fc\u30c9\u51e6\u7406(StreamingAssets\u30d5\u30a9\u30eb\u30c0\u3092\u4f7f\u7528)**\n\n**Android\u5074Unity5.4.0f3 \u306b\u3088\u308b\u30b7\u30fc\u30f3\u30a2\u30bb\u30c3\u30c8\u30d0\u30f3\u30c9\u30eb\u306e\u30ed\u30fc\u30c9\u51e6\u7406\u306e\u5099\u5fd8\u9332**\n\n```\n    public List<Texture2D> TextureLists = new List<Texture2D> ();\n    public List<Material> MaterialLists = new List<Material> ();\n    public List<GameObject> GameObjectLists = new List<GameObject> ();\n    List<string> listMaster = new List<string> ();\n\n    public void TestLoc1_Android_BundleLoadStreamingAssets()\n    {\n        StartCoroutine(loadBundle_StreamingAssets());\n    }\n\n    IEnumerator loadBundle_StreamingAssets()\n    {\n        string loadPath = \"jar:file://\" + Application.dataPath + \"!/assets/AssetBundle/\";\n\n        string manifestPath = loadPath + \"Android\";\n\n        Debug.Log(\"manifestPath=\" + manifestPath);\n\n        var www = WWW.LoadFromCacheOrDownload(manifestPath,1);\n        yield return www;\n        AssetBundle manifestBundle = www.assetBundle;\n\n        AssetBundleManifest manifest = manifestBundle.LoadAsset(\"AssetBundleManifest\") as AssetBundleManifest;\n\n        List<string> ListA = new List<string>();\n\n\n        ListA.Add(\u30a2\u30bb\u30c3\u30c8\u30d0\u30f3\u30c9\u30eb\u540d\uff11);\n        ListA.Add(\u30a2\u30bb\u30c3\u30c8\u30d0\u30f3\u30c9\u30eb\u540d\uff12);\n        ListA.Add(\u30a2\u30bb\u30c3\u30c8\u30d0\u30f3\u30c9\u30eb\u540d\uff13);\n        ListA.Add(\u30a2\u30bb\u30c3\u30c8\u30d0\u30f3\u30c9\u30eb\u540d\uff14);\n        ListA.Add(\u30a2\u30bb\u30c3\u30c8\u30d0\u30f3\u30c9\u30eb\u540d\uff15);\n        ListA.Add(\u30a2\u30bb\u30c3\u30c8\u30d0\u30f3\u30c9\u30eb\u540d\uff16);\n\n\n        ListA.Add(\u30b7\u30fc\u30f3\u30a2\u30bb\u30c3\u30c8\u30d0\u30f3\u30c9\u30eb\u540d);\n\n        listMaster.AddRange(ListA);\n\n        bool noDependenceFlg = false;\n\n        while (noDependenceFlg == false)\n        {\n            List<string> ListB = new List<string>();\n            // \uff11\u6bb5\u968e\u30cd\u30b9\u30c8\u3055\u308c\u305f\u4f9d\u5b58\u95a2\u4fc2\u30ea\u30b9\u30c8\u3092\u4f5c\u6210\n            foreach (string bundlename in ListA)\n            {\n                // \u76f4\u63a5\u306e\u4f9d\u5b58\u95a2\u4fc2\u30ea\u30b9\u30c8\u3092\u53d6\u5f97\n                string[] dependenceArray = manifest.GetDirectDependencies(bundlename);\n\n                ListB.AddRange(dependenceArray);\n            }\n\n            // \u91cd\u8907\u6392\u9664\n            ListB = ListB.Distinct().ToList();\n\n            ListA.Sort();\n            ListB.Sort();\n\n            if ((ListB.Count == 0) || (ListA.SequenceEqual(ListB) == true))\n            {\n                noDependenceFlg = true;\n            }\n            else {\n                // \uff11\u6bb5\u968e\u30cd\u30b9\u30c8\u3055\u308c\u305f\u4f9d\u5b58\u95a2\u4fc2\u30ea\u30b9\u30c8\u3092\u4f5c\u6210\n                foreach (string dependenceBundle in ListB)\n                {\n                    // \u3059\u3067\u306b\u5b58\u5728\u3059\u308c\u3070\u524a\u9664\u3057\u3066\u6700\u5f8c\u5c3e\u306b\u8ffd\u52a0\n                    if (listMaster.Contains(dependenceBundle) == true)\n                    {\n                        listMaster.Remove(dependenceBundle);\n                    }\n                    listMaster.Add(dependenceBundle);\n                }\n                ListA.Clear();\n                ListA.AddRange(ListB);\n            }\n        }\n\n        listMaster.Reverse();\n\n        Debug.Log(\"Count=\" + listMaster.Count.ToString());\n\n\n        foreach (string bundleName in listMaster)\n        {\n            string bundleString = bundleName;\n            Debug.Log(\"bundleName=\" + \"jar:file://\" + Application.dataPath + \"!/assets/AssetBundle/\" + bundleName);\n\n            var wwwfile = WWW.LoadFromCacheOrDownload(\"jar:file://\" + Application.dataPath + \"!/assets/AssetBundle/\" + bundleName, 1);\n            yield return wwwfile;\n            AssetBundle bundleData = wwwfile.assetBundle;\n\n            if ( bundleData.isStreamedSceneAssetBundle == true ) {\n                string[] sceneString = bundleData.GetAllScenePaths ();\n\n                string scenePath = Path.GetFileNameWithoutExtension (sceneString [0]);\n                SceneManager.LoadSceneAsync (scenePath, LoadSceneMode.Additive);\n                return;\n            }\n            UnityEngine.Object[] objects = bundleData.LoadAllAssets();\n\n            foreach (UnityEngine.Object obj in objects)\n            {\n                Debug.Log(\"Name=\" + obj.name + \" Type=\" + obj.GetType().ToString());\n\n                if (obj.GetType() == typeof(GameObject))\n                {\n                    GameObjectLists.Add(obj as UnityEngine.GameObject);\n                    Instantiate(obj);\n                }\n                else if (obj.GetType() == typeof(Texture2D))\n                {\n                    TextureDic.Add(obj as Texture2D);\n                }\n                else if (obj.GetType() == typeof(Material))\n                {\n                    Debug.Log(\"<color=red>Main Material= \" + obj.name + \"</color>\");\n                    MaterialDic.Add(obj as Material);\n                }\n            }\n            //            bundleData.Unload (false);\n        }\n\n    }\n\n```\n\n**\u30102016/03/04\u8ffd\u8a18\u3011**\nCreateFromMemory\u306e\u30d0\u30b0\u306f\u30d0\u30fc\u30b8\u30e7\u30f35.2.4\u3067\u4fee\u6b63\u3055\u308c\u305f\u6a21\u69d8\n\n**https://unity3d.com/jp/unity/whats-new/unity-5.2.4**\n\u25a0AssetBundles: CreateFromMemory \u3067\u975e\u5727\u7e2e\u306e\u30a2\u30bb\u30c3\u30c8\u30d0\u30f3\u30c9\u30eb\u3092\u30ed\u30fc\u30c9\u3057\u3088\u3046\u3068\u3059\u308b\u3068\u30af\u30e9\u30c3\u30b7\u30e5\u3057\u3066\u3057\u307e\u3046\u554f\u984c\u3092\u4fee\u6b63(698667)\n\n**\u30102015/08/05\u8ffd\u8a18\u3011**\nCreateFromMemory\u3068\u7121\u5727\u7e2e\u30a2\u30bb\u30c3\u30c8\u30d0\u30f3\u30c9\u30eb(BuildAssetBundleOptions.UncompressedAssetBundle)\u306e\u7d44\u307f\u5408\u308f\u305b\u3001\nCreateFromMemoryImmediate\u3068\u7121\u5727\u7e2e\u30a2\u30bb\u30c3\u30c8\u30d0\u30f3\u30c9\u30eb(BuildAssetBundleOptions.UncompressedAssetBundle)\u306e\u7d44\u307f\u5408\u308f\u305b\u3001\u306b\u306f\n\u73fe\u5728Unity\u5074\u306b\u30d0\u30b0\u304c\u3042\u308b\u306e\u3067\u4f7f\u7528\u3057\u306a\u3044\u3067\u304f\u3060\u3055\u3044\uff08\u516c\u5f0f\u898b\u89e3\u3067\u3059\uff09\u3002\n\n\u7121\u5727\u7e2e\u306e\u30a2\u30bb\u30c3\u30c8\u30d0\u30f3\u30c9\u30eb\u3092\u4f7f\u7528\u3057\u305f\u3044\u6642\u306f\u3001CreateFromFile\u3000\u3092\u4f7f\u7528\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n\n# \u25cfUnity5.3.0f4\u306e\u6642\n\n\u25a0\u30a2\u30bb\u30c3\u30c8\u30d0\u30f3\u30c9\u30eb\u306e\u30a8\u30af\u30b9\u30dd\u30fc\u30c8\n\n**\u25cf\u25cf\u7121\u5727\u7e2e\u30a2\u30bb\u30c3\u30c8\u30d0\u30f3\u30c9\u30eb\u25cf\u25cf**\n\n```\nBuildPipeline.BuildAssetBundles(\u51fa\u529b\u5148, BuildAssetBundleOptions.UncompressedAssetBundle, \u30d7\u30e9\u30c3\u30c8\u30d5\u30a9\u30fc\u30e0);\n```\n\n**\u25cf\u25cfLZMA\u5727\u7e2e\u30a2\u30bb\u30c3\u30c8\u30d0\u30f3\u30c9\u30eb\u25cf\u25cf**\n\n```\nBuildPipeline.BuildAssetBundles(\u51fa\u529b\u5148, BuildAssetBundleOptions.None, \u30d7\u30e9\u30c3\u30c8\u30d5\u30a9\u30fc\u30e0);\n```\n\n**\u25cf\u25cfLZ4\u5727\u7e2e\u30a2\u30bb\u30c3\u30c8\u30d0\u30f3\u30c9\u30eb\u25cf\u25cf**\n\n```\nBuildPipeline.BuildAssetBundles(\u51fa\u529b\u5148, BuildAssetBundleOptions.ChunkBasedCompression, \u30d7\u30e9\u30c3\u30c8\u30d5\u30a9\u30fc\u30e0);\n```\n\n\n\u25a0\u30a2\u30bb\u30c3\u30c8\u30d0\u30f3\u30c9\u30eb\u306e\u30ed\u30fc\u30c9\n\n  **\u25a0WWW\u3092\u4f7f\u7528\u3057\u3066StreamingAssets\u304b\u3089\u30a2\u30bb\u30c3\u30c8\u30d0\u30f3\u30c9\u30eb\u30ed\u30fc\u30c9**\n\n```\npublic List<Object> publicObjectList = new List<Object>();\n\nIEnumerator LoadAssetBundle()\n{\n    //****************************\n    // WWW\u3092\u4f7f\u7528\u3057\u3066StreamingAssets\u304b\u3089\u30a2\u30bb\u30c3\u30c8\u30d0\u30f3\u30c9\u30eb\u30ed\u30fc\u30c9\n    WWW baseCommonWww = new WWW(Application.streamingAssetsPath + \u30a2\u30bb\u30c3\u30c8\u30d0\u30f3\u30c9\u30eb\u540d);\n    yield return baseCommonWww;\n    AssetBundle baseCommonBundle = baseCommonWww.assetBundle;\n    //****************************\n    Object[] baseCommonObjects = baseCommonBundle.LoadAllAssets();\n\n    foreach (Object obj in baseCommonObjects)\n    {\n        Debug.Log(\"obj=\" + obj.name);\n        Debug.Log(\"objtype=\" + obj.GetType().ToString());\n\n        publicObjectList.Add(obj);\n    }\n}\n```\n\n  **\u25a0LoadFromFile\u3092\u4f7f\u7528\u3057\u3066StreamingAssets\u304b\u3089\u30a2\u30bb\u30c3\u30c8\u30d0\u30f3\u30c9\u30eb\u30ed\u30fc\u30c9**\n\n```\npublic List<Object> publicObjectList = new List<Object>();\n\n\u30e1\u30bd\u30c3\u30c9\u540d()\n{\n\t//****************************\n\t// LoadFromFile LZMA\u5727\u7e2e\n\t//AssetBundle baseCommonBundle = AssetBundle.LoadFromFile(Application.streamingAssetsPath + \u30a2\u30bb\u30c3\u30c8\u30d0\u30f3\u30c9\u30eb\u540d);\n\t// LoadFromFile \u5727\u7e2e\u306a\u3057\n\t//AssetBundle baseCommonBundle = AssetBundle.LoadFromFile(Application.streamingAssetsPath + \u30a2\u30bb\u30c3\u30c8\u30d0\u30f3\u30c9\u30eb\u540d);\n\t// LoadFromFile LZ4\u5727\u7e2e\n\t//AssetBundle baseCommonBundle = AssetBundle.LoadFromFile(Application.streamingAssetsPath + \u30a2\u30bb\u30c3\u30c8\u30d0\u30f3\u30c9\u30eb\u540d);\n\t//****************************\n\n\tObject[] baseCommonObjects = baseCommonBundle.LoadAllAssets();\n\n\tforeach (Object obj in baseCommonObjects)\n\t{\n\t    Debug.Log(\"obj=\" + obj.name);\n\t    Debug.Log(\"objtype=\" + obj.GetType().ToString());\n\n\t    publicObjectList.Add(obj);\n\t}\n}\n\n```\n\n  **\u25a0LoadFromFileAsync\u3092\u4f7f\u7528\u3057\u3066StreamingAssets\u304b\u3089\u30a2\u30bb\u30c3\u30c8\u30d0\u30f3\u30c9\u30eb\u30ed\u30fc\u30c9**\n\n```\npublic List<Object> publicObjectList = new List<Object>();\n\nIEnumerator LoadAssetBundle()\n{\n    //****************************\n    // LoadFromFileAsync LZMA\u5727\u7e2e\n    //AssetBundleCreateRequest baseCommonRequest = AssetBundle.LoadFromFileAsync(Application.streamingAssetsPath + \u30a2\u30bb\u30c3\u30c8\u30d0\u30f3\u30c9\u30eb\u540d);\n    // LoadFromFileAsync \u5727\u7e2e\u306a\u3057\n    //AssetBundleCreateRequest baseCommonRequest = AssetBundle.LoadFromFileAsync(Application.streamingAssetsPath + \u30a2\u30bb\u30c3\u30c8\u30d0\u30f3\u30c9\u30eb\u540d);\n    // LoadFromFileAsync LZ4\u5727\u7e2e\n    //AssetBundleCreateRequest baseCommonRequest = AssetBundle.LoadFromFileAsync(Application.streamingAssetsPath + \u30a2\u30bb\u30c3\u30c8\u30d0\u30f3\u30c9\u30eb\u540d);\n\n    //yield return StartCoroutine(BundleRequestWait(baseCommonRequest));\n    //AssetBundle baseCommonBundle = baseCommonRequest.assetBundle;\n    //****************************\n\n    Object[] baseCommonObjects = baseCommonBundle.LoadAllAssets();\n\n    foreach (Object obj in baseCommonObjects)\n    {\n        Debug.Log(\"obj=\" + obj.name);\n        Debug.Log(\"objtype=\" + obj.GetType().ToString());\n\n        publicObjectList.Add(obj);\n    }\n}\n\nIEnumerator BundleRequestWait(AssetBundleCreateRequest assetBundleCreateRequest)\n{\n\n    while(assetBundleCreateRequest.isDone == false)\n    {\n        Debug.Log(\"wait\");\n        yield return 0;\n    }\n}\n```\n\n\n\n  **\u25a0LoadFromMemory\u3092\u4f7f\u7528\u3057\u3066StreamingAssets\u304b\u3089\u30a2\u30bb\u30c3\u30c8\u30d0\u30f3\u30c9\u30eb\u30ed\u30fc\u30c9**\n\n```\npublic List<Object> publicObjectList = new List<Object>();\n\n\u30e1\u30bd\u30c3\u30c9\u540d()\n{\n    //****************************\n    // LoadFromMemory LZMA\u5727\u7e2e\n    //byte[] bundleData = System.IO.File.ReadAllBytes(Application.streamingAssetsPath + \u30a2\u30bb\u30c3\u30c8\u30d0\u30f3\u30c9\u30eb\u540d); // \u8aad\u307f\u8fbc\u307f\n    // LoadFromMemory \u5727\u7e2e\u306a\u3057\n    //byte[] bundleData = System.IO.File.ReadAllBytes(Application.streamingAssetsPath + \u30a2\u30bb\u30c3\u30c8\u30d0\u30f3\u30c9\u30eb\u540d); // \u8aad\u307f\u8fbc\u307f\n    // LoadFromMemory LZ4\u5727\u7e2e\n    //byte[] bundleData = System.IO.File.ReadAllBytes(Application.streamingAssetsPath + \u30a2\u30bb\u30c3\u30c8\u30d0\u30f3\u30c9\u30eb\u540d); // \u8aad\u307f\u8fbc\u307f\n\n    //AssetBundle baseCommonBundle = AssetBundle.LoadFromMemory(bundleData);\n    //****************************\n\n\tObject[] baseCommonObjects = baseCommonBundle.LoadAllAssets();\n\n\tforeach (Object obj in baseCommonObjects)\n\t{\n\t    Debug.Log(\"obj=\" + obj.name);\n\t    Debug.Log(\"objtype=\" + obj.GetType().ToString());\n\n\t    publicObjectList.Add(obj);\n\t}\n}\n\n```\n\n  **\u25a0LoadFromMemoryAsync\u3092\u4f7f\u7528\u3057\u3066StreamingAssets\u304b\u3089\u30a2\u30bb\u30c3\u30c8\u30d0\u30f3\u30c9\u30eb\u30ed\u30fc\u30c9**\n\n```\npublic List<Object> publicObjectList = new List<Object>();\n\nIEnumerator LoadAssetBundle()\n{\n    //****************************\n    // LoadFromMemoryAsync LZMA\u5727\u7e2e\n    //byte[] bundleData = System.IO.File.ReadAllBytes(Application.streamingAssetsPath + \u30a2\u30bb\u30c3\u30c8\u30d0\u30f3\u30c9\u30eb\u540d); // \u8aad\u307f\u8fbc\u307f\n    // LoadFromMemoryAsync \u5727\u7e2e\u306a\u3057\n    //byte[] bundleData = System.IO.File.ReadAllBytes(Application.streamingAssetsPath + \u30a2\u30bb\u30c3\u30c8\u30d0\u30f3\u30c9\u30eb\u540d); // \u8aad\u307f\u8fbc\u307f\n    // LoadFromMemoryAsync LZ4\u5727\u7e2e\n    byte[] bundleData = System.IO.File.ReadAllBytes(Application.streamingAssetsPath + \u30a2\u30bb\u30c3\u30c8\u30d0\u30f3\u30c9\u30eb\u540d); // \u8aad\u307f\u8fbc\u307f\n    AssetBundleCreateRequest baseCommonRequest = AssetBundle.LoadFromMemoryAsync(bundleData);\n    yield return StartCoroutine(BundleRequestWait(baseCommonRequest));\n    AssetBundle baseCommonBundle = baseCommonRequest.assetBundle;\n    //****************************\n\n    Object[] baseCommonObjects = baseCommonBundle.LoadAllAssets();\n\n    foreach (Object obj in baseCommonObjects)\n    {\n        Debug.Log(\"obj=\" + obj.name);\n        Debug.Log(\"objtype=\" + obj.GetType().ToString());\n\n        publicObjectList.Add(obj);\n    }\n}\n\nIEnumerator BundleRequestWait(AssetBundleCreateRequest assetBundleCreateRequest)\n{\n\n    while(assetBundleCreateRequest.isDone == false)\n    {\n        Debug.Log(\"wait\");\n        yield return 0;\n    }\n}\n```\n\n\n\n\n********\n\n\n\n********\n# \u25cfUnity4.6.2\u306e\u6642\n\n## \u25a0\u30a2\u30bb\u30c3\u30c8\u30d0\u30f3\u30c9\u30eb\u306e\u4f5c\u6210(\u5727\u7e2e)\n\n```csharp:ExportAssetBundles.cs\n[MenuItem(\"Assets/Build AssetBundle From Selection - Track dependencies\")]\nstatic void ExportResource()\n{\n\n    string path = EditorUtility.SaveFilePanel(\"Save Resource\", \"\", \"New Resource\", \"unity3d\");\n    {\n        // Build the resource file from the active selection.\n        Object[] selection = Selection.GetFiltered(typeof(Object), SelectionMode.DeepAssets);\n        BuildPipeline.BuildAssetBundle(Selection.activeObject, selection, path,\n               BuildAssetBundleOptions.CollectDependencies  | BuildAssetBundleOptions.CompleteAssets);\u3000\n    }\n}\n```\n\n\n\n\n## \u25a0\u30a2\u30bb\u30c3\u30c8\u30d0\u30f3\u30c9\u30eb\u306e\u4f5c\u6210(\u975e\u5727\u7e2e)\n```csharp:ExportAssetBundles.cs\n[MenuItem(\"Assets/Build AssetBundle From Selection - Track dependencies\")]\nstatic void ExportResource()\n{\n\n    string path = EditorUtility.SaveFilePanel(\"Save Resource\", \"\", \"New Resource\", \"unity3d\");\n    {\n        // Build the resource file from the active selection.\n        Object[] selection = Selection.GetFiltered(typeof(Object), SelectionMode.DeepAssets);\n        BuildPipeline.BuildAssetBundle(Selection.activeObject, selection, path,\n               BuildAssetBundleOptions.CollectDependencies  \n             | BuildAssetBundleOptions.CompleteAssets\n             | BuildAssetBundleOptions.UncompressedAssetBundle);\u3000\n    }\n}\n\n```\n\n## \u25a0\u30a2\u30bb\u30c3\u30c8\u30d0\u30f3\u30c9\u30eb\u306e\u30ed\u30fc\u30c9\uff08\u975e\u5727\u7e2e\uff09\n```csharp:AssetBundleTestLoader.cs\n\npublic void CreateSingleFileLoad()\n{\n    string path = \"C://AssetBundleTest/StreamingAssets/myAssetBundle.unity3d\";\n\n    AssetBundle NoCompress = AssetBundle.CreateFromFile(path);\n\n    Object[] selection = NoCompress.LoadAll();\n\n    Instantiate(NoCompress.mainAsset);\n        \n    NoCompress.Unload(false);\n    Debug.Log(\"Asset End\");\n        \n}\n```\n\n## \u25a0\u30a2\u30bb\u30c3\u30c8\u30d0\u30f3\u30c9\u30eb\u306e\u30ed\u30fc\u30c9\uff08\u5727\u7e2e LoadAssetBundle_CreateMemory\uff09\n```csharp:LoadAssetBundleData.cs\n\npublic void OnLoadAssetBundle()\n{\n    StartCoroutine(LoadAssetBundle_CreateMemory());\n}\n\nIEnumerator LoadAssetBundle_CreateMemory()\n{\n    // Application.dataPath\u306fAssets\u306e\u76f4\u4e0b\u306e\u30d5\u30a9\u30eb\u30c0\u306e\u4e8b\n    string path = Application.dataPath + \"/StreamingAssets/myAssetBundle.unity3d\";\n    \n    WWW www = new WWW(\"file://\" + path);\n    yield return www;\n    var assetBundleCreateRequest = AssetBundle.CreateFromMemory(www.bytes);\n    yield return assetBundleCreateRequest;\n    AssetBundle assetBundle = assetBundleCreateRequest.assetBundle;\n\n    Object[] objectArray = assetBundle.LoadAll();\n    List<Object> myList = new List<Object>();\n\n    myList.AddRange(objectArray);\n\n    foreach(Object obj in myList)\n    {\n        Instantiate(obj);\n    }\n}\n```\n\n## \u25a0\u8907\u6570\u30a2\u30bb\u30c3\u30c8\u30d0\u30f3\u30c9\u30eb\u306e\u4f5c\u6210\uff08\u975e\u5727\u7e2e\uff09\n```csharp:ExportAssetBundles.cs\n\n[MenuItem(\"Assets/Build MultiFolder\")]\nstatic void ExportMultiResource()\n{\n// \u4fdd\u5b58\u5148\u306e\u30d5\u30eb\u30d1\u30b9(Assets\u304b\u3089\u306e\u30d1\u30b9\u3067\u306f\u306a\u3044)\nstring path = \"C://AssetBundleTest/StreamingAssets/\";\nstring filename = \"myAssetBundle\";\nstring afterpath = \".unity3d\";\n      \n// Prefabs\u30d5\u30a9\u30eb\u30c0\u5185\u304b\u3089Prefab\u62e1\u5f35\u5b50\u306e\u307f\u306e\u30d5\u30a1\u30a4\u30eb\u3092\u53d6\u5f97\nstring[] fs = System.IO.Directory.GetFiles(Application.dataPath + \"/Prefabs\", \"*.prefab\");\n\nList<string> BundleList = new List<string>();\nList<Object> BundleObjectList = new List<Object>();\nBundleList.AddRange(fs);\n\nint index = 0;\nforeach(string pathname in BundleList)\n{\n\n    // \u30d1\u30b9\u304b\u3089\u62e1\u5f35\u5b50\u3042\u308a\u30d5\u30a1\u30a4\u30eb\u540d\u306e\u307f\u3092\u62bd\u51fa\n    string fileNameLong = System.IO.Path.GetFileName(pathname);\n    Debug.Log(\"fileNameLong=\" + fileNameLong);\n\n    // \u6307\u5b9a\u30d1\u30b9\u3088\u308aPrefab\u3092\u53d6\u5f97\n    GameObject BundleObject = Resources.LoadAssetAtPath<GameObject>(\"Assets/Prefabs/\" + fileNameLong);\n    // Object\u30ea\u30b9\u30c8\u306b\u8ffd\u52a0\n    BundleObjectList.Add(BundleObject);\n\n    // \u30a2\u30bb\u30c3\u30c8\u30d0\u30f3\u30c9\u30eb\u51fa\u529b\u5148\u30d1\u30b9\n    string exportfilename = path + filename + index.ToString() + afterpath;\n    Debug.Log(\"BundleName=\" + exportfilename);\n\n    // \u30a2\u30bb\u30c3\u30c8\u30d0\u30f3\u30c9\u30eb\u4f5c\u6210\n    BuildPipeline.BuildAssetBundle(BundleObject, BundleObjectList.ToArray(), exportfilename,\n                                           BuildAssetBundleOptions.CollectDependencies\n                                           | BuildAssetBundleOptions.CompleteAssets\n                                           | BuildAssetBundleOptions.UncompressedAssetBundle);\n\n    // \u62e1\u5f35\u5b50\u3042\u308a\u30d5\u30a1\u30a4\u30eb\u540d\u304b\u3089\u30d5\u30a1\u30a4\u30eb\u540d\u306e\u307f\u3092\u62bd\u51fa\n    string fileName = System.IO.Path.GetFileNameWithoutExtension(fileNameLong);\n    Debug.Log(\"fileName=\" + fileName);\n    BundleObjectList.Clear();\n\n    index++;\n}\n```\n\n\n## \u25a0\u8907\u6570\u30a2\u30bb\u30c3\u30c8\u30d0\u30f3\u30c9\u30eb\u306e\u30ed\u30fc\u30c9\uff08\u975e\u5727\u7e2e\uff09\n```csharp:AssetBundleTestLoader.cs\npublic void CreateMultiFileLoad()\n{\n    // Prefabs\u30d5\u30a9\u30eb\u30c0\u5185\u304b\u3089Prefab\u62e1\u5f35\u5b50\u306e\u307f\u3092\u53d6\u5f97\n    string[] fs = System.IO.Directory.GetFiles(\"C://AssetBundleTest/StreamingAssets\", \"*.unity3d\");\n\n    List<string> BundleList = new List<string>();\n    List<Object> BundleObjectList = new List<Object>();\n    BundleList.AddRange(fs);\n\n    foreach (string pathname in BundleList)\n    {\n        AssetBundle NoCompress = AssetBundle.CreateFromFile(pathname);\n\n        //Object[] selection = NoCompress.LoadAll();\n\n        Instantiate(NoCompress.mainAsset);\n\n        NoCompress.Unload(false);\n    }\n}\n```\n\n# \u25cfUnity5.0.0\u306e\u6642\n\n\u30fbPrefab\u3092\u30a2\u30bb\u30c3\u30c8\u30d0\u30f3\u30c9\u30eb\u306b\u3057\u305f\u3044\u6642\u3001Inspector\u306e\u6700\u4e0b\u6bb5\u306b\u3042\u308bAssetBundle\u3092\u30af\u30ea\u30c3\u30af\u3057\u3066\u3001\u540d\u524d\u3092\u4ed8\u3051\u308b\n\u3000\u8a66\u3057\u306btestcanvas\u3068\u540d\u4ed8\u3051\u308b\n![Unity5_AssetBundle_1.png](https://qiita-image-store.s3.amazonaws.com/0/17904/4eee9c53-fa1a-8777-0acb-6ab5b008648f.png)\n\n\u30fb\u30a2\u30bb\u30c3\u30c8\u30d0\u30f3\u30c9\u30eb\u4f5c\u6210\u7528\u306e\u4e0b\u8a18\u30b9\u30af\u30ea\u30d7\u30c8\u3092\u66f8\u304f\n **\u4e8b\u524d\u306bStreamingAssets\u30d5\u30a9\u30eb\u30c0\u306e\u4e2d\u306bBuildOutPut\u30d5\u30a9\u30eb\u30c0\u3092\u4f5c\u6210\u3059\u308b\u5fc5\u8981\u3042\u308a**\n\n```csharp:ExportAssetBundles.cs\n\nusing UnityEngine;\nusing UnityEditor;\nusing System.Collections;\n\npublic class ExportAssetBundles : MonoBehaviour\n{\n\n    [MenuItem(\"Assets/Unity 5.x Build AssetBundle\")]\n    static void ExportResource_Unity5()\n    {\n        Debug.Log(\"Target=\" + EditorUserBuildSettings.activeBuildTarget.ToString());\n\n        // PlatForm\u540d\u3092\u305d\u306e\u307e\u307e\u51fa\u529b\u30d5\u30a9\u30eb\u30c0\u3068\u3057\u3066\u4f7f\u7528\u3059\u308b\u3002\n        string OutPutPath = Application.streamingAssetsPath + \"/\" + EditorUserBuildSettings.activeBuildTarget.ToString();\n\n        // \u6307\u5b9a\u30d5\u30a9\u30eb\u30c0\u5b58\u5728\u30c1\u30a7\u30c3\u30af\n        if (Directory.Exists(OutPutPath) == false )\n        {\n            Directory.CreateDirectory(OutPutPath);\n        }\n\n        // \u30d7\u30e9\u30c3\u30c8\u30d5\u30a9\u30fc\u30e0\u540d(Android\u30fbiOS)\u306e\u30de\u30cb\u30d5\u30a7\u30b9\u30c8\u306e\u30a2\u30bb\u30c3\u30c8\u30d0\u30f3\u30c9\u30eb\u304c\u4f5c\u3089\u308c\u308b\u3002\n        BuildPipeline.BuildAssetBundles(OutPutPath, 0, EditorUserBuildSettings.activeBuildTarget);\n        Debug.Log(\"ComPress End\");\n    }\n}\n```\n\n\u30fb\u30e1\u30cb\u30e5\u30fc\u3088\u308a\"Unity 5.x Build AssetBundle\"\u3092\u30af\u30ea\u30c3\u30af\n ![Unity5_AssetBundle_2.png](https://qiita-image-store.s3.amazonaws.com/0/17904/66a3fd75-da11-b866-f727-6a6a17d08100.png)\n\n\n\u30fbStreamingAssets\u306e\u4e0b\u306bBuildOutPut\u304c\u4f5c\u6210\u3055\u308c\u3066\u3044\u308b\u3002\n\n\u30fbBuildOutPut\u30d5\u30a9\u30eb\u30c0\u306e\u4e2d\u306b\u306f\u4e0b\u8a18\u30d5\u30a1\u30a4\u30eb\u304c\u4f5c\u6210\u3055\u308c\u308b\u3002\n\n\u3000**BuildOutPut**\n\u3000**BuildOutPut.meta**\n\u3000**BuildOutPut.manifest**\n\u3000**BuildOutPut.manifest.meta**\n\u3000**testcanvas**\n\u3000**testcanvas.meta**\n\u3000**testcanvas.manifest**\n\u3000**testcanvas.manifest.meta**\n\n\n**\u25a0\u30a2\u30bb\u30c3\u30c8\u30d0\u30f3\u30c9\u30eb\u3000\u30ed\u30fc\u30c9(CreateFromFile)**\n\n```csharp:AssetBundleLoad_Unity5.cs\nusing UnityEngine;\nusing System.Collections;\npublic class AssetBundleLoad_Unity5 : MonoBehaviour {\n    public void CreateFileAssetBundleFileLoad()\n    {\n        // \u30de\u30cb\u30d5\u30a7\u30b9\u30c8\u304c\u5165\u3063\u3066\u3044\u308b\u30d5\u30a1\u30a4\u30eb\u3092\u30d1\u30b9\u3067\u6307\u5b9a\n        string path = Application.streamingAssetsPath + \"/\" + \"BuildOutPut\" + \"/\";\n        // \u30de\u30cb\u30d5\u30a7\u30b9\u30c8\u306e\u30a2\u30bb\u30c3\u30c8\u30d0\u30f3\u30c9\u30eb\u3092\u4f5c\u6210\n        // (\u30de\u30cb\u30d5\u30a7\u30b9\u30c8\u306e\u30a2\u30bb\u30c3\u30c8\u30d0\u30f3\u30c9\u30eb\u306e\u4e2d\u306b\u30a2\u30bb\u30c3\u30c8\u30d0\u30f3\u30c9\u30eb\u5316\u3057\u305f\u30c7\u30fc\u30bf\u7fa4\u304c\u5165\u3063\u3066\u3044\u308b)\n        AssetBundle NoCompress = AssetBundle.CreateFromFile(path + \"BuildOutPut\");\n        string[] AssetList = NoCompress.GetAllAssetNames();\n        // \u30de\u30cb\u30d5\u30a7\u30b9\u30c8\u5168\u30a2\u30bb\u30c3\u30c8\u30d0\u30f3\u30c9\u30eb\u306e\u4e2d\u8eab\u3092\u30eb\u30fc\u30d7\n        foreach (string AssetNames in AssetList)\n        {\n            // \u30de\u30cb\u30d5\u30a7\u30b9\u30c8\u306e\u30a2\u30bb\u30c3\u30c8\u30d0\u30f3\u30c9\u30eb\u304b\u3089\u30de\u30cb\u30d5\u30a7\u30b9\u30c8\u30c7\u30fc\u30bf\u3092\u30ed\u30fc\u30c9\n            AssetBundleManifest manifest = NoCompress.LoadAsset<AssetBundleManifest>(AssetNames);\n            // \u30de\u30cb\u30d5\u30a7\u30b9\u30c8\u304b\u3089\u5168\u30de\u30cb\u30d5\u30a7\u30b9\u30c8\u540d\u3092\u53d6\u5f97\n            string[] bundleNames = manifest.GetAllAssetBundles();\n            // \u5168\u30de\u30cb\u30d5\u30a7\u30b9\u30c8\u5185\u3092\u30eb\u30fc\u30d7\n            foreach (string bundleName in bundleNames)\n            {\n                // \u6307\u5b9a\u30d1\u30b9\u306e\u30a2\u30bb\u30c3\u30c8\u30d0\u30f3\u30c9\u30eb\u3092\u53d6\u5f97\n                AssetBundle inBundleName = AssetBundle.CreateFromFile(path + bundleName);\n                // \u542b\u307e\u308c\u308b\u30a2\u30bb\u30c3\u30c8\u30d0\u30f3\u30c9\u30eb\u30ea\u30b9\u30c8\u3092\u53d6\u5f97\n                string[] inBundleList = inBundleName.GetAllAssetNames();\n                // \u6307\u5b9a\u30d1\u30b9\u306e\u5168\u30a2\u30bb\u30c3\u30c8\u30d0\u30f3\u30c9\u30eb\u5185\u3092\u30eb\u30fc\u30d7\n                foreach (string inBundleNameString in inBundleList)\n                {\n                    GameObject prefab = inBundleName.LoadAsset<GameObject>(inBundleNameString);\n                    Instantiate(prefab);\n                }\n            }\n        }\n    }\n}\n```\n\n**\u25a0\u30a2\u30bb\u30c3\u30c8\u30d0\u30f3\u30c9\u30eb\u3000\u30ed\u30fc\u30c9(CreateFromMemory)**\n\n```csharp:AssetBundleManager.cs\nusing UnityEngine;\nusing System.Collections;\nusing System.Collections.Generic;\nusing System.IO;\n\npublic class AssetBundleManager : MonoBehaviour {\n\n    /// <summary>\n    /// UnZip\u5b8c\u4e86\u5f8c\u306b\u30b3\u30fc\u30eb\u3055\u308c\u308b\n    /// </summary>\n    public void CreateFromMemoryLoad()\n    {\n        StartCoroutine(\"FromMemoryLoad\");\n    }\n\n    /// <summary>\n    /// UnZip\u3057\u305fByte\u914d\u5217\u304b\u3089AssetBundle\u3092\u53d6\u308a\u51fa\u3059\u3002\n    /// </summary>\n    /// <returns></returns>\n    IEnumerator FromMemoryLoad()\n    {\n        // Zip\u30d5\u30a1\u30a4\u30eb\u30ea\u30b9\u30c8\u5185\u3092\u30eb\u30fc\u30d7\n        foreach (DownLoadData downloaddata in SingletonDownLoadData.Instance.DownLoadDataList)\n        {\n            List<MemoryStream> UnZipDataList = downloaddata.UnZipDataList;\n            List<string> UnZipFileList = downloaddata.FileNameList;\n\n            int test = 0;\n            // \u89e3\u51cd\u3057\u305fZip\u30d5\u30a1\u30a4\u30eb\u30ea\u30b9\u30c8\u5185\u3092\u30eb\u30fc\u30d7\n            foreach(MemoryStream m_stream in UnZipDataList )\n            {\n                Debug.Log(\"test=\" + test.ToString());\n                AssetBundleCreateRequest assetBundleCreateRequest = AssetBundle.CreateFromMemory(m_stream.GetBuffer());\n\n                // AssetBundleCreateRequest\u306e\u5b8c\u4e86\u5f85\u3061\n                yield return StartCoroutine(WaitBundleRequest(assetBundleCreateRequest));\n\n                AssetBundle assetBundle = assetBundleCreateRequest.assetBundle;\n                if (assetBundle != null)\n                {\n                    string[] AssetList = assetBundle.GetAllAssetNames();\n                    // \u30de\u30cb\u30d5\u30a7\u30b9\u30c8\u5168\u30a2\u30bb\u30c3\u30c8\u30d0\u30f3\u30c9\u30eb\u306e\u4e2d\u8eab\u3092\u30eb\u30fc\u30d7\n                    foreach (string AssetNames in AssetList)\n                    {\n                        // \u30de\u30cb\u30d5\u30a7\u30b9\u30c8\u306e\u30a2\u30bb\u30c3\u30c8\u30d0\u30f3\u30c9\u30eb\u304b\u3089\u30de\u30cb\u30d5\u30a7\u30b9\u30c8\u30c7\u30fc\u30bf\u3092\u30ed\u30fc\u30c9\n                        AssetBundleManifest manifest = assetBundle.LoadAsset<AssetBundleManifest>(AssetNames);\n                        // \u30de\u30cb\u30d5\u30a7\u30b9\u30c8\u304b\u3089\u5168\u30d0\u30f3\u30c9\u30eb\u540d\u3092\u53d6\u5f97\n                        string[] bundleNames = manifest.GetAllAssetBundles();\n\n                        // \u6307\u5b9a\u30de\u30cb\u30d5\u30a7\u30b9\u30c8\u5185\u3092\u30eb\u30fc\u30d7\n                        foreach (string bundleName in bundleNames)\n                        {\n                            int i = 0;\n                            AssetBundleCreateRequest TargetAssetBundleCreateRequest = new AssetBundleCreateRequest();\n                            foreach (string filename in UnZipFileList)\n                            {\n                                if (bundleName == filename)\n                                {\n                                    TargetAssetBundleCreateRequest = AssetBundle.CreateFromMemory(UnZipDataList.ToArray()[i].GetBuffer());\n                                    break;\n                                }\n                                i++;\n                            }\n\n                            // \u30bf\u30fc\u30b2\u30c3\u30c8\u3068\u306a\u308bAssetBundleCreateRequest\u306e\u5b8c\u4e86\u5f85\u3061\n                            yield return StartCoroutine(WaitBundleRequest(TargetAssetBundleCreateRequest));\n                            // \u6307\u5b9a\u30c7\u30fc\u30bf\u306e\u30a2\u30bb\u30c3\u30c8\u30d0\u30f3\u30c9\u30eb\u3092\u53d6\u5f97\n                            AssetBundle TargetAssetBundle = TargetAssetBundleCreateRequest.assetBundle;\n\n                            // \u542b\u307e\u308c\u308b\u30a2\u30bb\u30c3\u30c8\u30d0\u30f3\u30c9\u30eb\u30ea\u30b9\u30c8\u3092\u53d6\u5f97\n                            string[] inBundleList = TargetAssetBundle.GetAllAssetNames();\n                            // \u6307\u5b9a\u30c7\u30fc\u30bf\u306e\u5168\u30a2\u30bb\u30c3\u30c8\u30d0\u30f3\u30c9\u30eb\u5185\u3092\u30eb\u30fc\u30d7\n                            foreach (string inBundleNameString in inBundleList)\n                            {\n                                GameObject prefab = TargetAssetBundle.LoadAsset<GameObject>(inBundleNameString);\n                                Instantiate(prefab);\n                            }\n                        }\n                    }\n                }\n                test++;\n            }\n        }\n    }\n\n    /// <summary>\n    /// AssetBundleCreateRequest\u306eisDone\u3092\u5f85\u3064\n    /// </summary>\n    /// <returns></returns>\n    IEnumerator WaitBundleRequest(AssetBundleCreateRequest GetRequest)\n    {\n        while (GetRequest.isDone == false)\n        {\n            yield return 0;\n        }\n    }\n}\n```\n\n\n\n\n\n#**\u25a0 Unity5.1.0f3 \u30a2\u30bb\u30c3\u30c8\u30d0\u30f3\u30c9\u30eb\u4f5c\u6210\uff0bGZip\uff0bTar**\n\n```\nusing UnityEngine;\nusing UnityEditor;\nusing System.Collections;\nusing System.Collections.Generic;\nusing Ionic.Zlib;\nusing System.IO;\nusing System.Text;\nusing System;\nusing ICSharpCode.SharpZipLib.Tar;\n```\n\n```\n    [MenuItem(\"Assets/AssetBundle/Export_Android\")]\n    static void Export_Android_AssetBundle()\n    {\n        ExportAllAssetBundleIntoAllFile(BuildTarget.Android);\n    }\n\n    [MenuItem(\"Assets/AssetBundle/Export_iOS\")]\n    static void Export_iPhone_AssetBundle()\n    {\n        ExportAllAssetBundleIntoAllFile(BuildTarget.iOS);\n\n    }\n\n\n    static void ExportAllAssetBundleIntoAllFile(BuildTarget Target)\n    {\n        Debug.Log(\"Target=\" + Target.ToString());\n\n        // \u89aa\u30c7\u30a3\u30ec\u30af\u30c8\u30ea+AssetBundle\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\n        string strCurrent = System.IO.Directory.GetCurrentDirectory() + \"/\" + \"AssetBundle\";\n\n        // PlatForm\u540d\u3092\u305d\u306e\u307e\u307e\u51fa\u529b\u30d5\u30a9\u30eb\u30c0\u3068\u3057\u3066\u4f7f\u7528\u3059\u308b\u3002\n        string OutPutPath = strCurrent + \"/\" + Target;\n\n\n        DirectoryInfo di = new DirectoryInfo(OutPutPath);\n        // \u6307\u5b9a\u30d5\u30a9\u30eb\u30c0\u5b58\u5728\u30c1\u30a7\u30c3\u30af\n        if (Directory.Exists(OutPutPath) == true)\n        {\n            //\u30d5\u30a9\u30eb\u30c0\u4ee5\u4e0b\u306e\u3059\u3079\u3066\u306e\u30d5\u30a1\u30a4\u30eb\u3001\u30d5\u30a9\u30eb\u30c0\u306e\u5c5e\u6027\u3092\u524a\u9664\n            RemoveReadonlyAttribute(di);\n\n            //\u30d5\u30a9\u30eb\u30c0\u3092\u6839\u3053\u305d\u304e\u524a\u9664\n            di.Delete(true);            // \u5b58\u5728\u3059\u308c\u3070\u524a\u9664\n        }\n        // \u30d5\u30a9\u30eb\u30c0\u3092\u4f5c\u308a\u76f4\u3059\u304b\u65b0\u898f\u4f5c\u6210\n        Directory.CreateDirectory(OutPutPath);\n\n        // \u30d7\u30e9\u30c3\u30c8\u30d5\u30a9\u30fc\u30e0\u540d(Android\u30fbiOS)\u306e\u30de\u30cb\u30d5\u30a7\u30b9\u30c8\u306e\u30a2\u30bb\u30c3\u30c8\u30d0\u30f3\u30c9\u30eb\u304c\u4f5c\u3089\u308c\u308b\u3002\n        BuildPipeline.BuildAssetBundles(OutPutPath, BuildAssetBundleOptions.UncompressedAssetBundle, Target);\n        Debug.Log(\"Export End\");\n\n        // \u62e1\u5f35\u5b50\u304c\u30de\u30cb\u30d5\u30a7\u30b9\u30c8\u306e\u3082\u306e\u3092\u524a\u9664\n        foreach (string file in Directory.GetFiles(OutPutPath, \"*.manifest\"))\n        {\n            File.Delete(file);\n        }\n\n\n        // Gzip\u30d5\u30a9\u30eb\u30c0\u3092\u4f5c\u6210\n        Directory.CreateDirectory(OutPutPath + \"/Gzip\");\n\n        // HTTP\u30ea\u30b9\u30c8\u306e\u4f5c\u6210\n        Encoding sjisEnc = Encoding.GetEncoding(\"Shift_JIS\");\n\n\n        // \u5168\u30d5\u30a1\u30a4\u30eb\u3092Gzip\u5727\u7e2e\n        foreach (string file in Directory.GetFiles(OutPutPath, \"*.*\"))\n        {\n            string filename = System.IO.Path.GetFileNameWithoutExtension(file);\n\n            // \u51fa\u529b\u30d5\u30a1\u30a4\u30eb\u306e\u62e1\u5f35\u5b50\u306f\u300c.gz\u300d\n            string outFile = OutPutPath + \"/Gzip/\" + filename  + \".gz\";\n\n            int num;\n            byte[] buf = new byte[1024]; // 1Kbytes\u305a\u3064\u51e6\u7406\u3059\u308b\n\n            FileStream inStream // \u5165\u529b\u30b9\u30c8\u30ea\u30fc\u30e0\n              = new FileStream(file, FileMode.Open, FileAccess.Read);\n\n            // \u30d5\u30a1\u30a4\u30eb\u30b5\u30a4\u30ba\u3092\u30d0\u30a4\u30c8\u306b\u5909\u63db\n            byte[] filesizehedder = new byte[8];\n            filesizehedder = BitConverter.GetBytes(inStream.Length);\n\n\n            FileStream outStream // \u51fa\u529b\u30b9\u30c8\u30ea\u30fc\u30e0\n              = new FileStream(outFile, FileMode.Create);\n\n            GZipStream compStream // \u5727\u7e2e\u30b9\u30c8\u30ea\u30fc\u30e0\n              = new GZipStream(\n                outStream,  // \u51fa\u529b\u5148\u3068\u306a\u308b\u30b9\u30c8\u30ea\u30fc\u30e0\u3092\u6307\u5b9a\n                CompressionMode.Compress); // \u5727\u7e2e\u3092\u6307\u5b9a\n\n            using (inStream)\n            using (outStream)\n            using (compStream)\n            {\n                //compStream.Write(filesizehedder, 0, 8);\n\n                while ((num = inStream.Read(buf, 0, buf.Length)) > 0)\n                {\n                    compStream.Write(buf, 0, num);\n                }\n            }\n        }\n\n\n\n        // Tar\u30d5\u30a9\u30eb\u30c0\u3092\u4f5c\u6210\n        Directory.CreateDirectory(OutPutPath + \"/Gzip/Tar\");\n\n        StreamWriter writer =\n          new StreamWriter(OutPutPath + \"/Gzip/Tar/httplist.txt\", true, sjisEnc);\n        // \u5168\u30d5\u30a1\u30a4\u30ebGzip\u3092Tar\u30a2\u30fc\u30ab\u30a4\u30d6\u306b\u3059\u308b\n        foreach (string file in Directory.GetFiles(OutPutPath + \"/Gzip\", \"*.*\"))\n        {\n            string filename = System.IO.Path.GetFileNameWithoutExtension(file);\n            // \u51fa\u529b\u30d5\u30a1\u30a4\u30eb\u306e\u62e1\u5f35\u5b50\u306f\u300c.tar\u300d\n            string outFile = OutPutPath + \"/Gzip/Tar/\" + filename + \".tar\";\n\n            Debug.Log(\"filename=\" + filename);\n            Debug.Log(\"outFile=\" + outFile);\n            // Tar\u30d5\u30a1\u30a4\u30eb\u4f5c\u6210\n            CreateTar(outFile, file);\n            // HTTP\u30ea\u30b9\u30c8\u306b\u66f8\u304d\u8fbc\u307f\n            writer.WriteLine(\"DownLoadUrlAdd(\" + \"\\\"\" + \"http://999.99.99.999/Tar/\" + Path.GetFileName(outFile) + \"\\\"\" + \");\");\n            Debug.Log(\"WriteLine\");\n\n        }\n        writer.Close();\n\n        Debug.Log(\"HttpList End\");\n\n    }\n\n    /// <summary>\n    /// Tar\u30d5\u30a1\u30a4\u30eb\u4f5c\u6210\n    /// </summary>\n    /// <param name=\"outputTarFilename\">Output .tar.gz file</param>\n    /// <param name=\"sourceDirectory\">Input directory containing files to be added to GZipped tar archive</param>\n    private static void CreateTar(string outputTarFilename, string readfilename)\n    {\n        using (FileStream fs = new FileStream(outputTarFilename, FileMode.Create, FileAccess.Write, FileShare.None))\n        using (TarArchive tarArchive = TarArchive.CreateOutputTarArchive(fs))\n        {\n            TarEntry tarEntry = TarEntry.CreateEntryFromFile(readfilename);\n            tarArchive.WriteEntry(tarEntry, true);\n        }\n    }\n```\n", "tags": ["Unity3D"]}