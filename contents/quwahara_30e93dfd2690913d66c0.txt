{"context": "\n\n\u306f\u3058\u3081\u306b\n\u4ee5\u524d\u306e\u8a18\u4e8b\u3067\u69cb\u6587\u89e3\u6790\u3092\u5b9f\u88c5\u3057\u307e\u3057\u305f\u3002\n\u3064\u3044\u3067\u306b\u305d\u308c\u3092\u4f7f\u3063\u3066\u3001\u5358\u7d14\u306a\u30a4\u30f3\u30bf\u30d7\u30ea\u30bf\u3092\u5b9f\u88c5\u3057\u3066\u307f\u305f\u3044\u3068\u304a\u3082\u3044\u307e\u3059\u3002\n\n\u30a4\u30f3\u30bf\u30d7\u30ea\u30bf\u3067\u3084\u308a\u305f\u3044\u3053\u3068\n\u5b9f\u88c5\u306b\u3042\u305f\u308a\u3084\u308a\u305f\u3044\u3053\u3068\u3092\u78ba\u8a8d\u3057\u307e\u3059\u3002\n\u30a4\u30f3\u30bf\u30d7\u30ea\u30bf\u3067\u3084\u308a\u305f\u3044\u3053\u3068\u306f\u3001\u30d7\u30ed\u30b0\u30e9\u30e0\u306b\u306a\u3063\u3066\u3044\u308b\u6587\u5b57\u5217\u3092\u8a08\u7b97\u3059\u308b\u3053\u3068\u3067\u3059\u3002\n\u4e0b\u306e\u5f0f\u3092\u4f8b\u306b\u8003\u3048\u308b\u3068\u3001\u6700\u7d42\u7684\u306ba\u306b23\u304c\u4ee3\u5165\u3055\u308c\u305f\u72b6\u614b\u306b\u306a\u308b\u3053\u3068\u3092\u76ee\u6307\u3057\u307e\u3059\u3002\na = 3 + 4 * 5\n\n\n\u8a08\u7b97\u306e\u4ed5\u65b9\n\u3067\u306f\u8a08\u7b97\u306e\u4ed5\u65b9\u3092\u8003\u3048\u307e\u3059\u3002\n\u524d\u56de\u306e\u8a18\u4e8b\u3067\u5f0f\u3092\u69cb\u6587\u89e3\u6790\u3057\u307e\u3057\u305f\u3002\n\u69cb\u6587\u89e3\u6790\u3055\u308c\u305f\u5f0f\u306f\u3001\u6f14\u7b97\u5b50\u30c8\u30fc\u30af\u30f3\u306eleft\u3068right\u306b\u3001\u305d\u306e\u6f14\u7b97\u5b50\u3067\u8a08\u7b97\u3055\u308c\u308b\u5024\u3092\u6301\u3064\u3088\u3046\u306b\u89e3\u6790\u3055\u308c\u307e\u3057\u305f\u3002\n\u4f8b\u3048\u3070\u5f0f6 - 7\u306a\u3089\u3001\u6f14\u7b97\u5b50\u30c8\u30fc\u30af\u30f3\u304c-\u3067\u3001left\u306b6\u3001right\u306b7\u3092\u6301\u3064\u3068\u3044\u3063\u305f\u5177\u5408\u3067\u3059\u3002\n\u307e\u305fleft\u3084right\u306b\u306f\u5024\u3060\u3051\u3067\u306a\u304f\u3001\u8a08\u7b97\u9806\u5e8f\u3067\u5148\u306b\u304f\u308b\u5f0f\u3082\u6301\u3064\u3053\u3068\u304c\u3042\u308a\u307e\u3057\u305f\u3002\n\u4f8b\u3048\u3070\u5f0f3 + 4 * 5\u306a\u3089\u3001\u6f14\u7b97\u5b50\u30c8\u30fc\u30af\u30f3\u304c+\u3067\u3001left\u306b3\u3001right\u306b4 * 5\u3092\u6301\u3061\u307e\u3059\u3002\n\u3053\u306e\u3088\u3046\u306a\u30c7\u30fc\u30bf\u69cb\u9020\u306b\u306a\u3063\u3066\u3044\u308b\u306e\u3067\u8a08\u7b97\u3092\u3059\u308b\u306b\u306f\u3001\u6f14\u7b97\u5b50\u30c8\u30fc\u30af\u30f3\u306eleft\u3084right\u3092\u9806\u306b\u4e0b\u3063\u3066\u3044\u304d\u3001\n\u672b\u7aef\u306e\u6f14\u7b97\u5b50\u306b\u305f\u3069\u308a\u3064\u3044\u305f\u3089\u305d\u308c\u3092\u8a08\u7b97\u3057\u307e\u3059\u3002\n\u305d\u306e\u8a08\u7b97\u7d50\u679c\u3092\u3082\u3063\u3066\u30011\u3064\u4e0a\u306e\u6f14\u7b97\u5b50\u306e\u8a08\u7b97\u3092\u3057\u307e\u3059\u3002\n\u3053\u306e\u52d5\u4f5c\u30921\u756a\u4e0a\u307e\u3067\u7e70\u308a\u8fd4\u3059\u3053\u3068\u3067\u3001\u8a08\u7b97\u304c\u3067\u304d\u307e\u3059\u3002\n\u5148\u306e\u4f8b\u306e\u5f0f3 + 4 * 5\u306a\u3089\u3070\u3001\u672b\u7aef\u306e\u6f14\u7b97\u5b50\u306f4 * 5\u306e*\u306a\u306e\u3067\u305d\u308c\u3092\u8a08\u7b97\u305720\u306b\u306a\u308a\u307e\u3059\u3002\n\u305d\u306e\u8a08\u7b97\u7d50\u679c\u3092\u6301\u3063\u30661\u3064\u4e0a\u306e\u6f14\u7b97\u5b50+\u3092\u8a08\u7b97\u3057\u307e\u3059\u3002\nleft\u304c3\u3001right\u304c\u8a08\u7b97\u7d50\u679c\u306e20\u306a\u306e\u3067\u3001\u8db3\u3057\u306623\u306b\u306a\u308a\u3001\u8a08\u7b97\u304c\u3067\u304d\u307e\u3057\u305f\u3002\n\nJava\u3067\u5b9f\u88c5\u3057\u3066\u307f\u308b\n\u5b9f\u88c5\u306b\u3046\u3064\u308a\u307e\u3059\u3002\n\u30a4\u30f3\u30bf\u30d7\u30ea\u30bf\u306e\u5b9f\u88c5\u3092\u90e8\u5206\u7684\u306b\u307f\u3066\u3044\u304d\u307e\u3059\u3002\n\u307e\u305a\u306f\u521d\u671f\u5316\u306e\u90e8\u5206\u3067\u3059\u3002\n\u69cb\u6587\u89e3\u6790\u3067\u89e3\u6790\u3055\u308c\u305f\u30c8\u30fc\u30af\u30f3\u30ea\u30b9\u30c8\u3092\u53d7\u3051\u3068\u308a\u307e\u3059\u3002\n\u3053\u306e\u30c8\u30fc\u30af\u30f3\u30ea\u30b9\u30c8\u3092\u8a08\u7b97\u3057\u307e\u3059\u3002\n\u307e\u305f\u30a4\u30f3\u30bf\u30d7\u30ea\u30bf\u306f\u5909\u6570\u306b\u5bfe\u5fdc\u3059\u308b\u306e\u3067\u3001\u5909\u6570\u540d\u3068\u305d\u306e\u5024\u3092\u4fdd\u6301\u3059\u308bMap\u3092\u6e96\u5099\u3057\u307e\u3059\u3002\n\nInterpreter.java\npublic class Interpreter {\n\n    public Map<String, Integer> variables;\n    List<Token> body;\n\n    public Interpreter init(List<Token> body) {\n        variables = new HashMap<>();\n        this.body = body;\n        return this;\n    }\n\n\n\u8a08\u7b97\u3092\u8d77\u52d5\u3059\u308b\u90e8\u5206\u306e\u8aac\u660e\u3067\u3059\u3002\nrun()\u306f\u3001\u5148\u306b\u6e21\u3055\u308c\u305f\u30c8\u30fc\u30af\u30f3\u30ea\u30b9\u30c8body\u306e\u8a08\u7b97\u3092\u3057\u3001\u8a08\u7b97\u7d50\u679c\u3092\u4fdd\u6301\u3057\u305f\u5909\u6570Map\u3092\u8fd4\u3057\u307e\u3059\u3002\n\nInterpreter.java\n    public Map<String, Integer> run() throws Exception {\n        body(body);\n        return variables;\n    }\n\n\n\u8a08\u7b97\u3059\u308b\u90e8\u5206\u306e\u8aac\u660e\u3067\u3059\u3002\nbody()\u306f\u3001\u5148\u306b\u6e21\u3055\u308c\u305f\u30c8\u30fc\u30af\u30f3\u30ea\u30b9\u30c8body\u304b\u3089\u5f0f1\u3064\u5206\u306e\u30c8\u30fc\u30af\u30f3\u3092\u3068\u308a\u3060\u3057\u3001\u5f0f\u3092\u51e6\u7406\u3059\u308bexpression()\u3078\u6e21\u3057\u307e\u3059\u3002\n\nInterpreter.java\n    public void body(List<Token> body) throws Exception {\n        for (Token exprs : body) {\n            expression(exprs);\n        }\n    }\n\n\nexpression()\u306f\u30c8\u30fc\u30af\u30f3\u306e\u610f\u5473\u306b\u3088\u3063\u3066\u3001\u305d\u308c\u305e\u308c\u3092\u51e6\u7406\u3059\u308b\u30e1\u30bd\u30c3\u30c9\u3092\u547c\u3073\u51fa\u3057\u3001\u305d\u306e\u7d50\u679c\u3092\u305d\u306e\u307e\u307e\u8fd4\u3057\u307e\u3059\u3002\n\nInterpreter.java\n    public Object expression(Token expr) throws Exception {\n        if (expr.kind.equals(\"digit\")) {\n            return digit(expr);\n        } else if (expr.kind.equals(\"variable\")) {\n            return var(expr);\n        } else if (expr.kind.equals(\"sign\") && expr.value.equals(\"=\")) {\n            return assign(expr);\n        } else if (expr.kind.equals(\"sign\")) {\n            return calc(expr);\n        } else {\n            throw new Exception(\"Expression error\");\n        }\n    }\n\n\ndigit()\u306f\u6570\u5024\u306e\u30c8\u30fc\u30af\u30f3\u3092\u53d7\u3051\u3068\u308a\u3001\u305d\u308c\u3092Integer\u306b\u3057\u307e\u3059\u3002\n\nInterpreter.java\n    public Integer digit(Token token) {\n        return Integer.decode(token.value);\n    }\n\n\nvar()\u306f\u5909\u6570\u306e\u30c8\u30fc\u30af\u30f3\u3092\u53d7\u3051\u3068\u308a\u5909\u6570\u540d\u306b\u3057\u307e\u3059\u3002\n\u5909\u6570\u540d\u304c\u5909\u6570Map\u306b\u672a\u767b\u9332\u306a\u3089\u3001\u5024\u30920\u3067\u767b\u9332\u3057\u307e\u3059\u3002\n\nInterpreter.java\n    public Object var(Token token) {\n        String name = token.value;\n        if (!variables.containsKey(name)) {\n            variables.put(name, 0);\n        }\n        return name;\n    }\n\n\nassign()\u306f\u5909\u6570\u3078\u5024\u3092\u4ee3\u5165\u3057\u307e\u3059\u3002\n\nInterpreter.java\n    public String assign(Token expr) throws Exception {\n        String name = variable(expression(expr.left));\n        Integer value = value(expression(expr.right));\n        variables.put(name, value);\n        return name;\n    }\n\n\nvariable()\u306fassign()\u306e\u51e6\u7406\u3067\u3001expr.left\u306e\u7d50\u679c\u304c\u5909\u6570\u540d\u3067\u3042\u308b\u3053\u3068\u3092\u78ba\u304b\u3081\u307e\u3059\u3002\n\nInterpreter.java\n    public String variable(Object value) throws Exception {\n        if (value instanceof String) {\n            return (String) value;\n        } else {\n            throw new Exception(\"left value error\");\n        }\n    }\n\n\nvalue()\u306fassign()\u306e\u51e6\u7406\u306eexpr.right\u3084\u3001\u3042\u3068\u306e\u8aac\u660e\u3067\u3067\u3066\u304f\u308b\u56db\u5247\u6f14\u7b97\u306e\u51e6\u7406\u3067\u3001\u8a08\u7b97\u3067\u304d\u308b\u6570\u5024\u306b\u4ed5\u7acb\u3066\u307e\u3059\u3002\n\u5f15\u6570value\u304cInteger\u306a\u3089\u3001\u305d\u306e\u307e\u307e\u8fd4\u3057\u307e\u3059\u3002String\u306a\u3089\u5909\u6570Map\u304b\u3089\u5024\u3092\u53d6\u308a\u51fa\u3057\u3066\u8fd4\u3057\u307e\u3059\u3002\n\nInterpreter.java\n    public Integer value(Object value) throws Exception {\n        if (value instanceof Integer) {\n            return (Integer) value;\n        } else if (value instanceof String) {\n            return variables.get((String) value);\n        } else {\n            throw new Exception(\"right value error\");\n        }\n    }\n\n\ncalc()\u306f\u56db\u5247\u6f14\u7b97\u3092\u3057\u307e\u3059\u3002\n\nInterpreter.java\n    public Object calc(Token expr) throws Exception {\n        Integer left = value(expression(expr.left));\n        Integer right = value(expression(expr.right));\n        if (expr.value.equals(\"+\")) {\n            return left + right;\n        } else if (expr.value.equals(\"-\")) {\n            return left - right;\n        } else if (expr.value.equals(\"*\")) {\n            return left * right;\n        } else if (expr.value.equals(\"/\")) {\n            return left / right;\n        } else {\n            throw new Exception(\"Unknown sign for Calc\");\n        }\n    }\n\n\n\u4ee5\u4e0a\u306e\u5b9f\u88c5\u3092\u4f7f\u3063\u3066\u3001\u4f8b\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u306b\u306a\u3063\u3066\u3044\u308b\u6587\u5b57\u5217\na = 3 + 4 * 5\n\n\u3092\u8a08\u7b97\u3057\u3001\u5909\u6570\u3068\u305d\u306e\u5024\u3092\u6a19\u6e96\u51fa\u529b\u3078\u30d7\u30ea\u30f3\u30c8\u3057\u307e\u3059\u3002\n\nInterpreter.java\n    public static void main(String[] args) throws Exception {\n        String text = \"a = 3 + 4 * 5\";\n        List<Token> tokens = new Lexer().init(text).tokenize();\n        List<Token> blk = new Parser().init(tokens).block();\n        Map<String, Integer> variables = new Interpreter().init(blk).run();\n        for (Map.Entry<String, Integer> variable : variables.entrySet()) {\n            System.out.println(variable.getKey() + \" \" + variable.getValue());\n        }\n        // --> a 23\n    }\n}\n\n\n\u5b9f\u88c5\u306f\u4ee5\u4e0a\u3067\u3059\u3002\n\u3042\u308a\u304c\u304c\u3068\u3046\u3054\u3056\u3044\u307e\u3057\u305f\u3002\n\n\u304a\u308f\u308a\u306b\n\u30bd\u30fc\u30b9\u306f\u3053\u3061\u3089\u3067\u516c\u958b\u3057\u3066\u3044\u307e\u3059\u3002\nCalc\nhttps://github.com/quwahara/Calc/tree/article-3-interpreter/Calc/src/main/java\n\u7d9a\u304d\u306e\u8a18\u4e8b\u304c\u3042\u308a\u307e\u3059\u3002\n\u30a4\u30f3\u30bf\u30d7\u30ea\u30bf\u306bprintln\u3092\u8ffd\u52a0\u3059\u308b\nhttp://qiita.com/quwahara/items/82067b00cbe1cb974e4a\n\u6700\u5f8c\u306b\u3001Interpreter\u30af\u30e9\u30b9\u3092\u307e\u3068\u3081\u305f\u3082\u306e\u3082\u3042\u3052\u3066\u304a\u304d\u307e\u3059\u3002\n\nInterpreter.java\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\n\npublic class Interpreter {\n\n    public Map<String, Integer> variables;\n    List<Token> body;\n\n    public Interpreter init(List<Token> body) {\n        variables = new HashMap<>();\n        this.body = body;\n        return this;\n    }\n\n    public Map<String, Integer> run() throws Exception {\n        body(body);\n        return variables;\n    }\n\n    public void body(List<Token> body) throws Exception {\n        for (Token exprs : body) {\n            expression(exprs);\n        }\n    }\n\n    public Object expression(Token expr) throws Exception {\n        if (expr.kind.equals(\"digit\")) {\n            return digit(expr);\n        } else if (expr.kind.equals(\"variable\")) {\n            return var(expr);\n        } else if (expr.kind.equals(\"sign\") && expr.value.equals(\"=\")) {\n            return assign(expr);\n        } else if (expr.kind.equals(\"sign\")) {\n            return calc(expr);\n        } else {\n            throw new Exception(\"Expression error\");\n        }\n    }\n\n    public Integer digit(Token token) {\n        return Integer.decode(token.value);\n    }\n\n    public Object var(Token token) {\n        String name = token.value;\n        if (!variables.containsKey(name)) {\n            variables.put(name, 0);\n        }\n        return name;\n    }\n\n    public String assign(Token expr) throws Exception {\n        String name = variable(expression(expr.left));\n        Integer value = value(expression(expr.right));\n        variables.put(name, value);\n        return name;\n    }\n\n    public String variable(Object value) throws Exception {\n        if (value instanceof String) {\n            return (String) value;\n        } else {\n            throw new Exception(\"left value error\");\n        }\n    }\n\n    public Integer value(Object value) throws Exception {\n        if (value instanceof Integer) {\n            return (Integer) value;\n        } else if (value instanceof String) {\n            return variables.get((String) value);\n        } else {\n            throw new Exception(\"right value error\");\n        }\n    }\n\n    public Object calc(Token expr) throws Exception {\n        Integer left = value(expression(expr.left));\n        Integer right = value(expression(expr.right));\n        if (expr.value.equals(\"+\")) {\n            return left + right;\n        } else if (expr.value.equals(\"-\")) {\n            return left - right;\n        } else if (expr.value.equals(\"*\")) {\n            return left * right;\n        } else if (expr.value.equals(\"/\")) {\n            return left / right;\n        } else {\n            throw new Exception(\"Unknown sign for Calc\");\n        }\n    }\n\n    public static void main(String[] args) throws Exception {\n        String text = \"a = 3 + 4 * 5\";\n        List<Token> tokens = new Lexer().init(text).tokenize();\n        List<Token> blk = new Parser().init(tokens).block();\n        Map<String, Integer> variables = new Interpreter().init(blk).run();\n        for (Map.Entry<String, Integer> variable : variables.entrySet()) {\n            System.out.println(variable.getKey() + \" \" + variable.getValue());\n        }\n        // --> a 23\n    }\n}\n\n\n# \u306f\u3058\u3081\u306b\n\n\u4ee5\u524d\u306e\u8a18\u4e8b\u3067[\u69cb\u6587\u89e3\u6790\u3092\u5b9f\u88c5](http://qiita.com/quwahara/items/9bf468ff4286b28d2a24)\u3057\u307e\u3057\u305f\u3002\n\u3064\u3044\u3067\u306b\u305d\u308c\u3092\u4f7f\u3063\u3066\u3001\u5358\u7d14\u306a\u30a4\u30f3\u30bf\u30d7\u30ea\u30bf\u3092\u5b9f\u88c5\u3057\u3066\u307f\u305f\u3044\u3068\u304a\u3082\u3044\u307e\u3059\u3002\n\n# \u30a4\u30f3\u30bf\u30d7\u30ea\u30bf\u3067\u3084\u308a\u305f\u3044\u3053\u3068\n\n\u5b9f\u88c5\u306b\u3042\u305f\u308a\u3084\u308a\u305f\u3044\u3053\u3068\u3092\u78ba\u8a8d\u3057\u307e\u3059\u3002\n\u30a4\u30f3\u30bf\u30d7\u30ea\u30bf\u3067\u3084\u308a\u305f\u3044\u3053\u3068\u306f\u3001\u30d7\u30ed\u30b0\u30e9\u30e0\u306b\u306a\u3063\u3066\u3044\u308b\u6587\u5b57\u5217\u3092\u8a08\u7b97\u3059\u308b\u3053\u3068\u3067\u3059\u3002\n\u4e0b\u306e\u5f0f\u3092\u4f8b\u306b\u8003\u3048\u308b\u3068\u3001\u6700\u7d42\u7684\u306b`a`\u306b`23`\u304c\u4ee3\u5165\u3055\u308c\u305f\u72b6\u614b\u306b\u306a\u308b\u3053\u3068\u3092\u76ee\u6307\u3057\u307e\u3059\u3002\n\n```JS\na = 3 + 4 * 5\n```\n\n# \u8a08\u7b97\u306e\u4ed5\u65b9\n\n\u3067\u306f\u8a08\u7b97\u306e\u4ed5\u65b9\u3092\u8003\u3048\u307e\u3059\u3002\n[\u524d\u56de\u306e\u8a18\u4e8b](http://qiita.com/quwahara/items/9bf468ff4286b28d2a24)\u3067\u5f0f\u3092\u69cb\u6587\u89e3\u6790\u3057\u307e\u3057\u305f\u3002\n\u69cb\u6587\u89e3\u6790\u3055\u308c\u305f\u5f0f\u306f\u3001\u6f14\u7b97\u5b50\u30c8\u30fc\u30af\u30f3\u306e`left`\u3068`right`\u306b\u3001\u305d\u306e\u6f14\u7b97\u5b50\u3067\u8a08\u7b97\u3055\u308c\u308b\u5024\u3092\u6301\u3064\u3088\u3046\u306b\u89e3\u6790\u3055\u308c\u307e\u3057\u305f\u3002\n\u4f8b\u3048\u3070\u5f0f`6 - 7`\u306a\u3089\u3001\u6f14\u7b97\u5b50\u30c8\u30fc\u30af\u30f3\u304c`-`\u3067\u3001`left`\u306b`6`\u3001`right`\u306b`7`\u3092\u6301\u3064\u3068\u3044\u3063\u305f\u5177\u5408\u3067\u3059\u3002\n\u307e\u305f`left`\u3084`right`\u306b\u306f\u5024\u3060\u3051\u3067\u306a\u304f\u3001\u8a08\u7b97\u9806\u5e8f\u3067\u5148\u306b\u304f\u308b\u5f0f\u3082\u6301\u3064\u3053\u3068\u304c\u3042\u308a\u307e\u3057\u305f\u3002\n\u4f8b\u3048\u3070\u5f0f`3 + 4 * 5`\u306a\u3089\u3001\u6f14\u7b97\u5b50\u30c8\u30fc\u30af\u30f3\u304c`+`\u3067\u3001`left`\u306b`3`\u3001`right`\u306b`4 * 5`\u3092\u6301\u3061\u307e\u3059\u3002\n\u3053\u306e\u3088\u3046\u306a\u30c7\u30fc\u30bf\u69cb\u9020\u306b\u306a\u3063\u3066\u3044\u308b\u306e\u3067\u8a08\u7b97\u3092\u3059\u308b\u306b\u306f\u3001\u6f14\u7b97\u5b50\u30c8\u30fc\u30af\u30f3\u306e`left`\u3084`right`\u3092\u9806\u306b\u4e0b\u3063\u3066\u3044\u304d\u3001\n\u672b\u7aef\u306e\u6f14\u7b97\u5b50\u306b\u305f\u3069\u308a\u3064\u3044\u305f\u3089\u305d\u308c\u3092\u8a08\u7b97\u3057\u307e\u3059\u3002\n\u305d\u306e\u8a08\u7b97\u7d50\u679c\u3092\u3082\u3063\u3066\u30011\u3064\u4e0a\u306e\u6f14\u7b97\u5b50\u306e\u8a08\u7b97\u3092\u3057\u307e\u3059\u3002\n\u3053\u306e\u52d5\u4f5c\u30921\u756a\u4e0a\u307e\u3067\u7e70\u308a\u8fd4\u3059\u3053\u3068\u3067\u3001\u8a08\u7b97\u304c\u3067\u304d\u307e\u3059\u3002\n\u5148\u306e\u4f8b\u306e\u5f0f`3 + 4 * 5`\u306a\u3089\u3070\u3001\u672b\u7aef\u306e\u6f14\u7b97\u5b50\u306f`4 * 5`\u306e`*`\u306a\u306e\u3067\u305d\u308c\u3092\u8a08\u7b97\u3057`20`\u306b\u306a\u308a\u307e\u3059\u3002\n\u305d\u306e\u8a08\u7b97\u7d50\u679c\u3092\u6301\u3063\u30661\u3064\u4e0a\u306e\u6f14\u7b97\u5b50`+`\u3092\u8a08\u7b97\u3057\u307e\u3059\u3002\n`left`\u304c`3`\u3001`right`\u304c\u8a08\u7b97\u7d50\u679c\u306e`20`\u306a\u306e\u3067\u3001\u8db3\u3057\u3066`23`\u306b\u306a\u308a\u3001\u8a08\u7b97\u304c\u3067\u304d\u307e\u3057\u305f\u3002\n\n# Java\u3067\u5b9f\u88c5\u3057\u3066\u307f\u308b\n\n\u5b9f\u88c5\u306b\u3046\u3064\u308a\u307e\u3059\u3002\n\u30a4\u30f3\u30bf\u30d7\u30ea\u30bf\u306e\u5b9f\u88c5\u3092\u90e8\u5206\u7684\u306b\u307f\u3066\u3044\u304d\u307e\u3059\u3002\n\n\u307e\u305a\u306f\u521d\u671f\u5316\u306e\u90e8\u5206\u3067\u3059\u3002\n\u69cb\u6587\u89e3\u6790\u3067\u89e3\u6790\u3055\u308c\u305f\u30c8\u30fc\u30af\u30f3\u30ea\u30b9\u30c8\u3092\u53d7\u3051\u3068\u308a\u307e\u3059\u3002\n\u3053\u306e\u30c8\u30fc\u30af\u30f3\u30ea\u30b9\u30c8\u3092\u8a08\u7b97\u3057\u307e\u3059\u3002\n\u307e\u305f\u30a4\u30f3\u30bf\u30d7\u30ea\u30bf\u306f\u5909\u6570\u306b\u5bfe\u5fdc\u3059\u308b\u306e\u3067\u3001\u5909\u6570\u540d\u3068\u305d\u306e\u5024\u3092\u4fdd\u6301\u3059\u308bMap\u3092\u6e96\u5099\u3057\u307e\u3059\u3002\n\n```Java:Interpreter.java\npublic class Interpreter {\n    \n    public Map<String, Integer> variables;\n    List<Token> body;\n    \n    public Interpreter init(List<Token> body) {\n        variables = new HashMap<>();\n        this.body = body;\n        return this;\n    }\n```\n\n\u8a08\u7b97\u3092\u8d77\u52d5\u3059\u308b\u90e8\u5206\u306e\u8aac\u660e\u3067\u3059\u3002\n`run()`\u306f\u3001\u5148\u306b\u6e21\u3055\u308c\u305f\u30c8\u30fc\u30af\u30f3\u30ea\u30b9\u30c8`body`\u306e\u8a08\u7b97\u3092\u3057\u3001\u8a08\u7b97\u7d50\u679c\u3092\u4fdd\u6301\u3057\u305f\u5909\u6570Map\u3092\u8fd4\u3057\u307e\u3059\u3002\n\n```Java:Interpreter.java\n    public Map<String, Integer> run() throws Exception {\n        body(body);\n        return variables;\n    }\n```\n\n\u8a08\u7b97\u3059\u308b\u90e8\u5206\u306e\u8aac\u660e\u3067\u3059\u3002\n`body()`\u306f\u3001\u5148\u306b\u6e21\u3055\u308c\u305f\u30c8\u30fc\u30af\u30f3\u30ea\u30b9\u30c8`body`\u304b\u3089\u5f0f1\u3064\u5206\u306e\u30c8\u30fc\u30af\u30f3\u3092\u3068\u308a\u3060\u3057\u3001\u5f0f\u3092\u51e6\u7406\u3059\u308b`expression()`\u3078\u6e21\u3057\u307e\u3059\u3002\n\n```Java:Interpreter.java\n    public void body(List<Token> body) throws Exception {\n        for (Token exprs : body) {\n            expression(exprs);\n        }\n    }\n```\n\n`expression()`\u306f\u30c8\u30fc\u30af\u30f3\u306e\u610f\u5473\u306b\u3088\u3063\u3066\u3001\u305d\u308c\u305e\u308c\u3092\u51e6\u7406\u3059\u308b\u30e1\u30bd\u30c3\u30c9\u3092\u547c\u3073\u51fa\u3057\u3001\u305d\u306e\u7d50\u679c\u3092\u305d\u306e\u307e\u307e\u8fd4\u3057\u307e\u3059\u3002\n\n```Java:Interpreter.java\n    public Object expression(Token expr) throws Exception {\n        if (expr.kind.equals(\"digit\")) {\n            return digit(expr);\n        } else if (expr.kind.equals(\"variable\")) {\n            return var(expr);\n        } else if (expr.kind.equals(\"sign\") && expr.value.equals(\"=\")) {\n            return assign(expr);\n        } else if (expr.kind.equals(\"sign\")) {\n            return calc(expr);\n        } else {\n            throw new Exception(\"Expression error\");\n        }\n    }\n```\n\n`digit()`\u306f\u6570\u5024\u306e\u30c8\u30fc\u30af\u30f3\u3092\u53d7\u3051\u3068\u308a\u3001\u305d\u308c\u3092`Integer`\u306b\u3057\u307e\u3059\u3002\n\n```Java:Interpreter.java\n    public Integer digit(Token token) {\n        return Integer.decode(token.value);\n    }\n```\n\n`var()`\u306f\u5909\u6570\u306e\u30c8\u30fc\u30af\u30f3\u3092\u53d7\u3051\u3068\u308a\u5909\u6570\u540d\u306b\u3057\u307e\u3059\u3002\n\u5909\u6570\u540d\u304c\u5909\u6570Map\u306b\u672a\u767b\u9332\u306a\u3089\u3001\u5024\u3092`0`\u3067\u767b\u9332\u3057\u307e\u3059\u3002\n\n```Java:Interpreter.java\n    public Object var(Token token) {\n        String name = token.value;\n        if (!variables.containsKey(name)) {\n            variables.put(name, 0);\n        }\n        return name;\n    }\n```\n\n`assign()`\u306f\u5909\u6570\u3078\u5024\u3092\u4ee3\u5165\u3057\u307e\u3059\u3002\n\n```Java:Interpreter.java\n    public String assign(Token expr) throws Exception {\n        String name = variable(expression(expr.left));\n        Integer value = value(expression(expr.right));\n        variables.put(name, value);\n        return name;\n    }\n```\n\n`variable()`\u306f`assign()`\u306e\u51e6\u7406\u3067\u3001`expr.left`\u306e\u7d50\u679c\u304c\u5909\u6570\u540d\u3067\u3042\u308b\u3053\u3068\u3092\u78ba\u304b\u3081\u307e\u3059\u3002\n\n```Java:Interpreter.java\n    public String variable(Object value) throws Exception {\n        if (value instanceof String) {\n            return (String) value;\n        } else {\n            throw new Exception(\"left value error\");\n        }\n    }\n```\n\n`value()`\u306f`assign()`\u306e\u51e6\u7406\u306e`expr.right`\u3084\u3001\u3042\u3068\u306e\u8aac\u660e\u3067\u3067\u3066\u304f\u308b\u56db\u5247\u6f14\u7b97\u306e\u51e6\u7406\u3067\u3001\u8a08\u7b97\u3067\u304d\u308b\u6570\u5024\u306b\u4ed5\u7acb\u3066\u307e\u3059\u3002\n\u5f15\u6570`value`\u304c`Integer`\u306a\u3089\u3001\u305d\u306e\u307e\u307e\u8fd4\u3057\u307e\u3059\u3002`String`\u306a\u3089\u5909\u6570Map\u304b\u3089\u5024\u3092\u53d6\u308a\u51fa\u3057\u3066\u8fd4\u3057\u307e\u3059\u3002\n\n```Java:Interpreter.java\n    public Integer value(Object value) throws Exception {\n        if (value instanceof Integer) {\n            return (Integer) value;\n        } else if (value instanceof String) {\n            return variables.get((String) value);\n        } else {\n            throw new Exception(\"right value error\");\n        }\n    }\n```\n\n`calc()`\u306f\u56db\u5247\u6f14\u7b97\u3092\u3057\u307e\u3059\u3002\n\n```Java:Interpreter.java\n    public Object calc(Token expr) throws Exception {\n        Integer left = value(expression(expr.left));\n        Integer right = value(expression(expr.right));\n        if (expr.value.equals(\"+\")) {\n            return left + right;\n        } else if (expr.value.equals(\"-\")) {\n            return left - right;\n        } else if (expr.value.equals(\"*\")) {\n            return left * right;\n        } else if (expr.value.equals(\"/\")) {\n            return left / right;\n        } else {\n            throw new Exception(\"Unknown sign for Calc\");\n        }\n    }\n```\n\n\u4ee5\u4e0a\u306e\u5b9f\u88c5\u3092\u4f7f\u3063\u3066\u3001\u4f8b\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u306b\u306a\u3063\u3066\u3044\u308b\u6587\u5b57\u5217\n\n```JS\na = 3 + 4 * 5\n```\n\n\u3092\u8a08\u7b97\u3057\u3001\u5909\u6570\u3068\u305d\u306e\u5024\u3092\u6a19\u6e96\u51fa\u529b\u3078\u30d7\u30ea\u30f3\u30c8\u3057\u307e\u3059\u3002\n\n```Java:Interpreter.java\n    public static void main(String[] args) throws Exception {\n        String text = \"a = 3 + 4 * 5\";\n        List<Token> tokens = new Lexer().init(text).tokenize();\n        List<Token> blk = new Parser().init(tokens).block();\n        Map<String, Integer> variables = new Interpreter().init(blk).run();\n        for (Map.Entry<String, Integer> variable : variables.entrySet()) {\n            System.out.println(variable.getKey() + \" \" + variable.getValue());\n        }\n        // --> a 23\n    }\n}\n```\n\n\u5b9f\u88c5\u306f\u4ee5\u4e0a\u3067\u3059\u3002\n\u3042\u308a\u304c\u304c\u3068\u3046\u3054\u3056\u3044\u307e\u3057\u305f\u3002\n\n# \u304a\u308f\u308a\u306b\n\n\u30bd\u30fc\u30b9\u306f\u3053\u3061\u3089\u3067\u516c\u958b\u3057\u3066\u3044\u307e\u3059\u3002\n\n**Calc**\nhttps://github.com/quwahara/Calc/tree/article-3-interpreter/Calc/src/main/java\n\n\u7d9a\u304d\u306e\u8a18\u4e8b\u304c\u3042\u308a\u307e\u3059\u3002\n\n**\u30a4\u30f3\u30bf\u30d7\u30ea\u30bf\u306bprintln\u3092\u8ffd\u52a0\u3059\u308b**\nhttp://qiita.com/quwahara/items/82067b00cbe1cb974e4a\n\n\u6700\u5f8c\u306b\u3001Interpreter\u30af\u30e9\u30b9\u3092\u307e\u3068\u3081\u305f\u3082\u306e\u3082\u3042\u3052\u3066\u304a\u304d\u307e\u3059\u3002\n\n\n```Java:Interpreter.java\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\n\npublic class Interpreter {\n\n    public Map<String, Integer> variables;\n    List<Token> body;\n\n    public Interpreter init(List<Token> body) {\n        variables = new HashMap<>();\n        this.body = body;\n        return this;\n    }\n\n    public Map<String, Integer> run() throws Exception {\n        body(body);\n        return variables;\n    }\n\n    public void body(List<Token> body) throws Exception {\n        for (Token exprs : body) {\n            expression(exprs);\n        }\n    }\n\n    public Object expression(Token expr) throws Exception {\n        if (expr.kind.equals(\"digit\")) {\n            return digit(expr);\n        } else if (expr.kind.equals(\"variable\")) {\n            return var(expr);\n        } else if (expr.kind.equals(\"sign\") && expr.value.equals(\"=\")) {\n            return assign(expr);\n        } else if (expr.kind.equals(\"sign\")) {\n            return calc(expr);\n        } else {\n            throw new Exception(\"Expression error\");\n        }\n    }\n\n    public Integer digit(Token token) {\n        return Integer.decode(token.value);\n    }\n\n    public Object var(Token token) {\n        String name = token.value;\n        if (!variables.containsKey(name)) {\n            variables.put(name, 0);\n        }\n        return name;\n    }\n\n    public String assign(Token expr) throws Exception {\n        String name = variable(expression(expr.left));\n        Integer value = value(expression(expr.right));\n        variables.put(name, value);\n        return name;\n    }\n\n    public String variable(Object value) throws Exception {\n        if (value instanceof String) {\n            return (String) value;\n        } else {\n            throw new Exception(\"left value error\");\n        }\n    }\n\n    public Integer value(Object value) throws Exception {\n        if (value instanceof Integer) {\n            return (Integer) value;\n        } else if (value instanceof String) {\n            return variables.get((String) value);\n        } else {\n            throw new Exception(\"right value error\");\n        }\n    }\n\n    public Object calc(Token expr) throws Exception {\n        Integer left = value(expression(expr.left));\n        Integer right = value(expression(expr.right));\n        if (expr.value.equals(\"+\")) {\n            return left + right;\n        } else if (expr.value.equals(\"-\")) {\n            return left - right;\n        } else if (expr.value.equals(\"*\")) {\n            return left * right;\n        } else if (expr.value.equals(\"/\")) {\n            return left / right;\n        } else {\n            throw new Exception(\"Unknown sign for Calc\");\n        }\n    }\n\n    public static void main(String[] args) throws Exception {\n        String text = \"a = 3 + 4 * 5\";\n        List<Token> tokens = new Lexer().init(text).tokenize();\n        List<Token> blk = new Parser().init(tokens).block();\n        Map<String, Integer> variables = new Interpreter().init(blk).run();\n        for (Map.Entry<String, Integer> variable : variables.entrySet()) {\n            System.out.println(variable.getKey() + \" \" + variable.getValue());\n        }\n        // --> a 23\n    }\n}\n```\n", "tags": ["Java", "Interpreter", "compiler"]}