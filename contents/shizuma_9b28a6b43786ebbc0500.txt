{"context": "\u5de1\u56de\u30bb\u30fc\u30eb\u30b9\u30de\u30f3\u554f\u984c(Wikipedia)\u3092\u5206\u679d\u9650\u5b9a\u6cd5(Wikipedia)\u3067\u89e3\u304d\u307e\u3059\u3002\n\u5148\u65e5\u306f\u30ca\u30c3\u30d7\u30b6\u30c3\u30af\u554f\u984c(Wikipedia)\u3092\u5206\u679d\u9650\u5b9a\u6cd5\u3067\u89e3\u304d\u307e\u3057\u305f\u3002\nPython \u30ca\u30c3\u30d7\u30b6\u30c3\u30af\u554f\u984c\u3092\u5206\u679d\u9650\u5b9a\u6cd5( branch and bound )\u3067\u89e3\u304f\n\u4e0e\u3048\u3089\u308c\u305f\u90fd\u5e02i\u304b\u3089\u90fd\u5e02j\u3078\u306e\u8ddd\u96e2\uff08\u30b3\u30b9\u30c8\uff09\u304c\u4e0e\u3048\u3089\u308c\u305f\u6642\u3061\u3087\u3046\u3069\u5168\u3066\u306e\u90fd\u5e02\u30921\u5ea6\u305a\u3064\u5468\u308a\u30b3\u30b9\u30c8\u304c\u6700\u5c0f\u306b\u306a\u308b\u7d4c\u8def\u3092\u6c42\u3081\u307e\u3059\u3002\n\u30b3\u30fc\u30c9\u306b\u95a2\u3057\u3066\u4e0d\u5099\u3084\u6539\u826f\u6848\u7b49\u304c\u3042\u308c\u3070\u3054\u6559\u793a\u9802\u3051\u307e\u3059\u3068\u5e78\u3044\u3067\u3059\u3002\n\n\u554f\u984c\n\u3053\u3053\u3067\u306f\u90fd\u5e02i\u304b\u3089\u90fd\u5e02j\u3078\u306e\u8ddd\u96e2\uff08\u30b3\u30b9\u30c8\uff09\u306f\u4ee5\u4e0b\u306b\u3042\u308b\u3088\u3046\u306a\u554f\u984c\u3092\u4f8b\u306b\u3057\u307e\u3059\u3002\n\u90fd\u5e02\u306e\u6570\uff08\u30ce\u30fc\u30c9\uff09\u306f10\u3002\u90fd\u5e02i\u304b\u3089\u90fd\u5e02i\u306e\u8ddd\u96e2(\u30b3\u30b9\u30c8\uff09\u306f\u7121\u9650\u5927\u3002\n\u3053\u306e\u3088\u3046\u306b\u8868\u73fe\u3055\u308c\u308b\u5de1\u56de\u30bb\u30fc\u30eb\u30b9\u30de\u30f3\u554f\u984c\u3092\u5206\u679d\u9650\u5b9a\u6cd5\u3067\u89e3\u304f\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u4f5c\u6210\u305b\u3088\u3002\n    [\n        [   math.inf,    22,    16,    21,    19,    24,    17,    21,    30,    29],\n        [    16,   math.inf,    16,    29,    16,    20,    20,    24,    26,    19],\n        [    19,    27,   math.inf,    22,    18,    20,    30,    26,    21,    27],\n        [    28,    29,    24,   math.inf,    28,    26,    18,    17,    16,    21],\n        [    18,    26,    24,    21,   math.inf,    26,    20,    19,    24,    20],\n        [    16,    22,    26,    25,    26,   math.inf,    26,    30,    28,    27],\n        [    17,    20,    18,    20,    30,    28,   math.inf,    30,    29,    16],\n        [    24,    19,    16,    20,    19,    30,    23,   math.inf,    22,    22],\n        [    26,    29,    18,    22,    21,    20,    30,    22,   math.inf,    17],\n        [    19,    28,    29,    18,    23,    23,    30,    28,    21,   math.inf]\n    ]\n\n\n\u89e3\u7b54\nimport numpy as np\nfrom pandas import DataFrame\nimport math\nimport copy\n\nclass Salesman():\n    def __init__(self, route_list):\n        self.route_df = DataFrame(route_list)\n        self.stack_search_nodes = [] # \u7de9\u548c\u554f\u984c\u306e\u89e3\u3092\u51fa\u3057\u3066stack\u3057\u305fnode\u7fa4\n        self.present_nodes = [] # \u307e\u3055\u306b\u63a2\u7d22\u4e2d\u306enode(1\u3064\u304b2\u3064)\n        self.suitable_val = math.inf # \u66ab\u5b9a\u5024\n        self.suitable_ans = [] # \u66ab\u5b9a\u89e3\n        self.node_num = self.route_df.shape[0] # node\u306e\u500b\u6570\n\n    # \u4e0e\u3048\u3089\u308c\u305fDataFrame\u306e\u3046\u3061\u6700\u5c0f\u5024\u306e[index, column]\u306e\u4e00\u7d44\u3092\u8fd4\u3059\n    def __minimumRoute(self, target_route_df):\n        min_index = target_route_df.idxmin(axis=1) # \u5404\u884c\u3054\u3068\u306b\u6700\u5c0f\u5024\u306ecolumn\n        minimum = math.inf # \u6700\u5c0f\u5024\u306e\u521d\u671f\u5024\n        loc = [-1, -1] # \u4f4d\u7f6e\u306e\u521d\u671f\u5024\n        for index, column in zip(min_index.index, min_index.values):\n            if math.isnan(column): # \u884c\u5168\u3066inf\u306e\u3068\u304d\u306fNaN\u3068\u306a\u308b, \u3053\u308c\u306f\u6700\u5c0f\u306b\u306a\u3089\u306a\u3044\n                continue\n            if minimum > target_route_df[column][index]:\n                minimum = target_route_df[column][index] # \u6700\u5c0f\u5024\u306e\u66f4\u65b0\n                loc = [index, column] # index, column\u4f4d\u7f6e\u306e\u66f4\u65b0\n        return loc\n\n    # \u30c7\u30d5\u30a9\u30eb\u30c8\u306eDataFrame\u3068\u7d4c\u8def\u9078\u629e\u306e\u914d\u5217\u3092\u4e0e\u3048\u308b\u3068\u6700\u9069\u5024\u3092\u8fd4\u3059\n    def __calcSuitableSum(self, route_list):\n        route_df_tmp = copy.deepcopy(self.route_df)\n        route_length = 0\n        for route in route_list:\n            if route[2] == 0: # \u3053\u306eroute\u3092\u9078\u629e\u3059\u308b\u3068\u304d\n                route_length += route_df_tmp[route[1]][route[0]] # \u7d4c\u8def\u9577\u306b\u8ffd\u52a0\n                if (route[1] in route_df_tmp.index and route[0] in route_df_tmp.columns): # \u5c0f\u3055\u304f\u306a\u3063\u305f\u7d4c\u8def\u306eDataFrame\u306b\u8a72\u5f53\u8981\u7d20\u304c\u307e\u3060\u5b58\u5728\u3059\u308b\u3068\u304d\n                    route_df_tmp[route[0]][route[1]] = math.inf # DataFrame[column][index], \u8a72\u5f53\u306e\u9053\u306e\u9006\u7d4c\u8def(1->2\u306e\u3068\u304d2->1)\u306f\u63a1\u629e\u3057\u306a\u3044\u306e\u3067inf\u3068\u3059\u308b\n                route_df_tmp = route_df_tmp.drop(route[0], axis=0) # \u8a72\u5f53\u7d4c\u8def\u306e\u884c\u524a\u9664\n                route_df_tmp = route_df_tmp.drop(route[1], axis=1) # \u8a72\u5f53\u7d4c\u8def\u306e\u5217\u524a\u9664\n            else: # \u3053\u306eroute\u3092\u9078\u629e\u3057\u306a\u3044\u3068\u304d\n                if (route[0] in route_df_tmp.index and route[1] in route_df_tmp.columns): # \u5c0f\u3055\u304f\u306a\u3063\u305f\u7d4c\u8def\u306eDataFrame\u306b\u8a72\u5f53\u8981\u7d20\u304c\u307e\u3060\u5b58\u5728\u3059\u308b\u3068\u304d\n                    route_df_tmp[route[1]][route[0]] = math.inf # \u63a1\u7528\u3057\u306a\u3044\u306e\u3067\u8a72\u5f53\u306e\u7d4c\u8def\u3092inf\u3068\u3059\u308b\n\n        min_sum = 0 # \u7de9\u548c\u554f\u984c\u306e\u7d4c\u8def\u9577\u3092\u8db3\u3057\u3066\u3044\u304f\n        next_route = copy.deepcopy(route_df_tmp) # \u3053\u306e\u6642\u70b9\u306eDataFrame\u3092next_route\u306b\u4fdd\u6301\n        for index in route_df_tmp.index: # \u5404\u884c\u3067\u5b9f\u884c\n            min_tmp = route_df_tmp.ix[index, :].min() # \u884c\u306e\u6700\u5c0f\u5024\u3092\u53d6\u5f97\n            min_sum += min_tmp # \u6700\u5c0f\u5024\u3092\u8db3\u3059\n            route_df_tmp.ix[index, :] = route_df_tmp.ix[index, :] - min_tmp # \u305d\u306e\u884c\u306e\u5404\u8981\u7d20\u304b\u3089\u6700\u5c0f\u5024\u3092\u5f15\u304f\n        for column in route_df_tmp.columns: # \u5404\u5217\u3067\u5b9f\u884c\n            min_tmp = route_df_tmp.ix[:, column].min() # \u5217\u306e\u6700\u5c0f\u5024\u3092\u53d6\u5f97\n            min_sum += min_tmp # \u6700\u5c0f\u5024\u3092\u8db3\u3059\n            route_df_tmp.ix[:, column] = route_df_tmp.ix[:, column] - min_tmp # \u305d\u306e\u5217\u306e\u5404\u8981\u7d20\u304b\u3089\u6700\u5c0f\u5024\u3092\u5f15\u304f\n        route_length += min_sum # \u7d4c\u8def\u9577\u306b\u8ffd\u52a0\n        return route_length, next_route # \u7d4c\u8def\u9577\u3068\u305d\u306e\u30ce\u30fc\u30c9\u6642\u70b9\u306e\u7d4c\u8def\u306eDataFrame\n\n    # \u4e00\u5de1\u9589\u8def\u304b\u30c1\u30a7\u30c3\u30af\u3059\u308b\n    def __checkClosedCircle(self, route_list, route_df_tmp):\n        # route_df_tmp\u306f2x2\u3067\u3042\u308b\u3053\u3068\u304c\u524d\u63d0\n        mini_route = self.__minimumRoute(route_df_tmp) # route_df_tmp\u306e\u6700\u5c0f\u306e\u8981\u7d20\u306e[index, coumn]\n        if mini_route == [-1, -1]: #route_df_tmp\u304c\u5168\u3066inf\u306e\u3068\u304d\n            return False\n        mini_route.append(0) # \u63a1\u629e\u3059\u308broute\u306a\u306e\u30670\u3092\u8ffd\u52a0\n        route_list.append(mini_route) # route\u30ea\u30b9\u30c8\u306b\u8ffd\u52a0\n        route_df_tmp = route_df_tmp.drop(mini_route[0], axis=0) # \u884c\u524a\u9664\n        route_df_tmp = route_df_tmp.drop(mini_route[1], axis=1) # \u5217\u524a\u9664\n        last_route = [route_df_tmp.index[0], route_df_tmp.columns[0]] # \u6b8b\u308a\u306e\u8981\u7d20\u3092\u53d6\u5f97\n        last_route.append(0) # \u63a1\u629e\u3059\u308broute\u306a\u306e\u30670\u3092\u8ffd\u52a0\n        route_list.append(last_route) # route\u30ea\u30b9\u30c8\u306b\u8ffd\u52a0\n\n        label, counter = 0, 0 # label\u306f\u73fe\u5728\u306e\u4f4d\u7f6e, counter\u306f\u79fb\u52d5\u56de\u6570\n        for i in range(self.node_num): # \u7e70\u308a\u8fd4\u3057\u306e\u6700\u5927\u306f\u30ce\u30fc\u30c9\u306e\u500b\u6570\n            for route in route_list:\n                if route[0] == label and route[2] == 0: # \u59cb\u70b9\u304clabel\u3067\u63a1\u629e\u7d4c\u8def\u3067\u3042\u308c\u3070\n                    new_label = route[1] # label\u306e\u66f4\u65b0\n                    counter += 1 # couter\u306e\u30a4\u30f3\u30af\u30ea\u30e1\u30f3\u30c8\n            label = new_label\n            if label == 0: # label\u304c0\u306a\u3089\u4e00\u5de1\u7d42\u308f\u308a\n                break\n        if counter == self.node_num: # \u79fb\u52d5\u56de\u6570\u304c\u30ce\u30fc\u30c9\u306e\u6570\u3068\u4e00\u81f4\u3059\u308c\u3070\u4e00\u5de1\u9589\u8def\n            return True\n        else:\n            return False\n\n    # \u3042\u308b\u30ce\u30fc\u30c9\u307e\u3067\u306e\u7d4c\u8def\u306b\u65b0\u305f\u306a\u7d4c\u8def\u3092\u8ffd\u52a0\u3057present_nodes\u306b\u8ffd\u52a0\u3059\u308b\n    def __setPresentNodes(self, target_route, target_branch):\n        for status in range(2):\n            target_route_tmp = copy.deepcopy(target_route) # target_ele\u3092\u30b3\u30d4\u30fc\n            target_route_tmp.append(status) # status(\u63a1\u629e\u306e\u53ef\u5426\uff09\u3092\u8ffd\u52a0\n            target_branch_tmp = copy.deepcopy(target_branch) # target_branch\u3092\u30b3\u30d4\u30fc\n            target_branch_tmp.append(target_route_tmp) # route\u3092\u8ffd\u52a0\n            self.present_nodes.append(target_branch_tmp) # present_nodes\u306b\u8ffd\u52a0\n\n    # \u8a72\u5f53\u30ce\u30fc\u30c9\u3092\u8a55\u4fa1\u3059\u308b, \u5206\u5c90\u304c\u53ef\u80fd\u306a\u3089\u30ce\u30fc\u30c9\u3092\u8a55\u4fa1, \u5206\u5c90\u304c\u7d42\u4e86\u306a\u3089\u66ab\u5b9a\u5024\u3068\u306e\u6bd4\u8f03\n    def __evaluateNode(self, target_node):\n        if (False if target_node[1].shape == (2, 2) else True):  # \u307e\u3060\u5206\u5c90\u3044\u3051\u308b\u3068\u304d, \u5224\u65ad\u306ftarget_node\u306eDataFrame\u304c2x2\u306b\u5230\u9054\u3057\u3066\u3044\u306a\u3044\u3053\u3068\n            next_route = self.__minimumRoute(target_node[1]) # \u6700\u5c0f\u306e\u8981\u7d20\u3092\u53d6\u5f97 [index, column]\n            if next_route != [-1, -1]: # [-1, -1]\u306e\u3068\u304d\u306f\u8ddd\u96e2\u304cinf\u306b\u306a\u308b\u306e\u3067\u4e0d\u9069, present_nodes\u306b\u306f\u4f55\u3082\u8ffd\u52a0\u3057\u306a\u3044\n                self.__setPresentNodes(next_route, target_node[0])\n        else: # \u5206\u5c90\u7d42\u308f\u308a\u306e\u3068\u304d\n            if self.__checkClosedCircle(target_node[0], target_node[1]): # \u4e00\u5de1\u9589\u8def\u3067\u3042\u308b\u304b\n                if self.suitable_val > target_node[2]: # \u66ab\u5b9a\u5024\u3088\u308a\u5c0f\u3055\u3044\u304b\n                    self.suitable_val = target_node[2] # \u66ab\u5b9a\u5024\u306e\u66f4\u65b0\n                    self.suitable_ans = target_node[0] # \u66ab\u5b9a\u89e3\u306e\u66f4\u65b0\n\n    # \u7d4c\u8def\u306e\u30ea\u30b9\u30c8\u3092path\u306b\u5909\u63db\u3059\u308b\n    def __displayRoutePath(self, route_list):\n        label, counter, route_path = 0, 0, \"0\" # label\u306f\u73fe\u5728\u306e\u4f4d\u7f6e, counter\u306f\u79fb\u52d5\u56de\u6570, route_path\u306f\u7d4c\u8def\n        for i in range(self.node_num): # \u7e70\u308a\u8fd4\u3057\u306e\u6700\u5927\u306f\u30ce\u30fc\u30c9\u306e\u500b\u6570\n            for route in route_list:\n                if route[0] == label and route[2] == 0: # \u59cb\u70b9\u304clabel\u3067\u63a1\u629e\u7d4c\u8def\u3067\u3042\u308c\u3070\n                    new_label = route[1] # label\u306e\u66f4\u65b0\n                    route_path += \" -> \" + str(new_label)\n                    counter += 1 # couter\u306e\u30a4\u30f3\u30af\u30ea\u30e1\u30f3\u30c8\n            label = new_label\n            if label == 0: # label\u304c0\u306a\u3089\u4e00\u5de1\u7d42\u308f\u308a\n                break\n        return route_path\n\n    # \u6700\u9069\u5024\u3068\u6700\u9069\u89e3\u3092\u8a08\u7b97\u3059\u308b (\u30e1\u30a4\u30f3\u306e\u30e1\u30bd\u30c3\u30c9)\n    def getSuitableAns(self):\n        target_route = self.__minimumRoute(self.route_df) # route\u306eDataFrame\u306e\u6700\u5c0f\u8981\u7d20\u3092\u53d6\u5f97\n        self.__setPresentNodes(target_route, []) # present_nodes\u306b\u30bb\u30c3\u30c8\n\n        while True:\n            if self.suitable_val != math.inf: # \u6700\u9069\u89e3\u306e\u66ab\u5b9a\u5024\u304c\u30bb\u30c3\u30c8\u3055\u308c\u3066\u3044\u308b\u3068\u304d\n                self.stack_search_nodes = list(filter(lambda node: node[2] < self.suitable_val, self.stack_search_nodes)) # stack\u3055\u308c\u3066\u3044\u308b\u30ce\u30fc\u30c9\u306e\u7de9\u548c\u554f\u984c\u306e\u89e3\u304c\u66ab\u5b9a\u5024\u3092\u8d85\u3048\u3066\u3044\u305f\u3089\u9664\u304f\n\n            while len(self.present_nodes) != 0: # \u63a2\u7d22\u306e\u30ea\u30b9\u30c8\u304c\u5b58\u5728\u3059\u308b\u306a\u3089\u3070\u7de9\u548c\u554f\u984c\u306e\u89e3\u3092\u554f\u3044\u3066stack\n                first_list = self.present_nodes[0] # present_nodes\u3092\u8a55\u4fa1\u3059\u308b\u305f\u3081\u306b\u53d6\u5f97\n                self.present_nodes.pop(0) # \u8a55\u4fa1\u3059\u308b\u306e\u3067present_nodes\u304b\u3089\u306f\u9664\u304f\n                route_length, next_route = self.__calcSuitableSum(first_list) # \u7de9\u548c\u554f\u984c\u306e\u89e3\u3092\u53d6\u5f97\n                self.stack_search_nodes.insert(0, [first_list, next_route, route_length]) # stack\u3059\u308b\n\n            if len(self.stack_search_nodes) == 0: # stack\u304c\u306a\u304f\u306a\u3063\u305f\u3089\u7d42\u4e86\n                break;\n\n            # stack\u3055\u308c\u3066\u3044\u308b\u30ce\u30fc\u30c9\u306e\u500b\u6570\u304c1\u500b\u306e\u3068\u304d\u307e\u305f\u306fstack\u3055\u308c\u3066\u3044\u308b\u30ce\u30fc\u30c9\u306e1\u500b\u76ee\u306e\u7de9\u548c\u554f\u984c\u306e\u89e3\u304c2\u500b\u76ee\u306e\u7de9\u548c\u554f\u984c\u306e\u89e3\u3088\u308a\u5c0f\u3055\u3044\u3068\u304d(\u826f\u3055\u305d\u3046\u306a\u89e3\u304b\u3089\u78ba\u8a8d\u3057\u3066\u3044\u304f\u305f\u3081)\n            if len(self.stack_search_nodes) == 1 or self.stack_search_nodes[0][2] <= self.stack_search_nodes[1][2]:\n                self.__evaluateNode(self.stack_search_nodes[0]) # 1\u756a\u76ee\u306e\u30ce\u30fc\u30c9\u3092\u8a55\u4fa1\n                self.stack_search_nodes.pop(0) # 1\u756a\u76ee\u306e\u30ce\u30fc\u30c9\u306e\u524a\u9664\n            else:\n                self.__evaluateNode(self.stack_search_nodes[1]) # 2\u756a\u76ee\u306e\u30ce\u30fc\u30c9\u3092\u8a55\u4fa1\n                self.stack_search_nodes.pop(1) # 2\u756a\u76ee\u306e\u30ce\u30fc\u30c9\u306e\u524a\u9664\n\n        return self.suitable_val, self.__displayRoutePath(self.suitable_ans) # \u6700\u9069\u5024\u3001\u6700\u9069\u7d4c\u8def\u3092\u8fd4\u3059\n\n# \u554f\u984c\u306e\u30eb\u30fc\u30c8\u306e\u30ea\u30b9\u30c8\nroute_list = [\n        [   math.inf,    22,    16,    21,    19,    24,    17,    21,    30,    29],\n        [    16,   math.inf,    16,    29,    16,    20,    20,    24,    26,    19],\n        [    19,    27,   math.inf,    22,    18,    20,    30,    26,    21,    27],\n        [    28,    29,    24,   math.inf,    28,    26,    18,    17,    16,    21],\n        [    18,    26,    24,    21,   math.inf,    26,    20,    19,    24,    20],\n        [    16,    22,    26,    25,    26,   math.inf,    26,    30,    28,    27],\n        [    17,    20,    18,    20,    30,    28,   math.inf,    30,    29,    16],\n        [    24,    19,    16,    20,    19,    30,    23,   math.inf,    22,    22],\n        [    26,    29,    18,    22,    21,    20,    30,    22,   math.inf,    17],\n        [    19,    28,    29,    18,    23,    23,    30,    28,    21,   math.inf]\n    ]\n# \u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u5316\u3057\u3066\u30e1\u30bd\u30c3\u30c9\u4f7f\u7528\nsalesman = Salesman(route_list)\nsuitable_val, suitable_route = salesman.getSuitableAns()\nprint(suitable_val)\nprint(suitable_route)\n\n\n\u7d50\u679c\n177.0\n0 -> 6 -> 9 -> 3 -> 8 -> 2 -> 4 -> 7 -> 1 -> 5 -> 0\n\n[\u5de1\u56de\u30bb\u30fc\u30eb\u30b9\u30de\u30f3\u554f\u984c(Wikipedia)](https://ja.wikipedia.org/wiki/%E5%B7%A1%E5%9B%9E%E3%82%BB%E3%83%BC%E3%83%AB%E3%82%B9%E3%83%9E%E3%83%B3%E5%95%8F%E9%A1%8C)\u3092[\u5206\u679d\u9650\u5b9a\u6cd5(Wikipedia)](https://ja.wikipedia.org/wiki/%E5%88%86%E6%9E%9D%E9%99%90%E5%AE%9A%E6%B3%95)\u3067\u89e3\u304d\u307e\u3059\u3002\n\u5148\u65e5\u306f[\u30ca\u30c3\u30d7\u30b6\u30c3\u30af\u554f\u984c(Wikipedia)](https://ja.wikipedia.org/wiki/%E3%83%8A%E3%83%83%E3%83%97%E3%82%B5%E3%83%83%E3%82%AF%E5%95%8F%E9%A1%8C)\u3092\u5206\u679d\u9650\u5b9a\u6cd5\u3067\u89e3\u304d\u307e\u3057\u305f\u3002\n[Python \u30ca\u30c3\u30d7\u30b6\u30c3\u30af\u554f\u984c\u3092\u5206\u679d\u9650\u5b9a\u6cd5( branch and bound )\u3067\u89e3\u304f](http://qiita.com/shizuma/items/b0752fd4cd39583d7e54)\n\n\u4e0e\u3048\u3089\u308c\u305f\u90fd\u5e02i\u304b\u3089\u90fd\u5e02j\u3078\u306e\u8ddd\u96e2\uff08\u30b3\u30b9\u30c8\uff09\u304c\u4e0e\u3048\u3089\u308c\u305f\u6642\u3061\u3087\u3046\u3069\u5168\u3066\u306e\u90fd\u5e02\u30921\u5ea6\u305a\u3064\u5468\u308a\u30b3\u30b9\u30c8\u304c\u6700\u5c0f\u306b\u306a\u308b\u7d4c\u8def\u3092\u6c42\u3081\u307e\u3059\u3002\n\n\u30b3\u30fc\u30c9\u306b\u95a2\u3057\u3066\u4e0d\u5099\u3084\u6539\u826f\u6848\u7b49\u304c\u3042\u308c\u3070\u3054\u6559\u793a\u9802\u3051\u307e\u3059\u3068\u5e78\u3044\u3067\u3059\u3002\n\n# \u554f\u984c\n\n\u3053\u3053\u3067\u306f\u90fd\u5e02i\u304b\u3089\u90fd\u5e02j\u3078\u306e\u8ddd\u96e2\uff08\u30b3\u30b9\u30c8\uff09\u306f\u4ee5\u4e0b\u306b\u3042\u308b\u3088\u3046\u306a\u554f\u984c\u3092\u4f8b\u306b\u3057\u307e\u3059\u3002\n\u90fd\u5e02\u306e\u6570\uff08\u30ce\u30fc\u30c9\uff09\u306f10\u3002\u90fd\u5e02i\u304b\u3089\u90fd\u5e02i\u306e\u8ddd\u96e2(\u30b3\u30b9\u30c8\uff09\u306f\u7121\u9650\u5927\u3002\n\u3053\u306e\u3088\u3046\u306b\u8868\u73fe\u3055\u308c\u308b\u5de1\u56de\u30bb\u30fc\u30eb\u30b9\u30de\u30f3\u554f\u984c\u3092\u5206\u679d\u9650\u5b9a\u6cd5\u3067\u89e3\u304f\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u4f5c\u6210\u305b\u3088\u3002\n\n```\n    [\n        [   math.inf,    22,    16,    21,    19,    24,    17,    21,    30,    29],\n        [    16,   math.inf,    16,    29,    16,    20,    20,    24,    26,    19],\n        [    19,    27,   math.inf,    22,    18,    20,    30,    26,    21,    27],\n        [    28,    29,    24,   math.inf,    28,    26,    18,    17,    16,    21],\n        [    18,    26,    24,    21,   math.inf,    26,    20,    19,    24,    20],\n        [    16,    22,    26,    25,    26,   math.inf,    26,    30,    28,    27],\n        [    17,    20,    18,    20,    30,    28,   math.inf,    30,    29,    16],\n        [    24,    19,    16,    20,    19,    30,    23,   math.inf,    22,    22],\n        [    26,    29,    18,    22,    21,    20,    30,    22,   math.inf,    17],\n        [    19,    28,    29,    18,    23,    23,    30,    28,    21,   math.inf]\n    ]\n```\n\n# \u89e3\u7b54\n```py3\nimport numpy as np\nfrom pandas import DataFrame\nimport math\nimport copy\n\nclass Salesman():\n    def __init__(self, route_list):\n        self.route_df = DataFrame(route_list)\n        self.stack_search_nodes = [] # \u7de9\u548c\u554f\u984c\u306e\u89e3\u3092\u51fa\u3057\u3066stack\u3057\u305fnode\u7fa4\n        self.present_nodes = [] # \u307e\u3055\u306b\u63a2\u7d22\u4e2d\u306enode(1\u3064\u304b2\u3064)\n        self.suitable_val = math.inf # \u66ab\u5b9a\u5024\n        self.suitable_ans = [] # \u66ab\u5b9a\u89e3\n        self.node_num = self.route_df.shape[0] # node\u306e\u500b\u6570\n\n    # \u4e0e\u3048\u3089\u308c\u305fDataFrame\u306e\u3046\u3061\u6700\u5c0f\u5024\u306e[index, column]\u306e\u4e00\u7d44\u3092\u8fd4\u3059\n    def __minimumRoute(self, target_route_df):\n        min_index = target_route_df.idxmin(axis=1) # \u5404\u884c\u3054\u3068\u306b\u6700\u5c0f\u5024\u306ecolumn\n        minimum = math.inf # \u6700\u5c0f\u5024\u306e\u521d\u671f\u5024\n        loc = [-1, -1] # \u4f4d\u7f6e\u306e\u521d\u671f\u5024\n        for index, column in zip(min_index.index, min_index.values):\n            if math.isnan(column): # \u884c\u5168\u3066inf\u306e\u3068\u304d\u306fNaN\u3068\u306a\u308b, \u3053\u308c\u306f\u6700\u5c0f\u306b\u306a\u3089\u306a\u3044\n                continue\n            if minimum > target_route_df[column][index]:\n                minimum = target_route_df[column][index] # \u6700\u5c0f\u5024\u306e\u66f4\u65b0\n                loc = [index, column] # index, column\u4f4d\u7f6e\u306e\u66f4\u65b0\n        return loc\n\n    # \u30c7\u30d5\u30a9\u30eb\u30c8\u306eDataFrame\u3068\u7d4c\u8def\u9078\u629e\u306e\u914d\u5217\u3092\u4e0e\u3048\u308b\u3068\u6700\u9069\u5024\u3092\u8fd4\u3059\n    def __calcSuitableSum(self, route_list):\n        route_df_tmp = copy.deepcopy(self.route_df)\n        route_length = 0\n        for route in route_list:\n            if route[2] == 0: # \u3053\u306eroute\u3092\u9078\u629e\u3059\u308b\u3068\u304d\n                route_length += route_df_tmp[route[1]][route[0]] # \u7d4c\u8def\u9577\u306b\u8ffd\u52a0\n                if (route[1] in route_df_tmp.index and route[0] in route_df_tmp.columns): # \u5c0f\u3055\u304f\u306a\u3063\u305f\u7d4c\u8def\u306eDataFrame\u306b\u8a72\u5f53\u8981\u7d20\u304c\u307e\u3060\u5b58\u5728\u3059\u308b\u3068\u304d\n                    route_df_tmp[route[0]][route[1]] = math.inf # DataFrame[column][index], \u8a72\u5f53\u306e\u9053\u306e\u9006\u7d4c\u8def(1->2\u306e\u3068\u304d2->1)\u306f\u63a1\u629e\u3057\u306a\u3044\u306e\u3067inf\u3068\u3059\u308b\n                route_df_tmp = route_df_tmp.drop(route[0], axis=0) # \u8a72\u5f53\u7d4c\u8def\u306e\u884c\u524a\u9664\n                route_df_tmp = route_df_tmp.drop(route[1], axis=1) # \u8a72\u5f53\u7d4c\u8def\u306e\u5217\u524a\u9664\n            else: # \u3053\u306eroute\u3092\u9078\u629e\u3057\u306a\u3044\u3068\u304d\n                if (route[0] in route_df_tmp.index and route[1] in route_df_tmp.columns): # \u5c0f\u3055\u304f\u306a\u3063\u305f\u7d4c\u8def\u306eDataFrame\u306b\u8a72\u5f53\u8981\u7d20\u304c\u307e\u3060\u5b58\u5728\u3059\u308b\u3068\u304d\n                    route_df_tmp[route[1]][route[0]] = math.inf # \u63a1\u7528\u3057\u306a\u3044\u306e\u3067\u8a72\u5f53\u306e\u7d4c\u8def\u3092inf\u3068\u3059\u308b\n\n        min_sum = 0 # \u7de9\u548c\u554f\u984c\u306e\u7d4c\u8def\u9577\u3092\u8db3\u3057\u3066\u3044\u304f\n        next_route = copy.deepcopy(route_df_tmp) # \u3053\u306e\u6642\u70b9\u306eDataFrame\u3092next_route\u306b\u4fdd\u6301\n        for index in route_df_tmp.index: # \u5404\u884c\u3067\u5b9f\u884c\n            min_tmp = route_df_tmp.ix[index, :].min() # \u884c\u306e\u6700\u5c0f\u5024\u3092\u53d6\u5f97\n            min_sum += min_tmp # \u6700\u5c0f\u5024\u3092\u8db3\u3059\n            route_df_tmp.ix[index, :] = route_df_tmp.ix[index, :] - min_tmp # \u305d\u306e\u884c\u306e\u5404\u8981\u7d20\u304b\u3089\u6700\u5c0f\u5024\u3092\u5f15\u304f\n        for column in route_df_tmp.columns: # \u5404\u5217\u3067\u5b9f\u884c\n            min_tmp = route_df_tmp.ix[:, column].min() # \u5217\u306e\u6700\u5c0f\u5024\u3092\u53d6\u5f97\n            min_sum += min_tmp # \u6700\u5c0f\u5024\u3092\u8db3\u3059\n            route_df_tmp.ix[:, column] = route_df_tmp.ix[:, column] - min_tmp # \u305d\u306e\u5217\u306e\u5404\u8981\u7d20\u304b\u3089\u6700\u5c0f\u5024\u3092\u5f15\u304f\n        route_length += min_sum # \u7d4c\u8def\u9577\u306b\u8ffd\u52a0\n        return route_length, next_route # \u7d4c\u8def\u9577\u3068\u305d\u306e\u30ce\u30fc\u30c9\u6642\u70b9\u306e\u7d4c\u8def\u306eDataFrame\n\n    # \u4e00\u5de1\u9589\u8def\u304b\u30c1\u30a7\u30c3\u30af\u3059\u308b\n    def __checkClosedCircle(self, route_list, route_df_tmp):\n        # route_df_tmp\u306f2x2\u3067\u3042\u308b\u3053\u3068\u304c\u524d\u63d0\n        mini_route = self.__minimumRoute(route_df_tmp) # route_df_tmp\u306e\u6700\u5c0f\u306e\u8981\u7d20\u306e[index, coumn]\n        if mini_route == [-1, -1]: #route_df_tmp\u304c\u5168\u3066inf\u306e\u3068\u304d\n            return False\n        mini_route.append(0) # \u63a1\u629e\u3059\u308broute\u306a\u306e\u30670\u3092\u8ffd\u52a0\n        route_list.append(mini_route) # route\u30ea\u30b9\u30c8\u306b\u8ffd\u52a0\n        route_df_tmp = route_df_tmp.drop(mini_route[0], axis=0) # \u884c\u524a\u9664\n        route_df_tmp = route_df_tmp.drop(mini_route[1], axis=1) # \u5217\u524a\u9664\n        last_route = [route_df_tmp.index[0], route_df_tmp.columns[0]] # \u6b8b\u308a\u306e\u8981\u7d20\u3092\u53d6\u5f97\n        last_route.append(0) # \u63a1\u629e\u3059\u308broute\u306a\u306e\u30670\u3092\u8ffd\u52a0\n        route_list.append(last_route) # route\u30ea\u30b9\u30c8\u306b\u8ffd\u52a0\n\n        label, counter = 0, 0 # label\u306f\u73fe\u5728\u306e\u4f4d\u7f6e, counter\u306f\u79fb\u52d5\u56de\u6570\n        for i in range(self.node_num): # \u7e70\u308a\u8fd4\u3057\u306e\u6700\u5927\u306f\u30ce\u30fc\u30c9\u306e\u500b\u6570\n            for route in route_list:\n                if route[0] == label and route[2] == 0: # \u59cb\u70b9\u304clabel\u3067\u63a1\u629e\u7d4c\u8def\u3067\u3042\u308c\u3070\n                    new_label = route[1] # label\u306e\u66f4\u65b0\n                    counter += 1 # couter\u306e\u30a4\u30f3\u30af\u30ea\u30e1\u30f3\u30c8\n            label = new_label\n            if label == 0: # label\u304c0\u306a\u3089\u4e00\u5de1\u7d42\u308f\u308a\n                break\n        if counter == self.node_num: # \u79fb\u52d5\u56de\u6570\u304c\u30ce\u30fc\u30c9\u306e\u6570\u3068\u4e00\u81f4\u3059\u308c\u3070\u4e00\u5de1\u9589\u8def\n            return True\n        else:\n            return False\n\n    # \u3042\u308b\u30ce\u30fc\u30c9\u307e\u3067\u306e\u7d4c\u8def\u306b\u65b0\u305f\u306a\u7d4c\u8def\u3092\u8ffd\u52a0\u3057present_nodes\u306b\u8ffd\u52a0\u3059\u308b\n    def __setPresentNodes(self, target_route, target_branch):\n        for status in range(2):\n            target_route_tmp = copy.deepcopy(target_route) # target_ele\u3092\u30b3\u30d4\u30fc\n            target_route_tmp.append(status) # status(\u63a1\u629e\u306e\u53ef\u5426\uff09\u3092\u8ffd\u52a0\n            target_branch_tmp = copy.deepcopy(target_branch) # target_branch\u3092\u30b3\u30d4\u30fc\n            target_branch_tmp.append(target_route_tmp) # route\u3092\u8ffd\u52a0\n            self.present_nodes.append(target_branch_tmp) # present_nodes\u306b\u8ffd\u52a0\n\n    # \u8a72\u5f53\u30ce\u30fc\u30c9\u3092\u8a55\u4fa1\u3059\u308b, \u5206\u5c90\u304c\u53ef\u80fd\u306a\u3089\u30ce\u30fc\u30c9\u3092\u8a55\u4fa1, \u5206\u5c90\u304c\u7d42\u4e86\u306a\u3089\u66ab\u5b9a\u5024\u3068\u306e\u6bd4\u8f03\n    def __evaluateNode(self, target_node):\n        if (False if target_node[1].shape == (2, 2) else True):  # \u307e\u3060\u5206\u5c90\u3044\u3051\u308b\u3068\u304d, \u5224\u65ad\u306ftarget_node\u306eDataFrame\u304c2x2\u306b\u5230\u9054\u3057\u3066\u3044\u306a\u3044\u3053\u3068\n            next_route = self.__minimumRoute(target_node[1]) # \u6700\u5c0f\u306e\u8981\u7d20\u3092\u53d6\u5f97 [index, column]\n            if next_route != [-1, -1]: # [-1, -1]\u306e\u3068\u304d\u306f\u8ddd\u96e2\u304cinf\u306b\u306a\u308b\u306e\u3067\u4e0d\u9069, present_nodes\u306b\u306f\u4f55\u3082\u8ffd\u52a0\u3057\u306a\u3044\n                self.__setPresentNodes(next_route, target_node[0])\n        else: # \u5206\u5c90\u7d42\u308f\u308a\u306e\u3068\u304d\n            if self.__checkClosedCircle(target_node[0], target_node[1]): # \u4e00\u5de1\u9589\u8def\u3067\u3042\u308b\u304b\n                if self.suitable_val > target_node[2]: # \u66ab\u5b9a\u5024\u3088\u308a\u5c0f\u3055\u3044\u304b\n                    self.suitable_val = target_node[2] # \u66ab\u5b9a\u5024\u306e\u66f4\u65b0\n                    self.suitable_ans = target_node[0] # \u66ab\u5b9a\u89e3\u306e\u66f4\u65b0\n\n    # \u7d4c\u8def\u306e\u30ea\u30b9\u30c8\u3092path\u306b\u5909\u63db\u3059\u308b\n    def __displayRoutePath(self, route_list):\n        label, counter, route_path = 0, 0, \"0\" # label\u306f\u73fe\u5728\u306e\u4f4d\u7f6e, counter\u306f\u79fb\u52d5\u56de\u6570, route_path\u306f\u7d4c\u8def\n        for i in range(self.node_num): # \u7e70\u308a\u8fd4\u3057\u306e\u6700\u5927\u306f\u30ce\u30fc\u30c9\u306e\u500b\u6570\n            for route in route_list:\n                if route[0] == label and route[2] == 0: # \u59cb\u70b9\u304clabel\u3067\u63a1\u629e\u7d4c\u8def\u3067\u3042\u308c\u3070\n                    new_label = route[1] # label\u306e\u66f4\u65b0\n                    route_path += \" -> \" + str(new_label)\n                    counter += 1 # couter\u306e\u30a4\u30f3\u30af\u30ea\u30e1\u30f3\u30c8\n            label = new_label\n            if label == 0: # label\u304c0\u306a\u3089\u4e00\u5de1\u7d42\u308f\u308a\n                break\n        return route_path\n\n    # \u6700\u9069\u5024\u3068\u6700\u9069\u89e3\u3092\u8a08\u7b97\u3059\u308b (\u30e1\u30a4\u30f3\u306e\u30e1\u30bd\u30c3\u30c9)\n    def getSuitableAns(self):\n        target_route = self.__minimumRoute(self.route_df) # route\u306eDataFrame\u306e\u6700\u5c0f\u8981\u7d20\u3092\u53d6\u5f97\n        self.__setPresentNodes(target_route, []) # present_nodes\u306b\u30bb\u30c3\u30c8\n\n        while True:\n            if self.suitable_val != math.inf: # \u6700\u9069\u89e3\u306e\u66ab\u5b9a\u5024\u304c\u30bb\u30c3\u30c8\u3055\u308c\u3066\u3044\u308b\u3068\u304d\n                self.stack_search_nodes = list(filter(lambda node: node[2] < self.suitable_val, self.stack_search_nodes)) # stack\u3055\u308c\u3066\u3044\u308b\u30ce\u30fc\u30c9\u306e\u7de9\u548c\u554f\u984c\u306e\u89e3\u304c\u66ab\u5b9a\u5024\u3092\u8d85\u3048\u3066\u3044\u305f\u3089\u9664\u304f\n\n            while len(self.present_nodes) != 0: # \u63a2\u7d22\u306e\u30ea\u30b9\u30c8\u304c\u5b58\u5728\u3059\u308b\u306a\u3089\u3070\u7de9\u548c\u554f\u984c\u306e\u89e3\u3092\u554f\u3044\u3066stack\n                first_list = self.present_nodes[0] # present_nodes\u3092\u8a55\u4fa1\u3059\u308b\u305f\u3081\u306b\u53d6\u5f97\n                self.present_nodes.pop(0) # \u8a55\u4fa1\u3059\u308b\u306e\u3067present_nodes\u304b\u3089\u306f\u9664\u304f\n                route_length, next_route = self.__calcSuitableSum(first_list) # \u7de9\u548c\u554f\u984c\u306e\u89e3\u3092\u53d6\u5f97\n                self.stack_search_nodes.insert(0, [first_list, next_route, route_length]) # stack\u3059\u308b\n\n            if len(self.stack_search_nodes) == 0: # stack\u304c\u306a\u304f\u306a\u3063\u305f\u3089\u7d42\u4e86\n                break;\n\n            # stack\u3055\u308c\u3066\u3044\u308b\u30ce\u30fc\u30c9\u306e\u500b\u6570\u304c1\u500b\u306e\u3068\u304d\u307e\u305f\u306fstack\u3055\u308c\u3066\u3044\u308b\u30ce\u30fc\u30c9\u306e1\u500b\u76ee\u306e\u7de9\u548c\u554f\u984c\u306e\u89e3\u304c2\u500b\u76ee\u306e\u7de9\u548c\u554f\u984c\u306e\u89e3\u3088\u308a\u5c0f\u3055\u3044\u3068\u304d(\u826f\u3055\u305d\u3046\u306a\u89e3\u304b\u3089\u78ba\u8a8d\u3057\u3066\u3044\u304f\u305f\u3081)\n            if len(self.stack_search_nodes) == 1 or self.stack_search_nodes[0][2] <= self.stack_search_nodes[1][2]:\n                self.__evaluateNode(self.stack_search_nodes[0]) # 1\u756a\u76ee\u306e\u30ce\u30fc\u30c9\u3092\u8a55\u4fa1\n                self.stack_search_nodes.pop(0) # 1\u756a\u76ee\u306e\u30ce\u30fc\u30c9\u306e\u524a\u9664\n            else:\n                self.__evaluateNode(self.stack_search_nodes[1]) # 2\u756a\u76ee\u306e\u30ce\u30fc\u30c9\u3092\u8a55\u4fa1\n                self.stack_search_nodes.pop(1) # 2\u756a\u76ee\u306e\u30ce\u30fc\u30c9\u306e\u524a\u9664\n\n        return self.suitable_val, self.__displayRoutePath(self.suitable_ans) # \u6700\u9069\u5024\u3001\u6700\u9069\u7d4c\u8def\u3092\u8fd4\u3059\n\n# \u554f\u984c\u306e\u30eb\u30fc\u30c8\u306e\u30ea\u30b9\u30c8\nroute_list = [\n        [   math.inf,    22,    16,    21,    19,    24,    17,    21,    30,    29],\n        [    16,   math.inf,    16,    29,    16,    20,    20,    24,    26,    19],\n        [    19,    27,   math.inf,    22,    18,    20,    30,    26,    21,    27],\n        [    28,    29,    24,   math.inf,    28,    26,    18,    17,    16,    21],\n        [    18,    26,    24,    21,   math.inf,    26,    20,    19,    24,    20],\n        [    16,    22,    26,    25,    26,   math.inf,    26,    30,    28,    27],\n        [    17,    20,    18,    20,    30,    28,   math.inf,    30,    29,    16],\n        [    24,    19,    16,    20,    19,    30,    23,   math.inf,    22,    22],\n        [    26,    29,    18,    22,    21,    20,    30,    22,   math.inf,    17],\n        [    19,    28,    29,    18,    23,    23,    30,    28,    21,   math.inf]\n    ]\n# \u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u5316\u3057\u3066\u30e1\u30bd\u30c3\u30c9\u4f7f\u7528\nsalesman = Salesman(route_list)\nsuitable_val, suitable_route = salesman.getSuitableAns()\nprint(suitable_val)\nprint(suitable_route)\n```\n\n# \u7d50\u679c\n\n```\n177.0\n0 -> 6 -> 9 -> 3 -> 8 -> 2 -> 4 -> 7 -> 1 -> 5 -> 0\n```\n", "tags": ["Python", "python3", "\u5de1\u56de\u30bb\u30fc\u30eb\u30b9\u30de\u30f3", "algorithm", "\u5206\u679d\u9650\u5b9a\u6cd5"]}