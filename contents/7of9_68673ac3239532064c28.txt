{"context": "\n\u52d5\u4f5c\u74b0\u5883\nGeForce GTX 1070 (8GB)\nASRock Z170M Pro4S [Intel Z170chipset]\nUbuntu 14.04 LTS desktop amd64\nTensorFlow v0.11\ncuDNN v5.1 for Linux\nCUDA v8.0\nPython 2.7.6\nIPython 5.1.0 -- An enhanced Interactive Python.\ngcc (Ubuntu 4.8.4-2ubuntu1~14.04.3) 4.8.4\n\n\n\u6570\u5024\u5149\u6563\u4e71\u30b7\u30df\u30e5\u30ec\u30fc\u30b7\u30e7\u30f3\u3067\u51fa\u529b\u3055\u308c\u308b\u30c1\u30a7\u30c3\u30af\u30dd\u30a4\u30f3\u30c8\u30d5\u30a1\u30a4\u30eb\u306e\u8aad\u8fbc\u307f\u3092C\u3067\u5b9f\u88c5\u3057\u305f\u3002\nhttp://qiita.com/7of9/items/0fbea38b48cdfe4588dd\n\u3053\u308c\u3092matplotlib\u3067\u8aad\u3080\u305f\u3081\u306bPython\u5b9f\u88c5\u306b\u5909\u66f4\u3057\u3088\u3046\u3068\u3057\u3066\u3044\u308b\u3002\n\u53c2\u8003 http://qiita.com/7of9/items/a2e032301b9771ae183e\n\nv0.1 (niter\u8aad\u8fbc\u307f\u5931\u6557)\n\nread_chpoint.py\nimport numpy as np\nimport array\nimport sys\n\n'''\nv0.1 Dec. 18, 2016\n    - read_chpoint_file() > read [ind_m],[local_nRows],[niter],[counter]\n'''\n\ndef read_chpoint_file(chpFilename, auxFilename):\n    print(chpFilename)\n    print(auxFilename)\n\n    with open(chpFilename, \"rb\") as chpfp:\n        ind_m = array.array('i') # index of iterative method\n        ind_m.fromfile(chpfp, 1)\n        print ('ind_m:',ind_m) \n        local_nRows = array.array('i') # number of local rows of decomposition (only real dipoles)\n        local_nRows.fromfile(chpfp, 1)\n        print ('local_nRows:',local_nRows)\n        niter = array.array('i') # iteration count\n        niter.fromfile(chpfp, 1)\n        print('niter:',niter)\n        counter = array.array('i') # number of successive iterations without residual decrease\n        counter.fromfile(chpfp, 1)\n        print('counter:',counter)\n\nargvs = sys.argv\nargc = len(argvs)\n\nprint argvs\nif (argc < 3):\n    print(\"ERROR: chpoint file is not specified\\r\\n\")\n    print(\"   [cmd] [chpoint file] [auxiliary file]\\r\\n\")\n    sys.exit()\n\nread_chpoint_file(chpFilename=argvs[1], auxFilename=argvs[2])\n\n\n\n\u5b9f\u884c\n$ python read_chpoint.py LN-CHP LN-AUX \n['read_chpoint.py', 'LN-CHP', 'LN-AUX']\nLN-CHP\nLN-AUX\n('ind_m:', array('i', [5]))\n('local_nRows:', array('i', [27984]))\n('niter:', array('i', [0]))\n('counter:', array('i', [209]))\n\n\n\u4e0a\u8a18\u306fniter\u3092\u8aad\u8fbc\u307f\u5931\u6557\u3057\u3066\u3044\u308b\u3002\n(C\u3067\u5b9f\u88c5\u3057\u305f\u6642\u306f\u4ee5\u4e0b\u3068\u306a\u308b\u3002)\n\nC\u5b9f\u88c5\n$ gcc read_chpoint.c && ./a.out LN-CHP LN-AUX \nind_m:5\nlocal_nRows:27984\nniter:230\ncounter:160\n\n\n\nv0.3 (size_t\u8aad\u8fbc\u307f\u5bfe\u5fdc, read [inprodR],[prev_err],[resid_scale])\n\u53c2\u8003 http://qiita.com/7of9/items/a2e032301b9771ae183e\n\u306ev0.3 \n\nread_chpoint.py\nimport numpy as np\nimport array\nimport sys\n\n'''\nv0.3 Dec. 19, 2016\n    - add wrap_fromfile()\n    - read [inprodR],[prev_err],[resid_scale]\nv0.2 Dec. 19, 2016\n    - fix bug > read [local_nRows] for \"size_t\" type\nv0.1 Dec. 18, 2016\n    - read_chpoint_file() > read [ind_m],[local_nRows],[niter],[counter]\n'''\n\ndef wrap_fromfile(rfp, typecode):\n    res = array.array(typecode)\n    res.fromfile(rfp, 1)\n    return res\n\ndef read_chpoint_file(chpFilename, auxFilename):\n    print(chpFilename)\n    print(auxFilename)\n\n    with open(chpFilename, \"rb\") as chpfp:\n        ind_m = wrap_fromfile(chpfp, 'i') # index of iterative method\n        print ('ind_m:',ind_m) \n        # L: unsigned long = size_t\n        local_nRows = wrap_fromfile(chpfp, 'L') # number of local rows of decomposition (only real dipoles)\n        print ('local_nRows:',local_nRows)\n        niter = wrap_fromfile(chpfp, 'i') # iteration count\n        print('niter:',niter)\n        counter = wrap_fromfile(chpfp, 'i') # number of successive iterations without residual decrease\n        print('counter:',counter)\n        inprodR = wrap_fromfile(chpfp, 'd') # used as |r_0|^2 and best squared norm of residual up to some iteration\n        print('inprodR:', inprodR)\n        prev_err = wrap_fromfile(chpfp, 'd') # previous relative error; used in ProgressReport, initialized in IterativeSolver\n        print('prev_err:', prev_err)\n        resid_scale = wrap_fromfile(chpfp, 'd') # scale to get square of relative error\n        print('resid_scale:', resid_scale) # scale to get square of relative error\n\nargvs = sys.argv\nargc = len(argvs)\n\nprint argvs\nif (argc < 3):\n    print(\"ERROR: chpoint file is not specified\\r\\n\")\n    print(\"   [cmd] [chpoint file] [auxiliary file]\\r\\n\")\n    sys.exit()\n\nread_chpoint_file(chpFilename=argvs[1], auxFilename=argvs[2])\n\n\n\n\u5b9f\u884c\n$ python read_chpoint.py LN-CHP LN-AUX \n['read_chpoint.py', 'LN-CHP', 'LN-AUX']\nLN-CHP\nLN-AUX\n('ind_m:', array('i', [5]))\n('local_nRows:', array('L', [27984L]))\n('niter:', array('i', [209]))\n('counter:', array('i', [139]))\n('inprodR:', array('d', [4.317011265934948]))\n('prev_err:', array('d', [0.3198525404317458]))\n('resid_scale:', array('d', [0.020384616751203153]))\n\n\n\nC\u5b9f\u88c5\n$ ulimit -s unlimited && gcc read_chpoint.c && ./a.out LN-CHP LN-AUX\nind_m:5\nlocal_nRows:27984\nniter:209\ncounter:139\ninprodR:4.317\nprev_err:0.320\nresid_scale:0.020\n...\n\n\nPython\u5b9f\u88c5\u3068C\u5b9f\u88c5\u3067\u540c\u3058\u306b\u306a\u3063\u305f\u3002\nv0.1\u306e\u7d50\u679c\u3068counter\u304c\u7570\u306a\u308b\u306e\u306f\u3001ADDA\u306e\u5b9f\u884c\u3067\u7570\u306a\u308b\u30a4\u30c6\u30ec\u30fc\u30b7\u30e7\u30f3\u56de\u6570\u306e\u7d50\u679c\u306b\u306a\u3063\u3066\u3044\u305f\u306e\u304b\u3082\u3057\u308c\u306a\u3044\u3002\n```txt:\u52d5\u4f5c\u74b0\u5883\nGeForce GTX 1070 (8GB)\nASRock Z170M Pro4S [Intel Z170chipset]\nUbuntu 14.04 LTS desktop amd64\nTensorFlow v0.11\ncuDNN v5.1 for Linux\nCUDA v8.0\nPython 2.7.6\nIPython 5.1.0 -- An enhanced Interactive Python.\ngcc (Ubuntu 4.8.4-2ubuntu1~14.04.3) 4.8.4\n```\n\n\u6570\u5024\u5149\u6563\u4e71\u30b7\u30df\u30e5\u30ec\u30fc\u30b7\u30e7\u30f3\u3067\u51fa\u529b\u3055\u308c\u308b\u30c1\u30a7\u30c3\u30af\u30dd\u30a4\u30f3\u30c8\u30d5\u30a1\u30a4\u30eb\u306e\u8aad\u8fbc\u307f\u3092C\u3067\u5b9f\u88c5\u3057\u305f\u3002\nhttp://qiita.com/7of9/items/0fbea38b48cdfe4588dd\n\n\u3053\u308c\u3092matplotlib\u3067\u8aad\u3080\u305f\u3081\u306bPython\u5b9f\u88c5\u306b\u5909\u66f4\u3057\u3088\u3046\u3068\u3057\u3066\u3044\u308b\u3002\n\n\u53c2\u8003 http://qiita.com/7of9/items/a2e032301b9771ae183e\n\n## v0.1 (niter\u8aad\u8fbc\u307f\u5931\u6557)\n\n```read_chpoint.py\nimport numpy as np\nimport array\nimport sys\n\n'''\nv0.1 Dec. 18, 2016\n\t- read_chpoint_file() > read [ind_m],[local_nRows],[niter],[counter]\n'''\n\ndef read_chpoint_file(chpFilename, auxFilename):\n\tprint(chpFilename)\n\tprint(auxFilename)\n\n\twith open(chpFilename, \"rb\") as chpfp:\n\t\tind_m = array.array('i') # index of iterative method\n\t\tind_m.fromfile(chpfp, 1)\n\t\tprint ('ind_m:',ind_m) \n\t\tlocal_nRows = array.array('i') # number of local rows of decomposition (only real dipoles)\n\t\tlocal_nRows.fromfile(chpfp, 1)\n\t\tprint ('local_nRows:',local_nRows)\n\t\tniter = array.array('i') # iteration count\n\t\tniter.fromfile(chpfp, 1)\n\t\tprint('niter:',niter)\n\t\tcounter = array.array('i') # number of successive iterations without residual decrease\n\t\tcounter.fromfile(chpfp, 1)\n\t\tprint('counter:',counter)\n\nargvs = sys.argv\nargc = len(argvs)\n\nprint argvs\nif (argc < 3):\n\tprint(\"ERROR: chpoint file is not specified\\r\\n\")\n\tprint(\"   [cmd] [chpoint file] [auxiliary file]\\r\\n\")\n\tsys.exit()\n\nread_chpoint_file(chpFilename=argvs[1], auxFilename=argvs[2])\n```\n\n```txt:\u5b9f\u884c\n$ python read_chpoint.py LN-CHP LN-AUX \n['read_chpoint.py', 'LN-CHP', 'LN-AUX']\nLN-CHP\nLN-AUX\n('ind_m:', array('i', [5]))\n('local_nRows:', array('i', [27984]))\n('niter:', array('i', [0]))\n('counter:', array('i', [209]))\n```\n\n\u4e0a\u8a18\u306fniter\u3092\u8aad\u8fbc\u307f\u5931\u6557\u3057\u3066\u3044\u308b\u3002\n(C\u3067\u5b9f\u88c5\u3057\u305f\u6642\u306f\u4ee5\u4e0b\u3068\u306a\u308b\u3002)\n\n```txt:C\u5b9f\u88c5\n$ gcc read_chpoint.c && ./a.out LN-CHP LN-AUX \nind_m:5\nlocal_nRows:27984\nniter:230\ncounter:160\n```\n\n## v0.3 (size_t\u8aad\u8fbc\u307f\u5bfe\u5fdc, read [inprodR],[prev_err],[resid_scale])\n\n\u53c2\u8003 http://qiita.com/7of9/items/a2e032301b9771ae183e\n\u306ev0.3 \n\n```read_chpoint.py\nimport numpy as np\nimport array\nimport sys\n\n'''\nv0.3 Dec. 19, 2016\n\t- add wrap_fromfile()\n\t- read [inprodR],[prev_err],[resid_scale]\nv0.2 Dec. 19, 2016\n\t- fix bug > read [local_nRows] for \"size_t\" type\nv0.1 Dec. 18, 2016\n\t- read_chpoint_file() > read [ind_m],[local_nRows],[niter],[counter]\n'''\n\ndef wrap_fromfile(rfp, typecode):\n\tres = array.array(typecode)\n\tres.fromfile(rfp, 1)\n\treturn res\n\ndef read_chpoint_file(chpFilename, auxFilename):\n\tprint(chpFilename)\n\tprint(auxFilename)\n\n\twith open(chpFilename, \"rb\") as chpfp:\n\t\tind_m = wrap_fromfile(chpfp, 'i') # index of iterative method\n\t\tprint ('ind_m:',ind_m) \n\t\t# L: unsigned long = size_t\n\t\tlocal_nRows = wrap_fromfile(chpfp, 'L') # number of local rows of decomposition (only real dipoles)\n\t\tprint ('local_nRows:',local_nRows)\n\t\tniter = wrap_fromfile(chpfp, 'i') # iteration count\n\t\tprint('niter:',niter)\n\t\tcounter = wrap_fromfile(chpfp, 'i') # number of successive iterations without residual decrease\n\t\tprint('counter:',counter)\n\t\tinprodR = wrap_fromfile(chpfp, 'd') # used as |r_0|^2 and best squared norm of residual up to some iteration\n\t\tprint('inprodR:', inprodR)\n\t\tprev_err = wrap_fromfile(chpfp, 'd') # previous relative error; used in ProgressReport, initialized in IterativeSolver\n\t\tprint('prev_err:', prev_err)\n\t\tresid_scale = wrap_fromfile(chpfp, 'd') # scale to get square of relative error\n\t\tprint('resid_scale:', resid_scale) # scale to get square of relative error\n\nargvs = sys.argv\nargc = len(argvs)\n\nprint argvs\nif (argc < 3):\n\tprint(\"ERROR: chpoint file is not specified\\r\\n\")\n\tprint(\"   [cmd] [chpoint file] [auxiliary file]\\r\\n\")\n\tsys.exit()\n\nread_chpoint_file(chpFilename=argvs[1], auxFilename=argvs[2])\n```\n\n```txt:\u5b9f\u884c\n$ python read_chpoint.py LN-CHP LN-AUX \n['read_chpoint.py', 'LN-CHP', 'LN-AUX']\nLN-CHP\nLN-AUX\n('ind_m:', array('i', [5]))\n('local_nRows:', array('L', [27984L]))\n('niter:', array('i', [209]))\n('counter:', array('i', [139]))\n('inprodR:', array('d', [4.317011265934948]))\n('prev_err:', array('d', [0.3198525404317458]))\n('resid_scale:', array('d', [0.020384616751203153]))\n```\n\n```txt:C\u5b9f\u88c5\n$ ulimit -s unlimited && gcc read_chpoint.c && ./a.out LN-CHP LN-AUX\nind_m:5\nlocal_nRows:27984\nniter:209\ncounter:139\ninprodR:4.317\nprev_err:0.320\nresid_scale:0.020\n...\n```\n\nPython\u5b9f\u88c5\u3068C\u5b9f\u88c5\u3067\u540c\u3058\u306b\u306a\u3063\u305f\u3002\n\nv0.1\u306e\u7d50\u679c\u3068counter\u304c\u7570\u306a\u308b\u306e\u306f\u3001ADDA\u306e\u5b9f\u884c\u3067\u7570\u306a\u308b\u30a4\u30c6\u30ec\u30fc\u30b7\u30e7\u30f3\u56de\u6570\u306e\u7d50\u679c\u306b\u306a\u3063\u3066\u3044\u305f\u306e\u304b\u3082\u3057\u308c\u306a\u3044\u3002\n\n\n\n\n\n", "tags": ["borgWarp", "fileIO"]}