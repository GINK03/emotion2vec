{"tags": ["C", "\u8ad6\u7406\u5727\u7e2e", "C++", "\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0", "\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0"], "context": "\n\n\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\n\nlogic_comp.c\n#include<stdio.h>\n#include<stdlib.h>\n#include<string.h>\n#include<time.h>\n#include<math.h>\nvoid bin (int lacknum, int len, int flag){\n  char lack[21]={0};\n  char binum[50]={0};\n  int lacklen=0;\n  int remain=0;\n  FILE* fp;\n  if (flag!=0){\n    remove(\"table_lack/lack_list\");\n  }\n  if (flag!=2){\n    fp=fopen(\"table_lack/lack_list\",\"a\");\n    while(1) {\n      remain=lacknum % 2;\n      lacknum=(lacknum-remain)/2;\n      sprintf(binum,\"%d\",remain);\n      strcat(binum,lack);\n      sprintf(lack,\"%s\",binum);\n      lacklen++;\n      if(lacknum==0){\n    break;\n      }\n    }\n    for (int l=0;l<len-lacklen;l++) {\n      sprintf(binum,\"0\");\n      strcat(binum,lack);\n      sprintf(lack,\"%s\",binum);\n    }\n    fprintf(fp,\"%s\\n\",lack);\n    fclose(fp);\n  }\n}\n\nint ptnchk (char* table) {\n  FILE* fp;\n  char command[150];\n  char line[21]={0};\n  char str[21]={0};\n  char num_c[2]={0};\n  int num=0;\n  int len=0;\n  int base=1;\n  int result=0;\n  int count=0;\n  int count2=0;\n  int size=0;\n  fp=fopen(table,\"r\");\n  while(fgets(line,20,fp)){\n    size++;\n  }\n  fclose(fp);\n  fp=fopen(table,\"r\");\n  remove(\"table_lack/temp_lack\");\n  sprintf(command,\"cat %s | sort -u > table_lack/temp_lack\",table);\n  system(command);\n  fp=fopen(\"table_lack/temp_lack\",\"r\");\n  fgets(line,20,fp);\n  strtok(line,\" \");\n  len=strlen(line);\n  base=pow(2,len-1);\n  fclose(fp);\n  fp=fopen(\"table_lack/temp_lack\",\"r\");\n  while( fgets(line,20,fp) ) {\n    strtok(line,\" \");\n    strcpy(str,line);\n    base=pow(2,len-1);\n    result=0;\n    for (int i =0 ; i < len ; i++) {\n      strncpy(num_c,str+i,1);\n      num_c[1]='\\0';\n      num=atoi(num_c);\n      result+=base*num;\n      base=base/2;\n    }\n    while (count!=result){\n      if(count2==0){\n    bin(count,len,1);\n      } else {\n    bin(count,len,0);\n      }\n      count++;\n      count2++;\n    }\n    count++;\n  }\n  for(int k=count;k<pow(2,len);k++) {\n    bin(k,len,0);\n    count2++;\n  }\n  fclose(fp);\n  if (count2>0 && count2<size){\n    return 2;\n  } else if (count2>0){\n    bin(count,len,2);\n    return 1;\n  } else {\n    bin(count,len,2);\n    return 0;\n  }\n}\n\nint uniq (char* filename){\n  int size=0;\n  int field=0;\n  int len=0;\n  int flag=0;\n  int count=0;\n  char line[262145]={0};\n  char line2[262145]={0};\n  char part[16384][15]={0};\n  char* line_data;\n  FILE* fp;\n  FILE* fp2;\n  FILE* fp3;\n  FILE* fp4;\n  //\u30d5\u30a1\u30a4\u30eb\u884c\u6570\u53d6\u5f97\n  fp=fopen(filename,\"r\");\n  while ( fgets(line,262144,fp) ) {\n    size++;\n  }\n  fclose(fp);\n  //\u30d5\u30a3\u30fc\u30eb\u30c9\u6570\u53d6\u5f97\n  if ( strstr(line,\" \\n\") ){\n    field=0;\n  } else {\n    field=1;\n  }\n  strtok(line,\" \");\n  //\u30d1\u30bf\u30fc\u30f3\u6587\u5b57\u5217\u53d6\u5f97\n  len=strlen(line);\n  while( strtok(NULL,\" \") ) {\n    field++;\n  }\n\n  fp=fopen(filename,\"r\");\n  remove(\"uniq_temp\");\n  for ( int j=0;j<size;j++ ) {\n    //cp_table_uniq\u306e1\u884c\u3092\u5207\u308a\u51fa\u3059\n    fgets(line,262144,fp);\n    //\u884c\u3092\u30d5\u30a3\u30fc\u30eb\u30c9\u3054\u3068\u306b\u5206\u96e2\n    for ( int i=0;i<field;i++ ) {\n      if ( i==0 ) {\n        line_data=strtok(line,\" \");\n      } else {\n        line_data=strtok(NULL,\" \");\n      }\n      strncpy(&part[i][0],line_data,len);\n      part[i][len]='\\0';\n    }\n    //\u5165\u529b\u30d5\u30a1\u30a4\u30eb\u304b\u3089\u5404\u30d5\u30a3\u30fc\u30eb\u30c9\u3092\u691c\u7d22\n    fp2=fopen(filename,\"r\");\n    fp3=fopen(\"uniq_temp\",\"a\");\n    while( fgets(line2,262144,fp2) ) {\n      for (int i=0;i<field;i++) {\n        flag=1;\n        if ( !strstr(line2,part[i]) ) {\n          flag=0;\n          break;\n        }\n      }\n      if (flag==1) {\n        fprintf(fp3,\"%s\",line2);\n        break;\n      }\n    }\n    fclose(fp2);\n    fclose(fp3);\n  }\n  fclose(fp);\n  //uniq_temp\u3092\u30bd\u30fc\u30c8\u3057\u3066uniq_temp2\u306b\u66f8\u304d\u8fbc\u3080\n  system(\"cat uniq_temp | sort -u > uniq_temp2\");\n  remove(\"uniq_temp\");\n  //uniq_temp4\u3092table\u306b\u66f8\u304d\u623b\u3059\n  remove(filename);\n  fp=fopen(filename,\"a\");\n  fp4=fopen(\"uniq_temp2\",\"r\");\n  count=0;\n  while( fgets(line,122880,fp4) ) {\n    fprintf(fp,\"%s\",line);\n    count++;\n  }\n  fclose(fp);\n  fclose(fp4);\n  remove(\"uniq_temp2\");\n  printf(\"%d lines \\n\" , count);\n  if (count > 1) {\n    return 2;\n  } else if (count==1){\n    return 1;\n  } else {\n    return 0;\n  }\n}\n\nint logic_comp_2 (char* input_table) {\n  FILE* fp;\n  FILE* fp2;\n  FILE* fp3;\n  FILE* fp4;\n  FILE* fp5;\n  char* chk=0;\n  char* chk2=0;\n  char* chk3=0;\n  char* chk4=0;\n  int sign;\n  int line_num=0;\n  int chkint;\n  int chk2int;\n  int clen;\n  int coreint=0;\n  int coreintconv=0;\n  int pattern_n_len;\n  int groupchk=0;\n  int count=0;\n  int count2=0;\n  int res;\n  char pattern_a[100]={0};\n  char pattern_b[100]={0};\n  char pattern_n[100]={0};\n  char core[2]={0};\n  char coreconv[2]={0};\n  char line[100];\n  char pattern[100];\n  //\u65e2\u5b58\u30d5\u30a1\u30a4\u30eb(table_2,table_1)\u306e\u524a\u9664\n  remove(\"table/table_1\");\n  remove(\"table/table_2\");\n  remove(\"temp\");\n  //\u5165\u529btable\u3092temp\u306b\u30b3\u30d4\u30fc\n  fp=fopen(input_table,\"r\");\n  fp2=fopen(\"temp\",\"a\");\n  while( fgets(line,100,fp) != NULL ){\n    strtok(line,\"\\n\\0\");\n    fprintf(fp2,\"%s\\n\",line);\n  }\n  fclose(fp2);\n  fclose(fp); \n  fp2=fopen(\"temp\",\"r\");\n  while( fgets(line,100,fp2) != NULL ){\n    line_num++;\n  }\n  fclose(fp2);\n  for (int i=0;i<line_num;i++){\n    //temp\u306e\u5148\u982d\u884c\u3092\u5207\u308a\u51fa\u3057\u305d\u306e\u4e2d\u306e1\u30d5\u30a3\u30fc\u30eb\u30c9\u76ee\u3092pattern\u306b\u4ee3\u5165\n    fp2=fopen(\"temp\",\"r\");\n    fscanf(fp2,\"%s%d\",pattern,&sign);\n    //\u5165\u529btable\u304b\u3089pattern\u3092\u691c\u7d22\u30572\u30d5\u30a3\u30fc\u30eb\u30c9\u76ee\u3092chk\u306b,\u691c\u7d22\u3057\u305f\u7d50\u679c\u3092chk3\u306b\u4ee3\u5165\n    fp=fopen(input_table,\"r\");\n    while( fgets(line,100,fp) != NULL ){\n      strtok(line,\"\\n\\0\");\n      chk3=strstr(line,pattern);\n      if(chk3){\n    chk=strtok(line,\" \");\n    chk=strtok(NULL,\" \");\n    break;\n      } else {\n    chk=\"\";\n      }\n    }\n    fclose(fp2);\n    fclose(fp); \n    //chk\u304c1\u304bchk3\u304c\u7a7a\u306e\u5834\u5408\n    chkint=atoi(chk);\n    if(chkint==1 || chk3==NULL){\n      //pattern\u306e\u6587\u5b57\u6570\u3092clen\u306b\u4ee3\u5165\n      clen=strlen(pattern);\n      for (int j=0;j<clen;j++){\n    //pattern\u3092\u524d\u534a\u3068\u5f8c\u534a\u3068\u4e2d\u5fc3\u90e8\u306b\u5206\u3051\u308b\n    strncpy(pattern_a,pattern,j);\n    pattern_a[j]='\\0';\n        strncpy(core,pattern+j,1);\n    core[1]='\\0';\n    strncpy(pattern_b,pattern+j+1,clen-j);\n    //\u4e2d\u5fc3\u90e8\u304c\uff11\u306a\u3089\uff10\u306b,\u4e2d\u5fc3\u90e8\u304c\uff10\u306a\u3089\uff11\u306b\u5165\u308c\u66ff\u3048\u305fpattern_n\u3092\u4f5c\u6210\n    coreint=atoi(core);\n    if (coreint == 0){\n      coreintconv=1;\n    }else if (coreint == 1){\n      coreintconv=0;\n    }\n    sprintf(coreconv,\"%d\",coreintconv);\n    pattern_n_len=strlen(pattern_n);\n    memset(pattern_n,'\\0',pattern_n_len);\n    strcat(pattern_n,pattern_a);\n    strcat(pattern_n,coreconv);\n    strcat(pattern_n,pattern_b);\n    //pattern_n\u3092\u5165\u529btable\u304b\u3089\u691c\u7d22\u30572\u30d5\u30a3\u30fc\u30eb\u30c9\u76ee\u3092chk2\u306b,\u691c\u7d22\u7d50\u679c\u3092chk4\u306b\u4ee3\u5165\n    fp=fopen(input_table,\"r\");\n    while( fgets(line,100,fp) != NULL ){\n      strtok(line,\"\\n\\0\");\n      chk4=strstr(line,pattern_n);\n      if(chk4){\n        chk2=strtok(line,\" \");\n        chk2=strtok(NULL,\" \");\n        break;\n      } else {\n        chk2=\"\";\n      }\n    }\n    fclose(fp);\n    //chk2\u304c1\u304bchk4\u304c\u7a7a\u306e\u5834\u5408\n    chk2int=atoi(chk2);\n    if ( chk2int == 1 || !chk4 ){\n      groupchk=1;\n      //\u65e7pattern\u3068\u65b0pattern\u3092group\u306b\u3057table/table_2\u306b\u8ffd\u52a0\n      fp3=fopen(\"table/table_2\",\"a\");\n      fprintf(fp3,\"%s %s\\n\",pattern,pattern_n);\n      count2++;\n      fclose(fp3);\n      //temp\u304b\u3089\u65e7pattern\u3068\u65b0pattern\u3092\u524a\u9664\n      remove(\"temp_cp\");\n      fp2=fopen(\"temp\",\"r\");\n      fp4=fopen(\"temp_cp\",\"a\");\n      while( fgets(line,100,fp2) != NULL ){\n        strtok(line,\"\\n\\0\");\n        if(!strstr(line,pattern) && !strstr(line,pattern_n)){\n          fprintf(fp4,\"%s\\n\",line);\n        }\n      }\n      fclose(fp2);\n      fclose(fp4); \n      remove(\"temp\");\n      fp4=fopen(\"temp_cp\",\"r\");\n      fp2=fopen(\"temp\",\"a\");\n      while( fgets(line,100,fp4) != NULL ){\n        strtok(line,\"\\n\\0\");\n        fprintf(fp2,\"%s\\n\",line);\n      }\n      fclose(fp2);\n      fclose(fp4); \n    }\n      }\n      if (groupchk == 0){\n    //pattern\u3092table/table1\u306b\u8ffd\u52a0\n    fp5=fopen(\"table/table_1\",\"a\");\n    fprintf(fp5,\"%s\\n\",pattern);\n    count++;\n    fclose(fp5);\n    //temp\u304b\u3089pattern\u3092\u524a\u9664\n    remove(\"temp_cp\");\n    fp2=fopen(\"temp\",\"r\");\n    fp4=fopen(\"temp_cp\",\"a\");\n    while( fgets(line,100,fp2) != NULL ){\n      strtok(line,\"\\n\\0\");\n      if(!strstr(line,pattern)){\n        fprintf(fp4,\"%s\\n\",line);\n      }\n    }\n    fclose(fp2);\n    fclose(fp4); \n    remove(\"temp\");\n    fp4=fopen(\"temp_cp\",\"r\");\n    fp2=fopen(\"temp\",\"a\");\n    while( fgets(line,100,fp4) != NULL ){\n      strtok(line,\"\\n\\0\");\n      fprintf(fp2,\"%s\\n\",line);\n    }\n    fclose(fp2);\n    fclose(fp4);\n      }else{\n    groupchk=0;\n      }\n    }else{\n      //chk\u304c1\u3067\u306f\u306a\u304f\u3001\u304b\u3064chk3\u304c\u7a7a\u3067\u7121\u3044\u5834\u5408temp\u304b\u3089pattern\u3092\u524a\u9664 \n      remove(\"temp_cp\");\n      fp2=fopen(\"temp\",\"r\");\n      fp4=fopen(\"temp_cp\",\"a\");\n      while( fgets(line,100,fp2) != NULL ){\n    strtok(line,\"\\n\\0\");\n    if(!strstr(line,pattern)){\n      fprintf(fp4,\"%s\\n\",line);\n    }\n      }\n      fclose(fp2);\n      fclose(fp4); \n      remove(\"temp\");\n      fp4=fopen(\"temp_cp\",\"r\");\n      fp2=fopen(\"temp\",\"a\");\n      while( fgets(line,100,fp4) != NULL ){\n    strtok(line,\"\\n\\0\");\n    fprintf(fp2,\"%s\\n\",line);\n      }\n      fclose(fp2);\n      fclose(fp4);\n    } \n    //temp\u304c\u7a7a\u30d5\u30a1\u30a4\u30eb\u306b\u306a\u308c\u3070\u30eb\u30fc\u30d7\u3092\u629c\u3051\u308b\n    fp2=fopen(\"temp\",\"r\");\n    if(!fgets(line,100,fp2)){\n      fclose(fp2);\n      break;\n    }else{\n      fclose(fp2);\n    }\n  }\n  if (count > 1) { \n    printf(\"logic comp 1 ... end  \");\n    uniq(\"table/table_1\");\n  }\n  if (count2 > 1) {\n    printf(\"logic comp 2 ... end  \");\n    res=uniq(\"table/table_2\");\n  } else {\n    res=0;\n  }\n  remove(\"temp\");\n  remove(\"temp_cp\");\n  return res;\n}\n\nint logic_comp_n (char* input_table , int half , int search_flag){\n  int size = 0;\n  int len=0;\n  int comp=0;\n  int coreint=0;\n  int coreintpast=0;\n  int coreint_n=0;\n  int sum=0;\n  int count=0;\n  int count2=0;\n  int countpast=0;\n  int countchk=0;\n  int org_flag=0;\n  int res;\n  FILE* fp;\n  FILE* fp2;\n  FILE* fp3;\n  FILE* fp4;\n  FILE* fp6;\n  char filename[100];\n  char filename_half[100];\n  char line[122881];\n  char search_line[122881];\n  char org_line[122881];\n  char pattern[8192][15]={0};\n  char pattern_n[8192][15]={0};\n  char p1[8192][15]={0};\n  char p2[8192][15]={0};\n  char core[8192][2]={0};\n  char core_n[8192][2]={0};\n  char* line_input;\n  //table\u540d(\u691c\u7d22\u5bfe\u8c61)\u3068\u500d\u30b5\u30a4\u30ba\u306etable\u540d(\u8ffd\u52a0\u5bfe\u8c61)\u4f5c\u6210\n  comp=half*2;\n  sprintf(filename,\"table/table_%d\",comp);\n  sprintf(filename_half,\"table/table_%d\",half);\n  remove(filename);\n  //table\u306e\u884c\u6570\u78ba\u8a8d\n  fp=fopen(filename_half,\"r\");\n  while( fgets(line,122880,fp) ){\n    size++;\n  }\n  fclose(fp);\n  //table\u306e\u30b3\u30d4\u30fc\u30d5\u30a1\u30a4\u30eb\u4f5c\u6210\n  fp=fopen(filename_half,\"r\");\n  remove(\"temp_table\");\n  fp2=fopen(\"temp_table\",\"a\");\n  while( fgets(line,122880,fp) ){\n    fprintf(fp2,\"%s\",line);\n  }\n  fclose(fp);\n  fclose(fp2);\n  //bit\u5e45\u3092\u78ba\u8a8d\n  fp=fopen(filename_half,\"r\");\n  fgets(line,122880,fp);\n  strtok(line,\" \");\n  len=strlen(line);\n  fclose(fp);\n  //\u30c6\u30fc\u30d6\u30eb\u306e1\u884c\u3092\u5207\u308a\u51fa\u3057\u3055\u3089\u306b\u305d\u306e\u4e2d\u306e1\u30d5\u30a3\u30fc\u30eb\u30c9\u3092\u5207\u308a\u51fa\u3059\n  //\u30d5\u30a3\u30fc\u30eb\u30c9\u5185\u306ebit\u5217\u30921bit\u305a\u3064\u53cd\u8ee2\u3055\u305btable\u304b\u3089\u691c\u7d22\u3059\u308b\n  fp=fopen(filename_half,\"r\");\n  for (int i=0;i<size;i++) {\n    fgets(line,122880,fp);\n    for (int j=0;j<half;j++) {\n      if (j==0) {\n        line_input=strtok(line,\" \");\n      }else{\n        line_input=strtok(NULL,\" \");\n      }\n      strcpy(&pattern[j][0],line_input);\n    }\n    for (int k=0;k<len;k++){\n      //\u30ab\u30a6\u30f3\u30bf\u30af\u30ea\u30a2\n      sum=0;\n      count=0;\n      countchk=0;\n      org_flag=0;\n      for (int l=0;l<half;l++) {\n        strncpy(&p1[l][0],&pattern[l][0],k);\n        p1[l][k]='\\0';\n        strncpy(&core[l][0],&pattern[l][k],1);\n        core[l][1]='\\0';\n        strncpy(&p2[l][0],&pattern[l][k+1],len - k - 1);\n        p2[l][len-k-1]='\\0';\n        coreint = atoi(&core[l][0]);\n        coreint_n = 1-coreint;\n        sprintf(&core_n[l][0],\"%d\",coreint_n);\n        if (l == 0) {\n          coreintpast=coreint;\n        } else {\n          if (coreint != coreintpast){\n            sum = 1;\n        break;\n      } else {\n            coreintpast=coreint;\n          }\n        }\n      }\n      //\u30d1\u30bf\u30fc\u30f3\u306e\u5b58\u5728\u30c1\u30a7\u30c3\u30af\n      if (sum==0){\n        for (int m=0;m<half;m++ ) {\n          pattern_n[m][0]='\\0';\n          strcat(pattern_n[m],p1[m]);\n          strcat(pattern_n[m],core_n[m]);\n          strcat(pattern_n[m],p2[m]);\n          fp2=fopen(\"temp_table\",\"r\");\n      countpast=count;\n          while ( fgets(search_line, 122880, fp2) ) {\n            if( strstr(search_line, &pattern_n[m][0]) ) {\n              count++;\n              break;\n            }\n      }\n      fclose(fp2);\n      if (count==countpast) {\n        if (search_flag==1) {\n          fp4=fopen(input_table,\"r\");\n          while ( fgets(org_line,122880,fp4) ) {\n        if ( strstr(org_line, &pattern_n[m][0]) ) {\n          org_flag++;\n          break;\n        }\n          }\n          fclose(fp4);\n          if (org_flag==0) {\n        count++;\n        break;\n          }\n        } else if (search_flag==2) {\n          fp6=fopen(\"table_lack/lack_list\",\"r\");\n          while ( fgets(org_line,122880,fp6) ) {\n        if ( strstr(org_line, &pattern_n[m][0]) ) {\n          count++;\n          break;\n        }\n          }\n          fclose(fp6);\n        }\n      }\n        }\n        //\u30d1\u30bf\u30fc\u30f3\u66f8\u304d\u8fbc\u307f\n        fp3=fopen(filename,\"a\");\n        if (count==half) {\n          for (int n=0;n<half;n++) {\n            strtok(pattern[n],\"\\n\");\n            strtok(pattern_n[n],\"\\n\");\n            fprintf(fp3,\"%s %s \", pattern[n],pattern_n[n]);\n          }\n          fprintf(fp3,\"\\n\");\n      count2++;\n        }\n        fclose(fp3);\n      }\n    }\n  }\n  fclose(fp);\n  remove(\"temp_table\");\n  if (count2 > 1) {\n    printf(\"logic comp %d ... end  \",comp);\n    res=uniq(filename);\n  } else {\n    res=0;\n  }\n  return res;\n}\n\nint resize (int half) {\n  FILE* fp;\n  FILE* fp2;\n  FILE* fp3;\n  char line[122881];\n  char line2[122881];\n  char part[8192][15];\n  int line_num=0;\n  int count=0;\n  int count2=0;\n  int comp=0;\n  int br=0;\n  char filename[100];\n  char filename2[100];\n  char* line_data;\n  comp=half*2;\n  sprintf(filename,\"table/table_%d\",half);\n  sprintf(filename2,\"table/table_%d\",comp);\n  fp2=fopen(filename2,\"r\");\n  while( fgets(line,122880,fp2) ){\n    line_num++;\n  }\n  fclose(fp2);\n  fp=fopen(filename,\"r\");\n  fp3=fopen(\"resize_temp\",\"a\");\n  while( fgets(line,122880,fp) ) {\n    count=0;\n    while(1) {\n      if(count==0){\n        line_data=strtok(line,\" \");\n      } else {\n        line_data=strtok(NULL,\" \");\n      }\n      sprintf(part[count],\"%s\",line_data);\n      if( strstr(part[count],\"0\\n\") || strstr(part[count],\"1\\n\") ) {\n        strtok(part[count],\"\\n\\0\");\n        count++;\n        break;\n      } else if ( strstr(part[count],\"\\n\") ) {\n        break;\n      } else {\n        count++;\n      }\n    }\n    fp2=fopen(filename2,\"r\");\n    count2=0;\n    while( fgets(line2,122880,fp2) ) {\n      br=0;\n      for (int i=0; i<count; i++) {\n        if ( strstr(line2,part[i]) ){\n          br++;\n        } else {\n          break;\n        }\n      }\n      if(br!=count){\n        count2++;\n      }\n    }\n    fclose(fp2);\n    if(count2 == line_num){\n      for (int j=0; j<count; j++) {\n        fprintf(fp3,\"%s \",part[j]);\n      }\n      fprintf(fp3,\"\\n\");\n    }\n  }\n  fclose(fp);\n  fclose(fp3);\n  remove(filename);\n  fp=fopen(filename,\"a\");\n  fp3=fopen(\"resize_temp\",\"r\");\n  count=0;\n  while( fgets(line,122880,fp3) ) {\n    fprintf(fp,\"%s\",line);\n    count++;\n  }\n  fclose(fp);\n  fclose(fp3);\n  remove(\"resize_temp\");\n  printf(\" ..resized table_%d : %d lines\\n\",half , count);\n  if (count>1) {\n    return 1;\n  } else {\n    return 0;\n  }\n}\n\nvoid compact (int max_dim) {\n  FILE* fp;\n  FILE* fp2;\n  FILE* fp3;\n  FILE* fp4;\n  char line[122881];\n  char line2[122881];\n  char part[8192][15];\n  int line_num;\n  int count=0;\n  int br[8192]={0};\n  int chk=0;\n  char filename[100];\n  char filename2[100];\n  char* line_data;\n  printf(\" ..making table_%d compact ...\", max_dim);\n  sprintf(filename,\"table/table_%d\",max_dim);\n  sprintf(filename2,\"table/table_%d\",max_dim);\n  fp=fopen(filename,\"r\");\n  while( fgets(line,122880,fp) ){\n    line_num++;\n  }\n  fclose(fp);\n  fp=fopen(filename,\"r\");\n  fp2=fopen(\"compact_temp\",\"a\");\n  while( fgets(line,122880,fp) ) {\n    count=0;\n    while(1) {\n      if(count==0){\n        line_data=strtok(line,\" \");\n      } else {\n        line_data=strtok(NULL,\" \");\n      }\n      sprintf(part[count],\"%s\",line_data);\n      if( strstr(part[count],\"0\\n\") || strstr(part[count],\"1\\n\") ) {\n        strtok(part[count],\"\\n\\0\");\n        count++;\n        break;\n      } else if ( strstr(part[count],\"\\n\") ) {\n        break;\n      } else {\n        count++;\n      }\n    }\n    for (int k=0; k<count; k++) {\n      br[k]=0;\n    }\n    //\u5143\u30d5\u30a1\u30a4\u30eb\u304b\u3089\u691c\u7d22\n    fp3=fopen(filename2,\"r\");\n    while( fgets(line2,122880,fp3) ) {\n      for (int i=0; i<count; i++) {\n        if ( strstr(line2,part[i]) ){\n          br[i]++;\n        }\n      }\n    }\n    fclose(fp3);\n    //comp_search_list\u304b\u3089\u691c\u7d22\n    if ((fp4=fopen(\"comp_search_list\",\"r\"))){\n      while( fgets(line2,122880,fp4) ) {\n        for (int i=0; i<count; i++) {\n          if ( strstr(line2,part[i]) ){\n            br[i]--;\n          }\n        }\n      }\n      fclose(fp4);\n    }\n    chk=0;\n    for (int l=0;l<count; l++){\n      if (br[l] < 2){\n        chk=1;\n        break;\n      }\n    }\n    if(chk == 1) {\n      for (int j=0; j<count; j++) {\n        fprintf(fp2,\"%s \",part[j]);\n      }\n      fprintf(fp2,\"\\n\");\n    } else {\n      fp4=fopen(\"comp_search_list\",\"a\");\n      for (int j=0; j<count; j++) {\n        fprintf(fp4,\"%s \",part[j]);\n      }\n      fprintf(fp4,\"\\n\");\n      fclose(fp4);\n    }\n  }\n  fclose(fp);\n  fclose(fp2);\n  remove(filename);\n  fp=fopen(filename,\"a\");\n  fp2=fopen(\"compact_temp\",\"r\");\n  while( fgets(line,122880,fp2) ) {\n    fprintf(fp,\"%s\",line);\n  }\n  fclose(fp);\n  fclose(fp2);\n  remove(\"compact_temp\");\n  remove(\"comp_search_list\");\n  printf(\"end\\n\");\n}\n\nint logic_function (int field) {\n  int len=0;\n  int num=0;\n  int sum=0;\n  int flag=0;\n  char line[122881]={0};\n  char linecp[122881]={0};\n  char* data;\n  char bit[2]={0};\n  FILE* fp;\n  char filename[100];\n  sprintf(filename,\"table/table_%d\",field);\n  if(!(fp=fopen(filename,\"r\"))){\n    return 0;\n  }\n  fgets(line,122880,fp);\n  if (!strstr(line,\"0\") && !strstr(line,\"1\")){\n    remove(filename);\n    return 0;\n  }\n  fclose(fp);\n  strtok(line,\" \");\n  len=strlen(line);\n  fp=fopen(filename,\"r\");\n  while ( fgets(line,122880,fp) ) {\n    if (flag==0) {\n      flag=1;\n    } else {\n      printf(\" + \");\n    }\n    for (int i=0;i<len;i++) {\n      sum=0;\n      for(int j=0;j<field;j++) {\n        strcpy(linecp,line);\n        for (int k=0;k<j + 1;k++) {\n          if(k==0) {\n            data=strtok(linecp,\" \");\n          } else {\n            data=strtok(NULL,\" \");\n          }\n        }\n        strncpy(bit,data + i,1);\n        bit[1]='\\0';\n        num=atoi(bit);\n        sum+=num;\n      }\n      if (sum==0) {\n        printf(\"[`%d]\",i);\n      } else if (sum==field){\n        printf(\"[%d]\",i);\n      }\n    }\n  }\n  printf(\"\\n\");\n  fclose(fp);\n  return 0;\n}\n\nint timer(void){\n  time_t now = time(NULL);\n  struct tm *pnow = localtime(&now);\n  char buff[128]=\"\";\n  sprintf(buff,\"%d:%d:%d\",pnow->tm_hour,pnow->tm_min,pnow->tm_sec);\n  printf(\"%s\\n\",buff);\n  return 0;\n}\n\nint main (int argc, char* argv[]) {\n  int res;\n  int field=2;\n  int chk=0;\n  int comp=0;\n  clock_t start,end;\n  timer();\n  start=clock();\n  system(\"rm -f table/table_*\");\n  chk=ptnchk(argv[1]);\n  res=logic_comp_2(argv[1]);\n  if (res==2) {\n    while (res==2) {\n      res=logic_comp_n(argv[1],field,chk);\n      if (res > 0) {\n        comp=resize(field);\n        if(comp==1){\n          compact(field);\n        }\n      }\n      field=field*2;\n    }\n    if (res > 0) {\n      compact(field);\n    }\n  } else {\n    compact(2);\n  } \n  while(field>0){\n    logic_function(field);\n    field=field/2;\n  }\n  timer();\n  end=clock();\n  printf(\"exec time %d [ms]\\n\",(int)(end - start)/1000);\n}\n\n\n\n\n\u4e8b\u524d\u6e96\u5099\n\u5b9f\u884c\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u5185\u306b\u6b21\u306e\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u3092\u4f5c\u6210\u3059\u308b\u3002\n\u30fbtable\n\u30fbtable_lack\n\n\u771f\u7406\u5024\u8868\u306e\u4f5c\u6210\n\u30c6\u30ad\u30b9\u30c8\u30d5\u30a1\u30a4\u30eb\u306b\u6b21\u306e\u3088\u3046\u306b\u8a18\u8ff0\u3059\u308b\u3002\n\u4f8b\u306f10bit\u5165\u529b\u306e\u771f\u7406\u5024\u8868\u3002\u30d5\u30a1\u30a4\u30eb\u540d\u3092\u3053\u3053\u3067\u306ftable_10D\u3068\u3059\u308b(\u306a\u3093\u3067\u3082\u826f\u3044)\u3002\n\u8868\u306b\u7121\u3044\u30d1\u30bf\u30fc\u30f3(0000000000\u306a\u3069)\u306f\u30c9\u30f3\u30c8\u30b1\u30a2\u3068\u3057\u3066\u6271\u308f\u308c\u308b\u3002\n0000001100  1\n1000011100  1\n0100011100  1\n1100111100  0\n0010111100  0\n1010111100  0\n0110111100  0\n1110111100  1\n0101111100  1\n1101111100  1\n0100000001  1\n0000000011  1\n1100000011  1\n1101101010  1\n0011101010  0\n1011101010  0\n0111101010  0\n\n\n\u30b3\u30f3\u30d1\u30a4\u30eb\ngcc logic_comp.c -o logic_comp.out -lm -std=c99 -O3\n\n\n\u5b9f\u884c\u4f8b\n# ./logic_comp.out table_10D\n10:3:8\nlogic comp 2 ... end  87 lines \nlogic comp 4 ... end  366 lines \n ..resized table_2 : 0 lines\nlogic comp 8 ... end  883 lines \n ..resized table_4 : 0 lines\nlogic comp 16 ... end  1345 lines \n ..resized table_8 : 0 lines\nlogic comp 32 ... end  1331 lines \n ..resized table_16 : 0 lines\nlogic comp 64 ... end  835 lines \n ..resized table_32 : 0 lines\nlogic comp 128 ... end  302 lines \n ..resized table_64 : 0 lines\nlogic comp 256 ... end  52 lines \n ..resized table_128 : 5 lines\n ..making table_128 compact ...end\nlogic comp 512 ... end  3 lines \n ..resized table_256 : 15 lines\n ..making table_256 compact ...end\n[`4] + [`6] + [9]\n[`0][`2] + [`1][`2] + [`3][8] + [`5][7] + [`7][`8] + [`2][3] + [3][5]\n[0][1][`5] + [0][1][`7] + [0][1][8] + [0][1][3] + [0][1][2]\n10:4:4\nexec time 54670 [ms]\n\n\u203b\u7d50\u679c\u306e\u898b\u65b9\n\n\u3000['A]=NOT(A)\n\u3000[A][B]=AND(A,B)\n\u3000[A]+[B]=OR(A,B)\n\u3000[A](\u6539\u884c)[B]=OR(A,B)\n\n\n\u6ce8\u610f\u70b9\n\u540c\u3058\u5b9f\u884c\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u5185\u3067\u8907\u6570\u5b9f\u884c\u3059\u308b\u3068\u3001\u4e2d\u9593\u30d5\u30a1\u30a4\u30eb\u306e\u7af6\u5408\u304c\u767a\u751f\u3059\u308b\u3002\n\u307e\u305f\u300112281\u6587\u5b57\u306e\u914d\u5217\u3092\u7528\u610f\u3057\u3066\u3044\u308b\u304c\u3001\u3053\u308c\u306f\u5165\u529bbit\u5e45\u6700\u592716bit\u306b\u5bfe\u5fdc\u3055\u305b\u3066\u3044\u308b\u3002malloc\u3067\u52d5\u7684\u30e1\u30e2\u30ea\u5272\u308a\u5f53\u3066\u3092\u884c\u3046\u3053\u3068\u3067(\u30e1\u30e2\u30ea\u5bb9\u91cf\u7bc4\u56f2\u5185\u3067\u306f)\u7121\u5236\u9650\u306b\u5165\u529bbit\u5e45\u3092\u62e1\u5f35\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u308b\u3002\n\u4eca\u5f8c\u6539\u5584\u4e88\u5b9a\u3002\n\n\u5b9f\u884c\u6642\u9593\u30aa\u30fc\u30c0\n\n\u56f3\u306f\u5165\u529bbit\u5e45(dimension)\u3092\u6a2a\u8ef8\u3001\u5b9f\u884c\u6642\u9593(ms\u5bfe\u6570)\u3092\u7e26\u8ef8\u306b\u30d7\u30ed\u30c3\u30c8\u3057\u305f\u3082\u306e\u3067\u3042\u308b\u3002\n\u5165\u529b\u3068\u306a\u308b\u771f\u7406\u5024\u8868\u3092\u30e9\u30f3\u30c0\u30e0\u306b\u4f5c\u6210\u3057\u3066\u5b9f\u884c\u3059\u308b\u3053\u3068\u3067\u771f\u7406\u5024\u8868\u306e\u30d1\u30bf\u30fc\u30f3\u3070\u3089\u3064\u304d\u306b\u3088\u308b\u5b9f\u884c\u6642\u9593\u8aa4\u5dee\u306e\u50be\u5411\u3082\u898b\u308b\u3053\u3068\u304c\u3067\u304d\u3066\u3044\u308b(dimension=11,12\u306f\u6642\u9593\u304c\u304b\u304b\u308b\u305f\u3081\u30d7\u30ed\u30c3\u30c8\u6570\u3092\u7701\u7565\u3057\u3066\u3044\u308b)\u3002\u5165\u529bbit\u5e45\u304c1bit\u5897\u3059\u3054\u3068\u306b\u5b9f\u884c\u6642\u9593\u304c\u7d0410\u500d\u3068\u306a\u308b\u3053\u3068\u304c\u5206\u304b\u308b\u3002dimension=12\u3067\u6570\u6642\u9593\u306e\u5b9f\u884c\u6642\u9593\u3067\u3042\u308b\u3053\u3068\u304b\u3089dimension=13\u3067\u6570\u65e5\u304b\u304b\u308b\u3053\u3068\u304c\u4e88\u60f3\u3055\u308c\u308b\u3002\u5b9f\u7528\u9762\u3092\u8003\u3048\u308b\u3068\u9ad8\u901f\u5316\u304c\u5fc5\u8981\u3067\u3042\u308a\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u3092\u898b\u76f4\u3059\u5fc5\u8981\u304c\u3042\u308b\u3002\n(dimension\u304c\u5c0f\u3055\u3044\u9818\u57df\u3067\u306f\u7279\u6027\u304c\u30d5\u30e9\u30c3\u30c8\u306b\u306a\u3063\u3066\u3044\u308b\u304c\u3001\u3053\u308c\u306f\u51e6\u7406\u6642\u9593\u3088\u308a\u30d5\u30a1\u30a4\u30eb\u5165\u51fa\u529b\u6642\u9593\u304c\u652f\u914d\u7684\u306b\u306a\u308b\u304b\u3089\u3060\u308d\u3046\u3002)\n#\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\n\n```c:logic_comp.c\n#include<stdio.h>\n#include<stdlib.h>\n#include<string.h>\n#include<time.h>\n#include<math.h>\nvoid bin (int lacknum, int len, int flag){\n  char lack[21]={0};\n  char binum[50]={0};\n  int lacklen=0;\n  int remain=0;\n  FILE* fp;\n  if (flag!=0){\n    remove(\"table_lack/lack_list\");\n  }\n  if (flag!=2){\n    fp=fopen(\"table_lack/lack_list\",\"a\");\n    while(1) {\n      remain=lacknum % 2;\n      lacknum=(lacknum-remain)/2;\n      sprintf(binum,\"%d\",remain);\n      strcat(binum,lack);\n      sprintf(lack,\"%s\",binum);\n      lacklen++;\n      if(lacknum==0){\n\tbreak;\n      }\n    }\n    for (int l=0;l<len-lacklen;l++) {\n      sprintf(binum,\"0\");\n      strcat(binum,lack);\n      sprintf(lack,\"%s\",binum);\n    }\n    fprintf(fp,\"%s\\n\",lack);\n    fclose(fp);\n  }\n}\n\nint ptnchk (char* table) {\n  FILE* fp;\n  char command[150];\n  char line[21]={0};\n  char str[21]={0};\n  char num_c[2]={0};\n  int num=0;\n  int len=0;\n  int base=1;\n  int result=0;\n  int count=0;\n  int count2=0;\n  int size=0;\n  fp=fopen(table,\"r\");\n  while(fgets(line,20,fp)){\n    size++;\n  }\n  fclose(fp);\n  fp=fopen(table,\"r\");\n  remove(\"table_lack/temp_lack\");\n  sprintf(command,\"cat %s | sort -u > table_lack/temp_lack\",table);\n  system(command);\n  fp=fopen(\"table_lack/temp_lack\",\"r\");\n  fgets(line,20,fp);\n  strtok(line,\" \");\n  len=strlen(line);\n  base=pow(2,len-1);\n  fclose(fp);\n  fp=fopen(\"table_lack/temp_lack\",\"r\");\n  while( fgets(line,20,fp) ) {\n    strtok(line,\" \");\n    strcpy(str,line);\n    base=pow(2,len-1);\n    result=0;\n    for (int i =0 ; i < len ; i++) {\n      strncpy(num_c,str+i,1);\n      num_c[1]='\\0';\n      num=atoi(num_c);\n      result+=base*num;\n      base=base/2;\n    }\n    while (count!=result){\n      if(count2==0){\n\tbin(count,len,1);\n      } else {\n\tbin(count,len,0);\n      }\n      count++;\n      count2++;\n    }\n    count++;\n  }\n  for(int k=count;k<pow(2,len);k++) {\n    bin(k,len,0);\n    count2++;\n  }\n  fclose(fp);\n  if (count2>0 && count2<size){\n    return 2;\n  } else if (count2>0){\n    bin(count,len,2);\n    return 1;\n  } else {\n    bin(count,len,2);\n    return 0;\n  }\n}\n\nint uniq (char* filename){\n  int size=0;\n  int field=0;\n  int len=0;\n  int flag=0;\n  int count=0;\n  char line[262145]={0};\n  char line2[262145]={0};\n  char part[16384][15]={0};\n  char* line_data;\n  FILE* fp;\n  FILE* fp2;\n  FILE* fp3;\n  FILE* fp4;\n  //\u30d5\u30a1\u30a4\u30eb\u884c\u6570\u53d6\u5f97\n  fp=fopen(filename,\"r\");\n  while ( fgets(line,262144,fp) ) {\n    size++;\n  }\n  fclose(fp);\n  //\u30d5\u30a3\u30fc\u30eb\u30c9\u6570\u53d6\u5f97\n  if ( strstr(line,\" \\n\") ){\n    field=0;\n  } else {\n    field=1;\n  }\n  strtok(line,\" \");\n  //\u30d1\u30bf\u30fc\u30f3\u6587\u5b57\u5217\u53d6\u5f97\n  len=strlen(line);\n  while( strtok(NULL,\" \") ) {\n    field++;\n  }\n\n  fp=fopen(filename,\"r\");\n  remove(\"uniq_temp\");\n  for ( int j=0;j<size;j++ ) {\n    //cp_table_uniq\u306e1\u884c\u3092\u5207\u308a\u51fa\u3059\n    fgets(line,262144,fp);\n    //\u884c\u3092\u30d5\u30a3\u30fc\u30eb\u30c9\u3054\u3068\u306b\u5206\u96e2\n    for ( int i=0;i<field;i++ ) {\n      if ( i==0 ) {\n        line_data=strtok(line,\" \");\n      } else {\n        line_data=strtok(NULL,\" \");\n      }\n      strncpy(&part[i][0],line_data,len);\n      part[i][len]='\\0';\n    }\n    //\u5165\u529b\u30d5\u30a1\u30a4\u30eb\u304b\u3089\u5404\u30d5\u30a3\u30fc\u30eb\u30c9\u3092\u691c\u7d22\n    fp2=fopen(filename,\"r\");\n    fp3=fopen(\"uniq_temp\",\"a\");\n    while( fgets(line2,262144,fp2) ) {\n      for (int i=0;i<field;i++) {\n        flag=1;\n        if ( !strstr(line2,part[i]) ) {\n          flag=0;\n          break;\n        }\n      }\n      if (flag==1) {\n        fprintf(fp3,\"%s\",line2);\n        break;\n      }\n    }\n    fclose(fp2);\n    fclose(fp3);\n  }\n  fclose(fp);\n  //uniq_temp\u3092\u30bd\u30fc\u30c8\u3057\u3066uniq_temp2\u306b\u66f8\u304d\u8fbc\u3080\n  system(\"cat uniq_temp | sort -u > uniq_temp2\");\n  remove(\"uniq_temp\");\n  //uniq_temp4\u3092table\u306b\u66f8\u304d\u623b\u3059\n  remove(filename);\n  fp=fopen(filename,\"a\");\n  fp4=fopen(\"uniq_temp2\",\"r\");\n  count=0;\n  while( fgets(line,122880,fp4) ) {\n    fprintf(fp,\"%s\",line);\n    count++;\n  }\n  fclose(fp);\n  fclose(fp4);\n  remove(\"uniq_temp2\");\n  printf(\"%d lines \\n\" , count);\n  if (count > 1) {\n    return 2;\n  } else if (count==1){\n    return 1;\n  } else {\n    return 0;\n  }\n}\n\nint logic_comp_2 (char* input_table) {\n  FILE* fp;\n  FILE* fp2;\n  FILE* fp3;\n  FILE* fp4;\n  FILE* fp5;\n  char* chk=0;\n  char* chk2=0;\n  char* chk3=0;\n  char* chk4=0;\n  int sign;\n  int line_num=0;\n  int chkint;\n  int chk2int;\n  int clen;\n  int coreint=0;\n  int coreintconv=0;\n  int pattern_n_len;\n  int groupchk=0;\n  int count=0;\n  int count2=0;\n  int res;\n  char pattern_a[100]={0};\n  char pattern_b[100]={0};\n  char pattern_n[100]={0};\n  char core[2]={0};\n  char coreconv[2]={0};\n  char line[100];\n  char pattern[100];\n  //\u65e2\u5b58\u30d5\u30a1\u30a4\u30eb(table_2,table_1)\u306e\u524a\u9664\n  remove(\"table/table_1\");\n  remove(\"table/table_2\");\n  remove(\"temp\");\n  //\u5165\u529btable\u3092temp\u306b\u30b3\u30d4\u30fc\n  fp=fopen(input_table,\"r\");\n  fp2=fopen(\"temp\",\"a\");\n  while( fgets(line,100,fp) != NULL ){\n    strtok(line,\"\\n\\0\");\n    fprintf(fp2,\"%s\\n\",line);\n  }\n  fclose(fp2);\n  fclose(fp); \n  fp2=fopen(\"temp\",\"r\");\n  while( fgets(line,100,fp2) != NULL ){\n    line_num++;\n  }\n  fclose(fp2);\n  for (int i=0;i<line_num;i++){\n    //temp\u306e\u5148\u982d\u884c\u3092\u5207\u308a\u51fa\u3057\u305d\u306e\u4e2d\u306e1\u30d5\u30a3\u30fc\u30eb\u30c9\u76ee\u3092pattern\u306b\u4ee3\u5165\n    fp2=fopen(\"temp\",\"r\");\n    fscanf(fp2,\"%s%d\",pattern,&sign);\n    //\u5165\u529btable\u304b\u3089pattern\u3092\u691c\u7d22\u30572\u30d5\u30a3\u30fc\u30eb\u30c9\u76ee\u3092chk\u306b,\u691c\u7d22\u3057\u305f\u7d50\u679c\u3092chk3\u306b\u4ee3\u5165\n    fp=fopen(input_table,\"r\");\n    while( fgets(line,100,fp) != NULL ){\n      strtok(line,\"\\n\\0\");\n      chk3=strstr(line,pattern);\n      if(chk3){\n\tchk=strtok(line,\" \");\n\tchk=strtok(NULL,\" \");\n\tbreak;\n      } else {\n\tchk=\"\";\n      }\n    }\n    fclose(fp2);\n    fclose(fp); \n    //chk\u304c1\u304bchk3\u304c\u7a7a\u306e\u5834\u5408\n    chkint=atoi(chk);\n    if(chkint==1 || chk3==NULL){\n      //pattern\u306e\u6587\u5b57\u6570\u3092clen\u306b\u4ee3\u5165\n      clen=strlen(pattern);\n      for (int j=0;j<clen;j++){\n\t//pattern\u3092\u524d\u534a\u3068\u5f8c\u534a\u3068\u4e2d\u5fc3\u90e8\u306b\u5206\u3051\u308b\n\tstrncpy(pattern_a,pattern,j);\n\tpattern_a[j]='\\0';\n       \tstrncpy(core,pattern+j,1);\n\tcore[1]='\\0';\n\tstrncpy(pattern_b,pattern+j+1,clen-j);\n\t//\u4e2d\u5fc3\u90e8\u304c\uff11\u306a\u3089\uff10\u306b,\u4e2d\u5fc3\u90e8\u304c\uff10\u306a\u3089\uff11\u306b\u5165\u308c\u66ff\u3048\u305fpattern_n\u3092\u4f5c\u6210\n\tcoreint=atoi(core);\n\tif (coreint == 0){\n\t  coreintconv=1;\n\t}else if (coreint == 1){\n\t  coreintconv=0;\n\t}\n\tsprintf(coreconv,\"%d\",coreintconv);\n\tpattern_n_len=strlen(pattern_n);\n\tmemset(pattern_n,'\\0',pattern_n_len);\n\tstrcat(pattern_n,pattern_a);\n\tstrcat(pattern_n,coreconv);\n\tstrcat(pattern_n,pattern_b);\n\t//pattern_n\u3092\u5165\u529btable\u304b\u3089\u691c\u7d22\u30572\u30d5\u30a3\u30fc\u30eb\u30c9\u76ee\u3092chk2\u306b,\u691c\u7d22\u7d50\u679c\u3092chk4\u306b\u4ee3\u5165\n\tfp=fopen(input_table,\"r\");\n\twhile( fgets(line,100,fp) != NULL ){\n\t  strtok(line,\"\\n\\0\");\n\t  chk4=strstr(line,pattern_n);\n\t  if(chk4){\n\t    chk2=strtok(line,\" \");\n\t    chk2=strtok(NULL,\" \");\n\t    break;\n\t  } else {\n\t    chk2=\"\";\n\t  }\n\t}\n\tfclose(fp);\n\t//chk2\u304c1\u304bchk4\u304c\u7a7a\u306e\u5834\u5408\n\tchk2int=atoi(chk2);\n\tif ( chk2int == 1 || !chk4 ){\n\t  groupchk=1;\n\t  //\u65e7pattern\u3068\u65b0pattern\u3092group\u306b\u3057table/table_2\u306b\u8ffd\u52a0\n\t  fp3=fopen(\"table/table_2\",\"a\");\n\t  fprintf(fp3,\"%s %s\\n\",pattern,pattern_n);\n\t  count2++;\n\t  fclose(fp3);\n\t  //temp\u304b\u3089\u65e7pattern\u3068\u65b0pattern\u3092\u524a\u9664\n\t  remove(\"temp_cp\");\n\t  fp2=fopen(\"temp\",\"r\");\n\t  fp4=fopen(\"temp_cp\",\"a\");\n\t  while( fgets(line,100,fp2) != NULL ){\n\t    strtok(line,\"\\n\\0\");\n\t    if(!strstr(line,pattern) && !strstr(line,pattern_n)){\n\t      fprintf(fp4,\"%s\\n\",line);\n\t    }\n\t  }\n\t  fclose(fp2);\n\t  fclose(fp4); \n\t  remove(\"temp\");\n\t  fp4=fopen(\"temp_cp\",\"r\");\n\t  fp2=fopen(\"temp\",\"a\");\n\t  while( fgets(line,100,fp4) != NULL ){\n\t    strtok(line,\"\\n\\0\");\n\t    fprintf(fp2,\"%s\\n\",line);\n\t  }\n\t  fclose(fp2);\n\t  fclose(fp4); \n\t}\n      }\n      if (groupchk == 0){\n\t//pattern\u3092table/table1\u306b\u8ffd\u52a0\n\tfp5=fopen(\"table/table_1\",\"a\");\n\tfprintf(fp5,\"%s\\n\",pattern);\n\tcount++;\n\tfclose(fp5);\n\t//temp\u304b\u3089pattern\u3092\u524a\u9664\n\tremove(\"temp_cp\");\n\tfp2=fopen(\"temp\",\"r\");\n\tfp4=fopen(\"temp_cp\",\"a\");\n\twhile( fgets(line,100,fp2) != NULL ){\n\t  strtok(line,\"\\n\\0\");\n\t  if(!strstr(line,pattern)){\n\t    fprintf(fp4,\"%s\\n\",line);\n\t  }\n\t}\n\tfclose(fp2);\n\tfclose(fp4); \n\tremove(\"temp\");\n\tfp4=fopen(\"temp_cp\",\"r\");\n\tfp2=fopen(\"temp\",\"a\");\n\twhile( fgets(line,100,fp4) != NULL ){\n\t  strtok(line,\"\\n\\0\");\n\t  fprintf(fp2,\"%s\\n\",line);\n\t}\n\tfclose(fp2);\n\tfclose(fp4);\n      }else{\n\tgroupchk=0;\n      }\n    }else{\n      //chk\u304c1\u3067\u306f\u306a\u304f\u3001\u304b\u3064chk3\u304c\u7a7a\u3067\u7121\u3044\u5834\u5408temp\u304b\u3089pattern\u3092\u524a\u9664 \n      remove(\"temp_cp\");\n      fp2=fopen(\"temp\",\"r\");\n      fp4=fopen(\"temp_cp\",\"a\");\n      while( fgets(line,100,fp2) != NULL ){\n\tstrtok(line,\"\\n\\0\");\n\tif(!strstr(line,pattern)){\n\t  fprintf(fp4,\"%s\\n\",line);\n\t}\n      }\n      fclose(fp2);\n      fclose(fp4); \n      remove(\"temp\");\n      fp4=fopen(\"temp_cp\",\"r\");\n      fp2=fopen(\"temp\",\"a\");\n      while( fgets(line,100,fp4) != NULL ){\n\tstrtok(line,\"\\n\\0\");\n\tfprintf(fp2,\"%s\\n\",line);\n      }\n      fclose(fp2);\n      fclose(fp4);\n    } \n    //temp\u304c\u7a7a\u30d5\u30a1\u30a4\u30eb\u306b\u306a\u308c\u3070\u30eb\u30fc\u30d7\u3092\u629c\u3051\u308b\n    fp2=fopen(\"temp\",\"r\");\n    if(!fgets(line,100,fp2)){\n      fclose(fp2);\n      break;\n    }else{\n      fclose(fp2);\n    }\n  }\n  if (count > 1) { \n    printf(\"logic comp 1 ... end  \");\n    uniq(\"table/table_1\");\n  }\n  if (count2 > 1) {\n    printf(\"logic comp 2 ... end  \");\n    res=uniq(\"table/table_2\");\n  } else {\n    res=0;\n  }\n  remove(\"temp\");\n  remove(\"temp_cp\");\n  return res;\n}\n\nint logic_comp_n (char* input_table , int half , int search_flag){\n  int size = 0;\n  int len=0;\n  int comp=0;\n  int coreint=0;\n  int coreintpast=0;\n  int coreint_n=0;\n  int sum=0;\n  int count=0;\n  int count2=0;\n  int countpast=0;\n  int countchk=0;\n  int org_flag=0;\n  int res;\n  FILE* fp;\n  FILE* fp2;\n  FILE* fp3;\n  FILE* fp4;\n  FILE* fp6;\n  char filename[100];\n  char filename_half[100];\n  char line[122881];\n  char search_line[122881];\n  char org_line[122881];\n  char pattern[8192][15]={0};\n  char pattern_n[8192][15]={0};\n  char p1[8192][15]={0};\n  char p2[8192][15]={0};\n  char core[8192][2]={0};\n  char core_n[8192][2]={0};\n  char* line_input;\n  //table\u540d(\u691c\u7d22\u5bfe\u8c61)\u3068\u500d\u30b5\u30a4\u30ba\u306etable\u540d(\u8ffd\u52a0\u5bfe\u8c61)\u4f5c\u6210\n  comp=half*2;\n  sprintf(filename,\"table/table_%d\",comp);\n  sprintf(filename_half,\"table/table_%d\",half);\n  remove(filename);\n  //table\u306e\u884c\u6570\u78ba\u8a8d\n  fp=fopen(filename_half,\"r\");\n  while( fgets(line,122880,fp) ){\n    size++;\n  }\n  fclose(fp);\n  //table\u306e\u30b3\u30d4\u30fc\u30d5\u30a1\u30a4\u30eb\u4f5c\u6210\n  fp=fopen(filename_half,\"r\");\n  remove(\"temp_table\");\n  fp2=fopen(\"temp_table\",\"a\");\n  while( fgets(line,122880,fp) ){\n    fprintf(fp2,\"%s\",line);\n  }\n  fclose(fp);\n  fclose(fp2);\n  //bit\u5e45\u3092\u78ba\u8a8d\n  fp=fopen(filename_half,\"r\");\n  fgets(line,122880,fp);\n  strtok(line,\" \");\n  len=strlen(line);\n  fclose(fp);\n  //\u30c6\u30fc\u30d6\u30eb\u306e1\u884c\u3092\u5207\u308a\u51fa\u3057\u3055\u3089\u306b\u305d\u306e\u4e2d\u306e1\u30d5\u30a3\u30fc\u30eb\u30c9\u3092\u5207\u308a\u51fa\u3059\n  //\u30d5\u30a3\u30fc\u30eb\u30c9\u5185\u306ebit\u5217\u30921bit\u305a\u3064\u53cd\u8ee2\u3055\u305btable\u304b\u3089\u691c\u7d22\u3059\u308b\n  fp=fopen(filename_half,\"r\");\n  for (int i=0;i<size;i++) {\n    fgets(line,122880,fp);\n    for (int j=0;j<half;j++) {\n      if (j==0) {\n        line_input=strtok(line,\" \");\n      }else{\n        line_input=strtok(NULL,\" \");\n      }\n      strcpy(&pattern[j][0],line_input);\n    }\n    for (int k=0;k<len;k++){\n      //\u30ab\u30a6\u30f3\u30bf\u30af\u30ea\u30a2\n      sum=0;\n      count=0;\n      countchk=0;\n      org_flag=0;\n      for (int l=0;l<half;l++) {\n        strncpy(&p1[l][0],&pattern[l][0],k);\n        p1[l][k]='\\0';\n        strncpy(&core[l][0],&pattern[l][k],1);\n        core[l][1]='\\0';\n        strncpy(&p2[l][0],&pattern[l][k+1],len - k - 1);\n        p2[l][len-k-1]='\\0';\n        coreint = atoi(&core[l][0]);\n        coreint_n = 1-coreint;\n        sprintf(&core_n[l][0],\"%d\",coreint_n);\n        if (l == 0) {\n          coreintpast=coreint;\n        } else {\n          if (coreint != coreintpast){\n            sum = 1;\n\t    break;\n\t  } else {\n            coreintpast=coreint;\n          }\n        }\n      }\n      //\u30d1\u30bf\u30fc\u30f3\u306e\u5b58\u5728\u30c1\u30a7\u30c3\u30af\n      if (sum==0){\n        for (int m=0;m<half;m++ ) {\n          pattern_n[m][0]='\\0';\n          strcat(pattern_n[m],p1[m]);\n          strcat(pattern_n[m],core_n[m]);\n          strcat(pattern_n[m],p2[m]);\n          fp2=fopen(\"temp_table\",\"r\");\n\t  countpast=count;\n          while ( fgets(search_line, 122880, fp2) ) {\n            if( strstr(search_line, &pattern_n[m][0]) ) {\n              count++;\n              break;\n            }\n\t  }\n\t  fclose(fp2);\n\t  if (count==countpast) {\n\t    if (search_flag==1) {\n\t      fp4=fopen(input_table,\"r\");\n\t      while ( fgets(org_line,122880,fp4) ) {\n\t\tif ( strstr(org_line, &pattern_n[m][0]) ) {\n\t\t  org_flag++;\n\t\t  break;\n\t\t}\n\t      }\n\t      fclose(fp4);\n\t      if (org_flag==0) {\n\t\tcount++;\n\t\tbreak;\n\t      }\n\t    } else if (search_flag==2) {\n\t      fp6=fopen(\"table_lack/lack_list\",\"r\");\n\t      while ( fgets(org_line,122880,fp6) ) {\n\t\tif ( strstr(org_line, &pattern_n[m][0]) ) {\n\t\t  count++;\n\t\t  break;\n\t\t}\n\t      }\n\t      fclose(fp6);\n\t    }\n\t  }\n        }\n        //\u30d1\u30bf\u30fc\u30f3\u66f8\u304d\u8fbc\u307f\n        fp3=fopen(filename,\"a\");\n        if (count==half) {\n          for (int n=0;n<half;n++) {\n            strtok(pattern[n],\"\\n\");\n            strtok(pattern_n[n],\"\\n\");\n            fprintf(fp3,\"%s %s \", pattern[n],pattern_n[n]);\n          }\n          fprintf(fp3,\"\\n\");\n\t  count2++;\n        }\n        fclose(fp3);\n      }\n    }\n  }\n  fclose(fp);\n  remove(\"temp_table\");\n  if (count2 > 1) {\n    printf(\"logic comp %d ... end  \",comp);\n    res=uniq(filename);\n  } else {\n    res=0;\n  }\n  return res;\n}\n\nint resize (int half) {\n  FILE* fp;\n  FILE* fp2;\n  FILE* fp3;\n  char line[122881];\n  char line2[122881];\n  char part[8192][15];\n  int line_num=0;\n  int count=0;\n  int count2=0;\n  int comp=0;\n  int br=0;\n  char filename[100];\n  char filename2[100];\n  char* line_data;\n  comp=half*2;\n  sprintf(filename,\"table/table_%d\",half);\n  sprintf(filename2,\"table/table_%d\",comp);\n  fp2=fopen(filename2,\"r\");\n  while( fgets(line,122880,fp2) ){\n    line_num++;\n  }\n  fclose(fp2);\n  fp=fopen(filename,\"r\");\n  fp3=fopen(\"resize_temp\",\"a\");\n  while( fgets(line,122880,fp) ) {\n    count=0;\n    while(1) {\n      if(count==0){\n        line_data=strtok(line,\" \");\n      } else {\n        line_data=strtok(NULL,\" \");\n      }\n      sprintf(part[count],\"%s\",line_data);\n      if( strstr(part[count],\"0\\n\") || strstr(part[count],\"1\\n\") ) {\n        strtok(part[count],\"\\n\\0\");\n        count++;\n        break;\n      } else if ( strstr(part[count],\"\\n\") ) {\n        break;\n      } else {\n        count++;\n      }\n    }\n    fp2=fopen(filename2,\"r\");\n    count2=0;\n    while( fgets(line2,122880,fp2) ) {\n      br=0;\n      for (int i=0; i<count; i++) {\n        if ( strstr(line2,part[i]) ){\n          br++;\n        } else {\n          break;\n        }\n      }\n      if(br!=count){\n        count2++;\n      }\n    }\n    fclose(fp2);\n    if(count2 == line_num){\n      for (int j=0; j<count; j++) {\n        fprintf(fp3,\"%s \",part[j]);\n      }\n      fprintf(fp3,\"\\n\");\n    }\n  }\n  fclose(fp);\n  fclose(fp3);\n  remove(filename);\n  fp=fopen(filename,\"a\");\n  fp3=fopen(\"resize_temp\",\"r\");\n  count=0;\n  while( fgets(line,122880,fp3) ) {\n    fprintf(fp,\"%s\",line);\n    count++;\n  }\n  fclose(fp);\n  fclose(fp3);\n  remove(\"resize_temp\");\n  printf(\" ..resized table_%d : %d lines\\n\",half , count);\n  if (count>1) {\n    return 1;\n  } else {\n    return 0;\n  }\n}\n\nvoid compact (int max_dim) {\n  FILE* fp;\n  FILE* fp2;\n  FILE* fp3;\n  FILE* fp4;\n  char line[122881];\n  char line2[122881];\n  char part[8192][15];\n  int line_num;\n  int count=0;\n  int br[8192]={0};\n  int chk=0;\n  char filename[100];\n  char filename2[100];\n  char* line_data;\n  printf(\" ..making table_%d compact ...\", max_dim);\n  sprintf(filename,\"table/table_%d\",max_dim);\n  sprintf(filename2,\"table/table_%d\",max_dim);\n  fp=fopen(filename,\"r\");\n  while( fgets(line,122880,fp) ){\n    line_num++;\n  }\n  fclose(fp);\n  fp=fopen(filename,\"r\");\n  fp2=fopen(\"compact_temp\",\"a\");\n  while( fgets(line,122880,fp) ) {\n    count=0;\n    while(1) {\n      if(count==0){\n        line_data=strtok(line,\" \");\n      } else {\n        line_data=strtok(NULL,\" \");\n      }\n      sprintf(part[count],\"%s\",line_data);\n      if( strstr(part[count],\"0\\n\") || strstr(part[count],\"1\\n\") ) {\n        strtok(part[count],\"\\n\\0\");\n        count++;\n        break;\n      } else if ( strstr(part[count],\"\\n\") ) {\n        break;\n      } else {\n        count++;\n      }\n    }\n    for (int k=0; k<count; k++) {\n      br[k]=0;\n    }\n    //\u5143\u30d5\u30a1\u30a4\u30eb\u304b\u3089\u691c\u7d22\n    fp3=fopen(filename2,\"r\");\n    while( fgets(line2,122880,fp3) ) {\n      for (int i=0; i<count; i++) {\n        if ( strstr(line2,part[i]) ){\n          br[i]++;\n        }\n      }\n    }\n    fclose(fp3);\n    //comp_search_list\u304b\u3089\u691c\u7d22\n    if ((fp4=fopen(\"comp_search_list\",\"r\"))){\n      while( fgets(line2,122880,fp4) ) {\n        for (int i=0; i<count; i++) {\n          if ( strstr(line2,part[i]) ){\n            br[i]--;\n          }\n        }\n      }\n      fclose(fp4);\n    }\n    chk=0;\n    for (int l=0;l<count; l++){\n      if (br[l] < 2){\n        chk=1;\n        break;\n      }\n    }\n    if(chk == 1) {\n      for (int j=0; j<count; j++) {\n        fprintf(fp2,\"%s \",part[j]);\n      }\n      fprintf(fp2,\"\\n\");\n    } else {\n      fp4=fopen(\"comp_search_list\",\"a\");\n      for (int j=0; j<count; j++) {\n        fprintf(fp4,\"%s \",part[j]);\n      }\n      fprintf(fp4,\"\\n\");\n      fclose(fp4);\n    }\n  }\n  fclose(fp);\n  fclose(fp2);\n  remove(filename);\n  fp=fopen(filename,\"a\");\n  fp2=fopen(\"compact_temp\",\"r\");\n  while( fgets(line,122880,fp2) ) {\n    fprintf(fp,\"%s\",line);\n  }\n  fclose(fp);\n  fclose(fp2);\n  remove(\"compact_temp\");\n  remove(\"comp_search_list\");\n  printf(\"end\\n\");\n}\n\nint logic_function (int field) {\n  int len=0;\n  int num=0;\n  int sum=0;\n  int flag=0;\n  char line[122881]={0};\n  char linecp[122881]={0};\n  char* data;\n  char bit[2]={0};\n  FILE* fp;\n  char filename[100];\n  sprintf(filename,\"table/table_%d\",field);\n  if(!(fp=fopen(filename,\"r\"))){\n    return 0;\n  }\n  fgets(line,122880,fp);\n  if (!strstr(line,\"0\") && !strstr(line,\"1\")){\n    remove(filename);\n    return 0;\n  }\n  fclose(fp);\n  strtok(line,\" \");\n  len=strlen(line);\n  fp=fopen(filename,\"r\");\n  while ( fgets(line,122880,fp) ) {\n    if (flag==0) {\n      flag=1;\n    } else {\n      printf(\" + \");\n    }\n    for (int i=0;i<len;i++) {\n      sum=0;\n      for(int j=0;j<field;j++) {\n        strcpy(linecp,line);\n        for (int k=0;k<j + 1;k++) {\n          if(k==0) {\n            data=strtok(linecp,\" \");\n          } else {\n            data=strtok(NULL,\" \");\n          }\n        }\n        strncpy(bit,data + i,1);\n        bit[1]='\\0';\n        num=atoi(bit);\n        sum+=num;\n      }\n      if (sum==0) {\n        printf(\"[`%d]\",i);\n      } else if (sum==field){\n        printf(\"[%d]\",i);\n      }\n    }\n  }\n  printf(\"\\n\");\n  fclose(fp);\n  return 0;\n}\n\nint timer(void){\n  time_t now = time(NULL);\n  struct tm *pnow = localtime(&now);\n  char buff[128]=\"\";\n  sprintf(buff,\"%d:%d:%d\",pnow->tm_hour,pnow->tm_min,pnow->tm_sec);\n  printf(\"%s\\n\",buff);\n  return 0;\n}\n\nint main (int argc, char* argv[]) {\n  int res;\n  int field=2;\n  int chk=0;\n  int comp=0;\n  clock_t start,end;\n  timer();\n  start=clock();\n  system(\"rm -f table/table_*\");\n  chk=ptnchk(argv[1]);\n  res=logic_comp_2(argv[1]);\n  if (res==2) {\n    while (res==2) {\n      res=logic_comp_n(argv[1],field,chk);\n      if (res > 0) {\n        comp=resize(field);\n        if(comp==1){\n          compact(field);\n        }\n      }\n      field=field*2;\n    }\n    if (res > 0) {\n      compact(field);\n    }\n  } else {\n    compact(2);\n  } \n  while(field>0){\n    logic_function(field);\n    field=field/2;\n  }\n  timer();\n  end=clock();\n  printf(\"exec time %d [ms]\\n\",(int)(end - start)/1000);\n}\n\n```\n\n#\u4e8b\u524d\u6e96\u5099\n\u5b9f\u884c\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u5185\u306b\u6b21\u306e\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u3092\u4f5c\u6210\u3059\u308b\u3002\n\u30fbtable\n\u30fbtable_lack\n\n#\u771f\u7406\u5024\u8868\u306e\u4f5c\u6210\n\u30c6\u30ad\u30b9\u30c8\u30d5\u30a1\u30a4\u30eb\u306b\u6b21\u306e\u3088\u3046\u306b\u8a18\u8ff0\u3059\u308b\u3002\n\u4f8b\u306f10bit\u5165\u529b\u306e\u771f\u7406\u5024\u8868\u3002\u30d5\u30a1\u30a4\u30eb\u540d\u3092\u3053\u3053\u3067\u306ftable_10D\u3068\u3059\u308b(\u306a\u3093\u3067\u3082\u826f\u3044)\u3002\n\u8868\u306b\u7121\u3044\u30d1\u30bf\u30fc\u30f3(0000000000\u306a\u3069)\u306f\u30c9\u30f3\u30c8\u30b1\u30a2\u3068\u3057\u3066\u6271\u308f\u308c\u308b\u3002\n\n```text\n0000001100  1\n1000011100  1\n0100011100  1\n1100111100  0\n0010111100  0\n1010111100  0\n0110111100  0\n1110111100  1\n0101111100  1\n1101111100  1\n0100000001  1\n0000000011  1\n1100000011  1\n1101101010  1\n0011101010  0\n1011101010  0\n0111101010  0\n```\n\n#\u30b3\u30f3\u30d1\u30a4\u30eb\n\n```text\ngcc logic_comp.c -o logic_comp.out -lm -std=c99 -O3\n```\n#\u5b9f\u884c\u4f8b\n\n```text\n# ./logic_comp.out table_10D\n10:3:8\nlogic comp 2 ... end  87 lines \nlogic comp 4 ... end  366 lines \n ..resized table_2 : 0 lines\nlogic comp 8 ... end  883 lines \n ..resized table_4 : 0 lines\nlogic comp 16 ... end  1345 lines \n ..resized table_8 : 0 lines\nlogic comp 32 ... end  1331 lines \n ..resized table_16 : 0 lines\nlogic comp 64 ... end  835 lines \n ..resized table_32 : 0 lines\nlogic comp 128 ... end  302 lines \n ..resized table_64 : 0 lines\nlogic comp 256 ... end  52 lines \n ..resized table_128 : 5 lines\n ..making table_128 compact ...end\nlogic comp 512 ... end  3 lines \n ..resized table_256 : 15 lines\n ..making table_256 compact ...end\n[`4] + [`6] + [9]\n[`0][`2] + [`1][`2] + [`3][8] + [`5][7] + [`7][`8] + [`2][3] + [3][5]\n[0][1][`5] + [0][1][`7] + [0][1][8] + [0][1][3] + [0][1][2]\n10:4:4\nexec time 54670 [ms]\n```\n\u203b\u7d50\u679c\u306e\u898b\u65b9\n```\n\u3000['A]=NOT(A)\n\u3000[A][B]=AND(A,B)\n\u3000[A]+[B]=OR(A,B)\n\u3000[A](\u6539\u884c)[B]=OR(A,B)\n```\n#\u6ce8\u610f\u70b9\n\u540c\u3058\u5b9f\u884c\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u5185\u3067\u8907\u6570\u5b9f\u884c\u3059\u308b\u3068\u3001\u4e2d\u9593\u30d5\u30a1\u30a4\u30eb\u306e\u7af6\u5408\u304c\u767a\u751f\u3059\u308b\u3002\n\u307e\u305f\u300112281\u6587\u5b57\u306e\u914d\u5217\u3092\u7528\u610f\u3057\u3066\u3044\u308b\u304c\u3001\u3053\u308c\u306f\u5165\u529bbit\u5e45\u6700\u592716bit\u306b\u5bfe\u5fdc\u3055\u305b\u3066\u3044\u308b\u3002malloc\u3067\u52d5\u7684\u30e1\u30e2\u30ea\u5272\u308a\u5f53\u3066\u3092\u884c\u3046\u3053\u3068\u3067(\u30e1\u30e2\u30ea\u5bb9\u91cf\u7bc4\u56f2\u5185\u3067\u306f)\u7121\u5236\u9650\u306b\u5165\u529bbit\u5e45\u3092\u62e1\u5f35\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u308b\u3002\n\u4eca\u5f8c\u6539\u5584\u4e88\u5b9a\u3002\n\n#\u5b9f\u884c\u6642\u9593\u30aa\u30fc\u30c0\n![runtime.png](https://qiita-image-store.s3.amazonaws.com/0/152991/9fc5dddb-56d8-1a02-81ea-cc039c82af8d.png)\n\u56f3\u306f\u5165\u529bbit\u5e45(dimension)\u3092\u6a2a\u8ef8\u3001\u5b9f\u884c\u6642\u9593(ms\u5bfe\u6570)\u3092\u7e26\u8ef8\u306b\u30d7\u30ed\u30c3\u30c8\u3057\u305f\u3082\u306e\u3067\u3042\u308b\u3002\n\u5165\u529b\u3068\u306a\u308b\u771f\u7406\u5024\u8868\u3092\u30e9\u30f3\u30c0\u30e0\u306b\u4f5c\u6210\u3057\u3066\u5b9f\u884c\u3059\u308b\u3053\u3068\u3067\u771f\u7406\u5024\u8868\u306e\u30d1\u30bf\u30fc\u30f3\u3070\u3089\u3064\u304d\u306b\u3088\u308b\u5b9f\u884c\u6642\u9593\u8aa4\u5dee\u306e\u50be\u5411\u3082\u898b\u308b\u3053\u3068\u304c\u3067\u304d\u3066\u3044\u308b(dimension=11,12\u306f\u6642\u9593\u304c\u304b\u304b\u308b\u305f\u3081\u30d7\u30ed\u30c3\u30c8\u6570\u3092\u7701\u7565\u3057\u3066\u3044\u308b)\u3002\u5165\u529bbit\u5e45\u304c1bit\u5897\u3059\u3054\u3068\u306b\u5b9f\u884c\u6642\u9593\u304c\u7d0410\u500d\u3068\u306a\u308b\u3053\u3068\u304c\u5206\u304b\u308b\u3002dimension=12\u3067\u6570\u6642\u9593\u306e\u5b9f\u884c\u6642\u9593\u3067\u3042\u308b\u3053\u3068\u304b\u3089dimension=13\u3067\u6570\u65e5\u304b\u304b\u308b\u3053\u3068\u304c\u4e88\u60f3\u3055\u308c\u308b\u3002\u5b9f\u7528\u9762\u3092\u8003\u3048\u308b\u3068\u9ad8\u901f\u5316\u304c\u5fc5\u8981\u3067\u3042\u308a\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u3092\u898b\u76f4\u3059\u5fc5\u8981\u304c\u3042\u308b\u3002\n(dimension\u304c\u5c0f\u3055\u3044\u9818\u57df\u3067\u306f\u7279\u6027\u304c\u30d5\u30e9\u30c3\u30c8\u306b\u306a\u3063\u3066\u3044\u308b\u304c\u3001\u3053\u308c\u306f\u51e6\u7406\u6642\u9593\u3088\u308a\u30d5\u30a1\u30a4\u30eb\u5165\u51fa\u529b\u6642\u9593\u304c\u652f\u914d\u7684\u306b\u306a\u308b\u304b\u3089\u3060\u308d\u3046\u3002)\n"}