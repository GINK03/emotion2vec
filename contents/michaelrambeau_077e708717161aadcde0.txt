{"context": " More than 1 year has passed since last update.\n\nWhich solution to build a modern mobile application ?\n\nThe contenders\n\n1. Hybrid solutions\nConcept: the same development stack as web applications: HTML, CSS, JavaScript.\nThe application is rendered in the mobile using a \"web view\" (a web browser embedded in the mobile application)\nUsually, the UI is not as smooth as a real native application but animations in the browser have improved a lot recently and it is hard to see the difference.\nPlugins (Cordova) are used to communicate with device feature (like the camera, the battery level...)\nA building process creates the application for either Android or iOS. Then the application can be uploaded to iTunes or GooglePlay.\nStrong points: hybrid applications are easy to test since they can run in the browser (except device specific features, of course).\nYou can use the same code base to build a web site and a mobile application.\nA comparison of mobile frameworks: here\n\nA. ionic\n\n\nVery popular (+18K Github stars)\nBuilt on top of AngularJS and some Angular tools like angular-ui router\n\nAn other solution, based on ionic: Supersonic. No public repository :(\n\nB. reapp.io\n\n\nBuilt on top of ReactJS and Webpack (the stack of the moment!)\nNot much activity over the last 3 months (only 2.5k stars)\n\n\n2. React Native\n\nConcept: build an application using only React components\nNo HTML: only React components that map iOS components.\nFor example <Text><Text> to create an inline element (the equivalent of a <span> tag in HTML), or <View></View> to create a block element (<div>).\nNo CSS: JavaScript objects are used to style objects.\n\nEasy to setup on Mac, you can have an application running in 5 minutes.\nOnly available for iOS (at least now)\n16K stars since it was released in March... this is insane!\n\n\n3. NativeScript\n\nConcept: build an application from JavaScript,  XML for views and a subset CSS. Generate real native components, it is does run a simple web view like the hybrid solution.\n\nNot locked to any framework, you can use whatever you want.\nComes with its own double-way binding system to connect views (XML) and data.\n3.9K stars, it is slowly becoming popular.\nTODO: check by myself!\n\n\nTo sum up\n\n\n\nSolution\n100% Native\nReact Native\nNativeScript\nHybrid (WebView)\n\n\n\n\nLanguages\nSwift\nReact, JS\nXML, JS, CSS\nHTML5, CSS, JS\n\n\nPlatform\nonly iOS\nonly iOS\niOS and Android\niOS and Android\n\n\n\n\nThe future: Web workers ?\nUse web workers to create rich web applications ? (with offline storage, background processes...)\nhttp://www.html5rocks.com/en/tutorials/service-worker/introduction/\nNote: it seems to be not supported in Firefox 38 ?\n# Which solution to build a modern mobile application ?\n\n## The contenders\n\n### 1. Hybrid solutions\n\nConcept: the same development stack as web applications: HTML, CSS, JavaScript.\nThe application is rendered in the mobile using a \"web view\" (a web browser embedded in the mobile application)\nUsually, the UI is not as smooth as a real native application but animations in the browser have improved a lot recently and it is hard to see the difference.\nPlugins (Cordova) are used to communicate with device feature (like the camera, the battery level...)\nA building process creates the application for either Android or iOS. Then the application can be uploaded to iTunes or GooglePlay.\n\nStrong points: hybrid applications are easy to test since they can run in the browser (except device specific features, of course).\nYou can use the same code base to build a web site and a mobile application.\n\nA comparison of mobile frameworks: [here](http://matthiasschuetz.com/mobile-app-framework-matrix/)\n\n#### A. [ionic](http://ionicframework.com/)\n\n* Very popular (+18K Github stars)\n* Built on top of AngularJS and some Angular tools like angular-ui router\n\nAn other solution, based on ionic: [Supersonic] (http://www.appgyver.com/supersonic). No public repository :(\n\n#### B. [reapp.io](http://reapp.io/)\n\n* Built on top of ReactJS and Webpack (the stack of the moment!)\n* Not much activity over the last 3 months (only 2.5k stars)\n\n\n### 2. [React Native] (https://facebook.github.io/react-native/)\n\nConcept: build an application using only React components\nNo HTML: only React components that map iOS components.\nFor example `<Text><Text>` to create an inline element (the equivalent of a `<span>` tag in HTML), or `<View></View>` to create a block element (`<div>`).\nNo CSS: JavaScript objects are used to style objects.\n\n* Easy to setup on Mac, you can have an application running in 5 minutes.\n* Only available for iOS (at least now)\n* 16K stars since it was released in March... this is insane!\n\n\n### 3. [NativeScript](https://www.nativescript.org/)\n\nConcept: build an application from JavaScript,  XML for views and a subset CSS. Generate **real native** components, it is does run a simple web view like the hybrid solution.\n\n* Not locked to any framework, you can use whatever you want.\n* Comes with its own double-way binding system to connect views (XML) and data.\n* 3.9K stars, it is slowly becoming popular.\n* TODO: check by myself!\n\n## To sum up\n\nSolution | 100% Native  | React Native | NativeScript | Hybrid (WebView)\n--- | ------------- | ------------- | ---- | ----\nLanguages | Swift  | React, JS | XML, JS, CSS | HTML5, CSS, JS\nPlatform | only iOS | only iOS | iOS and Android | iOS and Android \n\n## The future: Web workers ?\n\nUse web workers to create rich web applications ? (with offline storage, background processes...)\n\nhttp://www.html5rocks.com/en/tutorials/service-worker/introduction/\n\nNote: it seems to be not supported in Firefox 38 ?\n", "tags": ["Mobile", "reactnative", "ionic"]}