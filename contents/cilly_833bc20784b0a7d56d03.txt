{"tags": ["AngularJS", "Angular2", "Socket.io"], "context": "\u6700\u8fd1\u904a\u3093\u3067\u3044\u308bAngular2\u3067node.js\u5074\u306b\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u6295\u3052\u3066on\u3084emit\u3059\u308b\u5024\u3092\u52d5\u7684\u306b\u5909\u3048\u3066connect\u3059\u308b\u3082\u306e\u3092\u4f5c\u3063\u3066\u307f\u3088\u3046\u3068\u601d\u3063\u3066\u904a\u3093\u3067\u307f\u305f\u306e\u3067\u30e1\u30e2\n\uff08component\u5358\u4f4d\u3067connect\u3059\u308b\u3068\u304b\u3042\u308b\u304b\u306e\u304b\u306a\u3041\u3068\u5984\u60f3\u3057\u3066\uff09\n\nnode.js\u5074\n$ mkdir web-socket\n$ cd web-socket\n$ npm init\n$ npm install socket.io --save\n$ npm install express --save\n$ touch web-socket.js\n\nweb-socket.js\n\nlet app           = require(\u3000'express'\u3000)();\nlet http          = require(\u3000'http'\u3000).Server(\u3000app\u3000);\nlet socket_io     = require(\u3000'socket.io'\u3000)(\u3000http\u3000);\n\nsocket_io.on( 'connection', ( socket ) => {\n  let query       = socket.handshake.query;\n  let hoge        = query.hoge;\n\n  socket.on( 'disconnect', function(){} );\n\n  socket.on( 'on_name', ( data ) => {\n    socket_io.emit( 'emit_name', { data: data } );\n  } );\n\n} );\n\nhttp.listen( 5000, () => { } );\n\n\n\nAngular\u5074\n$ npm install socket.io-client --save\n$ npm install @types/socket.io-client --save-dev\n\n\nService\n\nimport { Injectable } from '@angular/core';\n\nimport * as io from 'socket.io-client';\n\nimport { Observable } from 'rxjs/Observable';\n\n@Injectable()\nexport class WebSocketService {\n\n  constructor(){}\n\n  private url     = 'http://localhost:5000';\n  private socket;\n\n  connect( queryString: string ){\n    this.socket   = io( this.url, { query: queryString } );\n  }\n\n  emit( emitName: string, data? ){\n    this.socket.emit( emitName, data );\n  }\n\n  on( onName: string ){\n    let observable = new Observable( observer => {\n      this.socket.on( onName, ( data ) => {\n        observer.next( data );\n      });\n\n      return () => { this.socket.disconnect(); };\n    } );\n    return observable;\n  }\n\n}\n\n\nComponent\nimport { Component, OnInit, OnDestroy } from '@angular/core';\nimport { WebSocketService }       from './web-socket.service';\n\n@Component({\n  providers: [WebSocketService],\n  selector: 'app-web-socket',\n  templateUrl: './web-socket.component.html',\n  styleUrls: ['./web-socket.component.scss'],\n})\nexport class WebSocketComponent implements OnInit, OnDestroy {\n\n  connection;\n  data;\n\n  constructor( private webSocketService: WebSocketService ){}\n\n  onClick(){\n    this.webSocketService.emit( 'on_name', this.data );\n    this.data = '';\n  }\n\n  ngOnInit() {\n    this.webSocketService.connect( 'hoge=hoge' )\n    this.connection = this.webSocketService.on( 'emit_name' ).subscribe( data => {\n      this.data = data;\n    } )\n  }\n\n  ngOnDestroy() {\n    this.connection.unsubscribe();\n  }\n\n}\n\n\u3042\u3068\u306f\nweb-socket.component.html\u306b onClick\u306e\u30dc\u30bf\u30f3\u3092\u7f6e\u3044\u3066\u3000ng serve \u3068 node web-socket.js\u3092\u3057\u3066\u5225\u3005\u306b\u8d77\u52d5\n\n\u88dc\u8db3\n\u4e0b\u8a18\u306e\u90e8\u5206\u3067\u30af\u30a8\u30ea\u3092\u53d7\u3051\u53d6\u3063\u3066\u3044\u308b\u306e\u3067\u3001\u3053\u3053\u3067\u6761\u4ef6\u5206\u5c90\u7b49\u3067on\u3084emit\u306e\u5024\u3092\u52d5\u7684\u306b\u30bb\u30c3\u30c8\u3057\u3066\u3042\u3052\u308c\u3070\u76ee\u7684\u9054\u6210\n  let query       = socket.handshake.query;\n  let hoge        = query.hoge;\n\n\u6700\u8fd1\u904a\u3093\u3067\u3044\u308bAngular2\u3067node.js\u5074\u306b\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u6295\u3052\u3066on\u3084emit\u3059\u308b\u5024\u3092\u52d5\u7684\u306b\u5909\u3048\u3066connect\u3059\u308b\u3082\u306e\u3092\u4f5c\u3063\u3066\u307f\u3088\u3046\u3068\u601d\u3063\u3066\u904a\u3093\u3067\u307f\u305f\u306e\u3067\u30e1\u30e2\n\uff08component\u5358\u4f4d\u3067connect\u3059\u308b\u3068\u304b\u3042\u308b\u304b\u306e\u304b\u306a\u3041\u3068\u5984\u60f3\u3057\u3066\uff09\n\n# node.js\u5074\n\n```bash\n$ mkdir web-socket\n$ cd web-socket\n$ npm init\n$ npm install socket.io --save\n$ npm install express --save\n$ touch web-socket.js\n```\n\n`web-socket.js`\n\n```js\n\nlet app           = require(\u3000'express'\u3000)();\nlet http          = require(\u3000'http'\u3000).Server(\u3000app\u3000);\nlet socket_io     = require(\u3000'socket.io'\u3000)(\u3000http\u3000);\n\nsocket_io.on( 'connection', ( socket ) => {\n  let query       = socket.handshake.query;\n  let hoge        = query.hoge;\n\n  socket.on( 'disconnect', function(){} );\n\n  socket.on( 'on_name', ( data ) => {\n    socket_io.emit( 'emit_name', { data: data } );\n  } );\n\n} );\n\nhttp.listen( 5000, () => { } );\n\n```\n\n# Angular\u5074\n\n```\n$ npm install socket.io-client --save\n$ npm install @types/socket.io-client --save-dev\n```\n\n## Service\n\n```js\n\nimport { Injectable } from '@angular/core';\n\nimport * as io from 'socket.io-client';\n\nimport { Observable } from 'rxjs/Observable';\n\n@Injectable()\nexport class WebSocketService {\n\n  constructor(){}\n\n  private url     = 'http://localhost:5000';\n  private socket;\n\n  connect( queryString: string ){\n    this.socket   = io( this.url, { query: queryString } );\n  }\n\n  emit( emitName: string, data? ){\n    this.socket.emit( emitName, data );\n  }\n\n  on( onName: string ){\n    let observable = new Observable( observer => {\n      this.socket.on( onName, ( data ) => {\n        observer.next( data );\n      });\n\n      return () => { this.socket.disconnect(); };\n    } );\n    return observable;\n  }\n\n}\n```\n\n## Component\n\n```js\nimport { Component, OnInit, OnDestroy } from '@angular/core';\nimport { WebSocketService }       from './web-socket.service';\n\n@Component({\n  providers: [WebSocketService],\n  selector: 'app-web-socket',\n  templateUrl: './web-socket.component.html',\n  styleUrls: ['./web-socket.component.scss'],\n})\nexport class WebSocketComponent implements OnInit, OnDestroy {\n\n  connection;\n  data;\n\n  constructor( private webSocketService: WebSocketService ){}\n\n  onClick(){\n    this.webSocketService.emit( 'on_name', this.data );\n    this.data = '';\n  }\n\n  ngOnInit() {\n    this.webSocketService.connect( 'hoge=hoge' )\n    this.connection = this.webSocketService.on( 'emit_name' ).subscribe( data => {\n      this.data = data;\n    } )\n  }\n\n  ngOnDestroy() {\n    this.connection.unsubscribe();\n  }\n\n}\n```\n\n\u3042\u3068\u306f\nweb-socket.component.html\u306b `onClick`\u306e\u30dc\u30bf\u30f3\u3092\u7f6e\u3044\u3066\u3000`ng serve` \u3068 `node web-socket.js`\u3092\u3057\u3066\u5225\u3005\u306b\u8d77\u52d5\n\n## \u88dc\u8db3\n\u4e0b\u8a18\u306e\u90e8\u5206\u3067\u30af\u30a8\u30ea\u3092\u53d7\u3051\u53d6\u3063\u3066\u3044\u308b\u306e\u3067\u3001\u3053\u3053\u3067\u6761\u4ef6\u5206\u5c90\u7b49\u3067on\u3084emit\u306e\u5024\u3092\u52d5\u7684\u306b\u30bb\u30c3\u30c8\u3057\u3066\u3042\u3052\u308c\u3070\u76ee\u7684\u9054\u6210\n\n```js\n  let query       = socket.handshake.query;\n  let hoge        = query.hoge;\n```\n"}