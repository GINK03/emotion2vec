{"context": "\n\n2.2.1\nSICP/2.2.1.scm at master \u00b7 cocodrips/SICP\n\nEx 2.21\n\u5f15\u6570\u3068\u3057\u3066\u6570\u5024\u306e\u30ea\u30b9\u30c8\u3092\u3068\u308a\u3001\n\u305d\u308c\u3089\u306e\u6570\u5024\u306e\u4e8c\u4e57\u306e\u5217\u3092\u6301\u3064\u30ea\u30b9\u30c8\u3092\u8fd4\u3059\u624b\u7d9a\u304d square-list\n(display \"==========Ex 2.21===========\")\n(newline)\n\n(define (square-list items)\n    (if (null? items)\n        (list)\n        (cons (* (car items) (car items)) (square-list (cdr items)))))\n\n(display (square-list (list 1 2 3 4)))\n(newline)\n;(1 4 9 16)\n\n\n(define (square-list items)\n    (map (lambda (x) (* x x)) items))\n\n(display (square-list (list 5 6 7 8)))\n(newline)\n;(25 36 49 64)\n\n\nEx 2.22\n\u53cd\u5fa9\u30d7\u30ed\u30bb\u30b9\u30672.21\u3092\u66f8\u304f\u3068\u3001\u30ea\u30b9\u30c8\u304c\u9006\u9806\u306b\u306a\u308b\u3002\n\u3082\u304c\u3044\u3066\u3082\u3060\u3081\u3002\u306a\u305c\u304b\u3002\n\u524d\u56de\u306e2.20\u3067\u8272\u3005\u8003\u3048\u305f\u3084\u3064\u3060\u3002\n\u30ea\u30b9\u30c8\u306e\u69cb\u9020\u7684\u306b\u9006\u304b\u3089\u306f\u4f5c\u308c\u306a\u3044\u304b\u3089\u3001 \n1\u3053\u76ee\u306e\u65b9\u6cd5\u3067\u66f8\u3044\u3066\u3001reverse\u3059\u308b\u306e\u304c\u3044\u3044\u3093\u3058\u3083\u306a\u3044\u304b\uff1f\n\u3068\u3044\u3046\u8a71\u3060\u3063\u305f\u306f\u305a\u3002\nSICP\u8aad\u66f8\u5973\u5b50\u4f1a#17 2.2.1 > \u5225\u89e3\u653e filter && reverse\u3067stack\u7bc0\u7d04 - Qiita\n(define (square x) (* x x))\n\n(define (square-list items)\n    (define (iter things answer)\n        (if (null? things)\n            answer\n            (iter (cdr things)\n                    (cons (square (car things))\n                    answer))))\n    (iter items (list)))\n(display (square-list (list 5 6 7 8)))\n(newline)\n;(64 49 36 25)\n\n(define (square-list items)\n    (define (iter things answer)\n        (if (null? things)\n            answer\n            (iter (cdr things)\n                (cons answer\n                (square (car things))))))\n    (iter items (list)))\n(display (square-list (list 5 6 7 8)))\n(newline)\n;((((() . 25) . 36) . 49) . 64)\n\n\nEx2.23\n\u624b\u7d9a\u304d for-each \u306f map \u306b\u4f3c\u3066\u3044\u308b\u3002\u5f15\u6570\u3068\u3057\u3066\u624b\u7d9a\u304d\u3068\u8981\u7d20\u306e\u30ea\u30b9\u30c8\u3092\u53d6\u308b\u3002\n(display \"==========Ex 2.23===========\")\n(newline)\n\n\n(define (for-each-orig f items)\n    (cond \n        ((null? items) #t)\n        (else \n            (f (car items))\n            (for-each-orig f (cdr items)))))\n\n\n;(define (for-each-orig f items)\n;   (if\n;       (null? items) \n;       #t\n;       ((f (car items))\n;        (for-each-orig f (cdr items)))))\n\n; *** ERROR: invalid application: (#<undef> #t) \u306a\u305c\uff5e\n; -> if \u3067\u624b\u7d9a\u304d\u3092 \uff12\u3064\u3059\u308b\u51e6\u7406\u306f\u304b\u3051\u306a\u3044\uff1f\n; -> begin\u3084let\u3067grouping\u3057\u3066\u3042\u3052\u308b\u306e\u304c\u3044\u3044\u304b\u3082\n\n(for-each-orig \n    (lambda (x)\n            (newline)\n            (display x))\n    (list 57 321 88))\n\n;57\n;321\n;88\n\n\n2.2.2\nSICP/2.2.2.scm at master \u00b7 cocodrips/SICP\nCount-leaves\n\u30ea\u30b9\u30c8\u69cb\u9020\u306e\u8449\u306e\u90e8\u5206\u3092\u6570\u3048\u308b\u3084\u3064\n(display \"*********2.2.2**********\")\n(newline)\n\n(define linked-2-list (cons (list 1 2) (list 3 4)))\n(display linked-2-list) \n;((1 2) 3 4)\n(newline)\n\n(define (count-leaves x)\n    (cond \n        ((null? x) 0) \n        ((not (pair? x)) 1)\n    (else \n        (+ \n            (count-leaves (car x))\n            (count-leaves (cdr x))))))\n\n(display (count-leaves linked-2-list))\n(newline)\n;4\n\n\nEx 2.24\n(1 (2 (3 4))) \u3092\u30b0\u30e9\u30d5\u5316\u3059\u308b\n(display \"==========Ex 2.24===========\")\n(newline)\n(display (list 1 (list 2 (list 3 4))))\n;  *   \n; / \\\n;1   *\n;   / \\\n;   2  *\n;     / \\\n;    3   4\n(newline)\n\n\nEx 2.25\n(7)\u3092\u53d6\u308a\u51fa\u3059!!\n(display \"==========Ex 2.25===========\")\n(newline)\n(define l (list 1 3 (list 5 7) 9))\n(display l) (newline)\n(display (cdr (car (cdr (cdr l))))) (newline)\n;(1 3 (5 7) 9)\n;(7)\n(define l (list (list 7)))\n(display l) (newline)\n(display (car l)) (newline)\n;((7))\n;(7)\n\n(define l (list 1 (list 2 (list 3 (list 4 (list 5 (list 6 7)))))))\n(display l) (newline)\n(display (cdr (car (cdr (car (cdr (car (cdr (car (cdr (car (cdr l))))))))))))\n(newline)\n;(1 (2 (3 (4 (5 (6 7))))))\n;(7)\n\n\n# 2.2.1\n[SICP/2.2.1.scm at master \u00b7 cocodrips/SICP](https://github.com/cocodrips/SICP/blob/master/2.1/2.2.1.scm)\n\n## Ex 2.21\n\u5f15\u6570\u3068\u3057\u3066\u6570\u5024\u306e\u30ea\u30b9\u30c8\u3092\u3068\u308a\u3001\n\u305d\u308c\u3089\u306e\u6570\u5024\u306e\u4e8c\u4e57\u306e\u5217\u3092\u6301\u3064\u30ea\u30b9\u30c8\u3092\u8fd4\u3059\u624b\u7d9a\u304d square-list\n\n```lisp\n(display \"==========Ex 2.21===========\")\n(newline)\n\n(define (square-list items)\n    (if (null? items)\n        (list)\n        (cons (* (car items) (car items)) (square-list (cdr items)))))\n\n(display (square-list (list 1 2 3 4)))\n(newline)\n;(1 4 9 16)\n\n\n(define (square-list items)\n    (map (lambda (x) (* x x)) items))\n\n(display (square-list (list 5 6 7 8)))\n(newline)\n;(25 36 49 64)\n```\n\n## Ex 2.22\n\u53cd\u5fa9\u30d7\u30ed\u30bb\u30b9\u30672.21\u3092\u66f8\u304f\u3068\u3001\u30ea\u30b9\u30c8\u304c\u9006\u9806\u306b\u306a\u308b\u3002\n\u3082\u304c\u3044\u3066\u3082\u3060\u3081\u3002\u306a\u305c\u304b\u3002\n\n\u524d\u56de\u306e2.20\u3067\u8272\u3005\u8003\u3048\u305f\u3084\u3064\u3060\u3002\n\u30ea\u30b9\u30c8\u306e\u69cb\u9020\u7684\u306b\u9006\u304b\u3089\u306f\u4f5c\u308c\u306a\u3044\u304b\u3089\u3001 \n1\u3053\u76ee\u306e\u65b9\u6cd5\u3067\u66f8\u3044\u3066\u3001reverse\u3059\u308b\u306e\u304c\u3044\u3044\u3093\u3058\u3083\u306a\u3044\u304b\uff1f\n\u3068\u3044\u3046\u8a71\u3060\u3063\u305f\u306f\u305a\u3002\n\n\n[SICP\u8aad\u66f8\u5973\u5b50\u4f1a#17 2.2.1 > \u5225\u89e3\u653e filter && reverse\u3067stack\u7bc0\u7d04 - Qiita](http://qiita.com/cocodrips/items/e9d9142ed6a1d16ae733#%E5%88%A5%E8%A7%A3%E6%94%BE-filter--reverse%E3%81%A7stack%E7%AF%80%E7%B4%84)\n\n```lisp\n(define (square x) (* x x))\n\n(define (square-list items)\n    (define (iter things answer)\n        (if (null? things)\n            answer\n            (iter (cdr things)\n                    (cons (square (car things))\n                    answer))))\n    (iter items (list)))\n(display (square-list (list 5 6 7 8)))\n(newline)\n;(64 49 36 25)\n\n(define (square-list items)\n    (define (iter things answer)\n        (if (null? things)\n            answer\n            (iter (cdr things)\n                (cons answer\n                (square (car things))))))\n    (iter items (list)))\n(display (square-list (list 5 6 7 8)))\n(newline)\n;((((() . 25) . 36) . 49) . 64)\n```\n\n\n## Ex2.23\n\n\u624b\u7d9a\u304d for-each \u306f map \u306b\u4f3c\u3066\u3044\u308b\u3002\u5f15\u6570\u3068\u3057\u3066\u624b\u7d9a\u304d\u3068\u8981\u7d20\u306e\u30ea\u30b9\u30c8\u3092\u53d6\u308b\u3002\n\n```lisp\n(display \"==========Ex 2.23===========\")\n(newline)\n\n\n(define (for-each-orig f items)\n    (cond \n        ((null? items) #t)\n        (else \n            (f (car items))\n            (for-each-orig f (cdr items)))))\n        \n     \n;(define (for-each-orig f items)\n;   (if\n;       (null? items) \n;       #t\n;       ((f (car items))\n;        (for-each-orig f (cdr items)))))\n     \n; *** ERROR: invalid application: (#<undef> #t) \u306a\u305c\uff5e\n; -> if \u3067\u624b\u7d9a\u304d\u3092 \uff12\u3064\u3059\u308b\u51e6\u7406\u306f\u304b\u3051\u306a\u3044\uff1f\n; -> begin\u3084let\u3067grouping\u3057\u3066\u3042\u3052\u308b\u306e\u304c\u3044\u3044\u304b\u3082\n\n(for-each-orig \n    (lambda (x)\n            (newline)\n            (display x))\n    (list 57 321 88))\n\n;57\n;321\n;88\n```\n\n# 2.2.2\n\n[SICP/2.2.2.scm at master \u00b7 cocodrips/SICP](https://github.com/cocodrips/SICP/blob/master/2.1/2.2.2.scm)\n\nCount-leaves\n\u30ea\u30b9\u30c8\u69cb\u9020\u306e\u8449\u306e\u90e8\u5206\u3092\u6570\u3048\u308b\u3084\u3064\n\n```lisp\n(display \"*********2.2.2**********\")\n(newline)\n\n(define linked-2-list (cons (list 1 2) (list 3 4)))\n(display linked-2-list) \n;((1 2) 3 4)\n(newline)\n\n(define (count-leaves x)\n    (cond \n        ((null? x) 0) \n        ((not (pair? x)) 1)\n    (else \n        (+ \n            (count-leaves (car x))\n            (count-leaves (cdr x))))))\n            \n(display (count-leaves linked-2-list))\n(newline)\n;4\n```\n\n## Ex 2.24\n(1 (2 (3 4))) \u3092\u30b0\u30e9\u30d5\u5316\u3059\u308b\n\n```lisp\n(display \"==========Ex 2.24===========\")\n(newline)\n(display (list 1 (list 2 (list 3 4))))\n;  *   \n; / \\\n;1   *\n;   / \\\n;   2  *\n;     / \\\n;    3   4\n(newline)\n```\n\n\n## Ex 2.25\n\n (7)\u3092\u53d6\u308a\u51fa\u3059!!\n\n```lisp\n(display \"==========Ex 2.25===========\")\n(newline)\n(define l (list 1 3 (list 5 7) 9))\n(display l) (newline)\n(display (cdr (car (cdr (cdr l))))) (newline)\n;(1 3 (5 7) 9)\n;(7)\n(define l (list (list 7)))\n(display l) (newline)\n(display (car l)) (newline)\n;((7))\n;(7)\n\n(define l (list 1 (list 2 (list 3 (list 4 (list 5 (list 6 7)))))))\n(display l) (newline)\n(display (cdr (car (cdr (car (cdr (car (cdr (car (cdr (car (cdr l))))))))))))\n(newline)\n;(1 (2 (3 (4 (5 (6 7))))))\n;(7)\n```\n", "tags": ["SICP"]}