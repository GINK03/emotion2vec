{"context": " More than 1 year has passed since last update.\nURLConf \u3092\u30d3\u30e5\u30fc\u306e\u30e1\u30bd\u30c3\u30c9\u30d9\u30fc\u30b9\u3067\u3064\u304f\u308b\n\u30e1\u30bd\u30c3\u30c9\u306b\u306f\u3001 url(\u6b63\u898f\u8868\u73fe), order(URLConf\u4e2d\u306e\u9806\u756a)\u3092\u5c5e\u6027\u306b\u52a0\u3048\u308b\n\u3053\u308c\u3092\u30c7\u30b3\u30ec\u30fc\u30bf\u3067\u3084\u308b\n\u30d3\u30e5\u30fc\u30af\u30e9\u30b9\u306b\u306f\u30e2\u30c7\u30eb\u3092\u30d0\u30a4\u30f3\u30c9\u3055\u305b\u3066\u3001name\u3092\u751f\u6210\u3059\u308b\n\n\n\u30d3\u30e5\u30fc\u30c7\u30b3\u30ec\u30fc\u30bf: handler\nfrom functools import wraps\n\n\ndef handler(url='', order=0):\n    def _hander(func):\n\n        @wraps(func)\n        def wrapper(*args, **kwargs):\n            return func(*args, **kwargs)\n\n        wrapper.url = url         # url \u6b63\u898f\u8868\u73fe\n        wrapper.order = order     # url\u306e\u4e26\u3073\n        return classmethod(wrapper)\n\n    return _handler\n\n\n\n\u30d9\u30fc\u30b9\u30af\u30e9\u30b9 :View\nfrom django.conf import urls\nfrom operator import itemgetter\n\n\nclass View(object):\n\n    @classmethod\n    def urls(cls):\n        '''URLConf \u3092\u3064\u304f\u308b '''\n        base = \"{}_{}\".format(\n            cls.Meta.models._meta.app_label,\n            cls.Meta.models._meta.model_name, )\n\n        funcs = []\n        for name in cls.__dict__:\n            obj = getattr(cls, name)\n            if hasattr(obj, 'url'):\n                funcs.append((name, obj.order, obj))\n\n        # \u30e1\u30bd\u30c3\u30c9\u306b\u6307\u5b9a\u3057\u305f order \u3067\u4e26\u3079\u66ff\u3048\u3001\u305d\u308c\u305e\u308c\u306b url \u3092\u4f5c\u6210\u3059\u308b\n        return [\n            urls.url(func.url, func, name=\"{}_{}\".format(base, name))\n            for name, _, func in sorted(funcs, key=itemgetter(1))\n        ]\n\n\n\n\u5b9f\u969b\u306e\u30d3\u30e5\u30fc\u30af\u30e9\u30b9: CommunityView\nfrom django.contrib.auth import decorators as authdeco\nfrom django.utils.decorators import method_decorator\n\n\n# \u30d1\u30fc\u30df\u30c3\u30b7\u30e7\u30f3\npermission_required = method_decorator(\n    authdeco.permission_required('communities.list_community'))\n\n\nclass CommunityView(View):\n    class Meta:\n        # \u30d0\u30a4\u30f3\u30c9\u3059\u308b\u30e2\u30c7\u30eb\n        models = models.Community\n\n    @handler(url=r'^community/(?P<id>.+)/edit(?:/(?P<command>.*))?', order=0)\n    @permission_required\n    def edit(cls, request, id, command=''):\n        # .....\n        return TemplateResponse(\n            request,\n            'communities/community/edit{0}.html'.format(name),\n            dict(request=request, form=form))\n\n    @handler(url=r'^community/(?P<id>.+)', order=1)\n    @permission_required\n    def detail(cls, request, id, *args, **kwargs):\n        # .....\n        return TemplateResponse(\n            request,\n            'communities/community/detail.html',\n            dict(request=request, instance=instance, form=form))\n\n    @handler(url=r'^community', order=2)\n    @permission_required\n    def index(cls, request):\n        # ...\n        return TemplateResponse(\n            request,\n            'communities/community/index.html',\n            dict(request=request, instances=instances))\n\n\nurls.py\nfrom django.conf.urls import url    \nfrom . import views\n\nurlpatterns = [        \n  # \u305d\u306e\u4ed6\u306eURLConf\n  # ....\n] + views.CommunityView.urls()\n\n\n\u78ba\u8a8d\nIn [4]: for url in CommunityView.urls():\n   ...:     print url\n   ...:     \n<RegexURLPattern communities_community_edit ^community/(?P<id>.+)/edit(?:/(?P<command>.*))?>\n<RegexURLPattern communities_community_detail ^community/(?P<id>.+)>\n<RegexURLPattern communities_community_index ^community>\n\n\n\n- URLConf \u3092\u30d3\u30e5\u30fc\u306e\u30e1\u30bd\u30c3\u30c9\u30d9\u30fc\u30b9\u3067\u3064\u304f\u308b\n- \u30e1\u30bd\u30c3\u30c9\u306b\u306f\u3001 url(\u6b63\u898f\u8868\u73fe), order(URLConf\u4e2d\u306e\u9806\u756a)\u3092\u5c5e\u6027\u306b\u52a0\u3048\u308b\n- \u3053\u308c\u3092\u30c7\u30b3\u30ec\u30fc\u30bf\u3067\u3084\u308b\n- \u30d3\u30e5\u30fc\u30af\u30e9\u30b9\u306b\u306f\u30e2\u30c7\u30eb\u3092\u30d0\u30a4\u30f3\u30c9\u3055\u305b\u3066\u3001name\u3092\u751f\u6210\u3059\u308b\n\n\n## \u30d3\u30e5\u30fc\u30c7\u30b3\u30ec\u30fc\u30bf: handler\n\n~~~py\nfrom functools import wraps\n\n\ndef handler(url='', order=0):\n    def _hander(func):\n\n        @wraps(func)\n        def wrapper(*args, **kwargs):\n            return func(*args, **kwargs)\n\n        wrapper.url = url         # url \u6b63\u898f\u8868\u73fe\n        wrapper.order = order     # url\u306e\u4e26\u3073\n        return classmethod(wrapper)\n\n    return _handler\n\n~~~\n\n\n## \u30d9\u30fc\u30b9\u30af\u30e9\u30b9 :View\n\n~~~py\nfrom django.conf import urls\nfrom operator import itemgetter\n\n\nclass View(object):\n\n    @classmethod\n    def urls(cls):\n        '''URLConf \u3092\u3064\u304f\u308b '''\n        base = \"{}_{}\".format(\n            cls.Meta.models._meta.app_label,\n            cls.Meta.models._meta.model_name, )\n\n        funcs = []\n        for name in cls.__dict__:\n            obj = getattr(cls, name)\n            if hasattr(obj, 'url'):\n                funcs.append((name, obj.order, obj))\n\n        # \u30e1\u30bd\u30c3\u30c9\u306b\u6307\u5b9a\u3057\u305f order \u3067\u4e26\u3079\u66ff\u3048\u3001\u305d\u308c\u305e\u308c\u306b url \u3092\u4f5c\u6210\u3059\u308b\n        return [\n            urls.url(func.url, func, name=\"{}_{}\".format(base, name))\n            for name, _, func in sorted(funcs, key=itemgetter(1))\n        ]\n\n~~~\n\n## \u5b9f\u969b\u306e\u30d3\u30e5\u30fc\u30af\u30e9\u30b9: CommunityView\n\n~~~py\nfrom django.contrib.auth import decorators as authdeco\nfrom django.utils.decorators import method_decorator\n\n\n# \u30d1\u30fc\u30df\u30c3\u30b7\u30e7\u30f3\npermission_required = method_decorator(\n    authdeco.permission_required('communities.list_community'))\n\n\nclass CommunityView(View):\n    class Meta:\n        # \u30d0\u30a4\u30f3\u30c9\u3059\u308b\u30e2\u30c7\u30eb\n        models = models.Community\n\n    @handler(url=r'^community/(?P<id>.+)/edit(?:/(?P<command>.*))?', order=0)\n    @permission_required\n    def edit(cls, request, id, command=''):\n        # .....\n        return TemplateResponse(\n            request,\n            'communities/community/edit{0}.html'.format(name),\n            dict(request=request, form=form))\n\n    @handler(url=r'^community/(?P<id>.+)', order=1)\n    @permission_required\n    def detail(cls, request, id, *args, **kwargs):\n        # .....\n        return TemplateResponse(\n            request,\n            'communities/community/detail.html',\n            dict(request=request, instance=instance, form=form))\n\n    @handler(url=r'^community', order=2)\n    @permission_required\n    def index(cls, request):\n        # ...\n        return TemplateResponse(\n            request,\n            'communities/community/index.html',\n            dict(request=request, instances=instances))\n~~~\n\n## urls.py\n\n\n~~~\nfrom django.conf.urls import url    \nfrom . import views\n\nurlpatterns = [        \n  # \u305d\u306e\u4ed6\u306eURLConf\n  # ....\n] + views.CommunityView.urls()\n~~~\n\n## \u78ba\u8a8d\n\n~~~py\nIn [4]: for url in CommunityView.urls():\n   ...:     print url\n   ...:     \n<RegexURLPattern communities_community_edit ^community/(?P<id>.+)/edit(?:/(?P<command>.*))?>\n<RegexURLPattern communities_community_detail ^community/(?P<id>.+)>\n<RegexURLPattern communities_community_index ^community>\n~~~\n", "tags": ["Django", "URLConf"]}