{"context": "Java\u3092\u5229\u7528\u3057\u305f\u30bd\u30fc\u30c8\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u306b\u3064\u3044\u3066\u4eca\u56de\u306f\u66f8\u3044\u3066\u307f\u307e\u3059\u3002\n\u5099\u5fd8\u9332\u3068\u3057\u3066\u6b8b\u3059\u7a0b\u5ea6\u306b\u3057\u307e\u3059\u3002\n\u307e\u305a\u3001\u30d0\u30d6\u30eb\u30bd\u30fc\u30c8\u3002\n\u4e00\u822c\u7684\u306b\u4f7f\u308f\u308c\u308b\u983b\u5ea6\u304c\u9ad8\u305d\u3046\u306a\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u3002\u5927\u5c0f\u3092\u6bd4\u8f03\u3057\u3066\u9806\u756a\u3092\u5165\u308c\u66ff\u3048\u3066\u3044\u304f\u3082\u306e\u3067\u3059\u3002\n\nbubble_sort\n    static void bubble_sort(int []data)\n    {\n        for(int s = data.length - 1; s > 0; --s)\n        {\n            for(int t = 0; t < s; ++t)\n            {\n                if(data[t] > data[t + 1])\n                {\n                    int temp = data[t];\n                    data[t] = data[t + 1];\n                    data[t + 1] = temp;\n                }\n            }\n        }\n    }\n\n\n\u6b21\u306b\u30af\u30a4\u30c3\u30af\u30bd\u30fc\u30c8\u3002\n\u30c7\u30fc\u30bf\u306e\u96c6\u5408\u3092\u57fa\u6e96\u5024\u3088\u308a\u5927\u304d\u3044\u3082\u306e\u3068\u5c0f\u3055\u3044\u3082\u306e\u306b\u632f\u308a\u5206\u3051\u3001\u307e\u305f\u632f\u308a\u5206\u3051\u305f\u30b0\u30eb\u30fc\u30d7\u304b\u3089\u65b0\u3057\u3044\u57fa\u6e96\u5024\u3092\u5229\u7528\u3057\u3066\u540c\u69d8\u306e\u4e8b\u3092\u518d\u5e30\u7684\u306b\u7e70\u308a\u8fd4\u3059\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u3067\u3059\u3002\n\u4e26\u3073\u66ff\u3048\u306e\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u3067\u306f\u3082\u3063\u3068\u3082\u65e9\u304f\u7d42\u308f\u308a\u307e\u3059\u3002\n\nquick_sort\n    static void quick_sort(int []data, int left, int right){\n\n        if (left >= right) {\n            return;\n        }\n\n        int p = data[(left + right)/2];\n        int l = left;\n        int r = right;\n        int temp;\n\n        while(l <= r) {\n\n            while(data[l] < p) { ++l; }\n            while(data[r] > p) { --r; }\n\n            if (l <= r) {\n                temp = data[l];\n                data[l] = data[r];\n                data[r] = temp;\n                ++l;\n                --r;\n            }\n        }\n\n        quick_sort(data, left, r);  // \u30d4\u30dc\u30c3\u30c8\u3088\u308a\u5de6\u5074\u3092\u30af\u30a4\u30c3\u30af\u30bd\u30fc\u30c8\n        quick_sort(data, l, right); // \u30d4\u30dc\u30c3\u30c8\u3088\u308a\u53f3\u5074\u3092\u30af\u30a4\u30c3\u30af\u30bd\u30fc\u30c8\n\n    }\n\n\n\n\u3061\u306a\u307f\u306b\u30d0\u30d6\u30eb\u30bd\u30fc\u30c8\u304c15\u79d2\u5f31\u3067\u30af\u30a4\u30c3\u30af\u30bd\u30fc\u30c8\u304c0.2\u79d2\u3068\u304b\u305d\u3053\u3089\u8fba\u3067\u3057\u305f\u3002\n\u30af\u30a4\u30c3\u30af\u30bd\u30fc\u30c8\u65e9\u3044\u30fb\u30fb\u30fb\u3002\n[\u8ffd\u8a18]\n\u30b3\u30e1\u30f3\u30c8\u3067\u3054\u6307\u6458\u3092\u3044\u305f\u3060\u304d\u3001\u4fee\u6b63\u3057\u307e\u3057\u305f\u3002\n\u4fee\u6b63\u5f8c\u78ba\u8a8d\u3057\u305f\u3089\u30d0\u30d6\u30eb\u30bd\u30fc\u30c8\u306f40\u79d2\u3067\u3057\u305f\u3002\n\u3053\u308c\u3067\u30d0\u30d6\u30eb\u30bd\u30fc\u30c8\u30af\u30a4\u30c3\u30af\u30bd\u30fc\u30c8\u5171\u306b\u6b63\u5e38\u306b\u52d5\u304d\u307e\u3059\u3002\n\u3054\u8ff7\u60d1\u3092\u304a\u639b\u3051\u3057\u307e\u3057\u305f\nJava\u3092\u5229\u7528\u3057\u305f\u30bd\u30fc\u30c8\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u306b\u3064\u3044\u3066\u4eca\u56de\u306f\u66f8\u3044\u3066\u307f\u307e\u3059\u3002\n\n\u5099\u5fd8\u9332\u3068\u3057\u3066\u6b8b\u3059\u7a0b\u5ea6\u306b\u3057\u307e\u3059\u3002\n\n\u307e\u305a\u3001\u30d0\u30d6\u30eb\u30bd\u30fc\u30c8\u3002\n\n\u4e00\u822c\u7684\u306b\u4f7f\u308f\u308c\u308b\u983b\u5ea6\u304c\u9ad8\u305d\u3046\u306a\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u3002\u5927\u5c0f\u3092\u6bd4\u8f03\u3057\u3066\u9806\u756a\u3092\u5165\u308c\u66ff\u3048\u3066\u3044\u304f\u3082\u306e\u3067\u3059\u3002\n\n```java:bubble_sort\n\tstatic void bubble_sort(int []data)\n\t{\n\t\tfor(int s = data.length - 1; s > 0; --s)\n\t\t{\n\t\t\tfor(int t = 0; t < s; ++t)\n\t\t\t{\n\t\t\t\tif(data[t] > data[t + 1])\n\t\t\t\t{\n\t\t\t\t\tint temp = data[t];\n\t\t\t\t\tdata[t] = data[t + 1];\n\t\t\t\t\tdata[t + 1] = temp;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n```\n\n\n\u6b21\u306b\u30af\u30a4\u30c3\u30af\u30bd\u30fc\u30c8\u3002\n\u30c7\u30fc\u30bf\u306e\u96c6\u5408\u3092\u57fa\u6e96\u5024\u3088\u308a\u5927\u304d\u3044\u3082\u306e\u3068\u5c0f\u3055\u3044\u3082\u306e\u306b\u632f\u308a\u5206\u3051\u3001\u307e\u305f\u632f\u308a\u5206\u3051\u305f\u30b0\u30eb\u30fc\u30d7\u304b\u3089\u65b0\u3057\u3044\u57fa\u6e96\u5024\u3092\u5229\u7528\u3057\u3066\u540c\u69d8\u306e\u4e8b\u3092\u518d\u5e30\u7684\u306b\u7e70\u308a\u8fd4\u3059\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u3067\u3059\u3002\n\n\u4e26\u3073\u66ff\u3048\u306e\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u3067\u306f\u3082\u3063\u3068\u3082\u65e9\u304f\u7d42\u308f\u308a\u307e\u3059\u3002\n\n```java:quick_sort\n    static void quick_sort(int []data, int left, int right){\n\n        if (left >= right) {\n            return;\n        }\n\n        int p = data[(left + right)/2];\n        int l = left;\n        int r = right;\n        int temp;\n\n        while(l <= r) {\n\n            while(data[l] < p) { ++l; }\n            while(data[r] > p) { --r; }\n\n            if (l <= r) {\n                temp = data[l];\n                data[l] = data[r];\n                data[r] = temp;\n                ++l;\n                --r;\n            }\n        }\n\n        quick_sort(data, left, r);  // \u30d4\u30dc\u30c3\u30c8\u3088\u308a\u5de6\u5074\u3092\u30af\u30a4\u30c3\u30af\u30bd\u30fc\u30c8\n        quick_sort(data, l, right); // \u30d4\u30dc\u30c3\u30c8\u3088\u308a\u53f3\u5074\u3092\u30af\u30a4\u30c3\u30af\u30bd\u30fc\u30c8\n\n\t}\n\n```\n\n\u3061\u306a\u307f\u306b\u30d0\u30d6\u30eb\u30bd\u30fc\u30c8\u304c~~15\u79d2\u5f31~~\u3067\u30af\u30a4\u30c3\u30af\u30bd\u30fc\u30c8\u304c0.2\u79d2\u3068\u304b\u305d\u3053\u3089\u8fba\u3067\u3057\u305f\u3002\n\n\n\n\n\u30af\u30a4\u30c3\u30af\u30bd\u30fc\u30c8\u65e9\u3044\u30fb\u30fb\u30fb\u3002\n\n[\u8ffd\u8a18]\n\u30b3\u30e1\u30f3\u30c8\u3067\u3054\u6307\u6458\u3092\u3044\u305f\u3060\u304d\u3001\u4fee\u6b63\u3057\u307e\u3057\u305f\u3002\n\n\u4fee\u6b63\u5f8c\u78ba\u8a8d\u3057\u305f\u3089\u30d0\u30d6\u30eb\u30bd\u30fc\u30c8\u306f40\u79d2\u3067\u3057\u305f\u3002\n\n\u3053\u308c\u3067\u30d0\u30d6\u30eb\u30bd\u30fc\u30c8\u30af\u30a4\u30c3\u30af\u30bd\u30fc\u30c8\u5171\u306b\u6b63\u5e38\u306b\u52d5\u304d\u307e\u3059\u3002\n\n\u3054\u8ff7\u60d1\u3092\u304a\u639b\u3051\u3057\u307e\u3057\u305f\n\n", "tags": ["Java", "\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0"]}