{"context": " More than 1 year has passed since last update.\u30d9\u30bf\u66f8\u304d\u3067\u3059\u304c\u3001C++\u3067PE\u5f62\u5f0f\uff0832\u30d3\u30c3\u30c8\uff09\u30d5\u30a1\u30a4\u30eb\u306e\u5404\u7a2e\u30d8\u30c3\u30c0\u30fc\u3068\u30c7\u30fc\u30bf\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u306e\u7269\u7406\u30a2\u30c9\u30ec\u30b9\u3092\u53d6\u5f97\u3059\u308b\u30b5\u30f3\u30d7\u30eb\u3067\u3059\u3002boost\u306e\u4f7f\u3044\u65b9\u306f\u96d1\u3060\u3068\u601d\u3044\u307e\u3059\u304c\u3001\u304a\u8a31\u3057\u4e0b\u3055\u3044\u3002\n\u91cd\u8981\u306a\u70b9\u306fIMAGE_OPTIONAL_HEADER\u306eDataDirectory[]\u306b\u542b\u307e\u308c\u308bIMAGE_DATA_DIRECTORY\u306e\u7269\u7406\u7684\u306a\u5b9f\u4f53\u306fIMAGE_SECTION_HEADER\u306e\u6307\u3059\u5404\u30bb\u30af\u30b7\u30e7\u30f3\u306b\u542b\u307e\u308c\u3066\u304a\u308a\u3001\u305d\u306e\u7269\u7406\u30a2\u30c9\u30ec\u30b9\u306f\u305d\u308c\u305e\u308c\u306e\u4eee\u60f3\u30a2\u30c9\u30ec\u30b9\u306e\u5dee\u3068\u6240\u5c5e\u3059\u308bIMAGE_SECTION_HEADER\u306ePointerToRawData\u306e\u548c\u3067\u53d6\u5f97\u3067\u304d\u308b\u70b9\u3067\u3059\u3002\u8a73\u3057\u304f\u306f\u30b3\u30fc\u30c9\u3067\u3002\n// 32\u30d3\u30c3\u30c8PE\u5f62\u5f0f\u30d5\u30a1\u30a4\u30eb\u306b\u542b\u307e\u308c\u308b\u30bb\u30af\u30b7\u30e7\u30f3\u3068\u30bb\u30af\u30b7\u30e7\u30f3\u306b\u542b\u307e\u308c\u308b\u30c7\u30fc\u30bf\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u3092\u5217\u6319\u3057\u307e\u3059\u3002\n\n#include <tchar.h>\n\n#include <iostream>\n#include <iomanip>\n#include <fstream>\n#include <locale>\n#include <codecvt>\n\n#define STRICT\n#include <Windows.h>\n\n#include <boost/iostreams/device/mapped_file.hpp>\n\nusing namespace std;\nusing namespace boost::iostreams;\n\n#if defined(UNICODE) || defined(_UNICODE)\n#define tcout wcout\n#define tcin  wcin\n#define tcerr wcerr\n#else\n#define tcout cout\n#define tcin  cin\n#define tcerr cerr\n#endif\n\nconst LPCTSTR ImageDataDirectoryNames[] = {\n    _T(\"Export\"),\n    _T(\"Import\"),\n    _T(\"Resource\"),\n    _T(\"Exception\"),\n    _T(\"Security\"),\n    _T(\"Base Relocation\"),\n    _T(\"Debug\"),\n    _T(\"Architecture\"),\n    _T(\"Global Pointer\"),\n    _T(\"TLS\"),\n    _T(\"Load Config\"),\n    _T(\"Bound Import\"),\n    _T(\"IAT\"),\n    _T(\"Delay Import\"),\n    _T(\"COM DEscriptor\")};\n\nint main()\n{\n    mapped_file file(\"C:\\\\Windows\\\\System32\\\\User32.dll\", ios::in | ios::binary);\n\n    auto dosHeader = (const PIMAGE_DOS_HEADER)file.data();\n    if (dosHeader->e_magic != IMAGE_DOS_SIGNATURE)\n    {\n        tcout << _T(\"\u30d5\u30a1\u30a4\u30eb\u306fMZ\u5f62\u5f0f\u3067\u306f\u3042\u308a\u307e\u305b\u3093\u3002\") << endl;\n        return -1;\n    }\n\n    auto signature = (const PDWORD)(file.data() + dosHeader->e_lfanew);\n    if (*signature != IMAGE_NT_SIGNATURE)\n    {\n        tcout << _T(\"\u30d5\u30a1\u30a4\u30eb\u306fPE\u5f62\u5f0f\u3067\u306f\u3042\u308a\u307e\u305b\u3093\u3002\") << endl;\n        return -1;\n    }\n\n    auto fileHeader = (const PIMAGE_FILE_HEADER)(signature + 1);\n    if (fileHeader->SizeOfOptionalHeader != sizeof(IMAGE_OPTIONAL_HEADER32))\n    {\n        tcout << _T(\"\u30d5\u30a1\u30a4\u30eb\u306f32\u30d3\u30c3\u30c8\u306ePE\u5f62\u5f0f\u3067\u306f\u3042\u308a\u307e\u305b\u3093\u3002\") << endl;\n        return -1;\n    }\n\n    auto optionalHeader = (const PIMAGE_OPTIONAL_HEADER32)(fileHeader + 1);\n    if (optionalHeader->Magic != IMAGE_NT_OPTIONAL_HDR32_MAGIC)\n    {\n        tcout << _T(\"\u30d5\u30a1\u30a4\u30eb\u306f32\u30d3\u30c3\u30c8\u306ePE\u5f62\u5f0f\u3067\u306f\u3042\u308a\u307e\u305b\u3093\u3002\") << endl;\n        return -1;\n    }\n\n    auto firstSectionHeader = (const PIMAGE_SECTION_HEADER)IMAGE_FIRST_SECTION((IMAGE_NT_HEADERS32*)signature);\n    wstring_convert<codecvt<wchar_t, char, mbstate_t>> cv(\n        new codecvt_byname<wchar_t, char, mbstate_t>(\"\"));\n    for (unsigned int i = 0; i < fileHeader->NumberOfSections; i++)\n    {\n        auto psectionHeader = firstSectionHeader + i;\n        auto ws = cv.from_bytes((char*)psectionHeader->Name);\n        tcout << cv.from_bytes((char*)psectionHeader->Name) << endl;\n        tcout << \"Raw Address: 0x\" << hex << setfill(_T('0')) << setw(8) << psectionHeader->PointerToRawData << endl;\n        tcout << \"Raw Size: \" << psectionHeader->SizeOfRawData << \" byte\" << endl;\n        // \u30bb\u30af\u30b7\u30e7\u30f3\u306b\u542b\u307e\u308c\u308b\u30c7\u30fc\u30bf\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u3092\u5217\u6319\u3059\u308b\n        for (unsigned int i = 0; i < IMAGE_NUMBEROF_DIRECTORY_ENTRIES; i++)\n        {\n            auto pdataDir = &optionalHeader->DataDirectory[i];\n            if (psectionHeader->VirtualAddress <= pdataDir->VirtualAddress\n                && pdataDir->VirtualAddress + pdataDir->Size <= psectionHeader->VirtualAddress + psectionHeader->SizeOfRawData)\n            {\n                tcout << \" \"\n                    << hex << setw(8) << setfill(_T('0')) << (pdataDir[i].VirtualAddress - psectionHeader->VirtualAddress)\n                    << \" \" << ImageDataDirectoryNames[i] << endl;\n            }\n        }\n        tcout << endl;\n    }\n\n    file.close();\n\n    return 0;\n}\n\n\u30d9\u30bf\u66f8\u304d\u3067\u3059\u304c\u3001C++\u3067PE\u5f62\u5f0f\uff0832\u30d3\u30c3\u30c8\uff09\u30d5\u30a1\u30a4\u30eb\u306e\u5404\u7a2e\u30d8\u30c3\u30c0\u30fc\u3068\u30c7\u30fc\u30bf\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u306e\u7269\u7406\u30a2\u30c9\u30ec\u30b9\u3092\u53d6\u5f97\u3059\u308b\u30b5\u30f3\u30d7\u30eb\u3067\u3059\u3002boost\u306e\u4f7f\u3044\u65b9\u306f\u96d1\u3060\u3068\u601d\u3044\u307e\u3059\u304c\u3001\u304a\u8a31\u3057\u4e0b\u3055\u3044\u3002\n\n\u91cd\u8981\u306a\u70b9\u306fIMAGE_OPTIONAL_HEADER\u306eDataDirectory[]\u306b\u542b\u307e\u308c\u308bIMAGE_DATA_DIRECTORY\u306e\u7269\u7406\u7684\u306a\u5b9f\u4f53\u306fIMAGE_SECTION_HEADER\u306e\u6307\u3059\u5404\u30bb\u30af\u30b7\u30e7\u30f3\u306b\u542b\u307e\u308c\u3066\u304a\u308a\u3001\u305d\u306e\u7269\u7406\u30a2\u30c9\u30ec\u30b9\u306f\u305d\u308c\u305e\u308c\u306e\u4eee\u60f3\u30a2\u30c9\u30ec\u30b9\u306e\u5dee\u3068\u6240\u5c5e\u3059\u308bIMAGE_SECTION_HEADER\u306ePointerToRawData\u306e\u548c\u3067\u53d6\u5f97\u3067\u304d\u308b\u70b9\u3067\u3059\u3002\u8a73\u3057\u304f\u306f\u30b3\u30fc\u30c9\u3067\u3002\n\n```cpp\n// 32\u30d3\u30c3\u30c8PE\u5f62\u5f0f\u30d5\u30a1\u30a4\u30eb\u306b\u542b\u307e\u308c\u308b\u30bb\u30af\u30b7\u30e7\u30f3\u3068\u30bb\u30af\u30b7\u30e7\u30f3\u306b\u542b\u307e\u308c\u308b\u30c7\u30fc\u30bf\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u3092\u5217\u6319\u3057\u307e\u3059\u3002\n\n#include <tchar.h>\n\n#include <iostream>\n#include <iomanip>\n#include <fstream>\n#include <locale>\n#include <codecvt>\n\n#define STRICT\n#include <Windows.h>\n\n#include <boost/iostreams/device/mapped_file.hpp>\n\nusing namespace std;\nusing namespace boost::iostreams;\n\n#if defined(UNICODE) || defined(_UNICODE)\n#define tcout wcout\n#define tcin  wcin\n#define tcerr wcerr\n#else\n#define tcout cout\n#define tcin  cin\n#define tcerr cerr\n#endif\n\nconst LPCTSTR ImageDataDirectoryNames[] = {\n\t_T(\"Export\"),\n\t_T(\"Import\"),\n\t_T(\"Resource\"),\n\t_T(\"Exception\"),\n\t_T(\"Security\"),\n\t_T(\"Base Relocation\"),\n\t_T(\"Debug\"),\n\t_T(\"Architecture\"),\n\t_T(\"Global Pointer\"),\n\t_T(\"TLS\"),\n\t_T(\"Load Config\"),\n\t_T(\"Bound Import\"),\n\t_T(\"IAT\"),\n\t_T(\"Delay Import\"),\n\t_T(\"COM DEscriptor\")};\n\nint main()\n{\n\tmapped_file file(\"C:\\\\Windows\\\\System32\\\\User32.dll\", ios::in | ios::binary);\n\n\tauto dosHeader = (const PIMAGE_DOS_HEADER)file.data();\n\tif (dosHeader->e_magic != IMAGE_DOS_SIGNATURE)\n\t{\n\t\ttcout << _T(\"\u30d5\u30a1\u30a4\u30eb\u306fMZ\u5f62\u5f0f\u3067\u306f\u3042\u308a\u307e\u305b\u3093\u3002\") << endl;\n\t\treturn -1;\n\t}\n\n\tauto signature = (const PDWORD)(file.data() + dosHeader->e_lfanew);\n\tif (*signature != IMAGE_NT_SIGNATURE)\n\t{\n\t\ttcout << _T(\"\u30d5\u30a1\u30a4\u30eb\u306fPE\u5f62\u5f0f\u3067\u306f\u3042\u308a\u307e\u305b\u3093\u3002\") << endl;\n\t\treturn -1;\n\t}\n\n\tauto fileHeader = (const PIMAGE_FILE_HEADER)(signature + 1);\n\tif (fileHeader->SizeOfOptionalHeader != sizeof(IMAGE_OPTIONAL_HEADER32))\n\t{\n\t\ttcout << _T(\"\u30d5\u30a1\u30a4\u30eb\u306f32\u30d3\u30c3\u30c8\u306ePE\u5f62\u5f0f\u3067\u306f\u3042\u308a\u307e\u305b\u3093\u3002\") << endl;\n\t\treturn -1;\n\t}\n\n\tauto optionalHeader = (const PIMAGE_OPTIONAL_HEADER32)(fileHeader + 1);\n\tif (optionalHeader->Magic != IMAGE_NT_OPTIONAL_HDR32_MAGIC)\n\t{\n\t\ttcout << _T(\"\u30d5\u30a1\u30a4\u30eb\u306f32\u30d3\u30c3\u30c8\u306ePE\u5f62\u5f0f\u3067\u306f\u3042\u308a\u307e\u305b\u3093\u3002\") << endl;\n\t\treturn -1;\n\t}\n\n\tauto firstSectionHeader = (const PIMAGE_SECTION_HEADER)IMAGE_FIRST_SECTION((IMAGE_NT_HEADERS32*)signature);\n\twstring_convert<codecvt<wchar_t, char, mbstate_t>> cv(\n\t\tnew codecvt_byname<wchar_t, char, mbstate_t>(\"\"));\n\tfor (unsigned int i = 0; i < fileHeader->NumberOfSections; i++)\n\t{\n\t\tauto psectionHeader = firstSectionHeader + i;\n\t\tauto ws = cv.from_bytes((char*)psectionHeader->Name);\n\t\ttcout << cv.from_bytes((char*)psectionHeader->Name) << endl;\n\t\ttcout << \"Raw Address: 0x\" << hex << setfill(_T('0')) << setw(8) << psectionHeader->PointerToRawData << endl;\n\t\ttcout << \"Raw Size: \" << psectionHeader->SizeOfRawData << \" byte\" << endl;\n\t\t// \u30bb\u30af\u30b7\u30e7\u30f3\u306b\u542b\u307e\u308c\u308b\u30c7\u30fc\u30bf\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u3092\u5217\u6319\u3059\u308b\n\t\tfor (unsigned int i = 0; i < IMAGE_NUMBEROF_DIRECTORY_ENTRIES; i++)\n\t\t{\n\t\t\tauto pdataDir = &optionalHeader->DataDirectory[i];\n\t\t\tif (psectionHeader->VirtualAddress <= pdataDir->VirtualAddress\n\t\t\t\t&& pdataDir->VirtualAddress + pdataDir->Size <= psectionHeader->VirtualAddress + psectionHeader->SizeOfRawData)\n\t\t\t{\n\t\t\t\ttcout << \" \"\n\t\t\t\t\t<< hex << setw(8) << setfill(_T('0')) << (pdataDir[i].VirtualAddress - psectionHeader->VirtualAddress)\n\t\t\t\t\t<< \" \" << ImageDataDirectoryNames[i] << endl;\n\t\t\t}\n\t\t}\n\t\ttcout << endl;\n\t}\n\n\tfile.close();\n\n\treturn 0;\n}\n```\n", "tags": ["C++", "C++11"]}