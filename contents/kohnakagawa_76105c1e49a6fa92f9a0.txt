{"context": "\n\n\u306f\u3058\u3081\u306b\n\u5206\u5b50\u52d5\u529b\u5b66\u306b\u304a\u3051\u308b\u8fd1\u63a5\u7c92\u5b50\u30ea\u30b9\u30c8(Verlet list\u3068\u3082)\u306e\u69cb\u7bc9\u3092\u3059\u308b\u30b3\u30fc\u30c9\u3092\u8ad6\u6587[1]\u306b\u8a18\u8ff0\u3055\u308c\u3066\u3044\u308bGrid search method\u306b\u57fa\u3065\u3044\u3066\u5b9f\u88c5\u3057\u305f\u3002C++\u3067\u5b9f\u88c5\u3057\u305f\u306e\u3061\u3001CUDA\u3068thrust\u3092\u7528\u3044\u3066GPU\u3067\u3082\u52d5\u304f\u3088\u3046\u306b\u3057\u305f\u3002\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u306f\u3053\u3053\u306b\u3042\u308b\u3002\n\u3053\u306e\u8a18\u4e8b\u3067\u306fCUDA\u3068thrust\u3067\u3069\u306e\u3088\u3046\u306b\u5b9f\u88c5\u3057\u305f\u304b\u306b\u3064\u3044\u3066\u8aac\u660e\u3059\u308b\u3002\n\u5206\u5b50\u52d5\u529b\u5b66\u6cd5\u306e\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u306b\u3064\u3044\u3066\u306fkaityo256\u5148\u751f\u304c\u5206\u5b50\u52d5\u529b\u5b66\u6cd5\u30b9\u30c6\u30c3\u30d7\u30fb\u30d0\u30a4\u30fb\u30b9\u30c6\u30c3\u30d7 \u305d\u306e1\u304b\u3089\u5206\u5b50\u52d5\u529b\u5b66\u6cd5\u30b9\u30c6\u30c3\u30d7\u30fb\u30d0\u30a4\u30fb\u30b9\u30c6\u30c3\u30d7 \u305d\u306e5\u306b\u307e\u3068\u3081\u3066\u3044\u308b\u306e\u3067\u305d\u3061\u3089\u3092\u898b\u3066\u304b\u3089\u306e\u307b\u3046\u304c\u308f\u304b\u308a\u3084\u3059\u3044\u3068\u601d\u3046\u3002\n\nVerlet list\u306e\u3053\u3068\u306f Wikipedia\u3084\u5206\u5b50\u52d5\u529b\u5b66\u6cd5\u30b9\u30c6\u30c3\u30d7\u30fb\u30d0\u30a4\u30fb\u30b9\u30c6\u30c3\u30d7 \u305d\u306e2\u3092\u53c2\u7167\u3002\nGrid search method\u306f\u5206\u5b50\u52d5\u529b\u5b66\u6cd5\u30b9\u30c6\u30c3\u30d7\u30fb\u30d0\u30a4\u30fb\u30b9\u30c6\u30c3\u30d7 \u305d\u306e3\u3092\u53c2\u7167\u3002\n\n\nGrid search method\n\u624b\u9806\u3092\u7c21\u5358\u306b\u304a\u3055\u3089\u3044\u3059\u308b\u3068\n1. i\u756a\u76ee\u306e\u30bb\u30eb(i\u30bb\u30eb)\u306e\u5468\u308a\u306b\u3042\u308b\u30bb\u30eb(j\u30bb\u30eb)\u306e\u756a\u53f7\u3092\u683c\u7d0d\u3057\u305f\u914d\u5217\u3092\u4f5c\u6210\u3002(\u3053\u308c\u306f\u4e00\u5ea6\u3060\u3051\u8a08\u7b97\u3059\u308c\u3070\u3088\u3044\u3002)\n2. \u30b7\u30b9\u30c6\u30e0\u3092\u683c\u5b50\u3067\u533a\u5207\u3063\u3066\u3084\u308a\u3001\u30bb\u30eb\u306b\u5206\u5272\u3059\u308b\u3002(\u683c\u5b50\u306e\u30e1\u30c3\u30b7\u30e5\u306e\u30b5\u30a4\u30balll\u306fl\u2265rsl\u2265rsl \\ge r_{s}\u3068\u306a\u308b\u3088\u3046\u306b\u9078\u3076\u3002)\u3053\u306e\u6642\u306b\u4ee5\u4e0b\u306e\u4e09\u3064\u3092\u884c\u3046\u3002\n\u3000\u3000(a) \u7c92\u5b50\u304c\u3069\u306e\u756a\u53f7\u306e\u30bb\u30eb\u306b\u6240\u5c5e\u3057\u3066\u3044\u308b\u306e\u304b\u3092\u8a08\u7b97\n\u3000\u3000(b) \u5404\u30bb\u30eb\u306b\u7c92\u5b50\u304c\u4f55\u500b\u5165\u3063\u3066\u3044\u308b\u304b\u3092\u8a08\u7b97\n\u3000\u3000(c) i\u30bb\u30eb\u306b\u6240\u5c5e\u3057\u3066\u3044\u308b\u7c92\u5b50\u60c5\u5831\u304c\u914d\u5217\u306e\u4f55\u756a\u76ee\u304b\u3089\u59cb\u307e\u308b\u306e\u304b\u3092\u793a\u3059\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u3092\u4f5c\u6210\u3059\u308b\u3002\n\u3000\u3000(d) \u30bb\u30eb\u756a\u53f7\u3092\u30ad\u30fc\u3068\u3057\u3066\u7c92\u5b50\u60c5\u5831\u306esort\u3092\u884c\u3046(\u3053\u308c\u306f\u529b\u3092\u8a08\u7b97\u3059\u308b\u969b\u306e\u30ad\u30e3\u30c3\u30b7\u30e5\u30d2\u30c3\u30c8\u7387\u306e\u5411\u4e0a\u3092\u898b\u8d8a\u3057\u3066\u3044\u308b\u3002)\n3. 1\u30682\u3067\u5f97\u3089\u308c\u305f\u60c5\u5831\u3092\u3082\u3068\u306b\u3059\u3079\u3066\u306e\u30bb\u30eb\u306b\u3064\u3044\u3066\u4ee5\u4e0b\u306e\u51e6\u7406\u3092\u884c\u3046\n\u3000\u3000(a) i\u30bb\u30eb\u306b\u6240\u5c5e\u3057\u3066\u3044\u308b\u7c92\u5b50\u3068j\u30bb\u30eb\u306b\u6240\u5c5e\u3057\u3066\u3044\u308b\u7c92\u5b50\u306e\u7d44\u307f\u5408\u308f\u305b\u3059\u3079\u3066\u3092\u53d6\u308a\u51fa\u3059\u3002\n\u3000\u3000(b) \u4e0a\u8a18\u3067\u5f97\u305f\u7d44\u307f\u5408\u308f\u305b\u3059\u3079\u3066\u306b\u3064\u3044\u3066\u8ddd\u96e2\u3092\u8a08\u7b97\u3057\u3001rsrsr_{s}\u4ee5\u4e0b\u306e\u30da\u30a2\u3092\u53d6\u308a\u51fa\u3057Verlet list\u3068\u3057\u3066\u767b\u9332\u3059\u308b\u3002\n\nCUDA\u3068thrust\u3092\u7528\u3044\u305f\u5b9f\u88c5\n\u4e0a\u8a18\u306e\u51e6\u7406\u3092CUDA\u3068thrust\u3092\u7528\u3044\u3066\u5b9f\u88c5\u3059\u308b\u3002\n1\u306f\u306e\u51e6\u7406\u306f\u4e26\u5217\u6027\u304c\u5341\u5206\u306b\u306a\u3044\u306e\u3067\u3001CPU\u3067\u8a08\u7b97\u3057\u305f\u30c7\u30fc\u30bf\u3092GPU\u3078\u8ee2\u9001\u3059\u308b\u3002\n2.(a)\u306e\u51e6\u7406\u306b\u3064\u3044\u3066\u306f\u4e26\u5217\u6027\u304c\u81ea\u660e\u3067\u3042\u308a\u3001\u6b21\u306e\u3088\u3046\u306akernel\u3067\u8a08\u7b97\u3067\u304d\u308b\u3002\n\nneighlist_gpu.hpp\n// \u30bb\u30eb\u306e\u756a\u53f7\u3092\u8a08\u7b97\u3059\u308b\u95a2\u6570\n__host__ __device__ __forceinline__\nint32_t gen_hash(const int32_t* idx,\n                 const int32_t* cell_numb) {\n  return idx[0] + (idx[1] + idx[2] * cell_numb[1]) * cell_numb[0];\n}\n\n// \u5404\u7c92\u5b50\u304c\u3069\u306e\u30bb\u30eb\u756a\u53f7\u306b\u6240\u5c5e\u3057\u3066\u3044\u308b\u304b\u3092\u8a08\u7b97\u3059\u308b\u95a2\u6570\ntemplate <typename Vec>\n__global__ void gen_cell_id(const Vec* q,\n                            int32_t* cell_id_of_ptcl,\n                            const int32_t particle_number) {\n  const auto tid = threadIdx.x + blockIdx.x * blockDim.x;\n  if (tid < particle_number) {\n    const auto qi = q[tid]; // \u7c92\u5b50\u306e\u5ea7\u6a19\u30c7\u30fc\u30bf\n    int32_t idx[] = { static_cast<int32_t>(qi.x * params_d::inv_cell_leng[0]), // \u6240\u5c5e\u3059\u308b\u30bb\u30eb\u306e\u756a\u53f7\u3092\u8a08\u7b97\n                      static_cast<int32_t>(qi.y * params_d::inv_cell_leng[1]),\n                      static_cast<int32_t>(qi.z * params_d::inv_cell_leng[2]) }; \n    if (idx[0] == params_d::cell_numb[0]) idx[0]--; // \u7c92\u5b50\u304c\u30b7\u30df\u30e5\u30ec\u30fc\u30b7\u30e7\u30f3\u9818\u57df\u306e\u5883\u754c\u306b\u3044\u308b\u6642\u306e\u51e6\u7406\n    if (idx[1] == params_d::cell_numb[1]) idx[1]--;\n    if (idx[2] == params_d::cell_numb[2]) idx[2]--;\n    cell_id_of_ptcl[tid] = gen_hash(idx, params_d::cell_numb); // \u30bb\u30eb\u306e\u756a\u53f7\u3092\u8a08\u7b97\n  }\n}\n\n\n2.(b)\u3060\u304c\u3001\u3053\u308c\u306fhistogram\u3092\u4f5c\u308b\u3053\u3068\u306b\u7b49\u3057\u3044\u3002\u30bb\u30eb\u306e\u756a\u53f7\u3092\u30ad\u30fc\u3068\u3057\u3066\u5404\u30ad\u30fc\u306b\u6240\u5c5e\u3057\u3066\u3044\u308b\u7c92\u5b50\u6570\u3092\u8a08\u7b97\u3059\u308b\u51e6\u7406\u3068\u8003\u3048\u308b\u3053\u3068\u304c\u3067\u304d\u308b\u3002\u3053\u308c\u306b\u3064\u3044\u3066\u306fThrust\u3092\u7528\u3044\u305fhistogram\u4f5c\u6210\u3067\u307e\u3068\u3081\u305f\u306e\u3067\u3053\u308c\u3092\u53c2\u7167\u3057\u3066\u6b32\u3057\u3044\u3002\n2.(c)\u3060\u304c\u3001\u3053\u308c\u306fhistogram\u3092\u4f5c\u6210\u3057\u305f\u3042\u3068\u3067\u3001\u5404\u30ad\u30fc\u306e\u958b\u59cb\u30a2\u30c9\u30ec\u30b9\u3092\u6c42\u3081\u308b\u3053\u3068\u306b\u7b49\u3057\u3044\u3002\u3053\u308c\u3082Thrust\u3092\u7528\u3044\u305fhistogram\u4f5c\u6210\u3000\u5404\u30ad\u30fc\u306e\u958b\u59cb\u30a2\u30c9\u30ec\u30b9\u3092\u8a08\u7b97\u3092\u53c2\u8003\u306b\u3057\u3066\u307b\u3057\u3044\u3002\n2.(d)\u306b\u3064\u3044\u3066\u3002\u3053\u308c\u306fcell\u306e\u756a\u53f7\u3092key\u3068\u3057\u3066thrust::sort_by_key\u3092\u547c\u3079\u3070\u305d\u308c\u3067\u6e08\u3080\u3002\u3057\u304b\u3057\u3001\u7c92\u5b50\u306e\u4f4d\u7f6e\u3068\u904b\u52d5\u91cf\u3092\u4e26\u3079\u66ff\u3048\u308b\u969b\u306b\u9010\u4e00sort_by_key\u3092\u547c\u3073\u51fa\u3059\u306e\u306f\u5197\u9577\u306b\u601d\u3048\u308b\u3002\n\u305d\u3053\u3067\u3001thrust::sequence\u3068thrust::scatter\u306e\u4e8c\u3064\u3092\u7528\u3044\u308b\u3053\u3068\u3067sort\u51e6\u7406\u81ea\u4f53\u306f\u4e00\u56de\u3067\u6e08\u3080\u3088\u3046\u306b\u3057\u305f\u3002\n\u307e\u305athrust::sequence\u30670\u304b\u3089particle_number - 1\u306e\u9023\u7d9a\u5024\u3092\u4f5c\u6210\u3057\u3001ptcl_id_in_cell_\u3068\u3044\u3046\u914d\u5217\u306b\u683c\u7d0d\u3059\u308b\u3002\n\nneighlist_gpu.hpp\n    thrust::sequence(ptcl_id_in_cell_.thrust_ptr,\n                     ptcl_id_in_cell_.thrust_ptr + particle_number);\n\n\n\u305d\u306e\u3042\u3068\u3067sort_by_key\u306b\u3088\u308a\u30bb\u30eb\u306e\u756a\u53f7\u3092\u30ad\u30fc\u3068\u3057\u3066ptcl_id_in_cell_\u3092sort\u3059\u308b\u3002\n\nneighlist_gpu.hpp\n    thrust::sort_by_key(cell_id_of_ptcl_.thrust_ptr, // cell_id_of_ptcl_\u306f\u5404\u7c92\u5b50\u306e\u30bb\u30eb\u756a\u53f7\n                        cell_id_of_ptcl_.thrust_ptr + particle_number,\n                        ptcl_id_in_cell_.thrust_ptr);\n\n\nptcl_id_in_cell_\u3092\u7528\u3044\u308c\u3070\u300c\u7c92\u5b50\u60c5\u5831\u3092\u3069\u3053\u304b\u3089\u6301\u3063\u3066\u6765\u308c\u3070\u826f\u3044\u304b\u300d\u304c\u308f\u304b\u308b\u3002\u3059\u306a\u308f\u3061\u6b21\u306e\u3088\u3046\u306b\u3059\u308b\u3053\u3068\u3067sort\u304c\u5b8c\u4e86\u3059\u308b\u3002\n// copy to buffer\nfor (int i = 0; i < particle_number; i++) {\n  q_buf[i].x = q[i].x;\n  q_buf[i].y = q[i].y;\n  q_buf[i].z = q[i].z;\n}\n\n// gather\nfor (int i = 0; i < particle_number; i++) {\n  q[i].x = q_buf[ptcl_id_in_cell_[i]].x;\n  q[i].y = q_buf[ptcl_id_in_cell_[i]].y;\n  q[i].z = q_buf[ptcl_id_in_cell_[i]].z;\n}\n\ncopy\u3082gather\u3082thrust\u306b\u5b9f\u88c5\u3055\u308c\u3066\u3044\u308b\u3002\u4e8c\u3064\u3092\u7528\u3044\u3066ptcl_id_in_cell_\u3092\u7528\u3044\u3066\u7c92\u5b50\u60c5\u5831\u3092sort\u3059\u308b\u95a2\u6570\u3092\u4f5c\u308b\u3068\u6b21\u306e\u3088\u3046\u306b\u306a\u308b\u3002\n\nneighlist_gpu.hpp\n  template <typename T>\n  void CopyGather(thrust::device_ptr<T>& __restrict src,\n                  thrust::device_ptr<T>& __restrict buf,\n                  const thrust::device_ptr<int32_t>& __restrict key,\n                  const int size) {\n    thrust::copy(src, src + size, buf);\n    thrust::gather(key, key + size, buf, src);\n  }\n\n...\n\n    //\u7c92\u5b50\u306e\u5ea7\u6a19\u30c7\u30fc\u30bf\u3092sort\n    CopyGather(q.thrust_ptr,\n               buffer_,\n               ptcl_id_in_cell_.thrust_ptr,\n               particle_number);\n    //\u7c92\u5b50\u306e\u904b\u52d5\u91cf\u30c7\u30fc\u30bf\u3092sort\n    CopyGather(p.thrust_ptr,\n               buffer_,\n               ptcl_id_in_cell_.thrust_ptr,\n               particle_number);\n\n\n\u3053\u308c\u3092\u7528\u3044\u3066sort\u51e6\u7406\u81ea\u4f53\u306f\u4e00\u56de\u3060\u3051\u884c\u3044\u3001\u4ed6\u306e\u30c7\u30fc\u30bf\u306e\u4e26\u3073\u66ff\u3048\u306b\u3064\u3044\u3066\u306fcopy\u3068gather\u3092\u7528\u3044\u3066\u884c\u3046\u3002\n3.(a)\u30683.(b)\u306b\u3064\u3044\u3066\u306fCUDA\u306ekernel\u95a2\u6570\u3092\u66f8\u304f\u3053\u3068\u306b\u3059\u308b\u3002\n\u5404\u30bb\u30eb\u306b\u3064\u3044\u3066\u5468\u56f2\u306e\u30bb\u30eb\u306e\u7c92\u5b50\u60c5\u5831\u3092\u629c\u304d\u51fa\u3057\u3001\u8ddd\u96e2\u3092\u8a08\u7b97\u3057rsrsr_{s}\u4ee5\u4e0b\u3067\u3042\u308c\u3070\u30ea\u30b9\u30c8\u3068\u3057\u3066\u767b\u9332\u3059\u308b\u51e6\u7406\u3092\u66f8\u304f\u3068\u6b21\u306e\u3088\u3046\u306b\u306a\u308b\u3002\u5404\u51e6\u7406\u306e\u610f\u5473\u3059\u308b\u3068\u3053\u308d\u306f\u30b3\u30e1\u30f3\u30c8\u3092\u53c2\u7167\u3002\n\nkernel_impl.cuh\n__global__ void make_neighlist_naive(const Vec* q, // \u7c92\u5b50\u5ea7\u6a19\u30c7\u30fc\u30bf\n                                     const int32_t* cell_id_of_ptcl, // \u5404\u7c92\u5b50\u304c\u6240\u5c5e\u3057\u3066\u3044\u308b\u30bb\u30eb\u306e\u756a\u53f7\n                                     const int32_t* neigh_cell_id, // i\u30bb\u30eb\u306e\u5468\u56f2\u306b\u5b58\u5728\u3059\u308bj\u30bb\u30eb\u306e\u756a\u53f7\n                                     const int32_t* cell_pointer, // \u5404\u30bb\u30eb\u306e\u60c5\u5831\u304c\u958b\u59cb\u30a2\u30c9\u30ec\u30b9\u3092\u6307\u5b9a\u3059\u308bindex\n                                     int32_t* neigh_list, // Verlt list\u306e\u7d50\u679c\u3092\u683c\u7d0d\u3059\u308b\u914d\u5217\n                                     int32_t* number_of_partners, // \u5404i\u7c92\u5b50\u306e\u5468\u308ar_{s}\u5185\u306b\u5b58\u5728\u3059\u308b\u7c92\u5b50\u6570\n                                     const Dtype search_length2,\n                                     const int32_t particle_number) {\n  const auto tid = threadIdx.x + blockIdx.x * blockDim.x;\n  if (tid < particle_number) {\n    const auto qi = q[tid];\n    const auto i_cell_id = cell_id_of_ptcl[tid]; // \u7c92\u5b50\u306e\u6240\u5c5e\u3057\u3066\u3044\u308b\u30bb\u30eb\u306e\u756a\u53f7\n    int32_t n_neigh = 0;\n    for (int32_t cid = 0; cid < 27; cid++) { // j\u30bb\u30eb\u306b\u3064\u3044\u3066(i\u30bb\u30eb + \u5468\u308a\u306e26\u500b\u306e\u30bb\u30eb)\n      const auto j_cell_id = neigh_cell_id[27 * i_cell_id + cid];\n      const auto beg_id = cell_pointer[j_cell_id    ]; // j\u30bb\u30eb\u306b\u6240\u5c5e\u3059\u308b\u7c92\u5b50\u60c5\u5831\u306e\u958b\u59cb\u30a2\u30c9\u30ec\u30b9\n      const auto end_id = cell_pointer[j_cell_id + 1]; // j\u30bb\u30eb\u306b\u6240\u5c5e\u3059\u308b\u7c92\u5b50\u60c5\u5831\u306e\u7d42\u4e86\u30a2\u30c9\u30ec\u30b9\n      for (int32_t j = beg_id; j < end_id; j++) { // j\u30bb\u30eb\u306b\u542b\u307e\u308c\u308b\u7c92\u5b50\u3059\u3079\u3066\u306b\u3064\u3044\u3066\n        const auto drx = qi.x - q[j].x;\n        const auto dry = qi.y - q[j].y; \n        const auto drz = qi.z - q[j].z;\n        const auto dr2 = drx * drx + dry * dry + drz * drz; // \u8ddd\u96e2\u3092\u8a08\u7b97\u3057\n        if (dr2 > search_length2 || j == tid) continue;\n        neigh_list[particle_number * n_neigh + tid] = j; // r_{s}\u4ee5\u5185\u3067\u3042\u308c\u3070Verlt list\u306b\u767b\u9332\u3059\u308b\u3002\n        n_neigh++;\n      }\n    }\n    number_of_partners[tid] = n_neigh;\n  }\n}\n\n\n\u3053\u306e\u3042\u3068shared memory, read only cache, warp vote functions\u3092\u4f7f\u3046\u306a\u3069\u3044\u308d\u3044\u308d\u30c1\u30e5\u30fc\u30cb\u30f3\u30b0\u3092\u3057\u305f\u306e\u3060\u304c\u3001\u305d\u308c\u306f\u7701\u7565\u3059\u308b\u3002\n\nCPU\u7248\u3068\u306e\u51e6\u7406\u6642\u9593\u306e\u6bd4\u8f03\nCPU\u7248\u306f\u30de\u30eb\u30c1\u30b3\u30a2\u5b9f\u884c\u3067\u306f\u306a\u3044\u3057\u3001SIMD\u5316\u3082\u3057\u3066\u3044\u306a\u3044(\u3068\u3044\u3046\u304b\u8a66\u307f\u305f\u304c\u304b\u306a\u308a\u96e3\u3057\u304f\u65ad\u5ff5)\u306e\u3067\u5b9f\u969b\u306f\u305d\u3053\u307e\u3067\u5dee\u304c\u306a\u3044\u306f\u305a\u3060\u304c\u300110\u304b\u308920\u500d\u7a0b\u5ea6GPU\u7248\u306e\u65b9\u304c\u65e9\u3044\u3068\u3044\u3046\u7d50\u679c\u304c\u51fa\u305f\u3002\n\nTesla K40t\u3068GTX TITAN\u30672\u500d\u306e\u6027\u80fd\u5dee\u304c\u3042\u308b\u306e\u304c\u6c17\u306b\u306a\u308b\u3002\u3053\u308c\u306b\u3064\u3044\u3066\u306f\u30b9\u30c8\u30e9\u30a4\u30c9\u5e45\u3092\u5909\u3048\u305f\u6642\u306e\u30e1\u30e2\u30ea\u30d0\u30f3\u30c9\u5e45\u6bd4\u8f03 (Tesla K40t\u3068Geforce GTX TITAN)\u3067\u66f8\u3044\u305f\u901a\u308a\u3001\u30e6\u30cb\u30c3\u30c8\u30b9\u30c8\u30e9\u30a4\u30c9\u3067\u306a\u3044\u30e1\u30e2\u30ea\u30a2\u30af\u30bb\u30b9\u3092\u3057\u305f\u6642\u306e\u30e1\u30e2\u30ea\u30d0\u30f3\u30c9\u5e45\u304cTesla\u3068Titan\u3067\uff12\u500d\u9055\u3063\u3066\u3044\u308b\u3053\u3068\u306b\u8d77\u56e0\u3059\u308b\u3002\n\n\u307e\u3068\u3081\nGrid search method\u306e\u5b9f\u88c5\u3092thrust\u3068CUDA\u3092\u7528\u3044\u3066\u884c\u3063\u3066\u307f\u305f\u3002GPU\u3067\u5b9f\u884c\u3057\u306610\u500d\u304b\u308920\u500d\u306e\u6027\u80fd\u5411\u4e0a\u304c\u898b\u3089\u308c\u308b\u3053\u3068\u304c\u308f\u304b\u3063\u305f\u3002\u3053\u306e\u7d50\u679c\u306fGPU\u3067\u8fd1\u508d\u7c92\u5b50\u30ea\u30b9\u30c8\u306e\u4f5c\u6210\u3092\u884c\u3063\u3066\u3082\u6027\u80fd\u4e0a\u5927\u304d\u306a\u554f\u984c\u306f\u306a\u3044\u3053\u3068\u3092\u610f\u5473\u3059\u308b\u3002\u529b\u8a08\u7b97\u306e\u90e8\u5206\u306f\u591a\u304f\u306eMD\u30bd\u30d5\u30c8\u30a6\u30a7\u30a2\u3067\u5b9f\u88c5\u3055\u308c\u3066\u3044\u308b\u3088\u3046\u306bGPU\u3067\u975e\u5e38\u306b\u52b9\u7387\u3088\u304f\u5b9f\u884c\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u308b\u3002\u6642\u9593\u767a\u5c55\u306e\u90e8\u5206\u306b\u3064\u3044\u3066\u3082\u4e26\u5217\u6027\u306f\u81ea\u660e\u3067\u3042\u308a\u3001\u6027\u80fd\u306f\u305d\u3053\u307e\u3067\u60aa\u304f\u306a\u3044\u306f\u305a\u3060\u3002\u3059\u306a\u308f\u3061MD\u306e\u51e6\u7406\u306e\u307b\u3068\u3093\u3069\u3092GPU\u3067\u884c\u3046\u3053\u3068\u304c\u3067\u304d\u308b\u3002CPU\u3068GPU\u3067\u5b8c\u5168\u306b\u72ec\u7acb\u306b\u8a08\u7b97\u3067\u304d\u308b\u3053\u3068\u3067\u30ac\u30c1\u30d8\u30c6\u30ed\u306a\u8a08\u7b97\u306e\u5b9f\u88c5\u3082\u5c11\u3057\u306f\u8efd\u6e1b\u3055\u308c\u308b\u306e\u3067\u306f\u306a\u3044\u3060\u308d\u3046\u304b\u3002\n\n\u53c2\u8003\u6587\u732e\n[1] H. Watanabe, M. Suzuki, and N. Ito, Progress of Theoretical Physics, 126(2), 203-235 (2011).\n#\u306f\u3058\u3081\u306b\n\u5206\u5b50\u52d5\u529b\u5b66\u306b\u304a\u3051\u308b\u8fd1\u63a5\u7c92\u5b50\u30ea\u30b9\u30c8([Verlet list](https://ja.wikipedia.org/wiki/%E3%83%99%E3%83%AB%E3%83%AC%E3%83%BB%E3%83%AA%E3%82%B9%E3%83%88)\u3068\u3082)\u306e\u69cb\u7bc9\u3092\u3059\u308b\u30b3\u30fc\u30c9\u3092\u8ad6\u6587[1]\u306b\u8a18\u8ff0\u3055\u308c\u3066\u3044\u308bGrid search method\u306b\u57fa\u3065\u3044\u3066\u5b9f\u88c5\u3057\u305f\u3002C++\u3067\u5b9f\u88c5\u3057\u305f\u306e\u3061\u3001CUDA\u3068thrust\u3092\u7528\u3044\u3066GPU\u3067\u3082\u52d5\u304f\u3088\u3046\u306b\u3057\u305f\u3002\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u306f[\u3053\u3053](https://github.com/kohnakagawa/md_neighbor_list)\u306b\u3042\u308b\u3002\n\n\u3053\u306e\u8a18\u4e8b\u3067\u306fCUDA\u3068thrust\u3067\u3069\u306e\u3088\u3046\u306b\u5b9f\u88c5\u3057\u305f\u304b\u306b\u3064\u3044\u3066\u8aac\u660e\u3059\u308b\u3002\n\n\u5206\u5b50\u52d5\u529b\u5b66\u6cd5\u306e\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u306b\u3064\u3044\u3066\u306fkaityo256\u5148\u751f\u304c[\u5206\u5b50\u52d5\u529b\u5b66\u6cd5\u30b9\u30c6\u30c3\u30d7\u30fb\u30d0\u30a4\u30fb\u30b9\u30c6\u30c3\u30d7 \u305d\u306e1](http://qiita.com/kaityo256/items/2356fff922938ae3c87c)\u304b\u3089[\u5206\u5b50\u52d5\u529b\u5b66\u6cd5\u30b9\u30c6\u30c3\u30d7\u30fb\u30d0\u30a4\u30fb\u30b9\u30c6\u30c3\u30d7 \u305d\u306e5](http://qiita.com/kaityo256/items/0b5579104761f8ea9410#_reference-5f7abe7722e0ecd4d785)\u306b\u307e\u3068\u3081\u3066\u3044\u308b\u306e\u3067\u305d\u3061\u3089\u3092\u898b\u3066\u304b\u3089\u306e\u307b\u3046\u304c\u308f\u304b\u308a\u3084\u3059\u3044\u3068\u601d\u3046\u3002\n\n* Verlet list\u306e\u3053\u3068\u306f [Wikipedia](https://ja.wikipedia.org/wiki/%E3%83%99%E3%83%AB%E3%83%AC%E3%83%BB%E3%83%AA%E3%82%B9%E3%83%88)\u3084[\u5206\u5b50\u52d5\u529b\u5b66\u6cd5\u30b9\u30c6\u30c3\u30d7\u30fb\u30d0\u30a4\u30fb\u30b9\u30c6\u30c3\u30d7 \u305d\u306e2](http://qiita.com/kaityo256/items/cfacbf6f1136de63bd97#_reference-f714aa6b3812f9614d24)\u3092\u53c2\u7167\u3002\n* Grid search method\u306f[\u5206\u5b50\u52d5\u529b\u5b66\u6cd5\u30b9\u30c6\u30c3\u30d7\u30fb\u30d0\u30a4\u30fb\u30b9\u30c6\u30c3\u30d7 \u305d\u306e3](http://qiita.com/kaityo256/items/4bbad9ecbfa32aff8ed6#_reference-9a543d49cd88fab2f369)\u3092\u53c2\u7167\u3002\n\n#Grid search method\n\u624b\u9806\u3092\u7c21\u5358\u306b\u304a\u3055\u3089\u3044\u3059\u308b\u3068\n1. i\u756a\u76ee\u306e\u30bb\u30eb(i\u30bb\u30eb)\u306e\u5468\u308a\u306b\u3042\u308b\u30bb\u30eb(j\u30bb\u30eb)\u306e\u756a\u53f7\u3092\u683c\u7d0d\u3057\u305f\u914d\u5217\u3092\u4f5c\u6210\u3002(\u3053\u308c\u306f\u4e00\u5ea6\u3060\u3051\u8a08\u7b97\u3059\u308c\u3070\u3088\u3044\u3002)\n2. \u30b7\u30b9\u30c6\u30e0\u3092\u683c\u5b50\u3067\u533a\u5207\u3063\u3066\u3084\u308a\u3001\u30bb\u30eb\u306b\u5206\u5272\u3059\u308b\u3002(\u683c\u5b50\u306e\u30e1\u30c3\u30b7\u30e5\u306e\u30b5\u30a4\u30ba$l$\u306f$l \\ge r_{s}$\u3068\u306a\u308b\u3088\u3046\u306b\u9078\u3076\u3002)\u3053\u306e\u6642\u306b\u4ee5\u4e0b\u306e\u4e09\u3064\u3092\u884c\u3046\u3002\n\u3000\u3000(a) \u7c92\u5b50\u304c\u3069\u306e\u756a\u53f7\u306e\u30bb\u30eb\u306b\u6240\u5c5e\u3057\u3066\u3044\u308b\u306e\u304b\u3092\u8a08\u7b97\n\u3000\u3000(b) \u5404\u30bb\u30eb\u306b\u7c92\u5b50\u304c\u4f55\u500b\u5165\u3063\u3066\u3044\u308b\u304b\u3092\u8a08\u7b97\n\u3000\u3000(c) i\u30bb\u30eb\u306b\u6240\u5c5e\u3057\u3066\u3044\u308b\u7c92\u5b50\u60c5\u5831\u304c\u914d\u5217\u306e\u4f55\u756a\u76ee\u304b\u3089\u59cb\u307e\u308b\u306e\u304b\u3092\u793a\u3059\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u3092\u4f5c\u6210\u3059\u308b\u3002\n\u3000\u3000(d) \u30bb\u30eb\u756a\u53f7\u3092\u30ad\u30fc\u3068\u3057\u3066\u7c92\u5b50\u60c5\u5831\u306esort\u3092\u884c\u3046(\u3053\u308c\u306f\u529b\u3092\u8a08\u7b97\u3059\u308b\u969b\u306e\u30ad\u30e3\u30c3\u30b7\u30e5\u30d2\u30c3\u30c8\u7387\u306e\u5411\u4e0a\u3092\u898b\u8d8a\u3057\u3066\u3044\u308b\u3002)\n3. 1\u30682\u3067\u5f97\u3089\u308c\u305f\u60c5\u5831\u3092\u3082\u3068\u306b\u3059\u3079\u3066\u306e\u30bb\u30eb\u306b\u3064\u3044\u3066\u4ee5\u4e0b\u306e\u51e6\u7406\u3092\u884c\u3046\n\u3000\u3000(a) i\u30bb\u30eb\u306b\u6240\u5c5e\u3057\u3066\u3044\u308b\u7c92\u5b50\u3068j\u30bb\u30eb\u306b\u6240\u5c5e\u3057\u3066\u3044\u308b\u7c92\u5b50\u306e\u7d44\u307f\u5408\u308f\u305b\u3059\u3079\u3066\u3092\u53d6\u308a\u51fa\u3059\u3002\n\u3000\u3000(b) \u4e0a\u8a18\u3067\u5f97\u305f\u7d44\u307f\u5408\u308f\u305b\u3059\u3079\u3066\u306b\u3064\u3044\u3066\u8ddd\u96e2\u3092\u8a08\u7b97\u3057\u3001$r_{s}$\u4ee5\u4e0b\u306e\u30da\u30a2\u3092\u53d6\u308a\u51fa\u3057Verlet list\u3068\u3057\u3066\u767b\u9332\u3059\u308b\u3002\n\n#CUDA\u3068thrust\u3092\u7528\u3044\u305f\u5b9f\u88c5\n\u4e0a\u8a18\u306e\u51e6\u7406\u3092CUDA\u3068thrust\u3092\u7528\u3044\u3066\u5b9f\u88c5\u3059\u308b\u3002\n\n1\u306f\u306e\u51e6\u7406\u306f\u4e26\u5217\u6027\u304c\u5341\u5206\u306b\u306a\u3044\u306e\u3067\u3001CPU\u3067\u8a08\u7b97\u3057\u305f\u30c7\u30fc\u30bf\u3092GPU\u3078\u8ee2\u9001\u3059\u308b\u3002\n2.(a)\u306e\u51e6\u7406\u306b\u3064\u3044\u3066\u306f\u4e26\u5217\u6027\u304c\u81ea\u660e\u3067\u3042\u308a\u3001\u6b21\u306e\u3088\u3046\u306akernel\u3067\u8a08\u7b97\u3067\u304d\u308b\u3002\n\n```c++:neighlist_gpu.hpp\n// \u30bb\u30eb\u306e\u756a\u53f7\u3092\u8a08\u7b97\u3059\u308b\u95a2\u6570\n__host__ __device__ __forceinline__\nint32_t gen_hash(const int32_t* idx,\n                 const int32_t* cell_numb) {\n  return idx[0] + (idx[1] + idx[2] * cell_numb[1]) * cell_numb[0];\n}\n\n// \u5404\u7c92\u5b50\u304c\u3069\u306e\u30bb\u30eb\u756a\u53f7\u306b\u6240\u5c5e\u3057\u3066\u3044\u308b\u304b\u3092\u8a08\u7b97\u3059\u308b\u95a2\u6570\ntemplate <typename Vec>\n__global__ void gen_cell_id(const Vec* q,\n                            int32_t* cell_id_of_ptcl,\n                            const int32_t particle_number) {\n  const auto tid = threadIdx.x + blockIdx.x * blockDim.x;\n  if (tid < particle_number) {\n    const auto qi = q[tid]; // \u7c92\u5b50\u306e\u5ea7\u6a19\u30c7\u30fc\u30bf\n    int32_t idx[] = { static_cast<int32_t>(qi.x * params_d::inv_cell_leng[0]), // \u6240\u5c5e\u3059\u308b\u30bb\u30eb\u306e\u756a\u53f7\u3092\u8a08\u7b97\n                      static_cast<int32_t>(qi.y * params_d::inv_cell_leng[1]),\n                      static_cast<int32_t>(qi.z * params_d::inv_cell_leng[2]) }; \n    if (idx[0] == params_d::cell_numb[0]) idx[0]--; // \u7c92\u5b50\u304c\u30b7\u30df\u30e5\u30ec\u30fc\u30b7\u30e7\u30f3\u9818\u57df\u306e\u5883\u754c\u306b\u3044\u308b\u6642\u306e\u51e6\u7406\n    if (idx[1] == params_d::cell_numb[1]) idx[1]--;\n    if (idx[2] == params_d::cell_numb[2]) idx[2]--;\n    cell_id_of_ptcl[tid] = gen_hash(idx, params_d::cell_numb); // \u30bb\u30eb\u306e\u756a\u53f7\u3092\u8a08\u7b97\n  }\n}\n```\n\n2.(b)\u3060\u304c\u3001\u3053\u308c\u306fhistogram\u3092\u4f5c\u308b\u3053\u3068\u306b\u7b49\u3057\u3044\u3002\u30bb\u30eb\u306e\u756a\u53f7\u3092\u30ad\u30fc\u3068\u3057\u3066\u5404\u30ad\u30fc\u306b\u6240\u5c5e\u3057\u3066\u3044\u308b\u7c92\u5b50\u6570\u3092\u8a08\u7b97\u3059\u308b\u51e6\u7406\u3068\u8003\u3048\u308b\u3053\u3068\u304c\u3067\u304d\u308b\u3002\u3053\u308c\u306b\u3064\u3044\u3066\u306f[Thrust\u3092\u7528\u3044\u305fhistogram\u4f5c\u6210](http://qiita.com/kohnakagawa/items/ac2a89cba84aca159049)\u3067\u307e\u3068\u3081\u305f\u306e\u3067\u3053\u308c\u3092\u53c2\u7167\u3057\u3066\u6b32\u3057\u3044\u3002\n\n2.(c)\u3060\u304c\u3001\u3053\u308c\u306fhistogram\u3092\u4f5c\u6210\u3057\u305f\u3042\u3068\u3067\u3001\u5404\u30ad\u30fc\u306e\u958b\u59cb\u30a2\u30c9\u30ec\u30b9\u3092\u6c42\u3081\u308b\u3053\u3068\u306b\u7b49\u3057\u3044\u3002\u3053\u308c\u3082[Thrust\u3092\u7528\u3044\u305fhistogram\u4f5c\u6210\u3000\u5404\u30ad\u30fc\u306e\u958b\u59cb\u30a2\u30c9\u30ec\u30b9\u3092\u8a08\u7b97](http://qiita.com/kohnakagawa/items/ac2a89cba84aca159049#%E5%90%84%E3%82%AD%E3%83%BC%E3%81%AE%E9%96%8B%E5%A7%8B%E3%82%A2%E3%83%89%E3%83%AC%E3%82%B9%E3%82%92%E8%A8%88%E7%AE%97)\u3092\u53c2\u8003\u306b\u3057\u3066\u307b\u3057\u3044\u3002\n\n2.(d)\u306b\u3064\u3044\u3066\u3002\u3053\u308c\u306fcell\u306e\u756a\u53f7\u3092key\u3068\u3057\u3066thrust::sort_by_key\u3092\u547c\u3079\u3070\u305d\u308c\u3067\u6e08\u3080\u3002\u3057\u304b\u3057\u3001\u7c92\u5b50\u306e\u4f4d\u7f6e\u3068\u904b\u52d5\u91cf\u3092\u4e26\u3079\u66ff\u3048\u308b\u969b\u306b\u9010\u4e00sort_by_key\u3092\u547c\u3073\u51fa\u3059\u306e\u306f\u5197\u9577\u306b\u601d\u3048\u308b\u3002\n\u305d\u3053\u3067\u3001thrust::sequence\u3068thrust::scatter\u306e\u4e8c\u3064\u3092\u7528\u3044\u308b\u3053\u3068\u3067sort\u51e6\u7406\u81ea\u4f53\u306f\u4e00\u56de\u3067\u6e08\u3080\u3088\u3046\u306b\u3057\u305f\u3002\n\n\u307e\u305athrust::sequence\u30670\u304b\u3089particle_number - 1\u306e\u9023\u7d9a\u5024\u3092\u4f5c\u6210\u3057\u3001ptcl_id_in_cell_\u3068\u3044\u3046\u914d\u5217\u306b\u683c\u7d0d\u3059\u308b\u3002\n\n```c++:neighlist_gpu.hpp\n    thrust::sequence(ptcl_id_in_cell_.thrust_ptr,\n                     ptcl_id_in_cell_.thrust_ptr + particle_number);\n```\n\n\u305d\u306e\u3042\u3068\u3067sort_by_key\u306b\u3088\u308a\u30bb\u30eb\u306e\u756a\u53f7\u3092\u30ad\u30fc\u3068\u3057\u3066ptcl_id_in_cell_\u3092sort\u3059\u308b\u3002\n\n```c++:neighlist_gpu.hpp\n    thrust::sort_by_key(cell_id_of_ptcl_.thrust_ptr, // cell_id_of_ptcl_\u306f\u5404\u7c92\u5b50\u306e\u30bb\u30eb\u756a\u53f7\n                        cell_id_of_ptcl_.thrust_ptr + particle_number,\n                        ptcl_id_in_cell_.thrust_ptr);\n```\n\nptcl_id_in_cell_\u3092\u7528\u3044\u308c\u3070\u300c\u7c92\u5b50\u60c5\u5831\u3092\u3069\u3053\u304b\u3089\u6301\u3063\u3066\u6765\u308c\u3070\u826f\u3044\u304b\u300d\u304c\u308f\u304b\u308b\u3002\u3059\u306a\u308f\u3061\u6b21\u306e\u3088\u3046\u306b\u3059\u308b\u3053\u3068\u3067sort\u304c\u5b8c\u4e86\u3059\u308b\u3002\n\n```c++\n// copy to buffer\nfor (int i = 0; i < particle_number; i++) {\n  q_buf[i].x = q[i].x;\n  q_buf[i].y = q[i].y;\n  q_buf[i].z = q[i].z;\n}\n\n// gather\nfor (int i = 0; i < particle_number; i++) {\n  q[i].x = q_buf[ptcl_id_in_cell_[i]].x;\n  q[i].y = q_buf[ptcl_id_in_cell_[i]].y;\n  q[i].z = q_buf[ptcl_id_in_cell_[i]].z;\n}\n```\n\ncopy\u3082gather\u3082thrust\u306b\u5b9f\u88c5\u3055\u308c\u3066\u3044\u308b\u3002\u4e8c\u3064\u3092\u7528\u3044\u3066ptcl_id_in_cell_\u3092\u7528\u3044\u3066\u7c92\u5b50\u60c5\u5831\u3092sort\u3059\u308b\u95a2\u6570\u3092\u4f5c\u308b\u3068\u6b21\u306e\u3088\u3046\u306b\u306a\u308b\u3002\n\n```c++:neighlist_gpu.hpp\n  template <typename T>\n  void CopyGather(thrust::device_ptr<T>& __restrict src,\n                  thrust::device_ptr<T>& __restrict buf,\n                  const thrust::device_ptr<int32_t>& __restrict key,\n                  const int size) {\n    thrust::copy(src, src + size, buf);\n    thrust::gather(key, key + size, buf, src);\n  }\n\n...\n\n    //\u7c92\u5b50\u306e\u5ea7\u6a19\u30c7\u30fc\u30bf\u3092sort\n    CopyGather(q.thrust_ptr,\n               buffer_,\n               ptcl_id_in_cell_.thrust_ptr,\n               particle_number);\n    //\u7c92\u5b50\u306e\u904b\u52d5\u91cf\u30c7\u30fc\u30bf\u3092sort\n    CopyGather(p.thrust_ptr,\n               buffer_,\n               ptcl_id_in_cell_.thrust_ptr,\n               particle_number);\n```\n\n\u3053\u308c\u3092\u7528\u3044\u3066sort\u51e6\u7406\u81ea\u4f53\u306f\u4e00\u56de\u3060\u3051\u884c\u3044\u3001\u4ed6\u306e\u30c7\u30fc\u30bf\u306e\u4e26\u3073\u66ff\u3048\u306b\u3064\u3044\u3066\u306fcopy\u3068gather\u3092\u7528\u3044\u3066\u884c\u3046\u3002\n\n3.(a)\u30683.(b)\u306b\u3064\u3044\u3066\u306fCUDA\u306ekernel\u95a2\u6570\u3092\u66f8\u304f\u3053\u3068\u306b\u3059\u308b\u3002\n\u5404\u30bb\u30eb\u306b\u3064\u3044\u3066\u5468\u56f2\u306e\u30bb\u30eb\u306e\u7c92\u5b50\u60c5\u5831\u3092\u629c\u304d\u51fa\u3057\u3001\u8ddd\u96e2\u3092\u8a08\u7b97\u3057$r_{s}$\u4ee5\u4e0b\u3067\u3042\u308c\u3070\u30ea\u30b9\u30c8\u3068\u3057\u3066\u767b\u9332\u3059\u308b\u51e6\u7406\u3092\u66f8\u304f\u3068\u6b21\u306e\u3088\u3046\u306b\u306a\u308b\u3002\u5404\u51e6\u7406\u306e\u610f\u5473\u3059\u308b\u3068\u3053\u308d\u306f\u30b3\u30e1\u30f3\u30c8\u3092\u53c2\u7167\u3002\n\n```cuda:kernel_impl.cuh\n__global__ void make_neighlist_naive(const Vec* q, // \u7c92\u5b50\u5ea7\u6a19\u30c7\u30fc\u30bf\n                                     const int32_t* cell_id_of_ptcl, // \u5404\u7c92\u5b50\u304c\u6240\u5c5e\u3057\u3066\u3044\u308b\u30bb\u30eb\u306e\u756a\u53f7\n                                     const int32_t* neigh_cell_id, // i\u30bb\u30eb\u306e\u5468\u56f2\u306b\u5b58\u5728\u3059\u308bj\u30bb\u30eb\u306e\u756a\u53f7\n                                     const int32_t* cell_pointer, // \u5404\u30bb\u30eb\u306e\u60c5\u5831\u304c\u958b\u59cb\u30a2\u30c9\u30ec\u30b9\u3092\u6307\u5b9a\u3059\u308bindex\n                                     int32_t* neigh_list, // Verlt list\u306e\u7d50\u679c\u3092\u683c\u7d0d\u3059\u308b\u914d\u5217\n                                     int32_t* number_of_partners, // \u5404i\u7c92\u5b50\u306e\u5468\u308ar_{s}\u5185\u306b\u5b58\u5728\u3059\u308b\u7c92\u5b50\u6570\n                                     const Dtype search_length2,\n                                     const int32_t particle_number) {\n  const auto tid = threadIdx.x + blockIdx.x * blockDim.x;\n  if (tid < particle_number) {\n    const auto qi = q[tid];\n    const auto i_cell_id = cell_id_of_ptcl[tid]; // \u7c92\u5b50\u306e\u6240\u5c5e\u3057\u3066\u3044\u308b\u30bb\u30eb\u306e\u756a\u53f7\n    int32_t n_neigh = 0;\n    for (int32_t cid = 0; cid < 27; cid++) { // j\u30bb\u30eb\u306b\u3064\u3044\u3066(i\u30bb\u30eb + \u5468\u308a\u306e26\u500b\u306e\u30bb\u30eb)\n      const auto j_cell_id = neigh_cell_id[27 * i_cell_id + cid];\n      const auto beg_id = cell_pointer[j_cell_id    ]; // j\u30bb\u30eb\u306b\u6240\u5c5e\u3059\u308b\u7c92\u5b50\u60c5\u5831\u306e\u958b\u59cb\u30a2\u30c9\u30ec\u30b9\n      const auto end_id = cell_pointer[j_cell_id + 1]; // j\u30bb\u30eb\u306b\u6240\u5c5e\u3059\u308b\u7c92\u5b50\u60c5\u5831\u306e\u7d42\u4e86\u30a2\u30c9\u30ec\u30b9\n      for (int32_t j = beg_id; j < end_id; j++) { // j\u30bb\u30eb\u306b\u542b\u307e\u308c\u308b\u7c92\u5b50\u3059\u3079\u3066\u306b\u3064\u3044\u3066\n        const auto drx = qi.x - q[j].x;\n        const auto dry = qi.y - q[j].y; \n        const auto drz = qi.z - q[j].z;\n        const auto dr2 = drx * drx + dry * dry + drz * drz; // \u8ddd\u96e2\u3092\u8a08\u7b97\u3057\n        if (dr2 > search_length2 || j == tid) continue;\n        neigh_list[particle_number * n_neigh + tid] = j; // r_{s}\u4ee5\u5185\u3067\u3042\u308c\u3070Verlt list\u306b\u767b\u9332\u3059\u308b\u3002\n        n_neigh++;\n      }\n    }\n    number_of_partners[tid] = n_neigh;\n  }\n}\n```\n\n\u3053\u306e\u3042\u3068shared memory, read only cache, [warp vote functions](http://qiita.com/kohnakagawa/items/47bdc86d08525b28ce79)\u3092\u4f7f\u3046\u306a\u3069\u3044\u308d\u3044\u308d\u30c1\u30e5\u30fc\u30cb\u30f3\u30b0\u3092\u3057\u305f\u306e\u3060\u304c\u3001\u305d\u308c\u306f\u7701\u7565\u3059\u308b\u3002\n\n#CPU\u7248\u3068\u306e\u51e6\u7406\u6642\u9593\u306e\u6bd4\u8f03\nCPU\u7248\u306f\u30de\u30eb\u30c1\u30b3\u30a2\u5b9f\u884c\u3067\u306f\u306a\u3044\u3057\u3001SIMD\u5316\u3082\u3057\u3066\u3044\u306a\u3044(\u3068\u3044\u3046\u304b\u8a66\u307f\u305f\u304c\u304b\u306a\u308a\u96e3\u3057\u304f\u65ad\u5ff5)\u306e\u3067\u5b9f\u969b\u306f\u305d\u3053\u307e\u3067\u5dee\u304c\u306a\u3044\u306f\u305a\u3060\u304c\u300110\u304b\u308920\u500d\u7a0b\u5ea6GPU\u7248\u306e\u65b9\u304c\u65e9\u3044\u3068\u3044\u3046\u7d50\u679c\u304c\u51fa\u305f\u3002\n\n![image](https://qiita-image-store.s3.amazonaws.com/0/120342/01e12920-4876-ee0f-7208-28d6cc700d84.png)\n\nTesla K40t\u3068GTX TITAN\u30672\u500d\u306e\u6027\u80fd\u5dee\u304c\u3042\u308b\u306e\u304c\u6c17\u306b\u306a\u308b\u3002\u3053\u308c\u306b\u3064\u3044\u3066\u306f[\u30b9\u30c8\u30e9\u30a4\u30c9\u5e45\u3092\u5909\u3048\u305f\u6642\u306e\u30e1\u30e2\u30ea\u30d0\u30f3\u30c9\u5e45\u6bd4\u8f03 (Tesla K40t\u3068Geforce GTX TITAN)](http://qiita.com/kohnakagawa/items/a78a79ce3a5633767a30)\u3067\u66f8\u3044\u305f\u901a\u308a\u3001\u30e6\u30cb\u30c3\u30c8\u30b9\u30c8\u30e9\u30a4\u30c9\u3067\u306a\u3044\u30e1\u30e2\u30ea\u30a2\u30af\u30bb\u30b9\u3092\u3057\u305f\u6642\u306e\u30e1\u30e2\u30ea\u30d0\u30f3\u30c9\u5e45\u304cTesla\u3068Titan\u3067\uff12\u500d\u9055\u3063\u3066\u3044\u308b\u3053\u3068\u306b\u8d77\u56e0\u3059\u308b\u3002\n\n#\u307e\u3068\u3081\nGrid search method\u306e\u5b9f\u88c5\u3092thrust\u3068CUDA\u3092\u7528\u3044\u3066\u884c\u3063\u3066\u307f\u305f\u3002GPU\u3067\u5b9f\u884c\u3057\u306610\u500d\u304b\u308920\u500d\u306e\u6027\u80fd\u5411\u4e0a\u304c\u898b\u3089\u308c\u308b\u3053\u3068\u304c\u308f\u304b\u3063\u305f\u3002\u3053\u306e\u7d50\u679c\u306fGPU\u3067\u8fd1\u508d\u7c92\u5b50\u30ea\u30b9\u30c8\u306e\u4f5c\u6210\u3092\u884c\u3063\u3066\u3082\u6027\u80fd\u4e0a\u5927\u304d\u306a\u554f\u984c\u306f\u306a\u3044\u3053\u3068\u3092\u610f\u5473\u3059\u308b\u3002\u529b\u8a08\u7b97\u306e\u90e8\u5206\u306f\u591a\u304f\u306eMD\u30bd\u30d5\u30c8\u30a6\u30a7\u30a2\u3067\u5b9f\u88c5\u3055\u308c\u3066\u3044\u308b\u3088\u3046\u306bGPU\u3067\u975e\u5e38\u306b\u52b9\u7387\u3088\u304f\u5b9f\u884c\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u308b\u3002\u6642\u9593\u767a\u5c55\u306e\u90e8\u5206\u306b\u3064\u3044\u3066\u3082\u4e26\u5217\u6027\u306f\u81ea\u660e\u3067\u3042\u308a\u3001\u6027\u80fd\u306f\u305d\u3053\u307e\u3067\u60aa\u304f\u306a\u3044\u306f\u305a\u3060\u3002\u3059\u306a\u308f\u3061MD\u306e\u51e6\u7406\u306e\u307b\u3068\u3093\u3069\u3092GPU\u3067\u884c\u3046\u3053\u3068\u304c\u3067\u304d\u308b\u3002CPU\u3068GPU\u3067\u5b8c\u5168\u306b\u72ec\u7acb\u306b\u8a08\u7b97\u3067\u304d\u308b\u3053\u3068\u3067[\u30ac\u30c1\u30d8\u30c6\u30ed\u306a\u8a08\u7b97](http://apollon.issp.u-tokyo.ac.jp/~watanabe/diary/d201612.html)\u306e\u5b9f\u88c5\u3082\u5c11\u3057\u306f\u8efd\u6e1b\u3055\u308c\u308b\u306e\u3067\u306f\u306a\u3044\u3060\u308d\u3046\u304b\u3002\n\n#\u53c2\u8003\u6587\u732e\n[1] H. Watanabe, M. Suzuki, and N. Ito, Progress of Theoretical Physics, 126(2), 203-235 (2011).\n", "tags": ["C++", "CUDA", "GPGPU", "GPU", "Thrust"]}