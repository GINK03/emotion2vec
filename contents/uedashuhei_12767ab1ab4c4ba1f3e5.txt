{"tags": ["slick", "Scala", "slick3"], "context": "\n\nSlick3\u91ce\u90ce\u306e\u5099\u5fd8\u9332\uff11\n\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u985e\n\n\n\u516c\u5f0f\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8(\u7ffb\u8a33\u7248) \nslick3.1.1 document\nslick-multidb\nslick-akka-http\nhello slick\nplain sql\n\nSQL\u306e\u5b9f\u884c\u65b9\u6cd5\u3042\u308c\u3084\u3053\u308c\u3084\n\u57fa\u672c\u306f\n\nmain.scala\ndo.run(<action>)\n\n\naction\u90e8\u5206\n\naction.scala\n//insert\u7cfb\nUsers += User(3, \"charles\", \"charles@example.com\")\n//update\u7cfb\nUsers.filter { _.name.startsWith(\"alice\") }.map(_.name).update(\"alice-updated\")       \n//delete\u7cfb\nUsers.filter{ _.name === \"alice\" }.delete\n\n\ngroup by\u3068\u304b\u3053\u3093\u306a\u611f\u3058\u3000\u53c2\u8003\u306b\u3057\u305f\u30b5\u30a4\u30c8\n\ngroupby.sql\nSELECT s.club_id, s.classroom, count(*)\n  FROM Sutudents s\n  GROUP BY s.club_id, u.classroom\n\n\n\u2193slick\u3067\u66f8\u304f\u3068\n\nslick.scala\nval q3 = for {\n  ((ci, cr), ss) <- Students.groupBy(s => (s.clubId, s.classroom))\n} yield (ci, cr, ss.length)\n\nval r3: List[(Option[Long], String, Int)] = q3.list()\n\n\nstackoverflow \u30ea\u30ec\u30fc\u30b7\u30e7\u30f3\u72b6\u614b\u306e\u7d50\u679c\u3092\u53d6\u5f97\u3059\u308b\u65b9\u6cd5\njoin\u3057\u3066GroupBy\u3059\u308b\u30b1\u30fc\u30b9\u3000\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u5c11\u306a\u30c3\uff01\n\nmain.scala\n\n// \u5165\u308c\u7269\u306e\u578b\u3092\u7528\u610f\u3057\u307e\u3059\n// parents, childs \u306f\u5225\u9014model\u304c\u5b58\u5728\u3059\u308b\u60f3\u5b9a\u3067\u3059\ncase class ChildSummaryEntity(childsCount: Int)\ncase class ParentEntity(id: Option[Long], parentname: String, summary: Option[ChildSummaryEntity])\n\ndef getNestedEntityByGroup(parentId: Long): Future[Seq[ParentEntity]] = {\n\n    val sampleId: Long = 159\n    val a = \n      // where\u53e5\n      parents.filter( _.id === parentId ).flatMap(p =>\n      childs.filter( _.parentId === p.id ).map((p, _ )))\n      // gourp by\u7bc0 \u3053\u3053\u30672\u3064\u6307\u5b9a\u3059\u308b\u3068select\u53e5\u306eP\u306fTuple\u578b\u306b\u306a\u308b\u306e\u3067\u6ce8\u610f\n      .groupBy (u => (p._1.id, p._1.parentname))\n\n      // select\u53e5\n      .map { case (p, c) => (\n        p._1,\n        p._2,\n        c.map(_._1).length)} // select column\n      .result\n\n    db.run(a.transactionally).flatMap { r =>\n      Future.successful {\n        r.map {\n          // select\u53e5\u306e\u9805\u76ee\u3092\u5143\u306b\u30cd\u30b9\u30c8\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u4f5c\u6210\u3059\u308b\n          case (i, n, s) => ParentEntity(i, n, Some(ChildSummaryEntity(s)) )\n        }\n      }\n    }\n  }\n\n\n\n\u6ce8\u610f\u70b9\njoinLeft\u306a\u3069\u3067\u5916\u90e8\u7d50\u5408\u3059\u308b\u5834\u5408\u3001Left\u5074\u306fOption\u6271\u3044\u306b\u306a\u308b\u306e\u3067\u6ce8\u610f\u304c\u5fc5\u8981\u3002\nLeft\u30b5\u30a4\u30c9\u306eColumn\u3092\u6271\u3046\u5834\u5408\u306fmap(.hoge)\u3067\u306f\u306a\u304fflatMap(.hoge)\u3068\u3059\u308b\u5fc5\u8981\u304c\u3042\u308b\u3002\n\u305d\u308c\u306f\u306a\u305c\u304b\uff1f\nmap\u3092\u4f7f\u3063\u305f\u5834\u5408\u3001\u51fa\u529b\u3055\u308c\u308b\u751fSQL\u3092\u89b3\u5bdf\u3059\u308b\u3068\u4e00\u76ee\u77ad\u7136\u3060\u304c\u3001\u5c04\u5f71\u306b\u4e0d\u8981\u306acase\u6587\u304c\u6df7\u5165\u3059\u308b\u5834\u5408\u304c\u3042\u308b\u3002\nslick3\u306b\u304a\u3051\u308bflatMap\u306b\u3064\u3044\u3066\u306e\u7406\u89e3\n\u5224\u308a\u3084\u3059\u3044blog\n\u751fSQL\n\u516c\u5f0f: slick-plainsql\n\u30b5\u30fc\u30d3\u30b9\u30c8\u30ec\u30a4\u30c8\u306b\u5b9f\u88c5\u3059\u308b\u5834\u5408\u3092\u524d\u63d0\u306b\u9032\u3081\u307e\u3059\n\n\u5229\u7528\u90e8\u5206\u306e\u30b5\u30f3\u30d7\u30eb\u306f\u3053\u3061\u3089\n\n\nroute.scala\ntrait FuckServiceRoute  extends FuckService  {\n// (_.toJson)\u3067JSON\u5909\u63db\u3059\u308b\u6642\u306e\u30d5\u30a9\u30fc\u30de\u30c3\u30c8\u7528implict\nimplicit val fuckFormat = jsonFormat3(FuckEntity)\ntrait FuckRoute  extends FuckService {\n  val fuckRoute = pathPrefix(\"fuck\") {\n    get {\n      complete(getFuckByRawSQL.map(_.toJson))\n    }\n  }\n}\n\n\n\n\u5b9f\u884c\u90e8\u5206\u306eTrait\u306f\u3053\u3061\u3089\n\n\ntransfer.scala\nimport models.FuckTransfer\ntrait FuckService extends FuckTable with FuckTransfer {\n  // \u30de\u30c3\u30d4\u30f3\u30b0\u306fFuckTransfer.FuckEntity\u5074\u3067implict\u3067\u5b9a\u7fa9\u3059\u308b\u306e\u3067\u3053\u3053\u3067\u306f\u4f55\u3082\u6c17\u306b\u3059\u308b\u5fc5\u8981\u306a\u3057\n  def getFuckByRawSQL() : Future[Seq[FuckEntity]]={\n    // \u6587\u5b57\u5217\u88dc\u5b8c\u3092\u3057\u3066\u307f\u308bslick\u5074\u3067SQL\u30a4\u30f3\u30b8\u30a7\u30af\u30b7\u30e7\u30f3\u5bfe\u5fdc\u307e\u3067\u3084\u3063\u3066\u304f\u308c\u307e\u3059\n    val s = \"fuck\"   \n    val a = sql\"SELECT id, $s, created_at FROM fuck\".as[FuckEntity]\n    db.run(a)\n  }\n}\n\n\n\n\u30c8\u30e9\u30f3\u30b9\u30d5\u30a1\u30fc\u306eTrait\u306f\u3053\u3061\u3089\n\n\nmodel.scala\npackage models\nimport slick.jdbc.GetResult\nimport org.joda.time.DateTime\n// \u7d20\u306eslick\u306b\u306f\u3001jodatime\u306eimplict\u304c\u306a\u3044\u306e\u3067\u8ffd\u52a0\u3001\u3053\u308c\u304c\u306a\u3044\u3068DateTime\u306f\u5229\u7528\u3067\u304d\u306a\u3044\u305c\nimport com.github.tototoshi.slick.MySQLJodaSupport._\ntrait FuckTransfer {\n  case class FuckEntity(userId: Long, fuck: String, createAt: DateTime)\n  //\u3053\u308c\u3060\u3051\u3067\u52dd\u624b\u306b\u30de\u30c3\u30d4\u30f3\u30b0\u3057\u3066\u304f\u308c\u307e\u3059\u304c\u3001\u9806\u756a\u5927\u4e8b \u540d\u524d\u5927\u4e8b\n  implicit val getFuckEntityResult = GetResult(r => FuckEntity(r.<<, r.<<, r.<<))\n}\n\n\n\u30c8\u30e9\u30f3\u30b6\u30af\u30b7\u30e7\u30f3\n\u516c\u5f0f\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\n\u30ed\u30fc\u30eb\u30d0\u30c3\u30af stackoverflow \u52d5\u4f5c\u672a\u78ba\u8a8d\n\ntransactionnally.scala\n  //\u30c8\u30e9\u30f3\u30b6\u30af\u30b7\u30e7\u30f3\u4e2d\u3067\u8907\u6570\u306e\u51e6\u7406\u3092\u4e8b\u9805\u3059\u308b\u5834\u5408\n  def getAcidTest(): Future[Unit]  ={\n    db.run(\n      DBIO.seq(\n        // \u307f\u304b\u3093\u3092\u871c\u67d1\u306b\u5909\u3048\u3066\u5024\u6bb5\u3092\u5909\u66f4\uff08Item\u4e38\u3054\u3068\u66f4\u65b0\uff09\n        items.filter(_.id === 2).update(Item(2, \"\u871c\u67d1\", 250)),\n        // \u871c\u67d1\u3092\u30df\u30ab\u30f3\u306b\u5909\u66f4\uff08name\u3060\u3051\u3092\u66f4\u65b0\uff09\n        items.filter(_.id === 2).map(_.name).update(\"\u30df\u30ab\u30f3\"),\n        // id\u304c2\u3088\u308a\u5927\u304d\u3044\u7269\u306eprice\u3092800\u306b\uff08\u8907\u6570\u30ec\u30b3\u30fc\u30c9\u3092\u307e\u3068\u3081\u3066\u66f4\u65b0\uff09\n        items.filter(_.id > 2).map(_.price).update(800)\n      ).transactionally\n    )\n  }\n\n\ndb.run\u3067\u5b9f\u884c\u3059\u308baction\u306f\u4e00\u3064\u306a\u306e\u3067\u8907\u6570\u306e\u51e6\u7406\u304c\u5fc5\u8981\u306a\u5834\u5408\u306f\u30a2\u30af\u30b7\u30e7\u30f3\u5408\u6210\u3059\u308b\n  \u203b\u25cb!=true\u306a\u3089\u51e6\u7406\u3059\u308b\u306a\u3069\n1. qiita\n2. stackoverflow\n\u3064\u307e\u308a\u8907\u6570\u306e\u51e6\u7406\u3092\u884c\u3046\u5834\u5408\u306f\u5168\u3066\u30a2\u30af\u30b7\u30e7\u30f3\u5408\u6210\u3059\u308b\u5fc5\u8981\u304c\u3042\u308b\n\u691c\u7d22\u7d50\u679c\u3092\u3082\u3068\u306b\u8a08\u7b97\u51e6\u7406\u3092\u3057\u3001\u751fSQL\u3092\u767a\u884c\u3057\u3066\u7d50\u679c\u3092\u5408\u6210\u3059\u308b\u6642\u3082\u540c\u3058\uff08\u9006\u306b\u9762\u5012\u304f\u3055\u3044\u308f\u3063\uff01\uff09\nstack overflow\n\u30a2\u30af\u30b7\u30e7\u30f3\u5408\u6210\n\u516c\u5f0f\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\n\u6ce8\u610f\u70b9\n\n\u30b8\u30a7\u30cd\u30ea\u30c3\u30af\u7cfb\u306e\u96db\u578b\u306b\u51fa\u6765\u308b\u306e\u306f\u300ccase class\u300d\u3060\u3051\nslick\u306emodel\u306f\u30c8\u30ec\u30a4\u30c8\n\nSlick3\u91ce\u90ce\u306e\u5099\u5fd8\u93322\u3078\u3064\u3065\u304f\n# Slick3\u91ce\u90ce\u306e\u5099\u5fd8\u9332\uff11\n\n**\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u985e**\n\n  * [\u516c\u5f0f\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8(\u7ffb\u8a33\u7248)](http://krrrr38.github.io/slick-doc-ja/v3.0.out/slick-doc-ja+3.0.html) \n  * [slick3.1.1 document](http://slick.lightbend.com/doc/3.1.1/queries.html)\n  * [slick-multidb](https://www.lightbend.com/activator/template/slick-multidb-3.1)\n  * [slick-akka-http](https://www.lightbend.com/activator/template/slick-akka-http)\n  * [hello slick](https://www.lightbend.com/activator/template/hello-slick-3.1)\n  * [plain sql](https://www.lightbend.com/activator/template/slick-plainsql-3.1)\n\n**SQL\u306e\u5b9f\u884c\u65b9\u6cd5\u3042\u308c\u3084\u3053\u308c\u3084**\n\n\u57fa\u672c\u306f\n\n```main.scala\ndo.run(<action>)\n```\n\naction\u90e8\u5206\n\n```action.scala\n//insert\u7cfb\nUsers += User(3, \"charles\", \"charles@example.com\")\n//update\u7cfb\nUsers.filter { _.name.startsWith(\"alice\") }.map(_.name).update(\"alice-updated\")       \n//delete\u7cfb\nUsers.filter{ _.name === \"alice\" }.delete\n```\n\ngroup by\u3068\u304b\u3053\u3093\u306a\u611f\u3058\u3000[\u53c2\u8003\u306b\u3057\u305f\u30b5\u30a4\u30c8](http://kxbmap.hatenablog.com/entry/2013/05/25/183014)\n\n```groupby.sql\nSELECT s.club_id, s.classroom, count(*)\n  FROM Sutudents s\n  GROUP BY s.club_id, u.classroom\n```\n\n\u2193slick\u3067\u66f8\u304f\u3068\n\n```slick.scala\nval q3 = for {\n  ((ci, cr), ss) <- Students.groupBy(s => (s.clubId, s.classroom))\n} yield (ci, cr, ss.length)\n\nval r3: List[(Option[Long], String, Int)] = q3.list()\n```\n\n[stackoverflow \u30ea\u30ec\u30fc\u30b7\u30e7\u30f3\u72b6\u614b\u306e\u7d50\u679c\u3092\u53d6\u5f97\u3059\u308b\u65b9\u6cd5](http://stackoverflow.com/questions/35258379/slick-3-return-custom-case-class-from-query)\n\n\n**join\u3057\u3066GroupBy\u3059\u308b\u30b1\u30fc\u30b9\u3000\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u5c11\u306a\u30c3\uff01**\n\n```main.scala\n\n// \u5165\u308c\u7269\u306e\u578b\u3092\u7528\u610f\u3057\u307e\u3059\n// parents, childs \u306f\u5225\u9014model\u304c\u5b58\u5728\u3059\u308b\u60f3\u5b9a\u3067\u3059\ncase class ChildSummaryEntity(childsCount: Int)\ncase class ParentEntity(id: Option[Long], parentname: String, summary: Option[ChildSummaryEntity])\n\ndef getNestedEntityByGroup(parentId: Long): Future[Seq[ParentEntity]] = {\n\n    val sampleId: Long = 159\n    val a = \n      // where\u53e5\n      parents.filter( _.id === parentId ).flatMap(p =>\n      childs.filter( _.parentId === p.id ).map((p, _ )))\n      // gourp by\u7bc0 \u3053\u3053\u30672\u3064\u6307\u5b9a\u3059\u308b\u3068select\u53e5\u306eP\u306fTuple\u578b\u306b\u306a\u308b\u306e\u3067\u6ce8\u610f\n      .groupBy (u => (p._1.id, p._1.parentname))\n      \n      // select\u53e5\n      .map { case (p, c) => (\n        p._1,\n        p._2,\n        c.map(_._1).length)} // select column\n      .result\n\n    db.run(a.transactionally).flatMap { r =>\n      Future.successful {\n        r.map {\n          // select\u53e5\u306e\u9805\u76ee\u3092\u5143\u306b\u30cd\u30b9\u30c8\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u4f5c\u6210\u3059\u308b\n          case (i, n, s) => ParentEntity(i, n, Some(ChildSummaryEntity(s)) )\n        }\n      }\n    }\n  }\n```\n\n#### \u6ce8\u610f\u70b9\njoinLeft\u306a\u3069\u3067\u5916\u90e8\u7d50\u5408\u3059\u308b\u5834\u5408\u3001Left\u5074\u306fOption\u6271\u3044\u306b\u306a\u308b\u306e\u3067\u6ce8\u610f\u304c\u5fc5\u8981\u3002\nLeft\u30b5\u30a4\u30c9\u306eColumn\u3092\u6271\u3046\u5834\u5408\u306fmap(_.hoge)\u3067\u306f\u306a\u304fflatMap(_.hoge)\u3068\u3059\u308b\u5fc5\u8981\u304c\u3042\u308b\u3002\n\u305d\u308c\u306f\u306a\u305c\u304b\uff1f\nmap\u3092\u4f7f\u3063\u305f\u5834\u5408\u3001\u51fa\u529b\u3055\u308c\u308b\u751fSQL\u3092\u89b3\u5bdf\u3059\u308b\u3068\u4e00\u76ee\u77ad\u7136\u3060\u304c\u3001\u5c04\u5f71\u306b\u4e0d\u8981\u306acase\u6587\u304c\u6df7\u5165\u3059\u308b\u5834\u5408\u304c\u3042\u308b\u3002\n\n\n**slick3\u306b\u304a\u3051\u308bflatMap\u306b\u3064\u3044\u3066\u306e\u7406\u89e3**\n\n[\u5224\u308a\u3084\u3059\u3044blog](http://mashi.exciton.jp/archives/189)\n\n\n**\u751fSQL**\n\n[\u516c\u5f0f: slick-plainsql](https://www.lightbend.com/activator/template/slick-plainsql-3.1#code/src/main/scala/Transfer.scala)\n\n\u30b5\u30fc\u30d3\u30b9\u30c8\u30ec\u30a4\u30c8\u306b\u5b9f\u88c5\u3059\u308b\u5834\u5408\u3092\u524d\u63d0\u306b\u9032\u3081\u307e\u3059\n\n1. \u5229\u7528\u90e8\u5206\u306e\u30b5\u30f3\u30d7\u30eb\u306f\u3053\u3061\u3089\n\n```route.scala\ntrait FuckServiceRoute  extends FuckService  {\n// (_.toJson)\u3067JSON\u5909\u63db\u3059\u308b\u6642\u306e\u30d5\u30a9\u30fc\u30de\u30c3\u30c8\u7528implict\nimplicit val fuckFormat = jsonFormat3(FuckEntity)\ntrait FuckRoute  extends FuckService {\n  val fuckRoute = pathPrefix(\"fuck\") {\n    get {\n      complete(getFuckByRawSQL.map(_.toJson))\n    }\n  }\n}\n```\n\n2. \u5b9f\u884c\u90e8\u5206\u306eTrait\u306f\u3053\u3061\u3089\n\n```transfer.scala\nimport models.FuckTransfer\ntrait FuckService extends FuckTable with FuckTransfer {\n  // \u30de\u30c3\u30d4\u30f3\u30b0\u306fFuckTransfer.FuckEntity\u5074\u3067implict\u3067\u5b9a\u7fa9\u3059\u308b\u306e\u3067\u3053\u3053\u3067\u306f\u4f55\u3082\u6c17\u306b\u3059\u308b\u5fc5\u8981\u306a\u3057\n  def getFuckByRawSQL() : Future[Seq[FuckEntity]]={\n    // \u6587\u5b57\u5217\u88dc\u5b8c\u3092\u3057\u3066\u307f\u308bslick\u5074\u3067SQL\u30a4\u30f3\u30b8\u30a7\u30af\u30b7\u30e7\u30f3\u5bfe\u5fdc\u307e\u3067\u3084\u3063\u3066\u304f\u308c\u307e\u3059\n    val s = \"fuck\"   \n    val a = sql\"SELECT id, $s, created_at FROM fuck\".as[FuckEntity]\n    db.run(a)\n  }\n}\n```\n\n3. \u30c8\u30e9\u30f3\u30b9\u30d5\u30a1\u30fc\u306eTrait\u306f\u3053\u3061\u3089\n\n```model.scala\npackage models\nimport slick.jdbc.GetResult\nimport org.joda.time.DateTime\n// \u7d20\u306eslick\u306b\u306f\u3001jodatime\u306eimplict\u304c\u306a\u3044\u306e\u3067\u8ffd\u52a0\u3001\u3053\u308c\u304c\u306a\u3044\u3068DateTime\u306f\u5229\u7528\u3067\u304d\u306a\u3044\u305c\nimport com.github.tototoshi.slick.MySQLJodaSupport._\ntrait FuckTransfer {\n  case class FuckEntity(userId: Long, fuck: String, createAt: DateTime)\n  //\u3053\u308c\u3060\u3051\u3067\u52dd\u624b\u306b\u30de\u30c3\u30d4\u30f3\u30b0\u3057\u3066\u304f\u308c\u307e\u3059\u304c\u3001\u9806\u756a\u5927\u4e8b \u540d\u524d\u5927\u4e8b\n  implicit val getFuckEntityResult = GetResult(r => FuckEntity(r.<<, r.<<, r.<<))\n}\n```\n\n\n**\u30c8\u30e9\u30f3\u30b6\u30af\u30b7\u30e7\u30f3**\n\n[\u516c\u5f0f\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8](http://slick.typesafe.com/doc/3.0.0/dbio.html#transactions-and-pinned-sessions)\n\n[\u30ed\u30fc\u30eb\u30d0\u30c3\u30af stackoverflow \u52d5\u4f5c\u672a\u78ba\u8a8d](http://stackoverflow.com/questions/34905455/how-can-i-roll-back-an-integration-test-with-slick-3-specs2)\n\n```transactionnally.scala\n  //\u30c8\u30e9\u30f3\u30b6\u30af\u30b7\u30e7\u30f3\u4e2d\u3067\u8907\u6570\u306e\u51e6\u7406\u3092\u4e8b\u9805\u3059\u308b\u5834\u5408\n  def getAcidTest(): Future[Unit]  ={\n    db.run(\n      DBIO.seq(\n        // \u307f\u304b\u3093\u3092\u871c\u67d1\u306b\u5909\u3048\u3066\u5024\u6bb5\u3092\u5909\u66f4\uff08Item\u4e38\u3054\u3068\u66f4\u65b0\uff09\n        items.filter(_.id === 2).update(Item(2, \"\u871c\u67d1\", 250)),\n        // \u871c\u67d1\u3092\u30df\u30ab\u30f3\u306b\u5909\u66f4\uff08name\u3060\u3051\u3092\u66f4\u65b0\uff09\n        items.filter(_.id === 2).map(_.name).update(\"\u30df\u30ab\u30f3\"),\n        // id\u304c2\u3088\u308a\u5927\u304d\u3044\u7269\u306eprice\u3092800\u306b\uff08\u8907\u6570\u30ec\u30b3\u30fc\u30c9\u3092\u307e\u3068\u3081\u3066\u66f4\u65b0\uff09\n        items.filter(_.id > 2).map(_.price).update(800)\n      ).transactionally\n    )\n  }\n  ```\n  \n  db.run\u3067\u5b9f\u884c\u3059\u308baction\u306f\u4e00\u3064\u306a\u306e\u3067\u8907\u6570\u306e\u51e6\u7406\u304c\u5fc5\u8981\u306a\u5834\u5408\u306f**\u30a2\u30af\u30b7\u30e7\u30f3\u5408\u6210**\u3059\u308b\n  \u203b\u25cb!=true\u306a\u3089\u51e6\u7406\u3059\u308b\u306a\u3069\n1. [qiita](http://qiita.com/torao@github/items/bee252b979ddb631885f)\n2. [stackoverflow](http://stackoverflow.com/questions/34905455/how-can-i-roll-back-an-integration-test-with-slick-3-specs2)\n\n**\u3064\u307e\u308a\u8907\u6570\u306e\u51e6\u7406\u3092\u884c\u3046\u5834\u5408\u306f\u5168\u3066\u30a2\u30af\u30b7\u30e7\u30f3\u5408\u6210\u3059\u308b\u5fc5\u8981\u304c\u3042\u308b**\n\u691c\u7d22\u7d50\u679c\u3092\u3082\u3068\u306b\u8a08\u7b97\u51e6\u7406\u3092\u3057\u3001\u751fSQL\u3092\u767a\u884c\u3057\u3066\u7d50\u679c\u3092\u5408\u6210\u3059\u308b\u6642\u3082\u540c\u3058\uff08\u9006\u306b\u9762\u5012\u304f\u3055\u3044\u308f\u3063\uff01\uff09\n[stack overflow](http://stackoverflow.com/questions/31103813/executing-non-database-actions-in-a-transaction-in-slick-3)\n\n\n**\u30a2\u30af\u30b7\u30e7\u30f3\u5408\u6210**\n\n[\u516c\u5f0f\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8](http://krrrr38.github.io/slick-doc-ja/v3.0.out/Plain+SQL%E3%82%AF%E3%82%A8%E3%83%AA.html)\n\n\n**\u6ce8\u610f\u70b9**\n\n1. \u30b8\u30a7\u30cd\u30ea\u30c3\u30af\u7cfb\u306e\u96db\u578b\u306b\u51fa\u6765\u308b\u306e\u306f\u300ccase class\u300d\u3060\u3051\n2. slick\u306emodel\u306f\u30c8\u30ec\u30a4\u30c8\n\n\n[Slick3\u91ce\u90ce\u306e\u5099\u5fd8\u93322\u3078\u3064\u3065\u304f](http://qiita.com/uedashuhei/items/70cae110681294c09295)\n"}