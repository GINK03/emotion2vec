{"context": " More than 1 year has passed since last update.\n\nGLMain\n#include \"glmain.h\"\n\nstruct Cube {\n    double angle = 0.0;\n\n    void rotate()\n    {\n        // Axis: 0, 0, 0\n        glTranslated( 0.5, 0.5, 0.5);// Move Axis\n        glRotated(angle, 0.0, 1.0, 1.0);\n        glTranslated(-0.5,-0.5,-0.5);// Re-move Axis\n        angle += 0.5;\n        if (angle >= 360.0)\n            angle = 0.0;\n    }\n\n    void draw() const\n    {\n        glBegin(GL_QUADS);\n        // Top:\n        glNormal3d( 0.0, 1.0, 0.0);\n        glVertex3d( 0.0, 1.0, 1.0);\n        glVertex3d( 1.0, 1.0, 1.0);\n        glVertex3d( 1.0, 1.0, 0.0);\n        glVertex3d( 0.0, 1.0, 0.0);\n        // Bottom:\n        glNormal3d( 0.0,-1.0, 0.0);\n        glVertex3d( 0.0, 0.0, 1.0);\n        glVertex3d( 0.0, 0.0, 0.0);\n        glVertex3d( 1.0, 0.0, 0.0);\n        glVertex3d( 1.0, 0.0, 1.0);\n        // Back:\n        glNormal3d( 0.0, 0.0,-1.0);\n        glVertex3d( 0.0, 0.0, 0.0);\n        glVertex3d( 0.0, 1.0, 0.0);\n        glVertex3d( 1.0, 1.0, 0.0);\n        glVertex3d( 1.0, 0.0, 0.0);\n        // Front:\n        glNormal3d( 0.0, 0.0, 1.0);\n        glVertex3d( 0.0, 0.0, 1.0);\n        glVertex3d( 1.0, 0.0, 1.0);\n        glVertex3d( 1.0, 1.0, 1.0);\n        glVertex3d( 0.0, 1.0, 1.0);\n        // Right:\n        glNormal3d( 1.0, 0.0, 0.0);\n        glVertex3d( 1.0, 0.0, 1.0);\n        glVertex3d( 1.0, 0.0, 0.0);\n        glVertex3d( 1.0, 1.0, 0.0);\n        glVertex3d( 1.0, 1.0, 1.0);\n        // Left:\n        glNormal3d(-1.0, 0.0, 0.0);\n        glVertex3d( 0.0, 0.0, 1.0);\n        glVertex3d( 0.0, 1.0, 1.0);\n        glVertex3d( 0.0, 1.0, 0.0);\n        glVertex3d( 0.0, 0.0, 0.0);\n\n        glEnd();\n    }\n};\n\nGLMain::GLMain(QWidget *parent)\n    : QGLWidget(parent)\n    , _timer()\n{\n    connect(&_timer, SIGNAL(timeout()), this, SLOT(updateGL()));\n    _timer.start(16.666);\n}\n\nvoid GLMain::initializeGL()\n{\n    glClearColor(0.0f, 0.15f, 0.2f, 1.0f);\n    glEnable(GL_DEPTH_TEST);\n    glEnable(GL_CULL_FACE);\n    glEnable(GL_LIGHTING);\n    glEnable(GL_LIGHT0);\n    glEnable(GL_LIGHT1);\n\n    glCullFace(GL_BACK);\n}\n\nvoid GLMain::paintGL()\n{\n    glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);\n    glLoadIdentity();\n\n    // Viewing and Modeling Transform\n\n    // Viewing\n\n    gluLookAt(0,2,5, 0,0,0, 0,1,0);\n\n    // Lighting\n\n    static float light0pos[] {0.0f, 6.0f, 5.0f, 0.0f};\n    static float light1pos[] {0.0f,-6.0f, 3.0f, 1.0f};\n\n    glLightfv(GL_LIGHT0, GL_POSITION, light0pos);\n    glLightfv(GL_LIGHT1, GL_POSITION, light1pos);\n\n    static float green[] {0.8f, 1.0f, 0.8f, 1.0f};\n    static float red[] {1.0f, 0.6f, 0.6f, 1.0f};\n\n    glLightfv(GL_LIGHT0, GL_DIFFUSE, green);\n    glLightfv(GL_LIGHT0, GL_SPECULAR, green);\n\n    glLightfv(GL_LIGHT1, GL_DIFFUSE, red);\n    glLightfv(GL_LIGHT1, GL_SPECULAR, red);\n\n    // Material\n\n    static float ambientAndDiffuse[] {0.5f, 0.7f, 0.9f, 1.0f};\n    static float specular[] {20.0f, 20.0f, 10.0f, 1.0f};\n    static float shininess[] {40.0f, 10.0f, 10.0f, 1.0f};\n\n    glMaterialfv(GL_FRONT, GL_AMBIENT_AND_DIFFUSE, ambientAndDiffuse);\n    glMaterialfv(GL_FRONT, GL_SHININESS, shininess);\n    glMaterialfv(GL_FRONT, GL_SPECULAR, specular);\n\n    // Modeling\n\n    static Cube cubes[3];\n\n    glTranslated(-0.2,-0.5, 0.0);\n\n    glPushMatrix();\n    glTranslated(0.5, 0.3, 0.0);\n    cubes[0].rotate();\n    cubes[0].draw();\n    glPopMatrix();\n\n    glPushMatrix();\n    glTranslated(-1.8,-2.0,-2.0);\n    cubes[1].rotate();\n    cubes[1].draw();\n    glPopMatrix();\n\n    glPushMatrix();\n    glTranslated(-2.0, 0.5,-5.0);\n    cubes[2].rotate();\n    cubes[2].draw();\n    glPopMatrix();\n}\n\nvoid GLMain::resizeGL(int sw, int sh)\n{\n    auto w = static_cast<double>(sw);\n    auto h = static_cast<double>(sh);\n\n    glViewport(0, 0, w, h);\n\n    glMatrixMode(GL_PROJECTION);\n    glLoadIdentity();\n    gluPerspective(45, w/h, 0.0001, 120.0);\n\n    glMatrixMode(GL_MODELVIEW);\n}\n\n\n\n![sample.gif](https://qiita-image-store.s3.amazonaws.com/0/41479/453e5b5d-26e9-0530-f009-c8956a5e3e73.gif)\n\n```cpp:GLMain\n#include \"glmain.h\"\n\nstruct Cube {\n    double angle = 0.0;\n\n    void rotate()\n    {\n        // Axis: 0, 0, 0\n        glTranslated( 0.5, 0.5, 0.5);// Move Axis\n        glRotated(angle, 0.0, 1.0, 1.0);\n        glTranslated(-0.5,-0.5,-0.5);// Re-move Axis\n        angle += 0.5;\n        if (angle >= 360.0)\n            angle = 0.0;\n    }\n\n    void draw() const\n    {\n        glBegin(GL_QUADS);\n        // Top:\n        glNormal3d( 0.0, 1.0, 0.0);\n        glVertex3d( 0.0, 1.0, 1.0);\n        glVertex3d( 1.0, 1.0, 1.0);\n        glVertex3d( 1.0, 1.0, 0.0);\n        glVertex3d( 0.0, 1.0, 0.0);\n        // Bottom:\n        glNormal3d( 0.0,-1.0, 0.0);\n        glVertex3d( 0.0, 0.0, 1.0);\n        glVertex3d( 0.0, 0.0, 0.0);\n        glVertex3d( 1.0, 0.0, 0.0);\n        glVertex3d( 1.0, 0.0, 1.0);\n        // Back:\n        glNormal3d( 0.0, 0.0,-1.0);\n        glVertex3d( 0.0, 0.0, 0.0);\n        glVertex3d( 0.0, 1.0, 0.0);\n        glVertex3d( 1.0, 1.0, 0.0);\n        glVertex3d( 1.0, 0.0, 0.0);\n        // Front:\n        glNormal3d( 0.0, 0.0, 1.0);\n        glVertex3d( 0.0, 0.0, 1.0);\n        glVertex3d( 1.0, 0.0, 1.0);\n        glVertex3d( 1.0, 1.0, 1.0);\n        glVertex3d( 0.0, 1.0, 1.0);\n        // Right:\n        glNormal3d( 1.0, 0.0, 0.0);\n        glVertex3d( 1.0, 0.0, 1.0);\n        glVertex3d( 1.0, 0.0, 0.0);\n        glVertex3d( 1.0, 1.0, 0.0);\n        glVertex3d( 1.0, 1.0, 1.0);\n        // Left:\n        glNormal3d(-1.0, 0.0, 0.0);\n        glVertex3d( 0.0, 0.0, 1.0);\n        glVertex3d( 0.0, 1.0, 1.0);\n        glVertex3d( 0.0, 1.0, 0.0);\n        glVertex3d( 0.0, 0.0, 0.0);\n\n        glEnd();\n    }\n};\n\nGLMain::GLMain(QWidget *parent)\n    : QGLWidget(parent)\n    , _timer()\n{\n    connect(&_timer, SIGNAL(timeout()), this, SLOT(updateGL()));\n    _timer.start(16.666);\n}\n\nvoid GLMain::initializeGL()\n{\n    glClearColor(0.0f, 0.15f, 0.2f, 1.0f);\n    glEnable(GL_DEPTH_TEST);\n    glEnable(GL_CULL_FACE);\n    glEnable(GL_LIGHTING);\n    glEnable(GL_LIGHT0);\n    glEnable(GL_LIGHT1);\n\n    glCullFace(GL_BACK);\n}\n\nvoid GLMain::paintGL()\n{\n    glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);\n    glLoadIdentity();\n\n    // Viewing and Modeling Transform\n\n    // Viewing\n\n    gluLookAt(0,2,5, 0,0,0, 0,1,0);\n\n    // Lighting\n\n    static float light0pos[] {0.0f, 6.0f, 5.0f, 0.0f};\n    static float light1pos[] {0.0f,-6.0f, 3.0f, 1.0f};\n\n    glLightfv(GL_LIGHT0, GL_POSITION, light0pos);\n    glLightfv(GL_LIGHT1, GL_POSITION, light1pos);\n\n    static float green[] {0.8f, 1.0f, 0.8f, 1.0f};\n    static float red[] {1.0f, 0.6f, 0.6f, 1.0f};\n\n    glLightfv(GL_LIGHT0, GL_DIFFUSE, green);\n    glLightfv(GL_LIGHT0, GL_SPECULAR, green);\n\n    glLightfv(GL_LIGHT1, GL_DIFFUSE, red);\n    glLightfv(GL_LIGHT1, GL_SPECULAR, red);\n\n    // Material\n\n    static float ambientAndDiffuse[] {0.5f, 0.7f, 0.9f, 1.0f};\n    static float specular[] {20.0f, 20.0f, 10.0f, 1.0f};\n    static float shininess[] {40.0f, 10.0f, 10.0f, 1.0f};\n\n    glMaterialfv(GL_FRONT, GL_AMBIENT_AND_DIFFUSE, ambientAndDiffuse);\n    glMaterialfv(GL_FRONT, GL_SHININESS, shininess);\n    glMaterialfv(GL_FRONT, GL_SPECULAR, specular);\n\n    // Modeling\n\n    static Cube cubes[3];\n\n    glTranslated(-0.2,-0.5, 0.0);\n\n    glPushMatrix();\n    glTranslated(0.5, 0.3, 0.0);\n    cubes[0].rotate();\n    cubes[0].draw();\n    glPopMatrix();\n\n    glPushMatrix();\n    glTranslated(-1.8,-2.0,-2.0);\n    cubes[1].rotate();\n    cubes[1].draw();\n    glPopMatrix();\n\n    glPushMatrix();\n    glTranslated(-2.0, 0.5,-5.0);\n    cubes[2].rotate();\n    cubes[2].draw();\n    glPopMatrix();\n}\n\nvoid GLMain::resizeGL(int sw, int sh)\n{\n    auto w = static_cast<double>(sw);\n    auto h = static_cast<double>(sh);\n\n    glViewport(0, 0, w, h);\n\n    glMatrixMode(GL_PROJECTION);\n    glLoadIdentity();\n    gluPerspective(45, w/h, 0.0001, 120.0);\n\n    glMatrixMode(GL_MODELVIEW);\n}\n\n```\n", "tags": ["C++", "QtCreator", "OpenGL"]}