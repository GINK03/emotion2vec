{"context": "Document\u306b\u306f\u306a\u304b\u3063\u305f\u306e\u3067\u3001\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u3092\u8aad\u3093\u3067\u3053\u3046\u3057\u3066\u307f\u307e\u3057\u305f\u3002\n\n\u691c\u8a3c\u7528\u306e\u95a2\u6570\u3092\u4f5c\u308b\n\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u691c\u8a3c\u7528\u306e\u95a2\u6570\u3092\u4f5c\u308a\u307e\u3059\u3002\npackage myvalidator\n\nimport (\n    \"gopkg.in/go-playground/validator.v8\"\n    \"reflect\"\n)\n\nvar MyValidations = map[string]validator.Func {\n    \"custom1\": custom1,\n    \"custom2\": custom2,\n}\n\nfunc Custom1(v *validator.Validate, topStruct reflect.Value, currentStructOrField reflect.Value, field reflect.Value, fieldType reflect.Type, fieldKind reflect.Kind, param string) bool {\n    if fieldKind == reflect.String {\n        str := field.String()\n        // \u691c\u8a3c\u304c\u901a\u308c\u3070true\u3092\u8fd4\u3059\n        return true\n    } else {\n        return false\n    }\n}\n\nfunc Custom2(v *validator.Validate, topStruct reflect.Value, currentStructOrField reflect.Value, field reflect.Value, fieldType reflect.Type, fieldKind reflect.Kind, param string) bool {\n    if fieldKind == reflect.String {\n        str := field.String()\n        // \u691c\u8a3c\u304c\u901a\u308c\u3070true\u3092\u8fd4\u3059\n        return true\n    } else {\n        return false\n    }\n}\n\n\nCustomValidator\u3092\u4f5c\u308b\uff08\u691c\u8a3c\u95a2\u6570\u306e\u767b\u9332\uff09\ngin\u306ebinding/default_validator.go\u3092\u53c2\u8003\u306b\u3057\u3066Validator\u3092\u4f5c\u308b\npackage myvalidator\n\nimport (\n    \"sync\"\n    \"gopkg.in/go-playground/validator.v8\"\n    \"reflect\"\n)\n\ntype MyValidator struct {\n    once     sync.Once\n    validate *validator.Validate\n}\n\nfunc (v *MyValidator) ValidateStruct(obj interface{}) error {\n    if kindOfData(obj) == reflect.Struct {\n        v.lazyinit()\n        if err := v.validate.Struct(obj); err != nil {\n            return error(err)\n        }\n    }\n    return nil\n}\n\nfunc (v *MyValidator) lazyinit() {\n    v.once.Do(func() {\n        config := &validator.Config{TagName: \"binding\"}\n        // \u3053\u3053\u306brequired\u306a\u3069\u5143\u304b\u3089\u3042\u308bValidation\u306f\u542b\u307e\u308c\u3066\u3044\u308b\n        v.validate = validator.New(config)\n        // \u3053\u3053\u3067Validation\u95a2\u6570\u3092\u767b\u9332\n        for key, value := range MyValidations {\n            v.validate.RegisterValidation(key, value)\n        }\n    })\n}\n\nfunc kindOfData(data interface{}) reflect.Kind {\n    value := reflect.ValueOf(data)\n    valueType := value.Kind()\n    if valueType == reflect.Ptr {\n        valueType = value.Elem().Kind()\n    }\n    return valueType\n}\n\n\ngin\u306b\u4f5c\u3063\u305fValidator\u3092\u8a2d\u5b9a\nimport (\n    \"github.com/gin-gonic/gin\"\n)\n\n// gin.Default()\u3092\u547c\u3076\u524d\u306b\u547c\u3093\u3067\u3001gin\u306eValidator\u3092\u521d\u671f\u5316\u3059\u308b\nfunc initGinValidator() {\n    binding.Validator = &myvalidator.MyValidations{}\n}\n\nDocument\u306b\u306f\u306a\u304b\u3063\u305f\u306e\u3067\u3001\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u3092\u8aad\u3093\u3067\u3053\u3046\u3057\u3066\u307f\u307e\u3057\u305f\u3002\n\n# \u691c\u8a3c\u7528\u306e\u95a2\u6570\u3092\u4f5c\u308b\n\n\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u691c\u8a3c\u7528\u306e\u95a2\u6570\u3092\u4f5c\u308a\u307e\u3059\u3002\n\n```\npackage myvalidator\n\nimport (\n\t\"gopkg.in/go-playground/validator.v8\"\n\t\"reflect\"\n)\n\nvar MyValidations = map[string]validator.Func {\n\t\"custom1\": custom1,\n\t\"custom2\": custom2,\n}\n\nfunc Custom1(v *validator.Validate, topStruct reflect.Value, currentStructOrField reflect.Value, field reflect.Value, fieldType reflect.Type, fieldKind reflect.Kind, param string) bool {\n\tif fieldKind == reflect.String {\n\t\tstr := field.String()\n\t\t// \u691c\u8a3c\u304c\u901a\u308c\u3070true\u3092\u8fd4\u3059\n\t\treturn true\n\t} else {\n\t\treturn false\n\t}\n}\n\nfunc Custom2(v *validator.Validate, topStruct reflect.Value, currentStructOrField reflect.Value, field reflect.Value, fieldType reflect.Type, fieldKind reflect.Kind, param string) bool {\n\tif fieldKind == reflect.String {\n\t\tstr := field.String()\n\t\t// \u691c\u8a3c\u304c\u901a\u308c\u3070true\u3092\u8fd4\u3059\n\t\treturn true\n\t} else {\n\t\treturn false\n\t}\n}\n```\n\n# CustomValidator\u3092\u4f5c\u308b\uff08\u691c\u8a3c\u95a2\u6570\u306e\u767b\u9332\uff09\n\ngin\u306ebinding/default_validator.go\u3092\u53c2\u8003\u306b\u3057\u3066Validator\u3092\u4f5c\u308b\n\n```\npackage myvalidator\n\nimport (\n\t\"sync\"\n\t\"gopkg.in/go-playground/validator.v8\"\n\t\"reflect\"\n)\n\ntype MyValidator struct {\n\tonce     sync.Once\n\tvalidate *validator.Validate\n}\n\nfunc (v *MyValidator) ValidateStruct(obj interface{}) error {\n\tif kindOfData(obj) == reflect.Struct {\n\t\tv.lazyinit()\n\t\tif err := v.validate.Struct(obj); err != nil {\n\t\t\treturn error(err)\n\t\t}\n\t}\n\treturn nil\n}\n\nfunc (v *MyValidator) lazyinit() {\n\tv.once.Do(func() {\n\t\tconfig := &validator.Config{TagName: \"binding\"}\n\t\t// \u3053\u3053\u306brequired\u306a\u3069\u5143\u304b\u3089\u3042\u308bValidation\u306f\u542b\u307e\u308c\u3066\u3044\u308b\n\t\tv.validate = validator.New(config)\n\t\t// \u3053\u3053\u3067Validation\u95a2\u6570\u3092\u767b\u9332\n\t\tfor key, value := range MyValidations {\n\t\t\tv.validate.RegisterValidation(key, value)\n\t\t}\n\t})\n}\n\nfunc kindOfData(data interface{}) reflect.Kind {\n\tvalue := reflect.ValueOf(data)\n\tvalueType := value.Kind()\n\tif valueType == reflect.Ptr {\n\t\tvalueType = value.Elem().Kind()\n\t}\n\treturn valueType\n}\n```\n\n# gin\u306b\u4f5c\u3063\u305fValidator\u3092\u8a2d\u5b9a\n\n```\nimport (\n\t\"github.com/gin-gonic/gin\"\n)\n\n// gin.Default()\u3092\u547c\u3076\u524d\u306b\u547c\u3093\u3067\u3001gin\u306eValidator\u3092\u521d\u671f\u5316\u3059\u308b\nfunc initGinValidator() {\n\tbinding.Validator = &myvalidator.MyValidations{}\n}\n```\n", "tags": ["Go", "golang", "gin"]}