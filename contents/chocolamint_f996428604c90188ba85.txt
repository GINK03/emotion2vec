{"context": " More than 1 year has passed since last update.\u3044\u3064\u3082\u8abf\u3079\u308b\u306e\u3067\u307e\u3068\u3081\u3066\u304a\u304f\u3002\uff08\u66f8\u304d\u304b\u3051\u3063\u307d\u3044\u611f\u3058\u3067\u3059\u307f\u307e\u305b\u3093\u3002\u3002\u3002\uff09\n\nObject.ReferenceEquals(Object objA, Object objB) \u30e1\u30bd\u30c3\u30c9\n\n\u305d\u306e\u540d\u306e\u901a\u308a\u53c2\u7167\u306e\u7b49\u4fa1\u3092\u6bd4\u8f03\n\nObject \u578b\u306b\u5bfe\u3059\u308b a == b \u3068\u7b49\u4fa1\n==\u6f14\u7b97\u5b50\u3092\u30aa\u30fc\u30d0\u30fc\u30ed\u30fc\u30c9\u3059\u308b\u3068\u304d\u306b\u304a\u4e16\u8a71\u306b\u306a\u308b\u304b\u3082\uff08\u666e\u901a\u306b a == null \u3092\u547c\u3073\u51fa\u3059\u3068\u7121\u9650\u30eb\u30fc\u30d7\u306b\u306a\u308b\u305f\u3081\uff09\n\n\nObject.Equals(Object objA, Object objB) \u30e1\u30bd\u30c3\u30c9\n\n\u4e21\u65b9\u3001\u3042\u308b\u3044\u306f\u7247\u65b9\u304c null \u3067\u3042\u308c\u3070\u305d\u306e\u5834\u3067 true \u3082\u3057\u304f\u306f false \u3092\u5224\u5b9a\u3057\u3066\u8fd4\u3059\u3002\n\u305d\u3046\u3067\u306a\u3051\u308c\u3070\uff08\u4e21\u65b9\u3068\u3082 null \u3067\u306a\u3051\u308c\u3070\uff09 objA.Equals(objB) \u3092\u547c\u3073\u51fa\u3059\u3002\n\nIEquatable<T> \u306f\u5229\u7528\u3055\u308c\u306a\u3044\u3002\n\nclass Program\n{\n    static void Main(string[] args)\n    {\n        Console.WriteLine(Object.Equals(new Hoge { Fuga = \"abc\" },\n                                        new Hoge { Fuga = \"abc\" }));\n        // -> True\n\n        Console.WriteLine(Object.Equals(new Hoge { Fuga = \"abc\" },\n                                        new Hoge { Fuga = \"xyz\" }));\n        // -> False\n\n        Console.Read();\n    }\n}\n\npublic class Hoge : IEquatable<Hoge>\n{\n    public string Fuga { get; set; }\n\n    public override bool Equals(object obj)\n    {\n        if (Fuga == \"xyz\") throw new NotImplementedException();\n        if (obj == null) return false;\n        if (obj is Hoge)\n        {\n            return ((Hoge)obj).Fuga == Fuga;\n        }\n        return base.Equals(obj);\n    }\n\n    public override int GetHashCode()\n    {\n        return (Fuga != null ? Fuga.GetHashCode() : 0);\n    }\n\n    public bool Equals(Hoge other)\n    {\n        throw new NotImplementedException();\n    }\n}\n\n\nEqualityComparer.Default.Equals(T x, T y) \u30e1\u30bd\u30c3\u30c9\nIEquatable<T> \u304c\u5229\u7528\u3055\u308c\u308b\u70b9\u304c\u7570\u306a\u308b\u3002\n\n\nnull \u30c1\u30a7\u30c3\u30af\u306b\u3064\u3044\u3066\u306f Object.Equals(Object, Object) \u3068\u540c\u69d8\u3002\n\nx \u304c IEquatable<T> \u3092\u5b9f\u88c5\u3059\u308b\u5834\u5408\u306f IEquatable<T>.Equals(T other) \u304c\u547c\u3073\u51fa\u3055\u308c\u308b\u3002\n\u3055\u3082\u306a\u3051\u308c\u3070 Object.Equals(Object obj) \u304c\u547c\u3073\u51fa\u3055\u308c\u308b\u3002\n\n\nEqualityComparer \u30af\u30e9\u30b9\n\n\nIEqualityComparer<T> \u3092\u5b9f\u88c5\u3059\u308b\u305f\u3081\u306e\u57fa\u5e95\u30af\u30e9\u30b9\u3002\n\nEquals(T x, T y) \u304a\u3088\u3073 GetHashCode(T obj) \u3092\u30aa\u30fc\u30d0\u30fc\u30e9\u30a4\u30c9\u3057\u3066\u4f7f\u7528\u3059\u308b\u3002\n\n\nStringComparer \u30af\u30e9\u30b9\n\n\nIComparer<string>, IEqualityComparer<string> \u306e 2 \u3064\u3092\u5b9f\u88c5\u3002\n\nStringComparison \u5217\u6319\u4f53\u306b\u5bfe\u5fdc\u3057\u305f\u5e8f\u5217\u5224\u5b9a\u3001\u7b49\u4fa1\u6027\u5224\u5b9a\u3092\u63d0\u4f9b\u3059\u308b\u3002\n\n\nIStructuralEquatable \u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30fc\u30b9\n^m^\n\u3044\u3064\u3082\u8abf\u3079\u308b\u306e\u3067\u307e\u3068\u3081\u3066\u304a\u304f\u3002\uff08\u66f8\u304d\u304b\u3051\u3063\u307d\u3044\u611f\u3058\u3067\u3059\u307f\u307e\u305b\u3093\u3002\u3002\u3002\uff09\n\n# Object.ReferenceEquals(Object objA, Object objB) \u30e1\u30bd\u30c3\u30c9\n\n* \u305d\u306e\u540d\u306e\u901a\u308a\u53c2\u7167\u306e\u7b49\u4fa1\u3092\u6bd4\u8f03\n* `Object` \u578b\u306b\u5bfe\u3059\u308b `a == b` \u3068\u7b49\u4fa1\n* ==\u6f14\u7b97\u5b50\u3092\u30aa\u30fc\u30d0\u30fc\u30ed\u30fc\u30c9\u3059\u308b\u3068\u304d\u306b\u304a\u4e16\u8a71\u306b\u306a\u308b\u304b\u3082\uff08\u666e\u901a\u306b `a == null` \u3092\u547c\u3073\u51fa\u3059\u3068\u7121\u9650\u30eb\u30fc\u30d7\u306b\u306a\u308b\u305f\u3081\uff09\n\n# Object.Equals(Object objA, Object objB) \u30e1\u30bd\u30c3\u30c9\n\n* \u4e21\u65b9\u3001\u3042\u308b\u3044\u306f\u7247\u65b9\u304c `null` \u3067\u3042\u308c\u3070\u305d\u306e\u5834\u3067 `true` \u3082\u3057\u304f\u306f `false` \u3092\u5224\u5b9a\u3057\u3066\u8fd4\u3059\u3002\n* \u305d\u3046\u3067\u306a\u3051\u308c\u3070\uff08\u4e21\u65b9\u3068\u3082 `null` \u3067\u306a\u3051\u308c\u3070\uff09 `objA.Equals(objB)` \u3092\u547c\u3073\u51fa\u3059\u3002\n* `IEquatable<T>` \u306f\u5229\u7528\u3055\u308c\u306a\u3044\u3002\n\n```csharp\nclass Program\n{\n    static void Main(string[] args)\n    {\n        Console.WriteLine(Object.Equals(new Hoge { Fuga = \"abc\" },\n                                        new Hoge { Fuga = \"abc\" }));\n        // -> True\n\n        Console.WriteLine(Object.Equals(new Hoge { Fuga = \"abc\" },\n                                        new Hoge { Fuga = \"xyz\" }));\n        // -> False\n\n        Console.Read();\n    }\n}\n\npublic class Hoge : IEquatable<Hoge>\n{\n    public string Fuga { get; set; }\n\n    public override bool Equals(object obj)\n    {\n        if (Fuga == \"xyz\") throw new NotImplementedException();\n        if (obj == null) return false;\n        if (obj is Hoge)\n        {\n            return ((Hoge)obj).Fuga == Fuga;\n        }\n        return base.Equals(obj);\n    }\n\n    public override int GetHashCode()\n    {\n        return (Fuga != null ? Fuga.GetHashCode() : 0);\n    }\n\n    public bool Equals(Hoge other)\n    {\n        throw new NotImplementedException();\n    }\n}\n```\n\n# EqualityComparer<T>.Default.Equals(T x, T y) \u30e1\u30bd\u30c3\u30c9\n\n`IEquatable<T>` \u304c\u5229\u7528\u3055\u308c\u308b\u70b9\u304c\u7570\u306a\u308b\u3002\n\n* `null` \u30c1\u30a7\u30c3\u30af\u306b\u3064\u3044\u3066\u306f `Object.Equals(Object, Object)` \u3068\u540c\u69d8\u3002\n* `x` \u304c `IEquatable<T>` \u3092\u5b9f\u88c5\u3059\u308b\u5834\u5408\u306f `IEquatable<T>.Equals(T other)` \u304c\u547c\u3073\u51fa\u3055\u308c\u308b\u3002\n* \u3055\u3082\u306a\u3051\u308c\u3070 `Object.Equals(Object obj)` \u304c\u547c\u3073\u51fa\u3055\u308c\u308b\u3002\n\n# EqualityComparer<T> \u30af\u30e9\u30b9\n\n* `IEqualityComparer<T>` \u3092\u5b9f\u88c5\u3059\u308b\u305f\u3081\u306e\u57fa\u5e95\u30af\u30e9\u30b9\u3002\n* `Equals(T x, T y)` \u304a\u3088\u3073 `GetHashCode(T obj)` \u3092\u30aa\u30fc\u30d0\u30fc\u30e9\u30a4\u30c9\u3057\u3066\u4f7f\u7528\u3059\u308b\u3002\n\n# StringComparer \u30af\u30e9\u30b9\n\n* `IComparer<string>`, `IEqualityComparer<string>` \u306e 2 \u3064\u3092\u5b9f\u88c5\u3002\n* `StringComparison` \u5217\u6319\u4f53\u306b\u5bfe\u5fdc\u3057\u305f\u5e8f\u5217\u5224\u5b9a\u3001\u7b49\u4fa1\u6027\u5224\u5b9a\u3092\u63d0\u4f9b\u3059\u308b\u3002\n\n# IStructuralEquatable<T> \u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30fc\u30b9\n\n^m^\n", "tags": ["C#", ".NET"]}