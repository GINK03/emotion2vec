{"context": "\n\n\u306f\u3058\u3081\u306b\n\u30b5\u30a4\u30d0\u30fc\u30fb\u30d0\u30ba\u306e@Hakota\u3067\u3059\u3002\n\u5f0a\u793e\u306e@yuinchirn\u304c\u57f7\u7b46\u3057\u305f\n\u81ea\u793e\u30b5\u30fc\u30d3\u30b9\u63a1\u7528\u3078\u3002\u672c\u6c17\u3067\u4f5c\u308bReact+Redux\u306e\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u69cb\u6210\u3067\u7d39\u4ecb\u3057\u305f\n\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u306b\u30e1\u30f3\u30d0\u30fc\u3068\u3057\u3066\u53c2\u52a0\u3057\u3066\u3044\u307e\u3059\u3002\n\u5df7\u3067\u306fiOS\u30a2\u30d7\u30ea\u3092RxSwift\u3067\u5b9f\u88c5\u3059\u308b\u306e\u304c\u6d41\u884c\u308a\u306e\u3088\u3046\u3067\u3059\u304c\n\u30b9\u30de\u30db\u30a2\u30d7\u30ea\u306b\u3082Redux\u306e\u601d\u60f3\u3092\u6301\u3061\u8fbc\u3080\u3053\u3068\u3067\u3088\u308a\u30b9\u30b1\u30fc\u30e9\u30d6\u30eb\u3067\u30c6\u30b9\u30bf\u30d6\u30eb\u306a\u5b9f\u88c5\u304c\u53ef\u80fd\u3067\u3059\u3002\n\n\u305d\u3082\u305d\u3082Redux\u3063\u3066\u4f55\uff1f\n\u50d5\u3082React.js\u3001Redux\u3001Javascript\u3001ES6\u304c\u308f\u304b\u3089\u306a\u3044\u72b6\u614b\u3067\u958b\u767a\u306b\u5165\u3063\u305f\u306e\u3067\u82e6\u52b4\u3057\u307e\u3057\u305f\u3002\n\u308f\u304b\u3089\u306a\u3044\u306a\u308a\u306b\u30b9\u30e9\u30a4\u30c9\u306b\u307e\u3068\u3081\u3066\u307f\u305f\u306e\u3067\u3001\u53c2\u8003\u304c\u3066\u3089\u898b\u3066\u3082\u3089\u3048\u308b\u3068\u96f0\u56f2\u6c17\u306f\u63b4\u3093\u3067\u3082\u3089\u3048\u308b\u304b\u3068\u601d\u3044\u307e\u3059\u3002\nRedux\u3092\u30ec\u30b9\u30c8\u30e9\u30f3\u3067\u4f8b\u3048\u308b\u3068\u7406\u89e3\u304c\u6357\u3063\u305f\u4ef6\n\n\u3056\u3063\u304f\u308a\u8aac\u660e\n\nAcitonCreator\n\u9069\u5207\u306aAction\u3092\u751f\u6210\u3059\u308b\u3002\nAciton\n\u30c8\u30ea\u30ac\u30fc\u517cState\u306b\u6301\u305f\u305b\u305f\u3044\u60c5\u5831\u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\nMiddleware\nReducer\u306e\u5b9f\u884c\u524d\u5f8c\u306b\u51e6\u7406\u3092\u8ffd\u52a0\u3059\u308b\u305f\u3081\u306e\u4ed5\u7d44\u307f\u3067\u3059\nReducer\nAction\u306e\u5024\u3092\u3082\u3068\u306b\u3001State\u3092\u66f4\u65b0\u3059\u308b\nStore\n\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u306eState(\u72b6\u614b)\u3092\u7ba1\u7406\n\n\n\u4f5c\u3063\u305f\u3082\u306e\nQiita\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u30a2\u30d7\u30ea\u300eQiitenus\u300f\u3092\u30b5\u30f3\u30d7\u30eb\u3068\u3057\u3066\u4f5c\u308a\u307e\u3057\u305f\u3002\n\u968f\u6642\u66f4\u65b0\u3057\u3066\u304d\u307e\u3059\u3002\n\n\n\u74b0\u5883\n\nXcode8\nSwift 3.0\ncarthage 0.17.2\n\n\n\u30e9\u30a4\u30d6\u30e9\u30ea\n\nCartfile.\n\ngithub \"ReSwift/ReSwift\" \"2.1.0\"\ngithub \"onevcat/Kingfisher\" \"3.0.1\"\ngithub \"Hearst-DD/ObjectMapper\" \"2.0.0\"\ngithub \"Alamofire/Alamofire\" \"4.0.0\"\ngithub \"ReactKit/SwiftTask\" \"swift/3.0\"\ngithub \"SVProgressHUD/SVProgressHUD\"\n\n\n\n\u5b9f\u88c5\nQiita\u306e\u65b0\u7740\u6295\u7a3f\u3092\u53d6\u5f97\u3059\u308b\u5b9f\u88c5\u90e8\u5206\u3092\u3064\u304b\u3063\u3066\u89e3\u8aac\u3092\u3057\u305f\u3044\u3068\u601d\u3044\u307e\u3059\u3002\n\n\u5168\u4f53\u69cb\u6210\n\u251c\u2500\u2500 project\n\u2502   \u251c\u2500\u2500 View\n\u2502   \u251c\u2500\u2500 API (\u5404\u7a2eRequest\u3092\u8ffd\u52a0\u3057\u3066\u3044\u304d\u307e\u3059)\n\u2502   \u251c\u2500\u2500 Controller\n\u2502   \u251c\u2500\u2500 Extentions\n\u2502   \u251c\u2500\u2500 Model (ObjectMapper\u3092\u4f7f\u3063\u305f\u30e2\u30c7\u30eb\u7fa4)\n\u2502   \u251c\u2500\u2500 ReSwift\n\u2502   \u2502   \u251c\u2500\u2500 Actions (\u5404\u7a2eAction\u3092\u8ffd\u52a0\u3057\u3066\u3044\u304d\u307e\u3059)\n\u2502   \u2502   \u251c\u2500\u2500 Middleware (\u5404\u7a2eMiddleware)\n\u2502   \u2502   \u251c\u2500\u2500 Reducers (\u5404\u7a2eReducer)\n\u2502   \u2502   \u251c\u2500\u2500 States (\u5404\u7a2eState)\n\u2502   \u2502   \u251c\u2500\u2500 ConfigureStore.swift\n\u2502   \u2502   \u2514\u2500\u2500 RootReducers.swift\n\u2502   \u2502\n\u2502   \u2514\u2500\u2500 AppDelegate.swift\n\n\nModel\n\u65b0\u7740\u6295\u7a3f\u306e\u30d5\u30a3\u30fc\u30c9\u3092\u30c6\u30fc\u30d6\u30eb\u306b\u8868\u793a\u3059\u308b\u305f\u3081\u8a18\u4e8b\u7528\u306e\u30e2\u30c7\u30eb\u3092\u4f5c\u308a\u307e\u3059\u3002\n\nArticle.swift\n\nimport ObjectMapper\n\nstruct Article {\n    var id: String?\n    var isPrivate: Bool?\n    var title: String?\n    var body: String?\n    var renderedBody: String?\n    var url: String?\n    var tags: [Tag]?\n    var user: User?\n    var coEditing: Bool?\n    var createdAt: String?\n    var updatedAt: String?\n}\n\nextension Article: Equatable {}\n\nfunc ==(lhs: Article, rhs: Article) -> Bool {\n    return lhs.id == rhs.id\n}\n\nextension Article: Mappable {\n\n    init?(map: Map) {\n        //        mapping(map)\n    }\n\n    mutating func mapping(map: Map) {\n        id           <- map[\"id\"]\n        isPrivate    <- map[\"private\"]\n        title        <- map[\"title\"]\n        body         <- map[\"body\"]\n        renderedBody <- map[\"rendered_body\"]\n        url          <- map[\"url\"]\n        tags         <- map[\"tags\"]\n        user         <- map[\"user\"]\n        coEditing    <- map[\"coediting\"]\n        createdAt    <- map[\"created_at\"]\n        updatedAt    <- map[\"updated_at\"]\n    }\n}\n\n\n\nTag.swift\n\nimport ObjectMapper\n\nstruct Tag {\n\n    var name: String?\n    var versions: [String]?\n\n}\n\nextension Tag: Mappable {\n\n    init?(map: Map) {}\n\n    mutating func mapping(map: Map) {\n        name <- map[\"name\"]\n        versions <- map[\"versions\"]\n    }\n\n}\n\n\n\nUser.swift\n\n\nimport ObjectMapper\n\nstruct User {\n    var permanentId: String?\n    var id: String?\n    var name: String?\n    var location: String?\n    var profileImageUrl: String?\n    var twitterScreenName: String?\n    var facebookId: String?\n    var linkedInId: String?\n    var githubAccountName: String?\n    var itemsCount: Int?\n    var followeesCount: Int?\n    var followersCount: Int?\n    var organization: String?\n    var websiteUrl: String?\n    var description: String?\n}\n\nextension User: Mappable {\n\n    init?(map: Map) {}\n\n    mutating func mapping(map: Map) {\n        permanentId       <- map[\"permanent_id\"]\n        id                <- map[\"id\"]\n        name              <- map[\"name\"]\n        location          <- map[\"location\"]\n        profileImageUrl   <- map[\"profile_image_url\"]\n        twitterScreenName <- map[\"twitter_screen_name\"]\n        facebookId        <- map[\"facebook_id\"]\n        linkedInId        <- map[\"linkedin_id\"]\n        githubAccountName <- map[\"github_login_name\"]\n        itemsCount        <- map[\"items_count\"]\n        followeesCount    <- map[\"followees_count\"]\n        followersCount    <- map[\"followers_count\"]\n        organization      <- map[\"organization\"]\n        websiteUrl        <- map[\"website_url\"]\n        description       <- map[\"description\"]\n    }\n\n}\n\nextension User {\n    func fetchUserName() -> String {\n        return name ?? \"\"\n    }\n}\n\n\n\nAPI\nAPIKit\u306e\u3088\u3046\u306aAPI\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u3092\u5b9f\u88c5\u3057\u3066\u3044\u304d\u307e\u3059\u3002\n\u3053\u3061\u3089\u3092\u53c2\u8003\u3055\u305b\u3066\u3044\u305f\u3060\u304d\u307e\u3057\u305f\u3002\nAlamofire + SwiftTask + ObjectMapper\u3067APIKit\u306e\u3088\u3046\u306aAPIClient\u3092\u5b9f\u88c5\u3059\u308b\n\nQiitaRequest.swift\n\nimport UIKit\nimport ObjectMapper\nimport Alamofire\n\nprotocol QiitaRequestType {\n\n    associatedtype Response\n    var baseURL : URL { get }\n    var method : HTTPMethod { get }\n    var path : String { get }\n    var parameters : [String : AnyObject] { get }\n    var HTTPHeaderFields : [String : String] { get }\n\n    func responseFromObject(_ object: AnyObject, URLResponse: HTTPURLResponse) -> Response?\n    func errorFromObject(_ object: AnyObject, URLResponse: HTTPURLResponse) -> Error?\n\n}\n\nextension QiitaRequestType {\n\n    var baseURL: URL {\n        return URL(string: \"https://qiita.com/api/v2\")!\n    }\n\n    var HTTPHeaderFields : [String : String] {\n        return [:]\n    }\n\n    func errorFromObject(_ object: AnyObject, URLResponse: HTTPURLResponse) -> Error? {\n        return nil\n    }\n\n}\n\nextension QiitaRequestType where Response: Mappable {\n    func responseFromObject(_ object: AnyObject, URLResponse: HTTPURLResponse) -> Response? {\n        guard let model = Mapper<Response>().map(JSONObject: object) else {\n            return nil\n        }\n        return model\n    }\n}\n\n\n\nFeedRequest.swift\nimport UIKit\nimport ObjectMapper\nimport Alamofire\n\nclass FeedRequest {\n    /**\n     *  \u65b0\u7740\u30d5\u30a3\u30fc\u30c9\u3092\u53d6\u5f97\u3059\u308b\n     */\n    struct GetNewFeed: QiitaRequestType {\n\n        var page : Int = 1\n        var perPage : Int = 10\n\n        typealias ResponseComponent = Article\n        typealias Response = [ResponseComponent]\n\n        var path: String {\n            return \"/items\"\n        }\n\n        var method: HTTPMethod {\n            return .get\n        }\n\n        var parameters : [String : AnyObject] {\n            return [\n                \"page\"      : self.page as AnyObject,\n                \"per_page\"  : self.perPage as AnyObject\n            ]\n        }\n\n        var HTTPHeaderFields : [String : String] {\n            return [:]\n        }\n\n        func responseFromObject(_ object: AnyObject, URLResponse: HTTPURLResponse) -> Response? {\n\n            guard let model = Mapper<ResponseComponent>().mapArray(JSONObject: object) else {\n                return nil\n            }\n\n            return model\n        }\n    }\n}\n\n\n\u524d\u8ff0\u306e\u30b9\u30e9\u30a4\u30c9\u306b\u767b\u5834\u3057\u305fActionCreator\u3092API\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u3068\u3057\u3066\u4f5c\u6210\u3057\u307e\u3059\u3002\n\nActionCreator.swift\n\nimport Alamofire\nimport SwiftTask\nimport ObjectMapper\n\npublic enum APIError : Error {\n    case connectionError(NSError)\n    case invalidResponse(AnyObject?)\n    case parseError(AnyObject?)\n}\n\nstruct ActionCreator {\n\n    static func callApi<T : QiitaRequestType>(_ request : T) -> Task<Float, T.Response, APIError> {\n\n        let endPoint: String            = request.baseURL.absoluteString+request.path\n        let params: [String : Any]      = request.parameters\n        let headers: [String:String]    = request.HTTPHeaderFields\n        let method: HTTPMethod          = request.method\n        let encoding: ParameterEncoding = (method == .get) ? URLEncoding.default : JSONEncoding.default\n\n        let task = Task<Float, T.Response, APIError> { progress, fulfill, reject, configure in\n            let req = Alamofire.request(endPoint, method: method, parameters: params, encoding: encoding, headers: headers)\n                .validate { request, response, data in\n                    return .success\n                }\n                .responseJSON { response in\n                    debugPrint(response)\n                    if let error = response.result.error {\n                        reject(.connectionError(error as NSError))\n                        return\n                    }\n                    if let object = response.result.value, let URLResponse = response.response {\n                        guard let model: T.Response = request.responseFromObject(object as AnyObject, URLResponse: URLResponse) else {\n                            reject(.parseError(object as AnyObject?))\n                            return\n                        }\n                        fulfill(model)\n                    }else {\n                        reject(.invalidResponse(nil))\n                    }\n            }\n\n            print(req)\n            print(req.debugDescription)\n        }\n        return task\n    }\n}\n\n\n\nAction\n\u3044\u3088\u3044\u3088ReSwift\u306e\u5b9f\u88c5\u90e8\u5206\u306b\u5165\u308a\u307e\u3059\u3002\nFeed\u7528\u306eAction\u3092\u4f5c\u308a\u307e\u3059\u3002\nAPI\u304b\u3089\u306eResponse\u3092\u5fc5\u8981\u3068\u3059\u308bAction\u306b\u306f\u3001response\u3092\u6301\u305f\u305b\u3066\u3042\u3052\u307e\u3059\u3002\nAction\u3060\u3051struct\u306e\u540d\u524d\u3092\u5927\u6587\u5b57\u30b9\u30cd\u30fc\u30af\u30b1\u30fc\u30b9\u3067\u8a18\u8ff0\u3057\u3066\u307e\u3059\u3002\n\nFeedAction.swift\n\nimport ReSwift\n\n/**\n *  Feed\u3092\u53d6\u5f97\n */\nstruct GET_NEW_FEED: Action {\n    var response: Array<Article>?\n}\n\n\n\nMiddleware\n\u4eca\u56de\u4f7f\u7528\u3057\u305f\u611f\u3058\u3060\u3068\u3001\u7279\u306b\u5fc5\u8981\u6027\u3092\u611f\u3058\u306a\u304b\u3063\u305fMiddleware\u3082\u3068\u308a\u3042\u3048\u305a\u5b9f\u88c5\u3057\u307e\u3057\u305f\u3002\nRequest\u306e\u7d50\u679c\u3092\u5143\u306b\u66f4\u306b\u7570\u306a\u3063\u305fRequest\u3092\u51fa\u3057\u305f\u3044\u5834\u5408\u306b\u3001\u3053\u3061\u3089\u306b\u6b21\u306eRequest\u3092\u66f8\u3044\u3066\u304a\u304f\u3068\u30cd\u30b9\u30c8\u304c\u6df1\u304f\u306a\u308b\u3053\u3068\u304c\u306a\u304f\u4fbf\u5229\u3067\u3059\u3002\n\nFeedMiddleware.swift\n\nimport ReSwift\n\nlet FeedMiddleware: Middleware = { dispatch, getState in\n    return { next in\n        return { action in\n            switch action {\n            case is GET_NEW_FEED:\n                print(\"MMMMMMMMMMMMMM\")\n                print(\"GET_NEW_FEED\")\n                print(\"MMMMMMMMMMMMMM\")\n                break\n            default:\n                break\n            }\n            return next(action)\n        }\n    }\n}\n\n\n\nState\nFeed\u95a2\u9023\u306e\u72b6\u614b\u3092\u7ba1\u7406\u3059\u308bState\u3092\u4f5c\u308a\u307e\u3059\u3002\n\u30da\u30fc\u30b8\u30e3\u30fc\u7528\u306bpageNumber\u3092\u3082\u305f\u305b\u305f\u308a\nrefresh\u7528\u306b\u30d5\u30e9\u30b0\u3092\u3082\u305f\u305b\u305f\u308a\n\u8a18\u4e8b\u306e\u914d\u5217\u3092\u3082\u305f\u305b\u305f\u308a\u2026\u3002\nimport ReSwift\n\nstruct FeedState: StateType {\n    var pageNumber: Int = 1\n    var articleList: [Article]?\n    var isRefresh: Bool = false\n}\n\nAppState\u3068\u3044\u3046\u540d\u524d\u3067\u30a2\u30d7\u30ea\u306eState\u3092\u3064\u304f\u308a\u307e\u3059\u3002\nAppState\u5185\u306b\u5404\u7a2eState\u3092\u8ffd\u52a0\u3057\u3001AppState\u3092\u89b3\u6e2c\u3092\u3059\u308b\u3053\u3068\u3067\n\u5404\u7a2eState\u3092\u53d6\u5f97\u3067\u304d\u308b\u3088\u3046\u306b\u3057\u307e\u3059\u3002\n\nAppState.swift\nimport ReSwift\n\nstruct AppState: StateType {\n    var feedState = FeedState()\n}\n\n\n\nReducer\nReducer\u3067\u5148\u7a0b\u306eState\u306b\u3082\u305f\u305b\u305f\u3001articleList\u306b\u5bfe\u3057\u3066\nGET_NEW_FEED\u304c\u6301\u3063\u3066\u3044\u308bResponse\u3092\u6e21\u3057\u307e\u3059\u3002\n\nFeedReducer.swift\nimport ReSwift\n\nstruct FeedReducer: Reducer {\n\n    typealias ReducerStateType = AppState\n\n    public func handleAction(action: Action, state: AppState?) -> AppState {\n        var state = state ?? AppState()\n\n        switch action {\n        case let act as GET_NEW_FEED :\n            print(\"RRRRRRRRRRRRRR\")\n            print(\"GET_NEW_FEED\")\n            print(\"RRRRRRRRRRRRRR\")\n            state.feedState.articleList = act.response\n            break\n        default:\n            break\n        }\n        return state\n    }\n}\n\n\n\nConf\n\nRootReducers.swift\n\nimport ReSwift\n\nvar rootReducers = CombinedReducer([\n    FeedReducer()\n    ])\n\n\nappStore\u306b\u5bfe\u3057\u3066\u3001\u4eca\u307e\u3067\u8a2d\u5b9a\u3057\u3066\u304d\u305f\u5185\u5bb9\u3092\u6e21\u3057\u3066\u3042\u3052\u307e\u3059\u3002\n\u203brootReducers\u306bReducer\u3092\u8ffd\u52a0\u3057\u5fd8\u308c\u308b\u3068\u3001\u52d5\u4f5c\u306f\u3059\u308b\u3082\u306e\u306eMiddleware\u3084Reducer\u306b\u5165\u3063\u3066\u3053\u305a\u3001State\u306e\u5024\u304c\u5909\u308f\u3089\u306a\u3044\u306e\u3067\u6ce8\u610f\u3067\u3059\u3002\n\nConfigureStore.swift\n\nimport ReSwift\n\nvar appStore = Store(\n    reducer:rootReducers,\n    state: AppState(),\n    middleware: [\n        FeedMiddleware\n    ])\n\n\n\nController\nController\u3067State\u3092\u89b3\u6e2c\u3057\u3001State\u304c\u6301\u3063\u3066\u3044\u308b\u5024\u3092\u5229\u7528\u3057\u3066\u5b9f\u88c5\u3057\u3066\u3044\u304d\u307e\u3059\u3002\n\nFeedViewController.swift\n\nimport UIKit\nimport ReSwift\nimport Kingfisher\n\nclass FeedViewController: UIViewController, StoreSubscriber {\n\n\u3000\u3000// \u6ce8\u610f\u3000AppState\u3092\u9078\u629e\u3059\u308b\u3053\u3068\n    typealias StoreSubscriberStateType = AppState\n\n    @IBOutlet weak var feedTable: UITableView!\n\n    var feedList: [Article]?\n\n    override func viewDidLoad() {\n\n        super.viewDidLoad()\n        feedTable.delegate = self\n        feedTable.dataSource = self\n        loadContents()\n    }\n\n    override func viewWillAppear(_ animated: Bool) {\n        // appStore\u306e\u89b3\u6e2c\u958b\u59cb\n        appStore.subscribe(self)\n    }\n\n    override func viewWillDisappear(_ animated: Bool) {\n        // appStore\u306e\u89b3\u6e2c\u3092\u505c\u6b62\n        appStore.unsubscribe(self)\n    }\n\n    /**\n     react\u306e\u30e9\u30a4\u30d5\u30b5\u30a4\u30af\u30eb\u306b\u3042\u308bcomponentWillReceiveProps\u306e\u3088\u3046\u306a\u3082\u306e\n\u3000\u3000\u3000Action\u304c\u767a\u884c\u3055\u308c\u3066\u3001state\u304c\u66f4\u65b0\u3055\u308c\u308b\u3068\u547c\u3070\u308c\u308b\n     - parameter state: \u66f4\u65b0\u3055\u308c\u305fstate\n     */\n    func newState(state: AppState) {\n         if state.feedState.articleList != nil {\n             feedList = state.feedState.articleList\n             feedTable.reloadData()\n         }\n    }\n\n    override func didReceiveMemoryWarning() {\n        super.didReceiveMemoryWarning()\n    }\n\n    func loadContents() {\n        // ActionCreator\u3067Request\u3092\u6307\u5b9a\u3057\u3001\u7d50\u679c\u3092\u5143\u306bAction\u767a\u884c\n        ActionCreator.callApi(FeedRequest.GetNewFeed(page: 1, perPage: 10))\n            .success{ result in\n                // \u65b0\u7740\u306eFeed\u60c5\u5831\u306eAction\u3092\u767a\u884c\n                appStore.dispatch(GET_NEW_FEED(response: result))\n            }.failure{ error in\n                print(\"error:\", error)\n        }\n    }\n}\n\n\n\u540c\u30d5\u30a1\u30a4\u30eb\u5185\u3067\u3001Extension\u3067\u5206\u3051\u3066Table\u3092\u7ba1\u7406\u3057\u307e\u3059\u3002\nView\u306b\u306fCustomCell\u3068\u3057\u3066\u3001ArticleCell\u3092\u4f5c\u6210\u3057\u307e\u3057\u305f\n\nArticleCell.swift\n\nimport UIKit\n\nclass ArticleCell: UITableViewCell {\n\n    @IBOutlet weak var userNameLabel: UILabel!\n    @IBOutlet weak var profileImage: UIImageView!\n    @IBOutlet weak var titleLabel: UILabel!\n    @IBOutlet weak var tagLabel: UILabel!\n\n    override func awakeFromNib() {\n        super.awakeFromNib()\n    }\n\n    override func setSelected(_ selected: Bool, animated: Bool) {\n        super.setSelected(selected, animated: animated)\n    }\n\n}\n\n\n\nFeedViewController.swift\n\nextension FeedViewController: UITableViewDelegate, UITableViewDataSource {\n\n    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {\n        return feedList != nil ? feedList!.count : 0\n    }\n\n    func tableView(_ tableView: UITableView, heightForRowAt indexPath: IndexPath) -> CGFloat {\n        return 160\n    }\n\n    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {\n        let cell: ArticleCell = tableView.dequeueReusableCell(withIdentifier: \"ArticleCell\", for: indexPath) as! ArticleCell\n\n        // feedList\u304c\u5024\u3092\u6301\u3063\u3066\u308b\u5834\u5408\n        if feedList != nil {\n            let url = URL(string: feedList![(indexPath as NSIndexPath).row].user!.profileImageUrl!)\n            cell.profileImage.kf_setImage(with: url)\n            cell.userNameLabel.text = feedList![(indexPath as NSIndexPath).row].user!.id\n            cell.titleLabel.text = feedList![(indexPath as NSIndexPath).row].title\n\n            var tagValues: String! = \"\"\n            for tag in feedList![(indexPath as NSIndexPath).row].tags! {\n                tagValues.append(tag.name!)\n                tagValues.append(\",\")\n            }\n            cell.tagLabel.text = tagValues\n        }\n        return cell\n    }\n\n    func tableView(_ tableView: UITableView, heightForHeaderInSection section: Int) -> CGFloat {\n        return 0\n    }\n\n    func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {\n        let vc = UIStoryboard(name: \"Main\", bundle: nil).instantiateViewController(withIdentifier: \"WebViewC\") as! WebViewC\n        vc.urlStr = feedList![(indexPath as NSIndexPath).row].url\n        self.navigationController?.pushViewController(vc, animated: true)\n    }\n}\n\n\n\u4ee5\u4e0a\u3067\u3001\u30d5\u30a3\u30fc\u30c9\u3092\u53d6\u5f97\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3057\u305f\u3002\n\n\n\n\u65b0\u7740\u4e00\u89a7\n\n\n\n\n\n\n\n\n\n\u307e\u3068\u3081\u3068\u5c55\u671b\n\n\u307e\u3068\u3081\n\u4eca\u56de\u306f\u3001ReSwift\u3092\u4f7f\u3063\u305fRedux\u30e9\u30a4\u30af\u306a\u30a2\u30fc\u30ad\u30c6\u30af\u30c1\u30e3\u3092\u5229\u7528\u3057\u305f\u5b9f\u88c5\u3092\u8a66\u307f\u307e\u3057\u305f\u3002\n\u8a18\u8ff0\u91cf\u306f\u5897\u3048\u308b\u3082\u306e\u306eState\u3092\u610f\u8b58\u3057\u3066\u5b9f\u88c5\u3092\u884c\u3046\u3053\u3068\u3067\u3001\u65b0\u3057\u3044\u5b9f\u88c5\u3092\u884c\u304a\u3046\u3068\u3057\u305f\u5834\u5408\u306b\u3001\u65b0\u898fAction\u3092\u4eca\u306e\u624b\u9806\u3067\u8ffd\u52a0\u3057\u3066\u3044\u304f\u3060\u3051\u306a\u306e\u3067\u65b0\u3057\u304f\u53c2\u5165\u3057\u305f\u30e1\u30f3\u30d0\u30fc\u306a\u3069\u306b\u3082\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u306e\u30eb\u30fc\u30eb\u8aac\u660e\u304c\u884c\u3044\u3084\u3059\u3044\u3068\u601d\u3044\u307e\u3059\u3002\n\u307e\u305f\u3001Web\u5074\u3082API\u3068\u30d5\u30ed\u30f3\u30c8\u3092\u5207\u308a\u96e2\u3057\u3066\u958b\u767a\u3057\u3066\u3044\u308b\u306e\u3067\n\u30b9\u30de\u30db\u30a2\u30d7\u30ea\u3092\u4f5c\u308b\u969b\u306b\u3001API\u3092\u5225\u7acb\u3066\u3059\u308b\u3053\u3068\u306a\u304f\u518d\u5229\u7528\u3067\u304d\u308b\u70b9\u3082\u9b45\u529b\u3060\u3068\u601d\u3044\u307e\u3059\u3002\n\n\u5c55\u671b\n\u6b21\u56de\u306f\u3001Swift\u306b\u304a\u3051\u308bReact\u30e9\u30a4\u30af\u306a\u5b9f\u88c5\u3067\u3042\u308balexdrone/Render\u3092\u7528\u3044\u3066\nJSX\u306e\u3088\u3046\u306bView\u306e\u64cd\u4f5c\u3092\u307e\u3068\u3081\u3066\u8a18\u8ff0\u3057\u305f\u3044\u3068\u601d\u3063\u3066\u3044\u307e\u3059\u3002\n\n\u304a\u308f\u308a\u306b\n\u30b5\u30a4\u30d0\u30fc\u30fb\u30d0\u30ba\u3067\u306f\u4e00\u7dd2\u306b\u30b5\u30fc\u30d3\u30b9\u3092\u5275\u308c\u308b\u30a8\u30f3\u30b8\u30cb\u30a2\u3092\u52df\u96c6\u3057\u3066\u3044\u307e\u3059 :)\n# \u306f\u3058\u3081\u306b\n\n\u30b5\u30a4\u30d0\u30fc\u30fb\u30d0\u30ba\u306e@Hakota\u3067\u3059\u3002\n\n\u5f0a\u793e\u306e@yuinchirn\u304c\u57f7\u7b46\u3057\u305f\n[\u81ea\u793e\u30b5\u30fc\u30d3\u30b9\u63a1\u7528\u3078\u3002\u672c\u6c17\u3067\u4f5c\u308bReact+Redux\u306e\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u69cb\u6210][1]\u3067\u7d39\u4ecb\u3057\u305f\n\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u306b\u30e1\u30f3\u30d0\u30fc\u3068\u3057\u3066\u53c2\u52a0\u3057\u3066\u3044\u307e\u3059\u3002\n\n\u5df7\u3067\u306fiOS\u30a2\u30d7\u30ea\u3092RxSwift\u3067\u5b9f\u88c5\u3059\u308b\u306e\u304c\u6d41\u884c\u308a\u306e\u3088\u3046\u3067\u3059\u304c\n\u30b9\u30de\u30db\u30a2\u30d7\u30ea\u306b\u3082Redux\u306e\u601d\u60f3\u3092\u6301\u3061\u8fbc\u3080\u3053\u3068\u3067\u3088\u308a\u30b9\u30b1\u30fc\u30e9\u30d6\u30eb\u3067\u30c6\u30b9\u30bf\u30d6\u30eb\u306a\u5b9f\u88c5\u304c\u53ef\u80fd\u3067\u3059\u3002\n\n## \u305d\u3082\u305d\u3082Redux\u3063\u3066\u4f55\uff1f\n\n\u50d5\u3082React.js\u3001Redux\u3001Javascript\u3001ES6\u304c\u308f\u304b\u3089\u306a\u3044\u72b6\u614b\u3067\u958b\u767a\u306b\u5165\u3063\u305f\u306e\u3067\u82e6\u52b4\u3057\u307e\u3057\u305f\u3002\n\u308f\u304b\u3089\u306a\u3044\u306a\u308a\u306b\u30b9\u30e9\u30a4\u30c9\u306b\u307e\u3068\u3081\u3066\u307f\u305f\u306e\u3067\u3001\u53c2\u8003\u304c\u3066\u3089\u898b\u3066\u3082\u3089\u3048\u308b\u3068\u96f0\u56f2\u6c17\u306f\u63b4\u3093\u3067\u3082\u3089\u3048\u308b\u304b\u3068\u601d\u3044\u307e\u3059\u3002\n\n[Redux\u3092\u30ec\u30b9\u30c8\u30e9\u30f3\u3067\u4f8b\u3048\u308b\u3068\u7406\u89e3\u304c\u6357\u3063\u305f\u4ef6][2]\n\n## \u3056\u3063\u304f\u308a\u8aac\u660e\n- **AcitonCreator**\n\u9069\u5207\u306aAction\u3092\u751f\u6210\u3059\u308b\u3002\n\n- **Aciton**\n\u30c8\u30ea\u30ac\u30fc\u517cState\u306b\u6301\u305f\u305b\u305f\u3044\u60c5\u5831\u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\n\n- **Middleware**\nReducer\u306e\u5b9f\u884c\u524d\u5f8c\u306b\u51e6\u7406\u3092\u8ffd\u52a0\u3059\u308b\u305f\u3081\u306e\u4ed5\u7d44\u307f\u3067\u3059\n\n- **Reducer**\nAction\u306e\u5024\u3092\u3082\u3068\u306b\u3001State\u3092\u66f4\u65b0\u3059\u308b\n\n- **Store**\n\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u306eState(\u72b6\u614b)\u3092\u7ba1\u7406\n\n# \u4f5c\u3063\u305f\u3082\u306e\n\nQiita\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u30a2\u30d7\u30ea**\u300e[Qiitenus][7]\u300f**\u3092\u30b5\u30f3\u30d7\u30eb\u3068\u3057\u3066\u4f5c\u308a\u307e\u3057\u305f\u3002\n\u968f\u6642\u66f4\u65b0\u3057\u3066\u304d\u307e\u3059\u3002\n\n![Icon-App-60x60@2x.png](https://qiita-image-store.s3.amazonaws.com/0/60014/33df9c23-5280-6752-a1e8-e805463d8aee.png)\n\n\n## \u74b0\u5883\n\n- Xcode8\n- Swift 3.0\n- carthage 0.17.2\n\n## \u30e9\u30a4\u30d6\u30e9\u30ea\n\n\n```Cartfile.\n\ngithub \"ReSwift/ReSwift\" \"2.1.0\"\ngithub \"onevcat/Kingfisher\" \"3.0.1\"\ngithub \"Hearst-DD/ObjectMapper\" \"2.0.0\"\ngithub \"Alamofire/Alamofire\" \"4.0.0\"\ngithub \"ReactKit/SwiftTask\" \"swift/3.0\"\ngithub \"SVProgressHUD/SVProgressHUD\"\n```\n\n# \u5b9f\u88c5\n\nQiita\u306e\u65b0\u7740\u6295\u7a3f\u3092\u53d6\u5f97\u3059\u308b\u5b9f\u88c5\u90e8\u5206\u3092\u3064\u304b\u3063\u3066\u89e3\u8aac\u3092\u3057\u305f\u3044\u3068\u601d\u3044\u307e\u3059\u3002\n\n## \u5168\u4f53\u69cb\u6210\n\n```\n\u251c\u2500\u2500 project\n\u2502   \u251c\u2500\u2500 View\n\u2502   \u251c\u2500\u2500 API (\u5404\u7a2eRequest\u3092\u8ffd\u52a0\u3057\u3066\u3044\u304d\u307e\u3059)\n\u2502   \u251c\u2500\u2500 Controller\n\u2502   \u251c\u2500\u2500 Extentions\n\u2502   \u251c\u2500\u2500 Model (ObjectMapper\u3092\u4f7f\u3063\u305f\u30e2\u30c7\u30eb\u7fa4)\n\u2502   \u251c\u2500\u2500 ReSwift\n\u2502   \u2502   \u251c\u2500\u2500 Actions (\u5404\u7a2eAction\u3092\u8ffd\u52a0\u3057\u3066\u3044\u304d\u307e\u3059)\n\u2502   \u2502   \u251c\u2500\u2500 Middleware (\u5404\u7a2eMiddleware)\n\u2502   \u2502   \u251c\u2500\u2500 Reducers (\u5404\u7a2eReducer)\n\u2502   \u2502   \u251c\u2500\u2500 States (\u5404\u7a2eState)\n\u2502   \u2502   \u251c\u2500\u2500 ConfigureStore.swift\n\u2502   \u2502   \u2514\u2500\u2500 RootReducers.swift\n\u2502   \u2502\n\u2502   \u2514\u2500\u2500 AppDelegate.swift\n```\n\n## Model\n\n\u65b0\u7740\u6295\u7a3f\u306e\u30d5\u30a3\u30fc\u30c9\u3092\u30c6\u30fc\u30d6\u30eb\u306b\u8868\u793a\u3059\u308b\u305f\u3081\u8a18\u4e8b\u7528\u306e\u30e2\u30c7\u30eb\u3092\u4f5c\u308a\u307e\u3059\u3002\n\n```Article.swift\n\nimport ObjectMapper\n\nstruct Article {\n    var id: String?\n    var isPrivate: Bool?\n    var title: String?\n    var body: String?\n    var renderedBody: String?\n    var url: String?\n    var tags: [Tag]?\n    var user: User?\n    var coEditing: Bool?\n    var createdAt: String?\n    var updatedAt: String?\n}\n\nextension Article: Equatable {}\n\nfunc ==(lhs: Article, rhs: Article) -> Bool {\n    return lhs.id == rhs.id\n}\n\nextension Article: Mappable {\n    \n    init?(map: Map) {\n        //        mapping(map)\n    }\n    \n    mutating func mapping(map: Map) {\n        id           <- map[\"id\"]\n        isPrivate    <- map[\"private\"]\n        title        <- map[\"title\"]\n        body         <- map[\"body\"]\n        renderedBody <- map[\"rendered_body\"]\n        url          <- map[\"url\"]\n        tags         <- map[\"tags\"]\n        user         <- map[\"user\"]\n        coEditing    <- map[\"coediting\"]\n        createdAt    <- map[\"created_at\"]\n        updatedAt    <- map[\"updated_at\"]\n    }\n}\n```\n\n```Tag.swift\n\nimport ObjectMapper\n\nstruct Tag {\n\n    var name: String?\n    var versions: [String]?\n\n}\n\nextension Tag: Mappable {\n\n    init?(map: Map) {}\n\n    mutating func mapping(map: Map) {\n        name <- map[\"name\"]\n        versions <- map[\"versions\"]\n    }\n    \n}\n```\n\n```User.swift\n\n\nimport ObjectMapper\n\nstruct User {\n    var permanentId: String?\n    var id: String?\n    var name: String?\n    var location: String?\n    var profileImageUrl: String?\n    var twitterScreenName: String?\n    var facebookId: String?\n    var linkedInId: String?\n    var githubAccountName: String?\n    var itemsCount: Int?\n    var followeesCount: Int?\n    var followersCount: Int?\n    var organization: String?\n    var websiteUrl: String?\n    var description: String?\n}\n\nextension User: Mappable {\n\n    init?(map: Map) {}\n\n    mutating func mapping(map: Map) {\n        permanentId       <- map[\"permanent_id\"]\n        id                <- map[\"id\"]\n        name              <- map[\"name\"]\n        location          <- map[\"location\"]\n        profileImageUrl   <- map[\"profile_image_url\"]\n        twitterScreenName <- map[\"twitter_screen_name\"]\n        facebookId        <- map[\"facebook_id\"]\n        linkedInId        <- map[\"linkedin_id\"]\n        githubAccountName <- map[\"github_login_name\"]\n        itemsCount        <- map[\"items_count\"]\n        followeesCount    <- map[\"followees_count\"]\n        followersCount    <- map[\"followers_count\"]\n        organization      <- map[\"organization\"]\n        websiteUrl        <- map[\"website_url\"]\n        description       <- map[\"description\"]\n    }\n\n}\n\nextension User {\n    func fetchUserName() -> String {\n        return name ?? \"\"\n    }\n}\n```\n\n## API\n\nAPIKit\u306e\u3088\u3046\u306aAPI\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u3092\u5b9f\u88c5\u3057\u3066\u3044\u304d\u307e\u3059\u3002\n\u3053\u3061\u3089\u3092\u53c2\u8003\u3055\u305b\u3066\u3044\u305f\u3060\u304d\u307e\u3057\u305f\u3002\n[Alamofire + SwiftTask + ObjectMapper\u3067APIKit\u306e\u3088\u3046\u306aAPIClient\u3092\u5b9f\u88c5\u3059\u308b][6]\n\n```QiitaRequest.swift\n\nimport UIKit\nimport ObjectMapper\nimport Alamofire\n\nprotocol QiitaRequestType {\n\n    associatedtype Response\n    var baseURL : URL { get }\n    var method : HTTPMethod { get }\n    var path : String { get }\n    var parameters : [String : AnyObject] { get }\n    var HTTPHeaderFields : [String : String] { get }\n\n    func responseFromObject(_ object: AnyObject, URLResponse: HTTPURLResponse) -> Response?\n    func errorFromObject(_ object: AnyObject, URLResponse: HTTPURLResponse) -> Error?\n\n}\n\nextension QiitaRequestType {\n\n    var baseURL: URL {\n        return URL(string: \"https://qiita.com/api/v2\")!\n    }\n\n    var HTTPHeaderFields : [String : String] {\n        return [:]\n    }\n\n    func errorFromObject(_ object: AnyObject, URLResponse: HTTPURLResponse) -> Error? {\n        return nil\n    }\n    \n}\n\nextension QiitaRequestType where Response: Mappable {\n    func responseFromObject(_ object: AnyObject, URLResponse: HTTPURLResponse) -> Response? {\n        guard let model = Mapper<Response>().map(JSONObject: object) else {\n            return nil\n        }\n        return model\n    }\n}\n```\n\n```FeedRequest.swift\nimport UIKit\nimport ObjectMapper\nimport Alamofire\n\nclass FeedRequest {\n    /**\n     *  \u65b0\u7740\u30d5\u30a3\u30fc\u30c9\u3092\u53d6\u5f97\u3059\u308b\n     */\n    struct GetNewFeed: QiitaRequestType {\n        \n        var page : Int = 1\n        var perPage : Int = 10\n\n        typealias ResponseComponent = Article\n        typealias Response = [ResponseComponent]\n\n        var path: String {\n            return \"/items\"\n        }\n\n        var method: HTTPMethod {\n            return .get\n        }\n\n        var parameters : [String : AnyObject] {\n            return [\n                \"page\"      : self.page as AnyObject,\n                \"per_page\"  : self.perPage as AnyObject\n            ]\n        }\n\n        var HTTPHeaderFields : [String : String] {\n            return [:]\n        }\n\n        func responseFromObject(_ object: AnyObject, URLResponse: HTTPURLResponse) -> Response? {\n            \n            guard let model = Mapper<ResponseComponent>().mapArray(JSONObject: object) else {\n                return nil\n            }\n            \n            return model\n        }\n    }\n}\n```\n\n\u524d\u8ff0\u306e\u30b9\u30e9\u30a4\u30c9\u306b\u767b\u5834\u3057\u305fActionCreator\u3092API\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u3068\u3057\u3066\u4f5c\u6210\u3057\u307e\u3059\u3002\n\n```ActionCreator.swift\n\nimport Alamofire\nimport SwiftTask\nimport ObjectMapper\n\npublic enum APIError : Error {\n    case connectionError(NSError)\n    case invalidResponse(AnyObject?)\n    case parseError(AnyObject?)\n}\n\nstruct ActionCreator {\n    \n    static func callApi<T : QiitaRequestType>(_ request : T) -> Task<Float, T.Response, APIError> {\n        \n        let endPoint: String            = request.baseURL.absoluteString+request.path\n        let params: [String : Any]      = request.parameters\n        let headers: [String:String]    = request.HTTPHeaderFields\n        let method: HTTPMethod          = request.method\n        let encoding: ParameterEncoding = (method == .get) ? URLEncoding.default : JSONEncoding.default\n        \n        let task = Task<Float, T.Response, APIError> { progress, fulfill, reject, configure in\n            let req = Alamofire.request(endPoint, method: method, parameters: params, encoding: encoding, headers: headers)\n                .validate { request, response, data in\n                    return .success\n                }\n                .responseJSON { response in\n                    debugPrint(response)\n                    if let error = response.result.error {\n                        reject(.connectionError(error as NSError))\n                        return\n                    }\n                    if let object = response.result.value, let URLResponse = response.response {\n                        guard let model: T.Response = request.responseFromObject(object as AnyObject, URLResponse: URLResponse) else {\n                            reject(.parseError(object as AnyObject?))\n                            return\n                        }\n                        fulfill(model)\n                    }else {\n                        reject(.invalidResponse(nil))\n                    }\n            }\n            \n            print(req)\n            print(req.debugDescription)\n        }\n        return task\n    }\n}\n```\n## Action\n\n\u3044\u3088\u3044\u3088ReSwift\u306e\u5b9f\u88c5\u90e8\u5206\u306b\u5165\u308a\u307e\u3059\u3002\nFeed\u7528\u306eAction\u3092\u4f5c\u308a\u307e\u3059\u3002\nAPI\u304b\u3089\u306eResponse\u3092\u5fc5\u8981\u3068\u3059\u308bAction\u306b\u306f\u3001response\u3092\u6301\u305f\u305b\u3066\u3042\u3052\u307e\u3059\u3002\nAction\u3060\u3051struct\u306e\u540d\u524d\u3092\u5927\u6587\u5b57\u30b9\u30cd\u30fc\u30af\u30b1\u30fc\u30b9\u3067\u8a18\u8ff0\u3057\u3066\u307e\u3059\u3002\n\n```FeedAction.swift\n\nimport ReSwift\n\n/**\n *  Feed\u3092\u53d6\u5f97\n */\nstruct GET_NEW_FEED: Action {\n    var response: Array<Article>?\n}\n```\n\n## Middleware\n\n\u4eca\u56de\u4f7f\u7528\u3057\u305f\u611f\u3058\u3060\u3068\u3001\u7279\u306b\u5fc5\u8981\u6027\u3092\u611f\u3058\u306a\u304b\u3063\u305fMiddleware\u3082\u3068\u308a\u3042\u3048\u305a\u5b9f\u88c5\u3057\u307e\u3057\u305f\u3002\nRequest\u306e\u7d50\u679c\u3092\u5143\u306b\u66f4\u306b\u7570\u306a\u3063\u305fRequest\u3092\u51fa\u3057\u305f\u3044\u5834\u5408\u306b\u3001\u3053\u3061\u3089\u306b\u6b21\u306eRequest\u3092\u66f8\u3044\u3066\u304a\u304f\u3068\u30cd\u30b9\u30c8\u304c\u6df1\u304f\u306a\u308b\u3053\u3068\u304c\u306a\u304f\u4fbf\u5229\u3067\u3059\u3002\n\n```FeedMiddleware.swift\n\nimport ReSwift\n\nlet FeedMiddleware: Middleware = { dispatch, getState in\n    return { next in\n        return { action in\n            switch action {\n            case is GET_NEW_FEED:\n                print(\"MMMMMMMMMMMMMM\")\n                print(\"GET_NEW_FEED\")\n                print(\"MMMMMMMMMMMMMM\")\n                break\n            default:\n                break\n            }\n            return next(action)\n        }\n    }\n}\n```\n\n## State\n\nFeed\u95a2\u9023\u306e\u72b6\u614b\u3092\u7ba1\u7406\u3059\u308bState\u3092\u4f5c\u308a\u307e\u3059\u3002\n\u30da\u30fc\u30b8\u30e3\u30fc\u7528\u306bpageNumber\u3092\u3082\u305f\u305b\u305f\u308a\nrefresh\u7528\u306b\u30d5\u30e9\u30b0\u3092\u3082\u305f\u305b\u305f\u308a\n\u8a18\u4e8b\u306e\u914d\u5217\u3092\u3082\u305f\u305b\u305f\u308a\u2026\u3002\n\n```\nimport ReSwift\n\nstruct FeedState: StateType {\n    var pageNumber: Int = 1\n    var articleList: [Article]?\n    var isRefresh: Bool = false\n}\n```\n\nAppState\u3068\u3044\u3046\u540d\u524d\u3067\u30a2\u30d7\u30ea\u306eState\u3092\u3064\u304f\u308a\u307e\u3059\u3002\nAppState\u5185\u306b\u5404\u7a2eState\u3092\u8ffd\u52a0\u3057\u3001AppState\u3092\u89b3\u6e2c\u3092\u3059\u308b\u3053\u3068\u3067\n\u5404\u7a2eState\u3092\u53d6\u5f97\u3067\u304d\u308b\u3088\u3046\u306b\u3057\u307e\u3059\u3002\n\n```AppState.swift\nimport ReSwift\n\nstruct AppState: StateType {\n    var feedState = FeedState()\n}\n```\n\n\n## Reducer\n\nReducer\u3067\u5148\u7a0b\u306eState\u306b\u3082\u305f\u305b\u305f\u3001articleList\u306b\u5bfe\u3057\u3066\nGET_NEW_FEED\u304c\u6301\u3063\u3066\u3044\u308bResponse\u3092\u6e21\u3057\u307e\u3059\u3002\n\n```FeedReducer.swift\nimport ReSwift\n\nstruct FeedReducer: Reducer {\n    \n    typealias ReducerStateType = AppState\n    \n    public func handleAction(action: Action, state: AppState?) -> AppState {\n        var state = state ?? AppState()\n\n        switch action {\n        case let act as GET_NEW_FEED :\n            print(\"RRRRRRRRRRRRRR\")\n            print(\"GET_NEW_FEED\")\n            print(\"RRRRRRRRRRRRRR\")\n            state.feedState.articleList = act.response\n            break\n        default:\n            break\n        }\n        return state\n    }\n}\n```\n\n## Conf\n\n```RootReducers.swift\n\nimport ReSwift\n\nvar rootReducers = CombinedReducer([\n    FeedReducer()\n    ])\n```\n\nappStore\u306b\u5bfe\u3057\u3066\u3001\u4eca\u307e\u3067\u8a2d\u5b9a\u3057\u3066\u304d\u305f\u5185\u5bb9\u3092\u6e21\u3057\u3066\u3042\u3052\u307e\u3059\u3002\n**\u203brootReducers\u306bReducer\u3092\u8ffd\u52a0\u3057\u5fd8\u308c\u308b\u3068\u3001\u52d5\u4f5c\u306f\u3059\u308b\u3082\u306e\u306eMiddleware\u3084Reducer\u306b\u5165\u3063\u3066\u3053\u305a\u3001State\u306e\u5024\u304c\u5909\u308f\u3089\u306a\u3044\u306e\u3067\u6ce8\u610f\u3067\u3059\u3002**\n\n```ConfigureStore.swift\n\nimport ReSwift\n\nvar appStore = Store(\n    reducer:rootReducers,\n    state: AppState(),\n    middleware: [\n        FeedMiddleware\n    ])\n```\n\n\n## Controller\n\nController\u3067State\u3092\u89b3\u6e2c\u3057\u3001State\u304c\u6301\u3063\u3066\u3044\u308b\u5024\u3092\u5229\u7528\u3057\u3066\u5b9f\u88c5\u3057\u3066\u3044\u304d\u307e\u3059\u3002\n\n```FeedViewController.swift\n\nimport UIKit\nimport ReSwift\nimport Kingfisher\n\nclass FeedViewController: UIViewController, StoreSubscriber {\n\n\u3000\u3000// \u6ce8\u610f\u3000AppState\u3092\u9078\u629e\u3059\u308b\u3053\u3068\n    typealias StoreSubscriberStateType = AppState\n\n    @IBOutlet weak var feedTable: UITableView!\n\n    var feedList: [Article]?\n\n    override func viewDidLoad() {\n\n        super.viewDidLoad()\n        feedTable.delegate = self\n        feedTable.dataSource = self\n        loadContents()\n    }\n\n    override func viewWillAppear(_ animated: Bool) {\n        // appStore\u306e\u89b3\u6e2c\u958b\u59cb\n        appStore.subscribe(self)\n    }\n\n    override func viewWillDisappear(_ animated: Bool) {\n        // appStore\u306e\u89b3\u6e2c\u3092\u505c\u6b62\n        appStore.unsubscribe(self)\n    }\n\n    /**\n     react\u306e\u30e9\u30a4\u30d5\u30b5\u30a4\u30af\u30eb\u306b\u3042\u308bcomponentWillReceiveProps\u306e\u3088\u3046\u306a\u3082\u306e\n\u3000\u3000\u3000Action\u304c\u767a\u884c\u3055\u308c\u3066\u3001state\u304c\u66f4\u65b0\u3055\u308c\u308b\u3068\u547c\u3070\u308c\u308b\n     - parameter state: \u66f4\u65b0\u3055\u308c\u305fstate\n     */\n    func newState(state: AppState) {\n         if state.feedState.articleList != nil {\n             feedList = state.feedState.articleList\n             feedTable.reloadData()\n         }\n    }\n\n    override func didReceiveMemoryWarning() {\n        super.didReceiveMemoryWarning()\n    }\n\n    func loadContents() {\n        // ActionCreator\u3067Request\u3092\u6307\u5b9a\u3057\u3001\u7d50\u679c\u3092\u5143\u306bAction\u767a\u884c\n        ActionCreator.callApi(FeedRequest.GetNewFeed(page: 1, perPage: 10))\n            .success{ result in\n                // \u65b0\u7740\u306eFeed\u60c5\u5831\u306eAction\u3092\u767a\u884c\n                appStore.dispatch(GET_NEW_FEED(response: result))\n            }.failure{ error in\n                print(\"error:\", error)\n        }\n    }\n}\n```\n\n\u540c\u30d5\u30a1\u30a4\u30eb\u5185\u3067\u3001Extension\u3067\u5206\u3051\u3066Table\u3092\u7ba1\u7406\u3057\u307e\u3059\u3002\nView\u306b\u306fCustomCell\u3068\u3057\u3066\u3001ArticleCell\u3092\u4f5c\u6210\u3057\u307e\u3057\u305f\n\n```ArticleCell.swift\n\nimport UIKit\n\nclass ArticleCell: UITableViewCell {\n    \n    @IBOutlet weak var userNameLabel: UILabel!\n    @IBOutlet weak var profileImage: UIImageView!\n    @IBOutlet weak var titleLabel: UILabel!\n    @IBOutlet weak var tagLabel: UILabel!\n    \n    override func awakeFromNib() {\n        super.awakeFromNib()\n    }\n    \n    override func setSelected(_ selected: Bool, animated: Bool) {\n        super.setSelected(selected, animated: animated)\n    }\n\n}\n```\n\n```FeedViewController.swift\n\nextension FeedViewController: UITableViewDelegate, UITableViewDataSource {\n\n    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {\n        return feedList != nil ? feedList!.count : 0\n    }\n\n    func tableView(_ tableView: UITableView, heightForRowAt indexPath: IndexPath) -> CGFloat {\n        return 160\n    }\n\n    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {\n        let cell: ArticleCell = tableView.dequeueReusableCell(withIdentifier: \"ArticleCell\", for: indexPath) as! ArticleCell\n\n        // feedList\u304c\u5024\u3092\u6301\u3063\u3066\u308b\u5834\u5408\n        if feedList != nil {\n            let url = URL(string: feedList![(indexPath as NSIndexPath).row].user!.profileImageUrl!)\n            cell.profileImage.kf_setImage(with: url)\n            cell.userNameLabel.text = feedList![(indexPath as NSIndexPath).row].user!.id\n            cell.titleLabel.text = feedList![(indexPath as NSIndexPath).row].title\n\n            var tagValues: String! = \"\"\n            for tag in feedList![(indexPath as NSIndexPath).row].tags! {\n                tagValues.append(tag.name!)\n                tagValues.append(\",\")\n            }\n            cell.tagLabel.text = tagValues\n        }\n        return cell\n    }\n\n    func tableView(_ tableView: UITableView, heightForHeaderInSection section: Int) -> CGFloat {\n        return 0\n    }\n\n    func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {\n        let vc = UIStoryboard(name: \"Main\", bundle: nil).instantiateViewController(withIdentifier: \"WebViewC\") as! WebViewC\n        vc.urlStr = feedList![(indexPath as NSIndexPath).row].url\n        self.navigationController?.pushViewController(vc, animated: true)\n    }\n}\n```\n\n\u4ee5\u4e0a\u3067\u3001\u30d5\u30a3\u30fc\u30c9\u3092\u53d6\u5f97\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3057\u305f\u3002\n\n| \u65b0\u7740\u4e00\u89a7 |\n|:-----------:|\n|<img width=\"375\" alt=\"Simulator Screen Shot 2016.09.21 \u5348\u5f8c1.14.21.png\" src=\"https://qiita-image-store.s3.amazonaws.com/0/60014/5da0480e-c864-d0f5-b728-0e0ae3b25a35.png\">|\n\n\n# \u307e\u3068\u3081\u3068\u5c55\u671b\n\n## \u307e\u3068\u3081\n\n\u4eca\u56de\u306f\u3001ReSwift\u3092\u4f7f\u3063\u305fRedux\u30e9\u30a4\u30af\u306a\u30a2\u30fc\u30ad\u30c6\u30af\u30c1\u30e3\u3092\u5229\u7528\u3057\u305f\u5b9f\u88c5\u3092\u8a66\u307f\u307e\u3057\u305f\u3002\n\n\u8a18\u8ff0\u91cf\u306f\u5897\u3048\u308b\u3082\u306e\u306eState\u3092\u610f\u8b58\u3057\u3066\u5b9f\u88c5\u3092\u884c\u3046\u3053\u3068\u3067\u3001\u65b0\u3057\u3044\u5b9f\u88c5\u3092\u884c\u304a\u3046\u3068\u3057\u305f\u5834\u5408\u306b\u3001\u65b0\u898fAction\u3092\u4eca\u306e\u624b\u9806\u3067\u8ffd\u52a0\u3057\u3066\u3044\u304f\u3060\u3051\u306a\u306e\u3067\u65b0\u3057\u304f\u53c2\u5165\u3057\u305f\u30e1\u30f3\u30d0\u30fc\u306a\u3069\u306b\u3082\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u306e\u30eb\u30fc\u30eb\u8aac\u660e\u304c\u884c\u3044\u3084\u3059\u3044\u3068\u601d\u3044\u307e\u3059\u3002\n\n\u307e\u305f\u3001Web\u5074\u3082API\u3068\u30d5\u30ed\u30f3\u30c8\u3092\u5207\u308a\u96e2\u3057\u3066\u958b\u767a\u3057\u3066\u3044\u308b\u306e\u3067\n\u30b9\u30de\u30db\u30a2\u30d7\u30ea\u3092\u4f5c\u308b\u969b\u306b\u3001API\u3092\u5225\u7acb\u3066\u3059\u308b\u3053\u3068\u306a\u304f\u518d\u5229\u7528\u3067\u304d\u308b\u70b9\u3082\u9b45\u529b\u3060\u3068\u601d\u3044\u307e\u3059\u3002\n\n## \u5c55\u671b\n\n\u6b21\u56de\u306f\u3001Swift\u306b\u304a\u3051\u308bReact\u30e9\u30a4\u30af\u306a\u5b9f\u88c5\u3067\u3042\u308b[alexdrone/Render][4]\u3092\u7528\u3044\u3066\nJSX\u306e\u3088\u3046\u306bView\u306e\u64cd\u4f5c\u3092\u307e\u3068\u3081\u3066\u8a18\u8ff0\u3057\u305f\u3044\u3068\u601d\u3063\u3066\u3044\u307e\u3059\u3002\n\n# \u304a\u308f\u308a\u306b\n[\u30b5\u30a4\u30d0\u30fc\u30fb\u30d0\u30ba\u3067\u306f\u4e00\u7dd2\u306b\u30b5\u30fc\u30d3\u30b9\u3092\u5275\u308c\u308b\u30a8\u30f3\u30b8\u30cb\u30a2\u3092\u52df\u96c6\u3057\u3066\u3044\u307e\u3059 :)][5]\n\n[1]:http://qiita.com/yuinchirn/items/286353f5c80cc44f1caf\n[2]:https://speakerdeck.com/hakota/reduxworesutorandeli-erutoli-jie-gabu-tutajian\n[4]:https://github.com/alexdrone/Render\n[5]:https://www.wantedly.com/projects/70360\n[6]:http://qiita.com/peromasamune/items/2467035f2fbc04c7f76a\n[7]:https://itunes.apple.com/jp/app/qiitenus/id1160686503?mt=8\n", "tags": ["redux", "Xcode", "Swift", "RxSwift", "reactjs"]}