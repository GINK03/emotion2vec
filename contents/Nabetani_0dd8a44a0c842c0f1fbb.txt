{"context": " More than 1 year has passed since last update.\u554f\u984c : http://nabetani.sakura.ne.jp/hena/ord8biboma/\n\u89e3\u7b54\u30ea\u30f3\u30af\u96c6 : http://qiita.com/items/709d61dff282cff7a890\n\u5f53\u65e5\u66f8\u3044\u305f\u5b9f\u88c5\u3002\nruby\u7248( http://qiita.com/items/0a9fbd1d33ccfd533dc6 )\u3068\u7570\u306a\u308a\n\n\u7206\u5f3e\u3054\u3068\u306b\u30eb\u30fc\u30d7\n\u65b9\u5411\u3054\u3068\u306b\u95a2\u6570\u547c\u3073\u51fa\u3057\n\u4e00\u6b69\u305a\u3064\u9032\u3081\u308b\n\n\u3068\u3044\u3046\u65b9\u91dd\u3067\u3001\u3042\u307e\u308a\u30d3\u30c3\u30c8\u6f14\u7b97\u3057\u3066\u3044\u306a\u3044\u3002\n\nsolve.c\n// compiled with \"clang -std=c99\"\n\n#include <stdio.h>\n#include <string.h>\n#include <stdlib.h>\n\nint nibble( char const * hextext, int bit_pos )\n{\n    char s[2] = { hextext[ bit_pos / 4 ], 0 };\n    return strtol( s, 0, 16 );    \n}\n\nint mask( int bit_pos )\n{\n    return 8>>(bit_pos%4);\n}\n\nint bit( char const * hextext, int bit_pos )\n{\n    return !!( nibble( hextext, bit_pos ) & mask( bit_pos ) );\n}\n\nint setbit( char * hextext, int bit_pos )\n{\n    int new_value = nibble( hextext, bit_pos ) | mask( bit_pos );\n    hextext[ bit_pos/4 ] = \"0123456789abcdef\"[new_value];\n}\n\nvoid explode( int bom, int dx, int dy, char const * src, char * result )\n{\n    if ( bom<0 || 30<bom || bit( src, bom ) ){\n        return;\n    }\n    setbit( result, bom );\n    int x=bom%6  +dx;\n    int y=bom/6 + dy;\n    if ( 0<=x && x<6 && 0<=y && y<5 ){\n        explode( bom+dx+dy*6, dx, dy, src, result );\n    }\n}\n\nvoid solve( char const * src, char * result  )\n{\n    strcpy( result, \"00000000\" );\n    for( int bom=0 ; bom<30 ; ++bom ){\n        if ( ! bit( src+9, bom ) ){\n            continue;\n        }\n        explode( bom, 0, 1, src, result );\n        explode( bom, 0, -1, src, result );\n        explode( bom, 1, 0, src, result );\n        explode( bom, -1, 0, src, result );\n    }\n}\n\nvoid test( char const * src, char const * expected )\n{\n    char actual[ 9 ] = {0};\n    solve( src, actual );\n    _Bool ok = 0==strcmp( actual, expected );\n    printf( \"%s -> %s ( %s ) : %s\\n\", src, actual, expected, ok ? \"ok\" : \"***NG***\" );\n}\n\nint main()\n{\n/*0*/ test( \"802b1200/01400c20\", \"53c40cfc\" );\n/*29*/ test( \"0c901d38/72602200\", \"f36da280\" );\n}\n\n\n\u3044\u3064\u3082\u3069\u304a\u308a\u3001\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u306e\u5927\u534a\u306f\u7701\u7565\u3002\n\u6574\u6570\u309216\u9032\u6570\u306b\u5909\u63db\u3059\u308b\u3068\u8a00\u3046\u51e6\u7406\u3067\u3001sprintf \u4f7f\u3046\u306e\u3082\u5acc\u3060\u3057\u3001strtol \u306e\u9006\u306e\u51e6\u7406\u306e\u95a2\u6570\u601d\u3044\u51fa\u305b\u306a\u3044\u3057\u3001\u3068\u3044\u3046\u3053\u3068\u3067\u3084\u3084\u4e71\u66b4\u306a\u8a08\u7b97\u306b\u306a\u3063\u3066\u3044\u308b\u3002\n\u3042\u3068\u3002\u95a2\u6570 bit \u3067\u884c\u308f\u308c\u3066\u3044\u308b !! \u3068\u3044\u3046\u6f14\u7b97\u306f2\u56de not \u3092\u884c\u3046\u6f14\u7b97\u3067\u3001\u8fd4\u623b\u5024\u3092 0 \u307e\u305f\u306f 1 \u306b\u5f37\u5236\u3059\u308b\u305f\u3081\u306e\u3082\u306e\u3002\nhttp://blog.livedoor.jp/dankogai/archives/51220619.html\n\u3067 dankogai \u3055\u3093\u3082\u7d39\u4ecb\u3057\u3066\u3044\u308b\u3002\n#include \u304b\u3089\u3000solve \u306e\u6700\u5f8c\u307e\u3067\u3067 52\u884c\u3002\n\n\u554f\u984c : http://nabetani.sakura.ne.jp/hena/ord8biboma/\n\u89e3\u7b54\u30ea\u30f3\u30af\u96c6 : http://qiita.com/items/709d61dff282cff7a890\n\n\u5f53\u65e5\u66f8\u3044\u305f\u5b9f\u88c5\u3002\n\nruby\u7248( http://qiita.com/items/0a9fbd1d33ccfd533dc6 )\u3068\u7570\u306a\u308a\n\n* \u7206\u5f3e\u3054\u3068\u306b\u30eb\u30fc\u30d7\n* \u65b9\u5411\u3054\u3068\u306b\u95a2\u6570\u547c\u3073\u51fa\u3057\n* \u4e00\u6b69\u305a\u3064\u9032\u3081\u308b\n\n\u3068\u3044\u3046\u65b9\u91dd\u3067\u3001\u3042\u307e\u308a\u30d3\u30c3\u30c8\u6f14\u7b97\u3057\u3066\u3044\u306a\u3044\u3002\n\n```c:solve.c\n// compiled with \"clang -std=c99\"\n\n#include <stdio.h>\n#include <string.h>\n#include <stdlib.h>\n\nint nibble( char const * hextext, int bit_pos )\n{\n    char s[2] = { hextext[ bit_pos / 4 ], 0 };\n    return strtol( s, 0, 16 );    \n}\n\nint mask( int bit_pos )\n{\n    return 8>>(bit_pos%4);\n}\n\nint bit( char const * hextext, int bit_pos )\n{\n    return !!( nibble( hextext, bit_pos ) & mask( bit_pos ) );\n}\n\nint setbit( char * hextext, int bit_pos )\n{\n    int new_value = nibble( hextext, bit_pos ) | mask( bit_pos );\n    hextext[ bit_pos/4 ] = \"0123456789abcdef\"[new_value];\n}\n\nvoid explode( int bom, int dx, int dy, char const * src, char * result )\n{\n    if ( bom<0 || 30<bom || bit( src, bom ) ){\n        return;\n    }\n    setbit( result, bom );\n    int x=bom%6  +dx;\n    int y=bom/6 + dy;\n    if ( 0<=x && x<6 && 0<=y && y<5 ){\n        explode( bom+dx+dy*6, dx, dy, src, result );\n    }\n}\n\nvoid solve( char const * src, char * result  )\n{\n    strcpy( result, \"00000000\" );\n    for( int bom=0 ; bom<30 ; ++bom ){\n        if ( ! bit( src+9, bom ) ){\n            continue;\n        }\n        explode( bom, 0, 1, src, result );\n        explode( bom, 0, -1, src, result );\n        explode( bom, 1, 0, src, result );\n        explode( bom, -1, 0, src, result );\n    }\n}\n\nvoid test( char const * src, char const * expected )\n{\n    char actual[ 9 ] = {0};\n    solve( src, actual );\n    _Bool ok = 0==strcmp( actual, expected );\n    printf( \"%s -> %s ( %s ) : %s\\n\", src, actual, expected, ok ? \"ok\" : \"***NG***\" );\n}\n\nint main()\n{\n/*0*/ test( \"802b1200/01400c20\", \"53c40cfc\" );\n/*29*/ test( \"0c901d38/72602200\", \"f36da280\" );\n}\n```\n\n\u3044\u3064\u3082\u3069\u304a\u308a\u3001\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u306e\u5927\u534a\u306f\u7701\u7565\u3002\n\n\u6574\u6570\u309216\u9032\u6570\u306b\u5909\u63db\u3059\u308b\u3068\u8a00\u3046\u51e6\u7406\u3067\u3001sprintf \u4f7f\u3046\u306e\u3082\u5acc\u3060\u3057\u3001strtol \u306e\u9006\u306e\u51e6\u7406\u306e\u95a2\u6570\u601d\u3044\u51fa\u305b\u306a\u3044\u3057\u3001\u3068\u3044\u3046\u3053\u3068\u3067\u3084\u3084\u4e71\u66b4\u306a\u8a08\u7b97\u306b\u306a\u3063\u3066\u3044\u308b\u3002\n\n\u3042\u3068\u3002\u95a2\u6570 bit \u3067\u884c\u308f\u308c\u3066\u3044\u308b !! \u3068\u3044\u3046\u6f14\u7b97\u306f2\u56de not \u3092\u884c\u3046\u6f14\u7b97\u3067\u3001\u8fd4\u623b\u5024\u3092 0 \u307e\u305f\u306f 1 \u306b\u5f37\u5236\u3059\u308b\u305f\u3081\u306e\u3082\u306e\u3002\nhttp://blog.livedoor.jp/dankogai/archives/51220619.html\n\u3067 dankogai \u3055\u3093\u3082\u7d39\u4ecb\u3057\u3066\u3044\u308b\u3002\n\n\n`#include` \u304b\u3089\u3000`solve` \u306e\u6700\u5f8c\u307e\u3067\u3067 52\u884c\u3002", "tags": ["C", "C99", "yhpg", "\u3069\u3046\u66f8\u304f"]}