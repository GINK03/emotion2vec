{"context": " More than 1 year has passed since last update.cocos2d-x\u3067\u30c7\u30fc\u30bf\u3092\u4fdd\u5b58\u3059\u308b\u306b\u306fUserDefault\u304bsqlite3\u3092\u5229\u7528\u3057\u3066\u3044\u305f\u304c\u3001\u6c4e\u7528\u6027\u306e\u3042\u308b\u30e9\u30a4\u30d6\u30e9\u30ea\u304c\u3042\u3063\u305f\u306e\u3067\u305d\u306e\u8abf\u67fb\u30e1\u30e2\u3002\n\nFlatBuffers\nGoogle\u304c\u30aa\u30fc\u30d7\u30f3\u30bd\u30fc\u30b9\u5316\u3057\u305fC++\u30b7\u30ea\u30a2\u30e9\u30a4\u30ba\u30e9\u30a4\u30d6\u30e9\u30ea\u3068\u3057\u30662014/6\u306b\u516c\u958b\u3002\n\u30b2\u30fc\u30e0\u958b\u767a\u8005\u306e\u305f\u3081\u306e\u30e9\u30a4\u30d6\u30e9\u30ea\u3068\u3057\u3066\u9ad8\u3044\u30d1\u30d5\u30a9\u30fc\u30de\u30f3\u30b9\u3092\u767a\u63ee\u3059\u308b\u6a21\u69d8\u3002\nC++\u3060\u3051\u3067\u306a\u304fGo\u3084Java\u3067\u3082\u5229\u7528\u53ef\u80fd\u3002\nC++\u3060\u3068\u30d8\u30c3\u30c0\u306e\u307f\u3067\u5229\u7528\u3067\u304d\u308b\u306e\u3067\u8272\u3005\u306a\u74b0\u5883\u306b\u5bfe\u5fdc\u3067\u304d\u308b\u3002\n\n\u7279\u5fb4\n\n\u30d1\u30fc\u30ba/\u30a2\u30f3\u30d1\u30c3\u30ad\u30f3\u30b0\u306a\u3057\u306b\u30b7\u30ea\u30a2\u30eb\u5316\u3055\u308c\u305f\u30c7\u30fc\u30bf\u306b\u30a2\u30af\u30bb\u30b9\u3067\u304d\u308b\n\u30e1\u30e2\u30ea\u52b9\u7387\u3068\u901f\u5ea6\n\u67d4\u8edf\u6027\n\u30e9\u30a4\u30d6\u30e9\u30ea\u306e\u30b3\u30fc\u30c9\u91cf\u306e\u5c11\u306a\u3055\n\u578b\u5b89\u5168\u6027\n\u5229\u4fbf\u6027\n\u30af\u30ed\u30b9\u30d7\u30e9\u30c3\u30c8\u30d5\u30a9\u30fc\u30e0\n\nRapidJson\u306fJSON\u306e\u30d1\u30fc\u30b5\u3067\u9ad8\u901f\u3067\u3042\u308b\u304cFlatBuffers\u306f\u66f4\u306b\u9ad8\u901f\u306b\u52d5\u4f5c\u3059\u308b\u6a21\u69d8\u3002\n\nURL\n\nAndroid Developers Blog\n\u516c\u5f0f\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\nGitHub\n\n\nC++\u3067FlatBuffers\u3092\u5229\u7528\u3067\u304d\u308b\u3088\u3046\u306b\u3059\u308b\nFlatBuffers\u306f\u4ee5\u4e0b\u306e\u624b\u9806\u3067\u5229\u7528\u3067\u304d\u308b\u3002\n\n\u30b9\u30ad\u30fc\u30de\u30d5\u30a1\u30a4\u30eb\u3092\u4f5c\u6210\u3059\u308b\nflatc\u30b3\u30de\u30f3\u30c9\u3067\u30b9\u30ad\u30fc\u30de\u30d5\u30a1\u30a4\u30eb\u3092\u30b3\u30f3\u30d1\u30a4\u30eb\u3059\u308b\n\u751f\u6210\u3055\u308c\u305f\u30d8\u30c3\u30c0\u3068flatbuffers.h(\u5834\u5408\u306b\u3088\u3063\u3066\u306fflatbuffers\u306eidl_parser.cpp\u306a\u3069\u306ecpp\u3082\u30b3\u30f3\u30d1\u30a4\u30eb\u3057\u3066\u30ea\u30f3\u30af\u3059\u308b)\u3092include\u3059\u308b\nFlatBufferBuilder\u3067\u30d5\u30a1\u30a4\u30eb\u306e\u8aad\u307f\u66f8\u304d\u3092\u884c\u306a\u3046\n\n\n\u30b9\u30ad\u30fc\u30de\u30d5\u30a1\u30a4\u30eb\u3092\u30b3\u30f3\u30d1\u30a4\u30eb\u3067\u304d\u308b\u3088\u3046\u306b\u3059\u308b\n\n\n\u74b0\u5883\n\nMac OS X 10.9.4\nXCode 5.1.1\n\n\nGitHub\u304b\u3089\u30ea\u30dd\u30b8\u30c8\u30ea\u3092clone\u3059\u308b\n\n    git clone https://github.com/google/flatbuffers.git\n\n\nXCode\u3067\u30b3\u30f3\u30d1\u30a4\u30eb\u3059\u308b\n\n    cd flatbuffers\n    open build/Xcode/FlatBuffers.xcodeproj\n\nscheme\u306bflatc\u3092\u9078\u629e\u3057\u3066\u30d3\u30eb\u30c9\u3059\u308b\u3002\nflatbuffers\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u306bflatc\u3068\u3044\u3046\u30d0\u30a4\u30ca\u30ea\u304c\u3067\u304d\u308b\u3002\n\u4ee5\u4e0b\u306fflatc\u306e\u30d8\u30eb\u30d7\nusage: ./flatc [OPTION]... FILE... [-- FILE...]\n  -b      Generate wire format binaries for any data definitions.\n  -t      Generate text output for any data definitions.\n  -c      Generate C++ headers for tables/structs.\n  -g      Generate Go files for tables/structs.\n  -j      Generate Java classes for tables/structs.\n  -o PATH Prefix PATH to all generated files.\n  -S      Strict JSON: add quotes to field names.\nFILEs may depend on declarations in earlier files.\nFILEs after the -- must be binary flatbuffer format files.\nOutput files are named using the base file name of the input,and written to the current directory or the path given by -o.\nexample: ./flatc -c -b schema1.fbs schema2.fbs data.json\n\n\n\u30b9\u30ad\u30fc\u30de\u30d5\u30a1\u30a4\u30eb\u3092\u66f8\u3044\u3066C++\u7528\u30d8\u30c3\u30c0\u3092\u4f5c\u6210\u3059\u308b\n\u4ee5\u4e0b\u3067\u306f\u30b5\u30f3\u30d7\u30eb\u3092\u305d\u306e\u307e\u307e\u5229\u7528\u3059\u308b\u3002\u72ec\u81ea\u30af\u30e9\u30b9\u3067\u3082\u540c\u69d8\u306b\u30b9\u30ad\u30fc\u30de\u3092\u66f8\u3051\u3070\u826f\u3044\u3002\n\u4ee5\u4e0b\u306e\u30b3\u30de\u30f3\u30c9\u3067\u30b9\u30ad\u30fc\u30de\u30d5\u30a1\u30a4\u30eb\u3092\u30b3\u30f3\u30d1\u30a4\u30eb\u3059\u308b\u3002\n  cd samples\n  ../flatc -c monster.fbs\n\nmonster_generated.h\u3068\u3044\u3046\u30d8\u30c3\u30c0\u304c\u751f\u6210\u3055\u308c\u308b\u306e\u3067\u3053\u308c\u3092include\u3057\u3066\u5229\u7528\u3059\u308b\u3002\n\n\u30c7\u30fc\u30bf\u306e\u8aad\u307f\u66f8\u304d\u3092\u3057\u3066\u307f\u308b\nJSON\u306f\u30b5\u30f3\u30d7\u30eb\u306b\u3042\u308b\u306e\u3067\u3001\u30d0\u30a4\u30ca\u30ea\u30c7\u30fc\u30bf\u3092\u5229\u7528\u3057\u3066\u307f\u308b\u3002\nflatbuffers\u95a2\u9023\u30d8\u30c3\u30c0\u306finclude\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u306b\u914d\u7f6e\u3002\nmonster_generated.h\u306fsamples\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u306b\u914d\u7f6e.\nC++\u306e\u30b3\u30f3\u30d1\u30a4\u30eb\u30b3\u30de\u30f3\u30c9\u306f\u3053\u3093\u306a\u611f\u3058\nclang++ -g -Wall -std=c++11 -I include main.cc\n\n\u4ee5\u4e0b\u3001main.cc\u306e\u30b3\u30fc\u30c9\u3002\n\nmain.cc\n#include <iostream>\n\n#include \"samples/monster_generated.h\"\n#include \"flatbuffers/flatbuffers.h\"\n#include \"flatbuffers/util.h\"\n\nint main(int /*argc*/, const char * /*argv*/[]) {\n  using namespace MyGame::Sample;\n\n  {\n    // \u65b0\u898f\u306b\u30c7\u30fc\u30bf\u3092\u4f5c\u6210\n    flatbuffers::FlatBufferBuilder builder;\n    auto vec = Vec3(1, 2, 3);\n    auto name = builder.CreateString(\"Test\");\n    unsigned char inv_data[] = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 };\n    auto inventory = builder.CreateVector(inv_data, 10);\n    auto mloc = CreateMonster(builder, &vec, 100, 50, name, inventory, Color_Blue);\n    builder.Finish(mloc);\n\n    auto monster = GetMonster(builder.GetBufferPointer());\n    printf(\"### \u4f5c\u6210\u3057\u305f\u30c7\u30fc\u30bf: hp=%d, mana=%d, name=%s\\n\",\n           monster->hp(), monster->mana(), monster->name()->c_str());\n\n    // \u30c7\u30fc\u30bf\u30d5\u30a1\u30a4\u30eb\u66f8\u304d\u8fbc\u307f\n    auto ok = flatbuffers::SaveFile(\"samples/monsterdata.bin\",\n                                    reinterpret_cast<const char *>(builder.GetBufferPointer()),\n                                    builder.GetSize(),\n                                    true);\n    if (!ok) {\n      printf(\"couldn't save files!\\n\");\n      return 1;\n    }\n  }\n\n  {\n    // \u30c7\u30fc\u30bf\u30d5\u30a1\u30a4\u30eb\u8aad\u307f\u8fbc\u307f\n    std::string binfile;\n    auto ok = flatbuffers::LoadFile(\"samples/monsterdata.bin\", true, &binfile);\n    if (!ok) {\n      printf(\"couldn't load files!\\n\");\n      return 1;\n    }\n\n    auto monster = GetMonster(binfile.data());\n    printf(\"### \u30ed\u30fc\u30c9\u3057\u305f\u30c7\u30fc\u30bf: hp=%d, mana=%d, name=%s\\n\",\n           monster->hp(), monster->mana(), monster->name()->c_str());\n  }\n\n  return 0;\n\n}\n\n\n\u30b9\u30ad\u30fc\u30de\u306b\u95a2\u3059\u308b\u66f4\u306a\u308b\u60c5\u5831\u306f\u3001flatbuffers/tests\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u306b\u3042\u308bmonster_test.fbs\u3092\u53c2\u7167\n\ncocos2d-x\u3067\u30c7\u30fc\u30bf\u3092\u4fdd\u5b58\u3059\u308b\u306b\u306fUserDefault\u304bsqlite3\u3092\u5229\u7528\u3057\u3066\u3044\u305f\u304c\u3001\u6c4e\u7528\u6027\u306e\u3042\u308b\u30e9\u30a4\u30d6\u30e9\u30ea\u304c\u3042\u3063\u305f\u306e\u3067\u305d\u306e\u8abf\u67fb\u30e1\u30e2\u3002\n\n## FlatBuffers\n\nGoogle\u304c\u30aa\u30fc\u30d7\u30f3\u30bd\u30fc\u30b9\u5316\u3057\u305fC++\u30b7\u30ea\u30a2\u30e9\u30a4\u30ba\u30e9\u30a4\u30d6\u30e9\u30ea\u3068\u3057\u30662014/6\u306b\u516c\u958b\u3002\n\u30b2\u30fc\u30e0\u958b\u767a\u8005\u306e\u305f\u3081\u306e\u30e9\u30a4\u30d6\u30e9\u30ea\u3068\u3057\u3066\u9ad8\u3044\u30d1\u30d5\u30a9\u30fc\u30de\u30f3\u30b9\u3092\u767a\u63ee\u3059\u308b\u6a21\u69d8\u3002\n\nC++\u3060\u3051\u3067\u306a\u304fGo\u3084Java\u3067\u3082\u5229\u7528\u53ef\u80fd\u3002\n\nC++\u3060\u3068\u30d8\u30c3\u30c0\u306e\u307f\u3067\u5229\u7528\u3067\u304d\u308b\u306e\u3067\u8272\u3005\u306a\u74b0\u5883\u306b\u5bfe\u5fdc\u3067\u304d\u308b\u3002\n\n### \u7279\u5fb4\n\n- \u30d1\u30fc\u30ba/\u30a2\u30f3\u30d1\u30c3\u30ad\u30f3\u30b0\u306a\u3057\u306b\u30b7\u30ea\u30a2\u30eb\u5316\u3055\u308c\u305f\u30c7\u30fc\u30bf\u306b\u30a2\u30af\u30bb\u30b9\u3067\u304d\u308b\n- \u30e1\u30e2\u30ea\u52b9\u7387\u3068\u901f\u5ea6\n- \u67d4\u8edf\u6027\n- \u30e9\u30a4\u30d6\u30e9\u30ea\u306e\u30b3\u30fc\u30c9\u91cf\u306e\u5c11\u306a\u3055\n- \u578b\u5b89\u5168\u6027\n- \u5229\u4fbf\u6027\n- \u30af\u30ed\u30b9\u30d7\u30e9\u30c3\u30c8\u30d5\u30a9\u30fc\u30e0\n\nRapidJson\u306fJSON\u306e\u30d1\u30fc\u30b5\u3067\u9ad8\u901f\u3067\u3042\u308b\u304cFlatBuffers\u306f[\u66f4\u306b\u9ad8\u901f](http://google.github.io/flatbuffers/md__benchmarks.html)\u306b\u52d5\u4f5c\u3059\u308b\u6a21\u69d8\u3002\n\n### URL\n- [Android Developers Blog](http://android-developers.blogspot.jp/2014/06/flatbuffers-memory-efficient.html)\n- [\u516c\u5f0f\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8](http://google.github.io/flatbuffers/)\n- [GitHub](https://github.com/google/flatbuffers)\n\n### C++\u3067FlatBuffers\u3092\u5229\u7528\u3067\u304d\u308b\u3088\u3046\u306b\u3059\u308b\n\nFlatBuffers\u306f\u4ee5\u4e0b\u306e\u624b\u9806\u3067\u5229\u7528\u3067\u304d\u308b\u3002\n\n* \u30b9\u30ad\u30fc\u30de\u30d5\u30a1\u30a4\u30eb\u3092\u4f5c\u6210\u3059\u308b\n* flatc\u30b3\u30de\u30f3\u30c9\u3067\u30b9\u30ad\u30fc\u30de\u30d5\u30a1\u30a4\u30eb\u3092\u30b3\u30f3\u30d1\u30a4\u30eb\u3059\u308b\n* \u751f\u6210\u3055\u308c\u305f\u30d8\u30c3\u30c0\u3068flatbuffers.h(\u5834\u5408\u306b\u3088\u3063\u3066\u306fflatbuffers\u306eidl_parser.cpp\u306a\u3069\u306ecpp\u3082\u30b3\u30f3\u30d1\u30a4\u30eb\u3057\u3066\u30ea\u30f3\u30af\u3059\u308b)\u3092include\u3059\u308b\n* FlatBufferBuilder\u3067\u30d5\u30a1\u30a4\u30eb\u306e\u8aad\u307f\u66f8\u304d\u3092\u884c\u306a\u3046\n\n#### \u30b9\u30ad\u30fc\u30de\u30d5\u30a1\u30a4\u30eb\u3092\u30b3\u30f3\u30d1\u30a4\u30eb\u3067\u304d\u308b\u3088\u3046\u306b\u3059\u308b\n\n- \u74b0\u5883\n    - Mac OS X 10.9.4\n    - XCode 5.1.1\n\n* [GitHub](https://github.com/google/flatbuffers)\u304b\u3089\u30ea\u30dd\u30b8\u30c8\u30ea\u3092clone\u3059\u308b\n\n```\n    git clone https://github.com/google/flatbuffers.git\n```\n\n* XCode\u3067\u30b3\u30f3\u30d1\u30a4\u30eb\u3059\u308b\n\n```\n    cd flatbuffers\n    open build/Xcode/FlatBuffers.xcodeproj\n```\n\nscheme\u306bflatc\u3092\u9078\u629e\u3057\u3066\u30d3\u30eb\u30c9\u3059\u308b\u3002\nflatbuffers\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u306bflatc\u3068\u3044\u3046\u30d0\u30a4\u30ca\u30ea\u304c\u3067\u304d\u308b\u3002\n\u4ee5\u4e0b\u306fflatc\u306e\u30d8\u30eb\u30d7\n\n```\nusage: ./flatc [OPTION]... FILE... [-- FILE...]\n  -b      Generate wire format binaries for any data definitions.\n  -t      Generate text output for any data definitions.\n  -c      Generate C++ headers for tables/structs.\n  -g      Generate Go files for tables/structs.\n  -j      Generate Java classes for tables/structs.\n  -o PATH Prefix PATH to all generated files.\n  -S      Strict JSON: add quotes to field names.\nFILEs may depend on declarations in earlier files.\nFILEs after the -- must be binary flatbuffer format files.\nOutput files are named using the base file name of the input,and written to the current directory or the path given by -o.\nexample: ./flatc -c -b schema1.fbs schema2.fbs data.json\n```\n\n#### \u30b9\u30ad\u30fc\u30de\u30d5\u30a1\u30a4\u30eb\u3092\u66f8\u3044\u3066C++\u7528\u30d8\u30c3\u30c0\u3092\u4f5c\u6210\u3059\u308b\n\n\u4ee5\u4e0b\u3067\u306f\u30b5\u30f3\u30d7\u30eb\u3092\u305d\u306e\u307e\u307e\u5229\u7528\u3059\u308b\u3002\u72ec\u81ea\u30af\u30e9\u30b9\u3067\u3082\u540c\u69d8\u306b\u30b9\u30ad\u30fc\u30de\u3092\u66f8\u3051\u3070\u826f\u3044\u3002\n\n\u4ee5\u4e0b\u306e\u30b3\u30de\u30f3\u30c9\u3067\u30b9\u30ad\u30fc\u30de\u30d5\u30a1\u30a4\u30eb\u3092\u30b3\u30f3\u30d1\u30a4\u30eb\u3059\u308b\u3002\n\n```\n  cd samples\n  ../flatc -c monster.fbs\n```\n\nmonster_generated.h\u3068\u3044\u3046\u30d8\u30c3\u30c0\u304c\u751f\u6210\u3055\u308c\u308b\u306e\u3067\u3053\u308c\u3092include\u3057\u3066\u5229\u7528\u3059\u308b\u3002\n\n#### \u30c7\u30fc\u30bf\u306e\u8aad\u307f\u66f8\u304d\u3092\u3057\u3066\u307f\u308b\n\nJSON\u306f\u30b5\u30f3\u30d7\u30eb\u306b\u3042\u308b\u306e\u3067\u3001\u30d0\u30a4\u30ca\u30ea\u30c7\u30fc\u30bf\u3092\u5229\u7528\u3057\u3066\u307f\u308b\u3002\n\nflatbuffers\u95a2\u9023\u30d8\u30c3\u30c0\u306finclude\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u306b\u914d\u7f6e\u3002\nmonster_generated.h\u306fsamples\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u306b\u914d\u7f6e.\n\nC++\u306e\u30b3\u30f3\u30d1\u30a4\u30eb\u30b3\u30de\u30f3\u30c9\u306f\u3053\u3093\u306a\u611f\u3058\n\n```\nclang++ -g -Wall -std=c++11 -I include main.cc\n```\n\n\u4ee5\u4e0b\u3001main.cc\u306e\u30b3\u30fc\u30c9\u3002\n\n```cpp:main.cc\n#include <iostream>\n\n#include \"samples/monster_generated.h\"\n#include \"flatbuffers/flatbuffers.h\"\n#include \"flatbuffers/util.h\"\n\nint main(int /*argc*/, const char * /*argv*/[]) {\n  using namespace MyGame::Sample;\n\n  {\n    // \u65b0\u898f\u306b\u30c7\u30fc\u30bf\u3092\u4f5c\u6210\n    flatbuffers::FlatBufferBuilder builder;\n    auto vec = Vec3(1, 2, 3);\n    auto name = builder.CreateString(\"Test\");\n    unsigned char inv_data[] = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 };\n    auto inventory = builder.CreateVector(inv_data, 10);\n    auto mloc = CreateMonster(builder, &vec, 100, 50, name, inventory, Color_Blue);\n    builder.Finish(mloc);\n\n    auto monster = GetMonster(builder.GetBufferPointer());\n    printf(\"### \u4f5c\u6210\u3057\u305f\u30c7\u30fc\u30bf: hp=%d, mana=%d, name=%s\\n\",\n           monster->hp(), monster->mana(), monster->name()->c_str());\n\n    // \u30c7\u30fc\u30bf\u30d5\u30a1\u30a4\u30eb\u66f8\u304d\u8fbc\u307f\n    auto ok = flatbuffers::SaveFile(\"samples/monsterdata.bin\",\n                                    reinterpret_cast<const char *>(builder.GetBufferPointer()),\n                                    builder.GetSize(),\n                                    true);\n    if (!ok) {\n      printf(\"couldn't save files!\\n\");\n      return 1;\n    }\n  }\n\n  {\n    // \u30c7\u30fc\u30bf\u30d5\u30a1\u30a4\u30eb\u8aad\u307f\u8fbc\u307f\n    std::string binfile;\n    auto ok = flatbuffers::LoadFile(\"samples/monsterdata.bin\", true, &binfile);\n    if (!ok) {\n      printf(\"couldn't load files!\\n\");\n      return 1;\n    }\n\n    auto monster = GetMonster(binfile.data());\n    printf(\"### \u30ed\u30fc\u30c9\u3057\u305f\u30c7\u30fc\u30bf: hp=%d, mana=%d, name=%s\\n\",\n           monster->hp(), monster->mana(), monster->name()->c_str());\n  }\n\n  return 0;\n\n}\n```\n\n\u30b9\u30ad\u30fc\u30de\u306b\u95a2\u3059\u308b\u66f4\u306a\u308b\u60c5\u5831\u306f\u3001flatbuffers/tests\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u306b\u3042\u308bmonster_test.fbs\u3092\u53c2\u7167\n", "tags": ["C++", "cocos2d-x"]}