{"context": "\n\n\u306f\u3058\u3081\u306b\n\u6a5f\u68b0\u5b66\u7fd2\u306e\u30b5\u30f3\u30d7\u30eb\u306fMNIST\u306e\u624b\u66f8\u304d\u6587\u5b57\u8a8d\u8b58\u3092\u3084\u308b\u3053\u3068\u304c\u591a\u3044\u3093\u3060\u3051\u3069\u3001\u300c\u6a5f\u68b0\u5b66\u7fd2\u3059\u308b\u4eba\u306fMNIST\u306e\u30c7\u30fc\u30bf\u304c\u3069\u3046\u3044\u3046\u3082\u306e\u304b\u304f\u3089\u3044\u77e5\u3063\u3066\u308b\u3067\u3057\u3087\uff1f\u300d\u3063\u3066\u611f\u3058\u3067\u3001\u30c7\u30fc\u30bf\u69cb\u9020\u306e\u8aac\u660e\u304c\u7121\u3044\u3053\u3068\u304c\u591a\u3044\u3002\n\u3063\u3066\u306a\u308f\u3051\u3067\u3001\u6a5f\u68b0\u5b66\u7fd2\u306e\u30c9\u7d20\u4eba\u304cChainer\u306e\u30b5\u30f3\u30d7\u30eb\u3067\u4f7f\u308f\u308c\u308bMNIST\u306e\u624b\u66f8\u304d\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u304c\u3069\u3046\u3044\u3046\u3082\u306e\u304b\u3088\u304f\u898b\u3066\u307f\u308b\u3002Chainer\u306f\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u6e08\u307f\u3067\u3042\u308b\u3053\u3068\u524d\u63d0\u3002\n\n\u30c7\u30fc\u30bf\u69cb\u9020\n\u307e\u305a\u306f\u30c7\u30fc\u30bf\u3092\u30ed\u30fc\u30c9\u3057\u3066\u307f\u308b\u3002chainer.datasets.get_mnist()\u3067\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u304c\u8aad\u307f\u8fbc\u307e\u308c\u308b\u3002\u305d\u306etest\u3092\u3042\u308c\u3053\u308c\u3057\u3066\u307f\u308b\u3002\n>>> import chainer\n>>> train, test = chainer.datasets.get_mnist()\n>>> test\n<chainer.datasets.tuple_dataset.TupleDataset object at 0x2aaab303c910>\n>>> len(test)\n10000\n>>> len(test[0])\n2\n>>> len(test[0][0])\n784\n>>> test[0][0]\n(snip)\n        0.        ,  0.        ,  0.        ,  0.        ], dtype=float32)\n>>> test[0][1]\n7\n\n\u4e0a\u8a18\u304b\u3089\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u3053\u3068\u304c\u308f\u304b\u308b\u3002\n\n\ntest\u306f10000\u500b\u306e\u30b5\u30f3\u30d7\u30eb\u30c7\u30fc\u30bf\u304b\u3089\u306a\u308bTupleDataset\u30af\u30e9\u30b9\n\ntest[i]\u306fi\u756a\u76ee\u306e\u30b5\u30f3\u30d7\u30eb\u30c7\u30fc\u30bf\n\ntest[i][0]\u306fi\u756a\u76ee\u306e\u30b5\u30f3\u30d7\u30eb\u306e784\u500b\u306efloat32\u306e\u30c7\u30fc\u30bf\n\ntest[i][1]\u306f\u6574\u6570\u3067\u3001i\u756a\u76ee\u306e\u624b\u66f8\u304d\u30b5\u30f3\u30d7\u30eb\u306e\u300c\u6b63\u89e3\u300d\u3092\u8868\u3059\n\n784 = 28**2 \u306a\u306e\u3067\u300128\u00d728\u306e\u30b0\u30ea\u30c3\u30c9\u306e\u30b0\u30ec\u30fc\u30b9\u30b1\u30fc\u30eb\u306e\u30c7\u30fc\u30bf\u306a\u3093\u3060\u308d\u3046\u3002\n\n\u53ef\u8996\u5316\n\u3068\u3044\u3046\u308f\u3051\u3067\u3001\u3053\u308c\u3092\u4e8c\u5024\u5316\u3057\u3066\u53ef\u8996\u5316\u3057\u3066\u307f\u308b\u3002\u3068\u308a\u3042\u3048\u305a0\u756a\u306e\u30c7\u30fc\u30bf\u6c7a\u3081\u6253\u3061\u3067\u3002\nimport chainer\nn = 0\ntrain, test = chainer.datasets.get_mnist()\ns = 28\nprint test[n][1]\nfor i in range(1,28):\n  for j in range(1,28):\n    v =  test[n][0][j + i*s]\n    if v > 0.1:\n      print \"*\",\n    else:\n      print \" \",\n  print \"\\n\"\n\n\u6700\u521d\u306b\u6b63\u89e3\u3092\u3001\u6b21\u306b\u624b\u66f8\u304d\u30c7\u30fc\u30bf\u3092\u51fa\u529b\u3059\u308b\u3002\u7d50\u679c\u306f\u3053\u3093\u306a\u611f\u3058\u3002\n$ python show_mnist.py \n7\n\n\n\n\n\n\n\n\n\n\n\n\n          * * * * * *                                 \n\n          * * * * * * * * * * * * * * * *             \n\n          * * * * * * * * * * * * * * * *             \n\n                      *   * * * *   * * *             \n\n                                  * * *               \n\n                                  * * *               \n\n                                * * * *               \n\n                              * * * *                 \n\n                              * * *                   \n\n                              * * *                   \n\n                            * * *                     \n\n                          * * * *                     \n\n                          * * *                       \n\n                        * * * *                       \n\n                      * * * *                         \n\n                    * * * *                           \n\n                    * * * *                           \n\n                  * * * * *                           \n\n                  * * * * *                           \n\n                  * * *                               \n\n\n\n\n\n\n0\u756a\u306e\u30c7\u30fc\u30bf\u306f\u6570\u5b57\u306e\u300c7\u300d\u3067\u3059\u306d\u3002\u4e16\u306e\u4e2d\u306e\u6a5f\u68b0\u5b66\u7fd2\u306e\u30b5\u30f3\u30d7\u30eb\u306f\u3053\u308c\u3092\u5165\u529b\u306b\u3057\u3066\u3001\u3069\u306e\u6570\u5b57\u306e\u53ef\u80fd\u6027\u304c\u9ad8\u3044\u304b\u3092\u5224\u5b9a\u3057\u3066\u3044\u308b\u6a21\u69d8\u3002\n# \u306f\u3058\u3081\u306b\n\n\u6a5f\u68b0\u5b66\u7fd2\u306e\u30b5\u30f3\u30d7\u30eb\u306fMNIST\u306e\u624b\u66f8\u304d\u6587\u5b57\u8a8d\u8b58\u3092\u3084\u308b\u3053\u3068\u304c\u591a\u3044\u3093\u3060\u3051\u3069\u3001\u300c\u6a5f\u68b0\u5b66\u7fd2\u3059\u308b\u4eba\u306fMNIST\u306e\u30c7\u30fc\u30bf\u304c\u3069\u3046\u3044\u3046\u3082\u306e\u304b\u304f\u3089\u3044\u77e5\u3063\u3066\u308b\u3067\u3057\u3087\uff1f\u300d\u3063\u3066\u611f\u3058\u3067\u3001\u30c7\u30fc\u30bf\u69cb\u9020\u306e\u8aac\u660e\u304c\u7121\u3044\u3053\u3068\u304c\u591a\u3044\u3002\n\n\u3063\u3066\u306a\u308f\u3051\u3067\u3001\u6a5f\u68b0\u5b66\u7fd2\u306e\u30c9\u7d20\u4eba\u304cChainer\u306e\u30b5\u30f3\u30d7\u30eb\u3067\u4f7f\u308f\u308c\u308bMNIST\u306e\u624b\u66f8\u304d\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u304c\u3069\u3046\u3044\u3046\u3082\u306e\u304b\u3088\u304f\u898b\u3066\u307f\u308b\u3002Chainer\u306f\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u6e08\u307f\u3067\u3042\u308b\u3053\u3068\u524d\u63d0\u3002\n\n# \u30c7\u30fc\u30bf\u69cb\u9020\n\n\u307e\u305a\u306f\u30c7\u30fc\u30bf\u3092\u30ed\u30fc\u30c9\u3057\u3066\u307f\u308b\u3002chainer.datasets.get_mnist()\u3067\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u304c\u8aad\u307f\u8fbc\u307e\u308c\u308b\u3002\u305d\u306etest\u3092\u3042\u308c\u3053\u308c\u3057\u3066\u307f\u308b\u3002\n\n```py\n>>> import chainer\n>>> train, test = chainer.datasets.get_mnist()\n>>> test\n<chainer.datasets.tuple_dataset.TupleDataset object at 0x2aaab303c910>\n>>> len(test)\n10000\n>>> len(test[0])\n2\n>>> len(test[0][0])\n784\n>>> test[0][0]\n(snip)\n        0.        ,  0.        ,  0.        ,  0.        ], dtype=float32)\n>>> test[0][1]\n7\n```\n\n\u4e0a\u8a18\u304b\u3089\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u3053\u3068\u304c\u308f\u304b\u308b\u3002\n\n* `test`\u306f10000\u500b\u306e\u30b5\u30f3\u30d7\u30eb\u30c7\u30fc\u30bf\u304b\u3089\u306a\u308bTupleDataset\u30af\u30e9\u30b9\n* `test[i]`\u306fi\u756a\u76ee\u306e\u30b5\u30f3\u30d7\u30eb\u30c7\u30fc\u30bf\n* `test[i][0]`\u306fi\u756a\u76ee\u306e\u30b5\u30f3\u30d7\u30eb\u306e784\u500b\u306efloat32\u306e\u30c7\u30fc\u30bf\n* `test[i][1]`\u306f\u6574\u6570\u3067\u3001i\u756a\u76ee\u306e\u624b\u66f8\u304d\u30b5\u30f3\u30d7\u30eb\u306e\u300c\u6b63\u89e3\u300d\u3092\u8868\u3059\n\n`784 = 28**2` \u306a\u306e\u3067\u300128\u00d728\u306e\u30b0\u30ea\u30c3\u30c9\u306e\u30b0\u30ec\u30fc\u30b9\u30b1\u30fc\u30eb\u306e\u30c7\u30fc\u30bf\u306a\u3093\u3060\u308d\u3046\u3002\n\n# \u53ef\u8996\u5316\n\n\u3068\u3044\u3046\u308f\u3051\u3067\u3001\u3053\u308c\u3092\u4e8c\u5024\u5316\u3057\u3066\u53ef\u8996\u5316\u3057\u3066\u307f\u308b\u3002\u3068\u308a\u3042\u3048\u305a0\u756a\u306e\u30c7\u30fc\u30bf\u6c7a\u3081\u6253\u3061\u3067\u3002\n\n```py:\nimport chainer\nn = 0\ntrain, test = chainer.datasets.get_mnist()\ns = 28\nprint test[n][1]\nfor i in range(1,28):\n  for j in range(1,28):\n    v =  test[n][0][j + i*s]\n    if v > 0.1:\n      print \"*\",\n    else:\n      print \" \",\n  print \"\\n\"\n```\n\n\u6700\u521d\u306b\u6b63\u89e3\u3092\u3001\u6b21\u306b\u624b\u66f8\u304d\u30c7\u30fc\u30bf\u3092\u51fa\u529b\u3059\u308b\u3002\u7d50\u679c\u306f\u3053\u3093\u306a\u611f\u3058\u3002\n\n```shell-session\n$ python show_mnist.py \n7\n                                                      \n\n                                                      \n\n                                                      \n\n                                                      \n\n                                                      \n\n                                                      \n\n          * * * * * *                                 \n\n          * * * * * * * * * * * * * * * *             \n\n          * * * * * * * * * * * * * * * *             \n\n                      *   * * * *   * * *             \n\n                                  * * *               \n\n                                  * * *               \n\n                                * * * *               \n\n                              * * * *                 \n\n                              * * *                   \n\n                              * * *                   \n\n                            * * *                     \n\n                          * * * *                     \n\n                          * * *                       \n\n                        * * * *                       \n\n                      * * * *                         \n\n                    * * * *                           \n\n                    * * * *                           \n\n                  * * * * *                           \n\n                  * * * * *                           \n\n                  * * *                               \n\n                                                      \n\n\n\n```\n0\u756a\u306e\u30c7\u30fc\u30bf\u306f\u6570\u5b57\u306e\u300c7\u300d\u3067\u3059\u306d\u3002\u4e16\u306e\u4e2d\u306e\u6a5f\u68b0\u5b66\u7fd2\u306e\u30b5\u30f3\u30d7\u30eb\u306f\u3053\u308c\u3092\u5165\u529b\u306b\u3057\u3066\u3001\u3069\u306e\u6570\u5b57\u306e\u53ef\u80fd\u6027\u304c\u9ad8\u3044\u304b\u3092\u5224\u5b9a\u3057\u3066\u3044\u308b\u6a21\u69d8\u3002\n", "tags": ["Chainer"]}