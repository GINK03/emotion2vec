{"context": "\n\n\u7279\u5b9a\u306e\u7bc4\u56f2\u306e\u5468\u6ce2\u6570\u306e\u6ce2\u5f62\u30c7\u30fc\u30bf\u3092\u63cf\u753b\u3059\u308b\n\n\u30c7\u30e2(\u30da\u30fc\u30b8\u3092\u958b\u304f\u3068\u97f3\u304c\u6d41\u308c\u308b\u306e\u3067\u97f3\u91cf\u6ce8\u610f)\n\u4e0a\u306e\u30d3\u30b8\u30e5\u30a2\u30e9\u30a4\u30b6\u30fc\u306f0Hz~\u7d0420000Hz\u3001\u4e0b\u306e\u30d3\u30b8\u30e5\u30a2\u30e9\u30a4\u30b6\u30fc\u306f0Hz~\u7d042000Hz\u306e\u7bc4\u56f2\u306e\n\u6ce2\u5f62\u30c7\u30fc\u30bf\u3092\u63cf\u753b\u3057\u3066\u3044\u308b\u3082\u306e\u3067\u3059\u3002(\u4e0b\u306e\u30d3\u30b8\u30e5\u30a2\u30e9\u30a4\u30b6\u30fc\u306f\u5c11\u3057\u63cf\u753b\u3092\u8abf\u6574\u3057\u3066\u3044\u307e\u3059\u3002)\n\u3053\u306e\u3088\u3046\u306a\u63cf\u753b\u3092\u3057\u305f\u3044\u5834\u5408\u3001getByteFrequencyData\u3067\u53d6\u5f97\u3059\u308b\u914d\u5217\u306e\u3069\u306e\u8981\u7d20\u304c\u3069\u306e\u5468\u6ce2\u6570(Hz)\u306e\n\u6ce2\u5f62\u30c7\u30fc\u30bf\u3092\u683c\u7d0d\u3057\u3066\u3044\u308b\u304b\u77e5\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\n\ngetByteFrequencyData\u3067\u53d6\u5f97\u3059\u308b\u914d\u5217\u306e\u3069\u306e\u8981\u7d20\u304c\u3069\u306e\u5468\u6ce2\u6570(Hz)\u306e\u6ce2\u5f62\u30c7\u30fc\u30bf\u3092\u683c\u7d0d\u3057\u3066\u3044\u308b\u304b\u78ba\u8a8d\u3059\u308b\n\u30c7\u30e2\u306e\u3088\u3046\u306aWeb Audio\u3067\u30aa\u30fc\u30c7\u30a3\u30aa\u30d3\u30b8\u30e5\u30a2\u30e9\u30a4\u30b6\u30fc\u3092\u5236\u4f5c\u3059\u308b\u969b\u306b\u3001\n\u4ee5\u4e0b\u306e\u3088\u3046\u306bgetByteFrequencyData\u3067\u5468\u6ce2\u6570\u9818\u57df\u306e\u6ce2\u5f62\u30c7\u30fc\u30bf(\u30b9\u30da\u30af\u30c8\u30eb)\u3092\u53d6\u5f97\u3059\u308b\u3068\u601d\u3044\u307e\u3059\u3002\nvar audioCtx = new AudioContext();\nvar analyser = audioCtx.createAnalyser();\nvar bufferLength;\nvar frequency;\nvar value;\n\nanalyser.fftSize = 2048;                    // \u30c7\u30d5\u30a9\u30eb\u30c82048\nbufferLength = analyser.frequencyBinCount;  // analyser.fftSize\u306e\u534a\u5206\u306e\u305f\u3081\u30011024\nfrequency = new Uint8Array(bufferLength);\n\nanalyser.getByteFrequencyData(frequency);\n\nfor(var i = 0; i < bufferLength; i++) {\n  value = frequency[i]; // \u6ce2\u5f62\u30c7\u30fc\u30bf 0 ~ 255\u304c\u683c\u7d0d\u3055\u308c\u3066\u3044\u308b\u3002\n}\n\n\u4eca\u56deanalyser.fftSize\u306f\u30c7\u30d5\u30a9\u30eb\u30c8\u306e2048\u306e\u305f\u3081\u3001\nfrequency\u914d\u5217\u306b\u306f\u5468\u6ce2\u6570\u6bce\u306e\u8981\u7d20\u304c1024\u500b\u683c\u7d0d\u3055\u308c\u3066\u3044\u307e\u3059\u3002\n\u3069\u306e\u8981\u7d20\u304c\u3069\u306e\u5468\u6ce2\u6570(Hz)\u306e\u6ce2\u5f62\u30c7\u30fc\u30bf\u3092\u683c\u7d0d\u3057\u3066\u3044\u308b\u304b\u306f\u3001\u4ee5\u4e0b\u306e\u8a08\u7b97\u3067\u78ba\u8a8d\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\u914d\u5217\u306e\u30a4\u30f3\u30c7\u30c3\u30af\u30b9 * AudioContext\u306e\u30b5\u30f3\u30d7\u30eb\u30ec\u30fc\u30c8(48000\u56fa\u5b9a) / AnalyserNode\u306efftSize\n\u914d\u5217\u306e\u30a4\u30f3\u30c7\u30c3\u30af\u30b9 * AudioContext\u306e\u30b5\u30f3\u30d7\u30eb\u30ec\u30fc\u30c8(44100\u56fa\u5b9a) / AnalyserNode\u306efftSize\n\u3053\u306e\u8a08\u7b97\u3067\u3001\u4e0a\u8a18\u306e\u4f8b\u306efrequency[i]\u306b\u3069\u306e\u5468\u6ce2\u6570(Hz)\u306e\u6ce2\u5f62\u30c7\u30fc\u30bf\u304c\u683c\u7d0d\u3055\u308c\u3066\u3044\u308b\u304b\u308f\u304b\u308a\u307e\u3059\u3002\nAnalyserNode\u306efftSize\u306f2048\u3067\u3042\u308a\u3001frequency\u914d\u5217\u306e\u8981\u7d20\u306f1024\u500b\u306e\u305f\u3081\u3001\n0Hz~22028Hz\u306e\u6ce2\u5f62\u30c7\u30fc\u30bf\u304c\u683c\u7d0d\u3055\u308c\u3066\u3044\u307e\u3059\u3002\nfor(var i = 0; i < bufferLength; i++) {\n  value = frequency[i]; // (i * 44100 / 2048)Hz\u306e\u6ce2\u5f62\u30c7\u30fc\u30bf 0 ~ 255\u304c\u683c\u7d0d\u3055\u308c\u3066\u3044\u308b\u3002\n}\n\n// 0 * 44100 / 2048 = 0.0 Hz\n// 1 * 44100 / 2048 = 21.53 Hz\n// 2 * 44100 / 2048 = 43.06 Hz\n// 3 * 44100 / 2048 = 64.59 Hz\n// ...\n// ...\n// 1023 * 44100 / 2048 = 22028 Hz\n\n\u4eca\u56de\u306e\u4f8b\u3067\u306f22028Hz\u307e\u3067\u306e\u6ce2\u5f62\u30c7\u30fc\u30bf\u304c\u53d6\u5f97\u3067\u304d\u307e\u3059\u304c\u3001\u4eba\u9593\u306e\u53ef\u8074\u97f3\u57df\u306f20000Hz\u3068\u8a00\u308f\u308c\u3066\u304a\u308a\u3001\n\u5b9f\u969b\u306e\u97f3\u697d\u3067\u308220000Hz\u4ed8\u8fd1\u306e\u6ce2\u5f62\u30c7\u30fc\u30bf\u304c0\u306e\u3053\u3068\u304c\u591a\u3044\u305f\u3081\u3001\u3053\u306e\u7bc4\u56f2\u307e\u3067\u53d6\u5f97\u3059\u308b\u5fc5\u8981\u306f\u5fc5\u305a\u3057\u3082\u306a\u3044\u3068\u601d\u3044\u307e\u3059\u3002\n(\u9ad8\u3044\u5468\u6ce2\u6570\u304c\u51fa\u308b\u66f2\u3082\u3042\u308b\u305f\u3081\u3001\u9ad8\u3044\u5468\u6ce2\u6570\u306e\u7bc4\u56f2\u3060\u3051\u53d6\u5f97\u3057\u3066\u3046\u307e\u304f\u63cf\u753b\u306b\u5229\u7528\u3059\u308b\u306e\u3082\u826f\u3044\u3068\u601d\u3044\u307e\u3059\u3002)\n0Hz~2000Hz\u306e\u3088\u3046\u306b\u7bc4\u56f2\u3092\u72ed\u3081\u305f\u6ce2\u5f62\u30c7\u30fc\u30bf\u3092\u53d6\u5f97\u3057\u3001\u305d\u308c\u3089\u3092\u7d30\u304b\u304f\u8abf\u6574\u3057\u3066\u63cf\u753b\u3057\u305f\u65b9\u304c\n\u52d5\u304d\u306b\u6291\u63da\u304c\u3042\u3063\u3066\u30d3\u30b8\u30e5\u30a2\u30e9\u30a4\u30b6\u30fc\u3063\u307d\u304f\u306a\u308b\u3068\u601d\u3044\u307e\u3057\u305f\u3002\n\n\u53c2\u8003\n\nWhat does the FFT data in the Web Audio API correspond to?\n\n# \u7279\u5b9a\u306e\u7bc4\u56f2\u306e\u5468\u6ce2\u6570\u306e\u6ce2\u5f62\u30c7\u30fc\u30bf\u3092\u63cf\u753b\u3059\u308b\n![freq.jpg](https://qiita-image-store.s3.amazonaws.com/0/69667/a98abd59-5e00-a926-59b1-45b176d0302a.jpeg)\n\n[\u30c7\u30e2](http://hira777.github.io/qiita/web-audio/demo3/index.html)**(\u30da\u30fc\u30b8\u3092\u958b\u304f\u3068\u97f3\u304c\u6d41\u308c\u308b\u306e\u3067\u97f3\u91cf\u6ce8\u610f)**\n\n\u4e0a\u306e\u30d3\u30b8\u30e5\u30a2\u30e9\u30a4\u30b6\u30fc\u306f**0Hz~\u7d0420000Hz**\u3001\u4e0b\u306e\u30d3\u30b8\u30e5\u30a2\u30e9\u30a4\u30b6\u30fc\u306f**0Hz~\u7d042000Hz**\u306e\u7bc4\u56f2\u306e\n\u6ce2\u5f62\u30c7\u30fc\u30bf\u3092\u63cf\u753b\u3057\u3066\u3044\u308b\u3082\u306e\u3067\u3059\u3002(\u4e0b\u306e\u30d3\u30b8\u30e5\u30a2\u30e9\u30a4\u30b6\u30fc\u306f\u5c11\u3057\u63cf\u753b\u3092\u8abf\u6574\u3057\u3066\u3044\u307e\u3059\u3002)\n\u3053\u306e\u3088\u3046\u306a\u63cf\u753b\u3092\u3057\u305f\u3044\u5834\u5408\u3001getByteFrequencyData\u3067\u53d6\u5f97\u3059\u308b\u914d\u5217\u306e\u3069\u306e\u8981\u7d20\u304c\u3069\u306e\u5468\u6ce2\u6570(Hz)\u306e\n\u6ce2\u5f62\u30c7\u30fc\u30bf\u3092\u683c\u7d0d\u3057\u3066\u3044\u308b\u304b\u77e5\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\n\n# getByteFrequencyData\u3067\u53d6\u5f97\u3059\u308b\u914d\u5217\u306e\u3069\u306e\u8981\u7d20\u304c\u3069\u306e\u5468\u6ce2\u6570(Hz)\u306e\u6ce2\u5f62\u30c7\u30fc\u30bf\u3092\u683c\u7d0d\u3057\u3066\u3044\u308b\u304b\u78ba\u8a8d\u3059\u308b\n\u30c7\u30e2\u306e\u3088\u3046\u306aWeb Audio\u3067\u30aa\u30fc\u30c7\u30a3\u30aa\u30d3\u30b8\u30e5\u30a2\u30e9\u30a4\u30b6\u30fc\u3092\u5236\u4f5c\u3059\u308b\u969b\u306b\u3001\n\u4ee5\u4e0b\u306e\u3088\u3046\u306b`getByteFrequencyData`\u3067\u5468\u6ce2\u6570\u9818\u57df\u306e\u6ce2\u5f62\u30c7\u30fc\u30bf(\u30b9\u30da\u30af\u30c8\u30eb)\u3092\u53d6\u5f97\u3059\u308b\u3068\u601d\u3044\u307e\u3059\u3002\n\n```js:\nvar audioCtx = new AudioContext();\nvar analyser = audioCtx.createAnalyser();\nvar bufferLength;\nvar frequency;\nvar value;\n\nanalyser.fftSize = 2048;                    // \u30c7\u30d5\u30a9\u30eb\u30c82048\nbufferLength = analyser.frequencyBinCount;  // analyser.fftSize\u306e\u534a\u5206\u306e\u305f\u3081\u30011024\nfrequency = new Uint8Array(bufferLength);\n\nanalyser.getByteFrequencyData(frequency);\n\nfor(var i = 0; i < bufferLength; i++) {\n  value = frequency[i]; // \u6ce2\u5f62\u30c7\u30fc\u30bf 0 ~ 255\u304c\u683c\u7d0d\u3055\u308c\u3066\u3044\u308b\u3002\n}\n```\n\n\u4eca\u56de`analyser.fftSize`\u306f\u30c7\u30d5\u30a9\u30eb\u30c8\u306e2048\u306e\u305f\u3081\u3001\n`frequency`\u914d\u5217\u306b\u306f\u5468\u6ce2\u6570\u6bce\u306e\u8981\u7d20\u304c1024\u500b\u683c\u7d0d\u3055\u308c\u3066\u3044\u307e\u3059\u3002\n\u3069\u306e\u8981\u7d20\u304c\u3069\u306e\u5468\u6ce2\u6570(Hz)\u306e\u6ce2\u5f62\u30c7\u30fc\u30bf\u3092\u683c\u7d0d\u3057\u3066\u3044\u308b\u304b\u306f\u3001\u4ee5\u4e0b\u306e\u8a08\u7b97\u3067\u78ba\u8a8d\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\n~~**\u914d\u5217\u306e\u30a4\u30f3\u30c7\u30c3\u30af\u30b9 * AudioContext\u306e\u30b5\u30f3\u30d7\u30eb\u30ec\u30fc\u30c8(48000\u56fa\u5b9a) / AnalyserNode\u306efftSize**~~\n**\u914d\u5217\u306e\u30a4\u30f3\u30c7\u30c3\u30af\u30b9 * AudioContext\u306e\u30b5\u30f3\u30d7\u30eb\u30ec\u30fc\u30c8(44100\u56fa\u5b9a) / AnalyserNode\u306efftSize**\n\n\u3053\u306e\u8a08\u7b97\u3067\u3001\u4e0a\u8a18\u306e\u4f8b\u306e`frequency[i]`\u306b\u3069\u306e\u5468\u6ce2\u6570(Hz)\u306e\u6ce2\u5f62\u30c7\u30fc\u30bf\u304c\u683c\u7d0d\u3055\u308c\u3066\u3044\u308b\u304b\u308f\u304b\u308a\u307e\u3059\u3002\n`AnalyserNode`\u306e`fftSize`\u306f2048\u3067\u3042\u308a\u3001`frequency`\u914d\u5217\u306e\u8981\u7d20\u306f1024\u500b\u306e\u305f\u3081\u3001\n0Hz~22028Hz\u306e\u6ce2\u5f62\u30c7\u30fc\u30bf\u304c\u683c\u7d0d\u3055\u308c\u3066\u3044\u307e\u3059\u3002\n\n```js:\nfor(var i = 0; i < bufferLength; i++) {\n  value = frequency[i]; // (i * 44100 / 2048)Hz\u306e\u6ce2\u5f62\u30c7\u30fc\u30bf 0 ~ 255\u304c\u683c\u7d0d\u3055\u308c\u3066\u3044\u308b\u3002\n}\n\n// 0 * 44100 / 2048 = 0.0 Hz\n// 1 * 44100 / 2048 = 21.53 Hz\n// 2 * 44100 / 2048 = 43.06 Hz\n// 3 * 44100 / 2048 = 64.59 Hz\n// ...\n// ...\n// 1023 * 44100 / 2048 = 22028 Hz\n```\n\n\u4eca\u56de\u306e\u4f8b\u3067\u306f22028Hz\u307e\u3067\u306e\u6ce2\u5f62\u30c7\u30fc\u30bf\u304c\u53d6\u5f97\u3067\u304d\u307e\u3059\u304c\u3001\u4eba\u9593\u306e\u53ef\u8074\u97f3\u57df\u306f20000Hz\u3068\u8a00\u308f\u308c\u3066\u304a\u308a\u3001\n\u5b9f\u969b\u306e\u97f3\u697d\u3067\u308220000Hz\u4ed8\u8fd1\u306e\u6ce2\u5f62\u30c7\u30fc\u30bf\u304c0\u306e\u3053\u3068\u304c\u591a\u3044\u305f\u3081\u3001\u3053\u306e\u7bc4\u56f2\u307e\u3067\u53d6\u5f97\u3059\u308b\u5fc5\u8981\u306f\u5fc5\u305a\u3057\u3082\u306a\u3044\u3068\u601d\u3044\u307e\u3059\u3002\n(\u9ad8\u3044\u5468\u6ce2\u6570\u304c\u51fa\u308b\u66f2\u3082\u3042\u308b\u305f\u3081\u3001\u9ad8\u3044\u5468\u6ce2\u6570\u306e\u7bc4\u56f2\u3060\u3051\u53d6\u5f97\u3057\u3066\u3046\u307e\u304f\u63cf\u753b\u306b\u5229\u7528\u3059\u308b\u306e\u3082\u826f\u3044\u3068\u601d\u3044\u307e\u3059\u3002)\n0Hz~2000Hz\u306e\u3088\u3046\u306b\u7bc4\u56f2\u3092\u72ed\u3081\u305f\u6ce2\u5f62\u30c7\u30fc\u30bf\u3092\u53d6\u5f97\u3057\u3001\u305d\u308c\u3089\u3092\u7d30\u304b\u304f\u8abf\u6574\u3057\u3066\u63cf\u753b\u3057\u305f\u65b9\u304c\n\u52d5\u304d\u306b\u6291\u63da\u304c\u3042\u3063\u3066\u30d3\u30b8\u30e5\u30a2\u30e9\u30a4\u30b6\u30fc\u3063\u307d\u304f\u306a\u308b\u3068\u601d\u3044\u307e\u3057\u305f\u3002\n\n# \u53c2\u8003\n- [What does the FFT data in the Web Audio API correspond to?](http://stackoverflow.com/questions/14789283/what-does-the-fft-data-in-the-web-audio-api-correspond-to)\n", "tags": ["WebAudioAPI", "JavaScript"]}