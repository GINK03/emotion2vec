{"context": " More than 1 year has passed since last update.\u5049\u5927\u306a\u308b\u3054\u307f\u7bb1\u5e2b\u306b Stan \u3067\u65b0\u3057\u3044\u5024\u306b\u5bfe\u3059\u308b\u4e88\u6e2c\u533a\u9593\u3092\u51fa\u3059\u65b9\u6cd5\u3092\u6559\u308f\u3063\u305f\u306e\u3067\u3001\u3084\u3063\u3066\u307f\u308b(\u305a\u3044\u3076\u3093\u653e\u7f6e\u3057\u3066\u3044\u305f)\u3002\n\u3084\u308a\u65b9\u306f\u4e00\u8a00\u3067\u8a00\u3048\u3070\u6b20\u6e2c\u5024\u63a8\u5b9a\u3068\u540c\u3058\u3084\u308a\u65b9\u3068\u8a00\u3048\u3070\u308f\u304b\u308b\u4eba\u306b\u306f\u308f\u304b\u308b\u3060\u308d\u3046\u3002\n\nR\n######################################## \u30d1\u30c3\u30b1\u30fc\u30b8\u306e\u8aad\u307f\u8fbc\u307f\nlibrary(rstan)\nlibrary(ggplot2)\nlibrary(dplyr)\n\n######################################## \u30e2\u30c7\u30eb\u4f5c\u6210\u7528\u306e\u30c7\u30fc\u30bf\u3092\u751f\u6210\nset.seed(314)\n\nN <- 1000\nx <- rnorm(N, mean = 50, sd = 10)\ny <- 10 + 0.8 * x + rnorm(N, mean =0, sd = 7)\n\nggplot(data.frame(x=x, y=y), aes(x=x, y=y)) + geom_point()\n\n\n\n\nR\n######################################## \u65b0\u3057\u3044\u5024\nx_new <- seq(10, 90, by=10)\n\n\n\npredict_for_new_value.stan\n######################################## \u30d1\u30e9\u30e1\u30fc\u30bf\u3068\u4e88\u6e2c\u5024\u3092\u63a8\u5b9a\u3059\u308b Stan \u30b3\u30fc\u30c9\ndata{\n  int<lower=0> N;\n  real x[N];\n  real y[N];\n  int<lower=0> N_new;\n  real x_new[N_new];\n}\nparameters {\n  real alpha;\n  real beta;\n  real<lower=0> s;\n  real y_pred[N_new]; # \u4e88\u6e2c\u5024\n}\nmodel{\n  for(i in 1:N)\n    y[i] ~ normal(alpha + beta * x[i], s);\n  for(i in 1:N_new)\n    y_pred[i] ~ normal(alpha + beta * x_new[i], s);\n  alpha ~ normal(0, 100);\n  beta ~ normal(0, 100);\n  s ~ inv_gamma(0.001, 0.001);\n}\n\n\n\nR\n######################################## Stan \u306b\u3088\u308a\u3001\u30d1\u30e9\u30e1\u30fc\u30bf\u3068\u4e88\u6e2c\u5024\u3092\u63a8\u5b9a\ndatastan <- list(N=N, x=x, y=y, N_new=length(x_new), x_new=x_new)\nfit <- stan(file=\"predict_for_new_value.stan\", data=datastan, iter=1000, chain=4)\n# traceplot(fit, ask=F)\nprint(fit, digit=2)\n\n\n\n\u7d50\u679c\n              mean se_mean   sd     2.5%      25%      50%      75%    97.5% n_eff Rhat\nalpha         8.81    0.03 1.18     6.50     7.99     8.82     9.60    11.07  1269    1\nbeta          0.83    0.00 0.02     0.78     0.81     0.83     0.84     0.87  1273    1\ns             7.03    0.00 0.15     6.75     6.92     7.02     7.13     7.34  2000    1\ny_pred[1]    16.88    0.16 7.17     2.79    12.30    16.84    21.58    31.28  2000    1\ny_pred[2]    25.43    0.16 7.12    11.40    20.48    25.41    30.54    39.10  2000    1\ny_pred[3]    33.32    0.15 6.89    20.08    28.59    33.53    37.95    46.45  2000    1\ny_pred[4]    41.76    0.15 6.86    28.19    37.17    41.75    46.51    54.95  2000    1\ny_pred[5]    50.03    0.16 7.25    36.09    45.27    50.01    54.69    64.29  2000    1\ny_pred[6]    58.50    0.16 7.26    44.25    53.70    58.45    63.19    72.69  2000    1\ny_pred[7]    66.58    0.15 6.82    53.36    61.92    66.58    71.16    79.91  2000    1\ny_pred[8]    74.79    0.15 6.89    61.09    70.11    74.98    79.50    87.86  2000    1\ny_pred[9]    83.26    0.17 7.39    68.90    78.35    83.30    88.35    98.26  2000    1\nlp__      -2471.61    0.09 2.51 -2477.60 -2472.99 -2471.31 -2469.80 -2467.78   733    1\n\n\n\nR\n######################################## \u4e88\u6e2c\u5024\u306e\u62bd\u51fa\ny_pred <- data.frame(rstan::extract(fit)$y_pred)\ncolnames(y_pred) <- paste0(\"x_\", 1:9, rep(0,9))\n\n######################################## \u4e88\u6e2c\u7bc4\u56f2\u3092\u63cf\u753b\ndata <- tidyr::gather(y_pred, x, y, seq_len(ncol(y_pred)))\nggplot(data, aes(x=x, y=y)) + geom_violin()\n\n\n\n\nR\n######################################## \u4e88\u6e2c\u7bc4\u56f2\u306e\u8a08\u7b97\ndata %>% group_by(x) %>% \n  summarise(mean=mean(y), lower=quantile(y, probs=0.025), upper=quantile(y, probs=0.975))\n\n\n\n\u7d50\u679c\n     x     mean     lower    upper\n1 x_10 16.88353  2.786534 31.28435\n2 x_20 25.43116 11.404681 39.09586\n3 x_30 33.31677 20.082840 46.45167\n4 x_40 41.76491 28.190227 54.95213\n5 x_50 50.03347 36.090850 64.29103\n6 x_60 58.50089 44.254372 72.69129\n7 x_70 66.58487 53.355930 79.91333\n8 x_80 74.79041 61.085447 87.86033\n9 x_90 83.25508 68.898657 98.25819\n\n\n\nR\n######################################## (\u53c2\u8003) lm() \u306b\u3088\u308b\u4e88\u6e2c\u7bc4\u56f2\u306e\u8a08\u7b97\npredict(lm(y ~ x), newdata=data.frame(x=x_new), interval = \"prediction\")\n\n\n\n\u7d50\u679c\n       fit       lwr      upr\n1 17.03153  3.131567 30.93149\n2 25.29911 11.449794 39.14843\n3 33.56670 19.753380 47.38002\n4 41.83428 28.042209 55.62636\n5 50.10187 36.316215 63.88753\n6 58.36946 44.575376 72.16354\n7 66.63704 52.819719 80.45437\n8 74.90463 61.049319 88.75994\n9 83.17222 69.264297 97.08013\n\n\n\u3061\u306a\u307f\u306b\u3001\u5916\u633f\u306b\u5bfe\u3057\u3066\u4e88\u6e2c\u533a\u9593\u304c\u5e83\u304c\u308b\u3053\u3068\u306f\u3001\u30c7\u30fc\u30bf\u751f\u6210\u3092\u6b21\u306e\u3088\u3046\u306b\u4e00\u884c\u5909\u3048\u3066\u307f\u3066\u78ba\u8a8d\u3057\u305f\u3002\n\nR\n# x <- rnorm(N, mean = 50, sd = 10)\nx <- rnorm(N, mean = 50, sd = 1)\n\n\n\n\n\u307e\u3068\u3081\n\u3053\u306e\u65b9\u6cd5\u3060\u3068\u3001\u30d1\u30e9\u30e1\u30fc\u30bf\u63a8\u5b9a\u3068\u4e88\u6e2c\u5024\u63a8\u5b9a\u3092\u540c\u6642\u306b\u3084\u3063\u3066\u308b\u306e\u3067\u3001\u540c\u3058\u30e2\u30c7\u30eb\u3067\u4e88\u6e2c\u3092\u7e70\u308a\u8fd4\u3057\u305f\u3044\u5834\u5408\u306b\u306a\u3093\u304b\u7121\u99c4\u304c\u591a\u3044\u6c17\u304c\u3059\u308b\u306e\u3067\u3044\u3044\u65b9\u6cd5\u77e5\u3063\u3066\u3044\u308b\u65b9\u306f\u3054\u6559\u6388\u304f\u3060\u3055\u3044\u3002\n\u79c1\u304c\u3054\u307f\u7bb1\u5e2b\u306e\u8aac\u660e\u3092\u52d8\u9055\u3044\u3057\u3066\u3044\u308b\u53ef\u80fd\u6027\u3082\u3042\u308b\u306e\u3067\u3001\u305d\u306e\u5834\u5408\u3082\u3054\u6307\u6458\u3044\u305f\u3060\u3051\u308b\u3068\u3042\u308a\u304c\u305f\u3044\u3067\u3059\u3002\n\u5049\u5927\u306a\u308b\u3054\u307f\u7bb1\u5e2b\u306b Stan \u3067\u65b0\u3057\u3044\u5024\u306b\u5bfe\u3059\u308b\u4e88\u6e2c\u533a\u9593\u3092\u51fa\u3059\u65b9\u6cd5\u3092\u6559\u308f\u3063\u305f\u306e\u3067\u3001\u3084\u3063\u3066\u307f\u308b(\u305a\u3044\u3076\u3093\u653e\u7f6e\u3057\u3066\u3044\u305f)\u3002\n\u3084\u308a\u65b9\u306f\u4e00\u8a00\u3067\u8a00\u3048\u3070\u6b20\u6e2c\u5024\u63a8\u5b9a\u3068\u540c\u3058\u3084\u308a\u65b9\u3068\u8a00\u3048\u3070\u308f\u304b\u308b\u4eba\u306b\u306f\u308f\u304b\u308b\u3060\u308d\u3046\u3002\n\n```r:R\n######################################## \u30d1\u30c3\u30b1\u30fc\u30b8\u306e\u8aad\u307f\u8fbc\u307f\nlibrary(rstan)\nlibrary(ggplot2)\nlibrary(dplyr)\n\n######################################## \u30e2\u30c7\u30eb\u4f5c\u6210\u7528\u306e\u30c7\u30fc\u30bf\u3092\u751f\u6210\nset.seed(314)\n\nN <- 1000\nx <- rnorm(N, mean = 50, sd = 10)\ny <- 10 + 0.8 * x + rnorm(N, mean =0, sd = 7)\n\nggplot(data.frame(x=x, y=y), aes(x=x, y=y)) + geom_point()\n```\n\n![Rplot.png](https://qiita-image-store.s3.amazonaws.com/0/2570/37257789-207a-c962-df46-2c943f37b4c5.png)\n\n```r:R\n######################################## \u65b0\u3057\u3044\u5024\nx_new <- seq(10, 90, by=10)\n```\n\n```stan:predict_for_new_value.stan\n######################################## \u30d1\u30e9\u30e1\u30fc\u30bf\u3068\u4e88\u6e2c\u5024\u3092\u63a8\u5b9a\u3059\u308b Stan \u30b3\u30fc\u30c9\ndata{\n  int<lower=0> N;\n  real x[N];\n  real y[N];\n  int<lower=0> N_new;\n  real x_new[N_new];\n}\nparameters {\n  real alpha;\n  real beta;\n  real<lower=0> s;\n  real y_pred[N_new]; # \u4e88\u6e2c\u5024\n}\nmodel{\n  for(i in 1:N)\n    y[i] ~ normal(alpha + beta * x[i], s);\n  for(i in 1:N_new)\n    y_pred[i] ~ normal(alpha + beta * x_new[i], s);\n  alpha ~ normal(0, 100);\n  beta ~ normal(0, 100);\n  s ~ inv_gamma(0.001, 0.001);\n}\n```\n\n```r:R\n######################################## Stan \u306b\u3088\u308a\u3001\u30d1\u30e9\u30e1\u30fc\u30bf\u3068\u4e88\u6e2c\u5024\u3092\u63a8\u5b9a\ndatastan <- list(N=N, x=x, y=y, N_new=length(x_new), x_new=x_new)\nfit <- stan(file=\"predict_for_new_value.stan\", data=datastan, iter=1000, chain=4)\n# traceplot(fit, ask=F)\nprint(fit, digit=2)\n```\n\n```:\u7d50\u679c\n              mean se_mean   sd     2.5%      25%      50%      75%    97.5% n_eff Rhat\nalpha         8.81    0.03 1.18     6.50     7.99     8.82     9.60    11.07  1269    1\nbeta          0.83    0.00 0.02     0.78     0.81     0.83     0.84     0.87  1273    1\ns             7.03    0.00 0.15     6.75     6.92     7.02     7.13     7.34  2000    1\ny_pred[1]    16.88    0.16 7.17     2.79    12.30    16.84    21.58    31.28  2000    1\ny_pred[2]    25.43    0.16 7.12    11.40    20.48    25.41    30.54    39.10  2000    1\ny_pred[3]    33.32    0.15 6.89    20.08    28.59    33.53    37.95    46.45  2000    1\ny_pred[4]    41.76    0.15 6.86    28.19    37.17    41.75    46.51    54.95  2000    1\ny_pred[5]    50.03    0.16 7.25    36.09    45.27    50.01    54.69    64.29  2000    1\ny_pred[6]    58.50    0.16 7.26    44.25    53.70    58.45    63.19    72.69  2000    1\ny_pred[7]    66.58    0.15 6.82    53.36    61.92    66.58    71.16    79.91  2000    1\ny_pred[8]    74.79    0.15 6.89    61.09    70.11    74.98    79.50    87.86  2000    1\ny_pred[9]    83.26    0.17 7.39    68.90    78.35    83.30    88.35    98.26  2000    1\nlp__      -2471.61    0.09 2.51 -2477.60 -2472.99 -2471.31 -2469.80 -2467.78   733    1\n```\n\n```r:R\n######################################## \u4e88\u6e2c\u5024\u306e\u62bd\u51fa\ny_pred <- data.frame(rstan::extract(fit)$y_pred)\ncolnames(y_pred) <- paste0(\"x_\", 1:9, rep(0,9))\n\n######################################## \u4e88\u6e2c\u7bc4\u56f2\u3092\u63cf\u753b\ndata <- tidyr::gather(y_pred, x, y, seq_len(ncol(y_pred)))\nggplot(data, aes(x=x, y=y)) + geom_violin()\n```\n\n![Rplot01.png](https://qiita-image-store.s3.amazonaws.com/0/2570/8ed2e4fa-7851-e383-2381-2602dfc0ed5b.png)\n\n```r:R\n######################################## \u4e88\u6e2c\u7bc4\u56f2\u306e\u8a08\u7b97\ndata %>% group_by(x) %>% \n  summarise(mean=mean(y), lower=quantile(y, probs=0.025), upper=quantile(y, probs=0.975))\n```\n\n```:\u7d50\u679c\n     x     mean     lower    upper\n1 x_10 16.88353  2.786534 31.28435\n2 x_20 25.43116 11.404681 39.09586\n3 x_30 33.31677 20.082840 46.45167\n4 x_40 41.76491 28.190227 54.95213\n5 x_50 50.03347 36.090850 64.29103\n6 x_60 58.50089 44.254372 72.69129\n7 x_70 66.58487 53.355930 79.91333\n8 x_80 74.79041 61.085447 87.86033\n9 x_90 83.25508 68.898657 98.25819\n```\n\n```r:R\n######################################## (\u53c2\u8003) lm() \u306b\u3088\u308b\u4e88\u6e2c\u7bc4\u56f2\u306e\u8a08\u7b97\npredict(lm(y ~ x), newdata=data.frame(x=x_new), interval = \"prediction\")\n```\n\n```:\u7d50\u679c\n       fit       lwr      upr\n1 17.03153  3.131567 30.93149\n2 25.29911 11.449794 39.14843\n3 33.56670 19.753380 47.38002\n4 41.83428 28.042209 55.62636\n5 50.10187 36.316215 63.88753\n6 58.36946 44.575376 72.16354\n7 66.63704 52.819719 80.45437\n8 74.90463 61.049319 88.75994\n9 83.17222 69.264297 97.08013\n```\n\n\u3061\u306a\u307f\u306b\u3001\u5916\u633f\u306b\u5bfe\u3057\u3066\u4e88\u6e2c\u533a\u9593\u304c\u5e83\u304c\u308b\u3053\u3068\u306f\u3001\u30c7\u30fc\u30bf\u751f\u6210\u3092\u6b21\u306e\u3088\u3046\u306b\u4e00\u884c\u5909\u3048\u3066\u307f\u3066\u78ba\u8a8d\u3057\u305f\u3002\n\n```r:R\n# x <- rnorm(N, mean = 50, sd = 10)\nx <- rnorm(N, mean = 50, sd = 1)\n```\n\n![Rplot02.png](https://qiita-image-store.s3.amazonaws.com/0/2570/6e1fb76d-42bc-97d6-9edc-8f53903f6181.png)\n\n### \u307e\u3068\u3081\n\n\u3053\u306e\u65b9\u6cd5\u3060\u3068\u3001\u30d1\u30e9\u30e1\u30fc\u30bf\u63a8\u5b9a\u3068\u4e88\u6e2c\u5024\u63a8\u5b9a\u3092\u540c\u6642\u306b\u3084\u3063\u3066\u308b\u306e\u3067\u3001\u540c\u3058\u30e2\u30c7\u30eb\u3067\u4e88\u6e2c\u3092\u7e70\u308a\u8fd4\u3057\u305f\u3044\u5834\u5408\u306b\u306a\u3093\u304b\u7121\u99c4\u304c\u591a\u3044\u6c17\u304c\u3059\u308b\u306e\u3067\u3044\u3044\u65b9\u6cd5\u77e5\u3063\u3066\u3044\u308b\u65b9\u306f\u3054\u6559\u6388\u304f\u3060\u3055\u3044\u3002\n\u79c1\u304c\u3054\u307f\u7bb1\u5e2b\u306e\u8aac\u660e\u3092\u52d8\u9055\u3044\u3057\u3066\u3044\u308b\u53ef\u80fd\u6027\u3082\u3042\u308b\u306e\u3067\u3001\u305d\u306e\u5834\u5408\u3082\u3054\u6307\u6458\u3044\u305f\u3060\u3051\u308b\u3068\u3042\u308a\u304c\u305f\u3044\u3067\u3059\u3002\n", "tags": ["R", "RStan"]}