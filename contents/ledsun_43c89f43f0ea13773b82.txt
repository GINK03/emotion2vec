{"context": "\u4e8c\u3064\u306e\u65b9\u6cd5\u304c\u3042\u308a\u307e\u3059\u3002\n\n\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u3067\u95a2\u6570\u3092\u751f\u6210\u3059\u308b\nFunction\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u3092\u7d99\u627f\u3059\u308b\n\nChrome 50.0.2661.102\u3068Node v6.1.0\u3067\u78ba\u8a8d\u3057\u307e\u3057\u305f\u3002\n\n\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u3067\u95a2\u6570\u3092\u751f\u6210\nclass\u69cb\u6587\u306econtstructor\u306fretun\u6587\u3067\u3001\u751f\u6210\u3059\u308b\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u4e0a\u66f8\u304d\u3067\u304d\u307e\u3059\u3002\nhttp://www.2ality.com/2015/02/es6-classes-final.html\n\nOverriding the result of a constructor\nJust like in ES5, you can override the result of a constructor by explicitly returning an object:\n\nclass Foo {\n    constructor() {\n        return Object.create(null);\n    }\n}\nconsole.log(new Foo() instanceof Foo); // false\n\n\nIf you do so, it doesn\u2019t matter whether this has been initialized or not. In other words: you don\u2019t have to call super() in a derived constructor if you override the result in this manner.\n\n\u95a2\u6570\u3092\u751f\u6210\u3057\u3066return\u3059\u308c\u3070\u3001\u95a2\u6570\u3092\u8fd4\u3059\u30af\u30e9\u30b9\u3092\u5b9a\u7fa9\u3067\u304d\u307e\u3059\u3002\nclass Hoge {\n  constructor() {\n    return function(val){\n      console.log(val)\n    }\n  }\n}\n\nnew Hoge()('hi')\n\n\n\u7d99\u627f\nsetPrototypeOf\u3092\u4f7f\u3063\u3066\u3001prototype\u3092\u8a2d\u5b9a\u3057\u307e\u3059\u3002\nclass Fuga {\n  hi(){ console.log('hi') }\n}\nclass Hoge {\n  constructor() {\n    function log(val){\n      console.log(val)\n    }\n    Object.setPrototypeOf(log, new Fuga)\n\n    return log\n  }\n}\n\nnew Hoge().hi()\n\n\n\u611f\u60f3\nclass Fuga {\n  hi(){ console.log('hi') }\n}\nfunction Hoge\n  console.log(val)\n}\nObject.setPrototypeOf(Hoge, new Fuga)\n\n\u306e\u65b9\u304c\u3001\u826f\u3044\u306e\u3067\u306f\uff1f\u3068\u3044\u3046\u6c17\u6301\u3061\u306b\u306a\u308a\u307e\u3059\u3002\n\nFunction\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u3092\u7d99\u627f\nFunction\u3092\u7d99\u627f\u3057\u3066\u3001super\u3067Function\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u3092\u547c\u3073\u51fa\u3059\u3068\u3001\u95a2\u6570\u3092\u3064\u304f\u308c\u307e\u3059\u3002\nclass Hoge extends Function {\n  constructor() {\n    super('val', 'console.log(val)')\n  }\n}\n\n\n\u7d99\u627f\nclass Fuga extends Function {\n  hi(){ console.log('hi') }\n}\nclass Hoge extends Fuga{\n  constructor() {\n    super('val', 'console.log(val)')\n  }\n}\n\n\n\u611f\u60f3\nFunction\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u3092\u4f7f\u3046\u3053\u3068\u306b\u3001\u306a\u305c\u304b\u6050\u6016\u3092\u899a\u3048\u307e\u3059\u3002\n\n\u304a\u307e\u3051\n\nFunction\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u306fSpread operator\u3082\u4f7f\u3048\u308b\nnew Function('...rest', 'console.log(...rest)')\n\n\n\u4e8c\u3064\u306e\u65b9\u6cd5\u304c\u3042\u308a\u307e\u3059\u3002\n\n1. \u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u3067\u95a2\u6570\u3092\u751f\u6210\u3059\u308b\n2. Function\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u3092\u7d99\u627f\u3059\u308b\n\nChrome 50.0.2661.102\u3068Node v6.1.0\u3067\u78ba\u8a8d\u3057\u307e\u3057\u305f\u3002\n\n# \u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u3067\u95a2\u6570\u3092\u751f\u6210\n\nclass\u69cb\u6587\u306econtstructor\u306fretun\u6587\u3067\u3001\u751f\u6210\u3059\u308b\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u4e0a\u66f8\u304d\u3067\u304d\u307e\u3059\u3002\n\nhttp://www.2ality.com/2015/02/es6-classes-final.html\n> Overriding the result of a constructor\n\n> Just like in ES5, you can override the result of a constructor by explicitly returning an object:\n\n    class Foo {\n        constructor() {\n            return Object.create(null);\n        }\n    }\n    console.log(new Foo() instanceof Foo); // false\n> If you do so, it doesn\u2019t matter whether this has been initialized or not. In other words: you don\u2019t have to call super() in a derived constructor if you override the result in this manner.\n\n\u95a2\u6570\u3092\u751f\u6210\u3057\u3066return\u3059\u308c\u3070\u3001\u95a2\u6570\u3092\u8fd4\u3059\u30af\u30e9\u30b9\u3092\u5b9a\u7fa9\u3067\u304d\u307e\u3059\u3002\n\n```js\nclass Hoge {\n  constructor() {\n    return function(val){\n      console.log(val)\n    }\n  }\n}\n```\n\n```\nnew Hoge()('hi')\n```\n\n## \u7d99\u627f\n\n[setPrototypeOf](https://developer.mozilla.org/ja/docs/Web/JavaScript/Reference/Global_Objects/Object/setPrototypeOf)\u3092\u4f7f\u3063\u3066\u3001prototype\u3092\u8a2d\u5b9a\u3057\u307e\u3059\u3002\n\n```js\nclass Fuga {\n  hi(){ console.log('hi') }\n}\nclass Hoge {\n  constructor() {\n    function log(val){\n      console.log(val)\n    }\n    Object.setPrototypeOf(log, new Fuga)\n\n    return log\n  }\n}\n```\n\n```\nnew Hoge().hi()\n```\n\n## \u611f\u60f3\n```js\nclass Fuga {\n  hi(){ console.log('hi') }\n}\nfunction Hoge\n  console.log(val)\n}\nObject.setPrototypeOf(Hoge, new Fuga)\n```\n\n\u306e\u65b9\u304c\u3001\u826f\u3044\u306e\u3067\u306f\uff1f\u3068\u3044\u3046\u6c17\u6301\u3061\u306b\u306a\u308a\u307e\u3059\u3002\n\n# Function\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u3092\u7d99\u627f\n\n[Function](https://developer.mozilla.org/ja/docs/Web/JavaScript/Reference/Global_Objects/Function)\u3092\u7d99\u627f\u3057\u3066\u3001super\u3067Function\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u3092\u547c\u3073\u51fa\u3059\u3068\u3001\u95a2\u6570\u3092\u3064\u304f\u308c\u307e\u3059\u3002\n\n```js\nclass Hoge extends Function {\n  constructor() {\n    super('val', 'console.log(val)')\n  }\n}\n```\n\n## \u7d99\u627f\n\n```js\nclass Fuga extends Function {\n  hi(){ console.log('hi') }\n}\nclass Hoge extends Fuga{\n  constructor() {\n    super('val', 'console.log(val)')\n  }\n}\n```\n\n## \u611f\u60f3\nFunction\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u3092\u4f7f\u3046\u3053\u3068\u306b\u3001\u306a\u305c\u304b\u6050\u6016\u3092\u899a\u3048\u307e\u3059\u3002\n\n# \u304a\u307e\u3051\n\n## Function\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u306f[Spread operator](https://developer.mozilla.org/ja/docs/Web/JavaScript/Reference/Operators/Spread_operator)\u3082\u4f7f\u3048\u308b\n\n```js\nnew Function('...rest', 'console.log(...rest)')\n```\n\n", "tags": ["JavaScript", "es6", "es2015"]}