{"context": "\u3053\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u306e\u539f\u578b\u3092\u66f8\u3044\u305f\u306e\u306f\u968f\u5206\u3068\u6614\u306e\u3053\u3068\u3067\u3059\u3002\u5f53\u6642\u7d20\u6570\u3092\u52c9\u5f37\u3057\u305f\u3044\u3068\u601d\u3063\u3066\u3001\u3053\u306e\u30e1\u30d3\u30a6\u30b9\u95a2\u6570\u306e\u30b3\u30fc\u30c9\u3092\u66f8\u3044\u3066\u307f\u305f\u306e\u3067\u3059\u304c\u3001\u6570\u5b66\u306e\u7d20\u990a\u304c\u6b20\u3051\u3066\u3044\u308b\u50d5\u306b\u306f\u3001\u3053\u306e\u30e1\u30d3\u30a6\u30b9\u95a2\u6570\u304c\u4e00\u4f53\u4f55\u306a\u306e\u304b\u304c\u3001\u30a4\u30de\u30a4\u30c1\u308f\u304b\u3089\u306a\u3044...\u3067\u3082\u305b\u3063\u304b\u304f\u66f8\u3044\u305f\u306e\u3060\u304b\u3089\u3068Web\u30b5\u30a4\u30c8\u306b\u516c\u958b\u3057\u305f\u306e\u304c\u7d047\u5e74\u524d\u3002\u3059\u3053\u3057\u624b\u76f4\u3057\u3057\u3066\u3053\u3053\u306b\u518d\u63b2\u8f09\u3059\u308b\u3053\u3068\u3068\u3057\u307e\u3059\u3002\n\n\u30e1\u30d3\u30a6\u30b9\u95a2\u6570\n\u30e1\u30d3\u30a6\u30b9\u95a2\u6570\u306e\u5b9a\u7fa9\u306f\u3001\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u3082\u306e\u3067\u3059\u3002\n1) \u03bc(1) = 1\n2) \u03bc(n) = 0 \uff08n \u304c\u5e73\u65b9\u56e0\u5b50\u3092\u6301\u3064\uff08\u5e73\u65b9\u6570\u3067\u5272\u308a\u5207\u308c\u308b\uff09\u3068\u304d\uff09\n3) \u03bc(n) = (-1)**k \uff08n \u304c\u76f8\u7570\u306a\u308b k \u500b\u306e\u7d20\u56e0\u6570\u306b\u5206\u89e3\u3055\u308c\u308b\u3068\u304d\uff09\n\u3000\u3000\u3000\u3000\u3000\u3000n \u304c\u76f8\u7570\u306a\u308b\u5076\u6570\u500b\u306e\u7d20\u6570\u306e\u7a4d\u306a\u3089\u3070 \u03bc(n) = 1\n\u3000\u3000\u3000\u3000\u3000\u3000n \u304c\u76f8\u7570\u306a\u308b\u5947\u6570\u500b\u306e\u7d20\u6570\u306e\u7a4d\u306a\u3089\u3070 \u03bc(n) = -1\n\u3000\u3000\u3000\u3000\u3000\u3000**\u306f\u7d2f\u4e57\u3092\u8868\u3059\u3002\n\n\u8a73\u3057\u304f\u306f\u3001Wikipedia(\u30e1\u30d3\u30a6\u30b9\u95a2\u6570)\u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n\nC#\u306e\u30b3\u30fc\u30c9\n\u4e0a\u306e\u5b9a\u7fa9\u3092\u5143\u306b\u30011\u304b\u3089100\u307e\u3067\u306e\u30e1\u30d3\u30a6\u30b9\u95a2\u6570\u306e\u5024\u3092\u6c42\u3081\u308b\u30b3\u30fc\u30c9\u3092\u66f8\u3044\u3066\u307f\u307e\u3057\u305f\u3002\n\nMebius.cs\nusing System;\nusing System.Linq;\n\nnamespace Gushwell.Etude {\n    class Program {\n        static void Main(string[] args) {\n            // 1 - 100 \u307e\u3067\u306e\u30e1\u30d3\u30a6\u30b9\u95a2\u6570\u3092\u6c42\u3081\u308b\n            int upper = 100;\n            Mebius mebius = new Mebius(upper);\n            for (int i = 1; i <= upper; i++) {\n                Console.WriteLine(\"\u03bc({0}) = {1}\", i, mebius[i]);\n            }\n            Console.ReadLine();\n        }\n    }\n    class Mebius {\n        private int[] mebius;\n        public Mebius(int maxnum) {\n            mebius = Enumerable.Repeat(1, maxnum + 1).ToArray();\n            foreach (int p in PrimeNumber.Enumerate().TakeWhile(n => n <= maxnum)) {\n                for (int i = p; i <= maxnum; i += p)\n                    mebius[i] *= -1;\n                int p2 = p * p;\n                for (int pp = p2; pp <= maxnum; pp += p2)\n                    mebius[pp] = 0;\n            }\n        }\n        public int this[int n] {\n            get {\n                return mebius[n];\n            }\n        } \n    }\n}\n\n\n\nPrimeNumber.cs\nusing System;\nusing System.Collections;\nusing System.Collections.Generic;\nusing System.Linq;\n\nnamespace Gushwell.Etude {\n    public static class PrimeNumber {\n\n        public static IEnumerable<int> Enumerate() {\n            // 2,3\u306f\u65e2\u77e5\u306e\u7d20\u6570\u3068\u3059\u308b\n            var primes = new List<int>() { 2, 3 };\n            foreach (var p in primes)\n                yield return p;\n\n            // 4\u4ee5\u4e0a\u306e\u6574\u6570\u304b\u3089\u7d20\u6570\u3092\u5217\u6319\u3059\u308b\u3002int.MaxValue\u3092\u8d85\u3048\u305f\u3068\u304d\u306b\u306f\u5bfe\u51e6\u3057\u3066\u3044\u306a\u3044\n            int ix = 0;\n            while (true) {\n                int prime1st = primes[ix];\n                int prime2nd = primes[++ix];\n                // \u3075\u308b\u3044\u7528\u306e\u914d\u5217\u306e\u4e0b\u9650\u3001\u4e0a\u9650\u3092\u6c42\u3081\u3001\u914d\u5217\u3092\u78ba\u4fdd\u3059\u308b\u3002\n                var lower = prime1st * prime1st;\n                var upper = prime2nd * prime2nd - 1;\n                // \u3075\u308b\u3044\u306f\u3001[4:8], [9:24], [25:48], [49:120]... \u3068\u5909\u5316\u3059\u308b\u3002\n                // []\u5185\u306e\u6570\u5024\u306f\u3001\u914d\u5217\u306e\u4e0b\u9650\u3068\u4e0a\u9650\n                var sieve = new BoundedBoolArray(lower, upper);\n\n                // \u6c42\u307e\u3063\u3066\u3044\u308b\u7d20\u6570\u3092\u4f7f\u3044\u3001\u3075\u308b\u3044\u306b\u639b\u3051\u308b \n                foreach (var prime in primes.Take(ix)) {\n                    var start = (int)Math.Ceiling((double)lower / prime) * prime;\n                    for (int index = start; index <= upper; index += prime)\n                        sieve[index] = true;\n                }\n\n                // \u3075\u308b\u3044\u306b\u639b\u3051\u3089\u308c\u3066\u6b8b\u3063\u305f\u5024\u304c\u7d20\u6570\u3002\u3053\u308c\u3092\u5217\u6319\u3059\u308b\u3002\n                // \u4f75\u305b\u3066\u3001\u6c42\u307e\u3063\u305f\u7d20\u6570\u306f\u3001primes\u30ea\u30b9\u30c8\u306b\u8a18\u61b6\u3057\u3066\u3044\u304f\u3002\n                // \u3053\u306e\u7d20\u6570\u304c\u6b21\u306b\u3075\u308b\u3044\u306b\u639b\u3051\u308b\u969b\u306b\u5229\u7528\u3055\u308c\u308b\u3002\n                for (int i = lower; i <= upper; i++) {\n                    if (sieve[i] == false) {\n                        primes.Add(i);\n                        yield return i;\n                    }\n                }\n            }\n        }\n    }\n\n    // \u4e0b\u9650\u3001\u4e0a\u9650\u304c\u6307\u5b9a\u3067\u304d\u308bbool\u578b\u914d\u5217\n    class BoundedBoolArray {\n        private BitArray _array;\n        private int _lower;\n\n        public BoundedBoolArray(int lower, int upper) {\n            _array = new BitArray(upper - lower + 1);\n            _lower = lower;\n        }\n\n        public bool this[int index] {\n            get {\n                return _array[index - _lower];\n            }\n            set {\n                _array[index - _lower] = value;\n            }\n        }\n    }\n}\n\n\n\n\n\u7c21\u5358\u306a\u89e3\u8aac\n\u307e\u305a\u3001Mebius\u95a2\u6570\u306e\u5024\u3092\u683c\u7d0d\u3059\u308b\u914d\u5217\u3092\u7528\u610f\u3057\u30011\u3067\u521d\u671f\u5316\u3002 \n\u305d\u308c\u304b\u3089\u3001\u30a8\u30e9\u30c8\u30b9\u30c6\u30cd\u30b9\u306e\u3075\u308b\u3044\u3068\u4f3c\u305f\u3084\u308a\u65b9\u3067\u3001\n2,4,6,8,10...\n3,6,9,12,15...\n5,15,20,25,30...\n...\n\n\u306e\u4f4d\u7f6e\u306e\u8981\u7d20\u306b\u3001-1\u3092\u639b\u3051\u3066\u3044\u304d\u307e\u3059\u3002\u3053\u308c\u3067\u3001\n\u3000n \u304c\u76f8\u7570\u306a\u308b\u5076\u6570\u500b\u306e\u7d20\u6570\u306e\u7a4d\u306a\u3089\u3070 \u03bc(n) = 1\n\u3000n \u304c\u76f8\u7570\u306a\u308b\u5947\u6570\u500b\u306e\u7d20\u6570\u306e\u7a4d\u306a\u3089\u3070 \u03bc(n) = -1  \n\u306e\u90e8\u5206\u3092\u6c42\u3081\u307e\u3059\u3002\n\u3055\u3089\u306b\u3001\n4,8,12,16,20...\n9,18,27,36...  \n25,50,75...\n...\n\n\u306e\u8981\u7d20\uff08\u7d20\u6570\u306e\uff12\u4e57\u3067\u5272\u308a\u304d\u308c\u308b\u6570\uff09\u306b\u306f\u30010\u3092\u4ee3\u5165\u3057\u3066\u3001\n\u3000n \u304c\u5e73\u65b9\u56e0\u5b50\u3092\u6301\u3064\uff08\u5e73\u65b9\u6570\u3067\u5272\u308a\u5207\u308c\u308b\uff09\u3068\u304d\u03bc(n) = 0  \n\u3092\u6c42\u3081\u307e\u3059\u3002\n2\u4ee5\u4e0a\u306e\u6570\u3067\u3001\u4e0a\u8a18\u3069\u308c\u306b\u3082\u8a72\u5f53\u3057\u306a\u304b\u3044\u306e\u306f\u3042\u308a\u5f97\u306a\u3044\u306e\u3067\u3001\u914d\u5217\u306e\u3059\u3079\u3066\u306b\u30e1\u30d3\u30a6\u30b9\u95a2\u6570\u306e\u5024\u304c\u8a2d\u5b9a\u3055\u308c\u308b\u3053\u3068\u306b\u306a\u308a\u307e\u3059\u3002\n\u3053\u306eC#\u306e\u30b3\u30fc\u30c9\u3067\u306f\u3001 \u03bc(1), \u03bc(2) \u03bc(3) ... \u306e\u5024\u3092\u5217\u6319\u3059\u308b\u306e\u306f\u306a\u304f\u3001\u6574\u6570n\u3092\u4e0e\u3048\u308b\u3068\u3001\u30e1\u30d3\u30a6\u30b9\u95a2\u6570\u306e\u5024\u304c\u623b\u3063\u3066\u304f\u308b\u3088\u3046\u306a\u3001\u8aad\u307f\u53d6\u308a\u5c02\u7528\u306e\u30a4\u30f3\u30c7\u30af\u30b5\u3092\u5b9a\u7fa9\u3057\u307e\u3057\u305f\u3002\n\u7bc4\u56f2\u30c1\u30a7\u30c3\u30af\u306f\u3084\u3063\u3066\u307e\u305b\u3093\u3002\nvar mebius = new Mebius(100);\nint n = mebius[10];\n\n\u306e\u3088\u3046\u306b\u3057\u3066\u5024\u3092\u5f97\u307e\u3059\u3002\n\u306a\u304a\u3001\u7d20\u6570\u3092\u6c42\u3081\u308bPrimes\u30af\u30e9\u30b9\u306f\u3001\u3053\u3053\u3067\u793a\u3057\u305f\u30e1\u30bd\u30c3\u30c9\u3092\u5143\u306b\u3001\u30af\u30e9\u30b9\u3068\u3057\u3066\u5b9a\u7fa9\u3057\u306a\u304a\u3057\u305f\u3082\u306e\u3067\u3059\u3002\n\n\u5b9f\u884c\u7d50\u679c\u306e\u4e00\u90e8\n\u5b9f\u884c\u7d50\u679c\u306e\u4e00\u90e8\u3092\u63b2\u8f09\u3057\u307e\u3059\u3002\n\u03bc(1) = 1\n\u03bc(2) = -1\n\u03bc(3) = -1\n\u03bc(4) = 0\n\u03bc(5) = -1\n\u03bc(6) = 1\n\u03bc(7) = -1\n\u03bc(8) = 0\n\u03bc(9) = 0\n\u03bc(10) = 1\n\u03bc(11) = -1\n\u03bc(12) = 0\n\u03bc(13) = -1\n\u03bc(14) = 1\n\u03bc(15) = 1\n\u03bc(16) = 0\n\u03bc(17) = -1\n\u03bc(18) = 0\n\u03bc(19) = -1\n\u03bc(20) = 0\n\u03bc(21) = 1\n\n\n\u3053\u306e\u8a18\u4e8b\u306f\u3001Gushwell's C# Programming Page\u3067\u516c\u958b\u3057\u305f\u3082\u306e\u3092\u52a0\u7b46\u30fb\u4fee\u6b63\u3057\u305f\u3082\u306e\u3067\u3059\u3002\n\n\u3053\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u306e\u539f\u578b\u3092\u66f8\u3044\u305f\u306e\u306f\u968f\u5206\u3068\u6614\u306e\u3053\u3068\u3067\u3059\u3002\u5f53\u6642\u7d20\u6570\u3092\u52c9\u5f37\u3057\u305f\u3044\u3068\u601d\u3063\u3066\u3001\u3053\u306e\u30e1\u30d3\u30a6\u30b9\u95a2\u6570\u306e\u30b3\u30fc\u30c9\u3092\u66f8\u3044\u3066\u307f\u305f\u306e\u3067\u3059\u304c\u3001\u6570\u5b66\u306e\u7d20\u990a\u304c\u6b20\u3051\u3066\u3044\u308b\u50d5\u306b\u306f\u3001\u3053\u306e\u30e1\u30d3\u30a6\u30b9\u95a2\u6570\u304c\u4e00\u4f53\u4f55\u306a\u306e\u304b\u304c\u3001\u30a4\u30de\u30a4\u30c1\u308f\u304b\u3089\u306a\u3044...\u3067\u3082\u305b\u3063\u304b\u304f\u66f8\u3044\u305f\u306e\u3060\u304b\u3089\u3068Web\u30b5\u30a4\u30c8\u306b\u516c\u958b\u3057\u305f\u306e\u304c\u7d047\u5e74\u524d\u3002\u3059\u3053\u3057\u624b\u76f4\u3057\u3057\u3066\u3053\u3053\u306b\u518d\u63b2\u8f09\u3059\u308b\u3053\u3068\u3068\u3057\u307e\u3059\u3002\n\n\n##\u30e1\u30d3\u30a6\u30b9\u95a2\u6570\n\n\u30e1\u30d3\u30a6\u30b9\u95a2\u6570\u306e\u5b9a\u7fa9\u306f\u3001\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u3082\u306e\u3067\u3059\u3002\n<pre>1) \u03bc(1) = 1\n2) \u03bc(n) = 0 \uff08n \u304c\u5e73\u65b9\u56e0\u5b50\u3092\u6301\u3064\uff08\u5e73\u65b9\u6570\u3067\u5272\u308a\u5207\u308c\u308b\uff09\u3068\u304d\uff09\n3) \u03bc(n) = (-1)\\*\\*k \uff08n \u304c\u76f8\u7570\u306a\u308b k \u500b\u306e\u7d20\u56e0\u6570\u306b\u5206\u89e3\u3055\u308c\u308b\u3068\u304d\uff09\n\u3000\u3000\u3000\u3000\u3000\u3000n \u304c\u76f8\u7570\u306a\u308b\u5076\u6570\u500b\u306e\u7d20\u6570\u306e\u7a4d\u306a\u3089\u3070 \u03bc(n) = 1\n\u3000\u3000\u3000\u3000\u3000\u3000n \u304c\u76f8\u7570\u306a\u308b\u5947\u6570\u500b\u306e\u7d20\u6570\u306e\u7a4d\u306a\u3089\u3070 \u03bc(n) = -1\n\u3000\u3000\u3000\u3000\u3000\u3000**\u306f\u7d2f\u4e57\u3092\u8868\u3059\u3002</pre>\n\n\u8a73\u3057\u304f\u306f\u3001Wikipedia([\u30e1\u30d3\u30a6\u30b9\u95a2\u6570](https://ja.wikipedia.org/wiki/%E3%83%A1%E3%83%93%E3%82%A6%E3%82%B9%E9%96%A2%E6%95%B0))\u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n\n\n\n## C#\u306e\u30b3\u30fc\u30c9\n\n\u4e0a\u306e\u5b9a\u7fa9\u3092\u5143\u306b\u30011\u304b\u3089100\u307e\u3067\u306e\u30e1\u30d3\u30a6\u30b9\u95a2\u6570\u306e\u5024\u3092\u6c42\u3081\u308b\u30b3\u30fc\u30c9\u3092\u66f8\u3044\u3066\u307f\u307e\u3057\u305f\u3002\n\n\n```csharp:Mebius.cs\nusing System;\nusing System.Linq;\n\nnamespace Gushwell.Etude {\n    class Program {\n        static void Main(string[] args) {\n            // 1 - 100 \u307e\u3067\u306e\u30e1\u30d3\u30a6\u30b9\u95a2\u6570\u3092\u6c42\u3081\u308b\n            int upper = 100;\n            Mebius mebius = new Mebius(upper);\n            for (int i = 1; i <= upper; i++) {\n                Console.WriteLine(\"\u03bc({0}) = {1}\", i, mebius[i]);\n            }\n            Console.ReadLine();\n        }\n    }\n    class Mebius {\n        private int[] mebius;\n        public Mebius(int maxnum) {\n            mebius = Enumerable.Repeat(1, maxnum + 1).ToArray();\n            foreach (int p in PrimeNumber.Enumerate().TakeWhile(n => n <= maxnum)) {\n                for (int i = p; i <= maxnum; i += p)\n                    mebius[i] *= -1;\n                int p2 = p * p;\n                for (int pp = p2; pp <= maxnum; pp += p2)\n                    mebius[pp] = 0;\n            }\n        }\n        public int this[int n] {\n            get {\n                return mebius[n];\n            }\n        } \n    }\n}\n```\n\n```csharp:PrimeNumber.cs\nusing System;\nusing System.Collections;\nusing System.Collections.Generic;\nusing System.Linq;\n\nnamespace Gushwell.Etude {\n    public static class PrimeNumber {\n\n        public static IEnumerable<int> Enumerate() {\n            // 2,3\u306f\u65e2\u77e5\u306e\u7d20\u6570\u3068\u3059\u308b\n            var primes = new List<int>() { 2, 3 };\n            foreach (var p in primes)\n                yield return p;\n\n            // 4\u4ee5\u4e0a\u306e\u6574\u6570\u304b\u3089\u7d20\u6570\u3092\u5217\u6319\u3059\u308b\u3002int.MaxValue\u3092\u8d85\u3048\u305f\u3068\u304d\u306b\u306f\u5bfe\u51e6\u3057\u3066\u3044\u306a\u3044\n            int ix = 0;\n            while (true) {\n                int prime1st = primes[ix];\n                int prime2nd = primes[++ix];\n                // \u3075\u308b\u3044\u7528\u306e\u914d\u5217\u306e\u4e0b\u9650\u3001\u4e0a\u9650\u3092\u6c42\u3081\u3001\u914d\u5217\u3092\u78ba\u4fdd\u3059\u308b\u3002\n                var lower = prime1st * prime1st;\n                var upper = prime2nd * prime2nd - 1;\n                // \u3075\u308b\u3044\u306f\u3001[4:8], [9:24], [25:48], [49:120]... \u3068\u5909\u5316\u3059\u308b\u3002\n                // []\u5185\u306e\u6570\u5024\u306f\u3001\u914d\u5217\u306e\u4e0b\u9650\u3068\u4e0a\u9650\n                var sieve = new BoundedBoolArray(lower, upper);\n\n                // \u6c42\u307e\u3063\u3066\u3044\u308b\u7d20\u6570\u3092\u4f7f\u3044\u3001\u3075\u308b\u3044\u306b\u639b\u3051\u308b \n                foreach (var prime in primes.Take(ix)) {\n                    var start = (int)Math.Ceiling((double)lower / prime) * prime;\n                    for (int index = start; index <= upper; index += prime)\n                        sieve[index] = true;\n                }\n\n                // \u3075\u308b\u3044\u306b\u639b\u3051\u3089\u308c\u3066\u6b8b\u3063\u305f\u5024\u304c\u7d20\u6570\u3002\u3053\u308c\u3092\u5217\u6319\u3059\u308b\u3002\n                // \u4f75\u305b\u3066\u3001\u6c42\u307e\u3063\u305f\u7d20\u6570\u306f\u3001primes\u30ea\u30b9\u30c8\u306b\u8a18\u61b6\u3057\u3066\u3044\u304f\u3002\n                // \u3053\u306e\u7d20\u6570\u304c\u6b21\u306b\u3075\u308b\u3044\u306b\u639b\u3051\u308b\u969b\u306b\u5229\u7528\u3055\u308c\u308b\u3002\n                for (int i = lower; i <= upper; i++) {\n                    if (sieve[i] == false) {\n                        primes.Add(i);\n                        yield return i;\n                    }\n                }\n            }\n        }\n    }\n\n    // \u4e0b\u9650\u3001\u4e0a\u9650\u304c\u6307\u5b9a\u3067\u304d\u308bbool\u578b\u914d\u5217\n    class BoundedBoolArray {\n        private BitArray _array;\n        private int _lower;\n\n        public BoundedBoolArray(int lower, int upper) {\n            _array = new BitArray(upper - lower + 1);\n            _lower = lower;\n        }\n\n        public bool this[int index] {\n            get {\n                return _array[index - _lower];\n            }\n            set {\n                _array[index - _lower] = value;\n            }\n        }\n    }\n}\n\n```\n\n##\u7c21\u5358\u306a\u89e3\u8aac\n\n\u307e\u305a\u3001Mebius\u95a2\u6570\u306e\u5024\u3092\u683c\u7d0d\u3059\u308b\u914d\u5217\u3092\u7528\u610f\u3057\u30011\u3067\u521d\u671f\u5316\u3002 \n\u305d\u308c\u304b\u3089\u3001\u30a8\u30e9\u30c8\u30b9\u30c6\u30cd\u30b9\u306e\u3075\u308b\u3044\u3068\u4f3c\u305f\u3084\u308a\u65b9\u3067\u3001\n\n<pre>\n2,4,6,8,10...\n3,6,9,12,15...\n5,15,20,25,30...\n...\n</pre>\n\n\u306e\u4f4d\u7f6e\u306e\u8981\u7d20\u306b\u3001-1\u3092\u639b\u3051\u3066\u3044\u304d\u307e\u3059\u3002\u3053\u308c\u3067\u3001\n\n\u3000n \u304c\u76f8\u7570\u306a\u308b\u5076\u6570\u500b\u306e\u7d20\u6570\u306e\u7a4d\u306a\u3089\u3070 \u03bc(n) = 1\n\u3000n \u304c\u76f8\u7570\u306a\u308b\u5947\u6570\u500b\u306e\u7d20\u6570\u306e\u7a4d\u306a\u3089\u3070 \u03bc(n) = -1  \n\n\u306e\u90e8\u5206\u3092\u6c42\u3081\u307e\u3059\u3002\n\n\u3055\u3089\u306b\u3001\n\n<pre>\n4,8,12,16,20...\n9,18,27,36...  \n25,50,75...\n...\n</pre>\n\n\u306e\u8981\u7d20\uff08\u7d20\u6570\u306e\uff12\u4e57\u3067\u5272\u308a\u304d\u308c\u308b\u6570\uff09\u306b\u306f\u30010\u3092\u4ee3\u5165\u3057\u3066\u3001\n\n\u3000n \u304c\u5e73\u65b9\u56e0\u5b50\u3092\u6301\u3064\uff08\u5e73\u65b9\u6570\u3067\u5272\u308a\u5207\u308c\u308b\uff09\u3068\u304d\u03bc(n) = 0  \n\n\u3092\u6c42\u3081\u307e\u3059\u3002\n\n2\u4ee5\u4e0a\u306e\u6570\u3067\u3001\u4e0a\u8a18\u3069\u308c\u306b\u3082\u8a72\u5f53\u3057\u306a\u304b\u3044\u306e\u306f\u3042\u308a\u5f97\u306a\u3044\u306e\u3067\u3001\u914d\u5217\u306e\u3059\u3079\u3066\u306b\u30e1\u30d3\u30a6\u30b9\u95a2\u6570\u306e\u5024\u304c\u8a2d\u5b9a\u3055\u308c\u308b\u3053\u3068\u306b\u306a\u308a\u307e\u3059\u3002\n\n\u3053\u306eC#\u306e\u30b3\u30fc\u30c9\u3067\u306f\u3001 \u03bc(1), \u03bc(2) \u03bc(3) ... \u306e\u5024\u3092\u5217\u6319\u3059\u308b\u306e\u306f\u306a\u304f\u3001\u6574\u6570n\u3092\u4e0e\u3048\u308b\u3068\u3001\u30e1\u30d3\u30a6\u30b9\u95a2\u6570\u306e\u5024\u304c\u623b\u3063\u3066\u304f\u308b\u3088\u3046\u306a\u3001\u8aad\u307f\u53d6\u308a\u5c02\u7528\u306e\u30a4\u30f3\u30c7\u30af\u30b5\u3092\u5b9a\u7fa9\u3057\u307e\u3057\u305f\u3002\n\u7bc4\u56f2\u30c1\u30a7\u30c3\u30af\u306f\u3084\u3063\u3066\u307e\u305b\u3093\u3002\n\n\n```csharp\nvar mebius = new Mebius(100);\nint n = mebius[10];\n```\n\u306e\u3088\u3046\u306b\u3057\u3066\u5024\u3092\u5f97\u307e\u3059\u3002\n\n\u306a\u304a\u3001\u7d20\u6570\u3092\u6c42\u3081\u308bPrimes\u30af\u30e9\u30b9\u306f\u3001[\u3053\u3053](http://qiita.com/gushwell/items/6370e32371e983358519)\u3067\u793a\u3057\u305f\u30e1\u30bd\u30c3\u30c9\u3092\u5143\u306b\u3001\u30af\u30e9\u30b9\u3068\u3057\u3066\u5b9a\u7fa9\u3057\u306a\u304a\u3057\u305f\u3082\u306e\u3067\u3059\u3002\n\n\n## \u5b9f\u884c\u7d50\u679c\u306e\u4e00\u90e8\n\n\u5b9f\u884c\u7d50\u679c\u306e\u4e00\u90e8\u3092\u63b2\u8f09\u3057\u307e\u3059\u3002\n\n    \u03bc(1) = 1\n    \u03bc(2) = -1\n    \u03bc(3) = -1\n    \u03bc(4) = 0\n    \u03bc(5) = -1\n    \u03bc(6) = 1\n    \u03bc(7) = -1\n    \u03bc(8) = 0\n    \u03bc(9) = 0\n    \u03bc(10) = 1\n    \u03bc(11) = -1\n    \u03bc(12) = 0\n    \u03bc(13) = -1\n    \u03bc(14) = 1\n    \u03bc(15) = 1\n    \u03bc(16) = 0\n    \u03bc(17) = -1\n    \u03bc(18) = 0\n    \u03bc(19) = -1\n    \u03bc(20) = 0\n    \u03bc(21) = 1\n\n------------------\n\u3053\u306e\u8a18\u4e8b\u306f\u3001Gushwell's C# Programming Page\u3067\u516c\u958b\u3057\u305f\u3082\u306e\u3092\u52a0\u7b46\u30fb\u4fee\u6b63\u3057\u305f\u3082\u306e\u3067\u3059\u3002\n\n", "tags": ["\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0", "C#", "C#\u5c0f\u54c1\u96c6\u30b7\u30ea\u30fc\u30b9"]}