{"context": "Android Things\u306eUser-Space Drivers\u304c\u3044\u307e\u3072\u3068\u3064\u3074\u3093\u3068\u3053\u306a\u304b\u3063\u305f\u306e\u3067\u3001\u30b5\u30f3\u30d7\u30eb\u306esample-button\u3092\u3001\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u306e\u30b3\u30fc\u30c9\u4f8b\u306e\u3088\u3046\u306bService\u3067\u5b9f\u88c5\u3057\u306a\u304c\u3089\u307e\u3068\u3081\u305f\u30e1\u30e2\u3002\n\nUser Driver\u3068\u3057\u3066\u5b9f\u88c5\u3059\u308b\u3053\u3068\u306e\u5229\u70b9\n\u307b\u3068\u3093\u3069\u306e\u30a2\u30d7\u30ea\u306f\u3001Peripheral I/O\u3092\u4f7f\u3063\u3066\u76f4\u63a5H/W\u3068\u3084\u308a\u3068\u308a\u3059\u308b\u3060\u3051\u3067\u8db3\u308a\u308b\u306e\u3067\u3001User Driver\u3068\u3057\u3066\u5c40\u6240\u5316\u3057\u3001Android Framework\u3092\u4ecb\u3059\u308b\u307e\u3067\u3082\u306a\u3044\u3002\u3057\u304b\u3057\u3001\u53ef\u642c\u6027\u30fb\u518d\u5229\u7528\u6027\u30fb\u7d71\u5408\u6027\u3092\u9ad8\u3081\u305f\u304b\u3063\u305f\u3089User Driver\u3068\u3057\u3066\u5b9f\u88c5\u3057\u305f\u307b\u3046\u304c\u3088\u3044\u3001\u3068\u3044\u3046\u3053\u3068\u3002\n\nUser Driver\u30bf\u30a4\u30d7\nUser Driver API\u304c\u5bfe\u8c61\u3068\u3057\u3066\u3044\u308b\u306e\u306f\u3001GPS\u3001\u30ad\u30fc\u30dc\u30fc\u30c9\u306a\u3069Human Interface Devices(HID)\u3001\u30bb\u30f3\u30b5\u30fc\u306e3\u7a2e\u985e\u306e\u5165\u529b\u30c7\u30d0\u30a4\u30b9\u3002drivers-samples\u306e\u4e2d\u306eSegment display sample\u304c\u4f7f\u7528\u3057\u3066\u3044\u308bht16k33\u30c7\u30a3\u30b9\u30d7\u30ec\u30a4\u30c9\u30e9\u30a4\u30d0\u306a\u3069\u306e\u51fa\u529b\u30c7\u30d0\u30a4\u30b9\u30c9\u30e9\u30a4\u30d0\u3092\u5e83\u7fa9\u306b\uff08\u3042\u308b\u3044\u306f\u6df7\u540c\u3057\u3066\uff09User Driver\u3068\u547c\u3076\u3053\u3068\u306f\u3042\u308b\u304b\u3082\u3057\u308c\u306a\u3044\u304c\u3001\u5c11\u306a\u304f\u3068\u3082API\u306e\u5bfe\u8c61\u3067\u306f\u306a\u3044\u3002\n\n\n\ncom.google.android.things.userdriver\u30d1\u30c3\u30b1\u30fc\u30b8\u30af\u30e9\u30b9\n\n\n\n\nGpsDriver\n\n\nInputDriver\n\n\nInputDriver.Builder\n\n\nUserDriverManager\n\n\nUserSensor\n\n\nUserSensor.Builder\n\n\nUserSensorDriver\n\n\nUserSensorReading\n\n\n\n\u305f\u3060\u3057\u3001\u51fa\u529b\u30c7\u30d0\u30a4\u30b9\u3082\u5165\u529b\u30c7\u30d0\u30a4\u30b9\u540c\u69d8\u306bService\u306a\u3069\u306b\u96a0\u853d\u3057\u3066\u758e\u7d50\u5408\u3068\u3057\u3001\u53ef\u642c\u6027\u3092\u9ad8\u3081\u308b\u3053\u3068\u306f\u53ef\u80fd\u3067\u3042\u308a\u3001\u5b9f\u969b\u306b\u30b5\u30f3\u30d7\u30eb\u306eLED\u30c9\u30e9\u30a4\u30d0\u3092Service\u5316\u3057\u3066\u307f\u305f\u3002\n\n\u5b9f\u88c5\u4f8b\nGPS/HID/\u30bb\u30f3\u30b5\u30fc\u3068\u3082\u306b\u30d1\u30bf\u30fc\u30f3\u306f\u540c\u3058\u3002\u5c1a\u3001\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u306e\u30b3\u30fc\u30c9\u4f8b\u306fService\u3092\u4f7f\u7528\u3057\u3066\u3044\u308b\u304c\u3001\u30b5\u30f3\u30d7\u30eb\u306econtrib-drivers\u3067\u306f\u4f7f\u7528\u3057\u3066\u304a\u3089\u305a\u3001\u5fc5\u9808\u3068\u3044\u3046\u308f\u3051\u3067\u306f\u306a\u3044\u3002\u524d\u8ff0\u306e\u901a\u308aService\u3092\u4f7f\u7528\u3057\u305f\u307b\u3046\u304c\u82e5\u5e72\u7d50\u5408\u5ea6\u304c\u5f31\u3044\u3068\u601d\u3046\u304c\u3001\u3053\u306e\u3042\u305f\u308a\u306f\u30b1\u30fc\u30b9\u30d0\u30a4\u30b1\u30fc\u30b9\u3067\u4f7f\u3044\u5206\u3051\u308c\u3070\u3088\u3044\u3060\u308d\u3046\u3002\n\nUser Driver\u5074\n\u3068\u3044\u3063\u3066\u3082\u3001\u5f80\u3005\u306b\u3057\u3066\u30a2\u30d7\u30ea\u3068\u540c\u68b1\u306a\u306e\u3067\u3001\u30a2\u30d7\u30ea\u4e0b\u4f4d\u5074\u3068\u3067\u3082\u3044\u3046\u3079\u304d\u304b\u3002\n1) \u958b\u59cb\u6642\u306b\u30c9\u30e9\u30a4\u30d0\u3092\u751f\u6210\u3057\u3001UserDriverManager\u306b\u767b\u9332\u3059\u308b\u3002\n\nGPS\u306f\u3001GpsDriver\u3092\u751f\u6210\u3057\u767b\u9332\u3059\u308b\u3002\n\n    private GpsDriver mDriver;\n...\n    mDriver = new GpsDriver();\n    UserDriverManager.getManager().registerGpsDriver(mDriver);\n\n\nHID\u306f\u3001\u30d3\u30eb\u30c0\u30fc\u3092\u4f7f\u3063\u3066InputDriver\u3092\u751f\u6210\u3057\u3001\u767b\u9332\u3059\u308b\u3002\n\n    private InputDriver mDriver;\n...\n    mDriver = InputDriver.builder(InputDevice.SOURCE_CLASS_BUTTON)\n                .setName(DRIVER_NAME)\n                .setVersion(DRIVER_VERSION)\n                .setKeys(new int[] {KEY_CODE})\n                .build();\n    UserDriverManager.getManager().registerInputDriver(mDriver);\n\n\n\u30bb\u30f3\u30b5\u30fc\u306f\u3001UserSensorDriver\u306e\u7d99\u627f\u30af\u30e9\u30b9\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u751f\u6210\u3057\u3001\u30d3\u30eb\u30c0\u30fc\u3092\u4f7f\u3063\u305fUserSensor\u751f\u6210\u6642\u306b\u6e21\u3057\u3001UserSensor\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u767b\u9332\u3059\u308b\u3002\n\n    private UserSensorDriver mDriver = new UserSensorDriver() {};\n    private UserSensor mSensor;\n...\n    mSensor = UserSensor.builder()\n        .setName(\"GroveAccelerometer\")\n        .setVendor(\"Seeed\")\n        .setType(Sensor.TYPE_ACCELEROMETER)\n        .setDriver(mDriver)\n        .build();\n    UserDriverManager.getManager().registerSensor(mSensor);\n\n2) \u30c8\u30ea\u30ac\u30fc\u767a\u751f\u6642\u3082\u3057\u304f\u306f\u5b9a\u671f\u7684\u306bH/W\u30a4\u30d9\u30f3\u30c8\u3092\u6ce8\u5165\u3059\u308b\u3002\n\nGPS\u306f\u3001\u30d5\u30ec\u30fc\u30e0\u5468\u671f\u3054\u3068\u306bLocation\u30a4\u30d9\u30f3\u30c8\u3092\u9001\u308b\u3002\n\n    mDriver.reportLocation(mLastKnownLocation);\n\n\nHID\u306f\u3001\u76e3\u8996\u3057\u3066\u3044\u308b\u30dd\u30fc\u30c8\u306e\u7acb\u3061\u4e0a\u304c\u308a\uff08\u7acb\u3061\u4e0b\u304c\u308a\uff09\u3092\u691c\u77e5\u3057\u3001\u30a4\u30d9\u30f3\u30c8\u3092\u767a\u3059\u308b\u3002\n\n    int action = pressed ? KeyEvent.ACTION_DOWN : KeyEvent.ACTION_UP;\n    KeyEvent[] events = new KeyEvent[] {new KeyEvent(action, KEY_CODE)};\n    mDriver.emit(events);\n\n\n\u30bb\u30f3\u30b5\u30fc\u306f\u3001UserSensorDriver#read\u304c\u30b3\u30fc\u30eb\u30d0\u30c3\u30af\u3055\u308c\u305f\u3068\u304d\u306b\u3001\u30bb\u30f3\u30b5\u30fc\u30c7\u30d0\u30a4\u30b9\u304b\u3089\u30c7\u30fc\u30bf\u3092\u8aad\u307f\u8fbc\u3093\u3067\u5024\u3092\u8fd4\u3059\u3002\n\nUserSensorDriver mDriver = new UserSensorDriver() {\n    // Sensor data values\n    float x, y, z;\n\n    @Override\n    public UserSensorReading read() {\n        try {\n            // ...read the sensor hardware...\n\n            // Return a new reading\n            return new UserSensorReading(new float[]{x, y, z});\n        } (catch Exception e) {\n            // Error occurred reading the sensor hardware\n            throw new IOException(\"Unable to read sensor\");\n        }\n    }\n};\n\n3) \u7d42\u4e86\u6642\u306bUserDriverManager\u306e\u767b\u9332\u3092\u89e3\u9664\u3059\u308b\u3002\n\nGPS\n\n    UserDriverManager.getManager().unregisterGpsDriver(mDriver);\n\n\nHID\n\n    UserDriverManager.getManager().unregisterInputDriver(mDriver);\n\n\n\u30bb\u30f3\u30b5\u30fc\n\n    UserDriverManager.getManager().unregisterSensor(mSensor);\n\n\n\u30a2\u30d7\u30ea\u5074\n1) \u958b\u59cb\u6642\u306b\u30b5\u30fc\u30d3\u30b9\u3092\u8d77\u52d5\u3059\u308b\u3002\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n\n        startService(new Intent(this, YourDriverService.class));\n    }\n\n2) \u30b3\u30fc\u30eb\u30d0\u30c3\u30af\u3067\u30a4\u30d9\u30f3\u30c8\u3092\u53d7\u4fe1\u3059\u308b\u3002\n\nGPS\u306f\u3001LocationListener\u3067\u53d7\u4fe1\u3059\u308b\u3002\n\n    LocationManager locationManager = (LocationManager) getSystemService(LOCATION_SERVICE);\n    locationManager.requestLocationUpdates(LocationManager.GPS_PROVIDER,\n                    0, 0, new LocationListener() {\n        @Override\n        public void onLocationChanged(Location location) { }\n\n        @Override\n        public void onStatusChanged(String provider, int status, Bundle extras) { }\n\n        @Override\n        public void onProviderEnabled(String provider) { }\n\n        @Override\n        public void onProviderDisabled(String provider) { }\n    });\n\n\n\nHID\u306f\u3001\u5f53\u8a72\u30e1\u30bd\u30c3\u30c9\u3067\u53d7\u4fe1\u3059\u308b\u3002\u4ee5\u4e0b\u306f\u30ad\u30fc\u306e\u5834\u5408\u3002\n\n    public boolean onKeyDown(int keyCode, KeyEvent event) {\n        return super.onKeyDown(keyCode, event);\n    }\n\n    public boolean onKeyUp(int keyCode, KeyEvent event) {\n        return super.onKeyUp(keyCode, event);\n    }\n\n\n\u30bb\u30f3\u30b5\u30fc\u306f\u3001SensorEventListener\u3067\u53d7\u4fe1\u3059\u308b\u3002\n\n    SensorManager sensorManager = (SensorManager) getSystemService(Context.SENSOR_SERVICE);\n    sensorManager.registerDynamicSensorCallback(new SensorManager.DynamicSensorCallback() {\n        @Override\n        public void onDynamicSensorConnected(Sensor sensor) {\n            if (sensor.getType() == Sensor.TYPE_AMBIENT_TEMPERATURE) {\n                sensorManager.registerListener(new SensorEventListener() {\n                    @Override\n                    public void onSensorChanged(SensorEvent event) { }\n\n                    @Override\n                    public void onAccuracyChanged(Sensor sensor, int accuracy) { }\n                }, sensor, SensorManager.SENSOR_DELAY_NORMAL);\n            }\n        }\n    });\n\n3) \u7d42\u4e86\u6642\u306b\u30b5\u30fc\u30d3\u30b9\u3092\u505c\u6b62\u3059\u308b\u3002\n    protected void onDestroy(){\n        super.onDestroy();\n\n        stopService(new Intent(this, YourDriverService.class));\n    }\n\nService\u5316\u3057\u305f\u30bd\u30fc\u30b9\u306f\u3053\u3053\u306b\u3042\u308a\u307e\u3059\u3002\nhttps://github.com/tatsu/sample-button\n[Android Things](https://developer.android.com/things/index.html)\u306e[User-Space Drivers](https://developer.android.com/things/sdk/drivers/index.html)\u304c\u3044\u307e\u3072\u3068\u3064\u3074\u3093\u3068\u3053\u306a\u304b\u3063\u305f\u306e\u3067\u3001\u30b5\u30f3\u30d7\u30eb\u306e[sample-button](https://github.com/androidthings/sample-button)\u3092\u3001\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u306e\u30b3\u30fc\u30c9\u4f8b\u306e\u3088\u3046\u306bService\u3067\u5b9f\u88c5\u3057\u306a\u304c\u3089\u307e\u3068\u3081\u305f\u30e1\u30e2\u3002\n\n## User Driver\u3068\u3057\u3066\u5b9f\u88c5\u3059\u308b\u3053\u3068\u306e\u5229\u70b9\n\n\u307b\u3068\u3093\u3069\u306e\u30a2\u30d7\u30ea\u306f\u3001[Peripheral I/O](https://developer.android.com/things/sdk/pio/index.html)\u3092\u4f7f\u3063\u3066\u76f4\u63a5H/W\u3068\u3084\u308a\u3068\u308a\u3059\u308b\u3060\u3051\u3067\u8db3\u308a\u308b\u306e\u3067\u3001User Driver\u3068\u3057\u3066\u5c40\u6240\u5316\u3057\u3001Android Framework\u3092\u4ecb\u3059\u308b\u307e\u3067\u3082\u306a\u3044\u3002\u3057\u304b\u3057\u3001\u53ef\u642c\u6027\u30fb\u518d\u5229\u7528\u6027\u30fb\u7d71\u5408\u6027\u3092\u9ad8\u3081\u305f\u304b\u3063\u305f\u3089User Driver\u3068\u3057\u3066\u5b9f\u88c5\u3057\u305f\u307b\u3046\u304c\u3088\u3044\u3001\u3068\u3044\u3046\u3053\u3068\u3002\n\n## User Driver\u30bf\u30a4\u30d7\n\nUser Driver API\u304c\u5bfe\u8c61\u3068\u3057\u3066\u3044\u308b\u306e\u306f\u3001[GPS](https://developer.android.com/things/sdk/drivers/gps.html)\u3001\u30ad\u30fc\u30dc\u30fc\u30c9\u306a\u3069[Human Interface Devices(HID)](https://developer.android.com/things/sdk/drivers/input.html)\u3001[\u30bb\u30f3\u30b5\u30fc](https://developer.android.com/things/sdk/drivers/sensors.html)\u306e3\u7a2e\u985e\u306e\u5165\u529b\u30c7\u30d0\u30a4\u30b9\u3002[drivers-samples](https://github.com/androidthings/drivers-samples/tree/master/ht16k33)\u306e\u4e2d\u306eSegment display sample\u304c\u4f7f\u7528\u3057\u3066\u3044\u308bht16k33\u30c7\u30a3\u30b9\u30d7\u30ec\u30a4\u30c9\u30e9\u30a4\u30d0\u306a\u3069\u306e\u51fa\u529b\u30c7\u30d0\u30a4\u30b9\u30c9\u30e9\u30a4\u30d0\u3092\u5e83\u7fa9\u306b\uff08\u3042\u308b\u3044\u306f\u6df7\u540c\u3057\u3066\uff09User Driver\u3068\u547c\u3076\u3053\u3068\u306f\u3042\u308b\u304b\u3082\u3057\u308c\u306a\u3044\u304c\u3001\u5c11\u306a\u304f\u3068\u3082API\u306e\u5bfe\u8c61\u3067\u306f\u306a\u3044\u3002\n\n|com.google.android.things.userdriver\u30d1\u30c3\u30b1\u30fc\u30b8\u30af\u30e9\u30b9|\n|:--|\n|GpsDriver|\n|InputDriver|\n|InputDriver.Builder|\n|UserDriverManager|\n|UserSensor|\n|UserSensor.Builder|\n|UserSensorDriver|\n|UserSensorReading|\n\n\u305f\u3060\u3057\u3001\u51fa\u529b\u30c7\u30d0\u30a4\u30b9\u3082\u5165\u529b\u30c7\u30d0\u30a4\u30b9\u540c\u69d8\u306bService\u306a\u3069\u306b\u96a0\u853d\u3057\u3066\u758e\u7d50\u5408\u3068\u3057\u3001\u53ef\u642c\u6027\u3092\u9ad8\u3081\u308b\u3053\u3068\u306f\u53ef\u80fd\u3067\u3042\u308a\u3001\u5b9f\u969b\u306b\u30b5\u30f3\u30d7\u30eb\u306eLED\u30c9\u30e9\u30a4\u30d0\u3092Service\u5316\u3057\u3066\u307f\u305f\u3002\n\n## \u5b9f\u88c5\u4f8b\n\nGPS/HID/\u30bb\u30f3\u30b5\u30fc\u3068\u3082\u306b\u30d1\u30bf\u30fc\u30f3\u306f\u540c\u3058\u3002\u5c1a\u3001\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u306e\u30b3\u30fc\u30c9\u4f8b\u306fService\u3092\u4f7f\u7528\u3057\u3066\u3044\u308b\u304c\u3001\u30b5\u30f3\u30d7\u30eb\u306e[contrib-drivers](https://github.com/androidthings/contrib-drivers)\u3067\u306f\u4f7f\u7528\u3057\u3066\u304a\u3089\u305a\u3001\u5fc5\u9808\u3068\u3044\u3046\u308f\u3051\u3067\u306f\u306a\u3044\u3002\u524d\u8ff0\u306e\u901a\u308aService\u3092\u4f7f\u7528\u3057\u305f\u307b\u3046\u304c\u82e5\u5e72\u7d50\u5408\u5ea6\u304c\u5f31\u3044\u3068\u601d\u3046\u304c\u3001\u3053\u306e\u3042\u305f\u308a\u306f\u30b1\u30fc\u30b9\u30d0\u30a4\u30b1\u30fc\u30b9\u3067\u4f7f\u3044\u5206\u3051\u308c\u3070\u3088\u3044\u3060\u308d\u3046\u3002\n\n### User Driver\u5074\n\n\u3068\u3044\u3063\u3066\u3082\u3001\u5f80\u3005\u306b\u3057\u3066\u30a2\u30d7\u30ea\u3068\u540c\u68b1\u306a\u306e\u3067\u3001\u30a2\u30d7\u30ea\u4e0b\u4f4d\u5074\u3068\u3067\u3082\u3044\u3046\u3079\u304d\u304b\u3002\n\n1) \u958b\u59cb\u6642\u306b\u30c9\u30e9\u30a4\u30d0\u3092\u751f\u6210\u3057\u3001UserDriverManager\u306b\u767b\u9332\u3059\u308b\u3002\n\n- GPS\u306f\u3001GpsDriver\u3092\u751f\u6210\u3057\u767b\u9332\u3059\u308b\u3002\n\n```\n    private GpsDriver mDriver;\n...\n    mDriver = new GpsDriver();\n    UserDriverManager.getManager().registerGpsDriver(mDriver);\n```\n\n- HID\u306f\u3001\u30d3\u30eb\u30c0\u30fc\u3092\u4f7f\u3063\u3066InputDriver\u3092\u751f\u6210\u3057\u3001\u767b\u9332\u3059\u308b\u3002\n\n```\n    private InputDriver mDriver;\n...\n    mDriver = InputDriver.builder(InputDevice.SOURCE_CLASS_BUTTON)\n                .setName(DRIVER_NAME)\n                .setVersion(DRIVER_VERSION)\n                .setKeys(new int[] {KEY_CODE})\n                .build();\n    UserDriverManager.getManager().registerInputDriver(mDriver);\n```\n\n- \u30bb\u30f3\u30b5\u30fc\u306f\u3001UserSensorDriver\u306e\u7d99\u627f\u30af\u30e9\u30b9\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u751f\u6210\u3057\u3001\u30d3\u30eb\u30c0\u30fc\u3092\u4f7f\u3063\u305fUserSensor\u751f\u6210\u6642\u306b\u6e21\u3057\u3001UserSensor\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u767b\u9332\u3059\u308b\u3002\n\n```\n    private UserSensorDriver mDriver = new UserSensorDriver() {};\n    private UserSensor mSensor;\n...\n    mSensor = UserSensor.builder()\n        .setName(\"GroveAccelerometer\")\n        .setVendor(\"Seeed\")\n        .setType(Sensor.TYPE_ACCELEROMETER)\n        .setDriver(mDriver)\n        .build();\n    UserDriverManager.getManager().registerSensor(mSensor);\n```\n\n2) \u30c8\u30ea\u30ac\u30fc\u767a\u751f\u6642\u3082\u3057\u304f\u306f\u5b9a\u671f\u7684\u306bH/W\u30a4\u30d9\u30f3\u30c8\u3092\u6ce8\u5165\u3059\u308b\u3002\n\n- GPS\u306f\u3001\u30d5\u30ec\u30fc\u30e0\u5468\u671f\u3054\u3068\u306bLocation\u30a4\u30d9\u30f3\u30c8\u3092\u9001\u308b\u3002\n\n```\n    mDriver.reportLocation(mLastKnownLocation);\n```\n\n- HID\u306f\u3001\u76e3\u8996\u3057\u3066\u3044\u308b\u30dd\u30fc\u30c8\u306e\u7acb\u3061\u4e0a\u304c\u308a\uff08\u7acb\u3061\u4e0b\u304c\u308a\uff09\u3092\u691c\u77e5\u3057\u3001\u30a4\u30d9\u30f3\u30c8\u3092\u767a\u3059\u308b\u3002\n\n```\n    int action = pressed ? KeyEvent.ACTION_DOWN : KeyEvent.ACTION_UP;\n    KeyEvent[] events = new KeyEvent[] {new KeyEvent(action, KEY_CODE)};\n    mDriver.emit(events);\n```\n\n- \u30bb\u30f3\u30b5\u30fc\u306f\u3001UserSensorDriver#read\u304c\u30b3\u30fc\u30eb\u30d0\u30c3\u30af\u3055\u308c\u305f\u3068\u304d\u306b\u3001\u30bb\u30f3\u30b5\u30fc\u30c7\u30d0\u30a4\u30b9\u304b\u3089\u30c7\u30fc\u30bf\u3092\u8aad\u307f\u8fbc\u3093\u3067\u5024\u3092\u8fd4\u3059\u3002\n\n```\nUserSensorDriver mDriver = new UserSensorDriver() {\n    // Sensor data values\n    float x, y, z;\n\n    @Override\n    public UserSensorReading read() {\n        try {\n            // ...read the sensor hardware...\n\n            // Return a new reading\n            return new UserSensorReading(new float[]{x, y, z});\n        } (catch Exception e) {\n            // Error occurred reading the sensor hardware\n            throw new IOException(\"Unable to read sensor\");\n        }\n    }\n};\n```\n\n3) \u7d42\u4e86\u6642\u306bUserDriverManager\u306e\u767b\u9332\u3092\u89e3\u9664\u3059\u308b\u3002\n\n- GPS\n\n```\n    UserDriverManager.getManager().unregisterGpsDriver(mDriver);\n```\n\n- HID\n\n```\n    UserDriverManager.getManager().unregisterInputDriver(mDriver);\n```\n\n- \u30bb\u30f3\u30b5\u30fc\n\n```\n    UserDriverManager.getManager().unregisterSensor(mSensor);\n```\n\n### \u30a2\u30d7\u30ea\u5074\n\n1) \u958b\u59cb\u6642\u306b\u30b5\u30fc\u30d3\u30b9\u3092\u8d77\u52d5\u3059\u308b\u3002\n\n```\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n\n        startService(new Intent(this, YourDriverService.class));\n    }\n```\n\n2) \u30b3\u30fc\u30eb\u30d0\u30c3\u30af\u3067\u30a4\u30d9\u30f3\u30c8\u3092\u53d7\u4fe1\u3059\u308b\u3002\n\n- GPS\u306f\u3001LocationListener\u3067\u53d7\u4fe1\u3059\u308b\u3002\n\n```\n    LocationManager locationManager = (LocationManager) getSystemService(LOCATION_SERVICE);\n    locationManager.requestLocationUpdates(LocationManager.GPS_PROVIDER,\n                    0, 0, new LocationListener() {\n        @Override\n        public void onLocationChanged(Location location) { }\n\n        @Override\n        public void onStatusChanged(String provider, int status, Bundle extras) { }\n\n        @Override\n        public void onProviderEnabled(String provider) { }\n\n        @Override\n        public void onProviderDisabled(String provider) { }\n    });\n\n```\n\n- HID\u306f\u3001\u5f53\u8a72\u30e1\u30bd\u30c3\u30c9\u3067\u53d7\u4fe1\u3059\u308b\u3002\u4ee5\u4e0b\u306f\u30ad\u30fc\u306e\u5834\u5408\u3002\n\n```\n    public boolean onKeyDown(int keyCode, KeyEvent event) {\n        return super.onKeyDown(keyCode, event);\n    }\n\n    public boolean onKeyUp(int keyCode, KeyEvent event) {\n        return super.onKeyUp(keyCode, event);\n    }\n```\n\n- \u30bb\u30f3\u30b5\u30fc\u306f\u3001SensorEventListener\u3067\u53d7\u4fe1\u3059\u308b\u3002\n\n```\n    SensorManager sensorManager = (SensorManager) getSystemService(Context.SENSOR_SERVICE);\n    sensorManager.registerDynamicSensorCallback(new SensorManager.DynamicSensorCallback() {\n        @Override\n        public void onDynamicSensorConnected(Sensor sensor) {\n            if (sensor.getType() == Sensor.TYPE_AMBIENT_TEMPERATURE) {\n                sensorManager.registerListener(new SensorEventListener() {\n                    @Override\n                    public void onSensorChanged(SensorEvent event) { }\n\n                    @Override\n                    public void onAccuracyChanged(Sensor sensor, int accuracy) { }\n                }, sensor, SensorManager.SENSOR_DELAY_NORMAL);\n            }\n        }\n    });\n```\n\n3) \u7d42\u4e86\u6642\u306b\u30b5\u30fc\u30d3\u30b9\u3092\u505c\u6b62\u3059\u308b\u3002\n\n```\n    protected void onDestroy(){\n        super.onDestroy();\n\n        stopService(new Intent(this, YourDriverService.class));\n    }\n```\n\nService\u5316\u3057\u305f\u30bd\u30fc\u30b9\u306f\u3053\u3053\u306b\u3042\u308a\u307e\u3059\u3002\nhttps://github.com/tatsu/sample-button\n\n", "tags": ["AndroidThings", "Android", "IoT"]}