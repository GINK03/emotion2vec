{"tags": ["Linux", "AdventCalendar2016", "systemcall", "libc"], "context": "\n\nLinux vdso\n\u3068\u3042\u308b\u4e8b\u60c5\u3067\u3001vdso\u306b\u3064\u3044\u3066\u8abf\u3079\u308b\u6a5f\u4f1a\u304c\u3042\u308a\u307e\u3057\u305f\u3002\n\u4e01\u5ea6Advent Calendar\u306e\u30cd\u30bf\u306b\u56f0\u3063\u3066\u3044\u305f\u4eca\u65e5\u3053\u306e\u3054\u308d\u3001\u65e9\u901f\u66f8\u3044\u3066\u307f\u308b\u3053\u3068\u306b\u3057\u307e\u3057\u305f\u3002\n\u306a\u304a\u3001\u30bd\u30fc\u30b9\u306f\u4ee5\u4e0b\u306e\u30d0\u30fc\u30b8\u30e7\u30f3\u3067\u3059\u3002\n\n\n\n\u540d\u79f0\n\u30d0\u30fc\u30b8\u30e7\u30f3\n\n\n\n\nLinux\n4.9\n\n\nglibc\n2.23\n\n\n\n\nvdso\u3068\u306f\n\"vDSO\" (virtual dynamic shared object; \u4eee\u60f3\u52d5\u7684\u5171\u6709\u30aa\u30d6\u30b8\u30a7\u30af\u30c8) \u3068\u3044\u3046\u5171\u6709\u30e9\u30a4\u30d6\u30e9\u30ea\u3067\u3059\u3002\n\u76ee\u7684\u306f\u3001\u983b\u7e41\u306b\u547c\u3073\u51fa\u3055\u308c\u308b\u30b7\u30b9\u30c6\u30e0\u30b3\u30fc\u30eb\u3092\u30ab\u30fc\u30cd\u30eb\u7a7a\u9593\u306b\u5207\u308a\u66ff\u3048\u308b\u3053\u3068\u306a\u304f\u30e6\u30fc\u30b6\u7a7a\u9593\u3067\u51e6\u7406\u3055\u305b\u308b\u3053\u3068\u306b\u3088\u308a\u6027\u80fd\u3092\u5411\u4e0a\u3055\u305b\u308b\u3053\u3068\u304c\u76ee\u7684\u3067\u3059\u3002\n\u4ee3\u8868\u7684\u306a\u4f7f\u7528\u4f8b\u306f\u3001gettimeofday()\u3067\u3059\u3002\n\u8a73\u7d30\u306f\u3001Linux\u306eman\u30da\u30fc\u30b8\u3092\u898b\u3066\u304f\u3060\u3055\u3044\u3002\n\u4f8b\u3048\u3070\u30fb\u30fb\u30fb\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u3001ldd\u30b3\u30de\u30f3\u30c9\u3067\u9069\u5f53\u306a\u30d0\u30a4\u30ca\u30ea\u306e\u4f9d\u5b58\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u78ba\u8a8d\u3059\u308b\u3068\u3001linux-vdso.so.1\u306f\u5177\u4f53\u7684\u306a\u30d5\u30a1\u30a4\u30eb\u3067\u306a\u304f\u3001\u305d\u308c\u304c\u5b58\u5728\u3059\u308b\u30a2\u30c9\u30ec\u30b9\u306e\u307f\u304c\u8868\u793a\u3055\u308c\u307e\u3059\u3002\u3061\u3087\u3063\u3068\u7279\u6b8a\u3067\u3059\u306d\u3002\n% ldd /usr/games/sl\n    linux-vdso.so.1 =>  (0x00007ffd58df1000)\n    libncurses.so.5 => /lib/x86_64-linux-gnu/libncurses.so.5 (0x00007feb1e0db000)\n    libtinfo.so.5 => /lib/x86_64-linux-gnu/libtinfo.so.5 (0x00007feb1deb2000)\n    libc.so.6 => /lib/x86_64-linux-gnu/libc.so.6 (0x00007feb1dae8000)\n    libdl.so.2 => /lib/x86_64-linux-gnu/libdl.so.2 (0x00007feb1d8e4000)\n    /lib64/ld-linux-x86-64.so.2 (0x000055f5bb5cb000)\n\n\u307e\u305f\u3001VDSO\u306b\u3064\u3044\u3066\u306flwn.net\u306e\u8a18\u4e8b\u306b\u3082\u5b9f\u88c5\u306e\u6982\u8981\u542b\u3081\u8a73\u3057\u304f\u66f8\u304b\u308c\u3066\u3044\u307e\u3059\u3002\u3057\u304b\u3057\u3001\u5b9f\u88c5\u4f8b\u306fx86_64\u3067\u3059\u3002\n\u3061\u3087\u3063\u3068\u8af8\u4e8b\u60c5\u304b\u3089\u3001ARM(32bit)\u3067\u306f\u3069\u3046\u6271\u308f\u308c\u3066\u3044\u308b\u306e\u304b\u8208\u5473\u3092\u6301\u3063\u305f\u306e\u3067\u3001\u8abf\u3079\u3066\u307f\u307e\u3057\u305f\u3002\n\n\u307e\u305alibc\u3092\u898b\u3066\u307f\u3088\u3046\n\u4f7f\u7528\u4f8b\u3068\u3057\u3066gettimeofday()\u304c\u6319\u3052\u3089\u308c\u3066\u3044\u308b\u306e\u3067\u3001glibc\u306e\u30b3\u30fc\u30c9\u3092\u78ba\u8a8d\u3057\u307e\u3057\u305f\u3002\ngettimeofday()\u306e\u5b9f\u88c5\u306f\u4ee5\u4e0b\u306e\u3068\u304a\u308a\u3067\u3059\u3002\n\nsysdeps/unix/sysv/linux/gettimeofday.c\n#include <errno.h>\n#include <sys/time.h>\n\n#undef __gettimeofday\n\n#ifdef HAVE_GETTIMEOFDAY_VSYSCALL\n# define HAVE_VSYSCALL\n#endif\n#include <sysdep-vdso.h>\n\n/* Get the current time of day and timezone information,\n   putting it into *tv and *tz.  If tz is null, *tz is not filled.\n   Returns 0 on success, -1 on errors.  */\nint\n__gettimeofday (struct timeval *tv, struct timezone *tz)\n{\n  return INLINE_VSYSCALL (gettimeofday, 2, tv, tz);\n}\nlibc_hidden_def (__gettimeofday)\nweak_alias (__gettimeofday, gettimeofday)\nlibc_hidden_weak (gettimeofday)\n\n\n\u3055\u3089\u306b\u3001INLINE_VSYSCALL\u30de\u30af\u30ed\u306f\u4ee5\u4e0b\u306e\u901a\u308a\u306b\u306a\u308a\u307e\u3059\u3002\n\u306a\u304a\u3001glibc(arm)\u3067\u306f\u3001HAVE_GETTIMEOFDAY_VSYSCALL\u306f1\u3068\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u307e\u3059\u304c\u3001\u5272\u611b\u3057\u307e\u3059\u3002\n\nsysdeps/unix/sysv/linux/sysdep-vdso.h\n\n#  define INLINE_VSYSCALL(name, nr, args...)                      \\\n  ({                                          \\\n    __label__ out;                                \\\n    __label__ iserr;                                  \\\n    INTERNAL_SYSCALL_DECL (sc_err);                       \\\n    long int sc_ret;                                  \\\n                                          \\\n    __typeof (__vdso_##name) vdsop = __vdso_##name;               \\\n    PTR_DEMANGLE (vdsop);                             \\\n    if (vdsop != NULL)                                \\\n      {                                       \\\n    sc_ret = INTERNAL_VSYSCALL_CALL (vdsop, sc_err, nr, ##args);          \\\n    if (!INTERNAL_SYSCALL_ERROR_P (sc_ret, sc_err))               \\\n      goto out;                               \\\n    if (INTERNAL_SYSCALL_ERRNO (sc_ret, sc_err) != ENOSYS)            \\\n      goto iserr;                                 \\\n      }                                       \\\n                                          \\\n    sc_ret = INTERNAL_SYSCALL (name, sc_err, nr, ##args);             \\\n    if (INTERNAL_SYSCALL_ERROR_P (sc_ret, sc_err))                \\\n      {                                       \\\n      iserr:                                      \\\n        __set_errno (INTERNAL_SYSCALL_ERRNO (sc_ret, sc_err));            \\\n        sc_ret = -1L;                                 \\\n      }                                       \\\n  out:                                        \\\n    sc_ret;                                   \\\n  })\n\n\n\u4e0a\u8a18\u306e\u30de\u30af\u30ed\u5185\u306e\u5b9a\u7fa9\u5168\u3066\u3092\u30de\u30c8\u30e2\u306b\u66f8\u304f\u3068\u3001\u8abf\u3079\u305f\u3044\u3053\u3068\u306e\u672c\u8cea\u304b\u3089\u96e2\u308c\u3066\u3057\u307e\u3046\u305f\u3081\u3001\u5fc5\u8981\u306a\u7b87\u6240\u306b\u3064\u3044\u3066\u8ff0\u3079\u307e\u3059\u3002\n\u4eca\u56de\u5fc5\u8981\u306a\u7b87\u6240\u306f\u524d\u534a\u306e\u90e8\u5206\u3067\u3059\u3002\u524d\u534a\u306e\u7b87\u6240\u3092__typeof\u3092\u9664\u3044\u3066\u5c55\u958b\u3059\u308b\u3068\u3001\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002\n\u306a\u304a\u3001INTERNAL_VSYSCALL_CALL\u306e\u5b9a\u7fa9\u306f\u3001sysdeps/unix/sysv/linux/sysdep-vdso.h \u306b\u3042\u308a\u307e\u3059\u3002\n  ({\n    __label__ out;\n    __label__ iserr;\n    // INTERNAL_SYSCALL_DECL\u306e\u5b9a\u7fa9\u306f\u7565 \n    long int sc_ret;\n\n    __typeof (__vdso_gettimeofday) vdsop = __vdso_gettimeofday;\n    // PTR_DEMANGLE\u306e\u5b9a\u7fa9\u306f\u7565\n    if (vdsop != NULL)\n      {\n    sc_ret = vpsop(args);\n\n\n\u554f\u984c\u306f\u3001__vdso_gettimeofday\u306e\u5b9f\u4f53\u304c\u3069\u3053\u306b\u3044\u308b\u304b\u3068\u3044\u3046\u3053\u3068\u3067\u3059\u3002\u5c55\u958b\u3055\u308c\u305f\u30b3\u30fc\u30c9\u304b\u3089\u3001\u95a2\u6570\u306e\u5b9f\u4f53\u3082\u3057\u304f\u306f\u95a2\u6570\u30dd\u30a4\u30f3\u30bf\u3067\u3042\u308b\u3053\u3068\u306f\u60f3\u50cf\u3067\u304d\u307e\u3059\u3002\u3055\u3066\u3001\u3069\u3053\u306b\u3044\u308b\u306e\u3067\u3057\u3087\u3046\u304b\u3002\n\n__vdso_getitimeofday\u306f\u3069\u3053\u306b\u3044\u308b\nglibc\u3092\u691c\u7d22\u3057\u3066\u307f\u308b\u3068\u3001\u4ee5\u4e0b\u306e\u30b3\u30fc\u30c9\u304c\u898b\u5f53\u305f\u308a\u307e\u3059\u3002\u3057\u304b\u3057\u3001\u5b9f\u4f53\u304c\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u308b\u308f\u3051\u3067\u306f\u306a\u3055\u305d\u3046\u3067\u3059\u3002\n\nsysdeps/unix/sysv/linux/arm/init-first.c\n 24 int (*VDSO_SYMBOL(gettimeofday)) (struct timeval *, void *) attribute_hidden    ;\n 25 int (*VDSO_SYMBOL(clock_gettime)) (clockid_t, struct timespec *);\n 26 \n 27 static inline void\n 28 _libc_vdso_platform_setup (void)\n 29 {\n 30   PREPARE_VERSION_KNOWN (linux26, LINUX_2_6);\n 31 \n 32   void *p = _dl_vdso_vsym (\"__vdso_gettimeofday\", &linux26);\n 33   PTR_MANGLE (p);\n 34   VDSO_SYMBOL (gettimeofday) = p;\n// \u7565\n 39 }\n\n\n\u5b9f\u306f\u3001__vdso_gettimeofday\u306e\u5b9f\u4f53\u306f\u3001Linux\u30ab\u30fc\u30cd\u30eb\u306e\u30bd\u30fc\u30b9\u30c4\u30ea\u30fc\u5185\u306b\u3044\u308b\u306e\u3067\u3059\uff01\u300c\u3048\uff1f\u300d\u3068\u8a00\u3044\u305f\u304f\u306a\u308a\u307e\u3059\u304c\u3001\u5148\u306b\u9032\u307f\u307e\u3057\u3087\u3046\u3002\n\nLinux(arm)\u5074\u3067\u306f\u3069\u3046\u306a\u3063\u3066\u3044\u308b\nLinux(arm)\u5185\u306e__vdso_gettimeofday\u306e\u5b9f\u88c5\u306f\u4ee5\u4e0b\u306e\u3068\u304a\u308a\u3067\u3059\u3002\n\narch/arm/vdso/vgettimeofday.c\n246 notrace int __vdso_gettimeofday(struct timeval *tv, struct timezone *tz)\n247 {   \n248     struct timespec ts;\n249     struct vdso_data *vdata;\n250     int ret;\n251     \n252     vdata = __get_datapage();\n253     \n254     ret = do_realtime(&ts, vdata);\n255     if (ret)\n256         return gettimeofday_fallback(tv, tz);\n257     \n258     if (tv) {\n259         tv->tv_sec = ts.tv_sec;\n260         tv->tv_usec = ts.tv_nsec / 1000;\n261     }\n262     if (tz) {\n263         tz->tz_minuteswest = vdata->tz_minuteswest;\n264         tz->tz_dsttime = vdata->tz_dsttime;\n265     }\n266     \n267     return ret;\n268 }\n\n\n\u78ba\u304b\u306b\u305d\u308c\u3063\u307d\u3044(\u5b9f\u969b\u306b\u305d\u3046\u306a\u3093\u3067\u3059\u304c(\u7b11))\u5b9f\u88c5\u3067\u3059\u3002\u3053\u306e\u95a2\u6570\u304c\u547c\u3070\u308c\u308b\u306e\u306a\u3089\u554f\u984c\u306f\u306a\u3055\u305d\u3046\u3067\u3059\u3002\n\u305f\u3060\u3001\u4eca\u56de\u306f\u5b9f\u88c5\u306e\u8a73\u7d30\u306b\u306f\u7acb\u3061\u5165\u308a\u307e\u305b\u3093\u3002\u7406\u7531\u306fgettimeofday()\u306e\u5b9f\u88c5\u3067\u306a\u304f\u3001vdso\u304c\u3069\u3046\u306a\u3063\u3066\u3044\u308b\u304b\u3092\u77e5\u308a\u305f\u3044\u305f\u3081\u3067\u3059\u3002\n\u305d\u3057\u3066\u3001\u30bd\u30fc\u30b9\u30c4\u30ea\u30fc\u306b\u691c\u7d22\u3092\u304b\u3051\u308b\u3068\u308f\u304b\u308b\u306e\u3067\u3059\u304c\u3001\u3082\u3046\u3072\u3068\u3064\u5927\u5207\u306a\u7b87\u6240\u304c\u3042\u308a\u307e\u3059\u3002\u305d\u308c\u306f\u4ee5\u4e0b\u306e\u30b3\u30fc\u30c9\u3067\u3059\u3002\n\narch/arm/vdso/vdso.lds.S\n 31 SECTIONS\n 32 {   \n 33     PROVIDE(_start = .);\n 34     \n 35     . = SIZEOF_HEADERS;\n 36     \n 37     .hash       : { *(.hash) }          :text\n 38     .gnu.hash   : { *(.gnu.hash) }\n 39     .dynsym     : { *(.dynsym) }\n 40     .dynstr     : { *(.dynstr) }\n/* \u7565(C\u306e\u30b3\u30e1\u30f3\u30c8\u5f62\u5f0f\u3067\u66f8\u304f\u306e\u3082\u4f55\u304b\u5909\u3060\u304c) */\n 55     .text       : { *(.text*) }         :text   =0xe7f001f2\n/* \u7565(C\u306e\u30b3\u30e1\u30f3\u30c8\u5f62\u5f0f\u3067\u66f8\u304f\u306e\u3082\u4f55\u304b\u5909\u3060\u304c) */\n 65 }\n 66 \n 67 /*\n 68  * We must supply the ELF program headers explicitly to get just one\n 69  * PT_LOAD segment, and set the flags explicitly to make segments read-only.\n 70  */\n 71 PHDRS\n 72 {\n 73     text        PT_LOAD     FLAGS(5) FILEHDR PHDRS; /* PF_R|PF_X */\n 74     dynamic     PT_DYNAMIC  FLAGS(4);       /* PF_R */\n 75     note        PT_NOTE     FLAGS(4);       /* PF_R */\n 76     eh_frame_hdr    PT_GNU_EH_FRAME;\n 77 }\n 78 \n 79 VERSION\n 80 {\n 81     LINUX_2.6 {\n 82     global:\n 83         __vdso_clock_gettime;\n 84         __vdso_gettimeofday;\n 85     local: *;\n 86     };\n 87 }\n\n\n\u30ea\u30f3\u30ab\u30b9\u30af\u30ea\u30d7\u30c8\u306e\u5143\u3068\u306a\u308b\u30d5\u30a1\u30a4\u30eb\u3067\u3059\u3002arch/arm/vdso/Makefile\u3067\u306f\u6700\u7d42\u7684\u306b\u3053\u306e\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u306b\u3042\u308b\u30d5\u30a1\u30a4\u30eb\u7fa4\u3092\u7528\u3044\u3066\u6700\u7d42\u7684\u306b\u306fvdso.so\u3068\u3044\u3046ELF\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u4f5c\u6210\u3057\u307e\u3059\u3002\n\narch/arm/vdso/Makefile\n# Build rules\ntargets := $(obj-vdso) vdso.so vdso.so.dbg vdso.so.raw vdso.lds\nobj-vdso := $(addprefix $(obj)/, $(obj-vdso))\n# \u7565\n# Force dependency\n$(obj)/vdso.o : $(obj)/vdso.so\n# \u7565\n\n\n\u7701\u7565\u3057\u307e\u3059\u304c\u3001\u30ab\u30fc\u30cd\u30eb\u30d3\u30eb\u30c9\u306e\u969b\u306b\u3001arch/arm/Makefile\u7d4c\u7531\u3067arch/arm/vdso/Makefile\u304c\u53e9\u304b\u308c\u308b\u306e\u3067\u3001vdso.so\u304c\u4f5c\u3089\u308c\u308b\u306e\u306f\u30ab\u30fc\u30cd\u30eb\u30d3\u30eb\u30c9\u306e\u3068\u304d\u3060\u3068\u308f\u304b\u308a\u307e\u3059\u3002\n\u305d\u3057\u3066\u3001\u51fa\u6765\u4e0a\u304c\u3063\u305fvdso.so\u306f\u30ab\u30fc\u30cd\u30eb\u30d3\u30eb\u30c9\u306e\u904e\u7a0b\u3067\u3001vmlinux\u306e\u7279\u5b9a\u306e\u4f4d\u7f6e\u306b\u57cb\u3081\u8fbc\u307e\u308c\u307e\u3059\u3002\u305d\u306e\u300c\u7279\u5b9a\u306e\u4f4d\u7f6e\u300d\u306f\u3001\u4ee5\u4e0b\u306e\u30b3\u30fc\u30c9\u304b\u3089vdso_start\u3068\u3044\u3046\u30b7\u30f3\u30dc\u30eb\u540d\u3092\u5148\u982d\u3068\u3059\u308b\u9818\u57df\u3067\u3042\u308b\u3053\u3068\u304c\u308f\u304b\u308a\u307e\u3059\u3002\n\narch/arm/vdso/vdso.S\n 21 #include <linux/init.h>\n 22 #include <linux/linkage.h>\n 23 #include <linux/const.h>\n 24 #include <asm/page.h>\n 25 \n 26     .globl vdso_start, vdso_end\n 27     .section .data..ro_after_init\n 28     .balign PAGE_SIZE\n 29 vdso_start:\n 30     .incbin \"arch/arm/vdso/vdso.so\"\n 31     .balign PAGE_SIZE\n 32 vdso_end:\n 33 \n 34     .previous\n\n\n\n\u672c\u5f53\u306b\u57cb\u3081\u8fbc\u307e\u308c\u3066\u3044\u308b\u304b\u78ba\u8a8d\n\u30d3\u30eb\u30c9\u3057\u305farm\u7248Linux\u306e\u4e2d\u306b\u672c\u5f53\u306bvdso.so\u304c\u57cb\u3081\u8fbc\u307e\u308c\u3066\u3044\u308b\u304b\u78ba\u8a8d\u3057\u307e\u3057\u3087\u3046\u3002\n(\u610f\u56f3\u7684\u306b\u30e6\u30fc\u30b6\u540d\u3084\u30b3\u30de\u30f3\u30c9\u30d7\u30ed\u30f3\u30d7\u30c8\u306e\u4e00\u90e8\u3092\u7de8\u96c6\u3057\u3066\u3044\u307e\u3059\u3002\u3054\u4e86\u627f\u304f\u3060\u3055\u3044\u3002)\n\n\u307e\u305a\u306f\u30ab\u30fc\u30cd\u30eb\u30d3\u30eb\u30c9\n\u30ab\u30fc\u30cd\u30eb\u30d3\u30eb\u30c9\u306e\u3084\u308a\u65b9\u306f\u3001\u3053\u3061\u3089\u306e\u30da\u30fc\u30b8\u3092\u53c2\u8003\u306b\u3057\u3064\u3064\u3001\u4ee5\u4e0b\u306e\u65b9\u6cd5\u3067\u5b9f\u65bd\u3057\u307e\u3057\u305f\u3002\n\u306a\u304a\u3001\u79c1\u306e\u74b0\u5883\u306fUbuntu Linux 16.04\u306b\u306a\u308a\u307e\u3059\u3002\u30fb\u30fb\u30fb\u306a\u3093\u304b\u5148\u306e\u30da\u30fc\u30b8\u3068\u304b\u306a\u308a\u9055\u3046\u3051\u3069\u30fb\u30fb\u30fb\u3002\n(1)\u307e\u305a\u306f\u30af\u30ed\u30b9\u74b0\u5883\u3092\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3057\u307e\u3059\u3002\napt-get install gcc-arm-none-eabi\n\n(2) \u30ab\u30fc\u30cd\u30eb\u30bd\u30fc\u30b9\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u3067\u3001\u4ee5\u4e0b\u306e\u30b3\u30de\u30f3\u30c9\u3092\u5b9f\u884c\u3057\u3001arch/arm/configs\u306b\u3042\u308b\u8a2d\u5b9a\u30d5\u30a1\u30a4\u30eb(multi_v7_defconfig)\u306e\u8a2d\u5b9a\u3092\u9069\u7528\u3057\u3066\u3001.config\u3092\u4f5c\u308a\u307e\u3059\u3002\n\u3053\u306e\u8a2d\u5b9a\u30d5\u30a1\u30a4\u30eb\u3092\u9078\u3093\u3060\u7406\u7531\u306f\u3001\u30c7\u30d5\u30a9\u30eb\u30c8\u3067VDSO\u304c\u6709\u52b9\u306b\u306a\u3063\u3066\u3044\u3066\u624b\u9593\u304c\u304b\u304b\u3089\u306a\u3044\u304b\u3089\u3067\u3059\u3002\nmake ARCH=arm multi_v7_defconfig\n\n(3)\u30ab\u30fc\u30cd\u30eb\u30d3\u30eb\u30c9\u3057\u307e\u3059\u3002\u304a\u99b4\u67d3\u307f\u306evmlinux\u304c\u30d3\u30eb\u30c9\u3055\u308c\u307e\u3059\u306d\u3002\nmake ARCH=arm CROSS_COMPILE=arm-none-eabi-\n\n\nvmlinux\u5185\u306evdso.so\u3092\u78ba\u8a8d\n\u307e\u305a\u3001vdso.so\u306e\u30b5\u30a4\u30ba\u3092\u78ba\u8a8d\u3057\u307e\u3059\u3002\n % ls -al arch/arm/vdso/vdso.so\n-rwxrwxr-x 1 hoge hoge 2700 12\u6708 22 22:48 arch/arm/vdso/vdso.so\n\nreadelf\u3067\u30bb\u30af\u30b7\u30e7\u30f3\u30d8\u30c3\u30c0\u3092\u78ba\u8a8d\u3057\u305f\u3046\u3048\u3001arm\u30af\u30ed\u30b9\u30c4\u30fc\u30eb\u306enm\u3067vdso_start\u306e\u4f4d\u7f6e\u3092\u78ba\u8a8d\u3057\u307e\u3057\u3087\u3046\u3002\n % readelf -S vmlinux                                                                                                                                                                          \n34 \u500b\u306e\u30bb\u30af\u30b7\u30e7\u30f3\u30d8\u30c3\u30c0\u3001\u59cb\u70b9\u30aa\u30d5\u30bb\u30c3\u30c8 0x13e613c:\n\n\u30bb\u30af\u30b7\u30e7\u30f3\u30d8\u30c3\u30c0:\n  [\u756a] \u540d\u524d              \u30bf\u30a4\u30d7          \u30a2\u30c9\u30ec\u30b9 Off    \u30b5\u30a4\u30ba ES Flg Lk Inf Al\n  [ 0]                   NULL            00000000 000000 000000 00      0   0  0\n  [ 1] .head.text        PROGBITS        c0208000 008000 00026c 00  AX  0   0  4\n  [ 2] .text             PROGBITS        c0300000 010000 8e0e28 00  AX  0   0 4096\n  [ 3] .fixup            PROGBITS        c0be0e28 8f0e28 00001c 00  AX  0   0  4\n  [ 4] .rodata           PROGBITS        c0c00000 900000 37f300 00  WA  0   0 4096\n  [ 5] __bug_table       PROGBITS        c0f7f300 c7f300 008238 00   A  0   0  4\n// \u7701\u7565\n  [33] .strtab           STRTAB          00000000 1222fec 1c2fea 00      0   0  1\n\u30d5\u30e9\u30b0\u306e\u30ad\u30fc:\n  W (write), A (alloc), X (\u5b9f\u884c), M (merge), S (\u6587\u5b57\u5217)\n  I (\u60c5\u5831), L (\u30ea\u30f3\u30af\u9806), G (\u30b0\u30eb\u30fc\u30d7), T (TLS), E (\u6392\u4ed6), x (\u4e0d\u660e)\n  O (\u8ffd\u52a0\u306e OS \u51e6\u7406\u304c\u5fc5\u8981) o (OS \u56fa\u6709), p (\u30d7\u30ed\u30bb\u30c3\u30b5\u56fa\u6709)\n\n % arm-none-eabi-nm vmlinux | grep vdso_start                                                                                                                                                  \nc0f7e000 R vdso_start\n\n\u3053\u308c\u3067\u30d5\u30a1\u30a4\u30eb\u5148\u982d\u304b\u3089vdso_start\u306e\u3042\u308b\u4f4d\u7f6e\u304c\u308f\u304b\u308a\u307e\u3057\u305f( 0xc0f7e000 - 0xc0c00000 + 0x900000)\u306e\u3067\u3001vdso.so\u306e\u30b5\u30a4\u30ba\u5206\u5207\u308a\u51fa\u3057\u307e\u3059\u3002\n\u305d\u306e\u4e0a\u3067vdso.so\u3068\u4e00\u81f4\u3059\u308b\u304b\u78ba\u8a8d\u3057\u307e\u3057\u3087\u3046\u3002\n % dd if=vmlinux of=vdso.bin bs=1 count=2700 skip=13099008\n2700+0 \u30ec\u30b3\u30fc\u30c9\u5165\u529b\n2700+0 \u30ec\u30b3\u30fc\u30c9\u51fa\u529b\n2700 bytes (2.7 kB, 2.6 KiB) copied, 0.00900085 s, 300 kB/s\n\n % diff arch/arm/vdso/vdso.so vdso.bin \n\n\u78ba\u304b\u306b\u4e00\u81f4\u3057\u307e\u3057\u305f\u3002\u3042\u3068\u306f\u3001\u3069\u3046\u3084\u3063\u3066vdso.so\u3092\u30e6\u30fc\u30b6\u7a7a\u9593\u306b\u898b\u305b\u308b\u304b\u3092\u898b\u307e\u3057\u3087\u3046\u3002\n\n\u30e6\u30fc\u30b6\u7a7a\u9593\u306bvdso\u3092\u898b\u305b\u308b\n\u30ab\u30fc\u30cd\u30eb\u306b\u57cb\u3081\u8fbc\u307e\u308c\u305fvdso.so\u306f\u3001exec\u306e\u969b\u306b\u30e6\u30fc\u30b6\u30a2\u30c9\u30ec\u30b9\u7a7a\u9593\u306b\u30de\u30c3\u30d7\u3055\u308c\u307e\u3059\u3002\nexec\u306e\u30e1\u30a4\u30f3\u51e6\u7406\u3067\u3042\u308bdo_execveat_common()\u304b\u3089\u4ee5\u4e0b\u95a2\u6570\u7fa4\u306e\u547c\u3073\u51fa\u3057\u3092\u7d4c\u3066\u3001arch_setup_additional_pages()\u304c\u547c\u3070\u308c\u3001\u305d\u306e\u5148\u3067vdso.so\u306e\u30de\u30c3\u30d7\u304c\u884c\u308f\u308c\u307e\u3059\u3002\n\nfs/exec.c\n/*\n * sys_execve() executes a new program.\n */\nstatic int do_execveat_common(int fd, struct filename *filename,\n                  struct user_arg_ptr argv,\n                  struct user_arg_ptr envp,\n                  int flags)\n{\n/* \u7565 */\n    retval = exec_binprm(bprm);\n    if (retval < 0)\n        goto out;\n\n\n\nfs/exec.c\nstatic int exec_binprm(struct linux_binprm *bprm)\n{\n/* \u7565 */\n    ret = search_binary_handler(bprm);\n    if (ret >= 0) {\n        audit_bprm(bprm);\n        trace_sched_process_exec(current, old_pid, bprm);\n        ptrace_event(PTRACE_EVENT_EXEC, old_vpid);\n        proc_exec_connector(current);\n    }\n\n    return ret;\n}\n\n\n\nfs/exec.c\n\n/*\n * cycle the list of binary formats handler, until one recognizes the image\n */\nint search_binary_handler(struct linux_binprm *bprm)\n{\n/* \u7565 */\n retry:\n    read_lock(&binfmt_lock);\n    list_for_each_entry(fmt, &formats, lh) {\n/* \u7565 */\n        retval = fmt->load_binary(bprm);\n\n\n\nfs/binfmt_elf.c\nstatic int load_elf_binary(struct linux_binprm *bprm)\n{\n/* \u7565 */\n#ifdef ARCH_HAS_SETUP_ADDITIONAL_PAGES\n    retval = arch_setup_additional_pages(bprm, !!elf_interpreter);\n    if (retval < 0)\n        goto out;\n#endif /* ARCH_HAS_SETUP_ADDITIONAL_PAGES */\n\n\narch_setup_additional_pages()\u3067\u306f\u3001\u6700\u5f8c\u306barm_install_vdso()\u3092\u547c\u3073\u51fa\u3057\u307e\u3059\u3002\n\narch/arm/kernel/process.c\nint arch_setup_additional_pages(struct linux_binprm *bprm, int uses_interp)\n{\n    struct mm_struct *mm = current->mm;\n/* \u7565 */\n    /* Unlike the sigpage, failure to install the vdso is unlikely\n     * to be fatal to the process, so no error check needed\n     * here.\n     */\n    arm_install_vdso(mm, addr + PAGE_SIZE);\n\nup_fail:\n    up_write(&mm->mmap_sem);\n    return ret;\n}\n\n\n\u4ee5\u4e0b\u304carm_install_vdso()\u3067\u3059\u3002\u3053\u306e\u95a2\u6570\u3067\u306f\u3001_install_special_mapping()\u3092\u547c\u3073\u51fa\u3057\u3001\u3053\u308c\u306b\u3088\u3063\u3066\u6700\u5f8c\u306e\u5f15\u6570vdso_text_mapping\u3067\u6307\u5b9a\u3057\u305f\u9818\u57df\u3092\u30de\u30c3\u30d7\u3057\u307e\u3059\u3002\n\narch/arm/kernel/process.c\n/* assumes mmap_sem is write-locked */ \nvoid arm_install_vdso(struct mm_struct *mm, unsigned long addr)\n{\n    struct vm_area_struct *vma;\n    unsigned long len;\n\n    mm->context.vdso = 0;\n\n    if (vdso_text_pagelist == NULL)\n        return;\n\n    if (install_vvar(mm, addr))\n        return;\n\n    /* Account for vvar page. */\n    addr += PAGE_SIZE;\n    len = (vdso_total_pages - 1) << PAGE_SHIFT;\n\n    vma = _install_special_mapping(mm, addr, len,\n        VM_READ | VM_EXEC | VM_MAYREAD | VM_MAYWRITE | VM_MAYEXEC,\n        &vdso_text_mapping);\n\n    if (!IS_ERR(vma))\n        mm->context.vdso = addr;\n}\n\n\nvdso_text_mapping\u306f\u30ab\u30fc\u30cd\u30eb\u306e\u8d77\u52d5\u6642\u306b\u4ee5\u4e0b\u306e\u95a2\u6570\u3067\u521d\u671f\u5316\u3055\u308c\u307e\u3059\u3002\u5148\u306b\u66f8\u3044\u305fvdso_start\u3068vdso_end\u306b\u631f\u307e\u308c\u305f\u9818\u57df(\u30da\u30fc\u30b8)\u3092\u793a\u3059page\u69cb\u9020\u4f53\u3092\u53d6\u5f97\u3057\u3001\u3053\u308c\u3092\u7528\u3044\u3066vdso_text_mapping\u3092\u521d\u671f\u5316\u3057\u3066\u3044\u308b\u306e\u304c\u308f\u304b\u308a\u307e\u3059\u3002\n\narch/arm/kernel/vdso.c\n/*\n * The VDSO data page.\n */\n/* \u7565 */\nstatic struct vm_special_mapping vdso_text_mapping __ro_after_init = {\n    .name = \"[vdso]\",\n};\n/* \u7565 */\nstatic int __init vdso_init(void)\n{\n    unsigned int text_pages;\n    int i;\n\n    if (memcmp(&vdso_start, \"\\177ELF\", 4)) {\n        pr_err(\"VDSO is not a valid ELF object!\\n\");\n        return -ENOEXEC;\n    }\n\n    text_pages = (&vdso_end - &vdso_start) >> PAGE_SHIFT;\n/* \u7565 */\n\n    /* Grab the VDSO text pages. */\n    for (i = 0; i < text_pages; i++) {\n        struct page *page;\n\n        page = virt_to_page(&vdso_start + i * PAGE_SIZE);\n        vdso_text_pagelist[i] = page;\n    }\n\n    vdso_text_mapping.pages = vdso_text_pagelist;\n\n    vdso_total_pages = 1; /* for the data/vvar page */\n    vdso_total_pages += text_pages; \n\n\n\u3053\u308c\u3067\u78ba\u304b\u306bvdso.so\u304c\u30e6\u30fc\u30b6\u7a7a\u9593\u304b\u3089\u898b\u3048\u308b\u3088\u3046\u306b\u306a\u308a\u305d\u3046\u3067\u3059\u3002\n\n\u6700\u5f8c\u306b\n\u4eca\u56de\u306fARM\u7248Linux\u3067VDSO\u3092\u3069\u3046\u5b9f\u73fe\u3057\u3066\u3044\u308b\u304b\u78ba\u304b\u3081\u3066\u307f\u307e\u3057\u305f\u3002\n\u30ab\u30fc\u30cd\u30eb\u306e\u30bd\u30fc\u30b9\u3092\u8aad\u3080\u306e\u3082\u3068\u3066\u3082\u9762\u767d\u3044\u306e\u3067\u3059\u304c\u3001\u30d3\u30eb\u30c9\u3057\u305f\u30d0\u30a4\u30ca\u30ea\u3067\u3061\u3087\u3063\u3068\u904a\u3093\u3067\u307f\u308b\u306e\u3082\u307e\u305f\u4e00\u8208\u3067\u3059\u3002\u307e\u305f\u3001\u666e\u6bb5\u306fx86\u306e\u4eba\u3082\u305f\u307e\u306b\u306fARM\u3084MIPS\u306e\u30b3\u30fc\u30c9\u3092\u8aad\u3093\u3067\u307f\u308b\u3068\u3001\u65b0\u305f\u306a\u767a\u898b\u304c\u3042\u308a\u307e\u3059\u3002\n\u30ab\u30fc\u30cd\u30eb\u306e\u30bd\u30fc\u30b9\u3092\u8aad\u3080\u306e\u306f\u3069\u3053\u304b\u3089\u8aad\u3081\u3070\u3088\u3044\u306e\u304b\u805e\u304b\u308c\u307e\u3059\u304c\u3001\u307e\u3042\u3001\u65e5\u5e38\u306e\u3061\u3087\u3063\u3068\u3057\u305f\u7591\u554f\u306e\u89e3\u6d88\u30ec\u30d9\u30eb\u3067\u8208\u5473\u3042\u308b\u3068\u3053\u308d\u304b\u3089\u5c11\u3057\u305a\u3064\u8aad\u3093\u3067\u307f\u308c\u3070\u826f\u3044\u3068\u601d\u3044\u307e\u3059\u3002\n\u4eca\u5e74\u3082\u5c11\u306a\u304f\u306a\u308a\u3001\u76f8\u5909\u308f\u3089\u305a\u9032\u6357\u306b\u8ffd\u308f\u308c\u3063\u3071\u306a\u3057\u3001\u3053\u306e\u8a18\u4e8b\u3082\u9032\u6357\u9045\u308c\u307e\u3057\u305f\u304c\u3001\u6700\u5f8c\u306b\u30cf\u30c3\u30d4\u30fc\u306b\u306a\u308c\u308b\u3053\u3068\u3092\u7948\u308a\u307e\u3059\u3002\n\u305d\u308c\u3067\u306f\u3001\u7686\u69d8\u3001Happy Hacking!\n## Linux vdso\n\n\u3068\u3042\u308b\u4e8b\u60c5\u3067\u3001vdso\u306b\u3064\u3044\u3066\u8abf\u3079\u308b\u6a5f\u4f1a\u304c\u3042\u308a\u307e\u3057\u305f\u3002\n\u4e01\u5ea6Advent Calendar\u306e\u30cd\u30bf\u306b\u56f0\u3063\u3066\u3044\u305f\u4eca\u65e5\u3053\u306e\u3054\u308d\u3001\u65e9\u901f\u66f8\u3044\u3066\u307f\u308b\u3053\u3068\u306b\u3057\u307e\u3057\u305f\u3002\n\n\u306a\u304a\u3001\u30bd\u30fc\u30b9\u306f\u4ee5\u4e0b\u306e\u30d0\u30fc\u30b8\u30e7\u30f3\u3067\u3059\u3002\n\n| \u540d\u79f0 | \u30d0\u30fc\u30b8\u30e7\u30f3 |\n|:---|:---|\n| Linux | 4.9 |\n| glibc | 2.23 |\n\n## vdso\u3068\u306f\n\n\"vDSO\" (virtual dynamic shared object; \u4eee\u60f3\u52d5\u7684\u5171\u6709\u30aa\u30d6\u30b8\u30a7\u30af\u30c8) \u3068\u3044\u3046\u5171\u6709\u30e9\u30a4\u30d6\u30e9\u30ea\u3067\u3059\u3002\n\u76ee\u7684\u306f\u3001\u983b\u7e41\u306b\u547c\u3073\u51fa\u3055\u308c\u308b\u30b7\u30b9\u30c6\u30e0\u30b3\u30fc\u30eb\u3092\u30ab\u30fc\u30cd\u30eb\u7a7a\u9593\u306b\u5207\u308a\u66ff\u3048\u308b\u3053\u3068\u306a\u304f\u30e6\u30fc\u30b6\u7a7a\u9593\u3067\u51e6\u7406\u3055\u305b\u308b\u3053\u3068\u306b\u3088\u308a\u6027\u80fd\u3092\u5411\u4e0a\u3055\u305b\u308b\u3053\u3068\u304c\u76ee\u7684\u3067\u3059\u3002\n\u4ee3\u8868\u7684\u306a\u4f7f\u7528\u4f8b\u306f\u3001gettimeofday()\u3067\u3059\u3002\n\u8a73\u7d30\u306f\u3001[Linux\u306eman\u30da\u30fc\u30b8](https://linuxjm.osdn.jp/html/LDP_man-pages/man7/vdso.7.html)\u3092\u898b\u3066\u304f\u3060\u3055\u3044\u3002\n\n\u4f8b\u3048\u3070\u30fb\u30fb\u30fb\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u3001ldd\u30b3\u30de\u30f3\u30c9\u3067\u9069\u5f53\u306a\u30d0\u30a4\u30ca\u30ea\u306e\u4f9d\u5b58\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u78ba\u8a8d\u3059\u308b\u3068\u3001linux-vdso.so.1\u306f\u5177\u4f53\u7684\u306a\u30d5\u30a1\u30a4\u30eb\u3067\u306a\u304f\u3001\u305d\u308c\u304c\u5b58\u5728\u3059\u308b\u30a2\u30c9\u30ec\u30b9\u306e\u307f\u304c\u8868\u793a\u3055\u308c\u307e\u3059\u3002\u3061\u3087\u3063\u3068\u7279\u6b8a\u3067\u3059\u306d\u3002\n\n```\n% ldd /usr/games/sl\n\tlinux-vdso.so.1 =>  (0x00007ffd58df1000)\n\tlibncurses.so.5 => /lib/x86_64-linux-gnu/libncurses.so.5 (0x00007feb1e0db000)\n\tlibtinfo.so.5 => /lib/x86_64-linux-gnu/libtinfo.so.5 (0x00007feb1deb2000)\n\tlibc.so.6 => /lib/x86_64-linux-gnu/libc.so.6 (0x00007feb1dae8000)\n\tlibdl.so.2 => /lib/x86_64-linux-gnu/libdl.so.2 (0x00007feb1d8e4000)\n\t/lib64/ld-linux-x86-64.so.2 (0x000055f5bb5cb000)\n```\n\n\u307e\u305f\u3001VDSO\u306b\u3064\u3044\u3066\u306f[lwn.net\u306e\u8a18\u4e8b](https://lwn.net/Articles/615809/)\u306b\u3082\u5b9f\u88c5\u306e\u6982\u8981\u542b\u3081\u8a73\u3057\u304f\u66f8\u304b\u308c\u3066\u3044\u307e\u3059\u3002\u3057\u304b\u3057\u3001\u5b9f\u88c5\u4f8b\u306fx86_64\u3067\u3059\u3002\n\u3061\u3087\u3063\u3068\u8af8\u4e8b\u60c5\u304b\u3089\u3001ARM(32bit)\u3067\u306f\u3069\u3046\u6271\u308f\u308c\u3066\u3044\u308b\u306e\u304b\u8208\u5473\u3092\u6301\u3063\u305f\u306e\u3067\u3001\u8abf\u3079\u3066\u307f\u307e\u3057\u305f\u3002\n\n## \u307e\u305alibc\u3092\u898b\u3066\u307f\u3088\u3046\n\n\u4f7f\u7528\u4f8b\u3068\u3057\u3066gettimeofday()\u304c\u6319\u3052\u3089\u308c\u3066\u3044\u308b\u306e\u3067\u3001glibc\u306e\u30b3\u30fc\u30c9\u3092\u78ba\u8a8d\u3057\u307e\u3057\u305f\u3002\ngettimeofday()\u306e\u5b9f\u88c5\u306f\u4ee5\u4e0b\u306e\u3068\u304a\u308a\u3067\u3059\u3002\n\n```c:sysdeps/unix/sysv/linux/gettimeofday.c\n#include <errno.h>\n#include <sys/time.h>\n\n#undef __gettimeofday\n\n#ifdef HAVE_GETTIMEOFDAY_VSYSCALL\n# define HAVE_VSYSCALL\n#endif\n#include <sysdep-vdso.h>\n\n/* Get the current time of day and timezone information,\n   putting it into *tv and *tz.  If tz is null, *tz is not filled.\n   Returns 0 on success, -1 on errors.  */\nint\n__gettimeofday (struct timeval *tv, struct timezone *tz)\n{\n  return INLINE_VSYSCALL (gettimeofday, 2, tv, tz);\n}\nlibc_hidden_def (__gettimeofday)\nweak_alias (__gettimeofday, gettimeofday)\nlibc_hidden_weak (gettimeofday)\n```\n\n\u3055\u3089\u306b\u3001INLINE_VSYSCALL\u30de\u30af\u30ed\u306f\u4ee5\u4e0b\u306e\u901a\u308a\u306b\u306a\u308a\u307e\u3059\u3002\n\u306a\u304a\u3001glibc(arm)\u3067\u306f\u3001HAVE_GETTIMEOFDAY_VSYSCALL\u306f1\u3068\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u307e\u3059\u304c\u3001\u5272\u611b\u3057\u307e\u3059\u3002\n\n```c:sysdeps/unix/sysv/linux/sysdep-vdso.h\n\n#  define INLINE_VSYSCALL(name, nr, args...)                      \\\n  ({                                          \\\n    __label__ out;                                \\\n    __label__ iserr;                                  \\\n    INTERNAL_SYSCALL_DECL (sc_err);                       \\\n    long int sc_ret;                                  \\\n                                          \\\n    __typeof (__vdso_##name) vdsop = __vdso_##name;               \\\n    PTR_DEMANGLE (vdsop);                             \\\n    if (vdsop != NULL)                                \\\n      {                                       \\\n    sc_ret = INTERNAL_VSYSCALL_CALL (vdsop, sc_err, nr, ##args);          \\\n    if (!INTERNAL_SYSCALL_ERROR_P (sc_ret, sc_err))               \\\n      goto out;                               \\\n    if (INTERNAL_SYSCALL_ERRNO (sc_ret, sc_err) != ENOSYS)            \\\n      goto iserr;                                 \\\n      }                                       \\\n                                          \\\n    sc_ret = INTERNAL_SYSCALL (name, sc_err, nr, ##args);             \\\n    if (INTERNAL_SYSCALL_ERROR_P (sc_ret, sc_err))                \\\n      {                                       \\\n      iserr:                                      \\\n        __set_errno (INTERNAL_SYSCALL_ERRNO (sc_ret, sc_err));            \\\n        sc_ret = -1L;                                 \\\n      }                                       \\\n  out:                                        \\\n    sc_ret;                                   \\\n  })\n```\n\n\u4e0a\u8a18\u306e\u30de\u30af\u30ed\u5185\u306e\u5b9a\u7fa9\u5168\u3066\u3092\u30de\u30c8\u30e2\u306b\u66f8\u304f\u3068\u3001\u8abf\u3079\u305f\u3044\u3053\u3068\u306e\u672c\u8cea\u304b\u3089\u96e2\u308c\u3066\u3057\u307e\u3046\u305f\u3081\u3001\u5fc5\u8981\u306a\u7b87\u6240\u306b\u3064\u3044\u3066\u8ff0\u3079\u307e\u3059\u3002\n\u4eca\u56de\u5fc5\u8981\u306a\u7b87\u6240\u306f\u524d\u534a\u306e\u90e8\u5206\u3067\u3059\u3002\u524d\u534a\u306e\u7b87\u6240\u3092\\_\\_typeof\u3092\u9664\u3044\u3066\u5c55\u958b\u3059\u308b\u3068\u3001\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002\n\u306a\u304a\u3001INTERNAL\\_VSYSCALL\\_CALL\u306e\u5b9a\u7fa9\u306f\u3001sysdeps/unix/sysv/linux/sysdep-vdso.h \u306b\u3042\u308a\u307e\u3059\u3002\n\n```c\n  ({\n    __label__ out;\n    __label__ iserr;\n    // INTERNAL_SYSCALL_DECL\u306e\u5b9a\u7fa9\u306f\u7565 \n    long int sc_ret;\n\n    __typeof (__vdso_gettimeofday) vdsop = __vdso_gettimeofday;\n    // PTR_DEMANGLE\u306e\u5b9a\u7fa9\u306f\u7565\n    if (vdsop != NULL)\n      {\n    sc_ret = vpsop(args);\n\n```\n\n\u554f\u984c\u306f\u3001__vdso_gettimeofday\u306e\u5b9f\u4f53\u304c\u3069\u3053\u306b\u3044\u308b\u304b\u3068\u3044\u3046\u3053\u3068\u3067\u3059\u3002\u5c55\u958b\u3055\u308c\u305f\u30b3\u30fc\u30c9\u304b\u3089\u3001\u95a2\u6570\u306e\u5b9f\u4f53\u3082\u3057\u304f\u306f\u95a2\u6570\u30dd\u30a4\u30f3\u30bf\u3067\u3042\u308b\u3053\u3068\u306f\u60f3\u50cf\u3067\u304d\u307e\u3059\u3002\u3055\u3066\u3001\u3069\u3053\u306b\u3044\u308b\u306e\u3067\u3057\u3087\u3046\u304b\u3002\n\n## __vdso_getitimeofday\u306f\u3069\u3053\u306b\u3044\u308b\n\nglibc\u3092\u691c\u7d22\u3057\u3066\u307f\u308b\u3068\u3001\u4ee5\u4e0b\u306e\u30b3\u30fc\u30c9\u304c\u898b\u5f53\u305f\u308a\u307e\u3059\u3002\u3057\u304b\u3057\u3001\u5b9f\u4f53\u304c\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u308b\u308f\u3051\u3067\u306f\u306a\u3055\u305d\u3046\u3067\u3059\u3002\n\n```c:sysdeps/unix/sysv/linux/arm/init-first.c\n 24 int (*VDSO_SYMBOL(gettimeofday)) (struct timeval *, void *) attribute_hidden    ;\n 25 int (*VDSO_SYMBOL(clock_gettime)) (clockid_t, struct timespec *);\n 26 \n 27 static inline void\n 28 _libc_vdso_platform_setup (void)\n 29 {\n 30   PREPARE_VERSION_KNOWN (linux26, LINUX_2_6);\n 31 \n 32   void *p = _dl_vdso_vsym (\"__vdso_gettimeofday\", &linux26);\n 33   PTR_MANGLE (p);\n 34   VDSO_SYMBOL (gettimeofday) = p;\n// \u7565\n 39 }\n```\n\n\u5b9f\u306f\u3001__vdso_gettimeofday\u306e\u5b9f\u4f53\u306f\u3001Linux\u30ab\u30fc\u30cd\u30eb\u306e\u30bd\u30fc\u30b9\u30c4\u30ea\u30fc\u5185\u306b\u3044\u308b\u306e\u3067\u3059\uff01\u300c\u3048\uff1f\u300d\u3068\u8a00\u3044\u305f\u304f\u306a\u308a\u307e\u3059\u304c\u3001\u5148\u306b\u9032\u307f\u307e\u3057\u3087\u3046\u3002\n\n### Linux(arm)\u5074\u3067\u306f\u3069\u3046\u306a\u3063\u3066\u3044\u308b\n\nLinux(arm)\u5185\u306e__vdso_gettimeofday\u306e\u5b9f\u88c5\u306f\u4ee5\u4e0b\u306e\u3068\u304a\u308a\u3067\u3059\u3002\n\n```c:arch/arm/vdso/vgettimeofday.c\n246 notrace int __vdso_gettimeofday(struct timeval *tv, struct timezone *tz)\n247 {   \n248     struct timespec ts;\n249     struct vdso_data *vdata;\n250     int ret;\n251     \n252     vdata = __get_datapage();\n253     \n254     ret = do_realtime(&ts, vdata);\n255     if (ret)\n256         return gettimeofday_fallback(tv, tz);\n257     \n258     if (tv) {\n259         tv->tv_sec = ts.tv_sec;\n260         tv->tv_usec = ts.tv_nsec / 1000;\n261     }\n262     if (tz) {\n263         tz->tz_minuteswest = vdata->tz_minuteswest;\n264         tz->tz_dsttime = vdata->tz_dsttime;\n265     }\n266     \n267     return ret;\n268 }\n```\n\n\u78ba\u304b\u306b\u305d\u308c\u3063\u307d\u3044(\u5b9f\u969b\u306b\u305d\u3046\u306a\u3093\u3067\u3059\u304c(\u7b11))\u5b9f\u88c5\u3067\u3059\u3002\u3053\u306e\u95a2\u6570\u304c\u547c\u3070\u308c\u308b\u306e\u306a\u3089\u554f\u984c\u306f\u306a\u3055\u305d\u3046\u3067\u3059\u3002\n\u305f\u3060\u3001\u4eca\u56de\u306f\u5b9f\u88c5\u306e\u8a73\u7d30\u306b\u306f\u7acb\u3061\u5165\u308a\u307e\u305b\u3093\u3002\u7406\u7531\u306fgettimeofday()\u306e\u5b9f\u88c5\u3067\u306a\u304f\u3001vdso\u304c\u3069\u3046\u306a\u3063\u3066\u3044\u308b\u304b\u3092\u77e5\u308a\u305f\u3044\u305f\u3081\u3067\u3059\u3002\n\u305d\u3057\u3066\u3001\u30bd\u30fc\u30b9\u30c4\u30ea\u30fc\u306b\u691c\u7d22\u3092\u304b\u3051\u308b\u3068\u308f\u304b\u308b\u306e\u3067\u3059\u304c\u3001\u3082\u3046\u3072\u3068\u3064\u5927\u5207\u306a\u7b87\u6240\u304c\u3042\u308a\u307e\u3059\u3002\u305d\u308c\u306f\u4ee5\u4e0b\u306e\u30b3\u30fc\u30c9\u3067\u3059\u3002\n\n```c:arch/arm/vdso/vdso.lds.S\n 31 SECTIONS\n 32 {   \n 33     PROVIDE(_start = .);\n 34     \n 35     . = SIZEOF_HEADERS;\n 36     \n 37     .hash       : { *(.hash) }          :text\n 38     .gnu.hash   : { *(.gnu.hash) }\n 39     .dynsym     : { *(.dynsym) }\n 40     .dynstr     : { *(.dynstr) }\n/* \u7565(C\u306e\u30b3\u30e1\u30f3\u30c8\u5f62\u5f0f\u3067\u66f8\u304f\u306e\u3082\u4f55\u304b\u5909\u3060\u304c) */\n 55     .text       : { *(.text*) }         :text   =0xe7f001f2\n/* \u7565(C\u306e\u30b3\u30e1\u30f3\u30c8\u5f62\u5f0f\u3067\u66f8\u304f\u306e\u3082\u4f55\u304b\u5909\u3060\u304c) */\n 65 }\n 66 \n 67 /*\n 68  * We must supply the ELF program headers explicitly to get just one\n 69  * PT_LOAD segment, and set the flags explicitly to make segments read-only.\n 70  */\n 71 PHDRS\n 72 {\n 73     text        PT_LOAD     FLAGS(5) FILEHDR PHDRS; /* PF_R|PF_X */\n 74     dynamic     PT_DYNAMIC  FLAGS(4);       /* PF_R */\n 75     note        PT_NOTE     FLAGS(4);       /* PF_R */\n 76     eh_frame_hdr    PT_GNU_EH_FRAME;\n 77 }\n 78 \n 79 VERSION\n 80 {\n 81     LINUX_2.6 {\n 82     global:\n 83         __vdso_clock_gettime;\n 84         __vdso_gettimeofday;\n 85     local: *;\n 86     };\n 87 }\n```\n\n\u30ea\u30f3\u30ab\u30b9\u30af\u30ea\u30d7\u30c8\u306e\u5143\u3068\u306a\u308b\u30d5\u30a1\u30a4\u30eb\u3067\u3059\u3002arch/arm/vdso/Makefile\u3067\u306f\u6700\u7d42\u7684\u306b\u3053\u306e\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u306b\u3042\u308b\u30d5\u30a1\u30a4\u30eb\u7fa4\u3092\u7528\u3044\u3066\u6700\u7d42\u7684\u306b\u306fvdso.so\u3068\u3044\u3046ELF\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u4f5c\u6210\u3057\u307e\u3059\u3002\n\n```:arch/arm/vdso/Makefile\n# Build rules\ntargets := $(obj-vdso) vdso.so vdso.so.dbg vdso.so.raw vdso.lds\nobj-vdso := $(addprefix $(obj)/, $(obj-vdso))\n# \u7565\n# Force dependency\n$(obj)/vdso.o : $(obj)/vdso.so\n# \u7565\n```\n\n\u7701\u7565\u3057\u307e\u3059\u304c\u3001\u30ab\u30fc\u30cd\u30eb\u30d3\u30eb\u30c9\u306e\u969b\u306b\u3001arch/arm/Makefile\u7d4c\u7531\u3067arch/arm/vdso/Makefile\u304c\u53e9\u304b\u308c\u308b\u306e\u3067\u3001vdso.so\u304c\u4f5c\u3089\u308c\u308b\u306e\u306f\u30ab\u30fc\u30cd\u30eb\u30d3\u30eb\u30c9\u306e\u3068\u304d\u3060\u3068\u308f\u304b\u308a\u307e\u3059\u3002\n\n\u305d\u3057\u3066\u3001\u51fa\u6765\u4e0a\u304c\u3063\u305fvdso.so\u306f\u30ab\u30fc\u30cd\u30eb\u30d3\u30eb\u30c9\u306e\u904e\u7a0b\u3067\u3001vmlinux\u306e\u7279\u5b9a\u306e\u4f4d\u7f6e\u306b\u57cb\u3081\u8fbc\u307e\u308c\u307e\u3059\u3002\u305d\u306e\u300c\u7279\u5b9a\u306e\u4f4d\u7f6e\u300d\u306f\u3001\u4ee5\u4e0b\u306e\u30b3\u30fc\u30c9\u304b\u3089vdso_start\u3068\u3044\u3046\u30b7\u30f3\u30dc\u30eb\u540d\u3092\u5148\u982d\u3068\u3059\u308b\u9818\u57df\u3067\u3042\u308b\u3053\u3068\u304c\u308f\u304b\u308a\u307e\u3059\u3002\n\n```c:arch/arm/vdso/vdso.S\n 21 #include <linux/init.h>\n 22 #include <linux/linkage.h>\n 23 #include <linux/const.h>\n 24 #include <asm/page.h>\n 25 \n 26     .globl vdso_start, vdso_end\n 27     .section .data..ro_after_init\n 28     .balign PAGE_SIZE\n 29 vdso_start:\n 30     .incbin \"arch/arm/vdso/vdso.so\"\n 31     .balign PAGE_SIZE\n 32 vdso_end:\n 33 \n 34     .previous\n```\n\n## \u672c\u5f53\u306b\u57cb\u3081\u8fbc\u307e\u308c\u3066\u3044\u308b\u304b\u78ba\u8a8d\n\n\u30d3\u30eb\u30c9\u3057\u305farm\u7248Linux\u306e\u4e2d\u306b\u672c\u5f53\u306bvdso.so\u304c\u57cb\u3081\u8fbc\u307e\u308c\u3066\u3044\u308b\u304b\u78ba\u8a8d\u3057\u307e\u3057\u3087\u3046\u3002\n(\u610f\u56f3\u7684\u306b\u30e6\u30fc\u30b6\u540d\u3084\u30b3\u30de\u30f3\u30c9\u30d7\u30ed\u30f3\u30d7\u30c8\u306e\u4e00\u90e8\u3092\u7de8\u96c6\u3057\u3066\u3044\u307e\u3059\u3002\u3054\u4e86\u627f\u304f\u3060\u3055\u3044\u3002)\n\n### \u307e\u305a\u306f\u30ab\u30fc\u30cd\u30eb\u30d3\u30eb\u30c9\n\n\u30ab\u30fc\u30cd\u30eb\u30d3\u30eb\u30c9\u306e\u3084\u308a\u65b9\u306f\u3001[\u3053\u3061\u3089\u306e\u30da\u30fc\u30b8](http://www.oidon.net/linux/build-arm-linux)\u3092\u53c2\u8003\u306b\u3057\u3064\u3064\u3001\u4ee5\u4e0b\u306e\u65b9\u6cd5\u3067\u5b9f\u65bd\u3057\u307e\u3057\u305f\u3002\n\u306a\u304a\u3001\u79c1\u306e\u74b0\u5883\u306fUbuntu Linux 16.04\u306b\u306a\u308a\u307e\u3059\u3002\u30fb\u30fb\u30fb\u306a\u3093\u304b\u5148\u306e\u30da\u30fc\u30b8\u3068\u304b\u306a\u308a\u9055\u3046\u3051\u3069\u30fb\u30fb\u30fb\u3002\n\n(1)\u307e\u305a\u306f\u30af\u30ed\u30b9\u74b0\u5883\u3092\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3057\u307e\u3059\u3002\n\n```\napt-get install gcc-arm-none-eabi\n```\n\n(2) \u30ab\u30fc\u30cd\u30eb\u30bd\u30fc\u30b9\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u3067\u3001\u4ee5\u4e0b\u306e\u30b3\u30de\u30f3\u30c9\u3092\u5b9f\u884c\u3057\u3001arch/arm/configs\u306b\u3042\u308b\u8a2d\u5b9a\u30d5\u30a1\u30a4\u30eb(multi_v7_defconfig)\u306e\u8a2d\u5b9a\u3092\u9069\u7528\u3057\u3066\u3001.config\u3092\u4f5c\u308a\u307e\u3059\u3002\n\u3053\u306e\u8a2d\u5b9a\u30d5\u30a1\u30a4\u30eb\u3092\u9078\u3093\u3060\u7406\u7531\u306f\u3001\u30c7\u30d5\u30a9\u30eb\u30c8\u3067VDSO\u304c\u6709\u52b9\u306b\u306a\u3063\u3066\u3044\u3066\u624b\u9593\u304c\u304b\u304b\u3089\u306a\u3044\u304b\u3089\u3067\u3059\u3002\n\n```\nmake ARCH=arm multi_v7_defconfig\n```\n\n(3)\u30ab\u30fc\u30cd\u30eb\u30d3\u30eb\u30c9\u3057\u307e\u3059\u3002\u304a\u99b4\u67d3\u307f\u306evmlinux\u304c\u30d3\u30eb\u30c9\u3055\u308c\u307e\u3059\u306d\u3002\n\n```\nmake ARCH=arm CROSS_COMPILE=arm-none-eabi-\n```\n\n### vmlinux\u5185\u306evdso.so\u3092\u78ba\u8a8d\n\n\n\u307e\u305a\u3001vdso.so\u306e\u30b5\u30a4\u30ba\u3092\u78ba\u8a8d\u3057\u307e\u3059\u3002\n\n```\n % ls -al arch/arm/vdso/vdso.so\n-rwxrwxr-x 1 hoge hoge 2700 12\u6708 22 22:48 arch/arm/vdso/vdso.so\n```\n\nreadelf\u3067\u30bb\u30af\u30b7\u30e7\u30f3\u30d8\u30c3\u30c0\u3092\u78ba\u8a8d\u3057\u305f\u3046\u3048\u3001arm\u30af\u30ed\u30b9\u30c4\u30fc\u30eb\u306enm\u3067vdso_start\u306e\u4f4d\u7f6e\u3092\u78ba\u8a8d\u3057\u307e\u3057\u3087\u3046\u3002\n\n```\n % readelf -S vmlinux                                                                                                                                                                          \n34 \u500b\u306e\u30bb\u30af\u30b7\u30e7\u30f3\u30d8\u30c3\u30c0\u3001\u59cb\u70b9\u30aa\u30d5\u30bb\u30c3\u30c8 0x13e613c:\n\n\u30bb\u30af\u30b7\u30e7\u30f3\u30d8\u30c3\u30c0:\n  [\u756a] \u540d\u524d              \u30bf\u30a4\u30d7          \u30a2\u30c9\u30ec\u30b9 Off    \u30b5\u30a4\u30ba ES Flg Lk Inf Al\n  [ 0]                   NULL            00000000 000000 000000 00      0   0  0\n  [ 1] .head.text        PROGBITS        c0208000 008000 00026c 00  AX  0   0  4\n  [ 2] .text             PROGBITS        c0300000 010000 8e0e28 00  AX  0   0 4096\n  [ 3] .fixup            PROGBITS        c0be0e28 8f0e28 00001c 00  AX  0   0  4\n  [ 4] .rodata           PROGBITS        c0c00000 900000 37f300 00  WA  0   0 4096\n  [ 5] __bug_table       PROGBITS        c0f7f300 c7f300 008238 00   A  0   0  4\n// \u7701\u7565\n  [33] .strtab           STRTAB          00000000 1222fec 1c2fea 00      0   0  1\n\u30d5\u30e9\u30b0\u306e\u30ad\u30fc:\n  W (write), A (alloc), X (\u5b9f\u884c), M (merge), S (\u6587\u5b57\u5217)\n  I (\u60c5\u5831), L (\u30ea\u30f3\u30af\u9806), G (\u30b0\u30eb\u30fc\u30d7), T (TLS), E (\u6392\u4ed6), x (\u4e0d\u660e)\n  O (\u8ffd\u52a0\u306e OS \u51e6\u7406\u304c\u5fc5\u8981) o (OS \u56fa\u6709), p (\u30d7\u30ed\u30bb\u30c3\u30b5\u56fa\u6709)\n\n % arm-none-eabi-nm vmlinux | grep vdso_start                                                                                                                                                  \nc0f7e000 R vdso_start\n```\n\n\u3053\u308c\u3067\u30d5\u30a1\u30a4\u30eb\u5148\u982d\u304b\u3089vdso_start\u306e\u3042\u308b\u4f4d\u7f6e\u304c\u308f\u304b\u308a\u307e\u3057\u305f( 0xc0f7e000 - 0xc0c00000 + 0x900000)\u306e\u3067\u3001vdso.so\u306e\u30b5\u30a4\u30ba\u5206\u5207\u308a\u51fa\u3057\u307e\u3059\u3002\n\u305d\u306e\u4e0a\u3067vdso.so\u3068\u4e00\u81f4\u3059\u308b\u304b\u78ba\u8a8d\u3057\u307e\u3057\u3087\u3046\u3002\n\n```\n % dd if=vmlinux of=vdso.bin bs=1 count=2700 skip=13099008\n2700+0 \u30ec\u30b3\u30fc\u30c9\u5165\u529b\n2700+0 \u30ec\u30b3\u30fc\u30c9\u51fa\u529b\n2700 bytes (2.7 kB, 2.6 KiB) copied, 0.00900085 s, 300 kB/s\n\n % diff arch/arm/vdso/vdso.so vdso.bin \n```\n\n\u78ba\u304b\u306b\u4e00\u81f4\u3057\u307e\u3057\u305f\u3002\u3042\u3068\u306f\u3001\u3069\u3046\u3084\u3063\u3066vdso.so\u3092\u30e6\u30fc\u30b6\u7a7a\u9593\u306b\u898b\u305b\u308b\u304b\u3092\u898b\u307e\u3057\u3087\u3046\u3002\n\n### \u30e6\u30fc\u30b6\u7a7a\u9593\u306bvdso\u3092\u898b\u305b\u308b\n\n\u30ab\u30fc\u30cd\u30eb\u306b\u57cb\u3081\u8fbc\u307e\u308c\u305fvdso.so\u306f\u3001exec\u306e\u969b\u306b\u30e6\u30fc\u30b6\u30a2\u30c9\u30ec\u30b9\u7a7a\u9593\u306b\u30de\u30c3\u30d7\u3055\u308c\u307e\u3059\u3002\nexec\u306e\u30e1\u30a4\u30f3\u51e6\u7406\u3067\u3042\u308bdo_execveat_common()\u304b\u3089\u4ee5\u4e0b\u95a2\u6570\u7fa4\u306e\u547c\u3073\u51fa\u3057\u3092\u7d4c\u3066\u3001arch_setup_additional_pages()\u304c\u547c\u3070\u308c\u3001\u305d\u306e\u5148\u3067vdso.so\u306e\u30de\u30c3\u30d7\u304c\u884c\u308f\u308c\u307e\u3059\u3002\n\n```c:fs/exec.c\n/*\n * sys_execve() executes a new program.\n */\nstatic int do_execveat_common(int fd, struct filename *filename,\n                  struct user_arg_ptr argv,\n                  struct user_arg_ptr envp,\n                  int flags)\n{\n/* \u7565 */\n    retval = exec_binprm(bprm);\n    if (retval < 0)\n        goto out;\n```\n\n```c:fs/exec.c\nstatic int exec_binprm(struct linux_binprm *bprm)\n{\n/* \u7565 */\n    ret = search_binary_handler(bprm);\n    if (ret >= 0) {\n        audit_bprm(bprm);\n        trace_sched_process_exec(current, old_pid, bprm);\n        ptrace_event(PTRACE_EVENT_EXEC, old_vpid);\n        proc_exec_connector(current);\n    }\n\n    return ret;\n}\n```\n\n```c:fs/exec.c\n\n/*\n * cycle the list of binary formats handler, until one recognizes the image\n */\nint search_binary_handler(struct linux_binprm *bprm)\n{\n/* \u7565 */\n retry:\n    read_lock(&binfmt_lock);\n    list_for_each_entry(fmt, &formats, lh) {\n/* \u7565 */\n        retval = fmt->load_binary(bprm);\n```\n\n```c:fs/binfmt_elf.c\nstatic int load_elf_binary(struct linux_binprm *bprm)\n{\n/* \u7565 */\n#ifdef ARCH_HAS_SETUP_ADDITIONAL_PAGES\n    retval = arch_setup_additional_pages(bprm, !!elf_interpreter);\n    if (retval < 0)\n        goto out;\n#endif /* ARCH_HAS_SETUP_ADDITIONAL_PAGES */\n```\n\narch_setup_additional_pages()\u3067\u306f\u3001\u6700\u5f8c\u306barm_install_vdso()\u3092\u547c\u3073\u51fa\u3057\u307e\u3059\u3002\n\n```c:arch/arm/kernel/process.c\nint arch_setup_additional_pages(struct linux_binprm *bprm, int uses_interp)\n{\n    struct mm_struct *mm = current->mm;\n/* \u7565 */\n    /* Unlike the sigpage, failure to install the vdso is unlikely\n     * to be fatal to the process, so no error check needed\n     * here.\n     */\n    arm_install_vdso(mm, addr + PAGE_SIZE);\n \nup_fail:\n    up_write(&mm->mmap_sem);\n    return ret;\n}\n```\n\n\u4ee5\u4e0b\u304carm\\_install\\_vdso()\u3067\u3059\u3002\u3053\u306e\u95a2\u6570\u3067\u306f\u3001\\_install\\_special\\_mapping()\u3092\u547c\u3073\u51fa\u3057\u3001\u3053\u308c\u306b\u3088\u3063\u3066\u6700\u5f8c\u306e\u5f15\u6570vdso\\_text\\_mapping\u3067\u6307\u5b9a\u3057\u305f\u9818\u57df\u3092\u30de\u30c3\u30d7\u3057\u307e\u3059\u3002\n\n```c:arch/arm/kernel/process.c\n/* assumes mmap_sem is write-locked */ \nvoid arm_install_vdso(struct mm_struct *mm, unsigned long addr)\n{\n    struct vm_area_struct *vma;\n    unsigned long len;\n        \n    mm->context.vdso = 0;\n\n    if (vdso_text_pagelist == NULL)\n        return;\n    \n    if (install_vvar(mm, addr))\n        return;\n\n    /* Account for vvar page. */\n    addr += PAGE_SIZE;\n    len = (vdso_total_pages - 1) << PAGE_SHIFT;\n    \n    vma = _install_special_mapping(mm, addr, len,\n        VM_READ | VM_EXEC | VM_MAYREAD | VM_MAYWRITE | VM_MAYEXEC,\n        &vdso_text_mapping);\n\n    if (!IS_ERR(vma))\n        mm->context.vdso = addr;\n}\n```\n\nvdso\\_text\\_mapping\u306f\u30ab\u30fc\u30cd\u30eb\u306e\u8d77\u52d5\u6642\u306b\u4ee5\u4e0b\u306e\u95a2\u6570\u3067\u521d\u671f\u5316\u3055\u308c\u307e\u3059\u3002\u5148\u306b\u66f8\u3044\u305fvdso\\_start\u3068vdso\\_end\u306b\u631f\u307e\u308c\u305f\u9818\u57df(\u30da\u30fc\u30b8)\u3092\u793a\u3059page\u69cb\u9020\u4f53\u3092\u53d6\u5f97\u3057\u3001\u3053\u308c\u3092\u7528\u3044\u3066vdso\\_text\\_mapping\u3092\u521d\u671f\u5316\u3057\u3066\u3044\u308b\u306e\u304c\u308f\u304b\u308a\u307e\u3059\u3002\n\n```c:arch/arm/kernel/vdso.c\n/*\n * The VDSO data page.\n */\n/* \u7565 */\nstatic struct vm_special_mapping vdso_text_mapping __ro_after_init = {\n    .name = \"[vdso]\",\n};\n/* \u7565 */\nstatic int __init vdso_init(void)\n{\n    unsigned int text_pages;\n    int i;\n\n    if (memcmp(&vdso_start, \"\\177ELF\", 4)) {\n        pr_err(\"VDSO is not a valid ELF object!\\n\");\n        return -ENOEXEC;\n    }\n\n    text_pages = (&vdso_end - &vdso_start) >> PAGE_SHIFT;\n/* \u7565 */\n\n    /* Grab the VDSO text pages. */\n    for (i = 0; i < text_pages; i++) {\n        struct page *page;\n\n        page = virt_to_page(&vdso_start + i * PAGE_SIZE);\n        vdso_text_pagelist[i] = page;\n    }\n\n    vdso_text_mapping.pages = vdso_text_pagelist;\n\n    vdso_total_pages = 1; /* for the data/vvar page */\n    vdso_total_pages += text_pages; \n```\n\n\u3053\u308c\u3067\u78ba\u304b\u306bvdso.so\u304c\u30e6\u30fc\u30b6\u7a7a\u9593\u304b\u3089\u898b\u3048\u308b\u3088\u3046\u306b\u306a\u308a\u305d\u3046\u3067\u3059\u3002\n\n### \u6700\u5f8c\u306b\n\n\u4eca\u56de\u306fARM\u7248Linux\u3067VDSO\u3092\u3069\u3046\u5b9f\u73fe\u3057\u3066\u3044\u308b\u304b\u78ba\u304b\u3081\u3066\u307f\u307e\u3057\u305f\u3002\n\u30ab\u30fc\u30cd\u30eb\u306e\u30bd\u30fc\u30b9\u3092\u8aad\u3080\u306e\u3082\u3068\u3066\u3082\u9762\u767d\u3044\u306e\u3067\u3059\u304c\u3001\u30d3\u30eb\u30c9\u3057\u305f\u30d0\u30a4\u30ca\u30ea\u3067\u3061\u3087\u3063\u3068\u904a\u3093\u3067\u307f\u308b\u306e\u3082\u307e\u305f\u4e00\u8208\u3067\u3059\u3002\u307e\u305f\u3001\u666e\u6bb5\u306fx86\u306e\u4eba\u3082\u305f\u307e\u306b\u306fARM\u3084MIPS\u306e\u30b3\u30fc\u30c9\u3092\u8aad\u3093\u3067\u307f\u308b\u3068\u3001\u65b0\u305f\u306a\u767a\u898b\u304c\u3042\u308a\u307e\u3059\u3002\n\u30ab\u30fc\u30cd\u30eb\u306e\u30bd\u30fc\u30b9\u3092\u8aad\u3080\u306e\u306f\u3069\u3053\u304b\u3089\u8aad\u3081\u3070\u3088\u3044\u306e\u304b\u805e\u304b\u308c\u307e\u3059\u304c\u3001\u307e\u3042\u3001\u65e5\u5e38\u306e\u3061\u3087\u3063\u3068\u3057\u305f\u7591\u554f\u306e\u89e3\u6d88\u30ec\u30d9\u30eb\u3067\u8208\u5473\u3042\u308b\u3068\u3053\u308d\u304b\u3089\u5c11\u3057\u305a\u3064\u8aad\u3093\u3067\u307f\u308c\u3070\u826f\u3044\u3068\u601d\u3044\u307e\u3059\u3002\n\u4eca\u5e74\u3082\u5c11\u306a\u304f\u306a\u308a\u3001\u76f8\u5909\u308f\u3089\u305a\u9032\u6357\u306b\u8ffd\u308f\u308c\u3063\u3071\u306a\u3057\u3001\u3053\u306e\u8a18\u4e8b\u3082\u9032\u6357\u9045\u308c\u307e\u3057\u305f\u304c\u3001\u6700\u5f8c\u306b\u30cf\u30c3\u30d4\u30fc\u306b\u306a\u308c\u308b\u3053\u3068\u3092\u7948\u308a\u307e\u3059\u3002\n\u305d\u308c\u3067\u306f\u3001\u7686\u69d8\u3001Happy Hacking!\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"}