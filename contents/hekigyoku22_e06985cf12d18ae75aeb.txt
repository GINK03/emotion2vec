{"context": " More than 1 year has passed since last update.IntStream.range(int from,int to)\u306e\u3088\u3046\u306a\u3082\u306e\u304cDate\u3067\u3082\u307b\u3057\u3044\u306a\u3042\u3068\u601d\u3044\u3001\u4f5c\u3063\u3066\u307f\u307e\u3057\u305f\u3002\n\n\u5b9f\u88c5\n\nBetween.java\n@ValidTrue(\"from < to\")\npublic class Between<T extends Temporal & Comparable<? super T>> {\n    private T from;\n    private T to;\n\n    public Between(T from, T to){\n        this.from = from;\n        this.to = to;\n    }\n    public Stream<T> each(ChronoUnit unit, UnaryOperator<T> adjuster, int skip){\n        T adjfrom = adjuster.apply(from);\n        while(from.compareTo(adjfrom)>0) adjfrom = unit.addTo(from, 1);\n\n        long size = adjfrom.until(to, unit)/skip;\n\n        return Stream.iterate(adjfrom, d -> unit.addTo(d, skip)).limit(size);\n    }\n}\n\n\nTemporalAdjuster\u3068\u3044\u3046\u306e\u304c\u3001Temporal -> Temporal\u306e\u4fee\u6b63\u5909\u63db\u3092\u3057\u3066\u304f\u308c\u308b\u306e\u3067\u3059\u304c\u3001\u3053\u308c TemporalAdjuster<T extends Temporal>\u3058\u3083\u306a\u3044\u3093\u3067\u3059\u30fb\u30fb\u30fbadjust\u3059\u308b\u3068\u578b\u3092\u5931\u3063\u3066\u3057\u307e\u3046\u306e\u3067\u4f7f\u3048\u306a\u3044\u3068\u3044\u3046\u30fb\u30fb\u30fb\u30fbT\u578b\u3092\u5fa9\u6d3b\u3059\u308b\u65b9\u6cd5\u304c\u3042\u308a\u307e\u305b\u3093\u304b\u306d\u3002\nTemporalQuery\u3092\u81ea\u5206\u3067\u4f5c\u308b\u306e\u3060\u308d\u3046\u304b\u3002\n\nTest\n\nBetweenTest.java\npublic class BetweenTest {\n    @Test\n    public void test(){\n        //\u6bce\u65e5\n        Between<LocalDate> between = new Between<>(LocalDate.now(),LocalDate.now().plusDays(50));\n        between.each(ChronoUnit.DAYS , d -> d ,1).forEach(System.out::println);\n        System.out.println(\"***********\");\n\n        //\u9694\u9031\u65e5\u66dc\u65e5\n        between.each(ChronoUnit.WEEKS , d -> d.with(DayOfWeek.SUNDAY) ,2).forEach(System.out::println);\n        System.out.println(\"***********\");\n\n        //\u6bce\u6708\u6700\u7d42\u65e5\n        Between<YearMonth> between2 = new Between<>(YearMonth.now(),YearMonth.now().plusMonths(12));\n        between2.each(ChronoUnit.MONTHS , m -> m , 1  ).map( YearMonth::atEndOfMonth ).forEach(System.out::println);\n        System.out.println(\"***********\");\n\n        //\u6bce\u6708\u7b2c\uff13\u65e5\u66dc\u65e5\n        between2.each(ChronoUnit.MONTHS , m -> m , 1  ).map( d -> d.atDay(1).with(TemporalAdjusters.dayOfWeekInMonth(3, DayOfWeek.SUNDAY ))).forEach(System.out::println);\n        System.out.println(\"***********\");\n\n        //\u6bce\u5e74\uff14\u6708\uff11\u65e5\n        Between<Year> between3 = new Between<>(Year.now(),Year.now().plusYears(10));\n        between3.each(ChronoUnit.YEARS, y -> y, 1).map( y -> y.atMonthDay(MonthDay.of(4, 1))).forEach(System.out::println);\n    }\n}\n\n\n\u3068\u3044\u3046\u308f\u3051\u3067\u3001\u3044\u308d\u3093\u306aTemporal\u306e\u30ea\u30b9\u30c8\u304c\u4f5c\u308c\u305d\u3046\u3067\u3059\u3002\n\n\u7dcf\u62ec\n\u8003\u3048\u4e2d\u30fb\u30fb\u30fb\n\n\u8ab2\u984c\n\nTemporalAdjuster\u30fb\u30fb\u30fb\nDay\u578b\u304c\u306a\u3044\nT\u578b\u3092\u5fa9\u6d3b\u3059\u308b\u65b9\u6cd5\n\ny -> y \u3053\u308c\u3092\u66f8\u304f\u30af\u30fc\u30eb\u306a\u30e9\u30e0\u30c0\u5f0f\u3092\u6559\u3048\u3066\u304f\u3060\u3055\u3044\u3002\n\n\n(\u8ffd\u52a0)\n        //\u6bce\u9031\u571f\u66dc\u65e5\u3068\u65e5\u66dc\u65e5\n        between.each(ChronoUnit.WEEKS , d -> d.with(DayOfWeek.SATURDAY) ,1).flatMap( d -> Stream.of(d,d.plusDays(1))).forEach(System.out::println);\n\n\u307e\u3042\u3001\nbetween.stream().filter( d -> d.getDayOfWeek()==DayOfWeek.SUNDAY ||d.getDayOfWeek()==DayOfWeek.SATURDAY)\n\n\u307f\u305f\u3044\u306b\u5168\u90e8\u30d5\u30a3\u30eb\u30bf\u3067\u3044\u3044\u3088\u3068\u8a00\u308f\u308c\u308b\u3068\u307e\u3042\u305d\u308c\u3067\u3082\u3044\u3044\u3093\u3067\u3059\u304c\u3001\u5168\u65e5\u8d70\u67fb\u3059\u308b\u3088\u308a\u65e9\u3044\u3058\u3083\u3093\u3001\u3068\u8a00\u3046\u6c17\u5206\u3067\u3059\u3002\nIntStream.range(int from,int to)\u306e\u3088\u3046\u306a\u3082\u306e\u304cDate\u3067\u3082\u307b\u3057\u3044\u306a\u3042\u3068\u601d\u3044\u3001\u4f5c\u3063\u3066\u307f\u307e\u3057\u305f\u3002\n\n# \u5b9f\u88c5\n\n```Java:Between.java\n@ValidTrue(\"from < to\")\npublic class Between<T extends Temporal & Comparable<? super T>> {\n\tprivate T from;\n\tprivate T to;\n\n\tpublic Between(T from, T to){\n\t\tthis.from = from;\n\t\tthis.to = to;\n\t}\n\tpublic Stream<T> each(ChronoUnit unit, UnaryOperator<T> adjuster, int skip){\n\t\tT adjfrom = adjuster.apply(from);\n\t\twhile(from.compareTo(adjfrom)>0) adjfrom = unit.addTo(from, 1);\n\t\t\n\t\tlong size = adjfrom.until(to, unit)/skip;\n\n\t\treturn Stream.iterate(adjfrom, d -> unit.addTo(d, skip)).limit(size);\n\t}\n}\n```\nTemporalAdjuster\u3068\u3044\u3046\u306e\u304c\u3001Temporal -> Temporal\u306e\u4fee\u6b63\u5909\u63db\u3092\u3057\u3066\u304f\u308c\u308b\u306e\u3067\u3059\u304c\u3001\u3053\u308c `TemporalAdjuster<T extends Temporal>`\u3058\u3083\u306a\u3044\u3093\u3067\u3059\u30fb\u30fb\u30fbadjust\u3059\u308b\u3068\u578b\u3092\u5931\u3063\u3066\u3057\u307e\u3046\u306e\u3067\u4f7f\u3048\u306a\u3044\u3068\u3044\u3046\u30fb\u30fb\u30fb\u30fbT\u578b\u3092\u5fa9\u6d3b\u3059\u308b\u65b9\u6cd5\u304c\u3042\u308a\u307e\u305b\u3093\u304b\u306d\u3002\nTemporalQuery\u3092\u81ea\u5206\u3067\u4f5c\u308b\u306e\u3060\u308d\u3046\u304b\u3002\n\n# Test\n\n```Java:BetweenTest.java\npublic class BetweenTest {\n\t@Test\n\tpublic void test(){\n\t\t//\u6bce\u65e5\n\t\tBetween<LocalDate> between = new Between<>(LocalDate.now(),LocalDate.now().plusDays(50));\n\t\tbetween.each(ChronoUnit.DAYS , d -> d ,1).forEach(System.out::println);\n\t\tSystem.out.println(\"***********\");\n\n\t\t//\u9694\u9031\u65e5\u66dc\u65e5\n\t\tbetween.each(ChronoUnit.WEEKS , d -> d.with(DayOfWeek.SUNDAY) ,2).forEach(System.out::println);\n\t\tSystem.out.println(\"***********\");\n\n\t\t//\u6bce\u6708\u6700\u7d42\u65e5\n\t\tBetween<YearMonth> between2 = new Between<>(YearMonth.now(),YearMonth.now().plusMonths(12));\n\t\tbetween2.each(ChronoUnit.MONTHS , m -> m , 1  ).map( YearMonth::atEndOfMonth ).forEach(System.out::println);\n\t\tSystem.out.println(\"***********\");\n\n\t\t//\u6bce\u6708\u7b2c\uff13\u65e5\u66dc\u65e5\n\t\tbetween2.each(ChronoUnit.MONTHS , m -> m , 1  ).map( d -> d.atDay(1).with(TemporalAdjusters.dayOfWeekInMonth(3, DayOfWeek.SUNDAY ))).forEach(System.out::println);\n\t\tSystem.out.println(\"***********\");\n\n\t\t//\u6bce\u5e74\uff14\u6708\uff11\u65e5\n\t\tBetween<Year> between3 = new Between<>(Year.now(),Year.now().plusYears(10));\n\t\tbetween3.each(ChronoUnit.YEARS, y -> y, 1).map( y -> y.atMonthDay(MonthDay.of(4, 1))).forEach(System.out::println);\n\t}\n}\n```\n\u3068\u3044\u3046\u308f\u3051\u3067\u3001\u3044\u308d\u3093\u306aTemporal\u306e\u30ea\u30b9\u30c8\u304c\u4f5c\u308c\u305d\u3046\u3067\u3059\u3002\n\n\n# \u7dcf\u62ec\n\u8003\u3048\u4e2d\u30fb\u30fb\u30fb\n\n## \u8ab2\u984c\n\n* TemporalAdjuster\u30fb\u30fb\u30fb\n* Day\u578b\u304c\u306a\u3044\n* T\u578b\u3092\u5fa9\u6d3b\u3059\u308b\u65b9\u6cd5\n* `y -> y` \u3053\u308c\u3092\u66f8\u304f\u30af\u30fc\u30eb\u306a\u30e9\u30e0\u30c0\u5f0f\u3092\u6559\u3048\u3066\u304f\u3060\u3055\u3044\u3002\n\n### (\u8ffd\u52a0)\n\n```java\n\t\t//\u6bce\u9031\u571f\u66dc\u65e5\u3068\u65e5\u66dc\u65e5\n\t\tbetween.each(ChronoUnit.WEEKS , d -> d.with(DayOfWeek.SATURDAY) ,1).flatMap( d -> Stream.of(d,d.plusDays(1))).forEach(System.out::println);\n```\n\u307e\u3042\u3001\n\n```Java:\nbetween.stream().filter( d -> d.getDayOfWeek()==DayOfWeek.SUNDAY ||d.getDayOfWeek()==DayOfWeek.SATURDAY)\n```\n\n\u307f\u305f\u3044\u306b\u5168\u90e8\u30d5\u30a3\u30eb\u30bf\u3067\u3044\u3044\u3088\u3068\u8a00\u308f\u308c\u308b\u3068\u307e\u3042\u305d\u308c\u3067\u3082\u3044\u3044\u3093\u3067\u3059\u304c\u3001\u5168\u65e5\u8d70\u67fb\u3059\u308b\u3088\u308a\u65e9\u3044\u3058\u3083\u3093\u3001\u3068\u8a00\u3046\u6c17\u5206\u3067\u3059\u3002\n\n", "tags": ["java8", "java.text", "date", "LocalDate"]}