{"context": "\n\nNSUserDefaults\u304c\u4e0d\u4fbf\n\u4eca\u306eNSUserDefaults\u306e\u4e0d\u6e80\nObject\u3092\u53d6\u308a\u51fa\u3057\u3066\u3000\u2192\u3000nil\u30c1\u30a7\u30c3\u30af\u3057\u3066\u3000\u2192\u3000\u30ad\u30e3\u30b9\u30c8\u3057\u3066\u3000\u2192\u3000\u3084\u3063\u3068\u4f7f\u3048\u308b\u3002\n\u3064\u307e\u308a\u3000\n//==================================\n//\u4fdd\u5b58\u6642\nlet defaults = NSUserDefaults()\ndefaults.setObject(\"Hello World\",forKey:\"sample\")\n//==================================\n//\u8aad\u307f\u8fbc\u307f\u6642\nlet defaults = NSUserDefaults()\nif let data = defaults.objectForKey(\"sample\") as? String{\n    ...\n}\n\n\n\n\uff3f\u4eba\u4eba\u4eba\u4eba\u4eba\u4eba\u4eba\u4eba\uff3f\n\uff1e\u3000\u3081\u3093\u3069\u304f\u3055\u3044\u3000\uff1c\n\uffe3Y^Y^Y^Y^Y^Y^Y^Y\uffe3\n\n\u3053\u3046\u3059\u308b\n let Info = RMInfo()\n\n let data = [\"a\",\"b\",\"c\"]\n Info.save(data,id:\"obj\")\n=========================================\n let object = Info.load([String].self,id:\"obj\")//[\"a\",\"b\",\"c\"]\n\n object.count //3\n\nInfo.load(String.self,\"sample\")//\"\" \n//\u4fdd\u5b58\u3055\u308c\u305f\u5024\u304c\u306a\u3044\u5834\u5408\u306f,Int\u306a\u30890,String\u306a\u3089\"\",Array\u306a\u3089[]\u3092\u8fd4\u3059\u3002\n\n\n\n\u3000\n\n\u5b9f\u88c5\nimport UIKit\n\nprotocol defaultValueProtocol {\n    associatedtype U\n    static var defaultValue:U{get}\n}\n\nclass RMInfo: NSObject {\n    private var defaults = NSUserDefaults()\n\n    func load<T: defaultValueProtocol>(type:T.Type,id:String)->T.U{\n        if let object = defaults.objectForKey(id) as? T.U{\n            return object\n        }else{\n            return T.defaultValue\n        }\n    }\n    func save(object:AnyObject,id:String){\n        defaults.setObject(object, forKey: id)\n        defaults.synchronize()\n    }\n    func resetByType<T :defaultValueProtocol>(type:T.Type){\n        let dict = defaults.dictionaryRepresentation()\n        for key in dict.keys {\n            if defaults.objectForKey(key) is T {\n                defaults.removeObjectForKey(key)\n            }\n        }\n        defaults.synchronize()\n    }\n    func resetByContainsName(containsName:String){\n        let dict = defaults.dictionaryRepresentation()\n        for key in dict.keys {\n            if key.containsString(containsName){\n                defaults.removeObjectForKey(key)\n            }\n        }\n        defaults.synchronize()\n    }\n    func resetAll(){\n        let dict = defaults.dictionaryRepresentation()\n        for key in dict.keys {\n            defaults.removeObjectForKey(key)\n        }\n        defaults.synchronize()\n    }\n}\n\n\nextension Int:defaultValueProtocol{\n    typealias U = Int\n    static var defaultValue: Int.U{\n        return 0\n    }\n}\nextension Bool:defaultValueProtocol{\n    typealias U = Bool\n    static var defaultValue: Bool.U{\n        return false\n    }\n}\nextension Double:defaultValueProtocol{\n    typealias U = Double\n    static var defaultValue: Double.U{\n        return 0.0\n    }\n}\nextension Float:defaultValueProtocol{\n    typealias U = Float\n    static var defaultValue: Float.U{\n        return 0.0\n    }\n}\nextension CGFloat:defaultValueProtocol{\n    typealias U = CGFloat\n    static var defaultValue: CGFloat.U{\n        return 0.0\n    }\n}\nextension String:defaultValueProtocol{\n    typealias U = String\n    static var defaultValue: String.U{\n        return \"\"\n    }\n}\nextension Array :defaultValueProtocol{\n    typealias U = Array\n    static var defaultValue: Array.U{\n        return []\n    }\n}\nextension Dictionary :defaultValueProtocol{\n    typealias U = Dictionary\n    static var defaultValue: Dictionary.U{\n        return [:]\n    }\n}\nextension NSURL: defaultValueProtocol{\n    typealias U = NSURL\n    static var defaultValue: NSURL.U{\n        return NSURL()\n    }\n}\n\n\n\u4ed6\u306b\u3082\u4fdd\u5b58\u3057\u305f\u3044\u578b\u304c\u3042\u308b\u306a\u3089\nextension \u4fdd\u5b58\u3057\u305f\u3044\u578b:defaultValueProtocol{\n    typealias U = \u4fdd\u5b58\u3057\u305f\u3044\u578b\n    static var defaultValue: \u4fdd\u5b58\u3057\u305f\u3044\u578b.U{\n        return \u30c7\u30d5\u30a9\u30eb\u30c8\u306e\u5024\n    }\n}\n\n\u3067\u8ffd\u52a0\u53ef\u80fd\n\nRM\nSwift\u306e\u30b8\u30a7\u30cd\u30ea\u30af\u30b9\u304c\u4fbf\u5229\u3059\u304e\u3066\u60da\u308c\u305d\u3046\u3002\n#NSUserDefaults\u304c\u4e0d\u4fbf\n\u4eca\u306eNSUserDefaults\u306e\u4e0d\u6e80\nObject\u3092\u53d6\u308a\u51fa\u3057\u3066\u3000\u2192\u3000nil\u30c1\u30a7\u30c3\u30af\u3057\u3066\u3000\u2192\u3000\u30ad\u30e3\u30b9\u30c8\u3057\u3066\u3000\u2192\u3000\u3084\u3063\u3068\u4f7f\u3048\u308b\u3002\n\u3064\u307e\u308a\u3000\n\n```swift:\n//==================================\n//\u4fdd\u5b58\u6642\nlet defaults = NSUserDefaults()\ndefaults.setObject(\"Hello World\",forKey:\"sample\")\n//==================================\n//\u8aad\u307f\u8fbc\u307f\u6642\nlet defaults = NSUserDefaults()\nif let data = defaults.objectForKey(\"sample\") as? String{\n    ...\n}\n\n\n```\n\n\uff3f\u4eba\u4eba\u4eba\u4eba\u4eba\u4eba\u4eba\u4eba\uff3f\n\uff1e\u3000\u3081\u3093\u3069\u304f\u3055\u3044\u3000\uff1c\n\uffe3Y^Y^Y^Y^Y^Y^Y^Y\uffe3\n\n#\u3053\u3046\u3059\u308b\n\n```swift\n let Info = RMInfo()\n \n let data = [\"a\",\"b\",\"c\"]\n Info.save(data,id:\"obj\")\n=========================================\n let object = Info.load([String].self,id:\"obj\")//[\"a\",\"b\",\"c\"]\n \n object.count //3\n\nInfo.load(String.self,\"sample\")//\"\" \n//\u4fdd\u5b58\u3055\u308c\u305f\u5024\u304c\u306a\u3044\u5834\u5408\u306f,Int\u306a\u30890,String\u306a\u3089\"\",Array\u306a\u3089[]\u3092\u8fd4\u3059\u3002\n\n\n```\n\u3000\n#\u5b9f\u88c5\n\n```swift\nimport UIKit\n\nprotocol defaultValueProtocol {\n    associatedtype U\n    static var defaultValue:U{get}\n}\n\nclass RMInfo: NSObject {\n    private var defaults = NSUserDefaults()\n\n    func load<T: defaultValueProtocol>(type:T.Type,id:String)->T.U{\n        if let object = defaults.objectForKey(id) as? T.U{\n            return object\n        }else{\n            return T.defaultValue\n        }\n    }\n    func save(object:AnyObject,id:String){\n        defaults.setObject(object, forKey: id)\n        defaults.synchronize()\n    }\n    func resetByType<T :defaultValueProtocol>(type:T.Type){\n        let dict = defaults.dictionaryRepresentation()\n        for key in dict.keys {\n            if defaults.objectForKey(key) is T {\n                defaults.removeObjectForKey(key)\n            }\n        }\n        defaults.synchronize()\n    }\n    func resetByContainsName(containsName:String){\n        let dict = defaults.dictionaryRepresentation()\n        for key in dict.keys {\n            if key.containsString(containsName){\n                defaults.removeObjectForKey(key)\n            }\n        }\n        defaults.synchronize()\n    }\n    func resetAll(){\n        let dict = defaults.dictionaryRepresentation()\n        for key in dict.keys {\n            defaults.removeObjectForKey(key)\n        }\n        defaults.synchronize()\n    }\n}\n\n\nextension Int:defaultValueProtocol{\n    typealias U = Int\n    static var defaultValue: Int.U{\n        return 0\n    }\n}\nextension Bool:defaultValueProtocol{\n    typealias U = Bool\n    static var defaultValue: Bool.U{\n        return false\n    }\n}\nextension Double:defaultValueProtocol{\n    typealias U = Double\n    static var defaultValue: Double.U{\n        return 0.0\n    }\n}\nextension Float:defaultValueProtocol{\n    typealias U = Float\n    static var defaultValue: Float.U{\n        return 0.0\n    }\n}\nextension CGFloat:defaultValueProtocol{\n    typealias U = CGFloat\n    static var defaultValue: CGFloat.U{\n        return 0.0\n    }\n}\nextension String:defaultValueProtocol{\n    typealias U = String\n    static var defaultValue: String.U{\n        return \"\"\n    }\n}\nextension Array :defaultValueProtocol{\n    typealias U = Array\n    static var defaultValue: Array.U{\n        return []\n    }\n}\nextension Dictionary :defaultValueProtocol{\n    typealias U = Dictionary\n    static var defaultValue: Dictionary.U{\n        return [:]\n    }\n}\nextension NSURL: defaultValueProtocol{\n    typealias U = NSURL\n    static var defaultValue: NSURL.U{\n        return NSURL()\n    }\n}\n\n```\n\n\u4ed6\u306b\u3082\u4fdd\u5b58\u3057\u305f\u3044\u578b\u304c\u3042\u308b\u306a\u3089\n\n```swift\nextension \u4fdd\u5b58\u3057\u305f\u3044\u578b:defaultValueProtocol{\n    typealias U = \u4fdd\u5b58\u3057\u305f\u3044\u578b\n    static var defaultValue: \u4fdd\u5b58\u3057\u305f\u3044\u578b.U{\n        return \u30c7\u30d5\u30a9\u30eb\u30c8\u306e\u5024\n    }\n}\n```\n\n\u3067\u8ffd\u52a0\u53ef\u80fd\n\n\n\n#RM\n\n\nSwift\u306e\u30b8\u30a7\u30cd\u30ea\u30af\u30b9\u304c\u4fbf\u5229\u3059\u304e\u3066\u60da\u308c\u305d\u3046\u3002\n\n\n\n\n", "tags": ["Swift", "iOS", "Swift2.0"]}