{"tags": ["C#", "Slack", "bot", "Azure"], "context": "C#\u30b3\u30fc\u30c9\u3092\u8a55\u4fa1\u3057\u3066\u7d50\u679c\u3092\u8fd4\u3059bot\u3092\u5b9f\u88c5\u3057\u3066\u307f\u3088\u3046\u3068\u601d\u3044\u307e\u3059\u3002\n\u7d50\u679c\u306f\u3053\u306e\u3088\u3046\u306a\u611f\u3058\u3067\u3059\u3002\n\n\nSlack \u306e Integration \u8a2d\u5b9a\nSlack \u3067 bot \u3092\u4f5c\u308b\u306b\u306f Integration \u3092\u5229\u7528\u3059\u308b\u3068\u826f\u3055\u305d\u3046\u3067\u3059\u3002\n\nOutgoing Webhooks\n\u4f55\u304b\u767a\u8a00\u306b\u5bfe\u3057\u3066\u53cd\u5fdc\u3057\u305f\u3044\u5834\u5408\u306fOutgoingWebhooks\u3092\u5229\u7528\u3067\u304d\u305d\u3046\u3067\u3059\u3002\n\"@C#:\"\u3068\u5148\u982d\u306b\u3064\u3044\u3066\u3044\u308b\u5834\u5408\u306b\u53cd\u5fdc\u3059\u308b\u3088\u3046\u306bTriggerWord\u3092\u8a2d\u5b9a\u3057\u307e\u3059\u3002\n\u53cd\u5fdc\u3059\u308b\u767a\u8a00\u304c\u3042\u3063\u305f\u5834\u5408\u306b\u30c7\u30fc\u30bf\u3092\u9001\u4fe1\u3059\u308bURL\u306f\u5f8c\u8ff0\u3059\u308bAzureFunctions\u3067\u5b9f\u88c5\u3057\u305fAPI\u306eURL\u3092\u30bb\u30c3\u30c8\u3057\u307e\u3059\u3002\n\n\nIncoming Webhooks\n\u4f55\u304b\u767a\u8a00\u3092\u3059\u308b\u5834\u5408\u306fIncomingWebhooks\u3092\u5229\u7528\u3067\u304d\u305d\u3046\u3067\u3059\u3002\n\u8a2d\u5b9a\u753b\u9762\u306b\u767a\u8a00\u30c7\u30fc\u30bf(payload)\u3092\u9001\u308a\u3064\u3051\u308bURL\u304c\u66f8\u3044\u3066\u3042\u308a\u307e\u3059\u3002\n\u767a\u8a00\u3059\u308b\u30c1\u30e3\u30f3\u30cd\u30eb\u306fpayload\u3067\u4e0a\u66f8\u304d\u3067\u304d\u308b\u306e\u3067\n\u758e\u901a\u78ba\u8a8d\u7528\u306e\u30c1\u30e3\u30f3\u30cd\u30eb\u7b49\u306b\u3057\u3066\u304a\u304f\u3068\u826f\u3044\u306e\u3067\u306f\u7121\u3044\u3067\u3057\u3087\u3046\u304b\u3002\n\n\nAzureFunctions \u3067 bot \u306e\u5b9f\u88c5\nOutgoingWebhook \u3067\u9001\u3089\u308c\u3066\u304d\u305f\u30c7\u30fc\u30bf\u3092\u51e6\u7406\u3057\u3066 IncomingWebhook \u306b\u8fd4\u3059\u51e6\u7406\u3092 AzureFunctions \u306b\u5b9f\u88c5\u3057\u307e\u3059\u3002\nAzureFunctions \u306b\u95a2\u3057\u3066\u306f\u304e\u305f\u3071\u305d\u5148\u751f\u306e\u30d6\u30ed\u30b0\u304c\u53c2\u8003\u306b\u306a\u308a\u307e\u3059\u3002  \n\nIntegrate \u30bf\u30d6\u306e WebHook type \u3092 Not a WebHook \u306b\u3059\u308b\nOutgoingWebhook \u3092\u53d7\u3051\u53d6\u308b\u70ba\u306b\u8a2d\u5b9a\u3057\u307e\u3059\u3002\n\u3058\u3093\u3050\u308b\u5148\u751f\u306e\u30d6\u30ed\u30b0\u306b\u8a18\u8ff0\u3055\u308c\u3066\u3044\u307e\u3057\u305f\u3002\n\nNuget \u306e\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\nNuget\u30d1\u30c3\u30b1\u30fc\u30b8\u3092\u5229\u7528\u3067\u304d\u308b\u3088\u3046\u306b\u30b3\u30f3\u30bd\u30fc\u30eb\u304b\u3089\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3057\u307e\u3059\u3002\n\u3053\u306e\u8a18\u4e8b\u8aad\u3081\u3070\u3067\u304d\u307e\u3059\u306d\u3002\n\nC#\u30b3\u30fc\u30c9\u306e\u8a55\u4fa1\nRoslyn \u306e CSharpScripting \u3092\u4f7f\u3048\u3070\u7c21\u5358\u3067\u3059\u3002\n\n\u4eca\u56de\u5b9f\u88c5\u3057\u305f\u30b3\u30fc\u30c9\n\u9577\u3005\u3068\u66f8\u304d\u306a\u3050\u3063\u3066\u3044\u3066\u7f8e\u3057\u3055\u306b\u306f\u6b20\u3051\u307e\u3059\u304c\u3053\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3057\u305f\u3002\n\nproject.json\n{\n \"frameworks\": {\n   \"net46\":{\n     \"dependencies\": {\n       \"Microsoft.CodeAnalysis.Scripting\": \"1.2.1\",\n       \"Newtonsoft.Json\" : \"8.0.3\"\n     }\n   }\n }\n}\n\n\n\nrun.csx\n#r \"System.Collections\"\n#r \"System.Configuration\"\n#r \"System.Runtime\"\n#r \"System.Reflection\"\n#r \"System.Threading.Tasks\"\n#r \"System.Web\"\n\nusing System;\nusing System.Collections.Generic;\nusing System.Configuration;\nusing System.Linq;\nusing System.Net;\nusing System.Reflection;\nusing System.Threading.Tasks;\nusing System.Web;\nusing Newtonsoft.Json;\nusing Microsoft.CodeAnalysis.Scripting;\nusing Microsoft.CodeAnalysis.CSharp.Scripting;\n\nprivate static readonly string[] DefaultImports =\n{\n    \"System\",\n    \"System.Collections.Generic\",\n    \"System.IO\",\n    \"System.Linq\",\n    \"System.Text\",\n};\n\nprivate static readonly Assembly[] DefaultReferences =\n{\n    typeof(Enumerable).Assembly,\n    typeof(List<string>).Assembly,\n};\n\nprivate const string INCOMING_URL_KEY = \"IncomingWebhookUrl\";\n\nprivate const string TRIGGER_WORD = \"@C#:\";\n\npublic static async Task<object> Run(HttpRequestMessage req, TraceWriter log)\n{\n    log.Verbose(\"Webhook was triggered!\");\n\n    var content = await req.Content.ReadAsStringAsync();\n    log.Verbose(content);\n\n    var data = content\n        .Split('&')\n        .Select(x => x.Split('='))\n        .ToDictionary(x => x[0], x => HttpUtility.HtmlDecode(HttpUtility.UrlDecode(x[1])));\n\n    if (data[\"user_name\"] == \"slackbot\")\n    {\n        return req.CreateResponse(HttpStatusCode.OK, new {\n            body = \"Cannot Support Messages From SlackBot.\",\n        });\n    }\n\n    var text = data[\"text\"] as string ?? \"\";\n    log.Verbose(text);\n\n    var code = text.Replace(TRIGGER_WORD, \"\");\n\n    object result = null;\n    try\n    {\n        result = await CSharpScript.EvaluateAsync(code ?? \"\u30b3\u30fc\u30c9\u304c\u7a7a\u30cb\u30e3\", \n            ScriptOptions.Default\n                .WithImports(DefaultImports)\n                .WithReferences(DefaultReferences));\n    }\n    catch (Exception ex)\n    {\n        result = ex.Message;\n    }\n\n    var resultText = result?.ToString() ?? \"\";\n    if (resultText.StartsWith(TRIGGER_WORD))\n    {\n        resultText = resultText.Replace(TRIGGER_WORD, \"\");\n    }\n\n    log.Verbose(resultText);\n\n    var payload = new\n    {\n        channel = \"#\" + data[\"channel_name\"],\n        username = \"C#\u3068\u548c\u89e3\u305b\u3088\",\n        text = string.IsNullOrWhiteSpace(resultText) ? \"\u7a7a\u3060\u30cb\u30e3\" : resultText,\n        icon_emoji = \":cat:\",\n    };\n    var jsonString = JsonConvert.SerializeObject(payload);\n    using (var client = new HttpClient())\n    {\n    var incomingUrl = ConfigurationManager.AppSettings[INCOMING_URL_KEY];\n        var res = await client.PostAsync(incomingUrl, new FormUrlEncodedContent(new[]\n        {\n            new KeyValuePair<string, string>(\"payload\", jsonString)\n        }));\n        return req.CreateResponse(res.StatusCode, new {\n            body = resultText,\n        });\n    }\n}\n\n\nIncomingWebhook\u306eUrl\u306fAppSettings\u306b\u683c\u7d0d\u3057\u3066\u3044\u307e\u3059\u3002\n\u3053\u3061\u3089\u3092\u898b\u308c\u3070\u3067\u304d\u307e\u3059\u3002\n\u624b\u8efd\u306b bot \u304c\u4f5c\u308c\u3066\u826f\u3044\u3067\u3059\u306d\u3002\nC#\u30b3\u30fc\u30c9\u3092\u8a55\u4fa1\u3057\u3066\u7d50\u679c\u3092\u8fd4\u3059bot\u3092\u5b9f\u88c5\u3057\u3066\u307f\u3088\u3046\u3068\u601d\u3044\u307e\u3059\u3002\n\u7d50\u679c\u306f\u3053\u306e\u3088\u3046\u306a\u611f\u3058\u3067\u3059\u3002\n![botsample.png](https://qiita-image-store.s3.amazonaws.com/0/60841/aa9c2cd1-e6d6-c6f8-c766-082923b0c4d9.png)\n\n## Slack \u306e Integration \u8a2d\u5b9a\nSlack \u3067 bot \u3092\u4f5c\u308b\u306b\u306f Integration \u3092\u5229\u7528\u3059\u308b\u3068\u826f\u3055\u305d\u3046\u3067\u3059\u3002\n### Outgoing Webhooks\n\u4f55\u304b\u767a\u8a00\u306b\u5bfe\u3057\u3066\u53cd\u5fdc\u3057\u305f\u3044\u5834\u5408\u306fOutgoingWebhooks\u3092\u5229\u7528\u3067\u304d\u305d\u3046\u3067\u3059\u3002\n\"@C#:\"\u3068\u5148\u982d\u306b\u3064\u3044\u3066\u3044\u308b\u5834\u5408\u306b\u53cd\u5fdc\u3059\u308b\u3088\u3046\u306bTriggerWord\u3092\u8a2d\u5b9a\u3057\u307e\u3059\u3002\n\u53cd\u5fdc\u3059\u308b\u767a\u8a00\u304c\u3042\u3063\u305f\u5834\u5408\u306b\u30c7\u30fc\u30bf\u3092\u9001\u4fe1\u3059\u308bURL\u306f\u5f8c\u8ff0\u3059\u308bAzureFunctions\u3067\u5b9f\u88c5\u3057\u305fAPI\u306eURL\u3092\u30bb\u30c3\u30c8\u3057\u307e\u3059\u3002\n![outgoing.png](https://qiita-image-store.s3.amazonaws.com/0/60841/048e9882-d7df-dbde-4546-a8d403f86d75.png)\n\n### Incoming Webhooks\n\u4f55\u304b\u767a\u8a00\u3092\u3059\u308b\u5834\u5408\u306fIncomingWebhooks\u3092\u5229\u7528\u3067\u304d\u305d\u3046\u3067\u3059\u3002\n\u8a2d\u5b9a\u753b\u9762\u306b\u767a\u8a00\u30c7\u30fc\u30bf(payload)\u3092\u9001\u308a\u3064\u3051\u308bURL\u304c\u66f8\u3044\u3066\u3042\u308a\u307e\u3059\u3002\n\u767a\u8a00\u3059\u308b\u30c1\u30e3\u30f3\u30cd\u30eb\u306fpayload\u3067\u4e0a\u66f8\u304d\u3067\u304d\u308b\u306e\u3067\n\u758e\u901a\u78ba\u8a8d\u7528\u306e\u30c1\u30e3\u30f3\u30cd\u30eb\u7b49\u306b\u3057\u3066\u304a\u304f\u3068\u826f\u3044\u306e\u3067\u306f\u7121\u3044\u3067\u3057\u3087\u3046\u304b\u3002\n![incoming.png](https://qiita-image-store.s3.amazonaws.com/0/60841/0766bfe0-f6c3-0c1d-8812-0da952c9f2a6.png)\n\n## AzureFunctions \u3067 bot \u306e\u5b9f\u88c5\nOutgoingWebhook \u3067\u9001\u3089\u308c\u3066\u304d\u305f\u30c7\u30fc\u30bf\u3092\u51e6\u7406\u3057\u3066 IncomingWebhook \u306b\u8fd4\u3059\u51e6\u7406\u3092 AzureFunctions \u306b\u5b9f\u88c5\u3057\u307e\u3059\u3002\nAzureFunctions \u306b\u95a2\u3057\u3066\u306f[\u304e\u305f\u3071\u305d\u5148\u751f\u306e\u30d6\u30ed\u30b0](http://tech.guitarrapc.com/archive/category/AzureFunctions)\u304c\u53c2\u8003\u306b\u306a\u308a\u307e\u3059\u3002  \n\n### Integrate \u30bf\u30d6\u306e WebHook type \u3092 Not a WebHook \u306b\u3059\u308b\nOutgoingWebhook \u3092\u53d7\u3051\u53d6\u308b\u70ba\u306b\u8a2d\u5b9a\u3057\u307e\u3059\u3002\n[\u3058\u3093\u3050\u308b\u5148\u751f\u306e\u30d6\u30ed\u30b0](http://blog.xin9le.net/entry/2016/04/01/042452)\u306b\u8a18\u8ff0\u3055\u308c\u3066\u3044\u307e\u3057\u305f\u3002\n\n### Nuget \u306e\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\nNuget\u30d1\u30c3\u30b1\u30fc\u30b8\u3092\u5229\u7528\u3067\u304d\u308b\u3088\u3046\u306b\u30b3\u30f3\u30bd\u30fc\u30eb\u304b\u3089\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3057\u307e\u3059\u3002\n[\u3053\u306e\u8a18\u4e8b](http://tech.guitarrapc.com/entry/2016/04/05/043723)\u8aad\u3081\u3070\u3067\u304d\u307e\u3059\u306d\u3002\n\n### C#\u30b3\u30fc\u30c9\u306e\u8a55\u4fa1\nRoslyn \u306e [CSharpScripting](https://github.com/dotnet/roslyn/wiki/Scripting-API-Samples) \u3092\u4f7f\u3048\u3070\u7c21\u5358\u3067\u3059\u3002\n\n### \u4eca\u56de\u5b9f\u88c5\u3057\u305f\u30b3\u30fc\u30c9\n\u9577\u3005\u3068\u66f8\u304d\u306a\u3050\u3063\u3066\u3044\u3066\u7f8e\u3057\u3055\u306b\u306f\u6b20\u3051\u307e\u3059\u304c\u3053\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3057\u305f\u3002\n\n```json:project.json\n{\n \"frameworks\": {\n   \"net46\":{\n     \"dependencies\": {\n       \"Microsoft.CodeAnalysis.Scripting\": \"1.2.1\",\n       \"Newtonsoft.Json\" : \"8.0.3\"\n     }\n   }\n }\n}\n```\n\n```csharp:run.csx\n#r \"System.Collections\"\n#r \"System.Configuration\"\n#r \"System.Runtime\"\n#r \"System.Reflection\"\n#r \"System.Threading.Tasks\"\n#r \"System.Web\"\n\nusing System;\nusing System.Collections.Generic;\nusing System.Configuration;\nusing System.Linq;\nusing System.Net;\nusing System.Reflection;\nusing System.Threading.Tasks;\nusing System.Web;\nusing Newtonsoft.Json;\nusing Microsoft.CodeAnalysis.Scripting;\nusing Microsoft.CodeAnalysis.CSharp.Scripting;\n\nprivate static readonly string[] DefaultImports =\n{\n    \"System\",\n    \"System.Collections.Generic\",\n    \"System.IO\",\n    \"System.Linq\",\n    \"System.Text\",\n};\n\nprivate static readonly Assembly[] DefaultReferences =\n{\n    typeof(Enumerable).Assembly,\n    typeof(List<string>).Assembly,\n};\n\nprivate const string INCOMING_URL_KEY = \"IncomingWebhookUrl\";\n\nprivate const string TRIGGER_WORD = \"@C#:\";\n\npublic static async Task<object> Run(HttpRequestMessage req, TraceWriter log)\n{\n    log.Verbose(\"Webhook was triggered!\");\n\n    var content = await req.Content.ReadAsStringAsync();\n    log.Verbose(content);\n    \n    var data = content\n        .Split('&')\n        .Select(x => x.Split('='))\n        .ToDictionary(x => x[0], x => HttpUtility.HtmlDecode(HttpUtility.UrlDecode(x[1])));\n\n    if (data[\"user_name\"] == \"slackbot\")\n    {\n        return req.CreateResponse(HttpStatusCode.OK, new {\n            body = \"Cannot Support Messages From SlackBot.\",\n        });\n    }\n\n    var text = data[\"text\"] as string ?? \"\";\n    log.Verbose(text);\n\n    var code = text.Replace(TRIGGER_WORD, \"\");\n\n    object result = null;\n    try\n    {\n        result = await CSharpScript.EvaluateAsync(code ?? \"\u30b3\u30fc\u30c9\u304c\u7a7a\u30cb\u30e3\", \n            ScriptOptions.Default\n                .WithImports(DefaultImports)\n                .WithReferences(DefaultReferences));\n    }\n    catch (Exception ex)\n    {\n        result = ex.Message;\n    }\n\n    var resultText = result?.ToString() ?? \"\";\n    if (resultText.StartsWith(TRIGGER_WORD))\n    {\n        resultText = resultText.Replace(TRIGGER_WORD, \"\");\n    }\n\n    log.Verbose(resultText);\n\n    var payload = new\n    {\n        channel = \"#\" + data[\"channel_name\"],\n        username = \"C#\u3068\u548c\u89e3\u305b\u3088\",\n        text = string.IsNullOrWhiteSpace(resultText) ? \"\u7a7a\u3060\u30cb\u30e3\" : resultText,\n        icon_emoji = \":cat:\",\n    };\n    var jsonString = JsonConvert.SerializeObject(payload);\n    using (var client = new HttpClient())\n    {\n\tvar incomingUrl = ConfigurationManager.AppSettings[INCOMING_URL_KEY];\n        var res = await client.PostAsync(incomingUrl, new FormUrlEncodedContent(new[]\n        {\n            new KeyValuePair<string, string>(\"payload\", jsonString)\n        }));\n        return req.CreateResponse(res.StatusCode, new {\n            body = resultText,\n        });\n    }\n}\n```\nIncomingWebhook\u306eUrl\u306fAppSettings\u306b\u683c\u7d0d\u3057\u3066\u3044\u307e\u3059\u3002\n[\u3053\u3061\u3089](http://tech.guitarrapc.com/entry/2016/04/16/024424)\u3092\u898b\u308c\u3070\u3067\u304d\u307e\u3059\u3002\n\n\u624b\u8efd\u306b bot \u304c\u4f5c\u308c\u3066\u826f\u3044\u3067\u3059\u306d\u3002\n"}