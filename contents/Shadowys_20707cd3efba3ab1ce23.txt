{"tags": ["wisp", "lisp", "JavaScript"], "context": " More than 1 year has passed since last update.\n\nInstallation\nnpm install wisp -g\nThat's it. A single line.\nOf course, if you don't have npm, go download Node. It's included in it.\nWisp is #JustAnotherNodeModule that you can download from npm and then call it from your shell.\nOf course, since we're also interested in merging multiple Wisp files into one JavaScript file in-browser through namespaces, a la ClojureScript, so we'll just have to browserify it.\nnpm install browserify -g\n\nUsing Wisp\nOpen your editor and type this:\n(console.log \"hello world\")\nand save as main.wisp.\nNow, to run it locally, just cd to your working directory and type\nwisp main.wisp\nThe line \"hello world\" will be printed on the console. Next will be the JavaScript output.\nGo to the console again. This time, use the command,\nwisp -c main.wisp\nVoila! The compiled Javascript, console.log(\"hello world\"), among other things is printed on the console. \nUnfortunately, the binary does not have direct file creation yet, so we'll just to move our lazy fingers and do this if we want the JavaScript file.\nwisp -c main.wisp > main.js\nIf you're not using namespaces, then you could just cat them together before using the wisp binary to compile them into your target javascript file.\nExample from the wisp github repo:\ncat in.wisp | wisp > out.js \nInstallation\n----------------\n\n`npm install wisp -g`\n\nThat's it. A single line.\nOf course, if you don't have npm, go download [Node](https://nodejs.org/download/). It's included in it.\nWisp is **#JustAnotherNodeModule** that you can download from npm and then call it from your shell.\nOf course, since we're also interested in merging multiple Wisp files into one JavaScript file in-browser through **namespaces**, a la ClojureScript, so we'll just have to [browserify](http://browserify.org/) it.\n\n`npm install browserify -g`\n\n\nUsing Wisp\n----------------\n\nOpen your editor and type this:\n\n`(console.log \"hello world\")`\n\nand save as **main.wisp**.\nNow, to run it locally, just `cd` to your working directory and type\n\n`wisp main.wisp`\n\nThe line \"hello world\" will be printed on the console. Next will be the JavaScript output.\nGo to the console again. This time, use the command,\n\n`wisp -c main.wisp`\n\nVoila! The compiled Javascript, `console.log(\"hello world\")`, among other things is printed on the console. \nUnfortunately, the binary does not have direct file creation yet, so we'll just to move our lazy fingers and do this if we want the JavaScript file.\n\n`wisp -c main.wisp > main.js`\n\nIf you're not using namespaces, then you could just `cat` them together before using the wisp binary to compile them into your target javascript file.\nExample from the wisp github repo:\n\n`cat in.wisp | wisp > out.js` \n"}