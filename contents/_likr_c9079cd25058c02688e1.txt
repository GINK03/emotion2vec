{"context": " More than 1 year has passed since last update.GPGPU Advent Calendar 4\u65e5\u76ee\u3067\u3059\u3002\n\u8ad6\u6587\u7d39\u4ecb\u30cd\u30bf\u3067\u3082\u3044\u3044\u3068\u306e\u3053\u3068\u306a\u306e\u3067CPU\u6bd4100\u500d\u3068\u304b\u666f\u6c17\u306e\u826f\u3044\u3053\u3068\u3092\u8a00\u3063\u3066\u308b\u62d9\u8457\u8ad6\u6587\u306e\u7d39\u4ecb\u3092\u2026\u3001\u3068\u3044\u3046\u306e\u306f\u8ab0\u3082\u5f97\u3057\u306a\u3044\u611f\u3057\u304b\u306a\u3044\u306e\u3067\u3001\u3053\u30531\u5e74\u3050\u3089\u3044\u306ePyOpenCL\u306e\u30a2\u30c3\u30d7\u30c7\u30fc\u30c8\u72b6\u6cc1\u306b\u3064\u3044\u3066\u306e\u8a71\u3092\u3057\u307e\u3057\u3087\u3046\u3002\n\nPyOpenCL\u3068\u306f\nPyOpenCL\u306fPython\u304b\u3089OpenCL\u306eAPI\u306b\u30a2\u30af\u30bb\u30b9\u3059\u308b\u30e9\u30a4\u30d6\u30e9\u30ea\u3067\u3001API\u306e\u30e9\u30c3\u30d1\u30fc\u3092\u63d0\u4f9b\u3059\u308b\u3060\u3051\u3067\u306a\u304f\u3001\u30b9\u30af\u30ea\u30d7\u30c8\u8a00\u8a9e\u3089\u3057\u3044\u4fbf\u5229\u306a\u6a5f\u80fd\u304c\u591a\u6570\u5b9f\u88c5\u3055\u308c\u3066\u3044\u307e\u3059\u3002\n\u540c\u3058\u4f5c\u8005\u304c\u958b\u767a\u3057\u305fPyCUDA\u3068\u3044\u3046CUDA\u7528\u306e\u540c\u69d8\u306e\u30e9\u30a4\u30d6\u30e9\u30ea\u3082\u3042\u308b\u306e\u3067\u3059\u304c\u3001\u79c1\u306f\u6700\u8fd1\u3067\u306f\u305a\u3063\u3068PyOpenCL\u306e\u65b9\u3092\u5229\u7528\u3057\u3066\u3044\u307e\u3059\u3002\u305d\u306e\u4e3b\u306a\u7406\u7531\u3068\u3057\u3066\u306f\u3001NVIDIA GPU\u4ee5\u5916\u306e\u74b0\u5883\u3067\u3082\u5b9f\u884c\u304c\u3067\u304d\u308b\u3053\u3068\u3068\u3001\u30ab\u30fc\u30cd\u30eb\u95a2\u6570\u306e\u5b9f\u884c\u6642\u30b3\u30f3\u30d1\u30a4\u30eb\u306e\u4ed5\u7d44\u307f\u304cOpenCL\u306eAPI\u30ec\u30d9\u30eb\u3067\u63d0\u4f9b\u3055\u308c\u3066\u3044\u308b\u306e\u3067\u30e9\u30a4\u30d6\u30e9\u30ea\u306e\u30bd\u30fc\u30b9\u304c\u8aad\u307f\u3084\u3059\u3044\u3053\u3068\u304c\u6319\u3052\u3089\u308c\u307e\u3059\u3002\u307e\u305f\u3001OpenCL\u5358\u4f53\u3067\u306f\u6a5f\u80fd\u7684\u306b\u8ca7\u5f31\u306a\u90e8\u5206\u3092Python\u3067\u88dc\u3048\u308b\u306e\u306f\u9b45\u529b\u7684\u3067\u3059\u3002\nPyCUDA\u3068PyOpenCL\u306e\u3069\u3061\u3089\u3092\u5229\u7528\u3059\u308b\u3079\u304d\u304b\u3068\u3044\u3046\u8a71\u304c\u6642\u3005\u3042\u308a\u307e\u3059\u304c\u3001\u6027\u80fd\u7684\u306b\u306f\u3042\u307e\u308a\u9055\u3044\u306f\u306a\u3044\u306e\u3067\u3001CUDA\u304bOpenCL\u306e\u6163\u308c\u3066\u3044\u308b\u65b9\u3067\u9078\u3076\u304b\u3001PyCUDA / PyOpenCL\u3067\u30c6\u30b9\u30c8\u5b9f\u88c5\u3057\u305f\u30ab\u30fc\u30cd\u30eb\u95a2\u6570\u3092\u5c06\u6765\u7684\u306bC/C++\u306b\u79fb\u690d\u3059\u308b\u306a\u3069\u3067\u3042\u308c\u3070\u3001\u30bf\u30fc\u30b2\u30c3\u30c8\u306b\u3059\u308b\u30d7\u30e9\u30c3\u30c8\u30d5\u30a9\u30fc\u30e0\u306b\u3042\u3089\u304b\u3058\u3081\u5408\u308f\u305b\u3066\u304a\u3044\u305f\u65b9\u304c\u3044\u3044\u3067\u3057\u3087\u3046\u3002\n\nPyOpenCL\u306e\u30a2\u30c3\u30d7\u30c7\u30fc\u30c8\u72b6\u6cc1\nPyOpenCL\u306f\u30d0\u30fc\u30b8\u30e7\u30f30.92\u4ee5\u964d\u30012011.1\u30012011.2\u30012012.1\u3068\u3044\u3046\u30ca\u30f3\u30d0\u30ea\u30f3\u30b0\u3067\u30ea\u30ea\u30fc\u30b9\u304c\u884c\u308f\u308c\u3066\u3044\u3066\u3001\u73fe\u5728\u306f\u30d0\u30fc\u30b8\u30e7\u30f32012.2\u30ea\u30ea\u30fc\u30b9\u306b\u5411\u3051\u3066\u958b\u767a\u304c\u884c\u308f\u308c\u3066\u3044\u307e\u3059\u3002\u4e3b\u8981\u306a\u8ffd\u52a0\u6a5f\u80fd\u306e\u5b9f\u88c5\u306f\u843d\u3061\u7740\u3044\u3066\u308b\u3088\u3046\u306a\u306e\u3067\u3001\u4eca\u5e74\u4e2d\u304b\u306f\u308f\u304b\u308a\u307e\u305b\u3093\u304c\u9060\u304f\u306a\u3044\u3046\u3061\u306b\u30ea\u30ea\u30fc\u30b9\u3055\u308c\u308b\u3093\u3067\u306f\u306a\u3044\u3067\u3057\u3087\u3046\u304b\u3002\n\u3055\u3066\u3001\u672c\u984c\u306e\u3053\u30531\u5e74\u3067PyOpenCL\u306b\u8ffd\u52a0\u3055\u308c\u305f\u6a5f\u80fd\u306b\u3064\u3044\u3066\u304a\u8a71\u3057\u307e\u3057\u3087\u3046\u3002\n\u5927\u304d\u3044\u5909\u66f4\u70b9\u306f\u4ee5\u4e0b\u306e2\u70b9\u3067\u3059\u3002\n\n\u8907\u7d20\u6570\u30b5\u30dd\u30fc\u30c8\u53ca\u3073\u30d9\u30c3\u30bb\u30eb\u95a2\u6570\u306e\u8ffd\u52a0 (2012.1)\nParallel Scan\u306e\u30a4\u30f3\u30bf\u30d5\u30a7\u30fc\u30b9\u5909\u66f4\u3068\u305d\u308c\u306b\u4f34\u3046\u5404\u7a2e\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u306e\u8ffd\u52a0 (2012.2)\n\n\u30d9\u30c3\u30bb\u30eb\u95a2\u6570\u3068\u3044\u3046\u8a00\u8449\u306fPyOpenCL\u306e\u30ea\u30ea\u30fc\u30b9\u30ce\u30fc\u30c8\u3067\u521d\u3081\u3066\u898b\u305f\u3050\u3089\u3044\u8a73\u3057\u304f\u306a\u3044\u306e\u3067\u3001\u4eca\u56de\u306f\u5237\u65b0\u3055\u308c\u305fParallel Scan\u3068\u305d\u308c\u3092\u30d9\u30fc\u30b9\u306b\u3057\u305f\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u306b\u3064\u3044\u3066\u7d39\u4ecb\u3057\u307e\u3059\u3002\n\nParallel Scan\nScan\u3068\u306f\u3001Python\u30b3\u30fc\u30c9\u3067\u5927\u96d1\u628a\u306b\u8aac\u660e\u3059\u308b\u3068\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u51e6\u7406\u306b\u306a\u308a\u307e\u3059\u3002\nfrom functools import reduce\n\n\ndef add(a, b): \n    return a + b \n\n\ndef inclusive_scan(f, seq):\n    return [reduce(f, seq[0:i + 1]) for i in range(len(seq))]\n\n\ndef exclusive_scan(f, seq, init):\n    return [reduce(f, seq[0:i], init) for i in range(len(seq))]\n\n\nseq = [1, 3, 5, 7, 9]\n\nprint(inclusive_scan(add, seq))\n# [1, 4, 9, 16, 25]\n\nprint(exclusive_scan(add, seq, 0)) \n# [0, 1, 4, 9, 16]\n\n\u4ee5\u4e0a\u306e\u3088\u3046\u306b\u3001\u30ea\u30b9\u30c8\u3092\u4e0e\u3048\u308b\u3068\u3001\u5404\u8981\u7d20\u304c\u81ea\u5206\u3088\u308a\u624b\u524d\u306e\u8981\u7d20\u307e\u3067\u306e\u7dcf\u548c\u3092\u6301\u3063\u305f\u30ea\u30b9\u30c8\u304c\u5f97\u3089\u308c\u307e\u3059\u3002\u81ea\u5206\u81ea\u8eab\u3092\u542b\u3080\u304b\u3069\u3046\u304b\u3067inclusive_scan\u3001exclusive_scan\u306e\u4e8c\u7a2e\u985e\u304c\u3042\u308a\u3001exclusive_scan\u306e\u5834\u5408\u306f\u5358\u4f4d\u5143\u304c\u5fc5\u8981\u3067\u3059\u3002\nScan\u306f\u548c\u4ee5\u5916\u306b\u3082\u3001\u3042\u308b\u6761\u4ef6\u3092\u6e80\u305f\u3059\u4e8c\u9805\u6f14\u7b97\u306b\u5bfe\u3057\u3066\u9069\u7528\u53ef\u80fd\u3067\u3001\u4f8b\u3048\u3070\u81ea\u5206\u3088\u308a\u524d\u306e\u8981\u7d20\u307e\u3067\u306e\u7a4d\u3084\u6700\u5c0f\u5024\u3001\u6700\u5927\u5024\u3092\u6c42\u3081\u308b\u3053\u3068\u306a\u3069\u304c\u3067\u304d\u307e\u3059\u3002\u4e26\u5217\u7684\u306aScan\u304c\u53ef\u80fd\u306a\u6f14\u7b97\u306e\u6761\u4ef6\u306b\u3064\u3044\u3066\u306f\u4ee5\u4e0b\u306e\u30d6\u30ed\u30b0\u8a18\u4e8b\u3067\u8b70\u8ad6\u3055\u308c\u3066\u3044\u307e\u3059\u3002\n\n\u4e26\u5217\u74b0\u5883\u306b\u304a\u3051\u308breduce\u3068scan\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\n\n\nScan\u3092\u30d9\u30fc\u30b9\u306b\u3057\u305f\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\n\u4e26\u5217Scan\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u306f\u69d8\u3005\u306a\u5b9f\u88c5\u304c\u3042\u308a\u3001\u3088\u304f\u30c1\u30e5\u30fc\u30cb\u30f3\u30b0\u3055\u308c\u305f\u3082\u306e\u304cCUDA\u3084OpenCL\u306e\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u3068\u3057\u3066\u6dfb\u4ed8\u3055\u308c\u3066\u3044\u305f\u308a\u3057\u307e\u3059\u3002\u305d\u308c\u3067\u306f\u3001Scan\u304c\u52b9\u7387\u3088\u304f\u3067\u304d\u308b\u3068\u3069\u3046\u5b09\u3057\u3044\u306e\u3067\u3057\u3087\u3046\u304b\uff1f\n\u305d\u308c\u306f\u3001\u4ee5\u4e0b\u306b\u6319\u3052\u308b\u3088\u3046\u306astream compaction\u7cfb\u306e\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u3084\u30bd\u30fc\u30c8\u307e\u3067\u3082\u304cScan\u3092\u3082\u3068\u306b\u5b9f\u88c5\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u308b\u304b\u3089\u3067\u3059\u3002\u65b0\u3057\u304f\u5c0e\u5165\u3055\u308c\u305f\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u306b\u3064\u3044\u3066\u5b9f\u969b\u306ePyOpenCL\u3092\u4f7f\u3063\u305f\u30b3\u30fc\u30c9\u3067\u898b\u3066\u307f\u307e\u3057\u3087\u3046\u3002\nfrom __future__ import print_function\nimport numpy as np\nimport pyopencl as cl\nfrom pyopencl import array as clarray\nfrom pyopencl import algorithm as clalgorithm\n\nctx = cl.create_some_context()\nqueue = cl.CommandQueue(ctx)\n\nsize = 100\nhost_a = np.random.randint(0, 10, size).astype(np.int32)\nprint(host_a)\n# [1 1 1 6 6 9 8 9 8 1 2 7 0 6 1 6 5 4 4 5 3 5 1 0 3 6 9 4 8 5 1 4 8 8 1 3 8\n#  3 7 5 1 7 1 7 6 1 9 9 7 3 4 1 8 2 8 3 0 6 4 9 0 2 7 4 4 7 7 1 3 4 7 7 9 6\n#  6 7 9 1 2 3 1 2 3 9 1 7 3 0 9 5 8 1 5 4 5 2 8 8 1 9]\na = clarray.to_device(queue, host_a)\n\n\n# 1. \u6761\u4ef6\u306b\u4e00\u81f4\u3059\u308b\u8981\u7d20\u306e\u307f\u3092\u6b8b\u3059\uff08array\u306e\u524d\u5074\u306b\u5bc4\u305b\u308b)\nb, b_size = clalgorithm.copy_if(a, 'ary[i] % 2 == 0')\nhost_b = b.get()[:b_size.get()]\nprint(host_b)\n# [6 6 8 8 2 0 6 6 4 4 0 6 4 8 4 8 8 8 6 4 8 2 8 0 6 4 0 2 4 4 4 6 6 2 2 0 8\n#  4 2 8 8]\n\n\n# 2. \u6761\u4ef6\u306b\u4e00\u81f4\u3059\u308b\u8981\u7d20\u3092\u53d6\u308a\u9664\u304f(\u4e00\u81f4\u3057\u306a\u3044\u8981\u7d20\u3092array\u306e\u524d\u5074\u306b\u5bc4\u305b\u308b)\nc, c_size = clalgorithm.remove_if(a, 'ary[i] % 2 == 0')\nhost_c = c.get()[:c_size.get()]\nprint(host_c)\n# [1 1 1 9 9 1 7 1 5 5 3 5 1 3 9 5 1 1 3 3 7 5 1 7 1 7 1 9 9 7 3 1 3 9 7 7 7\n#  1 3 7 7 9 7 9 1 3 1 3 9 1 7 3 9 5 1 5 5 1 9]\n\n\n# 3. \u6761\u4ef6\u306b\u4e00\u81f4\u3059\u308b\u8981\u7d20\u3092\u524d\u5074\u306b\u3001\u305d\u3046\u3067\u306a\u3044\u8981\u7d20\u3092\u5f8c\u5074\u306b\u5bc4\u305b\u308b\nd, e, d_size = clalgorithm.partition(a, 'ary[i] % 2 == 0')\nhost_d = d.get()[:d_size.get()]\nhost_e = e.get()[:size - d_size.get()]\nprint(host_d)\n# [6 6 8 8 2 0 6 6 4 4 0 6 4 8 4 8 8 8 6 4 8 2 8 0 6 4 0 2 4 4 4 6 6 2 2 0 8\n#  4 2 8 8]\nprint(host_e)\n# [1 1 1 9 9 1 7 1 5 5 3 5 1 3 9 5 1 1 3 3 7 5 1 7 1 7 1 9 9 7 3 1 3 9 7 7 7\n#  1 3 7 7 9 7 9 1 3 1 3 9 1 7 3 9 5 1 5 5 1 9]\n# partition\u306e\u5404\u7d50\u679c\u306fcopy_if, remove_if\u500b\u5225\u306e\u7d50\u679c\u3068\u7b49\u3057\u3044\nprint(np.all(host_b == host_d))\n# True\nprint(np.all(host_c == host_e))\n# True\n\n\n# 4. \u30bd\u30fc\u30c8\nsort_kernel = clalgorithm.RadixSort(ctx, 'int* ary', 'ary[i]', ['ary'])\n(f,) = sort_kernel(a, key_bits=32)\nhost_f = f.get()\nprint(host_f)\n# [0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 3 3 3 3 3 3 3 3\n#  3 3 4 4 4 4 4 4 4 4 4 4 5 5 5 5 5 5 5 5 6 6 6 6 6 6 6 6 6 7 7 7 7 7 7 7 7\n#  7 7 7 7 8 8 8 8 8 8 8 8 8 8 8 9 9 9 9 9 9 9 9 9 9 9]\n\n\n# 5. \u9023\u7d9a\u3059\u308b\u91cd\u8907\u8981\u7d20\u3092\u53d6\u308a\u9664\u304f\ng, g_size = clalgorithm.unique(f)\nhost_g = g.get()[:g_size.get()]\nprint(host_g)\n# [0 1 2 3 4 5 6 7 8 9]\n\n\u4ee5\u4e0a\u306e\u3088\u3046\u306a\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u3092\u4f7f\u3044\u3053\u306a\u3059\u3053\u3068\u304c\u3067\u304d\u308c\u3070GPU\u4e0a\u3067\u52b9\u7387\u3088\u304f\u5b9f\u884c\u3067\u304d\u308b\u51e6\u7406\u306e\u5e45\u306f\u5e83\u304c\u308b\u3067\u3057\u3087\u3046\u3002\n\n\u6700\u5f8c\u306b\n\u4eca\u56de\u7d39\u4ecb\u3057\u305fScan\u3092\u30d9\u30fc\u30b9\u306b\u3057\u305f\u65b0\u3057\u3044\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u306f\u3001\u73fe\u5728\u306e\u30ea\u30ea\u30fc\u30b9\u30d0\u30fc\u30b8\u30e7\u30f3(2012.1)\u306b\u306f\u542b\u307e\u308c\u3066\u304a\u3089\u305a\u3001\u30ea\u30dd\u30b8\u30c8\u30ea\u306e\u6700\u65b0\u7248\u3092\u5165\u624b\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\nPyOpenCL\u306f\u5982\u4f55\u305b\u3093\u3001\u69d8\u3005\u306aOpenCL\u30d7\u30e9\u30c3\u30c8\u30d5\u30a9\u30fc\u30e0\u3084Python\u306e\u30d0\u30fc\u30b8\u30e7\u30f3\u306b\u5bfe\u5fdc\u3057\u306a\u3051\u308c\u3070\u306a\u3089\u306a\u3044\u305f\u3081\u3001\u30d0\u30b0\u306b\u306f\u51fa\u4f1a\u3044\u3084\u3059\u3044\u30d7\u30ed\u30c0\u30af\u30c8\u3067\u3082\u3042\u308b\u304b\u3068\u601d\u3044\u307e\u3059\u3002\u6a5f\u80fd\u8ffd\u52a0\u3060\u3051\u3067\u306a\u304f\u3001\u30d0\u30b0\u4fee\u6b63\u3082\u983b\u7e41\u306b\u884c\u308f\u308c\u3066\u3044\u308b\u306e\u3067\u3001github\u304b\u3089\u6700\u65b0\u7248\u3092\u8a66\u3057\u3066\u307f\u308b\u306e\u3092\u304a\u52e7\u3081\u3057\u307e\u3059\u3002\n\u7b2c2\u5f3e\u304c\u3042\u308b\u304b\u306f\u4e0d\u660e\u3002\n[GPGPU Advent Calendar](http://atnd.org/events/34539) 4\u65e5\u76ee\u3067\u3059\u3002\n\u8ad6\u6587\u7d39\u4ecb\u30cd\u30bf\u3067\u3082\u3044\u3044\u3068\u306e\u3053\u3068\u306a\u306e\u3067CPU\u6bd4100\u500d\u3068\u304b\u666f\u6c17\u306e\u826f\u3044\u3053\u3068\u3092\u8a00\u3063\u3066\u308b\u62d9\u8457\u8ad6\u6587\u306e\u7d39\u4ecb\u3092\u2026\u3001\u3068\u3044\u3046\u306e\u306f\u8ab0\u3082\u5f97\u3057\u306a\u3044\u611f\u3057\u304b\u306a\u3044\u306e\u3067\u3001\u3053\u30531\u5e74\u3050\u3089\u3044\u306e[PyOpenCL](http://documen.tician.de/pyopencl/index.html)\u306e\u30a2\u30c3\u30d7\u30c7\u30fc\u30c8\u72b6\u6cc1\u306b\u3064\u3044\u3066\u306e\u8a71\u3092\u3057\u307e\u3057\u3087\u3046\u3002\n\n# PyOpenCL\u3068\u306f\n\nPyOpenCL\u306fPython\u304b\u3089OpenCL\u306eAPI\u306b\u30a2\u30af\u30bb\u30b9\u3059\u308b\u30e9\u30a4\u30d6\u30e9\u30ea\u3067\u3001API\u306e\u30e9\u30c3\u30d1\u30fc\u3092\u63d0\u4f9b\u3059\u308b\u3060\u3051\u3067\u306a\u304f\u3001\u30b9\u30af\u30ea\u30d7\u30c8\u8a00\u8a9e\u3089\u3057\u3044\u4fbf\u5229\u306a\u6a5f\u80fd\u304c\u591a\u6570\u5b9f\u88c5\u3055\u308c\u3066\u3044\u307e\u3059\u3002\n\n\u540c\u3058\u4f5c\u8005\u304c\u958b\u767a\u3057\u305fPyCUDA\u3068\u3044\u3046CUDA\u7528\u306e\u540c\u69d8\u306e\u30e9\u30a4\u30d6\u30e9\u30ea\u3082\u3042\u308b\u306e\u3067\u3059\u304c\u3001\u79c1\u306f\u6700\u8fd1\u3067\u306f\u305a\u3063\u3068PyOpenCL\u306e\u65b9\u3092\u5229\u7528\u3057\u3066\u3044\u307e\u3059\u3002\u305d\u306e\u4e3b\u306a\u7406\u7531\u3068\u3057\u3066\u306f\u3001NVIDIA GPU\u4ee5\u5916\u306e\u74b0\u5883\u3067\u3082\u5b9f\u884c\u304c\u3067\u304d\u308b\u3053\u3068\u3068\u3001\u30ab\u30fc\u30cd\u30eb\u95a2\u6570\u306e\u5b9f\u884c\u6642\u30b3\u30f3\u30d1\u30a4\u30eb\u306e\u4ed5\u7d44\u307f\u304cOpenCL\u306eAPI\u30ec\u30d9\u30eb\u3067\u63d0\u4f9b\u3055\u308c\u3066\u3044\u308b\u306e\u3067\u30e9\u30a4\u30d6\u30e9\u30ea\u306e\u30bd\u30fc\u30b9\u304c\u8aad\u307f\u3084\u3059\u3044\u3053\u3068\u304c\u6319\u3052\u3089\u308c\u307e\u3059\u3002\u307e\u305f\u3001OpenCL\u5358\u4f53\u3067\u306f\u6a5f\u80fd\u7684\u306b\u8ca7\u5f31\u306a\u90e8\u5206\u3092Python\u3067\u88dc\u3048\u308b\u306e\u306f\u9b45\u529b\u7684\u3067\u3059\u3002\n\nPyCUDA\u3068PyOpenCL\u306e\u3069\u3061\u3089\u3092\u5229\u7528\u3059\u308b\u3079\u304d\u304b\u3068\u3044\u3046\u8a71\u304c\u6642\u3005\u3042\u308a\u307e\u3059\u304c\u3001\u6027\u80fd\u7684\u306b\u306f\u3042\u307e\u308a\u9055\u3044\u306f\u306a\u3044\u306e\u3067\u3001CUDA\u304bOpenCL\u306e\u6163\u308c\u3066\u3044\u308b\u65b9\u3067\u9078\u3076\u304b\u3001PyCUDA / PyOpenCL\u3067\u30c6\u30b9\u30c8\u5b9f\u88c5\u3057\u305f\u30ab\u30fc\u30cd\u30eb\u95a2\u6570\u3092\u5c06\u6765\u7684\u306bC/C++\u306b\u79fb\u690d\u3059\u308b\u306a\u3069\u3067\u3042\u308c\u3070\u3001\u30bf\u30fc\u30b2\u30c3\u30c8\u306b\u3059\u308b\u30d7\u30e9\u30c3\u30c8\u30d5\u30a9\u30fc\u30e0\u306b\u3042\u3089\u304b\u3058\u3081\u5408\u308f\u305b\u3066\u304a\u3044\u305f\u65b9\u304c\u3044\u3044\u3067\u3057\u3087\u3046\u3002\n\n# PyOpenCL\u306e\u30a2\u30c3\u30d7\u30c7\u30fc\u30c8\u72b6\u6cc1\n\nPyOpenCL\u306f\u30d0\u30fc\u30b8\u30e7\u30f30.92\u4ee5\u964d\u30012011.1\u30012011.2\u30012012.1\u3068\u3044\u3046\u30ca\u30f3\u30d0\u30ea\u30f3\u30b0\u3067\u30ea\u30ea\u30fc\u30b9\u304c\u884c\u308f\u308c\u3066\u3044\u3066\u3001\u73fe\u5728\u306f\u30d0\u30fc\u30b8\u30e7\u30f32012.2\u30ea\u30ea\u30fc\u30b9\u306b\u5411\u3051\u3066\u958b\u767a\u304c\u884c\u308f\u308c\u3066\u3044\u307e\u3059\u3002\u4e3b\u8981\u306a\u8ffd\u52a0\u6a5f\u80fd\u306e\u5b9f\u88c5\u306f\u843d\u3061\u7740\u3044\u3066\u308b\u3088\u3046\u306a\u306e\u3067\u3001\u4eca\u5e74\u4e2d\u304b\u306f\u308f\u304b\u308a\u307e\u305b\u3093\u304c\u9060\u304f\u306a\u3044\u3046\u3061\u306b\u30ea\u30ea\u30fc\u30b9\u3055\u308c\u308b\u3093\u3067\u306f\u306a\u3044\u3067\u3057\u3087\u3046\u304b\u3002\n\n\u3055\u3066\u3001\u672c\u984c\u306e\u3053\u30531\u5e74\u3067PyOpenCL\u306b\u8ffd\u52a0\u3055\u308c\u305f\u6a5f\u80fd\u306b\u3064\u3044\u3066\u304a\u8a71\u3057\u307e\u3057\u3087\u3046\u3002\n\u5927\u304d\u3044\u5909\u66f4\u70b9\u306f\u4ee5\u4e0b\u306e2\u70b9\u3067\u3059\u3002\n\n* \u8907\u7d20\u6570\u30b5\u30dd\u30fc\u30c8\u53ca\u3073\u30d9\u30c3\u30bb\u30eb\u95a2\u6570\u306e\u8ffd\u52a0 (2012.1)\n* Parallel Scan\u306e\u30a4\u30f3\u30bf\u30d5\u30a7\u30fc\u30b9\u5909\u66f4\u3068\u305d\u308c\u306b\u4f34\u3046\u5404\u7a2e\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u306e\u8ffd\u52a0 (2012.2)\n\n\u30d9\u30c3\u30bb\u30eb\u95a2\u6570\u3068\u3044\u3046\u8a00\u8449\u306fPyOpenCL\u306e\u30ea\u30ea\u30fc\u30b9\u30ce\u30fc\u30c8\u3067\u521d\u3081\u3066\u898b\u305f\u3050\u3089\u3044\u8a73\u3057\u304f\u306a\u3044\u306e\u3067\u3001\u4eca\u56de\u306f\u5237\u65b0\u3055\u308c\u305fParallel Scan\u3068\u305d\u308c\u3092\u30d9\u30fc\u30b9\u306b\u3057\u305f\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u306b\u3064\u3044\u3066\u7d39\u4ecb\u3057\u307e\u3059\u3002\n\n# Parallel Scan\n\nScan\u3068\u306f\u3001Python\u30b3\u30fc\u30c9\u3067\u5927\u96d1\u628a\u306b\u8aac\u660e\u3059\u308b\u3068\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u51e6\u7406\u306b\u306a\u308a\u307e\u3059\u3002\n\n```python\nfrom functools import reduce\n\n\ndef add(a, b): \n    return a + b \n\n\ndef inclusive_scan(f, seq):\n    return [reduce(f, seq[0:i + 1]) for i in range(len(seq))]\n\n\ndef exclusive_scan(f, seq, init):\n    return [reduce(f, seq[0:i], init) for i in range(len(seq))]\n\n\nseq = [1, 3, 5, 7, 9]\n\nprint(inclusive_scan(add, seq))\n# [1, 4, 9, 16, 25]\n\nprint(exclusive_scan(add, seq, 0)) \n# [0, 1, 4, 9, 16]\n```\n\n\u4ee5\u4e0a\u306e\u3088\u3046\u306b\u3001\u30ea\u30b9\u30c8\u3092\u4e0e\u3048\u308b\u3068\u3001\u5404\u8981\u7d20\u304c\u81ea\u5206\u3088\u308a\u624b\u524d\u306e\u8981\u7d20\u307e\u3067\u306e\u7dcf\u548c\u3092\u6301\u3063\u305f\u30ea\u30b9\u30c8\u304c\u5f97\u3089\u308c\u307e\u3059\u3002\u81ea\u5206\u81ea\u8eab\u3092\u542b\u3080\u304b\u3069\u3046\u304b\u3067inclusive_scan\u3001exclusive_scan\u306e\u4e8c\u7a2e\u985e\u304c\u3042\u308a\u3001exclusive_scan\u306e\u5834\u5408\u306f\u5358\u4f4d\u5143\u304c\u5fc5\u8981\u3067\u3059\u3002\n\nScan\u306f\u548c\u4ee5\u5916\u306b\u3082\u3001\u3042\u308b\u6761\u4ef6\u3092\u6e80\u305f\u3059\u4e8c\u9805\u6f14\u7b97\u306b\u5bfe\u3057\u3066\u9069\u7528\u53ef\u80fd\u3067\u3001\u4f8b\u3048\u3070\u81ea\u5206\u3088\u308a\u524d\u306e\u8981\u7d20\u307e\u3067\u306e\u7a4d\u3084\u6700\u5c0f\u5024\u3001\u6700\u5927\u5024\u3092\u6c42\u3081\u308b\u3053\u3068\u306a\u3069\u304c\u3067\u304d\u307e\u3059\u3002\u4e26\u5217\u7684\u306aScan\u304c\u53ef\u80fd\u306a\u6f14\u7b97\u306e\u6761\u4ef6\u306b\u3064\u3044\u3066\u306f\u4ee5\u4e0b\u306e\u30d6\u30ed\u30b0\u8a18\u4e8b\u3067\u8b70\u8ad6\u3055\u308c\u3066\u3044\u307e\u3059\u3002\n\n* [\u4e26\u5217\u74b0\u5883\u306b\u304a\u3051\u308breduce\u3068scan\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0](http://mglab.blogspot.jp/2011/04/reducescan.html)\n\n# Scan\u3092\u30d9\u30fc\u30b9\u306b\u3057\u305f\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\n\n\u4e26\u5217Scan\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u306f\u69d8\u3005\u306a\u5b9f\u88c5\u304c\u3042\u308a\u3001\u3088\u304f\u30c1\u30e5\u30fc\u30cb\u30f3\u30b0\u3055\u308c\u305f\u3082\u306e\u304cCUDA\u3084OpenCL\u306e\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u3068\u3057\u3066\u6dfb\u4ed8\u3055\u308c\u3066\u3044\u305f\u308a\u3057\u307e\u3059\u3002\u305d\u308c\u3067\u306f\u3001Scan\u304c\u52b9\u7387\u3088\u304f\u3067\u304d\u308b\u3068\u3069\u3046\u5b09\u3057\u3044\u306e\u3067\u3057\u3087\u3046\u304b\uff1f\n\n\u305d\u308c\u306f\u3001\u4ee5\u4e0b\u306b\u6319\u3052\u308b\u3088\u3046\u306astream compaction\u7cfb\u306e\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u3084\u30bd\u30fc\u30c8\u307e\u3067\u3082\u304cScan\u3092\u3082\u3068\u306b\u5b9f\u88c5\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u308b\u304b\u3089\u3067\u3059\u3002\u65b0\u3057\u304f\u5c0e\u5165\u3055\u308c\u305f\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u306b\u3064\u3044\u3066\u5b9f\u969b\u306ePyOpenCL\u3092\u4f7f\u3063\u305f\u30b3\u30fc\u30c9\u3067\u898b\u3066\u307f\u307e\u3057\u3087\u3046\u3002\n\n```python\nfrom __future__ import print_function\nimport numpy as np\nimport pyopencl as cl\nfrom pyopencl import array as clarray\nfrom pyopencl import algorithm as clalgorithm\n\nctx = cl.create_some_context()\nqueue = cl.CommandQueue(ctx)\n\nsize = 100\nhost_a = np.random.randint(0, 10, size).astype(np.int32)\nprint(host_a)\n# [1 1 1 6 6 9 8 9 8 1 2 7 0 6 1 6 5 4 4 5 3 5 1 0 3 6 9 4 8 5 1 4 8 8 1 3 8\n#  3 7 5 1 7 1 7 6 1 9 9 7 3 4 1 8 2 8 3 0 6 4 9 0 2 7 4 4 7 7 1 3 4 7 7 9 6\n#  6 7 9 1 2 3 1 2 3 9 1 7 3 0 9 5 8 1 5 4 5 2 8 8 1 9]\na = clarray.to_device(queue, host_a)\n\n\n# 1. \u6761\u4ef6\u306b\u4e00\u81f4\u3059\u308b\u8981\u7d20\u306e\u307f\u3092\u6b8b\u3059\uff08array\u306e\u524d\u5074\u306b\u5bc4\u305b\u308b)\nb, b_size = clalgorithm.copy_if(a, 'ary[i] % 2 == 0')\nhost_b = b.get()[:b_size.get()]\nprint(host_b)\n# [6 6 8 8 2 0 6 6 4 4 0 6 4 8 4 8 8 8 6 4 8 2 8 0 6 4 0 2 4 4 4 6 6 2 2 0 8\n#  4 2 8 8]\n\n\n# 2. \u6761\u4ef6\u306b\u4e00\u81f4\u3059\u308b\u8981\u7d20\u3092\u53d6\u308a\u9664\u304f(\u4e00\u81f4\u3057\u306a\u3044\u8981\u7d20\u3092array\u306e\u524d\u5074\u306b\u5bc4\u305b\u308b)\nc, c_size = clalgorithm.remove_if(a, 'ary[i] % 2 == 0')\nhost_c = c.get()[:c_size.get()]\nprint(host_c)\n# [1 1 1 9 9 1 7 1 5 5 3 5 1 3 9 5 1 1 3 3 7 5 1 7 1 7 1 9 9 7 3 1 3 9 7 7 7\n#  1 3 7 7 9 7 9 1 3 1 3 9 1 7 3 9 5 1 5 5 1 9]\n\n\n# 3. \u6761\u4ef6\u306b\u4e00\u81f4\u3059\u308b\u8981\u7d20\u3092\u524d\u5074\u306b\u3001\u305d\u3046\u3067\u306a\u3044\u8981\u7d20\u3092\u5f8c\u5074\u306b\u5bc4\u305b\u308b\nd, e, d_size = clalgorithm.partition(a, 'ary[i] % 2 == 0')\nhost_d = d.get()[:d_size.get()]\nhost_e = e.get()[:size - d_size.get()]\nprint(host_d)\n# [6 6 8 8 2 0 6 6 4 4 0 6 4 8 4 8 8 8 6 4 8 2 8 0 6 4 0 2 4 4 4 6 6 2 2 0 8\n#  4 2 8 8]\nprint(host_e)\n# [1 1 1 9 9 1 7 1 5 5 3 5 1 3 9 5 1 1 3 3 7 5 1 7 1 7 1 9 9 7 3 1 3 9 7 7 7\n#  1 3 7 7 9 7 9 1 3 1 3 9 1 7 3 9 5 1 5 5 1 9]\n# partition\u306e\u5404\u7d50\u679c\u306fcopy_if, remove_if\u500b\u5225\u306e\u7d50\u679c\u3068\u7b49\u3057\u3044\nprint(np.all(host_b == host_d))\n# True\nprint(np.all(host_c == host_e))\n# True\n\n\n# 4. \u30bd\u30fc\u30c8\nsort_kernel = clalgorithm.RadixSort(ctx, 'int* ary', 'ary[i]', ['ary'])\n(f,) = sort_kernel(a, key_bits=32)\nhost_f = f.get()\nprint(host_f)\n# [0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2 3 3 3 3 3 3 3 3\n#  3 3 4 4 4 4 4 4 4 4 4 4 5 5 5 5 5 5 5 5 6 6 6 6 6 6 6 6 6 7 7 7 7 7 7 7 7\n#  7 7 7 7 8 8 8 8 8 8 8 8 8 8 8 9 9 9 9 9 9 9 9 9 9 9]\n\n\n# 5. \u9023\u7d9a\u3059\u308b\u91cd\u8907\u8981\u7d20\u3092\u53d6\u308a\u9664\u304f\ng, g_size = clalgorithm.unique(f)\nhost_g = g.get()[:g_size.get()]\nprint(host_g)\n# [0 1 2 3 4 5 6 7 8 9]\n```\n\n\u4ee5\u4e0a\u306e\u3088\u3046\u306a\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u3092\u4f7f\u3044\u3053\u306a\u3059\u3053\u3068\u304c\u3067\u304d\u308c\u3070GPU\u4e0a\u3067\u52b9\u7387\u3088\u304f\u5b9f\u884c\u3067\u304d\u308b\u51e6\u7406\u306e\u5e45\u306f\u5e83\u304c\u308b\u3067\u3057\u3087\u3046\u3002\n\n# \u6700\u5f8c\u306b\n\n\u4eca\u56de\u7d39\u4ecb\u3057\u305fScan\u3092\u30d9\u30fc\u30b9\u306b\u3057\u305f\u65b0\u3057\u3044\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u306f\u3001\u73fe\u5728\u306e\u30ea\u30ea\u30fc\u30b9\u30d0\u30fc\u30b8\u30e7\u30f3(2012.1)\u306b\u306f\u542b\u307e\u308c\u3066\u304a\u3089\u305a\u3001\u30ea\u30dd\u30b8\u30c8\u30ea\u306e\u6700\u65b0\u7248\u3092\u5165\u624b\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\n\nPyOpenCL\u306f\u5982\u4f55\u305b\u3093\u3001\u69d8\u3005\u306aOpenCL\u30d7\u30e9\u30c3\u30c8\u30d5\u30a9\u30fc\u30e0\u3084Python\u306e\u30d0\u30fc\u30b8\u30e7\u30f3\u306b\u5bfe\u5fdc\u3057\u306a\u3051\u308c\u3070\u306a\u3089\u306a\u3044\u305f\u3081\u3001\u30d0\u30b0\u306b\u306f\u51fa\u4f1a\u3044\u3084\u3059\u3044\u30d7\u30ed\u30c0\u30af\u30c8\u3067\u3082\u3042\u308b\u304b\u3068\u601d\u3044\u307e\u3059\u3002\u6a5f\u80fd\u8ffd\u52a0\u3060\u3051\u3067\u306a\u304f\u3001\u30d0\u30b0\u4fee\u6b63\u3082\u983b\u7e41\u306b\u884c\u308f\u308c\u3066\u3044\u308b\u306e\u3067\u3001github\u304b\u3089[\u6700\u65b0\u7248](https://github.com/inducer/pyopencl)\u3092\u8a66\u3057\u3066\u307f\u308b\u306e\u3092\u304a\u52e7\u3081\u3057\u307e\u3059\u3002\n\n\u7b2c2\u5f3e\u304c\u3042\u308b\u304b\u306f\u4e0d\u660e\u3002", "tags": ["GPGPU", "OpenCL", "Python"]}