{"context": "\n\n\n\u591a\u6bb5\u968e\u9078\u629c\n\u30b7\u30ea\u30fc\u30ba:yield\u306e\u7df4\u7fd2/\u30b8\u30a7\u30cd\u30ec\u30fc\u30bf\u3092\u5165\u308c\u5b50\u306b\n\n\n\n\n\u554f\u984c\n\nhttp://nabetani.sakura.ne.jp/hena/ord24eliseq/http://qiita.com/Nabetani/items/1c83005a854d2c6cbb69\n\n\n\nRuby\nhttp://qiita.com/cielavenir/items/9f15e29b73ecf98968a5\n\n\nC#/Python\nhttp://qiita.com/cielavenir/items/a1156e6a4f71ddbe5dcb\n\n\n\n\u3053\u3053\u304b\u3089\u4e0a\u306fdrop_prev_square/drop_prev_cubic\u3092\u307e\u3068\u3081\u308b\u524d\u306e\u7b54\u6848\n\n\nGo/C#/Ruby/Python\nhttp://qiita.com/cielavenir/items/2a685d3080862f2c2c47\n\n\nPHP/JavaScript\nhttp://qiita.com/cielavenir/items/28d613ac3823afbf8407\n\n\nVB\nhttp://qiita.com/cielavenir/items/cb7266abd30eadd71c04\n\n\nD\nhttp://qiita.com/cielavenir/items/47c9e50ee60bef2847ec\n\n\nPerl\nhttp://qiita.com/cielavenir/items/6dfbff749d833c0fd423\n\n\nC++17(TS)\nhttp://qiita.com/cielavenir/items/e1129ca185008f49cbab\n\n\nLua\nhttp://qiita.com/cielavenir/items/c60fe7e8da73487ba062\n\n\n\n2015/03/24\u306b\u30ea\u30ea\u30fc\u30b9\u3055\u308c\u305fD 2.067\u3067Generator\u304c\u8ffd\u52a0\u3055\u308c\u305f\u3053\u3068\u3092\u77e5\u3063\u305f(\u9045\u3059\u304e)\u3002(Java\u3068\u306f\u9055\u3063\u3066)\u3042\u308a\u304c\u305f\u3044\u3053\u3068\u306byield\u304c\u5b9f\u88c5\u3055\u308c\u3066\u3044\u308b\u3002\nyield\u3068\u3044\u3048\u3070\u3001\u591a\u6bb5\u968e\u9078\u629c\u3067\u3042\u308b\u3002\n\u305d\u308c\u306b\u3057\u3066\u3082\u3001reduce\u304c\u52b9\u304b\u306a\u304b\u3063\u305f\u306e\u306f\u5c11\u3057\u6b8b\u5ff5\u3002\n\u3068\u3053\u308d\u3067\u3001f['2']\u3068\u304b\u306e\u5ba3\u8a00\u304c\u3042\u308c\u306a\u306e\u306f\u3001\u30e9\u30e0\u30c0\u5f0f\u30ad\u30e3\u30d7\u30c1\u30e3\u306e\u90fd\u5408\u3002Python\u3082\u3053\u3046\u3044\u3046\u6027\u8cea\u3092\u6301\u3064\u3089\u3057\u3044\u3002\n\ntyama_hena24_enum.d\n#!/usr/bin/env rdmd\n// http://qiita.com/Nabetani/items/1c83005a854d2c6cbb69\n// http://nabetani.sakura.ne.jp/hena/ord24eliseq/\n\nimport std.stdio,std.string,std.math;\nimport std.algorithm,std.concurrency;\n\nauto generate(){\n    return new Generator!int({\n        int i=1;\n        for(;;){\n            yield(i);\n            i+=1;\n        }\n    });\n}\nauto drop_prev(bool delegate(int) check,Generator!int prev){\n    return new Generator!int({\n        int a=prev.front;\n        prev.popFront();\n        int b=prev.front;\n        for(;;){\n            if(!check(b))yield(a);\n            a=b;\n            prev.popFront();\n            b=prev.front;\n        }\n    });\n}\nauto drop_next(bool delegate(int) check,Generator!int prev){\n    return new Generator!int({\n        int a=prev.front;\n        prev.popFront();\n        int b=prev.front;\n        yield(a);\n        for(;;){\n            if(!check(a))yield(b);\n            a=b;\n            prev.popFront();\n            b=prev.front;\n        }\n    });\n}\nauto drop_n(bool delegate(int,int) check,int n,Generator!int prev){\n    return new Generator!int({\n        int i=0;\n        for(;;){\n            i++;\n            int a=prev.front;\n            if(!check(i,n))yield(a);\n            prev.popFront();\n        }\n    });\n}\n\nvoid main(){\n    bool is_sq(int n){\n        int x=cast(int)sqrt(cast(real)n);\n        return x*x==n;\n    }\n    bool is_cb(int n){\n        int x=cast(int)cbrt(cast(real)n);\n        return x*x*x==n;\n    }\n    bool is_multiple(int i,int n){return i%n==0;}\n    bool is_le(int i,int n){return i<=n;}\n\n    Generator!int delegate(Generator!int)[char] f=[\n        'S':e => drop_next(&is_sq,e),\n        's':e => drop_prev(&is_sq,e),\n        'C':e => drop_next(&is_cb,e),\n        'c':e => drop_prev(&is_cb,e),\n        'h':e => drop_n(&is_le,100,e),\n    ];\n    for(int i=2;i<10;i++){\n        f[cast(char)('0'+i)] = delegate(int i){return (Generator!int e)=>drop_n(&is_multiple,i,e);}(i);\n    }\n    string line;\n    for(;(line=stdin.readln()) !is null;){\n        line=chomp(line);\n        bool first=true;\n        //cS => f['S'](f['c'](generate()))\n        //auto z=reduce!((s,e)=>f[e](s))(generate(),line);\n\n        auto z=generate();\n        foreach(char e;line)z=f[e](z);\n\n        for(int i=0;i<10;i++){\n            int n=z.front;\n            z.popFront();\n            if(!first)write(',');\n            first=false;\n            write(n);\n        }\n        writeln();\n        stdout.flush();\n    }\n}\n\n\n\n|\u591a\u6bb5\u968e\u9078\u629c|\u30b7\u30ea\u30fc\u30ba:yield\u306e\u7df4\u7fd2/\u30b8\u30a7\u30cd\u30ec\u30fc\u30bf\u3092\u5165\u308c\u5b50\u306b|\n|:--|:--|\n|\u554f\u984c|http://nabetani.sakura.ne.jp/hena/ord24eliseq/<br>http://qiita.com/Nabetani/items/1c83005a854d2c6cbb69|\n|Ruby|http://qiita.com/cielavenir/items/9f15e29b73ecf98968a5|\n|C#/Python|http://qiita.com/cielavenir/items/a1156e6a4f71ddbe5dcb|\n||\u3053\u3053\u304b\u3089\u4e0a\u306fdrop_prev_square/drop_prev_cubic\u3092\u307e\u3068\u3081\u308b\u524d\u306e\u7b54\u6848|\n|Go/C#/Ruby/Python|http://qiita.com/cielavenir/items/2a685d3080862f2c2c47|\n|PHP/JavaScript|http://qiita.com/cielavenir/items/28d613ac3823afbf8407|\n|VB|http://qiita.com/cielavenir/items/cb7266abd30eadd71c04|\n|D|http://qiita.com/cielavenir/items/47c9e50ee60bef2847ec|\n|Perl|http://qiita.com/cielavenir/items/6dfbff749d833c0fd423|\n|C++17(TS)|http://qiita.com/cielavenir/items/e1129ca185008f49cbab|\n|Lua|http://qiita.com/cielavenir/items/c60fe7e8da73487ba062|\n\n2015/03/24\u306b\u30ea\u30ea\u30fc\u30b9\u3055\u308c\u305fD 2.067\u3067Generator\u304c\u8ffd\u52a0\u3055\u308c\u305f\u3053\u3068\u3092\u77e5\u3063\u305f(\u9045\u3059\u304e)\u3002(Java\u3068\u306f\u9055\u3063\u3066)\u3042\u308a\u304c\u305f\u3044\u3053\u3068\u306byield\u304c\u5b9f\u88c5\u3055\u308c\u3066\u3044\u308b\u3002\n**yield\u3068\u3044\u3048\u3070\u3001\u591a\u6bb5\u968e\u9078\u629c\u3067\u3042\u308b\u3002**\n\n\u305d\u308c\u306b\u3057\u3066\u3082\u3001reduce\u304c\u52b9\u304b\u306a\u304b\u3063\u305f\u306e\u306f\u5c11\u3057\u6b8b\u5ff5\u3002\n\n\u3068\u3053\u308d\u3067\u3001f['2']\u3068\u304b\u306e\u5ba3\u8a00\u304c\u3042\u308c\u306a\u306e\u306f\u3001\u30e9\u30e0\u30c0\u5f0f\u30ad\u30e3\u30d7\u30c1\u30e3\u306e\u90fd\u5408\u3002[Python\u3082\u3053\u3046\u3044\u3046\u6027\u8cea\u3092\u6301\u3064\u3089\u3057\u3044\u3002](https://twitter.com/closureobject/status/678619154346151941)\n\n```d:tyama_hena24_enum.d\n#!/usr/bin/env rdmd\n// http://qiita.com/Nabetani/items/1c83005a854d2c6cbb69\n// http://nabetani.sakura.ne.jp/hena/ord24eliseq/\n\nimport std.stdio,std.string,std.math;\nimport std.algorithm,std.concurrency;\n\nauto generate(){\n\treturn new Generator!int({\n\t\tint i=1;\n\t\tfor(;;){\n\t\t\tyield(i);\n\t\t\ti+=1;\n\t\t}\n\t});\n}\nauto drop_prev(bool delegate(int) check,Generator!int prev){\n\treturn new Generator!int({\n\t\tint a=prev.front;\n\t\tprev.popFront();\n\t\tint b=prev.front;\n\t\tfor(;;){\n\t\t\tif(!check(b))yield(a);\n\t\t\ta=b;\n\t\t\tprev.popFront();\n\t\t\tb=prev.front;\n\t\t}\n\t});\n}\nauto drop_next(bool delegate(int) check,Generator!int prev){\n\treturn new Generator!int({\n\t\tint a=prev.front;\n\t\tprev.popFront();\n\t\tint b=prev.front;\n\t\tyield(a);\n\t\tfor(;;){\n\t\t\tif(!check(a))yield(b);\n\t\t\ta=b;\n\t\t\tprev.popFront();\n\t\t\tb=prev.front;\n\t\t}\n\t});\n}\nauto drop_n(bool delegate(int,int) check,int n,Generator!int prev){\n\treturn new Generator!int({\n\t\tint i=0;\n\t\tfor(;;){\n\t\t\ti++;\n\t\t\tint a=prev.front;\n\t\t\tif(!check(i,n))yield(a);\n\t\t\tprev.popFront();\n\t\t}\n\t});\n}\n\nvoid main(){\n\tbool is_sq(int n){\n\t\tint x=cast(int)sqrt(cast(real)n);\n\t\treturn x*x==n;\n\t}\n\tbool is_cb(int n){\n\t\tint x=cast(int)cbrt(cast(real)n);\n\t\treturn x*x*x==n;\n\t}\n\tbool is_multiple(int i,int n){return i%n==0;}\n\tbool is_le(int i,int n){return i<=n;}\n\n\tGenerator!int delegate(Generator!int)[char] f=[\n\t\t'S':e => drop_next(&is_sq,e),\n\t\t's':e => drop_prev(&is_sq,e),\n\t\t'C':e => drop_next(&is_cb,e),\n\t\t'c':e => drop_prev(&is_cb,e),\n\t\t'h':e => drop_n(&is_le,100,e),\n\t];\n\tfor(int i=2;i<10;i++){\n\t\tf[cast(char)('0'+i)] = delegate(int i){return (Generator!int e)=>drop_n(&is_multiple,i,e);}(i);\n\t}\n\tstring line;\n\tfor(;(line=stdin.readln()) !is null;){\n\t\tline=chomp(line);\n\t\tbool first=true;\n\t\t//cS => f['S'](f['c'](generate()))\n\t\t//auto z=reduce!((s,e)=>f[e](s))(generate(),line);\n\n\t\tauto z=generate();\n\t\tforeach(char e;line)z=f[e](z);\n\n\t\tfor(int i=0;i<10;i++){\n\t\t\tint n=z.front;\n\t\t\tz.popFront();\n\t\t\tif(!first)write(',');\n\t\t\tfirst=false;\n\t\t\twrite(n);\n\t\t}\n\t\twriteln();\n\t\tstdout.flush();\n\t}\n}\n```\n", "tags": ["yhpg", "\u3069\u3046\u66f8\u304f", "dlang"]}