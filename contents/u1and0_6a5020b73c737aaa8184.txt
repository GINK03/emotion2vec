{"context": "\n\u74b0\u5883\n\n\nwin10 64bit\nPython 3.5.2 \nAnaconda 4.1.1 (64-bit)\n\n\n\u8457\u66f8\n\n\nPython for Data Analysis( by Wes McKinney )(Final Release Date: October 2012 )\n\n\n\u30c7\u30fc\u30bf\n\n\nhttps://github.com/wesm/pydata-book\n\n\n\n\n\u30e2\u30b8\u30e5\u30fc\u30eb\n# %load ipython_log.py\n# IPython log file\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport pandas as pd\n\n\nfile\u306e\u30ed\u30fc\u30c9\npath='./usagov_bitly_data2012-03-16-1331923249.txt'\nopen(path).readline()\nimport json\nrecord=[json.loads(line) for line in open(path)]   #json\u5f62\u5f0f\u3067\u8aad\u307f\u8fbc\u307f\nrecord[0]   #record\u306e\u5185\u5bb9\u306f\u9577\u3044\u306e\u3067\u3068\u308a\u3042\u3048\u305a1\u8981\u7d20\u3060\u3051\u898b\u3066\u307f\u308b\nrecord[0]['tz']   #\u305d\u306e\u3046\u3061tz\u304c\u30ad\u30fc\u306e\u3082\u306e\ntime_zone=[rec['tz'] for rec in record if 'tz' in rec]   #record\u306e\u4e2d\u306etz\u3060\u3051\u898b\u308b\u3002\u305f\u3060\u3057tz\u304c\u3042\u3063\u305f\u3068\u304d\u306e\u307f\ntime_zone[:10]   #\u4e0a\u304b\u308910\u884c\u76ee\u3060\u3051\u3092\u898b\u308b\n\n\ntz\u3092\u6570\u3048\u3066\u30c7\u30a3\u30af\u30b7\u30e7\u30ca\u30ea\u306b\u683c\u7d0d\ndef get_counts(seq):\n    '''\n        seq\u5185\u306e\u6587\u5b57\u5217\u3068\u540c\u3058\u3082\u306e\u304c\u4f55\u500b\u3042\u308b\u304b\u3092\u30ab\u30a6\u30f3\u30c8\u3057\u3001\u30c7\u30a3\u30af\u30b7\u30e7\u30ca\u30ea{'\u6587\u5b57\u5217':\u500b\u6570,...}\u3068\u3057\u3066\u8fd4\u3059\n    def get_counts(seq):# \u3053\u308c\u3068\u540c\u3058\u610f\u5473\u3060\u3051\u3069defaultdict\u4f7f\u3046\u3068\u7c21\u5358\n        count=defaultdict(int)   #count={}\n        for x in seq:\n            if x in counts:\n                counts[x]+=1\n            else:\n                count[x]=1\n            return counts\n    '''\n    from collections import defaultdict\n    counts=defaultdict(int)   #returns `defaultdict(<class 'int'>, {})`\n    for x in seq:\n        counts[x]+=1\n    return counts\n\ncounts=get_counts(time_zone)\ncounts['America/New_York']\nlen(time_zone)\n\n\ntop10\u3092\u63a2\u3059\n\u3084\u3063\u3066\u3044\u308b\u3053\u3068\u306f\u5f62\u304c\u9055\u3046\u3060\u3051\u3067\u307f\u3093\u306a\u4e00\u7dd2\n\n\u95a2\u6570\u4f5c\u308b\ndef top_counts(count_dict,n=10):\n    value_key_pairs=[(count,tz) for tz, count in count_dict.items()]\n    value_key_pairs.sort()\n    return value_key_pairs[-n:]\n\ntop_counts(counts)\n\n\nclass\u4f7f\u3046\nfrom collections import Counter\ncounts= Counter(time_zone)\ncounts.most_common(10)\n\n\npandas\u4f7f\u3046\nfrom pandas import DataFrame,Series\nimport pandas as pd\nframe=DataFrame(record)\nframe['tz'][:10]\ntz_counts=frame['tz'].value_counts()\ntz_counts[:10]\n\n\nNA\u306e\u88dc\u5b8c\nclean_tz=frame['tz'].fillna('Missing')\nclean_tz[clean_tz=='']='UNknown'\nclean_tz\ntz_counts=clean_tz.value_counts()\ntz_counts[:10]\n\n\ntz_count\u306ePLOT\ntz_counts[:10].plot(kind='barh',rot=0)\nimport matplotlib.pyplot as plt\n# plt.show()\n\n\n\u8981\u7d20\u6570\u30ab\u30a6\u30f3\u30c8\nframe['a'][1]\nframe['a'][50]\nframe['a'][51]\nresults=Series([x.split()[0] for x in frame.a.dropna()])   #.dropna() pandas\u30e1\u30bd\u30c3\u30c9\u3000\u7a7a\u767d\u884c\u3092\u524a\u9664\u3000\u5f15\u6570\u3067\u524a\u9664\u3059\u308b\u884c\u6307\u5b9a\n   #str.split(x) x\u3092\u533a\u5207\u308a\u6587\u5b57\u306b\u3057\u3066str\u3092\u5206\u5272\u3057\u3066\u30ea\u30b9\u30c8\u306b\u53ce\u3081\u308b\n   #\u7a7a\u767d\u3067\u533a\u5207\u3063\u305f\u6587\u5b57\u5217\u3092\u30ea\u30b9\u30c8\u306b\u53ce\u3081\u3066(\u30ea\u30b9\u30c8\u5185\u6cd5\u8868\u8a18)\u3001Series\u30af\u30e9\u30b9\u3067pandas dataframe\u306b\u3059\u308b\nresults[:5]\nresults.value_counts()[:8]   #value_counts()\u3067\u540c\u3058\u8981\u7d20\u306e\u6570\u3092\u6570\u3048\u308b\n\n\n\u8981\u7d20\u6570\u30ab\u30a6\u30f3\u30c8(\u5225\u306e\u65b9\u6cd5)\ncframe=frame[frame.a.notnull()]   #frame\u306ea\u5217\u306enull\u3058\u3083\u306a\u3044\u5974\u3060\u3051\u96c6\u3081\u305f(cframe['a']==frame.a.dropna())\nbool(map(list,[cframe['a'],frame.a.dropna()]))   #list\u95a2\u6570\u3092cframe['a']\u3068frame.a.dropna()\u306b\u9069\u7528\u3055\u305b\u3066\u540c\u3058\u304b\u3069\u3046\u304b\u898b\u308b\n\n\n'Windows' or Not?\nimport numpy as np\noperating_system=np.where(cframe['a'].str.contains('Windows'),'Windows','Not Windows')   #cframe['a']\u304c'Windows'\u3068\u3044\u3046\u6587\u5b57\u3092\u542b\u3080\u3000True\u3067'Windows'\u3000false\u3067'Not Windows'\u3092\u8fd4\u3059\n   #` ['Windows' if 'Windows' in x else 'Not Windows' for x in cframe['a']]`\u3068\u540c\u3058\noperating_system[:5]\n\n\noperating_system Another Way\noperating_system2=['Windows' if 'Windows' in x else 'Not Windows' for x in cframe['a']]\nbool(list(operating_system)==operating_system2)   #True\n\n\nby_tz_os=cframe.groupby(['tz',operating_system])\nagg_counts=by_tz_os.size().unstack().fillna(0)\nagg_counts[:10]\n\n\n\n                                                                    #2016/07/28 22:56:30__\nindexer=agg_counts.sum(1).argsort()   #argsort()\u30bd\u30fc\u30c8\u5f8c\u306e\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u3092np.array\u5f62\u5f0f\u3067\u8fd4\u3059\n   #np.sum() \u57fa\u672c\u7684\u306b\u3001array\u306e\u4e2d\u8eab\u5168\u90e8\u8db3\u3057\u305f\u3084\u3064\u8fd4\u3059\n\n'''\n# ABOUT np.sum()\n\n>>> np.sum([[0, 1], [0, 5]], axis=0)\narray([0, 6])   #return array([0+0],[1+5])\n>>> np.sum([[0, 1], [0, 5]], axis=1)\narray([1, 5])   #return array([0+1],[0+5])\n\n'''\n\nindexer[:10]\n\n\ncount_subset=agg_counts.take(indexer)[-10:]   #indexer\u306e\u6700\u5f8c\u304b\u308910\u5206\u3060\u3051\u306eagg_counts\u3092\u8fd4\u3059(take=\u53d6\u5f97\u3059\u308b)\n\ncount_subset.plot(kind='barh', stacked=True)\n# plt.show()\n\n\n\n\u6b63\u898f\u5316(\u7d42\u7aef\u304c 0,1\u3064\u307e\u308a\u6bd4\u7387\u3092\u793a\u3059)\nnormed_subset=count_subset.div(count_subset.sum(1),axis=0)\nnormed_subset.plot(kind='barh',stacked=True)\n# plt.show()\n\n* \u74b0\u5883\n\t* win10 64bit\n\t* Python 3.5.2 \n\t* Anaconda 4.1.1 (64-bit)\n* \u8457\u66f8\n\t* [Python for Data Analysis( by Wes McKinney )(Final Release Date: October 2012 )](http://www.cin.ufpe.br/~embat/Python%20for%20Data%20Analysis.pdf)\n* \u30c7\u30fc\u30bf\n\t* [https://github.com/wesm/pydata-book](https://github.com/wesm/pydata-book)\n\n\n\n\n\n# \u30e2\u30b8\u30e5\u30fc\u30eb\n\n```python\n# %load ipython_log.py\n# IPython log file\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport pandas as pd\n```\n\n\n\n\n\n\n\n# file\u306e\u30ed\u30fc\u30c9\n\n```python\npath='./usagov_bitly_data2012-03-16-1331923249.txt'\nopen(path).readline()\nimport json\nrecord=[json.loads(line) for line in open(path)]   #json\u5f62\u5f0f\u3067\u8aad\u307f\u8fbc\u307f\nrecord[0]   #record\u306e\u5185\u5bb9\u306f\u9577\u3044\u306e\u3067\u3068\u308a\u3042\u3048\u305a1\u8981\u7d20\u3060\u3051\u898b\u3066\u307f\u308b\nrecord[0]['tz']   #\u305d\u306e\u3046\u3061tz\u304c\u30ad\u30fc\u306e\u3082\u306e\ntime_zone=[rec['tz'] for rec in record if 'tz' in rec]   #record\u306e\u4e2d\u306etz\u3060\u3051\u898b\u308b\u3002\u305f\u3060\u3057tz\u304c\u3042\u3063\u305f\u3068\u304d\u306e\u307f\ntime_zone[:10]   #\u4e0a\u304b\u308910\u884c\u76ee\u3060\u3051\u3092\u898b\u308b\n```\n\n\n\n\n\n\n\n\n\n# tz\u3092\u6570\u3048\u3066\u30c7\u30a3\u30af\u30b7\u30e7\u30ca\u30ea\u306b\u683c\u7d0d\n```python\ndef get_counts(seq):\n\t'''\n\t\tseq\u5185\u306e\u6587\u5b57\u5217\u3068\u540c\u3058\u3082\u306e\u304c\u4f55\u500b\u3042\u308b\u304b\u3092\u30ab\u30a6\u30f3\u30c8\u3057\u3001\u30c7\u30a3\u30af\u30b7\u30e7\u30ca\u30ea{'\u6587\u5b57\u5217':\u500b\u6570,...}\u3068\u3057\u3066\u8fd4\u3059\n\tdef get_counts(seq):# \u3053\u308c\u3068\u540c\u3058\u610f\u5473\u3060\u3051\u3069defaultdict\u4f7f\u3046\u3068\u7c21\u5358\n\t\tcount=defaultdict(int)   #count={}\n\t\tfor x in seq:\n\t\t\tif x in counts:\n\t\t\t\tcounts[x]+=1\n\t\t\telse:\n\t\t\t\tcount[x]=1\n\t\t\treturn counts\n\t'''\n\tfrom collections import defaultdict\n\tcounts=defaultdict(int)   #returns `defaultdict(<class 'int'>, {})`\n\tfor x in seq:\n\t\tcounts[x]+=1\n\treturn counts\n\ncounts=get_counts(time_zone)\ncounts['America/New_York']\nlen(time_zone)\n```\n\n\n\n\n\n\n\n\n\n\n# top10\u3092\u63a2\u3059\n\u3084\u3063\u3066\u3044\u308b\u3053\u3068\u306f\u5f62\u304c\u9055\u3046\u3060\u3051\u3067\u307f\u3093\u306a\u4e00\u7dd2\n\n\n## \u95a2\u6570\u4f5c\u308b\n```python\ndef top_counts(count_dict,n=10):\n\tvalue_key_pairs=[(count,tz) for tz, count in count_dict.items()]\n\tvalue_key_pairs.sort()\n\treturn value_key_pairs[-n:]\n\ntop_counts(counts)\n```\n\n\n\n\n## class\u4f7f\u3046\n```python\nfrom collections import Counter\ncounts= Counter(time_zone)\ncounts.most_common(10)\n```\n\n\n\n\n## pandas\u4f7f\u3046\n\n```python\nfrom pandas import DataFrame,Series\nimport pandas as pd\nframe=DataFrame(record)\nframe['tz'][:10]\ntz_counts=frame['tz'].value_counts()\ntz_counts[:10]\n```\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n# NA\u306e\u88dc\u5b8c\n\n```python\nclean_tz=frame['tz'].fillna('Missing')\nclean_tz[clean_tz=='']='UNknown'\nclean_tz\ntz_counts=clean_tz.value_counts()\ntz_counts[:10]\n```\n\n\n\n\n\n\n# tz_count\u306ePLOT\n\n```python\ntz_counts[:10].plot(kind='barh',rot=0)\nimport matplotlib.pyplot as plt\n# plt.show()\n```\n\n\n\n\n\n\n\n# \u8981\u7d20\u6570\u30ab\u30a6\u30f3\u30c8\n\n```python\nframe['a'][1]\nframe['a'][50]\nframe['a'][51]\nresults=Series([x.split()[0] for x in frame.a.dropna()])   #.dropna() pandas\u30e1\u30bd\u30c3\u30c9\u3000\u7a7a\u767d\u884c\u3092\u524a\u9664\u3000\u5f15\u6570\u3067\u524a\u9664\u3059\u308b\u884c\u6307\u5b9a\n   #str.split(x) x\u3092\u533a\u5207\u308a\u6587\u5b57\u306b\u3057\u3066str\u3092\u5206\u5272\u3057\u3066\u30ea\u30b9\u30c8\u306b\u53ce\u3081\u308b\n   #\u7a7a\u767d\u3067\u533a\u5207\u3063\u305f\u6587\u5b57\u5217\u3092\u30ea\u30b9\u30c8\u306b\u53ce\u3081\u3066(\u30ea\u30b9\u30c8\u5185\u6cd5\u8868\u8a18)\u3001Series\u30af\u30e9\u30b9\u3067pandas dataframe\u306b\u3059\u308b\nresults[:5]\nresults.value_counts()[:8]   #value_counts()\u3067\u540c\u3058\u8981\u7d20\u306e\u6570\u3092\u6570\u3048\u308b\n```\n\n\n# \u8981\u7d20\u6570\u30ab\u30a6\u30f3\u30c8(\u5225\u306e\u65b9\u6cd5)\n\n```python\ncframe=frame[frame.a.notnull()]   #frame\u306ea\u5217\u306enull\u3058\u3083\u306a\u3044\u5974\u3060\u3051\u96c6\u3081\u305f(cframe['a']==frame.a.dropna())\nbool(map(list,[cframe['a'],frame.a.dropna()]))   #list\u95a2\u6570\u3092cframe['a']\u3068frame.a.dropna()\u306b\u9069\u7528\u3055\u305b\u3066\u540c\u3058\u304b\u3069\u3046\u304b\u898b\u308b\n```\n\n\n\n\n\n# 'Windows' or Not?\n\n```python\nimport numpy as np\noperating_system=np.where(cframe['a'].str.contains('Windows'),'Windows','Not Windows')   #cframe['a']\u304c'Windows'\u3068\u3044\u3046\u6587\u5b57\u3092\u542b\u3080\u3000True\u3067'Windows'\u3000false\u3067'Not Windows'\u3092\u8fd4\u3059\n   #` ['Windows' if 'Windows' in x else 'Not Windows' for x in cframe['a']]`\u3068\u540c\u3058\noperating_system[:5]\n```\n\n\n\n\n\n\n\n\n\n\n## operating_system Another Way\n\n```python\noperating_system2=['Windows' if 'Windows' in x else 'Not Windows' for x in cframe['a']]\nbool(list(operating_system)==operating_system2)   #True\n\n\nby_tz_os=cframe.groupby(['tz',operating_system])\nagg_counts=by_tz_os.size().unstack().fillna(0)\nagg_counts[:10]\n\n\n\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t#2016/07/28 22:56:30__\nindexer=agg_counts.sum(1).argsort()   #argsort()\u30bd\u30fc\u30c8\u5f8c\u306e\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u3092np.array\u5f62\u5f0f\u3067\u8fd4\u3059\n   #np.sum() \u57fa\u672c\u7684\u306b\u3001array\u306e\u4e2d\u8eab\u5168\u90e8\u8db3\u3057\u305f\u3084\u3064\u8fd4\u3059\n\n'''\n# ABOUT np.sum()\n\n>>> np.sum([[0, 1], [0, 5]], axis=0)\narray([0, 6])   #return array([0+0],[1+5])\n>>> np.sum([[0, 1], [0, 5]], axis=1)\narray([1, 5])   #return array([0+1],[0+5])\n\n'''\n\nindexer[:10]\n\n\ncount_subset=agg_counts.take(indexer)[-10:]   #indexer\u306e\u6700\u5f8c\u304b\u308910\u5206\u3060\u3051\u306eagg_counts\u3092\u8fd4\u3059(take=\u53d6\u5f97\u3059\u308b)\n\ncount_subset.plot(kind='barh', stacked=True)\n# plt.show()\n\n```\n\n\n\n\n\n\n\n# \u6b63\u898f\u5316(\u7d42\u7aef\u304c 0,1\u3064\u307e\u308a\u6bd4\u7387\u3092\u793a\u3059)\n\n```python\nnormed_subset=count_subset.div(count_subset.sum(1),axis=0)\nnormed_subset.plot(kind='barh',stacked=True)\n# plt.show()\n```\n", "tags": ["Python", "pandas"]}