{"context": " More than 1 year has passed since last update.100 numpy exercises\u306eJulia\u7248\u3067\u3059\u3002\n\u5b9f\u969b\u306b\u306f46\u500b\u3057\u304b\u306a\u304b\u3063\u305f\u3051\u3069...\u3002\n\u9014\u4e2d\u632b\u6298\u3057\u305f\u3082\u306e\u304c\u3044\u304f\u3064\u304b\u6709\u308a\u307e\u3059\u304c\u3001\u7de8\u96c6\u30ea\u30af\u30a8\u30b9\u30c8\u3092\u3044\u305f\u3060\u3051\u308c\u3070\u5e78\u3044\u3067\u3059\u3002\n\u3053\u308c\u3092\u4f5c\u6210\u3059\u308b\u306b\u3042\u305f\u3063\u3066\u8eab\u306b\u3064\u3051\u305f\u3001\u8abf\u3079\u65b9\u306a\u3069\u306f\u5225\u9014\u81ea\u5206\u306e\u30d6\u30ed\u30b0\u306b\u307e\u3068\u3081\u3066\u3044\u3053\u3046\u3068\u601d\u3044\u307e\u3059\u3002\n\u3010\u8ffd\u8a18\u3011\u30d6\u30ed\u30b0\u306b\u8efd\u304f\u8a18\u4e8b\u3092\u66f8\u304d\u307e\u3057\u305f\n\u3010\u8ffd\u8a182\u3011 Github\u306b\u30ec\u30dd\u30b8\u30c8\u30ea\u4f5c\u6210\u3057\u3066\u3001ipython notebook\u898b\u3048\u308b\u3088\u3046\u306b\u3057\u307e\u3057\u305f\u3002\u6700\u65b0\u306fgithub\u3092\u3054\u53c2\u7167\u304f\u3060\u3055\u3044\u3002\n\u3010\u8ffd\u8a183\u3011ML\u306b\u6295\u7a3f\u3057\u307e\u3057\u305f\u3002\n\nNeophyte\n\n1. Import the numpy package under the name np\n\n# nothing to do\n\n\n2. Print the Julia version\nVERSION\n\n\n3. Create a null vector of size 10\nZ = zeros(10)\n\n\n4. Create a null vector of size 10 and set the fifth value to 1\nZ = zeros(10)\nZ[5] = 1\nZ\n\n\n5. Create a vector with values ranging from 10 to 99\nZ = [10:99]\n\n\n6. Create a 3x3 matrix with values ranging from 0 to 8\nZ = reshape(0:8, 3, 3)\n\n\n7. Find indices of non-zero elements from [1,2,0,0,4,0]\nnz = find([1,2,0,0,4,0])\n\n\n8. Create a 3x3 identity matrix\nZ = eye(3)\n\n\n9. Create a 5x5 matrix with values 1,2,3,4 just below the diagonal\nZ = diagm(1:4, -1)\n\n\n10. Create a 10x10x10 array with random values\nrand(10, 10, 10)\n\n\nNovice\n\n1. Create a 8x8 matrix and fill it with a checkerboard pattern\nZ = zeros(Int64,8,8)\nZ[1:2:end, 2:2:end] = 1\nZ[2:2:end, 1:2:end] = 1\nZ\n\n# Another solution\n# Author: harven\n[(i+j)%2 for i=1:8, j=1:8]\n\n\n2. Create a 10x10 array with random values and find the minimum and maximum values\nZ = rand(10, 10)\nZmin, Zmax = minimum(Z), maximum(Z)\n\n# It can also be written as follows.\n# Author: hc_e\n# http://qiita.com/chezou/items/d7ca4e95d25835a5cd01#comment-1c20073a44695c08f523\nZmin, Zmax = extrema(Z)\n\n\n3. Create a checkerboard 8x8 matrix using the tile function\n# numpy's tile equal to repmat\nZ = repmat([0 1;1 0],4,4)\n\n\n4. Normalize a 5x5 random matrix (between 0 and 1)\nZ = rand(5, 5)\nZmin, Zmax = minimum(Z), maximum(Z)\nZ = (Z .- Zmin)./(Zmax - Zmin)\n\n\n5. Multiply a 5x3 matrix by a 3x2 matrix (real matrix product)\nZ = ones(5,3) * ones(3,2)\n\n\n6. Create a 10x10 matrix with row values ranging from 0 to 9\n(zeros(Int64,10,10) .+ [0:9])'\n\n# Alternate solution\n# Author: Leah Hanson\n[y for x in 1:10, y in 0:9]\n\n\n7. Create a vector of size 1000 with values ranging from 0 to 1, both excluded\nlinspace(0,1, 1002)[2:end - 1]\n\n\n8. Create a random vector of size 100 and sort it\nZ = rand(100)\nsort(Z) # returns a sorted copy of Z; leaves Z unchanged\n\n# Alternate solution\n# Author: Leah Hanson\nZ = rand(100)\nsort!(Z) # sorts Z in-place; returns Z\n\n\n9. Consider two random matrices A anb B, check if they are equal.\nA = rand(0:2, 2,2)\nB = rand(0:2, 2,2)\nA == B\n\n\n10. Create a random vector of size 1000 and find the mean value\nZ = rand(1000)\nm = mean(Z)\n\n\nApprentice\n\n1. Make an array immutable (read-only)\n# I can't solve it\n\n\n2. Consider a random 100x2 matrix representing Cartesian coordinates, convert them to polar coordinates\nZ = rand(100,2)\nX, Y = Z[:,1], Z[:,2]\nR = sqrt(X'*X + Y'*Y)\nT = atan2(Y,X)\n\n\n3. Create random vector of size 100 and replace the maximum value by 0\nZ = rand(100)\nZ[indmax(Z)] = 0\n\n\n4. Create a structured array with x and y coordinates covering the [0,1]x[0,1] area.\n# There is no official `meshgrid` function.\n# See also: https://github.com/JuliaLang/julia/issues/4093\n# assume using https://github.com/JuliaLang/julia/blob/master/examples/ndgrid.jl\ninclude(\"/Applications/Julia-0.3.0-prerelease-547facf2c1.app/Contents/Resources/julia/share/julia/examples/ndgrid.jl\")\nX = linspace(0,1,10)\nZx, Zy = meshgrid(X, X)\n\n# Another solution\n# Author: Alireza Nejati\n[(x,y) for x in linspace(0,1,10), y in linspace(0,1,10)]\n\n\n5. Print the minimum and maximum representable value for each Julia scalar type\nfor dtype in (Int8, Int16, Int32, Int64)\n    println(typemin(dtype))\n    println(typemax(dtype))\nend\n\n# Another solution\n# Author: harven\n# typemin, typemax returns -Inf, Inf\nprint(map!(t -> (typemin(t),typemax(t)), subtypes(Signed)))\n\nfor dtype in (Float32, Float64)\n    println(typemin(dtype))\n    println(typemax(dtype))\n    println(eps(dtype))\nend\n\n\n6. Create a structured array representing a position (x,y) and a color (r,g,b)\n# Julia doesn't have StructArray\n# see also: https://github.com/JuliaLang/julia/issues/1263\n# use DataFrames\n\n\n7. Consider a random vector with shape (100,2) representing coordinates, find point by point distances\nZ = rand(10,2)\nX,Y = Z[:,1], Z[:,2]\nD = sqrtm((X.-X.')^2 + (Y .- Y.')^2)\n\n\n8. Generate a generic 2D Gaussian-like array\nX, Y = meshgrid(linspace(-1,1,100),linspace(-1,1,100))\nD = sqrtm(X*X + Y*Y)\nsigma, mu = 1.0, 0.0\nG = exp(-( (D.-mu)^2 / ( 2.0 * sigma^2 ) ) )\n\n# Another solution\n# Author: Billou Beilour\nsigma, mu = 1.0, 0.0\nG = [ exp(-(x-mu).^2/(2.0*sigma^2) -(y-mu).^2/(2.0*sigma^2) ) for x in linspace(-1,1,100), y in linspace(-1,1,100) ]\n\n# It also written\n# Author: Billou Beilour\nsigma, mu = 1.0, 0.0\nx,y = linspace(-1,1,100), linspace(-1,1,100)\nG = zeros(length(x),length(y))\n\nfor i in 1:length(x), j in 1:length(y)\n    G[i,j] = exp(-(x[i]-mu).^2/(2.0*sigma^2) -(y[j]-mu).^2/(2.0*sigma^2) )\nend\n\n\n9. Consider the vector [1, 2, 3, 4, 5]. How to build a new vector with 3 consecutive zeros interleaved between each value?\nZ = [1,2,3,4,5]\nnz = 3\nZ0 = zeros(length(Z) + (length(Z)-1)*(nz))\nZ0[1:nz+1:end] = Z\n\n\n10. Find the nearest value from a given value in an array\nZ = [3,6,9,12,15]\nZ[indmin(abs(Z .- 10))]\n\n\nJourneyman\n\n1. Consider the following file:\n1,2,3,4,5\n6,,,7,8\n,,9,10,11\n\n\nHow to read it?\nusing DataFrames\nreadtable(\"missing.dat\")\n\n\n2. Consider a generator function that generates 10 integers and use it to build an array\n# I can't translate this question\n\n\n3. Consider a given vector, how to add 1 to each element indexed by a second vector (be careful with repeated indices)?\nusing StatsBase\nZ = ones(10)\nI = rand(0:length(Z), 20)\nZ += counts(I, 1:length(Z))\n\n\n4. How to accumulate elements of a vector (X) to an array (F) based on an index list (I)?\nusing StatsBase\nX = WeightVec([1,2,3,4,5,6])\nI = [1,3,9,3,4,1]\nF = counts(I, maximum(I), X)\n\n\n5. Considering a (w,h,3) image of (dtype=ubyte), compute the number of unique colors\nw,h = 16,16\nI = convert(Array{Uint8}, rand(0:2, (h,w,3)))\nF = I[:,:,1] * 256 * 256 + I[:,:,2]*256 + I[:,:,3]\nn = length(unique(F))\nunique(I)\n\n\n6. Considering a four dimensional array, how to get sum over the last two axis at once?\nA = rand(0:10, (3,4,3,4))\nx,y = size(A)[1:end-2]\nz = prod(size(A)[end-1:end])\ncalc_sum = sum(reshape(A, (x,y,z)),3)\n\n\n7. Considering a one-dimensional vector D, how to compute means of subsets of D using a vector S of same size describing subset indices?\nusing StatsBase\nD = WeightVec(rand(100))\nS = rand(0:10,100)\nD_sums = counts(S, maximum(S), D)\nD_counts = counts(S, maximum(S))\nD_means = D_sums ./ D_counts\n\n\nCraftsman\n\n1. Consider a one-dimensional array Z, build a two-dimensional array whose first row is (Z[0],Z[1],Z[2]) and each subsequent row is shifted by 1 (last row should be (Z[-3],Z[-2],Z[-1])\n# I don't find any function like stride_tricks.as_stride\nfunction rolling(A, window)\n       Z = zeros(length(A)-2, window)\n       for i in 1:(length(A) - window +1)\n           Z[i,:] = A[i:i+2]\n       end\n       return Z\nend\n\nrolling(0:100, 3)\n\n\n2. Consider a set of 100 triplets describing 100 triangles (with shared vertices), find the set of unique line segments composing all the triangles.\nfaces = rand(0:100, 100, 3)\nface2 = kron(faces,[1 1])\n\nF = circshift(sortcols(face2),(0,1))\nF = reshape(F, (convert(Int64,length(F)/2),2))\nF = sort(F,2)\nG = unique(F,1)\n\n\n3. Given an array C that is a bincount, how to produce an array A such that np.bincount(A) == C?\nusing StatsBase\nO = [1 1 2 3 4 4 6]\nC = counts(O, maximum(O))\nA = foldl(vcat,[kron(ones(Int64, C[i]), i) for i in 1:length(C)])\n\n\n4. How to compute averages using a sliding window over an array?\nfunction moving_average(A, n=3)\n  ret = cumsum(A)\n  ret[n+1:end] = ret[n+1:end] - ret[1:end-n]\n  return ret[n:end-1] / n\nend\nZ = 0:20\nmoving_average(Z, 3)\n\n\nArtisan\n\n1. Considering a 100x3 matrix, extract rows with unequal values (e.g. [2,2,3])\nZ = rand(0:5,100,3)\nE = prod(Z[:,2:end] .== Z[:,1:end-1],2)\nU = Z[find(~E), :]\n\n\n2. Convert a vector of ints into a matrix binary representation.\nI = [0 1 2 3 15 16 32 64 128]\nB = foldl(hcat,[reverse(int(bool(i & (2 .^ (0:8))))) for i in I])'\n\n\nAdept\n\n1. Consider an arbitrary array, write a function that extracts a subpart with a fixed shape and centered on a given element (pad with a fill value when necessary)\n# Not solve yet\n\n\nExpert\n\n1. Consider two arrays A and B of shape (8,3) and (2,2). How to find rows of A that contain elements of each row of B regardless of the order of the elements in B?\n# I can't execute numpy version...\n\n\n2. Extract all the contiguous 3x3 blocks from a random 10x10 matrix.\n# Not solve yet\n\n\n3. Create a 2D array subclass such that Z[i,j] == Z[j,i]\n# There is Symmetric class in julia but immutable\n# https://github.com/JuliaLang/julia/blob/master/base/linalg/symmetric.jl\n# See also: https://github.com/JuliaLang/julia/pull/1533\n\n\n4. Consider a set of p matrices with shape (n,n) and a set of p vectors with shape (n,1). How to compute the sum of the p matrix products at once? (result has shape (n,1))\n# Author: Alireza Nejati\np, n = 10, 20\nM = ones(n,n,p)\nV = ones(n,p)\nS = reduce(+, [M[i,:,j]*V[i] for i = 1:n, j = 1:p])'\nS\n\n\nMaster\n\n1. Given a two dimensional array, how to extract unique rows?\nZ = rand(0:2, 6,3)\nuZ = unique(Z,1)\n\n\nArchmaster\n\n[100 numpy exercises](http://www.loria.fr/~rougier/teaching/numpy.100/)\u306eJulia\u7248\u3067\u3059\u3002\n\u5b9f\u969b\u306b\u306f46\u500b\u3057\u304b\u306a\u304b\u3063\u305f\u3051\u3069...\u3002\n\n\u9014\u4e2d\u632b\u6298\u3057\u305f\u3082\u306e\u304c\u3044\u304f\u3064\u304b\u6709\u308a\u307e\u3059\u304c\u3001\u7de8\u96c6\u30ea\u30af\u30a8\u30b9\u30c8\u3092\u3044\u305f\u3060\u3051\u308c\u3070\u5e78\u3044\u3067\u3059\u3002\n\u3053\u308c\u3092\u4f5c\u6210\u3059\u308b\u306b\u3042\u305f\u3063\u3066\u8eab\u306b\u3064\u3051\u305f\u3001\u8abf\u3079\u65b9\u306a\u3069\u306f\u5225\u9014\u81ea\u5206\u306e\u30d6\u30ed\u30b0\u306b\u307e\u3068\u3081\u3066\u3044\u3053\u3046\u3068\u601d\u3044\u307e\u3059\u3002\n\n\u3010\u8ffd\u8a18\u3011\u30d6\u30ed\u30b0\u306b[\u8efd\u304f\u8a18\u4e8b\u3092\u66f8\u304d\u307e\u3057\u305f](http://wp.me/pvR30-tN)\n\u3010\u8ffd\u8a182\u3011 Github\u306b[\u30ec\u30dd\u30b8\u30c8\u30ea](https://github.com/chezou/julia-100-exercises)\u4f5c\u6210\u3057\u3066\u3001[ipython notebook](http://nbviewer.ipython.org/github/chezou/julia-100-exercises/blob/master/julia-100-exercises.ipynb)\u898b\u3048\u308b\u3088\u3046\u306b\u3057\u307e\u3057\u305f\u3002\u6700\u65b0\u306fgithub\u3092\u3054\u53c2\u7167\u304f\u3060\u3055\u3044\u3002\n\u3010\u8ffd\u8a183\u3011[ML](https://groups.google.com/forum/#!topic/julia-users/NquQLBRWHIU)\u306b\u6295\u7a3f\u3057\u307e\u3057\u305f\u3002\n\n\n# Neophyte\n## 1. Import the numpy package under the name `np`\n\n```jl\n# nothing to do\n```\n\n## 2. Print the Julia version\n\n```jl\nVERSION\n```\n\n## 3. Create a null vector of size 10\n\n```jl\nZ = zeros(10)\n```\n\n## 4. Create a null vector of size 10 and set the fifth value to 1\n\n```jl\nZ = zeros(10)\nZ[5] = 1\nZ\n```\n\n## 5. Create a vector with values ranging from 10 to 99\n\n```jl\nZ = [10:99]\n```\n\n## 6. Create a 3x3 matrix with values ranging from 0 to 8\n\n```jl\nZ = reshape(0:8, 3, 3)\n```\n\n## 7. Find indices of non-zero elements from [1,2,0,0,4,0]\n\n```jl\nnz = find([1,2,0,0,4,0])\n```\n\n## 8. Create a 3x3 identity matrix\n\n```jl\nZ = eye(3)\n```\n\n## 9. Create a 5x5 matrix with values 1,2,3,4 just below the diagonal\n\n```jl\nZ = diagm(1:4, -1)\n```\n\n## 10. Create a 10x10x10 array with random values\n\n```jl\nrand(10, 10, 10)\n```\n\n# Novice\n## 1. Create a 8x8 matrix and fill it with a checkerboard pattern\n\n```jl\nZ = zeros(Int64,8,8)\nZ[1:2:end, 2:2:end] = 1\nZ[2:2:end, 1:2:end] = 1\nZ\n\n# Another solution\n# Author: harven\n[(i+j)%2 for i=1:8, j=1:8]\n```\n\n## 2. Create a 10x10 array with random values and find the minimum and maximum values\n\n```jl\nZ = rand(10, 10)\nZmin, Zmax = minimum(Z), maximum(Z)\n\n# It can also be written as follows.\n# Author: hc_e\n# http://qiita.com/chezou/items/d7ca4e95d25835a5cd01#comment-1c20073a44695c08f523\nZmin, Zmax = extrema(Z)\n```\n\n## 3. Create a checkerboard 8x8 matrix using the tile function\n\n```jl\n# numpy's tile equal to repmat\nZ = repmat([0 1;1 0],4,4)\n```\n\n## 4. Normalize a 5x5 random matrix (between 0 and 1)\n\n```jl\nZ = rand(5, 5)\nZmin, Zmax = minimum(Z), maximum(Z)\nZ = (Z .- Zmin)./(Zmax - Zmin)\n```\n\n## 5. Multiply a 5x3 matrix by a 3x2 matrix (real matrix product)\n\n```jl\nZ = ones(5,3) * ones(3,2)\n```\n\n## 6. Create a 10x10 matrix with row values ranging from 0 to 9\n\n```jl\n(zeros(Int64,10,10) .+ [0:9])'\n\n# Alternate solution\n# Author: Leah Hanson\n[y for x in 1:10, y in 0:9]\n```\n\n## 7. Create a vector of size 1000 with values ranging from 0 to 1, both excluded\n\n```jl\nlinspace(0,1, 1002)[2:end - 1]\n```\n\n## 8. Create a random vector of size 100 and sort it\n\n```jl\nZ = rand(100)\nsort(Z) # returns a sorted copy of Z; leaves Z unchanged\n\n# Alternate solution\n# Author: Leah Hanson\nZ = rand(100)\nsort!(Z) # sorts Z in-place; returns Z\n```\n\n## 9. Consider two random matrices A anb B, check if they are equal.\n\n```jl\nA = rand(0:2, 2,2)\nB = rand(0:2, 2,2)\nA == B\n```\n\n## 10. Create a random vector of size 1000 and find the mean value\n\n```jl\nZ = rand(1000)\nm = mean(Z)\n```\n\n# Apprentice\n## 1. Make an array immutable (read-only)\n\n```jl\n# I can't solve it\n```\n\n## 2. Consider a random 100x2 matrix representing Cartesian coordinates, convert them to polar coordinates\n\n```jl\nZ = rand(100,2)\nX, Y = Z[:,1], Z[:,2]\nR = sqrt(X'*X + Y'*Y)\nT = atan2(Y,X)\n```\n\n## 3. Create random vector of size 100 and replace the maximum value by 0\n\n```jl\nZ = rand(100)\nZ[indmax(Z)] = 0\n```\n\n## 4. Create a structured array with x and y coordinates covering the [0,1]x[0,1] area.\n\n```jl\n# There is no official `meshgrid` function.\n# See also: https://github.com/JuliaLang/julia/issues/4093\n# assume using https://github.com/JuliaLang/julia/blob/master/examples/ndgrid.jl\ninclude(\"/Applications/Julia-0.3.0-prerelease-547facf2c1.app/Contents/Resources/julia/share/julia/examples/ndgrid.jl\")\nX = linspace(0,1,10)\nZx, Zy = meshgrid(X, X)\n\n# Another solution\n# Author: Alireza Nejati\n[(x,y) for x in linspace(0,1,10), y in linspace(0,1,10)]\n```\n\n## 5. Print the minimum and maximum representable value for each Julia scalar type\n\n```jl\nfor dtype in (Int8, Int16, Int32, Int64)\n    println(typemin(dtype))\n    println(typemax(dtype))\nend\n\n# Another solution\n# Author: harven\n# typemin, typemax returns -Inf, Inf\nprint(map!(t -> (typemin(t),typemax(t)), subtypes(Signed)))\n\nfor dtype in (Float32, Float64)\n    println(typemin(dtype))\n    println(typemax(dtype))\n    println(eps(dtype))\nend\n```\n\n## 6. Create a structured array representing a position (x,y) and a color (r,g,b)\n\n\n```jl\n# Julia doesn't have StructArray\n# see also: https://github.com/JuliaLang/julia/issues/1263\n# use DataFrames\n```\n\n## 7. Consider a random vector with shape (100,2) representing coordinates, find point by point distances\n\n```jl\nZ = rand(10,2)\nX,Y = Z[:,1], Z[:,2]\nD = sqrtm((X.-X.')^2 + (Y .- Y.')^2)\n```\n\n## 8. Generate a generic 2D Gaussian-like array\n\n```jl\nX, Y = meshgrid(linspace(-1,1,100),linspace(-1,1,100))\nD = sqrtm(X*X + Y*Y)\nsigma, mu = 1.0, 0.0\nG = exp(-( (D.-mu)^2 / ( 2.0 * sigma^2 ) ) )\n\n# Another solution\n# Author: Billou Beilour\nsigma, mu = 1.0, 0.0\nG = [ exp(-(x-mu).^2/(2.0*sigma^2) -(y-mu).^2/(2.0*sigma^2) ) for x in linspace(-1,1,100), y in linspace(-1,1,100) ]\n\n# It also written\n# Author: Billou Beilour\nsigma, mu = 1.0, 0.0\nx,y = linspace(-1,1,100), linspace(-1,1,100)\nG = zeros(length(x),length(y))\n\nfor i in 1:length(x), j in 1:length(y)\n    G[i,j] = exp(-(x[i]-mu).^2/(2.0*sigma^2) -(y[j]-mu).^2/(2.0*sigma^2) )\nend\n```\n\n## 9. Consider the vector [1, 2, 3, 4, 5]. How to build a new vector with 3 consecutive zeros interleaved between each value?\n\n```jl\nZ = [1,2,3,4,5]\nnz = 3\nZ0 = zeros(length(Z) + (length(Z)-1)*(nz))\nZ0[1:nz+1:end] = Z\n```\n\n## 10. Find the nearest value from a given value in an array\n\n```jl\nZ = [3,6,9,12,15]\nZ[indmin(abs(Z .- 10))]\n```\n\n# Journeyman\n## 1. Consider the following file:\n\n```\n1,2,3,4,5\n6,,,7,8\n,,9,10,11\n```\n\n## How to read it?\n\n```jl\nusing DataFrames\nreadtable(\"missing.dat\")\n```\n\n## 2. Consider a generator function that generates 10 integers and use it to build an array\n\n\n```jl\n# I can't translate this question\n```\n\n## 3. Consider a given vector, how to add 1 to each element indexed by a second vector (be careful with repeated indices)?\n\n```jl\nusing StatsBase\nZ = ones(10)\nI = rand(0:length(Z), 20)\nZ += counts(I, 1:length(Z))\n```\n\n## 4. How to accumulate elements of a vector (X) to an array (F) based on an index list (I)?\n\n```jl\nusing StatsBase\nX = WeightVec([1,2,3,4,5,6])\nI = [1,3,9,3,4,1]\nF = counts(I, maximum(I), X)\n```\n\n## 5. Considering a (w,h,3) image of (dtype=ubyte), compute the number of unique colors\n\n```jl\nw,h = 16,16\nI = convert(Array{Uint8}, rand(0:2, (h,w,3)))\nF = I[:,:,1] * 256 * 256 + I[:,:,2]*256 + I[:,:,3]\nn = length(unique(F))\nunique(I)\n```\n\n## 6. Considering a four dimensional array, how to get sum over the last two axis at once?\n\n```jl\nA = rand(0:10, (3,4,3,4))\nx,y = size(A)[1:end-2]\nz = prod(size(A)[end-1:end])\ncalc_sum = sum(reshape(A, (x,y,z)),3)\n```\n\n## 7. Considering a one-dimensional vector D, how to compute means of subsets of D using a vector S of same size describing subset indices?\n\n```jl\nusing StatsBase\nD = WeightVec(rand(100))\nS = rand(0:10,100)\nD_sums = counts(S, maximum(S), D)\nD_counts = counts(S, maximum(S))\nD_means = D_sums ./ D_counts\n```\n\n# Craftsman\n## 1. Consider a one-dimensional array Z, build a two-dimensional array whose first row is (Z[0],Z[1],Z[2]) and each subsequent row is shifted by 1 (last row should be (Z[-3],Z[-2],Z[-1])\n\n```jl\n# I don't find any function like stride_tricks.as_stride\nfunction rolling(A, window)\n       Z = zeros(length(A)-2, window)\n       for i in 1:(length(A) - window +1)\n           Z[i,:] = A[i:i+2]\n       end\n       return Z\nend\n\nrolling(0:100, 3)\n```\n\n## 2. Consider a set of 100 triplets describing 100 triangles (with shared vertices), find the set of unique line segments composing all the triangles.\n\n```jl\nfaces = rand(0:100, 100, 3)\nface2 = kron(faces,[1 1])\n\nF = circshift(sortcols(face2),(0,1))\nF = reshape(F, (convert(Int64,length(F)/2),2))\nF = sort(F,2)\nG = unique(F,1)\n```\n\n## 3. Given an array C that is a bincount, how to produce an array A such that np.bincount(A) == C?\n\n```jl\nusing StatsBase\nO = [1 1 2 3 4 4 6]\nC = counts(O, maximum(O))\nA = foldl(vcat,[kron(ones(Int64, C[i]), i) for i in 1:length(C)])\n```\n\n## 4. How to compute averages using a sliding window over an array?\n\n```jl\nfunction moving_average(A, n=3)\n  ret = cumsum(A)\n  ret[n+1:end] = ret[n+1:end] - ret[1:end-n]\n  return ret[n:end-1] / n\nend\nZ = 0:20\nmoving_average(Z, 3)\n```\n\n# Artisan\n## 1. Considering a 100x3 matrix, extract rows with unequal values (e.g. [2,2,3])\n\n```jl\nZ = rand(0:5,100,3)\nE = prod(Z[:,2:end] .== Z[:,1:end-1],2)\nU = Z[find(~E), :]\n```\n\n## 2. Convert a vector of ints into a matrix binary representation.\n\n```jl\nI = [0 1 2 3 15 16 32 64 128]\nB = foldl(hcat,[reverse(int(bool(i & (2 .^ (0:8))))) for i in I])'\n```\n\n# Adept\n## 1. Consider an arbitrary array, write a function that extracts a subpart with a fixed shape and centered on a given element (pad with a fill value when necessary)\n\n```jl\n# Not solve yet\n```\n\n# Expert\n## 1. Consider two arrays A and B of shape (8,3) and (2,2). How to find rows of A that contain elements of each row of B regardless of the order of the elements in B?\n\n```jl\n# I can't execute numpy version...\n```\n\n## 2. Extract all the contiguous 3x3 blocks from a random 10x10 matrix.\n\n```jl\n# Not solve yet\n```\n\n## 3. Create a 2D array subclass such that Z[i,j] == Z[j,i]\n\n```jl\n# There is Symmetric class in julia but immutable\n# https://github.com/JuliaLang/julia/blob/master/base/linalg/symmetric.jl\n# See also: https://github.com/JuliaLang/julia/pull/1533\n```\n\n## 4. Consider a set of p matrices with shape (n,n) and a set of p vectors with shape (n,1). How to compute the sum of the p matrix products at once? (result has shape (n,1))\n\n\n```jl\n# Author: Alireza Nejati\np, n = 10, 20\nM = ones(n,n,p)\nV = ones(n,p)\nS = reduce(+, [M[i,:,j]*V[i] for i = 1:n, j = 1:p])'\nS\n```\n\n# Master\n## 1. Given a two dimensional array, how to extract unique rows?\n\n```jl\nZ = rand(0:2, 6,3)\nuZ = unique(Z,1)\n```\n\n# Archmaster\n", "tags": ["Julia", "numpy"]}