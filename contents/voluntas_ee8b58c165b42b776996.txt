{"tags": ["golang", "RethinkDB", "Go"], "context": " More than 1 year has passed since last update.Golang \u304b\u3089 RethinkDB \u306b\u7e4b\u3044\u3067\u307f\u307e\u3059\u3002Golang \u81ea\u4f53\u771f\u9762\u76ee\u306b\u66f8\u304f\u306e\u306f\u521d\u3081\u3066\u306a\u306e\u3067\u3001\u624b\u63a2\u308a\u72b6\u614b\u3067\u3059\u3002\n\u3068\u308a\u3042\u3048\u305a\u63a5\u7d9a\u3057\u3066\u3001\u305d\u306e\u5f8c\u30c7\u30fc\u30bf\u3092\u5165\u308c\u3066\u3001\u5f15\u3063\u5f35\u3063\u3066\u304d\u3066\u3001User struct \u306b\u30de\u30c3\u30d4\u30f3\u30b0\u3057\u3066\u3001\u53d6\u308a\u51fa\u3057\u3066\u8868\u793a\u3059\u308b\u3002\u3068\u3044\u3046\u3068\u3053\u308d\u307e\u3067\u3084\u3063\u3066\u307f\u307e\u3057\u305f\u3002\nindex \u3092\u751f\u6210\u3057 name \u3067\u4e00\u89a7\u3092\u53d6\u5f97\u51fa\u6765\u308b\u7528\u306b\u3057\u307e\u3057\u305f\u3002ScanAll \u3092\u4f7f\u3046\u4e8b\u3067\u5f15\u3063\u5f35\u3063\u3066\u304d\u305f\u5024\u3092\u4e00\u6c17\u306b User{} \u306b\u30de\u30c3\u30d4\u30f3\u30b0\u51fa\u6765\u307e\u3059\u3002\n\n\u524d\u63d0\n\nRethinkDB 1.12.4 \u304c\u8d77\u52d5\u3057\u3066\u3044\u308b\nGolang 1.2.1 \u304c\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3055\u308c\u3066\u3044\u308b\ngo get github.com/dancannon/gorethink \u6e08\u307f\n\n\n\u30b3\u30fc\u30c9\npackage main\n\nimport (\n    rethink \"github.com/dancannon/gorethink\"\n    \"log\"\n    \"time\"\n)\n\ntype User struct {\n    Name     string `gorethink:\"name\"`\n    Password string `gorethink:\"password\"`\n}\n\nfunc main() {\n    session, err := rethink.Connect(rethink.ConnectOpts{\n        Address:     \"127.0.0.1:28015\",\n        Database:    \"test\",\n        MaxIdle:     10,\n        IdleTimeout: time.Second * 10,\n    })\n    if err != nil {\n        log.Println(err)\n    }\n\n    err = rethink.DbCreate(\"test\").Exec(session)\n    if err != nil {\n        log.Println(err)\n    }\n\n    _, err = rethink.Db(\"test\").TableCreate(\"users\").RunWrite(session)\n    if err != nil {\n        log.Println(err)\n    }\n\n    _, err = rethink.Db(\"test\").Table(\"users\").IndexCreate(\"name\").Run(session)\n    if err != nil {\n        log.Println(err)\n    }\n\n    _, err = rethink.Db(\"test\").Table(\"users\").IndexWait(\"name\").Run(session)\n    if err != nil {\n        log.Println(err)\n    }\n\n    _, err = rethink.Db(\"test\").Table(\"users\").GetAllByIndex(\"name\", \"torufurukawa\").Delete().Run(session)\n    if err != nil {\n        log.Println(err)\n    }\n\n    response, err := rethink.Db(\"test\").Table(\"users\").Insert(User{Name: \"torufurukawa\", Password: \"pass\"}).RunWrite(session)\n\n    log.Println(response.GeneratedKeys[0])\n\n    _, err = rethink.Db(\"test\").Table(\"users\").Insert(User{Name: \"bucho\", Password: \"pass\"}).RunWrite(session)\n\n    row, err := rethink.Db(\"test\").Table(\"users\").GetAllByIndex(\"name\", \"torufurukawa\").RunRow(session)\n    if err != nil {\n        log.Println(err)\n    }\n\n    if row.IsNil() {\n        log.Fatalf(\"User not found\")\n    }\n\n    var user User\n\n    err = row.Scan(&user)\n    if err != nil {\n        log.Println(err)\n    }\n\n    log.Println(user.Name)\n    log.Println(user.Password)\n\n    _, err = rethink.Db(\"test\").Table(\"users\").Insert(User{Name: \"torufurukawa\", Password: \"pass\"}).RunWrite(session)\n\n        // index name \u304c torufurukawa \u306e\u4e00\u89a7\u3092\u53d6\u5f97\u3059\u308b\n    rows, err := rethink.Db(\"test\").Table(\"users\").GetAllByIndex(\"name\", \"torufurukawa\").Run(session)\n    if err != nil {\n        log.Println(err)\n    }\n\n    users := []User{}\n        // \u5f15\u3063\u5f35\u3063\u3066\u304d\u305f\u4e00\u89a7\u3092 users \u306b\u30de\u30c3\u30d4\u30f3\u30b0\u3059\u308b\n    err = rows.ScanAll(&users)\n\n    for _, user := range users {\n        log.Println(user.Name)\n        log.Println(user.Password)\n    }\n}\n\n\n\n\u307e\u3068\u3081\nStruct \u306b\u30de\u30c3\u30d4\u30f3\u30b0\u3059\u308b\u306e\u306f\u3068\u3066\u3082\u826f\u3044\u3067\u3059\u306d\u3002\u30b3\u30ec\u7cfb\u597d\u304d\u3067\u3059\u3002\n\u6700\u521d\u304b\u3089 ORM \u304c\u3042\u308b\u611f\u3058\u3067\u30b5\u30af\u30b5\u30af\u304b\u3051\u308b\u306e\u3067\u826f\u3044\u3067\u3059\u3002\nGolang \u306e\u5370\u8c61\u3068\u3057\u3066\u306f if err != nil {} \u3092\u4eca\u5f8c\u4f55\u56de\u66f8\u304f\u306e\u304b\u6c17\u306b\u306a\u308a\u307e\u3057\u305f\u3002go fmt \u6700\u9ad8\u3067\u3059\u3002\n\u6b21\u306f Martini \u3068\u7d44\u307f\u5408\u308f\u305b\u3066\u307f\u307e\u3059\u3002\n\n\u53c2\u8003\n\ngorethink - GoDoc\nmies/martini-rethink\nGetting started with RethinkDB, Ginkgo and Martini on wercker\ndancannon/gorethink\nBuilding an API with Golang, RethinkDB and wercker\nIs there a foreach in Go? - Stack Overflow\n\n\nGolang \u304b\u3089 RethinkDB \u306b\u7e4b\u3044\u3067\u307f\u307e\u3059\u3002Golang \u81ea\u4f53\u771f\u9762\u76ee\u306b\u66f8\u304f\u306e\u306f\u521d\u3081\u3066\u306a\u306e\u3067\u3001\u624b\u63a2\u308a\u72b6\u614b\u3067\u3059\u3002\n\n\u3068\u308a\u3042\u3048\u305a\u63a5\u7d9a\u3057\u3066\u3001\u305d\u306e\u5f8c\u30c7\u30fc\u30bf\u3092\u5165\u308c\u3066\u3001\u5f15\u3063\u5f35\u3063\u3066\u304d\u3066\u3001User struct \u306b\u30de\u30c3\u30d4\u30f3\u30b0\u3057\u3066\u3001\u53d6\u308a\u51fa\u3057\u3066\u8868\u793a\u3059\u308b\u3002\u3068\u3044\u3046\u3068\u3053\u308d\u307e\u3067\u3084\u3063\u3066\u307f\u307e\u3057\u305f\u3002\n\nindex \u3092\u751f\u6210\u3057 name \u3067\u4e00\u89a7\u3092\u53d6\u5f97\u51fa\u6765\u308b\u7528\u306b\u3057\u307e\u3057\u305f\u3002ScanAll \u3092\u4f7f\u3046\u4e8b\u3067\u5f15\u3063\u5f35\u3063\u3066\u304d\u305f\u5024\u3092\u4e00\u6c17\u306b User{} \u306b\u30de\u30c3\u30d4\u30f3\u30b0\u51fa\u6765\u307e\u3059\u3002\n\n## \u524d\u63d0\n\n- RethinkDB 1.12.4 \u304c\u8d77\u52d5\u3057\u3066\u3044\u308b\n- Golang 1.2.1 \u304c\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3055\u308c\u3066\u3044\u308b\n- go get github.com/dancannon/gorethink \u6e08\u307f\n\n## \u30b3\u30fc\u30c9\n\n\n```go\npackage main\n\nimport (\n\trethink \"github.com/dancannon/gorethink\"\n\t\"log\"\n\t\"time\"\n)\n\ntype User struct {\n\tName     string `gorethink:\"name\"`\n\tPassword string `gorethink:\"password\"`\n}\n\nfunc main() {\n\tsession, err := rethink.Connect(rethink.ConnectOpts{\n\t\tAddress:     \"127.0.0.1:28015\",\n\t\tDatabase:    \"test\",\n\t\tMaxIdle:     10,\n\t\tIdleTimeout: time.Second * 10,\n\t})\n\tif err != nil {\n\t\tlog.Println(err)\n\t}\n\n\terr = rethink.DbCreate(\"test\").Exec(session)\n\tif err != nil {\n\t\tlog.Println(err)\n\t}\n\n\t_, err = rethink.Db(\"test\").TableCreate(\"users\").RunWrite(session)\n\tif err != nil {\n\t\tlog.Println(err)\n\t}\n\n\t_, err = rethink.Db(\"test\").Table(\"users\").IndexCreate(\"name\").Run(session)\n\tif err != nil {\n\t\tlog.Println(err)\n\t}\n\n\t_, err = rethink.Db(\"test\").Table(\"users\").IndexWait(\"name\").Run(session)\n\tif err != nil {\n\t\tlog.Println(err)\n\t}\n\n\t_, err = rethink.Db(\"test\").Table(\"users\").GetAllByIndex(\"name\", \"torufurukawa\").Delete().Run(session)\n\tif err != nil {\n\t\tlog.Println(err)\n\t}\n\n\tresponse, err := rethink.Db(\"test\").Table(\"users\").Insert(User{Name: \"torufurukawa\", Password: \"pass\"}).RunWrite(session)\n\n\tlog.Println(response.GeneratedKeys[0])\n\n\t_, err = rethink.Db(\"test\").Table(\"users\").Insert(User{Name: \"bucho\", Password: \"pass\"}).RunWrite(session)\n\n\trow, err := rethink.Db(\"test\").Table(\"users\").GetAllByIndex(\"name\", \"torufurukawa\").RunRow(session)\n\tif err != nil {\n\t\tlog.Println(err)\n\t}\n\n\tif row.IsNil() {\n\t\tlog.Fatalf(\"User not found\")\n\t}\n\n\tvar user User\n\n\terr = row.Scan(&user)\n\tif err != nil {\n\t\tlog.Println(err)\n\t}\n\n\tlog.Println(user.Name)\n\tlog.Println(user.Password)\n\n\t_, err = rethink.Db(\"test\").Table(\"users\").Insert(User{Name: \"torufurukawa\", Password: \"pass\"}).RunWrite(session)\n\n        // index name \u304c torufurukawa \u306e\u4e00\u89a7\u3092\u53d6\u5f97\u3059\u308b\n\trows, err := rethink.Db(\"test\").Table(\"users\").GetAllByIndex(\"name\", \"torufurukawa\").Run(session)\n\tif err != nil {\n\t\tlog.Println(err)\n\t}\n\n\tusers := []User{}\n        // \u5f15\u3063\u5f35\u3063\u3066\u304d\u305f\u4e00\u89a7\u3092 users \u306b\u30de\u30c3\u30d4\u30f3\u30b0\u3059\u308b\n\terr = rows.ScanAll(&users)\n\n\tfor _, user := range users {\n\t\tlog.Println(user.Name)\n\t\tlog.Println(user.Password)\n\t}\n}\n\n```\n\n## \u307e\u3068\u3081\n\nStruct \u306b\u30de\u30c3\u30d4\u30f3\u30b0\u3059\u308b\u306e\u306f\u3068\u3066\u3082\u826f\u3044\u3067\u3059\u306d\u3002\u30b3\u30ec\u7cfb\u597d\u304d\u3067\u3059\u3002\n\n\u6700\u521d\u304b\u3089 ORM \u304c\u3042\u308b\u611f\u3058\u3067\u30b5\u30af\u30b5\u30af\u304b\u3051\u308b\u306e\u3067\u826f\u3044\u3067\u3059\u3002\n\nGolang \u306e\u5370\u8c61\u3068\u3057\u3066\u306f if err != nil {} \u3092\u4eca\u5f8c\u4f55\u56de\u66f8\u304f\u306e\u304b\u6c17\u306b\u306a\u308a\u307e\u3057\u305f\u3002go fmt \u6700\u9ad8\u3067\u3059\u3002\n\n\u6b21\u306f Martini \u3068\u7d44\u307f\u5408\u308f\u305b\u3066\u307f\u307e\u3059\u3002\n\n## \u53c2\u8003\n\n- [gorethink - GoDoc](http://godoc.org/github.com/dancannon/gorethink)\n- [mies/martini-rethink](https://github.com/mies/martini-rethink)\n- [Getting started with RethinkDB, Ginkgo and Martini on wercker](http://blog.wercker.com/2014/02/06/RethinkDB-Gingko-Martini-Golang.html)\n- [dancannon/gorethink](https://github.com/dancannon/gorethink)\n- [Building an API with Golang, RethinkDB and wercker](http://blog.wercker.com/2013/08/07/building-an-api-with-golang-rethinkdb-wercker.html)\n- [Is there a foreach in Go? - Stack Overflow](http://stackoverflow.com/questions/7782411/is-there-a-foreach-in-go)\n"}