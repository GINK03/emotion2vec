{"context": " More than 1 year has passed since last update.\n\n\u4eca\u56de\u306e\u76ee\u6a19\n\u30b3\u30f3\u30d1\u30a4\u30e9\u4f5c\u6210\u306e\u4e00\u822c\u7684\u306a\u6d41\u308c\u306f\u6b21\u306e\u901a\u308a\u3067\u3001\u524d\u56de\u306f1\u756a\u307e\u3067\u884c\u3044\u307e\u3057\u305f\u3002\u4eca\u56de\u306f2\u756a\u306e\u69cb\u6587\u6728\uff08\u4e00\u90e8\u306e\u307f\uff09\u3092\u4f5c\u308a\u307e\u3059\u3002\n\n\u30d1\u30fc\u30b5\u30fc\u3067\u30c8\u30fc\u30af\u30f3\u306b\u5206\u89e3\u3059\u308b\u3002\n\u30c8\u30fc\u30af\u30f3\u306e\u69cb\u9020\u3092\u89e3\u6790\u3057\u3066\u69cb\u6587\u6728(parse tree)\u3092\u3064\u304f\u308b\u3002\n\u4e0d\u8981\u306a\u30c8\u30fc\u30af\u3092\u524a\u9664\u3057\u3001\u62bd\u8c61\u69cb\u6587\u6728(AST)\u3092\u4f5c\u308b\u3002\nAST\u30ce\u30fc\u30c9\u3092\u8fbf\u3063\u3066\u30b3\u30fc\u30c9\u3092\u751f\u6210\u3059\u308b\u3002\n\n\n\u4e0d\u8981\u306a\u30c8\u30fc\u30af\u30f3\u306e\u6291\u5236\npyparsing\u3067\u306f\u5f8c\u306b\u3067\u3066\u304f\u308b\u69cb\u9020\u5316\u306e\u6a5f\u80fd\u306b\u3088\u308a\u3001\u30d1\u30fc\u30b9\u7d50\u679c\u306b';'\u306a\u3069\u306e\u8a18\u53f7\u3092\u7dad\u6301\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u305b\u3093\u3002Suppress()\u3092\u4f7f\u3046\u3068\u3001\u7d50\u679c\u306b\u542b\u307e\u308c\u306a\u3044\u30c8\u30fc\u30af\u30f3\u306b\u306a\u308a\u307e\u3059\u3002\u5148\u306b\u6291\u5236\u3092\u884c\u308f\u306a\u3044\u3068\u7d50\u679c\u304c\u898b\u3065\u3089\u304f\u3066\u4ed5\u65b9\u304c\u306a\u3044\u306e\u3067\u3001\u307e\u305a\u3053\u306e\u8a71\u984c\u304b\u3089\u3002\n\u524d\u56de\u307e\u3067\u306e\u30d1\u30fc\u30b9\u7d50\u679c\u3092\u518d\u63b2\u3057\u307e\u3059\u3002\n['VAR', 'x', ',', 'squ', ';', 'PROCEDURE', 'square', ';', 'BEGIN', 'squ', ':=', 'x', '*', 'x', 'END', ';', 'BEGIN', 'x', ':=', '1', ';', 'WHILE', 'x', '<=', '10', 'DO', 'BEGIN', 'CALL', 'square', ';', 'x', ':=', 'x', '+', '1', ';', 'END', 'END', '.']\n\n(),;.\u3092\u6291\u5236\u3057\u3066\u52b9\u679c\u3092\u78ba\u304b\u3081\u3066\u307f\u307e\u3057\u3087\u3046\u3002\n# \u5148\u982d\u306b\u8ffd\u52a0. \nLPAR, RPAR, COMMA, SEMICOLON, DOT = map(Suppress, \"(),;.\")\n\n# \u6587\u5b57\u5217\u3092\u5b9a\u6570\u3067\u7f6e\u304d\u63db\u3048\u308b\n# before\n# factor << (ident | number | \"(\" + expression + \")\")\n# after\nfactor << (ident | number | LPAR + expression + RPAR)\n\n# \u540c\u69d8\u306b, ; . \u3082\u5b9a\u6570\u3067\u7f6e\u304d\u63db\u3048\u308b\n\n\u3067\u306f\u524d\u56de\u540c\u69d8\u30b5\u30f3\u30d7\u30eb\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u30d1\u30fc\u30b9\u3057\u3066\u307f\u307e\u3057\u3087\u3046\u3002\u8a18\u53f7\u304c\u6d88\u3048\u307e\u3057\u305f\u3002\n$ python pl0_parser.py ex1.pl0\n['VAR', 'x', 'squ', 'PROCEDURE', 'square', 'BEGIN', 'squ', ':=', 'x', '*', 'x', 'END', 'BEGIN', 'x', ':=', '1', 'WHILE', 'x', '<=', '10', 'DO', 'BEGIN', 'CALL', 'square', 'x', ':=', 'x', '+', '1', 'END', 'END']\n\n\nGroup()\u3092\u4f7f\u3063\u305f\u6728\u69cb\u9020\n\u4eca\u307e\u3067\u898b\u3066\u304d\u305f\u30d1\u30fc\u30b9\u7d50\u679c\u306f\uff11\u6b21\u5143\u914d\u5217\u3067\u3042\u308a\u69cb\u9020\u304c\u3042\u308a\u307e\u305b\u3093\u3002\u30d1\u30fc\u30b5\u30fc\u306b\u30b0\u30eb\u30fc\u30d7\u306e\u60c5\u5831\u3092\u4ed8\u52a0\u3057\u3066\u3001\u69cb\u9020\u3092\u4f5c\u3063\u3066\u307f\u307e\u3059\u3002\n\u9759\u7684\u306b\u69cb\u9020\u3092\u4e0e\u3048\u308b\u306b\u306fGroup()\u3067\u30c8\u30fc\u30af\u30f3\u3092\u4e00\u3064\u306b\u307e\u3068\u3081\u307e\u3059\u3002\u5177\u4f53\u4f8b\u3092\u898b\u3066\u307f\u307e\u3057\u3087\u3046\u3002\u5909\u6570\u306e\u30ea\u30b9\u30c8\u3092\u30b0\u30eb\u30fc\u30d7\u5316\u3059\u308b\u306b\u306f\u6b21\u306e\u3088\u3046\u306b\u5909\u66f4\u3057\u307e\u3059\u3002\n# 11. var\nvar = VAR + Group(ident + ZeroOrMore(COMMA + ident)) + SEMICOLON\n\n\u518d\u5ea6\u30d1\u30fc\u30b9\u3057\u305f\u7d50\u679c\u3067\u3059\u3002\u5148\u982d\u306e\u5909\u6570\u4e00\u89a7\u304c\u30ab\u30c3\u30b3\u306e\u4e2d\u306b\u5165\u308a\u307e\u3057\u305f\uff01\n['VAR', ['x', 'squ'], 'PROCEDURE', 'square', 'BEGIN', 'squ', ':=', 'x', '*', 'x', 'END', 'BEGIN', 'x', ':=', '1', 'WHILE', 'x', '<=', '10', 'DO', 'BEGIN', 'CALL', 'square', 'x', ':=', 'x', '+', '1', 'END', 'END']\n\n\u306a\u3089\u3070\u3001Group()\u3067\u62ec\u308a\u307e\u304f\u308c\u3070?\u3068\u3082\u8a00\u3048\u308b\u308f\u3051\u3067\u3059\u304c\u3001pyparsing\u3067\u306f.setParseAction\u3092\u4f7f\u3046\u5225\u306e\u5e38\u5957\u624b\u6bb5\u304c\u3042\u308a\u307e\u3059\u3002\n\n.setParseAction()\u3092\u4f7f\u3046\u65b9\u6cd5\npyparsing\u3067\u306f\u30d1\u30fc\u30b5\u30fc\u304c\u30d1\u30fc\u30b9\u306b\u6210\u529f\u3057\u305f\u6642\u306b\u30b3\u30fc\u30eb\u30d0\u30c3\u30af\u3092\u547c\u3076\u3053\u3068\u304c\u53ef\u80fd\u3067\u3059\u3002\u3053\u306e\u30b3\u30fc\u30eb\u30d0\u30c3\u30af\u306b\u306f\u30c8\u30fc\u30af\u30f3\u306e\u30ea\u30b9\u30c8\u304c\u5f15\u304d\u6e21\u3055\u308c\u3001\u8fd4\u308a\u5024\u3067\u30c8\u30fc\u30af\u30f3\u3092\u7f6e\u304d\u63db\u3048\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\u3067\u306f\u5148\u307b\u3069\u540c\u69d8\u306b\u5909\u6570\u306e\u5ba3\u8a00\u3092[]\u306e\u4e2d\u306b\u5165\u308c\u3066\u307f\u307e\u3057\u3087\u3046\u3002\n# 11. var\ndef var_list(tokens):\n    tokens = tokens.asList()\n    return [tokens[0], tokens[1:]]\nvar = VAR + ident + ZeroOrMore(COMMA + ident) + SEMICOLON\nvar.setParseAction(var_list)\n\n\u30d1\u30fc\u30b9\u3057\u305f\u3068\u3053\u308d\u5148\u307b\u3069\u3068\u540c\u3058\u7d50\u679c\u304c\u5f97\u3089\u308c\u307e\u3057\u305f\u3002\n['VAR', ['x', 'squ'], 'PROCEDURE', 'square', 'BEGIN', 'squ', ':=', 'x', '*', 'x', 'END', 'BEGIN', 'x', ':=', '1', 'WHILE', 'x', '<=', '10', 'DO', 'BEGIN', 'CALL', 'square', 'x', ':=', 'x', '+', '1', 'END', 'END']\n\n\n\u3061\u3087\u3063\u3068\u9ad8\u5ea6\u306a\u4f7f\u3044\u65b9\u3002\n\u95a2\u6570\u3092\u547c\u3076\u304b\u308f\u308a\u306b\u30af\u30e9\u30b9\u306e\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u3092\u547c\u3093\u3067\u307f\u307e\u3059\u3002Group()\u3067\u524d\u51e6\u7406\u3092\u3057\u3066\u304a\u304f\u3068\u30af\u30e9\u30b9\u304c\u3059\u3063\u304d\u308a\u66f8\u3051\u307e\u3059\u3002\n# 11. var\nclass Var(object):\n    def __init__(self, tokens):\n        tokens = tokens.asList()\n        self.variables = tokens[1]\nvar = VAR + Group(ident + ZeroOrMore(COMMA + ident)) + SEMICOLON\nvar.setParseAction(Var)\n\n\u7d50\u679c\u3002\u304a\u3049\uff01\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u304c\u5165\u308a\u307e\u3057\u305f\u3002\u3053\u308c\u3092\u4f7f\u3048\u3070\u30d1\u30fc\u30b5\u30fc\u5b9f\u884c\u6642\u306b\u76f4\u63a5AST\u3092\u751f\u6210\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n[<__main__.Var object at 0x10d418710>, 'PROCEDURE', 'square', 'BEGIN', 'squ', ':=', 'x', '*', 'x', 'END', 'BEGIN', 'x', ':=', '1', 'WHILE', 'x', '<=', '10', 'DO', 'BEGIN', 'CALL', 'square', 'x', ':=', 'x', '+', '1', 'END', 'END']\n\n\u30b3\u30fc\u30eb\u30d0\u30c3\u30af\u306f\u547c\u3073\u51fa\u3057\u53ef\u80fd\u306a\u3089\u95a2\u6570\u3067\u3082\u30af\u30e9\u30b9\u3067\u3082\u3044\u3044\u306e\u3067\u3059\u304c\u3002\u5f15\u6570\u306e\u6570\u306b\u3088\u3063\u3066\u5f15\u6570\u306e\u610f\u5473\u304c\u7570\u306a\u308a\u307e\u3059\u306e\u3067\u3001\u6c17\u3092\u3064\u3051\u307e\u3057\u3087\u3046\u3002\n\n\u5f15\u6570\u4e09\u3064 fn(original_string, location, tokens)\n\u5f15\u6570\u4e8c\u3064 fn(location, tokens)\n\u5f15\u6570\u4e00\u3064 fn(tokens)\n\u5f15\u6570\u306a\u3057 fn()\n\noriginal_string = \u73fe\u5728\u30d1\u30fc\u30b9\u4e2d\u306e\u5143\u306e\u6587\u5b57\u5217\nlocation = \u30de\u30c3\u30c1\u3057\u305f\u6587\u5b57\u5217\u306e\u4f4d\u7f6e\ntokens = \u30de\u30c3\u30c1\u3057\u305f\u30c8\u30fc\u30af\u30f3\u306e\u914d\u5217\u3002\u30c8\u30fc\u30af\u30f3\u306fParseResults\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306b\u306a\u3063\u3066\u3044\u308b\n\n\u5f0f\u306e\u6728\u69cb\u9020\n\u5f0f\u306b\u306f\u8907\u96d1\u306a\u8a08\u7b97\u9806\u5e8f\u304c\u3042\u308a\u307e\u3059\u304c\u3001\u7a81\u304d\u8a70\u3081\u308b\u3068\u9805\u3068\u6f14\u7b97\u5b50\u304c\u57fa\u672c\u3067\u3059\u3002\u6f14\u7b97\u5b50\u306e\u512a\u5148\u9806\u4f4d\u3092\u8003\u616e\u3059\u308b\u3068\u5165\u308c\u5b50\u304c\u5fc5\u9808\u3067\u3059\u3002\u81ea\u5206\u3067\u66f8\u304f\u3068\u9762\u5012\u304f\u3055\u3044\u3067\u3059\u304c\u3001pyparsing\u3067\u306finfixNotation\u3068\u3044\u3046\u30e6\u30fc\u30c6\u30a3\u30ea\u30c6\u30a3\u30fc\u304c\u3042\u308a\u3001\u6f14\u7b97\u5b50\u306e\u9806\u4f4d\u3092\u5b9a\u7fa9\u3059\u308b\u3060\u3051\u3067\u81ea\u52d5\u7684\u306b\u30d1\u30fc\u30b5\u30fc\u304c\u3067\u304d\u3042\u304c\u308a\u307e\u3059\u3002\u30aa\u30ea\u30b8\u30ca\u30eb\u306eBNF\u306b\u57fa\u3065\u3044\u305f\u30d1\u30fc\u30b5\u30fc\u306f\u524a\u9664\u3057\u307e\u3059\u3002\n\u9805\u306e\u524d\u306b\u3064\u3044\u3066\u3044\u308b\u7b26\u53f7\u306f\u5358\u9805\u6f14\u7b97\u5b50(unary operator)\u3001\u901a\u5e38\u306e\u56db\u5247\u6f14\u7b97\u306f\u4e8c\u9805\u6f14\u7b97\u5b50(binary operator)\u3067\u3059\u3002\u6bd4\u8f03\u6f14\u7b97\u5b50(< <= > >= = #)\u3082\u4e8c\u9805\u6f14\u7b97\u5b50\u306e\u4ef2\u9593\u3067\u3059\u3002\u3067\u306f\u5b9f\u969b\u306b\u5b9a\u7fa9\u3057\u3066\u307f\u307e\u3057\u3087\u3046\u3002\noneOf\u3092\u4f7f\u3063\u3066\u3044\u308b\u306e\u306f\u6f14\u7b97\u5b50\u304c\u540c\u4f4d\u306e\u610f\u5473\u3067\u3059\u3002\u3053\u308c\u3092\u3046\u3063\u304b\u308a\uff12\u884c\u306b\u5206\u3051\u3066\u66f8\u3044\u3066\u3057\u307e\u3046\u3068\"\u540c\u4f4d\u306e\u6f14\u7b97\u5b50\u306f\u5de6\u304b\u3089\u8a08\u7b97\u3059\u308b\"\u3068\u3044\u3046\u30eb\u30fc\u30eb\u306b\u53cd\u3057\u305f\u7d50\u679c\u306b\u306a\u3063\u3066\u3057\u307e\u3044\u307e\u3059\u306e\u3067\u6ce8\u610f\u3002\nopAssoc.RIGHT\u3068LEFT\u306f\u305d\u306e\u6f14\u7b97\u5b50\u304c\u53f3\u8fba\u3042\u308b\u3044\u306f\u5de6\u8fba\u306e\u3069\u3061\u3089\u306b\u7d50\u3073\u3064\u3044\u3066\u3044\u308b\u304b\u3092\u793a\u3059\u3082\u306e\u3067\u3059\u3002\u6f14\u7b97\u5b50#\u306fPL/0\u3067\u306f!=\u306e\u610f\u5473\u3067\u3059\u3002\n# term = Forward()\n# factor = Forward()\n# expression = Optional(oneOf(\"+ -\")) + term + ZeroOrMore(oneOf(\"+ -\") + term)\n# term << (factor + ZeroOrMore(oneOf(\"* /\") + factor))\n# factor << (ident | number | LPAR + expression + RPAR)\n\n# infixNotation\u306f\u6f14\u7b97\u5b50\u306e\u512a\u5148\u9806\u4f4d\u3092\u5b9a\u7fa9\u3059\u308b\u3002\n# \u540c\u4f4d\u306e\u6f14\u7b97\u5b50\u306f\uff11\u884c\u3067\u66f8\u304f\u3053\u3068\u3002\nUNARY, BINARY, TERNARY = 1, 2, 3\nfactor = ident | number\nexpression = infixNotation(\n    factor,\n    [\n        (oneOf(\"+ -\"), UNARY, opAssoc.RIGHT),  # \u7b26\u53f7\u306f\u6700\u512a\u5148\u3002\n        (oneOf(\"* /\"), BINARY, opAssoc.LEFT),  # \u639b\u3051\u7b97\u5272\u308a\u7b97\u306f\u8db3\u3057\u7b97\u5f15\u304d\u7b97\u3088\u308a\u512a\u5148\n        (oneOf(\"+ -\"), BINARY, opAssoc.LEFT),\n    ]\n)\n\n\u540c\u69d8\u306bcondition\u306b\u3064\u3044\u3066\u3082\u66f8\u304d\u63db\u3048\u307e\u3059\u3002\n# 4. condition\n#condition = ODD + expression | expression + oneOf('= # < <= > >=') + expression\ncondition = infixNotation(\n    expression,\n    [\n        (ODD, UNARY, opAssoc.RIGHT),\n        (oneOf(\"< <= > >=\"), BINARY, opAssoc.LEFT),\n        (oneOf(\"= #\"), BINARY, opAssoc.LEFT),\n    ]\n)\n\n\u5b9f\u884c\u7d50\u679c\u3002\u5f0f\u304c[]\u306e\u4e2d\u306b\u62ec\u3089\u308c\u305f\u3053\u3068\u304c\u308f\u304b\u308a\u307e\u3059\u3002\n['VAR', ['x', 'squ'], 'PROCEDURE', 'square', 'BEGIN', 'squ', ':=', ['x', '*', 'x'], 'END', 'BEGIN', 'x', ':=', '1', 'WHILE', ['x', '<=', '10'], 'DO', 'BEGIN', 'CALL', 'square', 'x', ':=', ['x', '+', '1'], 'END', 'END']\n\n\u3061\u306a\u307f\u306b\u56db\u5247\u6f14\u7b97\u3082\u6b63\u3057\u304f\u30d1\u30fc\u30b9\u3067\u304d\u307e\u3059\u3002\n>>> print expression.parseString('1 + 2 * 3 + 4')\n[['1', '+', ['2', '*', '3'], '+', '4']]\n>>> print expression.parseString('1 + 2 / 3 * 4 - -5')\n[['1', '+', ['2', '/', '3', '*', '4'], '-', ['-', '5']]]\n\n\n\u307e\u3068\u3081\n\u30c8\u30fc\u30af\u30f3\u306e\u7f85\u5217\u304b\u3089\u3001\u69cb\u6587\u6728\u3092\u4f5c\u308a\u307e\u3057\u305f\u3002BNF\u3067\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u308b\u6587\u6cd5\u306e\u4e00\u90e8\u3068\u3001\u6f14\u7b97\u5b50\u306e\u512a\u5148\u9806\u4f4d\u3092\u8003\u616e\u3057\u305f\u3001\u5f0f\u306e\u69cb\u6587\u6728\u306e\u751f\u6210\u3082\u884c\u3044\u307e\u3057\u305f\u3002\u4e00\u90e8\u3057\u304b\u5b9f\u88c5\u3057\u306a\u304b\u3063\u305f\u306e\u306f\u3001pyparsing\u3067\u306fAST\u3092\u76f4\u63a5\u751f\u6210\u3059\u308b\u65b9\u6cd5\u304c\u3042\u308a\u3001\u5b9f\u88c5\u3057\u3066\u3082\u6368\u3066\u308b\u3053\u3068\u306b\u306a\u308b\u306e\u3067\u3002\u6b21\u56de\u306f\u5168\u6587\u6cd5\u3092\u30b5\u30dd\u30fc\u30c8\u3057\u305fAST\u306e\u751f\u6210\u3092\u884c\u3044\u307e\u3059\u3002\n\n\u30bd\u30fc\u30b9\n\npl0_parser.py\n# -*- coding: utf-8 -*-\nfrom pyparsing import *\n\nLPAR, RPAR, COMMA, SEMICOLON, DOT = map(Suppress, \"(),;.\")\n\n# 1. reserved keyword\n(CONST, VAR, PROCEDURE, CALL, BEGIN, END, IF, THEN, WHILE, DO, ODD) = map(CaselessKeyword,\n\"CONST, VAR, PROCEDURE, CALL, BEGIN, END, IF, THEN, WHILE, DO, ODD\".replace(\",\", \"\").split())\nkeyword = MatchFirst((CONST, VAR, PROCEDURE, CALL, BEGIN, END, IF, THEN, WHILE, DO, ODD))\n\n# 2. identifier\nident = ~keyword + Word(alphas, alphanums + \"_\")\n\n# 3. expression\nnumber = Regex(r\"\\d+(\\.\\d*)?([eE][+-]?\\d+)?\")\nUNARY, BINARY, TERNARY = 1, 2, 3\nfactor = ident | number\nexpression = infixNotation(\n    factor,\n    [\n        (oneOf(\"+ -\"), UNARY, opAssoc.RIGHT),  # \u7b26\u53f7\u306f\u6700\u512a\u5148\n        (oneOf(\"* /\"), BINARY, opAssoc.LEFT),  # \u639b\u3051\u7b97\u5272\u308a\u7b97\u306f\u8db3\u3057\u7b97\u5f15\u304d\u7b97\u3088\u308a\u512a\u5148\n        (oneOf(\"+ -\"), BINARY, opAssoc.LEFT),\n    ]\n)\n\n\n# 4. condition\n#condition = ODD + expression | expression + oneOf('= # < <= > >=') + expression\ncondition = infixNotation(\n    expression,\n    [\n        (ODD, UNARY, opAssoc.RIGHT),\n    (oneOf(\"< <= > >=\"), BINARY, opAssoc.LEFT),\n    (oneOf(\"= #\"), BINARY, opAssoc.LEFT),\n    ]\n)\n\n# 5. assignment\nassign_statement = ident + \":=\" + expression\n\n# 6. call\ncall_statement = CALL + ident\n\n# 7. if-then\nstatement = Forward()\nif_statement = IF + condition + THEN + statement\n\n# 8. while-do\nwhile_statement = WHILE + condition + DO + statement\n\n# 9. statement\nstatement << Optional(assign_statement\n                      | call_statement\n                      | BEGIN + statement + ZeroOrMore(SEMICOLON + statement) + END\n                      | if_statement\n                      | while_statement\n)\n\n# 10. const\nconst = CONST + Group(Group(ident + \"=\" + number) + ZeroOrMore(COMMA + ident + \"=\" + number)) + SEMICOLON\n\n# 11. var\nvar = VAR + Group(ident + ZeroOrMore(COMMA + ident)) + SEMICOLON\n\n# 12. procedure\nblock = Forward()\nprocedure = PROCEDURE + ident + SEMICOLON + block + SEMICOLON\n\n# 13. block\nblock << Optional(const) + Optional(var) + ZeroOrMore(procedure) + statement\n\n# 14. program\nprogram = block + DOT\n\nif __name__ == '__main__':\n    import sys\n    with open(sys.argv[1], 'r') as fp:\n        txt = fp.read()\n        print program.parseString(txt)\n\n\n\n# \u4eca\u56de\u306e\u76ee\u6a19\n\n\u30b3\u30f3\u30d1\u30a4\u30e9\u4f5c\u6210\u306e\u4e00\u822c\u7684\u306a\u6d41\u308c\u306f\u6b21\u306e\u901a\u308a\u3067\u3001[\u524d\u56de](http://qiita.com/knoguchi/items/ee949989d0a9f04bee6f)\u306f1\u756a\u307e\u3067\u884c\u3044\u307e\u3057\u305f\u3002\u4eca\u56de\u306f2\u756a\u306e\u69cb\u6587\u6728\uff08\u4e00\u90e8\u306e\u307f\uff09\u3092\u4f5c\u308a\u307e\u3059\u3002\n\n1. \u30d1\u30fc\u30b5\u30fc\u3067\u30c8\u30fc\u30af\u30f3\u306b\u5206\u89e3\u3059\u308b\u3002\n2. \u30c8\u30fc\u30af\u30f3\u306e\u69cb\u9020\u3092\u89e3\u6790\u3057\u3066\u69cb\u6587\u6728(parse tree)\u3092\u3064\u304f\u308b\u3002\n3. \u4e0d\u8981\u306a\u30c8\u30fc\u30af\u3092\u524a\u9664\u3057\u3001\u62bd\u8c61\u69cb\u6587\u6728(AST)\u3092\u4f5c\u308b\u3002\n4. AST\u30ce\u30fc\u30c9\u3092\u8fbf\u3063\u3066\u30b3\u30fc\u30c9\u3092\u751f\u6210\u3059\u308b\u3002\n\n\n# \u4e0d\u8981\u306a\u30c8\u30fc\u30af\u30f3\u306e\u6291\u5236\n\npyparsing\u3067\u306f\u5f8c\u306b\u3067\u3066\u304f\u308b\u69cb\u9020\u5316\u306e\u6a5f\u80fd\u306b\u3088\u308a\u3001\u30d1\u30fc\u30b9\u7d50\u679c\u306b';'\u306a\u3069\u306e\u8a18\u53f7\u3092\u7dad\u6301\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u305b\u3093\u3002Suppress()\u3092\u4f7f\u3046\u3068\u3001\u7d50\u679c\u306b\u542b\u307e\u308c\u306a\u3044\u30c8\u30fc\u30af\u30f3\u306b\u306a\u308a\u307e\u3059\u3002\u5148\u306b\u6291\u5236\u3092\u884c\u308f\u306a\u3044\u3068\u7d50\u679c\u304c\u898b\u3065\u3089\u304f\u3066\u4ed5\u65b9\u304c\u306a\u3044\u306e\u3067\u3001\u307e\u305a\u3053\u306e\u8a71\u984c\u304b\u3089\u3002\n\n\u524d\u56de\u307e\u3067\u306e\u30d1\u30fc\u30b9\u7d50\u679c\u3092\u518d\u63b2\u3057\u307e\u3059\u3002\n\n```\n['VAR', 'x', ',', 'squ', ';', 'PROCEDURE', 'square', ';', 'BEGIN', 'squ', ':=', 'x', '*', 'x', 'END', ';', 'BEGIN', 'x', ':=', '1', ';', 'WHILE', 'x', '<=', '10', 'DO', 'BEGIN', 'CALL', 'square', ';', 'x', ':=', 'x', '+', '1', ';', 'END', 'END', '.']\n```\n\n(),;.\u3092\u6291\u5236\u3057\u3066\u52b9\u679c\u3092\u78ba\u304b\u3081\u3066\u307f\u307e\u3057\u3087\u3046\u3002\n\n```py\n# \u5148\u982d\u306b\u8ffd\u52a0. \nLPAR, RPAR, COMMA, SEMICOLON, DOT = map(Suppress, \"(),;.\")\n\n# \u6587\u5b57\u5217\u3092\u5b9a\u6570\u3067\u7f6e\u304d\u63db\u3048\u308b\n# before\n# factor << (ident | number | \"(\" + expression + \")\")\n# after\nfactor << (ident | number | LPAR + expression + RPAR)\n\n# \u540c\u69d8\u306b, ; . \u3082\u5b9a\u6570\u3067\u7f6e\u304d\u63db\u3048\u308b\n```\n\n\u3067\u306f\u524d\u56de\u540c\u69d8\u30b5\u30f3\u30d7\u30eb\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u30d1\u30fc\u30b9\u3057\u3066\u307f\u307e\u3057\u3087\u3046\u3002\u8a18\u53f7\u304c\u6d88\u3048\u307e\u3057\u305f\u3002\n\n```\n$ python pl0_parser.py ex1.pl0\n['VAR', 'x', 'squ', 'PROCEDURE', 'square', 'BEGIN', 'squ', ':=', 'x', '*', 'x', 'END', 'BEGIN', 'x', ':=', '1', 'WHILE', 'x', '<=', '10', 'DO', 'BEGIN', 'CALL', 'square', 'x', ':=', 'x', '+', '1', 'END', 'END']\n```\n\n\n# Group()\u3092\u4f7f\u3063\u305f\u6728\u69cb\u9020\n\n\u4eca\u307e\u3067\u898b\u3066\u304d\u305f\u30d1\u30fc\u30b9\u7d50\u679c\u306f\uff11\u6b21\u5143\u914d\u5217\u3067\u3042\u308a\u69cb\u9020\u304c\u3042\u308a\u307e\u305b\u3093\u3002\u30d1\u30fc\u30b5\u30fc\u306b\u30b0\u30eb\u30fc\u30d7\u306e\u60c5\u5831\u3092\u4ed8\u52a0\u3057\u3066\u3001\u69cb\u9020\u3092\u4f5c\u3063\u3066\u307f\u307e\u3059\u3002\n\n\u9759\u7684\u306b\u69cb\u9020\u3092\u4e0e\u3048\u308b\u306b\u306fGroup()\u3067\u30c8\u30fc\u30af\u30f3\u3092\u4e00\u3064\u306b\u307e\u3068\u3081\u307e\u3059\u3002\u5177\u4f53\u4f8b\u3092\u898b\u3066\u307f\u307e\u3057\u3087\u3046\u3002\u5909\u6570\u306e\u30ea\u30b9\u30c8\u3092\u30b0\u30eb\u30fc\u30d7\u5316\u3059\u308b\u306b\u306f\u6b21\u306e\u3088\u3046\u306b\u5909\u66f4\u3057\u307e\u3059\u3002\n\n```\n# 11. var\nvar = VAR + Group(ident + ZeroOrMore(COMMA + ident)) + SEMICOLON\n```\n\n\u518d\u5ea6\u30d1\u30fc\u30b9\u3057\u305f\u7d50\u679c\u3067\u3059\u3002\u5148\u982d\u306e\u5909\u6570\u4e00\u89a7\u304c\u30ab\u30c3\u30b3\u306e\u4e2d\u306b\u5165\u308a\u307e\u3057\u305f\uff01\n\n```\n['VAR', ['x', 'squ'], 'PROCEDURE', 'square', 'BEGIN', 'squ', ':=', 'x', '*', 'x', 'END', 'BEGIN', 'x', ':=', '1', 'WHILE', 'x', '<=', '10', 'DO', 'BEGIN', 'CALL', 'square', 'x', ':=', 'x', '+', '1', 'END', 'END']\n```\n\n\u306a\u3089\u3070\u3001Group()\u3067\u62ec\u308a\u307e\u304f\u308c\u3070?\u3068\u3082\u8a00\u3048\u308b\u308f\u3051\u3067\u3059\u304c\u3001pyparsing\u3067\u306f.setParseAction\u3092\u4f7f\u3046\u5225\u306e\u5e38\u5957\u624b\u6bb5\u304c\u3042\u308a\u307e\u3059\u3002\n\n# .setParseAction()\u3092\u4f7f\u3046\u65b9\u6cd5\n\npyparsing\u3067\u306f\u30d1\u30fc\u30b5\u30fc\u304c\u30d1\u30fc\u30b9\u306b\u6210\u529f\u3057\u305f\u6642\u306b\u30b3\u30fc\u30eb\u30d0\u30c3\u30af\u3092\u547c\u3076\u3053\u3068\u304c\u53ef\u80fd\u3067\u3059\u3002\u3053\u306e\u30b3\u30fc\u30eb\u30d0\u30c3\u30af\u306b\u306f\u30c8\u30fc\u30af\u30f3\u306e\u30ea\u30b9\u30c8\u304c\u5f15\u304d\u6e21\u3055\u308c\u3001\u8fd4\u308a\u5024\u3067\u30c8\u30fc\u30af\u30f3\u3092\u7f6e\u304d\u63db\u3048\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\u3067\u306f\u5148\u307b\u3069\u540c\u69d8\u306b\u5909\u6570\u306e\u5ba3\u8a00\u3092[]\u306e\u4e2d\u306b\u5165\u308c\u3066\u307f\u307e\u3057\u3087\u3046\u3002\n\n```\n# 11. var\ndef var_list(tokens):\n    tokens = tokens.asList()\n    return [tokens[0], tokens[1:]]\nvar = VAR + ident + ZeroOrMore(COMMA + ident) + SEMICOLON\nvar.setParseAction(var_list)\n```\n\n\u30d1\u30fc\u30b9\u3057\u305f\u3068\u3053\u308d\u5148\u307b\u3069\u3068\u540c\u3058\u7d50\u679c\u304c\u5f97\u3089\u308c\u307e\u3057\u305f\u3002\n\n```\n['VAR', ['x', 'squ'], 'PROCEDURE', 'square', 'BEGIN', 'squ', ':=', 'x', '*', 'x', 'END', 'BEGIN', 'x', ':=', '1', 'WHILE', 'x', '<=', '10', 'DO', 'BEGIN', 'CALL', 'square', 'x', ':=', 'x', '+', '1', 'END', 'END']\n```\n\n## \u3061\u3087\u3063\u3068\u9ad8\u5ea6\u306a\u4f7f\u3044\u65b9\u3002\n\u95a2\u6570\u3092\u547c\u3076\u304b\u308f\u308a\u306b\u30af\u30e9\u30b9\u306e\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u3092\u547c\u3093\u3067\u307f\u307e\u3059\u3002Group()\u3067\u524d\u51e6\u7406\u3092\u3057\u3066\u304a\u304f\u3068\u30af\u30e9\u30b9\u304c\u3059\u3063\u304d\u308a\u66f8\u3051\u307e\u3059\u3002\n\n```\n# 11. var\nclass Var(object):\n    def __init__(self, tokens):\n        tokens = tokens.asList()\n        self.variables = tokens[1]\nvar = VAR + Group(ident + ZeroOrMore(COMMA + ident)) + SEMICOLON\nvar.setParseAction(Var)\n```\n\n\u7d50\u679c\u3002\u304a\u3049\uff01\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u304c\u5165\u308a\u307e\u3057\u305f\u3002\u3053\u308c\u3092\u4f7f\u3048\u3070**\u30d1\u30fc\u30b5\u30fc\u5b9f\u884c\u6642\u306b\u76f4\u63a5AST\u3092\u751f\u6210\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059**\u3002\n\n```\n[<__main__.Var object at 0x10d418710>, 'PROCEDURE', 'square', 'BEGIN', 'squ', ':=', 'x', '*', 'x', 'END', 'BEGIN', 'x', ':=', '1', 'WHILE', 'x', '<=', '10', 'DO', 'BEGIN', 'CALL', 'square', 'x', ':=', 'x', '+', '1', 'END', 'END']\n```\n\n\n\u30b3\u30fc\u30eb\u30d0\u30c3\u30af\u306f\u547c\u3073\u51fa\u3057\u53ef\u80fd\u306a\u3089\u95a2\u6570\u3067\u3082\u30af\u30e9\u30b9\u3067\u3082\u3044\u3044\u306e\u3067\u3059\u304c\u3002\u5f15\u6570\u306e\u6570\u306b\u3088\u3063\u3066\u5f15\u6570\u306e\u610f\u5473\u304c\u7570\u306a\u308a\u307e\u3059\u306e\u3067\u3001\u6c17\u3092\u3064\u3051\u307e\u3057\u3087\u3046\u3002\n\n* \u5f15\u6570\u4e09\u3064 fn(original_string, location, tokens)\n* \u5f15\u6570\u4e8c\u3064 fn(location, tokens)\n* \u5f15\u6570\u4e00\u3064 fn(tokens)\n* \u5f15\u6570\u306a\u3057 fn()\n\noriginal_string = \u73fe\u5728\u30d1\u30fc\u30b9\u4e2d\u306e\u5143\u306e\u6587\u5b57\u5217\nlocation = \u30de\u30c3\u30c1\u3057\u305f\u6587\u5b57\u5217\u306e\u4f4d\u7f6e\ntokens = \u30de\u30c3\u30c1\u3057\u305f\u30c8\u30fc\u30af\u30f3\u306e\u914d\u5217\u3002\u30c8\u30fc\u30af\u30f3\u306fParseResults\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306b\u306a\u3063\u3066\u3044\u308b\n\n# \u5f0f\u306e\u6728\u69cb\u9020\n\n\u5f0f\u306b\u306f\u8907\u96d1\u306a\u8a08\u7b97\u9806\u5e8f\u304c\u3042\u308a\u307e\u3059\u304c\u3001\u7a81\u304d\u8a70\u3081\u308b\u3068\u9805\u3068\u6f14\u7b97\u5b50\u304c\u57fa\u672c\u3067\u3059\u3002\u6f14\u7b97\u5b50\u306e\u512a\u5148\u9806\u4f4d\u3092\u8003\u616e\u3059\u308b\u3068\u5165\u308c\u5b50\u304c\u5fc5\u9808\u3067\u3059\u3002\u81ea\u5206\u3067\u66f8\u304f\u3068\u9762\u5012\u304f\u3055\u3044\u3067\u3059\u304c\u3001pyparsing\u3067\u306f`infixNotation`\u3068\u3044\u3046\u30e6\u30fc\u30c6\u30a3\u30ea\u30c6\u30a3\u30fc\u304c\u3042\u308a\u3001\u6f14\u7b97\u5b50\u306e\u9806\u4f4d\u3092\u5b9a\u7fa9\u3059\u308b\u3060\u3051\u3067\u81ea\u52d5\u7684\u306b\u30d1\u30fc\u30b5\u30fc\u304c\u3067\u304d\u3042\u304c\u308a\u307e\u3059\u3002\u30aa\u30ea\u30b8\u30ca\u30eb\u306eBNF\u306b\u57fa\u3065\u3044\u305f\u30d1\u30fc\u30b5\u30fc\u306f\u524a\u9664\u3057\u307e\u3059\u3002\n\n\u9805\u306e\u524d\u306b\u3064\u3044\u3066\u3044\u308b\u7b26\u53f7\u306f\u5358\u9805\u6f14\u7b97\u5b50(unary operator)\u3001\u901a\u5e38\u306e\u56db\u5247\u6f14\u7b97\u306f\u4e8c\u9805\u6f14\u7b97\u5b50(binary operator)\u3067\u3059\u3002\u6bd4\u8f03\u6f14\u7b97\u5b50(< <= > >= = #)\u3082\u4e8c\u9805\u6f14\u7b97\u5b50\u306e\u4ef2\u9593\u3067\u3059\u3002\u3067\u306f\u5b9f\u969b\u306b\u5b9a\u7fa9\u3057\u3066\u307f\u307e\u3057\u3087\u3046\u3002\n\noneOf\u3092\u4f7f\u3063\u3066\u3044\u308b\u306e\u306f\u6f14\u7b97\u5b50\u304c\u540c\u4f4d\u306e\u610f\u5473\u3067\u3059\u3002\u3053\u308c\u3092\u3046\u3063\u304b\u308a\uff12\u884c\u306b\u5206\u3051\u3066\u66f8\u3044\u3066\u3057\u307e\u3046\u3068\"\u540c\u4f4d\u306e\u6f14\u7b97\u5b50\u306f\u5de6\u304b\u3089\u8a08\u7b97\u3059\u308b\"\u3068\u3044\u3046\u30eb\u30fc\u30eb\u306b\u53cd\u3057\u305f\u7d50\u679c\u306b\u306a\u3063\u3066\u3057\u307e\u3044\u307e\u3059\u306e\u3067\u6ce8\u610f\u3002\n\nopAssoc.RIGHT\u3068LEFT\u306f\u305d\u306e\u6f14\u7b97\u5b50\u304c\u53f3\u8fba\u3042\u308b\u3044\u306f\u5de6\u8fba\u306e\u3069\u3061\u3089\u306b\u7d50\u3073\u3064\u3044\u3066\u3044\u308b\u304b\u3092\u793a\u3059\u3082\u306e\u3067\u3059\u3002\u6f14\u7b97\u5b50#\u306fPL/0\u3067\u306f!=\u306e\u610f\u5473\u3067\u3059\u3002\n\n```\n# term = Forward()\n# factor = Forward()\n# expression = Optional(oneOf(\"+ -\")) + term + ZeroOrMore(oneOf(\"+ -\") + term)\n# term << (factor + ZeroOrMore(oneOf(\"* /\") + factor))\n# factor << (ident | number | LPAR + expression + RPAR)\n\n# infixNotation\u306f\u6f14\u7b97\u5b50\u306e\u512a\u5148\u9806\u4f4d\u3092\u5b9a\u7fa9\u3059\u308b\u3002\n# \u540c\u4f4d\u306e\u6f14\u7b97\u5b50\u306f\uff11\u884c\u3067\u66f8\u304f\u3053\u3068\u3002\nUNARY, BINARY, TERNARY = 1, 2, 3\nfactor = ident | number\nexpression = infixNotation(\n    factor,\n    [\n        (oneOf(\"+ -\"), UNARY, opAssoc.RIGHT),  # \u7b26\u53f7\u306f\u6700\u512a\u5148\u3002\n        (oneOf(\"* /\"), BINARY, opAssoc.LEFT),  # \u639b\u3051\u7b97\u5272\u308a\u7b97\u306f\u8db3\u3057\u7b97\u5f15\u304d\u7b97\u3088\u308a\u512a\u5148\n        (oneOf(\"+ -\"), BINARY, opAssoc.LEFT),\n    ]\n)\n```\n\n\u540c\u69d8\u306bcondition\u306b\u3064\u3044\u3066\u3082\u66f8\u304d\u63db\u3048\u307e\u3059\u3002\n\n```\n# 4. condition\n#condition = ODD + expression | expression + oneOf('= # < <= > >=') + expression\ncondition = infixNotation(\n    expression,\n    [\n        (ODD, UNARY, opAssoc.RIGHT),\n        (oneOf(\"< <= > >=\"), BINARY, opAssoc.LEFT),\n        (oneOf(\"= #\"), BINARY, opAssoc.LEFT),\n    ]\n)\n```\n\n\u5b9f\u884c\u7d50\u679c\u3002\u5f0f\u304c[]\u306e\u4e2d\u306b\u62ec\u3089\u308c\u305f\u3053\u3068\u304c\u308f\u304b\u308a\u307e\u3059\u3002\n\n```\n['VAR', ['x', 'squ'], 'PROCEDURE', 'square', 'BEGIN', 'squ', ':=', ['x', '*', 'x'], 'END', 'BEGIN', 'x', ':=', '1', 'WHILE', ['x', '<=', '10'], 'DO', 'BEGIN', 'CALL', 'square', 'x', ':=', ['x', '+', '1'], 'END', 'END']\n```\n\n\u3061\u306a\u307f\u306b\u56db\u5247\u6f14\u7b97\u3082\u6b63\u3057\u304f\u30d1\u30fc\u30b9\u3067\u304d\u307e\u3059\u3002\n\n```\n>>> print expression.parseString('1 + 2 * 3 + 4')\n[['1', '+', ['2', '*', '3'], '+', '4']]\n>>> print expression.parseString('1 + 2 / 3 * 4 - -5')\n[['1', '+', ['2', '/', '3', '*', '4'], '-', ['-', '5']]]\n```\n\n# \u307e\u3068\u3081\n\n\u30c8\u30fc\u30af\u30f3\u306e\u7f85\u5217\u304b\u3089\u3001\u69cb\u6587\u6728\u3092\u4f5c\u308a\u307e\u3057\u305f\u3002BNF\u3067\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u308b\u6587\u6cd5\u306e\u4e00\u90e8\u3068\u3001\u6f14\u7b97\u5b50\u306e\u512a\u5148\u9806\u4f4d\u3092\u8003\u616e\u3057\u305f\u3001\u5f0f\u306e\u69cb\u6587\u6728\u306e\u751f\u6210\u3082\u884c\u3044\u307e\u3057\u305f\u3002\u4e00\u90e8\u3057\u304b\u5b9f\u88c5\u3057\u306a\u304b\u3063\u305f\u306e\u306f\u3001pyparsing\u3067\u306fAST\u3092\u76f4\u63a5\u751f\u6210\u3059\u308b\u65b9\u6cd5\u304c\u3042\u308a\u3001\u5b9f\u88c5\u3057\u3066\u3082\u6368\u3066\u308b\u3053\u3068\u306b\u306a\u308b\u306e\u3067\u3002[\u6b21\u56de\u306f\u5168\u6587\u6cd5\u3092\u30b5\u30dd\u30fc\u30c8\u3057\u305fAST\u306e\u751f\u6210](http://qiita.com/knoguchi/items/96fa352ff0db60ee2eee)\u3092\u884c\u3044\u307e\u3059\u3002\n\n\n# \u30bd\u30fc\u30b9\n\n```py:pl0_parser.py\n# -*- coding: utf-8 -*-\nfrom pyparsing import *\n\nLPAR, RPAR, COMMA, SEMICOLON, DOT = map(Suppress, \"(),;.\")\n\n# 1. reserved keyword\n(CONST, VAR, PROCEDURE, CALL, BEGIN, END, IF, THEN, WHILE, DO, ODD) = map(CaselessKeyword,\n\"CONST, VAR, PROCEDURE, CALL, BEGIN, END, IF, THEN, WHILE, DO, ODD\".replace(\",\", \"\").split())\nkeyword = MatchFirst((CONST, VAR, PROCEDURE, CALL, BEGIN, END, IF, THEN, WHILE, DO, ODD))\n\n# 2. identifier\nident = ~keyword + Word(alphas, alphanums + \"_\")\n\n# 3. expression\nnumber = Regex(r\"\\d+(\\.\\d*)?([eE][+-]?\\d+)?\")\nUNARY, BINARY, TERNARY = 1, 2, 3\nfactor = ident | number\nexpression = infixNotation(\n    factor,\n    [\n        (oneOf(\"+ -\"), UNARY, opAssoc.RIGHT),  # \u7b26\u53f7\u306f\u6700\u512a\u5148\n        (oneOf(\"* /\"), BINARY, opAssoc.LEFT),  # \u639b\u3051\u7b97\u5272\u308a\u7b97\u306f\u8db3\u3057\u7b97\u5f15\u304d\u7b97\u3088\u308a\u512a\u5148\n        (oneOf(\"+ -\"), BINARY, opAssoc.LEFT),\n    ]\n)\n\n\n# 4. condition\n#condition = ODD + expression | expression + oneOf('= # < <= > >=') + expression\ncondition = infixNotation(\n    expression,\n    [\n     \t(ODD, UNARY, opAssoc.RIGHT),\n\t(oneOf(\"< <= > >=\"), BINARY, opAssoc.LEFT),\n\t(oneOf(\"= #\"), BINARY, opAssoc.LEFT),\n    ]\n)\n\n# 5. assignment\nassign_statement = ident + \":=\" + expression\n\n# 6. call\ncall_statement = CALL + ident\n\n# 7. if-then\nstatement = Forward()\nif_statement = IF + condition + THEN + statement\n\n# 8. while-do\nwhile_statement = WHILE + condition + DO + statement\n\n# 9. statement\nstatement << Optional(assign_statement\n                      | call_statement\n                      | BEGIN + statement + ZeroOrMore(SEMICOLON + statement) + END\n                      | if_statement\n                      | while_statement\n)\n\n# 10. const\nconst = CONST + Group(Group(ident + \"=\" + number) + ZeroOrMore(COMMA + ident + \"=\" + number)) + SEMICOLON\n\n# 11. var\nvar = VAR + Group(ident + ZeroOrMore(COMMA + ident)) + SEMICOLON\n\n# 12. procedure\nblock = Forward()\nprocedure = PROCEDURE + ident + SEMICOLON + block + SEMICOLON\n\n# 13. block\nblock << Optional(const) + Optional(var) + ZeroOrMore(procedure) + statement\n\n# 14. program\nprogram = block + DOT\n\nif __name__ == '__main__':\n    import sys\n    with open(sys.argv[1], 'r') as fp:\n        txt = fp.read()\n        print program.parseString(txt)\n\n", "tags": ["Python", "\u30b3\u30f3\u30d1\u30a4\u30e9", "\u69cb\u6587\u6728"]}