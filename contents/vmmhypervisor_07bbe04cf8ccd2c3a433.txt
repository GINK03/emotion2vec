{"context": " More than 1 year has passed since last update.\u968f\u6642\u66f4\u65b0\n\nCriterion\u3068\u306f\nC/C++\u8a00\u8a9e\u7528\u306e\u30e6\u30cb\u30c3\u30c8\u30c6\u30b9\u30c8\u30d5\u30ec\u30fc\u30e0\u30ef\u30fc\u30af\n\n\u516c\u5f0f\n\n\nhttps://github.com/Snaipe/Criterion\n\n\n\u516c\u5f0f\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\n\n\nhttp://criterion.readthedocs.org/en/master/\n\n\n\u672c\u8a18\u4e8b\u4e2d\u306e\u30c6\u30b9\u30c8\u30b3\u30fc\u30c9\u7b49\n\n\nhttps://github.com/thombashi/CriterionSample\n\n\n\n\nInstllation\n\n\u30d0\u30a4\u30ca\u30ea\u304b\u3089\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\nhttps://github.com/Snaipe/Criterion/releases\n\u4eca\u56de\u306fLinux\u7248(debian8\u3067\u5b9f\u884c)\u3092\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3059\u308b\u3002\nOSX/Windows\u7248\u7528\u306e\u30d0\u30a4\u30ca\u30ea\u3082\u3042\u308b\u3002\n$ wget https://github.com/Snaipe/Criterion/releases/download/v2.2.0/criterion-v2.2.0-linux-x86_64.tar.bz2\n$ tar xvf criterion-v2.2.0-linux-x86_64.tar.bz2\n$ ls criterion-v2.2.0/\ninclude/  lib/  share/\n$ mv criterion-v2.2.0/include/criterion/ /usr/include/\n$ mv criterion-v2.2.0/lib/libcriterion.so /usr/lib/\n\n\n\u30bd\u30fc\u30b9\u304b\u3089\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\n\u30bd\u30fc\u30b9\u304b\u3089\u30d3\u30eb\u30c9\u3057\u3066\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3059\u308b\u5834\u5408\u306f\u4e0b\u8a18\u3092\u53c2\u7167\u3002\nhttp://criterion.readthedocs.org/en/master/setup.html\n\nSample\u3092\u52d5\u304b\u3059\n\n\u30c6\u30b9\u30c8\u30b3\u30fc\u30c9\nhttps://github.com/Snaipe/Criterion/blob/bleeding/samples/simple.c\n\nsimple.c\n#include <criterion/criterion.h>\n\nTest(misc, failing) {\n    cr_assert(0);\n}\n\nTest(misc, passing) {\n    cr_assert(1);\n}\n\n\n\n\u30b3\u30f3\u30d1\u30a4\u30eb\n\u30b3\u30f3\u30d1\u30a4\u30eb\u6642\u306bCriterion\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u30ea\u30f3\u30af\u3059\u308b\u3002\n\ncompile\ngcc -o test simple.c -lcriterion\n\n\n\n\u30c6\u30b9\u30c8\u5b9f\u884c\n\u5b9f\u884c\u30d5\u30a1\u30a4\u30eb\u3092\u8d77\u52d5\u3059\u308c\u3070\u30c6\u30b9\u30c8\u304c\u8d70\u308b\u3002\n\u5b9f\u884c\u30d5\u30a1\u30a4\u30eb\u306b\u306f\u30c7\u30d5\u30a9\u30eb\u30c8\u3067\u30aa\u30d7\u30b7\u30e7\u30f3\u304c\u4ed8\u4e0e\u3055\u308c\u308b\u3002\n\nhelp\n./test -h\nTests compiled with Criterion v2.2.0\n\nusage: ./test OPTIONS\noptions:\n    -h or --help: prints this message\n    -q or --quiet: disables all logging\n    -v or --version: prints the version of criterion these tests have been linked against\n    -l or --list: prints all the tests in a list\n    -jN or --jobs N: use N concurrent jobs\n    -f or --fail-fast: exit after the first failure\n    --ascii: don't use fancy unicode symbols or colors in the output\n    -S or --short-filename: only display the base name of the source file on a failure\n    --pattern [PATTERN]: run tests matching the given pattern\n    --tap[=FILE]: writes TAP report in FILE (no file or \"-\" means stderr)\n    --xml[=FILE]: writes XML report in FILE (no file or \"-\" means stderr)\n    --always-succeed: always exit with 0\n    --no-early-exit: do not exit the test worker prematurely after the test\n    --verbose[=level]: sets verbosity to level (1 by default)\n    -OP:F or --output=PROVIDER=FILE: write test report to FILE using the specified provider\n\n\n\n\u30c6\u30b9\u30c8\u5b9f\u884c\u7d50\u679c\n$ ./test\n[----] simple.c:4: Assertion failed: The expression 0 is false.\n[FAIL] misc::failing: (0.00s)\n[====] Synthesis: Tested: 2 | Passing: 1 | Failing: 1 | Crashing: 0\n\n\n\n\u30a2\u30b5\u30fc\u30b7\u30e7\u30f3\n\u30a2\u30b5\u30fc\u30b7\u30e7\u30f3\u7528\u306e\u95a2\u6570\u4e00\u89a7\u306f\u4ee5\u4e0b\u306b\u8a18\u8f09\u3055\u308c\u3066\u3044\u308b\u3002\nhttp://criterion.readthedocs.org/en/master/assert.html\n\nassert/expect\u306e\u9055\u3044\n\u30a2\u30b5\u30fc\u30b7\u30e7\u30f3\u95a2\u6570\u4e00\u89a7\u306b\u306fcr_assert_xx\u306e\u307f\u8a18\u8f09\u3055\u308c\u3066\u3044\u308b\u304c\u3001assert\u306e\u7b87\u6240\u306e\u307fexpect\u3068\u306a\u3063\u305f\ncr_expect_xx\u3082\u3042\u308b(\u516c\u5f0f\u306b\u3082\u8aac\u660e\u3042\u308a)\u3002\u4e21\u8005\u306e\u9055\u3044\u306f\u4ee5\u4e0b\u3002\n\nassert: \u6761\u4ef6\u306b\u304b\u304b\u3063\u305f\u6642\u70b9\u3067\u30c6\u30b9\u30c8\u3092\u6b62\u3081\u308b\nexpect: \u6761\u4ef6\u306b\u304b\u304b\u3063\u3066\u3082\u30c6\u30b9\u30c8\u3092\u7d99\u7d9a\u3059\u308b\n\nhttp://criterion.readthedocs.org/en/master/starter.html#asserting-things\n\nassert/expect\u306esample\nhttps://github.com/Snaipe/Criterion/blob/bleeding/samples/asserts.c\n\u3088\u308a\u4e00\u90e8\u629c\u7c8b\u3002\n\nassert.c\n#include <criterion/criterion.h>\n\nTest(asserts, base) {\n    cr_expect(false, \"assert is fatal, expect isn't\");\n    cr_assert(false, \"This assert runs\");\n    cr_assert(false, \"This does not\");\n}\n\n\ncr_<assert/expect>_xxx\u95a2\u6570\u306e\u5f15\u6570\u306e\u6700\u5f8c\u306f\u30d5\u30a9\u30fc\u30de\u30c3\u30c8\u6587\u5b57\u5217\u3068\u306a\u3063\u3066\u3044\u308b(\u5168\u95a2\u6570\u5171\u901a)\u3002\n\u6307\u5b9a\u3057\u305f\u30d5\u30a9\u30fc\u30de\u30c3\u30c8\u6587\u5b57\u5217\u306f\u30a2\u30b5\u30fc\u30b7\u30e7\u30f3\u306b\u5f15\u3063\u304b\u304b\u308b\u3068\u51fa\u529b\u3055\u308c\u308b(\u304b\u304b\u3089\u306a\u3044\u5834\u5408\u306f\u4f55\u3082\u51fa\u306a\u3044)\u3002\n\u3053\u308c\u3092\u5b9f\u884c\u3059\u308b\u3068\u3001\u4ee5\u4e0b\u306e\u7d50\u679c\u3068\u306a\u308b\u3002\n./test\n[----] assert.c:4: Assertion failed: assert is fatal, expect isn't\n[----] assert.c:5: Assertion failed: This assert runs\n[FAIL] asserts::base: (0.00s)\n[====] Synthesis: Tested: 1 | Passing: 0 | Failing: 1 | Crashing: 0\n\ncr_expect(false, \"assert is fatal, expect isn't\")\u306fassert\u304c\u51fa\u308b\u304c\u3001\u7d99\u7d9a\u3059\u308b\u3002\ncr_assert(false, \"This assert runs\")\u3067\u3082assert\u304c\u51fa\u3066\u3001\u3053\u3053\u3067\u6b62\u307e\u308b\u3002\ncr_assert(false, \"This does not\")\u306f\u5b9f\u884c\u3055\u308c\u306a\u3044\u3002\n\n\u5225\u3005\u306e\u30c6\u30b9\u30c8\u306b\u3057\u305f\u5834\u5408\n#include <criterion/criterion.h>\n\nTest(asserts, first) {\n    cr_expect(false, \"assert is fatal, expect isn't\");\n}\n\nTest(asserts, second) {\n    cr_assert(false, \"This assert runs\");\n}\n\nTest(asserts, third) {\n    cr_assert(false, \"This does not\");\n}\n\n\u2191\u306e\u3088\u3046\u306b\u30c6\u30b9\u30c8\u6bce\u306b\u5206\u3051\u305f\u5834\u5408\u306f\u5168\u3066\u5b9f\u884c\u3055\u308c\u308b\u3002\n./test --verbose\n[----] Criterion v2.2.0\n[====] Running 3 tests from asserts:\n[RUN ] asserts::first\n[----] assertion.c:4: Assertion failed: assert is fatal, expect isn't\n[FAIL] asserts::first: (0.00s)\n[RUN ] asserts::second\n[----] assertion.c:8: Assertion failed: This assert runs\n[FAIL] asserts::second: (0.00s)\n[RUN ] asserts::third\n[----] assertion.c:12: Assertion failed: This does not\n[FAIL] asserts::third: (0.00s)\n[====] Synthesis: Tested: 3 | Passing: 0 | Failing: 3 | Crashing: 0\n\n\n\u30c6\u30b9\u30c8\u7d50\u679c\u51fa\u529b\n\n\u8a73\u7d30\u51fa\u529b(--verbose)\n\u30c6\u30b9\u30c8\u5b9f\u884c\u6642\u306b--verbose\u30aa\u30d7\u30b7\u30e7\u30f3\u3092\u4ed8\u3051\u3066\u5b9f\u884c\u3059\u308b\u3068\u3001\u500b\u3005\u306e\u30c6\u30b9\u30c8\u7d50\u679c\u304c\u51fa\u529b\u3055\u308c\u308b\u3002\n\n--verbose\u30aa\u30d7\u30b7\u30e7\u30f3\u4ed8\u304d\u5b9f\u884c\u7d50\u679c\n$ ./test --verbose\n[----] Criterion v2.2.0\n[====] Running 2 tests from misc:\n[RUN ] misc::passing\n[RUN ] misc::failing\n[PASS] misc::passing: (0.00s)\n[----] /home/tmp/criterion/sample/simple.c:4: Assertion failed: The expression 0 is false.\n[FAIL] misc::failing: (0.00s)\n[====] Synthesis: Tested: 2 | Passing: 1 | Failing: 1 | Crashing: 0\n\n\n--verbose[=level]: sets verbosity to level (1 by default)\u3068\u3042\u308b\u304c\u3001\n\u5024\u3092\u5909\u3048\u3066\u3082\u51fa\u529b\u306b\u5dee\u306f\u898b\u3089\u308c\u306a\u304b\u3063\u305f\u3002\n\nXML\u51fa\u529b(--xml)\n\u30c6\u30b9\u30c8\u5b9f\u884c\u6642\u306b--xml\u30aa\u30d7\u30b7\u30e7\u30f3\u3092\u4ed8\u3051\u3066\u5b9f\u884c\u3059\u308b\u3053\u3068\u3067\u3001\nJInit XML\u5f62\u5f0f\u3067\u7d50\u679c\u51fa\u304c\u3067\u304d\u308b\u3002\n--xml\u3060\u3051\u3067\u5b9f\u884c\u3057\u305f\u5834\u5408\u306f\u6a19\u6e96\u30a8\u30e9\u30fc\u51fa\u529b\u306b\u51fa\u529b\u3055\u308c\u308b\u3002\n--xml=<file\u3000path>\u3068\u3057\u3066\u5b9f\u884c\u3059\u308b\u3068\u3001XML\u3092\u6307\u5b9a\u30d5\u30a1\u30a4\u30eb\u306b\u51fa\u529b\u3067\u304d\u308b\u3002\nJenkins\u7b49\u306eCI\u30c4\u30fc\u30eb\u3068\u9023\u643a\u3055\u305b\u308b\u3068\u304d\u306b\u6709\u7528\u305d\u3046\u3002\n\n--xml\u30aa\u30d7\u30b7\u30e7\u30f3\u4ed8\u304d\u5b9f\u884c\u7d50\u679c\n$ ./test --xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!-- Tests compiled with Criterion v2.2.0 -->\n<testsuites name=\"Criterion Tests\" tests=\"2\" failures=\"1\" errors=\"0\" disabled=\"0\">\n  <testsuite name=\"misc\" tests=\"2\" failures=\"1\" errors=\"0\" disabled=\"0\" skipped=\"0\">\n    <testcase name=\"passing\" assertions=\"1\" status=\"PASSED\">\n    </testcase>\n    <testcase name=\"failing\" assertions=\"1\" status=\"FAILED\">\n      <failure type=\"assert\" message=\"1 assertion(s) failed.\">simple.c:4: The expression 0 is false.&#10;</failure>\n    </testcase>\n  </testsuite>\n</testsuites>\n\n\n\n\u30c6\u30b9\u30c8\u5b9f\u884c\u9806\n\u30c7\u30d5\u30a9\u30eb\u30c8\u3067\u5b9f\u884c\u3059\u308b\u3068\u3001\u4e26\u5217\u3067\u30c6\u30b9\u30c8\u304c\u5b9f\u884c\u3055\u308c\u308b\u3002\n(\u5b9f\u884c\u6bce\u306b\u30c6\u30b9\u30c8\u30ed\u30b0\u306e\u51fa\u529b\u9806\u304c\u5909\u308f\u308b)\n\n\u30c7\u30d5\u30a9\u30eb\u30c8\u5b9f\u884c\u305d\u306e1\n$ ./test --verbose\n[----] Criterion v2.2.0\n[====] Running 2 tests from misc:\n[RUN ] misc::failing\n[----] simple.c:4: Assertion failed: The expression 0 is false.\n[FAIL] misc::failing: (0.00s)\n[RUN ] misc::passing\n[PASS] misc::passing: (0.00s)\n[====] Synthesis: Tested: 2 | Passing: 1 | Failing: 1 | Crashing: 0\n\n\n\n\u30c7\u30d5\u30a9\u30eb\u30c8\u5b9f\u884c\u305d\u306e2\n$ ./test --verbose\n[----] Criterion v2.2.0\n[====] Running 2 tests from misc:\n[RUN ] misc::failing\n[RUN ] misc::passing\n[PASS] misc::passing: (0.00s)\n[----] simple.c:4: Assertion failed: The expression 0 is false.\n[FAIL] misc::failing: (0.00s)\n[====] Synthesis: Tested: 2 | Passing: 1 | Failing: 1 | Crashing: 0\n\n\n--no-early-exit\u30aa\u30d7\u30b7\u30e7\u30f3\u3068-j1\u30aa\u30d7\u30b7\u30e7\u30f3\u3092\u4ed8\u3051\u3066\u5b9f\u884c\u3059\u308b\u3068\u3001\u5b9f\u884c\u9806\u304c\u5b9f\u884c\u6bce\u306b\u540c\u3058\u306b\u306a\u308b\u3002\n./test --verbose -j1 --no-early-exit\n[----] Criterion v2.2.0\n[====] Running 2 tests from misc:\n[RUN ] misc::failing\n[----] simple.c:4: Assertion failed: The expression 0 is false.\n[FAIL] misc::failing: (0.00s)\n[RUN ] misc::passing\n[PASS] misc::passing: (0.00s)\n[====] Synthesis: Tested: 2 | Passing: 1 | Failing: 1 | Crashing: 0\n\n\u500b\u4eba\u7684\u306b\u958b\u767a\u4e2d\u306f\u30ed\u30b0\u304c\u9806\u756a\u306b\u51fa\u305f\u65b9\u304c\u5b09\u3057\u3044\u306e\u3067\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u8d77\u52d5\u30b9\u30af\u30ea\u30d7\u30c8\u3092\u4f7f\u3046\u3002\n\nrun_test.sh\n#!/bin/sh\n\nTEST_BIN=\"./test\"\n\n$TEST_BIN --verbose -j1 --no-early-exit --xml=result.xml\n\n\n\n\u7570\u5e38\u7cfb\u30c6\u30b9\u30c8\n\u30d7\u30ed\u30b0\u30e9\u30e0\u4e2d\u3067\u7570\u5e38\u7d42\u4e86\u3059\u308b\u5834\u5408\u3092\u30c6\u30b9\u30c8\u3059\u308b\u65b9\u6cd5\u3002\n\u516c\u5f0f\u3067\u306f\u3053\u306e\u3042\u305f\u308a\u3002\nhttp://criterion.readthedocs.org/en/master/starter.html\n\u4f8b\u3068\u3057\u3066\u3001\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u548c\u304c0\u3060\u3063\u305f\u3089exit\u3001\u8ca0\u3060\u3063\u305f\u3089abort\u3059\u308b\u3088\u3046\u306a\n\u6050\u308d\u3057\u3044dangerous_add\u95a2\u6570\u304c\u3042\u3063\u305f\u3068\u3057\u3066\u3001\u3053\u308c\u3092\u30c6\u30b9\u30c8\u3059\u308b\u3002\n\ndangerous_add.h\nint dangerous_add(int lhs, int rhs);\n\n\n\ndangerous_add.c\n#include <stdlib.h>\n#include \"dangerous_add.h\"\n\nint dangerous_add(int lhs, int rhs)\n{\n    int sum;\n\n    sum = lhs + rhs;\n\n    if (sum == 0)\n        exit(1);\n\n    if (sum < 0)\n        abort();\n\n    return sum;\n}\n\n\n\u30c6\u30b9\u30c8\u30b3\u30fc\u30c9\u306f\u4ee5\u4e0b\u306e\u3042\u305f\u308a\nhttps://github.com/thombashi/CriterionSample/tree/master/test_abnormal\n\nexit\u3059\u308b\u5834\u5408\u306e\u30c6\u30b9\u30c8(.exit_code)\n\u30c6\u30b9\u30c8\u306e.exit_code\u306b\u671f\u5f85\u3059\u308b\u7d42\u4e86\u30b3\u30fc\u30c9\u3092\u6307\u5b9a\u3059\u308b\u3002\n\u5b9f\u969b\u306e\u7d42\u4e86\u30b3\u30fc\u30c9\u3068\u4e00\u81f4\u3057\u3066\u3044\u308c\u3070\u30c6\u30b9\u30c8\u6210\u529f\u3068\u306a\u308b\u3002\n\n.exit_code\u6210\u529f\u4f8b\n\nexit_code\u6210\u529f\u4f8b\n#include <criterion/criterion.h>\n#include \"dangerous_add.h\"\n\nTest(dangerous_add, test_exit, .exit_code=1) {\n    dangerous_add(1, -1);\n}\n\n\n\nexit_code\u6210\u529f\u4f8b\u5b9f\u884c\u7d50\u679c\n$ ./test --verbose\n[----] Criterion v2.2.0\n[====] Running 2 tests from dangerous_add:\n[RUN ] dangerous_add::hoge\n[RUN ] dangerous_add::test_exit\n[PASS] dangerous_add::test_exit: (0.00s)\n[PASS] dangerous_add::hoge: (0.00s)\n[====] Synthesis: Tested: 2 | Passing: 2 | Failing: 0 | Crashing: 0\n\n\n\n.exit_code\u5931\u6557\u4f8b\n\u6307\u5b9a\u3057\u305f.exit_code\u304c\u5b9f\u969b\u306e\u7d42\u4e86\u30b3\u30fc\u30c9\u3068\u7570\u306a\u3063\u3066\u3044\u305f\u308a\u3001\n.exit_code\u304c\u6307\u5b9a\u3055\u308c\u3066\u3044\u306a\u3044\u30c6\u30b9\u30c8\u3067exit\u3067\u7d42\u4e86\u3057\u305f\u308a\u3059\u308b\u3068\u30c6\u30b9\u30c8\u5931\u6557\u3068\u306a\u308b\u3002\n\nexit_code\u5931\u6557\u4f8b\n#include <criterion/criterion.h>\n#include \"dangerous_add.h\"\n\nTest(dangerous_add, test_fail_1, .exit_code=2, .description=\"expected exit code == 2\") {\n    dangerous_add(1, -1);\n}\n\nTest(dangerous_add, test_fail_2, .description=\"without '.exit_code'\") {\n    dangerous_add(1, -1);\n}\n\n\n\nexit_code\u5931\u6557\u4f8b\u51fa\u529b\n$ ./test --verbose\n[----] Criterion v2.2.0\n[====] Running 2 tests from dangerous_add:\n[RUN ] dangerous_add::test_fail_1\n[RUN ]   expected exit code == 2\n[RUN ] dangerous_add::test_fail_2\n[RUN ]   without '.exit_code'\n[FAIL] dangerous_add::test_fail_1: (0.00s)\n[----] Warning! The test `dangerous_add::test_fail_2` exited during its setup or teardown.\n[====] Synthesis: Tested: 2 | Passing: 0 | Failing: 2 | Crashing: 1\n\n\n.description\u3092\u6307\u5b9a\u3059\u308b\u3068\u30c6\u30b9\u30c8\u4e2d\u306b\u51fa\u529b\u3055\u308c\u308b\u3002\n\nsignal\u3092\u6295\u3052\u308b\u5834\u5408\u306e\u30c6\u30b9\u30c8(.signal)\n\u30c6\u30b9\u30c8\u306e.signal\u306b\u671f\u5f85\u3059\u308bsignal\u3092\u6307\u5b9a\u3059\u308b\u3002\n\u5b9f\u969b\u306esignal\u3068\u4e00\u81f4\u3057\u3066\u3044\u308c\u3070\u30c6\u30b9\u30c8\u6210\u529f\u3068\u306a\u308b\u3002\n\n.signal\u6210\u529f\u4f8b\n\nsignal\u6210\u529f\u4f8b\n#include <signal.h>\n#include <criterion/criterion.h>\n#include \"dangerous_add.h\"\n\nTest(dangerous_add, test_passed, .signal=SIGABRT, .description=\"expected signal == SIGABRT\") {\n    dangerous_add(-1, -1);\n}\n\n\n\nsignal\u6210\u529f\u4f8b\u51fa\u529b\n$ ./test --verbose\n[----] Criterion v2.2.0\n[====] Running 1 test from dangerous_add:\n[RUN ] dangerous_add::test_passed\n[RUN ]   expected signal == SIGABRT\n[PASS] dangerous_add::test_passed: (0.00s)\n[====] Synthesis: Tested: 1 | Passing: 1 | Failing: 0 | Crashing: 0\n\n\n\n.signal\u5931\u6557\u4f8b\n\u6307\u5b9a\u3057\u305f.signal\u304c\u5b9f\u969b\u306esignal\u3068\u7570\u306a\u3063\u3066\u3044\u305f\u308a\u3001\n.signal\u304c\u6307\u5b9a\u3055\u308c\u3066\u3044\u306a\u3044\u30c6\u30b9\u30c8\u3067signal\u6295\u3052\u3066\u7d42\u4e86\u3057\u305f\u308a\u3059\u308b\u3068\u30c6\u30b9\u30c8\u5931\u6557\u3068\u306a\u308b\u3002\n\nsignal\u5931\u6557\u4f8b\n#include <signal.h>\n#include <criterion/criterion.h>\n#include \"dangerous_add.h\"\n\nTest(dangerous_add, test_fail_1, .signal=SIGSEGV, .description=\"expected signal == SIGSEGV\") {\n    dangerous_add(-1, -1);\n}\n\nTest(dangerous_add, test_fail_2, .description=\"without '.signal'\") {\n    dangerous_add(-1, -1);\n}\n\n\n\nsignal\u5931\u6557\u4f8b\u51fa\u529b\n./test --verbose\n[----] Criterion v2.2.0\n[====] Running 2 tests from dangerous_add:\n[RUN ] dangerous_add::test_fail_2\n[RUN ]   without '.signal'\n[RUN ] dangerous_add::test_fail_1\n[RUN ]   expected signal == SIGSEGV\n[FAIL] dangerous_add::test_fail_1: (0.00s)\n[----] /home/criterion/sample/abnormal/test_signal.c:16: Unexpected signal caught below this line!\n[FAIL] dangerous_add::test_fail_2: CRASH!\n[====] Synthesis: Tested: 2 | Passing: 0 | Failing: 2 | Crashing: 1\n\n\n\nParameterized tests\n\u3042\u308b\u30d1\u30e9\u30e1\u30fc\u30bf\u306b\u8272\u3005\u306a\u5024\u3092\u4e0e\u3048\u3066\u30c6\u30b9\u30c8\u3092\u5b9f\u884c\u3057\u305f\u3044\u5834\u5408\u306b\u4f7f\u3046\u3002\n\n\u516c\u5f0f\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\n\n\nUsing parameterized tests \u2014 Criterion 2.2.0 documentation\nhttp://criterion.readthedocs.org/en/master/parameterized.html\n\n\n\u516c\u5f0f\u30b5\u30f3\u30d7\u30eb\n\n\nhttps://github.com/Snaipe/Criterion/blob/bleeding/samples/parameterized.c\n\n\n\n\u4ee5\u4e0b\u3001\u7c21\u5358\u306a\u30d7\u30ed\u30b0\u30e9\u30e0\u3067\u8aac\u660e\u3059\u308b\u3002\n\n\u30c6\u30b9\u30c8\u5bfe\u8c61\u30d7\u30ed\u30b0\u30e9\u30e0\n2\u5024\u306e\u548c\u3092\u8fd4\u3059\u3060\u3051\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u30c6\u30b9\u30c8\u3059\u308b\u3002\nhttps://github.com/thombashi/CriterionSample/tree/master/test_parameterize\n\nheader.h\nint add(int lhs, int rhs);\n\n\n\nadd.c\n#include \"add.h\"\n\nint add(int lhs, int rhs)\n{\n    return lhs + rhs;\n}\n\n\n\ntest_parametize.c\n#include <stdio.h>\n#include <criterion/parameterized.h>\n#include \"add.h\"\n\nstruct parameter_tuple {\n    int lhs;\n    int rhs;\n    int expected;\n};\n\nParameterizedTestParameters(parameterized_test, add) {\n    static struct parameter_tuple params[] = {\n        {1, 1, 2},\n        {-1, -1, -2},\n        {-100, 200, 100},\n    };\n\n    return cr_make_param_array(\n        struct parameter_tuple,\n        params, sizeof (params) / sizeof (struct parameter_tuple));\n}\n\nParameterizedTest(struct parameter_tuple *tup, parameterized_test, add) {\n    int result;\n\n    fprintf(stdout,\n        \"Test: lhs=%d, rhs=%d, expected=%d\\n\", \n        tup->lhs, tup->rhs, tup->expected);\n    fflush(stdout);\n\n    result = add(tup->lhs, tup->rhs);\n    cr_expect_eq(\n        result, tup->expected,\n        \"Failed: lhs=%d, rhs=%d, result=%d, expected=%d\\n\", \n        tup->lhs, tup->rhs, result, tup->expected);\n}\n\n\n\n\u8aac\u660e\nstruct parameter_tuple\n\u30d1\u30e9\u30e1\u30fc\u30bf\u306e\u7d44\u3092\u5b9a\u7fa9\u3059\u308b\u69cb\u9020\u4f53\u3002\nParameterizedTestParameters(parameterized_test, add)\n\u30d1\u30e9\u30e1\u30fc\u30bf\u306e\u5024\u306e\u7d44\u307f\u5408\u308f\u305b\u3092\u5b9a\u7fa9\u3059\u308b\u3002parameterized_test, add\u304c\u30c6\u30b9\u30c8\u8b58\u5225\u5b50\u3068\u306a\u308b\n(\u524d\u8005\u304ctest suite\u540d\u3001\u5f8c\u8005\u304c\u30c6\u30b9\u30c8\u540d)\u3002\n\u30c6\u30b9\u30c8\u8b58\u5225\u5b50\u3067\u5bfe\u306b\u306a\u308bParameterizedTest\u3068\u7d50\u3073\u3064\u304f\u3002\nreturn cr_make_param_array(<\u30d1\u30e9\u30e1\u30fc\u30bf\u69cb\u9020\u4f53>, <\u30d1\u30e9\u30e1\u30fc\u30bf\u914d\u5217\u3078\u306e\u30dd\u30a4\u30f3\u30bf>, <\u30d1\u30bf\u30fc\u30f3\u6570>)\nParameterizedTestParameters\u306e\u8fd4\u308a\u5024\u3068\u3059\u308b\u3002\u5f15\u6570\u306e\u610f\u5473\u306f\u2191\u3002\nParameterizedTest(struct parameter_tuple *tup, parameterized_test, add)\n\u30c6\u30b9\u30c8\u8a18\u8ff0\u90e8\u5206\u3002\nstruct parameter_tuple *tup\u306f\u30c6\u30b9\u30c8\u306b\u4e0e\u3048\u3089\u308c\u308b\u5f15\u6570\u3002\nParameterizedTestParameters\u3067\u5b9a\u7fa9\u3057\u305f\u30d1\u30e9\u30e1\u30fc\u30bf\u914d\u5217\u304c1\u3064\u305a\u3064\u6e21\u3055\u308c\u308b\u3002\nparameterized_test, add\u306fParameterizedTestParameters\u3068\u7d50\u3073\u3064\u3051\u308b\u305f\u3081\u306e\u30c6\u30b9\u30c8\u8b58\u5225\u5b50\u3002\nexpect/assert\u306f\u901a\u5e38\u306e\u30c6\u30b9\u30c8\u3068\u540c\u7b49\u306e\u3082\u306e\u304c\u4f7f\u7528\u3067\u304d\u308b\u3002\n\n\u30c6\u30b9\u30c8\u5b9f\u884c\u7d50\u679c\n$ ./test --verbose --no-early-exit -j1\n[----] Criterion v2.2.0\n[====] Running 1 test from parameterized_test:\n[RUN ] parameterized_test::add\nTest: lhs=1, rhs=1, expected=2\n[PASS] parameterized_test::add: (0.00s)\n[RUN ] parameterized_test::add\nTest: lhs=-1, rhs=-1, expected=-2\n[PASS] parameterized_test::add: (0.00s)\n[RUN ] parameterized_test::add\nTest: lhs=-100, rhs=200, expected=100\n[PASS] parameterized_test::add: (0.00s)\n[----] Writing xml report in `result.xml`.\n[====] Synthesis: Tested: 3 | Passing: 3 | Failing: 0 | Crashing: 0\n\n\n\u7559\u610f\u70b9\n\ncr_assert_xxx\n\nParameterize test\u3067assert\u306b\u304b\u304b\u3063\u305f\u5834\u5408\u3067\u3082\u3001\u5f8c\u7d9a\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u306e\u30c6\u30b9\u30c8\u306f\u7d99\u7d9a\u3059\u308b\u3002\n\nXML\u51fa\u529b\nParameterize test\u3067XML\u51fa\u529b\u3059\u308b\u3068\u3001\u6210\u529f\u6642\u306b\u306f\u30c6\u30b9\u30c8\u30b1\u30fc\u30b9\u306b\u5bfe\u5fdc\u3059\u308b\u30d1\u30e9\u30e1\u30fc\u30bf\u304c\u308f\u304b\u3089\u306a\u3044\u3002\n(\u5931\u6557\u6642\u306fcr_assert/expect_xxx\u306e\u5f15\u6570\u306b\u6307\u5b9a\u3057\u305f\u30d5\u30a9\u30fc\u30de\u30c3\u30c8\u6587\u5b57\u5217\u304c\u51fa\u529b\u3055\u308c\u308b)\u3002\n\u6210\u529f\u6642\u306b\u3082\u51fa\u529b\u3059\u308b\u65b9\u6cd5\u304c\u3042\u308b\u306e\u304b\u3082\u3057\u308c\u306a\u3044\u3002\n\n\u6210\u529f\u6642\u306eXML\u51fa\u529b\n./test --verbose --no-early-exit -j1 --xml=result.xml\n\n\n\nresult.xml(\u6210\u529f\u6642)\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!-- Tests compiled with Criterion v2.2.0 -->\n<testsuites name=\"Criterion Tests\" tests=\"3\" failures=\"0\" errors=\"0\" disabled=\"0\">\n  <testsuite name=\"parameterized_test\" tests=\"3\" failures=\"0\" errors=\"0\" disabled=\"0\" skipped=\"0\">\n    <testcase name=\"add\" assertions=\"1\" status=\"PASSED\">\n    </testcase>\n    <testcase name=\"add\" assertions=\"1\" status=\"PASSED\">\n    </testcase>\n    <testcase name=\"add\" assertions=\"1\" status=\"PASSED\">\n    </testcase>\n  </testsuite>\n</testsuites>\n\n\n\u540c\u3058\u30c6\u30b9\u30c8\u3092cr_expect_eq\u304b\u3089cr_expect_neq\u306b\u3057\u3066\u3001\u308f\u3056\u3068\u5931\u6557\u3055\u305b\u308b\u3002\n\u3059\u308b\u3068\u3001\u30c6\u30b9\u30c8\u30b1\u30fc\u30b9\u306e\u51fa\u529b\u306bfailure\u30bf\u30b0\u304c\u8ffd\u52a0\u3055\u308c\u3001\u30d1\u30b9\u3068\u6a19\u6e96\u51fa\u529b\u304c\u8ffd\u52a0\u3055\u308c\u308b\u3002\n\nresult.xml(\u5931\u6557\u6642)\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!-- Tests compiled with Criterion v2.2.0 -->\n<testsuites name=\"Criterion Tests\" tests=\"3\" failures=\"3\" errors=\"0\" disabled=\"0\">\n  <testsuite name=\"parameterized_test\" tests=\"3\" failures=\"3\" errors=\"0\" disabled=\"0\" skipped=\"0\">\n    <testcase name=\"add\" assertions=\"1\" status=\"FAILED\">\n      <failure type=\"assert\" message=\"1 assertion(s) failed.\">test_parameterize.c:35: Failed: lhs=-100, rhs=200, result=100, expected=100&#10;</failure>\n    </testcase>\n    <testcase name=\"add\" assertions=\"1\" status=\"FAILED\">\n      <failure type=\"assert\" message=\"1 assertion(s) failed.\">test_parameterize.c:35: Failed: lhs=-1, rhs=-1, result=-2, expected=-2&#10;</failure>\n    </testcase>\n    <testcase name=\"add\" assertions=\"1\" status=\"FAILED\">\n      <failure type=\"assert\" message=\"1 assertion(s) failed.\">test_parameterize.c:35: Failed: lhs=1, rhs=1, result=2, expected=2&#10;</failure>\n    </testcase>\n  </testsuite>\n</testsuites>\n\n\n\n\u7d44\u307f\u5408\u308f\u305b\u30c6\u30b9\u30c8(Theory)\n\u30d1\u30e9\u30e1\u30fc\u30bf\u306e\u5024\u306e\u7d44\u307f\u5408\u308f\u305b\u3067\u30c6\u30b9\u30c8\u3092\u5b9f\u884c\u3059\u308b\u3002\n\u6a19\u6e96\u3067Parameterize test\u3084Theory\u306e\u3088\u3046\u306a\u6a5f\u80fd\u304c\u3042\u308b\u306e\u306f\u7d50\u69cb\u4fbf\u5229\u3002\n\n\u516c\u5f0f\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\n\n\nUsing theories \u2014 Criterion 2.2.0 documentation\nhttp://criterion.readthedocs.org/en/master/theories.html\n\n\n\u516c\u5f0f\u30b5\u30f3\u30d7\u30eb\n\u3000- https://github.com/Snaipe/Criterion/blob/bleeding/samples/theories.c\n\n\n\n\u30c6\u30b9\u30c8\u5bfe\u8c61\u30d7\u30ed\u30b0\u30e9\u30e0\n\ndangerous_add.c\nuint64_t dangerous_add_2(int lhs, int rhs)\n{\n    if (lhs < 0)\n        exit(1);\n\n    if (rhs < 0)\n        abort();\n\n    return lhs + rhs;\n}\n\n\n\ntest_theory.c\n#include <stdio.h>\n#include <stdint.h>\n#include <limits.h>\n#include <criterion/theories.h>\n#include \"dangerous_add.h\"\n\nTheoryDataPoints(theory_test, passing) = {\n    DataPoints(int, 0, -1, 1, INT_MAX, INT_MIN),\n    DataPoints(int, 0, -1, 1, INT_MAX, INT_MIN),\n};\n\nTheory((int lhs, int rhs), theory_test, passing) {\n    uint64_t result;\n\n    cr_assume_gt(lhs, 0);\n    cr_assume_gt(rhs, 0);\n\n    fprintf(stdout,\n        \"Test: lhs=%d, rhs=%d\\n\", \n        lhs, rhs);\n    fflush(stdout);\n\n    result = dangerous_add_2(lhs, rhs);\n    cr_assert_gt(\n        result, 0,\n        \"Failed: lhs=%d, rhs=%d, result=%d\\n\", \n        lhs, rhs, result);\n}\n\n\n\n\u8aac\u660e\nTheoryDataPoints(theory_test, passing)\n\u7d44\u307f\u5408\u308f\u305b\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u5b9a\u7fa9\u3059\u308b\u3002theory_test, passing\u304c\u30c6\u30b9\u30c8\u8b58\u5225\u5b50\u3068\u306a\u308b\n(\u524d\u8005\u304ctest suite\u540d\u3001\u5f8c\u8005\u304c\u30c6\u30b9\u30c8\u540d)\u3002\n\u30c6\u30b9\u30c8\u8b58\u5225\u5b50\u3067\u5bfe\u306b\u306a\u308bTheory\u3068\u7d50\u3073\u3064\u304f\u3002\nDataPoints(int, 0, -1, 1, INT_MAX, INT_MIN)\n\u4e00\u3064\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u306e\u578b\u3068\u3001\u53d6\u308a\u5f97\u308b\u5024\u3002\nTheory((int lhs, int rhs), theory_test, passing)\n\u30c6\u30b9\u30c8\u8a18\u8ff0\u90e8\u5206\u3002\n\u6700\u521d\u306e(int lhs, int rhs)\u306f\u500b\u3005\u306e\u30c6\u30b9\u30c8\u306b\u4e0e\u3048\u3089\u308c\u308b\u5f15\u6570\u3002\ntheory_test, passing\u306fTheoryDataPoints\u3068\u7d50\u3073\u3064\u3051\u308b\u305f\u3081\u306e\u30c6\u30b9\u30c8\u8b58\u5225\u5b50\u3002\ncr_assume_gt(lhs, 0);\n\u30c6\u30b9\u30c8\u5b9f\u884c\u306e\u524d\u63d0\u6761\u4ef6\u3002\u3053\u308c\u3092\u6e80\u305f\u3055\u306a\u3044\u30d1\u30e9\u30e1\u30fc\u30bf\u306e\u7d44\u307f\u5408\u308f\u305b\u306f\u30b9\u30ad\u30c3\u30d7\u3055\u308c\u308b\u3002\n\u4e0a\u8a18\u306flhs\u304c0\u4ee5\u4e0b\u306e\u5834\u5408\u306f\u30b9\u30ad\u30c3\u30d7\u3059\u308b\u3001\u3068\u3044\u3046\u610f\u5473\u3002\ncr_assume_gt\u4ee5\u5916\u306b\u3082cr_assume_xxx\u306f\u8272\u3005\u7a2e\u985e\u304c\u3042\u308b\u3002\n\u8a73\u7d30\u306f\u516c\u5f0f\u3092\u53c2\u7167\u3002\nexpect/assert\u306f\u901a\u5e38\u306e\u30c6\u30b9\u30c8\u3068\u540c\u7b49\u306e\u3082\u306e\u304c\u4f7f\u7528\u3067\u304d\u308b\u3002\n\n\u30c6\u30b9\u30c8\u5b9f\u884c\u7d50\u679c\n$./run_test.sh\n[----] Criterion v2.2.0\n[====] Running 1 test from theory_test:\nTest: lhs=1, rhs=1\nTest: lhs=2147483647, rhs=1\nTest: lhs=1, rhs=2147483647\nTest: lhs=2147483647, rhs=2147483647\n[RUN ] theory_test::add\n[PASS] theory_test::add: (0.00s)\n[----] Writing xml report in `result.xml`.\n[====] Synthesis: Tested: 1 | Passing: 1 | Failing: 0 | Crashing: 0\n\n\u30d1\u30e9\u30e1\u30fc\u30bf\u306e\u5024\u3068\u3057\u3066\u306f\u3001\u30de\u30a4\u30ca\u30b9\u3068\u306a\u308b\u5024\u3082\u3042\u308b\u304c\u3001\ncr_assume_gt\u306b\u3088\u3063\u3066\u30b9\u30ad\u30c3\u30d7\u3055\u308c\u3001lhs/rhs\u306e\u4e21\u65b9\u304c\n\u6b63\u3068\u306a\u308b\u30b1\u30fc\u30b9\u306e\u307f\u30c6\u30b9\u30c8\u304c\u5b9f\u65bd\u3055\u308c\u308b\u3002\n\nParameterize test\u3068\u306e\u4f7f\u3044\u5206\u3051\nTheory\u306fsmoke test\u3084\u6210\u5426\u5224\u5b9a\u304c\u5358\u7d14(BOOL\u5024\u304c\u623b\u308a\u5024\u306e\u5834\u5408\u3084\u7570\u5e38\u7cfb\u7b49)\u306a\u5024\u306e\u30c6\u30b9\u30c8\u306b\u5411\u3044\u3066\u3044\u308b\u3002\nTheory\u306f\u305d\u306e\u6027\u8cea\u4e0a\u3001\u7d50\u679c\u306e\u78ba\u8a8d\u7b49\u3001\u30d1\u30e9\u30e1\u30fc\u30bf\u306b\u5bfe\u5fdc\u3059\u308b\u51e6\u7406\u304c\u3084\u308a\u306b\u304f\u3044\u3002\n\u203bParameterize test\u3067\u51fa\u6765\u305f\u3088\u3046\u306a\u5165\u529b\u5024\u306b\u5bfe\u3059\u308b\u51fa\u529b\u30c1\u30a7\u30c3\u30af\u7b49\u306fTheory\u3067\u306f\u3067\u304d\u306a\u3044\n\u516c\u5f0f\u306b\u3082\u8aac\u660e\u304c\u3042\u308b\u306e\u3067\u305d\u3061\u3089\u3082\u3002\n\ncmake\u7528\u96db\u5f62\n\nCMakeList.txt\ncmake_minimum_required(VERSION 2.8)\n\nset(SOURCE_ROOT \"path to the source dir\")\n\ninclude_directories(\n    ${SOURCE_ROOT}/include\n)\n\nadd_executable(test\n    simple.c\n)\n\ntarget_link_libraries(test\n    criterion\n)\n\n\n\n\u968f\u6642\u66f4\u65b0\n\n# Criterion\u3068\u306f\nC/C++\u8a00\u8a9e\u7528\u306e\u30e6\u30cb\u30c3\u30c8\u30c6\u30b9\u30c8\u30d5\u30ec\u30fc\u30e0\u30ef\u30fc\u30af\n\n- \u516c\u5f0f\n - https://github.com/Snaipe/Criterion\n- \u516c\u5f0f\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\n - http://criterion.readthedocs.org/en/master/\n- \u672c\u8a18\u4e8b\u4e2d\u306e\u30c6\u30b9\u30c8\u30b3\u30fc\u30c9\u7b49\n - https://github.com/thombashi/CriterionSample\n\n\n# Instllation\n## \u30d0\u30a4\u30ca\u30ea\u304b\u3089\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\nhttps://github.com/Snaipe/Criterion/releases\n\u4eca\u56de\u306fLinux\u7248(debian8\u3067\u5b9f\u884c)\u3092\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3059\u308b\u3002\nOSX/Windows\u7248\u7528\u306e\u30d0\u30a4\u30ca\u30ea\u3082\u3042\u308b\u3002\n\n```console\n$ wget https://github.com/Snaipe/Criterion/releases/download/v2.2.0/criterion-v2.2.0-linux-x86_64.tar.bz2\n$ tar xvf criterion-v2.2.0-linux-x86_64.tar.bz2\n$ ls criterion-v2.2.0/\ninclude/  lib/  share/\n$ mv criterion-v2.2.0/include/criterion/ /usr/include/\n$ mv criterion-v2.2.0/lib/libcriterion.so /usr/lib/\n```\n\n## \u30bd\u30fc\u30b9\u304b\u3089\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\n\u30bd\u30fc\u30b9\u304b\u3089\u30d3\u30eb\u30c9\u3057\u3066\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3059\u308b\u5834\u5408\u306f\u4e0b\u8a18\u3092\u53c2\u7167\u3002\nhttp://criterion.readthedocs.org/en/master/setup.html\n\n\n# Sample\u3092\u52d5\u304b\u3059\n## \u30c6\u30b9\u30c8\u30b3\u30fc\u30c9\nhttps://github.com/Snaipe/Criterion/blob/bleeding/samples/simple.c\n\n```c:simple.c\n#include <criterion/criterion.h>\n\nTest(misc, failing) {\n    cr_assert(0);\n}\n\nTest(misc, passing) {\n    cr_assert(1);\n}\n```\n\n## \u30b3\u30f3\u30d1\u30a4\u30eb\n\u30b3\u30f3\u30d1\u30a4\u30eb\u6642\u306bCriterion\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u30ea\u30f3\u30af\u3059\u308b\u3002\n\n```console:compile\ngcc -o test simple.c -lcriterion\n```\n\n## \u30c6\u30b9\u30c8\u5b9f\u884c\n\u5b9f\u884c\u30d5\u30a1\u30a4\u30eb\u3092\u8d77\u52d5\u3059\u308c\u3070\u30c6\u30b9\u30c8\u304c\u8d70\u308b\u3002\n\u5b9f\u884c\u30d5\u30a1\u30a4\u30eb\u306b\u306f\u30c7\u30d5\u30a9\u30eb\u30c8\u3067\u30aa\u30d7\u30b7\u30e7\u30f3\u304c\u4ed8\u4e0e\u3055\u308c\u308b\u3002\n\n```text:help\n./test -h\nTests compiled with Criterion v2.2.0\n\nusage: ./test OPTIONS\noptions:\n    -h or --help: prints this message\n    -q or --quiet: disables all logging\n    -v or --version: prints the version of criterion these tests have been linked against\n    -l or --list: prints all the tests in a list\n    -jN or --jobs N: use N concurrent jobs\n    -f or --fail-fast: exit after the first failure\n    --ascii: don't use fancy unicode symbols or colors in the output\n    -S or --short-filename: only display the base name of the source file on a failure\n    --pattern [PATTERN]: run tests matching the given pattern\n    --tap[=FILE]: writes TAP report in FILE (no file or \"-\" means stderr)\n    --xml[=FILE]: writes XML report in FILE (no file or \"-\" means stderr)\n    --always-succeed: always exit with 0\n    --no-early-exit: do not exit the test worker prematurely after the test\n    --verbose[=level]: sets verbosity to level (1 by default)\n    -OP:F or --output=PROVIDER=FILE: write test report to FILE using the specified provider\n```\n\n```console:\u30c6\u30b9\u30c8\u5b9f\u884c\u7d50\u679c\n$ ./test\n[----] simple.c:4: Assertion failed: The expression 0 is false.\n[FAIL] misc::failing: (0.00s)\n[====] Synthesis: Tested: 2 | Passing: 1 | Failing: 1 | Crashing: 0\n```\n\n\n# \u30a2\u30b5\u30fc\u30b7\u30e7\u30f3\n\u30a2\u30b5\u30fc\u30b7\u30e7\u30f3\u7528\u306e\u95a2\u6570\u4e00\u89a7\u306f\u4ee5\u4e0b\u306b\u8a18\u8f09\u3055\u308c\u3066\u3044\u308b\u3002\nhttp://criterion.readthedocs.org/en/master/assert.html\n\n## assert/expect\u306e\u9055\u3044\n\u30a2\u30b5\u30fc\u30b7\u30e7\u30f3\u95a2\u6570\u4e00\u89a7\u306b\u306f`cr_assert_xx`\u306e\u307f\u8a18\u8f09\u3055\u308c\u3066\u3044\u308b\u304c\u3001`assert`\u306e\u7b87\u6240\u306e\u307f`expect`\u3068\u306a\u3063\u305f\n`cr_expect_xx`\u3082\u3042\u308b(\u516c\u5f0f\u306b\u3082\u8aac\u660e\u3042\u308a)\u3002\u4e21\u8005\u306e\u9055\u3044\u306f\u4ee5\u4e0b\u3002\n\n- assert: \u6761\u4ef6\u306b\u304b\u304b\u3063\u305f\u6642\u70b9\u3067\u30c6\u30b9\u30c8\u3092\u6b62\u3081\u308b\n- expect: \u6761\u4ef6\u306b\u304b\u304b\u3063\u3066\u3082\u30c6\u30b9\u30c8\u3092\u7d99\u7d9a\u3059\u308b\n\nhttp://criterion.readthedocs.org/en/master/starter.html#asserting-things\n\n## assert/expect\u306esample\nhttps://github.com/Snaipe/Criterion/blob/bleeding/samples/asserts.c\n\u3088\u308a\u4e00\u90e8\u629c\u7c8b\u3002\n\n```c:assert.c\n#include <criterion/criterion.h>\n\nTest(asserts, base) {\n    cr_expect(false, \"assert is fatal, expect isn't\");\n    cr_assert(false, \"This assert runs\");\n    cr_assert(false, \"This does not\");\n}\n```\n\n`cr_<assert/expect>_xxx`\u95a2\u6570\u306e\u5f15\u6570\u306e\u6700\u5f8c\u306f\u30d5\u30a9\u30fc\u30de\u30c3\u30c8\u6587\u5b57\u5217\u3068\u306a\u3063\u3066\u3044\u308b(\u5168\u95a2\u6570\u5171\u901a)\u3002\n\u6307\u5b9a\u3057\u305f\u30d5\u30a9\u30fc\u30de\u30c3\u30c8\u6587\u5b57\u5217\u306f\u30a2\u30b5\u30fc\u30b7\u30e7\u30f3\u306b\u5f15\u3063\u304b\u304b\u308b\u3068\u51fa\u529b\u3055\u308c\u308b(\u304b\u304b\u3089\u306a\u3044\u5834\u5408\u306f\u4f55\u3082\u51fa\u306a\u3044)\u3002\n\u3053\u308c\u3092\u5b9f\u884c\u3059\u308b\u3068\u3001\u4ee5\u4e0b\u306e\u7d50\u679c\u3068\u306a\u308b\u3002\n\n```console\n./test\n[----] assert.c:4: Assertion failed: assert is fatal, expect isn't\n[----] assert.c:5: Assertion failed: This assert runs\n[FAIL] asserts::base: (0.00s)\n[====] Synthesis: Tested: 1 | Passing: 0 | Failing: 1 | Crashing: 0\n```\n\n`cr_expect(false, \"assert is fatal, expect isn't\")`\u306fassert\u304c\u51fa\u308b\u304c\u3001\u7d99\u7d9a\u3059\u308b\u3002\n`cr_assert(false, \"This assert runs\")`\u3067\u3082assert\u304c\u51fa\u3066\u3001\u3053\u3053\u3067\u6b62\u307e\u308b\u3002\n`cr_assert(false, \"This does not\")`\u306f\u5b9f\u884c\u3055\u308c\u306a\u3044\u3002\n\n## \u5225\u3005\u306e\u30c6\u30b9\u30c8\u306b\u3057\u305f\u5834\u5408\n```c\n#include <criterion/criterion.h>\n\nTest(asserts, first) {\n    cr_expect(false, \"assert is fatal, expect isn't\");\n}\n\nTest(asserts, second) {\n    cr_assert(false, \"This assert runs\");\n}\n\nTest(asserts, third) {\n    cr_assert(false, \"This does not\");\n}\n```\n\n\u2191\u306e\u3088\u3046\u306b\u30c6\u30b9\u30c8\u6bce\u306b\u5206\u3051\u305f\u5834\u5408\u306f\u5168\u3066\u5b9f\u884c\u3055\u308c\u308b\u3002\n\n```console\n./test --verbose\n[----] Criterion v2.2.0\n[====] Running 3 tests from asserts:\n[RUN ] asserts::first\n[----] assertion.c:4: Assertion failed: assert is fatal, expect isn't\n[FAIL] asserts::first: (0.00s)\n[RUN ] asserts::second\n[----] assertion.c:8: Assertion failed: This assert runs\n[FAIL] asserts::second: (0.00s)\n[RUN ] asserts::third\n[----] assertion.c:12: Assertion failed: This does not\n[FAIL] asserts::third: (0.00s)\n[====] Synthesis: Tested: 3 | Passing: 0 | Failing: 3 | Crashing: 0\n```\n\n\n# \u30c6\u30b9\u30c8\u7d50\u679c\u51fa\u529b\n## \u8a73\u7d30\u51fa\u529b(`--verbose`)\n\u30c6\u30b9\u30c8\u5b9f\u884c\u6642\u306b`--verbose`\u30aa\u30d7\u30b7\u30e7\u30f3\u3092\u4ed8\u3051\u3066\u5b9f\u884c\u3059\u308b\u3068\u3001\u500b\u3005\u306e\u30c6\u30b9\u30c8\u7d50\u679c\u304c\u51fa\u529b\u3055\u308c\u308b\u3002\n\n```console:--verbose\u30aa\u30d7\u30b7\u30e7\u30f3\u4ed8\u304d\u5b9f\u884c\u7d50\u679c\n$ ./test --verbose\n[----] Criterion v2.2.0\n[====] Running 2 tests from misc:\n[RUN ] misc::passing\n[RUN ] misc::failing\n[PASS] misc::passing: (0.00s)\n[----] /home/tmp/criterion/sample/simple.c:4: Assertion failed: The expression 0 is false.\n[FAIL] misc::failing: (0.00s)\n[====] Synthesis: Tested: 2 | Passing: 1 | Failing: 1 | Crashing: 0\n```\n\n`--verbose[=level]: sets verbosity to level (1 by default)`\u3068\u3042\u308b\u304c\u3001\n\u5024\u3092\u5909\u3048\u3066\u3082\u51fa\u529b\u306b\u5dee\u306f\u898b\u3089\u308c\u306a\u304b\u3063\u305f\u3002\n\n## XML\u51fa\u529b(`--xml`)\n\u30c6\u30b9\u30c8\u5b9f\u884c\u6642\u306b`--xml`\u30aa\u30d7\u30b7\u30e7\u30f3\u3092\u4ed8\u3051\u3066\u5b9f\u884c\u3059\u308b\u3053\u3068\u3067\u3001\nJInit XML\u5f62\u5f0f\u3067\u7d50\u679c\u51fa\u304c\u3067\u304d\u308b\u3002\n`--xml`\u3060\u3051\u3067\u5b9f\u884c\u3057\u305f\u5834\u5408\u306f\u6a19\u6e96\u30a8\u30e9\u30fc\u51fa\u529b\u306b\u51fa\u529b\u3055\u308c\u308b\u3002\n`--xml=<file\u3000path>`\u3068\u3057\u3066\u5b9f\u884c\u3059\u308b\u3068\u3001XML\u3092\u6307\u5b9a\u30d5\u30a1\u30a4\u30eb\u306b\u51fa\u529b\u3067\u304d\u308b\u3002\nJenkins\u7b49\u306eCI\u30c4\u30fc\u30eb\u3068\u9023\u643a\u3055\u305b\u308b\u3068\u304d\u306b\u6709\u7528\u305d\u3046\u3002\n\n```xml:--xml\u30aa\u30d7\u30b7\u30e7\u30f3\u4ed8\u304d\u5b9f\u884c\u7d50\u679c\n$ ./test --xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!-- Tests compiled with Criterion v2.2.0 -->\n<testsuites name=\"Criterion Tests\" tests=\"2\" failures=\"1\" errors=\"0\" disabled=\"0\">\n  <testsuite name=\"misc\" tests=\"2\" failures=\"1\" errors=\"0\" disabled=\"0\" skipped=\"0\">\n    <testcase name=\"passing\" assertions=\"1\" status=\"PASSED\">\n    </testcase>\n    <testcase name=\"failing\" assertions=\"1\" status=\"FAILED\">\n      <failure type=\"assert\" message=\"1 assertion(s) failed.\">simple.c:4: The expression 0 is false.&#10;</failure>\n    </testcase>\n  </testsuite>\n</testsuites>\n```\n\n## \u30c6\u30b9\u30c8\u5b9f\u884c\u9806\n\u30c7\u30d5\u30a9\u30eb\u30c8\u3067\u5b9f\u884c\u3059\u308b\u3068\u3001\u4e26\u5217\u3067\u30c6\u30b9\u30c8\u304c\u5b9f\u884c\u3055\u308c\u308b\u3002\n(\u5b9f\u884c\u6bce\u306b\u30c6\u30b9\u30c8\u30ed\u30b0\u306e\u51fa\u529b\u9806\u304c\u5909\u308f\u308b)\n\n```console:\u30c7\u30d5\u30a9\u30eb\u30c8\u5b9f\u884c\u305d\u306e1\n$ ./test --verbose\n[----] Criterion v2.2.0\n[====] Running 2 tests from misc:\n[RUN ] misc::failing\n[----] simple.c:4: Assertion failed: The expression 0 is false.\n[FAIL] misc::failing: (0.00s)\n[RUN ] misc::passing\n[PASS] misc::passing: (0.00s)\n[====] Synthesis: Tested: 2 | Passing: 1 | Failing: 1 | Crashing: 0\n```\n\n```console:\u30c7\u30d5\u30a9\u30eb\u30c8\u5b9f\u884c\u305d\u306e2\n$ ./test --verbose\n[----] Criterion v2.2.0\n[====] Running 2 tests from misc:\n[RUN ] misc::failing\n[RUN ] misc::passing\n[PASS] misc::passing: (0.00s)\n[----] simple.c:4: Assertion failed: The expression 0 is false.\n[FAIL] misc::failing: (0.00s)\n[====] Synthesis: Tested: 2 | Passing: 1 | Failing: 1 | Crashing: 0\n```\n\n`--no-early-exit`\u30aa\u30d7\u30b7\u30e7\u30f3\u3068`-j1`\u30aa\u30d7\u30b7\u30e7\u30f3\u3092\u4ed8\u3051\u3066\u5b9f\u884c\u3059\u308b\u3068\u3001\u5b9f\u884c\u9806\u304c\u5b9f\u884c\u6bce\u306b\u540c\u3058\u306b\u306a\u308b\u3002\n\n```console\n./test --verbose -j1 --no-early-exit\n[----] Criterion v2.2.0\n[====] Running 2 tests from misc:\n[RUN ] misc::failing\n[----] simple.c:4: Assertion failed: The expression 0 is false.\n[FAIL] misc::failing: (0.00s)\n[RUN ] misc::passing\n[PASS] misc::passing: (0.00s)\n[====] Synthesis: Tested: 2 | Passing: 1 | Failing: 1 | Crashing: 0\n```\n\n\u500b\u4eba\u7684\u306b\u958b\u767a\u4e2d\u306f\u30ed\u30b0\u304c\u9806\u756a\u306b\u51fa\u305f\u65b9\u304c\u5b09\u3057\u3044\u306e\u3067\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u8d77\u52d5\u30b9\u30af\u30ea\u30d7\u30c8\u3092\u4f7f\u3046\u3002\n\n```bash:run_test.sh\n#!/bin/sh\n\nTEST_BIN=\"./test\"\n\n$TEST_BIN --verbose -j1 --no-early-exit --xml=result.xml\n```\n\n\n# \u7570\u5e38\u7cfb\u30c6\u30b9\u30c8\n\u30d7\u30ed\u30b0\u30e9\u30e0\u4e2d\u3067\u7570\u5e38\u7d42\u4e86\u3059\u308b\u5834\u5408\u3092\u30c6\u30b9\u30c8\u3059\u308b\u65b9\u6cd5\u3002\n\u516c\u5f0f\u3067\u306f\u3053\u306e\u3042\u305f\u308a\u3002\nhttp://criterion.readthedocs.org/en/master/starter.html\n\n\u4f8b\u3068\u3057\u3066\u3001\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u548c\u304c0\u3060\u3063\u305f\u3089`exit`\u3001\u8ca0\u3060\u3063\u305f\u3089`abort`\u3059\u308b\u3088\u3046\u306a\n\u6050\u308d\u3057\u3044`dangerous_add`\u95a2\u6570\u304c\u3042\u3063\u305f\u3068\u3057\u3066\u3001\u3053\u308c\u3092\u30c6\u30b9\u30c8\u3059\u308b\u3002\n\n```c:dangerous_add.h\nint dangerous_add(int lhs, int rhs);\n```\n\n```c:dangerous_add.c\n#include <stdlib.h>\n#include \"dangerous_add.h\"\n\nint dangerous_add(int lhs, int rhs)\n{\n    int sum;\n    \n    sum = lhs + rhs;\n    \n    if (sum == 0)\n        exit(1);\n    \n    if (sum < 0)\n        abort();\n    \n    return sum;\n}\n```\n\n\u30c6\u30b9\u30c8\u30b3\u30fc\u30c9\u306f\u4ee5\u4e0b\u306e\u3042\u305f\u308a\nhttps://github.com/thombashi/CriterionSample/tree/master/test_abnormal\n\n## exit\u3059\u308b\u5834\u5408\u306e\u30c6\u30b9\u30c8(`.exit_code`)\n\u30c6\u30b9\u30c8\u306e`.exit_code`\u306b\u671f\u5f85\u3059\u308b\u7d42\u4e86\u30b3\u30fc\u30c9\u3092\u6307\u5b9a\u3059\u308b\u3002\n\u5b9f\u969b\u306e\u7d42\u4e86\u30b3\u30fc\u30c9\u3068\u4e00\u81f4\u3057\u3066\u3044\u308c\u3070\u30c6\u30b9\u30c8\u6210\u529f\u3068\u306a\u308b\u3002\n\n### `.exit_code`\u6210\u529f\u4f8b\n```c:exit_code\u6210\u529f\u4f8b\n#include <criterion/criterion.h>\n#include \"dangerous_add.h\"\n\nTest(dangerous_add, test_exit, .exit_code=1) {\n    dangerous_add(1, -1);\n}\n```\n\n```console:exit_code\u6210\u529f\u4f8b\u5b9f\u884c\u7d50\u679c\n$ ./test --verbose\n[----] Criterion v2.2.0\n[====] Running 2 tests from dangerous_add:\n[RUN ] dangerous_add::hoge\n[RUN ] dangerous_add::test_exit\n[PASS] dangerous_add::test_exit: (0.00s)\n[PASS] dangerous_add::hoge: (0.00s)\n[====] Synthesis: Tested: 2 | Passing: 2 | Failing: 0 | Crashing: 0\n```\n\n### `.exit_code`\u5931\u6557\u4f8b\n\u6307\u5b9a\u3057\u305f`.exit_code`\u304c\u5b9f\u969b\u306e\u7d42\u4e86\u30b3\u30fc\u30c9\u3068\u7570\u306a\u3063\u3066\u3044\u305f\u308a\u3001\n`.exit_code`\u304c\u6307\u5b9a\u3055\u308c\u3066\u3044\u306a\u3044\u30c6\u30b9\u30c8\u3067`exit`\u3067\u7d42\u4e86\u3057\u305f\u308a\u3059\u308b\u3068\u30c6\u30b9\u30c8\u5931\u6557\u3068\u306a\u308b\u3002\n\n```c:exit_code\u5931\u6557\u4f8b\n#include <criterion/criterion.h>\n#include \"dangerous_add.h\"\n\nTest(dangerous_add, test_fail_1, .exit_code=2, .description=\"expected exit code == 2\") {\n    dangerous_add(1, -1);\n}\n\nTest(dangerous_add, test_fail_2, .description=\"without '.exit_code'\") {\n    dangerous_add(1, -1);\n}\n```\n\n```console:exit_code\u5931\u6557\u4f8b\u51fa\u529b\n$ ./test --verbose\n[----] Criterion v2.2.0\n[====] Running 2 tests from dangerous_add:\n[RUN ] dangerous_add::test_fail_1\n[RUN ]   expected exit code == 2\n[RUN ] dangerous_add::test_fail_2\n[RUN ]   without '.exit_code'\n[FAIL] dangerous_add::test_fail_1: (0.00s)\n[----] Warning! The test `dangerous_add::test_fail_2` exited during its setup or teardown.\n[====] Synthesis: Tested: 2 | Passing: 0 | Failing: 2 | Crashing: 1\n```\n\n`.description`\u3092\u6307\u5b9a\u3059\u308b\u3068\u30c6\u30b9\u30c8\u4e2d\u306b\u51fa\u529b\u3055\u308c\u308b\u3002\n\n## signal\u3092\u6295\u3052\u308b\u5834\u5408\u306e\u30c6\u30b9\u30c8(`.signal`)\n\u30c6\u30b9\u30c8\u306e`.signal`\u306b\u671f\u5f85\u3059\u308bsignal\u3092\u6307\u5b9a\u3059\u308b\u3002\n\u5b9f\u969b\u306esignal\u3068\u4e00\u81f4\u3057\u3066\u3044\u308c\u3070\u30c6\u30b9\u30c8\u6210\u529f\u3068\u306a\u308b\u3002\n\n### `.signal`\u6210\u529f\u4f8b\n```console:signal\u6210\u529f\u4f8b\n#include <signal.h>\n#include <criterion/criterion.h>\n#include \"dangerous_add.h\"\n\nTest(dangerous_add, test_passed, .signal=SIGABRT, .description=\"expected signal == SIGABRT\") {\n    dangerous_add(-1, -1);\n}\n```\n\n```console:signal\u6210\u529f\u4f8b\u51fa\u529b\n$ ./test --verbose\n[----] Criterion v2.2.0\n[====] Running 1 test from dangerous_add:\n[RUN ] dangerous_add::test_passed\n[RUN ]   expected signal == SIGABRT\n[PASS] dangerous_add::test_passed: (0.00s)\n[====] Synthesis: Tested: 1 | Passing: 1 | Failing: 0 | Crashing: 0\n```\n\n### `.signal`\u5931\u6557\u4f8b\n\u6307\u5b9a\u3057\u305f`.signal`\u304c\u5b9f\u969b\u306esignal\u3068\u7570\u306a\u3063\u3066\u3044\u305f\u308a\u3001\n`.signal`\u304c\u6307\u5b9a\u3055\u308c\u3066\u3044\u306a\u3044\u30c6\u30b9\u30c8\u3067signal\u6295\u3052\u3066\u7d42\u4e86\u3057\u305f\u308a\u3059\u308b\u3068\u30c6\u30b9\u30c8\u5931\u6557\u3068\u306a\u308b\u3002\n\n```c:signal\u5931\u6557\u4f8b\n#include <signal.h>\n#include <criterion/criterion.h>\n#include \"dangerous_add.h\"\n\nTest(dangerous_add, test_fail_1, .signal=SIGSEGV, .description=\"expected signal == SIGSEGV\") {\n    dangerous_add(-1, -1);\n}\n\nTest(dangerous_add, test_fail_2, .description=\"without '.signal'\") {\n    dangerous_add(-1, -1);\n}\n```\n\n```console:signal\u5931\u6557\u4f8b\u51fa\u529b\n./test --verbose\n[----] Criterion v2.2.0\n[====] Running 2 tests from dangerous_add:\n[RUN ] dangerous_add::test_fail_2\n[RUN ]   without '.signal'\n[RUN ] dangerous_add::test_fail_1\n[RUN ]   expected signal == SIGSEGV\n[FAIL] dangerous_add::test_fail_1: (0.00s)\n[----] /home/criterion/sample/abnormal/test_signal.c:16: Unexpected signal caught below this line!\n[FAIL] dangerous_add::test_fail_2: CRASH!\n[====] Synthesis: Tested: 2 | Passing: 0 | Failing: 2 | Crashing: 1\n```\n\n\n# Parameterized tests\n\u3042\u308b\u30d1\u30e9\u30e1\u30fc\u30bf\u306b\u8272\u3005\u306a\u5024\u3092\u4e0e\u3048\u3066\u30c6\u30b9\u30c8\u3092\u5b9f\u884c\u3057\u305f\u3044\u5834\u5408\u306b\u4f7f\u3046\u3002\n\n- \u516c\u5f0f\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\n - Using parameterized tests \u2014 Criterion 2.2.0 documentation\n - http://criterion.readthedocs.org/en/master/parameterized.html\n- \u516c\u5f0f\u30b5\u30f3\u30d7\u30eb\n - https://github.com/Snaipe/Criterion/blob/bleeding/samples/parameterized.c\n\n\u4ee5\u4e0b\u3001\u7c21\u5358\u306a\u30d7\u30ed\u30b0\u30e9\u30e0\u3067\u8aac\u660e\u3059\u308b\u3002\n\n## \u30c6\u30b9\u30c8\u5bfe\u8c61\u30d7\u30ed\u30b0\u30e9\u30e0\n2\u5024\u306e\u548c\u3092\u8fd4\u3059\u3060\u3051\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u30c6\u30b9\u30c8\u3059\u308b\u3002\nhttps://github.com/thombashi/CriterionSample/tree/master/test_parameterize\n\n```c:header.h\nint add(int lhs, int rhs);\n```\n\n```c:add.c\n#include \"add.h\"\n\nint add(int lhs, int rhs)\n{\n\treturn lhs + rhs;\n}\n```\n\n```c:test_parametize.c\n#include <stdio.h>\n#include <criterion/parameterized.h>\n#include \"add.h\"\n\nstruct parameter_tuple {\n    int lhs;\n    int rhs;\n    int expected;\n};\n\nParameterizedTestParameters(parameterized_test, add) {\n    static struct parameter_tuple params[] = {\n        {1, 1, 2},\n        {-1, -1, -2},\n        {-100, 200, 100},\n    };\n\n    return cr_make_param_array(\n        struct parameter_tuple,\n        params, sizeof (params) / sizeof (struct parameter_tuple));\n}\n\nParameterizedTest(struct parameter_tuple *tup, parameterized_test, add) {\n    int result;\n    \n    fprintf(stdout,\n        \"Test: lhs=%d, rhs=%d, expected=%d\\n\", \n        tup->lhs, tup->rhs, tup->expected);\n    fflush(stdout);\n\n    result = add(tup->lhs, tup->rhs);\n    cr_expect_eq(\n        result, tup->expected,\n        \"Failed: lhs=%d, rhs=%d, result=%d, expected=%d\\n\", \n        tup->lhs, tup->rhs, result, tup->expected);\n}\n```\n\n## \u8aac\u660e\n`struct parameter_tuple`\n\u30d1\u30e9\u30e1\u30fc\u30bf\u306e\u7d44\u3092\u5b9a\u7fa9\u3059\u308b\u69cb\u9020\u4f53\u3002\n\n`ParameterizedTestParameters(parameterized_test, add)`\n\u30d1\u30e9\u30e1\u30fc\u30bf\u306e\u5024\u306e\u7d44\u307f\u5408\u308f\u305b\u3092\u5b9a\u7fa9\u3059\u308b\u3002`parameterized_test, add`\u304c\u30c6\u30b9\u30c8\u8b58\u5225\u5b50\u3068\u306a\u308b\n(\u524d\u8005\u304ctest suite\u540d\u3001\u5f8c\u8005\u304c\u30c6\u30b9\u30c8\u540d)\u3002\n\u30c6\u30b9\u30c8\u8b58\u5225\u5b50\u3067\u5bfe\u306b\u306a\u308b`ParameterizedTest`\u3068\u7d50\u3073\u3064\u304f\u3002\n\n`return cr_make_param_array(<\u30d1\u30e9\u30e1\u30fc\u30bf\u69cb\u9020\u4f53>, <\u30d1\u30e9\u30e1\u30fc\u30bf\u914d\u5217\u3078\u306e\u30dd\u30a4\u30f3\u30bf>, <\u30d1\u30bf\u30fc\u30f3\u6570>)`\nParameterizedTestParameters\u306e\u8fd4\u308a\u5024\u3068\u3059\u308b\u3002\u5f15\u6570\u306e\u610f\u5473\u306f\u2191\u3002\n\n`ParameterizedTest(struct parameter_tuple *tup, parameterized_test, add)`\n\u30c6\u30b9\u30c8\u8a18\u8ff0\u90e8\u5206\u3002\n`struct parameter_tuple *tup`\u306f\u30c6\u30b9\u30c8\u306b\u4e0e\u3048\u3089\u308c\u308b\u5f15\u6570\u3002\n`ParameterizedTestParameters`\u3067\u5b9a\u7fa9\u3057\u305f\u30d1\u30e9\u30e1\u30fc\u30bf\u914d\u5217\u304c1\u3064\u305a\u3064\u6e21\u3055\u308c\u308b\u3002\n`parameterized_test, add`\u306f`ParameterizedTestParameters`\u3068\u7d50\u3073\u3064\u3051\u308b\u305f\u3081\u306e\u30c6\u30b9\u30c8\u8b58\u5225\u5b50\u3002\n\nexpect/assert\u306f\u901a\u5e38\u306e\u30c6\u30b9\u30c8\u3068\u540c\u7b49\u306e\u3082\u306e\u304c\u4f7f\u7528\u3067\u304d\u308b\u3002\n\n## \u30c6\u30b9\u30c8\u5b9f\u884c\u7d50\u679c\n```bash\n$ ./test --verbose --no-early-exit -j1\n[----] Criterion v2.2.0\n[====] Running 1 test from parameterized_test:\n[RUN ] parameterized_test::add\nTest: lhs=1, rhs=1, expected=2\n[PASS] parameterized_test::add: (0.00s)\n[RUN ] parameterized_test::add\nTest: lhs=-1, rhs=-1, expected=-2\n[PASS] parameterized_test::add: (0.00s)\n[RUN ] parameterized_test::add\nTest: lhs=-100, rhs=200, expected=100\n[PASS] parameterized_test::add: (0.00s)\n[----] Writing xml report in `result.xml`.\n[====] Synthesis: Tested: 3 | Passing: 3 | Failing: 0 | Crashing: 0\n```\n\n## \u7559\u610f\u70b9\n### `cr_assert_xxx`\nParameterize test\u3067assert\u306b\u304b\u304b\u3063\u305f\u5834\u5408\u3067\u3082\u3001\u5f8c\u7d9a\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u306e\u30c6\u30b9\u30c8\u306f\u7d99\u7d9a\u3059\u308b\u3002\n\n### XML\u51fa\u529b\nParameterize test\u3067XML\u51fa\u529b\u3059\u308b\u3068\u3001\u6210\u529f\u6642\u306b\u306f\u30c6\u30b9\u30c8\u30b1\u30fc\u30b9\u306b\u5bfe\u5fdc\u3059\u308b\u30d1\u30e9\u30e1\u30fc\u30bf\u304c\u308f\u304b\u3089\u306a\u3044\u3002\n(\u5931\u6557\u6642\u306fcr_assert/expect_xxx\u306e\u5f15\u6570\u306b\u6307\u5b9a\u3057\u305f\u30d5\u30a9\u30fc\u30de\u30c3\u30c8\u6587\u5b57\u5217\u304c\u51fa\u529b\u3055\u308c\u308b)\u3002\n\u6210\u529f\u6642\u306b\u3082\u51fa\u529b\u3059\u308b\u65b9\u6cd5\u304c\u3042\u308b\u306e\u304b\u3082\u3057\u308c\u306a\u3044\u3002\n\n```console:\u6210\u529f\u6642\u306eXML\u51fa\u529b\n./test --verbose --no-early-exit -j1 --xml=result.xml\n```\n\n```xml:result.xml(\u6210\u529f\u6642)\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!-- Tests compiled with Criterion v2.2.0 -->\n<testsuites name=\"Criterion Tests\" tests=\"3\" failures=\"0\" errors=\"0\" disabled=\"0\">\n  <testsuite name=\"parameterized_test\" tests=\"3\" failures=\"0\" errors=\"0\" disabled=\"0\" skipped=\"0\">\n    <testcase name=\"add\" assertions=\"1\" status=\"PASSED\">\n    </testcase>\n    <testcase name=\"add\" assertions=\"1\" status=\"PASSED\">\n    </testcase>\n    <testcase name=\"add\" assertions=\"1\" status=\"PASSED\">\n    </testcase>\n  </testsuite>\n</testsuites>\n```\n\n\u540c\u3058\u30c6\u30b9\u30c8\u3092`cr_expect_eq`\u304b\u3089`cr_expect_neq`\u306b\u3057\u3066\u3001\u308f\u3056\u3068\u5931\u6557\u3055\u305b\u308b\u3002\n\u3059\u308b\u3068\u3001\u30c6\u30b9\u30c8\u30b1\u30fc\u30b9\u306e\u51fa\u529b\u306b`failure`\u30bf\u30b0\u304c\u8ffd\u52a0\u3055\u308c\u3001\u30d1\u30b9\u3068\u6a19\u6e96\u51fa\u529b\u304c\u8ffd\u52a0\u3055\u308c\u308b\u3002\n\n```xml:result.xml(\u5931\u6557\u6642)\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<!-- Tests compiled with Criterion v2.2.0 -->\n<testsuites name=\"Criterion Tests\" tests=\"3\" failures=\"3\" errors=\"0\" disabled=\"0\">\n  <testsuite name=\"parameterized_test\" tests=\"3\" failures=\"3\" errors=\"0\" disabled=\"0\" skipped=\"0\">\n    <testcase name=\"add\" assertions=\"1\" status=\"FAILED\">\n      <failure type=\"assert\" message=\"1 assertion(s) failed.\">test_parameterize.c:35: Failed: lhs=-100, rhs=200, result=100, expected=100&#10;</failure>\n    </testcase>\n    <testcase name=\"add\" assertions=\"1\" status=\"FAILED\">\n      <failure type=\"assert\" message=\"1 assertion(s) failed.\">test_parameterize.c:35: Failed: lhs=-1, rhs=-1, result=-2, expected=-2&#10;</failure>\n    </testcase>\n    <testcase name=\"add\" assertions=\"1\" status=\"FAILED\">\n      <failure type=\"assert\" message=\"1 assertion(s) failed.\">test_parameterize.c:35: Failed: lhs=1, rhs=1, result=2, expected=2&#10;</failure>\n    </testcase>\n  </testsuite>\n</testsuites>\n```\n\n\n# \u7d44\u307f\u5408\u308f\u305b\u30c6\u30b9\u30c8(Theory)\n\u30d1\u30e9\u30e1\u30fc\u30bf\u306e\u5024\u306e\u7d44\u307f\u5408\u308f\u305b\u3067\u30c6\u30b9\u30c8\u3092\u5b9f\u884c\u3059\u308b\u3002\n\u6a19\u6e96\u3067Parameterize test\u3084Theory\u306e\u3088\u3046\u306a\u6a5f\u80fd\u304c\u3042\u308b\u306e\u306f\u7d50\u69cb\u4fbf\u5229\u3002\n\n- \u516c\u5f0f\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\n - Using theories \u2014 Criterion 2.2.0 documentation\n - http://criterion.readthedocs.org/en/master/theories.html\n- \u516c\u5f0f\u30b5\u30f3\u30d7\u30eb\n\u3000- https://github.com/Snaipe/Criterion/blob/bleeding/samples/theories.c\n\n## \u30c6\u30b9\u30c8\u5bfe\u8c61\u30d7\u30ed\u30b0\u30e9\u30e0\n```c:dangerous_add.c\nuint64_t dangerous_add_2(int lhs, int rhs)\n{\n    if (lhs < 0)\n        exit(1);\n\n    if (rhs < 0)\n        abort();\n        \n    return lhs + rhs;\n}\n```\n\n```c:test_theory.c\n#include <stdio.h>\n#include <stdint.h>\n#include <limits.h>\n#include <criterion/theories.h>\n#include \"dangerous_add.h\"\n\nTheoryDataPoints(theory_test, passing) = {\n    DataPoints(int, 0, -1, 1, INT_MAX, INT_MIN),\n    DataPoints(int, 0, -1, 1, INT_MAX, INT_MIN),\n};\n\nTheory((int lhs, int rhs), theory_test, passing) {\n    uint64_t result;\n    \n    cr_assume_gt(lhs, 0);\n    cr_assume_gt(rhs, 0);\n    \n    fprintf(stdout,\n        \"Test: lhs=%d, rhs=%d\\n\", \n        lhs, rhs);\n    fflush(stdout);\n    \n    result = dangerous_add_2(lhs, rhs);\n    cr_assert_gt(\n        result, 0,\n        \"Failed: lhs=%d, rhs=%d, result=%d\\n\", \n        lhs, rhs, result);\n}\n```\n\n## \u8aac\u660e\n`TheoryDataPoints(theory_test, passing)`\n\u7d44\u307f\u5408\u308f\u305b\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u5b9a\u7fa9\u3059\u308b\u3002`theory_test, passing`\u304c\u30c6\u30b9\u30c8\u8b58\u5225\u5b50\u3068\u306a\u308b\n(\u524d\u8005\u304ctest suite\u540d\u3001\u5f8c\u8005\u304c\u30c6\u30b9\u30c8\u540d)\u3002\n\u30c6\u30b9\u30c8\u8b58\u5225\u5b50\u3067\u5bfe\u306b\u306a\u308b`Theory`\u3068\u7d50\u3073\u3064\u304f\u3002\n\n`DataPoints(int, 0, -1, 1, INT_MAX, INT_MIN)`\n\u4e00\u3064\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u306e\u578b\u3068\u3001\u53d6\u308a\u5f97\u308b\u5024\u3002\n\n`Theory((int lhs, int rhs), theory_test, passing)`\n\u30c6\u30b9\u30c8\u8a18\u8ff0\u90e8\u5206\u3002\n\u6700\u521d\u306e`(int lhs, int rhs)`\u306f\u500b\u3005\u306e\u30c6\u30b9\u30c8\u306b\u4e0e\u3048\u3089\u308c\u308b\u5f15\u6570\u3002\n`theory_test, passing`\u306f`TheoryDataPoints`\u3068\u7d50\u3073\u3064\u3051\u308b\u305f\u3081\u306e\u30c6\u30b9\u30c8\u8b58\u5225\u5b50\u3002\n\n`cr_assume_gt(lhs, 0);`\n\u30c6\u30b9\u30c8\u5b9f\u884c\u306e\u524d\u63d0\u6761\u4ef6\u3002\u3053\u308c\u3092\u6e80\u305f\u3055\u306a\u3044\u30d1\u30e9\u30e1\u30fc\u30bf\u306e\u7d44\u307f\u5408\u308f\u305b\u306f\u30b9\u30ad\u30c3\u30d7\u3055\u308c\u308b\u3002\n\u4e0a\u8a18\u306f`lhs`\u304c0\u4ee5\u4e0b\u306e\u5834\u5408\u306f\u30b9\u30ad\u30c3\u30d7\u3059\u308b\u3001\u3068\u3044\u3046\u610f\u5473\u3002\n`cr_assume_gt`\u4ee5\u5916\u306b\u3082`cr_assume_xxx`\u306f\u8272\u3005\u7a2e\u985e\u304c\u3042\u308b\u3002\n\u8a73\u7d30\u306f\u516c\u5f0f\u3092\u53c2\u7167\u3002\n\nexpect/assert\u306f\u901a\u5e38\u306e\u30c6\u30b9\u30c8\u3068\u540c\u7b49\u306e\u3082\u306e\u304c\u4f7f\u7528\u3067\u304d\u308b\u3002\n\n## \u30c6\u30b9\u30c8\u5b9f\u884c\u7d50\u679c\n```console\n$./run_test.sh\n[----] Criterion v2.2.0\n[====] Running 1 test from theory_test:\nTest: lhs=1, rhs=1\nTest: lhs=2147483647, rhs=1\nTest: lhs=1, rhs=2147483647\nTest: lhs=2147483647, rhs=2147483647\n[RUN ] theory_test::add\n[PASS] theory_test::add: (0.00s)\n[----] Writing xml report in `result.xml`.\n[====] Synthesis: Tested: 1 | Passing: 1 | Failing: 0 | Crashing: 0\n```\n\n\u30d1\u30e9\u30e1\u30fc\u30bf\u306e\u5024\u3068\u3057\u3066\u306f\u3001\u30de\u30a4\u30ca\u30b9\u3068\u306a\u308b\u5024\u3082\u3042\u308b\u304c\u3001\n`cr_assume_gt`\u306b\u3088\u3063\u3066\u30b9\u30ad\u30c3\u30d7\u3055\u308c\u3001`lhs`/`rhs`\u306e\u4e21\u65b9\u304c\n\u6b63\u3068\u306a\u308b\u30b1\u30fc\u30b9\u306e\u307f\u30c6\u30b9\u30c8\u304c\u5b9f\u65bd\u3055\u308c\u308b\u3002\n\n\n## Parameterize test\u3068\u306e\u4f7f\u3044\u5206\u3051\nTheory\u306fsmoke test\u3084\u6210\u5426\u5224\u5b9a\u304c\u5358\u7d14(BOOL\u5024\u304c\u623b\u308a\u5024\u306e\u5834\u5408\u3084\u7570\u5e38\u7cfb\u7b49)\u306a\u5024\u306e\u30c6\u30b9\u30c8\u306b\u5411\u3044\u3066\u3044\u308b\u3002\nTheory\u306f\u305d\u306e\u6027\u8cea\u4e0a\u3001\u7d50\u679c\u306e\u78ba\u8a8d\u7b49\u3001\u30d1\u30e9\u30e1\u30fc\u30bf\u306b\u5bfe\u5fdc\u3059\u308b\u51e6\u7406\u304c\u3084\u308a\u306b\u304f\u3044\u3002\n\u203bParameterize test\u3067\u51fa\u6765\u305f\u3088\u3046\u306a\u5165\u529b\u5024\u306b\u5bfe\u3059\u308b\u51fa\u529b\u30c1\u30a7\u30c3\u30af\u7b49\u306fTheory\u3067\u306f\u3067\u304d\u306a\u3044\n\n\u516c\u5f0f\u306b\u3082\u8aac\u660e\u304c\u3042\u308b\u306e\u3067\u305d\u3061\u3089\u3082\u3002\n\n\n# cmake\u7528\u96db\u5f62\n```cmake:CMakeList.txt\ncmake_minimum_required(VERSION 2.8)\n \nset(SOURCE_ROOT \"path to the source dir\")\n\ninclude_directories(\n    ${SOURCE_ROOT}/include\n)\n\nadd_executable(test\n    simple.c\n)\n\ntarget_link_libraries(test\n    criterion\n)\n```\n", "tags": ["Criterion", "C", "test", "C++"]}