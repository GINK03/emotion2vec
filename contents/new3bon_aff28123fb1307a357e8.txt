{"context": "\n\n\u3084\u308b\u3053\u3068\n\u524d\u56de\u30011\u304b\u3089HPS\u306e\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u3092\u4f5c\u3063\u3066\u898b\u307e\u3057\u305f\u3002LED\u3092\u3064\u3051\u308b\u3060\u3051\u3060\u3068\u666e\u901a\u306eCPU\u3067\u3082\u7c21\u5358\u306b\u3067\u304d\u308b\u306e\u3067\u30cf\u30fc\u30c9\u3063\u307d\u3044\u306e\u3092\u898b\u305f\u3044\u3068\u3053\u308d\u3067\u3059\u3002\n\u4eca\u56de\u306f\u79cb\u6708\u306e\u30b5\u30fc\u30dc\u30e2\u30fc\u30bf\u3092\u52d5\u304b\u3057\u3066\u307f\u307e\u3059\u3002\n\n\n\u4ed5\u69d8\u78ba\u8a8d\n\u79cb\u6708\u306eHP\u304b\u3089\u30c7\u30fc\u30bf\u30b7\u30fc\u30c8\u3092\u78ba\u8a8d\u3067\u304d\u307e\u3059\u3002\n\n\u5168\u4f53\u3092period,ON\u306e\u6642\u9593\u3092duty\u3068\u547c\u3076\u307f\u305f\u3044\u3067\u3059\u3002\n\nFPGA\u306e\u30b3\u30fc\u30c9\u5909\u66f4\nPWM\u306e\u51e6\u7406\u3067\u3059\u304c\u3001\u307e\u305a\u306fLED\u3092PWM\u3067\u30c1\u30ab\u30c1\u30ab\u3055\u305b\u3066\u307f\u307e\u3059\u30028\u3064\u3042\u308b\u3051\u3069\u4e00\u7dd2\u306b\u30c1\u30ab\u30c1\u30ab\u3002C\u8a00\u8a9e\u3067\u66f8\u304f\u3068\u3053\u3093\u306a\u611f\u3058\u3067\u3057\u3087\u3046\u304b\u306d\u3002\nwhile(1)\n{\n    for(count=0; count<period; count++)\n        led = (count<duty);\n}\n\n\u524d\u56de\u306e\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u3092\u305d\u306e\u307e\u307e\u4f7f\u3044\u307e\u3059\u3002\u30d5\u30a1\u30a4\u30eb\u540d\u3092\u5909\u3048\u308b\u3068\u9762\u5012\u304f\u3055\u3044\u306e\u3067\u30d5\u30a1\u30a4\u30eb\u540d\u306f\u305d\u306e\u307e\u307e\u51e6\u7406\u3060\u3051\u5909\u3048\u308b\u3053\u3068\u306b\u3057\u307e\u3059\u3002\nled.v\u3092\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u4fee\u6b63\u3057\u307e\u3057\u305f\u3002\n\nled.v\n// led.v\n// \u7c21\u5358\u306aPWM\u56de\u8def\n\n`timescale 1 ps / 1 ps\nmodule new_component (\n        input  wire [7:0]   avs_s0_address,     // avs_s0.address\n        input  wire         avs_s0_read,        //       .read\n        output reg  [31:0]  avs_s0_readdata,    //       .readdata\n        input  wire         avs_s0_write,       //       .write\n        input  wire [31:0]  avs_s0_writedata,   //       .writedata\n        input  wire         clock_clk,          //  clock.clk\n        input  wire         reset_reset,        //  reset.reset\n        output wire [7:0]   led                 //  led output\n    );\n\n    reg [31:0] count;\n    reg [31:0] duty;\n    reg [31:0] period;\n\n    // \u30ec\u30b8\u30b9\u30bf\u8aad\u307f\u8fbc\u307f \n    always @(posedge clock_clk)\n    begin\n        case(avs_s0_address)\n            8'h00   : avs_s0_readdata <= period;\n            8'h01   : avs_s0_readdata <= duty;\n            8'h02   : avs_s0_readdata <= count;\n            default : avs_s0_readdata <= 0;\n        endcase\n    end\n\n    // \u30ec\u30b8\u30b9\u30bf\u66f8\u304d\u8fbc\u307f\n    always @(posedge clock_clk)\n    begin\n        if(reset_reset)\n        begin\n            duty  <= 0;\n            period <= 0;\n        end\n        else if(avs_s0_write)\n        begin\n            case(avs_s0_address)\n                8'h00   : period <= avs_s0_writedata;\n                8'h01   : duty   <= avs_s0_writedata;\n            endcase\n        end\n    end\n\n    // PWM\u30ab\u30a6\u30f3\u30bf\n    always @(posedge clock_clk)\n    begin\n        if(reset_reset)\n            count <= 0;\n        else if(count>=period)\n            count <= 0;\n        else\n            count <= count+1;\n    end\n\n    // \u3068\u308a\u3042\u3048\u305aLED\u5168\u70b9\u706f\u3057\u3066\u307f\u308b\n    assign led = (count<=duty) ? 8'hff : 8'h00;\n\nendmodule\n\n\nCPU\u304b\u3089\u898b\u3048\u308b\u30a2\u30c9\u30ec\u30b9\u306f32bit\u63db\u7b97\u3067\n0000 : period\n0001 : duty\n\u3068\u3057\u307e\u3057\u305f\u3002\n\u3053\u306e\u30d5\u30a1\u30a4\u30eb\u3060\u3051\u5909\u3048\u3066Quartus\u3067\u30b3\u30f3\u30d1\u30a4\u30eb\u3057\u76f4\u3057\u307e\u3059\u3002\n\n\u52d5\u4f5c\u78ba\u8a8d\n\u51fa\u6765\u4e0a\u304c\u3063\u305fATLAS_SOC_GHRD.rbf\u3092\u3053\u3053\u3067\u4f5c\u3063\u305f\u74b0\u5883\u306e\nfat/ATLAS_SOC_GHRD/output_files/ATLAS_SOC_GHRD.rbf\n\u306b\u30b3\u30d4\u30fc\u3057\u307e\u3059\u3002\n\u518d\u8d77\u52d5\u3057\u307e\u3059\u3002\nreboot\n\u518d\u8d77\u52d5\u3059\u308b\u3068\u65b0\u3057\u3044FPGA\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u3002\n\u6700\u521d\u306b1\u79d2\u5468\u671f\u30010.5\u79d2ON\u3068\u3044\u3046\u306e\u3092\u8a66\u3057\u3066\u307f\u307e\u3059\u3002\nled.v\u306b\u5165\u3063\u3066\u304f\u308b\u30af\u30ed\u30c3\u30af\u306fHPS\u306e\u8a2d\u5b9a\u3067100MHz\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u3002\n\n1\u79d2\u306f100,000,000clk\u306a\u306e\u3067\u3001\u96fb\u5353\u30a2\u30d7\u30ea\u3067100,000,000\u309216\u9032\u6570\u306b\u5909\u63db\u3059\u308b\u30680x5f5e100\u30020.5\u79d2\u306f\u305d\u306e\u534a\u5206\u30670x2faf080\u3068\u8a08\u7b97\u3067\u304d\u307e\u3057\u305f\u3002\ncd app\n./lw 0 5f5e100\n./lw 1 2faf080\n\u3068\u5165\u529b\u3059\u308b\u3068LED\u304c1\u79d2\u9593\u9694\u3067\u70b9\u6ec5\u3057\u307e\u3059\u3002\n\n\u30b5\u30fc\u30dc\u30e2\u30fc\u30bf\u30fc\u3092\u3064\u306a\u3052\u308b\nAtlas-SoC\u57fa\u677f\u306e\u4e0a\u306e\u30d4\u30f3\u30d8\u30c3\u30c0GPIO0\u306b\u30b5\u30fc\u30dc\u30e2\u30fc\u30bf\u3092\u3064\u306a\u3052\u308b\u3053\u3068\u306b\u3057\u307e\u3059\u3002Atlas-SoC\u306e\u56de\u8def\u56f3\u304b\u3089GPIO0\u306e\u30d4\u30f3\u30a2\u30b5\u30a4\u30f3\u306f\n\n\u30b5\u30fc\u30dc\u30e2\u30fc\u30bf\u306f5V\u306a\u306e\u3067\u96fb\u6e90\u306f\npin11:Vcc 5V\npin12:GND\n\u3092\u4f7f\u3046\u3053\u3068\u306b\u3057\u307e\u3059\u3002\n\u5236\u5fa1\u51fa\u529b\u306f\u305d\u306e\u8fd1\u304f\u306eGPIO\u3092\u4f7f\u3046\u3053\u3068\u306b\u3057\u307e\u3059\u3002\npin10:GPIO_0_D9\n\u30b5\u30fc\u30dc\u30e2\u30fc\u30bf\u306e\u30d4\u30f3\u30a2\u30b5\u30a4\u30f3\u306f\u4ee5\u4e0b\u306b\u306a\u3063\u3066\u3044\u305f\u306e\u3067\n\n\u30aa\u30ec\u30f3\u30b8\u8272\u30b3\u30f3\u30bf\u30af\u30c8\u3092\u30cf\u30a6\u30b8\u30f3\u30b0\u304b\u3089\u629c\u3044\u3066\u3001\u8336\u8272\u3068\u8d64\u3092\u305d\u306e\u307e\u307e11,12\u306b\u633f\u3057\u307e\u3059\u3002\u30aa\u30ec\u30f3\u30b8\u8272\u306f\u305d\u306e\u307e\u307e10\u30d4\u30f3\u306b\u3064\u306a\u3052\u307e\u3059\u3002\n\n\nTOP\u306e\u5909\u66f4\n\u30d4\u30f3\u304c\u6c7a\u307e\u3063\u305f\u306e\u3067verilog\u306etop\u3092\u5909\u3048\u3066LED\u3092\u305d\u306e\u307e\u307eGPIO\u304b\u3089\u51fa\u3057\u307e\u3059\u3002\nQuartus\u3067de0_nano_soc_baseline.v\u3092\u958b\u3044\u3066\u3001\nGPIO0\u304c\u30b3\u30e1\u30f3\u30c8\u30a2\u30a6\u30c8\u3067\u7121\u52b9\u306b\u306a\u3063\u3066\u3044\u308b\u306e\u3067\u30b3\u30e1\u30f3\u30c8\u30a2\u30a6\u30c8\u3092\u524a\u9664\u3002\nassign GPIO_0[9] = LED[0];\n\u3092\u8ffd\u52a0\u3057\u307e\u3059\u3002\n\u5168\u90e8\u66f8\u304f\u3068\u3053\u3046\u306a\u308a\u307e\u3059\u3002\n\u9577\u3044\u3051\u3069\u5909\u3048\u305f\u306e\u306f2\u884c\u3060\u3051\u3067\u3059\u3002\n\nde0_nano_soc_baseline.v\n//--------------------------------------------------------------------------//\n// Title:        de0_nano_soc_baseline.v                                       //\n// Rev:          Rev 0.1                                                    //\n// Last Revised: 09/14/2015                                                 //\n//--------------------------------------------------------------------------//\n// Description: Baseline design file contains DE0 Nano SoC                   //\n//              Board pins and I/O Standards.                               //\n//--------------------------------------------------------------------------//\n//Copyright 2015 Altera Corporation. All rights reserved.  Altera products\n//are protected under numerous U.S. and foreign patents, maskwork rights,\n//copyrights and other intellectual property laws.\n//                 \n//This reference design file, and your use thereof, is subject to and\n//governed by the terms and conditions of the applicable Altera Reference\n//Design License Agreement.  By using this reference design file, you\n//indicate your acceptance of such terms and conditions between you and\n//Altera Corporation.  In the event that you do not agree with such terms and\n//conditions, you may not use the reference design file. Please promptly                         \n//destroy any copies you have made.\n//\n//This reference design file being provided on an \"as-is\" basis and as an\n//accommodation and therefore all warranties, representations or guarantees\n//of any kind (whether express, implied or statutory) including, without\n//limitation, warranties of merchantability, non-infringement, or fitness for\n//a particular purpose, are specifically disclaimed.  By making this\n//reference design file available, Altera expressly does not recommend,\n//suggest or require that this reference design file be used in combination \n//with any other product not provided by Altera\n//----------------------------------------------------------------------------\n\n//Group Enable Definitions\n//This lists every pinout group\n//Users can enable any group by uncommenting the corresponding line below:\n//`define enable_ADC\n//`define enable_ARDUINO\n`define enable_GPIO0\n//`define enable_GPIO1\n`define enable_HPS\n\nmodule de0_nano_soc_baseline(\n\n\n    //////////// CLOCK //////////\n    input                       FPGA_CLK_50,\n    input                       FPGA_CLK2_50,\n    input                       FPGA_CLK3_50,\n\n`ifdef enable_ADC\n    //////////// ADC //////////\n    /* 3.3-V LVTTL */\n    output                      ADC_CONVST,\n    output                      ADC_SCLK,\n    output                      ADC_SDI,\n    input                       ADC_SDO,\n`endif\n\n`ifdef enable_ARDUINO\n    //////////// ARDUINO ////////////\n    /* 3.3-V LVTTL */\n    inout                   [15:0]  ARDUINO_IO,\n    inout                               ARDUINO_RESET_N,\n`endif\n\n`ifdef enable_GPIO0\n    //////////// GPIO 0 ////////////\n    /* 3.3-V LVTTL */\n    inout               [35:0]      GPIO_0,\n`endif\n\n`ifdef enable_GPIO1 \n    //////////// GPIO 1 ////////////\n    /* 3.3-V LVTTL */\n    inout               [35:0]      GPIO_1,\n`endif\n\n`ifdef enable_HPS\n    //////////// HPS //////////\n    /* 3.3-V LVTTL */\n    inout                       HPS_CONV_USB_N,\n\n    /* SSTL-15 Class I */\n    output          [14:0]      HPS_DDR3_ADDR,\n    output           [2:0]      HPS_DDR3_BA,\n    output                      HPS_DDR3_CAS_N,\n    output                      HPS_DDR3_CKE,\n    output                      HPS_DDR3_CS_N,\n    output           [3:0]      HPS_DDR3_DM,\n    inout           [31:0]      HPS_DDR3_DQ,\n    output                      HPS_DDR3_ODT,\n    output                      HPS_DDR3_RAS_N,\n    output                      HPS_DDR3_RESET_N,\n    input                       HPS_DDR3_RZQ,\n    output                      HPS_DDR3_WE_N,\n    /* DIFFERENTIAL 1.5-V SSTL CLASS I */\n    output                      HPS_DDR3_CK_N,\n    output                      HPS_DDR3_CK_P,\n    inout            [3:0]      HPS_DDR3_DQS_N,\n    inout            [3:0]      HPS_DDR3_DQS_P,\n\n    /* 3.3-V LVTTL */\n    output                      HPS_ENET_GTX_CLK,\n    inout                       HPS_ENET_INT_N,\n    output                      HPS_ENET_MDC,\n    inout                       HPS_ENET_MDIO,\n    input                       HPS_ENET_RX_CLK,\n    input            [3:0]      HPS_ENET_RX_DATA,\n    input                       HPS_ENET_RX_DV,\n    output           [3:0]      HPS_ENET_TX_DATA,\n    output                      HPS_ENET_TX_EN,\n    inout                       HPS_GSENSOR_INT,\n    inout                       HPS_I2C0_SCLK,\n    inout                       HPS_I2C0_SDAT,\n    inout                       HPS_I2C1_SCLK,\n    inout                       HPS_I2C1_SDAT,\n    inout                       HPS_KEY,\n    inout                       HPS_LED,\n    inout                       HPS_LTC_GPIO,\n    output                      HPS_SD_CLK,\n    inout                       HPS_SD_CMD,\n    inout            [3:0]      HPS_SD_DATA,\n    output                      HPS_SPIM_CLK,\n    input                       HPS_SPIM_MISO,\n    output                      HPS_SPIM_MOSI,\n    inout                       HPS_SPIM_SS,\n    input                       HPS_UART_RX,\n    output                      HPS_UART_TX,\n    input                       HPS_USB_CLKOUT,\n    inout            [7:0]      HPS_USB_DATA,\n    input                       HPS_USB_DIR,\n    input                       HPS_USB_NXT,\n    output                      HPS_USB_STP,\n`endif\n\n    //////////// KEY ////////////\n    /* 3.3-V LVTTL */\n    input               [1:0]           KEY,\n\n    //////////// LED ////////////\n    /* 3.3-V LVTTL */\n    output          [7:0]           LED,\n\n    //////////// SW ////////////\n    /* 3.3-V LVTTL */\n    input               [3:0]           SW\n\n);\n\n    hps u0 (\n          .led_0_led_output                (LED),                // led_0_led.output\n        .hps_io_hps_io_emac1_inst_TX_CLK (HPS_ENET_GTX_CLK), //            hps_io.hps_io_emac1_inst_TX_CLK\n        .hps_io_hps_io_emac1_inst_TXD0   (HPS_ENET_TX_DATA[0]),   //                  .hps_io_emac1_inst_TXD0\n        .hps_io_hps_io_emac1_inst_TXD1   (HPS_ENET_TX_DATA[1]),   //                  .hps_io_emac1_inst_TXD1\n        .hps_io_hps_io_emac1_inst_TXD2   (HPS_ENET_TX_DATA[2]),   //                  .hps_io_emac1_inst_TXD2\n        .hps_io_hps_io_emac1_inst_TXD3   (HPS_ENET_TX_DATA[3]),   //                  .hps_io_emac1_inst_TXD3\n        .hps_io_hps_io_emac1_inst_RXD0   (HPS_ENET_RX_DATA[0]),   //                  .hps_io_emac1_inst_RXD0\n        .hps_io_hps_io_emac1_inst_MDIO   (HPS_ENET_MDIO),   //                  .hps_io_emac1_inst_MDIO\n        .hps_io_hps_io_emac1_inst_MDC    (HPS_ENET_MDC),    //                  .hps_io_emac1_inst_MDC\n        .hps_io_hps_io_emac1_inst_RX_CTL (HPS_ENET_RX_DV), //                  .hps_io_emac1_inst_RX_CTL\n        .hps_io_hps_io_emac1_inst_TX_CTL (HPS_ENET_TX_EN), //                  .hps_io_emac1_inst_TX_CTL\n        .hps_io_hps_io_emac1_inst_RX_CLK (HPS_ENET_RX_CLK), //                  .hps_io_emac1_inst_RX_CLK\n        .hps_io_hps_io_emac1_inst_RXD1   (HPS_ENET_RX_DATA[1]),   //                  .hps_io_emac1_inst_RXD1\n        .hps_io_hps_io_emac1_inst_RXD2   (HPS_ENET_RX_DATA[2]),   //                  .hps_io_emac1_inst_RXD2\n        .hps_io_hps_io_emac1_inst_RXD3   (HPS_ENET_RX_DATA[3]),   //                  .hps_io_emac1_inst_RXD3\n\n        .hps_io_hps_io_sdio_inst_CMD     (HPS_SD_CMD),     //                  .hps_io_sdio_inst_CMD\n        .hps_io_hps_io_sdio_inst_D0      (HPS_SD_DATA[0]),      //                  .hps_io_sdio_inst_D0\n        .hps_io_hps_io_sdio_inst_D1      (HPS_SD_DATA[1]),      //                  .hps_io_sdio_inst_D1\n        .hps_io_hps_io_sdio_inst_CLK     (HPS_SD_CLK),     //                  .hps_io_sdio_inst_CLK\n        .hps_io_hps_io_sdio_inst_D2      (HPS_SD_DATA[2]),      //                  .hps_io_sdio_inst_D2\n        .hps_io_hps_io_sdio_inst_D3      (HPS_SD_DATA[3]),      //                  .hps_io_sdio_inst_D3\n\n        .hps_io_hps_io_usb1_inst_D0      (HPS_USB_DATA[0]),      //                  .hps_io_usb1_inst_D0\n        .hps_io_hps_io_usb1_inst_D1      (HPS_USB_DATA[1]),      //                  .hps_io_usb1_inst_D1\n        .hps_io_hps_io_usb1_inst_D2      (HPS_USB_DATA[2]),      //                  .hps_io_usb1_inst_D2\n        .hps_io_hps_io_usb1_inst_D3      (HPS_USB_DATA[3]),      //                  .hps_io_usb1_inst_D3\n        .hps_io_hps_io_usb1_inst_D4      (HPS_USB_DATA[4]),      //                  .hps_io_usb1_inst_D4\n        .hps_io_hps_io_usb1_inst_D5      (HPS_USB_DATA[5]),      //                  .hps_io_usb1_inst_D5\n        .hps_io_hps_io_usb1_inst_D6      (HPS_USB_DATA[6]),      //                  .hps_io_usb1_inst_D6\n        .hps_io_hps_io_usb1_inst_D7      (HPS_USB_DATA[7]),      //                  .hps_io_usb1_inst_D7\n        .hps_io_hps_io_usb1_inst_CLK     (HPS_USB_CLKOUT),     //                  .hps_io_usb1_inst_CLK\n        .hps_io_hps_io_usb1_inst_STP     (HPS_USB_STP),     //                  .hps_io_usb1_inst_STP\n        .hps_io_hps_io_usb1_inst_DIR     (HPS_USB_DIR),     //                  .hps_io_usb1_inst_DIR\n        .hps_io_hps_io_usb1_inst_NXT     (HPS_USB_NXT),     //                  .hps_io_usb1_inst_NXT\n\n        .hps_io_hps_io_spim1_inst_CLK    (HPS_SPIM_CLK),    //                  .hps_io_spim1_inst_CLK\n        .hps_io_hps_io_spim1_inst_MOSI   (HPS_SPIM_MOSI),   //                  .hps_io_spim1_inst_MOSI\n        .hps_io_hps_io_spim1_inst_MISO   (HPS_SPIM_MISO),   //                  .hps_io_spim1_inst_MISO\n        .hps_io_hps_io_spim1_inst_SS0    (HPS_SPIM_SS),    //                  .hps_io_spim1_inst_SS0\n\n        .hps_io_hps_io_uart0_inst_RX     (HPS_UART_RX),     //                  .hps_io_uart0_inst_RX\n        .hps_io_hps_io_uart0_inst_TX     (HPS_UART_TX),     //                  .hps_io_uart0_inst_TX\n\n        .hps_io_hps_io_i2c0_inst_SDA     (HPS_I2C0_SDAT),     //                  .hps_io_i2c0_inst_SDA\n        .hps_io_hps_io_i2c0_inst_SCL     (HPS_I2C0_SCLK),     //                  .hps_io_i2c0_inst_SCL\n        .hps_io_hps_io_i2c1_inst_SDA     (HPS_I2C1_SDAT),     //                  .hps_io_i2c1_inst_SDA\n        .hps_io_hps_io_i2c1_inst_SCL     (HPS_I2C1_SCLK),     //                  .hps_io_i2c1_inst_SCL\n\n        .memory_mem_a                    (HPS_DDR3_ADDR),                    //            memory.mem_a\n        .memory_mem_ba                   (HPS_DDR3_BA),                   //                  .mem_ba\n        .memory_mem_ck                   (HPS_DDR3_CK_P),                   //                  .mem_ck\n        .memory_mem_ck_n                 (HPS_DDR3_CK_N),                 //                  .mem_ck_n\n        .memory_mem_cke                  (HPS_DDR3_CKE),                  //                  .mem_cke\n        .memory_mem_cs_n                 (HPS_DDR3_CS_N),                 //                  .mem_cs_n\n        .memory_mem_ras_n                (HPS_DDR3_RAS_N),                //                  .mem_ras_n\n        .memory_mem_cas_n                (HPS_DDR3_CAS_N),                //                  .mem_cas_n\n        .memory_mem_we_n                 (HPS_DDR3_WE_N),                 //                  .mem_we_n\n        .memory_mem_reset_n              (HPS_DDR3_RESET_N),              //                  .mem_reset_n\n        .memory_mem_dq                   (HPS_DDR3_DQ),                   //                  .mem_dq\n        .memory_mem_dqs                  (HPS_DDR3_DQS_P),                  //                  .mem_dqs\n        .memory_mem_dqs_n                (HPS_DDR3_DQS_N),                //                  .mem_dqs_n\n        .memory_mem_odt                  (HPS_DDR3_ODT),                  //                  .mem_odt\n        .memory_mem_dm                   (HPS_DDR3_DM),                   //                  .mem_dm\n        .memory_oct_rzqin                (HPS_DDR3_RZQ),                //                  .oct_rzqin\n    );\n\n    assign GPIO_0[9] = LED[0];\n\nendmodule\n\n\nQuartus\u3067\u30b3\u30f3\u30d1\u30a4\u30eb\u3057\u76f4\u3057\u307e\u3059\u3002\nsamba\u3067fat\u306b\u30b3\u30d4\u30fc\u3057\u3066\u3001reboot\u3057\u3066\u304a\u304d\u307e\u3059\u3002\n\nservo\u30a2\u30d7\u30ea\u3092\u4f5c\u308b\n\u6bce\u56delw\u30a2\u30d7\u30ea\u306716\u9032\u6570\u3067\u5165\u529b\u3059\u308b\u306e\u304c\u9762\u5012\u304f\u3055\u3044\u306e\u3067\u30a2\u30d7\u30ea\u3092\u4f5c\u308a\u307e\u3059\u3002\nperiod\u306f\u5e38\u306b20ms\u306a\u306e\u3067duty\u3060\u3051ms\u5358\u4f4d\u3067\u6307\u5b9a\u3059\u308b\u30a2\u30d7\u30ea\u306b\u3057\u307e\u3057\u3087\u3046\u3002\n\nservo.c\n#include <stdio.h>\n#include <stdlib.h>\n#include <error.h>\n\n#include \"lw_driver.h\"\n\nint main(int argc, char ** argv)\n{\n    double duty, clk_1sec;\n    uint32_t data;\n\n    // \u5f15\u6570\u30c1\u30a7\u30c3\u30af\n    if(argc!=2 )\n    {\n        printf(\"servo duty(msec)\\n\");\n        exit(EXIT_FAILURE);\n    }\n\n    if(open_lw())\n        exit(EXIT_FAILURE);\n\n    clk_1sec = 100e6;   // 100MHz\n    sscanf(argv[1], \"%lf\", &duty);\n\n    // period\n    data = (uint32_t)(20e-3*clk_1sec);  // 20ms\n    write_lw(0, data);  \n\n    //duty\n    data = (uint32_t)(duty*1e-3*clk_1sec);  // \u5f15\u6570ms\n    write_lw(1, data);  \n\n    close_lw();\n    exit(EXIT_SUCCESS);\n}\n\n\n\u6d6e\u52d5\u5c0f\u6570\u70b9\u304c\u4f7f\u3048\u308b\u306e\u3067\u8a08\u7b97\u3082\u697d\u3067\u3059\u306d\u3002\u30a2\u30d7\u30ea\u306e\u5f15\u6570\u3082\u6d6e\u52d5\u5c0f\u6570\u70b9\u306b\u3057\u3066\u3044\u307e\u3059\u3002\nsamba\u306eapp\u306b\u3053\u306e\u30d5\u30a1\u30a4\u30eb\u3092\u7f6e\u3044\u3066\u3001\nAtlas-SoC\u306eLinux\u4e0a\u304b\u3089\ngcc servo.c lw_driver.c -o servo\n\u3068\u5165\u529b\u3059\u308b\u3060\u3051\u3067\u30b3\u30f3\u30d1\u30a4\u30eb\u304c\u3067\u304d\u307e\u3059\u3002\n\u4e00\u77ac\u3067\u3059\u3002\u3082\u3061\u308d\u3093\u518d\u8d77\u52d5\u3082\u4e0d\u8981\u3002\u30bd\u30d5\u30c8\u306e\u958b\u767a\u306f\u697d\u3067\u3044\u3044\u3088\u306d\u3002\nFPGA\u306e\u30b3\u30f3\u30d1\u30a4\u30eb\u306f\u6642\u9593\u304c\u304b\u304b\u3063\u3066\u3002\u3002\u3002\u3002\n\n\u52d5\u4f5c\u78ba\u8a8d\n./servo duty[ms]\n\u3067\u5b9f\u884c\u3067\u304d\u307e\u3059\u30020.5\uff5e2.4\u3092\u5165\u308c\u308b\u3068\u30b5\u30fc\u30dc\u304c\u30ad\u30e5\u30c3\u30ad\u30e5\u3068\u52d5\u304d\u307e\u3059\u3002\n\u30d4\u30bf\u30c3\u3068\u6b62\u307e\u3089\u306a\u3044\u3053\u3068\u304c\u3042\u308b\u3051\u3069\u3001400\u5186\u306b\u3057\u3066\u306f\u4e0a\u51fa\u6765\u3067\u3059\u304b\u306d\u3002\n./servo 0.5\n\n./servo 2.4\n\n./servo 1.4\n\n\n\u7d42\u308f\u308a\u306b\n\u3053\u308c\u3067\u81ea\u4f5cFPGA\u30e2\u30b8\u30e5\u30fc\u30eb\u3092C\u304b\u3089\u7c21\u5358\u306b\u5236\u5fa1\u3067\u304d\u308b\u3053\u3068\u304c\u78ba\u8a8d\u3067\u304d\u307e\u3057\u305f\u3002\n32bit\u306e\u30ec\u30b8\u30b9\u30bf\u306f\u5e83\u304f\u3066\u3044\u3044\u3067\u3059\u306d\u3002100,000,000\u306a\u3093\u3066\u3067\u304b\u3044\u6570\u5024\u3082\u4f55\u3082\u8003\u3048\u305a\u306b\u6e21\u305b\u307e\u3059\u3002\n\u8a08\u7b97\u306fC\u8a00\u8a9e\u304c\u7c21\u5358\u3067\u3044\u3044\u3057\u3001FPGA\u306e\u51e6\u7406\u306f100MHz\u3067\u52d5\u304d\u307e\u3059\u3002\u6700\u5f37\u3058\u3083\u306a\u3044\u3067\u3059\u304b\u3002\n\u958b\u767a\u306e\u3057\u3084\u3059\u3055\u306fC\u8a00\u8a9e\u306e\u65b9\u304c\u697d\u3067\u3059\u306d\u3002Linux\u306a\u306e\u3067\u30bb\u30eb\u30d5\u30b3\u30f3\u30d1\u30a4\u30eb\u3082\u554f\u984c\u306a\u304f\u3067\u304d\u307e\u3059\u3002\n\u6700\u5f8c\u306e\u6700\u5f8c\u3067FPGA\u51e6\u7406\u306b\u3057\u305f\u3044\u3068\u3053\u308d\u3067\u3059\u3002\n#\u3084\u308b\u3053\u3068\n[\u524d\u56de](http://qiita.com/new3bon/items/4fa422c7d63205ae9e4e)\u30011\u304b\u3089HPS\u306e\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u3092\u4f5c\u3063\u3066\u898b\u307e\u3057\u305f\u3002LED\u3092\u3064\u3051\u308b\u3060\u3051\u3060\u3068\u666e\u901a\u306eCPU\u3067\u3082\u7c21\u5358\u306b\u3067\u304d\u308b\u306e\u3067\u30cf\u30fc\u30c9\u3063\u307d\u3044\u306e\u3092\u898b\u305f\u3044\u3068\u3053\u308d\u3067\u3059\u3002\n\u4eca\u56de\u306f[\u79cb\u6708\u306e\u30b5\u30fc\u30dc\u30e2\u30fc\u30bf](http://akizukidenshi.com/catalog/g/gM-08761/)\u3092\u52d5\u304b\u3057\u3066\u307f\u307e\u3059\u3002\n![M-08761.jpg](https://qiita-image-store.s3.amazonaws.com/0/99409/d46ebfff-b079-9f27-c9e9-026d13183bd3.jpeg)\n\n#\u4ed5\u69d8\u78ba\u8a8d\n\u79cb\u6708\u306eHP\u304b\u3089\u30c7\u30fc\u30bf\u30b7\u30fc\u30c8\u3092\u78ba\u8a8d\u3067\u304d\u307e\u3059\u3002\n![3.png](https://qiita-image-store.s3.amazonaws.com/0/99409/f35ad4ba-343a-b251-7cf3-3a85e0b6f3d6.png)\n\u5168\u4f53\u3092period,ON\u306e\u6642\u9593\u3092duty\u3068\u547c\u3076\u307f\u305f\u3044\u3067\u3059\u3002\n\n#FPGA\u306e\u30b3\u30fc\u30c9\u5909\u66f4\nPWM\u306e\u51e6\u7406\u3067\u3059\u304c\u3001\u307e\u305a\u306fLED\u3092PWM\u3067\u30c1\u30ab\u30c1\u30ab\u3055\u305b\u3066\u307f\u307e\u3059\u30028\u3064\u3042\u308b\u3051\u3069\u4e00\u7dd2\u306b\u30c1\u30ab\u30c1\u30ab\u3002C\u8a00\u8a9e\u3067\u66f8\u304f\u3068\u3053\u3093\u306a\u611f\u3058\u3067\u3057\u3087\u3046\u304b\u306d\u3002\n\n```\nwhile(1)\n{\n    for(count=0; count<period; count++)\n        led = (count<duty);\n}\n```\n\n[\u524d\u56de](http://qiita.com/new3bon/items/4fa422c7d63205ae9e4e)\u306e\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u3092\u305d\u306e\u307e\u307e\u4f7f\u3044\u307e\u3059\u3002\u30d5\u30a1\u30a4\u30eb\u540d\u3092\u5909\u3048\u308b\u3068\u9762\u5012\u304f\u3055\u3044\u306e\u3067\u30d5\u30a1\u30a4\u30eb\u540d\u306f\u305d\u306e\u307e\u307e\u51e6\u7406\u3060\u3051\u5909\u3048\u308b\u3053\u3068\u306b\u3057\u307e\u3059\u3002\nled.v\u3092\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u4fee\u6b63\u3057\u307e\u3057\u305f\u3002\n\n```verilog:led.v\n// led.v\n// \u7c21\u5358\u306aPWM\u56de\u8def\n\n`timescale 1 ps / 1 ps\nmodule new_component (\n\t\tinput  wire [7:0]  \tavs_s0_address,     // avs_s0.address\n\t\tinput  wire        \tavs_s0_read,        //       .read\n\t\toutput reg  [31:0] \tavs_s0_readdata,    //       .readdata\n\t\tinput  wire        \tavs_s0_write,       //       .write\n\t\tinput  wire [31:0] \tavs_s0_writedata,   //       .writedata\n\t\tinput  wire        \tclock_clk,          //  clock.clk\n\t\tinput  wire        \treset_reset,        //  reset.reset\n\t\toutput wire\t[7:0]\tled\t\t\t\t\t//  led output\n\t);\n\n\treg [31:0] count;\n\treg [31:0] duty;\n\treg [31:0] period;\n\n\t// \u30ec\u30b8\u30b9\u30bf\u8aad\u307f\u8fbc\u307f \n\talways @(posedge clock_clk)\n\tbegin\n\t\tcase(avs_s0_address)\n\t\t\t8'h00   : avs_s0_readdata <= period;\n\t\t\t8'h01   : avs_s0_readdata <= duty;\n\t\t\t8'h02   : avs_s0_readdata <= count;\n\t\t\tdefault : avs_s0_readdata <= 0;\n\t\tendcase\n\tend\n\t\n\t// \u30ec\u30b8\u30b9\u30bf\u66f8\u304d\u8fbc\u307f\n\talways @(posedge clock_clk)\n\tbegin\n\t\tif(reset_reset)\n\t\tbegin\n\t\t\tduty  <= 0;\n\t\t\tperiod <= 0;\n\t\tend\n\t\telse if(avs_s0_write)\n\t\tbegin\n\t\t\tcase(avs_s0_address)\n\t\t\t\t8'h00   : period <= avs_s0_writedata;\n\t\t\t\t8'h01   : duty   <= avs_s0_writedata;\n\t\t\tendcase\n\t\tend\n\tend\n\t\n\t// PWM\u30ab\u30a6\u30f3\u30bf\n\talways @(posedge clock_clk)\n\tbegin\n\t\tif(reset_reset)\n\t\t\tcount <= 0;\n\t\telse if(count>=period)\n\t\t\tcount <= 0;\n\t\telse\n\t\t\tcount <= count+1;\n\tend\n\t\n\t// \u3068\u308a\u3042\u3048\u305aLED\u5168\u70b9\u706f\u3057\u3066\u307f\u308b\n\tassign led = (count<=duty) ? 8'hff : 8'h00;\n\nendmodule\n```\nCPU\u304b\u3089\u898b\u3048\u308b\u30a2\u30c9\u30ec\u30b9\u306f32bit\u63db\u7b97\u3067\n0000 : period\n0001 : duty\n\u3068\u3057\u307e\u3057\u305f\u3002\n\u3053\u306e\u30d5\u30a1\u30a4\u30eb\u3060\u3051\u5909\u3048\u3066Quartus\u3067\u30b3\u30f3\u30d1\u30a4\u30eb\u3057\u76f4\u3057\u307e\u3059\u3002\n\n#\u52d5\u4f5c\u78ba\u8a8d\n\u51fa\u6765\u4e0a\u304c\u3063\u305fATLAS_SOC_GHRD.rbf\u3092[\u3053\u3053](http://qiita.com/new3bon/items/00ba45e25adc57a1b86e)\u3067\u4f5c\u3063\u305f\u74b0\u5883\u306e\nfat/ATLAS_SOC_GHRD/output_files/ATLAS_SOC_GHRD.rbf\n\u306b\u30b3\u30d4\u30fc\u3057\u307e\u3059\u3002\n\u518d\u8d77\u52d5\u3057\u307e\u3059\u3002\n`reboot`\n\u518d\u8d77\u52d5\u3059\u308b\u3068\u65b0\u3057\u3044FPGA\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u3002\n\n\u6700\u521d\u306b1\u79d2\u5468\u671f\u30010.5\u79d2ON\u3068\u3044\u3046\u306e\u3092\u8a66\u3057\u3066\u307f\u307e\u3059\u3002\nled.v\u306b\u5165\u3063\u3066\u304f\u308b\u30af\u30ed\u30c3\u30af\u306fHPS\u306e\u8a2d\u5b9a\u3067100MHz\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u3002\n![5.png](https://qiita-image-store.s3.amazonaws.com/0/99409/17c8a37f-c506-d125-ec17-7822afffa8dd.png)\n1\u79d2\u306f100,000,000clk\u306a\u306e\u3067\u3001\u96fb\u5353\u30a2\u30d7\u30ea\u3067100,000,000\u309216\u9032\u6570\u306b\u5909\u63db\u3059\u308b\u30680x5f5e100\u30020.5\u79d2\u306f\u305d\u306e\u534a\u5206\u30670x2faf080\u3068\u8a08\u7b97\u3067\u304d\u307e\u3057\u305f\u3002\n`cd app`\n`./lw 0 5f5e100`\n`./lw 1 2faf080`\n\u3068\u5165\u529b\u3059\u308b\u3068LED\u304c1\u79d2\u9593\u9694\u3067\u70b9\u6ec5\u3057\u307e\u3059\u3002\n\n#\u30b5\u30fc\u30dc\u30e2\u30fc\u30bf\u30fc\u3092\u3064\u306a\u3052\u308b\nAtlas-SoC\u57fa\u677f\u306e\u4e0a\u306e\u30d4\u30f3\u30d8\u30c3\u30c0GPIO0\u306b\u30b5\u30fc\u30dc\u30e2\u30fc\u30bf\u3092\u3064\u306a\u3052\u308b\u3053\u3068\u306b\u3057\u307e\u3059\u3002Atlas-SoC\u306e\u56de\u8def\u56f3\u304b\u3089GPIO0\u306e\u30d4\u30f3\u30a2\u30b5\u30a4\u30f3\u306f\n![6.png](https://qiita-image-store.s3.amazonaws.com/0/99409/9c2305a4-26e2-bcb8-af55-c41253e25759.png)\n\u30b5\u30fc\u30dc\u30e2\u30fc\u30bf\u306f5V\u306a\u306e\u3067\u96fb\u6e90\u306f\npin11:Vcc 5V\npin12:GND\n\u3092\u4f7f\u3046\u3053\u3068\u306b\u3057\u307e\u3059\u3002\n\u5236\u5fa1\u51fa\u529b\u306f\u305d\u306e\u8fd1\u304f\u306eGPIO\u3092\u4f7f\u3046\u3053\u3068\u306b\u3057\u307e\u3059\u3002\npin10:GPIO_0_D9\n\u30b5\u30fc\u30dc\u30e2\u30fc\u30bf\u306e\u30d4\u30f3\u30a2\u30b5\u30a4\u30f3\u306f\u4ee5\u4e0b\u306b\u306a\u3063\u3066\u3044\u305f\u306e\u3067\n![2.png](https://qiita-image-store.s3.amazonaws.com/0/99409/654f5a95-db1d-9d5c-18e6-7cc1d38d7a17.png)\n\u30aa\u30ec\u30f3\u30b8\u8272\u30b3\u30f3\u30bf\u30af\u30c8\u3092\u30cf\u30a6\u30b8\u30f3\u30b0\u304b\u3089\u629c\u3044\u3066\u3001\u8336\u8272\u3068\u8d64\u3092\u305d\u306e\u307e\u307e11,12\u306b\u633f\u3057\u307e\u3059\u3002\u30aa\u30ec\u30f3\u30b8\u8272\u306f\u305d\u306e\u307e\u307e10\u30d4\u30f3\u306b\u3064\u306a\u3052\u307e\u3059\u3002\n![4.JPG](https://qiita-image-store.s3.amazonaws.com/0/99409/1255088a-7377-4488-3f53-5c4f6bcdc4d8.jpeg)\n\n#TOP\u306e\u5909\u66f4\n\u30d4\u30f3\u304c\u6c7a\u307e\u3063\u305f\u306e\u3067verilog\u306etop\u3092\u5909\u3048\u3066LED\u3092\u305d\u306e\u307e\u307eGPIO\u304b\u3089\u51fa\u3057\u307e\u3059\u3002\nQuartus\u3067de0_nano_soc_baseline.v\u3092\u958b\u3044\u3066\u3001\nGPIO0\u304c\u30b3\u30e1\u30f3\u30c8\u30a2\u30a6\u30c8\u3067\u7121\u52b9\u306b\u306a\u3063\u3066\u3044\u308b\u306e\u3067\u30b3\u30e1\u30f3\u30c8\u30a2\u30a6\u30c8\u3092\u524a\u9664\u3002\nassign GPIO_0[9] = LED[0];\n\u3092\u8ffd\u52a0\u3057\u307e\u3059\u3002\n\n\u5168\u90e8\u66f8\u304f\u3068\u3053\u3046\u306a\u308a\u307e\u3059\u3002\n\u9577\u3044\u3051\u3069\u5909\u3048\u305f\u306e\u306f2\u884c\u3060\u3051\u3067\u3059\u3002\n\n```verilog:de0_nano_soc_baseline.v\n//--------------------------------------------------------------------------//\n// Title:        de0_nano_soc_baseline.v                                       //\n// Rev:          Rev 0.1                                                    //\n// Last Revised: 09/14/2015                                                 //\n//--------------------------------------------------------------------------//\n// Description: Baseline design file contains DE0 Nano SoC    \t\t\t\t //\n//              Board pins and I/O Standards.                               //\n//--------------------------------------------------------------------------//\n//Copyright 2015 Altera Corporation. All rights reserved.  Altera products\n//are protected under numerous U.S. and foreign patents, maskwork rights,\n//copyrights and other intellectual property laws.\n//                 \n//This reference design file, and your use thereof, is subject to and\n//governed by the terms and conditions of the applicable Altera Reference\n//Design License Agreement.  By using this reference design file, you\n//indicate your acceptance of such terms and conditions between you and\n//Altera Corporation.  In the event that you do not agree with such terms and\n//conditions, you may not use the reference design file. Please promptly                         \n//destroy any copies you have made.\n//\n//This reference design file being provided on an \"as-is\" basis and as an\n//accommodation and therefore all warranties, representations or guarantees\n//of any kind (whether express, implied or statutory) including, without\n//limitation, warranties of merchantability, non-infringement, or fitness for\n//a particular purpose, are specifically disclaimed.  By making this\n//reference design file available, Altera expressly does not recommend,\n//suggest or require that this reference design file be used in combination \n//with any other product not provided by Altera\n//----------------------------------------------------------------------------\n\n//Group Enable Definitions\n//This lists every pinout group\n//Users can enable any group by uncommenting the corresponding line below:\n//`define enable_ADC\n//`define enable_ARDUINO\n`define enable_GPIO0\n//`define enable_GPIO1\n`define enable_HPS\n\nmodule de0_nano_soc_baseline(\n\n\n\t//////////// CLOCK //////////\n\tinput \t\t          \t\tFPGA_CLK_50,\n\tinput \t\t          \t\tFPGA_CLK2_50,\n\tinput \t\t          \t\tFPGA_CLK3_50,\n\n`ifdef enable_ADC\n\t//////////// ADC //////////\n\t/* 3.3-V LVTTL */\n\toutput\t\t          \t\tADC_CONVST,\n\toutput\t\t          \t\tADC_SCLK,\n\toutput\t\t          \t\tADC_SDI,\n\tinput \t\t          \t\tADC_SDO,\n`endif\n\t\n`ifdef enable_ARDUINO\n\t//////////// ARDUINO ////////////\n\t/* 3.3-V LVTTL */\n\tinout\t\t\t\t\t[15:0]\tARDUINO_IO,\n\tinout\t\t\t\t\t\t\t\tARDUINO_RESET_N,\n`endif\n\t\n`ifdef enable_GPIO0\n\t//////////// GPIO 0 ////////////\n\t/* 3.3-V LVTTL */\n\tinout\t\t\t\t[35:0]\t\tGPIO_0,\n`endif\n\n`ifdef enable_GPIO1\t\n\t//////////// GPIO 1 ////////////\n\t/* 3.3-V LVTTL */\n\tinout\t\t\t\t[35:0]\t\tGPIO_1,\n`endif\n\n`ifdef enable_HPS\n\t//////////// HPS //////////\n\t/* 3.3-V LVTTL */\n\tinout \t\t          \t\tHPS_CONV_USB_N,\n\t\n\t/* SSTL-15 Class I */\n\toutput\t\t    [14:0]\t\tHPS_DDR3_ADDR,\n\toutput\t\t     [2:0]\t\tHPS_DDR3_BA,\n\toutput\t\t          \t\tHPS_DDR3_CAS_N,\n\toutput\t\t          \t\tHPS_DDR3_CKE,\n\toutput\t\t          \t\tHPS_DDR3_CS_N,\n\toutput\t\t     [3:0]\t\tHPS_DDR3_DM,\n\tinout \t\t    [31:0]\t\tHPS_DDR3_DQ,\n\toutput\t\t          \t\tHPS_DDR3_ODT,\n\toutput\t\t          \t\tHPS_DDR3_RAS_N,\n\toutput\t\t          \t\tHPS_DDR3_RESET_N,\n\tinput \t\t          \t\tHPS_DDR3_RZQ,\n\toutput\t\t          \t\tHPS_DDR3_WE_N,\n\t/* DIFFERENTIAL 1.5-V SSTL CLASS I */\n\toutput\t\t          \t\tHPS_DDR3_CK_N,\n\toutput\t\t          \t\tHPS_DDR3_CK_P,\n\tinout \t\t     [3:0]\t\tHPS_DDR3_DQS_N,\n\tinout \t\t     [3:0]\t\tHPS_DDR3_DQS_P,\n\t\n\t/* 3.3-V LVTTL */\n\toutput\t\t          \t\tHPS_ENET_GTX_CLK,\n\tinout \t\t          \t\tHPS_ENET_INT_N,\n\toutput\t\t          \t\tHPS_ENET_MDC,\n\tinout \t\t          \t\tHPS_ENET_MDIO,\n\tinput \t\t          \t\tHPS_ENET_RX_CLK,\n\tinput \t\t     [3:0]\t\tHPS_ENET_RX_DATA,\n\tinput \t\t          \t\tHPS_ENET_RX_DV,\n\toutput\t\t     [3:0]\t\tHPS_ENET_TX_DATA,\n\toutput\t\t          \t\tHPS_ENET_TX_EN,\n\tinout \t\t          \t\tHPS_GSENSOR_INT,\n\tinout \t\t          \t\tHPS_I2C0_SCLK,\n\tinout \t\t          \t\tHPS_I2C0_SDAT,\n\tinout \t\t          \t\tHPS_I2C1_SCLK,\n\tinout \t\t          \t\tHPS_I2C1_SDAT,\n\tinout \t\t          \t\tHPS_KEY,\n\tinout \t\t          \t\tHPS_LED,\n\tinout \t\t          \t\tHPS_LTC_GPIO,\n\toutput\t\t          \t\tHPS_SD_CLK,\n\tinout \t\t          \t\tHPS_SD_CMD,\n\tinout \t\t     [3:0]\t\tHPS_SD_DATA,\n\toutput\t\t          \t\tHPS_SPIM_CLK,\n\tinput \t\t          \t\tHPS_SPIM_MISO,\n\toutput\t\t          \t\tHPS_SPIM_MOSI,\n\tinout \t\t          \t\tHPS_SPIM_SS,\n\tinput \t\t          \t\tHPS_UART_RX,\n\toutput\t\t          \t\tHPS_UART_TX,\n\tinput \t\t          \t\tHPS_USB_CLKOUT,\n\tinout \t\t     [7:0]\t\tHPS_USB_DATA,\n\tinput \t\t          \t\tHPS_USB_DIR,\n\tinput \t\t          \t\tHPS_USB_NXT,\n\toutput\t\t          \t\tHPS_USB_STP,\n`endif\n\t\n\t//////////// KEY ////////////\n\t/* 3.3-V LVTTL */\n\tinput\t\t\t\t[1:0]\t\t\tKEY,\n\t\n\t//////////// LED ////////////\n\t/* 3.3-V LVTTL */\n\toutput\t\t\t[7:0]\t\t\tLED,\n\t\n\t//////////// SW ////////////\n\t/* 3.3-V LVTTL */\n\tinput\t\t\t\t[3:0]\t\t\tSW\n\n);\n\n    hps u0 (\n\t\t  .led_0_led_output                (LED),                // led_0_led.output\n        .hps_io_hps_io_emac1_inst_TX_CLK (HPS_ENET_GTX_CLK), //            hps_io.hps_io_emac1_inst_TX_CLK\n        .hps_io_hps_io_emac1_inst_TXD0   (HPS_ENET_TX_DATA[0]),   //                  .hps_io_emac1_inst_TXD0\n        .hps_io_hps_io_emac1_inst_TXD1   (HPS_ENET_TX_DATA[1]),   //                  .hps_io_emac1_inst_TXD1\n        .hps_io_hps_io_emac1_inst_TXD2   (HPS_ENET_TX_DATA[2]),   //                  .hps_io_emac1_inst_TXD2\n        .hps_io_hps_io_emac1_inst_TXD3   (HPS_ENET_TX_DATA[3]),   //                  .hps_io_emac1_inst_TXD3\n        .hps_io_hps_io_emac1_inst_RXD0   (HPS_ENET_RX_DATA[0]),   //                  .hps_io_emac1_inst_RXD0\n        .hps_io_hps_io_emac1_inst_MDIO   (HPS_ENET_MDIO),   //                  .hps_io_emac1_inst_MDIO\n        .hps_io_hps_io_emac1_inst_MDC    (HPS_ENET_MDC),    //                  .hps_io_emac1_inst_MDC\n        .hps_io_hps_io_emac1_inst_RX_CTL (HPS_ENET_RX_DV), //                  .hps_io_emac1_inst_RX_CTL\n        .hps_io_hps_io_emac1_inst_TX_CTL (HPS_ENET_TX_EN), //                  .hps_io_emac1_inst_TX_CTL\n        .hps_io_hps_io_emac1_inst_RX_CLK (HPS_ENET_RX_CLK), //                  .hps_io_emac1_inst_RX_CLK\n        .hps_io_hps_io_emac1_inst_RXD1   (HPS_ENET_RX_DATA[1]),   //                  .hps_io_emac1_inst_RXD1\n        .hps_io_hps_io_emac1_inst_RXD2   (HPS_ENET_RX_DATA[2]),   //                  .hps_io_emac1_inst_RXD2\n        .hps_io_hps_io_emac1_inst_RXD3   (HPS_ENET_RX_DATA[3]),   //                  .hps_io_emac1_inst_RXD3\n        \n        .hps_io_hps_io_sdio_inst_CMD     (HPS_SD_CMD),     //                  .hps_io_sdio_inst_CMD\n        .hps_io_hps_io_sdio_inst_D0      (HPS_SD_DATA[0]),      //                  .hps_io_sdio_inst_D0\n        .hps_io_hps_io_sdio_inst_D1      (HPS_SD_DATA[1]),      //                  .hps_io_sdio_inst_D1\n        .hps_io_hps_io_sdio_inst_CLK     (HPS_SD_CLK),     //                  .hps_io_sdio_inst_CLK\n        .hps_io_hps_io_sdio_inst_D2      (HPS_SD_DATA[2]),      //                  .hps_io_sdio_inst_D2\n        .hps_io_hps_io_sdio_inst_D3      (HPS_SD_DATA[3]),      //                  .hps_io_sdio_inst_D3\n        \n        .hps_io_hps_io_usb1_inst_D0      (HPS_USB_DATA[0]),      //                  .hps_io_usb1_inst_D0\n        .hps_io_hps_io_usb1_inst_D1      (HPS_USB_DATA[1]),      //                  .hps_io_usb1_inst_D1\n        .hps_io_hps_io_usb1_inst_D2      (HPS_USB_DATA[2]),      //                  .hps_io_usb1_inst_D2\n        .hps_io_hps_io_usb1_inst_D3      (HPS_USB_DATA[3]),      //                  .hps_io_usb1_inst_D3\n        .hps_io_hps_io_usb1_inst_D4      (HPS_USB_DATA[4]),      //                  .hps_io_usb1_inst_D4\n        .hps_io_hps_io_usb1_inst_D5      (HPS_USB_DATA[5]),      //                  .hps_io_usb1_inst_D5\n        .hps_io_hps_io_usb1_inst_D6      (HPS_USB_DATA[6]),      //                  .hps_io_usb1_inst_D6\n        .hps_io_hps_io_usb1_inst_D7      (HPS_USB_DATA[7]),      //                  .hps_io_usb1_inst_D7\n        .hps_io_hps_io_usb1_inst_CLK     (HPS_USB_CLKOUT),     //                  .hps_io_usb1_inst_CLK\n        .hps_io_hps_io_usb1_inst_STP     (HPS_USB_STP),     //                  .hps_io_usb1_inst_STP\n        .hps_io_hps_io_usb1_inst_DIR     (HPS_USB_DIR),     //                  .hps_io_usb1_inst_DIR\n        .hps_io_hps_io_usb1_inst_NXT     (HPS_USB_NXT),     //                  .hps_io_usb1_inst_NXT\n        \n        .hps_io_hps_io_spim1_inst_CLK    (HPS_SPIM_CLK),    //                  .hps_io_spim1_inst_CLK\n        .hps_io_hps_io_spim1_inst_MOSI   (HPS_SPIM_MOSI),   //                  .hps_io_spim1_inst_MOSI\n        .hps_io_hps_io_spim1_inst_MISO   (HPS_SPIM_MISO),   //                  .hps_io_spim1_inst_MISO\n        .hps_io_hps_io_spim1_inst_SS0    (HPS_SPIM_SS),    //                  .hps_io_spim1_inst_SS0\n\n        .hps_io_hps_io_uart0_inst_RX     (HPS_UART_RX),     //                  .hps_io_uart0_inst_RX\n        .hps_io_hps_io_uart0_inst_TX     (HPS_UART_TX),     //                  .hps_io_uart0_inst_TX\n\n        .hps_io_hps_io_i2c0_inst_SDA     (HPS_I2C0_SDAT),     //                  .hps_io_i2c0_inst_SDA\n        .hps_io_hps_io_i2c0_inst_SCL     (HPS_I2C0_SCLK),     //                  .hps_io_i2c0_inst_SCL\n        .hps_io_hps_io_i2c1_inst_SDA     (HPS_I2C1_SDAT),     //                  .hps_io_i2c1_inst_SDA\n        .hps_io_hps_io_i2c1_inst_SCL     (HPS_I2C1_SCLK),     //                  .hps_io_i2c1_inst_SCL\n        \n        .memory_mem_a                    (HPS_DDR3_ADDR),                    //            memory.mem_a\n        .memory_mem_ba                   (HPS_DDR3_BA),                   //                  .mem_ba\n        .memory_mem_ck                   (HPS_DDR3_CK_P),                   //                  .mem_ck\n        .memory_mem_ck_n                 (HPS_DDR3_CK_N),                 //                  .mem_ck_n\n        .memory_mem_cke                  (HPS_DDR3_CKE),                  //                  .mem_cke\n        .memory_mem_cs_n                 (HPS_DDR3_CS_N),                 //                  .mem_cs_n\n        .memory_mem_ras_n                (HPS_DDR3_RAS_N),                //                  .mem_ras_n\n        .memory_mem_cas_n                (HPS_DDR3_CAS_N),                //                  .mem_cas_n\n        .memory_mem_we_n                 (HPS_DDR3_WE_N),                 //                  .mem_we_n\n        .memory_mem_reset_n              (HPS_DDR3_RESET_N),              //                  .mem_reset_n\n        .memory_mem_dq                   (HPS_DDR3_DQ),                   //                  .mem_dq\n        .memory_mem_dqs                  (HPS_DDR3_DQS_P),                  //                  .mem_dqs\n        .memory_mem_dqs_n                (HPS_DDR3_DQS_N),                //                  .mem_dqs_n\n        .memory_mem_odt                  (HPS_DDR3_ODT),                  //                  .mem_odt\n        .memory_mem_dm                   (HPS_DDR3_DM),                   //                  .mem_dm\n        .memory_oct_rzqin                (HPS_DDR3_RZQ),                //                  .oct_rzqin\n\t);\n\t\n\tassign GPIO_0[9] = LED[0];\n\nendmodule\n```\n\nQuartus\u3067\u30b3\u30f3\u30d1\u30a4\u30eb\u3057\u76f4\u3057\u307e\u3059\u3002\nsamba\u3067fat\u306b\u30b3\u30d4\u30fc\u3057\u3066\u3001reboot\u3057\u3066\u304a\u304d\u307e\u3059\u3002\n\n#servo\u30a2\u30d7\u30ea\u3092\u4f5c\u308b\n\u6bce\u56delw\u30a2\u30d7\u30ea\u306716\u9032\u6570\u3067\u5165\u529b\u3059\u308b\u306e\u304c\u9762\u5012\u304f\u3055\u3044\u306e\u3067\u30a2\u30d7\u30ea\u3092\u4f5c\u308a\u307e\u3059\u3002\nperiod\u306f\u5e38\u306b20ms\u306a\u306e\u3067duty\u3060\u3051ms\u5358\u4f4d\u3067\u6307\u5b9a\u3059\u308b\u30a2\u30d7\u30ea\u306b\u3057\u307e\u3057\u3087\u3046\u3002\n\n```c:servo.c\n#include <stdio.h>\n#include <stdlib.h>\n#include <error.h>\n\n#include \"lw_driver.h\"\n\nint main(int argc, char ** argv)\n{\n    double duty, clk_1sec;\n    uint32_t data;\n\n    // \u5f15\u6570\u30c1\u30a7\u30c3\u30af\n    if(argc!=2 )\n    {\n        printf(\"servo duty(msec)\\n\");\n        exit(EXIT_FAILURE);\n    }\n  \n    if(open_lw())\n    \texit(EXIT_FAILURE);\n\n\tclk_1sec = 100e6;\t// 100MHz\n\tsscanf(argv[1], \"%lf\", &duty);\n\t\n\t// period\n\tdata = (uint32_t)(20e-3*clk_1sec);\t// 20ms\n\twrite_lw(0, data);\t\n\t\n\t//duty\n\tdata = (uint32_t)(duty*1e-3*clk_1sec);\t// \u5f15\u6570ms\n\twrite_lw(1, data);\t\n\t\n\tclose_lw();\n    exit(EXIT_SUCCESS);\n}\n```\n\n\u6d6e\u52d5\u5c0f\u6570\u70b9\u304c\u4f7f\u3048\u308b\u306e\u3067\u8a08\u7b97\u3082\u697d\u3067\u3059\u306d\u3002\u30a2\u30d7\u30ea\u306e\u5f15\u6570\u3082\u6d6e\u52d5\u5c0f\u6570\u70b9\u306b\u3057\u3066\u3044\u307e\u3059\u3002\nsamba\u306eapp\u306b\u3053\u306e\u30d5\u30a1\u30a4\u30eb\u3092\u7f6e\u3044\u3066\u3001\nAtlas-SoC\u306eLinux\u4e0a\u304b\u3089\n`gcc servo.c lw_driver.c -o servo`\n\u3068\u5165\u529b\u3059\u308b\u3060\u3051\u3067\u30b3\u30f3\u30d1\u30a4\u30eb\u304c\u3067\u304d\u307e\u3059\u3002\n\u4e00\u77ac\u3067\u3059\u3002\u3082\u3061\u308d\u3093\u518d\u8d77\u52d5\u3082\u4e0d\u8981\u3002\u30bd\u30d5\u30c8\u306e\u958b\u767a\u306f\u697d\u3067\u3044\u3044\u3088\u306d\u3002\nFPGA\u306e\u30b3\u30f3\u30d1\u30a4\u30eb\u306f\u6642\u9593\u304c\u304b\u304b\u3063\u3066\u3002\u3002\u3002\u3002\n\n#\u52d5\u4f5c\u78ba\u8a8d\n./servo duty[ms]\n\u3067\u5b9f\u884c\u3067\u304d\u307e\u3059\u30020.5\uff5e2.4\u3092\u5165\u308c\u308b\u3068\u30b5\u30fc\u30dc\u304c\u30ad\u30e5\u30c3\u30ad\u30e5\u3068\u52d5\u304d\u307e\u3059\u3002\n\u30d4\u30bf\u30c3\u3068\u6b62\u307e\u3089\u306a\u3044\u3053\u3068\u304c\u3042\u308b\u3051\u3069\u3001400\u5186\u306b\u3057\u3066\u306f\u4e0a\u51fa\u6765\u3067\u3059\u304b\u306d\u3002\n\n`./servo 0.5`\n![05.JPG](https://qiita-image-store.s3.amazonaws.com/0/99409/af8eb028-30ce-cd66-d1a9-8da63f5a62e8.jpeg)\n\n`./servo 2.4`\n![24.JPG](https://qiita-image-store.s3.amazonaws.com/0/99409/79470b94-d57a-1bd8-e451-8f18a5aa2b79.jpeg)\n\n`./servo 1.4`\n![14.JPG](https://qiita-image-store.s3.amazonaws.com/0/99409/d15c15ea-c1a5-e138-0e26-20107f96b800.jpeg)\n\n#\u7d42\u308f\u308a\u306b\n\u3053\u308c\u3067\u81ea\u4f5cFPGA\u30e2\u30b8\u30e5\u30fc\u30eb\u3092C\u304b\u3089\u7c21\u5358\u306b\u5236\u5fa1\u3067\u304d\u308b\u3053\u3068\u304c\u78ba\u8a8d\u3067\u304d\u307e\u3057\u305f\u3002\n32bit\u306e\u30ec\u30b8\u30b9\u30bf\u306f\u5e83\u304f\u3066\u3044\u3044\u3067\u3059\u306d\u3002100,000,000\u306a\u3093\u3066\u3067\u304b\u3044\u6570\u5024\u3082\u4f55\u3082\u8003\u3048\u305a\u306b\u6e21\u305b\u307e\u3059\u3002\n\u8a08\u7b97\u306fC\u8a00\u8a9e\u304c\u7c21\u5358\u3067\u3044\u3044\u3057\u3001FPGA\u306e\u51e6\u7406\u306f100MHz\u3067\u52d5\u304d\u307e\u3059\u3002\u6700\u5f37\u3058\u3083\u306a\u3044\u3067\u3059\u304b\u3002\n\u958b\u767a\u306e\u3057\u3084\u3059\u3055\u306fC\u8a00\u8a9e\u306e\u65b9\u304c\u697d\u3067\u3059\u306d\u3002Linux\u306a\u306e\u3067\u30bb\u30eb\u30d5\u30b3\u30f3\u30d1\u30a4\u30eb\u3082\u554f\u984c\u306a\u304f\u3067\u304d\u307e\u3059\u3002\n\u6700\u5f8c\u306e\u6700\u5f8c\u3067FPGA\u51e6\u7406\u306b\u3057\u305f\u3044\u3068\u3053\u308d\u3067\u3059\u3002\n", "tags": ["Atlas-SoC", "FPGA"]}