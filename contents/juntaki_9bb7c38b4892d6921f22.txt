{"tags": ["Linux", "kernel"], "context": "Linux\u306e\u30d1\u30a4\u30d7\u306e\u5b9f\u88c5\u306b\u3064\u3044\u3066\u8abf\u3079\u305f\u3002\n\n\u30ab\u30fc\u30cd\u30eb\u30d0\u30fc\u30b8\u30e7\u30f3\nv4.5.0\n\n\u30d1\u30a4\u30d7\u3001\u540d\u524d\u4ed8\u304d\u30d1\u30a4\u30d7\u3068\u306f\nVFS\u306e\u30aa\u30da\u30ec\u30fc\u30b7\u30e7\u30f3\u3067\u6271\u3046\u3053\u3068\u304c\u51fa\u6765\u308b\u3001\u30e1\u30e2\u30ea\u4e0a\u306e\u4e00\u6642\u30d5\u30a1\u30a4\u30eb\u307f\u305f\u3044\u306a\u3082\u306e\u3002\npipefs\u306b\u4f5c\u3089\u308c\u308b\u5834\u5408\u306f\u666e\u901a\u306e\u30d1\u30a4\u30d7\u3067\u3001\u30d5\u30a1\u30a4\u30eb\u30b7\u30b9\u30c6\u30e0\u4e0a\u306b\u6b21\u306eoperation\u3092\u6301\u3063\u3066\u4f5c\u3089\u308c\u305f\u5834\u5408\u3001\u540d\u524d\u4ed8\u304d\u30d1\u30a4\u30d7\u3068\u547c\u3076\u3002\u8981\u3059\u308b\u306binode\u304c\u3069\u3053\u304b\u3089\u8fbf\u308c\u308b\u304b\u3001\u3068\u3044\u3046\u9055\u3044\u3060\u3051\u3067\u5185\u90e8\u306e\u5b9f\u88c5\u306f\u304a\u306a\u3058\u3002\nconst struct file_operations pipefifo_fops = {\n    .open       = fifo_open,\n    .llseek     = no_llseek,\n    .read_iter  = pipe_read,\n    .write_iter = pipe_write,\n    .poll       = pipe_poll,\n    .unlocked_ioctl = pipe_ioctl,\n    .release    = pipe_release,\n    .fasync     = pipe_fasync,\n};\n\n\u30d1\u30a4\u30d7\u306e\u4f5c\u6210\u306fpipe\u30b7\u30b9\u30c6\u30e0\u30b3\u30fc\u30eb\u306e\u5ef6\u9577\u306e\u3001__do_pipe_flags()\u306b\u3088\u3063\u3066\u884c\u308f\u308c\u308b\u3002\ninode\u756a\u53f7\u306f\u3001get_next_ino()\u306b\u3088\u3063\u3066\u78ba\u4fdd\u3055\u308c\u308b\u3002CONFIG_SMP\u306e\u5834\u5408\u3001CPU\u3054\u3068\u306b\u30d7\u30fc\u30eb\u3092\u4f5c\u3063\u305f\u308a\u3057\u3066\u3044\u308b\u304c\u3001\u8981\u3059\u308b\u306b\u30b7\u30b9\u30c6\u30e0\u5168\u4f53\u3067\u30a4\u30f3\u30af\u30ea\u30e1\u30f3\u30c8\u3057\u3066\u3044\u304f\u6570\u3092\u9806\u756a\u306b\u5272\u308a\u5f53\u3066\u3066\u3044\u308b\u3060\u3051\u3067\u3042\u308b\u3002\u30aa\u30fc\u30d0\u30fc\u30d5\u30ed\u30fc\u3059\u308b\u3068\u91cd\u8907\u3059\u308b\u304c\u3001\u30d1\u30a4\u30d7\u306ffd\u3067\u3084\u308a\u53d6\u308a\u3055\u308c\u308b\u3060\u3051\u306a\u306e\u3067\u3001\u554f\u984c\u306a\u3044\u306e\u3060\u308d\u3046\u3002\nunsigned int get_next_ino(void)\n{\n    unsigned int *p = &get_cpu_var(last_ino);\n    unsigned int res = *p;\n\n#ifdef CONFIG_SMP\n    if (unlikely((res & (LAST_INO_BATCH-1)) == 0)) {\n        static atomic_t shared_last_ino;\n        int next = atomic_add_return(LAST_INO_BATCH, &shared_last_ino);\n\n        res = next - LAST_INO_BATCH;\n    }\n#endif\n\n    res++;\n    /* get_next_ino should not provide a 0 inode number */\n    if (unlikely(!res))\n        res++;\n    *p = res;\n    put_cpu_var(last_ino);\n    return res;\n}\nEXPORT_SYMBOL(get_next_ino);\n\n\u3061\u306a\u307f\u306b\u3001\u30d1\u30a4\u30d7\u306e\u30d5\u30a1\u30a4\u30eb\u540d\u3092\u53c2\u7167\u3059\u308b\u3068\u3001pipe:[inode\u756a\u53f7]\u306e\u3088\u3046\u306a\u8868\u793a\u306b\u306a\u308b\u3002\njuntaki@lab% sleep 100 | cat &\n[2] 1822 1823\njuntaki@lab% ls -la /proc/1822/fd\ntotal 0\ndr-x------ 2 juntaki juntaki  0  4\u6708 10 15:09 .\ndr-xr-xr-x 9 juntaki juntaki  0  4\u6708 10 15:09 ..\nlrwx------ 1 juntaki juntaki 64  4\u6708 10 15:09 0 -> /dev/pts/3\nl-wx------ 1 juntaki juntaki 64  4\u6708 10 15:09 1 -> pipe:[10810]\nlrwx------ 1 juntaki juntaki 64  4\u6708 10 15:09 2 -> /dev/pts/3\n\npipefs\u306f\u5916\u90e8\u304b\u3089\u53c2\u7167\u3055\u308c\u306a\u3044\u306e\u3067\u3001\u30d1\u30b9\u540d\u306f\u4e0d\u8981\u306a\u305f\u3081\u3067\u3042\u308b\u3002\npipefs_dname()\u3067\u751f\u6210\u3057\u3066\u3044\u308b\u3002\nstatic char *pipefs_dname(struct dentry *dentry, char *buffer, int buflen)\n{\n    return dynamic_dname(dentry, buffer, buflen, \"pipe:[%lu]\",\n                d_inode(dentry)->i_ino);\n}\n\n\n\u30d1\u30a4\u30d7\u30d0\u30c3\u30d5\u30a1\n\u30d1\u30a4\u30d7\u3092\u66f8\u304d\u8fbc\u3093\u3067\u304b\u3089\u5225\u306e\u30d7\u30ed\u30bb\u30b9\u304c\u53d7\u3051\u53d6\u308b\u307e\u3067\u306e\u9593\u3001\u30c7\u30fc\u30bf\u3092\u7f6e\u3044\u3066\u304a\u304f\u306e\u304c\u30d1\u30a4\u30d7\u30d0\u30c3\u30d5\u30a1\u3067\u3042\u308b\u3002\npipe_inode_info\u306estruct pipe_buffer *bufs\u304b\u3089\u30dd\u30a4\u30f3\u30c8\u3055\u308c\u308b\u5834\u6240\u306b\u3042\u308b\u3002\u30b5\u30a4\u30ba\u306falloc_pipe_info()\u3067\u521d\u671f\u5316\u3055\u308c\u3001\u30b5\u30a4\u30ba\u306fPIPE_DEF_BUFFERS * 4KB = 64KB\u3068\u306a\u308b\u3002\nstruct pipe_buffer {\n    struct page *page;\n    unsigned int offset, len;\n    const struct pipe_buf_operations *ops;\n    unsigned int flags;\n    unsigned long private;\n};\n\n#define PIPE_DEF_BUFFERS    16\n\n\n\nLinux\u306e\u30d1\u30a4\u30d7\u306e\u5b9f\u88c5\u306b\u3064\u3044\u3066\u8abf\u3079\u305f\u3002\n\n## \u30ab\u30fc\u30cd\u30eb\u30d0\u30fc\u30b8\u30e7\u30f3\n\nv4.5.0\n\n## \u30d1\u30a4\u30d7\u3001\u540d\u524d\u4ed8\u304d\u30d1\u30a4\u30d7\u3068\u306f\n\nVFS\u306e\u30aa\u30da\u30ec\u30fc\u30b7\u30e7\u30f3\u3067\u6271\u3046\u3053\u3068\u304c\u51fa\u6765\u308b\u3001\u30e1\u30e2\u30ea\u4e0a\u306e\u4e00\u6642\u30d5\u30a1\u30a4\u30eb\u307f\u305f\u3044\u306a\u3082\u306e\u3002\npipefs\u306b\u4f5c\u3089\u308c\u308b\u5834\u5408\u306f\u666e\u901a\u306e\u30d1\u30a4\u30d7\u3067\u3001\u30d5\u30a1\u30a4\u30eb\u30b7\u30b9\u30c6\u30e0\u4e0a\u306b\u6b21\u306eoperation\u3092\u6301\u3063\u3066\u4f5c\u3089\u308c\u305f\u5834\u5408\u3001\u540d\u524d\u4ed8\u304d\u30d1\u30a4\u30d7\u3068\u547c\u3076\u3002\u8981\u3059\u308b\u306binode\u304c\u3069\u3053\u304b\u3089\u8fbf\u308c\u308b\u304b\u3001\u3068\u3044\u3046\u9055\u3044\u3060\u3051\u3067\u5185\u90e8\u306e\u5b9f\u88c5\u306f\u304a\u306a\u3058\u3002\n\n~~~c\nconst struct file_operations pipefifo_fops = {\n\t.open\t\t= fifo_open,\n\t.llseek\t\t= no_llseek,\n\t.read_iter\t= pipe_read,\n\t.write_iter\t= pipe_write,\n\t.poll\t\t= pipe_poll,\n\t.unlocked_ioctl\t= pipe_ioctl,\n\t.release\t= pipe_release,\n\t.fasync\t\t= pipe_fasync,\n};\n~~~\n\n\u30d1\u30a4\u30d7\u306e\u4f5c\u6210\u306fpipe\u30b7\u30b9\u30c6\u30e0\u30b3\u30fc\u30eb\u306e\u5ef6\u9577\u306e\u3001`__do_pipe_flags()`\u306b\u3088\u3063\u3066\u884c\u308f\u308c\u308b\u3002\ninode\u756a\u53f7\u306f\u3001`get_next_ino()`\u306b\u3088\u3063\u3066\u78ba\u4fdd\u3055\u308c\u308b\u3002CONFIG_SMP\u306e\u5834\u5408\u3001CPU\u3054\u3068\u306b\u30d7\u30fc\u30eb\u3092\u4f5c\u3063\u305f\u308a\u3057\u3066\u3044\u308b\u304c\u3001\u8981\u3059\u308b\u306b\u30b7\u30b9\u30c6\u30e0\u5168\u4f53\u3067\u30a4\u30f3\u30af\u30ea\u30e1\u30f3\u30c8\u3057\u3066\u3044\u304f\u6570\u3092\u9806\u756a\u306b\u5272\u308a\u5f53\u3066\u3066\u3044\u308b\u3060\u3051\u3067\u3042\u308b\u3002\u30aa\u30fc\u30d0\u30fc\u30d5\u30ed\u30fc\u3059\u308b\u3068\u91cd\u8907\u3059\u308b\u304c\u3001\u30d1\u30a4\u30d7\u306ffd\u3067\u3084\u308a\u53d6\u308a\u3055\u308c\u308b\u3060\u3051\u306a\u306e\u3067\u3001\u554f\u984c\u306a\u3044\u306e\u3060\u308d\u3046\u3002\n\n~~~c\nunsigned int get_next_ino(void)\n{\n\tunsigned int *p = &get_cpu_var(last_ino);\n\tunsigned int res = *p;\n\n#ifdef CONFIG_SMP\n\tif (unlikely((res & (LAST_INO_BATCH-1)) == 0)) {\n\t\tstatic atomic_t shared_last_ino;\n\t\tint next = atomic_add_return(LAST_INO_BATCH, &shared_last_ino);\n\n\t\tres = next - LAST_INO_BATCH;\n\t}\n#endif\n\n\tres++;\n\t/* get_next_ino should not provide a 0 inode number */\n\tif (unlikely(!res))\n\t\tres++;\n\t*p = res;\n\tput_cpu_var(last_ino);\n\treturn res;\n}\nEXPORT_SYMBOL(get_next_ino);\n~~~\n\n\u3061\u306a\u307f\u306b\u3001\u30d1\u30a4\u30d7\u306e\u30d5\u30a1\u30a4\u30eb\u540d\u3092\u53c2\u7167\u3059\u308b\u3068\u3001`pipe:[inode\u756a\u53f7]`\u306e\u3088\u3046\u306a\u8868\u793a\u306b\u306a\u308b\u3002\n\n~~~\njuntaki@lab% sleep 100 | cat &\n[2] 1822 1823\njuntaki@lab% ls -la /proc/1822/fd\ntotal 0\ndr-x------ 2 juntaki juntaki  0  4\u6708 10 15:09 .\ndr-xr-xr-x 9 juntaki juntaki  0  4\u6708 10 15:09 ..\nlrwx------ 1 juntaki juntaki 64  4\u6708 10 15:09 0 -> /dev/pts/3\nl-wx------ 1 juntaki juntaki 64  4\u6708 10 15:09 1 -> pipe:[10810]\nlrwx------ 1 juntaki juntaki 64  4\u6708 10 15:09 2 -> /dev/pts/3\n~~~\n\npipefs\u306f\u5916\u90e8\u304b\u3089\u53c2\u7167\u3055\u308c\u306a\u3044\u306e\u3067\u3001\u30d1\u30b9\u540d\u306f\u4e0d\u8981\u306a\u305f\u3081\u3067\u3042\u308b\u3002\n`pipefs_dname()`\u3067\u751f\u6210\u3057\u3066\u3044\u308b\u3002\n\n~~~c\nstatic char *pipefs_dname(struct dentry *dentry, char *buffer, int buflen)\n{\n\treturn dynamic_dname(dentry, buffer, buflen, \"pipe:[%lu]\",\n\t\t\t\td_inode(dentry)->i_ino);\n}\n~~~\n\n## \u30d1\u30a4\u30d7\u30d0\u30c3\u30d5\u30a1\n\n\u30d1\u30a4\u30d7\u3092\u66f8\u304d\u8fbc\u3093\u3067\u304b\u3089\u5225\u306e\u30d7\u30ed\u30bb\u30b9\u304c\u53d7\u3051\u53d6\u308b\u307e\u3067\u306e\u9593\u3001\u30c7\u30fc\u30bf\u3092\u7f6e\u3044\u3066\u304a\u304f\u306e\u304c\u30d1\u30a4\u30d7\u30d0\u30c3\u30d5\u30a1\u3067\u3042\u308b\u3002\n`pipe_inode_info`\u306e`struct pipe_buffer *bufs`\u304b\u3089\u30dd\u30a4\u30f3\u30c8\u3055\u308c\u308b\u5834\u6240\u306b\u3042\u308b\u3002\u30b5\u30a4\u30ba\u306f`alloc_pipe_info()`\u3067\u521d\u671f\u5316\u3055\u308c\u3001\u30b5\u30a4\u30ba\u306f`PIPE_DEF_BUFFERS * 4KB = 64KB`\u3068\u306a\u308b\u3002\n\n~~~c\nstruct pipe_buffer {\n\tstruct page *page;\n\tunsigned int offset, len;\n\tconst struct pipe_buf_operations *ops;\n\tunsigned int flags;\n\tunsigned long private;\n};\n~~~\n\n~~~c\n#define PIPE_DEF_BUFFERS\t16\n~~~\n"}