{"context": "\n\n\u306f\u3058\u3081\u306b\n\u904e\u53bb\u306b\u53c2\u52a0\u3057\u305fKaggle\u306e\u60c5\u5831\u3092\u30a2\u30c3\u30d7\u3057\u3066\u3044\u304d\u307e\u3059\uff0e\n\u3053\u3053\u3067\u306f\uff0cOutbrain Click Prediction\u306e\u30c7\u30fc\u30bf\u7d39\u4ecb\u3068\u30d5\u30a9\u30fc\u30e9\u30e0\u3067\u306e\u76ee\u7acb\u3063\u305f\u8b70\u8ad6\u3092\u30d4\u30c3\u30af\u30a2\u30c3\u30d7\u3057\u307e\u3059\uff0e\n\u30b3\u30f3\u30da\u512a\u52dd\u8005\u306e\u30b3\u30fc\u30c9\u306b\u95a2\u3057\u3066\u306f\uff0cKaggle\u307e\u3068\u3081:Outbrain(\u5f8c\u7de8)\u306b\u307e\u3068\u3081\u3066\u304a\u308a\uff0c\u3053\u3061\u3089\u306f\u6982\u8981\uff0c\u5404\u30c7\u30fc\u30bf\u89e3\u6790\u306e\u307e\u3068\u3081\u306b\u306a\u308a\u307e\u3059\uff0e\n(\u73fe\u5728\u4f5c\u6210\u4e2d)\n\u672c\u8a18\u4e8b\u306fPython2.7, numpy 1.11, scipy 0.17, scikit-learn 0.18, matplotlib 1.5, seaborn 0.7, pandas 0.17\u3092\u4f7f\u7528\u3057\u3066\u3044\u307e\u3059\uff0e\njupyter notebook\u4e0a\u3067\u52d5\u4f5c\u78ba\u8a8d\u6e08\u307f\u3067\u3059\uff0e(%matplotlib inline\u306f\u9069\u5f53\u306b\u4fee\u6b63\u3057\u3066\u304f\u3060\u3055\u3044)\n\u30b5\u30f3\u30d7\u30eb\u30b9\u30af\u30ea\u30d7\u30c8\u3092\u5b9f\u884c\u3057\u305f\u969b\u306b\u30a8\u30e9\u30fc\u7b49\u3042\u3063\u305f\u5834\u5408\u306f\uff0c\u30b3\u30e1\u30f3\u30c8\u3044\u305f\u3060\u3051\u308b\u3068\u52a9\u304b\u308a\u307e\u3059\uff0e\n\n\u76ee\u6b21\n\n\u6982\u8981\n\u8a55\u4fa1\u6307\u6a19\n\u30c7\u30fc\u30bf\u306e\u7d39\u4ecb\nkernels\n\n\n\u80cc\u666f\n\n\u30a4\u30f3\u30bf\u30fc\u30cd\u30c3\u30c8\u4e0a\u3067\u306f\uff0c\u591a\u304f\u306e\u30e6\u30fc\u30b6\u30fc\u304c\u30b3\u30df\u30e5\u30cb\u30c6\u30a3\u3084\u7d4c\u9a13\u306b\u57fa\u3065\u304d\u884c\u52d5\u3057\uff0c\u65b0\u305f\u306a\u8a18\u4e8b\u3092\u767a\u898b\u3057\uff0c\u3055\u3089\u306b\u306f\u305d\u306e\u767a\u898b\u3057\u305f\u8a18\u4e8b\u3092\u5143\u306b\u6b21\u306e\u76ee\u7684\u5730\u3092\u76ee\u6307\u3057\u307e\u3059\uff0eOutbrain\u306f\u30b3\u30f3\u30c6\u30f3\u30c8\u30c7\u30ea\u30d0\u30ea\u30fc\u30d7\u30e9\u30c3\u30c8\u30d5\u30a9\u30fc\u30e0\u3092\u30e6\u30fc\u30b6\u30fc\u3078\u63d0\u4f9b\u3057\uff0c\u30e6\u30fc\u30b6\u30fc\u306e\u5fd7\u5411\u306b\u5408\u81f4\u3057\u305f\u5834\u6240\u3078\u5c0e\u3044\u3066\u3044\u307e\u3059\uff0e\nOutbrain\u3067\u306f250 billion\u3082\u306e\u30d1\u30fc\u30bd\u30ca\u30eb\u30ec\u30b3\u30e1\u30f3\u30c7\u30fc\u30b7\u30e7\u30f3\u3092\u6bce\u6708\u6570\u5343\u3082\u306e\u30b5\u30a4\u30c8\u3078\u884c\u3063\u3066\u3044\u307e\u3059\uff0e\u4eca\u56de\uff0ckaggler\u306b\u306f\u30e6\u30fc\u30b6\u30fc\u306e\u30af\u30ea\u30c3\u30af\u5c65\u6b74\u304b\u3089\u30e6\u30fc\u30b6\u30fc\u306e\u884c\u52d5\u3092\u4e88\u6e2c\u3057\u3066\u3082\u3089\u3044\u307e\u3059\uff0e\u305d\u3057\u3066\uff0c\u4eca\u307e\u3067\u4ee5\u4e0a\u306b\u30e6\u30fc\u30b6\u30fc\u304c\u6e80\u8db3\u3059\u308b\u7269\u8a9e\u3092\u63d0\u4f9b\u3059\u308b\u30ec\u30b3\u30e1\u30f3\u30c7\u30fc\u30b7\u30e7\u30f3\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u3092\u76ee\u6307\u3057\u307e\u3059\uff0e\n\u4eca\u56de\u306e\u7279\u5fb4\u7684\u306a\u70b9\u3068\u3057\u3066\u306f\uff0c\u4ee5\u4e0b\u304c\u6319\u3052\u3089\u308c\u307e\u3059\uff0e\n\n\u5178\u578b\u7684\u306aClick Through Rate (CTR)\u3092\u6a5f\u68b0\u5b66\u7fd2\u3067\u4e88\u6e2c\u3059\u308b\u554f\u984c\ntimestamp\uff0c\u5730\u7406\u60c5\u5831\uff0c\u305d\u3057\u3066\u8907\u6570\u306e\u30ab\u30c6\u30b4\u30ea\u30c7\u30fc\u30bf\u304c\u8907\u96d1\u306b\u7d10\u3065\u3044\u3066\u3044\u308b\n\u30c7\u30fc\u30bf\u306e\u7a2e\u985e\u304c\u591a\u304f\uff0c\u8907\u6570\u306e\u30d5\u30a1\u30a4\u30eb\u306b\u5206\u65ad\u3055\u308c\u3066\u3044\u308b\n\u5354\u8abf\u30d5\u30a3\u30eb\u30bf\u30ea\u30f3\u30b0\u3084FFM\u3092\u30e1\u30a4\u30f3\u3068\u3057\u305f\u30a2\u30d7\u30ed\u30fc\u30c1\n\n\n2. \u8a55\u4fa1\u6307\u6a19\n\u4eca\u56de\u306e\u8a55\u4fa1\u6307\u6a19\u306fMean Average Precision @12\u306b\u306a\u308a\u307e\u3059\uff0e\n\n\u8a73\u3057\u304f\u306f\u30ea\u30f3\u30af\u5148\u306b\u66f8\u304b\u308c\u3066\u3044\u307e\u3059\u304c\uff0cMAP(\u5e73\u5747\u9069\u5408\u7387)\u306e\u6d3e\u751f\u7cfb\u306b\u306a\u308a\u307e\u3059\uff0e\n\u9069\u5408\u7387\u3068\u306f\uff0cF\u5024\u3084ROC\u3067\u3044\u3046Precision\u306e\u3053\u3068\u3067\u3059\uff0e\u65e5\u672c\u8a9e\u3067\u306e\u8aac\u660e\u3084\u95a2\u9023\u306e\u8aac\u660e\u304c\u5145\u5b9f\u3057\u3066\u3044\u308b\u306e\u3067\uff0c\u3053\u3053\u3067\u306e\u8aac\u660e\u306f\u7701\u304d\u307e\u3059\uff0e\n\u307e\u305f\uff0c\u63d0\u51fa\u30d5\u30a1\u30a4\u30eb\u306e\u5f62\u5f0f\u306f\uff0cdisplay_id\u3068ad_id\u306e\u5bfe\u5fdc\u3092CSV\u3067\u8868\u73fe\u3057\uff0cad_id\u306fspace-delimited\u306e\u30ea\u30b9\u30c8\u306b\u306a\u308a\u307e\u3059\uff0e\ndisplay_id,ad_id\n16874594,66758 150083 162754 170392 172888 180797\n16874595,8846 30609 143982\n16874596,11430 57197 132820 153260 173005 288385 289122 289915\netc.\n\n\n3. \u30c7\u30fc\u30bf\u306e\u7d39\u4ecb\n\u4eca\u56de\u306e\u30c7\u30fc\u30bf\u306f\u975e\u5e38\u306b\u591a\u304f\u306e\u30d5\u30a1\u30a4\u30eb\u306b\u5206\u65ad\u3055\u308c\u305f\u6642\u7cfb\u5217\uff0c\u30ab\u30c6\u30b4\u30ea\u30c7\u30fc\u30bf\u3067\u3059\uff0e\u30e6\u30fc\u30b6\u30fc\u306e\u30da\u30fc\u30b8\u95b2\u89a7\u3068\u30af\u30ea\u30c3\u30af\u5c65\u6b74\u304c\uff0c\u30a2\u30e1\u30ea\u30ab\u306e\u8907\u6570\u30b5\u30a4\u30c8\u306b\u6e21\u3063\u30666\u670814\u304b\u308928\u65e5\u307e\u3067\u306e\u7d04\uff12\u9031\u9593\u304c\u542b\u307e\u308c\u3066\u3044\u307e\u3059\uff0e\u8a73\u7d30\u306f\u6b21\u306e\u901a\u308a\u3067\u3059\uff0e\n\u30c7\u30fc\u30bf\u306b\u306f\u7279\u5b9a\u30b3\u30f3\u30c6\u30ad\u30b9\u30c8\u306e\u30e6\u30fc\u30b6\u30fc\u3054\u3068\u306e\u30ec\u30b3\u30e1\u30f3\u30c7\u30fc\u30b7\u30e7\u30f3\u5185\u5bb9\u304c\u542b\u307e\u308c\u3066\u3044\u307e\u3059\uff0e\u3053\u3053\u3067\u3044\u3046\u30b3\u30f3\u30c6\u30ad\u30b9\u30c8\u3068\u306f\uff0c\u30e6\u30fc\u30b6\u30fc\u3078\u306e\u30ec\u30b3\u30e1\u30f3\u30c7\u30fc\u30b7\u30e7\u30f3\u30bb\u30c3\u30c8\u3067\u3059\uff0e\u305d\u308c\u305e\u308c\u306e\u30b3\u30f3\u30c6\u30ad\u30b9\u30c8\u306fdisplay_id\u306b\u3088\u3063\u3066\u8868\u73fe\u3055\u308c\u307e\u3059\uff0e\u307e\u305f\uff0c\u5404display_id\u3054\u3068\u306b\u5c11\u306a\u304f\u3068\u3082\uff11\u3064\u306e\u30e6\u30fc\u30b6\u30fc\u304c\u30af\u30ea\u30c3\u30af\u3057\u305f\u30ec\u30b3\u30e1\u30f3\u30c7\u30fc\u30b7\u30e7\u30f3\u304c\u542b\u307e\u308c\u3066\u3044\u307e\u3059\uff0e\u4eca\u56de\u306e\u30b3\u30f3\u30da\u3067\u306f\uff0c\u964d\u9806\u306b\u30af\u30ea\u30c3\u30af\u4e88\u6e2c\u3092\u4e26\u3079\u308b\u3053\u3068\u3067\uff0c\u30ec\u30b3\u30e1\u30f3\u30c7\u30fc\u30b7\u30e7\u30f3\u306e\u30e9\u30f3\u30ad\u30f3\u30b0\u3092\u6c7a\u5b9a\u3059\u308b\u3053\u3068\u304c\u76ee\u6a19\u3067\u3059\uff0e\n\u7279\u7b46\u3059\u3079\u304d\u90e8\u5206\u3068\u3057\u3066\uff0c\u4eca\u56de\u306e\u30c7\u30fc\u30bf\u306f\u975e\u5e38\u306b\u5927\u304d\u306a\u30ea\u30ec\u30fc\u30b7\u30e7\u30ca\u30eb\u30c7\u30fc\u30bf\u3067\u3042\u308b\u3053\u3068\u304c\u6319\u3052\u3089\u308c\u307e\u3059\uff0e\u30c6\u30fc\u30d6\u30eb\u306e\u4e00\u90e8\u3092\u898b\u308b\u3068\u30e1\u30e2\u30ea\u306b\u4e57\u308b\u307b\u3069\u5c0f\u898f\u6a21\u3067\u3059\u304c\uff0c\u30da\u30fc\u30b8\u30d3\u30e5\u30fc\u306e\u30c7\u30fc\u30bf\u9577\u306f2 billion\u884c\u4ee5\u4e0a\u3042\u308a\uff0c100GB\u3082\u306e\u5727\u7e2e\u3055\u308c\u3066\u3044\u306a\u3044\u30c7\u30fc\u30bf\u3067\u3059\uff0e\n\n\u30c7\u30fc\u30bf\u30d5\u30a3\u30fc\u30eb\u30c9\n\u30c7\u30fc\u30bf\u5185\u3067\u306f\u30e6\u30fc\u30b6\u306f\u30e6\u30cb\u30fc\u30af\u306auuid\u306b\u3088\u308a\u8868\u73fe\u3055\u308c\u307e\u3059\uff0e\u30e6\u30fc\u30b6\u304c\u898b\u308b\u3053\u3068\u306e\u3067\u304d\u308b\u30b5\u30a4\u30c8\u306fdocument_id\u3067\u8868\u73fe\u3055\u308c\u307e\u3059\uff0e\u5404\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u306b\u306fad_id\u3067\u793a\u3057\u305f\u5e83\u544a\u304c\u5b58\u5728\u3057\u307e\u3059\uff0e\u305d\u308c\u305e\u308c\u306e\u5e83\u544a\u306fadvertiser_id\u3067\u793a\u3057\u305f\u5e83\u544a\u4e3b\u304b\u3089\u63d0\u4f9b\u3055\u308c\u305fcampaign_id\u3092\u6301\u3061\u307e\u3059\uff0edocument_id\u306e\u30e1\u30bf\u30c7\u30fc\u30bf\u3082\u5b58\u5728\u3057\u307e\u3059\uff0e\u3069\u306e\u5546\u54c1\u304c\u6ce8\u76ee\u3055\u308c\u305f\u304b\uff0c\u30ab\u30c6\u30b4\u30ea\u306e\u5206\u985e\uff0c\u6ce8\u76ee\u3057\u305f\u30c8\u30d4\u30c3\u30af\uff0c\u305d\u3057\u3066document_id\u306e\u63d0\u4f9b\u8005\u3067\u3059\uff0e\n\n\u30d5\u30a1\u30a4\u30eb\u306e\u8a73\u7d30\n\u6b21\u306b\u5404\u30d5\u30a1\u30a4\u30eb\u306b\u3064\u3044\u3066\u8aac\u660e\u3057\u307e\u3059\uff0e\n\u4eca\u56de\u306e\u30d5\u30a1\u30a4\u30eb\u306f\u5927\u304d\u304f\u308f\u3051\u30666\u7a2e\u985e\u5b58\u5728\u3057\u307e\u3059\uff0e\n\u5f53\u7136\u3067\u3059\u304c\uff0c\u5404\u30c7\u30fc\u30bf\u306f\u533f\u540d\u5316\u3055\u308c\uff0c\u30e6\u30fc\u30b6\u500b\u4eba\u304c\u7279\u5b9a\u3055\u308c\u306a\u3044\u3088\u3046\u51e6\u7406\u3055\u308c\u3066\u3044\u307e\u3059\uff0e\n\u30001. page_views.csv\n\u30e6\u30fc\u30b6\u304c\u8a2a\u308c\u305f\u8a18\u4e8b\u306e\u30c7\u30fc\u30bf\u3067\u3059\uff0e\u30b9\u30da\u30fc\u30b9\u524a\u6e1b\u306e\u305f\u3081\uff0c\u5404\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u306e\u30bf\u30a4\u30e0\u30b9\u30bf\u30f3\u30d7\u306f\u521d\u56de\u8a2a\u554f\u306e\u307f\u8a18\u8f09\u3055\u308c\u3066\u3044\u307e\u3059\uff0e\u5b9f\u969b\u306eepoch\u6642\u9593\u3092\u5fa9\u5143\u3057\u305f\u3044\u5834\u5408\u306f\uff0ctimestamp\u30781465876799998\u3092\u52a0\u7b97\u3057\u3066\u304f\u3060\u3055\u3044\uff0e\n\nuuid\ndocument_id\ntimestampe\nplatform\ngeo_location\ntraffic_source\n\n\u30002. clicks_train.csv\n\u5e83\u544a\u304c\u30af\u30ea\u30c3\u30af\u3055\u308c\u305f\u5c65\u6b74\u3067\u3059\uff0e\n\ndisplay_id\nas_id\nclicked\n\n\u540c\u69d8\u306bclicks_test.csv\u3082\u63d0\u4f9b\u3055\u308c\u3066\u3044\u307e\u3059\u304c\uff0c\u3053\u3061\u3089\u306b\u306fclicked\uff0c\u3064\u307e\u308a\u6b63\u89e3\u30c7\u30fc\u30bf\u304c\u3064\u3044\u3066\u3044\u307e\u305b\u3093\uff0e\u3053\u3061\u3089\u306e\u30d5\u30a1\u30a4\u30eb\u304b\u3089clicked\u306b\u95a2\u3057\u3066\u4e88\u6e2c\u3059\u308b\u30e2\u30c7\u30eb\u3092\u4f5c\u308b\u3053\u3068\u304c\u4eca\u56de\u306e\u76ee\u6a19\u3067\u3059\uff0e\u5404display_id\u306f\uff11\u56de\u306e\u307f\u30af\u30ea\u30c3\u30af\u3055\u308c\u3066\u3044\u307e\u3059\uff0e\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u306edisplay_id\u306b\u306f\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u5168\u4f53\u306e\u30bf\u30a4\u30e0\u30d5\u30ec\u30fc\u30e0\u3092\u542b\u3093\u3067\u3044\u307e\u3059\uff0e\n\u30003. events.csv\ndisplay_id\u306e\u30b3\u30f3\u30c6\u30ad\u30b9\u30c8\u3092\u63d0\u4f9b\u3057\u307e\u3059\uff0e\u3053\u3061\u3089\u306e\u5185\u5bb9\u306ftrain, test\u5171\u901a\u3067\u3059\uff0e\n\ndispaly_id\nuuid\ndocument_id\ntimestamp\nplatform\ngeo_localtion\n\n\u30004. promoted_content.csv\n\u5e83\u544a\u306e\u8a73\u7d30\u3092\u63d0\u4f9b\u3057\u307e\u3059\uff0e\n\nad_id\ndocument_id\ncampaign_id\nadvertiser_id\n\n\ndocuments_meta.csv\ndocument\u306e\u8a73\u7d30\u60c5\u5831\u3067\u3059\uff0e\n\n\ndocument_id\nsource_id\npublisher_id\npublish_time\n\n\ndocuments_topics.csv, documents_entities.csv, documents_categories.csv\ndocument\u9593\u306e\u95a2\u9023\u6027\u306a\u3069\u3092\u542b\u3093\u3067\u3044\u307e\u3059\uff0e\u8a73\u3057\u3044\u60c5\u5831\u306f\u6b21\u306e\u901a\u308a\u3067\u3059\uff0e\n\n\n\n4. Forum\n\n4.1. \u30e1\u30a4\u30f3\u30c7\u30fc\u30bf(click\u60c5\u5831)\u306e\u89e3\u6790\n\u30e1\u30a4\u30f3\u3068\u306a\u308b\u30c7\u30fc\u30bf\u306e\u89e3\u6790\u3092\u884c\u3044\u307e\u3059\uff0e\n\u307e\u305a\u306f\u30d5\u30a1\u30a4\u30eb\u306e\u78ba\u8a8d\u304b\u3089\uff0c\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\nimport os\nimport gc # We're gonna be clearing memory a lot\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline\n\np = sns.color_palette()\n\nprint('# File sizes')\nfor f in os.listdir('../input'):\n    if 'zip' not in f:\n        print(f.ljust(30) + str(round(os.path.getsize('../input/' + f) / 1000000, 2)) + 'MB')\n\n# File sizes\npage_views_sample.csv         454.35MB\ndocuments_meta.csv            89.38MB\ndocuments_categories.csv      118.02MB\nevents.csv                    1208.55MB\nclicks_test.csv               506.95MB\npromoted_content.csv          13.89MB\ndocuments_topics.csv          339.47MB\ndocuments_entities.csv        324.1MB\nsample_submission.csv         273.14MB\nclicks_train.csv              1486.73MB\n\n\u591a\u304f\u306eCSV\u30d5\u30a1\u30a4\u30eb\u304c\u3042\u308b\u3053\u3068\u304c\u308f\u304b\u308a\u307e\u3059\uff0e\u6b21\u306bclicks_train, clicks_test\u306b\u307e\u3068\u3092\u7d5e\u3063\u3066\u89e3\u6790\u3057\u3066\u3044\u304d\u307e\u3059\uff0e\ndf_train = pd.read_csv('../input/clicks_train.csv')\ndf_test = pd.read_csv('../input/clicks_test.csv')\nsizes_train = df_train.groupby('display_id')['ad_id'].count().value_counts()\nsizes_test = df_test.groupby('display_id')['ad_id'].count().value_counts()\nsizes_train = sizes_train / np.sum(sizes_train)\nsizes_test = sizes_test / np.sum(sizes_test)\n\nplt.figure(figsize=(12,4))\nsns.barplot(sizes_train.index, sizes_train.values, alpha=0.8, color=p[0], label='train')\nsns.barplot(sizes_test.index, sizes_test.values, alpha=0.6, color=p[1], label='test')\nplt.legend()\nplt.xlabel('Number of Ads in display', fontsize=12)\nplt.ylabel('Proportion of set', fontsize=12)\n\n\u5b9f\u884c\u7d50\u679c\u306f\u6b21\u306e\u901a\u308a\n\ndisplay\u306b\u542b\u307e\u308c\u308b\u5e83\u544a\u6570\u306e\u6bd4\u7387\u304c\u53ef\u8996\u5316\u3055\u308c\u307e\u3057\u305f\uff0e\n\u6b21\u306b\u540c\u69d8\u306e\u5e83\u544a\u6570\u304c\u5168\u4f53\u3067\u4f55\u56de\u51fa\u3066\u3044\u308b\u304b\u3092\u30d2\u30b9\u30c8\u30b0\u30e9\u30e0\u3067\u898b\u3066\u3044\u304d\u307e\u3059\uff0e\nad_usage_train = df_train.groupby('ad_id')['ad_id'].count()\n\nfor i in [2, 10, 50, 100, 1000]:\n    print('Ads that appear less than {} times: {}%'.format(i, round((ad_usage_train < i).mean() * 100, 2)))\n\nplt.figure(figsize=(12, 6))\nplt.hist(ad_usage_train.values, bins=50, log=True)\nplt.xlabel('Number of times ad appeared', fontsize=12)\nplt.ylabel('log(Count of displays with ad)', fontsize=12)\nplt.show()\n\nAds that appear less than 2 times: 22.69%\nAds that appear less than 10 times: 61.74%\nAds that appear less than 50 times: 86.93%\nAds that appear less than 100 times: 91.04%\nAds that appear less than 1000 times: 97.45%\n\n\n\u5927\u591a\u6570\u306e\u5e83\u544a\u306f\u5c11\u306a\u3044\u56de\u6570\u8868\u793a\u3055\u308c\u3066\u304a\u308a\uff0c\u4f55\u5ea6\u3082\u8868\u793a\u3055\u308c\u3066\u3044\u308b\u5e83\u544a\u306f\u6bd4\u8f03\u7684\u5c11\u6570\u3067\u3042\u308b\u3053\u3068\u304c\u308f\u304b\u308a\u307e\u3057\u305f\uff0e\n\u3053\u308c\u306f\u3064\u307e\u308a\uff0c\u30e6\u30fc\u30b6\u304c\u30af\u30ea\u30c3\u30af\u3057\u305f\u304b\u3069\u3046\u304b\u524d\u4f8b\u306e\u5c11\u306a\u3044\u30c7\u30fc\u30bf\u304b\u3089\uff0c\u30e6\u30fc\u30b6\u306e\u884c\u52d5\u3092\u63a8\u5b9a\u3059\u308b\u5fc5\u8981\u304c\u3042\u308b\uff0c\u3068\u3044\u3046\u3053\u3068\u3067\u3059\uff0e\n\u6700\u5f8c\u306b\uff0ctest, train\u3067\u91cd\u8907\u3057\u3066\u3044\u308b\u5e83\u544a\u306e\u6bd4\u7387\u3092\u8abf\u3079\u307e\u3059\uff0e\nad_prop = len(set(df_test.ad_id.unique()).intersection(df_train.ad_id.unique())) / len(df_test.ad_id.unique())\nprint('Proportion of test ads in test that are in training: {}%'.format(round(ad_prop * 100, 2)))\n\nProportion of test ads in test that are in training: 82.87%\n\n82%\u306e\u5e83\u544a\u304ctest\u3067\u3082\u51fa\u3066\u3044\u308b\u3053\u3068\u304c\u308f\u304b\u308a\u307e\u3057\u305f\uff0e\n\u3053\u308c\u3089\u306e\u5e83\u544a\u60c5\u5831\u306b\u57fa\u3065\u3044\u3066\u4e88\u6e2c\u30e2\u30c7\u30eb\u3092\u4f5c\u6210\u3057\u3066\u3044\u3051\u3070\u826f\u3044\u304b\u3082\u3057\u308c\u307e\u305b\u3093\uff0e\n\nEvents\n\u30bf\u30a4\u30e0\u30b9\u30bf\u30f3\u30d7\u3084\u5730\u7406\u60c5\u5831\u306e\u89e3\u6790\u306b\u3064\u3044\u3066\u306f\uff0c\u5f8c\u8ff0\u306e\u89e3\u6790\u3067\u8a73\u7d30\u306b\u307e\u3068\u307e\u3063\u3066\u3044\u307e\u3059\uff0e\u3053\u3053\u3067\u306f\uff0cevents\u306b\u3064\u3044\u3066\u89e3\u6790\u3057\u3066\u3044\u304d\u307e\u3059\uff0e\ntry:del df_train,df_test # Being nice to Azure\nexcept:pass;gc.collect()\n\nevents = pd.read_csv('../input/events.csv')\nprint('Shape:', events.shape)\nprint('Columns', events.columns.tolist())\nevents.head()\n\ndisplay_id  uuid    document_id timestamp   platform    geo_location\n0   1   cb8c55702adb93  379743  61  3   US>SC>519\n1   2   79a85fa78311b9  1794259 81  2   US>CA>807\n2   3   822932ce3d8757  1179111 182 2   US>MI>505\n3   4   85281d0a49f7ac  1777797 234 2   US>WV>564\n4   5   8d0daef4bf5b56  252458  338 2   SG>00\n\n\u30c7\u30fc\u30bf\u306e\u4e2d\u8eab\u304c\u308f\u304b\u308a\u307e\u3057\u305f\uff0e\u6b21\u306bplatform\u306b\u3064\u3044\u3066\u898b\u3066\u3044\u304d\u307e\u3059\uff0e\nplat = events.platform.value_counts()\n\nprint(plat)\nprint('\\nUnique values of platform:', events.platform.unique())\n\n2     10684579\n1      8747280\n3      3032907\n2       291699\n1       279988\n3        83668\n\\N           5\nName: platform, dtype: int64\n\nUnique values of platform: [3 2 1 '2' '1' '3' '\\\\N']\n\n\u7d50\u679c\u304b\u3089\uff0c1, 2, 3\u306eplatform\u304c\uff0cfloat, string\u3069\u3061\u3089\u3082\u540c\u69d8\u306b\u4f55\u5ea6\u3082\u30ea\u30d4\u30fc\u30c8\u3055\u308c\u3066\u3044\u308b\u3053\u3068\u304c\u308f\u304b\u308a\u307e\u3059\uff0e\n\u3055\u3089\u306bplatform\u306b\u3064\u3044\u3066\u898b\u3066\u3044\u304d\u307e\u3059\uff0e\nevents.platform = events.platform.astype(str)\nplat = events.platform.value_counts()\n\nplt.figure(figsize=(12,4))\nsns.barplot(plat.index, plat.values, alpha=0.8, color=p[2])\nplt.xlabel('Platform', fontsize=12)\nplt.ylabel('Occurence count', fontsize=12)\n\n\n1, 2, 3\u306eplatform\u304c\u4f55\u3092\u793a\u3057\u3066\u3044\u308b\u304b\u306f\u5b9a\u304b\u3067\u306f\u306a\u3044\u3067\u3059\u304c\uff0c\u304a\u305d\u3089\u304fPC, phone, tablet\u306e\uff13\u7a2e\u985e\u3060\u308d\u3046\u3068\u3044\u3046\u3053\u3068\u304c\u4e88\u6e2c\u3067\u304d\u307e\u3059\uff0e\n\\N\u3084string\u578b\u306e\u756a\u53f7\u306f\u4f55\u304b\u30a8\u30e9\u30fc\u304c\u767a\u751f\u3057\u3066\u3067\u304d\u305f\u7570\u5e38\u5024\u3067\u3057\u3087\u3046\u304b\uff0e\u3053\u3053\u3067\u306f\u3053\u308c\u4ee5\u4e0a\u4e88\u6e2c\u3059\u308b\u3053\u3068\u306f\u96e3\u3057\u305d\u3046\u3067\u3059\uff0e\n\u6b21\u306bUUID\u306b\u3064\u3044\u3066\u6df1\u6398\u308a\u3057\u3066\u3044\u304d\u307e\u3059\uff0e\nuuid_counts = events.groupby('uuid')['uuid'].count().sort_values()\n\nprint(uuid_counts.tail())\n\nfor i in [2, 5, 10]:\n    print('Users that appear less than {} times: {}%'.format(i, round((uuid_counts < i).mean() * 100, 2)))\n\nplt.figure(figsize=(12, 4))\nplt.hist(uuid_counts.values, bins=50, log=True)\nplt.xlabel('Number of times user appeared in set', fontsize=12)\nplt.ylabel('log(Count of users)', fontsize=12)\nplt.show()\n\nuuid\nef7761dd22277c    38\n45d23867dbe3b3    38\nc0bd502c7a479f    42\n2759b057797f02    46\nb88553e3a2aa29    49\nName: uuid, dtype: int64\nUsers that appear less than 2 times: 88.42%\nUsers that appear less than 5 times: 99.51%\nUsers that appear less than 10 times: 99.96%\n\n\n\u540c\u4e00\u306e\u30e6\u30fc\u30b6\u304c\u51fa\u3066\u304f\u308b\u56de\u6570\u306f\u6570\u5341\u56de\u7a0b\u5ea6\u306e\u3088\u3046\u3067\u3059\uff0e\u307b\u3068\u3093\u3069\u304c\u6570\u56de\u7a0b\u5ea6\u306e\u767b\u5834\u6570\u306a\u306e\u3067\uff0c\u30e6\u30fc\u30b6\u306b\u57fa\u3065\u3044\u305f\u4e88\u6e2c\u30e2\u30c7\u30eb\u3092\u4f5c\u6210\u3059\u308b\u3053\u3068\u306f\u96e3\u3057\u305d\u3046\u3067\u3059\uff0e\n\u307e\u305f\uff0c\u5354\u8abf\u30d5\u30a3\u30eb\u30bf\u30ea\u30f3\u30b0\u306e\u3088\u3046\u306b\uff0c\u30e6\u30fc\u30b6\u306b\u7d10\u3065\u3044\u305f\u89e3\u6790\u3092\u5168\u3066\u306e\u7d44\u307f\u5408\u308f\u305b\u306b\u304a\u3044\u3066\u5b9f\u884c\u3059\u308b\u305f\u3081\u306b\u306f\uff0c\u30e1\u30e2\u30ea\u3092\u5927\u304d\u304f\u6d88\u8cbb\u3057\u305d\u3046\u3067\u3059\uff0e\n\nCategories\nOutbrain\u304c\u4e8b\u524d\u306b\u30af\u30e9\u30b9\u30bf\u30ea\u30f3\u30b0\u3057\u305f\u7d50\u679c\u3092\u63d0\u4f9b\u3057\u3066\u3044\u307e\u3059\uff0e\n\u30c8\u30d4\u30c3\u30af\u30c7\u30fc\u30bf\u3068\u30ab\u30c6\u30b4\u30ea\u30c7\u30fc\u30bf\u306b\u3064\u3044\u3066\uff0c\u51fa\u73fe\u983b\u5ea6\u3092\u53ef\u8996\u5316\u3057\u3066\u3044\u304d\u307e\u3059\uff0e\ntry:del events\nexcept:pass;gc.collect()\n\ntopics = pd.read_csv('../input/documents_topics.csv')\nprint('Columns:',topics.columns.tolist())\nprint('Number of unique topics:', len(topics.topic_id.unique()))\n\ntopics.head()\n\ndocument_id topic_id    confidence_level\n0   1595802 140 0.073113\n1   1595802 16  0.059416\n2   1595802 143 0.045421\n3   1595802 170 0.038867\n4   1524246 113 0.196450\n\n\u6b21\u306bconfidence_level\u306b\u3064\u3044\u3066\u7167\u6e96\u306b\u4e26\u3079\u307e\u3059\uff0e\ntopic_ids = topics.groupby('topic_id')['confidence_level'].count().sort_values()\n\nfor i in [10000, 50000, 100000, 200000]:\n    print('Number of topics that appear more than {} times: {}'\n          .format(i, (topic_ids > i).sum()))\n\nplt.figure(figsize=(12, 4))\nsns.barplot(topic_ids.index, topic_ids.values, order=topic_ids.index, alpha=1, color=p[5])\nplt.xlabel('Document Topics', fontsize=12)\nplt.ylabel('Total occurences', fontsize=12)\nplt.show()\n\nNumber of topics that appear more than 10000 times: 201\nNumber of topics that appear more than 50000 times: 86\nNumber of topics that appear more than 100000 times: 22\nNumber of topics that appear more than 200000 times: 3\n\n\n\u30bc\u30ed\u4ed8\u8fd1\u304b\u3089300000\u307e\u3067\u5927\u304d\u304f\u958b\u3044\u3066\u3044\u308b\u3053\u3068\u304c\u308f\u304b\u308a\u307e\u3059\uff0e\ncat = pd.read_csv('../input/documents_categories.csv')\nprint('Columns:', cat.columns.tolist())\nprint('Number of unique categories:', len(cat.category_id.unique()))\n\ncat_ids = cat.groupby('category_id')['confidence_level'].count().sort_values()\n\nfor i in [1000, 10000, 50000, 100000]:\n    print('Number of categories that appear more than {} times: {}'\n          .format(i, (cat_ids > i).sum()))\n\nplt.figure(figsize=(12, 4))\nsns.barplot(cat_ids.index, cat_ids.values, order=cat_ids.index, alpha=1, color=p[3])\nplt.xlabel('Document Categories', fontsize=12)\nplt.ylabel('Total occurences', fontsize=12)\nplt.show()\n\nColumns: ['document_id', 'category_id', 'confidence_level']\nNumber of unique categories: 97\nNumber of categories that appear more than 1000 times: 88\nNumber of categories that appear more than 10000 times: 65\nNumber of categories that appear more than 50000 times: 35\nNumber of categories that appear more than 100000 times: 15\n\n\n\u30ab\u30c6\u30b4\u30ea\u30c7\u30fc\u30bf\u306b\u95a2\u3057\u3066\u3082\u53ef\u8996\u5316\u304c\u3067\u304d\u307e\u3057\u305f\uff0e\n\n4.2. \u5730\u7406\u30c7\u30fc\u30bf\u306e\u5206\u6790\n\u56fd\u3054\u3068\u306e\u5206\u6790\uff0c\u30a2\u30e1\u30ea\u30ab\u56fd\u5185\u306b\u6ce8\u76ee\u3057\u305f\u5206\u6790\u306b\u3064\u3044\u3066\u884c\u3044\u307e\u3059\uff0e\n\u30c7\u30fc\u30bf\u3092\u8aad\u307f\u8fbc\u307f\u307e\u3059\uff0e\nimport pandas as pd\nimport warnings\nwarnings.filterwarnings('ignore')\n\npage_views_sample_df = pd.read_csv(\"../input/page_views_sample.csv\", usecols=['uuid', 'geo_location'])\n# Drop NAs\npage_views_sample_df.dropna(inplace=True)\n# Drop EU code\npage_views_sample_df = page_views_sample_df.loc[~page_views_sample_df.geo_location.isin(['EU', '--']), :]\n# Drop duplicates\npage_views_sample_df = page_views_sample_df.drop_duplicates('uuid', keep='first')\n\n\u6b21\u306b\u56fd\u3054\u3068\u306b\u30ab\u30a6\u30f3\u30c8\u3057\u307e\u3059\uff0e\ncountry = page_views_sample_df.copy()\ncountry.columns = ['uuid', 'Country']\ncountry.Country = country.Country.str[:2]\ncountry.loc[:, 'UserCount'] = country.groupby('Country')['Country'].transform('count')\ncountry = country.loc[:, ['Country', 'UserCount']].drop_duplicates('Country', keep='first')\ncountry.sort_values('UserCount', ascending=False, inplace=True)\ncountry.head(10)\n\n\u5730\u56f3\u30c7\u30fc\u30bf\u306b\u30d7\u30ed\u30c3\u30c8\u3059\u308b\u305f\u3081\u56fd\u540d\u3092\u624b\u6253\u3061\u3067\u5165\u308c\u307e\u3059\uff0e\ncountryCode2Name = {u'BD': u'Bangladesh', u'BE': u'Belgium', u'BF': u'Burkina Faso', u'BG': u'Bulgaria', u'BA': u'Bosnia and Herzegovina', u'BB': u'Barbados', u'WF': u'Wallis and Futuna', u'BL': u'Saint Barth\\xe9lemy', u'BM': u'Bermuda', u'BN': u'Brunei Darussalam', u'BO': u'Bolivia, Plurinational State of', u'BH': u'Bahrain', u'BI': u'Burundi', u'BJ': u'Benin', u'BT': u'Bhutan', u'JM': u'Jamaica', u'BV': u'Bouvet Island', u'BW': u'Botswana', u'WS': u'Samoa', u'BQ': u'Bonaire, Sint Eustatius and Saba', u'BR': u'Brazil', u'BS': u'Bahamas', u'JE': u'Jersey', u'BY': u'Belarus', u'BZ': u'Belize', u'RU': u'Russian Federation', u'RW': u'Rwanda', u'RS': u'Serbia', u'TL': u'Timor-Leste', u'RE': u'R\\xe9union', u'TM': u'Turkmenistan', u'TJ': u'Tajikistan', u'RO': u'Romania', u'TK': u'Tokelau', u'GW': u'Guinea-Bissau', u'GU': u'Guam', u'GT': u'Guatemala', u'GS': u'South Georgia and the South Sandwich Islands', u'GR': u'Greece', u'GQ': u'Equatorial Guinea', u'GP': u'Guadeloupe', u'JP': u'Japan', u'GY': u'Guyana', u'GG': u'Guernsey', u'GF': u'French Guiana', u'GE': u'Georgia', u'GD': u'Grenada', u'GB': u'United Kingdom', u'GA': u'Gabon', u'GN': u'Guinea', u'GM': u'Gambia', u'GL': u'Greenland', u'GI': u'Gibraltar', u'GH': u'Ghana', u'OM': u'Oman', u'TN': u'Tunisia', u'JO': u'Jordan', u'HR': u'Croatia', u'HT': u'Haiti', u'HU': u'Hungary', u'HK': u'Hong Kong', u'HN': u'Honduras', u'HM': u'Heard Island and McDonald Islands', u'VE': u'Venezuela, Bolivarian Republic of', u'PR': u'Puerto Rico', u'PS': u'Palestine, State of', u'PW': u'Palau', u'PT': u'Portugal', u'KN': u'Saint Kitts and Nevis', u'PY': u'Paraguay', u'IQ': u'Iraq', u'PA': u'Panama', u'PF': u'French Polynesia', u'PG': u'Papua New Guinea', u'PE': u'Peru', u'PK': u'Pakistan', u'PH': u'Philippines', u'PN': u'Pitcairn', u'PL': u'Poland', u'PM': u'Saint Pierre and Miquelon', u'ZM': u'Zambia', u'EH': u'Western Sahara', u'EE': u'Estonia', u'EG': u'Egypt', u'ZA': u'South Africa', u'EC': u'Ecuador', u'IT': u'Italy', u'VN': u'Viet Nam', u'SB': u'Solomon Islands', u'ET': u'Ethiopia', u'SO': u'Somalia', u'ZW': u'Zimbabwe', u'SA': u'Saudi Arabia', u'ES': u'Spain', u'ER': u'Eritrea', u'ME': u'Montenegro', u'MD': u'Moldova, Republic of', u'MG': u'Madagascar', u'MF': u'Saint Martin (French part)', u'MA': u'Morocco', u'MC': u'Monaco', u'UZ': u'Uzbekistan', u'MM': u'Myanmar', u'ML': u'Mali', u'MO': u'Macao', u'MN': u'Mongolia', u'MH': u'Marshall Islands', u'MK': u'Macedonia, Republic of', u'MU': u'Mauritius', u'MT': u'Malta', u'MW': u'Malawi', u'MV': u'Maldives', u'MQ': u'Martinique', u'MP': u'Northern Mariana Islands', u'MS': u'Montserrat', u'MR': u'Mauritania', u'IM': u'Isle of Man', u'UG': u'Uganda', u'TZ': u'Tanzania, United Republic of', u'MY': u'Malaysia', u'MX': u'Mexico', u'IL': u'Israel', u'FR': u'France', u'AW': u'Aruba', u'SH': u'Saint Helena, Ascension and Tristan da Cunha', u'SJ': u'Svalbard and Jan Mayen', u'FI': u'Finland', u'FJ': u'Fiji', u'FK': u'Falkland Islands (Malvinas)', u'FM': u'Micronesia, Federated States of', u'FO': u'Faroe Islands', u'NI': u'Nicaragua', u'NL': u'Netherlands', u'NO': u'Norway', u'NA': u'Namibia', u'VU': u'Vanuatu', u'NC': u'New Caledonia', u'NE': u'Niger', u'NF': u'Norfolk Island', u'NG': u'Nigeria', u'NZ': u'New Zealand', u'NP': u'Nepal', u'NR': u'Nauru', u'NU': u'Niue', u'CK': u'Cook Islands', u'CI': u\"C\\xf4te d'Ivoire\", u'CH': u'Switzerland', u'CO': u'Colombia', u'CN': u'China', u'CM': u'Cameroon', u'CL': u'Chile', u'CC': u'Cocos (Keeling) Islands', u'CA': u'Canada', u'CG': u'Congo', u'CF': u'Central African Republic', u'CD': u'Congo, The Democratic Republic of the', u'CZ': u'Czech Republic', u'CY': u'Cyprus', u'CX': u'Christmas Island', u'CR': u'Costa Rica', u'CW': u'Cura\\xe7ao', u'CV': u'Cape Verde', u'CU': u'Cuba', u'SZ': u'Swaziland', u'SY': u'Syrian Arab Republic', u'SX': u'Sint Maarten (Dutch part)', u'KG': u'Kyrgyzstan', u'KE': u'Kenya', u'SS': u'South Sudan', u'SR': u'Suriname', u'KI': u'Kiribati', u'KH': u'Cambodia', u'SV': u'El Salvador', u'KM': u'Comoros', u'ST': u'Sao Tome and Principe', u'SK': u'Slovakia', u'KR': u'Korea, Republic of', u'SI': u'Slovenia', u'KP': u\"Korea, Democratic People's Republic of\", u'KW': u'Kuwait', u'SN': u'Senegal', u'SM': u'San Marino', u'SL': u'Sierra Leone', u'SC': u'Seychelles', u'KZ': u'Kazakhstan', u'KY': u'Cayman Islands', u'SG': u'Singapore', u'SE': u'Sweden', u'SD': u'Sudan', u'DO': u'Dominican Republic', u'DM': u'Dominica', u'DJ': u'Djibouti', u'DK': u'Denmark', u'DE': u'Germany', u'YE': u'Yemen', u'DZ': u'Algeria', u'US': u'United States', u'UY': u'Uruguay', u'YT': u'Mayotte', u'UM': u'United States Minor Outlying Islands', u'LB': u'Lebanon', u'LC': u'Saint Lucia', u'LA': u\"Lao People's Democratic Republic\", u'TV': u'Tuvalu', u'TW': u'Taiwan, Province of China', u'TT': u'Trinidad and Tobago', u'TR': u'Turkey', u'LK': u'Sri Lanka', u'LI': u'Liechtenstein', u'LV': u'Latvia', u'TO': u'Tonga', u'LT': u'Lithuania', u'LU': u'Luxembourg', u'LR': u'Liberia', u'LS': u'Lesotho', u'TH': u'Thailand', u'TF': u'French Southern Territories', u'TG': u'Togo', u'TD': u'Chad', u'TC': u'Turks and Caicos Islands', u'LY': u'Libya', u'VA': u'Holy See (Vatican City State)', u'VC': u'Saint Vincent and the Grenadines', u'AE': u'United Arab Emirates', u'AD': u'Andorra', u'AG': u'Antigua and Barbuda', u'AF': u'Afghanistan', u'AI': u'Anguilla', u'IS': u'Iceland', u'IR': u'Iran, Islamic Republic of', u'AM': u'Armenia', u'AL': u'Albania', u'AO': u'Angola', u'AQ': u'Antarctica', u'AS': u'American Samoa', u'AR': u'Argentina', u'AU': u'Australia', u'AT': u'Austria', u'IO': u'British Indian Ocean Territory', u'IN': u'India', u'AX': u'\\xc5land Islands', u'AZ': u'Azerbaijan', u'IE': u'Ireland', u'ID': u'Indonesia', u'UA': u'Ukraine', u'QA': u'Qatar', u'MZ': u'Mozambique', u'FX': u'France, Metropolitan', u'AN': u'Netherlands Antilles', u'A1': u'Anguilla'}\ncountry['CountryName'] = country['Country'].map(countryCode2Name)\n\n# Drop NAs\ncountry.dropna(inplace=True)\n\ncountry['CumulativePercentage'] = 100 * country.UserCount.cumsum()/country.UserCount.sum()\ncountry.reset_index(drop=True, inplace=True)\ncountry[['CountryName', 'UserCount', 'CumulativePercentage']].head(10)\n\n\u540d\u524d\u304c\u5165\u308a\u307e\u3057\u305f\uff0e\nCountryName UserCount   CumulativePercentage\n0   United States   7503199 81.582245\n1   Canada  372772  85.635393\n2   United Kingdom  280972  88.690400\n3   Australia   133158  90.138226\n4   India   90453   91.121721\n5   Philippines 55822   91.728674\n6   Germany 46026   92.229114\n7   South Africa    34046   92.599296\n8   France  29169   92.916450\n9   Singapore   29037   93.232170\n\n\u4e16\u754c\u5730\u56f3\u3067\u52d5\u7684\u306b\u898b\u3066\u3044\u304d\u307e\u3059\uff0e\nimport plotly.offline as py\npy.offline.init_notebook_mode()\n\ndata = [ dict(\n        type = 'choropleth',\n        locations = country['CountryName'],\n        z = country['UserCount'],\n        locationmode = 'country names',\n        text = country['CountryName'],\n        colorscale = [[0,\"rgb(153, 241, 243)\"],[0.005,\"rgb(16, 64, 143)\"],[1,\"rgb(0, 0, 0)\"]],\n        autocolorscale = False,\n        marker = dict(\n            line = dict(color = 'rgb(58,100,69)', width = 0.6)),\n            colorbar = dict(autotick = True, tickprefix = '', title = '# of Users')\n            )\n       ]\n\nlayout = dict(\n    title = 'Total number of users by country',\n    geo = dict(\n        showframe = False,\n        showcoastlines = True,\n        projection = dict(\n        type = 'equirectangular'\n        ),\n    margin = dict(b = 0, t = 0, l = 0, r = 0)\n            )\n    )\n\nfig = dict(data=data, layout=layout)\npy.iplot(fig, validate=False, filename='worldmap')\n\n\nnotebook\u3067\u5b9f\u884c\u3059\u308b\u3068\u30ab\u30fc\u30bd\u30eb\u64cd\u4f5c\u3067\u56fd\u306e\u30ab\u30a6\u30f3\u30c8\u3092\u78ba\u8a8d\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\uff0e\n\nUSA\u306b\u6ce8\u76ee\n\u307e\u305a\u306f\u30c7\u30fc\u30bf\u306e\u6574\u7406\u304b\u3089\uff0e\nusa = page_views_sample_df.loc[page_views_sample_df.geo_location.str[:2] == 'US', :]\nusa.columns = ['uuid', 'State']\n\nusa.State = usa.State.str[3:5]\n\n# Drop Data with missing state info\nusa = usa.loc[usa.State != '', :]\n\nusa.loc[:, 'UserCount'] = usa.groupby('State')['State'].transform('count')\nusa.loc[:, ['State', 'UserCount']] = usa.loc[:, ['State', 'UserCount']].drop_duplicates('State', keep='first')\nusa.sort_values('UserCount', ascending=False, inplace=True)\n\n\u5dde\u306e\u540d\u524d\u3092\u5165\u308c\u3066\u3044\u304d\u307e\u3059\uff0e\nstateCode2Name = {'AK': 'Alaska', 'AL': 'Alabama', 'AR': 'Arkansas', 'AS': 'American Samoa', 'AZ': 'Arizona', 'CA': 'California', 'CO': 'Colorado', 'CT': 'Connecticut', 'DC': 'District of Columbia', 'DE': 'Delaware', 'FL': 'Florida', 'GA': 'Georgia', 'GU': 'Guam', 'HI': 'Hawaii', 'IA': 'Iowa', 'ID': 'Idaho', 'IL': 'Illinois', 'IN': 'Indiana', 'KS': 'Kansas', 'KY': 'Kentucky', 'LA': 'Louisiana', 'MA': 'Massachusetts', 'MD': 'Maryland', 'ME': 'Maine', 'MI': 'Michigan', 'MN':'Minnesota', 'MO': 'Missouri', 'MP': 'Northern Mariana Islands', 'MS': 'Mississippi', 'MT': 'Montana', 'NA': 'National', 'NC': 'North Carolina', 'ND': 'North Dakota', 'NE':'Nebraska', 'NH': 'New Hampshire', 'NJ': 'New Jersey', 'NM': 'New Mexico', 'NV': 'Nevada', 'NY': 'New York', 'OH': 'Ohio', 'OK': 'Oklahoma', 'OR': 'Oregon', 'PA': 'Pennsylvania', 'PR': 'Puerto Rico', 'RI': 'Rhode Island', 'SC': 'South Carolina', 'SD': 'South Dakota', 'TN': 'Tennessee', 'TX': 'Texas', 'UT': 'Utah', 'VA': 'Virginia', 'VI': 'Virgin Islands', 'VT': 'Vermont', 'WA': 'Washington', 'WI': 'Wisconsin', 'WV': 'West Virginia', 'WY': 'Wyoming'}\nusa['StateName'] = usa['State'].map(stateCode2Name)\n# Drop NAs\nusa.dropna(inplace=True)\n\nusa['CumulativePercentage'] = 100 * usa.UserCount.cumsum()/usa.UserCount.sum()\nusa.reset_index(drop=True, inplace=True)\nusa[['StateName', 'UserCount', 'CumulativePercentage']].head(50)\n\n\u30a2\u30e1\u30ea\u30ab\u56fd\u5185\u3067\u306e\u30ab\u30a6\u30f3\u30c8\u3092\u53ef\u8996\u5316\u3057\u307e\u3059\uff0e\nimport plotly.offline as py\npy.offline.init_notebook_mode()\n\ndata = [ dict(\n        type = 'choropleth',\n        locations = usa['State'],\n        z = usa['UserCount'],\n        locationmode = 'USA-states',\n        text = usa['StateName'],\n        colorscale = [[0,\"rgb(153, 241, 243)\"],[0.33,\"rgb(16, 64, 143)\"],[1,\"rgb(0, 0, 0)\"]],\n        autocolorscale = False,\n        marker = dict(\n            line = dict(color = 'rgb(58,100,69)', width = 0.6)),\n            colorbar = dict(autotick = True, tickprefix = '', title = '# of Users')\n            )\n       ]\n\nlayout = dict(\n    title = 'Total number of users by state',\n    geo = dict(\n        scope='usa',\n        projection=dict( type='albers usa' ),\n        showlakes = True,\n        lakecolor = 'rgb(255, 255, 255)'),\n    )\n\nfig = dict(data=data, layout=layout)\npy.iplot(fig, validate=False, filename='USmap')\n\n\n\n4.3. Timestamp\u306e\u5206\u6790\ntimestamp\u306e\u89e3\u6790\u3092\u884c\u3044\u307e\u3059\uff0e\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline\n\nevents = pd.read_csv(\"../input/events.csv\", dtype=np.int32, index_col=0, usecols=[0,3])\nevents.head()\n\n\u3000\u3000\u3000\u3000\u3000\u3000timestamp \ndisplay_id  \n1   61\n2   81\n3   182\n4   234\n5   338\n\ndisplay_id\u3054\u3068\u306btimestamp\u304c\u3042\u308a\u307e\u3059\uff0e\nmilliseconds\u306e\u30bf\u30a4\u30e0\u30b9\u30bf\u30f3\u30d7\u3067\uff0c\u30c7\u30fc\u30bf\u306e\u7d39\u4ecb\u3067\u8aac\u660e\u3057\u305f\u3088\u3046\u306b\uff0c1970-01-01\u304b\u3089\u59cb\u307e\u3063\u3066\u3044\u307e\u3059\uff0e\n\u3064\u307e\u308a\u6642\u523b\u30bc\u30ed\u306f04:00 UTC, 14th June 2016\u306b\u5bfe\u5fdc\u3057\u3066\u3044\u307e\u3059\uff0e\ntrain = pd.merge(pd.read_csv(\"../input/clicks_train.csv\", dtype=np.int32, index_col=0).sample(frac=0.1),\n                 events, left_index=True, right_index=True)\ntest = pd.merge(pd.read_csv(\"../input/clicks_test.csv\", dtype=np.int32, index_col=0).sample(frac=0.1),\n                events, left_index=True, right_index=True)\n\nclicks\u30d5\u30a1\u30a4\u30eb\u304b\u3089\u30c7\u30fc\u30bf\u3092\u8aad\u307f\u8fbc\u307f\uff0c\ntest[\"hour\"] = (test.timestamp // (3600 * 1000)) % 24\ntest[\"day\"] = test.timestamp // (3600 * 24 * 1000)\n\ntrain[\"hour\"] = (train.timestamp // (3600 * 1000)) % 24\ntrain[\"day\"] = train.timestamp // (3600 * 24 * 1000)\n\nplt.figure(figsize=(12,4))\ntrain.hour.hist(bins=np.linspace(-0.5, 23.5, 25), label=\"train\", alpha=0.7, normed=True)\ntest.hour.hist(bins=np.linspace(-0.5, 23.5, 25), label=\"test\", alpha=0.7, normed=True)\nplt.xlim(-0.5, 23.5)\nplt.legend(loc=\"best\")\nplt.xlabel(\"Hour of Day\")\nplt.ylabel(\"Fraction of Events\")\n\n\u6642\u9593\u3092\u30d7\u30ed\u30c3\u30c8\u3057\u307e\u3059\uff0e\n\n\u30bf\u30a4\u30e0\u30b9\u30bf\u30f3\u30d7\u306e\u5206\u6563\u306b\u306f\u4f55\u304b\u3057\u3089\u4e00\u8cab\u6027\u304c\u3042\u308a\u305d\u3046\u3067\u3059\uff0etrain\u3068test\u306b\u306f\u308f\u305a\u304b\u306b\u9055\u3044\u304c\u898b\u53d7\u3051\u3089\u308c\u307e\u3059\uff0e\nplt.figure(figsize=(12,4))\ntrain.day.hist(bins=np.linspace(-.5, 14.5, 16), label=\"train\", alpha=0.7, normed=True)\ntest.day.hist(bins=np.linspace(-.5, 14.5, 16), label=\"test\", alpha=0.7, normed=True)\nplt.xlim(-0.5, 14.5)\nplt.legend(loc=\"best\")\nplt.xlabel(\"Days since June 14\")\nplt.ylabel(\"Fraction of Events\")\n\n\n\u65e5\u306b\u3061\u3067\u306ftrain\u3068test\u304c\u7570\u306a\u3063\u3066\u3044\u308b\u3053\u3068\u304c\u308f\u304b\u308a\u307e\u3059\uff0e\ntest\u30c7\u30fc\u30bf\u306e\u3046\u3061\u534a\u5206\u4ee5\u4e0a\u306f13, 14\u65e5\u306b\u30b5\u30f3\u30d7\u30eb\u3055\u308c\u3066\u3044\u308b\u3053\u3068\u304c\u308f\u304b\u308a\u307e\u3059\uff0e\n\u305d\u3057\u3066\u6b8b\u308a\u306e\u534a\u5206\u306ftrain\u30c7\u30fc\u30bf\u3068\u540c\u69d8\u306e\u65e5\u306b\u30b5\u30f3\u30d7\u30eb\u3055\u308c\u3066\u3044\u308b\u3053\u3068\u304c\u308f\u304b\u308a\u307e\u3059\uff0e\n\u3055\u3089\u306b\u7406\u89e3\u3092\u6df1\u3081\u308b\u305f\u3081\uff0ctrain\u30c7\u30fc\u30bf\u306b\u95a2\u3057\u3066\uff0c\u65e5\u306b\u3061\u3068\u6642\u9593\u3067\u30d2\u30fc\u30c8\u30de\u30c3\u30d7\u3067\u53ef\u8996\u5316\u3057\u3066\u3044\u304d\u307e\u3059\uff0e\nplt.figure(figsize=(12,6))\nhour_day_counts = train.groupby([\"hour\", \"day\"]).count().ad_id.values.reshape(24,-1)\n# plot 2d hist in days and hours, with each day normalised to 1 \nplt.imshow((hour_day_counts / hour_day_counts.sum(axis=0)).T,\n           interpolation=\"none\", cmap=\"rainbow\")\nplt.xlabel(\"Hour of Day\")\nplt.ylabel(\"Days since June 14\")\n\n\n\u7e26\u8ef8\u306f\u65e5\u306b\u3061\u3067\u6a2a\u8ef8\u306f\u6642\u9593\u3067\u3059\uff0e\n\u540c\u69d8\u306btest\u3067\u53ef\u8996\u5316\u3057\u307e\u3059\uff0e\n# for completeness, the test set too:\nplt.figure(figsize=(12,6))\nhour_day_counts = test.groupby([\"hour\", \"day\"]).count().ad_id.values.reshape(24,-1)\n# plot 2d hist in days and hours, with each day normalised to 1 \nplt.imshow((hour_day_counts / hour_day_counts.sum(axis=0)).T,\n           interpolation=\"none\", cmap=\"rainbow\")\nplt.xlabel(\"Hour of Day\")\nplt.ylabel(\"Days since June 14\")\n\n\n# \u306f\u3058\u3081\u306b\n\u904e\u53bb\u306b\u53c2\u52a0\u3057\u305fKaggle\u306e\u60c5\u5831\u3092\u30a2\u30c3\u30d7\u3057\u3066\u3044\u304d\u307e\u3059\uff0e\n\u3053\u3053\u3067\u306f\uff0c[Outbrain Click Prediction](https://www.kaggle.com/c/outbrain-click-prediction)\u306e\u30c7\u30fc\u30bf\u7d39\u4ecb\u3068\u30d5\u30a9\u30fc\u30e9\u30e0\u3067\u306e\u76ee\u7acb\u3063\u305f\u8b70\u8ad6\u3092\u30d4\u30c3\u30af\u30a2\u30c3\u30d7\u3057\u307e\u3059\uff0e\n\u30b3\u30f3\u30da\u512a\u52dd\u8005\u306e\u30b3\u30fc\u30c9\u306b\u95a2\u3057\u3066\u306f\uff0c[Kaggle\u307e\u3068\u3081:Outbrain(\u5f8c\u7de8)]()\u306b\u307e\u3068\u3081\u3066\u304a\u308a\uff0c\u3053\u3061\u3089\u306f\u6982\u8981\uff0c\u5404\u30c7\u30fc\u30bf\u89e3\u6790\u306e\u307e\u3068\u3081\u306b\u306a\u308a\u307e\u3059\uff0e\n(\u73fe\u5728\u4f5c\u6210\u4e2d)\n\n\u672c\u8a18\u4e8b\u306fPython2.7, numpy 1.11, scipy 0.17, scikit-learn 0.18, matplotlib 1.5, seaborn 0.7, pandas 0.17\u3092\u4f7f\u7528\u3057\u3066\u3044\u307e\u3059\uff0e\njupyter notebook\u4e0a\u3067\u52d5\u4f5c\u78ba\u8a8d\u6e08\u307f\u3067\u3059\uff0e(%matplotlib inline\u306f\u9069\u5f53\u306b\u4fee\u6b63\u3057\u3066\u304f\u3060\u3055\u3044)\n\u30b5\u30f3\u30d7\u30eb\u30b9\u30af\u30ea\u30d7\u30c8\u3092\u5b9f\u884c\u3057\u305f\u969b\u306b\u30a8\u30e9\u30fc\u7b49\u3042\u3063\u305f\u5834\u5408\u306f\uff0c\u30b3\u30e1\u30f3\u30c8\u3044\u305f\u3060\u3051\u308b\u3068\u52a9\u304b\u308a\u307e\u3059\uff0e\n\n# \u76ee\u6b21\n1. \u6982\u8981\n2. \u8a55\u4fa1\u6307\u6a19\n3. \u30c7\u30fc\u30bf\u306e\u7d39\u4ecb\n4. kernels\n\n# \u80cc\u666f\n\n![front_page.png](https://qiita-image-store.s3.amazonaws.com/0/72093/9e8a979d-1ba9-86fe-2c14-3d10faf1442e.png)\n\n\u30a4\u30f3\u30bf\u30fc\u30cd\u30c3\u30c8\u4e0a\u3067\u306f\uff0c\u591a\u304f\u306e\u30e6\u30fc\u30b6\u30fc\u304c\u30b3\u30df\u30e5\u30cb\u30c6\u30a3\u3084\u7d4c\u9a13\u306b\u57fa\u3065\u304d\u884c\u52d5\u3057\uff0c\u65b0\u305f\u306a\u8a18\u4e8b\u3092\u767a\u898b\u3057\uff0c\u3055\u3089\u306b\u306f\u305d\u306e\u767a\u898b\u3057\u305f\u8a18\u4e8b\u3092\u5143\u306b\u6b21\u306e\u76ee\u7684\u5730\u3092\u76ee\u6307\u3057\u307e\u3059\uff0eOutbrain\u306f\u30b3\u30f3\u30c6\u30f3\u30c8\u30c7\u30ea\u30d0\u30ea\u30fc\u30d7\u30e9\u30c3\u30c8\u30d5\u30a9\u30fc\u30e0\u3092\u30e6\u30fc\u30b6\u30fc\u3078\u63d0\u4f9b\u3057\uff0c\u30e6\u30fc\u30b6\u30fc\u306e\u5fd7\u5411\u306b\u5408\u81f4\u3057\u305f\u5834\u6240\u3078\u5c0e\u3044\u3066\u3044\u307e\u3059\uff0e\nOutbrain\u3067\u306f250 billion\u3082\u306e\u30d1\u30fc\u30bd\u30ca\u30eb\u30ec\u30b3\u30e1\u30f3\u30c7\u30fc\u30b7\u30e7\u30f3\u3092\u6bce\u6708\u6570\u5343\u3082\u306e\u30b5\u30a4\u30c8\u3078\u884c\u3063\u3066\u3044\u307e\u3059\uff0e\u4eca\u56de\uff0ckaggler\u306b\u306f\u30e6\u30fc\u30b6\u30fc\u306e\u30af\u30ea\u30c3\u30af\u5c65\u6b74\u304b\u3089\u30e6\u30fc\u30b6\u30fc\u306e\u884c\u52d5\u3092\u4e88\u6e2c\u3057\u3066\u3082\u3089\u3044\u307e\u3059\uff0e\u305d\u3057\u3066\uff0c\u4eca\u307e\u3067\u4ee5\u4e0a\u306b\u30e6\u30fc\u30b6\u30fc\u304c\u6e80\u8db3\u3059\u308b\u7269\u8a9e\u3092\u63d0\u4f9b\u3059\u308b\u30ec\u30b3\u30e1\u30f3\u30c7\u30fc\u30b7\u30e7\u30f3\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u3092\u76ee\u6307\u3057\u307e\u3059\uff0e\n\n\u4eca\u56de\u306e\u7279\u5fb4\u7684\u306a\u70b9\u3068\u3057\u3066\u306f\uff0c\u4ee5\u4e0b\u304c\u6319\u3052\u3089\u308c\u307e\u3059\uff0e\n\n* \u5178\u578b\u7684\u306aClick Through Rate (CTR)\u3092\u6a5f\u68b0\u5b66\u7fd2\u3067\u4e88\u6e2c\u3059\u308b\u554f\u984c\n* timestamp\uff0c\u5730\u7406\u60c5\u5831\uff0c\u305d\u3057\u3066\u8907\u6570\u306e\u30ab\u30c6\u30b4\u30ea\u30c7\u30fc\u30bf\u304c\u8907\u96d1\u306b\u7d10\u3065\u3044\u3066\u3044\u308b\n* \u30c7\u30fc\u30bf\u306e\u7a2e\u985e\u304c\u591a\u304f\uff0c\u8907\u6570\u306e\u30d5\u30a1\u30a4\u30eb\u306b\u5206\u65ad\u3055\u308c\u3066\u3044\u308b\n* \u5354\u8abf\u30d5\u30a3\u30eb\u30bf\u30ea\u30f3\u30b0\u3084FFM\u3092\u30e1\u30a4\u30f3\u3068\u3057\u305f\u30a2\u30d7\u30ed\u30fc\u30c1\n\n# 2. \u8a55\u4fa1\u6307\u6a19\n\u4eca\u56de\u306e\u8a55\u4fa1\u6307\u6a19\u306f[Mean Average Precision @12](https://www.kaggle.com/wiki/MeanAveragePrecision)\u306b\u306a\u308a\u307e\u3059\uff0e\n\n![Screen Shot 2017-01-12 at 7.42.08.png](https://qiita-image-store.s3.amazonaws.com/0/72093/2c786463-51ef-fdd3-d588-9ef06030a684.png)\n\n\n\u8a73\u3057\u304f\u306f\u30ea\u30f3\u30af\u5148\u306b\u66f8\u304b\u308c\u3066\u3044\u307e\u3059\u304c\uff0cMAP(\u5e73\u5747\u9069\u5408\u7387)\u306e\u6d3e\u751f\u7cfb\u306b\u306a\u308a\u307e\u3059\uff0e\n\u9069\u5408\u7387\u3068\u306f\uff0cF\u5024\u3084ROC\u3067\u3044\u3046Precision\u306e\u3053\u3068\u3067\u3059\uff0e\u65e5\u672c\u8a9e\u3067\u306e\u8aac\u660e\u3084\u95a2\u9023\u306e\u8aac\u660e\u304c\u5145\u5b9f\u3057\u3066\u3044\u308b\u306e\u3067\uff0c\u3053\u3053\u3067\u306e\u8aac\u660e\u306f\u7701\u304d\u307e\u3059\uff0e\n\n\u307e\u305f\uff0c\u63d0\u51fa\u30d5\u30a1\u30a4\u30eb\u306e\u5f62\u5f0f\u306f\uff0cdisplay_id\u3068ad_id\u306e\u5bfe\u5fdc\u3092CSV\u3067\u8868\u73fe\u3057\uff0cad_id\u306fspace-delimited\u306e\u30ea\u30b9\u30c8\u306b\u306a\u308a\u307e\u3059\uff0e\n\n```\ndisplay_id,ad_id\n16874594,66758 150083 162754 170392 172888 180797\n16874595,8846 30609 143982\n16874596,11430 57197 132820 153260 173005 288385 289122 289915\netc.\n```\n\n# 3. \u30c7\u30fc\u30bf\u306e\u7d39\u4ecb\n[\u4eca\u56de\u306e\u30c7\u30fc\u30bf](https://www.kaggle.com/c/outbrain-click-prediction/data)\u306f\u975e\u5e38\u306b\u591a\u304f\u306e\u30d5\u30a1\u30a4\u30eb\u306b\u5206\u65ad\u3055\u308c\u305f\u6642\u7cfb\u5217\uff0c\u30ab\u30c6\u30b4\u30ea\u30c7\u30fc\u30bf\u3067\u3059\uff0e\u30e6\u30fc\u30b6\u30fc\u306e\u30da\u30fc\u30b8\u95b2\u89a7\u3068\u30af\u30ea\u30c3\u30af\u5c65\u6b74\u304c\uff0c\u30a2\u30e1\u30ea\u30ab\u306e\u8907\u6570\u30b5\u30a4\u30c8\u306b\u6e21\u3063\u30666\u670814\u304b\u308928\u65e5\u307e\u3067\u306e\u7d04\uff12\u9031\u9593\u304c\u542b\u307e\u308c\u3066\u3044\u307e\u3059\uff0e\u8a73\u7d30\u306f\u6b21\u306e\u901a\u308a\u3067\u3059\uff0e\n\n\u30c7\u30fc\u30bf\u306b\u306f\u7279\u5b9a\u30b3\u30f3\u30c6\u30ad\u30b9\u30c8\u306e\u30e6\u30fc\u30b6\u30fc\u3054\u3068\u306e\u30ec\u30b3\u30e1\u30f3\u30c7\u30fc\u30b7\u30e7\u30f3\u5185\u5bb9\u304c\u542b\u307e\u308c\u3066\u3044\u307e\u3059\uff0e\u3053\u3053\u3067\u3044\u3046\u30b3\u30f3\u30c6\u30ad\u30b9\u30c8\u3068\u306f\uff0c\u30e6\u30fc\u30b6\u30fc\u3078\u306e\u30ec\u30b3\u30e1\u30f3\u30c7\u30fc\u30b7\u30e7\u30f3\u30bb\u30c3\u30c8\u3067\u3059\uff0e\u305d\u308c\u305e\u308c\u306e\u30b3\u30f3\u30c6\u30ad\u30b9\u30c8\u306fdisplay_id\u306b\u3088\u3063\u3066\u8868\u73fe\u3055\u308c\u307e\u3059\uff0e\u307e\u305f\uff0c\u5404display_id\u3054\u3068\u306b\u5c11\u306a\u304f\u3068\u3082\uff11\u3064\u306e\u30e6\u30fc\u30b6\u30fc\u304c\u30af\u30ea\u30c3\u30af\u3057\u305f\u30ec\u30b3\u30e1\u30f3\u30c7\u30fc\u30b7\u30e7\u30f3\u304c\u542b\u307e\u308c\u3066\u3044\u307e\u3059\uff0e\u4eca\u56de\u306e\u30b3\u30f3\u30da\u3067\u306f\uff0c\u964d\u9806\u306b\u30af\u30ea\u30c3\u30af\u4e88\u6e2c\u3092\u4e26\u3079\u308b\u3053\u3068\u3067\uff0c\u30ec\u30b3\u30e1\u30f3\u30c7\u30fc\u30b7\u30e7\u30f3\u306e\u30e9\u30f3\u30ad\u30f3\u30b0\u3092\u6c7a\u5b9a\u3059\u308b\u3053\u3068\u304c\u76ee\u6a19\u3067\u3059\uff0e\n\n\u7279\u7b46\u3059\u3079\u304d\u90e8\u5206\u3068\u3057\u3066\uff0c\u4eca\u56de\u306e\u30c7\u30fc\u30bf\u306f\u975e\u5e38\u306b\u5927\u304d\u306a\u30ea\u30ec\u30fc\u30b7\u30e7\u30ca\u30eb\u30c7\u30fc\u30bf\u3067\u3042\u308b\u3053\u3068\u304c\u6319\u3052\u3089\u308c\u307e\u3059\uff0e\u30c6\u30fc\u30d6\u30eb\u306e\u4e00\u90e8\u3092\u898b\u308b\u3068\u30e1\u30e2\u30ea\u306b\u4e57\u308b\u307b\u3069\u5c0f\u898f\u6a21\u3067\u3059\u304c\uff0c\u30da\u30fc\u30b8\u30d3\u30e5\u30fc\u306e\u30c7\u30fc\u30bf\u9577\u306f2 billion\u884c\u4ee5\u4e0a\u3042\u308a\uff0c100GB\u3082\u306e\u5727\u7e2e\u3055\u308c\u3066\u3044\u306a\u3044\u30c7\u30fc\u30bf\u3067\u3059\uff0e\n\n### \u30c7\u30fc\u30bf\u30d5\u30a3\u30fc\u30eb\u30c9\n\u30c7\u30fc\u30bf\u5185\u3067\u306f\u30e6\u30fc\u30b6\u306f\u30e6\u30cb\u30fc\u30af\u306auuid\u306b\u3088\u308a\u8868\u73fe\u3055\u308c\u307e\u3059\uff0e\u30e6\u30fc\u30b6\u304c\u898b\u308b\u3053\u3068\u306e\u3067\u304d\u308b\u30b5\u30a4\u30c8\u306fdocument_id\u3067\u8868\u73fe\u3055\u308c\u307e\u3059\uff0e\u5404\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u306b\u306fad_id\u3067\u793a\u3057\u305f\u5e83\u544a\u304c\u5b58\u5728\u3057\u307e\u3059\uff0e\u305d\u308c\u305e\u308c\u306e\u5e83\u544a\u306fadvertiser_id\u3067\u793a\u3057\u305f\u5e83\u544a\u4e3b\u304b\u3089\u63d0\u4f9b\u3055\u308c\u305fcampaign_id\u3092\u6301\u3061\u307e\u3059\uff0edocument_id\u306e\u30e1\u30bf\u30c7\u30fc\u30bf\u3082\u5b58\u5728\u3057\u307e\u3059\uff0e\u3069\u306e\u5546\u54c1\u304c\u6ce8\u76ee\u3055\u308c\u305f\u304b\uff0c\u30ab\u30c6\u30b4\u30ea\u306e\u5206\u985e\uff0c\u6ce8\u76ee\u3057\u305f\u30c8\u30d4\u30c3\u30af\uff0c\u305d\u3057\u3066document_id\u306e\u63d0\u4f9b\u8005\u3067\u3059\uff0e\n\n### \u30d5\u30a1\u30a4\u30eb\u306e\u8a73\u7d30\n\u6b21\u306b\u5404\u30d5\u30a1\u30a4\u30eb\u306b\u3064\u3044\u3066\u8aac\u660e\u3057\u307e\u3059\uff0e\n\u4eca\u56de\u306e\u30d5\u30a1\u30a4\u30eb\u306f\u5927\u304d\u304f\u308f\u3051\u30666\u7a2e\u985e\u5b58\u5728\u3057\u307e\u3059\uff0e\n\u5f53\u7136\u3067\u3059\u304c\uff0c\u5404\u30c7\u30fc\u30bf\u306f\u533f\u540d\u5316\u3055\u308c\uff0c\u30e6\u30fc\u30b6\u500b\u4eba\u304c\u7279\u5b9a\u3055\u308c\u306a\u3044\u3088\u3046\u51e6\u7406\u3055\u308c\u3066\u3044\u307e\u3059\uff0e\n\n\u30001. page_views.csv\n\u30e6\u30fc\u30b6\u304c\u8a2a\u308c\u305f\u8a18\u4e8b\u306e\u30c7\u30fc\u30bf\u3067\u3059\uff0e\u30b9\u30da\u30fc\u30b9\u524a\u6e1b\u306e\u305f\u3081\uff0c\u5404\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u306e\u30bf\u30a4\u30e0\u30b9\u30bf\u30f3\u30d7\u306f\u521d\u56de\u8a2a\u554f\u306e\u307f\u8a18\u8f09\u3055\u308c\u3066\u3044\u307e\u3059\uff0e\u5b9f\u969b\u306eepoch\u6642\u9593\u3092\u5fa9\u5143\u3057\u305f\u3044\u5834\u5408\u306f\uff0ctimestamp\u30781465876799998\u3092\u52a0\u7b97\u3057\u3066\u304f\u3060\u3055\u3044\uff0e\n\n* uuid\n* document_id\n* timestampe\n* platform\n* geo_location\n* traffic_source\n\n\n\u30002. clicks_train.csv\n\u5e83\u544a\u304c\u30af\u30ea\u30c3\u30af\u3055\u308c\u305f\u5c65\u6b74\u3067\u3059\uff0e\n\n* display_id\n* as_id\n* clicked\n\n\u540c\u69d8\u306bclicks_test.csv\u3082\u63d0\u4f9b\u3055\u308c\u3066\u3044\u307e\u3059\u304c\uff0c\u3053\u3061\u3089\u306b\u306fclicked\uff0c\u3064\u307e\u308a\u6b63\u89e3\u30c7\u30fc\u30bf\u304c\u3064\u3044\u3066\u3044\u307e\u305b\u3093\uff0e\u3053\u3061\u3089\u306e\u30d5\u30a1\u30a4\u30eb\u304b\u3089clicked\u306b\u95a2\u3057\u3066\u4e88\u6e2c\u3059\u308b\u30e2\u30c7\u30eb\u3092\u4f5c\u308b\u3053\u3068\u304c\u4eca\u56de\u306e\u76ee\u6a19\u3067\u3059\uff0e\u5404display_id\u306f\uff11\u56de\u306e\u307f\u30af\u30ea\u30c3\u30af\u3055\u308c\u3066\u3044\u307e\u3059\uff0e\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u306edisplay_id\u306b\u306f\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u5168\u4f53\u306e\u30bf\u30a4\u30e0\u30d5\u30ec\u30fc\u30e0\u3092\u542b\u3093\u3067\u3044\u307e\u3059\uff0e\n\n\u30003. events.csv\ndisplay_id\u306e\u30b3\u30f3\u30c6\u30ad\u30b9\u30c8\u3092\u63d0\u4f9b\u3057\u307e\u3059\uff0e\u3053\u3061\u3089\u306e\u5185\u5bb9\u306ftrain, test\u5171\u901a\u3067\u3059\uff0e\n\n* dispaly_id\n* uuid\n* document_id\n* timestamp\n* platform\n* geo_localtion\n\n\n\u30004. promoted_content.csv\n\u5e83\u544a\u306e\u8a73\u7d30\u3092\u63d0\u4f9b\u3057\u307e\u3059\uff0e\n\n* ad_id\n* document_id\n* campaign_id\n* advertiser_id\n\n 5. documents_meta.csv\ndocument\u306e\u8a73\u7d30\u60c5\u5831\u3067\u3059\uff0e\n\n* document_id\n* source_id\n* publisher_id\n* publish_time\n\n 6. documents_topics.csv, documents_entities.csv, documents_categories.csv\ndocument\u9593\u306e\u95a2\u9023\u6027\u306a\u3069\u3092\u542b\u3093\u3067\u3044\u307e\u3059\uff0e\u8a73\u3057\u3044\u60c5\u5831\u306f\u6b21\u306e\u901a\u308a\u3067\u3059\uff0e\n\n![page_view.png](https://qiita-image-store.s3.amazonaws.com/0/72093/5d06f686-055b-893f-32d6-d5a7703931c8.png)\n\n\n# 4. Forum\n\n## 4.1. \u30e1\u30a4\u30f3\u30c7\u30fc\u30bf(click\u60c5\u5831)\u306e\u89e3\u6790\n\n\u30e1\u30a4\u30f3\u3068\u306a\u308b\u30c7\u30fc\u30bf\u306e\u89e3\u6790\u3092\u884c\u3044\u307e\u3059\uff0e\n\u307e\u305a\u306f\u30d5\u30a1\u30a4\u30eb\u306e\u78ba\u8a8d\u304b\u3089\uff0c\n\n```\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\nimport os\nimport gc # We're gonna be clearing memory a lot\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline\n\np = sns.color_palette()\n\nprint('# File sizes')\nfor f in os.listdir('../input'):\n    if 'zip' not in f:\n        print(f.ljust(30) + str(round(os.path.getsize('../input/' + f) / 1000000, 2)) + 'MB')\n```\n\n```\n# File sizes\npage_views_sample.csv         454.35MB\ndocuments_meta.csv            89.38MB\ndocuments_categories.csv      118.02MB\nevents.csv                    1208.55MB\nclicks_test.csv               506.95MB\npromoted_content.csv          13.89MB\ndocuments_topics.csv          339.47MB\ndocuments_entities.csv        324.1MB\nsample_submission.csv         273.14MB\nclicks_train.csv              1486.73MB\n```\n\n\u591a\u304f\u306eCSV\u30d5\u30a1\u30a4\u30eb\u304c\u3042\u308b\u3053\u3068\u304c\u308f\u304b\u308a\u307e\u3059\uff0e\u6b21\u306bclicks_train, clicks_test\u306b\u307e\u3068\u3092\u7d5e\u3063\u3066\u89e3\u6790\u3057\u3066\u3044\u304d\u307e\u3059\uff0e\n\n```\ndf_train = pd.read_csv('../input/clicks_train.csv')\ndf_test = pd.read_csv('../input/clicks_test.csv')\nsizes_train = df_train.groupby('display_id')['ad_id'].count().value_counts()\nsizes_test = df_test.groupby('display_id')['ad_id'].count().value_counts()\nsizes_train = sizes_train / np.sum(sizes_train)\nsizes_test = sizes_test / np.sum(sizes_test)\n\nplt.figure(figsize=(12,4))\nsns.barplot(sizes_train.index, sizes_train.values, alpha=0.8, color=p[0], label='train')\nsns.barplot(sizes_test.index, sizes_test.values, alpha=0.6, color=p[1], label='test')\nplt.legend()\nplt.xlabel('Number of Ads in display', fontsize=12)\nplt.ylabel('Proportion of set', fontsize=12)\n```\n\n\u5b9f\u884c\u7d50\u679c\u306f\u6b21\u306e\u901a\u308a\n\n![__results___4_1.png](https://qiita-image-store.s3.amazonaws.com/0/72093/96e87556-5c2a-da1f-0103-3e82adae6cc1.png)\n\ndisplay\u306b\u542b\u307e\u308c\u308b\u5e83\u544a\u6570\u306e\u6bd4\u7387\u304c\u53ef\u8996\u5316\u3055\u308c\u307e\u3057\u305f\uff0e\n\u6b21\u306b\u540c\u69d8\u306e\u5e83\u544a\u6570\u304c\u5168\u4f53\u3067\u4f55\u56de\u51fa\u3066\u3044\u308b\u304b\u3092\u30d2\u30b9\u30c8\u30b0\u30e9\u30e0\u3067\u898b\u3066\u3044\u304d\u307e\u3059\uff0e\n\n```\nad_usage_train = df_train.groupby('ad_id')['ad_id'].count()\n\nfor i in [2, 10, 50, 100, 1000]:\n    print('Ads that appear less than {} times: {}%'.format(i, round((ad_usage_train < i).mean() * 100, 2)))\n\nplt.figure(figsize=(12, 6))\nplt.hist(ad_usage_train.values, bins=50, log=True)\nplt.xlabel('Number of times ad appeared', fontsize=12)\nplt.ylabel('log(Count of displays with ad)', fontsize=12)\nplt.show()\n```\n\n```\nAds that appear less than 2 times: 22.69%\nAds that appear less than 10 times: 61.74%\nAds that appear less than 50 times: 86.93%\nAds that appear less than 100 times: 91.04%\nAds that appear less than 1000 times: 97.45%\n```\n\n![__results___6_1.png](https://qiita-image-store.s3.amazonaws.com/0/72093/6914eef1-0766-a7eb-9879-e3d09654400c.png)\n\n\u5927\u591a\u6570\u306e\u5e83\u544a\u306f\u5c11\u306a\u3044\u56de\u6570\u8868\u793a\u3055\u308c\u3066\u304a\u308a\uff0c\u4f55\u5ea6\u3082\u8868\u793a\u3055\u308c\u3066\u3044\u308b\u5e83\u544a\u306f\u6bd4\u8f03\u7684\u5c11\u6570\u3067\u3042\u308b\u3053\u3068\u304c\u308f\u304b\u308a\u307e\u3057\u305f\uff0e\n\u3053\u308c\u306f\u3064\u307e\u308a\uff0c\u30e6\u30fc\u30b6\u304c\u30af\u30ea\u30c3\u30af\u3057\u305f\u304b\u3069\u3046\u304b\u524d\u4f8b\u306e\u5c11\u306a\u3044\u30c7\u30fc\u30bf\u304b\u3089\uff0c\u30e6\u30fc\u30b6\u306e\u884c\u52d5\u3092\u63a8\u5b9a\u3059\u308b\u5fc5\u8981\u304c\u3042\u308b\uff0c\u3068\u3044\u3046\u3053\u3068\u3067\u3059\uff0e\n\n\u6700\u5f8c\u306b\uff0ctest, train\u3067\u91cd\u8907\u3057\u3066\u3044\u308b\u5e83\u544a\u306e\u6bd4\u7387\u3092\u8abf\u3079\u307e\u3059\uff0e\n\n```\nad_prop = len(set(df_test.ad_id.unique()).intersection(df_train.ad_id.unique())) / len(df_test.ad_id.unique())\nprint('Proportion of test ads in test that are in training: {}%'.format(round(ad_prop * 100, 2)))\n```\n\n```\nProportion of test ads in test that are in training: 82.87%\n```\n\n82%\u306e\u5e83\u544a\u304ctest\u3067\u3082\u51fa\u3066\u3044\u308b\u3053\u3068\u304c\u308f\u304b\u308a\u307e\u3057\u305f\uff0e\n\u3053\u308c\u3089\u306e\u5e83\u544a\u60c5\u5831\u306b\u57fa\u3065\u3044\u3066\u4e88\u6e2c\u30e2\u30c7\u30eb\u3092\u4f5c\u6210\u3057\u3066\u3044\u3051\u3070\u826f\u3044\u304b\u3082\u3057\u308c\u307e\u305b\u3093\uff0e\n\n### Events\n\n\u30bf\u30a4\u30e0\u30b9\u30bf\u30f3\u30d7\u3084\u5730\u7406\u60c5\u5831\u306e\u89e3\u6790\u306b\u3064\u3044\u3066\u306f\uff0c\u5f8c\u8ff0\u306e\u89e3\u6790\u3067\u8a73\u7d30\u306b\u307e\u3068\u307e\u3063\u3066\u3044\u307e\u3059\uff0e\u3053\u3053\u3067\u306f\uff0cevents\u306b\u3064\u3044\u3066\u89e3\u6790\u3057\u3066\u3044\u304d\u307e\u3059\uff0e\n\n\n```\ntry:del df_train,df_test # Being nice to Azure\nexcept:pass;gc.collect()\n\nevents = pd.read_csv('../input/events.csv')\nprint('Shape:', events.shape)\nprint('Columns', events.columns.tolist())\nevents.head()\n```\n\n```\ndisplay_id\tuuid\tdocument_id\ttimestamp\tplatform\tgeo_location\n0\t1\tcb8c55702adb93\t379743\t61\t3\tUS>SC>519\n1\t2\t79a85fa78311b9\t1794259\t81\t2\tUS>CA>807\n2\t3\t822932ce3d8757\t1179111\t182\t2\tUS>MI>505\n3\t4\t85281d0a49f7ac\t1777797\t234\t2\tUS>WV>564\n4\t5\t8d0daef4bf5b56\t252458\t338\t2\tSG>00\n```\n\n\u30c7\u30fc\u30bf\u306e\u4e2d\u8eab\u304c\u308f\u304b\u308a\u307e\u3057\u305f\uff0e\u6b21\u306bplatform\u306b\u3064\u3044\u3066\u898b\u3066\u3044\u304d\u307e\u3059\uff0e\n\n```\nplat = events.platform.value_counts()\n\nprint(plat)\nprint('\\nUnique values of platform:', events.platform.unique())\n```\n\n```\n2     10684579\n1      8747280\n3      3032907\n2       291699\n1       279988\n3        83668\n\\N           5\nName: platform, dtype: int64\n\nUnique values of platform: [3 2 1 '2' '1' '3' '\\\\N']\n```\n\n\u7d50\u679c\u304b\u3089\uff0c1, 2, 3\u306eplatform\u304c\uff0cfloat, string\u3069\u3061\u3089\u3082\u540c\u69d8\u306b\u4f55\u5ea6\u3082\u30ea\u30d4\u30fc\u30c8\u3055\u308c\u3066\u3044\u308b\u3053\u3068\u304c\u308f\u304b\u308a\u307e\u3059\uff0e\n\u3055\u3089\u306bplatform\u306b\u3064\u3044\u3066\u898b\u3066\u3044\u304d\u307e\u3059\uff0e\n\n```\nevents.platform = events.platform.astype(str)\nplat = events.platform.value_counts()\n\nplt.figure(figsize=(12,4))\nsns.barplot(plat.index, plat.values, alpha=0.8, color=p[2])\nplt.xlabel('Platform', fontsize=12)\nplt.ylabel('Occurence count', fontsize=12)\n```\n\n![__results___13_1.png](https://qiita-image-store.s3.amazonaws.com/0/72093/28a0406f-5605-72e1-45c0-77e112d8c989.png)\n\n1, 2, 3\u306eplatform\u304c\u4f55\u3092\u793a\u3057\u3066\u3044\u308b\u304b\u306f\u5b9a\u304b\u3067\u306f\u306a\u3044\u3067\u3059\u304c\uff0c\u304a\u305d\u3089\u304fPC, phone, tablet\u306e\uff13\u7a2e\u985e\u3060\u308d\u3046\u3068\u3044\u3046\u3053\u3068\u304c\u4e88\u6e2c\u3067\u304d\u307e\u3059\uff0e\n\\N\u3084string\u578b\u306e\u756a\u53f7\u306f\u4f55\u304b\u30a8\u30e9\u30fc\u304c\u767a\u751f\u3057\u3066\u3067\u304d\u305f\u7570\u5e38\u5024\u3067\u3057\u3087\u3046\u304b\uff0e\u3053\u3053\u3067\u306f\u3053\u308c\u4ee5\u4e0a\u4e88\u6e2c\u3059\u308b\u3053\u3068\u306f\u96e3\u3057\u305d\u3046\u3067\u3059\uff0e\n\n\u6b21\u306bUUID\u306b\u3064\u3044\u3066\u6df1\u6398\u308a\u3057\u3066\u3044\u304d\u307e\u3059\uff0e\n\n```\nuuid_counts = events.groupby('uuid')['uuid'].count().sort_values()\n\nprint(uuid_counts.tail())\n\nfor i in [2, 5, 10]:\n    print('Users that appear less than {} times: {}%'.format(i, round((uuid_counts < i).mean() * 100, 2)))\n    \nplt.figure(figsize=(12, 4))\nplt.hist(uuid_counts.values, bins=50, log=True)\nplt.xlabel('Number of times user appeared in set', fontsize=12)\nplt.ylabel('log(Count of users)', fontsize=12)\nplt.show()\n```\n\n```\nuuid\nef7761dd22277c    38\n45d23867dbe3b3    38\nc0bd502c7a479f    42\n2759b057797f02    46\nb88553e3a2aa29    49\nName: uuid, dtype: int64\nUsers that appear less than 2 times: 88.42%\nUsers that appear less than 5 times: 99.51%\nUsers that appear less than 10 times: 99.96%\n```\n\n![__results___15_1.png](https://qiita-image-store.s3.amazonaws.com/0/72093/e47cf940-8dd7-b87f-940e-159510b26d30.png)\n\n\u540c\u4e00\u306e\u30e6\u30fc\u30b6\u304c\u51fa\u3066\u304f\u308b\u56de\u6570\u306f\u6570\u5341\u56de\u7a0b\u5ea6\u306e\u3088\u3046\u3067\u3059\uff0e\u307b\u3068\u3093\u3069\u304c\u6570\u56de\u7a0b\u5ea6\u306e\u767b\u5834\u6570\u306a\u306e\u3067\uff0c\u30e6\u30fc\u30b6\u306b\u57fa\u3065\u3044\u305f\u4e88\u6e2c\u30e2\u30c7\u30eb\u3092\u4f5c\u6210\u3059\u308b\u3053\u3068\u306f\u96e3\u3057\u305d\u3046\u3067\u3059\uff0e\n\n\u307e\u305f\uff0c\u5354\u8abf\u30d5\u30a3\u30eb\u30bf\u30ea\u30f3\u30b0\u306e\u3088\u3046\u306b\uff0c\u30e6\u30fc\u30b6\u306b\u7d10\u3065\u3044\u305f\u89e3\u6790\u3092\u5168\u3066\u306e\u7d44\u307f\u5408\u308f\u305b\u306b\u304a\u3044\u3066\u5b9f\u884c\u3059\u308b\u305f\u3081\u306b\u306f\uff0c\u30e1\u30e2\u30ea\u3092\u5927\u304d\u304f\u6d88\u8cbb\u3057\u305d\u3046\u3067\u3059\uff0e\n\n\n## Categories\nOutbrain\u304c\u4e8b\u524d\u306b\u30af\u30e9\u30b9\u30bf\u30ea\u30f3\u30b0\u3057\u305f\u7d50\u679c\u3092\u63d0\u4f9b\u3057\u3066\u3044\u307e\u3059\uff0e\n\u30c8\u30d4\u30c3\u30af\u30c7\u30fc\u30bf\u3068\u30ab\u30c6\u30b4\u30ea\u30c7\u30fc\u30bf\u306b\u3064\u3044\u3066\uff0c\u51fa\u73fe\u983b\u5ea6\u3092\u53ef\u8996\u5316\u3057\u3066\u3044\u304d\u307e\u3059\uff0e\n\n```\ntry:del events\nexcept:pass;gc.collect()\n\ntopics = pd.read_csv('../input/documents_topics.csv')\nprint('Columns:',topics.columns.tolist())\nprint('Number of unique topics:', len(topics.topic_id.unique()))\n\ntopics.head()\n```\n\n```\ndocument_id\ttopic_id\tconfidence_level\n0\t1595802\t140\t0.073113\n1\t1595802\t16\t0.059416\n2\t1595802\t143\t0.045421\n3\t1595802\t170\t0.038867\n4\t1524246\t113\t0.196450\n```\n\n\u6b21\u306bconfidence_level\u306b\u3064\u3044\u3066\u7167\u6e96\u306b\u4e26\u3079\u307e\u3059\uff0e\n\n```\ntopic_ids = topics.groupby('topic_id')['confidence_level'].count().sort_values()\n\nfor i in [10000, 50000, 100000, 200000]:\n    print('Number of topics that appear more than {} times: {}'\n          .format(i, (topic_ids > i).sum()))\n\nplt.figure(figsize=(12, 4))\nsns.barplot(topic_ids.index, topic_ids.values, order=topic_ids.index, alpha=1, color=p[5])\nplt.xlabel('Document Topics', fontsize=12)\nplt.ylabel('Total occurences', fontsize=12)\nplt.show()\n```\n\n```\nNumber of topics that appear more than 10000 times: 201\nNumber of topics that appear more than 50000 times: 86\nNumber of topics that appear more than 100000 times: 22\nNumber of topics that appear more than 200000 times: 3\n```\n\n![__results___18_1.png](https://qiita-image-store.s3.amazonaws.com/0/72093/633f7104-e5ce-2297-e662-5e5e9a00da11.png)\n\n\u30bc\u30ed\u4ed8\u8fd1\u304b\u3089300000\u307e\u3067\u5927\u304d\u304f\u958b\u3044\u3066\u3044\u308b\u3053\u3068\u304c\u308f\u304b\u308a\u307e\u3059\uff0e\n\n\n```\ncat = pd.read_csv('../input/documents_categories.csv')\nprint('Columns:', cat.columns.tolist())\nprint('Number of unique categories:', len(cat.category_id.unique()))\n\ncat_ids = cat.groupby('category_id')['confidence_level'].count().sort_values()\n\nfor i in [1000, 10000, 50000, 100000]:\n    print('Number of categories that appear more than {} times: {}'\n          .format(i, (cat_ids > i).sum()))\n\nplt.figure(figsize=(12, 4))\nsns.barplot(cat_ids.index, cat_ids.values, order=cat_ids.index, alpha=1, color=p[3])\nplt.xlabel('Document Categories', fontsize=12)\nplt.ylabel('Total occurences', fontsize=12)\nplt.show()\n```\n\n```\nColumns: ['document_id', 'category_id', 'confidence_level']\nNumber of unique categories: 97\nNumber of categories that appear more than 1000 times: 88\nNumber of categories that appear more than 10000 times: 65\nNumber of categories that appear more than 50000 times: 35\nNumber of categories that appear more than 100000 times: 15\n```\n\n![__results___19_1.png](https://qiita-image-store.s3.amazonaws.com/0/72093/08f890fd-ebf1-a6b0-ebb8-95ca80b791e9.png)\n\n\u30ab\u30c6\u30b4\u30ea\u30c7\u30fc\u30bf\u306b\u95a2\u3057\u3066\u3082\u53ef\u8996\u5316\u304c\u3067\u304d\u307e\u3057\u305f\uff0e\n\n\n## 4.2. \u5730\u7406\u30c7\u30fc\u30bf\u306e\u5206\u6790\n\u56fd\u3054\u3068\u306e\u5206\u6790\uff0c\u30a2\u30e1\u30ea\u30ab\u56fd\u5185\u306b\u6ce8\u76ee\u3057\u305f\u5206\u6790\u306b\u3064\u3044\u3066\u884c\u3044\u307e\u3059\uff0e\n\u30c7\u30fc\u30bf\u3092\u8aad\u307f\u8fbc\u307f\u307e\u3059\uff0e\n\n```\nimport pandas as pd\nimport warnings\nwarnings.filterwarnings('ignore')\n\npage_views_sample_df = pd.read_csv(\"../input/page_views_sample.csv\", usecols=['uuid', 'geo_location'])\n# Drop NAs\npage_views_sample_df.dropna(inplace=True)\n# Drop EU code\npage_views_sample_df = page_views_sample_df.loc[~page_views_sample_df.geo_location.isin(['EU', '--']), :]\n# Drop duplicates\npage_views_sample_df = page_views_sample_df.drop_duplicates('uuid', keep='first')\n```\n\n\u6b21\u306b\u56fd\u3054\u3068\u306b\u30ab\u30a6\u30f3\u30c8\u3057\u307e\u3059\uff0e\n\n```\ncountry = page_views_sample_df.copy()\ncountry.columns = ['uuid', 'Country']\ncountry.Country = country.Country.str[:2]\ncountry.loc[:, 'UserCount'] = country.groupby('Country')['Country'].transform('count')\ncountry = country.loc[:, ['Country', 'UserCount']].drop_duplicates('Country', keep='first')\ncountry.sort_values('UserCount', ascending=False, inplace=True)\ncountry.head(10)\n```\n\n\u5730\u56f3\u30c7\u30fc\u30bf\u306b\u30d7\u30ed\u30c3\u30c8\u3059\u308b\u305f\u3081\u56fd\u540d\u3092\u624b\u6253\u3061\u3067\u5165\u308c\u307e\u3059\uff0e\n\n```\ncountryCode2Name = {u'BD': u'Bangladesh', u'BE': u'Belgium', u'BF': u'Burkina Faso', u'BG': u'Bulgaria', u'BA': u'Bosnia and Herzegovina', u'BB': u'Barbados', u'WF': u'Wallis and Futuna', u'BL': u'Saint Barth\\xe9lemy', u'BM': u'Bermuda', u'BN': u'Brunei Darussalam', u'BO': u'Bolivia, Plurinational State of', u'BH': u'Bahrain', u'BI': u'Burundi', u'BJ': u'Benin', u'BT': u'Bhutan', u'JM': u'Jamaica', u'BV': u'Bouvet Island', u'BW': u'Botswana', u'WS': u'Samoa', u'BQ': u'Bonaire, Sint Eustatius and Saba', u'BR': u'Brazil', u'BS': u'Bahamas', u'JE': u'Jersey', u'BY': u'Belarus', u'BZ': u'Belize', u'RU': u'Russian Federation', u'RW': u'Rwanda', u'RS': u'Serbia', u'TL': u'Timor-Leste', u'RE': u'R\\xe9union', u'TM': u'Turkmenistan', u'TJ': u'Tajikistan', u'RO': u'Romania', u'TK': u'Tokelau', u'GW': u'Guinea-Bissau', u'GU': u'Guam', u'GT': u'Guatemala', u'GS': u'South Georgia and the South Sandwich Islands', u'GR': u'Greece', u'GQ': u'Equatorial Guinea', u'GP': u'Guadeloupe', u'JP': u'Japan', u'GY': u'Guyana', u'GG': u'Guernsey', u'GF': u'French Guiana', u'GE': u'Georgia', u'GD': u'Grenada', u'GB': u'United Kingdom', u'GA': u'Gabon', u'GN': u'Guinea', u'GM': u'Gambia', u'GL': u'Greenland', u'GI': u'Gibraltar', u'GH': u'Ghana', u'OM': u'Oman', u'TN': u'Tunisia', u'JO': u'Jordan', u'HR': u'Croatia', u'HT': u'Haiti', u'HU': u'Hungary', u'HK': u'Hong Kong', u'HN': u'Honduras', u'HM': u'Heard Island and McDonald Islands', u'VE': u'Venezuela, Bolivarian Republic of', u'PR': u'Puerto Rico', u'PS': u'Palestine, State of', u'PW': u'Palau', u'PT': u'Portugal', u'KN': u'Saint Kitts and Nevis', u'PY': u'Paraguay', u'IQ': u'Iraq', u'PA': u'Panama', u'PF': u'French Polynesia', u'PG': u'Papua New Guinea', u'PE': u'Peru', u'PK': u'Pakistan', u'PH': u'Philippines', u'PN': u'Pitcairn', u'PL': u'Poland', u'PM': u'Saint Pierre and Miquelon', u'ZM': u'Zambia', u'EH': u'Western Sahara', u'EE': u'Estonia', u'EG': u'Egypt', u'ZA': u'South Africa', u'EC': u'Ecuador', u'IT': u'Italy', u'VN': u'Viet Nam', u'SB': u'Solomon Islands', u'ET': u'Ethiopia', u'SO': u'Somalia', u'ZW': u'Zimbabwe', u'SA': u'Saudi Arabia', u'ES': u'Spain', u'ER': u'Eritrea', u'ME': u'Montenegro', u'MD': u'Moldova, Republic of', u'MG': u'Madagascar', u'MF': u'Saint Martin (French part)', u'MA': u'Morocco', u'MC': u'Monaco', u'UZ': u'Uzbekistan', u'MM': u'Myanmar', u'ML': u'Mali', u'MO': u'Macao', u'MN': u'Mongolia', u'MH': u'Marshall Islands', u'MK': u'Macedonia, Republic of', u'MU': u'Mauritius', u'MT': u'Malta', u'MW': u'Malawi', u'MV': u'Maldives', u'MQ': u'Martinique', u'MP': u'Northern Mariana Islands', u'MS': u'Montserrat', u'MR': u'Mauritania', u'IM': u'Isle of Man', u'UG': u'Uganda', u'TZ': u'Tanzania, United Republic of', u'MY': u'Malaysia', u'MX': u'Mexico', u'IL': u'Israel', u'FR': u'France', u'AW': u'Aruba', u'SH': u'Saint Helena, Ascension and Tristan da Cunha', u'SJ': u'Svalbard and Jan Mayen', u'FI': u'Finland', u'FJ': u'Fiji', u'FK': u'Falkland Islands (Malvinas)', u'FM': u'Micronesia, Federated States of', u'FO': u'Faroe Islands', u'NI': u'Nicaragua', u'NL': u'Netherlands', u'NO': u'Norway', u'NA': u'Namibia', u'VU': u'Vanuatu', u'NC': u'New Caledonia', u'NE': u'Niger', u'NF': u'Norfolk Island', u'NG': u'Nigeria', u'NZ': u'New Zealand', u'NP': u'Nepal', u'NR': u'Nauru', u'NU': u'Niue', u'CK': u'Cook Islands', u'CI': u\"C\\xf4te d'Ivoire\", u'CH': u'Switzerland', u'CO': u'Colombia', u'CN': u'China', u'CM': u'Cameroon', u'CL': u'Chile', u'CC': u'Cocos (Keeling) Islands', u'CA': u'Canada', u'CG': u'Congo', u'CF': u'Central African Republic', u'CD': u'Congo, The Democratic Republic of the', u'CZ': u'Czech Republic', u'CY': u'Cyprus', u'CX': u'Christmas Island', u'CR': u'Costa Rica', u'CW': u'Cura\\xe7ao', u'CV': u'Cape Verde', u'CU': u'Cuba', u'SZ': u'Swaziland', u'SY': u'Syrian Arab Republic', u'SX': u'Sint Maarten (Dutch part)', u'KG': u'Kyrgyzstan', u'KE': u'Kenya', u'SS': u'South Sudan', u'SR': u'Suriname', u'KI': u'Kiribati', u'KH': u'Cambodia', u'SV': u'El Salvador', u'KM': u'Comoros', u'ST': u'Sao Tome and Principe', u'SK': u'Slovakia', u'KR': u'Korea, Republic of', u'SI': u'Slovenia', u'KP': u\"Korea, Democratic People's Republic of\", u'KW': u'Kuwait', u'SN': u'Senegal', u'SM': u'San Marino', u'SL': u'Sierra Leone', u'SC': u'Seychelles', u'KZ': u'Kazakhstan', u'KY': u'Cayman Islands', u'SG': u'Singapore', u'SE': u'Sweden', u'SD': u'Sudan', u'DO': u'Dominican Republic', u'DM': u'Dominica', u'DJ': u'Djibouti', u'DK': u'Denmark', u'DE': u'Germany', u'YE': u'Yemen', u'DZ': u'Algeria', u'US': u'United States', u'UY': u'Uruguay', u'YT': u'Mayotte', u'UM': u'United States Minor Outlying Islands', u'LB': u'Lebanon', u'LC': u'Saint Lucia', u'LA': u\"Lao People's Democratic Republic\", u'TV': u'Tuvalu', u'TW': u'Taiwan, Province of China', u'TT': u'Trinidad and Tobago', u'TR': u'Turkey', u'LK': u'Sri Lanka', u'LI': u'Liechtenstein', u'LV': u'Latvia', u'TO': u'Tonga', u'LT': u'Lithuania', u'LU': u'Luxembourg', u'LR': u'Liberia', u'LS': u'Lesotho', u'TH': u'Thailand', u'TF': u'French Southern Territories', u'TG': u'Togo', u'TD': u'Chad', u'TC': u'Turks and Caicos Islands', u'LY': u'Libya', u'VA': u'Holy See (Vatican City State)', u'VC': u'Saint Vincent and the Grenadines', u'AE': u'United Arab Emirates', u'AD': u'Andorra', u'AG': u'Antigua and Barbuda', u'AF': u'Afghanistan', u'AI': u'Anguilla', u'IS': u'Iceland', u'IR': u'Iran, Islamic Republic of', u'AM': u'Armenia', u'AL': u'Albania', u'AO': u'Angola', u'AQ': u'Antarctica', u'AS': u'American Samoa', u'AR': u'Argentina', u'AU': u'Australia', u'AT': u'Austria', u'IO': u'British Indian Ocean Territory', u'IN': u'India', u'AX': u'\\xc5land Islands', u'AZ': u'Azerbaijan', u'IE': u'Ireland', u'ID': u'Indonesia', u'UA': u'Ukraine', u'QA': u'Qatar', u'MZ': u'Mozambique', u'FX': u'France, Metropolitan', u'AN': u'Netherlands Antilles', u'A1': u'Anguilla'}\ncountry['CountryName'] = country['Country'].map(countryCode2Name)\n\n# Drop NAs\ncountry.dropna(inplace=True)\n\ncountry['CumulativePercentage'] = 100 * country.UserCount.cumsum()/country.UserCount.sum()\ncountry.reset_index(drop=True, inplace=True)\ncountry[['CountryName', 'UserCount', 'CumulativePercentage']].head(10)\n```\n\n\u540d\u524d\u304c\u5165\u308a\u307e\u3057\u305f\uff0e\n\n```\nCountryName\tUserCount\tCumulativePercentage\n0\tUnited States\t7503199\t81.582245\n1\tCanada\t372772\t85.635393\n2\tUnited Kingdom\t280972\t88.690400\n3\tAustralia\t133158\t90.138226\n4\tIndia\t90453\t91.121721\n5\tPhilippines\t55822\t91.728674\n6\tGermany\t46026\t92.229114\n7\tSouth Africa\t34046\t92.599296\n8\tFrance\t29169\t92.916450\n9\tSingapore\t29037\t93.232170\n```\n\n\u4e16\u754c\u5730\u56f3\u3067\u52d5\u7684\u306b\u898b\u3066\u3044\u304d\u307e\u3059\uff0e\n\n```\nimport plotly.offline as py\npy.offline.init_notebook_mode()\n\ndata = [ dict(\n        type = 'choropleth',\n        locations = country['CountryName'],\n        z = country['UserCount'],\n        locationmode = 'country names',\n        text = country['CountryName'],\n        colorscale = [[0,\"rgb(153, 241, 243)\"],[0.005,\"rgb(16, 64, 143)\"],[1,\"rgb(0, 0, 0)\"]],\n        autocolorscale = False,\n        marker = dict(\n            line = dict(color = 'rgb(58,100,69)', width = 0.6)),\n            colorbar = dict(autotick = True, tickprefix = '', title = '# of Users')\n            )\n       ]\n\nlayout = dict(\n    title = 'Total number of users by country',\n    geo = dict(\n        showframe = False,\n        showcoastlines = True,\n        projection = dict(\n        type = 'equirectangular'\n        ),\n    margin = dict(b = 0, t = 0, l = 0, r = 0)\n            )\n    )\n\nfig = dict(data=data, layout=layout)\npy.iplot(fig, validate=False, filename='worldmap')\n```\n\n![newplot.png](https://qiita-image-store.s3.amazonaws.com/0/72093/c4a88eaf-1761-c43e-9159-a8fac3a5fee1.png)\n\nnotebook\u3067\u5b9f\u884c\u3059\u308b\u3068\u30ab\u30fc\u30bd\u30eb\u64cd\u4f5c\u3067\u56fd\u306e\u30ab\u30a6\u30f3\u30c8\u3092\u78ba\u8a8d\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\uff0e\n\n### USA\u306b\u6ce8\u76ee\n\u307e\u305a\u306f\u30c7\u30fc\u30bf\u306e\u6574\u7406\u304b\u3089\uff0e\n\n```\nusa = page_views_sample_df.loc[page_views_sample_df.geo_location.str[:2] == 'US', :]\nusa.columns = ['uuid', 'State']\n\nusa.State = usa.State.str[3:5]\n\n# Drop Data with missing state info\nusa = usa.loc[usa.State != '', :]\n\nusa.loc[:, 'UserCount'] = usa.groupby('State')['State'].transform('count')\nusa.loc[:, ['State', 'UserCount']] = usa.loc[:, ['State', 'UserCount']].drop_duplicates('State', keep='first')\nusa.sort_values('UserCount', ascending=False, inplace=True)\n```\n\u5dde\u306e\u540d\u524d\u3092\u5165\u308c\u3066\u3044\u304d\u307e\u3059\uff0e\n\n```\nstateCode2Name = {'AK': 'Alaska', 'AL': 'Alabama', 'AR': 'Arkansas', 'AS': 'American Samoa', 'AZ': 'Arizona', 'CA': 'California', 'CO': 'Colorado', 'CT': 'Connecticut', 'DC': 'District of Columbia', 'DE': 'Delaware', 'FL': 'Florida', 'GA': 'Georgia', 'GU': 'Guam', 'HI': 'Hawaii', 'IA': 'Iowa', 'ID': 'Idaho', 'IL': 'Illinois', 'IN': 'Indiana', 'KS': 'Kansas', 'KY': 'Kentucky', 'LA': 'Louisiana', 'MA': 'Massachusetts', 'MD': 'Maryland', 'ME': 'Maine', 'MI': 'Michigan', 'MN':'Minnesota', 'MO': 'Missouri', 'MP': 'Northern Mariana Islands', 'MS': 'Mississippi', 'MT': 'Montana', 'NA': 'National', 'NC': 'North Carolina', 'ND': 'North Dakota', 'NE':'Nebraska', 'NH': 'New Hampshire', 'NJ': 'New Jersey', 'NM': 'New Mexico', 'NV': 'Nevada', 'NY': 'New York', 'OH': 'Ohio', 'OK': 'Oklahoma', 'OR': 'Oregon', 'PA': 'Pennsylvania', 'PR': 'Puerto Rico', 'RI': 'Rhode Island', 'SC': 'South Carolina', 'SD': 'South Dakota', 'TN': 'Tennessee', 'TX': 'Texas', 'UT': 'Utah', 'VA': 'Virginia', 'VI': 'Virgin Islands', 'VT': 'Vermont', 'WA': 'Washington', 'WI': 'Wisconsin', 'WV': 'West Virginia', 'WY': 'Wyoming'}\nusa['StateName'] = usa['State'].map(stateCode2Name)\n# Drop NAs\nusa.dropna(inplace=True)\n\nusa['CumulativePercentage'] = 100 * usa.UserCount.cumsum()/usa.UserCount.sum()\nusa.reset_index(drop=True, inplace=True)\nusa[['StateName', 'UserCount', 'CumulativePercentage']].head(50)\n```\n\n\u30a2\u30e1\u30ea\u30ab\u56fd\u5185\u3067\u306e\u30ab\u30a6\u30f3\u30c8\u3092\u53ef\u8996\u5316\u3057\u307e\u3059\uff0e\n\n```\nimport plotly.offline as py\npy.offline.init_notebook_mode()\n\ndata = [ dict(\n        type = 'choropleth',\n        locations = usa['State'],\n        z = usa['UserCount'],\n        locationmode = 'USA-states',\n        text = usa['StateName'],\n        colorscale = [[0,\"rgb(153, 241, 243)\"],[0.33,\"rgb(16, 64, 143)\"],[1,\"rgb(0, 0, 0)\"]],\n        autocolorscale = False,\n        marker = dict(\n            line = dict(color = 'rgb(58,100,69)', width = 0.6)),\n            colorbar = dict(autotick = True, tickprefix = '', title = '# of Users')\n            )\n       ]\n\nlayout = dict(\n    title = 'Total number of users by state',\n    geo = dict(\n        scope='usa',\n        projection=dict( type='albers usa' ),\n        showlakes = True,\n        lakecolor = 'rgb(255, 255, 255)'),\n    )\n\nfig = dict(data=data, layout=layout)\npy.iplot(fig, validate=False, filename='USmap')\n```\n\n![newplot (1).png](https://qiita-image-store.s3.amazonaws.com/0/72093/3cb40e5b-b967-6fc6-172d-0f2b5223c379.png)\n\n\n##4.3. Timestamp\u306e\u5206\u6790\n\ntimestamp\u306e\u89e3\u6790\u3092\u884c\u3044\u307e\u3059\uff0e\n\n\n```\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline\n\nevents = pd.read_csv(\"../input/events.csv\", dtype=np.int32, index_col=0, usecols=[0,3])\nevents.head()\n```\n\n```\n\u3000\u3000\u3000\u3000\u3000\u3000timestamp \ndisplay_id\t\n1\t61\n2\t81\n3\t182\n4\t234\n5\t338\n```\n\ndisplay_id\u3054\u3068\u306btimestamp\u304c\u3042\u308a\u307e\u3059\uff0e\nmilliseconds\u306e\u30bf\u30a4\u30e0\u30b9\u30bf\u30f3\u30d7\u3067\uff0c\u30c7\u30fc\u30bf\u306e\u7d39\u4ecb\u3067\u8aac\u660e\u3057\u305f\u3088\u3046\u306b\uff0c1970-01-01\u304b\u3089\u59cb\u307e\u3063\u3066\u3044\u307e\u3059\uff0e\n\u3064\u307e\u308a\u6642\u523b\u30bc\u30ed\u306f04:00 UTC, 14th June 2016\u306b\u5bfe\u5fdc\u3057\u3066\u3044\u307e\u3059\uff0e\n\n```\ntrain = pd.merge(pd.read_csv(\"../input/clicks_train.csv\", dtype=np.int32, index_col=0).sample(frac=0.1),\n                 events, left_index=True, right_index=True)\ntest = pd.merge(pd.read_csv(\"../input/clicks_test.csv\", dtype=np.int32, index_col=0).sample(frac=0.1),\n                events, left_index=True, right_index=True)\n```\nclicks\u30d5\u30a1\u30a4\u30eb\u304b\u3089\u30c7\u30fc\u30bf\u3092\u8aad\u307f\u8fbc\u307f\uff0c\n\n```\ntest[\"hour\"] = (test.timestamp // (3600 * 1000)) % 24\ntest[\"day\"] = test.timestamp // (3600 * 24 * 1000)\n\ntrain[\"hour\"] = (train.timestamp // (3600 * 1000)) % 24\ntrain[\"day\"] = train.timestamp // (3600 * 24 * 1000)\n\nplt.figure(figsize=(12,4))\ntrain.hour.hist(bins=np.linspace(-0.5, 23.5, 25), label=\"train\", alpha=0.7, normed=True)\ntest.hour.hist(bins=np.linspace(-0.5, 23.5, 25), label=\"test\", alpha=0.7, normed=True)\nplt.xlim(-0.5, 23.5)\nplt.legend(loc=\"best\")\nplt.xlabel(\"Hour of Day\")\nplt.ylabel(\"Fraction of Events\")\n```\n\u6642\u9593\u3092\u30d7\u30ed\u30c3\u30c8\u3057\u307e\u3059\uff0e\n\n\n![__results___4_1 (1).png](https://qiita-image-store.s3.amazonaws.com/0/72093/62907394-623f-93ce-16da-4e31a0f1e19d.png)\n\n\u30bf\u30a4\u30e0\u30b9\u30bf\u30f3\u30d7\u306e\u5206\u6563\u306b\u306f\u4f55\u304b\u3057\u3089\u4e00\u8cab\u6027\u304c\u3042\u308a\u305d\u3046\u3067\u3059\uff0etrain\u3068test\u306b\u306f\u308f\u305a\u304b\u306b\u9055\u3044\u304c\u898b\u53d7\u3051\u3089\u308c\u307e\u3059\uff0e\n\n```\nplt.figure(figsize=(12,4))\ntrain.day.hist(bins=np.linspace(-.5, 14.5, 16), label=\"train\", alpha=0.7, normed=True)\ntest.day.hist(bins=np.linspace(-.5, 14.5, 16), label=\"test\", alpha=0.7, normed=True)\nplt.xlim(-0.5, 14.5)\nplt.legend(loc=\"best\")\nplt.xlabel(\"Days since June 14\")\nplt.ylabel(\"Fraction of Events\")\n```\n\n![__results___6_1.png](https://qiita-image-store.s3.amazonaws.com/0/72093/2f47418a-dc89-b19f-3083-13820b21d972.png)\n\n\u65e5\u306b\u3061\u3067\u306ftrain\u3068test\u304c\u7570\u306a\u3063\u3066\u3044\u308b\u3053\u3068\u304c\u308f\u304b\u308a\u307e\u3059\uff0e\ntest\u30c7\u30fc\u30bf\u306e\u3046\u3061\u534a\u5206\u4ee5\u4e0a\u306f13, 14\u65e5\u306b\u30b5\u30f3\u30d7\u30eb\u3055\u308c\u3066\u3044\u308b\u3053\u3068\u304c\u308f\u304b\u308a\u307e\u3059\uff0e\n\u305d\u3057\u3066\u6b8b\u308a\u306e\u534a\u5206\u306ftrain\u30c7\u30fc\u30bf\u3068\u540c\u69d8\u306e\u65e5\u306b\u30b5\u30f3\u30d7\u30eb\u3055\u308c\u3066\u3044\u308b\u3053\u3068\u304c\u308f\u304b\u308a\u307e\u3059\uff0e\n\n\u3055\u3089\u306b\u7406\u89e3\u3092\u6df1\u3081\u308b\u305f\u3081\uff0ctrain\u30c7\u30fc\u30bf\u306b\u95a2\u3057\u3066\uff0c\u65e5\u306b\u3061\u3068\u6642\u9593\u3067\u30d2\u30fc\u30c8\u30de\u30c3\u30d7\u3067\u53ef\u8996\u5316\u3057\u3066\u3044\u304d\u307e\u3059\uff0e\n\n```\nplt.figure(figsize=(12,6))\nhour_day_counts = train.groupby([\"hour\", \"day\"]).count().ad_id.values.reshape(24,-1)\n# plot 2d hist in days and hours, with each day normalised to 1 \nplt.imshow((hour_day_counts / hour_day_counts.sum(axis=0)).T,\n           interpolation=\"none\", cmap=\"rainbow\")\nplt.xlabel(\"Hour of Day\")\nplt.ylabel(\"Days since June 14\")\n```\n\n![__results___8_1.png](https://qiita-image-store.s3.amazonaws.com/0/72093/aabd31b7-520f-eb12-19fd-df97436feca6.png)\n\n\u7e26\u8ef8\u306f\u65e5\u306b\u3061\u3067\u6a2a\u8ef8\u306f\u6642\u9593\u3067\u3059\uff0e\n\u540c\u69d8\u306btest\u3067\u53ef\u8996\u5316\u3057\u307e\u3059\uff0e\n\n```\n# for completeness, the test set too:\nplt.figure(figsize=(12,6))\nhour_day_counts = test.groupby([\"hour\", \"day\"]).count().ad_id.values.reshape(24,-1)\n# plot 2d hist in days and hours, with each day normalised to 1 \nplt.imshow((hour_day_counts / hour_day_counts.sum(axis=0)).T,\n           interpolation=\"none\", cmap=\"rainbow\")\nplt.xlabel(\"Hour of Day\")\nplt.ylabel(\"Days since June 14\")\n```\n\n![__results___10_1.png](https://qiita-image-store.s3.amazonaws.com/0/72093/a80e5c35-bb14-c7ba-dd4b-b49f50ff4eeb.png)\n", "tags": ["Kaggle", "Python", "\u6a5f\u68b0\u5b66\u7fd2", "analytics", "\u30c7\u30fc\u30bf\u5206\u6790"]}