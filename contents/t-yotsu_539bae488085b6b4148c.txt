{"context": " More than 1 year has passed since last update.Spark\u5165\u9580\u3067\u8aac\u660e\u3055\u308c\u3066\u3044\u308b\u8ca9\u58f2\u5b9f\u7e3e\u306e\u30c7\u30fc\u30bf\u3092\u7528\u3044\u305f\u96c6\u8a08\u51e6\u7406\u3092\u52c9\u5f37\u304c\u3066\u3089Python\u3067\u66f8\u304d\u76f4\u3057\u3066\u307f\u308b\u3002\n\u5b9f\u884c\u74b0\u5883\u306fGCE\u4e0a\u3067\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\uff14\u53f0\u3068Python3.4.3\u3092\u4f7f\u7528\u3002\nRDD\u306e\u7d50\u5408\u3068\u30d6\u30ed\u30fc\u30c9\u30ad\u30e3\u30b9\u30c8\u5909\u6570\u3092\u4f7f\u7528\u3002\n\n0.\u6e96\u5099\n\u624b\u5143\u306e\u30de\u30b7\u30f3\u304b\u3089GCE\u306b\u30b5\u30f3\u30d7\u30eb\u30c7\u30fc\u30bf\u3092\u8ee2\u9001\u3059\u308b\u3002\n$ gcloud compute --project PJ\u540d copy-files --zone \u30be\u30fc\u30f3\u540dApacheSpark_samples.zip spark-client:/tmp\n\n\u30af\u30e9\u30b9\u30bf\u74b0\u5883\u3067\u30b8\u30e7\u30d6\u3092\u6d41\u3059\u306e\u3067\u3001HDFS\u306b\u30c7\u30fc\u30bf\u3092\u7f6e\u304f\u3002\n$ hdfs dfs -put Chapter5/\nBestSellerFinder/           WordCountTop3/\nQuestionnaireSummarization/ data/\nWordCount/                  \n\n$ hdfs dfs -put Chapter5/data/\nREADME.md           questionnaire.csv   sales-october.csv\nproducts.csv        sales-november.csv  \n\n$ hdfs dfs -put Chapter5/data/*.csv /user/y_tadayasu/data/\n\n$ hdfs dfs -ls /user/y_tadayasu/data\nFound 4 items\n-rw-r--r--   3 y_tadayasu y_tadayasu        643 2015-11-23 00:31 /user/y_tadayasu/data/products.csv\n-rw-r--r--   3 y_tadayasu y_tadayasu        132 2015-11-23 00:31 /user/y_tadayasu/data/questionnaire.csv\n-rw-r--r--   3 y_tadayasu y_tadayasu        906 2015-11-23 00:31 /user/y_tadayasu/data/sales-november.csv\n-rw-r--r--   3 y_tadayasu y_tadayasu        937 2015-11-23 00:31 /user/y_tadayasu/data/sales-october.csv\n\n\n1. \u4e8c\u30f6\u6708\u9023\u7d9a\u306750\u500b\u4ee5\u4e0a\u58f2\u308c\u305f\u5546\u54c1\u3092\u898b\u3064\u3051\u3001\u5546\u54c1\u540d\u3001\u5408\u8a08\u8ca9\u58f2\u500b\u6570\u3001\u58f2\u4e0a\u9ad8\u3092\u30d5\u30a1\u30a4\u30eb\u306b\u4fdd\u5b58\n\u4f5c\u6210\u3057\u305f\u30b3\u30fc\u30c9\u306f\u4ee5\u4e0b\u306e\u3068\u304a\u308a\u3067\u3042\u308b\u3002\n# -*- coding:utf-8 -*-\nfrom __future__ import print_function\n\nimport sys\nimport io\nfrom operator import add\n\nfrom pyspark import SparkContext\n\nif __name__ == \"__main__\":\n    if len(sys.argv) != 1:\n        print(\"Usage: examplent\")\n        exit(-1)\n\n    sys.stdout = io.TextIOWrapper(sys.stdout.buffer, encoding='utf-8')\n\n   # print(sys.getdefaultencoding())\n   # print(sys.stdout.encoding)\n\n    fileOct = \"hdfs:///user/y_tadayasu/data/sales-october.csv\"\n    fileNov = \"hdfs:///user/y_tadayasu/data/sales-november.csv\"\n    fileProducts = \"/home/y_tadayasu/data/products.csv\"\n    fileResult = \"hdfs:///user/y_tadayasu/data/result.csv\"\n\n    sc = SparkContext(appName=\"Example\")\n\n    salesOctRDD = sc.textFile(fileOct).map(lambda x: x.split(\",\")).map(lambda x:(x[2],int(x[3]))).reduceByKey(add).filter(lambda x: x[1] >= 50)\n\n    salesNovRDD = sc.textFile(fileNov).map(lambda x: x.split(\",\")).map(lambda x:(x[2],int(x[3]))).reduceByKey(add).filter(lambda x: x[1] >= 50)\n\n    salesOctNovRDD = salesOctRDD.join(salesNovRDD)\n\n    # A data of salesOctNovRDD element is like this tupple (8 (60,72)) \n    salesRDD = salesOctNovRDD.map(lambda x: (x[0],x[1][0]+x[1][1]))\n\n    productsMap = {}\n    for line in open(fileProducts, 'r',encoding='utf-8'):\n        splitLine = line.split(',')\n        productId = splitLine[0]\n        productName = splitLine[1]\n        unitPrice = int(splitLine[2])\n        productsMap[productId] = (productName,unitPrice)\n\n    broadcastMap = sc.broadcast(productsMap)\n\n    result_list = []\n    output = salesRDD.collect()\n    for (productid, count) in output:\n        result_list.append((broadcastMap.value[productid][0],count*productsMap[productid][1]))\n\n    resultRDD = sc.parallelize(result_list)\n    resultRDD.saveAsTextFile(fileResult)\n    sc.stop()\n\n\n1.1. CSV\u30d5\u30a1\u30a4\u30eb\u304b\u3089RDD\u3092\u4f5c\u6210\nSparkContext\u306etextFile\u30e1\u30bd\u30c3\u30c9\u3092\u4f7f\u7528\u3057\u3066CSV\u30d5\u30a1\u30a4\u30eb\u304b\u3089RDD\u3092\u4f5c\u6210\u3059\u308b\u3002\n\u3057\u304b\u3057\u3001textFile\u30e1\u30bd\u30c3\u30c9\u3067\u305d\u306e\u307e\u307e\u53d6\u5f97\u3057\u3066\u307f\u308b\u3068\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u30ab\u30f3\u30de\u3092\u542b\u3081\u3066\uff08'5830,2014-10-02 10:20:38,16,28'\uff09\u304c1\u3064\u306e\u30c7\u30fc\u30bf\u3068\u306a\u308a\u3001\u3053\u306e\u307e\u307e\u3067\u306f\u30c7\u30fc\u30bf\u3092\u6271\u3044\u306b\u304f\u3044\u3002\n>>> salesOctRDD = sc.textFile(\"/user/y_tadayasu/data/sales-october.csv\")\n>>> salesOctRDD.collect()\n[u'5830,2014-10-02 10:20:38,16,28', u'5831,2014-10-02 15:13:04,15,22',.....\n\n\u305d\u3053\u3067\u30ab\u30f3\u30de\u533a\u5207\u308a\u306e\u30c7\u30fc\u30bf\u3092\u5206\u5272\u3059\u308b\u3002\n>>> salesOctRDD = sc.textFile(\"/user/y_tadayasu/data/sales-october.csv\").map(lambda x: x.split(\",\"))\n>>> salesOctRDD.collect()\n[[u'5830', u'2014-10-02 10:20:38', u'16', u'28'], [u'5831', u'2014-10-02 15:13:04', u'15', u'22'], ........\n\n\u30c8\u30e9\u30f3\u30b6\u30af\u30b7\u30e7\u30f3ID\u3068\u8ca9\u58f2\u65e5\u6642\u306f\u5fc5\u8981\u306a\u3044\u306e\u3067\u3001\u3053\u308c\u3089\u306e\u9805\u76ee\u306f\u7701\u304f\u3002\n>>> salesOctRDD = sc.textFile(\"/user/y_tadayasu/data/sales-october.csv\").map(lambda x: x.split(\",\")).map(lambda x:(x[2],int(x[3])))\n>>> salesOctRDD.collect()\n[(u'16', 28), (u'15', 22),.......\n\n\u3053\u308c\u3067\u5546\u54c1\u756a\u53f7\u3068\u8ca9\u58f2\u500b\u6570\u306e\u30c7\u30fc\u30bf\u3092\u53d6\u308a\u51fa\u305b\u305f\u306e\u3067\u3001reduceByKey\u30e1\u30bd\u30c3\u30c9\u3092\u4f7f\u3063\u3066\u5546\u54c1\u3054\u3068\u306e\u5408\u8a08\u8ca9\u58f2\u500b\u6570\u3092\u6c42\u3081\u308b\u3002\n>>> from operator import add\n>>> salesOctRDD = sc.textFile(\"/user/y_tadayasu/data/sales-october.csv\").map(lambda x: x.split(\",\")).map(lambda x:(x[2],int(x[3]))).reduceByKey(add)\n>>> salesOctRDD.collect()\n[(u'11', 21), (u'10', 65), (u'13', 29), (u'12', 26), (u'15', 80), (u'16', 28), (u'19', 18), (u'18', 14), (u'1', 8), (u'3', 20), (u'2', 34), (u'5', 4), (u'4', 5), (u'7', 7), (u'6', 16), (u'20', 19), (u'8', 68)]\n\n50\u500b\u4ee5\u4e0a\u306e\u5546\u54c1\u304c\u5bfe\u8c61\u3068\u306a\u308b\u306e\u3067\u3001filter\u30e1\u30bd\u30c3\u30c9\u3092\u4f7f\u7528\u3057\u3066\u3001\u5408\u8a08\u8ca9\u58f2\u6570\u304c50\u4ee5\u4e0a\u306e\u3082\u306e\u3060\u3051\u3092\u62bd\u51fa\u3059\u308b\u3002\n>>> salesOctRDD = sc.textFile(fileOct).map(lambda x: x.split(\",\")).map(lambda x:(x[2],int(x[3]))).reduceByKey(add).filter(lambda x: x[1] >= 50)\n>>> salesOctRDD.collect()\n[(u'15', 80), (u'10', 65), (u'8', 68)]\n\n11\u6708\u306e\u30c7\u30fc\u30bf\u306b\u5bfe\u3057\u3066\u3082\u540c\u69d8\u306e\u51e6\u7406\u3092\u884c\u3046\u3002\n>>>  salesNovRDD = sc.textFile(fileNov).map(lambda x: x.split(\",\")).map(lambda x:(x[2],int(x[3]))).reduceByKey(add).filter(lambda x: x[1] >= 50)\n>>> salesNovRDD.collect()\n[(u'15', 51), (u'8', 72)]\n\n\n1.2. \uff12\u3064\u306eRDD\u3092\u7d50\u5408\njoin\u30e1\u30bd\u30c3\u30c9\u3092\u4f7f\u3063\u3066\uff12\u3064\u306eRDD(10\u6708\u306811\u6708\u306eRDD)\u3092\u7d50\u5408\u3059\u308b\u3002\n\u3061\u306a\u307f\u306bjoin\u30e1\u30bd\u30c3\u30c9\u306fRDB\u3067\u3044\u3046\u5185\u90e8\u7d50\u5408\u3001\u5916\u90e8\u7d50\u5408\u306eleftOuterJoin\u30e1\u30bd\u30c3\u30c9\u3001rightOuterJoin\u30e1\u30bd\u30c3\u30c9\u3082\u4f7f\u3048\u308b\u3002\n>>> salesOctNovRDD = salesOctRDD.join(salesNovRDD)\n>>> salesOctNovRDD.collect()\n[(u'15', (80, 51)), (u'8', (68, 72))]\n\n\u5546\u54c1\u756a\u53f7\u3092\u30ad\u30fc\u306b\u300110\u6708\u306811\u6708\u306e\u8ca9\u58f2\u500b\u6570\u304cvalue\u3068\u3057\u3066\u5165\u3063\u3066\u3044\u308b\u306e\u3067\u3001map\u30e1\u30bd\u30c3\u30c9\u309210\u6708\u306811\u6708\u306e\u8ca9\u58f2\u500b\u6570\u3092\u52a0\u7b97\u3059\u308b\u3002\n>>> salesRDD = salesOctNovRDD.map(lambda x: (x[0],x[1][0]+x[1][1]))\n>>> salesOctNovSum.collect()\n[(u'15', 131), (u'8', 140)]\n\n\n1.3. \u30d6\u30ed\u30fc\u30c9\u30ad\u30e3\u30b9\u30c8\u5909\u6570\u3092\u5229\u7528\u3057\u3066\u5546\u54c1\u540d\u3068\u5546\u54c1\u756a\u53f7\u306e\u30de\u30c3\u30d7\u3055\u308c\u305f\u30c7\u30fc\u30bf\u3092\u30a8\u30b0\u30bc\u30ad\u30e5\u30fc\u30bf\u306b\u914d\u5e03\u3059\u308b\u3002\n\u3053\u3053\u307e\u3067\u306710\u6708\u300111\u6708\u306b50\u500b\u4ee5\u4e0a\u58f2\u308c\u305f\u5546\u54c1\u3092\u898b\u3064\u3051\u308b\u51e6\u7406\u304c\u3067\u304d\u305f\u304c\u3001\u5546\u54c1\u756a\u53f7\u304c\u5546\u54c1\u540d\u3068\u3072\u3082\u4ed8\u3051\u3089\u308c\u3066\u306a\u3044\u306e\u3067\u3001\u4f55\u306e\u5546\u54c1\u304c\u58f2\u308c\u305f\u306e\u304b\u5206\u304b\u308a\u306b\u304f\u3044\u3002\u305d\u3053\u3067products.csv\u306b\u8a18\u9332\u3055\u308c\u3066\u3044\u308b\u30c7\u30fc\u30bf\u3092\u8aad\u307f\u8fbc\u307f\u3001\u8f9e\u66f8\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306b\u683c\u7d0d\u3002\u305d\u308c\u3092broadcast\u30e1\u30bd\u30c3\u30c9\u3092\u4f7f\u7528\u3057\u914d\u5e03\u3059\u308b\u3002\n#\u30ed\u30fc\u30ab\u30eb\u30d5\u30a1\u30a4\u30eb\u304b\u3089products.csv\u3092\u8aad\u307f\u8fbc\u307f\u3001\u8f9e\u66f8\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306b\u683c\u7d0d\uff08[productid]=productName\uff09\nproductsMap = {}\nfor line in open(fileProducts, 'r',encoding='utf-8'):\n    splitLine = line.split(',')\n    productId = splitLine[0]\n    productName = splitLine[1]\n    unitPrice = int(splitLine[2])\n    productsMap[productId] = (productName,unitPrice)\n\nbroadcastMap = sc.broadcast(productsMap)\n\nvalue\u30e1\u30bd\u30c3\u30c9\u3092\u4f7f\u7528\u3057\u3001\u30d6\u30ed\u30fc\u30ad\u30e3\u30b9\u30c8\u5909\u6570\u304b\u3089\u5024\u3092\u53d6\u308a\u51fa\u3059\u3002\nresult_list = []\noutput = salesRDD.collect()\nfor (productid, count) in output:\n    result_list.append((broadcastMap.value[productid][0],count*productsMap[productid][1]))\n\n\n1.4. \u96c6\u8a08\u7d50\u679c\u3092HDFS\u4e0a\u306b\u51fa\u529b\nSparkContext\u306esaveAsTextFile\u30e1\u30bd\u30c3\u30c9\u3092\u4f7f\u7528\u3057\u3066\u96c6\u8a08\u7d50\u679c\u3092\u30d5\u30a1\u30a4\u30eb\u306b\u51fa\u529b\u3059\u308b\u3002\u3053\u3053\u3067\u306f\u8f9e\u66f8\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u304b\u3089RDD\u306b\u5909\u63db\u3059\u308b\u305f\u3081\u306bparallelize\u30e1\u30bd\u30c3\u30c9\u3092\u4f7f\u7528\u3002\nresultRDD = sc.parallelize(result_list)\n    resultRDD.saveAsTextFile(fileResult)\n\n\u30d5\u30a1\u30a4\u30eb\u306b\u51fa\u529b\u3055\u308c\u3066\u3044\u308b\u304b\u78ba\u8a8d\u3002HDFS\u4e0a\u306b\u7f6e\u3044\u305f\u306e\u3067\u30d5\u30a1\u30a4\u30eb\u306f\u5206\u5272\u3055\u308c\u3066\u3044\u308b\u3002\n$ hdfs dfs -cat /user/y_tadayasu/data/result.csv/part-00000\n('\u6817\u3082\u306a\u304b(10\u500b\u5165\u308a)', 210000)\n$ hdfs dfs -cat /user/y_tadayasu/data/result.csv/part-00001\n('\u4e0a\u751f\u83d3\u5b50(10\u500b\u5165\u308a)', 222700)\n$ hdfs dfs -cat /user/y_tadayasu/data/result.csv/part-0000*\n('\u6817\u3082\u306a\u304b(10\u500b\u5165\u308a)', 210000)\n('\u4e0a\u751f\u83d3\u5b50(10\u500b\u5165\u308a)', 222700)\n\n\n2. \u306f\u307e\u3063\u305f\u7b87\u6240\n\n2.1. \u65e5\u672c\u8a9e\u8868\u793a\n\u554f\u984c\uff09\nPython\u306fUnicode\u3067\u6587\u5b57\u3092\u51e6\u7406\u3059\u308b\u306e\u306f\u3057\u3063\u3066\u3044\u308b\u304c\u3001# -- coding:utf-8 --\u306a\u3069\u3092\u8a18\u8f09\u3057\u3066\u3082\u3001Unicode\u3067\u8868\u793a\u3055\u308c\u3001\u8aad\u3081\u306a\u3044\u3002\u3002\u3002\n>>> productsMap = {}\n>>> for line in open('products.csv', 'r'):\n...    splitLine = line.split(',')\n...    productId = splitLine[0]\n...    productName = splitLine[1]\n...    unitPrice = int(splitLine[2])\n...    productsMap[productId] = (productName,unitPrice)\n>>> broadcastVar = sc.broadcast(productsMap)\n>>> broadcastVar.value\n{'11': ('\\xe6\\xa0\\x97\\xe3\\x81\\xbe\\xe3\\x82\\x93\\xe3\\x81\\x97\\xe3\\x82\\x99\\xe3\\x82\\x85\\xe3\\x81\\x86(5\\xe5\\x80\\x8b\\xe5\\x85\\xa5\\xe3\\x82\\x8a)', '1400\\n'),\n\u30fb\u30fb\u30fb\u30fb\u30fb\n '10': ('\\xe6\\xa0\\x97\\xe3\\x82\\x82\\xe3\\x81\\xaa\\xe3\\x81\\x8b(10\\xe5\\x80\\x8b\\xe5\\x85\\xa5\\xe3\\x82\\x8a)', '1500\\n')}\n\n\u89e3\u6c7a\u65b9\u6cd5\uff09\n\u4ee5\u4e0b\u306e\u30b3\u30fc\u30c9\u3092\u57cb\u3081\u8fbc\u3093\u3060\u3068\u3053\u308d\u3001defaultencoding\u306futf-8\u306b\u306a\u3063\u3066\u3044\u308b\u304c\u3001sys.stdout.encoding\u306futf-8\u306b\u306a\u3063\u3066\u3044\u306a\u3044\u306e\u304c\u5224\u660e\u3002\u306a\u304asys.stdout\u306f\u6a19\u6e96\u51fa\u529b\u306b\u5bfe\u3059\u308b\u30d5\u30a1\u30a4\u30eb\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3067\u3042\u308b\u3002\nprint(sys.getdefaultencoding())\nprint(sys.stdout.encoding)\n\n\u305d\u3053\u3067\u4ee5\u4e0b\u306e1\u884c\u3092\u8ffd\u52a0\u3057\u3001sys.stdout\u3092utf-8\u306b\u8a2d\u5b9a\u3057\u305f\u3068\u3053\u308d\u3001\u65e5\u672c\u8a9e\u304c\u8868\u793a\u3055\u308c\u308b\u3053\u3068\u3092\u78ba\u8a8d\u3002\nsys.stdout = io.TextIOWrapper(sys.stdout.buffer, encoding='utf-8')\n\n\n2.2. YARN\u30af\u30e9\u30b9\u30bf\u74b0\u5883\u306b\u304a\u3051\u308bPyenv\u306e\u4f7f\u7528\n\u5f53\u521dPyenv\u3092\u4f7f\u7528\u3057\u305fPython3.4.3\u74b0\u5883\u3067\u30b3\u30fc\u30c9\u3092\u66f8\u3044\u3066\u30c6\u30b9\u30c8\u3057\u3066\u3044\u305f\u304c\u3001\u30af\u30e9\u30b9\u30bf\u74b0\u5883\u3067\u5b9f\u884c\u3059\u308b\u969b\u3001yarn\u306eNodeManager\u304cyarn\u30e6\u30fc\u30b6\u6a29\u9650\u3067PYSPARK_PYTHON\u3067\u6307\u5b9a\u3055\u308c\u305fpython\u3092\u30ad\u30c3\u30af\u3059\u308b\u305f\u3081\u3001pyenv\u3067\u4e00\u822c\u30e6\u30fc\u30b6\u306e~.pyenv/xxx\u914d\u4e0b\u306b\u3042\u308bpython\u306b\u30a2\u30af\u30bb\u30b9\u3067\u304d\u306a\u3044\u3002\n\u4ed5\u65b9\u304c\u305f\u306a\u3044\u306e\u3067/usr/local/python\u306bpython3\u3092\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3057\u3066\u3068\u308a\u3042\u3048\u305a\u56de\u907f\u3002\uff08\u3042\u307e\u308a\u7dba\u9e97\u306a\u3084\u308a\u65b9\u3067\u306f\u306a\u3044\u304c\u3001\u3068\u308a\u3042\u3048\u305a\u3053\u308c\u3067\u3044\u3044\u304b\u306a\uff09\n\n2.3. reduce\u51e6\u7406\u6642\u306b\u767a\u751f\u3057\u305f\u3001PYTHONHASHSEED\u306e\u5bfe\u5fdc\n\u554f\u984c\uff09\nreduceByKey(add)\u306e\u7b87\u6240\u3067\u30a8\u30e9\u30fc\u304c\u767a\u751f\nraise Exception(\"Randomness of hash of string should be disabled via PYTHONHASHSEED\")\nException: Randomness of hash of string should be disabled via PYTHONHASHSEED\n\nPYTHONHASHSEED\u3092\u7121\u52b9\u306b\u3057\u308d\u3068\u8a00\u3063\u3066\u3044\u308b\u3002\nPYTHONHASHSEED\u3068\u306f\uff1f\nhttps://docs.python.org/3/using/cmdline.html\u306b\u4ee5\u4e0b\u306e\u8a18\u8ff0\u3042\u308a\u3002\nPYTHONHASHSEED allows you to set a fixed value for the hash seed secret.\n\u30cf\u30c3\u30b7\u30e5\u3092\u751f\u6210\u3059\u308b\u305f\u3081\u306e\u30b7\u30fc\u30c9\u3002\u540c\u3058\u30b7\u30fc\u30c9\u3092\u305a\u3063\u3068\u4f7f\u3046\u3088\u308a\u306f\u30e9\u30f3\u30c0\u30e0\u3067\u751f\u6210\u3059\u308b\u65b9\u304c\u30bb\u30ad\u30e5\u30ea\u30c6\u30a3\u3092\u5411\u4e0a\u3055\u305b\u308b\u3053\u3068\u304c\u3067\u304d\u308b\u306e\u3067\u8ffd\u52a0\u3055\u308c\u305f\u3088\u3046\u3067\u3042\u308b\u3002\n\u4ee5\u4e0b\u306e\u30b5\u30a4\u30c8\u306b\u66f8\u3044\u3066\u3042\u308b\u3088\u3046\u306b/root/.bashrc\u306b\u66f8\u3044\u305f\u304c\u89e3\u6c7a\u305b\u305a\u3001\u30a8\u30e9\u30fc\u5185\u5bb9\u306f\u5909\u308f\u3089\u306a\u3044\u3002\nhttp://blog.stuart.axelbrooke.com/python-3-on-spark-return-of-the-pythonhashseed\n\u89e3\u6c7a\u65b9\u6cd5\uff09\nyarn\u30af\u30e9\u30b9\u30bf\u3092\u69cb\u6210\u3059\u308b\u5168\u3066\u306e\u30ce\u30fc\u30c9\u3067yarn-env.sh\u306e\u4e2d\u306bPYTHONHASHSEED=0\u3092\u8a2d\u5b9a\u3059\u308b\u3068\u3001\u30a8\u30e9\u30fc\u304c\u3067\u306a\u304f\u306a\u308a\u3001\u6b63\u5e38\u306b\u30b8\u30e7\u30d6\u304c\u7d42\u4e86\u3059\u308b\u3053\u3068\u3092\u78ba\u8a8d\u3002\n\n/etc/hadoop/conf/yarn-env.sh\n...\nexport PYTHONHASHSEED=0\n...\n\n\n\u4eca\u306e\u30d0\u30fc\u30b8\u30e7\u30f3\u3067\u306f\u307e\u3060python2.X\u7cfb\u3092\u4f7f\u3063\u305f\u65b9\u304c\u3088\u3044\u304b\u3082\u3057\u308c\u306a\u3044\u3002\nSpark\u5165\u9580\u3067\u8aac\u660e\u3055\u308c\u3066\u3044\u308b\u8ca9\u58f2\u5b9f\u7e3e\u306e\u30c7\u30fc\u30bf\u3092\u7528\u3044\u305f\u96c6\u8a08\u51e6\u7406\u3092\u52c9\u5f37\u304c\u3066\u3089Python\u3067\u66f8\u304d\u76f4\u3057\u3066\u307f\u308b\u3002\n\u5b9f\u884c\u74b0\u5883\u306fGCE\u4e0a\u3067\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\uff14\u53f0\u3068Python3.4.3\u3092\u4f7f\u7528\u3002\n\nRDD\u306e\u7d50\u5408\u3068\u30d6\u30ed\u30fc\u30c9\u30ad\u30e3\u30b9\u30c8\u5909\u6570\u3092\u4f7f\u7528\u3002\n\n# 0.\u6e96\u5099\n\u624b\u5143\u306e\u30de\u30b7\u30f3\u304b\u3089GCE\u306b\u30b5\u30f3\u30d7\u30eb\u30c7\u30fc\u30bf\u3092\u8ee2\u9001\u3059\u308b\u3002\n\n```\n$ gcloud compute --project PJ\u540d copy-files --zone \u30be\u30fc\u30f3\u540dApacheSpark_samples.zip spark-client:/tmp\n```\n\n\u30af\u30e9\u30b9\u30bf\u74b0\u5883\u3067\u30b8\u30e7\u30d6\u3092\u6d41\u3059\u306e\u3067\u3001HDFS\u306b\u30c7\u30fc\u30bf\u3092\u7f6e\u304f\u3002\n\n```\n$ hdfs dfs -put Chapter5/\nBestSellerFinder/           WordCountTop3/\nQuestionnaireSummarization/ data/\nWordCount/                  \n\n$ hdfs dfs -put Chapter5/data/\nREADME.md           questionnaire.csv   sales-october.csv\nproducts.csv        sales-november.csv  \n\n$ hdfs dfs -put Chapter5/data/*.csv /user/y_tadayasu/data/\n\n$ hdfs dfs -ls /user/y_tadayasu/data\nFound 4 items\n-rw-r--r--   3 y_tadayasu y_tadayasu        643 2015-11-23 00:31 /user/y_tadayasu/data/products.csv\n-rw-r--r--   3 y_tadayasu y_tadayasu        132 2015-11-23 00:31 /user/y_tadayasu/data/questionnaire.csv\n-rw-r--r--   3 y_tadayasu y_tadayasu        906 2015-11-23 00:31 /user/y_tadayasu/data/sales-november.csv\n-rw-r--r--   3 y_tadayasu y_tadayasu        937 2015-11-23 00:31 /user/y_tadayasu/data/sales-october.csv\n```\n\n# 1. \u4e8c\u30f6\u6708\u9023\u7d9a\u306750\u500b\u4ee5\u4e0a\u58f2\u308c\u305f\u5546\u54c1\u3092\u898b\u3064\u3051\u3001\u5546\u54c1\u540d\u3001\u5408\u8a08\u8ca9\u58f2\u500b\u6570\u3001\u58f2\u4e0a\u9ad8\u3092\u30d5\u30a1\u30a4\u30eb\u306b\u4fdd\u5b58\n\u4f5c\u6210\u3057\u305f\u30b3\u30fc\u30c9\u306f\u4ee5\u4e0b\u306e\u3068\u304a\u308a\u3067\u3042\u308b\u3002\n\n```\n# -*- coding:utf-8 -*-\nfrom __future__ import print_function\n\nimport sys\nimport io\nfrom operator import add\n\nfrom pyspark import SparkContext\n\nif __name__ == \"__main__\":\n    if len(sys.argv) != 1:\n        print(\"Usage: examplent\")\n        exit(-1)\n\n    sys.stdout = io.TextIOWrapper(sys.stdout.buffer, encoding='utf-8')\n\n   # print(sys.getdefaultencoding())\n   # print(sys.stdout.encoding)\n\n    fileOct = \"hdfs:///user/y_tadayasu/data/sales-october.csv\"\n    fileNov = \"hdfs:///user/y_tadayasu/data/sales-november.csv\"\n    fileProducts = \"/home/y_tadayasu/data/products.csv\"\n    fileResult = \"hdfs:///user/y_tadayasu/data/result.csv\"\n\n    sc = SparkContext(appName=\"Example\")\n\n    salesOctRDD = sc.textFile(fileOct).map(lambda x: x.split(\",\")).map(lambda x:(x[2],int(x[3]))).reduceByKey(add).filter(lambda x: x[1] >= 50)\n\n    salesNovRDD = sc.textFile(fileNov).map(lambda x: x.split(\",\")).map(lambda x:(x[2],int(x[3]))).reduceByKey(add).filter(lambda x: x[1] >= 50)\n\n    salesOctNovRDD = salesOctRDD.join(salesNovRDD)\n   \n    # A data of salesOctNovRDD element is like this tupple (8 (60,72)) \n    salesRDD = salesOctNovRDD.map(lambda x: (x[0],x[1][0]+x[1][1]))\n\n    productsMap = {}\n    for line in open(fileProducts, 'r',encoding='utf-8'):\n        splitLine = line.split(',')\n        productId = splitLine[0]\n        productName = splitLine[1]\n        unitPrice = int(splitLine[2])\n        productsMap[productId] = (productName,unitPrice)\n\n    broadcastMap = sc.broadcast(productsMap)\n\n    result_list = []\n    output = salesRDD.collect()\n    for (productid, count) in output:\n        result_list.append((broadcastMap.value[productid][0],count*productsMap[productid][1]))\n\n    resultRDD = sc.parallelize(result_list)\n    resultRDD.saveAsTextFile(fileResult)\n    sc.stop()\n```\n\n\n### 1.1. CSV\u30d5\u30a1\u30a4\u30eb\u304b\u3089RDD\u3092\u4f5c\u6210\nSparkContext\u306etextFile\u30e1\u30bd\u30c3\u30c9\u3092\u4f7f\u7528\u3057\u3066CSV\u30d5\u30a1\u30a4\u30eb\u304b\u3089RDD\u3092\u4f5c\u6210\u3059\u308b\u3002\n\u3057\u304b\u3057\u3001textFile\u30e1\u30bd\u30c3\u30c9\u3067\u305d\u306e\u307e\u307e\u53d6\u5f97\u3057\u3066\u307f\u308b\u3068\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u30ab\u30f3\u30de\u3092\u542b\u3081\u3066\uff08'5830,2014-10-02 10:20:38,16,28'\uff09\u304c1\u3064\u306e\u30c7\u30fc\u30bf\u3068\u306a\u308a\u3001\u3053\u306e\u307e\u307e\u3067\u306f\u30c7\u30fc\u30bf\u3092\u6271\u3044\u306b\u304f\u3044\u3002\n\n```\n>>> salesOctRDD = sc.textFile(\"/user/y_tadayasu/data/sales-october.csv\")\n>>> salesOctRDD.collect()\n[u'5830,2014-10-02 10:20:38,16,28', u'5831,2014-10-02 15:13:04,15,22',.....\n```\n\n\u305d\u3053\u3067\u30ab\u30f3\u30de\u533a\u5207\u308a\u306e\u30c7\u30fc\u30bf\u3092\u5206\u5272\u3059\u308b\u3002\n\n```\n>>> salesOctRDD = sc.textFile(\"/user/y_tadayasu/data/sales-october.csv\").map(lambda x: x.split(\",\"))\n>>> salesOctRDD.collect()\n[[u'5830', u'2014-10-02 10:20:38', u'16', u'28'], [u'5831', u'2014-10-02 15:13:04', u'15', u'22'], ........\n```\n\n\u30c8\u30e9\u30f3\u30b6\u30af\u30b7\u30e7\u30f3ID\u3068\u8ca9\u58f2\u65e5\u6642\u306f\u5fc5\u8981\u306a\u3044\u306e\u3067\u3001\u3053\u308c\u3089\u306e\u9805\u76ee\u306f\u7701\u304f\u3002\n\n```\n>>> salesOctRDD = sc.textFile(\"/user/y_tadayasu/data/sales-october.csv\").map(lambda x: x.split(\",\")).map(lambda x:(x[2],int(x[3])))\n>>> salesOctRDD.collect()\n[(u'16', 28), (u'15', 22),.......\n```\n\n\u3053\u308c\u3067\u5546\u54c1\u756a\u53f7\u3068\u8ca9\u58f2\u500b\u6570\u306e\u30c7\u30fc\u30bf\u3092\u53d6\u308a\u51fa\u305b\u305f\u306e\u3067\u3001reduceByKey\u30e1\u30bd\u30c3\u30c9\u3092\u4f7f\u3063\u3066\u5546\u54c1\u3054\u3068\u306e\u5408\u8a08\u8ca9\u58f2\u500b\u6570\u3092\u6c42\u3081\u308b\u3002\n\n```\n>>> from operator import add\n>>> salesOctRDD = sc.textFile(\"/user/y_tadayasu/data/sales-october.csv\").map(lambda x: x.split(\",\")).map(lambda x:(x[2],int(x[3]))).reduceByKey(add)\n>>> salesOctRDD.collect()\n[(u'11', 21), (u'10', 65), (u'13', 29), (u'12', 26), (u'15', 80), (u'16', 28), (u'19', 18), (u'18', 14), (u'1', 8), (u'3', 20), (u'2', 34), (u'5', 4), (u'4', 5), (u'7', 7), (u'6', 16), (u'20', 19), (u'8', 68)]\n```\n\n50\u500b\u4ee5\u4e0a\u306e\u5546\u54c1\u304c\u5bfe\u8c61\u3068\u306a\u308b\u306e\u3067\u3001filter\u30e1\u30bd\u30c3\u30c9\u3092\u4f7f\u7528\u3057\u3066\u3001\u5408\u8a08\u8ca9\u58f2\u6570\u304c50\u4ee5\u4e0a\u306e\u3082\u306e\u3060\u3051\u3092\u62bd\u51fa\u3059\u308b\u3002\n\n```\n>>> salesOctRDD = sc.textFile(fileOct).map(lambda x: x.split(\",\")).map(lambda x:(x[2],int(x[3]))).reduceByKey(add).filter(lambda x: x[1] >= 50)\n>>> salesOctRDD.collect()\n[(u'15', 80), (u'10', 65), (u'8', 68)]\n```\n\n11\u6708\u306e\u30c7\u30fc\u30bf\u306b\u5bfe\u3057\u3066\u3082\u540c\u69d8\u306e\u51e6\u7406\u3092\u884c\u3046\u3002\n\n```\n>>>  salesNovRDD = sc.textFile(fileNov).map(lambda x: x.split(\",\")).map(lambda x:(x[2],int(x[3]))).reduceByKey(add).filter(lambda x: x[1] >= 50)\n>>> salesNovRDD.collect()\n[(u'15', 51), (u'8', 72)]\n```\n\n### 1.2. \uff12\u3064\u306eRDD\u3092\u7d50\u5408\njoin\u30e1\u30bd\u30c3\u30c9\u3092\u4f7f\u3063\u3066\uff12\u3064\u306eRDD(10\u6708\u306811\u6708\u306eRDD)\u3092\u7d50\u5408\u3059\u308b\u3002\n\b\u3061\u306a\u307f\u306bjoin\u30e1\u30bd\u30c3\u30c9\u306fRDB\u3067\u3044\u3046\u5185\u90e8\u7d50\u5408\u3001\u5916\u90e8\u7d50\u5408\u306eleftOuterJoin\u30e1\u30bd\u30c3\u30c9\u3001rightOuterJoin\u30e1\u30bd\u30c3\u30c9\u3082\u4f7f\u3048\u308b\u3002\n\n```\n>>> salesOctNovRDD = salesOctRDD.join(salesNovRDD)\n>>> salesOctNovRDD.collect()\n[(u'15', (80, 51)), (u'8', (68, 72))]\n```\n\n\u5546\u54c1\u756a\u53f7\u3092\u30ad\u30fc\u306b\u300110\u6708\u306811\u6708\u306e\u8ca9\u58f2\u500b\u6570\u304cvalue\u3068\u3057\u3066\u5165\u3063\u3066\u3044\u308b\u306e\u3067\u3001map\u30e1\u30bd\u30c3\u30c9\u309210\u6708\u306811\u6708\u306e\u8ca9\u58f2\u500b\u6570\u3092\u52a0\u7b97\u3059\u308b\u3002\n\n```\n>>> salesRDD = salesOctNovRDD.map(lambda x: (x[0],x[1][0]+x[1][1]))\n>>> salesOctNovSum.collect()\n[(u'15', 131), (u'8', 140)]\n```\n\n### 1.3. \u30d6\u30ed\u30fc\u30c9\u30ad\u30e3\u30b9\u30c8\u5909\u6570\u3092\u5229\u7528\u3057\u3066\u5546\u54c1\u540d\u3068\u5546\u54c1\u756a\u53f7\u306e\u30de\u30c3\u30d7\u3055\u308c\u305f\u30c7\u30fc\u30bf\u3092\u30a8\u30b0\u30bc\u30ad\u30e5\u30fc\u30bf\u306b\u914d\u5e03\u3059\u308b\u3002\n\u3053\u3053\u307e\u3067\u306710\u6708\u300111\u6708\u306b50\u500b\u4ee5\u4e0a\u58f2\u308c\u305f\u5546\u54c1\u3092\u898b\u3064\u3051\u308b\u51e6\u7406\u304c\u3067\u304d\u305f\u304c\u3001\u5546\u54c1\u756a\u53f7\u304c\u5546\u54c1\u540d\u3068\u3072\u3082\u4ed8\u3051\u3089\u308c\u3066\u306a\u3044\u306e\u3067\u3001\u4f55\u306e\u5546\u54c1\u304c\u58f2\u308c\u305f\u306e\u304b\u5206\u304b\u308a\u306b\u304f\u3044\u3002\u305d\u3053\u3067products.csv\u306b\u8a18\u9332\u3055\u308c\u3066\u3044\u308b\u30c7\u30fc\u30bf\u3092\u8aad\u307f\u8fbc\u307f\u3001\u8f9e\u66f8\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306b\u683c\u7d0d\u3002\u305d\u308c\u3092broadcast\u30e1\u30bd\u30c3\u30c9\u3092\u4f7f\u7528\u3057\u914d\u5e03\u3059\u308b\u3002\n\n```\n#\u30ed\u30fc\u30ab\u30eb\u30d5\u30a1\u30a4\u30eb\u304b\u3089products.csv\u3092\u8aad\u307f\u8fbc\u307f\u3001\u8f9e\u66f8\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306b\u683c\u7d0d\uff08[productid]=productName\uff09\nproductsMap = {}\nfor line in open(fileProducts, 'r',encoding='utf-8'):\n    splitLine = line.split(',')\n    productId = splitLine[0]\n    productName = splitLine[1]\n    unitPrice = int(splitLine[2])\n    productsMap[productId] = (productName,unitPrice)\n\nbroadcastMap = sc.broadcast(productsMap)\n```\nvalue\u30e1\u30bd\u30c3\u30c9\u3092\u4f7f\u7528\u3057\u3001\u30d6\u30ed\u30fc\u30ad\u30e3\u30b9\u30c8\u5909\u6570\u304b\u3089\u5024\u3092\u53d6\u308a\u51fa\u3059\u3002\n\n```\nresult_list = []\noutput = salesRDD.collect()\nfor (productid, count) in output:\n    result_list.append((broadcastMap.value[productid][0],count*productsMap[productid][1]))\n```\n\n### 1.4. \u96c6\u8a08\u7d50\u679c\u3092HDFS\u4e0a\u306b\u51fa\u529b\nSparkContext\u306esaveAsTextFile\u30e1\u30bd\u30c3\u30c9\u3092\u4f7f\u7528\u3057\u3066\u96c6\u8a08\u7d50\u679c\u3092\u30d5\u30a1\u30a4\u30eb\u306b\u51fa\u529b\u3059\u308b\u3002\u3053\u3053\u3067\u306f\u8f9e\u66f8\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u304b\u3089RDD\u306b\u5909\u63db\u3059\u308b\u305f\u3081\u306bparallelize\u30e1\u30bd\u30c3\u30c9\u3092\u4f7f\u7528\u3002\n\n```\nresultRDD = sc.parallelize(result_list)\n    resultRDD.saveAsTextFile(fileResult)\n```\n\n\u30d5\u30a1\u30a4\u30eb\u306b\u51fa\u529b\u3055\u308c\u3066\u3044\u308b\u304b\u78ba\u8a8d\u3002HDFS\u4e0a\u306b\u7f6e\u3044\u305f\u306e\u3067\u30d5\u30a1\u30a4\u30eb\u306f\u5206\u5272\u3055\u308c\u3066\u3044\u308b\u3002\n\n```\n$ hdfs dfs -cat /user/y_tadayasu/data/result.csv/part-00000\n('\u6817\u3082\u306a\u304b(10\u500b\u5165\u308a)', 210000)\n$ hdfs dfs -cat /user/y_tadayasu/data/result.csv/part-00001\n('\u4e0a\u751f\u83d3\u5b50(10\u500b\u5165\u308a)', 222700)\n$ hdfs dfs -cat /user/y_tadayasu/data/result.csv/part-0000*\n('\u6817\u3082\u306a\u304b(10\u500b\u5165\u308a)', 210000)\n('\u4e0a\u751f\u83d3\u5b50(10\u500b\u5165\u308a)', 222700)\n```\n\n# 2. \u306f\u307e\u3063\u305f\u7b87\u6240\n## 2.1. \u65e5\u672c\u8a9e\u8868\u793a\n\u554f\u984c\uff09\nPython\u306fUnicode\u3067\u6587\u5b57\u3092\u51e6\u7406\u3059\u308b\u306e\u306f\u3057\u3063\u3066\u3044\u308b\u304c\u3001# -*- coding:utf-8 -*-\u306a\u3069\u3092\u8a18\u8f09\u3057\u3066\u3082\u3001Unicode\u3067\u8868\u793a\u3055\u308c\u3001\u8aad\u3081\u306a\u3044\u3002\u3002\u3002\n\n```\n>>> productsMap = {}\n>>> for line in open('products.csv', 'r'):\n...    splitLine = line.split(',')\n...    productId = splitLine[0]\n...    productName = splitLine[1]\n...    unitPrice = int(splitLine[2])\n...    productsMap[productId] = (productName,unitPrice)\n>>> broadcastVar = sc.broadcast(productsMap)\n>>> broadcastVar.value\n{'11': ('\\xe6\\xa0\\x97\\xe3\\x81\\xbe\\xe3\\x82\\x93\\xe3\\x81\\x97\\xe3\\x82\\x99\\xe3\\x82\\x85\\xe3\\x81\\x86(5\\xe5\\x80\\x8b\\xe5\\x85\\xa5\\xe3\\x82\\x8a)', '1400\\n'),\n\u30fb\u30fb\u30fb\u30fb\u30fb\n '10': ('\\xe6\\xa0\\x97\\xe3\\x82\\x82\\xe3\\x81\\xaa\\xe3\\x81\\x8b(10\\xe5\\x80\\x8b\\xe5\\x85\\xa5\\xe3\\x82\\x8a)', '1500\\n')}\n```\n\n\u89e3\u6c7a\u65b9\u6cd5\uff09\n\u4ee5\u4e0b\u306e\u30b3\u30fc\u30c9\u3092\u57cb\u3081\u8fbc\u3093\u3060\u3068\u3053\u308d\u3001defaultencoding\u306futf-8\u306b\u306a\u3063\u3066\u3044\u308b\u304c\u3001sys.stdout.encoding\u306futf-8\u306b\u306a\u3063\u3066\u3044\u306a\u3044\u306e\u304c\u5224\u660e\u3002\u306a\u304asys.stdout\u306f\u6a19\u6e96\u51fa\u529b\u306b\u5bfe\u3059\u308b\u30d5\u30a1\u30a4\u30eb\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3067\u3042\u308b\u3002\n\n```\nprint(sys.getdefaultencoding())\nprint(sys.stdout.encoding)\n```\n\n\u305d\u3053\u3067\u4ee5\u4e0b\u306e1\u884c\u3092\u8ffd\u52a0\u3057\u3001sys.stdout\u3092utf-8\u306b\u8a2d\u5b9a\u3057\u305f\u3068\u3053\u308d\u3001\u65e5\u672c\u8a9e\u304c\u8868\u793a\u3055\u308c\u308b\u3053\u3068\u3092\u78ba\u8a8d\u3002\n\n```\nsys.stdout = io.TextIOWrapper(sys.stdout.buffer, encoding='utf-8')\n```\n\n## 2.2. YARN\u30af\u30e9\u30b9\u30bf\u74b0\u5883\u306b\u304a\u3051\u308bPyenv\u306e\u4f7f\u7528\n\u5f53\u521dPyenv\u3092\u4f7f\u7528\u3057\u305fPython3.4.3\u74b0\u5883\u3067\u30b3\u30fc\u30c9\u3092\u66f8\u3044\u3066\u30c6\u30b9\u30c8\u3057\u3066\u3044\u305f\u304c\u3001\u30af\u30e9\u30b9\u30bf\u74b0\u5883\u3067\u5b9f\u884c\u3059\u308b\u969b\u3001yarn\u306eNodeManager\u304cyarn\u30e6\u30fc\u30b6\u6a29\u9650\u3067PYSPARK_PYTHON\u3067\u6307\u5b9a\u3055\u308c\u305fpython\u3092\u30ad\u30c3\u30af\u3059\u308b\u305f\u3081\u3001pyenv\u3067\u4e00\u822c\u30e6\u30fc\u30b6\u306e~.pyenv/xxx\u914d\u4e0b\u306b\u3042\u308bpython\u306b\u30a2\u30af\u30bb\u30b9\u3067\u304d\u306a\u3044\u3002\n\u4ed5\u65b9\u304c\u305f\u306a\u3044\u306e\u3067/usr/local/python\u306bpython3\u3092\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3057\u3066\u3068\u308a\u3042\u3048\u305a\u56de\u907f\u3002\uff08\u3042\u307e\u308a\u7dba\u9e97\u306a\u3084\u308a\u65b9\u3067\u306f\u306a\u3044\u304c\u3001\u3068\u308a\u3042\u3048\u305a\u3053\u308c\u3067\u3044\u3044\u304b\u306a\uff09\n\n## 2.3. reduce\u51e6\u7406\u6642\u306b\u767a\u751f\u3057\u305f\u3001PYTHONHASHSEED\u306e\u5bfe\u5fdc\n\u554f\u984c\uff09\nreduceByKey(add)\u306e\u7b87\u6240\u3067\u30a8\u30e9\u30fc\u304c\u767a\u751f\n\n```\nraise Exception(\"Randomness of hash of string should be disabled via PYTHONHASHSEED\")\nException: Randomness of hash of string should be disabled via PYTHONHASHSEED\n```\n\nPYTHONHASHSEED\u3092\u7121\u52b9\u306b\u3057\u308d\u3068\u8a00\u3063\u3066\u3044\u308b\u3002\nPYTHONHASHSEED\u3068\u306f\uff1f\nhttps://docs.python.org/3/using/cmdline.html\u306b\u4ee5\u4e0b\u306e\u8a18\u8ff0\u3042\u308a\u3002\nPYTHONHASHSEED allows you to set a fixed value for the hash seed secret.\n\u30cf\u30c3\u30b7\u30e5\u3092\u751f\u6210\u3059\u308b\u305f\u3081\u306e\u30b7\u30fc\u30c9\u3002\u540c\u3058\u30b7\u30fc\u30c9\u3092\u305a\u3063\u3068\u4f7f\u3046\u3088\u308a\u306f\u30e9\u30f3\u30c0\u30e0\u3067\u751f\u6210\u3059\u308b\u65b9\u304c\u30bb\u30ad\u30e5\u30ea\u30c6\u30a3\u3092\u5411\u4e0a\u3055\u305b\u308b\u3053\u3068\u304c\u3067\u304d\u308b\u306e\u3067\u8ffd\u52a0\u3055\u308c\u305f\u3088\u3046\u3067\u3042\u308b\u3002\n\n\u4ee5\u4e0b\u306e\u30b5\u30a4\u30c8\u306b\u66f8\u3044\u3066\u3042\u308b\u3088\u3046\u306b/root/.bashrc\u306b\u66f8\u3044\u305f\u304c\u89e3\u6c7a\u305b\u305a\u3001\u30a8\u30e9\u30fc\u5185\u5bb9\u306f\u5909\u308f\u3089\u306a\u3044\u3002\n\nhttp://blog.stuart.axelbrooke.com/python-3-on-spark-return-of-the-pythonhashseed\n\n\u89e3\u6c7a\u65b9\u6cd5\uff09\nyarn\u30af\u30e9\u30b9\u30bf\u3092\u69cb\u6210\u3059\u308b\u5168\u3066\u306e\u30ce\u30fc\u30c9\u3067yarn-env.sh\u306e\u4e2d\u306bPYTHONHASHSEED=0\u3092\u8a2d\u5b9a\u3059\u308b\u3068\u3001\u30a8\u30e9\u30fc\u304c\u3067\u306a\u304f\u306a\u308a\u3001\u6b63\u5e38\u306b\u30b8\u30e7\u30d6\u304c\u7d42\u4e86\u3059\u308b\u3053\u3068\u3092\u78ba\u8a8d\u3002\n\n```/etc/hadoop/conf/yarn-env.sh\n...\nexport PYTHONHASHSEED=0\n...\n```\n\n\u4eca\u306e\u30d0\u30fc\u30b8\u30e7\u30f3\u3067\u306f\u307e\u3060python2.X\u7cfb\u3092\u4f7f\u3063\u305f\u65b9\u304c\u3088\u3044\u304b\u3082\u3057\u308c\u306a\u3044\u3002\n", "tags": ["Spark", "python3"]}