{"tags": ["C#", "codeiq"], "context": " \u3053\u306e\u8a18\u4e8b\u306f\u6700\u7d42\u66f4\u65b0\u65e5\u304b\u30891\u5e74\u4ee5\u4e0a\u304c\u7d4c\u904e\u3057\u3066\u3044\u307e\u3059\u3002\u7d50\u57ce\u6d69\u3055\u3093\u306b\u3088\u308bCodeIQ\u7528\u554f\u984c\u304b\u3089\u3002\nhttp://www.hyuki.com/codeiq/\n\nProgram.cs\nusing System;\nusing System.Diagnostics;\nusing System.Linq;\n\nclass Program\n{\n    static void Main(string[] args)\n    {\n        var gems = new[] { 1, 4, 1, 4, 2, 1, 3 };\n        var pattern = \"eagcdfbe\".Select(x => x - 'a').ToArray();\n        var day = Day(gems, pattern);\n        Console.WriteLine(day);\n    }\n\n    /// <summary>\n    /// \u4f7f\u3048\u308b\u5b9d\u77f3\u306e\u4e00\u89a7\u304c\u4e0e\u3048\u3089\u308c\u3066\u3044\u308b\u3068\u304d\u306b\u3001\n    /// \u6307\u5b9a\u3057\u305f\u30d1\u30bf\u30fc\u30f3\u304c\u4f55\u65e5\u76ee\u306b\u767b\u5834\u3059\u308b\u304b\u3092\u8fd4\u3057\u307e\u3059\u3002\n    /// </summary>\n    /// <param name=\"gems\">\n    /// \u4f7f\u3048\u308b\u5b9d\u77f3\u306e\u4e00\u89a7\u3092\u8868\u3059int\u914d\u5217\u3002\n    /// <c>gems[0]</c>\u304c\u5b9d\u77f3a\u306e\u6570\u3001<c>gems[1]</c>\u304c\u5b9d\u77f3b\u306e\u6570\u3001\u3068\u3044\u3046\u3088\u3046\u306b\u5bfe\u5fdc\u3057\u307e\u3059\u3002\n    /// \u305f\u3068\u3048\u3070\u3001\u4f7f\u3048\u308b\u5b9d\u77f3\u306e\u4f8b\u304c \"aaabcc\" \u3060\u3063\u305f\u5834\u5408\u306f\u3001\n    /// <c>{ 3, 1, 2 }</c>\u3068\u3044\u3046\u914d\u5217\u3067\u8868\u73fe\u3057\u307e\u3059\u3002\n    /// </param>\n    /// <param name=\"pattern\">\n    /// \u5b9d\u77f3\u30d1\u30bf\u30fc\u30f3\u3092\u6307\u5b9a\u3059\u308bint\u914d\u5217\u3002\n    /// \u5b9d\u77f3a\u306f0\u3001\u5b9d\u77f3b\u306f1\u3001\u3068\u3044\u3046\u3088\u3046\u306b\u5bfe\u5fdc\u3057\u307e\u3059\u3002\n    /// \u305f\u3068\u3048\u3070\u3001\"aabac\"\u3068\u3044\u3046\u30d1\u30bf\u30fc\u30f3\u306f\u3001<c>{ 0, 0, 1, 0, 2 }</c>\u3068\u3044\u3046\u914d\u5217\u3067\u8868\u73fe\u3057\u307e\u3059\u3002\n    /// </param>\n    /// <returns>\n    /// \u6307\u5b9a\u3057\u305f\u30d1\u30bf\u30fc\u30f3\u306e\u767b\u5834\u65e5\u3002\n    /// \u6307\u5b9a\u3057\u305f\u30d1\u30bf\u30fc\u30f3\u3092\u4f5c\u308b\u3053\u3068\u304c\u3067\u304d\u306a\u3044\u5834\u5408\u306f\u3001\u305d\u306e\u76f4\u524d\u306b\u3042\u305f\u308b\u3001\u53ef\u80fd\u306a\u30d1\u30bf\u30fc\u30f3\u306e\u767b\u5834\u65e5\u3002\n    /// </returns>\n    static long Day(int[] gems, int[] pattern)\n    {\n        const int gem_A = 0;\n        var sum = 0L;\n        var memo = Array.CreateInstance(typeof(long?),\n                                        gems.Select(x => x + 1).ToArray());\n\n        for (var i = 0; i < pattern.Length; i++)\n        {\n            var currentPattern = new int[i + 1];\n            Array.Copy(pattern, currentPattern, i);\n            var gem_i = pattern[i];\n            for (var gem_j = gem_A; gem_j <= gem_i; gem_j++)\n            {\n                currentPattern[i] = gem_j;\n                var rest = Take(gems, currentPattern);\n                if (rest == null) continue;\n                sum++;\n                DebugWrite(currentPattern);\n                if (gem_j < gem_i)\n                {\n                    var count = Combination(rest, memo);\n                    sum += count;\n                    DebugWrite(currentPattern, rest, count);\n                }\n            }\n        }\n        return sum;\n    }\n\n    /// <summary>\n    /// \u4f7f\u3048\u308b\u5b9d\u77f3\u306e\u4e00\u89a7\u304b\u3089\u3001\u6307\u5b9a\u3057\u305f\u30d1\u30bf\u30fc\u30f3\u3092\u4e26\u3079\u308b\u305f\u3081\u306b\u5b9d\u77f3\u3092\u53d6\u308a\u51fa\u3057\u305f\u5834\u5408\u306b\u3001\n    /// \u6b8b\u3063\u305f\u5b9d\u77f3\u306e\u4e00\u89a7\u3092\u8fd4\u3057\u307e\u3059\u3002\n    /// </summary>\n    /// <param name=\"gems\">\n    /// \u4f7f\u3048\u308b\u5b9d\u77f3\u306e\u4e00\u89a7\u3092\u8868\u3059int\u914d\u5217\u3002\n    /// <c>gems[0]</c>\u304c\u5b9d\u77f3a\u306e\u6570\u3001<c>gems[1]</c>\u304c\u5b9d\u77f3b\u306e\u6570\u3001\u3068\u3044\u3046\u3088\u3046\u306b\u5bfe\u5fdc\u3057\u307e\u3059\u3002\n    /// </param>\n    /// <param name=\"pattern\">\n    /// \u5b9d\u77f3\u30d1\u30bf\u30fc\u30f3\u3092\u6307\u5b9a\u3059\u308bint\u914d\u5217\u3002\n    /// \u5b9d\u77f3a\u306f0\u3001\u5b9d\u77f3b\u306f1\u3001\u3068\u3044\u3046\u3088\u3046\u306b\u5bfe\u5fdc\u3057\u307e\u3059\u3002\n    /// </param>\n    /// <returns>\n    /// \u6b8b\u3063\u305f\u5b9d\u77f3\u306e\u4e00\u89a7\u3092\u8868\u3059int\u914d\u5217\u3002\n    /// <c>gems[0]</c>\u304c\u5b9d\u77f3a\u306e\u6570\u3001<c>gems[1]</c>\u304c\u5b9d\u77f3b\u306e\u6570\u3001\u3068\u3044\u3046\u3088\u3046\u306b\u5bfe\u5fdc\u3057\u307e\u3059\u3002\n    /// \u6307\u5b9a\u3057\u305f\u30d1\u30bf\u30fc\u30f3\u3092\u4f5c\u308b\u3053\u3068\u304c\u3067\u304d\u306a\u3044\u5834\u5408\u306f<c>null</c>\u3092\u8fd4\u3057\u307e\u3059\u3002\n    /// </returns>\n    static int[] Take(int[] gems, int[] pattern)\n    {\n        var rest = (int[])gems.Clone();\n        for (var i = 0; i < pattern.Length; i++)\n        {\n            if (rest[pattern[i]] == 0) return null;\n            rest[pattern[i]]--;\n        }\n        return rest;\n    }\n\n    /// <summary>\n    /// \u4f7f\u3048\u308b\u5b9d\u77f3\u306e\u4e00\u89a7\u304b\u3089\u3001\u305d\u306e\u4e00\u90e8\u3092\u53d6\u308a\u51fa\u3057\u305f\u3068\u304d\u306b\u3001\n    /// \u53d6\u308a\u51fa\u3057\u305f\u5b9d\u77f3\u306b\u3088\u3063\u3066\u4f5c\u308b\u3053\u3068\u304c\u3067\u304d\u308b\u5b9d\u77f3\u30d1\u30bf\u30fc\u30f3\u304c\u4f55\u901a\u308a\u3042\u308b\u304b\u3001\u6570\u3048\u4e0a\u3052\u3066\u8fd4\u3057\u307e\u3059\u3002\n    /// </summary>\n    /// <param name=\"gems\">\n    /// \u4f7f\u3048\u308b\u5b9d\u77f3\u306e\u4e00\u89a7\u304b\u3089\u53d6\u308a\u51fa\u3057\u305f\u5b9d\u77f3\u3092\u8868\u3059int\u914d\u5217\u3002\n    /// <c>gems[0]</c>\u304c\u5b9d\u77f3a\u306e\u6570\u3001<c>gems[1]</c>\u304c\u5b9d\u77f3b\u306e\u6570\u3001\u3068\u3044\u3046\u3088\u3046\u306b\u5bfe\u5fdc\u3057\u307e\u3059\u3002\n    /// \u305f\u3068\u3048\u3070\u3001\u4f7f\u3048\u308b\u5b9d\u77f3\u306e\u4f8b\u304c \"aaabcc\" \u306e\u6642\u306b\u3001a\u30922\u3064\u3001b\u30921\u3064\u53d6\u308a\u51fa\u3057\u305f\u5834\u5408\u306f\u3001\n    /// <c>{ 2, 1, 0 }</c>\u3068\u3044\u3046\u914d\u5217\u3067\u8868\u73fe\u3057\u307e\u3059\u3002\n    /// </param>\n    /// <param name=\"memo\">\n    /// \u53d6\u308a\u51fa\u3057\u305f\u5b9d\u77f3\u3068\u3001\u305d\u308c\u306b\u3088\u3063\u3066\u4f5c\u308b\u3053\u3068\u304c\u3067\u304d\u308b\u5b9d\u77f3\u30d1\u30bf\u30fc\u30f3\u306e\u6570\u306e\u5bfe\u5fdc\u8868\u3092\u30e1\u30e2\u3057\u305f\u3082\u306e\u3002\n    /// <c>long?</c>\u578b\u306e\u591a\u6b21\u5143\u914d\u5217\u3067\u3001\n    /// \u6b21\u5143\u6570\uff08\u30e9\u30f3\u30af\uff09\u306f\u4f7f\u3048\u308b\u5b9d\u77f3\u306e\u7a2e\u985e\u306e\u6570\u3068\u4e00\u81f4\u3057\u3066\u3044\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\n    /// \u305f\u3068\u3048\u3070\u3001\u4f7f\u3048\u308b\u5b9d\u77f3\u306e\u4f8b\u304c \"aaabcc\" \u306e\u6642\u306b\u3001\n    /// a\u30922\u3064\u3001b\u30921\u3064\u53d6\u308a\u51fa\u3057\u305f\u5834\u5408\u306e\u5b9d\u77f3\u30d1\u30bf\u30fc\u30f3\u306e\u6570\u306f\u3001\n    /// \u3053\u306e\u30e1\u30bd\u30c3\u30c9\u3067\u8a08\u7b97\u3055\u308c\u305f\u5f8c\u3001<c>memo[2, 1, 0]</c>\u306b\u30e1\u30e2\u3055\u308c\u307e\u3059\u3002\n    /// </param>\n    /// <returns>\n    /// \u53d6\u308a\u51fa\u3057\u305f\u5b9d\u77f3\u306b\u3088\u3063\u3066\u4f5c\u308b\u3053\u3068\u304c\u3067\u304d\u308b\u5b9d\u77f3\u30d1\u30bf\u30fc\u30f3\u306e\u6570\u3002\n    /// </returns>\n    static long Combination(int[] gems, Array memo)\n    {\n        var count = (long?)memo.GetValue(gems);\n        if (count.HasValue) return count.Value;\n        count = 0L;\n        for (var i = 0; i < gems.Length; i++)\n        {\n            if (gems[i] == 0) continue;\n            var rest = (int[])gems.Clone();\n            rest[i]--;\n            count += 1L + Combination(rest, memo);\n        }\n        memo.SetValue(count, gems);\n        return count.Value;\n    }\n\n    [Conditional(\"DEBUG\")]\n    static void DebugWrite(int[] pattern)\n    {\n        var patternString = new string(\n            pattern.Select(x => Convert.ToChar('a' + x)).ToArray());\n        Console.WriteLine(patternString + \" -> 1\u901a\u308a\");\n    }\n\n    [Conditional(\"DEBUG\")]\n    static void DebugWrite(int[] pattern, int[] rest, long count)\n    {\n        var patternString = new string(\n            pattern.Select(x => Convert.ToChar('a' + x)).ToArray());\n        var restString = string.Join(\",\", rest);\n        Console.WriteLine(patternString\n                          + \"* -> Combination(\" + restString + \") = \"\n                          + count + \"\u901a\u308a\");\n    }\n}\n\n\n\u7d50\u57ce\u6d69\u3055\u3093\u306b\u3088\u308bCodeIQ\u7528\u554f\u984c\u304b\u3089\u3002\n\nhttp://www.hyuki.com/codeiq/\n\n```csharp:Program.cs\nusing System;\nusing System.Diagnostics;\nusing System.Linq;\n\nclass Program\n{\n    static void Main(string[] args)\n    {\n        var gems = new[] { 1, 4, 1, 4, 2, 1, 3 };\n        var pattern = \"eagcdfbe\".Select(x => x - 'a').ToArray();\n        var day = Day(gems, pattern);\n        Console.WriteLine(day);\n    }\n\n    /// <summary>\n    /// \u4f7f\u3048\u308b\u5b9d\u77f3\u306e\u4e00\u89a7\u304c\u4e0e\u3048\u3089\u308c\u3066\u3044\u308b\u3068\u304d\u306b\u3001\n    /// \u6307\u5b9a\u3057\u305f\u30d1\u30bf\u30fc\u30f3\u304c\u4f55\u65e5\u76ee\u306b\u767b\u5834\u3059\u308b\u304b\u3092\u8fd4\u3057\u307e\u3059\u3002\n    /// </summary>\n    /// <param name=\"gems\">\n    /// \u4f7f\u3048\u308b\u5b9d\u77f3\u306e\u4e00\u89a7\u3092\u8868\u3059int\u914d\u5217\u3002\n    /// <c>gems[0]</c>\u304c\u5b9d\u77f3a\u306e\u6570\u3001<c>gems[1]</c>\u304c\u5b9d\u77f3b\u306e\u6570\u3001\u3068\u3044\u3046\u3088\u3046\u306b\u5bfe\u5fdc\u3057\u307e\u3059\u3002\n    /// \u305f\u3068\u3048\u3070\u3001\u4f7f\u3048\u308b\u5b9d\u77f3\u306e\u4f8b\u304c \"aaabcc\" \u3060\u3063\u305f\u5834\u5408\u306f\u3001\n    /// <c>{ 3, 1, 2 }</c>\u3068\u3044\u3046\u914d\u5217\u3067\u8868\u73fe\u3057\u307e\u3059\u3002\n    /// </param>\n    /// <param name=\"pattern\">\n    /// \u5b9d\u77f3\u30d1\u30bf\u30fc\u30f3\u3092\u6307\u5b9a\u3059\u308bint\u914d\u5217\u3002\n    /// \u5b9d\u77f3a\u306f0\u3001\u5b9d\u77f3b\u306f1\u3001\u3068\u3044\u3046\u3088\u3046\u306b\u5bfe\u5fdc\u3057\u307e\u3059\u3002\n    /// \u305f\u3068\u3048\u3070\u3001\"aabac\"\u3068\u3044\u3046\u30d1\u30bf\u30fc\u30f3\u306f\u3001<c>{ 0, 0, 1, 0, 2 }</c>\u3068\u3044\u3046\u914d\u5217\u3067\u8868\u73fe\u3057\u307e\u3059\u3002\n    /// </param>\n    /// <returns>\n    /// \u6307\u5b9a\u3057\u305f\u30d1\u30bf\u30fc\u30f3\u306e\u767b\u5834\u65e5\u3002\n    /// \u6307\u5b9a\u3057\u305f\u30d1\u30bf\u30fc\u30f3\u3092\u4f5c\u308b\u3053\u3068\u304c\u3067\u304d\u306a\u3044\u5834\u5408\u306f\u3001\u305d\u306e\u76f4\u524d\u306b\u3042\u305f\u308b\u3001\u53ef\u80fd\u306a\u30d1\u30bf\u30fc\u30f3\u306e\u767b\u5834\u65e5\u3002\n    /// </returns>\n    static long Day(int[] gems, int[] pattern)\n    {\n        const int gem_A = 0;\n        var sum = 0L;\n        var memo = Array.CreateInstance(typeof(long?),\n                                        gems.Select(x => x + 1).ToArray());\n\n        for (var i = 0; i < pattern.Length; i++)\n        {\n            var currentPattern = new int[i + 1];\n            Array.Copy(pattern, currentPattern, i);\n            var gem_i = pattern[i];\n            for (var gem_j = gem_A; gem_j <= gem_i; gem_j++)\n            {\n                currentPattern[i] = gem_j;\n                var rest = Take(gems, currentPattern);\n                if (rest == null) continue;\n                sum++;\n                DebugWrite(currentPattern);\n                if (gem_j < gem_i)\n                {\n                    var count = Combination(rest, memo);\n                    sum += count;\n                    DebugWrite(currentPattern, rest, count);\n                }\n            }\n        }\n        return sum;\n    }\n\n    /// <summary>\n    /// \u4f7f\u3048\u308b\u5b9d\u77f3\u306e\u4e00\u89a7\u304b\u3089\u3001\u6307\u5b9a\u3057\u305f\u30d1\u30bf\u30fc\u30f3\u3092\u4e26\u3079\u308b\u305f\u3081\u306b\u5b9d\u77f3\u3092\u53d6\u308a\u51fa\u3057\u305f\u5834\u5408\u306b\u3001\n    /// \u6b8b\u3063\u305f\u5b9d\u77f3\u306e\u4e00\u89a7\u3092\u8fd4\u3057\u307e\u3059\u3002\n    /// </summary>\n    /// <param name=\"gems\">\n    /// \u4f7f\u3048\u308b\u5b9d\u77f3\u306e\u4e00\u89a7\u3092\u8868\u3059int\u914d\u5217\u3002\n    /// <c>gems[0]</c>\u304c\u5b9d\u77f3a\u306e\u6570\u3001<c>gems[1]</c>\u304c\u5b9d\u77f3b\u306e\u6570\u3001\u3068\u3044\u3046\u3088\u3046\u306b\u5bfe\u5fdc\u3057\u307e\u3059\u3002\n    /// </param>\n    /// <param name=\"pattern\">\n    /// \u5b9d\u77f3\u30d1\u30bf\u30fc\u30f3\u3092\u6307\u5b9a\u3059\u308bint\u914d\u5217\u3002\n    /// \u5b9d\u77f3a\u306f0\u3001\u5b9d\u77f3b\u306f1\u3001\u3068\u3044\u3046\u3088\u3046\u306b\u5bfe\u5fdc\u3057\u307e\u3059\u3002\n    /// </param>\n    /// <returns>\n    /// \u6b8b\u3063\u305f\u5b9d\u77f3\u306e\u4e00\u89a7\u3092\u8868\u3059int\u914d\u5217\u3002\n    /// <c>gems[0]</c>\u304c\u5b9d\u77f3a\u306e\u6570\u3001<c>gems[1]</c>\u304c\u5b9d\u77f3b\u306e\u6570\u3001\u3068\u3044\u3046\u3088\u3046\u306b\u5bfe\u5fdc\u3057\u307e\u3059\u3002\n    /// \u6307\u5b9a\u3057\u305f\u30d1\u30bf\u30fc\u30f3\u3092\u4f5c\u308b\u3053\u3068\u304c\u3067\u304d\u306a\u3044\u5834\u5408\u306f<c>null</c>\u3092\u8fd4\u3057\u307e\u3059\u3002\n    /// </returns>\n    static int[] Take(int[] gems, int[] pattern)\n    {\n        var rest = (int[])gems.Clone();\n        for (var i = 0; i < pattern.Length; i++)\n        {\n            if (rest[pattern[i]] == 0) return null;\n            rest[pattern[i]]--;\n        }\n        return rest;\n    }\n\n    /// <summary>\n    /// \u4f7f\u3048\u308b\u5b9d\u77f3\u306e\u4e00\u89a7\u304b\u3089\u3001\u305d\u306e\u4e00\u90e8\u3092\u53d6\u308a\u51fa\u3057\u305f\u3068\u304d\u306b\u3001\n    /// \u53d6\u308a\u51fa\u3057\u305f\u5b9d\u77f3\u306b\u3088\u3063\u3066\u4f5c\u308b\u3053\u3068\u304c\u3067\u304d\u308b\u5b9d\u77f3\u30d1\u30bf\u30fc\u30f3\u304c\u4f55\u901a\u308a\u3042\u308b\u304b\u3001\u6570\u3048\u4e0a\u3052\u3066\u8fd4\u3057\u307e\u3059\u3002\n    /// </summary>\n    /// <param name=\"gems\">\n    /// \u4f7f\u3048\u308b\u5b9d\u77f3\u306e\u4e00\u89a7\u304b\u3089\u53d6\u308a\u51fa\u3057\u305f\u5b9d\u77f3\u3092\u8868\u3059int\u914d\u5217\u3002\n    /// <c>gems[0]</c>\u304c\u5b9d\u77f3a\u306e\u6570\u3001<c>gems[1]</c>\u304c\u5b9d\u77f3b\u306e\u6570\u3001\u3068\u3044\u3046\u3088\u3046\u306b\u5bfe\u5fdc\u3057\u307e\u3059\u3002\n    /// \u305f\u3068\u3048\u3070\u3001\u4f7f\u3048\u308b\u5b9d\u77f3\u306e\u4f8b\u304c \"aaabcc\" \u306e\u6642\u306b\u3001a\u30922\u3064\u3001b\u30921\u3064\u53d6\u308a\u51fa\u3057\u305f\u5834\u5408\u306f\u3001\n    /// <c>{ 2, 1, 0 }</c>\u3068\u3044\u3046\u914d\u5217\u3067\u8868\u73fe\u3057\u307e\u3059\u3002\n    /// </param>\n    /// <param name=\"memo\">\n    /// \u53d6\u308a\u51fa\u3057\u305f\u5b9d\u77f3\u3068\u3001\u305d\u308c\u306b\u3088\u3063\u3066\u4f5c\u308b\u3053\u3068\u304c\u3067\u304d\u308b\u5b9d\u77f3\u30d1\u30bf\u30fc\u30f3\u306e\u6570\u306e\u5bfe\u5fdc\u8868\u3092\u30e1\u30e2\u3057\u305f\u3082\u306e\u3002\n    /// <c>long?</c>\u578b\u306e\u591a\u6b21\u5143\u914d\u5217\u3067\u3001\n    /// \u6b21\u5143\u6570\uff08\u30e9\u30f3\u30af\uff09\u306f\u4f7f\u3048\u308b\u5b9d\u77f3\u306e\u7a2e\u985e\u306e\u6570\u3068\u4e00\u81f4\u3057\u3066\u3044\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\n    /// \u305f\u3068\u3048\u3070\u3001\u4f7f\u3048\u308b\u5b9d\u77f3\u306e\u4f8b\u304c \"aaabcc\" \u306e\u6642\u306b\u3001\n    /// a\u30922\u3064\u3001b\u30921\u3064\u53d6\u308a\u51fa\u3057\u305f\u5834\u5408\u306e\u5b9d\u77f3\u30d1\u30bf\u30fc\u30f3\u306e\u6570\u306f\u3001\n    /// \u3053\u306e\u30e1\u30bd\u30c3\u30c9\u3067\u8a08\u7b97\u3055\u308c\u305f\u5f8c\u3001<c>memo[2, 1, 0]</c>\u306b\u30e1\u30e2\u3055\u308c\u307e\u3059\u3002\n    /// </param>\n    /// <returns>\n    /// \u53d6\u308a\u51fa\u3057\u305f\u5b9d\u77f3\u306b\u3088\u3063\u3066\u4f5c\u308b\u3053\u3068\u304c\u3067\u304d\u308b\u5b9d\u77f3\u30d1\u30bf\u30fc\u30f3\u306e\u6570\u3002\n    /// </returns>\n    static long Combination(int[] gems, Array memo)\n    {\n        var count = (long?)memo.GetValue(gems);\n        if (count.HasValue) return count.Value;\n        count = 0L;\n        for (var i = 0; i < gems.Length; i++)\n        {\n            if (gems[i] == 0) continue;\n            var rest = (int[])gems.Clone();\n            rest[i]--;\n            count += 1L + Combination(rest, memo);\n        }\n        memo.SetValue(count, gems);\n        return count.Value;\n    }\n\n    [Conditional(\"DEBUG\")]\n    static void DebugWrite(int[] pattern)\n    {\n        var patternString = new string(\n            pattern.Select(x => Convert.ToChar('a' + x)).ToArray());\n        Console.WriteLine(patternString + \" -> 1\u901a\u308a\");\n    }\n\n    [Conditional(\"DEBUG\")]\n    static void DebugWrite(int[] pattern, int[] rest, long count)\n    {\n        var patternString = new string(\n            pattern.Select(x => Convert.ToChar('a' + x)).ToArray());\n        var restString = string.Join(\",\", rest);\n        Console.WriteLine(patternString\n                          + \"* -> Combination(\" + restString + \") = \"\n                          + count + \"\u901a\u308a\");\n    }\n}\n```"}