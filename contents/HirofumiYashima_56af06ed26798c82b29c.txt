{"tags": ["R", "gephi", "\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u5206\u6790", "\u30c7\u30fc\u30bf\u53ef\u8996\u5316", "\u30c7\u30fc\u30bf\u30d3\u30b8\u30e5\u30a2\u30ea\u30bc\u30fc\u30b7\u30e7\u30f3"], "context": " More than 1 year has passed since last update.\n\n\u3010 \u6559\u6750\u30a6\u30a7\u30d6\u30b5\u30a4\u30c8\u3011\n\n\n\u203b\u4ee5\u4e0b\u3001Gephi\u8d77\u52d5\u753b\u9762\u306e\u76f4\u524d\u307e\u3067\u3001\u4e0b\u8a18\u30a6\u30a7\u30d6\u30b5\u30a4\u30c8\uff08\u300c\u5927\u898f\u6a21\u30c7\u30fc\u30bf\u3092\u51fa\u529b\u300d\u9805\uff09\u306b\u306a\u3089\u3044 R\u3092\u5b9f\u884c\n\nSGC(a):18.20121029 2 \u300cigraph\u304b\u3089Gephi\u3078\u300d\uff08\u62c5\u5f53\uff1a\u5c71\u672c \u6dbc\uff09\n\n\n\n\n\u4f5c\u696d\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u8a2d\u5b9a\n\n\nR\nsetwd(\"C:/Users/HirofumiYashima/Desktop/R/R_to_Gephi\")\n\n\n\nigraph() \u30e9\u30a4\u30d6\u30e9\u30ea\u306e\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb & \u30e1\u30e2\u30ea\u8aad\u307f\u8fbc\u307f\n\nR\ninstall.packages(\"igraph\")\nlibrary(igraph)\n\n\n\n\u5927\u898f\u6a21\u30c7\u30fc\u30bf\u306e\u4f5c\u6210  \u203b graph.tree()\u95a2\u6570\n\n\nR\ng <- graph.tree(1000)\nprint(g)\n\n\n## IGRAPH D--- 1000 999 -- Tree\n## + attr: name (g/c), children (g/n), mode (g/c)\n\n\nR\nprint(class(g))\n\n\n## [1] \"igraph\"\n\n\nR\nprint(str(g))\n\n\n## IGRAPH D--- 1000 999 -- Tree\n## + attr: name (g/c), children (g/n), mode (g/c)\n## + edges:\n##   [1]   1->   2   1->   3   2->   4   2->   5   3->   6   3->   7   4->   8\n##   [8]   4->   9   5->  10   5->  11   6->  12   6->  13   7->  14   7->  15\n##  [15]   8->  16   8->  17   9->  18   9->  19  10->  20  10->  21  11->  22\n##  [22]  11->  23  12->  24  12->  25  13->  26  13->  27  14->  28  14->  29\n##  [29]  15->  30  15->  31  16->  32  16->  33  17->  34  17->  35  18->  36\n##  [36]  18->  37  19->  38  19->  39  20->  40  20->  41  21->  42  21->  43\n##  [43]  22->  44  22->  45  23->  46  23->  47  24->  48  24->  49  25->  50\n##  [50]  25->  51  26->  52  26->  53  27->  54  27->  55  28->  56  28->  57\n##  [57]  29->  58  29->  59  30->  60  30->  61  31->  62  31->  63  32->  64\n##  [64]  32->  65  33->  66  33->  67  34->  68  34->  69  35->  70  35->  71\n##  [71]  36->  72  36->  73  37->  74  37->  75  38->  76  38->  77  39->  78\n##\n##                                     \uff08\u4e2d\u7565\uff09\n##\n## [960] 480-> 961 481-> 962 481-> 963 482-> 964 482-> 965 483-> 966 483-> 967\n## [967] 484-> 968 484-> 969 485-> 970 485-> 971 486-> 972 486-> 973 487-> 974\n## [974] 487-> 975 488-> 976 488-> 977 489-> 978 489-> 979 490-> 980 490-> 981\n## [981] 491-> 982 491-> 983 492-> 984 492-> 985 493-> 986 493-> 987 494-> 988\n## [988] 494-> 989 495-> 990 495-> 991 496-> 992 496-> 993 497-> 994 497-> 995\n## [995] 498-> 996 498-> 997 499-> 998 499-> 999 500->1000\n## IGRAPH D--- 1000 999 -- Tree\n## + attr: name (g/c), children (g/n), mode (g/c)\n\n\n\u95a2\u6570\u306e\u4ed5\u69d8\u78ba\u8a8d\uff1a graph.tree()\n\n\n# \u203b \u4ee5\u4e0b\u3001\u592a\u5b57\u659c\u3081\u6587\u5b57\u306f\u3001\u6295\u7a3f\u8005\u306b\u3088\u308b\n\nR\nprint(?graph.tree())\n\n\n\ngraph.constructors {igraph}  R Documentation\nVarious methods for creating graphs\nDescription\nThese method can create various (mostly regular) graphs: empty graphs, graphs with the given edges, graphs from adjacency matrices, star graphs, lattices, rings, trees.\nUsage\ngraph.empty(n=0, directed=TRUE)\n\uff08\u4e2d\u7565\uff09\nArguments\nedges\nNumeric vector defining the edges, the first edge points from the first element to the second, the second edge from the third to the fourth, etc.\ndirected\nLogical, if TRUE a directed graph will be created. Note that for while most constructors the default is TRUE, for graph.lattice and graph.ring it is FALSE. For graph.star the mode argument should be used for creating an undirected graph.\nn\nThe number of vertices in the graph for most functions.*\nFor graph this parameter is ignored if there is a bigger vertex id in edges. This means that for this function it is safe to supply zero here if the vertex with the largest id is not an isolate.\nFor graph.atlas this is the number (id) of the graph to create.\n\n\nR\nplot(g)\n\n\n\n\ngml\u5f62\u5f0f \u3067\u3001igraph\u578b\u30aa\u30d6\u30b8\u30a7\u30af\u30c8 \u3092\u30d5\u30a9\u30eb\u30c0\u306b\u30d5\u30a1\u30a4\u30eb\u51fa\u529b\n\nR\n#\u4eca\u56de\u306fgml\u30d5\u30a9\u30fc\u30de\u30c3\u30c8\u3067\u51fa\u529b\nwrite.graph(g,\"graph.gml\",\"gml\")\n\ndir()\n\n\n##  [1] \"1.png\"                             \n##  [2] \"figure\"                            \n##  [3] \"Fruchterman_\u30e9\u30d9\u30eb\u3092\u4ed8\u3051\u3066\u62e1\u5927.png\"\n##  [4] \"Fruchterman\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u63cf\u753b.png\"   \n##  [5] \"Gephi.plot.graph.png\"     \n\n##  [6] \"Gephi.read.data.3.png\"             \n##  [7] \"Gephi_read.data.2.png\"             \n##  [8] \"Gephi_read.data.png\"               \n##  [9] \"graph.1.png\"                       \n## [10] \"graph.gml\"                         \n## [11] \"R_output_to_Gephi.txt\"             \n## [12] \"R_to_Gephi.html\"                   \n## [13] \"R_to_Gephi.md\"                     \n## [14] \"R_to_Gephi.rmd\"                    \n## [15] \"ref.wevsite.1.png\"                 \n## [16] \"\u30b0\u30e9\u30d5\u62e1\u5927.png\"                    \n## [17] \"\u30d5\u30a9\u30eb\u30c0.png\"\n\n\n\u30d5\u30a9\u30eb\u30c0\u306b\u30d5\u30a1\u30a4\u30eb\u51fa\u529b\u3055\u308c\u305f\n\n\n\u95a2\u6570\u306e\u4ed5\u69d8\u78ba\u8a8d\uff1a write.graph()\n\n\n\u203b \u4ee5\u4e0b\u3001\u592a\u5b57\u659c\u3081\u6587\u5b57\u306f\u3001\u6295\u7a3f\u8005\u306b\u3088\u308b\n\nR\nprint(?write.graph())\n\n\n\nwrite.graph {igraph}  R Documentation\nWriting the graph to a file in some format\nDescription\nwrite.graph is a general function for exporting graphs to foreign file formats, however not many formats are   implemented right now.\nUsage\nwrite.graph(graph, file, format=c(\"edgelist\", \"pajek\", \"ncol\",\n       \"lgl\", \"graphml\", \"dimacs\", \"gml\", \"dot\", \"leda\"), ...)\nArguments\ngraph\nThe graph to export.\nfile\nA connection or a string giving the file name to write the graph to.\nformat \nCharacter string giving the file format. Right now pajek, graphml, dot, gml, edgelist, lgl, ncol and dimacs are implemented. As of igraph 0.4 this argument is case insensitive.\nOther, format specific arguments, see below.\nValue\nA NULL, invisibly.\nEdge list format\nThe edgelist format is a simple text file, with one edge in a line, the two vertex ids separated by a space character. The file is sorted by the first and the second column. This format has no additional arguments.\nPajek format\nThe Pajek format is a text file, see read.graph for details. Appropriate vertex and edge attributes are also written to the file. This format has no additional arguments.\nFrom version 0.6.1 igraph handles bipartite graphs when writing to Pajek files. As Pajek is less flexible for bipartite graphs (the numeric ids of the vertices must be sorted according to vertex type), igraph might need to reorder the vertices when writing a bipartite Pajek file. This effectively means that numeric vertex ids usually change when a bipartite graph is written to a Pajek file, and then read back into igraph.\n\uff08\u4e2d\u7565\uff09\nDot format\nThe dot format is used by the popular GraphViz program. Vertex and edge attributes are written to the file. There are no additional arguments for this format.\nGML file format\nGML is a quite general textual format, see http://www.infosun.fim.uni-passau.de/Graphlet/GML/ for details.\nThe graph, vertex and edges attributes are written to the file as well, if they are numeric of string.\nAs igraph is more forgiving about attribute names, it might be neccessary to simplify the them before writing to the GML file. This way we'll have a syntactically correct GML file. The following simple procedure is performed on each attribute name: first the alphanumeric characters are extracted, the others are ignored. Then if the first character is not a letter then the attribute name is prefixed with igraph. Note that this might result identical names for two attributes, igraph does not check this.\nThe \u201cid\u201d vertex attribute is treated specially. If the id argument is not NULL then it should be a numeric vector with the vertex ids and the \u201cid\u201d vertex attribute is ignored (if there is one). If id is 0 and there is a numeric id vertex attribute that is used instead. If ids are not specified in either way then the regular igraph vertex ids are used.\nNote that whichever way vertex ids are specified, their uniqueness is not checked.\nIf the graph has edge attributes named \u201csource\u201d or \u201ctarget\u201d they're silently ignored. GML uses these attributes to specify the edges, so we cannot write them to the file. Rename them before calling this function if you want to preserve them.\n\n\n\nGephi\u3092\u8d77\u52d5 \uff08\u30c7\u30b9\u30af\u30c8\u30c3\u30d7\u306e\u30a2\u30a4\u30b3\u30f3\u3092\u30c0\u30d6\u30eb\u30af\u30ea\u30c3\u30af\uff09\n\n\n\u30d5\u30a1\u30a4\u30eb\u306e\u30a4\u30f3\u30dd\u30fc\u30c8\n\n\n\u5148\u307b\u3069\u30d5\u30a9\u30eb\u30c0\u306b\u4fdd\u5b58\u3057\u305f gml \u30d5\u30a1\u30a4\u30eb\u3092\u8aad\u307f\u8fbc\u3080\n\n\n\n\n\n\u300cOK\u300d\u30dc\u30bf\u30f3\u3092\u62bc\u3059\n\nGephi\u753b\u9762\u4e0a\u3067\u3001\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u30b0\u30e9\u30d5\u304c\u8868\u793a\u3055\u308c\u305f\uff01\n\n\n\n\u30b0\u30e9\u30d5\u3092\u62e1\u5927 \u203b\u30b0\u30e9\u30d5\u753b\u9762\u306b\u30de\u30a6\u30b9\u30dd\u30a4\u30f3\u30bf\u3092\u3042\u3066\u3066\u3001\u30de\u30a6\u30b9\u30db\u30a4\u30fc\u30eb\u3092\u4e0a\u306b\u30c9\u30e9\u30c3\u30b0\n\n\nFruchterman\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u3067\u63cf\u753b\n\n\n\u30e9\u30d9\u30eb\u3092\u8868\u793a\u3055\u305b\u3066\u3001\u30b0\u30e9\u30d5\u3092\u62e1\u5927\n\n###__\u3010 \u6559\u6750\u30a6\u30a7\u30d6\u30b5\u30a4\u30c8\u3011__\n\n#### \u203b\u4ee5\u4e0b\u3001Gephi\u8d77\u52d5\u753b\u9762\u306e\u76f4\u524d\u307e\u3067\u3001\u4e0b\u8a18\u30a6\u30a7\u30d6\u30b5\u30a4\u30c8\uff08\u300c\u5927\u898f\u6a21\u30c7\u30fc\u30bf\u3092\u51fa\u529b\u300d\u9805\uff09\u306b\u306a\u3089\u3044 R\u3092\u5b9f\u884c\n\n####__[SGC(a):18.20121029 2 \u300cigraph\u304b\u3089Gephi\u3078\u300d\uff08\u62c5\u5f53\uff1a\u5c71\u672c \u6dbc\uff09](http://www.genome.med.kyoto-u.ac.jp/wiki_tokyo/index.php/SGC%28a%29:18.20121029_2)__\n\n![ref.wevsite.1.png](https://qiita-image-store.s3.amazonaws.com/0/43487/f0bc8c62-26bb-582c-1f71-694081caeb6b.png)\n\n___\n\n####__\u4f5c\u696d\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u8a2d\u5b9a__\n\n```{R:R}\nsetwd(\"C:/Users/HirofumiYashima/Desktop/R/R_to_Gephi\")\n```\n\n##### _igraph()_ \u30e9\u30a4\u30d6\u30e9\u30ea\u306e\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb & \u30e1\u30e2\u30ea\u8aad\u307f\u8fbc\u307f\n\n```{R:R}\ninstall.packages(\"igraph\")\nlibrary(igraph)\n```\n##### \u5927\u898f\u6a21\u30c7\u30fc\u30bf\u306e\u4f5c\u6210  \u203b _graph.tree()\u95a2\u6570_\n\n```{R:R}\ng <- graph.tree(1000)\nprint(g)\n```\n\n```\n## IGRAPH D--- 1000 999 -- Tree\n## + attr: name (g/c), children (g/n), mode (g/c)\n```\n\n```{R:R}\nprint(class(g))\n```\n\n```\n## [1] \"igraph\"\n```\n\n```{R:R}\nprint(str(g))\n```\n\n```\n## IGRAPH D--- 1000 999 -- Tree\n## + attr: name (g/c), children (g/n), mode (g/c)\n## + edges:\n##   [1]   1->   2   1->   3   2->   4   2->   5   3->   6   3->   7   4->   8\n##   [8]   4->   9   5->  10   5->  11   6->  12   6->  13   7->  14   7->  15\n##  [15]   8->  16   8->  17   9->  18   9->  19  10->  20  10->  21  11->  22\n##  [22]  11->  23  12->  24  12->  25  13->  26  13->  27  14->  28  14->  29\n##  [29]  15->  30  15->  31  16->  32  16->  33  17->  34  17->  35  18->  36\n##  [36]  18->  37  19->  38  19->  39  20->  40  20->  41  21->  42  21->  43\n##  [43]  22->  44  22->  45  23->  46  23->  47  24->  48  24->  49  25->  50\n##  [50]  25->  51  26->  52  26->  53  27->  54  27->  55  28->  56  28->  57\n##  [57]  29->  58  29->  59  30->  60  30->  61  31->  62  31->  63  32->  64\n##  [64]  32->  65  33->  66  33->  67  34->  68  34->  69  35->  70  35->  71\n##  [71]  36->  72  36->  73  37->  74  37->  75  38->  76  38->  77  39->  78\n##\n##                                     \uff08\u4e2d\u7565\uff09\n##\n## [960] 480-> 961 481-> 962 481-> 963 482-> 964 482-> 965 483-> 966 483-> 967\n## [967] 484-> 968 484-> 969 485-> 970 485-> 971 486-> 972 486-> 973 487-> 974\n## [974] 487-> 975 488-> 976 488-> 977 489-> 978 489-> 979 490-> 980 490-> 981\n## [981] 491-> 982 491-> 983 492-> 984 492-> 985 493-> 986 493-> 987 494-> 988\n## [988] 494-> 989 495-> 990 495-> 991 496-> 992 496-> 993 497-> 994 497-> 995\n## [995] 498-> 996 498-> 997 499-> 998 499-> 999 500->1000\n## IGRAPH D--- 1000 999 -- Tree\n## + attr: name (g/c), children (g/n), mode (g/c)\n```\n\n\n##### \u95a2\u6570\u306e\u4ed5\u69d8\u78ba\u8a8d\uff1a _graph.tree()_\n####### \u203b \u4ee5\u4e0b\u3001\u592a\u5b57\u659c\u3081\u6587\u5b57\u306f\u3001\u6295\u7a3f\u8005\u306b\u3088\u308b\n\n```{R:R}\nprint(?graph.tree())\n```\n\n> graph.constructors {igraph}  R Documentation\n> Various methods for creating graphs\n>\n> ***_Description_***\n>\n>***_These method can create various (mostly regular) graphs: empty graphs, graphs with the given edges, graphs from adjacency matrices, star graphs, lattices, rings, trees._***\n>\n>Usage\n>\n>graph.empty(n=0, directed=TRUE)\n>\n>    \uff08\u4e2d\u7565\uff09\n>\n>Arguments\n>\n>edges  \nNumeric vector defining the edges, the first edge points from the first element to the second, the second edge from the third to the fourth, etc.\n>\n>directed\t\nLogical, if TRUE a directed graph will be created. Note that for while most constructors the default is TRUE, for graph.lattice and graph.ring it is FALSE. For graph.star the mode argument should be used for creating an undirected graph.\n>\n>***_n_***\t\n>**_The number of vertices in the graph for most functions._***\n>\n>For graph this parameter is ignored if there is a bigger vertex id in edges. This means that for this function it is safe to supply zero here if the vertex with the largest id is not an isolate.\n>\n>For graph.atlas this is the number (id) of the graph to create.\n\n\n```{R:R}\nplot(g)\n```\n\n![graph.1.png](https://qiita-image-store.s3.amazonaws.com/0/43487/35b5b36d-ce0a-76cb-090e-fc415f0e32aa.png)\n\n\n# _gml\u5f62\u5f0f_ \u3067\u3001igraph\u578b\u30aa\u30d6\u30b8\u30a7\u30af\u30c8 \u3092\u30d5\u30a9\u30eb\u30c0\u306b\u30d5\u30a1\u30a4\u30eb\u51fa\u529b\n\n```{R:R}\n#\u4eca\u56de\u306fgml\u30d5\u30a9\u30fc\u30de\u30c3\u30c8\u3067\u51fa\u529b\nwrite.graph(g,\"graph.gml\",\"gml\")\n\ndir()\n```\n\n```\n##  [1] \"1.png\"                             \n##  [2] \"figure\"                            \n##  [3] \"Fruchterman_\u30e9\u30d9\u30eb\u3092\u4ed8\u3051\u3066\u62e1\u5927.png\"\n##  [4] \"Fruchterman\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u63cf\u753b.png\"   \n##  [5] \"Gephi.plot.graph.png\"     \n         \n##  [6] \"Gephi.read.data.3.png\"             \n##  [7] \"Gephi_read.data.2.png\"             \n##  [8] \"Gephi_read.data.png\"               \n##  [9] \"graph.1.png\"                       \n## [10] \"graph.gml\"                         \n## [11] \"R_output_to_Gephi.txt\"             \n## [12] \"R_to_Gephi.html\"                   \n## [13] \"R_to_Gephi.md\"                     \n## [14] \"R_to_Gephi.rmd\"                    \n## [15] \"ref.wevsite.1.png\"                 \n## [16] \"\u30b0\u30e9\u30d5\u62e1\u5927.png\"                    \n## [17] \"\u30d5\u30a9\u30eb\u30c0.png\"\n```\n\n##### \u30d5\u30a9\u30eb\u30c0\u306b\u30d5\u30a1\u30a4\u30eb\u51fa\u529b\u3055\u308c\u305f\n\n![\u30d5\u30a9\u30eb\u30c0.png](https://qiita-image-store.s3.amazonaws.com/0/43487/20e5501c-1d75-6290-a813-7fd39c22e274.png)\n\n#### \u95a2\u6570\u306e\u4ed5\u69d8\u78ba\u8a8d\uff1a _write.graph()_\n### \u203b \u4ee5\u4e0b\u3001\u592a\u5b57\u659c\u3081\u6587\u5b57\u306f\u3001\u6295\u7a3f\u8005\u306b\u3088\u308b\n\n```{R:R}\nprint(?write.graph())\n```\n\n> write.graph {igraph}  R Documentation\n> Writing the graph to a file in some format\n>\n> ***_Description_***\n> ***_write.graph is a general function for exporting graphs to foreign file formats, however not many formats are   implemented right now._***\n>\n> Usage\n>\n> write.graph(graph, file, format=c(\"edgelist\", \"pajek\", \"ncol\",\n       \"lgl\", \"graphml\", \"dimacs\", \"gml\", \"dot\", \"leda\"), ...)\nArguments\n>graph\t\nThe graph to export.\n>file\t\nA connection or a string giving the file name to write the graph to.\n>\n>format\t\nCharacter string giving the file format. Right now pajek, graphml, dot, gml, edgelist, lgl, ncol and dimacs are implemented. As of igraph 0.4 this argument is case insensitive.\n>\n\n> Other, format specific arguments, see below.\n> Value\n> A NULL, invisibly.\n>\n> Edge list format\n>\n> The edgelist format is a simple text file, with one edge in a line, the two vertex ids separated by a space character. The file is sorted by the first and the second column. This format has no additional arguments.\n>\n> Pajek format\n>\n> The Pajek format is a text file, see read.graph for details. Appropriate vertex and edge attributes are also written to the file. This format has no additional arguments.\n>\n> From version 0.6.1 igraph handles bipartite graphs when writing to Pajek files. As Pajek is less flexible for bipartite graphs (the numeric ids of the vertices must be sorted according to vertex type), igraph might need to reorder the vertices when writing a bipartite Pajek file. This effectively means that numeric vertex ids usually change when a bipartite graph is written to a Pajek file, and then read back into igraph.\n>\n>   \uff08\u4e2d\u7565\uff09\n>\n>\n> Dot format\n>\n>The dot format is used by the popular GraphViz program. Vertex and edge attributes are written to the file. There are no additional arguments for this format.\n>\n> ***_GML file format_***\n>\n> GML is a quite general textual format, see http://www.infosun.fim.uni-passau.de/Graphlet/GML/ for details.\n>\n> The graph, vertex and edges attributes are written to the file as well, if they are numeric of string.\n>\n>As igraph is more forgiving about attribute names, it might be neccessary to simplify the them before writing to the GML file. This way we'll have a syntactically correct GML file. The following simple procedure is performed on each attribute name: first the alphanumeric characters are extracted, the others are ignored. Then if the first character is not a letter then the attribute name is prefixed with <quote>igraph</quote>. Note that this might result identical names for two attributes, igraph does not check this.\n>\n>The \u201cid\u201d vertex attribute is treated specially. If the id argument is not NULL then it should be a numeric vector with the vertex ids and the \u201cid\u201d vertex attribute is ignored (if there is one). If id is 0 and there is a numeric id vertex attribute that is used instead. If ids are not specified in either way then the regular igraph vertex ids are used.\n>\n>Note that whichever way vertex ids are specified, their uniqueness is not checked.\n>\n>If the graph has edge attributes named \u201csource\u201d or \u201ctarget\u201d they're silently ignored. GML uses these attributes to specify the edges, so we cannot write them to the file. Rename them before calling this function if you want to preserve them.\n\n___\n\n###__Gephi\u3092\u8d77\u52d5 \uff08\u30c7\u30b9\u30af\u30c8\u30c3\u30d7\u306e\u30a2\u30a4\u30b3\u30f3\u3092\u30c0\u30d6\u30eb\u30af\u30ea\u30c3\u30af\uff09__\n\n####__\u30d5\u30a1\u30a4\u30eb\u306e\u30a4\u30f3\u30dd\u30fc\u30c8__\n* __\u5148\u307b\u3069\u30d5\u30a9\u30eb\u30c0\u306b\u4fdd\u5b58\u3057\u305f _gml_ \u30d5\u30a1\u30a4\u30eb\u3092\u8aad\u307f\u8fbc\u3080__\n\n![Gephi_read.data.png](https://qiita-image-store.s3.amazonaws.com/0/43487/f8cf43ab-9adc-4ed4-5655-293a538de189.png)\n\n\n![Gephi_read.data.2.png](https://qiita-image-store.s3.amazonaws.com/0/43487/d1fa1f0a-218d-de7e-2fe8-e6fdb735da25.png)\n\n\n![Gephi.read.data.3.png](https://qiita-image-store.s3.amazonaws.com/0/43487/48d5362d-4032-5784-4d78-f43e722c2bb8.png)\n\n\n####\u300cOK\u300d\u30dc\u30bf\u30f3\u3092\u62bc\u3059\n\n###__Gephi\u753b\u9762\u4e0a\u3067\u3001\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u30b0\u30e9\u30d5\u304c\u8868\u793a\u3055\u308c\u305f\uff01__\n![Gephi.plot.graph.png](https://qiita-image-store.s3.amazonaws.com/0/43487/2bf30941-2616-b9f4-bc8f-857d9d5795ba.png)\n\n\n#### \u30b0\u30e9\u30d5\u3092\u62e1\u5927 \u203b\u30b0\u30e9\u30d5\u753b\u9762\u306b\u30de\u30a6\u30b9\u30dd\u30a4\u30f3\u30bf\u3092\u3042\u3066\u3066\u3001\u30de\u30a6\u30b9\u30db\u30a4\u30fc\u30eb\u3092\u4e0a\u306b\u30c9\u30e9\u30c3\u30b0\n\n![\u30b0\u30e9\u30d5\u62e1\u5927.png](https://qiita-image-store.s3.amazonaws.com/0/43487/052aec58-07fe-7d8f-33a5-57cd12b12f85.png)\n\n#### Fruchterman\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u3067\u63cf\u753b\n\n ![Fruchterman\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u63cf\u753b.png](https://qiita-image-store.s3.amazonaws.com/0/43487/2e9221ae-3a7b-2f84-3bf6-637c9cd6508d.png)\n\n#### \u30e9\u30d9\u30eb\u3092\u8868\u793a\u3055\u305b\u3066\u3001\u30b0\u30e9\u30d5\u3092\u62e1\u5927\n\n ![Fruchterman_\u30e9\u30d9\u30eb\u3092\u4ed8\u3051\u3066\u62e1\u5927.png](https://qiita-image-store.s3.amazonaws.com/0/43487/47c56e3b-10d6-e1c8-3238-fc7bafedf9ab.png)\n\n"}