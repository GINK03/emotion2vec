{"tags": ["Chainer", "Python", "\u30c7\u30fc\u30bf\u89e3\u6790"], "context": "\nmodel.py\n# Network definition\nclass MLP(chainer.Chain):\n\n    def __init__(self, n_units, n_out):\n        super(MLP, self).__init__(\n            # the size of the inputs to each layer will be inferred\n            l1=L.Linear(None, n_units),  # n_in -> n_units\n            l2=L.Linear(None, n_units),  # n_units -> n_units\n            l3=L.Linear(None, n_out),  # n_units -> n_out\n        )\n\n    def __call__(self, x):\n        h1 = F.relu(self.l1(x))\n        h2 = F.relu(self.l2(h1))\n        return self.l3(h2)\n\nclass CCA(chainer.Chain):\n    def __init__(self, _model1, _model2):\n        super(CCA, self).__init__(\n            model1 = _model1,\n            model2 = _model2,\n        )\n\n    def __call__(self, x, y):\n        h1 = self.model1(x)\n        h2 = self.model2(y)\n        self.loss = F.mean_squared_error(h1, h2)\n        reporter.report({'loss': self.loss}, self)\n        return self.loss\n\nenc1 = MLP(10,10)\nenc2 = MLP(10,10)\n\nmodel = CCA(enc1, enc2)\n\n\n\u4e0a\u8a18\u306e\u3088\u3046\u306a\u30e2\u30c7\u30eb\u3092\u7d44\u307f\uff0c\u3042\u3068\u306f\uff0ctupled_dataset\u30672\u3064\u306e\u30c7\u30fc\u30bf\u3092\u7528\u610f\u3057\u3066\uff0ctrainer\u3067train\u3055\u305b\u308c\u3070\u3088\u3044\uff0e\n```python:model.py\n# Network definition\nclass MLP(chainer.Chain):\n\n    def __init__(self, n_units, n_out):\n        super(MLP, self).__init__(\n            # the size of the inputs to each layer will be inferred\n            l1=L.Linear(None, n_units),  # n_in -> n_units\n            l2=L.Linear(None, n_units),  # n_units -> n_units\n            l3=L.Linear(None, n_out),  # n_units -> n_out\n        )\n\n    def __call__(self, x):\n        h1 = F.relu(self.l1(x))\n        h2 = F.relu(self.l2(h1))\n        return self.l3(h2)\n\nclass CCA(chainer.Chain):\n    def __init__(self, _model1, _model2):\n        super(CCA, self).__init__(\n            model1 = _model1,\n            model2 = _model2,\n        )\n\n    def __call__(self, x, y):\n        h1 = self.model1(x)\n        h2 = self.model2(y)\n        self.loss = F.mean_squared_error(h1, h2)\n        reporter.report({'loss': self.loss}, self)\n        return self.loss\n    \nenc1 = MLP(10,10)\nenc2 = MLP(10,10)\n\nmodel = CCA(enc1, enc2)\n```\n\n\u4e0a\u8a18\u306e\u3088\u3046\u306a\u30e2\u30c7\u30eb\u3092\u7d44\u307f\uff0c\u3042\u3068\u306f\uff0ctupled_dataset\u30672\u3064\u306e\u30c7\u30fc\u30bf\u3092\u7528\u610f\u3057\u3066\uff0ctrainer\u3067train\u3055\u305b\u308c\u3070\u3088\u3044\uff0e\n"}