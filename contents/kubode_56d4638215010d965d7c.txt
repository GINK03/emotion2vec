{"context": "\u30e9\u30e0\u30c0\u3092\u4f7f\u7528\u3057\u3066\u3001\u30ed\u30b0\u30ec\u30d9\u30eb\u3092\u8d85\u3048\u306a\u3044\u5834\u5408\u306f\u8a55\u4fa1\u3057\u306a\u3044\u30ed\u30ac\u30fc\u3092\u4f5c\u3063\u3066\u307f\u305f\u3002\n\n\u30ed\u30b0\u30e1\u30c3\u30bb\u30fc\u30b8\u81ea\u4f53\u306e\u751f\u6210\u306bCPU\u3092\u4f7f\u3046\u3088\u3046\u306a\u3053\u3068\u306f\u306a\u3044\u3068\u601d\u3046\u304c\u3001\u30cd\u30c3\u30af\u306b\u306a\u308a\u3046\u308b\u306a\u3089\u6709\u7528\u304b\u3082\u3057\u308c\u306a\u3044\u3002\n\ninline fun \u3060\u304b\u3089\u30e9\u30e0\u30c0\u306e\u30aa\u30fc\u30d0\u30fc\u30d8\u30c3\u30c9\u304c\u306a\u3044\u306f\u305a\u3002\n\u6b63\u76f4Timber\u3068\u304b\u305d\u3053\u3089\u8fba\u306e\u30e9\u30a4\u30d6\u30e9\u30ea\u4f7f\u3063\u305f\u307b\u3046\u304c\u3044\u3044\u3068\u601d\u3046\u3002\n\n\nLogger.kt\n/**\n * \u30e9\u30e0\u30c0\u3092\u4f7f\u7528\u3057\u305f\u30ed\u30ac\u30fc\n *\n * \u4f7f\u7528\u4f8b\n * ```\n * class MyApplication : Application() {\n *     override fun onCreate() {\n *         Logger.initialize(if (BuildConfig.DEBUG) Log.VERBOSE else Log.ERROR, AndroidLogFactory())\n *     }\n * }\n * \n * class MyFragment : Fragment() {\n *     private val logger = Logger(\"MyFragment\")\n *\n *     fun doSomething() {\n *         logger.v { \"foo bar baz\" }\n *         logger.e({ \"error\" }, RuntimeException())\n *     }\n * }\n * ```\n */\nclass Logger(val tag: String) {\n\n    companion object {\n        var priority: Int = Log.VERBOSE\n            private set\n        var logFactory: LogFactory = SystemLogFactory()\n            private set\n\n        fun initialize(priority: Int, logFactory: LogFactory) {\n            this.priority = priority\n            this.logFactory = logFactory\n        }\n    }\n\n    inline fun log(priority: Int, msgCreator: () -> String, error: Throwable?) {\n        if (priority < Companion.priority) return\n        factory.log(priority, tag, msgCreator(), error)\n    }\n\n    inline fun v(msgCreator: () -> String) = log(android.util.Log.VERBOSE, msgCreator, null)\n    inline fun v(msgCreator: () -> String, error: Throwable) = log(android.util.Log.VERBOSE, msgCreator, error)\n    inline fun d(msgCreator: () -> String) = log(android.util.Log.DEBUG, msgCreator, null)\n    inline fun d(msgCreator: () -> String, error: Throwable) = log(android.util.Log.DEBUG, msgCreator, error)\n    inline fun i(msgCreator: () -> String) = log(android.util.Log.INFO, msgCreator, null)\n    inline fun i(msgCreator: () -> String, error: Throwable) = log(android.util.Log.INFO, msgCreator, error)\n    inline fun w(msgCreator: () -> String) = log(android.util.Log.WARN, msgCreator, null)\n    inline fun w(msgCreator: () -> String, error: Throwable) = log(android.util.Log.WARN, msgCreator, error)\n    inline fun e(msgCreator: () -> String) = log(android.util.Log.ERROR, msgCreator, null)\n    inline fun e(msgCreator: () -> String, error: Throwable) = log(android.util.Log.ERROR, msgCreator, error)\n    inline fun wtf(msgCreator: () -> String) = log(android.util.Log.ASSERT, msgCreator, null)\n    inline fun wtf(msgCreator: () -> String, error: Throwable) = log(android.util.Log.ASSERT, msgCreator, error)\n\n    interface LogFactory {\n        fun log(priority: Int, tag: String, msg: String, error: Throwable?)\n    }\n\n    class SystemLogFactory : LogFactory {\n        override fun log(priority: Int, tag: String, msg: String, error: Throwable?) {\n            System.out.println(\"${priority.label}/$tag: $msg\")\n            error?.printStackTrace(System.err)\n        }\n\n        private val Int.label: String get() = when (this) {\n            android.util.Log.VERBOSE -> \"V\"\n            android.util.Log.DEBUG -> \"D\"\n            android.util.Log.INFO -> \"I\"\n            android.util.Log.WARN -> \"W\"\n            android.util.Log.ERROR -> \"E\"\n            android.util.Log.ASSERT -> \"WTF\"\n            else -> throw IllegalArgumentException(\"$this is unknown priority.\")\n        }\n    }\n}\n\n\n\nAndroidLogFactory\n/**\n * [Log]\u3092\u4f7f\u7528\u3059\u308b\u30ed\u30b0\u30d5\u30a1\u30af\u30c8\u30ea\u30fc\n * \u30c6\u30b9\u30c8\u30b3\u30fc\u30c9\u3067\u306e\u30af\u30e9\u30c3\u30b7\u30e5\u3092\u907f\u3051\u308b\u305f\u3081\u306b\u5b9f\u88c5\n */\nclass AndroidLogFactory : Logger.LogFactory {\n    override fun log(priority: Int, tag: String, msg: String, error: Throwable?) {\n        val errorMessage = error?.let { \"\\n\" + Log.getStackTraceString(it) } ?: \"\"\n        Log.println(priority, tag, msg + errorMessage)\n    }\n}\n\n\nKDoc\u306b\u3042\u308b\u3088\u3046\u306b\u3001JVM\u30c6\u30b9\u30c8\u6642\u306b android.util.Log \u306e\u30e1\u30bd\u30c3\u30c9\u30b3\u30fc\u30eb\u306b\u3088\u308b\u30af\u30e9\u30c3\u30b7\u30e5\u3092\u907f\u3051\u305f\u304b\u3063\u305f\u306e\u304c\u4e3b\u306a\u76ee\u7684\u3002\n\u30e9\u30e0\u30c0\u3092\u4f7f\u7528\u3057\u3066\u3001\u30ed\u30b0\u30ec\u30d9\u30eb\u3092\u8d85\u3048\u306a\u3044\u5834\u5408\u306f\u8a55\u4fa1\u3057\u306a\u3044\u30ed\u30ac\u30fc\u3092\u4f5c\u3063\u3066\u307f\u305f\u3002\n\n* \u30ed\u30b0\u30e1\u30c3\u30bb\u30fc\u30b8\u81ea\u4f53\u306e\u751f\u6210\u306bCPU\u3092\u4f7f\u3046\u3088\u3046\u306a\u3053\u3068\u306f\u306a\u3044\u3068\u601d\u3046\u304c\u3001\u30cd\u30c3\u30af\u306b\u306a\u308a\u3046\u308b\u306a\u3089\u6709\u7528\u304b\u3082\u3057\u308c\u306a\u3044\u3002\n* `inline fun` \u3060\u304b\u3089\u30e9\u30e0\u30c0\u306e\u30aa\u30fc\u30d0\u30fc\u30d8\u30c3\u30c9\u304c\u306a\u3044\u306f\u305a\u3002\n* \u6b63\u76f4Timber\u3068\u304b\u305d\u3053\u3089\u8fba\u306e\u30e9\u30a4\u30d6\u30e9\u30ea\u4f7f\u3063\u305f\u307b\u3046\u304c\u3044\u3044\u3068\u601d\u3046\u3002\n\n```kotlin:Logger.kt\n/**\n * \u30e9\u30e0\u30c0\u3092\u4f7f\u7528\u3057\u305f\u30ed\u30ac\u30fc\n *\n * \u4f7f\u7528\u4f8b\n * ```\n * class MyApplication : Application() {\n *     override fun onCreate() {\n *         Logger.initialize(if (BuildConfig.DEBUG) Log.VERBOSE else Log.ERROR, AndroidLogFactory())\n *     }\n * }\n * \n * class MyFragment : Fragment() {\n *     private val logger = Logger(\"MyFragment\")\n *\n *     fun doSomething() {\n *         logger.v { \"foo bar baz\" }\n *         logger.e({ \"error\" }, RuntimeException())\n *     }\n * }\n * ```\n */\nclass Logger(val tag: String) {\n\n    companion object {\n        var priority: Int = Log.VERBOSE\n            private set\n        var logFactory: LogFactory = SystemLogFactory()\n            private set\n\n        fun initialize(priority: Int, logFactory: LogFactory) {\n            this.priority = priority\n            this.logFactory = logFactory\n        }\n    }\n\n    inline fun log(priority: Int, msgCreator: () -> String, error: Throwable?) {\n        if (priority < Companion.priority) return\n        factory.log(priority, tag, msgCreator(), error)\n    }\n\n    inline fun v(msgCreator: () -> String) = log(android.util.Log.VERBOSE, msgCreator, null)\n    inline fun v(msgCreator: () -> String, error: Throwable) = log(android.util.Log.VERBOSE, msgCreator, error)\n    inline fun d(msgCreator: () -> String) = log(android.util.Log.DEBUG, msgCreator, null)\n    inline fun d(msgCreator: () -> String, error: Throwable) = log(android.util.Log.DEBUG, msgCreator, error)\n    inline fun i(msgCreator: () -> String) = log(android.util.Log.INFO, msgCreator, null)\n    inline fun i(msgCreator: () -> String, error: Throwable) = log(android.util.Log.INFO, msgCreator, error)\n    inline fun w(msgCreator: () -> String) = log(android.util.Log.WARN, msgCreator, null)\n    inline fun w(msgCreator: () -> String, error: Throwable) = log(android.util.Log.WARN, msgCreator, error)\n    inline fun e(msgCreator: () -> String) = log(android.util.Log.ERROR, msgCreator, null)\n    inline fun e(msgCreator: () -> String, error: Throwable) = log(android.util.Log.ERROR, msgCreator, error)\n    inline fun wtf(msgCreator: () -> String) = log(android.util.Log.ASSERT, msgCreator, null)\n    inline fun wtf(msgCreator: () -> String, error: Throwable) = log(android.util.Log.ASSERT, msgCreator, error)\n\n    interface LogFactory {\n        fun log(priority: Int, tag: String, msg: String, error: Throwable?)\n    }\n\n    class SystemLogFactory : LogFactory {\n        override fun log(priority: Int, tag: String, msg: String, error: Throwable?) {\n            System.out.println(\"${priority.label}/$tag: $msg\")\n            error?.printStackTrace(System.err)\n        }\n\n        private val Int.label: String get() = when (this) {\n            android.util.Log.VERBOSE -> \"V\"\n            android.util.Log.DEBUG -> \"D\"\n            android.util.Log.INFO -> \"I\"\n            android.util.Log.WARN -> \"W\"\n            android.util.Log.ERROR -> \"E\"\n            android.util.Log.ASSERT -> \"WTF\"\n            else -> throw IllegalArgumentException(\"$this is unknown priority.\")\n        }\n    }\n}\n```\n\n```kotlin:AndroidLogFactory\n/**\n * [Log]\u3092\u4f7f\u7528\u3059\u308b\u30ed\u30b0\u30d5\u30a1\u30af\u30c8\u30ea\u30fc\n * \u30c6\u30b9\u30c8\u30b3\u30fc\u30c9\u3067\u306e\u30af\u30e9\u30c3\u30b7\u30e5\u3092\u907f\u3051\u308b\u305f\u3081\u306b\u5b9f\u88c5\n */\nclass AndroidLogFactory : Logger.LogFactory {\n    override fun log(priority: Int, tag: String, msg: String, error: Throwable?) {\n        val errorMessage = error?.let { \"\\n\" + Log.getStackTraceString(it) } ?: \"\"\n        Log.println(priority, tag, msg + errorMessage)\n    }\n}\n```\n\nKDoc\u306b\u3042\u308b\u3088\u3046\u306b\u3001JVM\u30c6\u30b9\u30c8\u6642\u306b `android.util.Log` \u306e\u30e1\u30bd\u30c3\u30c9\u30b3\u30fc\u30eb\u306b\u3088\u308b\u30af\u30e9\u30c3\u30b7\u30e5\u3092\u907f\u3051\u305f\u304b\u3063\u305f\u306e\u304c\u4e3b\u306a\u76ee\u7684\u3002\n", "tags": ["Android", "Kotlin"]}