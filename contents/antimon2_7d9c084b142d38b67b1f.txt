{"context": " More than 1 year has passed since last update.\n\n\u524d\u7f6e\u304d\nEgison \u306e\u53ef\u80fd\u6027\u3092\u8272\u3005\u63a2\u3063\u3066\u3044\u307e\u3059\u3002\n\u53d6\u308a\u6562\u3048\u305a\u52d5\u4f5c\u78ba\u8a8d\u3059\u308b\u306e\u306b\u3001\u6a19\u6e96\u306e\u3088\u308a\u3082\u3046\u5c11\u3057\u4f7f\u3044\u52dd\u624b\u306e\u826f\u3044 REPL \u304c\u3042\u308b\u3068\u826f\u3044\u306a\u3001\u3068\u524d\u304b\u3089\u601d\u3063\u3066\u307e\u3057\u305f\u3002\n\u4e00\u65b9\u3067\u3001Jupyter \u306e\u53ef\u80fd\u6027\u3092\u8272\u3005\u63a2\u3063\u3066\u3044\u307e\u3059\u3002\n\u305d\u306e\u4e2d\u3067\u3001REPL \u304c\u63d0\u4f9b\u3055\u308c\u3066\u3044\u308b\u74b0\u5883\u306a\u3089\u3001\u305d\u308c\u3092\u30e9\u30c3\u30d7\u3057\u305f\u30ab\u30fc\u30cd\u30eb\u304c\uff08Python \u3067\uff09\u6bd4\u8f03\u7684\u7c21\u5358\u306b\u4f5c\u308c\u308b\u3001\u3068\u3044\u3046\u3053\u3068\u3092\u767a\u898b\u3002\n\u3068\u3044\u3046\u3053\u3068\u3067\u3001Egison \u306e REPL \u3092\u30e9\u30c3\u30d7\u3057\u305f Jupyter \u30ab\u30fc\u30cd\u30eb\u3092\u81ea\u4f5c\u3057\u3066\u307f\u307e\u3057\u305f\u3002\n\u4ed6\u306e\u8a00\u8a9e/\u74b0\u5883\u306e\u30b3\u30f3\u30bd\u30fc\u30eb\u30d9\u30fc\u30b9 REPL \u3067\u3082\u540c\u69d8\u306b\u69cb\u7bc9\u3067\u304d\u308b\u3068\u601d\u3046\u306e\u3067\u3001\u4f55\u304b\u306e\u53c2\u8003\u306b\u306a\u308c\u3070\u3068\u3001\u6652\u3057\u3066\u307f\u307e\u3059\u3002\n\u3042\u3068\u3001\u3061\u3087\u3063\u3068\u3060\u3051\u8e93\u3044\u305f\u306e\u3067\u305d\u306e\u60c5\u5831\u5171\u6709\u3082\u517c\u306d\u3066\u3001\u52d5\u4f5c\u78ba\u8a8d\u2192\u30ab\u30fc\u30cd\u30eb\u4f5c\u6210\u306e2\u6bb5\u968e\u306b\u5206\u3051\u307e\u3057\u305f\u3002\u624b\u3063\u53d6\u308a\u65e9\u304f\u30ab\u30fc\u30cd\u30eb\u306e\u4f5c\u308a\u65b9\u3060\u3051\u77e5\u308a\u305f\u3044\u65b9\u306f STEP.1 \u306e\u9014\u4e2d\u306f\u98db\u3070\u3057\u3066 STEP.2 \u304b\u3089\u3069\u3046\u305e\u3002\n\n\u74b0\u5883\n\nMac OSX 10.9.5\nPython 2.7.9\nIPython 3.1.0\nEgison 3.5.6\n\n\u203b Jupyter (IPython)\u30fbEgison \u306e\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u306f\u7701\u7565\u3002\u79c1\u306e\u904e\u53bb\u8a18\u4e8b \u7b49\u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n\nSTEP.1 pexpect.replwrap \u3067\u52d5\u4f5c\u78ba\u8a8d\n\nPexpect \u306e\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\nREPL \u3092\u30e9\u30c3\u30d7\u3057\u305f\u30ab\u30fc\u30cd\u30eb\u3092\u4f5c\u308b\u306b\u306f\u3001\u5916\u90e8\u30e9\u30a4\u30d6\u30e9\u30ea Pexpect \u306e replwrap \u30e2\u30b8\u30e5\u30fc\u30eb\u3092\u5229\u7528\u3059\u308b\uff08\u3068\u4fbf\u5229\uff09\u3002\u3068\u306e\u3053\u3068\u3067\u3002\n\npexpect_install.sh\npip install pexpect\n\n\n\u203b Pexpect \u3092 \u5229\u7528\u3057\u305f IPython \u30ab\u30fc\u30cd\u30eb\uff08\u4f8b\uff1abash_kernel\uff09\u304c\u65e2\u306b\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3055\u308c\u3066\u3044\u308c\u3070\u3001Pexpect \u3082\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3055\u308c\u3066\u3044\u308b\u306e\u3067\u3001\u3053\u306e\u4f5c\u696d\u306f\u4e0d\u8981\u3067\u3059\u3002\n\nEgison \u306e REPL \u3092\u30e9\u30c3\u30d7\u3057\u3066\u52d5\u4f5c\u78ba\u8a8d\n\u307e\u305a\u306f\u7d50\u679c\u304b\u3089\u3002\n\nreplwrap_egison_sample.py\n# replwrap \u30a4\u30f3\u30dd\u30fc\u30c8\nfrom pexpect import replwrap\n\n# \u30d7\u30ed\u30f3\u30d7\u30c8\u4f5c\u6210 (\u203b1)\nimport uuid\nprompt = uuid.uuid4().hex + \">\"\n\n# Egison \u30e9\u30c3\u30d1\u30fc\u4f5c\u6210 (\u203b2)\negison = replwrap.REPLWrapper(\"egison --prompt \" + prompt, unicode(prompt), None)\n\n# \u7c21\u5358\u306a\u5f0f\u3067\u52d5\u4f5c\u78ba\u8a8d (\u203b3)\negison.run_command(\"(test (+ 1 2 3))\")\n# => u'6\\r\\n'\n\n# \u95a2\u6570\u5b9a\u7fa9\u30fb\u5b9f\u884c\ncmd = \"(define $sample (lambda [$xs] (nth (pure-rand 1 (length xs)) xs)))\"\negison.run_command(cmd)\negison.run_command(\"(sample {1 2 3 4 5 6 7 8 9 10})\")\n# => u'4\\r\\n'\uff08\u5b9f\u884c\u3059\u308b\u305f\u3073\u306b\u7d50\u679c\u306f\u7570\u306a\u308a\u307e\u3059\uff09\n\n# \u8907\u6570\u884c\u306b\u308f\u305f\u308b\u95a2\u6570\u5b9a\u7fa9\u306e\u5834\u5408 (\u203b4)\ndefine_fib_fast = \"\"\"\n(define $fib-fast\n  (match-lambda integer\n    {[,0 0]\n     [(& ?(lt? $ 0) $n)\n       (if (even? n)\n         (neg(fib-fast (neg n)))\n         (fib-fast (neg n)))]\n     [$n\n       (letrec {[$fib-fast-iter (lambda [$a $b $p $q $c]\n          (if (lt? c 2)\n            (+ (* a p) (* b q))\n            (let {[$a' (if (odd? c) (+ (* a p) (* b q)) a)]\n                  [$b' (if (odd? c) (+ (* a q) (* b q) (* b p)) b)]\n                  [$p' (+ (* p p) (* q q))]\n                  [$q' (* (+ (* 2 p) q) q)]\n                  [$c' (quotient c 2)]}\n              (fib-fast-iter a' b' p' q' c'))))]}\n        (fib-fast-iter 0 1 0 1 n))]}))\n\"\"\"\nimport re\ndefine_fib_fast = re.sub(r'[\\r\\n]+', ' ', define_fib_fast.strip())\negison.run_command(define_fib_fast)\n\negison.run_command(\"(test (map fib-fast (between -10 10)))\")\n# => u'{-55 34 -21 13 -8 5 -3 2 -1 1 0 1 1 2 3 5 8 13 21 34 55}\\r\\n'\n\negison.run_command(\"(test (fib-fast 100))\")\n# => u'354224848179261915075\\r\\n'\n\n# \u518d\u5b9a\u7fa9\uff08REPL \u306a\u3089\u53ef\u80fd\uff09\ncmd = \"(define $sample #f)\"\negison.run_command(cmd)\negison.run_command(\"(sample {1 2 3 4 5 6 7 8 9 10})\")\n# => u'Expected function, but found: #f\\r\\n'\n\n\n\u7c21\u5358\u306b\u89e3\u8aac\uff1a\n\n(\u203b1) replwrap.REPLWrapper \u306f\u3001REPL \u306e\u30d7\u30ed\u30f3\u30d7\u30c8\u3092\u6307\u5b9a\u3057\u3066\u3001\u305d\u308c\u3092\u533a\u5207\u308a\u306b\u3057\u3066\u51fa\u529b\u7d50\u679c\u3092\u53d6\u5f97\u3059\u308b\u4ed5\u7d44\u307f\u3002\n\u3068\u3053\u308d\u304c Egison repl \u306e\u3088\u3046\u306b\u30d7\u30ed\u30f3\u30d7\u30c8\u304c\u5358\u7d14\u306a '>' \u3060\u3063\u305f\u308a\u3059\u308b\u5834\u5408\u3001\u51fa\u529b\u7d50\u679c\u306b\u305d\u308c\u304c\u542b\u307e\u308c\u3066\u3044\u308b\u3060\u3051\u3067\u8aa4\u52d5\u4f5c\u3057\u3066\u3057\u307e\u3044\u307e\u3059\uff08\u4f8b\uff1a(test '>')\uff09\u3002\n\u305d\u3053\u3067\u3001\u30e9\u30f3\u30c0\u30e0\u3067\u5341\u5206\u306a\u9577\u3055\u306e\u6587\u5b57\u5217\u3092\u524d\u306b\u4ed8\u3051\u305f\u30d7\u30ed\u30f3\u30d7\u30c8\u3092\u4f5c\u6210\u3002\n(\u203b2) \u2191\u3067\u4f5c\u3063\u305f\u30d7\u30ed\u30f3\u30d7\u30c8\u6587\u5b57\u5217\u3092\u6307\u5b9a\u3057\u3066 egison \u3092\u5b9f\u884c\u3002\n\u306a\u304a\u7b2c3\u5f15\u6570\u306f\u300c\u30d7\u30ed\u30f3\u30d7\u30c8\u3092\u5909\u66f4\u3059\u308b\u30b3\u30de\u30f3\u30c9\u300d\u306e\u6307\u5b9a\u3002\u3053\u308c\u3092\u6307\u5b9a\u3057\u305f\u4e0a\u3067\u7b2c4\u5f15\u6570\u3067\u300c\u5909\u66f4\u5f8c\u306e\u65b0\u3057\u3044\u30d7\u30ed\u30f3\u30d7\u30c8\u300d\u3092\u6307\u5b9a\u3059\u308b\u3053\u3068\u3082\u3067\u304d\u308b\u305d\u3046\u3067\u3059\u304c\u3001Egison REPL \u306f\u305d\u3046\u3044\u3046\u306e\u306b\u5bfe\u5fdc\u3057\u3066\u3044\u306a\u3044\u4ee3\u308f\u308a\u306b\u30b3\u30de\u30f3\u30c9\u30e9\u30a4\u30f3\u5f15\u6570\u3067\u30d7\u30ed\u30f3\u30d7\u30c8\u3092\u6307\u5b9a\u3067\u304d\u308b\u306e\u3067\u3001\u305d\u306e\u3088\u3046\u306b\u3057\u3066\u3044\u307e\u3059\u3002\n\u3042\u3068\u3001egison \u30b3\u30de\u30f3\u30c9\u306b\u306f\u30d1\u30b9\u304c\u901a\u3063\u3066\u3044\u308b\u524d\u63d0\u3067\u3059\u3002\n(\u203b3) REPLWrapper.run_command() \u30e1\u30bd\u30c3\u30c9\u3067\u5b9f\u884c\u3002\u7b2c1\u5f15\u6570\u304c REPL \u306b\u5f15\u304d\u6e21\u3059\u30b3\u30de\u30f3\u30c9\u3001\u7b2c2\u5f15\u6570\u306f\u30bf\u30a4\u30e0\u30a2\u30a6\u30c8\u79d2\u6570\uff08\u7701\u7565\u53ef\u3001\u7701\u7565\u6642\u306e\u30c7\u30d5\u30a9\u30eb\u30c8\u306f30\u79d2\uff09\u3002\n\u623b\u308a\u5024\u306f\u3001\u305d\u306e\u30b3\u30de\u30f3\u30c9\u3092\u5b9f\u884c\u3057\u3066\u304b\u3089\u6b21\u306e\u30d7\u30ed\u30f3\u30d7\u30c8\u304c\u73fe\u308c\u308b\u307e\u3067\u306e\u51fa\u529b\u5168\u4f53\uff08Unicode \u6587\u5b57\u5217\uff09\u3002\n(\u203b4) \u30b3\u30de\u30f3\u30c9\u6587\u5b57\u5217\u306b\u6539\u884c\u6587\u5b57\u304c\u542b\u307e\u308c\u308b\u5834\u5408\u3002\nREPL \u3067\u3082 \u666e\u901a\u306e\u30b3\u30fc\u30c9\u3067\u3082\u554f\u984c\u306a\u3044\u306f\u305a1\u306a\u3093\u3067\u3059\u3051\u308c\u3069\u3001run_command() \u306b\u6e21\u3057\u305f\u3089\u306a\u305c\u304b\u3046\u307e\u304f\u52d5\u4f5c\u3057\u307e\u305b\u3093\u3067\u3057\u305f\u3002\n\u6587\u6cd5\u7684\u306b\u306f\u554f\u984c\u306f\u7121\u3044\u306f\u305a\uff08\u30db\u30ef\u30a4\u30c8\u30b9\u30da\u30fc\u30b9\u6271\u3044\uff09\u306a\u306e\u3067\u3001\u534a\u89d2\u7a7a\u767d\u306b\u7f6e\u63db\u3057\u3066\u3057\u307e\u3048\u3070OK\u3002\n\u3068\u3044\u3046\u3053\u3068\u3067\u3001re.sub(r'[\\r\\n]+', ' ', cmd.strip()) \u306f\u5e38\u5957\u53e5\u3001\u3067\u3059\u306d\u3002\n\n\u3068\u3044\u3046\u3053\u3068\u3067\u3001\u3061\u3083\u3093\u3068\u52d5\u304f\u3053\u3068\u3068\u3001\u52d5\u304b\u3057\u65b9\u306e\u30b3\u30c4\u304c\u5206\u304b\u3063\u305f\u3067\u3059\u3002\n\nSTEP.2 \u30ab\u30fc\u30cd\u30eb\u4f5c\u6210\n\n\u30ab\u30fc\u30cd\u30eb\u672c\u4f53\n\u516c\u5f0f\u306e\u958b\u767a\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8 \u3084\u3001\u5b9f\u969b\u306e\u5b9f\u88c5\u4f8b\uff08bash_kernel\uff09 \u3092\u53c2\u8003\u306b\u3002\n\negison-kernel.py\n# coding: utf-8\n\n# ===== DEFINITIONS =====\n\nfrom IPython.kernel.zmq.kernelbase import Kernel\nfrom pexpect import replwrap, EOF\nfrom subprocess import check_output\n\nimport re\nimport signal\nimport uuid\n\n__version__ = '0.0.1'\n\nversion_pat = re.compile(r'(\\d+(\\.\\d+)+)')\ncrlf_pat = re.compile(r'[\\r\\n]+')\n\nclass EgisonKernel(Kernel):\n    implementation = 'egison_kernel'\n    implementation_version = __version__\n\n    _language_version = None\n\n    @property\n    def language_version(self):\n        if self._language_version is None:\n            m = version_pat.search(check_output(['egison', '--version']).decode('utf-8'))\n            self._language_version = m.group(1)\n        return self._language_version\n\n\n    @property\n    def banner(self):\n        return u'Simple Egison Kernel (Egison v%s)' % self.language_version\n\n\n    language_info = {'name': 'egison',\n                     'codemirror_mode': 'scheme',\n                     'mimetype': 'text/plain',\n                     'file_extension': '.egi'}\n\n\n    def __init__(self, **kwargs):\n        Kernel.__init__(self, **kwargs)\n        self._start_egison()\n\n\n    def _start_egison(self):\n        # Signal handlers are inherited by forked processes, and we can't easily\n        # reset it from the subprocess. Since kernelapp ignores SIGINT except in\n        # message handlers, we need to temporarily reset the SIGINT handler here\n        # so that Egison is interruptible.\n        sig = signal.signal(signal.SIGINT, signal.SIG_DFL)\n        prompt = uuid.uuid4().hex + \">\"\n        try:\n            self.egisonwrapper = replwrap.REPLWrapper(\"egison --prompt \" + prompt, \n                unicode(prompt), None)\n        finally:\n            signal.signal(signal.SIGINT, sig)\n\n\n    def do_execute(self, code, silent, store_history=True,\n                   user_expressions=None, allow_stdin=False):\n        code = crlf_pat.sub(' ', code.strip())\n        if not code:\n            return {'status': 'ok', 'execution_count': self.execution_count,\n                    'payload': [], 'user_expressions': {}}\n\n        interrupted = False\n        try:\n            output = self.egisonwrapper.run_command(code, timeout=None)\n        except KeyboardInterrupt:\n            self.egisonwrapper.child.sendintr()\n            interrupted = True\n            self.egisonwrapper._expect_prompt()\n            output = self.egisonwrapper.child.before\n        except EOF:\n            output = self.egisonwrapper.child.before + 'Restarting Egison'\n            self._start_egison()\n\n        if not silent:\n            # Send standard output\n            stream_content = {'name': 'stdout', 'text': output}\n            self.send_response(self.iopub_socket, 'stream', stream_content)\n\n        if interrupted:\n            return {'status': 'abort', 'execution_count': self.execution_count}\n\n        return {'status': 'ok', 'execution_count': self.execution_count,\n                'payload': [], 'user_expressions': {}}\n\n\n# ===== MAIN =====\nif __name__ == '__main__':\n    from IPython.kernel.zmq.kernelapp import IPKernelApp\n    IPKernelApp.launch_instance(kernel_class=EgisonKernel)\n\n\n\n\u7c21\u5358\u306b\u89e3\u8aac\uff1a\n\n18\u884c\u76ee\u306896\u884c\u76ee\u3002IPython.kernel.zmq.kernelbase.Kernel \u30af\u30e9\u30b9\u3092\u7d99\u627f\u3057\u305f\u30af\u30e9\u30b9\u3092\u4f5c\u3063\u3066\u3001IPKernelApp.launch_instance() \u30e1\u30bd\u30c3\u30c9\u306e\u5f15\u6570\u306b\u305d\u306e\u30af\u30e9\u30b9\u3092\u6e21\u3057\u3066\u8d77\u52d5\u3059\u308b\u3002\u3053\u308c\u304c\uff08Python \u5b9f\u88c5\u306b\u3088\u308b\uff09IPython \u30ab\u30fc\u30cd\u30eb\u306e\u57fa\u672c\u3002\n62\u884c\u76ee\u3002Kernel \u30af\u30e9\u30b9\u3067\u6700\u4f4e\u9650\u7d99\u627f\u3059\u308b\u3079\u304d\u30e1\u30bd\u30c3\u30c9\u306f do_execute() \u306e\u307f\u3002\n\u30bb\u30eb\u306b\u5165\u529b\u3055\u308c\u305f\u6587\u5b57\u5217\uff08\uff1dcode\uff09\u3092\u53d7\u3051\u53d6\u3063\u3066\u3001\u89e3\u91c8\u30fb\u5b9f\u884c\u3057\u3066\u3001\u305d\u306e\u7d50\u679c\u3092 send_response() \u30e1\u30bd\u30c3\u30c9\u3067\u9001\u4fe1\u3057\u3066\u30b9\u30c6\u30fc\u30bf\u30b9\u3092\u6240\u5b9a\u306e Dictionary \u3067\u8fd4\u3059\u3002\ntry:\u301cexcept:\u301c \u3067 KeyboardInterrupt \u3068\u304b pexpect.EOF \u3068\u304b\u306e\u4f8b\u5916\u30cf\u30f3\u30c9\u30ea\u30f3\u30b0\u3057\u3066\u3044\u308b\u8a18\u8ff0\u306f\u3001bash_kernel \u304b\u3089\u305d\u306e\u307e\u307e\u62dd\u501f\u3057\u307e\u3057\u305f\u304c\u3001Egison \u3067\u306f\u3072\u3087\u3063\u3068\u3057\u305f\u3089 KeyboardInterrupt \u306f\u4e0d\u8981\u304b\u3082\uff08\u672a\u78ba\u8a8d\uff09\u3002\n\u524d\u5f8c\u3057\u307e\u3059\u304c\u300148\u301c59\u884c\u76ee\u3002replwrap.REPLWrapper \u306e\u521d\u671f\u5316\u3092\u5b9f\u65bd\u3002\n\u3053\u3061\u3089\u3082 bash_kernel \u304b\u3089\u307b\u307c\u305d\u306e\u307e\u307e\u62dd\u501f\u3057\u307e\u3057\u305f\u304c\u3001signal \u306e\u51e6\u7406\u306f\u3072\u3087\u3063\u3068\u3057\u305f\u3089\u4e0d\u8981\u304b\u3082\uff08\u672a\u691c\u8a3c\uff09\u3002\nprompt \u306e\u51e6\u7406\u306f \u524d\u7bc0 \u306e\u89e3\u8aac (\u203b1)\u3001(\u203b2) \u53c2\u7167\u3002\n\u3055\u3089\u306b\u524d\u306b\u623b\u3063\u3066\u300138\u884c\u76ee\u3002codemirror_mode \u306f\u3001\u4e3b\u306b\u30bb\u30eb\u306b\u5165\u529b\u3057\u305f\u30b3\u30fc\u30c9\u306e\u30b7\u30f3\u30bf\u30c3\u30af\u30b9\u30cf\u30a4\u30e9\u30a4\u30c8\u306b\u4f7f\u7528\u3055\u308c\u307e\u3059\u3002\u3067\u3082 CodeMirror \u306b Egison \u30e2\u30fc\u30c9\u304c\u7528\u610f\u3055\u308c\u3066\u3044\u306a\u3044\u306e\u3067\u3001\u6587\u6cd5\u3084\u4e88\u7d04\u8a9e\u304c\u4e00\u756a\u8fd1\u3044 'scheme' \u306b\u8a2d\u5b9a\u3002\n\n\u305d\u306e\u4ed6\u3001bash_kernel \u3067\u306f\u753b\u50cf\u306e\u8868\u793a\u306b\u5bfe\u5fdc\u3057\u3066\u3044\u305f\u308a\u3001do_complete()\uff08\u30b3\u30fc\u30c9\u88dc\u5b8c\uff09\u30e1\u30bd\u30c3\u30c9\u3082\u30aa\u30fc\u30d0\u30fc\u30e9\u30a4\u30c9\u3057\u3066\u305f\u308a\u3057\u307e\u3059\u304c\u3001Egison \u306b\u306f\u4e0d\u8981\uff08\u3082\u3057\u304f\u306f\u5b9f\u73fe\u56f0\u96e3\uff09\u306a\u306e\u3067\u7701\u3044\u3066\u3044\u307e\u3059\u3002\n\nKernelSpec \u30d5\u30a1\u30a4\u30eb\n~/.ipython/kernels/ \u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u5185\u306b\u3001\u2191\u3067\u4f5c\u3063\u305f egison-kernel.py \u30d5\u30a1\u30a4\u30eb\u3092\u914d\u7f6e\u3057\u305f\u4e0a\u3067\u3001\u540c\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u5185\u306b\u2193\u3092\u4f5c\u6210\uff1a\n\nkernel.json\n{\n  \"display_name\": \"Egison\",\n  \"language\": \"egison\", \n  \"argv\": [\n    \"python\", \n    \"/path/to/user_home/.ipython/kernels/egison/egison-kernel.py\", \n    \"-f\", \"{connection_file}\"\n  ], \n  \"codemirror_mode\": \"scheme\"\n}\n\n\ncodemirror_mode \u306b\u5148\u307b\u3069\u3068\u540c\u3058\u6307\u5b9a\u3092\u3057\u3066\u3044\u308b\u4ee5\u5916\u306f\u3001\u307e\u3041\u898b\u3066\u3044\u305f\u3060\u3051\u308c\u3070\u5206\u304b\u308b\u3068\u601d\u3044\u307e\u3059\u306e\u3067\u8a73\u7d30\u7565\u3002\n\n\u52d5\u4f5c\u78ba\u8a8d\n\u3053\u308c\u3067 Jupyter \u3092\uff08\u518d\uff09\u8d77\u52d5\u3059\u308c\u3070\u3001Egison \u30ab\u30fc\u30cd\u30eb\u304c\u53cd\u6620\u3055\u308c\u307e\u30592\u3002\n\n\u5b9f\u969b\u306b\u52d5\u304b\u3057\u3066\u307f\u305f\u306e\u304c\u3053\u3061\u3089\u2193\n\n\u7d50\u679c\u306f\u2193\u3053\u3061\u3089\u304b\u3089\u95b2\u89a7\u30fb\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3067\u304d\u307e\u3059\uff08nbviewer\uff09\u3002\nEgison_1st.ipynb\n\n\u96d1\u611f\n\n\u25cb\uff1a\u6700\u4f4e\u9650\u306e\u30b7\u30f3\u30bf\u30c3\u30af\u30b9\u30cf\u30a4\u30e9\u30a4\u30c8\u3068\u3001\u30ab\u30c3\u30b3\u5bfe\u5fdc\u306e\u30cf\u30a4\u30e9\u30a4\u30c8\u306f\u3057\u3066\u304f\u308c\u308b\u306e\u3067\u3001\u4fbf\u5229\u3002\n\u25cb\uff1a\u5f0f\u3054\u3068\u306b\u7d50\u679c\u3092\u78ba\u8a8d\u3067\u304d\u308b\u3057\u3001\u518d\u5b9a\u7fa9\u3082\u8a31\u53ef\u3055\u308c\u3066\u3044\u308b\u304b\u3089\u8a66\u884c\u932f\u8aa4\u3067\u304d\u308b\u3002\n\u25b3\uff1a\u30b3\u30fc\u30c9\u88dc\u5b8c\u306f\u5229\u7528\u3067\u304d\u306a\u3044\uff08\u305d\u3053\u307e\u3067\u81ea\u4f5c\u3059\u308b\u306e\u306f\u3064\u3089\u3044\u2026\uff09\u3002\n\u25b3\uff1a\u30ab\u30c3\u30b3\u306e\u5bfe\u5fdc\u304c\u53d6\u308c\u3066\u3044\u306a\u3044\u72b6\u614b\uff08\u9589\u3058\u62ec\u5f27\u304c\u8db3\u308a\u306a\u3044\u72b6\u614b\uff09\u3067\u5b9f\u884c\u3059\u308b\u3068\u3001BUSY \u306e\u307e\u307e\u8fd4\u3063\u3066\u3053\u306a\u304f\u306a\u308b\u3002\n\u2192 \u614c\u3066\u305a\u7126\u3089\u305a\u3001\u30e1\u30cb\u30e5\u30fc\u306e [Kernel] \u2192 [Interrupt] \u3092\u9078\u629e\u3057\u3066\u4e2d\u65ad\u3059\u308c\u3070 OK\u3002\n\u00d7\uff1a\u30a8\u30e9\u30fc\u304c\u30a8\u30e9\u30fc\u3068\u5206\u304b\u308a\u306b\u304f\u3044\uff08replwrap\u304c\u901a\u5e38\u306e\u51fa\u529b\u304b\u30a8\u30e9\u30fc\u304b\u306e\u533a\u5225\u3092\u3057\u3066\u304f\u308c\u306a\u3044\u306e\u3067\u4ed5\u65b9\u304c\u7121\u3044\uff09\n\n\u307e\u3001REPL \u3092\u30e9\u30c3\u30d7\u3057\u305f\u3060\u3051\u306e\u30ab\u30fc\u30cd\u30eb\u3067\u3053\u3053\u307e\u3067\u306e\u4f7f\u3044\u52dd\u624b\u306a\u3089\u826f\u3044\u65b9\u3067\u3059\u306d\u3002\n\u3061\u3087\u3063\u3068\u4f7f\u3044\u65b9\u306b\u6c17\u3092\u3064\u3051\u308c\u3070\u5145\u5206\u306b\u4f7f\u3048\u308b\u30ec\u30d9\u30eb\u3067\u3059(^-^)\n\n\u53c2\u8003\n\nMaking simple Python wrapper kernels\nbash_kernel\n\nreplwrap - Control read-eval-print-loops in Pexpect\n\n\n\n\n\n\n\u5c11\u3057\u524d\u306e Egison REPL \u306f\u3001\u6539\u884c\u3059\u308b\u3068\u305d\u3053\u307e\u3067\u3067\u30b3\u30fc\u30c9\u3092\u89e3\u91c8\u3057\u3066\u51e6\u7406\u3057\u3088\u3046\u3068\u3057\u3066\u305f\u8a18\u61b6\u304c\u3042\u308b\u306e\u3067\u3059\u304c\u3001\u6700\u8fd1\u306e\u306f\u30ab\u30c3\u30b3\u306e\u5bfe\u5fdc\u304c\u53d6\u308c\u3066\u3044\u306a\u3051\u308c\u3070\u307e\u3060\u30b3\u30fc\u30c9\u304c\u7d9a\u3044\u3066\u3044\u308b\u3068\u5224\u5b9a\u3057\u3066\u304f\u308c\u308b\u3088\u3046\u3067\u3059\u3002\u00a0\u21a9\n\n\n\u524d\u56de\u306e\u8a18\u4e8b\u304b\u3089\u3001\u3055\u3089\u306b\u8272\u3005 Kernel \u304c\u5897\u3048\u3066\u307e\u3059\u3002\u3053\u306e\u8a18\u4e8b\u3067\u3082\u89e6\u308c\u3066\u3044\u308b bash_kernel \u3068\u304b\u3001\u307e\u3060\u89e6\u308c\u3066\u3044\u306a\u3044 IHaskell \u3068\u304b\u3002\u00a0\u21a9\n\n\n\n## \u524d\u7f6e\u304d\n\n[Egison](http://www.egison.org/ \"The Egison Programming Language\") \u306e\u53ef\u80fd\u6027\u3092\u8272\u3005\u63a2\u3063\u3066\u3044\u307e\u3059\u3002\n\u53d6\u308a\u6562\u3048\u305a\u52d5\u4f5c\u78ba\u8a8d\u3059\u308b\u306e\u306b\u3001\u6a19\u6e96\u306e\u3088\u308a\u3082\u3046\u5c11\u3057\u4f7f\u3044\u52dd\u624b\u306e\u826f\u3044 REPL \u304c\u3042\u308b\u3068\u826f\u3044\u306a\u3001\u3068\u524d\u304b\u3089\u601d\u3063\u3066\u307e\u3057\u305f\u3002\n\n\u4e00\u65b9\u3067\u3001[Jupyter](http://jupyter.org/ \"Jupyter Project\") \u306e\u53ef\u80fd\u6027\u3092\u8272\u3005\u63a2\u3063\u3066\u3044\u307e\u3059\u3002\n\u305d\u306e\u4e2d\u3067\u3001REPL \u304c\u63d0\u4f9b\u3055\u308c\u3066\u3044\u308b\u74b0\u5883\u306a\u3089\u3001\u305d\u308c\u3092\u30e9\u30c3\u30d7\u3057\u305f\u30ab\u30fc\u30cd\u30eb\u304c\uff08Python \u3067\uff09\u6bd4\u8f03\u7684\u7c21\u5358\u306b\u4f5c\u308c\u308b\u3001\u3068\u3044\u3046\u3053\u3068\u3092\u767a\u898b\u3002\n\n\u3068\u3044\u3046\u3053\u3068\u3067\u3001Egison \u306e REPL \u3092\u30e9\u30c3\u30d7\u3057\u305f Jupyter \u30ab\u30fc\u30cd\u30eb\u3092\u81ea\u4f5c\u3057\u3066\u307f\u307e\u3057\u305f\u3002\n\u4ed6\u306e\u8a00\u8a9e/\u74b0\u5883\u306e\u30b3\u30f3\u30bd\u30fc\u30eb\u30d9\u30fc\u30b9 REPL \u3067\u3082\u540c\u69d8\u306b\u69cb\u7bc9\u3067\u304d\u308b\u3068\u601d\u3046\u306e\u3067\u3001\u4f55\u304b\u306e\u53c2\u8003\u306b\u306a\u308c\u3070\u3068\u3001\u6652\u3057\u3066\u307f\u307e\u3059\u3002\n\n\u3042\u3068\u3001\u3061\u3087\u3063\u3068\u3060\u3051\u8e93\u3044\u305f\u306e\u3067\u305d\u306e\u60c5\u5831\u5171\u6709\u3082\u517c\u306d\u3066\u3001\u52d5\u4f5c\u78ba\u8a8d\u2192\u30ab\u30fc\u30cd\u30eb\u4f5c\u6210\u306e2\u6bb5\u968e\u306b\u5206\u3051\u307e\u3057\u305f\u3002\u624b\u3063\u53d6\u308a\u65e9\u304f\u30ab\u30fc\u30cd\u30eb\u306e\u4f5c\u308a\u65b9\u3060\u3051\u77e5\u308a\u305f\u3044\u65b9\u306f STEP.1 \u306e\u9014\u4e2d\u306f\u98db\u3070\u3057\u3066 [STEP.2](#step2-%E3%82%AB%E3%83%BC%E3%83%8D%E3%83%AB%E4%BD%9C%E6%88%90 \"STEP.2 \u30ab\u30fc\u30cd\u30eb\u4f5c\u6210\") \u304b\u3089\u3069\u3046\u305e\u3002\n\n## \u74b0\u5883\n\n+ Mac OSX 10.9.5\n+ Python 2.7.9\n+ IPython 3.1.0\n+ Egison 3.5.6\n\n\u203b Jupyter (IPython)\u30fbEgison \u306e\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u306f\u7701\u7565\u3002[\u79c1\u306e\u904e\u53bb\u8a18\u4e8b](http://qiita.com/antimon2/items \"antimon2\u306e\u6295\u7a3f - Qiita\") \u7b49\u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n\n## STEP.1 `pexpect.replwrap` \u3067\u52d5\u4f5c\u78ba\u8a8d\n\n### Pexpect \u306e\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\n\nREPL \u3092\u30e9\u30c3\u30d7\u3057\u305f\u30ab\u30fc\u30cd\u30eb\u3092\u4f5c\u308b\u306b\u306f\u3001\u5916\u90e8\u30e9\u30a4\u30d6\u30e9\u30ea [Pexpect](http://pexpect.readthedocs.org/ \"Pexpect documentation\") \u306e [replwrap](http://pexpect.readthedocs.org/en/latest/api/replwrap.html \"replwrap - Control read-eval-print-loops &mdash; Pexpect 3.3 documentation\") \u30e2\u30b8\u30e5\u30fc\u30eb\u3092\u5229\u7528\u3059\u308b\uff08\u3068\u4fbf\u5229\uff09\u3002\u3068\u306e\u3053\u3068\u3067\u3002\n\n```bash:pexpect_install.sh\npip install pexpect\n```\n\n\u203b Pexpect \u3092 \u5229\u7528\u3057\u305f IPython \u30ab\u30fc\u30cd\u30eb\uff08\u4f8b\uff1a[bash_kernel](https://github.com/takluyver/bash_kernel \"takluyver/bash_kernel\")\uff09\u304c\u65e2\u306b\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3055\u308c\u3066\u3044\u308c\u3070\u3001Pexpect \u3082\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3055\u308c\u3066\u3044\u308b\u306e\u3067\u3001\u3053\u306e\u4f5c\u696d\u306f\u4e0d\u8981\u3067\u3059\u3002\n\n### Egison \u306e REPL \u3092\u30e9\u30c3\u30d7\u3057\u3066\u52d5\u4f5c\u78ba\u8a8d\n\n\u307e\u305a\u306f\u7d50\u679c\u304b\u3089\u3002\n\n```py:replwrap_egison_sample.py\n# replwrap \u30a4\u30f3\u30dd\u30fc\u30c8\nfrom pexpect import replwrap\n\n# \u30d7\u30ed\u30f3\u30d7\u30c8\u4f5c\u6210 (\u203b1)\nimport uuid\nprompt = uuid.uuid4().hex + \">\"\n\n# Egison \u30e9\u30c3\u30d1\u30fc\u4f5c\u6210 (\u203b2)\negison = replwrap.REPLWrapper(\"egison --prompt \" + prompt, unicode(prompt), None)\n\n# \u7c21\u5358\u306a\u5f0f\u3067\u52d5\u4f5c\u78ba\u8a8d (\u203b3)\negison.run_command(\"(test (+ 1 2 3))\")\n# => u'6\\r\\n'\n\n# \u95a2\u6570\u5b9a\u7fa9\u30fb\u5b9f\u884c\ncmd = \"(define $sample (lambda [$xs] (nth (pure-rand 1 (length xs)) xs)))\"\negison.run_command(cmd)\negison.run_command(\"(sample {1 2 3 4 5 6 7 8 9 10})\")\n# => u'4\\r\\n'\uff08\u5b9f\u884c\u3059\u308b\u305f\u3073\u306b\u7d50\u679c\u306f\u7570\u306a\u308a\u307e\u3059\uff09\n\n# \u8907\u6570\u884c\u306b\u308f\u305f\u308b\u95a2\u6570\u5b9a\u7fa9\u306e\u5834\u5408 (\u203b4)\ndefine_fib_fast = \"\"\"\n(define $fib-fast\n  (match-lambda integer\n    {[,0 0]\n     [(& ?(lt? $ 0) $n)\n       (if (even? n)\n         (neg(fib-fast (neg n)))\n         (fib-fast (neg n)))]\n     [$n\n       (letrec {[$fib-fast-iter (lambda [$a $b $p $q $c]\n          (if (lt? c 2)\n            (+ (* a p) (* b q))\n            (let {[$a' (if (odd? c) (+ (* a p) (* b q)) a)]\n                  [$b' (if (odd? c) (+ (* a q) (* b q) (* b p)) b)]\n                  [$p' (+ (* p p) (* q q))]\n                  [$q' (* (+ (* 2 p) q) q)]\n                  [$c' (quotient c 2)]}\n              (fib-fast-iter a' b' p' q' c'))))]}\n        (fib-fast-iter 0 1 0 1 n))]}))\n\"\"\"\nimport re\ndefine_fib_fast = re.sub(r'[\\r\\n]+', ' ', define_fib_fast.strip())\negison.run_command(define_fib_fast)\n\negison.run_command(\"(test (map fib-fast (between -10 10)))\")\n# => u'{-55 34 -21 13 -8 5 -3 2 -1 1 0 1 1 2 3 5 8 13 21 34 55}\\r\\n'\n\negison.run_command(\"(test (fib-fast 100))\")\n# => u'354224848179261915075\\r\\n'\n\n# \u518d\u5b9a\u7fa9\uff08REPL \u306a\u3089\u53ef\u80fd\uff09\ncmd = \"(define $sample #f)\"\negison.run_command(cmd)\negison.run_command(\"(sample {1 2 3 4 5 6 7 8 9 10})\")\n# => u'Expected function, but found: #f\\r\\n'\n```\n\n\u7c21\u5358\u306b\u89e3\u8aac\uff1a\n\n+ (\u203b1) `replwrap.REPLWrapper` \u306f\u3001REPL \u306e\u30d7\u30ed\u30f3\u30d7\u30c8\u3092\u6307\u5b9a\u3057\u3066\u3001\u305d\u308c\u3092\u533a\u5207\u308a\u306b\u3057\u3066\u51fa\u529b\u7d50\u679c\u3092\u53d6\u5f97\u3059\u308b\u4ed5\u7d44\u307f\u3002  \n\u3068\u3053\u308d\u304c Egison repl \u306e\u3088\u3046\u306b\u30d7\u30ed\u30f3\u30d7\u30c8\u304c\u5358\u7d14\u306a `'>'` \u3060\u3063\u305f\u308a\u3059\u308b\u5834\u5408\u3001\u51fa\u529b\u7d50\u679c\u306b\u305d\u308c\u304c\u542b\u307e\u308c\u3066\u3044\u308b\u3060\u3051\u3067\u8aa4\u52d5\u4f5c\u3057\u3066\u3057\u307e\u3044\u307e\u3059\uff08\u4f8b\uff1a`(test '>')`\uff09\u3002  \n\u305d\u3053\u3067\u3001\u30e9\u30f3\u30c0\u30e0\u3067\u5341\u5206\u306a\u9577\u3055\u306e\u6587\u5b57\u5217\u3092\u524d\u306b\u4ed8\u3051\u305f\u30d7\u30ed\u30f3\u30d7\u30c8\u3092\u4f5c\u6210\u3002\n+ (\u203b2) \u2191\u3067\u4f5c\u3063\u305f\u30d7\u30ed\u30f3\u30d7\u30c8\u6587\u5b57\u5217\u3092\u6307\u5b9a\u3057\u3066 egison \u3092\u5b9f\u884c\u3002  \n\u306a\u304a\u7b2c3\u5f15\u6570\u306f\u300c\u30d7\u30ed\u30f3\u30d7\u30c8\u3092\u5909\u66f4\u3059\u308b\u30b3\u30de\u30f3\u30c9\u300d\u306e\u6307\u5b9a\u3002\u3053\u308c\u3092\u6307\u5b9a\u3057\u305f\u4e0a\u3067\u7b2c4\u5f15\u6570\u3067\u300c\u5909\u66f4\u5f8c\u306e\u65b0\u3057\u3044\u30d7\u30ed\u30f3\u30d7\u30c8\u300d\u3092\u6307\u5b9a\u3059\u308b\u3053\u3068\u3082\u3067\u304d\u308b\u305d\u3046\u3067\u3059\u304c\u3001Egison REPL \u306f\u305d\u3046\u3044\u3046\u306e\u306b\u5bfe\u5fdc\u3057\u3066\u3044\u306a\u3044\u4ee3\u308f\u308a\u306b\u30b3\u30de\u30f3\u30c9\u30e9\u30a4\u30f3\u5f15\u6570\u3067\u30d7\u30ed\u30f3\u30d7\u30c8\u3092\u6307\u5b9a\u3067\u304d\u308b\u306e\u3067\u3001\u305d\u306e\u3088\u3046\u306b\u3057\u3066\u3044\u307e\u3059\u3002  \n\u3042\u3068\u3001`egison` \u30b3\u30de\u30f3\u30c9\u306b\u306f\u30d1\u30b9\u304c\u901a\u3063\u3066\u3044\u308b\u524d\u63d0\u3067\u3059\u3002\n+ (\u203b3) `REPLWrapper.run_command()` \u30e1\u30bd\u30c3\u30c9\u3067\u5b9f\u884c\u3002\u7b2c1\u5f15\u6570\u304c REPL \u306b\u5f15\u304d\u6e21\u3059\u30b3\u30de\u30f3\u30c9\u3001\u7b2c2\u5f15\u6570\u306f\u30bf\u30a4\u30e0\u30a2\u30a6\u30c8\u79d2\u6570\uff08\u7701\u7565\u53ef\u3001\u7701\u7565\u6642\u306e\u30c7\u30d5\u30a9\u30eb\u30c8\u306f30\u79d2\uff09\u3002  \n\u623b\u308a\u5024\u306f\u3001\u305d\u306e\u30b3\u30de\u30f3\u30c9\u3092\u5b9f\u884c\u3057\u3066\u304b\u3089\u6b21\u306e\u30d7\u30ed\u30f3\u30d7\u30c8\u304c\u73fe\u308c\u308b\u307e\u3067\u306e\u51fa\u529b\u5168\u4f53\uff08Unicode \u6587\u5b57\u5217\uff09\u3002\n+ (\u203b4) \u30b3\u30de\u30f3\u30c9\u6587\u5b57\u5217\u306b\u6539\u884c\u6587\u5b57\u304c\u542b\u307e\u308c\u308b\u5834\u5408\u3002  \nREPL \u3067\u3082 \u666e\u901a\u306e\u30b3\u30fc\u30c9\u3067\u3082\u554f\u984c\u306a\u3044\u306f\u305a[^1]\u306a\u3093\u3067\u3059\u3051\u308c\u3069\u3001`run_command()` \u306b\u6e21\u3057\u305f\u3089\u306a\u305c\u304b\u3046\u307e\u304f\u52d5\u4f5c\u3057\u307e\u305b\u3093\u3067\u3057\u305f\u3002  \n\u6587\u6cd5\u7684\u306b\u306f\u554f\u984c\u306f\u7121\u3044\u306f\u305a\uff08\u30db\u30ef\u30a4\u30c8\u30b9\u30da\u30fc\u30b9\u6271\u3044\uff09\u306a\u306e\u3067\u3001\u534a\u89d2\u7a7a\u767d\u306b\u7f6e\u63db\u3057\u3066\u3057\u307e\u3048\u3070OK\u3002  \n\u3068\u3044\u3046\u3053\u3068\u3067\u3001`re.sub(r'[\\r\\n]+', ' ', cmd.strip())` \u306f\u5e38\u5957\u53e5\u3001\u3067\u3059\u306d\u3002\n\n[^1]: \u5c11\u3057\u524d\u306e Egison REPL \u306f\u3001\u6539\u884c\u3059\u308b\u3068\u305d\u3053\u307e\u3067\u3067\u30b3\u30fc\u30c9\u3092\u89e3\u91c8\u3057\u3066\u51e6\u7406\u3057\u3088\u3046\u3068\u3057\u3066\u305f\u8a18\u61b6\u304c\u3042\u308b\u306e\u3067\u3059\u304c\u3001\u6700\u8fd1\u306e\u306f\u30ab\u30c3\u30b3\u306e\u5bfe\u5fdc\u304c\u53d6\u308c\u3066\u3044\u306a\u3051\u308c\u3070\u307e\u3060\u30b3\u30fc\u30c9\u304c\u7d9a\u3044\u3066\u3044\u308b\u3068\u5224\u5b9a\u3057\u3066\u304f\u308c\u308b\u3088\u3046\u3067\u3059\u3002\n\n\u3068\u3044\u3046\u3053\u3068\u3067\u3001\u3061\u3083\u3093\u3068\u52d5\u304f\u3053\u3068\u3068\u3001\u52d5\u304b\u3057\u65b9\u306e\u30b3\u30c4\u304c\u5206\u304b\u3063\u305f\u3067\u3059\u3002\n\n## STEP.2 \u30ab\u30fc\u30cd\u30eb\u4f5c\u6210\n\n### \u30ab\u30fc\u30cd\u30eb\u672c\u4f53\n\n[\u516c\u5f0f\u306e\u958b\u767a\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8](https://ipython.org/ipython-doc/dev/development/wrapperkernels.html \"Making simple Python wrapper kernels &mdash; IPython 3.0.0-b1 documentation\") \u3084\u3001[\u5b9f\u969b\u306e\u5b9f\u88c5\u4f8b\uff08bash_kernel\uff09](https://github.com/takluyver/bash_kernel/blob/master/bash_kernel/kernel.py \"bash_kernel/kernel.py at master \u00b7 takluyver/bash_kernel\") \u3092\u53c2\u8003\u306b\u3002\n\n```py:egison-kernel.py\n# coding: utf-8\n\n# ===== DEFINITIONS =====\n\nfrom IPython.kernel.zmq.kernelbase import Kernel\nfrom pexpect import replwrap, EOF\nfrom subprocess import check_output\n\nimport re\nimport signal\nimport uuid\n\n__version__ = '0.0.1'\n\nversion_pat = re.compile(r'(\\d+(\\.\\d+)+)')\ncrlf_pat = re.compile(r'[\\r\\n]+')\n\nclass EgisonKernel(Kernel):\n    implementation = 'egison_kernel'\n    implementation_version = __version__\n\n    _language_version = None\n\n    @property\n    def language_version(self):\n        if self._language_version is None:\n            m = version_pat.search(check_output(['egison', '--version']).decode('utf-8'))\n            self._language_version = m.group(1)\n        return self._language_version\n\n\n    @property\n    def banner(self):\n        return u'Simple Egison Kernel (Egison v%s)' % self.language_version\n\n\n    language_info = {'name': 'egison',\n                     'codemirror_mode': 'scheme',\n                     'mimetype': 'text/plain',\n                     'file_extension': '.egi'}\n\n\n    def __init__(self, **kwargs):\n        Kernel.__init__(self, **kwargs)\n        self._start_egison()\n\n\n    def _start_egison(self):\n        # Signal handlers are inherited by forked processes, and we can't easily\n        # reset it from the subprocess. Since kernelapp ignores SIGINT except in\n        # message handlers, we need to temporarily reset the SIGINT handler here\n        # so that Egison is interruptible.\n        sig = signal.signal(signal.SIGINT, signal.SIG_DFL)\n        prompt = uuid.uuid4().hex + \">\"\n        try:\n            self.egisonwrapper = replwrap.REPLWrapper(\"egison --prompt \" + prompt, \n                unicode(prompt), None)\n        finally:\n            signal.signal(signal.SIGINT, sig)\n\n\n    def do_execute(self, code, silent, store_history=True,\n                   user_expressions=None, allow_stdin=False):\n        code = crlf_pat.sub(' ', code.strip())\n        if not code:\n            return {'status': 'ok', 'execution_count': self.execution_count,\n                    'payload': [], 'user_expressions': {}}\n\n        interrupted = False\n        try:\n            output = self.egisonwrapper.run_command(code, timeout=None)\n        except KeyboardInterrupt:\n            self.egisonwrapper.child.sendintr()\n            interrupted = True\n            self.egisonwrapper._expect_prompt()\n            output = self.egisonwrapper.child.before\n        except EOF:\n            output = self.egisonwrapper.child.before + 'Restarting Egison'\n            self._start_egison()\n\n        if not silent:\n            # Send standard output\n            stream_content = {'name': 'stdout', 'text': output}\n            self.send_response(self.iopub_socket, 'stream', stream_content)\n\n        if interrupted:\n            return {'status': 'abort', 'execution_count': self.execution_count}\n\n        return {'status': 'ok', 'execution_count': self.execution_count,\n                'payload': [], 'user_expressions': {}}\n\n\n# ===== MAIN =====\nif __name__ == '__main__':\n    from IPython.kernel.zmq.kernelapp import IPKernelApp\n    IPKernelApp.launch_instance(kernel_class=EgisonKernel)\n\n```\n\n\u7c21\u5358\u306b\u89e3\u8aac\uff1a\n\n+ 18\u884c\u76ee\u306896\u884c\u76ee\u3002`IPython.kernel.zmq.kernelbase.Kernel` \u30af\u30e9\u30b9\u3092\u7d99\u627f\u3057\u305f\u30af\u30e9\u30b9\u3092\u4f5c\u3063\u3066\u3001`IPKernelApp.launch_instance()` \u30e1\u30bd\u30c3\u30c9\u306e\u5f15\u6570\u306b\u305d\u306e\u30af\u30e9\u30b9\u3092\u6e21\u3057\u3066\u8d77\u52d5\u3059\u308b\u3002\u3053\u308c\u304c\uff08Python \u5b9f\u88c5\u306b\u3088\u308b\uff09IPython \u30ab\u30fc\u30cd\u30eb\u306e\u57fa\u672c\u3002\n+ 62\u884c\u76ee\u3002`Kernel` \u30af\u30e9\u30b9\u3067\u6700\u4f4e\u9650\u7d99\u627f\u3059\u308b\u3079\u304d\u30e1\u30bd\u30c3\u30c9\u306f `do_execute()` \u306e\u307f\u3002  \n\u30bb\u30eb\u306b\u5165\u529b\u3055\u308c\u305f\u6587\u5b57\u5217\uff08\uff1d`code`\uff09\u3092\u53d7\u3051\u53d6\u3063\u3066\u3001\u89e3\u91c8\u30fb\u5b9f\u884c\u3057\u3066\u3001\u305d\u306e\u7d50\u679c\u3092 `send_response()` \u30e1\u30bd\u30c3\u30c9\u3067\u9001\u4fe1\u3057\u3066\u30b9\u30c6\u30fc\u30bf\u30b9\u3092\u6240\u5b9a\u306e Dictionary \u3067\u8fd4\u3059\u3002  \n`try:\u301cexcept:\u301c` \u3067 `KeyboardInterrupt` \u3068\u304b `pexpect.EOF` \u3068\u304b\u306e\u4f8b\u5916\u30cf\u30f3\u30c9\u30ea\u30f3\u30b0\u3057\u3066\u3044\u308b\u8a18\u8ff0\u306f\u3001bash_kernel \u304b\u3089\u305d\u306e\u307e\u307e\u62dd\u501f\u3057\u307e\u3057\u305f\u304c\u3001Egison \u3067\u306f\u3072\u3087\u3063\u3068\u3057\u305f\u3089 `KeyboardInterrupt` \u306f\u4e0d\u8981\u304b\u3082\uff08\u672a\u78ba\u8a8d\uff09\u3002\n+ \u524d\u5f8c\u3057\u307e\u3059\u304c\u300148\u301c59\u884c\u76ee\u3002`replwrap.REPLWrapper` \u306e\u521d\u671f\u5316\u3092\u5b9f\u65bd\u3002  \n\u3053\u3061\u3089\u3082 bash_kernel \u304b\u3089\u307b\u307c\u305d\u306e\u307e\u307e\u62dd\u501f\u3057\u307e\u3057\u305f\u304c\u3001signal \u306e\u51e6\u7406\u306f\u3072\u3087\u3063\u3068\u3057\u305f\u3089\u4e0d\u8981\u304b\u3082\uff08\u672a\u691c\u8a3c\uff09\u3002  \n`prompt` \u306e\u51e6\u7406\u306f [\u524d\u7bc0](#egison-%E3%81%AE-repl-%E3%82%92%E3%83%A9%E3%83%83%E3%83%97%E3%81%97%E3%81%A6%E5%8B%95%E4%BD%9C%E7%A2%BA%E8%AA%8D \"STEP.1 pexpect.replwrap \u3067\u52d5\u4f5c\u78ba\u8a8d - Egison \u306e REPL \u3092\u30e9\u30c3\u30d7\u3057\u3066\u52d5\u4f5c\u78ba\u8a8d\") \u306e\u89e3\u8aac (\u203b1)\u3001(\u203b2) \u53c2\u7167\u3002\n+ \u3055\u3089\u306b\u524d\u306b\u623b\u3063\u3066\u300138\u884c\u76ee\u3002`codemirror_mode` \u306f\u3001\u4e3b\u306b\u30bb\u30eb\u306b\u5165\u529b\u3057\u305f\u30b3\u30fc\u30c9\u306e\u30b7\u30f3\u30bf\u30c3\u30af\u30b9\u30cf\u30a4\u30e9\u30a4\u30c8\u306b\u4f7f\u7528\u3055\u308c\u307e\u3059\u3002\u3067\u3082 [CodeMirror](http://codemirror.net/ \"CodeMirror\") \u306b Egison \u30e2\u30fc\u30c9\u304c\u7528\u610f\u3055\u308c\u3066\u3044\u306a\u3044\u306e\u3067\u3001\u6587\u6cd5\u3084\u4e88\u7d04\u8a9e\u304c\u4e00\u756a\u8fd1\u3044 `'scheme'` \u306b\u8a2d\u5b9a\u3002\n\n\u305d\u306e\u4ed6\u3001bash_kernel \u3067\u306f\u753b\u50cf\u306e\u8868\u793a\u306b\u5bfe\u5fdc\u3057\u3066\u3044\u305f\u308a\u3001`do_complete()`\uff08\u30b3\u30fc\u30c9\u88dc\u5b8c\uff09\u30e1\u30bd\u30c3\u30c9\u3082\u30aa\u30fc\u30d0\u30fc\u30e9\u30a4\u30c9\u3057\u3066\u305f\u308a\u3057\u307e\u3059\u304c\u3001Egison \u306b\u306f\u4e0d\u8981\uff08\u3082\u3057\u304f\u306f\u5b9f\u73fe\u56f0\u96e3\uff09\u306a\u306e\u3067\u7701\u3044\u3066\u3044\u307e\u3059\u3002\n\n### KernelSpec \u30d5\u30a1\u30a4\u30eb\n\n`~/.ipython/kernels/` \u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u5185\u306b\u3001\u2191\u3067\u4f5c\u3063\u305f egison-kernel.py \u30d5\u30a1\u30a4\u30eb\u3092\u914d\u7f6e\u3057\u305f\u4e0a\u3067\u3001\u540c\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u5185\u306b\u2193\u3092\u4f5c\u6210\uff1a\n\n```json:kernel.json\n{\n  \"display_name\": \"Egison\",\n  \"language\": \"egison\", \n  \"argv\": [\n    \"python\", \n    \"/path/to/user_home/.ipython/kernels/egison/egison-kernel.py\", \n    \"-f\", \"{connection_file}\"\n  ], \n  \"codemirror_mode\": \"scheme\"\n}\n```\n\n`codemirror_mode` \u306b\u5148\u307b\u3069\u3068\u540c\u3058\u6307\u5b9a\u3092\u3057\u3066\u3044\u308b\u4ee5\u5916\u306f\u3001\u307e\u3041\u898b\u3066\u3044\u305f\u3060\u3051\u308c\u3070\u5206\u304b\u308b\u3068\u601d\u3044\u307e\u3059\u306e\u3067\u8a73\u7d30\u7565\u3002\n\n## \u52d5\u4f5c\u78ba\u8a8d\n\n\u3053\u308c\u3067 Jupyter \u3092\uff08\u518d\uff09\u8d77\u52d5\u3059\u308c\u3070\u3001Egison \u30ab\u30fc\u30cd\u30eb\u304c\u53cd\u6620\u3055\u308c\u307e\u3059[^2]\u3002\n\n![JupyterKernels20150618.png](https://qiita-image-store.s3.amazonaws.com/0/30400/abf22ebc-c95a-e517-14dd-6fa69d524010.png)\n\n[^2]: [\u524d\u56de\u306e\u8a18\u4e8b](http://qiita.com/antimon2/items/a8cd98257219773b9ef3 \"Jupyter \u74b0\u5883\u8a2d\u5b9a\u88dc\u8db3 #pythontokai - Qiita\")\u304b\u3089\u3001\u3055\u3089\u306b\u8272\u3005 Kernel \u304c\u5897\u3048\u3066\u307e\u3059\u3002\u3053\u306e\u8a18\u4e8b\u3067\u3082\u89e6\u308c\u3066\u3044\u308b bash_kernel \u3068\u304b\u3001\u307e\u3060\u89e6\u308c\u3066\u3044\u306a\u3044 [IHaskell](https://github.com/gibiansky/IHaskell \"gibiansky/IHaskell\") \u3068\u304b\u3002\n\n\u5b9f\u969b\u306b\u52d5\u304b\u3057\u3066\u307f\u305f\u306e\u304c\u3053\u3061\u3089\u2193\n\n![Egison_1st.png](https://qiita-image-store.s3.amazonaws.com/0/30400/b288547e-12c1-87f0-7ef3-253c96aac212.png)\n\n\u7d50\u679c\u306f\u2193\u3053\u3061\u3089\u304b\u3089\u95b2\u89a7\u30fb\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3067\u304d\u307e\u3059\uff08nbviewer\uff09\u3002\n[Egison_1st.ipynb](https://nbviewer.jupyter.org/gist/antimon2/498557764d0403eefc4c)\n\n### \u96d1\u611f\n\n+ \u25cb\uff1a\u6700\u4f4e\u9650\u306e\u30b7\u30f3\u30bf\u30c3\u30af\u30b9\u30cf\u30a4\u30e9\u30a4\u30c8\u3068\u3001\u30ab\u30c3\u30b3\u5bfe\u5fdc\u306e\u30cf\u30a4\u30e9\u30a4\u30c8\u306f\u3057\u3066\u304f\u308c\u308b\u306e\u3067\u3001\u4fbf\u5229\u3002\n+ \u25cb\uff1a\u5f0f\u3054\u3068\u306b\u7d50\u679c\u3092\u78ba\u8a8d\u3067\u304d\u308b\u3057\u3001\u518d\u5b9a\u7fa9\u3082\u8a31\u53ef\u3055\u308c\u3066\u3044\u308b\u304b\u3089\u8a66\u884c\u932f\u8aa4\u3067\u304d\u308b\u3002\n+ \u25b3\uff1a\u30b3\u30fc\u30c9\u88dc\u5b8c\u306f\u5229\u7528\u3067\u304d\u306a\u3044\uff08\u305d\u3053\u307e\u3067\u81ea\u4f5c\u3059\u308b\u306e\u306f\u3064\u3089\u3044\u2026\uff09\u3002\n+ \u25b3\uff1a\u30ab\u30c3\u30b3\u306e\u5bfe\u5fdc\u304c\u53d6\u308c\u3066\u3044\u306a\u3044\u72b6\u614b\uff08\u9589\u3058\u62ec\u5f27\u304c\u8db3\u308a\u306a\u3044\u72b6\u614b\uff09\u3067\u5b9f\u884c\u3059\u308b\u3068\u3001BUSY \u306e\u307e\u307e\u8fd4\u3063\u3066\u3053\u306a\u304f\u306a\u308b\u3002  \n\u2192 \u614c\u3066\u305a\u7126\u3089\u305a\u3001\u30e1\u30cb\u30e5\u30fc\u306e [Kernel] \u2192 [Interrupt] \u3092\u9078\u629e\u3057\u3066\u4e2d\u65ad\u3059\u308c\u3070 OK\u3002\n+ \u00d7\uff1a\u30a8\u30e9\u30fc\u304c\u30a8\u30e9\u30fc\u3068\u5206\u304b\u308a\u306b\u304f\u3044\uff08`replwrap`\u304c\u901a\u5e38\u306e\u51fa\u529b\u304b\u30a8\u30e9\u30fc\u304b\u306e\u533a\u5225\u3092\u3057\u3066\u304f\u308c\u306a\u3044\u306e\u3067\u4ed5\u65b9\u304c\u7121\u3044\uff09\n\n\u307e\u3001REPL \u3092\u30e9\u30c3\u30d7\u3057\u305f\u3060\u3051\u306e\u30ab\u30fc\u30cd\u30eb\u3067\u3053\u3053\u307e\u3067\u306e\u4f7f\u3044\u52dd\u624b\u306a\u3089\u826f\u3044\u65b9\u3067\u3059\u306d\u3002\n\u3061\u3087\u3063\u3068\u4f7f\u3044\u65b9\u306b\u6c17\u3092\u3064\u3051\u308c\u3070\u5145\u5206\u306b\u4f7f\u3048\u308b\u30ec\u30d9\u30eb\u3067\u3059(^-^)\n\n## \u53c2\u8003\n\n+ [Making simple Python wrapper kernels](https://ipython.org/ipython-doc/dev/development/wrapperkernels.html \"Making simple Python wrapper kernels &mdash; IPython 3.0.0-b1 documentation\")\n+ [bash_kernel](https://github.com/takluyver/bash_kernel \"takluyver/bash_kernel\")\n+ [replwrap - Control read-eval-print-loops](http://pexpect.readthedocs.org/en/latest/api/replwrap.html \"replwrap - Control read-eval-print-loops &mdash; Pexpect 3.3 documentation\") in [Pexpect](http://pexpect.readthedocs.org/ \"Pexpect documentation\")\n", "tags": ["Jupyter", "egison3.5.6", "Python2.7.9"]}