{"context": "Jackson \u306e\u3001\u666e\u6bb5\u3042\u3093\u307e\u308a\u4f7f\u308f\u306a\u3044\u6a5f\u80fd\u904e\u304e\u3066\u4f7f\u3044\u305f\u3044\u3068\u304d\u306b\u5fd8\u308c\u3066\u3050\u3050\u3063\u3066\u6642\u9593\u3092\u6d6a\u8cbb\u3057\u3066\u3057\u307e\u3046\u3088\u3046\u306a\u30b1\u30fc\u30b9\u3092\u56de\u907f\u3059\u308b\u305f\u3081\u306b\u30e1\u30e2\u30e1\u30e2\u3057\u307e\u3059\u3002\u968f\u6642\u66f4\u65b0\u4e88\u5b9a\u3002\n\u898b\u308c\u3070\u308f\u304b\u308a\u307e\u3059\u304c\u3001\u5143\u30cd\u30bf\u306f\u307b\u307c\u3059\u3079\u3066 Stack Overflow \u3067\u3059\u3002\u82f1\u8a9e\u3060\u3051\u3060\u3068\u8aad\u3080\u306e\u304c\u8f9b\u3044\u3001\u3068\u3044\u3046\u65b9\u5411\u3051\uff08\u4e3b\u306b\u81ea\u5206\uff09\u306b\u307e\u3068\u3081\u3066\u3044\u307e\u3059\u3002\n\nsnake_case \u3067\u30d7\u30ed\u30d1\u30c6\u30a3\u3092\u8868\u73fe\u3057\u3066\u3044\u308b JSON \u3068 camelCase \u3067\u8868\u8a18\u3057\u3066\u3044\u308b POJO \u3092\u30de\u30c3\u30d4\u30f3\u30b0\u3057\u305f\u3044\njava - Jackson overcoming underscores in favor of camel-case - Stack Overflow  \u3088\u308a\u3002\n\u5f15\u6570\u306b PropertyNamingStrategy.CAMEL_CASE_TO_LOWER_CASE_WITH_UNDERSCORES PropertyNamingStrategy.SNAKE_CASE \u3092\u6307\u5b9a\u3057\u3066\u3001 ObjectMapper#setPropertyNamingStrategy() \u3092\u547c\u3073\u51fa\u3059\u3068\u3001\u3053\u306e\u30de\u30c3\u30d4\u30f3\u30b0\u3092\u3059\u308b ObjectMapper \u3092\u5f97\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n(2016-09-29 \u66f4\u65b0: PropertyNamingStrategy.CAMEL_CASE_TO_LOWER_CASE_WITH_UNDERSCORES \u306f deprecated \u306b\u306a\u308a\u307e\u3057\u305f\u3002\u4ee3\u308f\u308a\u306b PropertyNamingStrategy.SNAKE_CASE \u3092\u4f7f\u3046\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059)\n\u4ee5\u4e0b\u3001\u5229\u7528\u4f8b\u3067\u3059\u3002\n    public static class Hoge {\n        // \u3053\u306e\u30d5\u30a3\u30fc\u30eb\u30c9\u306f JSON \u306e \"hoge_fuga\" \u30d7\u30ed\u30d1\u30c6\u30a3\u306b\u5bfe\u5fdc\u3059\u308b\n        public String hogeFuga;\n    }\n\n    public static void snakeCaseJsonToCamelCasePojo() throws IOException {\n        ObjectMapper mapper = new ObjectMapper()\n                .setPropertyNamingStrategy(\n                        PropertyNamingStrategy.CAMEL_CASE_TO_LOWER_CASE_WITH_UNDERSCORES);\n\n        Hoge hogeObj = mapper.readValue(\"{\\\"hoge_fuga\\\": \\\"piyopiyo\\\"}\", Hoge.class);\n        System.out.println(hogeObj.hogeFuga);\n    }\n\n\nObjectMapper#writeValue() \u306a\u3069\u3067\u51fa\u529b\u3055\u308c\u308b JSON \u3092\u6574\u5f62\uff06\u30a4\u30f3\u30c7\u30f3\u30c8 (pretty print) \u3057\u305f\u3044\n\n\u66f8\u5f0f\u306f\u4f55\u3067\u3082\u3044\u3044\u306e\u3067\u3001\u3068\u306b\u304b\u304f\u304a\u624b\u8efd\u306b\u6574\u5f62\u3057\u305f\u3044\njava - Pretty printing JSON from Jackson 2.2's ObjectMapper - Stack Overflow \u3088\u308a\u3002\n\u5f15\u6570\u306b SerializationFeature.INDENT_OUTPUT \u3092\u6307\u5b9a\u3057\u3066 ObjectMapper#enable() \u3092\u547c\u3073\u51fa\u3059\u3068\u3001pretty print \u3092\u6709\u52b9\u306b\u3057\u305f ObjectMapper \u3092\u5f97\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\u4ee5\u4e0b\u3001\u5229\u7528\u4f8b\u3067\u3059\u3002\n    public static class Fuga {\n        public List<String> strings = Arrays.asList(\"foo\", \"bar\", \"baz\");\n        public int number = 3;\n    }\n\n    public static void withPrettyPrint() throws JsonProcessingException {\n        ObjectMapper mapper = new ObjectMapper()\n                .enable(SerializationFeature.INDENT_OUTPUT);\n\n        String json = mapper.writeValueAsString(new Fuga());\n\n        System.out.println(json);\n    }\n\n\u51fa\u529b\u7d50\u679c\u306f\u3053\u3093\u306a\u611f\u3058\u3002\u3053\u306e\u51fa\u529b\u7d50\u679c\u306f\u305d\u3046\u3067\u3082\u306a\u3044\u3067\u3059\u304c\u3001\u6a19\u6e96\u306e pretty printer \u306f\u30af\u30bb\u304c\u3042\u308b\u306e\u3067\u8981\u6ce8\u610f\u3067\u3059\u3002\n{\n  \"strings\" : [ \"foo\", \"bar\", \"baz\" ],\n  \"number\" : 3\n}\n\n\n\u66f8\u5f0f\u306f\u305d\u306e\u307e\u307e\u3067\u3044\u3044\u3051\u3069\u3001\u30a4\u30f3\u30c7\u30f3\u30c8\u6570\u306f 2 \u3064\u304b\u3089 4 \u3064\u306b\u5909\u66f4\u3057\u305f\u3044\njava - Custom pretty printer using Jackson library - Stack Overflow \u3088\u308a\u3002\nDefaultPrettyPrinter \u304c\u5229\u7528\u3057\u3066\u3044\u308b Indenter \u3092\u6a19\u6e96\u306e DefaultPrettyPrinter.Lf2SpacesIndenter \u304b\u3089\u72ec\u81ea\u306e\u3082\u306e\u306b\u5dee\u3057\u66ff\u3048\u3066\u3042\u3052\u308b\u3053\u3068\u3067\u5b9f\u73fe\u3067\u304d\u307e\u3059\u3002\n    /**\n     * \u30a4\u30f3\u30c7\u30f3\u30c8 4 \u3064\u306e Indenter \u5b9f\u88c5\u3067\u3059\u3002\n     */\n    public class Lf4SpacesIndenter extends DefaultPrettyPrinter.Lf2SpacesIndenter {\n        final static char[] LONG_SPACES = new char[64 * 2];\n        static {\n            Arrays.fill(LONG_SPACES, ' ');\n        }\n\n        @Override\n        public void writeIndentation(JsonGenerator jg, int level) throws IOException, JsonGenerationException {\n            jg.writeRaw(_lf);\n            if (level > 0) {\n                int numSpaces = level * 4;\n                while (numSpaces > LONG_SPACES.length) {\n                    jg.writeRaw(LONG_SPACES, 0, LONG_SPACES.length);\n                    numSpaces -= LONG_SPACES.length;\n                }\n                jg.writeRaw(LONG_SPACES, 0, numSpaces);\n            }\n        }\n    }\n\n    public static class Fuga {\n        public List<String> strings = Arrays.asList(\"foo\", \"bar\", \"baz\");\n        public int number = 3;\n    }\n\n    public static void with4SpacesIndentation() throws JsonProcessingException {\n        ObjectMapper objectMapper = new ObjectMapper()\n                .enable(SerializationFeature.INDENT_OUTPUT);\n\n        String json = objectMapper\n                .writer(new DefaultPrettyPrinter()\n                        .withObjectIndenter(new Lf4SpacesIndenter()))\n                .writeValueAsString(new Fuga());\n\n        System.out.println(json);\n    }\n\n\n\u3084\u3063\u3071\u308a\u6a19\u6e96\u306e pretty printer \u306e\u66f8\u5f0f\u304c\u6c17\u6301\u3061\u60aa\u3044\u306e\u3067 JSON.stringify() \u307d\u304f\u3057\u305f\u3044\n\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u306f\u9577\u304f\u306a\u3063\u3066\u3057\u307e\u3063\u305f\u306e\u3067\u3001Gist \u306b\u6295\u7a3f\u3057\u307e\u3057\u305f\u3002\nhttps://gist.github.com/komiya-atsushi/832a97c84ccae7cdfc2a\n\u5b9f\u88c5\u306f\u975e\u5e38\u306b\u3060\u308b\u3044\u306e\u3067\u3059\u304c\u3001 com.fasterxml.jackson.core.PrettyPrinter \u3092\u5b9f\u88c5\u3057\u3066\u3057\u307e\u3048\u3070\u3060\u3044\u305f\u3044\u306a\u3093\u3067\u3082\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002\n\nPOJO \u306e null \u306a\u30d5\u30a3\u30fc\u30eb\u30c9\u306f\u51fa\u529b\u3057\u306a\u3044\u3067 JSON \u306b\u30b7\u30ea\u30a2\u30e9\u30a4\u30ba\u3057\u305f\u3044\njava - How to tell Jackson to ignore a field during serialization if its value is null? - Stack Overflow \u3088\u308a\u3002\n\u5e7e\u3064\u304b\u65b9\u6cd5\u304c\u3042\u308a\u307e\u3059\u3002\n\n\u305d\u306e 1 : ObjectMapper \u306b null \u306a\u30d5\u30a3\u30fc\u30eb\u30c9\u3092\u7121\u8996\u3055\u305b\u308b\u8a2d\u5b9a\u3092\u3059\u308b\nPOJO \u306e\u30af\u30e9\u30b9\u3092\u3044\u3058\u308a\u305f\u304f\u306a\u3044 (\u3044\u3058\u308c\u306a\u3044) \u5834\u5408\u306b\u6709\u52b9\u306a\u65b9\u6cd5\u3067\u3059\u3002\n\u5f15\u6570\u306b JsonInclude.Include.NON_NULL \u3092\u6307\u5b9a\u3057\u3066\u3001 ObjectMapper#setSerializationInclusion() \u3092\u547c\u3073\u51fa\u3059\u3053\u3068\u3067\u3001null \u306a\u30d5\u30a3\u30fc\u30eb\u30c9\u3092\u30b7\u30ea\u30a2\u30e9\u30a4\u30ba\u3057\u306a\u3044 ObjectMapper \u3092\u5f97\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n    public static class Fuga {\n        public List<String> strings = null; // \u3053\u306e\u30d5\u30a3\u30fc\u30eb\u30c9\u306f\u30b7\u30ea\u30a2\u30e9\u30a4\u30ba\u3057\u3066\u6b32\u3057\u304f\u306a\u3044\n        public int number = 3;\n    }\n\n    public static void ignoreNullFieldByObjectMapper() throws JsonProcessingException {\n        ObjectMapper mapper = new ObjectMapper()\n                .setSerializationInclusion(JsonInclude.Include.NON_NULL);\n\n        String json = mapper.writeValueAsString(new Fuga());\n\n        System.out.println(json);\n    }\n\n\u5b9f\u884c\u7d50\u679c\u306f\u3053\u3061\u3089\u3002\n{\"number\":3}\n\n\n\u305d\u306e 2 : POJO \u306b\u30a2\u30ce\u30c6\u30fc\u30b7\u30e7\u30f3\u3067\u3001null \u306a\u30d5\u30a3\u30fc\u30eb\u30c9\u306f\u30b7\u30ea\u30a2\u30e9\u30a4\u30ba\u4e0d\u8981\u3067\u3042\u308b\u65e8\u3092\u8868\u73fe\u3055\u305b\u308b\nObjectMapper \u304c\u3044\u308d\u3093\u306a\u3068\u3053\u308d\u3067\u4f7f\u308f\u308c\u3066\u3044\u3066\u3001\u305d\u306e 1 \u306e\u5bfe\u5fdc\u65b9\u6cd5\u3067\u306f\u5bfe\u51e6\u304c\u96e3\u3057\u3044\u30fb\u9762\u5012\u306a\u5834\u5408\u306b\u30aa\u30b9\u30b9\u30e1\u3067\u3059\u3002\n\u5bfe\u8c61\u306e POJO \u306e\u30af\u30e9\u30b9\u5ba3\u8a00\u306b\u3066\u3001\u30af\u30e9\u30b9\u306b\u5bfe\u3057\u3066 @JsonInclude(JsonInclude.Include.NON_NULL) \u306e\u30a2\u30ce\u30c6\u30fc\u30b7\u30e7\u30f3\u3092\u4ed8\u4e0e\u3057\u307e\u3059\u3002\n    @JsonInclude(JsonInclude.Include.NON_NULL)\n    public static class Fuga {\n        public List<String> strings = null; // \u3053\u306e\u30d5\u30a3\u30fc\u30eb\u30c9\u306f\u30b7\u30ea\u30a2\u30e9\u30a4\u30ba\u3057\u3066\u6b32\u3057\u304f\u306a\u3044\n        public int number = 3;\n    }\n\n    public static void ignoreNullFieldByAnnotation() throws JsonProcessingException {\n        ObjectMapper mapper = new ObjectMapper();\n\n        String json = mapper.writeValueAsString(new Fuga());\n\n        System.out.println(json);\n    }\n\n\n\u5217\u6319\u578b (enum) \u306e\u30d5\u30a3\u30fc\u30eb\u30c9\u3092\u3001\u6587\u5b57\u5217\u3067\u306f\u306a\u304f #ordinal() \u306a\u5024\u3067\u30b7\u30ea\u30a2\u30e9\u30a4\u30ba\u3057\u305f\u3044\nSerializationConfig.Feature.WRITE_ENUMS_USING_INDEX \u3068 true \u3092\u6307\u5b9a\u3057\u3066\u3001 ObjectMapper#configure() \u3092\u547c\u3073\u51fa\u3057\u307e\u3059\u3002\n    public enum Gender {\n        MALE, FEMALE\n    }\n\n    public static void serializeUsingEnumOrdinal() throws IOException {\n        List<Gender> genders = Arrays.asList(Gender.FEMALE, Gender.MALE);\n\n        String json = new ObjectMapper()\n                .configure(SerializationConfig.Feature.WRITE_ENUMS_USING_INDEX, true)\n                .writeValueAsString(genders);\n\n        System.out.println(json);\n    }\n\nJackson \u306e\u3001\u666e\u6bb5\u3042\u3093\u307e\u308a\u4f7f\u308f\u306a\u3044\u6a5f\u80fd\u904e\u304e\u3066\u4f7f\u3044\u305f\u3044\u3068\u304d\u306b\u5fd8\u308c\u3066\u3050\u3050\u3063\u3066\u6642\u9593\u3092\u6d6a\u8cbb\u3057\u3066\u3057\u307e\u3046\u3088\u3046\u306a\u30b1\u30fc\u30b9\u3092\u56de\u907f\u3059\u308b\u305f\u3081\u306b\u30e1\u30e2\u30e1\u30e2\u3057\u307e\u3059\u3002\u968f\u6642\u66f4\u65b0\u4e88\u5b9a\u3002\n\n\u898b\u308c\u3070\u308f\u304b\u308a\u307e\u3059\u304c\u3001\u5143\u30cd\u30bf\u306f\u307b\u307c\u3059\u3079\u3066 Stack Overflow \u3067\u3059\u3002\u82f1\u8a9e\u3060\u3051\u3060\u3068\u8aad\u3080\u306e\u304c\u8f9b\u3044\u3001\u3068\u3044\u3046\u65b9\u5411\u3051\uff08\u4e3b\u306b\u81ea\u5206\uff09\u306b\u307e\u3068\u3081\u3066\u3044\u307e\u3059\u3002\n\n\n# snake_case \u3067\u30d7\u30ed\u30d1\u30c6\u30a3\u3092\u8868\u73fe\u3057\u3066\u3044\u308b JSON \u3068 camelCase \u3067\u8868\u8a18\u3057\u3066\u3044\u308b POJO \u3092\u30de\u30c3\u30d4\u30f3\u30b0\u3057\u305f\u3044\n\n[java - Jackson overcoming underscores in favor of camel-case - Stack Overflow ](http://stackoverflow.com/a/11632040) \u3088\u308a\u3002\n\n\u5f15\u6570\u306b ~~`PropertyNamingStrategy.CAMEL_CASE_TO_LOWER_CASE_WITH_UNDERSCORES`~~ `PropertyNamingStrategy.SNAKE_CASE` \u3092\u6307\u5b9a\u3057\u3066\u3001 ``ObjectMapper#setPropertyNamingStrategy()`` \u3092\u547c\u3073\u51fa\u3059\u3068\u3001\u3053\u306e\u30de\u30c3\u30d4\u30f3\u30b0\u3092\u3059\u308b ``ObjectMapper`` \u3092\u5f97\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\n(2016-09-29 \u66f4\u65b0: `PropertyNamingStrategy.CAMEL_CASE_TO_LOWER_CASE_WITH_UNDERSCORES` \u306f deprecated \u306b\u306a\u308a\u307e\u3057\u305f\u3002\u4ee3\u308f\u308a\u306b `PropertyNamingStrategy.SNAKE_CASE` \u3092\u4f7f\u3046\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059)\n\n\u4ee5\u4e0b\u3001\u5229\u7528\u4f8b\u3067\u3059\u3002\n\n```java\n    public static class Hoge {\n        // \u3053\u306e\u30d5\u30a3\u30fc\u30eb\u30c9\u306f JSON \u306e \"hoge_fuga\" \u30d7\u30ed\u30d1\u30c6\u30a3\u306b\u5bfe\u5fdc\u3059\u308b\n        public String hogeFuga;\n    }\n\n    public static void snakeCaseJsonToCamelCasePojo() throws IOException {\n        ObjectMapper mapper = new ObjectMapper()\n                .setPropertyNamingStrategy(\n                        PropertyNamingStrategy.CAMEL_CASE_TO_LOWER_CASE_WITH_UNDERSCORES);\n\n        Hoge hogeObj = mapper.readValue(\"{\\\"hoge_fuga\\\": \\\"piyopiyo\\\"}\", Hoge.class);\n        System.out.println(hogeObj.hogeFuga);\n    }\n```\n\n# ObjectMapper#writeValue() \u306a\u3069\u3067\u51fa\u529b\u3055\u308c\u308b JSON \u3092\u6574\u5f62\uff06\u30a4\u30f3\u30c7\u30f3\u30c8 (pretty print) \u3057\u305f\u3044\n\n## \u66f8\u5f0f\u306f\u4f55\u3067\u3082\u3044\u3044\u306e\u3067\u3001\u3068\u306b\u304b\u304f\u304a\u624b\u8efd\u306b\u6574\u5f62\u3057\u305f\u3044\n\n[java - Pretty printing JSON from Jackson 2.2's ObjectMapper - Stack Overflow](http://stackoverflow.com/a/17617958) \u3088\u308a\u3002\n\n\u5f15\u6570\u306b ``SerializationFeature.INDENT_OUTPUT`` \u3092\u6307\u5b9a\u3057\u3066 ``ObjectMapper#enable()`` \u3092\u547c\u3073\u51fa\u3059\u3068\u3001pretty print \u3092\u6709\u52b9\u306b\u3057\u305f ``ObjectMapper`` \u3092\u5f97\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\n\u4ee5\u4e0b\u3001\u5229\u7528\u4f8b\u3067\u3059\u3002\n\n```java\n    public static class Fuga {\n        public List<String> strings = Arrays.asList(\"foo\", \"bar\", \"baz\");\n        public int number = 3;\n    }\n\n    public static void withPrettyPrint() throws JsonProcessingException {\n        ObjectMapper mapper = new ObjectMapper()\n                .enable(SerializationFeature.INDENT_OUTPUT);\n\n        String json = mapper.writeValueAsString(new Fuga());\n\n        System.out.println(json);\n    }\n```\n\n\u51fa\u529b\u7d50\u679c\u306f\u3053\u3093\u306a\u611f\u3058\u3002\u3053\u306e\u51fa\u529b\u7d50\u679c\u306f\u305d\u3046\u3067\u3082\u306a\u3044\u3067\u3059\u304c\u3001\u6a19\u6e96\u306e pretty printer \u306f\u30af\u30bb\u304c\u3042\u308b\u306e\u3067\u8981\u6ce8\u610f\u3067\u3059\u3002\n\n```json\n{\n  \"strings\" : [ \"foo\", \"bar\", \"baz\" ],\n  \"number\" : 3\n}\n```\n\n## \u66f8\u5f0f\u306f\u305d\u306e\u307e\u307e\u3067\u3044\u3044\u3051\u3069\u3001\u30a4\u30f3\u30c7\u30f3\u30c8\u6570\u306f 2 \u3064\u304b\u3089 4 \u3064\u306b\u5909\u66f4\u3057\u305f\u3044\n\n[java - Custom pretty printer using Jackson library - Stack Overflow](http://stackoverflow.com/a/18098787) \u3088\u308a\u3002\n\n``DefaultPrettyPrinter`` \u304c\u5229\u7528\u3057\u3066\u3044\u308b ``Indenter`` \u3092\u6a19\u6e96\u306e ``DefaultPrettyPrinter.Lf2SpacesIndenter `` \u304b\u3089\u72ec\u81ea\u306e\u3082\u306e\u306b\u5dee\u3057\u66ff\u3048\u3066\u3042\u3052\u308b\u3053\u3068\u3067\u5b9f\u73fe\u3067\u304d\u307e\u3059\u3002\n\n```java\n    /**\n     * \u30a4\u30f3\u30c7\u30f3\u30c8 4 \u3064\u306e Indenter \u5b9f\u88c5\u3067\u3059\u3002\n     */\n    public class Lf4SpacesIndenter extends DefaultPrettyPrinter.Lf2SpacesIndenter {\n        final static char[] LONG_SPACES = new char[64 * 2];\n        static {\n            Arrays.fill(LONG_SPACES, ' ');\n        }\n    \n        @Override\n        public void writeIndentation(JsonGenerator jg, int level) throws IOException, JsonGenerationException {\n            jg.writeRaw(_lf);\n            if (level > 0) {\n                int numSpaces = level * 4;\n                while (numSpaces > LONG_SPACES.length) {\n                    jg.writeRaw(LONG_SPACES, 0, LONG_SPACES.length);\n                    numSpaces -= LONG_SPACES.length;\n                }\n                jg.writeRaw(LONG_SPACES, 0, numSpaces);\n            }\n        }\n    }\n\n    public static class Fuga {\n        public List<String> strings = Arrays.asList(\"foo\", \"bar\", \"baz\");\n        public int number = 3;\n    }\n\n    public static void with4SpacesIndentation() throws JsonProcessingException {\n        ObjectMapper objectMapper = new ObjectMapper()\n                .enable(SerializationFeature.INDENT_OUTPUT);\n\n        String json = objectMapper\n                .writer(new DefaultPrettyPrinter()\n                        .withObjectIndenter(new Lf4SpacesIndenter()))\n                .writeValueAsString(new Fuga());\n\n        System.out.println(json);\n    }\n```\n\n## \u3084\u3063\u3071\u308a\u6a19\u6e96\u306e pretty printer \u306e\u66f8\u5f0f\u304c\u6c17\u6301\u3061\u60aa\u3044\u306e\u3067 JSON.stringify() \u307d\u304f\u3057\u305f\u3044\n\n\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u306f\u9577\u304f\u306a\u3063\u3066\u3057\u307e\u3063\u305f\u306e\u3067\u3001Gist \u306b\u6295\u7a3f\u3057\u307e\u3057\u305f\u3002\nhttps://gist.github.com/komiya-atsushi/832a97c84ccae7cdfc2a\n\n\u5b9f\u88c5\u306f\u975e\u5e38\u306b\u3060\u308b\u3044\u306e\u3067\u3059\u304c\u3001 ``com.fasterxml.jackson.core.PrettyPrinter`` \u3092\u5b9f\u88c5\u3057\u3066\u3057\u307e\u3048\u3070\u3060\u3044\u305f\u3044\u306a\u3093\u3067\u3082\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002\n\n\n# POJO \u306e null \u306a\u30d5\u30a3\u30fc\u30eb\u30c9\u306f\u51fa\u529b\u3057\u306a\u3044\u3067 JSON \u306b\u30b7\u30ea\u30a2\u30e9\u30a4\u30ba\u3057\u305f\u3044\n\n[java - How to tell Jackson to ignore a field during serialization if its value is null? - Stack Overflow](http://stackoverflow.com/questions/11757487/how-to-tell-jackson-to-ignore-a-field-during-serialization-if-its-value-is-null) \u3088\u308a\u3002\n\n\u5e7e\u3064\u304b\u65b9\u6cd5\u304c\u3042\u308a\u307e\u3059\u3002\n\n## \u305d\u306e 1 : ObjectMapper \u306b null \u306a\u30d5\u30a3\u30fc\u30eb\u30c9\u3092\u7121\u8996\u3055\u305b\u308b\u8a2d\u5b9a\u3092\u3059\u308b\n\nPOJO \u306e\u30af\u30e9\u30b9\u3092\u3044\u3058\u308a\u305f\u304f\u306a\u3044 (\u3044\u3058\u308c\u306a\u3044) \u5834\u5408\u306b\u6709\u52b9\u306a\u65b9\u6cd5\u3067\u3059\u3002\n\n\u5f15\u6570\u306b ``JsonInclude.Include.NON_NULL`` \u3092\u6307\u5b9a\u3057\u3066\u3001 ``ObjectMapper#setSerializationInclusion()`` \u3092\u547c\u3073\u51fa\u3059\u3053\u3068\u3067\u3001null \u306a\u30d5\u30a3\u30fc\u30eb\u30c9\u3092\u30b7\u30ea\u30a2\u30e9\u30a4\u30ba\u3057\u306a\u3044 ``ObjectMapper`` \u3092\u5f97\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\n```java\n    public static class Fuga {\n        public List<String> strings = null; // \u3053\u306e\u30d5\u30a3\u30fc\u30eb\u30c9\u306f\u30b7\u30ea\u30a2\u30e9\u30a4\u30ba\u3057\u3066\u6b32\u3057\u304f\u306a\u3044\n        public int number = 3;\n    }\n\n    public static void ignoreNullFieldByObjectMapper() throws JsonProcessingException {\n        ObjectMapper mapper = new ObjectMapper()\n                .setSerializationInclusion(JsonInclude.Include.NON_NULL);\n\n        String json = mapper.writeValueAsString(new Fuga());\n\n        System.out.println(json);\n    }\n```\n\n\u5b9f\u884c\u7d50\u679c\u306f\u3053\u3061\u3089\u3002\n\n```json\n{\"number\":3}\n```\n\n## \u305d\u306e 2 : POJO \u306b\u30a2\u30ce\u30c6\u30fc\u30b7\u30e7\u30f3\u3067\u3001null \u306a\u30d5\u30a3\u30fc\u30eb\u30c9\u306f\u30b7\u30ea\u30a2\u30e9\u30a4\u30ba\u4e0d\u8981\u3067\u3042\u308b\u65e8\u3092\u8868\u73fe\u3055\u305b\u308b\n\n``ObjectMapper`` \u304c\u3044\u308d\u3093\u306a\u3068\u3053\u308d\u3067\u4f7f\u308f\u308c\u3066\u3044\u3066\u3001\u305d\u306e 1 \u306e\u5bfe\u5fdc\u65b9\u6cd5\u3067\u306f\u5bfe\u51e6\u304c\u96e3\u3057\u3044\u30fb\u9762\u5012\u306a\u5834\u5408\u306b\u30aa\u30b9\u30b9\u30e1\u3067\u3059\u3002\n\n\u5bfe\u8c61\u306e POJO \u306e\u30af\u30e9\u30b9\u5ba3\u8a00\u306b\u3066\u3001\u30af\u30e9\u30b9\u306b\u5bfe\u3057\u3066 ``@JsonInclude(JsonInclude.Include.NON_NULL)`` \u306e\u30a2\u30ce\u30c6\u30fc\u30b7\u30e7\u30f3\u3092\u4ed8\u4e0e\u3057\u307e\u3059\u3002\n\n```java\n    @JsonInclude(JsonInclude.Include.NON_NULL)\n    public static class Fuga {\n        public List<String> strings = null; // \u3053\u306e\u30d5\u30a3\u30fc\u30eb\u30c9\u306f\u30b7\u30ea\u30a2\u30e9\u30a4\u30ba\u3057\u3066\u6b32\u3057\u304f\u306a\u3044\n        public int number = 3;\n    }\n\n    public static void ignoreNullFieldByAnnotation() throws JsonProcessingException {\n        ObjectMapper mapper = new ObjectMapper();\n\n        String json = mapper.writeValueAsString(new Fuga());\n\n        System.out.println(json);\n    }\n```\n\n# \u5217\u6319\u578b (enum) \u306e\u30d5\u30a3\u30fc\u30eb\u30c9\u3092\u3001\u6587\u5b57\u5217\u3067\u306f\u306a\u304f #ordinal() \u306a\u5024\u3067\u30b7\u30ea\u30a2\u30e9\u30a4\u30ba\u3057\u305f\u3044\n\n[``SerializationConfig.Feature.WRITE_ENUMS_USING_INDEX``](http://fasterxml.github.io/jackson-databind/javadoc/2.1.0/com/fasterxml/jackson/databind/SerializationFeature.html) \u3068 ``true`` \u3092\u6307\u5b9a\u3057\u3066\u3001 ``ObjectMapper#configure()`` \u3092\u547c\u3073\u51fa\u3057\u307e\u3059\u3002\n\n```java\n    public enum Gender {\n        MALE, FEMALE\n    }\n\n    public static void serializeUsingEnumOrdinal() throws IOException {\n        List<Gender> genders = Arrays.asList(Gender.FEMALE, Gender.MALE);\n\n        String json = new ObjectMapper()\n                .configure(SerializationConfig.Feature.WRITE_ENUMS_USING_INDEX, true)\n                .writeValueAsString(genders);\n\n        System.out.println(json);\n    }\n```\n\n", "tags": ["Java", "Jackson"]}