{"context": "Swift3\u3067Cocoa\u306b\u3088\u308b\u753b\u50cf\u30ea\u30b5\u30a4\u30ba\u306e\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u3002\n\u4ee5\u524d\u4f5c\u6210\u3057\u305f\u30b3\u30fc\u30c9\u304c3\u306b\u306a\u3063\u3066\u52d5\u304b\u306a\u304f\u306a\u3063\u3066\u3044\u305f\u306e\u3067\u30ea\u30d5\u30a1\u30af\u30bf\u3002\n#!/usr/bin/swift\n\n\nimport Cocoa\n\n\nclass fileMG {\n\n    var dir:  String\n    var file: String\n    var path: String\n    var extn: String\n    var name: String\n\n    init(p: String) {\n        let ns: NSString = p as NSString\n        path = p\n        file = ns.lastPathComponent\n        dir  = ns.deletingLastPathComponent\n        extn = ns.pathExtension\n        name = (file as NSString).deletingPathExtension\n        print(\"path : \\(path)\")\n        print(\"file : \\(file)\")\n        print(\"dir  : \\(dir)\")\n        print(\"extn : \\(extn)\")\n        print(\"name : \\(name)\")\n    }\n}\n\n\nclass imgMG: fileMG {\n\n    func resizeImg(w: Int, h: Int) -> String {\n\n        if let img: NSImage = NSImage(contentsOfFile: path) {\n\n            let orgBmpRep: NSBitmapImageRep = NSBitmapImageRep(data:img.tiffRepresentation!)!\n            let orgRef:    CGImage          = orgBmpRep.cgImage!\n            let orgW:      Int              = Int(orgRef.width)\n            let orgH:      Int              = Int(orgRef.height)\n\n            var resizeW: Int = 0, resizeH: Int = 0\n            if (orgW < orgH) {\n                resizeW  = w\n                resizeH = orgH * resizeW / orgW\n            } else {\n                resizeH = h\n                resizeW = orgW * resizeH / orgH\n            }\n            let resizeSize: NSSize = NSMakeSize(CGFloat(resizeW), CGFloat(resizeH))\n\n            let bitsPerComponent: Int          = 8\n            let bytesPerRow:      Int          = 4 * resizeW\n            let colorSpace:       CGColorSpace = CGColorSpaceCreateDeviceRGB()\n            let bitmapInfo:       UInt32       = CGImageAlphaInfo.premultipliedLast.rawValue\n\n            let bitmapContext: CGContext = CGContext(data: nil, width: resizeW, height: resizeH, bitsPerComponent: bitsPerComponent, bytesPerRow: bytesPerRow, space: colorSpace, bitmapInfo: UInt32(bitmapInfo))!\n\n            // \u5143\u753b\u50cf (image) \u3092\u30d3\u30c3\u30c8\u30de\u30c3\u30d7\u306b\u66f8\u304d\u51fa\u3057\u307e\u3059\u3002\n            let bitmapRect: CGRect = NSMakeRect(0.0, 0.0, resizeSize.width, resizeSize.height)\n            bitmapContext.draw(orgRef, in: bitmapRect)\n\n            // \u30d3\u30c3\u30c8\u30de\u30c3\u30d7\u3092 NSImage \u306b\u5909\u63db\u3057\u307e\u3059\u3002\n            let newImageRef: CGImage = bitmapContext.makeImage()!\n            let newImage:    NSImage = NSImage(cgImage: newImageRef, size: resizeSize)\n\n            // \u4fdd\u5b58\n            let newBmpRep:  NSBitmapImageRep    = NSBitmapImageRep(data:newImage.tiffRepresentation!)!\n            let imageProps: [String: AnyObject] = [ NSImageCompressionFactor as String: 1.0 as AnyObject ]\n            let newData:    NSData              = newBmpRep.representation(using: NSBitmapImageFileType.PNG, properties: imageProps)! as NSData\n            let newPath:    String              = \"\\(dir)/\\(name)_\\(w).\\(extn)\"\n            newData.write(toFile: newPath, atomically: true)\n            return \"finish!!\\n\\(newPath)\"\n        } else {\n            return \"not file : \" + path\n\n        }\n    }\n}\n\n\n///\n/// \u5f15\u6570\u53d6\u5f97\n///\nif (CommandLine.arguments.count <= 1) {\n    print(\"\u753b\u50cf\u30d5\u30a1\u30a4\u30eb\u3092\u6307\u5b9a\u3057\u3066\u304f\u3060\u3055\u3044\")\n    exit(0)\n}\nvar imgResize = imgMG(p: String(CommandLine.arguments[1]))\n///\n/// 3\u7a2e\u985e\u306e\u753b\u50cf\u51fa\u529b\n///\nprint(imgResize.resizeImg(w:  50, h:  50))\nprint(imgResize.resizeImg(w: 100, h: 100))\nprint(imgResize.resizeImg(w: 300, h: 300))\n\nSwift3\u3067Cocoa\u306b\u3088\u308b\u753b\u50cf\u30ea\u30b5\u30a4\u30ba\u306e\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u3002\n\n\u4ee5\u524d\u4f5c\u6210\u3057\u305f\u30b3\u30fc\u30c9\u304c3\u306b\u306a\u3063\u3066\u52d5\u304b\u306a\u304f\u306a\u3063\u3066\u3044\u305f\u306e\u3067\u30ea\u30d5\u30a1\u30af\u30bf\u3002\n\n\n```swift\n#!/usr/bin/swift\n\n\nimport Cocoa\n\n\nclass fileMG {\n\n    var dir:  String\n    var file: String\n    var path: String\n    var extn: String\n    var name: String\n\n    init(p: String) {\n        let ns: NSString = p as NSString\n        path = p\n        file = ns.lastPathComponent\n        dir  = ns.deletingLastPathComponent\n        extn = ns.pathExtension\n        name = (file as NSString).deletingPathExtension\n        print(\"path : \\(path)\")\n        print(\"file : \\(file)\")\n        print(\"dir  : \\(dir)\")\n        print(\"extn : \\(extn)\")\n        print(\"name : \\(name)\")\n    }\n}\n\n\nclass imgMG: fileMG {\n\n    func resizeImg(w: Int, h: Int) -> String {\n\n        if let img: NSImage = NSImage(contentsOfFile: path) {\n\n            let orgBmpRep: NSBitmapImageRep = NSBitmapImageRep(data:img.tiffRepresentation!)!\n            let orgRef:    CGImage          = orgBmpRep.cgImage!\n            let orgW:      Int              = Int(orgRef.width)\n            let orgH:      Int              = Int(orgRef.height)\n\n            var resizeW: Int = 0, resizeH: Int = 0\n            if (orgW < orgH) {\n                resizeW  = w\n                resizeH = orgH * resizeW / orgW\n            } else {\n                resizeH = h\n                resizeW = orgW * resizeH / orgH\n            }\n            let resizeSize: NSSize = NSMakeSize(CGFloat(resizeW), CGFloat(resizeH))\n\n            let bitsPerComponent: Int          = 8\n            let bytesPerRow:      Int          = 4 * resizeW\n            let colorSpace:       CGColorSpace = CGColorSpaceCreateDeviceRGB()\n            let bitmapInfo:       UInt32       = CGImageAlphaInfo.premultipliedLast.rawValue\n\n            let bitmapContext: CGContext = CGContext(data: nil, width: resizeW, height: resizeH, bitsPerComponent: bitsPerComponent, bytesPerRow: bytesPerRow, space: colorSpace, bitmapInfo: UInt32(bitmapInfo))!\n\n            // \u5143\u753b\u50cf (image) \u3092\u30d3\u30c3\u30c8\u30de\u30c3\u30d7\u306b\u66f8\u304d\u51fa\u3057\u307e\u3059\u3002\n            let bitmapRect: CGRect = NSMakeRect(0.0, 0.0, resizeSize.width, resizeSize.height)\n            bitmapContext.draw(orgRef, in: bitmapRect)\n\n            // \u30d3\u30c3\u30c8\u30de\u30c3\u30d7\u3092 NSImage \u306b\u5909\u63db\u3057\u307e\u3059\u3002\n            let newImageRef: CGImage = bitmapContext.makeImage()!\n            let newImage:    NSImage = NSImage(cgImage: newImageRef, size: resizeSize)\n\n            // \u4fdd\u5b58\n            let newBmpRep:  NSBitmapImageRep    = NSBitmapImageRep(data:newImage.tiffRepresentation!)!\n            let imageProps: [String: AnyObject] = [ NSImageCompressionFactor as String: 1.0 as AnyObject ]\n            let newData:    NSData              = newBmpRep.representation(using: NSBitmapImageFileType.PNG, properties: imageProps)! as NSData\n            let newPath:    String              = \"\\(dir)/\\(name)_\\(w).\\(extn)\"\n            newData.write(toFile: newPath, atomically: true)\n            return \"finish!!\\n\\(newPath)\"\n        } else {\n            return \"not file : \" + path\n\n        }\n    }\n}\n\n\n///\n/// \u5f15\u6570\u53d6\u5f97\n///\nif (CommandLine.arguments.count <= 1) {\n    print(\"\u753b\u50cf\u30d5\u30a1\u30a4\u30eb\u3092\u6307\u5b9a\u3057\u3066\u304f\u3060\u3055\u3044\")\n    exit(0)\n}\nvar imgResize = imgMG(p: String(CommandLine.arguments[1]))\n///\n/// 3\u7a2e\u985e\u306e\u753b\u50cf\u51fa\u529b\n///\nprint(imgResize.resizeImg(w:  50, h:  50))\nprint(imgResize.resizeImg(w: 100, h: 100))\nprint(imgResize.resizeImg(w: 300, h: 300))\n```\n\n", "tags": ["swift3", "Cocoa"]}