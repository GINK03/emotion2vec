{"context": "http://qiita.com/BinBin/items/a646812bcf20fe68595e \u3067\nSpark\u306eDataset\u3092\u4f5c\u6210\u3057\u3066\u307f\u305f\u306e\u3067\uff0c\u3053\u3053\u3067\u306fDataset\u3067\u306e\u30c7\u30fc\u30bf\u64cd\u4f5c\u3092\u3057\u3066\u307f\u308b\u3002\n\n\u74b0\u5883\n[OS]\uff1aCentOS 7\n[Apache Spark]\uff1a2.1.0\n\nDataset\u3067\u30c7\u30fc\u30bf\u64cd\u4f5c\n\u4e0b\u8a18\u306b\uff0cDataset\u306e\u95a2\u6570\u3084SparkSQL\u304c\u63d0\u4f9b\u3059\u308b\u95a2\u6570(org.apache.spark.sql.functions.*)\u3092\u7528\u3044\u3066\uff0c\nDataset\u306e\u30c7\u30fc\u30bf\u64cd\u4f5c\u3092\u3057\u305f\u969b\u306eJava\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u8a18\u8f09\u3059\u308b\u3002\n\nDatasetConversionTest\u30af\u30e9\u30b9\npackage com.binbin.spark;\n\nimport static org.apache.spark.sql.functions.*;\n\nimport org.apache.spark.sql.Dataset;\nimport org.apache.spark.sql.Encoders;\nimport org.apache.spark.sql.Row;\nimport org.apache.spark.sql.SQLContext;\nimport org.apache.spark.sql.SparkSession;\n\npublic class DatasetConversionTest {\n    public static void main(String args[]){\n\n        // \u30a8\u30f3\u30c8\u30ea\u30fc\u30dd\u30a4\u30f3\u30c8\n        SparkSession ss = SparkSession.builder().master(\"local\").appName(\"DatasetTest\").getOrCreate();\n        SQLContext sqlc = new SQLContext(ss);\n\n        // Spark-Csv\u3092\u4f7f\u7528\u3057\u3066DataFrame\u3092\u4f5c\u6210\n        Dataset<Row> dfData1 = sqlc.read()\n        .format(\"com.databricks.spark.csv\")\n        .option(\"header\", \"true\")\n        .option(\"inferSchema\", \"true\")\n        .load(\"testdata1.csv\");\n\n        Dataset<Row> dfData2 = sqlc.read()\n        .format(\"com.databricks.spark.csv\")\n        .option(\"header\", \"true\")\n        .option(\"inferSchema\", \"true\")\n        .load(\"testdata2.csv\");\n\n        // dfData1.show()\u306e\u7d50\u679c\n        // +------+---+------+-------+--------------------+\n        // |  name|age|gender|married|            birthday|\n        // +------+---+------+-------+--------------------+\n        // | Aaron| 22|  male|   true|1994-04-17 21:00:...|\n        // |   Ray| 51|  male|   true|1965-06-11 11:30:...|\n        // | Barry| 33|  male|  false|1983-02-17 11:00:...|\n        // | Paula| 19|female|  false|1997-08-17 09:30:...|\n        // |Melvin| 21|  male|  false|1995-04-02 13:15:...|\n        // +------+---+------+-------+--------------------+\n        dfData1.show();\n\n        // dfData1.printSchema\u306e\u7d50\u679c\n        // root\n        //  |-- name: string (nullable = true)\n        //  |-- age: integer (nullable = true)\n        //  |-- gender: string (nullable = true)\n        //  |-- married: boolean (nullable = true)\n        //  |-- birthday: timestamp (nullable = true)\n        dfData1.printSchema();\n\n        // dfData2.show()\u306e\u7d50\u679c\n        // +------+---+------+-------+--------------------+\n        // |  name|age|gender|married|            birthday|\n        // +------+---+------+-------+--------------------+\n        // |Sherry| 44|female|   true|1972-06-19 01:00:...|\n        // |   Zoe| 22|female|  false|1994-03-09 13:00:...|\n        // | Sammy| 25|  male|   true|1991-05-07 23:30:...|\n        // |Connie| 37|female|  false|1979-03-09 03:15:...|\n        // | Agnes| 28|female|   true|1988-10-06 17:45:...|\n        // +------+---+------+-------+--------------------+\n        dfData2.show();\n\n        // dfData2.printSchema\u306e\u7d50\u679c\n        // root\n        //  |-- name: string (nullable = true)\n        //  |-- age: integer (nullable = true)\n        //  |-- gender: string (nullable = true)\n        //  |-- married: boolean (nullable = true)\n        //  |-- birthday: timestamp (nullable = true)\n        dfData2.printSchema();\n\n        // Dataset\u306b\u5909\u63db!\n        Dataset<Person> dsData1 = dfData1.as(Encoders.bean(Person.class));\n        Dataset<Person> dsData2 = dfData2.as(Encoders.bean(Person.class));\n\n\n        // \u2605\u3053\u3053\u304b\u3089Dataset\u306e\u30c7\u30fc\u30bf\u64cd\u4f5c\u3092\u884c\u3046!\u2605\n\n        // \u2460dsData1\u3068dsData2\u306e\u30c7\u30fc\u30bf\u3092\u7e26\u306b\u7d50\u5408\u3059\u308b\n        Dataset<Person> dsData1And2 = dsData1.union(dsData2);\n\n        // dsData1And2.show()\u306e\u7d50\u679c\n        // +------+---+------+-------+--------------------+\n        // |  name|age|gender|married|            birthday|\n        // +------+---+------+-------+--------------------+\n        // | Aaron| 22|  male|   true|1994-04-17 21:00:...|\n        // |   Ray| 51|  male|   true|1965-06-11 11:30:...|\n        // | Barry| 33|  male|  false|1983-02-17 11:00:...|\n        // | Paula| 19|female|  false|1997-08-17 09:30:...|\n        // |Melvin| 21|  male|  false|1995-04-02 13:15:...|\n        // |Sherry| 44|female|   true|1972-06-19 01:00:...|\n        // |   Zoe| 22|female|  false|1994-03-09 13:00:...|\n        // | Sammy| 25|  male|   true|1991-05-07 23:30:...|\n        // |Connie| 37|female|  false|1979-03-09 03:15:...|\n        // | Agnes| 28|female|   true|1988-10-06 17:45:...|\n        // +------+---+------+-------+--------------------+\n        dsData1And2.show();\n\n\n        // \u2461age\u304c25\u4ee5\u4e0a\u306e\u884c\u306e\u307f\u62bd\u51fa\n        Dataset<Person> dsDataAgeOver25 = dsData1And2.filter( p -> {\n            int age = p.getAge();\n            return age >= 25 ;\n        });\n\n        // dsDataAgeOver25.show()\u306e\u7d50\u679c\n        // +------+---+------+-------+--------------------+\n        // |  name|age|gender|married|            birthday|\n        // +------+---+------+-------+--------------------+\n        // |   Ray| 51|  male|   true|1965-06-11 11:30:...|\n        // | Barry| 33|  male|  false|1983-02-17 11:00:...|\n        // |Sherry| 44|female|   true|1972-06-19 01:00:...|\n        // | Sammy| 25|  male|   true|1991-05-07 23:30:...|\n        // |Connie| 37|female|  false|1979-03-09 03:15:...|\n        // | Agnes| 28|female|   true|1988-10-06 17:45:...|\n        // +------+---+------+-------+--------------------+\n        dsDataAgeOver25.show();\n\n        // \u2462\u5168\u54e1\u306eage\u306b10\u3092\u8db3\u3059\n        Dataset<Person> dsDataAgePlus10 = dsData1And2.map( p -> {\n            int age = p.getAge() +10;\n            p.setAge(age);\n            return p;\n        }, Encoders.bean(Person.class));\n\n        // dsDataAgePlus10.show()\u306e\u7d50\u679c\n        // \u30ab\u30e9\u30e0\u306e\u5024\u306b\u5909\u66f4\u304c\u5165\u3063\u305f\u305f\u3081\uff0c\u30ab\u30e9\u30e0\u306e\u9806\u756a\u304c\u304b\u308f\u3063\u305f\uff1f\n        // +---+--------------------+------+-------+------+\n        // |age|            birthday|gender|married|  name|\n        // +---+--------------------+------+-------+------+\n        // | 32|1994-04-17 21:00:...|  male|   true| Aaron|\n        // | 61|1965-06-11 11:30:...|  male|   true|   Ray|\n        // | 43|1983-02-17 11:00:...|  male|  false| Barry|\n        // | 29|1997-08-17 09:30:...|female|  false| Paula|\n        // | 31|1995-04-02 13:15:...|  male|  false|Melvin|\n        // | 54|1972-06-19 01:00:...|female|   true|Sherry|\n        // | 32|1994-03-09 13:00:...|female|  false|   Zoe|\n        // | 35|1991-05-07 23:30:...|  male|   true| Sammy|\n        // | 47|1979-03-09 03:15:...|female|  false|Connie|\n        // | 38|1988-10-06 17:45:...|female|   true| Agnes|\n        // +---+--------------------+------+-------+------+\n        dsDataAgePlus10.show();\n\n        // \u2463\u6027\u5225\u5225\u306e\u5e73\u5747\u5e74\u9f62\u3092\u51fa\u3059\n        // +------+--------+\n        // |gender|avg(age)|\n        // +------+--------+\n        // |female|    30.0|\n        // |  male|    30.4|\n        // +------+--------+\n        dsData1And2.groupBy(col(\"gender\")).agg(avg(\"age\")).show();\n    }\n}\n\n\n\nPerson\u30af\u30e9\u30b9\npackage com.binbin.spark;\nimport java.io.Serializable;\nimport java.sql.Timestamp;\npublic class Person implements Serializable {\n    private String name;\n    private int age;\n    private String gender;\n    private boolean married;\n    private Timestamp birthday;\n\n    public String getName() {\n        return name;\n    }\n    public void setName(String name) {\n        this.name = name;\n    }\n    public int getAge() {\n        return age;\n    }\n    public void setAge(int age) {\n        this.age = age;\n    }\n    public String getGender() {\n        return gender;\n    }\n    public void setGender(String gender) {\n        this.gender = gender;\n    }\n    public boolean getMarried() {\n        return married;\n    }\n    public void setMarried(boolean married) {\n        this.married = married;\n    }\n    public Timestamp getBirthday() {\n        return birthday;\n    }\n    public void setBirthday(Timestamp birthday) {\n        this.birthday = birthday;\n    }\n}\n\n\n\u305f\u3057\u304b\u306b\uff0cDataFrame\u306e\u6642\u3088\u308a\u306f\u30c7\u30fc\u30bf\u64cd\u4f5c\u3057\u3084\u3059\u3044\u6c17\u304c\u3059\u308b\u3002\nDataset<T>\u3092\u4f5c\u6210\u3059\u308b\u307e\u3067\u3082\u306a\u3044\u5834\u5408\u306f\uff0cDataset<Row>\u306e\u307e\u307e\u30c7\u30fc\u30bf\u3092\u6271\u3063\u3066\u3082\u3088\u3044\u6c17\u304c\u3059\u308b\u3002\nhttp://qiita.com/BinBin/items/a646812bcf20fe68595e \u3067\nSpark\u306eDataset\u3092\u4f5c\u6210\u3057\u3066\u307f\u305f\u306e\u3067\uff0c\u3053\u3053\u3067\u306fDataset\u3067\u306e\u30c7\u30fc\u30bf\u64cd\u4f5c\u3092\u3057\u3066\u307f\u308b\u3002\n\n#\u74b0\u5883\n**[OS]**\uff1aCentOS 7\n**[Apache Spark]**\uff1a2.1.0\n\n#Dataset\u3067\u30c7\u30fc\u30bf\u64cd\u4f5c\n\u4e0b\u8a18\u306b\uff0cDataset<Row>\u306e\u95a2\u6570\u3084SparkSQL\u304c\u63d0\u4f9b\u3059\u308b\u95a2\u6570(org.apache.spark.sql.functions.*)\u3092\u7528\u3044\u3066\uff0c\nDataset\u306e\u30c7\u30fc\u30bf\u64cd\u4f5c\u3092\u3057\u305f\u969b\u306eJava\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u8a18\u8f09\u3059\u308b\u3002\n\n```java:DatasetConversionTest\u30af\u30e9\u30b9\npackage com.binbin.spark;\n\nimport static org.apache.spark.sql.functions.*;\n\nimport org.apache.spark.sql.Dataset;\nimport org.apache.spark.sql.Encoders;\nimport org.apache.spark.sql.Row;\nimport org.apache.spark.sql.SQLContext;\nimport org.apache.spark.sql.SparkSession;\n\npublic class DatasetConversionTest {\n\tpublic static void main(String args[]){\n\n\t\t// \u30a8\u30f3\u30c8\u30ea\u30fc\u30dd\u30a4\u30f3\u30c8\n\t\tSparkSession ss = SparkSession.builder().master(\"local\").appName(\"DatasetTest\").getOrCreate();\n\t\tSQLContext sqlc = new SQLContext(ss);\n\n\t\t// Spark-Csv\u3092\u4f7f\u7528\u3057\u3066DataFrame\u3092\u4f5c\u6210\n\t\tDataset<Row> dfData1 = sqlc.read()\n\t    .format(\"com.databricks.spark.csv\")\n\t    .option(\"header\", \"true\")\n\t    .option(\"inferSchema\", \"true\")\n\t    .load(\"testdata1.csv\");\n\n\t\tDataset<Row> dfData2 = sqlc.read()\n\t    .format(\"com.databricks.spark.csv\")\n\t    .option(\"header\", \"true\")\n\t    .option(\"inferSchema\", \"true\")\n\t    .load(\"testdata2.csv\");\n\n\t\t// dfData1.show()\u306e\u7d50\u679c\n\t\t// +------+---+------+-------+--------------------+\n\t\t// |  name|age|gender|married|            birthday|\n\t\t// +------+---+------+-------+--------------------+\n\t\t// | Aaron| 22|  male|   true|1994-04-17 21:00:...|\n\t\t// |   Ray| 51|  male|   true|1965-06-11 11:30:...|\n\t\t// | Barry| 33|  male|  false|1983-02-17 11:00:...|\n\t\t// | Paula| 19|female|  false|1997-08-17 09:30:...|\n\t\t// |Melvin| 21|  male|  false|1995-04-02 13:15:...|\n\t\t// +------+---+------+-------+--------------------+\n\t\tdfData1.show();\n\n\t\t// dfData1.printSchema\u306e\u7d50\u679c\n\t\t// root\n\t\t//  |-- name: string (nullable = true)\n\t\t//  |-- age: integer (nullable = true)\n\t\t//  |-- gender: string (nullable = true)\n\t\t//  |-- married: boolean (nullable = true)\n\t\t//  |-- birthday: timestamp (nullable = true)\n\t\tdfData1.printSchema();\n\n\t\t// dfData2.show()\u306e\u7d50\u679c\n\t\t// +------+---+------+-------+--------------------+\n\t\t// |  name|age|gender|married|            birthday|\n\t\t// +------+---+------+-------+--------------------+\n\t\t// |Sherry| 44|female|   true|1972-06-19 01:00:...|\n\t\t// |   Zoe| 22|female|  false|1994-03-09 13:00:...|\n\t\t// | Sammy| 25|  male|   true|1991-05-07 23:30:...|\n\t\t// |Connie| 37|female|  false|1979-03-09 03:15:...|\n\t\t// | Agnes| 28|female|   true|1988-10-06 17:45:...|\n\t\t// +------+---+------+-------+--------------------+\n\t\tdfData2.show();\n\n\t\t// dfData2.printSchema\u306e\u7d50\u679c\n\t\t// root\n\t\t//  |-- name: string (nullable = true)\n\t\t//  |-- age: integer (nullable = true)\n\t\t//  |-- gender: string (nullable = true)\n\t\t//  |-- married: boolean (nullable = true)\n\t\t//  |-- birthday: timestamp (nullable = true)\n\t\tdfData2.printSchema();\n\n\t\t// Dataset\u306b\u5909\u63db!\n\t\tDataset<Person> dsData1 = dfData1.as(Encoders.bean(Person.class));\n\t\tDataset<Person> dsData2 = dfData2.as(Encoders.bean(Person.class));\n\n\n\t\t// \u2605\u3053\u3053\u304b\u3089Dataset\u306e\u30c7\u30fc\u30bf\u64cd\u4f5c\u3092\u884c\u3046!\u2605\n\n\t\t// \u2460dsData1\u3068dsData2\u306e\u30c7\u30fc\u30bf\u3092\u7e26\u306b\u7d50\u5408\u3059\u308b\n\t\tDataset<Person> dsData1And2 = dsData1.union(dsData2);\n\n\t\t// dsData1And2.show()\u306e\u7d50\u679c\n\t\t// +------+---+------+-------+--------------------+\n\t\t// |  name|age|gender|married|            birthday|\n\t\t// +------+---+------+-------+--------------------+\n\t\t// | Aaron| 22|  male|   true|1994-04-17 21:00:...|\n\t\t// |   Ray| 51|  male|   true|1965-06-11 11:30:...|\n\t\t// | Barry| 33|  male|  false|1983-02-17 11:00:...|\n\t\t// | Paula| 19|female|  false|1997-08-17 09:30:...|\n\t\t// |Melvin| 21|  male|  false|1995-04-02 13:15:...|\n\t\t// |Sherry| 44|female|   true|1972-06-19 01:00:...|\n\t\t// |   Zoe| 22|female|  false|1994-03-09 13:00:...|\n\t\t// | Sammy| 25|  male|   true|1991-05-07 23:30:...|\n\t\t// |Connie| 37|female|  false|1979-03-09 03:15:...|\n\t\t// | Agnes| 28|female|   true|1988-10-06 17:45:...|\n\t\t// +------+---+------+-------+--------------------+\n\t\tdsData1And2.show();\n\n\n\t\t// \u2461age\u304c25\u4ee5\u4e0a\u306e\u884c\u306e\u307f\u62bd\u51fa\n\t\tDataset<Person> dsDataAgeOver25 = dsData1And2.filter( p -> {\n\t\t\tint age = p.getAge();\n\t\t\treturn age >= 25 ;\n\t\t});\n\n\t\t// dsDataAgeOver25.show()\u306e\u7d50\u679c\n\t\t// +------+---+------+-------+--------------------+\n\t\t// |  name|age|gender|married|            birthday|\n\t\t// +------+---+------+-------+--------------------+\n\t\t// |   Ray| 51|  male|   true|1965-06-11 11:30:...|\n\t\t// | Barry| 33|  male|  false|1983-02-17 11:00:...|\n\t\t// |Sherry| 44|female|   true|1972-06-19 01:00:...|\n\t\t// | Sammy| 25|  male|   true|1991-05-07 23:30:...|\n\t\t// |Connie| 37|female|  false|1979-03-09 03:15:...|\n\t\t// | Agnes| 28|female|   true|1988-10-06 17:45:...|\n\t\t// +------+---+------+-------+--------------------+\n\t\tdsDataAgeOver25.show();\n\n\t\t// \u2462\u5168\u54e1\u306eage\u306b10\u3092\u8db3\u3059\n\t\tDataset<Person> dsDataAgePlus10 = dsData1And2.map( p -> {\n\t\t\tint age = p.getAge() +10;\n\t\t\tp.setAge(age);\n\t\t\treturn p;\n\t\t}, Encoders.bean(Person.class));\n\n\t\t// dsDataAgePlus10.show()\u306e\u7d50\u679c\n\t\t// \u30ab\u30e9\u30e0\u306e\u5024\u306b\u5909\u66f4\u304c\u5165\u3063\u305f\u305f\u3081\uff0c\u30ab\u30e9\u30e0\u306e\u9806\u756a\u304c\u304b\u308f\u3063\u305f\uff1f\n\t\t// +---+--------------------+------+-------+------+\n\t\t// |age|            birthday|gender|married|  name|\n\t\t// +---+--------------------+------+-------+------+\n\t\t// | 32|1994-04-17 21:00:...|  male|   true| Aaron|\n\t\t// | 61|1965-06-11 11:30:...|  male|   true|   Ray|\n\t\t// | 43|1983-02-17 11:00:...|  male|  false| Barry|\n\t\t// | 29|1997-08-17 09:30:...|female|  false| Paula|\n\t\t// | 31|1995-04-02 13:15:...|  male|  false|Melvin|\n\t\t// | 54|1972-06-19 01:00:...|female|   true|Sherry|\n\t\t// | 32|1994-03-09 13:00:...|female|  false|   Zoe|\n\t\t// | 35|1991-05-07 23:30:...|  male|   true| Sammy|\n\t\t// | 47|1979-03-09 03:15:...|female|  false|Connie|\n\t\t// | 38|1988-10-06 17:45:...|female|   true| Agnes|\n\t\t// +---+--------------------+------+-------+------+\n\t\tdsDataAgePlus10.show();\n\n\t\t// \u2463\u6027\u5225\u5225\u306e\u5e73\u5747\u5e74\u9f62\u3092\u51fa\u3059\n\t\t// +------+--------+\n\t\t// |gender|avg(age)|\n\t\t// +------+--------+\n\t\t// |female|    30.0|\n\t\t// |  male|    30.4|\n\t\t// +------+--------+\n\t\tdsData1And2.groupBy(col(\"gender\")).agg(avg(\"age\")).show();\n\t}\n}\n```\n\n```java:Person\u30af\u30e9\u30b9\npackage com.binbin.spark;\nimport java.io.Serializable;\nimport java.sql.Timestamp;\npublic class Person implements Serializable {\n\tprivate String name;\n\tprivate int age;\n\tprivate String gender;\n\tprivate boolean married;\n\tprivate Timestamp birthday;\n\n\tpublic String getName() {\n\t\treturn name;\n\t}\n\tpublic void setName(String name) {\n\t\tthis.name = name;\n\t}\n\tpublic int getAge() {\n\t\treturn age;\n\t}\n\tpublic void setAge(int age) {\n\t\tthis.age = age;\n\t}\n\tpublic String getGender() {\n\t\treturn gender;\n\t}\n\tpublic void setGender(String gender) {\n\t\tthis.gender = gender;\n\t}\n\tpublic boolean getMarried() {\n\t\treturn married;\n\t}\n\tpublic void setMarried(boolean married) {\n\t\tthis.married = married;\n\t}\n\tpublic Timestamp getBirthday() {\n\t\treturn birthday;\n\t}\n\tpublic void setBirthday(Timestamp birthday) {\n\t\tthis.birthday = birthday;\n\t}\n}\n```\n\n\u305f\u3057\u304b\u306b\uff0cDataFrame\u306e\u6642\u3088\u308a\u306f\u30c7\u30fc\u30bf\u64cd\u4f5c\u3057\u3084\u3059\u3044\u6c17\u304c\u3059\u308b\u3002\nDataset\\<T\\>\u3092\u4f5c\u6210\u3059\u308b\u307e\u3067\u3082\u306a\u3044\u5834\u5408\u306f\uff0cDataset\\<Row\\>\u306e\u307e\u307e\u30c7\u30fc\u30bf\u3092\u6271\u3063\u3066\u3082\u3088\u3044\u6c17\u304c\u3059\u308b\u3002\n\n\n", "tags": ["Java", "Dataset", "ApacheSpark", "Spark"]}