{"context": " More than 1 year has passed since last update.\n\n\u8fd1\u6cc1\n\u98f2\u3093\u3067\u5e30\u3063\u3066\u304d\u3066\u3001\u6c17\u3065\u3044\u305f\u3089\u3053\u3093\u306a\u306e\u66f8\u3044\u3066\u3044\u307e\u3057\u305f\u3002\n\u3061\u3087\u3063\u3068\u5177\u4f53\u6027\u306b\u4e4f\u3057\u3044\u306e\u3067\u3001\u3082\u3046\u5c11\u3057\u5f8c\u3067\u30d1\u30c3\u30c1\u3092\u66f8\u304d\u307e\u3059\u3002\n(\u3067\u3082\u3001\u660e\u65e5\u306f\u4f1a\u793e\u306e\u6b53\u8fce\u4f1a\u3067\u98f2\u3093\u3067\u304f\u308b\u306e\u3060)\n\n\u524d\u56de\u306e\u3042\u3089\u307e\u3057\u3068\u4eca\u56de\u898b\u308b\u3068\u3053\u308d\n\u524d\u56de\u3001\u4eee\u60f3\u30a2\u30c9\u30ec\u30b9\u3068\u7269\u7406\u30a2\u30c9\u30ec\u30b9\u306e\u7d10\u4ed8\u3051\u3092\u3059\u308b\u51e6\u7406\u3068\u305d\u306e\u30c7\u30fc\u30bf\u69cb\u9020\u306e\u30da\u30fc\u30b8\u30c6\u30fc\u30d6\u30eb\u3092\u898b\u307e\u3057\u305f\u3002\n\u305d\u3057\u3066\u3001\u4eca\u56de\u306f\u30e6\u30fc\u30b6\u7a7a\u9593\u3078\u306e\u30a2\u30c9\u30ec\u30b9\u7a7a\u9593\u30de\u30c3\u30d7\u3092\u884c\u3046mmap()\u3092\u898b\u308b\u3053\u3068\u3067\u3001\u4eee\u60f3\u30a2\u30c9\u30ec\u30b9\u7a7a\u9593\u306e\u6271\u3044\u306e\u4e00\u7aef\u3092\u304b\u3044\u307e\u898b\u3066\u307f\u307e\u3057\u3087\u3046\u3002\n\nmmap\u306e\u5b9f\u88c5\nmmap\u306f\u4ee5\u4e0b\u306e\u5b9f\u88c5\u3067\u3042\u308b\u3002\n(\u53b3\u5bc6\u306b\u8a00\u3046\u3068\u3001\u30b7\u30b9\u30c6\u30e0\u30b3\u30fc\u30eb\u306e\u30d9\u30af\u30bf\u3067\u306f\u306a\u3044\u306e\u3067\u300c\u30b7\u30b9\u30c6\u30e0\u30b3\u30fc\u30eb\u306e\u958b\u59cb\u5730\u70b9\u300d\u3067\u306f\u306a\u3044)\n\narch/x86/ia32/sys_ia32.c\nasmlinkage long sys32_mmap(struct mmap_arg_struct32 __user *arg)\n{\n  struct mmap_arg_struct32 a;\n\n  if (copy_from_user(&a, arg, sizeof(a)))\n    return -EFAULT;\n\n  if (a.offset & ~PAGE_MASK)\n    return -EINVAL;\n\n  return sys_mmap_pgoff(a.addr, a.len, a.prot, a.flags, a.fd,\n             a.offset>>PAGE_SHIFT);\n}\n\n\n\u5b9f\u969b\u306e\u51e6\u7406\u306fsys_mmap_pgoff()\u306e\u3088\u3046\u306a\u306e\u3067\u3001\u3053\u308c\u3092\u898b\u308b\u3002\n\nmm/mmap.c\nSYSCALL_DEFINE6(mmap_pgoff, unsigned long, addr, unsigned long, len,\n    unsigned long, prot, unsigned long, flags,\n    unsigned long, fd, unsigned long, pgoff)\n{\n  struct file *file = NULL;\n  unsigned long retval = -EBADF;\n\n  if (!(flags & MAP_ANONYMOUS)) {\n  /* \n   * \u3053\u3053\u306f\u8981\u3059\u308b\u306b\u3001file\u69cb\u9020\u4f53\u3092\u53d6\u5f97\u3057\u305f\u308a\u3068\u30d0\u30c3\u30ad\u30f3\u30b0\u30b9\u30c8\u30a2\n   * \u3068\u306a\u308b\u30d5\u30a1\u30a4\u30eb\u3092\u6271\u3046\u305f\u3081\u306e\u30c7\u30fc\u30bf\u3092\u6e96\u5099\u3059\u308b\u306e\u304c\u4e3b\n   * \u3088\u3063\u3066\u3001\u7565 \n   */\n  } else if (flags & MAP_HUGETLB) {\n  /* \u672c\u5f53\u306f\u9762\u767d\u305d\u3046\u306a\u3068\u3053\u308d\u3060\u3051\u308c\u3069\u3001\u6982\u8981\u3092\u3064\u304b\u3080\u3053\u3068\u3092\u512a\u5148\u3059\u308b\u305f\u3081\u7565 */\n  }   \n\n  flags &= ~(MAP_EXECUTABLE | MAP_DENYWRITE);\n\n  retval = vm_mmap_pgoff(file, addr, len, prot, flags, pgoff);\nout_fput:\n  if (file)\n    fput(file);\nout:\n  return retval;\n}\n\n\n\u898b\u305f\u3068\u304a\u308a\u3001vm_mmap_pgoff()\u3092\u547c\u3093\u3067\u3044\u308b\u3002\nvm_mmap_pgoff()\u306f\u4e8b\u5b9f\u4e0a\u3001do_mmap_pgoff()\u3092\u547c\u3076\u3060\u3051\u306a\u306e\u3067\u305d\u3061\u3089\u3092\u898b\u308b\u3002\n\nmm/mmap.c\nunsigned long do_mmap_pgoff(struct file *file, unsigned long addr,\n      unsigned long len, unsigned long prot,\n      unsigned long flags, unsigned long pgoff,\n      unsigned long *populate)\n{\n  struct mm_struct * mm = current->mm;\n  vm_flags_t vm_flags;\n\n  /* \u7565 */\n  /*\n   * Does the application expect PROT_READ to imply PROT_EXEC?\n   *\n   * (the exception is when the underlying filesystem is noexec\n   *  mounted, in which case we dont add PROT_EXEC.)\n   */\n  if ((prot & PROT_READ) && (current->personality & READ_IMPLIES_EXEC))\n    if (!(file && (file->f_path.mnt->mnt_flags & MNT_NOEXEC)))\n      prot |= PROT_EXEC;\n  /* \u7565 */\n\n\n\u3046\u3080\u3080\u3002\u3053\u306e\u5b9f\u88c5\u306f\u60f3\u50cf\u3057\u3066\u3044\u306a\u304b\u3063\u305f\u3002\u306a\u3093\u3058\u3083\u3001\u3053\u306eREAD_IMPLIES_EXEC\u3068\u3044\u3046\u306e\u306f\uff1f\n\u6c17\u306b\u306a\u308b\u304c\u3001\u5148\u306b\u9032\u3080\u3002(\u7591\u554f\u70b9)\n\nmm/mmap.c\n  /* \u30d1\u30e9\u30e1\u30fc\u30bf\u30c1\u30a7\u30c3\u30af\u306a\u3069\u3002\u7565\u3002*/\n  /* Obtain the address to map to. we verify (or select) it and ensure\n   * that it represents a valid section of the address space.\n   */\n  addr = get_unmapped_area(file, addr, len, pgoff, flags);\n  if (addr & ~PAGE_MASK)\n    return addr;\n\n\nget_unmapped_area()\u3067\u306f\u3001\u30de\u30c3\u30d7\u53ef\u80fd\u306a\u30a2\u30c9\u30ec\u30b9\u7a7a\u9593\u306e\u5148\u982d\u4eee\u60f3\u30a2\u30c9\u30ec\u30b9\u304c\u8fd4\u3063\u3066\u304f\u308b\u306e\u3060\u308d\u3046\u3068\u60f3\u5b9a\u3059\u308b\u3002\u304a\u305d\u3089\u304f\u306f\u4eee\u60f3\u30a2\u30c9\u30ec\u30b9\u7a7a\u9593\u3092\u691c\u7d22\u3057\u3066\u7a7a\u304d\u9818\u57df\u3092\u63a2\u3059\u306e\u3060\u308d\u3046\u3068\u601d\u308f\u308c\u308b\u306e\u3067get_unmapped_area()\u306b\u3064\u3044\u3066\u306f\u3053\u308c\u4ee5\u4e0a\u306f\u8abf\u67fb\u305b\u305a\u3001\u5148\u306b\u9032\u3080\u3002\n\nmm/mmap.c\n  /* \u7565 */\n  /* \n   * \u30d0\u30c3\u30ad\u30f3\u30b0\u30b9\u30c8\u30a2\u304c\u6307\u5b9a\u3055\u308c\u3066\u3044\u308b\u5834\u5408\u3001(mmap()\u3067\u306e\u5f15\u6570fd\u304c\n   * \u4f55\u304b\u30d5\u30a1\u30a4\u30eb\u3092\u6307\u5b9a\u3057\u3066\u3044\u308b\u5834\u5408\n   */\n  if (file) {\n    struct inode *inode = file_inode(file);\n\n  /* \u57fa\u672c\u7684\u306b\u3084\u308b\u3053\u3068\u306f\u30d1\u30e9\u30e1\u30fc\u30bf\u8abf\u6574\u3002\u306a\u306e\u3067\u7565 */\n  /* Annonymous memory\u3092\u30de\u30c3\u30d7\u3059\u308b\u5834\u5408 */\n  } else {\n  /* \u57fa\u672c\u7684\u306b\u3084\u308b\u3053\u3068\u306f\u30d1\u30e9\u30e1\u30fc\u30bf\u8abf\u6574\u3002\u306a\u306e\u3067\u7565 */\n  }\n\n  /* mmap\u306b\u3053\u3093\u306a\u30aa\u30d7\u30b7\u30e7\u30f3\u304c\u3042\u3063\u305f\u3068\u306f...\u6c17\u306b\u306a\u308b\u3051\u3069\u5148\u306b\u9032\u3080 */  \n  /*\n   * Set 'VM_NORESERVE' if we should not account for the\n   * memory use of this mapping.\n   */\n  if (flags & MAP_NORESERVE) {\n    /* We honor MAP_NORESERVE if allowed to overcommit */\n    if (sysctl_overcommit_memory != OVERCOMMIT_NEVER)\n      vm_flags |= VM_NORESERVE;\n\n    /* hugetlb applies strict overcommit unless MAP_NORESERVE */\n    if (file && is_file_hugepages(file))\n      vm_flags |= VM_NORESERVE;\n  }\n\n  /* \n   * \u3053\u3053\u304c\u30e1\u30a4\u30f3\u306e\u51e6\u7406\u3063\u307d\u3044\u3002\u7a7a\u3044\u3066\u3044\u308b\u4eee\u60f3\u30a2\u30c9\u30ec\u30b9\u7a7a\u9593\u306f\u3055\u304d\u306b\u62bc\u3055\u3048\u3066\u3044\u308b\n   * \u306e\u3067\u3001\u3042\u3068\u306f\u30de\u30c3\u30d7\u306e\u5c5e\u6027\u3092\u8a2d\u5b9a\u3059\u308b\u306e\u304c\u4e3b\u306a\u4f5c\u696d\u306b\u306a\u308b\u3060\u308d\u3046\n   */\n  addr = mmap_region(file, addr, len, vm_flags, pgoff);\n  if (!IS_ERR_VALUE(addr) &&\n      ((vm_flags & VM_LOCKED) ||\n       (flags & (MAP_POPULATE | MAP_NONBLOCK)) == MAP_POPULATE))\n    *populate = len;\n  return addr;\n}\n\n\n\nmmap_region()\u3092\u898b\u308b\n\u3055\u3066\u3001\u3044\u3088\u3044\u3088mmap_region()\u3092\u898b\u308b\u3053\u3068\u306b\u3057\u307e\u3059\u3002\n\nmm/mmap.c\nunsigned long mmap_region(struct file *file, unsigned long addr,\n    unsigned long len, vm_flags_t vm_flags, unsigned long pgoff)\n{\n  /* \u7565 */\n\n  /* \u30d7\u30ed\u30bb\u30b9\u306e\u30e1\u30e2\u30ea\u7a7a\u9593\u3092\u3053\u308c\u4ee5\u4e0a\u5897\u3084\u305b\u308b\u304b\u30c1\u30a7\u30c3\u30af */\n  /* Check against address space limit. */\n  if (!may_expand_vm(mm, len >> PAGE_SHIFT)) {\n  /* \u7565 */\n  }\n\n\n\u6b21\u304c\u5c11\u3057\u30a4\u30e1\u30fc\u30b8\u3057\u306b\u304f\u3044\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u3002\n\nmm/mmap.c\n  /* Clear old maps */\n  error = -ENOMEM;\nmunmap_back:\n  /* \u4eca\u56de\u30de\u30c3\u30d7\u3057\u3088\u3046\u3068\u3057\u3066\u3044\u308b\u30a2\u30c9\u30ec\u30b9\u7a7a\u9593\u306e\u4e00\u3064\u524d\u306estruct vma\u3092\u53d6\u5f97 */\n  if (find_vma_links(mm, addr, addr + len, &prev, &rb_link, &rb_parent)) {\n    if (do_munmap(mm, addr, len))\n      return -ENOMEM;\n    goto munmap_back;\n  }\n\n\nfind_vma_links\u306f\u8ffd\u52a0\u3067\u30b3\u30e1\u30f3\u30c8\u3092\u8a18\u8f09\u3057\u305f\u901a\u308a\u306e\u50cd\u304d\u3067\u3001\u7b2c\u56db\u5f15\u6570\u306eprev\u306b\u683c\u7d0d\u3055\u308c\u308b\u5024\u306f\u4ee5\u4e0b\u306e\u56f3\u306e\u901a\u308a\u3068\u306a\u308a\u307e\u3059\u3002\n\u306a\u304a\u3001addr\u306b\u306f\u524d\u8ff0\u3057\u305fmmap_region()\u3067\u3001\u633f\u5165\u3059\u308b\u898b\u8fbc\u307f\u306e\u4eee\u60f3\u30a2\u30c9\u30ec\u30b9\u7a7a\u9593\u306e\u5148\u982d\u4eee\u60f3\u30a2\u30c9\u30ec\u30b9\u304c\u683c\u7d0d\u3055\u308c\u3066\u3044\u307e\u3059\u3002\n\n\u5148\u306b\u9032\u307f\u307e\u3057\u3087\u3046\u3002\n\u6b21\u306b\u3001\u30a2\u30c9\u30ec\u30b9\u7a7a\u9593\u5185\u306b\u9818\u57df\u3092\u5272\u308a\u5f53\u3066\u308b\u308f\u3051\u3067\u3059\u304c\u3001\u3059\u3067\u306b\u3042\u308bstruct vma\u306e\u7bc4\u56f2\u62e1\u5f35\u3067\u554f\u984c\u306a\u3044\u304b\u8abf\u3079\u307e\u3059\u3002\n\nmm/mmap.c\n  /* \u7565 */\n  /* struct vm_area_struct\u306e\u7bc4\u56f2\u3092\u62e1\u5f35\u3059\u308b\u3060\u3051\u3067\u6e08\u307e\u305b\u3089\u308c\u306a\u3044\u304b\uff1f */\n  /*\n   * Can we just expand an old mapping?\n   */\n  vma = vma_merge(mm, prev, addr, addr + len, vm_flags, NULL, file, pgoff, NULL);\n  /* \u62e1\u5f35\u3067\u6e08\u307e\u305b\u3089\u308c\u305f\u3089\u3001\u7d42\u308f\u308a */\n  if (vma)\n    goto out;\n\n\n\u3053\u308c\u3082\u30a4\u30e1\u30fc\u30b8\u3057\u306b\u304f\u3044\u3068\u601d\u3046\u306e\u3067\u8aac\u660e\u3057\u307e\u3059\u3002\n\u8981\u3059\u308b\u306b\u3001\u300cvma\u3092\u633f\u5165\u3057\u3066\u65b0\u305f\u306a\u30a2\u30c9\u30ec\u30b9\u7a7a\u9593\u3092\u30de\u30c3\u30d7\u3057\u305f\u7d50\u679c\u3001\u96a3\u308a\u5408\u3063\u305fvma\u304c\u4f75\u5408\u3067\u304d\u308b\u30b1\u30fc\u30b9\u304c\u3042\u308b\u304b\u5224\u5b9a\u3057\u3001\u4f75\u5408\u3067\u304d\u308b\u306e\u306a\u3089\u4f75\u5408\u3057\u3066\u3001\u4f75\u5408\u5f8c\u306evma\u3092\u8fd4\u3059\u300d\u3068\u3044\u3046\u51e6\u7406\u3067\u3059\u3002\n\u672c\u6765\u3067\u3042\u308c\u3070\u3001\u4ee5\u4e0b\u306e\u56f3\u306e\u30b0\u30ec\u30fc\u30a2\u30a6\u30c8\u3057\u305f\u7b87\u6240\u306e\u3088\u3046\u306bvma\u304c2\u3064\u306b\u306a\u308b\u306f\u305a\u3067\u3059\u304c\u3001\u9023\u7d9a\u3057\u3066\u3044\u308b\u540c\u5c5e\u6027\u306e\u9818\u57df\u306b2\u3064\u306evma\u3092\u4f7f\u3046\u306e\u306f\u7121\u99c4\u306a\u306e\u3067\u3053\u306e\u3088\u3046\u306a\u51e6\u7406\u304c\u3042\u308a\u307e\u3059\u3002\n\n\u4f75\u5408\u3067\u304d\u306a\u304b\u3063\u305f\u5834\u5408\u306f\u3001\u65b0\u305f\u306bvma\u3092\u5272\u308a\u5f53\u3066\u3066\u3001\u305d\u308c\u3092vma\u306e\u30ea\u30b9\u30c8\u4e2d\u306b\u633f\u5165\u3057\u307e\u3059\u3002\n\nmm/mmap.c\n\n  /*\n   * Determine the object being mapped and call the appropriate\n   * specific mapper. the address has already been validated, but\n   * not unmapped, but the maps are removed from the list.\n   */\n  vma = kmem_cache_zalloc(vm_area_cachep, GFP_KERNEL);\n  if (!vma) {\n    error = -ENOMEM;\n    goto unacct_error;\n  }\n\n  /* \u65b0\u3057\u304fstruct vma\u3092\u4f5c\u3063\u3066\u3001\u521d\u671f\u5316\u3059\u308b\u3002 */\n  vma->vm_mm = mm;\n  vma->vm_start = addr;\n  vma->vm_end = addr + len;\n  vma->vm_flags = vm_flags;\n  vma->vm_page_prot = vm_get_page_prot(vm_flags);\n  vma->vm_pgoff = pgoff;\n  INIT_LIST_HEAD(&vma->anon_vma_chain);\n\n\n\u305d\u3057\u3066\u3001\u6b21\u306b\u30d0\u30c3\u30ad\u30f3\u30b0\u30b9\u30c8\u30a2\u3092\u4ed5\u8fbc\u307f\u307e\u3059\u3002\n\nmm/mmap.c\n  /* \u3067\u3001\u30d5\u30a1\u30a4\u30eb\u3001\u3059\u306a\u308f\u3061\u30d0\u30c3\u30ad\u30f3\u30b0\u30b9\u30c8\u30a2\u304c\u3042\u308b\u30b1\u30fc\u30b9 */\n  if (file) {\n    if (vm_flags & VM_DENYWRITE) {\n      error = deny_write_access(file);\n      if (error)\n        goto free_vma;\n    }\n    vma->vm_file = get_file(file);\n  /* \n   * \u8a72\u5f53\u30d5\u30a1\u30a4\u30eb(\u30c7\u30d0\u30a4\u30b9\u30d5\u30a1\u30a4\u30eb\u306a\u3069)\u3067\u72ec\u81ea\u306emmap\u30eb\u30fc\u30c1\u30f3\u304c\u3042\u308c\u3070\u3001\n   * \u305d\u308c\u3092\u5b9f\u884c\u3059\u308b\n   */\n    error = file->f_op->mmap(file, vma);\n    if (error)\n      goto unmap_and_free_vma;\n\n    /* Can addr have changed??\n     *\n     * Answer: Yes, several device drivers can do it in their\n     *         f_op->mmap method. -DaveM\n     * Bug: If addr is changed, prev, rb_link, rb_parent should\n     *      be updated for vma_link()\n     */\n    WARN_ON_ONCE(addr != vma->vm_start);\n\n    addr = vma->vm_start;\n    vm_flags = vma->vm_flags;\n\n\n\u6b21\u306bAnnnymous\u3060\u304c\u5c11\u3057\u7279\u6b8a\u306a\u30b1\u30fc\u30b9\u3002\u4ed6\u30d7\u30ed\u30bb\u30b9\u3068\u5185\u5bb9\u3092\u5171\u6709\u3059\u308b\u30b1\u30fc\u30b9\u3067\u3059\u3002\n\u3053\u306e\u30b1\u30fc\u30b9\u3060\u3068\u3001\u66f8\u304d\u8fbc\u307f\u6642\u306b\u66f8\u304d\u8fbc\u3093\u3060\u5185\u5bb9\u304c\u4ed6\u306e\u30d7\u30ed\u30bb\u30b9\u304b\u3089\u898b\u3048\u306a\u3044\u3068\u306a\u3089\u306a\u3044\u306e\u3067COW(Copy On Write)\u306f\u3057\u307e\u305b\u3093\u3002\n\nmm/mmap.c\n  /* \n   * Annonymous\u5c5e\u6027\u3060\u304c\u3001\u4ed6\u306e\u30d7\u30ed\u30bb\u30b9\u3068\u5909\u66f4\u5185\u5bb9\u3092\u5171\u6709\u3057\u305f\u3044\u30b1\u30fc\u30b9\n   * \u3053\u306e\u5834\u5408\u306fCOW\u306e\u5bfe\u8c61\u5916\u3068\u306a\u308b\n   */\n  } else if (vm_flags & VM_SHARED) {\n    error = shmem_zero_setup(vma);\n    if (error)\n      goto free_vma;\n  }\n\n\nshmem_zero_setup()\u306f\u4ee5\u4e0b\u306e\u5b9f\u88c5\u3067\u3059\u3002\n\nmm/shmem.c\nint shmem_zero_setup(struct vm_area_struct *vma)\n{\n  struct file *file;\n  loff_t size = vma->vm_end - vma->vm_start;\n\n  file = shmem_file_setup(\"dev/zero\", size, vma->vm_flags);\n  if (IS_ERR(file))\n    return PTR_ERR(file);\n\n  if (vma->vm_file)\n    fput(vma->vm_file);\n  vma->vm_file = file;\n  vma->vm_ops = &shmem_vm_ops;\n  return 0;\n}\n\n\n\u3061\u3087\u3063\u3068\u9a5a\u304d\u307e\u3057\u305f\u3002/dev/zero\u3092\u30d0\u30c3\u30ad\u30f3\u30b0\u30b9\u30c8\u30a2\u306b\u3059\u308b\u306e\u3067\u3059\u306d\u3002\u521d\u3081\u3066\u306e\u30a2\u30af\u30bb\u30b9\u6642\u306b\u306f\u30bc\u30ed\u30d1\u30c6\u30a3\u30f3\u30b0\u3055\u308c\u305f\u30da\u30fc\u30b8\u3092\u5f97\u3089\u308c\u308b\u306e\u3067\u3057\u3087\u3046\u3002\n\u305d\u3057\u3066\u3001\u30da\u30fc\u30b8\u30e3(vm_ops)\u306f\u305d\u306e\u540d\u524d\u304b\u3089\u5171\u6709\u30e1\u30e2\u30ea\u5411\u3051\u306e\u3082\u306e\u306b\u306a\u308a\u307e\u3059\u3002\n\u30da\u30fc\u30b8\u30e3\u3068\u306f\u3001\u30d0\u30c3\u30ad\u30f3\u30b0\u30b9\u30c8\u30a2\u306b\u5bfe\u3059\u308b\u64cd\u4f5c\u7fa4(\u3056\u3063\u304f\u308a\u8a00\u3046\u3068\u95a2\u6570\u30dd\u30a4\u30f3\u30bf\u306e\u96c6\u307e\u308a)\u3092\u683c\u7d0d\u3057\u305f\u69cb\u9020\u4f53\u3067\u3059\u3002\n\u3044\u3088\u3044\u3088\u3001\u30d7\u30ed\u30bb\u30b9\u306e\u30a2\u30c9\u30ec\u30b9\u7a7a\u9593\u306bstruct vma\u3092\u633f\u5165\u3057\u3066\u30a2\u30c9\u30ec\u30b9\u7a7a\u9593\u3092\u5272\u308a\u5f53\u3066\u307e\u3059\u3002\n\nmm/mmap.c\n  /* \u7565 */\n  /* \u6700\u7d42\u7684\u306b\u3001struct vma\u3092\u30d7\u30ed\u30bb\u30b9\u306e\u30a2\u30c9\u30ec\u30b9\u7a7a\u9593\u306b\u62bc\u3057\u3053\u3080\uff01 */\n  vma_link(mm, vma, prev, rb_link, rb_parent);\n  /* Once vma denies write, undo our temporary denial count */\n  if (vm_flags & VM_DENYWRITE)\n    allow_write_access(file);\n  file = vma->vm_file;\nout:\n  /* \u4ee5\u5f8c\u306f\u7d71\u8a08\u60c5\u5831\u306a\u3069\u3092\u3068\u308b\u51e6\u7406\u3067\u672c\u8cea\u7684\u306a\u7b87\u6240\u3067\u306a\u3044\u306e\u3067\u7565 */\n  return addr;\n\n/* \u4ee5\u5f8c\u306f\u30a8\u30e9\u30fc\u6642\u306e\u51e6\u7406\u3002goto\u3067\u98db\u3093\u3067\u304f\u308b */\n/* \u7565 */\n}\n\n\n\u3053\u3053\u307e\u3067\u898b\u305f\u3068\u304a\u308a\u3001\u30a2\u30c9\u30ec\u30b9\u7a7a\u9593\u306e\u30de\u30c3\u30d7\u3068\u540c\u6642\u306b\u7269\u7406\u30da\u30fc\u30b8\u3092\u5272\u308a\u5f53\u3066\u3066\u3044\u308b\u69d8\u5b50\u306f\u3042\u308a\u307e\u305b\u3093\u3002\n\u30e6\u30fc\u30b6\u7a7a\u9593\u3067\u3042\u308c\u3070\u305d\u308c\u306f\u3054\u304f\u666e\u901a\u306e\u3053\u3068\u3067\u3059\u3002\u305d\u308c\u306f\u3001\u30c7\u30de\u30f3\u30c9\u30da\u30fc\u30b8\u30f3\u30b0\u3068\u3044\u3046\u3084\u3064\u3067\u3057\u3087\u3046\u3002\n\u3053\u306e\u5834\u5408\u3001\u5b9f\u969b\u306b\u7269\u7406\u30e1\u30e2\u30ea\u3092\u5272\u308a\u5f53\u3066\u308b\u306e\u306f\u3001\u30da\u30fc\u30b8\u30d5\u30a9\u30eb\u30c8\u30cf\u30f3\u30c9\u30e9\u3068\u306a\u308b\u306f\u305a\u3067\u3059\u3002\n\n\u6b21\u56de\u306e\u4e88\u5b9a\n\u3068\u3044\u3046\u3053\u3068\u3067\u3001\u6b21\u56de\u306f\u30da\u30fc\u30b8\u30d5\u30a9\u30eb\u30c8\u306b\u624b\u3092\u51fa\u3057\u3066\u307f\u305f\u3044\u3068\u601d\u3044\u307e\u3059\u3002\n\u30da\u30fc\u30b8\u30d5\u30a9\u30eb\u30c8\u30cf\u30f3\u30c9\u30e9\u306f\u4f8b\u5916\u30cf\u30f3\u30c9\u30e9\u306e\u4e00\u3064\u3067\u3059\u306e\u3067\u3001\u666e\u901a\u306fCPU\u30a2\u30fc\u30ad\u30c6\u30af\u30c1\u30e3\u4f9d\u5b58\u306e\u30b3\u30fc\u30c9\u304b\u3089\u59cb\u307e\u308b\u3053\u3068\u306b\u306a\u308a\u307e\u3059\u3002\u30a2\u30fc\u30ad\u30c6\u30af\u30c1\u30e3\u306fx86\u3067\u884c\u304d\u307e\u3059\u3002(ARM\u3068\u304bMIPS\u3068\u304b\u306f\u5272\u3068\u4e00\u822c\u7684\u3067\u3059\u304c\u3001x86\u307b\u3069\u3067\u306f\u306a\u3044\u306e\u3067\u30fb\u30fb\u30fb)\n## \u8fd1\u6cc1\n\u98f2\u3093\u3067\u5e30\u3063\u3066\u304d\u3066\u3001\u6c17\u3065\u3044\u305f\u3089[\u3053\u3093\u306a\u306e](http://qiita.com/akachochin/items/248431b5038197763f08)\u66f8\u3044\u3066\u3044\u307e\u3057\u305f\u3002\n\u3061\u3087\u3063\u3068\u5177\u4f53\u6027\u306b\u4e4f\u3057\u3044\u306e\u3067\u3001\u3082\u3046\u5c11\u3057\u5f8c\u3067\u30d1\u30c3\u30c1\u3092\u66f8\u304d\u307e\u3059\u3002\n(\u3067\u3082\u3001\u660e\u65e5\u306f\u4f1a\u793e\u306e\u6b53\u8fce\u4f1a\u3067\u98f2\u3093\u3067\u304f\u308b\u306e\u3060)\n\n## \u524d\u56de\u306e\u3042\u3089\u307e\u3057\u3068\u4eca\u56de\u898b\u308b\u3068\u3053\u308d\n[\u524d\u56de](http://qiita.com/akachochin/items/3a6fd959a84d113f6f15)\u3001\u4eee\u60f3\u30a2\u30c9\u30ec\u30b9\u3068\u7269\u7406\u30a2\u30c9\u30ec\u30b9\u306e\u7d10\u4ed8\u3051\u3092\u3059\u308b\u51e6\u7406\u3068\u305d\u306e\u30c7\u30fc\u30bf\u69cb\u9020\u306e\u30da\u30fc\u30b8\u30c6\u30fc\u30d6\u30eb\u3092\u898b\u307e\u3057\u305f\u3002\n\u305d\u3057\u3066\u3001\u4eca\u56de\u306f\u30e6\u30fc\u30b6\u7a7a\u9593\u3078\u306e\u30a2\u30c9\u30ec\u30b9\u7a7a\u9593\u30de\u30c3\u30d7\u3092\u884c\u3046mmap()\u3092\u898b\u308b\u3053\u3068\u3067\u3001\u4eee\u60f3\u30a2\u30c9\u30ec\u30b9\u7a7a\u9593\u306e\u6271\u3044\u306e\u4e00\u7aef\u3092\u304b\u3044\u307e\u898b\u3066\u307f\u307e\u3057\u3087\u3046\u3002\n\n## mmap\u306e\u5b9f\u88c5\nmmap\u306f\u4ee5\u4e0b\u306e\u5b9f\u88c5\u3067\u3042\u308b\u3002\n(\u53b3\u5bc6\u306b\u8a00\u3046\u3068\u3001\u30b7\u30b9\u30c6\u30e0\u30b3\u30fc\u30eb\u306e\u30d9\u30af\u30bf\u3067\u306f\u306a\u3044\u306e\u3067\u300c\u30b7\u30b9\u30c6\u30e0\u30b3\u30fc\u30eb\u306e\u958b\u59cb\u5730\u70b9\u300d\u3067\u306f\u306a\u3044)\n\n```c:arch/x86/ia32/sys_ia32.c\nasmlinkage long sys32_mmap(struct mmap_arg_struct32 __user *arg)\n{\n  struct mmap_arg_struct32 a;\n\n  if (copy_from_user(&a, arg, sizeof(a)))\n    return -EFAULT;\n\n  if (a.offset & ~PAGE_MASK)\n    return -EINVAL;\n\n  return sys_mmap_pgoff(a.addr, a.len, a.prot, a.flags, a.fd,\n             a.offset>>PAGE_SHIFT);\n}\n```\n\u5b9f\u969b\u306e\u51e6\u7406\u306fsys_mmap_pgoff()\u306e\u3088\u3046\u306a\u306e\u3067\u3001\u3053\u308c\u3092\u898b\u308b\u3002\n\n```c:mm/mmap.c\nSYSCALL_DEFINE6(mmap_pgoff, unsigned long, addr, unsigned long, len,\n    unsigned long, prot, unsigned long, flags,\n    unsigned long, fd, unsigned long, pgoff)\n{\n  struct file *file = NULL;\n  unsigned long retval = -EBADF;\n\n  if (!(flags & MAP_ANONYMOUS)) {\n  /* \n   * \u3053\u3053\u306f\u8981\u3059\u308b\u306b\u3001file\u69cb\u9020\u4f53\u3092\u53d6\u5f97\u3057\u305f\u308a\u3068\u30d0\u30c3\u30ad\u30f3\u30b0\u30b9\u30c8\u30a2\n   * \u3068\u306a\u308b\u30d5\u30a1\u30a4\u30eb\u3092\u6271\u3046\u305f\u3081\u306e\u30c7\u30fc\u30bf\u3092\u6e96\u5099\u3059\u308b\u306e\u304c\u4e3b\n   * \u3088\u3063\u3066\u3001\u7565 \n   */\n  } else if (flags & MAP_HUGETLB) {\n  /* \u672c\u5f53\u306f\u9762\u767d\u305d\u3046\u306a\u3068\u3053\u308d\u3060\u3051\u308c\u3069\u3001\u6982\u8981\u3092\u3064\u304b\u3080\u3053\u3068\u3092\u512a\u5148\u3059\u308b\u305f\u3081\u7565 */\n  }   \n  \n  flags &= ~(MAP_EXECUTABLE | MAP_DENYWRITE);\n\n  retval = vm_mmap_pgoff(file, addr, len, prot, flags, pgoff);\nout_fput:\n  if (file)\n    fput(file);\nout:\n  return retval;\n}\n```\n\u898b\u305f\u3068\u304a\u308a\u3001vm_mmap_pgoff()\u3092\u547c\u3093\u3067\u3044\u308b\u3002\nvm_mmap_pgoff()\u306f\u4e8b\u5b9f\u4e0a\u3001do_mmap_pgoff()\u3092\u547c\u3076\u3060\u3051\u306a\u306e\u3067\u305d\u3061\u3089\u3092\u898b\u308b\u3002\n\n```c:mm/mmap.c\nunsigned long do_mmap_pgoff(struct file *file, unsigned long addr,\n      unsigned long len, unsigned long prot,\n      unsigned long flags, unsigned long pgoff,\n      unsigned long *populate)\n{\n  struct mm_struct * mm = current->mm;\n  vm_flags_t vm_flags;\n\n  /* \u7565 */\n  /*\n   * Does the application expect PROT_READ to imply PROT_EXEC?\n   *\n   * (the exception is when the underlying filesystem is noexec\n   *  mounted, in which case we dont add PROT_EXEC.)\n   */\n  if ((prot & PROT_READ) && (current->personality & READ_IMPLIES_EXEC))\n    if (!(file && (file->f_path.mnt->mnt_flags & MNT_NOEXEC)))\n      prot |= PROT_EXEC;\n  /* \u7565 */\n```\n\u3046\u3080\u3080\u3002\u3053\u306e\u5b9f\u88c5\u306f\u60f3\u50cf\u3057\u3066\u3044\u306a\u304b\u3063\u305f\u3002\u306a\u3093\u3058\u3083\u3001\u3053\u306eREAD_IMPLIES_EXEC\u3068\u3044\u3046\u306e\u306f\uff1f\n\u6c17\u306b\u306a\u308b\u304c\u3001\u5148\u306b\u9032\u3080\u3002(\u7591\u554f\u70b9)\n\n```c:mm/mmap.c\n  /* \u30d1\u30e9\u30e1\u30fc\u30bf\u30c1\u30a7\u30c3\u30af\u306a\u3069\u3002\u7565\u3002*/\n  /* Obtain the address to map to. we verify (or select) it and ensure\n   * that it represents a valid section of the address space.\n   */\n  addr = get_unmapped_area(file, addr, len, pgoff, flags);\n  if (addr & ~PAGE_MASK)\n    return addr;\n```\nget_unmapped_area()\u3067\u306f\u3001\u30de\u30c3\u30d7\u53ef\u80fd\u306a\u30a2\u30c9\u30ec\u30b9\u7a7a\u9593\u306e\u5148\u982d\u4eee\u60f3\u30a2\u30c9\u30ec\u30b9\u304c\u8fd4\u3063\u3066\u304f\u308b\u306e\u3060\u308d\u3046\u3068\u60f3\u5b9a\u3059\u308b\u3002\u304a\u305d\u3089\u304f\u306f\u4eee\u60f3\u30a2\u30c9\u30ec\u30b9\u7a7a\u9593\u3092\u691c\u7d22\u3057\u3066\u7a7a\u304d\u9818\u57df\u3092\u63a2\u3059\u306e\u3060\u308d\u3046\u3068\u601d\u308f\u308c\u308b\u306e\u3067get_unmapped_area()\u306b\u3064\u3044\u3066\u306f\u3053\u308c\u4ee5\u4e0a\u306f\u8abf\u67fb\u305b\u305a\u3001\u5148\u306b\u9032\u3080\u3002\n\n```c:mm/mmap.c\n  /* \u7565 */\n  /* \n   * \u30d0\u30c3\u30ad\u30f3\u30b0\u30b9\u30c8\u30a2\u304c\u6307\u5b9a\u3055\u308c\u3066\u3044\u308b\u5834\u5408\u3001(mmap()\u3067\u306e\u5f15\u6570fd\u304c\n   * \u4f55\u304b\u30d5\u30a1\u30a4\u30eb\u3092\u6307\u5b9a\u3057\u3066\u3044\u308b\u5834\u5408\n   */\n  if (file) {\n    struct inode *inode = file_inode(file);\n\n  /* \u57fa\u672c\u7684\u306b\u3084\u308b\u3053\u3068\u306f\u30d1\u30e9\u30e1\u30fc\u30bf\u8abf\u6574\u3002\u306a\u306e\u3067\u7565 */\n  /* Annonymous memory\u3092\u30de\u30c3\u30d7\u3059\u308b\u5834\u5408 */\n  } else {\n  /* \u57fa\u672c\u7684\u306b\u3084\u308b\u3053\u3068\u306f\u30d1\u30e9\u30e1\u30fc\u30bf\u8abf\u6574\u3002\u306a\u306e\u3067\u7565 */\n  }\n\n  /* mmap\u306b\u3053\u3093\u306a\u30aa\u30d7\u30b7\u30e7\u30f3\u304c\u3042\u3063\u305f\u3068\u306f...\u6c17\u306b\u306a\u308b\u3051\u3069\u5148\u306b\u9032\u3080 */  \n  /*\n   * Set 'VM_NORESERVE' if we should not account for the\n   * memory use of this mapping.\n   */\n  if (flags & MAP_NORESERVE) {\n    /* We honor MAP_NORESERVE if allowed to overcommit */\n    if (sysctl_overcommit_memory != OVERCOMMIT_NEVER)\n      vm_flags |= VM_NORESERVE;\n\n    /* hugetlb applies strict overcommit unless MAP_NORESERVE */\n    if (file && is_file_hugepages(file))\n      vm_flags |= VM_NORESERVE;\n  }\n\n  /* \n   * \u3053\u3053\u304c\u30e1\u30a4\u30f3\u306e\u51e6\u7406\u3063\u307d\u3044\u3002\u7a7a\u3044\u3066\u3044\u308b\u4eee\u60f3\u30a2\u30c9\u30ec\u30b9\u7a7a\u9593\u306f\u3055\u304d\u306b\u62bc\u3055\u3048\u3066\u3044\u308b\n   * \u306e\u3067\u3001\u3042\u3068\u306f\u30de\u30c3\u30d7\u306e\u5c5e\u6027\u3092\u8a2d\u5b9a\u3059\u308b\u306e\u304c\u4e3b\u306a\u4f5c\u696d\u306b\u306a\u308b\u3060\u308d\u3046\n   */\n  addr = mmap_region(file, addr, len, vm_flags, pgoff);\n  if (!IS_ERR_VALUE(addr) &&\n      ((vm_flags & VM_LOCKED) ||\n       (flags & (MAP_POPULATE | MAP_NONBLOCK)) == MAP_POPULATE))\n    *populate = len;\n  return addr;\n}\n```\n\n## mmap_region()\u3092\u898b\u308b\n\u3055\u3066\u3001\u3044\u3088\u3044\u3088mmap_region()\u3092\u898b\u308b\u3053\u3068\u306b\u3057\u307e\u3059\u3002\n\n```c:mm/mmap.c\nunsigned long mmap_region(struct file *file, unsigned long addr,\n    unsigned long len, vm_flags_t vm_flags, unsigned long pgoff)\n{\n  /* \u7565 */\n\n  /* \u30d7\u30ed\u30bb\u30b9\u306e\u30e1\u30e2\u30ea\u7a7a\u9593\u3092\u3053\u308c\u4ee5\u4e0a\u5897\u3084\u305b\u308b\u304b\u30c1\u30a7\u30c3\u30af */\n  /* Check against address space limit. */\n  if (!may_expand_vm(mm, len >> PAGE_SHIFT)) {\n  /* \u7565 */\n  }\n```\n\n\u6b21\u304c\u5c11\u3057\u30a4\u30e1\u30fc\u30b8\u3057\u306b\u304f\u3044\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u3002\n\n```c:mm/mmap.c\n  /* Clear old maps */\n  error = -ENOMEM;\nmunmap_back:\n  /* \u4eca\u56de\u30de\u30c3\u30d7\u3057\u3088\u3046\u3068\u3057\u3066\u3044\u308b\u30a2\u30c9\u30ec\u30b9\u7a7a\u9593\u306e\u4e00\u3064\u524d\u306estruct vma\u3092\u53d6\u5f97 */\n  if (find_vma_links(mm, addr, addr + len, &prev, &rb_link, &rb_parent)) {\n    if (do_munmap(mm, addr, len))\n      return -ENOMEM;\n    goto munmap_back;\n  }\n```\nfind_vma_links\u306f\u8ffd\u52a0\u3067\u30b3\u30e1\u30f3\u30c8\u3092\u8a18\u8f09\u3057\u305f\u901a\u308a\u306e\u50cd\u304d\u3067\u3001\u7b2c\u56db\u5f15\u6570\u306eprev\u306b\u683c\u7d0d\u3055\u308c\u308b\u5024\u306f\u4ee5\u4e0b\u306e\u56f3\u306e\u901a\u308a\u3068\u306a\u308a\u307e\u3059\u3002\n\u306a\u304a\u3001addr\u306b\u306f\u524d\u8ff0\u3057\u305fmmap_region()\u3067\u3001\u633f\u5165\u3059\u308b\u898b\u8fbc\u307f\u306e\u4eee\u60f3\u30a2\u30c9\u30ec\u30b9\u7a7a\u9593\u306e\u5148\u982d\u4eee\u60f3\u30a2\u30c9\u30ec\u30b9\u304c\u683c\u7d0d\u3055\u308c\u3066\u3044\u307e\u3059\u3002\n\n![find_vma_links.jpg](https://qiita-image-store.s3.amazonaws.com/0/19975/76f804fe-3ade-840e-25ae-d654947510e4.jpeg)\n\n\u5148\u306b\u9032\u307f\u307e\u3057\u3087\u3046\u3002\n\u6b21\u306b\u3001\u30a2\u30c9\u30ec\u30b9\u7a7a\u9593\u5185\u306b\u9818\u57df\u3092\u5272\u308a\u5f53\u3066\u308b\u308f\u3051\u3067\u3059\u304c\u3001\u3059\u3067\u306b\u3042\u308bstruct vma\u306e\u7bc4\u56f2\u62e1\u5f35\u3067\u554f\u984c\u306a\u3044\u304b\u8abf\u3079\u307e\u3059\u3002\n\n```c:mm/mmap.c\n  /* \u7565 */\n  /* struct vm_area_struct\u306e\u7bc4\u56f2\u3092\u62e1\u5f35\u3059\u308b\u3060\u3051\u3067\u6e08\u307e\u305b\u3089\u308c\u306a\u3044\u304b\uff1f */\n  /*\n   * Can we just expand an old mapping?\n   */\n  vma = vma_merge(mm, prev, addr, addr + len, vm_flags, NULL, file, pgoff, NULL);\n  /* \u62e1\u5f35\u3067\u6e08\u307e\u305b\u3089\u308c\u305f\u3089\u3001\u7d42\u308f\u308a */\n  if (vma)\n    goto out;\n```\n\n\u3053\u308c\u3082\u30a4\u30e1\u30fc\u30b8\u3057\u306b\u304f\u3044\u3068\u601d\u3046\u306e\u3067\u8aac\u660e\u3057\u307e\u3059\u3002\n\u8981\u3059\u308b\u306b\u3001\u300cvma\u3092\u633f\u5165\u3057\u3066\u65b0\u305f\u306a\u30a2\u30c9\u30ec\u30b9\u7a7a\u9593\u3092\u30de\u30c3\u30d7\u3057\u305f\u7d50\u679c\u3001\u96a3\u308a\u5408\u3063\u305fvma\u304c\u4f75\u5408\u3067\u304d\u308b\u30b1\u30fc\u30b9\u304c\u3042\u308b\u304b\u5224\u5b9a\u3057\u3001\u4f75\u5408\u3067\u304d\u308b\u306e\u306a\u3089\u4f75\u5408\u3057\u3066\u3001\u4f75\u5408\u5f8c\u306evma\u3092\u8fd4\u3059\u300d\u3068\u3044\u3046\u51e6\u7406\u3067\u3059\u3002\n\u672c\u6765\u3067\u3042\u308c\u3070\u3001\u4ee5\u4e0b\u306e\u56f3\u306e\u30b0\u30ec\u30fc\u30a2\u30a6\u30c8\u3057\u305f\u7b87\u6240\u306e\u3088\u3046\u306bvma\u304c2\u3064\u306b\u306a\u308b\u306f\u305a\u3067\u3059\u304c\u3001\u9023\u7d9a\u3057\u3066\u3044\u308b\u540c\u5c5e\u6027\u306e\u9818\u57df\u306b2\u3064\u306evma\u3092\u4f7f\u3046\u306e\u306f\u7121\u99c4\u306a\u306e\u3067\u3053\u306e\u3088\u3046\u306a\u51e6\u7406\u304c\u3042\u308a\u307e\u3059\u3002\n\n![vma_merge.jpg](https://qiita-image-store.s3.amazonaws.com/0/19975/e4e09e6d-4ae2-d595-0cc8-25fcfd8b8f5e.jpeg)\n\n\u4f75\u5408\u3067\u304d\u306a\u304b\u3063\u305f\u5834\u5408\u306f\u3001\u65b0\u305f\u306bvma\u3092\u5272\u308a\u5f53\u3066\u3066\u3001\u305d\u308c\u3092vma\u306e\u30ea\u30b9\u30c8\u4e2d\u306b\u633f\u5165\u3057\u307e\u3059\u3002\n\n```c:mm/mmap.c\n\n  /*\n   * Determine the object being mapped and call the appropriate\n   * specific mapper. the address has already been validated, but\n   * not unmapped, but the maps are removed from the list.\n   */\n  vma = kmem_cache_zalloc(vm_area_cachep, GFP_KERNEL);\n  if (!vma) {\n    error = -ENOMEM;\n    goto unacct_error;\n  }\n\n  /* \u65b0\u3057\u304fstruct vma\u3092\u4f5c\u3063\u3066\u3001\u521d\u671f\u5316\u3059\u308b\u3002 */\n  vma->vm_mm = mm;\n  vma->vm_start = addr;\n  vma->vm_end = addr + len;\n  vma->vm_flags = vm_flags;\n  vma->vm_page_prot = vm_get_page_prot(vm_flags);\n  vma->vm_pgoff = pgoff;\n  INIT_LIST_HEAD(&vma->anon_vma_chain);\n```\n\n\u305d\u3057\u3066\u3001\u6b21\u306b\u30d0\u30c3\u30ad\u30f3\u30b0\u30b9\u30c8\u30a2\u3092\u4ed5\u8fbc\u307f\u307e\u3059\u3002\n\n```c:mm/mmap.c\n  /* \u3067\u3001\u30d5\u30a1\u30a4\u30eb\u3001\u3059\u306a\u308f\u3061\u30d0\u30c3\u30ad\u30f3\u30b0\u30b9\u30c8\u30a2\u304c\u3042\u308b\u30b1\u30fc\u30b9 */\n  if (file) {\n    if (vm_flags & VM_DENYWRITE) {\n      error = deny_write_access(file);\n      if (error)\n        goto free_vma;\n    }\n    vma->vm_file = get_file(file);\n  /* \n   * \u8a72\u5f53\u30d5\u30a1\u30a4\u30eb(\u30c7\u30d0\u30a4\u30b9\u30d5\u30a1\u30a4\u30eb\u306a\u3069)\u3067\u72ec\u81ea\u306emmap\u30eb\u30fc\u30c1\u30f3\u304c\u3042\u308c\u3070\u3001\n   * \u305d\u308c\u3092\u5b9f\u884c\u3059\u308b\n   */\n    error = file->f_op->mmap(file, vma);\n    if (error)\n      goto unmap_and_free_vma;\n\n    /* Can addr have changed??\n     *\n     * Answer: Yes, several device drivers can do it in their\n     *         f_op->mmap method. -DaveM\n     * Bug: If addr is changed, prev, rb_link, rb_parent should\n     *      be updated for vma_link()\n     */\n    WARN_ON_ONCE(addr != vma->vm_start);\n\n    addr = vma->vm_start;\n    vm_flags = vma->vm_flags;\n```\n\n\u6b21\u306bAnnnymous\u3060\u304c\u5c11\u3057\u7279\u6b8a\u306a\u30b1\u30fc\u30b9\u3002\u4ed6\u30d7\u30ed\u30bb\u30b9\u3068\u5185\u5bb9\u3092\u5171\u6709\u3059\u308b\u30b1\u30fc\u30b9\u3067\u3059\u3002\n\u3053\u306e\u30b1\u30fc\u30b9\u3060\u3068\u3001\u66f8\u304d\u8fbc\u307f\u6642\u306b\u66f8\u304d\u8fbc\u3093\u3060\u5185\u5bb9\u304c\u4ed6\u306e\u30d7\u30ed\u30bb\u30b9\u304b\u3089\u898b\u3048\u306a\u3044\u3068\u306a\u3089\u306a\u3044\u306e\u3067COW(Copy On Write)\u306f\u3057\u307e\u305b\u3093\u3002\n\n```c:mm/mmap.c\n  /* \n   * Annonymous\u5c5e\u6027\u3060\u304c\u3001\u4ed6\u306e\u30d7\u30ed\u30bb\u30b9\u3068\u5909\u66f4\u5185\u5bb9\u3092\u5171\u6709\u3057\u305f\u3044\u30b1\u30fc\u30b9\n   * \u3053\u306e\u5834\u5408\u306fCOW\u306e\u5bfe\u8c61\u5916\u3068\u306a\u308b\n   */\n  } else if (vm_flags & VM_SHARED) {\n    error = shmem_zero_setup(vma);\n    if (error)\n      goto free_vma;\n  }\n```\n\nshmem_zero_setup()\u306f\u4ee5\u4e0b\u306e\u5b9f\u88c5\u3067\u3059\u3002\n\n```c:mm/shmem.c\nint shmem_zero_setup(struct vm_area_struct *vma)\n{\n  struct file *file;\n  loff_t size = vma->vm_end - vma->vm_start;\n\n  file = shmem_file_setup(\"dev/zero\", size, vma->vm_flags);\n  if (IS_ERR(file))\n    return PTR_ERR(file);\n\n  if (vma->vm_file)\n    fput(vma->vm_file);\n  vma->vm_file = file;\n  vma->vm_ops = &shmem_vm_ops;\n  return 0;\n}\n```\n\u3061\u3087\u3063\u3068\u9a5a\u304d\u307e\u3057\u305f\u3002/dev/zero\u3092\u30d0\u30c3\u30ad\u30f3\u30b0\u30b9\u30c8\u30a2\u306b\u3059\u308b\u306e\u3067\u3059\u306d\u3002\u521d\u3081\u3066\u306e\u30a2\u30af\u30bb\u30b9\u6642\u306b\u306f\u30bc\u30ed\u30d1\u30c6\u30a3\u30f3\u30b0\u3055\u308c\u305f\u30da\u30fc\u30b8\u3092\u5f97\u3089\u308c\u308b\u306e\u3067\u3057\u3087\u3046\u3002\n\u305d\u3057\u3066\u3001\u30da\u30fc\u30b8\u30e3(vm_ops)\u306f\u305d\u306e\u540d\u524d\u304b\u3089\u5171\u6709\u30e1\u30e2\u30ea\u5411\u3051\u306e\u3082\u306e\u306b\u306a\u308a\u307e\u3059\u3002\n\u30da\u30fc\u30b8\u30e3\u3068\u306f\u3001\u30d0\u30c3\u30ad\u30f3\u30b0\u30b9\u30c8\u30a2\u306b\u5bfe\u3059\u308b\u64cd\u4f5c\u7fa4(\u3056\u3063\u304f\u308a\u8a00\u3046\u3068\u95a2\u6570\u30dd\u30a4\u30f3\u30bf\u306e\u96c6\u307e\u308a)\u3092\u683c\u7d0d\u3057\u305f\u69cb\u9020\u4f53\u3067\u3059\u3002\n\n\u3044\u3088\u3044\u3088\u3001\u30d7\u30ed\u30bb\u30b9\u306e\u30a2\u30c9\u30ec\u30b9\u7a7a\u9593\u306bstruct vma\u3092\u633f\u5165\u3057\u3066\u30a2\u30c9\u30ec\u30b9\u7a7a\u9593\u3092\u5272\u308a\u5f53\u3066\u307e\u3059\u3002\n\n```c:mm/mmap.c\n  /* \u7565 */\n  /* \u6700\u7d42\u7684\u306b\u3001struct vma\u3092\u30d7\u30ed\u30bb\u30b9\u306e\u30a2\u30c9\u30ec\u30b9\u7a7a\u9593\u306b\u62bc\u3057\u3053\u3080\uff01 */\n  vma_link(mm, vma, prev, rb_link, rb_parent);\n  /* Once vma denies write, undo our temporary denial count */\n  if (vm_flags & VM_DENYWRITE)\n    allow_write_access(file);\n  file = vma->vm_file;\nout:\n  /* \u4ee5\u5f8c\u306f\u7d71\u8a08\u60c5\u5831\u306a\u3069\u3092\u3068\u308b\u51e6\u7406\u3067\u672c\u8cea\u7684\u306a\u7b87\u6240\u3067\u306a\u3044\u306e\u3067\u7565 */\n  return addr;\n\n/* \u4ee5\u5f8c\u306f\u30a8\u30e9\u30fc\u6642\u306e\u51e6\u7406\u3002goto\u3067\u98db\u3093\u3067\u304f\u308b */\n/* \u7565 */\n}\n```\n\u3053\u3053\u307e\u3067\u898b\u305f\u3068\u304a\u308a\u3001\u30a2\u30c9\u30ec\u30b9\u7a7a\u9593\u306e\u30de\u30c3\u30d7\u3068\u540c\u6642\u306b\u7269\u7406\u30da\u30fc\u30b8\u3092\u5272\u308a\u5f53\u3066\u3066\u3044\u308b\u69d8\u5b50\u306f\u3042\u308a\u307e\u305b\u3093\u3002\n\u30e6\u30fc\u30b6\u7a7a\u9593\u3067\u3042\u308c\u3070\u305d\u308c\u306f\u3054\u304f\u666e\u901a\u306e\u3053\u3068\u3067\u3059\u3002\u305d\u308c\u306f\u3001\u30c7\u30de\u30f3\u30c9\u30da\u30fc\u30b8\u30f3\u30b0\u3068\u3044\u3046\u3084\u3064\u3067\u3057\u3087\u3046\u3002\n\u3053\u306e\u5834\u5408\u3001\u5b9f\u969b\u306b\u7269\u7406\u30e1\u30e2\u30ea\u3092\u5272\u308a\u5f53\u3066\u308b\u306e\u306f\u3001\u30da\u30fc\u30b8\u30d5\u30a9\u30eb\u30c8\u30cf\u30f3\u30c9\u30e9\u3068\u306a\u308b\u306f\u305a\u3067\u3059\u3002\n\n## \u6b21\u56de\u306e\u4e88\u5b9a\n\u3068\u3044\u3046\u3053\u3068\u3067\u3001\u6b21\u56de\u306f\u30da\u30fc\u30b8\u30d5\u30a9\u30eb\u30c8\u306b\u624b\u3092\u51fa\u3057\u3066\u307f\u305f\u3044\u3068\u601d\u3044\u307e\u3059\u3002\n\u30da\u30fc\u30b8\u30d5\u30a9\u30eb\u30c8\u30cf\u30f3\u30c9\u30e9\u306f\u4f8b\u5916\u30cf\u30f3\u30c9\u30e9\u306e\u4e00\u3064\u3067\u3059\u306e\u3067\u3001\u666e\u901a\u306fCPU\u30a2\u30fc\u30ad\u30c6\u30af\u30c1\u30e3\u4f9d\u5b58\u306e\u30b3\u30fc\u30c9\u304b\u3089\u59cb\u307e\u308b\u3053\u3068\u306b\u306a\u308a\u307e\u3059\u3002\u30a2\u30fc\u30ad\u30c6\u30af\u30c1\u30e3\u306fx86\u3067\u884c\u304d\u307e\u3059\u3002(ARM\u3068\u304bMIPS\u3068\u304b\u306f\u5272\u3068\u4e00\u822c\u7684\u3067\u3059\u304c\u3001x86\u307b\u3069\u3067\u306f\u306a\u3044\u306e\u3067\u30fb\u30fb\u30fb)\n", "tags": ["Linux", "\u4eee\u60f3\u8a18\u61b6", "kernel", "kernelvm"]}