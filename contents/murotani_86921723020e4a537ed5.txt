{"context": "\n\n\u306f\u3058\u3081\u306b\nEV3\u3067\u52d5\u304fLinux\u74b0\u5883ev3dev\u3092\u4f7f\u3063\u3066\u958b\u767a\u3057\u307e\u3059\u3002\u3053\u306e\u8a18\u4e8b\u306f\u3001EV3\u306bev3dev\u3092\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3057\u3001SSH\u63a5\u7d9a\u3067\u304d\u3066\u3044\u308b\u72b6\u614b\u3067\u3042\u308b\u3053\u3068\u3092\u524d\u63d0\u306b\u3057\u3066\u3044\u307e\u3059\u3002\n\u74b0\u5883\u69cb\u7bc9\u304c\u3067\u304d\u3066\u3044\u306a\u3044\u65b9\u306f\u3053\u3061\u3089\u306e\u8a18\u4e8b\u3092\u53c2\u8003\u306b\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n\nmindstorm-EV3\u3092Linux\u3067\u5236\u5fa1\u3057\u3088\u3046! ev3dev OS\u306e\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3068\u3068SSH\u63a5\u7d9a\n\n\u3053\u306e\u8a18\u4e8b\u3067\u306fnodejs\u304b\u3089ev3dev\u3092\u5236\u5fa1\u3059\u308b\u30e9\u30a4\u30d6\u30e9\u30eaev3dev-lang-js\u3092\u3001\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u3068\u3068\u3082\u306b\u7d39\u4ecb\u3057\u307e\u3059\u3002\n\nnodejs\u306e\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\nev3dev\u306bnodejs\u3092\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3057\u307e\u3059\u3002\nrobot@ev3dev:~$\u3000sudo apt-get update\nrobot@ev3dev:~$\u3000sudo apt-get install nodejs\n\n\nev3dev-lang-js\u306e\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\nev3dev-lang-js\u306fjavascript\u3092\u4f7f\u3063\u3066EV3\u306e\u30e2\u30fc\u30bf\u30fc\u3084LED\u306e\u5236\u5fa1\u3001\u30bb\u30f3\u30b5\u30fc\u5024\u306e\u53d6\u5f97\u306a\u3069\u3092\u5b9f\u73fe\u3059\u308b\u30e9\u30a4\u30d6\u30e9\u30ea\u3067\u3059\u3002npm\u3067\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3067\u304d\u307e\u3059\u3002\nrobot@ev3dev:~$\u3000 npm install ev3dev-lang\n\n\n\u30d0\u30c3\u30c6\u30ea\u30fc\u60c5\u5831\u3092\u53d6\u5f97\nEV3\u306e\u96fb\u6e90\u4f9b\u7d66\u7cfb\u7d71\u306e\u30c7\u30fc\u30bf\u3092\u53d6\u5f97\u3059\u308b\u306b\u306fPowerSupply\u30af\u30e9\u30b9\u3092\u5229\u7528\u3057\u307e\u3059\u3002\n\nbattery-metadata.js\n\nbattery-metadata.js\nvar ev3dev = require('ev3dev-lang');\n\nfunction printBatteryInfo(label, battery) {\n    console.log(label + \" --------------\");\n\n    if(battery.connected) { \n        console.log('  Technology: ' + battery.technology);\n        console.log('  Type: ' + battery.type);\n\n        console.log('  Current (microamps): ' + battery.measuredCurrent);\n        console.log('  Current (amps): ' + battery.currentAmps);\n\n        console.log('  Voltage (microvolts): ' + battery.measuredVoltage);\n        console.log('  Voltage (volts): ' + battery.voltageVolts);\n\n        console.log('  Max voltage (microvolts): ' + battery.maxVoltage);\n        console.log('  Min voltage (microvolts): ' + battery.minVoltage);\n    }\n    else\n        console.log(\"  Battery not connected!\");\n}\n\nvar defaultBattery = new ev3dev.PowerSupply();\nprintBatteryInfo(\"Default battery\", defaultBattery);\n\n\n\n\u5b9f\u884c\u7d50\u679c\nrobot@ev3dev:~/ev3dev-lang-js-test$ node battery-metadata.js\nDefault battery --------------\n  Technology: Li-ion\n  Type: Battery\n  Current (microamps): 233333\n  Current (amps): 0.233333\n  Voltage (microvolts): 8465666\n  Voltage (volts): 8.465666\n  Max voltage (microvolts): 7500000\n  Min voltage (microvolts): 7100000\n\n\nLED\u3092\u5236\u5fa1\nEV3\u306eLED\u3092\u5236\u5fa1\u3059\u308b\u306b\u306fEv3Leds\u30af\u30e9\u30b9\u3092\u5229\u7528\u3057\u307e\u3059\u3002\nEV3\u306eLED\u306f\u53f3\u5074\u3068\u5de6\u5074\u304c\u305d\u308c\u305e\u308c\u3001\u8d64\u8272\u3068\u7dd1\u8272\u306eLED\u306b\u3088\u3063\u3066\u69cb\u6210\u3055\u308c\u3066\u3044\u307e\u3059\u3002\u3064\u307e\u308a\u305d\u308c\u3089\u306eLED\u306e\u660e\u308b\u3055\u306e\u5f37\u5f31\u3092\u5909\u5316\u3055\u305b\u3066\u91cd\u306d\u5408\u308f\u305b\u308b\u3053\u3068\u3067\u9ec4\u8272\u3084\u30aa\u30ec\u30f3\u30b8\u8272\u3082\u8868\u73fe\u3059\u308b\u3053\u3068\u304c\u53ef\u80fd\u3067\u3059\u3002\n\u8a73\u3057\u304f\u306f\u3053\u3061\u3089\u3092\u53c2\u8003\n\nev3dev\u3067mindstorm-EV3\u306eLED\u3092\u5236\u5fa1\u3057\u3088\u3046\n\n\nfade-led.js\n\nfade-led.js\nvar ev3dev = require('ev3dev-lang');\n\nconsole.log('fading LEDs from green to red...');\n\nfor (var pct = 0; pct < 100; pct += 1) {\n    var brightnessVal = (pct / 100);\n    var invertedBrightnessVal = 1 - brightnessVal;\n\n    ev3dev.Ev3Leds.left.setColor([ brightnessVal, invertedBrightnessVal ]);\n    ev3dev.Ev3Leds.right.setColor([ brightnessVal, invertedBrightnessVal ]);\n\n    if(pct % 10 == 0)\n        console.log(pct + '%');\n\n    {   //Hack to sleep for time\n        //    SHOULD NOT BE USED IN PRODUCTION CODE\n        var start = new Date().getTime();\n        while(new Date().getTime() < start + 100) {\n            ;\n        }\n    }\n}\n\n\nsetColor\u30e1\u30bd\u30c3\u30c9\u306e\u7b2c\u4e00\u5f15\u6570\u306b\u306f\u914d\u5217\u3067\u8d64\u8272\u3001\u7dd1\u8272LED\u306e\u51fa\u529b\u306e\u5f37\u3055\u30920~1\u306e\u7bc4\u56f2\u3067\u6307\u5b9a\u3057\u307e\u3059\u3002\nev3dev.Ev3Leds.left.setColor([ brightnessVal, invertedBrightnessVal ]);\n\n\n\u5b9f\u884c\u7d50\u679c\nrobot@ev3dev:~/ev3dev-lang-js-test$ node fade-leds.js\nfading LEDs from green to red...\n0%\n10%\n20%\n30%\n40%\n50%\n60%\n70%\n80%\n90%\ndone\n\n\uff08\u30af\u30ea\u30c3\u30af\u3067\u52d5\u753b\u518d\u751f\uff09\n\n\n\u30e2\u30fc\u30bf\u30fc\u306e\u56de\u8ee2\u3068LED\u306e\u8272\u3092\u540c\u671f\u3055\u305b\u3066\u307f\u308b\nEV3\u306e\u30e2\u30fc\u30bf\u30fc\u3092\u5236\u5fa1\u3059\u308b\u306b\u306fMotor\u30af\u30e9\u30b9\u3092\u5229\u7528\u3057\u307e\u3059\u3002\n\nled-from-motor-speed.js\n\nled-from-motor-speed.js\nvar ev3dev = require('ev3dev-lang');\nvar stoppedBlinkInterval = 200;\n\nif(!ev3dev.Ev3Leds.isConnected) {\n    console.error(\"This sample can only run on the EV3 brick. Other platforms are not supported by this script.\");\n    process.exit(1);\n}\n\nvar motor = new ev3dev.Motor();\n\nif(!motor.connected) {\n    console.error(\"No valid motor was found. Please connect a tacho motor and try again.\");\n    process.exit(1);\n}\n\nconsole.log(\"Connected to motor \" + motor.address);\nmotor.stopAction = motor.stopActionValues.coast;\n\nconsole.log(\"Timer running... Rotate the motor and watch the on-board LEDs.\");\n\nsetInterval(function() {\n\n    if(motor.speed > 1) {\n        var rpsSpeed = Math.min(Math.abs(motor.speed) / motor.countPerRot, 1);\n        var ledColor = [rpsSpeed, 1 - rpsSpeed];\n        ev3dev.Ev3Leds.left.setColor(ledColor);\n        ev3dev.Ev3Leds.right.setColor(ledColor);\n    }\n    else {\n        ev3dev.Ev3Leds.left.setColor([0, 1]);\n        ev3dev.Ev3Leds.right.setColor([0, 1]);\n    }\n\n}, 80);\n\n\n\n\u5b9f\u884c\u7d50\u679c\nEV3\u30a4\u30f3\u30c6\u30ea\u30b8\u30a7\u30f3\u30c8\u30d6\u30ed\u30c3\u30af\u306eA\u30dd\u30fc\u30c8\u306bL\u30e2\u30fc\u30bf\u30fc\u3092\u63a5\u7d9a\u3057\u3066\u304b\u3089\u5b9f\u884c\u3057\u307e\u3059\u3002\nrobot@ev3dev:~/ev3dev-lang-js-test$ node led-from-motor-speed.js\nConnected to motor outA\nTimer running... Rotate the motor and watch the on-board LEDs.\n# \u30e2\u30fc\u30bf\u30fc\u3092\u624b\u3067\u56de\u8ee2\u3055\u305b\u3066\u307f\u307e\u3057\u3087\u3046\n# Ctrl-c\u3067\u7d42\u4e86\n\n\uff08\u30af\u30ea\u30c3\u30af\u3067\u52d5\u753b\u518d\u751f\uff09\n\n\n\u30bf\u30c3\u30c1\u30bb\u30f3\u30b5\u30fc\u3092\u4f7f\u3046\nEV3\u306e\u30bf\u30c3\u30c1\u30bb\u30f3\u30b5\u30fc\u3092\u5236\u5fa1\u3059\u308b\u306b\u306fTouchSensor\u30af\u30e9\u30b9\u3092\u5229\u7528\u3057\u307e\u3059\u3002\n\nraw-device-events.js\n\nraw-device-events.js\nvar ev3dev = require('ev3dev-lang');\n\nvar greenANSI = \"\\033[42m\";\nvar redANSI = \"\\033[41m\";\nvar resetANSI = \"\\033[0m\";\n\nvar touchSensor = new ev3dev.TouchSensor();\nif (!touchSensor.connected) {\n    console.error(\"No touch sensor could be found! Please verify that a touch sensor is plugged in and try again.\");\n    process.exit(1);\n}\n\ntouchSensor.registerEventCallback(function(error, touchInfo) {\n    if(error) throw error;\n    console.log(\"Sensor is \" + (touchInfo.lastPressed ? greenANSI + \"PRESSED\" : redANSI + \"RELEASED\") + resetANSI);\n},\n    function(userData) {\n        var isPressed = touchSensor.isPressed;\n        var changed = isPressed != userData.lastPressed;\n\n        userData.lastPressed = isPressed;\n        return changed;\n    }, false, { lastPressed: false });\n\n console.log(\"Press the touch sensor to trigger the press event.\");\n\n\nregisterEventCallback\u30e1\u30bd\u30c3\u30c9\u306e\u5b9a\u7fa9\u306f\u4ee5\u4e0b\u306e\u3068\u304a\u308a\u3067\u3059\u3002\u30b3\u30fc\u30eb\u30d0\u30c3\u30af\u95a2\u6570\u5185\u3067\u30bf\u30c3\u30c1\u30a4\u30d9\u30f3\u30c8\u60c5\u5831\u3092\u53d6\u5f97\u3057\u3066\u3044\u307e\u3059\u3002\nregisterEventCallback\n\nregisterEventCallback(\ncallbackFunction: function, \neventPredicate: function, \nfirstTriggerOnly?: boolean,\nuserCallbackData?: any)\n: void\n\n\n\u5b9f\u884c\u7d50\u679c\nEV3\u30a4\u30f3\u30c6\u30ea\u30b8\u30a7\u30f3\u30c8\u30d6\u30ed\u30c3\u30af\u306e1\u756a\u30dd\u30fc\u30c8\u306b\u30bf\u30c3\u30c1\u30bb\u30f3\u30b5\u30fc\u3092\u63a5\u7d9a\u3057\u3066\u304b\u3089\u5b9f\u884c\u3057\u307e\u3059\u3002\nrobot@ev3dev:~/ev3dev-lang-js-test$ node raw-device-events.js\nPress the touch sensor to trigger the press event.\n# \u30bf\u30c3\u30c1\u30bb\u30f3\u30b5\u30fc\u3092\u62bc\u3057\u305f\u308a\u96e2\u3057\u305f\u308a\u3057\u3066\u307f\u307e\u3057\u3087\u3046\nSensor is PRESSED\nSensor is RELEASED\n\n\n\u7279\u5b9a\u306e\u30dd\u30fc\u30c8\u306b\u63a5\u7d9a\u3057\u305f\u30e2\u30fc\u30bf\u30fc\u3092\u5236\u5fa1\n\u63a5\u7d9a\u30dd\u30fc\u30c8\u3092\u6307\u5b9a\u3057\u3066\u30e2\u30fc\u30bf\u30fc\u3092\u5236\u5fa1\u3059\u308b\u65b9\u6cd5\u3067\u3059\u3002\n\nrun-specific-motor.js\n\nrun-specific-motor.js\nvar ev3dev = require('ev3dev-lang');\n\nvar motor = new ev3dev.Motor(ev3dev.OUTPUT_A);\nif(!motor.connected) {\n    console.error(\"No motor was found on port A. Please connect a tacho motor to port A and try again.\");\n    process.exit(1);\n}\n\nmotor.runForDistance(360 * 10, 500, motor.stopActionValues.brake);\n\nconsole.log(\"Running the motor for 180 tacho counts...\");\n\n// Prevent Node from exiting until motor is done\nvar cancellationToken = setInterval(function() {\n    if(!motor.isRunning)\n        clearInterval(cancellationToken);\n}, 200);\n\n\nA\u30dd\u30fc\u30c8\u3092\u4f7f\u7528\u3059\u308b\u8a2d\u5b9a\nvar motor = new ev3dev.Motor(ev3dev.OUTPUT_A);\n\nrunForDistance\u30e1\u30bd\u30c3\u30c9\u306f\u7b2c\u4e00\u5f15\u6570\u306b\u56de\u8ee2\u89d2\u5ea6\u3001\u7b2c\u4e8c\u5f15\u6570\u306b\u56de\u8ee2\u901f\u5ea6\u3001\u7b2c\u4e09\u5f15\u6570\u306b\u52d5\u4f5c\u505c\u6b62\u30d1\u30e9\u30e1\u30fc\u30bf\u30fc\u3092\u8a2d\u5b9a\u3057\u307e\u3059\u3002\nmotor.runForDistance(360 * 10, 500, motor.stopActionValues.brake);\n\n\n\u5b9f\u884c\u7d50\u679c\nEV3\u30a4\u30f3\u30c6\u30ea\u30b8\u30a7\u30f3\u30c8\u30d6\u30ed\u30c3\u30af\u306eA\u30dd\u30fc\u30c8\u306bL\u30e2\u30fc\u30bf\u30fc\u3092\u63a5\u7d9a\u3057\u3066\u304b\u3089\u5b9f\u884c\u3057\u307e\u3059\u3002\nrobot@ev3dev:~/ev3dev-lang-js-test$ node run-specific-motor.js\nRunning the motor for 180 tacho counts...\n# \u30e2\u30fc\u30bf\u30fc\u304c10\u56de\u8ee2\u3057\u307e\u3059\n\n\n\u30bf\u30c3\u30c1\u30bb\u30f3\u30b5\u30fc\u3068\u30e2\u30fc\u30bf\u30fc\u3092\u9023\u643a\n\u30bf\u30c3\u30c1\u30bb\u30f3\u30b5\u30fc\u3092\u62bc\u3057\u3066\u3044\u308b\u9593\u3001\u30e2\u30fc\u30bf\u30fc\u304c\u56de\u8ee2\u3057\u7d9a\u3051\u308b\u30b3\u30fc\u30c9\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002\n\ntouch-sensor-motor-control.js\n\ntouch-sensor-motor-control.js\nvar ev3dev = require('ev3dev-lang');\n\nvar touchSensor = new ev3dev.TouchSensor();\nif(!touchSensor.connected) {\n    console.error(\"No touch sensor could be found! Please verify that a touch sensor is plugged in and try again.\");\n    process.exit(1);\n}\n\nvar motor = new ev3dev.Motor();\nif(!motor.connected) {\n    console.error(\"No valid motor was found. Please connect a tacho motor and try again.\");\n    process.exit(1);\n}\n\nconsole.log(\"Connected to touch sensor at address \" + touchSensor.address + \" and tacho motor at address \" + motor.address);\nconsole.log(\"Press the touch sensor to spin the motor.\");\n\nsetInterval(function() {\n    motor.start(motor.maxSpeed * touchSensor.getValue(0), motor.stopActionValues.hold);\n}, 10);\n\n\n\n\u5b9f\u884c\u7d50\u679c\nrobot@ev3dev:~/ev3dev-lang-js-test$ node touch-sensor-motor-control.js\nConnected to touch sensor at address in1 and tacho motor at address outA\nPress the touch sensor to spin the motor.\n# \u30bf\u30c3\u30c1\u30bb\u30f3\u30b5\u30fc\u3092\u62bc\u4e0b\u3057\u3066\u3044\u308b\u9593\u30e2\u30fc\u30bf\u30fc\u304c\u56de\u8ee2\u3057\u307e\u3059\n\n\uff08\u30af\u30ea\u30c3\u30af\u3067\u52d5\u753b\u518d\u751f\uff09\n\n\n\u53c2\u8003\n\u30b5\u30f3\u30d7\u30eb\u30d7\u30ed\u30b0\u30e9\u30e0\u306fev3dev-lang-js\u306e\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u3092\u5229\u7528\u3057\u3066\u3044\u307e\u3059\u3002\n## \u306f\u3058\u3081\u306b\nEV3\u3067\u52d5\u304fLinux\u74b0\u5883ev3dev\u3092\u4f7f\u3063\u3066\u958b\u767a\u3057\u307e\u3059\u3002\u3053\u306e\u8a18\u4e8b\u306f\u3001EV3\u306bev3dev\u3092\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3057\u3001SSH\u63a5\u7d9a\u3067\u304d\u3066\u3044\u308b\u72b6\u614b\u3067\u3042\u308b\u3053\u3068\u3092\u524d\u63d0\u306b\u3057\u3066\u3044\u307e\u3059\u3002\n\u74b0\u5883\u69cb\u7bc9\u304c\u3067\u304d\u3066\u3044\u306a\u3044\u65b9\u306f\u3053\u3061\u3089\u306e\u8a18\u4e8b\u3092\u53c2\u8003\u306b\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n>\n[mindstorm-EV3\u3092Linux\u3067\u5236\u5fa1\u3057\u3088\u3046! ev3dev OS\u306e\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3068\u3068SSH\u63a5\u7d9a](http://qiita.com/murotani/items/46f905bec33b1673c41a)\n\n\u3053\u306e\u8a18\u4e8b\u3067\u306fnodejs\u304b\u3089ev3dev\u3092\u5236\u5fa1\u3059\u308b\u30e9\u30a4\u30d6\u30e9\u30ea[ev3dev-lang-js](https://github.com/WasabiFan/ev3dev-lang-js)\u3092\u3001\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u3068\u3068\u3082\u306b\u7d39\u4ecb\u3057\u307e\u3059\u3002\n\n## nodejs\u306e\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\nev3dev\u306bnodejs\u3092\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3057\u307e\u3059\u3002\n\n```\nrobot@ev3dev:~$\u3000sudo apt-get update\nrobot@ev3dev:~$\u3000sudo apt-get install nodejs\n```\n\n##ev3dev-lang-js\u306e\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\n[ev3dev-lang-js](https://github.com/wasabifan/ev3dev-lang-js)\u306fjavascript\u3092\u4f7f\u3063\u3066EV3\u306e\u30e2\u30fc\u30bf\u30fc\u3084LED\u306e\u5236\u5fa1\u3001\u30bb\u30f3\u30b5\u30fc\u5024\u306e\u53d6\u5f97\u306a\u3069\u3092\u5b9f\u73fe\u3059\u308b\u30e9\u30a4\u30d6\u30e9\u30ea\u3067\u3059\u3002npm\u3067\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3067\u304d\u307e\u3059\u3002\n\n```\nrobot@ev3dev:~$\u3000 npm install ev3dev-lang\n```\n\n##\u30d0\u30c3\u30c6\u30ea\u30fc\u60c5\u5831\u3092\u53d6\u5f97\nEV3\u306e\u96fb\u6e90\u4f9b\u7d66\u7cfb\u7d71\u306e\u30c7\u30fc\u30bf\u3092\u53d6\u5f97\u3059\u308b\u306b\u306f[PowerSupply\u30af\u30e9\u30b9](http://wasabifan.github.io/ev3dev-lang-js/classes/_extras_.powersupply.html)\u3092\u5229\u7528\u3057\u307e\u3059\u3002\n####battery-metadata.js\n\n```js:battery-metadata.js\nvar ev3dev = require('ev3dev-lang');\n\nfunction printBatteryInfo(label, battery) {\n\tconsole.log(label + \" --------------\");\n\t\n\tif(battery.connected) {\t\n\t\tconsole.log('  Technology: ' + battery.technology);\n\t\tconsole.log('  Type: ' + battery.type);\n\t\t\n\t\tconsole.log('  Current (microamps): ' + battery.measuredCurrent);\n\t\tconsole.log('  Current (amps): ' + battery.currentAmps);\n\t\t\n\t\tconsole.log('  Voltage (microvolts): ' + battery.measuredVoltage);\n\t\tconsole.log('  Voltage (volts): ' + battery.voltageVolts);\n\t\t\n\t\tconsole.log('  Max voltage (microvolts): ' + battery.maxVoltage);\n\t\tconsole.log('  Min voltage (microvolts): ' + battery.minVoltage);\n\t}\n\telse\n\t    console.log(\"  Battery not connected!\");\n}\n\nvar defaultBattery = new ev3dev.PowerSupply();\nprintBatteryInfo(\"Default battery\", defaultBattery);\n```\n\n####\u5b9f\u884c\u7d50\u679c\n\n```\nrobot@ev3dev:~/ev3dev-lang-js-test$ node battery-metadata.js\nDefault battery --------------\n  Technology: Li-ion\n  Type: Battery\n  Current (microamps): 233333\n  Current (amps): 0.233333\n  Voltage (microvolts): 8465666\n  Voltage (volts): 8.465666\n  Max voltage (microvolts): 7500000\n  Min voltage (microvolts): 7100000\n```\n\n##LED\u3092\u5236\u5fa1\nEV3\u306eLED\u3092\u5236\u5fa1\u3059\u308b\u306b\u306f[Ev3Leds\u30af\u30e9\u30b9](http://wasabifan.github.io/ev3dev-lang-js/classes/_index_.ev3leds.html)\u3092\u5229\u7528\u3057\u307e\u3059\u3002\nEV3\u306eLED\u306f\u53f3\u5074\u3068\u5de6\u5074\u304c\u305d\u308c\u305e\u308c\u3001\u8d64\u8272\u3068\u7dd1\u8272\u306eLED\u306b\u3088\u3063\u3066\u69cb\u6210\u3055\u308c\u3066\u3044\u307e\u3059\u3002\u3064\u307e\u308a\u305d\u308c\u3089\u306eLED\u306e\u660e\u308b\u3055\u306e\u5f37\u5f31\u3092\u5909\u5316\u3055\u305b\u3066\u91cd\u306d\u5408\u308f\u305b\u308b\u3053\u3068\u3067\u9ec4\u8272\u3084\u30aa\u30ec\u30f3\u30b8\u8272\u3082\u8868\u73fe\u3059\u308b\u3053\u3068\u304c\u53ef\u80fd\u3067\u3059\u3002\n\n\u8a73\u3057\u304f\u306f\u3053\u3061\u3089\u3092\u53c2\u8003\n>\n[ev3dev\u3067mindstorm-EV3\u306eLED\u3092\u5236\u5fa1\u3057\u3088\u3046](http://qiita.com/murotani/items/59805240048082833dee)\n\n\n####fade-led.js\n\n```js:fade-led.js\nvar ev3dev = require('ev3dev-lang');\n\nconsole.log('fading LEDs from green to red...');\n\nfor (var pct = 0; pct < 100; pct += 1) {\n    var brightnessVal = (pct / 100);\n    var invertedBrightnessVal = 1 - brightnessVal;\n\n    ev3dev.Ev3Leds.left.setColor([ brightnessVal, invertedBrightnessVal ]);\n    ev3dev.Ev3Leds.right.setColor([ brightnessVal, invertedBrightnessVal ]);\n\n    if(pct % 10 == 0)\n        console.log(pct + '%');\n\n    {   //Hack to sleep for time\n        //    SHOULD NOT BE USED IN PRODUCTION CODE\n        var start = new Date().getTime();\n        while(new Date().getTime() < start + 100) {\n            ;\n        }\n    }\n}\n```\n\nsetColor\u30e1\u30bd\u30c3\u30c9\u306e\u7b2c\u4e00\u5f15\u6570\u306b\u306f\u914d\u5217\u3067\u8d64\u8272\u3001\u7dd1\u8272LED\u306e\u51fa\u529b\u306e\u5f37\u3055\u30920~1\u306e\u7bc4\u56f2\u3067\u6307\u5b9a\u3057\u307e\u3059\u3002\n```ev3dev.Ev3Leds.left.setColor([ brightnessVal, invertedBrightnessVal ]);\n```\n\n\n####\u5b9f\u884c\u7d50\u679c\n\n```\nrobot@ev3dev:~/ev3dev-lang-js-test$ node fade-leds.js\nfading LEDs from green to red...\n0%\n10%\n20%\n30%\n40%\n50%\n60%\n70%\n80%\n90%\ndone\n```\n\n\uff08\u30af\u30ea\u30c3\u30af\u3067\u52d5\u753b\u518d\u751f\uff09\n[![YouTube](http://i.ytimg.com/vi/PyGdc3c57ro/hqdefault.jpg)](https://www.youtube.com/watch?v=PyGdc3c57ro)\n\n\n##\u30e2\u30fc\u30bf\u30fc\u306e\u56de\u8ee2\u3068LED\u306e\u8272\u3092\u540c\u671f\u3055\u305b\u3066\u307f\u308b\nEV3\u306e\u30e2\u30fc\u30bf\u30fc\u3092\u5236\u5fa1\u3059\u308b\u306b\u306f[Motor\u30af\u30e9\u30b9](http://wasabifan.github.io/ev3dev-lang-js/classes/_motors_.motor.html)\u3092\u5229\u7528\u3057\u307e\u3059\u3002\n\n####led-from-motor-speed.js\n\n```js:led-from-motor-speed.js\nvar ev3dev = require('ev3dev-lang');\nvar stoppedBlinkInterval = 200;\n\nif(!ev3dev.Ev3Leds.isConnected) {\n    console.error(\"This sample can only run on the EV3 brick. Other platforms are not supported by this script.\");\n    process.exit(1);\n}\n\nvar motor = new ev3dev.Motor();\n\nif(!motor.connected) {\n    console.error(\"No valid motor was found. Please connect a tacho motor and try again.\");\n    process.exit(1);\n}\n\nconsole.log(\"Connected to motor \" + motor.address);\nmotor.stopAction = motor.stopActionValues.coast;\n\nconsole.log(\"Timer running... Rotate the motor and watch the on-board LEDs.\");\n\nsetInterval(function() {\n\n    if(motor.speed > 1) {\n        var rpsSpeed = Math.min(Math.abs(motor.speed) / motor.countPerRot, 1);\n        var ledColor = [rpsSpeed, 1 - rpsSpeed];\n        ev3dev.Ev3Leds.left.setColor(ledColor);\n        ev3dev.Ev3Leds.right.setColor(ledColor);\n    }\n    else {\n        ev3dev.Ev3Leds.left.setColor([0, 1]);\n        ev3dev.Ev3Leds.right.setColor([0, 1]);\n    }\n\n}, 80);\n```\n\n####\u5b9f\u884c\u7d50\u679c\nEV3\u30a4\u30f3\u30c6\u30ea\u30b8\u30a7\u30f3\u30c8\u30d6\u30ed\u30c3\u30af\u306eA\u30dd\u30fc\u30c8\u306bL\u30e2\u30fc\u30bf\u30fc\u3092\u63a5\u7d9a\u3057\u3066\u304b\u3089\u5b9f\u884c\u3057\u307e\u3059\u3002\n\n```\nrobot@ev3dev:~/ev3dev-lang-js-test$ node led-from-motor-speed.js\nConnected to motor outA\nTimer running... Rotate the motor and watch the on-board LEDs.\n# \u30e2\u30fc\u30bf\u30fc\u3092\u624b\u3067\u56de\u8ee2\u3055\u305b\u3066\u307f\u307e\u3057\u3087\u3046\n# Ctrl-c\u3067\u7d42\u4e86\n```\n\n\uff08\u30af\u30ea\u30c3\u30af\u3067\u52d5\u753b\u518d\u751f\uff09\n[![YouTube](http://i.ytimg.com/vi/oHIErPJ7yrc/hqdefault.jpg)](https://www.youtube.com/watch?v=oHIErPJ7yrc)\n\n##\u30bf\u30c3\u30c1\u30bb\u30f3\u30b5\u30fc\u3092\u4f7f\u3046\nEV3\u306e\u30bf\u30c3\u30c1\u30bb\u30f3\u30b5\u30fc\u3092\u5236\u5fa1\u3059\u308b\u306b\u306f[TouchSensor\u30af\u30e9\u30b9](http://wasabifan.github.io/ev3dev-lang-js/classes/_sensors_.touchsensor.html)\u3092\u5229\u7528\u3057\u307e\u3059\u3002\n\n####raw-device-events.js\n\n```js:raw-device-events.js\nvar ev3dev = require('ev3dev-lang');\n\nvar greenANSI = \"\\033[42m\";\nvar redANSI = \"\\033[41m\";\nvar resetANSI = \"\\033[0m\";\n\nvar touchSensor = new ev3dev.TouchSensor();\nif (!touchSensor.connected) {\n    console.error(\"No touch sensor could be found! Please verify that a touch sensor is plugged in and try again.\");\n    process.exit(1);\n}\n\ntouchSensor.registerEventCallback(function(error, touchInfo) {\n    if(error) throw error;\n    console.log(\"Sensor is \" + (touchInfo.lastPressed ? greenANSI + \"PRESSED\" : redANSI + \"RELEASED\") + resetANSI);\n},\n    function(userData) {\n        var isPressed = touchSensor.isPressed;\n        var changed = isPressed != userData.lastPressed;\n\n        userData.lastPressed = isPressed;\n        return changed;\n    }, false, { lastPressed: false });\n\n console.log(\"Press the touch sensor to trigger the press event.\");\n```\nregisterEventCallback\u30e1\u30bd\u30c3\u30c9\u306e\u5b9a\u7fa9\u306f\u4ee5\u4e0b\u306e\u3068\u304a\u308a\u3067\u3059\u3002\u30b3\u30fc\u30eb\u30d0\u30c3\u30af\u95a2\u6570\u5185\u3067\u30bf\u30c3\u30c1\u30a4\u30d9\u30f3\u30c8\u60c5\u5831\u3092\u53d6\u5f97\u3057\u3066\u3044\u307e\u3059\u3002\n\n[registerEventCallback](http://wasabifan.github.io/ev3dev-lang-js/classes/_sensors_.touchsensor.html#registereventcallback)\n>\nregisterEventCallback(\ncallbackFunction: function, \neventPredicate: function, \nfirstTriggerOnly?: boolean,\nuserCallbackData?: any)\n: void\n\n####\u5b9f\u884c\u7d50\u679c\nEV3\u30a4\u30f3\u30c6\u30ea\u30b8\u30a7\u30f3\u30c8\u30d6\u30ed\u30c3\u30af\u306e1\u756a\u30dd\u30fc\u30c8\u306b\u30bf\u30c3\u30c1\u30bb\u30f3\u30b5\u30fc\u3092\u63a5\u7d9a\u3057\u3066\u304b\u3089\u5b9f\u884c\u3057\u307e\u3059\u3002\n\n```\nrobot@ev3dev:~/ev3dev-lang-js-test$ node raw-device-events.js\nPress the touch sensor to trigger the press event.\n# \u30bf\u30c3\u30c1\u30bb\u30f3\u30b5\u30fc\u3092\u62bc\u3057\u305f\u308a\u96e2\u3057\u305f\u308a\u3057\u3066\u307f\u307e\u3057\u3087\u3046\nSensor is PRESSED\nSensor is RELEASED\n```\n\n##\u7279\u5b9a\u306e\u30dd\u30fc\u30c8\u306b\u63a5\u7d9a\u3057\u305f\u30e2\u30fc\u30bf\u30fc\u3092\u5236\u5fa1\n\u63a5\u7d9a\u30dd\u30fc\u30c8\u3092\u6307\u5b9a\u3057\u3066\u30e2\u30fc\u30bf\u30fc\u3092\u5236\u5fa1\u3059\u308b\u65b9\u6cd5\u3067\u3059\u3002\n\n####run-specific-motor.js\n\n```js:run-specific-motor.js\nvar ev3dev = require('ev3dev-lang');\n\nvar motor = new ev3dev.Motor(ev3dev.OUTPUT_A);\nif(!motor.connected) {\n    console.error(\"No motor was found on port A. Please connect a tacho motor to port A and try again.\");\n    process.exit(1);\n}\n\nmotor.runForDistance(360 * 10, 500, motor.stopActionValues.brake);\n\nconsole.log(\"Running the motor for 180 tacho counts...\");\n\n// Prevent Node from exiting until motor is done\nvar cancellationToken = setInterval(function() {\n    if(!motor.isRunning)\n        clearInterval(cancellationToken);\n}, 200);\n```\nA\u30dd\u30fc\u30c8\u3092\u4f7f\u7528\u3059\u308b\u8a2d\u5b9a\n\n```var motor = new ev3dev.Motor(ev3dev.OUTPUT_A);\n```\nrunForDistance\u30e1\u30bd\u30c3\u30c9\u306f\u7b2c\u4e00\u5f15\u6570\u306b\u56de\u8ee2\u89d2\u5ea6\u3001\u7b2c\u4e8c\u5f15\u6570\u306b\u56de\u8ee2\u901f\u5ea6\u3001\u7b2c\u4e09\u5f15\u6570\u306b\u52d5\u4f5c\u505c\u6b62\u30d1\u30e9\u30e1\u30fc\u30bf\u30fc\u3092\u8a2d\u5b9a\u3057\u307e\u3059\u3002\n\n```motor.runForDistance(360 * 10, 500, motor.stopActionValues.brake);\n```\n\n####\u5b9f\u884c\u7d50\u679c\nEV3\u30a4\u30f3\u30c6\u30ea\u30b8\u30a7\u30f3\u30c8\u30d6\u30ed\u30c3\u30af\u306eA\u30dd\u30fc\u30c8\u306bL\u30e2\u30fc\u30bf\u30fc\u3092\u63a5\u7d9a\u3057\u3066\u304b\u3089\u5b9f\u884c\u3057\u307e\u3059\u3002\n\n```\nrobot@ev3dev:~/ev3dev-lang-js-test$ node run-specific-motor.js\nRunning the motor for 180 tacho counts...\n# \u30e2\u30fc\u30bf\u30fc\u304c10\u56de\u8ee2\u3057\u307e\u3059\n```\n\n##\u30bf\u30c3\u30c1\u30bb\u30f3\u30b5\u30fc\u3068\u30e2\u30fc\u30bf\u30fc\u3092\u9023\u643a\n\u30bf\u30c3\u30c1\u30bb\u30f3\u30b5\u30fc\u3092\u62bc\u3057\u3066\u3044\u308b\u9593\u3001\u30e2\u30fc\u30bf\u30fc\u304c\u56de\u8ee2\u3057\u7d9a\u3051\u308b\u30b3\u30fc\u30c9\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002\n##touch-sensor-motor-control.js\n\n```js:touch-sensor-motor-control.js\nvar ev3dev = require('ev3dev-lang');\n\nvar touchSensor = new ev3dev.TouchSensor();\nif(!touchSensor.connected) {\n    console.error(\"No touch sensor could be found! Please verify that a touch sensor is plugged in and try again.\");\n    process.exit(1);\n}\n\nvar motor = new ev3dev.Motor();\nif(!motor.connected) {\n    console.error(\"No valid motor was found. Please connect a tacho motor and try again.\");\n    process.exit(1);\n}\n\nconsole.log(\"Connected to touch sensor at address \" + touchSensor.address + \" and tacho motor at address \" + motor.address);\nconsole.log(\"Press the touch sensor to spin the motor.\");\n\nsetInterval(function() {\n    motor.start(motor.maxSpeed * touchSensor.getValue(0), motor.stopActionValues.hold);\n}, 10);\n```\n\n\n####\u5b9f\u884c\u7d50\u679c\n\n```\nrobot@ev3dev:~/ev3dev-lang-js-test$ node touch-sensor-motor-control.js\nConnected to touch sensor at address in1 and tacho motor at address outA\nPress the touch sensor to spin the motor.\n# \u30bf\u30c3\u30c1\u30bb\u30f3\u30b5\u30fc\u3092\u62bc\u4e0b\u3057\u3066\u3044\u308b\u9593\u30e2\u30fc\u30bf\u30fc\u304c\u56de\u8ee2\u3057\u307e\u3059\n```\n\n\uff08\u30af\u30ea\u30c3\u30af\u3067\u52d5\u753b\u518d\u751f\uff09\n[![YouTube](http://i.ytimg.com/vi/1to_JLEpQ_8/hqdefault.jpg)](https://www.youtube.com/watch?v=1to_JLEpQ_8)\n\n\n## \u53c2\u8003\n\u30b5\u30f3\u30d7\u30eb\u30d7\u30ed\u30b0\u30e9\u30e0\u306f[ev3dev-lang-js](https://github.com/WasabiFan/ev3dev-lang-js)\u306e\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u3092\u5229\u7528\u3057\u3066\u3044\u307e\u3059\u3002\n", "tags": ["EV3", "ev3dev", "Node.js", "ev3dev-lang-js"]}