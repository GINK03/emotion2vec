{"context": " More than 1 year has passed since last update.LINQ for C++ \u3068\u3044\u3046\u30e9\u30a4\u30d6\u30e9\u30ea\u30fc\u306bjoin\u3068\u3044\u3046\u30e1\u30bd\u30c3\u30c9\u304c\u3042\u308a\u307e\u3059\u3002\nhttp://cpplinq.codeplex.com/\n\u3053\u308c\u3092\u4f7f\u3046\u3068SQL\u306eJOIN\u307f\u305f\u3044\u306a\u3053\u3068\u8d85\u7c21\u5358\u306b\u3067\u304d\u307e\u3059\u3002\n\u3084\u3063\u3064\u3051\u3067\u4f5c\u3063\u305f\u30b5\u30f3\u30d7\u30eb\u3067\u3059\u304c\u3001join_test.cpp\u306emain()\u306e\u4e2d\u3067\u4f7f\u3063\u3066\u3044\u307e\u3059\u3002\n\u3042\u3068\u3001\u3053\u306e\u30e9\u30a4\u30d6\u30e9\u30ea\u30fc\u306f\u30e2\u30c0\u30f3\u306a\u4f5c\u308a\u3067\u30d8\u30c3\u30c0\u30fc\u30fb\u30aa\u30f3\u30ea\u30fc\u306a\u306e\u3067\u4f7f\u3044\u3084\u3059\u3044\u3067\u3059\u3002\n\njoin_test.cpp\n#include <iostream>\n#include <fstream>\n#include <vector>\n#include <string>\n#include <utility>\n#include <cstdlib>\n#include \"cpplinq.hpp\"\n\nusing namespace std;\n\nstruct test_data\n{\n    test_data() : string_code(), numeric_data()\n    {}\n\n    test_data(string string_code0, long numeric_data0) : string_code(string_code0), numeric_data(numeric_data0)\n    {}\n\n    string string_code;\n    long numeric_data;\n};\n\nvoid read_file(vector<test_data>& input, const char *filename)\n{\n    ifstream in(filename);\n\n    string line;\n    while (getline(in, line)) {\n        size_t pos = line.find('\\t');\n        if (pos != string::npos) {\n            long numeric_data = atol(&line[pos] + 1);\n            input.emplace_back(line.substr(0, pos), numeric_data);\n        }\n    }\n}\n\nint main()\n{\n    using namespace cpplinq;\n\n    vector<test_data> input1, input2;\n\n    read_file(input1, \"input1.tsv\");\n    read_file(input2, \"input2.tsv\");\n\n    auto query = from(input1)\n        >> join (\n            from(input2),\n            [](test_data const& left) { return left.string_code; },\n            [](test_data const& right) { return right.string_code; },\n            [](test_data const& left, test_data const& right) { return make_pair(left.numeric_data, right.numeric_data); })\n        >> to_vector()\n        ;\n\n    for (auto const& row : query) {\n        cout << row.first << \"\\t\" << row.second << endl;\n    }\n\n    return 0;\n}\n\n\n\u30d3\u30eb\u30c9\u7528\u306e\u30d5\u30a1\u30a4\u30eb\n\nJamroot\nimport testing ;\n\nrun join_test.cpp\n    :\n    :\n    : <toolset>gcc:<cxxflags>-std=gnu++0x <toolset>clang:<cxxflags>-std=c++11\n    ;\n\n\n\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u4f5c\u6210\u30c4\u30fc\u30eb\n\ngen_test_data.py\n#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\nimport uuid\nimport random\nfrom optparse import OptionParser\n\nparser = OptionParser()\nparser.add_option(\"-n\", \"--num\", dest=\"num\", default=\"100\")\n(options, args) = parser.parse_args()\n\ndata = [ (uuid.uuid4(), num) for num in range(0, int(options.num)) ]\n\nrandom.shuffle(data)\nwith open('input1.tsv', 'wb') as f:\n    for row in data:\n        print >>f, \"%s\\t%d\" % (row[0], row[1])\n\nrandom.shuffle(data)\nwith open('input2.tsv', 'wb') as f:\n    for row in data:\n        print >>f, \"%s\\t%d\" % (row[0], row[1])\n\n\n\u4f7f\u3044\u65b9\u306e\u4f8b\n./gen_test_data.py --num=100\ntime bjam variant=release -a\n\n\u540c\u3058\u3088\u3046\u306a\u30e9\u30a4\u30d6\u30e9\u30ea\u30fc\u3067\u3001Oven\u3068\u3044\u3046\u306e\u3092\u4f7f\u3063\u3066\u3082\u3067\u304d\u305d\u3046\u306a\u6c17\u304c\u3057\u307e\u3059\u304c\u3001\u3053\u3061\u3089\u306f\u8a66\u3057\u3066\u306a\u3044\u3067\u3059\u3002\nLINQ for C++ \u3068\u3044\u3046\u30e9\u30a4\u30d6\u30e9\u30ea\u30fc\u306bjoin\u3068\u3044\u3046\u30e1\u30bd\u30c3\u30c9\u304c\u3042\u308a\u307e\u3059\u3002\n\nhttp://cpplinq.codeplex.com/\n\n\u3053\u308c\u3092\u4f7f\u3046\u3068SQL\u306eJOIN\u307f\u305f\u3044\u306a\u3053\u3068\u8d85\u7c21\u5358\u306b\u3067\u304d\u307e\u3059\u3002\n\n\u3084\u3063\u3064\u3051\u3067\u4f5c\u3063\u305f\u30b5\u30f3\u30d7\u30eb\u3067\u3059\u304c\u3001join_test.cpp\u306emain()\u306e\u4e2d\u3067\u4f7f\u3063\u3066\u3044\u307e\u3059\u3002\n\n\u3042\u3068\u3001\u3053\u306e\u30e9\u30a4\u30d6\u30e9\u30ea\u30fc\u306f\u30e2\u30c0\u30f3\u306a\u4f5c\u308a\u3067\u30d8\u30c3\u30c0\u30fc\u30fb\u30aa\u30f3\u30ea\u30fc\u306a\u306e\u3067\u4f7f\u3044\u3084\u3059\u3044\u3067\u3059\u3002\n\n```cpp:join_test.cpp\n#include <iostream>\n#include <fstream>\n#include <vector>\n#include <string>\n#include <utility>\n#include <cstdlib>\n#include \"cpplinq.hpp\"\n\nusing namespace std;\n\nstruct test_data\n{\n    test_data() : string_code(), numeric_data()\n    {}\n\n    test_data(string string_code0, long numeric_data0) : string_code(string_code0), numeric_data(numeric_data0)\n    {}\n\n    string string_code;\n    long numeric_data;\n};\n\nvoid read_file(vector<test_data>& input, const char *filename)\n{\n    ifstream in(filename);\n\n    string line;\n    while (getline(in, line)) {\n        size_t pos = line.find('\\t');\n        if (pos != string::npos) {\n            long numeric_data = atol(&line[pos] + 1);\n            input.emplace_back(line.substr(0, pos), numeric_data);\n        }\n    }\n}\n\nint main()\n{\n    using namespace cpplinq;\n\n    vector<test_data> input1, input2;\n\n    read_file(input1, \"input1.tsv\");\n    read_file(input2, \"input2.tsv\");\n\n    auto query = from(input1)\n        >> join (\n            from(input2),\n            [](test_data const& left) { return left.string_code; },\n            [](test_data const& right) { return right.string_code; },\n            [](test_data const& left, test_data const& right) { return make_pair(left.numeric_data, right.numeric_data); })\n        >> to_vector()\n        ;\n\n    for (auto const& row : query) {\n        cout << row.first << \"\\t\" << row.second << endl;\n    }\n\n    return 0;\n}\n```\n\n\u30d3\u30eb\u30c9\u7528\u306e\u30d5\u30a1\u30a4\u30eb\n\n```text:Jamroot\nimport testing ;\n\nrun join_test.cpp\n    :\n    :\n    : <toolset>gcc:<cxxflags>-std=gnu++0x <toolset>clang:<cxxflags>-std=c++11\n    ;\n```\n\n\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u4f5c\u6210\u30c4\u30fc\u30eb\n\n```py:gen_test_data.py\n#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\nimport uuid\nimport random\nfrom optparse import OptionParser\n\nparser = OptionParser()\nparser.add_option(\"-n\", \"--num\", dest=\"num\", default=\"100\")\n(options, args) = parser.parse_args()\n\ndata = [ (uuid.uuid4(), num) for num in range(0, int(options.num)) ]\n\nrandom.shuffle(data)\nwith open('input1.tsv', 'wb') as f:\n    for row in data:\n        print >>f, \"%s\\t%d\" % (row[0], row[1])\n\nrandom.shuffle(data)\nwith open('input2.tsv', 'wb') as f:\n    for row in data:\n        print >>f, \"%s\\t%d\" % (row[0], row[1])\n```\n\n\u4f7f\u3044\u65b9\u306e\u4f8b\n\n```bash\n./gen_test_data.py --num=100\ntime bjam variant=release -a\n```\n\n\u540c\u3058\u3088\u3046\u306a\u30e9\u30a4\u30d6\u30e9\u30ea\u30fc\u3067\u3001Oven\u3068\u3044\u3046\u306e\u3092\u4f7f\u3063\u3066\u3082\u3067\u304d\u305d\u3046\u306a\u6c17\u304c\u3057\u307e\u3059\u304c\u3001\u3053\u3061\u3089\u306f\u8a66\u3057\u3066\u306a\u3044\u3067\u3059\u3002\n", "tags": ["C++", "C++11"]}