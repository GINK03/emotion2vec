{"context": "\n\nTL;DR\nModule loading nirvana for webpack: await-loader.\nconst myModule = await require('await!my-module');\n\n\nRationale\nLoading modules in CommonJS manner is graceful, but slows down application loading time due to all modules are built into single huge bundle. On the other side, when you use AMD, you can speed up load time, but you risk to get too complicated and terrible code.\n\nExisting solutions (for webpack)\n\n\npromise-loader\n\nUsing this loader, you can asynchronously load modules like this:\n// TypeScript/ES7\nconst loadMyModule = require('promise?bluebird!my-module');\nconst myModule     = await loadMyModule();\n// Do what you want.\n\nor this:\n// ES6\nvar loadMyModule = require('promise?bluebird!my-module');\nloadMyModule().then(function (myModule) {\n    // Do what you want.\n});\n\nAs you can see, this loader doesn't return loaded module immediately, instead you have to initiate loading manually, and then \u2014 do what you want with resolved promise. Also, it requires you to specify promise library of your choice; even if you are using native promises or already loaded promise library, you must specify promise library as global.\n\nMy solution\nSimple as this:\n// TypeScript/ES7\nconst myModule = await require('await!my-module');\n// Do what you want!\n\nPros:\n\n Modules are loaded asynchronously,\n but without the pain and mess.\n Doesn't require any configuration in loader's query string.\n\n## TL;DR\n\nModule loading nirvana for webpack: [await-loader](https://www.npmjs.com/package/await-loader).\n\n````javascript\nconst myModule = await require('await!my-module');\n````\n\n## Rationale\n\nLoading modules in CommonJS manner is graceful, but slows down application loading time due to all modules are built into single huge bundle. On the other side, when you use AMD, you can speed up load time, but you risk to get too complicated and terrible code.\n\n## Existing solutions *(for webpack)*\n\n### [promise-loader](https://github.com/gaearon/promise-loader)\n\nUsing this loader, you can asynchronously load modules like this:\n\n````javascript\n// TypeScript/ES7\nconst loadMyModule = require('promise?bluebird!my-module');\nconst myModule     = await loadMyModule();\n// Do what you want.\n````\n\nor this:\n\n````javascript\n// ES6\nvar loadMyModule = require('promise?bluebird!my-module');\nloadMyModule().then(function (myModule) {\n    // Do what you want.\n});\n````\n\nAs you can see, this loader doesn't return loaded module immediately, instead you have to initiate loading manually, and then \u2014 do what you want with resolved promise. Also, it **requires** you to specify promise library of your choice; even if you are using native promises or already loaded promise library, you must specify promise library as `global`.\n\n## My solution\n\nSimple as this:\n\n````javascript\n// TypeScript/ES7\nconst myModule = await require('await!my-module');\n// Do what you want!\n````\n\nPros:\n\n *  Modules are loaded asynchronously,\n *  but without the pain and mess.\n *  Doesn't require any configuration in loader's query string.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "tags": ["JavaScript", "webpack", "English"]}