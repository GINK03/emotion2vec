{"context": " More than 1 year has passed since last update.\n\n\u6982\u8981\n\u5b9f\u52d9\u3067Actor\u30e2\u30c7\u30eb\u3092\u5b9f\u88c5\u3057\u305f\u30d5\u30ec\u30fc\u30e0\u30ef\u30fc\u30af Akka \u3092 Java \u304b\u3089\u4f7f\u3063\u3066\u307f\u307e\u3057\u305f\u3002\n\u305d\u306e\u969b\u306b\u6c17\u3065\u3044\u305f\u4e8b\u3084\u4f7f\u3044\u65b9\u306a\u3069\u3092\u66f8\u304d\u8a18\u3057\u305f\u3044\u3068\u601d\u3044\u307e\u3059\u3002\nAkka \u3092 Java \u304b\u3089\u4f7f\u3063\u3066\u3044\u308b\u60c5\u5831\u304c\u5c11\u306a\u304f\u82e6\u52b4\u3057\u305f\u306e\u3067\u66f8\u304d\u8a18\u3057\u3066\u304a\u304d\u307e\u3059\u3002\n\uff08\u516c\u5f0f\u30da\u30fc\u30b8\uff09http://akka.io/\n\n\u7d50\u8ad6\nAkka \u3092\u4f7f\u3063\u3066\u307f\u3066\u826f\u304b\u3063\u305f\u3067\u3059\uff01\n\u4e26\u5217\u51e6\u7406\u3092\u7c21\u5358\u306b\u5b9f\u73fe\u3067\u304d\u307e\u3057\u305f\u3002\n\u4f55\u3088\u308a\u3082\u65b0\u3057\u304f\u4fbf\u5229\u306b\u306a\u308b\u30d5\u30ec\u30fc\u30e0\u30ef\u30fc\u30af\u3092\u5b66\u3073\u306a\u304c\u3089\u5b9f\u88c5\u3059\u308b\u3053\u3068\u3067\u30e2\u30c1\u30d9\u30fc\u30b7\u30e7\u30f3\u9ad8\u304f\u958b\u767a\u3067\u304d\u307e\u3057\u305f\u3002\n\u4eca\u5f8c\u3082\u6a5f\u4f1a\u304c\u3042\u308b\u5ea6\u306b\u4f7f\u304a\u3046\u3068\u601d\u3063\u3066\u3044\u307e\u3059\u3002\n\n\u4f55\u304c\u826f\u304b\u3063\u305f\u304b\n\n\u30de\u30eb\u30c1\u30b9\u30ec\u30c3\u30c9\u51e6\u7406\u304c\u7c21\u5358\u306b\u5b9f\u73fe\u3067\u304d\u308b\uff01\uff01\uff01\n\u8aa4\u89e3\u3092\u6050\u308c\u305a\u306b\u8a00\u3044\u5207\u3063\u3066\u3057\u307e\u3046\u3068 Akka \u3068\u306f\u30ce\u30f3\u30d6\u30ed\u30c3\u30ad\u30f3\u30b0\u306a\u30de\u30eb\u30c1\u30b9\u30ec\u30c3\u30c9\u3092\u7c21\u5358\u306b\u8a18\u8ff0\u51fa\u6765\u308b\u30d5\u30ec\u30fc\u30e0\u30ef\u30fc\u30af\u3067\u3059\u3002\n\u4e26\u5217\u5206\u6563\u51e6\u7406\u3092 \u30af\u30e9\u30b9\u30bf\u30fc\uff08ActorSystem\uff09\u3068 Singletion \u306a\u30b9\u30ec\u30c3\u30c9\uff08Actor\uff09\u3067\u5b9f\u73fe\u3057\u3066\u3044\u307e\u3059\u3002\n\u5404 Actor \u306f \n\u30fbSingleton \u306a\u30b9\u30ec\u30c3\u30c9\u3067\u52d5\u4f5c\u3059\u308b\n\u30fbActorSystem \u5185\u3067\u5404 Actor \u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u540d\u524d\u3067\u7ba1\u7406\u3055\u308c\u3066\u3044\u3066\u540d\u524d\u3092\u6307\u5b9a\u3059\u308b\u3060\u3051\u3067 Actor (Singleton \u30b9\u30ec\u30c3\u30c9)\u3092\u4f5c\u308b or \u547c\u3073\u51fa\u3059\u4e8b\u304c\u51fa\u6765\u308b\n\u30fbFIFO \u306a Queue \u3092\u6301\u3063\u3066\u3044\u3066\u4f9d\u983c\u3055\u308c\u305f\u9806\u756a\u306b\u51e6\u7406\u51fa\u6765\u308b\uff08Queue\u306fFIFO\u4ee5\u5916\u306b\u81ea\u7531\u306b\u8a2d\u5b9a\u53ef\u80fd\uff09\n\u30fb\u30e1\u30c3\u30bb\u30fc\u30b8\u306b\u3088\u308a\u4ed6Actor\u3078\u51e6\u7406\u3092\u79fb\u8b72\u51fa\u6765\u308b\n\n\u69d8\u3005\u306a router \u304c\u7d20\u6575\uff01\nActor \u9593\u306e\u9023\u643a\u306f Java Object \u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3084\u6587\u5b57\u5217\u3092\u30e1\u30c3\u30bb\u30fc\u30b8\u3068\u3057\u3066\u3084\u308a\u3068\u308a\u51fa\u6765\u307e\u3059\u3002\n\u30e1\u30c3\u30bb\u30fc\u30b8\u306b\u306f\u3001Post \u3059\u308b\u3088\u3046\u306a\u6295\u3052\u3063\u3071\u306a\u3057\u306e\u30e1\u30c3\u30bb\u30fc\u30b8\u3068 Send \u3059\u308b\u3088\u3046\u306a\u8fd4\u4e8b\u3092\u3082\u3089\u3046\u30e1\u30c3\u30bb\u30fc\u30b8\u304c\u3042\u308a\u307e\u3059\u3002\n\u30e1\u30c3\u30bb\u30fc\u30b8\u306e\u9001\u4fe1\u30d1\u30bf\u30fc\u30f3\u306f\n\u30fb\u5b9b\u5148\u6307\u5b9a\u306e\u30e1\u30c3\u30bb\u30fc\u30b8\u914d\u4fe1\n\u30fb\u30e9\u30a6\u30f3\u30c9\u30ed\u30d3\u30f3\u306b\u3088\u308b\u30e1\u30c3\u30bb\u30fc\u30b8\u914d\u4fe1\n\u30fb\u30d6\u30ed\u30fc\u30c9\u30ad\u30e3\u30b9\u30c8\u306b\u3088\u308b\u8907\u6570Actor\u3078\u306e\u30e1\u30c3\u30bb\u30fc\u30b8\u914d\u4fe1\n\uff08\u516c\u5f0f\u30da\u30fc\u30b8\uff09http://doc.akka.io/docs/akka/2.4.1/java/routing.html\n\nLet it crash\n\u5931\u6557\u3057\u305f\u3089\u6368\u3066\u3066\u3057\u307e\u3063\u3066\u3084\u308a\u76f4\u305d\u3046\u3092\u7c21\u5358\u306b\u5b9f\u73fe\u3057\u3066\u3044\u307e\u3059\u3002\n\u30a4\u30df\u30e5\u30fc\u30bf\u30d6\u30eb\u30a4\u30f3\u30d5\u30e9\u30b9\u30c8\u30e9\u30af\u30c1\u30e3\u3068\u4f3c\u3066\u3044\u308b\u601d\u60f3\u3067\u3059\u3002\n\uff08\u516c\u5f0f\u30da\u30fc\u30b8\uff09http://doc.akka.io/docs/akka/2.4.1/java/fault-tolerance.html\n\u5404 Actor \u306b\u306f\u30a8\u30e9\u30fc\u767a\u751f\u3092\u691c\u77e5\u3059\u308b SuperVisior \u3068 Exception \u767a\u751f\u6642\u306b\u3069\u306e\u3088\u3046\u306b\u632f\u308b\u821e\u3046\u304b Strategy \u3092\u5b9a\u7fa9\u3067\u304d\u307e\u3059\u3002\n\u4f8b\u3048\u3070\n\u30fb\u30ea\u30c8\u30e9\u30a4\u53ef\u80fd\u306a\u30a8\u30e9\u30fc\u304c\u767a\u751f\u3057\u305f\u3089\u518d\u5ea6 Actor \u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u4f5c\u308a\u306a\u304a\u3057\u3066\u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u518d\u9001\u3057\u3066\u51e6\u7406\u3092\u884c\u3046\n\u30fb\u30ea\u30c8\u30e9\u30a4\u4e0d\u80fd\u306a\u30a8\u30e9\u30fc\u304c\u767a\u751f\u3057\u305f\u3089\u518d\u5b9f\u884c\u3092\u884c\u308f\u305a\u30ed\u30b0\u306b\u51fa\u529b\u3057\u3066\u7d42\u4e86\u3055\u305b\u308b\n\u306a\u3069\u53ef\u80fd\u3067\u3059\u3002\n\uff08\u516c\u5f0f\u30da\u30fc\u30b8\uff09http://doc.akka.io/docs/akka/2.4.1/general/supervision.html\n\nLocal \u304a\u3088\u3073 Remote Cluster \u3092\u69cb\u7bc9\u3067\u304d\u308b\nActorSystem \u3068\u3044\u3046 Cluster \u306b\u3088\u3063\u3066\u3001 Local \u304a\u3088\u3073 Remote \u30db\u30b9\u30c8\u3067 Actor \u51e6\u7406\u3092\u5b9f\u73fe\u3067\u304d\u307e\u3059\u3002\n\u51e6\u7406\u3092\u30b9\u30b1\u30fc\u30eb\u3055\u305b\u305f\u3051\u308c\u3070\u30b5\u30fc\u30d0\u3092\u8ffd\u52a0\u3057\u3066 Actor \u306b\u3088\u308b\u30e1\u30c3\u30bb\u30fc\u30b8\u306e\u3084\u308a\u3068\u308a\u3067\u51e6\u7406\u3092\u5206\u6563\u3067\u304d\u307e\u3059\u3002\n\uff08\u516c\u5f0f\u30da\u30fc\u30b8\uff09http://doc.akka.io/docs/akka/2.4.1/java/remoting.html\n\nJava \u30a8\u30f3\u30b8\u30cb\u30a2\u304c Scala \u3092\u5b66\u3076\u304d\u3063\u304b\u3051\u306b\u306a\u308b\uff08\u306e\u3067\u306f\uff09\uff01\uff01\nJava \u3084 Scala \u306f IDE \u3092\u4f7f\u3063\u3066\u958b\u767a\u3059\u308b\u4e8b\u304c\u591a\u3044\u3068\u601d\u3044\u307e\u3059\u304c\u3001\nEclipse \u3067\u306f\u3000F3 \u30ad\u30fc\u3001IntelliJ Idea \u3067\u306f Command + B\uff08\u5f53\u65b9Mac\u3067\u958b\u767a\uff09 \u3067\u5b9a\u7fa9\u3078\u30b8\u30e3\u30f3\u30d7\u3057\u3066\u3044\u308b\u3068\n\u5ea6\u3005 Scala \u3067\u5b9f\u88c5\u3055\u308c\u305f\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u306b\u51fa\u4f1a\u3046\u4e8b\u306b\u306a\u308b\u3068\u601d\u3044\u307e\u3059\u3002\n\u898b\u3066\u3044\u308b\u3046\u3061\u306b Scala \u3078\u306e\u62b5\u6297\u304c\u8584\u308c\u91cd\u3044\u8170\u3092\u4e0a\u3052\u308b\u3053\u3068\u306b\u7e4b\u304c\u308a\u3084\u3059\u3044\u3068\u601d\u3044\u307e\u3059\u3002\nAkka \u4ee5\u5916\u306b\u3082 Play Framework2 \u3084 Spark \u3092\u901a\u3057\u3066 Scala \u3092\u899a\u3048\u308b\u3068\u3044\u3046\u306e\u3082\u304a\u52e7\u3081\u3067\u3059\u3002\n\u6f20\u7136\u3068 \u65b0\u3057\u3044\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u8a00\u8a9e\u3092\u5b66\u3076\u3088\u308a\u3082\u751f\u304d\u305f\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u306b\u89e6\u308c\u308b\u306e\u304c\u7fd2\u5f97\u3078\u306e\u8fd1\u9053\u3067\u306f\u306a\u3044\u3067\u3057\u3087\u3046\u304b\u3002\n\n\u30c7\u30e1\u30ea\u30c3\u30c8\n\n\u65e5\u672c\u8a9e\u306e\u60c5\u5831\u304c\u5c11\u306a\u3044\n\u4e00\u5e74\u524d\u306b\u6bd4\u3079\u308b\u3068\u3050\u3063\u3068\u5897\u3048\u3066\u304d\u307e\u3057\u305f\u304c\u307e\u3060\u307e\u3060\u65e5\u672c\u8a9e\u306e\u60c5\u5831\u304c\u5c11\u306a\u3044\u3067\u3059\u3002\n\u82f1\u8a9e\u306e\u516c\u5f0f\u30b5\u30a4\u30c8\u306e\u60c5\u5831\u304c\u5727\u5012\u7684\u306a\u306e\u3067\u3042\u304d\u3089\u3081\u3066\u516c\u5f0f\u30b5\u30a4\u30c8\u3092\u8aad\u307f\u8fbc\u307f\u307e\u3057\u3087\u3046\u3002\n\n\u4ed6\uff1f\n\uff08Akka \u306b\u95a2\u4fc2\u306a\u3044\u4ed6\u306e\u4e8b\u3067\u82e6\u52b4\u306f\u3044\u3063\u3071\u3044\u3057\u307e\u3057\u305f\u304c\u30fb\u30fb\u30fb\uff09\n\u958b\u767a\u306b\u4f7f\u3063\u305f\u6642\u306b\u30d0\u30b0\u306b\u906d\u9047\u3059\u308b\u3053\u3068\u3082\u306a\u304f\u3001\u5b66\u7fd2\u30b3\u30b9\u30c8\u4ee5\u5916\u306f\u3068\u304f\u306b\u82e6\u52b4\u3057\u306a\u304b\u3063\u305f\u306e\u3067\u7279\u306b\u6d6e\u304b\u3070\u306a\u3044\u3067\u3059\u3002\n\n\u30b3\u30fc\u30c9\u4f8b\n\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0\u4f8b\u3067\u3059\u3002\n\uff08\u4f8b\uff09EntryPoint -> Controller -> FirstActor -> SecondActor \u3068\u51e6\u7406\u3092\u4f9d\u983c\n\n\u3053\u3061\u3089\u306bCode\u3092\u767b\u9332\u3057\u3066\u304a\u304d\u307e\u3057\u305f\u3002\nhttps://github.com/ishiyayu/Akka-Java\n\u30fbEntryPoint\n\npublic class Entry {\n\n    public static void main(String[] args) {\n\n        AkkaController controller = new AkkaController();\n\n        try {\n            controller.execute();\n        } catch (Exception e) {\n            e.printStackTrace();\n\n            System.exit(1);\n        }\n\n        System.exit(0);\n    }\n\n}\n\n\n\u30fbAkka \u3092\u547c\u3073\u51fa\u3059 Controller \u30af\u30e9\u30b9\nimport akka.actor.Actor;\nimport akka.actor.ActorRef;\nimport akka.actor.ActorSystem;\nimport akka.actor.Props;\nimport akka.pattern.Patterns;\nimport scala.concurrent.Await;\nimport scala.concurrent.duration.Duration;\n\nimport java.util.concurrent.TimeUnit;\nimport java.util.concurrent.TimeoutException;\n\n\npublic class AkkaController {\n\n    private ActorSystem actorSystem;\n\n    private volatile boolean stopFlg = false;\n\n\n    public void execute() throws Exception {\n\n        // ActorSystem\u8d77\u52d5\uff08\u30d1\u30e9\u30e1\u30fc\u30bf\u306fActorSystem\u306b\u3064\u3051\u308b\u540d\u524d\u3067\u3059\uff09\n        this.actorSystem = ActorSystem.create(\"ActorSystem-name\");\n\n        // ActorSystem\u8d77\u52d5\n        shutdownHook(actorSystem);\n\n        ActorRef actor = null;\n        while (true) {\n\n            if (stopFlg) {\n                break;\n            }\n\n            // Actor \u306e\u4f5c\u6210\uff08\u30d1\u30e9\u30e1\u30fc\u30bf\u306fActor\u306b\u3064\u3051\u308b\u540d\u524d\u3067\u3059\uff09\n            actor = createActor(FirstActor.class, \"actor-name\");\n\n            // Actor \u3078\u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u9001\u308a\u51e6\u7406\u3092\u4f9d\u983c\u3059\u308b\n            String retMsg = null;\n            try {\n                // Actor \u3078\u306e\u51e6\u7406\u306e\u4f9d\u983c\n                // Actor \u304b\u3089\u8fd4\u4fe1\u3092\u5f85\u3064 ask \u3067 msg \u9001\u308a future \u3092\u53d7\u53d6\u308b\n                // Await.result \u3067 future \u306e\u5024\u3092\u5f85\u3064\n                retMsg = (String) Await.result(\n                    Patterns.ask(\n                        actor\n                        , \"\u30e1\u30c3\u30bb\u30fc\u30b8\u5185\u5bb9\"\n                        , 30L * 1000L)\n                    , Duration.create(\n                        60L * 1000L\n                        , TimeUnit.MILLISECONDS)\n                );\n            } catch (TimeoutException e) {\n                // \u30a8\u30e9\u30fc\u51e6\u7406\n\n            }\n        }\n    }\n\n    /**\n     * Actor\u306e\u4f5c\u6210\n     * @param clazz\n     * @param actorName\n     * @return\n     */\n    @SuppressWarnings(\"deprecation\")\n    protected ActorRef createActor(Class<? extends Actor> clazz, String actorName) {\n\n        // Akka\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u304c\u3042\u308c\u3070\u8fd4\u5374\n        ActorRef actor = actorSystem.actorFor(\"/user/\" + actorName);\n        if (actor != null && !actor.isTerminated()) {\n            return actor;\n        }\n\n        // \u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u304c\u306a\u3044\u306e\u3067\u65b0\u898f\u4f5c\u6210\n        return actorSystem.actorOf(Props.create(clazz), actorName);\n    }\n\n    /**\n     * JVM\u7d42\u4e86\u6642\u306e\u51e6\u7406\n     * @param actorSystem\n     */\n    public void shutdownHook(ActorSystem actorSystem) {\n        // JVM \u7d42\u4e86\u6642\u306b ActorSystem \u3092 shutdown \u3059\u308b\n        Thread t = new Thread(() -> {\n            this.stopFlg = true;\n            actorSystem.shutdown();\n            System.out.println(\"shutdownHook!!\");\n            actorSystem.awaitTermination();}\n        );\n\n        Runtime.getRuntime().addShutdownHook(t);\n    }\n\n}\n\n\u30fbFirstActor\nimport akka.actor.Actor;\nimport akka.actor.ActorRef;\nimport akka.actor.Props;\nimport akka.actor.UntypedActor;\n\n\npublic class FirstActor extends UntypedActor {\n\n    /**\n     * \u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u5316\u3055\u308c\u308b\u969b\u306b1\u5ea6\u306e\u307f\u5b9f\u884c\u3055\u308c\u308b(costructor)\n     */\n    @Override\n    public void preStart() {\n        // \u4f55\u304b\u521d\u671f\u5316\u51e6\u7406\n    }\n\n    /**\n     * \u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u304c\u7834\u68c4\u3055\u308c\u308b\u969b\u306b1\u5ea6\u306e\u307f\u5b9f\u884c\u3055\u308c\u308b(destructor)\n     */\n    @Override\n    public void postStop() {\n        // \u4f55\u304b\u7d42\u4e86\u51e6\u7406\n    }\n\n    /**\n     * EntryPoint\n     * msg\u3092\u53d7\u4fe1\u3057\u305f\u969b\u306b\u3053\u3053\u304c\u30b3\u30fc\u30eb\u3055\u308c\u308b\n     * @param message\n     * @throws Exception\n     */\n    @Override\n    public void onReceive(Object message) throws Exception {\n\n        try {\n            // \u60f3\u5b9a\u5916\u306emsg\u3092\u53d7\u3051\u53d6\u3063\u3066\u3044\u306a\u3044\u304b\u30c1\u30a7\u30c3\u30af\n            // Object\u3092\u9001\u4fe1\u3059\u308b\u306a\u3089\u3070 instanceof \u3067\u30c1\u30a7\u30c3\u30af\u306a\u3069\u3067 validation\n            if (message == null || !(message instanceof String)) {\n                // messsage \u306e\u7834\u68c4\n                unhandled(message);\n                return;\n            }\n\n            // \u4f55\u304b\u30d3\u30b8\u30cd\u30b9\u51e6\u7406\n\n            // SecondActor\u3078\u51e6\u7406\u3092\u4f9d\u983c\n            ActorRef secondActor = createActor(SecondActor.class, \"SendActor-Name\");\n            // \u8fd4\u4fe1\u4e0d\u8981\u306e tell() \u3067\u30e1\u30c3\u30bb\u30fc\u30b8\u9001\u4fe1\n            secondActor.tell(\"\u30e1\u30c3\u30bb\u30fc\u30b8\", null);\n\n            // \u547c\u3073\u5143\u306b\u7d42\u4e86\u30e1\u30c3\u30bb\u30fc\u30b8\u8fd4\u3057\u30661\u4ef6\u306eJob\u7d42\u4e86\n            sender().tell(\"DONE\", getSelf());\n\n        } catch (Exception e) {\n            // error\u51e6\u7406\n\n            // \u547c\u3073\u5143\u306b\u30e1\u30c3\u30bb\u30fc\u30b8\u8fd4\u3057\u30661\u4ef6\u306eJob\u7d42\u4e86\n            sender().tell(\"ERROR\", getSelf());\n\n            // Actor\u306e\u30a8\u30e9\u30fc\u3092\u691c\u77e5\u51fa\u6765\u308b\u3088\u3046\u306b\u30a8\u30e9\u30fc\u3092\u6295\u3052\u308b\n            throw e;\n        }\n    }\n\n    /**\n     * SecondActor\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u306e\u53d6\u5f97\n     * @param clazz\n     * @param actorName\n     * @return\n     */\n    protected ActorRef createActor(Class<? extends Actor> clazz, String actorName) {\n\n        // \u65e2\u5b58actor\u3042\u308c\u3070\u8fd4\u5374\n        // path\u306factorSystmName\u304b\u3089\u4e0b\u3092\u6307\u5b9a\u3059\u308b(akka://ActorSystem-name/user/xxx)\n        // \u73fe\u5728\u306f actorFor() \u306f Deprecation \u306b\u306a\u3063\u3066\u3044\u308b\u306e\u3067 actorSelection() \u3092\u4f7f\u3063\u3066\u304f\u3060\u3055\u3044\u3002\u3002\n        ActorRef actor = getContext().actorFor(\"/user/\" + actorName);\n        if (actor != null && !actor.isTerminated()) {\n            return actor;\n        }\n\n        // \u6307\u5b9a\u306eActor\u304c\u306a\u3044\u306e\u3067 Actor \u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u65b0\u898f\u4f5c\u6210\n        return getContext().system().actorOf(Props.create(clazz), actorName);\n    }\n}\n\n\u30fbSecondActor\nimport akka.actor.ReceiveTimeout;\nimport akka.actor.UntypedActor;\nimport scala.concurrent.duration.Duration;\n\nimport java.util.concurrent.TimeUnit;\n\npublic class SecondActor extends UntypedActor{\n\n    /**\n     * \u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u5316\u3055\u308c\u308b\u969b\u306b1\u5ea6\u306e\u307f\u5b9f\u884c\u3055\u308c\u308b(costructor)\n     */\n    @Override\n    public void preStart() {\n        // Actor instance \u306e\u81ea\u52d5\u7d42\u4e86\u3082\u53ef\u80fd\u3067\u3059\n        // \u6307\u5b9a\u79d2\u6570Message\u304c\u5c4a\u304b\u306a\u3051\u308c\u3070ReceiveTimeout\u30e1\u30c3\u30bb\u30fc\u30b8\u304c\u5c4a\u304f\u3088\u3046\u306b\u8a2d\u5b9a -> instance\u7d42\u4e86\u3055\u305b\u308b\n        getContext().setReceiveTimeout(Duration.create(10 * 60, TimeUnit.SECONDS));\n    }\n\n    /**\n     * \u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u304c\u7834\u68c4\u3055\u308c\u308b\u969b\u306b1\u5ea6\u306e\u307f\u5b9f\u884c\u3055\u308c\u308b(destructor)\n     */\n    @Override\n    public void postStop() {\n\n    }\n\n    /**\n     * \u30a8\u30f3\u30c8\u30ea\u30dd\u30a4\u30f3\u30c8\n     * @param message\n     * @throws Exception\n     */\n    @Override\n    public void onReceive(Object message) throws Exception {\n\n        try {\n            // ReceiveTimeout\u306a\u3089\u3070\u81ea\u5206\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u7d42\u4e86\n            if (message instanceof ReceiveTimeout) {\n                getContext().stop(getSelf());\n                unhandled(message);\n                return;\n            }\n\n            // \u5fc5\u8981\u306b\u5fdc\u3058\u3066msg\u30c1\u30a7\u30c3\u30af\n\n            // \u4f55\u304b\u30d3\u30b8\u30cd\u30b9\u30ed\u30b8\u30c3\u30af\n            System.out.println(\"hogehoge\");\n\n            // \u8fd4\u4fe1\u4e0d\u8981\u306e tell() \u3067\u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u53d7\u3051\u53d6\u3063\u305f\u306e\u3067 \u547c\u3073\u5143\u3078\u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u8fd4\u3059\u5fc5\u8981\u306f\u3042\u308a\u307e\u305b\u3093\n\n        } catch (Exception e) {\n            // \u4f55\u304b\u30a8\u30e9\u30fc\u51e6\u7406\n            throw e;\n        }\n    }\n}\n\n# \u6982\u8981\n\n\u5b9f\u52d9\u3067Actor\u30e2\u30c7\u30eb\u3092\u5b9f\u88c5\u3057\u305f\u30d5\u30ec\u30fc\u30e0\u30ef\u30fc\u30af Akka \u3092 Java \u304b\u3089\u4f7f\u3063\u3066\u307f\u307e\u3057\u305f\u3002\n\u305d\u306e\u969b\u306b\u6c17\u3065\u3044\u305f\u4e8b\u3084\u4f7f\u3044\u65b9\u306a\u3069\u3092\u66f8\u304d\u8a18\u3057\u305f\u3044\u3068\u601d\u3044\u307e\u3059\u3002\n\nAkka \u3092 Java \u304b\u3089\u4f7f\u3063\u3066\u3044\u308b\u60c5\u5831\u304c\u5c11\u306a\u304f\u82e6\u52b4\u3057\u305f\u306e\u3067\u66f8\u304d\u8a18\u3057\u3066\u304a\u304d\u307e\u3059\u3002\n\uff08\u516c\u5f0f\u30da\u30fc\u30b8\uff09http://akka.io/\n\n# \u7d50\u8ad6\n\nAkka \u3092\u4f7f\u3063\u3066\u307f\u3066\u826f\u304b\u3063\u305f\u3067\u3059\uff01\n\u4e26\u5217\u51e6\u7406\u3092\u7c21\u5358\u306b\u5b9f\u73fe\u3067\u304d\u307e\u3057\u305f\u3002\n\u4f55\u3088\u308a\u3082\u65b0\u3057\u304f\u4fbf\u5229\u306b\u306a\u308b\u30d5\u30ec\u30fc\u30e0\u30ef\u30fc\u30af\u3092\u5b66\u3073\u306a\u304c\u3089\u5b9f\u88c5\u3059\u308b\u3053\u3068\u3067\u30e2\u30c1\u30d9\u30fc\u30b7\u30e7\u30f3\u9ad8\u304f\u958b\u767a\u3067\u304d\u307e\u3057\u305f\u3002\n\u4eca\u5f8c\u3082\u6a5f\u4f1a\u304c\u3042\u308b\u5ea6\u306b\u4f7f\u304a\u3046\u3068\u601d\u3063\u3066\u3044\u307e\u3059\u3002\n\n# \u4f55\u304c\u826f\u304b\u3063\u305f\u304b\n\n## \u30de\u30eb\u30c1\u30b9\u30ec\u30c3\u30c9\u51e6\u7406\u304c\u7c21\u5358\u306b\u5b9f\u73fe\u3067\u304d\u308b\uff01\uff01\uff01\n\n\u8aa4\u89e3\u3092\u6050\u308c\u305a\u306b\u8a00\u3044\u5207\u3063\u3066\u3057\u307e\u3046\u3068 Akka \u3068\u306f\u30ce\u30f3\u30d6\u30ed\u30c3\u30ad\u30f3\u30b0\u306a\u30de\u30eb\u30c1\u30b9\u30ec\u30c3\u30c9\u3092\u7c21\u5358\u306b\u8a18\u8ff0\u51fa\u6765\u308b\u30d5\u30ec\u30fc\u30e0\u30ef\u30fc\u30af\u3067\u3059\u3002\n\u4e26\u5217\u5206\u6563\u51e6\u7406\u3092 \u30af\u30e9\u30b9\u30bf\u30fc\uff08ActorSystem\uff09\u3068 Singletion \u306a\u30b9\u30ec\u30c3\u30c9\uff08Actor\uff09\u3067\u5b9f\u73fe\u3057\u3066\u3044\u307e\u3059\u3002\n\n\u5404 Actor \u306f \n\u30fbSingleton \u306a\u30b9\u30ec\u30c3\u30c9\u3067\u52d5\u4f5c\u3059\u308b\n\u30fbActorSystem \u5185\u3067\u5404 Actor \u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u540d\u524d\u3067\u7ba1\u7406\u3055\u308c\u3066\u3044\u3066\u540d\u524d\u3092\u6307\u5b9a\u3059\u308b\u3060\u3051\u3067 Actor (Singleton \u30b9\u30ec\u30c3\u30c9)\u3092\u4f5c\u308b or \u547c\u3073\u51fa\u3059\u4e8b\u304c\u51fa\u6765\u308b\n\u30fbFIFO \u306a Queue \u3092\u6301\u3063\u3066\u3044\u3066\u4f9d\u983c\u3055\u308c\u305f\u9806\u756a\u306b\u51e6\u7406\u51fa\u6765\u308b\uff08Queue\u306fFIFO\u4ee5\u5916\u306b\u81ea\u7531\u306b\u8a2d\u5b9a\u53ef\u80fd\uff09\n\u30fb\u30e1\u30c3\u30bb\u30fc\u30b8\u306b\u3088\u308a\u4ed6Actor\u3078\u51e6\u7406\u3092\u79fb\u8b72\u51fa\u6765\u308b\n\n## \u69d8\u3005\u306a router \u304c\u7d20\u6575\uff01\n\nActor \u9593\u306e\u9023\u643a\u306f Java Object \u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3084\u6587\u5b57\u5217\u3092\u30e1\u30c3\u30bb\u30fc\u30b8\u3068\u3057\u3066\u3084\u308a\u3068\u308a\u51fa\u6765\u307e\u3059\u3002\n\u30e1\u30c3\u30bb\u30fc\u30b8\u306b\u306f\u3001Post \u3059\u308b\u3088\u3046\u306a\u6295\u3052\u3063\u3071\u306a\u3057\u306e\u30e1\u30c3\u30bb\u30fc\u30b8\u3068 Send \u3059\u308b\u3088\u3046\u306a\u8fd4\u4e8b\u3092\u3082\u3089\u3046\u30e1\u30c3\u30bb\u30fc\u30b8\u304c\u3042\u308a\u307e\u3059\u3002\n\n\u30e1\u30c3\u30bb\u30fc\u30b8\u306e\u9001\u4fe1\u30d1\u30bf\u30fc\u30f3\u306f\n\u30fb\u5b9b\u5148\u6307\u5b9a\u306e\u30e1\u30c3\u30bb\u30fc\u30b8\u914d\u4fe1\n\u30fb\u30e9\u30a6\u30f3\u30c9\u30ed\u30d3\u30f3\u306b\u3088\u308b\u30e1\u30c3\u30bb\u30fc\u30b8\u914d\u4fe1\n\u30fb\u30d6\u30ed\u30fc\u30c9\u30ad\u30e3\u30b9\u30c8\u306b\u3088\u308b\u8907\u6570Actor\u3078\u306e\u30e1\u30c3\u30bb\u30fc\u30b8\u914d\u4fe1\n\uff08\u516c\u5f0f\u30da\u30fc\u30b8\uff09http://doc.akka.io/docs/akka/2.4.1/java/routing.html\n\n## Let it crash \n\n\u5931\u6557\u3057\u305f\u3089\u6368\u3066\u3066\u3057\u307e\u3063\u3066\u3084\u308a\u76f4\u305d\u3046\u3092\u7c21\u5358\u306b\u5b9f\u73fe\u3057\u3066\u3044\u307e\u3059\u3002\n\u30a4\u30df\u30e5\u30fc\u30bf\u30d6\u30eb\u30a4\u30f3\u30d5\u30e9\u30b9\u30c8\u30e9\u30af\u30c1\u30e3\u3068\u4f3c\u3066\u3044\u308b\u601d\u60f3\u3067\u3059\u3002\n\uff08\u516c\u5f0f\u30da\u30fc\u30b8\uff09http://doc.akka.io/docs/akka/2.4.1/java/fault-tolerance.html\n\n\u5404 Actor \u306b\u306f\u30a8\u30e9\u30fc\u767a\u751f\u3092\u691c\u77e5\u3059\u308b SuperVisior \u3068 Exception \u767a\u751f\u6642\u306b\u3069\u306e\u3088\u3046\u306b\u632f\u308b\u821e\u3046\u304b Strategy \u3092\u5b9a\u7fa9\u3067\u304d\u307e\u3059\u3002\n\n\u4f8b\u3048\u3070\n\u30fb\u30ea\u30c8\u30e9\u30a4\u53ef\u80fd\u306a\u30a8\u30e9\u30fc\u304c\u767a\u751f\u3057\u305f\u3089\u518d\u5ea6 Actor \u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u4f5c\u308a\u306a\u304a\u3057\u3066\u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u518d\u9001\u3057\u3066\u51e6\u7406\u3092\u884c\u3046\n\u30fb\u30ea\u30c8\u30e9\u30a4\u4e0d\u80fd\u306a\u30a8\u30e9\u30fc\u304c\u767a\u751f\u3057\u305f\u3089\u518d\u5b9f\u884c\u3092\u884c\u308f\u305a\u30ed\u30b0\u306b\u51fa\u529b\u3057\u3066\u7d42\u4e86\u3055\u305b\u308b\n\u306a\u3069\u53ef\u80fd\u3067\u3059\u3002\n\uff08\u516c\u5f0f\u30da\u30fc\u30b8\uff09http://doc.akka.io/docs/akka/2.4.1/general/supervision.html\n\n## Local \u304a\u3088\u3073 Remote Cluster \u3092\u69cb\u7bc9\u3067\u304d\u308b\n\nActorSystem \u3068\u3044\u3046 Cluster \u306b\u3088\u3063\u3066\u3001 Local \u304a\u3088\u3073 Remote \u30db\u30b9\u30c8\u3067 Actor \u51e6\u7406\u3092\u5b9f\u73fe\u3067\u304d\u307e\u3059\u3002\n\u51e6\u7406\u3092\u30b9\u30b1\u30fc\u30eb\u3055\u305b\u305f\u3051\u308c\u3070\u30b5\u30fc\u30d0\u3092\u8ffd\u52a0\u3057\u3066 Actor \u306b\u3088\u308b\u30e1\u30c3\u30bb\u30fc\u30b8\u306e\u3084\u308a\u3068\u308a\u3067\u51e6\u7406\u3092\u5206\u6563\u3067\u304d\u307e\u3059\u3002\n\uff08\u516c\u5f0f\u30da\u30fc\u30b8\uff09http://doc.akka.io/docs/akka/2.4.1/java/remoting.html\n\n## Java \u30a8\u30f3\u30b8\u30cb\u30a2\u304c Scala \u3092\u5b66\u3076\u304d\u3063\u304b\u3051\u306b\u306a\u308b\uff08\u306e\u3067\u306f\uff09\uff01\uff01\n\nJava \u3084 Scala \u306f IDE \u3092\u4f7f\u3063\u3066\u958b\u767a\u3059\u308b\u4e8b\u304c\u591a\u3044\u3068\u601d\u3044\u307e\u3059\u304c\u3001\nEclipse \u3067\u306f\u3000F3 \u30ad\u30fc\u3001IntelliJ Idea \u3067\u306f Command + B\uff08\u5f53\u65b9Mac\u3067\u958b\u767a\uff09 \u3067\u5b9a\u7fa9\u3078\u30b8\u30e3\u30f3\u30d7\u3057\u3066\u3044\u308b\u3068\n\u5ea6\u3005 Scala \u3067\u5b9f\u88c5\u3055\u308c\u305f\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u306b\u51fa\u4f1a\u3046\u4e8b\u306b\u306a\u308b\u3068\u601d\u3044\u307e\u3059\u3002\n\u898b\u3066\u3044\u308b\u3046\u3061\u306b Scala \u3078\u306e\u62b5\u6297\u304c\u8584\u308c\u91cd\u3044\u8170\u3092\u4e0a\u3052\u308b\u3053\u3068\u306b\u7e4b\u304c\u308a\u3084\u3059\u3044\u3068\u601d\u3044\u307e\u3059\u3002\n\nAkka \u4ee5\u5916\u306b\u3082 Play Framework2 \u3084 Spark \u3092\u901a\u3057\u3066 Scala \u3092\u899a\u3048\u308b\u3068\u3044\u3046\u306e\u3082\u304a\u52e7\u3081\u3067\u3059\u3002\n\u6f20\u7136\u3068 \u65b0\u3057\u3044\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u8a00\u8a9e\u3092\u5b66\u3076\u3088\u308a\u3082\u751f\u304d\u305f\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u306b\u89e6\u308c\u308b\u306e\u304c\u7fd2\u5f97\u3078\u306e\u8fd1\u9053\u3067\u306f\u306a\u3044\u3067\u3057\u3087\u3046\u304b\u3002\n\n# \u30c7\u30e1\u30ea\u30c3\u30c8\n\n## \u65e5\u672c\u8a9e\u306e\u60c5\u5831\u304c\u5c11\u306a\u3044\n\n\u4e00\u5e74\u524d\u306b\u6bd4\u3079\u308b\u3068\u3050\u3063\u3068\u5897\u3048\u3066\u304d\u307e\u3057\u305f\u304c\u307e\u3060\u307e\u3060\u65e5\u672c\u8a9e\u306e\u60c5\u5831\u304c\u5c11\u306a\u3044\u3067\u3059\u3002\n\u82f1\u8a9e\u306e\u516c\u5f0f\u30b5\u30a4\u30c8\u306e\u60c5\u5831\u304c\u5727\u5012\u7684\u306a\u306e\u3067\u3042\u304d\u3089\u3081\u3066\u516c\u5f0f\u30b5\u30a4\u30c8\u3092\u8aad\u307f\u8fbc\u307f\u307e\u3057\u3087\u3046\u3002\n\n## \u4ed6\uff1f\n\n\uff08Akka \u306b\u95a2\u4fc2\u306a\u3044\u4ed6\u306e\u4e8b\u3067\u82e6\u52b4\u306f\u3044\u3063\u3071\u3044\u3057\u307e\u3057\u305f\u304c\u30fb\u30fb\u30fb\uff09\n\u958b\u767a\u306b\u4f7f\u3063\u305f\u6642\u306b\u30d0\u30b0\u306b\u906d\u9047\u3059\u308b\u3053\u3068\u3082\u306a\u304f\u3001\u5b66\u7fd2\u30b3\u30b9\u30c8\u4ee5\u5916\u306f\u3068\u304f\u306b\u82e6\u52b4\u3057\u306a\u304b\u3063\u305f\u306e\u3067\u7279\u306b\u6d6e\u304b\u3070\u306a\u3044\u3067\u3059\u3002\n\n\n# \u30b3\u30fc\u30c9\u4f8b\n\n\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0\u4f8b\u3067\u3059\u3002\n\uff08\u4f8b\uff09EntryPoint -> Controller -> FirstActor -> SecondActor \u3068\u51e6\u7406\u3092\u4f9d\u983c\n\u001d\n\u3053\u3061\u3089\u306bCode\u3092\u767b\u9332\u3057\u3066\u304a\u304d\u307e\u3057\u305f\u3002\nhttps://github.com/ishiyayu/Akka-Java\n\n\u30fbEntryPoint\n\n``` java\n\npublic class Entry {\n\n\tpublic static void main(String[] args) {\n\n\t\tAkkaController controller = new AkkaController();\n\n\t\ttry {\n\t\t\tcontroller.execute();\n\t\t} catch (Exception e) {\n\t\t\te.printStackTrace();\n\n\t\t\tSystem.exit(1);\n\t\t}\n\n\t\tSystem.exit(0);\n\t}\n\n}\n\n```\n\n\u30fbAkka \u3092\u547c\u3073\u51fa\u3059 Controller \u30af\u30e9\u30b9\n\n``` java\nimport akka.actor.Actor;\nimport akka.actor.ActorRef;\nimport akka.actor.ActorSystem;\nimport akka.actor.Props;\nimport akka.pattern.Patterns;\nimport scala.concurrent.Await;\nimport scala.concurrent.duration.Duration;\n\nimport java.util.concurrent.TimeUnit;\nimport java.util.concurrent.TimeoutException;\n\n\npublic class AkkaController {\n\n\tprivate ActorSystem actorSystem;\n\n\tprivate volatile boolean stopFlg = false;\n\n\n\tpublic void execute() throws Exception {\n\n\t\t// ActorSystem\u8d77\u52d5\uff08\u30d1\u30e9\u30e1\u30fc\u30bf\u306fActorSystem\u306b\u3064\u3051\u308b\u540d\u524d\u3067\u3059\uff09\n\t\tthis.actorSystem = ActorSystem.create(\"ActorSystem-name\");\n\n\t\t// ActorSystem\u8d77\u52d5\n\t\tshutdownHook(actorSystem);\n\n\t\tActorRef actor = null;\n\t\twhile (true) {\n\n\t\t\tif (stopFlg) {\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\t// Actor \u306e\u4f5c\u6210\uff08\u30d1\u30e9\u30e1\u30fc\u30bf\u306fActor\u306b\u3064\u3051\u308b\u540d\u524d\u3067\u3059\uff09\n\t\t\tactor = createActor(FirstActor.class, \"actor-name\");\n\n\t\t\t// Actor \u3078\u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u9001\u308a\u51e6\u7406\u3092\u4f9d\u983c\u3059\u308b\n\t\t\tString retMsg = null;\n\t\t\ttry {\n\t\t\t\t// Actor \u3078\u306e\u51e6\u7406\u306e\u4f9d\u983c\n\t\t\t\t// Actor \u304b\u3089\u8fd4\u4fe1\u3092\u5f85\u3064 ask \u3067 msg \u9001\u308a future \u3092\u53d7\u53d6\u308b\n\t\t\t\t// Await.result \u3067 future \u306e\u5024\u3092\u5f85\u3064\n\t\t\t\tretMsg = (String) Await.result(\n\t\t\t\t\tPatterns.ask(\n\t\t\t\t\t\tactor\n\t\t\t\t\t\t, \"\u30e1\u30c3\u30bb\u30fc\u30b8\u5185\u5bb9\"\n\t\t\t\t\t\t, 30L * 1000L)\n\t\t\t\t\t, Duration.create(\n\t\t\t\t\t\t60L * 1000L\n\t\t\t\t\t\t, TimeUnit.MILLISECONDS)\n\t\t\t\t);\n\t\t\t} catch (TimeoutException e) {\n\t\t\t\t// \u30a8\u30e9\u30fc\u51e6\u7406\n\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Actor\u306e\u4f5c\u6210\n\t * @param clazz\n\t * @param actorName\n\t * @return\n\t */\n\t@SuppressWarnings(\"deprecation\")\n\tprotected ActorRef createActor(Class<? extends Actor> clazz, String actorName) {\n\n\t\t// Akka\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u304c\u3042\u308c\u3070\u8fd4\u5374\n\t\tActorRef actor = actorSystem.actorFor(\"/user/\" + actorName);\n\t\tif (actor != null && !actor.isTerminated()) {\n\t\t\treturn actor;\n\t\t}\n\n\t\t// \u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u304c\u306a\u3044\u306e\u3067\u65b0\u898f\u4f5c\u6210\n\t\treturn actorSystem.actorOf(Props.create(clazz), actorName);\n\t}\n\n\t/**\n\t * JVM\u7d42\u4e86\u6642\u306e\u51e6\u7406\n\t * @param actorSystem\n\t */\n\tpublic void shutdownHook(ActorSystem actorSystem) {\n\t\t// JVM \u7d42\u4e86\u6642\u306b ActorSystem \u3092 shutdown \u3059\u308b\n\t\tThread t = new Thread(() -> {\n\t\t\tthis.stopFlg = true;\n\t\t\tactorSystem.shutdown();\n\t\t\tSystem.out.println(\"shutdownHook!!\");\n\t\t\tactorSystem.awaitTermination();}\n\t\t);\n\n\t\tRuntime.getRuntime().addShutdownHook(t);\n\t}\n\n}\n```\n\n\u30fbFirstActor\n\n``` java\nimport akka.actor.Actor;\nimport akka.actor.ActorRef;\nimport akka.actor.Props;\nimport akka.actor.UntypedActor;\n\n\npublic class FirstActor extends UntypedActor {\n\n\t/**\n\t * \u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u5316\u3055\u308c\u308b\u969b\u306b1\u5ea6\u306e\u307f\u5b9f\u884c\u3055\u308c\u308b(costructor)\n\t */\n\t@Override\n\tpublic void preStart() {\n\t\t// \u4f55\u304b\u521d\u671f\u5316\u51e6\u7406\n\t}\n\n\t/**\n\t * \u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u304c\u7834\u68c4\u3055\u308c\u308b\u969b\u306b1\u5ea6\u306e\u307f\u5b9f\u884c\u3055\u308c\u308b(destructor)\n\t */\n\t@Override\n\tpublic void postStop() {\n\t\t// \u4f55\u304b\u7d42\u4e86\u51e6\u7406\n\t}\n\n\t/**\n\t * EntryPoint\n\t * msg\u3092\u53d7\u4fe1\u3057\u305f\u969b\u306b\u3053\u3053\u304c\u30b3\u30fc\u30eb\u3055\u308c\u308b\n\t * @param message\n\t * @throws Exception\n\t */\n\t@Override\n\tpublic void onReceive(Object message) throws Exception {\n\n\t\ttry {\n\t\t\t// \u60f3\u5b9a\u5916\u306emsg\u3092\u53d7\u3051\u53d6\u3063\u3066\u3044\u306a\u3044\u304b\u30c1\u30a7\u30c3\u30af\n\t\t\t// Object\u3092\u9001\u4fe1\u3059\u308b\u306a\u3089\u3070 instanceof \u3067\u30c1\u30a7\u30c3\u30af\u306a\u3069\u3067 validation\n\t\t\tif (message == null || !(message instanceof String)) {\n\t\t\t\t// messsage \u306e\u7834\u68c4\n\t\t\t\tunhandled(message);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// \u4f55\u304b\u30d3\u30b8\u30cd\u30b9\u51e6\u7406\n\n\t\t\t// SecondActor\u3078\u51e6\u7406\u3092\u4f9d\u983c\n\t\t\tActorRef secondActor = createActor(SecondActor.class, \"SendActor-Name\");\n\t\t\t// \u8fd4\u4fe1\u4e0d\u8981\u306e tell() \u3067\u30e1\u30c3\u30bb\u30fc\u30b8\u9001\u4fe1\n\t\t\tsecondActor.tell(\"\u30e1\u30c3\u30bb\u30fc\u30b8\", null);\n\n\t\t\t// \u547c\u3073\u5143\u306b\u7d42\u4e86\u30e1\u30c3\u30bb\u30fc\u30b8\u8fd4\u3057\u30661\u4ef6\u306eJob\u7d42\u4e86\n\t\t\tsender().tell(\"DONE\", getSelf());\n\n\t\t} catch (Exception e) {\n\t\t\t// error\u51e6\u7406\n\n\t\t\t// \u547c\u3073\u5143\u306b\u30e1\u30c3\u30bb\u30fc\u30b8\u8fd4\u3057\u30661\u4ef6\u306eJob\u7d42\u4e86\n\t\t\tsender().tell(\"ERROR\", getSelf());\n\n\t\t\t// Actor\u306e\u30a8\u30e9\u30fc\u3092\u691c\u77e5\u51fa\u6765\u308b\u3088\u3046\u306b\u30a8\u30e9\u30fc\u3092\u6295\u3052\u308b\n\t\t\tthrow e;\n\t\t}\n\t}\n\n\t/**\n\t * SecondActor\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u306e\u53d6\u5f97\n\t * @param clazz\n\t * @param actorName\n\t * @return\n\t */\n\tprotected ActorRef createActor(Class<? extends Actor> clazz, String actorName) {\n\n\t\t// \u65e2\u5b58actor\u3042\u308c\u3070\u8fd4\u5374\n\t\t// path\u306factorSystmName\u304b\u3089\u4e0b\u3092\u6307\u5b9a\u3059\u308b(akka://ActorSystem-name/user/xxx)\n\t\t// \u73fe\u5728\u306f actorFor() \u306f Deprecation \u306b\u306a\u3063\u3066\u3044\u308b\u306e\u3067 actorSelection() \u3092\u4f7f\u3063\u3066\u304f\u3060\u3055\u3044\u3002\u3002\n\t\tActorRef actor = getContext().actorFor(\"/user/\" + actorName);\n\t\tif (actor != null && !actor.isTerminated()) {\n\t\t\treturn actor;\n\t\t}\n\n\t\t// \u6307\u5b9a\u306eActor\u304c\u306a\u3044\u306e\u3067 Actor \u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u65b0\u898f\u4f5c\u6210\n\t\treturn getContext().system().actorOf(Props.create(clazz), actorName);\n\t}\n}\n```\n\n\u30fbSecondActor\n\n``` java\nimport akka.actor.ReceiveTimeout;\nimport akka.actor.UntypedActor;\nimport scala.concurrent.duration.Duration;\n\nimport java.util.concurrent.TimeUnit;\n\npublic class SecondActor extends UntypedActor{\n\n\t/**\n\t * \u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u5316\u3055\u308c\u308b\u969b\u306b1\u5ea6\u306e\u307f\u5b9f\u884c\u3055\u308c\u308b(costructor)\n\t */\n\t@Override\n\tpublic void preStart() {\n\t\t// Actor instance \u306e\u81ea\u52d5\u7d42\u4e86\u3082\u53ef\u80fd\u3067\u3059\n\t\t// \u6307\u5b9a\u79d2\u6570Message\u304c\u5c4a\u304b\u306a\u3051\u308c\u3070ReceiveTimeout\u30e1\u30c3\u30bb\u30fc\u30b8\u304c\u5c4a\u304f\u3088\u3046\u306b\u8a2d\u5b9a -> instance\u7d42\u4e86\u3055\u305b\u308b\n\t\tgetContext().setReceiveTimeout(Duration.create(10 * 60, TimeUnit.SECONDS));\n\t}\n\n\t/**\n\t * \u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u304c\u7834\u68c4\u3055\u308c\u308b\u969b\u306b1\u5ea6\u306e\u307f\u5b9f\u884c\u3055\u308c\u308b(destructor)\n\t */\n\t@Override\n\tpublic void postStop() {\n\n\t}\n\n\t/**\n\t * \u30a8\u30f3\u30c8\u30ea\u30dd\u30a4\u30f3\u30c8\n\t * @param message\n\t * @throws Exception\n\t */\n\t@Override\n\tpublic void onReceive(Object message) throws Exception {\n\n\t\ttry {\n\t\t\t// ReceiveTimeout\u306a\u3089\u3070\u81ea\u5206\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u7d42\u4e86\n\t\t\tif (message instanceof ReceiveTimeout) {\n\t\t\t\tgetContext().stop(getSelf());\n\t\t\t\tunhandled(message);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// \u5fc5\u8981\u306b\u5fdc\u3058\u3066msg\u30c1\u30a7\u30c3\u30af\n\n\t\t\t// \u4f55\u304b\u30d3\u30b8\u30cd\u30b9\u30ed\u30b8\u30c3\u30af\n\t\t\tSystem.out.println(\"hogehoge\");\n\n\t\t\t// \u8fd4\u4fe1\u4e0d\u8981\u306e tell() \u3067\u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u53d7\u3051\u53d6\u3063\u305f\u306e\u3067 \u547c\u3073\u5143\u3078\u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u8fd4\u3059\u5fc5\u8981\u306f\u3042\u308a\u307e\u305b\u3093\n\n\t\t} catch (Exception e) {\n\t\t\t// \u4f55\u304b\u30a8\u30e9\u30fc\u51e6\u7406\n\t\t\tthrow e;\n\t\t}\n\t}\n}\n```\n", "tags": ["Akka", "actor", "Java"]}