{"context": " More than 1 year has passed since last update.\u30c1\u30a7\u30c3\u30af\u30b5\u30e0\u306a\u3069\u3067\u4f55\u304b\u30681\u3092\u6570\u3048\u305f\u3044\u3053\u3068\u304c\u591a\u3044\u306e\u3067\u3002\n\u591a\u5206\u3069\u3053\u304b\u306b\u4f3c\u305f\u3088\u3046\u306a\u30b3\u30fc\u30c9\u304c\u5b58\u5728\u3057\u3066\u3044\u308b\u304c\u3002\n\n\u6982\u8981\nW = 2^N\u30d3\u30c3\u30c8\u5e45\u306e\u6570\u5024Bits\u4e2d\u306e\u30bb\u30c3\u30c8\u3055\u308c\u3066\u3044\u308b\u30d3\u30c3\u30c8\u306e\u6570Count\u3092\u6570\u3048\u308b\u95a2\u6570\u3092\nCounter(N)(Bits)\n\u3068\u3067\u3082\u3059\u308b\u3002\n\nN=0\u306e\u3068\u304d\n\u5f53\u7136Counter(0) = Bits\u3067\u3042\u308b\u3002\n\nN>0\u306e\u3068\u304d\nCount\u306fBits\u306e\u4e0a\u534a\u5206\u306eCount\u3068Bits\u306e\u4e0b\u534a\u5206\u306eCount\u306e\u548c\u306b\u7b49\u3057\u3044\u3002\n(\u5225\u306b\u534a\u5206\u3067\u3042\u308b\u5fc5\u8981\u306f\u306a\u3044\u304c\u3001\u30ad\u30ea\u304c\u826f\u3044)\n\u3059\u306a\u308f\u3061\u3001\nCounter(N)(Bits) \n= Counter(N-1)(Bits[W-1:W/2]) + Counter(N-1)(Bits[W/2-1:0])\n\n\nVerilog\u3067\u66f8\u3044\u3066\u307f\u308b\n\u95a2\u6570Counter\u3092\u305d\u306e\u307e\u307e\u56de\u8def\u306b\u3059\u308c\u3070\u3044\u3044\u3002\nmodule BitCounter#(parameter N=4)\n(\n    input[(1<<N)-1:0] Bits,\n    output[N:0] Count\n    );\n\n    if(N == 0) begin\n        assign Count = Bits;\n    end\n    else begin\n        localparam Width = 1<<N;\n        localparam Half = 1<<(N-1);\n        wire[Half-1:0] Hi = Bits[Width-1:Half];\n        wire[N-1:0] CHi;\n        BitCounter #(.N(N-1))counterH(.Bits(Hi),.Count(CHi));\n\n        wire[Half-1:0] Lo = Bits[Half-1:0];\n        wire[N-1:0] CLo;\n        BitCounter #(.N(N-1))counterL(.Bits(Lo),.Count(CLo));\n\n        assign Count = CHi + CLo;\n    end\nendmodule\n\n\n\u30d1\u30af\uff52...\u53c2\u8003\u306b\u3057\u305f\u30d7\u30ed\u30b0\u30e9\u30e0\nx  =   (x & 0x55555555) + (x >> 1 & 0x55555555);\nx  =   (x & 0x33333333) + (x >> 2 & 0x33333333);\nx  =   (x & 0x0f0f0f0f) + (x >> 4 & 0x0f0f0f0f);\nx  =   (x & 0x00ff00ff) + (x >> 8 & 0x00ff00ff);\nreturn (x & 0x0000ffff) + (x >>16 & 0x0000ffff);\n\nHacker's Delight\n\u30c1\u30a7\u30c3\u30af\u30b5\u30e0\u306a\u3069\u3067\u4f55\u304b\u30681\u3092\u6570\u3048\u305f\u3044\u3053\u3068\u304c\u591a\u3044\u306e\u3067\u3002\n\u591a\u5206\u3069\u3053\u304b\u306b\u4f3c\u305f\u3088\u3046\u306a\u30b3\u30fc\u30c9\u304c\u5b58\u5728\u3057\u3066\u3044\u308b\u304c\u3002\n\n#\u6982\u8981\n`W = 2^N`\u30d3\u30c3\u30c8\u5e45\u306e\u6570\u5024`Bits`\u4e2d\u306e\u30bb\u30c3\u30c8\u3055\u308c\u3066\u3044\u308b\u30d3\u30c3\u30c8\u306e\u6570`Count`\u3092\u6570\u3048\u308b\u95a2\u6570\u3092\n`Counter(N)(Bits)`\n\u3068\u3067\u3082\u3059\u308b\u3002\n\n##N=0\u306e\u3068\u304d\n\u5f53\u7136`Counter(0) = Bits`\u3067\u3042\u308b\u3002\n\n\n##N>0\u306e\u3068\u304d\n`Count`\u306fBits\u306e\u4e0a\u534a\u5206\u306e`Count`\u3068Bits\u306e\u4e0b\u534a\u5206\u306e`Count`\u306e\u548c\u306b\u7b49\u3057\u3044\u3002\n(\u5225\u306b\u534a\u5206\u3067\u3042\u308b\u5fc5\u8981\u306f\u306a\u3044\u304c\u3001\u30ad\u30ea\u304c\u826f\u3044)\n\u3059\u306a\u308f\u3061\u3001\n\n```\nCounter(N)(Bits) \n= Counter(N-1)(Bits[W-1:W/2]) + Counter(N-1)(Bits[W/2-1:0])\n```\n\n#Verilog\u3067\u66f8\u3044\u3066\u307f\u308b\n\u95a2\u6570`Counter`\u3092\u305d\u306e\u307e\u307e\u56de\u8def\u306b\u3059\u308c\u3070\u3044\u3044\u3002\n\n```verilog\nmodule BitCounter#(parameter N=4)\n(\n    input[(1<<N)-1:0] Bits,\n    output[N:0] Count\n    );\n\n    if(N == 0) begin\n        assign Count = Bits;\n    end\n    else begin\n        localparam Width = 1<<N;\n        localparam Half = 1<<(N-1);\n        wire[Half-1:0] Hi = Bits[Width-1:Half];\n        wire[N-1:0] CHi;\n        BitCounter #(.N(N-1))counterH(.Bits(Hi),.Count(CHi));\n\n        wire[Half-1:0] Lo = Bits[Half-1:0];\n        wire[N-1:0] CLo;\n        BitCounter #(.N(N-1))counterL(.Bits(Lo),.Count(CLo));\n\n        assign Count = CHi + CLo;\n    end\nendmodule\n```\n\n#\u30d1\u30af\uff52...\u53c2\u8003\u306b\u3057\u305f\u30d7\u30ed\u30b0\u30e9\u30e0\n```\nx  =   (x & 0x55555555) + (x >> 1 & 0x55555555);\nx  =   (x & 0x33333333) + (x >> 2 & 0x33333333);\nx  =   (x & 0x0f0f0f0f) + (x >> 4 & 0x0f0f0f0f);\nx  =   (x & 0x00ff00ff) + (x >> 8 & 0x00ff00ff);\nreturn (x & 0x0000ffff) + (x >>16 & 0x0000ffff);\n```\n\n[Hacker's Delight](http://www.amazon.co.jp/exec/obidos/ASIN/0201914654/nakamuraminor-22/ref=nosim)\n", "tags": ["Verilog", "HDL", "FPGA"]}