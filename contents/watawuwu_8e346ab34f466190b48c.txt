{"context": " More than 1 year has passed since last update.\n\n\u3084\u308a\u305f\u3044\u3053\u3068\nService\u30af\u30e9\u30b9\u3067ScalikeJDBC(\u3042\u3068SkinnyOrm\u3082)\u306eDB\u30d6\u30ed\u30c3\u30af\u3092Mock\u3063\u307d\u304f\u51e6\u7406\u3057\u3066\u5358\u4f53\u30c6\u30b9\u30c8\u3092\u3057\u305f\u3044\u3002\nPlayfamework\u4e0a\u3067\u3084\u3063\u3066\u308b\u3051\u3069\u3001\u305d\u308c\u4ee5\u5916\u3067\u3082\u3067\u304d\u308b\u306f\u305a\n\n\u74b0\u5883\u3068\u304b\n\nPlayFramework ver2.3.x\nSkinnyOrm ver1.3.6\nScalikejdbc ver 2.2.0\n\n\n\u5b9f\u73fe\u65b9\u6cd5\n\nCakePattern\u3092\u9069\u5f53\u306b\u4f7f\u3046\nDB\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092NamedDB\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u306b\u4fee\u6b63\nDBSession\u3092Mock\nNamedDB\u3092Mock\u2026\n\u306b\u3057\u305f\u304b\u3063\u305f\u3051\u3069DB\u30d6\u30ed\u30c3\u30af\u306f\u30c6\u30b9\u30c8\u306e\u5bfe\u8c61\u306b\u3057\u305f\u3044\n\u4e0a\u624b\u304fMockito\u306eanswers\u3092\u4f7f\u7528\u3059\u308c\u3070\u3044\u3051\u308b\u6c17\u304c\u3059\u308b\u3051\u3069\u3001override\u3059\u308b\u3053\u3068\u3067\u56de\u907f\n\n\n\u30c6\u30b9\u30c8\u30b5\u30f3\u30d7\u30eb\n\n\u5b9f\u88c5\n\n\nPerson.scala\ncase class Person(\n  id: Long,\n  name: String)\n\n// \u30ea\u30dd\u30b8\u30c8\u30ea\u3060\u3088\ntrait PersonRepositoryComponent {\n\n  val personRepository: PersonRepository\n  //\u3053\u3053\u306f\u9069\u5f53\n  class PersonRepository\n    extends SkinnyCRUDMapper[Person] {\n\n    override val tableName = \"people\"\n    override val defaultAlias = createAlias(\"p\")\n\n    override def extract(rs: WrappedResultSet, p: ResultName[Person]): Person = new Person(\n      id = rs.get(p.id),\n      name = rs.get(p.name))\n  }\n\n}\n\n// \u30b5\u30fc\u30d3\u30b9\u3060\u3088\ntrait PersonServiceComponent {\n  this: PersonRepositoryComponent =>\n\n  val personService: PersonService\n  val db: NamedDB\n\n  class PersonService {\n    def create(name: String): Person = {\n      val id = db.localTx { implicit session =>\n        // \u3053\u306e\u30d6\u30ed\u30c3\u30af\u3092\u30c6\u30b9\u30c8\u5bfe\u8c61\u306b\u3059\u308b\n        personRepository.createWithAttributes('name -> name)\n      }\n      Person(id, name)\n    }\n  }\n}\n\n// \u30ec\u30b8\u30b9\u30c8\u30ea(singleton)\u3060\u3088\nobject PersonRegister extends PersonRepositoryComponent with PersonServiceComponent {\n  val personRepository = new PersonRepository\n  val personService = new PersonService\n  val db = NamedDB(ConnectionPool.DEFAULT_NAME)\n}\n\n\n\n\u30b5\u30fc\u30d3\u30b9\u306e\u5358\u4f53\u30c6\u30b9\u30c8\n\n\nPersonSpec.scala\npackage models\n\nimport org.mockito.Matchers._\nimport org.mockito.Mockito._\nimport org.specs2.mutable.Specification\nimport scalikejdbc._\n\n// \u3044\u308d\u3044\u308d\u4e0d\u90fd\u5408\u304c\u3042\u3063\u305f\u306e\u3067Mockito\u3092\u30df\u30c3\u30af\u30b9\u30a4\u30f3\u3057\u306a\u3044\n// \u76f4\u63a5Mockito\u3092\u4f7f\u3046\u3088\nclass PersonSpec extends Specification {\n\n  object Register\n    extends PersonServiceComponent\n    with PersonRepositoryComponent {\n    val personRepository = mock(classOf[PersonRepository])\n    val personService = new PersonService\n\n    val db: NamedDB = new NamedDB(ConnectionPool.DEFAULT_NAME) {\n\n      # @todo Stub\u3067\u3067\u304d\u308b\u3068\u601d\u3046\u3051\u3069\u632b\u6298\n      override def localTx[A](execution: DBSession => A)\n                              (implicit boundary: TxBoundary[A]): A = {\n        execution.apply(mock(classOf[DBSession]))\n      }\n    }\n\n  }\n\n  \"Person\" should {\n    \"#create\" in {\n      val expectedPerson = Person(1, \"person_name\")\n      when(Register.personRepository.createWithAttributes(any[(Symbol, Any)])(any[DBSession])) thenReturn expectedPerson.id\n      val actualPerson = Register.personService.create(expectedPerson.name)\n      actualPerson mustEqual expectedPerson\n    }\n  }\n}\n\n\n\n\n\u305d\u3082\u305d\u3082\n\nMockito\u3067\u3001\u5f15\u6570\u306e\u95a2\u6570\u51e6\u7406\u3092\u305d\u306e\u307e\u307e\u5b9f\u884c\u3059\u308b\u3088\u3046\u306b\u3059\u308c\u3070\u3001\u3082\u3046\u5c11\u3057\u30b9\u30de\u30fc\u30c8\u306b\u89e3\u6c7a\u3067\u304d\u308b\u3051\u3069\u3001\u9014\u4e2d\u3067\u632b\u6298\u3002\nMockito\u96e3\u3057\u3044\u3001\u3060\u308c\u304b\u6559\u3048\u3066\uff01\uff01\nSkinnyOrm\u306e\u4f7f\u3044\u65b9\u306f\u6b63\u3057\u3044\u306e\u3060\u308d\u3046\u304b\u3002\n\n\n\u8ffd\u8a18\n\n2015-01-16 01\nNamedDB\u3082answer\u3067mock\u306b\u3067\u304d\u307e\u3057\u305f\u3002\n\nPersonSpec.scala\nclass PersonSpec extends Specification {\n\n  // \u30c6\u30b9\u30c8\u3054\u3068\u306b\u5909\u6570\u3092\u521d\u671f\u5316\n  isolated\n\n  val r = new PersonServiceComponent\n    with PersonRepositoryComponent {\n    val personRepository = mock(classOf[PersonRepository])\n    val personService = new PersonService\n    val db = mock(classOf[NamedDB])\n  }\n\n  \"Person\" should {\n    \"#create\" in {\n      val expectedPerson = Person(1, \"person_name\")\n      when(r.personRepository.createWithAttributes(any[(Symbol, Any)])(any[DBSession])) thenReturn expectedPerson.id\n      when(r.db.localTx(any()))\n        .thenAnswer(new Answer[Any] {\n        def answer(p1: InvocationOnMock): Any = {\n          p1.getArguments()(0).asInstanceOf[DBSession => Any].apply(mock(classOf[DBSession]))\n        }\n      })\n\n      val actualPerson = r.personService.create(expectedPerson.name)\n      verify(r.personRepository, times(1)).createWithAttributes(any[(Symbol, Any)])(any[DBSession])\n      verify(r.db, times(1)).localTx(any())\n      actualPerson mustEqual expectedPerson\n    }\n  }\n}\n\n\n\n2015-01-16 02\n\u30c6\u30b9\u30c8\u306f\u901a\u308b\u3051\u3069\u3001\u5b9f\u52d5\u4f5c\u3067\u306f\u300cjava.sql.SQLException: Connection is closed\u300d\u304c\u767a\u751f\u3057\u3066\u3044\u307e\u3057\u305f\u2026\nNamedDB\u306f\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u5316\u3057\u3066\u969b\u306b\u30b3\u30cd\u30af\u30b7\u30e7\u30f3\u3092\u53d6\u5f97\u3057\u3066\u3044\u305f\u306e\u3067\u3001\u3053\u306e\u307e\u307e\u3060\u3068\u4e00\u56de\u4f7f\u7528\u3057\u305f\u5f8c\u306f\u4e0a\u8a18\u306e\u30a8\u30e9\u30fc\u304c\u767a\u751f\u3057\u307e\u3059\u3002\n\nNamedDB.scala\nprivate lazy val db: DB = DB(connectionPool().borrow())\n\n\n\u3068\u308a\u3042\u3048\u305a\u306e\u56de\u907f\u65b9\u6cd5\u3068\u3057\u3066\u3001DB\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u30e9\u30c3\u30d1\u30fc\u3092\u4f5c\u6210\u3057\u3061\u3083\u3044\u307e\u3057\u305f\u304c\u3002\n\nDBWrapperComponent.scala\nimport scalikejdbc.{ DB, DBSession }\n\ntrait DBWrapperComponent {\n  val db: DBWrapper\n\n  class DBWrapper {\n    def localTx[A](execution: DBSession => A): A = DB.localTx(execution)\n    def readOnly[A](execution: DBSession => A): A = DB.readOnly(execution)\n  }\n}\n\n\n\nPerson.scala\nimport models.repository.DBWrapperComponent\nimport scalikejdbc.{WrappedResultSet, _}\nimport skinny.orm.SkinnyCRUDMapper\n\ncase class Person(\n  id: Long,\n  name: String)\n\n// \u30ea\u30dd\u30b8\u30c8\u30ea\u3060\u3088\ntrait PersonRepositoryComponent {\n\n  val personRepository: PersonRepository\n  //\u3053\u3053\u306f\u9069\u5f53\n  class PersonRepository\n      extends SkinnyCRUDMapper[Person] {\n\n    override val tableName = \"people\"\n    override val defaultAlias = createAlias(\"p\")\n\n    override def extract(rs: WrappedResultSet, p: ResultName[Person]): Person = new Person(\n      id = rs.get(p.id),\n      name = rs.get(p.name))\n  }\n\n}\n\n// \u30b5\u30fc\u30d3\u30b9\u3060\u3088\ntrait PersonServiceComponent {\n  this: PersonRepositoryComponent with DBWrapperComponent =>\n\n  val personService: PersonService\n\n  class PersonService {\n    def create(name: String): Person = {\n      val id = db.localTx { implicit session =>\n        // \u3053\u306e\u30d6\u30ed\u30c3\u30af\u3092\u30c6\u30b9\u30c8\u5bfe\u8c61\u306b\u3059\u308b\n        personRepository.createWithAttributes('name -> name)\n      }\n      Person(id, name)\n    }\n  }\n}\n\n// \u30ec\u30b8\u30b9\u30c8\u30ea(singleton)\u3060\u3088\nobject PersonRegister\n    extends PersonRepositoryComponent\n    with PersonServiceComponent\n    with DBWrapperComponent {\n  val personRepository = new PersonRepository\n  val personService = new PersonService\n  val db = new DBWrapper\n}\n\n\n\nPersonSpec.scala\nimport models.repository.DBWrapperComponent\nimport org.mockito.Matchers._\nimport org.mockito.Mockito._\nimport org.mockito.invocation.InvocationOnMock\nimport org.mockito.stubbing.Answer\nimport org.specs2.mutable._\nimport scalikejdbc.DBSession\n\n// \u30c6\u30b9\u30c8\u3060\u3088\nclass PersonSpec extends Specification {\n\n  // \u30c6\u30b9\u30c8\u3054\u3068\u306b\u5909\u6570\u3092\u521d\u671f\u5316\n  isolated\n\n  val r = new PersonServiceComponent with PersonRepositoryComponent with DBWrapperComponent {\n    val personRepository = mock(classOf[PersonRepository])\n    val personService = new PersonService\n    val db = mock(classOf[DBWrapper])\n  }\n\n  \"Person\" should {\n    \"#create\" in {\n      val expectedPerson = Person(1, \"person_name\")\n      when(r.personRepository.createWithAttributes(any[(Symbol, Any)])(any[DBSession])) thenReturn expectedPerson.id\n      when(r.db.localTx(any()))\n        .thenAnswer(new Answer[Any] {\n          def answer(p1: InvocationOnMock): Any = {\n            p1.getArguments()(0).asInstanceOf[DBSession => Any].apply(mock(classOf[DBSession]))\n          }\n        })\n\n      val actualPerson = r.personService.create(expectedPerson.name)\n      verify(r.personRepository, times(1)).createWithAttributes(any[(Symbol, Any)])(any[DBSession])\n      verify(r.db, times(1)).localTx(any())\n      actualPerson mustEqual expectedPerson\n    }\n  }\n}\n\n\n\n\u4eca\u56de\u306f\u4e0a\u8a18\u3067\u9003\u3052\u307e\u3057\u305f\u304c\u3001\u4f5c\u88fd\u8005\u306e\u65b9\u304b\u3089\u52a9\u8a00\u3092\u9802\u3044\u305f\u901a\u308a\u3001\u3082\u3046\u4e00\u679a\u30b5\u30fc\u30d3\u30b9\u3092\u631f\u3093\u3067\u30e2\u30c3\u30af\u5316\u3059\u308b\u306e\u304c\u30d9\u30bf\u30fc\u3060\u3068\u601d\u3044\u307e\u3059\u3002\n\u3068\u3044\u3046\u3053\u3068\u3067\u3001Repository\u3068\u304bService\u306e\u8cac\u52d9\u3082\u5927\u5206\u9069\u5f53\u306b\u306a\u3063\u3066\u3044\u308b\u306e\u3067\u3001\u826f\u3044\u65b9\u6cd5\u304c\u307f\u3064\u304b\u3063\u305f\u3089\u6539\u3081\u3066\u6295\u7a3f\u3057\u3088\u3046\u3068\u601d\u3044\u307e\u3059\uff01\uff01\n\n## \u3084\u308a\u305f\u3044\u3053\u3068\nService\u30af\u30e9\u30b9\u3067ScalikeJDBC(\u3042\u3068SkinnyOrm\u3082)\u306eDB\u30d6\u30ed\u30c3\u30af\u3092Mock\u3063\u307d\u304f\u51e6\u7406\u3057\u3066\u5358\u4f53\u30c6\u30b9\u30c8\u3092\u3057\u305f\u3044\u3002\n\nPlayfamework\u4e0a\u3067\u3084\u3063\u3066\u308b\u3051\u3069\u3001\u305d\u308c\u4ee5\u5916\u3067\u3082\u3067\u304d\u308b\u306f\u305a\n\n\n## \u74b0\u5883\u3068\u304b\n* PlayFramework ver2.3.x\n* SkinnyOrm ver1.3.6\n* Scalikejdbc ver 2.2.0\n\n## \u5b9f\u73fe\u65b9\u6cd5\n1. CakePattern\u3092\u9069\u5f53\u306b\u4f7f\u3046\n\n2. DB\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092NamedDB\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u306b\u4fee\u6b63\n\n3. DBSession\u3092Mock\n\n4. NamedDB\u3092Mock\u2026\n\u306b\u3057\u305f\u304b\u3063\u305f\u3051\u3069DB\u30d6\u30ed\u30c3\u30af\u306f\u30c6\u30b9\u30c8\u306e\u5bfe\u8c61\u306b\u3057\u305f\u3044\n\u4e0a\u624b\u304fMockito\u306eanswers\u3092\u4f7f\u7528\u3059\u308c\u3070\u3044\u3051\u308b\u6c17\u304c\u3059\u308b\u3051\u3069\u3001override\u3059\u308b\u3053\u3068\u3067\u56de\u907f\n\n## \u30c6\u30b9\u30c8\u30b5\u30f3\u30d7\u30eb\n* \u5b9f\u88c5\n\n```scala:Person.scala\ncase class Person(\n  id: Long,\n  name: String)\n\n// \u30ea\u30dd\u30b8\u30c8\u30ea\u3060\u3088\ntrait PersonRepositoryComponent {\n\n  val personRepository: PersonRepository\n  //\u3053\u3053\u306f\u9069\u5f53\n  class PersonRepository\n    extends SkinnyCRUDMapper[Person] {\n\n    override val tableName = \"people\"\n    override val defaultAlias = createAlias(\"p\")\n\n    override def extract(rs: WrappedResultSet, p: ResultName[Person]): Person = new Person(\n      id = rs.get(p.id),\n      name = rs.get(p.name))\n  }\n\n}\n\n// \u30b5\u30fc\u30d3\u30b9\u3060\u3088\ntrait PersonServiceComponent {\n  this: PersonRepositoryComponent =>\n\n  val personService: PersonService\n  val db: NamedDB\n\n  class PersonService {\n    def create(name: String): Person = {\n      val id = db.localTx { implicit session =>\n        // \u3053\u306e\u30d6\u30ed\u30c3\u30af\u3092\u30c6\u30b9\u30c8\u5bfe\u8c61\u306b\u3059\u308b\n        personRepository.createWithAttributes('name -> name)\n      }\n      Person(id, name)\n    }\n  }\n}\n\n// \u30ec\u30b8\u30b9\u30c8\u30ea(singleton)\u3060\u3088\nobject PersonRegister extends PersonRepositoryComponent with PersonServiceComponent {\n  val personRepository = new PersonRepository\n  val personService = new PersonService\n  val db = NamedDB(ConnectionPool.DEFAULT_NAME)\n}\n```\n\n* \u30b5\u30fc\u30d3\u30b9\u306e\u5358\u4f53\u30c6\u30b9\u30c8\n \n```scala:PersonSpec.scala\npackage models\n\nimport org.mockito.Matchers._\nimport org.mockito.Mockito._\nimport org.specs2.mutable.Specification\nimport scalikejdbc._\n\n// \u3044\u308d\u3044\u308d\u4e0d\u90fd\u5408\u304c\u3042\u3063\u305f\u306e\u3067Mockito\u3092\u30df\u30c3\u30af\u30b9\u30a4\u30f3\u3057\u306a\u3044\n// \u76f4\u63a5Mockito\u3092\u4f7f\u3046\u3088\nclass PersonSpec extends Specification {\n\n  object Register\n    extends PersonServiceComponent\n    with PersonRepositoryComponent {\n    val personRepository = mock(classOf[PersonRepository])\n    val personService = new PersonService\n\n    val db: NamedDB = new NamedDB(ConnectionPool.DEFAULT_NAME) {\n    \n      # @todo Stub\u3067\u3067\u304d\u308b\u3068\u601d\u3046\u3051\u3069\u632b\u6298\n      override def localTx[A](execution: DBSession => A)\n                              (implicit boundary: TxBoundary[A]): A = {\n        execution.apply(mock(classOf[DBSession]))\n      }\n    }\n\n  }\n\n  \"Person\" should {\n    \"#create\" in {\n      val expectedPerson = Person(1, \"person_name\")\n      when(Register.personRepository.createWithAttributes(any[(Symbol, Any)])(any[DBSession])) thenReturn expectedPerson.id\n      val actualPerson = Register.personService.create(expectedPerson.name)\n      actualPerson mustEqual expectedPerson\n    }\n  }\n}\n\n```\n\n\n## \u305d\u3082\u305d\u3082\n* Mockito\u3067\u3001\u5f15\u6570\u306e\u95a2\u6570\u51e6\u7406\u3092\u305d\u306e\u307e\u307e\u5b9f\u884c\u3059\u308b\u3088\u3046\u306b\u3059\u308c\u3070\u3001\u3082\u3046\u5c11\u3057\u30b9\u30de\u30fc\u30c8\u306b\u89e3\u6c7a\u3067\u304d\u308b\u3051\u3069\u3001\u9014\u4e2d\u3067\u632b\u6298\u3002\nMockito\u96e3\u3057\u3044\u3001\u3060\u308c\u304b\u6559\u3048\u3066\uff01\uff01\n\n* SkinnyOrm\u306e\u4f7f\u3044\u65b9\u306f\u6b63\u3057\u3044\u306e\u3060\u308d\u3046\u304b\u3002\n\n## \u8ffd\u8a18\n### 2015-01-16 01\nNamedDB\u3082answer\u3067mock\u306b\u3067\u304d\u307e\u3057\u305f\u3002\n\n\n```scala:PersonSpec.scala\nclass PersonSpec extends Specification {\n\n  // \u30c6\u30b9\u30c8\u3054\u3068\u306b\u5909\u6570\u3092\u521d\u671f\u5316\n  isolated\n\n  val r = new PersonServiceComponent\n    with PersonRepositoryComponent {\n    val personRepository = mock(classOf[PersonRepository])\n    val personService = new PersonService\n    val db = mock(classOf[NamedDB])\n  }\n\n  \"Person\" should {\n    \"#create\" in {\n      val expectedPerson = Person(1, \"person_name\")\n      when(r.personRepository.createWithAttributes(any[(Symbol, Any)])(any[DBSession])) thenReturn expectedPerson.id\n      when(r.db.localTx(any()))\n        .thenAnswer(new Answer[Any] {\n        def answer(p1: InvocationOnMock): Any = {\n          p1.getArguments()(0).asInstanceOf[DBSession => Any].apply(mock(classOf[DBSession]))\n        }\n      })\n\n      val actualPerson = r.personService.create(expectedPerson.name)\n      verify(r.personRepository, times(1)).createWithAttributes(any[(Symbol, Any)])(any[DBSession])\n      verify(r.db, times(1)).localTx(any())\n      actualPerson mustEqual expectedPerson\n    }\n  }\n}\n```\n\n### 2015-01-16 02\n\u30c6\u30b9\u30c8\u306f\u901a\u308b\u3051\u3069\u3001\u5b9f\u52d5\u4f5c\u3067\u306f\u300cjava.sql.SQLException: Connection is closed\u300d\u304c\u767a\u751f\u3057\u3066\u3044\u307e\u3057\u305f\u2026\nNamedDB\u306f\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u5316\u3057\u3066\u969b\u306b\u30b3\u30cd\u30af\u30b7\u30e7\u30f3\u3092\u53d6\u5f97\u3057\u3066\u3044\u305f\u306e\u3067\u3001\u3053\u306e\u307e\u307e\u3060\u3068\u4e00\u56de\u4f7f\u7528\u3057\u305f\u5f8c\u306f\u4e0a\u8a18\u306e\u30a8\u30e9\u30fc\u304c\u767a\u751f\u3057\u307e\u3059\u3002\n\n```scala:NamedDB.scala\nprivate lazy val db: DB = DB(connectionPool().borrow())\n```\n\u3068\u308a\u3042\u3048\u305a\u306e\u56de\u907f\u65b9\u6cd5\u3068\u3057\u3066\u3001DB\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u30e9\u30c3\u30d1\u30fc\u3092\u4f5c\u6210\u3057\u3061\u3083\u3044\u307e\u3057\u305f\u304c\u3002\n\n```scala:DBWrapperComponent.scala\nimport scalikejdbc.{ DB, DBSession }\n\ntrait DBWrapperComponent {\n  val db: DBWrapper\n\n  class DBWrapper {\n    def localTx[A](execution: DBSession => A): A = DB.localTx(execution)\n    def readOnly[A](execution: DBSession => A): A = DB.readOnly(execution)\n  }\n}\n```\n```scala:Person.scala\nimport models.repository.DBWrapperComponent\nimport scalikejdbc.{WrappedResultSet, _}\nimport skinny.orm.SkinnyCRUDMapper\n\ncase class Person(\n  id: Long,\n  name: String)\n\n// \u30ea\u30dd\u30b8\u30c8\u30ea\u3060\u3088\ntrait PersonRepositoryComponent {\n\n  val personRepository: PersonRepository\n  //\u3053\u3053\u306f\u9069\u5f53\n  class PersonRepository\n      extends SkinnyCRUDMapper[Person] {\n\n    override val tableName = \"people\"\n    override val defaultAlias = createAlias(\"p\")\n\n    override def extract(rs: WrappedResultSet, p: ResultName[Person]): Person = new Person(\n      id = rs.get(p.id),\n      name = rs.get(p.name))\n  }\n\n}\n\n// \u30b5\u30fc\u30d3\u30b9\u3060\u3088\ntrait PersonServiceComponent {\n  this: PersonRepositoryComponent with DBWrapperComponent =>\n\n  val personService: PersonService\n\n  class PersonService {\n    def create(name: String): Person = {\n      val id = db.localTx { implicit session =>\n        // \u3053\u306e\u30d6\u30ed\u30c3\u30af\u3092\u30c6\u30b9\u30c8\u5bfe\u8c61\u306b\u3059\u308b\n        personRepository.createWithAttributes('name -> name)\n      }\n      Person(id, name)\n    }\n  }\n}\n\n// \u30ec\u30b8\u30b9\u30c8\u30ea(singleton)\u3060\u3088\nobject PersonRegister\n    extends PersonRepositoryComponent\n    with PersonServiceComponent\n    with DBWrapperComponent {\n  val personRepository = new PersonRepository\n  val personService = new PersonService\n  val db = new DBWrapper\n}\n```\n\n```scala:PersonSpec.scala\nimport models.repository.DBWrapperComponent\nimport org.mockito.Matchers._\nimport org.mockito.Mockito._\nimport org.mockito.invocation.InvocationOnMock\nimport org.mockito.stubbing.Answer\nimport org.specs2.mutable._\nimport scalikejdbc.DBSession\n\n// \u30c6\u30b9\u30c8\u3060\u3088\nclass PersonSpec extends Specification {\n\n  // \u30c6\u30b9\u30c8\u3054\u3068\u306b\u5909\u6570\u3092\u521d\u671f\u5316\n  isolated\n\n  val r = new PersonServiceComponent with PersonRepositoryComponent with DBWrapperComponent {\n    val personRepository = mock(classOf[PersonRepository])\n    val personService = new PersonService\n    val db = mock(classOf[DBWrapper])\n  }\n\n  \"Person\" should {\n    \"#create\" in {\n      val expectedPerson = Person(1, \"person_name\")\n      when(r.personRepository.createWithAttributes(any[(Symbol, Any)])(any[DBSession])) thenReturn expectedPerson.id\n      when(r.db.localTx(any()))\n        .thenAnswer(new Answer[Any] {\n          def answer(p1: InvocationOnMock): Any = {\n            p1.getArguments()(0).asInstanceOf[DBSession => Any].apply(mock(classOf[DBSession]))\n          }\n        })\n\n      val actualPerson = r.personService.create(expectedPerson.name)\n      verify(r.personRepository, times(1)).createWithAttributes(any[(Symbol, Any)])(any[DBSession])\n      verify(r.db, times(1)).localTx(any())\n      actualPerson mustEqual expectedPerson\n    }\n  }\n}\n\n```\n\n\u4eca\u56de\u306f\u4e0a\u8a18\u3067\u9003\u3052\u307e\u3057\u305f\u304c\u3001\u4f5c\u88fd\u8005\u306e\u65b9\u304b\u3089\u52a9\u8a00\u3092\u9802\u3044\u305f\u901a\u308a\u3001\u3082\u3046\u4e00\u679a\u30b5\u30fc\u30d3\u30b9\u3092\u631f\u3093\u3067\u30e2\u30c3\u30af\u5316\u3059\u308b\u306e\u304c\u30d9\u30bf\u30fc\u3060\u3068\u601d\u3044\u307e\u3059\u3002\n\u3068\u3044\u3046\u3053\u3068\u3067\u3001Repository\u3068\u304bService\u306e\u8cac\u52d9\u3082\u5927\u5206\u9069\u5f53\u306b\u306a\u3063\u3066\u3044\u308b\u306e\u3067\u3001\u826f\u3044\u65b9\u6cd5\u304c\u307f\u3064\u304b\u3063\u305f\u3089\u6539\u3081\u3066\u6295\u7a3f\u3057\u3088\u3046\u3068\u601d\u3044\u307e\u3059\uff01\uff01\n", "tags": ["Scala2.11.2", "SkinnyOrm1.3.4", "scalikeJDBC2.1.4", "Specs22.3.12", "Mockito1.9.5"]}