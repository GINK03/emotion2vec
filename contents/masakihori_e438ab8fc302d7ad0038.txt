{"context": "\u304a\u305d\u3089\u304f\u3001\u3082\u3046\u4f55\u5ea6\u76ee\u3060\u3068\u8a00\u308f\u308c\u305d\u3046\u306a\u3082\u306e\u3067\u3059\u304c\u3001DEBUG\u30de\u30af\u30ed\u304c\u6709\u52b9\u306a\u6642\u306e\u307f\u30b3\u30f3\u30bd\u30fc\u30eb\u306b\u51fa\u529b\u3059\u308b\u95a2\u6570\u7fa4\u3067\u3059\u3002\nSwift.print \u306a\u3069\u3092\u30aa\u30fc\u30d0\u30fc\u30e9\u30a4\u30c9\u3059\u308b\u65b9\u6cd5\u304c\u3042\u3063\u305f\u308a\u3057\u307e\u3059\u304c\u3001\u30ea\u30ea\u30fc\u30b9\u6642\u306b\u3082\u51fa\u529b\u3057\u305f\u3044\u5834\u5408\u3001Swift.print\u3068\u3057\u306a\u3051\u308c\u3070\u306a\u3089\u306a\u3044\u306e\u304c\u9762\u5012\u81ed\u3044\u305f\u3081\u3001\u30af\u30e9\u30b9\u306b\u307e\u3068\u3081\u307e\u3057\u305f\u3002\uff08Swift\u306f\u4efb\u610f\u306e\u30cd\u30fc\u30e0\u30b9\u30da\u30fc\u30b9\u304c\u6301\u3066\u306a\u3044\u306e\u3067\uff09\n\u307e\u305f\u3001Debug\u30af\u30e9\u30b9\u306b\u307e\u3068\u3081\u305f\u3053\u3068\u3067Dubeg\u3067\u691c\u7d22\u3059\u308b\u3060\u3051\u3067\u3059\u3050\u898b\u3064\u304b\u308a\u307e\u3059\u3002\nDebug.debugPrint\u306e\u51fa\u529b\u306fSwift.debugPrint\u306e\u51fa\u529b\u3068\u306f\u5b8c\u5168\u306b\u306f\u4e00\u81f4\u3057\u3066\u3044\u307e\u305b\u3093\u3002\nclass Debug {\n    private struct Args: CustomStringConvertible, CustomDebugStringConvertible {\n        let args: [Any]\n        let separator: String\n        var description: String {\n            return args.map { \"\\($0)\" }.joined(separator: separator)\n        }\n        var debugDescription: String {\n            return args\n                .map { ($0 as? CustomDebugStringConvertible)?.debugDescription ?? \"\\($0)\" }\n                .joined(separator: separator)\n        }\n    }\n\n    class func print(_ items: Any..., separator: String = \" \", terminator: String = \"\\n\") {\n        #if DEBUG\n            Swift.print(Args(args: items, separator: separator), separator: separator, terminator: terminator)\n        #endif\n    }\n\n    class func debugPrint(_ items: Any..., separator: String = \" \", terminator: String = \"\\n\") {\n        #if DEBUG\n            Swift.debugPrint(Args(args: items, separator: separator), separator: separator, terminator: terminator)\n        #endif\n    }\n\n    class func dump<T>(_ value: T, name: String? = nil, indent: Int = 0, maxDepth: Int = Int.max, maxItems: Int = Int.max) -> T {\n        #if DEBUG\n        return Swift.dump(value, name: name, indent: indent, maxDepth: maxDepth, maxItems: maxItems)\n        #else\n        return value\n        #endif\n    }\n}\n\n\n\u304a\u305d\u3089\u304f\u3001\u3082\u3046\u4f55\u5ea6\u76ee\u3060\u3068\u8a00\u308f\u308c\u305d\u3046\u306a\u3082\u306e\u3067\u3059\u304c\u3001DEBUG\u30de\u30af\u30ed\u304c\u6709\u52b9\u306a\u6642\u306e\u307f\u30b3\u30f3\u30bd\u30fc\u30eb\u306b\u51fa\u529b\u3059\u308b\u95a2\u6570\u7fa4\u3067\u3059\u3002\n\nSwift.print \u306a\u3069\u3092\u30aa\u30fc\u30d0\u30fc\u30e9\u30a4\u30c9\u3059\u308b\u65b9\u6cd5\u304c\u3042\u3063\u305f\u308a\u3057\u307e\u3059\u304c\u3001\u30ea\u30ea\u30fc\u30b9\u6642\u306b\u3082\u51fa\u529b\u3057\u305f\u3044\u5834\u5408\u3001`Swift.print`\u3068\u3057\u306a\u3051\u308c\u3070\u306a\u3089\u306a\u3044\u306e\u304c\u9762\u5012\u81ed\u3044\u305f\u3081\u3001\u30af\u30e9\u30b9\u306b\u307e\u3068\u3081\u307e\u3057\u305f\u3002\uff08Swift\u306f\u4efb\u610f\u306e\u30cd\u30fc\u30e0\u30b9\u30da\u30fc\u30b9\u304c\u6301\u3066\u306a\u3044\u306e\u3067\uff09\n\n\u307e\u305f\u3001Debug\u30af\u30e9\u30b9\u306b\u307e\u3068\u3081\u305f\u3053\u3068\u3067Dubeg\u3067\u691c\u7d22\u3059\u308b\u3060\u3051\u3067\u3059\u3050\u898b\u3064\u304b\u308a\u307e\u3059\u3002\n\n`Debug.debugPrint`\u306e\u51fa\u529b\u306f`Swift.debugPrint`\u306e\u51fa\u529b\u3068\u306f\u5b8c\u5168\u306b\u306f\u4e00\u81f4\u3057\u3066\u3044\u307e\u305b\u3093\u3002\n\n```swift\nclass Debug {\n    private struct Args: CustomStringConvertible, CustomDebugStringConvertible {\n        let args: [Any]\n        let separator: String\n        var description: String {\n            return args.map { \"\\($0)\" }.joined(separator: separator)\n        }\n        var debugDescription: String {\n            return args\n                .map { ($0 as? CustomDebugStringConvertible)?.debugDescription ?? \"\\($0)\" }\n                .joined(separator: separator)\n        }\n    }\n    \n    class func print(_ items: Any..., separator: String = \" \", terminator: String = \"\\n\") {\n        #if DEBUG\n            Swift.print(Args(args: items, separator: separator), separator: separator, terminator: terminator)\n        #endif\n    }\n    \n    class func debugPrint(_ items: Any..., separator: String = \" \", terminator: String = \"\\n\") {\n        #if DEBUG\n            Swift.debugPrint(Args(args: items, separator: separator), separator: separator, terminator: terminator)\n        #endif\n    }\n    \n    class func dump<T>(_ value: T, name: String? = nil, indent: Int = 0, maxDepth: Int = Int.max, maxItems: Int = Int.max) -> T {\n        #if DEBUG\n        return Swift.dump(value, name: name, indent: indent, maxDepth: maxDepth, maxItems: maxItems)\n        #else\n        return value\n        #endif\n    }\n}\n\n```\n", "tags": ["Swift", "Swift3.0"]}