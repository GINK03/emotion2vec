{"context": " More than 1 year has passed since last update.\u30b9\u30da\u30fc\u30b9\u30ad\u30fc\u3092\u62bc\u3059\u3068\u30b0\u30ea\u30fc\u30f3\u306e\u70b9\u6ec5\u304b\u3089\u30ec\u30c3\u30c9\u306e\u70b9\u6ec5\u306b\u5909\u308f\u308b\u3002\npackage main\nimport(\n    \"fmt\"\n    \"time\"\n    \"syscall\"\n)\nvar ch chan int;\nfunc A() {\n    for {\n        c := <- ch\n        if c == 1 {\n            time.Sleep(500 * time.Millisecond)\n            fmt.Println(\"green on\")\n            time.Sleep(500 * time.Millisecond)\n            fmt.Println(\"green off\")\n        }\n    }\n}\nfunc B() {\n    for {\n        c := <- ch\n        if c == 0 {\n            time.Sleep(500 * time.Millisecond)\n            fmt.Println(\"red on\")\n            time.Sleep(500 * time.Millisecond)\n            fmt.Println(\"red off\")\n        }\n    }\n}\nfunc C() {\n    for {\n        if GetKeyState(0x20) < 0 {\n            //fmt.Println(\"sw on\")\n            ch <- 1\n        } else {\n            //fmt.Println(\"sw off\")\n            ch <- 0\n        }\n        time.Sleep(200 * time.Millisecond)\n    }\n}\nvar moduser32 = syscall.NewLazyDLL(\"user32.dll\")\nvar procGetKeyState = moduser32.NewProc(\"GetKeyState\")\nfunc GetKeyState(nVirtKey int) int16 {\n    ret, _, _ := procGetKeyState.Call(uintptr(nVirtKey))\n    return int16(ret)\n}\nfunc main() {\n    ch = make(chan int)\n    go A()\n    go B()\n    go C()\n    for {\n        <- ch\n    }\n}\n\n\u30b9\u30da\u30fc\u30b9\u30ad\u30fc\u3092\u62bc\u3059\u3068\u30b0\u30ea\u30fc\u30f3\u306e\u70b9\u6ec5\u304b\u3089\u30ec\u30c3\u30c9\u306e\u70b9\u6ec5\u306b\u5909\u308f\u308b\u3002\n\n```\npackage main\nimport(\n\t\"fmt\"\n\t\"time\"\n\t\"syscall\"\n)\nvar ch chan int;\nfunc A() {\n\tfor {\n\t\tc := <- ch\n\t\tif c == 1 {\n\t\t\ttime.Sleep(500 * time.Millisecond)\n\t\t\tfmt.Println(\"green on\")\n\t\t\ttime.Sleep(500 * time.Millisecond)\n\t\t\tfmt.Println(\"green off\")\n\t\t}\n\t}\n}\nfunc B() {\n\tfor {\n\t\tc := <- ch\n\t\tif c == 0 {\n\t\t\ttime.Sleep(500 * time.Millisecond)\n\t\t\tfmt.Println(\"red on\")\n\t\t\ttime.Sleep(500 * time.Millisecond)\n\t\t\tfmt.Println(\"red off\")\n\t\t}\n\t}\n}\nfunc C() {\n\tfor {\n\t\tif GetKeyState(0x20) < 0 {\n\t\t\t//fmt.Println(\"sw on\")\n\t\t\tch <- 1\n\t\t} else {\n\t\t\t//fmt.Println(\"sw off\")\n\t\t\tch <- 0\n\t\t}\n\t\ttime.Sleep(200 * time.Millisecond)\n\t}\n}\nvar moduser32 = syscall.NewLazyDLL(\"user32.dll\")\nvar procGetKeyState = moduser32.NewProc(\"GetKeyState\")\nfunc GetKeyState(nVirtKey int) int16 {\n\tret, _, _ := procGetKeyState.Call(uintptr(nVirtKey))\n\treturn int16(ret)\n}\nfunc main() {\n\tch = make(chan int)\n\tgo A()\n\tgo B()\n\tgo C()\n\tfor {\n\t\t<- ch\n\t}\n}\n```\n", "tags": ["Go", "L\u30c1\u30ab"]}