{"context": "Hemesh\u306fProcessing\u30673D\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u4f5c\u308b\u6642\u306b\u5f79\u306b\u7acb\u3064\u30e9\u30a4\u30d6\u30e9\u30ea\u3067\u3059\u3002\ngithub\u306f\u3053\u3061\u3089\n\n\u57fa\u672c\u7684\u306a\u7d39\u4ecb\nHemesh\u306fhalf-edged mesh geometry\u306e\u7565\u3067\u3001\u7acb\u4f53\u3092\u8868\u73fe\u3059\u308b\u969b\u306bhalf-edged mesh geometry\u3068\u3044\u3046\u65b9\u5f0f\u3092\u5229\u7528\u3057\u3066\u3044\u307e\u3059\u3002\n(half-edged mesh geometry\u306b\u3064\u3044\u3066\u306f\u3053\u3061\u3089)\nHemesh\u3067\u6271\u3046\u30af\u30e9\u30b9\u306b\u306f\u57fa\u672c\u7684\u306b4\u7a2e\u985e\u3042\u3063\u3066\u3001\u5168\u3066\u306e\u5f62\u3092\n\nHE_ : \u30e1\u30c3\u30b7\u30e5\u95a2\u4fc2\u306e\u30c7\u30fc\u30bf\nHEC_ : \u57fa\u672c\u7684\u306a\u5e7e\u4f55\u5b66\u30fb\u914d\u7f6e\n\n\u306e2\u7a2e\u985e\u306e\u30af\u30e9\u30b9\u3067\u4f5c\u308a\u307e\u3059\u3002\n\u305d\u3057\u3066\u3001HEM_\u30af\u30e9\u30b9\u3067\u5909\u5f62\u7b49\u3092\u6307\u5b9a\u3057\u307e\u3059\u3002WB\u30af\u30e9\u30b9\u3068\u3044\u3046\u3082\u306e\u304c\u6f14\u7b97\u30fb\u30ec\u30f3\u30c0\u30ea\u30f3\u30b0\u3092\u62c5\u5f53\u3057\u307e\u3059\u3002\n\n\u57fa\u672c\u30ed\u30b8\u30c3\u30af\nHE_Mesh\u3067\u30e1\u30c3\u30b7\u30e5\u521d\u671f\u5316\u3057\u3066\u3001HEC_\u3067\u30e1\u30c3\u30b7\u30e5\u3092\u4f5c\u308b\u3068\u3044\u3046\u306e\u304c\u57fa\u672c\u3002\nHE_Mesh\u3067\u306f\u30b3\u30a2\u3068\u306a\u308b\u30c7\u30fc\u30bf\u306b\u30a2\u30af\u30bb\u30b9\u3067\u304d\u308b\u3057\u3001HEC_\u3067\u306f\u3044\u308d\u3093\u306a\u5f62\u3068\u3001\u305d\u308c\u306b\u95a2\u4fc2\u3059\u308b\u30e1\u30bd\u30c3\u30c9\u306b\u30a2\u30af\u30bb\u30b9\u3067\u304d\u307e\u3059\u3002\n\u4f8b\u3048\u3070HEC_Cube\u30af\u30e9\u30b9\u3092\u4f7f\u3046\u3068edge, segment height, width, depth, inner/mid/outer radius\u7b49\u306e\u30e1\u30bd\u30c3\u30c9\u3092\u4f7f\u3046\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\n\u30b5\u30f3\u30d7\u30eb\u30d7\u30ed\u30b0\u30e9\u30e0\n\nA_cube_basic_setup.pde\n/*\nPLEASE READ INTRO TAB\n*/\n\n/////////////////////////// GLOBALS ////////////////////////////\n// LIBRARY IMPORT\nimport wblut.math.*;\nimport wblut.processing.*;\nimport wblut.core.*;\nimport wblut.hemesh.*;\nimport wblut.geom.*;\nimport processing.opengl.*;\n\n// HEMESH CLASSES & OBJECTS\nHE_Mesh MESH; // Our mesh object\nWB_Render RENDER; // Our render object\n\n// CAM\nimport peasy.*;\nPeasyCam CAM;\n\n/////////////////////////// SETUP ////////////////////////////\n\nvoid setup() {\n  size(800, 600, OPENGL);\n  CAM = new PeasyCam(this, 150);  \n\n  // OUR CREATOR \n  HEC_Cube creator = new HEC_Cube(); \n\n  //CREATOR PARMAMETERS\n  creator.setEdge(70); // edge length in pixels\n\n  MESH = new HE_Mesh(creator); // add our creator object to our mesh object\n  RENDER = new WB_Render(this); // RENDER object initialise\n}\n\n/////////////////////////// DRAW ////////////////////////////\nvoid draw() {\n  background(255);\n  // CAMERA\n  CAM.beginHUD(); // this method disables PeasyCam for the commands between beginHUD & endHUD\n  directionalLight(255, 255, 255, 1, 1, -1);\n  directionalLight(127, 127, 127, -1, -1, 1);\n  CAM.endHUD();\n\n  // HEMESH\n  // We draw our faces using the RENDER object\n  noStroke();\n  fill(0, 255, 255);\n  RENDER.drawFaces( MESH ); // Draw MESH faces\n\n  stroke(255, 0, 0);\n  RENDER.drawEdges( MESH ); // Draw MESH edges\n}\n\n\n\u5b9f\u884c\u7d50\u679c\n\n\n\u30bb\u30c3\u30c8\u30a2\u30c3\u30d7\n\u307e\u305aglobal\u3067\n\nHE_Mesh MESH;\n\n\u3092\u5ba3\u8a00\u3002\n\u305d\u3057\u3066\u3001processing\u306esetup()\u95a2\u6570\u5185\u3067\n\nHEC_Cube creator = new HEC_Cube();\n\n\u306e\u3088\u3046\u306b\u30e1\u30c3\u30b7\u30e5\u3092\u4f5c\u308bobject\u3092\u3064\u304f\u3063\u305f\u5f8c\u3001\n\nMESH = new HE_Mesh(creator);\n\n\u3068\u3057\u3066HE_Mesh\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3068\u3057\u3066\u30b3\u30fc\u30eb\u3057\u307e\u3059\u3002\n\u307e\u305f\u3001WB_Render\u30af\u30e9\u30b9\u306f\u30e9\u30a4\u30d6\u30e9\u30ea\u5185\u306e\u5168\u3066\u306e\u95a2\u6570\u3092\u63d0\u4f9b\u3059\u308b\u3082\u306e\u3067\u3001\u30b3\u30fc\u30c9\u306e\u6700\u521d\u306b\u521d\u671f\u5316\u3057\u3066\u304a\u304d\u307e\u3059\u3002\u753b\u9762\u3078\u306e\u7d50\u679c\u8868\u793a\u306b\u3082\u4f7f\u3044\u307e\u3059\u3002\n\nglobal\u3067 WB_Render RENDER;\nsetup();\u3067 RENDER = new WB_Render(this);\ndraw();\u3067 RENDER.drawFaces( MESH ); // Notice we add the mesh object within the parentheses.\n\n\nPeasyCam\n\u5ea7\u6a19\u5909\u63db\u3084\u30de\u30a6\u30b9\u3068\u306e\u30a4\u30f3\u30bf\u30e9\u30af\u30b7\u30e7\u30f3\u7528\u306bPeasyCam\u30e9\u30a4\u30d6\u30e9\u30ea\u3082\u4f7f\u3046\u3068\u5409\u3067\u3059\u3002\nhttp://mrfeinberg.com/peasycam/\n\n\u57fa\u672c\u30e1\u30bd\u30c3\u30c9\nHEC_Cube creator\u306e\u30e1\u30bd\u30c3\u30c9\u3092\u7d39\u4ecb\u3057\u307e\u3059\u3002\n\nB_cube_basic_setup.pde\n/*\nPLEASE READ INTRO TAB\n*/\n\n/////////////////////////// GLOBALS ////////////////////////////\n// LIBRARY IMPORT\nimport wblut.math.*;\nimport wblut.processing.*;\nimport wblut.core.*;\nimport wblut.hemesh.*;\nimport wblut.geom.*;\nimport processing.opengl.*;\n\n// HEMESH CLASSES & OBJECTS\nHE_Mesh MESH; // Our mesh object\nWB_Render RENDER; // Our render object\n\n// CAM\nimport peasy.*;\nPeasyCam CAM;\n\n/////////////////////////// SETUP ////////////////////////////\n\nvoid setup() {\n  size(800, 600, OPENGL);\n  CAM = new PeasyCam(this, 150);  \n\n  // OUR CREATOR\n  HEC_Cube creator = new HEC_Cube(); \n\n  //CREATOR PARMAMETERS\n  creator.setEdge(70); // edge length in pixels\n  creator.setWidthSegments(4).setHeightSegments(4).setDepthSegments(4); // keep these small\n\n  //alternatively \n  //creator.setRadius(50);\n  //creator.setInnerRadius(50);// radius of sphere inscribed in cube\n  //Try these two\n  //creator.setOuterRadius(25);// radius of sphere circumscribing cube\n  //creator.setMidRadius(10);// radius of sphere tangential to edges\n\n  // These params set the initial position & need to be initialised seperately \n  // from other params such as height / setWidthSegments / edges ...\n  creator.setCenter(0, 0, 0).setZAxis(1, 1, 1).setZAngle(PI/4);\n\n  MESH = new HE_Mesh(creator);\n\n  //MESH.triangulate(); // this is one of many methods we can access from the HE_Mesh class\n  RENDER = new WB_Render(this); // RENDER object initialise\n}\n\n/////////////////////////// DRAW ////////////////////////////\nvoid draw() {\n  background(255);\n  // CAMERA\n  CAM.beginHUD(); // this method disables PeasyCam for the commands between beginHUD & endHUD\n  directionalLight(255, 255, 255, 1, 1, -1);\n  directionalLight(127, 127, 127, -1, -1, 1);\n  CAM.endHUD();\n\n  // HEMESH\n  // We draw our faces, vertices and edges using the RENDER object\n  noStroke();\n  fill(0, 0, 255);\n  RENDER.drawFaces( MESH ); // Draw MESH faces\n\n  fill(0, 255, 0);\n  RENDER.drawVertices( 2, MESH ); // Draw MESH vertices\n\n\n  stroke(255,0,0);\n  RENDER.drawEdges( MESH ); // Draw MESH edges\n  //RENDER.drawFaceNormals( 10, MESH );\n}\n\nvoid keyPressed() {\n    if (key == 's') {\n    saveFrame(\"screenShot_###.png\");\n    println(\"screen shot taken\");\n   }\n\n}\n\n\n\u5b9f\u884c\u7d50\u679c\n\ndraw();\u5185\u306bfaces, edges, vertices, normals(\u6cd5\u7dda)\u3092\u898b\u308b\u305f\u3081\u306e\u30e1\u30bd\u30c3\u30c9\u3082\u542b\u3093\u3067\u3044\u307e\u3059\u3002\n\nRENDER.drawFaces( MESH );\nRENDER.drawVertices( 2, MESH );\nRENDER.drawEdges( MESH );\nRENDER.drawFaceNormals( 10, MESH );\n\nsetup()\u3067\u30b3\u30e1\u30f3\u30c8\u30a2\u30a6\u30c8\u3057\u3066\u3044\u308btriangulation\u30e1\u30bd\u30c3\u30c9\u3092\u30a2\u30af\u30c6\u30a3\u30d9\u30fc\u30c8\u3059\u308b\u3068\u3001cubes\u304c\u9055\u3046\u65b9\u6cd5\u3067\u63cf\u753b\u3055\u308c\u308b\u3088\u3046\u306b\u306a\u308b\u306e\u304c\u308f\u304b\u308a\u307e\u3059\u3002\u4e0a\u8a18\u30e1\u30bd\u30c3\u30c9\u306f\u30c7\u30d1\u30c3\u30b0\u306b\u3082\u4fbf\u5229\u3067\u3059\u3002\n\ndrawVertex, drawVertexNormals\u3068\u304b\u3082\u4fbf\u5229\u305d\u3046\u3067\u3059\u3002\n\nModifires\nModifiers\u3092\u4f7f\u3046\u306b\u306f\u3001\u307e\u305aHEM_modifier\u30af\u30e9\u30b9\u3092\u9078\u629e\u3057\u3066\u3001\u3044\u308d\u3044\u308d\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u3044\u3058\u3063\u3066\u3001modify()\u3092\u5b9f\u884c\u3057\u3066\u30e1\u30c3\u30b7\u30e5\u306b\u53cd\u6620\u3055\u305b\u307e\u3059\u3002\n\nC_cube_modif_extrude.pde\n/*\nPLEASE READ INTRO TAB\n */\n\n/////////////////////////// GLOBALS ////////////////////////////\n// LIBRARY IMPORT\nimport wblut.math.*;\nimport wblut.processing.*;\nimport wblut.core.*;\nimport wblut.hemesh.*;\nimport wblut.geom.*;\nimport processing.opengl.*;\n\n// HEMESH CLASSES & OBJECTS\nHE_Mesh MESH; // Our mesh object\nWB_Render RENDER; // Our render object\n\n// CAM\nimport peasy.*;\nPeasyCam CAM;\n\n/////////////////////////// SETUP ////////////////////////////\n\nvoid setup() {\n  size(800, 600, OPENGL);\n  CAM = new PeasyCam(this, 400);  \n\n  // OUR CREATOR\n  HEC_Cube creator = new HEC_Cube(); \n\n  //CREATOR PARMAMETERS\n  creator.setEdge(70); \n  creator.setCenter(0, 0, 0).setZAxis(1, 1, 1).setZAngle(PI/4);\n  // Activate this line to see what happens\n  //creator.setWidthSegments(4).setHeightSegments(4).setDepthSegments(4); // keep these small\n\n  MESH = new HE_Mesh(creator); // add our creator object to our mesh object\n\n  // MODIFIER : SIMPLE EXTRUSION MODIFIER \n  HEM_Extrude extrude = new HEM_Extrude().setDistance(70);\n  MESH.modify( extrude ); // ADD OUR MODIFIER TO THE MESH\n\n  RENDER = new WB_Render(this); \n}\n\n/////////////////////////// DRAW ////////////////////////////\nvoid draw() {\n  background(255);\n  // CAMERA\n  CAM.beginHUD(); \n  directionalLight(255, 255, 255, 1, 1, -1);\n  directionalLight(127, 127, 127, -1, -1, 1);\n  CAM.endHUD();\n\n  // HEMESH\n  // To visualise better what is happening, I've activated the edges and disactivated the faces.\n  /*\n  noStroke();\n  fill(0, 0, 255);\n  RENDER.drawFaces( MESH ); // Draw MESH faces\n  */\n\n  stroke(0, 0, 255);\n  strokeWeight(5);\n  RENDER.drawEdges( MESH ); // Draw MESH edges\n}\n\nvoid keyPressed() {\n  if (key == 'r') {\n    setup();\n  }\n  if (key == 's') {\n    saveFrame(\"screenShot.png\");\n  }\n}\n\n\n\u5b9f\u884c\u7d50\u679c\n\n\u8981\u306f\u62bc\u3057\u51fa\u3057\u3067\u3059\n\nHEM_Extrude extrude = new HEM_Extrude().setDistance(70);\nMESH.modify( extrude ); // ADD OUR MODIFIER TO THE MESH\n\nsegment width, height, depth\u306f\u30c7\u30d5\u30a9\u30eb\u30c8\u3067\u306f1\u3067\u3059\u3002\ncreator.setWidthSegments(4).setHeightSegments(4);\n\u306a\u3069\u3068\u6307\u5b9a\u3059\u308b\u3068\u3001\n\n\u3053\u3093\u306a\u98a8\u306b\u306a\u308a\u307e\u3059\u3002\n\nModifier\u306e\u7d44\u307f\u5408\u308f\u305b\n\nC_cube_modif_chamfer.pde\n/*\nPLEASE READ INTRO TAB\n */\n\n/////////////////////////// GLOBALS ////////////////////////////\n// LIBRARY\nimport wblut.math.*;\nimport wblut.processing.*;\nimport wblut.core.*;\nimport wblut.hemesh.*;\nimport wblut.geom.*;\nimport processing.opengl.*;\n\n\n// HEMESH CLASSES & OBJECTS\nHE_Mesh MESH; // Our mesh object\nWB_Render RENDER; // Our render object\nHEC_Cube creator; // Our creator object\n\n// CAM\nimport peasy.*;\nPeasyCam CAM;\n\n/////////////////////////// SETUP ////////////////////////////\n\nvoid setup() {\n  size(800, 600, OPENGL);\n  CAM = new PeasyCam(this, 150);  \n\n  creator = new HEC_Cube(); // Our creator \n\n  //CREATOR PARMAMETERS\n  creator.setEdge(60); \n  MESH = new HE_Mesh(creator);  // ADD OUR CREATOR PARAMETERS TO OUR MESH\n\n  // SIMPLE CHAMFER MODIFIER\n  HEM_ChamferCorners chamfer = new HEM_ChamferCorners().setDistance(20);\n  HEM_ChamferEdges edges = new HEM_ChamferEdges().setDistance(5);\n\n  MESH.modify( chamfer ); // ADD OUR MODIFIER TO THE MESH\n  MESH.modify( edges );\n\n  RENDER = new WB_Render(this); // RENDER MESH\n}\n\n/////////////////////////// DRAW ////////////////////////////\nvoid draw() {\n  background(255);\n  //CAMERA\n  CAM.beginHUD(); // this method disables PeasyCam for the commands between beginHUD & endHUD\n  directionalLight(255, 255, 255, 1, 1, -1);\n  directionalLight(127, 127, 127, -1, -1, 1);\n  CAM.endHUD();\n\n  //HEMESH\n  /*\n  noStroke();\n  fill(0, 0, 255);\n  RENDER.drawFaces( MESH ); // Draw MESH faces\n*/\n\n  stroke(0, 0, 255);\n  strokeWeight( 5 );\n   RENDER.drawEdges( MESH ); //Draw MESH edges\n\n}\n\n// SOME KEYS INTERACTION\nvoid keyPressed() {\n\n  if (key == 'e') {\n    // Hemesh includes a method for exporting geometry\n    // in stl file format wich is very handy for 3D printing ;\u2013)\n    HET_Export.saveToSTL(MESH, sketchPath(\"export.stl\"), \"test\");\n  }\n\n   if (key == 's') {\n    saveFrame(\"screenShot_###.png\");\n    println(\"screen shot taken\");\n   }\n  if (key == 'o') {\n    // reset camera origin positions  - do this before\n    // exporting your shape so your shape is positioned\n    // on a flat plane ready for 3D printing\n    CAM.reset(1000);\n  }\n  // Print camera position - could be helpful\n  if (key == 'p') {\n    float[] camPos = CAM.getPosition();\n    println(camPos);\n  }\n}\n\n\n\u5b9f\u884c\u7d50\u679c\n\nchamfer\u306e\u6570\u5024\u3092\u3044\u3058\u308b\u3068\u3061\u304c\u3063\u305f\u5f62\u306b\u3082\u306a\u308a\u307e\u3059\u3002\n\n\u3053\u3053\u3067stl\u306b\u66f8\u304d\u51fa\u305d\u3046\u3068\u3059\u308b\u3068\u3001\u58ca\u308c\u3066\u3057\u307e\u3044\u307e\u3057\u305f\u3002\n\n\u3053\u308c\u306f\u4fdd\u5b58\u3059\u308b\u524d\u306bMESH.triangulate()\u3092\u5b9f\u884c\u3059\u308b\u3053\u3068\u3067\u89e3\u6c7a\u3067\u304d\u307e\u3057\u305f\u3002\n\n\u3053\u3053\u306b\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb\u304c\u3042\u308a\u307e\u3059\u3002\n[Hemesh](http://he_mesh.wblut.com/)\u306fProcessing\u30673D\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u4f5c\u308b\u6642\u306b\u5f79\u306b\u7acb\u3064\u30e9\u30a4\u30d6\u30e9\u30ea\u3067\u3059\u3002\ngithub\u306f[\u3053\u3061\u3089](https://github.com/wblut/HE_Mesh)\n\n#\u57fa\u672c\u7684\u306a\u7d39\u4ecb\nHemesh\u306fhalf-edged mesh geometry\u306e\u7565\u3067\u3001\u7acb\u4f53\u3092\u8868\u73fe\u3059\u308b\u969b\u306bhalf-edged mesh geometry\u3068\u3044\u3046\u65b9\u5f0f\u3092\u5229\u7528\u3057\u3066\u3044\u307e\u3059\u3002\n(half-edged mesh geometry\u306b\u3064\u3044\u3066\u306f[\u3053\u3061\u3089](http://www.flipcode.com/archives/The_Half-Edge_Data_Structure.shtml))\n\nHemesh\u3067\u6271\u3046\u30af\u30e9\u30b9\u306b\u306f\u57fa\u672c\u7684\u306b4\u7a2e\u985e\u3042\u3063\u3066\u3001\u5168\u3066\u306e\u5f62\u3092\b\n\n- HE_ : \u30e1\u30c3\u30b7\u30e5\u95a2\u4fc2\u306e\u30c7\u30fc\u30bf\n- HEC_ : \u57fa\u672c\u7684\u306a\u5e7e\u4f55\u5b66\u30fb\u914d\u7f6e\n\n\u306e2\u7a2e\u985e\u306e\u30af\u30e9\u30b9\u3067\u4f5c\u308a\u307e\u3059\u3002\n\n\u305d\u3057\u3066\u3001HEM_\u30af\u30e9\u30b9\u3067\u5909\u5f62\u7b49\u3092\u6307\u5b9a\u3057\u307e\u3059\u3002WB\u30af\u30e9\u30b9\u3068\u3044\u3046\u3082\u306e\u304c\u6f14\u7b97\u30fb\u30ec\u30f3\u30c0\u30ea\u30f3\u30b0\u3092\u62c5\u5f53\u3057\u307e\u3059\u3002\n\n#\u57fa\u672c\u30ed\u30b8\u30c3\u30af\nHE_Mesh\u3067\u30e1\u30c3\u30b7\u30e5\u521d\u671f\u5316\u3057\u3066\u3001HEC_\u3067\u30e1\u30c3\u30b7\u30e5\u3092\u4f5c\u308b\u3068\u3044\u3046\u306e\u304c\u57fa\u672c\u3002\nHE_Mesh\u3067\u306f\u30b3\u30a2\u3068\u306a\u308b\u30c7\u30fc\u30bf\u306b\u30a2\u30af\u30bb\u30b9\u3067\u304d\u308b\u3057\u3001HEC_\u3067\u306f\u3044\u308d\u3093\u306a\u5f62\u3068\u3001\u305d\u308c\u306b\u95a2\u4fc2\u3059\u308b\u30e1\u30bd\u30c3\u30c9\u306b\u30a2\u30af\u30bb\u30b9\u3067\u304d\u307e\u3059\u3002\n\u4f8b\u3048\u3070HEC_Cube\u30af\u30e9\u30b9\u3092\u4f7f\u3046\u3068edge, segment height, width, depth, inner/mid/outer radius\u7b49\u306e\u30e1\u30bd\u30c3\u30c9\u3092\u4f7f\u3046\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\n#\u30b5\u30f3\u30d7\u30eb\u30d7\u30ed\u30b0\u30e9\u30e0\n```A_cube_basic_setup.pde\n/*\nPLEASE READ INTRO TAB\n*/\n\n/////////////////////////// GLOBALS ////////////////////////////\n// LIBRARY IMPORT\nimport wblut.math.*;\nimport wblut.processing.*;\nimport wblut.core.*;\nimport wblut.hemesh.*;\nimport wblut.geom.*;\nimport processing.opengl.*;\n\n// HEMESH CLASSES & OBJECTS\nHE_Mesh MESH; // Our mesh object\nWB_Render RENDER; // Our render object\n\n// CAM\nimport peasy.*;\nPeasyCam CAM;\n\n/////////////////////////// SETUP ////////////////////////////\n\nvoid setup() {\n  size(800, 600, OPENGL);\n  CAM = new PeasyCam(this, 150);  \n\n  // OUR CREATOR \n  HEC_Cube creator = new HEC_Cube(); \n\n  //CREATOR PARMAMETERS\n  creator.setEdge(70); // edge length in pixels\n\n  MESH = new HE_Mesh(creator); // add our creator object to our mesh object\n  RENDER = new WB_Render(this); // RENDER object initialise\n}\n\n/////////////////////////// DRAW ////////////////////////////\nvoid draw() {\n  background(255);\n  // CAMERA\n  CAM.beginHUD(); // this method disables PeasyCam for the commands between beginHUD & endHUD\n  directionalLight(255, 255, 255, 1, 1, -1);\n  directionalLight(127, 127, 127, -1, -1, 1);\n  CAM.endHUD();\n\n  // HEMESH\n  // We draw our faces using the RENDER object\n  noStroke();\n  fill(0, 255, 255);\n  RENDER.drawFaces( MESH ); // Draw MESH faces\n\n  stroke(255, 0, 0);\n  RENDER.drawEdges( MESH ); // Draw MESH edges\n}\n```\n\n\u5b9f\u884c\u7d50\u679c\n<img width=\"350\" alt=\"\u30b9\u30af\u30ea\u30fc\u30f3\u30b7\u30e7\u30c3\u30c8 2016-08-11 19.57.15.png\" src=\"https://qiita-image-store.s3.amazonaws.com/0/108483/d3f25425-2260-5be2-ab51-ae3ecb1116ca.png\">\n\n\n#\u30bb\u30c3\u30c8\u30a2\u30c3\u30d7\n\u307e\u305aglobal\u3067\n\n>HE_Mesh MESH;\n\n\u3092\u5ba3\u8a00\u3002\n\u305d\u3057\u3066\u3001processing\u306esetup()\u95a2\u6570\u5185\u3067\n\n>HEC_Cube creator = new HEC_Cube();\n\n\u306e\u3088\u3046\u306b\u30e1\u30c3\u30b7\u30e5\u3092\u4f5c\u308bobject\u3092\u3064\u304f\u3063\u305f\u5f8c\u3001\n\n>MESH = new HE_Mesh(creator);\n\n\u3068\u3057\u3066HE_Mesh\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3068\u3057\u3066\u30b3\u30fc\u30eb\u3057\u307e\u3059\u3002\n\n\u307e\u305f\u3001WB_Render\u30af\u30e9\u30b9\u306f\u30e9\u30a4\u30d6\u30e9\u30ea\u5185\u306e\u5168\u3066\u306e\u95a2\u6570\u3092\u63d0\u4f9b\u3059\u308b\u3082\u306e\u3067\u3001\u30b3\u30fc\u30c9\u306e\u6700\u521d\u306b\u521d\u671f\u5316\u3057\u3066\u304a\u304d\u307e\u3059\u3002\u753b\u9762\u3078\u306e\u7d50\u679c\u8868\u793a\u306b\u3082\u4f7f\u3044\u307e\u3059\u3002\n\n1. global\u3067 WB_Render RENDER;\n2. setup();\u3067 RENDER = new WB_Render(this);\n3. draw();\u3067 RENDER.drawFaces( MESH ); // Notice we add the mesh object within the parentheses.\n\n#PeasyCam\n\u5ea7\u6a19\u5909\u63db\u3084\u30de\u30a6\u30b9\u3068\u306e\u30a4\u30f3\u30bf\u30e9\u30af\u30b7\u30e7\u30f3\u7528\u306bPeasyCam\u30e9\u30a4\u30d6\u30e9\u30ea\u3082\u4f7f\u3046\u3068\u5409\u3067\u3059\u3002\nhttp://mrfeinberg.com/peasycam/\n\n#\u57fa\u672c\u30e1\u30bd\u30c3\u30c9\nHEC_Cube creator\u306e\u30e1\u30bd\u30c3\u30c9\u3092\u7d39\u4ecb\u3057\u307e\u3059\u3002\n\n```B_cube_basic_setup.pde\n/*\nPLEASE READ INTRO TAB\n*/\n\n/////////////////////////// GLOBALS ////////////////////////////\n// LIBRARY IMPORT\nimport wblut.math.*;\nimport wblut.processing.*;\nimport wblut.core.*;\nimport wblut.hemesh.*;\nimport wblut.geom.*;\nimport processing.opengl.*;\n\n// HEMESH CLASSES & OBJECTS\nHE_Mesh MESH; // Our mesh object\nWB_Render RENDER; // Our render object\n\n// CAM\nimport peasy.*;\nPeasyCam CAM;\n\n/////////////////////////// SETUP ////////////////////////////\n\nvoid setup() {\n  size(800, 600, OPENGL);\n  CAM = new PeasyCam(this, 150);  \n  \n  // OUR CREATOR\n  HEC_Cube creator = new HEC_Cube(); \n  \n  //CREATOR PARMAMETERS\n  creator.setEdge(70); // edge length in pixels\n  creator.setWidthSegments(4).setHeightSegments(4).setDepthSegments(4); // keep these small\n  \n  //alternatively \n  //creator.setRadius(50);\n  //creator.setInnerRadius(50);// radius of sphere inscribed in cube\n  //Try these two\n  //creator.setOuterRadius(25);// radius of sphere circumscribing cube\n  //creator.setMidRadius(10);// radius of sphere tangential to edges\n  \n  // These params set the initial position & need to be initialised seperately \n  // from other params such as height / setWidthSegments / edges ...\n  creator.setCenter(0, 0, 0).setZAxis(1, 1, 1).setZAngle(PI/4);\n \n  MESH = new HE_Mesh(creator);\n  \n  //MESH.triangulate(); // this is one of many methods we can access from the HE_Mesh class\n  RENDER = new WB_Render(this); // RENDER object initialise\n}\n\n/////////////////////////// DRAW ////////////////////////////\nvoid draw() {\n  background(255);\n  // CAMERA\n  CAM.beginHUD(); // this method disables PeasyCam for the commands between beginHUD & endHUD\n  directionalLight(255, 255, 255, 1, 1, -1);\n  directionalLight(127, 127, 127, -1, -1, 1);\n  CAM.endHUD();\n  \n  // HEMESH\n  // We draw our faces, vertices and edges using the RENDER object\n  noStroke();\n  fill(0, 0, 255);\n  RENDER.drawFaces( MESH ); // Draw MESH faces\n  \n  fill(0, 255, 0);\n  RENDER.drawVertices( 2, MESH ); // Draw MESH vertices\n  \n  \n  stroke(255,0,0);\n  RENDER.drawEdges( MESH ); // Draw MESH edges\n  //RENDER.drawFaceNormals( 10, MESH );\n}\n\nvoid keyPressed() {\n    if (key == 's') {\n    saveFrame(\"screenShot_###.png\");\n    println(\"screen shot taken\");\n   }\n  \n}\n```\n\n\u5b9f\u884c\u7d50\u679c\n<img width=\"497\" alt=\"\u30b9\u30af\u30ea\u30fc\u30f3\u30b7\u30e7\u30c3\u30c8 2016-08-11 20.57.03.png\" src=\"https://qiita-image-store.s3.amazonaws.com/0/108483/09d58da4-b69a-0979-9127-3792764a3505.png\">\n\ndraw();\u5185\u306bfaces, edges, vertices, normals(\u6cd5\u7dda)\u3092\u898b\u308b\u305f\u3081\u306e\u30e1\u30bd\u30c3\u30c9\u3082\u542b\u3093\u3067\u3044\u307e\u3059\u3002\n\n>RENDER.drawFaces( MESH );\nRENDER.drawVertices( 2, MESH );\nRENDER.drawEdges( MESH );\nRENDER.drawFaceNormals( 10, MESH );\n\nsetup()\u3067\u30b3\u30e1\u30f3\u30c8\u30a2\u30a6\u30c8\u3057\u3066\u3044\u308btriangulation\u30e1\u30bd\u30c3\u30c9\u3092\u30a2\u30af\u30c6\u30a3\u30d9\u30fc\u30c8\u3059\u308b\u3068\u3001cubes\u304c\u9055\u3046\u65b9\u6cd5\u3067\u63cf\u753b\u3055\u308c\u308b\u3088\u3046\u306b\u306a\u308b\u306e\u304c\u308f\u304b\u308a\u307e\u3059\u3002\u4e0a\u8a18\u30e1\u30bd\u30c3\u30c9\u306f\u30c7\u30d1\u30c3\u30b0\u306b\u3082\u4fbf\u5229\u3067\u3059\u3002\n<img width=\"458\" alt=\"\u30b9\u30af\u30ea\u30fc\u30f3\u30b7\u30e7\u30c3\u30c8 2016-08-11 20.58.57.png\" src=\"https://qiita-image-store.s3.amazonaws.com/0/108483/28e6f811-4759-6788-752c-6f30ef5287d0.png\">\n\ndrawVertex, drawVertexNormals\u3068\u304b\u3082\u4fbf\u5229\u305d\u3046\u3067\u3059\u3002\n\n#Modifires\nModifiers\u3092\u4f7f\u3046\u306b\u306f\u3001\u307e\u305aHEM_modifier\u30af\u30e9\u30b9\u3092\u9078\u629e\u3057\u3066\u3001\u3044\u308d\u3044\u308d\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u3044\u3058\u3063\u3066\u3001modify()\u3092\u5b9f\u884c\u3057\u3066\u30e1\u30c3\u30b7\u30e5\u306b\u53cd\u6620\u3055\u305b\u307e\u3059\u3002\n\n```C_cube_modif_extrude.pde\n/*\nPLEASE READ INTRO TAB\n */\n\n/////////////////////////// GLOBALS ////////////////////////////\n// LIBRARY IMPORT\nimport wblut.math.*;\nimport wblut.processing.*;\nimport wblut.core.*;\nimport wblut.hemesh.*;\nimport wblut.geom.*;\nimport processing.opengl.*;\n\n// HEMESH CLASSES & OBJECTS\nHE_Mesh MESH; // Our mesh object\nWB_Render RENDER; // Our render object\n\n// CAM\nimport peasy.*;\nPeasyCam CAM;\n\n/////////////////////////// SETUP ////////////////////////////\n\nvoid setup() {\n  size(800, 600, OPENGL);\n  CAM = new PeasyCam(this, 400);  \n\n  // OUR CREATOR\n  HEC_Cube creator = new HEC_Cube(); \n\n  //CREATOR PARMAMETERS\n  creator.setEdge(70); \n  creator.setCenter(0, 0, 0).setZAxis(1, 1, 1).setZAngle(PI/4);\n  // Activate this line to see what happens\n  //creator.setWidthSegments(4).setHeightSegments(4).setDepthSegments(4); // keep these small\n\n  MESH = new HE_Mesh(creator); // add our creator object to our mesh object\n\n  // MODIFIER : SIMPLE EXTRUSION MODIFIER \n  HEM_Extrude extrude = new HEM_Extrude().setDistance(70);\n  MESH.modify( extrude ); // ADD OUR MODIFIER TO THE MESH\n\n  RENDER = new WB_Render(this); \n}\n\n/////////////////////////// DRAW ////////////////////////////\nvoid draw() {\n  background(255);\n  // CAMERA\n  CAM.beginHUD(); \n  directionalLight(255, 255, 255, 1, 1, -1);\n  directionalLight(127, 127, 127, -1, -1, 1);\n  CAM.endHUD();\n  \n  // HEMESH\n  // To visualise better what is happening, I've activated the edges and disactivated the faces.\n  /*\n  noStroke();\n  fill(0, 0, 255);\n  RENDER.drawFaces( MESH ); // Draw MESH faces\n  */\n  \n  stroke(0, 0, 255);\n  strokeWeight(5);\n  RENDER.drawEdges( MESH ); // Draw MESH edges\n}\n\nvoid keyPressed() {\n  if (key == 'r') {\n    setup();\n  }\n  if (key == 's') {\n    saveFrame(\"screenShot.png\");\n  }\n}\n```\n\n\u5b9f\u884c\u7d50\u679c\n<img width=\"329\" alt=\"\u30b9\u30af\u30ea\u30fc\u30f3\u30b7\u30e7\u30c3\u30c8 2016-08-11 21.03.26.png\" src=\"https://qiita-image-store.s3.amazonaws.com/0/108483/b60b2b8c-8794-80ea-719a-fe1d90c2ed3c.png\">\n\n\u8981\u306f\u62bc\u3057\u51fa\u3057\u3067\u3059\n>HEM_Extrude extrude = new HEM_Extrude().setDistance(70);\nMESH.modify( extrude ); // ADD OUR MODIFIER TO THE MESH\n\nsegment width, height, depth\u306f\u30c7\u30d5\u30a9\u30eb\u30c8\u3067\u306f1\u3067\u3059\u3002\ncreator.setWidthSegments(4).setHeightSegments(4);\n\u306a\u3069\u3068\u6307\u5b9a\u3059\u308b\u3068\u3001\n<img width=\"352\" alt=\"\u30b9\u30af\u30ea\u30fc\u30f3\u30b7\u30e7\u30c3\u30c8 2016-08-11 21.07.45.png\" src=\"https://qiita-image-store.s3.amazonaws.com/0/108483/45d5f63c-4b6e-a14a-c2da-68cb3b37ef47.png\">\n\u3053\u3093\u306a\u98a8\u306b\u306a\u308a\u307e\u3059\u3002\n\n#Modifier\u306e\u7d44\u307f\u5408\u308f\u305b\n\n```C_cube_modif_chamfer.pde\n/*\nPLEASE READ INTRO TAB\n */\n\n/////////////////////////// GLOBALS ////////////////////////////\n// LIBRARY\nimport wblut.math.*;\nimport wblut.processing.*;\nimport wblut.core.*;\nimport wblut.hemesh.*;\nimport wblut.geom.*;\nimport processing.opengl.*;\n\n\n// HEMESH CLASSES & OBJECTS\nHE_Mesh MESH; // Our mesh object\nWB_Render RENDER; // Our render object\nHEC_Cube creator; // Our creator object\n\n// CAM\nimport peasy.*;\nPeasyCam CAM;\n\n/////////////////////////// SETUP ////////////////////////////\n\nvoid setup() {\n  size(800, 600, OPENGL);\n  CAM = new PeasyCam(this, 150);  \n\n  creator = new HEC_Cube(); // Our creator \n\n  //CREATOR PARMAMETERS\n  creator.setEdge(60); \n  MESH = new HE_Mesh(creator);  // ADD OUR CREATOR PARAMETERS TO OUR MESH\n\n  // SIMPLE CHAMFER MODIFIER\n  HEM_ChamferCorners chamfer = new HEM_ChamferCorners().setDistance(20);\n  HEM_ChamferEdges edges = new HEM_ChamferEdges().setDistance(5);\n\n  MESH.modify( chamfer ); // ADD OUR MODIFIER TO THE MESH\n  MESH.modify( edges );\n\n  RENDER = new WB_Render(this); // RENDER MESH\n}\n\n/////////////////////////// DRAW ////////////////////////////\nvoid draw() {\n  background(255);\n  //CAMERA\n  CAM.beginHUD(); // this method disables PeasyCam for the commands between beginHUD & endHUD\n  directionalLight(255, 255, 255, 1, 1, -1);\n  directionalLight(127, 127, 127, -1, -1, 1);\n  CAM.endHUD();\n\n  //HEMESH\n  /*\n  noStroke();\n  fill(0, 0, 255);\n  RENDER.drawFaces( MESH ); // Draw MESH faces\n*/\n  \n  stroke(0, 0, 255);\n  strokeWeight( 5 );\n   RENDER.drawEdges( MESH ); //Draw MESH edges\n   \n}\n\n// SOME KEYS INTERACTION\nvoid keyPressed() {\n\n  if (key == 'e') {\n    // Hemesh includes a method for exporting geometry\n    // in stl file format wich is very handy for 3D printing ;\u2013)\n    HET_Export.saveToSTL(MESH, sketchPath(\"export.stl\"), \"test\");\n  }\n  \n   if (key == 's') {\n    saveFrame(\"screenShot_###.png\");\n    println(\"screen shot taken\");\n   }\n  if (key == 'o') {\n    // reset camera origin positions  - do this before\n    // exporting your shape so your shape is positioned\n    // on a flat plane ready for 3D printing\n    CAM.reset(1000);\n  }\n  // Print camera position - could be helpful\n  if (key == 'p') {\n    float[] camPos = CAM.getPosition();\n    println(camPos);\n  }\n}\n```\n\n\u5b9f\u884c\u7d50\u679c\n<img width=\"285\" alt=\"\u30b9\u30af\u30ea\u30fc\u30f3\u30b7\u30e7\u30c3\u30c8 2016-08-11 21.22.11.png\" src=\"https://qiita-image-store.s3.amazonaws.com/0/108483/fcb88e9c-95b5-b020-737b-33b9a5bb11d1.png\">\n\nchamfer\u306e\u6570\u5024\u3092\u3044\u3058\u308b\u3068\u3061\u304c\u3063\u305f\u5f62\u306b\u3082\u306a\u308a\u307e\u3059\u3002\n<img width=\"212\" alt=\"\u30b9\u30af\u30ea\u30fc\u30f3\u30b7\u30e7\u30c3\u30c8 2016-08-11 21.24.13.png\" src=\"https://qiita-image-store.s3.amazonaws.com/0/108483/8e9e5601-0796-e60e-6ada-a3d521665666.png\">\n\n\u3053\u3053\u3067stl\u306b\u66f8\u304d\u51fa\u305d\u3046\u3068\u3059\u308b\u3068\u3001\u58ca\u308c\u3066\u3057\u307e\u3044\u307e\u3057\u305f\u3002\n<img width=\"350\" alt=\"\u30b9\u30af\u30ea\u30fc\u30f3\u30b7\u30e7\u30c3\u30c8 2016-08-11 21.24.59.png\" src=\"https://qiita-image-store.s3.amazonaws.com/0/108483/1cf9bd06-56fd-1ea7-b5da-f266058e948d.png\">\n\n\u3053\u308c\u306f\u4fdd\u5b58\u3059\u308b\u524d\u306bMESH.triangulate()\u3092\u5b9f\u884c\u3059\u308b\u3053\u3068\u3067\u89e3\u6c7a\u3067\u304d\u307e\u3057\u305f\u3002\n<img width=\"300\" alt=\"\u30b9\u30af\u30ea\u30fc\u30f3\u30b7\u30e7\u30c3\u30c8 2016-08-11 21.28.16.png\" src=\"https://qiita-image-store.s3.amazonaws.com/0/108483/b064e441-ec5b-6d4e-1a56-fb4fd5c80979.png\">\n\n\n[\u3053\u3053](http://freeartbureau.org/fab_activity/hemesh-3d-printing/)\u306b\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb\u304c\u3042\u308a\u307e\u3059\u3002\n", "tags": ["processing3", "processing", "hemesh", "3D"]}