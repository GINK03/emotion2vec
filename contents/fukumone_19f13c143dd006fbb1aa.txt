{"context": " More than 1 year has passed since last update.\n\n\u30ca\u30c3\u30d7\u30b5\u30c3\u30af\u554f\u984c\n\u91cd\u3055\u3068\u4fa1\u5024\u304c\u305d\u308c\u305e\u308cwi,vi\u3067\u3042\u308b\u3088\u3046\u306an\u500b\u306e\u54c1\u7269\u304c\u3042\u308a\u307e\u3059\u3002\n\u3053\u308c\u3089\u306e\u54c1\u7269\u304b\u3089\u3001\u91cd\u3055\u306e\u7dcf\u548c\u304cW\u3092\u8d85\u3048\u306a\u3044\u3088\u3046\u306b\u9078\u3093\u3060\u6642\u306e\u4fa1\u5024\u306e\u7dcf\u548c\u306e\n\u6700\u5927\u5024\u3092\u6c42\u3081\u306a\u3055\u3044\u3002\n\n#\u518d\u5e30\u547c\u3073\u51fa\u3057\n\nN = 4\nARRAY = [ [2, 3], [1, 2], [3, 4], [2, 2] ]\nARRAY_W = [ 2, 1, 3, 2 ]\nARRAY_V = [ 3, 2, 4, 2 ]\nW = 5\n\ndef rec(i, j)\n  res = 0\n  if i == N\n    # \u3082\u3046\u54c1\u7269\u306f\u6b8b\u3063\u3066\u3044\u306a\u3044\n    res = 0\n  elsif j < ARRAY_W[i]\n    #\u3053\u306e\u54c1\u7269\u306f\u5165\u3089\u306a\u3044\n    res = rec(i + 1, j)\n  else\n    #\u5165\u308c\u306a\u3044\u5834\u5408\u3068\u5165\u308c\u308b\u5834\u5408\u306e\u4e21\u65b9\u3092\u8a66\u3059\n    res = [ rec(i + 1, j), rec(i + 1, j - ARRAY_W[i]) + ARRAY_V[i] ].max\n  end\n  res\nend\n\nputs \"#{rec(0, W)}\"\n\n\n\n#\u518d\u5e30\u547c\u3073\u51fa\u3057(\u30e1\u30e2\u5316)\n\n\ndef rec_memo(i, j, memo_arr)\n  if memo_arr[i][j] >= 0\n    memo_arr[i][j]\n  end\n\n  if i == N\n    res = 0\n  elsif j < ARRAY_W[i]\n    res = rec_memo(i + 1, j, memo_arr)\n  else # ARRAY_W[i] < j\n    res = [ rec_memo(i + 1, j, memo_arr), rec_memo(i + 1, j - ARRAY_W[i], memo_arr) + ARRAY_V[i] ].max\n  end\n  memo_arr[i][j] = res\nend\n\nmemo_arr = Array.new(W + 1, Array.new(W + 1, -1))\n\np \"#{rec_memo(0, W, memo_arr)}\"\n\n\n#\u52d5\u7684\u8a08\u753b\u6cd5\n\nN = gets.to_i\nW = gets.to_i\n\narr_w = []\narr_v = []\n\nN.times do |i|\n  key, value = gets.split(\" \").map(&:to_i)\n  arr_w << key\n  arr_v << value\nend\n\nmax_cost = 0\ndp = Hash.new\ndp[0] = 0\n\nN.times do |ind|\n  dp_tmp = dp.clone\n\n  dp.each do |key, value|\n    total_key = key + arr_w[ind]\n    total_value = value + arr_v[ind]\n\n    unless dp_tmp.has_key?(total_key)\n      dp_tmp[total_key] = total_value\n    end\n\n    if W >= total_key && total_value > max_cost\n      max_cost = total_value\n    end\n  end\n\n  dp = dp_tmp\nend\n\np max_cost\n\n\n## \u30ca\u30c3\u30d7\u30b5\u30c3\u30af\u554f\u984c\n\n\u91cd\u3055\u3068\u4fa1\u5024\u304c\u305d\u308c\u305e\u308cwi,vi\u3067\u3042\u308b\u3088\u3046\u306an\u500b\u306e\u54c1\u7269\u304c\u3042\u308a\u307e\u3059\u3002\n\u3053\u308c\u3089\u306e\u54c1\u7269\u304b\u3089\u3001\u91cd\u3055\u306e\u7dcf\u548c\u304cW\u3092\u8d85\u3048\u306a\u3044\u3088\u3046\u306b\u9078\u3093\u3060\u6642\u306e\u4fa1\u5024\u306e\u7dcf\u548c\u306e\n\u6700\u5927\u5024\u3092\u6c42\u3081\u306a\u3055\u3044\u3002\n\n```rb\n\n#\u518d\u5e30\u547c\u3073\u51fa\u3057\n\nN = 4\nARRAY = [ [2, 3], [1, 2], [3, 4], [2, 2] ]\nARRAY_W = [ 2, 1, 3, 2 ]\nARRAY_V = [ 3, 2, 4, 2 ]\nW = 5\n\ndef rec(i, j)\n  res = 0\n  if i == N\n    # \u3082\u3046\u54c1\u7269\u306f\u6b8b\u3063\u3066\u3044\u306a\u3044\n    res = 0\n  elsif j < ARRAY_W[i]\n    #\u3053\u306e\u54c1\u7269\u306f\u5165\u3089\u306a\u3044\n    res = rec(i + 1, j)\n  else\n    #\u5165\u308c\u306a\u3044\u5834\u5408\u3068\u5165\u308c\u308b\u5834\u5408\u306e\u4e21\u65b9\u3092\u8a66\u3059\n    res = [ rec(i + 1, j), rec(i + 1, j - ARRAY_W[i]) + ARRAY_V[i] ].max\n  end\n  res\nend\n\nputs \"#{rec(0, W)}\"\n\n```\n\n\n```rb\n\n#\u518d\u5e30\u547c\u3073\u51fa\u3057(\u30e1\u30e2\u5316)\n\n\ndef rec_memo(i, j, memo_arr)\n  if memo_arr[i][j] >= 0\n    memo_arr[i][j]\n  end\n\n  if i == N\n    res = 0\n  elsif j < ARRAY_W[i]\n    res = rec_memo(i + 1, j, memo_arr)\n  else # ARRAY_W[i] < j\n    res = [ rec_memo(i + 1, j, memo_arr), rec_memo(i + 1, j - ARRAY_W[i], memo_arr) + ARRAY_V[i] ].max\n  end\n  memo_arr[i][j] = res\nend\n\nmemo_arr = Array.new(W + 1, Array.new(W + 1, -1))\n\np \"#{rec_memo(0, W, memo_arr)}\"\n\n```\n\n```rb\n#\u52d5\u7684\u8a08\u753b\u6cd5\n\nN = gets.to_i\nW = gets.to_i\n\narr_w = []\narr_v = []\n\nN.times do |i|\n  key, value = gets.split(\" \").map(&:to_i)\n  arr_w << key\n  arr_v << value\nend\n\nmax_cost = 0\ndp = Hash.new\ndp[0] = 0\n\nN.times do |ind|\n  dp_tmp = dp.clone\n\n  dp.each do |key, value|\n    total_key = key + arr_w[ind]\n    total_value = value + arr_v[ind]\n\n    unless dp_tmp.has_key?(total_key)\n      dp_tmp[total_key] = total_value\n    end\n\n    if W >= total_key && total_value > max_cost\n      max_cost = total_value\n    end\n  end\n\n  dp = dp_tmp\nend\n\np max_cost\n\n```\n", "tags": ["\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0", "Ruby"]}