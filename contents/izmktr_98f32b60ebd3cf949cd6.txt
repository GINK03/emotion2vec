{"context": "\u300c\u91cd\u3055\u304c1,3,5,6,8 \u3068\u3044\u30465\u3064\u306e\u54c1\u7269\u3092\u3044\u304f\u3064\u304b\u9078\u3093\u3067\u3001\u6700\u308210\u306b\u8fd1\u3065\u3051\u308b\u306b\u306f\u3069\u3046\u7d44\u307f\u5408\u308f\u305b\u308c\u3070\u3044\u3044\u304b\u300d\n\u3053\u3046\u3044\u3046\u554f\u984c\u306e\u3053\u3068\u3092\u30ca\u30c3\u30d7\u30b5\u30c3\u30af\u554f\u984c\u3068\u3044\u3044\u307e\u3059\u3002\n\u4eca\u56de\u306f1,3,6\u3068\u8a70\u3081\u308c\u3070\u3001\u4e01\u5ea610\u306b\u306a\u308a\u307e\u3059\u304c\u3001\u3069\u306e\u3088\u3046\u306b\u7d44\u307f\u308f\u305b\u3066\u3082\u3074\u3063\u305f\u308a\u306b\u306a\u308b\u3053\u3068\u306f\u306a\u3044\u554f\u984c\u3082\u3042\u308a\u307e\u3059\n\u30ca\u30c3\u30d7\u30b5\u30c3\u30af\u554f\u984c\n\u4e00\u6b21\u5143\u306e\u30bf\u30a4\u30eb\u30d1\u30ba\u30eb\u3068\u3044\u3046\u611f\u3058\u3067\u7c21\u5358\u305d\u3046\u306b\u898b\u3048\u307e\u3059\u304c\u3001\u5b8c\u5168\u306b\u6c42\u3081\u308b\u306b\u306f\u7dcf\u5f53\u308a\u3057\u304b\u306a\u3044\u3001\u7d50\u69cb\u5384\u4ecb\u306a\u554f\u984c\u3067\u3059\n\u54c1\u7269\u306e\u5019\u88dc\u304c100\u500b\u3042\u308b\u5834\u5408\u30012^100\u901a\u308a\u306e\u9078\u3073\u65b9\u304c\u3042\u308b\u306e\u3067\u3068\u3066\u3082\u307e\u3068\u3082\u306b\u306f\u8a08\u7b97\u3067\u304d\u307e\u305b\u3093\n\u305d\u3053\u3067\u3001\u679d\u5208\u308a\u30dd\u30a4\u30f3\u30c8\u3092\u63a2\u3057\u3066\u3044\u304d\u307e\u3057\u3087\u3046\n\u591a\u304f\u306e\u5834\u5408\u306f\u3001100\u500b\u306e\u54c1\u7269\u304c\u3042\u3063\u3066\u3082\u3001\u305b\u3044\u305c\u3044\u5165\u308b\u306e\u306f10\u500b\u524d\u5f8c\u3067\u3057\u3087\u3046\n\u3067\u3059\u306e\u3067\u3001\u5168\u3066\u3092\u30c1\u30a7\u30c3\u30af\u3059\u308b\u5fc5\u8981\u304c\u306a\u3044\u3053\u3068\u304c\u308f\u304b\u308a\u307e\u3059\n\u5165\u308b\u30d1\u30bf\u30fc\u30f3\u3092\u52b9\u7387\u3088\u304f\u63a2\u3059\u305f\u3081\u306b\u3001\u4ee5\u4e0b\u306e\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u3067\u63a2\u7d22\u3057\u3066\u3044\u304d\u307e\u3059\n\u307e\u305a\u3001\u30e1\u30e2\u3092\u7528\u610f\u3057\u3066\u30011\u500b\u76ee\u306e\u54c1\u7269\u306e\u91cd\u3055\u3092\u66f8\u304d\u307e\u3059\n2\u500b\u76ee\u306f\u30012\u500b\u76ee\u306e\u54c1\u7269\u306e\u91cd\u3055\u3068\u3001\u3053\u308c\u307e\u3067\u30e1\u30e2\u306b\u66f8\u3044\u3066\u3044\u305f\u5024\u30682\u500b\u76ee\u306e\u54c1\u7269\u306e\u91cd\u3055\u3092\u5408\u8a08\u3057\u305f\u3082\u306e\u3092\u66f8\u304d\u307e\u3059\n\u30ca\u30c3\u30d7\u30b5\u30c3\u30af\u306e\u9650\u754c\u3092\u8d85\u3048\u305f\u3082\u306e\u306f\u30e1\u30e2\u306b\u306f\u66f8\u304d\u307e\u305b\u3093\n\u3053\u3046\u3059\u308b\u3053\u3068\u3067\u52b9\u7387\u3088\u304f\u91cd\u3055\u306e\u7d44\u307f\u5408\u308f\u305b\u3092\u7f85\u5217\u3059\u308b\u3053\u3068\u304c\u51fa\u6765\u307e\u3059\n\u3055\u3089\u306b\u3001\u3053\u306e\u30e1\u30e2\u306b\u306f\u540c\u3058\u91cd\u3055\u306e\u6642\u306f1\u3064\u3060\u3051\u6b8b\u3059\u3088\u3046\u306b\u3057\u307e\u3059\n\u3053\u3046\u3059\u308b\u3053\u3068\u3067\u3001\u969b\u9650\u306a\u304f\u30e1\u30e2\u304c\u5fc5\u8981\u3068\u3044\u3046\u3053\u3068\u304c\u907f\u3051\u3089\u308c\u307e\u3059\n\u4f8b\u3068\u3057\u3066\u300115kg\u5165\u308b\u30ca\u30c3\u30d7\u30b5\u30c3\u30af\u306b1g\u5358\u4f4d\u306e\u54c1\u7269\u3092\u5165\u308c\u308b\u3053\u3068\u3092\u8003\u3048\u307e\u3059\n\u30ca\u30c3\u30d7\u30b5\u30c3\u30af\u306b\u5165\u308b\u91cd\u3055\u306f0\uff5e15000g\u306e15001\u901a\u308a\u306e\u5024\u3057\u304b\u3042\u308a\u307e\u305b\u3093\n\u3067\u3059\u304b\u3089\u300115001\u500b\u5206\u306e\u30c7\u30fc\u30bf\u3092\u4fdd\u5b58\u3067\u304d\u308b\u30e1\u30e2\u30ea\u304c\u3042\u308c\u3070\u5145\u5206\u3067\u3059\n\u305d\u3093\u306a\u611f\u3058\u3067C++\u3067\u7d44\u3093\u3060\u30d7\u30ed\u30b0\u30e9\u30e0\u304c\u4ee5\u4e0b\u306b\u306a\u308a\u307e\u3059\n\nknapsack.cpp\n#include<map>\n#include<vector>\n#include<algorithm>\n#include<iostream>\n\nstd::vector<int> knapsack(const std::vector<int> &item, int limit){\n    typedef std::map<int, int> MemorizeMap;\n    MemorizeMap data;\n    int index = 0;\n    for (auto m : item){\n        std::vector<int> add;\n        for (auto d : data){\n            int weight = d.first + m;\n            if (weight <= limit) add.push_back(weight);\n        }\n        for (auto v : add) data.insert(MemorizeMap::value_type(v, index));\n        data.insert(MemorizeMap::value_type(m, index));\n        index++;\n        if (!data.empty() && data.cbegin()->first == limit) break;\n    }\n\n    auto it = data.lower_bound(limit);\n\n    std::vector<int> ret;\n    for (;;){\n        if (it == data.end()) break;\n        ret.push_back(item[it->second]);\n        int rest = it->first - item[it->second];\n        if (rest == 0) break;\n        it = data.find(rest);\n    }\n\n    return ret;\n}\n\nint main()\n{\n    std::vector<int> data;\n\n    int total = 0;\n\n    for (int i = 1; i <= 12; i++){\n        int cube = i * i * i;\n        data.push_back(cube);\n        total += cube;\n    }\n\n    auto result = knapsack(data, total / 2);\n    for (auto r : result){\n        std::cout << r << std::endl;\n    }\n\n    return 0;\n}\n\n/*Output\n1331\n1000\n343\n216\n125\n27\n*/\n\n\n\u30b5\u30f3\u30d7\u30eb\u3068\u3057\u3066\u30011\u8fba\u304c1cm\uff5e12cm\u306e1cm\u523b\u307f\u306e\u7acb\u65b9\u4f53\u304c12\u500b\u3042\u3063\u3066\u3001\n\u3053\u306e\u91cd\u3055(1\u8fba\u306e3\u4e57)\u304c\u4e01\u5ea6\u4e8c\u7b49\u5206\u306b\u8fd1\u3044\u5206\u3051\u65b9\u3092\u63a2\u3057\u3060\u3059\u30d1\u30bf\u30fc\u30f3\u3092\u51fa\u3057\u3066\u3044\u307e\u3059\n\u300c\u91cd\u3055\u304c1,3,5,6,8 \u3068\u3044\u30465\u3064\u306e\u54c1\u7269\u3092\u3044\u304f\u3064\u304b\u9078\u3093\u3067\u3001\u6700\u308210\u306b\u8fd1\u3065\u3051\u308b\u306b\u306f\u3069\u3046\u7d44\u307f\u5408\u308f\u305b\u308c\u3070\u3044\u3044\u304b\u300d\n\u3053\u3046\u3044\u3046\u554f\u984c\u306e\u3053\u3068\u3092\u30ca\u30c3\u30d7\u30b5\u30c3\u30af\u554f\u984c\u3068\u3044\u3044\u307e\u3059\u3002\n\u4eca\u56de\u306f1,3,6\u3068\u8a70\u3081\u308c\u3070\u3001\u4e01\u5ea610\u306b\u306a\u308a\u307e\u3059\u304c\u3001\u3069\u306e\u3088\u3046\u306b\u7d44\u307f\u308f\u305b\u3066\u3082\u3074\u3063\u305f\u308a\u306b\u306a\u308b\u3053\u3068\u306f\u306a\u3044\u554f\u984c\u3082\u3042\u308a\u307e\u3059\n[\u30ca\u30c3\u30d7\u30b5\u30c3\u30af\u554f\u984c](https://ja.wikipedia.org/wiki/%E3%83%8A%E3%83%83%E3%83%97%E3%82%B5%E3%83%83%E3%82%AF%E5%95%8F%E9%A1%8C)\n\n\u4e00\u6b21\u5143\u306e\u30bf\u30a4\u30eb\u30d1\u30ba\u30eb\u3068\u3044\u3046\u611f\u3058\u3067\u7c21\u5358\u305d\u3046\u306b\u898b\u3048\u307e\u3059\u304c\u3001\u5b8c\u5168\u306b\u6c42\u3081\u308b\u306b\u306f\u7dcf\u5f53\u308a\u3057\u304b\u306a\u3044\u3001\u7d50\u69cb\u5384\u4ecb\u306a\u554f\u984c\u3067\u3059\n\u54c1\u7269\u306e\u5019\u88dc\u304c100\u500b\u3042\u308b\u5834\u5408\u30012^100\u901a\u308a\u306e\u9078\u3073\u65b9\u304c\u3042\u308b\u306e\u3067\u3068\u3066\u3082\u307e\u3068\u3082\u306b\u306f\u8a08\u7b97\u3067\u304d\u307e\u305b\u3093\n\n\u305d\u3053\u3067\u3001\u679d\u5208\u308a\u30dd\u30a4\u30f3\u30c8\u3092\u63a2\u3057\u3066\u3044\u304d\u307e\u3057\u3087\u3046\n\u591a\u304f\u306e\u5834\u5408\u306f\u3001100\u500b\u306e\u54c1\u7269\u304c\u3042\u3063\u3066\u3082\u3001\u305b\u3044\u305c\u3044\u5165\u308b\u306e\u306f10\u500b\u524d\u5f8c\u3067\u3057\u3087\u3046\n\u3067\u3059\u306e\u3067\u3001\u5168\u3066\u3092\u30c1\u30a7\u30c3\u30af\u3059\u308b\u5fc5\u8981\u304c\u306a\u3044\u3053\u3068\u304c\u308f\u304b\u308a\u307e\u3059\n\n\u5165\u308b\u30d1\u30bf\u30fc\u30f3\u3092\u52b9\u7387\u3088\u304f\u63a2\u3059\u305f\u3081\u306b\u3001\u4ee5\u4e0b\u306e\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u3067\u63a2\u7d22\u3057\u3066\u3044\u304d\u307e\u3059\n\u307e\u305a\u3001\u30e1\u30e2\u3092\u7528\u610f\u3057\u3066\u30011\u500b\u76ee\u306e\u54c1\u7269\u306e\u91cd\u3055\u3092\u66f8\u304d\u307e\u3059\n2\u500b\u76ee\u306f\u30012\u500b\u76ee\u306e\u54c1\u7269\u306e\u91cd\u3055\u3068\u3001\u3053\u308c\u307e\u3067\u30e1\u30e2\u306b\u66f8\u3044\u3066\u3044\u305f\u5024\u30682\u500b\u76ee\u306e\u54c1\u7269\u306e\u91cd\u3055\u3092\u5408\u8a08\u3057\u305f\u3082\u306e\u3092\u66f8\u304d\u307e\u3059\n\u30ca\u30c3\u30d7\u30b5\u30c3\u30af\u306e\u9650\u754c\u3092\u8d85\u3048\u305f\u3082\u306e\u306f\u30e1\u30e2\u306b\u306f\u66f8\u304d\u307e\u305b\u3093\n\u3053\u3046\u3059\u308b\u3053\u3068\u3067\u52b9\u7387\u3088\u304f\u91cd\u3055\u306e\u7d44\u307f\u5408\u308f\u305b\u3092\u7f85\u5217\u3059\u308b\u3053\u3068\u304c\u51fa\u6765\u307e\u3059\n\n\u3055\u3089\u306b\u3001\u3053\u306e\u30e1\u30e2\u306b\u306f\u540c\u3058\u91cd\u3055\u306e\u6642\u306f1\u3064\u3060\u3051\u6b8b\u3059\u3088\u3046\u306b\u3057\u307e\u3059\n\u3053\u3046\u3059\u308b\u3053\u3068\u3067\u3001\u969b\u9650\u306a\u304f\u30e1\u30e2\u304c\u5fc5\u8981\u3068\u3044\u3046\u3053\u3068\u304c\u907f\u3051\u3089\u308c\u307e\u3059\n\n\u4f8b\u3068\u3057\u3066\u300115kg\u5165\u308b\u30ca\u30c3\u30d7\u30b5\u30c3\u30af\u306b1g\u5358\u4f4d\u306e\u54c1\u7269\u3092\u5165\u308c\u308b\u3053\u3068\u3092\u8003\u3048\u307e\u3059\n\u30ca\u30c3\u30d7\u30b5\u30c3\u30af\u306b\u5165\u308b\u91cd\u3055\u306f0\uff5e15000g\u306e15001\u901a\u308a\u306e\u5024\u3057\u304b\u3042\u308a\u307e\u305b\u3093\n\u3067\u3059\u304b\u3089\u300115001\u500b\u5206\u306e\u30c7\u30fc\u30bf\u3092\u4fdd\u5b58\u3067\u304d\u308b\u30e1\u30e2\u30ea\u304c\u3042\u308c\u3070\u5145\u5206\u3067\u3059\n\n\u305d\u3093\u306a\u611f\u3058\u3067C++\u3067\u7d44\u3093\u3060\u30d7\u30ed\u30b0\u30e9\u30e0\u304c\u4ee5\u4e0b\u306b\u306a\u308a\u307e\u3059\n\n```cpp:knapsack.cpp\n#include<map>\n#include<vector>\n#include<algorithm>\n#include<iostream>\n\nstd::vector<int> knapsack(const std::vector<int> &item, int limit){\n\ttypedef std::map<int, int> MemorizeMap;\n\tMemorizeMap data;\n\tint index = 0;\n\tfor (auto m : item){\n\t\tstd::vector<int> add;\n\t\tfor (auto d : data){\n\t\t\tint weight = d.first + m;\n\t\t\tif (weight <= limit) add.push_back(weight);\n\t\t}\n\t\tfor (auto v : add) data.insert(MemorizeMap::value_type(v, index));\n\t\tdata.insert(MemorizeMap::value_type(m, index));\n\t\tindex++;\n\t\tif (!data.empty() && data.cbegin()->first == limit) break;\n\t}\n\n\tauto it = data.lower_bound(limit);\n\n\tstd::vector<int> ret;\n\tfor (;;){\n\t\tif (it == data.end()) break;\n\t\tret.push_back(item[it->second]);\n\t\tint rest = it->first - item[it->second];\n\t\tif (rest == 0) break;\n\t\tit = data.find(rest);\n\t}\n\n\treturn ret;\n}\n\nint main()\n{\n\tstd::vector<int> data;\n\n\tint total = 0;\n\n\tfor (int i = 1; i <= 12; i++){\n\t\tint cube = i * i * i;\n\t\tdata.push_back(cube);\n\t\ttotal += cube;\n\t}\n\n\tauto result = knapsack(data, total / 2);\n\tfor (auto r : result){\n\t\tstd::cout << r << std::endl;\n\t}\n\n\treturn 0;\n}\n\n/*Output\n1331\n1000\n343\n216\n125\n27\n*/\n```\n\n\u30b5\u30f3\u30d7\u30eb\u3068\u3057\u3066\u30011\u8fba\u304c1cm\uff5e12cm\u306e1cm\u523b\u307f\u306e\u7acb\u65b9\u4f53\u304c12\u500b\u3042\u3063\u3066\u3001\n\u3053\u306e\u91cd\u3055(1\u8fba\u306e3\u4e57)\u304c\u4e01\u5ea6\u4e8c\u7b49\u5206\u306b\u8fd1\u3044\u5206\u3051\u65b9\u3092\u63a2\u3057\u3060\u3059\u30d1\u30bf\u30fc\u30f3\u3092\u51fa\u3057\u3066\u3044\u307e\u3059\n\n", "tags": ["C++", "\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0"]}