{"context": " More than 1 year has passed since last update.Go\u8a00\u8a9e\u306eslice\u306f\u3001\u64ec\u4f3c\u7684\u306b\u66f8\u304f\u3068\ntype slice struct {\n    head int,\n    tail int,\n    data []interface{}\n}\n\n\u306e\u3088\u3046\u306b\u306a\u3063\u3066\u3044\u3066\u3001\u5148\u982d\u3068\u6700\u5f8c\u3078\u306e\u30dd\u30a4\u30f3\u30bf\u3068\u914d\u5217\u3078\u306e\u30dd\u30a4\u30f3\u30bf\u3092\u6301\u3063\u3066\u3044\u3066\u3001hoge[1:5]\u306e\u3088\u3046\u306bslice\u6f14\u7b97\u3092\u3059\u308b\u3068head\u3068tail\u3060\u3051\u66f8\u304d\u63db\u3048\u3066\u3001\u30c7\u30fc\u30bf\u306f\u305d\u306e\u307e\u307e\u3002\n\u307e\u305f\u3001append\u95a2\u6570\u306fdata\u306e\u30ad\u30e3\u30d1\u30b7\u30c6\u30a3\u3092\u8d85\u3048\u305f\u5834\u5408\u306brealloc\u306e\u3088\u3046\u306a\u3053\u3068\u3092\u3057\u3066\u30c7\u30fc\u30bf\u5bb9\u91cf\u3092\u62e1\u5f35\u3059\u308b\u3002\npackage main\n\nimport (\n    \"fmt\"\n)\n\nvar P = fmt.Println\n\nfunc main() {\n    a := []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}\n    b := a[0:5]\n    a[0] = 100\n    c := append(b, 200) //a\u306e\uff16\u3064\u76ee\u306e\u30c7\u30fc\u30bf\u3092\u4e0a\u66f8\u304d\n    P(\"a\", a) //a [100 2 3 4 5 200 7 8 9 10]\n    P(\"b\", b) //b [100 2 3 4 5]\n    P(\"c\", c) //c [100 2 3 4 5 200]\n\n}\n\n\u306a\u306e\u3067\u3001map\u51e6\u7406\uff08\u540c\u6570\u306e\u30ea\u30b9\u30c8\u306e\u5199\u50cf\uff09\u3067\u3042\u308c\u3070\u3001\n\u5143\u3068\u306a\u308b\u30ea\u30b9\u30c8\u30b5\u30a4\u30ba\u306e\u5bb9\u91cf\u3092\u5148\u306b\u78ba\u4fdd\u3057\u3066\u304a\u304f\u65b9\u304c\u3044\u3044\u3057\u3001\nfilter\u51e6\u7406\u3067\u3042\u3063\u3066\u3082\u3001\u671f\u5f85\u3059\u308b\u6570\u304c\u5727\u5012\u7684\u306b\u5c11\u306a\u3044\u5834\u5408\u3067\u306a\u3044\u9650\u308a\u3001\u5148\u306bcap\u3060\u3051\u3067\u3082\u78ba\u4fdd\u3057\u3066\u304a\u304f\u65b9\u304c\u3088\u3055\u305d\u3046\u3060\u3002\nflat_map\u306e\u3088\u3046\u306b\u8981\u7d20\u306e\u6570\u304c\u5897\u3048\u308b\u5834\u5408\u306f\u3001\u671f\u5f85\u5024\u7a0b\u5ea6\u306b\u306f\u5bb9\u91cf\u3092\u78ba\u4fdd\u3057\u3066\u304a\u304f\u306e\u304c\u826f\u3055\u305d\u3046\u3060\u3002\nfunc WithCap(N int) {\n    slice := make([]string, 0, N)\n    for i := 0; i < N; i++ {\n        slice = append(slice, \"hello\")\n    }\n    fmt.Fprintln(os.Stderr, \"with-cap\", N, len(slice))\n}\n\nfunc WithoutCap(N int) {\n    slice := make([]string, 0)\n    for i := 0; i < N; i++ {\n        slice = append(slice, \"hello\")\n    }\n    fmt.Fprintln(os.Stderr, \"without-cap\", N, len(slice))\n}\n\nfunc NoAppend(N int) {\n    slice := make([]string, N)\n    for i := 0; i < N; i++ {\n        slice[i] = \"hello\"\n    }\n    fmt.Fprintln(os.Stderr, \"no-append\", N, len(slice))\n}\n\n\u3053\u306e\u3088\u3046\u306a\u95a2\u6570\u3092\u4f5c\u3063\u3066\u3001\u30d9\u30f3\u30c1\u30de\u30fc\u30af\u3092\u3068\u308b\u3068\nBenchmarkWithCap    100000000           18.4 ns/op\nBenchmarkWithoutCap 50000000            57.4 ns/op\nBenchmarkNoAppend   100000000           10.3 ns/op\n}\n\n\u3053\u306e\u3088\u3046\u306b\u306a\u308b\u3002\n\u5bb9\u91cf\u306f\uff12\u500d\uff12\u500d\u3067\u78ba\u4fdd\u3057\u3066\u3044\u308b\u3088\u3046\u306a\u306e\u3067\u3001\nlog2(N)\u7a0b\u5ea6\u306e\u56de\u6570realloc\u306e\u3088\u3046\u306a\u3082\u306e\u304c\u8d70\u308b\u53ef\u80fd\u6027\u304c\u3042\u308b\u3002\n\nsrc/pkg/runtime/slice.c\nstatic void\ngrowslice1(SliceType *t, Slice x, intgo newcap, Slice *ret)\n{\n    intgo m;\n\n    m = x.cap;\n\n    // Using newcap directly for m+m < newcap handles\n    // both the case where m == 0 and also the case where\n    // m+m/4 wraps around, in which case the loop\n    // below might never terminate.\n    if(m+m < newcap)\n        m = newcap;\n    else {\n        do {\n            if(x.len < 1024)\n                m += m;\n            else\n                m += m/4;\n        } while(m < newcap);\n    }\n\u3000\u3000// alloc\u3057\u3066\n    makeslice1(t, x.len, m, ret);\n\u3000\u3000// \u30b3\u30d4\u30fc\n    runtime\u00b7memmove(ret->array, x.array, ret->len * t->elem->size);\n}\n\n\nslice\u306e\u62e1\u5f35\u306f1024\u307e\u3067\u306f\uff12\u500d\uff12\u500d\u3002\n\u305d\u3053\u304b\u3089\u5148\u306f\u3001cap\u306e1/4\u305a\u3064\u5897\u3048\u308b\u3063\u307d\u3044\u3002\n\u306a\u306e\u3067\u3001\u3053\u306e\u30d9\u30f3\u30c1\u30de\u30fc\u30af\u306e\u5834\u5408\u3001index\u30a2\u30af\u30bb\u30b9\u306e\uff16\u500d\u3001cap\u8a2d\u5b9a\u3042\u308a\u306e\uff13\u500d\u3068\u3044\u3046\u6642\u9593\u304c\u30ad\u30e3\u30d1\u30b7\u30c6\u30a3\u8a2d\u5b9a\u306a\u3057\u306e\u5834\u5408\u306f\u304b\u304b\u3063\u3066\u3044\u308b\u3002\n\u5bb9\u91cf\u306e\u81ea\u52d5\u62e1\u5f35\u304c\u3042\u3063\u305f\u5834\u5408\u3001\n\u5834\u5408\u306b\u3088\u3063\u3066\u306f\u8981\u7d20\u30b3\u30d4\u30fc\u304c\u8d70\u308b\u3002\n\u306e\u3067\u3001\u3082\u3068\u3068\u306f\u9055\u3046\u7d50\u679c\u306b\u306a\u308b\u3002\n\ncopy.go\nfunc main() {\n    a := make([]int, 0)\n    b := append(a, 10, 20, 30)\n    b[2] = 3\n    //\u3053\u3053\u3067\u30ad\u30e3\u30d1\u30b7\u30c6\u30a3\u30aa\u30fc\u30d0\u30fc\n    //\u30b3\u30d4\u30fc\u3055\u308c\u3066c\u304c\u3067\u304d\u308b\u3002\n    c := append(b, 40, 50, 60)\n\u3000\u3000 //\u30b3\u30d4\u30fc\u3055\u308c\u3066\u3044\u308b\u306e\u3067\u3001c\u306f\u66f8\u304d\u5909\u308f\u308b\u304cb\u306f\u66f8\u304d\u5909\u308f\u3089\u306a\u3044\n    c[2] = 1\n    pslice(a)\n    pslice(b)\n    pslice(c)\n}\n\nfunc pslice(s []int) {\n    fmt.Printf(\"%T len:%d cap:%d %s\\n\", s, len(s), cap(s), s)\n}\n\n\n\nGo\u8a00\u8a9e\u306eslice\u306f\u3001\u64ec\u4f3c\u7684\u306b\u66f8\u304f\u3068\n\n```\ntype slice struct {\n\thead int,\n\ttail int,\n    data []interface{}\n}\n```\n\u306e\u3088\u3046\u306b\u306a\u3063\u3066\u3044\u3066\u3001\u5148\u982d\u3068\u6700\u5f8c\u3078\u306e\u30dd\u30a4\u30f3\u30bf\u3068\u914d\u5217\u3078\u306e\u30dd\u30a4\u30f3\u30bf\u3092\u6301\u3063\u3066\u3044\u3066\u3001```hoge[1:5]```\u306e\u3088\u3046\u306bslice\u6f14\u7b97\u3092\u3059\u308b\u3068head\u3068tail\u3060\u3051\u66f8\u304d\u63db\u3048\u3066\u3001\u30c7\u30fc\u30bf\u306f\u305d\u306e\u307e\u307e\u3002\n\n\u307e\u305f\u3001```append```\u95a2\u6570\u306fdata\u306e\u30ad\u30e3\u30d1\u30b7\u30c6\u30a3\u3092\u8d85\u3048\u305f\u5834\u5408\u306brealloc\u306e\u3088\u3046\u306a\u3053\u3068\u3092\u3057\u3066\u30c7\u30fc\u30bf\u5bb9\u91cf\u3092\u62e1\u5f35\u3059\u308b\u3002\n\n```\npackage main\n\nimport (\n    \"fmt\"\n)\n\nvar P = fmt.Println\n\nfunc main() {\n    a := []int{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}\n    b := a[0:5]\n    a[0] = 100\n    c := append(b, 200) //a\u306e\uff16\u3064\u76ee\u306e\u30c7\u30fc\u30bf\u3092\u4e0a\u66f8\u304d\n    P(\"a\", a) //a [100 2 3 4 5 200 7 8 9 10]\n    P(\"b\", b) //b [100 2 3 4 5]\n    P(\"c\", c) //c [100 2 3 4 5 200]\n\n}\n```\n\n\u306a\u306e\u3067\u3001map\u51e6\u7406\uff08\u540c\u6570\u306e\u30ea\u30b9\u30c8\u306e\u5199\u50cf\uff09\u3067\u3042\u308c\u3070\u3001\n\u5143\u3068\u306a\u308b\u30ea\u30b9\u30c8\u30b5\u30a4\u30ba\u306e\u5bb9\u91cf\u3092\u5148\u306b\u78ba\u4fdd\u3057\u3066\u304a\u304f\u65b9\u304c\u3044\u3044\u3057\u3001\nfilter\u51e6\u7406\u3067\u3042\u3063\u3066\u3082\u3001\u671f\u5f85\u3059\u308b\u6570\u304c\u5727\u5012\u7684\u306b\u5c11\u306a\u3044\u5834\u5408\u3067\u306a\u3044\u9650\u308a\u3001\u5148\u306bcap\u3060\u3051\u3067\u3082\u78ba\u4fdd\u3057\u3066\u304a\u304f\u65b9\u304c\u3088\u3055\u305d\u3046\u3060\u3002\n\nflat_map\u306e\u3088\u3046\u306b\u8981\u7d20\u306e\u6570\u304c\u5897\u3048\u308b\u5834\u5408\u306f\u3001\u671f\u5f85\u5024\u7a0b\u5ea6\u306b\u306f\u5bb9\u91cf\u3092\u78ba\u4fdd\u3057\u3066\u304a\u304f\u306e\u304c\u826f\u3055\u305d\u3046\u3060\u3002\n\n```\nfunc WithCap(N int) {\n    slice := make([]string, 0, N)\n    for i := 0; i < N; i++ {\n        slice = append(slice, \"hello\")\n    }\n    fmt.Fprintln(os.Stderr, \"with-cap\", N, len(slice))\n}\n\nfunc WithoutCap(N int) {\n    slice := make([]string, 0)\n    for i := 0; i < N; i++ {\n        slice = append(slice, \"hello\")\n    }\n    fmt.Fprintln(os.Stderr, \"without-cap\", N, len(slice))\n}\n\nfunc NoAppend(N int) {\n    slice := make([]string, N)\n    for i := 0; i < N; i++ {\n        slice[i] = \"hello\"\n    }\n    fmt.Fprintln(os.Stderr, \"no-append\", N, len(slice))\n}\n```\n\u3053\u306e\u3088\u3046\u306a\u95a2\u6570\u3092\u4f5c\u3063\u3066\u3001\u30d9\u30f3\u30c1\u30de\u30fc\u30af\u3092\u3068\u308b\u3068\n\n```\nBenchmarkWithCap\t100000000\t        18.4 ns/op\nBenchmarkWithoutCap\t50000000\t        57.4 ns/op\nBenchmarkNoAppend\t100000000\t        10.3 ns/op\n}\n```\n\u3053\u306e\u3088\u3046\u306b\u306a\u308b\u3002\n\u5bb9\u91cf\u306f\uff12\u500d\uff12\u500d\u3067\u78ba\u4fdd\u3057\u3066\u3044\u308b\u3088\u3046\u306a\u306e\u3067\u3001\nlog2(N)\u7a0b\u5ea6\u306e\u56de\u6570realloc\u306e\u3088\u3046\u306a\u3082\u306e\u304c\u8d70\u308b\u53ef\u80fd\u6027\u304c\u3042\u308b\u3002\n\n```src/pkg/runtime/slice.c\nstatic void\ngrowslice1(SliceType *t, Slice x, intgo newcap, Slice *ret)\n{\n\tintgo m;\n\n\tm = x.cap;\n\t\n\t// Using newcap directly for m+m < newcap handles\n\t// both the case where m == 0 and also the case where\n\t// m+m/4 wraps around, in which case the loop\n\t// below might never terminate.\n\tif(m+m < newcap)\n\t\tm = newcap;\n\telse {\n\t\tdo {\n\t\t\tif(x.len < 1024)\n\t\t\t\tm += m;\n\t\t\telse\n\t\t\t\tm += m/4;\n\t\t} while(m < newcap);\n\t}\n\u3000\u3000// alloc\u3057\u3066\n\tmakeslice1(t, x.len, m, ret);\n\u3000\u3000// \u30b3\u30d4\u30fc\n\truntime\u00b7memmove(ret->array, x.array, ret->len * t->elem->size);\n}\n```\nslice\u306e\u62e1\u5f35\u306f1024\u307e\u3067\u306f\uff12\u500d\uff12\u500d\u3002\n\u305d\u3053\u304b\u3089\u5148\u306f\u3001cap\u306e1/4\u305a\u3064\u5897\u3048\u308b\u3063\u307d\u3044\u3002\n\n\u306a\u306e\u3067\u3001\u3053\u306e\u30d9\u30f3\u30c1\u30de\u30fc\u30af\u306e\u5834\u5408\u3001index\u30a2\u30af\u30bb\u30b9\u306e\uff16\u500d\u3001cap\u8a2d\u5b9a\u3042\u308a\u306e\uff13\u500d\u3068\u3044\u3046\u6642\u9593\u304c\u30ad\u30e3\u30d1\u30b7\u30c6\u30a3\u8a2d\u5b9a\u306a\u3057\u306e\u5834\u5408\u306f\u304b\u304b\u3063\u3066\u3044\u308b\u3002\n\n\u5bb9\u91cf\u306e\u81ea\u52d5\u62e1\u5f35\u304c\u3042\u3063\u305f\u5834\u5408\u3001\n\u5834\u5408\u306b\u3088\u3063\u3066\u306f\u8981\u7d20\u30b3\u30d4\u30fc\u304c\u8d70\u308b\u3002\n\n\u306e\u3067\u3001\u3082\u3068\u3068\u306f\u9055\u3046\u7d50\u679c\u306b\u306a\u308b\u3002\n\n```copy.go\nfunc main() {\n    a := make([]int, 0)\n    b := append(a, 10, 20, 30)\n    b[2] = 3\n    //\u3053\u3053\u3067\u30ad\u30e3\u30d1\u30b7\u30c6\u30a3\u30aa\u30fc\u30d0\u30fc\n    //\u30b3\u30d4\u30fc\u3055\u308c\u3066c\u304c\u3067\u304d\u308b\u3002\n    c := append(b, 40, 50, 60)\n\u3000\u3000 //\u30b3\u30d4\u30fc\u3055\u308c\u3066\u3044\u308b\u306e\u3067\u3001c\u306f\u66f8\u304d\u5909\u308f\u308b\u304cb\u306f\u66f8\u304d\u5909\u308f\u3089\u306a\u3044\n    c[2] = 1\n    pslice(a)\n    pslice(b)\n    pslice(c)\n}\n\nfunc pslice(s []int) {\n    fmt.Printf(\"%T len:%d cap:%d %s\\n\", s, len(s), cap(s), s)\n}\n```\n\n\n", "tags": ["golang", "Go\u8a00\u8a9e", "Go"]}