{"context": " More than 1 year has passed since last update.\n\n\u306f\u3058\u3081\u306b\n\u672c\u8a18\u4e8b\u306fNabetani\u69d8\u304cCodeIQ\u306b\u51fa\u984c\u3057\u305f\u554f\u984c\u300c\u4e2d\u5b66\u5165\u8a66\u304b\u3089\uff1a\u6b63\u4e09\u89d2\u5f62\uff1f\u4e8c\u7b49\u8fba\uff1f\u300d\u306e\u56de\u7b54\u3068\u3001\u82e5\u5e72\u306e\u89e3\u8aac\u3092\u66f8\u3044\u305f\u3082\u306e\u3067\u3042\u308b\u3002\u56de\u7b54\u306e\u63d0\u51fa\u306f\u3057\u306a\u304b\u3063\u305f\u304c\u4e00\u5fdc\u89e3\u3044\u305f\u306e\u3067\u3001\u56de\u7b54\u3092\u516c\u958b\u3059\u308b\u3053\u3068\u306b\u3059\u308b\u3002\n\u51fa\u984c\u8005\u69d8\u672c\u4eba\u306e\u89e3\u8aac\u306f \u3053\u3061\u3089 \u304b\u3089\u95b2\u89a7\u3067\u304d\u308b\u3002\n\n\u554f\u984c\n\u554f\u984c\u306e\u8a73\u7d30\u306f \u3053\u3061\u3089 \u304b\u3089\u95b2\u89a7\u3067\u304d\u308b\u306e\u3067\u3001\u305d\u3061\u3089\u3092\u53c2\u7167\u306e\u3053\u3068\u3002\n\n\u79c1\u306e\u56de\u7b54\n\ntriangle.cpp\n// g++ -g -std=c++11 -Wall triangle.cpp\n#include <iostream>\n#include <string>\n#include <vector>\n#include <regex>\n#include <map>\n#include <algorithm>\n#include <numeric>\n#include <cmath>\n#include <cassert>\n#include <fstream>\n\nusing namespace std;\n\ntypedef map<string, double> map_t;\n\nstring join(const vector<string> &v, const string &separator)\n{\n    vector<string> res;\n    transform(v.begin(), v.end(), back_inserter(res),\n            [&](const string &s) { return res.size() + 1 == v.size() ? s : s + separator; }); \n    return accumulate(res.begin(), res.end(), string(\"\"));\n}\n\nvector<string> split(const string &src, const string &separator)\n{\n    vector<string> v;\n    const regex reg = separator.empty() ? regex(\"(.{1})\") : regex(separator);\n    const int frag = separator.empty() ? 1 : -1; \n    copy(sregex_token_iterator(src.begin(), src.end(), reg, frag), sregex_token_iterator(), back_inserter(v));\n    return v;\n}\n\nvector<string> get_keys(const map_t &m) \n{\n    vector<string> keys;\n    transform(m.begin(), m.end(), back_inserter(keys), [](const map_t::value_type &p) { return p.first; }); \n    return keys;\n}\n\nvector<double> get_values(const map_t &m) \n{\n    vector<double> values;\n    transform(m.begin(), m.end(), back_inserter(values), [](const map_t::value_type &p) { return p.second; }); \n    return values;\n}\n\nstring get_not_found_key(const vector<string> &v)\n{\n    const vector<string> a_to_c = { \"A\", \"B\", \"C\" };\n    const auto it = find_if(\n            a_to_c.begin(), a_to_c.end(),\n            [&](const string &s) { return find(v.begin(), v.end(), s) == v.end(); });\n    assert(it != a_to_c.end());\n    return *it;\n}\n\nstring get_not_found_key(const string &s)\n{\n    const vector<string> v = split(s, \"\");\n    return get_not_found_key(v);\n}\n\nstring get_not_found_key(const map_t &m)\n{\n    const vector<string> v = get_keys(m);\n    return get_not_found_key(v);\n}\n\nmap_t scan(const regex &reg, const vector<string> &v)\n{\n    map_t m;\n    for(const auto &e : v) {\n        smatch sm;\n        if(regex_match(e, sm, reg)) {\n            // key\u304c2\u6587\u5b57\u4ee5\u4e0a(\u8fba)\u306e\u5834\u5408\u306f1\u6587\u5b57\u306b\u7f6e\u304d\u63db\u3048\u308b\n            // ex) AB/BA -> C, BC/CB -> A, AC/CA -> B\n            const string key = string(sm[1]).size() == 1 ? sm[1] : get_not_found_key(sm[1]);\n            m.insert( make_pair(key, atoi(string(sm[2]).c_str())) );\n        }\n    }\n    return m;\n}\n\nint count_same_elements(const vector<double> &v, double delta)\n{\n    int res = 0;\n    for(const auto &e1 : v) {\n        res = max<int>(res, count_if(v.begin(), v.end(), [&](double e2) { return abs(e1 - e2) < delta; }));\n    }\n    return res;\n}\n\nstring analyze_triangle_type(const map_t &m)\n{\n    const vector<double> v = get_values(m);\n    if(v.empty()) {\n        return \"\u3046\";\n    }\n\n    const int same_elements = count_same_elements(v, 0.1);\n    switch (same_elements) {\n        case 2:\n            return \"\u3044\";\n        case 3:\n            return \"\u3042\";\n        default:\n            return \"\u3046\";\n    }\n}\n\ndouble deg_to_rad(double deg)\n{\n    const double pi = 3.14159265358979323846;\n    return deg * pi / 180.0;\n}\n\ndouble solve_2d_eq(const map_t & sides, const map_t & angles)\n{\n    const string angle = begin(angles)->first;\n    if(sides.count(angle) == 0) {\n        const double x = begin(sides)->second;\n        const double y = sides.rbegin()->second;\n        const double z = x * x + y * y - 2 * x * y * cos(deg_to_rad(angles.at(angle)));\n        return sqrt(z);\n    }\n    const string s = begin(sides)->first;\n    const double x = s == angle ? sides.rbegin()->second : sides.begin()->second;\n    const double y = s == angle ? sides.begin()->second : sides.rbegin()->second;\n    const double a = 1;\n    const double b = -2 * x * cos( deg_to_rad(angles.at(angle)) );\n    const double c = x * x - y * y;\n    return (-b + sqrt( b * b - 4 * a * c )) / (2 * a);\n}\n\nstring solve_problem(const string &src)\n{\n    const auto v = split(src, \",\");\n\n    const auto angles = [&]() {\n        const regex reg(\"\u89d2([A-C]{1})=([0-9]+)\u5ea6\");\n        auto angles = scan(reg, v);\n        if(angles.size() == 2) {\n            const vector<double> values = get_values(angles);\n            const int acc = accumulate(begin(values), end(values), 0);\n            const string key = get_not_found_key(angles);\n            angles.insert(make_pair(key, 180 - acc));\n        }\n        return angles;\n    }();\n\n    // \u89d2\u5ea6\u304c\u5168\u3066\u308f\u304b\u3063\u3066\u3044\u308b\u5834\u5408\u306f\u4e09\u89d2\u5f62\u306e\u7a2e\u985e\u3092\u5224\u5b9a\u53ef\u80fd\n    if(angles.size() == 3) {\n        return analyze_triangle_type(angles);\n    }\n\n    const auto sides = [&]() {\n        const regex reg(\"([A-C]{2})=([0-9]+)cm\");\n        auto sides = scan(reg, v);\n        if(sides.size() == 2 && !angles.empty()) {\n            const double value = solve_2d_eq(sides, angles);\n            const string key = get_not_found_key(sides);\n            sides.insert(make_pair(key, value));\n        }\n        return sides;\n    }();\n\n    return analyze_triangle_type(sides);\n}\n\nvoid print_result()\n{\n    ifstream ifs(\"data.utf8.txt\");\n    if(ifs.fail()) {\n        cout << \"Failed to read file.\" << endl;\n        return;\n    }\n\n    string in;\n    vector<string> wrong_no;\n    while(getline(ifs, in)) {\n        const vector<string> v = split(in, \"\\t\");\n        const string actual = solve_problem(v[1]);\n        const string expected = v[2];\n        if(actual != expected) {\n            wrong_no.push_back(v[0]);\n        }\n    }\n\n    cout << join(wrong_no, \",\") << endl;\n}\n\nint main()\n{\n    print_result();\n    return 0;\n}\n\n\n\u5927\u4f53200\u884c\u304f\u3089\u3044\u3002\n\n\u30b3\u30fc\u30c9\u306e\u89e3\u8aac\n\n\u5165\u529b\u5024\u306e\u30c1\u30a7\u30c3\u30af\n\u672c\u5f53\u306f\u3084\u308b\u3079\u304d\u306a\u306e\u304b\u3082\u3057\u308c\u306a\u3044\u304c\u3001\u672c\u554f\u3067\u306f\u300c\u4e0d\u6b63\u306a\u5165\u529b\u306b\u5bfe\u51e6\u3059\u308b\u5fc5\u8981\u306f\u3042\u308a\u307e\u305b\u3093\u3002\u300d\u3068\u306e\u3053\u3068\u306a\u306e\u3067\u3001\u5165\u529b\u5024\u306e\u30c1\u30a7\u30c3\u30af\u306f\u3057\u3066\u3044\u306a\u3044\u3002\n\n\u4e09\u89d2\u5f62\u306e\u7a2e\u985e\u306e\u5224\u5b9a\n\u4eca\u56de\u306e\u554f\u984c\u3067\u306f\u3001\u4e09\u89d2\u5f62ABC\u304c\n\n\n\n\u9078\u629e\u80a2\n\u8aac\u660e\n\n\n\n\n\u3042\n\u6b63\u4e09\u89d2\u5f62\u3067\u3042\u308b\u3002\n\n\n\u3044\n\u4e8c\u7b49\u8fba\u4e09\u89d2\u5f62\u3067\u3042\u308b\u3002\uff08\u305f\u3060\u3057\u3001\u6b63\u4e09\u89d2\u5f62\u3067\u3042\u308b\u3068\u306f\u3044\u3048\u306a\u3044\u3002\uff09\n\n\n\u3046\n\u4e8c\u7b49\u8fba\u4e09\u89d2\u5f62\u3067\u306f\u306a\u3044\u3002\u307e\u305f\u306f\u3001\u4e8c\u7b49\u8fba\u4e09\u89d2\u5f62\u304b\u3069\u3046\u304b\u308f\u304b\u3089\u306a\u3044\u3002\n\n\n\n\u306e\u4f55\u308c\u3067\u3042\u308b\u304b\u3092\u5224\u5b9a\u3059\u308b\u3002\n\u5224\u5b9a\u3059\u308b\u305f\u3081\u306b\u306f\u89d2\u5ea6\u3068\u8fba\u306e\u60c5\u5831\u304c\u5fc5\u8981\u306b\u306a\u308b\u306e\u3067\u3001\u305d\u308c\u3089\u3092\u53d6\u5f97\u3059\u308b\u3002\n\n\u89d2\u5ea6\u60c5\u5831\u306e\u53d6\u5f97\n\u89d2\u5ea6\u60c5\u5831\u306f solve_problem \u5185\u306e\u4e0b\u8a18\u90e8\u5206\u3067\u53d6\u5f97\u3057\u3066\u3044\u308b\u3002\n\u5165\u529b\u30c7\u30fc\u30bf\u304b\u3089\u89d2\u5ea6\u60c5\u5831(\u6b63\u898f\u8868\u73fe \u89d2([A-C]{1})=([0-9]+)\u5ea6 \u306b\u30de\u30c3\u30c1\u3059\u308b\u30c7\u30fc\u30bf)\u306e\u307f\u8aad\u307f\u53d6\u308a\u3001\u8aad\u307f\u53d6\u3063\u305f\u30c7\u30fc\u30bf\u304c2\u3064\u3042\u308b\u5834\u5408\u306f\u3001\u300c\u4e09\u89d2\u5f62\u306e\u5185\u89d2\u306e\u548c\u306f180\u5ea6\u300d\u3068\u3044\u3046\u6027\u8cea\u3092\u4f7f\u3063\u3066\u6b8b\u308a\u306e\u89d2\u5ea6\u3092\u7b97\u51fa\u3059\u308b\u3002\nconst auto angles = [&]() {\n    const regex reg(\"\u89d2([A-C]{1})=([0-9]+)\u5ea6\");\n    auto angles = scan(reg, v);\n    if(angles.size() == 2) {\n        const vector<double> values = get_values(angles);\n        const int acc = accumulate(begin(values), end(values), 0);\n        const string key = get_not_found_key(angles);\n        angles.insert(make_pair(key, 180 - acc));\n    }\n    return angles;\n}();\n\n\u4e0a\u8a18\u51e6\u7406\u30673\u3064\u306e\u89d2\u5ea6\u60c5\u5831\u3092\u53d6\u5f97\u3067\u304d\u305f\u5834\u5408\u3001\u4e09\u89d2\u5f62\u306e\u7a2e\u985e\u3092\u5224\u5b9a\u3059\u308b\u3053\u3068\u304c\u53ef\u80fd\u306a\u306e\u3067\u3001\u5224\u5b9a\u7d50\u679c\u3092\u8fd4\u3057\u3066\u51e6\u7406\u306f\u7d42\u4e86\u3068\u306a\u308b\u3002\n\n\u8fba\u60c5\u5831\u306e\u53d6\u5f97\n\u89d2\u5ea6\u60c5\u5831\u3060\u3051\u3067\u4e09\u89d2\u5f62\u306e\u7a2e\u985e\u3092\u5224\u5b9a\u3067\u304d\u306a\u304b\u3063\u305f\u5834\u5408\u3001\u5165\u529b\u30c7\u30fc\u30bf\u304b\u3089\u8fba\u306e\u60c5\u5831\u3092\u53d6\u5f97\u3059\u308b\u3002\u53d6\u5f97\u65b9\u6cd5\u306f\u89d2\u5ea6\u306e\u5834\u5408\u3068\u540c\u69d8\u3060\u304c\u3001\u5f8c\u306e\u8a08\u7b97\u306e\u90fd\u5408\u4e0a\u3001\u8fba\u306e\u540d\u524d\u3092\u4e0b\u8a18\u306e\u3088\u3046\u306b\u7f6e\u304d\u63db\u3048\u3066\u3044\u308b(scan \u95a2\u6570\u3092\u53c2\u7167)\u3002\n\nBC\u307e\u305f\u306fCB \u2192 A\nAC\u307e\u305f\u306fCA \u2192 B\nAB\u307e\u305f\u306fBA \u2192 C\n\n\u8fba\u60c5\u5831\u304c2\u3064\u4ee5\u4e0a\u53d6\u5f97\u3067\u304d\u3001\u304b\u3064\u89d2\u5ea6\u60c5\u5831\u304c1\u3064\u4ee5\u4e0a\u53d6\u5f97\u3067\u304d\u305f\u5834\u5408\u306f\u4f59\u5f26\u5b9a\u7406\u306b\u3088\u308a\u6b8b\u308a\u306e\u8fba\u60c5\u5831\u3092\u53d6\u5f97\u53ef\u80fd\u3067\u3042\u308b\u306e\u3067\u3001\u4f59\u5f26\u5b9a\u7406\u3092\u4f7f\u3063\u3066\u6b8b\u308a\u306e\u8fba\u60c5\u5831\u3092\u53d6\u5f97\u3059\u308b\u3002\n\n\u4f59\u5f26\u5b9a\u7406\n\u96e3\u3057\u304f\u306f\u306a\u3044\u304c\u3001(\u500b\u4eba\u7684\u306b)\u4eca\u56de\u306e\u554f\u984c\u306e\u4e2d\u3067\u4e00\u756a\u9762\u5012\u3060\u3063\u305f\u90e8\u5206\u3002\u4e0b\u8a182\u3064\u306e\u5834\u5408\u3067\u4f59\u5f26\u5b9a\u7406\u306e\u5f0f\u3092\u5909\u5f62\u3059\u308b\u5fc5\u8981\u304c\u751f\u3058\u308b\u306e\u304c\u9762\u5012\u3060\u3063\u305f\u3002\n\n\u6c42\u3081\u305f\u3044\u8fba\u306e\u5bfe\u89d2\u304c\u308f\u304b\u3063\u3066\u3044\u308b\u5834\u5408\n\u6c42\u3081\u305f\u3044\u8fba\u306e\u5bfe\u89d2\u304c\u308f\u304b\u3063\u3066\u3044\u306a\u3044\u5834\u5408\n\n\u4f8b\u3048\u3070\n\n\"AC=20cm,\u89d2C=60\u5ea6,BC=12cm\"\n\n\u306e\u3088\u3046\u306a\u5165\u529b\u30c7\u30fc\u30bf\u306e\u5834\u5408\u3001\u6c42\u3081\u305f\u3044\u8fbaAB\u306e\u5bfe\u89d2C\u304c\u65e2\u77e5\u306e\u305f\u3081\u3001\u5f0f\u306e\u5909\u66f4\u306f\u4e0d\u8981\u3002\nC = \\sqrt{ A^2 + B^2 - 2 \\times A \\times B \\times cos(C) }\nC=\u221aA2+B2\u22122\u00d7A\u00d7B\u00d7cos(C)C=A2+B2\u22122\u00d7A\u00d7B\u00d7cos(C)\u2212\u2212\u2212\u2212\u2212\u2212\u2212\u2212\u2212\u2212\u2212\u2212\u2212\u2212\u2212\u2212\u2212\u2212\u2212\u2212\u2212\u2212\u2212\u2212\u221a{C = \\sqrt{ A^2 + B^2 - 2 \\times A \\times B \\times cos(C) }\n}\n\u4e00\u65b9\u3001\n\n\"AC=20cm,\u89d2C=60\u5ea6,BA=12cm\"\n\n\u306e\u3088\u3046\u306a\u5165\u529b\u30c7\u30fc\u30bf\u306e\u5834\u5408\u3001\u6c42\u3081\u305f\u3044\u8fbaBC\u306e\u5bfe\u89d2A\u304c\u4e0d\u660e\u306a\u305f\u3081\u3001\u5f0f\u3092\u4e0b\u8a18\u306e\u3088\u3046\u306b\u5909\u5f62\u3059\u308b\u5fc5\u8981\u304c\u751f\u3058\u308b\u3002\n\\begin{equation}\n\\begin{split}\nC^2 &= A^2 + B^2 - 2 \\times A \\times B \\times cos(C) \\\\\n\\Leftrightarrow 0 &= A^2 + (- 2 \\times B \\times cos(C)) \\times A  + (B^2 - C^2)\n\\end{split}\n\\end{equation}\nC2=A2+B2\u22122\u00d7A\u00d7B\u00d7cos(C)\u21d40=A2+(\u22122\u00d7B\u00d7cos(C))\u00d7A+(B2\u2212C2)C2\u21d40=A2+B2\u22122\u00d7A\u00d7B\u00d7cos(C)=A2+(\u22122\u00d7B\u00d7cos(C))\u00d7A+(B2\u2212C2){\\begin{equation}\n\\begin{split}\nC^2 &= A^2 + B^2 - 2 \\times A \\times B \\times cos(C) \\\\\n\\Leftrightarrow 0 &= A^2 + (- 2 \\times B \\times cos(C)) \\times A  + (B^2 - C^2)\n\\end{split}\n\\end{equation}\n}\n\u305d\u3057\u3066\u6c42\u3081\u305f\u3044\u8fbaA\u306f2\u6b21\u65b9\u7a0b\u5f0f\u306e\u89e3\u306e\u516c\u5f0f\u3092\u4f7f\u3063\u3066\u5f97\u308b\u3053\u3068\u304c\u3067\u304d\u308b\u3002\nA = \\frac{(-b + \\sqrt{ b^2 - 4 \\times a \\times c })}{2a}\nA=(\u2212b+\u221ab2\u22124\u00d7a\u00d7c)2aA=(\u2212b+b2\u22124\u00d7a\u00d7c\u2212\u2212\u2212\u2212\u2212\u2212\u2212\u2212\u2212\u2212\u2212\u221a)2a{A = \\frac{(-b + \\sqrt{ b^2 - 4 \\times a \\times c })}{2a}\n}\n\u305f\u3060\u3057\u3001a = 1, b = - 2 \\times B \\times cos(C), c = B^2 - C^2\n\u305f\u3060\u3057\u3001a=1,b=\u22122\u00d7B\u00d7cos(C),c=B2\u2212C2{\u305f\u3060\u3057\u3001a = 1, b = - 2 \\times B \\times cos(C), c = B^2 - C^2\n}\n\u4e0a\u8a18\u51e6\u7406\u306e\u5b9f\u88c5\u304c solve_2d_eq \u3067\u3001\u672c\u95a2\u6570\u306e if \u6587\u5185\u306e\u51e6\u7406\u304c1\u306e\u5834\u5408\u306b\u76f8\u5f53\u3059\u308b\u3002\n\n\u6700\u5f8c\u306b\n\u51fa\u984c\u8005\u69d8\u306e\u89e3\u8aac\u3092\u898b\u308b\u3068\u300c\u89d2\u306e\u540d\u524d\u3084\u8fba\u306e\u540d\u524d\u3092\u4e00\u5207\u7121\u8996\u3057\u3066\u3088\u3044\u300d\u3088\u3046\u306a\u306e\u3067\u3001\u4f59\u5f26\u5b9a\u7406\u3092\u4f7f\u3046\u3088\u3046\u306a\u9762\u5012\u306a\u3053\u3068\u306f\u3057\u306a\u304f\u3066\u826f\u304b\u3063\u305f\u307f\u305f\u3044\u3002\u307e\u305f\u3001\u8fba\u306e\u9577\u3055\u3092\u4f59\u5f26\u5b9a\u7406\u3092\u4f7f\u3063\u3066\u6c42\u3081\u308b\u305f\u3081\u6d6e\u52d5\u5c0f\u6570\u70b9\u3092\u4f7f\u3046\u3053\u3068\u306b\u306a\u308b\u3002\u305d\u306e\u7d50\u679c\u3001\u8fba\u306e\u9577\u3055\u3092\u6bd4\u8f03\u3059\u308b\u969b\u306b\u3042\u308b\u7a0b\u5ea6\u306e\u8aa4\u5dee(\u79c1\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u3067\u306f0.1)\u3092\u8a31\u5bb9\u3057\u3066\u306e\u6bd4\u8f03\u3068\u306a\u308a\u3001\u53b3\u5bc6\u306a\u6bd4\u8f03\u306f\u3067\u304d\u306a\u3044\u306e\u3082\u3088\u308d\u3057\u304f\u306a\u3044\u3068\u601d\u3046\u3002\n# \u306f\u3058\u3081\u306b\n\u672c\u8a18\u4e8b\u306fNabetani\u69d8\u304cCodeIQ\u306b\u51fa\u984c\u3057\u305f\u554f\u984c\u300c\u4e2d\u5b66\u5165\u8a66\u304b\u3089\uff1a\u6b63\u4e09\u89d2\u5f62\uff1f\u4e8c\u7b49\u8fba\uff1f\u300d\u306e\u56de\u7b54\u3068\u3001\u82e5\u5e72\u306e\u89e3\u8aac\u3092\u66f8\u3044\u305f\u3082\u306e\u3067\u3042\u308b\u3002\u56de\u7b54\u306e\u63d0\u51fa\u306f\u3057\u306a\u304b\u3063\u305f\u304c\u4e00\u5fdc\u89e3\u3044\u305f\u306e\u3067\u3001\u56de\u7b54\u3092\u516c\u958b\u3059\u308b\u3053\u3068\u306b\u3059\u308b\u3002\n\u51fa\u984c\u8005\u69d8\u672c\u4eba\u306e\u89e3\u8aac\u306f [\u3053\u3061\u3089](http://nabetani.hatenablog.com/entry/codeiq_clatri_q1097) \u304b\u3089\u95b2\u89a7\u3067\u304d\u308b\u3002\n\n# \u554f\u984c\n\u554f\u984c\u306e\u8a73\u7d30\u306f [\u3053\u3061\u3089](http://nabetani.hatenablog.com/entry/codeiq_clatri_q1097) \u304b\u3089\u95b2\u89a7\u3067\u304d\u308b\u306e\u3067\u3001\u305d\u3061\u3089\u3092\u53c2\u7167\u306e\u3053\u3068\u3002\n\n# \u79c1\u306e\u56de\u7b54\n\n```triangle.cpp\n// g++ -g -std=c++11 -Wall triangle.cpp\n#include <iostream>\n#include <string>\n#include <vector>\n#include <regex>\n#include <map>\n#include <algorithm>\n#include <numeric>\n#include <cmath>\n#include <cassert>\n#include <fstream>\n\nusing namespace std;\n\ntypedef map<string, double> map_t;\n\nstring join(const vector<string> &v, const string &separator)\n{\n    vector<string> res;\n    transform(v.begin(), v.end(), back_inserter(res),\n            [&](const string &s) { return res.size() + 1 == v.size() ? s : s + separator; }); \n    return accumulate(res.begin(), res.end(), string(\"\"));\n}\n\nvector<string> split(const string &src, const string &separator)\n{\n    vector<string> v;\n    const regex reg = separator.empty() ? regex(\"(.{1})\") : regex(separator);\n    const int frag = separator.empty() ? 1 : -1; \n    copy(sregex_token_iterator(src.begin(), src.end(), reg, frag), sregex_token_iterator(), back_inserter(v));\n    return v;\n}\n\nvector<string> get_keys(const map_t &m) \n{\n    vector<string> keys;\n    transform(m.begin(), m.end(), back_inserter(keys), [](const map_t::value_type &p) { return p.first; }); \n    return keys;\n}\n\nvector<double> get_values(const map_t &m) \n{\n    vector<double> values;\n    transform(m.begin(), m.end(), back_inserter(values), [](const map_t::value_type &p) { return p.second; }); \n    return values;\n}\n\nstring get_not_found_key(const vector<string> &v)\n{\n    const vector<string> a_to_c = { \"A\", \"B\", \"C\" };\n    const auto it = find_if(\n            a_to_c.begin(), a_to_c.end(),\n            [&](const string &s) { return find(v.begin(), v.end(), s) == v.end(); });\n    assert(it != a_to_c.end());\n    return *it;\n}\n\nstring get_not_found_key(const string &s)\n{\n    const vector<string> v = split(s, \"\");\n    return get_not_found_key(v);\n}\n\nstring get_not_found_key(const map_t &m)\n{\n    const vector<string> v = get_keys(m);\n    return get_not_found_key(v);\n}\n\nmap_t scan(const regex &reg, const vector<string> &v)\n{\n    map_t m;\n    for(const auto &e : v) {\n        smatch sm;\n        if(regex_match(e, sm, reg)) {\n            // key\u304c2\u6587\u5b57\u4ee5\u4e0a(\u8fba)\u306e\u5834\u5408\u306f1\u6587\u5b57\u306b\u7f6e\u304d\u63db\u3048\u308b\n            // ex) AB/BA -> C, BC/CB -> A, AC/CA -> B\n            const string key = string(sm[1]).size() == 1 ? sm[1] : get_not_found_key(sm[1]);\n            m.insert( make_pair(key, atoi(string(sm[2]).c_str())) );\n        }\n    }\n    return m;\n}\n\nint count_same_elements(const vector<double> &v, double delta)\n{\n    int res = 0;\n    for(const auto &e1 : v) {\n        res = max<int>(res, count_if(v.begin(), v.end(), [&](double e2) { return abs(e1 - e2) < delta; }));\n    }\n    return res;\n}\n\nstring analyze_triangle_type(const map_t &m)\n{\n    const vector<double> v = get_values(m);\n    if(v.empty()) {\n        return \"\u3046\";\n    }\n\n    const int same_elements = count_same_elements(v, 0.1);\n    switch (same_elements) {\n        case 2:\n            return \"\u3044\";\n        case 3:\n            return \"\u3042\";\n        default:\n            return \"\u3046\";\n    }\n}\n\ndouble deg_to_rad(double deg)\n{\n    const double pi = 3.14159265358979323846;\n    return deg * pi / 180.0;\n}\n\ndouble solve_2d_eq(const map_t & sides, const map_t & angles)\n{\n    const string angle = begin(angles)->first;\n    if(sides.count(angle) == 0) {\n        const double x = begin(sides)->second;\n        const double y = sides.rbegin()->second;\n        const double z = x * x + y * y - 2 * x * y * cos(deg_to_rad(angles.at(angle)));\n        return sqrt(z);\n    }\n    const string s = begin(sides)->first;\n    const double x = s == angle ? sides.rbegin()->second : sides.begin()->second;\n    const double y = s == angle ? sides.begin()->second : sides.rbegin()->second;\n    const double a = 1;\n    const double b = -2 * x * cos( deg_to_rad(angles.at(angle)) );\n    const double c = x * x - y * y;\n    return (-b + sqrt( b * b - 4 * a * c )) / (2 * a);\n}\n\nstring solve_problem(const string &src)\n{\n    const auto v = split(src, \",\");\n\n    const auto angles = [&]() {\n        const regex reg(\"\u89d2([A-C]{1})=([0-9]+)\u5ea6\");\n        auto angles = scan(reg, v);\n        if(angles.size() == 2) {\n            const vector<double> values = get_values(angles);\n            const int acc = accumulate(begin(values), end(values), 0);\n            const string key = get_not_found_key(angles);\n            angles.insert(make_pair(key, 180 - acc));\n        }\n        return angles;\n    }();\n\n    // \u89d2\u5ea6\u304c\u5168\u3066\u308f\u304b\u3063\u3066\u3044\u308b\u5834\u5408\u306f\u4e09\u89d2\u5f62\u306e\u7a2e\u985e\u3092\u5224\u5b9a\u53ef\u80fd\n    if(angles.size() == 3) {\n        return analyze_triangle_type(angles);\n    }\n\n    const auto sides = [&]() {\n        const regex reg(\"([A-C]{2})=([0-9]+)cm\");\n        auto sides = scan(reg, v);\n        if(sides.size() == 2 && !angles.empty()) {\n            const double value = solve_2d_eq(sides, angles);\n            const string key = get_not_found_key(sides);\n            sides.insert(make_pair(key, value));\n        }\n        return sides;\n    }();\n\n    return analyze_triangle_type(sides);\n}\n\nvoid print_result()\n{\n    ifstream ifs(\"data.utf8.txt\");\n    if(ifs.fail()) {\n        cout << \"Failed to read file.\" << endl;\n        return;\n    }\n\n    string in;\n    vector<string> wrong_no;\n    while(getline(ifs, in)) {\n        const vector<string> v = split(in, \"\\t\");\n        const string actual = solve_problem(v[1]);\n        const string expected = v[2];\n        if(actual != expected) {\n            wrong_no.push_back(v[0]);\n        }\n    }\n\n    cout << join(wrong_no, \",\") << endl;\n}\n\nint main()\n{\n    print_result();\n    return 0;\n}\n```\n\n\u5927\u4f53200\u884c\u304f\u3089\u3044\u3002\n\n# \u30b3\u30fc\u30c9\u306e\u89e3\u8aac\n\n## \u5165\u529b\u5024\u306e\u30c1\u30a7\u30c3\u30af\n\n\u672c\u5f53\u306f\u3084\u308b\u3079\u304d\u306a\u306e\u304b\u3082\u3057\u308c\u306a\u3044\u304c\u3001\u672c\u554f\u3067\u306f\u300c\u4e0d\u6b63\u306a\u5165\u529b\u306b\u5bfe\u51e6\u3059\u308b\u5fc5\u8981\u306f\u3042\u308a\u307e\u305b\u3093\u3002\u300d\u3068\u306e\u3053\u3068\u306a\u306e\u3067\u3001\u5165\u529b\u5024\u306e\u30c1\u30a7\u30c3\u30af\u306f\u3057\u3066\u3044\u306a\u3044\u3002\n\n## \u4e09\u89d2\u5f62\u306e\u7a2e\u985e\u306e\u5224\u5b9a\n\u4eca\u56de\u306e\u554f\u984c\u3067\u306f\u3001\u4e09\u89d2\u5f62ABC\u304c\n\n| \u9078\u629e\u80a2 | \u8aac\u660e |\n|:-----------:|:------------:|\n| \u3042 | \u6b63\u4e09\u89d2\u5f62\u3067\u3042\u308b\u3002 |\n| \u3044 | \u4e8c\u7b49\u8fba\u4e09\u89d2\u5f62\u3067\u3042\u308b\u3002\uff08\u305f\u3060\u3057\u3001\u6b63\u4e09\u89d2\u5f62\u3067\u3042\u308b\u3068\u306f\u3044\u3048\u306a\u3044\u3002\uff09 |\n| \u3046 | \u4e8c\u7b49\u8fba\u4e09\u89d2\u5f62\u3067\u306f\u306a\u3044\u3002\u307e\u305f\u306f\u3001\u4e8c\u7b49\u8fba\u4e09\u89d2\u5f62\u304b\u3069\u3046\u304b\u308f\u304b\u3089\u306a\u3044\u3002 |\n\n\u306e\u4f55\u308c\u3067\u3042\u308b\u304b\u3092\u5224\u5b9a\u3059\u308b\u3002\n\n\u5224\u5b9a\u3059\u308b\u305f\u3081\u306b\u306f\u89d2\u5ea6\u3068\u8fba\u306e\u60c5\u5831\u304c\u5fc5\u8981\u306b\u306a\u308b\u306e\u3067\u3001\u305d\u308c\u3089\u3092\u53d6\u5f97\u3059\u308b\u3002\n\n## \u89d2\u5ea6\u60c5\u5831\u306e\u53d6\u5f97\n\u89d2\u5ea6\u60c5\u5831\u306f ```solve_problem ``` \u5185\u306e\u4e0b\u8a18\u90e8\u5206\u3067\u53d6\u5f97\u3057\u3066\u3044\u308b\u3002\n\u5165\u529b\u30c7\u30fc\u30bf\u304b\u3089\u89d2\u5ea6\u60c5\u5831(\u6b63\u898f\u8868\u73fe ```\u89d2([A-C]{1})=([0-9]+)\u5ea6``` \u306b\u30de\u30c3\u30c1\u3059\u308b\u30c7\u30fc\u30bf)\u306e\u307f\u8aad\u307f\u53d6\u308a\u3001\u8aad\u307f\u53d6\u3063\u305f\u30c7\u30fc\u30bf\u304c2\u3064\u3042\u308b\u5834\u5408\u306f\u3001\u300c\u4e09\u89d2\u5f62\u306e\u5185\u89d2\u306e\u548c\u306f180\u5ea6\u300d\u3068\u3044\u3046\u6027\u8cea\u3092\u4f7f\u3063\u3066\u6b8b\u308a\u306e\u89d2\u5ea6\u3092\u7b97\u51fa\u3059\u308b\u3002\n\n```cpp\nconst auto angles = [&]() {\n    const regex reg(\"\u89d2([A-C]{1})=([0-9]+)\u5ea6\");\n    auto angles = scan(reg, v);\n    if(angles.size() == 2) {\n        const vector<double> values = get_values(angles);\n        const int acc = accumulate(begin(values), end(values), 0);\n        const string key = get_not_found_key(angles);\n        angles.insert(make_pair(key, 180 - acc));\n    }\n    return angles;\n}();\n```\n\n\u4e0a\u8a18\u51e6\u7406\u30673\u3064\u306e\u89d2\u5ea6\u60c5\u5831\u3092\u53d6\u5f97\u3067\u304d\u305f\u5834\u5408\u3001\u4e09\u89d2\u5f62\u306e\u7a2e\u985e\u3092\u5224\u5b9a\u3059\u308b\u3053\u3068\u304c\u53ef\u80fd\u306a\u306e\u3067\u3001\u5224\u5b9a\u7d50\u679c\u3092\u8fd4\u3057\u3066\u51e6\u7406\u306f\u7d42\u4e86\u3068\u306a\u308b\u3002\n\n## \u8fba\u60c5\u5831\u306e\u53d6\u5f97\n\u89d2\u5ea6\u60c5\u5831\u3060\u3051\u3067\u4e09\u89d2\u5f62\u306e\u7a2e\u985e\u3092\u5224\u5b9a\u3067\u304d\u306a\u304b\u3063\u305f\u5834\u5408\u3001\u5165\u529b\u30c7\u30fc\u30bf\u304b\u3089\u8fba\u306e\u60c5\u5831\u3092\u53d6\u5f97\u3059\u308b\u3002\u53d6\u5f97\u65b9\u6cd5\u306f\u89d2\u5ea6\u306e\u5834\u5408\u3068\u540c\u69d8\u3060\u304c\u3001\u5f8c\u306e\u8a08\u7b97\u306e\u90fd\u5408\u4e0a\u3001\u8fba\u306e\u540d\u524d\u3092\u4e0b\u8a18\u306e\u3088\u3046\u306b\u7f6e\u304d\u63db\u3048\u3066\u3044\u308b(```scan``` \u95a2\u6570\u3092\u53c2\u7167)\u3002\n\n * BC\u307e\u305f\u306fCB \u2192 A\n * AC\u307e\u305f\u306fCA \u2192 B\n * AB\u307e\u305f\u306fBA \u2192 C\n\n\u8fba\u60c5\u5831\u304c2\u3064\u4ee5\u4e0a\u53d6\u5f97\u3067\u304d\u3001\u304b\u3064\u89d2\u5ea6\u60c5\u5831\u304c1\u3064\u4ee5\u4e0a\u53d6\u5f97\u3067\u304d\u305f\u5834\u5408\u306f\u4f59\u5f26\u5b9a\u7406\u306b\u3088\u308a\u6b8b\u308a\u306e\u8fba\u60c5\u5831\u3092\u53d6\u5f97\u53ef\u80fd\u3067\u3042\u308b\u306e\u3067\u3001\u4f59\u5f26\u5b9a\u7406\u3092\u4f7f\u3063\u3066\u6b8b\u308a\u306e\u8fba\u60c5\u5831\u3092\u53d6\u5f97\u3059\u308b\u3002\n\n## \u4f59\u5f26\u5b9a\u7406\n\u96e3\u3057\u304f\u306f\u306a\u3044\u304c\u3001(\u500b\u4eba\u7684\u306b)\u4eca\u56de\u306e\u554f\u984c\u306e\u4e2d\u3067\u4e00\u756a\u9762\u5012\u3060\u3063\u305f\u90e8\u5206\u3002\u4e0b\u8a182\u3064\u306e\u5834\u5408\u3067\u4f59\u5f26\u5b9a\u7406\u306e\u5f0f\u3092\u5909\u5f62\u3059\u308b\u5fc5\u8981\u304c\u751f\u3058\u308b\u306e\u304c\u9762\u5012\u3060\u3063\u305f\u3002\n\n 1. \u6c42\u3081\u305f\u3044\u8fba\u306e\u5bfe\u89d2\u304c\u308f\u304b\u3063\u3066\u3044\u308b\u5834\u5408\n 2. \u6c42\u3081\u305f\u3044\u8fba\u306e\u5bfe\u89d2\u304c\u308f\u304b\u3063\u3066\u3044\u306a\u3044\u5834\u5408\n\n\u4f8b\u3048\u3070\n\n * \"AC=20cm,\u89d2C=60\u5ea6,BC=12cm\"\n\n\u306e\u3088\u3046\u306a\u5165\u529b\u30c7\u30fc\u30bf\u306e\u5834\u5408\u3001\u6c42\u3081\u305f\u3044\u8fbaAB\u306e\u5bfe\u89d2C\u304c\u65e2\u77e5\u306e\u305f\u3081\u3001\u5f0f\u306e\u5909\u66f4\u306f\u4e0d\u8981\u3002\n\n```math\nC = \\sqrt{ A^2 + B^2 - 2 \\times A \\times B \\times cos(C) }\n```\n\n\u4e00\u65b9\u3001\n\n * \"AC=20cm,\u89d2C=60\u5ea6,BA=12cm\"\n\n\u306e\u3088\u3046\u306a\u5165\u529b\u30c7\u30fc\u30bf\u306e\u5834\u5408\u3001\u6c42\u3081\u305f\u3044\u8fbaBC\u306e\u5bfe\u89d2A\u304c\u4e0d\u660e\u306a\u305f\u3081\u3001\u5f0f\u3092\u4e0b\u8a18\u306e\u3088\u3046\u306b\u5909\u5f62\u3059\u308b\u5fc5\u8981\u304c\u751f\u3058\u308b\u3002\n\n```math\n\\begin{equation}\n\\begin{split}\nC^2 &= A^2 + B^2 - 2 \\times A \\times B \\times cos(C) \\\\\n\\Leftrightarrow 0 &= A^2 + (- 2 \\times B \\times cos(C)) \\times A  + (B^2 - C^2)\n\\end{split}\n\\end{equation}\n```\n\n\u305d\u3057\u3066\u6c42\u3081\u305f\u3044\u8fbaA\u306f2\u6b21\u65b9\u7a0b\u5f0f\u306e\u89e3\u306e\u516c\u5f0f\u3092\u4f7f\u3063\u3066\u5f97\u308b\u3053\u3068\u304c\u3067\u304d\u308b\u3002\n\n```math\nA = \\frac{(-b + \\sqrt{ b^2 - 4 \\times a \\times c })}{2a}\n```\n\n```math\n\u305f\u3060\u3057\u3001a = 1, b = - 2 \\times B \\times cos(C), c = B^2 - C^2\n```\n\n\u4e0a\u8a18\u51e6\u7406\u306e\u5b9f\u88c5\u304c ```solve_2d_eq``` \u3067\u3001\u672c\u95a2\u6570\u306e ```if``` \u6587\u5185\u306e\u51e6\u7406\u304c1\u306e\u5834\u5408\u306b\u76f8\u5f53\u3059\u308b\u3002\n\n# \u6700\u5f8c\u306b\n\n\u51fa\u984c\u8005\u69d8\u306e\u89e3\u8aac\u3092\u898b\u308b\u3068\u300c\u89d2\u306e\u540d\u524d\u3084\u8fba\u306e\u540d\u524d\u3092\u4e00\u5207\u7121\u8996\u3057\u3066\u3088\u3044\u300d\u3088\u3046\u306a\u306e\u3067\u3001\u4f59\u5f26\u5b9a\u7406\u3092\u4f7f\u3046\u3088\u3046\u306a\u9762\u5012\u306a\u3053\u3068\u306f\u3057\u306a\u304f\u3066\u826f\u304b\u3063\u305f\u307f\u305f\u3044\u3002\u307e\u305f\u3001\u8fba\u306e\u9577\u3055\u3092\u4f59\u5f26\u5b9a\u7406\u3092\u4f7f\u3063\u3066\u6c42\u3081\u308b\u305f\u3081\u6d6e\u52d5\u5c0f\u6570\u70b9\u3092\u4f7f\u3046\u3053\u3068\u306b\u306a\u308b\u3002\u305d\u306e\u7d50\u679c\u3001\u8fba\u306e\u9577\u3055\u3092\u6bd4\u8f03\u3059\u308b\u969b\u306b\u3042\u308b\u7a0b\u5ea6\u306e\u8aa4\u5dee(\u79c1\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u3067\u306f0.1)\u3092\u8a31\u5bb9\u3057\u3066\u306e\u6bd4\u8f03\u3068\u306a\u308a\u3001\u53b3\u5bc6\u306a\u6bd4\u8f03\u306f\u3067\u304d\u306a\u3044\u306e\u3082\u3088\u308d\u3057\u304f\u306a\u3044\u3068\u601d\u3046\u3002\n", "tags": ["C++11", "codeiq"]}