{"tags": ["Python", "\u3069\u3046\u66f8\u304f", "yhpg"], "context": " More than 1 year has passed since last update.\u554f\u984c\u306f\u3053\u3061\u3089\u3002 http://nabetani.sakura.ne.jp/hena/ord16boseg/\n\u6642\u9593\u304c\u306a\u304f\u3066\u3001\u6a2a\u65b9\u5411\u3068\u7e26\u65b9\u5411\u306e\u5197\u9577\u306a\u51e6\u7406\u3092\u307e\u3068\u3081\u308b\u3068\u3053\u307e\u3067\u3067\u304d\u307e\u305b\u3093\u3067\u3057\u305f\u3002\n\u5f8c\u307b\u3069\u6574\u7406\u3057\u3088\u3046\u3068\u601d\u3044\u307e\u3059\u3002\n\u6574\u7406\u5f8c: \u30d3\u30c3\u30c8\u30de\u30c3\u30d7\u6f14\u7b97\u3092\u4f7f\u3046\u3088\u3046\u306b\u3057\u305fsolve\u95a2\u6570\u3002\ndef solve(data):\n  h=[int(data[i:i+2],8) for i in range(0,len(data),2)]\n  v=[int(''.join(y),2) for y in zip(*[format(x,'06b') for x in h])]\n  c=[map(len,format(m[y]^m[y+1],'b').split('0')) for y in range(0,5) for m in(h,v)]\n  return ','.join(map(str,[sum(c,[]).count(i) for i in range(1,7)]))\n\n\u89e3\u8aac:\n#\u30d3\u30c3\u30c8\u30de\u30c3\u30d7\u4f5c\u6210: 8\u9032\u6570\u6587\u5b57\u5217\u30922\u6587\u5b57\u305a\u3064\u5207\u308a\u51fa\u3057\u3001\u6570\u5024\u914d\u5217\u306b\u3059\u308b\nh=[int(data[i:i+2],8) for i in range(0,len(data),2)]\n  for i in range(0,len(data),2) #2\u6587\u5b57\u305a\u3064\u5207\u308a\u51fa\u3059\u305f\u3081\u306e\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u756a\u53f7\u751f\u6210\n  data[i:i+2]                   #2\u6587\u5b57\u305a\u3064\u53d6\u308a\u51fa\u3059\n  int(... ,8)                   #8\u9032\u6570\u6587\u5b57\u5217\u3092\u6570\u5024\u5316\n  [...]                         #\u914d\u5217\u306b\u3059\u308b\n\n#\u7e26\u6a2a\u7f6e\u63db\u30d3\u30c3\u30c8\u30de\u30c3\u30d7\u4f5c\u6210: \u4e8c\u9032\u6570\u6587\u5b57\u5217\u914d\u5217\u306b\u3057\u3066\u7e26\u6a2a\u7f6e\u63db\u3057\u3066\u304b\u3089\u518d\u3073\u6570\u5024\u914d\u5217\u306b\nv=[int(''.join(y),2) for y in zip(*[format(x,'06b') for x in h])]\n  [format(x,'06b') for x in h] #\u6570\u5024\u914d\u5217\u30922\u9032\u65706\u6841\u6587\u5b57\u5217\u306e\u914d\u5217\u306b\u3057\n  zip(*[...])                  #\u914d\u5217\u8981\u7d20\u3092\u5f15\u6570\u5c55\u958b(*)\u3057\u3066zip\u3057\u30661\u6587\u5b57\u6bce\u306b\u7e26\u6a2a\u7f6e\u63db\n  for y in zip(...)            #\u914d\u5217\u8981\u7d20('0'\u304b'1'\u304c6\u500b\u306e\u914d\u5217)\u306b\u3064\u3044\u3066\n  ''.join(...)                 #1\u6587\u5b57\u6bce\u306b\u306a\u3063\u305f2\u9032\u6570\u6587\u5b57\u3092\u9023\u7d50\u3057\u30662\u9032\u6570\u6587\u5b57\u5217\u5316\n  int(... ,2)                  #2\u9032\u6570\u6587\u5b57\u5217\u3092\u6570\u5024\u5316\n  [...]                        #\u914d\u5217\u306b\u3059\u308b\n\n\n#\u5404\u884c\u9593\u306e\u30d3\u30c3\u30c8\u30de\u30c3\u30d7\u306eXOR\u3092\u3068\u308a\u30011\u306e\u30d3\u30c3\u30c8\u304c\u9023\u7d9a\u3059\u308b\u9577\u3055\u3092\u914d\u5217\u306b\u3059\u308b\nc=[map(len,format(m[y]^m[y+1],'b').split('0')) for y in range(0,5) for m in(h,v)]\n  for m in(h,v)          #\u6a2a\u65b9\u5411\u3068\u7e26\u65b9\u5411\u306e\u30d3\u30c3\u30c8\u30de\u30c3\u30d7\u306b\u5bfe\u3057\u3066\n  for y in range(0,5)    #y=0\uff5e4, 0-1,1-2,2-3,3-4,4-5\u884c\u9593\u306eXOR\u3092\u3068\u308b\u305f\u3081\u306b\n  m[y]^m[y+1]            #\u884c\u9593\u306eXOR\u3092\u3068\u3063\u3066\u5883\u754c\u7dda\u90e8\u5206\u306e\u30d3\u30c3\u30c8\u30921\u306b\n  format(... ,'b')       #\u30d3\u30c3\u30c8\u5217\u6570\u5024\u30922\u9032\u6570\u6587\u5b57\u5217\u306b\n  .split('0')            #'0'\u3067\u5206\u65ad\u3057\u3001'1'\u306e\u9023\u7d9a\u8981\u7d20\u3092\u4f5c\u308b\n  map(len, ...)          #'1'\u306e\u9577\u3055\u306e\u914d\u5217\u3092\u4f5c\u308b\n  [...]                  #\u914d\u5217\u306b\u3059\u308b(\u914d\u5217\u306e\u914d\u5217\u30012\u6b21\u5143\u914d\u5217\u306b\u306a\u308b)\n\n\n#\u9577\u3055\u306e\u914d\u5217\u304b\u3089\u3001\u9577\u3055\u3054\u3068\u306e\u51fa\u73fe\u6570\u3092\u6570\u3048\u3001','\u3067\u533a\u5207\u3063\u305f\u6587\u5b57\u5217\u3092\u8fd4\u3059\nreturn ','.join(map(str,[sum(c,[]).count(i) for i in range(1,7)]))\n  for i in range(1,7)    #1\uff5e6\u306e\u9577\u3055\u306b\u3064\u3044\u3066\n  sum(c,[])              #2\u6b21\u5143\u914d\u5217\u306ec\u3092\u30d5\u30e9\u30c3\u30c8\u5316\u3057\u30011\u6b21\u5143\u914d\u5217\u306b\u3057\u3066\u304b\u3089\n  .count(i)              #\u9577\u3055\u306e\u51fa\u73fe\u6570\u3092\u6570\u3048\n  [...]                  #\u914d\u5217\u306b\u3059\u308b\n  map(str, ...)          #1\uff5e6\u306e\u51fa\u73fe\u6570\u3092\u6587\u5b57\u5217\u306e\u914d\u5217\u306b\u3059\u308b\n  ','.join(...)          #\u51fa\u73fe\u6570\u6587\u5b57\u5217\u914d\u5217\u3092','\u3067\u63a5\u7d9a\u3057\u305f\u6587\u5b57\u5217\u306b\u3057\u3066\n  return ...             #\u8fd4\u3059\n\n\u6574\u7406\u524d: \u4f1a\u5834\u30671\u6642\u9593\u3067\u66f8\u3044\u305f\u30bd\u30fc\u30b9\n#!/usr/bin/env python\n#-*- coding:utf-8 -*-\n\ndef solve(data):\n    data += \"00\"\n    m = [format(int(data[i:i+2],8), \"06b\")+\"0\" for i in xrange(0,len(data),2)]\n    count = [0]*7\n    for x in xrange(0,5):\n        n = 0\n        last=(0,0)\n        for y in xrange(0,7):\n            z = (m[y][x], m[y][x+1])\n            if z != last:\n                count[n] += 1\n                n = 0\n            if z[0] != z[1]: n += 1\n            last = z\n    for y in xrange(0,5):\n        n = 0\n        last=(0,0)\n        for x in xrange(0,7):\n            z = (m[y][x], m[y+1][x])\n            if z != last:\n                count[n] += 1\n                n = 0\n            if z[0] != z[1]: n += 1\n            last = z\n    return ','.join(map(str,count[1:]))\n\ndef test(data, correct):\n    answer = solve(data)\n    print \"OK\" if answer==correct else \"NG\", answer, correct, data\n\nif __name__ == '__main__':\n    0, test( \"060276724276\", \"6,2,1,1,0,1\" );\n    1, test( \"770175454177\", \"2,3,0,3,1,0\" );    \n    2, test( \"743733377170\", \"9,3,1,0,0,0\" );    \n    3, test( \"724212121273\", \"5,2,1,1,1,1\" );    \n    4, test( \"100000000000\", \"3,0,0,0,0,0\" );    \n    5, test( \"000002000000\", \"4,0,0,0,0,0\" );    \n    6, test( \"003622223600\", \"0,4,0,4,0,0\" );    \n    7, test( \"520073737070\", \"8,3,1,1,0,0\" );    \n    8, test( \"770077007700\", \"0,0,0,0,0,5\" );    \n    9, test( \"555555555514\", \"2,0,0,0,2,2\" );    \n    10, test( \"764252427600\", \"4,0,4,0,2,0\" );    \n    11, test( \"774555554177\", \"3,3,1,3,0,0\" );    \n    12, test( \"674574754557\", \"11,5,0,1,0,0\" );    \n    13, test( \"000000000000\", \"0,0,0,0,0,0\" );    \n    14, test( \"777777777777\", \"0,0,0,0,0,0\" );    \n    15, test( \"774377777577\", \"6,0,2,0,0,0\" );    \n    16, test( \"070777777777\", \"0,1,1,0,0,0\" );    \n    17, test( \"373737373737\", \"0,0,0,0,0,1\" );    \n    18, test( \"603260327725\", \"30,0,0,0,0,0\" );    \n    19, test( \"466331144663\", \"30,0,0,0,0,0\" );    \n    20, test( \"000000000242\", \"3,2,0,0,0,0\" );    \n    21, test( \"567656043772\", \"18,2,1,0,0,0\" );    \n    22, test( \"200763012420\", \"15,4,1,0,0,0\" );    \n    23, test( \"400101140052\", \"14,3,0,0,0,0\" );    \n    24, test( \"764767476476\", \"13,2,0,1,0,0\" );    \n    25, test( \"001110140110\", \"12,2,1,0,0,0\" );    \n    26, test( \"765405076527\", \"16,3,0,1,0,0\" );    \n    27, test( \"377323370373\", \"8,4,2,0,0,0\" );    \n    28, test( \"250541131216\", \"11,5,2,0,0,0\" );    \n    29, test( \"744165741476\", \"12,3,2,0,0,0\" );    \n    30, test( \"042101000300\", \"10,3,0,0,0,0\" );    \n    31, test( \"002004554101\", \"11,3,1,0,0,0\" );    \n    32, test( \"371707762706\", \"15,1,1,0,0,0\" );    \n    33, test( \"130371310175\", \"7,3,1,2,0,0\" );    \n    34, test( \"212537003613\", \"13,2,1,1,1,0\" );    \n    35, test( \"157700063411\", \"15,3,0,0,0,1\" );    \n    36, test( \"011500036007\", \"6,7,1,0,0,0\" );    \n    37, test( \"743113313517\", \"17,2,1,0,0,0\" );    \n    38, test( \"174105270405\", \"13,3,1,1,0,0\" );    \n    39, test( \"427272200311\", \"13,3,2,0,0,0\" );    \n    40, test( \"725370332237\", \"12,5,1,1,0,0\" );    \n    41, test( \"005640420046\", \"12,1,3,0,0,0\" );    \n    42, test( \"700350001101\", \"14,3,1,0,0,0\" );    \n    43, test( \"577627744076\", \"16,1,1,1,0,0\" );    \n    44, test( \"620332232007\", \"10,4,2,1,0,0\" );    \n    45, test( \"260406401000\", \"15,1,1,0,0,0\" );    \n    46, test( \"737272723276\", \"5,0,0,0,3,0\" );    \n    47, test( \"000400040444\", \"7,0,2,0,0,0\" );    \n    48, test( \"370222002177\", \"13,2,2,0,0,0\" );    \n    49, test( \"372236024656\", \"9,3,2,0,1,0\" );    \n    50, test( \"276131137003\", \"11,6,2,0,0,0\" );    \n    51, test( \"742134007240\", \"13,4,2,0,0,0\" );    \n    52, test( \"777721775571\", \"13,1,2,0,0,0\" );    \n    53, test( \"700301232233\", \"11,2,3,0,0,0\" );\n\n\u554f\u984c\u306f\u3053\u3061\u3089\u3002 http://nabetani.sakura.ne.jp/hena/ord16boseg/\n\u6642\u9593\u304c\u306a\u304f\u3066\u3001\u6a2a\u65b9\u5411\u3068\u7e26\u65b9\u5411\u306e\u5197\u9577\u306a\u51e6\u7406\u3092\u307e\u3068\u3081\u308b\u3068\u3053\u307e\u3067\u3067\u304d\u307e\u305b\u3093\u3067\u3057\u305f\u3002\n\u5f8c\u307b\u3069\u6574\u7406\u3057\u3088\u3046\u3068\u601d\u3044\u307e\u3059\u3002\n\n\u6574\u7406\u5f8c: \u30d3\u30c3\u30c8\u30de\u30c3\u30d7\u6f14\u7b97\u3092\u4f7f\u3046\u3088\u3046\u306b\u3057\u305fsolve\u95a2\u6570\u3002\n\n```py\ndef solve(data):\n  h=[int(data[i:i+2],8) for i in range(0,len(data),2)]\n  v=[int(''.join(y),2) for y in zip(*[format(x,'06b') for x in h])]\n  c=[map(len,format(m[y]^m[y+1],'b').split('0')) for y in range(0,5) for m in(h,v)]\n  return ','.join(map(str,[sum(c,[]).count(i) for i in range(1,7)]))\n```\n\n\u89e3\u8aac:\n\n```py\n#\u30d3\u30c3\u30c8\u30de\u30c3\u30d7\u4f5c\u6210: 8\u9032\u6570\u6587\u5b57\u5217\u30922\u6587\u5b57\u305a\u3064\u5207\u308a\u51fa\u3057\u3001\u6570\u5024\u914d\u5217\u306b\u3059\u308b\nh=[int(data[i:i+2],8) for i in range(0,len(data),2)]\n  for i in range(0,len(data),2) #2\u6587\u5b57\u305a\u3064\u5207\u308a\u51fa\u3059\u305f\u3081\u306e\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u756a\u53f7\u751f\u6210\n  data[i:i+2]                   #2\u6587\u5b57\u305a\u3064\u53d6\u308a\u51fa\u3059\n  int(... ,8)                   #8\u9032\u6570\u6587\u5b57\u5217\u3092\u6570\u5024\u5316\n  [...]                         #\u914d\u5217\u306b\u3059\u308b\n\n#\u7e26\u6a2a\u7f6e\u63db\u30d3\u30c3\u30c8\u30de\u30c3\u30d7\u4f5c\u6210: \u4e8c\u9032\u6570\u6587\u5b57\u5217\u914d\u5217\u306b\u3057\u3066\u7e26\u6a2a\u7f6e\u63db\u3057\u3066\u304b\u3089\u518d\u3073\u6570\u5024\u914d\u5217\u306b\nv=[int(''.join(y),2) for y in zip(*[format(x,'06b') for x in h])]\n  [format(x,'06b') for x in h] #\u6570\u5024\u914d\u5217\u30922\u9032\u65706\u6841\u6587\u5b57\u5217\u306e\u914d\u5217\u306b\u3057\n  zip(*[...])                  #\u914d\u5217\u8981\u7d20\u3092\u5f15\u6570\u5c55\u958b(*)\u3057\u3066zip\u3057\u30661\u6587\u5b57\u6bce\u306b\u7e26\u6a2a\u7f6e\u63db\n  for y in zip(...)            #\u914d\u5217\u8981\u7d20('0'\u304b'1'\u304c6\u500b\u306e\u914d\u5217)\u306b\u3064\u3044\u3066\n  ''.join(...)                 #1\u6587\u5b57\u6bce\u306b\u306a\u3063\u305f2\u9032\u6570\u6587\u5b57\u3092\u9023\u7d50\u3057\u30662\u9032\u6570\u6587\u5b57\u5217\u5316\n  int(... ,2)                  #2\u9032\u6570\u6587\u5b57\u5217\u3092\u6570\u5024\u5316\n  [...]                        #\u914d\u5217\u306b\u3059\u308b\n\n\n#\u5404\u884c\u9593\u306e\u30d3\u30c3\u30c8\u30de\u30c3\u30d7\u306eXOR\u3092\u3068\u308a\u30011\u306e\u30d3\u30c3\u30c8\u304c\u9023\u7d9a\u3059\u308b\u9577\u3055\u3092\u914d\u5217\u306b\u3059\u308b\nc=[map(len,format(m[y]^m[y+1],'b').split('0')) for y in range(0,5) for m in(h,v)]\n  for m in(h,v)          #\u6a2a\u65b9\u5411\u3068\u7e26\u65b9\u5411\u306e\u30d3\u30c3\u30c8\u30de\u30c3\u30d7\u306b\u5bfe\u3057\u3066\n  for y in range(0,5)    #y=0\uff5e4, 0-1,1-2,2-3,3-4,4-5\u884c\u9593\u306eXOR\u3092\u3068\u308b\u305f\u3081\u306b\n  m[y]^m[y+1]            #\u884c\u9593\u306eXOR\u3092\u3068\u3063\u3066\u5883\u754c\u7dda\u90e8\u5206\u306e\u30d3\u30c3\u30c8\u30921\u306b\n  format(... ,'b')       #\u30d3\u30c3\u30c8\u5217\u6570\u5024\u30922\u9032\u6570\u6587\u5b57\u5217\u306b\n  .split('0')            #'0'\u3067\u5206\u65ad\u3057\u3001'1'\u306e\u9023\u7d9a\u8981\u7d20\u3092\u4f5c\u308b\n  map(len, ...)          #'1'\u306e\u9577\u3055\u306e\u914d\u5217\u3092\u4f5c\u308b\n  [...]                  #\u914d\u5217\u306b\u3059\u308b(\u914d\u5217\u306e\u914d\u5217\u30012\u6b21\u5143\u914d\u5217\u306b\u306a\u308b)\n\n\n#\u9577\u3055\u306e\u914d\u5217\u304b\u3089\u3001\u9577\u3055\u3054\u3068\u306e\u51fa\u73fe\u6570\u3092\u6570\u3048\u3001','\u3067\u533a\u5207\u3063\u305f\u6587\u5b57\u5217\u3092\u8fd4\u3059\nreturn ','.join(map(str,[sum(c,[]).count(i) for i in range(1,7)]))\n  for i in range(1,7)    #1\uff5e6\u306e\u9577\u3055\u306b\u3064\u3044\u3066\n  sum(c,[])              #2\u6b21\u5143\u914d\u5217\u306ec\u3092\u30d5\u30e9\u30c3\u30c8\u5316\u3057\u30011\u6b21\u5143\u914d\u5217\u306b\u3057\u3066\u304b\u3089\n  .count(i)              #\u9577\u3055\u306e\u51fa\u73fe\u6570\u3092\u6570\u3048\n  [...]                  #\u914d\u5217\u306b\u3059\u308b\n  map(str, ...)          #1\uff5e6\u306e\u51fa\u73fe\u6570\u3092\u6587\u5b57\u5217\u306e\u914d\u5217\u306b\u3059\u308b\n  ','.join(...)          #\u51fa\u73fe\u6570\u6587\u5b57\u5217\u914d\u5217\u3092','\u3067\u63a5\u7d9a\u3057\u305f\u6587\u5b57\u5217\u306b\u3057\u3066\n  return ...             #\u8fd4\u3059\n```\n\n\u6574\u7406\u524d: \u4f1a\u5834\u30671\u6642\u9593\u3067\u66f8\u3044\u305f\u30bd\u30fc\u30b9\n\n```py\n#!/usr/bin/env python\n#-*- coding:utf-8 -*-\n\ndef solve(data):\n    data += \"00\"\n    m = [format(int(data[i:i+2],8), \"06b\")+\"0\" for i in xrange(0,len(data),2)]\n    count = [0]*7\n    for x in xrange(0,5):\n        n = 0\n        last=(0,0)\n        for y in xrange(0,7):\n            z = (m[y][x], m[y][x+1])\n            if z != last:\n                count[n] += 1\n                n = 0\n            if z[0] != z[1]: n += 1\n            last = z\n    for y in xrange(0,5):\n        n = 0\n        last=(0,0)\n        for x in xrange(0,7):\n            z = (m[y][x], m[y+1][x])\n            if z != last:\n                count[n] += 1\n                n = 0\n            if z[0] != z[1]: n += 1\n            last = z\n    return ','.join(map(str,count[1:]))\n\ndef test(data, correct):\n    answer = solve(data)\n    print \"OK\" if answer==correct else \"NG\", answer, correct, data\n\nif __name__ == '__main__':\n    0, test( \"060276724276\", \"6,2,1,1,0,1\" );\n    1, test( \"770175454177\", \"2,3,0,3,1,0\" );    \n    2, test( \"743733377170\", \"9,3,1,0,0,0\" );    \n    3, test( \"724212121273\", \"5,2,1,1,1,1\" );    \n    4, test( \"100000000000\", \"3,0,0,0,0,0\" );    \n    5, test( \"000002000000\", \"4,0,0,0,0,0\" );    \n    6, test( \"003622223600\", \"0,4,0,4,0,0\" );    \n    7, test( \"520073737070\", \"8,3,1,1,0,0\" );    \n    8, test( \"770077007700\", \"0,0,0,0,0,5\" );    \n    9, test( \"555555555514\", \"2,0,0,0,2,2\" );    \n    10, test( \"764252427600\", \"4,0,4,0,2,0\" );    \n    11, test( \"774555554177\", \"3,3,1,3,0,0\" );    \n    12, test( \"674574754557\", \"11,5,0,1,0,0\" );    \n    13, test( \"000000000000\", \"0,0,0,0,0,0\" );    \n    14, test( \"777777777777\", \"0,0,0,0,0,0\" );    \n    15, test( \"774377777577\", \"6,0,2,0,0,0\" );    \n    16, test( \"070777777777\", \"0,1,1,0,0,0\" );    \n    17, test( \"373737373737\", \"0,0,0,0,0,1\" );    \n    18, test( \"603260327725\", \"30,0,0,0,0,0\" );    \n    19, test( \"466331144663\", \"30,0,0,0,0,0\" );    \n    20, test( \"000000000242\", \"3,2,0,0,0,0\" );    \n    21, test( \"567656043772\", \"18,2,1,0,0,0\" );    \n    22, test( \"200763012420\", \"15,4,1,0,0,0\" );    \n    23, test( \"400101140052\", \"14,3,0,0,0,0\" );    \n    24, test( \"764767476476\", \"13,2,0,1,0,0\" );    \n    25, test( \"001110140110\", \"12,2,1,0,0,0\" );    \n    26, test( \"765405076527\", \"16,3,0,1,0,0\" );    \n    27, test( \"377323370373\", \"8,4,2,0,0,0\" );    \n    28, test( \"250541131216\", \"11,5,2,0,0,0\" );    \n    29, test( \"744165741476\", \"12,3,2,0,0,0\" );    \n    30, test( \"042101000300\", \"10,3,0,0,0,0\" );    \n    31, test( \"002004554101\", \"11,3,1,0,0,0\" );    \n    32, test( \"371707762706\", \"15,1,1,0,0,0\" );    \n    33, test( \"130371310175\", \"7,3,1,2,0,0\" );    \n    34, test( \"212537003613\", \"13,2,1,1,1,0\" );    \n    35, test( \"157700063411\", \"15,3,0,0,0,1\" );    \n    36, test( \"011500036007\", \"6,7,1,0,0,0\" );    \n    37, test( \"743113313517\", \"17,2,1,0,0,0\" );    \n    38, test( \"174105270405\", \"13,3,1,1,0,0\" );    \n    39, test( \"427272200311\", \"13,3,2,0,0,0\" );    \n    40, test( \"725370332237\", \"12,5,1,1,0,0\" );    \n    41, test( \"005640420046\", \"12,1,3,0,0,0\" );    \n    42, test( \"700350001101\", \"14,3,1,0,0,0\" );    \n    43, test( \"577627744076\", \"16,1,1,1,0,0\" );    \n    44, test( \"620332232007\", \"10,4,2,1,0,0\" );    \n    45, test( \"260406401000\", \"15,1,1,0,0,0\" );    \n    46, test( \"737272723276\", \"5,0,0,0,3,0\" );    \n    47, test( \"000400040444\", \"7,0,2,0,0,0\" );    \n    48, test( \"370222002177\", \"13,2,2,0,0,0\" );    \n    49, test( \"372236024656\", \"9,3,2,0,1,0\" );    \n    50, test( \"276131137003\", \"11,6,2,0,0,0\" );    \n    51, test( \"742134007240\", \"13,4,2,0,0,0\" );    \n    52, test( \"777721775571\", \"13,1,2,0,0,0\" );    \n    53, test( \"700301232233\", \"11,2,3,0,0,0\" );\n```\n"}