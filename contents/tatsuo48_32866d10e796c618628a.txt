{"context": "\u6697\u53f7\u5316\u3057\u305fEBS\u30eb\u30fc\u30c8\u30dc\u30ea\u30e5\u30fc\u30e0\u3092\u6301\u3064\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u3001Lambda\u3092\u4f7f\u3063\u3066\u81ea\u52d5\u8d77\u52d5\u3055\u305b\u3088\u3046\u3068\u3057\u305f\u6642\u306b\u30cf\u30de\u3063\u305f\u7b87\u6240\u304c\u3042\u3063\u305f\u306e\u3067\u3042\u3063\u305f\u306e\u3067\u307e\u3068\u3081\u307e\u3057\u305f\u3002\n\nEBS\u30eb\u30fc\u30c8\u30dc\u30ea\u30e5\u30fc\u30e0\u306e\u6697\u53f7\u5316\n\u4ee5\u4e0b\u306e\u8a18\u4e8b\u306b\u3042\u308a\u307e\u3059\u3088\u3046\u306b\u73fe\u5728\u3001EBS\u3067\u306f\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u306e\u30eb\u30fc\u30c8\u30dc\u30ea\u30e5\u30fc\u30e0\u306e\u6697\u53f7\u5316\u304c\u30b5\u30dd\u30fc\u30c8\u3055\u308c\u3066\u3044\u307e\u3059\u3002\nhttp://aws.typepad.com/aws_japan/2015/12/new-encrypted-ebs-boot-volumes.html\n\u4eca\u56de\u306f\u3053\u306e\u30eb\u30fc\u30c8\u30dc\u30ea\u30e5\u30fc\u30e0\u6697\u53f7\u5316\u3092\u65bd\u3057\u305f\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u306e\u81ea\u52d5\u8d77\u52d5\u3092\u884c\u3046\u969b\u306b\u30cf\u30de\u3063\u305f\u70b9\u306b\u3064\u3044\u3066\u66f8\u304d\u307e\u3059\u3002\n\n\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u306e\u8d77\u52d5\u5931\u6557\n\u4eca\u56deAWS Lambda\u3092\u7528\u3044\u3066\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u306e\u8d77\u52d5\u81ea\u52d5\u5316\u3092\u56f3\u308d\u3046\u3068\u3057\u3066\u3044\u307e\u3057\u305f\u3002\n\u4f7f\u7528\u3057\u305f\u30b9\u30af\u30ea\u30d7\u30c8\u306fAMI\u30d0\u30c3\u30af\u30a2\u30c3\u30d7\u3092\u53d6\u308bLambda\u30d5\u30a1\u30f3\u30af\u30b7\u30e7\u30f3\uff08python\uff09\u3092\u5143\u306b\u4f5c\u6210\u3057\u305f\u3001\u4ee5\u4e0b\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u8d77\u52d5\u30d0\u30c3\u30c1\u3067\u3059\u3002\n\u30b9\u30c8\u30c3\u30d7\u3068\u5408\u308f\u305b\u3066GitHub\u306b\u3082\u7f6e\u3044\u3066\u3042\u308a\u307e\u3059\u3002\nhttps://github.com/tto0408/Hello-world/tree/master/LambdaFunctions\n\nstartinstance.py\n#!/usr/bin/python\n# -*- coding: utf-8 -*-\n\nimport json\n\nimport boto3\n\nimport pprint\n\nTAG_KEY_AUTO_START = 'auto-start'\n\n\nprint('Loading function')\n\npp = pprint.PrettyPrinter(indent=4)\n\n# \u95a2\u6570\u540d \uff1a lambda_handler\ndef lambda_handler(event, context):\n    print(\"Received event: \" + json.dumps(event, indent=2))\n\n    ec2_client   = boto3.client('ec2')\n\n    ret = execute_start_instance(ec2_client)\n    print 'Start instance success(%s).' % (ret)\n\n    return 0\n    raise Exception('Something went wrong')\n\n# \u95a2\u6570\u540d \uff1a execute_start_instance\n# \u623b\u308a\u5024 \uff1a \u5b9f\u884c\u7d50\u679c\n# \u5f15\u6570\u3000 \uff1a ec2_client\n#       \uff1a ec2_resource\n# \u6a5f\u80fd\u3000 \uff1a \u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u8d77\u52d5\u3059\u308b\u3002\ndef execute_start_instance(ec2_client):\n    response = ec2_client.describe_instances()\n\n    result = None\n    for ec2_group in response['Reservations']:\n        for instance_info in ec2_group['Instances']:\n            ret = is_target(instance_info)\n\n            if (ret == False):\n                continue\n            instance_id = instance_info.get('InstanceId')\n            response = ec2_client.start_instances(InstanceIds=[instance_id,])\n            print response\n            result = True\n    return result\n\n# \u95a2\u6570\u540d \uff1a is_target\n# \u623b\u308a\u5024 \uff1a \u8d77\u52d5\u8981\u5426\n# \u5f15\u6570\u3000 \uff1a instance_info <dict>\n# \u6a5f\u80fd\u3000 \uff1a \u8d77\u52d5\u8981\u5426\u3092\u5224\u5b9a\u3059\u308b\ndef is_target(instance_info):\n    val = get_tag_value(\n        instance_info,\n        TAG_KEY_AUTO_START\n    )\n\n    if val is None:\n        return False\n\n    return True\n\n# \u95a2\u6570\u540d \uff1a get_tag_value\n# \u623b\u308a\u5024 \uff1a \u30bf\u30b0\u5024\uff08\u5f53\u8a72\u30ad\u30fc\u306b\u5408\u81f4\u3059\u308b\u3082\u306e\u304c\u306a\u3051\u308c\u3070None\uff09\n# \u5f15\u6570\u3000 \uff1a instance_info <dict>\n#       \uff1a key <str>\n# \u6a5f\u80fd\u3000 \uff1a \u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u60c5\u5831\u304b\u3089\u6307\u5b9a\u30ad\u30fc\u306e\u30bf\u30b0\u5024\u3092\u53d6\u5f97\u3059\u308b\ndef get_tag_value(instance_info, key):\n    tags = instance_info.get('Tags')\n    if tags == None:\n        return None\n\n    for tag in tags:\n        if not (key == tag['Key']):\n            continue\n\n        tag_value = tag['Value']\n        if tag_value == \"true\":\n            return True\n\n    return None\n\n\n\u3057\u304b\u3057\u3001\u4f55\u5ea6Lambda\u30d5\u30a1\u30f3\u30af\u30b7\u30e7\u30f3\u3092\u5b9f\u884c\u3057\u3066\u3082\u3001\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u6b63\u3057\u3044\u30ec\u30b9\u30dd\u30f3\u30b9\u304c\u8fd4\u3063\u3066\u3044\u308b\u306e\u306b\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u306f\u8d77\u52d5\u3057\u307e\u305b\u3093\u3067\u3057\u305f\u3002\u3002\u3002\u3002\n\n{u'StartingInstances': [{u'InstanceId': '\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9ID', u'CurrentState': {u'Code': 0, u'Name': 'pending'}, u'PreviousState': {u'Code': 80, u'Name': 'stopped'}}], 'ResponseMetadata': {'HTTPStatusCode': 200, 'RequestId': 'kkksfh084k-l9hh-8iy6-hshs4-ipsug88w9hwh'}}\n\n\n\u539f\u56e0:\u5b9f\u884c\u30ed\u30fc\u30eb\u306e\u6a29\u9650\u4e0d\u8db3\n\u8272\u3005\u8abf\u3079\u307e\u3057\u305f\u304c\u539f\u56e0\u306f\u3068\u3066\u3082\u5358\u7d14\u306a\u3053\u3068\u3067\u3057\u305f\u3002\nKMS(Key Management Service)\u306e\u5b9f\u884c\u8a31\u53ef\u304c\u629c\u3051\u3066\u3044\u305f\u306e\u3067\u3059\u3002\u3002\n\u4eca\u56de\u3001\u79c1\u306f\u30c7\u30d5\u30a9\u30eb\u30c8\u306e\u30ad\u30fc\u3067\u306f\u306a\u304f\u81ea\u5206\u3067\u6697\u53f7\u5316\u30ad\u30fc\u3092\u4f5c\u6210\u3057\u3066\u4f7f\u3063\u3066\u3044\u307e\u3057\u305f\u3002\n\u305d\u306e\u5834\u5408\u3001\u8a72\u5f53\u306e\u6697\u53f7\u5316\u30ad\u30fc\u306e\u300c\u30ad\u30fc\u30e6\u30fc\u30b6\u300d\u3082\u3057\u304f\u306f\u5b9f\u884c\u30ed\u30fc\u30eb\u306e\u30dd\u30ea\u30b7\u30fc\u306b\u3066\u30ad\u30fc\u306e\u5229\u7528\u3092\u8a31\u53ef\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3057\u305f\u3002\n\u6697\u53f7\u5316\u30ad\u30fc\u306e\u300c\u30ad\u30fc\u30e6\u30fc\u30b6\u300d\u306b\u8a2d\u5b9a\u3059\u308b\u5834\u5408\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306bGUI\u3067\u8a2d\u5b9a\u3067\u304d\u307e\u3059\u3002\n\n\u5b9f\u884c\u30ed\u30fc\u30eb\u306e\u30dd\u30ea\u30b7\u30fc\u3060\u3063\u305f\u3089\u3053\u3093\u306a\u98a8\u306b\u3002\n\n\u5b9f\u884c\u30ed\u30fc\u30eb\u306e\u30dd\u30ea\u30b7\u30fc\u306b\u8a2d\u5b9a\u3059\u308b\u5834\u5408\n{\n    \"Version\": \"2012-10-17\",\n    \"Statement\": [\n        {\n            \"Sid\": \"Stmt1236596007000\",\n            \"Effect\": \"Allow\",\n            \"Action\": [\n                \"kms:*\"\n            ],\n            \"Resource\": [\n                \"\u4f5c\u6210\u3057\u305f\u30ad\u30fc\u306eARN\"\n            ]\n        }\n    ]\n}\n\n\n\n\u7d42\u308f\u308a\u306b\n\u539f\u56e0\u306f\u81f3\u6975\u5f53\u7136\u3067\u5f53\u305f\u308a\u524d\u306a\u3093\u3067\u3059\u304c\u666e\u6bb5\u4f7f\u308f\u306a\u3044\u6a5f\u80fd\u3060\u3068\u305d\u3053\u307e\u3067\u305f\u3069\u308a\u7740\u304f\u306e\u306b\u3082\u82e6\u52b4\u3057\u307e\u3059\u3002\n\u3053\u308c\u304b\u3089\u3082\u696d\u52d9\u5185\u5916\u554f\u308f\u305a\u89e6\u308c\u3066\u3044\u306a\u3044\u6a5f\u80fd\u306b\u89e6\u308c\u308b\u3088\u3046\u306b\u3057\u306a\u3051\u308c\u3070\u306a\u30fc\u3068\u601d\u3044\u307e\u3057\u305f\u3002\n\u6697\u53f7\u5316\u3057\u305fEBS\u30eb\u30fc\u30c8\u30dc\u30ea\u30e5\u30fc\u30e0\u3092\u6301\u3064\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u3001Lambda\u3092\u4f7f\u3063\u3066\u81ea\u52d5\u8d77\u52d5\u3055\u305b\u3088\u3046\u3068\u3057\u305f\u6642\u306b\u30cf\u30de\u3063\u305f\u7b87\u6240\u304c\u3042\u3063\u305f\u306e\u3067\u3042\u3063\u305f\u306e\u3067\u307e\u3068\u3081\u307e\u3057\u305f\u3002\n\n# EBS\u30eb\u30fc\u30c8\u30dc\u30ea\u30e5\u30fc\u30e0\u306e\u6697\u53f7\u5316\n\u4ee5\u4e0b\u306e\u8a18\u4e8b\u306b\u3042\u308a\u307e\u3059\u3088\u3046\u306b\u73fe\u5728\u3001EBS\u3067\u306f\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u306e\u30eb\u30fc\u30c8\u30dc\u30ea\u30e5\u30fc\u30e0\u306e\u6697\u53f7\u5316\u304c\u30b5\u30dd\u30fc\u30c8\u3055\u308c\u3066\u3044\u307e\u3059\u3002\nhttp://aws.typepad.com/aws_japan/2015/12/new-encrypted-ebs-boot-volumes.html\n\u4eca\u56de\u306f\u3053\u306e\u30eb\u30fc\u30c8\u30dc\u30ea\u30e5\u30fc\u30e0\u6697\u53f7\u5316\u3092\u65bd\u3057\u305f\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u306e\u81ea\u52d5\u8d77\u52d5\u3092\u884c\u3046\u969b\u306b\u30cf\u30de\u3063\u305f\u70b9\u306b\u3064\u3044\u3066\u66f8\u304d\u307e\u3059\u3002\n\n# \u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u306e\u8d77\u52d5\u5931\u6557\n\u4eca\u56deAWS Lambda\u3092\u7528\u3044\u3066\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u306e\u8d77\u52d5\u81ea\u52d5\u5316\u3092\u56f3\u308d\u3046\u3068\u3057\u3066\u3044\u307e\u3057\u305f\u3002\n\u4f7f\u7528\u3057\u305f\u30b9\u30af\u30ea\u30d7\u30c8\u306f[AMI\u30d0\u30c3\u30af\u30a2\u30c3\u30d7\u3092\u53d6\u308bLambda\u30d5\u30a1\u30f3\u30af\u30b7\u30e7\u30f3\uff08python\uff09](http://qiita.com/Hiroyama-Yutaka/items/9fab02438dc22c0b85ea)\u3092\u5143\u306b\u4f5c\u6210\u3057\u305f\u3001\u4ee5\u4e0b\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u8d77\u52d5\u30d0\u30c3\u30c1\u3067\u3059\u3002\n\u30b9\u30c8\u30c3\u30d7\u3068\u5408\u308f\u305b\u3066GitHub\u306b\u3082\u7f6e\u3044\u3066\u3042\u308a\u307e\u3059\u3002\nhttps://github.com/tto0408/Hello-world/tree/master/LambdaFunctions\n\n```python:startinstance.py\n#!/usr/bin/python\n# -*- coding: utf-8 -*-\n\nimport json\n\nimport boto3\n\nimport pprint\n\nTAG_KEY_AUTO_START = 'auto-start'\n\n\nprint('Loading function')\n\npp = pprint.PrettyPrinter(indent=4)\n\n# \u95a2\u6570\u540d \uff1a lambda_handler\ndef lambda_handler(event, context):\n    print(\"Received event: \" + json.dumps(event, indent=2))\n\n    ec2_client   = boto3.client('ec2')\n\n    ret = execute_start_instance(ec2_client)\n    print 'Start instance success(%s).' % (ret)\n\n    return 0\n    raise Exception('Something went wrong')\n\n# \u95a2\u6570\u540d \uff1a execute_start_instance\n# \u623b\u308a\u5024 \uff1a \u5b9f\u884c\u7d50\u679c\n# \u5f15\u6570\u3000 \uff1a ec2_client\n#       \uff1a ec2_resource\n# \u6a5f\u80fd\u3000 \uff1a \u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u8d77\u52d5\u3059\u308b\u3002\ndef execute_start_instance(ec2_client):\n    response = ec2_client.describe_instances()\n\n    result = None\n    for ec2_group in response['Reservations']:\n        for instance_info in ec2_group['Instances']:\n            ret = is_target(instance_info)\n            \n            if (ret == False):\n                continue\n            instance_id = instance_info.get('InstanceId')\n            response = ec2_client.start_instances(InstanceIds=[instance_id,])\n            print response\n            result = True\n    return result\n\n# \u95a2\u6570\u540d \uff1a is_target\n# \u623b\u308a\u5024 \uff1a \u8d77\u52d5\u8981\u5426\n# \u5f15\u6570\u3000 \uff1a instance_info <dict>\n# \u6a5f\u80fd\u3000 \uff1a \u8d77\u52d5\u8981\u5426\u3092\u5224\u5b9a\u3059\u308b\ndef is_target(instance_info):\n    val = get_tag_value(\n        instance_info,\n        TAG_KEY_AUTO_START\n    )\n\n    if val is None:\n        return False\n\n    return True\n\n# \u95a2\u6570\u540d \uff1a get_tag_value\n# \u623b\u308a\u5024 \uff1a \u30bf\u30b0\u5024\uff08\u5f53\u8a72\u30ad\u30fc\u306b\u5408\u81f4\u3059\u308b\u3082\u306e\u304c\u306a\u3051\u308c\u3070None\uff09\n# \u5f15\u6570\u3000 \uff1a instance_info <dict>\n#       \uff1a key <str>\n# \u6a5f\u80fd\u3000 \uff1a \u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u60c5\u5831\u304b\u3089\u6307\u5b9a\u30ad\u30fc\u306e\u30bf\u30b0\u5024\u3092\u53d6\u5f97\u3059\u308b\ndef get_tag_value(instance_info, key):\n    tags = instance_info.get('Tags')\n    if tags == None:\n        return None\n\n    for tag in tags:\n        if not (key == tag['Key']):\n            continue\n\n        tag_value = tag['Value']\n        if tag_value == \"true\":\n            return True\n\n    return None\n```\n\n\u3057\u304b\u3057\u3001\u4f55\u5ea6Lambda\u30d5\u30a1\u30f3\u30af\u30b7\u30e7\u30f3\u3092\u5b9f\u884c\u3057\u3066\u3082\u3001\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u6b63\u3057\u3044\u30ec\u30b9\u30dd\u30f3\u30b9\u304c\u8fd4\u3063\u3066\u3044\u308b\u306e\u306b\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u306f\u8d77\u52d5\u3057\u307e\u305b\u3093\u3067\u3057\u305f\u3002\u3002\u3002\u3002\n```\n{u'StartingInstances': [{u'InstanceId': '\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9ID', u'CurrentState': {u'Code': 0, u'Name': 'pending'}, u'PreviousState': {u'Code': 80, u'Name': 'stopped'}}], 'ResponseMetadata': {'HTTPStatusCode': 200, 'RequestId': 'kkksfh084k-l9hh-8iy6-hshs4-ipsug88w9hwh'}}\n```\n\n# \u539f\u56e0:\u5b9f\u884c\u30ed\u30fc\u30eb\u306e\u6a29\u9650\u4e0d\u8db3\n\u8272\u3005\u8abf\u3079\u307e\u3057\u305f\u304c\u539f\u56e0\u306f\u3068\u3066\u3082\u5358\u7d14\u306a\u3053\u3068\u3067\u3057\u305f\u3002\nKMS(Key Management Service)\u306e\u5b9f\u884c\u8a31\u53ef\u304c\u629c\u3051\u3066\u3044\u305f\u306e\u3067\u3059\u3002\u3002\n\u4eca\u56de\u3001\u79c1\u306f\u30c7\u30d5\u30a9\u30eb\u30c8\u306e\u30ad\u30fc\u3067\u306f\u306a\u304f\u81ea\u5206\u3067\u6697\u53f7\u5316\u30ad\u30fc\u3092\u4f5c\u6210\u3057\u3066\u4f7f\u3063\u3066\u3044\u307e\u3057\u305f\u3002\n\u305d\u306e\u5834\u5408\u3001\u8a72\u5f53\u306e\u6697\u53f7\u5316\u30ad\u30fc\u306e\u300c\u30ad\u30fc\u30e6\u30fc\u30b6\u300d\u3082\u3057\u304f\u306f\u5b9f\u884c\u30ed\u30fc\u30eb\u306e\u30dd\u30ea\u30b7\u30fc\u306b\u3066\u30ad\u30fc\u306e\u5229\u7528\u3092\u8a31\u53ef\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3057\u305f\u3002\n\u6697\u53f7\u5316\u30ad\u30fc\u306e\u300c\u30ad\u30fc\u30e6\u30fc\u30b6\u300d\u306b\u8a2d\u5b9a\u3059\u308b\u5834\u5408\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306bGUI\u3067\u8a2d\u5b9a\u3067\u304d\u307e\u3059\u3002\n![\u6697\u53f7\u5316\u30ad\u30fc\u306e\u30ad\u30fc\u30e6\u30fc\u30b6\u8a2d\u5b9a.png](https://qiita-image-store.s3.amazonaws.com/0/117895/e59c7ed4-4f41-405c-011e-90baef1410a3.png)\n\n\n\u5b9f\u884c\u30ed\u30fc\u30eb\u306e\u30dd\u30ea\u30b7\u30fc\u3060\u3063\u305f\u3089\u3053\u3093\u306a\u98a8\u306b\u3002\n\n```JSON:\u5b9f\u884c\u30ed\u30fc\u30eb\u306e\u30dd\u30ea\u30b7\u30fc\u306b\u8a2d\u5b9a\u3059\u308b\u5834\u5408\n{\n    \"Version\": \"2012-10-17\",\n    \"Statement\": [\n        {\n            \"Sid\": \"Stmt1236596007000\",\n            \"Effect\": \"Allow\",\n            \"Action\": [\n                \"kms:*\"\n            ],\n            \"Resource\": [\n                \"\u4f5c\u6210\u3057\u305f\u30ad\u30fc\u306eARN\"\n            ]\n        }\n    ]\n}\n```\n\n# \u7d42\u308f\u308a\u306b\n\u539f\u56e0\u306f\u81f3\u6975\u5f53\u7136\u3067\u5f53\u305f\u308a\u524d\u306a\u3093\u3067\u3059\u304c\u666e\u6bb5\u4f7f\u308f\u306a\u3044\u6a5f\u80fd\u3060\u3068\u305d\u3053\u307e\u3067\u305f\u3069\u308a\u7740\u304f\u306e\u306b\u3082\u82e6\u52b4\u3057\u307e\u3059\u3002\n\u3053\u308c\u304b\u3089\u3082\u696d\u52d9\u5185\u5916\u554f\u308f\u305a\u89e6\u308c\u3066\u3044\u306a\u3044\u6a5f\u80fd\u306b\u89e6\u308c\u308b\u3088\u3046\u306b\u3057\u306a\u3051\u308c\u3070\u306a\u30fc\u3068\u601d\u3044\u307e\u3057\u305f\u3002\n\n\n\n\n\n\n", "tags": ["AWS", "lambda", "ebs", "IAM", "Python"]}