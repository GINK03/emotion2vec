{"context": " More than 1 year has passed since last update.http://java.ociweb.com/mark/clojure/article.html\n\u81ea\u5206\u304c\u8aad\u307f\u305f\u3044\u3068\u3053\u308d\u3057\u304b\u8a33\u3055\u306a\u3044\u3067\u3059\u3002\n\nFunctional Programming\n\nFunctional programming is a style of programming that emphasizes \"first-class\" functions that are \"pure\". \nIt was inspired by ideas from the lambda calculus.\n\n\u95a2\u6570\u578b\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u306f\u95a2\u6570\u304c\u7b2c\u4e00\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3067\u3042\u308a\u3001\u304b\u3064\u7d14\u7c8b\u3067\u3042\u308b\u3053\u3068\u3092\u5f37\u8abf\u3059\u308b\u3088\u3002\u30e9\u30e0\u30c0\u8a08\u7b97\u306b\u5f71\u97ff\u53d7\u3051\u3066\u308b\u3088\u3002\n\n\"Pure functions\" are functions that always return the same result when passed the same arguments, as opposed to depending on state that can change with time.\n\n\u300c\u7d14\u7c8b\u306a\u95a2\u6570\u300d\u3068\u306f\u540c\u3058\u5f15\u6570\u3092\u3068\u3063\u305f\u3089\u3001\u3044\u3064\u3082\u540c\u3058\u7d50\u679c\u3092\u8fd4\u3059\u3068\u3044\u3046\u3053\u3068\u3060\u3088\u3001\u30bf\u30a4\u30df\u30f3\u30b0\u306b\u3088\u3063\u3066\u5909\u3048\u3089\u308c\u308b\u3088\u3046\u306a\u72b6\u614b\u306b\u4f9d\u5b58\u3057\u306a\u3044\u304b\u305f\u3061\u3067\u306d\u3002\n\nThis makes them much easier to understand, debug and test. \n\n\u3053\u306e\u6027\u8cea\u306b\u3088\u3063\u3066\u7406\u89e3\u3068\u30c7\u30d0\u30c3\u30b0\u3068\u30c6\u30b9\u30c8\u304c\u7c21\u5358\u306b\u306a\u308b\u3088\n\nThey have no side effects such as changing global state or performing any kind of I/O, including file I/O and database updates. \n\n\u30b0\u30ed\u30fc\u30d0\u30eb\u306a\u72b6\u614b\u3084\u3001\u5165\u51fa\u529b(\u30d5\u30a1\u30a4\u30eb\u3068\u304bDB\u3068\u304b)\u306b\u5bfe\u3057\u3066\u3001\u526f\u4f5c\u7528\u304c\u306a\u3044\u3063\u3066\u3053\u3068\u3060\u3088\n\nState is maintained in the values of function parameters saved on the stack (often placed there by recursive calls) rather than in global variables saved on the heap.\n\n\u72b6\u614b\u3001\u306f\u95a2\u6570\u306e\u5024\u3068\u3057\u3066\u30b9\u30bf\u30c3\u30af\u306b\u4fdd\u5b58\u3055\u308c\u308b\u3088\n\u4e3b\u306b\u305d\u308c\u306f\u518d\u5e30\u547c\u3073\u51fa\u3057\u3060\u3088\n\u30d2\u30fc\u30d7\u306b\u306f\u4fdd\u5b58\u3057\u306a\u304f\u3066\u3088\u3044\u3093\u3060\u3088\n\nThis allows functions to be executed repeatedly without affecting global state (an important characteristic to consider when transactions are discussed later). \n\n\u3053\u306e\u7279\u5fb4\u306f\u95a2\u6570\u306e\u5b9f\u884c\u3092\u4f55\u5ea6\u3082\u3067\u304d\u308b\u30b0\u30ed\u30fc\u30d0\u30eb\u306aState\u306b\u4f9d\u5b58\u3057\u306a\u3044\u3067\u306d\n\nIt also opens the door for smart compilers to improve performance by automatically reordering and parallelizing code, although the latter is not yet common.\n\n\u305d\u308c\u306b\u3088\u3063\u3066\u3001\u30b3\u30f3\u30d1\u30a4\u30e9\u304c\u81ea\u52d5\u7684\u306b\u4e26\u5217\u5b9f\u884c\u30b3\u30fc\u30c9\u3068\u3057\u3066\u30d1\u30d5\u30a9\u30fc\u30de\u30f3\u30b9\u6700\u9069\u5316\u3057\u3066\u304f\u308c\u308b\u304b\u3089\u3055\u3002\u305d\u3093\u306a\u3059\u3050\u3067\u304d\u308b\u3082\u3093\u3067\u3082\u306a\u3044\u3093\u3060\u3051\u3069\u3002\n\nData in functional programming languages is typically immutable.\n\n\u95a2\u6570\u578b\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u306f\u4e00\u822c\u7684\u306b\u3001\u30a4\u30df\u30e5\u30fc\u30bf\u30d6\u30eb\u3002\n\nThis allows data to be accessed concurrently from multiple threads without locking. \nThere's no need to lock data that can't be changed. \n\n\u3053\u308c\u306b\u3088\u3063\u3066\u3001\u30c7\u30fc\u30bf\u30ed\u30c3\u30af\u306a\u3057\u306b\u3001\u30de\u30eb\u30c1\u30b9\u30ec\u30c3\u30c9\u306b\u3088\u308b\u3001\u30c7\u30fc\u30bf\u3078\u306e\u4e26\u884c\u7684\u306a\u30a2\u30af\u30bb\u30b9\u3092\u53ef\u80fd\u306b\u3059\u308b\u3088\u3002\n\u30c7\u30fc\u30bf\u306f\u5909\u3048\u3089\u308c\u306a\u3044\uff08\u30a4\u30df\u30e5\u30fc\u30bf\u30d6\u30eb\uff09\u3060\u304b\u3089\u3001\u30ed\u30c3\u30af\u3059\u308b\u5fc5\u8981\u306a\u3093\u3066\u306a\u3044\u3093\u3060\u3002\n\nWith multicore processors becoming prevalent, this simplification of programming for concurrency is perhaps the biggest benefit of functional programming.\n\n\u4e26\u5217\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u306b\u95a2\u3059\u308b\u5358\u7d14\u3067\u3001\u3067\u3082\u6700\u3082\u95a2\u6570\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u306e\u6069\u6075\u3067\u3082\u3042\u308b\u3053\u306e\u7279\u5fb4\u306b\u3088\u3063\u3066\u3001\u30de\u30eb\u30c1\u30b3\u30a2\u30d7\u30ed\u30bb\u30b9\u3092\u5229\u7528\u3057\u305f\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u304c\u3082\u3063\u3068\u4e00\u822c\u7684\u306b\u306a\u3063\u3066\u3044\u304f\u3088\u306d\u3002\n\nClojure Overview\n\nClojure is a dynamically-typed, functional language that runs on the JVM and provides interopareability with Java.\n\nClojure\u306f\u3001\n\n\u52d5\u7684\u578b\u4ed8\u3051\u3067\n\u95a2\u6570\u578b\u3067\nJVM\u4e0a\u3067\u52d5\u3044\u3066\u3001\nJava\u3068\u306e\u76f8\u4e92\u5229\u7528\u6027\u3092\u6301\u3063\u305f\n\n\u8a00\u8a9e\u3060\u3088\u3002\n\nA major goal of the language is to make it easier to implement applications that access data from multiple threads(concurrency)\n\n\u3053\u306e\u8a00\u8a9e\u306e\u5927\u304d\u306a\u76ee\u6a19\u306f\u3001\u4e26\u884c\u6027\u3001\u4e26\u5217\u6027\u306b\u95a2\u3057\u3066\u7c21\u5358\u306b\u3059\u308b\u3053\u3068\u3002\n\nClojure is pronounced that same as the word \"closure\".\nClojure \u306f\u3000\u30af\u30ed\u30fc\u30b8\u30e3 \u3063\u3066\u8aad\u3093\u3067\u306d\nthe creator of the language, Rick Hickey explains the name this way :\"I wanted to involve C(C#),L(Lisp), andJ(Java). Once Icame up with Clojure, given the punon clocure, the acailable domains and vast enptiness of the google space, it was an easy decision.\"\n\n\u8a00\u8a9e\u958b\u767a\u8005\u3067\u3042\u308bRick Hickey\u306f\u3053\u3046\u8a00\u3063\u3066\u308b\u3002\n\u300c\u50d5\u306f\u3001C(C#),L(Lisp), and J(Java)\u3092\u542b\u3080\u3088\u3046\u306a\u5358\u8a9e\u306b\u3057\u305f\u304b\u3063\u305f\u3093\u3060\u3002punon clocure\u3068\u3044\u3046\u8a00\u8449\u304b\u3089\u4e00\u5ea6Clojure\u3068\u3044\u3046\u540d\u524d\u3092\u601d\u3044\u3064\u3044\u305f\u3089\u3001\u30b0\u30b0\u30e9\u30d3\u30ea\u30c6\u30a3\u3082\u826f\u304b\u3063\u305f\u3057\u3001\u30bd\u30c3\u30b3\u30fc\u6c7a\u3081\u305f\u3088\u306d\u3002\u300d\n\nClojure is also available for the .NET platform. ClojureCLR is an implementation of Clojure that runs on the Microsoft Common Language Runtime instead of the JVM. See https://github.com/clojure/clojure-clr.\n\nClojure\u306f.NET\u3067\u3082\u52d5\u304f\u3088\u3002\n\nIn July 2011, ClojureScript was announced. It compiles Clojure code to JavaScript. See https://github.com/clojure/clojurescript.\n\nClojureScript\u3063\u3066\u3044\u3046AltJS\u7684\u306a\u3084\u3064\u3082\u3042\u308b\u3088\u3002\n\nClojure is an open source language released under the Eclipse Public License v 1.0 (EPL). This is a very liberal license. See http://www.eclipse.org/legal/eplfaq.php for more information.\n\nClojure\u306fEclipse Public Licence v1.0\u3067\u3059\u3088\u3002\n\nRunning on the JVM provides portability, stability, performance and security.\n It also provides access to a wealth of existing Java libraries supporting functionality including file I/O, multithreading, database access, GUIs, web applications, and much more.\n\nJVM\u4e0a\u3067\u52d5\u304f\u3063\u3066\u3053\u3068\u306f\u3001\n\n\u74b0\u5883\u79fb\u690d\u6027\n\u5b89\u5b9a\u6027\n\u30d1\u30d5\u30a9\u30fc\u30de\u30f3\u30b9\n\u30bb\u30ad\u30e5\u30ea\u30c6\u30a3\u30fc\n\n\u3092\u63d0\u4f9b\u3067\u304d\u308b\u3063\u3066\u3053\u3068\u3084\u3002\n\u305d\u3057\u3066\u3001\u5e78\u3044\u306a\u4e8b\u306b\u305d\u308c\u306f\u3001\u65e2\u5b58\u306eJava\u306e\u30e9\u30a4\u30d6\u30e9\u30ea\u306e\u6a5f\u80fd\u3001file I/O, \u30de\u30eb\u30c1\u30b9\u30ec\u30c3\u30c7\u30a3\u30f3\u30b0\u3001\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u30a2\u30af\u30bb\u30b9\u3001GUI\u30e9\u30a4\u30d6\u30e9\u30ea\u3001web\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u3001\u3068\u304b\u3001\u8272\u3005\u306b\u30a2\u30af\u30bb\u30b9\u3067\u304d\u308b\u3063\u3066\u3053\u3068\u3082\u3082\u305f\u3089\u3057\u3066\u304f\u308c\u3066\u308b\u3063\u3061\u3085\u3046\u308f\u3051\u3084\u3002\n\nEach \"operation\" in Clojure is implemented as either a function, macro or special form.\n Nearly all functions and macros are implemented in Clojure source code. \nThe differences between functions and macros are explained later. \n\nClojure\u306b\u304a\u3051\u308b\u305d\u308c\u305e\u308c\u306e\u64cd\u4f5c\u306f\u3001\u95a2\u6570\u3001\u30de\u30af\u30ed\u3001\u7279\u6b8a\u5f62\u5f0f\u3068\u3057\u3066\u5b9f\u88c5\u3055\u308c\u308b\u3084\u3067\u3002\n\u307b\u3068\u3093\u3069\u5168\u3066\u306e\u95a2\u6570\u3068\u30de\u30af\u30ed\u306f\u3001Clojure\u306e\u30bd\u30fc\u30b9\u3068\u3057\u3066\u5b9f\u88c5\u3055\u308c\u308b\u3082\u306e\u3002\n\u30de\u30af\u30ed\u3068\u95a2\u6570\u306e\u9055\u3044\u306b\u3064\u3044\u3066\u306f\u3042\u3068\u3067\u8aac\u660e\u3059\u308b\u3084\u3067\u3002\n\nSpecial forms are recognized by the Clojure compiler and not implemented in Clojure source code.\n\n\u7279\u6b8a\u5f62\u5f0f\u306f\u3001\u30af\u30ed\u30fc\u30b8\u30e3\u306e\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u3068\u3057\u3066\u306f\u5b9f\u88c5\u3055\u308c\u306a\u3044\u3082\u306e\u3067\u3001Clojure\u306e\u30b3\u30f3\u30d1\u30a4\u30e9\u304c\u8a8d\u8b58\u3059\u308b\u3082\u306e\u306a\u3093\u3084\u3002\n\nThere are a relatively small number of special forms and new ones cannot be implemented. \nThey include catch, def, do, dot ('.'), finally, fn, if, let, loop, monitor-enter, monitor-exit, new, quote, recur, set!, throw, try and var.\n\n\u5c11\u6570\u306e\u7279\u6b8a\u5f62\u5f0f\u304c\u3042\u3063\u3066\u3001\u7279\u6b8a\u5f62\u5f0f\u306f\u65b0\u3057\u304f\u4f5c\u308b\u3053\u3068\u304c\u3067\u304d\u306a\u3044\u3002\n\u4f8b\u3048\u3070\u3001catch, def, do, dot ('.'), finally, fn, if, let, loop, monitor-enter,\n monitor-exit, new, quote, recur, set!, throw, try and var\u307f\u305f\u3044\u306a\u3082\u306e\u304c\u305d\u3046\u3060\u3002\n\nClojure provides many functions that make it easy to operate on \"sequences\" which are logical views of collections. \nMany things can be treated as sequences. \n\nClojure\u306f\u3001\u30b3\u30ec\u30af\u30b7\u30e7\u30f3\u306e\u8ad6\u7406\u7684\u306a\u898b\u65b9\u3067\u69cb\u6210\u3055\u308c\u305f\u3001\"sequence\"\u3068\u3044\u3046\u3082\u306e\u306b\u304a\u3044\u3066\u7c21\u5358\u306b\u64cd\u4f5c\u3067\u304d\u308b\u6ca2\u5c71\u306e\u95a2\u6570\u3092\u63d0\u4f9b\u3057\u3066\u3044\u308b\u3002\n\u591a\u304f\u306e\u3082\u306e\u306fsequence\u3068\u3057\u3066\u6271\u308f\u308c\u308b\u3002\n\nThese include Java collections, Clojure-specific collections, strings, streams, directory structures and XML trees. \nNew instances of Clojure collections can be created from existing ones in an efficient manner because they are persistent data structures.\n\n\u305d\u308c\u306f\u3001Java\u306e\u30b3\u30ec\u30af\u30b7\u30e7\u30f3\u578b\u3001Clojure-specific\u306a\u30b3\u30ec\u30af\u30b7\u30e7\u30f3\u578b\u3001\u6587\u5b57\u5217\u3001\u30b9\u30c8\u30ea\u30fc\u30e0\u3001\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u69cb\u9020\u3001XML\u30c4\u30ea\u30fc\u306a\u3093\u304b\u3092\u542b\u3080\u3002\n\u5805\u7262\u306a\u30c7\u30fc\u30bf\u578b\u3067\u3042\u308b\u304b\u3069\u3046\u304b\u3001\u3068\u3044\u3046\u52b9\u679c\u7684\u306a\u6c7a\u307e\u308a\u4e8b\u306b\u5f93\u3063\u3066\u3001Clojure\u306e\u65b0\u3057\u3044\u30b3\u30ec\u30af\u30b7\u30e7\u30f3\u578b\u306f\u4f5c\u308b\u3053\u3068\u304c\u3067\u304d\u308b\u3002\n\nClojure provides three ways of safely sharing mutable data, all of which use mutable references to immutable data.\n\nClojure \u306f\u5168\u3066\u306e\u30a4\u30df\u30e5\u30fc\u30bf\u30d6\u30eb\u306a\u30c7\u30fc\u30bf\u306e\u30df\u30e5\u30fc\u30bf\u30d6\u30eb\u306a\u53c2\u7167\u306b\u95a2\u3057\u3066\u3001\u5b89\u5168\u306a\uff13\u3064\u306e\u65b9\u6cd5\u3092\u63d0\u4f9b\u3057\u3066\u3044\u308b\u3002\n\nRefs provide synchronous access to multiple pieces of shared data (\"coordinated\") by using Software Transactional Memory (STM). \n\n\u300c\u30ec\u30d5(Ref)\u300d\u306f\u3001\u30c7\u30fc\u30bf\u306e\u3044\u304f\u3064\u304b\u306e\u96c6\u307e\u308a\u306b\u540c\u671f\u7684\u306b\u30a2\u30af\u30bb\u30b9\u3059\u308b\u65b9\u6cd5\u3092\u3001\u30bd\u30d5\u30c8\u30a6\u30a7\u30a2\u30c8\u30e9\u30f3\u30b6\u30af\u30b7\u30e7\u30f3\u30e1\u30e2\u30ea\u3092\u7528\u3044\u3066\u63d0\u4f9b\u3059\u308b\u3002\n\nAtoms provide synchronous access to a single piece of shared data. \n\n\u300c\u30a2\u30c8\u30e0\u300d\u306f\u3072\u3068\u3064\u306e\u30b7\u30a7\u30a2\u3055\u308c\u305f\u30c7\u30fc\u30bf\u306b\u540c\u671f\u7684\u306b\u30a2\u30af\u30bb\u30b9\u3059\u308b\u65b9\u6cd5\u3068\u3057\u3066\u63d0\u4f9b\u3055\u308c\u308b\u3002\n\nAgents provide asynchronous access to a single piece of shared data. \n\n\u300c\u30a8\u30fc\u30b8\u30a7\u30f3\u30c8\u300d\u306f\u3001\u3072\u3068\u3064\u306e\u30b7\u30a7\u30a2\u3055\u308c\u305f\u30c7\u30fc\u30bf\u306b\u975e\u540c\u671f\u7684\u306b\u30a2\u30af\u30bb\u30b9\u3059\u308b\u65b9\u6cd5\u3068\u3057\u3066\u63d0\u4f9b\u3055\u308c\u308b\u3002\n\nThese are discussed in more detail in the \"Reference Types\" section.\n\n\u3053\u308c\u3089\u306b\u3064\u3044\u3066\u306f\u3001\u3088\u308a\u8a73\u3057\u304f\u306f \"Reference Types\" \u306e\u9805\u3067\u89e6\u308c\u308b\u3002\n\nClojure is a Lisp dialect. \nHowever, it makes some departures from older Lisps. \nFor example, older Lisps use the car function to get the first item in a list.\nClojure calls this first as does Common Lisp. \nFor a list of other differences, see http://clojure.org/lisps.\n\nClojure\u306fLisp\u306e\u65b9\u8a00\u3060\u3088\u3002\n\u3060\u3051\u3069\u3001\u3088\u304f\u77e5\u3089\u308c\u305fLisp\u8868\u73fe\u304b\u3089\u767a\u5c55\u3057\u3066\u3044\u308b\u3082\u306e\u3082\u3044\u304f\u3064\u304b\u3042\u308b\u3002\n\u305f\u3068\u3048\u3070\u3001\u3088\u304f\u77e5\u3089\u308c\u305fLisp\u3067\u3044\u3046\u3068\u3053\u308d\u306ecar\u306f\u3001\u30ea\u30b9\u30c8\u306e\u4e00\u756a\u521d\u3081\u306e\u8981\u7d20\u3092\u53d6\u3063\u3066\u304f\u308b\u95a2\u6570\u3060\u3002\nClojure\u3067\u306f\u3001first\u3068\u3044\u3046\u30ad\u30fc\u30ef\u30fc\u30c9\u3067\u305d\u306eCommon Lisp\u306e\u6a5f\u80fd\u3092\u8868\u73fe\u3059\u308b\u3002\u2028\u4ed6\u306e\u9055\u3044\u306b\u3064\u3044\u3066\u306e\u30ea\u30b9\u30c8\u306f\u3001\u3053\u308c.\u3092\u307f\u3066\u306d\u3002\n\nLisp has a syntax that many people love ... and many people hate, mainly due to its use of parentheses and prefix notation. \nIf you tend toward the latter camp, consider these facts. \n\nLisp\u306e\u30b7\u30f3\u30bf\u30c3\u30af\u30b9\u306f\u3001\u591a\u304f\u306e\u4eba\u306b\u611b\u3055\u308c,,,,\u591a\u304f\u306e\u4eba\u306b\u618e\u307e\u308c\u3066\u3044\u308b\u3002\u305d\u308c\u306f\u591a\u304f\u306e\u3068\u3053\u308d\u306f\u3001\u30ab\u30c3\u30b3\u306e\u591a\u7528\u3068\u3001\u524d\u7f6e\u8a18\u6cd5\u306b\u3088\u308b\u3068\u3053\u308d\u304c\u5927\u304d\u3044\u3002\n\u3082\u3057\u3042\u306a\u305f\u304c\u305d\u306e\u4e3b\u5f35\u3092\u63a8\u9032\u3059\u308b\u9663\u55b6\u306a\u306e\u3060\u3068\u3057\u305f\u3089\u3001\u73fe\u5b9f\u306b\u3064\u3044\u3066\u5c11\u3057\u8003\u616e\u3057\u3088\u3046\u3002\n\nMany text editors and IDEs highlight matching parentheses, so it isn't necessary to count them in order to ensure they are balanced. \n\n\u591a\u304f\u306e\u30c6\u30ad\u30b9\u30c8\u30a8\u30c7\u30a3\u30bf\u3001IDE\u3067\u306f\u3001\u30ab\u30c3\u30b3\u306e\u81ea\u52d5\u88dc\u5b8c\u3092\u3057\u3066\u304f\u308c\u308b\u304b\u3089\u3001\u30ab\u30c3\u30b3\u304c\u304d\u3061\u3093\u3068\u9589\u3058\u3066\u3044\u308b\u304b\u3069\u3046\u304b\u3044\u3061\u3044\u3061\u6570\u3048\u308b\u5fc5\u8981\u3068\u3044\u3046\u306e\u306f\u306a\u3044\u3002\n\nClojure function calls are less noisy than Java method calls. \nA Java method call looks like this:\n\nClojure\u306e\u95a2\u6570\u306fJava\u306e\u30e1\u30bd\u30c3\u30c9\u30b3\u30fc\u30eb\u306b\u6bd4\u3079\u3066\u7c21\u6f54\u3060\u3002\nJava\u306e\u30e1\u30bd\u30c3\u30c9\u30b3\u30fc\u30eb\u306f\u3053\u3093\u306a\u304b\u3093\u3058\u3002\nmethodName(arg1, arg2, arg3);\n\n\nA Clojure function call looks like this:\n\n\u30af\u30ed\u30fc\u30b8\u30e3\u3060\u3068\u3053\u3046\u306a\u308b\u3002\n(function-name arg1 arg2 arg3)\n\n\nThe open paren moves to the front and the commas and semicolon disappear. \nThis syntax is referred to as a \"form\". \nThere is simple beauty in the fact that everything in Lisp has this form. \nNote that the naming convention in Clojure is to use all lowercase with hyphens separating words in multi-word names, unlike the Java convention of using camelcase. \n\n\u30ab\u30c3\u30b3\u306e\u306f\u3058\u307e\u308a\u304c\u3001\u5148\u982d\u306b\u52d5\u304d\u3001\u30b3\u30f3\u30de\u3068\u30bb\u30df\u30b3\u30ed\u30f3\u304c\u6d88\u3048\u53bb\u3063\u305f\uff01\uff01\uff01\uff01\uff01\uff01\uff01\uff01\uff01\uff01\n\u3053\u306e\u30b7\u30f3\u30bf\u30c3\u30af\u30b9\u306f\u201d\u30d5\u30a9\u30fc\u30e0\u201d\u3063\u3066\u547c\u3070\u308c\u308b\u3088\u3002\n\u5168\u3066\u306eLisp\u306f\u3053\u306e\u30d5\u30a9\u30fc\u30e0\u3067\u52d5\u304f\u3088\u306d\u3001\u3063\u3066\u3044\u3046\u4e8b\u5b9f\u306f\u3001\u7c21\u6f54\u306a\u7f8e\u3057\u3055\u3092\u751f\u3080\u3002\nClojure\u3067\u306e\u547d\u540d\u898f\u5247\u306fJava\u306e\u30ad\u30e3\u30e1\u30eb\u30b1\u30fc\u30b9\u3068\u3061\u304c\u3063\u3066\u3001\u5168\u3066\u306e\u540d\u524d\u3092\u5c0f\u6587\u5b57\u3067\u66f8\u3044\u3066\u3001\u30cf\u30a4\u30d5\u30f3\u3067\u5206\u3051\u308b\u3001\u3063\u3066\u3044\u3046\u304b\u3093\u3058\u3002\n\nDefining functions is similarly less noisy in Clojure.\nThe Clojure println function adds a space between the output from each of its arguments. \nTo avoid this, pass the same arguments to the str function and pass its result to println.\n\n\u95a2\u6570\u5b9a\u7fa9\u3082\u540c\u69d8\u306bClojure\u306e\u307b\u3046\u304c\u7c21\u6f54\u3002\nClojure\u306eprintln\u95a2\u6570\u306f\u3001\u51fa\u529b\u3057\u305f\u3044\u9805\u306e\u9593\u306b\u305d\u308c\u305e\u308c\u30b9\u30da\u30fc\u30b9\u3092\u5165\u308c\u308b\u3060\u3051\u3067\u3088\u3044\u3002\n\u3053\u308c\u3092\u6392\u9664\u3059\u308b\u3053\u3068\u306b\u3088\u3063\u3066\u3001\u540c\u3058\u9805\u3092\u6301\u3064\u51fa\u529b\u95a2\u6570\u306fprintln\u3092\u3068\u304a\u308b\n// Java\npublic void hello(String name) {\n    System.out.println(\"Hello, \" + name);\n}\n\n; Clojure\n(defn hello [name]\n  (println \"Hello,\" name))\n\n\nClojure makes heavy use of lazy evaluation. \nThis allows functions to be invoked only when their result is needed. \n\"Lazy sequences\" are collections of results that are not computed until needed. \nThis supports the efficient creation of infinite collections.\n\nClojrue\u306f\u9045\u5ef6\u8a55\u4fa1\u3092\u591a\u7528\u3059\u308b\u3002\n\u3053\u308c\u306f\u305d\u306e\u5024\u304c\u5fc5\u8981\u306b\u306a\u3063\u305f\u6642\u306b\u305d\u306e\u95a2\u6570\u304c\u5b9f\u884c\u3059\u308b\u306e\u3092\u8a31\u3059\u3001\u3068\u3044\u3046\u3053\u3068\u3060\u3002\n\"\u9045\u5ef6 sequence\"\u306f\u5fc5\u8981\u306b\u306a\u308b\u307e\u3067\u8a08\u7b97\u3055\u308c\u306a\u3044\u3082\u306e\u306e\u96c6\u307e\u308a\u3060\u3002\n\u3053\u308c\u306f\u7121\u9650\u30b3\u30ec\u30af\u30b7\u30e7\u30f3\u307f\u305f\u3044\u306e\u3092\u4f5c\u308b\u306e\u3092\u5bb9\u6613\u306b\u3059\u308b\u3088\u3002\n\nClojure code is processed in three phases: read-time, compile-time and run-time. \nAt read-time the Reader reads source code and converts it to a data structure, mostly a list of lists of lists. \nAt compile-time this data structure is converted to Java bytecode. \nAt run-time the bytecode is executed. \nFunctions are only invoked at run-time. \nMacros are special constructs whose invocation looks similar to that of functions, but are expanded into new Clojure code at compile-time.\n\nClojure\u306e\u30b3\u30fc\u30c9\u306f\uff13\u3064\u306e\u6bb5\u968e\u3092\u7d4c\u3066\u5b9f\u884c\u3055\u308c\u308b\u3002\n\n\u8aad\u307f\u53d6\u308a\u6642\n\u30b3\u30f3\u30d1\u30a4\u30eb\u6642\n\u30e9\u30f3\u30bf\u30a4\u30e0\u6642\n\n\u8aad\u307f\u53d6\u308a\u6642\u3068\u3044\u3046\u306e\u306f\u3001Clojure\u306e\u30ea\u30fc\u30c0\u304c\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u3092\u3088\u307f\u3001\u30ea\u30b9\u30c8\u306e\u30ea\u30b9\u30c8\u306e\u30ea\u30b9\u30c8\u3068\u3044\u3046\u30c7\u30fc\u30bf\u69cb\u9020\u306b\u5909\u63db\u3059\u308b\u3068\u304d\u306e\u3053\u3068\u3060\u3002\n\u30b3\u30f3\u30d1\u30a4\u30eb\u6642\u3068\u3044\u3046\u306e\u306f\u3001\u3053\u306e\u30c7\u30fc\u30bf\u69cb\u9020\u3092Java\u306e\u30d0\u30a4\u30c8\u30b3\u30fc\u30c9\u306b\u5909\u63db\u3059\u308b\u3068\u304d\u306e\u3053\u3068\u3002\n\u30e9\u30f3\u30bf\u30a4\u30e0\u3001\u3068\u3044\u3046\u306e\u306f\u8a00\u308f\u305a\u3082\u304c\u306a\u3001\u5b9f\u884c\u3058\u306e\u3053\u3068\u3060\u3002\n\u95a2\u6570\u306f\u3001\u30e9\u30f3\u30bf\u30a4\u30e0\u3067\u306e\u307f\u5b9f\u884c\u3055\u308c\u308b\u3002\n\u30de\u30af\u30ed\u306f\u3001\u4e00\u898b\u95a2\u6570\u3068\u540c\u3058\u3088\u3046\u306b\u5b9f\u884c\u3055\u308c\u308b\u3088\u3046\u306b\u898b\u3048\u308b\u304c\u3001\u30b3\u30f3\u30d1\u30a4\u30eb\u6642\u306b\u65b0\u3057\u304fClojure\u306e\u30b3\u30fc\u30c9\u3068\u3057\u3066\u5c55\u958b\u3055\u308c\u308b\u3001\u7279\u5225\u306a\u69cb\u9020\u3092\u6301\u3063\u305f\u3082\u306e\u3060\u3002\n\nIs Clojure code hard to understand? \nImagine if every time you read Java source code and encountered syntax elements like if statements, for loops, and anonymous classes, you had to pause and puzzle over what they mean.\n\nClojure\u306e\u30b3\u30fc\u30c9\u3092\u7406\u89e3\u3059\u308b\u306e\u304c\u96e3\u3057\u3044\u3063\u3066\uff1f\n\u30b9\u30c6\u30fc\u30c8\u30e1\u30f3\u30c8\u30b3\u30fc\u30c9\u3001for\u30eb\u30fc\u30d7\u3001\u3088\u304f\u308f\u304b\u3093\u306a\u3044\u30af\u30e9\u30b9\u3001\u307f\u305f\u3044\u306a\u3001Java\u306e\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u3092\u8aad\u3093\u3067\u308b\u6642\u306b\u906d\u9047\u3059\u308b\u69cb\u6587\u8981\u7d20\u306e\u3053\u3068\u3092\u60f3\u50cf\u3057\u3066\u307f\u306a\u3088\u3002\n\u3042\u306a\u305f\u306f\u3001\u4e00\u65e6\u7acb\u3061\u6b62\u307e\u308a\u3001\u305d\u308c\u3089\u304c\u306a\u306b\u3092\u610f\u5473\u3057\u3066\u3044\u308b\u306e\u304b\u3044\u3061\u3044\u3061\u8003\u3048\u306a\u304d\u3083\u3044\u3051\u306a\u3044\u3067\u3057\u3087\u3002\n\nThere are certain things that must be obvious to a person who wants to be a productive Java developer. \nLikewise there are parts of Clojure syntax that must be obvious for one to efficiently read and understand code. \nExamples include being comfortable with the use of let, apply, map, filter, reduce and anonymous functions ... all of which are described later.\n\n\u305d\u308c\u306f\u751f\u7523\u7684\u3067\u3042\u308a\u305f\u3044Java\u306e\u958b\u767a\u8005\u306b\u3068\u3063\u3066\u3001\u6df1\u523b\u306a\u554f\u984c\u3067\u3042\u308b\u3053\u3068\u306f\u660e\u767d\u3060\u3088\u306d\u3002\nClojure\u306e\u30b7\u30f3\u30bf\u30c3\u30af\u30b9\u3082\u540c\u69d8\u306b\u8003\u3048\u306a\u304d\u3083\u3044\u3051\u306a\u3044\u3051\u3069\u3001\u305d\u308c\u304c\u5bc4\u308a\u52b9\u679c\u7684\u306b\u8aad\u307f\u9032\u3081\u308b\u3053\u3068\u304c\u3067\u304d\u3066\u3001\u30b3\u30fc\u30c9\u306e\u610f\u5473\u3092\u7406\u89e3\u3057\u3084\u3059\u3044\u3053\u3068\u306f\u660e\u767d\u3055\u3002\nlet, apply, map, filter, reduce, \u305d\u306e\u4ed6\u306e\u95a2\u6570...\u3053\u308c\u3089\u304c\u3069\u3093\u306a\u306b\u5feb\u9069\u306a\u3082\u306e\u306a\u306e\u304b\u3001\u3063\u3066\u3044\u3046\u3053\u3068\u306e\u5b9f\u4f8b\u306f\u3001\u3053\u308c\u304b\u3089\u8aac\u660e\u3057\u3066\u3044\u304f\u3088\u3093\uff01\n\nhttp://java.ociweb.com/mark/clojure/article.html\n\n\u81ea\u5206\u304c\u8aad\u307f\u305f\u3044\u3068\u3053\u308d\u3057\u304b\u8a33\u3055\u306a\u3044\u3067\u3059\u3002\n\n##Functional Programming\n\n> Functional programming is a style of programming that emphasizes \"first-class\" functions that are \"pure\". \nIt was inspired by ideas from the lambda calculus.\n\n\u95a2\u6570\u578b\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u306f\u95a2\u6570\u304c\u7b2c\u4e00\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3067\u3042\u308a\u3001\u304b\u3064\u7d14\u7c8b\u3067\u3042\u308b\u3053\u3068\u3092\u5f37\u8abf\u3059\u308b\u3088\u3002\u30e9\u30e0\u30c0\u8a08\u7b97\u306b\u5f71\u97ff\u53d7\u3051\u3066\u308b\u3088\u3002\n\n> \"Pure functions\" are functions that always return the same result when passed the same arguments, as opposed to depending on state that can change with time.\n\n\u300c\u7d14\u7c8b\u306a\u95a2\u6570\u300d\u3068\u306f\u540c\u3058\u5f15\u6570\u3092\u3068\u3063\u305f\u3089\u3001\u3044\u3064\u3082\u540c\u3058\u7d50\u679c\u3092\u8fd4\u3059\u3068\u3044\u3046\u3053\u3068\u3060\u3088\u3001\u30bf\u30a4\u30df\u30f3\u30b0\u306b\u3088\u3063\u3066\u5909\u3048\u3089\u308c\u308b\u3088\u3046\u306a\u72b6\u614b\u306b\u4f9d\u5b58\u3057\u306a\u3044\u304b\u305f\u3061\u3067\u306d\u3002\n\n> This makes them much easier to understand, debug and test. \n\n\u3053\u306e\u6027\u8cea\u306b\u3088\u3063\u3066\u7406\u89e3\u3068\u30c7\u30d0\u30c3\u30b0\u3068\u30c6\u30b9\u30c8\u304c\u7c21\u5358\u306b\u306a\u308b\u3088\n\n> They have no side effects such as changing global state or performing any kind of I/O, including file I/O and database updates. \n\n\u30b0\u30ed\u30fc\u30d0\u30eb\u306a\u72b6\u614b\u3084\u3001\u5165\u51fa\u529b(\u30d5\u30a1\u30a4\u30eb\u3068\u304bDB\u3068\u304b)\u306b\u5bfe\u3057\u3066\u3001\u526f\u4f5c\u7528\u304c\u306a\u3044\u3063\u3066\u3053\u3068\u3060\u3088\n\n> State is maintained in the values of function parameters saved on the stack (often placed there by recursive calls) rather than in global variables saved on the heap.\n\n\u72b6\u614b\u3001\u306f\u95a2\u6570\u306e\u5024\u3068\u3057\u3066\u30b9\u30bf\u30c3\u30af\u306b\u4fdd\u5b58\u3055\u308c\u308b\u3088\n\u4e3b\u306b\u305d\u308c\u306f\u518d\u5e30\u547c\u3073\u51fa\u3057\u3060\u3088\n\u30d2\u30fc\u30d7\u306b\u306f\u4fdd\u5b58\u3057\u306a\u304f\u3066\u3088\u3044\u3093\u3060\u3088\n\n> This allows functions to be executed repeatedly without affecting global state (an important characteristic to consider when transactions are discussed later). \n\n\u3053\u306e\u7279\u5fb4\u306f\u95a2\u6570\u306e\u5b9f\u884c\u3092\u4f55\u5ea6\u3082\u3067\u304d\u308b\u30b0\u30ed\u30fc\u30d0\u30eb\u306aState\u306b\u4f9d\u5b58\u3057\u306a\u3044\u3067\u306d\n\n> It also opens the door for smart compilers to improve performance by automatically reordering and parallelizing code, although the latter is not yet common.\n\n\u305d\u308c\u306b\u3088\u3063\u3066\u3001\u30b3\u30f3\u30d1\u30a4\u30e9\u304c\u81ea\u52d5\u7684\u306b\u4e26\u5217\u5b9f\u884c\u30b3\u30fc\u30c9\u3068\u3057\u3066\u30d1\u30d5\u30a9\u30fc\u30de\u30f3\u30b9\u6700\u9069\u5316\u3057\u3066\u304f\u308c\u308b\u304b\u3089\u3055\u3002\u305d\u3093\u306a\u3059\u3050\u3067\u304d\u308b\u3082\u3093\u3067\u3082\u306a\u3044\u3093\u3060\u3051\u3069\u3002\n\n> Data in functional programming languages is typically immutable.\n\n\u95a2\u6570\u578b\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u306f\u4e00\u822c\u7684\u306b\u3001\u30a4\u30df\u30e5\u30fc\u30bf\u30d6\u30eb\u3002\n\n> This allows data to be accessed concurrently from multiple threads without locking. \n> There's no need to lock data that can't be changed. \n\n\u3053\u308c\u306b\u3088\u3063\u3066\u3001\u30c7\u30fc\u30bf\u30ed\u30c3\u30af\u306a\u3057\u306b\u3001\u30de\u30eb\u30c1\u30b9\u30ec\u30c3\u30c9\u306b\u3088\u308b\u3001\u30c7\u30fc\u30bf\u3078\u306e\u4e26\u884c\u7684\u306a\u30a2\u30af\u30bb\u30b9\u3092\u53ef\u80fd\u306b\u3059\u308b\u3088\u3002\n\u30c7\u30fc\u30bf\u306f\u5909\u3048\u3089\u308c\u306a\u3044\uff08\u30a4\u30df\u30e5\u30fc\u30bf\u30d6\u30eb\uff09\u3060\u304b\u3089\u3001\u30ed\u30c3\u30af\u3059\u308b\u5fc5\u8981\u306a\u3093\u3066\u306a\u3044\u3093\u3060\u3002\n\n> With multicore processors becoming prevalent, this simplification of programming for concurrency is perhaps the biggest benefit of functional programming.\n\n\u4e26\u5217\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u306b\u95a2\u3059\u308b\u5358\u7d14\u3067\u3001\u3067\u3082\u6700\u3082\u95a2\u6570\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u306e\u6069\u6075\u3067\u3082\u3042\u308b\u3053\u306e\u7279\u5fb4\u306b\u3088\u3063\u3066\u3001\u30de\u30eb\u30c1\u30b3\u30a2\u30d7\u30ed\u30bb\u30b9\u3092\u5229\u7528\u3057\u305f\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u304c\u3082\u3063\u3068\u4e00\u822c\u7684\u306b\u306a\u3063\u3066\u3044\u304f\u3088\u306d\u3002\n\n\n##Clojure Overview\n> Clojure is a dynamically-typed, functional language that runs on the JVM and provides interopareability with Java.\n\nClojure\u306f\u3001\n\n- \u52d5\u7684\u578b\u4ed8\u3051\u3067\n- \u95a2\u6570\u578b\u3067\n- JVM\u4e0a\u3067\u52d5\u3044\u3066\u3001\n- Java\u3068\u306e\u76f8\u4e92\u5229\u7528\u6027\u3092\u6301\u3063\u305f\n\n\u8a00\u8a9e\u3060\u3088\u3002\n\n> A major goal of the language is to make it easier to implement applications that access data from multiple threads(concurrency)\n\n\u3053\u306e\u8a00\u8a9e\u306e\u5927\u304d\u306a\u76ee\u6a19\u306f\u3001\u4e26\u884c\u6027\u3001\u4e26\u5217\u6027\u306b\u95a2\u3057\u3066\u7c21\u5358\u306b\u3059\u308b\u3053\u3068\u3002\n\n> Clojure is pronounced that same as the word \"closure\".\nClojure \u306f\u3000\u30af\u30ed\u30fc\u30b8\u30e3 \u3063\u3066\u8aad\u3093\u3067\u306d\n\n> the creator of the language, Rick Hickey explains the name this way :\"I wanted to involve C(C#),L(Lisp), andJ(Java). Once Icame up with Clojure, given the punon clocure, the acailable domains and vast enptiness of the google space, it was an easy decision.\"\n\n\u8a00\u8a9e\u958b\u767a\u8005\u3067\u3042\u308bRick Hickey\u306f\u3053\u3046\u8a00\u3063\u3066\u308b\u3002\n\u300c\u50d5\u306f\u3001C(C#),L(Lisp), and J(Java)\u3092\u542b\u3080\u3088\u3046\u306a\u5358\u8a9e\u306b\u3057\u305f\u304b\u3063\u305f\u3093\u3060\u3002punon clocure\u3068\u3044\u3046\u8a00\u8449\u304b\u3089\u4e00\u5ea6Clojure\u3068\u3044\u3046\u540d\u524d\u3092\u601d\u3044\u3064\u3044\u305f\u3089\u3001\u30b0\u30b0\u30e9\u30d3\u30ea\u30c6\u30a3\u3082\u826f\u304b\u3063\u305f\u3057\u3001\u30bd\u30c3\u30b3\u30fc\u6c7a\u3081\u305f\u3088\u306d\u3002\u300d\n\n> Clojure is also available for the .NET platform. ClojureCLR is an implementation of Clojure that runs on the Microsoft Common Language Runtime instead of the JVM. See [https://github.com/clojure/clojure-clr](https://github.com/clojure/clojure-clr).\n\nClojure\u306f.NET\u3067\u3082\u52d5\u304f\u3088\u3002\n\n> In July 2011, ClojureScript was announced. It compiles Clojure code to JavaScript. See [https://github.com/clojure/clojurescript](https://github.com/clojure/clojurescript).\n\nClojureScript\u3063\u3066\u3044\u3046AltJS\u7684\u306a\u3084\u3064\u3082\u3042\u308b\u3088\u3002\n\n> Clojure is an open source language released under the Eclipse Public License v 1.0 (EPL). This is a very liberal license. See http://www.eclipse.org/legal/eplfaq.php for more information.\n\nClojure\u306fEclipse Public Licence v1.0\u3067\u3059\u3088\u3002\n\n> Running on the JVM provides portability, stability, performance and security.\n>  It also provides access to a wealth of existing Java libraries supporting functionality including file I/O, multithreading, database access, GUIs, web applications, and much more.\n\nJVM\u4e0a\u3067\u52d5\u304f\u3063\u3066\u3053\u3068\u306f\u3001\n\n- \u74b0\u5883\u79fb\u690d\u6027\n- \u5b89\u5b9a\u6027\n- \u30d1\u30d5\u30a9\u30fc\u30de\u30f3\u30b9\n- \u30bb\u30ad\u30e5\u30ea\u30c6\u30a3\u30fc\n\n\u3092\u63d0\u4f9b\u3067\u304d\u308b\u3063\u3066\u3053\u3068\u3084\u3002\n\u305d\u3057\u3066\u3001\u5e78\u3044\u306a\u4e8b\u306b\u305d\u308c\u306f\u3001\u65e2\u5b58\u306eJava\u306e\u30e9\u30a4\u30d6\u30e9\u30ea\u306e\u6a5f\u80fd\u3001file I/O, \u30de\u30eb\u30c1\u30b9\u30ec\u30c3\u30c7\u30a3\u30f3\u30b0\u3001\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u30a2\u30af\u30bb\u30b9\u3001GUI\u30e9\u30a4\u30d6\u30e9\u30ea\u3001web\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u3001\u3068\u304b\u3001\u8272\u3005\u306b\u30a2\u30af\u30bb\u30b9\u3067\u304d\u308b\u3063\u3066\u3053\u3068\u3082\u3082\u305f\u3089\u3057\u3066\u304f\u308c\u3066\u308b\u3063\u3061\u3085\u3046\u308f\u3051\u3084\u3002\n\n\n> Each \"operation\" in Clojure is implemented as either a function, macro or special form.\n>  Nearly all functions and macros are implemented in Clojure source code. \n> The differences between functions and macros are explained later. \n\nClojure\u306b\u304a\u3051\u308b\u305d\u308c\u305e\u308c\u306e\u64cd\u4f5c\u306f\u3001\u95a2\u6570\u3001\u30de\u30af\u30ed\u3001\u7279\u6b8a\u5f62\u5f0f\u3068\u3057\u3066\u5b9f\u88c5\u3055\u308c\u308b\u3084\u3067\u3002\n\u307b\u3068\u3093\u3069\u5168\u3066\u306e\u95a2\u6570\u3068\u30de\u30af\u30ed\u306f\u3001Clojure\u306e\u30bd\u30fc\u30b9\u3068\u3057\u3066\u5b9f\u88c5\u3055\u308c\u308b\u3082\u306e\u3002\n\u30de\u30af\u30ed\u3068\u95a2\u6570\u306e\u9055\u3044\u306b\u3064\u3044\u3066\u306f\u3042\u3068\u3067\u8aac\u660e\u3059\u308b\u3084\u3067\u3002\n\n> Special forms are recognized by the Clojure compiler and not implemented in Clojure source code.\n\n\u7279\u6b8a\u5f62\u5f0f\u306f\u3001\u30af\u30ed\u30fc\u30b8\u30e3\u306e\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u3068\u3057\u3066\u306f\u5b9f\u88c5\u3055\u308c\u306a\u3044\u3082\u306e\u3067\u3001Clojure\u306e\u30b3\u30f3\u30d1\u30a4\u30e9\u304c\u8a8d\u8b58\u3059\u308b\u3082\u306e\u306a\u3093\u3084\u3002\n\n> There are a relatively small number of special forms and new ones cannot be implemented. \n> They include catch, def, do, dot ('.'), finally, fn, if, let, loop, monitor-enter, monitor-exit, new, quote, recur, set!, throw, try and var.\n\n\u5c11\u6570\u306e\u7279\u6b8a\u5f62\u5f0f\u304c\u3042\u3063\u3066\u3001\u7279\u6b8a\u5f62\u5f0f\u306f\u65b0\u3057\u304f\u4f5c\u308b\u3053\u3068\u304c\u3067\u304d\u306a\u3044\u3002\n\u4f8b\u3048\u3070\u3001```catch, def, do, dot ('.'), finally, fn, if, let, loop, monitor-enter,\n monitor-exit, new, quote, recur, set!, throw, try and var```\u307f\u305f\u3044\u306a\u3082\u306e\u304c\u305d\u3046\u3060\u3002\n\n\n> Clojure provides many functions that make it easy to operate on \"sequences\" which are logical views of collections. \n> Many things can be treated as sequences. \n\nClojure\u306f\u3001\u30b3\u30ec\u30af\u30b7\u30e7\u30f3\u306e\u8ad6\u7406\u7684\u306a\u898b\u65b9\u3067\u69cb\u6210\u3055\u308c\u305f\u3001\"sequence\"\u3068\u3044\u3046\u3082\u306e\u306b\u304a\u3044\u3066\u7c21\u5358\u306b\u64cd\u4f5c\u3067\u304d\u308b\u6ca2\u5c71\u306e\u95a2\u6570\u3092\u63d0\u4f9b\u3057\u3066\u3044\u308b\u3002\n\u591a\u304f\u306e\u3082\u306e\u306fsequence\u3068\u3057\u3066\u6271\u308f\u308c\u308b\u3002\n\n> These include Java collections, Clojure-specific collections, strings, streams, directory structures and XML trees. \n> New instances of Clojure collections can be created from existing ones in an efficient manner because they are persistent data structures.\n\n\u305d\u308c\u306f\u3001Java\u306e\u30b3\u30ec\u30af\u30b7\u30e7\u30f3\u578b\u3001Clojure-specific\u306a\u30b3\u30ec\u30af\u30b7\u30e7\u30f3\u578b\u3001\u6587\u5b57\u5217\u3001\u30b9\u30c8\u30ea\u30fc\u30e0\u3001\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u69cb\u9020\u3001XML\u30c4\u30ea\u30fc\u306a\u3093\u304b\u3092\u542b\u3080\u3002\n\u5805\u7262\u306a\u30c7\u30fc\u30bf\u578b\u3067\u3042\u308b\u304b\u3069\u3046\u304b\u3001\u3068\u3044\u3046\u52b9\u679c\u7684\u306a\u6c7a\u307e\u308a\u4e8b\u306b\u5f93\u3063\u3066\u3001Clojure\u306e\u65b0\u3057\u3044\u30b3\u30ec\u30af\u30b7\u30e7\u30f3\u578b\u306f\u4f5c\u308b\u3053\u3068\u304c\u3067\u304d\u308b\u3002\n\n> Clojure provides three ways of safely sharing mutable data, all of which use mutable references to immutable data.\n\nClojure \u306f\u5168\u3066\u306e\u30a4\u30df\u30e5\u30fc\u30bf\u30d6\u30eb\u306a\u30c7\u30fc\u30bf\u306e\u30df\u30e5\u30fc\u30bf\u30d6\u30eb\u306a\u53c2\u7167\u306b\u95a2\u3057\u3066\u3001\u5b89\u5168\u306a\uff13\u3064\u306e\u65b9\u6cd5\u3092\u63d0\u4f9b\u3057\u3066\u3044\u308b\u3002\n\n> Refs provide synchronous access to multiple pieces of shared data (\"coordinated\") by using Software Transactional Memory (STM). \n\n\u300c\u30ec\u30d5(Ref)\u300d\u306f\u3001\u30c7\u30fc\u30bf\u306e\u3044\u304f\u3064\u304b\u306e\u96c6\u307e\u308a\u306b\u540c\u671f\u7684\u306b\u30a2\u30af\u30bb\u30b9\u3059\u308b\u65b9\u6cd5\u3092\u3001\u30bd\u30d5\u30c8\u30a6\u30a7\u30a2\u30c8\u30e9\u30f3\u30b6\u30af\u30b7\u30e7\u30f3\u30e1\u30e2\u30ea\u3092\u7528\u3044\u3066\u63d0\u4f9b\u3059\u308b\u3002\n\n> Atoms provide synchronous access to a single piece of shared data. \n\n\u300c\u30a2\u30c8\u30e0\u300d\u306f\u3072\u3068\u3064\u306e\u30b7\u30a7\u30a2\u3055\u308c\u305f\u30c7\u30fc\u30bf\u306b\u540c\u671f\u7684\u306b\u30a2\u30af\u30bb\u30b9\u3059\u308b\u65b9\u6cd5\u3068\u3057\u3066\u63d0\u4f9b\u3055\u308c\u308b\u3002\n\n> Agents provide asynchronous access to a single piece of shared data. \n\n\u300c\u30a8\u30fc\u30b8\u30a7\u30f3\u30c8\u300d\u306f\u3001\u3072\u3068\u3064\u306e\u30b7\u30a7\u30a2\u3055\u308c\u305f\u30c7\u30fc\u30bf\u306b\u975e\u540c\u671f\u7684\u306b\u30a2\u30af\u30bb\u30b9\u3059\u308b\u65b9\u6cd5\u3068\u3057\u3066\u63d0\u4f9b\u3055\u308c\u308b\u3002\n\n> These are discussed in more detail in the \"Reference Types\" section.\n\n\u3053\u308c\u3089\u306b\u3064\u3044\u3066\u306f\u3001\u3088\u308a\u8a73\u3057\u304f\u306f \"Reference Types\" \u306e\u9805\u3067\u89e6\u308c\u308b\u3002\n\n> Clojure is a Lisp dialect. \n> However, it makes some departures from older Lisps. \n> For example, older Lisps use the car function to get the first item in a list.\n> Clojure calls this first as does Common Lisp. \n> For a list of other differences, see [http://clojure.org/lisps](http://clojure.org/lisps).\n\nClojure\u306fLisp\u306e\u65b9\u8a00\u3060\u3088\u3002\n\u3060\u3051\u3069\u3001\u3088\u304f\u77e5\u3089\u308c\u305fLisp\u8868\u73fe\u304b\u3089\u767a\u5c55\u3057\u3066\u3044\u308b\u3082\u306e\u3082\u3044\u304f\u3064\u304b\u3042\u308b\u3002\n\u305f\u3068\u3048\u3070\u3001\u3088\u304f\u77e5\u3089\u308c\u305fLisp\u3067\u3044\u3046\u3068\u3053\u308d\u306e```car```\u306f\u3001\u30ea\u30b9\u30c8\u306e\u4e00\u756a\u521d\u3081\u306e\u8981\u7d20\u3092\u53d6\u3063\u3066\u304f\u308b\u95a2\u6570\u3060\u3002\nClojure\u3067\u306f\u3001```first```\u3068\u3044\u3046\u30ad\u30fc\u30ef\u30fc\u30c9\u3067\u305d\u306eCommon Lisp\u306e\u6a5f\u80fd\u3092\u8868\u73fe\u3059\u308b\u3002\u2028\u4ed6\u306e\u9055\u3044\u306b\u3064\u3044\u3066\u306e\u30ea\u30b9\u30c8\u306f\u3001[\u3053\u308c](http://clojure.org/lisps).\u3092\u307f\u3066\u306d\u3002\n\n> Lisp has a syntax that many people love ... and many people hate, mainly due to its use of parentheses and prefix notation. \n> If you tend toward the latter camp, consider these facts. \n\nLisp\u306e\u30b7\u30f3\u30bf\u30c3\u30af\u30b9\u306f\u3001\u591a\u304f\u306e\u4eba\u306b\u611b\u3055\u308c,,,,\u591a\u304f\u306e\u4eba\u306b\u618e\u307e\u308c\u3066\u3044\u308b\u3002\u305d\u308c\u306f\u591a\u304f\u306e\u3068\u3053\u308d\u306f\u3001\u30ab\u30c3\u30b3\u306e\u591a\u7528\u3068\u3001\u524d\u7f6e\u8a18\u6cd5\u306b\u3088\u308b\u3068\u3053\u308d\u304c\u5927\u304d\u3044\u3002\n\u3082\u3057\u3042\u306a\u305f\u304c\u305d\u306e\u4e3b\u5f35\u3092\u63a8\u9032\u3059\u308b\u9663\u55b6\u306a\u306e\u3060\u3068\u3057\u305f\u3089\u3001\u73fe\u5b9f\u306b\u3064\u3044\u3066\u5c11\u3057\u8003\u616e\u3057\u3088\u3046\u3002\n\n\n> Many text editors and IDEs highlight matching parentheses, so it isn't necessary to count them in order to ensure they are balanced. \n\n\u591a\u304f\u306e\u30c6\u30ad\u30b9\u30c8\u30a8\u30c7\u30a3\u30bf\u3001IDE\u3067\u306f\u3001\u30ab\u30c3\u30b3\u306e\u81ea\u52d5\u88dc\u5b8c\u3092\u3057\u3066\u304f\u308c\u308b\u304b\u3089\u3001\u30ab\u30c3\u30b3\u304c\u304d\u3061\u3093\u3068\u9589\u3058\u3066\u3044\u308b\u304b\u3069\u3046\u304b\u3044\u3061\u3044\u3061\u6570\u3048\u308b\u5fc5\u8981\u3068\u3044\u3046\u306e\u306f\u306a\u3044\u3002\n\n> Clojure function calls are less noisy than Java method calls. \n> A Java method call looks like this:\n\nClojure\u306e\u95a2\u6570\u306fJava\u306e\u30e1\u30bd\u30c3\u30c9\u30b3\u30fc\u30eb\u306b\u6bd4\u3079\u3066\u7c21\u6f54\u3060\u3002\nJava\u306e\u30e1\u30bd\u30c3\u30c9\u30b3\u30fc\u30eb\u306f\u3053\u3093\u306a\u304b\u3093\u3058\u3002\n\n```\nmethodName(arg1, arg2, arg3);\n```\n\n> A Clojure function call looks like this:\n\n\u30af\u30ed\u30fc\u30b8\u30e3\u3060\u3068\u3053\u3046\u306a\u308b\u3002\n\n```\n(function-name arg1 arg2 arg3)\n```\n\n\n> The open paren moves to the front and the commas and semicolon disappear. \n> This syntax is referred to as a \"form\". \n> There is simple beauty in the fact that everything in Lisp has this form. \n> Note that the naming convention in Clojure is to use all lowercase with hyphens separating words in multi-word names, unlike the Java convention of using camelcase. \n\n\u30ab\u30c3\u30b3\u306e\u306f\u3058\u307e\u308a\u304c\u3001\u5148\u982d\u306b\u52d5\u304d\u3001\u30b3\u30f3\u30de\u3068\u30bb\u30df\u30b3\u30ed\u30f3\u304c\u6d88\u3048\u53bb\u3063\u305f\uff01\uff01\uff01\uff01\uff01\uff01\uff01\uff01\uff01\uff01\n\u3053\u306e\u30b7\u30f3\u30bf\u30c3\u30af\u30b9\u306f\u201d\u30d5\u30a9\u30fc\u30e0\u201d\u3063\u3066\u547c\u3070\u308c\u308b\u3088\u3002\n\u5168\u3066\u306eLisp\u306f\u3053\u306e\u30d5\u30a9\u30fc\u30e0\u3067\u52d5\u304f\u3088\u306d\u3001\u3063\u3066\u3044\u3046\u4e8b\u5b9f\u306f\u3001\u7c21\u6f54\u306a\u7f8e\u3057\u3055\u3092\u751f\u3080\u3002\nClojure\u3067\u306e\u547d\u540d\u898f\u5247\u306fJava\u306e\u30ad\u30e3\u30e1\u30eb\u30b1\u30fc\u30b9\u3068\u3061\u304c\u3063\u3066\u3001\u5168\u3066\u306e\u540d\u524d\u3092\u5c0f\u6587\u5b57\u3067\u66f8\u3044\u3066\u3001\u30cf\u30a4\u30d5\u30f3\u3067\u5206\u3051\u308b\u3001\u3063\u3066\u3044\u3046\u304b\u3093\u3058\u3002\n\n\n> Defining functions is similarly less noisy in Clojure.\n> The Clojure println function adds a space between the output from each of its arguments. \n> To avoid this, pass the same arguments to the str function and pass its result to println.\n\n\u95a2\u6570\u5b9a\u7fa9\u3082\u540c\u69d8\u306bClojure\u306e\u307b\u3046\u304c\u7c21\u6f54\u3002\nClojure\u306e```println```\u95a2\u6570\u306f\u3001\u51fa\u529b\u3057\u305f\u3044\u9805\u306e\u9593\u306b\u305d\u308c\u305e\u308c\u30b9\u30da\u30fc\u30b9\u3092\u5165\u308c\u308b\u3060\u3051\u3067\u3088\u3044\u3002\n\u3053\u308c\u3092\u6392\u9664\u3059\u308b\u3053\u3068\u306b\u3088\u3063\u3066\u3001\u540c\u3058\u9805\u3092\u6301\u3064\u51fa\u529b\u95a2\u6570\u306fprintln\u3092\u3068\u304a\u308b\n\n```\n// Java\npublic void hello(String name) {\n    System.out.println(\"Hello, \" + name);\n}\n```\n\n```\n; Clojure\n(defn hello [name]\n  (println \"Hello,\" name))\n```\n\n> Clojure makes heavy use of lazy evaluation. \n> This allows functions to be invoked only when their result is needed. \n> \"Lazy sequences\" are collections of results that are not computed until needed. \n> This supports the efficient creation of infinite collections.\n\nClojrue\u306f\u9045\u5ef6\u8a55\u4fa1\u3092\u591a\u7528\u3059\u308b\u3002\n\u3053\u308c\u306f\u305d\u306e\u5024\u304c\u5fc5\u8981\u306b\u306a\u3063\u305f\u6642\u306b\u305d\u306e\u95a2\u6570\u304c\u5b9f\u884c\u3059\u308b\u306e\u3092\u8a31\u3059\u3001\u3068\u3044\u3046\u3053\u3068\u3060\u3002\n\"\u9045\u5ef6 sequence\"\u306f\u5fc5\u8981\u306b\u306a\u308b\u307e\u3067\u8a08\u7b97\u3055\u308c\u306a\u3044\u3082\u306e\u306e\u96c6\u307e\u308a\u3060\u3002\n\u3053\u308c\u306f\u7121\u9650\u30b3\u30ec\u30af\u30b7\u30e7\u30f3\u307f\u305f\u3044\u306e\u3092\u4f5c\u308b\u306e\u3092\u5bb9\u6613\u306b\u3059\u308b\u3088\u3002\n\n> Clojure code is processed in three phases: read-time, compile-time and run-time. \n> At read-time the Reader reads source code and converts it to a data structure, mostly a list of lists of lists. \n> At compile-time this data structure is converted to Java bytecode. \n> At run-time the bytecode is executed. \n> Functions are only invoked at run-time. \n> Macros are special constructs whose invocation looks similar to that of functions, but are expanded into new Clojure code at compile-time.\n\nClojure\u306e\u30b3\u30fc\u30c9\u306f\uff13\u3064\u306e\u6bb5\u968e\u3092\u7d4c\u3066\u5b9f\u884c\u3055\u308c\u308b\u3002\n\n- \u8aad\u307f\u53d6\u308a\u6642\n- \u30b3\u30f3\u30d1\u30a4\u30eb\u6642\n- \u30e9\u30f3\u30bf\u30a4\u30e0\u6642\n\n\u8aad\u307f\u53d6\u308a\u6642\u3068\u3044\u3046\u306e\u306f\u3001Clojure\u306e\u30ea\u30fc\u30c0\u304c\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u3092\u3088\u307f\u3001\u30ea\u30b9\u30c8\u306e\u30ea\u30b9\u30c8\u306e\u30ea\u30b9\u30c8\u3068\u3044\u3046\u30c7\u30fc\u30bf\u69cb\u9020\u306b\u5909\u63db\u3059\u308b\u3068\u304d\u306e\u3053\u3068\u3060\u3002\n\u30b3\u30f3\u30d1\u30a4\u30eb\u6642\u3068\u3044\u3046\u306e\u306f\u3001\u3053\u306e\u30c7\u30fc\u30bf\u69cb\u9020\u3092Java\u306e\u30d0\u30a4\u30c8\u30b3\u30fc\u30c9\u306b\u5909\u63db\u3059\u308b\u3068\u304d\u306e\u3053\u3068\u3002\n\u30e9\u30f3\u30bf\u30a4\u30e0\u3001\u3068\u3044\u3046\u306e\u306f\u8a00\u308f\u305a\u3082\u304c\u306a\u3001\u5b9f\u884c\u3058\u306e\u3053\u3068\u3060\u3002\n\u95a2\u6570\u306f\u3001\u30e9\u30f3\u30bf\u30a4\u30e0\u3067\u306e\u307f\u5b9f\u884c\u3055\u308c\u308b\u3002\n\u30de\u30af\u30ed\u306f\u3001\u4e00\u898b\u95a2\u6570\u3068\u540c\u3058\u3088\u3046\u306b\u5b9f\u884c\u3055\u308c\u308b\u3088\u3046\u306b\u898b\u3048\u308b\u304c\u3001\u30b3\u30f3\u30d1\u30a4\u30eb\u6642\u306b\u65b0\u3057\u304fClojure\u306e\u30b3\u30fc\u30c9\u3068\u3057\u3066\u5c55\u958b\u3055\u308c\u308b\u3001\u7279\u5225\u306a\u69cb\u9020\u3092\u6301\u3063\u305f\u3082\u306e\u3060\u3002\n\n\n> Is Clojure code hard to understand? \n> Imagine if every time you read Java source code and encountered syntax elements like if statements, for loops, and anonymous classes, you had to pause and puzzle over what they mean.\n\nClojure\u306e\u30b3\u30fc\u30c9\u3092\u7406\u89e3\u3059\u308b\u306e\u304c\u96e3\u3057\u3044\u3063\u3066\uff1f\n\u30b9\u30c6\u30fc\u30c8\u30e1\u30f3\u30c8\u30b3\u30fc\u30c9\u3001for\u30eb\u30fc\u30d7\u3001\u3088\u304f\u308f\u304b\u3093\u306a\u3044\u30af\u30e9\u30b9\u3001\u307f\u305f\u3044\u306a\u3001Java\u306e\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u3092\u8aad\u3093\u3067\u308b\u6642\u306b\u906d\u9047\u3059\u308b\u69cb\u6587\u8981\u7d20\u306e\u3053\u3068\u3092\u60f3\u50cf\u3057\u3066\u307f\u306a\u3088\u3002\n\u3042\u306a\u305f\u306f\u3001\u4e00\u65e6\u7acb\u3061\u6b62\u307e\u308a\u3001\u305d\u308c\u3089\u304c\u306a\u306b\u3092\u610f\u5473\u3057\u3066\u3044\u308b\u306e\u304b\u3044\u3061\u3044\u3061\u8003\u3048\u306a\u304d\u3083\u3044\u3051\u306a\u3044\u3067\u3057\u3087\u3002\n\n> There are certain things that must be obvious to a person who wants to be a productive Java developer. \n> Likewise there are parts of Clojure syntax that must be obvious for one to efficiently read and understand code. \n> Examples include being comfortable with the use of let, apply, map, filter, reduce and anonymous functions ... all of which are described later.\n\n\u305d\u308c\u306f\u751f\u7523\u7684\u3067\u3042\u308a\u305f\u3044Java\u306e\u958b\u767a\u8005\u306b\u3068\u3063\u3066\u3001\u6df1\u523b\u306a\u554f\u984c\u3067\u3042\u308b\u3053\u3068\u306f\u660e\u767d\u3060\u3088\u306d\u3002\nClojure\u306e\u30b7\u30f3\u30bf\u30c3\u30af\u30b9\u3082\u540c\u69d8\u306b\u8003\u3048\u306a\u304d\u3083\u3044\u3051\u306a\u3044\u3051\u3069\u3001\u305d\u308c\u304c\u5bc4\u308a\u52b9\u679c\u7684\u306b\u8aad\u307f\u9032\u3081\u308b\u3053\u3068\u304c\u3067\u304d\u3066\u3001\u30b3\u30fc\u30c9\u306e\u610f\u5473\u3092\u7406\u89e3\u3057\u3084\u3059\u3044\u3053\u3068\u306f\u660e\u767d\u3055\u3002\n```let, apply, map, filter, reduce, \u305d\u306e\u4ed6\u306e\u95a2\u6570...```\u3053\u308c\u3089\u304c\u3069\u3093\u306a\u306b\u5feb\u9069\u306a\u3082\u306e\u306a\u306e\u304b\u3001\u3063\u3066\u3044\u3046\u3053\u3068\u306e\u5b9f\u4f8b\u306f\u3001\u3053\u308c\u304b\u3089\u8aac\u660e\u3057\u3066\u3044\u304f\u3088\u3093\uff01\n", "tags": ["Clojure"]}