{"tags": ["spring", "spring-boot", "Java"], "context": "\u4eca\u56de\u306f\u3001Spring\u304c\u63d0\u4f9b\u3057\u3066\u3044\u308bAbstractRoutingDataSource + Spring AOP\u3092\u5229\u7528\u3057\u3066\u3001\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u30ec\u30a4\u30e4\u3067\u30b7\u30e3\u30fc\u30c7\u30a3\u30f3\u30b0\u3063\u307d\u3044\u3053\u3068\u3092\u5b9f\u73fe\u3059\u308b\u65b9\u6cd5\u3092\u7d39\u4ecb\u3057\u307e\u3059\u3002\n\u30b7\u30e3\u30fc\u30c7\u30a3\u30f3\u30b0\u306f\u30c7\u30fc\u30bf\u3092\u8907\u6570\u306e\u30b5\u30fc\u30d0\u306b\uff08\u900f\u904e\u7684\u306b\uff1f\uff09\u5206\u6563\u3055\u305b\u308b\u6a5f\u80fd\u306e\u3053\u3068\u3067\u3001\u8ca0\u8377\u5206\u6563\u306b\u3088\u308b\u6027\u80fd\u5411\u4e0a\u3084\u30ea\u30bd\u30fc\u30b9\u5206\u6563\u306b\u3088\u308b\u30b3\u30b9\u30c8\u30d1\u30d5\u30a9\u30fc\u30de\u30f3\u30b9\u5411\u4e0a\u306a\u3069\u3092\u76ee\u7684\u306b\u4f7f\u3044\u307e\u3059\u3002\u672c\u30a8\u30f3\u30c8\u30ea\u30fc\u3067\u306f\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u30ec\u30a4\u30e4\u3067\u30b7\u30e3\u30fc\u30c7\u30a3\u30f3\u30b0\u3063\u307d\u3044\u3053\u3068\u3092\u5b9f\u73fe\u3059\u308b\u65b9\u6cd5\u3092\u7d39\u4ecb\u3057\u307e\u3059\u304c\u3001RDBMS\u3001NoSQL\u3001KVS\u306a\u3069\u81ea\u4f53\u306b\u30b7\u30e3\u30fc\u30c7\u30a3\u30f3\u30b0\u6a5f\u80fd\u3092\u3082\u3063\u3066\u3044\u308b\u3053\u3068\u3082\u591a\u3044\u305f\u3081\u3001\u307e\u305a\u306f\u30a4\u30f3\u30d5\u30e9\u30b9\u30c8\u30e9\u30af\u30c1\u30e3\u30ec\u30a4\u30e4\u3067\u30b7\u30e3\u30fc\u30c7\u30a3\u30f3\u30b0\u3092\u5b9f\u73fe\u3059\u308b\u65b9\u6cd5\u3092\u691c\u8a0e\u3059\u308b\u65b9\u304c\u3088\u3044\u3068\u601d\u3044\u307e\u3059\uff01\uff01\n\n\u52d5\u4f5c\u691c\u8a3c\u30d0\u30fc\u30b8\u30e7\u30f3\n\nSpring Boot 1.5.1.RELEASE\nSpring Framework 4.3.6.RELEASE\nH2 Database 1.4.193\n\n\n\uff08\u306a\u3093\u3061\u3083\u3063\u3066\uff09\u30b7\u30e3\u30fc\u30c7\u30a3\u30f3\u30b0\u8981\u4ef6\n\u30e6\u30fc\u30b6\u30a2\u30ab\u30a6\u30f3\u30c8\u306e\u300c\u30a2\u30ab\u30a6\u30f3\u30c8ID\uff0810\u6841\u56fa\u5b9a\uff09\u300d\u306e\u672b\u5c3e\uff11\u6841\u6bce\u306b\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u3092\u7528\u610f\u3057\u3066\u3001\u30a2\u30ab\u30a6\u30f3\u30c8\u306b\u7d10\u3065\u304f\u30c7\u30fc\u30bf\u3078\u306e\u30a2\u30af\u30bb\u30b9\u3092\u8ca0\u8377\u5206\u6563\u3059\u308b\u3002\uff08\u5b8c\u5168\u306b\u306a\u3093\u3061\u3083\u3063\u3066\u8981\u4ef6\u306a\u306e\u3067\u3001\u5b9f\u969b\u306e\u30b7\u30e3\u30fc\u30c7\u30a3\u30f3\u30b0\u8981\u4ef6\u3092\u6c7a\u3081\u308b\u3068\u304d\u306e\u53c2\u8003\u306b\u3057\u306a\u3044\u3067\u306d \uff09\n\u7d75\u306b\u3059\u308b\u5fc5\u8981\u306f\u306a\u3044\u3051\u3069\u30fb\u30fb\u30fb\u2193\u306e\u3088\u3046\u306a\u611f\u3058\u3067\u3059\uff08\u7121\u99c4\u306b\u7d75\u306b\u3057\u3066\u307f\u308b\uff09\u3002\n\n\nAbstractRoutingDataSource\u3068Spring AOP\u3092\u4f7f\u7528\u3057\u305f\u900f\u904e\u7684\u306aDataSource\u306e\u5207\u66ff\u65b9\u6cd5\n\u3055\u301c\uff08\u306a\u3093\u3061\u3083\u3063\u3066\uff09\u30b7\u30e3\u30fc\u30c7\u30a3\u30f3\u30b0\u8981\u4ef6\u3092\u3069\u3046\u3084\u3063\u3066\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u306b\u7d44\u307f\u8fbc\u3080\u304b\u8003\u3048\u3066\u307f\u307e\u3057\u3087\u3046\uff01\uff01\n\u3071\u3063\u3068\u601d\u3044\u3064\u304f\u306e\u306f\u30fb\u30fb\u30fbMap\u3092\u4f7f\u3063\u3066\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u540d\u3068DataSource\u3092\u7d10\u4ed8\u3051\u3066\u304a\u3044\u3066\u3001DB\u30a2\u30af\u30bb\u30b9\u3059\u308b\u969b\u306b\u30a2\u30ab\u30a6\u30f3\u30c8ID\u306b\u5bfe\u5fdc\u3059\u308bDataSource\u3092Map\u304b\u3089\u53d6\u5f97\u3059\u308b\u65b9\u6cd5\u3067\u3057\u3087\u3046\u304b\uff1f\n\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u3067\u8868\u73fe\u3059\u308b\u3068\u3001\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u611f\u3058\u306b\u306a\u308a\u307e\u3059\u3002\n\u3071\u3063\u3068\u898b\u554f\u984c\u306a\u3055\u305d\u3046\u306b\u898b\u3048\u307e\u3059\u304c\u3001\u30b5\u30fc\u30d3\u30b9\u30af\u30e9\u30b9\uff08\u30a2\u30d7\u30ea\u306e\u6a5f\u80fd\u8981\u4ef6\u3092\u307f\u305f\u3059\u51e6\u7406\u3092\u63d0\u4f9b\u3059\u308b\u30af\u30e9\u30b9\uff09\u306e\u4e2d\u306b\u300c\u30a2\u30ab\u30a6\u30f3\u30c8ID\u306b\u5bfe\u5fdc\u3059\u308b\u30c7\u30fc\u30bf\u30bd\u30fc\u30b9\u3092\u89e3\u6c7a\u3059\u308b\u300d\u3068\u3044\u3046\u6a5f\u80fd\u8981\u4ef6\u306b\u95a2\u4fc2\u306a\u3044\u51e6\u7406\uff08\uff1d\u975e\u6a5f\u80fd\u8981\u4ef6\u3092\u307f\u305f\u3059\u305f\u3081\u306e\u51e6\u7406\uff09\u304c\u5b9f\u88c5\u3055\u308c\u3066\u3057\u307e\u3063\u3066\u3044\u307e\u3059\u30fb\u30fb\u30fb\u3002\n@Service\npublic class AccountService {\n    private final Map<String, DataSource> dataSources;\n\n    public AccountService(Map<String, DataSource> dataSources) {\n        this.dataSources = dataSources;\n    }\n\n    public void create(String id, String name) {\n        JdbcTemplate jdbcTemplate = new JdbcTemplate(determineDataSource(id));\n        jdbcTemplate.update(\"INSERT INTO account (id, name) VALUES(?,?)\", id, name);\n    }\n\n    public Map<String, Object> find(String id) {\n        JdbcTemplate jdbcTemplate = new JdbcTemplate(determineDataSource(id));\n        return jdbcTemplate.queryForMap(\"SELECT id, name FROM account WHERE id = ?\", id);\n    }\n\n    private DataSource determineDataSource(String id) { // \u6a5f\u80fd\u8981\u4ef6\u306b\u95a2\u4fc2\u306a\u3044\u51e6\u7406\u30fb\u30fb\u30fb\n        String key = \"db\" + Optional.ofNullable(id)\n            .filter(x -> x.length() == 10)\n            .map(x -> x.substring(9)).get();\n        return this.dataSources.get(key);\n    }\n\n}\n\n\u672c\u6765\u3067\u3042\u308c\u3070\u30fb\u30fb\u30fb\u3001\u30b5\u30fc\u30d3\u30b9\u30af\u30e9\u30b9\u306e\u5b9f\u88c5\u3092\u30b7\u30e3\u30fc\u30c7\u30a3\u30f3\u30b0\u306e\u5b9f\u73fe\u65b9\u6cd5\uff08\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u30ec\u30a4\u30e4 vs \u30a4\u30f3\u30d5\u30e9\u30b9\u30c8\u30e9\u30af\u30c1\u30e3\u30ec\u30a4\u30e4\uff09\u306a\u3069\u306b\u4f9d\u5b58\u3055\u305b\u305f\u304f\u306a\u3044\u306f\u305a\u306a\u306e\u3067\u3001\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u5b9f\u88c5\u306b\u306a\u308b\u306e\u304c\u30d9\u30b9\u30c8\u3060\u3068\u601d\u3044\u307e\u3059\u3002\n@Service\npublic class AccountService {\n    private final JdbcTemplate jdbcTemplate;\n\n    public AccountService(JdbcTemplate jdbcTemplate) {\n        this.jdbcTemplate = jdbcTemplate;\n    }\n\n    public void create(String id, String name) {\n        this.jdbcTemplate.update(\"INSERT INTO account (id, name) VALUES(?,?)\", id, name);\n    }\n\n    public Map<String, Object> find(String id) {\n        return this.jdbcTemplate.queryForMap(\"SELECT id, name FROM account WHERE id = ?\", id);\n    }\n\n}\n\n\u4e0a\u8a18\u306e\u3088\u3046\u306a\u5b9f\u88c5\u306b\u3059\u308b\u305f\u3081\u306b\u767b\u5834\u3059\u308b\u306e\u304c\u3001AbstractRoutingDataSource\u3068Spring AOP\u3092\u7d44\u307f\u5408\u308f\u305b\u305f\u65b9\u6cd5\u306b\u306a\u308a\u307e\u3059\u3002\u672c\u30a8\u30f3\u30c8\u30ea\u30fc\u3067\u306f\u3001\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u30af\u30e9\u30b9\u3092\u4f5c\u6210\u3059\u308b\u3053\u3068\u3067\u3001\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u30ec\u30a4\u30e4\u3067\u306e\u30b7\u30e3\u30fc\u30c7\u30a3\u30f3\u30b0\u3092\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\uff08\u30b5\u30fc\u30d3\u30b9\u30af\u30e9\u30b9\uff09\u306b\u5bfe\u3057\u3066\u900f\u904e\u7684\u306b\u7d44\u307f\u8fbc\u3093\u3067\u307f\u307e\u3059\u3002\n\n\nAbstractRoutingDataSource\u306e\u533f\u540d\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\n\nShardKeyStore\u30af\u30e9\u30b9 (\u30b7\u30e3\u30fc\u30c9\u30ad\u30fc\u3092RoutingDataSource\u306b\u9023\u643a\u3059\u308b\u305f\u3081\u306e\u5668)\n\nShardKeyAdvice\u30af\u30e9\u30b9 (\u30b7\u30e3\u30fc\u30c9\u30ad\u30fc\u3092ShardKeyStore\u306b\u683c\u7d0d\u3059\u308bAOP)\n\n\u306a\u304a\u3001\u672c\u30a8\u30f3\u30c8\u30ea\u30fc\u3067\u7d39\u4ecb\u3059\u308b\u5b9f\u73fe\u65b9\u6cd5\u3092\u56f3\u3067\u8868\u73fe\u3059\u308b\u3068\u3001\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u611f\u3058\u306b\u306a\u308a\u307e\u3059\u3002\n\n\n\n\n\u9805\u756a\n\u8aac\u660e\n\n\n\n\n\u2460\nController\u304b\u3089Service\u30af\u30e9\u30b9\u306e\u30e1\u30bd\u30c3\u30c9\u3092\u547c\u3073\u51fa\u3059\u3002\u5b9f\u969b\u306b\u306fProxy\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u30e1\u30bd\u30c3\u30c9\u304c\u547c\u3073\u51fa\u3055\u308c\u3001\u30b7\u30e3\u30fc\u30c9\u30ad\u30fc\u3092AbstractRoutingDataSource\u306e\u7d99\u627f\u30af\u30e9\u30b9\u306b\u9023\u643a\u3059\u308b\u305f\u3081\u306eAdvice\u30af\u30e9\u30b9(ShardKeyAdvice)\u306e\u30e1\u30bd\u30c3\u30c9\u304c\u547c\u3073\u51fa\u3055\u308c\u308b\u3002\n\n\n\u2461\n\nShardKeyAdvice\u306f\u3001Service\u30af\u30e9\u30b9\u306e\u30e1\u30bd\u30c3\u30c9\u547c\u3073\u51fa\u3057\u6642\u306b\u6307\u5b9a\u3055\u308c\u305f\u300c\u30a2\u30ab\u30a6\u30f3\u30c8ID\u300d\u3088\u308a\u30b7\u30e3\u30fc\u30c9\u30ad\u30fc\u3092\u8a08\u7b97\u3057\u3066ShardKeyStore\u306b\u8a2d\u5b9a\u3057\u305f\u5f8c\u306b\u3001Service\u30af\u30e9\u30b9\u306e\u30e1\u30bd\u30c3\u30c9\u3092\u547c\u3073\u51fa\u3059\u3002\n\n\n\u2462\nService\u304b\u3089JdbcTemplate\u306e\u30e1\u30bd\u30c3\u30c9\u3092\u547c\u3073\u51fa\u3059\u3002\n\n\n\u2463\n\nJdbcTemplate\u306f\u3001DataSourceUtil#getConnection(DataSource)\u3092\u4ecb\u3057\u3066AbstractRoutingDataSource\u306e\u7d99\u627f\u30af\u30e9\u30b9\u304b\u3089Connection\u3092\u53d6\u5f97\u3059\u308b\u3002AbstractRoutingDataSource\u306e\u7d99\u627f\u30af\u30e9\u30b9\u3067\u306f\u3001ShardKeyStore\u306b\u8a2d\u5b9a\u3055\u308c\u3066\u3044\u308b\u30b7\u30e3\u30fc\u30c9\u30ad\u30fc\u306b\u5bfe\u5fdc\u3059\u308bDataSource\u304b\u3089Connection\u3092\u53d6\u5f97\u3059\u308b\u3088\u3046\u306b\u5b9f\u88c5\u3059\u308b\u3002\n\n\n\u2464\n\u53d6\u5f97\u3057\u305fConnection\u306e\u30e1\u30bd\u30c3\u30c9\u3092\u4f7f\u7528\u3057\u3066SQL\u306e\u5b9f\u884c\u3092\u4f9d\u983c\u3059\u308b\u3053\u3068\u3067\u3001\u30b7\u30e3\u30fc\u30c9\u30ad\u30fc\u306b\u5bfe\u5fdc\u3059\u308b\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u306b\u30a2\u30af\u30bb\u30b9\u3059\u308b\u3002\n\n\n\n\n\u691c\u8a3c\u7528\u306eSpring Boot\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u306e\u4f5c\u6210\n\u5b9f\u969b\u306b\u2191\u3067\u7d39\u4ecb\u3057\u305f\u3088\u3046\u306a\u69cb\u6210\u306e\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u3092\u4f5c\u3063\u3066\u3001\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u30ec\u30a4\u30e4\u3067\u306e\u30b7\u30e3\u30fc\u30c7\u30a3\u30f3\u30b0\u3092\u4f53\u611f\u3057\u3066\u307f\u307e\u3057\u3087\u3046\u3002\n\u307e\u305a\u3001\u691c\u8a3c\u7528\u306eSpring Boot\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u4f5c\u6210\u3057\u307e\u3057\u3087\u3046(Dependencie\u306b\u306fjdbc,aop,h2\u3092\u6307\u5b9a)\u3002\u3053\u3053\u3067\u306f\u30b3\u30de\u30f3\u30c9\u30e9\u30a4\u30f3\u3067\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u3092\u4f5c\u6210\u3059\u308b\u4f8b\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u304c\u3001SPRING INITIALIZR\u306eWeb UI\u3084\u304a\u4f7f\u3044\u306eIDE\u306e\u6a5f\u80fd\u3067\u751f\u6210\u3057\u3066\u3082\uff08\u3082\u3061\u308d\u3093\uff09OK\u3067\u3059\uff01\uff01\n$ curl -s https://start.spring.io/starter.tgz\\\n       -d name=spring-routing-ds-demo\\\n       -d artifactId=spring-routing-ds-demo\\\n       -d dependencies=jdbc,aop,h2\\\n       -d baseDir=spring-routing-ds-demo\\\n       | tar -xzvf -\n\n\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u3092\u751f\u6210\u3059\u308b\u3068\u3001\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u69cb\u6210\u306eMaven\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u304c\u751f\u6210\u3055\u308c\u307e\u3059\u3002\n$ cd spring-routing-ds-demo\n$ tree\n.\n\u251c\u2500\u2500 mvnw\n\u251c\u2500\u2500 mvnw.cmd\n\u251c\u2500\u2500 pom.xml\n\u2514\u2500\u2500 src\n    \u251c\u2500\u2500 main\n    \u2502\u00a0\u00a0 \u251c\u2500\u2500 java\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 com\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u2514\u2500\u2500 example\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0         \u2514\u2500\u2500 SpringRoutingDsDemoApplication.java\n    \u2502\u00a0\u00a0 \u2514\u2500\u2500 resources\n    \u2502\u00a0\u00a0     \u2514\u2500\u2500 application.properties\n    \u2514\u2500\u2500 test\n        \u2514\u2500\u2500 java\n            \u2514\u2500\u2500 com\n                \u2514\u2500\u2500 example\n                    \u2514\u2500\u2500 SpringRoutingDsDemoApplicationTests.java\n\n\u5fc5\u8981\u306b\u5fdc\u3058\u3066\u304a\u4f7f\u3044\u306eIDE\u4e0a\u306b\u30a4\u30f3\u30dd\u30fc\u30c8\u3057\u3066\u304f\u3060\u3055\u3044\uff01\uff01\n\n\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9(\u30c7\u30fc\u30bf\u30bd\u30fc\u30b9)\u306e\u30bb\u30c3\u30c8\u30a2\u30c3\u30d7\n\u4eca\u56de\u306fH2\u306e\u30a4\u30f3\u30e1\u30e2\u30eaDB\u3092\u4f7f\u7528\u3057\u3066\u691c\u8a3c\u3057\u307e\u3059\u3002\n\nsrc/main/resources/schema.sql\n  id CHAR(10) PRIMARY KEY,\n  name VARCHAR(255)\n);\n\n\n\u30c7\u30fc\u30bf\u30bd\u30fc\u30b9\u304c\uff11\u3064\u306e\u5834\u5408\u306f\u3001\u2191\u306e\u3088\u3046\u306bschema.sql\u3092\u3064\u304f\u308c\u3070\u81ea\u52d5\u3067\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u3092\u521d\u671f\u5316\u3057\u3066\u304f\u308c\u307e\u3059\u304c\u3001\u4eca\u56de\u306f\u30b7\u30e3\u30fc\u30c7\u30a3\u30f3\u30b0\u7528\u306b\uff11\uff10\u500b\u306e\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\uff08\u30c7\u30fc\u30bf\u30bd\u30fc\u30b9\uff09\u3092\u4f5c\u308b\u5fc5\u8981\u304c\u3042\u308b\u306e\u3067\u3001Spring Boot\u306e\u30c7\u30d5\u30a9\u30eb\u30c8\u306e\u6a5f\u80fd\u306f\u4f7f\u308f\u305a\u306b\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\uff08\u30c7\u30fc\u30bf\u30bd\u30fc\u30b9\uff09\u3092\u30bb\u30c3\u30c8\u30a2\u30c3\u30d7\u3057\u307e\u3059\u3002\npackage com.example;\n\nimport java.util.LinkedHashMap;\nimport java.util.List;\nimport java.util.Map;\n\nimport javax.sql.DataSource;\n\nimport org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\nimport org.springframework.boot.autoconfigure.jdbc.DataSourceBuilder;\nimport org.springframework.boot.autoconfigure.jdbc.DataSourceProperties;\nimport org.springframework.boot.context.properties.ConfigurationProperties;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.core.io.ResourceLoader;\nimport org.springframework.jdbc.datasource.init.DatabasePopulatorUtils;\nimport org.springframework.jdbc.datasource.init.ResourceDatabasePopulator;\n\n\n@SpringBootApplication\npublic class SpringRoutingDsDemoApplication {\n\n    public static void main(String[] args) {\n        SpringApplication.run(SpringRoutingDsDemoApplication.class, args);\n    }\n\n    // \u2605\u2605\u2605 \u30b7\u30e3\u30fc\u30c7\u30a3\u30f3\u30b0\u691c\u8a3c\u7528\u306e\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\uff08\u30c7\u30fc\u30bf\u30bd\u30fc\u30b9\uff09\u306e\u30bb\u30c3\u30c8\u30a2\u30c3\u30d7 \u2605\u2605\u2605\n    @Configuration\n    @ConfigurationProperties(prefix = \"datasource\")\n    static class DataSourceConfiguration {\n\n        private final DataSourceProperties properties;\n        private final ResourceLoader resourceLoader;\n        private List<String> instanceNames;\n\n        DataSourceConfiguration(DataSourceProperties properties, ResourceLoader resourceLoader) {\n            this.properties = properties;\n            this.resourceLoader = resourceLoader;\n        }\n\n        public List<String> getInstanceNames() {\n            return instanceNames;\n        }\n\n        public void setInstanceNames(List<String> instanceNames) {\n            this.instanceNames = instanceNames;\n        }\n\n        @Bean\n        Map<Object, DataSource> targetDataSources() {\n            ResourceDatabasePopulator populator = new ResourceDatabasePopulator(\n                    this.resourceLoader.getResource(\"classpath:schema.sql\"));\n            Map<Object, DataSource> targetDataSources = new LinkedHashMap<>();\n            getInstanceNames().forEach(name -> {\n                DataSource dataSource = DataSourceBuilder.create()\n                    .driverClassName(this.properties.determineDriverClassName())\n                    .url(this.properties.determineUrl().replaceFirst(\"testdb\", name))\n                    .username(this.properties.determineUsername())\n                    .password(this.properties.determinePassword()).build();\n                DatabasePopulatorUtils.execute(populator, dataSource);\n                targetDataSources.put(name, dataSource);\n            });\n            return targetDataSources;\n        }\n\n    }\n\n}\n\nSpring Boot\u304c\u63d0\u4f9b\u3057\u3066\u3044\u308b\u30c7\u30fc\u30bf\u30bd\u30fc\u30b9\u306e\u521d\u671f\u5316\u6a5f\u80fd\u3092\u7121\u52b9\u5316(spring.datasource.initialize=false)\u3057\u3001\u30b7\u30e3\u30fc\u30c7\u30a3\u30f3\u30b0\u7528DB\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u540d\u309210\u500b\u6307\u5b9a\u3059\u308b\u3002\n\nsrc/main/resources/application.properties\nspring.datasource.initialize=false\ndatasource.instanceNames=db0,db1,db2,db3,db4,db5,db6,db7,db8,db9\n\n\n\nService\u30af\u30e9\u30b9\u306e\u4f5c\u6210\n\u6a5f\u80fd\u8981\u4ef6\u3092\u307f\u305f\u3059\u305f\u3081\u306e\u51e6\u7406\u3092\u5b9f\u88c5\u3059\u308bService\u30af\u30e9\u30b9\u3092\u4f5c\u6210\u3057\u307e\u3059\u3002\npackage com.example;\n\nimport java.util.Map;\n\nimport org.springframework.jdbc.core.JdbcTemplate;\nimport org.springframework.stereotype.Service;\n\n@Service\npublic class AccountService {\n    private final JdbcTemplate jdbcTemplate;\n\n    public AccountService(JdbcTemplate jdbcTemplate) {\n        this.jdbcTemplate = jdbcTemplate;\n    }\n\n    public void create(String id, String name) {\n        this.jdbcTemplate.update(\"INSERT INTO account (id, name) VALUES(?,?)\", id, name);\n    }\n\n    public Map<String, Object> find(String id) {\n        return this.jdbcTemplate.queryForMap(\"SELECT id, name FROM account WHERE id = ?\", id);\n    }\n\n}\n\n\nShardKeyStore\u306e\u4f5c\u6210\n\u30b7\u30e3\u30fc\u30c9\u30ad\u30fc\u3092\u30b9\u30ec\u30c3\u30c9\u30ed\u30fc\u30ab\u30eb\u306e\u5909\u6570\u306b\u4fdd\u6301\u3059\u308b\u30af\u30e9\u30b9\u3092\u4f5c\u6210\u3057\u307e\u3059\u3002\npackage com.example;\n\nimport org.springframework.stereotype.Component;\n\n@Component\npublic class ShardKeyStore {\n\n    private final ThreadLocal<String> keyStore = new ThreadLocal<>();\n\n    public void set(String key) {\n        this.keyStore.set(key);\n    }\n\n    public String get() {\n        return this.keyStore.get();\n    }\n\n    public void clear() {\n        this.keyStore.remove();\n    }\n}\n\n\nShardKeyAdvice\u306e\u4f5c\u6210\n\u30b7\u30e3\u30fc\u30c9\u30ad\u30fc\u3092Service\u30af\u30e9\u30b9\u306e\u30e1\u30bd\u30c3\u30c9\u5f15\u6570\uff08\u7b2c\u4e00\u5f15\u6570\uff09\u304b\u3089\u8a08\u7b97\u3057\u3001ShardKeyStore\u306b\u8a2d\u5b9a\u3059\u308b\u30af\u30e9\u30b9\u3092\u4f5c\u6210\u3057\u307e\u3059\u3002\npackage com.example;\n\nimport java.util.Optional;\n\nimport org.aspectj.lang.annotation.After;\nimport org.aspectj.lang.annotation.Aspect;\nimport org.aspectj.lang.annotation.Before;\nimport org.springframework.stereotype.Component;\n\n@Aspect\n@Component\npublic class ShardKeyAdvice {\n\n    private final ShardKeyStore shardKeyStore;\n\n    public ShardKeyAdvice(ShardKeyStore shardKeyStore) {\n        this.shardKeyStore = shardKeyStore;\n    }\n\n    // \u2605\u2605\u2605 Service\u30af\u30e9\u30b9\u306e\u30e1\u30bd\u30c3\u30c9\u547c\u3073\u51fa\u3057\u524d\u306b\u300cdb + \u30a2\u30ab\u30a6\u30f3\u30c8ID\u306e\u672b\u5c3e1\u6841\u300d\u3092\u30b7\u30e3\u30fc\u30c9\u30ad\u30fc\u306b\u8a2d\u5b9a \u2605\u2605\u2605\n    @Before(\"execution(* *..AccountService.*(..)) && args(id,..)\")\n    public void set(String id) {\n        String key = \"db\" + Optional.ofNullable(id)\n            .filter(x -> x.length() == 10)\n            .map(x -> x.substring(9))\n            .get();\n        this.shardKeyStore.set(key);\n    }\n\n    // \u2605\u2605\u2605 Service\u30af\u30e9\u30b9\u306e\u30e1\u30bd\u30c3\u30c9\u547c\u3073\u51fa\u3057\u7d42\u4e86\u5f8c\u306b\u30b7\u30e3\u30fc\u30c9\u30ad\u30fc\u3092\u30af\u30ea\u30a2 \u2605\u2605\u2605\n    // \u2605\u2605\u2605 \u30b9\u30ec\u30c3\u30c9\u304c\u30d7\u30fc\u30eb\u3055\u308c\u308b\u74b0\u5883\u4e0b\u3067\u306f\u4e0d\u8981\u306b\u306a\u3063\u305f\u3089\u6642\u306b\u30af\u30ea\u30a2\u3059\u308b \u2605\u2605\u2605\n    @After(\"execution(* *..AccountService.*(..))\")\n    public void clear() {\n        this.shardKeyStore.clear();\n    }\n\n}\n\n\nAbstractRoutingDataSource\u306eBean\u5b9a\u7fa9\n\u30b7\u30e3\u30fc\u30c7\u30a3\u30f3\u30b0\u7528\u306e\u30c7\u30fc\u30bf\u30bd\u30fc\u30b9\u3092\u5207\u66ff\u5bfe\u8c61\u306e\u30c7\u30fc\u30bf\u30bd\u30fc\u30b9\u3068\u3057\u3066\u4fdd\u6301\u3059\u308bAbstractRoutingDataSource\u306eBean\u3092\u5b9a\u7fa9\u3057\u307e\u3059\u3002\u306a\u304a\u3001\u672c\u30a8\u30f3\u30c8\u30ea\u30fc\u3067\u306f\u30c7\u30d5\u30a9\u30eb\u30c8\u306e\u30c7\u30fc\u30bf\u30bd\u30fc\u30b9\u3092\u8a2d\u5b9a\u3057\u3066\u3044\u307e\u305b\u3093\u304c\u3001\u30b7\u30e3\u30fc\u30c9\u30ad\u30fc\u304c\u672a\u8a2d\u5b9a\u306e\u5834\u5408\u3084\u30b7\u30e3\u30fc\u30c9\u30ad\u30fc\u306b\u5bfe\u5fdc\u3059\u308b\u30c7\u30fc\u30bf\u30bd\u30fc\u30b9\u304c\u898b\u3064\u304b\u3089\u306a\u3044\u5834\u5408\u306b\u4f7f\u3046\u30c7\u30fc\u30bf\u30bd\u30fc\u30b9\u3092\u6307\u5b9a\u3059\u308b\u3053\u3068\u3082\u3067\u304d\u307e\u3059\u3002\npackage com.example;\n\nimport java.util.LinkedHashMap;\nimport java.util.List;\nimport java.util.Map;\n\nimport javax.sql.DataSource;\n\nimport org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\nimport org.springframework.boot.autoconfigure.jdbc.DataSourceBuilder;\nimport org.springframework.boot.autoconfigure.jdbc.DataSourceProperties;\nimport org.springframework.boot.context.properties.ConfigurationProperties;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.core.io.ResourceLoader;\nimport org.springframework.jdbc.datasource.init.DatabasePopulatorUtils;\nimport org.springframework.jdbc.datasource.init.ResourceDatabasePopulator;\nimport org.springframework.jdbc.datasource.lookup.AbstractRoutingDataSource;\n\n@SpringBootApplication\npublic class SpringRoutingDsDemoApplication {\n\n    public static void main(String[] args) {\n        SpringApplication.run(SpringRoutingDsDemoApplication.class, args);\n    }\n\n    @Configuration\n    @ConfigurationProperties(prefix = \"datasource\")\n    static class DataSourceConfiguration {\n\n        private final DataSourceProperties properties;\n        private final ResourceLoader resourceLoader;\n        private List<String> instanceNames;\n\n        DataSourceConfiguration(DataSourceProperties properties, ResourceLoader resourceLoader) {\n            this.properties = properties;\n            this.resourceLoader = resourceLoader;\n        }\n\n        public List<String> getInstanceNames() {\n            return instanceNames;\n        }\n\n        public void setInstanceNames(List<String> instanceNames) {\n            this.instanceNames = instanceNames;\n        }\n\n        @Bean\n        Map<Object, DataSource> targetDataSources() {\n            ResourceDatabasePopulator populator = new ResourceDatabasePopulator(\n                    this.resourceLoader.getResource(\"classpath:schema.sql\"));\n            Map<Object, DataSource> targetDataSources = new LinkedHashMap<>();\n            getInstanceNames().forEach(name -> {\n                DataSource dataSource = DataSourceBuilder.create()\n                    .driverClassName(this.properties.determineDriverClassName())\n                    .url(this.properties.determineUrl().replaceFirst(\"testdb\", name))\n                    .username(this.properties.determineUsername())\n                    .password(this.properties.determinePassword()).build();\n                DatabasePopulatorUtils.execute(populator, dataSource);\n                targetDataSources.put(name, dataSource);\n            });\n            return targetDataSources;\n        }\n\n        // \u2605\u2605\u2605 AbstractRoutingDataSource\u306eBean\u5b9a\u7fa9 \u2605\u2605\u2605 \n        @Bean\n        DataSource dataSource(ShardKeyStore shardKeyStore) {\n            AbstractRoutingDataSource routingDataSource = new AbstractRoutingDataSource() {\n                @Override\n                protected Object determineCurrentLookupKey() {\n                    return shardKeyStore.get(); // \u2605\u2605\u2605 \u30c7\u30fc\u30bf\u30bd\u30fc\u30b9\u306e\u30eb\u30c3\u30af\u30a2\u30c3\u30d7\u30ad\u30fc\u3068\u3057\u3066ShardKeyStore\u306b\u8a2d\u5b9a\u3055\u308c\u3066\u3044\u308b\u30b7\u30e3\u30fc\u30c9\u30ad\u30fc\u3092\u5229\u7528\n                }\n            };\n            routingDataSource.setTargetDataSources(new LinkedHashMap<>(targetDataSources())); // \u2605\u2605\u2605 \u30b7\u30e3\u30fc\u30c7\u30a3\u30f3\u30b0\u7528\u306e\u30c7\u30fc\u30bf\u30bd\u30fc\u30b9\u3092\u8a2d\u5b9a\n            return routingDataSource;\n        }\n\n    }\n\n}\n\n\nCommandLineRunner\u306e\u5b9f\u88c5\nSpring Boot\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u30af\u30e9\u30b9\u306bCommandLineRunner\u30a4\u30f3\u30bf\u30d5\u30a7\u30fc\u30b9\u306erun\u30e1\u30bd\u30c3\u30c9\u3092\u5b9f\u88c5\u3057\u3001\u5b9f\u969b\u306bDB\u30a2\u30af\u30bb\u30b9\u3057\u3066\u307f\u307e\u3057\u3087\u3046\u3002\npackage com.example;\n\nimport java.util.LinkedHashMap;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.stream.IntStream;\n\nimport javax.sql.DataSource;\n\nimport org.springframework.boot.CommandLineRunner;\nimport org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\nimport org.springframework.boot.autoconfigure.jdbc.DataSourceBuilder;\nimport org.springframework.boot.autoconfigure.jdbc.DataSourceProperties;\nimport org.springframework.boot.context.properties.ConfigurationProperties;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.core.io.ResourceLoader;\nimport org.springframework.jdbc.datasource.init.DatabasePopulatorUtils;\nimport org.springframework.jdbc.datasource.init.ResourceDatabasePopulator;\nimport org.springframework.jdbc.datasource.lookup.AbstractRoutingDataSource;\n\n@SpringBootApplication\npublic class SpringRoutingDsDemoApplication implements CommandLineRunner { // \u2605\u2605\u2605 CommandLineRunner\u3092implements\u306b\u8ffd\u52a0\n\n    public static void main(String[] args) {\n        SpringApplication.run(SpringRoutingDsDemoApplication.class, args);\n    }\n\n    private final AccountService accountService;\n\n    public SpringRoutingDsDemoApplication(AccountService accountService) {\n        this.accountService = accountService;\n    }\n\n    // \u2605\u2605\u2605 CommandLineRunner\u306erun\u30e1\u30bd\u30c3\u30c9\u3092\u5b9f\u88c5 \u2605\u2605\u2605\n    @Override\n    public void run(String... args) throws Exception {\n        // A000000001 \u301c A000000010\u306e\u30a2\u30ab\u30a6\u30f3\u30c8ID\u3092\u4f7f\u7528\u3057\u3066DB\u30a2\u30af\u30bb\u30b9(INSERT+SELECT)\u3092\u8a66\u307f\u308b\n        IntStream.range(1, 11).forEach(x -> {\n            String id = String.format(\"A0000000%02d\", x);\n            this.accountService.create(id, String.format(\"user%02d\", x));\n            System.out.println(this.accountService.find(id));\n        });\n    }\n\n    @Configuration\n    @ConfigurationProperties(prefix = \"datasource\")\n    static class DataSourceConfiguration {\n\n        private final DataSourceProperties properties;\n        private final ResourceLoader resourceLoader;\n        private List<String> instanceNames;\n\n        DataSourceConfiguration(DataSourceProperties properties, ResourceLoader resourceLoader) {\n            this.properties = properties;\n            this.resourceLoader = resourceLoader;\n        }\n\n        public List<String> getInstanceNames() {\n            return instanceNames;\n        }\n\n        public void setInstanceNames(List<String> instanceNames) {\n            this.instanceNames = instanceNames;\n        }\n\n\n        @Bean\n        DataSource dataSource(ShardKeyStore shardKeyStore) {\n            AbstractRoutingDataSource routingDataSource = new AbstractRoutingDataSource() {\n                @Override\n                protected Object determineCurrentLookupKey() {\n                    return shardKeyStore.get();\n                }\n            };\n            routingDataSource.setTargetDataSources(new LinkedHashMap<>(targetDataSources()));\n            return routingDataSource;\n        }\n\n        @Bean\n        Map<Object, DataSource> targetDataSources() {\n            ResourceDatabasePopulator populator = new ResourceDatabasePopulator(\n                    this.resourceLoader.getResource(\"classpath:schema.sql\"));\n            Map<Object, DataSource> targetDataSources = new LinkedHashMap<>();\n            getInstanceNames().forEach(name -> {\n                DataSource dataSource = DataSourceBuilder.create()\n                    .driverClassName(this.properties.determineDriverClassName())\n                    .url(this.properties.determineUrl().replaceFirst(\"testdb\", name))\n                    .username(this.properties.determineUsername())\n                    .password(this.properties.determinePassword()).build();\n                DatabasePopulatorUtils.execute(populator, dataSource);\n                targetDataSources.put(name, dataSource);\n            });\n            return targetDataSources;\n        }\n\n    }\n\n}\n\nSpring Boot\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u3068\u3057\u3066\u5b9f\u884c\u3059\u308b\u3068\u3001\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u30ed\u30b0\u304c\u30b3\u30f3\u30bd\u30fc\u30eb\u306b\u51fa\u529b\u3055\u308c\u307e\u3059\u3002\n$ ./mvnw spring-boot:run\n...\n\n  .   ____          _            __ _ _\n /\\\\ / ___'_ __ _ _(_)_ __  __ _ \\ \\ \\ \\\n( ( )\\___ | '_ | '_| | '_ \\/ _` | \\ \\ \\ \\\n \\\\/  ___)| |_)| | | | | || (_| |  ) ) ) )\n  '  |____| .__|_| |_|_| |_\\__, | / / / /\n =========|_|==============|___/=/_/_/_/\n :: Spring Boot ::        (v1.5.1.RELEASE)\n...\n2017-02-14 19:50:16.211  INFO 52891 --- [           main] s.c.a.AnnotationConfigApplicationContext : Refreshing org.springframework.context.annotation.AnnotationConfigApplicationContext@2bbb6e7f: startup date [Tue Feb 14 19:50:16 JST 2017]; root of context hierarchy\n...\n2017-02-14 19:50:17.789  INFO 52891 --- [           main] o.s.j.e.a.AnnotationMBeanExporter        : Registering beans for JMX exposure on startup\n{ID=A000000001, NAME=user01}\n{ID=A000000002, NAME=user02}\n{ID=A000000003, NAME=user03}\n{ID=A000000004, NAME=user04}\n{ID=A000000005, NAME=user05}\n{ID=A000000006, NAME=user06}\n{ID=A000000007, NAME=user07}\n{ID=A000000008, NAME=user08}\n{ID=A000000009, NAME=user09}\n{ID=A000000010, NAME=user10}\n2017-02-14 19:50:17.876  INFO 52891 --- [           main] c.e.SpringRoutingDsDemoApplication       : Started SpringRoutingDsDemoApplication in 2.32 seconds (JVM running for 6.303)\n...\n\n\u306a\u306b\u3084\u3089\u3001INSERT\u3057\u305f\u30c7\u30fc\u30bf\u304cSELECT\u3067\u304d\u3066\u3044\u308b\u307f\u305f\u3044\u3067\u3059\u304c\u3001\u3061\u3083\u3093\u3068\u30b7\u30e3\u30fc\u30c7\u30a3\u30f3\u30b0\u3067\u304d\u3066\u3044\u308b\u304b\u602a\u3057\u3044\u3068\u3053\u308d\u306a\u306e\u3067\u3001\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u7d42\u4e86\u6642\u306b\u5404\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u306b\u767b\u9332\u3055\u308c\u3066\u3044\u308b\u30ec\u30b3\u30fc\u30c9\u3092\u30c0\u30f3\u30d7\u3059\u308b\u30af\u30e9\u30b9\u3092\u8ffd\u52a0\u3057\u3066\u307f\u307e\u3059\u3002\npackage com.example;\n\nimport java.util.Map;\n\nimport javax.annotation.PreDestroy;\nimport javax.sql.DataSource;\n\nimport org.springframework.jdbc.core.JdbcTemplate;\nimport org.springframework.stereotype.Component;\n\n@Component\npublic class DataSourcesDump {\n    private final Map<Object, DataSource> dataSources;\n\n    public DataSourcesDump(Map<Object, DataSource> dataSources) {\n        this.dataSources = dataSources;\n    }\n\n    @PreDestroy\n    public void dumpOnDestroy() {\n        this.dataSources.forEach((lookupKey, dataSource) -> {\n            System.out.println(\"--------------------------\");\n            System.out.println(\"Lookup Key : \" + lookupKey);\n            JdbcTemplate jdbcTemplate = new JdbcTemplate(dataSource);\n            jdbcTemplate.queryForList(\"SELECT id, name FROM account ORDER BY id\").forEach(System.out::println);\n        });\n\n    }\n\n}\n\n\u518d\u5ea6Spring Boot\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u3068\u3057\u3066\u5b9f\u884c\u3059\u308b\u3068\u3001\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u30ed\u30b0\u304c\u30b3\u30f3\u30bd\u30fc\u30eb\u306b\u51fa\u529b\u3055\u308c\u3001\u30b7\u30e3\u30fc\u30c7\u30a3\u30f3\u30b0\u304c\u6b63\u3057\u304f\u884c\u308f\u308c\u3066\u3044\u308b\u3053\u3068\u304c\u78ba\u8a8d\u3067\u304d\u307e\u3059\u3002\n$ ./mvnw spring-boot:run\n...\n[INFO] ------------------------------------------------------------------------\n[INFO] BUILD SUCCESS\n[INFO] ------------------------------------------------------------------------\n[INFO] Total time: 4.145 s\n[INFO] Finished at: 2017-02-14T19:59:10+09:00\n[INFO] Final Memory: 24M/393M\n[INFO] ------------------------------------------------------------------------\n2017-02-14 19:59:10.841  INFO 52928 --- [       Thread-3] s.c.a.AnnotationConfigApplicationContext : Closing org.springframework.context.annotation.AnnotationConfigApplicationContext@25c20220: startup date [Tue Feb 14 19:59:09 JST 2017]; root of context hierarchy\n2017-02-14 19:59:10.842  INFO 52928 --- [       Thread-3] o.s.j.e.a.AnnotationMBeanExporter        : Unregistering JMX-exposed beans on shutdown\n--------------------------\nLookup Key : db0\n{ID=A000000010, NAME=user10}\n--------------------------\nLookup Key : db1\n{ID=A000000001, NAME=user01}\n--------------------------\nLookup Key : db2\n{ID=A000000002, NAME=user02}\n--------------------------\nLookup Key : db3\n{ID=A000000003, NAME=user03}\n--------------------------\nLookup Key : db4\n{ID=A000000004, NAME=user04}\n--------------------------\nLookup Key : db5\n{ID=A000000005, NAME=user05}\n--------------------------\nLookup Key : db6\n{ID=A000000006, NAME=user06}\n--------------------------\nLookup Key : db7\n{ID=A000000007, NAME=user07}\n--------------------------\nLookup Key : db8\n{ID=A000000008, NAME=user08}\n--------------------------\nLookup Key : db9\n{ID=A000000009, NAME=user09}\n\n\n\u30c8\u30e9\u30f3\u30b6\u30af\u30b7\u30e7\u30f3\u7ba1\u7406\u914d\u4e0b\u3067\u306e\u5229\u7528\n\u3053\u3053\u307e\u3067\u306e\u30b5\u30f3\u30d7\u30eb\u3067\u306f\u30c8\u30e9\u30f3\u30b6\u30af\u30b7\u30e7\u30f3\u7ba1\u7406\u3057\u3066\u3044\u307e\u305b\u3093\u304c\u3001\u5b9f\u969b\u306e\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u3060\u3068\u78ba\u5b9f\u306b\u30c8\u30e9\u30f3\u30b6\u30af\u30b7\u30e7\u30f3\u5236\u5fa1\u304c\u5fc5\u8981\u306b\u306a\u308a\u307e\u3059\u3002\u30c8\u30e9\u30f3\u30b6\u30af\u30b7\u30e7\u30f3\u7ba1\u7406\u4e0b\u3067Service\u30af\u30e9\u30b9\u3092\u5b9f\u884c\u3059\u308b\u5834\u5408\u306f\u3001\u30af\u30e9\u30b9\u307e\u305f\u306f\u30e1\u30bd\u30c3\u30c9\u306b@Transactional\u3092\u4ed8\u4e0e\u3059\u308b\u3060\u3051\u3067\u3059\u3002\n\nNote:\nSpring\u304c\u63d0\u4f9b\u3059\u308bDB\u30a2\u30af\u30bb\u30b9\u6a5f\u80fd(Spring JDBC)\u306e\u30ed\u30b0(\u30c7\u30d0\u30c3\u30b0\u30ed\u30b0)\u3092\u51fa\u529b\u3059\u308b\u3088\u3046\u306b\u3057\u3066\u304a\u304f\u3068\u3001\u30c8\u30e9\u30f3\u30b6\u30af\u30b7\u30e7\u30f3\u304c\u5b9f\u969b\u306b\u3069\u306e\u3088\u3046\u306b\u50cd\u3044\u3066\u3044\u308b\u304b\u78ba\u8a8d\u3057\u3084\u3059\u304f\u306a\u308a\u307e\u3059\u3002\n\nsrc/main/resources/application.properteis\nlogging.level.org.springframework.jdbc=debug\n\n\n\npackage com.example;\n\nimport java.util.Map;\n\nimport org.springframework.jdbc.core.JdbcTemplate;\nimport org.springframework.stereotype.Service;\nimport org.springframework.transaction.annotation.Transactional;\n\n@Service\n@Transactional // \u2605\u2605\u2605 \u8ffd\u52a0 \u2605\u2605\u2605 \npublic class AccountService {\n    private final JdbcTemplate jdbcTemplate;\n\n    public AccountService(JdbcTemplate jdbcTemplate) {\n        this.jdbcTemplate = jdbcTemplate;\n    }\n\n    public void create(String id, String name) {\n        this.jdbcTemplate.update(\"INSERT INTO account (id, name) VALUES(?,?)\", id, name);\n    }\n\n    public Map<String, Object> find(String id) {\n        return this.jdbcTemplate.queryForMap(\"SELECT id, name FROM account WHERE id = ?\", id);\n    }\n\n}\n\n\u5b9f\u969b\u306b\u52d5\u304b\u3057\u3066\u30c8\u30e9\u30f3\u30b6\u30af\u30b7\u30e7\u30f3\u304c\u52b9\u3044\u3066\u3044\u308b\u3053\u3068\u3092\u78ba\u8a8d\u3059\u308b\u305f\u3081\u306bSpring Boot\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u3092\u8d77\u52d5\u3057\u3066\u307f\u308b\u3068\u30fb\u30fb\u30fb\u306a\u3093\u3068\u3001\u307e\u301c\u30a8\u30e9\u30fc\u306b\u306a\u3063\u3061\u3083\u3044\u307e\u3057\u305f\u30fb\u30fb\u30fb  \n$ ./mvnw spring-boot:run\n...\n2017-02-14 20:30:36.919 ERROR 53003 --- [           main] o.s.boot.SpringApplication               : Application startup failed\n\njava.lang.IllegalStateException: Failed to execute CommandLineRunner\n    at org.springframework.boot.SpringApplication.callRunner(SpringApplication.java:779) [spring-boot-1.5.1.RELEASE.jar:1.5.1.RELEASE]\n    at org.springframework.boot.SpringApplication.callRunners(SpringApplication.java:760) [spring-boot-1.5.1.RELEASE.jar:1.5.1.RELEASE]\n    at org.springframework.boot.SpringApplication.afterRefresh(SpringApplication.java:747) [spring-boot-1.5.1.RELEASE.jar:1.5.1.RELEASE]\n    at org.springframework.boot.SpringApplication.run(SpringApplication.java:315) [spring-boot-1.5.1.RELEASE.jar:1.5.1.RELEASE]\n    at org.springframework.boot.SpringApplication.run(SpringApplication.java:1162) [spring-boot-1.5.1.RELEASE.jar:1.5.1.RELEASE]\n    at org.springframework.boot.SpringApplication.run(SpringApplication.java:1151) [spring-boot-1.5.1.RELEASE.jar:1.5.1.RELEASE]\n    at com.example.SpringRoutingDsDemoApplication.main(SpringRoutingDsDemoApplication.java:27) [classes/:na]\n    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[na:1.8.0_121]\n    at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[na:1.8.0_121]\n    at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:1.8.0_121]\n    at java.lang.reflect.Method.invoke(Method.java:498) ~[na:1.8.0_121]\n    at org.springframework.boot.maven.AbstractRunMojo$LaunchRunner.run(AbstractRunMojo.java:527) [spring-boot-maven-plugin-1.5.1.RELEASE.jar:1.5.1.RELEASE]\n    at java.lang.Thread.run(Thread.java:745) [na:1.8.0_121]\nCaused by: org.springframework.transaction.CannotCreateTransactionException: Could not open JDBC Connection for transaction; nested exception is java.lang.IllegalStateException: Cannot determine target DataSource for lookup key [null]\n    at org.springframework.jdbc.datasource.DataSourceTransactionManager.doBegin(DataSourceTransactionManager.java:252) ~[spring-jdbc-4.3.6.RELEASE.jar:4.3.6.RELEASE]\n    at org.springframework.transaction.support.AbstractPlatformTransactionManager.getTransaction(AbstractPlatformTransactionManager.java:373) ~[spring-tx-4.3.6.RELEASE.jar:4.3.6.RELEASE]\n    at org.springframework.transaction.interceptor.TransactionAspectSupport.createTransactionIfNecessary(TransactionAspectSupport.java:447) ~[spring-tx-4.3.6.RELEASE.jar:4.3.6.RELEASE]\n    at org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:277) ~[spring-tx-4.3.6.RELEASE.jar:4.3.6.RELEASE]\n    at org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:96) ~[spring-tx-4.3.6.RELEASE.jar:4.3.6.RELEASE]\n    at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:179) ~[spring-aop-4.3.6.RELEASE.jar:4.3.6.RELEASE]\n    at org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:92) ~[spring-aop-4.3.6.RELEASE.jar:4.3.6.RELEASE]\n    at org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:179) ~[spring-aop-4.3.6.RELEASE.jar:4.3.6.RELEASE]\n    at org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:656) ~[spring-aop-4.3.6.RELEASE.jar:4.3.6.RELEASE]\n    at com.example.AccountService$$EnhancerBySpringCGLIB$$2c13cf6f.create(<generated>) ~[classes/:na]\n    at com.example.SpringRoutingDsDemoApplication.lambda$run$0(SpringRoutingDsDemoApplication.java:40) [classes/:na]\n    at java.util.stream.Streams$RangeIntSpliterator.forEachRemaining(Streams.java:110) ~[na:1.8.0_121]\n    at java.util.stream.IntPipeline$Head.forEach(IntPipeline.java:557) ~[na:1.8.0_121]\n    at com.example.SpringRoutingDsDemoApplication.run(SpringRoutingDsDemoApplication.java:38) [classes/:na]\n    at org.springframework.boot.SpringApplication.callRunner(SpringApplication.java:776) [spring-boot-1.5.1.RELEASE.jar:1.5.1.RELEASE]\n    ... 12 common frames omitted\nCaused by: java.lang.IllegalStateException: Cannot determine target DataSource for lookup key [null]\n    at org.springframework.jdbc.datasource.lookup.AbstractRoutingDataSource.determineTargetDataSource(AbstractRoutingDataSource.java:202) ~[spring-jdbc-4.3.6.RELEASE.jar:4.3.6.RELEASE]\n    at org.springframework.jdbc.datasource.lookup.AbstractRoutingDataSource.getConnection(AbstractRoutingDataSource.java:164) ~[spring-jdbc-4.3.6.RELEASE.jar:4.3.6.RELEASE]\n    at org.springframework.jdbc.datasource.DataSourceTransactionManager.doBegin(DataSourceTransactionManager.java:211) ~[spring-jdbc-4.3.6.RELEASE.jar:4.3.6.RELEASE]\n    ... 26 common frames omitted\n...\n\n\u30ed\u30b0\u3092\u307f\u308b\u3068\u3001\u30c7\u30fc\u30bf\u30bd\u30fc\u30b9\u306e\u30eb\u30c3\u30ad\u30a2\u30c3\u30d7\u30ad\u30fc\uff08\u3064\u307e\u308a\u30b7\u30e3\u30fc\u30c9\u30ad\u30fc\uff09\u304c\u89e3\u6c7a\u3067\u304d\u3066\u3044\u306a\u3044\u3053\u3068\u304c\u539f\u56e0\u306e\u3088\u3046\u3067\u3059\u3002\u306a\u305c\u30b7\u30e3\u30fc\u30c9\u30ad\u30fc\u304c\u89e3\u6c7a\u3067\u304d\u306a\u304b\u3063\u305f\u304b\u3068\u3044\u3046\u3068\u30fb\u30fb\u30fbTransactionInterceptor\u304cShardKeyAdvice\u3088\u308a\u524d\u306b\u5b9f\u884c\u3055\u308c\u3066\u3057\u307e\u3063\u305f\u304b\u3089\u3067\u3001\u4e0b\u8a18\u306e\u56f3\u3067\u793a\u3059\u3088\u3046\u306bShardKeyAdvice -> TransactionInterceptor\u306e\u9806\u756a\u3067\u9069\u7528\u3055\u308c\u306a\u3044\u3068\u30c0\u30e1\u306a\u3093\u3067\u3059\u3002\n\n\u5177\u4f53\u7684\u306b\u306f\u3001ShardKeyAdvice\u306e\u512a\u5148\u5ea6\u3092\u8abf\u6574\u3059\u308b\u3053\u3068\u3067\u3001TransactionInterceptor\u3088\u308a\u524d\u306bShardKeyAdvice\u304c\u9069\u7528\u3055\u308c\u308b\u3088\u3046\u306b\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\nSpring Boot\u306e\u81ea\u52d5\u30b3\u30f3\u30d5\u30a3\u30ae\u30e5\u30ec\u30fc\u30b7\u30e7\u30f3\u306e\u4ed5\u7d44\u307f\u3092\u5229\u7528\u3057\u3066TransactionInterceptor\u3092\u30bb\u30c3\u30c8\u30a2\u30c3\u30d7\u3057\u305f\u5834\u5408\u306f\u3001TransactionInterceptor\u306e\u512a\u5148\u9806\u306f\u6700\u4f4e\uff08Ordered.LOWEST_PRECEDENCE\uff09\u306b\u306a\u308b\u305f\u3081\u3001ShardKeyAdvice\u306e\u512a\u5148\u9806\u3092\u300cOrdered.LOWEST_PRECEDENCE -1\u300d(\u512a\u5148\u9806\u304c\u9ad8\u304f\u306a\u308b\u5024)\u306b\u3059\u308c\u3070OK\u3067\u3059\u3002\n\nNote:\nSpring Boot\u306e\u81ea\u52d5\u30b3\u30f3\u30d5\u30a3\u30ae\u30e5\u30ec\u30fc\u30b7\u30e7\u30f3\u306e\u4ed5\u7d44\u307f\u3092\u5229\u7528\u3057\u306a\u3044\u3067\u660e\u793a\u7684\u306b@EnableTransactionManagement\u3092\u6307\u5b9a\u3057\u3066\u3044\u308b\u5834\u5408\u306f\u3001@EnableTransactionManagement\u306eorder\u5c5e\u6027\u306b\u6307\u5b9a\u3057\u3066\u3044\u308b\u5024\u3088\u308a\u5c0f\u3055\u3044\u5024\u3092\u6307\u5b9a\u3059\u308b\u3088\u3046\u306b\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n\npackage com.example;\n\nimport java.util.Optional;\n\nimport org.aspectj.lang.annotation.After;\nimport org.aspectj.lang.annotation.Aspect;\nimport org.aspectj.lang.annotation.Before;\nimport org.springframework.core.Ordered;\nimport org.springframework.core.annotation.Order;\nimport org.springframework.stereotype.Component;\n\n@Aspect\n@Component\n@Order(Ordered.LOWEST_PRECEDENCE - 1) // \u2605\u2605\u2605 \u512a\u5148\u9806\u3092\u6307\u5b9a \u2605\u2605\u2605\npublic class ShardKeyAdvice {\n\n    private final ShardKeyStore shardKeyStore;\n\n    public ShardKeyAdvice(ShardKeyStore shardKeyStore) {\n        this.shardKeyStore = shardKeyStore;\n    }\n\n    @Before(\"execution(* *..AccountService.*(..)) && args(id,..)\")\n    public void set(String id) {\n        String key = \"db\" + Optional.ofNullable(id)\n            .filter(x -> x.length() == 10)\n            .map(x -> x.substring(9))\n            .get();\n        this.shardKeyStore.set(key);\n    }\n\n    @After(\"execution(* *..AccountService.*(..))\")\n    public void clear() {\n        this.shardKeyStore.clear();\n    }\n\n}\n\n\u512a\u5148\u5ea6\u3092\u5909\u66f4\u3057\u305f\u3089Spring Boot\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u3092\u8d77\u52d5\u3057\u3066\u3001\u30c8\u30e9\u30f3\u30b6\u30af\u30b7\u30e7\u30f3\u7ba1\u7406\u4e0b\u3067\u30b7\u30e3\u30fc\u30c7\u30a3\u30f3\u30b0\u304c\u9069\u7528\u3055\u308c\u3066\u3044\u308b\u3053\u3068\u3092\u78ba\u8a8d\u3057\u3066\u307f\u307e\u3057\u3087\u3046\u3002Spring JDBC\u306e\u30c7\u30d0\u30c3\u30b0\u30ed\u30b0\u3092\u51fa\u529b\u3059\u308b\u3088\u3046\u306b\u3057\u305f\u3053\u3068\u3067\u5927\u91cf\u306e\u30ed\u30b0\u304c\u51fa\u529b\u3055\u308c\u308b\u3088\u3046\u306b\u306a\u3063\u305f\u306e\u3067\u3001\u3053\u3053\u3067\u306f\u6700\u521d\u306e\uff12\u4ef6\u5206\u306e\u30ed\u30b0\u306e\u307f\u63b2\u8f09\u3057\u307e\u3059\u3002\n./mvnw spring-boot:run\n...\n2017-02-14 21:01:17.173 DEBUG 53055 --- [           main] o.s.j.d.DataSourceTransactionManager     : Creating new transaction with name [com.example.AccountService.create]: PROPAGATION_REQUIRED,ISOLATION_DEFAULT; ''\n2017-02-14 21:01:17.174 DEBUG 53055 --- [           main] o.s.j.d.DataSourceTransactionManager     : Acquired Connection [ProxyConnection[PooledConnection[conn19: url=jdbc:h2:mem:db1 user=SA]]] for JDBC transaction\n2017-02-14 21:01:17.176 DEBUG 53055 --- [           main] o.s.j.d.DataSourceTransactionManager     : Switching JDBC Connection [ProxyConnection[PooledConnection[conn19: url=jdbc:h2:mem:db1 user=SA]]] to manual commit\n2017-02-14 21:01:17.184 DEBUG 53055 --- [           main] o.s.jdbc.core.JdbcTemplate               : Executing prepared SQL update\n2017-02-14 21:01:17.184 DEBUG 53055 --- [           main] o.s.jdbc.core.JdbcTemplate               : Executing prepared SQL statement [INSERT INTO account (id, name) VALUES(?,?)]\n2017-02-14 21:01:17.191 DEBUG 53055 --- [           main] o.s.jdbc.core.JdbcTemplate               : SQL update affected 1 rows\n2017-02-14 21:01:17.194 DEBUG 53055 --- [           main] o.s.j.d.DataSourceTransactionManager     : Initiating transaction commit\n2017-02-14 21:01:17.194 DEBUG 53055 --- [           main] o.s.j.d.DataSourceTransactionManager     : Committing JDBC transaction on Connection [ProxyConnection[PooledConnection[conn19: url=jdbc:h2:mem:db1 user=SA]]]\n2017-02-14 21:01:17.201 DEBUG 53055 --- [           main] o.s.j.d.DataSourceTransactionManager     : Releasing JDBC Connection [ProxyConnection[PooledConnection[conn19: url=jdbc:h2:mem:db1 user=SA]]] after transaction\n2017-02-14 21:01:17.201 DEBUG 53055 --- [           main] o.s.jdbc.datasource.DataSourceUtils      : Returning JDBC Connection to DataSource\n2017-02-14 21:01:17.202 DEBUG 53055 --- [           main] o.s.j.d.DataSourceTransactionManager     : Creating new transaction with name [com.example.AccountService.find]: PROPAGATION_REQUIRED,ISOLATION_DEFAULT; ''\n2017-02-14 21:01:17.202 DEBUG 53055 --- [           main] o.s.j.d.DataSourceTransactionManager     : Acquired Connection [ProxyConnection[PooledConnection[conn19: url=jdbc:h2:mem:db1 user=SA]]] for JDBC transaction\n2017-02-14 21:01:17.202 DEBUG 53055 --- [           main] o.s.j.d.DataSourceTransactionManager     : Switching JDBC Connection [ProxyConnection[PooledConnection[conn19: url=jdbc:h2:mem:db1 user=SA]]] to manual commit\n2017-02-14 21:01:17.203 DEBUG 53055 --- [           main] o.s.jdbc.core.JdbcTemplate               : Executing prepared SQL query\n2017-02-14 21:01:17.204 DEBUG 53055 --- [           main] o.s.jdbc.core.JdbcTemplate               : Executing prepared SQL statement [SELECT id, name FROM account WHERE id = ?]\n2017-02-14 21:01:17.219 DEBUG 53055 --- [           main] o.s.j.d.DataSourceTransactionManager     : Initiating transaction commit\n2017-02-14 21:01:17.219 DEBUG 53055 --- [           main] o.s.j.d.DataSourceTransactionManager     : Committing JDBC transaction on Connection [ProxyConnection[PooledConnection[conn19: url=jdbc:h2:mem:db1 user=SA]]]\n2017-02-14 21:01:17.219 DEBUG 53055 --- [           main] o.s.j.d.DataSourceTransactionManager     : Releasing JDBC Connection [ProxyConnection[PooledConnection[conn19: url=jdbc:h2:mem:db1 user=SA]]] after transaction\n2017-02-14 21:01:17.219 DEBUG 53055 --- [           main] o.s.jdbc.datasource.DataSourceUtils      : Returning JDBC Connection to DataSource\n{ID=A000000001, NAME=user01}\n2017-02-14 21:01:17.220 DEBUG 53055 --- [           main] o.s.j.d.DataSourceTransactionManager     : Creating new transaction with name [com.example.AccountService.create]: PROPAGATION_REQUIRED,ISOLATION_DEFAULT; ''\n2017-02-14 21:01:17.220 DEBUG 53055 --- [           main] o.s.j.d.DataSourceTransactionManager     : Acquired Connection [ProxyConnection[PooledConnection[conn29: url=jdbc:h2:mem:db2 user=SA]]] for JDBC transaction\n2017-02-14 21:01:17.220 DEBUG 53055 --- [           main] o.s.j.d.DataSourceTransactionManager     : Switching JDBC Connection [ProxyConnection[PooledConnection[conn29: url=jdbc:h2:mem:db2 user=SA]]] to manual commit\n2017-02-14 21:01:17.220 DEBUG 53055 --- [           main] o.s.jdbc.core.JdbcTemplate               : Executing prepared SQL update\n2017-02-14 21:01:17.220 DEBUG 53055 --- [           main] o.s.jdbc.core.JdbcTemplate               : Executing prepared SQL statement [INSERT INTO account (id, name) VALUES(?,?)]\n2017-02-14 21:01:17.220 DEBUG 53055 --- [           main] o.s.jdbc.core.JdbcTemplate               : SQL update affected 1 rows\n2017-02-14 21:01:17.220 DEBUG 53055 --- [           main] o.s.j.d.DataSourceTransactionManager     : Initiating transaction commit\n2017-02-14 21:01:17.221 DEBUG 53055 --- [           main] o.s.j.d.DataSourceTransactionManager     : Committing JDBC transaction on Connection [ProxyConnection[PooledConnection[conn29: url=jdbc:h2:mem:db2 user=SA]]]\n2017-02-14 21:01:17.221 DEBUG 53055 --- [           main] o.s.j.d.DataSourceTransactionManager     : Releasing JDBC Connection [ProxyConnection[PooledConnection[conn29: url=jdbc:h2:mem:db2 user=SA]]] after transaction\n2017-02-14 21:01:17.221 DEBUG 53055 --- [           main] o.s.jdbc.datasource.DataSourceUtils      : Returning JDBC Connection to DataSource\n2017-02-14 21:01:17.221 DEBUG 53055 --- [           main] o.s.j.d.DataSourceTransactionManager     : Creating new transaction with name [com.example.AccountService.find]: PROPAGATION_REQUIRED,ISOLATION_DEFAULT; ''\n2017-02-14 21:01:17.221 DEBUG 53055 --- [           main] o.s.j.d.DataSourceTransactionManager     : Acquired Connection [ProxyConnection[PooledConnection[conn29: url=jdbc:h2:mem:db2 user=SA]]] for JDBC transaction\n2017-02-14 21:01:17.221 DEBUG 53055 --- [           main] o.s.j.d.DataSourceTransactionManager     : Switching JDBC Connection [ProxyConnection[PooledConnection[conn29: url=jdbc:h2:mem:db2 user=SA]]] to manual commit\n2017-02-14 21:01:17.221 DEBUG 53055 --- [           main] o.s.jdbc.core.JdbcTemplate               : Executing prepared SQL query\n2017-02-14 21:01:17.221 DEBUG 53055 --- [           main] o.s.jdbc.core.JdbcTemplate               : Executing prepared SQL statement [SELECT id, name FROM account WHERE id = ?]\n2017-02-14 21:01:17.222 DEBUG 53055 --- [           main] o.s.j.d.DataSourceTransactionManager     : Initiating transaction commit\n2017-02-14 21:01:17.222 DEBUG 53055 --- [           main] o.s.j.d.DataSourceTransactionManager     : Committing JDBC transaction on Connection [ProxyConnection[PooledConnection[conn29: url=jdbc:h2:mem:db2 user=SA]]]\n2017-02-14 21:01:17.222 DEBUG 53055 --- [           main] o.s.j.d.DataSourceTransactionManager     : Releasing JDBC Connection [ProxyConnection[PooledConnection[conn29: url=jdbc:h2:mem:db2 user=SA]]] after transaction\n2017-02-14 21:01:17.222 DEBUG 53055 --- [           main] o.s.jdbc.datasource.DataSourceUtils      : Returning JDBC Connection to DataSource\n{ID=A000000002, NAME=user02}\n...\n\n\u30ed\u30b0\u3092\u307f\u308b\u3068\u3001Service\u306e\u30e1\u30bd\u30c3\u30c9\u306e\u547c\u3073\u51fa\u3057\u524d\u5f8c\u306b\u30c8\u30e9\u30f3\u30b6\u30af\u30b7\u30e7\u30f3\u5236\u5fa1\u306e\u30ed\u30b0\u304c\u51fa\u3066\u304a\u308a\u3001\u30b7\u30e3\u30fc\u30c9\u30ad\u30fc\u306b\u5bfe\u5fdc\u3059\u308b\u30c7\u30fc\u30bf\u30bd\u30fc\u30b9\u304b\u3089\u53d6\u5f97\u3057\u305fConnection\u304c\u30c8\u30e9\u30f3\u30b6\u30af\u30b7\u30e7\u30f3\u306b\u5272\u308a\u5f53\u3066\u3089\u308c\u3066\u3044\u308b\u3053\u3068\u304c\u78ba\u8a8d\u3067\u304d\u307e\u3059\u3002\n\n\u307e\u3068\u3081\n\u4eca\u56de\u306f\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u30ec\u30a4\u30e4\u3067\u306e\u30b7\u30e3\u30fc\u30c7\u30a3\u30f3\u30b0\u3092\u4f8b\u306b\u3001AbstractRoutingDataSource\u306e\u4f7f\u7528\u65b9\u6cd5\u3092\u7d39\u4ecb\u3057\u3066\u307f\u307e\u3057\u305f\u3002AbstractRoutingDataSource\u306fSpring\u306e\u30ea\u30d5\u30a1\u30ec\u30f3\u30b9\u30da\u30fc\u30b8\u306b\u767b\u5834\u3057\u306a\u3044\u305f\u3081\u5b58\u5728\u304c\u3042\u307e\u308a\u77e5\u3089\u308c\u3066\u3044\u306a\u3044\uff1f\u6c17\u304c\u3057\u307e\u3059\u304c\u3001\u30b7\u30e3\u30fc\u30c7\u30a3\u30f3\u30b0\u306a\u3069\u8907\u6570\u306e\u30c7\u30fc\u30bf\u30bd\u30fc\u30b9\u3092\u52d5\u7684\u306a\u6761\u4ef6\u3067\u5207\u308a\u66ff\u3048\u305f\u3044\u5834\u5408\u306b\u3064\u304b\u3048\u308b\u4fbf\u5229\u306a\u30af\u30e9\u30b9\u3067\u3059\u3002\n\u306a\u304a\u3001\u672c\u30a8\u30f3\u30c8\u30ea\u30fc\u3067\u306f\u30c7\u30fc\u30bf\u30bd\u30fc\u30b9\u306e\u5207\u66ff\u6761\u4ef6\u3068\u306a\u308b\u5024(\u30b7\u30e3\u30fc\u30c9\u30ad\u30fc\uff09\u3092\u30b9\u30ec\u30c3\u30c9\u30ed\u30fc\u30ab\u30eb\u306a\u5909\u6570\u3067\u6301\u3064\u3088\u3046\u5b9f\u88c5\u3057\u307e\u3057\u305f\u304c\u3001\u5207\u308a\u66ff\u3048\u8981\u4ef6\u306b\u5fdc\u3058\u305f\u5b9f\u88c5\u306b\u3059\u308b\u3088\u3046\u306b\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n\n\u53c2\u8003\u30b5\u30a4\u30c8\n\nhttp://terasolunaorg.github.io/guideline/5.2.0.RELEASE/ja/ArchitectureInDetail/DataAccessDetail/DataAccessCommon.html#id14\nhttp://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/jdbc/datasource/lookup/AbstractRoutingDataSource.html\nhttp://qiita.com/kazuki43zoo/items/48061b82933e9b3d4ca8\n\n\u4eca\u56de\u306f\u3001Spring\u304c\u63d0\u4f9b\u3057\u3066\u3044\u308b`AbstractRoutingDataSource` + Spring AOP\u3092\u5229\u7528\u3057\u3066\u3001\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u30ec\u30a4\u30e4\u3067\u30b7\u30e3\u30fc\u30c7\u30a3\u30f3\u30b0\u3063\u307d\u3044\u3053\u3068\u3092\u5b9f\u73fe\u3059\u308b\u65b9\u6cd5\u3092\u7d39\u4ecb\u3057\u307e\u3059\u3002\n\u30b7\u30e3\u30fc\u30c7\u30a3\u30f3\u30b0\u306f\u30c7\u30fc\u30bf\u3092\u8907\u6570\u306e\u30b5\u30fc\u30d0\u306b\uff08\u900f\u904e\u7684\u306b\uff1f\uff09\u5206\u6563\u3055\u305b\u308b\u6a5f\u80fd\u306e\u3053\u3068\u3067\u3001\u8ca0\u8377\u5206\u6563\u306b\u3088\u308b\u6027\u80fd\u5411\u4e0a\u3084\u30ea\u30bd\u30fc\u30b9\u5206\u6563\u306b\u3088\u308b\u30b3\u30b9\u30c8\u30d1\u30d5\u30a9\u30fc\u30de\u30f3\u30b9\u5411\u4e0a\u306a\u3069\u3092\u76ee\u7684\u306b\u4f7f\u3044\u307e\u3059\u3002\u672c\u30a8\u30f3\u30c8\u30ea\u30fc\u3067\u306f\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u30ec\u30a4\u30e4\u3067\u30b7\u30e3\u30fc\u30c7\u30a3\u30f3\u30b0\u3063\u307d\u3044\u3053\u3068\u3092\u5b9f\u73fe\u3059\u308b\u65b9\u6cd5\u3092\u7d39\u4ecb\u3057\u307e\u3059\u304c\u3001RDBMS\u3001NoSQL\u3001KVS\u306a\u3069\u81ea\u4f53\u306b\u30b7\u30e3\u30fc\u30c7\u30a3\u30f3\u30b0\u6a5f\u80fd\u3092\u3082\u3063\u3066\u3044\u308b\u3053\u3068\u3082\u591a\u3044\u305f\u3081\u3001\u307e\u305a\u306f\u30a4\u30f3\u30d5\u30e9\u30b9\u30c8\u30e9\u30af\u30c1\u30e3\u30ec\u30a4\u30e4\u3067\u30b7\u30e3\u30fc\u30c7\u30a3\u30f3\u30b0\u3092\u5b9f\u73fe\u3059\u308b\u65b9\u6cd5\u3092\u691c\u8a0e\u3059\u308b\u65b9\u304c\u3088\u3044\u3068\u601d\u3044\u307e\u3059\uff01\uff01\n\n# \u52d5\u4f5c\u691c\u8a3c\u30d0\u30fc\u30b8\u30e7\u30f3\n\n* Spring Boot 1.5.1.RELEASE\n* Spring Framework 4.3.6.RELEASE\n* H2 Database 1.4.193\n\n# \uff08\u306a\u3093\u3061\u3083\u3063\u3066\uff09\u30b7\u30e3\u30fc\u30c7\u30a3\u30f3\u30b0\u8981\u4ef6\n\n\u30e6\u30fc\u30b6\u30a2\u30ab\u30a6\u30f3\u30c8\u306e\u300c\u30a2\u30ab\u30a6\u30f3\u30c8ID\uff0810\u6841\u56fa\u5b9a\uff09\u300d\u306e\u672b\u5c3e\uff11\u6841\u6bce\u306b\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u3092\u7528\u610f\u3057\u3066\u3001\u30a2\u30ab\u30a6\u30f3\u30c8\u306b\u7d10\u3065\u304f\u30c7\u30fc\u30bf\u3078\u306e\u30a2\u30af\u30bb\u30b9\u3092\u8ca0\u8377\u5206\u6563\u3059\u308b\u3002\uff08\u5b8c\u5168\u306b\u306a\u3093\u3061\u3083\u3063\u3066\u8981\u4ef6\u306a\u306e\u3067\u3001\u5b9f\u969b\u306e\u30b7\u30e3\u30fc\u30c7\u30a3\u30f3\u30b0\u8981\u4ef6\u3092\u6c7a\u3081\u308b\u3068\u304d\u306e\u53c2\u8003\u306b\u3057\u306a\u3044\u3067\u306d :sweat_smile:\uff09\n\u7d75\u306b\u3059\u308b\u5fc5\u8981\u306f\u306a\u3044\u3051\u3069\u30fb\u30fb\u30fb\u2193\u306e\u3088\u3046\u306a\u611f\u3058\u3067\u3059\uff08\u7121\u99c4\u306b\u7d75\u306b\u3057\u3066\u307f\u308b\uff09\u3002\n\n![spring-routing-ds-sharding.png](https://qiita-image-store.s3.amazonaws.com/0/117313/4ca677d4-db91-4539-2db9-1e75a6182d50.png)\n\n\n# `AbstractRoutingDataSource`\u3068Spring AOP\u3092\u4f7f\u7528\u3057\u305f\u900f\u904e\u7684\u306a`DataSource`\u306e\u5207\u66ff\u65b9\u6cd5\n\n\u3055\u301c\uff08\u306a\u3093\u3061\u3083\u3063\u3066\uff09\u30b7\u30e3\u30fc\u30c7\u30a3\u30f3\u30b0\u8981\u4ef6\u3092\u3069\u3046\u3084\u3063\u3066\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u306b\u7d44\u307f\u8fbc\u3080\u304b\u8003\u3048\u3066\u307f\u307e\u3057\u3087\u3046\uff01\uff01\n\u3071\u3063\u3068\u601d\u3044\u3064\u304f\u306e\u306f\u30fb\u30fb\u30fb`Map`\u3092\u4f7f\u3063\u3066\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u540d\u3068`DataSource`\u3092\u7d10\u4ed8\u3051\u3066\u304a\u3044\u3066\u3001DB\u30a2\u30af\u30bb\u30b9\u3059\u308b\u969b\u306b\u30a2\u30ab\u30a6\u30f3\u30c8ID\u306b\u5bfe\u5fdc\u3059\u308b`DataSource`\u3092`Map`\u304b\u3089\u53d6\u5f97\u3059\u308b\u65b9\u6cd5\u3067\u3057\u3087\u3046\u304b\uff1f\n\n\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u3067\u8868\u73fe\u3059\u308b\u3068\u3001\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u611f\u3058\u306b\u306a\u308a\u307e\u3059\u3002\n\u3071\u3063\u3068\u898b\u554f\u984c\u306a\u3055\u305d\u3046\u306b\u898b\u3048\u307e\u3059\u304c\u3001\u30b5\u30fc\u30d3\u30b9\u30af\u30e9\u30b9\uff08\u30a2\u30d7\u30ea\u306e\u6a5f\u80fd\u8981\u4ef6\u3092\u307f\u305f\u3059\u51e6\u7406\u3092\u63d0\u4f9b\u3059\u308b\u30af\u30e9\u30b9\uff09\u306e\u4e2d\u306b\u300c\u30a2\u30ab\u30a6\u30f3\u30c8ID\u306b\u5bfe\u5fdc\u3059\u308b\u30c7\u30fc\u30bf\u30bd\u30fc\u30b9\u3092\u89e3\u6c7a\u3059\u308b\u300d\u3068\u3044\u3046\u6a5f\u80fd\u8981\u4ef6\u306b\u95a2\u4fc2\u306a\u3044\u51e6\u7406\uff08\uff1d\u975e\u6a5f\u80fd\u8981\u4ef6\u3092\u307f\u305f\u3059\u305f\u3081\u306e\u51e6\u7406\uff09\u304c\u5b9f\u88c5\u3055\u308c\u3066\u3057\u307e\u3063\u3066\u3044\u307e\u3059\u30fb\u30fb\u30fb\u3002\n\n```java\n@Service\npublic class AccountService {\n\tprivate final Map<String, DataSource> dataSources;\n\n\tpublic AccountService(Map<String, DataSource> dataSources) {\n\t\tthis.dataSources = dataSources;\n\t}\n\n\tpublic void create(String id, String name) {\n\t\tJdbcTemplate jdbcTemplate = new JdbcTemplate(determineDataSource(id));\n\t\tjdbcTemplate.update(\"INSERT INTO account (id, name) VALUES(?,?)\", id, name);\n\t}\n\n\tpublic Map<String, Object> find(String id) {\n\t\tJdbcTemplate jdbcTemplate = new JdbcTemplate(determineDataSource(id));\n\t\treturn jdbcTemplate.queryForMap(\"SELECT id, name FROM account WHERE id = ?\", id);\n\t}\n\n\tprivate DataSource determineDataSource(String id) { // \u6a5f\u80fd\u8981\u4ef6\u306b\u95a2\u4fc2\u306a\u3044\u51e6\u7406\u30fb\u30fb\u30fb\n\t\tString key = \"db\" + Optional.ofNullable(id)\n\t\t\t.filter(x -> x.length() == 10)\n\t\t\t.map(x -> x.substring(9)).get();\n\t\treturn this.dataSources.get(key);\n\t}\n\n}\n```\n\n\u672c\u6765\u3067\u3042\u308c\u3070\u30fb\u30fb\u30fb\u3001\u30b5\u30fc\u30d3\u30b9\u30af\u30e9\u30b9\u306e\u5b9f\u88c5\u3092\u30b7\u30e3\u30fc\u30c7\u30a3\u30f3\u30b0\u306e\u5b9f\u73fe\u65b9\u6cd5\uff08\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u30ec\u30a4\u30e4 vs \u30a4\u30f3\u30d5\u30e9\u30b9\u30c8\u30e9\u30af\u30c1\u30e3\u30ec\u30a4\u30e4\uff09\u306a\u3069\u306b\u4f9d\u5b58\u3055\u305b\u305f\u304f\u306a\u3044\u306f\u305a\u306a\u306e\u3067\u3001\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u5b9f\u88c5\u306b\u306a\u308b\u306e\u304c\u30d9\u30b9\u30c8\u3060\u3068\u601d\u3044\u307e\u3059\u3002\n\n```java\n@Service\npublic class AccountService {\n\tprivate final JdbcTemplate jdbcTemplate;\n\n\tpublic AccountService(JdbcTemplate jdbcTemplate) {\n\t\tthis.jdbcTemplate = jdbcTemplate;\n\t}\n\n\tpublic void create(String id, String name) {\n\t\tthis.jdbcTemplate.update(\"INSERT INTO account (id, name) VALUES(?,?)\", id, name);\n\t}\n\n\tpublic Map<String, Object> find(String id) {\n\t\treturn this.jdbcTemplate.queryForMap(\"SELECT id, name FROM account WHERE id = ?\", id);\n\t}\n\n}\n```\n\n\u4e0a\u8a18\u306e\u3088\u3046\u306a\u5b9f\u88c5\u306b\u3059\u308b\u305f\u3081\u306b\u767b\u5834\u3059\u308b\u306e\u304c\u3001`AbstractRoutingDataSource`\u3068Spring AOP\u3092\u7d44\u307f\u5408\u308f\u305b\u305f\u65b9\u6cd5\u306b\u306a\u308a\u307e\u3059\u3002\u672c\u30a8\u30f3\u30c8\u30ea\u30fc\u3067\u306f\u3001\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u30af\u30e9\u30b9\u3092\u4f5c\u6210\u3059\u308b\u3053\u3068\u3067\u3001\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u30ec\u30a4\u30e4\u3067\u306e\u30b7\u30e3\u30fc\u30c7\u30a3\u30f3\u30b0\u3092\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\uff08\u30b5\u30fc\u30d3\u30b9\u30af\u30e9\u30b9\uff09\u306b\u5bfe\u3057\u3066\u900f\u904e\u7684\u306b\u7d44\u307f\u8fbc\u3093\u3067\u307f\u307e\u3059\u3002\n\n* `AbstractRoutingDataSource`\u306e\u533f\u540d\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\n* `ShardKeyStore`\u30af\u30e9\u30b9 (\u30b7\u30e3\u30fc\u30c9\u30ad\u30fc\u3092`RoutingDataSource`\u306b\u9023\u643a\u3059\u308b\u305f\u3081\u306e\u5668)\n* `ShardKeyAdvice`\u30af\u30e9\u30b9 (\u30b7\u30e3\u30fc\u30c9\u30ad\u30fc\u3092`ShardKeyStore`\u306b\u683c\u7d0d\u3059\u308bAOP)\n\n\u306a\u304a\u3001\u672c\u30a8\u30f3\u30c8\u30ea\u30fc\u3067\u7d39\u4ecb\u3059\u308b\u5b9f\u73fe\u65b9\u6cd5\u3092\u56f3\u3067\u8868\u73fe\u3059\u308b\u3068\u3001\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u611f\u3058\u306b\u306a\u308a\u307e\u3059\u3002\n\n![spring-routing-ds-sharding-image.png](https://qiita-image-store.s3.amazonaws.com/0/117313/e934ab72-e42c-07c3-65fd-46e62a1d3213.png)\n\n| \u9805\u756a | \u8aac\u660e |\n| :---: | --- |\n| \u2460 | Controller\u304b\u3089Service\u30af\u30e9\u30b9\u306e\u30e1\u30bd\u30c3\u30c9\u3092\u547c\u3073\u51fa\u3059\u3002\u5b9f\u969b\u306b\u306fProxy\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u30e1\u30bd\u30c3\u30c9\u304c\u547c\u3073\u51fa\u3055\u308c\u3001\u30b7\u30e3\u30fc\u30c9\u30ad\u30fc\u3092`AbstractRoutingDataSource`\u306e\u7d99\u627f\u30af\u30e9\u30b9\u306b\u9023\u643a\u3059\u308b\u305f\u3081\u306eAdvice\u30af\u30e9\u30b9(`ShardKeyAdvice`)\u306e\u30e1\u30bd\u30c3\u30c9\u304c\u547c\u3073\u51fa\u3055\u308c\u308b\u3002|\n| \u2461 | `ShardKeyAdvice`\u306f\u3001Service\u30af\u30e9\u30b9\u306e\u30e1\u30bd\u30c3\u30c9\u547c\u3073\u51fa\u3057\u6642\u306b\u6307\u5b9a\u3055\u308c\u305f\u300c\u30a2\u30ab\u30a6\u30f3\u30c8ID\u300d\u3088\u308a\u30b7\u30e3\u30fc\u30c9\u30ad\u30fc\u3092\u8a08\u7b97\u3057\u3066`ShardKeyStore`\u306b\u8a2d\u5b9a\u3057\u305f\u5f8c\u306b\u3001Service\u30af\u30e9\u30b9\u306e\u30e1\u30bd\u30c3\u30c9\u3092\u547c\u3073\u51fa\u3059\u3002|\n| \u2462 | Service\u304b\u3089`JdbcTemplate`\u306e\u30e1\u30bd\u30c3\u30c9\u3092\u547c\u3073\u51fa\u3059\u3002 |\n| \u2463 | `JdbcTemplate`\u306f\u3001`DataSourceUtil#getConnection(DataSource)`\u3092\u4ecb\u3057\u3066`AbstractRoutingDataSource`\u306e\u7d99\u627f\u30af\u30e9\u30b9\u304b\u3089`Connection`\u3092\u53d6\u5f97\u3059\u308b\u3002`AbstractRoutingDataSource`\u306e\u7d99\u627f\u30af\u30e9\u30b9\u3067\u306f\u3001`ShardKeyStore`\u306b\u8a2d\u5b9a\u3055\u308c\u3066\u3044\u308b\u30b7\u30e3\u30fc\u30c9\u30ad\u30fc\u306b\u5bfe\u5fdc\u3059\u308b`DataSource`\u304b\u3089`Connection`\u3092\u53d6\u5f97\u3059\u308b\u3088\u3046\u306b\u5b9f\u88c5\u3059\u308b\u3002|\n| \u2464 | \u53d6\u5f97\u3057\u305f`Connection`\u306e\u30e1\u30bd\u30c3\u30c9\u3092\u4f7f\u7528\u3057\u3066SQL\u306e\u5b9f\u884c\u3092\u4f9d\u983c\u3059\u308b\u3053\u3068\u3067\u3001\u30b7\u30e3\u30fc\u30c9\u30ad\u30fc\u306b\u5bfe\u5fdc\u3059\u308b\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u306b\u30a2\u30af\u30bb\u30b9\u3059\u308b\u3002 |\n\n# \u691c\u8a3c\u7528\u306eSpring Boot\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u306e\u4f5c\u6210\n\n\u5b9f\u969b\u306b\u2191\u3067\u7d39\u4ecb\u3057\u305f\u3088\u3046\u306a\u69cb\u6210\u306e\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u3092\u4f5c\u3063\u3066\u3001\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u30ec\u30a4\u30e4\u3067\u306e\u30b7\u30e3\u30fc\u30c7\u30a3\u30f3\u30b0\u3092\u4f53\u611f\u3057\u3066\u307f\u307e\u3057\u3087\u3046\u3002\n\n\u307e\u305a\u3001\u691c\u8a3c\u7528\u306eSpring Boot\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u4f5c\u6210\u3057\u307e\u3057\u3087\u3046(Dependencie\u306b\u306fjdbc,aop,h2\u3092\u6307\u5b9a)\u3002\u3053\u3053\u3067\u306f\u30b3\u30de\u30f3\u30c9\u30e9\u30a4\u30f3\u3067\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u3092\u4f5c\u6210\u3059\u308b\u4f8b\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u304c\u3001[SPRING INITIALIZR\u306eWeb UI](https://start.spring.io/)\u3084\u304a\u4f7f\u3044\u306eIDE\u306e\u6a5f\u80fd\u3067\u751f\u6210\u3057\u3066\u3082\uff08\u3082\u3061\u308d\u3093\uff09OK\u3067\u3059\uff01\uff01\n\n```\n$ curl -s https://start.spring.io/starter.tgz\\\n       -d name=spring-routing-ds-demo\\\n       -d artifactId=spring-routing-ds-demo\\\n       -d dependencies=jdbc,aop,h2\\\n       -d baseDir=spring-routing-ds-demo\\\n       | tar -xzvf -\n```\n\n\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u3092\u751f\u6210\u3059\u308b\u3068\u3001\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u69cb\u6210\u306eMaven\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u304c\u751f\u6210\u3055\u308c\u307e\u3059\u3002\n\n```\n$ cd spring-routing-ds-demo\n$ tree\n.\n\u251c\u2500\u2500 mvnw\n\u251c\u2500\u2500 mvnw.cmd\n\u251c\u2500\u2500 pom.xml\n\u2514\u2500\u2500 src\n    \u251c\u2500\u2500 main\n    \u2502\u00a0\u00a0 \u251c\u2500\u2500 java\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2514\u2500\u2500 com\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0     \u2514\u2500\u2500 example\n    \u2502\u00a0\u00a0 \u2502\u00a0\u00a0         \u2514\u2500\u2500 SpringRoutingDsDemoApplication.java\n    \u2502\u00a0\u00a0 \u2514\u2500\u2500 resources\n    \u2502\u00a0\u00a0     \u2514\u2500\u2500 application.properties\n    \u2514\u2500\u2500 test\n        \u2514\u2500\u2500 java\n            \u2514\u2500\u2500 com\n                \u2514\u2500\u2500 example\n                    \u2514\u2500\u2500 SpringRoutingDsDemoApplicationTests.java\n```\n\n\u5fc5\u8981\u306b\u5fdc\u3058\u3066\u304a\u4f7f\u3044\u306eIDE\u4e0a\u306b\u30a4\u30f3\u30dd\u30fc\u30c8\u3057\u3066\u304f\u3060\u3055\u3044\uff01\uff01\n\n# \u30c7\u30fc\u30bf\u30d9\u30fc\u30b9(\u30c7\u30fc\u30bf\u30bd\u30fc\u30b9)\u306e\u30bb\u30c3\u30c8\u30a2\u30c3\u30d7\n\n\u4eca\u56de\u306fH2\u306e\u30a4\u30f3\u30e1\u30e2\u30eaDB\u3092\u4f7f\u7528\u3057\u3066\u691c\u8a3c\u3057\u307e\u3059\u3002\n\n```sql:src/main/resources/schema.sql\n  id CHAR(10) PRIMARY KEY,\n  name VARCHAR(255)\n);\n```\n\n\u30c7\u30fc\u30bf\u30bd\u30fc\u30b9\u304c\uff11\u3064\u306e\u5834\u5408\u306f\u3001\u2191\u306e\u3088\u3046\u306b`schema.sql`\u3092\u3064\u304f\u308c\u3070\u81ea\u52d5\u3067\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u3092\u521d\u671f\u5316\u3057\u3066\u304f\u308c\u307e\u3059\u304c\u3001\u4eca\u56de\u306f\u30b7\u30e3\u30fc\u30c7\u30a3\u30f3\u30b0\u7528\u306b\uff11\uff10\u500b\u306e\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\uff08\u30c7\u30fc\u30bf\u30bd\u30fc\u30b9\uff09\u3092\u4f5c\u308b\u5fc5\u8981\u304c\u3042\u308b\u306e\u3067\u3001Spring Boot\u306e\u30c7\u30d5\u30a9\u30eb\u30c8\u306e\u6a5f\u80fd\u306f\u4f7f\u308f\u305a\u306b\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\uff08\u30c7\u30fc\u30bf\u30bd\u30fc\u30b9\uff09\u3092\u30bb\u30c3\u30c8\u30a2\u30c3\u30d7\u3057\u307e\u3059\u3002\n\n\n```java\npackage com.example;\n\nimport java.util.LinkedHashMap;\nimport java.util.List;\nimport java.util.Map;\n\nimport javax.sql.DataSource;\n\nimport org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\nimport org.springframework.boot.autoconfigure.jdbc.DataSourceBuilder;\nimport org.springframework.boot.autoconfigure.jdbc.DataSourceProperties;\nimport org.springframework.boot.context.properties.ConfigurationProperties;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.core.io.ResourceLoader;\nimport org.springframework.jdbc.datasource.init.DatabasePopulatorUtils;\nimport org.springframework.jdbc.datasource.init.ResourceDatabasePopulator;\n\n\n@SpringBootApplication\npublic class SpringRoutingDsDemoApplication {\n\n\tpublic static void main(String[] args) {\n\t\tSpringApplication.run(SpringRoutingDsDemoApplication.class, args);\n\t}\n\n\t// \u2605\u2605\u2605 \u30b7\u30e3\u30fc\u30c7\u30a3\u30f3\u30b0\u691c\u8a3c\u7528\u306e\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\uff08\u30c7\u30fc\u30bf\u30bd\u30fc\u30b9\uff09\u306e\u30bb\u30c3\u30c8\u30a2\u30c3\u30d7 \u2605\u2605\u2605\n\t@Configuration\n\t@ConfigurationProperties(prefix = \"datasource\")\n\tstatic class DataSourceConfiguration {\n\n\t\tprivate final DataSourceProperties properties;\n\t\tprivate final ResourceLoader resourceLoader;\n\t\tprivate List<String> instanceNames;\n\n\t\tDataSourceConfiguration(DataSourceProperties properties, ResourceLoader resourceLoader) {\n\t\t\tthis.properties = properties;\n\t\t\tthis.resourceLoader = resourceLoader;\n\t\t}\n\n\t\tpublic List<String> getInstanceNames() {\n\t\t\treturn instanceNames;\n\t\t}\n\n\t\tpublic void setInstanceNames(List<String> instanceNames) {\n\t\t\tthis.instanceNames = instanceNames;\n\t\t}\n\n\t\t@Bean\n\t\tMap<Object, DataSource> targetDataSources() {\n\t\t\tResourceDatabasePopulator populator = new ResourceDatabasePopulator(\n\t\t\t\t\tthis.resourceLoader.getResource(\"classpath:schema.sql\"));\n\t\t\tMap<Object, DataSource> targetDataSources = new LinkedHashMap<>();\n\t\t\tgetInstanceNames().forEach(name -> {\n\t\t\t\tDataSource dataSource = DataSourceBuilder.create()\n\t\t\t\t\t.driverClassName(this.properties.determineDriverClassName())\n\t\t\t\t\t.url(this.properties.determineUrl().replaceFirst(\"testdb\", name))\n\t\t\t\t\t.username(this.properties.determineUsername())\n\t\t\t\t\t.password(this.properties.determinePassword()).build();\n\t\t\t\tDatabasePopulatorUtils.execute(populator, dataSource);\n\t\t\t\ttargetDataSources.put(name, dataSource);\n\t\t\t});\n\t\t\treturn targetDataSources;\n\t\t}\n\n\t}\n\n}\n```\n\nSpring Boot\u304c\u63d0\u4f9b\u3057\u3066\u3044\u308b\u30c7\u30fc\u30bf\u30bd\u30fc\u30b9\u306e\u521d\u671f\u5316\u6a5f\u80fd\u3092\u7121\u52b9\u5316(`spring.datasource.initialize=false`)\u3057\u3001\u30b7\u30e3\u30fc\u30c7\u30a3\u30f3\u30b0\u7528DB\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u540d\u309210\u500b\u6307\u5b9a\u3059\u308b\u3002\n\n```properties:src/main/resources/application.properties\nspring.datasource.initialize=false\ndatasource.instanceNames=db0,db1,db2,db3,db4,db5,db6,db7,db8,db9\n```\n\n# Service\u30af\u30e9\u30b9\u306e\u4f5c\u6210\n\n\u6a5f\u80fd\u8981\u4ef6\u3092\u307f\u305f\u3059\u305f\u3081\u306e\u51e6\u7406\u3092\u5b9f\u88c5\u3059\u308bService\u30af\u30e9\u30b9\u3092\u4f5c\u6210\u3057\u307e\u3059\u3002\n\n```java\npackage com.example;\n\nimport java.util.Map;\n\nimport org.springframework.jdbc.core.JdbcTemplate;\nimport org.springframework.stereotype.Service;\n\n@Service\npublic class AccountService {\n\tprivate final JdbcTemplate jdbcTemplate;\n\n\tpublic AccountService(JdbcTemplate jdbcTemplate) {\n\t\tthis.jdbcTemplate = jdbcTemplate;\n\t}\n\n\tpublic void create(String id, String name) {\n\t\tthis.jdbcTemplate.update(\"INSERT INTO account (id, name) VALUES(?,?)\", id, name);\n\t}\n\n\tpublic Map<String, Object> find(String id) {\n\t\treturn this.jdbcTemplate.queryForMap(\"SELECT id, name FROM account WHERE id = ?\", id);\n\t}\n\n}\n```\n\n\n# `ShardKeyStore`\u306e\u4f5c\u6210\n\n\u30b7\u30e3\u30fc\u30c9\u30ad\u30fc\u3092\u30b9\u30ec\u30c3\u30c9\u30ed\u30fc\u30ab\u30eb\u306e\u5909\u6570\u306b\u4fdd\u6301\u3059\u308b\u30af\u30e9\u30b9\u3092\u4f5c\u6210\u3057\u307e\u3059\u3002\n\n```java\npackage com.example;\n\nimport org.springframework.stereotype.Component;\n\n@Component\npublic class ShardKeyStore {\n\n\tprivate final ThreadLocal<String> keyStore = new ThreadLocal<>();\n\n\tpublic void set(String key) {\n\t\tthis.keyStore.set(key);\n\t}\n\n\tpublic String get() {\n\t\treturn this.keyStore.get();\n\t}\n\n\tpublic void clear() {\n\t\tthis.keyStore.remove();\n\t}\n}\n```\n\n# `ShardKeyAdvice`\u306e\u4f5c\u6210\n\n\u30b7\u30e3\u30fc\u30c9\u30ad\u30fc\u3092Service\u30af\u30e9\u30b9\u306e\u30e1\u30bd\u30c3\u30c9\u5f15\u6570\uff08\u7b2c\u4e00\u5f15\u6570\uff09\u304b\u3089\u8a08\u7b97\u3057\u3001`ShardKeyStore`\u306b\u8a2d\u5b9a\u3059\u308b\u30af\u30e9\u30b9\u3092\u4f5c\u6210\u3057\u307e\u3059\u3002\n\n```java\npackage com.example;\n\nimport java.util.Optional;\n\nimport org.aspectj.lang.annotation.After;\nimport org.aspectj.lang.annotation.Aspect;\nimport org.aspectj.lang.annotation.Before;\nimport org.springframework.stereotype.Component;\n\n@Aspect\n@Component\npublic class ShardKeyAdvice {\n\n\tprivate final ShardKeyStore shardKeyStore;\n\n\tpublic ShardKeyAdvice(ShardKeyStore shardKeyStore) {\n\t\tthis.shardKeyStore = shardKeyStore;\n\t}\n\n\t// \u2605\u2605\u2605 Service\u30af\u30e9\u30b9\u306e\u30e1\u30bd\u30c3\u30c9\u547c\u3073\u51fa\u3057\u524d\u306b\u300cdb + \u30a2\u30ab\u30a6\u30f3\u30c8ID\u306e\u672b\u5c3e1\u6841\u300d\u3092\u30b7\u30e3\u30fc\u30c9\u30ad\u30fc\u306b\u8a2d\u5b9a \u2605\u2605\u2605\n\t@Before(\"execution(* *..AccountService.*(..)) && args(id,..)\")\n\tpublic void set(String id) {\n\t\tString key = \"db\" + Optional.ofNullable(id)\n\t\t\t.filter(x -> x.length() == 10)\n\t\t\t.map(x -> x.substring(9))\n\t\t\t.get();\n\t\tthis.shardKeyStore.set(key);\n\t}\n\n\t// \u2605\u2605\u2605 Service\u30af\u30e9\u30b9\u306e\u30e1\u30bd\u30c3\u30c9\u547c\u3073\u51fa\u3057\u7d42\u4e86\u5f8c\u306b\u30b7\u30e3\u30fc\u30c9\u30ad\u30fc\u3092\u30af\u30ea\u30a2 \u2605\u2605\u2605\n\t// \u2605\u2605\u2605 \u30b9\u30ec\u30c3\u30c9\u304c\u30d7\u30fc\u30eb\u3055\u308c\u308b\u74b0\u5883\u4e0b\u3067\u306f\u4e0d\u8981\u306b\u306a\u3063\u305f\u3089\u6642\u306b\u30af\u30ea\u30a2\u3059\u308b \u2605\u2605\u2605\n\t@After(\"execution(* *..AccountService.*(..))\")\n\tpublic void clear() {\n\t\tthis.shardKeyStore.clear();\n\t}\n\n}\n```\n\n# `AbstractRoutingDataSource`\u306eBean\u5b9a\u7fa9\n\n\u30b7\u30e3\u30fc\u30c7\u30a3\u30f3\u30b0\u7528\u306e\u30c7\u30fc\u30bf\u30bd\u30fc\u30b9\u3092\u5207\u66ff\u5bfe\u8c61\u306e\u30c7\u30fc\u30bf\u30bd\u30fc\u30b9\u3068\u3057\u3066\u4fdd\u6301\u3059\u308b`AbstractRoutingDataSource`\u306eBean\u3092\u5b9a\u7fa9\u3057\u307e\u3059\u3002\u306a\u304a\u3001\u672c\u30a8\u30f3\u30c8\u30ea\u30fc\u3067\u306f\u30c7\u30d5\u30a9\u30eb\u30c8\u306e\u30c7\u30fc\u30bf\u30bd\u30fc\u30b9\u3092\u8a2d\u5b9a\u3057\u3066\u3044\u307e\u305b\u3093\u304c\u3001\u30b7\u30e3\u30fc\u30c9\u30ad\u30fc\u304c\u672a\u8a2d\u5b9a\u306e\u5834\u5408\u3084\u30b7\u30e3\u30fc\u30c9\u30ad\u30fc\u306b\u5bfe\u5fdc\u3059\u308b\u30c7\u30fc\u30bf\u30bd\u30fc\u30b9\u304c\u898b\u3064\u304b\u3089\u306a\u3044\u5834\u5408\u306b\u4f7f\u3046\u30c7\u30fc\u30bf\u30bd\u30fc\u30b9\u3092\u6307\u5b9a\u3059\u308b\u3053\u3068\u3082\u3067\u304d\u307e\u3059\u3002\n\n\n\n```java\npackage com.example;\n\nimport java.util.LinkedHashMap;\nimport java.util.List;\nimport java.util.Map;\n\nimport javax.sql.DataSource;\n\nimport org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\nimport org.springframework.boot.autoconfigure.jdbc.DataSourceBuilder;\nimport org.springframework.boot.autoconfigure.jdbc.DataSourceProperties;\nimport org.springframework.boot.context.properties.ConfigurationProperties;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.core.io.ResourceLoader;\nimport org.springframework.jdbc.datasource.init.DatabasePopulatorUtils;\nimport org.springframework.jdbc.datasource.init.ResourceDatabasePopulator;\nimport org.springframework.jdbc.datasource.lookup.AbstractRoutingDataSource;\n\n@SpringBootApplication\npublic class SpringRoutingDsDemoApplication {\n\n\tpublic static void main(String[] args) {\n\t\tSpringApplication.run(SpringRoutingDsDemoApplication.class, args);\n\t}\n\n\t@Configuration\n\t@ConfigurationProperties(prefix = \"datasource\")\n\tstatic class DataSourceConfiguration {\n\n\t\tprivate final DataSourceProperties properties;\n\t\tprivate final ResourceLoader resourceLoader;\n\t\tprivate List<String> instanceNames;\n\n\t\tDataSourceConfiguration(DataSourceProperties properties, ResourceLoader resourceLoader) {\n\t\t\tthis.properties = properties;\n\t\t\tthis.resourceLoader = resourceLoader;\n\t\t}\n\n\t\tpublic List<String> getInstanceNames() {\n\t\t\treturn instanceNames;\n\t\t}\n\n\t\tpublic void setInstanceNames(List<String> instanceNames) {\n\t\t\tthis.instanceNames = instanceNames;\n\t\t}\n\n\t\t@Bean\n\t\tMap<Object, DataSource> targetDataSources() {\n\t\t\tResourceDatabasePopulator populator = new ResourceDatabasePopulator(\n\t\t\t\t\tthis.resourceLoader.getResource(\"classpath:schema.sql\"));\n\t\t\tMap<Object, DataSource> targetDataSources = new LinkedHashMap<>();\n\t\t\tgetInstanceNames().forEach(name -> {\n\t\t\t\tDataSource dataSource = DataSourceBuilder.create()\n\t\t\t\t\t.driverClassName(this.properties.determineDriverClassName())\n\t\t\t\t\t.url(this.properties.determineUrl().replaceFirst(\"testdb\", name))\n\t\t\t\t\t.username(this.properties.determineUsername())\n\t\t\t\t\t.password(this.properties.determinePassword()).build();\n\t\t\t\tDatabasePopulatorUtils.execute(populator, dataSource);\n\t\t\t\ttargetDataSources.put(name, dataSource);\n\t\t\t});\n\t\t\treturn targetDataSources;\n\t\t}\n\n\t\t// \u2605\u2605\u2605 AbstractRoutingDataSource\u306eBean\u5b9a\u7fa9 \u2605\u2605\u2605 \n\t\t@Bean\n\t\tDataSource dataSource(ShardKeyStore shardKeyStore) {\n\t\t\tAbstractRoutingDataSource routingDataSource = new AbstractRoutingDataSource() {\n\t\t\t\t@Override\n\t\t\t\tprotected Object determineCurrentLookupKey() {\n\t\t\t\t\treturn shardKeyStore.get(); // \u2605\u2605\u2605 \u30c7\u30fc\u30bf\u30bd\u30fc\u30b9\u306e\u30eb\u30c3\u30af\u30a2\u30c3\u30d7\u30ad\u30fc\u3068\u3057\u3066ShardKeyStore\u306b\u8a2d\u5b9a\u3055\u308c\u3066\u3044\u308b\u30b7\u30e3\u30fc\u30c9\u30ad\u30fc\u3092\u5229\u7528\n\t\t\t\t}\n\t\t\t};\n\t\t\troutingDataSource.setTargetDataSources(new LinkedHashMap<>(targetDataSources())); // \u2605\u2605\u2605 \u30b7\u30e3\u30fc\u30c7\u30a3\u30f3\u30b0\u7528\u306e\u30c7\u30fc\u30bf\u30bd\u30fc\u30b9\u3092\u8a2d\u5b9a\n\t\t\treturn routingDataSource;\n\t\t}\n\n\t}\n\n}\n```\n\n# `CommandLineRunner`\u306e\u5b9f\u88c5\n\nSpring Boot\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u30af\u30e9\u30b9\u306b`CommandLineRunner`\u30a4\u30f3\u30bf\u30d5\u30a7\u30fc\u30b9\u306e`run`\u30e1\u30bd\u30c3\u30c9\u3092\u5b9f\u88c5\u3057\u3001\u5b9f\u969b\u306bDB\u30a2\u30af\u30bb\u30b9\u3057\u3066\u307f\u307e\u3057\u3087\u3046\u3002\n\n```java\npackage com.example;\n\nimport java.util.LinkedHashMap;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.stream.IntStream;\n\nimport javax.sql.DataSource;\n\nimport org.springframework.boot.CommandLineRunner;\nimport org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\nimport org.springframework.boot.autoconfigure.jdbc.DataSourceBuilder;\nimport org.springframework.boot.autoconfigure.jdbc.DataSourceProperties;\nimport org.springframework.boot.context.properties.ConfigurationProperties;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.core.io.ResourceLoader;\nimport org.springframework.jdbc.datasource.init.DatabasePopulatorUtils;\nimport org.springframework.jdbc.datasource.init.ResourceDatabasePopulator;\nimport org.springframework.jdbc.datasource.lookup.AbstractRoutingDataSource;\n\n@SpringBootApplication\npublic class SpringRoutingDsDemoApplication implements CommandLineRunner { // \u2605\u2605\u2605 CommandLineRunner\u3092implements\u306b\u8ffd\u52a0\n\n\tpublic static void main(String[] args) {\n\t\tSpringApplication.run(SpringRoutingDsDemoApplication.class, args);\n\t}\n\n\tprivate final AccountService accountService;\n\n\tpublic SpringRoutingDsDemoApplication(AccountService accountService) {\n\t\tthis.accountService = accountService;\n\t}\n\n\t// \u2605\u2605\u2605 CommandLineRunner\u306erun\u30e1\u30bd\u30c3\u30c9\u3092\u5b9f\u88c5 \u2605\u2605\u2605\n\t@Override\n\tpublic void run(String... args) throws Exception {\n\t\t// A000000001 \u301c A000000010\u306e\u30a2\u30ab\u30a6\u30f3\u30c8ID\u3092\u4f7f\u7528\u3057\u3066DB\u30a2\u30af\u30bb\u30b9(INSERT+SELECT)\u3092\u8a66\u307f\u308b\n\t\tIntStream.range(1, 11).forEach(x -> {\n\t\t\tString id = String.format(\"A0000000%02d\", x);\n\t\t\tthis.accountService.create(id, String.format(\"user%02d\", x));\n\t\t\tSystem.out.println(this.accountService.find(id));\n\t\t});\n\t}\n\n\t@Configuration\n\t@ConfigurationProperties(prefix = \"datasource\")\n\tstatic class DataSourceConfiguration {\n\n\t\tprivate final DataSourceProperties properties;\n\t\tprivate final ResourceLoader resourceLoader;\n\t\tprivate List<String> instanceNames;\n\n\t\tDataSourceConfiguration(DataSourceProperties properties, ResourceLoader resourceLoader) {\n\t\t\tthis.properties = properties;\n\t\t\tthis.resourceLoader = resourceLoader;\n\t\t}\n\n\t\tpublic List<String> getInstanceNames() {\n\t\t\treturn instanceNames;\n\t\t}\n\n\t\tpublic void setInstanceNames(List<String> instanceNames) {\n\t\t\tthis.instanceNames = instanceNames;\n\t\t}\n\n\n\t\t@Bean\n\t\tDataSource dataSource(ShardKeyStore shardKeyStore) {\n\t\t\tAbstractRoutingDataSource routingDataSource = new AbstractRoutingDataSource() {\n\t\t\t\t@Override\n\t\t\t\tprotected Object determineCurrentLookupKey() {\n\t\t\t\t\treturn shardKeyStore.get();\n\t\t\t\t}\n\t\t\t};\n\t\t\troutingDataSource.setTargetDataSources(new LinkedHashMap<>(targetDataSources()));\n\t\t\treturn routingDataSource;\n\t\t}\n\n\t\t@Bean\n\t\tMap<Object, DataSource> targetDataSources() {\n\t\t\tResourceDatabasePopulator populator = new ResourceDatabasePopulator(\n\t\t\t\t\tthis.resourceLoader.getResource(\"classpath:schema.sql\"));\n\t\t\tMap<Object, DataSource> targetDataSources = new LinkedHashMap<>();\n\t\t\tgetInstanceNames().forEach(name -> {\n\t\t\t\tDataSource dataSource = DataSourceBuilder.create()\n\t\t\t\t\t.driverClassName(this.properties.determineDriverClassName())\n\t\t\t\t\t.url(this.properties.determineUrl().replaceFirst(\"testdb\", name))\n\t\t\t\t\t.username(this.properties.determineUsername())\n\t\t\t\t\t.password(this.properties.determinePassword()).build();\n\t\t\t\tDatabasePopulatorUtils.execute(populator, dataSource);\n\t\t\t\ttargetDataSources.put(name, dataSource);\n\t\t\t});\n\t\t\treturn targetDataSources;\n\t\t}\n\n\t}\n\n}\n```\n\nSpring Boot\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u3068\u3057\u3066\u5b9f\u884c\u3059\u308b\u3068\u3001\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u30ed\u30b0\u304c\u30b3\u30f3\u30bd\u30fc\u30eb\u306b\u51fa\u529b\u3055\u308c\u307e\u3059\u3002\n\n```\n$ ./mvnw spring-boot:run\n...\n\n  .   ____          _            __ _ _\n /\\\\ / ___'_ __ _ _(_)_ __  __ _ \\ \\ \\ \\\n( ( )\\___ | '_ | '_| | '_ \\/ _` | \\ \\ \\ \\\n \\\\/  ___)| |_)| | | | | || (_| |  ) ) ) )\n  '  |____| .__|_| |_|_| |_\\__, | / / / /\n =========|_|==============|___/=/_/_/_/\n :: Spring Boot ::        (v1.5.1.RELEASE)\n...\n2017-02-14 19:50:16.211  INFO 52891 --- [           main] s.c.a.AnnotationConfigApplicationContext : Refreshing org.springframework.context.annotation.AnnotationConfigApplicationContext@2bbb6e7f: startup date [Tue Feb 14 19:50:16 JST 2017]; root of context hierarchy\n...\n2017-02-14 19:50:17.789  INFO 52891 --- [           main] o.s.j.e.a.AnnotationMBeanExporter        : Registering beans for JMX exposure on startup\n{ID=A000000001, NAME=user01}\n{ID=A000000002, NAME=user02}\n{ID=A000000003, NAME=user03}\n{ID=A000000004, NAME=user04}\n{ID=A000000005, NAME=user05}\n{ID=A000000006, NAME=user06}\n{ID=A000000007, NAME=user07}\n{ID=A000000008, NAME=user08}\n{ID=A000000009, NAME=user09}\n{ID=A000000010, NAME=user10}\n2017-02-14 19:50:17.876  INFO 52891 --- [           main] c.e.SpringRoutingDsDemoApplication       : Started SpringRoutingDsDemoApplication in 2.32 seconds (JVM running for 6.303)\n...\n```\n\n\u306a\u306b\u3084\u3089\u3001INSERT\u3057\u305f\u30c7\u30fc\u30bf\u304cSELECT\u3067\u304d\u3066\u3044\u308b\u307f\u305f\u3044\u3067\u3059\u304c\u3001\u3061\u3083\u3093\u3068\u30b7\u30e3\u30fc\u30c7\u30a3\u30f3\u30b0\u3067\u304d\u3066\u3044\u308b\u304b\u602a\u3057\u3044\u3068\u3053\u308d\u306a\u306e\u3067\u3001\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u7d42\u4e86\u6642\u306b\u5404\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u306b\u767b\u9332\u3055\u308c\u3066\u3044\u308b\u30ec\u30b3\u30fc\u30c9\u3092\u30c0\u30f3\u30d7\u3059\u308b\u30af\u30e9\u30b9\u3092\u8ffd\u52a0\u3057\u3066\u307f\u307e\u3059\u3002\n\n```java\npackage com.example;\n\nimport java.util.Map;\n\nimport javax.annotation.PreDestroy;\nimport javax.sql.DataSource;\n\nimport org.springframework.jdbc.core.JdbcTemplate;\nimport org.springframework.stereotype.Component;\n\n@Component\npublic class DataSourcesDump {\n\tprivate final Map<Object, DataSource> dataSources;\n\n\tpublic DataSourcesDump(Map<Object, DataSource> dataSources) {\n\t\tthis.dataSources = dataSources;\n\t}\n\n\t@PreDestroy\n\tpublic void dumpOnDestroy() {\n\t\tthis.dataSources.forEach((lookupKey, dataSource) -> {\n\t\t\tSystem.out.println(\"--------------------------\");\n\t\t\tSystem.out.println(\"Lookup Key : \" + lookupKey);\n\t\t\tJdbcTemplate jdbcTemplate = new JdbcTemplate(dataSource);\n\t\t\tjdbcTemplate.queryForList(\"SELECT id, name FROM account ORDER BY id\").forEach(System.out::println);\n\t\t});\n\n\t}\n\n}\n```\n\n\u518d\u5ea6Spring Boot\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u3068\u3057\u3066\u5b9f\u884c\u3059\u308b\u3068\u3001\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u30ed\u30b0\u304c\u30b3\u30f3\u30bd\u30fc\u30eb\u306b\u51fa\u529b\u3055\u308c\u3001\u30b7\u30e3\u30fc\u30c7\u30a3\u30f3\u30b0\u304c\u6b63\u3057\u304f\u884c\u308f\u308c\u3066\u3044\u308b\u3053\u3068\u304c\u78ba\u8a8d\u3067\u304d\u307e\u3059\u3002\n\n```\n$ ./mvnw spring-boot:run\n...\n[INFO] ------------------------------------------------------------------------\n[INFO] BUILD SUCCESS\n[INFO] ------------------------------------------------------------------------\n[INFO] Total time: 4.145 s\n[INFO] Finished at: 2017-02-14T19:59:10+09:00\n[INFO] Final Memory: 24M/393M\n[INFO] ------------------------------------------------------------------------\n2017-02-14 19:59:10.841  INFO 52928 --- [       Thread-3] s.c.a.AnnotationConfigApplicationContext : Closing org.springframework.context.annotation.AnnotationConfigApplicationContext@25c20220: startup date [Tue Feb 14 19:59:09 JST 2017]; root of context hierarchy\n2017-02-14 19:59:10.842  INFO 52928 --- [       Thread-3] o.s.j.e.a.AnnotationMBeanExporter        : Unregistering JMX-exposed beans on shutdown\n--------------------------\nLookup Key : db0\n{ID=A000000010, NAME=user10}\n--------------------------\nLookup Key : db1\n{ID=A000000001, NAME=user01}\n--------------------------\nLookup Key : db2\n{ID=A000000002, NAME=user02}\n--------------------------\nLookup Key : db3\n{ID=A000000003, NAME=user03}\n--------------------------\nLookup Key : db4\n{ID=A000000004, NAME=user04}\n--------------------------\nLookup Key : db5\n{ID=A000000005, NAME=user05}\n--------------------------\nLookup Key : db6\n{ID=A000000006, NAME=user06}\n--------------------------\nLookup Key : db7\n{ID=A000000007, NAME=user07}\n--------------------------\nLookup Key : db8\n{ID=A000000008, NAME=user08}\n--------------------------\nLookup Key : db9\n{ID=A000000009, NAME=user09}\n```\n\n# \u30c8\u30e9\u30f3\u30b6\u30af\u30b7\u30e7\u30f3\u7ba1\u7406\u914d\u4e0b\u3067\u306e\u5229\u7528\n\n\u3053\u3053\u307e\u3067\u306e\u30b5\u30f3\u30d7\u30eb\u3067\u306f\u30c8\u30e9\u30f3\u30b6\u30af\u30b7\u30e7\u30f3\u7ba1\u7406\u3057\u3066\u3044\u307e\u305b\u3093\u304c\u3001\u5b9f\u969b\u306e\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u3060\u3068\u78ba\u5b9f\u306b\u30c8\u30e9\u30f3\u30b6\u30af\u30b7\u30e7\u30f3\u5236\u5fa1\u304c\u5fc5\u8981\u306b\u306a\u308a\u307e\u3059\u3002\u30c8\u30e9\u30f3\u30b6\u30af\u30b7\u30e7\u30f3\u7ba1\u7406\u4e0b\u3067Service\u30af\u30e9\u30b9\u3092\u5b9f\u884c\u3059\u308b\u5834\u5408\u306f\u3001\u30af\u30e9\u30b9\u307e\u305f\u306f\u30e1\u30bd\u30c3\u30c9\u306b`@Transactional`\u3092\u4ed8\u4e0e\u3059\u308b\u3060\u3051\u3067\u3059\u3002\n\n> **Note:**\n>\n> Spring\u304c\u63d0\u4f9b\u3059\u308bDB\u30a2\u30af\u30bb\u30b9\u6a5f\u80fd(Spring JDBC)\u306e\u30ed\u30b0(\u30c7\u30d0\u30c3\u30b0\u30ed\u30b0)\u3092\u51fa\u529b\u3059\u308b\u3088\u3046\u306b\u3057\u3066\u304a\u304f\u3068\u3001\u30c8\u30e9\u30f3\u30b6\u30af\u30b7\u30e7\u30f3\u304c\u5b9f\u969b\u306b\u3069\u306e\u3088\u3046\u306b\u50cd\u3044\u3066\u3044\u308b\u304b\u78ba\u8a8d\u3057\u3084\u3059\u304f\u306a\u308a\u307e\u3059\u3002\n>\n> ```properties:src/main/resources/application.properteis\n> logging.level.org.springframework.jdbc=debug\n> ```\n\n```java\npackage com.example;\n\nimport java.util.Map;\n\nimport org.springframework.jdbc.core.JdbcTemplate;\nimport org.springframework.stereotype.Service;\nimport org.springframework.transaction.annotation.Transactional;\n\n@Service\n@Transactional // \u2605\u2605\u2605 \u8ffd\u52a0 \u2605\u2605\u2605 \npublic class AccountService {\n\tprivate final JdbcTemplate jdbcTemplate;\n\n\tpublic AccountService(JdbcTemplate jdbcTemplate) {\n\t\tthis.jdbcTemplate = jdbcTemplate;\n\t}\n\n\tpublic void create(String id, String name) {\n\t\tthis.jdbcTemplate.update(\"INSERT INTO account (id, name) VALUES(?,?)\", id, name);\n\t}\n\n\tpublic Map<String, Object> find(String id) {\n\t\treturn this.jdbcTemplate.queryForMap(\"SELECT id, name FROM account WHERE id = ?\", id);\n\t}\n\n}\n```\n\n\u5b9f\u969b\u306b\u52d5\u304b\u3057\u3066\u30c8\u30e9\u30f3\u30b6\u30af\u30b7\u30e7\u30f3\u304c\u52b9\u3044\u3066\u3044\u308b\u3053\u3068\u3092\u78ba\u8a8d\u3059\u308b\u305f\u3081\u306bSpring Boot\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u3092\u8d77\u52d5\u3057\u3066\u307f\u308b\u3068\u30fb\u30fb\u30fb\u306a\u3093\u3068\u3001\u307e\u301c\u30a8\u30e9\u30fc\u306b\u306a\u3063\u3061\u3083\u3044\u307e\u3057\u305f\u30fb\u30fb\u30fb:scream: :scream: :scream:\n\n```\n$ ./mvnw spring-boot:run\n...\n2017-02-14 20:30:36.919 ERROR 53003 --- [           main] o.s.boot.SpringApplication               : Application startup failed\n\njava.lang.IllegalStateException: Failed to execute CommandLineRunner\n\tat org.springframework.boot.SpringApplication.callRunner(SpringApplication.java:779) [spring-boot-1.5.1.RELEASE.jar:1.5.1.RELEASE]\n\tat org.springframework.boot.SpringApplication.callRunners(SpringApplication.java:760) [spring-boot-1.5.1.RELEASE.jar:1.5.1.RELEASE]\n\tat org.springframework.boot.SpringApplication.afterRefresh(SpringApplication.java:747) [spring-boot-1.5.1.RELEASE.jar:1.5.1.RELEASE]\n\tat org.springframework.boot.SpringApplication.run(SpringApplication.java:315) [spring-boot-1.5.1.RELEASE.jar:1.5.1.RELEASE]\n\tat org.springframework.boot.SpringApplication.run(SpringApplication.java:1162) [spring-boot-1.5.1.RELEASE.jar:1.5.1.RELEASE]\n\tat org.springframework.boot.SpringApplication.run(SpringApplication.java:1151) [spring-boot-1.5.1.RELEASE.jar:1.5.1.RELEASE]\n\tat com.example.SpringRoutingDsDemoApplication.main(SpringRoutingDsDemoApplication.java:27) [classes/:na]\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[na:1.8.0_121]\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[na:1.8.0_121]\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:1.8.0_121]\n\tat java.lang.reflect.Method.invoke(Method.java:498) ~[na:1.8.0_121]\n\tat org.springframework.boot.maven.AbstractRunMojo$LaunchRunner.run(AbstractRunMojo.java:527) [spring-boot-maven-plugin-1.5.1.RELEASE.jar:1.5.1.RELEASE]\n\tat java.lang.Thread.run(Thread.java:745) [na:1.8.0_121]\nCaused by: org.springframework.transaction.CannotCreateTransactionException: Could not open JDBC Connection for transaction; nested exception is java.lang.IllegalStateException: Cannot determine target DataSource for lookup key [null]\n\tat org.springframework.jdbc.datasource.DataSourceTransactionManager.doBegin(DataSourceTransactionManager.java:252) ~[spring-jdbc-4.3.6.RELEASE.jar:4.3.6.RELEASE]\n\tat org.springframework.transaction.support.AbstractPlatformTransactionManager.getTransaction(AbstractPlatformTransactionManager.java:373) ~[spring-tx-4.3.6.RELEASE.jar:4.3.6.RELEASE]\n\tat org.springframework.transaction.interceptor.TransactionAspectSupport.createTransactionIfNecessary(TransactionAspectSupport.java:447) ~[spring-tx-4.3.6.RELEASE.jar:4.3.6.RELEASE]\n\tat org.springframework.transaction.interceptor.TransactionAspectSupport.invokeWithinTransaction(TransactionAspectSupport.java:277) ~[spring-tx-4.3.6.RELEASE.jar:4.3.6.RELEASE]\n\tat org.springframework.transaction.interceptor.TransactionInterceptor.invoke(TransactionInterceptor.java:96) ~[spring-tx-4.3.6.RELEASE.jar:4.3.6.RELEASE]\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:179) ~[spring-aop-4.3.6.RELEASE.jar:4.3.6.RELEASE]\n\tat org.springframework.aop.interceptor.ExposeInvocationInterceptor.invoke(ExposeInvocationInterceptor.java:92) ~[spring-aop-4.3.6.RELEASE.jar:4.3.6.RELEASE]\n\tat org.springframework.aop.framework.ReflectiveMethodInvocation.proceed(ReflectiveMethodInvocation.java:179) ~[spring-aop-4.3.6.RELEASE.jar:4.3.6.RELEASE]\n\tat org.springframework.aop.framework.CglibAopProxy$DynamicAdvisedInterceptor.intercept(CglibAopProxy.java:656) ~[spring-aop-4.3.6.RELEASE.jar:4.3.6.RELEASE]\n\tat com.example.AccountService$$EnhancerBySpringCGLIB$$2c13cf6f.create(<generated>) ~[classes/:na]\n\tat com.example.SpringRoutingDsDemoApplication.lambda$run$0(SpringRoutingDsDemoApplication.java:40) [classes/:na]\n\tat java.util.stream.Streams$RangeIntSpliterator.forEachRemaining(Streams.java:110) ~[na:1.8.0_121]\n\tat java.util.stream.IntPipeline$Head.forEach(IntPipeline.java:557) ~[na:1.8.0_121]\n\tat com.example.SpringRoutingDsDemoApplication.run(SpringRoutingDsDemoApplication.java:38) [classes/:na]\n\tat org.springframework.boot.SpringApplication.callRunner(SpringApplication.java:776) [spring-boot-1.5.1.RELEASE.jar:1.5.1.RELEASE]\n\t... 12 common frames omitted\nCaused by: java.lang.IllegalStateException: Cannot determine target DataSource for lookup key [null]\n\tat org.springframework.jdbc.datasource.lookup.AbstractRoutingDataSource.determineTargetDataSource(AbstractRoutingDataSource.java:202) ~[spring-jdbc-4.3.6.RELEASE.jar:4.3.6.RELEASE]\n\tat org.springframework.jdbc.datasource.lookup.AbstractRoutingDataSource.getConnection(AbstractRoutingDataSource.java:164) ~[spring-jdbc-4.3.6.RELEASE.jar:4.3.6.RELEASE]\n\tat org.springframework.jdbc.datasource.DataSourceTransactionManager.doBegin(DataSourceTransactionManager.java:211) ~[spring-jdbc-4.3.6.RELEASE.jar:4.3.6.RELEASE]\n\t... 26 common frames omitted\n...\n```\n\n\u30ed\u30b0\u3092\u307f\u308b\u3068\u3001\u30c7\u30fc\u30bf\u30bd\u30fc\u30b9\u306e\u30eb\u30c3\u30ad\u30a2\u30c3\u30d7\u30ad\u30fc\uff08\u3064\u307e\u308a\u30b7\u30e3\u30fc\u30c9\u30ad\u30fc\uff09\u304c\u89e3\u6c7a\u3067\u304d\u3066\u3044\u306a\u3044\u3053\u3068\u304c\u539f\u56e0\u306e\u3088\u3046\u3067\u3059\u3002\u306a\u305c\u30b7\u30e3\u30fc\u30c9\u30ad\u30fc\u304c\u89e3\u6c7a\u3067\u304d\u306a\u304b\u3063\u305f\u304b\u3068\u3044\u3046\u3068\u30fb\u30fb\u30fb`TransactionInterceptor`\u304c`ShardKeyAdvice`\u3088\u308a\u524d\u306b\u5b9f\u884c\u3055\u308c\u3066\u3057\u307e\u3063\u305f\u304b\u3089\u3067\u3001\u4e0b\u8a18\u306e\u56f3\u3067\u793a\u3059\u3088\u3046\u306b`ShardKeyAdvice` -> `TransactionInterceptor`\u306e\u9806\u756a\u3067\u9069\u7528\u3055\u308c\u306a\u3044\u3068\u30c0\u30e1\u306a\u3093\u3067\u3059\u3002\n\n![spring-routing-ds-sharding-tx-image.png](https://qiita-image-store.s3.amazonaws.com/0/117313/f451ac32-c622-3ef8-e1a3-dcbdd0b2530f.png)\n\n\u5177\u4f53\u7684\u306b\u306f\u3001`ShardKeyAdvice`\u306e\u512a\u5148\u5ea6\u3092\u8abf\u6574\u3059\u308b\u3053\u3068\u3067\u3001`TransactionInterceptor`\u3088\u308a\u524d\u306b`ShardKeyAdvice`\u304c\u9069\u7528\u3055\u308c\u308b\u3088\u3046\u306b\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\nSpring Boot\u306e\u81ea\u52d5\u30b3\u30f3\u30d5\u30a3\u30ae\u30e5\u30ec\u30fc\u30b7\u30e7\u30f3\u306e\u4ed5\u7d44\u307f\u3092\u5229\u7528\u3057\u3066`TransactionInterceptor`\u3092\u30bb\u30c3\u30c8\u30a2\u30c3\u30d7\u3057\u305f\u5834\u5408\u306f\u3001`TransactionInterceptor`\u306e\u512a\u5148\u9806\u306f\u6700\u4f4e\uff08`Ordered.LOWEST_PRECEDENCE`\uff09\u306b\u306a\u308b\u305f\u3081\u3001`ShardKeyAdvice`\u306e\u512a\u5148\u9806\u3092\u300c`Ordered.LOWEST_PRECEDENCE -1`\u300d(\u512a\u5148\u9806\u304c\u9ad8\u304f\u306a\u308b\u5024)\u306b\u3059\u308c\u3070OK\u3067\u3059\u3002\n\n> **Note:**\n>\n> Spring Boot\u306e\u81ea\u52d5\u30b3\u30f3\u30d5\u30a3\u30ae\u30e5\u30ec\u30fc\u30b7\u30e7\u30f3\u306e\u4ed5\u7d44\u307f\u3092\u5229\u7528\u3057\u306a\u3044\u3067\u660e\u793a\u7684\u306b`@EnableTransactionManagement`\u3092\u6307\u5b9a\u3057\u3066\u3044\u308b\u5834\u5408\u306f\u3001`@EnableTransactionManagement`\u306e`order`\u5c5e\u6027\u306b\u6307\u5b9a\u3057\u3066\u3044\u308b\u5024\u3088\u308a\u5c0f\u3055\u3044\u5024\u3092\u6307\u5b9a\u3059\u308b\u3088\u3046\u306b\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n\n```java\npackage com.example;\n\nimport java.util.Optional;\n\nimport org.aspectj.lang.annotation.After;\nimport org.aspectj.lang.annotation.Aspect;\nimport org.aspectj.lang.annotation.Before;\nimport org.springframework.core.Ordered;\nimport org.springframework.core.annotation.Order;\nimport org.springframework.stereotype.Component;\n\n@Aspect\n@Component\n@Order(Ordered.LOWEST_PRECEDENCE - 1) // \u2605\u2605\u2605 \u512a\u5148\u9806\u3092\u6307\u5b9a \u2605\u2605\u2605\npublic class ShardKeyAdvice {\n\n\tprivate final ShardKeyStore shardKeyStore;\n\n\tpublic ShardKeyAdvice(ShardKeyStore shardKeyStore) {\n\t\tthis.shardKeyStore = shardKeyStore;\n\t}\n\n\t@Before(\"execution(* *..AccountService.*(..)) && args(id,..)\")\n\tpublic void set(String id) {\n\t\tString key = \"db\" + Optional.ofNullable(id)\n            .filter(x -> x.length() == 10)\n            .map(x -> x.substring(9))\n            .get();\n\t\tthis.shardKeyStore.set(key);\n\t}\n\n\t@After(\"execution(* *..AccountService.*(..))\")\n\tpublic void clear() {\n\t\tthis.shardKeyStore.clear();\n\t}\n\n}\n```\n\n\u512a\u5148\u5ea6\u3092\u5909\u66f4\u3057\u305f\u3089Spring Boot\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u3092\u8d77\u52d5\u3057\u3066\u3001\u30c8\u30e9\u30f3\u30b6\u30af\u30b7\u30e7\u30f3\u7ba1\u7406\u4e0b\u3067\u30b7\u30e3\u30fc\u30c7\u30a3\u30f3\u30b0\u304c\u9069\u7528\u3055\u308c\u3066\u3044\u308b\u3053\u3068\u3092\u78ba\u8a8d\u3057\u3066\u307f\u307e\u3057\u3087\u3046\u3002Spring JDBC\u306e\u30c7\u30d0\u30c3\u30b0\u30ed\u30b0\u3092\u51fa\u529b\u3059\u308b\u3088\u3046\u306b\u3057\u305f\u3053\u3068\u3067\u5927\u91cf\u306e\u30ed\u30b0\u304c\u51fa\u529b\u3055\u308c\u308b\u3088\u3046\u306b\u306a\u3063\u305f\u306e\u3067\u3001\u3053\u3053\u3067\u306f\u6700\u521d\u306e\uff12\u4ef6\u5206\u306e\u30ed\u30b0\u306e\u307f\u63b2\u8f09\u3057\u307e\u3059\u3002\n\n```\n./mvnw spring-boot:run\n...\n2017-02-14 21:01:17.173 DEBUG 53055 --- [           main] o.s.j.d.DataSourceTransactionManager     : Creating new transaction with name [com.example.AccountService.create]: PROPAGATION_REQUIRED,ISOLATION_DEFAULT; ''\n2017-02-14 21:01:17.174 DEBUG 53055 --- [           main] o.s.j.d.DataSourceTransactionManager     : Acquired Connection [ProxyConnection[PooledConnection[conn19: url=jdbc:h2:mem:db1 user=SA]]] for JDBC transaction\n2017-02-14 21:01:17.176 DEBUG 53055 --- [           main] o.s.j.d.DataSourceTransactionManager     : Switching JDBC Connection [ProxyConnection[PooledConnection[conn19: url=jdbc:h2:mem:db1 user=SA]]] to manual commit\n2017-02-14 21:01:17.184 DEBUG 53055 --- [           main] o.s.jdbc.core.JdbcTemplate               : Executing prepared SQL update\n2017-02-14 21:01:17.184 DEBUG 53055 --- [           main] o.s.jdbc.core.JdbcTemplate               : Executing prepared SQL statement [INSERT INTO account (id, name) VALUES(?,?)]\n2017-02-14 21:01:17.191 DEBUG 53055 --- [           main] o.s.jdbc.core.JdbcTemplate               : SQL update affected 1 rows\n2017-02-14 21:01:17.194 DEBUG 53055 --- [           main] o.s.j.d.DataSourceTransactionManager     : Initiating transaction commit\n2017-02-14 21:01:17.194 DEBUG 53055 --- [           main] o.s.j.d.DataSourceTransactionManager     : Committing JDBC transaction on Connection [ProxyConnection[PooledConnection[conn19: url=jdbc:h2:mem:db1 user=SA]]]\n2017-02-14 21:01:17.201 DEBUG 53055 --- [           main] o.s.j.d.DataSourceTransactionManager     : Releasing JDBC Connection [ProxyConnection[PooledConnection[conn19: url=jdbc:h2:mem:db1 user=SA]]] after transaction\n2017-02-14 21:01:17.201 DEBUG 53055 --- [           main] o.s.jdbc.datasource.DataSourceUtils      : Returning JDBC Connection to DataSource\n2017-02-14 21:01:17.202 DEBUG 53055 --- [           main] o.s.j.d.DataSourceTransactionManager     : Creating new transaction with name [com.example.AccountService.find]: PROPAGATION_REQUIRED,ISOLATION_DEFAULT; ''\n2017-02-14 21:01:17.202 DEBUG 53055 --- [           main] o.s.j.d.DataSourceTransactionManager     : Acquired Connection [ProxyConnection[PooledConnection[conn19: url=jdbc:h2:mem:db1 user=SA]]] for JDBC transaction\n2017-02-14 21:01:17.202 DEBUG 53055 --- [           main] o.s.j.d.DataSourceTransactionManager     : Switching JDBC Connection [ProxyConnection[PooledConnection[conn19: url=jdbc:h2:mem:db1 user=SA]]] to manual commit\n2017-02-14 21:01:17.203 DEBUG 53055 --- [           main] o.s.jdbc.core.JdbcTemplate               : Executing prepared SQL query\n2017-02-14 21:01:17.204 DEBUG 53055 --- [           main] o.s.jdbc.core.JdbcTemplate               : Executing prepared SQL statement [SELECT id, name FROM account WHERE id = ?]\n2017-02-14 21:01:17.219 DEBUG 53055 --- [           main] o.s.j.d.DataSourceTransactionManager     : Initiating transaction commit\n2017-02-14 21:01:17.219 DEBUG 53055 --- [           main] o.s.j.d.DataSourceTransactionManager     : Committing JDBC transaction on Connection [ProxyConnection[PooledConnection[conn19: url=jdbc:h2:mem:db1 user=SA]]]\n2017-02-14 21:01:17.219 DEBUG 53055 --- [           main] o.s.j.d.DataSourceTransactionManager     : Releasing JDBC Connection [ProxyConnection[PooledConnection[conn19: url=jdbc:h2:mem:db1 user=SA]]] after transaction\n2017-02-14 21:01:17.219 DEBUG 53055 --- [           main] o.s.jdbc.datasource.DataSourceUtils      : Returning JDBC Connection to DataSource\n{ID=A000000001, NAME=user01}\n2017-02-14 21:01:17.220 DEBUG 53055 --- [           main] o.s.j.d.DataSourceTransactionManager     : Creating new transaction with name [com.example.AccountService.create]: PROPAGATION_REQUIRED,ISOLATION_DEFAULT; ''\n2017-02-14 21:01:17.220 DEBUG 53055 --- [           main] o.s.j.d.DataSourceTransactionManager     : Acquired Connection [ProxyConnection[PooledConnection[conn29: url=jdbc:h2:mem:db2 user=SA]]] for JDBC transaction\n2017-02-14 21:01:17.220 DEBUG 53055 --- [           main] o.s.j.d.DataSourceTransactionManager     : Switching JDBC Connection [ProxyConnection[PooledConnection[conn29: url=jdbc:h2:mem:db2 user=SA]]] to manual commit\n2017-02-14 21:01:17.220 DEBUG 53055 --- [           main] o.s.jdbc.core.JdbcTemplate               : Executing prepared SQL update\n2017-02-14 21:01:17.220 DEBUG 53055 --- [           main] o.s.jdbc.core.JdbcTemplate               : Executing prepared SQL statement [INSERT INTO account (id, name) VALUES(?,?)]\n2017-02-14 21:01:17.220 DEBUG 53055 --- [           main] o.s.jdbc.core.JdbcTemplate               : SQL update affected 1 rows\n2017-02-14 21:01:17.220 DEBUG 53055 --- [           main] o.s.j.d.DataSourceTransactionManager     : Initiating transaction commit\n2017-02-14 21:01:17.221 DEBUG 53055 --- [           main] o.s.j.d.DataSourceTransactionManager     : Committing JDBC transaction on Connection [ProxyConnection[PooledConnection[conn29: url=jdbc:h2:mem:db2 user=SA]]]\n2017-02-14 21:01:17.221 DEBUG 53055 --- [           main] o.s.j.d.DataSourceTransactionManager     : Releasing JDBC Connection [ProxyConnection[PooledConnection[conn29: url=jdbc:h2:mem:db2 user=SA]]] after transaction\n2017-02-14 21:01:17.221 DEBUG 53055 --- [           main] o.s.jdbc.datasource.DataSourceUtils      : Returning JDBC Connection to DataSource\n2017-02-14 21:01:17.221 DEBUG 53055 --- [           main] o.s.j.d.DataSourceTransactionManager     : Creating new transaction with name [com.example.AccountService.find]: PROPAGATION_REQUIRED,ISOLATION_DEFAULT; ''\n2017-02-14 21:01:17.221 DEBUG 53055 --- [           main] o.s.j.d.DataSourceTransactionManager     : Acquired Connection [ProxyConnection[PooledConnection[conn29: url=jdbc:h2:mem:db2 user=SA]]] for JDBC transaction\n2017-02-14 21:01:17.221 DEBUG 53055 --- [           main] o.s.j.d.DataSourceTransactionManager     : Switching JDBC Connection [ProxyConnection[PooledConnection[conn29: url=jdbc:h2:mem:db2 user=SA]]] to manual commit\n2017-02-14 21:01:17.221 DEBUG 53055 --- [           main] o.s.jdbc.core.JdbcTemplate               : Executing prepared SQL query\n2017-02-14 21:01:17.221 DEBUG 53055 --- [           main] o.s.jdbc.core.JdbcTemplate               : Executing prepared SQL statement [SELECT id, name FROM account WHERE id = ?]\n2017-02-14 21:01:17.222 DEBUG 53055 --- [           main] o.s.j.d.DataSourceTransactionManager     : Initiating transaction commit\n2017-02-14 21:01:17.222 DEBUG 53055 --- [           main] o.s.j.d.DataSourceTransactionManager     : Committing JDBC transaction on Connection [ProxyConnection[PooledConnection[conn29: url=jdbc:h2:mem:db2 user=SA]]]\n2017-02-14 21:01:17.222 DEBUG 53055 --- [           main] o.s.j.d.DataSourceTransactionManager     : Releasing JDBC Connection [ProxyConnection[PooledConnection[conn29: url=jdbc:h2:mem:db2 user=SA]]] after transaction\n2017-02-14 21:01:17.222 DEBUG 53055 --- [           main] o.s.jdbc.datasource.DataSourceUtils      : Returning JDBC Connection to DataSource\n{ID=A000000002, NAME=user02}\n...\n```\n\n\u30ed\u30b0\u3092\u307f\u308b\u3068\u3001Service\u306e\u30e1\u30bd\u30c3\u30c9\u306e\u547c\u3073\u51fa\u3057\u524d\u5f8c\u306b\u30c8\u30e9\u30f3\u30b6\u30af\u30b7\u30e7\u30f3\u5236\u5fa1\u306e\u30ed\u30b0\u304c\u51fa\u3066\u304a\u308a\u3001\u30b7\u30e3\u30fc\u30c9\u30ad\u30fc\u306b\u5bfe\u5fdc\u3059\u308b\u30c7\u30fc\u30bf\u30bd\u30fc\u30b9\u304b\u3089\u53d6\u5f97\u3057\u305f`Connection`\u304c\u30c8\u30e9\u30f3\u30b6\u30af\u30b7\u30e7\u30f3\u306b\u5272\u308a\u5f53\u3066\u3089\u308c\u3066\u3044\u308b\u3053\u3068\u304c\u78ba\u8a8d\u3067\u304d\u307e\u3059\u3002\n\n\n# \u307e\u3068\u3081\n\n\u4eca\u56de\u306f\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u30ec\u30a4\u30e4\u3067\u306e\u30b7\u30e3\u30fc\u30c7\u30a3\u30f3\u30b0\u3092\u4f8b\u306b\u3001`AbstractRoutingDataSource`\u306e\u4f7f\u7528\u65b9\u6cd5\u3092\u7d39\u4ecb\u3057\u3066\u307f\u307e\u3057\u305f\u3002`AbstractRoutingDataSource`\u306fSpring\u306e\u30ea\u30d5\u30a1\u30ec\u30f3\u30b9\u30da\u30fc\u30b8\u306b\u767b\u5834\u3057\u306a\u3044\u305f\u3081\u5b58\u5728\u304c\u3042\u307e\u308a\u77e5\u3089\u308c\u3066\u3044\u306a\u3044\uff1f\u6c17\u304c\u3057\u307e\u3059\u304c\u3001\u30b7\u30e3\u30fc\u30c7\u30a3\u30f3\u30b0\u306a\u3069\u8907\u6570\u306e\u30c7\u30fc\u30bf\u30bd\u30fc\u30b9\u3092\u52d5\u7684\u306a\u6761\u4ef6\u3067\u5207\u308a\u66ff\u3048\u305f\u3044\u5834\u5408\u306b\u3064\u304b\u3048\u308b\u4fbf\u5229\u306a\u30af\u30e9\u30b9\u3067\u3059\u3002\n\u306a\u304a\u3001\u672c\u30a8\u30f3\u30c8\u30ea\u30fc\u3067\u306f\u30c7\u30fc\u30bf\u30bd\u30fc\u30b9\u306e\u5207\u66ff\u6761\u4ef6\u3068\u306a\u308b\u5024(\u30b7\u30e3\u30fc\u30c9\u30ad\u30fc\uff09\u3092\u30b9\u30ec\u30c3\u30c9\u30ed\u30fc\u30ab\u30eb\u306a\u5909\u6570\u3067\u6301\u3064\u3088\u3046\u5b9f\u88c5\u3057\u307e\u3057\u305f\u304c\u3001\u5207\u308a\u66ff\u3048\u8981\u4ef6\u306b\u5fdc\u3058\u305f\u5b9f\u88c5\u306b\u3059\u308b\u3088\u3046\u306b\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n\n# \u53c2\u8003\u30b5\u30a4\u30c8\n\n* http://terasolunaorg.github.io/guideline/5.2.0.RELEASE/ja/ArchitectureInDetail/DataAccessDetail/DataAccessCommon.html#id14\n* http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/jdbc/datasource/lookup/AbstractRoutingDataSource.html\n* http://qiita.com/kazuki43zoo/items/48061b82933e9b3d4ca8\n\n\n"}