{"context": " More than 1 year has passed since last update.\u524d\u56devalue\u3068factory\u306e\u9055\u3044\u3092\u8003\u3048\u305f\u306e\u3067\u3001\u4eca\u56de\u306fService\u3068Factory\u306e\u9055\u3044\u3092\u8003\u3048\u305f\u3044\u3068\u601d\u3046\u3002\n\n\u9055\u3044\u306f\u3042\u308b\uff1f\u306a\u3044\uff1f\n\u3068\u308a\u3042\u3048\u305aFactory\u3092\u4f7f\u3063\u3066\u3044\u308b\u3068\u3044\u3046\u58f0\u3082\u805e\u304b\u308c\u308b\u304c\u3001\u4f8b\u3048\u3070 angular-ui/ng-grid\u306eGitHub\u306e\u30bd\u30fc\u30b9\u3092\u898b\u308b\u3068\u3001\u4e0b\u8a18\u306e\u3088\u3046\u306a\u30d5\u30a9\u30eb\u30c0\u69cb\u6210\u306b\u306a\u3063\u3066\u3044\u3066\u3001\u660e\u793a\u7684\u306b\u7528\u9014\u3092\u5206\u3051\u3066\u3044\u308b\u3002\n\n\u3069\u3046\u3044\u3046\u610f\u56f3\u3067\u5206\u3051\u3066\u3044\u308b\u306e\u304b\u3001\u307e\u305a\u3001What is the difference between module.factory and module.service and how might both be applied?\u306e\u30b9\u30ec\u30c3\u30c9\u306b\u66f8\u304b\u308c\u3066\u308b\u3053\u3068\u3092\u610f\u8a33\u3057\u305f\u3044\u3002\n\nService\n\nServices\nSyntax: module.service( 'serviceName', function );\nResult: When declaring serviceName as an injectable argument you will get an instance of the function. In other words new FunctionYouPassedToService().\nUsage: Could be useful for sharing utility functions that are useful to invoke by simply appending () to the injected function reference. \n\nServices\n\u8868\u8a18: module.service( 'serviceName', function );\n\u7d50\u679c: serviceName\u3092\u5ba3\u8a00\u3057\u305f\u6642\u70b9\u3067\u3001\u95a2\u6570\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u304c\u751f\u6210\u3055\u308c\u308b\u3002\u5225\u306e\u66f8\u304d\u65b9\u3092\u3059\u308b\u306a\u3089 new FunctionYouPassedToService(); \n\u7528\u6cd5: \u62ec\u5f27\"()\"\u3092\u4ed8\u3051\u308b\u3060\u3051\u3067\u53c2\u7167\u3057\u305f\u3044\u5171\u901a\u95a2\u6570\u306a\u3069\u3092\u5171\u6709\u3059\u308b\u5834\u5408\u306b\u9069\u3057\u3066\u3044\u308b\u3002\n\nFactory\n\nFactories\nSyntax: module.factory('factoryName', function);\nResult: When declaring factoryName as an injectable argument you will be provided the value that is returned by invoking the function reference passed to module.factory.\nUsage: Could be useful for returning a 'class' function that can then be new'ed to create instances.\n\nFactories\n\u8868\u8a18: module.factory('factoryName', function);\n\u7d50\u679c: factoryName\u3092\u5ba3\u8a00\u3057\u305f\u6642\u70b9\u3067\u3001module.factory\u306b\u6e21\u3057\u3066\u3044\u308b\u95a2\u6570\u304creturn\u3057\u3066\u3044\u308b\u5024\u304c\u63d0\u4f9b\u3055\u308c\u308b\u3002\n\u7528\u6cd5: new\u3067\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u5316\u3057\u305f\u3044\u30af\u30e9\u30b9\u304c\u3042\u308b\u5834\u5408\u306b\u9069\u3057\u3066\u3044\u308b\u3002\n\n\u3064\u307e\u308a\n\u30af\u30e9\u30b9\u5316\u305b\u305a\u306b\u3001\u5171\u901a\u95a2\u6570\u306e\u675f\u3068\u3057\u3066\u4f7f\u3044\u305f\u3044\u5834\u5408\u306fService\u3002\u30af\u30e9\u30b9\u5316\u3057\u305f\u65b9\u304c\u4fbf\u5229\u306a\u306e\u3067\u3042\u308c\u3070Factory\u3068\u3044\u3046\u3053\u3068\u3089\u3057\u3044\u3002\n\n\u30b5\u30f3\u30d7\u30eb\u30bd\u30fc\u30b9\n\u8db3\u3057\u7b97\u3068\u5f15\u304d\u7b97\u3092\u3059\u308b\u7c21\u5358\u306a\u4f8b\u3092\u4f5c\u3063\u3066\u307f\u308b\u3002\n\nindex.html\n<!doctype html>\n<html lang=\"jp\" ng-app=\"App\">\n<head>\n  <meta charset=\"utf-8\">\n  <script src=\"bower_components/angular/angular.js\"></script>\n  <script src=\"app.js\"></script>\n</head>\n<body>\n<div ng-controller=\"Ctrl\">\n  3+2-1={{answer_service}}<br/>\n  3+2-1={{answer_factory}}\n</div>\n</body>\n</html>\n\n\n\napp.js\nangular.module('App',[])\n  .service('MyUtils', function(){\n    var service = {\n      add: function(a,b){ return a+b; },\n      sub: function(a,b){ return a-b; }\n    };\n    return service;\n  })\n  .factory('MyMath', function(){\n    function MyKlass(n){ this.n = n; }\n    MyKlass.prototype.add = function(a){ this.n += a; return this; };\n    MyKlass.prototype.minus = function(a){ this.n -= a; return this; };\n    return MyKlass;\n  })\n  .controller('Ctrl',\n    [\"$scope\", \"MyUtils\", \"MyMath\",\n      function($scope, MyUtils, MyMath){\n        // \u95a2\u6570\u7fa4\u3068\u3057\u3066\u547c\u3073\u51fa\u3059 - Service\n        $scope.answer_service = MyUtils.sub(MyUtils.add(3,2),1);\n        // \u30af\u30e9\u30b9\u3068\u3057\u3066\u547c\u3073\u51fa\u3059 - Factory\n        $scope.answer_factory = (new MyMath(3)).add(2).minus(1).n;\n      }\n    ]\n  );\n\n\n\n\u524d\u56de[value\u3068factory\u306e\u9055\u3044\u3092\u8003\u3048\u305f](http://qiita.com/daei/items/1026f27b5ccfe00ed618)\u306e\u3067\u3001\u4eca\u56de\u306f`Service`\u3068`Factory`\u306e\u9055\u3044\u3092\u8003\u3048\u305f\u3044\u3068\u601d\u3046\u3002\n\n## \u9055\u3044\u306f\u3042\u308b\uff1f\u306a\u3044\uff1f ##\n\u3068\u308a\u3042\u3048\u305a`Factory`\u3092\u4f7f\u3063\u3066\u3044\u308b\u3068\u3044\u3046\u58f0\u3082\u805e\u304b\u308c\u308b\u304c\u3001\u4f8b\u3048\u3070 `angular-ui/ng-grid`\u306e[GitHub\u306e\u30bd\u30fc\u30b9](https://github.com/angular-ui/ng-grid)\u3092\u898b\u308b\u3068\u3001\u4e0b\u8a18\u306e\u3088\u3046\u306a\u30d5\u30a9\u30eb\u30c0\u69cb\u6210\u306b\u306a\u3063\u3066\u3044\u3066\u3001\u660e\u793a\u7684\u306b\u7528\u9014\u3092\u5206\u3051\u3066\u3044\u308b\u3002\n\n![ng-grid_src_js_core_at_master_\u00b7_angular-ui_ng-grid_\u00b7_GitHub.png](https://qiita-image-store.s3.amazonaws.com/0/55938/d716a956-f876-4328-2d7b-28b6e8224d42.png \"ng-grid_src_js_core_at_master_\u00b7_angular-ui_ng-grid_\u00b7_GitHub.png\")\n\n\u3069\u3046\u3044\u3046\u610f\u56f3\u3067\u5206\u3051\u3066\u3044\u308b\u306e\u304b\u3001\u307e\u305a\u3001[What is the difference between module.factory and module.service and how might both be applied?](https://groups.google.com/forum/#!msg/angular/56sdORWEoqg/HuZsOsMvKv4J)\u306e\u30b9\u30ec\u30c3\u30c9\u306b\u66f8\u304b\u308c\u3066\u308b\u3053\u3068\u3092\u610f\u8a33\u3057\u305f\u3044\u3002\n\n## Service\n\n>**Services**\n*Syntax*: module.service( 'serviceName', function );\n*Result*: When declaring serviceName as an injectable argument you will get an instance of the function. In other words new FunctionYouPassedToService().\n*Usage*: Could be useful for sharing utility functions that are useful to invoke by simply appending () to the injected function reference. \n\n**Services**\n*\u8868\u8a18*: module.service( 'serviceName', function );\n*\u7d50\u679c*: serviceName\u3092\u5ba3\u8a00\u3057\u305f\u6642\u70b9\u3067\u3001\u95a2\u6570\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u304c\u751f\u6210\u3055\u308c\u308b\u3002\u5225\u306e\u66f8\u304d\u65b9\u3092\u3059\u308b\u306a\u3089 new FunctionYouPassedToService(); \n*\u7528\u6cd5*: \u62ec\u5f27\"()\"\u3092\u4ed8\u3051\u308b\u3060\u3051\u3067\u53c2\u7167\u3057\u305f\u3044\u5171\u901a\u95a2\u6570\u306a\u3069\u3092\u5171\u6709\u3059\u308b\u5834\u5408\u306b\u9069\u3057\u3066\u3044\u308b\u3002\n\n## Factory\n> **Factories**\n*Syntax*: module.factory('factoryName', function);\n*Result*: When declaring factoryName as an injectable argument you will be provided the value that is returned by invoking the function reference passed to module.factory.\n*Usage*: Could be useful for returning a 'class' function that can then be new'ed to create instances.\n\n**Factories**\n*\u8868\u8a18*: module.factory('factoryName', function);\n*\u7d50\u679c*: factoryName\u3092\u5ba3\u8a00\u3057\u305f\u6642\u70b9\u3067\u3001module.factory\u306b\u6e21\u3057\u3066\u3044\u308b\u95a2\u6570\u304creturn\u3057\u3066\u3044\u308b\u5024\u304c\u63d0\u4f9b\u3055\u308c\u308b\u3002\n*\u7528\u6cd5*: new\u3067\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u5316\u3057\u305f\u3044\u30af\u30e9\u30b9\u304c\u3042\u308b\u5834\u5408\u306b\u9069\u3057\u3066\u3044\u308b\u3002\n\n## \u3064\u307e\u308a\n\u30af\u30e9\u30b9\u5316\u305b\u305a\u306b\u3001\u5171\u901a\u95a2\u6570\u306e\u675f\u3068\u3057\u3066\u4f7f\u3044\u305f\u3044\u5834\u5408\u306f`Service`\u3002\u30af\u30e9\u30b9\u5316\u3057\u305f\u65b9\u304c\u4fbf\u5229\u306a\u306e\u3067\u3042\u308c\u3070`Factory`\u3068\u3044\u3046\u3053\u3068\u3089\u3057\u3044\u3002\n\n## \u30b5\u30f3\u30d7\u30eb\u30bd\u30fc\u30b9\n\u8db3\u3057\u7b97\u3068\u5f15\u304d\u7b97\u3092\u3059\u308b\u7c21\u5358\u306a\u4f8b\u3092\u4f5c\u3063\u3066\u307f\u308b\u3002\n\n```index.html\n<!doctype html>\n<html lang=\"jp\" ng-app=\"App\">\n<head>\n  <meta charset=\"utf-8\">\n  <script src=\"bower_components/angular/angular.js\"></script>\n  <script src=\"app.js\"></script>\n</head>\n<body>\n<div ng-controller=\"Ctrl\">\n  3+2-1={{answer_service}}<br/>\n  3+2-1={{answer_factory}}\n</div>\n</body>\n</html>\n```\n\n```app.js\nangular.module('App',[])\n  .service('MyUtils', function(){\n    var service = {\n      add: function(a,b){ return a+b; },\n      sub: function(a,b){ return a-b; }\n    };\n    return service;\n  })\n  .factory('MyMath', function(){\n    function MyKlass(n){ this.n = n; }\n    MyKlass.prototype.add = function(a){ this.n += a; return this; };\n    MyKlass.prototype.minus = function(a){ this.n -= a; return this; };\n    return MyKlass;\n  })\n  .controller('Ctrl',\n    [\"$scope\", \"MyUtils\", \"MyMath\",\n      function($scope, MyUtils, MyMath){\n        // \u95a2\u6570\u7fa4\u3068\u3057\u3066\u547c\u3073\u51fa\u3059 - Service\n        $scope.answer_service = MyUtils.sub(MyUtils.add(3,2),1);\n        // \u30af\u30e9\u30b9\u3068\u3057\u3066\u547c\u3073\u51fa\u3059 - Factory\n        $scope.answer_factory = (new MyMath(3)).add(2).minus(1).n;\n      }\n    ]\n  );\n```\n", "tags": ["angular", "factory", "service"]}