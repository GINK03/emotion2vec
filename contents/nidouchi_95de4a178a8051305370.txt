{"tags": ["Scala", "\u3069\u3046\u66f8\u304f", "\u52c9\u5f37\u4f1a"], "context": " More than 1 year has passed since last update.\u554f\u984c\u306f\u3053\u3061\u3089\nhttp://nabetani.sakura.ne.jp/hena/ord8entco/\n\u30d1\u30bf\u30fc\u30f3\u30de\u30c3\u30c1\u3059\u308b\u306e\u306bList\u306b\u5909\u63db\u3057\u3066\u308b\u306e\u304c\u3044\u307e\u3044\u3061\u3002\nobject Main extends App{\n    def charToBinStr(c:Char):String = List(1,2,4,8).map(x=>\"0123456789abcdef\".indexOf(c)&x).mkString.replaceAll(\"[^0]\",\"1\")\n\n    def decode(s:String,result:String,bits:Int):(String,String,Int) = {\n        s.toList match {\n          case '0'::'0'::'0'::xs => decode(xs.mkString, result + \"t\", bits + s.size - xs.size)\n          case '0'::'0'::'1'::'0'::xs => decode(xs.mkString, result + \"s\", bits + s.size - xs.size)\n          case '0'::'0'::'1'::'1'::xs => decode(xs.mkString, result + \"n\", bits + s.size - xs.size)\n          case '0'::'1'::'0'::'0'::xs => decode(xs.mkString, result + \"i\", bits + s.size - xs.size)\n          case '0'::'1'::'0'::'1'::'0'::xs => decode(xs.mkString, result + \"d\", bits + s.size - xs.size)\n          case '0'::'1'::'0'::'1'::'1'::'0'::'1'::xs => decode(xs.mkString, result + \"c\", bits + s.size - xs.size)\n          case '0'::'1'::'0'::'1'::'1'::'1'::xs => decode(xs.mkString, result + \"l\", bits + s.size - xs.size)\n          case '0'::'1'::'1'::'0'::xs => decode(xs.mkString, result + \"o\", bits + s.size - xs.size)\n          case '0'::'1'::'1'::'1'::xs => decode(xs.mkString, result + \"a\", bits + s.size - xs.size)\n          case '1'::'0'::xs => decode(xs.mkString, result + \"e\", bits  + s.size - xs.size)\n          case '1'::'1'::'0'::'0'::xs => decode(xs.mkString, result + \"r\", bits + s.size - xs.size)\n          case '1'::'1'::'0'::'1'::xs => decode(xs.mkString, result + \"h\", bits + s.size - xs.size)\n          case '1'::'1'::'1'::xs => (\"\", result, bits  + s.size - xs.size)\n          case _ => (\"\",\"\",0)\n        }\n    }\n\n    def solve(q:String):String = {\n      val (s,result,bits) = decode(q.map(charToBinStr).mkString, \"\", 0)\n      if (bits == 0) \"*invalid*\" else result + \":\" + bits.toString\n    }\n\n    probs.split(\"\\n\").foreach(line => line.split(\"\\\\s+\").toList match {\n        case List(no,q,a) => {\n            var ans = solve(q)\n            println(no + \"\\t\" + ans + \"\\t\" + (if (ans==a) \"o\" else \"x\"))\n         }\n         case _ =>\n    })\n\n    def probs =\n    \"\"\"\n0   16d9d4fbd   ethanol:30\n1   df  e:5\n2   ad7 c:10\n3   870dcb  t:6\n4   880f63d test:15\n5   a57cbe56    cat:17\n6   36abef2 roll:23\n7   ad576cd8    chant:25\n8   3e2a3db4fb9 rails:25\n9   51aa3b4c2   eeeteee:18\n10  ad5f1a07affe    charset:31\n11  4ab8a86d7afb0f  slideshare:42\n12  ac4b0b9faef doctor:30\n13  cafebabe    nlh:17\n14  43e7    sra:15\n15  53e7    eera:15\n16  86cf    tera:16\n17  b6cf    hon:15\n18  0   *invalid*\n19  c   *invalid*\n20  d   *invalid*\n21  e   *invalid*\n22  babecafe    *invalid*\n23  8d  *invalid*\n24  ad  *invalid*\n25  af  *invalid*\n26  ab6e0   *invalid*\n27  a4371   *invalid*\n28  a4371   *invalid*\n29  96e3    *invalid*\n30  0dc71   *invalid*\n31  2a9f51  *invalid*\n32  a43fb2  *invalid*\n33  ab6e75  *invalid*\n34  a5dcfa  *invalid*\n35  ca97    *invalid*\n36  6822dcb *invalid*\n    \"\"\"\n}\n\n\u554f\u984c\u306f\u3053\u3061\u3089\nhttp://nabetani.sakura.ne.jp/hena/ord8entco/\n\u30d1\u30bf\u30fc\u30f3\u30de\u30c3\u30c1\u3059\u308b\u306e\u306bList\u306b\u5909\u63db\u3057\u3066\u308b\u306e\u304c\u3044\u307e\u3044\u3061\u3002\n\n```scala\nobject Main extends App{\n\tdef charToBinStr(c:Char):String = List(1,2,4,8).map(x=>\"0123456789abcdef\".indexOf(c)&x).mkString.replaceAll(\"[^0]\",\"1\")\n\n\tdef decode(s:String,result:String,bits:Int):(String,String,Int) = {\n\t\ts.toList match {\n\t\t  case '0'::'0'::'0'::xs => decode(xs.mkString, result + \"t\", bits + s.size - xs.size)\n\t\t  case '0'::'0'::'1'::'0'::xs => decode(xs.mkString, result + \"s\", bits + s.size - xs.size)\n\t\t  case '0'::'0'::'1'::'1'::xs => decode(xs.mkString, result + \"n\", bits + s.size - xs.size)\n\t\t  case '0'::'1'::'0'::'0'::xs => decode(xs.mkString, result + \"i\", bits + s.size - xs.size)\n\t\t  case '0'::'1'::'0'::'1'::'0'::xs => decode(xs.mkString, result + \"d\", bits + s.size - xs.size)\n\t\t  case '0'::'1'::'0'::'1'::'1'::'0'::'1'::xs => decode(xs.mkString, result + \"c\", bits + s.size - xs.size)\n\t\t  case '0'::'1'::'0'::'1'::'1'::'1'::xs => decode(xs.mkString, result + \"l\", bits + s.size - xs.size)\n\t\t  case '0'::'1'::'1'::'0'::xs => decode(xs.mkString, result + \"o\", bits + s.size - xs.size)\n\t\t  case '0'::'1'::'1'::'1'::xs => decode(xs.mkString, result + \"a\", bits + s.size - xs.size)\n\t\t  case '1'::'0'::xs => decode(xs.mkString, result + \"e\", bits  + s.size - xs.size)\n\t\t  case '1'::'1'::'0'::'0'::xs => decode(xs.mkString, result + \"r\", bits + s.size - xs.size)\n\t\t  case '1'::'1'::'0'::'1'::xs => decode(xs.mkString, result + \"h\", bits + s.size - xs.size)\n\t\t  case '1'::'1'::'1'::xs => (\"\", result, bits  + s.size - xs.size)\n\t\t  case _ => (\"\",\"\",0)\n\t\t}\n\t}\n\n\tdef solve(q:String):String = {\n\t  val (s,result,bits) = decode(q.map(charToBinStr).mkString, \"\", 0)\n\t  if (bits == 0) \"*invalid*\" else result + \":\" + bits.toString\n\t}\n\n\tprobs.split(\"\\n\").foreach(line => line.split(\"\\\\s+\").toList match {\n\t\tcase List(no,q,a) => {\n\t\t\tvar ans = solve(q)\n\t\t \tprintln(no + \"\\t\" + ans + \"\\t\" + (if (ans==a) \"o\" else \"x\"))\n\t\t }\n\t\t case _ =>\n\t})\n\n\tdef probs =\n\t\"\"\"\n0\t16d9d4fbd\tethanol:30\n1\tdf\te:5\n2\tad7\tc:10\n3\t870dcb\tt:6\n4\t880f63d\ttest:15\n5\ta57cbe56\tcat:17\n6\t36abef2\troll:23\n7\tad576cd8\tchant:25\n8\t3e2a3db4fb9\trails:25\n9\t51aa3b4c2\teeeteee:18\n10\tad5f1a07affe\tcharset:31\n11\t4ab8a86d7afb0f\tslideshare:42\n12\tac4b0b9faef\tdoctor:30\n13\tcafebabe\tnlh:17\n14\t43e7\tsra:15\n15\t53e7\teera:15\n16\t86cf\ttera:16\n17\tb6cf\thon:15\n18\t0\t*invalid*\n19\tc\t*invalid*\n20\td\t*invalid*\n21\te\t*invalid*\n22\tbabecafe\t*invalid*\n23\t8d\t*invalid*\n24\tad\t*invalid*\n25\taf\t*invalid*\n26\tab6e0\t*invalid*\n27\ta4371\t*invalid*\n28\ta4371\t*invalid*\n29\t96e3\t*invalid*\n30\t0dc71\t*invalid*\n31\t2a9f51\t*invalid*\n32\ta43fb2\t*invalid*\n33\tab6e75\t*invalid*\n34\ta5dcfa\t*invalid*\n35\tca97\t*invalid*\n36\t6822dcb\t*invalid*\n\t\"\"\"\n}\n```"}