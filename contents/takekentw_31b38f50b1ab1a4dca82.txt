{"context": " More than 1 year has passed since last update.\u8a08\u7b97\u554f\u984c\u304c\u5acc\u3044\u306a\u306e\u3067\u4f5c\u3063\u3066\u307f\u307e\u3057\u305f\u3002\u305f\u3060\u3053\u308c\u3092\u4f7f\u3046\u3068\u3042\u307e\u308a\u30b5\u30d6\u30cd\u30c3\u30c8\u8a08\u7b97\u306e\u5b66\u7fd2\u306b\u306f\u306a\u3089\u306a\u3044\u3068\u3044\u3046\u554f\u984c\u3092\u62b1\u3048\u3066\u3044\u307e\u3059\u3002\nPing-t\u306e\u30b5\u30d6\u30cd\u30c3\u30c8\u306e\u8a08\u7b97\u554f\u984c\u3067\u8a66\u3057\u3066\u307f\u3066\u5408\u3063\u3066\u3044\u305f\u306e\u3067\u3001\u591a\u5206\u554f\u984c\u306a\u3044\u3068\u601d\u3044\u307e\u3059\u3002\n\u3000\u3000\n32bit\u5024\u306e\u3068\u3053\u308d\u3067\u53c2\u8003\u306b\u3055\u305b\u3066\u3044\u305f\u3060\u304d\u307e\u3057\u305f\u3002\n@harasou@github \u30b7\u30a7\u30eb\u30b9\u30af\u30ea\u30d7\u30c8\u3067 IP\u30a2\u30c9\u30ec\u30b9\u8a08\u7b97\n\u3000\u3000\n\u57fa\u672c\u7684\u306b10\u9032\u6570\u306eIP\u30a2\u30c9\u30ec\u30b9\u3092\u5165\u308c\u3066\u4f7f\u3046\u7528\u9014\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u304c\u3001\u4e00\u5fdc2\u9032\u6570\u8868\u8a18\u304b\u308910\u9032\u6570\u8868\u8a18\u306b\u5909\u63db\u3059\u308b\u3053\u3068\u3082\u3067\u304d\u307e\u3059\u3002\n\u3000\u3000\n\n\u8272\u3005\u3068\u554f\u984c\u304c\u3042\u308a\u307e\u3057\u305f\u306e\u3067\u4e0b\u306e\u65b9\u306b\u4fee\u6b63\u7248\u3092\u8ffd\u8a18\u3057\u3066\u3042\u308a\u307e\u3059\u3002\n\nstr = ARGV[0]\n\nif str.match(/(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/) then\n\n  num = str.split(\".\")\n\n  #\u5165\u529b\u3057\u305fIP\u30a2\u30c9\u30ec\u30b9\u306e32Bit\u5024\u3092\u4fdd\u7ba1\n  @hom = (num[0].to_i << 24) + (num[1].to_i << 16) + (num[2].to_i << 8) + (num[3].to_i)\n\n  #\uff12\u9032\u6570\u8868\u8a18\u306b\u5909\u63db\n  num.each_with_index do |n, count|\n    if count == 3\n      printf(\"%08d\\n\",  \"#{n.to_i.to_s(2)}\")\n      break\n    end\n    @z = printf(\"%08d.\",\"#{n.to_i.to_s(2)}\")\n  end\n\n  puts \"\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u306e\u8a08\u7b97\u3092\u3057\u307e\u3059\u304b\uff1f\"\n  puts \"\u8a08\u7b97\u3059\u308b\u5834\u5408\u306fCIDR\u5024\u3092\u5165\u529b\u3057\u3066\u304f\u3060\u3055\u3044\u3002\"\n  print \"==> \"\n  cidr = STDIN.gets.chomp\n\n  #\u4fdd\u7ba1\u3057\u3066\u3044\u308b32Bit\u5024\u304b\u3089\u8ad6\u7406\u548c\u3092\u8a08\u7b97\n  exit unless cidr.match(/[1-31]/)\n  cidr32 = (( 0xFFFFFFFF ^ ((2 ** (32-cidr.to_i)-1) )))\n  nwaddr = cidr32 & @hom\n  puts \"\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u30a2\u30c9\u30ec\u30b9\"\n  printf \"%d.%d.%d.%d\\n\", (nwaddr >> 24), ((nwaddr >> 16) & 0xFF), ((nwaddr >> 8) & 0xFF), (nwaddr & 0xFF)\n  #\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u30a2\u30c9\u30ec\u30b9\u306e\u6392\u4ed6\u7684\u8ad6\u7406\u548c\u3068\u8ad6\u7406\u548c\n  puts \"\u30d6\u30ed\u30fc\u30c9\u30ad\u30e3\u30b9\u30c8\u30a2\u30c9\u30ec\u30b9\"\n  broad = ((cidr32 ^ 0xFFFFFFFF) | @hom)\n  printf \"%d.%d.%d.%d\\n\", (broad >> 24), ((broad >> 16) & 0xFF), ((broad >> 8) & 0xFF), (broad & 0xFF)\n\nelsif str.match(/([01]{1,8})\\.([01]{1,8})\\.([01]{1,8})\\.([01]{1,8}$)/) then\n\n  num = str.split(\".\")\n\n  num.each_with_index do |n, count|\n    m = n.to_i(2)\n    if count == 3\n      puts \"#{m}\"\n      break\n    end\n    print \"#{m}.\"\n  end\nend\n\n\n\u4f7f\u3044\u65b9\n\u5f15\u6570\u306b10\u9032\u306eIP\u30a2\u30c9\u30ec\u30b9\u3002CIDR\u306e\u78ba\u8a8d\u3067\u6b62\u307e\u308b\u306e\u3067\u81ea\u5206\u3067\u8003\u3048\u3066\u307f\u305f\u308a\u3059\u308b\u3082\u3088\u3057\u30fb\u30fb\u3002\n$ ruby subnet2.rb 210.150.30.10\n11010010.10010110.00011110.00001010\n\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u306e\u8a08\u7b97\u3092\u3057\u307e\u3059\u304b\uff1f\n\u8a08\u7b97\u3059\u308b\u5834\u5408\u306fCIDR\u5024\u3092\u5165\u529b\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n==> 28\n\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u30a2\u30c9\u30ec\u30b9\n210.150.30.0\n\u30d6\u30ed\u30fc\u30c9\u30ad\u30e3\u30b9\u30c8\u30a2\u30c9\u30ec\u30b9\n210.150.30.15\n\n\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u8a08\u7b97\u304c\u4e0d\u8981\u306a\u30891\u301c31\u4ee5\u5916\u306e\u6570\u5b57\u3067\u3082\u7a7a\u30a8\u30f3\u30bf\u30fc\u3067\u3082\u53e9\u304f\u3068EXIT\u3057\u307e\u3059\u3002\n$ ruby subnet2.rb 192.168.24.133\n11000000.10101000.00011000.10000101\n\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u306e\u8a08\u7b97\u3092\u3057\u307e\u3059\u304b\uff1f\n\u8a08\u7b97\u3059\u308b\u5834\u5408\u306fCIDR\u5024\u3092\u5165\u529b\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n==>\n\n\u4e0a\u306e2\u500b\u3092\u4f8b\u306b\u3057\u30662\u9032\u6570\u8868\u8a18\u304b\u3089\u306e\u5909\u63db\n$ ruby subnet2.rb 11010010.10010110.00011110.00001010\n210.150.30.10\n\n$ ruby subnet2.rb 11000000.10101000.00011000.10000101\n192.168.24.133\n\n\u3053\u3093\u306a\u611f\u3058\u3067\u3059\u3002\n\u3000\u3000\n\u3000\u3000\n\u306f\u3063\uff01\u30b9\u30af\u30ea\u30d7\u30c8\u3092\u66f8\u304d\u3060\u3057\u305f\u524d\u534a\u3068\u5f8c\u534a\u3067printf\u306e\u8a18\u8ff0\u306e\u4ed5\u65b9\u304c\u5909\u308f\u3063\u3066\u3044\u308b\uff01\n\u03a3(\uffe3\u30ed\uffe3lll)\u304c\u3073\u30fc\u3093\n\n2015/03/17\u3000\u8ffd\u8a18\n@scivola \u3055\u3093\u3001@riocampos \u3055\u3093\n\u3044\u3064\u3082\u3042\u308a\u304c\u3068\u3046\u3054\u3056\u3044\u307e\u3059\u3002\n\u6307\u6458\u3044\u305f\u3060\u3044\u305f\u9593\u9055\u3044\u90e8\u5206\u3068\u7d44\u307f\u8fbc\u307f\u7cfb\u306e\u30e1\u30bd\u30c3\u30c9\u306e\u5229\u7528\u90e8\u5206\u3092\u4f7f\u3063\u3066\u4fee\u6b63\u3057\u3066\u307f\u307e\u3057\u305f\u3002\n\u307f\u307e\u3057\u305f\u3068\u3044\u3046\u304b\u30e2\u30ce\u30de\u30cd\u3067\u3059\u304c^_^;\n\u9577\u304f\u306a\u308a\u307e\u3059\u304c\u6bd4\u8f03\u7528\u306e\u30b3\u30e1\u30f3\u30c8\u30a2\u30a6\u30c8Ver\u3068\u3001\u30b9\u30c3\u30ad\u30eaVer\u306e2\u500b\u8f09\u305b\u307e\u3059\u3002\n\n\u4fee\u6b63Ver\uff08\u6bd4\u8f03\u7528\u30b3\u30e1\u30f3\u30c8\u30a2\u30a6\u30c8\u306e\u307f\uff09\nstr = ARGV[0]\n\ncase str\nwhen /(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/\n\n  #nums = str.split(\".\")\n  nums = [$1, $2, $3, $4].map(&:to_i)\n\n  #IP\u30a2\u30c9\u30ec\u30b9\u306e\u6700\u7d42\u78ba\u8a8d\n  #nums.each do |x|\n  #  if x.to_i > 255\n  #    puts \"\u4e0d\u6b63\u306a\u5165\u529b\u3067\u3059\u3002\"\n  #    exit\n  #  end\n  #end\n  if nums.any? { |x| x.to_i > 255 }\n      puts \"\u4e0d\u6b63\u306a\u5165\u529b\u3067\u3059\u3002\"\n        exit\n  end\n\n  #\u5165\u529b\u3057\u305fIP\u30a2\u30c9\u30ec\u30b9\u306e32Bit\u5024\u3092\u4fdd\u7ba1\n  #p @hom = (nums[0].to_i << 24) + (nums[1].to_i << 16) + (nums[2].to_i << 8) + (nums[3].to_i)\n  @hom = nums.inject{|r, x| r * 256 + x}\n\n  #\uff12\u9032\u6570\u8868\u8a18\u306b\u5909\u63db\n  puts nums.map{|x| format('%08b', x)}.join('.')\n\n  #\uff12\u9032\u6570\u8868\u8a18\u306b\u5909\u63db\n  #nums.each_with_index do |n, count|\n  #  if count == 3\n  #    printf(\"%08d\\n\",  \"#{n.to_i.to_s(2)}\")\n  #    break\n  #  end\n  #  printf(\"%08d.\",\"#{n.to_i.to_s(2)}\")\n  #end\n\n  puts \"\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u306e\u8a08\u7b97\u3092\u3057\u307e\u3059\u304b\uff1f\"\n  puts \"\u8a08\u7b97\u3059\u308b\u5834\u5408\u306fCIDR\u5024\u3092\u5165\u529b\u3057\u3066\u304f\u3060\u3055\u3044\u3002\"\n  print \"==> \"\n  cidr = STDIN.gets.chomp\n\n  #\u4fdd\u7ba1\u3057\u3066\u3044\u308b32Bit\u5024\u304b\u3089\u8ad6\u7406\u548c\u3092\u8a08\u7b97\n  exit unless cidr.match(/\\A\\d+\\z/) && (1..31).include?(cidr.to_i)\n  cidr32 = (( 0xFFFFFFFF ^ ((2 ** (32-cidr.to_i)-1) )))\n  nwaddr = cidr32 & @hom\n  puts \"\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u30a2\u30c9\u30ec\u30b9\"\n  #printf \"%d.%d.%d.%d\\n\", (nwaddr >> 24), ((nwaddr >> 16) & 0xFF), ((nwaddr >> 8) & 0xFF), (nwaddr & 0xFF)\n  puts [24, 16, 8, 0].map{|n| (nwaddr >> n) & 0xFF}.join('.')\n  #\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u30a2\u30c9\u30ec\u30b9\u306e\u6392\u4ed6\u7684\u8ad6\u7406\u548c\u3068\u8ad6\u7406\u548c\n  puts \"\u30d6\u30ed\u30fc\u30c9\u30ad\u30e3\u30b9\u30c8\u30a2\u30c9\u30ec\u30b9\"\n  broad = ((cidr32 ^ 0xFFFFFFFF) | @hom)\n  #printf \"%d.%d.%d.%d\\n\", (broad >> 24), ((broad >> 16) & 0xFF), ((broad >> 8) & 0xFF), (broad & 0xFF)\n  puts [24, 16, 8, 0].map{|n| (broad >> n) &0xFF}.join('.')\n\nwhen /([01]{1,8})\\.([01]{1,8})\\.([01]{1,8})\\.([01]{1,8}$)/\n\n  #2\u9032\u6570\u8868\u8a18\u304b\u308910\u9032\u6570\u8868\u8a18\u306b\u5909\u63db\n  puts nums = [$1, $2, $3, $4].map{|s| s.to_i(2)}.join('.')\n\n  #2\u9032\u6570\u8868\u8a18\u304b\u308910\u9032\u6570\u8868\u8a18\u306b\u5909\u63db\n  #nums = str.split(\".\")\n  #nums.each_with_index do |n, count|\n  #  m = n.to_i(2)\n  #  if count == 3\n  #    puts \"#{m}\"\n  #    break\n  #  end\n  #  print \"#{m}.\"\n  #end\nend\n\n\n\n\u30b9\u30c3\u30ad\u30eaVer\nstr = ARGV[0]\n\ncase str\nwhen /(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/\n\n  nums = [$1, $2, $3, $4].map(&:to_i)\n\n  #IP\u30a2\u30c9\u30ec\u30b9\u306e\u6700\u7d42\u78ba\u8a8d\n  if nums.any? { |x| x.to_i > 255 }\n      puts \"\u4e0d\u6b63\u306a\u5165\u529b\u3067\u3059\u3002\"\n        exit\n  end\n\n  #\u5165\u529b\u3057\u305fIP\u30a2\u30c9\u30ec\u30b9\u306e32Bit\u5024\u3092\u4fdd\u7ba1\n  @hom = nums.inject{|r, x| r * 256 + x}\n\n  #\uff12\u9032\u6570\u8868\u8a18\u306b\u5909\u63db\n  puts nums.map{|x| format('%08b', x)}.join('.')\n  puts \"\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u306e\u8a08\u7b97\u3092\u3057\u307e\u3059\u304b\uff1f\"\n  puts \"\u8a08\u7b97\u3059\u308b\u5834\u5408\u306fCIDR\u5024\u3092\u5165\u529b\u3057\u3066\u304f\u3060\u3055\u3044\u3002\"\n  print \"==> \"\n  cidr = STDIN.gets.chomp\n\n  #\u4fdd\u7ba1\u3057\u3066\u3044\u308b32Bit\u5024\u304b\u3089\u8ad6\u7406\u548c\u3092\u8a08\u7b97\n  exit unless cidr.match(/\\A\\d+\\z/) && (1..31).include?(cidr.to_i)\n  cidr32 = (( 0xFFFFFFFF ^ ((2 ** (32-cidr.to_i)-1) )))\n  nwaddr = cidr32 & @hom\n  puts \"\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u30a2\u30c9\u30ec\u30b9\"\n  puts [24, 16, 8, 0].map{|n| (nwaddr >> n) & 0xFF}.join('.')\n\n  #\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u30a2\u30c9\u30ec\u30b9\u306e\u6392\u4ed6\u7684\u8ad6\u7406\u548c\u3068\u8ad6\u7406\u548c\n  puts \"\u30d6\u30ed\u30fc\u30c9\u30ad\u30e3\u30b9\u30c8\u30a2\u30c9\u30ec\u30b9\"\n  broad = ((cidr32 ^ 0xFFFFFFFF) | @hom)\n  puts [24, 16, 8, 0].map{|n| (broad >> n) &0xFF}.join('.')\n\nwhen /([01]{1,8})\\.([01]{1,8})\\.([01]{1,8})\\.([01]{1,8}$)/\n\n  puts nums = [$1, $2, $3, $4].map{|s| s.to_i(2)}.join('.')\n\nend\n\n\n\n\u4e0d\u5177\u5408\u306e\u4f8b\n\u6b63\u898f\u8868\u73fe\u304c\u9593\u9055\u3063\u3066\u304a\u308a\u3001\u304a\u304b\u3057\u306a\u3082\u306e\u304c\u5165\u3063\u305f\u5834\u5408\u306fEXIT\u3068\u601d\u3063\u3066\u66f8\u3044\u3066\u3044\u307e\u3057\u305f\u304c\u3053\u3093\u306a\u306e\u304c\u901a\u3063\u3066\u3057\u307e\u3063\u3066\u3044\u307e\u3057\u305f\u3002\n\u8a08\u7b97\u3059\u308b\u5834\u5408\u306fCIDR\u5024\u3092\u5165\u529b\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n==> 2222\nsubnet2.rb:29:in `^': Rational can't be coerced into Rational (TypeError)\n    from subnet2.rb:29:in `<main>'\n\n\n\u3082\u3046\u3044\u3063\u3061\u3087\u306f\u4f55\u3082\u5165\u308c\u305a\u3067\u30a8\u30e9\u30fc\u304c\u3002\n$ ruby subnet2.rb\nsubnet2.rb:6:in `<main>': undefined method `match' for nil:NilClass (NoMethodError)\n\n\n\u306a\u3069\u306a\u3069\u3002\n\n\u8a08\u7b97\u554f\u984c\u304c\u5acc\u3044\u306a\u306e\u3067\u4f5c\u3063\u3066\u307f\u307e\u3057\u305f\u3002\u305f\u3060\u3053\u308c\u3092\u4f7f\u3046\u3068\u3042\u307e\u308a\u30b5\u30d6\u30cd\u30c3\u30c8\u8a08\u7b97\u306e\u5b66\u7fd2\u306b\u306f\u306a\u3089\u306a\u3044\u3068\u3044\u3046\u554f\u984c\u3092\u62b1\u3048\u3066\u3044\u307e\u3059\u3002\nPing-t\u306e\u30b5\u30d6\u30cd\u30c3\u30c8\u306e\u8a08\u7b97\u554f\u984c\u3067\u8a66\u3057\u3066\u307f\u3066\u5408\u3063\u3066\u3044\u305f\u306e\u3067\u3001\u591a\u5206\u554f\u984c\u306a\u3044\u3068\u601d\u3044\u307e\u3059\u3002\n\u3000\u3000\n32bit\u5024\u306e\u3068\u3053\u308d\u3067\u53c2\u8003\u306b\u3055\u305b\u3066\u3044\u305f\u3060\u304d\u307e\u3057\u305f\u3002\n[@harasou@github \u30b7\u30a7\u30eb\u30b9\u30af\u30ea\u30d7\u30c8\u3067 IP\u30a2\u30c9\u30ec\u30b9\u8a08\u7b97] (http://qiita.com/harasou@github/items/5c14c335388f70e178f5 \"\u30b7\u30a7\u30eb\u30b9\u30af\u30ea\u30d7\u30c8\u3067 IP\u30a2\u30c9\u30ec\u30b9\u8a08\u7b97\")\n\u3000\u3000\n\u57fa\u672c\u7684\u306b10\u9032\u6570\u306eIP\u30a2\u30c9\u30ec\u30b9\u3092\u5165\u308c\u3066\u4f7f\u3046\u7528\u9014\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u304c\u3001\u4e00\u5fdc2\u9032\u6570\u8868\u8a18\u304b\u308910\u9032\u6570\u8868\u8a18\u306b\u5909\u63db\u3059\u308b\u3053\u3068\u3082\u3067\u304d\u307e\u3059\u3002\n\u3000\u3000\n###**\u8272\u3005\u3068\u554f\u984c\u304c\u3042\u308a\u307e\u3057\u305f\u306e\u3067\u4e0b\u306e\u65b9\u306b\u4fee\u6b63\u7248\u3092\u8ffd\u8a18\u3057\u3066\u3042\u308a\u307e\u3059\u3002**\n\n```ruby\nstr = ARGV[0]\n\nif str.match(/(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/) then\n\n  num = str.split(\".\")\n\n  #\u5165\u529b\u3057\u305fIP\u30a2\u30c9\u30ec\u30b9\u306e32Bit\u5024\u3092\u4fdd\u7ba1\n  @hom = (num[0].to_i << 24) + (num[1].to_i << 16) + (num[2].to_i << 8) + (num[3].to_i)\n\n  #\uff12\u9032\u6570\u8868\u8a18\u306b\u5909\u63db\n  num.each_with_index do |n, count|\n    if count == 3\n      printf(\"%08d\\n\",  \"#{n.to_i.to_s(2)}\")\n      break\n    end\n    @z = printf(\"%08d.\",\"#{n.to_i.to_s(2)}\")\n  end\n\n  puts \"\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u306e\u8a08\u7b97\u3092\u3057\u307e\u3059\u304b\uff1f\"\n  puts \"\u8a08\u7b97\u3059\u308b\u5834\u5408\u306fCIDR\u5024\u3092\u5165\u529b\u3057\u3066\u304f\u3060\u3055\u3044\u3002\"\n  print \"==> \"\n  cidr = STDIN.gets.chomp\n\n  #\u4fdd\u7ba1\u3057\u3066\u3044\u308b32Bit\u5024\u304b\u3089\u8ad6\u7406\u548c\u3092\u8a08\u7b97\n  exit unless cidr.match(/[1-31]/)\n  cidr32 = (( 0xFFFFFFFF ^ ((2 ** (32-cidr.to_i)-1) )))\n  nwaddr = cidr32 & @hom\n  puts \"\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u30a2\u30c9\u30ec\u30b9\"\n  printf \"%d.%d.%d.%d\\n\", (nwaddr >> 24), ((nwaddr >> 16) & 0xFF), ((nwaddr >> 8) & 0xFF), (nwaddr & 0xFF)\n  #\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u30a2\u30c9\u30ec\u30b9\u306e\u6392\u4ed6\u7684\u8ad6\u7406\u548c\u3068\u8ad6\u7406\u548c\n  puts \"\u30d6\u30ed\u30fc\u30c9\u30ad\u30e3\u30b9\u30c8\u30a2\u30c9\u30ec\u30b9\"\n  broad = ((cidr32 ^ 0xFFFFFFFF) | @hom)\n  printf \"%d.%d.%d.%d\\n\", (broad >> 24), ((broad >> 16) & 0xFF), ((broad >> 8) & 0xFF), (broad & 0xFF)\n\nelsif str.match(/([01]{1,8})\\.([01]{1,8})\\.([01]{1,8})\\.([01]{1,8}$)/) then\n\n  num = str.split(\".\")\n\n  num.each_with_index do |n, count|\n    m = n.to_i(2)\n    if count == 3\n      puts \"#{m}\"\n      break\n    end\n    print \"#{m}.\"\n  end\nend\n```\n\n#\u4f7f\u3044\u65b9  \n\u5f15\u6570\u306b10\u9032\u306eIP\u30a2\u30c9\u30ec\u30b9\u3002CIDR\u306e\u78ba\u8a8d\u3067\u6b62\u307e\u308b\u306e\u3067\u81ea\u5206\u3067\u8003\u3048\u3066\u307f\u305f\u308a\u3059\u308b\u3082\u3088\u3057\u30fb\u30fb\u3002\n\n```\n$ ruby subnet2.rb 210.150.30.10\n11010010.10010110.00011110.00001010\n\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u306e\u8a08\u7b97\u3092\u3057\u307e\u3059\u304b\uff1f\n\u8a08\u7b97\u3059\u308b\u5834\u5408\u306fCIDR\u5024\u3092\u5165\u529b\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n==> 28\n\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u30a2\u30c9\u30ec\u30b9\n210.150.30.0\n\u30d6\u30ed\u30fc\u30c9\u30ad\u30e3\u30b9\u30c8\u30a2\u30c9\u30ec\u30b9\n210.150.30.15\n```\n\n\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u8a08\u7b97\u304c\u4e0d\u8981\u306a\u30891\u301c31\u4ee5\u5916\u306e\u6570\u5b57\u3067\u3082\u7a7a\u30a8\u30f3\u30bf\u30fc\u3067\u3082\u53e9\u304f\u3068EXIT\u3057\u307e\u3059\u3002\n\n```\n$ ruby subnet2.rb 192.168.24.133\n11000000.10101000.00011000.10000101\n\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u306e\u8a08\u7b97\u3092\u3057\u307e\u3059\u304b\uff1f\n\u8a08\u7b97\u3059\u308b\u5834\u5408\u306fCIDR\u5024\u3092\u5165\u529b\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n==>\n```\n\n\u4e0a\u306e2\u500b\u3092\u4f8b\u306b\u3057\u30662\u9032\u6570\u8868\u8a18\u304b\u3089\u306e\u5909\u63db\n\n```\n$ ruby subnet2.rb 11010010.10010110.00011110.00001010\n210.150.30.10\n\n$ ruby subnet2.rb 11000000.10101000.00011000.10000101\n192.168.24.133\n```\n\n\u3053\u3093\u306a\u611f\u3058\u3067\u3059\u3002\n\u3000\u3000\n\u3000\u3000\n\u306f\u3063\uff01\u30b9\u30af\u30ea\u30d7\u30c8\u3092\u66f8\u304d\u3060\u3057\u305f\u524d\u534a\u3068\u5f8c\u534a\u3067printf\u306e\u8a18\u8ff0\u306e\u4ed5\u65b9\u304c\u5909\u308f\u3063\u3066\u3044\u308b\uff01\n\u03a3(\uffe3\u30ed\uffe3lll)\u304c\u3073\u30fc\u3093\n\n##2015/03/17\u3000\u8ffd\u8a18\n\n@scivola \u3055\u3093\u3001@riocampos \u3055\u3093\n\u3044\u3064\u3082\u3042\u308a\u304c\u3068\u3046\u3054\u3056\u3044\u307e\u3059\u3002\n\n\u6307\u6458\u3044\u305f\u3060\u3044\u305f\u9593\u9055\u3044\u90e8\u5206\u3068\u7d44\u307f\u8fbc\u307f\u7cfb\u306e\u30e1\u30bd\u30c3\u30c9\u306e\u5229\u7528\u90e8\u5206\u3092\u4f7f\u3063\u3066\u4fee\u6b63\u3057\u3066\u307f\u307e\u3057\u305f\u3002\n\u307f\u307e\u3057\u305f\u3068\u3044\u3046\u304b\u30e2\u30ce\u30de\u30cd\u3067\u3059\u304c^_^;\n\u9577\u304f\u306a\u308a\u307e\u3059\u304c\u6bd4\u8f03\u7528\u306e\u30b3\u30e1\u30f3\u30c8\u30a2\u30a6\u30c8Ver\u3068\u3001\u30b9\u30c3\u30ad\u30eaVer\u306e2\u500b\u8f09\u305b\u307e\u3059\u3002\n\n###\u4fee\u6b63Ver\uff08\u6bd4\u8f03\u7528\u30b3\u30e1\u30f3\u30c8\u30a2\u30a6\u30c8\u306e\u307f\uff09\n\n```ruby\nstr = ARGV[0]\n\ncase str\nwhen /(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/\n\n  #nums = str.split(\".\")\n  nums = [$1, $2, $3, $4].map(&:to_i)\n\n  #IP\u30a2\u30c9\u30ec\u30b9\u306e\u6700\u7d42\u78ba\u8a8d\n  #nums.each do |x|\n  #  if x.to_i > 255\n  #    puts \"\u4e0d\u6b63\u306a\u5165\u529b\u3067\u3059\u3002\"\n  #    exit\n  #  end\n  #end\n  if nums.any? { |x| x.to_i > 255 }\n      puts \"\u4e0d\u6b63\u306a\u5165\u529b\u3067\u3059\u3002\"\n        exit\n  end\n\n  #\u5165\u529b\u3057\u305fIP\u30a2\u30c9\u30ec\u30b9\u306e32Bit\u5024\u3092\u4fdd\u7ba1\n  #p @hom = (nums[0].to_i << 24) + (nums[1].to_i << 16) + (nums[2].to_i << 8) + (nums[3].to_i)\n  @hom = nums.inject{|r, x| r * 256 + x}\n\n  #\uff12\u9032\u6570\u8868\u8a18\u306b\u5909\u63db\n  puts nums.map{|x| format('%08b', x)}.join('.')\n\n  #\uff12\u9032\u6570\u8868\u8a18\u306b\u5909\u63db\n  #nums.each_with_index do |n, count|\n  #  if count == 3\n  #    printf(\"%08d\\n\",  \"#{n.to_i.to_s(2)}\")\n  #    break\n  #  end\n  #  printf(\"%08d.\",\"#{n.to_i.to_s(2)}\")\n  #end\n\n  puts \"\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u306e\u8a08\u7b97\u3092\u3057\u307e\u3059\u304b\uff1f\"\n  puts \"\u8a08\u7b97\u3059\u308b\u5834\u5408\u306fCIDR\u5024\u3092\u5165\u529b\u3057\u3066\u304f\u3060\u3055\u3044\u3002\"\n  print \"==> \"\n  cidr = STDIN.gets.chomp\n\n  #\u4fdd\u7ba1\u3057\u3066\u3044\u308b32Bit\u5024\u304b\u3089\u8ad6\u7406\u548c\u3092\u8a08\u7b97\n  exit unless cidr.match(/\\A\\d+\\z/) && (1..31).include?(cidr.to_i)\n  cidr32 = (( 0xFFFFFFFF ^ ((2 ** (32-cidr.to_i)-1) )))\n  nwaddr = cidr32 & @hom\n  puts \"\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u30a2\u30c9\u30ec\u30b9\"\n  #printf \"%d.%d.%d.%d\\n\", (nwaddr >> 24), ((nwaddr >> 16) & 0xFF), ((nwaddr >> 8) & 0xFF), (nwaddr & 0xFF)\n  puts [24, 16, 8, 0].map{|n| (nwaddr >> n) & 0xFF}.join('.')\n  #\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u30a2\u30c9\u30ec\u30b9\u306e\u6392\u4ed6\u7684\u8ad6\u7406\u548c\u3068\u8ad6\u7406\u548c\n  puts \"\u30d6\u30ed\u30fc\u30c9\u30ad\u30e3\u30b9\u30c8\u30a2\u30c9\u30ec\u30b9\"\n  broad = ((cidr32 ^ 0xFFFFFFFF) | @hom)\n  #printf \"%d.%d.%d.%d\\n\", (broad >> 24), ((broad >> 16) & 0xFF), ((broad >> 8) & 0xFF), (broad & 0xFF)\n  puts [24, 16, 8, 0].map{|n| (broad >> n) &0xFF}.join('.')\n\nwhen /([01]{1,8})\\.([01]{1,8})\\.([01]{1,8})\\.([01]{1,8}$)/\n\n  #2\u9032\u6570\u8868\u8a18\u304b\u308910\u9032\u6570\u8868\u8a18\u306b\u5909\u63db\n  puts nums = [$1, $2, $3, $4].map{|s| s.to_i(2)}.join('.')\n\n  #2\u9032\u6570\u8868\u8a18\u304b\u308910\u9032\u6570\u8868\u8a18\u306b\u5909\u63db\n  #nums = str.split(\".\")\n  #nums.each_with_index do |n, count|\n  #  m = n.to_i(2)\n  #  if count == 3\n  #    puts \"#{m}\"\n  #    break\n  #  end\n  #  print \"#{m}.\"\n  #end\nend\n\n```\n\n###\u30b9\u30c3\u30ad\u30eaVer\n\n```ruby\nstr = ARGV[0]\n\ncase str\nwhen /(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/\n\n  nums = [$1, $2, $3, $4].map(&:to_i)\n\n  #IP\u30a2\u30c9\u30ec\u30b9\u306e\u6700\u7d42\u78ba\u8a8d\n  if nums.any? { |x| x.to_i > 255 }\n      puts \"\u4e0d\u6b63\u306a\u5165\u529b\u3067\u3059\u3002\"\n        exit\n  end\n\n  #\u5165\u529b\u3057\u305fIP\u30a2\u30c9\u30ec\u30b9\u306e32Bit\u5024\u3092\u4fdd\u7ba1\n  @hom = nums.inject{|r, x| r * 256 + x}\n\n  #\uff12\u9032\u6570\u8868\u8a18\u306b\u5909\u63db\n  puts nums.map{|x| format('%08b', x)}.join('.')\n  puts \"\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u306e\u8a08\u7b97\u3092\u3057\u307e\u3059\u304b\uff1f\"\n  puts \"\u8a08\u7b97\u3059\u308b\u5834\u5408\u306fCIDR\u5024\u3092\u5165\u529b\u3057\u3066\u304f\u3060\u3055\u3044\u3002\"\n  print \"==> \"\n  cidr = STDIN.gets.chomp\n\n  #\u4fdd\u7ba1\u3057\u3066\u3044\u308b32Bit\u5024\u304b\u3089\u8ad6\u7406\u548c\u3092\u8a08\u7b97\n  exit unless cidr.match(/\\A\\d+\\z/) && (1..31).include?(cidr.to_i)\n  cidr32 = (( 0xFFFFFFFF ^ ((2 ** (32-cidr.to_i)-1) )))\n  nwaddr = cidr32 & @hom\n  puts \"\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u30a2\u30c9\u30ec\u30b9\"\n  puts [24, 16, 8, 0].map{|n| (nwaddr >> n) & 0xFF}.join('.')\n\n  #\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u30a2\u30c9\u30ec\u30b9\u306e\u6392\u4ed6\u7684\u8ad6\u7406\u548c\u3068\u8ad6\u7406\u548c\n  puts \"\u30d6\u30ed\u30fc\u30c9\u30ad\u30e3\u30b9\u30c8\u30a2\u30c9\u30ec\u30b9\"\n  broad = ((cidr32 ^ 0xFFFFFFFF) | @hom)\n  puts [24, 16, 8, 0].map{|n| (broad >> n) &0xFF}.join('.')\n\nwhen /([01]{1,8})\\.([01]{1,8})\\.([01]{1,8})\\.([01]{1,8}$)/\n\n  puts nums = [$1, $2, $3, $4].map{|s| s.to_i(2)}.join('.')\n\nend\n\n```\n\n###\u4e0d\u5177\u5408\u306e\u4f8b\n\u6b63\u898f\u8868\u73fe\u304c\u9593\u9055\u3063\u3066\u304a\u308a\u3001\u304a\u304b\u3057\u306a\u3082\u306e\u304c\u5165\u3063\u305f\u5834\u5408\u306fEXIT\u3068\u601d\u3063\u3066\u66f8\u3044\u3066\u3044\u307e\u3057\u305f\u304c\u3053\u3093\u306a\u306e\u304c\u901a\u3063\u3066\u3057\u307e\u3063\u3066\u3044\u307e\u3057\u305f\u3002\n\n```\n\u8a08\u7b97\u3059\u308b\u5834\u5408\u306fCIDR\u5024\u3092\u5165\u529b\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n==> 2222\nsubnet2.rb:29:in `^': Rational can't be coerced into Rational (TypeError)\n\tfrom subnet2.rb:29:in `<main>'\n\n```\n\n\u3082\u3046\u3044\u3063\u3061\u3087\u306f\u4f55\u3082\u5165\u308c\u305a\u3067\u30a8\u30e9\u30fc\u304c\u3002\n\n```\n$ ruby subnet2.rb\nsubnet2.rb:6:in `<main>': undefined method `match' for nil:NilClass (NoMethodError)\n\n```\n\n\u306a\u3069\u306a\u3069\u3002\n\n", "tags": ["Ruby", "Network"]}