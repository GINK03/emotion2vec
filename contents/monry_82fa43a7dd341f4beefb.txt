{"context": " More than 1 year has passed since last update.\u3053\u306e\u30a8\u30f3\u30c8\u30ea\u306f Unity Advent Calendar 2015 \u306e9\u65e5\u76ee\u306e\u8a18\u4e8b\u306b\u306a\u308a\u307e\u3059\u3002\n\u524d\u65e5\u306e\u8a18\u4e8b\u306f @fakestarbaby \u3055\u3093\u306e\u300cVisual Studio Code \u3092\u5229\u7528\u3057\u3066 Unity \u30a2\u30d7\u30ea\u3092\u30c7\u30d0\u30c3\u30b0\u3059\u308b\u300d\u3067\u3057\u305f\u3002\n\u30ed\u30b0\u4ed5\u8fbc\u3093\u3067\u30c7\u30d0\u30c3\u30b0\u3059\u308b\u306e\u3082\u30a2\u30ea\u3067\u3059\u304c\u3001\u3084\u3063\u3071\u308a\u3061\u3083\u3093\u3068\u30d6\u30ec\u30fc\u30af\u30dd\u30a4\u30f3\u30c8\u4ed5\u8fbc\u3093\u3067\u30c7\u30d0\u30c3\u30b0\u3067\u304d\u308b\u3068\u697d\u3067\u3059\u3088\u306d\uff01\n\u79c1\u3082\u6700\u8fd1 Visual Studio Code \u9063\u3044\u306b\u306a\u3063\u305f\u306e\u3067\u3001\u30ac\u30f3\u30ac\u30f3\u6d3b\u7528\u3057\u3066\u3044\u3053\u3046\u304b\u3068\u601d\u3044\u307e\u3059\uff01\n\n\u524d\u7f6e\u304d\nUnity \u3067 iOS \u5411\u3051\u306b\u30d3\u30eb\u30c9\u3057\u305f\u5f8c\u306b\u3001 Info.plist \u3092\u7de8\u96c6\u3059\u308b \u3068\u3044\u3046\u4f5c\u696d\u304c\u767a\u751f\u3059\u308b\u4eba\u3082\u591a\u3044\u306e\u3067\u306f\u306a\u3044\u3067\u3057\u3087\u3046\u304b\uff1f\n\u4f8b\u3048\u3070\u3001\n\nATS (App Transport Security) \u95a2\u9023\u306e\u8a2d\u5b9a\nURL Schemes \u306e\u8a2d\u5b9a\n\u30aa\u30ea\u30a8\u30f3\u30c6\u30fc\u30b7\u30e7\u30f3\u306b\u95a2\u3059\u308b\u8a2d\u5b9a\u3092\u66f8\u304d\u63db\u3048\n\n\u2026\u306a\u3069\u306a\u3069\u3002\n\u3053\u306e\u8fba\u3001\u6bce\u56de\u624b\u52d5\u3067\u66f8\u304d\u63db\u3048\u308b\u306e\u306f\u9762\u5012\u306a\u306e\u3067\u3001\u81ea\u52d5\u5316\u3057\u3061\u3083\u3044\u307e\u3057\u3087\u3046\u3063\u3066\u306a\u304a\u8a71\u3067\u3059\u3002\n\nplist \u3063\u3066\u4f55\u3088\uff1f\n\u672c\u984c\u306b\u5165\u308b\u524d\u306b\u3001\u307e\u305a plist \u3068\u3044\u3046\u5f62\u5f0f\u306b\u3064\u3044\u3066\u7406\u89e3\u3057\u3066\u304a\u304f\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\n\u6210\u308a\u7acb\u3061\u3068\u304b\u305d\u3046\u3044\u3046\u5c0f\u96e3\u3057\u3044\u30b3\u30c8\u306f Wikipedia \u306b\u8aac\u660e\u3092\u8b72\u308b\u3068\u3057\u3066\u3001\u7aef\u7684\u306b\u8a00\u3048\u3070 XML \u3067\u8a18\u8ff0\u3055\u308c\u308b\u30c7\u30fc\u30bf\u5b9a\u7fa9\u30d5\u30a1\u30a4\u30eb \u306e\u30b3\u30c8\u3067\u3059\u3002\n\u3053\u3044\u3064\u306b\u306f\u3001\n\n\u305d\u3082\u305d\u3082 XML \u3067\u3042\u308b\n\u578b\u306b\u5fdc\u3058\u305f\u30ce\u30fc\u30c9\u304c\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u308b\n\nDictionary (\u9023\u60f3\u914d\u5217) \u306f <key> \u30ce\u30fc\u30c9\u3068\u5bfe\u306b\u306a\u308b\u578b\u30ce\u30fc\u30c9\u3092\u9023\u7d9a\u3057\u3066\u8a18\u8ff0\u3059\u308b\n\n\u3068\u3044\u3063\u305f\u3001\u30af\u30bb\u304c\u3042\u3063\u3066\u3001\u30b5\u30c3\u30af\u30ea\u66f8\u304d\u63db\u3048\u3088\u3046\u3068\u601d\u3063\u3066\u3082\u3001\u306a\u304b\u306a\u304b\u96e3\u3057\u304b\u3063\u305f\u308a\u3057\u307e\u3059\u3002\n\u5b9f\u969b\u306b\u3001iOS \u51fa\u529b\u3057\u305f\u969b\u306b\u751f\u6210\u3055\u308c\u308b Info.plist \u3092\u30c6\u30ad\u30b9\u30c8\u30a8\u30c7\u30a3\u30bf\u3067\u958b\u3044\u3066\u307f\u308c\u3070\u3001\u300c\u55da\u547c\u2026\u9762\u5012\u304f\u3055\u3044\u2026\u3002\u300d\u3068\u306a\u308b\u30b3\u30c8\u8acb\u3051\u5408\u3044\u3067\u3059\u3002\u3048\u3048\u3002\n\n\u6c4e\u7528\u7684\u306b\u7de8\u96c6\u3059\u308b\u305f\u3081\u306e\u4f5c\u6226\n\u3053\u306e\u9762\u5012\u304f\u3055\u3044\u30d5\u30a9\u30fc\u30de\u30c3\u30c8\u3092\u653b\u7565\u3059\u308b\u305f\u3081\u306e\u6226\u7565\u3092\u7acb\u3066\u3066\u307f\u307e\u3057\u3087\u3046\u3002\n\n\nSystem.Xml \u306e\u30af\u30e9\u30b9\u3092\u4f7f\u3046\u30b3\u30c8\u3092\u524d\u63d0\u3068\u3059\u308b\n\u3044\u308f\u3086\u308b\u30b9\u30ab\u30e9\u30fc\u306a\u30ce\u30fc\u30c9\u306f\u5358\u4e00\u306e\u30c6\u30ad\u30b9\u30c8\u30ce\u30fc\u30c9\u3068\u3057\u3066\u53d6\u308a\u6271\u3046\n\narray \u30ce\u30fc\u30c9\u3068 dict \u30ce\u30fc\u30c9\u306f\u3061\u3087\u3063\u3068\u9811\u5f35\u308b\u5fc5\u8981\u3042\u308a\n\ndict \u30ce\u30fc\u30c9\u306b\u65bc\u3051\u308b\u30ad\u30fc\u306e\u91cd\u8907\u306f\u4e0a\u66f8\u304d\u3067\u5bfe\u5fdc\u3059\u308b\n\n\n\u305f\u3060\u3057\u3001\u518d\u5e30\u7684\u306b\u6f5c\u308c\u308b\u5834\u5408\u306f\u3001\u672b\u7aef\u306e\u30ce\u30fc\u30c9\u3067\u306e\u307f\u4e0a\u66f8\u304d\u3092\u884c\u3046\n\n\n\narray \u30ce\u30fc\u30c9\u306f\u539f\u5247\u7684\u306b\u8ffd\u52a0\u306e\u307f\n\u30ce\u30fc\u30c9\u306e\u524a\u9664\u3082\u5b9f\u88c5\u3067\u304d\u308b\u3068\u30aa\u30b7\u30e3\u30ec\n\n\u3053\u306e\u8fba\u308a\u3092\u5b9a\u7fa9\u3057\u305f\u30d1\u30c3\u30c1\u7684\u306a\u30d5\u30a1\u30a4\u30eb\u3092\u8aad\u307f\u8fbc\u3080\u3053\u3068\u3067\u3001 plist \u30d5\u30a1\u30a4\u30eb\u3092\u7de8\u96c6\u3067\u304d\u305f\u3089\u697d\u3067\u3059\u3088\u306d\uff1f\n\nPlistMods\n\n\u3068\u3001\u8a00\u3046\u308f\u3051\u3067\u4f5c\u3063\u3066\u307f\u307e\u3057\u305f\u3002\n\n\u5909\u66f4\u5b9a\u7fa9\u30d5\u30a1\u30a4\u30eb\n.plistmods \u3068\u3044\u3046\u62e1\u5f35\u5b50\u3092\u6301\u3064 JSON \u30d5\u30a1\u30a4\u30eb\u3068\u3057\u3066\u5909\u66f4\u65b9\u6cd5\u3092\u5b9a\u7fa9\u3057\u3066\u307f\u307e\u3057\u305f\u3002\n\u8981\u70b9\u3068\u3057\u3066\u306f\u4ee5\u4e0b\u306e\u901a\u308a\u3002\n\n\n{ \"type\": ..., \"value\": ... } \u3068\u3044\u30461\u3064\u5206\u306e plist \u30ce\u30fc\u30c9\u3092\u8868\u73fe\u3059\u308b\u305f\u3081\u306e Object \u30ce\u30fc\u30c9\u3092\u6301\u3064\n\ntype \u306e\u5024\u306b\u5fdc\u3058\u3066 value \u30ce\u30fc\u30c9\u306e\u578b\u3082\u5909\u308f\u308b\n\n\n\narray \u306a\u3089 Array \u30ce\u30fc\u30c9\u3092\u53d6\u308b\n\ndict \u306a\u3089 plist \u7684\u306a key \u30ce\u30fc\u30c9\u306e\u5024\u3092\u3001\u305d\u306e\u307e\u307e\u30ad\u30fc\u3068\u3057\u305f Object \u30ce\u30fc\u30c9\u306e\u9023\u60f3\u914d\u5217\u3068\u3059\u308b\n\n\n\ndict \u306a\u30ce\u30fc\u30c9\u306e\u30ad\u30fc\u3092\u30cf\u30a4\u30d5\u30f3\u59cb\u307e\u308a\u306b\u3059\u308b\u3068\u3001\u300c\u8a72\u5f53\u306e\u30ad\u30fc\u3068\u3001\u305d\u308c\u306b\u96a3\u63a5\u3059\u308b\u5024\u30ce\u30fc\u30c9\u3092\u524a\u9664\u3059\u308b\u300d\u3068\u307f\u306a\u3059\n\n\u307e\u3041\u3001\u30b5\u30f3\u30d7\u30eb\u898b\u308c\u3070\u3042\u308b\u7a0b\u5ea6\u7406\u89e3\u306f\u3067\u304d\u308b\u3093\u3058\u3083\u306a\u3044\u304b\u3068\u3002\n\nsample.plistmods\n{\n  \"type\": \"dict\",\n  \"value\": {\n    \"-CFBundleIconFiles\": null,\n    \"-UISupportedInterfaceOrientations\": null,\n    \"-UISupportedInterfaceOrientations~ipad\": null,\n    \"UISupportedInterfaceOrientations\": {\n      \"type\": \"array\",\n      \"value\": [\n        {\n          \"type\": \"string\",\n          \"value\": \"UIInterfaceOrientationLandscapeLeft\"\n        },\n        {\n          \"type\": \"string\",\n          \"value\": \"UIInterfaceOrientationLandscapeRight\"\n        }\n      ]\n    },\n    \"UISupportedInterfaceOrientations~ipad\": {\n      \"type\": \"array\",\n      \"value\": [\n        {\n          \"type\": \"string\",\n          \"value\": \"UIInterfaceOrientationLandscapeLeft\"\n        },\n        {\n          \"type\": \"string\",\n          \"value\": \"UIInterfaceOrientationLandscapeRight\"\n        }\n      ]\n    },\n    \"NSAppTransportSecurity\": {\n      \"type\": \"dict\",\n      \"value\": {\n        \"NSExceptionDomains\": {\n          \"type\": \"dict\",\n          \"value\": {\n            \"kidsstar.tv\": {\n              \"type\": \"dict\",\n              \"value\": {\n                \"NSExceptionAllowsInsecureHTTPLoads\": {\n                  \"type\": \"bool\",\n                  \"value\": true\n                },\n                \"NSExceptionRequiresForwardSecrecy\": {\n                  \"type\": \"bool\",\n                  \"value\": false\n                },\n                \"NSIncludesSubdomains\": {\n                  \"type\": \"bool\",\n                  \"value\": true\n                }\n              }\n            },\n            \"cloudfront.net\": {\n              \"type\": \"dict\",\n              \"value\": {\n                \"NSExceptionAllowsInsecureHTTPLoads\": {\n                  \"type\": \"bool\",\n                  \"value\": true\n                },\n                \"NSExceptionRequiresForwardSecrecy\": {\n                  \"type\": \"bool\",\n                  \"value\": false\n                },\n                \"NSIncludesSubdomains\": {\n                  \"type\": \"bool\",\n                  \"value\": true\n                }\n              }\n            }\n          }\n        }\n      }\n    },\n    \"CFBundleURLTypes\": {\n      \"type\": \"array\",\n      \"value\": [\n        {\n          \"type\": \"dict\",\n          \"value\": {\n            \"CFBundleTypeRole\": {\n              \"type\": \"string\",\n              \"value\": \"Editor\"\n            },\n            \"CFBundleURLName\": {\n              \"type\": \"string\",\n              \"value\": \"tv.kidsstar.app.${PRODUCT_NAME:rfc1034identifier}\"\n            },\n            \"CFBundleURLSchemes\": {\n              \"type\": \"array\",\n              \"value\": [\n                {\n                  \"type\": \"string\",\n                  \"value\": \"tv.kidsstar.app.${PRODUCT_NAME:rfc1034identifier}\"\n                }\n              ]\n            }\n          }\n        }\n      ]\n    }\n  }\n}\n\n\n\n.plistmods \u306e\u9069\u7528\n\u3093\u3067\u3001 .plistmods \u306a\u5b9a\u7fa9\u30d5\u30a1\u30a4\u30eb\u3092\u8aad\u307f\u8fbc\u3093\u3067\u3001 Info.plist \u3092\u7de8\u96c6\u3059\u308b\u611f\u3058\u306e\u52d5\u304d\u306b\u306a\u308a\u307e\u3059\u3002\n\u307e\u3041\u3001\u5b9f\u969b\u306e\u30b3\u30fc\u30c9\u3092\u898b\u3066\u3082\u3089\u3046\u306e\u304c\u65e9\u3044\u3067\u3059\u3002\n\nPlistMods.cs\nusing UnityEngine;\nusing System.IO;\nusing System.Xml;\nusing System.Collections;\nusing System.Collections.Generic;\nusing System.Text.RegularExpressions;\nusing MiniJSON;\n\nnamespace KidsStar.Editor.iOS {\n\n    public class PlistMods {\n\n        private XmlDocument plist;\n\n        public PlistMods(string path) {\n            this.plist = new XmlDocument();\n            this.plist.Load(path);\n        }\n\n        public void Apply(string pathPlistMods) {\n            IDictionary mods = (IDictionary)Json.Deserialize(File.ReadAllText(pathPlistMods));\n\n            // \u7b2c1\u968e\u5c64\u304c dict \u30ce\u30fc\u30c9\u3067\u3042\u308b\u3053\u3068\u3092\u524d\u63d0\u3068\u3057\u3066\u3044\u308b\n            IDictionary rootItem = (IDictionary)mods[\"value\"];\n            XmlNode rootNode = this.plist.SelectSingleNode(\"/plist/dict\");\n            foreach (object key in rootItem.Keys) {\n                this.Apply(rootNode, (string)key, (IDictionary)rootItem[key]);\n            }\n        }\n\n        public void Apply(string[] pathPlistModsList) {\n            foreach (string pathPlistMods in pathPlistModsList) {\n                this.Apply(pathPlistMods);\n            }\n        }\n\n        public void Apply(List<string> pathPlistModsList) {\n            this.Apply(pathPlistModsList.ToArray());\n        }\n\n        public void Save(string path) {\n            XmlDocumentType _documentType = this.plist.CreateDocumentType(\"plist\", \"-//Apple//DTD PLIST 1.0//EN\", \"http://www.apple.com/DTDs/PropertyList-1.0.dtd\", null);\n            if (null != this.plist.DocumentType) {\n                this.plist.RemoveChild(this.plist.DocumentType);\n            }\n            this.plist.InsertAfter(_documentType, this.plist.FirstChild);\n            this.plist.Save(path);\n        }\n\n        private void Apply(XmlNode parent, string key, IDictionary item) {\n            // \u30ad\u30fc\u304c\u30cf\u30a4\u30d5\u30f3\u3067\u59cb\u307e\u308b\u5834\u5408\u3001\u524a\u9664\u3068\u307f\u306a\u3059\n            if (!string.IsNullOrEmpty(key) && Regex.IsMatch(key, \"^-\")) {\n                key = Regex.Replace(key, \"^-\", string.Empty);\n                if (parent.HasKeyNode(key)) {\n                    parent.RemoveChild(parent.GetKeyNode(key).NextSibling);\n                    parent.RemoveChild(parent.GetKeyNode(key));\n                }\n                return;\n            }\n\n            if (null == item[\"type\"] || null == item[\"value\"]) {\n                Debug.LogError(\"\u51e6\u7406\u5bfe\u8c61\u306e\u30ce\u30fc\u30c9\u306b type \u304b value \u304c\u542b\u307e\u308c\u3066\u3044\u307e\u305b\u3093\");\n                return;\n            }\n            switch ((string)item[\"type\"]) {\n                case \"bool\":\n                    this.ApplyScalar(parent, key, (bool)item[\"value\"] ? \"true\" : \"false\");\n                    break;\n                case \"integer\":\n                    this.ApplyScalar(parent, key, \"integer\", (int)item[\"value\"]);\n                    break;\n                case \"real\":\n                    this.ApplyScalar(parent, key, \"real\", (float)item[\"value\"]);\n                    break;\n                case \"string\":\n                    this.ApplyScalar(parent, key, \"string\", (string)item[\"value\"]);\n                    break;\n                case \"date\":\n                    this.ApplyScalar(parent, key, \"date\", (string)item[\"value\"]);\n                    break;\n                case \"data\":\n                    this.ApplyScalar(parent, key, \"data\", (string)item[\"value\"]);\n                    break;\n                case \"array\":\n                    this.ApplyArray(parent, key, (IList)item[\"value\"]);\n                    break;\n                case \"dict\":\n                    this.ApplyDict(parent, key, (IDictionary)item[\"value\"]);\n                    break;\n            }\n        }\n\n        private void ApplyScalar(XmlNode parent, string key, string type, object value = null) {\n            // \u30ad\u30fc\u304c\u7a7a\u306e\u5834\u5408\u3001Array \u30ce\u30fc\u30c9\u3078\u306e\u633f\u5165\u3068\u898b\u306a\u3059\n            if (string.IsNullOrEmpty(key)) {\n                if (null == value) {\n                    parent.AppendChild(this.plist.CreateElement(type));\n                } else {\n                    parent.AppendChild(this.plist.CreateSimpleTextNode(type, value.ToString()));\n                }\n                return;\n            }\n\n            if (parent.HasKeyNode(key)) {\n                parent.RemoveChild(parent.GetKeyNode(key).NextSibling);\n            } else {\n                parent.AppendChild(this.plist.CreateKeyNode(key));\n            }\n            if (null == value) {\n                parent.InsertAfter(this.plist.CreateElement(type), parent.GetKeyNode(key));\n            } else {\n                parent.InsertAfter(this.plist.CreateSimpleTextNode(type, value.ToString()), parent.GetKeyNode(key));\n            }\n        }\n\n        private void ApplyArray(XmlNode parent, string key, IList itemList) {\n            // \u30ad\u30fc\u304c\u7a7a\u306e\u5834\u5408\u3001Array \u30ce\u30fc\u30c9\u3078\u306e\u633f\u5165\u3068\u898b\u306a\u3059\n            if (string.IsNullOrEmpty(key)) {\n                foreach (object item in itemList) {\n                    this.Apply(parent, null, (IDictionary)item);\n                }\n                return;\n            }\n\n            if (!parent.HasKeyNode(key)) {\n                // \u30ad\u30fc\u304c\u306a\u3044\u306a\u3089\u3001\u30ad\u30fc\u30ce\u30fc\u30c9\u3068 array \u30ce\u30fc\u30c9\u3092\u4f5c\u308b\n                parent.AppendChild(this.plist.CreateKeyNode(key));\n                parent.AppendChild(this.plist.CreateElement(\"array\"));\n            }\n            foreach (object item in itemList) {\n                this.Apply(parent.GetKeyNode(key).NextSibling, null, (IDictionary)item);\n            }\n        }\n\n        private void ApplyDict(XmlNode parent, string key, IDictionary item) {\n            // \u30ad\u30fc\u304c\u7a7a\u306e\u5834\u5408\u3001Array \u30ce\u30fc\u30c9\u3078\u306e\u633f\u5165\u3068\u898b\u306a\u3059\n            if (string.IsNullOrEmpty(key)) {\n                XmlNode dictNode = parent.AppendChild(this.plist.CreateElement(\"dict\"));\n                foreach (object k in item.Keys) {\n                    this.Apply(dictNode, (string)k, (IDictionary)item[k]);\n                }\n                return;\n            }\n\n            if (!parent.HasKeyNode(key)) {\n                // \u30ad\u30fc\u304c\u306a\u3044\u306a\u3089\u3001\u30ad\u30fc\u30ce\u30fc\u30c9\u3068 dict \u30ce\u30fc\u30c9\u3092\u4f5c\u308b\n                parent.AppendChild(this.plist.CreateKeyNode(key));\n                parent.AppendChild(this.plist.CreateElement(\"dict\"));\n            }\n            foreach (object k in item.Keys) {\n                this.Apply(parent.GetKeyNode(key).NextSibling, (string)k, (IDictionary)item[k]);\n            }\n        }\n    }\n\n    internal static class XmlExtension {\n\n        public static bool HasChildNode(this XmlNode self, string name, bool ignoreCase = true) {\n            return null != self.GetChildNode(name, ignoreCase);\n        }\n\n        public static XmlNode GetChildNode(this XmlNode self, string name, bool ignoreCase = true) {\n            foreach (XmlNode childNode in self.ChildNodes) {\n                if (childNode.Name == name || (ignoreCase && childNode.Name.ToLower() == name.ToLower())) {\n                    return childNode;\n                }\n            }\n            return null;\n        }\n\n        public static bool HasKeyNode(this XmlNode self, string key) {\n            return null != self.GetKeyNode(key);\n        }\n\n        public static XmlNode GetKeyNode(this XmlNode self, string key) {\n            return self.SelectSingleNode(string.Format(\"./key[.=\\\"{0}\\\"]\", key));\n        }\n\n        public static XmlNode CreateSimpleTextNode(this XmlDocument xml, string name, string text) {\n            XmlElement _node = xml.CreateElement(name);\n            _node.InnerText = text;\n            return _node;\n        }\n\n        public static XmlNode CreateKeyNode(this XmlDocument xml, string key) {\n            return xml.CreateSimpleTextNode(\"key\", key);\n        }\n\n    }\n}\n\n\nMiniJSON \u3092\u4f7f\u3063\u3066\u3044\u307e\u3059\u304c\u3001\u6628\u65e5 (2015/12/08) \u30ea\u30ea\u30fc\u30b9\u3055\u308c\u305f Unity 5.3 \u3067\u3042\u308c\u3070\u6a19\u6e96\u3067 JSON Serializer \u3092\u642d\u8f09\u3057\u3066\u3044\u308b\u306e\u3067\u3001\u305d\u308c\u4f7f\u3063\u3066\u3042\u3052\u308b\u3088\u3046\u306b\u4fee\u6b63\u3057\u3066\u3082\u826f\u3044\u304b\u3082\u3067\u3059\u3002\nSave() \u30e1\u30bd\u30c3\u30c9\u3067 DOCTYPE \u30ce\u30fc\u30c9\u3092\u518d\u69cb\u7bc9\u3057\u3066\u3044\u307e\u3059\u304c\u3001\u666e\u901a\u306b\u4fdd\u5b58\u3059\u308b\u3068\u4f55\u6545\u304b [] \u3068\u3044\u3046\u8a18\u53f7\u304c\u6700\u5f8c\u306b\u633f\u5165\u3055\u308c\u3066\u3057\u307e\u3063\u3066\u3001\u30d3\u30eb\u30c9\u30a8\u30e9\u30fc\u3092\u3076\u3061\u304b\u307e\u3057\u3066\u304f\u308c\u308b\u306e\u3067\u3001\u6ce3\u304f\u6ce3\u304f\u5f37\u5f15\u306a\u51e6\u7406\u3092\u565b\u307e\u3057\u3066\u3044\u307e\u3059\u3002\n\u306a\u304a\u3001\u73fe\u6642\u70b9\u3067\u3001 data \u30ce\u30fc\u30c9\u304c\u6b63\u3057\u304f\u53d6\u308a\u6271\u308f\u308c\u306a\u3044 \u3068\u3044\u3046\u30d0\u30b0\u304c\u3042\u308a\u307e\u3059\uff01\n\u300c\u5bfe\u5fdc\u3057\u305f\u305c\uff01\u300d\u3063\u3066\u4eba\u304c\u5c45\u308c\u3070\u3001\u5f8c\u8ff0\u306e\u30b5\u30f3\u30d7\u30eb\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u306b\u30d7\u30eb\u30ea\u30af\u98db\u3070\u3057\u3066\u304f\u3060\u3055\u3044\uff57\n\nPostProcessBuild \u3067\u306e\u9069\u7528\n\u3053\u306e\u8fba\u306f\u3001\u672c\u984c\u3058\u3083\u306a\u3044\u3093\u3067\u3001\u30b5\u30e9\u30c3\u3068\u6d41\u3057\u307e\u3059\u3002\n\nPostProcessBuild.cs\nusing UnityEngine;\nusing UnityEditor;\nusing UnityEditor.Callbacks;\nusing System.IO;\nusing System.Collections.Generic;\n\nnamespace Sample.Editor {\n\n    public class PostProcessBuild {\n\n        [PostProcessBuild(200)]\n        public static void OnPostProcessBuild(BuildTarget target, string path) {\n            if (target != BuildTarget.iOS) {\n                return;\n            }\n\n            // \u9069\u7528\u3059\u308b .plistmods \u30d5\u30a1\u30a4\u30eb\u3092\u63bb\u304d\u96c6\u3081\u308b\n            List<string> files = new List<string>();\n            if (Directory.Exists(System.IO.Path.Combine(Application.dataPath, \"Sample/PlistMods\"))) {\n                files.AddRange(System.IO.Directory.GetFiles(System.IO.Path.Combine(Application.dataPath, \"Sample/PlistMods\"), \"*.plistmods\", System.IO.SearchOption.AllDirectories));\n            }\n\n            // .plistmods \u30d5\u30a1\u30a4\u30eb\u3092\u9069\u7528\u3059\u308b\n            string plistPath = Path.Combine(path, \"Info.plist\");\n            KidsStar.Editor.iOS.PlistMods plistMods = new KidsStar.Editor.iOS.PlistMods(plistPath);\n            plistMods.Apply(files);\n            plistMods.Save(plistPath);\n        }\n\n    }\n\n}\n\n\nPlistMods.Apply() \u306e\u5f15\u6570\u3068\u3057\u3066\u3001\n\n\nstring \u3068\u3057\u3066\u3001\u5358\u4e00\u306e .plistmods \u3078\u306e\u30d1\u30b9\n\nstring[] \u3068\u3057\u3066\u3001\u8907\u6570\u306e .plistmods \u3078\u306e\u30d1\u30b9\n\nList<string> \u3068\u3057\u3066\u3001\u8907\u6570\u306e .plistmods \u3078\u306e\u30d1\u30b9\n\n\u3068\u3044\u3046\u30aa\u30fc\u30d0\u30fc\u30ed\u30fc\u30c9\u3092\u7528\u610f\u3057\u3066\u3042\u308a\u307e\u3059\u306e\u3067\u3001\u304a\u597d\u304d\u306a\u65b9\u6cd5\u3067\u3069\u30fc\u305e\u3002\n\u3042\u3001\u3061\u306a\u307f\u306b\u3001 Info.plist \u306b\u9650\u3089\u305a\u3001 plist \u5f62\u5f0f\u306a\u3089\u3069\u3093\u306a\u30d5\u30a1\u30a4\u30eb\u3067\u3082\u884c\u3051\u308b\u3088\u3046\u306b\u3057\u3066\u3042\u308b\u306e\u3067\u3001\u72ec\u81ea\u30d7\u30ed\u30d1\u30c6\u30a3\u30ea\u30b9\u30c8\u3092\u4f7f\u3046\u3088\u3046\u306a SDK \u3068\u304b\u3092\u30a2\u30ec\u30b3\u30ec\u3057\u305f\u3044\u5834\u5408\u306a\u3093\u304b\u306b\u3082\u4f7f\u3048\u308b\u3093\u3058\u3083\u306a\u3044\u304b\u306a\uff1f\n\n\u30b5\u30f3\u30d7\u30eb\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\ngithub \u306b\u3066\u516c\u958b\u3057\u3066\u3042\u308a\u307e\u3059\u3002\n\u3053\u3044\u3064\u3092\u305d\u306e\u307e\u307e\u53d6\u308a\u8fbc\u3093\u3067 iOS \u5411\u3051\u30d3\u30eb\u30c9\u3057\u3066\u3044\u305f\u3060\u3051\u308c\u3070 Assets/Sample/PlistMods/sample.plistmods \u306e\u5909\u66f4\u5b9a\u7fa9\u306b\u5f93\u3063\u3066 Info.plist \u304c\u66f8\u304d\u63db\u308f\u308b\u30cf\u30ba\u3067\u3059\u3002\nUnity \u306e\u30d0\u30fc\u30b8\u30e7\u30f3\u306f 5.2.3f1 \u3067\u78ba\u8a8d\u6e08\u3068\u306a\u308a\u307e\u3059\u3002\n\n\u307e\u3068\u3081\n\u5b9f\u306f\u3001Unity 5 \u304b\u3089\u306f\u3001 UnityEditor.iOS.Xcode \u306a\u308b\u30cd\u30fc\u30e0\u30b9\u30da\u30fc\u30b9\u306e\u4e0b\u306b PlistDocument \u3068\u3044\u3046\u30af\u30e9\u30b9\u304c\u751f\u3048\u3066\u3044\u3066\u3001\u3053\u3044\u3064\u3092\u99c6\u4f7f\u3057\u3066\u3042\u3052\u308c\u3070\u540c\u3058\u3088\u3046\u306a\u3053\u3068\u306f\u5b9f\u73fe\u51fa\u6765\u308b\u3093\u3067\u3059\u304c\u3001\u8ffd\u52a0\u30fb\u5909\u66f4\u30fb\u524a\u9664\u306e\u51e6\u7406\u305d\u306e\u3082\u306e\u306f\u3001\u500b\u5225\u306b\u5b9f\u88c5\u3059\u308b\u5fc5\u8981\u304c\u3042\u308b\u305f\u3081\u3001\u3053\u3093\u306a\u30e2\u30ce\u3092\u4f5c\u3063\u3066\u307f\u305f\u6b21\u7b2c\u3067\u3059\u3002\n\u540c\u3058\u3088\u3046\u306a\u611f\u3058\u3067 Android \u306e AndroidManifest.xml \u306e\u7de8\u96c6\u3068\u304b\u3001 iOS \u306e .pbxproj (Xcode \u306e Build Settings \u3068\u304b\u306e\u8a2d\u5b9a\u304c\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u308b\u30d5\u30a1\u30a4\u30eb) \u306e\u7de8\u96c6\u3068\u304b\u3082\u5b9f\u88c5\u3057\u3066\u307f\u305f\u3089\u9762\u767d\u3044\u3093\u3058\u3083\u306a\u3044\u3067\u3057\u3087\u30fc\u304b\uff1f\n\u3080\u3057\u308d\u3001\u8ab0\u304b\u4f5c\u3063\u3066\uff01\uff57\n\n\u3053\u306e\u30a8\u30f3\u30c8\u30ea\u306f [Unity Advent Calendar 2015](http://qiita.com/advent-calendar/2015/unity) \u306e9\u65e5\u76ee\u306e\u8a18\u4e8b\u306b\u306a\u308a\u307e\u3059\u3002\n\n\u524d\u65e5\u306e\u8a18\u4e8b\u306f [@fakestarbaby](http://qiita.com/fakestarbaby) \u3055\u3093\u306e\u300c[Visual Studio Code \u3092\u5229\u7528\u3057\u3066 Unity \u30a2\u30d7\u30ea\u3092\u30c7\u30d0\u30c3\u30b0\u3059\u308b](http://qiita.com/fakestarbaby/items/8ddc9e779bccbd08b3b2)\u300d\u3067\u3057\u305f\u3002\n\n\u30ed\u30b0\u4ed5\u8fbc\u3093\u3067\u30c7\u30d0\u30c3\u30b0\u3059\u308b\u306e\u3082\u30a2\u30ea\u3067\u3059\u304c\u3001\u3084\u3063\u3071\u308a\u3061\u3083\u3093\u3068\u30d6\u30ec\u30fc\u30af\u30dd\u30a4\u30f3\u30c8\u4ed5\u8fbc\u3093\u3067\u30c7\u30d0\u30c3\u30b0\u3067\u304d\u308b\u3068\u697d\u3067\u3059\u3088\u306d\uff01\n\n\u79c1\u3082\u6700\u8fd1 Visual Studio Code \u9063\u3044\u306b\u306a\u3063\u305f\u306e\u3067\u3001\u30ac\u30f3\u30ac\u30f3\u6d3b\u7528\u3057\u3066\u3044\u3053\u3046\u304b\u3068\u601d\u3044\u307e\u3059\uff01\n\n# \u524d\u7f6e\u304d\n\nUnity \u3067 iOS \u5411\u3051\u306b\u30d3\u30eb\u30c9\u3057\u305f\u5f8c\u306b\u3001 **`Info.plist` \u3092\u7de8\u96c6\u3059\u308b** \u3068\u3044\u3046\u4f5c\u696d\u304c\u767a\u751f\u3059\u308b\u4eba\u3082\u591a\u3044\u306e\u3067\u306f\u306a\u3044\u3067\u3057\u3087\u3046\u304b\uff1f\n\n\u4f8b\u3048\u3070\u3001\n\n- ATS (App Transport Security) \u95a2\u9023\u306e\u8a2d\u5b9a\n- URL Schemes \u306e\u8a2d\u5b9a\n- \u30aa\u30ea\u30a8\u30f3\u30c6\u30fc\u30b7\u30e7\u30f3\u306b\u95a2\u3059\u308b\u8a2d\u5b9a\u3092\u66f8\u304d\u63db\u3048\n\n\u2026\u306a\u3069\u306a\u3069\u3002\n\n\u3053\u306e\u8fba\u3001\u6bce\u56de\u624b\u52d5\u3067\u66f8\u304d\u63db\u3048\u308b\u306e\u306f\u9762\u5012\u306a\u306e\u3067\u3001\u81ea\u52d5\u5316\u3057\u3061\u3083\u3044\u307e\u3057\u3087\u3046\u3063\u3066\u306a\u304a\u8a71\u3067\u3059\u3002\n\n# `plist` \u3063\u3066\u4f55\u3088\uff1f\n\n\u672c\u984c\u306b\u5165\u308b\u524d\u306b\u3001\u307e\u305a `plist` \u3068\u3044\u3046\u5f62\u5f0f\u306b\u3064\u3044\u3066\u7406\u89e3\u3057\u3066\u304a\u304f\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\n\n\u6210\u308a\u7acb\u3061\u3068\u304b\u305d\u3046\u3044\u3046\u5c0f\u96e3\u3057\u3044\u30b3\u30c8\u306f [Wikipedia](https://ja.wikipedia.org/wiki/%E3%83%97%E3%83%AD%E3%83%91%E3%83%86%E3%82%A3%E3%83%AA%E3%82%B9%E3%83%88) \u306b\u8aac\u660e\u3092\u8b72\u308b\u3068\u3057\u3066\u3001\u7aef\u7684\u306b\u8a00\u3048\u3070 **XML \u3067\u8a18\u8ff0\u3055\u308c\u308b\u30c7\u30fc\u30bf\u5b9a\u7fa9\u30d5\u30a1\u30a4\u30eb** \u306e\u30b3\u30c8\u3067\u3059\u3002\n\n\u3053\u3044\u3064\u306b\u306f\u3001\n\n- \u305d\u3082\u305d\u3082 XML \u3067\u3042\u308b\n- \u578b\u306b\u5fdc\u3058\u305f\u30ce\u30fc\u30c9\u304c\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u308b\n- `Dictionary` (\u9023\u60f3\u914d\u5217) \u306f `<key>` \u30ce\u30fc\u30c9\u3068\u5bfe\u306b\u306a\u308b\u578b\u30ce\u30fc\u30c9\u3092\u9023\u7d9a\u3057\u3066\u8a18\u8ff0\u3059\u308b\n\n\u3068\u3044\u3063\u305f\u3001\u30af\u30bb\u304c\u3042\u3063\u3066\u3001\u30b5\u30c3\u30af\u30ea\u66f8\u304d\u63db\u3048\u3088\u3046\u3068\u601d\u3063\u3066\u3082\u3001\u306a\u304b\u306a\u304b\u96e3\u3057\u304b\u3063\u305f\u308a\u3057\u307e\u3059\u3002\n\n\u5b9f\u969b\u306b\u3001iOS \u51fa\u529b\u3057\u305f\u969b\u306b\u751f\u6210\u3055\u308c\u308b `Info.plist` \u3092\u30c6\u30ad\u30b9\u30c8\u30a8\u30c7\u30a3\u30bf\u3067\u958b\u3044\u3066\u307f\u308c\u3070\u3001\u300c\u55da\u547c\u2026\u9762\u5012\u304f\u3055\u3044\u2026\u3002\u300d\u3068\u306a\u308b\u30b3\u30c8\u8acb\u3051\u5408\u3044\u3067\u3059\u3002\u3048\u3048\u3002\n\n# \u6c4e\u7528\u7684\u306b\u7de8\u96c6\u3059\u308b\u305f\u3081\u306e\u4f5c\u6226\n\n\u3053\u306e\u9762\u5012\u304f\u3055\u3044\u30d5\u30a9\u30fc\u30de\u30c3\u30c8\u3092\u653b\u7565\u3059\u308b\u305f\u3081\u306e\u6226\u7565\u3092\u7acb\u3066\u3066\u307f\u307e\u3057\u3087\u3046\u3002\n\n- `System.Xml` \u306e\u30af\u30e9\u30b9\u3092\u4f7f\u3046\u30b3\u30c8\u3092\u524d\u63d0\u3068\u3059\u308b\n- \u3044\u308f\u3086\u308b\u30b9\u30ab\u30e9\u30fc\u306a\u30ce\u30fc\u30c9\u306f\u5358\u4e00\u306e\u30c6\u30ad\u30b9\u30c8\u30ce\u30fc\u30c9\u3068\u3057\u3066\u53d6\u308a\u6271\u3046\n- `array` \u30ce\u30fc\u30c9\u3068 `dict` \u30ce\u30fc\u30c9\u306f\u3061\u3087\u3063\u3068\u9811\u5f35\u308b\u5fc5\u8981\u3042\u308a\n- `dict` \u30ce\u30fc\u30c9\u306b\u65bc\u3051\u308b\u30ad\u30fc\u306e\u91cd\u8907\u306f\u4e0a\u66f8\u304d\u3067\u5bfe\u5fdc\u3059\u308b\n\t- \u305f\u3060\u3057\u3001\u518d\u5e30\u7684\u306b\u6f5c\u308c\u308b\u5834\u5408\u306f\u3001\u672b\u7aef\u306e\u30ce\u30fc\u30c9\u3067\u306e\u307f\u4e0a\u66f8\u304d\u3092\u884c\u3046\n- `array` \u30ce\u30fc\u30c9\u306f\u539f\u5247\u7684\u306b\u8ffd\u52a0\u306e\u307f\n- \u30ce\u30fc\u30c9\u306e\u524a\u9664\u3082\u5b9f\u88c5\u3067\u304d\u308b\u3068\u30aa\u30b7\u30e3\u30ec\n\n\u3053\u306e\u8fba\u308a\u3092\u5b9a\u7fa9\u3057\u305f\u30d1\u30c3\u30c1\u7684\u306a\u30d5\u30a1\u30a4\u30eb\u3092\u8aad\u307f\u8fbc\u3080\u3053\u3068\u3067\u3001 `plist` \u30d5\u30a1\u30a4\u30eb\u3092\u7de8\u96c6\u3067\u304d\u305f\u3089\u697d\u3067\u3059\u3088\u306d\uff1f\n\n# `PlistMods`\n\n\u3068\u3001\u8a00\u3046\u308f\u3051\u3067\u4f5c\u3063\u3066\u307f\u307e\u3057\u305f\u3002\n\n## \u5909\u66f4\u5b9a\u7fa9\u30d5\u30a1\u30a4\u30eb\n\n`.plistmods` \u3068\u3044\u3046\u62e1\u5f35\u5b50\u3092\u6301\u3064 `JSON` \u30d5\u30a1\u30a4\u30eb\u3068\u3057\u3066\u5909\u66f4\u65b9\u6cd5\u3092\u5b9a\u7fa9\u3057\u3066\u307f\u307e\u3057\u305f\u3002\n\n\u8981\u70b9\u3068\u3057\u3066\u306f\u4ee5\u4e0b\u306e\u901a\u308a\u3002\n\n- `{ \"type\": ..., \"value\": ... }` \u3068\u3044\u30461\u3064\u5206\u306e plist \u30ce\u30fc\u30c9\u3092\u8868\u73fe\u3059\u308b\u305f\u3081\u306e `Object` \u30ce\u30fc\u30c9\u3092\u6301\u3064\n- `type` \u306e\u5024\u306b\u5fdc\u3058\u3066 `value` \u30ce\u30fc\u30c9\u306e\u578b\u3082\u5909\u308f\u308b\n\t- `array` \u306a\u3089 `Array` \u30ce\u30fc\u30c9\u3092\u53d6\u308b\n\t- `dict` \u306a\u3089 plist \u7684\u306a `key` \u30ce\u30fc\u30c9\u306e\u5024\u3092\u3001\u305d\u306e\u307e\u307e\u30ad\u30fc\u3068\u3057\u305f `Object` \u30ce\u30fc\u30c9\u306e\u9023\u60f3\u914d\u5217\u3068\u3059\u308b\n- `dict` \u306a\u30ce\u30fc\u30c9\u306e\u30ad\u30fc\u3092\u30cf\u30a4\u30d5\u30f3\u59cb\u307e\u308a\u306b\u3059\u308b\u3068\u3001\u300c\u8a72\u5f53\u306e\u30ad\u30fc\u3068\u3001\u305d\u308c\u306b\u96a3\u63a5\u3059\u308b\u5024\u30ce\u30fc\u30c9\u3092\u524a\u9664\u3059\u308b\u300d\u3068\u307f\u306a\u3059\n\n\u307e\u3041\u3001\u30b5\u30f3\u30d7\u30eb\u898b\u308c\u3070\u3042\u308b\u7a0b\u5ea6\u7406\u89e3\u306f\u3067\u304d\u308b\u3093\u3058\u3083\u306a\u3044\u304b\u3068\u3002\n\n```json:sample.plistmods\n{\n  \"type\": \"dict\",\n  \"value\": {\n    \"-CFBundleIconFiles\": null,\n    \"-UISupportedInterfaceOrientations\": null,\n    \"-UISupportedInterfaceOrientations~ipad\": null,\n    \"UISupportedInterfaceOrientations\": {\n      \"type\": \"array\",\n      \"value\": [\n        {\n          \"type\": \"string\",\n          \"value\": \"UIInterfaceOrientationLandscapeLeft\"\n        },\n        {\n          \"type\": \"string\",\n          \"value\": \"UIInterfaceOrientationLandscapeRight\"\n        }\n      ]\n    },\n    \"UISupportedInterfaceOrientations~ipad\": {\n      \"type\": \"array\",\n      \"value\": [\n        {\n          \"type\": \"string\",\n          \"value\": \"UIInterfaceOrientationLandscapeLeft\"\n        },\n        {\n          \"type\": \"string\",\n          \"value\": \"UIInterfaceOrientationLandscapeRight\"\n        }\n      ]\n    },\n    \"NSAppTransportSecurity\": {\n      \"type\": \"dict\",\n      \"value\": {\n        \"NSExceptionDomains\": {\n          \"type\": \"dict\",\n          \"value\": {\n            \"kidsstar.tv\": {\n              \"type\": \"dict\",\n              \"value\": {\n                \"NSExceptionAllowsInsecureHTTPLoads\": {\n                  \"type\": \"bool\",\n                  \"value\": true\n                },\n                \"NSExceptionRequiresForwardSecrecy\": {\n                  \"type\": \"bool\",\n                  \"value\": false\n                },\n                \"NSIncludesSubdomains\": {\n                  \"type\": \"bool\",\n                  \"value\": true\n                }\n              }\n            },\n            \"cloudfront.net\": {\n              \"type\": \"dict\",\n              \"value\": {\n                \"NSExceptionAllowsInsecureHTTPLoads\": {\n                  \"type\": \"bool\",\n                  \"value\": true\n                },\n                \"NSExceptionRequiresForwardSecrecy\": {\n                  \"type\": \"bool\",\n                  \"value\": false\n                },\n                \"NSIncludesSubdomains\": {\n                  \"type\": \"bool\",\n                  \"value\": true\n                }\n              }\n            }\n          }\n        }\n      }\n    },\n    \"CFBundleURLTypes\": {\n      \"type\": \"array\",\n      \"value\": [\n        {\n          \"type\": \"dict\",\n          \"value\": {\n            \"CFBundleTypeRole\": {\n              \"type\": \"string\",\n              \"value\": \"Editor\"\n            },\n            \"CFBundleURLName\": {\n              \"type\": \"string\",\n              \"value\": \"tv.kidsstar.app.${PRODUCT_NAME:rfc1034identifier}\"\n            },\n            \"CFBundleURLSchemes\": {\n              \"type\": \"array\",\n              \"value\": [\n                {\n                  \"type\": \"string\",\n                  \"value\": \"tv.kidsstar.app.${PRODUCT_NAME:rfc1034identifier}\"\n                }\n              ]\n            }\n          }\n        }\n      ]\n    }\n  }\n}\n```\n\n## `.plistmods` \u306e\u9069\u7528\n\n\u3093\u3067\u3001 `.plistmods` \u306a\u5b9a\u7fa9\u30d5\u30a1\u30a4\u30eb\u3092\u8aad\u307f\u8fbc\u3093\u3067\u3001 `Info.plist` \u3092\u7de8\u96c6\u3059\u308b\u611f\u3058\u306e\u52d5\u304d\u306b\u306a\u308a\u307e\u3059\u3002\n\n\u307e\u3041\u3001\u5b9f\u969b\u306e\u30b3\u30fc\u30c9\u3092\u898b\u3066\u3082\u3089\u3046\u306e\u304c\u65e9\u3044\u3067\u3059\u3002\n\n```csharp:PlistMods.cs\nusing UnityEngine;\nusing System.IO;\nusing System.Xml;\nusing System.Collections;\nusing System.Collections.Generic;\nusing System.Text.RegularExpressions;\nusing MiniJSON;\n\nnamespace KidsStar.Editor.iOS {\n\n    public class PlistMods {\n\n        private XmlDocument plist;\n\n        public PlistMods(string path) {\n            this.plist = new XmlDocument();\n            this.plist.Load(path);\n        }\n\n        public void Apply(string pathPlistMods) {\n            IDictionary mods = (IDictionary)Json.Deserialize(File.ReadAllText(pathPlistMods));\n\n            // \u7b2c1\u968e\u5c64\u304c dict \u30ce\u30fc\u30c9\u3067\u3042\u308b\u3053\u3068\u3092\u524d\u63d0\u3068\u3057\u3066\u3044\u308b\n            IDictionary rootItem = (IDictionary)mods[\"value\"];\n            XmlNode rootNode = this.plist.SelectSingleNode(\"/plist/dict\");\n            foreach (object key in rootItem.Keys) {\n                this.Apply(rootNode, (string)key, (IDictionary)rootItem[key]);\n            }\n        }\n\n        public void Apply(string[] pathPlistModsList) {\n            foreach (string pathPlistMods in pathPlistModsList) {\n                this.Apply(pathPlistMods);\n            }\n        }\n\n        public void Apply(List<string> pathPlistModsList) {\n            this.Apply(pathPlistModsList.ToArray());\n        }\n\n        public void Save(string path) {\n            XmlDocumentType _documentType = this.plist.CreateDocumentType(\"plist\", \"-//Apple//DTD PLIST 1.0//EN\", \"http://www.apple.com/DTDs/PropertyList-1.0.dtd\", null);\n            if (null != this.plist.DocumentType) {\n                this.plist.RemoveChild(this.plist.DocumentType);\n            }\n            this.plist.InsertAfter(_documentType, this.plist.FirstChild);\n            this.plist.Save(path);\n        }\n\n        private void Apply(XmlNode parent, string key, IDictionary item) {\n            // \u30ad\u30fc\u304c\u30cf\u30a4\u30d5\u30f3\u3067\u59cb\u307e\u308b\u5834\u5408\u3001\u524a\u9664\u3068\u307f\u306a\u3059\n            if (!string.IsNullOrEmpty(key) && Regex.IsMatch(key, \"^-\")) {\n                key = Regex.Replace(key, \"^-\", string.Empty);\n                if (parent.HasKeyNode(key)) {\n                    parent.RemoveChild(parent.GetKeyNode(key).NextSibling);\n                    parent.RemoveChild(parent.GetKeyNode(key));\n                }\n                return;\n            }\n\n            if (null == item[\"type\"] || null == item[\"value\"]) {\n                Debug.LogError(\"\u51e6\u7406\u5bfe\u8c61\u306e\u30ce\u30fc\u30c9\u306b type \u304b value \u304c\u542b\u307e\u308c\u3066\u3044\u307e\u305b\u3093\");\n                return;\n            }\n            switch ((string)item[\"type\"]) {\n                case \"bool\":\n                    this.ApplyScalar(parent, key, (bool)item[\"value\"] ? \"true\" : \"false\");\n                    break;\n                case \"integer\":\n                    this.ApplyScalar(parent, key, \"integer\", (int)item[\"value\"]);\n                    break;\n                case \"real\":\n                    this.ApplyScalar(parent, key, \"real\", (float)item[\"value\"]);\n                    break;\n                case \"string\":\n                    this.ApplyScalar(parent, key, \"string\", (string)item[\"value\"]);\n                    break;\n                case \"date\":\n                    this.ApplyScalar(parent, key, \"date\", (string)item[\"value\"]);\n                    break;\n                case \"data\":\n                    this.ApplyScalar(parent, key, \"data\", (string)item[\"value\"]);\n                    break;\n                case \"array\":\n                    this.ApplyArray(parent, key, (IList)item[\"value\"]);\n                    break;\n                case \"dict\":\n                    this.ApplyDict(parent, key, (IDictionary)item[\"value\"]);\n                    break;\n            }\n        }\n\n        private void ApplyScalar(XmlNode parent, string key, string type, object value = null) {\n            // \u30ad\u30fc\u304c\u7a7a\u306e\u5834\u5408\u3001Array \u30ce\u30fc\u30c9\u3078\u306e\u633f\u5165\u3068\u898b\u306a\u3059\n            if (string.IsNullOrEmpty(key)) {\n                if (null == value) {\n                    parent.AppendChild(this.plist.CreateElement(type));\n                } else {\n                    parent.AppendChild(this.plist.CreateSimpleTextNode(type, value.ToString()));\n                }\n                return;\n            }\n\n            if (parent.HasKeyNode(key)) {\n                parent.RemoveChild(parent.GetKeyNode(key).NextSibling);\n            } else {\n                parent.AppendChild(this.plist.CreateKeyNode(key));\n            }\n            if (null == value) {\n                parent.InsertAfter(this.plist.CreateElement(type), parent.GetKeyNode(key));\n            } else {\n                parent.InsertAfter(this.plist.CreateSimpleTextNode(type, value.ToString()), parent.GetKeyNode(key));\n            }\n        }\n\n        private void ApplyArray(XmlNode parent, string key, IList itemList) {\n            // \u30ad\u30fc\u304c\u7a7a\u306e\u5834\u5408\u3001Array \u30ce\u30fc\u30c9\u3078\u306e\u633f\u5165\u3068\u898b\u306a\u3059\n            if (string.IsNullOrEmpty(key)) {\n                foreach (object item in itemList) {\n                    this.Apply(parent, null, (IDictionary)item);\n                }\n                return;\n            }\n\n            if (!parent.HasKeyNode(key)) {\n                // \u30ad\u30fc\u304c\u306a\u3044\u306a\u3089\u3001\u30ad\u30fc\u30ce\u30fc\u30c9\u3068 array \u30ce\u30fc\u30c9\u3092\u4f5c\u308b\n                parent.AppendChild(this.plist.CreateKeyNode(key));\n                parent.AppendChild(this.plist.CreateElement(\"array\"));\n            }\n            foreach (object item in itemList) {\n                this.Apply(parent.GetKeyNode(key).NextSibling, null, (IDictionary)item);\n            }\n        }\n\n        private void ApplyDict(XmlNode parent, string key, IDictionary item) {\n            // \u30ad\u30fc\u304c\u7a7a\u306e\u5834\u5408\u3001Array \u30ce\u30fc\u30c9\u3078\u306e\u633f\u5165\u3068\u898b\u306a\u3059\n            if (string.IsNullOrEmpty(key)) {\n                XmlNode dictNode = parent.AppendChild(this.plist.CreateElement(\"dict\"));\n                foreach (object k in item.Keys) {\n                    this.Apply(dictNode, (string)k, (IDictionary)item[k]);\n                }\n                return;\n            }\n\n            if (!parent.HasKeyNode(key)) {\n                // \u30ad\u30fc\u304c\u306a\u3044\u306a\u3089\u3001\u30ad\u30fc\u30ce\u30fc\u30c9\u3068 dict \u30ce\u30fc\u30c9\u3092\u4f5c\u308b\n                parent.AppendChild(this.plist.CreateKeyNode(key));\n                parent.AppendChild(this.plist.CreateElement(\"dict\"));\n            }\n            foreach (object k in item.Keys) {\n                this.Apply(parent.GetKeyNode(key).NextSibling, (string)k, (IDictionary)item[k]);\n            }\n        }\n    }\n\n    internal static class XmlExtension {\n\n        public static bool HasChildNode(this XmlNode self, string name, bool ignoreCase = true) {\n            return null != self.GetChildNode(name, ignoreCase);\n        }\n\n        public static XmlNode GetChildNode(this XmlNode self, string name, bool ignoreCase = true) {\n            foreach (XmlNode childNode in self.ChildNodes) {\n                if (childNode.Name == name || (ignoreCase && childNode.Name.ToLower() == name.ToLower())) {\n                    return childNode;\n                }\n            }\n            return null;\n        }\n\n        public static bool HasKeyNode(this XmlNode self, string key) {\n            return null != self.GetKeyNode(key);\n        }\n\n        public static XmlNode GetKeyNode(this XmlNode self, string key) {\n            return self.SelectSingleNode(string.Format(\"./key[.=\\\"{0}\\\"]\", key));\n        }\n\n        public static XmlNode CreateSimpleTextNode(this XmlDocument xml, string name, string text) {\n            XmlElement _node = xml.CreateElement(name);\n            _node.InnerText = text;\n            return _node;\n        }\n\n        public static XmlNode CreateKeyNode(this XmlDocument xml, string key) {\n            return xml.CreateSimpleTextNode(\"key\", key);\n        }\n\n    }\n}\n```\n\n[MiniJSON](https://gist.github.com/darktable/1411710) \u3092\u4f7f\u3063\u3066\u3044\u307e\u3059\u304c\u3001\u6628\u65e5 (2015/12/08) \u30ea\u30ea\u30fc\u30b9\u3055\u308c\u305f Unity 5.3 \u3067\u3042\u308c\u3070\u6a19\u6e96\u3067 JSON Serializer \u3092\u642d\u8f09\u3057\u3066\u3044\u308b\u306e\u3067\u3001\u305d\u308c\u4f7f\u3063\u3066\u3042\u3052\u308b\u3088\u3046\u306b\u4fee\u6b63\u3057\u3066\u3082\u826f\u3044\u304b\u3082\u3067\u3059\u3002\n\n`Save()` \u30e1\u30bd\u30c3\u30c9\u3067 `DOCTYPE` \u30ce\u30fc\u30c9\u3092\u518d\u69cb\u7bc9\u3057\u3066\u3044\u307e\u3059\u304c\u3001\u666e\u901a\u306b\u4fdd\u5b58\u3059\u308b\u3068\u4f55\u6545\u304b `[]` \u3068\u3044\u3046\u8a18\u53f7\u304c\u6700\u5f8c\u306b\u633f\u5165\u3055\u308c\u3066\u3057\u307e\u3063\u3066\u3001\u30d3\u30eb\u30c9\u30a8\u30e9\u30fc\u3092\u3076\u3061\u304b\u307e\u3057\u3066\u304f\u308c\u308b\u306e\u3067\u3001\u6ce3\u304f\u6ce3\u304f\u5f37\u5f15\u306a\u51e6\u7406\u3092\u565b\u307e\u3057\u3066\u3044\u307e\u3059\u3002\n\n\u306a\u304a\u3001\u73fe\u6642\u70b9\u3067\u3001 **`data` \u30ce\u30fc\u30c9\u304c\u6b63\u3057\u304f\u53d6\u308a\u6271\u308f\u308c\u306a\u3044** \u3068\u3044\u3046\u30d0\u30b0\u304c\u3042\u308a\u307e\u3059\uff01\n\n\u300c\u5bfe\u5fdc\u3057\u305f\u305c\uff01\u300d\u3063\u3066\u4eba\u304c\u5c45\u308c\u3070\u3001\u5f8c\u8ff0\u306e\u30b5\u30f3\u30d7\u30eb\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u306b\u30d7\u30eb\u30ea\u30af\u98db\u3070\u3057\u3066\u304f\u3060\u3055\u3044\uff57\n\n## PostProcessBuild \u3067\u306e\u9069\u7528\n\n\u3053\u306e\u8fba\u306f\u3001\u672c\u984c\u3058\u3083\u306a\u3044\u3093\u3067\u3001\u30b5\u30e9\u30c3\u3068\u6d41\u3057\u307e\u3059\u3002\n\n```csharp:PostProcessBuild.cs\nusing UnityEngine;\nusing UnityEditor;\nusing UnityEditor.Callbacks;\nusing System.IO;\nusing System.Collections.Generic;\n\nnamespace Sample.Editor {\n\n    public class PostProcessBuild {\n\n        [PostProcessBuild(200)]\n        public static void OnPostProcessBuild(BuildTarget target, string path) {\n            if (target != BuildTarget.iOS) {\n                return;\n            }\n\n            // \u9069\u7528\u3059\u308b .plistmods \u30d5\u30a1\u30a4\u30eb\u3092\u63bb\u304d\u96c6\u3081\u308b\n            List<string> files = new List<string>();\n            if (Directory.Exists(System.IO.Path.Combine(Application.dataPath, \"Sample/PlistMods\"))) {\n                files.AddRange(System.IO.Directory.GetFiles(System.IO.Path.Combine(Application.dataPath, \"Sample/PlistMods\"), \"*.plistmods\", System.IO.SearchOption.AllDirectories));\n            }\n\n            // .plistmods \u30d5\u30a1\u30a4\u30eb\u3092\u9069\u7528\u3059\u308b\n            string plistPath = Path.Combine(path, \"Info.plist\");\n            KidsStar.Editor.iOS.PlistMods plistMods = new KidsStar.Editor.iOS.PlistMods(plistPath);\n            plistMods.Apply(files);\n            plistMods.Save(plistPath);\n        }\n\n    }\n\n}\n```\n\n`PlistMods.Apply()` \u306e\u5f15\u6570\u3068\u3057\u3066\u3001\n\n- `string` \u3068\u3057\u3066\u3001\u5358\u4e00\u306e `.plistmods` \u3078\u306e\u30d1\u30b9\n- `string[]` \u3068\u3057\u3066\u3001\u8907\u6570\u306e `.plistmods` \u3078\u306e\u30d1\u30b9\n- `List<string>` \u3068\u3057\u3066\u3001\u8907\u6570\u306e `.plistmods` \u3078\u306e\u30d1\u30b9\n\n\u3068\u3044\u3046\u30aa\u30fc\u30d0\u30fc\u30ed\u30fc\u30c9\u3092\u7528\u610f\u3057\u3066\u3042\u308a\u307e\u3059\u306e\u3067\u3001\u304a\u597d\u304d\u306a\u65b9\u6cd5\u3067\u3069\u30fc\u305e\u3002\n\n\u3042\u3001\u3061\u306a\u307f\u306b\u3001 `Info.plist` \u306b\u9650\u3089\u305a\u3001 `plist` \u5f62\u5f0f\u306a\u3089\u3069\u3093\u306a\u30d5\u30a1\u30a4\u30eb\u3067\u3082\u884c\u3051\u308b\u3088\u3046\u306b\u3057\u3066\u3042\u308b\u306e\u3067\u3001\u72ec\u81ea\u30d7\u30ed\u30d1\u30c6\u30a3\u30ea\u30b9\u30c8\u3092\u4f7f\u3046\u3088\u3046\u306a SDK \u3068\u304b\u3092\u30a2\u30ec\u30b3\u30ec\u3057\u305f\u3044\u5834\u5408\u306a\u3093\u304b\u306b\u3082\u4f7f\u3048\u308b\u3093\u3058\u3083\u306a\u3044\u304b\u306a\uff1f\n\n## \u30b5\u30f3\u30d7\u30eb\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\n\n[github](https://github.com/kidsstar/Sample20151209) \u306b\u3066\u516c\u958b\u3057\u3066\u3042\u308a\u307e\u3059\u3002\n\n\u3053\u3044\u3064\u3092\u305d\u306e\u307e\u307e\u53d6\u308a\u8fbc\u3093\u3067 iOS \u5411\u3051\u30d3\u30eb\u30c9\u3057\u3066\u3044\u305f\u3060\u3051\u308c\u3070 `Assets/Sample/PlistMods/sample.plistmods` \u306e\u5909\u66f4\u5b9a\u7fa9\u306b\u5f93\u3063\u3066 Info.plist \u304c\u66f8\u304d\u63db\u308f\u308b\u30cf\u30ba\u3067\u3059\u3002\n\nUnity \u306e\u30d0\u30fc\u30b8\u30e7\u30f3\u306f 5.2.3f1 \u3067\u78ba\u8a8d\u6e08\u3068\u306a\u308a\u307e\u3059\u3002\n\n# \u307e\u3068\u3081\n\n\u5b9f\u306f\u3001Unity 5 \u304b\u3089\u306f\u3001 `UnityEditor.iOS.Xcode` \u306a\u308b\u30cd\u30fc\u30e0\u30b9\u30da\u30fc\u30b9\u306e\u4e0b\u306b `PlistDocument` \u3068\u3044\u3046\u30af\u30e9\u30b9\u304c\u751f\u3048\u3066\u3044\u3066\u3001\u3053\u3044\u3064\u3092\u99c6\u4f7f\u3057\u3066\u3042\u3052\u308c\u3070\u540c\u3058\u3088\u3046\u306a\u3053\u3068\u306f\u5b9f\u73fe\u51fa\u6765\u308b\u3093\u3067\u3059\u304c\u3001\u8ffd\u52a0\u30fb\u5909\u66f4\u30fb\u524a\u9664\u306e\u51e6\u7406\u305d\u306e\u3082\u306e\u306f\u3001\u500b\u5225\u306b\u5b9f\u88c5\u3059\u308b\u5fc5\u8981\u304c\u3042\u308b\u305f\u3081\u3001\u3053\u3093\u306a\u30e2\u30ce\u3092\u4f5c\u3063\u3066\u307f\u305f\u6b21\u7b2c\u3067\u3059\u3002\n\n\u540c\u3058\u3088\u3046\u306a\u611f\u3058\u3067 Android \u306e `AndroidManifest.xml` \u306e\u7de8\u96c6\u3068\u304b\u3001 iOS \u306e `.pbxproj` (Xcode \u306e Build Settings \u3068\u304b\u306e\u8a2d\u5b9a\u304c\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u308b\u30d5\u30a1\u30a4\u30eb) \u306e\u7de8\u96c6\u3068\u304b\u3082\u5b9f\u88c5\u3057\u3066\u307f\u305f\u3089\u9762\u767d\u3044\u3093\u3058\u3083\u306a\u3044\u3067\u3057\u3087\u30fc\u304b\uff1f\n\n\u3080\u3057\u308d\u3001\u8ab0\u304b\u4f5c\u3063\u3066\uff01\uff57\n", "tags": ["iOS", "Unity", "Unity3D", "Xcode"]}