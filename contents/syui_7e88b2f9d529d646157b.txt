{"context": " More than 1 year has passed since last update.zsh\u30a2\u30c9\u30d9\u30f3\u30c8\u30ab\u30ec\u30f3\u30c0\u30fc2014\u306e\u6642\u306b\u4f5c\u3063\u305f\u30b5\u30f3\u30d7\u30eb\u306e\u8a2d\u5b9a\u30d5\u30a1\u30a4\u30eb\u3067\u3059\u3002\u4e00\u5fdc\u3001\u516c\u958b\u3057\u3066\u304a\u304d\u307e\u3059\u3002\n# os : archlinux\n# terminal : lilyterm\n# font : ttf-dejavu\n# source : https://gist.github.com/syui/11322769c45f42fad962\n\n### export {{{\nPATH=$PATH:$HOME/.rvm/bin\nHISTFILE=~/.zsh_history\nHISTSIZE=20000\nSAVEHIST=20000\nfpath=(~/.zsh/functions/ $fpath)\nfpath=($HOME/.zsh/functions $fpath)\ne_normal=`echo -e \"\u00a5033[0;30m\"`\ne_RED=`echo -e \"\u00a5033[1;31m\"`\ne_BLUE=`echo -e \"\u00a5033[1;36m\"`\n\nunset LSCOLORS\nexport EDITOR=/Applications/MacVim.app/Contents/MacOS/Vim\nexport BROWSER=w3m\nexport PATH=/usr/local/bin:$PATH\nexport LANG=ja_JP.UTF-8\nexport LESSCHARSET=utf-8\nexport EDITOR=vim\nexport PATH=$PATH:$HOME/local/bin:/usr/local/git/bin\nexport PATH=$PATH:$HOME/dotfiles/bin\nexport PATH=$PATH:/sbin:/usr/local/bin\nexport MANPATH=$MANPATH:/opt/local/man:/usr/local/share/man\nexport PATH=\"$PATH:$HOME/.rvm/bin\"\n\n[[ -s \"$HOME/.pythonbrew/etc/bashrc\" ]] && source \"$HOME/.pythonbrew/etc/bashrc\"\n\ncase \"${OSTYPE}\" in\n    darwin*)\n        export PATH=$PATH:/opt/local/bin:/opt/local/sbin\n        export PATH=$PATH:/System/Library/PrivateFrameworks/Apple80211.framework/Versions/A/Resources\n        ;;\n    freebsd*)\n        case ${UID} in\n            0)\n                updateports()\n                {\n                    if [ -f /usr/ports/.portsnap.INDEX ]\n                    then\n                        portsnap fetch update\n                    else\n                        portsnap fetch extract update\n                    fi\n                    (cd /usr/ports/; make index)\n\n                    portversion -v -l \\<\n                }\n                alias appsupgrade='pkgdb -F && BATCH=YES NO_CHECKSUM=YES portupgrade -a'\n                ;;\n        esac\n        ;;\nesac\n### }}}\n\n### setopt {{{\nsetopt auto_cd\nsetopt auto_list\nsetopt auto_menu\nsetopt auto_param_keys\nsetopt auto_param_slash\nsetopt auto_pushd\nsetopt autopushd\nsetopt brace_ccl\nsetopt chase_links\nsetopt complete_aliases\nsetopt correct_all\nsetopt extended_glob\nsetopt globdots\nsetopt hist_ignore_all_dups\nsetopt hist_no_store\nsetopt hist_reduce_blanks\nsetopt inc_append_history\nsetopt list_packed\nsetopt list_types\nsetopt magic_equal_subst\nsetopt multios\nsetopt no_clobber\nsetopt noautoremoveslash\nsetopt nolistbeep\nsetopt path_dirs\nsetopt pushd_ignore_dups\nsetopt share_history\n### }}}\n\n### cdr {{{\nautoload -Uz chpwd_recent_dirs cdr add-zsh-hook\nzstyle ':completion:*:*:cdr:*:*' menu selection\nzstyle ':completion:*' recent-dirs-insert both\nzstyle ':chpwd:*' recent-dirs-max 500\nzstyle ':chpwd:*' recent-dirs-default true\nzstyle ':chpwd:*' recent-dirs-pushd true\n### }}}\n\n### color {{{\nzstyle ':completion:*:sudo:*' command-path /usr/local/sbin /usr/local/bin /usr/sbin /usr/bin /sbin /bin\nzstyle ':completion:*' list-colors di=34 fi=0\ncase \"${TERM}\" in\n    xterm)\n        export TERM=xterm-color\n\n        ;;\n    kterm)\n        export TERM=kterm-color\n        stty erase\n        ;;\n\n    cons25)\n        unset LANG\n        export LSCOLORS=ExFxCxdxBxegedabagacad\n\n        export LS_COLORS='di=01;32:ln=01;35:so=01;32:ex=01;31:bd=46;34:cd=43;34:su=41;30:sg=46;30'\n        zstyle ':completion:*' list-colors \\\n            'di=;36;1' 'ln=;35;1' 'so=;32;1' 'ex=31;1' 'bd=46;34' 'cd=43;34'\n        ;;\n\n    kterm*|xterm*)\n        export CLICOLOR=1\n        export LSCOLORS=ExFxCxDxBxegedabagacad\n\n        zstyle ':completion:*' list-colors \\\n            'di=36' 'ln=35' 'so=32' 'ex=31' 'bd=46;34' 'cd=43;34'\n        ;;\n\n    dumb)\n        echo \"Welcome Emacs Shell\"\n        ;;\nesac\n\nautoload colors\ncolors\nLS_COLORS=\"di=34:ln=35:so=32:pi=33:ex=31:bd=46;34:cd=43;34:su=41;30:sg=46;30:tw=42;30:ow=43;30\"\nexport LS_COLORS\n\nif [ -f ~/.dircolors ]; then\n    if type dircolors > /dev/null 2>&1; then\n        eval $(dircolors ~/.dircolors)\n    elif type gdircolors > /dev/null 2>&1; then\n        eval $(gdircolors ~/.dircolors)\n    fi\nfi\n\n### }}}\n\n### autoload, zstyle {{{\n#HELPDIR=/usr/local/share/zsh/helpfiles\n#alias run-help >/dev/null 2>&1 && unalias run-help\nautoload -Uz run-help\nautoload -Uz run-help-git\nautoload -Uz run-help-svn\nautoload -Uz run-help-svk\nautoload -Uz run-help-openssl\nautoload -Uz run-help-p4\nautoload -Uz run-help-sudo\nautoload zed\nautoload predict-on\nautoload history-search-end\nautoload -Uz select-word-style\nselect-word-style default\nautoload -Uz zmv\nautoload -U url-quote-magic\nautoload -U compinit\ncompinit\nzstyle ':zle:*' word-chars \" _-./;@\"\nzstyle ':zle:*' word-style unspecified\nzstyle ':completion:*:default' menu select=1\nzstyle ':completion:history-words:*' list no\nzstyle ':completion:history-words:*' menu yes\nzstyle ':completion:history-words:*' remove-all-dups yes\nbindkey \"\\e/\" _history-complete-older\nbindkey \"\\e,\" _history-complete-newer\n\nzstyle ':filter-select' max-lines $(($LINES / 2))\nzstyle ':completion:*' verbose yes\nzstyle ':completion:*' completer _expand _complete _match _prefix _approximate _list _history\nzstyle ':completion:*:messages' format '%F{YELLOW}%d'$DEFAULT\nzstyle ':completion:*:warnings' format '%F{RED}No matches for:''%F{YELLOW} %d'$DEFAULT\nzstyle ':completion:*:descriptions' format '%F{YELLOW}completing %B%d%b'$DEFAULT\nzstyle ':completion:*:options' description 'yes'\nzstyle ':completion:*' group-name ''\nzstyle ':completion:*' use-cache true\nzstyle ':completion:*' list-separator '-->'\nzstyle ':completion:*:manuals' separate-sections true\nzstyle ':completion:*' list-colors ${(s.:.)LS_COLORS}\nif [ -n \"$LS_COLORS\" ]; then\n    zstyle ':completion:*' list-colors ${(s.:.)LS_COLORS}\nfi\n### }}}\n\n### magick {{{\ntypeset -A abbreviations\nabbreviations=(\n\"L\"    \"| $PAGER\"\n\"G\"    \"| grep\"\n\n\"HEAD^\"     \"HEAD\\\\^\"\n\"HEAD^^\"    \"HEAD\\\\^\\\\^\"\n\"HEAD^^^\"   \"HEAD\\\\^\\\\^\\\\^\"\n\"HEAD^^^^\"  \"HEAD\\\\^\\\\^\\\\^\\\\^\\\\^\"\n\"HEAD^^^^^\" \"HEAD\\\\^\\\\^\\\\^\\\\^\\\\^\"\n)\n\nmagic-abbrev-expand () {\n    local MATCH\n    LBUFFER=${LBUFFER%%(#m)[-_a-zA-Z0-9^]#}\n    LBUFFER+=${abbreviations[$MATCH]:-$MATCH}\n}\n\nmagic-abbrev-expand-and-insert () {\n    magic-abbrev-expand\n    zle self-insert\n}\n\nmagic-abbrev-expand-and-accept () {\n    magic-abbrev-expand\n    zle accept-line\n}\n\nno-magic-abbrev-expand () {\n    LBUFFER+=' '\n}\n\nzle -N magic-abbrev-expand\nzle -N magic-abbrev-expand-and-insert\nzle -N magic-abbrev-expand-and-accept\nzle -N no-magic-abbrev-expand\nbindkey \"\\r\"  magic-abbrev-expand-and-accept\nbindkey \"^J\"  accept-line\nbindkey \" \"   magic-abbrev-expand-and-insert\nbindkey \".\"   magic-abbrev-expand-and-insert\nbindkey \"^x \" no-magic-abbrev-expand\n\nfunction rmf(){\nfor file in $*\ndo\n    __rm_single_file $file\ndone\n}\n\nfunction __rm_single_file(){\nif ! [ -d ~/.Trash/ ]\nthen\n    command /bin/mkdir ~/.Trash\nfi\n\nif ! [ $# -eq 1 ]\nthen\n    echo \"__rm_single_file: 1 argument required but $# passed.\"\n    exit\nfi\n\nif [ -e $1 ]\nthen\n    BASENAME=`basename $1`\n    NAME=$BASENAME\n    COUNT=0\n    while [ -e ~/.Trash/$NAME ]\n    do\n        COUNT=$(($COUNT+1))\n        NAME=\"$BASENAME.$COUNT\"\n    done\n\n    command /bin/mv $1 ~/.Trash/$NAME\nelse\n    echo \"No such file or directory: $file\"\nfi\n}\n\nzle -N self-insert url-quote-magic\nzle -N history-beginning-search-backward-end history-search-end\nzle -N history-beginning-search-forward-end history-search-end\n\n# }}}\n\n### directory {{{\n\nfunction chpwd() { ls -aCFG }\n\nfunction mkcd() {\nif [[ -d $1 ]]; then\n    echo \"It already exsits! Cd to the directory.\"\n    cd $1\nelse\n    echo \"Created the directory and cd to it.\"\n    mkdir -p $1 && cd $1\nfi\n}\n\nfunction cdup_dir() {\nif [[ -z \"$BUFFER\" ]]; then\n    echo\n    cd ..\n    ls -aF\n    zle reset-prompt\nelse\n    zle self-insert 'k'\nfi\n }\n zle -N cdup_dir\n bindkey '^k' cdup_dir\n\n function cddown_dir(){\n com='$SHELL -c \"ls -AF . | grep / \"'\n while [ $? = 0 ]\n do\n     cdir=`eval $com | peco`\n     if [ $? = 0 ];then\n         cd $cdir\n         eval $com\n     else\n         break\n     fi\n done\n zle reset-prompt\n}\nzle -N cddown_dir\nbindkey '^j' cddown_dir\n\n### }}}\n\n### stack {{{\n\nlocal p_buffer_stack=\"\"\nlocal -a buffer_stack_arr\n\nfunction make_p_buffer_stack()\n{\n    if [[ ! $#buffer_stack_arr > 0 ]]; then\n        p_buffer_stack=\"\"\n        return\n    fi\n    p_buffer_stack=\"%F{black} $buffer_stack_arr %f\"\n}\n\n\nshow_buffer_stack() {\n    POSTDISPLAY=\"\n    stack: $LBUFFER\"\n    zle push-line-or-edit\n}\nzle -N show_buffer_stack\nsetopt noflowcontrol\nbindkey '^Q' show_buffer_stack\n### }}}\n\n### golang {{{\n\nif [ -x \"`which go`\" ]; then\n  export GOPATH=$HOME/go\n  export PATH=$PATH:$GOROOT/bin:$GOPATH/bin\nfi\n\n### }}}\n\n### clipboard {{{\n## pbcopy\ncase ${OSTYPE} in\n  linux*)\n    if [ ! -f /usr/bin/xsel ];then\n      sudo pacman -S xsel\n    fi\n    alias pbcopy='xsel --clipboard --input'\n    ;;\n  cygwin*)\n    alias pbcopy='putclip'\n    ;;\nesac\n\n## buffer\npbcopy-buffer(){\n  case ${OSTYPE} in\n    freebsd*|darwin*)\n      print -rn $BUFFER | pbcopy\n      ;;\n    linux*)\n      print -rn $BUFFER | xclip -i -selection clipboard\n      ;;\n    cygwin*)\n      print -rn $BUFFER | putclip\n      ;;\n  esac\n  zle -M \"copy : ${BUFFER}\"\n}\nzle -N pbcopy-buffer\nbindkey '^p^p' pbcopy-buffer\n\n## alias\nif which pbcopy >/dev/null 2>&1 ; then\n  # Mac\n  alias -g C='| pbcopy'\nelif which xclip >/dev/null 2>&1 ; then\n  # Linux\n  alias -g C='| xclip --input --clipboard'\nelif which putclip >/dev/null 2>&1 ; then\n  # Cygwin\n  alias -g C='| putclip'\nfi\n\n## bindkey\n# bindkey -s '^b' \" | pbcopy\"\n\n## clipboard-history\nfunction clipboard-history (){\ncase $OSTYPE in\n  linux*)\n    if [ ! -f /usr/bin/anamnesis ];then\n      sudo yaourt -S anamnesis\n    fi\n    anamnesis -l 100 | sed -n '3,100p' | peco | cut -d u -f 2- | head -c -3 | tail -c +2  | xclip -i -selection clipboard\n    ;;\n  freebsd*|darwin*)\n    plutil -convert xml1 ~/Library/Application\\ Support/ClipMenu/clips.data -o - | parsrx.sh | grep '/plist/dict/array/string ' | sed '1,2d' | sed 's/\\/plist\\/dict\\/array\\/string//g' | peco | pbcopy\n    ;;\nesac\n}\nzle -N clipboard-history\nbindkey '^[c' clipboard-history\n### }}}\n\n### stack {{{\nfunction show_buffer_stack() {\nPOSTDISPLAY=\"\nstack: $LBUFFER\"\nzle push-line-or-edit\n}\nzle -N show_buffer_stack\nsetopt noflowcontrol\nbindkey '^Q' show_buffer_stack\n### }}}\n\n### open {{{\nfunction openapp() {\ncase ${OSTYPE} in\n  freebsd*|darwin*)\n    BUFFER=\"open -a \"\n    ;;\n  linux*)\n    BUFFER=\"xdg-open \"\n    #BUFFER=\"gnome-open \"\n    ;;\n  cygwin*)\n    BUFFER=\"cygstart \"\n    ;;\nesac\nCURSOR=$#BUFFER\n}\nzle -N openapp\nbindkey '^o' openapp\n# bindkey -s '^o' \"open -a \"\n### }}}\n\n### history {{{\ncase $OSTYPE in\n    linux*)\n        function peco-select-history() {\n        local tac\n        if which tac > /dev/null; then\n            tac=\"tac\"\n        else\n            tac=\"tail -r\"\n        fi\n        BUFFER=$(\\history -rn 1 | \\\n            eval $tac | \\\n            peco --query \"$LBUFFER\")\n        CURSOR=$#BUFFER\n        zle clear-screen\n    }\n    ;;\ndarwin*)\n    function peco-select-history() {\n    BUFFER=`history -rn 1 | peco`\n    CURSOR=$#BUFFER\n    zle clear-screen\n}\n;;\nesac\nzle -N peco-select-history\nbindkey '^h^j' peco-select-history\n### }}}\n\n### markdown {{{\nfunction markdown_preview(){\nif [ $# -ne 1 ]\nthen\n    echo \"error: invalid arguments\"\n    echo \"usage: $0 markdown_file\"\n    return 1\nfi\n\nif [ ! -f \"$1\" ]\nthen\n    echo \"error: $1 dose not exists\"\n    return 2\nfi\n\n(echo '<html><head><meta charset=\"UTF-8\" /></head><body>';\nmarkdown $1; echo '</body></html>')\\\n    | w3m -T text/html -dump\n\nif [ $STY ]\nthen\n    sleep 0.2\n    screen -X redisplay\nfi\n}\n### }}}\n\n### virtualbox {{{\nfunction vm (){\n#zsh -c \"ls -A ~/VirtualBox\\ VMs/\" | peco\nvbi=`zsh -c \"ls -A ~/VirtualBox\\ VMs/ | tr ' ' '\\n'\"`\ncase $1 in\n    [aA]rch*|[mM]ac*)\n        echo $vbi | grep $1\n        VBoxManage startvm `echo $vbi | grep $1`\n        ;;\n    \"\")\n        echo $vbi | grep win\n        echo win\n        VBoxManage startvm `echo $vbi | grep win`\n        ;;\n    -a)\n        echo $vbi | tr '\\n' ' '\n        VBoxManage startvm `echo $vbi | tr '\\n' ' '`\n    ;;\n    *)\n        VBoxManage startvm `echo \"$vbi\" | peco`\n        ;;\nesac\n}\n\nfunction vm-window (){\nosascript << EOF\n\n--tell application \"System Events\"\n--  tell process \"VirtualBoxVM\"\n--    every UI element\n--  end tell\n--end tell\n\ntell app \"VirtualBoxVM\"\nactivate\nend tell\nEOF\n}\n\n### }}}\n\n### tmux {{{\n\n## auto-start\ncase $OSTYPE in\n    darwin*)\n        if [ -z \"$SSH_CONNECTION\" -a ${UID} -ne 0 -a -z \"$TMUX\" -a -z \"$STY\" ]; then\n            if type tmux >/dev/null 2>&1; then\n                tmux\n            elif type tmux >/dev/null 2>&1; then\n                if tmux has-session && tmux list-sessions | egrep -q '.*]$'; then\n                    tmux attach && echo \"tmux attached session \"\n                else\n                    tmux new-session && echo \"tmux created new session\"\n                fi\n            elif type screen >/dev/null 2>&1; then\n                screen -rx || screen -D -RR\n            fi\n        fi\n        ;;\n    linux*)\n        if [ -z \"$TMUX\" -a -z \"$STY\" ]; then\n            if type tmux >/dev/null 2>&1; then\n                if tmux has-session && tmux list-sessions | /usr/bin/grep -qE '.*]$'; then\n                    tmux -2 attach && echo \"tmux attached session \"\n                else\n                    tmux -2 new-session && echo \"tmux created new session\"\n                fi\n            fi\n        fi\n        ;;\nesac\n\n##copy-mode\nfunction tmux-copy-line () {\ntmux copy-mode\\; send-keys 2k0Vj Enter\n}\nzle -N tmux-copy-line\nbindkey '^[n' tmux-copy-line\n\nfunction tmux-copy-all () {\ntmux copy-mode\\; send-keys ggVG Enter\n#tmux copy-mode\\; send-keys Space\\; send-keys '$'\\; send-keys Enter\n}\nzle -N tmux-copy-all\nbindkey '^[m' tmux-copy-all\n### }}}\n\n### alias {{{\nalias lf=\"ls -F\"\nalias ll=\"ls -l\"\nalias 'ps?'='pgrep -l -f'\nalias pk='pkill -f'\nalias du=\"du -h\"\nalias duh=\"du -h ./ --max-depth=1\"\nalias su=\"su -l\"\nalias 'src'='exec zsh'\nalias -g V=\"| vim -\"\nalias -g EV=\"| xargs --verbose sh -c 'vim \\\"\\$@\\\" < /dev/tty'\"\nalias -g RET=\"RAILS_ENV=test\"\nalias -g RED=\"RAILS_ENV=development\"\nalias -g REP=\"RAILS_ENV=production\"\nalias raket='RAILS_ENV=test rake'\nalias raked='RAILS_ENV=development rake'\nalias rakep='RAILS_ENV=production rake'\nalias ccat='pygmentize -O style=vim -f console256 -g'\nalias less='less -r'\nalias df='df -h'\nalias free='free -m'\nalias 'gr'='grep --color=auto -ERUIn'\nalias 'm'='make'\nalias 'mn'='make native-code'\nalias 'mc'='make clean'\nalias sc='screen -S main'\nalias sn='screen'\nalias sl='screen -ls'\nalias sr='screen -r main'\nalias srr='screen -U -D -RR'\nalias tma='tmux attach'\nalias tma0='tmux attach -t 0'\nalias tma1='tmux attach -t 1'\nalias tma2='tmux attach -t 2'\nalias tml='tmux list-sessions'\nalias pon='predict-on'\nalias poff='predict-off'\nalias cp='nocorrect cp -irp'\nalias refe='nocorrect refe'\nalias g='git'\nalias gi='git'\nalias oppai='git'\nalias gs='git status -s -b'\nalias gst='git status -s -b'\nalias gc='git commit'\nalias gci='git commit -a'\nalias java='nocorrect java'\nalias erl='nocorrect erl'\nalias sbcl='nocorrect sbcl'\nalias gosh='nocorrect gosh'\nalias node='nocorrect node'\nalias scala='scala -deprecation -unchecked -explaintypes'\nalias scc='scalac -deprecation -unchecked -explaintypes'\nalias sci='scala -deprecation -unchecked -explaintypes -cp $SCALA_CLASSPATH -i ~/import.scala'\nalias sce='scala'\nalias ex='extract'\nalias be='bundle exec'\nalias grv='grepvim'\nalias dircolors=\"gdircolors\"\nalias zmv='noglob zmv -W'\nalias ls=\"ls -a\"\nalias msf='cd /opt/msf/ && ./msfconsole'\nalias p=\"qlmanage -p \"$@\" >& /dev/null\"\nalias gotr=\"altr\"\nalias trash=\"sudo rm -rf ~/.Trash/\"\nalias qm='qlmanage -p \"$@\" >& /dev/null'\nalias st='/Applications/Sublime\\ Text\\ 2.app/Contents/SharedSupport/bin/subl'\nalias qrank=\"w3m http://qrank.wbsrv.net/\"\nalias color-terminal='for c in {000..255}; do echo -n \"\\e[38;5;${c}m $c\" ; [ $(($c%16)) -eq 15 ] && echo;done;echo'\nalias ds.store=\"sudo find ./ -name '.DS_Store' -delete\"\nalias rgen=\"rake generate && rake preview\"\nalias where=\"command -v\"\nalias remem='du -sx / &> /dev/null & sleep 5 && kill $!'\nalias mf='sudo purge'\nalias vs='vim ~/.vimrc'\nalias zs='vim ~/.zshrc'\nalias ts='vim ~/.tmux.conf'\nalias zr='source ~/.zshrc && exec $SHELL'\nalias zd='vim ~/dotfiles/.zshrc'\nalias vim-trans='vim -c \"ExciteTranslate\"'\nalias gistvim='vim * -c \"bufdo %s/foo/bar/g | Gist\"'\nalias f='vim +VimFiler'\nalias w3mjman='W3MMAN_MAN=jman w3mman'\nalias w3h='rm ~/.w3m/history && w3m -N'\nalias gd='dirs -v; echo -n \"select number: \"; read newdir; cd +\"$newdir\"'\n\ncase $OSTYPE in\n    darwin*)\n        #/Applications/VLC.app/Contents/MacOS/VLC -I rc\n        # interface:ncurses, speed:2\n        alias sy='open -a \"system preferences\"'\n        alias vlc0='/Applications/VLC.app/Contents/MacOS/VLC --rate=2 && sleep 3;reset'\n        alias vlc1='killall -KILL VLC'\n        alias ctags=\"`brew --prefix`/usr/local/bin/ctags\"\n        alias up=\"brew update && brew upgrade\"\n        alias ll='gls -slhAF --color'\n        alias gls='gls -lAFh --color=auto'\n        eval `dircolors ~/dotfiles/dircolors-solarized/dircolors.ansi-dark`\n        ;;\n    linux*)\n        alias up=\"sudo pacman -Syu && sudo yaourt -Syu\"\n        alias vim=\"/usr/bin/vim\"\n        ;;\nesac\n\n        if which pyenv > /dev/null; then eval \"$(pyenv init -)\"; fi\n\n### }}}\n\n### download {{{\n\nexport DOTFILE=$HOME/dotfiles\nexport PLUGIN=$DOTFILE/.zsh/plugin\n\n## completion\nif [ ! -d $PLUGIN/zsh-completions ];then\n    git clone git://github.com/zsh-users/zsh-completions $PLUGIN/zsh-completions\nfi\nfpath=($PLUGIN/zsh-completions/src $fpath)\n\n## powerline {{{\nif [ ! -f $PLUGIN/powerline.zsh ];then\n    curl https://gist.githubusercontent.com/syui/e3fad84e3dba8a3f667b/raw/powerline.zsh -o $PLUGIN/powerline.zsh\nfi\n\nif [ ! -d $PLUGIN/powerline-bash ];then\n    git clone https://github.com/milkbikis/powerline-bash $PLUGIN/powerline-bash\nfi\n\n#ln -s $PLUGIN/powerline-bash/powerline-bash.py ~/powerline-bash.py\n#\n#function powerline_precmd() {\n#export PS1=\"$(~/powerline-bash.py $? --shell zsh)\"\n#        }\n#\n#        function install_powerline_precmd() {\n#        for s in \"${precmd_functions[@]}\"; do\n#            if [ \"$s\" = \"powerline_precmd\" ]; then\n#                return\n#            fi\n#        done\n#        precmd_functions+=(powerline_precmd)\n#    }\n#\n#    install_powerline_precmd\n## }}}\n\n## tmux-powerline\n# iTerm : Treat ambiguous-width characters as double width\ncase $OSTYPE in\n    darwin*)\n        if ! type tmux > /dev/null 2>&1;then\n            brew tap waltarix/homebrew-customs\n            brew update\n            brew install waltarix/customs/tmux\n        fi\n    ;;\nesac\n\nif type tmux > /dev/null 2>&1;then\n    if [ ! -d $DOTFILE/.tmux/tmux-powerline ];then\n        git clone https://github.com/erikw/tmux-powerline $DOTFILE/.tmux/tmux-powerline\n    fi\n    if [ ! -d $DOTFILE/.tmux/tmux-colors-solarized ];then\n        git clone https://github.com/seebi/tmux-colors-solarized $DOTFILE/.tmux/tmux-colors-solarized\n    fi\nfi\n\nif [ ! -f $DOTFILE/.tmux/tmux-powerline/segments/used-mem ];then\n    curl https://raw.githubusercontent.com/yonchu/used-mem/master/used-mem -o $DOTFILE/.tmux/tmux-powerline/segments/used-mem\n    chmod +x $DOTFILE/.tmux/tmux-powerline/segments/used-mem\nfi\n\nif [ ! -f $DOTFILE/.tmux/tmux-powerline/segments/mplayer_tmux.sh ];then\n    curl https://raw.githubusercontent.com/syui/mplayer_script/master/mplayer_tmux.sh -o $DOTFILE/.tmux/tmux-powerline/segments/mplayer_tmux.sh\n    chmod +x $DOTFILE/.tmux/tmux-powerline/segments/mplayer_tmux.sh\nfi\n\nif [ ! -f $DOTFILE/.tmux/.tmux.conf.mac ];then\n    curl https://gist.githubusercontent.com/syui/5c49d1296c992d8af737/raw/.tmux.conf.mac -o $DOTFILE/.tmux/.tmux.conf.mac\nfi\n\n## vim\nif [ ! -d ~/.vim/bundle/neobundle.vim ];then\n    curl https://raw.githubusercontent.com/Shougo/neobundle.vim/master/bin/install.sh | sh\nfi\n\n## oh-my-zsh\nif [ ! -d $PLUGIN/oh-my-zsh ];then\n    git clone https://github.com/robbyrussell/oh-my-zsh $PLUGIN/oh-my-zsh\nfi\n\n## cheat-sheet\nif [ -f $PLUGIN/oh-my-zsh/templates/zshrc.zsh-template ];then\n    cheat-sheet () { zle -M \"`cat ~/dotfiles/.zsh/cheat-sheet`\" }\n    zle -N cheat-sheet\n    # bindkey \"^[^h\" cheat-sheet\nfi\n\n## golang\nif [ ! -f ~/dotfiles/.zsh/plugin/golang-crosscompile/crosscompile.bash ];then\n  git clone https://github.com/davecheney/golang-crosscompile ~/dotfiles/.zsh/plugin/golang-crosscompile\nfi\n\n## growl\nif [ ! -f ~/dotfiles/.zsh/plugin/growl.zsh ];then\n       curl https://raw.githubusercontent.com/patbenatar/dotfiles/master/zsh/growl.zsh -o $HOME/dotfiles/.zsh/plugin/growl.zsh\n  chmod +x ~/dotfiles/.zsh/plugin/growl.zsh\nfi\n\n## rupa/z\ncase $OSTYPE in\n  drawin*)\n    if [ -f `brew --prefix`/etc/profile.d/z.sh ];then\n      brew install z\n    fi\n    . `brew --prefix`/etc/profile.d/z.sh\n    ;;\n  linux*)\n    if [ ! -d ~/dotfiles/.zsh/plugin/z ];then\n      git clone https://github.com/rupa/z ~/dotfiles/.zsh/plugin/z\n    fi\n    . ~/dotfiles/.zsh/plugin/z/z.sh\n    ;;\nesac\n\n## _z  {{{\nif ! type _z > /dev/null 2>&1;then\n_z () {\n  local datafile=\"${_Z_DATA:-$HOME/.z}\"\n  [ -z \"$_Z_OWNER\" -a -f \"$datafile\" -a ! -O \"$datafile\" ] && return\n  if [ \"$1\" = \"--add\" ]\n  then\n    shift\n    [ \"$*\" = \"$HOME\" ] && return\n    local exclude\n    for exclude in \"${_Z_EXCLUDE_DIRS[@]}\"\n    do\n      [ \"$*\" = \"$exclude\" ] && return\n    done\n    local tempfile=\"$datafile.$RANDOM\"\n    while read line\n    do\n      [ -d \"${line%%\\|*}\" ] && echo $line\n    done < \"$datafile\" | awk -v path=\"$*\" -v now=\"$(date +%s)\" -F\"|\" '\n            BEGIN {\n                rank[path] = 1\n                time[path] = now\n            }\n            $2 >= 1 {\n                # drop ranks below 1\n                if( $1 == path ) {\n                    rank[$1] = $2 + 1\n                    time[$1] = now\n                } else {\n                    rank[$1] = $2\n                    time[$1] = $3\n                }\n                count += $2\n            }\n            END {\n                if( count > 9000 ) {\n                    # aging\n                    for( x in rank ) print x \"|\" 0.99*rank[x] \"|\" time[x]\n                } else for( x in rank ) print x \"|\" rank[x] \"|\" time[x]\n            }\n        ' 2> /dev/null >| \"$tempfile\"\n    if [ $? -ne 0 -a -f \"$datafile\" ]\n    then\n      env rm -f \"$tempfile\"\n    else\n      [ \"$_Z_OWNER\" ] && chown $_Z_OWNER:$(id -ng $_Z_OWNER) \"$tempfile\"\n      env mv -f \"$tempfile\" \"$datafile\" || env rm -f \"$tempfile\"\n    fi\n  elif [ \"$1\" = \"--complete\" -a -s \"$datafile\" ]\n  then\n    while read line\n    do\n      [ -d \"${line%%\\|*}\" ] && echo $line\n    done < \"$datafile\" | awk -v q=\"$2\" -F\"|\" '\n            BEGIN {\n                if( q == tolower(q) ) imatch = 1\n                q = substr(q, 3)\n                gsub(\" \", \".*\", q)\n            }\n            {\n                if( imatch ) {\n                    if( tolower($1) ~ tolower(q) ) print $1\n                } else if( $1 ~ q ) print $1\n            }\n        ' 2> /dev/null\n  else\n    while [ \"$1\" ]\n    do\n      case \"$1\" in\n        (--) while [ \"$1\" ]\n          do\n            shift\n            local fnd=\"$fnd${fnd:+ }$1\"\n          done ;;\n        (-*) local opt=${1:1}\n          while [ \"$opt\" ]\n          do\n            case ${opt:0:1} in\n              (c) local fnd=\"^$PWD $fnd\" ;;\n              (h) echo \"${_Z_CMD:-z} [-chlrtx] args\" >&2\n                return ;;\n              (x) sed -i -e \"\\:^${PWD}|.*:d\" \"$datafile\" ;;\n              (l) local list=1 ;;\n              (r) local typ=\"rank\" ;;\n              (t) local typ=\"recent\" ;;\n            esac\n            opt=${opt:1}\n          done ;;\n        (*) local fnd=\"$fnd${fnd:+ }$1\" ;;\n      esac\n      local last=$1\n      shift\n    done\n    [ \"$fnd\" -a \"$fnd\" != \"^$PWD \" ] || local list=1\n    case \"$last\" in\n      (/*) [ -z \"$list\" -a -d \"$last\" ] && cd \"$last\" && return ;;\n    esac\n    [ -f \"$datafile\" ] || return\n    local cd\n    cd=\"$(while read line; do\n            [ -d \"${line%%\\|*}\" ] && echo $line\n        done < \"$datafile\" | awk -v t=\"$(date +%s)\" -v list=\"$list\" -v typ=\"$typ\" -v q=\"$fnd\" -F\"|\" '\n            function frecent(rank, time) {\n                # relate frequency and time\n                dx = t - time\n                if( dx < 3600 ) return rank * 4\n                if( dx < 86400 ) return rank * 2\n                if( dx < 604800 ) return rank / 2\n                return rank / 4\n            }\n            function output(files, out, common) {\n                # list or return the desired directory\n                if( list ) {\n                    cmd = \"sort -n >&2\"\n                    for( x in files ) {\n                        if( files[x] ) printf \"%-10s %s\\n\", files[x], x | cmd\n                    }\n                    if( common ) {\n                        printf \"%-10s %s\\n\", \"common:\", common > \"/dev/stderr\"\n                    }\n                } else {\n                    if( common ) out = common\n                    print out\n                }\n            }\n            function common(matches) {\n                # find the common root of a list of matches, if it exists\n                for( x in matches ) {\n                    if( matches[x] && (!short || length(x) < length(short)) ) {\n                        short = x\n                    }\n                }\n                if( short == \"/\" ) return\n                # use a copy to escape special characters, as we want to return\n                # the original. yeah, this escaping is awful.\n                clean_short = short\n                gsub(/[\\(\\)\\[\\]\\|]/, \"\\\\\\\\&\", clean_short)\n                for( x in matches ) if( matches[x] && x !~ clean_short ) return\n                return short\n            }\n            BEGIN {\n                gsub(\" \", \".*\", q)\n                hi_rank = ihi_rank = -9999999999\n            }\n            {\n                if( typ == \"rank\" ) {\n                    rank = $2\n                } else if( typ == \"recent\" ) {\n                    rank = $3 - t\n                } else rank = frecent($2, $3)\n                if( $1 ~ q ) {\n                    matches[$1] = rank\n                } else if( tolower($1) ~ tolower(q) ) imatches[$1] = rank\n                if( matches[$1] && matches[$1] > hi_rank ) {\n                    best_match = $1\n                    hi_rank = matches[$1]\n                } else if( imatches[$1] && imatches[$1] > ihi_rank ) {\n                    ibest_match = $1\n                    ihi_rank = imatches[$1]\n                }\n            }\n            END {\n                # prefer case sensitive\n                if( best_match ) {\n                    output(matches, best_match, common(matches))\n                } else if( ibest_match ) {\n                    output(imatches, ibest_match, common(imatches))\n                }\n            }\n        ')\"\n    [ $? -gt 0 ] && return\n    [ \"$cd\" ] && cd \"$cd\"\n  fi\n}\nfi\n### }}}\n\ncompctl -U -K _z_zsh_tab_completion ${_Z_CMD:-z}\n\n\n## zaw/zaw\nif [ ! -d ~/dotfiles/.zsh/plugin/zaw ];then\n  git clone https://github.com/zsh-users/zaw ~/dotfiles/.zsh/plugin/zaw\nfi\nif [ ! -f ~/dotfiles/.zsh/plugin/zaw/sources/zaw-z.zsh ];then\n  curl https://raw.githubusercontent.com/lovingly/dotfiles/master/zsh.d/zaw/zaw-z.zsh -o $HOME/dotfiles/.zsh/plugin/zaw/sources/zaw-z.zsh\n  chmod +x $HOME/dotfiles/.zsh/plugin/zaw/sources/zaw-z.zsh\nfi\n\n## syui/airchrome.zsh\nif [ ! -f $PLUGIN/airchrome.zsh/airchrome.zsh ];then\n    git clone https://github.com/syui/airchrome.zsh $PLUGIN/airchrome.zsh\nfi\n\n## syntax-highlight\nif [ ! -f $HOME/dotfiles/.zsh/plugin/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh ];then\n  git clone https://github.com/zsh-users/zsh-syntax-highlighting $HOME/dotfiles/.zsh/plugin/zsh-syntax-highlighting\nfi\n### }}}\n\n### source {{{\n\n#source $PLUGIN/oh-my-zsh\n\nsource ~/dotfiles/.zsh/plugin/golang-crosscompile/crosscompile.bash\nsource ~/dotfiles/.zsh/plugin/zaw/zaw.zsh\nsource $HOME/dotfiles/.zsh/plugin/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh\n\n[ -f ~/.zshrc.local ] && source ~/.zshrc.local\n\n[ -s ${HOME}/.rvm/scripts/rvm ] && source ${HOME}/.rvm/scripts/rvm\n\ncase $OSTYPE in\n    darwin*)\n        source $PLUGIN/airchrome.zsh/airchrome.zsh\n        source $PLUGIN/growl.zsh\n    ;;\nesac\n\nunsetopt sh_word_split\n\n### }}}\n\n### bindkey {{{\n\nbindkey -M viins 'jj' vi-cmd-mode\nbindkey \"^I\" menu-complete\nbindkey '^h^h' run-help\nbindkey -s '^o^o' 'vim `zsh -c \"ls -A\" | peco`'\nbindkey -s '^o' \"open -a \"\nbindkey \"^[u\" undo\nbindkey \"^[r\" redo\nbindkey '^]'   vi-find-next-char\nbindkey '^[^]' vi-find-prev-char\nbindkey \"^?\" backward-delete-char\nbindkey -a 'q' push-line\nbindkey \"^p\" history-beginning-search-backward-end\nbindkey \"^n\" history-beginning-search-forward-end\nbindkey \"\\\\ep\" history-beginning-search-backward-end\nbindkey \"\\\\en\" history-beginning-search-forward-end\n\nbindkey '^[[7~' beginning-of-line\nbindkey '^[[8~' end-of-line\nbindkey '^[[2~' overwrite-mode\nbindkey '^[[3~' delete-char\nbindkey '^[[A'  up-line-or-history\nbindkey '^[[B'  down-line-or-history\nbindkey '^[[C'  forward-char\nbindkey '^[[D'  backward-char\nbindkey '^[[5~' history-beginning-search-backward\nbindkey '^[[6~' history-beginning-search-forward\n\n## zaw {{{\nbindkey '^x' zaw\nbindkey '^h' zaw-history\nbindkey '^@' zaw-gitdir\nbindkey '^r' zaw-open-file\nbindkey '^j^j' zaw-cdr\nbindkey '^j^k' zaw-z\n### }}}\n\n### }}}\n\n### function {{{\nex() {\n  if [ -f $1 ] ; then\n    case $1 in\n      *.tar.bz2)   tar xjf $1   ;;\n      *.tar.gz)    tar xzf $1   ;;\n      *.bz2)       bunzip2 $1   ;;\n      *.rar)       unrar x $1     ;;\n      *.gz)        gunzip $1    ;;\n      *.tar)       tar xf $1    ;;\n      *.tbz2)      tar xjf $1   ;;\n      *.tgz)       tar xzf $1   ;;\n      *.zip)       unzip $1     ;;\n      *.Z)         uncompress $1;;\n      *.7z)        7z x $1      ;;\n      *)           echo \"'$1' cannot be extracted via ex()\" ;;\n    esac\n  else\n    echo \"'$1' is not a valid file\"\n  fi\n}\n\ngrepvim() {\n    XFS=`grep -ERUInl $* | uniq | xargs`\n    if [ \"$XFS\" ] ; then\n        vim `grep -ERUInl $* | uniq | xargs`\n    fi\n}\n\nfunction gte() {\ngoogle_translate \"$*\" \"en-ja\"\n}\n\nfunction gtj() {\ngoogle_translate \"$*\" \"ja-en\"\n}\n\nfunction google_translate() {\nlocal str opt cond\n\nif [ $# != 0 ]; then\n    str=`echo $1 | sed -e 's/  */+/g'` # 1\u6587\u5b57\u4ee5\u4e0a\u306e\u534a\u89d2\u7a7a\u767d\u3092+\u306b\u5909\u63db\n    cond=$2\n    if [ $cond = \"ja-en\" ]; then\n        # ja -> en \u7ffb\u8a33\n        opt='?hl=ja&sl=ja&tl=en&ie=UTF-8&oe=UTF-8'\n    else\n        # en -> ja \u7ffb\u8a33\n        opt='?hl=ja&sl=en&tl=ja&ie=UTF-8&oe=UTF-8'\n    fi\nelse\n    opt='?hl=ja&sl=en&tl=ja&ie=UTF-8&oe=UTF-8'\nfi\n\nopt=\"${opt}&text=${str}\"\nw3m +13 \"http://translate.google.com/${opt}\"\n}\nfunction make() {\nLANG=C command make \"$@\" 2>&1 | sed -e \"s@[Ee]rror:.*@$e_RED&$e_normal@g\" -e \"s@cannot\u00a5sfind.*@$e_RED&$e_normal@g\" -e \"s@[Ww]arning:.*@$e_BLUE&$e_normal@g\"\n}\nfunction cwaf() {\nLANG=C command ./waf \"$@\" 2>&1 | sed -e \"s@[Ee]rror:.*@$e_RED&$e_normal@g\" -e \"s@cannot\u00a5sfind.*@$e_RED&$e_normal@g\" -e \"s@[Ww]arning:.*@$e_BLUE&$e_normal@g\"\n}\n\nexpand-to-home-or-insert () {\n    if [ \"$LBUFFER\" = \"\" -o \"$LBUFFER[-1]\" = \" \" ]; then\n        LBUFFER+=\"~/\"\n    else\n        zle self-insert\n    fi\n}\n\nfunction separate(){\necho -n $fg_bold[yellow]\nfor i in $(seq 1 $COLUMNS); do\n    echo -n '~'\ndone\necho -n $reset_color\n}\n\nfunction vol(){\nosascript -e \"set Volume ${1}\"\n}\nfunction manowar () {\nmpc volume 100\namixer set PCM 100%\n}\nfunction torrent-search(){w3m \"http://torrentz.eu/search?f=$1\"}\nfunction vmu(){VBoxManage storageattach $1 --storagectl ${1}sata1 --port 2 --type dvddrive --medium emptydrive}\nfunction exdel(){exiftool -overwrite_original -all= $1}\n\nfunction zman() {\nPAGER=\"less -g -s '+/^       \"$1\"'\" man zshall\n}\n\nfunction ccleaner(){\nwhich ccleaner.scpt | xargs osascript &\nopen -a iterm2-f\n}\n\nfunction gif_make(){\ngm convert *.png hoge.gif\nrm *.png\n}\n\nfunction markpre(){\nwatchmedo shell-command -c \"qlmanage -p $1\" $HOME/blog/\n}\n\nfunction wifi(){\nif networksetup -getairportnetwork en0 | grep off; then\n    echo on\n    networksetup -setairportpower en0 on\nelse\n    echo off\n    networksetup -setairportpower en0 off\nfi\n}\n\nfunction aunpack-all(){for i in `ls *.$1`;do aunpack $i;done}\n\nfunction twitter () {\nosascript -e 'tell application \"Twitter\" to close window 1'\n}\n\nfunction unrar-all (){\nfor i in *.part1.rar\ndo\n    unrar e -o+ $i\ndone\n}\n\n### git init {{{\n#touch README.md\n#git init\n#git add README.md\n#git commit -m \"first commit\"\n#git remote add origin https://github.com/syui/syui.github.io.git\n#git push -u origin master\n### }}}\n\nfunction gitinit(){\necho -n username:\nuser=`echo $USER`\nrepo=`echo $PWD:t`\nrepo_j={\\\"name\\\":\\\"$repo\\\"}\nurl=\"https://github.com/\"$user/$repo.git\ncurl -u $user https://api.github.com/user/repos -d $repo_j\ncase $? in\n    0)\n        rm -rf .git\n        rm -rf .DS_Store\n        git init\n        echo $url\n        git remote add origin $url\n        git add .\n        git commit --allow-empty -m \"noun\"\n        git push -u origin master\n        ;;\nesac\n}\n\nglobalias() {\n    if [[ $LBUFFER =~ ' [A-Z0-9]+$' ]]; then\n        zle _expand_alias\n        zle expand-word\n    fi\n    zle self-insert\n}\nzle -N globalias\nbindkey \" \" globalias\nbindkey \"^ \" magic-space           # control-space to bypass completion\nbindkey -M isearch \" \" magic-space # normal space during searches\n\n\n#function help-peco (){\n#  s=`run-help | tail -n +2 | tr ' ' '\\n' | sed '/^$/d' | peco`\n#  man $s\n#}\n#zle -N help-peco\n\nfunction au(){\ncase $1 in\n    -o|*)\n        SwitchAudioSource -a | grep output | cut -d '(' -f 1 | sed -e 's/ *$//' -e 's/$/\"/g' -e 's/^/\"/g' | peco | xargs -J % SwitchAudioSource -s %\n        ;;\n    -i)\n        SwitchAudioSource -a | grep input | cut -d '(' -f 1 | sed -e 's/ *$//' -e 's/$/\"/g' -e 's/^/\"/g' | peco | xargs -J % SwitchAudioSource -t input -s %\n        ;;\nesac\n#zle reset-prompt\n}\nzle -N au\nbindkey '\\^^' au\n\n### }}}\n\n### google {{{\n\nfunction google-search() {\nlocal str opt\nif [ $ != 0 ]; then\n    for i in $*; do\n        str=\"$str+$i\"\n    done\n    str=`echo $str | sed 's/^\\+//'`\n    opt='search?num=50&hl=ja&lr=lang_ja'\n    opt=\"${opt}&q=${str}\"\nfi\nw3m http://www.google.co.jp/$opt\n}\n\nfunction goy() {\nlocal str opt\nif [ $ != 0 ]; then\n    for i in $*; do\n        str=\"$str+$i\"\n    done\n    str=`echo $str | sed 's/^\\+//'`\n    opt='search?num=50&hl=ja&lr=lang_ja'\n    opt=\"${opt}&q=${str}\"\n    tbs='&tbs=qdr:y'\nfi\nw3m http://www.google.co.jp/$opt$tbs\n}\n\nfunction gom() {\nlocal str opt\nif [ $ != 0 ]; then\n    for i in $*; do\n        str=\"$str+$i\"\n    done\n    str=`echo $str | sed 's/^\\+//'`\n    opt='search?num=50&hl=ja&lr=lang_ja'\n    opt=\"${opt}&q=${str}\"\n    tbs='&tbs=qdr:m'\nfi\nw3m http://www.google.co.jp/$opt$tbs\n}\n\n# w3m\u3067ALC\u691c\u7d22\nfunction alc() {\nif [ $ != 0 ]; then\n    w3m \"http://eow.alc.co.jp/$*/UTF-8/?ref=sa\"\nelse\n    w3m \"http://www.alc.co.jp/\"\nfi\n}\n\n\n\n#>>>\nfunction youtube-post(){\nmkdir -p ~/Movies/youtube\ngoogle youtube post ~/Movies/youtube/*.mp4 --category People --tags \"blog\"\ngoogle youtube list --delimiter ','\n}\n\nfunctions mod(){\nmkdir ~/Music/speed\ncd ~/Music/speed && touch mylist.test && rm mylist* && mylist && mplayer -playlist mylist -speed 2 -af scaletempo,volnorm\n}\n\n# w3m\u3067youtube\u691c\u7d22\nfunction youtube-search() {\nif [ $ != 0 ]; then\n    w3m \"http://www.youtube.com/results?search_query=$*&search_type=&aq=f\"\nelse\n    w3m \"http://youtube.com/\"\nfi\n}\n\n# google books\u306e\u691c\u7d22\nfunction book-search() {\nlocal str opt\nif [ $ != 0 ]; then\n    for i in $*; do\n        str=\"$str+$i\"\n    done\n    str=`echo $str | sed 's/^\\+//'`\n    opt='search?lr=lang_ja&hl=JA&tbo=p&tbm=bks&tbs=,bkv:p&num=10'\n    opt=\"${opt}&q=${str}\"\nfi\nw3m http://www.google.co.jp/$opt\n}\n\nfunction exmap (){\nstr=`exiftool -c \"%.6f\" -GPSPosition ${1} | sed -e 's/GPS Position//' -e 's/://' -e 's/E//'  -e 's/S//' -e 's/W//' -e 's/N//' -e 's/ //g'`\nopen -a Google\\ Chrome \"https://maps.google.co.jp/maps?q=$str\"\n}\n\nfunction chrome() {\nlocal str opt\nif [ $ != 0 ]; then\n    for i in $*; do\n        str=\"$str+$i\"\n    done\n    str=`echo $str | sed 's/^\\+//'`\n    opt='search?num=50&hl=ja&lr=lang_ja'\n    opt=\"${opt}&q=${str}\"\nfi\nopen -a Google\\ Chrome http://www.google.co.jp/$opt\n}\n\nfunction google_translate() {\nlocal str opt arg\n\nstr=`pbpaste` # clipboard\narg=`echo ${@:2} | sed -e 's/  */+/g'` # argument\nen_jp=\"?hl=ja&sl=en&tl=ja&ie=UTF-8&oe=UTF-8\" # url\n\ncase \"$1\" in\n    \"-j\") opt=\"?hl=ja&sl=ja&tl=en&ie=UTF-8&oe=UTF-8&text=${arg}\";; # jp -> en translate\n\"-e\") opt=\"${en_jp}&text=${arg}\";; # en -> jp translate\n        *) opt=\"${en_jp}&text=${str}\";; # en -> jp translate\n    esac\n\n    w3m +20 \"http://translate.google.com/${opt}\"  # goto 20 line\n}\n\n# blogger\nfunction bp(){\n    TITLE=\"$(awk 'NR==1' $1)\"\n    TAG=\"$(awk 'NR==2' $1)\"\n    sed -ie 1,2d $1\n    google blogger post --blog \"MBA-HACK\" --title \"${TITLE}\" --tags \"${TAG}\" $1\n    url=`google blogger list url --title \"${TITLE}\" | cut -d , -f 2`\n    open -a Google\\ Chrome $url\n}\n\n\n\nfunction got(){\nw3m \"http://www.google.co.jp/search?num=50&hl=ja&lr=lang_ja&q=$2&tbs=qdr:${1}\"\n}\n\nfunction img-search () {\ndir=~/Downloads/pic\nmkdir -p $dir\nword=`echo $1 | ruby -r cgi -ne 'puts CGI.escape $_.chomp'`\necho $word\nurl=`curl \"http://ajax.googleapis.com/ajax/services/search/images?q=$word&v=1.0&safe=active&imgsz=xxlarge&rsz=large\" | jq -r '.responseData.results [] .url'`\ncou=`echo $url | wc -l | tr -d ' '`\n\nfor (( i=1;i<$cou;i++ ))\ndo\n    urlo=`echo $url | awk \"NR==$i\"`\n    file=${urlo##*/}\n    curl $urlo -o $dir/$file\ndone\n\nqlmanage -p $dir/*\nfile=`zsh -c \"ls -A $dir\" | peco`\nurl=`echo $url | grep $file`\necho $url | pbcopy && pbpaste\nrm -rf $dir\n\n}\n\n\n\n### }}}\n\n### prompt {{{\n\nsource $PLUGIN/powerline.zsh\n\n## default {{{\n\n#case $OSTYPE in\n#linux*)\n#  TMUX_POWERLINE_SEPARATOR_LEFT_BOLD=\"\u25c0\"\n#  TMUX_POWERLINE_SEPARATOR_LEFT_THIN=\"\u276e\"\n#  TMUX_POWERLINE_SEPARATOR_RIGHT_BOLD=\"\u25b6\"\n#  TMUX_POWERLINE_SEPARATOR_RIGHT_THIN=\"\u276f\"\n#  TMUX_POWERLINE_GIT=\"\u24e6\"\n#;;\n#darwin*)\n#  TMUX_POWERLINE_SEPARATOR_LEFT_BOLD=\"\u2b82\"\n#  TMUX_POWERLINE_SEPARATOR_LEFT_THIN=\"\u2b83\"\n#  TMUX_POWERLINE_SEPARATOR_RIGHT_BOLD=\"\u2b80\"\n#  TMUX_POWERLINE_SEPARATOR_RIGHT_THIN=\"\u2b81\"\n#  TMUX_POWERLINE_GIT=\"\u2b60\"\n#;;\n#esac\n#setopt prompt_subst\n#setopt prompt_percent\n#setopt transient_rprompt\n#\n#color256()\n#{\n#  local red=$1; shift\n#  local green=$2; shift\n#  local blue=$3; shift\n#\n#  echo -n $[$red * 36 + $green * 6 + $blue + 16]\n#}\n#\n#fg256()\n#{\n#  echo -n $'\\e[38;5;'$(color256 \"$@\")\"m\"\n#}\n#\n#bg256()\n#{\n#  echo -n $'\\e[48;5;'$(color256 \"$@\")\"m\"\n#}\n#\n#zstyle ':vcs_info:*' max-exports 3\n#zstyle ':vcs_info:hg:*' get-revision true\n#zstyle ':vcs_info:hg:*' use-simple true\n#\n#autoload -Uz is-at-least\n#zstyle ':vcs_info:git:*' check-for-changes true\n#zstyle ':vcs_info:git:*' stagedstr \"-\"\n#zstyle ':vcs_info:git:*' unstagedstr \"${TMUX_POWERLINE_GIT}\"\n#zstyle ':vcs_info:*' actionformats '[%b|%a]'\n#\n#zstyle ':vcs_info:git:*' formats '%{%k%f%}%F{black}%K{green}${TMUX_POWERLINE_SEPARATOR_RIGHT_BOLD}%F{white}%K{green} %s %f%k%K{blue}%F{green}${TMUX_POWERLINE_SEPARATOR_RIGHT_BOLD}%k%f%%F{white}%K{blue} %b %f%k%K{black}%F{blue}${TMUX_POWERLINE_SEPARATOR_RIGHT_BOLD}%k%f%%F{white}%K{black} %c%u %f%k'\n#\n#autoload -Uz vcs_info\n#\n#prompt_bar_left_self=\"%{%F{white}%K{020}%} %n%{%k%f%}%{%F{white}%K{020}%}@%{%k%f%}%{%F{white}%K{020}%}%m %{%k%f%}%{%B%F{020}%K{020}%}%{%b%f%k%}%K{026}%F{blue}${TMUX_POWERLINE_SEPARATOR_RIGHT_BOLD}%k%f%{%B%F{white}%K{026}%}  [%~]  %{%k%f%b%}%{%k%f%}%K{069}%F{026}${TMUX_POWERLINE_SEPARATOR_RIGHT_BOLD}%k%f%(?.%F{white}%K{069}%}`w | grep user, | cut -d , -f 2` %k%f.%B%K{069}%F{red}%}`w | grep user, | cut -d , -f 2` %b%k%f)%{%K{045}%F{069}${TMUX_POWERLINE_SEPARATOR_RIGHT_BOLD}%k%f%F{white}%K{045}%} %h  %{%k%f%}%K{black}%F{045}${TMUX_POWERLINE_SEPARATOR_RIGHT_BOLD}%k%f\"\n#\n#prompt_bar_left=\"${prompt_bar_left_self} ${prompt_bar_left_status} ${prompt_bar_left_date}\"\n#prompt_left='%{%F{white}%K{black}%}  $SHELL  %{%k%f%}%{%K{white}%F{black}${TMUX_POWERLINE_SEPARATOR_RIGHT_BOLD}%k%f%B%F{black}%K{white}%} %# ${p_buffer_stack} %{%b%k%f%f%}%K{black}%F{white}${TMUX_POWERLINE_SEPARATOR_RIGHT_BOLD}%k%f >  '\n#\n#count_prompt_characters()\n#{\n#  print -n -P -- \"$1\" | sed -e $'s/\\e\\[[0-9;]*m//g' | wc -m | sed -e 's/ //g'\n#}\n#\n#update_prompt()\n#{\n#  local bar_left_length=$(count_prompt_characters \"$prompt_bar_left\")\n#  local bar_rest_length=$[COLUMNS - bar_left_length]\n#  local stash\n#  stash=\"stash \"$(git stash list 2>/dev/null | wc -l | tr -d ' ')\n#  local ahead\n#  ahead=\"push \"$(git rev-list origin/master..master 2>/dev/null \\\n#    | wc -l \\\n#    | tr -d ' ')\n#  stash=\"%K{013}%F{black}${TMUX_POWERLINE_SEPARATOR_RIGHT_BOLD}%k%f%{%k%f%}%{%F{white}%K{013}%} $stash %{%k%f%}%F{013}%K{blue}${TMUX_POWERLINE_SEPARATOR_RIGHT_BOLD}%k%f%{%k%f%}%{%F{white}%K{blue}%} $ahead %{%k%f%}%F{blue}%K{green}${TMUX_POWERLINE_SEPARATOR_RIGHT_BOLD}\"\n#  local stad\n#  # stash \u3092\u6709\u52b9\u306b\u3059\u308b\n#  #stad=$stash\n#  local bar_left=\"$prompt_bar_left\"$stad\n#  local bar_right_without_path=\"${prompt_bar_right:s/%d//}\"\n#  local bar_right_without_path_length=$(count_prompt_characters \"$bar_right_without_path\")\n#  bar_right=${prompt_bar_right:s/%d/%(C,%${max_path_length}<...<%d%<<,)/}\n#  bar_right=\"%${bar_rest_length}<<${separator}${bar_right}%<<\"\n#  prompt_bar_left_2=\"%K{white}%F{black}${TMUX_POWERLINE_SEPARATOR_RIGHT_BOLD}%k%f%{%F{black}%K{white}%} %l %K{black}%F{white}${TMUX_POWERLINE_SEPARATOR_RIGHT_BOLD}%k%f%{%k%f%}%{%F{white}%K{black}%}  $LANG  %{%k%f%}%F{black}${TMUX_POWERLINE_SEPARATOR_RIGHT_BOLD}\"\n#\n#  PROMPT=\"${bar_left}${bar_right}${prompt_bar_left_2}\"$'\\n'\"${prompt_left}\"\n#\n#  case \"$TERM_PROGRAM\" in\n#    Apple_Terminal)\n#      PROMPT=\"${PROMPT}\"\n#      ;;\n#  esac\n#\n#  LANG=C vcs_info >&/dev/null\n#  if [ -n \"$vcs_info_msg_0_\" ]; then\n#    PROMPT=\"${bar_left}${bar_right}${vcs_info_msg_0_}${prompt_bar_left_2}\"$'\\n'\"${prompt_left}\"\n#  fi\n#}\n#\n#precmd_functions=($precmd_functions update_prompt)\n#\n## }}}\n\n### vi-mode {{{\n#EMACS_INSERT=`bindkey -lL main | cut -d ' ' -f 3`\n#if bindkey -lL main | cut -d ' ' -f 3 | grep emacs > /dev/null 2>&1;then\n#    EMACS_INSERT=\"%K{black}%F{011}${TMUX_POWERLINE_SEPARATOR_LEFT_BOLD}%k%f%K{011}%F{034} % $EMACS_INSERT %k%f\"\n#    VIM_INSERT=\"%K{011}%F{075}${TMUX_POWERLINE_SEPARATOR_LEFT_BOLD}%k%f%K{075}%F{026} % INSERT %k%f%K{075}%F{black}${TMUX_POWERLINE_SEPARATOR_LEFT_BOLD}%k%f\"\n#else\n#    EMACS_INSERT=\"%K{black}%F{034}${TMUX_POWERLINE_SEPARATOR_LEFT_BOLD}%k%f%K{034}%F{011} % $EMACS_INSERT %k%f\"\n#    VIM_INSERT=\"%K{034}%F{075}${TMUX_POWERLINE_SEPARATOR_LEFT_BOLD}%k%f%K{075}%F{026} % INSERT %k%f%K{075}%F{black}${TMUX_POWERLINE_SEPARATOR_LEFT_BOLD}%k%f\"\n#fi\n##VIM_INSERT=\"%K{034}%F{075}${TMUX_POWERLINE_SEPARATOR_LEFT_BOLD}%k%f%K{075}%F{026} % INSERT %k%f%K{075}%F{black}${TMUX_POWERLINE_SEPARATOR_LEFT_BOLD}%%k%f\"\n#RPROMPT=\"$EMACS_INSERT$VIM_INSERT\"\n#function zle-keymap-select {\n#EMACS_INSERT=`bindkey -lL main | cut -d ' ' -f 3`\n#if echo $EMACS_INSERT | grep emacs > /dev/null 2>&1;then\n#  EMACS_INSERT=\"%K{black}%F{011}${TMUX_POWERLINE_SEPARATOR_LEFT_BOLD}%k%f%K{011}%F{034} % $EMACS_INSERT %k%f\"\n#  VIM_NORMAL=\"%K{011}%F{125}${TMUX_POWERLINE_SEPARATOR_LEFT_BOLD}%k%f%K{125}%F{015} % NORMAL %k%f%K{125}%F{black}${TMUX_POWERLINE_SEPARATOR_LEFT_BOLD}%k%f\"\n#  VIM_INSERT=\"%K{011}%F{075}${TMUX_POWERLINE_SEPARATOR_LEFT_BOLD}%k%f%K{075}%F{026} % INSERT %k%f%K{075}%F{black}${TMUX_POWERLINE_SEPARATOR_LEFT_BOLD}%k%f\"\n#else\n#  EMACS_INSERT=\"%K{black}%F{034}${TMUX_POWERLINE_SEPARATOR_LEFT_BOLD}%k%f%K{034}%F{011} % $EMACS_INSERT %k%f\"\n#  VIM_NORMAL=\"%K{034}%F{125}${TMUX_POWERLINE_SEPARATOR_LEFT_BOLD}%k%f%K{125}%F{015} % NORMAL %k%f%K{125}%F{black}${TMUX_POWERLINE_SEPARATOR_LEFT_BOLD}%k%f\"\n#  VIM_INSERT=\"%K{034}%F{075}${TMUX_POWERLINE_SEPARATOR_LEFT_BOLD}%k%f%K{075}%F{026} % INSERT %k%f%K{075}%F{black}${TMUX_POWERLINE_SEPARATOR_LEFT_BOLD}%k%f\"\n#fi\n#RPROMPT=\"$EMACS_INSERT${${KEYMAP/vicmd/$VIM_NORMAL}/(main|viins)/$VIM_INSERT}\"\n#zle reset-prompt\n#}\n#zle -N zle-keymap-select\n\n#function airchrome-bindmode-emacs () {\n#bindkey -e\n#EMACS_INSERT=`bindkey -lL main | cut -d ' ' -f 3`\n#if echo $EMACS_INSERT | grep emacs > /dev/null 2>&1;then\n#  EMACS_INSERT=\"%K{black}%F{011}${TMUX_POWERLINE_SEPARATOR_LEFT_BOLD}%k%f%K{011}%F{034} % $EMACS_INSERT %k%f\"\n#  VIM_NORMAL=\"%K{011}%F{125}${TMUX_POWERLINE_SEPARATOR_LEFT_BOLD}%k%f%K{125}%F{015} % NORMAL %k%f%K{125}%F{black}${TMUX_POWERLINE_SEPARATOR_LEFT_BOLD}%k%f\"\n#  VIM_INSERT=\"%K{011}%F{075}${TMUX_POWERLINE_SEPARATOR_LEFT_BOLD}%k%f%K{075}%F{026} % INSERT %k%f%K{075}%F{black}${TMUX_POWERLINE_SEPARATOR_LEFT_BOLD}%k%f\"\n#else\n#  EMACS_INSERT=\"%K{black}%F{011}${TMUX_POWERLINE_SEPARATOR_LEFT_BOLD}%k%f%K{011}%F{034} % $EMACS_INSERT %k%f\"\n#  VIM_NORMAL=\"%K{011}%F{125}${TMUX_POWERLINE_SEPARATOR_LEFT_BOLD}%k%f%K{125}%F{015} % NORMAL %k%f%K{125}%F{black}${TMUX_POWERLINE_SEPARATOR_LEFT_BOLD}%k%f\"\n#  VIM_INSERT=\"%K{011}%F{075}${TMUX_POWERLINE_SEPARATOR_LEFT_BOLD}%k%f%K{075}%F{026} % INSERT %k%f%K{075}%F{black}${TMUX_POWERLINE_SEPARATOR_LEFT_BOLD}%k%f\"\n#fi\n#RPS1=\"$EMACS_INSERT${${KEYMAP/vicmd/$VIM_NORMAL}/(main|viins)/$VIM_INSERT}\"\n#RPS2=$RPS1\n#zle reset-prompt\n#}\n#zle -N airchrome-bindmode-emacs\n#bindkey -v '^e' airchrome-bindmode-emacs\n#bindkey -a '^e' airchrome-bindmode-emacs\n#\n#function airchrome-bindmode-vi () {\n#bindkey -v\n#EMACS_INSERT=`bindkey -lL main | cut -d ' ' -f 3`\n#if echo $EMACS_INSERT | grep emacs > /dev/null 2>&1;then\n#  EMACS_INSERT=\"%K{black}%F{011}${TMUX_POWERLINE_SEPARATOR_LEFT_BOLD}%k%f%K{011}%F{034} % $EMACS_INSERT %k%f\"\n#  VIM_NORMAL=\"%K{011}%F{125}${TMUX_POWERLINE_SEPARATOR_LEFT_BOLD}%k%f%K{125}%F{015} % NORMAL %k%f%K{125}%F{black}${TMUX_POWERLINE_SEPARATOR_LEFT_BOLD}%k%f\"\n#  VIM_INSERT=\"%K{011}%F{075}${TMUX_POWERLINE_SEPARATOR_LEFT_BOLD}%k%f%K{075}%F{026} % INSERT %k%f%K{075}%F{black}${TMUX_POWERLINE_SEPARATOR_LEFT_BOLD}%k%f\"\n#else\n#  EMACS_INSERT=\"%K{black}%F{034}${TMUX_POWERLINE_SEPARATOR_LEFT_BOLD}%k%f%K{034}%F{011} % $EMACS_INSERT %k%f\"\n#  VIM_NORMAL=\"%K{034}%F{125}${TMUX_POWERLINE_SEPARATOR_LEFT_BOLD}%k%f%K{125}%F{015} % NORMAL %k%f%K{125}%F{black}${TMUX_POWERLINE_SEPARATOR_LEFT_BOLD}%k%f\"\n#  VIM_INSERT=\"%K{034}%F{075}${TMUX_POWERLINE_SEPARATOR_LEFT_BOLD}%k%f%K{075}%F{026} % INSERT %k%f%K{075}%F{black}${TMUX_POWERLINE_SEPARATOR_LEFT_BOLD}%k%f\"\n#fi\n#RPS1=\"$EMACS_INSERT${${KEYMAP/vicmd/$VIM_NORMAL}/(main|viins)/$VIM_INSERT}\"\n#RPS2=$RPS1\n#zle reset-prompt\n#}\n#zle -N airchrome-bindmode-vi\n#bindkey -e '^v' airchrome-bindmode-vi\n#### }}}\n### }}}\n\n### media {{{\n\ncase $OSTYPE in\n\ndarwin*)\n\nfunction nico_mylist(){\nurl=`ls -A . | grep Nico | cut -d ':' -f 2 | sed -e 's/GINZA-//g' -e \"s/\\.[^.]*$//\" | tr '\\n' ' '`\ndata=`date +\"%Y_%m_%d\"`\necho \"nico_mylist.py $data $url\" | pbcopy && pbpaste\n}\n\nfunction nico_chrome(){\nword1=\"GINZA-\"\nurl=`zsh -c \"ls -A . | grep Niconico | cut -d ':' -f 2\"`\nurl=`echo $url | sed -e \"s/$word1/http:\\/\\/www.nicovideo.jp\\/watch\\//g\" -e \"s/\\.[^.]*$//\"`\nline=`echo $url | wc -l | tr -d ' '`\nfor (( i = $line; i > 0; i-- )) do\n    murl=`echo $url | awk \"NR==$i\"`\n    echo $murl\n    open -a Google\\ Chrome \"$murl\"\ndone\n}\n\nfunction picasa(){\n    dirp=~/Pictures/picasa\n    dirc=github\n    qlmanage -p ${dirp}/*\n    exiftool -overwrite_original -all= $dirp\n    case $1 in\n       \"\")\n            #google picasa post -n \"$dirc\" ~/Pictures/picasa/*.png\n            list=`google picasa list \"$dirc\" --delimiter \" \" --fields url-direct`\n            numb=`bash -c \"ls -A $dirp\" | wc -l | tr -d ' '`\n            echo \"$list\" | tail -n $numb | pbcopy && pbpaste\n    ;;\n    esac\n    rm -rf $dirp > /dev/null 2>&1\n    mkdir -p $dirp\n}\n\nfunction chrome_done_reload (){\nosascript << EOF && osascript -e 'tell application \"Google Chrome\" to close first tab of window 1'\ntell application \"Google Chrome\"\nrepeat while loading of active tab of window 1\ndelay 0.1\nend repeat\nactivate\nend tell\nEOF\n\ncat << EOF | osascript | tr ',' \"\\n\"\ntell application \"Google Chrome\"\nset pageURI to get URL of tab of window 1\nset pageTitle to get title of tab of window 1\nreturn pageTitle & space & pageURI\nend tell\nEOF\n}\n\nfunction ffg (){\nbas=`cat << EOF | peco | tr -d ' '\nmp4 -> mp3\nflv -> mp3\nswf -> mp3\nmp3 -> wav\nflv -> wav\nmov -> gif\njpg -> png\nbmp -> png\nEOF` > /dev/null 2>&1\n\ninp=`echo $bas | cut -d '-' -f 1`\noup=`echo $bas | cut -d '>' -f 2`\n\ncase $inp in\n\n    swf)\n        for i in *.${inp}; do swfextract -m $i -o ${i%.swf}.mp3; done\n    ;;\n\n    mov)\n        for i in *.${inp}; do ffmpeg -i *.mov -r 8 %04d.png && gm convert *.png ${i%.*}.gif && rm *.png; done\n    ;;\n\n    jpg)\n        mogrify -format png -quality 100 *.jpg\n    ;;\n\n    bmp)\n        mogrify -format png -quality 100 *.bmp\n    ;;\n\n    *)\n        for i in *.${inp}; do ffmpeg -i $i -vn ${i%.*}.${oup}; done\n    ;;\n\nesac\n}\n\nalias mun='cd ~/Music/new && touch mylist.test && rm mylist* && mylist && mplayer -playlist mylist -novideo -loop 20 -quiet -msglevel all=0 -identify | grep FILE'\n\nfunction ms (){\ndir1=$HOME/Music\nfile=${0:a:t}\nloop=20\nspeed=2\n\nplay=`ps | grep mplayer -s | wc -l | tr -d ' '`\n\ncase $play in\n    \"\"|1)\n        sea=\"ID_FILENAME\"\n        dir=\"$dir1/\"`zsh -c \"ls -A $dir1 | peco\"`\n        com=\"mplayer -speed $speed -af scaletempo,volnorm -novideo -loop $loop -quiet -msglevel all=0 -identify $dir/*\"\n        com=\"${com} | grep $sea\"\n        eval $com\n    ;;\n    *)\n        pkill mplayer > /dev/null 2>&1\n    ;;\nesac\n}\n\n## twitter\nfunction tweetvim (){\n    case $1 in\n        \"\")\n            vim +TweetVimUserTimeline\n        ;;\n        t)\n            vim +TweetVimSay\n        ;;\n        m)\n            vim +TweetVimMentions +/@\n        ;;\n        l)\n            vim -c \"TweetVimListStatuses fav\" +/http\n        ;;\n        $USER)\n            vim -c \"TweetVimUserTimeline syui__\"\n        ;;\n\n    esac\n}\n\nalias qiita-line=\"curl -I 'https://qiita.com/api/v1/items.json'\"\nalias lingr=\"vim +J6uil +J6uilStartNotify\"\nalias iTunes='open -a iTunes'\nalias youtube.py='~/youtube-cli/youtube.py'\nalias html2text='python ~/html2text/html2text.py'\nalias mylist='find `pwd` -maxdepth 1 -mindepth 1 | grep -v \"\\/\\.\" > mylist'\nalias ch=\"open -a Google\\ Chrome --args --gpu-startup-dialog --disable-java --disable-background-mode --renderer-process-limit=2\"\nalias fu=\"~/dotfiles/fu/fu\"\nalias keepass=\"~/pull/airkeepass/airkeepass\"\nalias anime=\"~/script/anitube-cli/anitube-cli\"\nalias hatena=\"~/script/hatena-cli/hatena-cli\"\nalias nicovideo='nicovideo-dl -t -n'\n;;\n\nesac\n### }}}\n\n### os {{{\ncase $OSTYPE in\nlinux*)\n        bindkey -v\n        export CLICOLOR=1\n        export LSCOLORS=ExFxCxDxBxegedabagacad\n        export PATH\n        # man path\n        MANPATH=/usr/local/man:$MANPATH\n        export MANPATH\n        INFOPATH=/usr/local/info:$INFOPATH\n        export INFOPATH\n\n        # Java\n        export JAVA_HOME=/usr/java/default\n        export PATH=$JAVA_HOME/bin:$PATH\n\n        # Maven2\n        export MAVEN_HOME=/usr/local/apache-maven-2.2.1\n        export PATH=$MAVEN_HOME/bin:$PATH\n        export MAVEN_OPTS=-Xmx1024M\n\n        #rvm\n        if [[ -s $HOME/.rvm/scripts/rvm ]] ; then source $HOME/.rvm/scripts/rvm ; fi\n\n        export PATH=$PATH:$HOME/.gem/ruby/1.8/bin\n\n        #alias\n        alias ls='ls -alh --color'\n        alias vim=\"/usr/bin/vim\"\n        alias v=\"/usr/bin/vim\"\n\n        ;;\n\ndarwin*)\n        zle -N expand-to-home-or-insert\n        bindkey -v\n        bindkey \"@\"  expand-to-home-or-insert\n        export PATH=/usr/local/bin:/usr/local/sbin:$PATH\n        export PATH=/opt/local/bin:/opt/local/sbin:~/bin:$PATH\n\n        # osx alias\n        alias pbc='pbcopy'\n        alias vo='osascript -e \"set Volume 0.00001\"'\n        # Terminal Color\u306e\u8a2d\u5b9a\n        export CLICOLOR=1\n        export LSCOLORS=ExFxCxDxBxegedabagacad\n\n        ## vim\n        export EDITOR=/Applications/MacVim.app/Contents/MacOS/Vim\n        alias vi='/opt/local/bin/vim'\n        alias vim='env LANG=ja_JP.UTF-8 /Applications/MacVim.app/Contents/MacOS/Vim \"$@\"'\n        alias v='env LANG=ja_JP.UTF-8 /Applications/MacVim.app/Contents/MacOS/Vim \"$@\"'\n\n        ##Java7\n        export JAVA_HOME=/Library/Java/JavaVirtualMachines/1.7.0.jdk/Contents/Home\n        # export JAVA_HOME=/Library/Java/Home\n        export PATH=$JAVA_HOME/bin:$PATH\n        # \u30c7\u30d5\u30a9\u30eb\u30c8\u30a8\u30f3\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0SJIS\u3092UTF-8\u3078\n        export _JAVA_OPTIONS=\"-Dfile.encoding=UTF-8\"\n\n        # haskell\n        export PATH=/Users/ozaki/Library/Haskell/bin:$PATH\n\n        # scala\n        export SCALA_HOME=/Users/ozaki/.svm/current/rt\n        PATH=$SCALA_HOME/bin:$PATH\n        export SCALA_DOC_HOME=$SCALA_HOME/../devel-docs/api/\n        export SCALA_CLASSPATH=~/sandbox/scala/yuroyoro/yuroyoro-util/target/yuroyoro-util-1.0.jar\n\n        # Ant\n        export ANT_VERSION=1.8.0\n        export ANT_HOME=~/dev/Tools/apache-ant-${ANT_VERSION}\n        export ANT_OPTS=-Xmx1g\n        export PATH=$ANT_HOME/bin:$PATH\n\n        # Maven2\n        export MAVEN_VERSION=2.2.1\n        export MAVEN_HOME=~/dev/Tools/apache-maven-${MAVEN_VERSION}\n        export PATH=$MAVEN_HOME/bin:$PATH\n        export MAVEN_OPTS=-Xmx1024M\n\n        # man path\n        MANPATH=/usr/local/man:$MANPATH\n        export MANPATH\n        INFOPATH=/usr/local/info:$INFOPATH\n        export INFOPATH\n\n        # Mysql\n        export MYSQL_HOME=/usr/local/mysql\n        export PATH=$MYSQL_HOME/bin:$PATH\n        alias h2db='java -cp ~/.m2/repository/com/h2database/h2/1.1.112/h2-1.1.112.jar org.h2.tools.Server'\n\n        # STAX SDK\n        export STAX_HOME=~/dev/Project/sandbox/stax-sdk-0.2.11\n        export PATH=$PATH:$STAX_HOME\n\n        # Adobe AIR\n        export AIR_HOME=~/dev/air\n        export FLEX_HOME=~/dev/flex\n        export PATH=$PATH:$AIR_HOME/bin:$FLEX_HOME/bin\n        export GAE_SDK_VERSION=1.3.4\n        GAE_SDK_INSTALLED_DIR=~/sandbox/GoogleAppEngine/sdk\n        export GAE_HOME=$GAE_SDK_INSTALLED_DIR/$GAE_SDK_VERSION/google_appengine\n        export PATH=$PATH:$GAE_HOME\n        export GAEJ_SDK_VERSION=1.3.7\n        GAEJ_SDK_INSTALLED_DIR=~/sandbox/GAEJava/sdk\n        export GAEJ_HOME=$GAEJ_SDK_INSTALLED_DIR/appengine-java-sdk-$GAEJ_SDK_VERSION\n        export PATH=$PATH:$GAEJ_HOME/bin\n        export REFE_DATA_DIR=/System/Library/Frameworks/Ruby.framework/Versions/1.8/usr/share/refe\n        export GOROOT=$HOME/dev/go\n        export GOOS=darwin\n        export GOARCH=386\n        export PATH=$PATH:$GOROOT/bin\n        export NODE_PATH=/usr/local/lib/node:$PATH\n        export PATH=/usr/local/share/npm/bin:$PATH\n        export JRUBY_HOME=$HOME/sandbox/jruby/jruby-1.5.2\n        export PATH=$PATH:$JRUBY_HOME/bin\n        export MIRAH_HOME=$HOME/sandbox/mirah/mirah\n        export PATH=$PATH:$MIRAH_HOME/bin\n        alias tma='tmux attach'\n        alias tml='tmux list-window'\n        ;;\nesac\n\n### font {{{\ncase $OSTYPE in\n    linux*)\n        if ! fc-list | grep DejaVuSans > /dev/null 2>&1;then\n            sudo pacman -S ttf-dejavu\n        fi\n    ;;\n    darwin*)\n        if ! ls ~/Library/Fonts/Ricty* > /dev/null 2>&1;then\n            brew tap sanemat/font\n            brew install ricty\n            brew install fontforge\n            cp -f /usr/local/opt/ricty/share/fonts/Ricty*.ttf ~/Library/Fonts/\n            #fc-cache -vf\n        fi\n    ;;\nesac\n### }}}\n### }}}\n\n#{\n#  \"to-do\" : {\n#    \"os\" : [ \"coreos\", \"docker\", \"vagrant\", \"awesome\", \"conky\" ],\n#    \"terminal\" : [ \"cygwin\", \"powershell\", \"vim\", \"tmux\", \"git\" ],\n#    \"tool\" : [ \"dwb\", \"spacefm\", \"growl\", \"ffmpeg\", \"imagemagick\", \"googlecl\", \"keepass\", \"jq\", \"canto\", \"nc\", \"ssh\", \"mosh\", \"nmap\", \"weechat\", \"metasploit\", \"wireshark\" ],\n#    \"lang\" : [ \"c++\", \"python\", \"ruby\", \"lua\", \"go\", \"scala\", \"typescript\", \"perl\", \"sass\", \"slim\", \"node.js\", \"swift\", \"gauche\" ]\n#  }\n#}\n\n\n[zsh\u30a2\u30c9\u30d9\u30f3\u30c8\u30ab\u30ec\u30f3\u30c0\u30fc2014](http://syui.github.io/blog/2014/12/02/zsh/)\u306e\u6642\u306b\u4f5c\u3063\u305f\u30b5\u30f3\u30d7\u30eb\u306e\u8a2d\u5b9a\u30d5\u30a1\u30a4\u30eb\u3067\u3059\u3002\u4e00\u5fdc\u3001\u516c\u958b\u3057\u3066\u304a\u304d\u307e\u3059\u3002\n\n\n```bash:\n# os : archlinux\n# terminal : lilyterm\n# font : ttf-dejavu\n# source : https://gist.github.com/syui/11322769c45f42fad962\n\n### export {{{\nPATH=$PATH:$HOME/.rvm/bin\nHISTFILE=~/.zsh_history\nHISTSIZE=20000\nSAVEHIST=20000\nfpath=(~/.zsh/functions/ $fpath)\nfpath=($HOME/.zsh/functions $fpath)\ne_normal=`echo -e \"\u00a5033[0;30m\"`\ne_RED=`echo -e \"\u00a5033[1;31m\"`\ne_BLUE=`echo -e \"\u00a5033[1;36m\"`\n\nunset LSCOLORS\nexport EDITOR=/Applications/MacVim.app/Contents/MacOS/Vim\nexport BROWSER=w3m\nexport PATH=/usr/local/bin:$PATH\nexport LANG=ja_JP.UTF-8\nexport LESSCHARSET=utf-8\nexport EDITOR=vim\nexport PATH=$PATH:$HOME/local/bin:/usr/local/git/bin\nexport PATH=$PATH:$HOME/dotfiles/bin\nexport PATH=$PATH:/sbin:/usr/local/bin\nexport MANPATH=$MANPATH:/opt/local/man:/usr/local/share/man\nexport PATH=\"$PATH:$HOME/.rvm/bin\"\n\n[[ -s \"$HOME/.pythonbrew/etc/bashrc\" ]] && source \"$HOME/.pythonbrew/etc/bashrc\"\n\ncase \"${OSTYPE}\" in\n    darwin*)\n        export PATH=$PATH:/opt/local/bin:/opt/local/sbin\n        export PATH=$PATH:/System/Library/PrivateFrameworks/Apple80211.framework/Versions/A/Resources\n        ;;\n    freebsd*)\n        case ${UID} in\n            0)\n                updateports()\n                {\n                    if [ -f /usr/ports/.portsnap.INDEX ]\n                    then\n                        portsnap fetch update\n                    else\n                        portsnap fetch extract update\n                    fi\n                    (cd /usr/ports/; make index)\n\n                    portversion -v -l \\<\n                }\n                alias appsupgrade='pkgdb -F && BATCH=YES NO_CHECKSUM=YES portupgrade -a'\n                ;;\n        esac\n        ;;\nesac\n### }}}\n\n### setopt {{{\nsetopt auto_cd\nsetopt auto_list\nsetopt auto_menu\nsetopt auto_param_keys\nsetopt auto_param_slash\nsetopt auto_pushd\nsetopt autopushd\nsetopt brace_ccl\nsetopt chase_links\nsetopt complete_aliases\nsetopt correct_all\nsetopt extended_glob\nsetopt globdots\nsetopt hist_ignore_all_dups\nsetopt hist_no_store\nsetopt hist_reduce_blanks\nsetopt inc_append_history\nsetopt list_packed\nsetopt list_types\nsetopt magic_equal_subst\nsetopt multios\nsetopt no_clobber\nsetopt noautoremoveslash\nsetopt nolistbeep\nsetopt path_dirs\nsetopt pushd_ignore_dups\nsetopt share_history\n### }}}\n\n### cdr {{{\nautoload -Uz chpwd_recent_dirs cdr add-zsh-hook\nzstyle ':completion:*:*:cdr:*:*' menu selection\nzstyle ':completion:*' recent-dirs-insert both\nzstyle ':chpwd:*' recent-dirs-max 500\nzstyle ':chpwd:*' recent-dirs-default true\nzstyle ':chpwd:*' recent-dirs-pushd true\n### }}}\n\n### color {{{\nzstyle ':completion:*:sudo:*' command-path /usr/local/sbin /usr/local/bin /usr/sbin /usr/bin /sbin /bin\nzstyle ':completion:*' list-colors di=34 fi=0\ncase \"${TERM}\" in\n    xterm)\n        export TERM=xterm-color\n\n        ;;\n    kterm)\n        export TERM=kterm-color\n        stty erase\n        ;;\n\n    cons25)\n        unset LANG\n        export LSCOLORS=ExFxCxdxBxegedabagacad\n\n        export LS_COLORS='di=01;32:ln=01;35:so=01;32:ex=01;31:bd=46;34:cd=43;34:su=41;30:sg=46;30'\n        zstyle ':completion:*' list-colors \\\n            'di=;36;1' 'ln=;35;1' 'so=;32;1' 'ex=31;1' 'bd=46;34' 'cd=43;34'\n        ;;\n\n    kterm*|xterm*)\n        export CLICOLOR=1\n        export LSCOLORS=ExFxCxDxBxegedabagacad\n\n        zstyle ':completion:*' list-colors \\\n            'di=36' 'ln=35' 'so=32' 'ex=31' 'bd=46;34' 'cd=43;34'\n        ;;\n\n    dumb)\n        echo \"Welcome Emacs Shell\"\n        ;;\nesac\n\nautoload colors\ncolors\nLS_COLORS=\"di=34:ln=35:so=32:pi=33:ex=31:bd=46;34:cd=43;34:su=41;30:sg=46;30:tw=42;30:ow=43;30\"\nexport LS_COLORS\n\nif [ -f ~/.dircolors ]; then\n    if type dircolors > /dev/null 2>&1; then\n        eval $(dircolors ~/.dircolors)\n    elif type gdircolors > /dev/null 2>&1; then\n        eval $(gdircolors ~/.dircolors)\n    fi\nfi\n\n### }}}\n\n### autoload, zstyle {{{\n#HELPDIR=/usr/local/share/zsh/helpfiles\n#alias run-help >/dev/null 2>&1 && unalias run-help\nautoload -Uz run-help\nautoload -Uz run-help-git\nautoload -Uz run-help-svn\nautoload -Uz run-help-svk\nautoload -Uz run-help-openssl\nautoload -Uz run-help-p4\nautoload -Uz run-help-sudo\nautoload zed\nautoload predict-on\nautoload history-search-end\nautoload -Uz select-word-style\nselect-word-style default\nautoload -Uz zmv\nautoload -U url-quote-magic\nautoload -U compinit\ncompinit\nzstyle ':zle:*' word-chars \" _-./;@\"\nzstyle ':zle:*' word-style unspecified\nzstyle ':completion:*:default' menu select=1\nzstyle ':completion:history-words:*' list no\nzstyle ':completion:history-words:*' menu yes\nzstyle ':completion:history-words:*' remove-all-dups yes\nbindkey \"\\e/\" _history-complete-older\nbindkey \"\\e,\" _history-complete-newer\n\nzstyle ':filter-select' max-lines $(($LINES / 2))\nzstyle ':completion:*' verbose yes\nzstyle ':completion:*' completer _expand _complete _match _prefix _approximate _list _history\nzstyle ':completion:*:messages' format '%F{YELLOW}%d'$DEFAULT\nzstyle ':completion:*:warnings' format '%F{RED}No matches for:''%F{YELLOW} %d'$DEFAULT\nzstyle ':completion:*:descriptions' format '%F{YELLOW}completing %B%d%b'$DEFAULT\nzstyle ':completion:*:options' description 'yes'\nzstyle ':completion:*' group-name ''\nzstyle ':completion:*' use-cache true\nzstyle ':completion:*' list-separator '-->'\nzstyle ':completion:*:manuals' separate-sections true\nzstyle ':completion:*' list-colors ${(s.:.)LS_COLORS}\nif [ -n \"$LS_COLORS\" ]; then\n    zstyle ':completion:*' list-colors ${(s.:.)LS_COLORS}\nfi\n### }}}\n\n### magick {{{\ntypeset -A abbreviations\nabbreviations=(\n\"L\"    \"| $PAGER\"\n\"G\"    \"| grep\"\n\n\"HEAD^\"     \"HEAD\\\\^\"\n\"HEAD^^\"    \"HEAD\\\\^\\\\^\"\n\"HEAD^^^\"   \"HEAD\\\\^\\\\^\\\\^\"\n\"HEAD^^^^\"  \"HEAD\\\\^\\\\^\\\\^\\\\^\\\\^\"\n\"HEAD^^^^^\" \"HEAD\\\\^\\\\^\\\\^\\\\^\\\\^\"\n)\n\nmagic-abbrev-expand () {\n    local MATCH\n    LBUFFER=${LBUFFER%%(#m)[-_a-zA-Z0-9^]#}\n    LBUFFER+=${abbreviations[$MATCH]:-$MATCH}\n}\n\nmagic-abbrev-expand-and-insert () {\n    magic-abbrev-expand\n    zle self-insert\n}\n\nmagic-abbrev-expand-and-accept () {\n    magic-abbrev-expand\n    zle accept-line\n}\n\nno-magic-abbrev-expand () {\n    LBUFFER+=' '\n}\n\nzle -N magic-abbrev-expand\nzle -N magic-abbrev-expand-and-insert\nzle -N magic-abbrev-expand-and-accept\nzle -N no-magic-abbrev-expand\nbindkey \"\\r\"  magic-abbrev-expand-and-accept\nbindkey \"^J\"  accept-line\nbindkey \" \"   magic-abbrev-expand-and-insert\nbindkey \".\"   magic-abbrev-expand-and-insert\nbindkey \"^x \" no-magic-abbrev-expand\n\nfunction rmf(){\nfor file in $*\ndo\n    __rm_single_file $file\ndone\n}\n\nfunction __rm_single_file(){\nif ! [ -d ~/.Trash/ ]\nthen\n    command /bin/mkdir ~/.Trash\nfi\n\nif ! [ $# -eq 1 ]\nthen\n    echo \"__rm_single_file: 1 argument required but $# passed.\"\n    exit\nfi\n\nif [ -e $1 ]\nthen\n    BASENAME=`basename $1`\n    NAME=$BASENAME\n    COUNT=0\n    while [ -e ~/.Trash/$NAME ]\n    do\n        COUNT=$(($COUNT+1))\n        NAME=\"$BASENAME.$COUNT\"\n    done\n\n    command /bin/mv $1 ~/.Trash/$NAME\nelse\n    echo \"No such file or directory: $file\"\nfi\n}\n\nzle -N self-insert url-quote-magic\nzle -N history-beginning-search-backward-end history-search-end\nzle -N history-beginning-search-forward-end history-search-end\n\n# }}}\n\n### directory {{{\n\nfunction chpwd() { ls -aCFG }\n\nfunction mkcd() {\nif [[ -d $1 ]]; then\n    echo \"It already exsits! Cd to the directory.\"\n    cd $1\nelse\n    echo \"Created the directory and cd to it.\"\n    mkdir -p $1 && cd $1\nfi\n}\n\nfunction cdup_dir() {\nif [[ -z \"$BUFFER\" ]]; then\n    echo\n    cd ..\n    ls -aF\n    zle reset-prompt\nelse\n    zle self-insert 'k'\nfi\n }\n zle -N cdup_dir\n bindkey '^k' cdup_dir\n\n function cddown_dir(){\n com='$SHELL -c \"ls -AF . | grep / \"'\n while [ $? = 0 ]\n do\n     cdir=`eval $com | peco`\n     if [ $? = 0 ];then\n         cd $cdir\n         eval $com\n     else\n         break\n     fi\n done\n zle reset-prompt\n}\nzle -N cddown_dir\nbindkey '^j' cddown_dir\n\n### }}}\n\n### stack {{{\n\nlocal p_buffer_stack=\"\"\nlocal -a buffer_stack_arr\n\nfunction make_p_buffer_stack()\n{\n    if [[ ! $#buffer_stack_arr > 0 ]]; then\n        p_buffer_stack=\"\"\n        return\n    fi\n    p_buffer_stack=\"%F{black} $buffer_stack_arr %f\"\n}\n\n\nshow_buffer_stack() {\n    POSTDISPLAY=\"\n    stack: $LBUFFER\"\n    zle push-line-or-edit\n}\nzle -N show_buffer_stack\nsetopt noflowcontrol\nbindkey '^Q' show_buffer_stack\n### }}}\n\n### golang {{{\n\nif [ -x \"`which go`\" ]; then\n  export GOPATH=$HOME/go\n  export PATH=$PATH:$GOROOT/bin:$GOPATH/bin\nfi\n\n### }}}\n\n### clipboard {{{\n## pbcopy\ncase ${OSTYPE} in\n  linux*)\n    if [ ! -f /usr/bin/xsel ];then\n      sudo pacman -S xsel\n    fi\n    alias pbcopy='xsel --clipboard --input'\n    ;;\n  cygwin*)\n    alias pbcopy='putclip'\n    ;;\nesac\n\n## buffer\npbcopy-buffer(){\n  case ${OSTYPE} in\n    freebsd*|darwin*)\n      print -rn $BUFFER | pbcopy\n      ;;\n    linux*)\n      print -rn $BUFFER | xclip -i -selection clipboard\n      ;;\n    cygwin*)\n      print -rn $BUFFER | putclip\n      ;;\n  esac\n  zle -M \"copy : ${BUFFER}\"\n}\nzle -N pbcopy-buffer\nbindkey '^p^p' pbcopy-buffer\n\n## alias\nif which pbcopy >/dev/null 2>&1 ; then\n  # Mac\n  alias -g C='| pbcopy'\nelif which xclip >/dev/null 2>&1 ; then\n  # Linux\n  alias -g C='| xclip --input --clipboard'\nelif which putclip >/dev/null 2>&1 ; then\n  # Cygwin\n  alias -g C='| putclip'\nfi\n\n## bindkey\n# bindkey -s '^b' \" | pbcopy\"\n\n## clipboard-history\nfunction clipboard-history (){\ncase $OSTYPE in\n  linux*)\n    if [ ! -f /usr/bin/anamnesis ];then\n      sudo yaourt -S anamnesis\n    fi\n    anamnesis -l 100 | sed -n '3,100p' | peco | cut -d u -f 2- | head -c -3 | tail -c +2  | xclip -i -selection clipboard\n    ;;\n  freebsd*|darwin*)\n    plutil -convert xml1 ~/Library/Application\\ Support/ClipMenu/clips.data -o - | parsrx.sh | grep '/plist/dict/array/string ' | sed '1,2d' | sed 's/\\/plist\\/dict\\/array\\/string//g' | peco | pbcopy\n    ;;\nesac\n}\nzle -N clipboard-history\nbindkey '^[c' clipboard-history\n### }}}\n\n### stack {{{\nfunction show_buffer_stack() {\nPOSTDISPLAY=\"\nstack: $LBUFFER\"\nzle push-line-or-edit\n}\nzle -N show_buffer_stack\nsetopt noflowcontrol\nbindkey '^Q' show_buffer_stack\n### }}}\n\n### open {{{\nfunction openapp() {\ncase ${OSTYPE} in\n  freebsd*|darwin*)\n    BUFFER=\"open -a \"\n    ;;\n  linux*)\n    BUFFER=\"xdg-open \"\n    #BUFFER=\"gnome-open \"\n    ;;\n  cygwin*)\n    BUFFER=\"cygstart \"\n    ;;\nesac\nCURSOR=$#BUFFER\n}\nzle -N openapp\nbindkey '^o' openapp\n# bindkey -s '^o' \"open -a \"\n### }}}\n\n### history {{{\ncase $OSTYPE in\n    linux*)\n        function peco-select-history() {\n        local tac\n        if which tac > /dev/null; then\n            tac=\"tac\"\n        else\n            tac=\"tail -r\"\n        fi\n        BUFFER=$(\\history -rn 1 | \\\n            eval $tac | \\\n            peco --query \"$LBUFFER\")\n        CURSOR=$#BUFFER\n        zle clear-screen\n    }\n    ;;\ndarwin*)\n    function peco-select-history() {\n    BUFFER=`history -rn 1 | peco`\n    CURSOR=$#BUFFER\n    zle clear-screen\n}\n;;\nesac\nzle -N peco-select-history\nbindkey '^h^j' peco-select-history\n### }}}\n\n### markdown {{{\nfunction markdown_preview(){\nif [ $# -ne 1 ]\nthen\n    echo \"error: invalid arguments\"\n    echo \"usage: $0 markdown_file\"\n    return 1\nfi\n\nif [ ! -f \"$1\" ]\nthen\n    echo \"error: $1 dose not exists\"\n    return 2\nfi\n\n(echo '<html><head><meta charset=\"UTF-8\" /></head><body>';\nmarkdown $1; echo '</body></html>')\\\n    | w3m -T text/html -dump\n\nif [ $STY ]\nthen\n    sleep 0.2\n    screen -X redisplay\nfi\n}\n### }}}\n\n### virtualbox {{{\nfunction vm (){\n#zsh -c \"ls -A ~/VirtualBox\\ VMs/\" | peco\nvbi=`zsh -c \"ls -A ~/VirtualBox\\ VMs/ | tr ' ' '\\n'\"`\ncase $1 in\n    [aA]rch*|[mM]ac*)\n        echo $vbi | grep $1\n        VBoxManage startvm `echo $vbi | grep $1`\n        ;;\n    \"\")\n        echo $vbi | grep win\n        echo win\n        VBoxManage startvm `echo $vbi | grep win`\n        ;;\n    -a)\n        echo $vbi | tr '\\n' ' '\n        VBoxManage startvm `echo $vbi | tr '\\n' ' '`\n    ;;\n    *)\n        VBoxManage startvm `echo \"$vbi\" | peco`\n        ;;\nesac\n}\n\nfunction vm-window (){\nosascript << EOF\n\n--tell application \"System Events\"\n--  tell process \"VirtualBoxVM\"\n--    every UI element\n--  end tell\n--end tell\n\ntell app \"VirtualBoxVM\"\nactivate\nend tell\nEOF\n}\n\n### }}}\n\n### tmux {{{\n\n## auto-start\ncase $OSTYPE in\n    darwin*)\n        if [ -z \"$SSH_CONNECTION\" -a ${UID} -ne 0 -a -z \"$TMUX\" -a -z \"$STY\" ]; then\n            if type tmux >/dev/null 2>&1; then\n                tmux\n            elif type tmux >/dev/null 2>&1; then\n                if tmux has-session && tmux list-sessions | egrep -q '.*]$'; then\n                    tmux attach && echo \"tmux attached session \"\n                else\n                    tmux new-session && echo \"tmux created new session\"\n                fi\n            elif type screen >/dev/null 2>&1; then\n                screen -rx || screen -D -RR\n            fi\n        fi\n        ;;\n    linux*)\n        if [ -z \"$TMUX\" -a -z \"$STY\" ]; then\n            if type tmux >/dev/null 2>&1; then\n                if tmux has-session && tmux list-sessions | /usr/bin/grep -qE '.*]$'; then\n                    tmux -2 attach && echo \"tmux attached session \"\n                else\n                    tmux -2 new-session && echo \"tmux created new session\"\n                fi\n            fi\n        fi\n        ;;\nesac\n\n##copy-mode\nfunction tmux-copy-line () {\ntmux copy-mode\\; send-keys 2k0Vj Enter\n}\nzle -N tmux-copy-line\nbindkey '^[n' tmux-copy-line\n\nfunction tmux-copy-all () {\ntmux copy-mode\\; send-keys ggVG Enter\n#tmux copy-mode\\; send-keys Space\\; send-keys '$'\\; send-keys Enter\n}\nzle -N tmux-copy-all\nbindkey '^[m' tmux-copy-all\n### }}}\n\n### alias {{{\nalias lf=\"ls -F\"\nalias ll=\"ls -l\"\nalias 'ps?'='pgrep -l -f'\nalias pk='pkill -f'\nalias du=\"du -h\"\nalias duh=\"du -h ./ --max-depth=1\"\nalias su=\"su -l\"\nalias 'src'='exec zsh'\nalias -g V=\"| vim -\"\nalias -g EV=\"| xargs --verbose sh -c 'vim \\\"\\$@\\\" < /dev/tty'\"\nalias -g RET=\"RAILS_ENV=test\"\nalias -g RED=\"RAILS_ENV=development\"\nalias -g REP=\"RAILS_ENV=production\"\nalias raket='RAILS_ENV=test rake'\nalias raked='RAILS_ENV=development rake'\nalias rakep='RAILS_ENV=production rake'\nalias ccat='pygmentize -O style=vim -f console256 -g'\nalias less='less -r'\nalias df='df -h'\nalias free='free -m'\nalias 'gr'='grep --color=auto -ERUIn'\nalias 'm'='make'\nalias 'mn'='make native-code'\nalias 'mc'='make clean'\nalias sc='screen -S main'\nalias sn='screen'\nalias sl='screen -ls'\nalias sr='screen -r main'\nalias srr='screen -U -D -RR'\nalias tma='tmux attach'\nalias tma0='tmux attach -t 0'\nalias tma1='tmux attach -t 1'\nalias tma2='tmux attach -t 2'\nalias tml='tmux list-sessions'\nalias pon='predict-on'\nalias poff='predict-off'\nalias cp='nocorrect cp -irp'\nalias refe='nocorrect refe'\nalias g='git'\nalias gi='git'\nalias oppai='git'\nalias gs='git status -s -b'\nalias gst='git status -s -b'\nalias gc='git commit'\nalias gci='git commit -a'\nalias java='nocorrect java'\nalias erl='nocorrect erl'\nalias sbcl='nocorrect sbcl'\nalias gosh='nocorrect gosh'\nalias node='nocorrect node'\nalias scala='scala -deprecation -unchecked -explaintypes'\nalias scc='scalac -deprecation -unchecked -explaintypes'\nalias sci='scala -deprecation -unchecked -explaintypes -cp $SCALA_CLASSPATH -i ~/import.scala'\nalias sce='scala'\nalias ex='extract'\nalias be='bundle exec'\nalias grv='grepvim'\nalias dircolors=\"gdircolors\"\nalias zmv='noglob zmv -W'\nalias ls=\"ls -a\"\nalias msf='cd /opt/msf/ && ./msfconsole'\nalias p=\"qlmanage -p \"$@\" >& /dev/null\"\nalias gotr=\"altr\"\nalias trash=\"sudo rm -rf ~/.Trash/\"\nalias qm='qlmanage -p \"$@\" >& /dev/null'\nalias st='/Applications/Sublime\\ Text\\ 2.app/Contents/SharedSupport/bin/subl'\nalias qrank=\"w3m http://qrank.wbsrv.net/\"\nalias color-terminal='for c in {000..255}; do echo -n \"\\e[38;5;${c}m $c\" ; [ $(($c%16)) -eq 15 ] && echo;done;echo'\nalias ds.store=\"sudo find ./ -name '.DS_Store' -delete\"\nalias rgen=\"rake generate && rake preview\"\nalias where=\"command -v\"\nalias remem='du -sx / &> /dev/null & sleep 5 && kill $!'\nalias mf='sudo purge'\nalias vs='vim ~/.vimrc'\nalias zs='vim ~/.zshrc'\nalias ts='vim ~/.tmux.conf'\nalias zr='source ~/.zshrc && exec $SHELL'\nalias zd='vim ~/dotfiles/.zshrc'\nalias vim-trans='vim -c \"ExciteTranslate\"'\nalias gistvim='vim * -c \"bufdo %s/foo/bar/g | Gist\"'\nalias f='vim +VimFiler'\nalias w3mjman='W3MMAN_MAN=jman w3mman'\nalias w3h='rm ~/.w3m/history && w3m -N'\nalias gd='dirs -v; echo -n \"select number: \"; read newdir; cd +\"$newdir\"'\n\ncase $OSTYPE in\n    darwin*)\n        #/Applications/VLC.app/Contents/MacOS/VLC -I rc\n        # interface:ncurses, speed:2\n        alias sy='open -a \"system preferences\"'\n        alias vlc0='/Applications/VLC.app/Contents/MacOS/VLC --rate=2 && sleep 3;reset'\n        alias vlc1='killall -KILL VLC'\n        alias ctags=\"`brew --prefix`/usr/local/bin/ctags\"\n        alias up=\"brew update && brew upgrade\"\n        alias ll='gls -slhAF --color'\n        alias gls='gls -lAFh --color=auto'\n        eval `dircolors ~/dotfiles/dircolors-solarized/dircolors.ansi-dark`\n        ;;\n    linux*)\n        alias up=\"sudo pacman -Syu && sudo yaourt -Syu\"\n        alias vim=\"/usr/bin/vim\"\n        ;;\nesac\n\n        if which pyenv > /dev/null; then eval \"$(pyenv init -)\"; fi\n\n### }}}\n\n### download {{{\n\nexport DOTFILE=$HOME/dotfiles\nexport PLUGIN=$DOTFILE/.zsh/plugin\n\n## completion\nif [ ! -d $PLUGIN/zsh-completions ];then\n    git clone git://github.com/zsh-users/zsh-completions $PLUGIN/zsh-completions\nfi\nfpath=($PLUGIN/zsh-completions/src $fpath)\n\n## powerline {{{\nif [ ! -f $PLUGIN/powerline.zsh ];then\n    curl https://gist.githubusercontent.com/syui/e3fad84e3dba8a3f667b/raw/powerline.zsh -o $PLUGIN/powerline.zsh\nfi\n\nif [ ! -d $PLUGIN/powerline-bash ];then\n    git clone https://github.com/milkbikis/powerline-bash $PLUGIN/powerline-bash\nfi\n\n#ln -s $PLUGIN/powerline-bash/powerline-bash.py ~/powerline-bash.py\n#\n#function powerline_precmd() {\n#export PS1=\"$(~/powerline-bash.py $? --shell zsh)\"\n#        }\n#\n#        function install_powerline_precmd() {\n#        for s in \"${precmd_functions[@]}\"; do\n#            if [ \"$s\" = \"powerline_precmd\" ]; then\n#                return\n#            fi\n#        done\n#        precmd_functions+=(powerline_precmd)\n#    }\n#\n#    install_powerline_precmd\n## }}}\n\n## tmux-powerline\n# iTerm : Treat ambiguous-width characters as double width\ncase $OSTYPE in\n    darwin*)\n        if ! type tmux > /dev/null 2>&1;then\n            brew tap waltarix/homebrew-customs\n            brew update\n            brew install waltarix/customs/tmux\n        fi\n    ;;\nesac\n\nif type tmux > /dev/null 2>&1;then\n    if [ ! -d $DOTFILE/.tmux/tmux-powerline ];then\n        git clone https://github.com/erikw/tmux-powerline $DOTFILE/.tmux/tmux-powerline\n    fi\n    if [ ! -d $DOTFILE/.tmux/tmux-colors-solarized ];then\n        git clone https://github.com/seebi/tmux-colors-solarized $DOTFILE/.tmux/tmux-colors-solarized\n    fi\nfi\n\nif [ ! -f $DOTFILE/.tmux/tmux-powerline/segments/used-mem ];then\n    curl https://raw.githubusercontent.com/yonchu/used-mem/master/used-mem -o $DOTFILE/.tmux/tmux-powerline/segments/used-mem\n    chmod +x $DOTFILE/.tmux/tmux-powerline/segments/used-mem\nfi\n\nif [ ! -f $DOTFILE/.tmux/tmux-powerline/segments/mplayer_tmux.sh ];then\n    curl https://raw.githubusercontent.com/syui/mplayer_script/master/mplayer_tmux.sh -o $DOTFILE/.tmux/tmux-powerline/segments/mplayer_tmux.sh\n    chmod +x $DOTFILE/.tmux/tmux-powerline/segments/mplayer_tmux.sh\nfi\n\nif [ ! -f $DOTFILE/.tmux/.tmux.conf.mac ];then\n    curl https://gist.githubusercontent.com/syui/5c49d1296c992d8af737/raw/.tmux.conf.mac -o $DOTFILE/.tmux/.tmux.conf.mac\nfi\n\n## vim\nif [ ! -d ~/.vim/bundle/neobundle.vim ];then\n    curl https://raw.githubusercontent.com/Shougo/neobundle.vim/master/bin/install.sh | sh\nfi\n\n## oh-my-zsh\nif [ ! -d $PLUGIN/oh-my-zsh ];then\n    git clone https://github.com/robbyrussell/oh-my-zsh $PLUGIN/oh-my-zsh\nfi\n\n## cheat-sheet\nif [ -f $PLUGIN/oh-my-zsh/templates/zshrc.zsh-template ];then\n    cheat-sheet () { zle -M \"`cat ~/dotfiles/.zsh/cheat-sheet`\" }\n    zle -N cheat-sheet\n    # bindkey \"^[^h\" cheat-sheet\nfi\n\n## golang\nif [ ! -f ~/dotfiles/.zsh/plugin/golang-crosscompile/crosscompile.bash ];then\n  git clone https://github.com/davecheney/golang-crosscompile ~/dotfiles/.zsh/plugin/golang-crosscompile\nfi\n\n## growl\nif [ ! -f ~/dotfiles/.zsh/plugin/growl.zsh ];then\n       curl https://raw.githubusercontent.com/patbenatar/dotfiles/master/zsh/growl.zsh -o $HOME/dotfiles/.zsh/plugin/growl.zsh\n  chmod +x ~/dotfiles/.zsh/plugin/growl.zsh\nfi\n\n## rupa/z\ncase $OSTYPE in\n  drawin*)\n    if [ -f `brew --prefix`/etc/profile.d/z.sh ];then\n      brew install z\n    fi\n    . `brew --prefix`/etc/profile.d/z.sh\n    ;;\n  linux*)\n    if [ ! -d ~/dotfiles/.zsh/plugin/z ];then\n      git clone https://github.com/rupa/z ~/dotfiles/.zsh/plugin/z\n    fi\n    . ~/dotfiles/.zsh/plugin/z/z.sh\n    ;;\nesac\n\n## _z  {{{\nif ! type _z > /dev/null 2>&1;then\n_z () {\n  local datafile=\"${_Z_DATA:-$HOME/.z}\"\n  [ -z \"$_Z_OWNER\" -a -f \"$datafile\" -a ! -O \"$datafile\" ] && return\n  if [ \"$1\" = \"--add\" ]\n  then\n    shift\n    [ \"$*\" = \"$HOME\" ] && return\n    local exclude\n    for exclude in \"${_Z_EXCLUDE_DIRS[@]}\"\n    do\n      [ \"$*\" = \"$exclude\" ] && return\n    done\n    local tempfile=\"$datafile.$RANDOM\"\n    while read line\n    do\n      [ -d \"${line%%\\|*}\" ] && echo $line\n    done < \"$datafile\" | awk -v path=\"$*\" -v now=\"$(date +%s)\" -F\"|\" '\n            BEGIN {\n                rank[path] = 1\n                time[path] = now\n            }\n            $2 >= 1 {\n                # drop ranks below 1\n                if( $1 == path ) {\n                    rank[$1] = $2 + 1\n                    time[$1] = now\n                } else {\n                    rank[$1] = $2\n                    time[$1] = $3\n                }\n                count += $2\n            }\n            END {\n                if( count > 9000 ) {\n                    # aging\n                    for( x in rank ) print x \"|\" 0.99*rank[x] \"|\" time[x]\n                } else for( x in rank ) print x \"|\" rank[x] \"|\" time[x]\n            }\n        ' 2> /dev/null >| \"$tempfile\"\n    if [ $? -ne 0 -a -f \"$datafile\" ]\n    then\n      env rm -f \"$tempfile\"\n    else\n      [ \"$_Z_OWNER\" ] && chown $_Z_OWNER:$(id -ng $_Z_OWNER) \"$tempfile\"\n      env mv -f \"$tempfile\" \"$datafile\" || env rm -f \"$tempfile\"\n    fi\n  elif [ \"$1\" = \"--complete\" -a -s \"$datafile\" ]\n  then\n    while read line\n    do\n      [ -d \"${line%%\\|*}\" ] && echo $line\n    done < \"$datafile\" | awk -v q=\"$2\" -F\"|\" '\n            BEGIN {\n                if( q == tolower(q) ) imatch = 1\n                q = substr(q, 3)\n                gsub(\" \", \".*\", q)\n            }\n            {\n                if( imatch ) {\n                    if( tolower($1) ~ tolower(q) ) print $1\n                } else if( $1 ~ q ) print $1\n            }\n        ' 2> /dev/null\n  else\n    while [ \"$1\" ]\n    do\n      case \"$1\" in\n        (--) while [ \"$1\" ]\n          do\n            shift\n            local fnd=\"$fnd${fnd:+ }$1\"\n          done ;;\n        (-*) local opt=${1:1}\n          while [ \"$opt\" ]\n          do\n            case ${opt:0:1} in\n              (c) local fnd=\"^$PWD $fnd\" ;;\n              (h) echo \"${_Z_CMD:-z} [-chlrtx] args\" >&2\n                return ;;\n              (x) sed -i -e \"\\:^${PWD}|.*:d\" \"$datafile\" ;;\n              (l) local list=1 ;;\n              (r) local typ=\"rank\" ;;\n              (t) local typ=\"recent\" ;;\n            esac\n            opt=${opt:1}\n          done ;;\n        (*) local fnd=\"$fnd${fnd:+ }$1\" ;;\n      esac\n      local last=$1\n      shift\n    done\n    [ \"$fnd\" -a \"$fnd\" != \"^$PWD \" ] || local list=1\n    case \"$last\" in\n      (/*) [ -z \"$list\" -a -d \"$last\" ] && cd \"$last\" && return ;;\n    esac\n    [ -f \"$datafile\" ] || return\n    local cd\n    cd=\"$(while read line; do\n            [ -d \"${line%%\\|*}\" ] && echo $line\n        done < \"$datafile\" | awk -v t=\"$(date +%s)\" -v list=\"$list\" -v typ=\"$typ\" -v q=\"$fnd\" -F\"|\" '\n            function frecent(rank, time) {\n                # relate frequency and time\n                dx = t - time\n                if( dx < 3600 ) return rank * 4\n                if( dx < 86400 ) return rank * 2\n                if( dx < 604800 ) return rank / 2\n                return rank / 4\n            }\n            function output(files, out, common) {\n                # list or return the desired directory\n                if( list ) {\n                    cmd = \"sort -n >&2\"\n                    for( x in files ) {\n                        if( files[x] ) printf \"%-10s %s\\n\", files[x], x | cmd\n                    }\n                    if( common ) {\n                        printf \"%-10s %s\\n\", \"common:\", common > \"/dev/stderr\"\n                    }\n                } else {\n                    if( common ) out = common\n                    print out\n                }\n            }\n            function common(matches) {\n                # find the common root of a list of matches, if it exists\n                for( x in matches ) {\n                    if( matches[x] && (!short || length(x) < length(short)) ) {\n                        short = x\n                    }\n                }\n                if( short == \"/\" ) return\n                # use a copy to escape special characters, as we want to return\n                # the original. yeah, this escaping is awful.\n                clean_short = short\n                gsub(/[\\(\\)\\[\\]\\|]/, \"\\\\\\\\&\", clean_short)\n                for( x in matches ) if( matches[x] && x !~ clean_short ) return\n                return short\n            }\n            BEGIN {\n                gsub(\" \", \".*\", q)\n                hi_rank = ihi_rank = -9999999999\n            }\n            {\n                if( typ == \"rank\" ) {\n                    rank = $2\n                } else if( typ == \"recent\" ) {\n                    rank = $3 - t\n                } else rank = frecent($2, $3)\n                if( $1 ~ q ) {\n                    matches[$1] = rank\n                } else if( tolower($1) ~ tolower(q) ) imatches[$1] = rank\n                if( matches[$1] && matches[$1] > hi_rank ) {\n                    best_match = $1\n                    hi_rank = matches[$1]\n                } else if( imatches[$1] && imatches[$1] > ihi_rank ) {\n                    ibest_match = $1\n                    ihi_rank = imatches[$1]\n                }\n            }\n            END {\n                # prefer case sensitive\n                if( best_match ) {\n                    output(matches, best_match, common(matches))\n                } else if( ibest_match ) {\n                    output(imatches, ibest_match, common(imatches))\n                }\n            }\n        ')\"\n    [ $? -gt 0 ] && return\n    [ \"$cd\" ] && cd \"$cd\"\n  fi\n}\nfi\n### }}}\n\ncompctl -U -K _z_zsh_tab_completion ${_Z_CMD:-z}\n\n\n## zaw/zaw\nif [ ! -d ~/dotfiles/.zsh/plugin/zaw ];then\n  git clone https://github.com/zsh-users/zaw ~/dotfiles/.zsh/plugin/zaw\nfi\nif [ ! -f ~/dotfiles/.zsh/plugin/zaw/sources/zaw-z.zsh ];then\n  curl https://raw.githubusercontent.com/lovingly/dotfiles/master/zsh.d/zaw/zaw-z.zsh -o $HOME/dotfiles/.zsh/plugin/zaw/sources/zaw-z.zsh\n  chmod +x $HOME/dotfiles/.zsh/plugin/zaw/sources/zaw-z.zsh\nfi\n\n## syui/airchrome.zsh\nif [ ! -f $PLUGIN/airchrome.zsh/airchrome.zsh ];then\n    git clone https://github.com/syui/airchrome.zsh $PLUGIN/airchrome.zsh\nfi\n\n## syntax-highlight\nif [ ! -f $HOME/dotfiles/.zsh/plugin/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh ];then\n  git clone https://github.com/zsh-users/zsh-syntax-highlighting $HOME/dotfiles/.zsh/plugin/zsh-syntax-highlighting\nfi\n### }}}\n\n### source {{{\n\n#source $PLUGIN/oh-my-zsh\n\nsource ~/dotfiles/.zsh/plugin/golang-crosscompile/crosscompile.bash\nsource ~/dotfiles/.zsh/plugin/zaw/zaw.zsh\nsource $HOME/dotfiles/.zsh/plugin/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh\n\n[ -f ~/.zshrc.local ] && source ~/.zshrc.local\n\n[ -s ${HOME}/.rvm/scripts/rvm ] && source ${HOME}/.rvm/scripts/rvm\n\ncase $OSTYPE in\n    darwin*)\n        source $PLUGIN/airchrome.zsh/airchrome.zsh\n        source $PLUGIN/growl.zsh\n    ;;\nesac\n\nunsetopt sh_word_split\n\n### }}}\n\n### bindkey {{{\n\nbindkey -M viins 'jj' vi-cmd-mode\nbindkey \"^I\" menu-complete\nbindkey '^h^h' run-help\nbindkey -s '^o^o' 'vim `zsh -c \"ls -A\" | peco`'\nbindkey -s '^o' \"open -a \"\nbindkey \"^[u\" undo\nbindkey \"^[r\" redo\nbindkey '^]'   vi-find-next-char\nbindkey '^[^]' vi-find-prev-char\nbindkey \"^?\" backward-delete-char\nbindkey -a 'q' push-line\nbindkey \"^p\" history-beginning-search-backward-end\nbindkey \"^n\" history-beginning-search-forward-end\nbindkey \"\\\\ep\" history-beginning-search-backward-end\nbindkey \"\\\\en\" history-beginning-search-forward-end\n\nbindkey '^[[7~' beginning-of-line\nbindkey '^[[8~' end-of-line\nbindkey '^[[2~' overwrite-mode\nbindkey '^[[3~' delete-char\nbindkey '^[[A'  up-line-or-history\nbindkey '^[[B'  down-line-or-history\nbindkey '^[[C'  forward-char\nbindkey '^[[D'  backward-char\nbindkey '^[[5~' history-beginning-search-backward\nbindkey '^[[6~' history-beginning-search-forward\n\n## zaw {{{\nbindkey '^x' zaw\nbindkey '^h' zaw-history\nbindkey '^@' zaw-gitdir\nbindkey '^r' zaw-open-file\nbindkey '^j^j' zaw-cdr\nbindkey '^j^k' zaw-z\n### }}}\n\n### }}}\n\n### function {{{\nex() {\n  if [ -f $1 ] ; then\n    case $1 in\n      *.tar.bz2)   tar xjf $1   ;;\n      *.tar.gz)    tar xzf $1   ;;\n      *.bz2)       bunzip2 $1   ;;\n      *.rar)       unrar x $1     ;;\n      *.gz)        gunzip $1    ;;\n      *.tar)       tar xf $1    ;;\n      *.tbz2)      tar xjf $1   ;;\n      *.tgz)       tar xzf $1   ;;\n      *.zip)       unzip $1     ;;\n      *.Z)         uncompress $1;;\n      *.7z)        7z x $1      ;;\n      *)           echo \"'$1' cannot be extracted via ex()\" ;;\n    esac\n  else\n    echo \"'$1' is not a valid file\"\n  fi\n}\n\ngrepvim() {\n    XFS=`grep -ERUInl $* | uniq | xargs`\n    if [ \"$XFS\" ] ; then\n        vim `grep -ERUInl $* | uniq | xargs`\n    fi\n}\n\nfunction gte() {\ngoogle_translate \"$*\" \"en-ja\"\n}\n\nfunction gtj() {\ngoogle_translate \"$*\" \"ja-en\"\n}\n\nfunction google_translate() {\nlocal str opt cond\n\nif [ $# != 0 ]; then\n    str=`echo $1 | sed -e 's/  */+/g'` # 1\u6587\u5b57\u4ee5\u4e0a\u306e\u534a\u89d2\u7a7a\u767d\u3092+\u306b\u5909\u63db\n    cond=$2\n    if [ $cond = \"ja-en\" ]; then\n        # ja -> en \u7ffb\u8a33\n        opt='?hl=ja&sl=ja&tl=en&ie=UTF-8&oe=UTF-8'\n    else\n        # en -> ja \u7ffb\u8a33\n        opt='?hl=ja&sl=en&tl=ja&ie=UTF-8&oe=UTF-8'\n    fi\nelse\n    opt='?hl=ja&sl=en&tl=ja&ie=UTF-8&oe=UTF-8'\nfi\n\nopt=\"${opt}&text=${str}\"\nw3m +13 \"http://translate.google.com/${opt}\"\n}\nfunction make() {\nLANG=C command make \"$@\" 2>&1 | sed -e \"s@[Ee]rror:.*@$e_RED&$e_normal@g\" -e \"s@cannot\u00a5sfind.*@$e_RED&$e_normal@g\" -e \"s@[Ww]arning:.*@$e_BLUE&$e_normal@g\"\n}\nfunction cwaf() {\nLANG=C command ./waf \"$@\" 2>&1 | sed -e \"s@[Ee]rror:.*@$e_RED&$e_normal@g\" -e \"s@cannot\u00a5sfind.*@$e_RED&$e_normal@g\" -e \"s@[Ww]arning:.*@$e_BLUE&$e_normal@g\"\n}\n\nexpand-to-home-or-insert () {\n    if [ \"$LBUFFER\" = \"\" -o \"$LBUFFER[-1]\" = \" \" ]; then\n        LBUFFER+=\"~/\"\n    else\n        zle self-insert\n    fi\n}\n\nfunction separate(){\necho -n $fg_bold[yellow]\nfor i in $(seq 1 $COLUMNS); do\n    echo -n '~'\ndone\necho -n $reset_color\n}\n\nfunction vol(){\nosascript -e \"set Volume ${1}\"\n}\nfunction manowar () {\nmpc volume 100\namixer set PCM 100%\n}\nfunction torrent-search(){w3m \"http://torrentz.eu/search?f=$1\"}\nfunction vmu(){VBoxManage storageattach $1 --storagectl ${1}sata1 --port 2 --type dvddrive --medium emptydrive}\nfunction exdel(){exiftool -overwrite_original -all= $1}\n\nfunction zman() {\nPAGER=\"less -g -s '+/^       \"$1\"'\" man zshall\n}\n\nfunction ccleaner(){\nwhich ccleaner.scpt | xargs osascript &\nopen -a iterm2-f\n}\n\nfunction gif_make(){\ngm convert *.png hoge.gif\nrm *.png\n}\n\nfunction markpre(){\nwatchmedo shell-command -c \"qlmanage -p $1\" $HOME/blog/\n}\n\nfunction wifi(){\nif networksetup -getairportnetwork en0 | grep off; then\n    echo on\n    networksetup -setairportpower en0 on\nelse\n    echo off\n    networksetup -setairportpower en0 off\nfi\n}\n\nfunction aunpack-all(){for i in `ls *.$1`;do aunpack $i;done}\n\nfunction twitter () {\nosascript -e 'tell application \"Twitter\" to close window 1'\n}\n\nfunction unrar-all (){\nfor i in *.part1.rar\ndo\n    unrar e -o+ $i\ndone\n}\n\n### git init {{{\n#touch README.md\n#git init\n#git add README.md\n#git commit -m \"first commit\"\n#git remote add origin https://github.com/syui/syui.github.io.git\n#git push -u origin master\n### }}}\n\nfunction gitinit(){\necho -n username:\nuser=`echo $USER`\nrepo=`echo $PWD:t`\nrepo_j={\\\"name\\\":\\\"$repo\\\"}\nurl=\"https://github.com/\"$user/$repo.git\ncurl -u $user https://api.github.com/user/repos -d $repo_j\ncase $? in\n    0)\n        rm -rf .git\n        rm -rf .DS_Store\n        git init\n        echo $url\n        git remote add origin $url\n        git add .\n        git commit --allow-empty -m \"noun\"\n        git push -u origin master\n        ;;\nesac\n}\n\nglobalias() {\n    if [[ $LBUFFER =~ ' [A-Z0-9]+$' ]]; then\n        zle _expand_alias\n        zle expand-word\n    fi\n    zle self-insert\n}\nzle -N globalias\nbindkey \" \" globalias\nbindkey \"^ \" magic-space           # control-space to bypass completion\nbindkey -M isearch \" \" magic-space # normal space during searches\n\n\n#function help-peco (){\n#  s=`run-help | tail -n +2 | tr ' ' '\\n' | sed '/^$/d' | peco`\n#  man $s\n#}\n#zle -N help-peco\n\nfunction au(){\ncase $1 in\n    -o|*)\n        SwitchAudioSource -a | grep output | cut -d '(' -f 1 | sed -e 's/ *$//' -e 's/$/\"/g' -e 's/^/\"/g' | peco | xargs -J % SwitchAudioSource -s %\n        ;;\n    -i)\n        SwitchAudioSource -a | grep input | cut -d '(' -f 1 | sed -e 's/ *$//' -e 's/$/\"/g' -e 's/^/\"/g' | peco | xargs -J % SwitchAudioSource -t input -s %\n        ;;\nesac\n#zle reset-prompt\n}\nzle -N au\nbindkey '\\^^' au\n\n### }}}\n\n### google {{{\n\nfunction google-search() {\nlocal str opt\nif [ $ != 0 ]; then\n    for i in $*; do\n        str=\"$str+$i\"\n    done\n    str=`echo $str | sed 's/^\\+//'`\n    opt='search?num=50&hl=ja&lr=lang_ja'\n    opt=\"${opt}&q=${str}\"\nfi\nw3m http://www.google.co.jp/$opt\n}\n\nfunction goy() {\nlocal str opt\nif [ $ != 0 ]; then\n    for i in $*; do\n        str=\"$str+$i\"\n    done\n    str=`echo $str | sed 's/^\\+//'`\n    opt='search?num=50&hl=ja&lr=lang_ja'\n    opt=\"${opt}&q=${str}\"\n    tbs='&tbs=qdr:y'\nfi\nw3m http://www.google.co.jp/$opt$tbs\n}\n\nfunction gom() {\nlocal str opt\nif [ $ != 0 ]; then\n    for i in $*; do\n        str=\"$str+$i\"\n    done\n    str=`echo $str | sed 's/^\\+//'`\n    opt='search?num=50&hl=ja&lr=lang_ja'\n    opt=\"${opt}&q=${str}\"\n    tbs='&tbs=qdr:m'\nfi\nw3m http://www.google.co.jp/$opt$tbs\n}\n\n# w3m\u3067ALC\u691c\u7d22\nfunction alc() {\nif [ $ != 0 ]; then\n    w3m \"http://eow.alc.co.jp/$*/UTF-8/?ref=sa\"\nelse\n    w3m \"http://www.alc.co.jp/\"\nfi\n}\n\n\n\n#>>>\nfunction youtube-post(){\nmkdir -p ~/Movies/youtube\ngoogle youtube post ~/Movies/youtube/*.mp4 --category People --tags \"blog\"\ngoogle youtube list --delimiter ','\n}\n\nfunctions mod(){\nmkdir ~/Music/speed\ncd ~/Music/speed && touch mylist.test && rm mylist* && mylist && mplayer -playlist mylist -speed 2 -af scaletempo,volnorm\n}\n\n# w3m\u3067youtube\u691c\u7d22\nfunction youtube-search() {\nif [ $ != 0 ]; then\n    w3m \"http://www.youtube.com/results?search_query=$*&search_type=&aq=f\"\nelse\n    w3m \"http://youtube.com/\"\nfi\n}\n\n# google books\u306e\u691c\u7d22\nfunction book-search() {\nlocal str opt\nif [ $ != 0 ]; then\n    for i in $*; do\n        str=\"$str+$i\"\n    done\n    str=`echo $str | sed 's/^\\+//'`\n    opt='search?lr=lang_ja&hl=JA&tbo=p&tbm=bks&tbs=,bkv:p&num=10'\n    opt=\"${opt}&q=${str}\"\nfi\nw3m http://www.google.co.jp/$opt\n}\n\nfunction exmap (){\nstr=`exiftool -c \"%.6f\" -GPSPosition ${1} | sed -e 's/GPS Position//' -e 's/://' -e 's/E//'  -e 's/S//' -e 's/W//' -e 's/N//' -e 's/ //g'`\nopen -a Google\\ Chrome \"https://maps.google.co.jp/maps?q=$str\"\n}\n\nfunction chrome() {\nlocal str opt\nif [ $ != 0 ]; then\n    for i in $*; do\n        str=\"$str+$i\"\n    done\n    str=`echo $str | sed 's/^\\+//'`\n    opt='search?num=50&hl=ja&lr=lang_ja'\n    opt=\"${opt}&q=${str}\"\nfi\nopen -a Google\\ Chrome http://www.google.co.jp/$opt\n}\n\nfunction google_translate() {\nlocal str opt arg\n\nstr=`pbpaste` # clipboard\narg=`echo ${@:2} | sed -e 's/  */+/g'` # argument\nen_jp=\"?hl=ja&sl=en&tl=ja&ie=UTF-8&oe=UTF-8\" # url\n\ncase \"$1\" in\n    \"-j\") opt=\"?hl=ja&sl=ja&tl=en&ie=UTF-8&oe=UTF-8&text=${arg}\";; # jp -> en translate\n\"-e\") opt=\"${en_jp}&text=${arg}\";; # en -> jp translate\n        *) opt=\"${en_jp}&text=${str}\";; # en -> jp translate\n    esac\n\n    w3m +20 \"http://translate.google.com/${opt}\"  # goto 20 line\n}\n\n# blogger\nfunction bp(){\n    TITLE=\"$(awk 'NR==1' $1)\"\n    TAG=\"$(awk 'NR==2' $1)\"\n    sed -ie 1,2d $1\n    google blogger post --blog \"MBA-HACK\" --title \"${TITLE}\" --tags \"${TAG}\" $1\n    url=`google blogger list url --title \"${TITLE}\" | cut -d , -f 2`\n    open -a Google\\ Chrome $url\n}\n\n\n\nfunction got(){\nw3m \"http://www.google.co.jp/search?num=50&hl=ja&lr=lang_ja&q=$2&tbs=qdr:${1}\"\n}\n\nfunction img-search () {\ndir=~/Downloads/pic\nmkdir -p $dir\nword=`echo $1 | ruby -r cgi -ne 'puts CGI.escape $_.chomp'`\necho $word\nurl=`curl \"http://ajax.googleapis.com/ajax/services/search/images?q=$word&v=1.0&safe=active&imgsz=xxlarge&rsz=large\" | jq -r '.responseData.results [] .url'`\ncou=`echo $url | wc -l | tr -d ' '`\n\nfor (( i=1;i<$cou;i++ ))\ndo\n    urlo=`echo $url | awk \"NR==$i\"`\n    file=${urlo##*/}\n    curl $urlo -o $dir/$file\ndone\n\nqlmanage -p $dir/*\nfile=`zsh -c \"ls -A $dir\" | peco`\nurl=`echo $url | grep $file`\necho $url | pbcopy && pbpaste\nrm -rf $dir\n\n}\n\n\n\n### }}}\n\n### prompt {{{\n\nsource $PLUGIN/powerline.zsh\n\n## default {{{\n\n#case $OSTYPE in\n#linux*)\n#  TMUX_POWERLINE_SEPARATOR_LEFT_BOLD=\"\u25c0\"\n#  TMUX_POWERLINE_SEPARATOR_LEFT_THIN=\"\u276e\"\n#  TMUX_POWERLINE_SEPARATOR_RIGHT_BOLD=\"\u25b6\"\n#  TMUX_POWERLINE_SEPARATOR_RIGHT_THIN=\"\u276f\"\n#  TMUX_POWERLINE_GIT=\"\u24e6\"\n#;;\n#darwin*)\n#  TMUX_POWERLINE_SEPARATOR_LEFT_BOLD=\"\u2b82\"\n#  TMUX_POWERLINE_SEPARATOR_LEFT_THIN=\"\u2b83\"\n#  TMUX_POWERLINE_SEPARATOR_RIGHT_BOLD=\"\u2b80\"\n#  TMUX_POWERLINE_SEPARATOR_RIGHT_THIN=\"\u2b81\"\n#  TMUX_POWERLINE_GIT=\"\u2b60\"\n#;;\n#esac\n#setopt prompt_subst\n#setopt prompt_percent\n#setopt transient_rprompt\n#\n#color256()\n#{\n#  local red=$1; shift\n#  local green=$2; shift\n#  local blue=$3; shift\n#\n#  echo -n $[$red * 36 + $green * 6 + $blue + 16]\n#}\n#\n#fg256()\n#{\n#  echo -n $'\\e[38;5;'$(color256 \"$@\")\"m\"\n#}\n#\n#bg256()\n#{\n#  echo -n $'\\e[48;5;'$(color256 \"$@\")\"m\"\n#}\n#\n#zstyle ':vcs_info:*' max-exports 3\n#zstyle ':vcs_info:hg:*' get-revision true\n#zstyle ':vcs_info:hg:*' use-simple true\n#\n#autoload -Uz is-at-least\n#zstyle ':vcs_info:git:*' check-for-changes true\n#zstyle ':vcs_info:git:*' stagedstr \"-\"\n#zstyle ':vcs_info:git:*' unstagedstr \"${TMUX_POWERLINE_GIT}\"\n#zstyle ':vcs_info:*' actionformats '[%b|%a]'\n#\n#zstyle ':vcs_info:git:*' formats '%{%k%f%}%F{black}%K{green}${TMUX_POWERLINE_SEPARATOR_RIGHT_BOLD}%F{white}%K{green} %s %f%k%K{blue}%F{green}${TMUX_POWERLINE_SEPARATOR_RIGHT_BOLD}%k%f%%F{white}%K{blue} %b %f%k%K{black}%F{blue}${TMUX_POWERLINE_SEPARATOR_RIGHT_BOLD}%k%f%%F{white}%K{black} %c%u %f%k'\n#\n#autoload -Uz vcs_info\n#\n#prompt_bar_left_self=\"%{%F{white}%K{020}%} %n%{%k%f%}%{%F{white}%K{020}%}@%{%k%f%}%{%F{white}%K{020}%}%m %{%k%f%}%{%B%F{020}%K{020}%}%{%b%f%k%}%K{026}%F{blue}${TMUX_POWERLINE_SEPARATOR_RIGHT_BOLD}%k%f%{%B%F{white}%K{026}%}  [%~]  %{%k%f%b%}%{%k%f%}%K{069}%F{026}${TMUX_POWERLINE_SEPARATOR_RIGHT_BOLD}%k%f%(?.%F{white}%K{069}%}`w | grep user, | cut -d , -f 2` %k%f.%B%K{069}%F{red}%}`w | grep user, | cut -d , -f 2` %b%k%f)%{%K{045}%F{069}${TMUX_POWERLINE_SEPARATOR_RIGHT_BOLD}%k%f%F{white}%K{045}%} %h  %{%k%f%}%K{black}%F{045}${TMUX_POWERLINE_SEPARATOR_RIGHT_BOLD}%k%f\"\n#\n#prompt_bar_left=\"${prompt_bar_left_self} ${prompt_bar_left_status} ${prompt_bar_left_date}\"\n#prompt_left='%{%F{white}%K{black}%}  $SHELL  %{%k%f%}%{%K{white}%F{black}${TMUX_POWERLINE_SEPARATOR_RIGHT_BOLD}%k%f%B%F{black}%K{white}%} %# ${p_buffer_stack} %{%b%k%f%f%}%K{black}%F{white}${TMUX_POWERLINE_SEPARATOR_RIGHT_BOLD}%k%f >  '\n#\n#count_prompt_characters()\n#{\n#  print -n -P -- \"$1\" | sed -e $'s/\\e\\[[0-9;]*m//g' | wc -m | sed -e 's/ //g'\n#}\n#\n#update_prompt()\n#{\n#  local bar_left_length=$(count_prompt_characters \"$prompt_bar_left\")\n#  local bar_rest_length=$[COLUMNS - bar_left_length]\n#  local stash\n#  stash=\"stash \"$(git stash list 2>/dev/null | wc -l | tr -d ' ')\n#  local ahead\n#  ahead=\"push \"$(git rev-list origin/master..master 2>/dev/null \\\n#    | wc -l \\\n#    | tr -d ' ')\n#  stash=\"%K{013}%F{black}${TMUX_POWERLINE_SEPARATOR_RIGHT_BOLD}%k%f%{%k%f%}%{%F{white}%K{013}%} $stash %{%k%f%}%F{013}%K{blue}${TMUX_POWERLINE_SEPARATOR_RIGHT_BOLD}%k%f%{%k%f%}%{%F{white}%K{blue}%} $ahead %{%k%f%}%F{blue}%K{green}${TMUX_POWERLINE_SEPARATOR_RIGHT_BOLD}\"\n#  local stad\n#  # stash \u3092\u6709\u52b9\u306b\u3059\u308b\n#  #stad=$stash\n#  local bar_left=\"$prompt_bar_left\"$stad\n#  local bar_right_without_path=\"${prompt_bar_right:s/%d//}\"\n#  local bar_right_without_path_length=$(count_prompt_characters \"$bar_right_without_path\")\n#  bar_right=${prompt_bar_right:s/%d/%(C,%${max_path_length}<...<%d%<<,)/}\n#  bar_right=\"%${bar_rest_length}<<${separator}${bar_right}%<<\"\n#  prompt_bar_left_2=\"%K{white}%F{black}${TMUX_POWERLINE_SEPARATOR_RIGHT_BOLD}%k%f%{%F{black}%K{white}%} %l %K{black}%F{white}${TMUX_POWERLINE_SEPARATOR_RIGHT_BOLD}%k%f%{%k%f%}%{%F{white}%K{black}%}  $LANG  %{%k%f%}%F{black}${TMUX_POWERLINE_SEPARATOR_RIGHT_BOLD}\"\n#\n#  PROMPT=\"${bar_left}${bar_right}${prompt_bar_left_2}\"$'\\n'\"${prompt_left}\"\n#\n#  case \"$TERM_PROGRAM\" in\n#    Apple_Terminal)\n#      PROMPT=\"${PROMPT}\"\n#      ;;\n#  esac\n#\n#  LANG=C vcs_info >&/dev/null\n#  if [ -n \"$vcs_info_msg_0_\" ]; then\n#    PROMPT=\"${bar_left}${bar_right}${vcs_info_msg_0_}${prompt_bar_left_2}\"$'\\n'\"${prompt_left}\"\n#  fi\n#}\n#\n#precmd_functions=($precmd_functions update_prompt)\n#\n## }}}\n\n### vi-mode {{{\n#EMACS_INSERT=`bindkey -lL main | cut -d ' ' -f 3`\n#if bindkey -lL main | cut -d ' ' -f 3 | grep emacs > /dev/null 2>&1;then\n#    EMACS_INSERT=\"%K{black}%F{011}${TMUX_POWERLINE_SEPARATOR_LEFT_BOLD}%k%f%K{011}%F{034} % $EMACS_INSERT %k%f\"\n#    VIM_INSERT=\"%K{011}%F{075}${TMUX_POWERLINE_SEPARATOR_LEFT_BOLD}%k%f%K{075}%F{026} % INSERT %k%f%K{075}%F{black}${TMUX_POWERLINE_SEPARATOR_LEFT_BOLD}%k%f\"\n#else\n#    EMACS_INSERT=\"%K{black}%F{034}${TMUX_POWERLINE_SEPARATOR_LEFT_BOLD}%k%f%K{034}%F{011} % $EMACS_INSERT %k%f\"\n#    VIM_INSERT=\"%K{034}%F{075}${TMUX_POWERLINE_SEPARATOR_LEFT_BOLD}%k%f%K{075}%F{026} % INSERT %k%f%K{075}%F{black}${TMUX_POWERLINE_SEPARATOR_LEFT_BOLD}%k%f\"\n#fi\n##VIM_INSERT=\"%K{034}%F{075}${TMUX_POWERLINE_SEPARATOR_LEFT_BOLD}%k%f%K{075}%F{026} % INSERT %k%f%K{075}%F{black}${TMUX_POWERLINE_SEPARATOR_LEFT_BOLD}%%k%f\"\n#RPROMPT=\"$EMACS_INSERT$VIM_INSERT\"\n#function zle-keymap-select {\n#EMACS_INSERT=`bindkey -lL main | cut -d ' ' -f 3`\n#if echo $EMACS_INSERT | grep emacs > /dev/null 2>&1;then\n#  EMACS_INSERT=\"%K{black}%F{011}${TMUX_POWERLINE_SEPARATOR_LEFT_BOLD}%k%f%K{011}%F{034} % $EMACS_INSERT %k%f\"\n#  VIM_NORMAL=\"%K{011}%F{125}${TMUX_POWERLINE_SEPARATOR_LEFT_BOLD}%k%f%K{125}%F{015} % NORMAL %k%f%K{125}%F{black}${TMUX_POWERLINE_SEPARATOR_LEFT_BOLD}%k%f\"\n#  VIM_INSERT=\"%K{011}%F{075}${TMUX_POWERLINE_SEPARATOR_LEFT_BOLD}%k%f%K{075}%F{026} % INSERT %k%f%K{075}%F{black}${TMUX_POWERLINE_SEPARATOR_LEFT_BOLD}%k%f\"\n#else\n#  EMACS_INSERT=\"%K{black}%F{034}${TMUX_POWERLINE_SEPARATOR_LEFT_BOLD}%k%f%K{034}%F{011} % $EMACS_INSERT %k%f\"\n#  VIM_NORMAL=\"%K{034}%F{125}${TMUX_POWERLINE_SEPARATOR_LEFT_BOLD}%k%f%K{125}%F{015} % NORMAL %k%f%K{125}%F{black}${TMUX_POWERLINE_SEPARATOR_LEFT_BOLD}%k%f\"\n#  VIM_INSERT=\"%K{034}%F{075}${TMUX_POWERLINE_SEPARATOR_LEFT_BOLD}%k%f%K{075}%F{026} % INSERT %k%f%K{075}%F{black}${TMUX_POWERLINE_SEPARATOR_LEFT_BOLD}%k%f\"\n#fi\n#RPROMPT=\"$EMACS_INSERT${${KEYMAP/vicmd/$VIM_NORMAL}/(main|viins)/$VIM_INSERT}\"\n#zle reset-prompt\n#}\n#zle -N zle-keymap-select\n\n#function airchrome-bindmode-emacs () {\n#bindkey -e\n#EMACS_INSERT=`bindkey -lL main | cut -d ' ' -f 3`\n#if echo $EMACS_INSERT | grep emacs > /dev/null 2>&1;then\n#  EMACS_INSERT=\"%K{black}%F{011}${TMUX_POWERLINE_SEPARATOR_LEFT_BOLD}%k%f%K{011}%F{034} % $EMACS_INSERT %k%f\"\n#  VIM_NORMAL=\"%K{011}%F{125}${TMUX_POWERLINE_SEPARATOR_LEFT_BOLD}%k%f%K{125}%F{015} % NORMAL %k%f%K{125}%F{black}${TMUX_POWERLINE_SEPARATOR_LEFT_BOLD}%k%f\"\n#  VIM_INSERT=\"%K{011}%F{075}${TMUX_POWERLINE_SEPARATOR_LEFT_BOLD}%k%f%K{075}%F{026} % INSERT %k%f%K{075}%F{black}${TMUX_POWERLINE_SEPARATOR_LEFT_BOLD}%k%f\"\n#else\n#  EMACS_INSERT=\"%K{black}%F{011}${TMUX_POWERLINE_SEPARATOR_LEFT_BOLD}%k%f%K{011}%F{034} % $EMACS_INSERT %k%f\"\n#  VIM_NORMAL=\"%K{011}%F{125}${TMUX_POWERLINE_SEPARATOR_LEFT_BOLD}%k%f%K{125}%F{015} % NORMAL %k%f%K{125}%F{black}${TMUX_POWERLINE_SEPARATOR_LEFT_BOLD}%k%f\"\n#  VIM_INSERT=\"%K{011}%F{075}${TMUX_POWERLINE_SEPARATOR_LEFT_BOLD}%k%f%K{075}%F{026} % INSERT %k%f%K{075}%F{black}${TMUX_POWERLINE_SEPARATOR_LEFT_BOLD}%k%f\"\n#fi\n#RPS1=\"$EMACS_INSERT${${KEYMAP/vicmd/$VIM_NORMAL}/(main|viins)/$VIM_INSERT}\"\n#RPS2=$RPS1\n#zle reset-prompt\n#}\n#zle -N airchrome-bindmode-emacs\n#bindkey -v '^e' airchrome-bindmode-emacs\n#bindkey -a '^e' airchrome-bindmode-emacs\n#\n#function airchrome-bindmode-vi () {\n#bindkey -v\n#EMACS_INSERT=`bindkey -lL main | cut -d ' ' -f 3`\n#if echo $EMACS_INSERT | grep emacs > /dev/null 2>&1;then\n#  EMACS_INSERT=\"%K{black}%F{011}${TMUX_POWERLINE_SEPARATOR_LEFT_BOLD}%k%f%K{011}%F{034} % $EMACS_INSERT %k%f\"\n#  VIM_NORMAL=\"%K{011}%F{125}${TMUX_POWERLINE_SEPARATOR_LEFT_BOLD}%k%f%K{125}%F{015} % NORMAL %k%f%K{125}%F{black}${TMUX_POWERLINE_SEPARATOR_LEFT_BOLD}%k%f\"\n#  VIM_INSERT=\"%K{011}%F{075}${TMUX_POWERLINE_SEPARATOR_LEFT_BOLD}%k%f%K{075}%F{026} % INSERT %k%f%K{075}%F{black}${TMUX_POWERLINE_SEPARATOR_LEFT_BOLD}%k%f\"\n#else\n#  EMACS_INSERT=\"%K{black}%F{034}${TMUX_POWERLINE_SEPARATOR_LEFT_BOLD}%k%f%K{034}%F{011} % $EMACS_INSERT %k%f\"\n#  VIM_NORMAL=\"%K{034}%F{125}${TMUX_POWERLINE_SEPARATOR_LEFT_BOLD}%k%f%K{125}%F{015} % NORMAL %k%f%K{125}%F{black}${TMUX_POWERLINE_SEPARATOR_LEFT_BOLD}%k%f\"\n#  VIM_INSERT=\"%K{034}%F{075}${TMUX_POWERLINE_SEPARATOR_LEFT_BOLD}%k%f%K{075}%F{026} % INSERT %k%f%K{075}%F{black}${TMUX_POWERLINE_SEPARATOR_LEFT_BOLD}%k%f\"\n#fi\n#RPS1=\"$EMACS_INSERT${${KEYMAP/vicmd/$VIM_NORMAL}/(main|viins)/$VIM_INSERT}\"\n#RPS2=$RPS1\n#zle reset-prompt\n#}\n#zle -N airchrome-bindmode-vi\n#bindkey -e '^v' airchrome-bindmode-vi\n#### }}}\n### }}}\n\n### media {{{\n\ncase $OSTYPE in\n\ndarwin*)\n\nfunction nico_mylist(){\nurl=`ls -A . | grep Nico | cut -d ':' -f 2 | sed -e 's/GINZA-//g' -e \"s/\\.[^.]*$//\" | tr '\\n' ' '`\ndata=`date +\"%Y_%m_%d\"`\necho \"nico_mylist.py $data $url\" | pbcopy && pbpaste\n}\n\nfunction nico_chrome(){\nword1=\"GINZA-\"\nurl=`zsh -c \"ls -A . | grep Niconico | cut -d ':' -f 2\"`\nurl=`echo $url | sed -e \"s/$word1/http:\\/\\/www.nicovideo.jp\\/watch\\//g\" -e \"s/\\.[^.]*$//\"`\nline=`echo $url | wc -l | tr -d ' '`\nfor (( i = $line; i > 0; i-- )) do\n    murl=`echo $url | awk \"NR==$i\"`\n    echo $murl\n    open -a Google\\ Chrome \"$murl\"\ndone\n}\n\nfunction picasa(){\n    dirp=~/Pictures/picasa\n    dirc=github\n    qlmanage -p ${dirp}/*\n    exiftool -overwrite_original -all= $dirp\n    case $1 in\n       \"\")\n            #google picasa post -n \"$dirc\" ~/Pictures/picasa/*.png\n            list=`google picasa list \"$dirc\" --delimiter \" \" --fields url-direct`\n            numb=`bash -c \"ls -A $dirp\" | wc -l | tr -d ' '`\n            echo \"$list\" | tail -n $numb | pbcopy && pbpaste\n    ;;\n    esac\n    rm -rf $dirp > /dev/null 2>&1\n    mkdir -p $dirp\n}\n\nfunction chrome_done_reload (){\nosascript << EOF && osascript -e 'tell application \"Google Chrome\" to close first tab of window 1'\ntell application \"Google Chrome\"\nrepeat while loading of active tab of window 1\ndelay 0.1\nend repeat\nactivate\nend tell\nEOF\n\ncat << EOF | osascript | tr ',' \"\\n\"\ntell application \"Google Chrome\"\nset pageURI to get URL of tab of window 1\nset pageTitle to get title of tab of window 1\nreturn pageTitle & space & pageURI\nend tell\nEOF\n}\n\nfunction ffg (){\nbas=`cat << EOF | peco | tr -d ' '\nmp4 -> mp3\nflv -> mp3\nswf -> mp3\nmp3 -> wav\nflv -> wav\nmov -> gif\njpg -> png\nbmp -> png\nEOF` > /dev/null 2>&1\n\ninp=`echo $bas | cut -d '-' -f 1`\noup=`echo $bas | cut -d '>' -f 2`\n\ncase $inp in\n\n    swf)\n        for i in *.${inp}; do swfextract -m $i -o ${i%.swf}.mp3; done\n    ;;\n\n    mov)\n        for i in *.${inp}; do ffmpeg -i *.mov -r 8 %04d.png && gm convert *.png ${i%.*}.gif && rm *.png; done\n    ;;\n\n    jpg)\n        mogrify -format png -quality 100 *.jpg\n    ;;\n\n    bmp)\n        mogrify -format png -quality 100 *.bmp\n    ;;\n\n    *)\n        for i in *.${inp}; do ffmpeg -i $i -vn ${i%.*}.${oup}; done\n    ;;\n\nesac\n}\n\nalias mun='cd ~/Music/new && touch mylist.test && rm mylist* && mylist && mplayer -playlist mylist -novideo -loop 20 -quiet -msglevel all=0 -identify | grep FILE'\n\nfunction ms (){\ndir1=$HOME/Music\nfile=${0:a:t}\nloop=20\nspeed=2\n\nplay=`ps | grep mplayer -s | wc -l | tr -d ' '`\n\ncase $play in\n    \"\"|1)\n        sea=\"ID_FILENAME\"\n        dir=\"$dir1/\"`zsh -c \"ls -A $dir1 | peco\"`\n        com=\"mplayer -speed $speed -af scaletempo,volnorm -novideo -loop $loop -quiet -msglevel all=0 -identify $dir/*\"\n        com=\"${com} | grep $sea\"\n        eval $com\n    ;;\n    *)\n        pkill mplayer > /dev/null 2>&1\n    ;;\nesac\n}\n\n## twitter\nfunction tweetvim (){\n    case $1 in\n        \"\")\n            vim +TweetVimUserTimeline\n        ;;\n        t)\n            vim +TweetVimSay\n        ;;\n        m)\n            vim +TweetVimMentions +/@\n        ;;\n        l)\n            vim -c \"TweetVimListStatuses fav\" +/http\n        ;;\n        $USER)\n            vim -c \"TweetVimUserTimeline syui__\"\n        ;;\n\n    esac\n}\n\nalias qiita-line=\"curl -I 'https://qiita.com/api/v1/items.json'\"\nalias lingr=\"vim +J6uil +J6uilStartNotify\"\nalias iTunes='open -a iTunes'\nalias youtube.py='~/youtube-cli/youtube.py'\nalias html2text='python ~/html2text/html2text.py'\nalias mylist='find `pwd` -maxdepth 1 -mindepth 1 | grep -v \"\\/\\.\" > mylist'\nalias ch=\"open -a Google\\ Chrome --args --gpu-startup-dialog --disable-java --disable-background-mode --renderer-process-limit=2\"\nalias fu=\"~/dotfiles/fu/fu\"\nalias keepass=\"~/pull/airkeepass/airkeepass\"\nalias anime=\"~/script/anitube-cli/anitube-cli\"\nalias hatena=\"~/script/hatena-cli/hatena-cli\"\nalias nicovideo='nicovideo-dl -t -n'\n;;\n\nesac\n### }}}\n\n### os {{{\ncase $OSTYPE in\nlinux*)\n        bindkey -v\n        export CLICOLOR=1\n        export LSCOLORS=ExFxCxDxBxegedabagacad\n        export PATH\n        # man path\n        MANPATH=/usr/local/man:$MANPATH\n        export MANPATH\n        INFOPATH=/usr/local/info:$INFOPATH\n        export INFOPATH\n\n        # Java\n        export JAVA_HOME=/usr/java/default\n        export PATH=$JAVA_HOME/bin:$PATH\n\n        # Maven2\n        export MAVEN_HOME=/usr/local/apache-maven-2.2.1\n        export PATH=$MAVEN_HOME/bin:$PATH\n        export MAVEN_OPTS=-Xmx1024M\n\n        #rvm\n        if [[ -s $HOME/.rvm/scripts/rvm ]] ; then source $HOME/.rvm/scripts/rvm ; fi\n\n        export PATH=$PATH:$HOME/.gem/ruby/1.8/bin\n\n        #alias\n        alias ls='ls -alh --color'\n        alias vim=\"/usr/bin/vim\"\n        alias v=\"/usr/bin/vim\"\n\n        ;;\n\ndarwin*)\n        zle -N expand-to-home-or-insert\n        bindkey -v\n        bindkey \"@\"  expand-to-home-or-insert\n        export PATH=/usr/local/bin:/usr/local/sbin:$PATH\n        export PATH=/opt/local/bin:/opt/local/sbin:~/bin:$PATH\n\n        # osx alias\n        alias pbc='pbcopy'\n        alias vo='osascript -e \"set Volume 0.00001\"'\n        # Terminal Color\u306e\u8a2d\u5b9a\n        export CLICOLOR=1\n        export LSCOLORS=ExFxCxDxBxegedabagacad\n\n        ## vim\n        export EDITOR=/Applications/MacVim.app/Contents/MacOS/Vim\n        alias vi='/opt/local/bin/vim'\n        alias vim='env LANG=ja_JP.UTF-8 /Applications/MacVim.app/Contents/MacOS/Vim \"$@\"'\n        alias v='env LANG=ja_JP.UTF-8 /Applications/MacVim.app/Contents/MacOS/Vim \"$@\"'\n\n        ##Java7\n        export JAVA_HOME=/Library/Java/JavaVirtualMachines/1.7.0.jdk/Contents/Home\n        # export JAVA_HOME=/Library/Java/Home\n        export PATH=$JAVA_HOME/bin:$PATH\n        # \u30c7\u30d5\u30a9\u30eb\u30c8\u30a8\u30f3\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0SJIS\u3092UTF-8\u3078\n        export _JAVA_OPTIONS=\"-Dfile.encoding=UTF-8\"\n\n        # haskell\n        export PATH=/Users/ozaki/Library/Haskell/bin:$PATH\n\n        # scala\n        export SCALA_HOME=/Users/ozaki/.svm/current/rt\n        PATH=$SCALA_HOME/bin:$PATH\n        export SCALA_DOC_HOME=$SCALA_HOME/../devel-docs/api/\n        export SCALA_CLASSPATH=~/sandbox/scala/yuroyoro/yuroyoro-util/target/yuroyoro-util-1.0.jar\n\n        # Ant\n        export ANT_VERSION=1.8.0\n        export ANT_HOME=~/dev/Tools/apache-ant-${ANT_VERSION}\n        export ANT_OPTS=-Xmx1g\n        export PATH=$ANT_HOME/bin:$PATH\n\n        # Maven2\n        export MAVEN_VERSION=2.2.1\n        export MAVEN_HOME=~/dev/Tools/apache-maven-${MAVEN_VERSION}\n        export PATH=$MAVEN_HOME/bin:$PATH\n        export MAVEN_OPTS=-Xmx1024M\n\n        # man path\n        MANPATH=/usr/local/man:$MANPATH\n        export MANPATH\n        INFOPATH=/usr/local/info:$INFOPATH\n        export INFOPATH\n\n        # Mysql\n        export MYSQL_HOME=/usr/local/mysql\n        export PATH=$MYSQL_HOME/bin:$PATH\n        alias h2db='java -cp ~/.m2/repository/com/h2database/h2/1.1.112/h2-1.1.112.jar org.h2.tools.Server'\n\n        # STAX SDK\n        export STAX_HOME=~/dev/Project/sandbox/stax-sdk-0.2.11\n        export PATH=$PATH:$STAX_HOME\n\n        # Adobe AIR\n        export AIR_HOME=~/dev/air\n        export FLEX_HOME=~/dev/flex\n        export PATH=$PATH:$AIR_HOME/bin:$FLEX_HOME/bin\n        export GAE_SDK_VERSION=1.3.4\n        GAE_SDK_INSTALLED_DIR=~/sandbox/GoogleAppEngine/sdk\n        export GAE_HOME=$GAE_SDK_INSTALLED_DIR/$GAE_SDK_VERSION/google_appengine\n        export PATH=$PATH:$GAE_HOME\n        export GAEJ_SDK_VERSION=1.3.7\n        GAEJ_SDK_INSTALLED_DIR=~/sandbox/GAEJava/sdk\n        export GAEJ_HOME=$GAEJ_SDK_INSTALLED_DIR/appengine-java-sdk-$GAEJ_SDK_VERSION\n        export PATH=$PATH:$GAEJ_HOME/bin\n        export REFE_DATA_DIR=/System/Library/Frameworks/Ruby.framework/Versions/1.8/usr/share/refe\n        export GOROOT=$HOME/dev/go\n        export GOOS=darwin\n        export GOARCH=386\n        export PATH=$PATH:$GOROOT/bin\n        export NODE_PATH=/usr/local/lib/node:$PATH\n        export PATH=/usr/local/share/npm/bin:$PATH\n        export JRUBY_HOME=$HOME/sandbox/jruby/jruby-1.5.2\n        export PATH=$PATH:$JRUBY_HOME/bin\n        export MIRAH_HOME=$HOME/sandbox/mirah/mirah\n        export PATH=$PATH:$MIRAH_HOME/bin\n        alias tma='tmux attach'\n        alias tml='tmux list-window'\n        ;;\nesac\n\n### font {{{\ncase $OSTYPE in\n    linux*)\n        if ! fc-list | grep DejaVuSans > /dev/null 2>&1;then\n            sudo pacman -S ttf-dejavu\n        fi\n    ;;\n    darwin*)\n        if ! ls ~/Library/Fonts/Ricty* > /dev/null 2>&1;then\n            brew tap sanemat/font\n            brew install ricty\n            brew install fontforge\n            cp -f /usr/local/opt/ricty/share/fonts/Ricty*.ttf ~/Library/Fonts/\n            #fc-cache -vf\n        fi\n    ;;\nesac\n### }}}\n### }}}\n\n#{\n#  \"to-do\" : {\n#    \"os\" : [ \"coreos\", \"docker\", \"vagrant\", \"awesome\", \"conky\" ],\n#    \"terminal\" : [ \"cygwin\", \"powershell\", \"vim\", \"tmux\", \"git\" ],\n#    \"tool\" : [ \"dwb\", \"spacefm\", \"growl\", \"ffmpeg\", \"imagemagick\", \"googlecl\", \"keepass\", \"jq\", \"canto\", \"nc\", \"ssh\", \"mosh\", \"nmap\", \"weechat\", \"metasploit\", \"wireshark\" ],\n#    \"lang\" : [ \"c++\", \"python\", \"ruby\", \"lua\", \"go\", \"scala\", \"typescript\", \"perl\", \"sass\", \"slim\", \"node.js\", \"swift\", \"gauche\" ]\n#  }\n#}\n```\n\n", "tags": ["Zsh", "archLinux", "Mac"]}