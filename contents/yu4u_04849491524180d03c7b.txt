{"context": "\n\n\u80cc\u666f\n\u30ea\u30a2\u30eb\u30bf\u30a4\u30e0\u306b\u30ab\u30e1\u30e9\u6620\u50cf\u306e\u51e6\u7406\u7d50\u679c\u3092\u8868\u793a\u3059\u308b\u5834\u5408\u306b\u306f\u3001OpenCV\u306eimshow\u3092\u4f7f\u3046\u3053\u3068\u304c\u591a\u3044\u3067\u3059\u304c\u3001\u30c6\u30ad\u30b9\u30c8\u306e\u8868\u793a\u7b49\u306f\u8272\u3005\u4e0d\u4fbf\u306a\u306e\u3067matplotlib\u3067\u8868\u793a\u3057\u3066\u307f\u305f\u3089\u3001\u610f\u5916\u3068\u4fbf\u5229\u3060\u3063\u305f\u306e\u3067\u30e1\u30e2\u66f8\u304d\u3067\u3059\u3002\n\u4f8b\u3048\u3070dlib\u306e\u9854\u8a8d\u8b58\u7d50\u679c\u3092\u53ef\u8996\u5316\u3059\u308b\u3068\u4e0b\u8a18\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002dlib\u306b\u3082\u72ec\u81eaGUI\u30e2\u30b8\u30e5\u30fc\u30eb\u304c\u3042\u308a\u307e\u3059\u304c\u3001\u4e00\u822c\u7684\u306a\u8868\u793a\u51e6\u7406\u304c\u3067\u304d\u308b\u308f\u3051\u3067\u306f\u306a\u3044\u306e\u3067\u4f7f\u3044\u52dd\u624b\u306f\u826f\u304f\u306a\u3044\u3067\u3059\u3002\n\n\n\u524d\u63d0\u3068\u304b\nmacOS Sierra\u3067\u3001brew install python3\u3067\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3057\u305fPython\u3092\u5229\u7528\u3002\n\u4e0b\u8a18\u3067\u306fdlib\u306e\u8a8d\u8b58\u7d50\u679c\u3092\u8868\u793a\u3057\u3066\u3044\u308b\u306e\u3067dlib\u3092\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3057\u3066\u3044\u307e\u3059\u304c\u3001matplotlib\u3067\u306e\u8868\u793a\u306b\u306f\u95a2\u4fc2\u3042\u308a\u307e\u305b\u3093\u3002\u57fa\u672c\u306fOpenCV\u3067\u30ad\u30e3\u30d7\u30c1\u30e3\u3057\u3066\u3001matplotlib\u3067\u8868\u793a\u3059\u308b\u3060\u3051\u3067\u3059\u3002\n\nOpenCV\u306e\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\n\nbrew tap homebrew/python\nbrew install opencv3 --with-python3 --with-ffmpeg --with-tbb --with-contrib\n\n# \u5229\u7528\u3059\u308bPython\u74b0\u5883\u304b\u3089\u30b7\u30f3\u30dc\u30ea\u30c3\u30af\u30ea\u30f3\u30af\u3092\u8cbc\u308b\ncd /usr/local/lib/python3.6/site-packages\nln -s /usr/local/Cellar/opencv3/3.2.0/lib/python3.6/site-packages/cv2.cpython-36m-darwin.so cv2.so\n\n\nmatplotlib\u306e\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\n\npip3 install matplotlib\n\n\ndlib\u306e\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\n\nbrew install boost\nbrew install boost-python --with-python3 --without-python\npip3 install dlib\n\n\n\u30ea\u30a2\u30eb\u30bf\u30a4\u30e0\u8868\u793a\nplt.show\u306e\u4ee3\u308f\u308a\u306bplt.pause\u3092\u4f7f\u3046\u3068\u5b9f\u73fe\u3067\u304d\u308b\u3088\u3046\u3067\u3059\u3002\nhttp://qiita.com/hausen6/items/b1b54f7325745ae43e47\n\n\u30b3\u30fc\u30c9\n\u30ea\u30a2\u30eb\u30bf\u30a4\u30e0\u306b\u30ab\u30e1\u30e9\u753b\u50cf\u304b\u3089\u9854\u8a8d\u8b58\u2192\u9854\u30e9\u30f3\u30c9\u30de\u30fc\u30af\u8a8d\u8b58\u3092\u884c\u3044\u7d50\u679c\u3092plot\u3057\u307e\u3059\u3002\nhttps://gist.github.com/yu4u/18de62c37138ff60f6fcb4cfd5d03ad5\nimport cv2\nimport dlib\nimport matplotlib.pyplot as plt\nimport matplotlib.patches as patches\nimport os\n\npredictor_path = \"shape_predictor_68_face_landmarks.dat\"\n\n# download trained model\nif not os.path.isfile(predictor_path):\n    os.system(\"wget http://dlib.net/files/shape_predictor_68_face_landmarks.dat.bz2\")\n    os.system(\"bunzip2 shape_predictor_68_face_landmarks.dat.bz2\")\n\ncap = cv2.VideoCapture(0)\ncap.set(cv2.CAP_PROP_FRAME_WIDTH, 640)\ncap.set(cv2.CAP_PROP_FRAME_HEIGHT, 480)\n\ndetector = dlib.get_frontal_face_detector()\npredictor = dlib.shape_predictor(predictor_path)\n\nfig, ax = plt.subplots()\n\nwhile True:\n    ret, frame = cap.read()\n    frame = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)\n    dets = detector(frame, 1)\n\n    # for each detected face\n    for d in dets:\n        # draw bounding box of the detected face\n        rect = patches.Rectangle((d.left(), d.top()), d.width(), d.height(), fill=False)\n        ax.add_patch(rect)\n\n        # draw landmarks\n        parts = predictor(frame, d).parts()\n        ax.scatter([point.x for point in parts], [point.y for point in parts])\n\n        for k, point in enumerate(parts):\n            ax.text(point.x, point.y, k)\n\n        ax.imshow(frame)\n        plt.pause(0.1)\n        plt.cla()\n\n## \u80cc\u666f\n\u30ea\u30a2\u30eb\u30bf\u30a4\u30e0\u306b\u30ab\u30e1\u30e9\u6620\u50cf\u306e\u51e6\u7406\u7d50\u679c\u3092\u8868\u793a\u3059\u308b\u5834\u5408\u306b\u306f\u3001OpenCV\u306eimshow\u3092\u4f7f\u3046\u3053\u3068\u304c\u591a\u3044\u3067\u3059\u304c\u3001\u30c6\u30ad\u30b9\u30c8\u306e\u8868\u793a\u7b49\u306f\u8272\u3005\u4e0d\u4fbf\u306a\u306e\u3067matplotlib\u3067\u8868\u793a\u3057\u3066\u307f\u305f\u3089\u3001\u610f\u5916\u3068\u4fbf\u5229\u3060\u3063\u305f\u306e\u3067\u30e1\u30e2\u66f8\u304d\u3067\u3059\u3002\n\u4f8b\u3048\u3070dlib\u306e\u9854\u8a8d\u8b58\u7d50\u679c\u3092\u53ef\u8996\u5316\u3059\u308b\u3068\u4e0b\u8a18\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002dlib\u306b\u3082\u72ec\u81eaGUI\u30e2\u30b8\u30e5\u30fc\u30eb\u304c\u3042\u308a\u307e\u3059\u304c\u3001\u4e00\u822c\u7684\u306a\u8868\u793a\u51e6\u7406\u304c\u3067\u304d\u308b\u308f\u3051\u3067\u306f\u306a\u3044\u306e\u3067\u4f7f\u3044\u52dd\u624b\u306f\u826f\u304f\u306a\u3044\u3067\u3059\u3002\n\n<img width=\"480\" alt=\"result\" src=\"https://qiita-image-store.s3.amazonaws.com/0/139809/fc18355c-2562-b570-ffcd-e08b367d459c.png\">\n\n\n## \u524d\u63d0\u3068\u304b\nmacOS Sierra\u3067\u3001`brew install python3`\u3067\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3057\u305fPython\u3092\u5229\u7528\u3002\n\u4e0b\u8a18\u3067\u306fdlib\u306e\u8a8d\u8b58\u7d50\u679c\u3092\u8868\u793a\u3057\u3066\u3044\u308b\u306e\u3067dlib\u3092\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3057\u3066\u3044\u307e\u3059\u304c\u3001matplotlib\u3067\u306e\u8868\u793a\u306b\u306f\u95a2\u4fc2\u3042\u308a\u307e\u305b\u3093\u3002\u57fa\u672c\u306fOpenCV\u3067\u30ad\u30e3\u30d7\u30c1\u30e3\u3057\u3066\u3001matplotlib\u3067\u8868\u793a\u3059\u308b\u3060\u3051\u3067\u3059\u3002\n\n- OpenCV\u306e\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\n\n```bash\nbrew tap homebrew/python\nbrew install opencv3 --with-python3 --with-ffmpeg --with-tbb --with-contrib\n\n# \u5229\u7528\u3059\u308bPython\u74b0\u5883\u304b\u3089\u30b7\u30f3\u30dc\u30ea\u30c3\u30af\u30ea\u30f3\u30af\u3092\u8cbc\u308b\ncd /usr/local/lib/python3.6/site-packages\nln -s /usr/local/Cellar/opencv3/3.2.0/lib/python3.6/site-packages/cv2.cpython-36m-darwin.so cv2.so\n```\n- matplotlib\u306e\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\n\n```bash\npip3 install matplotlib\n```\n\n- dlib\u306e\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\n\n```bash\nbrew install boost\nbrew install boost-python --with-python3 --without-python\npip3 install dlib\n```\n\n## \u30ea\u30a2\u30eb\u30bf\u30a4\u30e0\u8868\u793a\nplt.show\u306e\u4ee3\u308f\u308a\u306bplt.pause\u3092\u4f7f\u3046\u3068\u5b9f\u73fe\u3067\u304d\u308b\u3088\u3046\u3067\u3059\u3002\nhttp://qiita.com/hausen6/items/b1b54f7325745ae43e47\n\n## \u30b3\u30fc\u30c9\n\u30ea\u30a2\u30eb\u30bf\u30a4\u30e0\u306b\u30ab\u30e1\u30e9\u753b\u50cf\u304b\u3089\u9854\u8a8d\u8b58\u2192\u9854\u30e9\u30f3\u30c9\u30de\u30fc\u30af\u8a8d\u8b58\u3092\u884c\u3044\u7d50\u679c\u3092plot\u3057\u307e\u3059\u3002\nhttps://gist.github.com/yu4u/18de62c37138ff60f6fcb4cfd5d03ad5\n\n```py3\nimport cv2\nimport dlib\nimport matplotlib.pyplot as plt\nimport matplotlib.patches as patches\nimport os\n\npredictor_path = \"shape_predictor_68_face_landmarks.dat\"\n\n# download trained model\nif not os.path.isfile(predictor_path):\n    os.system(\"wget http://dlib.net/files/shape_predictor_68_face_landmarks.dat.bz2\")\n    os.system(\"bunzip2 shape_predictor_68_face_landmarks.dat.bz2\")\n\ncap = cv2.VideoCapture(0)\ncap.set(cv2.CAP_PROP_FRAME_WIDTH, 640)\ncap.set(cv2.CAP_PROP_FRAME_HEIGHT, 480)\n\ndetector = dlib.get_frontal_face_detector()\npredictor = dlib.shape_predictor(predictor_path)\n\nfig, ax = plt.subplots()\n\nwhile True:\n    ret, frame = cap.read()\n    frame = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)\n    dets = detector(frame, 1)\n\n    # for each detected face\n    for d in dets:\n        # draw bounding box of the detected face\n        rect = patches.Rectangle((d.left(), d.top()), d.width(), d.height(), fill=False)\n        ax.add_patch(rect)\n\n        # draw landmarks\n        parts = predictor(frame, d).parts()\n        ax.scatter([point.x for point in parts], [point.y for point in parts])\n\n        for k, point in enumerate(parts):\n            ax.text(point.x, point.y, k)\n\n        ax.imshow(frame)\n        plt.pause(0.1)\n        plt.cla()\n```\n", "tags": ["dlib", "matplotlib", "OpenCV"]}