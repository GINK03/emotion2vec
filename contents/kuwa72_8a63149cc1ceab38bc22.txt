{"context": " More than 1 year has passed since last update.\u3053\u306e\u753b\u9762\u306b\u5bfe\u3057\u3066\n1000\n1101\n1001\n1111\n1111\n1111\n1111\n\u4e0b\u8a18\u306e\u3088\u3046\u306b\u5909\u63db\u3059\u308b\u3053\u3068\u3067\u6bd4\u8f03\u56de\u6570\u306f\uff08\u7406\u8ad6\u4e0a\uff09\u221a(H * W)\u306b\u306a\u308b\u306a\u30fc\u3068\u3044\u3046\u3084\u3064\u3067\u30c6\u30b9\u30c84\u306f\u901a\u3063\u305f\u3051\u3069\u3042\u3068\u306f\u5168\u7136\u30c0\u30e1\u3060\u3063\u305f\u3002\n0321\n0010\n0210\n0000\n0000\n0000\n0000\n\u3042\u3068\u52d5\u7684\u8a08\u753b\u6cd5\u3067\u3069\u3046\u306b\u304b\u306a\u308b\u3089\u3057\u3044\u3068\u805e\u3044\u305f\u3051\u3069\u3084\u308b\u6642\u9593\u304c\u306a\u304b\u3063\u305f\u3002\n\u30c6\u30b9\u30c8\u30d1\u30bf\u30fc\u30f3\u3092\u601d\u3044\u3064\u3044\u3066\u30c6\u30b9\u30c8\u30d5\u30a1\u30a4\u30eb\u3092\u4f5c\u308c\u308b\u304b\u3069\u3046\u304b\u304c\u3068\u308a\u3042\u3048\u305a\u554f\u984c\u3060\u306a\u30fc\u3068\u3044\u3046\u611f\u60f3\u3002\n\u3068\u308a\u3042\u3048\u305a\u6700\u5f8c\u306e\u30b3\u30fc\u30c9\u306f\u3053\u308c\u3002\u30e1\u30e2\u5316\u3057\u3088\u3046\u3068\u3057\u3066\u305f\u9014\u4e2d\u306a\u306e\u3067\u3001\u7b54\u3048\u304c\u5408\u3046\u304b\u3069\u3046\u304b\u602a\u3057\u3044\u3002\nrequire 'pp'\nFIELD=\"0\"\nBLOCK=\"1\"\n\n\nmodule Kernel\n  extend self\n  def scani(re)\n    gets.scan(re).map(&:to_i)\n  end\nend\n\nclass Cell\n  attr_accessor :width, :height\n  def initialize(width,height)\n    @width = width\n    @height = height\n  end\nend\n\ndef walk_width(s)\n  i = 0\n  a = s.inject([]) do |r,x|\n    case x\n    when FIELD\n      r.unshift Cell.new(i += 1,1)\n    when BLOCK\n      r.unshift Cell.new(i = 0,0)\n    end\n  end\n  a\nend\n\ndef walk_vert(cur,pre)\n  pre.each_with_index do |x,i|\n    if cur[i].width > 0\n      cur[i].height = x.height + 1\n    end\n  end\nend\n\n($mx,$my) = scani(/\\d+/)\n\n$memoize = []\n$mem = []\npre = nil\n$mx.times do\n  line = walk_width(gets.scan(/./))\n  $mem.unshift line\n  if pre\n    walk_vert(line, pre)\n  end\n  pre = line\nend\n\n#pp $mem\n\ndef find_memoize(v,h) \n  pat = 4 \n  $memoize[v] ||= []\n  pat.times do |i|\n    i=(i+1)*v\n    if $memoize[i]\n      pat.times do |j|\n        j=(j+1)*v\n        if $memoize[i][j]\n          return $memoize[i][j]\n        end\n      end\n    end\n  end\n  nil\nend\n\ndef count(vert,horz)\n  count = 0\n  $mx.times do |x|\n    $my.times do |y|\n\n      m = find_memoize(vert, horz)\n      return m if m\n\n      if vert > horz\n        next unless $mem[x][y].width >= horz\n        cells = $mem[x][y,horz]\n        allowed = cells.all?{|c| c.height >= vert}\n      else\n        next unless $mem[x][y].height >= vert\n        cells = $mem[x,vert].map{|z|z[y]}\n        allowed = cells.all?{|c| c.width >= horz}\n      end \n      if allowed\n        count += 1\n      end\n    end\n  end\n  $memoize[vert][horz] = count\n  p count\nend\n\nwidgets = gets.to_i\n\nwidgets.times do\n  count(*(scani(/\\d+/)))\nend\n\n\n\u3053\u306e\u753b\u9762\u306b\u5bfe\u3057\u3066\n\n1000\n1101\n1001\n1111\n1111\n1111\n1111\n\n\u4e0b\u8a18\u306e\u3088\u3046\u306b\u5909\u63db\u3059\u308b\u3053\u3068\u3067\u6bd4\u8f03\u56de\u6570\u306f\uff08\u7406\u8ad6\u4e0a\uff09\u221a(H * W)\u306b\u306a\u308b\u306a\u30fc\u3068\u3044\u3046\u3084\u3064\u3067\u30c6\u30b9\u30c84\u306f\u901a\u3063\u305f\u3051\u3069\u3042\u3068\u306f\u5168\u7136\u30c0\u30e1\u3060\u3063\u305f\u3002\n\n0321\n0010\n0210\n0000\n0000\n0000\n0000\n\n\u3042\u3068\u52d5\u7684\u8a08\u753b\u6cd5\u3067\u3069\u3046\u306b\u304b\u306a\u308b\u3089\u3057\u3044\u3068\u805e\u3044\u305f\u3051\u3069\u3084\u308b\u6642\u9593\u304c\u306a\u304b\u3063\u305f\u3002\n\n\u30c6\u30b9\u30c8\u30d1\u30bf\u30fc\u30f3\u3092\u601d\u3044\u3064\u3044\u3066\u30c6\u30b9\u30c8\u30d5\u30a1\u30a4\u30eb\u3092\u4f5c\u308c\u308b\u304b\u3069\u3046\u304b\u304c\u3068\u308a\u3042\u3048\u305a\u554f\u984c\u3060\u306a\u30fc\u3068\u3044\u3046\u611f\u60f3\u3002\n\n\u3068\u308a\u3042\u3048\u305a\u6700\u5f8c\u306e\u30b3\u30fc\u30c9\u306f\u3053\u308c\u3002\u30e1\u30e2\u5316\u3057\u3088\u3046\u3068\u3057\u3066\u305f\u9014\u4e2d\u306a\u306e\u3067\u3001\u7b54\u3048\u304c\u5408\u3046\u304b\u3069\u3046\u304b\u602a\u3057\u3044\u3002\n\n```rb\nrequire 'pp'\nFIELD=\"0\"\nBLOCK=\"1\"\n\n\nmodule Kernel\n  extend self\n  def scani(re)\n    gets.scan(re).map(&:to_i)\n  end\nend\n\nclass Cell\n  attr_accessor :width, :height\n  def initialize(width,height)\n    @width = width\n    @height = height\n  end\nend\n\ndef walk_width(s)\n  i = 0\n  a = s.inject([]) do |r,x|\n    case x\n    when FIELD\n      r.unshift Cell.new(i += 1,1)\n    when BLOCK\n      r.unshift Cell.new(i = 0,0)\n    end\n  end\n  a\nend\n\ndef walk_vert(cur,pre)\n  pre.each_with_index do |x,i|\n    if cur[i].width > 0\n      cur[i].height = x.height + 1\n    end\n  end\nend\n\n($mx,$my) = scani(/\\d+/)\n\n$memoize = []\n$mem = []\npre = nil\n$mx.times do\n  line = walk_width(gets.scan(/./))\n  $mem.unshift line\n  if pre\n    walk_vert(line, pre)\n  end\n  pre = line\nend\n\n#pp $mem\n\ndef find_memoize(v,h) \n  pat = 4 \n  $memoize[v] ||= []\n  pat.times do |i|\n    i=(i+1)*v\n    if $memoize[i]\n      pat.times do |j|\n        j=(j+1)*v\n        if $memoize[i][j]\n          return $memoize[i][j]\n        end\n      end\n    end\n  end\n  nil\nend\n\ndef count(vert,horz)\n  count = 0\n  $mx.times do |x|\n    $my.times do |y|\n\n      m = find_memoize(vert, horz)\n      return m if m\n\n      if vert > horz\n        next unless $mem[x][y].width >= horz\n        cells = $mem[x][y,horz]\n        allowed = cells.all?{|c| c.height >= vert}\n      else\n        next unless $mem[x][y].height >= vert\n        cells = $mem[x,vert].map{|z|z[y]}\n        allowed = cells.all?{|c| c.width >= horz}\n      end \n      if allowed\n        count += 1\n      end\n    end\n  end\n  $memoize[vert][horz] = count\n  p count\nend\n\nwidgets = gets.to_i\n\nwidgets.times do\n  count(*(scani(/\\d+/)))\nend\n\n```\n", "tags": ["paiza"]}