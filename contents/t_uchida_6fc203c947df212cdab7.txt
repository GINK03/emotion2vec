{"context": " More than 1 year has passed since last update.\u7b2c\u4e00\u56de \u30aa\u30d5\u30e9\u30a4\u30f3\u30ea\u30a2\u30eb\u30bf\u30a4\u30e0\u3069\u3046\u66f8\u304f\u3068\u3044\u3046\u52c9\u5f37\u4f1a\u304c\u3042\u3063\u305f\u305d\u3046\u3067\u3059\u3002\n\u6b8b\u5ff5\u306a\u304c\u3089\u50d5\u306f\u53c2\u52a0\u3067\u304d\u306a\u304b\u3063\u305f\u3093\u3067\u3059\u304c\u3001\u5f53\u65e5\u306e\u304a\u984c\u3092Haskell\u3067\u89e3\u3044\u3066\u307f\u307e\u3057\u305f\u3002\n\u306a\u308b\u3079\u304f\u30b7\u30f3\u30d7\u30eb\u306b\u5b9f\u88c5\u3057\u305f\u3064\u3082\u308a\u3067\u3059\u3002\n\ntoukaku.hs\nmodule Main where\n\nimport Data.List (transpose, insert)\n\ndata Cell   = O | X | None deriving (Eq, Show, Ord, Enum)\ntype Board  = [Cell]\ndata Result = OWon | XWon | FoulOWon | FoulXWon | Draw deriving Enum\n\ninstance Show Result where\n  show OWon     = \"o won.\"\n  show XWon     = \"x won.\"\n  show FoulOWon = \"Foul: o won.\"\n  show FoulXWon = \"Foul: x won.\"\n  show Draw     = \"Draw game.\"\n\nmain :: IO ()\nmain = mapM_ (print . judge) . lines =<< getContents\n\njudge :: String -> Result\njudge = judge' O (replicate 9 None) . take 9 . map (subtract 49 . fromEnum)\n\njudge' :: Cell -> Board -> [Int] -> Result\njudge' _ _ []     = Draw\njudge' c b (i:is) = case put c i b of\n  Nothing -> toEnum (3 - fromEnum c)\n  Just b' -> if win c b'\n    then toEnum $ fromEnum c\n    else judge' (toEnum (1 - fromEnum c)) b' is\n\nwin :: Cell -> Board -> Bool\nwin c b = any (all (== c)) $ mat ++ transpose mat ++ map (zipWith (!!) mat) [[0,1,2], [2,1,0]]\n  where\n    mat = take 3 . map (take 3) $ iterate (drop 3) b\n\nput :: Cell -> Int -> Board -> Maybe Board\nput c n b = case b !! n of\n  None -> Just . map snd . insert (n, c) . filter ((/= n) . fst) $ zip [0..] b\n  _    -> Nothing\n\n\n[\u7b2c\u4e00\u56de \u30aa\u30d5\u30e9\u30a4\u30f3\u30ea\u30a2\u30eb\u30bf\u30a4\u30e0\u3069\u3046\u66f8\u304f](http://atnd.org/events/30285)\u3068\u3044\u3046\u52c9\u5f37\u4f1a\u304c\u3042\u3063\u305f\u305d\u3046\u3067\u3059\u3002\n\u6b8b\u5ff5\u306a\u304c\u3089\u50d5\u306f\u53c2\u52a0\u3067\u304d\u306a\u304b\u3063\u305f\u3093\u3067\u3059\u304c\u3001[\u5f53\u65e5\u306e\u304a\u984c](http://nabetani.sakura.ne.jp/hena/1/)\u3092Haskell\u3067\u89e3\u3044\u3066\u307f\u307e\u3057\u305f\u3002\n\u306a\u308b\u3079\u304f\u30b7\u30f3\u30d7\u30eb\u306b\u5b9f\u88c5\u3057\u305f\u3064\u3082\u308a\u3067\u3059\u3002\n\n```haskell:toukaku.hs\nmodule Main where\n\nimport Data.List (transpose, insert)\n\ndata Cell   = O | X | None deriving (Eq, Show, Ord, Enum)\ntype Board  = [Cell]\ndata Result = OWon | XWon | FoulOWon | FoulXWon | Draw deriving Enum\n\ninstance Show Result where\n  show OWon     = \"o won.\"\n  show XWon     = \"x won.\"\n  show FoulOWon = \"Foul: o won.\"\n  show FoulXWon = \"Foul: x won.\"\n  show Draw     = \"Draw game.\"\n\nmain :: IO ()\nmain = mapM_ (print . judge) . lines =<< getContents\n\njudge :: String -> Result\njudge = judge' O (replicate 9 None) . take 9 . map (subtract 49 . fromEnum)\n\njudge' :: Cell -> Board -> [Int] -> Result\njudge' _ _ []     = Draw\njudge' c b (i:is) = case put c i b of\n  Nothing -> toEnum (3 - fromEnum c)\n  Just b' -> if win c b'\n    then toEnum $ fromEnum c\n    else judge' (toEnum (1 - fromEnum c)) b' is\n\nwin :: Cell -> Board -> Bool\nwin c b = any (all (== c)) $ mat ++ transpose mat ++ map (zipWith (!!) mat) [[0,1,2], [2,1,0]]\n  where\n    mat = take 3 . map (take 3) $ iterate (drop 3) b\n\nput :: Cell -> Int -> Board -> Maybe Board\nput c n b = case b !! n of\n  None -> Just . map snd . insert (n, c) . filter ((/= n) . fst) $ zip [0..] b\n  _    -> Nothing\n```\n", "tags": ["yhpg", "Haskell", "\u3069\u3046\u66f8\u304f"]}