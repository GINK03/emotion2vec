{"context": " More than 1 year has passed since last update.\n\n\u4e00\u7b46\u66f8\u304d\u306f\u3001\u3068\u3051\u307e\u3041\u3059\uff01\n\u6709\u540d\u306a\u8a71\u3060\u304c\u3002\u4e00\u7b46\u66f8\u304d\u306f\u3001\u975e\u5e38\u306b\u7c21\u5358\u306a\u30eb\u30fc\u30eb\u3067\u3001\u89e3\u3051\u308b\u304b\u89e3\u3051\u306a\u3044\u304b\u306e\u5224\u5b9a\u304c\u3067\u304d\u308b\u3002\n\u3044\u308f\u3086\u308b\u30aa\u30a4\u30e9\u30fc\u30b0\u30e9\u30d5\u3063\u3066\u3084\u3064\u3002\n1) \u9023\u7d50\u30b0\u30e9\u30d5\u3067\u3042\u308b\u3053\u3068\u3002\u3059\u306a\u308f\u3061\u3001\u3072\u3068\u304b\u305f\u307e\u308a\u3067\u3042\u308b\u3053\u3068\u3002(\u6f22\u5b57\u306e\u300c\u56de\u300d\u306f\u3001\u4e00\u7b46\u66f8\u304d\u3067\u304d\u306a\u3044\u3067\u3059\u3088\u306d\u3002\u5916\u306e\u56db\u89d2\u3068\u4e2d\u306e\u56db\u89d2\u3092\u7d50\u3076\u8fba\u304c\u306a\u3044\u306e\u3067\u3001\u3069\u3046\u304c\u3093\u3070\u3063\u3066\u3082\u7121\u7406\u3067\u3059)\n2) \u4ee5\u4e0b\u306e\u3044\u305a\u308c\u304b\u3067\u3042\u308b\u3053\u3068\u3002\n2-1: \u3059\u3079\u3066\u306e\u70b9\u306f\u3001\u5076\u6570\u672c\u306e\u8fba\u3092\u6301\u3063\u3066\u3044\u308b(\u3053\u306e\u5834\u5408\u3001\u3069\u306e\u70b9\u304b\u3089\u59cb\u3081\u3066\u3082\u69cb\u308f\u306a\u3044\u3002\u6700\u5f8c\u306f\u59cb\u70b9\u306b\u623b\u3063\u3066\u304f\u308b)\n2-2: \u3061\u3087\u3046\u30692\u70b9\u306e\u307f\u304c\u5947\u6570\u672c\u306e\u8fba\u3092\u6301\u3061\u3001\u4ed6\u306e\u70b9\u304c\u6301\u3064\u8fba\u306e\u6570\u306f\u5076\u6570\u3067\u3042\u308b\u3002(\u3053\u306e\u5834\u5408\u3001\u3069\u3061\u3089\u304b\u3001\u5947\u6570\u672c\u306e\u8fba\u3092\u6301\u3063\u305f\u70b9\u304c\u59cb\u70b9\u306b\u306a\u308a\u3001\u3082\u3046\u7247\u65b9\u306e\u5947\u6570\u672c\u306e\u8fba\u3092\u6301\u3063\u305f\u70b9\u304c\u7d42\u70b9\u306b\u306a\u308b)\n\u2026\u2026\u76f8\u5f53\u30c7\u30ab\u3044\u4e00\u7b46\u66f8\u304d\u3067\u3082\u306a\u3044\u9650\u308a\u306f\u3001\u59cb\u70b9\u3092\u6c7a\u3081\u3066\u3001\u4f55\u3082\u8003\u3048\u305a\u306b\u9069\u5f53\u306b\u30d0\u30c3\u30af\u30c8\u30e9\u30c3\u30af\u3059\u308a\u3083\u89e3\u3051\u305d\u3046\u3060\u306a\u3002\n\n\u518d\u5e30\u3057\u306a\u3044\u3001\u3068\u3044\u3046\u9078\u629e\u80a2\n\u306a\u3089\u3070\u3001\u3068\u3001\u66f8\u304d\u59cb\u3081\u305f\u306f\u3044\u3044\u304c\u3002\u518d\u5e30\u95a2\u6570\u3092\u4f5c\u308d\u3046\u3068\u3057\u305f\u3068\u304d\u3001\u9762\u5012\u306a\u3053\u3068\u306b\u6c17\u3065\u3044\u305f\u3002\n\u8fd4\u3059\u5024\u306f\u3001\u7dda\u3092\u3069\u306e\u9806\u3067\u305f\u3069\u308b\u304b\u3001\u3068\u3044\u3046\u30ea\u30b9\u30c8\u306b\u306a\u308b\u306f\u305a\u3002\n\u518d\u5e30\u95a2\u6570\u3092\u547c\u3073\u51fa\u3059\u305f\u3073\u306b\u3001\u65b0\u3057\u3044\u30ea\u30b9\u30c8\u3092\u4f5c\u308b\u304b\uff1f\n\u518d\u5e30\u95a2\u6570\u306e\u672b\u7aef\u304c\u9577\u30551\u306e\u30ea\u30b9\u30c8\u3092\u8fd4\u3057\u3066\u3001\u5024\u3092\u8fd4\u3059\u305f\u3073\u306b\u30ea\u30b9\u30c8\u3092\u9577\u304f\u3059\u308b\u304b\uff1f\n\u2026\u2026\u3068\u304b\u8003\u3048\u3066\u305f\u3089\u3001\u3082\u3046\u3001\u81ea\u524d\u3067\u30b9\u30bf\u30c3\u30af\u6301\u3063\u3066\u3001\u30eb\u30fc\u30d7\u3067\u56de\u305b\u3070\u3044\u3044\u3058\u3083\u3093\u3063\u3066\u601d\u3063\u305f\u3002\n\n\u30a4\u30c6\u30ec\u30fc\u30bf\u3092\u30b9\u30bf\u30c3\u30af\u306b\u3076\u3061\u8fbc\u3080\n\u305d\u3057\u305f\u3089\u3001\u30eb\u30fc\u30d7\u306e\u9014\u4e2d\u3067\u518d\u5e30\u95a2\u6570\u3092\u547c\u3073\u51fa\u3059\u306e\u306f\u3069\u3046\u3059\u3093\u3060\u3088\uff1f\u3000\u9014\u4e2d\u304b\u3089\u518d\u958b\u3067\u304d\u308b\u306e\u304b\uff1f\n\u3067\u304d\u308b\u3002\u30a4\u30c6\u30ec\u30fc\u30bf\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u6b8b\u3057\u3068\u3051\u3070\u3001\u6b21\u306f\u7d9a\u304d\u304b\u3089\u30eb\u30fc\u30d7\u304c\u59cb\u3081\u3089\u308c\u308b\u3002\nfor\u30eb\u30fc\u30d7\u3060\u3068\u30a4\u30c6\u30ec\u30fc\u30bf\u3092\u9014\u4e2d\u3067\u5165\u308c\u66ff\u3048\u308b\u3053\u3068\u304c\u3067\u304d\u306a\u3044(\u3067\u304d\u308b\u304b\u3082\u3057\u308c\u306a\u3044\u304c\u3001\u3084\u308a\u65b9\u3092\u77e5\u3089\u306a\u3044)\u306e\u3067\u3001\nwhile\u30eb\u30fc\u30d7\u3092\u4f7f\u3044\u306a\u304c\u3089\u3001\u30a4\u30c6\u30ec\u30fc\u30bf\u304b\u3089\u8981\u7d20\u3092\u53d6\u308a\u51fa\u3057\u3066\u307f\u305f\u3002\n\u57fa\u790e\u77e5\u8b58\u3068\u3057\u3066\u3001Python\u3067\u306f\u3001\nfor x in iterable:\n    foo(x)\n\n\u306f\u3001\u4ee5\u4e0b\u3068\u3060\u3044\u305f\u3044\u7b49\u4fa1\u3067\u3042\u308b\u3002\n_it = iter(iterable)\nwhile 1:\n    try:\n        x = next(_it)  # Python3\n        # x = _it.next()  # Python2\n    except StopIteration:\n        break\n    else:\n        foo(x)\n\n\u8981\u3059\u308b\u306b\u3001\u30a4\u30c6\u30ec\u30fc\u30bf\u306fnext\u3092\u547c\u3073\u51fa\u3059\u3068\u6b21\u306e\u8981\u7d20\u3092\u8fd4\u3057\u3001\u6b21\u306e\u8981\u7d20\u304c\u306a\u3051\u308c\u3070StopIteration\u4f8b\u5916\u3092\u6295\u3052\u308b\u3002\nfor\u30eb\u30fc\u30d7\u306f\u88cf\u3067next\u3092\u547c\u3073\u51fa\u3057\u3066\u304f\u308c\u3066\u3001StopIteration\u304c\u304d\u305f\u3089\u30eb\u30fc\u30d7\u3092\u7d42\u4e86\u3057\u3066\u304f\u308c\u308b\u3002\n\n\u4e00\u7b46\u66f8\u304d\u30b3\u30fc\u30c9\n\u7d50\u679c\u3001\u3053\u3093\u306a\u306e\u304c\u3067\u304d\u305f\u3002\nfrom collections import Counter\n\n# Edges := [Edge*]\n# Edge := (Vertex, Vertex)\n# Vertex := Hashable except None\n\ndef solve_hitofude(edges):\n    def _make_vertexcounter(edges):\n        '\u5404\u9802\u70b9\u3054\u3068\u306b\u3001\u8fba\u306e\u6570\u3092\u6570\u3048\u308b'\n        c = Counter()\n        for x, y in edges:\n            c[x] += 1\n            c[y] += 1\n        return c\n\n    def _make_edgeflag(edges, value=True):\n        '\u901a\u3063\u305f\u8fba\u3092\u7ba1\u7406\u3059\u308b\u305f\u3081\u306e\u8f9e\u66f8\u3092\u4f5c\u308b'\n        d = dict()\n        for edge in edges:\n            d[edge] = value\n        return d\n\n    def _get_head_tail(counter):\n        '\u59cb\u70b9\u30fb\u7d42\u70b9\u3092\u6c7a\u3081\u308b'\n        odd = []\n        for k,v in counter.items():\n            if v&1: odd.append(k)\n        if len(odd) == 2:\n            return tuple(odd)\n        elif len(odd) == 0:\n            t = c.most_common(1)[0][0]\n            return t, t\n        else:\n            return None, None\n\n    def _edge_selector(pos, edgeflag):\n        '\u30b8\u30a7\u30cd\u30ec\u30fc\u30bf\u95a2\u6570\u3002\u3042\u308b\u70b9\u306b\u3064\u306a\u304c\u3063\u3066\u3044\u3066\u3001\u307e\u3060\u901a\u3063\u3066\u306a\u3044\u8fba\u3092yield\u3059\u308b\u30b8\u30a7\u30cd\u30ec\u30fc\u30bf\u3092\u4f5c\u308b\u3002'\n        for edge in edgeflag:\n            if edgeflag[edge]:\n                a, b = edge\n                if a == pos:\n                    yield edge, b\n                if edgeflag[edge] and b == pos:\n                    yield edge, a\n\n    stack_pos = []  # \u901a\u3063\u305f\u70b9\u3092\u9806\u306b\u5165\u308c\u3066\u3044\u304f\n    stack_edge = []  # \u901a\u3063\u305f\u8fba\u3092\u5165\u308c\u3066\u3044\u304f\n    stack_selector = []  # _edge_selector\u30b8\u30a7\u30cd\u30ec\u30fc\u30bf\u3092\u5165\u308c\u3066\u3044\u304f\n\n    c = _make_vertexcounter(edges)\n    remain = _make_edgeflag(edges)\n\n    pos, tail = _get_head_tail(c)\n    if pos is None:\n        return None\n    n = len(edges)\n    selector = _edge_selector(pos, remain)\n\n    while n:  # \u5168\u90e8\u306e\u8fba\u3092\u305f\u3069\u3063\u305f\u3089\u7d42\u4e86\n        try:\n            edge, nextpos = next(selector)\n        except StopIteration:  # \u8fbf\u308c\u308b\u8fba\u304c\u306a\u304f\u306a\u3063\u305f\u3089\u623b\u308b\u3002\u3053\u308c\u4ee5\u4e0a\u623b\u308c\u306a\u3044\u5834\u5408\u306fNone\u3092\u8fd4\u3059\u3002\n            if stack_pos:\n                pos = stack_pos.pop()\n                remain[stack_edge.pop()] = True\n                selector = stack_selector.pop()\n                n += 1\n            else:\n                return None\n        else:  # \u8fbf\u308c\u308b\u5834\u5408\u306e\u51e6\u7406\u3002\n            stack_pos.append(pos)\n            stack_edge.append(edge)\n            stack_selector.append(selector)\n            pos = nextpos\n            remain[edge] = False\n            selector = _edge_selector(pos, remain)\n            n -= 1\n    if pos == tail:\n        return stack_pos, stack_edge\n    assert False\n\n\u8fba\u3092\u8fbf\u308b/\u623b\u308b\u305f\u3073\u306b\u3001\u30a4\u30c6\u30ec\u30fc\u30bf\u3067\u3042\u308bselector\u5909\u6570\u304c\u3053\u308d\u3053\u308d\u3068\u5165\u308c\u66ff\u308f\u3063\u3066\u3044\u308b\u3002\n\n\u8a66\u3057\u3066\u307f\u3088\u3046\nPyQt4\u3067\u30b5\u30af\u30b5\u30af\u3063\u3068GUI\u5316\u3057\u3066\u307f\u305f\u3002\n\n(\u30b5\u30af\u30b5\u30af\u3063\u3068\u3001\u306e\u306f\u305a\u304c\u3001\u3044\u308d\u3044\u308d\u3068\u30cf\u30de\u3063\u3066\u3081\u3063\u3061\u3083\u6642\u9593\u304c\u304b\u304b\u3063\u305f\u306e\u306f\u5185\u7dd2\u3002Qt/PyQt\u95a2\u9023\u3082\u305d\u306e\u3046\u3061\u8a18\u4e8b\u66f8\u304d\u305f\u3044)\n\u30b3\u30fc\u30c9\u306f\u3059\u3079\u3066\u3001Github\u3067\u516c\u958b\u3057\u3066\u3044\u308b\u3002\n#\u4e00\u7b46\u66f8\u304d\u306f\u3001\u3068\u3051\u307e\u3041\u3059\uff01\n\n\u6709\u540d\u306a\u8a71\u3060\u304c\u3002\u4e00\u7b46\u66f8\u304d\u306f\u3001\u975e\u5e38\u306b\u7c21\u5358\u306a\u30eb\u30fc\u30eb\u3067\u3001\u89e3\u3051\u308b\u304b\u89e3\u3051\u306a\u3044\u304b\u306e\u5224\u5b9a\u304c\u3067\u304d\u308b\u3002\n\u3044\u308f\u3086\u308b\u30aa\u30a4\u30e9\u30fc\u30b0\u30e9\u30d5\u3063\u3066\u3084\u3064\u3002\n\n1) \u9023\u7d50\u30b0\u30e9\u30d5\u3067\u3042\u308b\u3053\u3068\u3002\u3059\u306a\u308f\u3061\u3001\u3072\u3068\u304b\u305f\u307e\u308a\u3067\u3042\u308b\u3053\u3068\u3002(\u6f22\u5b57\u306e\u300c\u56de\u300d\u306f\u3001\u4e00\u7b46\u66f8\u304d\u3067\u304d\u306a\u3044\u3067\u3059\u3088\u306d\u3002\u5916\u306e\u56db\u89d2\u3068\u4e2d\u306e\u56db\u89d2\u3092\u7d50\u3076\u8fba\u304c\u306a\u3044\u306e\u3067\u3001\u3069\u3046\u304c\u3093\u3070\u3063\u3066\u3082\u7121\u7406\u3067\u3059)\n2) \u4ee5\u4e0b\u306e\u3044\u305a\u308c\u304b\u3067\u3042\u308b\u3053\u3068\u3002\n2-1: \u3059\u3079\u3066\u306e\u70b9\u306f\u3001\u5076\u6570\u672c\u306e\u8fba\u3092\u6301\u3063\u3066\u3044\u308b(\u3053\u306e\u5834\u5408\u3001\u3069\u306e\u70b9\u304b\u3089\u59cb\u3081\u3066\u3082\u69cb\u308f\u306a\u3044\u3002\u6700\u5f8c\u306f\u59cb\u70b9\u306b\u623b\u3063\u3066\u304f\u308b)\n2-2: \u3061\u3087\u3046\u30692\u70b9\u306e\u307f\u304c\u5947\u6570\u672c\u306e\u8fba\u3092\u6301\u3061\u3001\u4ed6\u306e\u70b9\u304c\u6301\u3064\u8fba\u306e\u6570\u306f\u5076\u6570\u3067\u3042\u308b\u3002(\u3053\u306e\u5834\u5408\u3001\u3069\u3061\u3089\u304b\u3001\u5947\u6570\u672c\u306e\u8fba\u3092\u6301\u3063\u305f\u70b9\u304c\u59cb\u70b9\u306b\u306a\u308a\u3001\u3082\u3046\u7247\u65b9\u306e\u5947\u6570\u672c\u306e\u8fba\u3092\u6301\u3063\u305f\u70b9\u304c\u7d42\u70b9\u306b\u306a\u308b)\n\n\u2026\u2026\u76f8\u5f53\u30c7\u30ab\u3044\u4e00\u7b46\u66f8\u304d\u3067\u3082\u306a\u3044\u9650\u308a\u306f\u3001\u59cb\u70b9\u3092\u6c7a\u3081\u3066\u3001\u4f55\u3082\u8003\u3048\u305a\u306b\u9069\u5f53\u306b\u30d0\u30c3\u30af\u30c8\u30e9\u30c3\u30af\u3059\u308a\u3083\u89e3\u3051\u305d\u3046\u3060\u306a\u3002\n\n#\u518d\u5e30\u3057\u306a\u3044\u3001\u3068\u3044\u3046\u9078\u629e\u80a2\n\n\u306a\u3089\u3070\u3001\u3068\u3001\u66f8\u304d\u59cb\u3081\u305f\u306f\u3044\u3044\u304c\u3002\u518d\u5e30\u95a2\u6570\u3092\u4f5c\u308d\u3046\u3068\u3057\u305f\u3068\u304d\u3001\u9762\u5012\u306a\u3053\u3068\u306b\u6c17\u3065\u3044\u305f\u3002\n\u8fd4\u3059\u5024\u306f\u3001\u7dda\u3092\u3069\u306e\u9806\u3067\u305f\u3069\u308b\u304b\u3001\u3068\u3044\u3046\u30ea\u30b9\u30c8\u306b\u306a\u308b\u306f\u305a\u3002\n\u518d\u5e30\u95a2\u6570\u3092\u547c\u3073\u51fa\u3059\u305f\u3073\u306b\u3001\u65b0\u3057\u3044\u30ea\u30b9\u30c8\u3092\u4f5c\u308b\u304b\uff1f\n\u518d\u5e30\u95a2\u6570\u306e\u672b\u7aef\u304c\u9577\u30551\u306e\u30ea\u30b9\u30c8\u3092\u8fd4\u3057\u3066\u3001\u5024\u3092\u8fd4\u3059\u305f\u3073\u306b\u30ea\u30b9\u30c8\u3092\u9577\u304f\u3059\u308b\u304b\uff1f\n\u2026\u2026\u3068\u304b\u8003\u3048\u3066\u305f\u3089\u3001\u3082\u3046\u3001\u81ea\u524d\u3067\u30b9\u30bf\u30c3\u30af\u6301\u3063\u3066\u3001\u30eb\u30fc\u30d7\u3067\u56de\u305b\u3070\u3044\u3044\u3058\u3083\u3093\u3063\u3066\u601d\u3063\u305f\u3002\n\n#\u30a4\u30c6\u30ec\u30fc\u30bf\u3092\u30b9\u30bf\u30c3\u30af\u306b\u3076\u3061\u8fbc\u3080\n\n\u305d\u3057\u305f\u3089\u3001\u30eb\u30fc\u30d7\u306e\u9014\u4e2d\u3067\u518d\u5e30\u95a2\u6570\u3092\u547c\u3073\u51fa\u3059\u306e\u306f\u3069\u3046\u3059\u3093\u3060\u3088\uff1f\u3000\u9014\u4e2d\u304b\u3089\u518d\u958b\u3067\u304d\u308b\u306e\u304b\uff1f\n\u3067\u304d\u308b\u3002\u30a4\u30c6\u30ec\u30fc\u30bf\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u6b8b\u3057\u3068\u3051\u3070\u3001\u6b21\u306f\u7d9a\u304d\u304b\u3089\u30eb\u30fc\u30d7\u304c\u59cb\u3081\u3089\u308c\u308b\u3002\n\nfor\u30eb\u30fc\u30d7\u3060\u3068\u30a4\u30c6\u30ec\u30fc\u30bf\u3092\u9014\u4e2d\u3067\u5165\u308c\u66ff\u3048\u308b\u3053\u3068\u304c\u3067\u304d\u306a\u3044(\u3067\u304d\u308b\u304b\u3082\u3057\u308c\u306a\u3044\u304c\u3001\u3084\u308a\u65b9\u3092\u77e5\u3089\u306a\u3044)\u306e\u3067\u3001\nwhile\u30eb\u30fc\u30d7\u3092\u4f7f\u3044\u306a\u304c\u3089\u3001\u30a4\u30c6\u30ec\u30fc\u30bf\u304b\u3089\u8981\u7d20\u3092\u53d6\u308a\u51fa\u3057\u3066\u307f\u305f\u3002\n\n\u57fa\u790e\u77e5\u8b58\u3068\u3057\u3066\u3001Python\u3067\u306f\u3001\n\n```py3\nfor x in iterable:\n    foo(x)\n```\n\n\u306f\u3001\u4ee5\u4e0b\u3068\u3060\u3044\u305f\u3044\u7b49\u4fa1\u3067\u3042\u308b\u3002\n\n```py3\n_it = iter(iterable)\nwhile 1:\n    try:\n        x = next(_it)  # Python3\n        # x = _it.next()  # Python2\n    except StopIteration:\n        break\n    else:\n        foo(x)\n```\n\n\u8981\u3059\u308b\u306b\u3001\u30a4\u30c6\u30ec\u30fc\u30bf\u306fnext\u3092\u547c\u3073\u51fa\u3059\u3068\u6b21\u306e\u8981\u7d20\u3092\u8fd4\u3057\u3001\u6b21\u306e\u8981\u7d20\u304c\u306a\u3051\u308c\u3070StopIteration\u4f8b\u5916\u3092\u6295\u3052\u308b\u3002\nfor\u30eb\u30fc\u30d7\u306f\u88cf\u3067next\u3092\u547c\u3073\u51fa\u3057\u3066\u304f\u308c\u3066\u3001StopIteration\u304c\u304d\u305f\u3089\u30eb\u30fc\u30d7\u3092\u7d42\u4e86\u3057\u3066\u304f\u308c\u308b\u3002\n\n#\u4e00\u7b46\u66f8\u304d\u30b3\u30fc\u30c9\n\u7d50\u679c\u3001\u3053\u3093\u306a\u306e\u304c\u3067\u304d\u305f\u3002\n\n```py3\nfrom collections import Counter\n\n# Edges := [Edge*]\n# Edge := (Vertex, Vertex)\n# Vertex := Hashable except None\n\ndef solve_hitofude(edges):\n    def _make_vertexcounter(edges):\n        '\u5404\u9802\u70b9\u3054\u3068\u306b\u3001\u8fba\u306e\u6570\u3092\u6570\u3048\u308b'\n        c = Counter()\n        for x, y in edges:\n            c[x] += 1\n            c[y] += 1\n        return c\n\n    def _make_edgeflag(edges, value=True):\n        '\u901a\u3063\u305f\u8fba\u3092\u7ba1\u7406\u3059\u308b\u305f\u3081\u306e\u8f9e\u66f8\u3092\u4f5c\u308b'\n        d = dict()\n        for edge in edges:\n            d[edge] = value\n        return d\n\n    def _get_head_tail(counter):\n        '\u59cb\u70b9\u30fb\u7d42\u70b9\u3092\u6c7a\u3081\u308b'\n        odd = []\n        for k,v in counter.items():\n            if v&1: odd.append(k)\n        if len(odd) == 2:\n            return tuple(odd)\n        elif len(odd) == 0:\n            t = c.most_common(1)[0][0]\n            return t, t\n        else:\n            return None, None\n\n    def _edge_selector(pos, edgeflag):\n        '\u30b8\u30a7\u30cd\u30ec\u30fc\u30bf\u95a2\u6570\u3002\u3042\u308b\u70b9\u306b\u3064\u306a\u304c\u3063\u3066\u3044\u3066\u3001\u307e\u3060\u901a\u3063\u3066\u306a\u3044\u8fba\u3092yield\u3059\u308b\u30b8\u30a7\u30cd\u30ec\u30fc\u30bf\u3092\u4f5c\u308b\u3002'\n        for edge in edgeflag:\n            if edgeflag[edge]:\n                a, b = edge\n                if a == pos:\n                    yield edge, b\n                if edgeflag[edge] and b == pos:\n                    yield edge, a\n\n    stack_pos = []  # \u901a\u3063\u305f\u70b9\u3092\u9806\u306b\u5165\u308c\u3066\u3044\u304f\n    stack_edge = []  # \u901a\u3063\u305f\u8fba\u3092\u5165\u308c\u3066\u3044\u304f\n    stack_selector = []  # _edge_selector\u30b8\u30a7\u30cd\u30ec\u30fc\u30bf\u3092\u5165\u308c\u3066\u3044\u304f\n\n    c = _make_vertexcounter(edges)\n    remain = _make_edgeflag(edges)\n\n    pos, tail = _get_head_tail(c)\n    if pos is None:\n        return None\n    n = len(edges)\n    selector = _edge_selector(pos, remain)\n\n    while n:  # \u5168\u90e8\u306e\u8fba\u3092\u305f\u3069\u3063\u305f\u3089\u7d42\u4e86\n        try:\n            edge, nextpos = next(selector)\n        except StopIteration:  # \u8fbf\u308c\u308b\u8fba\u304c\u306a\u304f\u306a\u3063\u305f\u3089\u623b\u308b\u3002\u3053\u308c\u4ee5\u4e0a\u623b\u308c\u306a\u3044\u5834\u5408\u306fNone\u3092\u8fd4\u3059\u3002\n            if stack_pos:\n                pos = stack_pos.pop()\n                remain[stack_edge.pop()] = True\n                selector = stack_selector.pop()\n                n += 1\n            else:\n                return None\n        else:  # \u8fbf\u308c\u308b\u5834\u5408\u306e\u51e6\u7406\u3002\n            stack_pos.append(pos)\n            stack_edge.append(edge)\n            stack_selector.append(selector)\n            pos = nextpos\n            remain[edge] = False\n            selector = _edge_selector(pos, remain)\n            n -= 1\n    if pos == tail:\n        return stack_pos, stack_edge\n    assert False\n```\n\n\u8fba\u3092\u8fbf\u308b/\u623b\u308b\u305f\u3073\u306b\u3001\u30a4\u30c6\u30ec\u30fc\u30bf\u3067\u3042\u308bselector\u5909\u6570\u304c\u3053\u308d\u3053\u308d\u3068\u5165\u308c\u66ff\u308f\u3063\u3066\u3044\u308b\u3002\n\n#\u8a66\u3057\u3066\u307f\u3088\u3046\nPyQt4\u3067\u30b5\u30af\u30b5\u30af\u3063\u3068GUI\u5316\u3057\u3066\u307f\u305f\u3002\n![demo.gif](https://qiita-image-store.s3.amazonaws.com/0/88256/63448f41-154a-e627-e5ab-2bc2ec5bb37c.gif)\n(\u30b5\u30af\u30b5\u30af\u3063\u3068\u3001\u306e\u306f\u305a\u304c\u3001\u3044\u308d\u3044\u308d\u3068\u30cf\u30de\u3063\u3066\u3081\u3063\u3061\u3083\u6642\u9593\u304c\u304b\u304b\u3063\u305f\u306e\u306f\u5185\u7dd2\u3002Qt/PyQt\u95a2\u9023\u3082\u305d\u306e\u3046\u3061\u8a18\u4e8b\u66f8\u304d\u305f\u3044)\n\n\u30b3\u30fc\u30c9\u306f\u3059\u3079\u3066\u3001Github\u3067[\u516c\u958b](https://github.com/gyu-don/hitofude)\u3057\u3066\u3044\u308b\u3002\n", "tags": ["python3", "Python", "algorithm", "\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0"]}