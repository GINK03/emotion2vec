{"context": " More than 1 year has passed since last update.Spring\u3067\u306f\u65e2\u306bJava8\u3067\u5c0e\u5165\u3055\u308c\u305f\u65b0\u65e5\u4ed8\u578b(\u4ee5\u4e0b\u3001JSR-310\u65e5\u4ed8\u578b)\u3092\u30b5\u30dd\u30fc\u30c8\u3057\u3066\u3044\u307e\u3059\u304c\u3001\u5b9f\u969b\u306b\u4f7f\u7528\u3059\u308b\u969b\u306b\u306f\u5404\u30b3\u30f3\u30dd\u30fc\u30cd\u30f3\u30c8\u3067\u8a2d\u5b9a\u304c\u5fc5\u8981\u3060\u3063\u305f\u308a\u3001\u30d5\u30a9\u30fc\u30de\u30c3\u30c8\u3092\u6307\u5b9a\u3057\u305f\u304b\u3063\u305f\u308a\u3059\u308b\u306e\u3067\u8a2d\u5b9a\u65b9\u6cd5\u3092\u307e\u3068\u3081\u3066\u304a\u304d\u307e\u3059\u3002\n\u30b5\u30f3\u30d7\u30eb\u306f\u3053\u3061\u3089\u3002\nhttps://github.com/tag1216/example-spring-boot-jsr310\n\u5408\u308f\u305b\u3066Spring\u306e\u5404\u30b3\u30f3\u30dd\u30fc\u30cd\u30f3\u30c8\u3067\u6a19\u6e96\u3067\u5bfe\u5fdc\u3057\u3066\u3044\u306a\u3044\u578b(\u4ee5\u4e0b\u3001\u975e\u6a19\u6e96\u578b)\u3092\u6271\u3046\u65b9\u6cd5\u3092\u8efd\u304f\u89e3\u8aac\u3057\u307e\u3059\u3002\n\n\u69cb\u6210\n\nSpring Boot(1.3.0.RELEASE)\nSpring MVC\nSpring Data JPA\nJackson\n\n\nSpring Data JPA\n\n\u975e\u6a19\u6e96\u578b\u306e\u5bfe\u5fdc\u65b9\u6cd5\nEntity\u30af\u30e9\u30b9\u3084\u30af\u30a8\u30ea\u30fc\u30e1\u30bd\u30c3\u30c9\u306e\u5f15\u6570\u3067\u975e\u6a19\u6e96\u578b\u3092\u4f7f\u3046\u306b\u306f\u3001AttributeConverter\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30fc\u30b9\u306e\u5b9f\u88c5\u30af\u30e9\u30b9\u3092\u4f5c\u6210\u3057\u3066\u6a19\u6e96\u578b\u3078\u306e\u5909\u63db\u3092\u884c\u3044\u307e\u3059\u3002\n\nJSR-310\u306e\u5bfe\u5fdc\u65b9\u6cd5\nSpring Data JPA \u3067\u306fJsr310JpaConverters\u3068\u3044\u3046\u30af\u30e9\u30b9\u306bJSR-310\u65e5\u4ed8\u578b\u306e\u5909\u63db\u304c\u7528\u610f\u3057\u3066\u3042\u308a\u307e\u3059\u3002\n\u3053\u308c\u3092\u30b9\u30ad\u30e3\u30f3\u5bfe\u8c61\u306b\u8a2d\u5b9a\u3059\u308c\u3070\u3067JSR-310\u65e5\u4ed8\u578b\u304c\u4f7f\u3048\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002\n\napplication.java\nimport org.springframework.data.jpa.convert.threeten.Jsr310JpaConverters;\n\n@SpringBootApplication\n@EntityScan(basePackageClasses = {Application.class, Jsr310JpaConverters.class})\npublic class Application {\n\n\n\nJackson\n\n\u975e\u6a19\u6e96\u578b\u306e\u5bfe\u5fdc\u65b9\u6cd5\nJackson\u3067\u306fJsonSerializer\u3068JsonDeserializer\u3092\u5b9f\u88c5\u3057\u3066ObjectMapper\u306b\u767b\u9332\u3059\u308b\u3053\u3068\u3067\u975e\u6a19\u6e96\u306e\u578b\u306b\u5bfe\u5fdc\u3067\u304d\u307e\u3059\u3002\n\nJSR-310\u306e\u5bfe\u5fdc\u65b9\u6cd5\nJSR-310\u65e5\u4ed8\u578b\u306eSerializer/Deserializer\u306fjackson-datatype-jsr310\u3068\u3044\u3046\u8ffd\u52a0\u30e2\u30b8\u30e5\u30fc\u30eb\u306b\u7528\u610f\u3057\u3066\u3042\u308a\u307e\u3059\u3002\n\u3053\u308c\u3092\u4f9d\u5b58\u95a2\u4fc2\u306b\u8ffd\u52a0\u3057\u3066\u304a\u3051\u3070Spring Boot\u74b0\u5883\u3067\u306fObjectMapper\u306b\u30e2\u30b8\u30e5\u30fc\u30eb\u3092\u81ea\u52d5\u3067\u8ffd\u52a0\u3057\u3066\u304f\u308c\u308b\u306e\u3067JSR-310\u65e5\u4ed8\u578b\u304c\u4f7f\u3048\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002\n\u305f\u3060\u3057\u3001\u3053\u308c\u3060\u3051\u3060\u3068Entity\u306e\u5c5e\u6027\u306b@JsonFormat\u3067\u30d5\u30a9\u30fc\u30de\u30c3\u30c8\u3092\u6307\u5b9a\u3057\u306a\u3044\u3068[2015,12,1]\u3068\u3044\u3046\u3088\u3046\u306a\u914d\u5217\u306b\u306a\u3063\u3066\u3057\u307e\u3046\u306e\u3067\u30a4\u30de\u30a4\u30c1\u3067\u3059\u3002\n\u305d\u3053\u3067\u3001\u6b21\u306e\u3088\u3046\u306bJSR310\u65e5\u4ed8\u578b\u306e\u30e2\u30b8\u30e5\u30fc\u30eb\u3092\u8ffd\u52a0\u3059\u308b\u969b\u306b\u30d5\u30a9\u30fc\u30de\u30c3\u30c8\u3092\u6307\u5b9a\u3057\u3066\u304a\u304f\u4e8b\u3067\u3001@JsonFormat\u304c\u6307\u5b9a\u3055\u308c\u3066\u3044\u306a\u3044\u6642\u306e\u30c7\u30d5\u30a9\u30eb\u30c8\u3068\u3057\u3066\u4f7f\u7528\u3055\u308c\u307e\u3059\u3002\n\nApplication.java\n    @Bean\n    public ObjectMapper jsonObjectMapper() {\n        JavaTimeModule module = new JavaTimeModule();\n        module.addSerializer(LocalDate.class, new LocalDateSerializer(DateTimeFormatter.ofPattern(\"yyyy/MM/dd\")));\n        module.addDeserializer(LocalDate.class, new LocalDateDeserializer(DateTimeFormatter.ofPattern(\"yyyy/MM/dd\")));\n        ObjectMapper mapper = new ObjectMapper();\n        mapper.registerModule(module);\n        return mapper;\n    }\n\n\n\nSpring MVC\n\n\u975e\u6a19\u6e96\u578b\u306e\u5bfe\u5fdc\u65b9\u6cd5\nSpring\u3067\u306fConversionService\u306bFormatter\u3084Converter\u3092\u767b\u9332\u3057\u3066\u578b\u5909\u63db\u3092\u884c\u3044\u307e\u3059\u3002\nSpring Boot\u3067\u306fFormatter\u3084Converter\u3092\u30b3\u30f3\u30dd\u30fc\u30cd\u30f3\u30c8\u3068\u3057\u3066\u767b\u9332\u3057\u3066\u304a\u3051\u3070\u81ea\u52d5\u3067ConversionService\u306b\u8ffd\u52a0\u3055\u308c\u307e\u3059\u3002\nSpring Boot Reference Guide - 27.1.1 Spring MVC auto-configuration\n\nJSR-310\u306e\u5bfe\u5fdc\u65b9\u6cd5\nJsr310DateTimeFormatAnnotationFormatterFactory\u30af\u30e9\u30b9\u304c\u4e88\u3081\u767b\u9332\u3055\u308c\u3066\u3044\u308b\u306e\u3067\u3001@DateTimeFormat\u3092\u4f7f\u7528\u3059\u308c\u3070JSR-310\u65e5\u4ed8\u578b\u3092\u4f7f\u7528\u3067\u304d\u307e\u3059\u3002\n\nPlanRestController.java\n  @RequestMapping(method = GET)\n    public List<Plan> index(\n            @RequestParam(required = false) @DateTimeFormat(pattern = \"yyyy/MM/dd\")  LocalDate date,\n            @RequestParam(required = false) String title) {\n\n\n\u307e\u305f\u3001\u4ee5\u4e0b\u306e\u3088\u3046\u306bFormatter\u3092\u767b\u9332\u3057\u3066\u304a\u3051\u3070@DateTimeFormat\u3092\u4f7f\u7528\u305b\u305a\u306bJSR-310\u65e5\u4ed8\u578b\u3092\u4f7f\u7528\u3059\u308b\u4e8b\u304c\u3067\u304d\u307e\u3059\u3002\n\u305f\u3060\u3057\u3001Formatter\u3092\u767b\u9332\u3059\u308b\u3068@DateTimeFormat\u304c\u52b9\u304b\u306a\u304f\u306a\u308b\u3088\u3046\u306a\u306e\u3067\u6ce8\u610f\u304c\u5fc5\u8981\u3067\u3059\u3002\n\nApplication.java\n    @Bean\n    public Formatter<LocalDate> localDateFormatter() {\n        return new Formatter<LocalDate>() {\n            @Override\n            public String print(LocalDate object, Locale locale) {\n                return object.format(DateTimeFormatter.ofPattern(\"yyyy/MM/dd\"));\n            }\n            @Override\n            public LocalDate parse(String text, Locale locale) throws ParseException {\n                return LocalDate.parse(text, DateTimeFormatter.ofPattern(\"yyyy/MM/dd\"));\n            }\n        };\n    }\n\n\nSpring\u3067\u306f\u65e2\u306bJava8\u3067\u5c0e\u5165\u3055\u308c\u305f\u65b0\u65e5\u4ed8\u578b(\u4ee5\u4e0b\u3001JSR-310\u65e5\u4ed8\u578b)\u3092\u30b5\u30dd\u30fc\u30c8\u3057\u3066\u3044\u307e\u3059\u304c\u3001\u5b9f\u969b\u306b\u4f7f\u7528\u3059\u308b\u969b\u306b\u306f\u5404\u30b3\u30f3\u30dd\u30fc\u30cd\u30f3\u30c8\u3067\u8a2d\u5b9a\u304c\u5fc5\u8981\u3060\u3063\u305f\u308a\u3001\u30d5\u30a9\u30fc\u30de\u30c3\u30c8\u3092\u6307\u5b9a\u3057\u305f\u304b\u3063\u305f\u308a\u3059\u308b\u306e\u3067\u8a2d\u5b9a\u65b9\u6cd5\u3092\u307e\u3068\u3081\u3066\u304a\u304d\u307e\u3059\u3002\n\n\u30b5\u30f3\u30d7\u30eb\u306f\u3053\u3061\u3089\u3002\nhttps://github.com/tag1216/example-spring-boot-jsr310\n\n\u5408\u308f\u305b\u3066Spring\u306e\u5404\u30b3\u30f3\u30dd\u30fc\u30cd\u30f3\u30c8\u3067\u6a19\u6e96\u3067\u5bfe\u5fdc\u3057\u3066\u3044\u306a\u3044\u578b(\u4ee5\u4e0b\u3001\u975e\u6a19\u6e96\u578b)\u3092\u6271\u3046\u65b9\u6cd5\u3092\u8efd\u304f\u89e3\u8aac\u3057\u307e\u3059\u3002\n\n# \u69cb\u6210\n\n- Spring Boot(1.3.0.RELEASE)\n- Spring MVC\n- Spring Data JPA\n- Jackson\n\n# Spring Data JPA\n\n## \u975e\u6a19\u6e96\u578b\u306e\u5bfe\u5fdc\u65b9\u6cd5\n\nEntity\u30af\u30e9\u30b9\u3084\u30af\u30a8\u30ea\u30fc\u30e1\u30bd\u30c3\u30c9\u306e\u5f15\u6570\u3067\u975e\u6a19\u6e96\u578b\u3092\u4f7f\u3046\u306b\u306f\u3001[AttributeConverter][]\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30fc\u30b9\u306e\u5b9f\u88c5\u30af\u30e9\u30b9\u3092\u4f5c\u6210\u3057\u3066\u6a19\u6e96\u578b\u3078\u306e\u5909\u63db\u3092\u884c\u3044\u307e\u3059\u3002\n\n## JSR-310\u306e\u5bfe\u5fdc\u65b9\u6cd5\n\nSpring Data JPA \u3067\u306f[Jsr310JpaConverters][]\u3068\u3044\u3046\u30af\u30e9\u30b9\u306bJSR-310\u65e5\u4ed8\u578b\u306e\u5909\u63db\u304c\u7528\u610f\u3057\u3066\u3042\u308a\u307e\u3059\u3002\n\u3053\u308c\u3092\u30b9\u30ad\u30e3\u30f3\u5bfe\u8c61\u306b\u8a2d\u5b9a\u3059\u308c\u3070\u3067JSR-310\u65e5\u4ed8\u578b\u304c\u4f7f\u3048\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002\n\n```java:application.java\nimport org.springframework.data.jpa.convert.threeten.Jsr310JpaConverters;\n\n@SpringBootApplication\n@EntityScan(basePackageClasses = {Application.class, Jsr310JpaConverters.class})\npublic class Application {\n```\n\n# Jackson\n\n## \u975e\u6a19\u6e96\u578b\u306e\u5bfe\u5fdc\u65b9\u6cd5\n\nJackson\u3067\u306f[JsonSerializer][]\u3068[JsonDeserializer][]\u3092\u5b9f\u88c5\u3057\u3066[ObjectMapper][]\u306b\u767b\u9332\u3059\u308b\u3053\u3068\u3067\u975e\u6a19\u6e96\u306e\u578b\u306b\u5bfe\u5fdc\u3067\u304d\u307e\u3059\u3002\n\n## JSR-310\u306e\u5bfe\u5fdc\u65b9\u6cd5\n\nJSR-310\u65e5\u4ed8\u578b\u306eSerializer/Deserializer\u306f[jackson-datatype-jsr310][]\u3068\u3044\u3046\u8ffd\u52a0\u30e2\u30b8\u30e5\u30fc\u30eb\u306b\u7528\u610f\u3057\u3066\u3042\u308a\u307e\u3059\u3002\n\u3053\u308c\u3092\u4f9d\u5b58\u95a2\u4fc2\u306b\u8ffd\u52a0\u3057\u3066\u304a\u3051\u3070Spring Boot\u74b0\u5883\u3067\u306fObjectMapper\u306b\u30e2\u30b8\u30e5\u30fc\u30eb\u3092\u81ea\u52d5\u3067\u8ffd\u52a0\u3057\u3066\u304f\u308c\u308b\u306e\u3067JSR-310\u65e5\u4ed8\u578b\u304c\u4f7f\u3048\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002\n\n\u305f\u3060\u3057\u3001\u3053\u308c\u3060\u3051\u3060\u3068Entity\u306e\u5c5e\u6027\u306b[@JsonFormat][]\u3067\u30d5\u30a9\u30fc\u30de\u30c3\u30c8\u3092\u6307\u5b9a\u3057\u306a\u3044\u3068`[2015,12,1]`\u3068\u3044\u3046\u3088\u3046\u306a\u914d\u5217\u306b\u306a\u3063\u3066\u3057\u307e\u3046\u306e\u3067\u30a4\u30de\u30a4\u30c1\u3067\u3059\u3002\n\n\u305d\u3053\u3067\u3001\u6b21\u306e\u3088\u3046\u306bJSR310\u65e5\u4ed8\u578b\u306e\u30e2\u30b8\u30e5\u30fc\u30eb\u3092\u8ffd\u52a0\u3059\u308b\u969b\u306b\u30d5\u30a9\u30fc\u30de\u30c3\u30c8\u3092\u6307\u5b9a\u3057\u3066\u304a\u304f\u4e8b\u3067\u3001[@JsonFormat][]\u304c\u6307\u5b9a\u3055\u308c\u3066\u3044\u306a\u3044\u6642\u306e\u30c7\u30d5\u30a9\u30eb\u30c8\u3068\u3057\u3066\u4f7f\u7528\u3055\u308c\u307e\u3059\u3002\n\n```java:Application.java\n    @Bean\n    public ObjectMapper jsonObjectMapper() {\n        JavaTimeModule module = new JavaTimeModule();\n        module.addSerializer(LocalDate.class, new LocalDateSerializer(DateTimeFormatter.ofPattern(\"yyyy/MM/dd\")));\n        module.addDeserializer(LocalDate.class, new LocalDateDeserializer(DateTimeFormatter.ofPattern(\"yyyy/MM/dd\")));\n        ObjectMapper mapper = new ObjectMapper();\n        mapper.registerModule(module);\n        return mapper;\n    }\n```\n\n# Spring MVC\n\n## \u975e\u6a19\u6e96\u578b\u306e\u5bfe\u5fdc\u65b9\u6cd5\n\nSpring\u3067\u306f[ConversionService][]\u306b[Formatter][]\u3084[Converter][]\u3092\u767b\u9332\u3057\u3066\u578b\u5909\u63db\u3092\u884c\u3044\u307e\u3059\u3002\n\nSpring Boot\u3067\u306fFormatter\u3084Converter\u3092\u30b3\u30f3\u30dd\u30fc\u30cd\u30f3\u30c8\u3068\u3057\u3066\u767b\u9332\u3057\u3066\u304a\u3051\u3070\u81ea\u52d5\u3067ConversionService\u306b\u8ffd\u52a0\u3055\u308c\u307e\u3059\u3002\n\n[Spring Boot Reference Guide - 27.1.1 Spring MVC auto-configuration](http://docs.spring.io/spring-boot/docs/current/reference/htmlsingle/#boot-features-spring-mvc-auto-configuration)\n\n## JSR-310\u306e\u5bfe\u5fdc\u65b9\u6cd5\n\n[Jsr310DateTimeFormatAnnotationFormatterFactory][]\u30af\u30e9\u30b9\u304c\u4e88\u3081\u767b\u9332\u3055\u308c\u3066\u3044\u308b\u306e\u3067\u3001[@DateTimeFormat][]\u3092\u4f7f\u7528\u3059\u308c\u3070JSR-310\u65e5\u4ed8\u578b\u3092\u4f7f\u7528\u3067\u304d\u307e\u3059\u3002\n\n```java:PlanRestController.java\n  @RequestMapping(method = GET)\n    public List<Plan> index(\n            @RequestParam(required = false) @DateTimeFormat(pattern = \"yyyy/MM/dd\")  LocalDate date,\n            @RequestParam(required = false) String title) {\n```\n\n\u307e\u305f\u3001\u4ee5\u4e0b\u306e\u3088\u3046\u306bFormatter\u3092\u767b\u9332\u3057\u3066\u304a\u3051\u3070`@DateTimeFormat`\u3092\u4f7f\u7528\u305b\u305a\u306bJSR-310\u65e5\u4ed8\u578b\u3092\u4f7f\u7528\u3059\u308b\u4e8b\u304c\u3067\u304d\u307e\u3059\u3002\n\u305f\u3060\u3057\u3001Formatter\u3092\u767b\u9332\u3059\u308b\u3068`@DateTimeFormat`\u304c\u52b9\u304b\u306a\u304f\u306a\u308b\u3088\u3046\u306a\u306e\u3067\u6ce8\u610f\u304c\u5fc5\u8981\u3067\u3059\u3002\n\n```java:Application.java\n    @Bean\n    public Formatter<LocalDate> localDateFormatter() {\n        return new Formatter<LocalDate>() {\n            @Override\n            public String print(LocalDate object, Locale locale) {\n                return object.format(DateTimeFormatter.ofPattern(\"yyyy/MM/dd\"));\n            }\n            @Override\n            public LocalDate parse(String text, Locale locale) throws ParseException {\n                return LocalDate.parse(text, DateTimeFormatter.ofPattern(\"yyyy/MM/dd\"));\n            }\n        };\n    }\n```\n\n\n[AttributeConverter]:https://docs.oracle.com/javaee/7/api/javax/persistence/AttributeConverter.html\n\n[Jsr310JpaConverters]:https://github.com/spring-projects/spring-data-jpa/blob/master/src/main/java/org/springframework/data/jpa/convert/threeten/Jsr310JpaConverters.java\n\n[ObjectMapper]:http://fasterxml.github.io/jackson-databind/javadoc/2.6/com/fasterxml/jackson/databind/ObjectMapper.html\n[JsonSerializer]:http://fasterxml.github.io/jackson-databind/javadoc/2.6/com/fasterxml/jackson/databind/JsonSerializer.html\n[JsonDeserializer]:http://fasterxml.github.io/jackson-databind/javadoc/2.6/com/fasterxml/jackson/databind/JsonDeserializer.html\n\n[jackson-datatype-jsr310]:https://github.com/FasterXML/jackson-datatype-jsr310\n\n[@JsonFormat]:https://github.com/FasterXML/jackson-annotations/blob/master/src/main/java/com/fasterxml/jackson/annotation/JsonFormat.java\n\n[ConversionService]:http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/core/convert/ConversionService.html\n[Formatter]:http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/format/Formatter.html\n[Converter]:http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/core/convert/converter/Converter.html\n[Jsr310DateTimeFormatAnnotationFormatterFactory]:http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/format/datetime/standard/Jsr310DateTimeFormatAnnotationFormatterFactory.html\n[@DateTimeFormat]:http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/format/annotation/DateTimeFormat.html\n\n\n", "tags": ["Java", "spring", "Jackson", "spring-boot", "java8"]}