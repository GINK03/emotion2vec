{"context": "\n\n\u76ee\u6b21\n\nReactiveX\nSync vs Async\nRxJava\nOperators\n\n\n\nReactiveX\n\n\nReactiveX \u3068\u306f\n\n\u975e\u540c\u671f\u30d7\u30ed\u30b0\u30e9\u30e0\u306e\u305f\u3081\u306e\u30e9\u30a4\u30d6\u30e9\u30ea\n\u8907\u6570\u306e\u30c7\u30fc\u30bf\uff08\u30a4\u30d9\u30f3\u30c8\uff09\u3092\u4e2d\u5fc3\u306b\u636e\u3048\u308b\nObservable Sequence \u3092\u4f7f\u3046\n\u4f4e\u30ec\u30a4\u30e4\uff08threading, synchronization, thread-safety, concurrency...\uff09\u3092\u96a0\u853d\nReactiveX \u306e Java \u5b9f\u88c5\uff1a RxJava\n\nref: http://reactivex.io/intro.html\n\n\nSync vs Async\n\n\n\u540c\u671f\u7684\u306a\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\n\u5358\u4e00\u30c7\u30fc\u30bf\u3092\u53d6\u5f97\uff1aT getData()\n// \u5358\u4e00\u30c7\u30fc\u30bf\u3092\u540c\u671f\u7684\u306b\u53d6\u5f97\u3057\u3066\u51fa\u529b\nInteger i = getData();\nSystem.out.println(i);\n\n\n\n\u540c\u671f\u7684\u306a\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\n\u8907\u6570\u30c7\u30fc\u30bf\u3092\u53d6\u5f97\uff1aIterable<T> getData\n// \u8907\u6570\u30c7\u30fc\u30bf\u3092\u540c\u671f\u7684\u306b\u53d6\u5f97\u3057\u3066\u51fa\u529b\nIterable<Integer> iter = getData();\nfor (Integer i : iter) {\n    System.out.println(i);\n}\n\n\n\n\u554f\u984c\n\ngetData() \u3067\u51e6\u7406\u304c\u30d6\u30ed\u30c3\u30af\u3059\u308b\n\u8907\u6570\u30c7\u30fc\u30bf\uff1a\u3059\u3079\u3066\u306e\u30c7\u30fc\u30bf\u304c\u63c3\u308f\u306a\u3044\u3068\u51fa\u529b\u3067\u304d\u306a\u3044\n\n\n\n\u975e\u540c\u671f\u7684\u306a\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\n\u5358\u4e00\u30c7\u30fc\u30bf\uff1aFuture<T> getData()\nFuture<Integer> f = getData();\n...(\u305d\u306e\u4ed6\u306e\u51e6\u7406)...\nInteger i = f.get();\nSystem.out.println(i);\n\n\n\n\u975e\u540c\u671f\u7684\u306a\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\n\u8907\u6570\u30c7\u30fc\u30bf\u306e\u53d6\u5f97\uff1aObservable<T> getData();\nObservable<Integer> observable = getData();\nobservable.subscribe(i -> System.out.println(i));\n...(\u305d\u306e\u4ed6\u306e\u51e6\u7406)...\n\n\n\n\u5229\u70b9\n\ngetData() \u3067\u51e6\u7406\u304c\u30d6\u30ed\u30c3\u30af\u3057\u306a\u3044\n\u8907\u6570\u30c7\u30fc\u30bf\uff1a\u3059\u3079\u3066\u306e\u30c7\u30fc\u30bf\u304c\u63c3\u308f\u306a\u304f\u3066\u3082\u51e6\u7406\u304c\u9032\u3080\n\n\n\nReactiveX \u3068\u306f\n\n\u975e\u540c\u671f\u30d7\u30ed\u30b0\u30e9\u30e0 \u00d7 \u8907\u6570\u306e\u30c7\u30fc\u30bf\n\n\n\u30c7\u30b6\u30a4\u30f3\u30d1\u30bf\u30fc\u30f3\u306e Observer Pattern \u3092\u8907\u6570\u5316\u3057\u305f\u3082\u306e\nObservables \u304c\u4e2d\u5fc3\n\n\n\u5b9f\u88c5\u306f\u4f55\u3067\u3082\u826f\u3044\n\n\n\u30b7\u30f3\u30b0\u30eb\u30b9\u30ec\u30c3\u30c9\u3001\u30de\u30eb\u30c1\u30b9\u30ec\u30c3\u30c9\u3001Actor \u30e2\u30c7\u30eb\u3001\u3001\u3001\n\n\n\n\n\nRxJava\n\n\nRxJava\n\nReactive X \u306e JVM \u5411\u3051\u30e9\u30a4\u30d6\u30e9\u30ea\nJava \u3067\u5b9f\u88c5\u3055\u308c\u3066\u3044\u308b\n1.x \u3068 2.x \u3067\u5168\u7136\u9055\u3046\n\n\n2.x \u3092\u4e2d\u5fc3\u306b\u89e3\u8aac\n\n\n\n\n\n\u6e96\u5099\n\ngradle \u306b\u6b21\u3092\u8a2d\u5b9a\n\ncompile \"io.reactivex.rxjava2:rxjava:2.0.4\"\n\n\n\n\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\n\nPure Java \ngithub: TODO\n\n\n\nObservable \u306e\u751f\u6210\n// \u914d\u5217\u3092\u5143\u306b\u3057\u3066 Observable \u3092\u751f\u6210\nInteger[] numbers = {1, 2, 3, 4, 5};\nObservable<Integer> observable \n    = Observable.fromArray(numbers);\n\n\u21d2 Observable \u306b factory \u30e1\u30bd\u30c3\u30c9\u304c\u305f\u304f\u3055\u3093\u3042\u308b\n\n\nsubscribe\n// Observables \u3092 subscribe \u3059\u308b\nobservable.subscribe(new Consumer<Integer>() {\n    @Override \n    public void accept(Integer integer) throws Exception {\n        System.out.println(integer);\n    }\n});\n\n\n\n\u5b9f\u884c\u3059\u308b\u3068\n1\n2\n3\n4\n5\n\n\n\n\u5358\u4e00 Item \u306e Observable\n// \u5358\u4e00\u30a2\u30a4\u30c6\u30e0\u306e Observable\nObservable<Integer> observable = Observable.just(1);\n\n\u21d2 2.x \u3067\u306f\u3001Single \u3092\u4f7f\u3063\u305f\u65b9\u304c\u3088\u3044\uff1f\uff08\u8981\u78ba\u8a8d\uff09\n\n\nJava 8 \u306e\u30e9\u30e0\u30c0\u3092\u5229\u7528\n// Java 8 \u306e\u30e9\u30e0\u30c0\u69cb\u6587\nobservable.subscribe(integer -> {\n    System.out.println(integer);\n});\n\n\u30e1\u30bd\u30c3\u30c9\u53c2\u7167\u3092\u3064\u304b\u3046\u3068\u3055\u3089\u306b\u7c21\u5358\u306b\nobservable.subscribe(System.out::println);\n\n\n\n\u975e\u540c\u671f\u51e6\u7406\n// 5\u79d2\u5f8c\u306b 1 \u3092\u751f\u6210\u3059\u308b Observable\nFuture<Integer> future = Executors.newSingleThreadExecutor().submit(() -> {\n    // \u30d0\u30c3\u30af\u30b0\u30e9\u30a6\u30f3\u30c9\u30b9\u30ec\u30c3\u30c9\u3067\u5b9f\u884c\n    Thread.sleep(5000);\n    return 1;\n});\n\nObservable<Integer> observable = Observable.fromFuture(future);\nobservable.subscribe(System.out::println); // \u7d42\u4e86\u3057\u306a\u3044\u306e\u3067\u6ce8\u610f\n\n\n\nOperators\n\n\n\u30b3\u30ec\u30af\u30b7\u30e7\u30f3\u64cd\u4f5c\n\nReactiveX \u306f\u30b3\u30ec\u30af\u30b7\u30e7\u30f3\u64cd\u4f5c\u304c\u91cd\u8981\n\n\nReactiveX \u21d2 Observables \u304c\u4e2d\u5fc3\nObservables \u21d2 \u975e\u540c\u671f \u00d7 \u8907\u6570\u30c7\u30fc\u30bf\n\n\u8907\u6570\u30c7\u30fc\u30bf \u21d2 \u30b3\u30ec\u30af\u30b7\u30e7\u30f3\n\n\n\n\u4fbf\u5229\u306a\u30b3\u30ec\u30af\u30b7\u30e7\u30f3\u30e1\u30bd\u30c3\u30c9\u3092\u7528\u610f\u3057\u3066\u3044\u308b\n\n\n\n\u4f8b\uff1a\n\n\u30c7\u30fc\u30bf\u5217\u306e11~15\u500b\u76ee\u306e\u8981\u7d20\u3092 \"N transformed\" \u3068\u3044\u3046\u5f62\u5f0f\u3067\u9806\u306b\u51fa\u529b\n\n\n\n\u540c\u671f\u7684\u306a\u624b\u6cd5\nIterable<T> \u306e\u5834\u5408\uff1a\nIterable<Integer> iter = getDataFromLocal();\niter.skip(10)\n  .take(5) \n  .map(s -> s + \"transformed\") \n  .forEach(s -> System.out.println(s));\n\n\n\n\u975e\u540c\u671f\u7684\u306a\u624b\u6cd5\nObservable<T> \u306e\u5834\u5408\uff1a\nObservable<Integer> observable = getDataFromNetwork();\nobservable.skip(10)\n  .take(5) \n  .map(i -> i + \"transformed\") \n  .subscribe(s -> System.out.println(s));\n\n\n\nMarble Diagrams\n\n\u30e1\u30bd\u30c3\u30c9\u306e\u52b9\u679c\u8aac\u660e\u306b\u4f7f\u308f\u308c\u308b\u56f3\n\n\nref: http://reactivex.io/documentation/observable.html\n\n\nPull vs Push\n\nPull\n\n\n\u540c\u671f\u7684\u624b\u6cd5\u306f Pull\n\u30c7\u30fc\u30bf\u3092\u6d88\u8cbb\u3059\u308b\u5074\u304c\u3001\u30c7\u30fc\u30bf\u3092 Pull \u3059\u308b\n\n\n Push\n\n\n\u975e\u540c\u671f\u7684\u624b\u6cd5\u306f Push\n\u30c7\u30fc\u30bf\u3092\u751f\u6210\u3059\u308b\u5074\u304c\u3001\u30c7\u30fc\u30bf\u3092 Push \u3059\u308b\n\n\n\n\n\n\u3059\u3079\u3066\u3092 Push \u306b\nReactiveX \u5275\u59cb\u8005 Erik Meijer:\n\n\u4e16\u754c\u306e\u6700\u5148\u7aef\u306b\u3044\u7d9a\u3051\u305f\u3044\u306e\u306a\u3089\uff0c\u201cpush\u201d\u3059\u308b\u3053\u3068\uff0c\u3064\u307e\u308a\u30ea\u30a2\u30af\u30c6\u30a3\u30d6\u3067\u3042\u308b\u3053\u3068\u304c\u5fc5\u8981\u3060\uff0c\u3068\u6c0f\u306f\u8a00\u3046\u3002\u201cpull\u201d\u3092\u4f7f\u3046\u3068\u3044\u3046\u306e\u306f\uff0c\u57fa\u672c\u7684\u306b\u306f\u30d7\u30ed\u30b0\u30e9\u30e0\u306b\uff0c\u3042\u3089\u3086\u308b\u7a2e\u985e\u306e\u30d6\u30ed\u30c3\u30af\u30dd\u30a4\u30f3\u30c8\u3092\u52a0\u3048\u308b\u3068\u3044\u3046\u3053\u3068\u3067\u3042\u308b\u304b\u3089\u975e\u52b9\u7387\u7684\u3060\uff0c\u3068\u6c0f\u306f\u8a00\u3046\u3002\n\nref: https://www.infoq.com/jp/news/2015/12/erik-meijer-hacker-way\n\n\n\u6b21\u56de\n\nAndroid \u3067 ReactiveX \u3092\u4f7f\u3046\uff1f\n\n# \u76ee\u6b21\n- ReactiveX\n- Sync vs Async\n- RxJava\n- Operators\n\n***\n# ReactiveX\n\n*** \n# ReactiveX \u3068\u306f\n- \u975e\u540c\u671f\u30d7\u30ed\u30b0\u30e9\u30e0\u306e\u305f\u3081\u306e\u30e9\u30a4\u30d6\u30e9\u30ea\n- \u8907\u6570\u306e\u30c7\u30fc\u30bf\uff08\u30a4\u30d9\u30f3\u30c8\uff09\u3092\u4e2d\u5fc3\u306b\u636e\u3048\u308b\n- Observable Sequence \u3092\u4f7f\u3046\n- \u4f4e\u30ec\u30a4\u30e4\uff08threading, synchronization, thread-safety, concurrency...\uff09\u3092\u96a0\u853d\n- ReactiveX \u306e Java \u5b9f\u88c5\uff1a RxJava\n\nref: http://reactivex.io/intro.html\n\n***\n# Sync vs Async\n\n*** \n# \u540c\u671f\u7684\u306a\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\n\u5358\u4e00\u30c7\u30fc\u30bf\u3092\u53d6\u5f97\uff1a`T getData()`\n\n```java\n// \u5358\u4e00\u30c7\u30fc\u30bf\u3092\u540c\u671f\u7684\u306b\u53d6\u5f97\u3057\u3066\u51fa\u529b\nInteger i = getData();\nSystem.out.println(i);\n```\n\n***\n# \u540c\u671f\u7684\u306a\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\n\u8907\u6570\u30c7\u30fc\u30bf\u3092\u53d6\u5f97\uff1a`Iterable<T> getData`\n\n```java\n// \u8907\u6570\u30c7\u30fc\u30bf\u3092\u540c\u671f\u7684\u306b\u53d6\u5f97\u3057\u3066\u51fa\u529b\nIterable<Integer> iter = getData();\nfor (Integer i : iter) {\n    System.out.println(i);\n}\n```\n\n***\n# \u554f\u984c\n- getData() \u3067\u51e6\u7406\u304c\u30d6\u30ed\u30c3\u30af\u3059\u308b\n- \u8907\u6570\u30c7\u30fc\u30bf\uff1a\u3059\u3079\u3066\u306e\u30c7\u30fc\u30bf\u304c\u63c3\u308f\u306a\u3044\u3068\u51fa\u529b\u3067\u304d\u306a\u3044\n\n\n***\n# \u975e\u540c\u671f\u7684\u306a\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\n\u5358\u4e00\u30c7\u30fc\u30bf\uff1a`Future<T> getData()`\n\n```java\nFuture<Integer> f = getData();\n...(\u305d\u306e\u4ed6\u306e\u51e6\u7406)...\nInteger i = f.get();\nSystem.out.println(i);\n```\n\n***\n# \u975e\u540c\u671f\u7684\u306a\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\n\u8907\u6570\u30c7\u30fc\u30bf\u306e\u53d6\u5f97\uff1a`Observable<T> getData();`\n\n```java\nObservable<Integer> observable = getData();\nobservable.subscribe(i -> System.out.println(i));\n...(\u305d\u306e\u4ed6\u306e\u51e6\u7406)...\n```\n\n***\n# \u5229\u70b9\n- getData() \u3067\u51e6\u7406\u304c\u30d6\u30ed\u30c3\u30af\u3057\u306a\u3044\n- \u8907\u6570\u30c7\u30fc\u30bf\uff1a\u3059\u3079\u3066\u306e\u30c7\u30fc\u30bf\u304c\u63c3\u308f\u306a\u304f\u3066\u3082\u51e6\u7406\u304c\u9032\u3080\n\n*** \n# ReactiveX \u3068\u306f\n- \u975e\u540c\u671f\u30d7\u30ed\u30b0\u30e9\u30e0 \u00d7 \u8907\u6570\u306e\u30c7\u30fc\u30bf\n  - \u30c7\u30b6\u30a4\u30f3\u30d1\u30bf\u30fc\u30f3\u306e _Observer Pattern_ \u3092\u8907\u6570\u5316\u3057\u305f\u3082\u306e\n  - Observables \u304c\u4e2d\u5fc3\n- \u5b9f\u88c5\u306f\u4f55\u3067\u3082\u826f\u3044\n  - \u30b7\u30f3\u30b0\u30eb\u30b9\u30ec\u30c3\u30c9\u3001\u30de\u30eb\u30c1\u30b9\u30ec\u30c3\u30c9\u3001Actor \u30e2\u30c7\u30eb\u3001\u3001\u3001\n\n\n***\n#RxJava\n\n***\n#RxJava\n- Reactive X \u306e JVM \u5411\u3051\u30e9\u30a4\u30d6\u30e9\u30ea\n- Java \u3067\u5b9f\u88c5\u3055\u308c\u3066\u3044\u308b\n- 1.x \u3068 2.x \u3067\u5168\u7136\u9055\u3046\n  - 2.x \u3092\u4e2d\u5fc3\u306b\u89e3\u8aac\n\n***\n# \u6e96\u5099\n- gradle \u306b\u6b21\u3092\u8a2d\u5b9a\n\n```\ncompile \"io.reactivex.rxjava2:rxjava:2.0.4\"\n```\n\n***\n# \u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\n- Pure Java \n- github: TODO\n\n***\n# Observable \u306e\u751f\u6210\n```java\n// \u914d\u5217\u3092\u5143\u306b\u3057\u3066 Observable \u3092\u751f\u6210\nInteger[] numbers = {1, 2, 3, 4, 5};\nObservable<Integer> observable \n    = Observable.fromArray(numbers);\n```\n\n\u21d2 Observable \u306b factory \u30e1\u30bd\u30c3\u30c9\u304c\u305f\u304f\u3055\u3093\u3042\u308b\n\n***\n# subscribe\n\n```java\n// Observables \u3092 subscribe \u3059\u308b\nobservable.subscribe(new Consumer<Integer>() {\n    @Override \n    public void accept(Integer integer) throws Exception {\n        System.out.println(integer);\n    }\n});\n```\n\n***\n# \u5b9f\u884c\u3059\u308b\u3068\n```\n1\n2\n3\n4\n5\n```\n\n***\n# \u5358\u4e00 Item \u306e Observable\n\n```java\n// \u5358\u4e00\u30a2\u30a4\u30c6\u30e0\u306e Observable\nObservable<Integer> observable = Observable.just(1);\n```\n\n\u21d2 2.x \u3067\u306f\u3001Single \u3092\u4f7f\u3063\u305f\u65b9\u304c\u3088\u3044\uff1f\uff08\u8981\u78ba\u8a8d\uff09\n\n***\n# Java 8 \u306e\u30e9\u30e0\u30c0\u3092\u5229\u7528\n\n```java\n// Java 8 \u306e\u30e9\u30e0\u30c0\u69cb\u6587\nobservable.subscribe(integer -> {\n    System.out.println(integer);\n});\n```\n\n\u30e1\u30bd\u30c3\u30c9\u53c2\u7167\u3092\u3064\u304b\u3046\u3068\u3055\u3089\u306b\u7c21\u5358\u306b\n\n```java\nobservable.subscribe(System.out::println);\n```\n\n\n***\n# \u975e\u540c\u671f\u51e6\u7406\n```java\n// 5\u79d2\u5f8c\u306b 1 \u3092\u751f\u6210\u3059\u308b Observable\nFuture<Integer> future = Executors.newSingleThreadExecutor().submit(() -> {\n    // \u30d0\u30c3\u30af\u30b0\u30e9\u30a6\u30f3\u30c9\u30b9\u30ec\u30c3\u30c9\u3067\u5b9f\u884c\n    Thread.sleep(5000);\n    return 1;\n});\n\nObservable<Integer> observable = Observable.fromFuture(future);\nobservable.subscribe(System.out::println); // \u7d42\u4e86\u3057\u306a\u3044\u306e\u3067\u6ce8\u610f\n```\n\n***\n# Operators\n\n***\n# \u30b3\u30ec\u30af\u30b7\u30e7\u30f3\u64cd\u4f5c\n- ReactiveX \u306f\u30b3\u30ec\u30af\u30b7\u30e7\u30f3\u64cd\u4f5c\u304c\u91cd\u8981\n - ReactiveX \u21d2 __Observables__ \u304c\u4e2d\u5fc3\n - Observables \u21d2 \u975e\u540c\u671f \u00d7 __\u8907\u6570\u30c7\u30fc\u30bf__\n - \u8907\u6570\u30c7\u30fc\u30bf \u21d2 __\u30b3\u30ec\u30af\u30b7\u30e7\u30f3__\n- \u4fbf\u5229\u306a\u30b3\u30ec\u30af\u30b7\u30e7\u30f3\u30e1\u30bd\u30c3\u30c9\u3092\u7528\u610f\u3057\u3066\u3044\u308b\n\n***\n# \u4f8b\uff1a\n> \u30c7\u30fc\u30bf\u5217\u306e11~15\u500b\u76ee\u306e\u8981\u7d20\u3092 \"_N_ transformed\" \u3068\u3044\u3046\u5f62\u5f0f\u3067\u9806\u306b\u51fa\u529b\n\n*** \n# \u540c\u671f\u7684\u306a\u624b\u6cd5\n`Iterable<T>` \u306e\u5834\u5408\uff1a\n\n```java\nIterable<Integer> iter = getDataFromLocal();\niter.skip(10)\n  .take(5) \n  .map(s -> s + \"transformed\") \n  .forEach(s -> System.out.println(s));\n```\n\n***\n# \u975e\u540c\u671f\u7684\u306a\u624b\u6cd5\n`Observable<T>` \u306e\u5834\u5408\uff1a\n\n```java\nObservable<Integer> observable = getDataFromNetwork();\nobservable.skip(10)\n  .take(5) \n  .map(i -> i + \"transformed\") \n  .subscribe(s -> System.out.println(s));\n```\n\n***\n# Marble Diagrams\n- \u30e1\u30bd\u30c3\u30c9\u306e\u52b9\u679c\u8aac\u660e\u306b\u4f7f\u308f\u308c\u308b\u56f3\n\n<img src=\"http://reactivex.io/assets/operators/legend.png\">\n\nref: http://reactivex.io/documentation/observable.html\n\n***\n# Pull vs Push\n- Pull\n  - \u540c\u671f\u7684\u624b\u6cd5\u306f Pull\n  - \u30c7\u30fc\u30bf\u3092\u6d88\u8cbb\u3059\u308b\u5074\u304c\u3001\u30c7\u30fc\u30bf\u3092 __Pull__ \u3059\u308b\n-  Push\n  - \u975e\u540c\u671f\u7684\u624b\u6cd5\u306f Push\n  - \u30c7\u30fc\u30bf\u3092\u751f\u6210\u3059\u308b\u5074\u304c\u3001\u30c7\u30fc\u30bf\u3092 __Push__ \u3059\u308b\n\n***\n# \u3059\u3079\u3066\u3092 Push \u306b\n\nReactiveX \u5275\u59cb\u8005 Erik Meijer:\n\n> \u4e16\u754c\u306e\u6700\u5148\u7aef\u306b\u3044\u7d9a\u3051\u305f\u3044\u306e\u306a\u3089\uff0c\u201cpush\u201d\u3059\u308b\u3053\u3068\uff0c\u3064\u307e\u308a\u30ea\u30a2\u30af\u30c6\u30a3\u30d6\u3067\u3042\u308b\u3053\u3068\u304c\u5fc5\u8981\u3060\uff0c\u3068\u6c0f\u306f\u8a00\u3046\u3002\u201cpull\u201d\u3092\u4f7f\u3046\u3068\u3044\u3046\u306e\u306f\uff0c\u57fa\u672c\u7684\u306b\u306f\u30d7\u30ed\u30b0\u30e9\u30e0\u306b\uff0c\u3042\u3089\u3086\u308b\u7a2e\u985e\u306e\u30d6\u30ed\u30c3\u30af\u30dd\u30a4\u30f3\u30c8\u3092\u52a0\u3048\u308b\u3068\u3044\u3046\u3053\u3068\u3067\u3042\u308b\u304b\u3089\u975e\u52b9\u7387\u7684\u3060\uff0c\u3068\u6c0f\u306f\u8a00\u3046\u3002\n\nref: https://www.infoq.com/jp/news/2015/12/erik-meijer-hacker-way\n\n***\n# \u6b21\u56de\n- Android \u3067 ReactiveX \u3092\u4f7f\u3046\uff1f\n\n\n\n\n\n\n\n\n\n\n", "tags": ["RxJava"]}