{"tags": ["Android", "Facebook"], "context": " More than 1 year has passed since last update.Android\u3067Facebook\u307f\u305f\u3044\u306bOGP\u60c5\u5831\u3092\u53d6\u5f97\u3059\u308b\u65b9\u6cd5\u3067\u3059\u3002\n\u3053\u3093\u306a\u3084\u3064\u3067\u3059\u3002\n\n\u30b9\u30af\u30ec\u30a4\u30d4\u30f3\u30b0\u306b\u306fjsoup\u3092\u4f7f\u3044\u307e\u3059\u3002HTML5\u306a\u3069\u306b\u3082\u5bfe\u5fdc\u3057\u3066\u3044\u3066\u4fbf\u5229\u3002\njsoup\n\nbuild.gradle\n\ndependencies {\n    compile 'org.jsoup:jsoup:1.7.3'\n}\n\n\n\nAndroidManifest.xml\n<!-- \u8ffd\u8a18\u3059\u308b -->\n<uses-permission android:name=\"android.permission.INTERNET\"></uses-permission>\n<uses-permission android:name=\"android.permission.ACCESS_NETWORK_STATE\"></uses-permission>\n\n\n\nOgp.java\n/**\n * OGP\u53d6\u5f97\u30af\u30e9\u30b9\n * @author shikato\n *\n */\npublic class Ogp {\n\n    private Context _mContext = null;\n    private Handler _mHandler = null;\n    private String _mUa = \"Mozilla/5.0 (Linux; Android 4.4.2; SOT21 Build/17.1.1.C.1.45) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/34.0.1847.114 Safari/537.36\";\n\n    /**\n     * Ogp\u30ea\u30b9\u30ca\u30fc\n     * @author shikato\n     */\n    public interface OgpListener {\n\n        public static final int NETWORK_ERROR = -1;\n        public static final int UNSUPPORTED_MIME_TYPE_ERROR = -2;\n        public static final int UNKNOWN_HOST_ERROR = -3;\n        public static final int TIMEOUT_ERROR = -4;\n        public static final int UNKNOWN_ERROR = -5;\n\n        public void onSuccess( final OgpData aOgpData );\n\n        public void onError( final int aErrorCode );\n\n        public void onHttpError( final int aHttpStatusCode );\n    }\n\n    public Ogp( final Context aContext ) {\n\n        _mContext = aContext.getApplicationContext();\n        _mHandler = new Handler();\n    }\n\n    public Ogp( final Context aContext, final String aUa ) {\n\n        _mContext = aContext.getApplicationContext();\n        _mHandler = new Handler();\n        _mUa = aUa;\n    } \n\n    public void getOgp( final String aUrl, final OgpListener aListener ) {\n\n        // \u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u306b\u63a5\u7d9a\u3057\u3066\u3044\u308b\u304b\u3069\u3046\u304b \n        if ( !_isConnectedNetwork( _mContext ) ) {\n\n            aListener.onError( OgpListener.NETWORK_ERROR );\n\n            return;\n        }\n\n        ( new Thread( new Runnable() {\n\n            @Override\n            public void run() { \n\n                try {\n\n                    final Connection.Response response =\n                            Jsoup.connect( aUrl ).userAgent( _mUa ).timeout( 5000 ).execute();\n\n                    final int statusCode = response.statusCode();\n\n                    if ( statusCode != 200 ) {\n\n                        _mHandler.post( new Runnable() {\n\n                            @Override\n                            public void run() {\n\n                                aListener.onHttpError( statusCode );\n                            }  \n                        } );\n\n                        return;    \n                    }\n\n                    final Document document = response.parse();\n                    final OgpData ogpData = new OgpData();\n\n                    ogpData.setUrl( aUrl );\n                    ogpData.setTitle( _getTitle( document ) );\n                    ogpData.setDescription( _getDescription( document ) );\n                    ogpData.setImage( _getImage( document, aUrl ) );\n\n                    _mHandler.post( new Runnable() {\n\n                        @Override\n                        public void run() {\n\n                            aListener.onSuccess( ogpData );\n                        }\n                    } );\n\n                } catch ( UnsupportedMimeTypeException e ) {\n\n                    e.printStackTrace();\n\n                    _postError( OgpListener.UNSUPPORTED_MIME_TYPE_ERROR, aListener );\n\n                } catch ( UnknownHostException e ) {\n\n                    e.printStackTrace();\n\n                    _postError( OgpListener.UNKNOWN_HOST_ERROR, aListener );\n\n                } catch ( SocketTimeoutException e ) {\n\n                    e.printStackTrace();\n\n                    _postError( OgpListener.TIMEOUT_ERROR, aListener );\n\n                } catch ( Exception e ) {\n\n                    e.printStackTrace();\n\n                    _postError( OgpListener.UNKNOWN_ERROR, aListener );\n                }\n            }\n\n        } ) ).start();\n    }\n\n    private String _getTitle( final Document aDocument ) {\n\n        // OGP\u30bf\u30a4\u30c8\u30eb\u53d6\u5f97\n        final Elements elements = aDocument.getElementsByAttributeValue( \"property\", \"og:title\" );\n\n        if ( elements.hasAttr( \"content\" ) ) {\n\n            return elements.attr( \"content\" );\n        }\n\n        // OGP\u30bb\u30c3\u30c8\u3055\u308c\u3066\u306a\u3044\u5834\u5408\u306ftitle\u30bf\u30b0\u306e\u5185\u5bb9\u3092\u8fd4\u3059\n        final String title = aDocument.title();\n\n        if ( title == null ) {\n\n            return \"\";\n        }\n\n        return title;\n    }\n\n    private String _getDescription( final Document aDocument ) {\n\n        // OGP description\u53d6\u5f97 \n        Elements elements = aDocument.getElementsByAttributeValue( \"property\", \"og:description\" );\n\n        if ( elements.hasAttr( \"content\" ) ) {\n\n            return elements.attr( \"content\" );\n        }\n\n        // OGP\u30bb\u30c3\u30c8\u3055\u308c\u3066\u306a\u3044\u5834\u5408\u306fdescription\u30bf\u30b0\u306e\u5185\u5bb9\u3092\u8fd4\u3059\n        elements = aDocument.getElementsByAttributeValue( \"property\", \"description\" );\n\n        if ( elements.hasAttr( \"content\" ) ) {\n\n            return elements.attr( \"content\" );\n        }\n\n        return \"\";\n    }\n\n    private String _getImage( final Document aDocument, final String aUrl ) {\n\n        // OGP image\u53d6\u5f97 \n        Elements elements = aDocument.getElementsByAttributeValue( \"property\", \"og:image\" );\n\n        if ( elements.hasAttr( \"content\" ) ) {\n\n            String imgPath = elements.attr( \"content\" );\n\n            // http or https\u3067\u59cb\u307e\u308b\u30d5\u30eb\u30d1\u30b9\u3092\u53d6\u5f97\u3059\u308b\n            imgPath = _getFullPath( imgPath, aUrl );\n\n            if ( imgPath != null ) {\n\n                return imgPath;\n            }\n        }\n\n        // OGP\u306a\u3044\u5834\u5408\u306fitemprop\u5c5e\u6027\u3092\u898b\u308b\n        elements = aDocument.getElementsByAttributeValue( \"itemprop\", \"image\" );\n\n        for ( Element element : elements ) {\n\n            String imgPath = element.attr( \"content\" );\n\n            imgPath = _getFullPath( imgPath, aUrl );\n\n            if ( imgPath == null ) {\n\n                continue;\n            }\n\n            return imgPath;\n        }\n\n        // itemprop\u5c5e\u6027\u3082\u7121\u3044\u5834\u5408\u306fimg\u30bf\u30b0\u3092\u898b\u308b\n        // \u30ea\u30af\u30a8\u30b9\u30c8\u5897\u3048\u308b\u3051\u3069\u30b5\u30a4\u30ba\u3084MIME\u30bf\u30a4\u30d7\u898b\u305f\u308a\u3057\u3066\u3082\u826f\u3044\u304b\u3082\n        elements = aDocument.getElementsByTag( \"img\" );\n\n        for ( Element element : elements ) {\n\n            String imgPath = element.attr( \"src\" );\n\n            imgPath = _getFullPath( imgPath, aUrl );\n\n            if ( imgPath == null ) {\n\n                continue;\n            }\n\n            return imgPath;\n        }\n\n        return \"\";\n    }\n\n    private String _getFullPath( final String aImagePathStr, final String aOgpUrlStr ) {\n\n        if ( aImagePathStr.indexOf( \"http://\" ) == 0 || aImagePathStr.indexOf( \"https://\" ) == 0 ) {\n\n            return aImagePathStr;\n        }\n\n        try {\n\n            final URI ogpUri = new URI( aOgpUrlStr ); \n\n            final URI imgUri = ogpUri.resolve( aImagePathStr ); \n\n            return imgUri.toString();\n\n        } catch ( URISyntaxException e ) {\n\n            return null;\n        }\n    }\n\n    private void _postError( final int aErrorCode, final OgpListener aListener ) {\n\n        _mHandler.post( new Runnable() {\n\n            @Override\n            public void run() {\n\n                aListener.onError( aErrorCode );\n            }\n        } );\n    }\n\n    private static boolean _isConnectedNetwork( final Context aContext ) {\n\n        final ConnectivityManager connectivityManager =\n                (ConnectivityManager)aContext.getSystemService( Context.CONNECTIVITY_SERVICE );\n\n        final NetworkInfo networkInfo = connectivityManager.getActiveNetworkInfo();\n\n        if ( networkInfo != null && networkInfo.isConnected() ) {\n\n            return true;\n        }\n\n        return false;\n    }\n}\n\n\n\nOgpData.java\n/**\n * OGP\u30c7\u30fc\u30bf\u30af\u30e9\u30b9\n * @author shikato\n *\n */\npublic class OgpData {\n\n    private String _mUrl;\n\n    private String _mTitle;\n\n    private String _mDescription;\n\n    private String _mImage;\n\n    public String getUrl() {\n\n        return _mUrl;\n    }\n\n    public void setUrl( final String aUrl ) {\n\n        _mUrl = aUrl;\n    }\n\n    public String getTitle() {\n\n        return _mTitle;\n    }\n\n    public void setTitle( final String aTitle ) {\n\n        _mTitle = aTitle;\n    }\n\n    public String getDescription() {\n\n        return _mDescription;\n    }\n\n    public void setDescription( final String aDescription ) {\n\n        _mDescription = aDescription;\n    }\n\n    public String getImage() {\n\n        return _mImage;\n    }\n\n    public void setImage( final String aImage ) {\n\n        _mImage = aImage;\n    }\n}\n\n\n\nex.\npublic class SampleActivity extends Activity {\n\n    @Override\n    protected void onCreate( final Bundle aSavedInstanceState ) {\n\n        super.onCreate( aSavedInstanceState );\n        setContentView( R.layout.activity_my ); \n\n        final Ogp ogp = new Ogp( getApplicationContext() );\n\n        ogp.getOgp( \"http://sample.com\", new Ogp.OgpListener() {\n\n            @Override\n            public void onSuccess( final OgpData aOgpData ) {\n\n                // \u6210\u529f\u6642\u306e\u51e6\u7406\n                // \u826f\u3044\u611f\u3058\u306bOGP\u3092\u8868\u793a\u3059\u308b\n            }\n\n            @Override\n            public void onError( final int aErrorCode ) {\n\n                // \u30a8\u30e9\u30fc\u6642\u306e\u51e6\u7406\n            }\n\n            @Override\n            public void onHttpError( final int aHttpStatusCode ) {\n\n                // HTTP\u30a8\u30e9\u30fc\u6642\u306e\u51e6\u7406\n            }\n        } );\n    }  \n}\n\n\nGist\n\u753b\u50cf\u306e\u8868\u793a\u306b\u306f\u30e1\u30e2\u30ea\u3084\u30c7\u30a3\u30b9\u30af\u30ad\u30e3\u30c3\u30b7\u30e5\u3092\u7d30\u304b\u304f\u8a2d\u5b9a\u3067\u304d\u308b\u3001Universal Image Loader for Android\u304c\u4fbf\u5229\u3002\nAndroid\u3067Facebook\u307f\u305f\u3044\u306bOGP\u60c5\u5831\u3092\u53d6\u5f97\u3059\u308b\u65b9\u6cd5\u3067\u3059\u3002\n\n\u3053\u3093\u306a\u3084\u3064\u3067\u3059\u3002\n![facebookogp.png](https://qiita-image-store.s3.amazonaws.com/0/47437/781e367c-0fa6-4b8c-0991-3643f983afc2.png)\n\n\n\n\u30b9\u30af\u30ec\u30a4\u30d4\u30f3\u30b0\u306b\u306fjsoup\u3092\u4f7f\u3044\u307e\u3059\u3002HTML5\u306a\u3069\u306b\u3082\u5bfe\u5fdc\u3057\u3066\u3044\u3066\u4fbf\u5229\u3002\n\n[jsoup](http://jsoup.org/)\n\n```groovy:build.gradle\n\ndependencies {\n    compile 'org.jsoup:jsoup:1.7.3'\n}\n```\n```xml:AndroidManifest.xml\n<!-- \u8ffd\u8a18\u3059\u308b -->\n<uses-permission android:name=\"android.permission.INTERNET\"></uses-permission>\n<uses-permission android:name=\"android.permission.ACCESS_NETWORK_STATE\"></uses-permission>\n```\n\n\n```java:Ogp.java\n/**\n * OGP\u53d6\u5f97\u30af\u30e9\u30b9\n * @author shikato\n *\n */\npublic class Ogp {\n\n    private Context _mContext = null;\n    private Handler _mHandler = null;\n    private String _mUa = \"Mozilla/5.0 (Linux; Android 4.4.2; SOT21 Build/17.1.1.C.1.45) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/34.0.1847.114 Safari/537.36\";\n\n    /**\n     * Ogp\u30ea\u30b9\u30ca\u30fc\n     * @author shikato\n     */\n    public interface OgpListener {\n\n        public static final int NETWORK_ERROR = -1;\n        public static final int UNSUPPORTED_MIME_TYPE_ERROR = -2;\n        public static final int UNKNOWN_HOST_ERROR = -3;\n        public static final int TIMEOUT_ERROR = -4;\n        public static final int UNKNOWN_ERROR = -5;\n\n        public void onSuccess( final OgpData aOgpData );\n\n        public void onError( final int aErrorCode );\n\n        public void onHttpError( final int aHttpStatusCode );\n    }\n\n    public Ogp( final Context aContext ) {\n\n        _mContext = aContext.getApplicationContext();\n        _mHandler = new Handler();\n    }\n\n    public Ogp( final Context aContext, final String aUa ) {\n\n        _mContext = aContext.getApplicationContext();\n        _mHandler = new Handler();\n        _mUa = aUa;\n    } \n\n    public void getOgp( final String aUrl, final OgpListener aListener ) {\n\n        // \u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u306b\u63a5\u7d9a\u3057\u3066\u3044\u308b\u304b\u3069\u3046\u304b \n        if ( !_isConnectedNetwork( _mContext ) ) {\n\n            aListener.onError( OgpListener.NETWORK_ERROR );\n\n            return;\n        }\n\n        ( new Thread( new Runnable() {\n\n            @Override\n            public void run() { \n\n                try {\n\n                    final Connection.Response response =\n                            Jsoup.connect( aUrl ).userAgent( _mUa ).timeout( 5000 ).execute();\n\n                    final int statusCode = response.statusCode();\n\n                    if ( statusCode != 200 ) {\n\n                        _mHandler.post( new Runnable() {\n\n                            @Override\n                            public void run() {\n\n                                aListener.onHttpError( statusCode );\n                            }  \n                        } );\n                            \n                        return;    \n                    }\n\n                    final Document document = response.parse();\n                    final OgpData ogpData = new OgpData();\n\n                    ogpData.setUrl( aUrl );\n                    ogpData.setTitle( _getTitle( document ) );\n                    ogpData.setDescription( _getDescription( document ) );\n                    ogpData.setImage( _getImage( document, aUrl ) );\n\n                    _mHandler.post( new Runnable() {\n\n                        @Override\n                        public void run() {\n\n                            aListener.onSuccess( ogpData );\n                        }\n                    } );\n\n                } catch ( UnsupportedMimeTypeException e ) {\n\n                    e.printStackTrace();\n\n                    _postError( OgpListener.UNSUPPORTED_MIME_TYPE_ERROR, aListener );\n\n                } catch ( UnknownHostException e ) {\n\n                    e.printStackTrace();\n\n                    _postError( OgpListener.UNKNOWN_HOST_ERROR, aListener );\n\n                } catch ( SocketTimeoutException e ) {\n\n                    e.printStackTrace();\n\n                    _postError( OgpListener.TIMEOUT_ERROR, aListener );\n\n                } catch ( Exception e ) {\n\n                    e.printStackTrace();\n\n                    _postError( OgpListener.UNKNOWN_ERROR, aListener );\n                }\n            }\n\n        } ) ).start();\n    }\n\n    private String _getTitle( final Document aDocument ) {\n\n        // OGP\u30bf\u30a4\u30c8\u30eb\u53d6\u5f97\n        final Elements elements = aDocument.getElementsByAttributeValue( \"property\", \"og:title\" );\n\n        if ( elements.hasAttr( \"content\" ) ) {\n\n            return elements.attr( \"content\" );\n        }\n\n        // OGP\u30bb\u30c3\u30c8\u3055\u308c\u3066\u306a\u3044\u5834\u5408\u306ftitle\u30bf\u30b0\u306e\u5185\u5bb9\u3092\u8fd4\u3059\n        final String title = aDocument.title();\n\n        if ( title == null ) {\n\n            return \"\";\n        }\n\n        return title;\n    }\n\n    private String _getDescription( final Document aDocument ) {\n\n        // OGP description\u53d6\u5f97 \n        Elements elements = aDocument.getElementsByAttributeValue( \"property\", \"og:description\" );\n\n        if ( elements.hasAttr( \"content\" ) ) {\n\n            return elements.attr( \"content\" );\n        }\n\n        // OGP\u30bb\u30c3\u30c8\u3055\u308c\u3066\u306a\u3044\u5834\u5408\u306fdescription\u30bf\u30b0\u306e\u5185\u5bb9\u3092\u8fd4\u3059\n        elements = aDocument.getElementsByAttributeValue( \"property\", \"description\" );\n\n        if ( elements.hasAttr( \"content\" ) ) {\n\n            return elements.attr( \"content\" );\n        }\n\n        return \"\";\n    }\n\n    private String _getImage( final Document aDocument, final String aUrl ) {\n\n        // OGP image\u53d6\u5f97 \n        Elements elements = aDocument.getElementsByAttributeValue( \"property\", \"og:image\" );\n\n        if ( elements.hasAttr( \"content\" ) ) {\n\n            String imgPath = elements.attr( \"content\" );\n\n            // http or https\u3067\u59cb\u307e\u308b\u30d5\u30eb\u30d1\u30b9\u3092\u53d6\u5f97\u3059\u308b\n            imgPath = _getFullPath( imgPath, aUrl );\n\n            if ( imgPath != null ) {\n\n                return imgPath;\n            }\n        }\n\n        // OGP\u306a\u3044\u5834\u5408\u306fitemprop\u5c5e\u6027\u3092\u898b\u308b\n        elements = aDocument.getElementsByAttributeValue( \"itemprop\", \"image\" );\n\n        for ( Element element : elements ) {\n\n            String imgPath = element.attr( \"content\" );\n\n            imgPath = _getFullPath( imgPath, aUrl );\n\n            if ( imgPath == null ) {\n\n                continue;\n            }\n\n            return imgPath;\n        }\n\n        // itemprop\u5c5e\u6027\u3082\u7121\u3044\u5834\u5408\u306fimg\u30bf\u30b0\u3092\u898b\u308b\n        // \u30ea\u30af\u30a8\u30b9\u30c8\u5897\u3048\u308b\u3051\u3069\u30b5\u30a4\u30ba\u3084MIME\u30bf\u30a4\u30d7\u898b\u305f\u308a\u3057\u3066\u3082\u826f\u3044\u304b\u3082\n        elements = aDocument.getElementsByTag( \"img\" );\n\n        for ( Element element : elements ) {\n\n            String imgPath = element.attr( \"src\" );\n\n            imgPath = _getFullPath( imgPath, aUrl );\n\n            if ( imgPath == null ) {\n\n                continue;\n            }\n\n            return imgPath;\n        }\n\n        return \"\";\n    }\n\n    private String _getFullPath( final String aImagePathStr, final String aOgpUrlStr ) {\n\n        if ( aImagePathStr.indexOf( \"http://\" ) == 0 || aImagePathStr.indexOf( \"https://\" ) == 0 ) {\n            \n            return aImagePathStr;\n        }\n\n        try {\n\n            final URI ogpUri = new URI( aOgpUrlStr ); \n\n            final URI imgUri = ogpUri.resolve( aImagePathStr ); \n\n            return imgUri.toString();\n\n        } catch ( URISyntaxException e ) {\n\n            return null;\n        }\n    }\n\n    private void _postError( final int aErrorCode, final OgpListener aListener ) {\n\n        _mHandler.post( new Runnable() {\n\n            @Override\n            public void run() {\n\n                aListener.onError( aErrorCode );\n            }\n        } );\n    }\n\n    private static boolean _isConnectedNetwork( final Context aContext ) {\n\n        final ConnectivityManager connectivityManager =\n                (ConnectivityManager)aContext.getSystemService( Context.CONNECTIVITY_SERVICE );\n\n        final NetworkInfo networkInfo = connectivityManager.getActiveNetworkInfo();\n\n        if ( networkInfo != null && networkInfo.isConnected() ) {\n\n            return true;\n        }\n\n        return false;\n    }\n}\n``` \n\n```java:OgpData.java \n/**\n * OGP\u30c7\u30fc\u30bf\u30af\u30e9\u30b9\n * @author shikato\n *\n */\npublic class OgpData {\n\n    private String _mUrl;\n\n    private String _mTitle;\n\n    private String _mDescription;\n\n    private String _mImage;\n\n    public String getUrl() {\n\n        return _mUrl;\n    }\n\n    public void setUrl( final String aUrl ) {\n\n        _mUrl = aUrl;\n    }\n\n    public String getTitle() {\n\n        return _mTitle;\n    }\n\n    public void setTitle( final String aTitle ) {\n\n        _mTitle = aTitle;\n    }\n\n    public String getDescription() {\n\n        return _mDescription;\n    }\n\n    public void setDescription( final String aDescription ) {\n\n        _mDescription = aDescription;\n    }\n\n    public String getImage() {\n\n        return _mImage;\n    }\n\n    public void setImage( final String aImage ) {\n\n        _mImage = aImage;\n    }\n}\n```\n\n```java:ex.\npublic class SampleActivity extends Activity {\n\n    @Override\n    protected void onCreate( final Bundle aSavedInstanceState ) {\n\n        super.onCreate( aSavedInstanceState );\n        setContentView( R.layout.activity_my ); \n\n        final Ogp ogp = new Ogp( getApplicationContext() );\n\n        ogp.getOgp( \"http://sample.com\", new Ogp.OgpListener() {\n\n            @Override\n            public void onSuccess( final OgpData aOgpData ) {\n\n                // \u6210\u529f\u6642\u306e\u51e6\u7406\n                // \u826f\u3044\u611f\u3058\u306bOGP\u3092\u8868\u793a\u3059\u308b\n            }\n\n            @Override\n            public void onError( final int aErrorCode ) {\n\n                // \u30a8\u30e9\u30fc\u6642\u306e\u51e6\u7406\n            }\n\n            @Override\n            public void onHttpError( final int aHttpStatusCode ) {\n\n                // HTTP\u30a8\u30e9\u30fc\u6642\u306e\u51e6\u7406\n            }\n        } );\n    }  \n}\n```\n\n[Gist](https://gist.github.com/shikato/5a872aede8f0354bc263)\n\n\u753b\u50cf\u306e\u8868\u793a\u306b\u306f\u30e1\u30e2\u30ea\u3084\u30c7\u30a3\u30b9\u30af\u30ad\u30e3\u30c3\u30b7\u30e5\u3092\u7d30\u304b\u304f\u8a2d\u5b9a\u3067\u304d\u308b\u3001[Universal Image Loader for Android](https://github.com/nostra13/Android-Universal-Image-Loader)\u304c\u4fbf\u5229\u3002\n\n\n"}