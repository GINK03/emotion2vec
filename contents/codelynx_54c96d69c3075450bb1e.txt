{"context": "Swift 2.2 \u304b\u3089\u3000Swift 3.0 \u306b\u81ea\u52d5\u5909\u63db\u3057\u305f\u5834\u5408\u306b\u3001\u3046\u307e\u304f\u3044\u3063\u305f\u5834\u5408\u3068\u624b\u52d5\u3067\u76f4\u3055\u306a\u3051\u308c\u3070\u3044\u3051\u306a\u304b\u3063\u305f\u5834\u5408\u306e\u307e\u3068\u3081\u3002\u81ea\u5206\u306e\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u5185\u3067\u3001\u5b9f\u969b\u306b\u767a\u751f\u3057\u305f\u5185\u5bb9\u3092\u30e1\u30e2\u306b\u306e\u3057\u3066\u3044\u305f\u3082\u306e\u3067\u3059\u3002\u751f\u3005\u3057\u3044\u540d\u524d\u306f\u7de8\u96c6\u3057\u3066\u3042\u308a\u307e\u3059\u3002\u307e\u305f\u3001\u30e1\u30e2\u3092\u53d6\u308b\u6642\u306b\u64cd\u4f5c\u30df\u30b9\u306a\u3069\u304c\u6df7\u5728\u3057\u3066\u3044\u308b\u5834\u5408\u3082\u3042\u308b\u306e\u3067\u3001\u3054\u7559\u610f\u304f\u3060\u3055\u3044\u307e\u305b\u3002\n\nFoundation\n// before\nprivate let _gregorian = NSCalendar(calendarIdentifier: NSCalendarIdentifierGregorian)!\n\n// after\nprivate let _gregorian = Calendar(identifier: Calendar.Identifier.gregorian)\n\nNSCalendar(calendarIdentifier:)\u3000\u306e\u30a4\u30cb\u30b7\u30e3\u30e9\u30a4\u30b6\u306f nil \u3092\u8fd4\u3059\u53ef\u80fd\u6027\u304c\u3042\u308b\u304c\u3001Calendar(identifier:) \u306fSwift\u306e\u6587\u6cd5\u7684\u306b\u4e0d\u6b63\u306a\u5024\u3092\u6e21\u305b\u306a\u304f\u306a\u308a\u3001\u623b\u308a\u5024\u306f\u30aa\u30d7\u30b7\u30e7\u30ca\u30eb\u3067\u306f\u306a\u3044\u3002\n\n// before\nlet defaults = NSUserDefaults.standardUserDefaults()\nif let data = defaults.valueForKey(\"peerID\") as? NSData {\n}\n\n// after\nlet defaults = UserDefaults.standard\nif let data = defaults.value(forKey: \"peerID\") as? Data {\n}\n\nstandardUserDefaults() \u2192 standard\n\n// before\nlet scanner = NSScanner(string: item)\n\n// after\nlet scanner = Scanner(string: item)\n\nNSScanner -> Scanner\n\n\nCore Graphics\n// before\nreturn CGSizeMake(self.cornerRadius, self.cornerRadius)\n\n// after\nreturn CGSize(width: self.cornerRadius, height: self.cornerRadius)\n\n\nCGSizeMake\u3000\u2192 CGSize\n\n// before\nvar bounds = self.bounds\nvar bottomRect = CGRectZero\nCGRectDivide(bounds, &bottomRect, &bounds, buttonHeight, .MaxYEdge)\n\n// after\n(bottomRect, bounds) = bounds.divided(atDistance: buttonHeight, from: .maxYEdge)\n\nCGRectDivide \u2192\u3000bounds.divided()\u3002 bounds.divided()\u306f\u3000Tuple \u3092\u8fd4\u3059\u3002\u81ea\u52d5\u5909\u63db\u306f\u307e\u305a\u5931\u6557\u3002\n\n// before\nlet context = UIGraphicsGetCurrentContext()\nCGContextSetStrokeColorWithColor(context, UIColor(white: 0, alpha: 0.5).CGColor)\n\n// after\nlet context = UIGraphicsGetCurrentContext()!\ncontext.setStrokeColor(UIColor(white: 0, alpha: 0.5).cgColor)\n\nCGContextSetStrokeColorWithColor() -> context.setStrokeColor()\n\n// before\nCGContextMoveToPoint(context, x, y)\nCGContextAddLineToPoint(context, x, CGRectGetMaxY(self.bounds))\nCGContextStrokePath(context)\n\n// after\ncontext.move(to: CGPoint(x: x, y: y))\ncontext.addLine(to: CGPoint(x: x, y: (self.bounds).maxY))\ncontext.strokePath()\n\nCGContext \u306f\u307e\u308b\u3067\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u304b\u306e\u3088\u3046\u306a\u66f8\u304d\u65b9\u304c\u53ef\u80fd\u3002\n\n// before\nextension CGRect {\n    var width: CGFloat { return CGRectGetWidth(self) }\n    var height: CGFloat { return CGRectGetHeight(self) }\n}\n\n// after\nextension CGRect {\n    //var width: CGFloat { return self.width }\n    //var height: CGFloat { return self.height }\n}\n\nwidth, height \u306f Swift 3 \u3067\u7528\u610f\u3055\u308c\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3057\u305f\u3002 width, height \u306f\u4ee5\u524d\u304b\u3089\u3042\u3063\u305f\u6a21\u69d8\u3002Swift 3 \u3067\u30a8\u30e9\u30fc\u306b\u306a\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3057\u305f\u3002\n\n// before\nif let document = CGPDFDocumentCreateWithURL(NSURL.fileURLWithPath(fullpath)) {\n}\n\n// after\nif let document = CGPDFDocument(URL(fileURLWithPath: fullpath) as NSURL) {\n}\n\n\n// before\nlet objects = array.reverse()\n\n// after\nlet objects = array.reversed()\n\n\n// before\nclass ZCache<T: AnyObject> {\n    private var cache = NSCache()\n    ...\n}\n\n// after\n/*\nclass ZCache<T: AnyObject> {\n    private var cache = NSCache()\n    ...\n}\n*/\n\nNSCache \u3092 Generics \u898b\u305f\u3044\u306b\u4f7f\u3048\u308b\u3088\u3046\u306b\u3059\u308b\u3000NSCache \u306e\u30e9\u30c3\u30d1\u30fc\u30af\u30e9\u30b9\u3092\u958b\u767a\u3057\u305f\u304c\u3001Swift 3 \u3067\u306f NSCache \u81ea\u4f53\u304c Generics \u306a\u306e\u3067\u3001\u30e9\u30c3\u30d1\u30fc\u306e\u5b58\u5728\u610f\u7fa9\u304c\u306a\u304f\u306a\u3063\u305f\uff1f\n\n// before\nif let hashValue = self.object { return unsafeAddressOf(object).hashValue }\n\n// after\nif let hashValue = self.object { return Unmanaged.passUnretained(object).toOpaque().hashValue }\n\n\u306a\u305c\u3053\u3046\u306a\u3063\u305f\u304b\u2026\n\n// before\nlet value = object.integerValue\nlet integerLength = sizeof(value.dynamicType)\n\n// after\nlet value = object.integerValue\nlet integerLength = MemoryLayout<UInt32>.size\n\nintegerValue \u306e\u623b\u308a\u5024\u3092\u5c06\u6765\u306b\u308f\u305f\u3063\u3066\u3001UInt32 4\u30d0\u30a4\u30c8 \u3067\u3042\u308b\u4e8b\u3092\u78ba\u8a8d\u3057\u305f\u3044\u304c\u3001\u540c\u69d8\u306e\u66f8\u304d\u65b9\u306f\u3080\u3065\u304b\u3057\u305d\u3046\u3002\u8ab0\u304b\u304c\u3001object \u306e integer \u306e\u623b\u308a\u5024\u306e\u578b\u3092\u5909\u66f4\u3057\u3066\u3082\u3001\u30e9\u30f3\u30bf\u30a4\u30e0\u6642\u306a\u3069\u306b\u6355\u307e\u3048\u308b\u4e8b\u306f\u3080\u3065\u304b\u3057\u305d\u3046\u3002\n\n// before\nlet data: NSData = ...\nlet string = String(bytes: data.bytes, length: data.length, encoding: NSWindowsCP1252StringEncoding)\n\n// after\nlet data: Data = ...\nlet string = String(data: data, encoding: String.Encoding.windowsCP1252)\n\ndata.bytes\u3000\u2192\u3000data \u305d\u306e\u307e\u307e\u6e21\u3059\u3002type\n\n// before\nCGPathAddArcToPoint(pathRef, nil, l, t, l, t+radius, radius)\n\n// after\npathRef.addArc(tangent1End: CGPoint(x: l, y: t), tangent2End: CGPoint(x: l, y: t+radius), radius: radius)\n\nx, y \u304c CGPoint \u306b\u306a\u3063\u305f\u308a\u3001tangent1End, tangent2End\u3000\u306a\u3093\u3066\u540d\u524d\u304c\u3064\u3044\u305f\u308a\u2026\n\n// before\nvar isDir: ObjCBool = false\nif NSFileManager.defaultManager().fileExistsAtPath(directory, isDirectory: &isDir) && isDir {\n}\n\n// after\nvar isDir: ObjCBool = false\nif FileManager.default.fileExists(atPath: directory, isDirectory: &isDir) && isDir.boolValue {\n}\n\nNSFileManager\u3000\u2192 FileManager, isDir \u2192 isDir.boolValue\n\n// before\nlet MyNotification = \"MyNotification\"\n\nNSNotificationCenter.defaultCenter().postNotificationName(MyNotification, object: nil)\n\n\n// after\nextension Notification.Name {\n    static let redrawPageNotification = Notification.Name(\"MyNotification\")\n}\n\nNotificationCenter.default.removeObserver(self, name: .redrawPageNotification, object: nil)\n\n\n// alternative - auto\nNotificationCenter.default.post(name: NSNotification.Name(rawValue: MyNotification), object: nil)\n\n\nGCD\n// before\ndispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0)) {\n}\n\n// after\nDispatchQueue.global(qos: .default).async {\n}\n\nGCD \u306e\u5909\u308f\u308a\u65b9\u3082\u5927\u80c6\u3067\u3059\u3002\n\nCore Data\n// before\nlet request = NSFetchRequest(entityName: entityItem)\nrequest.predicate = NSPredicate(format: \"(url == %@) AND (feed == %@)\", link, feed)\nlet objects = try! self..managedObjectContext.executeFetchRequest(request)\nreturn objects.first as? RSSItem\n\n// after\nlet request = NSFetchRequest<RSSItem>(entityName: entityItem)\nrequest.predicate = NSPredicate(format: \"(url == %@) AND (feed == %@)\", link, feed)\nlet objects = try! self.managedObjectContext.fetch(request)\nreturn objects.first\n\nNSFetchRequest() \u2192 NSFetchRequest<RSSItem>()\u3001Core Data \u3082 Generics \u3067\u6271\u3048\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3057\u305f\u3002\n\nAppKit\n// before\nlet mask: NSEventModifierFlags = [.ShiftKeyMask, .ControlKeyMask, .AlternateKeyMask, .CommandKeyMask]\n\n\n// after\nlet mask: NSEventModifierFlags = [.shift, .control, .option, .command]\n\n// auto\nlet mask: NSEventModifierFlags = [.shift, .control, .AlternateKeyMask, .command]\n\n\u81ea\u52d5\u5909\u63db\u3067\u3001AlternateKeyMask\u306f\u306a\u305c\u304b\u5909\u63db\u3057\u3066\u304f\u308c\u307e\u305b\u3093\u3002\n\nUIKit\n// before\noverride func drawRect(rect: CGRect) {\n}\n\n// after\noverride func draw(_ rect: CGRect) {\n}\n\ndrawRect \u2192 draw\n\n// before\nself.backgroundColor = UIColor.clearColor()\nself.layer.shadowColor = UIColor.blackColor().CGColor\n\n\n// after\nself.backgroundColor = UIColor.clear\nself.layer.shadowColor = UIColor.black.cgColor\n\n\n// before\n@IBAction func playAction(sender: AnyObject) {\n}\n\n// after\n@IBAction func playAction(_ sender: AnyObject) {\n}\n\n\n// before\nlet myView: MyView? = myViews.filter { CGRectContainsPoint($0.bounds, gesture.locationInView($0)) }.first\n\n// after\nlet myView: MyView? = myViews.filter { $0.bounds.contains(gesture.location(in: $0)) }.first\n\n\n// before\nself.tableView.registerClass(UITableViewCell.self, forCellReuseIdentifier: cellIdentifier)\n\n\n// after\nself.tableView.register(UITableViewCell.self, forCellReuseIdentifier: cellIdentifier)\n\nregisterClass\u3000\u2192 register\n\n// before\nself.dismissViewControllerAnimated(true, completion: nil)\n\n// after\nself.dismiss(animated: true, completion: nil)\n\nViewController\u304c\u6d88\u5931\u3002\n\n// before\noverride func supportedInterfaceOrientations() -> UIInterfaceOrientationMask {\n}\n\n// after\noverride var supportedInterfaceOrientations : UIInterfaceOrientationMask {\n}\n\n\u30e1\u30bd\u30c3\u30c9\uff08\u95a2\u6570\uff09\u304b\u3089\u3001\u30d7\u30ed\u30d1\u30c6\u30a3\u3078\n\n// before\ncurrentViewController.willMoveToParentViewController(nil)\n\n// after\ncurrentViewController.willMove(toParentViewController: nil)\n\nwillMoveToParentViewController() \u2192 willMove(toParentViewController:)\n\n// before\noverride func touchesCancelled(touches: Set<UITouch>?, withEvent event: UIEvent?) {\n    if let touches = touches {\n        for touch in touches {\n        }\n    }\n}\n\n// after\noverride func touchesCancelled(_ touches: Set<UITouch>, with event: UIEvent?) {\n    for touch in touches {\n    }\n}\n\nSet<UITouch>? \u2192 Set<UITouch> \u306a\u306e\u3067\u3001optional binding \u304c\u4e0d\u8981\u306b\u306a\u3063\u305f\u3002\n\n\u307e\u3068\u3081\n\u5fc5\u8981\u304c\u3042\u308c\u3070\u3001\u9806\u6b21\u8ffd\u52a0\u3057\u3066\u3044\u3053\u3046\u3068\u601d\u3044\u307e\u3059\u3002\nXcode Version 8.0 (8A218a)\nApple Swift version 3.0 (swiftlang-800.0.46.2 clang-800.0.38)\n\nSwift 2.2 \u304b\u3089\u3000Swift 3.0 \u306b\u81ea\u52d5\u5909\u63db\u3057\u305f\u5834\u5408\u306b\u3001\u3046\u307e\u304f\u3044\u3063\u305f\u5834\u5408\u3068\u624b\u52d5\u3067\u76f4\u3055\u306a\u3051\u308c\u3070\u3044\u3051\u306a\u304b\u3063\u305f\u5834\u5408\u306e\u307e\u3068\u3081\u3002\u81ea\u5206\u306e\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u5185\u3067\u3001\u5b9f\u969b\u306b\u767a\u751f\u3057\u305f\u5185\u5bb9\u3092\u30e1\u30e2\u306b\u306e\u3057\u3066\u3044\u305f\u3082\u306e\u3067\u3059\u3002\u751f\u3005\u3057\u3044\u540d\u524d\u306f\u7de8\u96c6\u3057\u3066\u3042\u308a\u307e\u3059\u3002\u307e\u305f\u3001\u30e1\u30e2\u3092\u53d6\u308b\u6642\u306b\u64cd\u4f5c\u30df\u30b9\u306a\u3069\u304c\u6df7\u5728\u3057\u3066\u3044\u308b\u5834\u5408\u3082\u3042\u308b\u306e\u3067\u3001\u3054\u7559\u610f\u304f\u3060\u3055\u3044\u307e\u305b\u3002\n\n\n# Foundation\n\n```.swift\n// before\nprivate let _gregorian = NSCalendar(calendarIdentifier: NSCalendarIdentifierGregorian)!\n```\n\n```.swift\n// after\nprivate let _gregorian = Calendar(identifier: Calendar.Identifier.gregorian)\n```\n\n`NSCalendar(calendarIdentifier:)`\u3000\u306e\u30a4\u30cb\u30b7\u30e3\u30e9\u30a4\u30b6\u306f `nil` \u3092\u8fd4\u3059\u53ef\u80fd\u6027\u304c\u3042\u308b\u304c\u3001`Calendar(identifier:)` \u306fSwift\u306e\u6587\u6cd5\u7684\u306b\u4e0d\u6b63\u306a\u5024\u3092\u6e21\u305b\u306a\u304f\u306a\u308a\u3001\u623b\u308a\u5024\u306f\u30aa\u30d7\u30b7\u30e7\u30ca\u30eb\u3067\u306f\u306a\u3044\u3002\n\n---\n\n```.swift\n// before\nlet defaults = NSUserDefaults.standardUserDefaults()\nif let data = defaults.valueForKey(\"peerID\") as? NSData {\n}\n```\n\n```.swift\n// after\nlet defaults = UserDefaults.standard\nif let data = defaults.value(forKey: \"peerID\") as? Data {\n}\n```\n\n`standardUserDefaults()` \u2192 `standard`\n\n---\n\n```.swift\n// before\nlet scanner = NSScanner(string: item)\n```\n\n```.swift\n// after\nlet scanner = Scanner(string: item)\n```\n\n`NSScanner` -> `Scanner`\n\n---\n\n# Core Graphics\n\n```.swift\n// before\nreturn CGSizeMake(self.cornerRadius, self.cornerRadius)\n```\n\n```.swift\n// after\nreturn CGSize(width: self.cornerRadius, height: self.cornerRadius)\n\n```\n`CGSizeMake`\u3000\u2192 `CGSize`\n\n---\n\n```.swift\n// before\nvar bounds = self.bounds\nvar bottomRect = CGRectZero\nCGRectDivide(bounds, &bottomRect, &bounds, buttonHeight, .MaxYEdge)\n```\n\n```.swift\n// after\n(bottomRect, bounds) = bounds.divided(atDistance: buttonHeight, from: .maxYEdge)\n```\n`CGRectDivide` \u2192\u3000`bounds.divided()`\u3002 `bounds.divided()`\u306f\u3000Tuple \u3092\u8fd4\u3059\u3002\u81ea\u52d5\u5909\u63db\u306f\u307e\u305a\u5931\u6557\u3002\n\n---\n\n```.swift\n// before\nlet context = UIGraphicsGetCurrentContext()\nCGContextSetStrokeColorWithColor(context, UIColor(white: 0, alpha: 0.5).CGColor)\n```\n\n```.swift\n// after\nlet context = UIGraphicsGetCurrentContext()!\ncontext.setStrokeColor(UIColor(white: 0, alpha: 0.5).cgColor)\n```\n\n`CGContextSetStrokeColorWithColor()` -> `context.setStrokeColor()`\n\n---\n\n\n```.swift\n// before\nCGContextMoveToPoint(context, x, y)\nCGContextAddLineToPoint(context, x, CGRectGetMaxY(self.bounds))\nCGContextStrokePath(context)\n```\n\n```.swift\n// after\ncontext.move(to: CGPoint(x: x, y: y))\ncontext.addLine(to: CGPoint(x: x, y: (self.bounds).maxY))\ncontext.strokePath()\n```\n`CGContext` \u306f\u307e\u308b\u3067\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u304b\u306e\u3088\u3046\u306a\u66f8\u304d\u65b9\u304c\u53ef\u80fd\u3002\n\n---\n\n```.swift\n// before\nextension CGRect {\n\tvar width: CGFloat { return CGRectGetWidth(self) }\n\tvar height: CGFloat { return CGRectGetHeight(self) }\n}\n```\n\n```.swift\n// after\nextension CGRect {\n\t//var width: CGFloat { return self.width }\n\t//var height: CGFloat { return self.height }\n}\n```\n\n~~`width`, `height` \u306f Swift 3 \u3067\u7528\u610f\u3055\u308c\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3057\u305f\u3002~~ `width`, `height` \u306f\u4ee5\u524d\u304b\u3089\u3042\u3063\u305f\u6a21\u69d8\u3002Swift 3 \u3067\u30a8\u30e9\u30fc\u306b\u306a\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3057\u305f\u3002\n\n\n---\n\n```.swift\n// before\nif let document = CGPDFDocumentCreateWithURL(NSURL.fileURLWithPath(fullpath)) {\n}\n```\n\n```.swift\n// after\nif let document = CGPDFDocument(URL(fileURLWithPath: fullpath) as NSURL) {\n}\n```\n\n---\n\n\n```.swift\n// before\nlet objects = array.reverse()\n```\n\n```.swift\n// after\nlet objects = array.reversed()\n```\n\n---\n\n```.swift\n// before\nclass ZCache<T: AnyObject> {\n\tprivate var cache = NSCache()\n\t...\n}\n```\n\n```.swift\n// after\n/*\nclass ZCache<T: AnyObject> {\n\tprivate var cache = NSCache()\n\t...\n}\n*/\n```\n\n`NSCache` \u3092 Generics \u898b\u305f\u3044\u306b\u4f7f\u3048\u308b\u3088\u3046\u306b\u3059\u308b\u3000`NSCache` \u306e\u30e9\u30c3\u30d1\u30fc\u30af\u30e9\u30b9\u3092\u958b\u767a\u3057\u305f\u304c\u3001Swift 3 \u3067\u306f `NSCache` \u81ea\u4f53\u304c Generics \u306a\u306e\u3067\u3001\u30e9\u30c3\u30d1\u30fc\u306e\u5b58\u5728\u610f\u7fa9\u304c\u306a\u304f\u306a\u3063\u305f\uff1f\n\n---\n\n\n```.swift\n// before\nif let hashValue = self.object { return unsafeAddressOf(object).hashValue }\n```\n\n```.swift\n// after\nif let hashValue = self.object { return Unmanaged.passUnretained(object).toOpaque().hashValue }\n```\n\n\u306a\u305c\u3053\u3046\u306a\u3063\u305f\u304b\u2026\n\n---\n\n```.swift\n// before\nlet value = object.integerValue\nlet integerLength = sizeof(value.dynamicType)\n```\n\n```.swift\n// after\nlet value = object.integerValue\nlet integerLength = MemoryLayout<UInt32>.size\n```\n\n`integerValue` \u306e\u623b\u308a\u5024\u3092\u5c06\u6765\u306b\u308f\u305f\u3063\u3066\u3001`UInt32` 4\u30d0\u30a4\u30c8 \u3067\u3042\u308b\u4e8b\u3092\u78ba\u8a8d\u3057\u305f\u3044\u304c\u3001\u540c\u69d8\u306e\u66f8\u304d\u65b9\u306f\u3080\u3065\u304b\u3057\u305d\u3046\u3002\u8ab0\u304b\u304c\u3001object \u306e integer \u306e\u623b\u308a\u5024\u306e\u578b\u3092\u5909\u66f4\u3057\u3066\u3082\u3001\u30e9\u30f3\u30bf\u30a4\u30e0\u6642\u306a\u3069\u306b\u6355\u307e\u3048\u308b\u4e8b\u306f\u3080\u3065\u304b\u3057\u305d\u3046\u3002\n\n---\n\n\n```.swift\n// before\nlet data: NSData = ...\nlet string = String(bytes: data.bytes, length: data.length, encoding: NSWindowsCP1252StringEncoding)\n```\n\n```.swift\n// after\nlet data: Data = ...\nlet string = String(data: data, encoding: String.Encoding.windowsCP1252)\n```\n\n`data.bytes`\u3000\u2192\u3000`data` \u305d\u306e\u307e\u307e\u6e21\u3059\u3002type\n\n---\n\n```.swift\n// before\nCGPathAddArcToPoint(pathRef, nil, l, t, l, t+radius, radius)\n```\n\n```.swift\n// after\npathRef.addArc(tangent1End: CGPoint(x: l, y: t), tangent2End: CGPoint(x: l, y: t+radius), radius: radius)\n```\n\n`x`, `y` \u304c `CGPoint` \u306b\u306a\u3063\u305f\u308a\u3001`tangent1End`, `tangent2End`\u3000\u306a\u3093\u3066\u540d\u524d\u304c\u3064\u3044\u305f\u308a\u2026\n\n---\n\n\n```.swift\n// before\nvar isDir: ObjCBool = false\nif NSFileManager.defaultManager().fileExistsAtPath(directory, isDirectory: &isDir) && isDir {\n}\n```\n\n```.swift\n// after\nvar isDir: ObjCBool = false\nif FileManager.default.fileExists(atPath: directory, isDirectory: &isDir) && isDir.boolValue {\n}\n```\n`NSFileManager`\u3000\u2192 `FileManager`, `isDir` \u2192 `isDir.boolValue`\n\n---\n\n\n\n```.swift\n// before\nlet MyNotification = \"MyNotification\"\n\nNSNotificationCenter.defaultCenter().postNotificationName(MyNotification, object: nil)\n\n```\n\n```.swift\n// after\nextension Notification.Name {\n    static let redrawPageNotification = Notification.Name(\"MyNotification\")\n}\n\nNotificationCenter.default.removeObserver(self, name: .redrawPageNotification, object: nil)\n\n```\n\n```.swift\n// alternative - auto\nNotificationCenter.default.post(name: NSNotification.Name(rawValue: MyNotification), object: nil)\n```\n\n# GCD\n\n```.swift\n// before\ndispatch_async(dispatch_get_global_queue(DISPATCH_QUEUE_PRIORITY_DEFAULT, 0)) {\n}\n```\n\n```.swift\n// after\nDispatchQueue.global(qos: .default).async {\n}\n```\n\nGCD \u306e\u5909\u308f\u308a\u65b9\u3082\u5927\u80c6\u3067\u3059\u3002\n\n\n# Core Data\n\n```.swift\n// before\nlet request = NSFetchRequest(entityName: entityItem)\nrequest.predicate = NSPredicate(format: \"(url == %@) AND (feed == %@)\", link, feed)\nlet objects = try! self..managedObjectContext.executeFetchRequest(request)\nreturn objects.first as? RSSItem\n```\n\n```.swift\n// after\nlet request = NSFetchRequest<RSSItem>(entityName: entityItem)\nrequest.predicate = NSPredicate(format: \"(url == %@) AND (feed == %@)\", link, feed)\nlet objects = try! self.managedObjectContext.fetch(request)\nreturn objects.first\n```\n\n`NSFetchRequest()` \u2192 `NSFetchRequest<RSSItem>()`\u3001Core Data \u3082 Generics \u3067\u6271\u3048\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3057\u305f\u3002\n\n\n# AppKit\n\n```.swift\n// before\nlet mask: NSEventModifierFlags = [.ShiftKeyMask, .ControlKeyMask, .AlternateKeyMask, .CommandKeyMask]\n\n```\n\n```.swift\n// after\nlet mask: NSEventModifierFlags = [.shift, .control, .option, .command]\n```\n\n```.swift\n// auto\nlet mask: NSEventModifierFlags = [.shift, .control, .AlternateKeyMask, .command]\n```\n\n\u81ea\u52d5\u5909\u63db\u3067\u3001`AlternateKeyMask`\u306f\u306a\u305c\u304b\u5909\u63db\u3057\u3066\u304f\u308c\u307e\u305b\u3093\u3002\n\n\n\n# UIKit\n\n```.swift\n// before\noverride func drawRect(rect: CGRect) {\n}\n```\n\n```.swift\n// after\noverride func draw(_ rect: CGRect) {\n}\n```\n\n`drawRect` \u2192 `draw`\n\n---\n\n```.swift\n// before\nself.backgroundColor = UIColor.clearColor()\nself.layer.shadowColor = UIColor.blackColor().CGColor\n\n```\n\n```.swift\n// after\nself.backgroundColor = UIColor.clear\nself.layer.shadowColor = UIColor.black.cgColor\n```\n\n---\n\n```.swift\n// before\n@IBAction func playAction(sender: AnyObject) {\n}\n```\n\n```.swift\n// after\n@IBAction func playAction(_ sender: AnyObject) {\n}\n```\n\n---\n\n```.swift\n// before\nlet myView: MyView? = myViews.filter { CGRectContainsPoint($0.bounds, gesture.locationInView($0)) }.first\n```\n\n```.swift\n// after\nlet myView: MyView? = myViews.filter { $0.bounds.contains(gesture.location(in: $0)) }.first\n```\n\n---\n\n```.swift\n// before\nself.tableView.registerClass(UITableViewCell.self, forCellReuseIdentifier: cellIdentifier)\n\n```\n\n```.swift\n// after\nself.tableView.register(UITableViewCell.self, forCellReuseIdentifier: cellIdentifier)\n```\n`registerClass`\u3000\u2192 `register`\n\n---\n\n\n```.swift\n// before\nself.dismissViewControllerAnimated(true, completion: nil)\n```\n\n```.swift\n// after\nself.dismiss(animated: true, completion: nil)\n```\n\n`ViewController`\u304c\u6d88\u5931\u3002\n\n---\n\n```.swift\n// before\noverride func supportedInterfaceOrientations() -> UIInterfaceOrientationMask {\n}\n```\n\n```\n// after\noverride var supportedInterfaceOrientations : UIInterfaceOrientationMask {\n}\n```\n\n\u30e1\u30bd\u30c3\u30c9\uff08\u95a2\u6570\uff09\u304b\u3089\u3001\u30d7\u30ed\u30d1\u30c6\u30a3\u3078\n\n---\n\n```.swift\n// before\ncurrentViewController.willMoveToParentViewController(nil)\n```\n\n```.swift\n// after\ncurrentViewController.willMove(toParentViewController: nil)\n```\n\n`willMoveToParentViewController()` \u2192 `willMove(toParentViewController:)`\n\n---\n\n```.swift\n// before\noverride func touchesCancelled(touches: Set<UITouch>?, withEvent event: UIEvent?) {\n\tif let touches = touches {\n\t\tfor touch in touches {\n\t\t}\n\t}\n}\n```\n\n```.swift\n// after\noverride func touchesCancelled(_ touches: Set<UITouch>, with event: UIEvent?) {\n\tfor touch in touches {\n\t}\n}\n```\n\n`Set<UITouch>?` \u2192 `Set<UITouch>` \u306a\u306e\u3067\u3001optional binding \u304c\u4e0d\u8981\u306b\u306a\u3063\u305f\u3002\n\n\n# \u307e\u3068\u3081\n\n\u5fc5\u8981\u304c\u3042\u308c\u3070\u3001\u9806\u6b21\u8ffd\u52a0\u3057\u3066\u3044\u3053\u3046\u3068\u601d\u3044\u307e\u3059\u3002\n\n```.log\nXcode Version 8.0 (8A218a)\nApple Swift version 3.0 (swiftlang-800.0.46.2 clang-800.0.38)\n```\n", "tags": ["Swift", "Swift3.0", "Swift2.2", "Xcode8"]}