{"context": " More than 1 year has passed since last update.\n\n \u306f\u3058\u3081\u306b\n\u4e0d\u5be9\u8239\u3092\u898b\u3064\u3051\u308b\u305f\u3081\u306b\u3001\u5de1\u8996\u8239\u3092\u51fa\u822a\u3055\u305b\u307e\u3059\u3002\n\u3069\u306e\u3088\u3046\u306a\u3001\u822a\u8def\u3092\u9078\u3079\u3070\u3088\u3044\u3067\u3057\u3087\u3046\u304b\uff1f\n\n \u554f\u984c\n\u30a8\u30ea\u30a2\u306f\u300110\u00d710\u306e\u683c\u5b50\u72b6\u3068\u3057\u307e\u3057\u3087\u3046\u3002\n\u5404\u30a8\u30ea\u30a2\u9593\u306e\u79fb\u52d5\u306f10\u5206\u3067\u3067\u304d\u308b\u3068\u3057\u307e\u3059\u3002\n\u6642\u9593\u5e2f(10\u5206)\u3054\u3068\u3001\u30a8\u30ea\u30a2\u3054\u3068\u306e\u767a\u898b\u78ba\u7387\u306f\u3001\u904e\u53bb\u306e\u5b9f\u7e3e\u304b\u3089\u63a8\u5b9a\u3057\u3066\u304a\u304d\u307e\u3059\u3002\n1\u65e5\u8d70\u3063\u3066\u3001\u898b\u3064\u304b\u3089\u306a\u3044\u78ba\u7387\u3092\u6700\u5c0f\u5316\u3057\u307e\u3057\u3087\u3046\u3002\n\n \u8003\u3048\u65b9\n\u3053\u306e\u3088\u3046\u306a\u554f\u984c\u306f\u3001\u6642\u7a7a\u9593\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u4e0a\u3067\u306e\u6700\u77ed\u8def\u554f\u984c\u3068\u3057\u3066\u89e3\u304f\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\u6700\u77ed\u8def\u554f\u984c\u306f\u3001\u7d44\u5408\u305b\u6700\u9069\u5316\u306e\u6a19\u6e96\u554f\u984c\u306e1\u3064\u3067\u3059\u3002\n\u6642\u7a7a\u9593\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u3068\u306f\u3001\u5404\u6642\u9593\u5e2f\u3054\u3068\u306e\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u3092\u6642\u9593\u306b\u6cbf\u3063\u3066\u3064\u306a\u3052\u305f\u3082\u306e\u3067\u3059\u3002\n\n\u898b\u3064\u304b\u3089\u306a\u3044\u78ba\u7387\u306f\u3001\u5404\u6642\u9593\u5e2f\u306e\u898b\u3064\u304b\u3089\u306a\u3044\u78ba\u7387\u306e\u7a4d\u3067\u8868\u3055\u308c\u307e\u3059\u3002\n\u56e0\u5b50\u306e\u90e8\u5c4b\u306e\u30c6\u30af\u30cb\u30c3\u30af\u3092\u4f7f\u3063\u3066\u3001log\u3092\u4f7f\u3048\u3070\u3001\u7a4d\u3092\u7dda\u5f62\u306e\u5f0f\u306b\u3067\u304d\u307e\u3059\u3002\n\u307e\u305f\u3001\u78ba\u7387\u306elog\u3092\u3068\u308b\u3068\u8ca0\u306b\u306a\u308a\u307e\u3059\u304c\u3001\u6700\u77ed\u8def\u306e\u30db\u30c3\u30d7\u6570\u306f\u540c\u3058\u306a\u306e\u3067\u3001\u6700\u5c0f\u5024\u30920\u306b\u304b\u3055\u4e0a\u3052\u3059\u308b\u3053\u3068\u306b\u3057\u307e\u3059\u3002\n\n Python\u3067\u89e3\u304f\n\u6700\u77ed\u8def\u306f\u3001Python\u306eNetworkX\u306edijkstra_path\u3092\u4f7f\u3046\u3068\u89e3\u304f\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\u3084\u3063\u3066\u307f\u307e\u3057\u3087\u3046\u3002\u767a\u898b\u78ba\u7387\u306f\u3001\u4e71\u6570\u3067\u4f5c\u308b\u3053\u3068\u306b\u3057\u307e\u3059\u3002\n\npython\nimport numpy as np, pandas as pd, networkx as nx\nfrom itertools import product\nfrom pulp import *\n\nnt = 6*24 # \u6642\u9593\u6570(10\u5206\u523b\u307f\u306724\u6642\u9593\u5206)\nnn = 10 # 10x10\u306e\u30a8\u30ea\u30a2\nnp.random.seed(1)\n# \u6642\u9593\u5e2f\u3054\u3068\u30a8\u30ea\u30a2\u3054\u3068\u306e\u767a\u898b\u78ba\u7387\na = pd.DataFrame(np.random.rand(nt, nn*nn))\nb = np.log(1-a) # \u898b\u3064\u304b\u3089\u306a\u3044\u78ba\u7387(1-a)\u306elog\u3092\u3068\u308b\nb -= b.min().min() # \u6700\u5c0f\u5024\u30920\u306b\u3059\u308b\ng = nx.Graph() # \u30ce\u30fc\u30c9 = \u6642\u523b\u00d7100\uff0b\u30a8\u30ea\u30a2\nfor t, r in b.iterrows():\n    for i, j in product(range(nn), range(nn)):\n        k1 = t*100 + i*nn + j\n        for di, dj in [(-1,0), (0,-1), (0,0), (0,1), (1,0)]:\n            if 0<=i+di<nn and 0<=j+dj<nn:\n                k2 = (i+di)*nn + j+dj\n                # \u6642\u7a7a\u9593\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u306e\u63a5\u7d9a\u3092\u3059\u308b\n                g.add_edge(k1, (t+1)*100 + k2, weight=r[k2])\n# \u6700\u77ed\u8def\u3092\u6c42\u3081\u308b\nres = np.array(nx.dijkstra_path(g, 0, nt*100))\n\n\n\n \u7d50\u679c\u306e\u8868\u793a\n\u6642\u9593\u3092\u7121\u8996\u3057\u3066\u8868\u793a\u3057\u3066\u307f\u307e\u3059\u3002\n\npython\nfrom more_itertools import pairwise\nh = nx.Graph()\nh.add_edges_from([(i, j) for i, j in pairwise(res%100)])\nnx.draw(h, pos={(i*nn+j):(i, j) for i in range(nn) for j in range(nn)})\n\n\n\n\u4ee5\u4e0a\n# <i class='fa fa-pencil' /> \u306f\u3058\u3081\u306b\n\u4e0d\u5be9\u8239\u3092\u898b\u3064\u3051\u308b\u305f\u3081\u306b\u3001\u5de1\u8996\u8239\u3092\u51fa\u822a\u3055\u305b\u307e\u3059\u3002\n\u3069\u306e\u3088\u3046\u306a\u3001\u822a\u8def\u3092\u9078\u3079\u3070\u3088\u3044\u3067\u3057\u3087\u3046\u304b\uff1f\n\n# <i class='fa fa-pencil' /> \u554f\u984c\n\u30a8\u30ea\u30a2\u306f\u300110\u00d710\u306e\u683c\u5b50\u72b6\u3068\u3057\u307e\u3057\u3087\u3046\u3002\n\u5404\u30a8\u30ea\u30a2\u9593\u306e\u79fb\u52d5\u306f10\u5206\u3067\u3067\u304d\u308b\u3068\u3057\u307e\u3059\u3002\n\u6642\u9593\u5e2f(10\u5206)\u3054\u3068\u3001\u30a8\u30ea\u30a2\u3054\u3068\u306e\u767a\u898b\u78ba\u7387\u306f\u3001\u904e\u53bb\u306e\u5b9f\u7e3e\u304b\u3089\u63a8\u5b9a\u3057\u3066\u304a\u304d\u307e\u3059\u3002\n1\u65e5\u8d70\u3063\u3066\u3001**\u898b\u3064\u304b\u3089\u306a\u3044\u78ba\u7387**\u3092\u6700\u5c0f\u5316\u3057\u307e\u3057\u3087\u3046\u3002\n\n# <i class='fa fa-pencil' /> \u8003\u3048\u65b9\n\u3053\u306e\u3088\u3046\u306a\u554f\u984c\u306f\u3001**\u6642\u7a7a\u9593\u30cd\u30c3\u30c8\u30ef\u30fc\u30af**\u4e0a\u3067\u306e\u6700\u77ed\u8def\u554f\u984c\u3068\u3057\u3066\u89e3\u304f\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\u6700\u77ed\u8def\u554f\u984c\u306f\u3001[\u7d44\u5408\u305b\u6700\u9069\u5316](http://qiita.com/Tsutomu-KKE@github/items/bfbf4c185ed7004b5721)\u306e\u6a19\u6e96\u554f\u984c\u306e1\u3064\u3067\u3059\u3002\n\n\u6642\u7a7a\u9593\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u3068\u306f\u3001\u5404\u6642\u9593\u5e2f\u3054\u3068\u306e\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u3092\u6642\u9593\u306b\u6cbf\u3063\u3066\u3064\u306a\u3052\u305f\u3082\u306e\u3067\u3059\u3002\n\n![image](https://qiita-image-store.s3.amazonaws.com/0/13955/7ef6c6cd-2d90-b14d-ea8c-1644f84fb0ee.png)\n\n\u898b\u3064\u304b\u3089\u306a\u3044\u78ba\u7387\u306f\u3001\u5404\u6642\u9593\u5e2f\u306e\u898b\u3064\u304b\u3089\u306a\u3044\u78ba\u7387\u306e\u7a4d\u3067\u8868\u3055\u308c\u307e\u3059\u3002\n[\u56e0\u5b50\u306e\u90e8\u5c4b](http://qiita.com/Tsutomu-KKE@github/items/cfa4c144ab7713766d48)\u306e\u30c6\u30af\u30cb\u30c3\u30af\u3092\u4f7f\u3063\u3066\u3001log\u3092\u4f7f\u3048\u3070\u3001\u7a4d\u3092\u7dda\u5f62\u306e\u5f0f\u306b\u3067\u304d\u307e\u3059\u3002\n\u307e\u305f\u3001\u78ba\u7387\u306elog\u3092\u3068\u308b\u3068\u8ca0\u306b\u306a\u308a\u307e\u3059\u304c\u3001\u6700\u77ed\u8def\u306e[\u30db\u30c3\u30d7\u6570](http://e-words.jp/w/%E3%83%9B%E3%83%83%E3%83%97%E6%95%B0.html)\u306f\u540c\u3058\u306a\u306e\u3067\u3001\u6700\u5c0f\u5024\u30920\u306b\u304b\u3055\u4e0a\u3052\u3059\u308b\u3053\u3068\u306b\u3057\u307e\u3059\u3002\n\n# <i class='fa fa-pencil' /> Python\u3067\u89e3\u304f\n\n\u6700\u77ed\u8def\u306f\u3001Python\u306eNetworkX\u306edijkstra_path\u3092\u4f7f\u3046\u3068\u89e3\u304f\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\u3084\u3063\u3066\u307f\u307e\u3057\u3087\u3046\u3002\u767a\u898b\u78ba\u7387\u306f\u3001\u4e71\u6570\u3067\u4f5c\u308b\u3053\u3068\u306b\u3057\u307e\u3059\u3002\n\n```py3:python\nimport numpy as np, pandas as pd, networkx as nx\nfrom itertools import product\nfrom pulp import *\n\nnt = 6*24 # \u6642\u9593\u6570(10\u5206\u523b\u307f\u306724\u6642\u9593\u5206)\nnn = 10 # 10x10\u306e\u30a8\u30ea\u30a2\nnp.random.seed(1)\n# \u6642\u9593\u5e2f\u3054\u3068\u30a8\u30ea\u30a2\u3054\u3068\u306e\u767a\u898b\u78ba\u7387\na = pd.DataFrame(np.random.rand(nt, nn*nn))\nb = np.log(1-a) # \u898b\u3064\u304b\u3089\u306a\u3044\u78ba\u7387(1-a)\u306elog\u3092\u3068\u308b\nb -= b.min().min() # \u6700\u5c0f\u5024\u30920\u306b\u3059\u308b\ng = nx.Graph() # \u30ce\u30fc\u30c9 = \u6642\u523b\u00d7100\uff0b\u30a8\u30ea\u30a2\nfor t, r in b.iterrows():\n    for i, j in product(range(nn), range(nn)):\n        k1 = t*100 + i*nn + j\n        for di, dj in [(-1,0), (0,-1), (0,0), (0,1), (1,0)]:\n            if 0<=i+di<nn and 0<=j+dj<nn:\n                k2 = (i+di)*nn + j+dj\n                # \u6642\u7a7a\u9593\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u306e\u63a5\u7d9a\u3092\u3059\u308b\n                g.add_edge(k1, (t+1)*100 + k2, weight=r[k2])\n# \u6700\u77ed\u8def\u3092\u6c42\u3081\u308b\nres = np.array(nx.dijkstra_path(g, 0, nt*100))\n```\n\n# <i class='fa fa-pencil' /> \u7d50\u679c\u306e\u8868\u793a\n\u6642\u9593\u3092\u7121\u8996\u3057\u3066\u8868\u793a\u3057\u3066\u307f\u307e\u3059\u3002\n\n```py3:python\nfrom more_itertools import pairwise\nh = nx.Graph()\nh.add_edges_from([(i, j) for i, j in pairwise(res%100)])\nnx.draw(h, pos={(i*nn+j):(i, j) for i in range(nn) for j in range(nn)})\n```\n\n![image](https://qiita-image-store.s3.amazonaws.com/0/13955/3c5e1e38-6e75-3038-50f1-a3030cd296a0.png)\n\n\u4ee5\u4e0a\n\n\n", "tags": ["\u7d44\u5408\u305b\u6700\u9069\u5316", "\u6700\u9069\u5316", "\u6570\u5b66", "Python"]}