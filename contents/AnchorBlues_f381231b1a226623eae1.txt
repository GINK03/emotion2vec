{"context": "\u5730\u7403\u60d1\u661f\u79d1\u5b66\u306e\u7814\u7a76\u306a\u3069\u3092\u3084\u3063\u3066\u3044\u308b\u3068\u30011\u3064\u306e\u56f3\u306b\u8907\u6570\u306e\u5730\u56f3\u3068\u30c7\u30fc\u30bf\u3092\u540c\u6642\u306b\u30d7\u30ed\u30c3\u30c8\u3057\u305f\u3044\u3068\u3044\u3046\u5834\u9762\u306b\u3057\u3070\u3057\u3070\u906d\u9047\u3059\u308b\u3002\n\u8a66\u3057\u306b\u4eca\u56de\u306f\u3001Python\u306ematplotlib\u3092\u7528\u3044\u3066\u3001\n\n1\u301c12\u6708\u306e1\u30f6\u6708\u6bce\u306e2\u6b21\u5143\u30c7\u30fc\u30bf(\u5168\u7403\u306e\u6d77\u9762\u6c34\u6e29\u30c7\u30fc\u30bf)\u3092\u5730\u56f3\u3068\u3068\u3082\u306b\u540c\u6642\u306b1\u3064\u306e\u56f3\u306b\u30d7\u30ed\u30c3\u30c8\u3059\u308b\n\n\u3053\u3068\u3092\u76ee\u6a19\u3068\u3059\u308b\u3002\n\n1. \u8907\u6570\u306e\u5730\u56f3\u3092\u540c\u6642\u306b\u30d7\u30ed\u30c3\u30c8\n\n\u30b3\u30fc\u30c9\nimport matplotlib.pyplot as plt\nimport numpy as np\nfrom mpl_toolkits.basemap import Basemap\n\nxlim = [100, 170]           # \u56f3\u306e\u7bc4\u56f2(x\u8ef8\u65b9\u5411\uff1a\u7d4c\u5ea6)\nylim = [10, 60]             # \u56f3\u306e\u7bc4\u56f2(y\u8ef8\u65b9\u5411\uff1a\u7def\u5ea6)\ncolumn = 3                  # \u5217\u306e\u6570\nfsizex, fsizey= 16, 18      # \u56f3\u306e\u6a2a\u30fb\u7e26\u306e\u9577\u3055\nline_interval = 15          # \u5730\u56f3\u4e0a\u306b\u63cf\u304f\u7def\u7dda\u30fb\u7d4c\u7dda\u306e\u9593\u9694\nfontsize = 20               # \u6587\u5b57\u30b5\u30a4\u30ba\n\nif 12 % column != 0:\n    raise ValueError('column must be a divisor of 12!')\n\nrow = 12 / column           # \u884c\u306e\u6570\nmonths =  [ 'Jan',  'Feb',  'Mar',  'Apr',\n            'May',  'Jun',  'Jul',  'Aug',\n            'Sep',  'Oct',  'Nov',  'Dec' ]\n\nfig = plt.figure(figsize = (fsizex, fsizey))\nplt.rcParams['font.size'] = fontsize\n\nax = [0] * 12\nfor i in range(0, 12):\n    ax[i] = fig.add_subplot(row, column, 1 + i)\n    m = Basemap(projection = 'cyl', llcrnrlat = ylim[0], urcrnrlat = ylim[1], \\\n                llcrnrlon = xlim[0], urcrnrlon = xlim[1], resolution = 'c', lon_0 = 180)\n    m.drawcoastlines(linewidth = 0.5)\n    m.drawmapboundary()\n    m.fillcontinents(color = '#eeeeee')\n    if i == 12 - column:\n        label = [1, 1]\n    elif i > 12 - column:\n        label = [1, 0]\n    elif i % column == 0:\n        label = [0, 1]\n    else:\n        label = [0, 0]\n\n    m.drawmeridians(np.arange(0, 360, line_interval), labels = [0, 0, 0, label[0]], linewidth = 0.5)\n    m.drawparallels(np.arange(-90, 90, line_interval), labels = [label[1], 0, 0, 0], linewidth = 0.5)\n    ax[i].set_xlim(xlim)\n    ax[i].set_ylim(ylim)\n    ax[i].set_title(months[i])\n\nfig.tight_layout()\nplt.show()\n\n\n\u56f3\n\n\n2. \u8907\u6570\u306e\u5730\u56f3\u3068\u30c7\u30fc\u30bf\u3092\u540c\u6642\u306b\u30d7\u30ed\u30c3\u30c8\n\n\u4e0b\u6e96\u5099\n\u5404\u6708\u3067\u30d7\u30ed\u30c3\u30c8\u3059\u308b\u306e\u304c2\u6b21\u5143\u30c7\u30fc\u30bf\u3067\u3042\u308b\u5834\u5408\u300112\u30f6\u6708\u306e\u305d\u308c\u305e\u308c\u306e\u30c7\u30fc\u30bf\u3092\u4e00\u3064\u306e3\u6b21\u5143\u914d\u5217\u306b\u307e\u3068\u3081\u3066\u304a\u304f\u3002\nxn = 360            # \u30c7\u30fc\u30bf\u306ex\u8ef8(\u7d4c\u5ea6)\u65b9\u5411\u306e\u30b0\u30ea\u30c3\u30c9\u6570\nyn = 155            # \u30c7\u30fc\u30bf\u306ey\u8ef8(\u7def\u5ea6)\u65b9\u5411\u306e\u30b0\u30ea\u30c3\u30c9\u6570\ndata = np.zeros((12, yn, xn))\nfor i in range(0, 12):\n    data[i, :, :] = .....  # (i+1)\u6708\u306e\u30c7\u30fc\u30bf\u3092\u53d6\u5f97\u3059\u308b\u51e6\u7406\n\n\u307e\u305f\u3001\u305d\u306e2\u6b21\u5143\u30c7\u30fc\u30bf\u306ex\u8ef8(\u7d4c\u5ea6)\u3068y\u8ef8(\u7def\u5ea6)\u306b\u5bfe\u5fdc\u3059\u308b1\u6b21\u5143\u914d\u5217\u3092\u53d6\u5f97\u3057\u3066\u304a\u304f\u3002\u4eca\u56de\u306f\u305d\u308c\u305e\u308c\u3001\n\nxgrid\nygrid\n\n\u3068\u3059\u308b(\u3044\u305a\u308c\u3082numpy.ndarray)\u3002\n\n\u30b3\u30fc\u30c9\nimport matplotlib.pyplot as plt\nimport numpy as np\nfrom mpl_toolkits.basemap import Basemap\n\nxlim = [100, 170]           # \u56f3\u306e\u7bc4\u56f2(x\u8ef8\u65b9\u5411\uff1a\u7d4c\u5ea6)\nylim = [10, 60]             # \u56f3\u306e\u7bc4\u56f2(y\u8ef8\u65b9\u5411\uff1a\u7def\u5ea6)\ncolumn = 3                  # \u5217\u306e\u6570\nfsizex, fsizey= 16, 18      # \u56f3\u306e\u6a2a\u30fb\u7e26\u306e\u9577\u3055\ncb_min, cb_max = -2, 32     # \u30ab\u30e9\u30fc\u30d0\u30fc\u306e\u6700\u5c0f\u5024\u30fb\u6700\u5927\u5024\ncb_div = 17                 # \u30ab\u30e9\u30fc\u30d0\u30fc\u3067\u4f7f\u3046\u8272\u306e\u6570\nclabel = 'Sea Surface Temperature(deg)' # \u30ab\u30e9\u30fc\u30d0\u30fc\u306b\u3064\u3051\u308b\u30e9\u30d9\u30eb\nline_interval = 15                      # \u5730\u56f3\u4e0a\u306b\u63cf\u304f\u7def\u7dda\u30fb\u7d4c\u7dda\u306e\u9593\u9694\nfontsize = 20                           # \u6587\u5b57\u30b5\u30a4\u30ba\n\nif 12 % column != 0:\n    raise ValueError('column must be a divisor of 12!')\n\nrow = 12 / column           # \u884c\u306e\u6570\nmonths =  [ 'Jan',  'Feb',  'Mar',  'Apr',\n            'May',  'Jun',  'Jul',  'Aug',\n            'Sep',  'Oct',  'Nov',  'Dec' ]\n\nfig = plt.figure(figsize = (fsizex, fsizey))\nplt.rcParams['font.size'] = fontsize\n\ndelta = (cb_max - cb_min) / cb_div\ninterval_of_cf = np.arange(cb_min, abs(cb_max) * 2 + delta, delta)[0:int(cb_div) + 1]\n\nax = [0] * 12\nfor i in range(0, 12):\n    ax[i] = fig.add_subplot(row, column, 1 + i)\n    m = Basemap(projection = 'cyl', llcrnrlat = ylim[0], urcrnrlat = ylim[1], \\\n                llcrnrlon = xlim[0], urcrnrlon = xlim[1], resolution = 'c', lon_0 = 180)\n    m.drawcoastlines(linewidth = 0.5)\n    m.drawmapboundary()\n    m.fillcontinents(color = '#eeeeee')\n    if i == 12 - column:\n        label = [1, 1]\n    elif i > 12 - column:\n        label = [1, 0]\n    elif i % column == 0:\n        label = [0, 1]\n    else:\n        label = [0, 0]\n\n    m.drawmeridians(np.arange(0, 360, line_interval), labels = [0, 0, 0, label[0]], linewidth = 0.5)\n    m.drawparallels(np.arange(-90, 90, line_interval), labels = [label[1], 0, 0, 0], linewidth = 0.5)\n\n    # \u30ab\u30e9\u30fc\u30b3\u30f3\u30bf\u30fc\u3092\u63cf\u304f\n    x, y = np.meshgrid(xgrid, ygrid)\n    X, Y = m(x, y)\n    CF = ax[i].contourf(X, Y, data[i, :, :], interval_of_cf)\n\n    ax[i].set_xlim(xlim)\n    ax[i].set_ylim(ylim)\n    ax[i].set_title(months[i])\n\n# \u30ab\u30e9\u30fc\u30d0\u30fc\u3092\u63cf\u304f\ncax = fig.add_axes([1.00, 0.15, 0.04, 0.7])\ncb = fig.colorbar(CF, cax)\ncb.set_label(clabel)\n\nfig.tight_layout()\nplt.show()\n\n\n\u56f3\n\n\u7121\u4e8b\u4f5c\u6210\u3059\u308b\u3053\u3068\u306b\u6210\u529f\u3002\n\u7e26\u00d7\u6a2a\u306e\u7d44\u307f\u5408\u308f\u305b\u306f\u3001column\u306e\u5024\u3092\u5909\u3048\u308b\u3053\u3068\u3067\u81ea\u7531\u306b\u5909\u66f4\u3059\u308b\u3053\u3068\u304c\u51fa\u6765\u308b\u3002\n\n\u53c2\u8003URL\n\nhttp://seesaawiki.jp/met-python/d/matplotlib/plot\nhttp://bicycle1885.hatenablog.com/entry/2014/02/14/023734\nhttp://nm-player.blogspot.jp/2012/09/matplotlibbasemap-1.html\nhttp://qiita.com/AnchorBlues/items/0dd1499196670fdf1c46\n\u5730\u7403\u60d1\u661f\u79d1\u5b66\u306e\u7814\u7a76\u306a\u3069\u3092\u3084\u3063\u3066\u3044\u308b\u3068\u30011\u3064\u306e\u56f3\u306b\u8907\u6570\u306e\u5730\u56f3\u3068\u30c7\u30fc\u30bf\u3092\u540c\u6642\u306b\u30d7\u30ed\u30c3\u30c8\u3057\u305f\u3044\u3068\u3044\u3046\u5834\u9762\u306b\u3057\u3070\u3057\u3070\u906d\u9047\u3059\u308b\u3002\n\u8a66\u3057\u306b\u4eca\u56de\u306f\u3001Python\u306ematplotlib\u3092\u7528\u3044\u3066\u3001\n\n - 1\u301c12\u6708\u306e1\u30f6\u6708\u6bce\u306e2\u6b21\u5143\u30c7\u30fc\u30bf(\u5168\u7403\u306e\u6d77\u9762\u6c34\u6e29\u30c7\u30fc\u30bf)\u3092\u5730\u56f3\u3068\u3068\u3082\u306b\u540c\u6642\u306b1\u3064\u306e\u56f3\u306b\u30d7\u30ed\u30c3\u30c8\u3059\u308b\n\n\u3053\u3068\u3092\u76ee\u6a19\u3068\u3059\u308b\u3002\n\n# 1. \u8907\u6570\u306e\u5730\u56f3\u3092\u540c\u6642\u306b\u30d7\u30ed\u30c3\u30c8\n## \u30b3\u30fc\u30c9\n\n```py\nimport matplotlib.pyplot as plt\nimport numpy as np\nfrom mpl_toolkits.basemap import Basemap\n\nxlim = [100, 170]\t\t\t# \u56f3\u306e\u7bc4\u56f2(x\u8ef8\u65b9\u5411\uff1a\u7d4c\u5ea6)\nylim = [10, 60]\t\t\t\t# \u56f3\u306e\u7bc4\u56f2(y\u8ef8\u65b9\u5411\uff1a\u7def\u5ea6)\ncolumn = 3\t\t\t\t\t# \u5217\u306e\u6570\nfsizex, fsizey= 16, 18\t\t# \u56f3\u306e\u6a2a\u30fb\u7e26\u306e\u9577\u3055\nline_interval = 15\t\t\t# \u5730\u56f3\u4e0a\u306b\u63cf\u304f\u7def\u7dda\u30fb\u7d4c\u7dda\u306e\u9593\u9694\nfontsize = 20\t\t\t\t# \u6587\u5b57\u30b5\u30a4\u30ba\n\nif 12 % column != 0:\n    raise ValueError('column must be a divisor of 12!')\n\nrow = 12 / column\t\t\t# \u884c\u306e\u6570\nmonths =  [ 'Jan',  'Feb',  'Mar',  'Apr',\n            'May',  'Jun',  'Jul',  'Aug',\n            'Sep',  'Oct',  'Nov',  'Dec' ]\n\nfig = plt.figure(figsize = (fsizex, fsizey))\nplt.rcParams['font.size'] = fontsize\n\nax = [0] * 12\nfor i in range(0, 12):\n    ax[i] = fig.add_subplot(row, column, 1 + i)\n    m = Basemap(projection = 'cyl', llcrnrlat = ylim[0], urcrnrlat = ylim[1], \\\n                llcrnrlon = xlim[0], urcrnrlon = xlim[1], resolution = 'c', lon_0 = 180)\n    m.drawcoastlines(linewidth = 0.5)\n    m.drawmapboundary()\n    m.fillcontinents(color = '#eeeeee')\n    if i == 12 - column:\n        label = [1, 1]\n    elif i > 12 - column:\n        label = [1, 0]\n    elif i % column == 0:\n        label = [0, 1]\n    else:\n        label = [0, 0]\n\n    m.drawmeridians(np.arange(0, 360, line_interval), labels = [0, 0, 0, label[0]], linewidth = 0.5)\n    m.drawparallels(np.arange(-90, 90, line_interval), labels = [label[1], 0, 0, 0], linewidth = 0.5)\n    ax[i].set_xlim(xlim)\n    ax[i].set_ylim(ylim)\n    ax[i].set_title(months[i])\n\nfig.tight_layout()\nplt.show()\n```\n\n## \u56f3\n\n![\u30bf\u3099\u30a6\u30f3\u30ed\u30fc\u30c8\u3099 (12).png](https://qiita-image-store.s3.amazonaws.com/0/88804/5945006c-f5c6-3a8f-cea9-8234e1855e88.png)\n\n# 2. \u8907\u6570\u306e\u5730\u56f3\u3068\u30c7\u30fc\u30bf\u3092\u540c\u6642\u306b\u30d7\u30ed\u30c3\u30c8\n##\u4e0b\u6e96\u5099\n\u5404\u6708\u3067\u30d7\u30ed\u30c3\u30c8\u3059\u308b\u306e\u304c2\u6b21\u5143\u30c7\u30fc\u30bf\u3067\u3042\u308b\u5834\u5408\u300112\u30f6\u6708\u306e\u305d\u308c\u305e\u308c\u306e\u30c7\u30fc\u30bf\u3092\u4e00\u3064\u306e3\u6b21\u5143\u914d\u5217\u306b\u307e\u3068\u3081\u3066\u304a\u304f\u3002\n\n```py\nxn = 360\t\t\t# \u30c7\u30fc\u30bf\u306ex\u8ef8(\u7d4c\u5ea6)\u65b9\u5411\u306e\u30b0\u30ea\u30c3\u30c9\u6570\nyn = 155            # \u30c7\u30fc\u30bf\u306ey\u8ef8(\u7def\u5ea6)\u65b9\u5411\u306e\u30b0\u30ea\u30c3\u30c9\u6570\ndata = np.zeros((12, yn, xn))\nfor i in range(0, 12):\n\tdata[i, :, :] = .....  # (i+1)\u6708\u306e\u30c7\u30fc\u30bf\u3092\u53d6\u5f97\u3059\u308b\u51e6\u7406\n```\n\n\u307e\u305f\u3001\u305d\u306e2\u6b21\u5143\u30c7\u30fc\u30bf\u306ex\u8ef8(\u7d4c\u5ea6)\u3068y\u8ef8(\u7def\u5ea6)\u306b\u5bfe\u5fdc\u3059\u308b1\u6b21\u5143\u914d\u5217\u3092\u53d6\u5f97\u3057\u3066\u304a\u304f\u3002\u4eca\u56de\u306f\u305d\u308c\u305e\u308c\u3001\n\n - xgrid\n - ygrid\n\n\u3068\u3059\u308b(\u3044\u305a\u308c\u3082`numpy.ndarray`)\u3002\n\n## \u30b3\u30fc\u30c9\n\n```py\nimport matplotlib.pyplot as plt\nimport numpy as np\nfrom mpl_toolkits.basemap import Basemap\n\nxlim = [100, 170]\t\t\t# \u56f3\u306e\u7bc4\u56f2(x\u8ef8\u65b9\u5411\uff1a\u7d4c\u5ea6)\nylim = [10, 60]\t\t\t\t# \u56f3\u306e\u7bc4\u56f2(y\u8ef8\u65b9\u5411\uff1a\u7def\u5ea6)\ncolumn = 3\t\t\t\t\t# \u5217\u306e\u6570\nfsizex, fsizey= 16, 18\t\t# \u56f3\u306e\u6a2a\u30fb\u7e26\u306e\u9577\u3055\ncb_min, cb_max = -2, 32     # \u30ab\u30e9\u30fc\u30d0\u30fc\u306e\u6700\u5c0f\u5024\u30fb\u6700\u5927\u5024\ncb_div = 17\t\t\t\t\t# \u30ab\u30e9\u30fc\u30d0\u30fc\u3067\u4f7f\u3046\u8272\u306e\u6570\nclabel = 'Sea Surface Temperature(deg)' # \u30ab\u30e9\u30fc\u30d0\u30fc\u306b\u3064\u3051\u308b\u30e9\u30d9\u30eb\nline_interval = 15\t\t\t\t\t\t# \u5730\u56f3\u4e0a\u306b\u63cf\u304f\u7def\u7dda\u30fb\u7d4c\u7dda\u306e\u9593\u9694\nfontsize = 20\t\t\t\t\t\t\t# \u6587\u5b57\u30b5\u30a4\u30ba\n\nif 12 % column != 0:\n    raise ValueError('column must be a divisor of 12!')\n\nrow = 12 / column\t\t\t# \u884c\u306e\u6570\nmonths =  [ 'Jan',  'Feb',  'Mar',  'Apr',\n            'May',  'Jun',  'Jul',  'Aug',\n            'Sep',  'Oct',  'Nov',  'Dec' ]\n\nfig = plt.figure(figsize = (fsizex, fsizey))\nplt.rcParams['font.size'] = fontsize\n\ndelta = (cb_max - cb_min) / cb_div\ninterval_of_cf = np.arange(cb_min, abs(cb_max) * 2 + delta, delta)[0:int(cb_div) + 1]\n\nax = [0] * 12\nfor i in range(0, 12):\n    ax[i] = fig.add_subplot(row, column, 1 + i)\n    m = Basemap(projection = 'cyl', llcrnrlat = ylim[0], urcrnrlat = ylim[1], \\\n                llcrnrlon = xlim[0], urcrnrlon = xlim[1], resolution = 'c', lon_0 = 180)\n    m.drawcoastlines(linewidth = 0.5)\n    m.drawmapboundary()\n    m.fillcontinents(color = '#eeeeee')\n    if i == 12 - column:\n        label = [1, 1]\n    elif i > 12 - column:\n        label = [1, 0]\n    elif i % column == 0:\n        label = [0, 1]\n    else:\n        label = [0, 0]\n\n    m.drawmeridians(np.arange(0, 360, line_interval), labels = [0, 0, 0, label[0]], linewidth = 0.5)\n    m.drawparallels(np.arange(-90, 90, line_interval), labels = [label[1], 0, 0, 0], linewidth = 0.5)\n\n    # \u30ab\u30e9\u30fc\u30b3\u30f3\u30bf\u30fc\u3092\u63cf\u304f\n    x, y = np.meshgrid(xgrid, ygrid)\n    X, Y = m(x, y)\n    CF = ax[i].contourf(X, Y, data[i, :, :], interval_of_cf)\n\n    ax[i].set_xlim(xlim)\n    ax[i].set_ylim(ylim)\n    ax[i].set_title(months[i])\n\n# \u30ab\u30e9\u30fc\u30d0\u30fc\u3092\u63cf\u304f\ncax = fig.add_axes([1.00, 0.15, 0.04, 0.7])\ncb = fig.colorbar(CF, cax)\ncb.set_label(clabel)\n\nfig.tight_layout()\nplt.show()\n```\n\n## \u56f3\n![\u30bf\u3099\u30a6\u30f3\u30ed\u30fc\u30c8\u3099 (13).png](https://qiita-image-store.s3.amazonaws.com/0/88804/6f9baa92-3199-5b92-c2f1-d808b1ef3768.png)\n\n\u7121\u4e8b\u4f5c\u6210\u3059\u308b\u3053\u3068\u306b\u6210\u529f\u3002\n\u7e26\u00d7\u6a2a\u306e\u7d44\u307f\u5408\u308f\u305b\u306f\u3001column\u306e\u5024\u3092\u5909\u3048\u308b\u3053\u3068\u3067\u81ea\u7531\u306b\u5909\u66f4\u3059\u308b\u3053\u3068\u304c\u51fa\u6765\u308b\u3002\n\n# **\u53c2\u8003URL**\nhttp://seesaawiki.jp/met-python/d/matplotlib/plot\nhttp://bicycle1885.hatenablog.com/entry/2014/02/14/023734\nhttp://nm-player.blogspot.jp/2012/09/matplotlibbasemap-1.html\nhttp://qiita.com/AnchorBlues/items/0dd1499196670fdf1c46\n", "tags": ["Python", "matplotlib", "map", "\u5730\u56f3", "\u30c7\u30fc\u30bf\u53ef\u8996\u5316"]}