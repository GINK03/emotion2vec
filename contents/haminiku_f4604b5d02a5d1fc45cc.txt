{"context": " More than 1 year has passed since last update.\n\n\u74b0\u5883\npython:2.7\nDjango:1.6\npip install redis\n\n\u5c02\u7528URL\u3092\u767a\u884c\u3057\u305f\u304f\u306a\u308b\u30bf\u30a4\u30df\u30f3\u30b0\n\u5c02\u7528\u30da\u30fc\u30b8\u3068\u3044\u3046\u3068\u30a2\u30ab\u30a6\u30f3\u30c8\u3067\u30ed\u30b0\u30a4\u30f3+Cookie\u304c\u4e00\u822c\u7684\u3060\u3051\u3069\u3001\u30ed\u30b0\u30a4\u30f3\u305b\u305a\u30e6\u30fc\u30b6\u6bce\u306b\u5c02\u7528URL\u3092\u767a\u884c\u3057\u305f\u3044\u3068\u304d\u304c\u3042\u308b\u3002\u4f8b\u3048\u3070\u521d\u56de\u767b\u9332\u6642\u306e\u30e1\u30fc\u30eb\u3068\u304b\u3001\u6700\u8fd1\u306e\u30b9\u30de\u30db\u30b2\u30fc\u30e0\u3060\u3068\u30ed\u30b0\u30a4\u30f3ID\u3092\u767a\u884c\u3057\u306a\u3044\u306e\u304c\u4e00\u822c\u7684\u306a\u306e\u3067\u30e6\u30fc\u30b6\u3078\u30a2\u30ab\u30a6\u30f3\u30c8\u3092\u767a\u884c\u3057\u3066\u3044\u307e\u305b\u3093\u3002\n\n\u60f3\u5b9a\u3055\u308c\u308b\u653b\u6483\u3068\u5bfe\u7b56\n\u8f9e\u66f8\u30a2\u30bf\u30c3\u30af\u3068\u7dcf\u5f53\u305f\u308a\u653b\u6483\u304c\u6016\u3044\u306e\u3067\u3001\u305d\u308c\u3055\u3048\u5bfe\u7b56\u3057\u3066\u3044\u308c\u3070\u5927\u4e08\u592b\u306a\u306f\u305a\n1. \u8f9e\u66f8\u30a2\u30bf\u30c3\u30af\u5bfe\u7b56\u3068\u3057\u3066URL\u306e\u6587\u5b57\u5217\u304c\u30e6\u30fc\u30b6ID\u304b\u3089\u63a8\u6e2c\u3067\u304d\u306a\u3044\u4f7f\u3044\u6368\u3066\u6587\u5b57\u5217\u3067\u3042\u308b\u3053\u3068\n2. \u7dcf\u5f53\u305f\u308a\u653b\u6483\u5bfe\u7b56\u3068\u3057\u30661\u3067\u767a\u884c\u3057\u305f\u4f7f\u3044\u6368\u3066\u6587\u5b57\u5217\u306b\u30c1\u30a7\u30c3\u30af\u30b5\u30e0\u3092\u5165\u308c\u308b\n\u2193\u30b3\u30fc\u30c9\u8aad\u3093\u3060\u65b9\u304c\u591a\u5206\u65e9\u3044\n\nm.py\nfrom uuid import uuid4\n\n# 1. \u4f7f\u3044\u6368\u3066ID\u306e\u767a\u884c\n_uuid4 = str(uuid4())\nprint 'uuid4:', _uuid4\n\n# 2. \u4f7f\u3044\u6368\u3066ID\u306e\u30c1\u30a7\u30c3\u30af\u30b5\u30e0\nuuid4_char_list = [ord(_char) for _char in _uuid4]\nprint 'uuid4_char_list:', uuid4_char_list\nchecksum = sum(uuid4_char_list)\nprint 'checksum:', checksum\n\n# 3. URL\u767a\u884c\nprint \"http://hoge/page?token={}%20cs={}\".format(_uuid4, checksum)\n\n\n\n\n\u5b9f\u884c\u7d50\u679c\n> python m.py \nuuid4: 6da25bb0-5d9c-4c1e-becc-51e3d5078fe4\nuuid4_char_list: [54, 100, 97, 50, 53, 98, 98, 48, 45, 53, 100, 57, 99, 45, 52, 99, 49, 101, 45, 98, 101, 99, 99, 45, 53, 49, 101, 51, 100, 53, 48, 55, 56, 102, 101, 52]\nchecksum: 2606\nhttp://hoge/page?token=6da25bb0-5d9c-4c1e-becc-51e3d5078fe4%20cs=2606\n\n\n\n\n\u3053\u306e\u4ed5\u7d44\u307f\u3092\u30bb\u30ad\u30e5\u30ea\u30c6\u30a3\u306e\u89b3\u70b9\u3067\u30ec\u30d3\u30e5\u30fc\u3059\u308b\u3068...\n\u30ec\u30d3\u30e5\u30fc\u3059\u308b\u3068\u3001\u3088\u304f\u3053\u3046\u8a00\u308f\u308c\u307e\u3059\u3002\u300e\u30c1\u30a7\u30c3\u30af\u30b5\u30e0\u3060\u3068\u89e3\u6790\u3055\u308c\u3066\u5371\u306a\u3044\u3093\u3058\u3083\u306a\u3044\uff1f\u300f\n\u3046\u3061\u306e\u904e\u758e\u30b7\u30b9\u30c6\u30e0\u3092\u89e3\u6790\u3057\u3066\u304f\u3060\u3055\u308b\u5947\u7279\u306a\u30cf\u30c3\u30ab\u30fc\u69d8\u306a\u3093\u3066\u5c45\u307e\u305b\u3093\u3088\u3068\u8a00\u3044\u305f\u3044\u3068\u3053\u308d\u3092\u3050\u3063\u3068\u582a\u3048\u3066\u30ed\u30b8\u30c3\u30af\u3092\u4fee\u6b63\u3057\u3066\u3044\u304d\u307e\u3059\u3002\n\nm.py\n# -*- coding: utf-8 -*-\nfrom __future__ import absolute_import, unicode_literals\n\nimport binascii\nfrom uuid import uuid4\n\n\ndef checksum_base64_crc(_str):\n    \"\"\"\n    \u5165\u529b\u3055\u308c\u305f\u6587\u5b57\u5217\u3092\u53cd\u8ee2\u3057\u3001base64\u30a8\u30f3\u30b3\u30fc\u30c9\u3057\u3066\u3001crc32\u30c1\u30a7\u30c3\u30af\u30b5\u30e0\u3092\u8fd4\u3059\n    :param _str: str\n    :rtype : int\n    \"\"\"\n    # \u53cd\u8ee2\n    _str_r = _str[::-1]\n\n    # base64\u30a8\u30f3\u30b3\u30fc\u30c9\u3057\u3066crc32\u30c1\u30a7\u30c3\u30af\u30b5\u30e0\u3092\u53d6\u308b\n    return binascii.crc32(binascii.b2a_base64(_str_r))\n\n\n# 1. \u4f7f\u3044\u6368\u3066ID\u306e\u767a\u884c\n_uuid4 = str(uuid4())\nprint 'uuid4:', _uuid4\n\n# 2. \u4f7f\u3044\u6368\u3066ID\u306e\u30c1\u30a7\u30c3\u30af\u30b5\u30e0\nchecksum = checksum_base64_crc(_uuid4)\nprint 'checksum:', checksum\n\n# 3. URL\u767a\u884c\nprint \"http://hoge/page?token={}%20cs={}\".format(_uuid4, checksum)\n\n\n\n\u5b9f\u884c\u7d50\u679c2\n>python m.py \nuuid4: 6a1d87e0-0518-4aa0-a2ca-cced091f254b\nchecksum: -2147023629\nhttp://hoge/page?token=6a1d87e0-0518-4aa0-a2ca-cced091f254b%20cs=-2147023629\n\n\n\nredis\u3067\u767a\u884c\u3057\u305fURL\u3092\u7ba1\u7406\u3059\u308b\u3002\ntoken\u304c\u767a\u884c\u3055\u308c\u3059\u304e\u308b\u3068\u3001DB\u306e\u80a5\u5927\u5316\u304c\u6016\u3044\u3002\u6642\u9593\u7d4c\u904e\u3067\u6d88\u3048\u3066\u554f\u984c\u306a\u3044\u30c7\u30fc\u30bf\u306fredis\u3067\u7ba1\u7406\u3059\u308b\u3068\u4fbf\u5229\u3002\u30c7\u30fc\u30bf\u304c\u6642\u9593\u7d4c\u904e\u3067\u6d88\u3048\u308b\u306e\u3067\u3001\u554f\u3044\u5408\u308f\u305b\u5bfe\u7b56\u3068\u3057\u3066\u767a\u884c\u3057\u305fURL\u3092\u30ed\u30b0\u306b\u6b8b\u3057\u3066\u304a\u304f\u3068\u5f8c\u3067\u697d\u3002\n\n\u5b8c\u6210\u54c1\n\ntoken_manager.py\n# -*- coding: utf-8 -*-\nfrom __future__ import absolute_import, unicode_literals\nimport binascii\nfrom redis import Redis\nfrom uuid import uuid4\n\n\ndef checksum_base64_crc(_str):\n    \"\"\"\n    \u5165\u529b\u3055\u308c\u305f\u6587\u5b57\u5217\u3092\u53cd\u8ee2\u3057\u3001base64\u30a8\u30f3\u30b3\u30fc\u30c9\u3057\u3066\u3001crc32\u30c1\u30a7\u30c3\u30af\u30b5\u30e0\u3092\u8fd4\u3059\n    :param _str: str\n    :rtype : int\n    \"\"\"\n    # \u53cd\u8ee2\n    _str_r = _str[::-1]\n\n    # base64\u30a8\u30f3\u30b3\u30fc\u30c9\u3057\u3066crc32\u30c1\u30a7\u30c3\u30af\u30b5\u30e0\u3092\u53d6\u308b\n    return binascii.crc32(binascii.b2a_base64(_str_r))\n\n\nclass IncorrectCheckSumError(Exception):\n    # \u30c1\u30a7\u30c3\u30af\u30b5\u30e0\u304c\u9593\u9055\u3063\u3066\u3044\u308b\n    pass\n\n\nclass TokenExpiredError(Exception):\n    # Token\u306e\u6709\u52b9\u671f\u9650\u5207\u308c\n    pass\n\n\nclass TokenRepository(object):\n    \"\"\"\n    URL\u7528\u306eToken\u3092Redis\u306b\u4e00\u5b9a\u671f\u9593\u4fdd\u5b58\u3057\u3066\u7ba1\u7406\u3059\u308b\n    \"\"\"\n    EXPIRE_SEC = 3600\n    _KEY_BASE = \"project_name/url/disposable/{}\"\n    _cli = None\n\n    @property\n    def client(self):\n        \"\"\"\n        :rtype : Redis\n        \"\"\"\n        if self._cli is None:\n            self._cli = Redis(host='localhost', port=6379, db=10)\n            return self._cli\n        return self._cli\n\n    def get_key(self, token):\n        return self._KEY_BASE.format(str(token))\n\n    def set(self, token, value):\n        self.client.setex(self.get_key(token), value, self.EXPIRE_SEC)\n        return\n\n    def get(self, token):\n        \"\"\"\n        \u7d10\u3065\u304f\u5024\u3092\u8fd4\u5374\n        :param token:\n        :return: str\n        \"\"\"\n        value = self.client.get(self.get_key(token))\n        return str(value)\n\n    def exist(self, token):\n        \"\"\"\n        \u30ea\u30dd\u30b8\u30c8\u30ea\u306btoken\u304c\u5b58\u5728\u3059\u308b\u304b\u78ba\u8a8d\u3059\u308b\n        :param token: unicode or string\n        :rtype: bool\n        \"\"\"\n        return bool(self.get(token))\n\n\nclass TokenManager(object):\n    @classmethod\n    def validate(cls, token, check_sum):\n        \"\"\"\n        token\u304c\u6b63\u3057\u3044\u304b\u30c1\u30a7\u30c3\u30af\u3059\u308b\n        :param token: unicode or str\n        :param check_sum: int\n        :rtype : bool\n        \"\"\"\n        token = str(token)\n        check_sum = int(check_sum)\n\n        # \u30c1\u30a7\u30c3\u30af\u30b5\u30e0\u3067\u6b63\u3057\u3044token\u304b\u8abf\u3079\u308b\n        if checksum_base64_crc(token) != check_sum:\n            raise IncorrectCheckSumError\n\n        user_id = TokenRepository().get(token)\n        return bool(user_id)\n\n    @classmethod\n    def generate(cls, user_id):\n        \"\"\"\n        token\u3068checksum\u3092\u751f\u6210\u3059\u308b\n        :param user_id:\n        :return: str, int\n        \"\"\"\n        # \u751f\u6210\n        token = str(uuid4())\n\n        # \u751f\u6210\u3057\u305ftoken\u3068user_id\u3092redis\u306b\u7d10\u4ed8\u3051\u3066\u4fdd\u5b58\n        TokenRepository().set(token, user_id)\n\n        return token, checksum_base64_crc(token)\n\n    @classmethod\n    def get_user_id_from_token(cls, token, check_sum):\n        \"\"\"\n        token\u304b\u3089user_id\u3092\u5f15\u304f\n        :param token: str or unicode\n        :param check_sum: int\n        :rtype: str\n        \"\"\"\n        token = str(token)\n        if not cls.validate(token, check_sum):\n            raise TokenExpiredError\n        return TokenRepository().get(token)\n\n\n# 1. \u4f7f\u3044\u6368\u3066URL\u3092\u767a\u884c\nurl_base = \"http://hogehoge.com/hoge?token={}&cs={}\"\nuser_id = \"1111222333\"\n_token, check_sum = TokenManager.generate(user_id)\nurl = url_base.format(_token, str(check_sum))\nprint url\n\n# 2. \u30ed\u30fc\u30c9\u8a66\u9a13\nassert TokenManager.get_user_id_from_token(_token, check_sum) == str(user_id)\n\n\n\n\nDjango\u5074\u306eView\n# -*- coding: utf-8 -*-\nfrom __future__ import absolute_import, unicode_literals\nfrom django.http import HttpResponse\nfrom django.views.generic import View\n\n\nclass ExclusiveView(View):\n    def get(self, request, *args, **kwargs):\n        # HTTP GET\n        token = request.GET.get(\"token\", None)\n        check_sum = request.GET.get(\"cs\", None)\n\n        # token\u304b\u3089user_id\u3092\u5f15\u304f\n        error_message = None\n        message = None\n        try:\n            user_id = TokenManager.get_user_id_from_token(token, check_sum)\n            message = \"\u3042\u306a\u305f\u306euser_id\u306f{}\u3067\u3059\".format(user_id)\n        except IncorrectCheckSumError:\n            error_message = \"\u4e0d\u6b63\u306a\u30d1\u30e9\u30e1\u30fc\u30bf\u30fc\u3067\u3059\"\n        except TokenExpiredError:\n            error_message = \"\u30da\u30fc\u30b8\u306e\u6709\u52b9\u671f\u9650\u5207\u308c\"\n        if error_message:\n            message = error_message\n\n        return HttpResponse(message,\n                            mimetype='text/html; charset=UTF-8',\n                            *args, **kwargs)\n\n\n\n\u5b9f\u884c\u7d50\u679c\n\nURL\u767a\u884c\n>python m.py \nhttp://hogehoge.com/hoge?token=e359b20e-4c60-48da-9294-2ea9fcca0a6c&cs=-2066385284\n\n\n\u203bURL\u914d\u5e03\u6642\u306f\u5fc5\u305aURI\u30a8\u30f3\u30b3\u30fc\u30c9\u3057\u3066\u304b\u3089\u914d\u5e03\u3059\u308b\u3053\u3068\u3002\n\u25a0\u30d6\u30e9\u30a6\u30b6\u3067\u30a2\u30af\u30bb\u30b9 \u6b63\u5e38\u7cfb\n\n\u25a0\u30d6\u30e9\u30a6\u30b6\u3067\u30a2\u30af\u30bb\u30b9 \u7570\u5e38\u7cfb\n\n# \u74b0\u5883\npython:2.7\nDjango:1.6\npip install redis\n\n# \u5c02\u7528URL\u3092\u767a\u884c\u3057\u305f\u304f\u306a\u308b\u30bf\u30a4\u30df\u30f3\u30b0\n\u5c02\u7528\u30da\u30fc\u30b8\u3068\u3044\u3046\u3068\u30a2\u30ab\u30a6\u30f3\u30c8\u3067\u30ed\u30b0\u30a4\u30f3+Cookie\u304c\u4e00\u822c\u7684\u3060\u3051\u3069\u3001\u30ed\u30b0\u30a4\u30f3\u305b\u305a\u30e6\u30fc\u30b6\u6bce\u306b\u5c02\u7528URL\u3092\u767a\u884c\u3057\u305f\u3044\u3068\u304d\u304c\u3042\u308b\u3002\u4f8b\u3048\u3070\u521d\u56de\u767b\u9332\u6642\u306e\u30e1\u30fc\u30eb\u3068\u304b\u3001\u6700\u8fd1\u306e\u30b9\u30de\u30db\u30b2\u30fc\u30e0\u3060\u3068\u30ed\u30b0\u30a4\u30f3ID\u3092\u767a\u884c\u3057\u306a\u3044\u306e\u304c\u4e00\u822c\u7684\u306a\u306e\u3067\u30e6\u30fc\u30b6\u3078\u30a2\u30ab\u30a6\u30f3\u30c8\u3092\u767a\u884c\u3057\u3066\u3044\u307e\u305b\u3093\u3002\n\n# \u60f3\u5b9a\u3055\u308c\u308b\u653b\u6483\u3068\u5bfe\u7b56\n\u8f9e\u66f8\u30a2\u30bf\u30c3\u30af\u3068\u7dcf\u5f53\u305f\u308a\u653b\u6483\u304c\u6016\u3044\u306e\u3067\u3001\u305d\u308c\u3055\u3048\u5bfe\u7b56\u3057\u3066\u3044\u308c\u3070\u5927\u4e08\u592b\u306a\u306f\u305a\n1. \u8f9e\u66f8\u30a2\u30bf\u30c3\u30af\u5bfe\u7b56\u3068\u3057\u3066URL\u306e\u6587\u5b57\u5217\u304c\u30e6\u30fc\u30b6ID\u304b\u3089\u63a8\u6e2c\u3067\u304d\u306a\u3044\u4f7f\u3044\u6368\u3066\u6587\u5b57\u5217\u3067\u3042\u308b\u3053\u3068\n2. \u7dcf\u5f53\u305f\u308a\u653b\u6483\u5bfe\u7b56\u3068\u3057\u30661\u3067\u767a\u884c\u3057\u305f\u4f7f\u3044\u6368\u3066\u6587\u5b57\u5217\u306b\u30c1\u30a7\u30c3\u30af\u30b5\u30e0\u3092\u5165\u308c\u308b\n\n\u2193\u30b3\u30fc\u30c9\u8aad\u3093\u3060\u65b9\u304c\u591a\u5206\u65e9\u3044\n\n```py:m.py\nfrom uuid import uuid4\n\n# 1. \u4f7f\u3044\u6368\u3066ID\u306e\u767a\u884c\n_uuid4 = str(uuid4())\nprint 'uuid4:', _uuid4\n\n# 2. \u4f7f\u3044\u6368\u3066ID\u306e\u30c1\u30a7\u30c3\u30af\u30b5\u30e0\nuuid4_char_list = [ord(_char) for _char in _uuid4]\nprint 'uuid4_char_list:', uuid4_char_list\nchecksum = sum(uuid4_char_list)\nprint 'checksum:', checksum\n\n# 3. URL\u767a\u884c\nprint \"http://hoge/page?token={}%20cs={}\".format(_uuid4, checksum)\n\n```\n\n```shell-session:\u5b9f\u884c\u7d50\u679c\n> python m.py \nuuid4: 6da25bb0-5d9c-4c1e-becc-51e3d5078fe4\nuuid4_char_list: [54, 100, 97, 50, 53, 98, 98, 48, 45, 53, 100, 57, 99, 45, 52, 99, 49, 101, 45, 98, 101, 99, 99, 45, 53, 49, 101, 51, 100, 53, 48, 55, 56, 102, 101, 52]\nchecksum: 2606\nhttp://hoge/page?token=6da25bb0-5d9c-4c1e-becc-51e3d5078fe4%20cs=2606\n\n```\n\n# \u3053\u306e\u4ed5\u7d44\u307f\u3092\u30bb\u30ad\u30e5\u30ea\u30c6\u30a3\u306e\u89b3\u70b9\u3067\u30ec\u30d3\u30e5\u30fc\u3059\u308b\u3068...\n\u30ec\u30d3\u30e5\u30fc\u3059\u308b\u3068\u3001\u3088\u304f\u3053\u3046\u8a00\u308f\u308c\u307e\u3059\u3002\u300e\u30c1\u30a7\u30c3\u30af\u30b5\u30e0\u3060\u3068\u89e3\u6790\u3055\u308c\u3066\u5371\u306a\u3044\u3093\u3058\u3083\u306a\u3044\uff1f\u300f\n\u3046\u3061\u306e\u904e\u758e\u30b7\u30b9\u30c6\u30e0\u3092\u89e3\u6790\u3057\u3066\u304f\u3060\u3055\u308b\u5947\u7279\u306a\u30cf\u30c3\u30ab\u30fc\u69d8\u306a\u3093\u3066\u5c45\u307e\u305b\u3093\u3088\u3068\u8a00\u3044\u305f\u3044\u3068\u3053\u308d\u3092\u3050\u3063\u3068\u582a\u3048\u3066\u30ed\u30b8\u30c3\u30af\u3092\u4fee\u6b63\u3057\u3066\u3044\u304d\u307e\u3059\u3002\n\n```py:m.py\n# -*- coding: utf-8 -*-\nfrom __future__ import absolute_import, unicode_literals\n\nimport binascii\nfrom uuid import uuid4\n\n\ndef checksum_base64_crc(_str):\n    \"\"\"\n    \u5165\u529b\u3055\u308c\u305f\u6587\u5b57\u5217\u3092\u53cd\u8ee2\u3057\u3001base64\u30a8\u30f3\u30b3\u30fc\u30c9\u3057\u3066\u3001crc32\u30c1\u30a7\u30c3\u30af\u30b5\u30e0\u3092\u8fd4\u3059\n    :param _str: str\n    :rtype : int\n    \"\"\"\n    # \u53cd\u8ee2\n    _str_r = _str[::-1]\n\n    # base64\u30a8\u30f3\u30b3\u30fc\u30c9\u3057\u3066crc32\u30c1\u30a7\u30c3\u30af\u30b5\u30e0\u3092\u53d6\u308b\n    return binascii.crc32(binascii.b2a_base64(_str_r))\n\n\n# 1. \u4f7f\u3044\u6368\u3066ID\u306e\u767a\u884c\n_uuid4 = str(uuid4())\nprint 'uuid4:', _uuid4\n\n# 2. \u4f7f\u3044\u6368\u3066ID\u306e\u30c1\u30a7\u30c3\u30af\u30b5\u30e0\nchecksum = checksum_base64_crc(_uuid4)\nprint 'checksum:', checksum\n\n# 3. URL\u767a\u884c\nprint \"http://hoge/page?token={}%20cs={}\".format(_uuid4, checksum)\n```\n\n```shell-session:\u5b9f\u884c\u7d50\u679c2\n>python m.py \nuuid4: 6a1d87e0-0518-4aa0-a2ca-cced091f254b\nchecksum: -2147023629\nhttp://hoge/page?token=6a1d87e0-0518-4aa0-a2ca-cced091f254b%20cs=-2147023629\n```\n\n# redis\u3067\u767a\u884c\u3057\u305fURL\u3092\u7ba1\u7406\u3059\u308b\u3002\ntoken\u304c\u767a\u884c\u3055\u308c\u3059\u304e\u308b\u3068\u3001DB\u306e\u80a5\u5927\u5316\u304c\u6016\u3044\u3002\u6642\u9593\u7d4c\u904e\u3067\u6d88\u3048\u3066\u554f\u984c\u306a\u3044\u30c7\u30fc\u30bf\u306fredis\u3067\u7ba1\u7406\u3059\u308b\u3068\u4fbf\u5229\u3002\u30c7\u30fc\u30bf\u304c\u6642\u9593\u7d4c\u904e\u3067\u6d88\u3048\u308b\u306e\u3067\u3001\u554f\u3044\u5408\u308f\u305b\u5bfe\u7b56\u3068\u3057\u3066\u767a\u884c\u3057\u305fURL\u3092\u30ed\u30b0\u306b\u6b8b\u3057\u3066\u304a\u304f\u3068\u5f8c\u3067\u697d\u3002\n\n# \u5b8c\u6210\u54c1\n```py:token_manager.py\n# -*- coding: utf-8 -*-\nfrom __future__ import absolute_import, unicode_literals\nimport binascii\nfrom redis import Redis\nfrom uuid import uuid4\n\n\ndef checksum_base64_crc(_str):\n    \"\"\"\n    \u5165\u529b\u3055\u308c\u305f\u6587\u5b57\u5217\u3092\u53cd\u8ee2\u3057\u3001base64\u30a8\u30f3\u30b3\u30fc\u30c9\u3057\u3066\u3001crc32\u30c1\u30a7\u30c3\u30af\u30b5\u30e0\u3092\u8fd4\u3059\n    :param _str: str\n    :rtype : int\n    \"\"\"\n    # \u53cd\u8ee2\n    _str_r = _str[::-1]\n\n    # base64\u30a8\u30f3\u30b3\u30fc\u30c9\u3057\u3066crc32\u30c1\u30a7\u30c3\u30af\u30b5\u30e0\u3092\u53d6\u308b\n    return binascii.crc32(binascii.b2a_base64(_str_r))\n\n\nclass IncorrectCheckSumError(Exception):\n    # \u30c1\u30a7\u30c3\u30af\u30b5\u30e0\u304c\u9593\u9055\u3063\u3066\u3044\u308b\n    pass\n\n\nclass TokenExpiredError(Exception):\n    # Token\u306e\u6709\u52b9\u671f\u9650\u5207\u308c\n    pass\n\n\nclass TokenRepository(object):\n    \"\"\"\n    URL\u7528\u306eToken\u3092Redis\u306b\u4e00\u5b9a\u671f\u9593\u4fdd\u5b58\u3057\u3066\u7ba1\u7406\u3059\u308b\n    \"\"\"\n    EXPIRE_SEC = 3600\n    _KEY_BASE = \"project_name/url/disposable/{}\"\n    _cli = None\n\n    @property\n    def client(self):\n        \"\"\"\n        :rtype : Redis\n        \"\"\"\n        if self._cli is None:\n            self._cli = Redis(host='localhost', port=6379, db=10)\n            return self._cli\n        return self._cli\n\n    def get_key(self, token):\n        return self._KEY_BASE.format(str(token))\n\n    def set(self, token, value):\n        self.client.setex(self.get_key(token), value, self.EXPIRE_SEC)\n        return\n\n    def get(self, token):\n        \"\"\"\n        \u7d10\u3065\u304f\u5024\u3092\u8fd4\u5374\n        :param token:\n        :return: str\n        \"\"\"\n        value = self.client.get(self.get_key(token))\n        return str(value)\n\n    def exist(self, token):\n        \"\"\"\n        \u30ea\u30dd\u30b8\u30c8\u30ea\u306btoken\u304c\u5b58\u5728\u3059\u308b\u304b\u78ba\u8a8d\u3059\u308b\n        :param token: unicode or string\n        :rtype: bool\n        \"\"\"\n        return bool(self.get(token))\n\n\nclass TokenManager(object):\n    @classmethod\n    def validate(cls, token, check_sum):\n        \"\"\"\n        token\u304c\u6b63\u3057\u3044\u304b\u30c1\u30a7\u30c3\u30af\u3059\u308b\n        :param token: unicode or str\n        :param check_sum: int\n        :rtype : bool\n        \"\"\"\n        token = str(token)\n        check_sum = int(check_sum)\n\n        # \u30c1\u30a7\u30c3\u30af\u30b5\u30e0\u3067\u6b63\u3057\u3044token\u304b\u8abf\u3079\u308b\n        if checksum_base64_crc(token) != check_sum:\n            raise IncorrectCheckSumError\n\n        user_id = TokenRepository().get(token)\n        return bool(user_id)\n\n    @classmethod\n    def generate(cls, user_id):\n        \"\"\"\n        token\u3068checksum\u3092\u751f\u6210\u3059\u308b\n        :param user_id:\n        :return: str, int\n        \"\"\"\n        # \u751f\u6210\n        token = str(uuid4())\n\n        # \u751f\u6210\u3057\u305ftoken\u3068user_id\u3092redis\u306b\u7d10\u4ed8\u3051\u3066\u4fdd\u5b58\n        TokenRepository().set(token, user_id)\n\n        return token, checksum_base64_crc(token)\n\n    @classmethod\n    def get_user_id_from_token(cls, token, check_sum):\n        \"\"\"\n        token\u304b\u3089user_id\u3092\u5f15\u304f\n        :param token: str or unicode\n        :param check_sum: int\n        :rtype: str\n        \"\"\"\n        token = str(token)\n        if not cls.validate(token, check_sum):\n            raise TokenExpiredError\n        return TokenRepository().get(token)\n\n\n# 1. \u4f7f\u3044\u6368\u3066URL\u3092\u767a\u884c\nurl_base = \"http://hogehoge.com/hoge?token={}&cs={}\"\nuser_id = \"1111222333\"\n_token, check_sum = TokenManager.generate(user_id)\nurl = url_base.format(_token, str(check_sum))\nprint url\n\n# 2. \u30ed\u30fc\u30c9\u8a66\u9a13\nassert TokenManager.get_user_id_from_token(_token, check_sum) == str(user_id)\n\n```\n\n```py:Django\u5074\u306eView\n# -*- coding: utf-8 -*-\nfrom __future__ import absolute_import, unicode_literals\nfrom django.http import HttpResponse\nfrom django.views.generic import View\n\n\nclass ExclusiveView(View):\n    def get(self, request, *args, **kwargs):\n        # HTTP GET\n        token = request.GET.get(\"token\", None)\n        check_sum = request.GET.get(\"cs\", None)\n\n        # token\u304b\u3089user_id\u3092\u5f15\u304f\n        error_message = None\n        message = None\n        try:\n            user_id = TokenManager.get_user_id_from_token(token, check_sum)\n            message = \"\u3042\u306a\u305f\u306euser_id\u306f{}\u3067\u3059\".format(user_id)\n        except IncorrectCheckSumError:\n            error_message = \"\u4e0d\u6b63\u306a\u30d1\u30e9\u30e1\u30fc\u30bf\u30fc\u3067\u3059\"\n        except TokenExpiredError:\n            error_message = \"\u30da\u30fc\u30b8\u306e\u6709\u52b9\u671f\u9650\u5207\u308c\"\n        if error_message:\n            message = error_message\n\n        return HttpResponse(message,\n                            mimetype='text/html; charset=UTF-8',\n                            *args, **kwargs)\n```\n\n# \u5b9f\u884c\u7d50\u679c\n```shell-session:URL\u767a\u884c\n>python m.py \nhttp://hogehoge.com/hoge?token=e359b20e-4c60-48da-9294-2ea9fcca0a6c&cs=-2066385284\n```\n\u203bURL\u914d\u5e03\u6642\u306f\u5fc5\u305aURI\u30a8\u30f3\u30b3\u30fc\u30c9\u3057\u3066\u304b\u3089\u914d\u5e03\u3059\u308b\u3053\u3068\u3002\n\n\u25a0\u30d6\u30e9\u30a6\u30b6\u3067\u30a2\u30af\u30bb\u30b9 \u6b63\u5e38\u7cfb\n![\u30b9\u30af\u30ea\u30fc\u30f3\u30b7\u30e7\u30c3\u30c8 2015-10-15 15.20.04.png](https://qiita-image-store.s3.amazonaws.com/0/65312/0026ed0a-8aa5-5078-0add-c6179f0bd162.png)\n\n\u25a0\u30d6\u30e9\u30a6\u30b6\u3067\u30a2\u30af\u30bb\u30b9 \u7570\u5e38\u7cfb\n![\u30b9\u30af\u30ea\u30fc\u30f3\u30b7\u30e7\u30c3\u30c8 2015-10-15 15.20.16.png](https://qiita-image-store.s3.amazonaws.com/0/65312/3a377551-44a0-766c-2e82-e88eeee1bf14.png)\n", "tags": ["Python", "Django", "Redis"]}