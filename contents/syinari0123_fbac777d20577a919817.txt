{"context": "\u5199\u771f\u306b\u5199\u308b\u30d5\u30a9\u30f3\u30c8\u306e\u6587\u5b57\u8a8d\u8b58\u306a\u3069\u306e\u6642\u3001\u5b9f\u969b\u306e\u30d5\u30a9\u30f3\u30c8\u306b\u5bfe\u3057\u3066\u304b\u306a\u308a\u8352\u304f\u306a\u308b\u3068\u601d\u3044\u307e\u3059\u3002\u305d\u306e\u6642\u306b\u7cbe\u5ea6\u3092\u4e0a\u3052\u308b\u305f\u3081\u306b\u5165\u529b\u753b\u50cf\u306b\u5408\u308f\u305b\u3066\u753b\u50cf\u3092\u8352\u304f\u3059\u308b\u3053\u3068\u304c\u5fc5\u8981\u306b\u306a\u308a\u3001\u305d\u308c\u3092Python\u7248openCV\u3067\u884c\u3046\u65b9\u6cd5\u3092\u8a18\u3057\u307e\u3059\u3002\n\n\u30d7\u30ed\u30b0\u30e9\u30e0\u4f8b\n\nnoise.py\n# -*- coding: utf-8 -*-\nimport cv2\nfrom sys import argv\n\ndef main():\n    start=0\n    for x in param:\n        #param\u306b\u542b\u307e\u308c\u308b\u30d7\u30ed\u30b0\u30e9\u30e0\u81ea\u8eab\u3092\u9664\u5916\u3059\u308b\u305f\u3081\n        if start==0:\n            start=start+1\n            continue\n        PATH=x\n        img_src=cv2.imread(PATH)\n        cols=img_src.shape[0]\n        rows=img_src.shape[1]\n        print cols,rows\n\n        #\u30b0\u30ec\u30fc\u30b9\u30b1\u30fc\u30eb\u5316\n        img_gray=cv2.cvtColor(img_src, cv2.COLOR_BGR2GRAY)\n        #\u4e8c\u5024\u5316\n        thresh=100\n        max_pixel=255\n        ret,img_dst=cv2.threshold(img_gray,thresh,max_pixel,cv2.THRESH_BINARY)\n\n        #\u30a6\u30a3\u30f3\u30c9\u30a6\u306b\u753b\u50cf\u3092\u8868\u793a\u3057\u305f\u3044\u6642\u7528\n        '''\n        cv2.imshow(\"binarization image\",img_dst)\n        cv2.waitKey(0)\n        cv2.destroyALLWindows()\n        '''\n\n        #\u753b\u50cf\u3092\u8352\u304f\u3059\u308b(n*n\u306e\u89e3\u50cf\u5ea6\u306b)\n        n=20\n        for i in range(n):\n            for j in range(n):\n                sum=(cols/n)*(rows/n)\n                num=0\n                for k in range((i*cols/n),((i+1)*cols/n)):\n                    for l in range((j*cols/n),((j+1)*cols/n)):\n                        if img_dst[k,l]==0:\n                            num+=1\n                for k in range((i*cols/n),((i+1)*cols/n)):\n                    for l in range((j*cols/n),((j+1)*cols/n)):\n                        if num >= sum/2:\n                            img_dst[k,l]=0\n                        else:\n                            img_dst[k,l]=255\n        cv2.imwrite('%s_after.jpg'%(PATH),img_dst)\n        print('completed %s'%(PATH))\n\n        #\u30a6\u30a3\u30f3\u30c9\u30a6\u306b\u753b\u50cf\u3092\u8868\u793a\u3057\u305f\u3044\u6642\u7528\n        '''\n        cv2.imshow(\"binarization image\",img_dst)\n        cv2.waitKey(0)\n        cv2.destroyALLWindows()\n        '''\n\n\nif __name__ == '__main__':\n    param=argv\n    main()\n\n\n\n\n\u5165\u529b\u4f8b\n$python noise.py image*.jpg\n\n['noise.py', 'image01.jpg', 'image02.jpg', 'image03.jpg', 'image04.jpg', 'image05.jpg', 'image06.jpg', 'image07.jpg', 'image08.jpg', 'image09.jpg']\ncompleted image01.jpg\ncompleted image02.jpg\ncompleted image03.jpg\ncompleted image04.jpg\ncompleted image05.jpg\ncompleted image06.jpg\ncompleted image07.jpg\ncompleted image08.jpg\ncompleted image09.jpg\n\n\n\u7d50\u679c\n\u51e6\u7406\u524d\n\n\u51e6\u7406\u5f8c\n\n\u5199\u771f\u306b\u5199\u308b\u30d5\u30a9\u30f3\u30c8\u306e\u6587\u5b57\u8a8d\u8b58\u306a\u3069\u306e\u6642\u3001\u5b9f\u969b\u306e\u30d5\u30a9\u30f3\u30c8\u306b\u5bfe\u3057\u3066\u304b\u306a\u308a\u8352\u304f\u306a\u308b\u3068\u601d\u3044\u307e\u3059\u3002\u305d\u306e\u6642\u306b\u7cbe\u5ea6\u3092\u4e0a\u3052\u308b\u305f\u3081\u306b\u5165\u529b\u753b\u50cf\u306b\u5408\u308f\u305b\u3066\u753b\u50cf\u3092\u8352\u304f\u3059\u308b\u3053\u3068\u304c\u5fc5\u8981\u306b\u306a\u308a\u3001\u305d\u308c\u3092Python\u7248openCV\u3067\u884c\u3046\u65b9\u6cd5\u3092\u8a18\u3057\u307e\u3059\u3002\n\n## \u30d7\u30ed\u30b0\u30e9\u30e0\u4f8b\n\n```py:noise.py\n# -*- coding: utf-8 -*-\nimport cv2\nfrom sys import argv\n\ndef main():\n    start=0\n    for x in param:\n        #param\u306b\u542b\u307e\u308c\u308b\u30d7\u30ed\u30b0\u30e9\u30e0\u81ea\u8eab\u3092\u9664\u5916\u3059\u308b\u305f\u3081\n        if start==0:\n            start=start+1\n            continue\n        PATH=x\n        img_src=cv2.imread(PATH)\n        cols=img_src.shape[0]\n        rows=img_src.shape[1]\n        print cols,rows\n        \n        #\u30b0\u30ec\u30fc\u30b9\u30b1\u30fc\u30eb\u5316\n        img_gray=cv2.cvtColor(img_src, cv2.COLOR_BGR2GRAY)\n        #\u4e8c\u5024\u5316\n        thresh=100\n        max_pixel=255\n        ret,img_dst=cv2.threshold(img_gray,thresh,max_pixel,cv2.THRESH_BINARY)\n\n        #\u30a6\u30a3\u30f3\u30c9\u30a6\u306b\u753b\u50cf\u3092\u8868\u793a\u3057\u305f\u3044\u6642\u7528\n        '''\n        cv2.imshow(\"binarization image\",img_dst)\n        cv2.waitKey(0)\n        cv2.destroyALLWindows()\n        '''\n        \n        #\u753b\u50cf\u3092\u8352\u304f\u3059\u308b(n*n\u306e\u89e3\u50cf\u5ea6\u306b)\n        n=20\n        for i in range(n):\n            for j in range(n):\n                sum=(cols/n)*(rows/n)\n                num=0\n                for k in range((i*cols/n),((i+1)*cols/n)):\n                    for l in range((j*cols/n),((j+1)*cols/n)):\n                        if img_dst[k,l]==0:\n                            num+=1\n                for k in range((i*cols/n),((i+1)*cols/n)):\n                    for l in range((j*cols/n),((j+1)*cols/n)):\n                        if num >= sum/2:\n                            img_dst[k,l]=0\n                        else:\n                            img_dst[k,l]=255\n        cv2.imwrite('%s_after.jpg'%(PATH),img_dst)\n        print('completed %s'%(PATH))\n\n        #\u30a6\u30a3\u30f3\u30c9\u30a6\u306b\u753b\u50cf\u3092\u8868\u793a\u3057\u305f\u3044\u6642\u7528\n        '''\n        cv2.imshow(\"binarization image\",img_dst)\n        cv2.waitKey(0)\n        cv2.destroyALLWindows()\n        '''\n                \n\nif __name__ == '__main__':\n    param=argv\n    main()\n\n```\n## \u5165\u529b\u4f8b\n```\n$python noise.py image*.jpg\n```\n\n```\n['noise.py', 'image01.jpg', 'image02.jpg', 'image03.jpg', 'image04.jpg', 'image05.jpg', 'image06.jpg', 'image07.jpg', 'image08.jpg', 'image09.jpg']\ncompleted image01.jpg\ncompleted image02.jpg\ncompleted image03.jpg\ncompleted image04.jpg\ncompleted image05.jpg\ncompleted image06.jpg\ncompleted image07.jpg\ncompleted image08.jpg\ncompleted image09.jpg\n```\n\n## \u7d50\u679c\n\n\u51e6\u7406\u524d\n![uFF79_HG_gossic_E.jpg](https://qiita-image-store.s3.amazonaws.com/0/129223/e935a977-7e7f-a15d-b683-253061c43fba.jpeg)\n\n\u51e6\u7406\u5f8c\n![uFF79_HG_gossic_E.jpg_after.jpg](https://qiita-image-store.s3.amazonaws.com/0/129223/a78735d0-70c5-3692-dfb2-d04909f05df2.jpeg)\n", "tags": ["OpenCV", "Python", "\u6a5f\u68b0\u5b66\u7fd2"]}