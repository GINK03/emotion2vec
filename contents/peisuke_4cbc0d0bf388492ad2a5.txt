{"context": "\u672c\u8a18\u4e8b\u306fOpenCV Advent Calendar 19\u65e5\u76ee\u3067\u3059\u3002\nOpenCV\u306e\u4e2d\u306b\u306f\u6ca2\u5c71\u306e\u6a5f\u80fd\u304c\u5165\u3063\u3066\u3044\u307e\u3059\u3002\u672c\u65e5\u306f\u3001\u305d\u306e\u4e2d\u304b\u3089\u6700\u9069\u5316\u306b\u95a2\u3059\u308b\u30e2\u30b8\u30e5\u30fc\u30eb\u306e\u4f7f\u3044\u65b9\u306b\u3064\u3044\u3066\u89e3\u8aac\u3057\u307e\u3059\u3002\n\n\u6700\u9069\u5316\u3068\u306f\n\u3053\u3053\u3067\u306e\u6700\u9069\u5316\u3068\u306f\u95a2\u6570\u306e\u6700\u5c0f\u5316\u3092\u6307\u3059\u3082\u306e\u3068\u3057\u307e\u3059\u3002\u4f8b\u3048\u3070\u3001\nf(x) = x^2 + 2x + 1\nf(x)=x2+2x+1f(x)=x2+2x+1{f(x) = x^2 + 2x + 1\n}\n\u306e\u6700\u5c0f\u5024\u306f\u3001x=\u22121x=\u22121x=-1\u306e\u6642\u306b\u30bc\u30ed\u306b\u306a\u308a\u307e\u3059\u306d\u3002\u3053\u3046\u3044\u3046\u7c21\u5358\u306a\u554f\u984c\u306f\u826f\u3044\u306e\u3067\u3059\u304c\u3001\u8907\u96d1\u306a\u554f\u984c\u306f\u3001\u305d\u3046\u7c21\u5358\u306b\u89e3\u3051\u307e\u305b\u3093\u3002\u305d\u306e\u3088\u3046\u306a\u6642\u306b\u3069\u3046\u3059\u308b\u304b\u3068\u3044\u3046\u3068\u3001\u6570\u5024\u3092\u8272\u3005\u8a66\u3057\u306b\u5165\u308c\u3066\u307f\u3066\u3001\u6700\u9069\u89e3\u3092\u63a2\u7d22\u3059\u308b\u3068\u3044\u3046\u65b9\u7b56\u304c\u53d6\u3089\u308c\u307e\u3059\u3002\u305f\u3060\u3057\u3001\u611a\u76f4\u306b\u5168\u6570\u5024\u3092\u5165\u308c\u3066\u3044\u308b\u3068\u5f53\u7136\u306a\u304c\u3089\u8a08\u7b97\u306f\u7d42\u308f\u3089\u306a\u3044\u306e\u3067\u3001\u3053\u308c\u3092\u52b9\u7387\u5316\u3059\u308b\u69d8\u3005\u306a\u65b9\u6cd5\u304c\u3042\u308a\u307e\u3059\u3002OpenCV\u306b\u306f\u305d\u306e\u4e2d\u3067\u3082\u6709\u540d\u306a\u3001\u6ed1\u964d\u30b7\u30f3\u30d7\u30ec\u30c3\u30af\u30b9\u6cd5\u3001\u5171\u5f79\u52fe\u914d\u6cd5\u3001\u7dda\u5f62\u8a08\u753b\u6cd5\u3001\u672c\u65e5\u306f\u7d39\u4ecb\u3057\u307e\u305b\u3093\u304cMarquardt\u6cd5\u306a\u3069\u69d8\u3005\u306a\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u304c\u5b9f\u88c5\u3055\u308c\u3066\u3044\u307e\u3059\u3002\u7814\u7a76\u958b\u767a\u3092\u3057\u3066\u3044\u3066\u3001\u30e2\u30c7\u30eb\u3068\u306a\u308b\u6570\u5f0f\u306f\u3067\u304d\u305f\u306e\u3067\u3001\u3053\u308c\u3092\u6700\u9069\u5316\u3057\u305f\u3044\uff01\u3068\u3044\u3046\u6642\u306b\u30b5\u30af\u30c3\u3068\u6700\u9069\u5316\u3067\u304d\u308b\u306e\u3067\u3001\u4fbf\u5229\u306a\u306e\u3067\u306f\u306a\u3044\u3067\u3057\u3087\u3046\u304b\u3002\n\n\u6ed1\u964d\u30b7\u30f3\u30d7\u30ec\u30c3\u30af\u30b9\u6cd5\n\u8a73\u3057\u3044\u8aac\u660e\u306f\u4ee5\u4e0b\u306b\u3042\u308b\u306e\u3067\u7701\u7565\u3057\u307e\u3059\u3002\nhttps://ja.wikipedia.org/wiki/\u30cd\u30eb\u30c0\u30fc\u2013\u30df\u30fc\u30c9\u6cd5\n\u3053\u3053\u3067\u306f\u3001\nf(x, y) = x^2 + y^2\nf(x,y)=x2+y2{f(x, y) = x^2 + y^2\n}\n\u3068\u3044\u3046\u3001\u7c21\u5358\u306a\u6570\u5f0f\u3092\u6700\u5c0f\u5316\u3057\u3066\u307f\u307e\u3057\u3087\u3046\u3002\u4ee5\u4e0b\u306b\u3042\u308b\u3088\u3046\u306b\u3001\u305d\u306e\u307e\u307e\u3067\u3059\u304c\u3001MinProblemSolver::Function\u3092\u7d99\u627f\u3057\u3066\u3001\u95a2\u6570\u3092\u5b9a\u7fa9\u3057\u3066\u3084\u308a\u307e\u3059\u3002\u5148\u307b\u3069\u306e\u6570\u5f0f\u306b\u304a\u3051\u308bxx\u304c\u30b3\u30fc\u30c9\u306ex[0]\u306b\u3001yy\u304c\u30b3\u30fc\u30c9\u306ex[1]\u306b\u5bfe\u5fdc\u3057\u307e\u3059\u3002\u307e\u305f\u3001\u5909\u6570\u306e\u6b21\u5143\u6570\u3092getDims\u95a2\u6570\u3067\u5b9a\u7fa9\u3057\u307e\u3059\u3002\nclass DistanceToLines :public MinProblemSolver::Function {\n  public:\n  double calc(const double* x)const{\n    return x[0] * x[0] + x[1] * x[1];\n  }\n  virtual int getDims() const { return 2; }\n};\n\n\u5b9a\u7fa9\u3057\u305f\u95a2\u6570\u3092\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u6700\u5c0f\u5316\u3057\u307e\u3059\u3002\u3053\u3053\u307e\u3067\u66f8\u3044\u305f\u3068\u3053\u308d\u3067\u6642\u9593\u304c\u306a\u304f\u306a\u3063\u305f\u306e\u3067\u3001\u307e\u305f\u8ffd\u8a18\u3057\u307e\u3059\u3002\nvoid test_downhill()\n{\n  Mat P = (Mat_<double>(1, 2) << 1.0, 1.0);\n  Mat step = (Mat_<double>(2, 1) << -0.5, 0.5);\n\n  Ptr<MinProblemSolver::Function> ptr_F(new DistanceToLines());\n  Ptr<DownhillSolver> solver1 = DownhillSolver::create();\n\n  solver1->setFunction(ptr_F);\n  solver1->setInitStep(step);\n\n  double res = solver1->minimize(P);\n\n  cout << \"res \" << res << endl;\n}\n\n\n\u5171\u5f79\u52fe\u914d\u6cd5\nhttps://ja.wikipedia.org/wiki/\u5171\u5f79\u52fe\u914d\u6cd5\nclass DistanceToLines2 :public MinProblemSolver::Function {\n  public:\n  double calc(const double* x)const{\n    return x[0] * x[0] + x[1] * x[1];\n  }\n  void getGradient(const double* x, double* grad) {\n    grad[0] = 2 * x[0];\n    grad[1] = 2 * x[1];\n  }\n  virtual int getDims() const { return 2; }\n};\n\nvoid test_conj()\n{\n  Mat P = (Mat_<double>(1, 2) << 1.0, 1.0);\n\n  Ptr<MinProblemSolver::Function> ptr_F(new DistanceToLines2());\n  Ptr<ConjGradSolver> solver2 = ConjGradSolver::create();\n\n  solver2->setFunction(ptr_F);\n\n  double res = solver2->minimize(P);\n\n  cout << \"res \" << res << endl;\n}\n\nvoid test_lp()\n{\n  Mat A=(cv::Mat_<double>(3,1)<<3,1,2);\n  Mat B=(cv::Mat_<double>(3,4)<<1,1,3,30,2,2,5,24,4,1,2,36);\n  Mat z;\n  cv::solveLP(A,B,z);\n  cout << z << endl;\n}\n\n\u672c\u8a18\u4e8b\u306fOpenCV Advent Calendar 19\u65e5\u76ee\u3067\u3059\u3002\n\nOpenCV\u306e\u4e2d\u306b\u306f\u6ca2\u5c71\u306e\u6a5f\u80fd\u304c\u5165\u3063\u3066\u3044\u307e\u3059\u3002\u672c\u65e5\u306f\u3001\u305d\u306e\u4e2d\u304b\u3089\u6700\u9069\u5316\u306b\u95a2\u3059\u308b\u30e2\u30b8\u30e5\u30fc\u30eb\u306e\u4f7f\u3044\u65b9\u306b\u3064\u3044\u3066\u89e3\u8aac\u3057\u307e\u3059\u3002\n\n# \u6700\u9069\u5316\u3068\u306f\n\n\u3053\u3053\u3067\u306e\u6700\u9069\u5316\u3068\u306f\u95a2\u6570\u306e\u6700\u5c0f\u5316\u3092\u6307\u3059\u3082\u306e\u3068\u3057\u307e\u3059\u3002\u4f8b\u3048\u3070\u3001\n\n```math\nf(x) = x^2 + 2x + 1\n```\n\n\u306e\u6700\u5c0f\u5024\u306f\u3001$x=-1$\u306e\u6642\u306b\u30bc\u30ed\u306b\u306a\u308a\u307e\u3059\u306d\u3002\u3053\u3046\u3044\u3046\u7c21\u5358\u306a\u554f\u984c\u306f\u826f\u3044\u306e\u3067\u3059\u304c\u3001\u8907\u96d1\u306a\u554f\u984c\u306f\u3001\u305d\u3046\u7c21\u5358\u306b\u89e3\u3051\u307e\u305b\u3093\u3002\u305d\u306e\u3088\u3046\u306a\u6642\u306b\u3069\u3046\u3059\u308b\u304b\u3068\u3044\u3046\u3068\u3001\u6570\u5024\u3092\u8272\u3005\u8a66\u3057\u306b\u5165\u308c\u3066\u307f\u3066\u3001\u6700\u9069\u89e3\u3092\u63a2\u7d22\u3059\u308b\u3068\u3044\u3046\u65b9\u7b56\u304c\u53d6\u3089\u308c\u307e\u3059\u3002\u305f\u3060\u3057\u3001\u611a\u76f4\u306b\u5168\u6570\u5024\u3092\u5165\u308c\u3066\u3044\u308b\u3068\u5f53\u7136\u306a\u304c\u3089\u8a08\u7b97\u306f\u7d42\u308f\u3089\u306a\u3044\u306e\u3067\u3001\u3053\u308c\u3092\u52b9\u7387\u5316\u3059\u308b\u69d8\u3005\u306a\u65b9\u6cd5\u304c\u3042\u308a\u307e\u3059\u3002OpenCV\u306b\u306f\u305d\u306e\u4e2d\u3067\u3082\u6709\u540d\u306a\u3001\u6ed1\u964d\u30b7\u30f3\u30d7\u30ec\u30c3\u30af\u30b9\u6cd5\u3001\u5171\u5f79\u52fe\u914d\u6cd5\u3001\u7dda\u5f62\u8a08\u753b\u6cd5\u3001\u672c\u65e5\u306f\u7d39\u4ecb\u3057\u307e\u305b\u3093\u304cMarquardt\u6cd5\u306a\u3069\u69d8\u3005\u306a\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u304c\u5b9f\u88c5\u3055\u308c\u3066\u3044\u307e\u3059\u3002\u7814\u7a76\u958b\u767a\u3092\u3057\u3066\u3044\u3066\u3001\u30e2\u30c7\u30eb\u3068\u306a\u308b\u6570\u5f0f\u306f\u3067\u304d\u305f\u306e\u3067\u3001\u3053\u308c\u3092\u6700\u9069\u5316\u3057\u305f\u3044\uff01\u3068\u3044\u3046\u6642\u306b\u30b5\u30af\u30c3\u3068\u6700\u9069\u5316\u3067\u304d\u308b\u306e\u3067\u3001\u4fbf\u5229\u306a\u306e\u3067\u306f\u306a\u3044\u3067\u3057\u3087\u3046\u304b\u3002\n\n# \u6ed1\u964d\u30b7\u30f3\u30d7\u30ec\u30c3\u30af\u30b9\u6cd5\n\n\u8a73\u3057\u3044\u8aac\u660e\u306f\u4ee5\u4e0b\u306b\u3042\u308b\u306e\u3067\u7701\u7565\u3057\u307e\u3059\u3002\nhttps://ja.wikipedia.org/wiki/\u30cd\u30eb\u30c0\u30fc\u2013\u30df\u30fc\u30c9\u6cd5\n\n\u3053\u3053\u3067\u306f\u3001\n\n```math\nf(x, y) = x^2 + y^2\n```\n\n\u3068\u3044\u3046\u3001\u7c21\u5358\u306a\u6570\u5f0f\u3092\u6700\u5c0f\u5316\u3057\u3066\u307f\u307e\u3057\u3087\u3046\u3002\u4ee5\u4e0b\u306b\u3042\u308b\u3088\u3046\u306b\u3001\u305d\u306e\u307e\u307e\u3067\u3059\u304c\u3001MinProblemSolver::Function\u3092\u7d99\u627f\u3057\u3066\u3001\u95a2\u6570\u3092\u5b9a\u7fa9\u3057\u3066\u3084\u308a\u307e\u3059\u3002\u5148\u307b\u3069\u306e\u6570\u5f0f\u306b\u304a\u3051\u308b$x$\u304c\u30b3\u30fc\u30c9\u306ex[0]\u306b\u3001$y$\u304c\u30b3\u30fc\u30c9\u306ex[1]\u306b\u5bfe\u5fdc\u3057\u307e\u3059\u3002\u307e\u305f\u3001\u5909\u6570\u306e\u6b21\u5143\u6570\u3092getDims\u95a2\u6570\u3067\u5b9a\u7fa9\u3057\u307e\u3059\u3002\n\n```cpp\nclass DistanceToLines :public MinProblemSolver::Function {\n  public:\n  double calc(const double* x)const{\n    return x[0] * x[0] + x[1] * x[1];\n  }\n  virtual int getDims() const { return 2; }\n};\n```\n\n\u5b9a\u7fa9\u3057\u305f\u95a2\u6570\u3092\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u6700\u5c0f\u5316\u3057\u307e\u3059\u3002\u3053\u3053\u307e\u3067\u66f8\u3044\u305f\u3068\u3053\u308d\u3067\u6642\u9593\u304c\u306a\u304f\u306a\u3063\u305f\u306e\u3067\u3001\u307e\u305f\u8ffd\u8a18\u3057\u307e\u3059\u3002\n\n```cpp\nvoid test_downhill()\n{\n  Mat P = (Mat_<double>(1, 2) << 1.0, 1.0);\n  Mat step = (Mat_<double>(2, 1) << -0.5, 0.5);\n\n  Ptr<MinProblemSolver::Function> ptr_F(new DistanceToLines());\n  Ptr<DownhillSolver> solver1 = DownhillSolver::create();\n  \n  solver1->setFunction(ptr_F);\n  solver1->setInitStep(step);\n  \n  double res = solver1->minimize(P);\n\n  cout << \"res \" << res << endl;\n}\n```\n\n# \u5171\u5f79\u52fe\u914d\u6cd5\nhttps://ja.wikipedia.org/wiki/\u5171\u5f79\u52fe\u914d\u6cd5\n\n```cpp\nclass DistanceToLines2 :public MinProblemSolver::Function {\n  public:\n  double calc(const double* x)const{\n    return x[0] * x[0] + x[1] * x[1];\n  }\n  void getGradient(const double* x, double* grad) {\n    grad[0] = 2 * x[0];\n    grad[1] = 2 * x[1];\n  }\n  virtual int getDims() const { return 2; }\n};\n```\n\n```cpp\nvoid test_conj()\n{\n  Mat P = (Mat_<double>(1, 2) << 1.0, 1.0);\n\n  Ptr<MinProblemSolver::Function> ptr_F(new DistanceToLines2());\n  Ptr<ConjGradSolver> solver2 = ConjGradSolver::create();\n  \n  solver2->setFunction(ptr_F);\n  \n  double res = solver2->minimize(P);\n\n  cout << \"res \" << res << endl;\n}\n```\n\n```cpp\nvoid test_lp()\n{\n  Mat A=(cv::Mat_<double>(3,1)<<3,1,2);\n  Mat B=(cv::Mat_<double>(3,4)<<1,1,3,30,2,2,5,24,4,1,2,36);\n  Mat z;\n  cv::solveLP(A,B,z);\n  cout << z << endl;\n}\n```\n", "tags": ["OpenCV", "C++"]}