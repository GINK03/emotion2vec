{"tags": ["C++", "C++11", "C++14"], "context": "\n\n\u306f\u3058\u3081\u306b\nC++\u30aa\u30fc\u30d0\u30fc\u30ed\u30fc\u30c9\u5927\u5168\u3067\u306f\u3001\u305f\u304f\u3055\u3093\u306e\u30b9\u30c8\u30c3\u30af\u3092\u9802\u304d\u3042\u308a\u304c\u3068\u3046\u3054\u3056\u3044\u307e\u3057\u305f\u3002\n\u3053\u306e\u8a18\u4e8b\u306f\u3001\u4e0a\u306e\u8a18\u4e8b\u3067\u89e3\u8aac\u3059\u308b\u3053\u3068\u3092\u907f\u3051\u305fCreate/Destroy Object\u304a\u3088\u3073Create/Destroy Objects\u3001\u3059\u306a\u308f\u3061new/delete\u6f14\u7b97\u5b50\u3068new[]/delete[]\u6f14\u7b97\u5b50\u306b\u3064\u3044\u3066\u89e3\u8aac\u3057\u305f\u3044\u3068\u601d\u3044\u307e\u3059\u3002\n\u306a\u304a\u3001\u898f\u683c\u306e\u53c2\u7167\u306b\u306f\u3001C++11\u306b\u306fn3337\u3092\u3001C++14\u306b\u306fn3936\u3092\u4f7f\u7528\u3057\u307e\u3057\u305f\u3002\u6b63\u898f\u306e\u898f\u683c\u66f8\u3067\u306f\u306a\u3044\u306e\u3067\u3054\u4e86\u627f\u304f\u3060\u3055\u3044\u3002\n\nCreate/Destroy Object\n// usual new/delete\nvoid* operator new(std::size_t) ; // ...(A)\nvoid operator delete(void*) noexcept ; // ...(B)\nvoid operator delete(void*, std::size_t) noexcept ; // ...(C)\n\n// placement new/delete\nvoid* operator new(std::size_t, Args...) ; // ...(D)\nvoid operator delete(void*, Args...) noexcept ; // ...(E)\n\n\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u69cb\u7bc9/\u7834\u58ca\u6f14\u7b97\u5b50\u3002\u898f\u683c\u3067\u306fallocation or deallocation function\u3068\u547c\u3070\u308c\u3066\u3044\u308b\u306e\u3067\u3001\u78ba\u4fdd/\u89e3\u653e\u95a2\u6570\u3068\u3057\u3066\u3082\u3044\u3044\u3067\u3059\u306d\u3002\u307e\u3042\u3001\u305d\u3093\u306a\u540d\u524d\u3067\u306f\u901a\u5e38\u547c\u3070\u308c\u305a\u3001\u3075\u3064\u3046\u306f\u5358\u306bnew/delete\u3068\u547c\u3070\u308c\u307e\u3059\u3002\u3053\u306e\u6f14\u7b97\u5b50\u306f\u4ed6\u306e\u6f14\u7b97\u5b50\u3068\u9055\u3044\u3001\u5f15\u6570\u3084\u623b\u308a\u5024\u306b\u53b3\u5bc6\u306a\u5236\u9650\u304c\u3042\u308a\u307e\u3059\u3002\u307e\u305f\u3001\u3053\u306e\u6f14\u7b97\u5b50\u306f\u6ce8\u610f\u6df1\u304f\u30aa\u30fc\u30d0\u30fc\u30ed\u30fc\u30c9\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002usual(non-placement) new/delete\u3001placement new/delete\u3001\u30af\u30e9\u30b9\u30b9\u30b3\u30fc\u30d7\u306b\u5b9a\u7fa9\u3055\u308c\u308b\u5834\u5408\u3001\u30b0\u30ed\u30fc\u30d0\u30eb\u30b9\u30b3\u30fc\u30d7\u306b\u5b9a\u7fa9\u3055\u308c\u308b\u5834\u5408\u3068\u3044\u3046\u3088\u3046\u306b\u5834\u5408\u5206\u3051\u3057\u3066\u8aac\u660e\u3057\u3066\u3044\u304d\u305f\u3044\u3068\u601d\u3044\u307e\u3059\u3002\n\n\u30af\u30e9\u30b9\u30b9\u30b3\u30fc\u30d7\u306b\u5b9a\u7fa9\u3055\u308c\u308b\u5834\u5408\n\nusual new/delete\nusual new/delete\u6f14\u7b97\u5b50\u3068\u306f\u3001(placement new/delete\u3068\u6bd4\u8f03\u3057\u3066)\u901a\u5e38\u306enew/delete\u6f14\u7b97\u5b50\u306e\u3053\u3068\u3067\u3059\u3002\u3064\u307e\u308a\u3001\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u6587\u8108\u3067\u547c\u3070\u308c\u308bnew/delete\u6f14\u7b97\u5b50\u306e\u3053\u3068\u3092\u8a00\u3044\u307e\u3059\u3002\nsth* p = new sth(); // usual new\ndelete p; // usual delete\n\nusual new\u6f14\u7b97\u5b50\u306f\u30b7\u30b0\u30cb\u30c1\u30e3\u304cvoid* operator new(std::size_t)\u3067\u306a\u3051\u308c\u3070\u306a\u308a\u307e\u305b\u3093\u30021\nusual delete\u6f14\u7b97\u5b50\u306f\u30b7\u30b0\u30cb\u30c1\u30e3\u304cvoid operator delete(void*)\u3042\u308b\u3044\u306fvoid operator delete(void*, std::size_t)\u3067\u306a\u3051\u308c\u3070\u306a\u308a\u307e\u305b\u3093\u30022\n// usual new/delete\nvoid* operator new(std::size_t) ; // ...(A)\nvoid operator delete(void*) noexcept ; // ...(B)\nvoid operator delete(void*, std::size_t) noexcept ; // ...(C)\n\n\u30af\u30e9\u30b9\u30b9\u30b3\u30fc\u30d7\u306bnew/delete\u6f14\u7b97\u5b50\u3092\u7528\u610f\u3057\u305f\u5834\u5408\u3001\u305d\u306e\u30af\u30e9\u30b9\u3092new/delete\u3059\u308b\u5834\u5408\u306b\u306f\u5e38\u306b\u7528\u610f\u3057\u305f\u3082\u306e\u304c\u4f7f\u308f\u308c\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002\u4f8b\u3048\u3070\u3001\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u30af\u30e9\u30b9\u3092\u7528\u610f\u3057\u305f\u5834\u5408\u3001new sth()\u3068\u3057\u305f\u5834\u5408(1)\u304c\u3001delete ps\u3068\u3057\u305f\u5834\u5408\u306f(2)\u304c\u547c\u3070\u308c\u307e\u3059\u3002\u3053\u308c\u306f\u5927\u5207\u306a\u3053\u3068\u306a\u306e\u3067\u3059\u304c\u3001\u4e21\u8005\u306f\u5fc5\u305a\u5bfe\u5fdc\u3055\u305b\u3066\u30aa\u30fc\u30d0\u30fc\u30ed\u30fc\u30c9\u3059\u308b\u3088\u3046\u306b\u3057\u3066\u304f\u3060\u3055\u3044\u3002\u3064\u307e\u308a\u3001new\u306e\u52d5\u4f5c\u306e\u307f\u3092\u30aa\u30fc\u30d0\u30fc\u30ed\u30fc\u30c9\u3057\u305f\u3044\u3068\u601d\u3063\u3066\u3082\u3001delete\u3082\u30aa\u30fc\u30d0\u30fc\u30ed\u30fc\u30c9\u3059\u308b\u3053\u3068\u304c\u5f37\u304f\u63a8\u5968\u3055\u308c\u307e\u3059\u3002\nstruct sth\n{\n  void* operator new(std::size_t) ; // usual new...(1)\n  void operator delete(void*) noexcept ; // usual new...(2)\n};\n...\n\nsth* p = new sth(); // (1)\u304c\u547c\u3070\u308c\u308b\ndelete p; // (2)\u304c\u547c\u3070\u308c\u308b\n\n\u3061\u306a\u307f\u306b\u3001delete\u306e\u30b7\u30b0\u30cb\u30c1\u30e3\u306b(C)\u306e\u3082\u306e\u3092\u4f7f\u3046\u3068\u3001\u305d\u3061\u3089\u304cusual delete\u3068\u3044\u3046\u6271\u3044\u306b\u306a\u308a\u307e\u3059\u3002\u3053\u306e\u5834\u5408\u3001\u7b2c\u4e8c\u5f15\u6570\u306b\u306f\u7b2c\u4e00\u5f15\u6570\u306b\u793a\u3055\u308c\u308b\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u30b5\u30a4\u30ba\u304c\u6e21\u3055\u308c\u307e\u3059\u3002\nstruct sth\n{\n  void* operator new(std::size_t) ; // usual new...(1)\n  void operator delete(void*, std::size_t) noexcept ; // usual new...(2)\n};\n...\n\nsth* p = new sth(); // (1)\u304c\u547c\u3070\u308c\u308b\ndelete p; // (2)\u304c\u547c\u3070\u308c\u308b\n\n\u4e21\u65b9\u7528\u610f\u3059\u308b\u3068\u3001(B)\u306e\u30b7\u30b0\u30cb\u30c1\u30e3\u304c\u512a\u5148\u3055\u308c\u307e\u3059\u3002\u305d\u306e\u5834\u5408\u3001(C)\u306e\u30b7\u30b0\u30cb\u30c1\u30e3\u306edelete\u306fplacement delete\u3068\u3044\u3046\u6271\u3044\u306b\u306a\u308a\u307e\u3059\u3002\nstruct sth\n{\n  void* operator new(std::size_t) ; // usual new...(1)\n  void operator delete(void*) noexcept ; // usual delete...(2)\n  void operator delete(void*, std::size_t) noexcept ; // placement delete...(3)\n};\n...\n\nsth* p = new sth(); // (1)\u304c\u547c\u3070\u308c\u308b\ndelete p; // (2)\u304c\u547c\u3070\u308c\u308b\n\n\nplacement new/delete\nplacement new/delete\u3068\u306f\u3001usual new/delete\u3088\u308a\u3082\u5f15\u6570\u3092\u591a\u304f\u6301\u3064new/delete\u306e\u3053\u3068\u3067\u3059\u3002\u3059\u306a\u308f\u3061\u3001\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u6587\u8108\u3067\u547c\u3070\u308c\u308bnew/delete\u306e\u3053\u3068\u3092\u6307\u3057\u307e\u3059\u3002\u7b2c\u4e8c\u5f15\u6570\u306bstd::nothrow_t\u3092\u53d6\u308bplacement new/delete\u3092\u60f3\u50cf\u3057\u3066\u304f\u3060\u3055\u3044\u3002\nsth* p = new(std::nothrow) sth(); // placement new\n\np->~sth(); // call dtor\nsth::operator delete(p, std::nothrow); // call the deallocation function\n\n\u8a00\u3044\u305f\u3044\u3053\u3068\u306f\u5206\u304b\u308a\u307e\u3059\u3002delete\u5f0f\u306fplacement\u5f62\u5f0f\u306e\u3082\u306e\u304c\u7528\u610f\u3055\u308c\u3066\u3044\u306a\u3044\u306e\u3067\u3001\u30c7\u30b9\u30c8\u30e9\u30af\u30bf\u3068deallocation function\u3092\u305d\u308c\u305e\u308c\u624b\u52d5\u3067\u547c\u3076\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\nplacement new\u6f14\u7b97\u5b50\u306f\u30b7\u30b0\u30cb\u30c1\u30e3\u304cvoid* operator new(std::size_t, Args...)\u3067\u306a\u3051\u308c\u3070\u306a\u308a\u307e\u305b\u3093\u3002Args\u306f\u4efb\u610f\u306e\u6570\u306e\u4efb\u610f\u306e\u578b\u3068\u306a\u308a\u307e\u3059\u3002\nplacement delete\u6f14\u7b97\u5b50\u306f\u30b7\u30b0\u30cb\u30c1\u30e3\u304cvoid operator delete(void*, Args...)\u3067\u306a\u3051\u308c\u3070\u306a\u308a\u307e\u305b\u3093\u3002\u540c\u69d8\u306b\u3001Args\u306f\u4efb\u610f\u306e\u6570\u306e\u4efb\u610f\u306e\u578b\u3068\u306a\u308a\u307e\u3059\u3002\n// placement new/delete\nvoid* operator new(std::size_t, Args...) ; // ...(D)\nvoid* operator delete(std::size_t, Args...) noexcept ; // ...(E)\n\n\u547c\u3073\u51fa\u3057\u65b9\u304c\u5909\u308f\u308b\u3060\u3051\u3067\u5927\u3057\u3066usual new/delete\u3068\u5909\u308f\u308b\u3068\u3053\u308d\u306f\u3042\u308a\u307e\u305b\u3093\u3002usual new/delete\u540c\u69d8\u306b\u3001\u5fc5\u305a\u5bfe\u5fdc\u3057\u305fplacement new/delete\u3092\u5b9a\u7fa9\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\u3053\u3053\u3067\u3001\u5bfe\u5fdc\u3057\u305fnew/delete\u3068\u3044\u3046\u306e\u306f\u3001Args...\u90e8\u5206\u304c\u540c\u3058new/delete\u3068\u3044\u3046\u610f\u5473\u3067\u3059\u3002\n\u4f8b\u3048\u3070\u3001\u4ee5\u4e0b\u306e\u3088\u3046\u306aplacement new/delete\u3092\u8003\u3048\u307e\u3059\u3002\nstruct sth\n{\n  void* operator new(std::size_t n, void* p) { return p; }\n  void operator delete(void*, void*) noexcept {}\n};\n\n\u6050\u3089\u304f\u3053\u306esth\u306f\u3001\u4f55\u5ea6\u3082\u751f\u6210\uff65\u7834\u68c4\u304c\u7e70\u308a\u8fd4\u3055\u308c\u308b\u306a\u3069\u306e\u7406\u7531\u304c\u3042\u308b\u306e\u3067\u3057\u3087\u3046\u3002\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u4f7f\u7528\u3059\u308b\u3053\u3068\u304c\u60f3\u5b9a\u3055\u308c\u307e\u3059\u3002\nsth* p = static_cast<sth>(std::malloc(sizeof(sth)));\np = operator new(p) sth();\n\np->~sth();\nsth::operator delete(p, p);\nstd::free(p);\n\noperator delete\u3092\u76f4\u63a5\u547c\u3073\u51fa\u3059\u3068\u304d\u306f\u3001\u5f15\u6570\u306boperator new\u3068\u540c\u3058\u3082\u306e\u3092\u5165\u308c\u308b\u3053\u3068\u304c\u63a8\u5968\u3055\u308c\u307e\u3059\u3002\u3061\u306a\u307f\u306b\u3001\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u3067\u4f8b\u5916\u304c\u6295\u3052\u3089\u308c\u305f\u5834\u5408\u3001\u88dc\u8db3\u3055\u308c\u308b\u524d\u306b\u307e\u305aoperator delete\u304c\u547c\u3073\u51fa\u3055\u308c\u307e\u3059\u304c\u3001placement new\u306e\u6587\u8108\u3067\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u304c\u4f8b\u5916\u3092\u6295\u3052\u305f\u5834\u5408\u3001\u5bfe\u5fdc\u3059\u308boperator delete\u304c\u547c\u3073\u51fa\u3055\u308c\u308b\u3053\u3068\u306b\u306a\u308a\u307e\u3059\u3002\u3053\u306e\u610f\u5473\u3067\u3082\u3001usual, placement\u306b\u9650\u3089\u305anew/delete\u306f\u30bb\u30c3\u30c8\u3067\u7528\u610f\u3059\u308b\u3053\u3068\u304c\u5f37\u304f\u63a8\u5968\u3055\u308c\u307e\u3059\u3002\nhttp://ideone.com/TuhbXS\n\noperator delete(void*, std::size_t) \u306e\u4e21\u7fa9\u6027\noperator delete(void*, std::size_t)\u306fusual delete\u3068\u3057\u3066\u7d39\u4ecb\u3057\u307e\u3057\u305f\u304c\u3001placement delete\u3068\u306a\u308a\u3046\u308b\u3053\u3068\u306b\u3082\u89e6\u308c\u307e\u3057\u305f\u3002\u3053\u3053\u3067\u3001\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u5834\u5408\u3092\u8003\u3048\u307e\u3059\u3002\nstruct sth\n{\n  void* operator new(std::size_t, std::size_t) ; // placement new\n  void operator delete(void*, std::size_t) noexcept ; // usual delete\n};\n\n\u3053\u306e\u30af\u30e9\u30b9sth\u306fvoid operator delete(void*)\u3092\u6301\u305f\u306a\u3044\u305f\u3081\u3001void operator delete(void*, std::size_t)\u306fusual delete\u3068\u3057\u3066\u5b9a\u7fa9\u3055\u308c\u307e\u3059\u3002\u3057\u304b\u3057\u30b7\u30b0\u30cb\u30c1\u30e3\u3068\u3057\u3066\u306f\u3001placement new\u3067\u3042\u308bvoid* operator new(std::size_t, std::size_t)\u3068\u5bfe\u5fdc\u3059\u308b\u3082\u306e\u3092\u6301\u3063\u3066\u3044\u307e\u3059\u3002\u3064\u307e\u308a\u3001placement new\u306e\u4e2d\u3067\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u304c\u4f8b\u5916\u3092\u6295\u3052\u305f\u5834\u5408\u306b\u3082\u547c\u3073\u51fa\u3055\u308c\u308b\u3053\u3068\u306b\u306a\u308a\u307e\u3059\u3002\u3086\u3048\u306b\u3001\u3053\u306e\u3088\u3046\u306a\u30d7\u30ed\u30b0\u30e9\u30e0\u306fill-formed\u3067\u3042\u308b\u3068\u3055\u308c\u3001\u305d\u306e\u52d5\u4f5c\u306f\u4fdd\u8a3c\u3055\u308c\u307e\u305b\u3093\u3002\nvoid* operator new(std::size_t, std::size_t)\u3068\u3044\u3046\u30b7\u30b0\u30cb\u30c1\u30e3\u3092\u6301\u3064placement new\u3092\u5b9a\u7fa9\u3057\u305f\u3044\u5834\u5408\u306b\u306f\u3001void operator delete(void*)\u3068void operator delete(std::size_t)\u3068\u3044\u30462\u3064\u306edelete\u6f14\u7b97\u5b50\u3092\u66f8\u304b\u306a\u3051\u308c\u3070\u306a\u3089\u306a\u3044\u3068\u3044\u3046\u3053\u3068\u306b\u306a\u308a\u307e\u3059\u3002\nstruct sth\n{\n  void* operator new(std::size_t) ; // usual new\n  void* operator new(std::size_t, std::size_t) ; // placement new\n  void operator delete(void*) noexcept ; // usual delete\n  void operator delete(void*, std::size_t) noexcept ; // placement delete\n};\n\n\n\u30b0\u30ed\u30fc\u30d0\u30eb\u30b9\u30b3\u30fc\u30d7\u306b\u5b9a\u7fa9\u3055\u308c\u308b\u5834\u5408\n\nusual new/delete\nvoid* operator new(std::size_t) ;\nvoid operator delete(void*) noexcept ; // C++11\nvoid operator delete(void*, std::size_t) noexcept ; // C++14\n\nnew/delete\u6f14\u7b97\u5b50\u306f\u30b0\u30ed\u30fc\u30d0\u30eb\u30b9\u30b3\u30fc\u30d7\u306b\u7f6e\u304f\u3053\u3068\u3082\u3067\u304d\u307e\u3059\u3002new/delete\u6f14\u7b97\u5b50\u306f\u540d\u524d\u7a7a\u9593\u306b\u304f\u308b\u3080\u3053\u3068\u304c\u3067\u304d\u306a\u3044\u306e\u3067\u3001\u5e38\u306b\u30b0\u30ed\u30fc\u30d0\u30eb\u30b9\u30b3\u30fc\u30d7\u306b\u5b9a\u7fa9\u3055\u308c\u308bnew/delete\u6f14\u7b97\u5b50\u306f\u4e00\u3064\u3068\u306a\u308a\u307e\u3059\u30023static\u4fee\u98fe\u5b50\u3084inline\u4fee\u98fe\u5b50\u3092\u4ed8\u4e0e\u3057\u305f\u5834\u5408\u306e\u52d5\u4f5c\u306f\u672a\u5b9a\u7fa9\u3067\u3059\u3002\u30e6\u30fc\u30b6\u5b9a\u7fa9\u306enew/delete\u6f14\u7b97\u5b50\u304c\u306a\u3044\u5834\u5408\u306b\u306f\u6a19\u6e96\u30e9\u30a4\u30d6\u30e9\u30ea\u304c\u7528\u610f\u3057\u3066\u304f\u308c\u307e\u3059\u3002\u30e6\u30fc\u30b6\u304c\u3053\u308c\u3092\u5b9a\u7fa9\u3057\u305f\u5834\u5408\u3067\u3082new/delete\u6f14\u7b97\u5b50\u306fC++\u30e9\u30a4\u30d6\u30e9\u30ea\u306b\u3088\u3063\u3066\u6697\u9ed9\u7684\u306b\u5404\u7ffb\u8a33\u5358\u4f4d\u306b\u5ba3\u8a00\u304c\u3055\u308c\u307e\u30594\u306e\u3067\u3001\u5168\u3066\u306e\u7ffb\u8a33\u5358\u4f4d\u304b\u3089\u524d\u65b9\u5ba3\u8a00\u306a\u3057\u306b\u5229\u7528\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\u4ee5\u4e0b\u306e\u4f8b\u306f\u3001C++14\u306e\u30b3\u30fc\u30c9\u3068\u3057\u3066\u89e3\u91c8\u3057\u3066\u304f\u3060\u3055\u3044\u3002\u5b9f\u306f\u3001\u30b0\u30ed\u30fc\u30d0\u30eb\u30b9\u30b3\u30fc\u30d7\u306b\u5b9a\u7fa9\u3055\u308c\u308bnew/delete\u6f14\u7b97\u5b50\u306e\u30aa\u30fc\u30d0\u30fc\u30ed\u30fc\u30c9\u306fC++11\u3068C++14\u3067\u6319\u52d5\u304c\u5909\u308f\u308b\u306e\u3067\u3059\u3002C++11\u3068C++14\u306e\u5dee\u7570\u306b\u3064\u3044\u3066\u306f\u307e\u305f\u5f8c\u8ff0\u3057\u307e\u3059\u3002\n\nsub.cpp\n#include <cstdint>\n#include <cstdlib>\n#include <new>\n\nvoid* operator new(std::size_t n)\n{\n  std::puts(\"usual new (sub.cpp)\");\n  void* p = std::malloc(n);\n  return p ? p : throw std::bad_alloc();\n}\nvoid operator delete(void* p, std::size_t)\n{\n  std::puts(\"usual delete (sub.cpp)\");\n  std::free(p);\n}\n\n\n\nmain.cpp\nint main()\n{\n  int* p = new int(); // outputs \"usual new (sub.cpp)\"\n  delete p; // outputs \"usual delete (sub.cpp)\"\n}\n\n\n\u3061\u306a\u307f\u306b\u3001\u30af\u30e9\u30b9\u30b9\u30b3\u30fc\u30d7\u306e\u3082\u306e\u3068\u30b0\u30ed\u30fc\u30d0\u30eb\u30b9\u30b3\u30fc\u30d7\u306e\u3082\u306e\u3068\u3001\u3069\u3061\u3089\u3082new/delete\u304c\u30aa\u30fc\u30d0\u30fc\u30ed\u30fc\u30c9\u3055\u308c\u3066\u3044\u308b\u5834\u5408\u3001\u30af\u30e9\u30b9\u30b9\u30b3\u30fc\u30d7\u306e\u3082\u306e\u304c\u512a\u5148\u3055\u308c\u307e\u3059\u3002\u305d\u306e\u5834\u5408\u306f\u3001::new\u3068\u660e\u793a\u3059\u308c\u3070\u30b0\u30ed\u30fc\u30d0\u30eb\u30b9\u30b3\u30fc\u30d7\u306e\u3082\u306e\u3092\u4f7f\u3046\u3053\u3068\u3082\u3067\u304d\u307e\u3059\u3002\u305f\u3060\u3057\u3001::new\u3067\u69cb\u7bc9\u3057\u305f\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306f::delete\u3067\u3001new\u3067\u69cb\u7bc9\u3057\u305f\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306fdelete\u3067\u7834\u68c4\u3057\u306a\u304f\u3066\u306f\u306a\u308a\u307e\u305b\u3093\u3002\u30b9\u30de\u30fc\u30c8\u30dd\u30a4\u30f3\u30bf\u306a\u3069\u3092\u4f7f\u3046\u3068\u304d\u306b\u3053\u308c\u306f\u3057\u3070\u3057\u3070\u898b\u3064\u3051\u306b\u304f\u3044\u30d0\u30b0\u3092\u751f\u307f\u307e\u3059\u3002\nhttp://ideone.com/wJWl5e\n\nplacement new/delete\nvoid* operator new(std::size_t, Args...) ; // ...(1)\nvoid operator delete(void*, Args...) noexcept ; // ...(2)\n\n\u305f\u3060\u3057\u3001C++14\u3067\u306f(2)\u306b\u304a\u3051\u308bvoid operator delete(void*, std::size_t)\u3092\u9664\u304d\u307e\u3059\u3002\n\u307e\u305f\u6ce8\u610f\u70b9\u306f\u3059\u3079\u3066usual new/delete\u3068\u5909\u308f\u308a\u307e\u305b\u3093\u3002\n\nC++11\u3068C++14\u306e\u5dee\u7570\n\u30b0\u30ed\u30fc\u30d0\u30eb\u30b9\u30b3\u30fc\u30d7\u306bnew/delete\u6f14\u7b97\u5b50\u306e\u30aa\u30fc\u30d0\u30fc\u30ed\u30fc\u30c9\u3092\u5b9a\u7fa9\u3059\u308b\u3053\u3068\u306b\u3064\u3044\u3066\u3001C++11\u3068C++14\u3068\u3067\u5927\u304d\u306a\u5dee\u7570\u304c\u3042\u308b\u3068\u3044\u3046\u304a\u8a71\u306f\u305a\u3063\u3068\u3057\u3066\u3044\u307e\u3057\u305f\u304c\u3001\u3053\u3053\u3067\u305d\u306e\u5dee\u7570\u306b\u3064\u3044\u3066\u66f8\u3044\u3066\u304a\u3053\u3046\u3068\u601d\u3044\u307e\u3059\u3002\n\n\u6a19\u6e96\u30e9\u30a4\u30d6\u30e9\u30ea\u304c\u7528\u610f\u3059\u308bnew/delete\u306e\u30b7\u30b0\u30cb\u30c1\u30e3\u306e\u9055\u3044\nC++11\u306e\u6642\u70b9\u3067\u306f\u3001\u30b0\u30ed\u30fc\u30d0\u30eb\u30b9\u30b3\u30fc\u30d7\u306b\u5b9a\u7fa9\u3055\u308c\u308boperator delete(void*, std::size_t)\u306f\u5168\u3066placement delete\u3067\u3057\u305f\u3002\u3057\u304b\u3057C++14\u3067\u306fvoid operator delete(void*, std::size_t)\u3068\u5f93\u6765\u306eoperator delete(void*, std::size_t)\u306e\u4e21\u65b9\u304cusual delete\u3068\u3057\u3066\u8a8d\u3081\u3089\u308c\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3057\u305f\uff08\u4e21\u65b9\u5b9a\u7fa9\u3055\u308c\u305f\u5834\u5408\u3001\u305d\u306e\u4e21\u65b9\u304cusual delete\u3068\u3057\u3066\u8a8d\u3081\u3089\u308c\u307e\u3059\u30025\uff09\u3002\u3053\u308c\u306b\u4f34\u3044\u3001\u6a19\u6e96\u30e9\u30a4\u30d6\u30e9\u30ea\u306f\u5f93\u6765\u306eusual delete\u3068\u65b0\u3057\u3044usual delete\u306e\u4e21\u65b9\u3092\u63d0\u4f9b\u3057\u3066\u304f\u308c\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3057\u305f\u3002\n\u307e\u305f\u3001\u89e3\u653e\u95a2\u6570\u304c\u4f8b\u5916\u306b\u3088\u3063\u3066\u7d42\u4e86\u3057\u305f\u5834\u5408\u3001\u305d\u306e\u52d5\u4f5c\u304c\u672a\u5b9a\u7fa9\u3067\u3042\u308b\u3068\u3044\u3046\u306e\u306fC++11\u304b\u3089\u5909\u308f\u3089\u306a\u3044\u306e\u3067\u3059\u304c6\u3001\u3053\u308c\u306b\u5408\u308f\u305b\u3066C++14\u3067\u306f\u6a19\u6e96\u30e9\u30a4\u30d6\u30e9\u30ea\u306e\u63d0\u4f9b\u3059\u308boperator delete\u306bnoexcept\u6307\u5b9a\u304c\u3055\u308c\u3066\u3044\u307e\u3059\u3002\u3086\u3048\u306b\u3001\u79c1\u305f\u3061\u304c\u3053\u308c\u3092\u5b9a\u7fa9\u3059\u308b\u5834\u5408\u306b\u306f\u3001C++11\u304bC++14\u304b\u3092\u554f\u308f\u305anoexcept\u3092\u6307\u5b9a\u3059\u3079\u304d\u3067\u3059\u3002\nc++11\u3067\u6a19\u6e96\u30e9\u30a4\u30d6\u30e9\u30ea\u304c\u63d0\u4f9b\u3059\u308b\u95a2\u6570\u306f\u4ee5\u4e0b\u306e\u901a\u308a\u3067\u3059\u30027\n\ncpp11.cpp\nvoid* operator new(std::size_t) ;\nvoid* operator new[](std::size_t) ; \nvoid operator delete(void*) ; \nvoid operator delete[](void*) ; \n\n\nc++14\u3067\u6a19\u6e96\u30e9\u30a4\u30d6\u30e9\u30ea\u304c\u63d0\u4f9b\u3059\u308b\u95a2\u6570\u306f\u4ee5\u4e0b\u306e\u901a\u308a\u3067\u3059\u30028\n\ncpp14.cpp\nvoid* operator new(std::size_t) ; \nvoid* operator new[](std::size_t) ; \nvoid operator delete(void*) noexcept ; \nvoid operator delete[](void*) noexcept ; \nvoid operator delete(void*, std::size_t) noexcept ; \nvoid operator delete[](void*, std::size_t) noexcept ;\n\n\n\u3088\u3063\u3066\u3001c++14\u4ee5\u964d\u306e\u30b0\u30ed\u30fc\u30d0\u30eb\u30b9\u30b3\u30fc\u30d7\u306b\u5b9a\u7fa9\u3055\u308c\u308bnew/delete\u3067\u306f\u3001\u30af\u30e9\u30b9\u30b9\u30b3\u30fc\u30d7\u306e\u3082\u306e\u3068\u306f\u7570\u306a\u308a\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u5bfe\u5fdc\u4ed8\u3051\u306b\u306a\u308a\u307e\u3059\u3002\nvoid* operator new(std::size_t) ; // usual\nvoid* operator new(std::size_t, std::size_t) ; // placement\n\nvoid operator delete(void*) ; // usual\nvoid operator delete(void*, std::size_t) ; // usual \n\n\n\u63a8\u5968\u3055\u308c\u308b\u30b7\u30b0\u30cb\u30c1\u30e3\u306e\u9055\u3044\n\u524d\u8ff0\u306e\u901a\u308a\u3001c++11\u3067\u306fvoid operator delete(void*)\u3057\u304busual delete\u3068\u3057\u3066\u8a8d\u3081\u3089\u308c\u3066\u3044\u307e\u305b\u3093\u3067\u3057\u305f\u3002\u3057\u304b\u3057c++14\u4ee5\u964d\u3067\u306f\u3001void operator delete(void*, std::size_t)\u304c\u63a8\u5968\u3055\u308c\u308b\u307f\u305f\u3044\u3067\u3059\u3002\u79c1\u306e\u624b\u5143\u306e\u30b3\u30f3\u30d1\u30a4\u30e9(gcc5.2)\u3067\u306f\u3001C++14\u306e\u30aa\u30d7\u30b7\u30e7\u30f3\u4ed8\u304d\u3067void operator delete(void*)\u3057\u304b\u5b9a\u7fa9\u3057\u306a\u304b\u3063\u305f\u5834\u5408\u4ee5\u4e0b\u306e\u8b66\u544a\u304c\u51fa\u3066\u3057\u307e\u3044\u307e\u3057\u305f\u3002\n\nmain.cpp:8:6: warning: the program should also define void operator delete(void*, long unsigned int) [-Wsized-deallocation]\n\\void operator delete(void* ptr) noexcept\n\n\u307e\u305f\u3001void operator delete(void*)\u3068void operator delete(void*, std::size_t)\u306e\u4e21\u65b9\u304c\u5b9a\u7fa9\u3055\u308c\u305f\u5834\u5408\u3001\u5f8c\u8005\u304c\u512a\u5148\u3055\u308c\u308b\u3088\u3046\u3067\u3059\u3002\nideone C++11\u7248\nideone C++14\u7248\n\u5bfe\u5fdc\u95a2\u4fc2\u306f\u3069\u3046\u3057\u305f\u3068\u8a00\u308f\u308c\u305d\u3046\u3067\u3059\u304c\u3001\u898f\u683c\u306b\u305d\u3046\u3042\u308b\u306e\u3060\u304b\u3089\u3057\u3087\u3046\u304c\u3042\u308a\u307e\u305b\u3093\u3002\u73fe\u72b6\u3060\u3068\u3001\u30b0\u30ed\u30fc\u30d0\u30eb\u7a7a\u9593\u306boperator new(std::size_t, std::size_t)\u306f\u5b9a\u7fa9\u3057\u306a\u3044\u65b9\u304c\u3088\u3055\u305d\u3046\u3067\u3059\u306d\u3002\n\nCreate/Destroy objects\n// usual new/delete\nvoid* operator new[](std::size_t) ;\nvoid operator delete[](void*) noexcept ;\nvoid operator delete[](void*, std::size_t) noexcept ;\n\n// placement new/delete\nvoid* operator new[](std::size_t, Args...) ;\nvoid operator delete[](void*, Args...) noexcept ;\n\n\u3053\u306e\u6f14\u7b97\u5b50\u306e\u5b58\u5728\u3092\u5fd8\u308c\u3066\u3044\u305f\u65b9\u3001\u3054\u5b89\u5fc3\u304f\u3060\u3055\u3044\u3002new[]/delete[]\u306b\u95a2\u3057\u3066\u306f\u8a18\u4e8b\u306e\u540d\u76ee\u4e0a\u4f5c\u3063\u305f\u3060\u3051\u3067\u3042\u308a\u3001\u6ce8\u610f\u70b9\u3082\u5168\u3066new/delete\u3068\u540c\u3058\u3067\u3059\u3002new/delete\u3092\u30aa\u30fc\u30d0\u30fc\u30ed\u30fc\u30c9\u3059\u308b\u969b\u306f\u3001new[]/delete[]\u3082\u30aa\u30fc\u30d0\u30fc\u30ed\u30fc\u30c9\u3059\u308b\u3088\u3046\u306b\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n\n\u7d42\u308f\u308a\u306b\n\u5f53\u521d\u8003\u3048\u3066\u3044\u305f\u3088\u308a\u3082\u8907\u96d1\u306a\u8a18\u4e8b\u306b\u306a\u3063\u3066\u3057\u307e\u3044\u307e\u3057\u305f\u3002\u4eca\u66f4\u3067\u306f\u3042\u308a\u307e\u3059\u304c\u3001\u7279\u306b\u30b0\u30ed\u30fc\u30d0\u30eb\u306anew/delete\u306b\u95a2\u3057\u3066\u306f\u30aa\u30fc\u30d0\u30fc\u30ed\u30fc\u30c9\u3092\u306a\u308b\u3079\u304f\u63a7\u3048\u3001allocator\u30af\u30e9\u30b9\u3092\u4f5c\u6210\u3059\u308b\u3053\u3068\u3092\u5f37\u304f\u63a8\u5968\u3044\u305f\u3057\u307e\u3059\u3002\n\u3055\u3066\u3001\u9577\u304f\u306a\u308a\u307e\u3057\u305f\u304c\u3001\u4ee5\u4e0a\u3067new/delete\u6f14\u7b97\u5b50\u3001new[]/delete[]\u6f14\u7b97\u5b50\u306e\u30aa\u30fc\u30d0\u30fc\u30ed\u30fc\u30c9\u306b\u3064\u3044\u3066\u306e\u89e3\u8aac\u3092\u7d42\u308f\u308a\u305f\u3044\u3068\u601d\u3044\u307e\u3059\u3002\u3053\u3053\u307e\u3067\u8aad\u3093\u3067\u304f\u3060\u3055\u3063\u305f\u65b9\u304c\u3044\u3089\u3063\u3057\u3083\u3063\u305f\u3089\u304a\u793c\u3092\u7533\u3057\u4e0a\u3052\u305f\u3044\u3068\u601d\u3044\u307e\u3059\u3002\n\u307e\u305f\u4eca\u56de\u3053\u306e\u8a18\u4e8b\u3092\u66f8\u304f\u306b\u3042\u305f\u308a\u3001\u79c1\u81ea\u8eab\u898f\u683c\u3092\u53c2\u7167\u3057\u306a\u304c\u3089\u8a73\u7d30\u306a\u4ed5\u69d8\u3092\u8abf\u3079\u307e\u3057\u305f\u3002\u305d\u306e\u70ba\u3001\u898f\u683c\u306e\u89e3\u91c8\u304c\u9593\u9055\u3063\u3066\u3044\u308b\u53ef\u80fd\u6027\u304c\u3042\u308b\u3053\u3068\u3092\u3054\u4e86\u627f\u304a\u9858\u3044\u3044\u305f\u3057\u307e\u3059\u3002\u540c\u6642\u306b\u3001\u8aa4\u308a\u306a\u3069\u6c17\u4ed8\u3044\u305f\u70b9\u304c\u3054\u3056\u3044\u307e\u3057\u305f\u3089\u30b3\u30e1\u30f3\u30c8\u306b\u304a\u9858\u3044\u3057\u307e\u3059\u3002\n\u305d\u308c\u3067\u306f\u3001\u9577\u3005\u3068\u5931\u793c\u3044\u305f\u3057\u307e\u3057\u305f\u3002\u6539\u3081\u3066\u3001\u8aad\u3093\u3067\u3044\u305f\u3060\u304d\u3042\u308a\u304c\u3068\u3046\u3054\u3056\u3044\u307e\u3057\u305f\u3002\n\n\n\n\nThe return type shall be void*. The first parameter shall have type std::size_t (18.2). The first parameter shall not have an associated default argument (8.3.6). [n3337/n3639, 3.7.4.1]\u00a0\u21a9\n\n\nEach deallocation function shall return void and its first parameter shall be void*. [n3337/n3639, 3.7.4.2]\u00a0\u21a9\n\n\nA C++ program shall provide at most one definition of a replaceable allocation or deallocation function. Any such function definition replaces the default version provided in the library (17.6.4.6). [n3337/n3936, 3.7.2]\u00a0\u21a9\n\n\nThe following allocation and deallocation functions (18.6) are implicitly declared in global scope in each translation unit of a program. [n3337/n3946, 3.7.4]\u00a0\u21a9\n\n\nThe global operator delete with exactly one parameter is a usual(nonplacement) deallocation function. The global operator delete with exactly two parameters, the second of which has type std::size_t, is a usual deallocation function.\u00a0\u21a9\n\n\n3 If a deallocation function terminates by throwing an exception, the behavior is undefined. [n3337/n3639, 3.7.4.2]\u00a0\u21a9\n\n\n[n3337, 3.7.4]\u00a0\u21a9\n\n\n[n3639, 3.7.4]\u00a0\u21a9\n\n\n\n#\u306f\u3058\u3081\u306b\n\n[C++\u30aa\u30fc\u30d0\u30fc\u30ed\u30fc\u30c9\u5927\u5168](http://qiita.com/rinse_/items/9d87d5cb0dc1e89d005e)\u3067\u306f\u3001\u305f\u304f\u3055\u3093\u306e\u30b9\u30c8\u30c3\u30af\u3092\u9802\u304d\u3042\u308a\u304c\u3068\u3046\u3054\u3056\u3044\u307e\u3057\u305f\u3002\n\u3053\u306e\u8a18\u4e8b\u306f\u3001\u4e0a\u306e\u8a18\u4e8b\u3067\u89e3\u8aac\u3059\u308b\u3053\u3068\u3092\u907f\u3051\u305fCreate/Destroy Object\u304a\u3088\u3073Create/Destroy Objects\u3001\u3059\u306a\u308f\u3061new/delete\u6f14\u7b97\u5b50\u3068new[]/delete[]\u6f14\u7b97\u5b50\u306b\u3064\u3044\u3066\u89e3\u8aac\u3057\u305f\u3044\u3068\u601d\u3044\u307e\u3059\u3002\n\n\u306a\u304a\u3001\u898f\u683c\u306e\u53c2\u7167\u306b\u306f\u3001C++11\u306b\u306fn3337\u3092\u3001C++14\u306b\u306fn3936\u3092\u4f7f\u7528\u3057\u307e\u3057\u305f\u3002\u6b63\u898f\u306e\u898f\u683c\u66f8\u3067\u306f\u306a\u3044\u306e\u3067\u3054\u4e86\u627f\u304f\u3060\u3055\u3044\u3002\n\n# Create/Destroy Object\n\n```cpp\n// usual new/delete\nvoid* operator new(std::size_t) ; // ...(A)\nvoid operator delete(void*) noexcept ; // ...(B)\nvoid operator delete(void*, std::size_t) noexcept ; // ...(C)\n\n// placement new/delete\nvoid* operator new(std::size_t, Args...) ; // ...(D)\nvoid operator delete(void*, Args...) noexcept ; // ...(E)\n```\n\n\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u69cb\u7bc9/\u7834\u58ca\u6f14\u7b97\u5b50\u3002\u898f\u683c\u3067\u306fallocation or deallocation function\u3068\u547c\u3070\u308c\u3066\u3044\u308b\u306e\u3067\u3001\u78ba\u4fdd/\u89e3\u653e\u95a2\u6570\u3068\u3057\u3066\u3082\u3044\u3044\u3067\u3059\u306d\u3002\u307e\u3042\u3001\u305d\u3093\u306a\u540d\u524d\u3067\u306f\u901a\u5e38\u547c\u3070\u308c\u305a\u3001\u3075\u3064\u3046\u306f\u5358\u306bnew/delete\u3068\u547c\u3070\u308c\u307e\u3059\u3002\u3053\u306e\u6f14\u7b97\u5b50\u306f\u4ed6\u306e\u6f14\u7b97\u5b50\u3068\u9055\u3044\u3001\u5f15\u6570\u3084\u623b\u308a\u5024\u306b\u53b3\u5bc6\u306a\u5236\u9650\u304c\u3042\u308a\u307e\u3059\u3002\u307e\u305f\u3001\u3053\u306e\u6f14\u7b97\u5b50\u306f\u6ce8\u610f\u6df1\u304f\u30aa\u30fc\u30d0\u30fc\u30ed\u30fc\u30c9\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002usual(non-placement) new/delete\u3001placement new/delete\u3001\u30af\u30e9\u30b9\u30b9\u30b3\u30fc\u30d7\u306b\u5b9a\u7fa9\u3055\u308c\u308b\u5834\u5408\u3001\u30b0\u30ed\u30fc\u30d0\u30eb\u30b9\u30b3\u30fc\u30d7\u306b\u5b9a\u7fa9\u3055\u308c\u308b\u5834\u5408\u3068\u3044\u3046\u3088\u3046\u306b\u5834\u5408\u5206\u3051\u3057\u3066\u8aac\u660e\u3057\u3066\u3044\u304d\u305f\u3044\u3068\u601d\u3044\u307e\u3059\u3002\n\n## \u30af\u30e9\u30b9\u30b9\u30b3\u30fc\u30d7\u306b\u5b9a\u7fa9\u3055\u308c\u308b\u5834\u5408\n\n### usual new/delete\n\nusual new/delete\u6f14\u7b97\u5b50\u3068\u306f\u3001(placement new/delete\u3068\u6bd4\u8f03\u3057\u3066)\u901a\u5e38\u306enew/delete\u6f14\u7b97\u5b50\u306e\u3053\u3068\u3067\u3059\u3002\u3064\u307e\u308a\u3001\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u6587\u8108\u3067\u547c\u3070\u308c\u308bnew/delete\u6f14\u7b97\u5b50\u306e\u3053\u3068\u3092\u8a00\u3044\u307e\u3059\u3002\n\n```cpp\nsth* p = new sth(); // usual new\ndelete p; // usual delete\n```\n\nusual new\u6f14\u7b97\u5b50\u306f\u30b7\u30b0\u30cb\u30c1\u30e3\u304c`void* operator new(std::size_t)`\u3067\u306a\u3051\u308c\u3070\u306a\u308a\u307e\u305b\u3093\u3002[^1]\nusual delete\u6f14\u7b97\u5b50\u306f\u30b7\u30b0\u30cb\u30c1\u30e3\u304c`void operator delete(void*)`\u3042\u308b\u3044\u306f`void operator delete(void*, std::size_t)`\u3067\u306a\u3051\u308c\u3070\u306a\u308a\u307e\u305b\u3093\u3002[^2]\n\n[^1]: The return type shall be void*. The first parameter shall have type std::size_t (18.2). The first parameter shall not have an associated default argument (8.3.6). [n3337/n3639, 3.7.4.1]\n[^2]: Each deallocation function shall return void and its first parameter shall be void*. [n3337/n3639, 3.7.4.2]\n\n```cpp\n// usual new/delete\nvoid* operator new(std::size_t) ; // ...(A)\nvoid operator delete(void*) noexcept ; // ...(B)\nvoid operator delete(void*, std::size_t) noexcept ; // ...(C)\n```\n\n\u30af\u30e9\u30b9\u30b9\u30b3\u30fc\u30d7\u306bnew/delete\u6f14\u7b97\u5b50\u3092\u7528\u610f\u3057\u305f\u5834\u5408\u3001\u305d\u306e\u30af\u30e9\u30b9\u3092new/delete\u3059\u308b\u5834\u5408\u306b\u306f\u5e38\u306b\u7528\u610f\u3057\u305f\u3082\u306e\u304c\u4f7f\u308f\u308c\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002\u4f8b\u3048\u3070\u3001\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u30af\u30e9\u30b9\u3092\u7528\u610f\u3057\u305f\u5834\u5408\u3001`new sth()`\u3068\u3057\u305f\u5834\u5408(1)\u304c\u3001`delete ps`\u3068\u3057\u305f\u5834\u5408\u306f(2)\u304c\u547c\u3070\u308c\u307e\u3059\u3002\u3053\u308c\u306f\u5927\u5207\u306a\u3053\u3068\u306a\u306e\u3067\u3059\u304c\u3001\u4e21\u8005\u306f\u5fc5\u305a\u5bfe\u5fdc\u3055\u305b\u3066\u30aa\u30fc\u30d0\u30fc\u30ed\u30fc\u30c9\u3059\u308b\u3088\u3046\u306b\u3057\u3066\u304f\u3060\u3055\u3044\u3002\u3064\u307e\u308a\u3001`new`\u306e\u52d5\u4f5c\u306e\u307f\u3092\u30aa\u30fc\u30d0\u30fc\u30ed\u30fc\u30c9\u3057\u305f\u3044\u3068\u601d\u3063\u3066\u3082\u3001`delete`\u3082\u30aa\u30fc\u30d0\u30fc\u30ed\u30fc\u30c9\u3059\u308b\u3053\u3068\u304c\u5f37\u304f\u63a8\u5968\u3055\u308c\u307e\u3059\u3002\n\n```cpp\nstruct sth\n{\n  void* operator new(std::size_t) ; // usual new...(1)\n  void operator delete(void*) noexcept ; // usual new...(2)\n};\n...\n\nsth* p = new sth(); // (1)\u304c\u547c\u3070\u308c\u308b\ndelete p; // (2)\u304c\u547c\u3070\u308c\u308b\n```\n\n\u3061\u306a\u307f\u306b\u3001delete\u306e\u30b7\u30b0\u30cb\u30c1\u30e3\u306b(C)\u306e\u3082\u306e\u3092\u4f7f\u3046\u3068\u3001\u305d\u3061\u3089\u304cusual delete\u3068\u3044\u3046\u6271\u3044\u306b\u306a\u308a\u307e\u3059\u3002\u3053\u306e\u5834\u5408\u3001\u7b2c\u4e8c\u5f15\u6570\u306b\u306f\u7b2c\u4e00\u5f15\u6570\u306b\u793a\u3055\u308c\u308b\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u30b5\u30a4\u30ba\u304c\u6e21\u3055\u308c\u307e\u3059\u3002\n\n```cpp\nstruct sth\n{\n  void* operator new(std::size_t) ; // usual new...(1)\n  void operator delete(void*, std::size_t) noexcept ; // usual new...(2)\n};\n...\n\nsth* p = new sth(); // (1)\u304c\u547c\u3070\u308c\u308b\ndelete p; // (2)\u304c\u547c\u3070\u308c\u308b\n```\n\n\u4e21\u65b9\u7528\u610f\u3059\u308b\u3068\u3001(B)\u306e\u30b7\u30b0\u30cb\u30c1\u30e3\u304c\u512a\u5148\u3055\u308c\u307e\u3059\u3002\u305d\u306e\u5834\u5408\u3001**(C)\u306e\u30b7\u30b0\u30cb\u30c1\u30e3\u306edelete\u306fplacement delete\u3068\u3044\u3046\u6271\u3044\u306b\u306a\u308a\u307e\u3059**\u3002\n\n```cpp\nstruct sth\n{\n  void* operator new(std::size_t) ; // usual new...(1)\n  void operator delete(void*) noexcept ; // usual delete...(2)\n  void operator delete(void*, std::size_t) noexcept ; // placement delete...(3)\n};\n...\n\nsth* p = new sth(); // (1)\u304c\u547c\u3070\u308c\u308b\ndelete p; // (2)\u304c\u547c\u3070\u308c\u308b\n```\n\n\n### placement new/delete\n\nplacement new/delete\u3068\u306f\u3001usual new/delete\u3088\u308a\u3082\u5f15\u6570\u3092\u591a\u304f\u6301\u3064new/delete\u306e\u3053\u3068\u3067\u3059\u3002\u3059\u306a\u308f\u3061\u3001\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u6587\u8108\u3067\u547c\u3070\u308c\u308bnew/delete\u306e\u3053\u3068\u3092\u6307\u3057\u307e\u3059\u3002\u7b2c\u4e8c\u5f15\u6570\u306b`std::nothrow_t`\u3092\u53d6\u308bplacement new/delete\u3092\u60f3\u50cf\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n\n```cpp\nsth* p = new(std::nothrow) sth(); // placement new\n\np->~sth(); // call dtor\nsth::operator delete(p, std::nothrow); // call the deallocation function\n```\n\n\u8a00\u3044\u305f\u3044\u3053\u3068\u306f\u5206\u304b\u308a\u307e\u3059\u3002delete\u5f0f\u306fplacement\u5f62\u5f0f\u306e\u3082\u306e\u304c\u7528\u610f\u3055\u308c\u3066\u3044\u306a\u3044\u306e\u3067\u3001\u30c7\u30b9\u30c8\u30e9\u30af\u30bf\u3068deallocation function\u3092\u305d\u308c\u305e\u308c\u624b\u52d5\u3067\u547c\u3076\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\nplacement new\u6f14\u7b97\u5b50\u306f\u30b7\u30b0\u30cb\u30c1\u30e3\u304c`void* operator new(std::size_t, Args...)`\u3067\u306a\u3051\u308c\u3070\u306a\u308a\u307e\u305b\u3093\u3002Args\u306f\u4efb\u610f\u306e\u6570\u306e\u4efb\u610f\u306e\u578b\u3068\u306a\u308a\u307e\u3059\u3002\nplacement delete\u6f14\u7b97\u5b50\u306f\u30b7\u30b0\u30cb\u30c1\u30e3\u304c`void operator delete(void*, Args...)`\u3067\u306a\u3051\u308c\u3070\u306a\u308a\u307e\u305b\u3093\u3002\u540c\u69d8\u306b\u3001Args\u306f\u4efb\u610f\u306e\u6570\u306e\u4efb\u610f\u306e\u578b\u3068\u306a\u308a\u307e\u3059\u3002\n\n```cpp\n// placement new/delete\nvoid* operator new(std::size_t, Args...) ; // ...(D)\nvoid* operator delete(std::size_t, Args...) noexcept ; // ...(E)\n```\n\n\u547c\u3073\u51fa\u3057\u65b9\u304c\u5909\u308f\u308b\u3060\u3051\u3067\u5927\u3057\u3066usual new/delete\u3068\u5909\u308f\u308b\u3068\u3053\u308d\u306f\u3042\u308a\u307e\u305b\u3093\u3002usual new/delete\u540c\u69d8\u306b\u3001\u5fc5\u305a\u5bfe\u5fdc\u3057\u305fplacement new/delete\u3092\u5b9a\u7fa9\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\u3053\u3053\u3067\u3001\u5bfe\u5fdc\u3057\u305fnew/delete\u3068\u3044\u3046\u306e\u306f\u3001`Args...`\u90e8\u5206\u304c\u540c\u3058new/delete\u3068\u3044\u3046\u610f\u5473\u3067\u3059\u3002\n\u4f8b\u3048\u3070\u3001\u4ee5\u4e0b\u306e\u3088\u3046\u306aplacement new/delete\u3092\u8003\u3048\u307e\u3059\u3002\n\n```cpp\nstruct sth\n{\n  void* operator new(std::size_t n, void* p) { return p; }\n  void operator delete(void*, void*) noexcept {}\n};\n```\n\n\u6050\u3089\u304f\u3053\u306esth\u306f\u3001\u4f55\u5ea6\u3082\u751f\u6210\uff65\u7834\u68c4\u304c\u7e70\u308a\u8fd4\u3055\u308c\u308b\u306a\u3069\u306e\u7406\u7531\u304c\u3042\u308b\u306e\u3067\u3057\u3087\u3046\u3002\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u4f7f\u7528\u3059\u308b\u3053\u3068\u304c\u60f3\u5b9a\u3055\u308c\u307e\u3059\u3002\n\n```cpp\nsth* p = static_cast<sth>(std::malloc(sizeof(sth)));\np = operator new(p) sth();\n\np->~sth();\nsth::operator delete(p, p);\nstd::free(p);\n```\n\n`operator delete`\u3092\u76f4\u63a5\u547c\u3073\u51fa\u3059\u3068\u304d\u306f\u3001\u5f15\u6570\u306b`operator new`\u3068\u540c\u3058\u3082\u306e\u3092\u5165\u308c\u308b\u3053\u3068\u304c\u63a8\u5968\u3055\u308c\u307e\u3059\u3002\u3061\u306a\u307f\u306b\u3001\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u3067\u4f8b\u5916\u304c\u6295\u3052\u3089\u308c\u305f\u5834\u5408\u3001\u88dc\u8db3\u3055\u308c\u308b\u524d\u306b\u307e\u305a`operator delete`\u304c\u547c\u3073\u51fa\u3055\u308c\u307e\u3059\u304c\u3001placement new\u306e\u6587\u8108\u3067\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u304c\u4f8b\u5916\u3092\u6295\u3052\u305f\u5834\u5408\u3001\u5bfe\u5fdc\u3059\u308b`operator delete`\u304c\u547c\u3073\u51fa\u3055\u308c\u308b\u3053\u3068\u306b\u306a\u308a\u307e\u3059\u3002\u3053\u306e\u610f\u5473\u3067\u3082\u3001usual, placement\u306b\u9650\u3089\u305anew/delete\u306f\u30bb\u30c3\u30c8\u3067\u7528\u610f\u3059\u308b\u3053\u3068\u304c\u5f37\u304f\u63a8\u5968\u3055\u308c\u307e\u3059\u3002\n\nhttp://ideone.com/TuhbXS\n\n\n### operator delete(void*, std::size_t) \u306e\u4e21\u7fa9\u6027\n\n`operator delete(void*, std::size_t)`\u306fusual delete\u3068\u3057\u3066\u7d39\u4ecb\u3057\u307e\u3057\u305f\u304c\u3001placement delete\u3068\u306a\u308a\u3046\u308b\u3053\u3068\u306b\u3082\u89e6\u308c\u307e\u3057\u305f\u3002\u3053\u3053\u3067\u3001\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u5834\u5408\u3092\u8003\u3048\u307e\u3059\u3002\n\n```cpp\nstruct sth\n{\n  void* operator new(std::size_t, std::size_t) ; // placement new\n  void operator delete(void*, std::size_t) noexcept ; // usual delete\n};\n```\n\n\u3053\u306e\u30af\u30e9\u30b9`sth`\u306f`void operator delete(void*)`\u3092\u6301\u305f\u306a\u3044\u305f\u3081\u3001`void operator delete(void*, std::size_t)`\u306fusual delete\u3068\u3057\u3066\u5b9a\u7fa9\u3055\u308c\u307e\u3059\u3002\u3057\u304b\u3057\u30b7\u30b0\u30cb\u30c1\u30e3\u3068\u3057\u3066\u306f\u3001placement new\u3067\u3042\u308b`void* operator new(std::size_t, std::size_t)`\u3068\u5bfe\u5fdc\u3059\u308b\u3082\u306e\u3092\u6301\u3063\u3066\u3044\u307e\u3059\u3002\u3064\u307e\u308a\u3001placement new\u306e\u4e2d\u3067\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u304c\u4f8b\u5916\u3092\u6295\u3052\u305f\u5834\u5408\u306b\u3082\u547c\u3073\u51fa\u3055\u308c\u308b\u3053\u3068\u306b\u306a\u308a\u307e\u3059\u3002\u3086\u3048\u306b\u3001\u3053\u306e\u3088\u3046\u306a\u30d7\u30ed\u30b0\u30e9\u30e0\u306fill-formed\u3067\u3042\u308b\u3068\u3055\u308c\u3001\u305d\u306e\u52d5\u4f5c\u306f\u4fdd\u8a3c\u3055\u308c\u307e\u305b\u3093\u3002\n`void* operator new(std::size_t, std::size_t)`\u3068\u3044\u3046\u30b7\u30b0\u30cb\u30c1\u30e3\u3092\u6301\u3064placement new\u3092\u5b9a\u7fa9\u3057\u305f\u3044\u5834\u5408\u306b\u306f\u3001`void operator delete(void*)`\u3068`void operator delete(std::size_t)`\u3068\u3044\u30462\u3064\u306edelete\u6f14\u7b97\u5b50\u3092\u66f8\u304b\u306a\u3051\u308c\u3070\u306a\u3089\u306a\u3044\u3068\u3044\u3046\u3053\u3068\u306b\u306a\u308a\u307e\u3059\u3002\n\n```cpp\nstruct sth\n{\n  void* operator new(std::size_t) ; // usual new\n  void* operator new(std::size_t, std::size_t) ; // placement new\n  void operator delete(void*) noexcept ; // usual delete\n  void operator delete(void*, std::size_t) noexcept ; // placement delete\n};\n```\n\n## \u30b0\u30ed\u30fc\u30d0\u30eb\u30b9\u30b3\u30fc\u30d7\u306b\u5b9a\u7fa9\u3055\u308c\u308b\u5834\u5408\n\n### usual new/delete\n\n```cpp\nvoid* operator new(std::size_t) ;\nvoid operator delete(void*) noexcept ; // C++11\nvoid operator delete(void*, std::size_t) noexcept ; // C++14\n```\n\nnew/delete\u6f14\u7b97\u5b50\u306f\u30b0\u30ed\u30fc\u30d0\u30eb\u30b9\u30b3\u30fc\u30d7\u306b\u7f6e\u304f\u3053\u3068\u3082\u3067\u304d\u307e\u3059\u3002new/delete\u6f14\u7b97\u5b50\u306f\u540d\u524d\u7a7a\u9593\u306b\u304f\u308b\u3080\u3053\u3068\u304c\u3067\u304d\u306a\u3044\u306e\u3067\u3001\u5e38\u306b\u30b0\u30ed\u30fc\u30d0\u30eb\u30b9\u30b3\u30fc\u30d7\u306b\u5b9a\u7fa9\u3055\u308c\u308bnew/delete\u6f14\u7b97\u5b50\u306f\u4e00\u3064\u3068\u306a\u308a\u307e\u3059\u3002[^3]static\u4fee\u98fe\u5b50\u3084inline\u4fee\u98fe\u5b50\u3092\u4ed8\u4e0e\u3057\u305f\u5834\u5408\u306e\u52d5\u4f5c\u306f\u672a\u5b9a\u7fa9\u3067\u3059\u3002\u30e6\u30fc\u30b6\u5b9a\u7fa9\u306enew/delete\u6f14\u7b97\u5b50\u304c\u306a\u3044\u5834\u5408\u306b\u306f\u6a19\u6e96\u30e9\u30a4\u30d6\u30e9\u30ea\u304c\u7528\u610f\u3057\u3066\u304f\u308c\u307e\u3059\u3002\u30e6\u30fc\u30b6\u304c\u3053\u308c\u3092\u5b9a\u7fa9\u3057\u305f\u5834\u5408\u3067\u3082new/delete\u6f14\u7b97\u5b50\u306fC++\u30e9\u30a4\u30d6\u30e9\u30ea\u306b\u3088\u3063\u3066\u6697\u9ed9\u7684\u306b\u5404\u7ffb\u8a33\u5358\u4f4d\u306b\u5ba3\u8a00\u304c\u3055\u308c\u307e\u3059[^4]\u306e\u3067\u3001\u5168\u3066\u306e\u7ffb\u8a33\u5358\u4f4d\u304b\u3089\u524d\u65b9\u5ba3\u8a00\u306a\u3057\u306b\u5229\u7528\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\u4ee5\u4e0b\u306e\u4f8b\u306f\u3001C++14\u306e\u30b3\u30fc\u30c9\u3068\u3057\u3066\u89e3\u91c8\u3057\u3066\u304f\u3060\u3055\u3044\u3002\u5b9f\u306f\u3001\u30b0\u30ed\u30fc\u30d0\u30eb\u30b9\u30b3\u30fc\u30d7\u306b\u5b9a\u7fa9\u3055\u308c\u308bnew/delete\u6f14\u7b97\u5b50\u306e\u30aa\u30fc\u30d0\u30fc\u30ed\u30fc\u30c9\u306fC++11\u3068C++14\u3067\u6319\u52d5\u304c\u5909\u308f\u308b\u306e\u3067\u3059\u3002C++11\u3068C++14\u306e\u5dee\u7570\u306b\u3064\u3044\u3066\u306f\u307e\u305f\u5f8c\u8ff0\u3057\u307e\u3059\u3002\n\n[^3]: A C++ program shall provide at most one definition of a replaceable allocation or deallocation function. Any such function definition replaces the default version provided in the library (17.6.4.6). [n3337/n3936, 3.7.2]\n[^4]: The following allocation and deallocation functions (18.6) are implicitly declared in global scope in each translation unit of a program. [n3337/n3946, 3.7.4]\n\n```sub.cpp\n#include <cstdint>\n#include <cstdlib>\n#include <new>\n\nvoid* operator new(std::size_t n)\n{\n  std::puts(\"usual new (sub.cpp)\");\n  void* p = std::malloc(n);\n  return p ? p : throw std::bad_alloc();\n}\nvoid operator delete(void* p, std::size_t)\n{\n  std::puts(\"usual delete (sub.cpp)\");\n  std::free(p);\n}\n```\n\n```main.cpp\nint main()\n{\n  int* p = new int(); // outputs \"usual new (sub.cpp)\"\n  delete p; // outputs \"usual delete (sub.cpp)\"\n}\n```\n\n\u3061\u306a\u307f\u306b\u3001\u30af\u30e9\u30b9\u30b9\u30b3\u30fc\u30d7\u306e\u3082\u306e\u3068\u30b0\u30ed\u30fc\u30d0\u30eb\u30b9\u30b3\u30fc\u30d7\u306e\u3082\u306e\u3068\u3001\u3069\u3061\u3089\u3082new/delete\u304c\u30aa\u30fc\u30d0\u30fc\u30ed\u30fc\u30c9\u3055\u308c\u3066\u3044\u308b\u5834\u5408\u3001\u30af\u30e9\u30b9\u30b9\u30b3\u30fc\u30d7\u306e\u3082\u306e\u304c\u512a\u5148\u3055\u308c\u307e\u3059\u3002\u305d\u306e\u5834\u5408\u306f\u3001`::new`\u3068\u660e\u793a\u3059\u308c\u3070\u30b0\u30ed\u30fc\u30d0\u30eb\u30b9\u30b3\u30fc\u30d7\u306e\u3082\u306e\u3092\u4f7f\u3046\u3053\u3068\u3082\u3067\u304d\u307e\u3059\u3002\u305f\u3060\u3057\u3001`::new`\u3067\u69cb\u7bc9\u3057\u305f\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306f`::delete`\u3067\u3001`new`\u3067\u69cb\u7bc9\u3057\u305f\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306f`delete`\u3067\u7834\u68c4\u3057\u306a\u304f\u3066\u306f\u306a\u308a\u307e\u305b\u3093\u3002\u30b9\u30de\u30fc\u30c8\u30dd\u30a4\u30f3\u30bf\u306a\u3069\u3092\u4f7f\u3046\u3068\u304d\u306b\u3053\u308c\u306f\u3057\u3070\u3057\u3070\u898b\u3064\u3051\u306b\u304f\u3044\u30d0\u30b0\u3092\u751f\u307f\u307e\u3059\u3002\n\nhttp://ideone.com/wJWl5e\n\n### placement new/delete\n\n```cpp\nvoid* operator new(std::size_t, Args...) ; // ...(1)\nvoid operator delete(void*, Args...) noexcept ; // ...(2)\n```\n\n\u305f\u3060\u3057\u3001C++14\u3067\u306f(2)\u306b\u304a\u3051\u308b`void operator delete(void*, std::size_t)`\u3092\u9664\u304d\u307e\u3059\u3002\n\u307e\u305f\u6ce8\u610f\u70b9\u306f\u3059\u3079\u3066usual new/delete\u3068\u5909\u308f\u308a\u307e\u305b\u3093\u3002\n\n### C++11\u3068C++14\u306e\u5dee\u7570\n\n\u30b0\u30ed\u30fc\u30d0\u30eb\u30b9\u30b3\u30fc\u30d7\u306bnew/delete\u6f14\u7b97\u5b50\u306e\u30aa\u30fc\u30d0\u30fc\u30ed\u30fc\u30c9\u3092\u5b9a\u7fa9\u3059\u308b\u3053\u3068\u306b\u3064\u3044\u3066\u3001C++11\u3068C++14\u3068\u3067\u5927\u304d\u306a\u5dee\u7570\u304c\u3042\u308b\u3068\u3044\u3046\u304a\u8a71\u306f\u305a\u3063\u3068\u3057\u3066\u3044\u307e\u3057\u305f\u304c\u3001\u3053\u3053\u3067\u305d\u306e\u5dee\u7570\u306b\u3064\u3044\u3066\u66f8\u3044\u3066\u304a\u3053\u3046\u3068\u601d\u3044\u307e\u3059\u3002\n\n#### \u6a19\u6e96\u30e9\u30a4\u30d6\u30e9\u30ea\u304c\u7528\u610f\u3059\u308bnew/delete\u306e\u30b7\u30b0\u30cb\u30c1\u30e3\u306e\u9055\u3044\nC++11\u306e\u6642\u70b9\u3067\u306f\u3001\u30b0\u30ed\u30fc\u30d0\u30eb\u30b9\u30b3\u30fc\u30d7\u306b\u5b9a\u7fa9\u3055\u308c\u308b`operator delete(void*, std::size_t)`\u306f\u5168\u3066placement delete\u3067\u3057\u305f\u3002\u3057\u304b\u3057C++14\u3067\u306f`void operator delete(void*, std::size_t)`\u3068\u5f93\u6765\u306e`operator delete(void*, std::size_t)`\u306e\u4e21\u65b9\u304cusual delete\u3068\u3057\u3066\u8a8d\u3081\u3089\u308c\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3057\u305f\uff08\u4e21\u65b9\u5b9a\u7fa9\u3055\u308c\u305f\u5834\u5408\u3001\u305d\u306e\u4e21\u65b9\u304cusual delete\u3068\u3057\u3066\u8a8d\u3081\u3089\u308c\u307e\u3059\u3002[^5]\uff09\u3002\u3053\u308c\u306b\u4f34\u3044\u3001\u6a19\u6e96\u30e9\u30a4\u30d6\u30e9\u30ea\u306f\u5f93\u6765\u306eusual delete\u3068\u65b0\u3057\u3044usual delete\u306e\u4e21\u65b9\u3092\u63d0\u4f9b\u3057\u3066\u304f\u308c\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3057\u305f\u3002\n\u307e\u305f\u3001\u89e3\u653e\u95a2\u6570\u304c\u4f8b\u5916\u306b\u3088\u3063\u3066\u7d42\u4e86\u3057\u305f\u5834\u5408\u3001\u305d\u306e\u52d5\u4f5c\u304c\u672a\u5b9a\u7fa9\u3067\u3042\u308b\u3068\u3044\u3046\u306e\u306fC++11\u304b\u3089\u5909\u308f\u3089\u306a\u3044\u306e\u3067\u3059\u304c[^6]\u3001\u3053\u308c\u306b\u5408\u308f\u305b\u3066C++14\u3067\u306f\u6a19\u6e96\u30e9\u30a4\u30d6\u30e9\u30ea\u306e\u63d0\u4f9b\u3059\u308b`operator delete`\u306bnoexcept\u6307\u5b9a\u304c\u3055\u308c\u3066\u3044\u307e\u3059\u3002\u3086\u3048\u306b\u3001\u79c1\u305f\u3061\u304c\u3053\u308c\u3092\u5b9a\u7fa9\u3059\u308b\u5834\u5408\u306b\u306f\u3001C++11\u304bC++14\u304b\u3092\u554f\u308f\u305anoexcept\u3092\u6307\u5b9a\u3059\u3079\u304d\u3067\u3059\u3002\n\n[^5]: The global operator delete with exactly one parameter is a usual(nonplacement) deallocation function. The global operator delete with exactly two parameters, the second of which has type std::size_t, is a usual deallocation function.\n[^6]: 3 If a deallocation function terminates by throwing an exception, the behavior is undefined. [n3337/n3639, 3.7.4.2]\n\nc++11\u3067\u6a19\u6e96\u30e9\u30a4\u30d6\u30e9\u30ea\u304c\u63d0\u4f9b\u3059\u308b\u95a2\u6570\u306f\u4ee5\u4e0b\u306e\u901a\u308a\u3067\u3059\u3002[^7]\n\n[^7]: [n3337, 3.7.4]\n\n\n```cpp11.cpp\nvoid* operator new(std::size_t) ;\nvoid* operator new[](std::size_t) ; \nvoid operator delete(void*) ; \nvoid operator delete[](void*) ; \n```\n\nc++14\u3067\u6a19\u6e96\u30e9\u30a4\u30d6\u30e9\u30ea\u304c\u63d0\u4f9b\u3059\u308b\u95a2\u6570\u306f\u4ee5\u4e0b\u306e\u901a\u308a\u3067\u3059\u3002[^8]\n\n[^8]: [n3639, 3.7.4]\n\n```cpp14.cpp\nvoid* operator new(std::size_t) ; \nvoid* operator new[](std::size_t) ; \nvoid operator delete(void*) noexcept ; \nvoid operator delete[](void*) noexcept ; \nvoid operator delete(void*, std::size_t) noexcept ; \nvoid operator delete[](void*, std::size_t) noexcept ;\n```\n\n\u3088\u3063\u3066\u3001c++14\u4ee5\u964d\u306e\u30b0\u30ed\u30fc\u30d0\u30eb\u30b9\u30b3\u30fc\u30d7\u306b\u5b9a\u7fa9\u3055\u308c\u308bnew/delete\u3067\u306f\u3001\u30af\u30e9\u30b9\u30b9\u30b3\u30fc\u30d7\u306e\u3082\u306e\u3068\u306f\u7570\u306a\u308a\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u5bfe\u5fdc\u4ed8\u3051\u306b\u306a\u308a\u307e\u3059\u3002\n\n```cpp\nvoid* operator new(std::size_t) ; // usual\nvoid* operator new(std::size_t, std::size_t) ; // placement\n\nvoid operator delete(void*) ; // usual\nvoid operator delete(void*, std::size_t) ; // usual \n```\n\n#### \u63a8\u5968\u3055\u308c\u308b\u30b7\u30b0\u30cb\u30c1\u30e3\u306e\u9055\u3044\n\u524d\u8ff0\u306e\u901a\u308a\u3001c++11\u3067\u306f`void operator delete(void*)`\u3057\u304busual delete\u3068\u3057\u3066\u8a8d\u3081\u3089\u308c\u3066\u3044\u307e\u305b\u3093\u3067\u3057\u305f\u3002\u3057\u304b\u3057c++14\u4ee5\u964d\u3067\u306f\u3001`void operator delete(void*, std::size_t)`\u304c\u63a8\u5968\u3055\u308c\u308b\u307f\u305f\u3044\u3067\u3059\u3002\u79c1\u306e\u624b\u5143\u306e\u30b3\u30f3\u30d1\u30a4\u30e9(gcc5.2)\u3067\u306f\u3001C++14\u306e\u30aa\u30d7\u30b7\u30e7\u30f3\u4ed8\u304d\u3067`void operator delete(void*)`\u3057\u304b\u5b9a\u7fa9\u3057\u306a\u304b\u3063\u305f\u5834\u5408\u4ee5\u4e0b\u306e\u8b66\u544a\u304c\u51fa\u3066\u3057\u307e\u3044\u307e\u3057\u305f\u3002\n\n>main.cpp:8:6: warning: the program should also define `void operator delete(void*, long unsigned int)` [-Wsized-deallocation]\n\\void operator delete(void* ptr) noexcept\n\n\u307e\u305f\u3001`void operator delete(void*)`\u3068`void operator delete(void*, std::size_t)`\u306e\u4e21\u65b9\u304c\u5b9a\u7fa9\u3055\u308c\u305f\u5834\u5408\u3001\u5f8c\u8005\u304c\u512a\u5148\u3055\u308c\u308b\u3088\u3046\u3067\u3059\u3002\n[ideone C++11\u7248](http://ideone.com/F7QBbv)\n[ideone C++14\u7248](http://ideone.com/8PSK5a)\n\n\u5bfe\u5fdc\u95a2\u4fc2\u306f\u3069\u3046\u3057\u305f\u3068\u8a00\u308f\u308c\u305d\u3046\u3067\u3059\u304c\u3001\u898f\u683c\u306b\u305d\u3046\u3042\u308b\u306e\u3060\u304b\u3089\u3057\u3087\u3046\u304c\u3042\u308a\u307e\u305b\u3093\u3002\u73fe\u72b6\u3060\u3068\u3001\u30b0\u30ed\u30fc\u30d0\u30eb\u7a7a\u9593\u306b`operator new(std::size_t, std::size_t)`\u306f\u5b9a\u7fa9\u3057\u306a\u3044\u65b9\u304c\u3088\u3055\u305d\u3046\u3067\u3059\u306d\u3002\n\n# Create/Destroy objects\n\n```cpp\n// usual new/delete\nvoid* operator new[](std::size_t) ;\nvoid operator delete[](void*) noexcept ;\nvoid operator delete[](void*, std::size_t) noexcept ;\n\n// placement new/delete\nvoid* operator new[](std::size_t, Args...) ;\nvoid operator delete[](void*, Args...) noexcept ;\n```\n\n\u3053\u306e\u6f14\u7b97\u5b50\u306e\u5b58\u5728\u3092\u5fd8\u308c\u3066\u3044\u305f\u65b9\u3001\u3054\u5b89\u5fc3\u304f\u3060\u3055\u3044\u3002new[]/delete[]\u306b\u95a2\u3057\u3066\u306f\u8a18\u4e8b\u306e\u540d\u76ee\u4e0a\u4f5c\u3063\u305f\u3060\u3051\u3067\u3042\u308a\u3001\u6ce8\u610f\u70b9\u3082\u5168\u3066new/delete\u3068\u540c\u3058\u3067\u3059\u3002new/delete\u3092\u30aa\u30fc\u30d0\u30fc\u30ed\u30fc\u30c9\u3059\u308b\u969b\u306f\u3001new[]/delete[]\u3082\u30aa\u30fc\u30d0\u30fc\u30ed\u30fc\u30c9\u3059\u308b\u3088\u3046\u306b\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n\n# \u7d42\u308f\u308a\u306b\n\u5f53\u521d\u8003\u3048\u3066\u3044\u305f\u3088\u308a\u3082\u8907\u96d1\u306a\u8a18\u4e8b\u306b\u306a\u3063\u3066\u3057\u307e\u3044\u307e\u3057\u305f\u3002\u4eca\u66f4\u3067\u306f\u3042\u308a\u307e\u3059\u304c\u3001\u7279\u306b\u30b0\u30ed\u30fc\u30d0\u30eb\u306anew/delete\u306b\u95a2\u3057\u3066\u306f\u30aa\u30fc\u30d0\u30fc\u30ed\u30fc\u30c9\u3092\u306a\u308b\u3079\u304f\u63a7\u3048\u3001allocator\u30af\u30e9\u30b9\u3092\u4f5c\u6210\u3059\u308b\u3053\u3068\u3092\u5f37\u304f\u63a8\u5968\u3044\u305f\u3057\u307e\u3059\u3002\n\n\u3055\u3066\u3001\u9577\u304f\u306a\u308a\u307e\u3057\u305f\u304c\u3001\u4ee5\u4e0a\u3067new/delete\u6f14\u7b97\u5b50\u3001new[]/delete[]\u6f14\u7b97\u5b50\u306e\u30aa\u30fc\u30d0\u30fc\u30ed\u30fc\u30c9\u306b\u3064\u3044\u3066\u306e\u89e3\u8aac\u3092\u7d42\u308f\u308a\u305f\u3044\u3068\u601d\u3044\u307e\u3059\u3002\u3053\u3053\u307e\u3067\u8aad\u3093\u3067\u304f\u3060\u3055\u3063\u305f\u65b9\u304c\u3044\u3089\u3063\u3057\u3083\u3063\u305f\u3089\u304a\u793c\u3092\u7533\u3057\u4e0a\u3052\u305f\u3044\u3068\u601d\u3044\u307e\u3059\u3002\n\u307e\u305f\u4eca\u56de\u3053\u306e\u8a18\u4e8b\u3092\u66f8\u304f\u306b\u3042\u305f\u308a\u3001\u79c1\u81ea\u8eab\u898f\u683c\u3092\u53c2\u7167\u3057\u306a\u304c\u3089\u8a73\u7d30\u306a\u4ed5\u69d8\u3092\u8abf\u3079\u307e\u3057\u305f\u3002\u305d\u306e\u70ba\u3001\u898f\u683c\u306e\u89e3\u91c8\u304c\u9593\u9055\u3063\u3066\u3044\u308b\u53ef\u80fd\u6027\u304c\u3042\u308b\u3053\u3068\u3092\u3054\u4e86\u627f\u304a\u9858\u3044\u3044\u305f\u3057\u307e\u3059\u3002\u540c\u6642\u306b\u3001\u8aa4\u308a\u306a\u3069\u6c17\u4ed8\u3044\u305f\u70b9\u304c\u3054\u3056\u3044\u307e\u3057\u305f\u3089\u30b3\u30e1\u30f3\u30c8\u306b\u304a\u9858\u3044\u3057\u307e\u3059\u3002\n\u305d\u308c\u3067\u306f\u3001\u9577\u3005\u3068\u5931\u793c\u3044\u305f\u3057\u307e\u3057\u305f\u3002\u6539\u3081\u3066\u3001\u8aad\u3093\u3067\u3044\u305f\u3060\u304d\u3042\u308a\u304c\u3068\u3046\u3054\u3056\u3044\u307e\u3057\u305f\u3002\n\n\n\n"}