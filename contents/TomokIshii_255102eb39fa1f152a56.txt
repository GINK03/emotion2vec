{"context": "\n\n\u306f\u3058\u3081\u306b\n\u63a8\u85a6\u30b7\u30b9\u30c6\u30e0\u306b\u7528\u3044\u3089\u308c\u308b\u5354\u8abf\u30d5\u30a3\u30eb\u30bf\u30ea\u30f3\u30b0\u306f\uff0c\u6a5f\u68b0\u5b66\u7fd2\u306e\u4e00\u3064\u306e\u5fdc\u7528\u4f8b\u3067\u3042\u308b\u304c\uff0c\u5358\u7d14\u306a\u300c\u6559\u5e2b\u3042\u308a\u5b66\u7fd2\u300d\u306e\u30d1\u30bf\u30fc\u30f3\u3068\u5c11\u3057\u7570\u306a\u308b\u3068\u3053\u308d\u304c\u3042\u308b\uff0e\u6587\u732e\uff0cInternet\u60c5\u5831\u3092\u5c11\u3057\u3042\u305f\u3063\u3066\u307f\u305f\u304c\uff0c\u6982\u5ff5\uff0c\u30b7\u30b9\u30c6\u30e0\u69cb\u6210\u306b\u3064\u3044\u3066\u3059\u3050\u306b\u7406\u89e3\u3059\u308b\u306e\u306f\u96e3\u3057\u3044\uff0e\u3057\u304b\u3057\uff0cAndrew Ng\u5148\u751f\u306b\u3088\u308bCoursera Machine Learning (week 9)\u3067\u53d6\u308a\u6271\u308f\u308c\u3066\u3044\u308b\u3053\u3068\u3092\u601d\u3044\u51fa\u3057\uff0c\u305d\u306e\u6559\u6750\u3092\u5fa9\u7fd2\u3059\u308b\u3053\u3068\u3067\u5354\u8abf\u30d5\u30a3\u30eb\u30bf\u30ea\u30f3\u30b0\u306b\u3064\u3044\u3066\u7406\u89e3\u3092\u6df1\u3081\u308b\u3053\u3068\u304c\u3067\u304d\u305f\uff0e\n\u53d7\u8b1b\u3055\u308c\u305f\u65b9\u306f\u3054\u5b58\u77e5\u3068\u601d\u308f\u308c\u308b\u304c\uff0c\u3053\u306e\u30b3\u30fc\u30b9\u306e\u6f14\u7fd2\u3067\u306f Matlab/Octave \u3092\u7528\u3044\u3066\u3044\u308b\uff0e\u4eca\u56de\u306f\uff0cPython\u3067\u5354\u8abf\u30d5\u30a3\u30eb\u30bf\u30ea\u30f3\u30b0\uff08\u306e\u539f\u578b\uff09\u3092\u5b9f\u88c5\u3057\u3066\u307f\u305f\uff0e\u521d\u3081\u306bNumpy+Scipy(Optimize)\u3067\u52d5\u4f5c\u3092\u78ba\u8a8d\u3057\uff0c\u6b21\u306bTensorFlow\u3092\u7528\u3044\u305f\u5b9f\u88c5\u3092\u78ba\u8a8d\u3057\u305f\uff0e\n\n\u5354\u8abf\u30d5\u30a3\u30eb\u30bf\u30ea\u30f3\u30b0\u306e\u6982\u8981\u3092\u5c11\u3057\n\u30c7\u30fc\u30bf\u30b5\u30a4\u30a8\u30f3\u30c6\u30a3\u30b9\u30c8\u990a\u6210\u8aad\u672c\uff0c\u6a5f\u68b0\u5b66\u7fd2\u5165\u9580\u7de8\u304b\u3089\u5f15\u7528\u3059\u308b\uff0e\n\n\u5354\u8abf\u30d5\u30a3\u30eb\u30bf\u30ea\u30f3\u30b0\u306fEC\u30b5\u30a4\u30c8\u306b\u304a\u3051\u308b\u6b21\u306e\u3088\u3046\u306a\u63d0\u793a\u3092\u5b9f\u73fe\u3059\u308b\u624b\u6cd5\u3067\u3059\uff0e\n- \u300c\u3053\u306e\u5546\u54c1\u3092\u8cb7\u3063\u305f\u4eba\u306f\u3053\u3093\u306a\u5546\u54c1\u3082\u8cb7\u3063\u3066\u3044\u307e\u3059\uff0e\u300d\n- \u300c\u3042\u306a\u305f\u3068\u540c\u3058\u5546\u54c1\u3092\u8cb7\u3063\u3066\u3044\u308b\u4eba\u306f\u3053\u3093\u306a\u5546\u54c1\u3082\u8cb7\u3063\u3066\u3044\u307e\u3059\uff0e\u300d\n\n\u6982\u5ff5\u3092\u7406\u89e3\u3067\u304d\u305f\u3068\u3053\u308d\u3067\u5b9f\u88c5\u3067\u3042\u308b\u304c\uff0cCoursera Machine Learning\u3067\u306e\u89e3\u8aac\u3092\u78ba\u8a8d\u3057\u3066\u3044\u304f\uff0e\n\u3053\u3053\u3067\u306f\uff0c\u6620\u753b\u30e9\u30f3\u30ad\u30f3\u30b0\u306e\u4f8b\u3092\u7528\u3044\u3066\u8aac\u660e\u3092\u9032\u3081\u3066\u3044\u308b\uff0e\nFig.1 Movie Rating Data\n\n\u8868\u306f\uff0c\u5404\u30e6\u30fc\u30b6\u306b\u3088\u308b\u6620\u753b\u306e\u30ec\u30fc\u30c6\u30a3\u30f3\u30b0\u3067\u3042\u308b\u304c\uff0c\u30e6\u30fc\u30b6\u306e\u597d\u307f\u306b\u5f93\u3063\u3066\u8a55\u4fa1\u304c\u5206\u304b\u308c\u3066\u304f\u308b\uff0e\u6620\u753b\u306e\u5185\u5bb9\u306b\u5fdc\u3058\u3066\uff0c\u300c\u30e9\u30d6\u30ed\u30de\u30f3\u30b9\u306e\u50be\u5411\u304c\u5f37\u3044\u300d\u300c\u30a2\u30af\u30b7\u30e7\u30f3\u6027\u304c\u9ad8\u3044\u300d\u7b49\uff0c\u3053\u3068\u306a\u308b\u5c3a\u5ea6\uff08Coursera\u6388\u696d\u3067\u306f\u30e1\u30b8\u30e3\u30fc\u3068\u3044\u3063\u3066\u3044\u305f\uff09\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u3067\u3042\u308b\u30c7\u30fc\u30bf[X]\u304c\u6e96\u5099\u3055\u308c\u308b\uff0e\u4e00\u65b9\u3067\u300c\u30e6\u30fc\u30b6\u306e\u597d\u307f\u300d\u306b\u5bfe\u3059\u308b\u30d1\u30e9\u30e1\u30fc\u30bf[Theta]\u3082\u5fc5\u8981\u3068\u306a\u308b\uff0e\u56f3\u306e\u3088\u3046\u306b\u30ec\u30fc\u30c6\u30a3\u30f3\u30b0\u306e\u30c7\u30fc\u30bf\u306f\uff0c\u30b5\u30a4\u30ba\u304c\uff0c\u6620\u753b\u6570 x \u30e6\u30fc\u30b6\u6570\u306e2\u6b21\u5143\u30de\u30c8\u30ea\u30af\u30b9\uff08[Y]\uff09\u3067\u3042\u308b\u304c\uff0c\u30e6\u30fc\u30b6\u304c\u3059\u3079\u3066\u306e\u6620\u753b\u306b\u30ec\u30fc\u30c8\u3064\u3051\u308b\u308f\u3051\u3067\u306f\u306a\u3044\u306e\u3067\uff0c\u4e0d\u5b9a\u3068\u306a\u3063\u3066\u3044\u308b\u3068\u3053\u308d\u304c\u591a\u3044\uff0e\u3053\u306e\u4e0d\u5b9a\uff1f\u30de\u30fc\u30af\u306e\u3068\u3053\u308d\u3092\uff0c\u56de\u5e30\u306b\u3088\u3063\u3066\u88dc\u5b8c\u3059\u308b\u3068\u3044\u3046\u306e\u304c\u554f\u984c\u306e\u4e3b\u65e8\u3067\u3042\u308b\uff0e \n\u88dc\u5b8c\u3067\u304d\u305f\u30ec\u30fc\u30c6\u30a3\u30f3\u30b0\u306e\u30de\u30c8\u30ea\u30af\u30b9\u304c\u7cbe\u5ea6\u3088\u304f\u8a08\u7b97\u3067\u304d\u308c\u3070\uff0c\u985e\u4f3c\u6620\u753b\u3092\u63a8\u85a6\u3059\u308b\u6b21\u306e\u30d7\u30ed\u30bb\u30b9\u306b\u304a\u3051\u308b\u51e6\u7406\u3082\u4e0a\u624b\u306b\u3067\u304d\u308b\u3068\u3044\u3046\u8aac\u660e\u3067\u3042\u308b\uff0e\n\nNumpy+Scipy.Optimize\u3067\u5b9f\u88c5\u3057\u3066\u307f\u308b\nCousera\u30b3\u30fc\u30b9\u3067\u306e\u4ed6\u306e\u6f14\u7fd2\u3068\u540c\u69d8\uff0c\u307e\u305a\u30b3\u30b9\u30c8\u95a2\u6570\u3092\u6c42\u3081\u308b\u3068\u3053\u308d\u304b\u3089\u30b9\u30bf\u30fc\u30c8\u3059\u308b\uff0e\u30d1\u30e9\u30e1\u30fc\u30bf\u304c2\u3064\u3042\u308b\u306e\u3067\uff0c\u304b\u306a\u308a\"\u3054\u3064\u3044\"\u5f0f\u3068\u306a\u308b\uff0e\n \\begin{eqnarray}\nJ(x^{(1)},...,x^{n_m},\\theta^{1},...,\\theta^{n_u}) = &\\ & \\frac{1}{2} \\sum_{(i,j):r(i,j)=1} \n(({\\theta}^{(j)})^T \\ x^{(i)} - y^{(i,j)})^2 \\ + \\\\\n&\\ & (\\frac{\\lambda}{2} \\sum_{j=1}^{n_u} \\sum_{k=1}^{n} ({\\theta}_k^{(j)}) ^2)\n +  (\\frac{\\lambda}{2} \\sum_{i=1}^{n_m} \\sum_{k=1}^{n} ({x}_k^{(i)}) ^2)    \n \\end{eqnarray}\n\n\n\u30d1\u30e9\u30e1\u30fc\u30bf[X], [Theta]\u3092\u6301\u3064\u30b3\u30b9\u30c8\u95a2\u6570\u306f\uff0c\u30d1\u30e9\u30e1\u30fc\u30bf\u306e\u30de\u30c8\u30ea\u30af\u30b9\u7a4d\u3067\u6c7a\u307e\u308b\u30ec\u30fc\u30c6\u30a3\u30f3\u30b0\u4e88\u6e2c\u5024\u3068\u30ec\u30fc\u30c6\u30a3\u30f3\u30b0\u5b9f\u30c7\u30fc\u30bf\uff08\u30e9\u30d9\u30eb\uff09\u3068\u306e\u4e8c\u4e57\u8aa4\u5dee\uff0c\u53ca\u3073\u30d1\u30e9\u30e1\u30fc\u30bf\u306eregularization\u9805\u304b\u3089\u6210\u308b\uff0e\u3053\u308c\u3092Python\u306e\u30b3\u30fc\u30c9\u306b\u76f4\u3059\u3068\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u306a\u308b\uff0e\ndef cofi_costfunc(Y, R, shapes, lambda_c, params):\n    #  [J, grad] = COFICOSTFUNC(params, Y, R, num_users, num_movies, ...\n    #   num_features, lambda) returns the cost and gradient for the\n    #   collaborative filtering problem.\n    num_users = shapes[0]\n    num_movies = shapes[1]\n    num_features = shapes[2]\n    boundary = num_movies * num_features\n    params_c1 = np.copy(params[:boundary])\n    params_c2 = np.copy(params[boundary:])\n    X = params_c1.reshape((num_movies, num_features))\n    Theta = params_c2.reshape((num_users, num_features))\n\n    # You need to return the following values correctly\n    Jcost = 0.5 * (((np.dot(X, Theta.T) - Y) * R) ** 2).sum() \\\n        + 0.5 * lambda_c * ((X.ravel() **2).sum() + (Theta.ravel() **2).sum())\n\n    return Jcost\n\n\n\u30d1\u30e9\u30e1\u30fc\u30bfX\uff08\u6620\u753b\u5185\u5bb9\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\uff09, Theta\uff08\u30e6\u30fc\u30b6\u6307\u5411\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\uff09\u306f\uff0c\u4e00\u3064\u306e\u304b\u305f\u307e\u308aparams\u3067\u5165\u529b\u3055\u308c\u308b\uff0eY\u306f\uff0c\u6620\u753b\u6570 x \u30e6\u30fc\u30b6\u6570\u306e\u5f62\u306e\u30ec\u30fc\u30c6\u30a3\u30f3\u30b0\u30fb\u30c7\u30fc\u30bf\uff0eR\u306f\uff0cY\u540c\u3058\u30b5\u30a4\u30ba\u3067\uff0c\u30ec\u30fc\u30c6\u30a3\u30f3\u30b0\u304c\u3064\u3051\u308c\u3066\u3044\u308b\u3068\u304d\u306b1\uff0c\u30ec\u30fc\u30c7\u30a3\u30f3\u30b0\u304c\u307e\u3060\u306a\u3044\u5834\u5408\u306b0\u304c\u30bb\u30c3\u30c8\u3055\u308c\u308b\uff0c\u30d0\u30a4\u30ca\u30ea\u30fc\u306e\u30c7\u30fc\u30bf\uff0e\uff08\u30d7\u30ed\u30b0\u30e9\u30e0\u306e\u5909\u6570\u578b\u3068\u3057\u3066\u306f, \u6574\u6570\u578b\u3067\u6271\u3063\u3066\u3044\u307e\u3059\uff0e\uff09\u524d\u51e6\u7406\u306e\u5f8c\uff0c\u4e0a\u8ff0\u306e\u30b3\u30b9\u30c8\u95a2\u6570\u5f0f\u306b\u5bfe\u5fdc\u3057\u3066\u30b3\u30b9\u30c8\u3092\u6c42\u3081\u3066\u3044\u308b\u306e\u304c\u6700\u5f8c\u306e\u30b9\u30c6\u30fc\u30c8\u30e1\u30f3\u30c8\u3067\u3042\u308b\uff0e\n\u6b21\u306b\u3053\u306e\u30b3\u30b9\u30c8\u95a2\u6570\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\uff08x\uff0ctheta\uff09\u306b\u95a2\u3059\u308b\u504f\u5fae\u5206\u4fc2\u6570\uff08\u52fe\u914d\uff09\u306e\u5f0f\u3067\u3042\u308b\uff0e\n\\frac{\\partial J}{\\partial x_k^{(i)}} = \\sum_{j:r(i,j)=1} (( {\\theta}^{(j)})^T x^{(i)} \n- y^{(i,j)} ) {\\theta}_k^{(j)} + \\lambda x_k^{(i)}\\\\\n\n\\frac{\\partial J}{\\partial {\\theta}_k^{(j)}} = \\sum_{i:r(i,j)=1} (( {\\theta}^{(j)})^T x^{(i)} \n- y^{(i,j)} ) {x}_k^{(i)} + \\lambda {\\theta}_k^{(j)}\n\n\n\u3053\u3061\u3089\u3082\u305d\u308c\u306a\u308a\u306b\"\u3054\u3064\u3044\"\u6570\u5f0f\u3067\u3042\u308b\uff0e\u3057\u304b\u3057\uff0c\u30b3\u30fc\u30c9\u306b\u76f4\u3059\u3068\u7406\u89e3\u3057\u3084\u3059\u3044\uff0e\ndef cofi_costfunc_grad(Y, R, shapes, lambda_c, params):\n    #  [J, grad] = COFICOSTFUNC(params, Y, R, num_users, num_movies, ...\n    #   num_features, lambda) returns the cost and gradient for the\n    #   collaborative filtering problem.\n    num_users = shapes[0]\n    num_movies = shapes[1]\n    num_features = shapes[2]\n    boundary = num_movies * num_features\n    params_c1 = np.copy(params[:boundary])\n    params_c2 = np.copy(params[boundary:])\n    X = params_c1.reshape((num_movies, num_features))\n    Theta = params_c2.reshape((num_users, num_features))\n\n    # You need to return the following values correctly  \n    X_grad = np.dot(((np.dot(X, Theta.T) - Y) * R), Theta) + lambda_c * X\n    Tgsub = (np.dot(X, Theta.T) - Y) * R\n    Theta_grad = np.dot(Tgsub.T, X) + lambda_c * Theta\n    Jgrad = np.concatenate((X_grad.ravel(), Theta_grad.ravel()))\n\n    return Jgrad\n\n\n\u5f8c\u534a\u306e4\u884c\u306b\u3066\uff0c\u30b3\u30b9\u30c8\u52fe\u914d\u3092\u7b97\u51fa\u3057\u3066\u3044\u308b\uff0e  \nCoursera\u306e\u6f14\u7fd2\u3067\u306f\uff0c\u30b3\u30b9\u30c8\u6700\u5c0f\u5316\u306e\u6700\u9069\u5316\u30d7\u30ed\u30bb\u30b9\u3092\uff0c\u4e8b\u524d\u306b\u7528\u610f\u3057\u3066\u63d0\u4f9b\u3055\u308c\u308b fmincg.m \u306e\u95a2\u6570\u3092\u7528\u3044\u3066\u884c\u3063\u3066\u3044\u308b\uff0ePython\u306b\u76f4\u3059\u5834\u5408\u306f\u540c\u69d8\u306e\u51e6\u7406\u3092 scipy.optimize.minimize() \u3067\u884c\u3046\u3053\u3068\u304c\u3067\u304d\u308b\uff0e\n# \nimport scipy.optimize as spopt\n\n# \u30d1\u30e9\u30e1\u30fc\u30bf\u306e\u521d\u671f\u5024\u3092\u30bb\u30c3\u30c8\ntheta_ini = np.concatenate((X.flatten(), Theta.flatten()))\n\n# wrapper \u95a2\u6570\u3092\u7528\u610f\ndef compute_cost_sp(theta):\n    global Y, R, shapes, lambda_c\n    j =  cofi_costfunc(Y, R, shapes, lambda_c, params=theta)\n\n    return j\n\ndef compute_grad_sp(theta):\n    global Y, R, shapes, lambda_c\n    j_grad = cofi_costfunc_grad(Y, R, shapes, lambda_c, params=theta)\n\n    return j_grad\n\n# scipy.optimize.minimize \u306e\u30aa\u30d7\u30b7\u30e7\u30f3\u3092\u30bb\u30c3\u30c8\noptions = {'gtol': 1.e-6, 'disp': True}\n# Regularization\u4fc2\u6570\nlambda_c = 1.5\n\nres1 = spopt.minimize(compute_cost_sp, theta_ini, method='CG', \\\n         jac=compute_grad_sp, options=options)\ntheta =  res1.x\n\n# \u3072\u3068\u304b\u305f\u307e\u308a\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u3092X\u3068Theta\u306b\u5206\u89e3\nX = theta[:num_movies*num_features].reshape((num_movies, num_features))\nTheta = theta[num_movies*num_features:].reshape((num_users, num_features))\n\n\nscipy.optimize.minimize \u306e\u8a73\u7d30\u306b\u3064\u3044\u3066\u306f\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u3092\u53c2\u7167\u3057\u3066\u3044\u305f\u3060\u304d\u305f\u3044\u304c\uff0c\u6700\u9069\u5316\u624b\u6cd5\u3068\u3057\u3066\u3044\u308d\u3044\u308d\u306a\u3082\u306e\u3092\u9078\u629e\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u308b\uff0e\u4eca\u56de\u306f\u5143\u30cd\u30bf\uff08fmincg.m\uff09\u306b\u5408\u308f\u305b method='CG' (Conjugate gradient method) \u3068\u3057\u305f\uff0e\n\u3053\u306e\u3088\u3046\u306b\u30b3\u30b9\u30c8\u6700\u5c0f\u5316\u3092\u884c\u3063\u3066\u6c42\u3081\u305f\u30d1\u30e9\u30e1\u30fc\u30bf [X], [Theta] \u304b\u3089\uff0c\u5fc5\u8981\u306a\u60c5\u5831\uff08ex. \u300c\u3053\u306e\u6620\u753b\u306b\u9ad8\u3044\u8a55\u4fa1\u3092\u3057\u305f\u4eba\u306f\uff0c\u5225\u306e\u3053\u306e\u6620\u753b\u306e\u8a55\u4fa1\u3082\u9ad8\u3044\u3067\u3059\uff0e\u300d\uff09\u3092\u53d6\u308a\u51fa\u3059\u306e\u304c\u63a8\u85a6\u30b7\u30b9\u30c6\u30e0\u306e\u51e6\u7406\u3068\u306a\u308b\uff0e\uff08\u985e\u4f3c\u5ea6\u3092\u6e2c\u308b\u3084\u308a\u65b9\u306b\u3044\u308d\u3044\u308d\u3042\u308b\u3088\u3046\u3067\u3059\u304c\uff0c\u3053\u3053\u3067\u306f\u8aac\u660e\u3092\u7701\u7565\u3044\u305f\u3057\u307e\u3059\uff0e\uff09\n\nTensorFlow\u3092\u4f7f\u3046\n\u6628\u5e74(2015\u5e74)\u306bTensorFlow\u304c\u516c\u958b\u3055\u308c\u3066\u304b\u3089\u7d04\u4e00\u5e74\u304c\u7acb\u3064\uff0e\u308f\u304f\u308f\u304f\u3057\u306a\u304c\u3089\u30b3\u30fc\u30c9\u3092\u4f5c\u6210\u3057\uff0c\u6025\u3044\u3067Qiita\u6295\u7a3f\u8a18\u4e8b\u3092\u66f8\u3044\u305f\u8a18\u61b6\u304c\u3042\u308b\uff0e\u4eca\u56de\uff0c\u5354\u8abf\u30d5\u30a3\u30eb\u30bf\u30ea\u30f3\u30b0\u306e\u5b66\u7fd2\u3092\u3088\u308a\u9ad8\u901f\u306a\u51e6\u7406\u3067\u5b9f\u884c\u3055\u305b\u308b\u306b\u3042\u305f\u308a\uff0cTensorFlow\u3092\u4f7f\u3046\u3053\u3068\u306b\u3057\u305f\uff0e\n\u901a\u5e38\u306e\u300c\u6559\u5e2b\u3042\u308a\u5b66\u7fd2\u300d\u3067\u3042\u308c\u3070\uff0c\u5165\u529b-\u51fa\u529b\u306e\u95a2\u4fc2\u304c\u660e\u78ba\u306a\u306e\u3067\uff0cTensorFlow\u306e\u30b0\u30e9\u30d5\u8868\u73fe\u306b\u8ff7\u3046\u3053\u3068\u306f\u306a\u3044\u306e\u3060\u304c\uff0c\u4eca\u56de\u306f\u5c11\u3057\u96e3\u3057\u304b\u3063\u305f\uff0e\n\n\u901a\u5e38\u306e\u554f\u984c\u3067\uff0c\u91cd\u307f w\uff0c\u30d0\u30a4\u30a2\u30b9 b \u306b\u3042\u305f\u308b\u3082\u306e ... \u4eca\u56de\u306f \u6620\u753b\u5185\u5bb9\u306e\u30d1\u30e9\u30e1\u30fc\u30bf x \u3068\u30e6\u30fc\u30b6\u306e\u597d\u307f\u306e\u30d1\u30e9\u30e1\u30fc\u30bf Theta\uff0e\n\u901a\u5e38\u306e\u554f\u984c\u3067\uff0c\u6559\u5e2b\u30c7\u30fc\u30bf\u306b\u3042\u305f\u308b\u3082\u306e ... \u4eca\u56de\u306f\uff0c\u4e8b\u524d\u306b\u30e6\u30fc\u30b6\u304c\u3064\u3051\u305f\u30ec\u30fc\u30c6\u30a3\u30f3\u30b0\u306e\u60c5\u5831\uff0e\u5177\u4f53\u7684\u306b\u306f\uff0c\u30c7\u30fc\u30bf Y\uff08\u30e6\u30fc\u30b6\u304c\u6620\u753b\u306b\u3064\u3051\u305f\u30ec\u30fc\u30c6\u30a3\u30f3\u30b0\u3092\u5305\u6709\u3059\u308b \u6620\u753b\u6570 x \u30e6\u30fc\u30b6\u6570\u306e\u30de\u30c8\u30ea\u30af\u30b9\uff09\u3068 R\uff08\u30e6\u30fc\u30b6\u304c\u30ec\u30fc\u30c6\u30a3\u30f3\u30b0\u3092\u3057\u305f\u304b\uff0f\u3057\u3066\u3044\u306a\u3044\u304b\u3092\u793a\u3059\u30d0\u30a4\u30ca\u30ea\u30fc\u30c7\u30fc\u30bf\uff09\uff0e\n\n\u3088\u3063\u3066\uff0c\u5909\u6570\u6e96\u5099\u306e\u30b3\u30fc\u30c9\u306f\u6b21\u306e\u3088\u3046\u306a\u3082\u306e\u3068\u3057\u305f\uff0e\n# Parameter definition\n    if WARM_START:\n        data_param = load_data(fn='./data/ex8_movieParams.mat')\n        X_np = data_param['X'].astype(np.float32)\n        Theta_np = data_param['Theta'].astype(np.float32)\n        x = tf.Variable(X_np)\n        theta = tf.Variable(Theta_np)\n    else:   # COLD START\n        x = tf.Variable(tf.random_normal([num_movies, num_features],\n            mean=0.0, stddev=0.05))\n        theta = tf.Variable(tf.random_normal([num_users, num_features],\n            mean=0.0, stddev=0.05))\n# Placeholders\n    Y_ph = tf.placeholder(tf.float32, shape=[None, num_users])\n    R_ph = tf.placeholder(tf.float32, shape=[None, num_users])\n\n\nCoursera\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u6f14\u7fd2\u3067\uff0c\u3042\u308b\u7a0b\u5ea6\u306e\u4e8b\u524d\u5b66\u7fd2\u304c\u884c\u308f\u308c\u3066\u3044\u305f\u30d1\u30e9\u30e1\u30fc\u30bf\u306e\u30c7\u30fc\u30bf\u304c\u63d0\u4f9b\u3055\u308c\u3066\u3044\u308b\u306e\u3067\uff0c\u305d\u308c\u3092\u7528\u3044\u308b 'WARM_START' \u306e\u30aa\u30d7\u30b7\u30e7\u30f3\u3068\u30bc\u30ed\u304b\u3089\u306e\u30b9\u30bf\u30fc\u30c8\u3092\u884c\u3046\u30aa\u30d7\u30b7\u30e7\u30f3\u3092\u7528\u610f\u3057\u305f\uff0e'WARM_START' \u3067\u306f\uff0cnumpy.array \u306e\u30c7\u30fc\u30bf\u3092\u305d\u306e\u307e\u307e tf.Variable() \u306b\u6e21\u3059\u3060\u3051\uff0c\u30bc\u30ed\u30b9\u30bf\u30fc\u30c8\u306e\u5834\u5408\u306f\uff0c\u5c0f\u3055\u3044\u5024\u3068\u306a\u308b\u4e71\u6570\u3092\u767a\u751f\u3055\u305b\u3066x\uff0ctheta\u306b\u30bb\u30c3\u30c8\u3059\u308b\uff0e\u307e\u305f\uff0c\u6559\u5e2b\u30c7\u30fc\u30bf\u306eplaceholder\u306f\uff0c\u5fc5\u8981\u306ashape\u306e\u3082\u306e\u3092\u7528\u610f\u3057\u305f\uff0e\n\uff08shape=[None, num_users] \u306f\uff0cshape=[num_movies, num_users]\u3067\u3082\u554f\u984c\u306a\u3044\u3068\u601d\u3044\u307e\u3059\u304c\uff0cTensorFlow\u306e\u6163\u4f8b\u306b\u5f93\u3044None\u3068\u3057\u3066\u3044\u307e\u3059\uff0e\uff09\n\u6b21\u306b\u30b3\u30b9\u30c8\u95a2\u6570\u306e\u8a08\u7b97\u3092\u5b9a\u7fa9\u3059\u308b\uff0e\ndef Ypred(X, Theta):\n    '''\n      calculate rating with parameter X and Theta\n      args.:\n        X:      movie contents parameter\n        Theta:  user characteristic parameter\n    '''\n    feat_dim1 = tf.shape(X)[1]\n    feat_dim2 = tf.shape(Theta)[1]\n\n    tf.assert_equal(feat_dim1, feat_dim2)\n    rating = tf.matmul(X, tf.transpose(Theta))\n\n    return rating\n\n\n# Cost Function, etc.\n    cost = tf.reduce_sum(((Ypred(x, theta) - Y_ph) * R_ph) ** 2)\n    L2_sqr = tf.nn.l2_loss(x) + tf.nn.l2_loss(theta)\n    lambda_c = 1.0      # L2 norm coefficient      \n    loss = cost + lambda_c * L2_sqr\n\n\nTensorFlow\u3060\u3051\u3067\u306f\u306a\u3044\u304c\uff0cDeep Learning\u30d5\u30ec\u30fc\u30e0\u30ef\u30fc\u30af\u306e\u4fbf\u5229\u306a\u3068\u3053\u308d\u306fGradient\u3092\u81ea\u52d5\u8a08\u7b97\u3057\u3066\u304f\u308c\u308b\u3068\u3053\u308d\u3067\u3042\u308b\uff0e\u4e0a\u8a18\u306e\u3088\u3046\u306b\u30b3\u30b9\u30c8\u95a2\u6570\u306e\u307f\u306e\u5b9a\u7fa9\u3067\u6e08\u3080\u306e\u304c\u300c\u3048\u3089\u3044\u300d\u3068\u611f\u3058\u308b\uff0e\u3053\u306e\u5f8c\uff0c\u4f8b\u306b\u3088\u3063\u3066\u30aa\u30d7\u30c6\u30a3\u30de\u30a4\u30b6\u3092\u30bb\u30c3\u30c8\u3057\u3066\u5b66\u7fd2\u30eb\u30fc\u30d7\u3068\u306a\u308b\uff0e\n    lr = 1.e-5\n    train_step = tf.train.GradientDescentOptimizer(lr).minimize(loss)\n    init_op = tf.initialize_all_variables()\n\n    # Train\n    with tf.Session() as sess:\n        sess.run(init_op)\n\n        for i in range(10001):\n            sess.run(train_step, feed_dict={Y_ph: Y_np, R_ph: Y_np})\n\n            if i % 1000 == 0:\n                loss_mon = loss.eval({Y_ph: Y_np, R_ph: Y_np})\n                print(' step, loss = {:6d}: {:10.1f}'.format(i, loss_mon))\n\n        # evaluate ranking with final parameters\n        ymat = Ypred(x, theta).eval()\n        sio.savemat('./ymat_tf.mat', {'Y': ymat})\n        print('ymat is saved to \"ymat_tf.mat\".')\n\n\n\u5225\u306b tf.train.GradientDescentOptimizer() \u3067\u306a\u304f\u3066\u3082\u597d\u304d\u306a\u30aa\u30d7\u30c6\u30a3\u30de\u30a4\u30b6\u3092\u4f7f\u3048\u3070\u3044\u3044\u3068\u601d\u3046\u304c\uff0c\u4eca\u56de\u306f Cousera \u306e\u8ab2\u984c\u3068\u3044\u3046\u3053\u3068\u3067\uff0c\u57fa\u672c\u7684\u306a\u95a2\u6570\u3092\u7528\u3044\u3066\u307f\u305f\uff0e\u5b66\u7fd2\u7387\u306e\u8abf\u6574\u306b\u3084\u3084\u624b\u9593\u304c\u304b\u304b\u308b\u304c\uff0c\u7121\u4e8b\u306b\uff08gpu\u6f14\u7b97\u3067\u9ad8\u901f\u306b\uff09\u8a08\u7b97\u3092\u884c\u3046\u3053\u3068\u304c\u3067\u304d\u305f\uff0e\n\n\u7d50\u679c\u6bd4\u8f03\n\u540c\u3058\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u3067\u89e3\u3044\u3066\u3044\u308b\u306e\u3067\uff0cscipy.optimize.minimize \u306b\u3088\u308b\u3082\u306e\u3068TensorFlow\u306b\u3088\u308b\u7d50\u679c\u306f\u540c\u69d8\u306a\u3082\u306e\u3068\u306a\u308b\u306f\u305a\u3067\u3042\u308b\uff0e\u4eca\u56de\u306f\uff0c\u6c42\u3081\u305f\u30d1\u30e9\u30e1\u30fc\u30bf(X, Theta) \u304b\u3089\u30ec\u30fc\u30c6\u30a3\u30f3\u30b0\u30fb\u30de\u30c8\u30ea\u30af\u30b9 Y \u3092\u8a08\u7b97\u3057\u3053\u308c\u3092Heatmap\u56f3\u306e\u3088\u3046\u306b\u3057\u3066\u307f\u305f\uff0e\uff08\u9752\uff1a\u4f4e\u3044\u30ec\u30fc\u30c8 \u301c \u8d64\uff1a\u9ad8\u3044\u30ec\u30fc\u30c8\uff09\n\nBy scipy.optimize.minimize\n\n\nBy TensorFLow\n\n\u8a73\u7d30\u90e8\u306b\u8272\u306e\u6fc3\u6de1\u306a\u3069\u306e\u9055\u3044\u304c\u898b\u3089\u308c\u308b\u304c\uff0c\u5927\u304d\u306a\u30d1\u30bf\u30fc\u30f3\u3068\u3057\u3066\u306f\u540c\u69d8\u306a\u3082\u306e\u306b\u898b\u308b\u3053\u3068\u304c\u3067\u304d\u308b\uff0e\u8a08\u7b97\u30d7\u30ed\u30bb\u30b9\u3068\u3057\u3066\u306f\uff0c\u554f\u984c\u306a\u3057\u3068\u601d\u308f\u308c\u308b\uff0e\n\u4e21\u8005\u306e\u9055\u3044\u3092\u57cb\u3081\u3088\u3046\u3068\u3059\u308b\u306a\u3089\uff0cRegularization\uff0c\u5b66\u7fd2\u7387\uff0c\u53ce\u675f\u72b6\u6cc1\u7b49\uff0c\u7d30\u304b\u3044\u3068\u3053\u308d\u3092\u8abf\u6574\u3059\u308b\u5fc5\u8981\u304c\u3042\u308b\uff0e\u300c\u5354\u8abf\u30d5\u30a3\u30eb\u30bf\u30ea\u30f3\u30b0\u3092\u5b66\u3076\u300d\u3092\u3044\u3046\u76ee\u7684\u3067\u306f\u4ee5\u4e0a\u306e\u5185\u5bb9\u3067OK\u3068\u601d\u3046\u304c\uff0cKaggle\u7b49\u30b3\u30f3\u30da\u3067\u6226\u3046\u305f\u3081\u306b\u306f\uff0c\u3044\u308d\u3044\u308d\u8a73\u7d30\u3092\u691c\u8a0e\u3057\u306a\u3051\u308c\u3070\u306a\u3089\u306a\u3044\u3060\u308d\u3046\uff0e\n\uff08\u4eca\u56de\u7528\u3044\u305f\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u74b0\u5883\u306f\uff0c\u6b21\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3059\uff0ePython 3.5.2, Numpy 1.11.2, Scipy 0.18.1, TensorFlow 0.11.0 )\n\uff08\u30b3\u30fc\u30c9\u3092Gist\u306bUp\u3057\u307e\u3057\u305f\uff1a https://gist.github.com/tomokishii/2e9f83d391df82f25942c1310b41e0b5 \uff09\n\n\u53c2\u8003\u6587\u732e\uff0cweb site\n\nCousera, Machine Learning, by Prof.Andrew Ng\uff08\u6bce\u9031\uff0c\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u8ab2\u984c\u306e\u8aac\u660e\u66f8/PDF\u304c\u914d\u5e03\u3055\u308c\u307e\u3059\uff0e\u53d7\u8b1b\u7d42\u4e86\u5f8c\u3082\u30b5\u30a4\u30c8\u306b\u3066\uff0c\u6559\u6750\u30d3\u30c7\u30aa\uff0c\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u6f14\u7fd2\u306e\u95a2\u9023\u30d5\u30a1\u30a4\u30eb\u306b\u30a2\u30af\u30bb\u30b9\u53ef\u80fd\u3067\u3059\uff0e\uff09\n\u30c7\u30fc\u30bf\u30b5\u30a4\u30a8\u30f3\u30c6\u30a3\u30b9\u30c8\u990a\u6210\u8aad\u672c\uff0c\u6a5f\u68b0\u5b66\u7fd2\u5165\u9580\u7de8(\u7b2c2\u90e8\u7279\u96c63)\uff0c\u63a8\u85a6\u30b7\u30b9\u30c6\u30e0\u5165\u9580\nhttp://gihyo.jp/book/2015/978-4-7741-7631-4\n\npython\u3067\u30a2\u30a4\u30c6\u30e0\u30d9\u30fc\u30b9\u5354\u8abf\u30d5\u30a3\u30eb\u30bf\u30ea\u30f3\u30b0\u3092\u5b9f\u88c5\u3059\u308b - MovieLens\u3092\u4f8b\u306b - Qiita\nhttp://qiita.com/kotaroito/items/6acb58bb16b68a460af9\n\n\u5b9f\u8df5 \u6a5f\u68b0\u5b66\u7fd2\u30b7\u30b9\u30c6\u30e0 - \u30aa\u30e9\u30a4\u30ea\u30fc\u30fb\u30b8\u30e3\u30d1\u30f3\uff0c8\u7ae0\u3000\u56de\u5e30\uff1a\u30ec\u30b3\u30e1\u30f3\u30c9\u306e\u6539\u826f\nhttp://www.oreilly.co.jp/books/9784873116983/\n\nScipy Documentation\nhttps://docs.scipy.org/doc/scipy-0.18.1/reference/generated/scipy.optimize.minimize.html\n\n\n## \u306f\u3058\u3081\u306b\n\u63a8\u85a6\u30b7\u30b9\u30c6\u30e0\u306b\u7528\u3044\u3089\u308c\u308b\u5354\u8abf\u30d5\u30a3\u30eb\u30bf\u30ea\u30f3\u30b0\u306f\uff0c\u6a5f\u68b0\u5b66\u7fd2\u306e\u4e00\u3064\u306e\u5fdc\u7528\u4f8b\u3067\u3042\u308b\u304c\uff0c\u5358\u7d14\u306a\u300c\u6559\u5e2b\u3042\u308a\u5b66\u7fd2\u300d\u306e\u30d1\u30bf\u30fc\u30f3\u3068\u5c11\u3057\u7570\u306a\u308b\u3068\u3053\u308d\u304c\u3042\u308b\uff0e\u6587\u732e\uff0cInternet\u60c5\u5831\u3092\u5c11\u3057\u3042\u305f\u3063\u3066\u307f\u305f\u304c\uff0c\u6982\u5ff5\uff0c\u30b7\u30b9\u30c6\u30e0\u69cb\u6210\u306b\u3064\u3044\u3066\u3059\u3050\u306b\u7406\u89e3\u3059\u308b\u306e\u306f\u96e3\u3057\u3044\uff0e\u3057\u304b\u3057\uff0cAndrew Ng\u5148\u751f\u306b\u3088\u308bCoursera Machine Learning (week 9)\u3067\u53d6\u308a\u6271\u308f\u308c\u3066\u3044\u308b\u3053\u3068\u3092\u601d\u3044\u51fa\u3057\uff0c\u305d\u306e\u6559\u6750\u3092\u5fa9\u7fd2\u3059\u308b\u3053\u3068\u3067\u5354\u8abf\u30d5\u30a3\u30eb\u30bf\u30ea\u30f3\u30b0\u306b\u3064\u3044\u3066\u7406\u89e3\u3092\u6df1\u3081\u308b\u3053\u3068\u304c\u3067\u304d\u305f\uff0e\n\n\u53d7\u8b1b\u3055\u308c\u305f\u65b9\u306f\u3054\u5b58\u77e5\u3068\u601d\u308f\u308c\u308b\u304c\uff0c\u3053\u306e\u30b3\u30fc\u30b9\u306e\u6f14\u7fd2\u3067\u306f Matlab/Octave \u3092\u7528\u3044\u3066\u3044\u308b\uff0e\u4eca\u56de\u306f\uff0cPython\u3067\u5354\u8abf\u30d5\u30a3\u30eb\u30bf\u30ea\u30f3\u30b0\uff08\u306e\u539f\u578b\uff09\u3092\u5b9f\u88c5\u3057\u3066\u307f\u305f\uff0e\u521d\u3081\u306bNumpy+Scipy(Optimize)\u3067\u52d5\u4f5c\u3092\u78ba\u8a8d\u3057\uff0c\u6b21\u306bTensorFlow\u3092\u7528\u3044\u305f\u5b9f\u88c5\u3092\u78ba\u8a8d\u3057\u305f\uff0e\n\n## \u5354\u8abf\u30d5\u30a3\u30eb\u30bf\u30ea\u30f3\u30b0\u306e\u6982\u8981\u3092\u5c11\u3057\n\u30c7\u30fc\u30bf\u30b5\u30a4\u30a8\u30f3\u30c6\u30a3\u30b9\u30c8\u990a\u6210\u8aad\u672c\uff0c\u6a5f\u68b0\u5b66\u7fd2\u5165\u9580\u7de8\u304b\u3089\u5f15\u7528\u3059\u308b\uff0e\n> \u5354\u8abf\u30d5\u30a3\u30eb\u30bf\u30ea\u30f3\u30b0\u306fEC\u30b5\u30a4\u30c8\u306b\u304a\u3051\u308b\u6b21\u306e\u3088\u3046\u306a\u63d0\u793a\u3092\u5b9f\u73fe\u3059\u308b\u624b\u6cd5\u3067\u3059\uff0e\n> - \u300c\u3053\u306e\u5546\u54c1\u3092\u8cb7\u3063\u305f\u4eba\u306f\u3053\u3093\u306a\u5546\u54c1\u3082\u8cb7\u3063\u3066\u3044\u307e\u3059\uff0e\u300d\n> - \u300c\u3042\u306a\u305f\u3068\u540c\u3058\u5546\u54c1\u3092\u8cb7\u3063\u3066\u3044\u308b\u4eba\u306f\u3053\u3093\u306a\u5546\u54c1\u3082\u8cb7\u3063\u3066\u3044\u307e\u3059\uff0e\u300d\n\n\u6982\u5ff5\u3092\u7406\u89e3\u3067\u304d\u305f\u3068\u3053\u308d\u3067\u5b9f\u88c5\u3067\u3042\u308b\u304c\uff0cCoursera Machine Learning\u3067\u306e\u89e3\u8aac\u3092\u78ba\u8a8d\u3057\u3066\u3044\u304f\uff0e\n\u3053\u3053\u3067\u306f\uff0c\u6620\u753b\u30e9\u30f3\u30ad\u30f3\u30b0\u306e\u4f8b\u3092\u7528\u3044\u3066\u8aac\u660e\u3092\u9032\u3081\u3066\u3044\u308b\uff0e\n\n**Fig.1 Movie Rating Data**\n![MovieRatingData.png](https://qiita-image-store.s3.amazonaws.com/0/74152/14973153-5b64-1e7e-75da-70df56ec1acb.png)\n\n\n\u8868\u306f\uff0c\u5404\u30e6\u30fc\u30b6\u306b\u3088\u308b\u6620\u753b\u306e\u30ec\u30fc\u30c6\u30a3\u30f3\u30b0\u3067\u3042\u308b\u304c\uff0c\u30e6\u30fc\u30b6\u306e\u597d\u307f\u306b\u5f93\u3063\u3066\u8a55\u4fa1\u304c\u5206\u304b\u308c\u3066\u304f\u308b\uff0e\u6620\u753b\u306e\u5185\u5bb9\u306b\u5fdc\u3058\u3066\uff0c\u300c\u30e9\u30d6\u30ed\u30de\u30f3\u30b9\u306e\u50be\u5411\u304c\u5f37\u3044\u300d\u300c\u30a2\u30af\u30b7\u30e7\u30f3\u6027\u304c\u9ad8\u3044\u300d\u7b49\uff0c\u3053\u3068\u306a\u308b\u5c3a\u5ea6\uff08Coursera\u6388\u696d\u3067\u306f\u30e1\u30b8\u30e3\u30fc\u3068\u3044\u3063\u3066\u3044\u305f\uff09\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u3067\u3042\u308b\u30c7\u30fc\u30bf[X]\u304c\u6e96\u5099\u3055\u308c\u308b\uff0e\u4e00\u65b9\u3067\u300c\u30e6\u30fc\u30b6\u306e\u597d\u307f\u300d\u306b\u5bfe\u3059\u308b\u30d1\u30e9\u30e1\u30fc\u30bf[Theta]\u3082\u5fc5\u8981\u3068\u306a\u308b\uff0e\u56f3\u306e\u3088\u3046\u306b\u30ec\u30fc\u30c6\u30a3\u30f3\u30b0\u306e\u30c7\u30fc\u30bf\u306f\uff0c\u30b5\u30a4\u30ba\u304c\uff0c\u6620\u753b\u6570 x \u30e6\u30fc\u30b6\u6570\u306e2\u6b21\u5143\u30de\u30c8\u30ea\u30af\u30b9\uff08[Y]\uff09\u3067\u3042\u308b\u304c\uff0c\u30e6\u30fc\u30b6\u304c\u3059\u3079\u3066\u306e\u6620\u753b\u306b\u30ec\u30fc\u30c8\u3064\u3051\u308b\u308f\u3051\u3067\u306f\u306a\u3044\u306e\u3067\uff0c\u4e0d\u5b9a\u3068\u306a\u3063\u3066\u3044\u308b\u3068\u3053\u308d\u304c\u591a\u3044\uff0e\u3053\u306e\u4e0d\u5b9a\uff1f\u30de\u30fc\u30af\u306e\u3068\u3053\u308d\u3092\uff0c\u56de\u5e30\u306b\u3088\u3063\u3066\u88dc\u5b8c\u3059\u308b\u3068\u3044\u3046\u306e\u304c\u554f\u984c\u306e\u4e3b\u65e8\u3067\u3042\u308b\uff0e \n\n\u88dc\u5b8c\u3067\u304d\u305f\u30ec\u30fc\u30c6\u30a3\u30f3\u30b0\u306e\u30de\u30c8\u30ea\u30af\u30b9\u304c\u7cbe\u5ea6\u3088\u304f\u8a08\u7b97\u3067\u304d\u308c\u3070\uff0c\u985e\u4f3c\u6620\u753b\u3092\u63a8\u85a6\u3059\u308b\u6b21\u306e\u30d7\u30ed\u30bb\u30b9\u306b\u304a\u3051\u308b\u51e6\u7406\u3082\u4e0a\u624b\u306b\u3067\u304d\u308b\u3068\u3044\u3046\u8aac\u660e\u3067\u3042\u308b\uff0e\n\n## Numpy+Scipy.Optimize\u3067\u5b9f\u88c5\u3057\u3066\u307f\u308b\nCousera\u30b3\u30fc\u30b9\u3067\u306e\u4ed6\u306e\u6f14\u7fd2\u3068\u540c\u69d8\uff0c\u307e\u305a\u30b3\u30b9\u30c8\u95a2\u6570\u3092\u6c42\u3081\u308b\u3068\u3053\u308d\u304b\u3089\u30b9\u30bf\u30fc\u30c8\u3059\u308b\uff0e\u30d1\u30e9\u30e1\u30fc\u30bf\u304c2\u3064\u3042\u308b\u306e\u3067\uff0c\u304b\u306a\u308a\"\u3054\u3064\u3044\"\u5f0f\u3068\u306a\u308b\uff0e\n\n```math\n \\begin{eqnarray}\nJ(x^{(1)},...,x^{n_m},\\theta^{1},...,\\theta^{n_u}) = &\\ & \\frac{1}{2} \\sum_{(i,j):r(i,j)=1} \n(({\\theta}^{(j)})^T \\ x^{(i)} - y^{(i,j)})^2 \\ + \\\\\n&\\ & (\\frac{\\lambda}{2} \\sum_{j=1}^{n_u} \\sum_{k=1}^{n} ({\\theta}_k^{(j)}) ^2)\n +  (\\frac{\\lambda}{2} \\sum_{i=1}^{n_m} \\sum_{k=1}^{n} ({x}_k^{(i)}) ^2)    \n \\end{eqnarray}\n\n```\n \n \u30d1\u30e9\u30e1\u30fc\u30bf[X], [Theta]\u3092\u6301\u3064\u30b3\u30b9\u30c8\u95a2\u6570\u306f\uff0c\u30d1\u30e9\u30e1\u30fc\u30bf\u306e\u30de\u30c8\u30ea\u30af\u30b9\u7a4d\u3067\u6c7a\u307e\u308b\u30ec\u30fc\u30c6\u30a3\u30f3\u30b0\u4e88\u6e2c\u5024\u3068\u30ec\u30fc\u30c6\u30a3\u30f3\u30b0\u5b9f\u30c7\u30fc\u30bf\uff08\u30e9\u30d9\u30eb\uff09\u3068\u306e\u4e8c\u4e57\u8aa4\u5dee\uff0c\u53ca\u3073\u30d1\u30e9\u30e1\u30fc\u30bf\u306eregularization\u9805\u304b\u3089\u6210\u308b\uff0e\u3053\u308c\u3092Python\u306e\u30b3\u30fc\u30c9\u306b\u76f4\u3059\u3068\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u306a\u308b\uff0e\n\n\n```py\ndef cofi_costfunc(Y, R, shapes, lambda_c, params):\n    #  [J, grad] = COFICOSTFUNC(params, Y, R, num_users, num_movies, ...\n    #   num_features, lambda) returns the cost and gradient for the\n    #   collaborative filtering problem.\n    num_users = shapes[0]\n    num_movies = shapes[1]\n    num_features = shapes[2]\n    boundary = num_movies * num_features\n    params_c1 = np.copy(params[:boundary])\n    params_c2 = np.copy(params[boundary:])\n    X = params_c1.reshape((num_movies, num_features))\n    Theta = params_c2.reshape((num_users, num_features))\n           \n    # You need to return the following values correctly\n    Jcost = 0.5 * (((np.dot(X, Theta.T) - Y) * R) ** 2).sum() \\\n        + 0.5 * lambda_c * ((X.ravel() **2).sum() + (Theta.ravel() **2).sum())\n\n    return Jcost\n\n```\n\n\u30d1\u30e9\u30e1\u30fc\u30bf`X`\uff08\u6620\u753b\u5185\u5bb9\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\uff09, `Theta`\uff08\u30e6\u30fc\u30b6\u6307\u5411\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\uff09\u306f\uff0c\u4e00\u3064\u306e\u304b\u305f\u307e\u308a`params`\u3067\u5165\u529b\u3055\u308c\u308b\uff0e`Y`\u306f\uff0c\u6620\u753b\u6570 x \u30e6\u30fc\u30b6\u6570\u306e\u5f62\u306e\u30ec\u30fc\u30c6\u30a3\u30f3\u30b0\u30fb\u30c7\u30fc\u30bf\uff0e`R`\u306f\uff0c`Y`\u540c\u3058\u30b5\u30a4\u30ba\u3067\uff0c\u30ec\u30fc\u30c6\u30a3\u30f3\u30b0\u304c\u3064\u3051\u308c\u3066\u3044\u308b\u3068\u304d\u306b1\uff0c\u30ec\u30fc\u30c7\u30a3\u30f3\u30b0\u304c\u307e\u3060\u306a\u3044\u5834\u5408\u306b0\u304c\u30bb\u30c3\u30c8\u3055\u308c\u308b\uff0c\u30d0\u30a4\u30ca\u30ea\u30fc\u306e\u30c7\u30fc\u30bf\uff0e\uff08\u30d7\u30ed\u30b0\u30e9\u30e0\u306e\u5909\u6570\u578b\u3068\u3057\u3066\u306f, \u6574\u6570\u578b\u3067\u6271\u3063\u3066\u3044\u307e\u3059\uff0e\uff09\u524d\u51e6\u7406\u306e\u5f8c\uff0c\u4e0a\u8ff0\u306e\u30b3\u30b9\u30c8\u95a2\u6570\u5f0f\u306b\u5bfe\u5fdc\u3057\u3066\u30b3\u30b9\u30c8\u3092\u6c42\u3081\u3066\u3044\u308b\u306e\u304c\u6700\u5f8c\u306e\u30b9\u30c6\u30fc\u30c8\u30e1\u30f3\u30c8\u3067\u3042\u308b\uff0e\n\n\u6b21\u306b\u3053\u306e\u30b3\u30b9\u30c8\u95a2\u6570\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\uff08x\uff0ctheta\uff09\u306b\u95a2\u3059\u308b\u504f\u5fae\u5206\u4fc2\u6570\uff08\u52fe\u914d\uff09\u306e\u5f0f\u3067\u3042\u308b\uff0e\n\n```math\n\\frac{\\partial J}{\\partial x_k^{(i)}} = \\sum_{j:r(i,j)=1} (( {\\theta}^{(j)})^T x^{(i)} \n- y^{(i,j)} ) {\\theta}_k^{(j)} + \\lambda x_k^{(i)}\\\\\n\n\\frac{\\partial J}{\\partial {\\theta}_k^{(j)}} = \\sum_{i:r(i,j)=1} (( {\\theta}^{(j)})^T x^{(i)} \n- y^{(i,j)} ) {x}_k^{(i)} + \\lambda {\\theta}_k^{(j)}\n\n```\n\n\u3053\u3061\u3089\u3082\u305d\u308c\u306a\u308a\u306b\"\u3054\u3064\u3044\"\u6570\u5f0f\u3067\u3042\u308b\uff0e\u3057\u304b\u3057\uff0c\u30b3\u30fc\u30c9\u306b\u76f4\u3059\u3068\u7406\u89e3\u3057\u3084\u3059\u3044\uff0e\n\n```py\ndef cofi_costfunc_grad(Y, R, shapes, lambda_c, params):\n    #  [J, grad] = COFICOSTFUNC(params, Y, R, num_users, num_movies, ...\n    #   num_features, lambda) returns the cost and gradient for the\n    #   collaborative filtering problem.\n    num_users = shapes[0]\n    num_movies = shapes[1]\n    num_features = shapes[2]\n    boundary = num_movies * num_features\n    params_c1 = np.copy(params[:boundary])\n    params_c2 = np.copy(params[boundary:])\n    X = params_c1.reshape((num_movies, num_features))\n    Theta = params_c2.reshape((num_users, num_features))\n           \n    # You need to return the following values correctly  \n    X_grad = np.dot(((np.dot(X, Theta.T) - Y) * R), Theta) + lambda_c * X\n    Tgsub = (np.dot(X, Theta.T) - Y) * R\n    Theta_grad = np.dot(Tgsub.T, X) + lambda_c * Theta\n    Jgrad = np.concatenate((X_grad.ravel(), Theta_grad.ravel()))\n\n    return Jgrad\n\n```\n\n\u5f8c\u534a\u306e4\u884c\u306b\u3066\uff0c\u30b3\u30b9\u30c8\u52fe\u914d\u3092\u7b97\u51fa\u3057\u3066\u3044\u308b\uff0e  \n\nCoursera\u306e\u6f14\u7fd2\u3067\u306f\uff0c\u30b3\u30b9\u30c8\u6700\u5c0f\u5316\u306e\u6700\u9069\u5316\u30d7\u30ed\u30bb\u30b9\u3092\uff0c\u4e8b\u524d\u306b\u7528\u610f\u3057\u3066\u63d0\u4f9b\u3055\u308c\u308b `fmincg.m` \u306e\u95a2\u6570\u3092\u7528\u3044\u3066\u884c\u3063\u3066\u3044\u308b\uff0ePython\u306b\u76f4\u3059\u5834\u5408\u306f\u540c\u69d8\u306e\u51e6\u7406\u3092 scipy.optimize.minimize() \u3067\u884c\u3046\u3053\u3068\u304c\u3067\u304d\u308b\uff0e\n\n```py\n# \nimport scipy.optimize as spopt\n\n# \u30d1\u30e9\u30e1\u30fc\u30bf\u306e\u521d\u671f\u5024\u3092\u30bb\u30c3\u30c8\ntheta_ini = np.concatenate((X.flatten(), Theta.flatten()))\n\n# wrapper \u95a2\u6570\u3092\u7528\u610f\ndef compute_cost_sp(theta):\n    global Y, R, shapes, lambda_c\n    j =  cofi_costfunc(Y, R, shapes, lambda_c, params=theta)\n\n    return j\n\ndef compute_grad_sp(theta):\n    global Y, R, shapes, lambda_c\n    j_grad = cofi_costfunc_grad(Y, R, shapes, lambda_c, params=theta)\n\n    return j_grad\n\n# scipy.optimize.minimize \u306e\u30aa\u30d7\u30b7\u30e7\u30f3\u3092\u30bb\u30c3\u30c8\noptions = {'gtol': 1.e-6, 'disp': True}\n# Regularization\u4fc2\u6570\nlambda_c = 1.5\n\nres1 = spopt.minimize(compute_cost_sp, theta_ini, method='CG', \\\n         jac=compute_grad_sp, options=options)\ntheta =  res1.x\n\n# \u3072\u3068\u304b\u305f\u307e\u308a\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u3092X\u3068Theta\u306b\u5206\u89e3\nX = theta[:num_movies*num_features].reshape((num_movies, num_features))\nTheta = theta[num_movies*num_features:].reshape((num_users, num_features))\n\n```\n\nscipy.optimize.minimize \u306e\u8a73\u7d30\u306b\u3064\u3044\u3066\u306f\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u3092\u53c2\u7167\u3057\u3066\u3044\u305f\u3060\u304d\u305f\u3044\u304c\uff0c\u6700\u9069\u5316\u624b\u6cd5\u3068\u3057\u3066\u3044\u308d\u3044\u308d\u306a\u3082\u306e\u3092\u9078\u629e\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u308b\uff0e\u4eca\u56de\u306f\u5143\u30cd\u30bf\uff08fmincg.m\uff09\u306b\u5408\u308f\u305b `method='CG'` (Conjugate gradient method) \u3068\u3057\u305f\uff0e\n\n\u3053\u306e\u3088\u3046\u306b\u30b3\u30b9\u30c8\u6700\u5c0f\u5316\u3092\u884c\u3063\u3066\u6c42\u3081\u305f\u30d1\u30e9\u30e1\u30fc\u30bf [X], [Theta] \u304b\u3089\uff0c\u5fc5\u8981\u306a\u60c5\u5831\uff08ex. \u300c\u3053\u306e\u6620\u753b\u306b\u9ad8\u3044\u8a55\u4fa1\u3092\u3057\u305f\u4eba\u306f\uff0c\u5225\u306e\u3053\u306e\u6620\u753b\u306e\u8a55\u4fa1\u3082\u9ad8\u3044\u3067\u3059\uff0e\u300d\uff09\u3092\u53d6\u308a\u51fa\u3059\u306e\u304c\u63a8\u85a6\u30b7\u30b9\u30c6\u30e0\u306e\u51e6\u7406\u3068\u306a\u308b\uff0e\uff08\u985e\u4f3c\u5ea6\u3092\u6e2c\u308b\u3084\u308a\u65b9\u306b\u3044\u308d\u3044\u308d\u3042\u308b\u3088\u3046\u3067\u3059\u304c\uff0c\u3053\u3053\u3067\u306f\u8aac\u660e\u3092\u7701\u7565\u3044\u305f\u3057\u307e\u3059\uff0e\uff09\n\n## TensorFlow\u3092\u4f7f\u3046\n\u6628\u5e74(2015\u5e74)\u306bTensorFlow\u304c\u516c\u958b\u3055\u308c\u3066\u304b\u3089\u7d04\u4e00\u5e74\u304c\u7acb\u3064\uff0e\u308f\u304f\u308f\u304f\u3057\u306a\u304c\u3089\u30b3\u30fc\u30c9\u3092\u4f5c\u6210\u3057\uff0c\u6025\u3044\u3067Qiita\u6295\u7a3f\u8a18\u4e8b\u3092\u66f8\u3044\u305f\u8a18\u61b6\u304c\u3042\u308b\uff0e\u4eca\u56de\uff0c\u5354\u8abf\u30d5\u30a3\u30eb\u30bf\u30ea\u30f3\u30b0\u306e\u5b66\u7fd2\u3092\u3088\u308a\u9ad8\u901f\u306a\u51e6\u7406\u3067\u5b9f\u884c\u3055\u305b\u308b\u306b\u3042\u305f\u308a\uff0cTensorFlow\u3092\u4f7f\u3046\u3053\u3068\u306b\u3057\u305f\uff0e\n\n\u901a\u5e38\u306e\u300c\u6559\u5e2b\u3042\u308a\u5b66\u7fd2\u300d\u3067\u3042\u308c\u3070\uff0c\u5165\u529b-\u51fa\u529b\u306e\u95a2\u4fc2\u304c\u660e\u78ba\u306a\u306e\u3067\uff0cTensorFlow\u306e\u30b0\u30e9\u30d5\u8868\u73fe\u306b\u8ff7\u3046\u3053\u3068\u306f\u306a\u3044\u306e\u3060\u304c\uff0c\u4eca\u56de\u306f\u5c11\u3057\u96e3\u3057\u304b\u3063\u305f\uff0e\n\n- \u901a\u5e38\u306e\u554f\u984c\u3067\uff0c\u91cd\u307f w\uff0c\u30d0\u30a4\u30a2\u30b9 b \u306b\u3042\u305f\u308b\u3082\u306e ... \u4eca\u56de\u306f \u6620\u753b\u5185\u5bb9\u306e\u30d1\u30e9\u30e1\u30fc\u30bf x \u3068\u30e6\u30fc\u30b6\u306e\u597d\u307f\u306e\u30d1\u30e9\u30e1\u30fc\u30bf Theta\uff0e\n- \u901a\u5e38\u306e\u554f\u984c\u3067\uff0c\u6559\u5e2b\u30c7\u30fc\u30bf\u306b\u3042\u305f\u308b\u3082\u306e ... \u4eca\u56de\u306f\uff0c\u4e8b\u524d\u306b\u30e6\u30fc\u30b6\u304c\u3064\u3051\u305f\u30ec\u30fc\u30c6\u30a3\u30f3\u30b0\u306e\u60c5\u5831\uff0e\u5177\u4f53\u7684\u306b\u306f\uff0c\u30c7\u30fc\u30bf Y\uff08\u30e6\u30fc\u30b6\u304c\u6620\u753b\u306b\u3064\u3051\u305f\u30ec\u30fc\u30c6\u30a3\u30f3\u30b0\u3092\u5305\u6709\u3059\u308b \u6620\u753b\u6570 x \u30e6\u30fc\u30b6\u6570\u306e\u30de\u30c8\u30ea\u30af\u30b9\uff09\u3068 R\uff08\u30e6\u30fc\u30b6\u304c\u30ec\u30fc\u30c6\u30a3\u30f3\u30b0\u3092\u3057\u305f\u304b\uff0f\u3057\u3066\u3044\u306a\u3044\u304b\u3092\u793a\u3059\u30d0\u30a4\u30ca\u30ea\u30fc\u30c7\u30fc\u30bf\uff09\uff0e\n\n\u3088\u3063\u3066\uff0c\u5909\u6570\u6e96\u5099\u306e\u30b3\u30fc\u30c9\u306f\u6b21\u306e\u3088\u3046\u306a\u3082\u306e\u3068\u3057\u305f\uff0e\n\n```py\n# Parameter definition\n    if WARM_START:\n        data_param = load_data(fn='./data/ex8_movieParams.mat')\n        X_np = data_param['X'].astype(np.float32)\n        Theta_np = data_param['Theta'].astype(np.float32)\n        x = tf.Variable(X_np)\n        theta = tf.Variable(Theta_np)\n    else:   # COLD START\n        x = tf.Variable(tf.random_normal([num_movies, num_features],\n            mean=0.0, stddev=0.05))\n        theta = tf.Variable(tf.random_normal([num_users, num_features],\n            mean=0.0, stddev=0.05))\n# Placeholders\n    Y_ph = tf.placeholder(tf.float32, shape=[None, num_users])\n    R_ph = tf.placeholder(tf.float32, shape=[None, num_users])\n\n```\n\nCoursera\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u6f14\u7fd2\u3067\uff0c\u3042\u308b\u7a0b\u5ea6\u306e\u4e8b\u524d\u5b66\u7fd2\u304c\u884c\u308f\u308c\u3066\u3044\u305f\u30d1\u30e9\u30e1\u30fc\u30bf\u306e\u30c7\u30fc\u30bf\u304c\u63d0\u4f9b\u3055\u308c\u3066\u3044\u308b\u306e\u3067\uff0c\u305d\u308c\u3092\u7528\u3044\u308b 'WARM_START' \u306e\u30aa\u30d7\u30b7\u30e7\u30f3\u3068\u30bc\u30ed\u304b\u3089\u306e\u30b9\u30bf\u30fc\u30c8\u3092\u884c\u3046\u30aa\u30d7\u30b7\u30e7\u30f3\u3092\u7528\u610f\u3057\u305f\uff0e'WARM_START' \u3067\u306f\uff0cnumpy.array \u306e\u30c7\u30fc\u30bf\u3092\u305d\u306e\u307e\u307e `tf.Variable()` \u306b\u6e21\u3059\u3060\u3051\uff0c\u30bc\u30ed\u30b9\u30bf\u30fc\u30c8\u306e\u5834\u5408\u306f\uff0c\u5c0f\u3055\u3044\u5024\u3068\u306a\u308b\u4e71\u6570\u3092\u767a\u751f\u3055\u305b\u3066x\uff0ctheta\u306b\u30bb\u30c3\u30c8\u3059\u308b\uff0e\u307e\u305f\uff0c\u6559\u5e2b\u30c7\u30fc\u30bf\u306eplaceholder\u306f\uff0c\u5fc5\u8981\u306ashape\u306e\u3082\u306e\u3092\u7528\u610f\u3057\u305f\uff0e\n\uff08`shape=[None, num_users]` \u306f\uff0c`shape=[num_movies, num_users]`\u3067\u3082\u554f\u984c\u306a\u3044\u3068\u601d\u3044\u307e\u3059\u304c\uff0cTensorFlow\u306e\u6163\u4f8b\u306b\u5f93\u3044`None`\u3068\u3057\u3066\u3044\u307e\u3059\uff0e\uff09\n\n\u6b21\u306b\u30b3\u30b9\u30c8\u95a2\u6570\u306e\u8a08\u7b97\u3092\u5b9a\u7fa9\u3059\u308b\uff0e\n\n```py\ndef Ypred(X, Theta):\n    '''\n      calculate rating with parameter X and Theta\n      args.:\n        X:      movie contents parameter\n        Theta:  user characteristic parameter\n    '''\n    feat_dim1 = tf.shape(X)[1]\n    feat_dim2 = tf.shape(Theta)[1]\n\n    tf.assert_equal(feat_dim1, feat_dim2)\n    rating = tf.matmul(X, tf.transpose(Theta))\n\n    return rating\n\n\n# Cost Function, etc.\n    cost = tf.reduce_sum(((Ypred(x, theta) - Y_ph) * R_ph) ** 2)\n    L2_sqr = tf.nn.l2_loss(x) + tf.nn.l2_loss(theta)\n    lambda_c = 1.0      # L2 norm coefficient      \n    loss = cost + lambda_c * L2_sqr\n\n```\n\nTensorFlow\u3060\u3051\u3067\u306f\u306a\u3044\u304c\uff0cDeep Learning\u30d5\u30ec\u30fc\u30e0\u30ef\u30fc\u30af\u306e\u4fbf\u5229\u306a\u3068\u3053\u308d\u306fGradient\u3092\u81ea\u52d5\u8a08\u7b97\u3057\u3066\u304f\u308c\u308b\u3068\u3053\u308d\u3067\u3042\u308b\uff0e\u4e0a\u8a18\u306e\u3088\u3046\u306b\u30b3\u30b9\u30c8\u95a2\u6570\u306e\u307f\u306e\u5b9a\u7fa9\u3067\u6e08\u3080\u306e\u304c\u300c\u3048\u3089\u3044\u300d\u3068\u611f\u3058\u308b\uff0e\u3053\u306e\u5f8c\uff0c\u4f8b\u306b\u3088\u3063\u3066\u30aa\u30d7\u30c6\u30a3\u30de\u30a4\u30b6\u3092\u30bb\u30c3\u30c8\u3057\u3066\u5b66\u7fd2\u30eb\u30fc\u30d7\u3068\u306a\u308b\uff0e\n\n```py\n    lr = 1.e-5\n    train_step = tf.train.GradientDescentOptimizer(lr).minimize(loss)\n    init_op = tf.initialize_all_variables()\n\n    # Train\n    with tf.Session() as sess:\n        sess.run(init_op)\n\n        for i in range(10001):\n            sess.run(train_step, feed_dict={Y_ph: Y_np, R_ph: Y_np})\n        \n            if i % 1000 == 0:\n                loss_mon = loss.eval({Y_ph: Y_np, R_ph: Y_np})\n                print(' step, loss = {:6d}: {:10.1f}'.format(i, loss_mon))\n\n        # evaluate ranking with final parameters\n        ymat = Ypred(x, theta).eval()\n        sio.savemat('./ymat_tf.mat', {'Y': ymat})\n        print('ymat is saved to \"ymat_tf.mat\".')\n\n```\n\n\u5225\u306b `tf.train.GradientDescentOptimizer()` \u3067\u306a\u304f\u3066\u3082\u597d\u304d\u306a\u30aa\u30d7\u30c6\u30a3\u30de\u30a4\u30b6\u3092\u4f7f\u3048\u3070\u3044\u3044\u3068\u601d\u3046\u304c\uff0c\u4eca\u56de\u306f Cousera \u306e\u8ab2\u984c\u3068\u3044\u3046\u3053\u3068\u3067\uff0c\u57fa\u672c\u7684\u306a\u95a2\u6570\u3092\u7528\u3044\u3066\u307f\u305f\uff0e\u5b66\u7fd2\u7387\u306e\u8abf\u6574\u306b\u3084\u3084\u624b\u9593\u304c\u304b\u304b\u308b\u304c\uff0c\u7121\u4e8b\u306b\uff08gpu\u6f14\u7b97\u3067\u9ad8\u901f\u306b\uff09\u8a08\u7b97\u3092\u884c\u3046\u3053\u3068\u304c\u3067\u304d\u305f\uff0e\n\n## \u7d50\u679c\u6bd4\u8f03\n\u540c\u3058\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u3067\u89e3\u3044\u3066\u3044\u308b\u306e\u3067\uff0cscipy.optimize.minimize \u306b\u3088\u308b\u3082\u306e\u3068TensorFlow\u306b\u3088\u308b\u7d50\u679c\u306f\u540c\u69d8\u306a\u3082\u306e\u3068\u306a\u308b\u306f\u305a\u3067\u3042\u308b\uff0e\u4eca\u56de\u306f\uff0c\u6c42\u3081\u305f\u30d1\u30e9\u30e1\u30fc\u30bf(X, Theta) \u304b\u3089\u30ec\u30fc\u30c6\u30a3\u30f3\u30b0\u30fb\u30de\u30c8\u30ea\u30af\u30b9 Y \u3092\u8a08\u7b97\u3057\u3053\u308c\u3092Heatmap\u56f3\u306e\u3088\u3046\u306b\u3057\u3066\u307f\u305f\uff0e\uff08\u9752\uff1a\u4f4e\u3044\u30ec\u30fc\u30c8 \u301c \u8d64\uff1a\u9ad8\u3044\u30ec\u30fc\u30c8\uff09\n\n### By scipy.optimize.minimize\n![heatmap_sp.png](https://qiita-image-store.s3.amazonaws.com/0/74152/86939da6-58a8-6f4d-941c-f2759c8790c4.png)\n\n### By TensorFLow\n![heatmap_tf.png](https://qiita-image-store.s3.amazonaws.com/0/74152/541c49ed-5866-4eab-73ff-881b04e361db.png)\n\n\n\u8a73\u7d30\u90e8\u306b\u8272\u306e\u6fc3\u6de1\u306a\u3069\u306e\u9055\u3044\u304c\u898b\u3089\u308c\u308b\u304c\uff0c\u5927\u304d\u306a\u30d1\u30bf\u30fc\u30f3\u3068\u3057\u3066\u306f\u540c\u69d8\u306a\u3082\u306e\u306b\u898b\u308b\u3053\u3068\u304c\u3067\u304d\u308b\uff0e\u8a08\u7b97\u30d7\u30ed\u30bb\u30b9\u3068\u3057\u3066\u306f\uff0c\u554f\u984c\u306a\u3057\u3068\u601d\u308f\u308c\u308b\uff0e\n\n\u4e21\u8005\u306e\u9055\u3044\u3092\u57cb\u3081\u3088\u3046\u3068\u3059\u308b\u306a\u3089\uff0cRegularization\uff0c\u5b66\u7fd2\u7387\uff0c\u53ce\u675f\u72b6\u6cc1\u7b49\uff0c\u7d30\u304b\u3044\u3068\u3053\u308d\u3092\u8abf\u6574\u3059\u308b\u5fc5\u8981\u304c\u3042\u308b\uff0e\u300c\u5354\u8abf\u30d5\u30a3\u30eb\u30bf\u30ea\u30f3\u30b0\u3092\u5b66\u3076\u300d\u3092\u3044\u3046\u76ee\u7684\u3067\u306f\u4ee5\u4e0a\u306e\u5185\u5bb9\u3067OK\u3068\u601d\u3046\u304c\uff0cKaggle\u7b49\u30b3\u30f3\u30da\u3067\u6226\u3046\u305f\u3081\u306b\u306f\uff0c\u3044\u308d\u3044\u308d\u8a73\u7d30\u3092\u691c\u8a0e\u3057\u306a\u3051\u308c\u3070\u306a\u3089\u306a\u3044\u3060\u308d\u3046\uff0e\n\n\uff08\u4eca\u56de\u7528\u3044\u305f\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u74b0\u5883\u306f\uff0c\u6b21\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3059\uff0ePython 3.5.2, Numpy 1.11.2, Scipy 0.18.1, TensorFlow 0.11.0 )\n\uff08\u30b3\u30fc\u30c9\u3092Gist\u306bUp\u3057\u307e\u3057\u305f\uff1a https://gist.github.com/tomokishii/2e9f83d391df82f25942c1310b41e0b5 \uff09\n\n## \u53c2\u8003\u6587\u732e\uff0cweb site\n- Cousera, Machine Learning, by Prof.Andrew Ng\uff08\u6bce\u9031\uff0c\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u8ab2\u984c\u306e\u8aac\u660e\u66f8/PDF\u304c\u914d\u5e03\u3055\u308c\u307e\u3059\uff0e\u53d7\u8b1b\u7d42\u4e86\u5f8c\u3082\u30b5\u30a4\u30c8\u306b\u3066\uff0c\u6559\u6750\u30d3\u30c7\u30aa\uff0c\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u6f14\u7fd2\u306e\u95a2\u9023\u30d5\u30a1\u30a4\u30eb\u306b\u30a2\u30af\u30bb\u30b9\u53ef\u80fd\u3067\u3059\uff0e\uff09\n- \u30c7\u30fc\u30bf\u30b5\u30a4\u30a8\u30f3\u30c6\u30a3\u30b9\u30c8\u990a\u6210\u8aad\u672c\uff0c\u6a5f\u68b0\u5b66\u7fd2\u5165\u9580\u7de8(\u7b2c2\u90e8\u7279\u96c63)\uff0c\u63a8\u85a6\u30b7\u30b9\u30c6\u30e0\u5165\u9580  \nhttp://gihyo.jp/book/2015/978-4-7741-7631-4\n- python\u3067\u30a2\u30a4\u30c6\u30e0\u30d9\u30fc\u30b9\u5354\u8abf\u30d5\u30a3\u30eb\u30bf\u30ea\u30f3\u30b0\u3092\u5b9f\u88c5\u3059\u308b - MovieLens\u3092\u4f8b\u306b - Qiita  \nhttp://qiita.com/kotaroito/items/6acb58bb16b68a460af9\n- \u5b9f\u8df5 \u6a5f\u68b0\u5b66\u7fd2\u30b7\u30b9\u30c6\u30e0 - \u30aa\u30e9\u30a4\u30ea\u30fc\u30fb\u30b8\u30e3\u30d1\u30f3\uff0c8\u7ae0\u3000\u56de\u5e30\uff1a\u30ec\u30b3\u30e1\u30f3\u30c9\u306e\u6539\u826f  \nhttp://www.oreilly.co.jp/books/9784873116983/\n- Scipy Documentation  \nhttps://docs.scipy.org/doc/scipy-0.18.1/reference/generated/scipy.optimize.minimize.html\n\n\n", "tags": ["Python", "MachineLearning", "\u6a5f\u68b0\u5b66\u7fd2", "coursera", "TensorFlow"]}