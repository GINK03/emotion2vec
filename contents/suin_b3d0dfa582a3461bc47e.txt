{"tags": ["PHP", "\u30c9\u30e1\u30a4\u30f3\u99c6\u52d5\u8a2d\u8a08", "DDD", "IDDD"], "context": " \u3053\u306e\u8a18\u4e8b\u306f\u6700\u7d42\u66f4\u65b0\u65e5\u304b\u30891\u5e74\u4ee5\u4e0a\u304c\u7d4c\u904e\u3057\u3066\u3044\u307e\u3059\u3002<?php\ntrait EventSourcedRootEntity\n{\n    /**\n     * @var DomainEvent[]\n     */\n    private $mutatingEvents = [];\n\n    public function apply(DomainEvent $event)\n    {\n        $this->mutatingEvents[] = $event;\n        $this->mutateWhen($event);\n    }\n\n    private function mutateWhen(DomainEvent $domainEvent)\n    {\n        $eventType = (new \\ReflectionClass($domainEvent))->getShortName();\n        $mutatorMethodName = 'when'.$eventType;\n\n        if (method_exists($this, $mutatorMethodName) === false) {\n            throw new \\RuntimeException(\n                sprintf(\"Method %s() does not exist\", $mutatorMethodName)\n            );\n        }\n\n        try {\n            $mutatorMethod = new \\ReflectionMethod($this, $mutatorMethodName);\n            $mutatorMethod->setAccessible(true);\n            $mutatorMethod->invoke($this, $domainEvent);\n        } catch (\\ReflectionException $e) {\n            throw new \\RuntimeException(\n                sprintf(\"Method %s() failed\", $mutatorMethodName), null, $e\n            );\n        }\n    }\n}\n\n\n```php\n<?php\ntrait EventSourcedRootEntity\n{\n    /**\n     * @var DomainEvent[]\n     */\n    private $mutatingEvents = [];\n    \n    public function apply(DomainEvent $event)\n    {\n        $this->mutatingEvents[] = $event;\n        $this->mutateWhen($event);\n    }\n    \n    private function mutateWhen(DomainEvent $domainEvent)\n    {\n        $eventType = (new \\ReflectionClass($domainEvent))->getShortName();\n        $mutatorMethodName = 'when'.$eventType;\n        \n        if (method_exists($this, $mutatorMethodName) === false) {\n            throw new \\RuntimeException(\n                sprintf(\"Method %s() does not exist\", $mutatorMethodName)\n            );\n        }\n        \n        try {\n            $mutatorMethod = new \\ReflectionMethod($this, $mutatorMethodName);\n            $mutatorMethod->setAccessible(true);\n            $mutatorMethod->invoke($this, $domainEvent);\n        } catch (\\ReflectionException $e) {\n            throw new \\RuntimeException(\n                sprintf(\"Method %s() failed\", $mutatorMethodName), null, $e\n            );\n        }\n    }\n}\n```"}