{"context": " More than 1 year has passed since last update.Gradle\u3068Maven\u306e\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u306b\u4f7f\u3048\u307e\u3059\u3002\nGradle\u306e\u5834\u5408\u3001gradlewrapper\u3092\u4f7f\u3044\u307e\u3059\u3002\n#!/bin/bash\n\necho \"prepush called\"\n\nDIR=$PWD\nROOT=$PWD/`git rev-parse --show-cdup`\nROOT=${ROOT%/}\nresult=0\n\n#dryRun\nfunction dryRun(){\n  local result=0\n  pushMessage=`git push --dry-run --no-verify 2>&1`\n  result=$?\n\n  if [ $result -eq 0 ]; then\n    if echo $pushMessage | grep -e \"^Everything.\\+\" > /dev/null 2>&1; then\n      result=1\n    fi\n  else\n    if echo $pushMessage | grep -e \"has no upstream branch\" > /dev/null 2>&1; then\n      result=0\n    fi\n  fi\n\n  if [ $result -ne 0 ]; then\n    echo $pushMessage 1>&2\n  fi\n  return $result\n}\n\n# status check\nfunction isReadyToPush(){\n  local _test=`git submodule foreach \"git status|grep 'nothing to commit, working directory clean'\"`\n  local _expect=`git submodule foreach \"git status|echo 'nothing to commit, working directory clean'\"`\n  if [ \"$_test\" != \"$_expect\" ] ; then\n    echo \"[error] submodule has uncommitted changes.\" 1>&2\n    return 1\n  fi\n  _test=`git submodule foreach \"git log --remotes --oneline -1|sed -e 's/ .\\+//g'\"`\n  _expect=`git submodule foreach \"git reflog -1|grep 'HEAD@{0}'|sed -e 's/ HEAD.\\+//g'\"`\n  if [ \"$_test\" != \"$_expect\" ] ; then\n    echo \"[warn] submodule has unpushed or unpulled changes.\" 1>&2\n    return 0\n  fi\n  return 0\n}\n\n# gradle\nfunction forGradle(){\n  if [ -f \"${ROOT}/gradlew\" ]; then\n    cd $ROOT\n    echo \"${ROOT}/gradlew found. start gradle test\"\n    chmod +x ./gradlew\n    ./gradlew clean test 2>&1 >/dev/null;result=$?\n    cd $DIR\n    return 0\n  fi\n  return 1\n}\n\n# maven\nfunction forMaven(){\n  if [ -f \"${ROOT}/pom.xml\" ]; then\n    cd $ROOT\n    echo \"${ROOT}/pom.xml found. start mvn test\"\n    mvn clean test 2>&1 >/dev/null;result=$?\n    cd $DIR\n  fi\n}\n\n# -------------------------\n# entry point\n# -------------------------\ndryRun\nif [ $? -eq 0 ]; then\n  isReadyToPush\n  if [ $? -eq 0 ]; then\n    forGradle\n    if [ $? -ne 0 ]; then\n      forMaven\n    fi\n  else\n    exit 1\n  fi\nelse\n  exit 1\nfi\n\nif [ $result -ne 0 ]; then\n  echo \"test error!\"\n  echo \"push rejected!\"\n  exit 1\nelse\n  echo \"Test ends successfully\"\nfi\n\necho \"push start\"\nexit 0\n\nGradle\u3068Maven\u306e\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u306b\u4f7f\u3048\u307e\u3059\u3002\n\nGradle\u306e\u5834\u5408\u3001gradlewrapper\u3092\u4f7f\u3044\u307e\u3059\u3002\n\n```bash\n#!/bin/bash\n\necho \"prepush called\"\n\nDIR=$PWD\nROOT=$PWD/`git rev-parse --show-cdup`\nROOT=${ROOT%/}\nresult=0\n\n#dryRun\nfunction dryRun(){\n  local result=0\n  pushMessage=`git push --dry-run --no-verify 2>&1`\n  result=$?\n\n  if [ $result -eq 0 ]; then\n    if echo $pushMessage | grep -e \"^Everything.\\+\" > /dev/null 2>&1; then\n      result=1\n    fi\n  else\n    if echo $pushMessage | grep -e \"has no upstream branch\" > /dev/null 2>&1; then\n      result=0\n    fi\n  fi\n\n  if [ $result -ne 0 ]; then\n    echo $pushMessage 1>&2\n  fi\n  return $result\n}\n\n# status check\nfunction isReadyToPush(){\n  local _test=`git submodule foreach \"git status|grep 'nothing to commit, working directory clean'\"`\n  local _expect=`git submodule foreach \"git status|echo 'nothing to commit, working directory clean'\"`\n  if [ \"$_test\" != \"$_expect\" ] ; then\n    echo \"[error] submodule has uncommitted changes.\" 1>&2\n    return 1\n  fi\n  _test=`git submodule foreach \"git log --remotes --oneline -1|sed -e 's/ .\\+//g'\"`\n  _expect=`git submodule foreach \"git reflog -1|grep 'HEAD@{0}'|sed -e 's/ HEAD.\\+//g'\"`\n  if [ \"$_test\" != \"$_expect\" ] ; then\n    echo \"[warn] submodule has unpushed or unpulled changes.\" 1>&2\n    return 0\n  fi\n  return 0\n}\n\n# gradle\nfunction forGradle(){\n  if [ -f \"${ROOT}/gradlew\" ]; then\n    cd $ROOT\n    echo \"${ROOT}/gradlew found. start gradle test\"\n    chmod +x ./gradlew\n    ./gradlew clean test 2>&1 >/dev/null;result=$?\n    cd $DIR\n    return 0\n  fi\n  return 1\n}\n\n# maven\nfunction forMaven(){\n  if [ -f \"${ROOT}/pom.xml\" ]; then\n    cd $ROOT\n    echo \"${ROOT}/pom.xml found. start mvn test\"\n    mvn clean test 2>&1 >/dev/null;result=$?\n    cd $DIR\n  fi\n}\n\n# -------------------------\n# entry point\n# -------------------------\ndryRun\nif [ $? -eq 0 ]; then\n  isReadyToPush\n  if [ $? -eq 0 ]; then\n    forGradle\n    if [ $? -ne 0 ]; then\n      forMaven\n    fi\n  else\n    exit 1\n  fi\nelse\n  exit 1\nfi\n\nif [ $result -ne 0 ]; then\n  echo \"test error!\"\n  echo \"push rejected!\"\n  exit 1\nelse\n  echo \"Test ends successfully\"\nfi\n\necho \"push start\"\nexit 0\n```\n", "tags": ["gradle", "Maven", "Git1.8.4"]}