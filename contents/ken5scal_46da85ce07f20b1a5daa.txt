{"tags": ["Android", "Security", "\u6697\u53f7", "\u30bb\u30ad\u30e5\u30ea\u30c6\u30a3"], "context": "\u3053\u306e\u8a18\u4e8b\u306fAndroid\u30a2\u30c9\u30d9\u30f3\u30c8\u30ab\u30ec\u30f3\u30c0\u30fc 24\u65e5\u306e\u8a18\u4e8b\u3067\u3059\u3002\u4e00\u4f53\u3001\u4f55\u304c\u60b2\u3057\u304f\u3066\u8056\u591c\u306b\u6280\u8853\u30a8\u30f3\u30c8\u30ea\u30fc\u3092\u66f8\u304b\u306a\u3044\u3068\u3044\u3051\u306a\u3044\u306e\u3067\u3057\u3087\u3046\u3002\u6094\u3057\u3044\u306e\u3067\u3001\u304a\u5805\u305d\u3046\u306a\u540d\u524d\u3057\u3066\u3044\u308bConceal\u30e9\u30a4\u30d6\u30e9\u30ea\u306e\u4e2d\u8eab\u3092\u8aad\u307f\u8fbc\u3093\u3067\u3001\u4e38\u88f8\u306b\u3057\u3066\u3084\u308b\u3053\u3068\u306b\u3057\u307e\u3057\u305f\u3002\n\n\u4f7f\u3044\u65b9\u306b\u3064\u3044\u3066\u306f\u3001\u3053\u3061\u3089\u306e\u8a18\u4e8b\u3092\u53c2\u7167\u3044\u305f\u3060\u304f\u3068\u3044\u3044\u3068\u601d\u3044\u307e\u3059\u3002\n\n\nConceal\u3068\u306f\n\n\nFacebook\u304c\u958b\u767a\u3057\u305f\u30e9\u30a4\u30d6\u30e9\u30ea\u3067\u3059\u3002\u5171\u901a\u9375\u6697\u53f7\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0 AES(256bit)\u3068\u6697\u53f7\u5229\u7528\u30e2\u30fc\u30c9 GCM\u3092\u7528\u3044\u305f\u6697\u53f7\u5316\u51e6\u7406\u3092\u4ee3\u884c\u3057\u307e\u3059\u3002\n\u57fa\u672c\u7684\u306b\u306f\u4e00\u7b87\u6240\u306b\u4fdd\u5b58\u3055\u308c\u3001\u8ee2\u9001\u3055\u308c\u306a\u3044\u60f3\u5b9a\u306e\u30c7\u30fc\u30bf\u3092\u5bfe\u8c61\u306b\u3057\u3066\u3044\u307e\u3059\u3002\nhttps://github.com/facebook/conceal#encryption\n\n\nConceal\u30e9\u30a4\u30d6\u30e9\u30ea\u306e\u4e2d\u8eab\nConceal\u306egithub\u30da\u30fc\u30b8\u30fb\u4e0a\u8a18Qiita\u8a18\u4e8b\u306b\u8f09\u3063\u3066\u3044\u308b\u306e\u3067\u5b9f\u88c5\u306f\u5272\u611b\u3057\u307e\u3059\u304c\u3001\u5927\u304d\u304f4\u30b9\u30c6\u30c3\u30d7\u304c\u3042\u308a\u307e\u3059\u3002\n\nKeyChain\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u306e\u751f\u6210\nCrypto\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u306e\u751f\u6210\n\u30e9\u30a4\u30d6\u30e9\u30ea\u306e\u30ed\u30fc\u30c9\u72b6\u6cc1\u30c1\u30a7\u30c3\u30af\n\u6697\u53f7\u5316\n\n\u305d\u308c\u3067\u306f\u5404\u30b9\u30c6\u30c3\u30d7\u3067Conceal\u304c\u4f55\u3092\u3057\u3066\u3044\u308b\u304b\u8aad\u307f\u8fbc\u3093\u3067\u3044\u304d\u307e\u3057\u3087\u3046\u3002\n\nKeyChain\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u306e\u751f\u6210\nKeyChain\u306f\u5171\u901a\u9375\u3084\u95a2\u4fc2\u3059\u308b\u30c7\u30fc\u30bf\u306e\u30e9\u30a4\u30d5\u30b5\u30a4\u30af\u30eb\u306b\u95a2\u308f\u308b\u30e1\u30bd\u30c3\u30c9\u7fa4\u3092\u5b9a\u7fa9\u3057\u305f\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30fc\u30b9\u3067\u3059\u3002\u3053\u308c\u3092\u5b9f\u88c5\u3057\u305fSharedPrefsBackedKeyChain\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u304c\u307e\u305a\u751f\u6210\u3055\u308c\u307e\u3059\u3002\u30d5\u30a1\u30a4\u30eb\u540d\u306e\u901a\u308a\u3001SharedPref\u3092\u30d9\u30fc\u30b9\u306b\u3057\u3066\u3044\u307e\u3059\u304c\u3001\u6697\u53f7\u5316\u306b\u6b20\u304b\u305b\u306a\u3044\u7591\u4f3c\u4e71\u6570\u751f\u6210\u5668(PRNG)\u306e\u751f\u6210\u3068\u3001\u6697\u53f7\u5316\u6642\u306e\u9375\u9577\u3092\u8a2d\u5b9a\u3057\u307e\u3059\u3002\n\nPRNG\u306e\u751f\u6210\u3000\u3068\u3000\u65e2\u77e5\u306e\u8106\u5f31\u6027\u5bfe\u5fdc\n\n\u8a72\u5f53\u30b3\u30fc\u30c9\n\n# SharedPrefesBackedKeyChain.java\nSecureRandomFix.createLocalSecureRandom()\n\n\n\nPRNG\u306fOpenSSL\u3092\u5229\u7528\u3057\u3066\u751f\u6210\u3055\u308c\u307e\u3059\u304c\u3001Jelly Bean(16~18)\u306b\u306f\u521d\u671f\u5316\u30d7\u30ed\u30bb\u30b9\u306b\u8106\u5f31\u6027\u304c\u3042\u308a\u307e\u3057\u305f\u3002 \u3053\u306e\u8106\u5f31\u6027\u3092\u3064\u304f\u3053\u3068\u3067\u6697\u53f7\u6587\u306e\u5f37\u5ea6\u304c\u4f4e\u4e0b\u3057\u3001BitCoin\u30a2\u30d7\u30ea\u5185\u306e\u30a6\u30a9\u30ec\u30c3\u30c8\u306e\u76d7\u96e3\u306a\u3069\u304c\u3067\u304d\u3066\u3057\u307e\u3046\u6a21\u69d8\u3067\u3059\u3002Google\u306f\u3053\u308c\u3078\u306e\u5bfe\u51e6\u65b9\u3092Developer Blog\u306b\u516c\u958b\u3057\u3066\u3044\u307e\u3059\u304c\u3001\u3053\u308c\u3092Conceal\u304c\u30ab\u30d0\u30fc\u3057\u3066\u304f\u308c\u3066\u3044\u307e\u3059\u3002\n\njava=SeureRandomFix.java\nprivate static void tryApplyOpenSSLFix() {\n  try {\n    // Mix in the device- and invocation-specific seed.\n    Class.forName(\"org.apache.harmony.xnet.provider.jsse.NativeCrypto\")\n        .getMethod(\"RAND_seed\", byte[].class)\n        .invoke(null, generateSeed());\n    // Mix output of Linux PRNG into OpenSSL's PRNG\n    int bytesRead = (Integer) Class.forName(\n        \"org.apache.harmony.xnet.provider.jsse.NativeCrypto\")\n        .getMethod(\"RAND_load_file\", String.class, long.class)\n        .invoke(null, DEV_URANDOM, 1024);\n    if (bytesRead != 1024) {\n      throw new IOException(\n          \"Unexpected number of bytes read from Linux PRNG: \"\n              + bytesRead);\n    }\n  } catch (Exception e) {\n    throw new SecurityException(\"Failed to seed OpenSSL PRNG\", e);\n  }\n}\n\n\n\n\u6697\u53f7\u5316\u6642\u306e\u9375\u9577\u3092\u8a2d\u5b9a\ncrypto\\CryptoConfig.java\u3067\u3001\u9375\u9577\u30fb\u521d\u671f\u5316\u30d9\u30af\u30c8\u30eb\u9577\u30fb\u30bf\u30b0\u9577\u306e\u7d44\u307f\u5408\u308f\u305b\u304cenum\u3067\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u307e\u3059\u3002\u3068\u306f\u3044\u3048\u3001\u305d\u306e\u7d44\u307f\u5408\u308f\u305b\u306f\uff12\u901a\u308a\u3057\u304b\u306a\u304f\u3001\u3057\u304b\u3082\u9375\u9577\u306b\u3057\u304b\u9055\u3044\u306f\u3042\u308a\u307e\u305b\u3093\u30022016\u5e744\u6708\u306b\u30ea\u30ea\u30fc\u30b9\u3055\u308c\u305fv1.1\u304b\u3089\u3001\u30c7\u30d5\u30a9\u30eb\u30c8\u63a8\u5968\u306e\u9375\u9577\u304c256bit\u306b\u306a\u308a\u307e\u3057\u305f\u306e\u3067\u3001\u57fa\u672c\u306fCryptoConfig.KEY_256\u3092\u4f7f\u3044\u307e\u3057\u3087\u3046\u3002\n\n\u30c7\u30d5\u30a9\u30eb\u30c8enum:\n\n\ncipherID: 2\n\u9375\u9577: 256bits\n\u521d\u671f\u5316\u30d9\u30af\u30c8\u30eb\u9577: 12bits\n\u30bf\u30b0\u9577: 16bits\n\n\n\n\nCrypto\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u306e\u751f\u6210\n\u524d\u8ff0\u306eKeyChain\u3092\u30bb\u30c3\u30c8\u3057AndoidConceal().get().createDefaultCrypto(keyChain)\u3067\u3001\u751f\u6210\u3057\u3066\u3044\u307e\u3059\u3002AndroidConceal().get()\u5185\u3067\u307e\u305f SecureRandomFix.createLocalSecureRandom()\u3092\u547c\u3073\u51fa\u3057\u3066\u3044\u307e\u3059\u3002\u304a\u305d\u3089\u304f\u3053\u308c\u306f\u65e7\u30d0\u30fc\u30b8\u30e7\u30f3\u3068\u65b0\u30d0\u30fc\u30b8\u30e7\u30f3\u3067\u306e\u4f7f\u7528\u65b9\u6cd5\u306e\u5dee\u7570\u306b\u767a\u3059\u308b\u5b9f\u88c5\u304b\u3068\u601d\u308f\u308c\u307e\u3059\u3002\u307e\u305f\u3001Crypto\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u751f\u6210\u6642\u306b\u6697\u53f7\u5316\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0(AES-GCM)\u304c\u6c7a\u5b9a\u3055\u308c\u307e\u3059\u3002\u4eca\u5f8c\u3001\u3053\u308c\u304c\u62e1\u5f35\u3055\u308c\u3066\u4ed6\u306e\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u3084\u6697\u53f7\u5229\u7528\u30e2\u30fc\u30c9\u304c\u5229\u7528\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u308b...\u3053\u3068\u306f\u306a\u3044\u3067\u3057\u3087\u3046\u3002\u591a\u5206\u3002\n\n\u30e9\u30a4\u30d6\u30e9\u30ea\u306e\u30ed\u30fc\u30c9\u72b6\u6cc1\u30c1\u30a7\u30c3\u30af\nConceal\u306eAES\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u30fbGCM\u306fC\u3067\u66f8\u304b\u308c\u3066\u3044\u308b\u305f\u3081\u3001Conceal\u5185\u3067Native\u30e9\u30a4\u30d6\u30e9\u30ea\"crypto\"\u304c\u30ed\u30fc\u30c9\u3055\u308c\u307e\u3059\u3002\u3053\u306e\u30c1\u30a7\u30c3\u30af\u3092crypto.isAvailable()\u304c\u3057\u3066\u3044\u307e\u3059\n\n\u6697\u53f7\u5316\nConceal\u3067\u6697\u53f7\u5316\u306f\u3001\u5e73\u6587\u3092\u66f8\u304d\u8fbc\u3080\u51fa\u529b\u30b9\u30c8\u30ea\u30fc\u30e0\u3092\u30e9\u30c3\u30d7\u3059\u308b\u3053\u3068\u3067\u5b9f\u73fe\u3055\u308c\u307e\u3059\u3002\u30c7\u30d5\u30a9\u30eb\u30c8\u306e\u5b9f\u88c5\u3067\u306f\u3001Crypto\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u901a\u3058\u3066BufferedOutputSream\u3092\u30e9\u30c3\u30d7\u3057\u3001\u305d\u306e\u30b9\u30c8\u30ea\u30fc\u30e0\u306b\u5e73\u6587\u3092\u66f8\u304d\u8fbc\u3080\u5f62\u306b\u306a\u308a\u307e\u3059\u3002\n\n\u51fa\u529b\u30b9\u30c8\u30ea\u30fc\u30e0\u306e\u30e9\u30c3\u30d7\n\u5b9f\u969b\u306e\u30e9\u30c3\u30d7\u306f\u3001Crypto\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u5185\u306emCryptoAlgo\u5909\u6570\u304c\u62c5\u5f53\u3057\u307e\u3059\u3002\n\njava=CryptoAlgoGcm.java\n# Crypto.java\n    public OutputStream getCipherOutputStream(OutputStream cipherStream, Entity entity, byte[] encryptBuffer)\n      throws IOException, CryptoInitializationException, KeyChainException {\n        return mCryptoAlgo.wrap(cipherStream, entity, encryptBuffer);\n    }\n\n\nwrap\u5185\u3067\u306f\u3001KeyChain\u5185\u306ePRNG\u304b\u3089\u521d\u671f\u5316\u30d9\u30af\u30c8\u30eb\u304c\u751f\u6210\u3055\u308c\u3001\u4ed6\u306e\u30e1\u30bf\u30c7\u30fc\u30bf\u3068\u4e00\u7dd2\u306b\u3001\u30e9\u30c3\u30d7\u3055\u308c\u308b\u524d\u306e\u51fa\u529b\u30b9\u30c8\u30ea\u30fc\u30e0\u306b\u66f8\u304d\u8fbc\u307e\u308c\u307e\u3059\u3002\u307e\u305f\u3001\u5171\u6709\u9375\u3082\u3053\u306e\u30bf\u30a4\u30df\u30f3\u30b0\u3067\u751f\u6210\u3055\u308c\u307e\u3059\u3002KeyChain\u306egetCipherKey()\u306f\u3001\u3000maybeGenerateKey()\u3092\u547c\u3073\u51fa\u3057\u3001\u9375\u3092\u751f\u6210(\u3082\u3057\u304f\u306f\u53d6\u5f97)\u3057\u3001SharedPreference\u306b\u4fdd\u5b58\u3057\u307e\u3059\u3002\n# CryptoAlgoGcm.java\n    @Override\n    public OutputStream wrap(OutputStream cipherStream, Entity entity, byte[] buffer)\n            throws IOException, CryptoInitializationException, KeyChainException {\n        cipherStream.write(VersionCodes.CIPHER_SERIALIZATION_VERSION);\n        cipherStream.write(mConfig.cipherId);\n\n        byte[] iv = mKeyChain.getNewIV();\n        NativeGCMCipher gcmCipher = new NativeGCMCipher(mNativeLibrary);\n        gcmCipher.encryptInit(mKeyChain.getCipherKey(), iv);\n        cipherStream.write(iv);\n    }\n\n# SharedPrefsBackedKeyChain.java\n  @Override\n  public synchronized byte[] getCipherKey() throws KeyChainException {\n    if (!mSetCipherKey) {\n      mCipherKey = maybeGenerateKey(CIPHER_KEY_PREF, mCryptoConfig.keyLength);\n    }\n    mSetCipherKey = true;\n    return mCipherKey;\n  }\n\n    private byte[] generateAndSaveKey(String pref, int length) throws KeyChainException {\n    byte[] key = new byte[length];\n    mSecureRandom.nextBytes(key);\n    // Store the session key.\n    SharedPreferences.Editor editor = mSharedPreferences.edit();\n    editor.putString(\n        pref,\n        encodeForPrefs(key));\n    editor.commit();\n    return key;\n  }\n\n\u305d\u306e\u5f8c\u306bGCM\u7279\u6709\u306e\u30c7\u30fc\u30bf\u3068\u4e00\u7dd2\u306b\u3001AES-GCM\u3067\u5165\u529b\u30c7\u30fc\u30bf\u3092\u6697\u53f7\u5316\u3055\u308c\u308bNativeGCMCipherOutputStream\u304c\u751f\u6210\u3055\u308c\u307e\u3059\u3002\n# CryptoAlgoGcm.java\n    @Override\n    public OutputStream wrap(OutputStream cipherStream, Entity entity, byte[] buffer)\n            throws IOException, CryptoInitializationException, KeyChainException {\n        byte[] entityBytes = entity.getBytes();\n        computeCipherAad(gcmCipher, VersionCodes.CIPHER_SERIALIZATION_VERSION, mConfig.cipherId, entityBytes);\n        return new NativeGCMCipherOutputStream(cipherStream, gcmCipher, buffer, mConfig.tagLength);\n    }\n\n\n\u6697\u53f7\u5316\n\u4e0a\u8a18\u3067\u751f\u6210\u3057\u305fNativeGCMCipherOutputStream\u306b\u5e73\u6587\u304cwrite\u3055\u308c\u308b\u3068\u3001NativeGCMCipher.update\u304c\u547c\u3070\u308c\u3001gcm.c\u5185\u306eJava_com_facebook_crypto_cipher_NativeGCMCipher_nativeUpdateAad\u3067\u6697\u53f7\u5316\u3055\u308c\u308b\u306e\u304b\u3068\u601d\u308f\u308c\u307e\u3059\u3002Android\u306eNDK\u306e\u4ed5\u7d44\u307f\u306b\u8a73\u3057\u304f\u306a\u3044\u306e\u3067\u3001\u9593\u9055\u3063\u3066\u3044\u305f\u3089\u6559\u3048\u3066\u4e0b\u3055\u3044\u3002\n# NativeGCMCipherOutputStream.java\n\n@Override\n  public void write(byte[] buffer, int offset, int count)\n      throws IOException {\n    if (buffer.length < offset + count) {\n      throw new ArrayIndexOutOfBoundsException(offset + count);\n    }\n\n    int times = count / mUpdateBufferChunkSize;\n    int remainder = count % mUpdateBufferChunkSize;\n\n    for (int i = 0; i < times; ++i) {\n      int written = mCipher.update(buffer, offset, mUpdateBufferChunkSize, mUpdateBuffer, 0);\n      mCipherDelegate.write(mUpdateBuffer, 0, written);\n      offset += mUpdateBufferChunkSize;\n    }\n\n    if (remainder > 0) {\n      int written = mCipher.update(buffer, offset, remainder, mUpdateBuffer, 0);\n      mCipherDelegate.write(mUpdateBuffer, 0, written);\n    }\n  }\n\n\u4ee5\u4e0a\u304c\u3001\u4e00\u822c\u7684\u306aConceal\u306e\u6697\u53f7\u5316\u304c\u884c\u308f\u308c\u308b\u30b9\u30c6\u30c3\u30d7\u306b\u306a\u308a\u307e\u3059\u3002\n\nConceal - \u4ed6\u306e\u6a5f\u80fd\n\n\u3088\u308a\u5358\u7d14\u306a\u6697\u53f7\u5316\u306e\u5b9f\u88c5\nCrypto\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u306e\u751f\u6210\u307e\u3067\u306f\u540c\u3058\u3067\u3059\u304c\u3001\u305d\u306e\u3042\u3068\u306f\u305f\u3060\u4e00\u884c\u300cencrypt()\u300d\u3067\u304a\u308f\u308b\u5b9f\u88c5\u65b9\u6cd5\u3067\u3059\u3002\u3082\u3046\u7247\u65b9\u3068\u306e\u9055\u3044\u306f\u3001\u51fa\u529b\u30b9\u30c8\u30ea\u30fc\u30e0\u304c\u53d7\u3051\u53d6\u308c\u308b\u30d0\u30a4\u30c8\u9577\u304c\u56fa\u5b9a\u3067\u3042\u308b\u3053\u3068\u3067\u3059\u3002\u4e00\u56de\u751f\u6210\u3057\u305f\u3089\u5909\u66f4\u304c\u306a\u3044\u30a4\u30df\u30e5\u30fc\u30bf\u30d6\u30eb\u306a\u30c7\u30fc\u30bf\u3001\u3082\u3057\u304f\u306f\u30cf\u30c3\u30b7\u30e5\u5316\u3057\u305f\u30c7\u30fc\u30bf\u3092\u6697\u53f7\u5316\u3057\u305f\u3044\u6642\u306b\u4f7f\u3048\u308b\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u3002\nKeyChain keyChain = new SharedPrefsBackedKeyChain(context,CryptoConfig.KEY_256);\nCrypto crypto = AndroidConceal.get().createDefaultCrypto(keyChain);\ncrypto.encrypt(plainTextInByte, Entity.create(\"unique_id\"))\n\n\n\u30d1\u30b9\u30ef\u30fc\u30c9\u30d9\u30fc\u30b9\u306e\u9375\u306e\u751f\u6210\nConceal\u306f\u57fa\u672c\u7684\u306b\u9375\u306e\u751f\u6210\u30fb\u521d\u671f\u5316\u30d9\u30af\u30c8\u30eb\u306e\u4f5c\u6210\u306a\u3069\u3001\u6697\u53f7\u5316\u3067\u5fc5\u8981\u306a\u51e6\u7406\u306f\u5168\u3066\u3084\u3063\u3066\u304f\u308c\u307e\u3059\u3002\u3082\u3057\u3001\u305d\u3046\u3044\u3063\u305f\u5229\u4fbf\u6027\u3092\u6295\u3052\u6368\u3066\u3066\u30aa\u30ea\u30b8\u30ca\u30eb\u306a\u9375\u3092\u4f5c\u308a\u305f\u3044\u306e\u3067\u3042\u308c\u3070\u3001\u30d1\u30b9\u30ef\u30fc\u30c9\u304b\u3089\u751f\u6210\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\u3057\u304b\u3057\u3001\u3042\u304f\u307e\u3067\u3082\u9375\u3092\u751f\u6210\u3059\u308b\u3068\u3053\u308d\u307e\u3067\u3067\u3001\u305d\u306e\u3042\u3068\u306e\u6697\u53f7\u5316\u51e6\u7406\u3001\u521d\u671f\u5316\u30d9\u30af\u30c8\u30eb\u306e\u4f5c\u6210\u3001\u9375\u306e\u4fdd\u5b58\u3092\u5168\u3066\u81ea\u524d\u3067\u5b9f\u88c5\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\nAndroidConceal.get().createPasswordBasedKeyDerivation()\n     .setIterations(10000)\n     .setPassword(\"P4$$word\")\n     .setSalt(buffer)\n     .setKeyLengthInBytes(16) // in bytes\n     .generate();\n\n\nMAC\u5024\u306e\u53d6\u5f97\nConceal\u3092\u5229\u7528\u3059\u308c\u3070\u3001\u30c7\u30d5\u30a9\u30eb\u30c8\u306e\u6697\u53f7\u5229\u7528\u30e2\u30fc\u30c9\u304cGCM\u306b\u306a\u3063\u3066\u307e\u3059\u3002GCM\u306f\u8a8d\u8a3c\u4ed8\u304d\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u306a\u306e\u3067\u3001MAC\u5024\u306e\u8a08\u7b97\u306f\u5fc5\u8981\u3042\u308a\u307e\u305b\u3093\u3002\u3057\u304b\u3057\u3001\u30d1\u30b9\u30ef\u30fc\u30c9\u30d9\u30fc\u30b9\u306e\u9375\u306e\u751f\u6210\u3092\u3057\u305f\u5834\u5408\u3001\u8907\u5408\u6642\u306b\u5b8c\u5168\u6027\u30fb\u8a8d\u8a3c\u3092\u3057\u305f\u307b\u3046\u304c\u3044\u3044\u306e\u3067\u3001\u305d\u306e\u5834\u5408\u306f\u3053\u308c\u3092\u3064\u304b\u3046\u3068\u3044\u3044\u3068\u601d\u3044\u307e\u3059\u3002\u306a\u304a\u3001\u8907\u5408\u306b\u5b8c\u5168\u6027\u30fb\u8a8d\u8a3c\u30c1\u30a7\u30c3\u30af\u304c\u306a\u305c\u5fc5\u8981\u306a\u306e\u304b\u3092\u77e5\u308a\u305f\u3044\u5834\u5408\u306f\u3001\u30aa\u30e9\u30af\u30eb\u30d1\u30c7\u30a3\u30f3\u30b0\u653b\u6483\u3067ggr\u3068\u826f\u3044\u3067\u3057\u3087\u3046\u3002\nOutputStream fileStream = new BufferedOutputStream(new FileOutputStream(file));\nOutputStream outputStream = crypto.getCipherOutputStream(fileStream,Entity.create(\"entity_id\"));\ncrypto.getMacOutputStream(outputStream,Entity.create(\"unique_mac_id\")); // probably\noutputStream.write(plainTextBytes);\noutputStream.close();\n\n\nConceal\u3092\u4f7f\u3046\u306b\u3042\u305f\u3063\u3066\u6c17\u3092\u3064\u3051\u305f\u3044\u3053\u3068\n\u6700\u5f8c\u306bConceal\u3092\u4f7f\u3046\u306b\u3042\u305f\u3063\u3066\u6c17\u3092\u3064\u3051\u305f\u3044\u3053\u3068\u3092\u66f8\u304d\u307e\u3057\u3087\u3046\u3002\n\n\u4e0a\u8ff0\u3057\u307e\u3057\u305f\u304c\u3001ver1.1\u304b\u3089256bit\u9375\u9577\u304c\u63a8\u5968\u3055\u308c\u3066\u3044\u307e\u3059\u3002\u8a18\u4e8b\u306e\u4e2d\u306b\u306fver1.1\u4ee5\u524d\u306e\u3082\u3042\u308b\u306e\u3067\u6c17\u3092\u3064\u3051\u307e\u3057\u3087\u3046\u3002\n\u9375\u3092SharedPreference\u306b\u4fdd\u5b58\u3057\u3066\u3044\u308b\u306e\u3067\u3001Root\u5316\u3055\u308c\u305f\u7aef\u672b\u3067\u306f\u629c\u304b\u308c\u3066\u3057\u307e\u3044\u307e\u3059\u3002\nAPI18\u4ee5\u964d\u3092\u5bfe\u8c61\u3068\u3059\u308b\u306a\u3089\u304a\u3068\u306a\u3057\u304fKeyStore\u306b\u4fdd\u5b58\u3057\u307e\u3057\u3087\u3046\u3002\u305d\u306e\u5834\u5408\u30e6\u30fc\u30b6\u30fc\u304c\u5165\u529b\u3059\u308b\u30d1\u30b9\u30ef\u30fc\u30c9\u304c\u306a\u3051\u308c\u3070\u958b\u3051\u306a\u3044\n\u3068\u3044\u3046\u3088\u308a\u3001\u5927\u4e8b\u306a\u60c5\u5831\u306f\u57fa\u672c\u30b5\u30fc\u30d0\u306b\u8d77\u304d\u3001Android\u7aef\u672b\u306b\u306f\u4fdd\u5b58\u3057\u306a\u3044\u3088\u3046\u306b\u3057\u307e\u3057\u3087\u3046\u3002\u5fc5\u8981\u306a\u6642\u306b\u3060\u3051fetch\u3057\u306b\u884c\u304d\u307e\u3057\u3087\u3046\u3002\n\u3082\u3057\u3001\u30b5\u30fc\u30d0\u306b\u304a\u3051\u306a\u3044\u5834\u5408\u306f...\u3044\u3044\u6848\u304c\u3042\u3063\u305f\u3089\u6559\u3048\u3066\u304f\u3060\u3055\u3044\u3002Root\u5316\u3055\u308c\u305f\u7aef\u672b\u3067\u306f\u5229\u7528\u3067\u304d\u306a\u3044\u3088\u3046\u306b\u3059\u308b...\u3068\u304b\uff1f\n\n\n\u53c2\u8003\n\nhttps://android-developers.googleblog.com/2013/08/some-securerandom-thoughts.html\nhttps://bitcoin.org/en/alert/2013-08-11-android\nhttps://github.com/facebook/conceal#encryption\n\n\u3053\u306e\u8a18\u4e8b\u306fAndroid\u30a2\u30c9\u30d9\u30f3\u30c8\u30ab\u30ec\u30f3\u30c0\u30fc 24\u65e5\u306e\u8a18\u4e8b\u3067\u3059\u3002\u4e00\u4f53\u3001\u4f55\u304c\u60b2\u3057\u304f\u3066\u8056\u591c\u306b\u6280\u8853\u30a8\u30f3\u30c8\u30ea\u30fc\u3092\u66f8\u304b\u306a\u3044\u3068\u3044\u3051\u306a\u3044\u306e\u3067\u3057\u3087\u3046\u3002\u6094\u3057\u3044\u306e\u3067\u3001\u304a\u5805\u305d\u3046\u306a\u540d\u524d\u3057\u3066\u3044\u308bConceal\u30e9\u30a4\u30d6\u30e9\u30ea\u306e\u4e2d\u8eab\u3092\u8aad\u307f\u8fbc\u3093\u3067\u3001\u4e38\u88f8\u306b\u3057\u3066\u3084\u308b\u3053\u3068\u306b\u3057\u307e\u3057\u305f\u3002\n\n* \u4f7f\u3044\u65b9\u306b\u3064\u3044\u3066\u306f\u3001[\u3053\u3061\u3089\u306e\u8a18\u4e8b](http://qiita.com/kobakei/items/cb67f8b605b69b11b4eb)\u3092\u53c2\u7167\u3044\u305f\u3060\u304f\u3068\u3044\u3044\u3068\u601d\u3044\u307e\u3059\u3002\n\n# Conceal\u3068\u306f\n![](https://i.imgur.com/WTeiI1B.png)\n\n* Facebook\u304c\u958b\u767a\u3057\u305f\u30e9\u30a4\u30d6\u30e9\u30ea\u3067\u3059\u3002\u5171\u901a\u9375\u6697\u53f7\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0 AES(256bit)\u3068\u6697\u53f7\u5229\u7528\u30e2\u30fc\u30c9 GCM\u3092\u7528\u3044\u305f\u6697\u53f7\u5316\u51e6\u7406\u3092\u4ee3\u884c\u3057\u307e\u3059\u3002\n* \u57fa\u672c\u7684\u306b\u306f\u4e00\u7b87\u6240\u306b\u4fdd\u5b58\u3055\u308c\u3001\u8ee2\u9001\u3055\u308c\u306a\u3044\u60f3\u5b9a\u306e\u30c7\u30fc\u30bf\u3092\u5bfe\u8c61\u306b\u3057\u3066\u3044\u307e\u3059\u3002\n* https://github.com/facebook/conceal#encryption\n\n# Conceal\u30e9\u30a4\u30d6\u30e9\u30ea\u306e\u4e2d\u8eab\nConceal\u306egithub\u30da\u30fc\u30b8\u30fb\u4e0a\u8a18Qiita\u8a18\u4e8b\u306b\u8f09\u3063\u3066\u3044\u308b\u306e\u3067\u5b9f\u88c5\u306f\u5272\u611b\u3057\u307e\u3059\u304c\u3001\u5927\u304d\u304f4\u30b9\u30c6\u30c3\u30d7\u304c\u3042\u308a\u307e\u3059\u3002\n\n1. KeyChain\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u306e\u751f\u6210\n2. Crypto\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u306e\u751f\u6210\n2. \u30e9\u30a4\u30d6\u30e9\u30ea\u306e\u30ed\u30fc\u30c9\u72b6\u6cc1\u30c1\u30a7\u30c3\u30af\n3. \u6697\u53f7\u5316\n\n\u305d\u308c\u3067\u306f\u5404\u30b9\u30c6\u30c3\u30d7\u3067Conceal\u304c\u4f55\u3092\u3057\u3066\u3044\u308b\u304b\u8aad\u307f\u8fbc\u3093\u3067\u3044\u304d\u307e\u3057\u3087\u3046\u3002\n\n## KeyChain\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u306e\u751f\u6210\nKeyChain\u306f\u5171\u901a\u9375\u3084\u95a2\u4fc2\u3059\u308b\u30c7\u30fc\u30bf\u306e\u30e9\u30a4\u30d5\u30b5\u30a4\u30af\u30eb\u306b\u95a2\u308f\u308b\u30e1\u30bd\u30c3\u30c9\u7fa4\u3092\u5b9a\u7fa9\u3057\u305f\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30fc\u30b9\u3067\u3059\u3002\u3053\u308c\u3092\u5b9f\u88c5\u3057\u305fSharedPrefsBackedKeyChain\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u304c\u307e\u305a\u751f\u6210\u3055\u308c\u307e\u3059\u3002\u30d5\u30a1\u30a4\u30eb\u540d\u306e\u901a\u308a\u3001SharedPref\u3092\u30d9\u30fc\u30b9\u306b\u3057\u3066\u3044\u307e\u3059\u304c\u3001\u6697\u53f7\u5316\u306b\u6b20\u304b\u305b\u306a\u3044\u7591\u4f3c\u4e71\u6570\u751f\u6210\u5668(PRNG)\u306e\u751f\u6210\u3068\u3001\u6697\u53f7\u5316\u6642\u306e\u9375\u9577\u3092\u8a2d\u5b9a\u3057\u307e\u3059\u3002\n\n### PRNG\u306e\u751f\u6210\u3000\u3068\u3000\u65e2\u77e5\u306e\u8106\u5f31\u6027\u5bfe\u5fdc\n\n* \u8a72\u5f53\u30b3\u30fc\u30c9\n```\n# SharedPrefesBackedKeyChain.java\nSecureRandomFix.createLocalSecureRandom()\n```\n\n\nPRNG\u306fOpenSSL\u3092\u5229\u7528\u3057\u3066\u751f\u6210\u3055\u308c\u307e\u3059\u304c\u3001Jelly Bean(16~18)\u306b\u306f\u521d\u671f\u5316\u30d7\u30ed\u30bb\u30b9\u306b\u8106\u5f31\u6027\u304c\u3042\u308a\u307e\u3057\u305f\u3002 \u3053\u306e\u8106\u5f31\u6027\u3092\u3064\u304f\u3053\u3068\u3067\u6697\u53f7\u6587\u306e\u5f37\u5ea6\u304c\u4f4e\u4e0b\u3057\u3001BitCoin\u30a2\u30d7\u30ea\u5185\u306e\u30a6\u30a9\u30ec\u30c3\u30c8\u306e\u76d7\u96e3\u306a\u3069\u304c\u3067\u304d\u3066\u3057\u307e\u3046\u6a21\u69d8\u3067\u3059\u3002Google\u306f\u3053\u308c\u3078\u306e\u5bfe\u51e6\u65b9\u3092[Developer Blog](https://android-developers.googleblog.com/2013/08/some-securerandom-thoughts.html)\u306b\u516c\u958b\u3057\u3066\u3044\u307e\u3059\u304c\u3001\u3053\u308c\u3092Conceal\u304c\u30ab\u30d0\u30fc\u3057\u3066\u304f\u308c\u3066\u3044\u307e\u3059\u3002\n\n```java=SeureRandomFix.java\nprivate static void tryApplyOpenSSLFix() {\n  try {\n    // Mix in the device- and invocation-specific seed.\n    Class.forName(\"org.apache.harmony.xnet.provider.jsse.NativeCrypto\")\n        .getMethod(\"RAND_seed\", byte[].class)\n        .invoke(null, generateSeed());\n    // Mix output of Linux PRNG into OpenSSL's PRNG\n    int bytesRead = (Integer) Class.forName(\n        \"org.apache.harmony.xnet.provider.jsse.NativeCrypto\")\n        .getMethod(\"RAND_load_file\", String.class, long.class)\n        .invoke(null, DEV_URANDOM, 1024);\n    if (bytesRead != 1024) {\n      throw new IOException(\n          \"Unexpected number of bytes read from Linux PRNG: \"\n              + bytesRead);\n    }\n  } catch (Exception e) {\n    throw new SecurityException(\"Failed to seed OpenSSL PRNG\", e);\n  }\n}\n```\n\n\n### \u6697\u53f7\u5316\u6642\u306e\u9375\u9577\u3092\u8a2d\u5b9a\n`crypto\\CryptoConfig.java`\u3067\u3001\u9375\u9577\u30fb\u521d\u671f\u5316\u30d9\u30af\u30c8\u30eb\u9577\u30fb\u30bf\u30b0\u9577\u306e\u7d44\u307f\u5408\u308f\u305b\u304cenum\u3067\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u307e\u3059\u3002\u3068\u306f\u3044\u3048\u3001\u305d\u306e\u7d44\u307f\u5408\u308f\u305b\u306f\uff12\u901a\u308a\u3057\u304b\u306a\u304f\u3001\u3057\u304b\u3082\u9375\u9577\u306b\u3057\u304b\u9055\u3044\u306f\u3042\u308a\u307e\u305b\u3093\u30022016\u5e744\u6708\u306b\u30ea\u30ea\u30fc\u30b9\u3055\u308c\u305fv1.1\u304b\u3089\u3001\u30c7\u30d5\u30a9\u30eb\u30c8\u63a8\u5968\u306e\u9375\u9577\u304c256bit\u306b\u306a\u308a\u307e\u3057\u305f\u306e\u3067\u3001\u57fa\u672c\u306f`CryptoConfig.KEY_256`\u3092\u4f7f\u3044\u307e\u3057\u3087\u3046\u3002\n\n* \u30c7\u30d5\u30a9\u30eb\u30c8enum:\n    * cipherID: 2\n    * \u9375\u9577: 256bits\n    * \u521d\u671f\u5316\u30d9\u30af\u30c8\u30eb\u9577: 12bits\n    * \u30bf\u30b0\u9577: 16bits\n\n\n## Crypto\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u306e\u751f\u6210\n\u524d\u8ff0\u306eKeyChain\u3092\u30bb\u30c3\u30c8\u3057`AndoidConceal().get().createDefaultCrypto(keyChain)`\u3067\u3001\u751f\u6210\u3057\u3066\u3044\u307e\u3059\u3002AndroidConceal().get()\u5185\u3067\u307e\u305f `SecureRandomFix.createLocalSecureRandom()`\u3092\u547c\u3073\u51fa\u3057\u3066\u3044\u307e\u3059\u3002\u304a\u305d\u3089\u304f\u3053\u308c\u306f\u65e7\u30d0\u30fc\u30b8\u30e7\u30f3\u3068\u65b0\u30d0\u30fc\u30b8\u30e7\u30f3\u3067\u306e\u4f7f\u7528\u65b9\u6cd5\u306e\u5dee\u7570\u306b\u767a\u3059\u308b\u5b9f\u88c5\u304b\u3068\u601d\u308f\u308c\u307e\u3059\u3002\u307e\u305f\u3001Crypto\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u751f\u6210\u6642\u306b\u6697\u53f7\u5316\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0(AES-GCM)\u304c\u6c7a\u5b9a\u3055\u308c\u307e\u3059\u3002\u4eca\u5f8c\u3001\u3053\u308c\u304c\u62e1\u5f35\u3055\u308c\u3066\u4ed6\u306e\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u3084\u6697\u53f7\u5229\u7528\u30e2\u30fc\u30c9\u304c\u5229\u7528\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u308b...\u3053\u3068\u306f\u306a\u3044\u3067\u3057\u3087\u3046\u3002\u591a\u5206\u3002\n\n## \u30e9\u30a4\u30d6\u30e9\u30ea\u306e\u30ed\u30fc\u30c9\u72b6\u6cc1\u30c1\u30a7\u30c3\u30af\nConceal\u306eAES\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u30fbGCM\u306fC\u3067\u66f8\u304b\u308c\u3066\u3044\u308b\u305f\u3081\u3001Conceal\u5185\u3067Native\u30e9\u30a4\u30d6\u30e9\u30ea\"crypto\"\u304c\u30ed\u30fc\u30c9\u3055\u308c\u307e\u3059\u3002\u3053\u306e\u30c1\u30a7\u30c3\u30af\u3092`crypto.isAvailable()`\u304c\u3057\u3066\u3044\u307e\u3059\n\n## \u6697\u53f7\u5316\nConceal\u3067\u6697\u53f7\u5316\u306f\u3001\u5e73\u6587\u3092\u66f8\u304d\u8fbc\u3080\u51fa\u529b\u30b9\u30c8\u30ea\u30fc\u30e0\u3092\u30e9\u30c3\u30d7\u3059\u308b\u3053\u3068\u3067\u5b9f\u73fe\u3055\u308c\u307e\u3059\u3002\u30c7\u30d5\u30a9\u30eb\u30c8\u306e\u5b9f\u88c5\u3067\u306f\u3001Crypto\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u901a\u3058\u3066BufferedOutputSream\u3092\u30e9\u30c3\u30d7\u3057\u3001\u305d\u306e\u30b9\u30c8\u30ea\u30fc\u30e0\u306b\u5e73\u6587\u3092\u66f8\u304d\u8fbc\u3080\u5f62\u306b\u306a\u308a\u307e\u3059\u3002\n\n### \u51fa\u529b\u30b9\u30c8\u30ea\u30fc\u30e0\u306e\u30e9\u30c3\u30d7\n\u5b9f\u969b\u306e\u30e9\u30c3\u30d7\u306f\u3001Crypto\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u5185\u306emCryptoAlgo\u5909\u6570\u304c\u62c5\u5f53\u3057\u307e\u3059\u3002\n\n```java=CryptoAlgoGcm.java\n# Crypto.java\n    public OutputStream getCipherOutputStream(OutputStream cipherStream, Entity entity, byte[] encryptBuffer)\n      throws IOException, CryptoInitializationException, KeyChainException {\n        return mCryptoAlgo.wrap(cipherStream, entity, encryptBuffer);\n    }\n```\n\nwrap\u5185\u3067\u306f\u3001KeyChain\u5185\u306ePRNG\u304b\u3089\u521d\u671f\u5316\u30d9\u30af\u30c8\u30eb\u304c\u751f\u6210\u3055\u308c\u3001\u4ed6\u306e\u30e1\u30bf\u30c7\u30fc\u30bf\u3068\u4e00\u7dd2\u306b\u3001\u30e9\u30c3\u30d7\u3055\u308c\u308b\u524d\u306e\u51fa\u529b\u30b9\u30c8\u30ea\u30fc\u30e0\u306b\u66f8\u304d\u8fbc\u307e\u308c\u307e\u3059\u3002\u307e\u305f\u3001\u5171\u6709\u9375\u3082\u3053\u306e\u30bf\u30a4\u30df\u30f3\u30b0\u3067\u751f\u6210\u3055\u308c\u307e\u3059\u3002KeyChain\u306egetCipherKey()\u306f\u3001\u3000maybeGenerateKey()\u3092\u547c\u3073\u51fa\u3057\u3001\u9375\u3092\u751f\u6210(\u3082\u3057\u304f\u306f\u53d6\u5f97)\u3057\u3001SharedPreference\u306b\u4fdd\u5b58\u3057\u307e\u3059\u3002\n\n```\n# CryptoAlgoGcm.java\n    @Override\n    public OutputStream wrap(OutputStream cipherStream, Entity entity, byte[] buffer)\n            throws IOException, CryptoInitializationException, KeyChainException {\n        cipherStream.write(VersionCodes.CIPHER_SERIALIZATION_VERSION);\n        cipherStream.write(mConfig.cipherId);\n\n        byte[] iv = mKeyChain.getNewIV();\n        NativeGCMCipher gcmCipher = new NativeGCMCipher(mNativeLibrary);\n        gcmCipher.encryptInit(mKeyChain.getCipherKey(), iv);\n        cipherStream.write(iv);\n    }\n    \n# SharedPrefsBackedKeyChain.java\n  @Override\n  public synchronized byte[] getCipherKey() throws KeyChainException {\n    if (!mSetCipherKey) {\n      mCipherKey = maybeGenerateKey(CIPHER_KEY_PREF, mCryptoConfig.keyLength);\n    }\n    mSetCipherKey = true;\n    return mCipherKey;\n  }\n  \n    private byte[] generateAndSaveKey(String pref, int length) throws KeyChainException {\n    byte[] key = new byte[length];\n    mSecureRandom.nextBytes(key);\n    // Store the session key.\n    SharedPreferences.Editor editor = mSharedPreferences.edit();\n    editor.putString(\n        pref,\n        encodeForPrefs(key));\n    editor.commit();\n    return key;\n  }\n```\n\n\u305d\u306e\u5f8c\u306bGCM\u7279\u6709\u306e\u30c7\u30fc\u30bf\u3068\u4e00\u7dd2\u306b\u3001AES-GCM\u3067\u5165\u529b\u30c7\u30fc\u30bf\u3092\u6697\u53f7\u5316\u3055\u308c\u308bNativeGCMCipherOutputStream\u304c\u751f\u6210\u3055\u308c\u307e\u3059\u3002\n\n```\n# CryptoAlgoGcm.java\n    @Override\n    public OutputStream wrap(OutputStream cipherStream, Entity entity, byte[] buffer)\n            throws IOException, CryptoInitializationException, KeyChainException {\n        byte[] entityBytes = entity.getBytes();\n        computeCipherAad(gcmCipher, VersionCodes.CIPHER_SERIALIZATION_VERSION, mConfig.cipherId, entityBytes);\n        return new NativeGCMCipherOutputStream(cipherStream, gcmCipher, buffer, mConfig.tagLength);\n    }\n```\n\n### \u6697\u53f7\u5316\n\u4e0a\u8a18\u3067\u751f\u6210\u3057\u305fNativeGCMCipherOutputStream\u306b\u5e73\u6587\u304cwrite\u3055\u308c\u308b\u3068\u3001NativeGCMCipher.update\u304c\u547c\u3070\u308c\u3001gcm.c\u5185\u306eJava_com_facebook_crypto_cipher_NativeGCMCipher_nativeUpdateAad\u3067\u6697\u53f7\u5316\u3055\u308c\u308b\u306e\u304b\u3068\u601d\u308f\u308c\u307e\u3059\u3002Android\u306eNDK\u306e\u4ed5\u7d44\u307f\u306b\u8a73\u3057\u304f\u306a\u3044\u306e\u3067\u3001\u9593\u9055\u3063\u3066\u3044\u305f\u3089\u6559\u3048\u3066\u4e0b\u3055\u3044\u3002\n\n```\n# NativeGCMCipherOutputStream.java\n\n@Override\n  public void write(byte[] buffer, int offset, int count)\n      throws IOException {\n    if (buffer.length < offset + count) {\n      throw new ArrayIndexOutOfBoundsException(offset + count);\n    }\n\n    int times = count / mUpdateBufferChunkSize;\n    int remainder = count % mUpdateBufferChunkSize;\n\n    for (int i = 0; i < times; ++i) {\n      int written = mCipher.update(buffer, offset, mUpdateBufferChunkSize, mUpdateBuffer, 0);\n      mCipherDelegate.write(mUpdateBuffer, 0, written);\n      offset += mUpdateBufferChunkSize;\n    }\n\n    if (remainder > 0) {\n      int written = mCipher.update(buffer, offset, remainder, mUpdateBuffer, 0);\n      mCipherDelegate.write(mUpdateBuffer, 0, written);\n    }\n  }\n```\n\n\u4ee5\u4e0a\u304c\u3001\u4e00\u822c\u7684\u306aConceal\u306e\u6697\u53f7\u5316\u304c\u884c\u308f\u308c\u308b\u30b9\u30c6\u30c3\u30d7\u306b\u306a\u308a\u307e\u3059\u3002\n\n# Conceal - \u4ed6\u306e\u6a5f\u80fd\n\n## \u3088\u308a\u5358\u7d14\u306a\u6697\u53f7\u5316\u306e\u5b9f\u88c5\nCrypto\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u306e\u751f\u6210\u307e\u3067\u306f\u540c\u3058\u3067\u3059\u304c\u3001\u305d\u306e\u3042\u3068\u306f\u305f\u3060\u4e00\u884c\u300cencrypt()\u300d\u3067\u304a\u308f\u308b\u5b9f\u88c5\u65b9\u6cd5\u3067\u3059\u3002\u3082\u3046\u7247\u65b9\u3068\u306e\u9055\u3044\u306f\u3001\u51fa\u529b\u30b9\u30c8\u30ea\u30fc\u30e0\u304c\u53d7\u3051\u53d6\u308c\u308b\u30d0\u30a4\u30c8\u9577\u304c\u56fa\u5b9a\u3067\u3042\u308b\u3053\u3068\u3067\u3059\u3002\u4e00\u56de\u751f\u6210\u3057\u305f\u3089\u5909\u66f4\u304c\u306a\u3044\u30a4\u30df\u30e5\u30fc\u30bf\u30d6\u30eb\u306a\u30c7\u30fc\u30bf\u3001\u3082\u3057\u304f\u306f\u30cf\u30c3\u30b7\u30e5\u5316\u3057\u305f\u30c7\u30fc\u30bf\u3092\u6697\u53f7\u5316\u3057\u305f\u3044\u6642\u306b\u4f7f\u3048\u308b\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u3002\n\n\n```\nKeyChain keyChain = new SharedPrefsBackedKeyChain(context,CryptoConfig.KEY_256);\nCrypto crypto = AndroidConceal.get().createDefaultCrypto(keyChain);\ncrypto.encrypt(plainTextInByte, Entity.create(\"unique_id\"))\n```\n\n## \u30d1\u30b9\u30ef\u30fc\u30c9\u30d9\u30fc\u30b9\u306e\u9375\u306e\u751f\u6210\nConceal\u306f\u57fa\u672c\u7684\u306b\u9375\u306e\u751f\u6210\u30fb\u521d\u671f\u5316\u30d9\u30af\u30c8\u30eb\u306e\u4f5c\u6210\u306a\u3069\u3001\u6697\u53f7\u5316\u3067\u5fc5\u8981\u306a\u51e6\u7406\u306f\u5168\u3066\u3084\u3063\u3066\u304f\u308c\u307e\u3059\u3002\u3082\u3057\u3001\u305d\u3046\u3044\u3063\u305f\u5229\u4fbf\u6027\u3092\u6295\u3052\u6368\u3066\u3066\u30aa\u30ea\u30b8\u30ca\u30eb\u306a\u9375\u3092\u4f5c\u308a\u305f\u3044\u306e\u3067\u3042\u308c\u3070\u3001\u30d1\u30b9\u30ef\u30fc\u30c9\u304b\u3089\u751f\u6210\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\u3057\u304b\u3057\u3001\u3042\u304f\u307e\u3067\u3082\u9375\u3092\u751f\u6210\u3059\u308b\u3068\u3053\u308d\u307e\u3067\u3067\u3001\u305d\u306e\u3042\u3068\u306e\u6697\u53f7\u5316\u51e6\u7406\u3001\u521d\u671f\u5316\u30d9\u30af\u30c8\u30eb\u306e\u4f5c\u6210\u3001\u9375\u306e\u4fdd\u5b58\u3092\u5168\u3066\u81ea\u524d\u3067\u5b9f\u88c5\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\n\n\n```\nAndroidConceal.get().createPasswordBasedKeyDerivation()\n     .setIterations(10000)\n     .setPassword(\"P4$$word\")\n     .setSalt(buffer)\n     .setKeyLengthInBytes(16) // in bytes\n     .generate();\n```\n\n## MAC\u5024\u306e\u53d6\u5f97\nConceal\u3092\u5229\u7528\u3059\u308c\u3070\u3001\u30c7\u30d5\u30a9\u30eb\u30c8\u306e\u6697\u53f7\u5229\u7528\u30e2\u30fc\u30c9\u304cGCM\u306b\u306a\u3063\u3066\u307e\u3059\u3002GCM\u306f\u8a8d\u8a3c\u4ed8\u304d\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u306a\u306e\u3067\u3001MAC\u5024\u306e\u8a08\u7b97\u306f\u5fc5\u8981\u3042\u308a\u307e\u305b\u3093\u3002\u3057\u304b\u3057\u3001\u30d1\u30b9\u30ef\u30fc\u30c9\u30d9\u30fc\u30b9\u306e\u9375\u306e\u751f\u6210\u3092\u3057\u305f\u5834\u5408\u3001\u8907\u5408\u6642\u306b\u5b8c\u5168\u6027\u30fb\u8a8d\u8a3c\u3092\u3057\u305f\u307b\u3046\u304c\u3044\u3044\u306e\u3067\u3001\u305d\u306e\u5834\u5408\u306f\u3053\u308c\u3092\u3064\u304b\u3046\u3068\u3044\u3044\u3068\u601d\u3044\u307e\u3059\u3002\u306a\u304a\u3001\u8907\u5408\u306b\u5b8c\u5168\u6027\u30fb\u8a8d\u8a3c\u30c1\u30a7\u30c3\u30af\u304c\u306a\u305c\u5fc5\u8981\u306a\u306e\u304b\u3092\u77e5\u308a\u305f\u3044\u5834\u5408\u306f\u3001\u30aa\u30e9\u30af\u30eb\u30d1\u30c7\u30a3\u30f3\u30b0\u653b\u6483\u3067ggr\u3068\u826f\u3044\u3067\u3057\u3087\u3046\u3002\n\n\n```\nOutputStream fileStream = new BufferedOutputStream(new FileOutputStream(file));\nOutputStream outputStream = crypto.getCipherOutputStream(fileStream,Entity.create(\"entity_id\"));\ncrypto.getMacOutputStream(outputStream,Entity.create(\"unique_mac_id\")); // probably\noutputStream.write(plainTextBytes);\noutputStream.close();\n```\n\n# Conceal\u3092\u4f7f\u3046\u306b\u3042\u305f\u3063\u3066\u6c17\u3092\u3064\u3051\u305f\u3044\u3053\u3068\n\u6700\u5f8c\u306bConceal\u3092\u4f7f\u3046\u306b\u3042\u305f\u3063\u3066\u6c17\u3092\u3064\u3051\u305f\u3044\u3053\u3068\u3092\u66f8\u304d\u307e\u3057\u3087\u3046\u3002\n\n* \u4e0a\u8ff0\u3057\u307e\u3057\u305f\u304c\u3001ver1.1\u304b\u3089256bit\u9375\u9577\u304c\u63a8\u5968\u3055\u308c\u3066\u3044\u307e\u3059\u3002\u8a18\u4e8b\u306e\u4e2d\u306b\u306fver1.1\u4ee5\u524d\u306e\u3082\u3042\u308b\u306e\u3067\u6c17\u3092\u3064\u3051\u307e\u3057\u3087\u3046\u3002\n* \u9375\u3092SharedPreference\u306b\u4fdd\u5b58\u3057\u3066\u3044\u308b\u306e\u3067\u3001Root\u5316\u3055\u308c\u305f\u7aef\u672b\u3067\u306f\u629c\u304b\u308c\u3066\u3057\u307e\u3044\u307e\u3059\u3002\n* API18\u4ee5\u964d\u3092\u5bfe\u8c61\u3068\u3059\u308b\u306a\u3089\u304a\u3068\u306a\u3057\u304fKeyStore\u306b\u4fdd\u5b58\u3057\u307e\u3057\u3087\u3046\u3002\u305d\u306e\u5834\u5408\u30e6\u30fc\u30b6\u30fc\u304c\u5165\u529b\u3059\u308b\u30d1\u30b9\u30ef\u30fc\u30c9\u304c\u306a\u3051\u308c\u3070\u958b\u3051\u306a\u3044\n* \u3068\u3044\u3046\u3088\u308a\u3001\u5927\u4e8b\u306a\u60c5\u5831\u306f\u57fa\u672c\u30b5\u30fc\u30d0\u306b\u8d77\u304d\u3001Android\u7aef\u672b\u306b\u306f\u4fdd\u5b58\u3057\u306a\u3044\u3088\u3046\u306b\u3057\u307e\u3057\u3087\u3046\u3002\u5fc5\u8981\u306a\u6642\u306b\u3060\u3051fetch\u3057\u306b\u884c\u304d\u307e\u3057\u3087\u3046\u3002\n* \u3082\u3057\u3001\u30b5\u30fc\u30d0\u306b\u304a\u3051\u306a\u3044\u5834\u5408\u306f...\u3044\u3044\u6848\u304c\u3042\u3063\u305f\u3089\u6559\u3048\u3066\u304f\u3060\u3055\u3044\u3002Root\u5316\u3055\u308c\u305f\u7aef\u672b\u3067\u306f\u5229\u7528\u3067\u304d\u306a\u3044\u3088\u3046\u306b\u3059\u308b...\u3068\u304b\uff1f\n\n\n# \u53c2\u8003\n* https://android-developers.googleblog.com/2013/08/some-securerandom-thoughts.html\n* https://bitcoin.org/en/alert/2013-08-11-android\n* https://github.com/facebook/conceal#encryption\n"}