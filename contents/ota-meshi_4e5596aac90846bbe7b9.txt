{"context": " More than 1 year has passed since last update.Java8\u306e\u826f\u3044\u306e\u304b\u60aa\u3044\u306e\u304b\u308f\u304b\u3089\u306a\u3044\u6d3b\u7528\u6cd5\u3092\u7d39\u4ecb\u3057\u307e\u3059\u3002\n\u82e5\u5e72\u96e3\u89e3\u306a\u306e\u3067\u8077\u5834\u3067\u6d3b\u7528\u3057\u3066\u5148\u8f29\u306b\u6012\u3089\u308c\u3066\u3082\u77e5\u308a\u307e\u305b\u3093\u3002\n\nAutoCloseable\u3063\u3066\u3082\u3057\u304b\u3057\u3066\u95a2\u6570\u578b\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30fc\u30b9!??\nAutoCloseable\u306f@FunctionalInterface\u306f\u3082\u3061\u308d\u3093\u3064\u3044\u3066\u3044\u307e\u305b\u3093\u304c\u3001\n\u95a2\u6570\u578b\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30fc\u30b9\u306e\u5b9a\u7fa9\u304b\u3089\u3059\u308c\u3070\u95a2\u6570\u578b\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30fc\u30b9\u3067\u3059\u306d\u3002\n\u3064\u307e\u308a\n\nAutoCloseable\u3067\u306a\u3044\u30af\u30e9\u30b9\u3092try-with-resources\u3067\u30af\u30ed\u30fc\u30ba\u3059\u308b\nGraphics\u306a\u3093\u304b\u307e\u3055\u306bdispose\u3081\u3093\u3069\u304f\u3055\u3044\u3067\u3059\u306d\u3002\n    /**\n     * \u81ea\u529b\u3067Graphics\u3092close\n     */\n    public static void disposeSample(BufferedImage image) {\n        Graphics graphics = image.createGraphics();\n        try {\n            //\u51e6\u7406\n        } finally {\n            graphics.dispose();\n        }\n    }\n\n\u7c21\u5358\u306b\u306f\u3053\u3046\u3067\u3059\u304c\u3001\u5834\u5408\u306b\u3088\u3063\u3066\u306fgraphics\u306enull\u5224\u5b9a\u5165\u308c\u305f\u308a\u3081\u3093\u3069\u304f\u3055\u3044\u3053\u3068\u3053\u306e\u4e0a\u306a\u3044\u3067\u3059\u3002\n\u3067\u3059\u304c\u30e1\u30bd\u30c3\u30c9\u53c2\u7167\u3067\n    /**\n     * \u30e9\u30e0\u30c0\u5f0f\u3067AutoCloseable\u5316\u3002try-with-resources\u306b\u3002\n     */\n    public static void disposeSample(BufferedImage image) {\n        Graphics graphics = image.createGraphics();\n        try (AutoCloseable closeable = graphics::dispose) {\n            //\u51e6\u7406\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n\n\u3068\u3059\u308b\u3068try-with-resources\u304c\u4f7f\u3048\u308b\u308f\u3051\u3067\u3059\n\u53c2\u8003\uff1aAutoCloseable\u3067\u306a\u304f\u3066\u3082try-with-resources\u304c\u3057\u305f\u3044\n\u304c\u3001\u3053\u308c\u3060\u3068Exception\u3092catch\u3057\u306a\u3044\u3068\u3044\u3051\u306a\u3044\u306e\u3067\n    /**\n     * throws\u306a\u3057\u306eAutoCloseable\n     */\n    public interface MyCloseable extends AutoCloseable {\n        @Override\n        void close();\n    }\n\n    /**\n     * catch\u304c\u4e0d\u8981\u306b\u306a\u3063\u305f\n     */\n    public static void disposeSample(BufferedImage image) {\n        Graphics graphics = image.createGraphics();\n        try (MyCloseable closeable = graphics::dispose) {\n            //\u51e6\u7406\n        }\n    }\n\n\u3068\u3059\u308c\u3070\u5b8c\u74a7\u3067\u3059\uff01\uff01MyCloseable\u3092\u4e00\u3064\u4f5c\u3063\u3066\u304a\u304d\u307e\u3057\u3087\u3046\uff01\n\u3082\u3046\u4e00\u6bb5\u968e\u96e3\u89e3\u306b\u3057\u305f\u3044\u306a\u3089\u4e0b\u8a18\u306e\u3088\u3046\u306b\u3059\u308b\u306e\u3082\u304a\u3059\u3059\u3081\u3067\u3059\u3002\n    public static void disposeSample(BufferedImage image) {\n        Graphics graphics;\n        try (MyCloseable closeable = (graphics = image.createGraphics())::dispose) {\n            //\u51e6\u7406\n        }\n    }\n\n\nIterable\u3063\u3066\u3082\u3057\u304b\u3057\u3066\u95a2\u6570\u578b\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30fc\u30b9!??\nIterable\u306f@FunctionalInterface\u306f\u3082\u3061\u308d\u3093\u3064\u3044\u3066\u3044\u307e\u305b\u3093\u304c\u3001\n\u95a2\u6570\u578b\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30fc\u30b9\u306e\u5b9a\u7fa9\u304b\u3089\u3059\u308c\u3070\u95a2\u6570\u578b\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30fc\u30b9\u3067\u3059\u306d\u3002\n\u3064\u307e\u308a\u3001\n\nIterator\u3092\u62e1\u5f35for\u6587\u3067\u56de\u3059\n    /**\n     * Iterator\u3092\u62e1\u5f35for\u6587\u3067\u56de\u3059\u3002\n     */\n    public static void iteratorFor() {\n        Iterator<String> iterator = Arrays.asList(\"A\", \"B\", \"C\").iterator();//Iterator\u3092\u4f5c\u308a\u305f\u3044\u3060\u3051\u3002\n        for (String s : (Iterable<String>) () -> iterator) {\n            System.out.println(s);\n        }\n    }\n\n\u3068\u3059\u308b\u3068\u3001Iterator\u3067\u62e1\u5f35for\u6587\u304c\u4f7f\u3048\u308b\u308f\u3051\u3067\u3059\uff01\n\u3082\u3061\u308d\u3093\u4eca\u56de\u306e\u5834\u5408\u3001\u666e\u901a\u306fIterator#forEachRemaining\u3092\u4f7f\u3063\u3066\n    /**\n     * \u666e\u901a\u306bIterator#forEachRemaining\n     */\n    public static void iteratorFor() {\n        Iterator<String> iterator = Arrays.asList(\"A\", \"B\", \"C\").iterator();//Iterator\u3092\u4f5c\u308a\u305f\u3044\u3060\u3051\u3002\n        iterator.forEachRemaining(System.out::println);\n    }\n\n\u3068Java\u3055\u3093\u304b\u3089\u306f\u63a8\u5968\u3055\u308c\u305d\u3046\u3067\u3059\u304c\u3001\n\u3053\u306e\u5834\u5408\u3001break\u3067\u304d\u306a\u3044\u306e\u304c\u7389\u306b\u50b7\u3067\u3059\u306d\u3002\n    /**\n     * Iterator\u3092\u62e1\u5f35for\u6587\u3067\u56de\u3059\u3002\n     */\n    public static void iteratorFor() {\n        Iterator<String> iterator = Arrays.asList(\"A\", \"B\", \"C\").iterator();//Iterator\u3092\u4f5c\u308a\u305f\u3044\u3060\u3051\u3002\n        for (String s : (Iterable<String>) () -> iterator) {\n            if(s.equals(\"B\"))\n                break;\n            System.out.println(s);\n        }\n    }\n\n\u3068\u304b\u306d\u3002\n\nList\u30e9\u30a4\u30af\u306a\u60c5\u5831\u304b\u3089Stream\u751f\u6210\n\u3053\u308c\u306f\u96e3\u89e3\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0\u3067\u306f\u3042\u308a\u307e\u305b\u3093\u304c\u3001\u6b21\u306e\u30c6\u30fc\u30de\u306e\u4e0b\u6e96\u5099\u3067\u3059\u3002\nsize\u3063\u307d\u3044\u60c5\u5831\u3068\u3001get(index)\u3063\u307d\u3044\u30e1\u30bd\u30c3\u30c9\u304c\u3042\u308c\u3070Stream\u306b\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n    /**\n     * StringBuilder\u3092Character\u306eList\u306b\u3059\u308b<br>\n     * \u9014\u4e2dCharacter\u306eStream\u306b\u3057\u3066\u308b\n     */\n    public static List<Character> stringBuilderToCharList() {\n        StringBuilder sb = new StringBuilder(\"ABC\");\n        return IntStream.range(0, sb.length())\n                .mapToObj(sb::charAt)\n                .collect(Collectors.toList());\n    }\n\n\u53c2\u8003\uff1ahttp://www.ne.jp/asahi/hishidama/home/tech/java/stream.html#h_outline\n\u306e\u4f8b\u300cExcel\u306e\u30b7\u30fc\u30c8\u4e00\u89a7\u53d6\u5f97\u300d\n\u3055\u3042\u3053\u3053\u304b\u3089\u3001\n\nStream\u3092\u62e1\u5f35for\u6587\u3067\u56de\u3059\uff08List\u30e9\u30a4\u30af\u306a\u60c5\u5831\u3092\u62e1\u5f35for\u6587\u3067\u56de\u3059\uff09\nStream\u304b\u3089iterator()\u3092\u547c\u3073\u51fa\u3057\u3066\u30e9\u30e0\u30c0\u5f0f\u3067Iterable\u5316\u3059\u308c\u3070\u62e1\u5f35for\u6587\u304c\u4f7f\u3048\u307e\u3059\u3002\n    /**\n     * StringBuilder\u3092\u62e1\u5f35for\u6587\u3067\u56de\u3059\u3002\n     */\n    public static void stringBuilderFor() {\n        StringBuilder sb = new StringBuilder(\"ABC\");\n        for (Character c : (Iterable<Character>) () -> IntStream.range(0, sb.length()).mapToObj(sb::charAt)\n                .iterator()) {\n            System.out.println(c);\n        }\n    }\n\n\u3082\u3061\u308d\u3093Stream\u3082forEach\u30e1\u30bd\u30c3\u30c9\u6301\u3063\u3066\u308b\u306e\u3067\u901a\u5e38\u306f\u305d\u3061\u3089\u3092\u4f7f\u3046\u3079\u304d\u3067\u3059\u304c\u3001bre\uff08\u7565\uff09\n\u3067\u3082\u3067\u3082\u3001collect(Collectors.toList())\u3057\u305f\u3089\u666e\u901a\u306b\u62e1\u5f35for\u6587\u4f7f\u3048\u307e\u3059\u3088\u306d\uff1f\n\u305d\u306e\u901a\u308a\u3002\u4f7f\u3048\u307e\u3059\u304c\u6bd4\u8f03\u3057\u3066\u307f\u308b\u3068\u5927\u304d\u306a\u9055\u3044\u304c\u3042\u308a\u307e\u3059\u3002\n\n\u6e96\u5099\n    private static class ListLike {\n        public int size() {\n            return 10;\n        }\n\n        public String get(int index) {\n            System.out.println(\"get(\" + index + \")\");\n            return Integer.toString(index);\n        }\n    }\n\n\n\niterator\u304b\u3089\n    public static void iteratorFor() {\n        System.out.println(\"iteratorFor\");\n        ListLike list = new ListLike();\n        for (String s : (Iterable<String>) () -> IntStream.range(0, list.size())\n                .mapToObj(list::get)\n                .iterator()) {\n            if(s.equals(\"4\")){\n                break;\n            }\n            System.out.println(\"each \" + s);\n        }\n    }\n\n\n\ncollect\u304b\u3089\n    public static void collectFor() {\n        System.out.println(\"collectFor\");\n        ListLike list = new ListLike();\n        for (String s : IntStream.range(0, list.size())\n                .mapToObj(list::get)\n                .collect(Collectors.toList())) {\n            if(s.equals(\"4\")){\n                break;\n            }\n            System.out.println(\"each \" + s);\n        }\n    }\n\n\n\u5b9f\u884c\u7d50\u679c\u306f\u305d\u308c\u305e\u308c\n\niteratorFor\n\n\niteratorFor\nget(0)\neach 0\nget(1)\neach 1\nget(2)\neach 2\nget(3)\neach 3\nget(4)\n\n\ncollectFor\n\n\ncollectFor\nget(0)\nget(1)\nget(2)\nget(3)\nget(4)\nget(5)\nget(6)\nget(7)\nget(8)\nget(9)\neach 0\neach 1\neach 2\neach 3\n\n\u3068\u306a\u308acollect\u306f\u4e00\u56de\u30ea\u30b9\u30c8\u306b\u3059\u308b\u306e\u3067\u305d\u306e\u5206\u7121\u99c4\u304c\u3042\u308a\u307e\u3059\u3002\n\u3084\u306f\u308aIterable\u3092\u30e9\u30e0\u30c0\u5f0f\u3067\u751f\u6210\u3059\u308b\u306e\u304c\u30b9\u30de\u30fc\u30c8(!?)\u3067\u3059\u306d\uff01\n\n\u3053\u3061\u3089\u3082\u3069\u3046\u305e\nJava8\u304c\u597d\u304d\u306b\u306a\u308b\u8a71\uff08StreamAPI\u306e\u8a71\u306f\u3057\u306a\u3044\uff09 \u305d\u306e1 Map#computeIfAbsent\u3068List#sort\nJava8\u304c\u597d\u304d\u306b\u306a\u308b\u8a71\uff08StreamAPI\u306e\u8a71\u306f\u3057\u306a\u3044\uff09 \u305d\u306e2 Optional#map\nJava8\u304c\u597d\u304d\u306b\u306a\u308b\u8a71\uff08StreamAPI\u306e\u8a71\u306f\u3057\u306a\u3044\uff09 \u305d\u306e3 \u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30fc\u30b9\u306e\u30c7\u30d5\u30a9\u30eb\u30c8\u5b9f\u88c5\nJava8\u304c\u597d\u304d\u306b\u306a\u308b\u8a71\uff08StreamAPI\u306e\u8a71\u306f\u3057\u306a\u3044\uff09 \u305d\u306e4 \u30e9\u30e0\u30c0\u5f0f\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\nJava8\u306e\u826f\u3044\u306e\u304b\u60aa\u3044\u306e\u304b\u308f\u304b\u3089\u306a\u3044\u6d3b\u7528\u6cd5\u3092\u7d39\u4ecb\u3057\u307e\u3059\u3002\n\u82e5\u5e72\u96e3\u89e3\u306a\u306e\u3067\u8077\u5834\u3067\u6d3b\u7528\u3057\u3066\u5148\u8f29\u306b\u6012\u3089\u308c\u3066\u3082\u77e5\u308a\u307e\u305b\u3093\u3002\n\n#AutoCloseable\u3063\u3066\u3082\u3057\u304b\u3057\u3066\u95a2\u6570\u578b\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30fc\u30b9!??\nAutoCloseable\u306f@FunctionalInterface\u306f\u3082\u3061\u308d\u3093\u3064\u3044\u3066\u3044\u307e\u305b\u3093\u304c\u3001\n[\u95a2\u6570\u578b\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30fc\u30b9\u306e\u5b9a\u7fa9](http://www.ne.jp/asahi/hishidama/home/tech/java/functionalinterface.html#h_outline)\u304b\u3089\u3059\u308c\u3070\u95a2\u6570\u578b\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30fc\u30b9\u3067\u3059\u306d\u3002\n\n\u3064\u307e\u308a\n##AutoCloseable\u3067\u306a\u3044\u30af\u30e9\u30b9\u3092try-with-resources\u3067\u30af\u30ed\u30fc\u30ba\u3059\u308b\nGraphics\u306a\u3093\u304b\u307e\u3055\u306bdispose\u3081\u3093\u3069\u304f\u3055\u3044\u3067\u3059\u306d\u3002\n\n```java\n\t/**\n\t * \u81ea\u529b\u3067Graphics\u3092close\n\t */\n\tpublic static void disposeSample(BufferedImage image) {\n\t\tGraphics graphics = image.createGraphics();\n\t\ttry {\n\t\t\t//\u51e6\u7406\n\t\t} finally {\n\t\t\tgraphics.dispose();\n\t\t}\n\t}\n```\n\u7c21\u5358\u306b\u306f\u3053\u3046\u3067\u3059\u304c\u3001\u5834\u5408\u306b\u3088\u3063\u3066\u306fgraphics\u306enull\u5224\u5b9a\u5165\u308c\u305f\u308a\u3081\u3093\u3069\u304f\u3055\u3044\u3053\u3068\u3053\u306e\u4e0a\u306a\u3044\u3067\u3059\u3002\n\n\u3067\u3059\u304c\u30e1\u30bd\u30c3\u30c9\u53c2\u7167\u3067\n\n```java\n\t/**\n\t * \u30e9\u30e0\u30c0\u5f0f\u3067AutoCloseable\u5316\u3002try-with-resources\u306b\u3002\n\t */\n\tpublic static void disposeSample(BufferedImage image) {\n\t\tGraphics graphics = image.createGraphics();\n\t\ttry (AutoCloseable closeable = graphics::dispose) {\n\t\t\t//\u51e6\u7406\n\t\t} catch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t}\n```\n\n\u3068\u3059\u308b\u3068try-with-resources\u304c\u4f7f\u3048\u308b\u308f\u3051\u3067\u3059\n\u53c2\u8003\uff1a[AutoCloseable\u3067\u306a\u304f\u3066\u3082try-with-resources\u304c\u3057\u305f\u3044](http://irof.hateblo.jp/entry/20130105/p1)\n\n\u304c\u3001\u3053\u308c\u3060\u3068Exception\u3092catch\u3057\u306a\u3044\u3068\u3044\u3051\u306a\u3044\u306e\u3067\n\n```java\n\t/**\n\t * throws\u306a\u3057\u306eAutoCloseable\n\t */\n\tpublic interface MyCloseable extends AutoCloseable {\n\t\t@Override\n\t\tvoid close();\n\t}\n\n\t/**\n\t * catch\u304c\u4e0d\u8981\u306b\u306a\u3063\u305f\n\t */\n\tpublic static void disposeSample(BufferedImage image) {\n\t\tGraphics graphics = image.createGraphics();\n\t\ttry (MyCloseable closeable = graphics::dispose) {\n\t\t\t//\u51e6\u7406\n\t\t}\n\t}\n```\n\u3068\u3059\u308c\u3070\u5b8c\u74a7\u3067\u3059\uff01\uff01MyCloseable\u3092\u4e00\u3064\u4f5c\u3063\u3066\u304a\u304d\u307e\u3057\u3087\u3046\uff01\n\n\n\u3082\u3046\u4e00\u6bb5\u968e\u96e3\u89e3\u306b\u3057\u305f\u3044\u306a\u3089\u4e0b\u8a18\u306e\u3088\u3046\u306b\u3059\u308b\u306e\u3082\u304a\u3059\u3059\u3081\u3067\u3059\u3002\n\n```java\n\tpublic static void disposeSample(BufferedImage image) {\n\t\tGraphics graphics;\n\t\ttry (MyCloseable closeable = (graphics = image.createGraphics())::dispose) {\n\t\t\t//\u51e6\u7406\n\t\t}\n\t}\n```\n\n#Iterable\u3063\u3066\u3082\u3057\u304b\u3057\u3066\u95a2\u6570\u578b\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30fc\u30b9!??\nIterable\u306f@FunctionalInterface\u306f\u3082\u3061\u308d\u3093\u3064\u3044\u3066\u3044\u307e\u305b\u3093\u304c\u3001\n[\u95a2\u6570\u578b\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30fc\u30b9\u306e\u5b9a\u7fa9](http://www.ne.jp/asahi/hishidama/home/tech/java/functionalinterface.html#h_outline)\u304b\u3089\u3059\u308c\u3070\u95a2\u6570\u578b\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30fc\u30b9\u3067\u3059\u306d\u3002\n\n\u3064\u307e\u308a\u3001\n##Iterator\u3092\u62e1\u5f35for\u6587\u3067\u56de\u3059\n\n```java\n\t/**\n\t * Iterator\u3092\u62e1\u5f35for\u6587\u3067\u56de\u3059\u3002\n\t */\n\tpublic static void iteratorFor() {\n\t\tIterator<String> iterator = Arrays.asList(\"A\", \"B\", \"C\").iterator();//Iterator\u3092\u4f5c\u308a\u305f\u3044\u3060\u3051\u3002\n\t\tfor (String s : (Iterable<String>) () -> iterator) {\n\t\t\tSystem.out.println(s);\n\t\t}\n\t}\n```\n\u3068\u3059\u308b\u3068\u3001Iterator\u3067\u62e1\u5f35for\u6587\u304c\u4f7f\u3048\u308b\u308f\u3051\u3067\u3059\uff01\n\n\u3082\u3061\u308d\u3093\u4eca\u56de\u306e\u5834\u5408\u3001\u666e\u901a\u306fIterator#forEachRemaining\u3092\u4f7f\u3063\u3066\n\n```java\n\t/**\n\t * \u666e\u901a\u306bIterator#forEachRemaining\n\t */\n\tpublic static void iteratorFor() {\n\t\tIterator<String> iterator = Arrays.asList(\"A\", \"B\", \"C\").iterator();//Iterator\u3092\u4f5c\u308a\u305f\u3044\u3060\u3051\u3002\n\t\titerator.forEachRemaining(System.out::println);\n\t}\n```\n\u3068Java\u3055\u3093\u304b\u3089\u306f\u63a8\u5968\u3055\u308c\u305d\u3046\u3067\u3059\u304c\u3001\n\u3053\u306e\u5834\u5408\u3001**break\u3067\u304d\u306a\u3044**\u306e\u304c\u7389\u306b\u50b7\u3067\u3059\u306d\u3002\n\n```java\n\t/**\n\t * Iterator\u3092\u62e1\u5f35for\u6587\u3067\u56de\u3059\u3002\n\t */\n\tpublic static void iteratorFor() {\n\t\tIterator<String> iterator = Arrays.asList(\"A\", \"B\", \"C\").iterator();//Iterator\u3092\u4f5c\u308a\u305f\u3044\u3060\u3051\u3002\n\t\tfor (String s : (Iterable<String>) () -> iterator) {\n\t\t\tif(s.equals(\"B\"))\n\t\t\t\tbreak;\n\t\t\tSystem.out.println(s);\n\t\t}\n\t}\n```\n\u3068\u304b\u306d\u3002\n\n##List\u30e9\u30a4\u30af\u306a\u60c5\u5831\u304b\u3089Stream\u751f\u6210\n\u3053\u308c\u306f\u96e3\u89e3\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0\u3067\u306f\u3042\u308a\u307e\u305b\u3093\u304c\u3001\u6b21\u306e\u30c6\u30fc\u30de\u306e\u4e0b\u6e96\u5099\u3067\u3059\u3002\nsize\u3063\u307d\u3044\u60c5\u5831\u3068\u3001get(index)\u3063\u307d\u3044\u30e1\u30bd\u30c3\u30c9\u304c\u3042\u308c\u3070Stream\u306b\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\n```java\n\t/**\n\t * StringBuilder\u3092Character\u306eList\u306b\u3059\u308b<br>\n\t * \u9014\u4e2dCharacter\u306eStream\u306b\u3057\u3066\u308b\n\t */\n\tpublic static List<Character> stringBuilderToCharList() {\n\t\tStringBuilder sb = new StringBuilder(\"ABC\");\n\t\treturn IntStream.range(0, sb.length())\n\t\t\t\t.mapToObj(sb::charAt)\n\t\t\t\t.collect(Collectors.toList());\n\t}\n```\n\u53c2\u8003\uff1ahttp://www.ne.jp/asahi/hishidama/home/tech/java/stream.html#h_outline\n\u306e\u4f8b\u300cExcel\u306e\u30b7\u30fc\u30c8\u4e00\u89a7\u53d6\u5f97\u300d\n\n\u3055\u3042\u3053\u3053\u304b\u3089\u3001\n##Stream\u3092\u62e1\u5f35for\u6587\u3067\u56de\u3059\uff08List\u30e9\u30a4\u30af\u306a\u60c5\u5831\u3092\u62e1\u5f35for\u6587\u3067\u56de\u3059\uff09\nStream\u304b\u3089iterator()\u3092\u547c\u3073\u51fa\u3057\u3066\u30e9\u30e0\u30c0\u5f0f\u3067Iterable\u5316\u3059\u308c\u3070\u62e1\u5f35for\u6587\u304c\u4f7f\u3048\u307e\u3059\u3002\n\n```java\n\t/**\n\t * StringBuilder\u3092\u62e1\u5f35for\u6587\u3067\u56de\u3059\u3002\n\t */\n\tpublic static void stringBuilderFor() {\n\t\tStringBuilder sb = new StringBuilder(\"ABC\");\n\t\tfor (Character c : (Iterable<Character>) () -> IntStream.range(0, sb.length()).mapToObj(sb::charAt)\n\t\t\t\t.iterator()) {\n\t\t\tSystem.out.println(c);\n\t\t}\n\t}\n```\n\n\u3082\u3061\u308d\u3093Stream\u3082forEach\u30e1\u30bd\u30c3\u30c9\u6301\u3063\u3066\u308b\u306e\u3067\u901a\u5e38\u306f\u305d\u3061\u3089\u3092\u4f7f\u3046\u3079\u304d\u3067\u3059\u304c\u3001**bre**\uff08\u7565\uff09\n\n\u3067\u3082\u3067\u3082\u3001collect(Collectors.toList())\u3057\u305f\u3089\u666e\u901a\u306b\u62e1\u5f35for\u6587\u4f7f\u3048\u307e\u3059\u3088\u306d\uff1f\n\u305d\u306e\u901a\u308a\u3002\u4f7f\u3048\u307e\u3059\u304c\u6bd4\u8f03\u3057\u3066\u307f\u308b\u3068\u5927\u304d\u306a\u9055\u3044\u304c\u3042\u308a\u307e\u3059\u3002\n\n```java:\u6e96\u5099\n\tprivate static class ListLike {\n\t\tpublic int size() {\n\t\t\treturn 10;\n\t\t}\n\n\t\tpublic String get(int index) {\n\t\t\tSystem.out.println(\"get(\" + index + \")\");\n\t\t\treturn Integer.toString(index);\n\t\t}\n\t}\n```\n\n```java:iterator\u304b\u3089\n\tpublic static void iteratorFor() {\n\t\tSystem.out.println(\"iteratorFor\");\n\t\tListLike list = new ListLike();\n\t\tfor (String s : (Iterable<String>) () -> IntStream.range(0, list.size())\n\t\t\t\t.mapToObj(list::get)\n\t\t\t\t.iterator()) {\n\t\t\tif(s.equals(\"4\")){\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tSystem.out.println(\"each \" + s);\n\t\t}\n\t}\n```\n\n```java:collect\u304b\u3089\n\tpublic static void collectFor() {\n\t\tSystem.out.println(\"collectFor\");\n\t\tListLike list = new ListLike();\n\t\tfor (String s : IntStream.range(0, list.size())\n\t\t\t\t.mapToObj(list::get)\n\t\t\t\t.collect(Collectors.toList())) {\n\t\t\tif(s.equals(\"4\")){\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tSystem.out.println(\"each \" + s);\n\t\t}\n\t}\n```\n\n\u5b9f\u884c\u7d50\u679c\u306f\u305d\u308c\u305e\u308c\n\n* iteratorFor\n\n>iteratorFor\n>get(0)\n>each 0\n>get(1)\n>each 1\n>get(2)\n>each 2\n>get(3)\n>each 3\n>get(4)\n\n* collectFor\n\n>collectFor\n>get(0)\n>get(1)\n>get(2)\n>get(3)\n>get(4)\n>get(5)\n>get(6)\n>get(7)\n>get(8)\n>get(9)\n>each 0\n>each 1\n>each 2\n>each 3\n\n\n\u3068\u306a\u308acollect\u306f\u4e00\u56de\u30ea\u30b9\u30c8\u306b\u3059\u308b\u306e\u3067\u305d\u306e\u5206\u7121\u99c4\u304c\u3042\u308a\u307e\u3059\u3002\n\u3084\u306f\u308aIterable\u3092\u30e9\u30e0\u30c0\u5f0f\u3067\u751f\u6210\u3059\u308b\u306e\u304c\u30b9\u30de\u30fc\u30c8(!?)\u3067\u3059\u306d\uff01\n\n---\n\n\u3053\u3061\u3089\u3082\u3069\u3046\u305e\n[Java8\u304c\u597d\u304d\u306b\u306a\u308b\u8a71\uff08StreamAPI\u306e\u8a71\u306f\u3057\u306a\u3044\uff09 \u305d\u306e1 Map#computeIfAbsent\u3068List#sort](http://qiita.com/ota-meshi/items/31f36d38d4da8fce3c57)\n[Java8\u304c\u597d\u304d\u306b\u306a\u308b\u8a71\uff08StreamAPI\u306e\u8a71\u306f\u3057\u306a\u3044\uff09 \u305d\u306e2 Optional#map](http://qiita.com/ota-meshi/items/dbdd592b613e38b7a4bb)\n[Java8\u304c\u597d\u304d\u306b\u306a\u308b\u8a71\uff08StreamAPI\u306e\u8a71\u306f\u3057\u306a\u3044\uff09 \u305d\u306e3 \u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30fc\u30b9\u306e\u30c7\u30d5\u30a9\u30eb\u30c8\u5b9f\u88c5](http://qiita.com/ota-meshi/items/43811647af9daed4d21e)\n[Java8\u304c\u597d\u304d\u306b\u306a\u308b\u8a71\uff08StreamAPI\u306e\u8a71\u306f\u3057\u306a\u3044\uff09 \u305d\u306e4 \u30e9\u30e0\u30c0\u5f0f\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9](http://qiita.com/ota-meshi/items/86e22b790d54819e2012)\n", "tags": ["Java", "java8"]}