{"context": " More than 1 year has passed since last update.\u7b2c3\u56de\u30aa\u30d5\u30e9\u30a4\u30f3\u30ea\u30a2\u30eb\u30bf\u30a4\u30e0\u3069\u3046\u66f8\u304f\u306e\u554f\u984c\u3092Dart\u3067\u89e3\u3044\u3066\u307f\u307e\u3057\u305f\u3002\nimport \"dart:collection\";\n\nmain() {\n  test(\"b\", \"AB\");\n  test(\"l\", \"AD\");\n  test(\"r\", \"AC\");\n  test(\"bbb\", \"ABAB\");\n  test(\"rrr\", \"ACBA\");\n  test(\"blll\", \"ABCAB\");\n  test(\"llll\", \"ADEBA\");\n  test(\"rbrl\", \"ACADE\");\n  test(\"brrrr\", \"ABEDAB\");\n  test(\"llrrr\", \"ADEFDE\");\n  test(\"lrlll\", \"ADFEDF\");\n  test(\"lrrrr\", \"ADFCAD\");\n  test(\"rllll\", \"ACFDAC\");\n  test(\"blrrrr\", \"ABCFEBC\");\n  test(\"brllll\", \"ABEFCBE\");\n  test(\"bbrllrrr\", \"ABACFDEFD\");\n  test(\"rrrrblll\", \"ACBACABCA\");\n  test(\"llrlrrbrb\", \"ADEFCADABA\");\n  test(\"rrrbrllrr\", \"ACBABEFCAD\");\n  test(\"llrllblrll\", \"ADEFCBCADEB\");\n  test(\"lrrlllrbrl\", \"ADFCBEFDFCB\");\n  test(\"lllrbrrlbrl\", \"ADEBCBACFCAB\");\n  test(\"rrrrrrlrbrl\", \"ACBACBADFDEB\");\n  test(\"lbrbbrbrbbrr\", \"ADABABEBCBCFE\");\n  test(\"rrrrlbrblllr\", \"ACBACFCACFDAB\");\n  test(\"lbbrblrlrlbll\", \"ADADFDABCFDFED\");\n  test(\"rrbbrlrlrblrl\", \"ACBCBADFEBEFDA\");\n  test(\"blrllblbrrrrll\", \"ABCFDADEDABEDFE\");\n  test(\"blrllrlbllrrbr\", \"ABCFDABCBEFDEDA\");\n  test(\"lbrbbrllllrblrr\", \"ADABABEFCBEDEBCF\");\n  test(\"rrrrbllrlrbrbrr\", \"ACBACABCFDEDADFC\");\n  print(\"ok\");\n}\n\ntest(String input, String expect) {\n  var q = new ListQueue.from(input.split(\"\"));\n  assert(walk(q, \"B\", \"A\") == expect);\n}\n\nfinal graph = {\n  \"A\": \"BCD\",\n  \"B\": \"CAE\",\n  \"C\": \"ABF\",\n  \"D\": \"EAF\",\n  \"E\": \"FBD\",\n  \"F\": \"CED\",\n};\n\nString walk(Queue input, String from, String to) {\n  if(input.isEmpty) return to;\n\n  String direction = input.removeFirst();\n  if(direction == \"b\") return to.concat(walk(input, to, from));\n\n  String nexts = graph[to].concat(graph[to]);\n  int i = nexts.indexOf(from);\n  String lr = nexts.slice(i + 1, i + 3);\n  return to.concat(walk(input, to, lr[direction == \"l\" ? 1 : 0]));\n}\n\n\u7b2c3\u56de\u30aa\u30d5\u30e9\u30a4\u30f3\u30ea\u30a2\u30eb\u30bf\u30a4\u30e0\u3069\u3046\u66f8\u304f\u306e\u554f\u984c\u3092Dart\u3067\u89e3\u3044\u3066\u307f\u307e\u3057\u305f\u3002\n\n```dart\nimport \"dart:collection\";\n\nmain() {\n  test(\"b\", \"AB\");\n  test(\"l\", \"AD\");\n  test(\"r\", \"AC\");\n  test(\"bbb\", \"ABAB\");\n  test(\"rrr\", \"ACBA\");\n  test(\"blll\", \"ABCAB\");\n  test(\"llll\", \"ADEBA\");\n  test(\"rbrl\", \"ACADE\");\n  test(\"brrrr\", \"ABEDAB\");\n  test(\"llrrr\", \"ADEFDE\");\n  test(\"lrlll\", \"ADFEDF\");\n  test(\"lrrrr\", \"ADFCAD\");\n  test(\"rllll\", \"ACFDAC\");\n  test(\"blrrrr\", \"ABCFEBC\");\n  test(\"brllll\", \"ABEFCBE\");\n  test(\"bbrllrrr\", \"ABACFDEFD\");\n  test(\"rrrrblll\", \"ACBACABCA\");\n  test(\"llrlrrbrb\", \"ADEFCADABA\");\n  test(\"rrrbrllrr\", \"ACBABEFCAD\");\n  test(\"llrllblrll\", \"ADEFCBCADEB\");\n  test(\"lrrlllrbrl\", \"ADFCBEFDFCB\");\n  test(\"lllrbrrlbrl\", \"ADEBCBACFCAB\");\n  test(\"rrrrrrlrbrl\", \"ACBACBADFDEB\");\n  test(\"lbrbbrbrbbrr\", \"ADABABEBCBCFE\");\n  test(\"rrrrlbrblllr\", \"ACBACFCACFDAB\");\n  test(\"lbbrblrlrlbll\", \"ADADFDABCFDFED\");\n  test(\"rrbbrlrlrblrl\", \"ACBCBADFEBEFDA\");\n  test(\"blrllblbrrrrll\", \"ABCFDADEDABEDFE\");\n  test(\"blrllrlbllrrbr\", \"ABCFDABCBEFDEDA\");\n  test(\"lbrbbrllllrblrr\", \"ADABABEFCBEDEBCF\");\n  test(\"rrrrbllrlrbrbrr\", \"ACBACABCFDEDADFC\");\n  print(\"ok\");\n}\n\ntest(String input, String expect) {\n  var q = new ListQueue.from(input.split(\"\"));\n  assert(walk(q, \"B\", \"A\") == expect);\n}\n\nfinal graph = {\n  \"A\": \"BCD\",\n  \"B\": \"CAE\",\n  \"C\": \"ABF\",\n  \"D\": \"EAF\",\n  \"E\": \"FBD\",\n  \"F\": \"CED\",\n};\n\nString walk(Queue input, String from, String to) {\n  if(input.isEmpty) return to;\n\n  String direction = input.removeFirst();\n  if(direction == \"b\") return to.concat(walk(input, to, from));\n\n  String nexts = graph[to].concat(graph[to]);\n  int i = nexts.indexOf(from);\n  String lr = nexts.slice(i + 1, i + 3);\n  return to.concat(walk(input, to, lr[direction == \"l\" ? 1 : 0]));\n}\n```", "tags": ["Dart", "\u3069\u3046\u66f8\u304f"]}