{"context": "\n\n\u306f\u3058\u3081\u306b\nElixir\u306b\u3066Cowboy\u3092\u76f4\u63a5\u52d5\u304b\u3059\u305f\u3081\u306e\u8a18\u4e8b\u3068\u306a\u308a\u307e\u3059\u3002\nCowboy1.0\u306e\u524d\u56de\u3084Cowboy2.0\u306e\u524d\u56de\u306e\u8a18\u4e8b\u3067\u306f\u3001cowboy\u306b\u3066HTML\u30da\u30fc\u30b8\u306e\u8868\u793a\u3092\u884c\u3044\u307e\u3057\u305f\u3002\n\u4eca\u56de\u306fjson\u3092\u8fd4\u3059API\u306e\u306a\u308a\u305d\u3053\u306a\u3044\u306e\u5b9f\u88c5\u3092\u884c\u3063\u3066\u3044\u304d\u307e\u3059\u3002\n1.0\u30682.0\u306e\u8a18\u4e8b\u3092\u307e\u3068\u3081\u308d\u3063\u3068\u5916\u90e8\u304b\u3089\u306e\u58f0\u304c\u3042\u308a\u307e\u3057\u305f\u306e\u3067\u3001\u4eca\u56de\u304b\u3089\u8a18\u4e8b\u3092\u307e\u3068\u3081\u3066\u3044\u304d\u305f\u3044\u3068\u601d\u3044\u307e\u3059\u3002\nCowboy1.0\u306e\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u306f\u3053\u3061\u3089\u306b\u306a\u308a\u307e\u3059\nCowboy2.0\u306e\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u306f\u3053\u3061\u3089\u306b\u306a\u308a\u307e\u3059\n\n\u30d0\u30fc\u30b8\u30e7\u30f3\n\u4f7f\u7528\u3057\u305f\u8a00\u8a9e\u3084\u30e9\u30a4\u30d6\u30e9\u30ea\u306e\u30d0\u30fc\u30b8\u30e7\u30f3\u306f\u4e0b\u8a18\u3068\u306a\u308a\u307e\u3059\u3002\n\ncowboy 1.0\u306e\u30d0\u30fc\u30b8\u30e7\u30f3\n\n\n\n\nVersion\n\n\n\n\nElixir\n1.3.2\n\n\nErlang\n19.2\n\n\nCowboy\n1.0.4\n\n\n\n\ncowboy 2.0\u306e\u30d0\u30fc\u30b8\u30e7\u30f3\n\n\n\n\nVersion\n\n\n\n\nElixir\n1.3.2\n\n\nErlang\n19.2\n\n\nCowboy\n2.0.0-pre4\n\n\n\n\n\u6bce\u56de\u540c\u3058JSON\u3092\u8fd4\u3059API\u306e\u4f5c\u6210\n\u3055\u3066\u3001\u307e\u305a\u5b9f\u88c5\u3059\u308bJSON\u306eAPI\u3067\u3059\u304c\u3001\u6bce\u56de\u540c\u3058\u5185\u5bb9\u306eJSON\u3092\u8fd4\u3059API\u3092\u4f5c\u6210\u3057\u3066\u3044\u304d\u307e\u3059\u3002\n\u6bce\u56de\u540c\u3058\u5185\u5bb9\u3092\u8fd4\u3059API\u306b\u4f55\u306e\u610f\u5473\u304c\u3042\u308b\u306e\u304b\uff1f\u3063\u3068\u3044\u3046\u8a71\u3082\u3042\u308a\u307e\u3059\u304c\u3001\u6700\u521d\u306e\u6700\u521d\u3068\u3057\u3066\u5b9f\u88c5\u3057\u3066\u3044\u304d\u307e\u3059\u3002\n\ncowboy 1.0\u306e\u5834\u5408\n\nlib/elixir_cowboy_example/json_handler.ex\ndefmodule ElixirCowboyExample.JsonHandler do\n  def init({:tcp, :http}, req, opts) do\n    {:ok, req, opts}\n  end\n\n  def handle(req, state) do\n    {method, req} = :cowboy_req.method(req)\n    {:ok, req} = json_example(method, req)\n    {:ok, req, state}\n  end\n\n  # body\u306b \"{\\\"title\\\": \\\"hello cowboy!\\\"}\" \u3092\u8a2d\u5b9a\u3057\u3001\n  # json\u3092\u8fd4\u3059\u3088\u3046\u306bheaders\u3092\u8a2d\u5b9a\n  def json_example(\"POST\", req) do\n    headers = [{\"content-type\", \"application/json\"}]\n    body = \"{\\\"title\\\": \\\"hello cowboy!\\\"}\"\n    {:ok, resp} = :cowboy_req.reply(200, headers, body, req)\n  end\n\n  def terminate(_reason, _req, _state) do\n    :ok\n  end\nend\n\n\n\nlib/elixir_cowboy_example.ex\n  def run do\n    # http://localhost:4000/json \u306b\u30a2\u30af\u30bb\u30b9\u3057\u305f\u969b\u306b\n    # json\u3092\u8fd4\u3059\u3088\u3046\u306bHandler\u306e\u8a2d\u5b9a\n    routes = [\n      {\"/\", ElixirCowboyExample.Handler, []},\n      {\"/json\", ElixirCowboyExample.JsonHandler, []},\n      {\"/:html\", ElixirCowboyExample.Handler, []}\n    ]\n\n    dispatch = :cowboy_router.compile([{:_, routes}])\n\n    opts = [port: 4000]\n    env = [dispatch: dispatch]\n\n    {:ok, _pid} = :cowboy.start_http(:http, 100, opts, [env: env])\n  end\n\n\n\ncowboy 2.0\u306e\u5834\u5408\n\nlib/elixir_cowboy_example/json_handler.ex\ndefmodule ElixirCowboyExample.JsonHandler do\n  def init(req, opts) do\n    method = :cowboy_req.method(req)\n    {:ok, resp} = json_example(method, req)\n    {:ok, resp, opts}\n  end\n\n  # body\u306b \"{\\\"title\\\": \\\"hello cowboy!\\\"}\" \u3092\u8a2d\u5b9a\u3057\u3001\n  # json\u3092\u8fd4\u3059\u3088\u3046\u306bheaders\u3092\u8a2d\u5b9a\n  def json_example(\"POST\", req) do\n    headers = %{\"content-type\" => \"application/json\"}\n    body = \"{\\\"title\\\": \\\"hello cowboy!\\\"}\"\n    {:ok, resp} = :cowboy_req.reply(200, headers, body, req)\n  end\nend\n\n\n\nlib/elixir_cowboy_example.ex\n  def run do\n    # http://localhost:4000/json \u306b\u30a2\u30af\u30bb\u30b9\u3057\u305f\u969b\u306b\n    # json\u3092\u8fd4\u3059\u3088\u3046\u306bHandler\u306e\u8a2d\u5b9a\n    routes = [\n      {\"/\", ElixirCowboyExample.Handler, []},\n      {\"/json\", ElixirCowboyExample.JsonHandler, []},\n      {\"/:html\", ElixirCowboyExample.Handler, []}\n    ]\n\n    dispatch = :cowboy_router.compile([{:_, routes}])\n\n    opts = [{:port, 4000}]\n    env = %{dispatch: dispatch}\n\n    {:ok, _pid} = :cowboy.start_clear(:http, 100, opts, %{env: env})\n  end\n\n\n\n\u8a18\u8f09\u3057\u305f\u30b3\u30fc\u30c9\u306e\u5b9f\u884c\n\u30b3\u30fc\u30c9\u306e\u8a18\u8ff0\u304c\u5b8c\u4e86\u3057\u307e\u3057\u305f\u306e\u3067\u3001\u305d\u308c\u3067\u306f\u5b9f\u884c\u3057\u3066\u3044\u304d\u307e\u3057\u3087\u3046\u3002\n\u3044\u3064\u3082\u901a\u308a iex -S mix \u306b\u3066 cowboy \u3092\u5b9f\u884c\u3057\u3066\u3044\u304d\u307e\u3059\u3002\n\u4eca\u56de\u306f\u3001json\u3092\u8fd4\u3059API\u3067\u3059\u306e\u3067\u3001curl\u3067\u5b9f\u884c\u3057\u3066\u3044\u304d\u307e\u3059\u3002\n$ curl -v -H \"Accept: application/json\" -H \"Content-type: application/json\" -X POST http://localhost:4000/json\n*   Trying 127.0.0.1...\n* Connected to localhost (127.0.0.1) port 4000 (#0)\n> POST /json HTTP/1.1\n> Host: localhost:4000\n> User-Agent: curl/7.43.0\n> Accept: application/json\n> Content-type: application/json\n> Content-Length: 23\n> \n* upload completely sent off: 23 out of 23 bytes\n< HTTP/1.1 200 OK\n< content-length: 26\n< content-type: application/json\n< date: Sat, 07 Jan 2017 06:59:11 GMT\n< server: Cowboy\n< \n* Connection #0 to host localhost left intact\n{\"title\": \"hello cowboy!\"}\n\n\n\u53d7\u3051\u53d6\u3063\u305f\u30d1\u30e9\u30e1\u30fc\u30bf\u304b\u3089json\u3092\u8fd4\u3059\n\u6bce\u56de\u540c\u3058json\u3092\u8fd4\u3059API\u306b\u306f\u610f\u5473\u304c\u306a\u3044\u306e\u3067\u3001\u4eca\u56de\u306f\u53d7\u3051\u53d6\u3063\u305f\u30d1\u30e9\u30e1\u30fc\u30bf\u306e\u5185\u5bb9\u3092Json\u5f62\u5f0f\u306b\u3066\u8fd4\u3059API\u3092\u5b9f\u88c5\u3057\u3066\u3044\u304d\u307e\u3059\u3002\n\u4eca\u56de\u306e\u5b9f\u88c5\u3067\u306f\u53d7\u3051\u53d6\u3063\u305f\u30d1\u30e9\u30e1\u30fc\u30bf\u304c\u8907\u6570\u3042\u3063\u305f\u3068\u3057\u3066\u3082\u4e00\u756a\u6700\u521d\u306e\u3082\u306e\u3057\u304b\u53d7\u3051\u53d6\u308a\u307e\u305b\u3093\u3057\u3001\u30a8\u30e9\u30fc\u51e6\u7406\u3082\u5b9f\u969b\u306b\u4f7f\u3046\u305f\u3081\u306b\u306f\u5fc5\u8981\u3067\u3059\u304c\u3001\u30d1\u30e9\u30e1\u30fc\u30bf\u306e\u53d7\u3051\u6e21\u3057\u3092\u307f\u308b\u305f\u3081\u306a\u306e\u3067\u3001\u305d\u306e\u8fba\u308a\u306f\u6c17\u306b\u305b\u305a\u3044\u304d\u307e\u3059\u3002\n\ncowboy 1.0\u306e\u5834\u5408\n\nlib/elixir_cowboy_example/json_handler.ex\ndefmodule ElixirCowboyExample.JsonHandler do\n  def init({:tcp, :http}, req, opts) do\n    {:ok, req, opts}\n  end\n\n  def handle(req, state) do\n    {method, req} = :cowboy_req.method(req)\n    # body\u306e\u4e2d\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u306e\u60c5\u5831\u3092\u53d6\u5f97\u3059\u308b\n    {:ok, params, req} = :cowboy_req.body_qs(req)\n    {:ok, req} = json_example(method, params, req)\n    {:ok, req, state}\n  end\n\n  def json_example(\"POST\", :undefined , req) do\n    headers = [{\"content-type\", \"application/json\"}]\n    body = \"{\\\"title\\\": \\\"hello cowboy!\\\"}\"\n    {:ok, resp} = :cowboy_req.reply(200, headers, body, req)\n  end\n\n  def json_example(\"POST\", params, req) do\n    # \u4e0a\u8a18\u306b\u3066\u53d7\u3051\u53d6\u3063\u305f\u30d1\u30e9\u30e1\u30fc\u30bf\u306f\u30ea\u30b9\u30c8\u306e\u4e2d\u306btuple\u3067\u5165\u3063\u3066\u3044\u308b\u306e\u3067\n    # \u60c5\u5831\u306e\u629c\u304d\u51fa\u3057\u3092\u304a\u3053\u306a\u3046\n    param = params |> Enum.at(0) |> elem(1)\n    headers = [{\"content-type\", \"application/json\"}]\n    body = \"{\\\"title\\\": \\\"#{param}\\\"}\"\n    {:ok, resp} = :cowboy_req.reply(200, headers, body, req)\n  end\n\n  def terminate(_reason, _req, _state) do\n    :ok\n  end\nend\n\n\n\ncowboy 2.0\u306e\u5834\u5408\n\nlib/elixir_cowboy_example/json_handler.ex\ndefmodule ElixirCowboyExample.JsonHandler do\n  def init(req, opts) do\n    method = :cowboy_req.method(req)\n    # body\u306e\u4e2d\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u306e\u60c5\u5831\u3092\u53d6\u5f97\u3059\u308b\n    # cowboy2.0 \u3067\u306f\u30e1\u30bd\u30c3\u30c9\u540d\u304c\u5909\u308f\u3063\u305f\u3082\u3088\u3046\n    {ok, params, req} = :cowboy_req.read_urlencoded_body(req)\n    {:ok, resp} = json_example(method, params, req)\n    {:ok, resp, opts}\n  end\n\n  def json_example(\"POST\", :undefined, req) do\n    headers = %{\"content-type\" => \"application/json\"}\n    body = \"{\\\"title\\\": \\\"hello cowboy!\\\"}\"\n    {:ok, resp} = :cowboy_req.reply(200, headers, body, req)\n  end\n\n  def json_example(\"POST\", params, req) do\n    # \u4e0a\u8a18\u306b\u3066\u53d7\u3051\u53d6\u3063\u305f\u30d1\u30e9\u30e1\u30fc\u30bf\u306f\u30ea\u30b9\u30c8\u306e\u4e2d\u306btuple\u3067\u5165\u3063\u3066\u3044\u308b\u306e\u3067\n    # \u60c5\u5831\u306e\u629c\u304d\u51fa\u3057\u3092\u304a\u3053\u306a\u3046\n    param = params |> Enum.at(0) |> elem(1)\n    headers = %{\"content-type\" => \"application/json\"}\n    body = \"{\\\"title\\\": \\\"#{param}\\\"}\"\n    {:ok, resp} = :cowboy_req.reply(200, headers, body, req)\n  end\nend\n\n\n\n\u8a18\u8f09\u3057\u305f\u30b3\u30fc\u30c9\u306e\u5b9f\u884c\n\u30b3\u30fc\u30c9\u306e\u8a18\u8ff0\u304c\u5b8c\u4e86\u3057\u307e\u3057\u305f\u306e\u3067\u3001\u305d\u308c\u3067\u306f\u5b9f\u884c\u3057\u3066\u3044\u304d\u307e\u3057\u3087\u3046\u3002\n\u4e0a\u8a18\u3067\u5b9f\u884c\u3057\u305fcurl\u306b\u5408\u308f\u305b\u3066\u3001-d \u30aa\u30d7\u30b7\u30e7\u30f3\u306b\u3066 \u30d1\u30e9\u30e1\u30fc\u30bf\u306e\u53d7\u3051\u6e21\u3057\u3092\u5b9f\u65bd\u3057\u307e\u3059\u3002\n\u7d50\u679c\u3068\u3057\u3066\u30d1\u30e9\u30e1\u30fc\u30bf\u3067\u6e21\u3057\u305f\u5185\u5bb9\u304c\u8fd4\u3063\u3066\u304f\u308b\u3053\u3068\u304c\u898b\u3066\u53d6\u308c\u307e\u3059\n$ curl -v -H \"Accept: application/json\" -H \"Content-type: application/json\" -X POST -d 'title=test1' http://localhost:4000/json\n*   Trying 127.0.0.1...\n* Connected to localhost (127.0.0.1) port 4000 (#0)\n> POST /json HTTP/1.1\n> Host: localhost:4000\n> User-Agent: curl/7.43.0\n> Accept: application/json\n> Content-type: application/json\n> Content-Length: 23\n> \n* upload completely sent off: 23 out of 23 bytes\n< HTTP/1.1 200 OK\n< content-length: 18\n< content-type: application/json\n< date: Sun, 08 Jan 2017 00:18:26 GMT\n< server: Cowboy\n< \n* Connection #0 to host localhost left intact\n{\"title\": \"test1\"}\n\n\n\u6700\u5f8c\u306b\nJSON\u3092\u8fd4\u3059API\u306e\u5b9f\u88c5\u3092\u304a\u3053\u306a\u3046\u3053\u3068\u304c\u3067\u304d\u307e\u3057\u305f\u3002\n\u53d7\u3051\u53d6\u3063\u305f\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u51e6\u7406\u3059\u308b\u3053\u3068\u3082\u3067\u304d\u307e\u3057\u305f\u306e\u3067\u3001\u53d7\u3051\u53d6\u3063\u305f\u30d1\u30e9\u30e1\u30fc\u30bf\u306e\u5185\u5bb9\u304b\u3089Ecto\u304b\u3089\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u306b\u30a2\u30af\u30bb\u30b9\u3057\u3066JSON\u3092\u8fd4\u3059\u3053\u3068\u3082\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u3063\u305f\u306e\u3067\u306f\u306a\u3044\u3067\u3057\u3087\u3046\u304b\uff1f\n\u305d\u306e\u8fba\u308a\u3092\u5b9f\u969b\u306b\u884c\u3063\u3066\u3044\u304f\u306e\u306f\u6b21\u56de\u4ee5\u964d\u306e\u3069\u3053\u304b\u3067\u884c\u3048\u305f\u3089\u884c\u3063\u3066\u3044\u304d\u305f\u3044\u3068\u8003\u3048\u3066\u304a\u308a\u307e\u3059\u3002\n\u305d\u308c\u3067\u306f\u307e\u305f\u6b21\u56de\n\n\u53c2\u8003\u30b5\u30a4\u30c8\nCowboy User Guide\n# \u306f\u3058\u3081\u306b\nElixir\u306b\u3066Cowboy\u3092\u76f4\u63a5\u52d5\u304b\u3059\u305f\u3081\u306e\u8a18\u4e8b\u3068\u306a\u308a\u307e\u3059\u3002\n[Cowboy1.0\u306e\u524d\u56de](http://qiita.com/hayabusa333/items/50ae4d65f778654927cd)\u3084[Cowboy2.0\u306e\u524d\u56de](http://qiita.com/hayabusa333/items/2642af88f0eccee1c923)\u306e\u8a18\u4e8b\u3067\u306f\u3001cowboy\u306b\u3066HTML\u30da\u30fc\u30b8\u306e\u8868\u793a\u3092\u884c\u3044\u307e\u3057\u305f\u3002\n\u4eca\u56de\u306fjson\u3092\u8fd4\u3059API\u306e\u306a\u308a\u305d\u3053\u306a\u3044\u306e\u5b9f\u88c5\u3092\u884c\u3063\u3066\u3044\u304d\u307e\u3059\u3002\n1.0\u30682.0\u306e\u8a18\u4e8b\u3092\u307e\u3068\u3081\u308d\u3063\u3068\u5916\u90e8\u304b\u3089\u306e\u58f0\u304c\u3042\u308a\u307e\u3057\u305f\u306e\u3067\u3001\u4eca\u56de\u304b\u3089\u8a18\u4e8b\u3092\u307e\u3068\u3081\u3066\u3044\u304d\u305f\u3044\u3068\u601d\u3044\u307e\u3059\u3002\n\n[Cowboy1.0\u306e\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u306f\u3053\u3061\u3089\u306b\u306a\u308a\u307e\u3059](https://github.com/hayabusa333/elixir_cowboy_example/tree/static_json_cowboy)\n\n[Cowboy2.0\u306e\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u306f\u3053\u3061\u3089\u306b\u306a\u308a\u307e\u3059](https://github.com/hayabusa333/elixir_cowboy_example/tree/static_json_cowboy_two_pre4)\n\n# \u30d0\u30fc\u30b8\u30e7\u30f3\n\u4f7f\u7528\u3057\u305f\u8a00\u8a9e\u3084\u30e9\u30a4\u30d6\u30e9\u30ea\u306e\u30d0\u30fc\u30b8\u30e7\u30f3\u306f\u4e0b\u8a18\u3068\u306a\u308a\u307e\u3059\u3002\n\n## cowboy 1.0\u306e\u30d0\u30fc\u30b8\u30e7\u30f3\n|  | Version |\n|:-----------|--------:|\n| Elixir | 1.3.2 |\n| Erlang | 19.2 |\n| Cowboy | 1.0.4 |\n\n## cowboy 2.0\u306e\u30d0\u30fc\u30b8\u30e7\u30f3\n|  | Version |\n|:-----------|--------:|\n| Elixir | 1.3.2 |\n| Erlang | 19.2 |\n| Cowboy | 2.0.0-pre4 |\n\n# \u6bce\u56de\u540c\u3058JSON\u3092\u8fd4\u3059API\u306e\u4f5c\u6210\n\n\u3055\u3066\u3001\u307e\u305a\u5b9f\u88c5\u3059\u308bJSON\u306eAPI\u3067\u3059\u304c\u3001\u6bce\u56de\u540c\u3058\u5185\u5bb9\u306eJSON\u3092\u8fd4\u3059API\u3092\u4f5c\u6210\u3057\u3066\u3044\u304d\u307e\u3059\u3002\n\u6bce\u56de\u540c\u3058\u5185\u5bb9\u3092\u8fd4\u3059API\u306b\u4f55\u306e\u610f\u5473\u304c\u3042\u308b\u306e\u304b\uff1f\u3063\u3068\u3044\u3046\u8a71\u3082\u3042\u308a\u307e\u3059\u304c\u3001\u6700\u521d\u306e\u6700\u521d\u3068\u3057\u3066\u5b9f\u88c5\u3057\u3066\u3044\u304d\u307e\u3059\u3002\n\n## cowboy 1.0\u306e\u5834\u5408\n\n``` elixir:lib/elixir_cowboy_example/json_handler.ex\ndefmodule ElixirCowboyExample.JsonHandler do\n  def init({:tcp, :http}, req, opts) do\n    {:ok, req, opts}\n  end\n\n  def handle(req, state) do\n    {method, req} = :cowboy_req.method(req)\n    {:ok, req} = json_example(method, req)\n    {:ok, req, state}\n  end\n\n  # body\u306b \"{\\\"title\\\": \\\"hello cowboy!\\\"}\" \u3092\u8a2d\u5b9a\u3057\u3001\n  # json\u3092\u8fd4\u3059\u3088\u3046\u306bheaders\u3092\u8a2d\u5b9a\n  def json_example(\"POST\", req) do\n    headers = [{\"content-type\", \"application/json\"}]\n    body = \"{\\\"title\\\": \\\"hello cowboy!\\\"}\"\n    {:ok, resp} = :cowboy_req.reply(200, headers, body, req)\n  end\n\n  def terminate(_reason, _req, _state) do\n    :ok\n  end\nend\n```\n\n``` elixir:lib/elixir_cowboy_example.ex\n  def run do\n    # http://localhost:4000/json \u306b\u30a2\u30af\u30bb\u30b9\u3057\u305f\u969b\u306b\n    # json\u3092\u8fd4\u3059\u3088\u3046\u306bHandler\u306e\u8a2d\u5b9a\n    routes = [\n      {\"/\", ElixirCowboyExample.Handler, []},\n      {\"/json\", ElixirCowboyExample.JsonHandler, []},\n      {\"/:html\", ElixirCowboyExample.Handler, []}\n    ]\n\n    dispatch = :cowboy_router.compile([{:_, routes}])\n\n    opts = [port: 4000]\n    env = [dispatch: dispatch]\n\n    {:ok, _pid} = :cowboy.start_http(:http, 100, opts, [env: env])\n  end\n```\n\n## cowboy 2.0\u306e\u5834\u5408\n\n``` elixir:lib/elixir_cowboy_example/json_handler.ex\ndefmodule ElixirCowboyExample.JsonHandler do\n  def init(req, opts) do\n    method = :cowboy_req.method(req)\n    {:ok, resp} = json_example(method, req)\n    {:ok, resp, opts}\n  end\n\n  # body\u306b \"{\\\"title\\\": \\\"hello cowboy!\\\"}\" \u3092\u8a2d\u5b9a\u3057\u3001\n  # json\u3092\u8fd4\u3059\u3088\u3046\u306bheaders\u3092\u8a2d\u5b9a\n  def json_example(\"POST\", req) do\n    headers = %{\"content-type\" => \"application/json\"}\n    body = \"{\\\"title\\\": \\\"hello cowboy!\\\"}\"\n    {:ok, resp} = :cowboy_req.reply(200, headers, body, req)\n  end\nend\n```\n\n``` elixir:lib/elixir_cowboy_example.ex\n  def run do\n    # http://localhost:4000/json \u306b\u30a2\u30af\u30bb\u30b9\u3057\u305f\u969b\u306b\n    # json\u3092\u8fd4\u3059\u3088\u3046\u306bHandler\u306e\u8a2d\u5b9a\n    routes = [\n      {\"/\", ElixirCowboyExample.Handler, []},\n      {\"/json\", ElixirCowboyExample.JsonHandler, []},\n      {\"/:html\", ElixirCowboyExample.Handler, []}\n    ]\n\n    dispatch = :cowboy_router.compile([{:_, routes}])\n\n    opts = [{:port, 4000}]\n    env = %{dispatch: dispatch}\n\n    {:ok, _pid} = :cowboy.start_clear(:http, 100, opts, %{env: env})\n  end\n```\n\n# \u8a18\u8f09\u3057\u305f\u30b3\u30fc\u30c9\u306e\u5b9f\u884c\n\u30b3\u30fc\u30c9\u306e\u8a18\u8ff0\u304c\u5b8c\u4e86\u3057\u307e\u3057\u305f\u306e\u3067\u3001\u305d\u308c\u3067\u306f\u5b9f\u884c\u3057\u3066\u3044\u304d\u307e\u3057\u3087\u3046\u3002\n\u3044\u3064\u3082\u901a\u308a `iex -S mix` \u306b\u3066 cowboy \u3092\u5b9f\u884c\u3057\u3066\u3044\u304d\u307e\u3059\u3002\n\u4eca\u56de\u306f\u3001json\u3092\u8fd4\u3059API\u3067\u3059\u306e\u3067\u3001curl\u3067\u5b9f\u884c\u3057\u3066\u3044\u304d\u307e\u3059\u3002\n\n``` cmd\n$ curl -v -H \"Accept: application/json\" -H \"Content-type: application/json\" -X POST http://localhost:4000/json\n*   Trying 127.0.0.1...\n* Connected to localhost (127.0.0.1) port 4000 (#0)\n> POST /json HTTP/1.1\n> Host: localhost:4000\n> User-Agent: curl/7.43.0\n> Accept: application/json\n> Content-type: application/json\n> Content-Length: 23\n> \n* upload completely sent off: 23 out of 23 bytes\n< HTTP/1.1 200 OK\n< content-length: 26\n< content-type: application/json\n< date: Sat, 07 Jan 2017 06:59:11 GMT\n< server: Cowboy\n< \n* Connection #0 to host localhost left intact\n{\"title\": \"hello cowboy!\"}\n```\n\n# \u53d7\u3051\u53d6\u3063\u305f\u30d1\u30e9\u30e1\u30fc\u30bf\u304b\u3089json\u3092\u8fd4\u3059\n\n\u6bce\u56de\u540c\u3058json\u3092\u8fd4\u3059API\u306b\u306f\u610f\u5473\u304c\u306a\u3044\u306e\u3067\u3001\u4eca\u56de\u306f\u53d7\u3051\u53d6\u3063\u305f\u30d1\u30e9\u30e1\u30fc\u30bf\u306e\u5185\u5bb9\u3092Json\u5f62\u5f0f\u306b\u3066\u8fd4\u3059API\u3092\u5b9f\u88c5\u3057\u3066\u3044\u304d\u307e\u3059\u3002\n\n\u4eca\u56de\u306e\u5b9f\u88c5\u3067\u306f\u53d7\u3051\u53d6\u3063\u305f\u30d1\u30e9\u30e1\u30fc\u30bf\u304c\u8907\u6570\u3042\u3063\u305f\u3068\u3057\u3066\u3082\u4e00\u756a\u6700\u521d\u306e\u3082\u306e\u3057\u304b\u53d7\u3051\u53d6\u308a\u307e\u305b\u3093\u3057\u3001\u30a8\u30e9\u30fc\u51e6\u7406\u3082\u5b9f\u969b\u306b\u4f7f\u3046\u305f\u3081\u306b\u306f\u5fc5\u8981\u3067\u3059\u304c\u3001\u30d1\u30e9\u30e1\u30fc\u30bf\u306e\u53d7\u3051\u6e21\u3057\u3092\u307f\u308b\u305f\u3081\u306a\u306e\u3067\u3001\u305d\u306e\u8fba\u308a\u306f\u6c17\u306b\u305b\u305a\u3044\u304d\u307e\u3059\u3002\n\n## cowboy 1.0\u306e\u5834\u5408\n\n``` elixir:lib/elixir_cowboy_example/json_handler.ex\ndefmodule ElixirCowboyExample.JsonHandler do\n  def init({:tcp, :http}, req, opts) do\n    {:ok, req, opts}\n  end\n\n  def handle(req, state) do\n    {method, req} = :cowboy_req.method(req)\n    # body\u306e\u4e2d\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u306e\u60c5\u5831\u3092\u53d6\u5f97\u3059\u308b\n    {:ok, params, req} = :cowboy_req.body_qs(req)\n    {:ok, req} = json_example(method, params, req)\n    {:ok, req, state}\n  end\n\n  def json_example(\"POST\", :undefined , req) do\n    headers = [{\"content-type\", \"application/json\"}]\n    body = \"{\\\"title\\\": \\\"hello cowboy!\\\"}\"\n    {:ok, resp} = :cowboy_req.reply(200, headers, body, req)\n  end\n\n  def json_example(\"POST\", params, req) do\n    # \u4e0a\u8a18\u306b\u3066\u53d7\u3051\u53d6\u3063\u305f\u30d1\u30e9\u30e1\u30fc\u30bf\u306f\u30ea\u30b9\u30c8\u306e\u4e2d\u306btuple\u3067\u5165\u3063\u3066\u3044\u308b\u306e\u3067\n    # \u60c5\u5831\u306e\u629c\u304d\u51fa\u3057\u3092\u304a\u3053\u306a\u3046\n    param = params |> Enum.at(0) |> elem(1)\n    headers = [{\"content-type\", \"application/json\"}]\n    body = \"{\\\"title\\\": \\\"#{param}\\\"}\"\n    {:ok, resp} = :cowboy_req.reply(200, headers, body, req)\n  end\n\n  def terminate(_reason, _req, _state) do\n    :ok\n  end\nend\n```\n\n## cowboy 2.0\u306e\u5834\u5408\n\n``` elixir:lib/elixir_cowboy_example/json_handler.ex\ndefmodule ElixirCowboyExample.JsonHandler do\n  def init(req, opts) do\n    method = :cowboy_req.method(req)\n    # body\u306e\u4e2d\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u306e\u60c5\u5831\u3092\u53d6\u5f97\u3059\u308b\n    # cowboy2.0 \u3067\u306f\u30e1\u30bd\u30c3\u30c9\u540d\u304c\u5909\u308f\u3063\u305f\u3082\u3088\u3046\n    {ok, params, req} = :cowboy_req.read_urlencoded_body(req)\n    {:ok, resp} = json_example(method, params, req)\n    {:ok, resp, opts}\n  end\n\n  def json_example(\"POST\", :undefined, req) do\n    headers = %{\"content-type\" => \"application/json\"}\n    body = \"{\\\"title\\\": \\\"hello cowboy!\\\"}\"\n    {:ok, resp} = :cowboy_req.reply(200, headers, body, req)\n  end\n\n  def json_example(\"POST\", params, req) do\n    # \u4e0a\u8a18\u306b\u3066\u53d7\u3051\u53d6\u3063\u305f\u30d1\u30e9\u30e1\u30fc\u30bf\u306f\u30ea\u30b9\u30c8\u306e\u4e2d\u306btuple\u3067\u5165\u3063\u3066\u3044\u308b\u306e\u3067\n    # \u60c5\u5831\u306e\u629c\u304d\u51fa\u3057\u3092\u304a\u3053\u306a\u3046\n    param = params |> Enum.at(0) |> elem(1)\n    headers = %{\"content-type\" => \"application/json\"}\n    body = \"{\\\"title\\\": \\\"#{param}\\\"}\"\n    {:ok, resp} = :cowboy_req.reply(200, headers, body, req)\n  end\nend\n```\n\n# \u8a18\u8f09\u3057\u305f\u30b3\u30fc\u30c9\u306e\u5b9f\u884c\n\n\u30b3\u30fc\u30c9\u306e\u8a18\u8ff0\u304c\u5b8c\u4e86\u3057\u307e\u3057\u305f\u306e\u3067\u3001\u305d\u308c\u3067\u306f\u5b9f\u884c\u3057\u3066\u3044\u304d\u307e\u3057\u3087\u3046\u3002\n\u4e0a\u8a18\u3067\u5b9f\u884c\u3057\u305f`curl`\u306b\u5408\u308f\u305b\u3066\u3001-d \u30aa\u30d7\u30b7\u30e7\u30f3\u306b\u3066 \u30d1\u30e9\u30e1\u30fc\u30bf\u306e\u53d7\u3051\u6e21\u3057\u3092\u5b9f\u65bd\u3057\u307e\u3059\u3002\n\u7d50\u679c\u3068\u3057\u3066\u30d1\u30e9\u30e1\u30fc\u30bf\u3067\u6e21\u3057\u305f\u5185\u5bb9\u304c\u8fd4\u3063\u3066\u304f\u308b\u3053\u3068\u304c\u898b\u3066\u53d6\u308c\u307e\u3059\n\n``` cmd\n$ curl -v -H \"Accept: application/json\" -H \"Content-type: application/json\" -X POST -d 'title=test1' http://localhost:4000/json\n*   Trying 127.0.0.1...\n* Connected to localhost (127.0.0.1) port 4000 (#0)\n> POST /json HTTP/1.1\n> Host: localhost:4000\n> User-Agent: curl/7.43.0\n> Accept: application/json\n> Content-type: application/json\n> Content-Length: 23\n> \n* upload completely sent off: 23 out of 23 bytes\n< HTTP/1.1 200 OK\n< content-length: 18\n< content-type: application/json\n< date: Sun, 08 Jan 2017 00:18:26 GMT\n< server: Cowboy\n< \n* Connection #0 to host localhost left intact\n{\"title\": \"test1\"}\n```\n\n# \u6700\u5f8c\u306b\nJSON\u3092\u8fd4\u3059API\u306e\u5b9f\u88c5\u3092\u304a\u3053\u306a\u3046\u3053\u3068\u304c\u3067\u304d\u307e\u3057\u305f\u3002\n\u53d7\u3051\u53d6\u3063\u305f\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u51e6\u7406\u3059\u308b\u3053\u3068\u3082\u3067\u304d\u307e\u3057\u305f\u306e\u3067\u3001\u53d7\u3051\u53d6\u3063\u305f\u30d1\u30e9\u30e1\u30fc\u30bf\u306e\u5185\u5bb9\u304b\u3089Ecto\u304b\u3089\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u306b\u30a2\u30af\u30bb\u30b9\u3057\u3066JSON\u3092\u8fd4\u3059\u3053\u3068\u3082\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u3063\u305f\u306e\u3067\u306f\u306a\u3044\u3067\u3057\u3087\u3046\u304b\uff1f\n\u305d\u306e\u8fba\u308a\u3092\u5b9f\u969b\u306b\u884c\u3063\u3066\u3044\u304f\u306e\u306f\u6b21\u56de\u4ee5\u964d\u306e\u3069\u3053\u304b\u3067\u884c\u3048\u305f\u3089\u884c\u3063\u3066\u3044\u304d\u305f\u3044\u3068\u8003\u3048\u3066\u304a\u308a\u307e\u3059\u3002\n\u305d\u308c\u3067\u306f\u307e\u305f\u6b21\u56de\n\n# \u53c2\u8003\u30b5\u30a4\u30c8\n[Cowboy User Guide](https://ninenines.eu/docs/en/cowboy/1.0/guide/)\n", "tags": ["Elixir", "cowboy"]}