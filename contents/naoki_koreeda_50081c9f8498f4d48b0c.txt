{"context": "Microsoft Azure\u306eVM\u306bMySQL\u3092\u5165\u308c\u3066\u3001Golang\u3067WebAPI\u30b5\u30fc\u30d0\u3092\u4f5c\u308a\u307e\u3057\u305f\u3002\n\u305d\u306e\uff12\u3067\u306fGolang\u306e\u30bd\u30fc\u30b9\u306b\u3064\u3044\u3066\u8aac\u660e\u3057\u307e\u3059\u3002\n\u30b5\u30fc\u30d0\u74b0\u5883\u306e\u69cb\u6210\u3001\u69cb\u7bc9\u306b\u3064\u3044\u3066\u306f\u305d\u306e\uff11\u3092\u53c2\u7167\u304f\u3060\u3055\u3044\u3002\n\n\u30d9\u30fc\u30b9\necho\u30d5\u30ec\u30fc\u30e0\u30ef\u30fc\u30af\u3092\u4f7f\u3046\u3053\u3068\u3082\u8003\u3048\u305f\u306e\u3067\u3059\u304c\u3001\u4eca\u56de\u306fpottava\u3055\u3093\u306e\u30de\u30a4\u30af\u30ed\u30b5\u30fc\u30d3\u30b9\u7528\u306e\u30bd\u30fc\u30b9\u3092\u30d9\u30fc\u30b9\u306b\u3057\u307e\u3057\u305f\u3002\n\u5168\u4f53\u7684\u306b\u5927\u304d\u306a\u30bd\u30fc\u30b9\u3067\u306f\u306a\u3044\u306e\u3067\u3001\u3056\u3063\u3068\u8aad\u3093\u3067\u3044\u3066\u52c9\u5f37\u306b\u306a\u308a\u307e\u3059\u3002\n\u6700\u7d42\u7684\u306a\u69cb\u6210\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3057\u305f\u3002\n\u5b9f\u969b\u306e\u696d\u52d9\u306b\u4e57\u305b\u3066\u3044\u308b\u30d5\u30a1\u30a4\u30eb\u306f\u3044\u304f\u3064\u304b\u7701\u7565\u3057\u3066\u3044\u307e\u3059\u3002\n(myproject\u306e\u4e0a\u306bsrc\u304c\u3042\u308a\u3001\u305d\u3053\u306b$GOPATH\u901a\u3057\u3066\u3044\u308b\u3002)\nmyproject\n\u3000\u3000\u3000\u3000\u251c\u2500 main.go\n\u3000\u3000\u3000\u3000\u2514\u2500 app\n\u3000\u3000\u3000\u3000    \u251c\u2500 config\n\u3000\u3000\u3000\u3000    \u2502    \u251c\u2500 config.go\n\u3000\u3000\u3000\u3000    \u2502    \u2514\u2500 types.go\n\u3000\u3000\u3000\u3000    \u251c\u2500 controllers\n\u3000\u3000\u3000\u3000    \u2502    \u2514\u2500 user.go\n\u3000\u3000\u3000\u3000    \u251c\u2500 database\n\u3000\u3000\u3000\u3000    \u2502    \u2514\u2500 dbaccess.go\n\u3000\u3000\u3000\u3000    \u251c\u2500 http\n\u3000\u3000\u3000\u3000    \u2502    \u251c\u2500 http.go\n\u3000\u3000\u3000\u3000    \u2502    \u2514\u2500 restapi.go\n\u3000\u3000\u3000\u3000    \u251c\u2500 logs\n\u3000\u3000\u3000\u3000    \u2502    \u2514\u2500 logger.go\n\u3000\u3000\u3000\u3000    \u251c\u2500 misc\n\u3000\u3000\u3000\u3000    \u2502    \u2514\u2500 functions.go\n\u3000\u3000\u3000\u3000    \u2514\u2500 models\n\u3000\u3000\u3000\u3000        \u2514\u2500 user.go\n\n\u60f3\u50cf\u306f\u3064\u304f\u3068\u601d\u3044\u307e\u3059\u304c\u3001\u81ea\u5206\u3067\u66f8\u304f\u306e\u306f\u57fa\u672c\u7684\u306bcontrollers\u3068models\u3067\u3059\u3002\n\n\u30ea\u30af\u30a8\u30b9\u30c8\u30cf\u30f3\u30c9\u30ea\u30f3\u30b0\n\u30ea\u30af\u30a8\u30b9\u30c8\u306e\u30cf\u30f3\u30c9\u30ea\u30f3\u30b0\u306f\u3001main.go\u3067controllers\u3092\u8aad\u307f\u8fbc\u307f\u3001\u5404contoroller\u306einit()\u3067\u30cf\u30f3\u30c9\u30ea\u30f3\u30b0\u3059\u308b\u611f\u3058\u3067\u3059\u3002\n\nmain.go\npackage main\n\nimport (\n    \"fmt\"\n    \"net/http\"\n\n    \"myproject/app/config\"\n    _ \"myproject/app/controllers\"  // \u3053\u3053\u3067Controller\u8aad\u307f\u8fbc\u307f\n    \"myproject/app/logs\"\n)\n\nfunc main() {\n    // config\u304b\u3089\u8a2d\u5b9a\u53d6\u5f97\u3002\u30dd\u30fc\u30c8\u756a\u53f7\u306fconfig\u3067\u7ba1\u7406\u3002\n    cfg := config.NewConfig()\n    logs.Debug.Print(\"[config] \" + cfg.String())\n    logs.Info.Printf(\"[service] listening on port %v\", cfg.Port)\n    logs.Fatal.Print(http.ListenAndServe(\":\"+fmt.Sprint(cfg.Port), nil))\n}\n\n\n\u30b3\u30f3\u30c8\u30ed\u30fc\u30e9\u306e\u5b9f\u88c5\u3002\n\u30e6\u30fc\u30b6\u53d6\u5f97\u3001\u66f4\u65b0\u306e\u51e6\u7406\u3067\u3059\u3002\n\napp/controllers/user.go\npackage controllers\n\nimport (\n    \"io\"\n    \"net/http\"\n    \"net/url\"\n\n    util \"myproject/app/http\"\n    \"myproject/app/logs\"\n    \"myproject/app/misc\"\n    \"myproject/app/models\"\n)\n\nfunc init() {\n    // /users/\u306e\u30ea\u30af\u30a8\u30b9\u30c8\u3092\u30cf\u30f3\u30c9\u30ea\u30f3\u30b0\n    http.Handle(\"/users/\", util.Chain(util.APIResourceHandler(users{})))\n}\n\ntype users struct {\n    util.APIResourceBase\n}\n\n// Get\nfunc (c users) Get(url string, queries url.Values, body io.Reader) (util.APIStatus, interface{}) {\n    // retrive a specified user\n    if id := url[len(\"/users/\"):]; len(id) != 0 {\n        // id\u6307\u5b9a\u3067\u30e6\u30fc\u30b6\u3092\uff11\u4ef6\u53d6\u5f97\n        user, found := models.GetUser(id)\n        if !found {\n            return util.Success(http.StatusOK), models.User{}\n        }\n        return util.Success(http.StatusOK), user\n    }\n    // \u5168\u30e6\u30fc\u30b6\u3092\u53d6\u5f97\n    users, err := models.GetUsers()\n    if err != nil {\n        return util.Fail(http.StatusInternalServerError, err.Error()), nil\n    }\n    return util.Success(http.StatusOK), users\n}\n\n// Post\nfunc (c users) Post(url string, queries url.Values, body io.Reader) (util.APIStatus, interface{}) {\n    // routing Post but meaning Put\n    user := &models.User{}\n    if err := misc.ReadMBJSON(body, user, 100); err != nil {\n        logs.Error.Printf(\"Could not decode response body as a json. Error: %v\", err)\n        return util.Fail(http.StatusInternalServerError, err.Error()), nil\n    }\n\n    // \u30e6\u30fc\u30b6\u60c5\u5831\u3092\u66f4\u65b0\uff08\u306a\u305cPut\u3067\u306a\u3044\u304b\u306f\u5f8c\u8ff0\uff09\n    err := user.Update()\n    if err != nil {\n        return util.Fail(http.StatusInternalServerError, err.Error()), nil\n    }\n\n    return util.Success(http.StatusOK), user\n}\n\n\n\u203b\u66f4\u65b0\u51e6\u7406\u306bPUT\u3067\u306a\u304fPOST\u3092\u4f7f\u3063\u3066\u308b\u306e\u306f\u3001\u4eca\u56de\u306e\u8981\u4ef6\u306bPepper\u3068\u306e\u9023\u643a\u304c\u3042\u3063\u305f\u306e\u3067\u3059\u304c\u3001\u3069\u3046\u3082Pepper\u304b\u3089\u306fGET\u3068POST\u306e\u30ea\u30af\u30a8\u30b9\u30c8\u3057\u304b\u98db\u3070\u305b\u306a\u3044\u3089\u3057\u3044\u3068\u3044\u3046\u306e\u304c\u7406\u7531\u3067\u3059\u3002\n\u203b\u307e\u305f\u3001\u30e6\u30fc\u30b6\u6570\u304c\u6c7a\u307e\u3063\u3066\u3044\u305f\u306e\u3067\u3001\u3042\u3089\u304b\u3058\u3081\u5fc5\u8981\u306a\u30e6\u30fc\u30b6\u306eid\u3060\u3051\u3092DB\u306b\u767b\u9332\u3057\u305f\u72b6\u614b\u304b\u3089\u30b9\u30bf\u30fc\u30c8\u3060\u3063\u305f\u306e\u3067\u3001\u767b\u9332\u51e6\u7406\u304c\u4e0d\u8981\u3067\u3057\u305f\u3002\n\u203bGET, POST\u3057\u304b\u4f7f\u3048\u306a\u3044\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u306e\u5834\u5408\u3001\u30ea\u30af\u30a8\u30b9\u30c8\u30d8\u30c3\u30c0\u300cX-HTTP-Method-Override\u300d\u3092\u4f7f\u3063\u3066\u3001PUT, DELETE\u3092\u533a\u5225\u3067\u304d\u308b\u3088\u3046\u306b\u3059\u308b\u306e\u304c\u3088\u3044\u3068\u601d\u3044\u307e\u3059\u3002\n\n\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u30a2\u30af\u30bb\u30b9\n\u30e2\u30c7\u30eb\u306e\u5b9f\u88c5\u306e\u524d\u306b\u3001MySQL\u3078\u306e\u63a5\u7d9a\u65b9\u6cd5\u3002\n\u307e\u305a\u306fMySQL\u306e\u63a5\u7d9a\u30e2\u30b8\u30e5\u30fc\u30eb\u3092GitHub\u304b\u3089 go get \u3059\u308b\u3002\ngo get github.com/go-sql-driver/mysql\n\n\u3042\u3068\u306f\u4e0a\u8a18\u30ea\u30f3\u30af\u5148\u306eREADME\u901a\u308a\u306b\u5b9f\u88c5\u3059\u308c\u3070OK\u3002\n\napp/database/dbaccess.go\npackage database\n\nimport (\n    \"database/sql\"\n\n    _ \"github.com/go-sql-driver/mysql\"\n)\n\nconst connentInfo string = \"user:password@/dbname\"\n\nfunc DbOpen() (*sql.DB, error) {\n\n    db, err := sql.Open(\"mysql\", connentInfo)\n\n    return db, err\n}\n\n\n\n\u30e2\u30c7\u30eb\u306e\u5b9f\u88c5\n\nGetUsers()\n\n\n\u5168\u30e6\u30fc\u30b6\u3092\u53d6\u5f97\n\n\nGetUser(id)\n\n\nid\u3092\u57fa\u306b\u30e6\u30fc\u30b6\u3092\uff11\u4ef6\u53d6\u5f97\n\n\nUpdate()\n\n\n\u30ea\u30af\u30a8\u30b9\u30c8\u30dc\u30c7\u30a3\u306e\u60c5\u5831\u3092\u57fa\u306b\u30e6\u30fc\u30b6\u60c5\u5831\u66f4\u65b0 \n\n\n\n\napp/models/user.go\npackage models\n\nimport (\n    dba \"myproject/app/database\"\n    \"myproject/app/logs\"\n)\n\n// User represents user's user\ntype User struct {\n    ID   int `json:\"id\"`\n    Name string `json:\"name\"`\n}\n\n// Users is a type of User slice\ntype Users []*User\n\n// GetUsers lists all users from MySQL\n//  @return users []models.User\nfunc GetUsers() (users *Users, err error) {\n    return toUsers()\n}\n\n// GetUser retrives a specified user from MySQL\n//  @param  id string\n//  @return user models.User\nfunc GetUser(id string) (user *User, found bool) {\n    return toUser(id)\n}\n\nfunc toUsers() (*Users, error) {\n    // MySQL Open\n    db, err := dba.DbOpen()\n    if err != nil {\n        return nil, err\n    }\n    defer db.Close()\n\n    // Get user information\n    rows, err := db.Query(\"SELECT id, IFNULL(name, '') FROM users\")\n    if err != nil {\n        return nil, err\n    }\n    defer rows.Close()\n\n    users := Users{}\n    for rows.Next() {\n        user := User{}\n        var id int\n        var name string\n        if err := rows.Scan(&id, &name); err != nil {\n            logs.Fatal.Printf(\"Fatal: %s\", err.Error())\n            return nil, err\n        }\n\n        user.ID = id\n        user.Name = name\n        users = append(users, &user)\n    }\n\n    return &users, nil\n}\n\nfunc toUser(id string) (*User, bool) {\n    // MySQL Open\n    db, err := dba.DbOpen()\n    if err != nil {\n        return nil, false\n    }\n    defer db.Close()\n\n    // Get user information\n    rows, err := db.Query(\"SELECT id, IFNULL(name, '') FROM users where id = ?\", id)\n    if err != nil {\n        return nil, false\n    }\n    defer rows.Close()\n\n    user := User{}\n    for rows.Next() {\n        var id int\n        var name string\n        if err := rows.Scan(&id, &name); err != nil {\n            logs.Fatal.Printf(\"Fatal: %s\", err.Error())\n            return nil, false\n        }\n\n        user.ID = id\n        user.Name = name\n    }\n\n    return &user, true\n}\n\n// Update update user to MySQL\nfunc (u *User) Update() (error) {\n    // MySQL Open\n    db, errDb := dba.DbOpen()\n    if errDb != nil {\n        return errDb\n    }\n    defer db.Close()\n\n    // update user information\n    _, err := db.Exec(\"UPDATE users SET name = ? WHERE id = ?\", u.Name, u.ID)\n    if err != nil {\n        logs.Fatal.Printf(\"Fatal: %s\", err.Error())\n        return err\n    }\n\n    return nil\n}\n\n\n\n\n\u5b9f\u884c\u3001\u78ba\u8a8d\n\u4ee5\u4e0b\u306e\u30b3\u30de\u30f3\u30c9\u3067\u8d77\u52d5\u3057\u307e\u3059\u3002\ngo run main.go\n\n\u3068\u308a\u3042\u3048\u305a\u30ea\u30af\u30a8\u30b9\u30c8\u3057\u3066\u307f\u308b\u3068\u304d\u306f\u3001Chrome\u306e\u30d6\u30e9\u30a6\u30b6\u30a2\u30d7\u30ea\u300cAdvanced REST Client\u300d\u304c\u4fbf\u5229\u3067\u3059\u3002\nGET\u3059\u308b\u3068\u304d\n\nPOST\u3059\u308b\u3068\u304d\n\nMicrosoft Azure\u306eVM\u306bMySQL\u3092\u5165\u308c\u3066\u3001Golang\u3067WebAPI\u30b5\u30fc\u30d0\u3092\u4f5c\u308a\u307e\u3057\u305f\u3002\n\u305d\u306e\uff12\u3067\u306fGolang\u306e\u30bd\u30fc\u30b9\u306b\u3064\u3044\u3066\u8aac\u660e\u3057\u307e\u3059\u3002\n\u30b5\u30fc\u30d0\u74b0\u5883\u306e\u69cb\u6210\u3001\u69cb\u7bc9\u306b\u3064\u3044\u3066\u306f[\u305d\u306e\uff11](http://qiita.com/naoki_koreeda/items/8d4f001ef6bf76d4510a)\u3092\u53c2\u7167\u304f\u3060\u3055\u3044\u3002\n\n# \u30d9\u30fc\u30b9\necho\u30d5\u30ec\u30fc\u30e0\u30ef\u30fc\u30af\u3092\u4f7f\u3046\u3053\u3068\u3082\u8003\u3048\u305f\u306e\u3067\u3059\u304c\u3001\u4eca\u56de\u306f[pottava\u3055\u3093\u306e\u30de\u30a4\u30af\u30ed\u30b5\u30fc\u30d3\u30b9\u7528\u306e\u30bd\u30fc\u30b9](https://github.com/pottava/golang-microservices/tree/master/app-dbio)\u3092\u30d9\u30fc\u30b9\u306b\u3057\u307e\u3057\u305f\u3002\n\n\u5168\u4f53\u7684\u306b\u5927\u304d\u306a\u30bd\u30fc\u30b9\u3067\u306f\u306a\u3044\u306e\u3067\u3001\u3056\u3063\u3068\u8aad\u3093\u3067\u3044\u3066\u52c9\u5f37\u306b\u306a\u308a\u307e\u3059\u3002\n\u6700\u7d42\u7684\u306a\u69cb\u6210\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3057\u305f\u3002\n\u5b9f\u969b\u306e\u696d\u52d9\u306b\u4e57\u305b\u3066\u3044\u308b\u30d5\u30a1\u30a4\u30eb\u306f\u3044\u304f\u3064\u304b\u7701\u7565\u3057\u3066\u3044\u307e\u3059\u3002\n(myproject\u306e\u4e0a\u306bsrc\u304c\u3042\u308a\u3001\u305d\u3053\u306b$GOPATH\u901a\u3057\u3066\u3044\u308b\u3002)\n\n```\nmyproject\n\u3000\u3000\u3000\u3000\u251c\u2500 main.go\n\u3000\u3000\u3000\u3000\u2514\u2500 app\n\u3000\u3000\u3000\u3000    \u251c\u2500 config\n\u3000\u3000\u3000\u3000    \u2502    \u251c\u2500 config.go\n\u3000\u3000\u3000\u3000    \u2502    \u2514\u2500 types.go\n\u3000\u3000\u3000\u3000    \u251c\u2500 controllers\n\u3000\u3000\u3000\u3000    \u2502    \u2514\u2500 user.go\n\u3000\u3000\u3000\u3000    \u251c\u2500 database\n\u3000\u3000\u3000\u3000    \u2502    \u2514\u2500 dbaccess.go\n\u3000\u3000\u3000\u3000    \u251c\u2500 http\n\u3000\u3000\u3000\u3000    \u2502    \u251c\u2500 http.go\n\u3000\u3000\u3000\u3000    \u2502    \u2514\u2500 restapi.go\n\u3000\u3000\u3000\u3000    \u251c\u2500 logs\n\u3000\u3000\u3000\u3000    \u2502    \u2514\u2500 logger.go\n\u3000\u3000\u3000\u3000    \u251c\u2500 misc\n\u3000\u3000\u3000\u3000    \u2502    \u2514\u2500 functions.go\n\u3000\u3000\u3000\u3000    \u2514\u2500 models\n\u3000\u3000\u3000\u3000        \u2514\u2500 user.go\n```\n\n\u60f3\u50cf\u306f\u3064\u304f\u3068\u601d\u3044\u307e\u3059\u304c\u3001\u81ea\u5206\u3067\u66f8\u304f\u306e\u306f\u57fa\u672c\u7684\u306bcontrollers\u3068models\u3067\u3059\u3002\n\n# \u30ea\u30af\u30a8\u30b9\u30c8\u30cf\u30f3\u30c9\u30ea\u30f3\u30b0\n\u30ea\u30af\u30a8\u30b9\u30c8\u306e\u30cf\u30f3\u30c9\u30ea\u30f3\u30b0\u306f\u3001main.go\u3067controllers\u3092\u8aad\u307f\u8fbc\u307f\u3001\u5404contoroller\u306einit()\u3067\u30cf\u30f3\u30c9\u30ea\u30f3\u30b0\u3059\u308b\u611f\u3058\u3067\u3059\u3002\n\n```Go:main.go\npackage main\n\nimport (\n\t\"fmt\"\n\t\"net/http\"\n\n\t\"myproject/app/config\"\n\t_ \"myproject/app/controllers\"  // \u3053\u3053\u3067Controller\u8aad\u307f\u8fbc\u307f\n\t\"myproject/app/logs\"\n)\n\nfunc main() {\n\t// config\u304b\u3089\u8a2d\u5b9a\u53d6\u5f97\u3002\u30dd\u30fc\u30c8\u756a\u53f7\u306fconfig\u3067\u7ba1\u7406\u3002\n\tcfg := config.NewConfig()\n\tlogs.Debug.Print(\"[config] \" + cfg.String())\n\tlogs.Info.Printf(\"[service] listening on port %v\", cfg.Port)\n\tlogs.Fatal.Print(http.ListenAndServe(\":\"+fmt.Sprint(cfg.Port), nil))\n}\n```\n\n\u30b3\u30f3\u30c8\u30ed\u30fc\u30e9\u306e\u5b9f\u88c5\u3002\n\u30e6\u30fc\u30b6\u53d6\u5f97\u3001\u66f4\u65b0\u306e\u51e6\u7406\u3067\u3059\u3002\n\n```Go:app/controllers/user.go\npackage controllers\n\nimport (\n\t\"io\"\n\t\"net/http\"\n\t\"net/url\"\n\n\tutil \"myproject/app/http\"\n\t\"myproject/app/logs\"\n\t\"myproject/app/misc\"\n\t\"myproject/app/models\"\n)\n\nfunc init() {\n\t// /users/\u306e\u30ea\u30af\u30a8\u30b9\u30c8\u3092\u30cf\u30f3\u30c9\u30ea\u30f3\u30b0\n\thttp.Handle(\"/users/\", util.Chain(util.APIResourceHandler(users{})))\n}\n\ntype users struct {\n\tutil.APIResourceBase\n}\n\n// Get\nfunc (c users) Get(url string, queries url.Values, body io.Reader) (util.APIStatus, interface{}) {\n\t// retrive a specified user\n\tif id := url[len(\"/users/\"):]; len(id) != 0 {\n\t\t// id\u6307\u5b9a\u3067\u30e6\u30fc\u30b6\u3092\uff11\u4ef6\u53d6\u5f97\n\t\tuser, found := models.GetUser(id)\n\t\tif !found {\n\t\t\treturn util.Success(http.StatusOK), models.User{}\n\t\t}\n\t\treturn util.Success(http.StatusOK), user\n\t}\n\t// \u5168\u30e6\u30fc\u30b6\u3092\u53d6\u5f97\n\tusers, err := models.GetUsers()\n\tif err != nil {\n\t\treturn util.Fail(http.StatusInternalServerError, err.Error()), nil\n\t}\n\treturn util.Success(http.StatusOK), users\n}\n\n// Post\nfunc (c users) Post(url string, queries url.Values, body io.Reader) (util.APIStatus, interface{}) {\n\t// routing Post but meaning Put\n    user := &models.User{}\n    if err := misc.ReadMBJSON(body, user, 100); err != nil {\n        logs.Error.Printf(\"Could not decode response body as a json. Error: %v\", err)\n        return util.Fail(http.StatusInternalServerError, err.Error()), nil\n    }\n\n    // \u30e6\u30fc\u30b6\u60c5\u5831\u3092\u66f4\u65b0\uff08\u306a\u305cPut\u3067\u306a\u3044\u304b\u306f\u5f8c\u8ff0\uff09\n    err := user.Update()\n    if err != nil {\n        return util.Fail(http.StatusInternalServerError, err.Error()), nil\n    }\n\n    return util.Success(http.StatusOK), user\n}\n```\n\n\u203b\u66f4\u65b0\u51e6\u7406\u306bPUT\u3067\u306a\u304fPOST\u3092\u4f7f\u3063\u3066\u308b\u306e\u306f\u3001\u4eca\u56de\u306e\u8981\u4ef6\u306bPepper\u3068\u306e\u9023\u643a\u304c\u3042\u3063\u305f\u306e\u3067\u3059\u304c\u3001\u3069\u3046\u3082Pepper\u304b\u3089\u306fGET\u3068POST\u306e\u30ea\u30af\u30a8\u30b9\u30c8\u3057\u304b\u98db\u3070\u305b\u306a\u3044\u3089\u3057\u3044\u3068\u3044\u3046\u306e\u304c\u7406\u7531\u3067\u3059\u3002\n\n\u203b\u307e\u305f\u3001\u30e6\u30fc\u30b6\u6570\u304c\u6c7a\u307e\u3063\u3066\u3044\u305f\u306e\u3067\u3001\u3042\u3089\u304b\u3058\u3081\u5fc5\u8981\u306a\u30e6\u30fc\u30b6\u306eid\u3060\u3051\u3092DB\u306b\u767b\u9332\u3057\u305f\u72b6\u614b\u304b\u3089\u30b9\u30bf\u30fc\u30c8\u3060\u3063\u305f\u306e\u3067\u3001\u767b\u9332\u51e6\u7406\u304c\u4e0d\u8981\u3067\u3057\u305f\u3002\n\n\u203bGET, POST\u3057\u304b\u4f7f\u3048\u306a\u3044\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u306e\u5834\u5408\u3001\u30ea\u30af\u30a8\u30b9\u30c8\u30d8\u30c3\u30c0\u300cX-HTTP-Method-Override\u300d\u3092\u4f7f\u3063\u3066\u3001PUT, DELETE\u3092\u533a\u5225\u3067\u304d\u308b\u3088\u3046\u306b\u3059\u308b\u306e\u304c\u3088\u3044\u3068\u601d\u3044\u307e\u3059\u3002\n\n# \u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u30a2\u30af\u30bb\u30b9\n\u30e2\u30c7\u30eb\u306e\u5b9f\u88c5\u306e\u524d\u306b\u3001MySQL\u3078\u306e\u63a5\u7d9a\u65b9\u6cd5\u3002\n\n\u307e\u305a\u306f[MySQL\u306e\u63a5\u7d9a\u30e2\u30b8\u30e5\u30fc\u30eb](https://github.com/go-sql-driver/mysql)\u3092GitHub\u304b\u3089 go get \u3059\u308b\u3002\n\n```\ngo get github.com/go-sql-driver/mysql\n```\n\n\u3042\u3068\u306f\u4e0a\u8a18\u30ea\u30f3\u30af\u5148\u306eREADME\u901a\u308a\u306b\u5b9f\u88c5\u3059\u308c\u3070OK\u3002\n\n```Go:app/database/dbaccess.go\npackage database\n\nimport (\n\t\"database/sql\"\n\n    _ \"github.com/go-sql-driver/mysql\"\n)\n\nconst connentInfo string = \"user:password@/dbname\"\n\nfunc DbOpen() (*sql.DB, error) {\n\n    db, err := sql.Open(\"mysql\", connentInfo)\n\n    return db, err\n}\n```\n\n# \u30e2\u30c7\u30eb\u306e\u5b9f\u88c5\n* GetUsers()\n    * \u5168\u30e6\u30fc\u30b6\u3092\u53d6\u5f97\n* GetUser(id)\n    * id\u3092\u57fa\u306b\u30e6\u30fc\u30b6\u3092\uff11\u4ef6\u53d6\u5f97\n* Update()\n    * \u30ea\u30af\u30a8\u30b9\u30c8\u30dc\u30c7\u30a3\u306e\u60c5\u5831\u3092\u57fa\u306b\u30e6\u30fc\u30b6\u60c5\u5831\u66f4\u65b0 \n\n```Go:app/models/user.go\npackage models\n\nimport (\n    dba \"myproject/app/database\"\n    \"myproject/app/logs\"\n)\n\n// User represents user's user\ntype User struct {\n\tID   int `json:\"id\"`\n\tName string `json:\"name\"`\n}\n\n// Users is a type of User slice\ntype Users []*User\n\n// GetUsers lists all users from MySQL\n//  @return users []models.User\nfunc GetUsers() (users *Users, err error) {\n    return toUsers()\n}\n\n// GetUser retrives a specified user from MySQL\n//  @param  id string\n//  @return user models.User\nfunc GetUser(id string) (user *User, found bool) {\n    return toUser(id)\n}\n\nfunc toUsers() (*Users, error) {\n    // MySQL Open\n    db, err := dba.DbOpen()\n    if err != nil {\n        return nil, err\n    }\n    defer db.Close()\n\n    // Get user information\n    rows, err := db.Query(\"SELECT id, IFNULL(name, '') FROM users\")\n    if err != nil {\n        return nil, err\n    }\n    defer rows.Close()\n\n    users := Users{}\n    for rows.Next() {\n        user := User{}\n        var id int\n        var name string\n        if err := rows.Scan(&id, &name); err != nil {\n            logs.Fatal.Printf(\"Fatal: %s\", err.Error())\n            return nil, err\n        }\n\n        user.ID = id\n        user.Name = name\n        users = append(users, &user)\n    }\n\n    return &users, nil\n}\n\nfunc toUser(id string) (*User, bool) {\n    // MySQL Open\n    db, err := dba.DbOpen()\n    if err != nil {\n        return nil, false\n    }\n    defer db.Close()\n\n    // Get user information\n    rows, err := db.Query(\"SELECT id, IFNULL(name, '') FROM users where id = ?\", id)\n    if err != nil {\n        return nil, false\n    }\n    defer rows.Close()\n\n    user := User{}\n    for rows.Next() {\n        var id int\n        var name string\n        if err := rows.Scan(&id, &name); err != nil {\n            logs.Fatal.Printf(\"Fatal: %s\", err.Error())\n            return nil, false\n        }\n\n        user.ID = id\n        user.Name = name\n    }\n\n    return &user, true\n}\n\n// Update update user to MySQL\nfunc (u *User) Update() (error) {\n    // MySQL Open\n    db, errDb := dba.DbOpen()\n    if errDb != nil {\n        return errDb\n    }\n    defer db.Close()\n\n    // update user information\n    _, err := db.Exec(\"UPDATE users SET name = ? WHERE id = ?\", u.Name, u.ID)\n    if err != nil {\n        logs.Fatal.Printf(\"Fatal: %s\", err.Error())\n        return err\n    }\n\n    return nil\n}\n\n```\n\n# \u5b9f\u884c\u3001\u78ba\u8a8d\n\u4ee5\u4e0b\u306e\u30b3\u30de\u30f3\u30c9\u3067\u8d77\u52d5\u3057\u307e\u3059\u3002\n\n```\ngo run main.go\n```\n\n\u3068\u308a\u3042\u3048\u305a\u30ea\u30af\u30a8\u30b9\u30c8\u3057\u3066\u307f\u308b\u3068\u304d\u306f\u3001Chrome\u306e\u30d6\u30e9\u30a6\u30b6\u30a2\u30d7\u30ea\u300c[Advanced REST Client](https://chrome.google.com/webstore/detail/advanced-rest-client/hgmloofddffdnphfgcellkdfbfbjeloo)\u300d\u304c\u4fbf\u5229\u3067\u3059\u3002\n\nGET\u3059\u308b\u3068\u304d\n<img width=\"997\" alt=\"\u30b9\u30af\u30ea\u30fc\u30f3\u30b7\u30e7\u30c3\u30c8 2016-11-30 18.02.53.png\" src=\"https://qiita-image-store.s3.amazonaws.com/0/92538/b8adeee2-f65a-359c-aa95-994cddb20439.png\">\n\nPOST\u3059\u308b\u3068\u304d\n<img width=\"998\" alt=\"\u30b9\u30af\u30ea\u30fc\u30f3\u30b7\u30e7\u30c3\u30c8 2016-11-30 18.06.55.png\" src=\"https://qiita-image-store.s3.amazonaws.com/0/92538/fc82abc5-a4d8-be76-5e80-535cfc2987cb.png\">\n", "tags": ["WebAPI", "Go", "golang", "MySQL", "Azure"]}