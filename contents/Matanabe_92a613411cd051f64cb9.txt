{"context": "\n\n\u6982\u8981\n\u5b9f\u904b\u7528\u53ef\u80fd\u306aLINE BOT\u30b5\u30fc\u30d0\u3092\u8003\u3048\u308b\u3068\u3001\u6b21\u306e\u53c2\u8003URL\u3067yoichiro6642\u3055\u3093\u304c\u66f8\u3044\u3066\u3044\u308b\u3088\u3046\u306b\u975e\u540c\u671f\u306e\u51e6\u7406\u304c\u5fc5\u8981\u306b\u306a\u308a\u307e\u3059\u3002\n\u3000\u3000\u53c2\u8003URL\uff1a\u5927\u91cf\u30e1\u30c3\u30bb\u30fc\u30b8\u304c\u6765\u3066\u3082\u5b89\u5fc3\u306aLINE BOT\u30b5\u30fc\u30d0\u306e\u30a2\u30fc\u30ad\u30c6\u30af\u30c1\u30e3\n\n\u5c0f\u4e2d\u898f\u6a21\u306e\u74b0\u5883\u3067\u3001\u3042\u308b\u7a0b\u5ea6\u5927\u91cf\u30e1\u30c3\u30bb\u30fc\u30b8\u304c\u6765\u3066\u3082\u8010\u3048\u3089\u308c\u308b\u3053\u3068\u3092\u76ee\u7684\u3068\u3057\u3066\u3001\u4e0a\u8a18\u306b\u6cbf\u3063\u305fLINE BOT\u30b5\u30fc\u30d0(\u306e\u30b9\u30b1\u30eb\u30c8\u30f3)\u3092\u66f8\u3044\u3066\u307f\u307e\u3057\u305f\u3002\n\u6700\u5f8c\u306e\u300cAPI\u306e\u547c\u3073\u51fa\u3057\u56de\u6570\u3092\u6e1b\u3089\u3059\u300d(\u30e1\u30c3\u30bb\u30fc\u30b8\u9001\u4fe1\u3067\u8907\u6570MID\u3092\u6307\u5b9a\u3057\u3066PI\u306e\u547c\u3073\u51fa\u3057\u56de\u6570\u3092\u6e1b\u3089\u3059)\u3068\u3053\u308d\u306f\u5b9f\u88c5\u3057\u3066\u307e\u305b\u3093\u3002\n\u5229\u7528\u3057\u305f\u74b0\u5883\u306f\u4ee5\u4e0b\u3067\u3059\u3002\n\nOS\u3000\u3000\u3000\u3000\u3000\uff1a CentOS 7.2.1511 x86_64\nBOT Server\u3000\uff1a Node.js v6.2.0\nQueue \u3000\u3000\u3000\uff1a MongoDB v3.2.6\nDispatcher & jobWorker\uff1a Python 2.7.5\n\nAmazon API Gateway+Lambda+DynamoDB\u3068\u3044\u3046\u9078\u629e\u80a2\u3082\u3042\u308a\u307e\u3057\u305f\u304c\u3001Node.js+MongoDB+Python\u3067\u30aa\u30fc\u30d0\u30fc\u30d8\u30c3\u30c9\u306e\u5c11\u306a\u3044\u8efd\u91cfDispatcher&jobWorker\u3092\u5b9f\u88c5\u3067\u304d\u308b\u306e\u3067\u306f\u306a\u3044\u304b\u3068\u8003\u3048\u307e\u3057\u305f\u3002\nQueue\u306f\u3001RabbitMQ, memcached, Redis\u306a\u3069\u3082\u8003\u3048\u3089\u308c\u307e\u3057\u305f\u304c\u3001\u6b21\u306e\u7406\u7531\u304b\u3089MongoDB\u3092\u5229\u7528\u3057\u307e\u3057\u305f\u3002\n\n\u30dd\u30fc\u30ea\u30f3\u30b0\u3067\u306f\u306a\u304fQueue\u306b\u8ffd\u52a0\u3055\u308c\u305f\u3053\u3068\u3092\u5951\u6a5f\u306b\u51e6\u7406\u3092\u30ad\u30c3\u30af\u3067\u304d\u308b\u30c8\u30ea\u30ac\u30fc\u304c\u6b32\u3057\u3044\u3002\nMongoDB\u306f\u3001\u30b7\u30f3\u30b0\u30eb\u3067(\u52ff\u8ad6\u30b7\u30f3\u30b0\u30eb\u3067\u306a\u304f\u3066\u3082\u826f\u3044)\u30de\u30b9\u30bf\u30fc\u3068\u3057\u3066\u4f7f\u3048\u3070oplog\u304c\u5229\u7528\u3067\u304d\u3001oplog\u76e3\u8996\u3059\u308b\u3053\u3068\u3067\u30c8\u30ea\u30ac\u30fc\u3068\u3057\u3066\u4f7f\u3048\u308b\u3002\n\u53d7\u3051\u4ed8\u3051\u305fMID\u3054\u3068\u306e\u60c5\u5831\u306e\u683c\u7d0d\u3084\u53c2\u7167\u306b\u3001\u6240\u8a6e\u9ad8\u901f\u306aDB\u304c\u5fc5\u8981\u3002\n\n\n\u524d\u63d0\u77e5\u8b58\n\nCentOS 7\nNode.js\nMongoDB, MongoDB.oplog\nPython\n\n\n\u5b9f\u88c5\u4f8b\n\nMongoDB\u306e\u6e96\u5099\n\u7279\u306b\u6307\u5b9a\u3057\u305f\u306e\u306freplication, oplogSizeMB\u304f\u3089\u3044\u3067\u3059\u3002\n\nmongod.line_bot.conf\nsystemLog:\n  destination: file\n  logAppend: true\n  path: /var/log/mongodb/mongod.line_bot.log\nstorage:\n  dbPath: /var/lib/mongo/line_bot\n  journal:\n    enabled: true\nprocessManagement:\n  fork: false  # fork and run in background\n  pidFilePath: /var/run/mongodb/mongod.line_bot.pid  # location of pidfile\nnet:\n  port: 27017\n  bindIp: 127.0.0.1  # Listen to local interface only, comment to listen on all interfaces.\nreplication:\n  oplogSizeMB: 3072\n\n\n\nMongod\u306e\u8d77\u52d5\n\u30de\u30b9\u30bf\u30fc\u30e2\u30fc\u30c9\u3067\u8d77\u52d5\u3057\u307e\u3059\u3002\n$ mongod --master -f mongod.line_bot.conf\n\n\n\u30b3\u30ec\u30af\u30b7\u30e7\u30f3\u306e\u4f5c\u6210\n\u30b3\u30ec\u30af\u30b7\u30e7\u30f3\u306fcapped collection\u306b\u3057\u3066\u3001\u5bb9\u91cf\u5897\u52a0\u3092\u6c17\u306b\u3057\u306a\u304f\u3066\u3082\u3044\u3044\u3088\u3046\u306b\u3057\u3066\u307e\u3059\u3002\n\ncreate_collection\n#!/bin/bach -v\nmongo --port=27017 <<EOF\nuse line_bot;\ndb.createCollection(\"recvq\", {\n  capped: true,\n  size: 1048576000 // 1GB\n});\nEOF\n\n\n\nBOT Server(Node.js)\nfrontDesk.js\u3067\u306f\u3001LINE Server\u304b\u3089\u306e\u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u53d7\u3051\u53d6\u308a\u3001\u5373\u5ea7\u306b\u5fdc\u7b54\u3092\u8fd4\u3057\u307e\u3059\u3002\n\nfrontDesk.js\n// Settings of the this program\nvar httpsPort = 443;\nvar allowPath = \"/callback\";\nvar httpsOpt  = {\n    \"caKey\"  : \"/etc/letsencrypt/live/xxx/privkey.pem\",\n    \"caCert\" : \"/etc/letsencrypt/live/xxx/fullchain.pem\",\n    \"caCa\"   : \"/etc/letsencrypt/live/xxx/chain.pem\"\n};\nlocal = {};\nlocal['channelSecret'] = \"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\";\n\n// Settings of the MongoDB\nvar mongoHost = \"127.0.0.1\";\nvar mongoPort = 27017;\nvar mongoDb   = \"line_bot\";\nvar mongoCol  = \"recvq\";\n\nvar express= require('express'),\nbodyParser = require('body-parser'),\nlog4js     = require('log4js'),\nhttps      = require('https'),\nfs         = require('fs'),\nmongo      = require('mongodb'),\npath       = require('path');\n\nvar accept = require(__dirname+'/accept');\nvar app    = express();\napp.use(bodyParser.json());\napp.use(bodyParser.urlencoded({ extended: true }));\n\n// MongoDB\nvar MongoClient = require('mongodb').MongoClient, assert = require('assert');\nvar mongoUrl = 'mongodb://'+mongoHost + \":\" + mongoPort + \"/\" + mongoDb;\nset_col(local, mongoUrl, function(rc, local, mongoUrl) {\n    if (!rc) {\n        console.log(\"set_col.rc:\"+rc);\n        local.db.close();\n        process.exit(1);\n    }\n    console.log(\"Connected succesfully to \"+mongoUrl);\n});\n\n// handle a request\napp.post(allowPath, function(req, res, next) {\n    local['acceptTime'] = new Date().getTime();  // record accept time(ms)\n\n    // response ASAP\n    res.status(200).send(\"OK\");\n    res.end();\n\n    accept.post_callback(req, res, next);  // Handle the request\n});\n\n// server certificate authority\nvar httpsOpt = {\n    key:  fs.readFileSync(httpsOpt.caKey),\n    cert: fs.readFileSync(httpsOpt.caCert),\n    ca:   fs.readFileSync(httpsOpt.caCa)\n};\n// listen port\nvar httpsServer = https.createServer(httpsOpt, app);\nhttpsServer.listen(httpsPort, function() {\n    console.log('Listening on port '+httpsPort+'...'); \n}).on('error', function(err) {\n    if (err.errno === 'EADDRINUSE') {\n        console.log('This program is already running.');\n    } else {\n        console.log(err);\n    }\n    process.exit(1);\n});\n\nfunction set_col(local, url, callback) {\n    // Use connect method to connect to the MongoServer\n    MongoClient.connect(url, function(err, db) {\n        if (err) {\n            console.log(\"MongoDB connection error.\"); console.log(err);\n            process.exit(1);\n        }\n        local['db'] = db;\n\n        local.db.collection(mongoCol, function(err, collection) {\n            if (err) {\n                console.log(\"MongoDB collection error.\"); console.log(err);\n                process.exit(1);\n            }\n            local.db['collection'] = collection;\n            callback(true, local, url);\n        });\n    });\n}\n\n\n\u305d\u306e\u5f8c\u3001accept.js\u3067\u3001\u7f72\u540d\u306e\u691c\u8a3c\u3001MongoDB\u3078\u306e\u767b\u9332\u3092\u884c\u3044\u307e\u3059\u3002\n\naccept.js\nvar crypto = require('crypto');\nvar assert = require('assert');\n\nexports.post_callback = function(req, res) {\n    // signature\u306e\u6709\u7121\u3092\u30c1\u30a7\u30c3\u30af\n    if ((! req.headers) || (! req.headers[\"x-line-channelsignature\"])) {\n        console.log(\"400. Bad Request. The request does not have a x-line-channelsignature\");\n        return;\n    }\n\n    // request\u306eresult\u306e\u6709\u7121\u3092\u30c1\u30a7\u30c3\u30af\n    if ((! req.body) ||\n        (! req.body['result'])) {\n        console.log(\"400. Bad Request. The request does not have result\");\n        return;\n    }\n    var result_num = req.body.result.length;\n\n    // HTTP body\u3092channelSecret\u3067sha256\u6697\u53f7\u5316, base64\u30c0\u30a4\u30b8\u30a7\u30b9\u30c8\u3092\u6c42\u3081\u308b.\n    var body_str = new Buffer(JSON.stringify(req.body), 'utf8');\n    computedSignature = crypto.createHmac(\"sha256\",local['channelSecret']).update(body_str).digest(\"base64\");\n\n    // signature\u3092\u6bd4\u8f03\u3057\u3001\u6b63\u5f53\u6027\u3092\u78ba\u8a8d\n    if (req.headers[\"x-line-channelsignature\"] != computedSignature) {\n        console.log(\"400. Bad Request. The x-line-channelsignature is wrong.\");\n        return;\n    }\n\n    // \u53d7\u3051\u4ed8\u3051\u305f\u6642\u523b\u3092\u5165\u308c\u3066\u304a\u304f\n    for (var i=0; i<Object.keys(req.body.result).length; i++) {\n        req.body.result[i]['acceptTime'] = local['acceptTime'];\n    }\n\n    // \u30e1\u30c3\u30bb\u30fc\u30b8\u3092MongoDB\u306b\u767b\u9332\n    local.db.collection.insertMany(req.body.result, function(err, r) {\n        assert.equal(null, err);\n        assert.equal(result_num, r.insertedCount);\n\n        toQueueTime = new Date().getTime() - local['acceptTime'];\n        console.log(\"necessary time to store to queue: \"+toQueueTime+\" ms\");\n\n        return;\n    });\n\n}\n\n\n\nDispatcher & jobWorker\nPython\u306e\u30de\u30eb\u30c1\u30b9\u30ec\u30c3\u30c9\u3067\u5b9f\u88c5\u3057\u307e\u3057\u305f\u3002\njobWorker\u30b9\u30ec\u30c3\u30c9\u306f\u3001\u751f\u6210\u3055\u308c\u305f\u3089wait()\u3067threading.Event()\u3092\u5f85\u3061\u307e\u3059\u3002\n\u30c8\u30ea\u30ac\u30fc\u30b9\u30ec\u30c3\u30c9\u306f\u3001oplog\u3092ts\u3067\u76e3\u8996\u3059\u308b\u3053\u3068\u3067\u3001Queue\u3078\u306e\u8ffd\u52a0\u3092\u5951\u6a5f\u306b\u51e6\u7406\u3092\u958b\u59cb\u3057\u307e\u3059\u3002\n\u8aad\u307f\u8fbc\u3093\u3060Queue\u306e\u5185\u5bb9\u3092\u7a7a\u304djobWorker\u30b9\u30ec\u30c3\u30c9\u306b\u5272\u308a\u5f53\u3066\u3001Event\u3092set\u3057\u3066jobWorker\u306b\u51e6\u7406\u3092\u958b\u59cb\u3055\u305b\u307e\u3059\u3002\n\u30ea\u30b9\u30c8\u3001\u5909\u6570\u306b\u5bfe\u3059\u308b\u30b9\u30ec\u30c3\u30c9\u306e\u53c2\u7167\u3001\u66f4\u65b0\u306f\u610f\u8b58\u3057\u3066\u3044\u308b\u306e\u3067\u3001\u30ed\u30c3\u30af\u306f\u3057\u3066\u3044\u307e\u305b\u3093...\n\u306e\u4e88\u5b9a\u3060\u3063\u305f\u306e\u3067\u3059\u304c\u3001LINE API\u30b5\u30fc\u30d0\u306b\u30de\u30eb\u30c1\u30b9\u30ec\u30c3\u30c9\u3067\u30a2\u30af\u30bb\u30b9\u3057\u3066\u3057\u307e\u3046\u3068\u3001\u540c\u6642\u63a5\u7d9a\u6570\u306e\u30a8\u30e9\u30fc\u304c\u767a\u751f\u3057\u307e\u3057\u305f\u3002\u306a\u306e\u3067\u3001jobWorker\u304b\u3089LINE API\u30b5\u30fc\u30d0\u3078\u306e\u30a2\u30af\u30bb\u30b9\u306b\u306facquire()\u3067\u6392\u4ed6\u30ed\u30c3\u30af\u3092\u4f7f\u7528\u3057\u3066\u307e\u3059\u3002\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u306b\u305d\u306e\u8fba\u306e\u4e8b\u306f\u66f8\u304b\u308c\u3066\u306a\u3044\u306e\u3067\u30011\u591a\u91cd\u3001\u30a2\u30af\u30bb\u30b9\u9593\u9694100ms\u306b\u3057\u3066\u3044\u307e\u3059\u3002\n\u306a\u304a\u3001\u79c1\u306fPython\u306e\u30de\u30eb\u30c1\u30b9\u30ec\u30c3\u30c9\u306f\u521d\u5fc3\u8005\u306a\u306e\u3067\u3001\u8aa4\u308a\u304c\u3042\u308c\u3070\u3054\u6307\u6458\u304f\u3060\u3055\u3044\u3002\n\ndispatcher.py\n#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\n# Settings of the this program\nNumOfThread       = 20\nsearchInterval    = 100000  # uSec\nmainSleepInterval = 60      # Sec\n\n# Settings of the MongoDB\nmongoHost = \"127.0.0.1\";\nmongoPort = 27017;\nmongoDb   = \"line_bot\";\nmongoCol  = \"recvq\";\n\nimport os,os.path\nimport sys\nimport threading\nimport time\nimport json\nimport pymongo\nfrom   pymongo.cursor import CursorType\nfrom   datetime import datetime\nimport datetime\nimport jobWorker\n\nusleep = lambda x: time.sleep(x/1000000.0)  # \u30de\u30a4\u30af\u30ed\u79d2\u30b9\u30ea\u30fc\u30d7\n\n\n##### worker\u30b9\u30ec\u30c3\u30c9\ndef workerThread(tt):\n    tno = str(tt[0])\n    while True:\n        tt[2].clear()  # Event\u3092\u30af\u30ea\u30a2\u3057\u3001Evant\u767a\u751f\u307e\u3067\u5f85\u6a5f\n        tt[3] = 'w'\n        tt[2].wait()\n        if verbose:  # \u5f85\u6a5f\u7d42\u4e86\u3002\u51e6\u7406\u958b\u59cb\n            print '\\nworker['+tno+']: wake up'\n\n        # \u3053\u3053\u3067\u5b9f\u969b\u306e\u51e6\u7406\u95a2\u6570\u3092\u547c\u3073\u51fa\u3059\n        jobWorker.jobWorker(verbose, tno, tt[4]['o'])\n\n\n##### MongoDB\u30c8\u30ea\u30ac\u30fc\u30b9\u30ec\u30c3\u30c9\ndef TriggerMongo(t, tchain, last, searchInterval, host, port, db, col):\n    dbCol = db + '.' + col\n    c = pymongo.MongoClient(host, port)\n    # Uncomment this for master/slave.\n    oplog = c.local.oplog['$main']\n    # Uncomment this for replica sets.\n    #oplog = c.local.oplog.rs\n\n    first = next(oplog.find().sort('$natural', pymongo.DESCENDING).limit(-1))\n    ts = first['ts']\n\n    while True:\n        cursor = oplog.find({'ts': {'$gt': ts}}, cursor_type=CursorType.TAILABLE_AWAIT, oplog_replay=True)\n        while cursor.alive:\n            for doc in cursor:\n                # \u5b9a\u671f\u7684\u306b {h:0,ts:Timestamp(nn.., 1),o:{},v:2,ns:'',op:'n'} \u304c\u8fd4\u308b\n                # \u304c op:'n' \u306f\u5358\u306a\u308b\u30a4\u30f3\u30d5\u30a9\u30e1\u30fc\u30b7\u30e7\u30f3\u3002\u7121\u8996\u3059\u308b\u3002\n                if doc['ns']==dbCol and doc['op']!='n':\n                    # \u7a7a\u304d\u30b9\u30ec\u30c3\u30c9\u3092\u63a2\u3059\n                    i = tchain[last]\n                    while t[i][3] != 'w':\n                        i = tchain[i]\n                        if i == tchain[last]:  # 1\u5468\u63a2\u3057\u305f\u3089\n                            usleep(searchInterval)\n\n                    t[i][4] = doc  # \u7a7a\u304d\u30b9\u30ec\u30c3\u30c9\u306et[n][4]\u306b\u30c7\u30fc\u30bf\u3092\u683c\u7d0d\n                    t[i][3] = 'r'\n                    t[i][2].set()  # t[n]\u306b\u51e6\u7406\u958b\u59cb\u6307\u793a\n                    last = i\n                # Work with doc here\n                ts = doc['ts']\n        print \"got out of a while corsor.alive loop\"\n\n\n#######################################################################\n\n# Check of the parameter\nverbose = False\nif len(sys.argv)==2 and sys.argv[1]=='-v':\n    verbose = True\nelif len(sys.argv)!=1:\n    print \"Usage: %s [-v]\" % (sys.argv[0],)\n    quit()\n\n# worker\u30b9\u30ec\u30c3\u30c9\u7ba1\u7406\u30c7\u30fc\u30bf\u4f5c\u6210 & worker\u30b9\u30ec\u30c3\u30c9\u751f\u6210\n# [ThreadNo, ThreadObj ,EvantObj, status, \u30b9\u30ec\u30c3\u30c9\u306b\u6e21\u3059\u30c7\u30fc\u30bf]\n#   (status ' ':\u6e96\u5099\u4e2d, 'w':\u5f85\u6a5f\u4e2d\u30fb\u7a7a\u304d, 'r':\u5b9f\u884c\u4e2d)\n#  :\nt = [ [0 for i in range(5)] for i in range(NumOfThread)]\nfor i in range(NumOfThread):\n    t[i][0] = i                  # Thread No.\n    t[i][2] = threading.Event()  # Evant\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u751f\u6210\n    t[i][3] = ' '                # is_running\n    # worker\u30b9\u30ec\u30c3\u30c9\u751f\u6210\n    t[i][1] = threading.Thread(name='worker['+str(i)+']', target=workerThread,\n                               args=(t[i],))\n    t[i][1].setDaemon(True)\n\n# Thread list of circulation\ntc = [0 for i in range(NumOfThread)]  # \u5024\u306f\u6b21\u306e\u30b9\u30ec\u30c3\u30c9No.\nfor i in range(NumOfThread):\n    tc[i] = i+1\ntc[i] = 0  # make a list of circulation\n\nlastThread = i  # \u6700\u5f8c\u306b\u4f7f\u3063\u305f\u30b9\u30ec\u30c3\u30c9. \u6b21\u306ftc[lastThread]\u756a\u76ee\u306e\u30b9\u30ec\u30c3\u30c9\u3092\u4f7f\u3046.\n\n# worker\u30b9\u30ec\u30c3\u30c9\u8d77\u52d5\nfor i in range(NumOfThread):\n    t[i][1].start()\n\n# worker\u30b9\u30ec\u30c3\u30c9\u8d77\u52d5\u5f8cwait\u72b6\u614b\u5f85\u3061\nyetAllThread = True\nwhile yetAllThread:\n    for i in range(NumOfThread):\n        if t[i][3] == ' ':\n            break\n        else:\n            usleep(100)  # \u76e3\u8996\u9593\u9694\u306f0.1\u30df\u30ea\u79d2\n    if i == NumOfThread-1:\n        yetAllThread = False\n    else:\n        usleep(100)  # \u76e3\u8996\u9593\u9694\u306f0.1\u30df\u30ea\u79d2\n\n# MongoDB\u30c8\u30ea\u30ac\u30fc\u30b9\u30ec\u30c3\u30c9\u751f\u6210\nt_mongo = threading.Thread(name='t_mongo', target=TriggerMongo, args=(t,tc,lastThread,searchInterval,mongoHost,mongoPort,mongoDb,mongoCol,))\nt_mongo.setDaemon(True)\nt_mongo.start()  # \u958b\u59cb\n\n# main\u30b9\u30ec\u30c3\u30c9\nwhile True:\n    time.sleep(mainSleepInterval)\n\n\n\njobWorker.py\u304c\u5b9f\u969b\u306e\u51e6\u7406\u3092\u884c\u3046\u30b9\u30ec\u30c3\u30c9\u3067\u3059\u3002\u3053\u3053\u306f\u9001\u4fe1\u30b3\u30f3\u30c6\u30f3\u30c4\u7a2e\u5225\u306b\u5fdc\u3058\u3066\u30aa\u30a6\u30e0\u8fd4\u3057\u3059\u308b\u3060\u3051\u306e\u30b5\u30f3\u30d7\u30eb\u3067\u3059\u3002\nMID(from)\u306e\u53d6\u308a\u65b9\u304copType\u306b\u3088\u3063\u3066\u7570\u306a\u308a\u307e\u3059\u306e\u3067\u6ce8\u610f\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n\njobWorker.py\n#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n# Note of caution:\n# - This program is one of the threads.\n# - Must not do exit(),quit()\n# - Please use only return()\n\n# Settings of the LINE API Server\nlineApiHost      = \"trialbot-api_line_me\"\naccessIntervalMS = 100  # ms\ngetProfilesUrl   = \"https://trialbot-api.line.me/v1/profiles\"\npostUrl          = \"https://trialbot-api.line.me/v1/events\"\ngetContentUrl    = \"https://trialbot-api.line.me/v1/bot/message/$messageId/content\"\nheader =  {\n    \"Content-Type\"                : \"application/json; charser=UTF-8\",\n    \"X-Line-ChannelID\"            : \"xxxxxxxxxx\",\n    \"X-Line-ChannelSecret\"        : \"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\",\n    \"X-Line-Trusted-User-With-ACL\": \"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\"\n}\npostBodyTemplate = {\n    \"to\"          : [],\n    \"toChannel\"   : 1383378250,\n    \"eventType\"   : \"138311608800106203\",\n    \"content\"     : {}\n}\n\nimport threading\nimport time\nimport datetime\nimport json\n\nusleep = lambda x: time.sleep(x/1000000.0)  # \u30de\u30a4\u30af\u30ed\u79d2\u30b9\u30ea\u30fc\u30d7\n\n# LINE API\u30b5\u30fc\u30d0\u306b\u8907\u6570jobWorker\u30b9\u30ec\u30c3\u30c9\u304b\u3089\u306e\u540c\u6642\u30a2\u30af\u30bb\u30b9\u3092\u56de\u907f\u3059\u308b\u305f\u3081\u306e\u30ed\u30c3\u30af\u95a2\u9023\nglobalLock = {}            # \u63a5\u7d9a\u5148\u3054\u3068\u306e\u30ed\u30c3\u30af\nglobalLastAccessTime = {}  # \u63a5\u7d9a\u5148\u3054\u3068\u306e\u6700\u7d42\u30a2\u30af\u30bb\u30b9\u30bf\u30a4\u30e0\nloadTime = int(time.time()*1000)\n\ndef jobWorker(verbose, mynum, recvBody):\n    global globalLock\n    global globalLastAccessTime\n\n    # \u63a5\u7d9a\u5148\u3054\u3068\u306e\u30ed\u30c3\u30af\u306e\u521d\u671f\u8a2d\u5b9a\n    if not globalLock.has_key(lineApiHost):\n        globalLock[lineApiHost] = threading.Lock()\n    # \u63a5\u7d9a\u5148\u3054\u3068\u306e\u6700\u7d42\u30a2\u30af\u30bb\u30b9\u30bf\u30a4\u30e0\u306e\u521d\u671f\u8a2d\u5b9a\n    if not globalLastAccessTime.has_key(lineApiHost):\n        globalLastAccessTime[lineApiHost] = loadTime\n\n    if verbose:\n        recvBody['_id'] = 'ObjectId(\"'+str(recvBody['_id'])+'\")'\n        print 'worker['+mynum+'] recvBody: '+str(int(time.time()*1000)-recvBody['acceptTime'])+' ms to here from accept'\n        print recvBody\n\n    opType = recvBody['content'].get('opType')\n\n    # blocked from user\n    if opType == 8:\n        # \u30e6\u30fc\u30b6\u7ba1\u7406\u304b\u3089\u30d6\u30ed\u30c3\u30af\u30e6\u30fc\u30b6\u306eMID(recvBody['content']['params'][0])\u3092\u524a\u9664\n        print 'please delete user \"'+recvBody['content']['params'][0]+'\" from management data.'\n        return\n\n    # POST\u306eBody\u90e8\u3092\u30b3\u30d4\u30fc\n    postBody = {}\n    postBody['to'] = ''\n    postBody['toChannel'] = postBodyTemplate['toChannel']\n    postBody['eventType'] = postBodyTemplate['eventType']\n    postBody['content'] = {}\n\n    # \u30e1\u30c3\u30bb\u30fc\u30b8\u8fd4\u4fe1\u5148\n    if opType==4:  # New user\n        postBody['to'] = [ recvBody['content']['params'][0] ]\n    else:\n        postBody['to'] = [ recvBody['content']['from'] ]\n\n    # New user\n    if opType==4:\n        # \u30e6\u30fc\u30b6\u30d7\u30ed\u30d5\u30a3\u30fc\u30eb\u3092\u53d6\u5f97\n        result = apiServer(verbose, mynum, 'get', lineApiHost, getProfilesUrl, header, postBody['to'][0], accessIntervalMS)\n        userProfile = json.loads(result.text)\n        resText = '\u3088\u3046\u3053\u305d\uff01'\n        # \u30e6\u30fc\u30b6\u7ba1\u7406DB\u306b\u30e6\u30fc\u30b6\u306eMID\u3067\u30d7\u30ed\u30d5\u30a3\u30fc\u30eb\u3092\u8ffd\u52a0\u3059\u3079\u304d\n        print 'please add '+userProfile['contacts'][0]['displayName']+'\\'s profile to user management db.'\n        print json.dumps(userProfile, sort_keys = True, indent=4)\n\n    # \u30e1\u30c3\u30bb\u30fc\u30b8\u306b\u5fdc\u3058\u305f\u51e6\u7406\n    contentType = recvBody['content'].get('contentType')\n    resText = ''\n    if contentType == 1:  # Text\n        resText = u'\u306f\u3044\u3001'+recvBody['content']['text']+u'\u3001\u3067\u3059\u306d\u3002'\n    elif contentType == 2:  # Image\n        resText = u'\u5199\u771f\u3067\u3059\u306d...'\n    elif contentType == 3:  # Video\n        resText = u'\u52d5\u753b\u3067\u3059\u306d...'\n    elif contentType == 4:  # Audio\n        resText = u'\u30dc\u30a4\u30b9\u30e1\u30c3\u30bb\u30fc\u30b8\u3067\u3059\u306d...'\n    elif contentType == 7:  # Location\n        resText = u'\u4f4d\u7f6e\u60c5\u5831\u3067\u3059\u306d...'\n        if verbose:\n            print recvBody['content']['text'].encode('utf-8')\n            print recvBody['content']['location']['title'].encode('utf-8')\n            print recvBody['content']['location']['address'].encode('utf-8')\n    elif contentType == 8:  # Sticker\n        resText = u'\u30b9\u30bf\u30f3\u30d7\u3067\u3059\u306d'\n        if verbose:\n            print recvBody['content']['contentMetadata']['STKTXT'].encode('utf-8')\n    elif contentType == 10: # Contact\n        # Contact(contentType==10)\u306a\u3089contentMetadata\u306emid\u30d7\u30ed\u30d5\u30a3\u30fc\u30eb\u3092\u53d6\u5f97\n        resText = recvBody['content']['contentMetadata']['displayName']+u'\u3055\u3093\u306e\u9023\u7d61\u5148\u3067\u3059\u306d'\n        result = apiServer(verbose, mynum, 'get', lineApiHost, getProfilesUrl, header, recvBody['content']['contentMetadata']['mid'], accessIntervalMS)\n        contactProfile = json.loads(result.text)\n        if verbose:\n            print '\\ncontactProfile: ' + str(contactProfile)\n\n    # \u5fdc\u7b54\u30e1\u30c3\u30bb\u30fc\u30b8\u9001\u4fe1\n    if resText:\n        # \u30e6\u30fc\u30b6\u30d7\u30ed\u30d5\u30a3\u30fc\u30eb\u3092\u53d6\u5f97(\u672c\u6765\u306f\u30e6\u30fc\u30b6\u767b\u9332\u6642\u306bDB\u306b\u767b\u9332\u3001\u5fc5\u8981\u306b\u5fdc\u3058\u3066\u53d6\u5f97)\n        result = apiServer(verbose, mynum, 'get', lineApiHost, getProfilesUrl, header, postBody['to'][0], accessIntervalMS)\n        userProfile = json.loads(result.text)\n        resText = userProfile['contacts'][0]['displayName'] + u'\u3055\u3093\u3001' + resText\n        if verbose:\n            print '\\nprofile: ' + str(userProfile)\n\n        # \u9001\u4fe1\u30e1\u30c3\u30bb\u30fc\u30b8\u306ftext(ContentType=1). \u305d\u306e\u4ed6\u306bImage,Video,Audio,Location,Sticker,multiple messages,rich messages\u304c\u9001\u308c\u308b\n        postBody['content'] = {\n            'contentType': 1,\n            'toType'     : 1,\n            'text'       : resText\n        }\n        if verbose:\n            print '\\nworker['+mynum+'] ' + postUrl\n            print 'worker['+mynum+'] postHeader: ' + json.dumps(header, sort_keys = True, indent = 4)\n            print 'worker['+mynum+'] postBody: ' + json.dumps(postBody, sort_keys = True, indent = 4)\n\n        # \u30e1\u30c3\u30bb\u30fc\u30b8\u9001\u4fe1\n        r = apiServer(verbose, mynum, 'post', lineApiHost, postUrl, header, postBody, accessIntervalMS)\n\n    return\n\n\n# LINE API\u30b5\u30fc\u30d0\u30a2\u30af\u30bb\u30b9\ndef apiServer(verbose, mynum, method, host, url, header, body, accessIntervalMS):\n    import requests\n    global globalLock\n    global globalLastAccessTime\n\n    globalLock[host].acquire()  # Lock\n\n    # LINE API\u30b5\u30fc\u30d0\u3078\u306e\u30a2\u30af\u30bb\u30b9\u306b\u4e00\u5b9a\u6642\u9593\u7a7a\u3051\u308b\u5834\u5408\u3001\u3042\u3068\u3069\u306e\u304f\u3089\u3044\u5f85\u3066\u3070\u826f\u3044\u304b\n    currentTime = int(time.time()*1000)\n    remain = accessIntervalMS - (currentTime - globalLastAccessTime[host])\n\n    if verbose:\n        print 'worker['+mynum+'] time since last access(ms): '+str(currentTime - globalLastAccessTime[host])\n        print 'worker['+mynum+'] remain='+str(remain)+' ms'\n\n    # wait accessIntervalMS from last access\n    if remain > 0:\n        usleep(remain*1000)\n\n    if method=='get':\n        if body:\n            payload = { 'mids': body }\n            r = requests.get(url, params=payload, headers=header)\n        else:\n            if verbose:\n                print url, header\n            r = requests.get(url, headers=header)\n    else:\n        r = requests.post(url, data=json.dumps(body), headers=header)\n\n    if verbose and r.status_code!=200:\n        print 'worker['+mynum+'] HTTP status code: ' + str(r.status_code)\n        print 'worker['+mynum+'] response: ' + r.text\n\n    globalLastAccessTime[host] = int(time.time()*1000)\n\n    globalLock[host].release()  # release\n    return r\n\n\n\n\n\u307e\u3068\u3081\n\u5927\u91cf\u30e1\u30c3\u30bb\u30fc\u30b8\u304c\u6765\u3066\u3082\u4f7f\u3048\u308b\u8efd\u91cfQueue\u6a5f\u69cb\u3001Dispatcher&jowWorker\u306e\u30b9\u30b1\u30eb\u30c8\u30f3\u3092\u5b9f\u88c5\u3067\u304d\u305f\u3068\u601d\u3044\u307e\u3059\u3002\n64bit CentOS 7\u306e\u521d\u671f\u72b6\u614b\u3060\u3068\u30b7\u30b9\u30c6\u30e0\u5168\u4f53\u3067\u30b9\u30ec\u30c3\u30c9\u6570\u306e\u4e0a\u9650\u306f30118\u306a\u306e\u3067\u3059\u304c..5000\u30b9\u30ec\u30c3\u30c9\u3060\u3068\u751f\u6210\u306b\u5931\u6557\u3057\u307e\u3059\u3002(...\u3063\u3066\u305d\u3093\u306a\u306b\u3044\u3089\u306a\u3044\u3051\u3069)\n\u3053\u306e\u3088\u3046\u306a\u6a5f\u69cb\u306fBOT\u30b5\u30fc\u30d0\u3060\u3051\u3067\u306a\u304f\u3001\u8907\u6570\u306eSMTP\u30b5\u30fc\u30d0\u3092\u4f7f\u3063\u3066\u5927\u91cf\u30e1\u30fc\u30eb\u3092\u52b9\u7387\u826f\u304f\u914d\u4fe1\u3059\u308b\u6642\u306b\u3082\u5fc5\u8981\u306b\u306a\u308a\u307e\u3059\u3002\njobWorker\u5074\u3092\u5225\u8a00\u8a9e\u30a2\u30d7\u30ea\u306b\u3059\u308b\u306a\u3089\u3001\u30de\u30a4\u30af\u30ed\u30b5\u30fc\u30d3\u30b9\u5316\u3059\u308b\u304b\u5225\u30d7\u30ed\u30bb\u30b9\u3067pipe\u3067\u901a\u4fe1\u3059\u308b\u3088\u3046\u306b\u5909\u66f4\u3059\u308c\u3070\u4f7f\u3048\u308b\u3068\u601d\u3044\u307e\u3059\u3002\n\u3053\u306e\u4ed5\u7d44\u307f\u3067\u8ca0\u8377\u5206\u6563\u3055\u305b\u308b\u306a\u3089\u3001MongoDB\u3092\u5225\u30b5\u30fc\u30d0\u3084Sharding\u306b\u3057\u305f\u308a\u3001\u300c4.consurring message\u300d\u4ee5\u964d\u3092\u5225\u30de\u30b7\u30f3\u306b\u6301\u3063\u3066\u3044\u304d\u307e\u3059\u3002\u305d\u308c\u4ee5\u4e0a\u306bjobWorker\u3092\u5206\u6563\u3055\u305b\u305f\u3044\u6642\u306f\u30de\u30a4\u30af\u30ed\u30b5\u30fc\u30d3\u30b9\u5316\u3059\u308b\u304b\u5225\u306e\u30ea\u30af\u30a8\u30b9\u30c8\u30d6\u30ed\u30fc\u30ab\u30fc\u306e\u4ed5\u7d44\u307f\u306b\u3057\u305f\u65b9\u304c\u826f\u3044\u3067\u3059\u3002\n# \u6982\u8981\n\u5b9f\u904b\u7528\u53ef\u80fd\u306aLINE BOT\u30b5\u30fc\u30d0\u3092\u8003\u3048\u308b\u3068\u3001\u6b21\u306e\u53c2\u8003URL\u3067yoichiro6642\u3055\u3093\u304c\u66f8\u3044\u3066\u3044\u308b\u3088\u3046\u306b\u975e\u540c\u671f\u306e\u51e6\u7406\u304c\u5fc5\u8981\u306b\u306a\u308a\u307e\u3059\u3002\n\u3000\u3000\u53c2\u8003URL\uff1a[\u5927\u91cf\u30e1\u30c3\u30bb\u30fc\u30b8\u304c\u6765\u3066\u3082\u5b89\u5fc3\u306aLINE BOT\u30b5\u30fc\u30d0\u306e\u30a2\u30fc\u30ad\u30c6\u30af\u30c1\u30e3](http://qiita.com/yoichiro6642/items/6d4c7309210af20a5c8f)\n\n![Sequence Diagram.png](https://qiita-image-store.s3.amazonaws.com/0/125331/2390b517-b073-d32d-ec28-662de2c500ba.png)\n\n\u5c0f\u4e2d\u898f\u6a21\u306e\u74b0\u5883\u3067\u3001\u3042\u308b\u7a0b\u5ea6\u5927\u91cf\u30e1\u30c3\u30bb\u30fc\u30b8\u304c\u6765\u3066\u3082\u8010\u3048\u3089\u308c\u308b\u3053\u3068\u3092\u76ee\u7684\u3068\u3057\u3066\u3001\u4e0a\u8a18\u306b\u6cbf\u3063\u305fLINE BOT\u30b5\u30fc\u30d0(\u306e\u30b9\u30b1\u30eb\u30c8\u30f3)\u3092\u66f8\u3044\u3066\u307f\u307e\u3057\u305f\u3002\n\u6700\u5f8c\u306e\u300cAPI\u306e\u547c\u3073\u51fa\u3057\u56de\u6570\u3092\u6e1b\u3089\u3059\u300d(\u30e1\u30c3\u30bb\u30fc\u30b8\u9001\u4fe1\u3067\u8907\u6570MID\u3092\u6307\u5b9a\u3057\u3066PI\u306e\u547c\u3073\u51fa\u3057\u56de\u6570\u3092\u6e1b\u3089\u3059)\u3068\u3053\u308d\u306f\u5b9f\u88c5\u3057\u3066\u307e\u305b\u3093\u3002\n\u5229\u7528\u3057\u305f\u74b0\u5883\u306f\u4ee5\u4e0b\u3067\u3059\u3002\n\n- OS\u3000\u3000\u3000\u3000\u3000\uff1a CentOS 7.2.1511 x86_64\n- BOT Server\u3000\uff1a Node.js v6.2.0\n- Queue \u3000\u3000\u3000\uff1a MongoDB v3.2.6\n- Dispatcher & jobWorker\uff1a Python 2.7.5\n\nAmazon API Gateway+Lambda+DynamoDB\u3068\u3044\u3046\u9078\u629e\u80a2\u3082\u3042\u308a\u307e\u3057\u305f\u304c\u3001Node.js+MongoDB+Python\u3067\u30aa\u30fc\u30d0\u30fc\u30d8\u30c3\u30c9\u306e\u5c11\u306a\u3044\u8efd\u91cfDispatcher&jobWorker\u3092\u5b9f\u88c5\u3067\u304d\u308b\u306e\u3067\u306f\u306a\u3044\u304b\u3068\u8003\u3048\u307e\u3057\u305f\u3002\n\nQueue\u306f\u3001RabbitMQ, memcached, Redis\u306a\u3069\u3082\u8003\u3048\u3089\u308c\u307e\u3057\u305f\u304c\u3001\u6b21\u306e\u7406\u7531\u304b\u3089MongoDB\u3092\u5229\u7528\u3057\u307e\u3057\u305f\u3002\n\n- \u30dd\u30fc\u30ea\u30f3\u30b0\u3067\u306f\u306a\u304fQueue\u306b\u8ffd\u52a0\u3055\u308c\u305f\u3053\u3068\u3092\u5951\u6a5f\u306b\u51e6\u7406\u3092\u30ad\u30c3\u30af\u3067\u304d\u308b\u30c8\u30ea\u30ac\u30fc\u304c\u6b32\u3057\u3044\u3002\n- MongoDB\u306f\u3001\u30b7\u30f3\u30b0\u30eb\u3067(\u52ff\u8ad6\u30b7\u30f3\u30b0\u30eb\u3067\u306a\u304f\u3066\u3082\u826f\u3044)\u30de\u30b9\u30bf\u30fc\u3068\u3057\u3066\u4f7f\u3048\u3070oplog\u304c\u5229\u7528\u3067\u304d\u3001oplog\u76e3\u8996\u3059\u308b\u3053\u3068\u3067\u30c8\u30ea\u30ac\u30fc\u3068\u3057\u3066\u4f7f\u3048\u308b\u3002\n- \u53d7\u3051\u4ed8\u3051\u305fMID\u3054\u3068\u306e\u60c5\u5831\u306e\u683c\u7d0d\u3084\u53c2\u7167\u306b\u3001\u6240\u8a6e\u9ad8\u901f\u306aDB\u304c\u5fc5\u8981\u3002\n\n# \u524d\u63d0\u77e5\u8b58\n\n- CentOS 7\n- Node.js\n- MongoDB, MongoDB.oplog\n- Python\n\n# \u5b9f\u88c5\u4f8b\n## MongoDB\u306e\u6e96\u5099\n\u7279\u306b\u6307\u5b9a\u3057\u305f\u306e\u306freplication, oplogSizeMB\u304f\u3089\u3044\u3067\u3059\u3002\n\n```text:mongod.line_bot.conf\nsystemLog:\n  destination: file\n  logAppend: true\n  path: /var/log/mongodb/mongod.line_bot.log\nstorage:\n  dbPath: /var/lib/mongo/line_bot\n  journal:\n    enabled: true\nprocessManagement:\n  fork: false  # fork and run in background\n  pidFilePath: /var/run/mongodb/mongod.line_bot.pid  # location of pidfile\nnet:\n  port: 27017\n  bindIp: 127.0.0.1  # Listen to local interface only, comment to listen on all interfaces.\nreplication:\n  oplogSizeMB: 3072\n```\n\n## Mongod\u306e\u8d77\u52d5\n\u30de\u30b9\u30bf\u30fc\u30e2\u30fc\u30c9\u3067\u8d77\u52d5\u3057\u307e\u3059\u3002\n\n```\n$ mongod --master -f mongod.line_bot.conf\n```\n\n## \u30b3\u30ec\u30af\u30b7\u30e7\u30f3\u306e\u4f5c\u6210\n\u30b3\u30ec\u30af\u30b7\u30e7\u30f3\u306fcapped collection\u306b\u3057\u3066\u3001\u5bb9\u91cf\u5897\u52a0\u3092\u6c17\u306b\u3057\u306a\u304f\u3066\u3082\u3044\u3044\u3088\u3046\u306b\u3057\u3066\u307e\u3059\u3002\n\n```text:create_collection\n#!/bin/bach -v\nmongo --port=27017 <<EOF\nuse line_bot;\ndb.createCollection(\"recvq\", {\n  capped: true,\n  size: 1048576000 // 1GB\n});\nEOF\n```\n\n## BOT Server(Node.js)\nfrontDesk.js\u3067\u306f\u3001LINE Server\u304b\u3089\u306e\u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u53d7\u3051\u53d6\u308a\u3001\u5373\u5ea7\u306b\u5fdc\u7b54\u3092\u8fd4\u3057\u307e\u3059\u3002\n\n```js:frontDesk.js\n// Settings of the this program\nvar httpsPort = 443;\nvar allowPath = \"/callback\";\nvar httpsOpt  = {\n    \"caKey\"  : \"/etc/letsencrypt/live/xxx/privkey.pem\",\n    \"caCert\" : \"/etc/letsencrypt/live/xxx/fullchain.pem\",\n    \"caCa\"   : \"/etc/letsencrypt/live/xxx/chain.pem\"\n};\nlocal = {};\nlocal['channelSecret'] = \"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\";\n\n// Settings of the MongoDB\nvar mongoHost = \"127.0.0.1\";\nvar mongoPort = 27017;\nvar mongoDb   = \"line_bot\";\nvar mongoCol  = \"recvq\";\n\nvar express= require('express'),\nbodyParser = require('body-parser'),\nlog4js     = require('log4js'),\nhttps      = require('https'),\nfs         = require('fs'),\nmongo      = require('mongodb'),\npath       = require('path');\n\nvar accept = require(__dirname+'/accept');\nvar app    = express();\napp.use(bodyParser.json());\napp.use(bodyParser.urlencoded({ extended: true }));\n\n// MongoDB\nvar MongoClient = require('mongodb').MongoClient, assert = require('assert');\nvar mongoUrl = 'mongodb://'+mongoHost + \":\" + mongoPort + \"/\" + mongoDb;\nset_col(local, mongoUrl, function(rc, local, mongoUrl) {\n    if (!rc) {\n        console.log(\"set_col.rc:\"+rc);\n        local.db.close();\n        process.exit(1);\n    }\n    console.log(\"Connected succesfully to \"+mongoUrl);\n});\n\n// handle a request\napp.post(allowPath, function(req, res, next) {\n    local['acceptTime'] = new Date().getTime();  // record accept time(ms)\n\n    // response ASAP\n    res.status(200).send(\"OK\");\n    res.end();\n\n    accept.post_callback(req, res, next);  // Handle the request\n});\n\n// server certificate authority\nvar httpsOpt = {\n    key:  fs.readFileSync(httpsOpt.caKey),\n    cert: fs.readFileSync(httpsOpt.caCert),\n    ca:   fs.readFileSync(httpsOpt.caCa)\n};\n// listen port\nvar httpsServer = https.createServer(httpsOpt, app);\nhttpsServer.listen(httpsPort, function() {\n    console.log('Listening on port '+httpsPort+'...'); \n}).on('error', function(err) {\n    if (err.errno === 'EADDRINUSE') {\n        console.log('This program is already running.');\n    } else {\n        console.log(err);\n    }\n    process.exit(1);\n});\n\nfunction set_col(local, url, callback) {\n    // Use connect method to connect to the MongoServer\n    MongoClient.connect(url, function(err, db) {\n        if (err) {\n            console.log(\"MongoDB connection error.\"); console.log(err);\n            process.exit(1);\n        }\n        local['db'] = db;\n\n        local.db.collection(mongoCol, function(err, collection) {\n            if (err) {\n                console.log(\"MongoDB collection error.\"); console.log(err);\n                process.exit(1);\n            }\n            local.db['collection'] = collection;\n            callback(true, local, url);\n        });\n    });\n}\n```\n\n\n\n\u305d\u306e\u5f8c\u3001accept.js\u3067\u3001\u7f72\u540d\u306e\u691c\u8a3c\u3001MongoDB\u3078\u306e\u767b\u9332\u3092\u884c\u3044\u307e\u3059\u3002\n\n```js:accept.js\nvar crypto = require('crypto');\nvar assert = require('assert');\n\nexports.post_callback = function(req, res) {\n    // signature\u306e\u6709\u7121\u3092\u30c1\u30a7\u30c3\u30af\n    if ((! req.headers) || (! req.headers[\"x-line-channelsignature\"])) {\n        console.log(\"400. Bad Request. The request does not have a x-line-channelsignature\");\n        return;\n    }\n\n    // request\u306eresult\u306e\u6709\u7121\u3092\u30c1\u30a7\u30c3\u30af\n    if ((! req.body) ||\n        (! req.body['result'])) {\n        console.log(\"400. Bad Request. The request does not have result\");\n        return;\n    }\n    var result_num = req.body.result.length;\n\n    // HTTP body\u3092channelSecret\u3067sha256\u6697\u53f7\u5316, base64\u30c0\u30a4\u30b8\u30a7\u30b9\u30c8\u3092\u6c42\u3081\u308b.\n    var body_str = new Buffer(JSON.stringify(req.body), 'utf8');\n    computedSignature = crypto.createHmac(\"sha256\",local['channelSecret']).update(body_str).digest(\"base64\");\n\n    // signature\u3092\u6bd4\u8f03\u3057\u3001\u6b63\u5f53\u6027\u3092\u78ba\u8a8d\n    if (req.headers[\"x-line-channelsignature\"] != computedSignature) {\n        console.log(\"400. Bad Request. The x-line-channelsignature is wrong.\");\n        return;\n    }\n\n    // \u53d7\u3051\u4ed8\u3051\u305f\u6642\u523b\u3092\u5165\u308c\u3066\u304a\u304f\n    for (var i=0; i<Object.keys(req.body.result).length; i++) {\n        req.body.result[i]['acceptTime'] = local['acceptTime'];\n    }\n\n    // \u30e1\u30c3\u30bb\u30fc\u30b8\u3092MongoDB\u306b\u767b\u9332\n    local.db.collection.insertMany(req.body.result, function(err, r) {\n        assert.equal(null, err);\n        assert.equal(result_num, r.insertedCount);\n\n        toQueueTime = new Date().getTime() - local['acceptTime'];\n        console.log(\"necessary time to store to queue: \"+toQueueTime+\" ms\");\n\n        return;\n    });\n\n}\n```\n\n## Dispatcher & jobWorker\nPython\u306e\u30de\u30eb\u30c1\u30b9\u30ec\u30c3\u30c9\u3067\u5b9f\u88c5\u3057\u307e\u3057\u305f\u3002\njobWorker\u30b9\u30ec\u30c3\u30c9\u306f\u3001\u751f\u6210\u3055\u308c\u305f\u3089wait()\u3067threading.Event()\u3092\u5f85\u3061\u307e\u3059\u3002\n\u30c8\u30ea\u30ac\u30fc\u30b9\u30ec\u30c3\u30c9\u306f\u3001oplog\u3092ts\u3067\u76e3\u8996\u3059\u308b\u3053\u3068\u3067\u3001Queue\u3078\u306e\u8ffd\u52a0\u3092\u5951\u6a5f\u306b\u51e6\u7406\u3092\u958b\u59cb\u3057\u307e\u3059\u3002\n\u8aad\u307f\u8fbc\u3093\u3060Queue\u306e\u5185\u5bb9\u3092\u7a7a\u304djobWorker\u30b9\u30ec\u30c3\u30c9\u306b\u5272\u308a\u5f53\u3066\u3001Event\u3092set\u3057\u3066jobWorker\u306b\u51e6\u7406\u3092\u958b\u59cb\u3055\u305b\u307e\u3059\u3002\n\n\u30ea\u30b9\u30c8\u3001\u5909\u6570\u306b\u5bfe\u3059\u308b\u30b9\u30ec\u30c3\u30c9\u306e\u53c2\u7167\u3001\u66f4\u65b0\u306f\u610f\u8b58\u3057\u3066\u3044\u308b\u306e\u3067\u3001\u30ed\u30c3\u30af\u306f\u3057\u3066\u3044\u307e\u305b\u3093...\n\u306e\u4e88\u5b9a\u3060\u3063\u305f\u306e\u3067\u3059\u304c\u3001LINE API\u30b5\u30fc\u30d0\u306b\u30de\u30eb\u30c1\u30b9\u30ec\u30c3\u30c9\u3067\u30a2\u30af\u30bb\u30b9\u3057\u3066\u3057\u307e\u3046\u3068\u3001\u540c\u6642\u63a5\u7d9a\u6570\u306e\u30a8\u30e9\u30fc\u304c\u767a\u751f\u3057\u307e\u3057\u305f\u3002\u306a\u306e\u3067\u3001jobWorker\u304b\u3089LINE API\u30b5\u30fc\u30d0\u3078\u306e\u30a2\u30af\u30bb\u30b9\u306b\u306facquire()\u3067\u6392\u4ed6\u30ed\u30c3\u30af\u3092\u4f7f\u7528\u3057\u3066\u307e\u3059\u3002\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u306b\u305d\u306e\u8fba\u306e\u4e8b\u306f\u66f8\u304b\u308c\u3066\u306a\u3044\u306e\u3067\u30011\u591a\u91cd\u3001\u30a2\u30af\u30bb\u30b9\u9593\u9694100ms\u306b\u3057\u3066\u3044\u307e\u3059\u3002\n\u306a\u304a\u3001\u79c1\u306fPython\u306e\u30de\u30eb\u30c1\u30b9\u30ec\u30c3\u30c9\u306f\u521d\u5fc3\u8005\u306a\u306e\u3067\u3001\u8aa4\u308a\u304c\u3042\u308c\u3070\u3054\u6307\u6458\u304f\u3060\u3055\u3044\u3002\n\n```py:dispatcher.py\n#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\n# Settings of the this program\nNumOfThread       = 20\nsearchInterval    = 100000  # uSec\nmainSleepInterval = 60      # Sec\n\n# Settings of the MongoDB\nmongoHost = \"127.0.0.1\";\nmongoPort = 27017;\nmongoDb   = \"line_bot\";\nmongoCol  = \"recvq\";\n\nimport os,os.path\nimport sys\nimport threading\nimport time\nimport json\nimport pymongo\nfrom   pymongo.cursor import CursorType\nfrom   datetime import datetime\nimport datetime\nimport jobWorker\n\nusleep = lambda x: time.sleep(x/1000000.0)  # \u30de\u30a4\u30af\u30ed\u79d2\u30b9\u30ea\u30fc\u30d7\n\n\n##### worker\u30b9\u30ec\u30c3\u30c9\ndef workerThread(tt):\n    tno = str(tt[0])\n    while True:\n        tt[2].clear()  # Event\u3092\u30af\u30ea\u30a2\u3057\u3001Evant\u767a\u751f\u307e\u3067\u5f85\u6a5f\n        tt[3] = 'w'\n        tt[2].wait()\n        if verbose:  # \u5f85\u6a5f\u7d42\u4e86\u3002\u51e6\u7406\u958b\u59cb\n            print '\\nworker['+tno+']: wake up'\n        \n        # \u3053\u3053\u3067\u5b9f\u969b\u306e\u51e6\u7406\u95a2\u6570\u3092\u547c\u3073\u51fa\u3059\n        jobWorker.jobWorker(verbose, tno, tt[4]['o'])\n\n\n##### MongoDB\u30c8\u30ea\u30ac\u30fc\u30b9\u30ec\u30c3\u30c9\ndef TriggerMongo(t, tchain, last, searchInterval, host, port, db, col):\n    dbCol = db + '.' + col\n    c = pymongo.MongoClient(host, port)\n    # Uncomment this for master/slave.\n    oplog = c.local.oplog['$main']\n    # Uncomment this for replica sets.\n    #oplog = c.local.oplog.rs\n    \n    first = next(oplog.find().sort('$natural', pymongo.DESCENDING).limit(-1))\n    ts = first['ts']\n    \n    while True:\n        cursor = oplog.find({'ts': {'$gt': ts}}, cursor_type=CursorType.TAILABLE_AWAIT, oplog_replay=True)\n        while cursor.alive:\n            for doc in cursor:\n                # \u5b9a\u671f\u7684\u306b {h:0,ts:Timestamp(nn.., 1),o:{},v:2,ns:'',op:'n'} \u304c\u8fd4\u308b\n                # \u304c op:'n' \u306f\u5358\u306a\u308b\u30a4\u30f3\u30d5\u30a9\u30e1\u30fc\u30b7\u30e7\u30f3\u3002\u7121\u8996\u3059\u308b\u3002\n                if doc['ns']==dbCol and doc['op']!='n':\n                    # \u7a7a\u304d\u30b9\u30ec\u30c3\u30c9\u3092\u63a2\u3059\n                    i = tchain[last]\n                    while t[i][3] != 'w':\n                        i = tchain[i]\n                        if i == tchain[last]:  # 1\u5468\u63a2\u3057\u305f\u3089\n                            usleep(searchInterval)\n                    \n                    t[i][4] = doc  # \u7a7a\u304d\u30b9\u30ec\u30c3\u30c9\u306et[n][4]\u306b\u30c7\u30fc\u30bf\u3092\u683c\u7d0d\n                    t[i][3] = 'r'\n                    t[i][2].set()  # t[n]\u306b\u51e6\u7406\u958b\u59cb\u6307\u793a\n                    last = i\n                # Work with doc here\n                ts = doc['ts']\n        print \"got out of a while corsor.alive loop\"\n\n\n#######################################################################\n\n# Check of the parameter\nverbose = False\nif len(sys.argv)==2 and sys.argv[1]=='-v':\n    verbose = True\nelif len(sys.argv)!=1:\n    print \"Usage: %s [-v]\" % (sys.argv[0],)\n    quit()\n\n# worker\u30b9\u30ec\u30c3\u30c9\u7ba1\u7406\u30c7\u30fc\u30bf\u4f5c\u6210 & worker\u30b9\u30ec\u30c3\u30c9\u751f\u6210\n# [ThreadNo, ThreadObj ,EvantObj, status, \u30b9\u30ec\u30c3\u30c9\u306b\u6e21\u3059\u30c7\u30fc\u30bf]\n#   (status ' ':\u6e96\u5099\u4e2d, 'w':\u5f85\u6a5f\u4e2d\u30fb\u7a7a\u304d, 'r':\u5b9f\u884c\u4e2d)\n#  :\nt = [ [0 for i in range(5)] for i in range(NumOfThread)]\nfor i in range(NumOfThread):\n    t[i][0] = i                  # Thread No.\n    t[i][2] = threading.Event()  # Evant\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u751f\u6210\n    t[i][3] = ' '                # is_running\n    # worker\u30b9\u30ec\u30c3\u30c9\u751f\u6210\n    t[i][1] = threading.Thread(name='worker['+str(i)+']', target=workerThread,\n                               args=(t[i],))\n    t[i][1].setDaemon(True)\n\n# Thread list of circulation\ntc = [0 for i in range(NumOfThread)]  # \u5024\u306f\u6b21\u306e\u30b9\u30ec\u30c3\u30c9No.\nfor i in range(NumOfThread):\n    tc[i] = i+1\ntc[i] = 0  # make a list of circulation\n\nlastThread = i  # \u6700\u5f8c\u306b\u4f7f\u3063\u305f\u30b9\u30ec\u30c3\u30c9. \u6b21\u306ftc[lastThread]\u756a\u76ee\u306e\u30b9\u30ec\u30c3\u30c9\u3092\u4f7f\u3046.\n\n# worker\u30b9\u30ec\u30c3\u30c9\u8d77\u52d5\nfor i in range(NumOfThread):\n    t[i][1].start()\n\n# worker\u30b9\u30ec\u30c3\u30c9\u8d77\u52d5\u5f8cwait\u72b6\u614b\u5f85\u3061\nyetAllThread = True\nwhile yetAllThread:\n    for i in range(NumOfThread):\n        if t[i][3] == ' ':\n            break\n        else:\n            usleep(100)  # \u76e3\u8996\u9593\u9694\u306f0.1\u30df\u30ea\u79d2\n    if i == NumOfThread-1:\n        yetAllThread = False\n    else:\n        usleep(100)  # \u76e3\u8996\u9593\u9694\u306f0.1\u30df\u30ea\u79d2\n\n# MongoDB\u30c8\u30ea\u30ac\u30fc\u30b9\u30ec\u30c3\u30c9\u751f\u6210\nt_mongo = threading.Thread(name='t_mongo', target=TriggerMongo, args=(t,tc,lastThread,searchInterval,mongoHost,mongoPort,mongoDb,mongoCol,))\nt_mongo.setDaemon(True)\nt_mongo.start()  # \u958b\u59cb\n\n# main\u30b9\u30ec\u30c3\u30c9\nwhile True:\n    time.sleep(mainSleepInterval)\n\n```\n\n\njobWorker.py\u304c\u5b9f\u969b\u306e\u51e6\u7406\u3092\u884c\u3046\u30b9\u30ec\u30c3\u30c9\u3067\u3059\u3002\u3053\u3053\u306f\u9001\u4fe1\u30b3\u30f3\u30c6\u30f3\u30c4\u7a2e\u5225\u306b\u5fdc\u3058\u3066\u30aa\u30a6\u30e0\u8fd4\u3057\u3059\u308b\u3060\u3051\u306e\u30b5\u30f3\u30d7\u30eb\u3067\u3059\u3002\nMID(from)\u306e\u53d6\u308a\u65b9\u304copType\u306b\u3088\u3063\u3066\u7570\u306a\u308a\u307e\u3059\u306e\u3067\u6ce8\u610f\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n\n```py:jobWorker.py\n#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n# Note of caution:\n# - This program is one of the threads.\n# - Must not do exit(),quit()\n# - Please use only return()\n\n# Settings of the LINE API Server\nlineApiHost      = \"trialbot-api_line_me\"\naccessIntervalMS = 100  # ms\ngetProfilesUrl   = \"https://trialbot-api.line.me/v1/profiles\"\npostUrl          = \"https://trialbot-api.line.me/v1/events\"\ngetContentUrl    = \"https://trialbot-api.line.me/v1/bot/message/$messageId/content\"\nheader =  {\n    \"Content-Type\"                : \"application/json; charser=UTF-8\",\n    \"X-Line-ChannelID\"            : \"xxxxxxxxxx\",\n    \"X-Line-ChannelSecret\"        : \"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\",\n    \"X-Line-Trusted-User-With-ACL\": \"xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\"\n}\npostBodyTemplate = {\n    \"to\"          : [],\n    \"toChannel\"   : 1383378250,\n    \"eventType\"   : \"138311608800106203\",\n    \"content\"     : {}\n}\n\nimport threading\nimport time\nimport datetime\nimport json\n\nusleep = lambda x: time.sleep(x/1000000.0)  # \u30de\u30a4\u30af\u30ed\u79d2\u30b9\u30ea\u30fc\u30d7\n\n# LINE API\u30b5\u30fc\u30d0\u306b\u8907\u6570jobWorker\u30b9\u30ec\u30c3\u30c9\u304b\u3089\u306e\u540c\u6642\u30a2\u30af\u30bb\u30b9\u3092\u56de\u907f\u3059\u308b\u305f\u3081\u306e\u30ed\u30c3\u30af\u95a2\u9023\nglobalLock = {}            # \u63a5\u7d9a\u5148\u3054\u3068\u306e\u30ed\u30c3\u30af\nglobalLastAccessTime = {}  # \u63a5\u7d9a\u5148\u3054\u3068\u306e\u6700\u7d42\u30a2\u30af\u30bb\u30b9\u30bf\u30a4\u30e0\nloadTime = int(time.time()*1000)\n\ndef jobWorker(verbose, mynum, recvBody):\n    global globalLock\n    global globalLastAccessTime\n    \n    # \u63a5\u7d9a\u5148\u3054\u3068\u306e\u30ed\u30c3\u30af\u306e\u521d\u671f\u8a2d\u5b9a\n    if not globalLock.has_key(lineApiHost):\n        globalLock[lineApiHost] = threading.Lock()\n    # \u63a5\u7d9a\u5148\u3054\u3068\u306e\u6700\u7d42\u30a2\u30af\u30bb\u30b9\u30bf\u30a4\u30e0\u306e\u521d\u671f\u8a2d\u5b9a\n    if not globalLastAccessTime.has_key(lineApiHost):\n        globalLastAccessTime[lineApiHost] = loadTime\n    \n    if verbose:\n        recvBody['_id'] = 'ObjectId(\"'+str(recvBody['_id'])+'\")'\n        print 'worker['+mynum+'] recvBody: '+str(int(time.time()*1000)-recvBody['acceptTime'])+' ms to here from accept'\n        print recvBody\n    \n    opType = recvBody['content'].get('opType')\n    \n    # blocked from user\n    if opType == 8:\n        # \u30e6\u30fc\u30b6\u7ba1\u7406\u304b\u3089\u30d6\u30ed\u30c3\u30af\u30e6\u30fc\u30b6\u306eMID(recvBody['content']['params'][0])\u3092\u524a\u9664\n        print 'please delete user \"'+recvBody['content']['params'][0]+'\" from management data.'\n        return\n    \n    # POST\u306eBody\u90e8\u3092\u30b3\u30d4\u30fc\n    postBody = {}\n    postBody['to'] = ''\n    postBody['toChannel'] = postBodyTemplate['toChannel']\n    postBody['eventType'] = postBodyTemplate['eventType']\n    postBody['content'] = {}\n    \n    # \u30e1\u30c3\u30bb\u30fc\u30b8\u8fd4\u4fe1\u5148\n    if opType==4:  # New user\n        postBody['to'] = [ recvBody['content']['params'][0] ]\n    else:\n        postBody['to'] = [ recvBody['content']['from'] ]\n    \n    # New user\n    if opType==4:\n        # \u30e6\u30fc\u30b6\u30d7\u30ed\u30d5\u30a3\u30fc\u30eb\u3092\u53d6\u5f97\n        result = apiServer(verbose, mynum, 'get', lineApiHost, getProfilesUrl, header, postBody['to'][0], accessIntervalMS)\n        userProfile = json.loads(result.text)\n        resText = '\u3088\u3046\u3053\u305d\uff01'\n        # \u30e6\u30fc\u30b6\u7ba1\u7406DB\u306b\u30e6\u30fc\u30b6\u306eMID\u3067\u30d7\u30ed\u30d5\u30a3\u30fc\u30eb\u3092\u8ffd\u52a0\u3059\u3079\u304d\n        print 'please add '+userProfile['contacts'][0]['displayName']+'\\'s profile to user management db.'\n        print json.dumps(userProfile, sort_keys = True, indent=4)\n    \n    # \u30e1\u30c3\u30bb\u30fc\u30b8\u306b\u5fdc\u3058\u305f\u51e6\u7406\n    contentType = recvBody['content'].get('contentType')\n    resText = ''\n    if contentType == 1:  # Text\n        resText = u'\u306f\u3044\u3001'+recvBody['content']['text']+u'\u3001\u3067\u3059\u306d\u3002'\n    elif contentType == 2:  # Image\n        resText = u'\u5199\u771f\u3067\u3059\u306d...'\n    elif contentType == 3:  # Video\n        resText = u'\u52d5\u753b\u3067\u3059\u306d...'\n    elif contentType == 4:  # Audio\n        resText = u'\u30dc\u30a4\u30b9\u30e1\u30c3\u30bb\u30fc\u30b8\u3067\u3059\u306d...'\n    elif contentType == 7:  # Location\n        resText = u'\u4f4d\u7f6e\u60c5\u5831\u3067\u3059\u306d...'\n        if verbose:\n            print recvBody['content']['text'].encode('utf-8')\n            print recvBody['content']['location']['title'].encode('utf-8')\n            print recvBody['content']['location']['address'].encode('utf-8')\n    elif contentType == 8:  # Sticker\n        resText = u'\u30b9\u30bf\u30f3\u30d7\u3067\u3059\u306d'\n        if verbose:\n            print recvBody['content']['contentMetadata']['STKTXT'].encode('utf-8')\n    elif contentType == 10: # Contact\n        # Contact(contentType==10)\u306a\u3089contentMetadata\u306emid\u30d7\u30ed\u30d5\u30a3\u30fc\u30eb\u3092\u53d6\u5f97\n        resText = recvBody['content']['contentMetadata']['displayName']+u'\u3055\u3093\u306e\u9023\u7d61\u5148\u3067\u3059\u306d'\n        result = apiServer(verbose, mynum, 'get', lineApiHost, getProfilesUrl, header, recvBody['content']['contentMetadata']['mid'], accessIntervalMS)\n        contactProfile = json.loads(result.text)\n        if verbose:\n            print '\\ncontactProfile: ' + str(contactProfile)\n    \n    # \u5fdc\u7b54\u30e1\u30c3\u30bb\u30fc\u30b8\u9001\u4fe1\n    if resText:\n        # \u30e6\u30fc\u30b6\u30d7\u30ed\u30d5\u30a3\u30fc\u30eb\u3092\u53d6\u5f97(\u672c\u6765\u306f\u30e6\u30fc\u30b6\u767b\u9332\u6642\u306bDB\u306b\u767b\u9332\u3001\u5fc5\u8981\u306b\u5fdc\u3058\u3066\u53d6\u5f97)\n        result = apiServer(verbose, mynum, 'get', lineApiHost, getProfilesUrl, header, postBody['to'][0], accessIntervalMS)\n        userProfile = json.loads(result.text)\n        resText = userProfile['contacts'][0]['displayName'] + u'\u3055\u3093\u3001' + resText\n        if verbose:\n            print '\\nprofile: ' + str(userProfile)\n        \n        # \u9001\u4fe1\u30e1\u30c3\u30bb\u30fc\u30b8\u306ftext(ContentType=1). \u305d\u306e\u4ed6\u306bImage,Video,Audio,Location,Sticker,multiple messages,rich messages\u304c\u9001\u308c\u308b\n        postBody['content'] = {\n            'contentType': 1,\n            'toType'     : 1,\n            'text'       : resText\n        }\n        if verbose:\n            print '\\nworker['+mynum+'] ' + postUrl\n            print 'worker['+mynum+'] postHeader: ' + json.dumps(header, sort_keys = True, indent = 4)\n            print 'worker['+mynum+'] postBody: ' + json.dumps(postBody, sort_keys = True, indent = 4)\n        \n        # \u30e1\u30c3\u30bb\u30fc\u30b8\u9001\u4fe1\n        r = apiServer(verbose, mynum, 'post', lineApiHost, postUrl, header, postBody, accessIntervalMS)\n    \n    return\n\n\n# LINE API\u30b5\u30fc\u30d0\u30a2\u30af\u30bb\u30b9\ndef apiServer(verbose, mynum, method, host, url, header, body, accessIntervalMS):\n    import requests\n    global globalLock\n    global globalLastAccessTime\n    \n    globalLock[host].acquire()  # Lock\n    \n    # LINE API\u30b5\u30fc\u30d0\u3078\u306e\u30a2\u30af\u30bb\u30b9\u306b\u4e00\u5b9a\u6642\u9593\u7a7a\u3051\u308b\u5834\u5408\u3001\u3042\u3068\u3069\u306e\u304f\u3089\u3044\u5f85\u3066\u3070\u826f\u3044\u304b\n    currentTime = int(time.time()*1000)\n    remain = accessIntervalMS - (currentTime - globalLastAccessTime[host])\n    \n    if verbose:\n        print 'worker['+mynum+'] time since last access(ms): '+str(currentTime - globalLastAccessTime[host])\n        print 'worker['+mynum+'] remain='+str(remain)+' ms'\n    \n    # wait accessIntervalMS from last access\n    if remain > 0:\n        usleep(remain*1000)\n    \n    if method=='get':\n        if body:\n            payload = { 'mids': body }\n            r = requests.get(url, params=payload, headers=header)\n        else:\n            if verbose:\n                print url, header\n            r = requests.get(url, headers=header)\n    else:\n        r = requests.post(url, data=json.dumps(body), headers=header)\n    \n    if verbose and r.status_code!=200:\n        print 'worker['+mynum+'] HTTP status code: ' + str(r.status_code)\n        print 'worker['+mynum+'] response: ' + r.text\n    \n    globalLastAccessTime[host] = int(time.time()*1000)\n    \n    globalLock[host].release()  # release\n    return r\n\n```\n\n# \u307e\u3068\u3081\n\u5927\u91cf\u30e1\u30c3\u30bb\u30fc\u30b8\u304c\u6765\u3066\u3082\u4f7f\u3048\u308b\u8efd\u91cfQueue\u6a5f\u69cb\u3001Dispatcher&jowWorker\u306e\u30b9\u30b1\u30eb\u30c8\u30f3\u3092\u5b9f\u88c5\u3067\u304d\u305f\u3068\u601d\u3044\u307e\u3059\u3002\n64bit CentOS 7\u306e\u521d\u671f\u72b6\u614b\u3060\u3068\u30b7\u30b9\u30c6\u30e0\u5168\u4f53\u3067\u30b9\u30ec\u30c3\u30c9\u6570\u306e\u4e0a\u9650\u306f30118\u306a\u306e\u3067\u3059\u304c..5000\u30b9\u30ec\u30c3\u30c9\u3060\u3068\u751f\u6210\u306b\u5931\u6557\u3057\u307e\u3059\u3002(...\u3063\u3066\u305d\u3093\u306a\u306b\u3044\u3089\u306a\u3044\u3051\u3069)\n\u3053\u306e\u3088\u3046\u306a\u6a5f\u69cb\u306fBOT\u30b5\u30fc\u30d0\u3060\u3051\u3067\u306a\u304f\u3001\u8907\u6570\u306eSMTP\u30b5\u30fc\u30d0\u3092\u4f7f\u3063\u3066\u5927\u91cf\u30e1\u30fc\u30eb\u3092\u52b9\u7387\u826f\u304f\u914d\u4fe1\u3059\u308b\u6642\u306b\u3082\u5fc5\u8981\u306b\u306a\u308a\u307e\u3059\u3002\n\njobWorker\u5074\u3092\u5225\u8a00\u8a9e\u30a2\u30d7\u30ea\u306b\u3059\u308b\u306a\u3089\u3001\u30de\u30a4\u30af\u30ed\u30b5\u30fc\u30d3\u30b9\u5316\u3059\u308b\u304b\u5225\u30d7\u30ed\u30bb\u30b9\u3067pipe\u3067\u901a\u4fe1\u3059\u308b\u3088\u3046\u306b\u5909\u66f4\u3059\u308c\u3070\u4f7f\u3048\u308b\u3068\u601d\u3044\u307e\u3059\u3002\n\u3053\u306e\u4ed5\u7d44\u307f\u3067\u8ca0\u8377\u5206\u6563\u3055\u305b\u308b\u306a\u3089\u3001MongoDB\u3092\u5225\u30b5\u30fc\u30d0\u3084Sharding\u306b\u3057\u305f\u308a\u3001\u300c4.consurring message\u300d\u4ee5\u964d\u3092\u5225\u30de\u30b7\u30f3\u306b\u6301\u3063\u3066\u3044\u304d\u307e\u3059\u3002\u305d\u308c\u4ee5\u4e0a\u306bjobWorker\u3092\u5206\u6563\u3055\u305b\u305f\u3044\u6642\u306f\u30de\u30a4\u30af\u30ed\u30b5\u30fc\u30d3\u30b9\u5316\u3059\u308b\u304b\u5225\u306e\u30ea\u30af\u30a8\u30b9\u30c8\u30d6\u30ed\u30fc\u30ab\u30fc\u306e\u4ed5\u7d44\u307f\u306b\u3057\u305f\u65b9\u304c\u826f\u3044\u3067\u3059\u3002\n", "tags": ["linebot", "Node.js", "Python", "MongoDB"]}