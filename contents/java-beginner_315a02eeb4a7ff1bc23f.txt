{"context": "yyyy\u5e74MM\u6708dd\u65e5\u306e\u51fa\u529b\u306e\u901f\u3055\u306b\u3064\u3044\u3066\u3001\u4ee5\u4e0b\u306e\u65b9\u6cd5\u3092\u6bd4\u8f03\u3057\u307e\u3057\u305f\u3002\n\n\u4f7f\u3046\u30af\u30e9\u30b9\u306f\u4ee5\u4e0b\u306e2\u3064\u3067\u3059\u3002\n\n\nCalendar\nLocalDateTime (java8)\n\n\n\u305d\u308c\u305e\u308c\u3067\u4ee5\u4e0b\u306e3\u3064\u306e\u65b9\u6cd5\u3092\u4f7f\u3044\u307e\u3057\u305f\u3002\n\n\nCalendar\u3067\u306fSimpleDateFormat\u3001LocalDateTime\u3067\u306fDateTimeFormatter\u3092\u4f7f\u7528\u3002\nString.format\u3092\u4f7f\u7528\u3002\n\u5e74\u3001\u6708\u3001\u65e5\u305d\u308c\u305e\u308c\u3092\u6587\u5b57\u5217\u9023\u7d50\u3002\n\n\n\n\u5b9f\u884c\u74b0\u5883\u306f\u4ee5\u4e0b\u306e\u901a\u308a\u3067\u3059\u3002\n\nDELL VOSTRO 1540\nWindows 10 Pro 32bit\nIntel Celelron 2.00 GHZ\n\u30e1\u30e2\u30ea 2.0GB\nHD\u306f\u7d04300GB\n\n\n\u30bd\u30fc\u30b9\u3068\u5b9f\u884c\u7d50\u679c\n\u4e0a\u8a18\u306e\u65b9\u6cd5\u309230000\u56de\u7e70\u308a\u8fd4\u3057\u305f\u7d50\u679c\u3092\u51fa\u529b\u3057\u307e\u3057\u305f\u3002\u4ee5\u4e0b\u3001\u30bd\u30fc\u30b9\u3068\u5b9f\u9a13\u7d50\u679c\u3067\u3059\u3002\n\n\u30bd\u30fc\u30b9\npackage test;\n\nimport java.text.SimpleDateFormat;\nimport java.time.LocalDateTime;\nimport java.time.format.DateTimeFormatter;\nimport java.util.Calendar;\nimport java.util.function.Supplier;\n\npublic class Test {\n\n    // --\u8a08\u6e2c\u7528--\n    private void printProcessingTime(Supplier<String> f) {\n        int count = 30000;\n        long start, end;\n        start = System.currentTimeMillis();\n        for (int i = 0; i < count; i++) {\n            f.get();\n        }\n        end = System.currentTimeMillis();\n        System.out.printf(\"\u51fa\u529b\u78ba\u8a8d:%s, \u8a08\u6e2c %3d: \", f.get(), end - start);\n        System.out.println();\n    }\n\n    // --\u8a08\u6e2c--\n    private static final String format = \"%04d\u5e74%02d\u5e74%02d\u65e5\";\n    private static final SimpleDateFormat SDF = new SimpleDateFormat(\"yyyy\u5e74MM\u6708dd\u65e5\");\n    private static final DateTimeFormatter DTF = DateTimeFormatter.ofPattern(\"yyyy\u5e74MM\u6708dd\u65e5\");\n\n    public static void main(String[] args) {\n        new Test().test();\n    }\n\n    private void test() {\n\n        Calendar calendar = Calendar.getInstance();\n        // \u65e5\u4ed8\u8a2d\u5b9a\n        calendar.set(Calendar.MONTH, 0);\n        calendar.set(Calendar.DAY_OF_MONTH, 9);\n\n        LocalDateTime localDateTime = LocalDateTime.of(\n                calendar.get(Calendar.YEAR),\n                calendar.get(Calendar.MONTH) + 1,\n                calendar.get(Calendar.DAY_OF_MONTH),\n                calendar.get(Calendar.HOUR),\n                calendar.get(Calendar.MINUTE));\n\n        // \u5b9f\u884c\n\n        System.out.printf(\"%-35s\", \"Calendar + SimpleDateFormat\");\n        printProcessingTime(() -> {\n            return SDF.format(calendar.getTime());\n        });\n\n        System.out.printf(\"%-35s\", \"Calendar + String.format\");\n        printProcessingTime(() -> {\n            return String.format(format,\n                    calendar.get(Calendar.YEAR),\n                    (calendar.get(Calendar.MONTH) + 1),\n                    calendar.get(Calendar.DAY_OF_MONTH));\n        });\n\n        System.out.printf(\"%-30s\", \"Calendar + \u6587\u5b57\u5217\u9023\u7d50\");\n        printProcessingTime(() -> {\n            int m = calendar.get(Calendar.MONTH) + 1;\n            int d = calendar.get(Calendar.DAY_OF_MONTH);\n            return calendar.get(Calendar.YEAR) + \"\u5e74\"\n                    + (m < 10 ? \"0\" + m : m) + \"\u6708\"\n                    + (d < 10 ? \"0\" + d : d) + \"\u65e5\";\n        });\n\n        System.out.printf(\"%-35s\", \"LocalDateTime + DateTimeFormatter\");\n        printProcessingTime(() -> {\n            return DTF.format(localDateTime);\n        });\n\n        System.out.printf(\"%-35s\", \"LocalDateTime + String.format\");\n        printProcessingTime(() -> {\n            return  String.format(format,\n                    localDateTime.getYear(),\n                    localDateTime.getMonthValue(),\n                    localDateTime.getDayOfMonth());\n        });\n\n        System.out.printf(\"%-30s\", \"LocalDateTime + \u6587\u5b57\u5217\u9023\u7d50\");\n        printProcessingTime(() -> {\n            int m = localDateTime.getMonthValue();\n            int d = localDateTime.getDayOfMonth();\n            return  localDateTime.getYear() + \"\u5e74\"\n                        + (m < 10 ? \"0\" + m : m) + \"\u6708\"\n                        + (d < 10 ? \"0\" + d : d) + \"\u65e5\";\n        });\n\n    }\n\n}\n\n\n\n\u7d50\u679c\nCalendar + SimpleDateFormat        \u51fa\u529b\u78ba\u8a8d:2016\u5e7401\u670809\u65e5, \u8a08\u6e2c 157: \nCalendar + String.format           \u51fa\u529b\u78ba\u8a8d:2016\u5e7401\u5e7409\u65e5, \u8a08\u6e2c 306: \nCalendar + \u6587\u5b57\u5217\u9023\u7d50              \u51fa\u529b\u78ba\u8a8d:2016\u5e7401\u670809\u65e5, \u8a08\u6e2c  21: \nLocalDateTime + DateTimeFormatter  \u51fa\u529b\u78ba\u8a8d:2016\u5e7401\u670809\u65e5, \u8a08\u6e2c  29: \nLocalDateTime + String.format      \u51fa\u529b\u78ba\u8a8d:2016\u5e7401\u5e7409\u65e5, \u8a08\u6e2c 238: \nLocalDateTime + \u6587\u5b57\u5217\u9023\u7d50         \u51fa\u529b\u78ba\u8a8d:2016\u5e7401\u670809\u65e5, \u8a08\u6e2c  17: \n\n\nLocalDateTime\u3067\u6587\u5b57\u5217\u9023\u7d50\u3059\u308b\u306e\u304c\u4e00\u756a\u901f\u3044\u3068\u3044\u3046\u7d50\u679c\u306b\u306a\u308a\u307e\u3057\u305f\u3002\n\n\u4fee\u6b63\u5c65\u6b74\n\n\u30bd\u30fc\u30b9\u3092\u4fee\u6b63\u3057\u3001java.util.function\u306b\u7528\u610f\u3055\u308c\u3066\u3044\u308b\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30fc\u30b9\u3092\u4f7f\u7528\u3002\n\nyyyy\u5e74MM\u6708dd\u65e5\u306e\u51fa\u529b\u306e\u901f\u3055\u306b\u3064\u3044\u3066\u3001\u4ee5\u4e0b\u306e\u65b9\u6cd5\u3092\u6bd4\u8f03\u3057\u307e\u3057\u305f\u3002\n\n+ \u4f7f\u3046\u30af\u30e9\u30b9\u306f\u4ee5\u4e0b\u306e2\u3064\u3067\u3059\u3002\n    + Calendar\n    + LocalDateTime (java8)\n+ \u305d\u308c\u305e\u308c\u3067\u4ee5\u4e0b\u306e3\u3064\u306e\u65b9\u6cd5\u3092\u4f7f\u3044\u307e\u3057\u305f\u3002\n    + Calendar\u3067\u306fSimpleDateFormat\u3001LocalDateTime\u3067\u306fDateTimeFormatter\u3092\u4f7f\u7528\u3002\n    + String.format\u3092\u4f7f\u7528\u3002\n    + \u5e74\u3001\u6708\u3001\u65e5\u305d\u308c\u305e\u308c\u3092\u6587\u5b57\u5217\u9023\u7d50\u3002\n\n\u5b9f\u884c\u74b0\u5883\u306f\u4ee5\u4e0b\u306e\u901a\u308a\u3067\u3059\u3002\n\n+ DELL VOSTRO 1540\n+ Windows 10 Pro 32bit\n+ Intel Celelron 2.00 GHZ\n+ \u30e1\u30e2\u30ea 2.0GB\n+ HD\u306f\u7d04300GB\n\n#\u30bd\u30fc\u30b9\u3068\u5b9f\u884c\u7d50\u679c\n\n\u4e0a\u8a18\u306e\u65b9\u6cd5\u309230000\u56de\u7e70\u308a\u8fd4\u3057\u305f\u7d50\u679c\u3092\u51fa\u529b\u3057\u307e\u3057\u305f\u3002\u4ee5\u4e0b\u3001\u30bd\u30fc\u30b9\u3068\u5b9f\u9a13\u7d50\u679c\u3067\u3059\u3002\n\n```java:\u30bd\u30fc\u30b9\npackage test;\n\nimport java.text.SimpleDateFormat;\nimport java.time.LocalDateTime;\nimport java.time.format.DateTimeFormatter;\nimport java.util.Calendar;\nimport java.util.function.Supplier;\n\npublic class Test {\n\n    // --\u8a08\u6e2c\u7528--\n    private void printProcessingTime(Supplier<String> f) {\n        int count = 30000;\n        long start, end;\n        start = System.currentTimeMillis();\n        for (int i = 0; i < count; i++) {\n            f.get();\n        }\n        end = System.currentTimeMillis();\n        System.out.printf(\"\u51fa\u529b\u78ba\u8a8d:%s, \u8a08\u6e2c %3d: \", f.get(), end - start);\n        System.out.println();\n    }\n\n    // --\u8a08\u6e2c--\n    private static final String format = \"%04d\u5e74%02d\u5e74%02d\u65e5\";\n    private static final SimpleDateFormat SDF = new SimpleDateFormat(\"yyyy\u5e74MM\u6708dd\u65e5\");\n    private static final DateTimeFormatter DTF = DateTimeFormatter.ofPattern(\"yyyy\u5e74MM\u6708dd\u65e5\");\n\n    public static void main(String[] args) {\n        new Test().test();\n    }\n\n    private void test() {\n\n        Calendar calendar = Calendar.getInstance();\n        // \u65e5\u4ed8\u8a2d\u5b9a\n        calendar.set(Calendar.MONTH, 0);\n        calendar.set(Calendar.DAY_OF_MONTH, 9);\n\n        LocalDateTime localDateTime = LocalDateTime.of(\n                calendar.get(Calendar.YEAR),\n                calendar.get(Calendar.MONTH) + 1,\n                calendar.get(Calendar.DAY_OF_MONTH),\n                calendar.get(Calendar.HOUR),\n                calendar.get(Calendar.MINUTE));\n\n        // \u5b9f\u884c\n\n        System.out.printf(\"%-35s\", \"Calendar + SimpleDateFormat\");\n        printProcessingTime(() -> {\n            return SDF.format(calendar.getTime());\n        });\n\n        System.out.printf(\"%-35s\", \"Calendar + String.format\");\n        printProcessingTime(() -> {\n            return String.format(format,\n                    calendar.get(Calendar.YEAR),\n                    (calendar.get(Calendar.MONTH) + 1),\n                    calendar.get(Calendar.DAY_OF_MONTH));\n        });\n\n        System.out.printf(\"%-30s\", \"Calendar + \u6587\u5b57\u5217\u9023\u7d50\");\n        printProcessingTime(() -> {\n            int m = calendar.get(Calendar.MONTH) + 1;\n            int d = calendar.get(Calendar.DAY_OF_MONTH);\n            return calendar.get(Calendar.YEAR) + \"\u5e74\"\n                    + (m < 10 ? \"0\" + m : m) + \"\u6708\"\n                    + (d < 10 ? \"0\" + d : d) + \"\u65e5\";\n        });\n\n        System.out.printf(\"%-35s\", \"LocalDateTime + DateTimeFormatter\");\n        printProcessingTime(() -> {\n            return DTF.format(localDateTime);\n        });\n\n        System.out.printf(\"%-35s\", \"LocalDateTime + String.format\");\n        printProcessingTime(() -> {\n            return  String.format(format,\n                    localDateTime.getYear(),\n                    localDateTime.getMonthValue(),\n                    localDateTime.getDayOfMonth());\n        });\n\n        System.out.printf(\"%-30s\", \"LocalDateTime + \u6587\u5b57\u5217\u9023\u7d50\");\n        printProcessingTime(() -> {\n            int m = localDateTime.getMonthValue();\n            int d = localDateTime.getDayOfMonth();\n            return  localDateTime.getYear() + \"\u5e74\"\n                        + (m < 10 ? \"0\" + m : m) + \"\u6708\"\n                        + (d < 10 ? \"0\" + d : d) + \"\u65e5\";\n        });\n\n    }\n\n}\n```\n\n```DOS:\u7d50\u679c\nCalendar + SimpleDateFormat        \u51fa\u529b\u78ba\u8a8d:2016\u5e7401\u670809\u65e5, \u8a08\u6e2c 157: \nCalendar + String.format           \u51fa\u529b\u78ba\u8a8d:2016\u5e7401\u5e7409\u65e5, \u8a08\u6e2c 306: \nCalendar + \u6587\u5b57\u5217\u9023\u7d50              \u51fa\u529b\u78ba\u8a8d:2016\u5e7401\u670809\u65e5, \u8a08\u6e2c  21: \nLocalDateTime + DateTimeFormatter  \u51fa\u529b\u78ba\u8a8d:2016\u5e7401\u670809\u65e5, \u8a08\u6e2c  29: \nLocalDateTime + String.format      \u51fa\u529b\u78ba\u8a8d:2016\u5e7401\u5e7409\u65e5, \u8a08\u6e2c 238: \nLocalDateTime + \u6587\u5b57\u5217\u9023\u7d50         \u51fa\u529b\u78ba\u8a8d:2016\u5e7401\u670809\u65e5, \u8a08\u6e2c  17: \n```\n\nLocalDateTime\u3067\u6587\u5b57\u5217\u9023\u7d50\u3059\u308b\u306e\u304c\u4e00\u756a\u901f\u3044\u3068\u3044\u3046\u7d50\u679c\u306b\u306a\u308a\u307e\u3057\u305f\u3002\n\n#\u4fee\u6b63\u5c65\u6b74\n\n+ \u30bd\u30fc\u30b9\u3092\u4fee\u6b63\u3057\u3001java.util.function\u306b\u7528\u610f\u3055\u308c\u3066\u3044\u308b\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30fc\u30b9\u3092\u4f7f\u7528\u3002\n", "tags": ["Java", "java8"]}