{"tags": ["interview", "\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0", "\u30c7\u30fc\u30bf\u69cb\u9020", "Search", "\u30c7\u30fc\u30bf\u69cb\u9020\u3068\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0"], "context": " \u3053\u306e\u8a18\u4e8b\u306f\u6700\u7d42\u66f4\u65b0\u65e5\u304b\u30891\u5e74\u4ee5\u4e0a\u304c\u7d4c\u904e\u3057\u3066\u3044\u307e\u3059\u3002\n\nProblem\n\u672c\u554f\u3082 LeetCode \u304b\u3089\u62dd\u501f\u3057\u3066\u3044\u307e\u3059.\n\u4e0e\u3048\u3089\u308c\u305f\u6574\u6570\u914d\u5217A\u30681\u3064\u306e\u6574\u6570K\u306b\u5bfe\u3057\u3066, A\u306e\u4e2d\u304b\u3089\u305d\u306e\u5408\u8a08\u5024\u304cK\u3068\u306a\u308b\u3088\u3046\u306a\n2\u3064\u306e\u6574\u6570\u3092\u898b\u3064\u3051, \u305d\u308c\u304c\u5148\u982d\u304b\u3089\u4f55\u756a\u76ee\u304b\u3092\u5c0f\u3055\u3044\u9806\u306b\u914d\u5217\u306e\u5f62\u3067\u8fd4\u5374\u305b\u3088.\n\uff08\u6761\u4ef6\u3092\u6e80\u305f\u30592\u3064\u306e\u6574\u6570\u306f, \u5fc5\u305a\u914d\u5217A\u5185\u306b1\u7d44\u3060\u3051\u5b58\u5728\u3059\u308b\u3082\u306e\u3068\u8003\u3048\u3066\u826f\u3044\uff09\n\n\u5165\u529b: numbers={2, 7, 11, 15}, target=9\n\u51fa\u529b: [1, 2]\n\n\nSolution\n\u3059\u3079\u3066\u306e\u7d44\u307f\u5408\u308f\u305b\u3092\u7dcf\u5f53\u308a\u3067\u30c1\u30a7\u30c3\u30af\u3057\u3066\u3044\u304f\u3068\u8a08\u7b97\u91cf O(N^2) \u3092\u8981\u3059\u308b\u306e\u3067, \u52b9\u7387\u7684\u306a\u89e3\u304d\u65b9\u304c\u5fc5\u8981.\n\u914d\u5217 A \u3092\u5148\u982d\u304b\u3089\u9806\u756a\u306b\u898b\u3066\u3044\u304d,  \u5024\u3068\u305d\u308c\u304c\u5148\u982d\u304b\u3089\u4f55\u756a\u76ee\u3067\u3042\u308b\u304b\u3092\u30cf\u30c3\u30b7\u30e5\u30de\u30c3\u30d7\u306b\u683c\u7d0d\u3057\u3066\u3044\u304d\u307e\u3059. \u3053\u3046\u3059\u308b\u3053\u3068\u3067, \u4eca\u898b\u3066\u3044\u308b\u5024\u306b\u5bfe\u3057\u3066 K - A[i] \u3092\u6e80\u305f\u3059\u3088\u3046\u306a\u5024\u304c\u65e2\u306b\u3042\u3063\u305f\u304b\u3092,   \u540c\u3058\u30cf\u30c3\u30b7\u30e5\u30de\u30c3\u30d7\u304b\u3089\u691c\u7d22 \u3059\u308b\u3053\u3068\u3067O(1)\u3067\u691c\u51fa\u53ef\u80fd\u306b\u306a\u308b\u3068\u3053\u308d\u304c\u30ad\u30fc\u30dd\u30a4\u30f3\u30c8\u3067\u3059\u306d.\nPython\u7248\u30b3\u30fc\u30c9:\nclass Solution(object):\n    def twoSum(self, nums, target):\n        m = {} # store existence of each character\n        for i, num in enumerate(nums):\n            v = target - num\n            if v not in m:\n                m[num] = i + 1\n            else:\n                return [m[v], i+1]\n\n\u8a08\u7b97\u91cf\u306f O(N), \u7a7a\u9593\u91cf\u3082 O(N) \u3068\u306a\u308a\u307e\u3059( N \u306f\u914d\u5217A\u306e\u9577\u3055\uff09.\nJava\u7248\u30b3\u30fc\u30c9:\n\npublic class Solution {\n    public int[] twoSum(int[] nums, int target) {\n        Map<Integer, Integer> m = new HashMap<Integer, Integer>();\n        for (int i = 0; i < nums.length; i++) {\n            int num = nums[i];\n            int diff = target - num;\n            if (m.containsKey(diff)) {\n                return new int[] {m.get(diff), i+1};\n            }\n            m.put(num, i+1);\n        }\n        return new int[2];\n    }\n}\n\n#### Problem\n\u672c\u554f\u3082 [LeetCode](https://leetcode.com/problems/two-sum/) \u304b\u3089\u62dd\u501f\u3057\u3066\u3044\u307e\u3059.\n\n```\n\u4e0e\u3048\u3089\u308c\u305f\u6574\u6570\u914d\u5217A\u30681\u3064\u306e\u6574\u6570K\u306b\u5bfe\u3057\u3066, A\u306e\u4e2d\u304b\u3089\u305d\u306e\u5408\u8a08\u5024\u304cK\u3068\u306a\u308b\u3088\u3046\u306a\n2\u3064\u306e\u6574\u6570\u3092\u898b\u3064\u3051, \u305d\u308c\u304c\u5148\u982d\u304b\u3089\u4f55\u756a\u76ee\u304b\u3092\u5c0f\u3055\u3044\u9806\u306b\u914d\u5217\u306e\u5f62\u3067\u8fd4\u5374\u305b\u3088.\n\uff08\u6761\u4ef6\u3092\u6e80\u305f\u30592\u3064\u306e\u6574\u6570\u306f, \u5fc5\u305a\u914d\u5217A\u5185\u306b1\u7d44\u3060\u3051\u5b58\u5728\u3059\u308b\u3082\u306e\u3068\u8003\u3048\u3066\u826f\u3044\uff09\n\n\u5165\u529b: numbers={2, 7, 11, 15}, target=9\n\u51fa\u529b: [1, 2]\n```\n\n#### Solution\n\u3059\u3079\u3066\u306e\u7d44\u307f\u5408\u308f\u305b\u3092\u7dcf\u5f53\u308a\u3067\u30c1\u30a7\u30c3\u30af\u3057\u3066\u3044\u304f\u3068\u8a08\u7b97\u91cf `O(N^2)` \u3092\u8981\u3059\u308b\u306e\u3067, \u52b9\u7387\u7684\u306a\u89e3\u304d\u65b9\u304c\u5fc5\u8981.\n\n\u914d\u5217 `A` \u3092\u5148\u982d\u304b\u3089\u9806\u756a\u306b\u898b\u3066\u3044\u304d,  \u5024\u3068\u305d\u308c\u304c\u5148\u982d\u304b\u3089\u4f55\u756a\u76ee\u3067\u3042\u308b\u304b\u3092\u30cf\u30c3\u30b7\u30e5\u30de\u30c3\u30d7\u306b\u683c\u7d0d\u3057\u3066\u3044\u304d\u307e\u3059. \u3053\u3046\u3059\u308b\u3053\u3068\u3067, \u4eca\u898b\u3066\u3044\u308b\u5024\u306b\u5bfe\u3057\u3066 `K - A[i]` \u3092\u6e80\u305f\u3059\u3088\u3046\u306a\u5024\u304c\u65e2\u306b\u3042\u3063\u305f\u304b\u3092,   \u540c\u3058\u30cf\u30c3\u30b7\u30e5\u30de\u30c3\u30d7\u304b\u3089\u691c\u7d22 \u3059\u308b\u3053\u3068\u3067`O(1)`\u3067\u691c\u51fa\u53ef\u80fd\u306b\u306a\u308b\u3068\u3053\u308d\u304c\u30ad\u30fc\u30dd\u30a4\u30f3\u30c8\u3067\u3059\u306d.\n\nPython\u7248\u30b3\u30fc\u30c9:\n\n```py\nclass Solution(object):\n    def twoSum(self, nums, target):\n        m = {} # store existence of each character\n        for i, num in enumerate(nums):\n            v = target - num\n            if v not in m:\n                m[num] = i + 1\n            else:\n                return [m[v], i+1]\n```\n\n\u8a08\u7b97\u91cf\u306f `O(N)`, \u7a7a\u9593\u91cf\u3082 `O(N)` \u3068\u306a\u308a\u307e\u3059( N \u306f\u914d\u5217A\u306e\u9577\u3055\uff09.\n\nJava\u7248\u30b3\u30fc\u30c9:\n\n```java\n\npublic class Solution {\n    public int[] twoSum(int[] nums, int target) {\n        Map<Integer, Integer> m = new HashMap<Integer, Integer>();\n        for (int i = 0; i < nums.length; i++) {\n            int num = nums[i];\n            int diff = target - num;\n            if (m.containsKey(diff)) {\n                return new int[] {m.get(diff), i+1};\n            }\n            m.put(num, i+1);\n        }\n        return new int[2];\n    }\n}\n```\n"}