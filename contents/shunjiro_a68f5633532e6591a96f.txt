{"tags": ["Android", "OpenGL"], "context": "\n\n\u80cc\u666f\u3092\u900f\u904e\u3055\u305b\u305f\u3044\u3002\n\nqiita.java\nglSurfaceView = new GLSurfaceView(getActivity().getApplicationContext());\nglSurfaceView.setEGLContextClientVersion(2);\nglSurfaceView.setZOrderOnTop(true);\nglSurfaceView.setEGLConfigChooser(8, 8, 8, 8, 16, 0);\nglSurfaceView.getHolder().setFormat(PixelFormat.RGBA_8888);\nmRenderer = new GameRenderer();\nglSurfaceView.setRenderer(mRenderer);\nglSurfaceView.setRenderMode(GLSurfaceView.RENDERMODE_CONTINUOUSLY);\n((FrameLayout)rootView.findViewById(R.id.base)).addView(glSurfaceView);\n\n\n\u3053\u3093\u306a\u611f\u3058\u306b\u3059\u308b\u3002\u5f0a\u5bb3\u3068\u3057\u3066\u306f\u3001GL\u306eView\u304c\u4e00\u756a\u624b\u524d\u306b\u6765\u3066\u3057\u307e\u3046\u4e8b\u3002\n\n\u753b\u50cf\u3092\u8868\u793a\u3057\u305f\u3044\n1,shader\u306e\u767b\u9332\u306f\n\nqiita.java\nprivate int shaderProgram;\n\n    public Sprite(){\n        shaderProgram = GLES20.glCreateProgram();\n        GLES20.glAttachShader(shaderProgram, ShaderUtil.loadShader(GLES20.GL_VERTEX_SHADER, ShaderUtil.vertexShaderCode));\n        GLES20.glAttachShader(shaderProgram, ShaderUtil.loadShader(GLES20.GL_FRAGMENT_SHADER, ShaderUtil.fragmentShaderCode));\n        GLES20.glLinkProgram(shaderProgram);\n    }\n\n\n\n\u3067ShaderUtil\u306f\u30aa\u30ea\u30b8\u30ca\u30eb\u306e\u30af\u30e9\u30b9\u3067\n\nqiita.java\npublic static int loadShader(int type, String shaderCode){\n        int[] compiled = new int[1];\n        int iShader = GLES20.glCreateShader(type);\n        GLES20.glShaderSource(iShader, shaderCode);\n        GLES20.glCompileShader(iShader);\n        GLES20.glGetShaderiv(iShader, GLES20.GL_COMPILE_STATUS, compiled, 0);\n        if (compiled[0] == 0) {\n            Log.e(\"Load Shader Failed\", \"Compilation\\n\" + GLES20.glGetShaderInfoLog(iShader));\n            return 0;\n        }\n        return iShader;\n    }\npublic static final String vertexShaderCode =\n            \"attribute vec4 vPosition;\" +\n                    \"uniform mat4 uMVPMatrix;\" +\n                    \"attribute vec2 a_texCoord;\" +\n                    \"varying vec2 v_texCoord;\" +\n                    \"void main() {\" +\n                    \"  gl_Position = uMVPMatrix*vPosition;\" +\n                    \"  v_texCoord = a_texCoord;\" +\n                    \"}\";\n    public static final String fragmentShaderCode =\"precision mediump float;\" +\n            \"precision mediump float;\" +\n            \"varying vec2 v_texCoord;\" +\n            \"uniform sampler2D s_texture;\" +\n            \"uniform float Opacity;\" +\n            \"uniform float Brightness;\" +\n            \"void main() {\" +\n            \"lowp vec4 textureColor = texture2D( s_texture, v_texCoord );\" +\n            \"gl_FragColor = vec4((textureColor.rgb + vec3(Brightness)), textureColor.w*Opacity);\\n\" +\n            \"}\";\n\n\n\u3053\u3053\u3067\u306f\u3001\u4e00\u5fdc\u3001\u660e\u5ea6\u3068\u3001RGB\u3068\u900f\u904e\u5ea6\u3092\u5909\u66f4\u3067\u304d\u308b\u3088\u3046\u306a\u4ed5\u69d8\u306e\u30c7\u30fc\u30bf\u3092\u3044\u308c\u3066\u3042\u308a\u307e\u3059\u3002\u2192\u3000fragmentShaderCode\n1\u3001\u753b\u50cf\u306e\u767b\u9332\n\nqiita.java\nint[] texture;\n    public void setupImage(Bitmap bitmap, int _uniq) {\n        texture = new int[1];\n        GLES20.glGenTextures(1, texture, 0);\n        GLES20.glActiveTexture(ShaderUtil.getTextureLocation(_uniq));\n        GLES20.glDeleteTextures(1, texture, 0);\n        GLES20.glBindTexture(GLES20.GL_TEXTURE_2D, texture[0]);\n        ShaderUtil.setBitmapShaderFilter();\n        // \u753b\u50cf\u3092\u30c6\u30af\u30b9\u30c1\u30e3\u306b\u767b\u9332\n        GLUtils.texImage2D(GLES20.GL_TEXTURE_2D, 0, bitmap, 0);\n    }\n\n\n\u3067ShaderUtil\u306f\u30aa\u30ea\u30b8\u30ca\u30eb\u306e\u30af\u30e9\u30b9\u3067\n\nqiita.java\npublic static int getTextureLocation(int uniq){\n        if(uniq>4){\n            Log.e(\"CAUTION\",\"\u7aef\u672b\u306b\u3088\u3063\u3066\u306f\u8868\u793a\u304c\u3055\u308c\u306a\u3044\u53ef\u80fd\u6027\u304c\u3042\u308a\u307e\u3059\u3002\");\n        }\n        if(uniq == 0){\n            return GLES20.GL_TEXTURE0;\n        }else if(uniq == 1){\n            return GLES20.GL_TEXTURE1;\n        }else if(uniq == 2){\n            return GLES20.GL_TEXTURE2;\n        }else if(uniq == 3){\n            return GLES20.GL_TEXTURE3;\n        }else if(uniq == 4){\n            return GLES20.GL_TEXTURE4;\n        }else if(uniq == 5){\n            return GLES20.GL_TEXTURE5;\n        }else if(uniq == 6){\n            return GLES20.GL_TEXTURE6;\n        }else if(uniq == 7){\n            return GLES20.GL_TEXTURE7;\n        }else if(uniq == 8){\n            return GLES20.GL_TEXTURE8;\n        }else if(uniq == 9){\n            return GLES20.GL_TEXTURE9;\n        }else if(uniq == 10){\n            return GLES20.GL_TEXTURE10;\n        }\n        return GLES20.GL_TEXTURE0;\n    }\n\n\n\u3068\n\nqiita.java\n public static void setBitmapShaderFilter(){\n        GLES20.glTexParameteri(GLES20.GL_TEXTURE_2D, GLES20.GL_TEXTURE_MIN_FILTER, GLES20.GL_LINEAR);\n        GLES20.glTexParameteri(GLES20.GL_TEXTURE_2D, GLES20.GL_TEXTURE_MAG_FILTER, GLES20.GL_LINEAR);\n        GLES20.glTexParameteri(GLES20.GL_TEXTURE_2D, GLES20.GL_TEXTURE_WRAP_S, GLES20.GL_CLAMP_TO_EDGE);\n        GLES20.glTexParameteri(GLES20.GL_TEXTURE_2D, GLES20.GL_TEXTURE_WRAP_T, GLES20.GL_CLAMP_TO_EDGE);\n    }\n\n\n\u3092\u8aad\u3093\u3067\u3044\u308b\u3002\n\u3053\u308c\u30c6\u30af\u30b9\u30c1\u30e3\u306e\u767b\u9332\u306b\u95a2\u3057\u3066\u306f\u3001\u4f55\u679a\u304b\uff01\u3092\u5165\u308c\u308b\u4e8b\u304c\u3067\u304d\u308b\u306e\u3060\u3051\u3069\u3001\n\u554f\u984c\u304c\u3042\u3063\u3066\u3001\u679a\u6570\u304c\u4e00\u5b9a\u4ee5\u4e0a\u306e\u5834\u5408\u306b\u306f\u3001\u8868\u793a\u304c\u5316\u3051\u308b\u3002\u307f\u305f\u3044\u306a\u4e8b\u304c\u767a\u751f\u3057\u307e\u3059\u3002\u3057\u304b\u3082\u3001\u7aef\u672b\u306b\u3088\u3063\u3066\u9650\u754c\u306e\u679a\u6570\u304c\u9055\u3046\u3068\u3044\u3046\u30af\u30bd\u4ed5\u69d8\u3082\u3042\u308b\u306e\u3067\u3001\n\u3067\u304d\u308c\u30701\u679a\u3092\u3044\u308f\u3086\u308b\u30b9\u30d7\u30e9\u30a4\u30c8\u30b7\u30fc\u30c8\u578b\u306b\u3057\u3066\u4f7f\u3046\u306e\u304c\u30d9\u30b9\u30c8\u3067\u3059\u3002\n\u524a\u9664\u306b\u95a2\u3057\u3066\u306f\u4e0b\u8a18\u307f\u305f\u3044\u306a\u306e\u3092\u7528\u610f\u3002\n\nqiita.java\npublic void dispose(){\n        GLES20.glBindTexture(GLES20.GL_TEXTURE_2D, 0);\n        GLES20.glDeleteTextures(1, texture, 0);\n    }\n\n\n\u3067\u3001\u63cf\u753b\u3092\u3059\u308b\u3068\u304d\u306b\u306f\u3001\n\nqiita.java\nfloat uvs[] = new float[3200];\nfloat vertices[] = new float[4800];\nFloatBuffer vertexBuffer;\nFloatBuffer uvBuffer;\nByteBuffer bb1;\nByteBuffer bb2;\n\n\n\u3092\u3042\u3089\u304b\u3058\u3081\u7528\u610f\u3057\u3066\u304a\u304f\u3068\u90fd\u5408\u304c\u3088\u304b\u3063\u305f\u308a\u3059\u308b\u3002\n\nqiita.java\nprivate int shaderProgram;\n\n    public Sprite(){\n        shaderProgram = GLES20.glCreateProgram();\n        GLES20.glAttachShader(shaderProgram, ShaderUtil.loadShader(GLES20.GL_VERTEX_SHADER, ShaderUtil.vertexShaderCode));\n        GLES20.glAttachShader(shaderProgram, ShaderUtil.loadShader(GLES20.GL_FRAGMENT_SHADER, ShaderUtil.fragmentShaderCode));\n        GLES20.glLinkProgram(shaderProgram);\n\n        //\u9802\u70b9\u5ea7\u6a19\u3092\u30d0\u30c3\u30d5\u30a1\u30fc\u306b\u5909\u63db\n        if(bb1 == null) {\n            bb1 = ByteBuffer.allocateDirect(vertices.length * 4);\n            bb1.order(ByteOrder.nativeOrder());\n            vertexBuffer = bb1.asFloatBuffer();\n        }\n        //\u753b\u50cf\u5074\u306e\u9802\u70b9\u5ea7\u6a19\u3092\u30d0\u30c3\u30d5\u30a1\u30fc\u306b\u5909\u63db\n        if(bb2 == null) {\n            bb2 = ByteBuffer.allocateDirect(uvs.length * 4);\n            bb2.order(ByteOrder.nativeOrder());\n            uvBuffer = bb2.asFloatBuffer();\n        }\n    }\n\n\n\u3053\u3093\u306a\u611f\u3058\u306b\u30d0\u30c3\u30d5\u30a1\u30fc\u5316\u3092\u884c\u3044\u3002\n\nqiita.java\npublic void draw(float alpha,float bright,Data _Data,int _uniq){\n        float uvs_s[] = _Data.GetUvs();\n        float vertices_s[] = _Data.GetVertices();\n        for(int k = 0 ; k < 12;k++) {\n            uvs[k] = uvs_s[k];\n        }\n        for(int k = 0 ; k < 18;k++) {\n            vertices[k] = vertices_s[k];\n        }\n        GLES20.glEnable(GLES20.GL_BLEND);\n        GLES20.glBlendFunc(GLES20.GL_SRC_ALPHA, GLES20.GL_ONE_MINUS_SRC_ALPHA);\n        GLES20.glUseProgram(shaderProgram);\n        int mPositionHandle = GLES20.glGetAttribLocation(shaderProgram, \"vPosition\");\n        GLES20.glEnableVertexAttribArray(mPositionHandle);\n        int mTexCoordLoc = GLES20.glGetAttribLocation(shaderProgram, \"a_texCoord\");\n        GLES20.glEnableVertexAttribArray(mTexCoordLoc);\n        vertexBuffer.put(vertices);\n        vertexBuffer.position(0);\n        uvBuffer.put(uvs);\n        uvBuffer.position(0);\n        GLES20.glVertexAttribPointer(mPositionHandle, 3, GLES20.GL_FLOAT, false, 0, vertexBuffer);\n        GLES20.glVertexAttribPointer(mTexCoordLoc, 2, GLES20.GL_FLOAT, false, 0, uvBuffer);\n        GLES20.glUniform1i(GLES20.glGetUniformLocation(shaderProgram, \"s_texture\"), _uniq);\n        GLES20.glUniform1f(GLES20.glGetUniformLocation(shaderProgram, \"Opacity\"), alpha);\n        GLES20.glUniform1f(GLES20.glGetUniformLocation(shaderProgram, \"Brightness\"), bright);\n        GLES20.glUniformMatrix4fv(GLES20.glGetUniformLocation(shaderProgram, \"uMVPMatrix\"), 1, false, mtrxProjectionAndView, 0);\n        GLES20.glDrawArrays(GLES20.GL_TRIANGLES, 0, uvs_s.length/2);\n        GLES20.glDisableVertexAttribArray(mPositionHandle);\n        GLES20.glDisableVertexAttribArray(mTexCoordLoc);\n        GLES20.glDisable(GLES20.GL_BLEND);\n    }\n\n\n\u3063\u3066\u3059\u308b\u306e\u3067\u3059\u304c\u3001\n\nqiita.java\nmtrxProjectionAndView\u306b\u95a2\u3057\u3066\u306f\u3001\u307e\u3060\u5b9a\u7fa9\u3057\u3066\u3044\u306a\u304b\u3063\u305f\u306e\u3067\u3059\u304c\u3001\n\n\n// Our matrices\n    public final float[] mtrxProjection = new float[16];\n    public final float[] mtrxView = new float[16];\n    public final float[] mtrxProjectionAndView = new float[16];\n\n\nfor(int i=0;i<16;i++) {\n            mtrxProjection[i] = 0.0f;\n            mtrxView[i] = 0.0f;\n            mtrxProjectionAndView[i] = 0.0f;\n        }\n\n        // \u753b\u9762\u306e\u5ea7\u6a19\u7cfb\u3092\u4f5c\u6210\n        Matrix.orthoM(mtrxProjection, 0,\n                0f, width,//\u5de6\u7aef\u2192\u53f3\u7aef\n                height, 0.0f, //\u4e0b\u7aef\u2192\u4e0a\u7aef\n                -1, 1//\u624b\u524d\u2192\u5965\n        );\n\n        //\u30ab\u30e1\u30e9\u306e\u5411\u304d\u3092\u4f5c\u6210\n        Matrix.setLookAtM(mtrxView, 0,\n                0f, 0f, 1f,//\u30ab\u30e1\u30e9\u4f4d\u7f6e\n                0f, 0f, 0f,//\u30ab\u30e1\u30e9\u306e\u5411\u304d\n                0f, 1.0f, 0.0f//\u30ab\u30e1\u30e9\u306e\u982d\n        );\n\n        //\u4e0a\u8a18\uff12\u3064\u3092\u5408\u7b97\u3002\n        Matrix.multiplyMM(mtrxProjectionAndView, 0, mtrxProjection, 0, mtrxView, 0);\n        mtrxProjectionAndView = mtrxProjectionAndView.clone();\n\n\n\u3053\u3093\u306a\u98a8\u306b\u5ea7\u6a19\u306e\u30c7\u30fc\u30bf\u3092\u7528\u610f\u3057\u3066\u304a\u304f\u3068\u4fbf\u5229\n\u3067\u3001\n\nqiita.java\nData.GetUvs();\n\n\n\u3068\u304b\u306b\u3064\u3044\u3066\u306f\u3001UVS\u3092\u7528\u610f\u3057\u3066\u306d\u3063\u3066\u4e8b\n\nqiita.java\nData.GetVertices();\n\n\n\u306fVERTICES\u3092\u7528\u610f\u3057\u3066\u306d\u3063\u3066\u90e8\u5206\u3067\u30c7\u30fc\u30bf\u306f\u5404\u3005\u304c\u7528\u610f\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u304c\nUVS\u306f\u753b\u50cf\u306e\u5ea7\u6a19\u306e\u4e8b\nVERTICES\u306f\u30b9\u30c6\u30fc\u30b8\u306b\u5ea7\u6a19\u306e\u4e8b\u3002\n\u305f\u3068\u3048\u3070\n\nqiita.java\npublic static float[] getUvs(){\n        return new float[]{\n                0,    0,\n                0,    1,\n                1,    0,\n                0,    1,\n                1,    0,\n                1,    1\n        };\n    }\n\n\n\u3053\u308c\u306f\u8aad\u307f\u8fbc\u3093\u3060\u753b\u50cf\u307e\u308b\u307e\u308b\u3002\n\nqiita.java\npublic static float[] getUvs(){\n        return new float[]{\n                0,    0,\n                0,    1/4,\n                1/4,    0,\n                0,    1/4,\n                1/4,    0,\n                1/4,    1/4\n        };\n    }\n\n\n\u3053\u308c\u306f\u8aad\u307f\u8fbc\u3093\u3060\u753b\u50cf\u306e\u5de6\u4e0a1/4\n\u307f\u305f\u3044\u306b\u3001\u3044\u308d\u3044\u308dvertices\u306b\u3064\u3044\u3066\u306f\u3001\u4e0a\u8a18\u306emtrxProjectionAndView\u3067\u8a2d\u5b9a\u3057\u305f\u81ea\u5206\u306e\u5ea7\u6a19\u7cfb\u3092\u8003\u3048\u308b\u5fc5\u8981\u304c\u3042\u308b\u306e\u3060\u3051\u3069\u3001\n\nqiita.java\npublic static float[] getVertices(){\n\n        return new float[]{\n                0, 0, 0.0f,\n                0, height, 0.0f,\n                width, 0, 0.0f,\n                0, height, 0.0f,\n                width, 0, 0.0f,\n                width, height, 0.0f\n        };\n    }\n\n\n\u3053\u308c\u3067\u5168\u753b\u9762\u306b\u8cbc\u308a\u3064\u3051\u308b\u4e8b\u304c\u51fa\u6765\u308b\u3002\n\u3067\u308f\u308a\u3068\u81ea\u5206\u306f2D\u3067\u4f7f\u3046\u306e\u3060\u3051\u3069\u3001\u3053\u308c\u3060\u3051\u3042\u308c\u3070\u3001\u3042\u3068\u306f\u4e0a\u624b\u304f\u4f7f\u3046\u3060\u3051\u3067\u3001\n\u3053\u308c\u4ee5\u4e0a\u4f59\u8a08\u306a\u4e8b\u3092\u8003\u3048\u308b\u4e8b\u3082\u306a\u3044\u306e\u3067\u3001\u4e00\u56de\u753b\u50cf\u3092\u8868\u793a\u3055\u305b\u3066\u3001\u597d\u304d\u306a\u4f4d\u7f6e\u3068\u30b9\u30d7\u30e9\u30a4\u30c8\u30b7\u30fc\u30c8\u3092\u3046\u307e\u304f\u4f7f\u3048\u3070\u3001\u30ab\u30f3\u30bf\u30f3\u306b\u3067\u304d\u308b\u304b\u3068\u601d\u3044\u307e\u3059\u3002\n\u4e0a\u8a18\u3001\u7d50\u69cb\u5927\u639b\u304b\u308a\u306a\u6848\u4ef6\u3067\u3082\u4f7f\u3063\u305f\u5185\u5bb9\u3067\u3059\u304c\u3001OPENGL\u81ea\u4f53\u3042\u307e\u308a\u3001Android\u3067\u4f7f\u3046\u4eba\u304c\u3044\u306a\u3044\u304b\u3068\u601d\u3044\u307e\u3059\u304c\u3001\u60a9\u3093\u3067\u308b\u65b9\u306a\u3069\u306b\u306f\u3001\u3042\u308b\u7a0b\u5ea6\u9053\u3057\u308b\u3079\u306b\u306a\u308b\u304b\u3068\u601d\u3044\u307e\u3059\u3002\n## \u80cc\u666f\u3092\u900f\u904e\u3055\u305b\u305f\u3044\u3002\n\n```java:qiita.java\nglSurfaceView = new GLSurfaceView(getActivity().getApplicationContext());\nglSurfaceView.setEGLContextClientVersion(2);\nglSurfaceView.setZOrderOnTop(true);\nglSurfaceView.setEGLConfigChooser(8, 8, 8, 8, 16, 0);\nglSurfaceView.getHolder().setFormat(PixelFormat.RGBA_8888);\nmRenderer = new GameRenderer();\nglSurfaceView.setRenderer(mRenderer);\nglSurfaceView.setRenderMode(GLSurfaceView.RENDERMODE_CONTINUOUSLY);\n((FrameLayout)rootView.findViewById(R.id.base)).addView(glSurfaceView);\n```\n\n\u3053\u3093\u306a\u611f\u3058\u306b\u3059\u308b\u3002\u5f0a\u5bb3\u3068\u3057\u3066\u306f\u3001GL\u306eView\u304c\u4e00\u756a\u624b\u524d\u306b\u6765\u3066\u3057\u307e\u3046\u4e8b\u3002\n\n\n## \u753b\u50cf\u3092\u8868\u793a\u3057\u305f\u3044\n\n\n1,shader\u306e\u767b\u9332\u306f\n\n```java:qiita.java\nprivate int shaderProgram;\n\n    public Sprite(){\n        shaderProgram = GLES20.glCreateProgram();\n        GLES20.glAttachShader(shaderProgram, ShaderUtil.loadShader(GLES20.GL_VERTEX_SHADER, ShaderUtil.vertexShaderCode));\n        GLES20.glAttachShader(shaderProgram, ShaderUtil.loadShader(GLES20.GL_FRAGMENT_SHADER, ShaderUtil.fragmentShaderCode));\n        GLES20.glLinkProgram(shaderProgram);\n    }\n\n```\n\n\u3067ShaderUtil\u306f\u30aa\u30ea\u30b8\u30ca\u30eb\u306e\u30af\u30e9\u30b9\u3067\n\n```java:qiita.java\npublic static int loadShader(int type, String shaderCode){\n        int[] compiled = new int[1];\n        int iShader = GLES20.glCreateShader(type);\n        GLES20.glShaderSource(iShader, shaderCode);\n        GLES20.glCompileShader(iShader);\n        GLES20.glGetShaderiv(iShader, GLES20.GL_COMPILE_STATUS, compiled, 0);\n        if (compiled[0] == 0) {\n            Log.e(\"Load Shader Failed\", \"Compilation\\n\" + GLES20.glGetShaderInfoLog(iShader));\n            return 0;\n        }\n        return iShader;\n    }\npublic static final String vertexShaderCode =\n            \"attribute vec4 vPosition;\" +\n                    \"uniform mat4 uMVPMatrix;\" +\n                    \"attribute vec2 a_texCoord;\" +\n                    \"varying vec2 v_texCoord;\" +\n                    \"void main() {\" +\n                    \"  gl_Position = uMVPMatrix*vPosition;\" +\n                    \"  v_texCoord = a_texCoord;\" +\n                    \"}\";\n    public static final String fragmentShaderCode =\"precision mediump float;\" +\n            \"precision mediump float;\" +\n            \"varying vec2 v_texCoord;\" +\n            \"uniform sampler2D s_texture;\" +\n            \"uniform float Opacity;\" +\n            \"uniform float Brightness;\" +\n            \"void main() {\" +\n            \"lowp vec4 textureColor = texture2D( s_texture, v_texCoord );\" +\n            \"gl_FragColor = vec4((textureColor.rgb + vec3(Brightness)), textureColor.w*Opacity);\\n\" +\n            \"}\";\n```\n\n\u3053\u3053\u3067\u306f\u3001\u4e00\u5fdc\u3001\u660e\u5ea6\u3068\u3001RGB\u3068\u900f\u904e\u5ea6\u3092\u5909\u66f4\u3067\u304d\u308b\u3088\u3046\u306a\u4ed5\u69d8\u306e\u30c7\u30fc\u30bf\u3092\u3044\u308c\u3066\u3042\u308a\u307e\u3059\u3002\u2192\u3000fragmentShaderCode\n\n1\u3001\u753b\u50cf\u306e\u767b\u9332\n\n\n```java:qiita.java\nint[] texture;\n    public void setupImage(Bitmap bitmap, int _uniq) {\n        texture = new int[1];\n        GLES20.glGenTextures(1, texture, 0);\n        GLES20.glActiveTexture(ShaderUtil.getTextureLocation(_uniq));\n        GLES20.glDeleteTextures(1, texture, 0);\n        GLES20.glBindTexture(GLES20.GL_TEXTURE_2D, texture[0]);\n        ShaderUtil.setBitmapShaderFilter();\n        // \u753b\u50cf\u3092\u30c6\u30af\u30b9\u30c1\u30e3\u306b\u767b\u9332\n        GLUtils.texImage2D(GLES20.GL_TEXTURE_2D, 0, bitmap, 0);\n    }\n```\n\n\u3067ShaderUtil\u306f\u30aa\u30ea\u30b8\u30ca\u30eb\u306e\u30af\u30e9\u30b9\u3067\n\n```java:qiita.java\npublic static int getTextureLocation(int uniq){\n        if(uniq>4){\n            Log.e(\"CAUTION\",\"\u7aef\u672b\u306b\u3088\u3063\u3066\u306f\u8868\u793a\u304c\u3055\u308c\u306a\u3044\u53ef\u80fd\u6027\u304c\u3042\u308a\u307e\u3059\u3002\");\n        }\n        if(uniq == 0){\n            return GLES20.GL_TEXTURE0;\n        }else if(uniq == 1){\n            return GLES20.GL_TEXTURE1;\n        }else if(uniq == 2){\n            return GLES20.GL_TEXTURE2;\n        }else if(uniq == 3){\n            return GLES20.GL_TEXTURE3;\n        }else if(uniq == 4){\n            return GLES20.GL_TEXTURE4;\n        }else if(uniq == 5){\n            return GLES20.GL_TEXTURE5;\n        }else if(uniq == 6){\n            return GLES20.GL_TEXTURE6;\n        }else if(uniq == 7){\n            return GLES20.GL_TEXTURE7;\n        }else if(uniq == 8){\n            return GLES20.GL_TEXTURE8;\n        }else if(uniq == 9){\n            return GLES20.GL_TEXTURE9;\n        }else if(uniq == 10){\n            return GLES20.GL_TEXTURE10;\n        }\n        return GLES20.GL_TEXTURE0;\n    }\n```\n\n\u3068\n\n```java:qiita.java\n public static void setBitmapShaderFilter(){\n        GLES20.glTexParameteri(GLES20.GL_TEXTURE_2D, GLES20.GL_TEXTURE_MIN_FILTER, GLES20.GL_LINEAR);\n        GLES20.glTexParameteri(GLES20.GL_TEXTURE_2D, GLES20.GL_TEXTURE_MAG_FILTER, GLES20.GL_LINEAR);\n        GLES20.glTexParameteri(GLES20.GL_TEXTURE_2D, GLES20.GL_TEXTURE_WRAP_S, GLES20.GL_CLAMP_TO_EDGE);\n        GLES20.glTexParameteri(GLES20.GL_TEXTURE_2D, GLES20.GL_TEXTURE_WRAP_T, GLES20.GL_CLAMP_TO_EDGE);\n    }\n```\n\n\u3092\u8aad\u3093\u3067\u3044\u308b\u3002\n\n\u3053\u308c\u30c6\u30af\u30b9\u30c1\u30e3\u306e\u767b\u9332\u306b\u95a2\u3057\u3066\u306f\u3001\u4f55\u679a\u304b\uff01\u3092\u5165\u308c\u308b\u4e8b\u304c\u3067\u304d\u308b\u306e\u3060\u3051\u3069\u3001\n\u554f\u984c\u304c\u3042\u3063\u3066\u3001\u679a\u6570\u304c\u4e00\u5b9a\u4ee5\u4e0a\u306e\u5834\u5408\u306b\u306f\u3001\u8868\u793a\u304c\u5316\u3051\u308b\u3002\u307f\u305f\u3044\u306a\u4e8b\u304c\u767a\u751f\u3057\u307e\u3059\u3002\u3057\u304b\u3082\u3001\u7aef\u672b\u306b\u3088\u3063\u3066\u9650\u754c\u306e\u679a\u6570\u304c\u9055\u3046\u3068\u3044\u3046\u30af\u30bd\u4ed5\u69d8\u3082\u3042\u308b\u306e\u3067\u3001\n\u3067\u304d\u308c\u30701\u679a\u3092\u3044\u308f\u3086\u308b\u30b9\u30d7\u30e9\u30a4\u30c8\u30b7\u30fc\u30c8\u578b\u306b\u3057\u3066\u4f7f\u3046\u306e\u304c\u30d9\u30b9\u30c8\u3067\u3059\u3002\n\n\u524a\u9664\u306b\u95a2\u3057\u3066\u306f\u4e0b\u8a18\u307f\u305f\u3044\u306a\u306e\u3092\u7528\u610f\u3002\n\n```java:qiita.java\npublic void dispose(){\n        GLES20.glBindTexture(GLES20.GL_TEXTURE_2D, 0);\n        GLES20.glDeleteTextures(1, texture, 0);\n    }\n```\n\u3067\u3001\u63cf\u753b\u3092\u3059\u308b\u3068\u304d\u306b\u306f\u3001\n\n\n```java:qiita.java\nfloat uvs[] = new float[3200];\nfloat vertices[] = new float[4800];\nFloatBuffer vertexBuffer;\nFloatBuffer uvBuffer;\nByteBuffer bb1;\nByteBuffer bb2;\n```\n\n\u3092\u3042\u3089\u304b\u3058\u3081\u7528\u610f\u3057\u3066\u304a\u304f\u3068\u90fd\u5408\u304c\u3088\u304b\u3063\u305f\u308a\u3059\u308b\u3002\n\n\n```java:qiita.java\nprivate int shaderProgram;\n\n    public Sprite(){\n        shaderProgram = GLES20.glCreateProgram();\n        GLES20.glAttachShader(shaderProgram, ShaderUtil.loadShader(GLES20.GL_VERTEX_SHADER, ShaderUtil.vertexShaderCode));\n        GLES20.glAttachShader(shaderProgram, ShaderUtil.loadShader(GLES20.GL_FRAGMENT_SHADER, ShaderUtil.fragmentShaderCode));\n        GLES20.glLinkProgram(shaderProgram);\n\n        //\u9802\u70b9\u5ea7\u6a19\u3092\u30d0\u30c3\u30d5\u30a1\u30fc\u306b\u5909\u63db\n        if(bb1 == null) {\n            bb1 = ByteBuffer.allocateDirect(vertices.length * 4);\n            bb1.order(ByteOrder.nativeOrder());\n            vertexBuffer = bb1.asFloatBuffer();\n        }\n        //\u753b\u50cf\u5074\u306e\u9802\u70b9\u5ea7\u6a19\u3092\u30d0\u30c3\u30d5\u30a1\u30fc\u306b\u5909\u63db\n        if(bb2 == null) {\n            bb2 = ByteBuffer.allocateDirect(uvs.length * 4);\n            bb2.order(ByteOrder.nativeOrder());\n            uvBuffer = bb2.asFloatBuffer();\n        }\n    }\n```\n\n\u3053\u3093\u306a\u611f\u3058\u306b\u30d0\u30c3\u30d5\u30a1\u30fc\u5316\u3092\u884c\u3044\u3002\n\n\n```java:qiita.java\npublic void draw(float alpha,float bright,Data _Data,int _uniq){\n        float uvs_s[] = _Data.GetUvs();\n        float vertices_s[] = _Data.GetVertices();\n        for(int k = 0 ; k < 12;k++) {\n            uvs[k] = uvs_s[k];\n        }\n        for(int k = 0 ; k < 18;k++) {\n            vertices[k] = vertices_s[k];\n        }\n        GLES20.glEnable(GLES20.GL_BLEND);\n        GLES20.glBlendFunc(GLES20.GL_SRC_ALPHA, GLES20.GL_ONE_MINUS_SRC_ALPHA);\n        GLES20.glUseProgram(shaderProgram);\n        int mPositionHandle = GLES20.glGetAttribLocation(shaderProgram, \"vPosition\");\n        GLES20.glEnableVertexAttribArray(mPositionHandle);\n        int mTexCoordLoc = GLES20.glGetAttribLocation(shaderProgram, \"a_texCoord\");\n        GLES20.glEnableVertexAttribArray(mTexCoordLoc);\n        vertexBuffer.put(vertices);\n        vertexBuffer.position(0);\n        uvBuffer.put(uvs);\n        uvBuffer.position(0);\n        GLES20.glVertexAttribPointer(mPositionHandle, 3, GLES20.GL_FLOAT, false, 0, vertexBuffer);\n        GLES20.glVertexAttribPointer(mTexCoordLoc, 2, GLES20.GL_FLOAT, false, 0, uvBuffer);\n        GLES20.glUniform1i(GLES20.glGetUniformLocation(shaderProgram, \"s_texture\"), _uniq);\n        GLES20.glUniform1f(GLES20.glGetUniformLocation(shaderProgram, \"Opacity\"), alpha);\n        GLES20.glUniform1f(GLES20.glGetUniformLocation(shaderProgram, \"Brightness\"), bright);\n        GLES20.glUniformMatrix4fv(GLES20.glGetUniformLocation(shaderProgram, \"uMVPMatrix\"), 1, false, mtrxProjectionAndView, 0);\n        GLES20.glDrawArrays(GLES20.GL_TRIANGLES, 0, uvs_s.length/2);\n        GLES20.glDisableVertexAttribArray(mPositionHandle);\n        GLES20.glDisableVertexAttribArray(mTexCoordLoc);\n        GLES20.glDisable(GLES20.GL_BLEND);\n    }\n```\n\u3063\u3066\u3059\u308b\u306e\u3067\u3059\u304c\u3001\n\n```java:qiita.java\nmtrxProjectionAndView\u306b\u95a2\u3057\u3066\u306f\u3001\u307e\u3060\u5b9a\u7fa9\u3057\u3066\u3044\u306a\u304b\u3063\u305f\u306e\u3067\u3059\u304c\u3001\n\n\n// Our matrices\n    public final float[] mtrxProjection = new float[16];\n    public final float[] mtrxView = new float[16];\n    public final float[] mtrxProjectionAndView = new float[16];\n\n\nfor(int i=0;i<16;i++) {\n            mtrxProjection[i] = 0.0f;\n            mtrxView[i] = 0.0f;\n            mtrxProjectionAndView[i] = 0.0f;\n        }\n\n        // \u753b\u9762\u306e\u5ea7\u6a19\u7cfb\u3092\u4f5c\u6210\n        Matrix.orthoM(mtrxProjection, 0,\n                0f, width,//\u5de6\u7aef\u2192\u53f3\u7aef\n                height, 0.0f, //\u4e0b\u7aef\u2192\u4e0a\u7aef\n                -1, 1//\u624b\u524d\u2192\u5965\n        );\n\n        //\u30ab\u30e1\u30e9\u306e\u5411\u304d\u3092\u4f5c\u6210\n        Matrix.setLookAtM(mtrxView, 0,\n                0f, 0f, 1f,//\u30ab\u30e1\u30e9\u4f4d\u7f6e\n                0f, 0f, 0f,//\u30ab\u30e1\u30e9\u306e\u5411\u304d\n                0f, 1.0f, 0.0f//\u30ab\u30e1\u30e9\u306e\u982d\n        );\n\n        //\u4e0a\u8a18\uff12\u3064\u3092\u5408\u7b97\u3002\n        Matrix.multiplyMM(mtrxProjectionAndView, 0, mtrxProjection, 0, mtrxView, 0);\n        mtrxProjectionAndView = mtrxProjectionAndView.clone();\n```\n\n\u3053\u3093\u306a\u98a8\u306b\u5ea7\u6a19\u306e\u30c7\u30fc\u30bf\u3092\u7528\u610f\u3057\u3066\u304a\u304f\u3068\u4fbf\u5229\n\n\u3067\u3001\n\n```java:qiita.java\nData.GetUvs();\n```\n\n\u3068\u304b\u306b\u3064\u3044\u3066\u306f\u3001UVS\u3092\u7528\u610f\u3057\u3066\u306d\u3063\u3066\u4e8b\n\n```java:qiita.java\nData.GetVertices();\n```\n\n\u306fVERTICES\u3092\u7528\u610f\u3057\u3066\u306d\u3063\u3066\u90e8\u5206\u3067\u30c7\u30fc\u30bf\u306f\u5404\u3005\u304c\u7528\u610f\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u304c\n\nUVS\u306f\u753b\u50cf\u306e\u5ea7\u6a19\u306e\u4e8b\nVERTICES\u306f\u30b9\u30c6\u30fc\u30b8\u306b\u5ea7\u6a19\u306e\u4e8b\u3002\n\n\u305f\u3068\u3048\u3070\n\n```java:qiita.java\npublic static float[] getUvs(){\n        return new float[]{\n                0,    0,\n                0,    1,\n                1,    0,\n                0,    1,\n                1,    0,\n                1,    1\n        };\n    }\n```\n\n\u3053\u308c\u306f\u8aad\u307f\u8fbc\u3093\u3060\u753b\u50cf\u307e\u308b\u307e\u308b\u3002\n\n```java:qiita.java\npublic static float[] getUvs(){\n        return new float[]{\n                0,    0,\n                0,    1/4,\n                1/4,    0,\n                0,    1/4,\n                1/4,    0,\n                1/4,    1/4\n        };\n    }\n```\n\u3053\u308c\u306f\u8aad\u307f\u8fbc\u3093\u3060\u753b\u50cf\u306e\u5de6\u4e0a1/4\n\n\n\u307f\u305f\u3044\u306b\u3001\u3044\u308d\u3044\u308dvertices\u306b\u3064\u3044\u3066\u306f\u3001\u4e0a\u8a18\u306emtrxProjectionAndView\u3067\u8a2d\u5b9a\u3057\u305f\u81ea\u5206\u306e\u5ea7\u6a19\u7cfb\u3092\u8003\u3048\u308b\u5fc5\u8981\u304c\u3042\u308b\u306e\u3060\u3051\u3069\u3001\n\n```java:qiita.java\npublic static float[] getVertices(){\n\n        return new float[]{\n                0, 0, 0.0f,\n                0, height, 0.0f,\n                width, 0, 0.0f,\n                0, height, 0.0f,\n                width, 0, 0.0f,\n                width, height, 0.0f\n        };\n    }\n```\n\n\u3053\u308c\u3067\u5168\u753b\u9762\u306b\u8cbc\u308a\u3064\u3051\u308b\u4e8b\u304c\u51fa\u6765\u308b\u3002\n\n\n\u3067\u308f\u308a\u3068\u81ea\u5206\u306f2D\u3067\u4f7f\u3046\u306e\u3060\u3051\u3069\u3001\u3053\u308c\u3060\u3051\u3042\u308c\u3070\u3001\u3042\u3068\u306f\u4e0a\u624b\u304f\u4f7f\u3046\u3060\u3051\u3067\u3001\n\u3053\u308c\u4ee5\u4e0a\u4f59\u8a08\u306a\u4e8b\u3092\u8003\u3048\u308b\u4e8b\u3082\u306a\u3044\u306e\u3067\u3001\u4e00\u56de\u753b\u50cf\u3092\u8868\u793a\u3055\u305b\u3066\u3001\u597d\u304d\u306a\u4f4d\u7f6e\u3068\u30b9\u30d7\u30e9\u30a4\u30c8\u30b7\u30fc\u30c8\u3092\u3046\u307e\u304f\u4f7f\u3048\u3070\u3001\u30ab\u30f3\u30bf\u30f3\u306b\u3067\u304d\u308b\u304b\u3068\u601d\u3044\u307e\u3059\u3002\n\n\u4e0a\u8a18\u3001\u7d50\u69cb\u5927\u639b\u304b\u308a\u306a\u6848\u4ef6\u3067\u3082\u4f7f\u3063\u305f\u5185\u5bb9\u3067\u3059\u304c\u3001OPENGL\u81ea\u4f53\u3042\u307e\u308a\u3001Android\u3067\u4f7f\u3046\u4eba\u304c\u3044\u306a\u3044\u304b\u3068\u601d\u3044\u307e\u3059\u304c\u3001\u60a9\u3093\u3067\u308b\u65b9\u306a\u3069\u306b\u306f\u3001\u3042\u308b\u7a0b\u5ea6\u9053\u3057\u308b\u3079\u306b\u306a\u308b\u304b\u3068\u601d\u3044\u307e\u3059\u3002\n\n\n\n\n\n\n"}