{"context": " More than 1 year has passed since last update.\u3053\u308c\u306fKotlin\u30a2\u30c9\u30d9\u30f3\u30c8\u30ab\u30ec\u30f3\u30c0\u30fc2015 17\u65e5\u76ee\u306e\u8a18\u4e8b\u3067\u3059\u3002\n\nTL;DR\n\nKotlin\u306e\u62e1\u5f35\u95a2\u6570\u3067RxJava\u304c\u3044\u308d\u3044\u308d\u4fbf\u5229\u306b\u306a\u308b\u3088\u306d\nRxKotlin\u3068\u3044\u3046\u306e\u306fRxJava\u7528\u306e\u4fbf\u5229\u306a\u62e1\u5f35\u95a2\u6570\u3092\u96c6\u3081\u305f\u30e9\u30a4\u30d6\u30e9\u30ea\u3060\u3088\nRxJava\u306eCompositeSubscription\u304c\u3081\u3093\u3069\u304f\u3055\u3044\u554f\u984c\u306fDelegation\u3067\u30b9\u30c3\u30ad\u30ea\u89e3\u6c7a\u3067\u304d\u308b\u3088\n\u3053\u3053\u3067\u7d39\u4ecb\u3057\u305fDelegation\u3092\u4f7f\u3063\u305f\u5b9f\u88c5\u3092\u307e\u3068\u3081\u3066\u30e9\u30a4\u30d6\u30e9\u30ea\u3068\u3057\u3066\u516c\u958b\u3057\u3066\u307f\u305f\u3088\u3002\u8a73\u7d30\u306f\u3053\u3063\u3061\u306e\u8a18\u4e8b\u3092\u8aad\u3093\u3067\u306d\u3002\n\n\n\u306f\u3058\u3081\u306b\nRxJava\u306f\u30b3\u30fc\u30eb\u30d0\u30c3\u30af\u3092\u591a\u7528\u3059\u308b\u30e9\u30a4\u30d6\u30e9\u30ea\u3067\u3059\u3002Java7\u4ee5\u524d\u306e\u30d0\u30fc\u30b8\u30e7\u30f3\u3067\u306f\u30e9\u30e0\u30c0\u5f0f\u306f\u5229\u7528\u3067\u304d\u305a\u306b\u3001\u7121\u540d\u30af\u30e9\u30b9\u3067\u306e\u5b9f\u88c5\u3068\u306a\u3063\u3066\u3057\u307e\u3046\u305f\u3081\u306b\u3001\u8a18\u8ff0\u304c\u5197\u9577\u3068\u306a\u3063\u3066\u3057\u307e\u3044\u3001Kotlin\u306e\u5229\u7528\u3092\u8003\u3048\u305f\u65b9\u3082\u591a\u3044\u306e\u3067\u306f\u306a\u3044\u3067\u3057\u3087\u3046\u304b\uff1f\n\u305d\u3053\u3067\u3001Kotlin\u3060\u304b\u3089\u3053\u305d\u3067\u304d\u308b\u3001RxJava\u306e\u4fbf\u5229\u306a\u5229\u7528\u65b9\u6cd5\u3092\u7d39\u4ecb\u3057\u3066\u307f\u305f\u3044\u3068\u601d\u3044\u307e\u3059\u3002\n\n\u307e\u305a\u306f\u62e1\u5f35\u95a2\u6570\n\u307e\u305a\u3001RxJava\u3092\u4fbf\u5229\u306b\u4f7f\u304a\u3046\u3068\u3057\u3066\u601d\u3044\u3064\u304f\u306e\u306f\u62e1\u5f35\u95a2\u6570\u3067\u306f\u306a\u3044\u3067\u3057\u3087\u3046\u304b\uff1f\nKotlin\u306e\u62e1\u5f35\u95a2\u6570\u306e\u6a5f\u80fd\u3092\u4f7f\u3048\u3070\u3001\u4fbf\u5229\u306a\u6a5f\u80fd\u306fObservable\u306e\u30e1\u30bd\u30c3\u30c9\u3068\u3057\u3066\u30ac\u30f3\u30ac\u30f3\u8ffd\u52a0\u3057\u3066\u3001\u30e1\u30bd\u30c3\u30c9\u30c1\u30a7\u30fc\u30f3\u3067\u306e\u8a18\u8ff0\u304c\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002\n\u4f8b\u3048\u3070\u3001\n\u6587\u5b57\u5217\u306a\u3069\u304c\u7a7a\u3060\u3063\u305f\u5834\u5408\u306bfilter\u3059\u308bfilterNotEmpty()\u3092\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u5b9a\u7fa9\u3059\u308b\u3068\n\nfilterNotEmpty\n\nfun <T> Observable<T>.filterNotEmpty(): Observable<T> = filter {\n    when (it) {\n        is String -> !StringUtils.isEmpty(it)\n        is List<*> -> it.count() > 0\n        else -> it != null\n    }\n}\n\n\n\n\u305d\u306e\u307e\u307eObservable\u306e\u62e1\u5f35\u3068\u3057\u3066\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u66f8\u3051\u3066\u3057\u307e\u3044\u307e\u3059\u3002\n\nKotlin\n\nfun test(){\n    Observable.from(arrayOf(\"a\", \"b\", \"\", \"d\"))\n            .filterNotNull()\n            .subscribe { \n                // it\u306e\u578b\u306fString\n                // \"a\", \"b\", \"d\" \u306e\u307f\u304c\u3084\u3063\u3066\u304f\u308b\n            }\n\n}\n\n\n\n\u3042\u3068\u306f\u4f8b\u3048\u3070\u3001observeOn\u3092mainThread\u3067\u884c\u3046\u305f\u3081\u306eobserveOnMainThread()\u306a\u3069\u3082\u5b9a\u7fa9\u3057\u3066\u304a\u304f\u3068\u5730\u5473\u306b\u4fbf\u5229\u3067\u3059\u3002\n\nobserveOnMainThread()\n\nfun <T> Observable<T>.observeOnMainThread() = observeOn(AndroidSchedulers.mainThread())\n\n\n\n\u4ee5\u524d\u306e\u8a18\u4e8b\u3067\u6271\u3063\u305fRxJava\u3092\u4f7f\u3063\u305f\u901a\u4fe1\u4e2d\u306bProgress\u30c0\u30a4\u30a2\u30ed\u30b0\u3092\u51fa\u3059\u51e6\u7406\u306a\u3069\u3082Java\u3067\u306f\n\n\u518d\u5229\u7528\u53ef\u80fd\u306aProgress\u30c0\u30a4\u30a2\u30ed\u30b0\u8868\u793aObservable\n    void onClick() {\n        usingProgressDialog()\n                .flatMap(new Func1<Void, Observable<String>>() {\n                    @Override\n                    public Observable<String> call(Void aVoid) {\n                        // flatMap\u3067loadData()\u3092\u5b9f\u884c\n                        return loadData();\n                    }\n                })\n                .subscribe();\n    }\n\n\n\n\u306e\u3088\u3046\u306b\u3001\u59cb\u3081\u306bProgressDialog\u3092\u51fa\u3057\u3064\u3064Void\u3092emit\u3059\u308bObsevable\u3092\u5b9a\u7fa9\u3057\u3066\u3001\u305d\u308c\u304b\u3089\u5b9f\u969b\u306b\u884c\u3044\u305f\u3044\u51e6\u7406\u3092flatMap\u3067\u7d9a\u3051\u308b\u3088\u3046\u306a\u51e6\u7406\u3092\u66f8\u304f\u5fc5\u8981\u304c\u3042\u308a\u307e\u3057\u305f\u304c\u3001Kotlin\u3067\u306f\n\nwithProgressDialog\n\nfun <T> Observable<T>.withProgressDialog(): Observable<T> =\n        Observable.using({\n            showProgressDialog()\n        }, { this }, {\n            dismissProgressDialog()\n        })\n\n\n\n\u306e\u3088\u3046\u306b\u5b9f\u88c5\u3059\u308b\u3053\u3068\u3067\n\nloadData\u4e2d\u306bprogressDialog\u3092\u8868\u793a\u3059\u308b\nfun onClick() = loadData().withProgressDialog().subscribe()\n\n\n\u306e\u3088\u3046\u306b\u3001\u30e1\u30bd\u30c3\u30c9\u30c1\u30a7\u30a4\u30f3\u306e\u4e2d\u3067\u3001\u3088\u308a\u7c21\u5358\u306bprogressDialog\u8868\u793a\u306e\u6a5f\u80fd\u3092\u8ffd\u52a0\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\u3082\u3063\u3068\u3082\u3053\u306e\u5834\u5408\u306b\u306fprogressDialog\u306e\u8868\u793a\u3092\u5b9f\u884c\u3059\u308b\u30b9\u30ec\u30c3\u30c9\u306b\u6c17\u3092\u914d\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\n\u3042\u3068\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u3001\u5171\u901a\u306e\u30a8\u30e9\u30fc\u30cf\u30f3\u30c9\u30ea\u30f3\u30b0\u306e\u51e6\u7406\u3092\u5b9a\u7fa9\u3057\u305f\u308a\u3001\n\nRetryPolicy\nfun <T> Observable<T>.myErrorRetry() = retry { i, throwable -> \n    when(throwable){\n        is MyApiError -> i < 5\n        else -> false\n    }\n}\n\n\n\u4ed6\u306b\u3082\u30a2\u30a4\u30c7\u30a2\u6b21\u7b2c\u3067\u4fbf\u5229\u306a\u62e1\u5f35\u95a2\u6570\u3092\u5b9a\u7fa9\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u308b\u3068\u601d\u3044\u307e\u3059\u3002\n\nRxKotlin\n\u4e0a\u8a18\u306e\u3088\u3046\u306a\u62e1\u5f35\u95a2\u6570\u3092\u4f7f\u3063\u3066\u4e00\u822c\u7684\u306b\u4f7f\u308f\u308c\u308b\u51e6\u7406\u3092\u96c6\u3081\u305f\u30e9\u30a4\u30d6\u30e9\u30ea\u304cRxKotlin\u3067\u3059\u3002\u5358\u7d14\u306aObservable\u306e\u62e1\u5f35\u95a2\u6570\u306e\u4ed6\u306b\n\ntoObservable()\npublic fun <T> Array<out T>.toObservable() : Observable<T> = Observable.from(this)\n\n\n\u306e\u3088\u3046\u306bArray\u306b\u5bfe\u3057\u3066toObservable()\u3068\u3044\u3046\u30e1\u30bd\u30c3\u30c9\u3092\u8ffd\u52a0\u3057\u3066Observable\u306e\u751f\u6210\u3092\u5bb9\u6613\u306b\u3057\u305f\u308a\u3001\n\nBehaviourSubject()\npublic fun <T> BehaviourSubject() : BehaviorSubject<T> = BehaviorSubject.create()\n\n\ncreate()\u306a\u3069\u306estatic method\u3092\u4f7f\u308f\u305a\u306b\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u3063\u307d\u304f\u6271\u3048\u308b\u3088\u3046\u306b\u3057\u305f\u308a\u3059\u308b\u95a2\u6570\u304c\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u307e\u3059\u3002\n\nCompositeSubscription\u3092\u3069\u3046\u306b\u304b\u3057\u305f\u3044\uff01\n\nCompositeSubscription\u304c\u3081\u3093\u3069\u304f\u3055\u3044\u554f\u984c\nRxJava\u3067\u306f\u3001\u3042\u308bObservable\u306bsubscribe()\u3057\u305f\u5834\u5408\u3001\u305d\u308c\u3092unsubscribe()\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\u30b9\u30c8\u30ea\u30fc\u30e0\u304conComplete()\u3084onError()\u3067\u7d42\u4e86\u3057\u305f\u5834\u5408\u306f\u81ea\u52d5\u7684\u306bunsubscribe\u3055\u308c\u307e\u3059\u304c\u3001\u305d\u308c\u4ee5\u5916\u3067\u306fRxJava\u3092\u5229\u7528\u3059\u308bclass\u3067CompositeSubscription\u304c\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u6301\u3061\u3001\u305d\u3053\u306bsubscribe()\u5f8c\u306esubscription\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u767b\u9332\u3057\u3001\u3042\u308b\u30bf\u30a4\u30df\u30f3\u30b0\u3067\u4e00\u62ec\u306bunsubscribe()\u3059\u308b\u3088\u3046\u306a\u51e6\u7406\u304c\u4e00\u822c\u7684\u3067\u3059\u3002\n\u4f8b\u3048\u3070\u3001\u3042\u308bActivity\u3067\u901a\u4fe1\u51e6\u7406\u3092RxJava\u3067\u5b9f\u88c5\u3057\u305f\u5834\u5408\u3001\u753b\u9762\u304c\u7d42\u4e86\u3057\u305f\u5834\u5408\u306a\u3069\u306e\u3053\u3068\u3092\u8003\u3048\u3066\u3001onPause()\u3067\u305d\u308c\u3092unsubscribe()\u3059\u308b\u30b3\u30fc\u30c9\u3092rxt4a\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u4f7f\u3063\u3066\u66f8\u3053\u3046\u3068\u3059\u308b\u3068\nclass SomeActivity : Activity() {\n\n    val compositeSubscription = AndroidCompositeSubscription()\n\n\n    fun onClick() {\n        loadData()\n                .lift(OperatorAddToCompositeSubscription<String>(compositeSubscription))\n                .observeOn(AndroidSchedulers.mainThread())\n                .subscribe {\n                    // Do something\n                }\n    }\n\n    override fun onPause() {\n        super.onPause()\n        compositeSubscription.unsubscribe()\n    }\n}\n\n\n\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002\u3053\u306eAndroidCompositeSubscription\u3092\u6bce\u56de\u5b9a\u7fa9\u3059\u308b\u306e\u3082\u3081\u3093\u3069\u304f\u3055\u3044\u3067\u3059\u3057\u3001CompositeSubscription\u306b\u767b\u9332\u3059\u308b\u305f\u3081\u306e.lift(new OperatorAddToCompositeSubscription<String>(compositeSubscription))\u3082\u306a\u304b\u306a\u304b\u3081\u3093\u3069\u304f\u3055\u3044\u3067\u3059\u306d\u3002\n\u3082\u3061\u308d\u3093\u3001RxLifeCycle\u3092\u4f7f\u7528\u3057\u3066\u9069\u5207\u306a\u72b6\u6cc1\u3067Unsubscribe\u3059\u308b\u3068\u3044\u3046\u306e\u3082\u624b\u3067\u3059\u304c\u3001RxLifeCycle\u3092\u4f7f\u3063\u305f\u5834\u5408\u306f\u5fc5\u305aRxActivity\u3068\u3044\u3046\u30af\u30e9\u30b9\u7d99\u627f\u3057\u306a\u3051\u308c\u3070\u306a\u3089\u306a\u3044\u3001\u306a\u3069\u306e\u5236\u7d04\u304c\u3042\u308a\u307e\u3059\u3002\n\u3055\u3066\u3001\u3053\u308c\u3092Kotlin\u3067\u4fbf\u5229\u306a\u611f\u3058\u306b\u89e3\u6c7a\u3059\u308b\u306b\u306f\u3069\u3046\u3057\u305f\u3089\u3088\u3044\u3067\u3057\u3087\u3046\u304b\uff1f\n\u306a\u3093\u3068\u306a\u304f.lift(new OperatorAddToCompositeSubscription<String>(compositeSubscription))\u306f\u62e1\u5f35\u95a2\u6570\u3067\u306a\u3093\u3068\u304b\u306a\u308a\u305d\u3046\u306a\u611f\u3058\u304c\u3057\u307e\u3059\u304c\u3001\u305d\u306e\u524d\u306bCompositeSubscription\u306e\u5b9a\u7fa9\u3092\u306a\u3093\u3068\u304b\u3057\u305f\u3044\u3067\u3059\u306d\u3002\n\n\u305d\u3053\u3067Delegation\uff01\nKotlin\u306b\u306fDelegation\u3068\u3044\u3046\u6a5f\u80fd\u304c\u3042\u308a\u307e\u3059\u3002Delegation\u306e\u8aac\u660e\u306f\u3001Kotlin\u30a2\u30c9\u30d9\u30f3\u30c8\u30ab\u30ec\u30f3\u30c0\u30fc2015\u306e\u4e8c\u65e5\u76ee\u306e\u307f\u3093\u306a\u5927\u597d\u304dKotlin\u306eDelegation\u306b\u3064\u3044\u3066\u306e\u8a18\u4e8b\u304c\u53c2\u8003\u306b\u306a\u308a\u307e\u3059\u3002\n\u7c21\u5358\u306b\u8a00\u3046\u3068\u3001\u3042\u308b\u30af\u30e9\u30b9\u304b\u3089\u5225\u306e\u30af\u30e9\u30b9\u306b\u30e1\u30bd\u30c3\u30c9\u306e\u5b9f\u88c5\u3092\u59d4\u8b72\u3059\u308b\u4ed5\u7d44\u307f\u3067\u3059\u3002\n\u4f8b\u3048\u3070\n\nMyList\u30af\u30e9\u30b9\u306eList\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30a4\u30b9\u306e\u51e6\u7406\u3092ArrayList\u306b\u59d4\u8b72\u3059\u308b\nclass  MyList<T> : List<T> by ArrayList<T>() { }\n\n\n\n\u3068\u66f8\u304f\u3068\n\nMyList\u304b\u3089List\u306econtains()\u30e1\u30bd\u30c3\u30c9\u3092\u547c\u3073\u51fa\u3059\nMyList<String>().contains(\"hoge\") // => false\n\n\n\nMyList\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3067\u306fList\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30a4\u30b9\u306e\u30e1\u30bd\u30c3\u30c9\u3092\u547c\u3073\u51fa\u305b\u3066\u3057\u307e\u3046\u306e\u3067\u3059\u3002\n\u3053\u306e\u4ed5\u7d44\u307f\u3092\u5148\u307b\u3069\u306eCompositeSubscription\u3092\u6301\u3063\u305fActivity\u306b\u9069\u7528\u3057\u3066\u307f\u307e\u3057\u3087\u3046\u3002\n\u307e\u305acompositeSubscription\u3092\u6301\u3064\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30a4\u30b9\u3092\u3068\u305d\u306e\u5b9f\u88c5\u3092\u5b9a\u7fa9\u3057\u307e\u3059\u3002\n\nAutoUnsubscribable\n\ninterface AutoUnsubscribable {\n    val compositeSubscription: AndroidCompositeSubscription\n    fun unsubscribe()\n}\n\nclass AutoUnsubscribableImpl : AutoUnsubscribable{\n    override val compositeSubscription = AndroidCompositeSubscription()\n    override fun unsubscribe() = compositeSubscription.unsubscribe()\n}\n\n\n\n\u305d\u3057\u3066\u3053\u308c\u3092\u5148\u7a0b\u306eActivity\u3067class delegate\u3057\u3066\u3042\u3052\u307e\u3059\n\nAutoUnsubscribable\u306eDelegation\u3092\u9069\u7528\n\nclass SomeActivity : Activity(), AutoUnsubscribable by AutoUnsubscribableImpl() {\n    fun onClick() {\n        loadData()\n                .lift(OperatorAddToCompositeSubscription<String>(compositeSubscription))\n                .observeOn(AndroidSchedulers.mainThread())\n                .subscribe {\n                    // Do something\n                }\n\n    }\n\n    override fun onPause() {\n        super.onPause()\n        unsubscribe()\n    }\n}\n\n\n\n\n\u3053\u308c\u3067Activity\u306e\u5b9f\u88c5\u304b\u3089compositeSubscription\u306e\u5b9a\u7fa9\u3092\u53d6\u308a\u9664\u304f\u3053\u3068\u304c\u3067\u304d\u307e\u3057\u305f\u3002\n\u307e\u305f\u3001onPause()\u3067\u547c\u3073\u51fa\u3057\u3066\u3044\u305f\u3001compositeSubscription.unsubscribe()\u3082unsubscribe()\u306e\u307f\u3092\u547c\u3073\u51fa\u305b\u3070\u3088\u3044\u306e\u3067\u304b\u306a\u308a\u30b9\u30c3\u30ad\u30ea\u3067\u3059\u3002\n\u6b21\u306f\u3001.lift(OperatorAddToCompositeSubscription<String>(compositeSubscription))\u306e\u90e8\u5206\u3067\u3059\u306d\u3002\u3053\u308c\u3092\u62e1\u5f35\u95a2\u6570\u3068\u3057\u3066\u5b9f\u88c5\u3057\u3066\u3044\u304d\u307e\u3059\u3002\u5148\u7a0b\u306eAutoUnsubscribable()\u306e\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30a4\u30b9\u306b\u62e1\u5f35\u95a2\u6570\u306e\u5b9a\u7fa9\u3092\u8ffd\u52a0\u3057\u3066\u3044\u304d\u307e\u3059\u3002\n\nAutoUnsubscribable\u306bObservable\u306e\u62e1\u5f35\u95a2\u6570\u3092\u8ffd\u52a0\n\ninterface AutoUnsubscribable {\n    val compositeSubscription: AndroidCompositeSubscription\n    fun <T> Observable<T>.autoUnsubscribe():Observable<T>\n    fun unsubscribe()\n}\n\nclass AutoUnsubscribableImpl : AutoUnsubscribable{\n    override fun <T> Observable<T>.autoUnsubscribe():Observable<T> {\n        return this.lift(OperatorAddToCompositeSubscription<T>(compositeSubscription))\n    }\n    override val compositeSubscription = AndroidCompositeSubscription()\n    override fun unsubscribe() = compositeSubscription.unsubscribe()\n\n}\n\n\n\n\u3053\u3053\u3067\u306fautoUnsubscribe()\u3068\u3044\u3046\u95a2\u6570\u3092Observable\u306e\u62e1\u5f35\u95a2\u6570\u3068\u3057\u3066\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30a4\u30b9\u306b\u5b9a\u7fa9\u3057\u3001\u5b9f\u88c5\u30af\u30e9\u30b9\u3067\u5b9f\u88c5\u3057\u3066\u3044\u307e\u3059\u3002\n\u3061\u306a\u307f\u306b\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30a4\u30b9\u3067\u5b9a\u7fa9\u3057\u305f\u62e1\u5f35\u95a2\u6570\u306f\u305d\u306e\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30a4\u30b9\u3092\u5b9f\u88c5\u3057\u305f\u30af\u30e9\u30b9\u5185\u3067\u306e\u307f\u6709\u52b9\u306b\u306a\u308a\u307e\u3059\u3002\n\u3055\u3066\u305d\u306e\u7d50\u679c\u3082\u3068\u306eActivity\u306f\u3069\u3046\u306a\u3063\u305f\u304b\u3068\u3044\u3046\u3068\n\nAutoUnsubscribable\u3092Delegate\u3057\u305fActivity\nclass MainActivity : Activity(), AutoUnsubscribable by AutoUnsubscribableImpl() {\n\n    fun onClick() {\n        loadData()\n                .autoUnsubscribe()\n                .observeOn(AndroidSchedulers.mainThread())\n                .subscribe {\n                    // Do something\n                }\n\n    }\n\n    override fun onPause() {\n        super.onPause()\n        unsubscribe()\n    }\n}\n\n\n\n\u306e\u3088\u3046\u306b\u5143\u306ecompositeSubscription\u306f\u8de1\u5f62\u3082\u306a\u304f\u30b9\u30c3\u30ad\u30ea\uff01\n\u5b9f\u88c5AutoUnsubscribe\u3092Delegation\u3057\u305f\u30af\u30e9\u30b9\u304b\u3089\u306fcompositeSubscription\u306f\u53c2\u7167\u3055\u308c\u308b\u3053\u3068\u306f\u306a\u3044\u306e\u3067\u3001\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30a4\u30b9\u304b\u3089\u6d88\u3057\u3066\u3057\u307e\u3044\u307e\u3057\u3087\u3046\u3002\n\nAutoUnsubscribable\ninterface AutoUnsubscribable {\n    fun <T> Observable<T>.autoUnsubscribe():Observable<T>\n    fun unsubscribe()\n}\n\nclass AutoUnsubscribableImpl : AutoUnsubscribable{\n    override fun <T> Observable<T>.autoUnsubscribe():Observable<T> {\n        return this.lift(OperatorAddToCompositeSubscription<T>(compositeSubscription))\n    }\n    private val compositeSubscription = AndroidCompositeSubscription()\n    override fun unsubscribe() = compositeSubscription.unsubscribe()\n\n}\n\n\n\n\u3053\u308c\u3067compositeSubscription\u306e\u30dc\u30a4\u30e9\u30fc\u30d7\u30ec\u30fc\u30c8\u304b\u3089\u304a\u3055\u3089\u3070\u3067\u3059\uff01\nKotlin\u4fbf\u5229\u3067\u3059\u306d\uff01\n\u3061\u306a\u307f\u306b\u3053\u3053\u3067\u7d39\u4ecb\u3057\u305f\u5b9f\u88c5\u3092\u30e9\u30a4\u30d6\u30e9\u30ea\u3068\u3057\u3066\u516c\u958b\u3057\u307e\u3057\u305f\u3002\u8a73\u3057\u304f\u306f\u3053\u3061\u3089\u306e\u8a18\u4e8b\u3092\u8aad\u3093\u3067\u304f\u3060\u3055\u3044\u3002\n\n\u304a\u308f\u308a\u306b\n\u3053\u3053\u3067\u306fKotlin\u306e\u62e1\u5f35\u95a2\u6570\u3001Delegation\u3092\u7528\u3044\u3066RxJava\u306e\u30dc\u30a4\u30e9\u30fc\u30d6\u30ec\u30fc\u30c8\u7684\u306a\u5b9f\u88c5\u3092\u6e1b\u3089\u3057\u3066\u3044\u304f\u8a66\u307f\u3092\u7d39\u4ecb\u3057\u307e\u3057\u305f\u3002\u3053\u308c\u3089\u306e\u30c6\u30af\u30cb\u30c3\u30af\u306fRxJava\u306b\u304b\u304e\u3089\u305a\u69d8\u3005\u306a\u3068\u3053\u308d\u306b\u9069\u7528\u3067\u304d\u308b\u3068\u601d\u3046\u306e\u3067\u3001\u307f\u306a\u3055\u3093\nKotlin\u30a2\u30c9\u30d9\u30f3\u30c8\u30ab\u30ec\u30f3\u30c0\u30fc2015\n\u660e\u65e5\u306f@magie_pooh\u3055\u3093\u3067\u3059\n\n\u3053\u308c\u306f[Kotlin\u30a2\u30c9\u30d9\u30f3\u30c8\u30ab\u30ec\u30f3\u30c0\u30fc2015](http://www.adventar.org/calendars/857) 17\u65e5\u76ee\u306e\u8a18\u4e8b\u3067\u3059\u3002\n\n# TL;DR\n- Kotlin\u306e\u62e1\u5f35\u95a2\u6570\u3067RxJava\u304c\u3044\u308d\u3044\u308d\u4fbf\u5229\u306b\u306a\u308b\u3088\u306d\n- RxKotlin\u3068\u3044\u3046\u306e\u306fRxJava\u7528\u306e\u4fbf\u5229\u306a\u62e1\u5f35\u95a2\u6570\u3092\u96c6\u3081\u305f\u30e9\u30a4\u30d6\u30e9\u30ea\u3060\u3088\n- RxJava\u306eCompositeSubscription\u304c\u3081\u3093\u3069\u304f\u3055\u3044\u554f\u984c\u306fDelegation\u3067\u30b9\u30c3\u30ad\u30ea\u89e3\u6c7a\u3067\u304d\u308b\u3088\n- \u3053\u3053\u3067\u7d39\u4ecb\u3057\u305fDelegation\u3092\u4f7f\u3063\u305f\u5b9f\u88c5\u3092\u307e\u3068\u3081\u3066[\u30e9\u30a4\u30d6\u30e9\u30ea\u3068\u3057\u3066\u516c\u958b](https://github.com/yamamotoj/Subskription)\u3057\u3066\u307f\u305f\u3088\u3002\u8a73\u7d30\u306f[\u3053\u3063\u3061\u306e\u8a18\u4e8b](http://qiita.com/boohbah/items/1ceaade6ce33321bdcbf)\u3092\u8aad\u3093\u3067\u306d\u3002\n\n\n# \u306f\u3058\u3081\u306b\n\nRxJava\u306f\u30b3\u30fc\u30eb\u30d0\u30c3\u30af\u3092\u591a\u7528\u3059\u308b\u30e9\u30a4\u30d6\u30e9\u30ea\u3067\u3059\u3002Java7\u4ee5\u524d\u306e\u30d0\u30fc\u30b8\u30e7\u30f3\u3067\u306f\u30e9\u30e0\u30c0\u5f0f\u306f\u5229\u7528\u3067\u304d\u305a\u306b\u3001\u7121\u540d\u30af\u30e9\u30b9\u3067\u306e\u5b9f\u88c5\u3068\u306a\u3063\u3066\u3057\u307e\u3046\u305f\u3081\u306b\u3001\u8a18\u8ff0\u304c\u5197\u9577\u3068\u306a\u3063\u3066\u3057\u307e\u3044\u3001Kotlin\u306e\u5229\u7528\u3092\u8003\u3048\u305f\u65b9\u3082\u591a\u3044\u306e\u3067\u306f\u306a\u3044\u3067\u3057\u3087\u3046\u304b\uff1f\n\u305d\u3053\u3067\u3001Kotlin\u3060\u304b\u3089\u3053\u305d\u3067\u304d\u308b\u3001RxJava\u306e\u4fbf\u5229\u306a\u5229\u7528\u65b9\u6cd5\u3092\u7d39\u4ecb\u3057\u3066\u307f\u305f\u3044\u3068\u601d\u3044\u307e\u3059\u3002\n\n\n# \u307e\u305a\u306f\u62e1\u5f35\u95a2\u6570\n\n\u307e\u305a\u3001RxJava\u3092\u4fbf\u5229\u306b\u4f7f\u304a\u3046\u3068\u3057\u3066\u601d\u3044\u3064\u304f\u306e\u306f\u62e1\u5f35\u95a2\u6570\u3067\u306f\u306a\u3044\u3067\u3057\u3087\u3046\u304b\uff1f\nKotlin\u306e\u62e1\u5f35\u95a2\u6570\u306e\u6a5f\u80fd\u3092\u4f7f\u3048\u3070\u3001\u4fbf\u5229\u306a\u6a5f\u80fd\u306f`Observable`\u306e\u30e1\u30bd\u30c3\u30c9\u3068\u3057\u3066\u30ac\u30f3\u30ac\u30f3\u8ffd\u52a0\u3057\u3066\u3001\u30e1\u30bd\u30c3\u30c9\u30c1\u30a7\u30fc\u30f3\u3067\u306e\u8a18\u8ff0\u304c\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002\n\n\u4f8b\u3048\u3070\u3001\n\n\u6587\u5b57\u5217\u306a\u3069\u304c\u7a7a\u3060\u3063\u305f\u5834\u5408\u306bfilter\u3059\u308b`filterNotEmpty()`\u3092\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u5b9a\u7fa9\u3059\u308b\u3068\n\n```kotlin:filterNotEmpty\n\nfun <T> Observable<T>.filterNotEmpty(): Observable<T> = filter {\n    when (it) {\n        is String -> !StringUtils.isEmpty(it)\n        is List<*> -> it.count() > 0\n        else -> it != null\n    }\n}\n\n```\n\n\u305d\u306e\u307e\u307eObservable\u306e\u62e1\u5f35\u3068\u3057\u3066\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u66f8\u3051\u3066\u3057\u307e\u3044\u307e\u3059\u3002\n\n```kotlin:Kotlin\n\nfun test(){\n    Observable.from(arrayOf(\"a\", \"b\", \"\", \"d\"))\n            .filterNotNull()\n            .subscribe { \n                // it\u306e\u578b\u306fString\n                // \"a\", \"b\", \"d\" \u306e\u307f\u304c\u3084\u3063\u3066\u304f\u308b\n            }\n    \n}\n\n```\n\n\u3042\u3068\u306f\u4f8b\u3048\u3070\u3001`observeOn`\u3092mainThread\u3067\u884c\u3046\u305f\u3081\u306e`observeOnMainThread()`\u306a\u3069\u3082\u5b9a\u7fa9\u3057\u3066\u304a\u304f\u3068\u5730\u5473\u306b\u4fbf\u5229\u3067\u3059\u3002\n\n```kotlin:observeOnMainThread()\n\nfun <T> Observable<T>.observeOnMainThread() = observeOn(AndroidSchedulers.mainThread())\n\n```\n\n\n\u4ee5\u524d\u306e\u8a18\u4e8b\u3067\u6271\u3063\u305f[RxJava\u3092\u4f7f\u3063\u305f\u901a\u4fe1\u4e2d\u306bProgress\u30c0\u30a4\u30a2\u30ed\u30b0\u3092\u51fa\u3059](http://qiita.com/boohbah/items/e8010730725c54f85a3a)\u51e6\u7406\u306a\u3069\u3082Java\u3067\u306f\n\n```java:\u518d\u5229\u7528\u53ef\u80fd\u306aProgress\u30c0\u30a4\u30a2\u30ed\u30b0\u8868\u793aObservable\n    void onClick() {\n        usingProgressDialog()\n                .flatMap(new Func1<Void, Observable<String>>() {\n                    @Override\n                    public Observable<String> call(Void aVoid) {\n                        // flatMap\u3067loadData()\u3092\u5b9f\u884c\n                        return loadData();\n                    }\n                })\n                .subscribe();\n    }\n\n```\n\n\u306e\u3088\u3046\u306b\u3001\u59cb\u3081\u306bProgressDialog\u3092\u51fa\u3057\u3064\u3064`Void`\u3092emit\u3059\u308bObsevable\u3092\u5b9a\u7fa9\u3057\u3066\u3001\u305d\u308c\u304b\u3089\u5b9f\u969b\u306b\u884c\u3044\u305f\u3044\u51e6\u7406\u3092`flatMap`\u3067\u7d9a\u3051\u308b\u3088\u3046\u306a\u51e6\u7406\u3092\u66f8\u304f\u5fc5\u8981\u304c\u3042\u308a\u307e\u3057\u305f\u304c\u3001Kotlin\u3067\u306f\n\n```kotlin:withProgressDialog\n\nfun <T> Observable<T>.withProgressDialog(): Observable<T> =\n        Observable.using({\n            showProgressDialog()\n        }, { this }, {\n            dismissProgressDialog()\n        })\n\n```\n\n\u306e\u3088\u3046\u306b\u5b9f\u88c5\u3059\u308b\u3053\u3068\u3067\n\n```kotlin:loadData\u4e2d\u306bprogressDialog\u3092\u8868\u793a\u3059\u308b\nfun onClick() = loadData().withProgressDialog().subscribe()\n```\n\n\u306e\u3088\u3046\u306b\u3001\u30e1\u30bd\u30c3\u30c9\u30c1\u30a7\u30a4\u30f3\u306e\u4e2d\u3067\u3001\u3088\u308a\u7c21\u5358\u306bprogressDialog\u8868\u793a\u306e\u6a5f\u80fd\u3092\u8ffd\u52a0\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\u3082\u3063\u3068\u3082\u3053\u306e\u5834\u5408\u306b\u306fprogressDialog\u306e\u8868\u793a\u3092\u5b9f\u884c\u3059\u308b\u30b9\u30ec\u30c3\u30c9\u306b\u6c17\u3092\u914d\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\n\n\n\u3042\u3068\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u3001\u5171\u901a\u306e\u30a8\u30e9\u30fc\u30cf\u30f3\u30c9\u30ea\u30f3\u30b0\u306e\u51e6\u7406\u3092\u5b9a\u7fa9\u3057\u305f\u308a\u3001\n\n\n```kotlin:RetryPolicy\nfun <T> Observable<T>.myErrorRetry() = retry { i, throwable -> \n    when(throwable){\n        is MyApiError -> i < 5\n        else -> false\n    }\n}\n```\n\n\u4ed6\u306b\u3082\u30a2\u30a4\u30c7\u30a2\u6b21\u7b2c\u3067\u4fbf\u5229\u306a\u62e1\u5f35\u95a2\u6570\u3092\u5b9a\u7fa9\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u308b\u3068\u601d\u3044\u307e\u3059\u3002\n\n# RxKotlin\n\n\u4e0a\u8a18\u306e\u3088\u3046\u306a\u62e1\u5f35\u95a2\u6570\u3092\u4f7f\u3063\u3066\u4e00\u822c\u7684\u306b\u4f7f\u308f\u308c\u308b\u51e6\u7406\u3092\u96c6\u3081\u305f\u30e9\u30a4\u30d6\u30e9\u30ea\u304c[RxKotlin](https://github.com/ReactiveX/RxKotlin)\u3067\u3059\u3002\u5358\u7d14\u306aObservable\u306e\u62e1\u5f35\u95a2\u6570\u306e\u4ed6\u306b\n\n```kotlin:toObservable()\npublic fun <T> Array<out T>.toObservable() : Observable<T> = Observable.from(this)\n```\n\n\u306e\u3088\u3046\u306bArray\u306b\u5bfe\u3057\u3066`toObservable()`\u3068\u3044\u3046\u30e1\u30bd\u30c3\u30c9\u3092\u8ffd\u52a0\u3057\u3066Observable\u306e\u751f\u6210\u3092\u5bb9\u6613\u306b\u3057\u305f\u308a\u3001\n\n```kotlin:BehaviourSubject()\npublic fun <T> BehaviourSubject() : BehaviorSubject<T> = BehaviorSubject.create()\n```\n\n`create()`\u306a\u3069\u306estatic method\u3092\u4f7f\u308f\u305a\u306b\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u3063\u307d\u304f\u6271\u3048\u308b\u3088\u3046\u306b\u3057\u305f\u308a\u3059\u308b\u95a2\u6570\u304c\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u307e\u3059\u3002\n\n\n# CompositeSubscription\u3092\u3069\u3046\u306b\u304b\u3057\u305f\u3044\uff01\n\n## CompositeSubscription\u304c\u3081\u3093\u3069\u304f\u3055\u3044\u554f\u984c\n\nRxJava\u3067\u306f\u3001\u3042\u308bObservable\u306b`subscribe()`\u3057\u305f\u5834\u5408\u3001\u305d\u308c\u3092`unsubscribe()`\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\u30b9\u30c8\u30ea\u30fc\u30e0\u304c`onComplete()`\u3084`onError()`\u3067\u7d42\u4e86\u3057\u305f\u5834\u5408\u306f\u81ea\u52d5\u7684\u306bunsubscribe\u3055\u308c\u307e\u3059\u304c\u3001\u305d\u308c\u4ee5\u5916\u3067\u306fRxJava\u3092\u5229\u7528\u3059\u308bclass\u3067CompositeSubscription\u304c\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u6301\u3061\u3001\u305d\u3053\u306b`subscribe()`\u5f8c\u306esubscription\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u767b\u9332\u3057\u3001\u3042\u308b\u30bf\u30a4\u30df\u30f3\u30b0\u3067\u4e00\u62ec\u306bunsubscribe()\u3059\u308b\u3088\u3046\u306a\u51e6\u7406\u304c\u4e00\u822c\u7684\u3067\u3059\u3002\n\n\u4f8b\u3048\u3070\u3001\u3042\u308bActivity\u3067\u901a\u4fe1\u51e6\u7406\u3092RxJava\u3067\u5b9f\u88c5\u3057\u305f\u5834\u5408\u3001\u753b\u9762\u304c\u7d42\u4e86\u3057\u305f\u5834\u5408\u306a\u3069\u306e\u3053\u3068\u3092\u8003\u3048\u3066\u3001`onPause()`\u3067\u305d\u308c\u3092unsubscribe()\u3059\u308b\u30b3\u30fc\u30c9\u3092[rxt4a\u30e9\u30a4\u30d6\u30e9\u30ea](https://github.com/cookpad/RxT4A)\u3092\u4f7f\u3063\u3066\u66f8\u3053\u3046\u3068\u3059\u308b\u3068\n\n```java:\nclass SomeActivity : Activity() {\n\n    val compositeSubscription = AndroidCompositeSubscription()\n\n\n    fun onClick() {\n        loadData()\n                .lift(OperatorAddToCompositeSubscription<String>(compositeSubscription))\n                .observeOn(AndroidSchedulers.mainThread())\n                .subscribe {\n                    // Do something\n                }\n    }\n\n    override fun onPause() {\n        super.onPause()\n        compositeSubscription.unsubscribe()\n    }\n}\n\n```\n\n\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002\u3053\u306e`AndroidCompositeSubscription`\u3092\u6bce\u56de\u5b9a\u7fa9\u3059\u308b\u306e\u3082\u3081\u3093\u3069\u304f\u3055\u3044\u3067\u3059\u3057\u3001CompositeSubscription\u306b\u767b\u9332\u3059\u308b\u305f\u3081\u306e`.lift(new OperatorAddToCompositeSubscription<String>(compositeSubscription))`\u3082\u306a\u304b\u306a\u304b\u3081\u3093\u3069\u304f\u3055\u3044\u3067\u3059\u306d\u3002\n\n\u3082\u3061\u308d\u3093\u3001[RxLifeCycle](https://github.com/trello/RxLifecycle)\u3092\u4f7f\u7528\u3057\u3066\u9069\u5207\u306a\u72b6\u6cc1\u3067Unsubscribe\u3059\u308b\u3068\u3044\u3046\u306e\u3082\u624b\u3067\u3059\u304c\u3001RxLifeCycle\u3092\u4f7f\u3063\u305f\u5834\u5408\u306f\u5fc5\u305a`RxActivity`\u3068\u3044\u3046\u30af\u30e9\u30b9\u7d99\u627f\u3057\u306a\u3051\u308c\u3070\u306a\u3089\u306a\u3044\u3001\u306a\u3069\u306e\u5236\u7d04\u304c\u3042\u308a\u307e\u3059\u3002\n\n\n\u3055\u3066\u3001\u3053\u308c\u3092Kotlin\u3067\u4fbf\u5229\u306a\u611f\u3058\u306b\u89e3\u6c7a\u3059\u308b\u306b\u306f\u3069\u3046\u3057\u305f\u3089\u3088\u3044\u3067\u3057\u3087\u3046\u304b\uff1f\n\u306a\u3093\u3068\u306a\u304f`.lift(new OperatorAddToCompositeSubscription<String>(compositeSubscription))`\u306f\u62e1\u5f35\u95a2\u6570\u3067\u306a\u3093\u3068\u304b\u306a\u308a\u305d\u3046\u306a\u611f\u3058\u304c\u3057\u307e\u3059\u304c\u3001\u305d\u306e\u524d\u306bCompositeSubscription\u306e\u5b9a\u7fa9\u3092\u306a\u3093\u3068\u304b\u3057\u305f\u3044\u3067\u3059\u306d\u3002\n\n## \u305d\u3053\u3067Delegation\uff01\n\nKotlin\u306b\u306fDelegation\u3068\u3044\u3046\u6a5f\u80fd\u304c\u3042\u308a\u307e\u3059\u3002Delegation\u306e\u8aac\u660e\u306f\u3001[Kotlin\u30a2\u30c9\u30d9\u30f3\u30c8\u30ab\u30ec\u30f3\u30c0\u30fc2015](http://www.adventar.org/calendars/857)\u306e\u4e8c\u65e5\u76ee\u306e[\u307f\u3093\u306a\u5927\u597d\u304dKotlin\u306eDelegation\u306b\u3064\u3044\u3066](http://blog.takuji31.jp/entry/ktac2015)\u306e\u8a18\u4e8b\u304c\u53c2\u8003\u306b\u306a\u308a\u307e\u3059\u3002\n\n\u7c21\u5358\u306b\u8a00\u3046\u3068\u3001\u3042\u308b\u30af\u30e9\u30b9\u304b\u3089\u5225\u306e\u30af\u30e9\u30b9\u306b\u30e1\u30bd\u30c3\u30c9\u306e\u5b9f\u88c5\u3092\u59d4\u8b72\u3059\u308b\u4ed5\u7d44\u307f\u3067\u3059\u3002\n\u4f8b\u3048\u3070\n\n```kotlin:MyList\u30af\u30e9\u30b9\u306eList\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30a4\u30b9\u306e\u51e6\u7406\u3092ArrayList\u306b\u59d4\u8b72\u3059\u308b\nclass  MyList<T> : List<T> by ArrayList<T>() { }\n\n```\n\n\u3068\u66f8\u304f\u3068\n\n```kotlin:MyList\u304b\u3089List\u306econtains()\u30e1\u30bd\u30c3\u30c9\u3092\u547c\u3073\u51fa\u3059\nMyList<String>().contains(\"hoge\") // => false\n\n```\n\nMyList\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3067\u306fList\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30a4\u30b9\u306e\u30e1\u30bd\u30c3\u30c9\u3092\u547c\u3073\u51fa\u305b\u3066\u3057\u307e\u3046\u306e\u3067\u3059\u3002\n\n\u3053\u306e\u4ed5\u7d44\u307f\u3092\u5148\u307b\u3069\u306eCompositeSubscription\u3092\u6301\u3063\u305fActivity\u306b\u9069\u7528\u3057\u3066\u307f\u307e\u3057\u3087\u3046\u3002\n\n\u307e\u305a`compositeSubscription`\u3092\u6301\u3064\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30a4\u30b9\u3092\u3068\u305d\u306e\u5b9f\u88c5\u3092\u5b9a\u7fa9\u3057\u307e\u3059\u3002\n\n```kotlin:AutoUnsubscribable\n\ninterface AutoUnsubscribable {\n    val compositeSubscription: AndroidCompositeSubscription\n    fun unsubscribe()\n}\n\nclass AutoUnsubscribableImpl : AutoUnsubscribable{\n    override val compositeSubscription = AndroidCompositeSubscription()\n    override fun unsubscribe() = compositeSubscription.unsubscribe()\n}\n\n```\n\n\u305d\u3057\u3066\u3053\u308c\u3092\u5148\u7a0b\u306eActivity\u3067class delegate\u3057\u3066\u3042\u3052\u307e\u3059\n\n```kotlin:AutoUnsubscribable\u306eDelegation\u3092\u9069\u7528\n\nclass SomeActivity : Activity(), AutoUnsubscribable by AutoUnsubscribableImpl() {\n    fun onClick() {\n        loadData()\n                .lift(OperatorAddToCompositeSubscription<String>(compositeSubscription))\n                .observeOn(AndroidSchedulers.mainThread())\n                .subscribe {\n                    // Do something\n                }\n\n    }\n\n    override fun onPause() {\n        super.onPause()\n        unsubscribe()\n    }\n}\n\n\n```\n\n\u3053\u308c\u3067Activity\u306e\u5b9f\u88c5\u304b\u3089`compositeSubscription`\u306e\u5b9a\u7fa9\u3092\u53d6\u308a\u9664\u304f\u3053\u3068\u304c\u3067\u304d\u307e\u3057\u305f\u3002\n\u307e\u305f\u3001`onPause()`\u3067\u547c\u3073\u51fa\u3057\u3066\u3044\u305f\u3001`compositeSubscription.unsubscribe()`\u3082`unsubscribe()`\u306e\u307f\u3092\u547c\u3073\u51fa\u305b\u3070\u3088\u3044\u306e\u3067\u304b\u306a\u308a\u30b9\u30c3\u30ad\u30ea\u3067\u3059\u3002\n\n\u6b21\u306f\u3001`.lift(OperatorAddToCompositeSubscription<String>(compositeSubscription))`\u306e\u90e8\u5206\u3067\u3059\u306d\u3002\u3053\u308c\u3092\u62e1\u5f35\u95a2\u6570\u3068\u3057\u3066\u5b9f\u88c5\u3057\u3066\u3044\u304d\u307e\u3059\u3002\u5148\u7a0b\u306e`AutoUnsubscribable()`\u306e\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30a4\u30b9\u306b\u62e1\u5f35\u95a2\u6570\u306e\u5b9a\u7fa9\u3092\u8ffd\u52a0\u3057\u3066\u3044\u304d\u307e\u3059\u3002\n\n```kotlin:AutoUnsubscribable\u306bObservable\u306e\u62e1\u5f35\u95a2\u6570\u3092\u8ffd\u52a0\n\ninterface AutoUnsubscribable {\n    val compositeSubscription: AndroidCompositeSubscription\n    fun <T> Observable<T>.autoUnsubscribe():Observable<T>\n    fun unsubscribe()\n}\n\nclass AutoUnsubscribableImpl : AutoUnsubscribable{\n    override fun <T> Observable<T>.autoUnsubscribe():Observable<T> {\n        return this.lift(OperatorAddToCompositeSubscription<T>(compositeSubscription))\n    }\n    override val compositeSubscription = AndroidCompositeSubscription()\n    override fun unsubscribe() = compositeSubscription.unsubscribe()\n\n}\n\n```\n\n\u3053\u3053\u3067\u306f`autoUnsubscribe()`\u3068\u3044\u3046\u95a2\u6570\u3092Observable\u306e\u62e1\u5f35\u95a2\u6570\u3068\u3057\u3066\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30a4\u30b9\u306b\u5b9a\u7fa9\u3057\u3001\u5b9f\u88c5\u30af\u30e9\u30b9\u3067\u5b9f\u88c5\u3057\u3066\u3044\u307e\u3059\u3002\n\u3061\u306a\u307f\u306b\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30a4\u30b9\u3067\u5b9a\u7fa9\u3057\u305f\u62e1\u5f35\u95a2\u6570\u306f\u305d\u306e\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30a4\u30b9\u3092\u5b9f\u88c5\u3057\u305f\u30af\u30e9\u30b9\u5185\u3067\u306e\u307f\u6709\u52b9\u306b\u306a\u308a\u307e\u3059\u3002\n\n\u3055\u3066\u305d\u306e\u7d50\u679c\u3082\u3068\u306eActivity\u306f\u3069\u3046\u306a\u3063\u305f\u304b\u3068\u3044\u3046\u3068\n\n```kotlin:AutoUnsubscribable\u3092Delegate\u3057\u305fActivity\nclass MainActivity : Activity(), AutoUnsubscribable by AutoUnsubscribableImpl() {\n\n    fun onClick() {\n        loadData()\n                .autoUnsubscribe()\n                .observeOn(AndroidSchedulers.mainThread())\n                .subscribe {\n                    // Do something\n                }\n\n    }\n\n    override fun onPause() {\n        super.onPause()\n        unsubscribe()\n    }\n}\n\n```\n\n\u306e\u3088\u3046\u306b\u5143\u306e`compositeSubscription`\u306f\u8de1\u5f62\u3082\u306a\u304f\u30b9\u30c3\u30ad\u30ea\uff01\n\u5b9f\u88c5AutoUnsubscribe\u3092Delegation\u3057\u305f\u30af\u30e9\u30b9\u304b\u3089\u306f`compositeSubscription`\u306f\u53c2\u7167\u3055\u308c\u308b\u3053\u3068\u306f\u306a\u3044\u306e\u3067\u3001\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30a4\u30b9\u304b\u3089\u6d88\u3057\u3066\u3057\u307e\u3044\u307e\u3057\u3087\u3046\u3002\n\n```kotlin:AutoUnsubscribable\ninterface AutoUnsubscribable {\n    fun <T> Observable<T>.autoUnsubscribe():Observable<T>\n    fun unsubscribe()\n}\n\nclass AutoUnsubscribableImpl : AutoUnsubscribable{\n    override fun <T> Observable<T>.autoUnsubscribe():Observable<T> {\n        return this.lift(OperatorAddToCompositeSubscription<T>(compositeSubscription))\n    }\n    private val compositeSubscription = AndroidCompositeSubscription()\n    override fun unsubscribe() = compositeSubscription.unsubscribe()\n\n}\n\n```\n\n\u3053\u308c\u3067`compositeSubscription`\u306e\u30dc\u30a4\u30e9\u30fc\u30d7\u30ec\u30fc\u30c8\u304b\u3089\u304a\u3055\u3089\u3070\u3067\u3059\uff01\nKotlin\u4fbf\u5229\u3067\u3059\u306d\uff01\n\n\u3061\u306a\u307f\u306b\u3053\u3053\u3067\u7d39\u4ecb\u3057\u305f\u5b9f\u88c5\u3092[\u30e9\u30a4\u30d6\u30e9\u30ea\u3068\u3057\u3066\u516c\u958b](https://github.com/yamamotoj/Subskription)\u3057\u307e\u3057\u305f\u3002\u8a73\u3057\u304f\u306f[\u3053\u3061\u3089\u306e\u8a18\u4e8b](http://qiita.com/boohbah/items/1ceaade6ce33321bdcbf)\u3092\u8aad\u3093\u3067\u304f\u3060\u3055\u3044\u3002\n\n\n# \u304a\u308f\u308a\u306b\n\n\u3053\u3053\u3067\u306fKotlin\u306e\u62e1\u5f35\u95a2\u6570\u3001Delegation\u3092\u7528\u3044\u3066RxJava\u306e\u30dc\u30a4\u30e9\u30fc\u30d6\u30ec\u30fc\u30c8\u7684\u306a\u5b9f\u88c5\u3092\u6e1b\u3089\u3057\u3066\u3044\u304f\u8a66\u307f\u3092\u7d39\u4ecb\u3057\u307e\u3057\u305f\u3002\u3053\u308c\u3089\u306e\u30c6\u30af\u30cb\u30c3\u30af\u306fRxJava\u306b\u304b\u304e\u3089\u305a\u69d8\u3005\u306a\u3068\u3053\u308d\u306b\u9069\u7528\u3067\u304d\u308b\u3068\u601d\u3046\u306e\u3067\u3001\u307f\u306a\u3055\u3093\n\n\n[Kotlin\u30a2\u30c9\u30d9\u30f3\u30c8\u30ab\u30ec\u30f3\u30c0\u30fc2015](http://www.adventar.org/calendars/857)\n\u660e\u65e5\u306f@magie_pooh\u3055\u3093\u3067\u3059\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "tags": ["RxJava", "Android", "Kotlin"]}