{"context": " More than 1 year has passed since last update.\n\n\u305d\u306e\uff11 \u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u30d5\u30a1\u30a4\u30eb\u306b\u30b3\u30de\u30f3\u30c9\u3092\u8ffd\u52a0\nVB\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u30d5\u30a1\u30a4\u30eb\u306e\n<Import Project=\"$(MSBuildToolsPath)\\Microsoft.VisualBasic.targets\" />\n\n\u306e\u3042\u3068\u306b\u4ee5\u4e0b\u306e\u6587\u5b57\u5217\u3092\u633f\u5165\u3057\u307e\u3059\n<Target Name=\"AfterResolveReferences\">\n  <ItemGroup>\n    <EmbeddedResource Include=\"@(ReferenceCopyLocalPaths)\" Condition=\"'%(ReferenceCopyLocalPaths.Extension)' == '.dll'\">\n      <LogicalName>%(ReferenceCopyLocalPaths.DestinationSubDirectory)%(ReferenceCopyLocalPaths.Filename)%(ReferenceCopyLocalPaths.Extension)</LogicalName>\n    </EmbeddedResource>\n  </ItemGroup>\n</Target>\n\n\n\u305d\u306e\uff12 EXE\u304b\u3089\u30a2\u30bb\u30f3\u30d6\u30ea\u3092\u30ed\u30fc\u30c9\u3059\u308b\u30b3\u30fc\u30c9\u3092\u8ffd\u52a0\n\u4ee5\u4e0b\u306e\u30b3\u30fc\u30c9\u3092\u30bd\u30fc\u30b9\u30d5\u30a1\u30a4\u30eb\u306b\u3057\u3066\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u306b\u8ffd\u52a0\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n\nstartup.vb\n<System.STAThreadAttribute(), _\nSystem.Diagnostics.DebuggerNonUserCodeAttribute()> _\nPublic Sub Main()\n    AddHandler AppDomain.CurrentDomain.AssemblyResolve, AddressOf OnResolveAssembly\n    Dim app As Application = New Application()\n    Dim oMain As New MainWindow\n    app.Run(oMain)\nEnd Sub \n\nPrivate Function OnResolveAssembly(sender As Object, args As ResolveEventArgs) As System.Reflection.Assembly\n    Dim executingAssembly As System.Reflection.Assembly = System.Reflection.Assembly.GetExecutingAssembly()\n    Dim assemblyName As New System.Reflection.AssemblyName(args.Name) Dim path As String = assemblyName.Name + \".dll\"\n    If assemblyName.CultureInfo.Equals(System.Globalization.CultureInfo.InvariantCulture) = False Then\npath = [String].Format(\"{0}\\{1}\", assemblyName.CultureInfo, path)\n    End If \n    Using stream As System.IO.Stream = executingAssembly.GetManifestResourceStream(path)\n        If stream Is Nothing Then\n            Return Nothing\n        End If \n    Dim assemblyRawBytes As Byte() = New Byte(stream.Length - 1) {}\nstream.Read(assemblyRawBytes, 0, assemblyRawBytes.Length)\n        Return System.Reflection.Assembly.Load(assemblyRawBytes)\n    End Using\nEnd Function\nEnd Module\n\n\n\n\u305d\u306e\uff13 \u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u8a2d\u5b9a\u3092\u5909\u66f4\n\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u8a2d\u5b9a\u3092\u5909\u66f4\u3057\u3066\u3001\u30b9\u30bf\u30fc\u30c8\u30a2\u30c3\u30d7\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u305d\u306e\uff12\u3067\u8ffd\u52a0\u3057\u305f\u30bd\u30fc\u30b9\u306b\u5909\u66f4\u3059\u308b\u3002\n\u3059\u3079\u3066\u7d42\u4e86\u3057\u305f\u3089\u30d3\u30eb\u30c9\u3059\u308c\u3070EXE\u5358\u72ec\u3067\u8d77\u52d5\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002\n\u305f\u3060\u3057\u3001WPFToolkit\u306e\u30b0\u30e9\u30d5\u306e\u3088\u3046\u306bDLL\u304b\u3089DLL\u306e\u95a2\u6570\u3092\u547c\u3093\u3067\u3044\u305f\u308a\u3059\u308b\u3068\u52d5\u304b\u306a\u3044\u5834\u5408\u304c\u3042\u308b\u306e\u3067\uff11\uff10\uff10\uff05\u3068\u306f\u3044\u304d\u307e\u305b\u3093\u304c\uff19\uff19\uff05\u304f\u3089\u3044\u306f\u3053\u308c\u3067\u3044\u3051\u307e\u3059\u3002\nWPF\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u3058\u3083\u306a\u304f\u3066\u3082\u4f7f\u3048\u308b\u306e\u3067\u610f\u5916\u306b\u4fbf\u5229\u3067\u3059\u3002\n\u4eca\u56de\u306e\u8a18\u4e8b\u306f\u6b21\u306e\u30b5\u30a4\u30c8\u306e\u65e5\u672c\u8a9e\u8a33\u3060\u3063\u305f\u308a\u3059\u308b\nDLL embedding in a WPF or WinForm application (VB.NET and C#)\n##\u305d\u306e\uff11 \u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u30d5\u30a1\u30a4\u30eb\u306b\u30b3\u30de\u30f3\u30c9\u3092\u8ffd\u52a0\nVB\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u30d5\u30a1\u30a4\u30eb\u306e\n\n```xml\n<Import Project=\"$(MSBuildToolsPath)\\Microsoft.VisualBasic.targets\" />\n```\n\n\u306e\u3042\u3068\u306b\u4ee5\u4e0b\u306e\u6587\u5b57\u5217\u3092\u633f\u5165\u3057\u307e\u3059\n\n```xml\n<Target Name=\"AfterResolveReferences\">\n  <ItemGroup>\n    <EmbeddedResource Include=\"@(ReferenceCopyLocalPaths)\" Condition=\"'%(ReferenceCopyLocalPaths.Extension)' == '.dll'\">\n      <LogicalName>%(ReferenceCopyLocalPaths.DestinationSubDirectory)%(ReferenceCopyLocalPaths.Filename)%(ReferenceCopyLocalPaths.Extension)</LogicalName>\n    </EmbeddedResource>\n  </ItemGroup>\n</Target>\n```\n\n##\u305d\u306e\uff12 EXE\u304b\u3089\u30a2\u30bb\u30f3\u30d6\u30ea\u3092\u30ed\u30fc\u30c9\u3059\u308b\u30b3\u30fc\u30c9\u3092\u8ffd\u52a0\n\u4ee5\u4e0b\u306e\u30b3\u30fc\u30c9\u3092\u30bd\u30fc\u30b9\u30d5\u30a1\u30a4\u30eb\u306b\u3057\u3066\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u306b\u8ffd\u52a0\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n\n```vbnet:startup.vb\n<System.STAThreadAttribute(), _\nSystem.Diagnostics.DebuggerNonUserCodeAttribute()> _\nPublic Sub Main()\n    AddHandler AppDomain.CurrentDomain.AssemblyResolve, AddressOf OnResolveAssembly\n    Dim app As Application = New Application()\n    Dim oMain As New MainWindow\n    app.Run(oMain)\nEnd Sub \n\nPrivate Function OnResolveAssembly(sender As Object, args As ResolveEventArgs) As System.Reflection.Assembly\n    Dim executingAssembly As System.Reflection.Assembly = System.Reflection.Assembly.GetExecutingAssembly()\n    Dim assemblyName As New System.Reflection.AssemblyName(args.Name) Dim path As String = assemblyName.Name + \".dll\"\n    If assemblyName.CultureInfo.Equals(System.Globalization.CultureInfo.InvariantCulture) = False Then\npath = [String].Format(\"{0}\\{1}\", assemblyName.CultureInfo, path)\n    End If \n    Using stream As System.IO.Stream = executingAssembly.GetManifestResourceStream(path)\n        If stream Is Nothing Then\n            Return Nothing\n        End If \n    Dim assemblyRawBytes As Byte() = New Byte(stream.Length - 1) {}\nstream.Read(assemblyRawBytes, 0, assemblyRawBytes.Length)\n        Return System.Reflection.Assembly.Load(assemblyRawBytes)\n    End Using\nEnd Function\nEnd Module\n```\n\n##\u305d\u306e\uff13 \u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u8a2d\u5b9a\u3092\u5909\u66f4\n\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u8a2d\u5b9a\u3092\u5909\u66f4\u3057\u3066\u3001\u30b9\u30bf\u30fc\u30c8\u30a2\u30c3\u30d7\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u305d\u306e\uff12\u3067\u8ffd\u52a0\u3057\u305f\u30bd\u30fc\u30b9\u306b\u5909\u66f4\u3059\u308b\u3002\n\u3059\u3079\u3066\u7d42\u4e86\u3057\u305f\u3089\u30d3\u30eb\u30c9\u3059\u308c\u3070EXE\u5358\u72ec\u3067\u8d77\u52d5\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002\n\n\u305f\u3060\u3057\u3001WPFToolkit\u306e\u30b0\u30e9\u30d5\u306e\u3088\u3046\u306bDLL\u304b\u3089DLL\u306e\u95a2\u6570\u3092\u547c\u3093\u3067\u3044\u305f\u308a\u3059\u308b\u3068\u52d5\u304b\u306a\u3044\u5834\u5408\u304c\u3042\u308b\u306e\u3067\uff11\uff10\uff10\uff05\u3068\u306f\u3044\u304d\u307e\u305b\u3093\u304c\uff19\uff19\uff05\u304f\u3089\u3044\u306f\u3053\u308c\u3067\u3044\u3051\u307e\u3059\u3002\n\nWPF\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u3058\u3083\u306a\u304f\u3066\u3082\u4f7f\u3048\u308b\u306e\u3067\u610f\u5916\u306b\u4fbf\u5229\u3067\u3059\u3002\n\n\u4eca\u56de\u306e\u8a18\u4e8b\u306f\u6b21\u306e\u30b5\u30a4\u30c8\u306e\u65e5\u672c\u8a9e\u8a33\u3060\u3063\u305f\u308a\u3059\u308b\n[DLL embedding in a WPF or WinForm application (VB.NET and C#)](http://www.kastory.net/index.php?option=com_content&view=article&id=8:dll-embedding-in-a-wpf-or-winform-application-vbnet-and-c&catid=11&Itemid=126&showall=1&limitstart=)\n", "tags": ["VB.Net", "VB", "WPF", ".NET"]}