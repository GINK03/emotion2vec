{"context": "\n\n\u53cb\u611b\u6570\n\u300c\u5b8c\u5168\u6570\u300d\u3068\u5171\u306b\u5c0f\u8aac\u300e\u535a\u58eb\u306e\u611b\u3057\u305f\u6570\u5f0f\u300f\u306b\u767b\u5834\u3059\u308b\u300c\u53cb\u611b\u6570\u300d\u3092\u6c42\u3081\u308b\u30d7\u30ed\u30b0\u30e9\u30e0\u3067\u3059\u3002\n\u53cb\u611b\u6570(Amicable Numbers)\u3068\u306f\u3001\uff12\u3064\u306e\u7570\u306a\u308b\u81ea\u7136\u6570\u306e\u7d44(\u30da\u30a2)\u306b\u306a\u3063\u3066\u3044\u3066\u3001\u81ea\u5206\u81ea\u8eab\u3092\u9664\u3044\u305f\u7d04\u6570\u306e\u548c\u304c\u3001\u3082\u3046\u7247\u65b9\u306e\u6570\u3068\u7b49\u3057\u304f\u306a\u308b\u3088\u3046\u306a\u6570\u3092\u8a00\u3044\u307e\u3059\u3002\u300c\u89aa\u548c\u6570\u300d\u3068\u3082\u547c\u3070\u308c\u3066\u3044\u308b\u3088\u3046\u3067\u3059\u3002\n\u4f8b\u3048\u3070\u3001\u4e00\u756a\u5c0f\u3055\u306a\u53cb\u611b\u6570\u306e\u7d44\u306f(220, 284)\u3067\u3059\u3002\n220\u306e\u81ea\u5206\u81ea\u8eab\u3092\u9664\u3044\u305f\u7d04\u6570\u306e\u548c\u306f\u30011+2+4+5+10+11+20+22+44+55+110 = 284 \u3067\u3001\n284\u306e\u81ea\u5206\u81ea\u8eab\u3092\u9664\u3044\u305f\u7d04\u6570\u306e\u548c\u306f\u30011+2+4+71+142 = 220 \u3068\u306a\u308a\u307e\u3059\u3002\n\u3061\u306a\u307f\u306b\u3001\u4eca\u307e\u3067\u306b\u898b\u3064\u304b\u3063\u305f\u53cb\u611b\u6570\u306e\u7d44\u306f\u3001\u3059\u3079\u3066\u5076\u6570\u540c\u58eb\u307e\u305f\u306f\u5947\u6570\u540c\u58eb\u306e\u7d44\u3060\u305d\u3046\u3067\u3059\u3002\n\u305f\u3060\u3001\u3059\u3079\u3066\u3067\u305d\u3046\u306a\u308b\u306e\u304b\u306f\u3001\u672a\u89e3\u6c7a\u306e\u554f\u984c\u306e\u3088\u3046\u3067\u3059\u3002\n\nC#\u306e\u30b3\u30fc\u30c9\n\u300c\u53cb\u611b\u6570\u300d\u306e\u7d44\u3092\u6c42\u3081\u308b\u4f55\u3089\u304b\u306e\u5f0f\u3092\u4f7f\u3048\u3070\u6c42\u3081\u3089\u308c\u308b\u3001\u3068\u3044\u3046\u308f\u3051\u3067\u306f\u306a\u3055\u305d\u3046\u306a\u306e\u3067\u3001\u3053\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u3067\u306f\u3001\u7d04\u6570\u306e\u548c\u3092\u8a08\u7b97\u3059\u308b\u3053\u3068\u3067\u3001\u53cb\u611b\u6570\u3092\u6c42\u3081\u3066\u3044\u307e\u3059\u3002\n\nAmicableNumbers.cs\nclass Program {\n    public static void Main(string[] args) {\n        AmicableNumbers an = new AmicableNumbers();\n        var numbers = an.GetNumbers()\n                        .Take(20);\n        foreach (var pair in numbers) {\n            Console.WriteLine(\"({0} , {1})\", pair.Value1, pair.Value2);\n        }\n    }\n}\n\npublic class Pair {\n    public long Value1 { get; set; }\n    public long Value2 { get; set; }\n}\n\npublic class AmicableNumbers {\n    // long \u306e\u7bc4\u56f2\u3067\u3001\u53cb\u611b\u6570\u3092\u5217\u6319\u3059\u308b\n    public IEnumerable<Pair> GetNumbers() {\n        for (long i = 2; i < long.MaxValue; i++) {\n            long x = Divisors(i).Sum();\n            if (i >= x)\n                continue;\n            long y = Divisors(x).Sum();\n            if (i == y)\n                yield return new Pair { Value1 = i, Value2 = x };\n        }\n    }\n\n    // \u771f\u306e\u7d04\u6570\u3092\u6c42\u3081\u308b n \u306f\u30012\u4ee5\u4e0a\u306e\u6574\u6570\n    private IEnumerable<long> Divisors(long n) {\n        yield return 1;\n        long m = (long)Math.Sqrt(n);\n        if (m * m == n) {\n            yield return m;\n            m--;\n        }\n        for (long i = 2; i <= m; i++) {\n            if (n % i == 0) {\n                yield return i;\n                yield return n / i;\n            }\n        }\n    }\n}\n\n\n\u30af\u30e9\u30b9 AmicableNumbers\u304c\u3001\u53cb\u611b\u6570\u3092\u6c42\u3081\u308b\u30af\u30e9\u30b9\u3067\u3001GetNumbers\u30e1\u30bd\u30c3\u30c9\u3067\u3001\u53cb\u611b\u6570\u306e\u7d44\u3092\u9806\u306b\u53d6\u308a\u51fa\u305b\u308b\u3088\u3046\u306b\u3057\u3066\u3044\u307e\u3059\u3002\u300c\u3044\u304f\u3064\u307e\u3067\u300d\u3068\u3044\u3046\u5236\u9650\u306f\u8a2d\u3051\u3066\u3044\u306a\u3044\u306e\u3067\u3001GetNumbers\u30e1\u30bd\u30c3\u30c9\u3092\u547c\u3073\u51fa\u3059\u5074\u3067\u3001Take(n)\u3068\u304b\u3057\u3066\u3001\u7d44\u3092\u53d6\u308a\u3060\u3059\u500b\u6570\u3092\u6307\u5b9a\u3057\u307e\u3059\u3002\u3082\u3061\u308d\u3093\u53d6\u308a\u51fa\u305b\u308b\u306e\u306f\u3001long\u3067\u8868\u305b\u308b\u6570\u306e\u7bc4\u56f2\u3067\u3059\u3002\n\n\u5b9f\u884c\u7d50\u679c\n(220 , 284)\n(1184 , 1210)\n(2620 , 2924)\n(5020 , 5564)\n(6232 , 6368)\n(10744 , 10856)\n(12285 , 14595)\n(17296 , 18416)\n(63020 , 76084)\n(66928 , 66992)\n(67095 , 71145)\n(69615 , 87633)\n(79750 , 88730)\n(100485 , 124155)\n(122265 , 139815)\n(122368 , 123152)\n(141664 , 153176)\n(142310 , 168730)\n(171856 , 176336)\n(176272 , 180848)\n\n\n\u3053\u306e\u8a18\u4e8b\u306f\u3001Gushwell's C# Programming Page\u3067\u516c\u958b\u3057\u305f\u3082\u306e\u3092\u52a0\u7b46\u30fb\u4fee\u6b63\u3057\u305f\u3082\u306e\u3067\u3059\u3002\n\n## \u53cb\u611b\u6570\n\n\u300c[\u5b8c\u5168\u6570](http://qiita.com/gushwell/items/7d4468bd3db972ae9b08)\u300d\u3068\u5171\u306b\u5c0f\u8aac\u300e\u535a\u58eb\u306e\u611b\u3057\u305f\u6570\u5f0f\u300f\u306b\u767b\u5834\u3059\u308b\u300c\u53cb\u611b\u6570\u300d\u3092\u6c42\u3081\u308b\u30d7\u30ed\u30b0\u30e9\u30e0\u3067\u3059\u3002\n\n\u53cb\u611b\u6570(Amicable Numbers)\u3068\u306f\u3001\uff12\u3064\u306e\u7570\u306a\u308b\u81ea\u7136\u6570\u306e\u7d44(\u30da\u30a2)\u306b\u306a\u3063\u3066\u3044\u3066\u3001\u81ea\u5206\u81ea\u8eab\u3092\u9664\u3044\u305f\u7d04\u6570\u306e\u548c\u304c\u3001\u3082\u3046\u7247\u65b9\u306e\u6570\u3068\u7b49\u3057\u304f\u306a\u308b\u3088\u3046\u306a\u6570\u3092\u8a00\u3044\u307e\u3059\u3002\u300c\u89aa\u548c\u6570\u300d\u3068\u3082\u547c\u3070\u308c\u3066\u3044\u308b\u3088\u3046\u3067\u3059\u3002\n\n\u4f8b\u3048\u3070\u3001\u4e00\u756a\u5c0f\u3055\u306a\u53cb\u611b\u6570\u306e\u7d44\u306f(220, 284)\u3067\u3059\u3002\n\n220\u306e\u81ea\u5206\u81ea\u8eab\u3092\u9664\u3044\u305f\u7d04\u6570\u306e\u548c\u306f\u30011+2+4+5+10+11+20+22+44+55+110 = 284 \u3067\u3001\n284\u306e\u81ea\u5206\u81ea\u8eab\u3092\u9664\u3044\u305f\u7d04\u6570\u306e\u548c\u306f\u30011+2+4+71+142 = 220 \u3068\u306a\u308a\u307e\u3059\u3002\n\n\u3061\u306a\u307f\u306b\u3001\u4eca\u307e\u3067\u306b\u898b\u3064\u304b\u3063\u305f\u53cb\u611b\u6570\u306e\u7d44\u306f\u3001\u3059\u3079\u3066\u5076\u6570\u540c\u58eb\u307e\u305f\u306f\u5947\u6570\u540c\u58eb\u306e\u7d44\u3060\u305d\u3046\u3067\u3059\u3002\n\u305f\u3060\u3001\u3059\u3079\u3066\u3067\u305d\u3046\u306a\u308b\u306e\u304b\u306f\u3001\u672a\u89e3\u6c7a\u306e\u554f\u984c\u306e\u3088\u3046\u3067\u3059\u3002\n\n## C#\u306e\u30b3\u30fc\u30c9\n\n\u300c\u53cb\u611b\u6570\u300d\u306e\u7d44\u3092\u6c42\u3081\u308b\u4f55\u3089\u304b\u306e\u5f0f\u3092\u4f7f\u3048\u3070\u6c42\u3081\u3089\u308c\u308b\u3001\u3068\u3044\u3046\u308f\u3051\u3067\u306f\u306a\u3055\u305d\u3046\u306a\u306e\u3067\u3001\u3053\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u3067\u306f\u3001\u7d04\u6570\u306e\u548c\u3092\u8a08\u7b97\u3059\u308b\u3053\u3068\u3067\u3001\u53cb\u611b\u6570\u3092\u6c42\u3081\u3066\u3044\u307e\u3059\u3002\n\n\n```cshapr:AmicableNumbers.cs\nclass Program {\n    public static void Main(string[] args) {\n        AmicableNumbers an = new AmicableNumbers();\n        var numbers = an.GetNumbers()\n                        .Take(20);\n        foreach (var pair in numbers) {\n            Console.WriteLine(\"({0} , {1})\", pair.Value1, pair.Value2);\n        }\n    }\n}\n\npublic class Pair {\n    public long Value1 { get; set; }\n    public long Value2 { get; set; }\n}\n\npublic class AmicableNumbers {\n    // long \u306e\u7bc4\u56f2\u3067\u3001\u53cb\u611b\u6570\u3092\u5217\u6319\u3059\u308b\n    public IEnumerable<Pair> GetNumbers() {\n        for (long i = 2; i < long.MaxValue; i++) {\n            long x = Divisors(i).Sum();\n            if (i >= x)\n                continue;\n            long y = Divisors(x).Sum();\n            if (i == y)\n                yield return new Pair { Value1 = i, Value2 = x };\n        }\n    }\n\n    // \u771f\u306e\u7d04\u6570\u3092\u6c42\u3081\u308b n \u306f\u30012\u4ee5\u4e0a\u306e\u6574\u6570\n    private IEnumerable<long> Divisors(long n) {\n        yield return 1;\n        long m = (long)Math.Sqrt(n);\n        if (m * m == n) {\n            yield return m;\n            m--;\n        }\n        for (long i = 2; i <= m; i++) {\n            if (n % i == 0) {\n                yield return i;\n                yield return n / i;\n            }\n        }\n    }\n}\n```\n\n\u30af\u30e9\u30b9 AmicableNumbers\u304c\u3001\u53cb\u611b\u6570\u3092\u6c42\u3081\u308b\u30af\u30e9\u30b9\u3067\u3001GetNumbers\u30e1\u30bd\u30c3\u30c9\u3067\u3001\u53cb\u611b\u6570\u306e\u7d44\u3092\u9806\u306b\u53d6\u308a\u51fa\u305b\u308b\u3088\u3046\u306b\u3057\u3066\u3044\u307e\u3059\u3002\u300c\u3044\u304f\u3064\u307e\u3067\u300d\u3068\u3044\u3046\u5236\u9650\u306f\u8a2d\u3051\u3066\u3044\u306a\u3044\u306e\u3067\u3001GetNumbers\u30e1\u30bd\u30c3\u30c9\u3092\u547c\u3073\u51fa\u3059\u5074\u3067\u3001Take(n)\u3068\u304b\u3057\u3066\u3001\u7d44\u3092\u53d6\u308a\u3060\u3059\u500b\u6570\u3092\u6307\u5b9a\u3057\u307e\u3059\u3002\u3082\u3061\u308d\u3093\u53d6\u308a\u51fa\u305b\u308b\u306e\u306f\u3001long\u3067\u8868\u305b\u308b\u6570\u306e\u7bc4\u56f2\u3067\u3059\u3002\n\n\n## \u5b9f\u884c\u7d50\u679c\n\n<pre>\n(220 , 284)\n(1184 , 1210)\n(2620 , 2924)\n(5020 , 5564)\n(6232 , 6368)\n(10744 , 10856)\n(12285 , 14595)\n(17296 , 18416)\n(63020 , 76084)\n(66928 , 66992)\n(67095 , 71145)\n(69615 , 87633)\n(79750 , 88730)\n(100485 , 124155)\n(122265 , 139815)\n(122368 , 123152)\n(141664 , 153176)\n(142310 , 168730)\n(171856 , 176336)\n(176272 , 180848)\n</pre>\n\n\n\n-------------------\n\u3053\u306e\u8a18\u4e8b\u306f\u3001Gushwell's C# Programming Page\u3067\u516c\u958b\u3057\u305f\u3082\u306e\u3092\u52a0\u7b46\u30fb\u4fee\u6b63\u3057\u305f\u3082\u306e\u3067\u3059\u3002\n", "tags": ["\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0", "C#\u5c0f\u54c1\u96c6\u30b7\u30ea\u30fc\u30b9", "C#"]}