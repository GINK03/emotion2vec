{"context": " More than 1 year has passed since last update.\n\n0. \u306f\u3058\u3081\u306b\n\u524d\u56de(\u305d\u306e\u2460 \u9854\u8a8d\u8b58)\u304b\u3089\u306e\u7d9a\u304d\u3067\u3059\u3002\n\u524d\u56de\u8a8d\u8b58\u3057\u305f\u9854\u3092\u4ed6\u306e\u753b\u50cf\u3067\u4e0a\u66f8\u304d\u3057\u307e\u3059\u3002\n\u4ee5\u4e0b\u306e\u30b5\u30a4\u30c8\u3092\u53c2\u8003\u306b\u3057\u307e\u3057\u305f\u3002\npython+Opencv\u306b\u3088\u308b\u753b\u50cf\u51e6\u74065\uff08\u30ea\u30b5\u30a4\u30ba\uff09\nPython + OpenCV + pillow\u3067\u7b11\u3044\u7537\u3092\u9854\u306b\u4e0a\u66f8\u304d\n\u4e0a\u66f8\u304d\u3059\u308b\u753b\u50cf\u306f\u3084\u3063\u3071\u308a\u30b3\u30ec\u3067\u3057\u3087\u3046\u3002\n\u7b11\u3044\u7537\u30d1\u30fc\u30c4\n\n1. \u753b\u50cf\u306e\u30ea\u30b5\u30a4\u30ba\n\u8a8d\u8b58\u3057\u305f\u9854\u306e\u5927\u304d\u3055\u3068\u4e0a\u66f8\u304d\u3057\u3088\u3046\u3068\u3057\u3066\u3044\u308b\u753b\u50cf\u306e\u5927\u304d\u3055\u304c\u7570\u306a\u308b\u306e\u3067\u3001OpenCV\u306eresize()\u95a2\u6570\u3092\u4f7f\u3063\u3066\u753b\u50cf\u306e\u30b5\u30a4\u30ba\u3092\u5909\u66f4\u3059\u308b\u95a2\u6570\u3092\u4f5c\u6210\u3057\u307e\u3059\u3002\n\u753b\u50cf\u3068\u5909\u66f4\u5f8c\u306e\u30b5\u30a4\u30ba\u3092\u4e0e\u3048\u308b\u3068\u305d\u308c\u306b\u5408\u308f\u305b\u3066\u4f38\u7e2e\u3057\u307e\u3059\u3002\n\u5143\u753b\u50cf\u306e\u30a2\u30b9\u30da\u30af\u30c8\u6bd4\u3092\u5909\u3048\u305f\u304f\u306a\u304b\u3063\u305f\u306e\u3067\u3001\u30b5\u30a4\u30ba\u306e\u5dee(\u6bd4\u7387)\u304c\u5c0f\u3055\u3044\u65b9\u306b\u5408\u308f\u305b\u3066\u4f38\u7e2e\u3057\u307e\u3059\u3002\n\u4ee5\u4e0b\u304c\u30b3\u30fc\u30c9\u3067\u3059\u3002\n\nresize_image\ndef resize_image(image, height, width):\n\n    # \u5143\u3005\u306e\u30b5\u30a4\u30ba\u3092\u53d6\u5f97\n    org_height, org_width = image.shape[:2]\n\n    # \u5927\u304d\u3044\u65b9\u306e\u30b5\u30a4\u30ba\u306b\u5408\u308f\u305b\u3066\u7e2e\u5c0f\n    if float(height)/org_height > float(width)/org_width:\n        ratio = float(height)/org_height\n    else:\n        ratio = float(width)/org_width\n\n    # \u30ea\u30b5\u30a4\u30ba\n    resized = cv2.resize(image,(int(org_height*ratio),int(org_width*ratio)))\n\n    return resized    \n\n\n\n2. \u30ea\u30b5\u30a4\u30ba\u7d50\u679c\n\u30b5\u30a4\u30ba\u5909\u66f4\u306e\u95a2\u6570\u3092\u30c6\u30b9\u30c8\u3057\u3066\u307f\u307e\u3059\u3002\u8a66\u3057\u306b100\u00d7100\u306e\u5927\u304d\u3055\u306b\u3057\u3066\u307f\u307e\u3057\u305f\u3002\n\nresizetest\n    # \u4e0a\u66f8\u304d\u3059\u308b\u753b\u50cf\u306e\u8aad\u307f\u8fbc\u307f\n    ol_imgae_path = \"target/warai_otoko.png\"    \n    ol_image = cv2.imread(ol_imgae_path,cv2.IMREAD_UNCHANGED)   # \u30a2\u30eb\u30d5\u30a1\u30c1\u30e3\u30f3\u30cd\u30eb(\u900f\u904e)\u3082\u8aad\u307f\u3053\u3080\u3088\u3046\u306bIMREAD_INCHANGED\u3092\u6307\u5b9a\n\n    # \u30ea\u30b5\u30a4\u30ba\n    resized_image = resize_image(ol_image, 100, 100)\n\n    # \u8a8d\u8b58\u7d50\u679c\u306e\u51fa\u529b\n    cv2.imwrite(\"result/warai_otoko_result.png\", resized_image)\n\n\nBefore\n\nAfter\n\n\u3046\u307e\u304f\u7e2e\u5c0f\u3067\u304d\u307e\u3057\u305f\u3002\n\n3. \u753b\u50cf\u306e\u4e0a\u66f8\u304d\u3092\u884c\u3046\u95a2\u6570\u306e\u4f5c\u6210\n\u9854\u90e8\u5206\u306b\u753b\u50cf\u3092\u4e0a\u66f8\u304d\u3057\u307e\u3059\u3002\nPillow(PIL)\u3068\u3044\u3046\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u7528\u3044\u3066\u3001\u6307\u5b9a\u3057\u305f\u4f4d\u7f6e\u306b\u753b\u50cf\u3092\u5408\u6210\u3059\u308b\u95a2\u6570\u3092\u4f5c\u6210\u3057\u307e\u3059\u3002\n\u6d41\u308c\u306f\n\u30fb\u753b\u50cf\u3092OpenCV\u306e\u5f62\u5f0f\u304b\u3089PIL\u306e\u5f62\u5f0f\u306b\u5909\u63db\n\u30fb\u30aa\u30fc\u30d0\u30ec\u30a4\u753b\u50cf\u3067\u4e0a\u66f8\u304d\n\u30fbPIL\u306e\u5f62\u5f0f\u304b\u3089OpenCV\u306e\u5f62\u5f0f\u306b\u76f4\u3057\u3066\u8fd4\u3059\u3002\n\u3068\u3044\u3046\u611f\u3058\u3067\u3059\u3002\n\noverlayOnPart\nimport numpy as np\nfrom PIL import Image\n\ndef overlayOnPart(src_image, overlay_image, posX, posY):\n\n    # \u30aa\u30fc\u30d0\u30ec\u30a4\u753b\u50cf\u306e\u30b5\u30a4\u30ba\u3092\u53d6\u5f97\n    ol_height, ol_width = overlay_image.shape[:2]\n\n    # OpenCV\u306e\u753b\u50cf\u30c7\u30fc\u30bf\u3092PIL\u306b\u5909\u63db\n    #\u3000BGRA\u304b\u3089RGBA\u3078\u5909\u63db\n    src_image_RGBA = cv2.cvtColor(src_image, cv2.COLOR_BGR2RGB)\n    overlay_image_RGBA = cv2.cvtColor(overlay_image, cv2.COLOR_BGRA2RGBA)\n\n    #\u3000PIL\u306b\u5909\u63db\n    src_image_PIL=Image.fromarray(src_image_RGBA)\n    overlay_image_PIL=Image.fromarray(overlay_image_RGBA)\n\n    # \u5408\u6210\u306e\u305f\u3081\u3001RGBA\u30e2\u30fc\u30c9\u306b\u5909\u66f4\n    src_image_PIL = src_image_PIL.convert('RGBA')\n    overlay_image_PIL = overlay_image_PIL.convert('RGBA')\n\n    # \u540c\u3058\u5927\u304d\u3055\u306e\u900f\u904e\u30ad\u30e3\u30f3\u30d1\u30b9\u3092\u7528\u610f\n    tmp = Image.new('RGBA', src_image_PIL.size, (255, 255,255, 0))\n    # \u7528\u610f\u3057\u305f\u30ad\u30e3\u30f3\u30d1\u30b9\u306b\u4e0a\u66f8\u304d\n    tmp.paste(overlay_image_PIL, (posX, posY), overlay_image_PIL)\n    # \u30aa\u30ea\u30b8\u30ca\u30eb\u3068\u30ad\u30e3\u30f3\u30d1\u30b9\u3092\u5408\u6210\u3057\u3066\u4fdd\u5b58\n    result = Image.alpha_composite(src_image_PIL, tmp)\n\n    return  cv2.cvtColor(np.asarray(result), cv2.COLOR_RGBA2BGRA)\n\n\n\n4. \u4e0a\u66f8\u304d\u95a2\u6570\u306e\u7d44\u307f\u8fbc\u307f\n\u524d\u56de\u8a8d\u8b58\u3057\u305fLenna\u753b\u50cf\u306e\u9854\u306b\u7b11\u3044\u7537\u3092\u8f09\u305b\u3066\u307f\u307e\u3059\u3002\n\u524d\u56de\u306e\u30bd\u30fc\u30b9\u306b\u4e0a\u66f8\u304d\u3059\u308b\u753b\u50cf\u306e\u8aad\u307f\u8fbc\u307f\u3092\u8ffd\u52a0\u3057\u3001\n\u9854\u306e\u5927\u304d\u3055\u306b\u5408\u308f\u305b\u3066\u7e2e\u5c0f\u3057\u305f\u5f8c\u3001\u4e0a\u66f8\u304d\u3092\u3057\u307e\u3059\u3002\n\noverlay_face\n#coding=utf-8\n\nimport cv2\nimport numpy as np\nfrom PIL import Image\n\n\ndef overlay_face():\n\n    # \u8a8d\u8b58\u5bfe\u8c61\u30d5\u30a1\u30a4\u30eb\u306e\u8aad\u307f\u8fbc\u307f\n    image_path = \"target/Lenna.png\"\n    image = cv2.imread(image_path)\n\n    # \u4e0a\u66f8\u304d\u3059\u308b\u753b\u50cf\u306e\u8aad\u307f\u8fbc\u307f\n    ol_imgae_path = \"target/warai_otoko.png\"    \n    ol_image = cv2.imread(ol_imgae_path,cv2.IMREAD_UNCHANGED)   # \u30a2\u30eb\u30d5\u30a1\u30c1\u30e3\u30f3\u30cd\u30eb(\u900f\u904e)\u3082\u8aad\u307f\u3053\u3080\u3088\u3046\u306bIMREAD_INCHANGED\u3092\u6307\u5b9a\n\n    # \u30b0\u30ec\u30fc\u30b9\u30b1\u30fc\u30eb\u306b\u5909\u63db\n    image_gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)\n\n    # \u9854\u8a8d\u8b58\u7528\u7279\u5fb4\u91cf\u306e\u30d5\u30a1\u30a4\u30eb\u6307\u5b9a\n    cascade_path = \"haarcascades/haarcascade_frontalface_alt.xml\"\n    # \u30ab\u30b9\u30b1\u30fc\u30c9\u5206\u985e\u5668\u306e\u7279\u5fb4\u91cf\u3092\u53d6\u5f97\u3059\u308b\n    cascade = cv2.CascadeClassifier(cascade_path)\n\n    # \u9854\u8a8d\u8b58\u306e\u5b9f\u884c\n    facerecog = cascade.detectMultiScale(image_gray, scaleFactor=1.1, minNeighbors=1, minSize=(1, 1))\n\n\n    if len(facerecog) > 0:\n\n\n        # \u8a8d\u8b58\u3057\u305f\u9854\u5168\u3066\u306b\u753b\u50cf\u3092\u4e0a\u66f8\u304d\u3059\u308b\n        for rect in facerecog:\n\n            # \u8a8d\u8b58\u7d50\u679c\u3092\u8868\u793a\n            print (\"\u8a8d\u8b58\u7d50\u679c\")\n            print (\"(x,y)=(\" + str(rect[0]) + \",\" + str(rect[1])+ \")\" + \\\n                \"  \u9ad8\u3055\uff1a\"+str(rect[2]) + \\\n                \"  \u5e45\uff1a\"+str(rect[3]))\n\n            # \u8a8d\u8b58\u7bc4\u56f2\u306b\u3042\u308f\u305b\u3066\u753b\u50cf\u3092\u30ea\u30b5\u30a4\u30ba\n            resized_ol_image = resize_image(ol_image, rect[2], rect[3])\n\n            # \u4e0a\u66f8\u304d\u3057\u305f\u753b\u50cf\u306e\u4f5c\u6210\n            image = overlayOnPart(image, resized_ol_image, rect[0], rect[1])\n\n    # \u8a8d\u8b58\u7d50\u679c\u306e\u51fa\u529b\n    cv2.imwrite(\"result/Lenna_result.png\", image)\n\n\nif __name__ == '__main__':\n    overlay_face()\n\n\n\n5. \u4e0a\u66f8\u304d\u7d50\u679c\n\n\u3046\u307e\u304f\u3044\u304d\u307e\u3057\u305f\u3002\n\n6. \u6700\u5f8c\u306b\n\u3053\u308c\u3067\u9759\u6b62\u753b\u50cf\u306e\u30b3\u30e9\u4f5c\u6210\u304c\u51fa\u6765\u308b\u3088\u3046\u306b\u306a\u3063\u305f\u306e\u3067\u3001\n\u6b21\u56de\u304b\u3089\u306f\u52d5\u753b\u306b\u9069\u7528\u3057\u3066\u3044\u304d\u307e\u3059\u3002\nPython + OpenCV \u3067\u96d1\u30b3\u30e9\u52d5\u753b\u3092\u4f5c\u6210\u3059\u308b\u2462 \u96d1\u30b3\u30e9\u52d5\u753b\u4f5c\u6210\n##0. \u306f\u3058\u3081\u306b\n\u524d\u56de([\u305d\u306e\u2460 \u9854\u8a8d\u8b58](http://qiita.com/k_sui_14/items/5386db1a118103b1828f))\u304b\u3089\u306e\u7d9a\u304d\u3067\u3059\u3002\n\u524d\u56de\u8a8d\u8b58\u3057\u305f\u9854\u3092\u4ed6\u306e\u753b\u50cf\u3067\u4e0a\u66f8\u304d\u3057\u307e\u3059\u3002\n\u4ee5\u4e0b\u306e\u30b5\u30a4\u30c8\u3092\u53c2\u8003\u306b\u3057\u307e\u3057\u305f\u3002\n[python+Opencv\u306b\u3088\u308b\u753b\u50cf\u51e6\u74065\uff08\u30ea\u30b5\u30a4\u30ba\uff09](http://tatabox.hatenablog.com/entry/2013/07/15/164015)\n[Python + OpenCV + pillow\u3067\u7b11\u3044\u7537\u3092\u9854\u306b\u4e0a\u66f8\u304d](http://symfoware.blog68.fc2.com/blog-entry-1557.html?sp)\n\n\n\u4e0a\u66f8\u304d\u3059\u308b\u753b\u50cf\u306f\u3084\u3063\u3071\u308a\u30b3\u30ec\u3067\u3057\u3087\u3046\u3002\n[\u7b11\u3044\u7537\u30d1\u30fc\u30c4](http://ledmyway.seesaa.net/article/181382754.html)\n\n\n##1. \u753b\u50cf\u306e\u30ea\u30b5\u30a4\u30ba\n\u8a8d\u8b58\u3057\u305f\u9854\u306e\u5927\u304d\u3055\u3068\u4e0a\u66f8\u304d\u3057\u3088\u3046\u3068\u3057\u3066\u3044\u308b\u753b\u50cf\u306e\u5927\u304d\u3055\u304c\u7570\u306a\u308b\u306e\u3067\u3001OpenCV\u306eresize()\u95a2\u6570\u3092\u4f7f\u3063\u3066\u753b\u50cf\u306e\u30b5\u30a4\u30ba\u3092\u5909\u66f4\u3059\u308b\u95a2\u6570\u3092\u4f5c\u6210\u3057\u307e\u3059\u3002\n\u753b\u50cf\u3068\u5909\u66f4\u5f8c\u306e\u30b5\u30a4\u30ba\u3092\u4e0e\u3048\u308b\u3068\u305d\u308c\u306b\u5408\u308f\u305b\u3066\u4f38\u7e2e\u3057\u307e\u3059\u3002\n\u5143\u753b\u50cf\u306e\u30a2\u30b9\u30da\u30af\u30c8\u6bd4\u3092\u5909\u3048\u305f\u304f\u306a\u304b\u3063\u305f\u306e\u3067\u3001\u30b5\u30a4\u30ba\u306e\u5dee(\u6bd4\u7387)\u304c\u5c0f\u3055\u3044\u65b9\u306b\u5408\u308f\u305b\u3066\u4f38\u7e2e\u3057\u307e\u3059\u3002\n\u4ee5\u4e0b\u304c\u30b3\u30fc\u30c9\u3067\u3059\u3002\n\n\n```py3:resize_image\ndef resize_image(image, height, width):\n    \n    # \u5143\u3005\u306e\u30b5\u30a4\u30ba\u3092\u53d6\u5f97\n    org_height, org_width = image.shape[:2]\n    \n    # \u5927\u304d\u3044\u65b9\u306e\u30b5\u30a4\u30ba\u306b\u5408\u308f\u305b\u3066\u7e2e\u5c0f\n    if float(height)/org_height > float(width)/org_width:\n        ratio = float(height)/org_height\n    else:\n        ratio = float(width)/org_width\n    \n    # \u30ea\u30b5\u30a4\u30ba\n    resized = cv2.resize(image,(int(org_height*ratio),int(org_width*ratio)))\n    \n    return resized    \n```\n\n##2. \u30ea\u30b5\u30a4\u30ba\u7d50\u679c\n\u30b5\u30a4\u30ba\u5909\u66f4\u306e\u95a2\u6570\u3092\u30c6\u30b9\u30c8\u3057\u3066\u307f\u307e\u3059\u3002\u8a66\u3057\u306b100\u00d7100\u306e\u5927\u304d\u3055\u306b\u3057\u3066\u307f\u307e\u3057\u305f\u3002\n\n```py3:resizetest\n    # \u4e0a\u66f8\u304d\u3059\u308b\u753b\u50cf\u306e\u8aad\u307f\u8fbc\u307f\n    ol_imgae_path = \"target/warai_otoko.png\"    \n    ol_image = cv2.imread(ol_imgae_path,cv2.IMREAD_UNCHANGED)   # \u30a2\u30eb\u30d5\u30a1\u30c1\u30e3\u30f3\u30cd\u30eb(\u900f\u904e)\u3082\u8aad\u307f\u3053\u3080\u3088\u3046\u306bIMREAD_INCHANGED\u3092\u6307\u5b9a\n\n    # \u30ea\u30b5\u30a4\u30ba\n    resized_image = resize_image(ol_image, 100, 100)\n\n    # \u8a8d\u8b58\u7d50\u679c\u306e\u51fa\u529b\n    cv2.imwrite(\"result/warai_otoko_result.png\", resized_image)\n```\n**Before**\n![warai_otoko.png](https://qiita-image-store.s3.amazonaws.com/0/3099/ce12977d-52df-a0af-627d-5bcba39a1088.png)\n\n**After**\n![warai_otoko_result.png](https://qiita-image-store.s3.amazonaws.com/0/3099/65d59e24-41d8-85bb-5b45-a80cee96f2a6.png)\n\n\u3046\u307e\u304f\u7e2e\u5c0f\u3067\u304d\u307e\u3057\u305f\u3002\n\n\n##3. \u753b\u50cf\u306e\u4e0a\u66f8\u304d\u3092\u884c\u3046\u95a2\u6570\u306e\u4f5c\u6210\n\u9854\u90e8\u5206\u306b\u753b\u50cf\u3092\u4e0a\u66f8\u304d\u3057\u307e\u3059\u3002\nPillow(PIL)\u3068\u3044\u3046\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u7528\u3044\u3066\u3001\u6307\u5b9a\u3057\u305f\u4f4d\u7f6e\u306b\u753b\u50cf\u3092\u5408\u6210\u3059\u308b\u95a2\u6570\u3092\u4f5c\u6210\u3057\u307e\u3059\u3002\n\u6d41\u308c\u306f\n\u30fb\u753b\u50cf\u3092OpenCV\u306e\u5f62\u5f0f\u304b\u3089PIL\u306e\u5f62\u5f0f\u306b\u5909\u63db\n\u30fb\u30aa\u30fc\u30d0\u30ec\u30a4\u753b\u50cf\u3067\u4e0a\u66f8\u304d\n\u30fbPIL\u306e\u5f62\u5f0f\u304b\u3089OpenCV\u306e\u5f62\u5f0f\u306b\u76f4\u3057\u3066\u8fd4\u3059\u3002\n\u3068\u3044\u3046\u611f\u3058\u3067\u3059\u3002\n\n```py3:overlayOnPart\nimport numpy as np\nfrom PIL import Image\n\ndef overlayOnPart(src_image, overlay_image, posX, posY):\n\n    # \u30aa\u30fc\u30d0\u30ec\u30a4\u753b\u50cf\u306e\u30b5\u30a4\u30ba\u3092\u53d6\u5f97\n    ol_height, ol_width = overlay_image.shape[:2]\n\n    # OpenCV\u306e\u753b\u50cf\u30c7\u30fc\u30bf\u3092PIL\u306b\u5909\u63db\n    #\u3000BGRA\u304b\u3089RGBA\u3078\u5909\u63db\n    src_image_RGBA = cv2.cvtColor(src_image, cv2.COLOR_BGR2RGB)\n    overlay_image_RGBA = cv2.cvtColor(overlay_image, cv2.COLOR_BGRA2RGBA)\n    \n    #\u3000PIL\u306b\u5909\u63db\n    src_image_PIL=Image.fromarray(src_image_RGBA)\n    overlay_image_PIL=Image.fromarray(overlay_image_RGBA)\n\n    # \u5408\u6210\u306e\u305f\u3081\u3001RGBA\u30e2\u30fc\u30c9\u306b\u5909\u66f4\n    src_image_PIL = src_image_PIL.convert('RGBA')\n    overlay_image_PIL = overlay_image_PIL.convert('RGBA')\n\n    # \u540c\u3058\u5927\u304d\u3055\u306e\u900f\u904e\u30ad\u30e3\u30f3\u30d1\u30b9\u3092\u7528\u610f\n    tmp = Image.new('RGBA', src_image_PIL.size, (255, 255,255, 0))\n    # \u7528\u610f\u3057\u305f\u30ad\u30e3\u30f3\u30d1\u30b9\u306b\u4e0a\u66f8\u304d\n    tmp.paste(overlay_image_PIL, (posX, posY), overlay_image_PIL)\n    # \u30aa\u30ea\u30b8\u30ca\u30eb\u3068\u30ad\u30e3\u30f3\u30d1\u30b9\u3092\u5408\u6210\u3057\u3066\u4fdd\u5b58\n    result = Image.alpha_composite(src_image_PIL, tmp)\n    \n    return  cv2.cvtColor(np.asarray(result), cv2.COLOR_RGBA2BGRA)\n```\n\n\n\n##4. \u4e0a\u66f8\u304d\u95a2\u6570\u306e\u7d44\u307f\u8fbc\u307f\n\u524d\u56de\u8a8d\u8b58\u3057\u305fLenna\u753b\u50cf\u306e\u9854\u306b\u7b11\u3044\u7537\u3092\u8f09\u305b\u3066\u307f\u307e\u3059\u3002\n\u524d\u56de\u306e\u30bd\u30fc\u30b9\u306b\u4e0a\u66f8\u304d\u3059\u308b\u753b\u50cf\u306e\u8aad\u307f\u8fbc\u307f\u3092\u8ffd\u52a0\u3057\u3001\n\u9854\u306e\u5927\u304d\u3055\u306b\u5408\u308f\u305b\u3066\u7e2e\u5c0f\u3057\u305f\u5f8c\u3001\u4e0a\u66f8\u304d\u3092\u3057\u307e\u3059\u3002\n\n```py3:overlay_face\n#coding=utf-8\n\nimport cv2\nimport numpy as np\nfrom PIL import Image\n\n\ndef overlay_face():\n\n    # \u8a8d\u8b58\u5bfe\u8c61\u30d5\u30a1\u30a4\u30eb\u306e\u8aad\u307f\u8fbc\u307f\n    image_path = \"target/Lenna.png\"\n    image = cv2.imread(image_path)\n\n    # \u4e0a\u66f8\u304d\u3059\u308b\u753b\u50cf\u306e\u8aad\u307f\u8fbc\u307f\n    ol_imgae_path = \"target/warai_otoko.png\"    \n    ol_image = cv2.imread(ol_imgae_path,cv2.IMREAD_UNCHANGED)   # \u30a2\u30eb\u30d5\u30a1\u30c1\u30e3\u30f3\u30cd\u30eb(\u900f\u904e)\u3082\u8aad\u307f\u3053\u3080\u3088\u3046\u306bIMREAD_INCHANGED\u3092\u6307\u5b9a\n \n    # \u30b0\u30ec\u30fc\u30b9\u30b1\u30fc\u30eb\u306b\u5909\u63db\n    image_gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)\n\n    # \u9854\u8a8d\u8b58\u7528\u7279\u5fb4\u91cf\u306e\u30d5\u30a1\u30a4\u30eb\u6307\u5b9a\n    cascade_path = \"haarcascades/haarcascade_frontalface_alt.xml\"\n    # \u30ab\u30b9\u30b1\u30fc\u30c9\u5206\u985e\u5668\u306e\u7279\u5fb4\u91cf\u3092\u53d6\u5f97\u3059\u308b\n    cascade = cv2.CascadeClassifier(cascade_path)\n\n    # \u9854\u8a8d\u8b58\u306e\u5b9f\u884c\n    facerecog = cascade.detectMultiScale(image_gray, scaleFactor=1.1, minNeighbors=1, minSize=(1, 1))\n\n  \n    if len(facerecog) > 0:\n\n\n        # \u8a8d\u8b58\u3057\u305f\u9854\u5168\u3066\u306b\u753b\u50cf\u3092\u4e0a\u66f8\u304d\u3059\u308b\n        for rect in facerecog:\n\n            # \u8a8d\u8b58\u7d50\u679c\u3092\u8868\u793a\n            print (\"\u8a8d\u8b58\u7d50\u679c\")\n            print (\"(x,y)=(\" + str(rect[0]) + \",\" + str(rect[1])+ \")\" + \\\n                \"  \u9ad8\u3055\uff1a\"+str(rect[2]) + \\\n                \"  \u5e45\uff1a\"+str(rect[3]))\n\n            # \u8a8d\u8b58\u7bc4\u56f2\u306b\u3042\u308f\u305b\u3066\u753b\u50cf\u3092\u30ea\u30b5\u30a4\u30ba\n            resized_ol_image = resize_image(ol_image, rect[2], rect[3])\n            \n            # \u4e0a\u66f8\u304d\u3057\u305f\u753b\u50cf\u306e\u4f5c\u6210\n            image = overlayOnPart(image, resized_ol_image, rect[0], rect[1])\n    \n    # \u8a8d\u8b58\u7d50\u679c\u306e\u51fa\u529b\n    cv2.imwrite(\"result/Lenna_result.png\", image)\n\n\nif __name__ == '__main__':\n    overlay_face()\n```\n\n##5. \u4e0a\u66f8\u304d\u7d50\u679c\n![Lenna_result.png](https://qiita-image-store.s3.amazonaws.com/0/3099/bda41b74-875c-116a-8a99-b3e1c234b46d.png)\n\n\u3046\u307e\u304f\u3044\u304d\u307e\u3057\u305f\u3002\n\n##6. \u6700\u5f8c\u306b\n\u3053\u308c\u3067\u9759\u6b62\u753b\u50cf\u306e\u30b3\u30e9\u4f5c\u6210\u304c\u51fa\u6765\u308b\u3088\u3046\u306b\u306a\u3063\u305f\u306e\u3067\u3001\n\u6b21\u56de\u304b\u3089\u306f\u52d5\u753b\u306b\u9069\u7528\u3057\u3066\u3044\u304d\u307e\u3059\u3002\n[Python + OpenCV \u3067\u96d1\u30b3\u30e9\u52d5\u753b\u3092\u4f5c\u6210\u3059\u308b\u2462 \u96d1\u30b3\u30e9\u52d5\u753b\u4f5c\u6210](http://qiita.com/k_sui_14/items/92fd84f35245ad0be464)\n\n\n\n", "tags": ["OpenCV", "\u753b\u50cf\u51e6\u7406", "\u9854\u8a8d\u8b58", "Python", "python3"]}