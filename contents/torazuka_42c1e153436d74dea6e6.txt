{"context": " More than 1 year has passed since last update.\nSelectChair.java\nimport static org.junit.Assert.assertEquals;\nimport java.util.ArrayList;\nimport java.util.List;\nimport org.junit.Test;\n\npublic class SelectChair {\n\n    protected final char EMPTY = '-';\n\n    public String solve(final String string) {\n        String[] split = string.split(\":\");\n        int chairNum = Integer.valueOf(split[0]);\n        char[] chairs = initChairs(chairNum);\n\n        char[] inOut = getInOut(split[1]);\n        for (char each : inOut) {\n            if (Character.isUpperCase(each)) {\n                int recomended = searchChair(chairs);\n                chairs[recomended] = each;\n            } else {\n                int awayIndex = awayChair(chairs, each);\n                chairs[awayIndex] = EMPTY;\n            }\n        }\n        String result = \"\";\n        for (char each : chairs) {\n            result += each;\n        }\n        return result;\n    }\n\n    protected char[] initChairs(final int chairNum) {\n        char[] result = new char[chairNum];\n        for (int i = 0; i < result.length; i++) {\n            result[i] = EMPTY;\n        }\n        return result;\n    }\n\n    protected int searchChair(final char[] chairs) {\n        List<Integer> primary = new ArrayList<>();\n        List<Integer> secondary = new ArrayList<>();\n        List<Integer> guttari = new ArrayList<>();\n\n        for (int i = 0; i < chairs.length; i++) {\n            char tmpChair = chairs[i];\n            if (tmpChair == EMPTY) {\n                if (chairs.length == 1) {\n                    primary.add(i);\n                } else if ((i == 0 && EMPTY == chairs[i + 1])\n                        || (i == chairs.length - 1 && EMPTY == chairs[i - 1])) {\n                    primary.add(i);\n                } else if ((i == 0 && EMPTY != chairs[i + 1])\n                        || (i == chairs.length - 1 && EMPTY != chairs[i - 1])) {\n                    secondary.add(i);\n                } else {\n                    if (EMPTY == chairs[i + 1] && EMPTY == chairs[i - 1]) {\n                        primary.add(i);\n                    } else if (EMPTY == chairs[i + 1] || EMPTY == chairs[i - 1]) {\n                        secondary.add(i);\n                    }\n                }\n                guttari.add(i);\n            }\n        }\n\n        int result = -1;\n        if (0 < primary.size()) {\n            result = getChair(primary);\n        } else if (0 < secondary.size()) {\n            result = getChair(secondary);\n        } else if (0 < guttari.size()) {\n            result = getChair(guttari);\n        }\n        return result;\n    }\n\n    protected int awayChair(final char[] chairs, final char c) {\n        for (int i = 0; i < chairs.length; i++) {\n            if (chairs[i] == Character.toUpperCase(c)) {\n                return i;\n            }\n        }\n        return -1;\n    }\n\n    protected int getChair(final List<Integer> chairs) {\n        int min = chairs.get(0);\n        for (Integer each : chairs) {\n            if (each < min) {\n                min = each;\n            }\n        }\n        return min;\n    }\n\n    protected char[] getInOut(final String string) {\n        char[] result = new char[string.length()];\n        for (int i = 0; i < string.length(); i++) {\n            result[i] = string.charAt(i);\n        }\n        return result;\n    }\n\n    @Test\n    public void testSelectChairs() throws Exception {\n        /* 1 */test(\"6:NABEbBZn\", \"-ZAB-E\");\n        /* 2 */test(\"1:A\", \"A\");\n        /* 3 */test(\"1:Aa\", \"-\");\n        /* 4 */test(\"2:AB\", \"AB\");\n        /* 5 */test(\"2:AaB\", \"B-\");\n        /* 6 */test(\"2:AZa\", \"-Z\");\n        /* 7 */test(\"2:AZz\", \"A-\");\n        /* 8 */test(\"3:ABC\", \"ACB\");\n        /* 9 */test(\"3:ABCa\", \"-CB\");\n        /* 10 */test(\"4:ABCD\", \"ADBC\");\n        /* 11 */test(\"4:ABCbBD\", \"ABDC\");\n        /* 12 */test(\"4:ABCDabcA\", \"-D-A\");\n        /* 13 */test(\"5:NEXUS\", \"NUESX\");\n        /* 14 */test(\"5:ZYQMyqY\", \"ZM-Y-\");\n        /* 15 */test(\"5:ABCDbdXYc\", \"AYX--\");\n        /* 16 */test(\"6:FUTSAL\", \"FAULTS\");\n        /* 17 */test(\"6:ABCDEbcBC\", \"AECB-D\");\n        /* 18 */test(\"7:FMTOWNS\", \"FWMNTSO\");\n        /* 19 */test(\"7:ABCDEFGabcdfXYZ\", \"YE-X-GZ\");\n        /* 20 */test(\"10:ABCDEFGHIJ\", \"AGBHCIDJEF\");\n    }\n\n    protected void test(String in, String out) {\n        SelectChair sc = new SelectChair();\n        assertEquals(out, sc.solve(in));\n    }\n}\n\n\n\n```java:SelectChair.java\nimport static org.junit.Assert.assertEquals;\nimport java.util.ArrayList;\nimport java.util.List;\nimport org.junit.Test;\n\npublic class SelectChair {\n\n\tprotected final char EMPTY = '-';\n\n\tpublic String solve(final String string) {\n\t\tString[] split = string.split(\":\");\n\t\tint chairNum = Integer.valueOf(split[0]);\n\t\tchar[] chairs = initChairs(chairNum);\n\n\t\tchar[] inOut = getInOut(split[1]);\n\t\tfor (char each : inOut) {\n\t\t\tif (Character.isUpperCase(each)) {\n\t\t\t\tint recomended = searchChair(chairs);\n\t\t\t\tchairs[recomended] = each;\n\t\t\t} else {\n\t\t\t\tint awayIndex = awayChair(chairs, each);\n\t\t\t\tchairs[awayIndex] = EMPTY;\n\t\t\t}\n\t\t}\n\t\tString result = \"\";\n\t\tfor (char each : chairs) {\n\t\t\tresult += each;\n\t\t}\n\t\treturn result;\n\t}\n\n\tprotected char[] initChairs(final int chairNum) {\n\t\tchar[] result = new char[chairNum];\n\t\tfor (int i = 0; i < result.length; i++) {\n\t\t\tresult[i] = EMPTY;\n\t\t}\n\t\treturn result;\n\t}\n\n\tprotected int searchChair(final char[] chairs) {\n\t\tList<Integer> primary = new ArrayList<>();\n\t\tList<Integer> secondary = new ArrayList<>();\n\t\tList<Integer> guttari = new ArrayList<>();\n\n\t\tfor (int i = 0; i < chairs.length; i++) {\n\t\t\tchar tmpChair = chairs[i];\n\t\t\tif (tmpChair == EMPTY) {\n\t\t\t\tif (chairs.length == 1) {\n\t\t\t\t\tprimary.add(i);\n\t\t\t\t} else if ((i == 0 && EMPTY == chairs[i + 1])\n\t\t\t\t\t\t|| (i == chairs.length - 1 && EMPTY == chairs[i - 1])) {\n\t\t\t\t\tprimary.add(i);\n\t\t\t\t} else if ((i == 0 && EMPTY != chairs[i + 1])\n\t\t\t\t\t\t|| (i == chairs.length - 1 && EMPTY != chairs[i - 1])) {\n\t\t\t\t\tsecondary.add(i);\n\t\t\t\t} else {\n\t\t\t\t\tif (EMPTY == chairs[i + 1] && EMPTY == chairs[i - 1]) {\n\t\t\t\t\t\tprimary.add(i);\n\t\t\t\t\t} else if (EMPTY == chairs[i + 1] || EMPTY == chairs[i - 1]) {\n\t\t\t\t\t\tsecondary.add(i);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tguttari.add(i);\n\t\t\t}\n\t\t}\n\n\t\tint result = -1;\n\t\tif (0 < primary.size()) {\n\t\t\tresult = getChair(primary);\n\t\t} else if (0 < secondary.size()) {\n\t\t\tresult = getChair(secondary);\n\t\t} else if (0 < guttari.size()) {\n\t\t\tresult = getChair(guttari);\n\t\t}\n\t\treturn result;\n\t}\n\n\tprotected int awayChair(final char[] chairs, final char c) {\n\t\tfor (int i = 0; i < chairs.length; i++) {\n\t\t\tif (chairs[i] == Character.toUpperCase(c)) {\n\t\t\t\treturn i;\n\t\t\t}\n\t\t}\n\t\treturn -1;\n\t}\n\n\tprotected int getChair(final List<Integer> chairs) {\n\t\tint min = chairs.get(0);\n\t\tfor (Integer each : chairs) {\n\t\t\tif (each < min) {\n\t\t\t\tmin = each;\n\t\t\t}\n\t\t}\n\t\treturn min;\n\t}\n\n\tprotected char[] getInOut(final String string) {\n\t\tchar[] result = new char[string.length()];\n\t\tfor (int i = 0; i < string.length(); i++) {\n\t\t\tresult[i] = string.charAt(i);\n\t\t}\n\t\treturn result;\n\t}\n\n\t@Test\n\tpublic void testSelectChairs() throws Exception {\n\t\t/* 1 */test(\"6:NABEbBZn\", \"-ZAB-E\");\n\t\t/* 2 */test(\"1:A\", \"A\");\n\t\t/* 3 */test(\"1:Aa\", \"-\");\n\t\t/* 4 */test(\"2:AB\", \"AB\");\n\t\t/* 5 */test(\"2:AaB\", \"B-\");\n\t\t/* 6 */test(\"2:AZa\", \"-Z\");\n\t\t/* 7 */test(\"2:AZz\", \"A-\");\n\t\t/* 8 */test(\"3:ABC\", \"ACB\");\n\t\t/* 9 */test(\"3:ABCa\", \"-CB\");\n\t\t/* 10 */test(\"4:ABCD\", \"ADBC\");\n\t\t/* 11 */test(\"4:ABCbBD\", \"ABDC\");\n\t\t/* 12 */test(\"4:ABCDabcA\", \"-D-A\");\n\t\t/* 13 */test(\"5:NEXUS\", \"NUESX\");\n\t\t/* 14 */test(\"5:ZYQMyqY\", \"ZM-Y-\");\n\t\t/* 15 */test(\"5:ABCDbdXYc\", \"AYX--\");\n\t\t/* 16 */test(\"6:FUTSAL\", \"FAULTS\");\n\t\t/* 17 */test(\"6:ABCDEbcBC\", \"AECB-D\");\n\t\t/* 18 */test(\"7:FMTOWNS\", \"FWMNTSO\");\n\t\t/* 19 */test(\"7:ABCDEFGabcdfXYZ\", \"YE-X-GZ\");\n\t\t/* 20 */test(\"10:ABCDEFGHIJ\", \"AGBHCIDJEF\");\n\t}\n\n\tprotected void test(String in, String out) {\n\t\tSelectChair sc = new SelectChair();\n\t\tassertEquals(out, sc.solve(in));\n\t}\n}\n```\n", "tags": ["\u3069\u3046\u66f8\u304f", "yhpg"]}