{"tags": ["Java", "spring", "spring-session1.0.0.RELEASE"], "context": " More than 1 year has passed since last update.Tomcat\u30bb\u30c3\u30b7\u30e7\u30f3\u3092\u5916\u90e8\u30b9\u30c8\u30ec\u30fc\u30b8\u306b\u7f6e\u304d\u63db\u3048\u308b\u5834\u5408\u306b\u3069\u3046\u3057\u3066\u3082Tomcat\u5074\u3067\u96e3\u3057\u3044\u8a2d\u5b9a\u3092\u3057\u305f\u308a\u3001\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u914d\u7f6e\u3057\u305f\u308a\u3067\u5104\u52ab\u306b\u306a\u308b\u3053\u3068\u304c\u591a\u304b\u3063\u305f\u3002\npom.xml\u306bdependency\u3092\u8ffd\u52a0\u3057\u305f\u3089\u7f6e\u304d\u63db\u308f\u308b\u304f\u3089\u3044\u306e\u7c21\u5358\u306a\u3082\u306e\u3067\u3001\u4e14\u3064\u30bb\u30c3\u30b7\u30e7\u30f3\u30b9\u30c8\u30ec\u30fc\u30b8\u304cRedis\u3068\u306a\u308b\u3082\u306e\u3092\u63a2\u3057\u3066\u3044\u305f\u3002\n\u305d\u3093\u306a\u3068\u3053\u308d\u306bSpring\u306e\u30ea\u30ea\u30fc\u30b9\u30d6\u30ed\u30b0\u3067\u4eca\u6708\u521d\u3081\u306b\u3053\u3093\u306a\u8a18\u4e8b\u3092\u898b\u3064\u3051\u305f\u3002\nSpring Session 1.0.0.RELEASE\n\nTODO (2015/04/14\u8ffd\u8a18)\n\u3042\u3068\u3067\u307e\u3068\u3081\u308b\n\nCookieHttpSessionStrategy\u306b\u30d0\u30b0\u304c\u3042\u308b\u305f\u3081@EnableRedisHttpSession#maxInactiveIntervalInSeconds\u306e\u5024\u304c\u53cd\u6620\u3055\u308c\u306a\u3044 \u2192 https://github.com/spring-projects/spring-session/issues/106 \nSessionAttribute\u3067\u4fdd\u5b58\u3057\u305f\u30c7\u30fc\u30bf\u69cb\u9020\u304c\u5909\u308f\u3063\u305f\u6642\u306e\u5bfe\u5fdc\u65b9\u6cd5\u306e\u8a18\u8ff0\n\n\nSpring-Session\u3092\u4f7f\u3063\u3066\u307f\u3066\u306e\u7d50\u8ad6\n\u5148\u306b\u7d50\u8ad6\u8a00\u3063\u3061\u3083\u3044\u307e\u3059\u3002\n\u4ee5\u4e0b\u3001\u554f\u984c\u306a\u3051\u308c\u3070\u4f7f\u3048\u307e\u3059\u3002\n\nSession\u306e\u5f35\u308a\u66ff\u3048\n\u3067\u304d\u307e\u305b\u3093\u3002\nsession.invalidate();\nsession.getSession(true);\n\n\u3063\u3066\u540c\u3058\u30ea\u30af\u30a8\u30b9\u30c8\u5185\u3067\u3084\u3063\u3066\u3082\u751f\u6210\u3055\u308c\u305fJSESSIONID\u306fCookie\u306b\u8a2d\u5b9a\u3055\u308c\u306a\u304b\u3063\u305f\u3002\n\u7834\u68c4\u3055\u308c\u305fJSESSIONID\u304c\u6b21\u306e\u30ea\u30af\u30a8\u30b9\u30c8\u3067\u8a2d\u5b9a\u3055\u308c\u3066\u305f\u304b\u3089\u30bb\u30c3\u30b7\u30e7\u30f3\u30a8\u30e9\u30fc\u306b\u306a\u308b\u3002\n\nSessionAttribute\u306e\u66f8\u304d\u63db\u3048\n\nrequest1\nUser user = (User) session.getAttribute(\"sessionUser\");\nSystem.out.println(user.getName()); // John\nuser.setName(\"Emily\");\n\n\n\nrequest2\nUser user = (User) session.getAttribute(\"sessionUser\");\nSystem.out.println(user.getName()); // John\n\n\nTomcat\u30c7\u30d5\u30a9\u30eb\u30c8\u306eHttpSession\u5b9f\u88c5\u306fEmily\u306b\u306a\u308b\u3002\n\nSpring Session\u3068\u306f\n\u3053\u3093\u306a\u3053\u3068\u304c\u3067\u304d\u308b\u3089\u3057\u3044\u3002\n\n\nAPI and implementations (i.e. Redis) for managing a user\u2019s session\nHttpSession - allows replacing the HttpSession in an application container (i.e. Tomcat) neutral way. Additional features include:\nClustered Sessions - Spring Session makes it trivial to support clustered sessions without being tied to an application container specific solution.\nMultiple Browser Sessions - Spring Session supports managing multiple users\u2019 sessions in a single browser instance (i.e. multiple authenticated accounts similar to Google).\nRESTful APIs - Spring Session allows providing session ids in headers to work with RESTful APIs\nWebSocket - provides the ability to keep the HttpSession alive when receiving WebSocket messages\n\n\n\u65e5\u672c\u8a9e\u8a33\u3060\u3068\u3053\u3046\u306a\u308b\u3002\uff08\u9069\u5f53\u306b\u7ffb\u8a33\u3057\u305f\u306e\u3067\u60aa\u3057\u304b\u3089\u305a\u3002\u5185\u5bb9\u306f\u9593\u9055\u3063\u3066\u306a\u3044\u306f\u305a\u3002\uff09\n\n\u30e6\u30fc\u30b6\u30fc\u30bb\u30c3\u30b7\u30e7\u30f3\u3092\u7ba1\u7406\u3059\u308bAPI\u3068\u305d\u306e\u5b9f\u88c5\uff08\u4f8b\u3048\u3070Redis\uff09\u3092\u63d0\u4f9b\u3059\u308b\u3002\nHttpSession - \u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u30b3\u30f3\u30c6\u30ca\uff08\u4f8b\u3048\u3070Tomcat\uff09\u306eHttpSession\u306b\u4ef2\u4ecb\u3059\u308b\u5f62\u3067\u305d\u306e\u6a5f\u80fd\u3092\u7f6e\u304d\u63db\u3048\u308b\u3002\u3055\u3089\u306b\u8ffd\u52a0\u3059\u308b\u6a5f\u80fd\u306f\u6b21\u306e\u901a\u308a\u3002\n\u30af\u30e9\u30b9\u30bf\u30fc\u30bb\u30c3\u30b7\u30e7\u30f3 - \u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u30b3\u30f3\u30c6\u30ca\u56fa\u6709\u306e\u554f\u984c\u306b\u7e1b\u3089\u308c\u308b\u3053\u3068\u306a\u304f\u3001\u30af\u30e9\u30b9\u30bf\u30ea\u30f3\u30b0\u3055\u308c\u305f\u30bb\u30c3\u30b7\u30e7\u30f3\u3092\u30b5\u30dd\u30fc\u30c8\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u308b\u3002\n\u8907\u6570\u30bb\u30c3\u30b7\u30e7\u30f3 - 1\u3064\u306e\u30d6\u30e9\u30a6\u30b6\u3067\u8907\u6570\u306e\u30e6\u30fc\u30b6\u30fc\u30bb\u30c3\u30b7\u30e7\u30f3\u3092\u7ba1\u7406\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u308b\u3002\uff08\u4f8b\u3048\u3070Google\u306e\u3088\u3046\u306a\u8907\u6570\u306e\u8a8d\u8a3c\u30a2\u30ab\u30a6\u30f3\u30c8\u304c\u5b58\u5728\u3059\u308b\u5834\u5408\u304c\u3053\u308c\u306b\u3042\u305f\u308b\u3002\uff09\nRESTful API - RESTful\u306aAPI\u3067\u3082\u52d5\u4f5c\u3059\u308b\u3088\u3046\u306b\u30bb\u30c3\u30b7\u30e7\u30f3ID\u3092HTTP\u30d8\u30c3\u30c0\u3067\u63d0\u4f9b\u3067\u304d\u308b\nWebSocket - WebSocket\u3067\u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u53d7\u3051\u53d6\u3063\u305f\u3068\u304d\u3082HttpSession\u3092\u6709\u52b9\u306b\u3057\u7d9a\u3051\u308b\u6a5f\u80fd\u3092\u63d0\u4f9b\u3059\u308b\n\n\u3089\u3057\u3044\u3002\uff11\u3064\u3081\u3068\uff12\u3064\u3081\u306e\u5185\u5bb9\u3067\u8a66\u3057\u3066\u307f\u305f\u3044\u3068\u601d\u3063\u305f\u3002\n\n\u65e2\u5b58\u306eWeb\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u306b\u5c0e\u5165\nSpring\u3092\u5229\u7528\u3057\u3066\u3044\u308b\u65e2\u5b58\u306eWeb\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u306b\u5165\u308c\u3066\u307f\u305f\u3002\n\npom.xml\n<dependency>\n  <groupId>org.springframework.session</groupId>\n  <artifactId>spring-session-data-redis</artifactId>\n  <version>1.0.0.RELEASE</version>\n</dependency>\n\n\n\nweb.xml\n<filter>\n  <filter-name>springSessionRepositoryFilter</filter-name>\n  <filter-class>org.springframework.web.filter.DelegatingFilterProxy</filter-class>\n</filter>\n<filter-mapping>\n  <filter-name>springSessionRepositoryFilter</filter-name>\n  <url-pattern>/*</url-pattern>\n</filter-mapping>\n\n\n\nRedisConfig.java\n@EnableRedisHttpSession(maxInactiveIntervalInSeconds = 180) // 3\u5206\npublic class RedisHttpSessionConfig {\n\n  // XML\u3067\u5b9a\u7fa9\u6e08\u307f\u3067\u4ed6\u76ee\u7684\u306eRedisConnectionFactory\u3068\n  // \u63a5\u7d9a\u5148\u3092\u5206\u3051\u308b\u3068\u304d\u306e\u5bfe\u5fdc\u3068\u3057\u3066\u540d\u524d\u4ed8\u304d\u3067Inject\u3059\u308b\n  @Resource(name = \"session.redisConnectionFactory\")\n  private RedisConnectionFactory redisConnectionFactory;\n\n  @Bean\n  public RedisConnectionFactory connectionFactory() {\n    return redisConnectionFactory;\n  }\n\n  // \u30bb\u30c3\u30b7\u30e7\u30f3ID\u3092Cookie\u3067\u7ba1\u7406\u3059\u308b\u8a2d\u5b9a\n  @Bean\n  public CookieHttpSessionStrategy httpSessionStrategy() {\n    CookieHttpSessionStrategy httpSessionStrategy = new CookieHttpSessionStrategy();\n    httpSessionStrategy.setCookieName(\"JSESSIONID\");\n\n    return httpSessionStrategy;\n  }\n}\n\n\nRedisHttpSessionConfig.java\u306f\u81ea\u524d\u3067\u7528\u610f\u3002\u30b3\u30f3\u30dd\u30fc\u30cd\u30f3\u30c8\u30b9\u30ad\u30e3\u30f3\u5bfe\u8c61\u306e\u30d1\u30c3\u30b1\u30fc\u30b8\u4ee5\u4e0b\u306b\u914d\u7f6e\u3057\u3066\u304a\u304f\u3002\nSpring\u306e\u8a2d\u5b9a\u30d5\u30a1\u30a4\u30eb\u3092XML\u3067\u7ba1\u7406\u3057\u3066\u3044\u305f\u3051\u3069@EnableRedisHttpSession\u304c\u8272\u3005\u3084\u3063\u3066\u304f\u308c\u308b\u304b\u3089\u3053\u3053\u3060\u3051\u306f\u5927\u4eba\u3057\u304fJavaConfig\u306b\u3057\u3066\u304a\u304f\u3002\n\u4f59\u8ac7\u3060\u3051\u3069\u3053\u3046\u3044\u3046\u66f8\u304d\u65b9\u3082\u3067\u304d\u308b\u3002\n  // @Resource(name = \"session.redisConnectionFactory\")\n  // private RedisConnectionFactory redisConnectionFactory;\n\n  @Bean\n  public RedisConnectionFactory connectionFactory(@Qualifier(\"session.redisConnectionFactory\") RedisConnectionFactory redisConnectionFactory) {\n    return redisConnectionFactory;\n  }\n\n\u8a2d\u5b9a\u7d42\u308f\u308a\u3002\u3053\u308c\u3060\u3051\u3067Session\u7ba1\u7406\u304c\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u30b3\u30f3\u30c6\u30ca\u304b\u3089Spring-Session\u306eRedis\u5b9f\u88c5\u306b\u7f6e\u304d\u63db\u308f\u3063\u305f\u3002\nTomcat\u30bb\u30c3\u30b7\u30e7\u30f3\u3092\u5916\u90e8\u30b9\u30c8\u30ec\u30fc\u30b8\u306b\u7f6e\u304d\u63db\u3048\u308b\u5834\u5408\u306b\u3069\u3046\u3057\u3066\u3082Tomcat\u5074\u3067\u96e3\u3057\u3044\u8a2d\u5b9a\u3092\u3057\u305f\u308a\u3001\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u914d\u7f6e\u3057\u305f\u308a\u3067\u5104\u52ab\u306b\u306a\u308b\u3053\u3068\u304c\u591a\u304b\u3063\u305f\u3002\n\npom.xml\u306bdependency\u3092\u8ffd\u52a0\u3057\u305f\u3089\u7f6e\u304d\u63db\u308f\u308b\u304f\u3089\u3044\u306e\u7c21\u5358\u306a\u3082\u306e\u3067\u3001\u4e14\u3064\u30bb\u30c3\u30b7\u30e7\u30f3\u30b9\u30c8\u30ec\u30fc\u30b8\u304cRedis\u3068\u306a\u308b\u3082\u306e\u3092\u63a2\u3057\u3066\u3044\u305f\u3002\n\n\u305d\u3093\u306a\u3068\u3053\u308d\u306bSpring\u306e\u30ea\u30ea\u30fc\u30b9\u30d6\u30ed\u30b0\u3067\u4eca\u6708\u521d\u3081\u306b\u3053\u3093\u306a\u8a18\u4e8b\u3092\u898b\u3064\u3051\u305f\u3002\n[Spring Session 1.0.0.RELEASE](http://spring.io/blog/2015/01/08/spring-session-1-0-0-release)\n\n## TODO (2015/04/14\u8ffd\u8a18)\n\n*\u3042\u3068\u3067\u307e\u3068\u3081\u308b*\n\n* CookieHttpSessionStrategy\u306b\u30d0\u30b0\u304c\u3042\u308b\u305f\u3081`@EnableRedisHttpSession#maxInactiveIntervalInSeconds`\u306e\u5024\u304c\u53cd\u6620\u3055\u308c\u306a\u3044 \u2192 https://github.com/spring-projects/spring-session/issues/106 \n* SessionAttribute\u3067\u4fdd\u5b58\u3057\u305f\u30c7\u30fc\u30bf\u69cb\u9020\u304c\u5909\u308f\u3063\u305f\u6642\u306e\u5bfe\u5fdc\u65b9\u6cd5\u306e\u8a18\u8ff0\n\n## Spring-Session\u3092\u4f7f\u3063\u3066\u307f\u3066\u306e\u7d50\u8ad6\n\n\u5148\u306b\u7d50\u8ad6\u8a00\u3063\u3061\u3083\u3044\u307e\u3059\u3002\n\u4ee5\u4e0b\u3001\u554f\u984c\u306a\u3051\u308c\u3070\u4f7f\u3048\u307e\u3059\u3002\n\n### Session\u306e\u5f35\u308a\u66ff\u3048\n\n\u3067\u304d\u307e\u305b\u3093\u3002\n\n```java\nsession.invalidate();\nsession.getSession(true);\n```\n\n\u3063\u3066\u540c\u3058\u30ea\u30af\u30a8\u30b9\u30c8\u5185\u3067\u3084\u3063\u3066\u3082\u751f\u6210\u3055\u308c\u305fJSESSIONID\u306fCookie\u306b\u8a2d\u5b9a\u3055\u308c\u306a\u304b\u3063\u305f\u3002\n\u7834\u68c4\u3055\u308c\u305fJSESSIONID\u304c\u6b21\u306e\u30ea\u30af\u30a8\u30b9\u30c8\u3067\u8a2d\u5b9a\u3055\u308c\u3066\u305f\u304b\u3089\u30bb\u30c3\u30b7\u30e7\u30f3\u30a8\u30e9\u30fc\u306b\u306a\u308b\u3002\n\n### SessionAttribute\u306e\u66f8\u304d\u63db\u3048\n\n```java:request1\nUser user = (User) session.getAttribute(\"sessionUser\");\nSystem.out.println(user.getName()); // John\nuser.setName(\"Emily\");\n```\n\n```java:request2\nUser user = (User) session.getAttribute(\"sessionUser\");\nSystem.out.println(user.getName()); // John\n```\n\nTomcat\u30c7\u30d5\u30a9\u30eb\u30c8\u306eHttpSession\u5b9f\u88c5\u306f`Emily`\u306b\u306a\u308b\u3002\n\n## Spring Session\u3068\u306f\n\n\u3053\u3093\u306a\u3053\u3068\u304c\u3067\u304d\u308b\u3089\u3057\u3044\u3002\n\n> * API and implementations (i.e. Redis) for managing a user\u2019s session\n> * HttpSession - allows replacing the HttpSession in an application container (i.e. Tomcat) neutral way. Additional features include:\n> * Clustered Sessions - Spring Session makes it trivial to support clustered sessions without being tied to an application container specific solution.\n> * Multiple Browser Sessions - Spring Session supports managing multiple users\u2019 sessions in a single browser instance (i.e. multiple authenticated accounts similar to Google).\n> * RESTful APIs - Spring Session allows providing session ids in headers to work with RESTful APIs\n> * WebSocket - provides the ability to keep the HttpSession alive when receiving WebSocket messages\n\n\u65e5\u672c\u8a9e\u8a33\u3060\u3068\u3053\u3046\u306a\u308b\u3002\uff08\u9069\u5f53\u306b\u7ffb\u8a33\u3057\u305f\u306e\u3067\u60aa\u3057\u304b\u3089\u305a\u3002\u5185\u5bb9\u306f\u9593\u9055\u3063\u3066\u306a\u3044\u306f\u305a\u3002\uff09\n\n* \u30e6\u30fc\u30b6\u30fc\u30bb\u30c3\u30b7\u30e7\u30f3\u3092\u7ba1\u7406\u3059\u308bAPI\u3068\u305d\u306e\u5b9f\u88c5\uff08\u4f8b\u3048\u3070Redis\uff09\u3092\u63d0\u4f9b\u3059\u308b\u3002\n* HttpSession - \u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u30b3\u30f3\u30c6\u30ca\uff08\u4f8b\u3048\u3070Tomcat\uff09\u306eHttpSession\u306b\u4ef2\u4ecb\u3059\u308b\u5f62\u3067\u305d\u306e\u6a5f\u80fd\u3092\u7f6e\u304d\u63db\u3048\u308b\u3002\u3055\u3089\u306b\u8ffd\u52a0\u3059\u308b\u6a5f\u80fd\u306f\u6b21\u306e\u901a\u308a\u3002\n* \u30af\u30e9\u30b9\u30bf\u30fc\u30bb\u30c3\u30b7\u30e7\u30f3 - \u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u30b3\u30f3\u30c6\u30ca\u56fa\u6709\u306e\u554f\u984c\u306b\u7e1b\u3089\u308c\u308b\u3053\u3068\u306a\u304f\u3001\u30af\u30e9\u30b9\u30bf\u30ea\u30f3\u30b0\u3055\u308c\u305f\u30bb\u30c3\u30b7\u30e7\u30f3\u3092\u30b5\u30dd\u30fc\u30c8\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u308b\u3002\n* \u8907\u6570\u30bb\u30c3\u30b7\u30e7\u30f3 - 1\u3064\u306e\u30d6\u30e9\u30a6\u30b6\u3067\u8907\u6570\u306e\u30e6\u30fc\u30b6\u30fc\u30bb\u30c3\u30b7\u30e7\u30f3\u3092\u7ba1\u7406\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u308b\u3002\uff08\u4f8b\u3048\u3070Google\u306e\u3088\u3046\u306a\u8907\u6570\u306e\u8a8d\u8a3c\u30a2\u30ab\u30a6\u30f3\u30c8\u304c\u5b58\u5728\u3059\u308b\u5834\u5408\u304c\u3053\u308c\u306b\u3042\u305f\u308b\u3002\uff09\n* RESTful API - RESTful\u306aAPI\u3067\u3082\u52d5\u4f5c\u3059\u308b\u3088\u3046\u306b\u30bb\u30c3\u30b7\u30e7\u30f3ID\u3092HTTP\u30d8\u30c3\u30c0\u3067\u63d0\u4f9b\u3067\u304d\u308b\n* WebSocket - WebSocket\u3067\u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u53d7\u3051\u53d6\u3063\u305f\u3068\u304d\u3082HttpSession\u3092\u6709\u52b9\u306b\u3057\u7d9a\u3051\u308b\u6a5f\u80fd\u3092\u63d0\u4f9b\u3059\u308b\n\n\u3089\u3057\u3044\u3002\uff11\u3064\u3081\u3068\uff12\u3064\u3081\u306e\u5185\u5bb9\u3067\u8a66\u3057\u3066\u307f\u305f\u3044\u3068\u601d\u3063\u305f\u3002\n\n## \u65e2\u5b58\u306eWeb\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u306b\u5c0e\u5165\n\nSpring\u3092\u5229\u7528\u3057\u3066\u3044\u308b\u65e2\u5b58\u306eWeb\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u306b\u5165\u308c\u3066\u307f\u305f\u3002\n\n```xml:pom.xml\n<dependency>\n  <groupId>org.springframework.session</groupId>\n  <artifactId>spring-session-data-redis</artifactId>\n  <version>1.0.0.RELEASE</version>\n</dependency>\n```\n\n```xml:web.xml\n<filter>\n  <filter-name>springSessionRepositoryFilter</filter-name>\n  <filter-class>org.springframework.web.filter.DelegatingFilterProxy</filter-class>\n</filter>\n<filter-mapping>\n  <filter-name>springSessionRepositoryFilter</filter-name>\n  <url-pattern>/*</url-pattern>\n</filter-mapping>\n```\n\n```java:RedisConfig.java\n@EnableRedisHttpSession(maxInactiveIntervalInSeconds = 180) // 3\u5206\npublic class RedisHttpSessionConfig {\n\n  // XML\u3067\u5b9a\u7fa9\u6e08\u307f\u3067\u4ed6\u76ee\u7684\u306eRedisConnectionFactory\u3068\n  // \u63a5\u7d9a\u5148\u3092\u5206\u3051\u308b\u3068\u304d\u306e\u5bfe\u5fdc\u3068\u3057\u3066\u540d\u524d\u4ed8\u304d\u3067Inject\u3059\u308b\n  @Resource(name = \"session.redisConnectionFactory\")\n  private RedisConnectionFactory redisConnectionFactory;\n\n  @Bean\n  public RedisConnectionFactory connectionFactory() {\n    return redisConnectionFactory;\n  }\n\n  // \u30bb\u30c3\u30b7\u30e7\u30f3ID\u3092Cookie\u3067\u7ba1\u7406\u3059\u308b\u8a2d\u5b9a\n  @Bean\n  public CookieHttpSessionStrategy httpSessionStrategy() {\n    CookieHttpSessionStrategy httpSessionStrategy = new CookieHttpSessionStrategy();\n    httpSessionStrategy.setCookieName(\"JSESSIONID\");\n\n    return httpSessionStrategy;\n  }\n}\n```\n`RedisHttpSessionConfig.java`\u306f\u81ea\u524d\u3067\u7528\u610f\u3002\u30b3\u30f3\u30dd\u30fc\u30cd\u30f3\u30c8\u30b9\u30ad\u30e3\u30f3\u5bfe\u8c61\u306e\u30d1\u30c3\u30b1\u30fc\u30b8\u4ee5\u4e0b\u306b\u914d\u7f6e\u3057\u3066\u304a\u304f\u3002\nSpring\u306e\u8a2d\u5b9a\u30d5\u30a1\u30a4\u30eb\u3092XML\u3067\u7ba1\u7406\u3057\u3066\u3044\u305f\u3051\u3069`@EnableRedisHttpSession`\u304c\u8272\u3005\u3084\u3063\u3066\u304f\u308c\u308b\u304b\u3089\u3053\u3053\u3060\u3051\u306f\u5927\u4eba\u3057\u304fJavaConfig\u306b\u3057\u3066\u304a\u304f\u3002\n\n\u4f59\u8ac7\u3060\u3051\u3069\u3053\u3046\u3044\u3046\u66f8\u304d\u65b9\u3082\u3067\u304d\u308b\u3002\n\n```java\n  // @Resource(name = \"session.redisConnectionFactory\")\n  // private RedisConnectionFactory redisConnectionFactory;\n\n  @Bean\n  public RedisConnectionFactory connectionFactory(@Qualifier(\"session.redisConnectionFactory\") RedisConnectionFactory redisConnectionFactory) {\n    return redisConnectionFactory;\n  }\n```\n\n\u8a2d\u5b9a\u7d42\u308f\u308a\u3002\u3053\u308c\u3060\u3051\u3067Session\u7ba1\u7406\u304c\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u30b3\u30f3\u30c6\u30ca\u304b\u3089Spring-Session\u306eRedis\u5b9f\u88c5\u306b\u7f6e\u304d\u63db\u308f\u3063\u305f\u3002\n"}