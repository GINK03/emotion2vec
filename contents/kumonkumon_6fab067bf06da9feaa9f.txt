{"context": "(\u76ee\u6b21\u306f\u3053\u3061\u3089)\n\n\u306f\u3058\u3081\u306b\n\u524d\u56de\u306e\u8a18\u4e8b\u3067\u306f\u3001\u30d5\u30a3\u30eb\u30bf\u3092\u56fa\u5b9a\u3057\u305f\u7573\u307f\u8fbc\u307f\u30cb\u30e5\u30fc\u30e9\u30eb\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u306b\u3001\u30d7\u30fc\u30ea\u30f3\u30b0\u5c64\u3092\u8ffd\u52a0\u3057\u305f\u3002\u4eca\u56de\u306f\u3001\u3053\u308c\u3092\u3055\u3089\u306b\u62e1\u5f35\u3057\u3066\u3001\u4e00\u822c\u7684\u306a\uff08\u30d5\u30a3\u30eb\u30bf\u3082\u5b66\u7fd2\u3059\u308b\uff09\u7573\u307f\u8fbc\u307f\u30cb\u30e5\u30fc\u30e9\u30eb\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u3078\u3068\u3064\u306a\u3052\u3066\u3044\u3053\u3046\u304b\u3068\u3002\n\n\u62e1\u5f35\uff1a\u30c9\u30ed\u30c3\u30d7\u30a2\u30a6\u30c8\u5c64\uff08dropout layer\uff09\u306e\u8ffd\u52a0\n\u30cb\u30e5\u30fc\u30e9\u30eb\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u306b\u9650\u3089\u305a\u3001\u6a5f\u68b0\u5b66\u7fd2\u3067\u306f\u4e00\u822c\u7684\u306b\u3001\u30e2\u30c7\u30eb\u304c\u8907\u96d1\u3067\u3042\u308c\u3070\u3042\u308b\u307b\u3069\u30d2\u30e7\u73fe\u80fd\u529b\u306f\u9ad8\u3044\u304c\u3001\u904e\u5b66\u7fd2\uff08over fitting\uff09\u306b\u9665\u308a\u3084\u3059\u3044\u3002\u904e\u5b66\u7fd2\u3068\u306f\u3001\u5b66\u7fd2\u30c7\u30fc\u30bf\u7528\u306b\u30d1\u30e9\u30e1\u30fc\u30bf\u8abf\u6574\u3055\u308c\u3066\u3057\u307e\u3044\u3001\u672c\u6765\u8b58\u5225\u3057\u305f\u3044\u672a\u77e5\u306e\u30c7\u30fc\u30bf\u306b\u5bfe\u3057\u3066\u306e\u6027\u80fd\u304c\u60aa\u304f\u306a\u3063\u3066\u3057\u307e\u3046\u3053\u3068\u3002\n\u30c7\u30a3\u30fc\u30d7\u30cb\u30e5\u30fc\u30e9\u30eb\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u3084\u30c7\u30a3\u30fc\u30d7\u30e9\u30fc\u30cb\u30f3\u30b0\u3067\u306f\u3001\u30e2\u30c7\u30eb\u304c\u8907\u96d1\u306b\u306a\u308b\u306e\u3067\u904e\u5b66\u7fd2\u306e\u8ab2\u984c\u304c\u3064\u304d\u307e\u3068\u3046\u3002\u3053\u308c\u306f\u30cb\u30e5\u30fc\u30e9\u30eb\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u304c\u51ac\u306e\u6642\u4ee3\u306b\u5165\u3063\u305f\u7406\u7531\u306e\u4e00\u3064\u3002\n\u3067\u3001\u904e\u5b66\u7fd2\u306b\u5bfe\u3057\u3066\u52b9\u679c\u304c\u3042\u308b\u3068\u3055\u308c\u3066\u3044\u308b\u306e\u304c\u3001\u30c9\u30ed\u30c3\u30d7\u30a2\u30a6\u30c8\u3002\u3053\u308c\u306f\u3001\u30d1\u30e9\u30e1\u30fc\u30bf\u306e\u5b66\u7fd2\u30d5\u30a7\u30fc\u30ba\u306b\u304a\u3044\u3066\u3001\u3042\u308b\u5c64\u3067\u305b\u3063\u304b\u304f\u62bd\u51fa\u3057\u305f\u60c5\u5831\u3092\u6b20\u843d\u3055\u305b\u308b\u3068\u3044\u3046\u5927\u80c6\u306a\u3082\u306e\u3002\u4f8b\u3048\u3070\u3001\u3042\u308b\u5c64\u3067100\u6b21\u5143\u306e\u7279\u5fb4\u30d9\u30af\u30c8\u30eb\u304c\u5f97\u3089\u308c\u305f\u3068\u3057\u3066\u3001\u305d\u306e\u3046\u3061\u306e50\u6b21\u5143\uff08\u30e9\u30f3\u30c0\u30e0\u62bd\u51fa\uff09\u306f\u306a\u304b\u3063\u305f\u3053\u3068\u306b\u3059\u308b\u3068\u3044\u3046\u3082\u306e\u3002\u3053\u308c\u306b\u3088\u3063\u3066\u30a2\u30f3\u30b5\u30f3\u30d6\u30eb\u5b66\u7fd2\uff08\u3044\u308d\u3044\u308d\u306a\u30d1\u30bf\u30fc\u30f3\u3067\u5b66\u7fd2\u3057\u3066\u305d\u306e\u5e73\u5747\u3092\u3068\u308b\u307f\u305f\u3044\u306a\uff09\u306e\u52b9\u679c\u304c\u3048\u3089\u308c\u308b\u3068\u306e\u3053\u3068\u3002\n\u3053\u3053\u3067\u306f\u3001\u5168\u7d50\u5408\u5c64\u306e\u5f8c\u308d\u306b\u5165\u308c\u308b\u3002\n\n\n\u30b3\u30fc\u30c9\nmnist_fixed_cnn\n\nmnist_fixed_cnn.py\nfrom helper import *\n\nIMAGE_WIDTH = 28\nIMAGE_HEIGHT = 28\nIMAGE_SIZE = IMAGE_WIDTH * IMAGE_HEIGHT\nCATEGORY_NUM = 10\nLEARNING_RATE = 0.01\nFILTER_NUM = 2\nBIAS_CONV = -0.1\nFEATURE_DIM = 1024\nKEEP_PROB = 0.5\nTRAINING_LOOP = 20000\nBATCH_SIZE = 100\nSUMMARY_DIR = 'log_fixed_cnn'\nSUMMARY_INTERVAL = 100\n\nmnist = input_data.read_data_sets('data', one_hot=True)\n\nwith tf.Graph().as_default():\n    with tf.name_scope('input'):\n        y_ = tf.placeholder(tf.float32, [None, CATEGORY_NUM], name='labels')\n        x = tf.placeholder(tf.float32, [None, IMAGE_SIZE], name='input_images')\n\n    with tf.name_scope('convolution'):\n        W_conv = prewitt_filter()\n        b_conv = tf.constant([BIAS_CONV] * FILTER_NUM, dtype = tf.float32, name='bias_conv')\n        x_image = tf.reshape(x, [-1, IMAGE_WIDTH, IMAGE_HEIGHT, 1])\n        h_conv = tf.nn.relu(tf.abs(conv2d(x_image, W_conv)) + b_conv)\n\n    with tf.name_scope('pooling'):\n        scale = 1 / 4.0\n        h_pool = max_pool_2x2(h_conv)\n\n    with tf.name_scope('fully-connected'):\n        W_fc = weight_variable([int(IMAGE_SIZE * scale * FILTER_NUM), FEATURE_DIM], name='weight_fc')\n        b_fc = bias_variable([FEATURE_DIM], name='bias_fc')\n        h_pool_flat = tf.reshape(h_pool, [-1, int(IMAGE_SIZE * scale * FILTER_NUM)])\n        h_fc = tf.nn.relu(tf.matmul(h_pool_flat, W_fc) + b_fc)\n\n    with tf.name_scope('dropout'):\n        keep_prob = tf.placeholder(tf.float32)\n        h_drop = tf.nn.dropout(h_fc, keep_prob)\n\n    with tf.name_scope('readout'):\n        W = weight_variable([FEATURE_DIM, CATEGORY_NUM], name='weight')\n        b = bias_variable([CATEGORY_NUM], name='bias')\n        y = tf.nn.softmax(tf.matmul(h_drop, W) + b)\n\n    with tf.name_scope('optimize'):\n        cross_entropy = tf.reduce_mean(-tf.reduce_sum(y_ * tf.log(y), reduction_indices=[1]))\n        train_step = tf.train.GradientDescentOptimizer(LEARNING_RATE).minimize(cross_entropy)\n\n    with tf.Session() as sess:\n        train_writer = tf.train.SummaryWriter(SUMMARY_DIR + '/train', sess.graph)\n        test_writer = tf.train.SummaryWriter(SUMMARY_DIR + '/test', sess.graph)\n\n        correct_prediction = tf.equal(tf.argmax(y, 1), tf.argmax(y_, 1))\n        accuracy = tf.reduce_mean(tf.cast(correct_prediction, tf.float32))\n        train_accuracy_summary = tf.scalar_summary('accuracy', accuracy)\n        test_accuracy_summary = tf.scalar_summary('accuracy', accuracy)\n\n        sess.run(tf.initialize_all_variables())\n        for i in range(TRAINING_LOOP + 1):\n            batch = mnist.train.next_batch(BATCH_SIZE)\n            sess.run(train_step, {x: batch[0], y_: batch[1], keep_prob: KEEP_PROB})\n\n            if i % SUMMARY_INTERVAL == 0:\n                print('step %d' % i)\n                summary = sess.run(tf.merge_summary([train_accuracy_summary]), {x: batch[0], y_: batch[1], keep_prob: 1.0})\n                train_writer.add_summary(summary, i)\n                summary = sess.run(tf.merge_summary([test_accuracy_summary]), {x: mnist.test.images, y_: mnist.test.labels, keep_prob: 1.0})\n                test_writer.add_summary(summary, i)\n\n\n\n\u30b3\u30fc\u30c9\u306e\u8aac\u660e\n\u5909\u66f4\u70b9\u3092\u3002\n\n\u30c9\u30ed\u30c3\u30d7\u30a2\u30a6\u30c8\u5c64\n\u8ffd\u52a0\u3055\u308c\u305f\u5c64\u3002\n    with tf.name_scope('dropout'):\n        keep_prob = tf.placeholder(tf.float32)\n        h_drop = tf.nn.dropout(h_fc, keep_prob)\n\n\n\u51fa\u529b\u5c64\n\u5168\u7d50\u5408\u5c64\u306e\u51fa\u529b\u304b\u3089\u3001\u30c9\u30ed\u30c3\u30d7\u30a2\u30a6\u30c8\u5c64\u306e\u51fa\u529b\u3092\u5165\u529b\u306b\u3002\n    with tf.name_scope('readout'):\n        W = weight_variable([FEATURE_DIM, CATEGORY_NUM], name='weight')\n        b = bias_variable([CATEGORY_NUM], name='bias')\n        y = tf.nn.softmax(tf.matmul(h_drop, W) + b)\n\n\n\u5b66\u7fd2\uff06\u8a55\u4fa1\u6642\n\u30c9\u30ed\u30c3\u30d7\u30a2\u30a6\u30c8\u7387\u3092\u6e21\u3057\u3066\u3042\u3052\u308b\u5fc5\u8981\u304c\u3042\u308a\u3001\n\u5b66\u7fd2\u6642\u306b\u306f\u30010.5\uff08KEEP_PROB\uff09\u3092\u3002\n            sess.run(train_step, {x: batch[0], y_: batch[1], keep_prob: KEEP_PROB})\n\n\u8a55\u4fa1\u6642\u306b\u306f\u30011.0\uff08\u30c9\u30ed\u30c3\u30d7\u30a2\u30a6\u30c8\u3055\u305b\u306a\u3044\uff09\u3092\u3002\n                summary = sess.run(tf.merge_summary([train_accuracy_summary]), {x: batch[0], y_: batch[1], keep_prob: 1.0})\n\n                summary = sess.run(tf.merge_summary([test_accuracy_summary]), {x: mnist.test.images, y_: mnist.test.labels, keep_prob: 1.0})\n\n\n\u7d50\u679c\n\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\uff08\u9752\u7dda\uff09\u3067\u306e\u8b58\u5225\u7387\u306f\u300197.2%\u7a0b\u5ea6\u3002\n\u30c9\u30ed\u30c3\u30d7\u30a2\u30a6\u30c8\u3092\u8ffd\u52a0\u3059\u308b\u3053\u3068\u3067\u843d\u3061\u3066\u3044\u308b\u3002\u3002\n\n\u5b9f\u306f\u3001\u4eca\u56de\u3001FEATURE_DIM\u3092100 \u2192 1024\u306b\u5909\u3048\u3066\u3044\u308b\u3002\u7406\u7531\u306f\u3001\u9014\u4e2d\u3067\u5b66\u7fd2\u304c\u7834\u7dbb\u3057\u3066\u3057\u307e\u3063\u305f\u304b\u3089\u30021024\u306f\u3001TensorFlow\u306eTutorial\u306eDeep MNIST for Experts\u3067\u4f7f\u308f\u308c\u3066\u3044\u308b\u6b21\u5143\u6570\u3002\n\n\u7834\u7dbb\u3059\u308b\u524d\u306f\u300197.8%\u7a0b\u5ea6\u306f\u51fa\u3066\u3044\u305f\u306e\u3067\u3001\u305d\u306e\u307e\u307e\u5b66\u7fd2\u3067\u304d\u308c\u3070\u524d\u56de\u3068\u540c\u3058\u7a0b\u5ea6\u306f\u51fa\u305f\u3060\u308d\u3046\u3002\u3067\u3082\u3001\u3082\u3068\u3082\u3068100\u6b21\u5143\u3068\u3044\u3046\u5c11\u306a\u3044\u6b21\u5143\u3067\u3084\u3063\u3066\u3044\u3066\u300150%\u3092\u5931\u3046\u3063\u3066\u306e\u306f\u6d41\u77f3\u306b\u3084\u308a\u904e\u304e\u305f\u611f\u3002\u305d\u3082\u305d\u3082\u3001\u305d\u306e\u7a0b\u5ea6\u3067\u306f\u904e\u5b66\u7fd2\u3057\u306b\u304f\u3044\u3060\u308d\u3046\u3057\u3002\n\u5177\u4f53\u7684\u306b\u4f55\u304c\u539f\u56e0\u304b\u307e\u3067\u306f\u8abf\u3079\u3066\u3044\u306a\u3044\u304c\u3001\u3068\u308a\u3042\u3048\u305a\u3001\u30cb\u30e5\u30fc\u30e9\u30eb\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u3067\u5b66\u7fd2\u304c\u3046\u307e\u304f\u3044\u304b\u306a\u3044\u3053\u3068\u304c\u3042\u308b\u3068\u3044\u3046\u7279\u5fb4\u306b\u76f4\u9762\u3067\u304d\u305f\u3002\n\n\u3042\u3068\u304c\u304d\n\u4eca\u56de\u306f\u3001\u524d\u56de\u306e\u8a18\u4e8b\u3067\u7d39\u4ecb\u3057\u305f\u30d5\u30a3\u30eb\u30bf\u3092\u56fa\u5b9a\u3057\u305f\u7573\u307f\u8fbc\u307f\u30cb\u30e5\u30fc\u30e9\u30eb\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u306b\u3001\u30c9\u30ed\u30c3\u30d7\u30a2\u30a6\u30c8\u5c64\u3092\u8ffd\u52a0\u3057\u3066\u307f\u307e\u3057\u305f\u3002\u6b21\u56de\u306e\u8a18\u4e8b\u3067\u306f\u3001Prewitte filter\u3067\u56fa\u5b9a\u3057\u3066\u3044\u305f\u7573\u307f\u8fbc\u307f\u5c64\u306e\u30a6\u30a7\u30a4\u30c8\u3082\u5b66\u7fd2\u306b\u3088\u3063\u3066\u63a8\u5b9a\u3059\u308b\u3088\u3046\u306b\u3057\u3066\u307f\u307e\u3059\u3002\n([\u76ee\u6b21\u306f\u3053\u3061\u3089](http://qiita.com/kumonkumon/items/6fd05963df92e9eec8c0))\n\n#\u306f\u3058\u3081\u306b\n[\u524d\u56de\u306e\u8a18\u4e8b](http://qiita.com/kumonkumon/items/974cb3e0f0a346c7ff1b)\u3067\u306f\u3001\u30d5\u30a3\u30eb\u30bf\u3092\u56fa\u5b9a\u3057\u305f\u7573\u307f\u8fbc\u307f\u30cb\u30e5\u30fc\u30e9\u30eb\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u306b\u3001\u30d7\u30fc\u30ea\u30f3\u30b0\u5c64\u3092\u8ffd\u52a0\u3057\u305f\u3002\u4eca\u56de\u306f\u3001\u3053\u308c\u3092\u3055\u3089\u306b\u62e1\u5f35\u3057\u3066\u3001\u4e00\u822c\u7684\u306a\uff08\u30d5\u30a3\u30eb\u30bf\u3082\u5b66\u7fd2\u3059\u308b\uff09\u7573\u307f\u8fbc\u307f\u30cb\u30e5\u30fc\u30e9\u30eb\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u3078\u3068\u3064\u306a\u3052\u3066\u3044\u3053\u3046\u304b\u3068\u3002\n\n#\u62e1\u5f35\uff1a\u30c9\u30ed\u30c3\u30d7\u30a2\u30a6\u30c8\u5c64\uff08dropout layer\uff09\u306e\u8ffd\u52a0\n\u30cb\u30e5\u30fc\u30e9\u30eb\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u306b\u9650\u3089\u305a\u3001\u6a5f\u68b0\u5b66\u7fd2\u3067\u306f\u4e00\u822c\u7684\u306b\u3001\u30e2\u30c7\u30eb\u304c\u8907\u96d1\u3067\u3042\u308c\u3070\u3042\u308b\u307b\u3069\u30d2\u30e7\u73fe\u80fd\u529b\u306f\u9ad8\u3044\u304c\u3001\u904e\u5b66\u7fd2\uff08over fitting\uff09\u306b\u9665\u308a\u3084\u3059\u3044\u3002\u904e\u5b66\u7fd2\u3068\u306f\u3001\u5b66\u7fd2\u30c7\u30fc\u30bf\u7528\u306b\u30d1\u30e9\u30e1\u30fc\u30bf\u8abf\u6574\u3055\u308c\u3066\u3057\u307e\u3044\u3001\u672c\u6765\u8b58\u5225\u3057\u305f\u3044\u672a\u77e5\u306e\u30c7\u30fc\u30bf\u306b\u5bfe\u3057\u3066\u306e\u6027\u80fd\u304c\u60aa\u304f\u306a\u3063\u3066\u3057\u307e\u3046\u3053\u3068\u3002\n\n\u30c7\u30a3\u30fc\u30d7\u30cb\u30e5\u30fc\u30e9\u30eb\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u3084\u30c7\u30a3\u30fc\u30d7\u30e9\u30fc\u30cb\u30f3\u30b0\u3067\u306f\u3001\u30e2\u30c7\u30eb\u304c\u8907\u96d1\u306b\u306a\u308b\u306e\u3067\u904e\u5b66\u7fd2\u306e\u8ab2\u984c\u304c\u3064\u304d\u307e\u3068\u3046\u3002\u3053\u308c\u306f\u30cb\u30e5\u30fc\u30e9\u30eb\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u304c\u51ac\u306e\u6642\u4ee3\u306b\u5165\u3063\u305f\u7406\u7531\u306e\u4e00\u3064\u3002\n\n\u3067\u3001\u904e\u5b66\u7fd2\u306b\u5bfe\u3057\u3066\u52b9\u679c\u304c\u3042\u308b\u3068\u3055\u308c\u3066\u3044\u308b\u306e\u304c\u3001\u30c9\u30ed\u30c3\u30d7\u30a2\u30a6\u30c8\u3002\u3053\u308c\u306f\u3001\u30d1\u30e9\u30e1\u30fc\u30bf\u306e\u5b66\u7fd2\u30d5\u30a7\u30fc\u30ba\u306b\u304a\u3044\u3066\u3001\u3042\u308b\u5c64\u3067\u305b\u3063\u304b\u304f\u62bd\u51fa\u3057\u305f\u60c5\u5831\u3092\u6b20\u843d\u3055\u305b\u308b\u3068\u3044\u3046\u5927\u80c6\u306a\u3082\u306e\u3002\u4f8b\u3048\u3070\u3001\u3042\u308b\u5c64\u3067100\u6b21\u5143\u306e\u7279\u5fb4\u30d9\u30af\u30c8\u30eb\u304c\u5f97\u3089\u308c\u305f\u3068\u3057\u3066\u3001\u305d\u306e\u3046\u3061\u306e50\u6b21\u5143\uff08\u30e9\u30f3\u30c0\u30e0\u62bd\u51fa\uff09\u306f\u306a\u304b\u3063\u305f\u3053\u3068\u306b\u3059\u308b\u3068\u3044\u3046\u3082\u306e\u3002\u3053\u308c\u306b\u3088\u3063\u3066\u30a2\u30f3\u30b5\u30f3\u30d6\u30eb\u5b66\u7fd2\uff08\u3044\u308d\u3044\u308d\u306a\u30d1\u30bf\u30fc\u30f3\u3067\u5b66\u7fd2\u3057\u3066\u305d\u306e\u5e73\u5747\u3092\u3068\u308b\u307f\u305f\u3044\u306a\uff09\u306e\u52b9\u679c\u304c\u3048\u3089\u308c\u308b\u3068\u306e\u3053\u3068\u3002\n\n\u3053\u3053\u3067\u306f\u3001\u5168\u7d50\u5408\u5c64\u306e\u5f8c\u308d\u306b\u5165\u308c\u308b\u3002\n![mnist_fixed_cnn](https://qiita-image-store.s3.amazonaws.com/0/127038/bdb5eb14-89ec-e1af-566f-a0f61edea869.png)\n\n##\u30b3\u30fc\u30c9\n[mnist_fixed_cnn](https://github.com/kumon/DeepLearningExercise/blob/master/src/tensorflow/mnist_fixed_cnn.py)\n\n```py:mnist_fixed_cnn.py\nfrom helper import *\n\nIMAGE_WIDTH = 28\nIMAGE_HEIGHT = 28\nIMAGE_SIZE = IMAGE_WIDTH * IMAGE_HEIGHT\nCATEGORY_NUM = 10\nLEARNING_RATE = 0.01\nFILTER_NUM = 2\nBIAS_CONV = -0.1\nFEATURE_DIM = 1024\nKEEP_PROB = 0.5\nTRAINING_LOOP = 20000\nBATCH_SIZE = 100\nSUMMARY_DIR = 'log_fixed_cnn'\nSUMMARY_INTERVAL = 100\n\nmnist = input_data.read_data_sets('data', one_hot=True)\n\nwith tf.Graph().as_default():\n    with tf.name_scope('input'):\n        y_ = tf.placeholder(tf.float32, [None, CATEGORY_NUM], name='labels')\n        x = tf.placeholder(tf.float32, [None, IMAGE_SIZE], name='input_images')\n\n    with tf.name_scope('convolution'):\n        W_conv = prewitt_filter()\n        b_conv = tf.constant([BIAS_CONV] * FILTER_NUM, dtype = tf.float32, name='bias_conv')\n        x_image = tf.reshape(x, [-1, IMAGE_WIDTH, IMAGE_HEIGHT, 1])\n        h_conv = tf.nn.relu(tf.abs(conv2d(x_image, W_conv)) + b_conv)\n\n    with tf.name_scope('pooling'):\n        scale = 1 / 4.0\n        h_pool = max_pool_2x2(h_conv)\n\n    with tf.name_scope('fully-connected'):\n        W_fc = weight_variable([int(IMAGE_SIZE * scale * FILTER_NUM), FEATURE_DIM], name='weight_fc')\n        b_fc = bias_variable([FEATURE_DIM], name='bias_fc')\n        h_pool_flat = tf.reshape(h_pool, [-1, int(IMAGE_SIZE * scale * FILTER_NUM)])\n        h_fc = tf.nn.relu(tf.matmul(h_pool_flat, W_fc) + b_fc)\n\n    with tf.name_scope('dropout'):\n        keep_prob = tf.placeholder(tf.float32)\n        h_drop = tf.nn.dropout(h_fc, keep_prob)\n\n    with tf.name_scope('readout'):\n        W = weight_variable([FEATURE_DIM, CATEGORY_NUM], name='weight')\n        b = bias_variable([CATEGORY_NUM], name='bias')\n        y = tf.nn.softmax(tf.matmul(h_drop, W) + b)\n\n    with tf.name_scope('optimize'):\n        cross_entropy = tf.reduce_mean(-tf.reduce_sum(y_ * tf.log(y), reduction_indices=[1]))\n        train_step = tf.train.GradientDescentOptimizer(LEARNING_RATE).minimize(cross_entropy)\n\n    with tf.Session() as sess:\n        train_writer = tf.train.SummaryWriter(SUMMARY_DIR + '/train', sess.graph)\n        test_writer = tf.train.SummaryWriter(SUMMARY_DIR + '/test', sess.graph)\n\n        correct_prediction = tf.equal(tf.argmax(y, 1), tf.argmax(y_, 1))\n        accuracy = tf.reduce_mean(tf.cast(correct_prediction, tf.float32))\n        train_accuracy_summary = tf.scalar_summary('accuracy', accuracy)\n        test_accuracy_summary = tf.scalar_summary('accuracy', accuracy)\n\n        sess.run(tf.initialize_all_variables())\n        for i in range(TRAINING_LOOP + 1):\n            batch = mnist.train.next_batch(BATCH_SIZE)\n            sess.run(train_step, {x: batch[0], y_: batch[1], keep_prob: KEEP_PROB})\n\n            if i % SUMMARY_INTERVAL == 0:\n                print('step %d' % i)\n                summary = sess.run(tf.merge_summary([train_accuracy_summary]), {x: batch[0], y_: batch[1], keep_prob: 1.0})\n                train_writer.add_summary(summary, i)\n                summary = sess.run(tf.merge_summary([test_accuracy_summary]), {x: mnist.test.images, y_: mnist.test.labels, keep_prob: 1.0})\n                test_writer.add_summary(summary, i)\n```\n\n##\u30b3\u30fc\u30c9\u306e\u8aac\u660e\n\u5909\u66f4\u70b9\u3092\u3002\n\n###\u30c9\u30ed\u30c3\u30d7\u30a2\u30a6\u30c8\u5c64\n\u8ffd\u52a0\u3055\u308c\u305f\u5c64\u3002\n\n```py\n    with tf.name_scope('dropout'):\n        keep_prob = tf.placeholder(tf.float32)\n        h_drop = tf.nn.dropout(h_fc, keep_prob)\n```\n\n###\u51fa\u529b\u5c64\n\u5168\u7d50\u5408\u5c64\u306e\u51fa\u529b\u304b\u3089\u3001\u30c9\u30ed\u30c3\u30d7\u30a2\u30a6\u30c8\u5c64\u306e\u51fa\u529b\u3092\u5165\u529b\u306b\u3002\n\n```py3\n    with tf.name_scope('readout'):\n        W = weight_variable([FEATURE_DIM, CATEGORY_NUM], name='weight')\n        b = bias_variable([CATEGORY_NUM], name='bias')\n        y = tf.nn.softmax(tf.matmul(h_drop, W) + b)\n```\n\n###\u5b66\u7fd2\uff06\u8a55\u4fa1\u6642\n\u30c9\u30ed\u30c3\u30d7\u30a2\u30a6\u30c8\u7387\u3092\u6e21\u3057\u3066\u3042\u3052\u308b\u5fc5\u8981\u304c\u3042\u308a\u3001\n\u5b66\u7fd2\u6642\u306b\u306f\u30010.5\uff08`KEEP_PROB`\uff09\u3092\u3002\n\n```py\n            sess.run(train_step, {x: batch[0], y_: batch[1], keep_prob: KEEP_PROB})\n```\n\u8a55\u4fa1\u6642\u306b\u306f\u30011.0\uff08\u30c9\u30ed\u30c3\u30d7\u30a2\u30a6\u30c8\u3055\u305b\u306a\u3044\uff09\u3092\u3002\n\n```py\n                summary = sess.run(tf.merge_summary([train_accuracy_summary]), {x: batch[0], y_: batch[1], keep_prob: 1.0})\n```\n\n```py\n                summary = sess.run(tf.merge_summary([test_accuracy_summary]), {x: mnist.test.images, y_: mnist.test.labels, keep_prob: 1.0})\n```\n\n##\u7d50\u679c\n\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\uff08\u9752\u7dda\uff09\u3067\u306e\u8b58\u5225\u7387\u306f\u300197.2%\u7a0b\u5ea6\u3002\n\u30c9\u30ed\u30c3\u30d7\u30a2\u30a6\u30c8\u3092\u8ffd\u52a0\u3059\u308b\u3053\u3068\u3067\u843d\u3061\u3066\u3044\u308b\u3002\u3002\n![result mnist_fixed_cnn](https://qiita-image-store.s3.amazonaws.com/0/127038/ce66967f-870b-2bd4-6d19-b235ce5f7a09.png)\n\n\u5b9f\u306f\u3001\u4eca\u56de\u3001`FEATURE_DIM`\u3092100 \u2192 1024\u306b\u5909\u3048\u3066\u3044\u308b\u3002\u7406\u7531\u306f\u3001\u9014\u4e2d\u3067\u5b66\u7fd2\u304c\u7834\u7dbb\u3057\u3066\u3057\u307e\u3063\u305f\u304b\u3089\u30021024\u306f\u3001TensorFlow\u306eTutorial\u306e[Deep MNIST for Experts](https://www.tensorflow.org/versions/r0.8/tutorials/mnist/pros/index.html#deep-mnist-for-experts)\u3067\u4f7f\u308f\u308c\u3066\u3044\u308b\u6b21\u5143\u6570\u3002\n![result mnist_fixed_cnn_failed](https://qiita-image-store.s3.amazonaws.com/0/127038/dc288bf5-263e-8991-d5c1-0ccac67d2d14.png)\n\n\u7834\u7dbb\u3059\u308b\u524d\u306f\u300197.8%\u7a0b\u5ea6\u306f\u51fa\u3066\u3044\u305f\u306e\u3067\u3001\u305d\u306e\u307e\u307e\u5b66\u7fd2\u3067\u304d\u308c\u3070\u524d\u56de\u3068\u540c\u3058\u7a0b\u5ea6\u306f\u51fa\u305f\u3060\u308d\u3046\u3002\u3067\u3082\u3001\u3082\u3068\u3082\u3068100\u6b21\u5143\u3068\u3044\u3046\u5c11\u306a\u3044\u6b21\u5143\u3067\u3084\u3063\u3066\u3044\u3066\u300150%\u3092\u5931\u3046\u3063\u3066\u306e\u306f\u6d41\u77f3\u306b\u3084\u308a\u904e\u304e\u305f\u611f\u3002\u305d\u3082\u305d\u3082\u3001\u305d\u306e\u7a0b\u5ea6\u3067\u306f\u904e\u5b66\u7fd2\u3057\u306b\u304f\u3044\u3060\u308d\u3046\u3057\u3002\n\n\u5177\u4f53\u7684\u306b\u4f55\u304c\u539f\u56e0\u304b\u307e\u3067\u306f\u8abf\u3079\u3066\u3044\u306a\u3044\u304c\u3001\u3068\u308a\u3042\u3048\u305a\u3001\u30cb\u30e5\u30fc\u30e9\u30eb\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u3067\u5b66\u7fd2\u304c\u3046\u307e\u304f\u3044\u304b\u306a\u3044\u3053\u3068\u304c\u3042\u308b\u3068\u3044\u3046\u7279\u5fb4\u306b\u76f4\u9762\u3067\u304d\u305f\u3002\n\n#\u3042\u3068\u304c\u304d\n\u4eca\u56de\u306f\u3001[\u524d\u56de\u306e\u8a18\u4e8b](http://qiita.com/kumonkumon/items/974cb3e0f0a346c7ff1b)\u3067\u7d39\u4ecb\u3057\u305f\u30d5\u30a3\u30eb\u30bf\u3092\u56fa\u5b9a\u3057\u305f\u7573\u307f\u8fbc\u307f\u30cb\u30e5\u30fc\u30e9\u30eb\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u306b\u3001\u30c9\u30ed\u30c3\u30d7\u30a2\u30a6\u30c8\u5c64\u3092\u8ffd\u52a0\u3057\u3066\u307f\u307e\u3057\u305f\u3002[\u6b21\u56de\u306e\u8a18\u4e8b](http://qiita.com/kumonkumon/items/bb9df35647fff8fee3b1)\u3067\u306f\u3001Prewitte filter\u3067\u56fa\u5b9a\u3057\u3066\u3044\u305f\u7573\u307f\u8fbc\u307f\u5c64\u306e\u30a6\u30a7\u30a4\u30c8\u3082\u5b66\u7fd2\u306b\u3088\u3063\u3066\u63a8\u5b9a\u3059\u308b\u3088\u3046\u306b\u3057\u3066\u307f\u307e\u3059\u3002\n", "tags": ["TensorFlow", "DeepLearning", "CNN", "ConvolutionalNeuralNetworks", "\u6df1\u5c64\u5b66\u7fd2"]}