{"tags": ["Python", "FizzBuzz"], "context": " More than 1 year has passed since last update.\n\n\u306f\u3058\u3081\u306b\n\u30e9\u30f3\u30c0\u30e0\u306aFizzBuzz\u5217\u3092\u30bd\u30fc\u30c8\u3059\u308b\u305f\u3081\u306b\u3001\u30af\u30a4\u30c3\u30af\u30bd\u30fc\u30c8\u3092\u5b66\u3076\u3053\u3068\u306b\u3057\u305f\u3002\n\n\u30af\u30a4\u30c3\u30af\u30bd\u30fc\u30c8\u3068\u306f\uff08\u4ed6\u30b5\u30a4\u30c8\u304b\u3089\u5f15\u7528\uff09\n\u30af\u30a4\u30c3\u30af\u30bd\u30fc\u30c8\u306f\u3001\u30c7\u30fc\u30bf\u306e\u6bd4\u8f03\u3068\u4ea4\u63db\u56de\u6570\u304c\u975e\u5e38\u306b\u5c11\u306a\u3044\u306e\u304c\u7279\u5fb4\u3067\u3001\u4e00\u822c\u7684\u306a\u3070\u3089\u3070\u3089\u30c7\u30fc\u30bf\uff08\u30e9\u30f3\u30c0\u30e0\u306b\u6563\u3089\u3070\u3063\u3066\u3044\u308b\u30c7\u30fc\u30bf\uff09\u306b\u5bfe\u3057\u3066\u3001\u6700\u3082\u52b9\u7387\u826f\u304f\u4e26\u3079\u66ff\u3048\u3092\u5b9f\u884c\u3057\u307e\u3059\u3002\n\u30af\u30a4\u30c3\u30af\u30bd\u30fc\u30c8\u306f\u3001\u5b9f\u7528\u4e0a\u3082\u3063\u3068\u3082\u9ad8\u901f\u3067\u3042\u308b\u3068\u3055\u308c\u3066\u3044\u308b\u4e26\u3079\u66ff\u3048\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u3067\u3001\u591a\u304f\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u3067\u5229\u7528\u3055\u308c\u3066\u3044\u307e\u3059\u3002\nhttp://www.ics.kagoshima-u.ac.jp/~fuchida/edu/algorithm/sort-algorithm/quick-sort.html\n\n\u30b3\u30fc\u30c9\n\u4e0a\u8a18\u30b5\u30a4\u30c8\u306b\u8f09\u3063\u3066\u3044\u308bJava\u306e\u30b3\u30fc\u30c9\u3092\uff08\u305f\u3076\u3093\u307b\u307c\u305d\u306e\u307e\u307e\uff09python\u306b\u7f6e\u304d\u63db\u3048\u3066\u307f\u305f\u3002\nimport random\ndef make_randoms(start=1,finish=100):\n  seq = range(start,finish+1)\n  randoms = []\n  while seq:\n    randoms.append(seq.pop(random.randint(0,len(seq)-1)))\n  return randoms\n\ndef pivot(target, i, j):\n  k = i + 1\n  while k <= j and target[i] == target[k]: k += 1\n  if k > j: return -1\n  if target[i] >= target[k]: \n    return i\n  else:\n    return k\n\ndef partition(target, i, j, x):\n  l, r = i, j\n  while l <= r:\n    while l <= j and target[l] < x: l += 1\n    while r >= i and target[r] >= x: r -= 1\n    if l > r: break\n    target[l], target[r] = target[r], target[l]\n    l, r = l + 1, r - 1\n  return l\n\ndef quick_sort(target,i ,j):\n  if i == j: return \n  p = pivot(target, i, j)\n  if p != -1:\n    k = partition(target, i, j, target[p])\n    quick_sort(target, i, k-1)\n    quick_sort(target, k, j)\n\n\nFizzBuzz\u5217\u3092\u30bd\u30fc\u30c8\u3059\u308b\u305f\u3081\u306e\u61f8\u5ff5\u70b9\n\u5927\u5c0f\u95a2\u4fc2\u3092\u5224\u65ad\u3057\u3066\u3044\u308b\u3068\u3053\u308d\u304c\u591a\u3059\u304e\u308b\u3002\u3069\u3046\u3057\u3088\u3046\uff1f\n\u306f\u3058\u3081\u306b\n---\n\u30e9\u30f3\u30c0\u30e0\u306aFizzBuzz\u5217\u3092\u30bd\u30fc\u30c8\u3059\u308b\u305f\u3081\u306b\u3001\u30af\u30a4\u30c3\u30af\u30bd\u30fc\u30c8\u3092\u5b66\u3076\u3053\u3068\u306b\u3057\u305f\u3002\n\n\u30af\u30a4\u30c3\u30af\u30bd\u30fc\u30c8\u3068\u306f\uff08\u4ed6\u30b5\u30a4\u30c8\u304b\u3089\u5f15\u7528\uff09\n---\n\u30af\u30a4\u30c3\u30af\u30bd\u30fc\u30c8\u306f\u3001\u30c7\u30fc\u30bf\u306e\u6bd4\u8f03\u3068\u4ea4\u63db\u56de\u6570\u304c\u975e\u5e38\u306b\u5c11\u306a\u3044\u306e\u304c\u7279\u5fb4\u3067\u3001\u4e00\u822c\u7684\u306a\u3070\u3089\u3070\u3089\u30c7\u30fc\u30bf\uff08\u30e9\u30f3\u30c0\u30e0\u306b\u6563\u3089\u3070\u3063\u3066\u3044\u308b\u30c7\u30fc\u30bf\uff09\u306b\u5bfe\u3057\u3066\u3001\u6700\u3082\u52b9\u7387\u826f\u304f\u4e26\u3079\u66ff\u3048\u3092\u5b9f\u884c\u3057\u307e\u3059\u3002\n\n\u30af\u30a4\u30c3\u30af\u30bd\u30fc\u30c8\u306f\u3001\u5b9f\u7528\u4e0a\u3082\u3063\u3068\u3082\u9ad8\u901f\u3067\u3042\u308b\u3068\u3055\u308c\u3066\u3044\u308b\u4e26\u3079\u66ff\u3048\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u3067\u3001\u591a\u304f\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u3067\u5229\u7528\u3055\u308c\u3066\u3044\u307e\u3059\u3002\nhttp://www.ics.kagoshima-u.ac.jp/~fuchida/edu/algorithm/sort-algorithm/quick-sort.html\n\n\u30b3\u30fc\u30c9\n---\n\u4e0a\u8a18\u30b5\u30a4\u30c8\u306b\u8f09\u3063\u3066\u3044\u308bJava\u306e\u30b3\u30fc\u30c9\u3092\uff08\u305f\u3076\u3093\u307b\u307c\u305d\u306e\u307e\u307e\uff09python\u306b\u7f6e\u304d\u63db\u3048\u3066\u307f\u305f\u3002\n\n```py\nimport random\ndef make_randoms(start=1,finish=100):\n  seq = range(start,finish+1)\n  randoms = []\n  while seq:\n    randoms.append(seq.pop(random.randint(0,len(seq)-1)))\n  return randoms\n\ndef pivot(target, i, j):\n  k = i + 1\n  while k <= j and target[i] == target[k]: k += 1\n  if k > j: return -1\n  if target[i] >= target[k]: \n    return i\n  else:\n    return k\n\ndef partition(target, i, j, x):\n  l, r = i, j\n  while l <= r:\n    while l <= j and target[l] < x: l += 1\n    while r >= i and target[r] >= x: r -= 1\n    if l > r: break\n    target[l], target[r] = target[r], target[l]\n    l, r = l + 1, r - 1\n  return l\n\ndef quick_sort(target,i ,j):\n  if i == j: return \n  p = pivot(target, i, j)\n  if p != -1:\n    k = partition(target, i, j, target[p])\n    quick_sort(target, i, k-1)\n    quick_sort(target, k, j)\n```\n\nFizzBuzz\u5217\u3092\u30bd\u30fc\u30c8\u3059\u308b\u305f\u3081\u306e\u61f8\u5ff5\u70b9\n---\n\u5927\u5c0f\u95a2\u4fc2\u3092\u5224\u65ad\u3057\u3066\u3044\u308b\u3068\u3053\u308d\u304c\u591a\u3059\u304e\u308b\u3002\u3069\u3046\u3057\u3088\u3046\uff1f\n"}