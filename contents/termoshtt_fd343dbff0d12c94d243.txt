{"context": " More than 1 year has passed since last update.\n\nNote for Boost Concept Check Library (BCCL)\n\n\u672c\u5bb6\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8(v1.55)\n\u65e5\u672c\u8a9e\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8(v1.30)\nReference (v1.55)\n\n\u4ee5\u4e0b\u306e\u8a18\u8ff0\u306f\u516c\u5f0f\u306e\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u3092\u81ea\u5206\u306a\u308a\u306b\u8981\u7d04\u3057\u305f\u7269\u3067\u3042\u308a\u3001\n\u548c\u8a33\u3092\u76ee\u6307\u3059\u7269\u3067\u306f\u306a\u3044\u3002\n\u307e\u305f\u5185\u5bb9\u3092\u4fdd\u8a3c\u3059\u308b\u3082\u306e\u3067\u3082\u306a\u3044\u3002\nIndex\n- #1 Concept Checking Introduction\n- #2 Using Concept Checks\n- #3 Creating Concept Checking Classes\n- #4 Concept Covering and Archetypes\n\nCreating Concept Checking Classes\n\u3044\u3088\u3044\u3088\u5b9f\u969b\u306b\u30b3\u30f3\u30bb\u30d7\u30c8\u3092\u30c1\u30a7\u30c3\u30af\u3059\u308b\u30af\u30e9\u30b9\u3092\u5b9f\u88c5\u3059\u308b\u90e8\u5206\u3092\u8aac\u660e\u3059\u308b\u3002\n\u3053\u3053\u3067\u306f\u307e\u305a\u5165\u529b\u53cd\u5fa9\u5b50(InputIterator)\u3067\u3042\u308b\u4e8b\u3092\u78ba\u8a8d\u3059\u308b\u30af\u30e9\u30b9\u3092\u4f5c\u6210\u3059\u308b\u3002 \n\u4eca\u307e\u3067\u306f\u3042\u308b\u30a4\u30c6\u30ec\u30fc\u30bf\u304c\u3042\u308b\u6642\u3001\u305d\u308c\u304c\u5165\u529b\u53cd\u5fa9\u5b50\u3067\u3042\u308b\u4e8b\u3092\u53b3\u5bc6\u306b\u78ba\u8a8d\u3059\u308b\u624b\u6bb5\u306f\u306a\u304b\u3063\u305f\u3002\n\u6b21\u306b\u793a\u3059\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u30af\u30e9\u30b9\u306f\u5165\u529b\u6f14\u7b97\u5b50\u306e\u53b3\u5bc6\u306a\u5b9a\u7fa9\u3092\u4e0e\u3048\u308b:\ntemplate <class X>\nstruct InputIterator\n  : Assignable<X>, EqualityComparable<X>\n{\n private:\n    typedef std::iterator_traits<X> t;\n public:\n    typedef typename t::value_type value_type;\n    typedef typename t::difference_type difference_type;\n    typedef typename t::reference reference;\n    typedef typename t::pointer pointer;\n    typedef typename t::iterator_category iterator_category;\n\n    BOOST_CONCEPT_ASSERT((SignedInteger<difference_type>));\n    BOOST_CONCEPT_ASSERT((Convertible<iterator_category, std::input_iterator_tag>));\n\n    BOOST_CONCEPT_USAGE(InputIterator)\n    {\n        X j(i);             // require copy construction\n        same_type(*i++,v);  // require postincrement-dereference returning value_type\n        X& x = ++j;         // require preincrement returning X&\n    }\n\n private:\n    X i;\n    value_type v;\n\n    // Type deduction will fail unless the arguments have the same type.\n    template <typename T>\n    void same_type(T const&, T const&);\n};\n\n\u4ee5\u964d\u3067\u306f\u3053\u306e\u3088\u3046\u306aconcept checking class\u3092\u5358\u306b\u30b3\u30f3\u30bb\u30d7\u30c8\u3068\u547c\u3076\u3002\n\n\u4ed6\u306e\u30b3\u30f3\u30bb\u30d7\u30c8\u306e\u7d99\u627f\ntemplate <class X>\nstruct InputIterator\n  : Assignable<X>, EqualityComparable<X>\n\n\u307e\u305a\u3053\u306e\u90e8\u5206\u3092\u8003\u3048\u3088\u3046\u3002\n\u3042\u308b\u30b3\u30f3\u30bb\u30d7\u30c8\u3092\u5b9f\u88c5\u3057\u3088\u3046\u3068\u601d\u3046\u6642\u3001\u305d\u306e\u5168\u3066\u306e\u6761\u4ef6\u304c\u72ec\u81ea\u3067\u3042\u308b\u4e8b\u306f\u5c11\u306a\u3044\u3060\u308d\u3046\u3002\n\u7279\u306b\u81ea\u4f5c\u306e\u30e9\u30a4\u30d6\u30e9\u30ea\u5185\u306e\u30b3\u30f3\u30bb\u30d7\u30c8\u3060\u3068\u306a\u304a\u3055\u3089\u3067\u3042\u308b\u3002\n\u3053\u306e\u6642\u3001\u65e2\u306b\u5b58\u5728\u3057\u3066\u3044\u308b\u30b3\u30f3\u30bb\u30d7\u30c8\u3092\u5229\u7528\u3067\u304d\u308b\u3068\u5b09\u3057\u3044\u3057\u3001\u305d\u3046\u3059\u3079\u304d\u3067\u3042\u308b\u3002\nBCCL\u3067\u306f\u3053\u308c\u3092\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u30af\u30e9\u30b9\u306e\u7d99\u627f\u3092\u5229\u7528\u3057\u3066\u5b9f\u73fe\u3059\u308b\u3002\n\u307e\u305a\u5165\u529b\u6f14\u7b97\u5b50\u306f\u4ee3\u5165\u53ef\u80fd(Assignable)\u3067\u3001\u6bd4\u8f03\u53ef\u80fd(EqualityComparable)\u3067\u3042\u308b\u5fc5\u8981\u304c\u3042\u308b\u3002\n\u3053\u306e\u90e8\u5206\u3092\u4e0a\u8ff0\u306e\u7d99\u627f\u306e\u90e8\u5206\u3067\u5b9f\u88c5\u3057\u3066\u3044\u308b\u3002\n\u3082\u3057InputIterator\u30af\u30e9\u30b9\u306e\u672c\u4f53\u306e\u5b9f\u88c5\u305b\u305a\u3068\u3082\u3001\u30af\u30e9\u30b9X\u304cAssignable\u3067EqualityComparable\u3067\u3042\u308b\u4e8b\u304c\u30c6\u30b9\u30c8\u3055\u308c\u308b\u3002\n\ntraits\u306e\u30c1\u30a7\u30c3\u30af\n private:\n    typedef std::iterator_traits<X> t;\n public:\n    typedef typename t::value_type value_type;\n    typedef typename t::difference_type difference_type;\n    typedef typename t::reference reference;\n    typedef typename t::pointer pointer;\n    typedef typename t::iterator_category iterator_category;\n\n\u3053\u308c\u306ftraits\u304c\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u308b\u4e8b\u3092\u78ba\u8a8d\u3057\u3066\u3044\u308b\u3002\nBOOST_CONCEPT_ASSERT((SignedInteger<difference_type>));\nBOOST_CONCEPT_ASSERT((Convertible<iterator_category, std::input_iterator_tag>));\n\n\u3053\u308c\u306f\u524d\u56de\u8aac\u660e\u3057\u305f BOOST_CONCEPT_ASSERT \u3067\u3001\n\u4f7f\u3044\u65b9\u3082\u305d\u306e\u307e\u307e\u306a\u306e\u3067\u7565\u3002\n\nBOOST_CONCEPT_USAGE\n\u3053\u308c\u304ckey\u3068\u306a\u308b\u90e8\u5206\u3060\u308d\u3046\u3002\nBOOST_CONCEPT_USAGE(InputIterator)\n{\n    X j(i);             // require copy construction\n    same_type(*i++,v);  // require postincrement-dereference returning value_type\n    X& x = ++j;         // require preincrement returning X&\n}\n\n\u3053\u308c\u306fsyntax\u304c\u6709\u52b9\u304b\u3069\u3046\u304b\u3092\u8abf\u3079\u3066\u3044\u308b\u3002\u5b9f\u969b\u306b\u3053\u306e\u30b3\u30fc\u30c9\u304c\u5b9f\u884c\u3055\u308c\u308b\u4e8b\u306f\u306a\u3044\u3002\n\nat this point you may sometimes need to be a little creative\n\n\u3068\u8a00\u3063\u3066\u3044\u308b\u901a\u308a\u3001\u3053\u306e\u90e8\u5206\u3092\u5b9f\u88c5\u3059\u308b\u306e\u304c\u3082\u3063\u3068\u3082\u5927\u5909\u3060\u308d\u3046\u3002\n\u4f8b\u3048\u3070*i++\u304cX\u578b\u3092\u8fd4\u3059\u4e8b\u3092\u78ba\u8a8d\u3059\u308b\u305f\u3081\u306b\u3001\u88dc\u52a9\u95a2\u6570same_type\u3092\u5c0e\u5165\u3057\u3066\u3044\u308b\u3002\n\u3053\u306e\u90e8\u5206\u306fTMP\u7528\u306e\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u4f7f\u7528\u3059\u308b\u65b9\u304c\u3044\u3044\u3060\u308d\u3046\u3002\n\nValues for Usage Patterns Should Be Data Members\n\u3053\u3053\u3067BOOST_CONCEPT_USAGE\u306b\u4f7f\u7528\u3059\u308b\u30c7\u30fc\u30bf\u30e1\u30f3\u30d0\u30fc\u3092\nX i;\nvalue_type v;\n\n\u306e\u3088\u3046\u306b\u30c7\u30fc\u30bf\u30e1\u30f3\u30d0\u30fc\u3068\u3057\u3066\u5b9a\u7fa9\u3059\u308b\u306e\u306f\u3001\nX\u304c\u30c7\u30d5\u30a9\u30eb\u30c8\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u3092\u6301\u305f\u306a\u304f\u3066\u3082\u3088\u304f\u306a\u308b\u305f\u3081\u3067\u3042\u308b\u3002\n\nsince instances of the InputIterator template will never be constructed, the compiler never has to check how its data members will be constructed (C++ Standard Section 14.7.1 9)\n\n\u3068\u3042\u308b\u901a\u308a\u3001\u30c7\u30fc\u30bf\u30e1\u30f3\u30d0\u30fc\u306f\u521d\u671f\u5316\u3055\u308c\u306a\u3044\u306e\u3067\u3001\nBOOST_CONCEPT_USAGE\u3067\u4f7f\u7528\u3059\u308b\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u306f\u30c7\u30fc\u30bf\u30e1\u30f3\u30d0\u30fc\u3068\u3057\u3066\u5b9a\u7fa9\u3059\u308b\u5fc5\u8981\u304c\u3042\u308b\u3002\n\nSimilarity to Proposed C++0x Language Support for Concepts\n\u4ed6\u306e\u63d0\u6848\u3055\u308c\u3066\u3044\u308bsyntax\u3068\u306e\u95a2\u4fc2\u304c\u8ff0\u3079\u3066\u3042\u308b\u3002\n\u3053\u306e\u90e8\u5206\u306f\u304a\u305d\u3089\u304f\u53e4\u3044\u306e\u3067\u3001\u3044\u305a\u308c\u8abf\u3079\u308b\u3002\nNote for Boost Concept Check Library (BCCL)\n===========================================\n\n- [\u672c\u5bb6\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8(v1.55)](http://www.boost.org/doc/libs/1_55_0/libs/concept_check/concept_check.htm)\n- [\u65e5\u672c\u8a9e\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8(v1.30)](http://boost.cppll.jp/BDTJ_1_30/libs/concept_check/concept_check.htm)\n- [Reference (v1.55)](http://www.boost.org/doc/libs/1_55_0/libs/concept_check/reference.htm)\n\n\u4ee5\u4e0b\u306e\u8a18\u8ff0\u306f\u516c\u5f0f\u306e\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u3092\u81ea\u5206\u306a\u308a\u306b\u8981\u7d04\u3057\u305f\u7269\u3067\u3042\u308a\u3001\n\u548c\u8a33\u3092\u76ee\u6307\u3059\u7269\u3067\u306f\u306a\u3044\u3002\n\u307e\u305f\u5185\u5bb9\u3092\u4fdd\u8a3c\u3059\u308b\u3082\u306e\u3067\u3082\u306a\u3044\u3002\n\nIndex\n- [#1 Concept Checking Introduction](http://qiita.com/termoshtt/items/47c8e3a7b2b84b3c883c)\n- [#2 Using Concept Checks](http://qiita.com/termoshtt/items/8e91c50dbf299376442f)\n- **#3 Creating Concept Checking Classes**\n- #4 Concept Covering and Archetypes\n\n\n## Creating Concept Checking Classes\n\n\u3044\u3088\u3044\u3088\u5b9f\u969b\u306b\u30b3\u30f3\u30bb\u30d7\u30c8\u3092\u30c1\u30a7\u30c3\u30af\u3059\u308b\u30af\u30e9\u30b9\u3092\u5b9f\u88c5\u3059\u308b\u90e8\u5206\u3092\u8aac\u660e\u3059\u308b\u3002\n\u3053\u3053\u3067\u306f\u307e\u305a[\u5165\u529b\u53cd\u5fa9\u5b50(InputIterator)](http://www.sgi.com/tech/stl/InputIterator.html)\u3067\u3042\u308b\u4e8b\u3092\u78ba\u8a8d\u3059\u308b\u30af\u30e9\u30b9\u3092\u4f5c\u6210\u3059\u308b\u3002 \n\u4eca\u307e\u3067\u306f\u3042\u308b\u30a4\u30c6\u30ec\u30fc\u30bf\u304c\u3042\u308b\u6642\u3001\u305d\u308c\u304c\u5165\u529b\u53cd\u5fa9\u5b50\u3067\u3042\u308b\u4e8b\u3092\u53b3\u5bc6\u306b\u78ba\u8a8d\u3059\u308b\u624b\u6bb5\u306f\u306a\u304b\u3063\u305f\u3002\n\u6b21\u306b\u793a\u3059\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u30af\u30e9\u30b9\u306f\u5165\u529b\u6f14\u7b97\u5b50\u306e\u53b3\u5bc6\u306a\u5b9a\u7fa9\u3092\u4e0e\u3048\u308b:\n\n```cpp\ntemplate <class X>\nstruct InputIterator\n  : Assignable<X>, EqualityComparable<X>\n{\n private:\n    typedef std::iterator_traits<X> t;\n public:\n    typedef typename t::value_type value_type;\n    typedef typename t::difference_type difference_type;\n    typedef typename t::reference reference;\n    typedef typename t::pointer pointer;\n    typedef typename t::iterator_category iterator_category;\n\n    BOOST_CONCEPT_ASSERT((SignedInteger<difference_type>));\n    BOOST_CONCEPT_ASSERT((Convertible<iterator_category, std::input_iterator_tag>));\n        \n    BOOST_CONCEPT_USAGE(InputIterator)\n    {\n        X j(i);             // require copy construction\n        same_type(*i++,v);  // require postincrement-dereference returning value_type\n        X& x = ++j;         // require preincrement returning X&\n    }\n    \n private:\n    X i;\n    value_type v;\n\n    // Type deduction will fail unless the arguments have the same type.\n    template <typename T>\n    void same_type(T const&, T const&);\n};\n```\n\n\u4ee5\u964d\u3067\u306f\u3053\u306e\u3088\u3046\u306aconcept checking class\u3092\u5358\u306b\u30b3\u30f3\u30bb\u30d7\u30c8\u3068\u547c\u3076\u3002\n\n#### \u4ed6\u306e\u30b3\u30f3\u30bb\u30d7\u30c8\u306e\u7d99\u627f\n\n```cpp\ntemplate <class X>\nstruct InputIterator\n  : Assignable<X>, EqualityComparable<X>\n```\n\n\u307e\u305a\u3053\u306e\u90e8\u5206\u3092\u8003\u3048\u3088\u3046\u3002\n\u3042\u308b\u30b3\u30f3\u30bb\u30d7\u30c8\u3092\u5b9f\u88c5\u3057\u3088\u3046\u3068\u601d\u3046\u6642\u3001\u305d\u306e\u5168\u3066\u306e\u6761\u4ef6\u304c\u72ec\u81ea\u3067\u3042\u308b\u4e8b\u306f\u5c11\u306a\u3044\u3060\u308d\u3046\u3002\n\u7279\u306b\u81ea\u4f5c\u306e\u30e9\u30a4\u30d6\u30e9\u30ea\u5185\u306e\u30b3\u30f3\u30bb\u30d7\u30c8\u3060\u3068\u306a\u304a\u3055\u3089\u3067\u3042\u308b\u3002\n\u3053\u306e\u6642\u3001\u65e2\u306b\u5b58\u5728\u3057\u3066\u3044\u308b\u30b3\u30f3\u30bb\u30d7\u30c8\u3092\u5229\u7528\u3067\u304d\u308b\u3068\u5b09\u3057\u3044\u3057\u3001\u305d\u3046\u3059\u3079\u304d\u3067\u3042\u308b\u3002\nBCCL\u3067\u306f\u3053\u308c\u3092\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u30af\u30e9\u30b9\u306e\u7d99\u627f\u3092\u5229\u7528\u3057\u3066\u5b9f\u73fe\u3059\u308b\u3002\n\n\u307e\u305a\u5165\u529b\u6f14\u7b97\u5b50\u306f\u4ee3\u5165\u53ef\u80fd(Assignable)\u3067\u3001\u6bd4\u8f03\u53ef\u80fd(EqualityComparable)\u3067\u3042\u308b\u5fc5\u8981\u304c\u3042\u308b\u3002\n\u3053\u306e\u90e8\u5206\u3092\u4e0a\u8ff0\u306e\u7d99\u627f\u306e\u90e8\u5206\u3067\u5b9f\u88c5\u3057\u3066\u3044\u308b\u3002\n\u3082\u3057InputIterator\u30af\u30e9\u30b9\u306e\u672c\u4f53\u306e\u5b9f\u88c5\u305b\u305a\u3068\u3082\u3001\u30af\u30e9\u30b9X\u304cAssignable\u3067EqualityComparable\u3067\u3042\u308b\u4e8b\u304c\u30c6\u30b9\u30c8\u3055\u308c\u308b\u3002\n\n#### traits\u306e\u30c1\u30a7\u30c3\u30af\n\n```cpp\n private:\n    typedef std::iterator_traits<X> t;\n public:\n    typedef typename t::value_type value_type;\n    typedef typename t::difference_type difference_type;\n    typedef typename t::reference reference;\n    typedef typename t::pointer pointer;\n    typedef typename t::iterator_category iterator_category;\n```\n\n\u3053\u308c\u306ftraits\u304c\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u308b\u4e8b\u3092\u78ba\u8a8d\u3057\u3066\u3044\u308b\u3002\n\n```cpp\nBOOST_CONCEPT_ASSERT((SignedInteger<difference_type>));\nBOOST_CONCEPT_ASSERT((Convertible<iterator_category, std::input_iterator_tag>));\n```\n\n\u3053\u308c\u306f[\u524d\u56de](http://qiita.com/termoshtt/items/8e91c50dbf299376442f)\u8aac\u660e\u3057\u305f `BOOST_CONCEPT_ASSERT` \u3067\u3001\n\u4f7f\u3044\u65b9\u3082\u305d\u306e\u307e\u307e\u306a\u306e\u3067\u7565\u3002\n\n#### BOOST_CONCEPT_USAGE\n\n\u3053\u308c\u304ckey\u3068\u306a\u308b\u90e8\u5206\u3060\u308d\u3046\u3002\n\n```cpp\nBOOST_CONCEPT_USAGE(InputIterator)\n{\n    X j(i);             // require copy construction\n    same_type(*i++,v);  // require postincrement-dereference returning value_type\n    X& x = ++j;         // require preincrement returning X&\n}\n```\n\n\u3053\u308c\u306fsyntax\u304c\u6709\u52b9\u304b\u3069\u3046\u304b\u3092\u8abf\u3079\u3066\u3044\u308b\u3002\u5b9f\u969b\u306b\u3053\u306e\u30b3\u30fc\u30c9\u304c\u5b9f\u884c\u3055\u308c\u308b\u4e8b\u306f\u306a\u3044\u3002\n\n> at this point you may sometimes need to be a little creative\n\n\u3068\u8a00\u3063\u3066\u3044\u308b\u901a\u308a\u3001\u3053\u306e\u90e8\u5206\u3092\u5b9f\u88c5\u3059\u308b\u306e\u304c\u3082\u3063\u3068\u3082\u5927\u5909\u3060\u308d\u3046\u3002\n\u4f8b\u3048\u3070`*i++`\u304c`X`\u578b\u3092\u8fd4\u3059\u4e8b\u3092\u78ba\u8a8d\u3059\u308b\u305f\u3081\u306b\u3001\u88dc\u52a9\u95a2\u6570`same_type`\u3092\u5c0e\u5165\u3057\u3066\u3044\u308b\u3002\n\u3053\u306e\u90e8\u5206\u306fTMP\u7528\u306e\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u4f7f\u7528\u3059\u308b\u65b9\u304c\u3044\u3044\u3060\u308d\u3046\u3002\n\n### Values for Usage Patterns Should Be Data Members\n\n\u3053\u3053\u3067`BOOST_CONCEPT_USAGE`\u306b\u4f7f\u7528\u3059\u308b\u30c7\u30fc\u30bf\u30e1\u30f3\u30d0\u30fc\u3092\n\n```cpp\nX i;\nvalue_type v;\n```\n\n\u306e\u3088\u3046\u306b\u30c7\u30fc\u30bf\u30e1\u30f3\u30d0\u30fc\u3068\u3057\u3066\u5b9a\u7fa9\u3059\u308b\u306e\u306f\u3001\n`X`\u304c\u30c7\u30d5\u30a9\u30eb\u30c8\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u3092\u6301\u305f\u306a\u304f\u3066\u3082\u3088\u304f\u306a\u308b\u305f\u3081\u3067\u3042\u308b\u3002\n\n> since instances of the InputIterator template will never be constructed, the compiler never has to check how its data members will be constructed (C++ Standard Section 14.7.1 9)\n\n\u3068\u3042\u308b\u901a\u308a\u3001\u30c7\u30fc\u30bf\u30e1\u30f3\u30d0\u30fc\u306f\u521d\u671f\u5316\u3055\u308c\u306a\u3044\u306e\u3067\u3001\n`BOOST_CONCEPT_USAGE`\u3067\u4f7f\u7528\u3059\u308b\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u306f\u30c7\u30fc\u30bf\u30e1\u30f3\u30d0\u30fc\u3068\u3057\u3066\u5b9a\u7fa9\u3059\u308b\u5fc5\u8981\u304c\u3042\u308b\u3002\n\n\n### Similarity to Proposed C++0x Language Support for Concepts\n\n\u4ed6\u306e\u63d0\u6848\u3055\u308c\u3066\u3044\u308bsyntax\u3068\u306e\u95a2\u4fc2\u304c\u8ff0\u3079\u3066\u3042\u308b\u3002\n\u3053\u306e\u90e8\u5206\u306f\u304a\u305d\u3089\u304f\u53e4\u3044\u306e\u3067\u3001\u3044\u305a\u308c\u8abf\u3079\u308b\u3002\n\n", "tags": ["C++", "boost", "C++14", "tmp", "metaprogramming"]}