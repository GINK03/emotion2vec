{"context": " More than 1 year has passed since last update.\n\n\u306f\u3058\u3081\u306b\n\u524d\u56de\u30af\u30a4\u30c3\u30af\u30bd\u30fc\u30c8\u3092\u5b66\u3093\u3060\u3002\n\u61f8\u5ff5\u70b9\u306f\u3001\u5927\u5c0f\u6bd4\u8f03\u304c\u591a\u3044\u306e\u3067\u3069\u3046\u3057\u3088\u3046\u304b\u3068\u3044\u3046\u70b9\u3067\u3042\u3063\u305f\u3002\nhttp://qiita.com/cof/items/7b94aac6794d12ae020f\n\n\u89e3\u6c7a\u7b56\n\nFizzBuzz\u3068\u6570\u5024\u3068\u3092\u5bfe\u5fdc\u4ed8\u3051\u308b\u30af\u30e9\u30b9\u3092\u4f5c\u308a\u3001\u305d\u306e\u30af\u30e9\u30b9\u3067\u6f14\u7b97\u5b50\u306e\u30aa\u30fc\u30d0\u30ed\u30fc\u30c9\u3092\u884c\u3046\u3002\n\u30e9\u30f3\u30c0\u30e0\u5217\u306e\u8981\u7d20\u3092\u4e0a\u8a18\u30af\u30e9\u30b9\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3067\u7f6e\u304d\u63db\u3048\u308b\u3002\n\u7f6e\u304d\u63db\u3048\u305f\u5f8c\u306e\u30e9\u30f3\u30c0\u30e0\u5217\u3092\u30af\u30a4\u30c3\u30af\u30bd\u30fc\u30c8\u3059\u308b\u3002\n\n\u4e00\u5ea6\u5b8c\u5168\u306b\u6570\u5024\u5316\u3057\u3066\u30af\u30a4\u30c3\u30af\u30bd\u30fc\u30c8\u3057\u3066\u5f8c\u3067FizzBuzz\u306b\u7f6e\u304d\u63db\u3048\u308b\u307b\u3046\u304c\u65e9\u3044\u3051\u3069\u3001\u6f14\u7b97\u5b50\u306e\u30aa\u30fc\u30d0\u30ed\u30fc\u30c9\u306e\u7df4\u7fd2\u3068\u3044\u3046\u3053\u3068\u3067\u3001FizzBuzz\u3068\u6570\u5024\u3068\u3092\u5bfe\u5fdc\u4ed8\u3051\u308b\u30af\u30e9\u30b9\u3092\u4f5c\u3063\u3066\u307f\u305f\u3002\n\u53c2\u8003\uff1a\nhttp://docs.python.jp/2/reference/datamodel.html#customization\n\n\u6f14\u7b97\u5b50\u306e\u30aa\u30fc\u30d0\u30ed\u30fc\u30c9\n\u6587\u5b57\u5217\u7b49(key)\u306b\u5bfe\u5fdc\u4ed8\u3051\u3089\u308c\u305f\u6570\u5024\uff08value\uff09\u306e\u6f14\u7b97\u3092\u884c\u3044\u3001\u7d50\u679c\u306ekey\u306b\u76f8\u5f53\u3059\u308b\u6587\u5b57\u5217\u7b49\u3092\u8fd4\u3059\u30b3\u30fc\u30c9\u3002 \ndef fizzbuzz(n):\n  if (n%15) == 0: return 'FizzBuzz'\n  elif (n%5) == 0: return 'Buzz'\n  elif (n%3) == 0: return 'Fizz'\n  else: return n\n\nclass FizzBuzzNumber:\n  def __init__(self, value):\n    self.key = fizzbuzz(value)\n    self.value = value\n\n  def __call__(self):\n    return self.key\n\n  def __add__(self, other) :\n    return fizzbuzz(self.value + other.value)\n\n  def __sub__(self, other):\n    return fizzbuzz(self.value - other.value)\n\n  def __mul__(self, other):\n    return fizzbuzz(self.value * other.value)\n\n  def __div__(self, other):\n    return fizzbuzz(self.value // other.value)\n\n  def __mod__(self, other):\n    return fizzbuzz(self.value % other.value)\n\n  def __pow__(self, other):\n    return fizzbuzz(self.value ** other.value)\n\n  def __cmp__(self, other):\n    return cmp(self.value, other.value)\n\n  def __lt__(self, other):\n    return cmp(self.value, other.value) == -1\n\n  def __le__(self, other):\n    return cmp(self.value, other.value) in (-1, 0)\n\n  def __eq__(self, other):\n    return cmp(self.value, other.value) == 0\n\n  def __ne__(self, other):\n    return cmp(self.value, other.value) != 0\n\n  def __gt__(self, other):\n    return cmp(self.value, other.value) == 1\n\n  def __ge__(self, other):\n    return cmp(self.value, other.value) in (1, 0)\n\n  def __iadd__(self, other) :\n    self.value += other.value\n    self.key = fizzbuzz(self.value)\n    return self\n\n  def __isub__(self, other) :\n    self.value -= other.value\n    self.key = fizzbuzz(self.value)\n    return self\n\n  def __imul__(self, other) :\n    self.value *= other.value\n    self.key = fizzbuzz(self.value)\n    return self\n\n  def __imod__(self, other) :\n    self.value %= other.value\n    self.key = fizzbuzz(self.value)\n    return self\n\n  def __idiv__(self, other) :\n    self.value /= other.value\n    self.key = fizzbuzz(self.value)\n    return self\n\n  def __ipow__(self, other) :\n    self.value **= other.value\n    self.key = fizzbuzz(self.value)\n    return self\n\n\u4e0b\u8a18\u30b3\u30fc\u30c9\u3092\u5b9f\u884c\u3059\u308b\u3068\u3001\nfizz = FizzBuzzNumber(3)\nbuzz = FizzBuzzNumber(5)\nprint 'fizz + buzz = ', fizz + buzz\nprint 'fizz - buzz = ', fizz - buzz\nprint 'fizz * buzz = ',  fizz * buzz\nprint 'fizz / buzz = ', fizz / buzz\nprint 'fizz % buzz = ', fizz % buzz\nprint 'fizz ** buzz = ', fizz ** buzz\nprint 'fizz > buzz: ', fizz > buzz\nprint 'fizz < buzz: ', fizz < buzz\nprint 'fizz == buzz: ', fizz == buzz\nprint 'fizz != buzz: ', fizz != buzz\nprint 'fizz <= buzz: ', fizz <= buzz\nprint 'fizz >= buzz: ', fizz >= buzz\nprint 'fizz():', fizz()\nfizz += buzz\nprint 'fizz += buzz => fizz() = ' , fizz()\nfizz -= buzz\nprint 'fizz -= buzz => fizz() = ' , fizz()\nfizz *= buzz\nprint 'fizz *= buzz => fizz() = ' , fizz()\nfizz /= buzz\nprint 'fizz /= buzz => fizz() = ' , fizz()\nfizz %= buzz\nprint 'fizz %= buzz => fizz() = ', fizz()\nfizz **= buzz\nprint 'fizz **= buzz => fizz() = ', fizz()\n\n\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u7d50\u679c\u304c\u51fa\u529b\u3055\u308c\u308b\u3002\nfizz + buzz =  8\nfizz - buzz =  -2\nfizz * buzz =  FizzBuzz\nfizz / buzz =  FizzBuzz\nfizz % buzz =  Fizz\nfizz ** buzz =  Fizz\nfizz > buzz =  False\nfizz < buzz =  True\nfizz == buzz:  False\nfizz != buzz:  True\nfizz <= buzz:  True\nfizz >= buzz:  False\nfizz(): Fizz\nfizz += buzz => fizz() =  8\nfizz -= buzz => fizz() =  Fizz\nfizz *= buzz => fizz() =  FizzBuzz\nfizz /= buzz => fizz() =  Fizz\nfizz %= buzz => fizz() =  Fizz\nfizz **= buzz => fizz() =  Fizz\n\n\n\u6570\u5024\u5316\u3059\u308b\u95a2\u6570\n\u5f8c\u306f\u30e9\u30f3\u30c0\u30e0\u5217\u306b\u51fa\u3066\u304d\u305fFizzBuzz\u3092\u6570\u5024\u5316\u3059\u308b\u305f\u3081\u306e\u30af\u30e9\u30b9\u3092\u4f5c\u3063\u3066\u307f\u305f\u3002\nclass FizzBuzzCounter:\n  def __init__(self, f_start, b_start, fb_start):\n    self.f = f_start\n    self.b = b_start\n    self.fb = fb_start\n\n  def get_value(self, s):\n    if s == 'FizzBuzz': \n      return self.fb\n    elif s == 'Buzz': \n      return self.b\n    elif s == 'Fizz': \n      return self.f\n    else: \n      return s\n\n  def next(self, s):\n    if s == 'FizzBuzz': \n      self.fb += 15\n    elif s == 'Buzz': \n      if (self.b % 15) == 10:\n         self.b += 10\n      else:\n         self.b += 5\n    elif s == 'Fizz': \n      if (self.f % 15) == 12:\n         self.f += 6\n      else:\n         self.f += 3\n    else: \n      pass\n\n\nFizzBuzz\u5217\u3092\u7f6e\u304d\u63db\u3048\u308b\u95a2\u6570\n\u4e0a\u8a182\u30af\u30e9\u30b9\u3092\u4f7f\u3063\u3066\u3001\u4e0e\u3048\u3089\u308c\u305fFizzBuzz\u5217\u306e\u8981\u7d20\u3092FizzBuzzNumber\u30af\u30e9\u30b9\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u306b\u7f6e\u304d\u63db\u3048\u305f\u5217\u3092\u4f5c\u308b\u95a2\u6570\u3092\u4f5c\u3063\u305f\u3002\ndef recreate_fizzbuzz_seq(seq):\n  counter = FizzBuzzCounter(3,5,15)\n  ret = []\n  for e in seq:\n   ret.append(FizzBuzzNumber(counter.get_value(e)))\n   counter.next(e)\n  return ret\n\n\u5f8c\u306f\u524d\u56de\u3064\u304f\u3063\u305f\u30af\u30a4\u30c3\u30af\u30bd\u30fc\u30c8\u95a2\u6570\u306b\u4e0a\u8a18\u65b0\u305f\u306a\u5217\u3092\u4e0e\u3048\u308b\u3060\u3051\u3002\n\n\u524d\u56de\u4f5c\u3063\u305f\u30af\u30a4\u30c3\u30af\u30bd\u30fc\u30c8\u95a2\u6570\ndef pivot(target, i, j):\n  k = i + 1\n  while k <= j and target[i] == target[k]: k += 1\n  if k > j: return -1\n  if target[i] >= target[k]: \n    return i\n  else:\n    return k\n\ndef partition(target, i, j, x):\n  l, r = i, j\n  while l <= r:\n    while l <= j and target[l] < x: l += 1\n    while r >= i and target[r] >= x: r -= 1\n    if l > r: break\n    target[l], target[r] = target[r], target[l]\n    l, r = l + 1, r - 1\n  return l\n\ndef quick_sort(target,i ,j):\n  if i == j: return \n  p = pivot(target, i, j)\n  if p != -1:\n    k = partition(target, i, j, target[p])\n    quick_sort(target, i, k-1)\n    quick_sort(target, k, j)\n\n\n\u30e9\u30f3\u30c0\u30e0\u306aFizzBuzz\u5217\u3092\u4f5c\u308b\u95a2\u6570\ndef make_random_fizzbuzz(start=1,finish=100):\n  seq = range(start,finish+1)\n  random_fizzbuzz = []\n  while seq:\n    random_fizzbuzz.append(fizzbuzz(seq.pop(random.randint(0,len(seq)-1))))\n  return random_fizzbuzz\n\n\n\u30e1\u30a4\u30f3\u95a2\u6570\n\u4e0e\u3048\u3089\u308c\u305fFizzBuzz\u5217\u3092recreate_fizzbuzz_seq()\u306b\u4e0e\u3048\u3066\u65b0\u305f\u306a\u5217\u3092\u4f5c\u308a\u3001\u65b0\u305f\u306a\u5217\u3092\u30af\u30a4\u30c3\u30af\u30bd\u30fc\u30c8\u306b\u4e0e\u3048\u308b\u95a2\u6570\ndef fizzbuzz_sort(target):\n  newtarget = recreate_fizzbuzz_seq(target)\n  quick_sort(newtarget,0,len(newtarget)-1)\n  return newtarget\n\n\u8d77\u52d5\u306f\u6b21\u306e\u3088\u3046\u306b\u884c\u3046\u3002\nfizzbuzz_sort(make_random_fizzbuzz())\n\n\n\u611f\u60f3\n\u3053\u3093\u306a\u304f\u3060\u3089\u306a\u3044\u3053\u3068\u3092\u3084\u3063\u3066\u3044\u308b\u4ffa\u306f\u3042\u307b\u3084\u3002\u3042\u3068__add__()\u7b49\u304c\u8fd4\u3059\u306e\u306f\u65b0\u305f\u306aFizzBuzzNumber\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u306e\u307b\u3046\u304c\u3088\u304b\u3063\u305f\u304b\u306a\u3002\n\u306f\u3058\u3081\u306b\n---\n\u524d\u56de\u30af\u30a4\u30c3\u30af\u30bd\u30fc\u30c8\u3092\u5b66\u3093\u3060\u3002\n\u61f8\u5ff5\u70b9\u306f\u3001\u5927\u5c0f\u6bd4\u8f03\u304c\u591a\u3044\u306e\u3067\u3069\u3046\u3057\u3088\u3046\u304b\u3068\u3044\u3046\u70b9\u3067\u3042\u3063\u305f\u3002\nhttp://qiita.com/cof/items/7b94aac6794d12ae020f\n\n\u89e3\u6c7a\u7b56\n---\n1. FizzBuzz\u3068\u6570\u5024\u3068\u3092\u5bfe\u5fdc\u4ed8\u3051\u308b\u30af\u30e9\u30b9\u3092\u4f5c\u308a\u3001\u305d\u306e\u30af\u30e9\u30b9\u3067\u6f14\u7b97\u5b50\u306e\u30aa\u30fc\u30d0\u30ed\u30fc\u30c9\u3092\u884c\u3046\u3002\n2. \u30e9\u30f3\u30c0\u30e0\u5217\u306e\u8981\u7d20\u3092\u4e0a\u8a18\u30af\u30e9\u30b9\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3067\u7f6e\u304d\u63db\u3048\u308b\u3002\n3. \u7f6e\u304d\u63db\u3048\u305f\u5f8c\u306e\u30e9\u30f3\u30c0\u30e0\u5217\u3092\u30af\u30a4\u30c3\u30af\u30bd\u30fc\u30c8\u3059\u308b\u3002\n\n\u4e00\u5ea6\u5b8c\u5168\u306b\u6570\u5024\u5316\u3057\u3066\u30af\u30a4\u30c3\u30af\u30bd\u30fc\u30c8\u3057\u3066\u5f8c\u3067FizzBuzz\u306b\u7f6e\u304d\u63db\u3048\u308b\u307b\u3046\u304c\u65e9\u3044\u3051\u3069\u3001\u6f14\u7b97\u5b50\u306e\u30aa\u30fc\u30d0\u30ed\u30fc\u30c9\u306e\u7df4\u7fd2\u3068\u3044\u3046\u3053\u3068\u3067\u3001FizzBuzz\u3068\u6570\u5024\u3068\u3092\u5bfe\u5fdc\u4ed8\u3051\u308b\u30af\u30e9\u30b9\u3092\u4f5c\u3063\u3066\u307f\u305f\u3002\n\u53c2\u8003\uff1a\nhttp://docs.python.jp/2/reference/datamodel.html#customization\n\n\u6f14\u7b97\u5b50\u306e\u30aa\u30fc\u30d0\u30ed\u30fc\u30c9\n---\n\n\u6587\u5b57\u5217\u7b49(key)\u306b\u5bfe\u5fdc\u4ed8\u3051\u3089\u308c\u305f\u6570\u5024\uff08value\uff09\u306e\u6f14\u7b97\u3092\u884c\u3044\u3001\u7d50\u679c\u306ekey\u306b\u76f8\u5f53\u3059\u308b\u6587\u5b57\u5217\u7b49\u3092\u8fd4\u3059\u30b3\u30fc\u30c9\u3002 \n\n```py\ndef fizzbuzz(n):\n  if (n%15) == 0: return 'FizzBuzz'\n  elif (n%5) == 0: return 'Buzz'\n  elif (n%3) == 0: return 'Fizz'\n  else: return n\n\nclass FizzBuzzNumber:\n  def __init__(self, value):\n    self.key = fizzbuzz(value)\n    self.value = value\n\n  def __call__(self):\n    return self.key\n\n  def __add__(self, other) :\n    return fizzbuzz(self.value + other.value)\n\n  def __sub__(self, other):\n    return fizzbuzz(self.value - other.value)\n\n  def __mul__(self, other):\n    return fizzbuzz(self.value * other.value)\n\n  def __div__(self, other):\n    return fizzbuzz(self.value // other.value)\n\n  def __mod__(self, other):\n    return fizzbuzz(self.value % other.value)\n\n  def __pow__(self, other):\n    return fizzbuzz(self.value ** other.value)\n\n  def __cmp__(self, other):\n    return cmp(self.value, other.value)\n\n  def __lt__(self, other):\n    return cmp(self.value, other.value) == -1\n\n  def __le__(self, other):\n    return cmp(self.value, other.value) in (-1, 0)\n\n  def __eq__(self, other):\n    return cmp(self.value, other.value) == 0\n\n  def __ne__(self, other):\n    return cmp(self.value, other.value) != 0\n\n  def __gt__(self, other):\n    return cmp(self.value, other.value) == 1\n\n  def __ge__(self, other):\n    return cmp(self.value, other.value) in (1, 0)\n\n  def __iadd__(self, other) :\n    self.value += other.value\n    self.key = fizzbuzz(self.value)\n    return self\n\n  def __isub__(self, other) :\n    self.value -= other.value\n    self.key = fizzbuzz(self.value)\n    return self\n\n  def __imul__(self, other) :\n    self.value *= other.value\n    self.key = fizzbuzz(self.value)\n    return self\n\n  def __imod__(self, other) :\n    self.value %= other.value\n    self.key = fizzbuzz(self.value)\n    return self\n\n  def __idiv__(self, other) :\n    self.value /= other.value\n    self.key = fizzbuzz(self.value)\n    return self\n\n  def __ipow__(self, other) :\n    self.value **= other.value\n    self.key = fizzbuzz(self.value)\n    return self\n```\n\n\u4e0b\u8a18\u30b3\u30fc\u30c9\u3092\u5b9f\u884c\u3059\u308b\u3068\u3001\n\n```py\nfizz = FizzBuzzNumber(3)\nbuzz = FizzBuzzNumber(5)\nprint 'fizz + buzz = ', fizz + buzz\nprint 'fizz - buzz = ', fizz - buzz\nprint 'fizz * buzz = ',  fizz * buzz\nprint 'fizz / buzz = ', fizz / buzz\nprint 'fizz % buzz = ', fizz % buzz\nprint 'fizz ** buzz = ', fizz ** buzz\nprint 'fizz > buzz: ', fizz > buzz\nprint 'fizz < buzz: ', fizz < buzz\nprint 'fizz == buzz: ', fizz == buzz\nprint 'fizz != buzz: ', fizz != buzz\nprint 'fizz <= buzz: ', fizz <= buzz\nprint 'fizz >= buzz: ', fizz >= buzz\nprint 'fizz():', fizz()\nfizz += buzz\nprint 'fizz += buzz => fizz() = ' , fizz()\nfizz -= buzz\nprint 'fizz -= buzz => fizz() = ' , fizz()\nfizz *= buzz\nprint 'fizz *= buzz => fizz() = ' , fizz()\nfizz /= buzz\nprint 'fizz /= buzz => fizz() = ' , fizz()\nfizz %= buzz\nprint 'fizz %= buzz => fizz() = ', fizz()\nfizz **= buzz\nprint 'fizz **= buzz => fizz() = ', fizz()\n```\n\n\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u7d50\u679c\u304c\u51fa\u529b\u3055\u308c\u308b\u3002\n\n```py\nfizz + buzz =  8\nfizz - buzz =  -2\nfizz * buzz =  FizzBuzz\nfizz / buzz =  FizzBuzz\nfizz % buzz =  Fizz\nfizz ** buzz =  Fizz\nfizz > buzz =  False\nfizz < buzz =  True\nfizz == buzz:  False\nfizz != buzz:  True\nfizz <= buzz:  True\nfizz >= buzz:  False\nfizz(): Fizz\nfizz += buzz => fizz() =  8\nfizz -= buzz => fizz() =  Fizz\nfizz *= buzz => fizz() =  FizzBuzz\nfizz /= buzz => fizz() =  Fizz\nfizz %= buzz => fizz() =  Fizz\nfizz **= buzz => fizz() =  Fizz\n```\n\n\u6570\u5024\u5316\u3059\u308b\u95a2\u6570\n---\n\u5f8c\u306f\u30e9\u30f3\u30c0\u30e0\u5217\u306b\u51fa\u3066\u304d\u305fFizzBuzz\u3092\u6570\u5024\u5316\u3059\u308b\u305f\u3081\u306e\u30af\u30e9\u30b9\u3092\u4f5c\u3063\u3066\u307f\u305f\u3002\n\n```py\nclass FizzBuzzCounter:\n  def __init__(self, f_start, b_start, fb_start):\n    self.f = f_start\n    self.b = b_start\n    self.fb = fb_start\n\n  def get_value(self, s):\n    if s == 'FizzBuzz': \n      return self.fb\n    elif s == 'Buzz': \n      return self.b\n    elif s == 'Fizz': \n      return self.f\n    else: \n      return s\n\n  def next(self, s):\n    if s == 'FizzBuzz': \n      self.fb += 15\n    elif s == 'Buzz': \n      if (self.b % 15) == 10:\n         self.b += 10\n      else:\n         self.b += 5\n    elif s == 'Fizz': \n      if (self.f % 15) == 12:\n         self.f += 6\n      else:\n         self.f += 3\n    else: \n      pass\n```\n\nFizzBuzz\u5217\u3092\u7f6e\u304d\u63db\u3048\u308b\u95a2\u6570\n---\n\u4e0a\u8a182\u30af\u30e9\u30b9\u3092\u4f7f\u3063\u3066\u3001\u4e0e\u3048\u3089\u308c\u305fFizzBuzz\u5217\u306e\u8981\u7d20\u3092FizzBuzzNumber\u30af\u30e9\u30b9\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u306b\u7f6e\u304d\u63db\u3048\u305f\u5217\u3092\u4f5c\u308b\u95a2\u6570\u3092\u4f5c\u3063\u305f\u3002\n\n```py\ndef recreate_fizzbuzz_seq(seq):\n  counter = FizzBuzzCounter(3,5,15)\n  ret = []\n  for e in seq:\n   ret.append(FizzBuzzNumber(counter.get_value(e)))\n   counter.next(e)\n  return ret\n```\n\n\u5f8c\u306f\u524d\u56de\u3064\u304f\u3063\u305f\u30af\u30a4\u30c3\u30af\u30bd\u30fc\u30c8\u95a2\u6570\u306b\u4e0a\u8a18\u65b0\u305f\u306a\u5217\u3092\u4e0e\u3048\u308b\u3060\u3051\u3002\n\n\u524d\u56de\u4f5c\u3063\u305f\u30af\u30a4\u30c3\u30af\u30bd\u30fc\u30c8\u95a2\u6570\n---\n```py\ndef pivot(target, i, j):\n  k = i + 1\n  while k <= j and target[i] == target[k]: k += 1\n  if k > j: return -1\n  if target[i] >= target[k]: \n    return i\n  else:\n    return k\n\ndef partition(target, i, j, x):\n  l, r = i, j\n  while l <= r:\n    while l <= j and target[l] < x: l += 1\n    while r >= i and target[r] >= x: r -= 1\n    if l > r: break\n    target[l], target[r] = target[r], target[l]\n    l, r = l + 1, r - 1\n  return l\n\ndef quick_sort(target,i ,j):\n  if i == j: return \n  p = pivot(target, i, j)\n  if p != -1:\n    k = partition(target, i, j, target[p])\n    quick_sort(target, i, k-1)\n    quick_sort(target, k, j)\n```\n\n\u30e9\u30f3\u30c0\u30e0\u306aFizzBuzz\u5217\u3092\u4f5c\u308b\u95a2\u6570\n---\n```py\ndef make_random_fizzbuzz(start=1,finish=100):\n  seq = range(start,finish+1)\n  random_fizzbuzz = []\n  while seq:\n    random_fizzbuzz.append(fizzbuzz(seq.pop(random.randint(0,len(seq)-1))))\n  return random_fizzbuzz\n```\n\n\n\u30e1\u30a4\u30f3\u95a2\u6570\n---\n\u4e0e\u3048\u3089\u308c\u305fFizzBuzz\u5217\u3092recreate_fizzbuzz_seq()\u306b\u4e0e\u3048\u3066\u65b0\u305f\u306a\u5217\u3092\u4f5c\u308a\u3001\u65b0\u305f\u306a\u5217\u3092\u30af\u30a4\u30c3\u30af\u30bd\u30fc\u30c8\u306b\u4e0e\u3048\u308b\u95a2\u6570\n\n```py\ndef fizzbuzz_sort(target):\n  newtarget = recreate_fizzbuzz_seq(target)\n  quick_sort(newtarget,0,len(newtarget)-1)\n  return newtarget\n```\n\n\u8d77\u52d5\u306f\u6b21\u306e\u3088\u3046\u306b\u884c\u3046\u3002\n\n```\nfizzbuzz_sort(make_random_fizzbuzz())\n```\n\n\u611f\u60f3\n---\n\u3053\u3093\u306a\u304f\u3060\u3089\u306a\u3044\u3053\u3068\u3092\u3084\u3063\u3066\u3044\u308b\u4ffa\u306f\u3042\u307b\u3084\u3002\u3042\u3068`__add__()`\u7b49\u304c\u8fd4\u3059\u306e\u306f\u65b0\u305f\u306aFizzBuzzNumber\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u306e\u307b\u3046\u304c\u3088\u304b\u3063\u305f\u304b\u306a\u3002\n", "tags": ["Python", "FizzBuzz"]}