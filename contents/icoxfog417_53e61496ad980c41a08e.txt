{"context": "\u6a5f\u68b0\u5b66\u7fd2\u3092\u884c\u3046\u305f\u3081\u306b\u3001\u753b\u50cf\u304b\u3089\u7279\u5b9a\u306e\u7269\u4f53(\u9818\u57df)\u3060\u3051\u5207\u308a\u51fa\u3057\u3066\u8a8d\u8b58\u3057\u305f\u308a\u5b66\u7fd2\u30c7\u30fc\u30bf\u3092\u4f5c\u308a\u305f\u3044\u3001\u3068\u3044\u3046\u3053\u3068\u304c\u3088\u304f\u3042\u308b\u3068\u601d\u3044\u307e\u3059\u3002\n\u672c\u7a3f\u3067\u306f\u975e\u5e38\u306b\u591a\u304f\u306e\u6a5f\u80fd\u3092\u6301\u3064OpenCV\u306e\u4e2d\u304b\u3089\u3001\u305d\u3046\u3057\u305f\u6a5f\u68b0\u5b66\u7fd2\u306e\u305f\u3081\u306b\u5229\u7528\u3059\u308b\u6a5f\u80fd\u306b\u30d5\u30a9\u30fc\u30ab\u30b9\u3057\u3066\u305d\u306e\u5229\u7528\u65b9\u6cd5\u3092\u7d39\u4ecb\u3057\u3066\u3044\u304d\u305f\u3044\u3068\u601d\u3044\u307e\u3059\u3002\u5177\u4f53\u7684\u306b\u306f\u3001\u4e0b\u8a18\u306e\u30e2\u30b8\u30e5\u30fc\u30eb\u3092\u4e2d\u5fc3\u306b\u6271\u3044\u307e\u3059\u3002\n\nCVPR 2015 Tutorials\n\u57fa\u672c\u7684\u306a\u5207\u308a\u51fa\u3057\u306e\u624b\u9806\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002\u4ee5\u4e0b\u3067\u306f\u3001\u3053\u306e\u30d7\u30ed\u30bb\u30b9\u306b\u5247\u308a\u89e3\u8aac\u3092\u884c\u3063\u3066\u3044\u3053\u3046\u3068\u601d\u3044\u307e\u3059\u3002\n\n\u524d\u51e6\u7406: \u7269\u4f53\u691c\u51fa\u304c\u884c\u3044\u3084\u3059\u3044\u3088\u3046\u306b\u3001\u753b\u50cf\u306e\u524d\u51e6\u7406\u3092\u884c\u3044\u307e\u3059\n\u7269\u4f53\u691c\u51fa: \u7269\u4f53\u306e\u691c\u51fa\u3092\u884c\u3044\u3001\u753b\u50cf\u304b\u3089\u5207\u308a\u51fa\u3057\u307e\u3059\n\n\n\u8f2a\u90ed\u691c\u51fa: \u753b\u50cf\u4e0a\u306e\u9818\u57df(\u8f2a\u90ed)\u3092\u8a8d\u8b58\u3059\u308b\u3053\u3068\u3067\u3001\u7269\u4f53\u3092\u691c\u51fa\u3057\u307e\u3059\n\u7269\u4f53\u8a8d\u8b58: OpenCV\u306e\u5b66\u7fd2\u6e08\u307f\u30e2\u30c7\u30eb\u3092\u5229\u7528\u3057\u3066\u5bfe\u8c61\u306e\u7269\u4f53\u3092\u8a8d\u8b58\u3057\u3001\u691c\u51fa\u3092\u884c\u3044\u307e\u3059\n\n\n\u6a5f\u68b0\u5b66\u7fd2\u306e\u6e96\u5099: \u5207\u308a\u51fa\u3057\u305f\u753b\u50cf\u3092\u7528\u3044\u3001\u4e88\u6e2c\u3084\u5b66\u7fd2\u3092\u884c\u3046\u305f\u3081\u306e\u6e96\u5099\u3092\u884c\u3044\u307e\u3059\n\n\u307e\u305f\u3001OpenCV\u306e\u74b0\u5883\u69cb\u7bc9\u306b\u3064\u3044\u3066\u306fminiconda\u3092\u5229\u7528\u3057\u3066\u3044\u307e\u3059\u3002\u3053\u3061\u3089\u3092\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3057\u3001\u4ee5\u4e0b\u306e\u30b3\u30de\u30f3\u30c9\u3092\u6253\u3066\u3070\u74b0\u5883\u69cb\u7bc9\u306f\u3082\u3046\u5b8c\u4e86\u3067\u3059\u3002\n\nconda create -n cv_env numpy jupyter matplotlib\nconda install -c https://conda.anaconda.org/menpo opencv3\nactivate cv_env\n\n(\u203b\u4eee\u60f3\u74b0\u5883\u306e\u540d\u524d\u306fcv_env\u3067\u3042\u308b\u5fc5\u8981\u306f\u3042\u308a\u307e\u305b\u3093\u3002\u307e\u305f\u3001Mac/Linux\u3060\u3068activate\u304c\u843d\u3061\u308b\u306e\u3067\u3061\u3087\u3063\u3068\u5bfe\u5fdc\u304c\u5fc5\u8981\u3067\u3059\u3002\u8a73\u3057\u304f\u306f\u3053\u3061\u3089\u3092\u3054\u53c2\u7167\u304f\u3060\u3055\u3044)\n\u4eca\u56de\u3054\u7d39\u4ecb\u3057\u3066\u3044\u308b\u30b3\u30fc\u30c9\u306f\u4ee5\u4e0b\u306e\u30ea\u30dd\u30b8\u30c8\u30ea\u3067\u516c\u958b\u3057\u3066\u3044\u307e\u3059\u3002\u5fc5\u8981\u306b\u5fdc\u3058\u53c2\u7167\u3044\u305f\u3060\u3051\u308c\u3070\u3068\u601d\u307e\u3059\u3002\nicoxfog417/cv_tutorial\n\n\u524d\u51e6\u7406\n\u7269\u4f53\u306e\u691c\u51fa\u3092\u884c\u3046\u969b\u306b\u306f\u3001\u300c\u8f2a\u90ed\u304c\u306f\u3063\u304d\u308a\u300d\u3057\u3066\u3044\u3066\u300c\u9023\u7d9a\u3057\u3066\u3044\u308b\u300d\u3068\u90fd\u5408\u304c\u826f\u3044\u3067\u3059\u3002\n\n\u3053\u306e\u305f\u3081\u306b\u52b9\u679c\u7684\u306a\u624b\u6cd5\u304c\u3001\u300c\u95be\u5024\u51e6\u7406\u300d\u3068\u300c\u30d5\u30a3\u30eb\u30bf\u30fc\u51e6\u7406(\u307c\u304b\u3057)\u300d\u306b\u306a\u308a\u307e\u3059\u3002\u3053\u306e\u30bb\u30af\u30b7\u30e7\u30f3\u3067\u306f\u3053\u306e2\u3064\u306b\u91cd\u70b9\u3092\u7f6e\u304d\u89e3\u8aac\u3057\u3066\u3044\u304d\u307e\u3059\u3002\u306a\u304a\u3001\u753b\u50cf\u51e6\u7406\u3092\u884c\u3046\u5834\u5408\u305f\u3044\u3066\u3044\u306f\u4e8b\u524d\u306b\u30b0\u30ec\u30fc\u30b9\u30b1\u30fc\u30eb\u5316\u3092\u884c\u3046\u305f\u3081\u3001\u305d\u308c\u306b\u3064\u3044\u3066\u3082\u89e6\u308c\u3066\u304a\u304d\u307e\u3059\u3002\n\n\u30b0\u30ec\u30fc\u30b9\u30b1\u30fc\u30eb\u5316\n\u753b\u50cf\u51e6\u7406\u306b\u304a\u3044\u3066\u30ab\u30e9\u30fc\u60c5\u5831\u304c\u5fc5\u8981\u306b\u306a\u308b\u3053\u3068\u306f\u307b\u3068\u3093\u3069\u306a\u3044\u305f\u3081\u3001\u4e8b\u524d\u306b\u30b0\u30ec\u30fc\u30b9\u30b1\u30fc\u30eb\u5316\u3092\u884c\u3046\u3053\u3068\u304c\u3068\u3066\u3082\u591a\u3044\u3067\u3059\u3002\u305f\u3060\u3057\u3001\u6700\u7d42\u7684\u306b\u6a5f\u68b0\u5b66\u7fd2\u3067\u4f7f\u7528\u3059\u308b\u969b\u306fRGB\u60c5\u5831\u304c\u5fc5\u8981\u306a\u3053\u3068\u304c\u591a\u3044\u305f\u3081\u3001\u753b\u50cf\u304b\u3089\u5207\u308a\u51fa\u3057\u3092\u884c\u3046\u969b\u306f\u30ab\u30e9\u30fc\u306e\u65b9\u304b\u3089\u884c\u308f\u306a\u3044\u3068\u3044\u3051\u306a\u3044\u70b9\u306b\u6ce8\u610f\u3057\u3066\u304f\u3060\u3055\u3044\u3002\nOpenCV\u3067\u30ab\u30e9\u30fc\u753b\u50cf\u3092\u30b0\u30ec\u30fc\u30b9\u30b1\u30fc\u30eb\u5316\u3059\u308b\u306e\u306f\u3068\u3066\u3082\u7c21\u5358\u3067\u3059\u3002cv2.cvtColor\u3067cv2.COLOR_BGR2GRAY\u3092\u6307\u5b9a\u3059\u308b\u3060\u3051\u3067\u3059\u3002\nimport cv2\n\n\ndef to_grayscale(path):\n    img = cv2.imread(path)\n    grayed = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)\n    return grayed\n\n\ncv2.COLOR_BGR2GRAY\u306e\u540d\u524d\u306e\u901a\u308a\u3001cv2.imread\u3067\u8aad\u307f\u8fbc\u307e\u308c\u308b\u753b\u50cf\u306f\u8272\u60c5\u5831\u304cBGR(\u9752\u7dd1\u8d64)\u306e\u9806\u3067\u8aad\u307f\u8fbc\u307e\u308c\u3066\u3044\u307e\u3059\u3002\u753b\u50cf\u3092\u8aad\u307f\u8fbc\u3093\u3060\u5909\u6570\u306f(numpy\u306e)\u884c\u5217\u3068\u306a\u3063\u3066\u3044\u307e\u3059\u304c\u3001\u305d\u306e\u30b5\u30a4\u30ba\u3092\u78ba\u8a8d\u3059\u308b\u3068\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u3002\nimg = cv2.imread(IMAGE_PATH)\nimg.shape\n>>> (348, 800, 3)\n\n\u3053\u308c\u306f\u3001\u8aad\u307f\u8fbc\u3093\u3060\u753b\u50cf\u304c348x800x3\u306e\u884c\u5217\u3067\u8868\u73fe\u3055\u308c\u3066\u3044\u308b\u3053\u3068\u3092\u8868\u3057\u3066\u3044\u307e\u3059\u3002\u30a4\u30e1\u30fc\u30b8\u7684\u306b\u306f\u3001\u4e0b\u56f3\u306e\u3088\u3046\u306a\u611f\u3058\u306b\u306a\u308a\u307e\u3059\u3002\n\n\u306a\u304a\u3001\u753b\u50cf\u3092\u8868\u793a\u3057\u305f\u308a\u3059\u308b\u306e\u306b\u826f\u304f\u4f7f\u3046matplotlib\u306f\u3001\u753b\u50cf\u304cRGB\u3067\u5165\u3063\u3066\u304f\u308b\u3053\u3068\u3092\u671f\u5f85\u3057\u3066\u3044\u307e\u3059\u3002\u305d\u306e\u305f\u3081\u3001OpenCV\u3067\u8aad\u307f\u8fbc\u3093\u3060\u753b\u50cf\u3092\u305d\u306e\u307e\u307ematplotlib\u306b\u3076\u3063\u3053\u3080\u3068\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3059(\u5de6\u304c\u5143\u306e\u753b\u50cf\u3001\u53f3\u304cOpenCV\u3067\u8aad\u307f\u8fbc\u3093\u3060\u3082\u306e\u3092\u305d\u306e\u307e\u307ematplotlib\u3067\u8868\u793a\u3057\u305f\u3082\u306e)\u3002\n\n\u753b\u50cf\u51fa\u5178\n\u305d\u306e\u305f\u3081\u3001matplotlib\u3067\u8868\u793a\u3059\u308b\u969b\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u30ab\u30e9\u30fc\u306e\u9806\u756a\u3092\u5909\u66f4\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\ndef to_matplotlib_format(img):\n    return cv2.cvtColor(img, cv2.COLOR_BGR2RGB)\n\n\n\u95be\u5024\u51e6\u7406\n\u95be\u5024\u51e6\u7406\u3068\u306f\u3001\u3042\u308b\u4e00\u5b9a\u306e\u95be\u5024(threshold)\u3092\u8d85\u3048\u3066\u3044\u308b\u304b\u5426\u304b\u3067\u753b\u50cf\u51e6\u7406\u3092\u884c\u3046\u3053\u3068\u3067\u3059\u3002\u4f8b\u3048\u3070\u8f1d\u5ea6\u304c\u4e00\u5b9a\u5024\u306b\u9054\u3057\u3066\u3044\u306a\u3044\u3068\u3053\u308d\u3092\u3059\u3079\u30660\u306b\u3059\u308b\u3001\u3068\u3044\u3063\u305f\u3088\u3046\u306a\u51e6\u7406\u3067\u3059\u3002\u3053\u308c\u306b\u3088\u308a\u80cc\u666f\u3092\u843d\u3068\u3057\u305f\u308a\u8f2a\u90ed\u3092\u5f37\u8abf\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u3001\u4e0b\u56f3\u306e\u3088\u3046\u306a\u5177\u5408\u306b\u52a0\u5de5\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059(\u5de6\u5074\u304c\u5143\u306e\u753b\u50cf\u3001\u53f3\u5074\u304c\u95be\u5024\u51e6\u7406\u3092\u884c\u3063\u305f\u3082\u306e)\u3002\n\nOpenCV\u306b\u304a\u3051\u308b\u95be\u5024\u51e6\u7406\u306f\u3001cv2.threshold\u3067\u5b9f\u884c\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\u3053\u3053\u3067\u306e\u4e3b\u8981\u306a\u30d1\u30e9\u30e1\u30fc\u30bf\u30fc\u306f\u3001\u95be\u5024\u3068\u306a\u308bthresh\u3001\u5024\u306e\u4e0a\u9650\u3067\u3042\u308bmaxval\u3001\u95be\u5024\u51e6\u7406\u306e\u7a2e\u5225\u3067\u3042\u308btype\u306b\u306a\u308a\u307e\u3059\u3002\n\u4e0b\u8868\u306f\u3001\u95be\u5024\u51e6\u7f6e\u306etype\u306e\u7a2e\u5225\u3068\u3001\u305d\u306e\u969b\u306b\u95be\u5024(thresh)/\u4e0a\u9650(maxValue)\u304c\u3069\u3046\u4f7f\u7528\u3055\u308c\u308b\u306e\u304b\u306b\u3064\u3044\u3066\u307e\u3068\u3081\u305f\u3082\u306e\u3067\u3059\u3002\n\n\n\nThreshold Type\nover thresh \n\nunder thresh \n\n\n\n\n\nTHRESH_BINARY\nmaxValue\n0\n\n\nTHRESH_BINARY_INV\n0\nmaxValue\n\n\nTHRESH_TRUNC\nthreshold\n(as is)\n\n\nTHRESH_TOZERO\n(as is)\n0\n\n\nTHRESH_TOZERO_INV\n0\n(as is)\n\n\n\n(as is)\u306f\u3001\u5143\u306e\u753b\u50cf\u306e\u5024\u304c\u305d\u306e\u307e\u307e\u4f7f\u7528\u3055\u308c\u308b\u3068\u3044\u3046\u610f\u5473\u3067\u3059\u3002\u95be\u5024\u51e6\u7406\u306b\u3064\u3044\u3066\u8a73\u7d30\u3092\u77e5\u308a\u305f\u3044\u65b9\u306f\u3001\u4e0b\u8a18\u306e\u8cc7\u6599\u304c\u53c2\u8003\u306b\u306a\u308a\u307e\u3059\u3002\nOpenCV Threshold ( Python , C++ )\n\u4eca\u56de\u5229\u7528\u3057\u305f\u9ce5\u306e\u753b\u50cf\u306f\u3001\u80cc\u666f\u306e\u9752\u8272\u3092\u843d\u3068\u3059\u4ee5\u5916\u306b\u3001\u9ce5\u306e\u7fbd\u90e8\u5206\u306e\u5883\u754c(\u660e\u308b\u3044)\u3092\u660e\u78ba\u306b\u3059\u308b\u3088\u3046\u306b\u3057\u3066\u3044\u307e\u3059\u3002\n\n\u80cc\u666f\u3092\u843d\u3068\u3059->THRESH_BINARY\n\n\n\u95be\u5024\u3088\u308a\u5927\u304d\u3044\u7b87\u6240(=\u660e\u308b\u3044=\u8584\u3044=\u80cc\u666f): maxValue(255=\u767d=\u6d88\u3059)\n\u95be\u5024\u672a\u6e80: 0(\u9ed2=\u5f37\u8abf)\n\n\n\u5883\u754c\u306e\u660e\u78ba\u5316->THRESH_BINARY_INV\n\n\n\u95be\u5024\u3088\u308a\u5927\u304d\u3044\u7b87\u6240(=\u660e\u308b\u3044=\u9ce5\u306e\u9aa8=\u5883\u754c): 0(\u9ed2=\u5f37\u8abf)\n\u95be\u5024\u672a\u6e80: maxValue(255=\u767d=\u6d88\u3059)\n\n\n\n\u305d\u3057\u3066\u3001\u6700\u5f8c\u306b\u3053\u306e2\u3064\u306e\u51e6\u7406\u7d50\u679c\u3092\u30de\u30fc\u30b8\u3057\u3066\u3044\u307e\u3059\u3002\ndef binary_threshold(path):\n    img = cv2.imread(path)\n    grayed = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)\n    under_thresh = 105\n    upper_thresh = 145\n    maxValue = 255\n    th, drop_back = cv2.threshold(grayed, under_thresh, maxValue, cv2.THRESH_BINARY)\n    th, clarify_born = cv2.threshold(grayed, upper_thresh, maxValue, cv2.THRESH_BINARY_INV)\n    merged = np.minimum(drop_back, clarify_born)\n    return merged\n\nthresh\u306e\u5024\u3092\u3069\u308c\u3050\u3089\u3044\u306b\u3057\u305f\u3089\u3044\u3044\u304b\u3088\u304f\u5206\u304b\u3089\u306a\u3044\u5834\u5408\u306f\u3001\u30da\u30a4\u30f3\u30c8\u30c4\u30fc\u30eb\u306a\u3069\u3067\u660e\u308b\u3055\u3092\u8abf\u3079\u308b\u3068\u3088\u3044\u3067\u3059\u3002Windows\u3060\u3068\u6a19\u6e96\u306e\u30da\u30a4\u30f3\u30c8\u30c4\u30fc\u30eb\u306e\u30b9\u30dd\u30a4\u30c8\u3067\u8abf\u3079\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\n\u306a\u304a\u3001adaptiveThreshold\u3092\u5229\u7528\u3059\u308b\u3068\u5468\u8fba\u306e\u30d4\u30af\u30bb\u30eb\u3092\u898b\u306a\u304c\u3089\u9069\u5ea6\u306a\u95be\u5024\u3092\u6c7a\u3081\u3066\u304f\u308c\u308b\u306e\u3067\u3001\u3044\u3063\u305f\u3093\u306f\u3053\u308c\u3067\u8a66\u3057\u3066\u307f\u308b\u306e\u3082\u3044\u3044\u3068\u601d\u3044\u307e\u3059\u3002\u8a73\u7d30\u306f\u4e0b\u8a18\u306e\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\u3002\nImage Thresholding\n\n\u30ab\u30e9\u30fc\u306b\u3088\u308b\u95be\u5024\u51e6\u7406\ncv2.inRange\u3092\u4f7f\u7528\u3059\u308c\u3070\u3001\u7279\u5b9a\u306e\u8272\u306e\u90e8\u5206\u3092\u629c\u304d\u51fa\u3059\u3053\u3068\u3082\u53ef\u80fd\u3067\u3059\u3002\u4ee5\u4e0b\u3067\u306f\u3001\u80cc\u666f\u306e\u9752\u8272\u90e8\u5206\u3092\u691c\u77e5\u3057\u3066\u30de\u30b9\u30af\u3092\u304b\u3051\u3066\u3044\u307e\u3059\u3002\n\ndef mask_blue(path):\n    img = cv2.imread(path)\n    hsv = cv2.cvtColor(img, cv2.COLOR_BGR2HSV)\n\n    blue_min = np.array([100, 170, 200], np.uint8)\n    blue_max = np.array([120, 180, 255], np.uint8)\n\n    blue_region = cv2.inRange(hsv, blue_min, blue_max)\n    white = np.full(img.shape, 255, dtype=img.dtype)\n    background = cv2.bitwise_and(white, white, mask=blue_region)  # detected blue area becomes white\n\n    inv_mask = cv2.bitwise_not(blue_region)  # make mask for not-blue area\n    extracted = cv2.bitwise_and(img, img, mask=inv_mask)\n\n    masked = cv2.add(extracted, background)\n\n    return masked\n\ncv2.inRange\u306b\u3088\u3063\u3066\u5f97\u3089\u308c\u305fblue_region\u304c\u6307\u5b9a\u3057\u305f\u30ab\u30e9\u30fc\u306e\u9818\u57df\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u3002blue_region\u306f\u30b0\u30ec\u30fc\u30b9\u30b1\u30fc\u30eb\u3067\u8868\u73fe\u3055\u308c\u3066\u304a\u308a\u3001\u767a\u898b\u3055\u308c\u305f\u7b87\u6240\u307b\u3069\u5024\u304c\u9ad8\u304f\u306a\u3063\u3066\u3044\u308b(255=\u767d\u306b\u8fd1\u3044)\u306e\u306b\u6ce8\u610f\u3057\u3066\u304f\u3060\u3055\u3044\u3002\u306a\u304a\u3001cv2.inRange\u3092\u4f7f\u7528\u3059\u308b\u306b\u5f53\u305f\u3063\u3066\u306f\u753b\u50cf\u3092HSV\u8868\u73fe\u306b\u5909\u3048\u3066\u304a\u304f\u5fc5\u8981\u304c\u3042\u308a\u3001\u8272\u306e\u7bc4\u56f2\u306e\u6307\u5b9a\u3082\u305d\u308c\u306b\u5023\u3046\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002HSV\u8868\u73fe\u3068\u306f\u306a\u3093\u305e\u3084\u3001\u3068\u3044\u3046\u306e\u306f\u4e0b\u56f3\u3092\u898b\u308b\u3068\u308f\u304b\u308a\u3084\u3059\u3044\u3067\u3059\u3002\n\nHSL and HSV\n\u305f\u3060\u3001OpenCV\u3067\u6307\u5b9a\u3059\u308bHSV\u306e\u5024\u306b\u306f\u5c11\u3057\u7656\u304c\u3042\u308b\u306e\u3067\u3001\u4e0a\u8a18\u306e\u3088\u3046\u306b\u30da\u30a4\u30f3\u30c8\u30c4\u30fc\u30eb\u304b\u3089\u5024\u3092\u63a8\u5b9a\u3059\u308b\u306e\u304c\u304b\u306a\u308a\u96e3\u3057\u3044\u3067\u3059\u3002\n\n\n\n\n\u4e00\u822c\u7684\u306a\u5024\u306e\u7bc4\u56f2\nOpenCV\n\n\n\n\nH\n0 - 360\n0 - 180\n\n\nS\n0 - 100\n0 - 255\n\n\nV\n0 - 100\n0 - 255\n\n\n\n\u305d\u306e\u305f\u3081\u3001\u6307\u5b9a\u304c\u3042\u307e\u308a\u3046\u307e\u304f\u3044\u304b\u306a\u3088\u3046\u3067\u3042\u308c\u3070\u5b9f\u969b\u306b\u884c\u5217\u5185\u306e\u5024\u3092\u898b\u305f\u65b9\u304c\u901f\u3044\u3067\u3059\u3002img[10:20, 10:20]\u3068\u3044\u3046\u611f\u3058\u3067\u6240\u5b9a\u306e\u9818\u57df\u306e\u884c\u5217\u5024(\u30ab\u30e9\u30fc\u5024)\u3092\u5207\u308a\u51fa\u305b\u308b\u306e\u3067\u3001\u305d\u308c\u3067\u78ba\u8a8d\u3092\u3059\u308b\u3068\u30d4\u30f3\u30dd\u30a4\u30f3\u30c8\u3067\u6307\u5b9a\u304c\u53ef\u80fd\u3067\u3059(\u3068\u3044\u3046\u304b\u4eca\u56de\u306f\u30da\u30a4\u30f3\u30c8\u306e\u5024\u304c\u3069\u3046\u306b\u3082\u5f79\u306b\u7acb\u305f\u306a\u304b\u3063\u305f\u306e\u3067\u3001\u3053\u306e\u624b\u6cd5\u3067\u6307\u5b9a\u3057\u307e\u3057\u305f)\u3002\n\u3042\u3068\u306f\u3001blue_region\u306e\u9818\u57df\u3092\u3059\u3079\u3066\u767d\u306b\u3059\u308bbackground\u3068\u3001blue_region\u4ee5\u5916\u306e\u9818\u57df\u3092\u629c\u304d\u51fa\u3057\u305fextracted\u3092\u5408\u7b97\u3057\u3066\u753b\u50cf\u3092\u4f5c\u6210\u3057\u3066\u3044\u307e\u3059\u3002bitwise_and/bitwise_not\u306f\u3001\u3053\u3046\u3057\u305f\u30de\u30b9\u30af\u51e6\u7406\u3092\u884c\u3046\u306e\u306b\u4fbf\u5229\u306a\u95a2\u6570\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u3002\n\u4ee5\u4e0a\u304c\u3001\u95be\u5024\u51e6\u7406\u306b\u3064\u3044\u3066\u306e\u89e3\u8aac\u3068\u306a\u308a\u307e\u3059\u3002\n\n\u5e73\u6ed1\u5316(\u30b9\u30e0\u30fc\u30b8\u30f3\u30b0)\n\u753b\u50cf\u306e\u8f2a\u90ed\u304c\u306f\u3063\u304d\u308a\u3057\u306a\u3044\u5834\u5408\u3084\u80cc\u666f\u304c\u6fc3\u304b\u3063\u305f\u308a\u3059\u308b\u5834\u5408\u3001\u95be\u5024\u51e6\u7406\u3092\u304b\u3051\u3066\u3082\u8f2a\u90ed\u304c\u53d6\u308c\u306a\u304b\u3063\u305f\u308a\u80cc\u666f\u304c\u6b8b\u3063\u3066\u3057\u307e\u3063\u305f\u308a\u3057\u307e\u3059\u3002\u4e0b\u56f3\u306e\u4f8b\u3067\u306f\u3001\u8db3\u5143\u306e\u7802\u5229\u304c\u7d30\u304b\u304f\u6b8b\u3063\u3066\u3057\u307e\u3063\u3066\u3044\u3066\u3001\u8f2a\u90ed\u3082\u30ae\u30b6\u30ae\u30b6\u3057\u3066\u3044\u307e\u3059\u3002\n\nPiping plover chick with band at two weeks\n\u3053\u3046\u3057\u305f\u5834\u5408\u306f\u3001\u30d5\u30a3\u30eb\u30bf\u30fc\u3092\u4f7f\u3063\u305f\u30b9\u30e0\u30fc\u30b8\u30f3\u30b0\u3092\u884c\u3046\u3068\u3088\u3044\u3067\u3059\u3002\u30d5\u30a3\u30eb\u30bf\u30fc\u51e6\u7406\u306f\u7aef\u7684\u306b\u8a00\u3048\u3070\u753b\u50cf\u3092\u307c\u3084\u304b\u3059\u51e6\u7406\u306b\u306a\u308a\u307e\u3059\u304c\u3001\u753b\u50cf\u3092\u307c\u304b\u3059\u3053\u3068\u3067\u300c\u307c\u3051\u3066\u3082\u306f\u3063\u304d\u308a\u898b\u3048\u308b\u70b9\u300d\u306e\u307f\u3092\u691c\u77e5\u3057\u3001\u9006\u306b\u307c\u3084\u304b\u3057\u305f\u3089\u6d88\u3048\u3066\u3057\u307e\u3046\u3088\u3046\u306a\u70b9\u3092\u7121\u8996\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\u4ee5\u4e0b\u306f\u3001GaussianBlur\u3092\u5229\u7528\u3057\u30ac\u30a6\u30b7\u30a2\u30f3\u30d5\u30a3\u30eb\u30bf\u3092\u9069\u7528\u3057\u3066\u304b\u3089(\u5de6\u56f3)\u3001\u95be\u5024\u51e6\u7406\u3092\u3057\u305f\u4f8b\u306b\u306a\u308a\u307e\u3059(\u53f3\u56f3)\u3002\ndef blur(img):\n    filtered = cv2.GaussianBlur(img, (11, 11), 0)\n    return filtered\n\n\n\u753b\u50cf\u306e\u7d30\u304b\u3044\u30c7\u30a3\u30c6\u30a3\u30fc\u30eb\u306f\u5931\u308f\u308c\u3066\u3044\u307e\u3059\u304c\u3001\u7279\u5fb4\u7684\u306a\u7b87\u6240\u306f\u307e\u3068\u307e\u3063\u3066\u6b8b\u308a\u3001\u80cc\u666f\u306b\u591a\u304f\u3042\u3063\u305f\u30ce\u30a4\u30ba\u304c\u6d88\u3048\u3066\u304f\u308c\u3066\u3044\u308b\u306e\u304c\u5206\u304b\u308b\u3068\u601d\u3044\u307e\u3059\u3002OpenCV\u516c\u5f0f\u306e\u4ee5\u4e0b\u306e\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u306b\u306f\u3001GaussianBlur\u4ee5\u5916\u306e\u30d5\u30a3\u30eb\u30bf\u306b\u3064\u3044\u3066\u3082\u66f8\u304b\u308c\u3066\u3044\u308b\u306e\u3067\u53c2\u7167\u3057\u3066\u307f\u3066\u304f\u3060\u3055\u3044\u3002\nSmoothing Images\n\u3053\u308c\u4ee5\u5916\u306b\u753b\u50cf\u306e\u5e73\u6ed1\u5316\u306b\u4f7f\u7528\u3055\u308c\u308b\u624b\u6cd5\u3068\u3057\u3066\u3001\u30e2\u30eb\u30d5\u30a9\u30ed\u30b8\u30fc\u304c\u3042\u308a\u307e\u3059\u3002\u3053\u308c\u306f\u3001\u753b\u50cf\u306e\u81a8\u5f35\u30fb\u53ce\u7e2e\u51e6\u7406\u306a\u3069\u3092\u5229\u7528\u3059\u308b\u3053\u3068\u3067\u30ce\u30a4\u30ba\u3092\u9664\u53bb\u3057\u305f\u308a\u8f2a\u90ed\u3092\u5f37\u8abf\u3057\u305f\u308a\u3059\u308b\u624b\u6cd5\u3067\u3059\u3002\n\u4ee5\u4e0b\u306f\u3001\u30e2\u30eb\u30d5\u30a9\u30ed\u30b8\u30fc\u306b\u304a\u3051\u308b\u4ee3\u8868\u7684\u306a\u624b\u6cd5\u306e\u30a4\u30e1\u30fc\u30b8\u3092\u8868\u3057\u305f\u3082\u306e\u3067\u3059\u3002\n\nMorphology\n\nDialation: \u5883\u754c\u9818\u57df\u3092\u62e1\u5f35\u3059\u308b\u52b9\u679c\u304c\u3042\u308b\nErosion: \u5883\u754c\u9818\u57df\u3092\u4fb5\u98df\u3059\u308b\u52b9\u679c\u304c\u3042\u308b\nOpening: Erosion\u3068\u4f3c\u3066\u3044\u3066\u3001\u5883\u754c\u3092\u4fb5\u98df\u3059\u308b\u304cErosion\u3088\u308a\u3086\u308b\u3084\u304b\u3002\nClosing: Dialation\u3068\u4f3c\u3066\u3044\u3066\u3001\u5883\u754c\u3092\u62e1\u5f35\u3057\u80cc\u666f\u3092\u53ce\u7e2e\u3055\u305b\u308b\u304cDialation\u3088\u308a\u3086\u308b\u3084\u304b\n\n\u7406\u8ad6\u7684\u306a\u8a73\u7d30\u306f\u3053\u3053\u3067\u306f\u5272\u611b\u3057\u307e\u3059\u304c\u3001\u30d5\u30a3\u30eb\u30bf\u306e\u4e00\u7a2e\u3068\u601d\u3063\u3066\u3044\u305f\u3060\u3044\u3066\u5dee\u3057\u652f\u3048\u3042\u308a\u307e\u305b\u3093\u3002OpenCV\u3067\u306f\u4e0a\u8a18\u306e\u30e2\u30eb\u30d5\u30a9\u30ed\u30b8\u30fc\u51e6\u7406\u304c\u3067\u304d\u308bcv2.dilate\u3001cv2.erode\u3001\u305d\u3057\u3066Opening/Closing\u3092\u9023\u7d9a\u7684\u306b\u9069\u7528\u3067\u304d\u308b\u4fbf\u5229\u306acv2.morphologyEx\u304c\u3042\u308a\u307e\u3059\u3002\u4eca\u56de\u306f\u3001cv2.morphologyEx\u3092\u4f7f\u3063\u3066\u5e73\u6ed1\u5316\u51e6\u7406\u3092\u884c\u3063\u3066\u307f\u307e\u3059\u3002\ndef morph(img):\n    kernel = np.ones((3, 3),np.uint8)\n    opened = cv2.morphologyEx(img, cv2.MORPH_OPEN, kernel, iterations=2)\n    return opened\n\n\n\u4eca\u56de\u306f\u80cc\u666f\u306e\u8272\u304c\u6fc3\u3044\u305f\u3081\u304bCLOSE\u3067\u9818\u57df\u3092\u592a\u3089\u305b\u308b\u3068\u5927\u5909\u306a\u3053\u3068\u306b\u306a\u3063\u305f\u306e\u3067\u3001OPEN\u306b\u3088\u308a\u9818\u57df\u9593\u306e\u8ddd\u96e2\u304c\u306a\u308b\u3079\u304f\u7a7a\u304f\u3088\u3046\u306b\u3059\u308b\u65b9\u5411\u3067\u51e6\u7406\u3092\u304b\u3051\u3066\u307f\u307e\u3057\u305f\u3002\u305f\u3060\u3001\u307e\u3060\u30ce\u30a4\u30ba\u304c\u6b8b\u3063\u3066\u3044\u308b\u305f\u3081\u30d5\u30a3\u30eb\u30bf\u3068\u4f75\u7528\u3067\u51e6\u7406\u3092\u3057\u3066\u3044\u307e\u3059\u3002\ndef morph_and_blur(img):\n    kernel = np.ones((3, 3),np.uint8)\n    m = cv2.GaussianBlur(img, (3, 3), 0)\n    m = cv2.morphologyEx(m, cv2.MORPH_OPEN, kernel, iterations=2)\n    m = cv2.GaussianBlur(m, (5, 5), 0)\n    return m\n\n\n\u5358\u7d14\u306b\u30d5\u30a3\u30eb\u30bf\u3092\u304b\u3051\u308b\u3088\u308a\u306f\u60c5\u5831\u304c\u6b8b\u3063\u3066\u3044\u308b\u304b\u306a\u30fb\u30fb\u30fb\u3068\u3044\u3046\u611f\u3058\u3067\u3059\u306d\u3002\u307e\u305f\u3001Opening\u3092\u304b\u3051\u305f\u3053\u3068\u306b\u3088\u308a\u4ee5\u524d\u306f\u7e4b\u304c\u3063\u3066\u3044\u305f\u9818\u57df\u304c\u3057\u3063\u304b\u308a\u72ec\u7acb\u3059\u308b\u3088\u3046\u306b\u306a\u3063\u3066\u3044\u308b\u306e\u304c\u5206\u304b\u308b\u3068\u601d\u3044\u307e\u3059\u3002\n\u30e2\u30eb\u30d5\u30a9\u30ed\u30b8\u30fc\u306e\u51e6\u7406\u306b\u3064\u3044\u3066\u306f\u4ee5\u4e0b\u304c\u8a73\u3057\u3044\u306e\u3067\u3001\u53c2\u8003\u306b\u3057\u3066\u307f\u3066\u304f\u3060\u3055\u3044\u3002\n\nSimple and effective coin segmentation using Python and OpenCV\nImage Segmentation with Watershed Algorithm\n\n\u5b9f\u969b\u3084\u3063\u3066\u307f\u308b\u3068\u3001\u80cc\u666f\u304c\u6fc3\u3044\u5834\u5408\u30b0\u30ec\u30fc\u30b9\u30b1\u30fc\u30eb\u306b\u3057\u3066\u3057\u307e\u3046\u3068\u305d\u3053\u304b\u3089\u9818\u57df\u3092\u306f\u3063\u304d\u308a\u3055\u305b\u308b\u306e\u306f\u304b\u306a\u308a\u96e3\u3057\u3044\u3067\u3059\u3002\u305d\u306e\u305f\u3081\u3001\u80cc\u666f\u306b\u305d\u308c\u3068\u308f\u304b\u308b\u8272\u304c\u3064\u3044\u3066\u3044\u308b\u306a\u3089\u8272\u3067\u30de\u30b9\u30af\u3092\u304b\u3051\u3066\u3001\u305d\u306e\u5f8c\u306b\u51e6\u7406\u3092\u3057\u305f\u65b9\u304c\u3057\u3063\u304b\u308a\u3068\u533a\u5206\u3067\u304d\u308b\u3068\u601d\u3044\u307e\u3059\u3002\n\u4ee5\u4e0a\u304c\u524d\u51e6\u7406\u306b\u3064\u3044\u3066\u306e\u8aac\u660e\u306b\u306a\u308a\u307e\u3059\u3002\u3053\u3053\u304b\u3089\u3001\u524d\u51e6\u7406\u3092\u3057\u305f\u5f8c\u306e\u753b\u50cf\u304b\u3089\u3044\u3088\u3044\u3088\u7269\u4f53\u306e\u691c\u51fa\u3092\u884c\u3063\u3066\u3044\u304d\u305f\u3044\u3068\u601d\u3044\u307e\u3059\u3002\n\n\u7269\u4f53\u691c\u51fa\n\n\u8f2a\u90ed\u691c\u51fa\n\u3053\u3053\u307e\u3067\u3067\u3001\u524d\u51e6\u7406\u306b\u3088\u308a\u8a8d\u8b58\u3057\u305f\u3044\u7269\u4f53\u3092\u660e\u78ba\u306b\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u3066\u304d\u305f\u3068\u601d\u3046\u306e\u3067\u3001\u305d\u308c\u3092\u5229\u7528\u3057\u3066\u8f2a\u90ed\u306e\u691c\u51fa\u3092\u884c\u3044\u307e\u3059\u3002\n\nOpenCV\u3067\u306f\u3001cv2.findContours\u3092\u5229\u7528\u3059\u308b\u3053\u3068\u3067\u7c21\u5358\u306b\u8f2a\u90ed\u3092\u691c\u51fa\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\ndef detect_contour(path, min_size):\n    contoured = cv2.imread(path)\n    forcrop = cv2.imread(path)\n\n    # make binary image\n    birds = binary_threshold_for_birds(path)\n    birds = cv2.bitwise_not(birds)\n\n    # detect contour\n    im2, contours, hierarchy = cv2.findContours(birds, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)\n\n    crops = []\n    # draw contour\n    for c in contours:\n        if cv2.contourArea(c) < min_size:\n            continue\n\n        # rectangle area\n        x, y, w, h = cv2.boundingRect(c)\n        x, y, w, h = padding_position(x, y, w, h, 5)\n\n        # crop the image\n        cropped = forcrop[y:(y + h), x:(x + w)]\n        cropped = resize_image(cropped, (210, 210))\n        crops.append(cropped)\n\n        # draw contour\n        cv2.drawContours(contoured, c, -1, (0, 0, 255), 3)  # contour\n        cv2.rectangle(contoured, (x, y), (x + w, y + h), (0, 255, 0), 3)  #rectangle contour\n\n    return contoured, crops\n\n\ndef padding_position(x, y, w, h, p):\n    return x - p, y - p, w + p * 2, h + p * 2\n\n\nbinary_threshold_for_birds\u306f\u3001\u4eca\u56de\u5229\u7528\u3057\u3066\u3044\u308b\u9ce5\u306e\u753b\u50cf\u3092\u95be\u5024\u51e6\u7406\u3059\u308b\u305f\u3081\u306e\u95a2\u6570\u3067\u3059(=\u524d\u51e6\u7406)\u3002\u3053\u308c\u3067\u51fa\u529b\u3055\u308c\u308b\u306e\u306f\u5148\u307b\u3069\u7d39\u4ecb\u3057\u305f\u80cc\u666f\u767d\u306e\u753b\u50cf\u306a\u306e\u3067\u3001\u3053\u308c\u3092\u53cd\u8ee2\u3057\u3066\u9818\u57df\u691c\u77e5\u306b\u4f7f\u3044\u307e\u3059\u3002\u308f\u304b\u308a\u306b\u304f\u3044\u3067\u3059\u304c\u3001\u767d\u9ed2\u306e\u5834\u5408\u300c\u767d\u300d\u306e\u65b9\u304c\u5024\u304c\u9ad8\u3044\u305f\u3081(255)\u3001\u8f2a\u90ed\u691c\u51fa\u3092\u884c\u3046\u5834\u5408\u8f2a\u90ed\u304c\u767d\u3067\u63cf\u753b\u3055\u308c\u3066\u3044\u308b\u753b\u50cf\u3092\u5165\u529b\u3068\u3057\u3066\u4e0e\u3048\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\n\u203b\u767d\u9ed2\u306e\u304b\u306a\u308a\u306f\u3063\u304d\u308a\u3057\u305f\u753b\u50cf\u3067\u306a\u3044\u3068\u8f2a\u90ed\u304c\u691c\u51fa\u3055\u308c\u306a\u3044\u306e\u3067\u6ce8\u610f\u3057\u3066\u304f\u3060\u3055\u3044\n\u3042\u3068\u306f\u3001cv2.findContours\u3092\u5b9f\u884c\u3059\u308b\u3060\u3051\u3067\u3059\u3002\u3053\u308c\u3067\u691c\u51fa\u3055\u308c\u305f\u8f2a\u90ed\u306f\u3001cv2.drawContours\u3067\u7c21\u5358\u306b\u753b\u50cf\u4e0a\u306b\u63cf\u753b\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\u307e\u305f\u3001cv2.boundingRect\u3092\u5229\u7528\u3059\u308b\u3053\u3068\u3067\u8f2a\u90ed\u304c\u53ce\u307e\u308b\u77e9\u5f62\u306e\u5ea7\u6a19\u3092\u53d6\u5f97\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\u305f\u3060\u3001\u3053\u308c\u306f\u30ae\u30ea\u30ae\u30ea\u306e\u63a5\u6226\u306b\u306a\u3063\u3066\u3044\u308b\u306e\u3067\u4eca\u56de\u306fpadding_position\u3067\u3061\u3087\u3063\u3068\u5468\u308a\u306b\u4f59\u88d5\u3092\u6301\u305f\u305b\u3066\u3044\u307e\u3059\u3002\ncv2.findContours\u306b\u3064\u3044\u3066\u306f\u3001\u516c\u5f0f\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u306b\u3064\u3044\u3066\u3082\u8a18\u8f09\u304c\u3042\u308b\u305f\u3081\u3054\u53c2\u7167\u304f\u3060\u3055\u3044\u3002\nContours : Getting Started\n\u306a\u304a\u3001\u81ea\u52d5\u3067\u306a\u304f\u30e6\u30fc\u30b6\u30fc\u304c\u304b\u3053\u3063\u3066\u304f\u308b\u5834\u5408\u3001\u30b0\u30e9\u30d5\u30ab\u30c3\u30c8\u3068\u3044\u3046\u624b\u6cd5\u3092\u7528\u3044\u3066\u56f2\u308f\u308c\u305f\u9818\u57df\u306e\u4e2d\u306e\u7269\u4f53\u3092\u691c\u51fa\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\u8a73\u7d30\u306f\u89e6\u308c\u307e\u305b\u3093\u304c\u3001\u30a2\u30ce\u30c6\u30fc\u30b7\u30e7\u30f3\u7528\u306e\u30c4\u30fc\u30eb\u306a\u3069\u3092\u4f5c\u308b\u5834\u5408\u306f\u6709\u7528\u3060\u3068\u601d\u3046\u306e\u3067\u3001\u8208\u5473\u304c\u3042\u308b\u65b9\u306f\u4ee5\u4e0b\u3092\u53c2\u7167\u3057\u3066\u307f\u3066\u304f\u3060\u3055\u3044\u3002\nInteractive Foreground Extraction using GrabCut Algorithm\n\n\u8f2a\u90ed\u306e\u8fd1\u4f3c\nOpenCV\u306b\u306f\u3001\u691c\u51fa\u3057\u305f\u8f2a\u90ed\u3092\u8fd1\u4f3c\u3059\u308b\u95a2\u6570\u304c\u3044\u304f\u3064\u304b\u7528\u610f\u3055\u308c\u3066\u3044\u307e\u3059\u3002\u4f8b\u3048\u3070approxPolyDP\u306f\u691c\u51fa\u3057\u305f\u8f2a\u90ed\u3092\u76f4\u7dda\u8fd1\u4f3c\u3057\u3066\u304f\u308c\u308b\u3082\u306e\u3067\u3001\u8f2a\u90ed\u304c\u76f4\u7dda\u7684\u306a\u5834\u5408\u306f\u3053\u3061\u3089\u3092\u4f7f\u3063\u3066\u5207\u308a\u51fa\u3057\u3092\u884c\u3046\u3068\u826f\u3044\u3067\u3059\u3002\u4ee5\u4e0b\u306f\u8d64\u306e\u70b9\u7dda\u304c\u691c\u51fa\u3057\u305f\u8f2a\u90ed\u3067\u3001\u7dd1\u7dda\u304c\u76f4\u7dda\u8fd1\u4f3c\u3057\u305f\u3082\u306e\u306b\u306a\u308a\u307e\u3059\u3002\n\n\u753b\u50cf\u51fa\u5178\ndef various_contours(path):\n    color = cv2.imread(path)\n    grayed = cv2.cvtColor(color, cv2.COLOR_BGR2GRAY)\n    _, binary = cv2.threshold(grayed, 218, 255, cv2.THRESH_BINARY)\n    inv = cv2.bitwise_not(binary)    \n    _, contours, _ = cv2.findContours(inv, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)\n\n    for c in contours:\n        if cv2.contourArea(c) < 90:\n            continue\n\n        epsilon = 0.01 * cv2.arcLength(c, True)\n        approx = cv2.approxPolyDP(c, epsilon, True)\n        cv2.drawContours(color, c, -1, (0, 0, 255), 3)\n        cv2.drawContours(color, [approx], -1, (0, 255, 0), 3)\n\n    plt.imshow(cv2.cvtColor(color, cv2.COLOR_BGR2RGB))\n\nvarious_contours(IMG_FOR_CONTOUR)\n\ncv2.arcLength\u306f\u8f2a\u90ed\u306e\u9577\u3055\u3067\u3001\u3053\u308c\u3092\u4f7f\u3044epsilon\u3001\u6700\u4f4e\u9650\u306e\u76f4\u7dda\u306e\u9577\u3055\u3092\u8a08\u7b97\u3057\u3066\u3044\u307e\u3059\u3002\u3053\u308c\u3067\u3069\u308c\u3060\u3051\u7d30\u304b\u3044\u76f4\u7dda\u3067\u304f\u304f\u308b\u306e\u304b\u3092\u8abf\u6574\u3067\u304d\u307e\u3059\u3002\n\u3053\u306e\u4ed6\u306e\u95a2\u6570\u306b\u3064\u3044\u3066\u3082\u3001\u4e0b\u8a18\u306e\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb\u306b\u4f7f\u3044\u65b9\u3068\u8aac\u660e\u304c\u8a18\u8f09\u3055\u308c\u3066\u3044\u308b\u306e\u3067\u53c2\u8003\u306b\u3057\u3066\u307f\u3066\u304f\u3060\u3055\u3044\u3002\nContour Features\n\n\u691c\u51fa\u9818\u57df\u306e\u5207\u308a\u51fa\u3057\n\u3055\u3066\u9818\u57df\u306f\u308f\u304b\u308a\u307e\u3057\u305f\u304c\u3001\u3053\u308c\u3092\u6a5f\u68b0\u5b66\u7fd2\u30e2\u30c7\u30eb\u3078\u9069\u7528\u3059\u308b\u306b\u306f\u30e2\u30c7\u30eb\u304c\u60f3\u5b9a\u3057\u3066\u3044\u308b\u6240\u5b9a\u306e\u30b5\u30a4\u30ba\u306b\u5207\u308a\u51fa\u3059\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\u3053\u308c\u3092\u884c\u3046\u305f\u3081\u3001\u4eca\u56deresize_image\u3068\u3044\u3046\u95a2\u6570\u3092\u4f5c\u6210\u3057\u307e\u3057\u305f\u3002\ndef resize_image(img, size):\n    # size is enough to img\n    img_size = img.shape[:2]\n    if img_size[0] > size[1] or img_size[1] > size[0]:\n        raise Exception(\"img is larger than size\")\n\n    # centering\n    row = (size[1] - img_size[0]) // 2\n    col = (size[0] - img_size[1]) // 2\n    resized = np.zeros(list(size) + [img.shape[2]], dtype=np.uint8)\n    resized[row:(row + img.shape[0]), col:(col + img.shape[1])] = img\n\n    # filling\n    mask = np.full(size, 255, dtype=np.uint8)\n    mask[row:(row + img.shape[0]), col:(col + img.shape[1])] = 0\n    filled = cv2.inpaint(resized, mask, 3, cv2.INPAINT_TELEA)    \n\n    return filled\n\n\u3053\u306e\u95a2\u6570\u306f\u3001\u4ee5\u4e0b\u306e\u30b9\u30c6\u30c3\u30d7\u3067\u5f62\u6210\u3055\u308c\u3066\u3044\u307e\u3059\u3002\n\nresize: \u6240\u5b9a\u306e\u30b5\u30a4\u30ba\u306e\u30ad\u30e3\u30f3\u30d0\u30b9(resized)\u3092\u7528\u610f(\u5b66\u7fd2\u30c7\u30fc\u30bf\u306e\u753b\u50cf\u306e\u30b5\u30a4\u30ba\u304b\u3001\u5f8c\u304b\u3089\u5207\u308a\u53d6\u308b\u305f\u3081\u3061\u3087\u3063\u3068\u5927\u304d\u3081\u306b\u3059\u308b)\ncentering: \u7528\u610f\u3057\u305f\u30ad\u30e3\u30f3\u30d0\u30b9\u306e\u4e2d\u5fc3\u306b\u3001\u5207\u308a\u51fa\u3057\u305f\u753b\u50cf\u3092\u30bb\u30c3\u30c8\nfilling: \u30bb\u30c3\u30c8\u3057\u305f\u753b\u50cf\u306e\u5468\u8fba\u9818\u57df\u3092\u3001\u5143\u306e\u753b\u50cf\u306e\u60c5\u5831\u3092\u5229\u7528\u3057\u57cb\u3081\u308b\n\nOpenCV\u306b\u3082resize\u95a2\u6570\u304c\u3042\u308a\u307e\u3059\u304c\u3001\u3053\u308c\u3092\u4f7f\u3046\u3068\u5207\u308a\u51fa\u3057\u305f\u753b\u50cf\u3092\u7121\u7406\u3084\u308a\u6240\u5b9a\u306e\u30b5\u30a4\u30ba\u306b\u5408\u308f\u305b\u308b\u305f\u3081\u3001\u753b\u50cf\u304c\u6b6a\u3093\u3067\u3057\u307e\u3044\u307e\u3059\u3002\u305d\u306e\u305f\u3081\u4eca\u56de\u306f\u5207\u308a\u51fa\u3057\u305f\u753b\u50cf\u304c\u53ce\u307e\u308b\u30b5\u30a4\u30ba\u306e\u30ad\u30e3\u30f3\u30d0\u30b9\u3092\u7528\u610f\u3057\u3066\u305d\u306e\u4e2d\u5fc3\u306b\u5207\u308a\u51fa\u3057\u305f\u753b\u50cf\u3092\u7f6e\u304d\u3001\u5468\u308a\u3092\u57cb\u3081\u308b\u3068\u3044\u3046\u624b\u6cd5\u3092\u53d6\u3063\u3066\u3044\u307e\u3059\u3002\u7a74\u57cb\u3081\u306b\u4f7f\u3063\u3066\u3044\u308bcv2.inpaint\u306f\u672c\u6765\u753b\u50cf\u5185\u306e\u6b20\u640d\u3092\u5fa9\u5143\u3059\u308b\u305f\u3081\u306e\u95a2\u6570\u306a\u306e\u3067\u3059\u304c\u3001\u4eca\u56de\u306f\u5468\u308a\u3092\u57cb\u3081\u308b\u306e\u306b\u4f7f\u3063\u3066\u3044\u307e\u3059\u3002\n\u5b9f\u969b\u306b\u5207\u308a\u51fa\u3057\u305f\u753b\u50cf\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u3002\u6982\u306d\u304d\u3063\u3061\u308a\u88dc\u5b8c\u304c\u3067\u304d\u3066\u3044\u308b\u3068\u601d\u3044\u307e\u3059\u304c\u30012\u679a\u76ee\u306f\u304f\u3061\u3070\u3057\u306e\u8272\u304c\u3061\u3087\u3063\u3068\u4f38\u3073\u3066\u3057\u307e\u3063\u3066\u3044\u307e\u3059\u3002\u3053\u3046\u3057\u305f\u5834\u5408\u3001padding\u3092\u8abf\u6574\u3057\u80cc\u666f\u8272\u3060\u3051\u3067\u7a74\u57cb\u3081\u3055\u308c\u308b\u3088\u3046\u3001\u8abf\u6574\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\n\n\n\u753b\u50cf\u306e\u4f4d\u7f6e\u63c3\u3048\n\u753b\u50cf\u4e0a\u306e\u3069\u306e\u4f4d\u7f6e\u306b\u7269\u4f53\u304c\u79fb\u3063\u3066\u3044\u308b\u306e\u304b\u306f\u3001\u8a8d\u8b58\u306e\u969b\u306b\u91cd\u8981\u306a\u30dd\u30a4\u30f3\u30c8\u3068\u306a\u308a\u307e\u3059\u3002\u6700\u8fd1\u5229\u7528\u3055\u308c\u3066\u3044\u308bCNN\u3067\u306f\u7573\u307f\u8fbc\u307f\u306b\u3088\u308a\u591a\u5c11\u305a\u308c\u3066\u3044\u3066\u3082\u3057\u3063\u304b\u308a\u3084\u3063\u3066\u304f\u308c\u307e\u3059\u304c\u3001\u88dc\u6b63\u3092\u3057\u3066\u304a\u304f\u3068\u7cbe\u5ea6\u304c\u3050\u3063\u3068\u4e0a\u304c\u308a\u307e\u3059\u3002\u305d\u306e\u305f\u3081\u3001\u3053\u3053\u3067\u306f\u5207\u308a\u51fa\u3057\u305f\u5f8c\u306e\u753b\u50cf\u306e\u4f4d\u7f6e\u88dc\u6b63\u306b\u3064\u3044\u3066\u8aac\u660e\u3057\u307e\u3059\u3002\n\u4e0b\u56f3\u306f\u3001\u753b\u50cf\u306e\u4f4d\u7f6e\u63c3\u3048\u3092\u884c\u3063\u3066\u307f\u305f\u4f8b\u3067\u3059\u3002\u4e00\u6bb5\u76ee\u304c\u30d9\u30fc\u30b9\u306e\u753b\u50cf\u3067\u3001\u4e8c\u6bb5\u76ee\u4ee5\u964d\u304c\u4e00\u6bb5\u76ee\u306e\u753b\u50cf\u306b\u4f4d\u7f6e\u3092\u5408\u308f\u305b\u308b\u305f\u3081\u306e\u88dc\u6b63\u3092\u304b\u3051\u305f\u3082\u306e\u3067\u3059(\u5de6\u5074\u304c\u88dc\u6b63\u524d\u3001\u53f3\u5074\u304c\u88dc\u6b63\u5f8c)\u3002\n\n\u753b\u50cf\u51fa\u5178: image 1, image 2, image 3 \n\u88dc\u6b63\u3092\u304b\u3051\u305f\u5f8c\u306f\u3001\u9ce5\u306e\u4f4d\u7f6e\u304c\u307b\u307c\u305d\u308d\u3063\u3066\u3044\u308b\u3068\u601d\u3044\u307e\u3059\u3002\u3053\u308c\u306f\u3001\u4e0b\u8a18\u30b5\u30a4\u30c8\u3092\u53c2\u8003\u306bfindTransformECC\u3092\u5229\u7528\u3057\u3066\u88dc\u6b63\u3092\u884c\u3063\u3066\u3044\u307e\u3059\u3002\nImage Alignment (ECC) in OpenCV ( C++ / Python )\ndef align(base_img, target_img, warp_mode=cv2.MOTION_TRANSLATION, number_of_iterations=5000, termination_eps=1e-10):\n    base_gray = cv2.cvtColor(base_img, cv2.COLOR_BGR2GRAY)\n    target_gray = cv2.cvtColor(target_img, cv2.COLOR_BGR2GRAY)\n\n    # prepare transformation matrix\n    if warp_mode == cv2.MOTION_HOMOGRAPHY:\n        warp_matrix = np.eye(3, 3, dtype=np.float32)\n    else :\n        warp_matrix = np.eye(2, 3, dtype=np.float32)\n\n    criteria = (cv2.TERM_CRITERIA_EPS | cv2.TERM_CRITERIA_COUNT, number_of_iterations,  termination_eps)\n    sz = base_img.shape\n\n    # estimate transformation\n    try:\n        (cc, warp_matrix) = cv2.findTransformECC(base_gray, target_gray, warp_matrix, warp_mode, criteria)\n\n        # execute transform\n        if warp_mode == cv2.MOTION_HOMOGRAPHY :\n            # Use warpPerspective for Homography \n            aligned = cv2.warpPerspective(target_img, warp_matrix, (sz[1], sz[0]), flags=cv2.INTER_LINEAR + cv2.WARP_INVERSE_MAP)\n        else :\n            # Use warpAffine for Translation, Euclidean and Affine\n            aligned = cv2.warpAffine(target_img, warp_matrix, (sz[1],sz[0]), flags=cv2.INTER_LINEAR + cv2.WARP_INVERSE_MAP)\n\n        return aligned\n    except Exception as ex:\n        print(\"can not align the image\")\n        return target_img\n\nfindTransformECC\u306f\u3001\u7aef\u7684\u306b\u8a00\u3048\u30702\u3064\u306e\u753b\u50cf\u306e\u4f3c\u3066\u3044\u308b\u70b9\u3092\u63a2\u3057\u3066\u3001\u3069\u3093\u306a\u79fb\u52d5\u304c\u884c\u308f\u308c\u305f\u306e\u304b\u306e\u63a8\u5b9a\u7d50\u679c\u3092warp_matrix\u306b\u5165\u308c\u3066\u304f\u308c\u308b\u95a2\u6570\u3067\u3059\u3002\u5143\u306f\u52d5\u753b\u306a\u3069\u306e\u9023\u7d9a\u3059\u308b\u30d5\u30ec\u30fc\u30e0\u4e0a\u3067\u3001\u3069\u306e\u3088\u3046\u306a\u52d5\u304d\u304c\u3042\u3063\u305f\u304b\u89e3\u6790\u3059\u308b\u305f\u3081\u306e\u3082\u306e\u306a\u306e\u3067\u304b\u306a\u308a\u540c\u3058\u753b\u50cf\u3067\u306a\u3044\u3068\u4f4d\u7f6e\u304c\u305d\u308d\u308f\u306a\u304b\u3063\u305f\u308a\u3057\u307e\u3059\u3002\u4e0a\u8a18\u3082\u4f55\u6c17\u306a\u304f\u63c3\u3063\u3066\u3044\u308b\u3088\u3046\u306b\u898b\u3048\u307e\u3059\u304c\u3001\u76f8\u95a2\u304c\u3068\u308c\u308b\u5199\u771f\u3092\u9078\u3076\u306e\u304c\u5927\u5909\u3067\u3057\u305f(\u76f8\u95a2\u304c\u306a\u3044\u5834\u5408\u3001\u53ce\u675f\u3057\u306a\u3044\u65e8\u306e\u4f8b\u5916\u304c\u51fa\u308b)\u3002\u3002\u3002\n\u9854\u306a\u3069\u5168\u3066\u306e\u753b\u50cf\u306b\u5171\u901a\u3059\u308b\u7279\u5fb4\u70b9(\u76ee\u30fb\u9f3b\u30fb\u53e3etc)\u304c\u5b58\u5728\u3059\u308b\u5834\u5408\u306f\u3001\u5404\u7279\u5fb4\u70b9\u306e\u4f4d\u7f6e\u3092\u5143\u306b\u5909\u63db\u3092\u304b\u3051\u308b\u3053\u3068\u3082\u3067\u304d\u307e\u3059\u3002estimateRigidTransform\u306f\u3001\u3053\u306e\u305f\u3081\u306b\u4f7f\u3048\u307e\u3059\u3002\ndef face_align(base, base_position, target, target_position):\n    sz = base.shape\n    fsize = min(len(base_position), len(target_position))  # adjust feature size\n    tform = cv2.estimateRigidTransform(target_position[:fsize], base_position[:fsize], False)\n    aligned = cv2.warpAffine(target, tform, (sz[1], sz[0]))\n    return aligned\n\n\u5199\u771f\u306b\u3088\u3063\u3066\u306f\u76ee\u304c\u691c\u51fa\u3067\u304d\u306a\u3044\u3001\u3068\u3044\u3063\u305f\u30b1\u30fc\u30b9\u304c\u3042\u308b\u305f\u3081\u4e0a\u8a18\u3067\u306f\u691c\u51fa\u7279\u5fb4\u91cf\u304c\u5c0f\u3055\u3044\u65b9\u306b\u5408\u308f\u305b\u3066\u5909\u63db\u3092\u884c\u3063\u3066\u3044\u307e\u3059(\u305f\u3060\u3057\u3001\u3053\u306e\u5834\u5408\u7279\u5fb4\u91cf\u3092\u5165\u308c\u308b\u9806\u756a\u3092\u305d\u308d\u3048\u306a\u3044\u3068\u3044\u3051\u306a\u3044\u70b9\u306b\u6ce8\u610f\u3057\u3066\u4e0b\u3055\u3044)\u3002\n\n\u753b\u50cf\u51fa\u5178\n\u5909\u63db\u5f8c\u306f\u3001\u9854\u306e\u4f4d\u7f6e\u304c\u3057\u3063\u304b\u308a\u305d\u308d\u3063\u3066\u3044\u308b\u306e\u304c\u5206\u304b\u308b\u3068\u601d\u3044\u307e\u3059\u3002\u4ee5\u4e0b\u306b\u3082\u9854\u306e\u4f4d\u7f6e\u63c3\u3048\u306b\u3064\u3044\u3066\u8a73\u7d30\u306a\u7d39\u4ecb\u304c\u3042\u308b\u306e\u3067\u3001\u53c2\u8003\u306b\u3057\u3066\u307f\u3066\u304f\u3060\u3055\u3044\u3002\nAverage Face : OpenCV ( C++ / Python ) Tutorial\n\n\u7269\u4f53\u8a8d\u8b58\n\u4e0a\u8a18\u3067\u306f\u8f2a\u90ed\u306e\u691c\u51fa\u3092\u81ea\u529b\u3067\u884c\u3044\u307e\u3057\u305f\u304c\u3001OpenCV\u306b\u306f\u9854\u3084\u4f53\u306a\u3069\u3088\u304f\u691c\u51fa\u3092\u884c\u3046\u7269\u4f53\u306b\u3064\u3044\u3066\u5b66\u7fd2\u6e08\u307f\u30e2\u30c7\u30eb\u304c\u7528\u610f\u3055\u308c\u3066\u304a\u308a\u3001\u3053\u308c\u3092\u5229\u7528\u3059\u308b\u3053\u3068\u3067\u7269\u4f53\u8a8d\u8b58\u304c\u884c\u3048\u307e\u3059\u3002\u3053\u306e\u5b66\u7fd2\u6e08\u307f\u306e\u30e2\u30c7\u30eb\u30d5\u30a1\u30a4\u30eb\u3092Cascade Classifier\u3068\u3044\u3044\u3001\u81ea\u524d\u3067\u4f5c\u6210\u3059\u308b\u3053\u3068\u3082\u53ef\u80fd\u3067\u3059\u3002\u516c\u958b\u3055\u308c\u3066\u3044\u308b\u3082\u306e\u3082\u3044\u304f\u3064\u304b\u3042\u308b\u306e\u3067\u3001\u8208\u5473\u304c\u3042\u308b\u65b9\u306f\u4e0b\u8a18\u3067\u307e\u3068\u3081\u3066\u304f\u3060\u3055\u3063\u3066\u3044\u308b\u306e\u3067\u53c2\u8003\u306b\u3057\u3066\u307f\u3066\u304f\u3060\u3055\u3044\u3002\n\n\u300c\u9854\u4ee5\u5916\u300d\u306e\u3082\u306e\u3092\u753b\u50cf\u8a8d\u8b58\u3059\u308b\nTRAIN YOUR OWN OPENCV HAAR CLASSIFIER\n\nCascade Classifier\u306b\u3064\u3044\u3066\u306f\u3001pip\u3067\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3057\u305f\u5834\u5408(virtual environment folder)\\Library\\etc\\haarcascades\u306e\u4e2d\u306b\u5165\u3063\u3066\u307e\u3059(Windows/miniconda\u306e\u5834\u5408\u3002\u74b0\u5883\u306b\u3088\u3063\u3066\u5dee\u7570\u304c\u3042\u308b\u3068\u601d\u3044\u307e\u3059)\u3002\u76ee\u7684\u306b\u5408\u3044\u305d\u3046\u306a\u3082\u306e\u304c\u3042\u308b\u304b\u3001\u3044\u308d\u3044\u308d\u8a66\u3057\u3066\u307f\u308b\u3068\u3088\u3044\u3067\u3057\u3087\u3046\u3002\u4eca\u56de\u306f\u3001\u4ee5\u4e0b\u306e\u516c\u5f0f\u306e\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb\u306b\u5023\u3044\u9854\u306e\u691c\u77e5\u3092\u884c\u3063\u3066\u307f\u305f\u3044\u3068\u601d\u3044\u307e\u3059\u3002\nFace Detection using Haar Cascades\n\u5b9f\u969b\u306b\u691c\u51fa\u3092\u884c\u3063\u3066\u307f\u305f\u7d50\u679c\u304c\u4ee5\u4e0b\u306b\u306a\u308a\u307e\u3059\u3002\u9aea\u3067\u96a0\u308c\u3066\u3057\u307e\u3063\u3066\u3044\u308b\u305b\u3044\u304b\u3001\u53f3\u76ee\u306e\u691c\u77e5\u306b\u5931\u6557\u3057\u3066\u3044\u307e\u3059\u304c\u3002\u3002\u3002\n\n\u753b\u50cf\u51fa\u5178\n\u30b3\u30fc\u30c9\u306f\u307b\u307c\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb\u901a\u308a\u3068\u306a\u308a\u307e\u3059\u3002Cascade File\u306e\u5834\u6240\u306f\u4e0a\u8ff0\u306e\u901a\u308a\u74b0\u5883\u306b\u3088\u3063\u3066\u7570\u306a\u308b\u305f\u3081\u6ce8\u610f\u3057\u3066\u304f\u3060\u3055\u3044(\u4e0a\u624b\u304f\u30d1\u30b9\u304c\u901a\u3063\u3066\u3044\u306a\u3044\u3068\u3001error: (-215) !empty() in function\u3068\u3044\u3063\u305f\u30a8\u30e9\u30fc\u304c\u51fa\u307e\u3059)\u3002\ndef face_detection(path):\n    face_cascade = cv2.CascadeClassifier(CASCADE_DIR + \"/haarcascade_frontalface_default.xml\")\n    eye_cascade = cv2.CascadeClassifier(CASCADE_DIR + \"/haarcascade_eye.xml\")\n\n    img = cv2.imread(path)\n    grayed = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)\n\n    faces = face_cascade.detectMultiScale(grayed, 1.3, 5)\n    for (x, y, w, h) in faces:\n        img = cv2.rectangle(img, (x, y), (x + w, y + h), (255, 0, 0), 2)\n        roi_gray = grayed[y:y+h, x:x+w]\n        roi_color = img[y:y+h, x:x+w]\n        eyes = eye_cascade.detectMultiScale(roi_gray)\n        for (ex, ey, ew, eh) in eyes:\n            cv2.rectangle(roi_color, (ex,ey), (ex + ew, ey + eh), (0, 255, 0), 2)\n\n    plt.imshow(cv2.cvtColor(img, cv2.COLOR_BGR2RGB))\n\nface_detection(IMG_FACE)\n\ncv2.CascadeClassifier\u3067\u30d5\u30a1\u30a4\u30eb\u3092\u8aad\u307f\u8fbc\u3093\u3067Classifier\u3092\u4f5c\u6210\u3057\u3001detectMultiScale\u3067\u691c\u51fa\u3092\u884c\u3046\u3001\u3068\u3044\u3046\u306e\u304c\u57fa\u672c\u306e\u6d41\u308c\u306b\u306a\u308a\u307e\u3059\u3002\u4eca\u56de\u306f\u30b0\u30ec\u30fc\u30b9\u30b1\u30fc\u30eb\u5316\u3057\u304b\u3057\u3066\u3044\u307e\u305b\u3093\u304c\u3001\u4e0a\u8ff0\u306e\u95be\u5024\u51e6\u7406\u306a\u3069\u3092\u304a\u3053\u306a\u3046\u3053\u3068\u3067\u3088\u308a\u3057\u3063\u304b\u308a\u3068\u3057\u305f\u691c\u51fa\u304c\u3067\u304d\u308b\u3068\u601d\u3044\u307e\u3059\u3002\u307e\u305f\u3001\u691c\u51fa\u3057\u305f\u7b87\u6240\u306e\u5207\u308a\u51fa\u3057\u306b\u3064\u3044\u3066\u306f\u524d\u9805\u306e\u300c\u691c\u51fa\u9818\u57df\u306e\u5207\u308a\u51fa\u3057\u300d\u3092\u53c2\u8003\u306b\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n\u306a\u304a\u3001\u9854\u304c\u50be\u3044\u3066\u3044\u305f\u308a\u3059\u308b\u3068\u3046\u307e\u304f\u691c\u51fa\u3055\u308c\u307e\u305b\u3093\u3002\u3053\u308c\u306b\u3064\u3044\u3066\u306f\u3001\u76ee/\u53e3\u3092\u5148\u306b\u691c\u51fa\u3057\u3066\u50be\u304d\u3092\u5272\u308a\u51fa\u3059\u30a2\u30d7\u30ed\u30fc\u30c1\u304b\u3001\u5358\u7d14\u306b\u753b\u50cf\u3092\u5f90\u3005\u306b\u56de\u8ee2\u3055\u305b\u3066\u691c\u77e5\u3092\u8a66\u307f\u308b\u304b\u306e2\u3064\u306e\u65b9\u6cd5\u304c\u3042\u308a\u307e\u3059\u3002\u524d\u8005\u306e\u65b9\u304c\u8a08\u7b97\u91cf\u304c\u5c11\u306a\u3044\u304c\u9762\u5012\u3001\u5f8c\u8005\u306e\u65b9\u304c\u7c21\u5358\u3060\u304c\u8a08\u7b97\u91cf\u304c\u591a\u3044\u3001\u3068\u30c8\u30ec\u30fc\u30c9\u30aa\u30d5\u306b\u306a\u308a\u307e\u3059\u3002\u4e0b\u8a18\u306f\u753b\u50cf\u3092\u56de\u8ee2\u3055\u305b\u306a\u304c\u3089\u691c\u77e5\u3059\u308b\u624b\u6cd5\u306b\u3064\u3044\u3066\u8a73\u7d30\u306b\u66f8\u304b\u308c\u3066\u3044\u308b\u306e\u3067\u3001\u53c2\u8003\u306b\u3057\u3066\u307f\u3066\u304f\u3060\u3055\u3044\u3002\n\nOpenCV\u306e\u7269\u4f53\u691c\u51fa\u3092\u56de\u8ee2\u4e0d\u5909\u306b\u3055\u305b\u308b\nrotated face detection\n\n\n\u5b66\u7fd2\u306e\u6e96\u5099\n\u3053\u3053\u307e\u3067\u3067\u3001\u753b\u50cf\u304b\u3089\u76ee\u7684\u306e\u7269\u4f53\u304c\u5199\u3063\u305f\u753b\u50cf\u3092\u5207\u308a\u51fa\u3059\u3053\u3068\u304c\u3067\u304d\u307e\u3057\u305f\u3002\u3042\u3068\u306f\u3001\u96c6\u3081\u305f\u753b\u50cf\u3092\u6a5f\u68b0\u5b66\u7fd2\u30e2\u30c7\u30eb\u306b\u6295\u5165\u3059\u308b\u3060\u3051\u3067\u3059\u3002\n\u305f\u3060\u3001\u5b66\u7fd2\u30e2\u30c7\u30eb\u306b\u753b\u50cf\u3092\u6295\u5165\u3059\u308b\u969b\u306b\u306f\u3044\u308d\u3044\u308d\u306a\u524d\u51e6\u7406\u304c\u5fc5\u8981\u3067\u3059\u3002\u3053\u306e\u70b9\u306b\u3064\u3044\u3066\u306f\u3001\u4ee5\u4e0b\u306b\u307e\u3068\u3081\u3066\u3042\u308a\u307e\u3059\u3002\nConvolutional Neural Network\u3092\u5b9f\u88c5\u3059\u308b/\u30c7\u30fc\u30bf\u306e\u524d\u51e6\u7406\n\u30dd\u30a4\u30f3\u30c8\u3092\u629c\u7c8b\u3059\u308b\u3068\u3001\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u51e6\u7406\u304c\u5fc5\u8981\u3067\u3059\u3002\n\n\u884c\u5217\u5909\u63db: \u5b66\u7fd2\u30e2\u30c7\u30eb\u304c\u60f3\u5b9a\u3057\u3066\u3044\u308b\u884c\u5217\u5f62\u5f0f(\u5927\u62b5\u306fK(\u6df1\u3055=\u8272) x H(\u9ad8\u3055) x W(\u5e45))\u306b\u5909\u63db\u3059\u308b\n\u6df1\u3055\u306e\u8abf\u6574: \u5b66\u7fd2\u30e2\u30c7\u30eb\u304c\u60f3\u5b9a\u3057\u3066\u3044\u308b\u30ab\u30e9\u30fc\u30c1\u30e3\u30cd\u30eb\u306b\u5909\u63db\u3059\u308b(\u30b0\u30ec\u30fc\u30b9\u30b1\u30fc\u30eb\u306a\u306e\u304b\u3001RGB\u306a\u306e\u304b)\n\u753b\u50cf\u30c7\u30fc\u30bf\u306e\u6b63\u898f\u5316: \u5168\u753b\u50cf\u3092\u5e73\u5747\u3057\u305f\u5e73\u5747\u753b\u50cf\u3092\u4f5c\u3063\u3066\u304a\u304d\u3001\u753b\u50cf\u3092\u6b63\u898f\u5316\u3059\u308b\n\u30b9\u30b1\u30fc\u30ea\u30f3\u30b0: 0~255\u306e\u5024\u5e45\u3092\u30010~1\u306b\u5909\u63db\n\n\u8aac\u660e\u306f\u4ee5\u4e0a\u3068\u306a\u308a\u307e\u3059\u3002\u4e0a\u624b\u304fOpenCV\u3092\u5229\u7528\u3057\u3066\u3001\u8272\u3005\u306a\u5b66\u7fd2\u3092\u3055\u305b\u3066\u307f\u3066\u304f\u3060\u3055\u3044\u3002\n\n\u53c2\u8003\u6587\u732e\n\nOpenCV\u3068\u306f\uff1f \u6700\u65b03.0\u306e\u65b0\u6a5f\u80fd\u6982\u8981\u3068\u30e2\u30b8\u30e5\u30fc\u30eb\u69cb\u6210\n\u753b\u50cf\u51e6\u7406\u5165\u9580\u8b1b\u5ea7 : OpenCV\u3068Python\u3067\u59cb\u3081\u308b\u753b\u50cf\u51e6\u7406\nLearn OpenCV\n\n\u6a5f\u68b0\u5b66\u7fd2\u3092\u884c\u3046\u305f\u3081\u306b\u3001\u753b\u50cf\u304b\u3089\u7279\u5b9a\u306e\u7269\u4f53(\u9818\u57df)\u3060\u3051\u5207\u308a\u51fa\u3057\u3066\u8a8d\u8b58\u3057\u305f\u308a\u5b66\u7fd2\u30c7\u30fc\u30bf\u3092\u4f5c\u308a\u305f\u3044\u3001\u3068\u3044\u3046\u3053\u3068\u304c\u3088\u304f\u3042\u308b\u3068\u601d\u3044\u307e\u3059\u3002\n\u672c\u7a3f\u3067\u306f\u975e\u5e38\u306b\u591a\u304f\u306e\u6a5f\u80fd\u3092\u6301\u3064OpenCV\u306e\u4e2d\u304b\u3089\u3001\u305d\u3046\u3057\u305f\u6a5f\u68b0\u5b66\u7fd2\u306e\u305f\u3081\u306b\u5229\u7528\u3059\u308b\u6a5f\u80fd\u306b\u30d5\u30a9\u30fc\u30ab\u30b9\u3057\u3066\u305d\u306e\u5229\u7528\u65b9\u6cd5\u3092\u7d39\u4ecb\u3057\u3066\u3044\u304d\u305f\u3044\u3068\u601d\u3044\u307e\u3059\u3002\u5177\u4f53\u7684\u306b\u306f\u3001\u4e0b\u8a18\u306e\u30e2\u30b8\u30e5\u30fc\u30eb\u3092\u4e2d\u5fc3\u306b\u6271\u3044\u307e\u3059\u3002\n\n![image](https://qiita-image-store.s3.amazonaws.com/0/25990/008fb3af-8d07-a18f-7c60-8eaf7766670f.png)\n[CVPR 2015 Tutorials](http://www.pamitc.org/cvpr15/tutorials.php)\n\n\u57fa\u672c\u7684\u306a\u5207\u308a\u51fa\u3057\u306e\u624b\u9806\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002\u4ee5\u4e0b\u3067\u306f\u3001\u3053\u306e\u30d7\u30ed\u30bb\u30b9\u306b\u5247\u308a\u89e3\u8aac\u3092\u884c\u3063\u3066\u3044\u3053\u3046\u3068\u601d\u3044\u307e\u3059\u3002\n\n* \u524d\u51e6\u7406: \u7269\u4f53\u691c\u51fa\u304c\u884c\u3044\u3084\u3059\u3044\u3088\u3046\u306b\u3001\u753b\u50cf\u306e\u524d\u51e6\u7406\u3092\u884c\u3044\u307e\u3059\n* \u7269\u4f53\u691c\u51fa: \u7269\u4f53\u306e\u691c\u51fa\u3092\u884c\u3044\u3001\u753b\u50cf\u304b\u3089\u5207\u308a\u51fa\u3057\u307e\u3059\n * \u8f2a\u90ed\u691c\u51fa: \u753b\u50cf\u4e0a\u306e\u9818\u57df(\u8f2a\u90ed)\u3092\u8a8d\u8b58\u3059\u308b\u3053\u3068\u3067\u3001\u7269\u4f53\u3092\u691c\u51fa\u3057\u307e\u3059\n * \u7269\u4f53\u8a8d\u8b58: OpenCV\u306e\u5b66\u7fd2\u6e08\u307f\u30e2\u30c7\u30eb\u3092\u5229\u7528\u3057\u3066\u5bfe\u8c61\u306e\u7269\u4f53\u3092\u8a8d\u8b58\u3057\u3001\u691c\u51fa\u3092\u884c\u3044\u307e\u3059\n* \u6a5f\u68b0\u5b66\u7fd2\u306e\u6e96\u5099: \u5207\u308a\u51fa\u3057\u305f\u753b\u50cf\u3092\u7528\u3044\u3001\u4e88\u6e2c\u3084\u5b66\u7fd2\u3092\u884c\u3046\u305f\u3081\u306e\u6e96\u5099\u3092\u884c\u3044\u307e\u3059\n\n\u307e\u305f\u3001OpenCV\u306e\u74b0\u5883\u69cb\u7bc9\u306b\u3064\u3044\u3066\u306f[miniconda](http://conda.pydata.org/miniconda.html)\u3092\u5229\u7528\u3057\u3066\u3044\u307e\u3059\u3002\u3053\u3061\u3089\u3092\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3057\u3001\u4ee5\u4e0b\u306e\u30b3\u30de\u30f3\u30c9\u3092\u6253\u3066\u3070\u74b0\u5883\u69cb\u7bc9\u306f\u3082\u3046\u5b8c\u4e86\u3067\u3059\u3002\n\n* conda create -n cv_env numpy jupyter matplotlib\n* [conda install -c https://conda.anaconda.org/menpo opencv3](https://anaconda.org/menpo/opencv3)\n* activate cv_env\n\n(\u203b\u4eee\u60f3\u74b0\u5883\u306e\u540d\u524d\u306f`cv_env`\u3067\u3042\u308b\u5fc5\u8981\u306f\u3042\u308a\u307e\u305b\u3093\u3002\u307e\u305f\u3001Mac/Linux\u3060\u3068activate\u304c\u843d\u3061\u308b\u306e\u3067\u3061\u3087\u3063\u3068\u5bfe\u5fdc\u304c\u5fc5\u8981\u3067\u3059\u3002\u8a73\u3057\u304f\u306f[\u3053\u3061\u3089](http://qiita.com/icoxfog417/items/950b8af9100b64c0d8f9)\u3092\u3054\u53c2\u7167\u304f\u3060\u3055\u3044)\n\n\u4eca\u56de\u3054\u7d39\u4ecb\u3057\u3066\u3044\u308b\u30b3\u30fc\u30c9\u306f\u4ee5\u4e0b\u306e\u30ea\u30dd\u30b8\u30c8\u30ea\u3067\u516c\u958b\u3057\u3066\u3044\u307e\u3059\u3002\u5fc5\u8981\u306b\u5fdc\u3058\u53c2\u7167\u3044\u305f\u3060\u3051\u308c\u3070\u3068\u601d\u307e\u3059\u3002\n\n[icoxfog417/cv_tutorial](https://github.com/icoxfog417/cv_tutorial)\n\n\n# \u524d\u51e6\u7406\n\n\u7269\u4f53\u306e\u691c\u51fa\u3092\u884c\u3046\u969b\u306b\u306f\u3001\u300c\u8f2a\u90ed\u304c\u306f\u3063\u304d\u308a\u300d\u3057\u3066\u3044\u3066\u300c\u9023\u7d9a\u3057\u3066\u3044\u308b\u300d\u3068\u90fd\u5408\u304c\u826f\u3044\u3067\u3059\u3002\n\n![image](https://qiita-image-store.s3.amazonaws.com/0/25990/d23fb030-da2f-fa50-7a31-ac5f3398178b.png)\n\n\u3053\u306e\u305f\u3081\u306b\u52b9\u679c\u7684\u306a\u624b\u6cd5\u304c\u3001\u300c\u95be\u5024\u51e6\u7406\u300d\u3068\u300c\u30d5\u30a3\u30eb\u30bf\u30fc\u51e6\u7406(\u307c\u304b\u3057)\u300d\u306b\u306a\u308a\u307e\u3059\u3002\u3053\u306e\u30bb\u30af\u30b7\u30e7\u30f3\u3067\u306f\u3053\u306e2\u3064\u306b\u91cd\u70b9\u3092\u7f6e\u304d\u89e3\u8aac\u3057\u3066\u3044\u304d\u307e\u3059\u3002\u306a\u304a\u3001\u753b\u50cf\u51e6\u7406\u3092\u884c\u3046\u5834\u5408\u305f\u3044\u3066\u3044\u306f\u4e8b\u524d\u306b\u30b0\u30ec\u30fc\u30b9\u30b1\u30fc\u30eb\u5316\u3092\u884c\u3046\u305f\u3081\u3001\u305d\u308c\u306b\u3064\u3044\u3066\u3082\u89e6\u308c\u3066\u304a\u304d\u307e\u3059\u3002\n\n## \u30b0\u30ec\u30fc\u30b9\u30b1\u30fc\u30eb\u5316\n\n\u753b\u50cf\u51e6\u7406\u306b\u304a\u3044\u3066\u30ab\u30e9\u30fc\u60c5\u5831\u304c\u5fc5\u8981\u306b\u306a\u308b\u3053\u3068\u306f\u307b\u3068\u3093\u3069\u306a\u3044\u305f\u3081\u3001\u4e8b\u524d\u306b\u30b0\u30ec\u30fc\u30b9\u30b1\u30fc\u30eb\u5316\u3092\u884c\u3046\u3053\u3068\u304c\u3068\u3066\u3082\u591a\u3044\u3067\u3059\u3002\u305f\u3060\u3057\u3001\u6700\u7d42\u7684\u306b\u6a5f\u68b0\u5b66\u7fd2\u3067\u4f7f\u7528\u3059\u308b\u969b\u306fRGB\u60c5\u5831\u304c\u5fc5\u8981\u306a\u3053\u3068\u304c\u591a\u3044\u305f\u3081\u3001\u753b\u50cf\u304b\u3089\u5207\u308a\u51fa\u3057\u3092\u884c\u3046\u969b\u306f\u30ab\u30e9\u30fc\u306e\u65b9\u304b\u3089\u884c\u308f\u306a\u3044\u3068\u3044\u3051\u306a\u3044\u70b9\u306b\u6ce8\u610f\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n\nOpenCV\u3067\u30ab\u30e9\u30fc\u753b\u50cf\u3092\u30b0\u30ec\u30fc\u30b9\u30b1\u30fc\u30eb\u5316\u3059\u308b\u306e\u306f\u3068\u3066\u3082\u7c21\u5358\u3067\u3059\u3002`cv2.cvtColor`\u3067`cv2.COLOR_BGR2GRAY`\u3092\u6307\u5b9a\u3059\u308b\u3060\u3051\u3067\u3059\u3002\n\n```py3\nimport cv2\n\n\ndef to_grayscale(path):\n    img = cv2.imread(path)\n    grayed = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)\n    return grayed\n\n```\n\n`cv2.COLOR_BGR2GRAY`\u306e\u540d\u524d\u306e\u901a\u308a\u3001`cv2.imread`\u3067\u8aad\u307f\u8fbc\u307e\u308c\u308b\u753b\u50cf\u306f\u8272\u60c5\u5831\u304c`BGR`(\u9752\u7dd1\u8d64)\u306e\u9806\u3067\u8aad\u307f\u8fbc\u307e\u308c\u3066\u3044\u307e\u3059\u3002\u753b\u50cf\u3092\u8aad\u307f\u8fbc\u3093\u3060\u5909\u6570\u306f(numpy\u306e)\u884c\u5217\u3068\u306a\u3063\u3066\u3044\u307e\u3059\u304c\u3001\u305d\u306e\u30b5\u30a4\u30ba\u3092\u78ba\u8a8d\u3059\u308b\u3068\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u3002\n\n```pycon\nimg = cv2.imread(IMAGE_PATH)\nimg.shape\n>>> (348, 800, 3)\n```\n\n\u3053\u308c\u306f\u3001\u8aad\u307f\u8fbc\u3093\u3060\u753b\u50cf\u304c348x800x3\u306e\u884c\u5217\u3067\u8868\u73fe\u3055\u308c\u3066\u3044\u308b\u3053\u3068\u3092\u8868\u3057\u3066\u3044\u307e\u3059\u3002\u30a4\u30e1\u30fc\u30b8\u7684\u306b\u306f\u3001\u4e0b\u56f3\u306e\u3088\u3046\u306a\u611f\u3058\u306b\u306a\u308a\u307e\u3059\u3002\n\n![image](https://qiita-image-store.s3.amazonaws.com/0/25990/cbadf406-cf52-c6d2-964c-7fbc9d70adad.png)\n\n\u306a\u304a\u3001\u753b\u50cf\u3092\u8868\u793a\u3057\u305f\u308a\u3059\u308b\u306e\u306b\u826f\u304f\u4f7f\u3046matplotlib\u306f\u3001\u753b\u50cf\u304c`RGB`\u3067\u5165\u3063\u3066\u304f\u308b\u3053\u3068\u3092\u671f\u5f85\u3057\u3066\u3044\u307e\u3059\u3002\u305d\u306e\u305f\u3081\u3001OpenCV\u3067\u8aad\u307f\u8fbc\u3093\u3060\u753b\u50cf\u3092\u305d\u306e\u307e\u307ematplotlib\u306b\u3076\u3063\u3053\u3080\u3068\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3059(\u5de6\u304c\u5143\u306e\u753b\u50cf\u3001\u53f3\u304cOpenCV\u3067\u8aad\u307f\u8fbc\u3093\u3060\u3082\u306e\u3092\u305d\u306e\u307e\u307ematplotlib\u3067\u8868\u793a\u3057\u305f\u3082\u306e)\u3002\n\n![image](https://qiita-image-store.s3.amazonaws.com/0/25990/6a8d6d88-9e03-da8c-bb48-5501f221dc69.png)\n[\u753b\u50cf\u51fa\u5178](https://ja.wikipedia.org/wiki/%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AB:Birds_SJWS_(20140217-0374).JPG)\n\n\u305d\u306e\u305f\u3081\u3001matplotlib\u3067\u8868\u793a\u3059\u308b\u969b\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u30ab\u30e9\u30fc\u306e\u9806\u756a\u3092\u5909\u66f4\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\n\n```py\ndef to_matplotlib_format(img):\n    return cv2.cvtColor(img, cv2.COLOR_BGR2RGB)\n```\n\n## \u95be\u5024\u51e6\u7406\n\n\u95be\u5024\u51e6\u7406\u3068\u306f\u3001\u3042\u308b\u4e00\u5b9a\u306e\u95be\u5024(threshold)\u3092\u8d85\u3048\u3066\u3044\u308b\u304b\u5426\u304b\u3067\u753b\u50cf\u51e6\u7406\u3092\u884c\u3046\u3053\u3068\u3067\u3059\u3002\u4f8b\u3048\u3070\u8f1d\u5ea6\u304c\u4e00\u5b9a\u5024\u306b\u9054\u3057\u3066\u3044\u306a\u3044\u3068\u3053\u308d\u3092\u3059\u3079\u30660\u306b\u3059\u308b\u3001\u3068\u3044\u3063\u305f\u3088\u3046\u306a\u51e6\u7406\u3067\u3059\u3002\u3053\u308c\u306b\u3088\u308a\u80cc\u666f\u3092\u843d\u3068\u3057\u305f\u308a\u8f2a\u90ed\u3092\u5f37\u8abf\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u3001\u4e0b\u56f3\u306e\u3088\u3046\u306a\u5177\u5408\u306b\u52a0\u5de5\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059(\u5de6\u5074\u304c\u5143\u306e\u753b\u50cf\u3001\u53f3\u5074\u304c\u95be\u5024\u51e6\u7406\u3092\u884c\u3063\u305f\u3082\u306e)\u3002\n\n![image](https://qiita-image-store.s3.amazonaws.com/0/25990/b9a86fb6-af33-8081-632b-dd4b48b89c80.png)\n\nOpenCV\u306b\u304a\u3051\u308b\u95be\u5024\u51e6\u7406\u306f\u3001[`cv2.threshold`](http://docs.opencv.org/3.0-beta/modules/imgproc/doc/miscellaneous_transformations.html?highlight=cv2.threshold#cv2.threshold)\u3067\u5b9f\u884c\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\u3053\u3053\u3067\u306e\u4e3b\u8981\u306a\u30d1\u30e9\u30e1\u30fc\u30bf\u30fc\u306f\u3001\u95be\u5024\u3068\u306a\u308b`thresh`\u3001\u5024\u306e\u4e0a\u9650\u3067\u3042\u308b`maxval`\u3001\u95be\u5024\u51e6\u7406\u306e\u7a2e\u5225\u3067\u3042\u308b`type`\u306b\u306a\u308a\u307e\u3059\u3002\n\n\u4e0b\u8868\u306f\u3001\u95be\u5024\u51e6\u7f6e\u306e`type`\u306e\u7a2e\u5225\u3068\u3001\u305d\u306e\u969b\u306b\u95be\u5024(thresh)/\u4e0a\u9650(maxValue)\u304c\u3069\u3046\u4f7f\u7528\u3055\u308c\u308b\u306e\u304b\u306b\u3064\u3044\u3066\u307e\u3068\u3081\u305f\u3082\u306e\u3067\u3059\u3002\n\n| Threshold Type | over thresh :arrow_up_small: | under thresh :arrow_down_small:|\n|:-----------|:------------|:------------:|\n| `THRESH_BINARY` | maxValue | 0 |\n| `THRESH_BINARY_INV` | 0 | maxValue |\n| `THRESH_TRUNC` | threshold | (as is) |\n| `THRESH_TOZERO`| (as is) | 0 |\n| `THRESH_TOZERO_INV`| 0 | (as is) |\n\n`(as is)`\u306f\u3001\u5143\u306e\u753b\u50cf\u306e\u5024\u304c\u305d\u306e\u307e\u307e\u4f7f\u7528\u3055\u308c\u308b\u3068\u3044\u3046\u610f\u5473\u3067\u3059\u3002\u95be\u5024\u51e6\u7406\u306b\u3064\u3044\u3066\u8a73\u7d30\u3092\u77e5\u308a\u305f\u3044\u65b9\u306f\u3001\u4e0b\u8a18\u306e\u8cc7\u6599\u304c\u53c2\u8003\u306b\u306a\u308a\u307e\u3059\u3002\n\n[OpenCV Threshold ( Python , C++ )](http://www.learnopencv.com/opencv-threshold-python-cpp/)\n\n\u4eca\u56de\u5229\u7528\u3057\u305f\u9ce5\u306e\u753b\u50cf\u306f\u3001\u80cc\u666f\u306e\u9752\u8272\u3092\u843d\u3068\u3059\u4ee5\u5916\u306b\u3001\u9ce5\u306e\u7fbd\u90e8\u5206\u306e\u5883\u754c(\u660e\u308b\u3044)\u3092\u660e\u78ba\u306b\u3059\u308b\u3088\u3046\u306b\u3057\u3066\u3044\u307e\u3059\u3002\n\n* \u80cc\u666f\u3092\u843d\u3068\u3059->THRESH_BINARY\n * \u95be\u5024\u3088\u308a\u5927\u304d\u3044\u7b87\u6240(=\u660e\u308b\u3044=\u8584\u3044=\u80cc\u666f): maxValue(255=\u767d=\u6d88\u3059)\n * \u95be\u5024\u672a\u6e80: 0(\u9ed2=\u5f37\u8abf)\n* \u5883\u754c\u306e\u660e\u78ba\u5316->THRESH_BINARY_INV\n * \u95be\u5024\u3088\u308a\u5927\u304d\u3044\u7b87\u6240(=\u660e\u308b\u3044=\u9ce5\u306e\u9aa8=\u5883\u754c): 0(\u9ed2=\u5f37\u8abf)\n * \u95be\u5024\u672a\u6e80: maxValue(255=\u767d=\u6d88\u3059)\n\n\u305d\u3057\u3066\u3001\u6700\u5f8c\u306b\u3053\u306e2\u3064\u306e\u51e6\u7406\u7d50\u679c\u3092\u30de\u30fc\u30b8\u3057\u3066\u3044\u307e\u3059\u3002\n\n```py\ndef binary_threshold(path):\n    img = cv2.imread(path)\n    grayed = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)\n    under_thresh = 105\n    upper_thresh = 145\n    maxValue = 255\n    th, drop_back = cv2.threshold(grayed, under_thresh, maxValue, cv2.THRESH_BINARY)\n    th, clarify_born = cv2.threshold(grayed, upper_thresh, maxValue, cv2.THRESH_BINARY_INV)\n    merged = np.minimum(drop_back, clarify_born)\n    return merged\n```\n\n`thresh`\u306e\u5024\u3092\u3069\u308c\u3050\u3089\u3044\u306b\u3057\u305f\u3089\u3044\u3044\u304b\u3088\u304f\u5206\u304b\u3089\u306a\u3044\u5834\u5408\u306f\u3001\u30da\u30a4\u30f3\u30c8\u30c4\u30fc\u30eb\u306a\u3069\u3067\u660e\u308b\u3055\u3092\u8abf\u3079\u308b\u3068\u3088\u3044\u3067\u3059\u3002Windows\u3060\u3068\u6a19\u6e96\u306e\u30da\u30a4\u30f3\u30c8\u30c4\u30fc\u30eb\u306e\u30b9\u30dd\u30a4\u30c8\u3067\u8abf\u3079\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\n![image](https://qiita-image-store.s3.amazonaws.com/0/25990/c0ebfcd5-ddad-27a5-8698-6011d5c7f5c6.png)\n\n\u306a\u304a\u3001`adaptiveThreshold`\u3092\u5229\u7528\u3059\u308b\u3068\u5468\u8fba\u306e\u30d4\u30af\u30bb\u30eb\u3092\u898b\u306a\u304c\u3089\u9069\u5ea6\u306a\u95be\u5024\u3092\u6c7a\u3081\u3066\u304f\u308c\u308b\u306e\u3067\u3001\u3044\u3063\u305f\u3093\u306f\u3053\u308c\u3067\u8a66\u3057\u3066\u307f\u308b\u306e\u3082\u3044\u3044\u3068\u601d\u3044\u307e\u3059\u3002\u8a73\u7d30\u306f\u4e0b\u8a18\u306e\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n\n[Image Thresholding](http://docs.opencv.org/3.1.0/d7/d4d/tutorial_py_thresholding.html#gsc.tab=0)\n\n\n### \u30ab\u30e9\u30fc\u306b\u3088\u308b\u95be\u5024\u51e6\u7406\n\n[`cv2.inRange`](http://docs.opencv.org/3.0-beta/modules/core/doc/operations_on_arrays.html?highlight=cv2.inrange#cv2.inRange)\u3092\u4f7f\u7528\u3059\u308c\u3070\u3001\u7279\u5b9a\u306e\u8272\u306e\u90e8\u5206\u3092\u629c\u304d\u51fa\u3059\u3053\u3068\u3082\u53ef\u80fd\u3067\u3059\u3002\u4ee5\u4e0b\u3067\u306f\u3001\u80cc\u666f\u306e\u9752\u8272\u90e8\u5206\u3092\u691c\u77e5\u3057\u3066\u30de\u30b9\u30af\u3092\u304b\u3051\u3066\u3044\u307e\u3059\u3002\n\n![image](https://qiita-image-store.s3.amazonaws.com/0/25990/c3008379-8033-23ae-913c-9c7a2b558e42.png)\n\n```py\ndef mask_blue(path):\n    img = cv2.imread(path)\n    hsv = cv2.cvtColor(img, cv2.COLOR_BGR2HSV)\n\n    blue_min = np.array([100, 170, 200], np.uint8)\n    blue_max = np.array([120, 180, 255], np.uint8)\n    \n    blue_region = cv2.inRange(hsv, blue_min, blue_max)\n    white = np.full(img.shape, 255, dtype=img.dtype)\n    background = cv2.bitwise_and(white, white, mask=blue_region)  # detected blue area becomes white\n    \n    inv_mask = cv2.bitwise_not(blue_region)  # make mask for not-blue area\n    extracted = cv2.bitwise_and(img, img, mask=inv_mask)\n    \n    masked = cv2.add(extracted, background)\n    \n    return masked\n```\n\n`cv2.inRange`\u306b\u3088\u3063\u3066\u5f97\u3089\u308c\u305f`blue_region`\u304c\u6307\u5b9a\u3057\u305f\u30ab\u30e9\u30fc\u306e\u9818\u57df\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u3002`blue_region`\u306f\u30b0\u30ec\u30fc\u30b9\u30b1\u30fc\u30eb\u3067\u8868\u73fe\u3055\u308c\u3066\u304a\u308a\u3001\u767a\u898b\u3055\u308c\u305f\u7b87\u6240\u307b\u3069\u5024\u304c\u9ad8\u304f\u306a\u3063\u3066\u3044\u308b(255=\u767d\u306b\u8fd1\u3044)\u306e\u306b\u6ce8\u610f\u3057\u3066\u304f\u3060\u3055\u3044\u3002\u306a\u304a\u3001`cv2.inRange`\u3092\u4f7f\u7528\u3059\u308b\u306b\u5f53\u305f\u3063\u3066\u306f\u753b\u50cf\u3092HSV\u8868\u73fe\u306b\u5909\u3048\u3066\u304a\u304f\u5fc5\u8981\u304c\u3042\u308a\u3001\u8272\u306e\u7bc4\u56f2\u306e\u6307\u5b9a\u3082\u305d\u308c\u306b\u5023\u3046\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002HSV\u8868\u73fe\u3068\u306f\u306a\u3093\u305e\u3084\u3001\u3068\u3044\u3046\u306e\u306f\u4e0b\u56f3\u3092\u898b\u308b\u3068\u308f\u304b\u308a\u3084\u3059\u3044\u3067\u3059\u3002\n\n![image](https://qiita-image-store.s3.amazonaws.com/0/25990/e6bcc8ec-7912-57ec-2b41-bc6d62b4b3b2.png)\n[HSL and HSV](https://en.wikipedia.org/wiki/HSL_and_HSV)\n\n\u305f\u3060\u3001OpenCV\u3067\u6307\u5b9a\u3059\u308bHSV\u306e\u5024\u306b\u306f\u5c11\u3057\u7656\u304c\u3042\u308b\u306e\u3067\u3001\u4e0a\u8a18\u306e\u3088\u3046\u306b\u30da\u30a4\u30f3\u30c8\u30c4\u30fc\u30eb\u304b\u3089\u5024\u3092\u63a8\u5b9a\u3059\u308b\u306e\u304c\u304b\u306a\u308a\u96e3\u3057\u3044\u3067\u3059\u3002\n\n|  | \u4e00\u822c\u7684\u306a\u5024\u306e\u7bc4\u56f2 | OpenCV|\n|:-----------|:------------|:------------:|\n| H | 0 - 360 | 0 - 180 |\n| S | 0 - 100 | 0 - 255 |\n| V | 0 - 100 | 0 - 255 |\n\n\u305d\u306e\u305f\u3081\u3001\u6307\u5b9a\u304c\u3042\u307e\u308a\u3046\u307e\u304f\u3044\u304b\u306a\u3088\u3046\u3067\u3042\u308c\u3070\u5b9f\u969b\u306b\u884c\u5217\u5185\u306e\u5024\u3092\u898b\u305f\u65b9\u304c\u901f\u3044\u3067\u3059\u3002`img[10:20, 10:20]`\u3068\u3044\u3046\u611f\u3058\u3067\u6240\u5b9a\u306e\u9818\u57df\u306e\u884c\u5217\u5024(\u30ab\u30e9\u30fc\u5024)\u3092\u5207\u308a\u51fa\u305b\u308b\u306e\u3067\u3001\u305d\u308c\u3067\u78ba\u8a8d\u3092\u3059\u308b\u3068\u30d4\u30f3\u30dd\u30a4\u30f3\u30c8\u3067\u6307\u5b9a\u304c\u53ef\u80fd\u3067\u3059(\u3068\u3044\u3046\u304b\u4eca\u56de\u306f\u30da\u30a4\u30f3\u30c8\u306e\u5024\u304c\u3069\u3046\u306b\u3082\u5f79\u306b\u7acb\u305f\u306a\u304b\u3063\u305f\u306e\u3067\u3001\u3053\u306e\u624b\u6cd5\u3067\u6307\u5b9a\u3057\u307e\u3057\u305f)\u3002\n\n\u3042\u3068\u306f\u3001`blue_region`\u306e\u9818\u57df\u3092\u3059\u3079\u3066\u767d\u306b\u3059\u308b`background`\u3068\u3001`blue_region`\u4ee5\u5916\u306e\u9818\u57df\u3092\u629c\u304d\u51fa\u3057\u305f`extracted`\u3092\u5408\u7b97\u3057\u3066\u753b\u50cf\u3092\u4f5c\u6210\u3057\u3066\u3044\u307e\u3059\u3002`bitwise_and`/`bitwise_not`\u306f\u3001\u3053\u3046\u3057\u305f\u30de\u30b9\u30af\u51e6\u7406\u3092\u884c\u3046\u306e\u306b\u4fbf\u5229\u306a\u95a2\u6570\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u3002\n\n\u4ee5\u4e0a\u304c\u3001\u95be\u5024\u51e6\u7406\u306b\u3064\u3044\u3066\u306e\u89e3\u8aac\u3068\u306a\u308a\u307e\u3059\u3002\n\n\n## \u5e73\u6ed1\u5316(\u30b9\u30e0\u30fc\u30b8\u30f3\u30b0)\n\n\u753b\u50cf\u306e\u8f2a\u90ed\u304c\u306f\u3063\u304d\u308a\u3057\u306a\u3044\u5834\u5408\u3084\u80cc\u666f\u304c\u6fc3\u304b\u3063\u305f\u308a\u3059\u308b\u5834\u5408\u3001\u95be\u5024\u51e6\u7406\u3092\u304b\u3051\u3066\u3082\u8f2a\u90ed\u304c\u53d6\u308c\u306a\u304b\u3063\u305f\u308a\u80cc\u666f\u304c\u6b8b\u3063\u3066\u3057\u307e\u3063\u305f\u308a\u3057\u307e\u3059\u3002\u4e0b\u56f3\u306e\u4f8b\u3067\u306f\u3001\u8db3\u5143\u306e\u7802\u5229\u304c\u7d30\u304b\u304f\u6b8b\u3063\u3066\u3057\u307e\u3063\u3066\u3044\u3066\u3001\u8f2a\u90ed\u3082\u30ae\u30b6\u30ae\u30b6\u3057\u3066\u3044\u307e\u3059\u3002\n\n![image](https://qiita-image-store.s3.amazonaws.com/0/25990/e288e099-98c5-d24d-668c-0157aad29817.png)\n[Piping plover chick with band at two weeks](https://en.wikipedia.org/wiki/Piping_plover)\n\n\n\u3053\u3046\u3057\u305f\u5834\u5408\u306f\u3001\u30d5\u30a3\u30eb\u30bf\u30fc\u3092\u4f7f\u3063\u305f\u30b9\u30e0\u30fc\u30b8\u30f3\u30b0\u3092\u884c\u3046\u3068\u3088\u3044\u3067\u3059\u3002\u30d5\u30a3\u30eb\u30bf\u30fc\u51e6\u7406\u306f\u7aef\u7684\u306b\u8a00\u3048\u3070\u753b\u50cf\u3092\u307c\u3084\u304b\u3059\u51e6\u7406\u306b\u306a\u308a\u307e\u3059\u304c\u3001\u753b\u50cf\u3092\u307c\u304b\u3059\u3053\u3068\u3067\u300c\u307c\u3051\u3066\u3082\u306f\u3063\u304d\u308a\u898b\u3048\u308b\u70b9\u300d\u306e\u307f\u3092\u691c\u77e5\u3057\u3001\u9006\u306b\u307c\u3084\u304b\u3057\u305f\u3089\u6d88\u3048\u3066\u3057\u307e\u3046\u3088\u3046\u306a\u70b9\u3092\u7121\u8996\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\u4ee5\u4e0b\u306f\u3001`GaussianBlur`\u3092\u5229\u7528\u3057\u30ac\u30a6\u30b7\u30a2\u30f3\u30d5\u30a3\u30eb\u30bf\u3092\u9069\u7528\u3057\u3066\u304b\u3089(\u5de6\u56f3)\u3001\u95be\u5024\u51e6\u7406\u3092\u3057\u305f\u4f8b\u306b\u306a\u308a\u307e\u3059(\u53f3\u56f3)\u3002\n\n```\ndef blur(img):\n    filtered = cv2.GaussianBlur(img, (11, 11), 0)\n    return filtered\n```\n\n![image](https://qiita-image-store.s3.amazonaws.com/0/25990/9437e5ba-e2fb-d5ed-ae23-448948fb1d02.png)\n\n\u753b\u50cf\u306e\u7d30\u304b\u3044\u30c7\u30a3\u30c6\u30a3\u30fc\u30eb\u306f\u5931\u308f\u308c\u3066\u3044\u307e\u3059\u304c\u3001\u7279\u5fb4\u7684\u306a\u7b87\u6240\u306f\u307e\u3068\u307e\u3063\u3066\u6b8b\u308a\u3001\u80cc\u666f\u306b\u591a\u304f\u3042\u3063\u305f\u30ce\u30a4\u30ba\u304c\u6d88\u3048\u3066\u304f\u308c\u3066\u3044\u308b\u306e\u304c\u5206\u304b\u308b\u3068\u601d\u3044\u307e\u3059\u3002OpenCV\u516c\u5f0f\u306e\u4ee5\u4e0b\u306e\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u306b\u306f\u3001`GaussianBlur`\u4ee5\u5916\u306e\u30d5\u30a3\u30eb\u30bf\u306b\u3064\u3044\u3066\u3082\u66f8\u304b\u308c\u3066\u3044\u308b\u306e\u3067\u53c2\u7167\u3057\u3066\u307f\u3066\u304f\u3060\u3055\u3044\u3002\n\n[Smoothing Images](http://docs.opencv.org/3.1.0/d4/d13/tutorial_py_filtering.html#gsc.tab=0)\n\n\u3053\u308c\u4ee5\u5916\u306b\u753b\u50cf\u306e\u5e73\u6ed1\u5316\u306b\u4f7f\u7528\u3055\u308c\u308b\u624b\u6cd5\u3068\u3057\u3066\u3001\u30e2\u30eb\u30d5\u30a9\u30ed\u30b8\u30fc\u304c\u3042\u308a\u307e\u3059\u3002\u3053\u308c\u306f\u3001\u753b\u50cf\u306e\u81a8\u5f35\u30fb\u53ce\u7e2e\u51e6\u7406\u306a\u3069\u3092\u5229\u7528\u3059\u308b\u3053\u3068\u3067\u30ce\u30a4\u30ba\u3092\u9664\u53bb\u3057\u305f\u308a\u8f2a\u90ed\u3092\u5f37\u8abf\u3057\u305f\u308a\u3059\u308b\u624b\u6cd5\u3067\u3059\u3002\n\u4ee5\u4e0b\u306f\u3001\u30e2\u30eb\u30d5\u30a9\u30ed\u30b8\u30fc\u306b\u304a\u3051\u308b\u4ee3\u8868\u7684\u306a\u624b\u6cd5\u306e\u30a4\u30e1\u30fc\u30b8\u3092\u8868\u3057\u305f\u3082\u306e\u3067\u3059\u3002\n\n![image](https://qiita-image-store.s3.amazonaws.com/0/25990/daa1f4dc-1c77-78f1-4b24-7940fc3f3615.png)\n[Morphology](http://homepages.inf.ed.ac.uk/rbf/HIPR2/morops.htm)\n\n* Dialation: \u5883\u754c\u9818\u57df\u3092\u62e1\u5f35\u3059\u308b\u52b9\u679c\u304c\u3042\u308b\n* Erosion: \u5883\u754c\u9818\u57df\u3092\u4fb5\u98df\u3059\u308b\u52b9\u679c\u304c\u3042\u308b\n* Opening: Erosion\u3068\u4f3c\u3066\u3044\u3066\u3001\u5883\u754c\u3092\u4fb5\u98df\u3059\u308b\u304cErosion\u3088\u308a\u3086\u308b\u3084\u304b\u3002\n* Closing: Dialation\u3068\u4f3c\u3066\u3044\u3066\u3001\u5883\u754c\u3092\u62e1\u5f35\u3057\u80cc\u666f\u3092\u53ce\u7e2e\u3055\u305b\u308b\u304cDialation\u3088\u308a\u3086\u308b\u3084\u304b\n\n\u7406\u8ad6\u7684\u306a\u8a73\u7d30\u306f\u3053\u3053\u3067\u306f\u5272\u611b\u3057\u307e\u3059\u304c\u3001\u30d5\u30a3\u30eb\u30bf\u306e\u4e00\u7a2e\u3068\u601d\u3063\u3066\u3044\u305f\u3060\u3044\u3066\u5dee\u3057\u652f\u3048\u3042\u308a\u307e\u305b\u3093\u3002OpenCV\u3067\u306f\u4e0a\u8a18\u306e\u30e2\u30eb\u30d5\u30a9\u30ed\u30b8\u30fc\u51e6\u7406\u304c\u3067\u304d\u308b`cv2.dilate`\u3001`cv2.erode`\u3001\u305d\u3057\u3066Opening/Closing\u3092\u9023\u7d9a\u7684\u306b\u9069\u7528\u3067\u304d\u308b\u4fbf\u5229\u306a`cv2.morphologyEx`\u304c\u3042\u308a\u307e\u3059\u3002\u4eca\u56de\u306f\u3001`cv2.morphologyEx`\u3092\u4f7f\u3063\u3066\u5e73\u6ed1\u5316\u51e6\u7406\u3092\u884c\u3063\u3066\u307f\u307e\u3059\u3002\n\n```\ndef morph(img):\n    kernel = np.ones((3, 3),np.uint8)\n    opened = cv2.morphologyEx(img, cv2.MORPH_OPEN, kernel, iterations=2)\n    return opened\n```\n\n![image](https://qiita-image-store.s3.amazonaws.com/0/25990/417a766c-92bc-c7f5-048a-6f3daedb6be0.png)\n\n\u4eca\u56de\u306f\u80cc\u666f\u306e\u8272\u304c\u6fc3\u3044\u305f\u3081\u304bCLOSE\u3067\u9818\u57df\u3092\u592a\u3089\u305b\u308b\u3068\u5927\u5909\u306a\u3053\u3068\u306b\u306a\u3063\u305f\u306e\u3067\u3001OPEN\u306b\u3088\u308a\u9818\u57df\u9593\u306e\u8ddd\u96e2\u304c\u306a\u308b\u3079\u304f\u7a7a\u304f\u3088\u3046\u306b\u3059\u308b\u65b9\u5411\u3067\u51e6\u7406\u3092\u304b\u3051\u3066\u307f\u307e\u3057\u305f\u3002\u305f\u3060\u3001\u307e\u3060\u30ce\u30a4\u30ba\u304c\u6b8b\u3063\u3066\u3044\u308b\u305f\u3081\u30d5\u30a3\u30eb\u30bf\u3068\u4f75\u7528\u3067\u51e6\u7406\u3092\u3057\u3066\u3044\u307e\u3059\u3002\n\n\n```\ndef morph_and_blur(img):\n    kernel = np.ones((3, 3),np.uint8)\n    m = cv2.GaussianBlur(img, (3, 3), 0)\n    m = cv2.morphologyEx(m, cv2.MORPH_OPEN, kernel, iterations=2)\n    m = cv2.GaussianBlur(m, (5, 5), 0)\n    return m\n```\n\n![image](https://qiita-image-store.s3.amazonaws.com/0/25990/24bf9dca-d78b-38f1-b187-f7694d92bbee.png)\n\n\u5358\u7d14\u306b\u30d5\u30a3\u30eb\u30bf\u3092\u304b\u3051\u308b\u3088\u308a\u306f\u60c5\u5831\u304c\u6b8b\u3063\u3066\u3044\u308b\u304b\u306a\u30fb\u30fb\u30fb\u3068\u3044\u3046\u611f\u3058\u3067\u3059\u306d\u3002\u307e\u305f\u3001Opening\u3092\u304b\u3051\u305f\u3053\u3068\u306b\u3088\u308a\u4ee5\u524d\u306f\u7e4b\u304c\u3063\u3066\u3044\u305f\u9818\u57df\u304c\u3057\u3063\u304b\u308a\u72ec\u7acb\u3059\u308b\u3088\u3046\u306b\u306a\u3063\u3066\u3044\u308b\u306e\u304c\u5206\u304b\u308b\u3068\u601d\u3044\u307e\u3059\u3002\n\u30e2\u30eb\u30d5\u30a9\u30ed\u30b8\u30fc\u306e\u51e6\u7406\u306b\u3064\u3044\u3066\u306f\u4ee5\u4e0b\u304c\u8a73\u3057\u3044\u306e\u3067\u3001\u53c2\u8003\u306b\u3057\u3066\u307f\u3066\u304f\u3060\u3055\u3044\u3002\n\n* [Simple and effective coin segmentation using Python and OpenCV](http://blog.christianperone.com/2014/06/simple-and-effective-coin-segmentation-using-python-and-opencv/)\n* [Image Segmentation with Watershed Algorithm](http://docs.opencv.org/3.1.0/d3/db4/tutorial_py_watershed.html#gsc.tab=0)\n\n\u5b9f\u969b\u3084\u3063\u3066\u307f\u308b\u3068\u3001\u80cc\u666f\u304c\u6fc3\u3044\u5834\u5408\u30b0\u30ec\u30fc\u30b9\u30b1\u30fc\u30eb\u306b\u3057\u3066\u3057\u307e\u3046\u3068\u305d\u3053\u304b\u3089\u9818\u57df\u3092\u306f\u3063\u304d\u308a\u3055\u305b\u308b\u306e\u306f\u304b\u306a\u308a\u96e3\u3057\u3044\u3067\u3059\u3002\u305d\u306e\u305f\u3081\u3001\u80cc\u666f\u306b\u305d\u308c\u3068\u308f\u304b\u308b\u8272\u304c\u3064\u3044\u3066\u3044\u308b\u306a\u3089\u8272\u3067\u30de\u30b9\u30af\u3092\u304b\u3051\u3066\u3001\u305d\u306e\u5f8c\u306b\u51e6\u7406\u3092\u3057\u305f\u65b9\u304c\u3057\u3063\u304b\u308a\u3068\u533a\u5206\u3067\u304d\u308b\u3068\u601d\u3044\u307e\u3059\u3002\n\n\u4ee5\u4e0a\u304c\u524d\u51e6\u7406\u306b\u3064\u3044\u3066\u306e\u8aac\u660e\u306b\u306a\u308a\u307e\u3059\u3002\u3053\u3053\u304b\u3089\u3001\u524d\u51e6\u7406\u3092\u3057\u305f\u5f8c\u306e\u753b\u50cf\u304b\u3089\u3044\u3088\u3044\u3088\u7269\u4f53\u306e\u691c\u51fa\u3092\u884c\u3063\u3066\u3044\u304d\u305f\u3044\u3068\u601d\u3044\u307e\u3059\u3002\n\n# \u7269\u4f53\u691c\u51fa\n\n## \u8f2a\u90ed\u691c\u51fa\n\n\u3053\u3053\u307e\u3067\u3067\u3001\u524d\u51e6\u7406\u306b\u3088\u308a\u8a8d\u8b58\u3057\u305f\u3044\u7269\u4f53\u3092\u660e\u78ba\u306b\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u3066\u304d\u305f\u3068\u601d\u3046\u306e\u3067\u3001\u305d\u308c\u3092\u5229\u7528\u3057\u3066\u8f2a\u90ed\u306e\u691c\u51fa\u3092\u884c\u3044\u307e\u3059\u3002\n\n![image](https://qiita-image-store.s3.amazonaws.com/0/25990/b87a82b7-1660-dd67-f688-c9b0e7dfc819.png)\n\nOpenCV\u3067\u306f\u3001`cv2.findContours`\u3092\u5229\u7528\u3059\u308b\u3053\u3068\u3067\u7c21\u5358\u306b\u8f2a\u90ed\u3092\u691c\u51fa\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\n```py3\ndef detect_contour(path, min_size):\n    contoured = cv2.imread(path)\n    forcrop = cv2.imread(path)\n\n    # make binary image\n    birds = binary_threshold_for_birds(path)\n    birds = cv2.bitwise_not(birds)\n    \n    # detect contour\n    im2, contours, hierarchy = cv2.findContours(birds, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)\n    \n    crops = []\n    # draw contour\n    for c in contours:\n        if cv2.contourArea(c) < min_size:\n            continue\n        \n        # rectangle area\n        x, y, w, h = cv2.boundingRect(c)\n        x, y, w, h = padding_position(x, y, w, h, 5)\n        \n        # crop the image\n        cropped = forcrop[y:(y + h), x:(x + w)]\n        cropped = resize_image(cropped, (210, 210))\n        crops.append(cropped)\n        \n        # draw contour\n        cv2.drawContours(contoured, c, -1, (0, 0, 255), 3)  # contour\n        cv2.rectangle(contoured, (x, y), (x + w, y + h), (0, 255, 0), 3)  #rectangle contour\n                \n    return contoured, crops\n\n\ndef padding_position(x, y, w, h, p):\n    return x - p, y - p, w + p * 2, h + p * 2\n\n```\n\n`binary_threshold_for_birds`\u306f\u3001\u4eca\u56de\u5229\u7528\u3057\u3066\u3044\u308b\u9ce5\u306e\u753b\u50cf\u3092\u95be\u5024\u51e6\u7406\u3059\u308b\u305f\u3081\u306e\u95a2\u6570\u3067\u3059(=\u524d\u51e6\u7406)\u3002\u3053\u308c\u3067\u51fa\u529b\u3055\u308c\u308b\u306e\u306f\u5148\u307b\u3069\u7d39\u4ecb\u3057\u305f\u80cc\u666f\u767d\u306e\u753b\u50cf\u306a\u306e\u3067\u3001\u3053\u308c\u3092\u53cd\u8ee2\u3057\u3066\u9818\u57df\u691c\u77e5\u306b\u4f7f\u3044\u307e\u3059\u3002\u308f\u304b\u308a\u306b\u304f\u3044\u3067\u3059\u304c\u3001\u767d\u9ed2\u306e\u5834\u5408\u300c\u767d\u300d\u306e\u65b9\u304c\u5024\u304c\u9ad8\u3044\u305f\u3081(255)\u3001\u8f2a\u90ed\u691c\u51fa\u3092\u884c\u3046\u5834\u5408\u8f2a\u90ed\u304c\u767d\u3067\u63cf\u753b\u3055\u308c\u3066\u3044\u308b\u753b\u50cf\u3092\u5165\u529b\u3068\u3057\u3066\u4e0e\u3048\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\n\u203b\u767d\u9ed2\u306e\u304b\u306a\u308a\u306f\u3063\u304d\u308a\u3057\u305f\u753b\u50cf\u3067\u306a\u3044\u3068\u8f2a\u90ed\u304c\u691c\u51fa\u3055\u308c\u306a\u3044\u306e\u3067\u6ce8\u610f\u3057\u3066\u304f\u3060\u3055\u3044\n\n\u3042\u3068\u306f\u3001`cv2.findContours`\u3092\u5b9f\u884c\u3059\u308b\u3060\u3051\u3067\u3059\u3002\u3053\u308c\u3067\u691c\u51fa\u3055\u308c\u305f\u8f2a\u90ed\u306f\u3001`cv2.drawContours`\u3067\u7c21\u5358\u306b\u753b\u50cf\u4e0a\u306b\u63cf\u753b\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\u307e\u305f\u3001`cv2.boundingRect`\u3092\u5229\u7528\u3059\u308b\u3053\u3068\u3067\u8f2a\u90ed\u304c\u53ce\u307e\u308b\u77e9\u5f62\u306e\u5ea7\u6a19\u3092\u53d6\u5f97\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\u305f\u3060\u3001\u3053\u308c\u306f\u30ae\u30ea\u30ae\u30ea\u306e\u63a5\u6226\u306b\u306a\u3063\u3066\u3044\u308b\u306e\u3067\u4eca\u56de\u306f`padding_position`\u3067\u3061\u3087\u3063\u3068\u5468\u308a\u306b\u4f59\u88d5\u3092\u6301\u305f\u305b\u3066\u3044\u307e\u3059\u3002\n`cv2.findContours`\u306b\u3064\u3044\u3066\u306f\u3001\u516c\u5f0f\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u306b\u3064\u3044\u3066\u3082\u8a18\u8f09\u304c\u3042\u308b\u305f\u3081\u3054\u53c2\u7167\u304f\u3060\u3055\u3044\u3002\n\n[Contours : Getting Started](http://docs.opencv.org/3.1.0/d4/d73/tutorial_py_contours_begin.html#gsc.tab=0)\n\n\u306a\u304a\u3001\u81ea\u52d5\u3067\u306a\u304f\u30e6\u30fc\u30b6\u30fc\u304c\u304b\u3053\u3063\u3066\u304f\u308b\u5834\u5408\u3001\u30b0\u30e9\u30d5\u30ab\u30c3\u30c8\u3068\u3044\u3046\u624b\u6cd5\u3092\u7528\u3044\u3066\u56f2\u308f\u308c\u305f\u9818\u57df\u306e\u4e2d\u306e\u7269\u4f53\u3092\u691c\u51fa\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\u8a73\u7d30\u306f\u89e6\u308c\u307e\u305b\u3093\u304c\u3001\u30a2\u30ce\u30c6\u30fc\u30b7\u30e7\u30f3\u7528\u306e\u30c4\u30fc\u30eb\u306a\u3069\u3092\u4f5c\u308b\u5834\u5408\u306f\u6709\u7528\u3060\u3068\u601d\u3046\u306e\u3067\u3001\u8208\u5473\u304c\u3042\u308b\u65b9\u306f\u4ee5\u4e0b\u3092\u53c2\u7167\u3057\u3066\u307f\u3066\u304f\u3060\u3055\u3044\u3002\n\n[Interactive Foreground Extraction using GrabCut Algorithm](http://docs.opencv.org/3.1.0/d8/d83/tutorial_py_grabcut.html#gsc.tab=0)\n\n\n### \u8f2a\u90ed\u306e\u8fd1\u4f3c\n\nOpenCV\u306b\u306f\u3001\u691c\u51fa\u3057\u305f\u8f2a\u90ed\u3092\u8fd1\u4f3c\u3059\u308b\u95a2\u6570\u304c\u3044\u304f\u3064\u304b\u7528\u610f\u3055\u308c\u3066\u3044\u307e\u3059\u3002\u4f8b\u3048\u3070`approxPolyDP`\u306f\u691c\u51fa\u3057\u305f\u8f2a\u90ed\u3092\u76f4\u7dda\u8fd1\u4f3c\u3057\u3066\u304f\u308c\u308b\u3082\u306e\u3067\u3001\u8f2a\u90ed\u304c\u76f4\u7dda\u7684\u306a\u5834\u5408\u306f\u3053\u3061\u3089\u3092\u4f7f\u3063\u3066\u5207\u308a\u51fa\u3057\u3092\u884c\u3046\u3068\u826f\u3044\u3067\u3059\u3002\u4ee5\u4e0b\u306f\u8d64\u306e\u70b9\u7dda\u304c\u691c\u51fa\u3057\u305f\u8f2a\u90ed\u3067\u3001\u7dd1\u7dda\u304c\u76f4\u7dda\u8fd1\u4f3c\u3057\u305f\u3082\u306e\u306b\u306a\u308a\u307e\u3059\u3002\n\n![image](https://qiita-image-store.s3.amazonaws.com/0/25990/2b51a375-8d41-d0b2-4ea2-c8041814bdc6.png)\n[\u753b\u50cf\u51fa\u5178](http://www.officialpsds.com/Old-Plane-PSD100989.html)\n\n```py3\ndef various_contours(path):\n    color = cv2.imread(path)\n    grayed = cv2.cvtColor(color, cv2.COLOR_BGR2GRAY)\n    _, binary = cv2.threshold(grayed, 218, 255, cv2.THRESH_BINARY)\n    inv = cv2.bitwise_not(binary)    \n    _, contours, _ = cv2.findContours(inv, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)\n    \n    for c in contours:\n        if cv2.contourArea(c) < 90:\n            continue\n        \n        epsilon = 0.01 * cv2.arcLength(c, True)\n        approx = cv2.approxPolyDP(c, epsilon, True)\n        cv2.drawContours(color, c, -1, (0, 0, 255), 3)\n        cv2.drawContours(color, [approx], -1, (0, 255, 0), 3)\n        \n    plt.imshow(cv2.cvtColor(color, cv2.COLOR_BGR2RGB))\n    \nvarious_contours(IMG_FOR_CONTOUR)\n```\n\n`cv2.arcLength`\u306f\u8f2a\u90ed\u306e\u9577\u3055\u3067\u3001\u3053\u308c\u3092\u4f7f\u3044`epsilon`\u3001\u6700\u4f4e\u9650\u306e\u76f4\u7dda\u306e\u9577\u3055\u3092\u8a08\u7b97\u3057\u3066\u3044\u307e\u3059\u3002\u3053\u308c\u3067\u3069\u308c\u3060\u3051\u7d30\u304b\u3044\u76f4\u7dda\u3067\u304f\u304f\u308b\u306e\u304b\u3092\u8abf\u6574\u3067\u304d\u307e\u3059\u3002\n\u3053\u306e\u4ed6\u306e\u95a2\u6570\u306b\u3064\u3044\u3066\u3082\u3001\u4e0b\u8a18\u306e\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb\u306b\u4f7f\u3044\u65b9\u3068\u8aac\u660e\u304c\u8a18\u8f09\u3055\u308c\u3066\u3044\u308b\u306e\u3067\u53c2\u8003\u306b\u3057\u3066\u307f\u3066\u304f\u3060\u3055\u3044\u3002\n\n[Contour Features](http://docs.opencv.org/3.1.0/dd/d49/tutorial_py_contour_features.html#gsc.tab=0)\n\n\n### \u691c\u51fa\u9818\u57df\u306e\u5207\u308a\u51fa\u3057\n\n\u3055\u3066\u9818\u57df\u306f\u308f\u304b\u308a\u307e\u3057\u305f\u304c\u3001\u3053\u308c\u3092\u6a5f\u68b0\u5b66\u7fd2\u30e2\u30c7\u30eb\u3078\u9069\u7528\u3059\u308b\u306b\u306f\u30e2\u30c7\u30eb\u304c\u60f3\u5b9a\u3057\u3066\u3044\u308b\u6240\u5b9a\u306e\u30b5\u30a4\u30ba\u306b\u5207\u308a\u51fa\u3059\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\u3053\u308c\u3092\u884c\u3046\u305f\u3081\u3001\u4eca\u56de`resize_image`\u3068\u3044\u3046\u95a2\u6570\u3092\u4f5c\u6210\u3057\u307e\u3057\u305f\u3002\n\n```py3\ndef resize_image(img, size):\n    # size is enough to img\n    img_size = img.shape[:2]\n    if img_size[0] > size[1] or img_size[1] > size[0]:\n        raise Exception(\"img is larger than size\")\n    \n    # centering\n    row = (size[1] - img_size[0]) // 2\n    col = (size[0] - img_size[1]) // 2\n    resized = np.zeros(list(size) + [img.shape[2]], dtype=np.uint8)\n    resized[row:(row + img.shape[0]), col:(col + img.shape[1])] = img\n        \n    # filling\n    mask = np.full(size, 255, dtype=np.uint8)\n    mask[row:(row + img.shape[0]), col:(col + img.shape[1])] = 0\n    filled = cv2.inpaint(resized, mask, 3, cv2.INPAINT_TELEA)    \n    \n    return filled\n```\n\n\u3053\u306e\u95a2\u6570\u306f\u3001\u4ee5\u4e0b\u306e\u30b9\u30c6\u30c3\u30d7\u3067\u5f62\u6210\u3055\u308c\u3066\u3044\u307e\u3059\u3002\n\n* resize: \u6240\u5b9a\u306e\u30b5\u30a4\u30ba\u306e\u30ad\u30e3\u30f3\u30d0\u30b9(`resized`)\u3092\u7528\u610f(\u5b66\u7fd2\u30c7\u30fc\u30bf\u306e\u753b\u50cf\u306e\u30b5\u30a4\u30ba\u304b\u3001\u5f8c\u304b\u3089\u5207\u308a\u53d6\u308b\u305f\u3081\u3061\u3087\u3063\u3068\u5927\u304d\u3081\u306b\u3059\u308b)\n* centering: \u7528\u610f\u3057\u305f\u30ad\u30e3\u30f3\u30d0\u30b9\u306e\u4e2d\u5fc3\u306b\u3001\u5207\u308a\u51fa\u3057\u305f\u753b\u50cf\u3092\u30bb\u30c3\u30c8\n* filling: \u30bb\u30c3\u30c8\u3057\u305f\u753b\u50cf\u306e\u5468\u8fba\u9818\u57df\u3092\u3001\u5143\u306e\u753b\u50cf\u306e\u60c5\u5831\u3092\u5229\u7528\u3057\u57cb\u3081\u308b\n\nOpenCV\u306b\u3082`resize`\u95a2\u6570\u304c\u3042\u308a\u307e\u3059\u304c\u3001\u3053\u308c\u3092\u4f7f\u3046\u3068\u5207\u308a\u51fa\u3057\u305f\u753b\u50cf\u3092\u7121\u7406\u3084\u308a\u6240\u5b9a\u306e\u30b5\u30a4\u30ba\u306b\u5408\u308f\u305b\u308b\u305f\u3081\u3001\u753b\u50cf\u304c\u6b6a\u3093\u3067\u3057\u307e\u3044\u307e\u3059\u3002\u305d\u306e\u305f\u3081\u4eca\u56de\u306f\u5207\u308a\u51fa\u3057\u305f\u753b\u50cf\u304c\u53ce\u307e\u308b\u30b5\u30a4\u30ba\u306e\u30ad\u30e3\u30f3\u30d0\u30b9\u3092\u7528\u610f\u3057\u3066\u305d\u306e\u4e2d\u5fc3\u306b\u5207\u308a\u51fa\u3057\u305f\u753b\u50cf\u3092\u7f6e\u304d\u3001\u5468\u308a\u3092\u57cb\u3081\u308b\u3068\u3044\u3046\u624b\u6cd5\u3092\u53d6\u3063\u3066\u3044\u307e\u3059\u3002\u7a74\u57cb\u3081\u306b\u4f7f\u3063\u3066\u3044\u308b[`cv2.inpaint`](http://docs.opencv.org/3.0-beta/modules/photo/doc/inpainting.html)\u306f\u672c\u6765\u753b\u50cf\u5185\u306e\u6b20\u640d\u3092\u5fa9\u5143\u3059\u308b\u305f\u3081\u306e\u95a2\u6570\u306a\u306e\u3067\u3059\u304c\u3001\u4eca\u56de\u306f\u5468\u308a\u3092\u57cb\u3081\u308b\u306e\u306b\u4f7f\u3063\u3066\u3044\u307e\u3059\u3002\n\n\u5b9f\u969b\u306b\u5207\u308a\u51fa\u3057\u305f\u753b\u50cf\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u3002\u6982\u306d\u304d\u3063\u3061\u308a\u88dc\u5b8c\u304c\u3067\u304d\u3066\u3044\u308b\u3068\u601d\u3044\u307e\u3059\u304c\u30012\u679a\u76ee\u306f\u304f\u3061\u3070\u3057\u306e\u8272\u304c\u3061\u3087\u3063\u3068\u4f38\u3073\u3066\u3057\u307e\u3063\u3066\u3044\u307e\u3059\u3002\u3053\u3046\u3057\u305f\u5834\u5408\u3001padding\u3092\u8abf\u6574\u3057\u80cc\u666f\u8272\u3060\u3051\u3067\u7a74\u57cb\u3081\u3055\u308c\u308b\u3088\u3046\u3001\u8abf\u6574\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\n\n![image](https://qiita-image-store.s3.amazonaws.com/0/25990/e338619f-8708-d174-d9b2-28e9f535f693.png)\n\n### \u753b\u50cf\u306e\u4f4d\u7f6e\u63c3\u3048\n\n\u753b\u50cf\u4e0a\u306e\u3069\u306e\u4f4d\u7f6e\u306b\u7269\u4f53\u304c\u79fb\u3063\u3066\u3044\u308b\u306e\u304b\u306f\u3001\u8a8d\u8b58\u306e\u969b\u306b\u91cd\u8981\u306a\u30dd\u30a4\u30f3\u30c8\u3068\u306a\u308a\u307e\u3059\u3002\u6700\u8fd1\u5229\u7528\u3055\u308c\u3066\u3044\u308bCNN\u3067\u306f\u7573\u307f\u8fbc\u307f\u306b\u3088\u308a\u591a\u5c11\u305a\u308c\u3066\u3044\u3066\u3082\u3057\u3063\u304b\u308a\u3084\u3063\u3066\u304f\u308c\u307e\u3059\u304c\u3001\u88dc\u6b63\u3092\u3057\u3066\u304a\u304f\u3068\u7cbe\u5ea6\u304c\u3050\u3063\u3068\u4e0a\u304c\u308a\u307e\u3059\u3002\u305d\u306e\u305f\u3081\u3001\u3053\u3053\u3067\u306f\u5207\u308a\u51fa\u3057\u305f\u5f8c\u306e\u753b\u50cf\u306e\u4f4d\u7f6e\u88dc\u6b63\u306b\u3064\u3044\u3066\u8aac\u660e\u3057\u307e\u3059\u3002\n\n\u4e0b\u56f3\u306f\u3001\u753b\u50cf\u306e\u4f4d\u7f6e\u63c3\u3048\u3092\u884c\u3063\u3066\u307f\u305f\u4f8b\u3067\u3059\u3002\u4e00\u6bb5\u76ee\u304c\u30d9\u30fc\u30b9\u306e\u753b\u50cf\u3067\u3001\u4e8c\u6bb5\u76ee\u4ee5\u964d\u304c\u4e00\u6bb5\u76ee\u306e\u753b\u50cf\u306b\u4f4d\u7f6e\u3092\u5408\u308f\u305b\u308b\u305f\u3081\u306e\u88dc\u6b63\u3092\u304b\u3051\u305f\u3082\u306e\u3067\u3059(\u5de6\u5074\u304c\u88dc\u6b63\u524d\u3001\u53f3\u5074\u304c\u88dc\u6b63\u5f8c)\u3002\n\n![image](https://qiita-image-store.s3.amazonaws.com/0/25990/a6c94007-8bbe-6eb7-0d71-3dd8127a1213.png)\n\u753b\u50cf\u51fa\u5178: [image 1](http://www.publicdomainpictures.net/view-image.php?image=31919&picture=&jazyk=JP), [image 2](http://www.publicdomainpictures.net/view-image.php?image=51893&picture=&jazyk=JP), [image 3](http://lapisland.exblog.jp/tags/Robin/) \n\n\u88dc\u6b63\u3092\u304b\u3051\u305f\u5f8c\u306f\u3001\u9ce5\u306e\u4f4d\u7f6e\u304c\u307b\u307c\u305d\u308d\u3063\u3066\u3044\u308b\u3068\u601d\u3044\u307e\u3059\u3002\u3053\u308c\u306f\u3001\u4e0b\u8a18\u30b5\u30a4\u30c8\u3092\u53c2\u8003\u306b[findTransformECC](http://docs.opencv.org/3.0-beta/modules/video/doc/motion_analysis_and_object_tracking.html)\u3092\u5229\u7528\u3057\u3066\u88dc\u6b63\u3092\u884c\u3063\u3066\u3044\u307e\u3059\u3002\n\n[Image Alignment (ECC) in OpenCV ( C++ / Python )](http://www.learnopencv.com/image-alignment-ecc-in-opencv-c-python/)\n\n```py3\ndef align(base_img, target_img, warp_mode=cv2.MOTION_TRANSLATION, number_of_iterations=5000, termination_eps=1e-10):\n    base_gray = cv2.cvtColor(base_img, cv2.COLOR_BGR2GRAY)\n    target_gray = cv2.cvtColor(target_img, cv2.COLOR_BGR2GRAY)\n    \n    # prepare transformation matrix\n    if warp_mode == cv2.MOTION_HOMOGRAPHY:\n        warp_matrix = np.eye(3, 3, dtype=np.float32)\n    else :\n        warp_matrix = np.eye(2, 3, dtype=np.float32)\n    \n    criteria = (cv2.TERM_CRITERIA_EPS | cv2.TERM_CRITERIA_COUNT, number_of_iterations,  termination_eps)\n    sz = base_img.shape\n    \n    # estimate transformation\n    try:\n        (cc, warp_matrix) = cv2.findTransformECC(base_gray, target_gray, warp_matrix, warp_mode, criteria)\n\n        # execute transform\n        if warp_mode == cv2.MOTION_HOMOGRAPHY :\n            # Use warpPerspective for Homography \n            aligned = cv2.warpPerspective(target_img, warp_matrix, (sz[1], sz[0]), flags=cv2.INTER_LINEAR + cv2.WARP_INVERSE_MAP)\n        else :\n            # Use warpAffine for Translation, Euclidean and Affine\n            aligned = cv2.warpAffine(target_img, warp_matrix, (sz[1],sz[0]), flags=cv2.INTER_LINEAR + cv2.WARP_INVERSE_MAP)\n    \n        return aligned\n    except Exception as ex:\n        print(\"can not align the image\")\n        return target_img\n```\n\n`findTransformECC`\u306f\u3001\u7aef\u7684\u306b\u8a00\u3048\u30702\u3064\u306e\u753b\u50cf\u306e\u4f3c\u3066\u3044\u308b\u70b9\u3092\u63a2\u3057\u3066\u3001\u3069\u3093\u306a\u79fb\u52d5\u304c\u884c\u308f\u308c\u305f\u306e\u304b\u306e\u63a8\u5b9a\u7d50\u679c\u3092`warp_matrix`\u306b\u5165\u308c\u3066\u304f\u308c\u308b\u95a2\u6570\u3067\u3059\u3002\u5143\u306f\u52d5\u753b\u306a\u3069\u306e\u9023\u7d9a\u3059\u308b\u30d5\u30ec\u30fc\u30e0\u4e0a\u3067\u3001\u3069\u306e\u3088\u3046\u306a\u52d5\u304d\u304c\u3042\u3063\u305f\u304b\u89e3\u6790\u3059\u308b\u305f\u3081\u306e\u3082\u306e\u306a\u306e\u3067\u304b\u306a\u308a\u540c\u3058\u753b\u50cf\u3067\u306a\u3044\u3068\u4f4d\u7f6e\u304c\u305d\u308d\u308f\u306a\u304b\u3063\u305f\u308a\u3057\u307e\u3059\u3002\u4e0a\u8a18\u3082\u4f55\u6c17\u306a\u304f\u63c3\u3063\u3066\u3044\u308b\u3088\u3046\u306b\u898b\u3048\u307e\u3059\u304c\u3001\u76f8\u95a2\u304c\u3068\u308c\u308b\u5199\u771f\u3092\u9078\u3076\u306e\u304c\u5927\u5909\u3067\u3057\u305f(\u76f8\u95a2\u304c\u306a\u3044\u5834\u5408\u3001\u53ce\u675f\u3057\u306a\u3044\u65e8\u306e\u4f8b\u5916\u304c\u51fa\u308b)\u3002\u3002\u3002\n\n\u9854\u306a\u3069\u5168\u3066\u306e\u753b\u50cf\u306b\u5171\u901a\u3059\u308b\u7279\u5fb4\u70b9(\u76ee\u30fb\u9f3b\u30fb\u53e3etc)\u304c\u5b58\u5728\u3059\u308b\u5834\u5408\u306f\u3001\u5404\u7279\u5fb4\u70b9\u306e\u4f4d\u7f6e\u3092\u5143\u306b\u5909\u63db\u3092\u304b\u3051\u308b\u3053\u3068\u3082\u3067\u304d\u307e\u3059\u3002`estimateRigidTransform`\u306f\u3001\u3053\u306e\u305f\u3081\u306b\u4f7f\u3048\u307e\u3059\u3002\n\n```py3\ndef face_align(base, base_position, target, target_position):\n    sz = base.shape\n    fsize = min(len(base_position), len(target_position))  # adjust feature size\n    tform = cv2.estimateRigidTransform(target_position[:fsize], base_position[:fsize], False)\n    aligned = cv2.warpAffine(target, tform, (sz[1], sz[0]))\n    return aligned\n```\n\n\u5199\u771f\u306b\u3088\u3063\u3066\u306f\u76ee\u304c\u691c\u51fa\u3067\u304d\u306a\u3044\u3001\u3068\u3044\u3063\u305f\u30b1\u30fc\u30b9\u304c\u3042\u308b\u305f\u3081\u4e0a\u8a18\u3067\u306f\u691c\u51fa\u7279\u5fb4\u91cf\u304c\u5c0f\u3055\u3044\u65b9\u306b\u5408\u308f\u305b\u3066\u5909\u63db\u3092\u884c\u3063\u3066\u3044\u307e\u3059(\u305f\u3060\u3057\u3001\u3053\u306e\u5834\u5408\u7279\u5fb4\u91cf\u3092\u5165\u308c\u308b\u9806\u756a\u3092\u305d\u308d\u3048\u306a\u3044\u3068\u3044\u3051\u306a\u3044\u70b9\u306b\u6ce8\u610f\u3057\u3066\u4e0b\u3055\u3044)\u3002\n\n![image](https://qiita-image-store.s3.amazonaws.com/0/25990/90f9eb16-5227-d680-d3f0-f9d154b3a444.png)\n[\u753b\u50cf\u51fa\u5178](https://www.microsoft.com/cognitive-services/en-us/face-api)\n\n\u5909\u63db\u5f8c\u306f\u3001\u9854\u306e\u4f4d\u7f6e\u304c\u3057\u3063\u304b\u308a\u305d\u308d\u3063\u3066\u3044\u308b\u306e\u304c\u5206\u304b\u308b\u3068\u601d\u3044\u307e\u3059\u3002\u4ee5\u4e0b\u306b\u3082\u9854\u306e\u4f4d\u7f6e\u63c3\u3048\u306b\u3064\u3044\u3066\u8a73\u7d30\u306a\u7d39\u4ecb\u304c\u3042\u308b\u306e\u3067\u3001\u53c2\u8003\u306b\u3057\u3066\u307f\u3066\u304f\u3060\u3055\u3044\u3002\n\n[Average Face : OpenCV ( C++ / Python ) Tutorial](http://www.learnopencv.com/average-face-opencv-c-python-tutorial/)\n\n\n## \u7269\u4f53\u8a8d\u8b58\n\n\u4e0a\u8a18\u3067\u306f\u8f2a\u90ed\u306e\u691c\u51fa\u3092\u81ea\u529b\u3067\u884c\u3044\u307e\u3057\u305f\u304c\u3001OpenCV\u306b\u306f\u9854\u3084\u4f53\u306a\u3069\u3088\u304f\u691c\u51fa\u3092\u884c\u3046\u7269\u4f53\u306b\u3064\u3044\u3066\u5b66\u7fd2\u6e08\u307f\u30e2\u30c7\u30eb\u304c\u7528\u610f\u3055\u308c\u3066\u304a\u308a\u3001\u3053\u308c\u3092\u5229\u7528\u3059\u308b\u3053\u3068\u3067\u7269\u4f53\u8a8d\u8b58\u304c\u884c\u3048\u307e\u3059\u3002\u3053\u306e\u5b66\u7fd2\u6e08\u307f\u306e\u30e2\u30c7\u30eb\u30d5\u30a1\u30a4\u30eb\u3092Cascade Classifier\u3068\u3044\u3044\u3001\u81ea\u524d\u3067\u4f5c\u6210\u3059\u308b\u3053\u3068\u3082\u53ef\u80fd\u3067\u3059\u3002\u516c\u958b\u3055\u308c\u3066\u3044\u308b\u3082\u306e\u3082\u3044\u304f\u3064\u304b\u3042\u308b\u306e\u3067\u3001\u8208\u5473\u304c\u3042\u308b\u65b9\u306f\u4e0b\u8a18\u3067\u307e\u3068\u3081\u3066\u304f\u3060\u3055\u3063\u3066\u3044\u308b\u306e\u3067\u53c2\u8003\u306b\u3057\u3066\u307f\u3066\u304f\u3060\u3055\u3044\u3002\n\n* [\u300c\u9854\u4ee5\u5916\u300d\u306e\u3082\u306e\u3092\u753b\u50cf\u8a8d\u8b58\u3059\u308b](http://qiita.com/shu223/items/ffd2202eaf92d342f83d)\n* [TRAIN YOUR OWN OPENCV HAAR CLASSIFIER](http://coding-robin.de/2013/07/22/train-your-own-opencv-haar-classifier.html)\n\nCascade Classifier\u306b\u3064\u3044\u3066\u306f\u3001pip\u3067\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3057\u305f\u5834\u5408`(virtual environment folder)\\Library\\etc\\haarcascades`\u306e\u4e2d\u306b\u5165\u3063\u3066\u307e\u3059(Windows/miniconda\u306e\u5834\u5408\u3002\u74b0\u5883\u306b\u3088\u3063\u3066\u5dee\u7570\u304c\u3042\u308b\u3068\u601d\u3044\u307e\u3059)\u3002\u76ee\u7684\u306b\u5408\u3044\u305d\u3046\u306a\u3082\u306e\u304c\u3042\u308b\u304b\u3001\u3044\u308d\u3044\u308d\u8a66\u3057\u3066\u307f\u308b\u3068\u3088\u3044\u3067\u3057\u3087\u3046\u3002\u4eca\u56de\u306f\u3001\u4ee5\u4e0b\u306e\u516c\u5f0f\u306e\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb\u306b\u5023\u3044\u9854\u306e\u691c\u77e5\u3092\u884c\u3063\u3066\u307f\u305f\u3044\u3068\u601d\u3044\u307e\u3059\u3002\n\n[Face Detection using Haar Cascades](http://opencv-python-tutroals.readthedocs.io/en/latest/py_tutorials/py_objdetect/py_face_detection/py_face_detection.html#face-detection)\n\n\u5b9f\u969b\u306b\u691c\u51fa\u3092\u884c\u3063\u3066\u307f\u305f\u7d50\u679c\u304c\u4ee5\u4e0b\u306b\u306a\u308a\u307e\u3059\u3002\u9aea\u3067\u96a0\u308c\u3066\u3057\u307e\u3063\u3066\u3044\u308b\u305b\u3044\u304b\u3001\u53f3\u76ee\u306e\u691c\u77e5\u306b\u5931\u6557\u3057\u3066\u3044\u307e\u3059\u304c\u3002\u3002\u3002\n\n![image](https://qiita-image-store.s3.amazonaws.com/0/25990/44f1941d-d97a-0f97-bdeb-fac8b248512c.png)\n[\u753b\u50cf\u51fa\u5178](https://static.pexels.com/photos/28617/pexels-photo.jpg)\n\n\u30b3\u30fc\u30c9\u306f\u307b\u307c\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb\u901a\u308a\u3068\u306a\u308a\u307e\u3059\u3002Cascade File\u306e\u5834\u6240\u306f\u4e0a\u8ff0\u306e\u901a\u308a\u74b0\u5883\u306b\u3088\u3063\u3066\u7570\u306a\u308b\u305f\u3081\u6ce8\u610f\u3057\u3066\u304f\u3060\u3055\u3044(\u4e0a\u624b\u304f\u30d1\u30b9\u304c\u901a\u3063\u3066\u3044\u306a\u3044\u3068\u3001`error: (-215) !empty() in function`\u3068\u3044\u3063\u305f\u30a8\u30e9\u30fc\u304c\u51fa\u307e\u3059)\u3002\n\n```py3\ndef face_detection(path):\n    face_cascade = cv2.CascadeClassifier(CASCADE_DIR + \"/haarcascade_frontalface_default.xml\")\n    eye_cascade = cv2.CascadeClassifier(CASCADE_DIR + \"/haarcascade_eye.xml\")\n    \n    img = cv2.imread(path)\n    grayed = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)\n    \n    faces = face_cascade.detectMultiScale(grayed, 1.3, 5)\n    for (x, y, w, h) in faces:\n        img = cv2.rectangle(img, (x, y), (x + w, y + h), (255, 0, 0), 2)\n        roi_gray = grayed[y:y+h, x:x+w]\n        roi_color = img[y:y+h, x:x+w]\n        eyes = eye_cascade.detectMultiScale(roi_gray)\n        for (ex, ey, ew, eh) in eyes:\n            cv2.rectangle(roi_color, (ex,ey), (ex + ew, ey + eh), (0, 255, 0), 2)\n\n    plt.imshow(cv2.cvtColor(img, cv2.COLOR_BGR2RGB))\n\nface_detection(IMG_FACE)\n```\n\n`cv2.CascadeClassifier`\u3067\u30d5\u30a1\u30a4\u30eb\u3092\u8aad\u307f\u8fbc\u3093\u3067`Classifier`\u3092\u4f5c\u6210\u3057\u3001`detectMultiScale`\u3067\u691c\u51fa\u3092\u884c\u3046\u3001\u3068\u3044\u3046\u306e\u304c\u57fa\u672c\u306e\u6d41\u308c\u306b\u306a\u308a\u307e\u3059\u3002\u4eca\u56de\u306f\u30b0\u30ec\u30fc\u30b9\u30b1\u30fc\u30eb\u5316\u3057\u304b\u3057\u3066\u3044\u307e\u305b\u3093\u304c\u3001\u4e0a\u8ff0\u306e\u95be\u5024\u51e6\u7406\u306a\u3069\u3092\u304a\u3053\u306a\u3046\u3053\u3068\u3067\u3088\u308a\u3057\u3063\u304b\u308a\u3068\u3057\u305f\u691c\u51fa\u304c\u3067\u304d\u308b\u3068\u601d\u3044\u307e\u3059\u3002\u307e\u305f\u3001\u691c\u51fa\u3057\u305f\u7b87\u6240\u306e\u5207\u308a\u51fa\u3057\u306b\u3064\u3044\u3066\u306f\u524d\u9805\u306e\u300c\u691c\u51fa\u9818\u57df\u306e\u5207\u308a\u51fa\u3057\u300d\u3092\u53c2\u8003\u306b\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n\n\u306a\u304a\u3001\u9854\u304c\u50be\u3044\u3066\u3044\u305f\u308a\u3059\u308b\u3068\u3046\u307e\u304f\u691c\u51fa\u3055\u308c\u307e\u305b\u3093\u3002\u3053\u308c\u306b\u3064\u3044\u3066\u306f\u3001\u76ee/\u53e3\u3092\u5148\u306b\u691c\u51fa\u3057\u3066\u50be\u304d\u3092\u5272\u308a\u51fa\u3059\u30a2\u30d7\u30ed\u30fc\u30c1\u304b\u3001\u5358\u7d14\u306b\u753b\u50cf\u3092\u5f90\u3005\u306b\u56de\u8ee2\u3055\u305b\u3066\u691c\u77e5\u3092\u8a66\u307f\u308b\u304b\u306e2\u3064\u306e\u65b9\u6cd5\u304c\u3042\u308a\u307e\u3059\u3002\u524d\u8005\u306e\u65b9\u304c\u8a08\u7b97\u91cf\u304c\u5c11\u306a\u3044\u304c\u9762\u5012\u3001\u5f8c\u8005\u306e\u65b9\u304c\u7c21\u5358\u3060\u304c\u8a08\u7b97\u91cf\u304c\u591a\u3044\u3001\u3068\u30c8\u30ec\u30fc\u30c9\u30aa\u30d5\u306b\u306a\u308a\u307e\u3059\u3002\u4e0b\u8a18\u306f\u753b\u50cf\u3092\u56de\u8ee2\u3055\u305b\u306a\u304c\u3089\u691c\u77e5\u3059\u308b\u624b\u6cd5\u306b\u3064\u3044\u3066\u8a73\u7d30\u306b\u66f8\u304b\u308c\u3066\u3044\u308b\u306e\u3067\u3001\u53c2\u8003\u306b\u3057\u3066\u307f\u3066\u304f\u3060\u3055\u3044\u3002\n\n* [OpenCV\u306e\u7269\u4f53\u691c\u51fa\u3092\u56de\u8ee2\u4e0d\u5909\u306b\u3055\u305b\u308b](http://qiita.com/bohemian916/items/5c6df004de723c567958)\n* [rotated face detection](http://stackoverflow.com/questions/5015124/rotated-face-detection)\n\n\n# \u5b66\u7fd2\u306e\u6e96\u5099\n\n\u3053\u3053\u307e\u3067\u3067\u3001\u753b\u50cf\u304b\u3089\u76ee\u7684\u306e\u7269\u4f53\u304c\u5199\u3063\u305f\u753b\u50cf\u3092\u5207\u308a\u51fa\u3059\u3053\u3068\u304c\u3067\u304d\u307e\u3057\u305f\u3002\u3042\u3068\u306f\u3001\u96c6\u3081\u305f\u753b\u50cf\u3092\u6a5f\u68b0\u5b66\u7fd2\u30e2\u30c7\u30eb\u306b\u6295\u5165\u3059\u308b\u3060\u3051\u3067\u3059\u3002\n\u305f\u3060\u3001\u5b66\u7fd2\u30e2\u30c7\u30eb\u306b\u753b\u50cf\u3092\u6295\u5165\u3059\u308b\u969b\u306b\u306f\u3044\u308d\u3044\u308d\u306a\u524d\u51e6\u7406\u304c\u5fc5\u8981\u3067\u3059\u3002\u3053\u306e\u70b9\u306b\u3064\u3044\u3066\u306f\u3001\u4ee5\u4e0b\u306b\u307e\u3068\u3081\u3066\u3042\u308a\u307e\u3059\u3002\n\n[Convolutional Neural Network\u3092\u5b9f\u88c5\u3059\u308b/\u30c7\u30fc\u30bf\u306e\u524d\u51e6\u7406](http://qiita.com/icoxfog417/items/5aa1b3f87bb294f84bac#%E3%83%87%E3%83%BC%E3%82%BF%E3%81%AE%E5%89%8D%E5%87%A6%E7%90%86)\n\n\u30dd\u30a4\u30f3\u30c8\u3092\u629c\u7c8b\u3059\u308b\u3068\u3001\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u51e6\u7406\u304c\u5fc5\u8981\u3067\u3059\u3002\n\n* \u884c\u5217\u5909\u63db: \u5b66\u7fd2\u30e2\u30c7\u30eb\u304c\u60f3\u5b9a\u3057\u3066\u3044\u308b\u884c\u5217\u5f62\u5f0f(\u5927\u62b5\u306fK(\u6df1\u3055=\u8272) x H(\u9ad8\u3055) x W(\u5e45))\u306b\u5909\u63db\u3059\u308b\n* \u6df1\u3055\u306e\u8abf\u6574: \u5b66\u7fd2\u30e2\u30c7\u30eb\u304c\u60f3\u5b9a\u3057\u3066\u3044\u308b\u30ab\u30e9\u30fc\u30c1\u30e3\u30cd\u30eb\u306b\u5909\u63db\u3059\u308b(\u30b0\u30ec\u30fc\u30b9\u30b1\u30fc\u30eb\u306a\u306e\u304b\u3001RGB\u306a\u306e\u304b)\n* \u753b\u50cf\u30c7\u30fc\u30bf\u306e\u6b63\u898f\u5316: \u5168\u753b\u50cf\u3092\u5e73\u5747\u3057\u305f\u5e73\u5747\u753b\u50cf\u3092\u4f5c\u3063\u3066\u304a\u304d\u3001\u753b\u50cf\u3092\u6b63\u898f\u5316\u3059\u308b\n* \u30b9\u30b1\u30fc\u30ea\u30f3\u30b0: 0~255\u306e\u5024\u5e45\u3092\u30010~1\u306b\u5909\u63db\n\n\n\u8aac\u660e\u306f\u4ee5\u4e0a\u3068\u306a\u308a\u307e\u3059\u3002\u4e0a\u624b\u304fOpenCV\u3092\u5229\u7528\u3057\u3066\u3001\u8272\u3005\u306a\u5b66\u7fd2\u3092\u3055\u305b\u3066\u307f\u3066\u304f\u3060\u3055\u3044\u3002\n\n# \u53c2\u8003\u6587\u732e\n\n* [OpenCV\u3068\u306f\uff1f \u6700\u65b03.0\u306e\u65b0\u6a5f\u80fd\u6982\u8981\u3068\u30e2\u30b8\u30e5\u30fc\u30eb\u69cb\u6210](http://www.buildinsider.net/small/opencv/001)\n* [\u753b\u50cf\u51e6\u7406\u5165\u9580\u8b1b\u5ea7 : OpenCV\u3068Python\u3067\u59cb\u3081\u308b\u753b\u50cf\u51e6\u7406](http://postd.cc/image-processing-101/)\n* [Learn OpenCV](http://www.learnopencv.com/)\n", "tags": ["\u6a5f\u68b0\u5b66\u7fd2", "OpenCV", "Python"]}