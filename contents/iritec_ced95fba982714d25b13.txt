{"context": "\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u4f7f\u308f\u305a\u306b\u81ea\u4f5c\u3067\u304b\u3093\u305f\u3093\u306a\u30b0\u30e9\u30d5\u3092\u66f8\u3044\u3066\u307f\u305f\u3002\u30b9\u30af\u30ed\u30fc\u30eb\u30d3\u30e5\u30fc\u306b\u5bfe\u5fdc\u3057\u3066\u3001\u30b0\u30e9\u30d5\u306e\u6a2a\u5e45\u304c\u7121\u9650\u306b\u5897\u3048\u3066\u3044\u3063\u3066\u3082\u30b9\u30af\u30ed\u30fc\u30eb\u3067\u30b0\u30ea\u30b0\u30ea\u307f\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\n:ViewController.swift\n\nimport UIKit\n\nclass ViewController: UIViewController {\n\n    @IBOutlet weak var scview: UIScrollView! //storyboard\u3067\u30b9\u30af\u30ed\u30fc\u30eb\u30d3\u30e5\u30fc\u3092\u914d\u7f6e\u3057\u3066\u3044\u308b\u306e\u3067\u63a5\u7d9a\n\n    override func viewDidLoad() {\n        super.viewDidLoad()\n\n        let graphview = Graph() //\u30b0\u30e9\u30d5\u3092\u8868\u793a\u3059\u308b\u30af\u30e9\u30b9\n        scview.addSubview(graphview) //\u30b0\u30e9\u30d5\u3092\u30b9\u30af\u30ed\u30fc\u30eb\u30d3\u30e5\u30fc\u306b\u914d\u7f6e\n        graphview.drawLineGraph() //\u30b0\u30e9\u30d5\u63cf\u753b\u958b\u59cb\n\n        scview.contentSize = CGSize(width:graphview.checkWidth()+20, height:graphview.checkHeight()) //\u30b9\u30af\u30ed\u30fc\u30eb\u30d3\u30e5\u30fc\u5185\u306e\u30b3\u30f3\u30c6\u30f3\u30c4\u30b5\u30a4\u30ba\u8a2d\u5b9a\n    }\n\n}\n\n\n\u30b0\u30e9\u30d5\u3092\u8868\u793a\u3059\u308b\u30af\u30e9\u30b9\u306f\u4ee5\u4e0b\u3002\n:Graph.swift\nimport UIKit\n\nclass Graph: UIView {\n\n    var lineWidth:CGFloat = 3.0 //\u30b0\u30e9\u30d5\u7dda\u306e\u592a\u3055\n    var lineColor:UIColor = UIColor(red:0.088,  green:0.501,  blue:0.979, alpha:1) //\u30b0\u30e9\u30d5\u7dda\u306e\u8272\n    var circleWidth:CGFloat = 4.0 //\u5186\u306e\u534a\u5f84\n    var circleColor:UIColor = UIColor(red:0.088,  green:0.501,  blue:0.979, alpha:1) //\u5186\u306e\u8272\n\n    var memoriMargin: CGFloat = 70 //\u6a2a\u76ee\u76db\u306e\u611f\u899a\n    var graphHeight: CGFloat = 300 //\u30b0\u30e9\u30d5\u306e\u9ad8\u3055\n    var graphPoints: [String] = []\n    var graphDatas: [CGFloat] = []\n\n    func drawLineGraph()\n    {\n        graphPoints = [\"2000/2/3\", \"2000/3/3\", \"2000/4/3\", \"2000/5/3\", \"2000/6/3\", \"2000/7/3\", \"2000/8/3\"]\n        graphDatas = [100, 30, 10, -50, 90, 12, 40]\n\n        GraphFrame()\n        MemoriGraphDraw()\n    }\n\n    //\u30b0\u30e9\u30d5\u3092\u63cf\u753b\u3059\u308bview\u306e\u5927\u304d\u3055\n    func GraphFrame(){\n        self.backgroundColor = UIColor(red:0.972,  green:0.973,  blue:0.972, alpha:1)\n        self.frame = CGRectMake(10 , 0, checkWidth(), checkHeight())\n    }\n\n    //\u6a2a\u76ee\u76db\u30fb\u30b0\u30e9\u30d5\u3092\u63cf\u753b\u3059\u308b\n    func MemoriGraphDraw() {\n\n        var count:CGFloat = 0\n        for memori in graphPoints {\n\n            let label = UILabel()\n            label.text = String(memori)\n            label.font = UIFont.systemFontOfSize(9)\n\n            //\u30e9\u30d9\u30eb\u306e\u30b5\u30a4\u30ba\u3092\u53d6\u5f97\n            let frame = CGSizeMake(250, CGFloat.max)\n            let rect = label.sizeThatFits(frame)\n\n            //\u30e9\u30d9\u30eb\u306e\u4f4d\u7f6e\n            var lebelX = (count * memoriMargin)-rect.width/2\n\n            //\u6700\u521d\u306e\u30e9\u30d9\u30eb\n            if Int(count) == 0{\n                lebelX = (count * memoriMargin)\n            }\n\n            //\u6700\u5f8c\u306e\u30e9\u30d9\u30eb\n            if Int(count+1) == graphPoints.count{\n                lebelX = (count * memoriMargin)-rect.width\n            }\n\n            label.frame = CGRectMake(lebelX , graphHeight, rect.width, rect.height)\n            self.addSubview(label)\n\n            count += 1\n        }\n    }\n\n    //\u30b0\u30e9\u30d5\u306e\u7dda\u3092\u63cf\u753b\n    override func drawRect(rect: CGRect) {\n\n        var count:CGFloat = 0\n        let linePath = UIBezierPath()\n        var myCircle = UIBezierPath()\n\n        linePath.lineWidth = lineWidth\n        lineColor.setStroke()\n\n        for datapoint in graphDatas {\n\n            if Int(count+1) < graphDatas.count {\n\n                var nowY: CGFloat = datapoint/yAxisMax * (graphHeight - circleWidth)\n                nowY = graphHeight - nowY\n\n                if(graphDatas.minElement()!<0){\n                    nowY = (datapoint - graphDatas.minElement()!)/yAxisMax * (graphHeight - circleWidth)\n                    nowY = graphHeight - nowY\n                }\n\n                //\u6b21\u306e\u30dd\u30a4\u30f3\u30c8\u3092\u8a08\u7b97\n                var nextY: CGFloat = 0\n                nextY = graphDatas[Int(count+1)]/yAxisMax * (graphHeight - circleWidth)\n                nextY = graphHeight - nextY\n\n                if(graphDatas.minElement()!<0){\n                    nextY = (graphDatas[Int(count+1)] - graphDatas.minElement()!)/yAxisMax * (graphHeight - circleWidth)\n                    nextY = graphHeight - nextY - circleWidth\n                }\n\n                //\u6700\u521d\u306e\u958b\u59cb\u5730\u70b9\u3092\u6307\u5b9a\n                var circlePoint:CGPoint = CGPoint()\n                if Int(count) == 0 {\n                    linePath.moveToPoint(CGPoint(x: count * memoriMargin + circleWidth, y: nowY))\n                    circlePoint = CGPoint(x: count * memoriMargin + circleWidth, y: nowY)\n                    myCircle = UIBezierPath(arcCenter: circlePoint,radius: circleWidth,startAngle: 0.0,endAngle: CGFloat(M_PI*2),clockwise: false)\n                    circleColor.setFill()\n                    myCircle.fill()\n                    myCircle.stroke()\n                }\n\n                //\u63cf\u753b\u30dd\u30a4\u30f3\u30c8\u3092\u6307\u5b9a\n                linePath.addLineToPoint(CGPoint(x: (count+1) * memoriMargin, y: nextY))\n\n                //\u5186\u3092\u3064\u304f\u308b\n                circlePoint = CGPoint(x: (count+1) * memoriMargin, y: nextY)\n                myCircle = UIBezierPath(arcCenter: circlePoint,\n                    // \u534a\u5f84\n                    radius: circleWidth,\n                    // \u521d\u89d2\u5ea6\n                    startAngle: 0.0,\n                    // \u6700\u7d42\u89d2\u5ea6\n                    endAngle: CGFloat(M_PI*2),\n                    // \u53cd\u6642\u8a08\u56de\u308a\n                    clockwise: false)\n                circleColor.setFill()\n                myCircle.fill()\n                myCircle.stroke()\n\n            }\n\n            count += 1\n\n        }\n\n        linePath.stroke()\n\n\n    }\n\n    // \u4fdd\u6301\u3057\u3066\u3044\u308bData\u306e\u4e2d\u3067\u6700\u5927\u5024\u3068\u6700\u4f4e\u5024\u306e\u5dee\u3092\u6c42\u3081\u308b\n    var yAxisMax: CGFloat {\n        return graphDatas.maxElement()!-graphDatas.minElement()!\n    }\n\n    //\u30b0\u30e9\u30d5\u6a2a\u5e45\u3092\u7b97\u51fa\n    func checkWidth() -> CGFloat{\n        return CGFloat(graphPoints.count-1) * memoriMargin + (circleWidth * 2)\n    }\n\n    //\u30b0\u30e9\u30d5\u7e26\u5e45\u3092\u7b97\u51fa\n    func checkHeight() -> CGFloat{\n        return graphHeight\n    }\n\n\n}\n\n\n\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u4f7f\u308f\u305a\u306b\u81ea\u4f5c\u3067\u304b\u3093\u305f\u3093\u306a\u30b0\u30e9\u30d5\u3092\u66f8\u3044\u3066\u307f\u305f\u3002\u30b9\u30af\u30ed\u30fc\u30eb\u30d3\u30e5\u30fc\u306b\u5bfe\u5fdc\u3057\u3066\u3001\u30b0\u30e9\u30d5\u306e\u6a2a\u5e45\u304c\u7121\u9650\u306b\u5897\u3048\u3066\u3044\u3063\u3066\u3082\u30b9\u30af\u30ed\u30fc\u30eb\u3067\u30b0\u30ea\u30b0\u30ea\u307f\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\n![\u30b0\u30e9\u30d5\u4f8b.png](https://qiita-image-store.s3.amazonaws.com/0/72150/afb69e4b-458b-5725-1903-6c3a8b84f4e6.png)\n\n\n```swift\n:ViewController.swift\n\nimport UIKit\n\nclass ViewController: UIViewController {\n\n    @IBOutlet weak var scview: UIScrollView! //storyboard\u3067\u30b9\u30af\u30ed\u30fc\u30eb\u30d3\u30e5\u30fc\u3092\u914d\u7f6e\u3057\u3066\u3044\u308b\u306e\u3067\u63a5\u7d9a\n    \n    override func viewDidLoad() {\n        super.viewDidLoad()\n        \n        let graphview = Graph() //\u30b0\u30e9\u30d5\u3092\u8868\u793a\u3059\u308b\u30af\u30e9\u30b9\n        scview.addSubview(graphview) //\u30b0\u30e9\u30d5\u3092\u30b9\u30af\u30ed\u30fc\u30eb\u30d3\u30e5\u30fc\u306b\u914d\u7f6e\n        graphview.drawLineGraph() //\u30b0\u30e9\u30d5\u63cf\u753b\u958b\u59cb\n        \n        scview.contentSize = CGSize(width:graphview.checkWidth()+20, height:graphview.checkHeight()) //\u30b9\u30af\u30ed\u30fc\u30eb\u30d3\u30e5\u30fc\u5185\u306e\u30b3\u30f3\u30c6\u30f3\u30c4\u30b5\u30a4\u30ba\u8a2d\u5b9a\n    }\n\n}\n\n```\n\n\u30b0\u30e9\u30d5\u3092\u8868\u793a\u3059\u308b\u30af\u30e9\u30b9\u306f\u4ee5\u4e0b\u3002\n\n```swift\n:Graph.swift\nimport UIKit\n\nclass Graph: UIView {\n    \n    var lineWidth:CGFloat = 3.0 //\u30b0\u30e9\u30d5\u7dda\u306e\u592a\u3055\n    var lineColor:UIColor = UIColor(red:0.088,  green:0.501,  blue:0.979, alpha:1) //\u30b0\u30e9\u30d5\u7dda\u306e\u8272\n    var circleWidth:CGFloat = 4.0 //\u5186\u306e\u534a\u5f84\n    var circleColor:UIColor = UIColor(red:0.088,  green:0.501,  blue:0.979, alpha:1) //\u5186\u306e\u8272\n    \n    var memoriMargin: CGFloat = 70 //\u6a2a\u76ee\u76db\u306e\u611f\u899a\n    var graphHeight: CGFloat = 300 //\u30b0\u30e9\u30d5\u306e\u9ad8\u3055\n    var graphPoints: [String] = []\n    var graphDatas: [CGFloat] = []\n    \n    func drawLineGraph()\n    {\n        graphPoints = [\"2000/2/3\", \"2000/3/3\", \"2000/4/3\", \"2000/5/3\", \"2000/6/3\", \"2000/7/3\", \"2000/8/3\"]\n        graphDatas = [100, 30, 10, -50, 90, 12, 40]\n\n        GraphFrame()\n        MemoriGraphDraw()\n    }\n    \n    //\u30b0\u30e9\u30d5\u3092\u63cf\u753b\u3059\u308bview\u306e\u5927\u304d\u3055\n    func GraphFrame(){\n        self.backgroundColor = UIColor(red:0.972,  green:0.973,  blue:0.972, alpha:1)\n        self.frame = CGRectMake(10 , 0, checkWidth(), checkHeight())\n    }\n    \n    //\u6a2a\u76ee\u76db\u30fb\u30b0\u30e9\u30d5\u3092\u63cf\u753b\u3059\u308b\n    func MemoriGraphDraw() {\n        \n        var count:CGFloat = 0\n        for memori in graphPoints {\n            \n            let label = UILabel()\n            label.text = String(memori)\n            label.font = UIFont.systemFontOfSize(9)\n            \n            //\u30e9\u30d9\u30eb\u306e\u30b5\u30a4\u30ba\u3092\u53d6\u5f97\n            let frame = CGSizeMake(250, CGFloat.max)\n            let rect = label.sizeThatFits(frame)\n            \n            //\u30e9\u30d9\u30eb\u306e\u4f4d\u7f6e\n            var lebelX = (count * memoriMargin)-rect.width/2\n            \n            //\u6700\u521d\u306e\u30e9\u30d9\u30eb\n            if Int(count) == 0{\n                lebelX = (count * memoriMargin)\n            }\n            \n            //\u6700\u5f8c\u306e\u30e9\u30d9\u30eb\n            if Int(count+1) == graphPoints.count{\n                lebelX = (count * memoriMargin)-rect.width\n            }\n            \n            label.frame = CGRectMake(lebelX , graphHeight, rect.width, rect.height)\n            self.addSubview(label)\n\n            count += 1\n        }\n    }\n    \n    //\u30b0\u30e9\u30d5\u306e\u7dda\u3092\u63cf\u753b\n    override func drawRect(rect: CGRect) {\n        \n        var count:CGFloat = 0\n        let linePath = UIBezierPath()\n        var myCircle = UIBezierPath()\n        \n        linePath.lineWidth = lineWidth\n        lineColor.setStroke()\n        \n        for datapoint in graphDatas {\n            \n            if Int(count+1) < graphDatas.count {\n                \n                var nowY: CGFloat = datapoint/yAxisMax * (graphHeight - circleWidth)\n                nowY = graphHeight - nowY\n                \n                if(graphDatas.minElement()!<0){\n                    nowY = (datapoint - graphDatas.minElement()!)/yAxisMax * (graphHeight - circleWidth)\n                    nowY = graphHeight - nowY\n                }\n                \n                //\u6b21\u306e\u30dd\u30a4\u30f3\u30c8\u3092\u8a08\u7b97\n                var nextY: CGFloat = 0\n                nextY = graphDatas[Int(count+1)]/yAxisMax * (graphHeight - circleWidth)\n                nextY = graphHeight - nextY\n                \n                if(graphDatas.minElement()!<0){\n                    nextY = (graphDatas[Int(count+1)] - graphDatas.minElement()!)/yAxisMax * (graphHeight - circleWidth)\n                    nextY = graphHeight - nextY - circleWidth\n                }\n                \n                //\u6700\u521d\u306e\u958b\u59cb\u5730\u70b9\u3092\u6307\u5b9a\n                var circlePoint:CGPoint = CGPoint()\n                if Int(count) == 0 {\n                    linePath.moveToPoint(CGPoint(x: count * memoriMargin + circleWidth, y: nowY))\n                    circlePoint = CGPoint(x: count * memoriMargin + circleWidth, y: nowY)\n                    myCircle = UIBezierPath(arcCenter: circlePoint,radius: circleWidth,startAngle: 0.0,endAngle: CGFloat(M_PI*2),clockwise: false)\n                    circleColor.setFill()\n                    myCircle.fill()\n                    myCircle.stroke()\n                }\n                \n                //\u63cf\u753b\u30dd\u30a4\u30f3\u30c8\u3092\u6307\u5b9a\n                linePath.addLineToPoint(CGPoint(x: (count+1) * memoriMargin, y: nextY))\n                \n                //\u5186\u3092\u3064\u304f\u308b\n                circlePoint = CGPoint(x: (count+1) * memoriMargin, y: nextY)\n                myCircle = UIBezierPath(arcCenter: circlePoint,\n                    // \u534a\u5f84\n                    radius: circleWidth,\n                    // \u521d\u89d2\u5ea6\n                    startAngle: 0.0,\n                    // \u6700\u7d42\u89d2\u5ea6\n                    endAngle: CGFloat(M_PI*2),\n                    // \u53cd\u6642\u8a08\u56de\u308a\n                    clockwise: false)\n                circleColor.setFill()\n                myCircle.fill()\n                myCircle.stroke()\n\n            }\n            \n            count += 1\n                \n        }\n        \n        linePath.stroke()\n        \n        \n    }\n    \n    // \u4fdd\u6301\u3057\u3066\u3044\u308bData\u306e\u4e2d\u3067\u6700\u5927\u5024\u3068\u6700\u4f4e\u5024\u306e\u5dee\u3092\u6c42\u3081\u308b\n    var yAxisMax: CGFloat {\n        return graphDatas.maxElement()!-graphDatas.minElement()!\n    }\n    \n    //\u30b0\u30e9\u30d5\u6a2a\u5e45\u3092\u7b97\u51fa\n    func checkWidth() -> CGFloat{\n        return CGFloat(graphPoints.count-1) * memoriMargin + (circleWidth * 2)\n    }\n    \n    //\u30b0\u30e9\u30d5\u7e26\u5e45\u3092\u7b97\u51fa\n    func checkHeight() -> CGFloat{\n        return graphHeight\n    }\n    \n\n}\n\n```\n", "tags": ["Swift", "\u30b0\u30e9\u30d5", "\u6298\u308c\u7dda", "graph"]}