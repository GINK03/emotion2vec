{"context": "\nCoding Challenge #11: 3D Terrain Generation with Perlin Noise in Processing\n\u3053\u3061\u3089\u3092\u5199\u7d4c\u3057\u3066\u3044\u305f\u306e\u3067\u3059\u304c21\u5206\u3042\u305f\u308a\u304b\u3089\u306e  \n\nmain.pde\nvoid draw(){\n  flying -= 0.1;\n\n  float yoff = flying;\n  for(int y = 0; y < rows; y++){\n    float xoff = 0;\n    for(int x = 0; x < cols; x++){\n      terrain[x][y] = map(noise(xoff, yoff), 0, 1, -100, 100);\n      xoff += 0.2;\n    }\n    yoff += 0.2;\n  }\n...\n\n\n\n\u3067\u6bce\u30d5\u30ec\u30fc\u30e0noise\u52d5\u304b\u3057\u3066\u3044\u308b\u306e\u306by\u8ef8\u306b\u30ba\u30ec\u3066\u3044\u304f\u7406\u7531\u304c\u308f\u304b\u3089\u305a\u3002\u30c1\u30a7\u30c3\u30af\u3057\u3066\u307f\u307e\u3057\u305f\u3002  \n \n\u7d50\u8ad6\u3068\u3057\u3066\u306fnoise()\u306f\u30a2\u30d7\u30ea\u5b9f\u884c\u6642\u306b\u5bfe\u5fdc\u3059\u308b\u56fa\u5b9a\u5024\u304c\u6c7a\u5b9a\u3002\nrandom()\u306f\u6bce\u30d5\u30ec\u30fc\u30e0\u5909\u66f4\u3002\u307f\u305f\u3044\u3067\u3059\u3002\n\nmain.pde\nvoid draw(){\n...\n  fill(255, 255);\n  textSize(25);\n  textAlign(CENTER);\n  text(\"noise(10, 100) => \" + noise(10, 100), 300, 60);\n  text(\"random(10, 100) => \", 230, 90);\n  text(random(10, 100), 420, 90);\n...\n\n\n\u306a\u3089\u3070\u5148\u307b\u3069\u306e\n\nmain.pde\n      terrain[x][y] = map(noise(xoff, yoff), 0, 1, -100, 100);\n\n\n\u3067\u3082noise\u306f\u56fa\u5b9a\u5024\u5410\u304d\u51fa\u3059\u306e\u3067\u554f\u984c\u7121\u3044\u3067\u3059\u306d\u3002\n\u30b3\u30fc\u30c9\u306e\u30b9\u30ca\u30c3\u30d7\u306f\u3053\u3061\u3089\u3002  \n![\u30b9\u30af\u30ea\u30fc\u30f3\u30b7\u30e7\u30c3\u30c8 2016-08-23 23.10.12.png](https://qiita-image-store.s3.amazonaws.com/0/12153/5c9d8e6e-7ab6-af8c-0b4e-599a761bb3ed.png)\n[Coding Challenge #11: 3D Terrain Generation with Perlin Noise in Processing](https://www.youtube.com/watch?v=IKB1hWWedMk)\n\n\u3053\u3061\u3089\u3092\u5199\u7d4c\u3057\u3066\u3044\u305f\u306e\u3067\u3059\u304c21\u5206\u3042\u305f\u308a\u304b\u3089\u306e  \n\n```java:main.pde\nvoid draw(){\n  flying -= 0.1;\n\n  float yoff = flying;\n  for(int y = 0; y < rows; y++){\n    float xoff = 0;\n    for(int x = 0; x < cols; x++){\n      terrain[x][y] = map(noise(xoff, yoff), 0, 1, -100, 100);\n      xoff += 0.2;\n    }\n    yoff += 0.2;\n  }\n...\n\n```\n\n\u3067\u6bce\u30d5\u30ec\u30fc\u30e0noise\u52d5\u304b\u3057\u3066\u3044\u308b\u306e\u306by\u8ef8\u306b\u30ba\u30ec\u3066\u3044\u304f\u7406\u7531\u304c\u308f\u304b\u3089\u305a\u3002\u30c1\u30a7\u30c3\u30af\u3057\u3066\u307f\u307e\u3057\u305f\u3002  \n\n![dev.gif](https://cloud.githubusercontent.com/assets/644580/17894953/500620ca-6986-11e6-80b5-26606bdb5e79.gif)  \n\n\n\u7d50\u8ad6\u3068\u3057\u3066\u306fnoise()\u306f\u30a2\u30d7\u30ea\u5b9f\u884c\u6642\u306b\u5bfe\u5fdc\u3059\u308b\u56fa\u5b9a\u5024\u304c\u6c7a\u5b9a\u3002  \nrandom()\u306f\u6bce\u30d5\u30ec\u30fc\u30e0\u5909\u66f4\u3002\u307f\u305f\u3044\u3067\u3059\u3002\n\n\n```java:main.pde\nvoid draw(){\n...\n  fill(255, 255);\n  textSize(25);\n  textAlign(CENTER);\n  text(\"noise(10, 100) => \" + noise(10, 100), 300, 60);\n  text(\"random(10, 100) => \", 230, 90);\n  text(random(10, 100), 420, 90);\n...\n```\n\n\u306a\u3089\u3070\u5148\u307b\u3069\u306e\n\n```java:main.pde\n      terrain[x][y] = map(noise(xoff, yoff), 0, 1, -100, 100);\n```\n\n\u3067\u3082noise\u306f\u56fa\u5b9a\u5024\u5410\u304d\u51fa\u3059\u306e\u3067\u554f\u984c\u7121\u3044\u3067\u3059\u306d\u3002\n\n\u30b3\u30fc\u30c9\u306e\u30b9\u30ca\u30c3\u30d7\u306f[\u3053\u3061\u3089](https://github.com/uriuriuriu/TerrainGenerationWithPerlinNoise/tree/95cdf47b4ad70345927b255f7c4de0dfb8c974ae)\u3002  \n", "tags": ["processing"]}