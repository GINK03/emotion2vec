{"context": " More than 1 year has passed since last update.\u5143\u3005\u306f\u3068\u3044\u3046\u304b\u672c\u6765\u306f*\u3068**\u3068\u3057\u3066\u6210\u308a\u7acb\u3063\u3066\u3044\u308b\u3002\u304c\u754c\u9688\u3067\u306f\u901a\u4f8b\u3068\u3057\u3066*args\u3068**kwargs\u3068\u3057\u3066\u8868\u8a18\u3055\u308c\u3066\u3044\u308b\u3060\u3051\u3089\u3057\u3044\u3002\u4e3b\u306a\u9055\u3044\u306f\u5909\u6570\u306e\u88dc\u5b8c\u306e\u4ed5\u65b9\u304ctuple\u304bdictionary\u304b\u3068\u3044\u3046\u3060\u3051\u306e\u9055\u3044\u3002\n\n\u4f55\u306b\u5f79\u306b\u7acb\u3064\u306e\u304b\n\n*args\n\ndef foo(*args):\n    for a in args:\n        print a\n\nfoo(1) #1\nfoo(1,2,3) #1\\n2\\n3\\n\n\n\u4eee\u306e\u5f15\u6570\u3068\u3057\u3066*args\u3068\u3044\u308c\u304a\u3051\u3070\u3001\u95a2\u6570\u4f5c\u6210\u4e2d\u306b\u300c\u5f15\u6570\u3092\u3044\u304f\u3064\u53d6\u308b\u304b\u307e\u3060\u672a\u5b9a\u300d\u306a\u3093\u3066\u3044\u3046\u6642\u306b\nargs\u304ctuple\u306e\u30d7\u30ec\u30fc\u30b9\u30db\u30eb\u30c0\u30fc\u3068\u3057\u3066\u5165\u3063\u3066\u304d\u305f\u5f15\u6570\u5168\u3066\u3092\u5f15\u304d\u53d6\u308b\u5f79\u5272\u3092\u679c\u305f\u3057\u3066\u304f\u308c\u308b\u3002\ndef test_var_args_call(arg1, arg2, arg3):\n    print (\"arg1:\", arg1)\n    print (\"arg2:\", arg2)\n    print (\"arg3:\", arg3)\n\nargs = (\"two\", 3)\ntest_var_args_call(1, *args)\n\n#result\narg1: 1\narg2: two\narg3: 3\n\n\u5148\u306bargs\u5909\u6570\u3092\u7528\u610f\u3057\u3066\u304a\u3044\u3066\u5f8c\u304b\u3089*args\u3067\u304b\u3076\u305b\u308b\u30a4\u30e1\u30fc\u30b8\u3002\u6700\u521d\u306eparameter:1 \u306farg1\u3068\u3057\u3066\u53d7\u3051\u53d6\u308a\u3001\u6b8b\u308a\u306f\u5168\u3066arg2\u3068arg3\u306e\u4e2d\u306b\u914d\u7f6e\u3055\u308c\u308b\u3002\u3061\u306a\u307f\u306b\u3053\u3046\u3084\u3063\u3066\u6700\u521d\u306b\u5f15\u6570\u306e\u6570\u3092\u6307\u5b9a\u3057\u3066\u5f8c\u304b\u3089\u95a2\u6570\u3067\u5165\u308c\u3066\u3044\u304f\u5834\u5408\u306f\u6700\u521d\u306b\u5b9a\u7fa9\u3057\u305f\u95a2\u6570\u304c\u53d7\u3051\u53d6\u308c\u308b\u5f15\u6570\u306e\u6570\u306e\u5206\u3060\u3051\u306e\u307f\u3057\u304b\u53d7\u3051\u53d6\u308c\u306a\u3044\u306e\u3067\u6ce8\u610f\u3002def function(arg1, *args)\u3067\u3042\u308c\u3070\u6700\u521d\u306e\u4e00\u3064\u76ee\u3060\u3051arg1\u306b\u884c\u304d\u6b8b\u308a\u306f\u5168\u3066*args\u304c\u5f15\u304d\u53d6\u308b\u3002\ndef test_var_args(farg, *args):\n    print \"formal arg:\", farg\n    for arg in args:\n        print \"another arg:\", arg\n\ntest_var_args(1, \"two\", 3)\n\n#result\nformal arg: 1\nanother arg: two\nanother arg: 3\n\n\u3053\u3046\u3044\u3046\u4f7f\u3044\u65b9\u3092\u3057\u305f\u3044\u5834\u5408\u306f\u5f15\u6570\u304c\u4f55\u500b\u6765\u308b\u304b\u308f\u304b\u3089\u306a\u3044\u3053\u3068\u304c\u591a\u3044\u306e\u3067for loop\u306a\u3069\u3067\u300c\u51fa\u3066\u304d\u305f\u6570\u5206\u3060\u3051x\u306e\u51e6\u7406\u3092\u884c\u3046\u300d\u3068\u3057\u3066\u3057\u307e\u3063\u305f\u307b\u3046\u304c\u697d\u3002\u7d30\u304b\u3044\u3053\u3068\u3067\u306f\u3042\u308b\u304c\u3053\u3053\u3067print\u306e\u4ee3\u308f\u308a\u306breturn\u3092\u4f7f\u3046\u3068\u6700\u521d\u306e\u4e00\u3064\u3060\u3051\u3057\u304b\u8868\u793a\u3055\u308c\u306a\u3044\u3002\u305d\u306e\u7406\u7531\u306f\u6050\u3089\u304freturn\u306b\u306f\u4e00\u5ea6\u305d\u306e\u51e6\u7406\u3092\u3057\u3066\u3057\u307e\u3046\u3068\u30eb\u30fc\u30d7\u3092\u7d42\u308f\u3089\u305b\u3066\u3057\u307e\u3046\u3068\u3044\u3046\u7279\u5fb4\u304c\u3042\u308b\u304b\u3089\u3060\u3068\u601d\u3046\u3002\u601d\u3044\u3064\u304f\u5bfe\u7b56\u3068\u3057\u3066\u306f\u30eb\u30fc\u30d7\u306e\u4e2d\u3067\u30ea\u30b9\u30c8\u306b\u305f\u3081\u3066\u304a\u3044\u3066\u30eb\u30fc\u30d7\u306e\u5916\u3067return statement\u3092\u5b9f\u884c\u3059\u308b\u3002\ndef test_var_args(farg, *args):\n    print(\"formal arg:\", farg)\n    for arg in args:\n        print(\"another arg:\", arg)\n\n    return arg\n\n#result\nformal arg: 1\nanother arg: two\nanother arg: 3\n3\n\n\u3053\u3093\u306a\u611f\u3058\u3067\u7121\u7406\u77e2\u7406\u3084\u3063\u3066\u307f\u305f\u304c\u6700\u5f8c\u306e3\u3057\u304b\u51fa\u305b\u306a\u304b\u3063\u305f\u3002\u7406\u7531\u306farg\u306e\u6700\u5f8c\u304c3\u306b\u304f\u3063\u3064\u3044\u305f\u307e\u307e\u30eb\u30fc\u30d7\u304c\u7d42\u308f\u3063\u3066\u3044\u308b\u304b\u3089\u3060\u3002\n\nThe for-loop runs each statement in it for however so many times.. if one of your statements is a return, then the function will return when it hits it. This makes sense in, for example, the following case:\ndef get_index(needle, haystack):\n    for x in range(len(haystack)):\n        if haystack[x] == needle:\n            return x\n\nHere, the function iterates until it finds where the needle is in the haystack, and then returns that index (there's a builtin function to do this, anyways). If you want the function to run for however many times you tell it to, you have to put the return AFTER the for-loop, not inside it, that way, the function will return after the control gets off the loop\ndef add(numbers):\n    ret = 0\n    for x in numbers:\n        ret = ret + x\n    return ret # needs to be outside the loop\n\n\n\n**kwargs\n\n\u4e00\u8a00\u3067\u307e\u3068\u3081\u308b\u3068\u3001*\u304ctuple\u3067\u5909\u6570\u3092\u7ba1\u7406\u3059\u308b\u306e\u306b\u5bfe\u3057**\u306fdictionary\u3068\u3057\u3066\u4fdd\u5b58\u3059\u308b\u3002\u3064\u307e\u308akey\u3068value\u306e2\u3064\u3092\u5f15\u6570\u3068\u3057\u3066\u53d6\u308b\u3053\u3068\u304c\u3067\u304d\u308b\u3002\ndef bar(**kwargs):\n    for a in kwargs:\n        print(a, kwargs[a])\n\nbar(name=\"your mom\", age=12, hotness=1) #hotness 1\\nage 12\\nname your mom\n\n\n*l\n*args\u3068**kwargs\u306b\u52a0\u3048\u3066*l\u3068\u3044\u3046\u30a4\u30c7\u30a3\u30aa\u30e0\u3082\u3042\u308b\u3002\u4e3b\u306a\u4f7f\u308f\u308c\u65b9\u306f\u5909\u6570\u3068\u3057\u3066\u53d7\u3051\u53d6\u3063\u305f\u30ea\u30b9\u30c8\u3092\u958b\u3044\u3066\u4e2d\u8eab\u3092\u53d6\u308a\u51fa\u3057\u3066tuple\u306e\u4e2d\u306b\u4fdd\u5b58\u3057\u3066\u304f\u308c\u308b\u3002\u3084\u308a\u65b9\u306f\u5909\u6570l\u306e\u5024\u306b\u30ea\u30b9\u30c8\u3092\u52a0\u3048\uff08\u3082\u3057\u304f\u306f\u5b9a\u7fa9\u3057\u3066\u304a\u3044\u3066\u5f8c\u3067\u9001\u308betc\uff09\u3001\u305d\u306e\u307e\u307efunc(*l)\u3067\u547c\u3093\u3067\u3042\u3052\u308b\u3060\u3051\u3060\u3002\u305f\u3060\u547c\u3076\u65b9\u306e\u95a2\u6570\u306b\u3082\u540c\u3058\u6570\u306eparameter\u3092\u7528\u610f\u3055\u305b\u308b\u5fc5\u8981\u304c\u3042\u308b\u3002\ndef foo(a, b):\n    print(a, b)\n\nl = [1, 2]\nfoo(*l) #1, 2\n\n\n\u8ffd\u8a18\n\u3061\u306a\u307f\u306b*args\u3082**kwargs\u3082\u95a2\u6570\u3092\u53d7\u3051\u53d6\u308b\u30bf\u30fc\u30b2\u30c3\u30c8\u3068\u3057\u304b\u53d7\u3051\u53d6\u308b\u3053\u3068\u304c\u3067\u304d\u306a\u3044\u3002\u3069\u3046\u3044\u3046\u3053\u3068\u304b\u3068\u3044\u3046\u3068\ndef make_averaged(*args):\n    return *args / len(str(*args))\n# causes syntax error\n\nsyntax error\u3092\u8d77\u3053\u3057\u3066\u3057\u307e\u3046\u306e\u3067*\u306e\u5f8c\u306b\u3064\u3051\u305f\u540d\u524d\u3060\u3051\u3067\u5909\u6570\u3092\u53d6\u308a\u6271\u3046\u3088\u3046\u306b\u3002\u305f\u307e\u306b\u5fd8\u308c\u3066\u3057\u307e\u3046\u306e\u3067\u5099\u5fd8\u9332\u3068\u3057\u3066\u3002\n\n\u53c2\u8003\u306b\u3057\u305f\u30ea\u30f3\u30af\n\nWhat does ** (double star) and * (star) do for Python parameters?\n*args and **kwargs? [duplicate]\nHow to use *args and **kwargs in Python\n\n\n- return statement in for loop\n\n\u5143\u3005\u306f~~\u3068\u3044\u3046\u304b\u672c\u6765\u306f~~<a href=\"https://docs.python.org/2/tutorial/controlflow.html#arbitrary-argument-lists\" target=\"_blank\">`*`\u3068`**`\u3068\u3057\u3066\u6210\u308a\u7acb\u3063\u3066\u3044\u308b</a>\u3002\u304c\u754c\u9688\u3067\u306f\u901a\u4f8b\u3068\u3057\u3066`*args`\u3068`**kwargs`\u3068\u3057\u3066\u8868\u8a18\u3055\u308c\u3066\u3044\u308b\u3060\u3051\u3089\u3057\u3044\u3002\u4e3b\u306a\u9055\u3044\u306f\u5909\u6570\u306e\u88dc\u5b8c\u306e\u4ed5\u65b9\u304c`tuple`\u304b`dictionary`\u304b\u3068\u3044\u3046\u3060\u3051\u306e\u9055\u3044\u3002\n\n#\u4f55\u306b\u5f79\u306b\u7acb\u3064\u306e\u304b\n\n##`*args`\n\n```\ndef foo(*args):\n    for a in args:\n        print a\n\nfoo(1) #1\nfoo(1,2,3) #1\\n2\\n3\\n\n```\n\n\u4eee\u306e\u5f15\u6570\u3068\u3057\u3066`*args`\u3068\u3044\u308c\u304a\u3051\u3070\u3001\u95a2\u6570\u4f5c\u6210\u4e2d\u306b\u300c\u5f15\u6570\u3092\u3044\u304f\u3064\u53d6\u308b\u304b\u307e\u3060\u672a\u5b9a\u300d\u306a\u3093\u3066\u3044\u3046\u6642\u306b\n`args`\u304ctuple\u306e\u30d7\u30ec\u30fc\u30b9\u30db\u30eb\u30c0\u30fc\u3068\u3057\u3066\u5165\u3063\u3066\u304d\u305f\u5f15\u6570\u5168\u3066\u3092\u5f15\u304d\u53d6\u308b\u5f79\u5272\u3092\u679c\u305f\u3057\u3066\u304f\u308c\u308b\u3002\n\n```\ndef test_var_args_call(arg1, arg2, arg3):\n    print (\"arg1:\", arg1)\n    print (\"arg2:\", arg2)\n    print (\"arg3:\", arg3)\n\nargs = (\"two\", 3)\ntest_var_args_call(1, *args)\n\n#result\narg1: 1\narg2: two\narg3: 3\n```\n\n\u5148\u306b`args`\u5909\u6570\u3092\u7528\u610f\u3057\u3066\u304a\u3044\u3066\u5f8c\u304b\u3089`*args`\u3067\u304b\u3076\u305b\u308b\u30a4\u30e1\u30fc\u30b8\u3002\u6700\u521d\u306e`parameter`:1 \u306f`arg1`\u3068\u3057\u3066\u53d7\u3051\u53d6\u308a\u3001\u6b8b\u308a\u306f\u5168\u3066`arg2`\u3068`arg3`\u306e\u4e2d\u306b\u914d\u7f6e\u3055\u308c\u308b\u3002\u3061\u306a\u307f\u306b\u3053\u3046\u3084\u3063\u3066\u6700\u521d\u306b\u5f15\u6570\u306e\u6570\u3092\u6307\u5b9a\u3057\u3066\u5f8c\u304b\u3089\u95a2\u6570\u3067\u5165\u308c\u3066\u3044\u304f\u5834\u5408\u306f\u6700\u521d\u306b\u5b9a\u7fa9\u3057\u305f\u95a2\u6570\u304c\u53d7\u3051\u53d6\u308c\u308b\u5f15\u6570\u306e\u6570\u306e\u5206\u3060\u3051\u306e\u307f\u3057\u304b\u53d7\u3051\u53d6\u308c\u306a\u3044\u306e\u3067\u6ce8\u610f\u3002`def function(arg1, *args)`\u3067\u3042\u308c\u3070\u6700\u521d\u306e\u4e00\u3064\u76ee\u3060\u3051`arg1`\u306b\u884c\u304d\u6b8b\u308a\u306f\u5168\u3066`*args`\u304c\u5f15\u304d\u53d6\u308b\u3002\n\n```\ndef test_var_args(farg, *args):\n    print \"formal arg:\", farg\n    for arg in args:\n        print \"another arg:\", arg\n\ntest_var_args(1, \"two\", 3)\n\n#result\nformal arg: 1\nanother arg: two\nanother arg: 3\n```\n\n\u3053\u3046\u3044\u3046\u4f7f\u3044\u65b9\u3092\u3057\u305f\u3044\u5834\u5408\u306f\u5f15\u6570\u304c\u4f55\u500b\u6765\u308b\u304b\u308f\u304b\u3089\u306a\u3044\u3053\u3068\u304c\u591a\u3044\u306e\u3067`for loop`\u306a\u3069\u3067\u300c\u51fa\u3066\u304d\u305f\u6570\u5206\u3060\u3051x\u306e\u51e6\u7406\u3092\u884c\u3046\u300d\u3068\u3057\u3066\u3057\u307e\u3063\u305f\u307b\u3046\u304c\u697d\u3002\u7d30\u304b\u3044\u3053\u3068\u3067\u306f\u3042\u308b\u304c\u3053\u3053\u3067`print`\u306e\u4ee3\u308f\u308a\u306b`return`\u3092\u4f7f\u3046\u3068\u6700\u521d\u306e\u4e00\u3064\u3060\u3051\u3057\u304b\u8868\u793a\u3055\u308c\u306a\u3044\u3002\u305d\u306e\u7406\u7531\u306f\u6050\u3089\u304f[`return`\u306b\u306f\u4e00\u5ea6\u305d\u306e\u51e6\u7406\u3092\u3057\u3066\u3057\u307e\u3046\u3068\u30eb\u30fc\u30d7\u3092\u7d42\u308f\u3089\u305b\u3066\u3057\u307e\u3046](http://qiita.com/weedslayer/items/9ac165613bc896a1aaa1)\u3068\u3044\u3046\u7279\u5fb4\u304c\u3042\u308b\u304b\u3089\u3060\u3068\u601d\u3046\u3002\u601d\u3044\u3064\u304f\u5bfe\u7b56\u3068\u3057\u3066\u306f\u30eb\u30fc\u30d7\u306e\u4e2d\u3067\u30ea\u30b9\u30c8\u306b\u305f\u3081\u3066\u304a\u3044\u3066__\u30eb\u30fc\u30d7\u306e\u5916\u3067__`return statement`\u3092\u5b9f\u884c\u3059\u308b\u3002\n\n```\ndef test_var_args(farg, *args):\n    print(\"formal arg:\", farg)\n    for arg in args:\n        print(\"another arg:\", arg)\n\n    return arg\n\n#result\nformal arg: 1\nanother arg: two\nanother arg: 3\n3\n```\n\n\u3053\u3093\u306a\u611f\u3058\u3067\u7121\u7406\u77e2\u7406\u3084\u3063\u3066\u307f\u305f\u304c\u6700\u5f8c\u306e3\u3057\u304b\u51fa\u305b\u306a\u304b\u3063\u305f\u3002\u7406\u7531\u306f`arg`\u306e\u6700\u5f8c\u304c3\u306b\u304f\u3063\u3064\u3044\u305f\u307e\u307e\u30eb\u30fc\u30d7\u304c\u7d42\u308f\u3063\u3066\u3044\u308b\u304b\u3089\u3060\u3002\n\n> \n_The for-loop runs each statement in it for however so many times.. if one of your statements is a return, then the function will return when it hits it. This makes sense in, for example, the following case:_\n>\n```\ndef get_index(needle, haystack):\n    for x in range(len(haystack)):\n        if haystack[x] == needle:\n            return x\n```\n>\n_Here, the function iterates until it finds where the needle is in the haystack, and then returns that index (there's a builtin function to do this, anyways). If you want the function to run for however many times you tell it to, you have to put the return AFTER the for-loop, not inside it, that way, the function will return after the control gets off the loop_\n>\n```\ndef add(numbers):\n    ret = 0\n    for x in numbers:\n        ret = ret + x\n    return ret # needs to be outside the loop\n```\n\n##`**kwargs`\n\n\u4e00\u8a00\u3067\u307e\u3068\u3081\u308b\u3068\u3001`*`\u304ctuple\u3067\u5909\u6570\u3092\u7ba1\u7406\u3059\u308b\u306e\u306b\u5bfe\u3057`**`\u306fdictionary\u3068\u3057\u3066\u4fdd\u5b58\u3059\u308b\u3002\u3064\u307e\u308a`key`\u3068`value`\u306e2\u3064\u3092\u5f15\u6570\u3068\u3057\u3066\u53d6\u308b\u3053\u3068\u304c\u3067\u304d\u308b\u3002\n\n```\ndef bar(**kwargs):\n    for a in kwargs:\n        print(a, kwargs[a])\n\nbar(name=\"your mom\", age=12, hotness=1) #hotness 1\\nage 12\\nname your mom\n```\n\n##*l\n\n`*args`\u3068`**kwargs`\u306b\u52a0\u3048\u3066`*l`\u3068\u3044\u3046\u30a4\u30c7\u30a3\u30aa\u30e0\u3082\u3042\u308b\u3002\u4e3b\u306a\u4f7f\u308f\u308c\u65b9\u306f\u5909\u6570\u3068\u3057\u3066\u53d7\u3051\u53d6\u3063\u305f\u30ea\u30b9\u30c8\u3092\u958b\u3044\u3066\u4e2d\u8eab\u3092\u53d6\u308a\u51fa\u3057\u3066`tuple`\u306e\u4e2d\u306b\u4fdd\u5b58\u3057\u3066\u304f\u308c\u308b\u3002\u3084\u308a\u65b9\u306f\u5909\u6570`l`\u306e\u5024\u306b\u30ea\u30b9\u30c8\u3092\u52a0\u3048\uff08\u3082\u3057\u304f\u306f\u5b9a\u7fa9\u3057\u3066\u304a\u3044\u3066\u5f8c\u3067\u9001\u308betc\uff09\u3001\u305d\u306e\u307e\u307e`func(*l)`\u3067\u547c\u3093\u3067\u3042\u3052\u308b\u3060\u3051\u3060\u3002\u305f\u3060\u547c\u3076\u65b9\u306e\u95a2\u6570\u306b\u3082\u540c\u3058\u6570\u306e`parameter`\u3092\u7528\u610f\u3055\u305b\u308b\u5fc5\u8981\u304c\u3042\u308b\u3002\n\n```\ndef foo(a, b):\n    print(a, b)\n\nl = [1, 2]\nfoo(*l) #1, 2\n```\n\n#\u8ffd\u8a18\n\n\u3061\u306a\u307f\u306b`*args`\u3082`**kwargs`\u3082\u95a2\u6570\u3092\u53d7\u3051\u53d6\u308b\u30bf\u30fc\u30b2\u30c3\u30c8\u3068\u3057\u304b\u53d7\u3051\u53d6\u308b\u3053\u3068\u304c\u3067\u304d\u306a\u3044\u3002\u3069\u3046\u3044\u3046\u3053\u3068\u304b\u3068\u3044\u3046\u3068\n\n```\ndef make_averaged(*args):\n    return *args / len(str(*args))\n# causes syntax error\n```\n\n[syntax error](http://qiita.com/weedslayer/items/b15cd3d244352844ba94)\u3092\u8d77\u3053\u3057\u3066\u3057\u307e\u3046\u306e\u3067`*`\u306e\u5f8c\u306b\u3064\u3051\u305f\u540d\u524d\u3060\u3051\u3067\u5909\u6570\u3092\u53d6\u308a\u6271\u3046\u3088\u3046\u306b\u3002\u305f\u307e\u306b\u5fd8\u308c\u3066\u3057\u307e\u3046\u306e\u3067\u5099\u5fd8\u9332\u3068\u3057\u3066\u3002\n\n#\u53c2\u8003\u306b\u3057\u305f\u30ea\u30f3\u30af\n\n- [What does ** (double star) and * (star) do for Python parameters?](http://stackoverflow.com/questions/36901/what-does-double-star-and-star-do-for-python-parameters)\n- [*args and **kwargs? [duplicate]](http://stackoverflow.com/questions/3394835/args-and-kwargs)\n- [How to use *args and **kwargs in Python](http://www.saltycrane.com/blog/2008/01/how-to-use-args-and-kwargs-in-python/)\n- [return statement in for loop](http://stackoverflow.com/questions/5864166/return-statement-in-for-loops)\n- \n", "tags": ["Python", "*arg", "**kwargs", "difference"]}