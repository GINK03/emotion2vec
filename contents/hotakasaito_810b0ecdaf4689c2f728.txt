{"context": " More than 1 year has passed since last update.Slack\u304b\u3089\u30b5\u30fc\u30d0\u306b\u30b3\u30de\u30f3\u30c9\u3092\u767a\u884c\u3057\u305f\u3044\nnodejs\u30e2\u30b8\u30e5\u30fc\u30eb\u306essh2\u3092\u4f7f\u3063\u3066\u5b9f\u73fe\u3057\u305f\n\u9375\u306faes\u3067\u6697\u53f7\u5316\u3057\u305f\u3082\u306e\u3092\u4fdd\u6301\u3057\u74b0\u5883\u5909\u6570\u306b\u5fa9\u53f7\u5316\u7528\u306e\u30d1\u30b9\u30ef\u30fc\u30c9\u3092\u6301\u305f\u305b\u308b\u69d8\u306b\u3057\u305f\n\u5168\u3066\u306e\u30b3\u30de\u30f3\u30c9\u3092\u901a\u904e\u3055\u305b\u308b\u306e\u306f\u5371\u967a\u306a\u306e\u3067\u7d5e\u308b\n\u5168\u54e1\u304c\u30b3\u30de\u30f3\u30c9\u767a\u884c\u3067\u304d\u308b\u306e\u3082\u5371\u967a\u306a\u306e\u3067\u30a2\u30ab\u30a6\u30f3\u30c8\u3092\u7d5e\u308b\n\nssh\u306e\u9375\u3092\u6697\u53f7\u5316\u3059\u308b\ncat ~/.ssh/key.pem | openssl enc -aes-256-cbc -nosalt -a -k password > key.enc\n\n\nheroku\u306e\u74b0\u5883\u5909\u6570\u306bpassword\u3092\u8a2d\u5b9a\u3059\u308b\nheroku config:set DECIPHER_PASSWORD=password\n\n\n\u30e2\u30b8\u30e5\u30fc\u30ebssh2/crypto\u3092\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\nnpm install ssh2 --save\nnpm install crypto --save\n\n\nscript\n\n\u30b3\u30de\u30f3\u30c9\u306fhubot ssh [uptime|df]\u3068\u3057\u305f\n\n# -*- mode:coffee; coding:utf-8 -*-\n# Description:\n#   SSH commands\n#\n\ncipher = '''\n\u4e0a\u3067\u6697\u53f7\u5316\u3057\u305fkey.enc\u306e\u5185\u5bb9\u3092\u8cbc\u308a\u4ed8\u3051\u308b\n'''\n\nConnection = require('ssh2')\ncrypto = require('crypto')\naes = crypto.createDecipher('aes-256-cbc', new Buffer(process.env['DECIPHER_PASSWORD']))\nprivateKey = aes.update(data, 'base64', 'utf8')\nprivateKey += aes.final('utf8')\n\nmodule.exports = (robot) ->\n  # uptime\u3068df\u3060\u3051\u8a31\u53ef\u3059\u308b\n  robot.respond /\\s+ssh\\s+(uptime|df)\\s*/i, (msg) ->\n    # user1\u3068user2\u3060\u3051\u8a31\u53ef\u3059\u308b\n    return if not /^(user1|user2)$/i.test(msg.message.user.name)\n    cmd = msg.match[1]\n\n    result = \"\"\n    conn = new Connection()\n    conn.on 'ready', () ->\n      console.log 'Connection :: ready'\n      conn.exec cmd, (err, stream) ->\n        if err\n          console.log err\n          msg.send err\n          conn.end()\n          return\n        stream.on 'exit', (code, signal) ->\n          console.log 'Stream :: exit :: code: ' + code + ', signal: ' + signal\n        .on 'close', () ->\n          console.log 'Stream :: close'\n          conn.end()\n          msg.send \">>> #{result.toString()}\"\n        .on 'data', (data) ->\n          console.log 'STDOUT: ' + data\n          result = data\n        .stderr.on 'data', (data) ->\n          console.log 'STDERR: ' + data\n          result = data\n    .connect({\n      host: 'x.x.x.x',\n      port: 22,\n      username: 'username',\n      privateKey: privateKey\n    })\n\nSlack\u304b\u3089\u30b5\u30fc\u30d0\u306b\u30b3\u30de\u30f3\u30c9\u3092\u767a\u884c\u3057\u305f\u3044\nnodejs\u30e2\u30b8\u30e5\u30fc\u30eb\u306essh2\u3092\u4f7f\u3063\u3066\u5b9f\u73fe\u3057\u305f\n\u9375\u306faes\u3067\u6697\u53f7\u5316\u3057\u305f\u3082\u306e\u3092\u4fdd\u6301\u3057\u74b0\u5883\u5909\u6570\u306b\u5fa9\u53f7\u5316\u7528\u306e\u30d1\u30b9\u30ef\u30fc\u30c9\u3092\u6301\u305f\u305b\u308b\u69d8\u306b\u3057\u305f\n\u5168\u3066\u306e\u30b3\u30de\u30f3\u30c9\u3092\u901a\u904e\u3055\u305b\u308b\u306e\u306f\u5371\u967a\u306a\u306e\u3067\u7d5e\u308b\n\u5168\u54e1\u304c\u30b3\u30de\u30f3\u30c9\u767a\u884c\u3067\u304d\u308b\u306e\u3082\u5371\u967a\u306a\u306e\u3067\u30a2\u30ab\u30a6\u30f3\u30c8\u3092\u7d5e\u308b\n\n### ssh\u306e\u9375\u3092\u6697\u53f7\u5316\u3059\u308b\n```bash\ncat ~/.ssh/key.pem | openssl enc -aes-256-cbc -nosalt -a -k password > key.enc\n```\n\n### heroku\u306e\u74b0\u5883\u5909\u6570\u306bpassword\u3092\u8a2d\u5b9a\u3059\u308b\n```bash\nheroku config:set DECIPHER_PASSWORD=password\n```\n\n### \u30e2\u30b8\u30e5\u30fc\u30ebssh2/crypto\u3092\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\n```bash\nnpm install ssh2 --save\nnpm install crypto --save\n```\n\n### script\n* \u30b3\u30de\u30f3\u30c9\u306f`hubot ssh [uptime|df]`\u3068\u3057\u305f\n\n```coffeescript\n# -*- mode:coffee; coding:utf-8 -*-\n# Description:\n#   SSH commands\n#\n\ncipher = '''\n\u4e0a\u3067\u6697\u53f7\u5316\u3057\u305fkey.enc\u306e\u5185\u5bb9\u3092\u8cbc\u308a\u4ed8\u3051\u308b\n'''\n\nConnection = require('ssh2')\ncrypto = require('crypto')\naes = crypto.createDecipher('aes-256-cbc', new Buffer(process.env['DECIPHER_PASSWORD']))\nprivateKey = aes.update(data, 'base64', 'utf8')\nprivateKey += aes.final('utf8')\n\nmodule.exports = (robot) ->\n  # uptime\u3068df\u3060\u3051\u8a31\u53ef\u3059\u308b\n  robot.respond /\\s+ssh\\s+(uptime|df)\\s*/i, (msg) ->\n    # user1\u3068user2\u3060\u3051\u8a31\u53ef\u3059\u308b\n    return if not /^(user1|user2)$/i.test(msg.message.user.name)\n    cmd = msg.match[1]\n\n    result = \"\"\n    conn = new Connection()\n    conn.on 'ready', () ->\n      console.log 'Connection :: ready'\n      conn.exec cmd, (err, stream) ->\n        if err\n          console.log err\n          msg.send err\n          conn.end()\n          return\n        stream.on 'exit', (code, signal) ->\n          console.log 'Stream :: exit :: code: ' + code + ', signal: ' + signal\n        .on 'close', () ->\n          console.log 'Stream :: close'\n          conn.end()\n          msg.send \">>> #{result.toString()}\"\n        .on 'data', (data) ->\n          console.log 'STDOUT: ' + data\n          result = data\n        .stderr.on 'data', (data) ->\n          console.log 'STDERR: ' + data\n          result = data\n    .connect({\n      host: 'x.x.x.x',\n      port: 22,\n      username: 'username',\n      privateKey: privateKey\n    })\n```\n", "tags": ["Slack", "Hubot"]}