{"context": " More than 1 year has passed since last update.foobar|fooxar|foozap|fooza\u306e\u3088\u3046\u306a\u6b63\u898f\u8868\u73fe\u306f\u3001\u30d1\u30a4\u30d7\u3092\u6e1b\u3089\u3057\u3066foo(?:bar|xar|zap?)\u3068\u3059\u308b\u3053\u3068\u3067\u9ad8\u901f\u306b\u52d5\u4f5c\u3059\u308b\u3002\n\u3068\u306f\u3044\u3048\u4e00\u767a\u3067\u5f8c\u8005\u306e\u3088\u3046\u306a\u6b63\u898f\u8868\u73fe\u306f\u306a\u304b\u306a\u304b\u66f8\u304d\u306b\u304f\u3044\u3002\u305d\u3053\u3067\u305d\u308c\u3092\u81ea\u52d5\u5316\u3059\u308b\u305f\u3081\u306b\u66f8\u3044\u305f\u306e\u304c\u6b21\u306e\u30b3\u30fc\u30c9\u3002\nrequire 'forwardable'\n\nclass Regexp\n  class Trie\n    def self.union(*patterns)\n      trie = new\n      patterns.each { |pattern| trie << pattern }\n      trie.to_regexp\n    end\n\n    extend Forwardable\n    def_delegators :@map, :include?, :[], :[]=\n\n    def initialize\n      @map = {}\n    end\n\n    def add(expr)\n      ref = self\n      expr.each_char do |char|\n        ref[char] = Trie.new unless ref.include?(char)\n        ref = ref[char]\n      end\n      ref[''] = nil\n    end\n    alias << add\n\n    def to_regexp\n      return if @map.include?(\"\") && @map.length == 1\n      q = false\n      alt, cc = *@map.each_with_object([[], []]) do |(char, value), (alt, cc)|\n        quoted_char = Regexp.quote(char)\n        if self[char]\n          if recurse = value.to_regexp\n            alt << quoted_char + recurse\n          else\n            cc << quoted_char\n          end\n        else\n          q = true\n        end\n      end\n      cconly = alt.empty?\n      alt << (cc.size == 1 ? cc[0] : \"[#{cc.join}]\") unless cc.empty?\n      result = alt.size == 1 ? alt[0] : \"(?:#{alt * '|'})\"\n      result = cconly ? \"#{result}?\" : \"(?:#{result})?\" if q\n      result\n    end\n  end\nend\n\n\n\u3053\u308c\u306f\u6b21\u306e\u3088\u3046\u306b\u4f7f\u3046\u3053\u3068\u304c\u3067\u304d\u308b\u3002\np Regexp::Trie.union(\"foobar\", \"fooxar\", \"foozap\", \"fooza\") #=> \"foo(?:bar|xar|zap?)\"\np Regexp::Trie.union(\"a\", \"b\", \"c\", \"cca\") #=> \"(?:c(?:ca)?|[ab])\"\n\n\n\u305d\u306e\u4ed6\u306e\u8a00\u8a9e\u306e\u5b9f\u88c5\n\u5b9f\u3092\u8a00\u3046\u3068\u3053\u306e\u30a2\u30d7\u30ed\u30fc\u30c1\u306f\u3001\u69d8\u3005\u306a\u8a00\u8a9e\u3067\u5b9f\u88c5\u3055\u308c\u3066\u3044\u308b\u3002\n\nRegexp::Trie - search.cpan.org\ntokuhirom/regexp-trie\nalexeld/regex-trie\n\n\n\u4e2d\u9014\u534a\u7aef\u3068\u306f\n\u4e2d\u9014\u534a\u7aef\u306b\u3068\u66f8\u3044\u305f\u306e\u306f\u3001\u30e1\u30bf\u6587\u5b57\u3092\u8003\u616e\u3057\u305f\u6700\u9069\u5316\u307e\u3067\u306f\u3067\u304d\u3066\u3044\u306a\u3044\u304b\u3089\u3002\n\u3068\u306f\u3044\u3048\u305d\u3053\u307e\u3067\u3084\u3063\u3066\u304f\u308c\u308boptimizer\u3082\u4ed6\u306e\u8a00\u8a9e\u306b\u306f\u5b58\u5728\u3057\u3066\u3044\u3066\u3001\u6b21\u306e\u3088\u3046\u306a\u3082\u306e\u304c\u6319\u3052\u3089\u308c\u308b\u3002\n\nRegexp::Assemble - search.cpan.org\nRegexp::Assemble\u3092JavaScript\u306b\u79fb\u690d\u3057\u3066\u307f\u305f\n\nRuby\u306b\u3082\u79fb\u690d\u3057\u305f\u3044\u3088\u306a\u3041\u3068\u601d\u3044\u306a\u304c\u3089\u3082\u306a\u304b\u306a\u304b\u624b\u304c\u3064\u3051\u3089\u308c\u3066\u3044\u306a\u3044\u3002\n\n\u304a\u308f\u308a\u306b\n\u6b63\u898f\u8868\u73fe\u3082\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u8a00\u8a9e\u540c\u69d8\u3001\u3069\u3093\u306a\u30b3\u30fc\u30c9\u3092\u66f8\u304f\u304b\u306b\u3088\u3063\u3066\u30d1\u30d5\u30a9\u30fc\u30de\u30f3\u30b9\u306f\u96f2\u6ce5\u306e\u5dee\u304c\u751f\u3058\u308b\u3002\n\u3053\u3046\u3044\u3063\u305f\u6700\u9069\u5316\u306e\u30a2\u30d7\u30ed\u30fc\u30c1\u3092\u77e5\u8b58\u3068\u3057\u3066\u77e5\u3063\u3066\u304a\u304f\u3068\u3001\u3088\u308a\u3088\u3044\u6b63\u898f\u8868\u73fe\u304c\u66f8\u3051\u308b\u306e\u3067\u306f\u306a\u304b\u308d\u3046\u304b\u3002\n`foobar|fooxar|foozap|fooza`\u306e\u3088\u3046\u306a\u6b63\u898f\u8868\u73fe\u306f\u3001\u30d1\u30a4\u30d7\u3092\u6e1b\u3089\u3057\u3066`foo(?:bar|xar|zap?)`\u3068\u3059\u308b\u3053\u3068\u3067\u9ad8\u901f\u306b\u52d5\u4f5c\u3059\u308b\u3002\n\u3068\u306f\u3044\u3048\u4e00\u767a\u3067\u5f8c\u8005\u306e\u3088\u3046\u306a\u6b63\u898f\u8868\u73fe\u306f\u306a\u304b\u306a\u304b\u66f8\u304d\u306b\u304f\u3044\u3002\u305d\u3053\u3067\u305d\u308c\u3092\u81ea\u52d5\u5316\u3059\u308b\u305f\u3081\u306b\u66f8\u3044\u305f\u306e\u304c\u6b21\u306e\u30b3\u30fc\u30c9\u3002\n\n```ruby\nrequire 'forwardable'\n\nclass Regexp\n  class Trie\n    def self.union(*patterns)\n      trie = new\n      patterns.each { |pattern| trie << pattern }\n      trie.to_regexp\n    end\n\n    extend Forwardable\n    def_delegators :@map, :include?, :[], :[]=\n\n    def initialize\n      @map = {}\n    end\n\n    def add(expr)\n      ref = self\n      expr.each_char do |char|\n        ref[char] = Trie.new unless ref.include?(char)\n        ref = ref[char]\n      end\n      ref[''] = nil\n    end\n    alias << add\n\n    def to_regexp\n      return if @map.include?(\"\") && @map.length == 1\n      q = false\n      alt, cc = *@map.each_with_object([[], []]) do |(char, value), (alt, cc)|\n        quoted_char = Regexp.quote(char)\n        if self[char]\n          if recurse = value.to_regexp\n            alt << quoted_char + recurse\n          else\n            cc << quoted_char\n          end\n        else\n          q = true\n        end\n      end\n      cconly = alt.empty?\n      alt << (cc.size == 1 ? cc[0] : \"[#{cc.join}]\") unless cc.empty?\n      result = alt.size == 1 ? alt[0] : \"(?:#{alt * '|'})\"\n      result = cconly ? \"#{result}?\" : \"(?:#{result})?\" if q\n      result\n    end\n  end\nend\n\n```\n\n\u3053\u308c\u306f\u6b21\u306e\u3088\u3046\u306b\u4f7f\u3046\u3053\u3068\u304c\u3067\u304d\u308b\u3002\n\n```ruby\np Regexp::Trie.union(\"foobar\", \"fooxar\", \"foozap\", \"fooza\") #=> \"foo(?:bar|xar|zap?)\"\np Regexp::Trie.union(\"a\", \"b\", \"c\", \"cca\") #=> \"(?:c(?:ca)?|[ab])\"\n```\n\n# \u305d\u306e\u4ed6\u306e\u8a00\u8a9e\u306e\u5b9f\u88c5\n\n\u5b9f\u3092\u8a00\u3046\u3068\u3053\u306e\u30a2\u30d7\u30ed\u30fc\u30c1\u306f\u3001\u69d8\u3005\u306a\u8a00\u8a9e\u3067\u5b9f\u88c5\u3055\u308c\u3066\u3044\u308b\u3002\n\n* [Regexp::Trie - search.cpan.org](http://search.cpan.org/~dankogai/Regexp-Trie-0.02/lib/Regexp/Trie.pm)\n* [tokuhirom/regexp-trie](https://github.com/tokuhirom/regexp-trie)\n* [alexeld/regex-trie](https://github.com/alexeld/regex-trie)\n\n# \u4e2d\u9014\u534a\u7aef\u3068\u306f\n\n**\u4e2d\u9014\u534a\u7aef\u306b**\u3068\u66f8\u3044\u305f\u306e\u306f\u3001\u30e1\u30bf\u6587\u5b57\u3092\u8003\u616e\u3057\u305f\u6700\u9069\u5316\u307e\u3067\u306f\u3067\u304d\u3066\u3044\u306a\u3044\u304b\u3089\u3002\n\u3068\u306f\u3044\u3048\u305d\u3053\u307e\u3067\u3084\u3063\u3066\u304f\u308c\u308boptimizer\u3082\u4ed6\u306e\u8a00\u8a9e\u306b\u306f\u5b58\u5728\u3057\u3066\u3044\u3066\u3001\u6b21\u306e\u3088\u3046\u306a\u3082\u306e\u304c\u6319\u3052\u3089\u308c\u308b\u3002\n\n* [Regexp::Assemble - search.cpan.org](http://search.cpan.org/~dland/Regexp-Assemble-0.35/Assemble.pm)\n* [Regexp::Assemble\u3092JavaScript\u306b\u79fb\u690d\u3057\u3066\u307f\u305f](http://d.hatena.ne.jp/heiwaboke/20120320/1332213961)\n\nRuby\u306b\u3082\u79fb\u690d\u3057\u305f\u3044\u3088\u306a\u3041\u3068\u601d\u3044\u306a\u304c\u3089\u3082\u306a\u304b\u306a\u304b\u624b\u304c\u3064\u3051\u3089\u308c\u3066\u3044\u306a\u3044\u3002\n\n# \u304a\u308f\u308a\u306b\n\n\u6b63\u898f\u8868\u73fe\u3082\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u8a00\u8a9e\u540c\u69d8\u3001\u3069\u3093\u306a\u30b3\u30fc\u30c9\u3092\u66f8\u304f\u304b\u306b\u3088\u3063\u3066\u30d1\u30d5\u30a9\u30fc\u30de\u30f3\u30b9\u306f\u96f2\u6ce5\u306e\u5dee\u304c\u751f\u3058\u308b\u3002\n\u3053\u3046\u3044\u3063\u305f\u6700\u9069\u5316\u306e\u30a2\u30d7\u30ed\u30fc\u30c1\u3092\u77e5\u8b58\u3068\u3057\u3066\u77e5\u3063\u3066\u304a\u304f\u3068\u3001\u3088\u308a\u3088\u3044\u6b63\u898f\u8868\u73fe\u304c\u66f8\u3051\u308b\u306e\u3067\u306f\u306a\u304b\u308d\u3046\u304b\u3002\n", "tags": ["Ruby", "\u6b63\u898f\u8868\u73fe"]}