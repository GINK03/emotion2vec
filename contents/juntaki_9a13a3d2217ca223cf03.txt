{"context": "ImageNet\u304b\u3089\u53d6\u5f97\u3057\u305f\u753b\u50cf\u3067\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u3092\u4f5c\u3063\u3066\u3001\u5206\u985e\u3057\u3066\u307f\u305f\u3002\n\u540c\u3058\u30b3\u30fc\u30c9\u3067\u3001\u4f55\u6545\u304b\u3046\u307e\u304f\u884c\u304f\u6642\u3068\u3001\u305d\u3046\u3067\u306a\u3044\u6642\u304c\u3042\u3063\u3066\u539f\u56e0\u306f\u3088\u304f\u308f\u304b\u3089\u306a\u3044\u30021\nnotebook\u306f\u3053\u3061\u3089\uff1ahttps://gist.github.com/juntaki/263d9c43c0509c6610bdf95a59867e99\n\u4ee5\u4e0b\u306f\u30ce\u30fc\u30c8\u306e\u89e3\u8aac\u3067\u3059\u3002\n\n\u30c7\u30fc\u30bf\u306e\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\nImageNet\u3067\u691c\u7d22\u3057\u305fURL\u30ea\u30b9\u30c8\u3092\u9069\u5f53\u306a\u5834\u6240\u306b\u4fdd\u5b58\u3057\u305f\u3089\u3001\u753b\u50cf\u3092\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3059\u308b\u3002\n\u5bb9\u91cf\u304c\u7570\u5e38\u306b\u5c0f\u3055\u3044\u3082\u306e\u3084\u3001\u30c6\u30ad\u30b9\u30c8\u30d5\u30a1\u30a4\u30eb\u306f\u5931\u6557\u3057\u3066\u3044\u308b\u306e\u3067\u6368\u3066\u308b\u3002\ncat ../urllist | xargs wget -T1\n\n\n\u753b\u50cf\u8aad\u307f\u8fbc\u307f\nKeras\u306b\u6e21\u3059\u306b\u306fRGB\u753b\u50cf\u306a\u3089\u3001[3(RGB), 50(\u7e26), 50(\u6a2a)]\u306e\u3088\u3046\u306b\u3059\u308b\u5fc5\u8981\u304c\u3042\u308b\u3002\nImage.open()\u3067\u6765\u305f\u3082\u306e\u306f[50,50,3]\u3068\u306a\u3063\u3066\u3044\u308b\u305f\u3081\u3001transpose()\u3067\u9806\u5e8f\u3092\u5909\u66f4\u3057\u3066\u3044\u308b\u3002\n\u5f15\u6570\u306f\u3001[0,1,2]\u3092[2,0,1]\u306b\u3059\u308b\u3068\u3044\u3046\u610f\u5473\u3002\n    im_reading = np.array( Image.open(i).resize((50,50)))\n    im_reading = im_reading.transpose(2,0,1)\n\n\n\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u4f5c\u6210\n\u3055\u3089\u306b\u3001Keras\u306b\u5165\u529b\u3059\u308b\u306b\u306f\u3001[\u30b5\u30f3\u30d7\u30eb\u30013,50,50(RGB\u753b\u50cf)]\u306enp.array\u306b\u3057\u306a\u3051\u308c\u3070\u306a\u3089\u306a\u3044\u306e\u3067\u3001\n\u7a7a\u306e\u914d\u5217\u306bappend\u3057\u3066\u3044\u304f\u5f62\u3067\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u3092\u4f5c\u6210\u3057\u305f\u3002python\u306earray\u3068\u9055\u3063\u3066\u3001\u6700\u521d\u306b\u884c\u5217\u30b5\u30a4\u30ba\u3092\u5b9a\u7fa9\u3057\u3066\u3084\u308b\u5fc5\u8981\u304c\u3042\u308b\u3002\u307e\u305f\u3001\u753b\u50cf\u306edtype\u306fuint8\u306a\u306e\u3067\u3001unsigned\u3067\u63c3\u3048\u306a\u3044\u3068imshow()\u3067\u3046\u307e\u304f\u753b\u50cf\u3068\u3057\u3066\u8868\u793a\u3067\u304d\u306a\u304f\u306a\u308b\uff08\u5b66\u7fd2\u3060\u3051\u306a\u3089\u652f\u969c\u306f\u306a\u3055\u305d\u3046\u3060\u304c\uff092\u3002\nimage = np.empty((0,3,50,50), dtype=np.uint8)\n...\n    image = np.append(image, [im_reading], axis=0)\n\n\n\u753b\u50cf\u8868\u793a\n\u5165\u308c\u66ff\u3048\u305f\u9806\u5e8f\u3092\u623b\u3059\u3068\u3001\u8868\u793a\u3067\u304d\u308b\u3002\nplt.imshow( image[number].transpose(1,2,0) )\n\n\n\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u5206\u5272\nscikit-learn\u306b\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u3092\u30c8\u30ec\u30fc\u30cb\u30f3\u30b0\u7528\u3068\u30c6\u30b9\u30c8\u7528\u306b\u5206\u5272\u3059\u308b\u95a2\u6570\u304c\u3042\u308b\u3002\n\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u306f\u9806\u756a\u306bappend\u3057\u3066\u3044\u308b\u306e\u3067\u524d\u5f8c\u3067\u7dba\u9e97\u306b\u308f\u304b\u308c\u3066\u3057\u307e\u3063\u3066\u3044\u308b\u304c\u3001\u3053\u306e\u95a2\u6570\u3092\u901a\u305b\u3070\u30e9\u30f3\u30c0\u30e0\u306b\u30d4\u30c3\u30af\u30a2\u30c3\u30d7\u3057\u3066\u5206\u5272\u3057\u3066\u304f\u308c\u308b\u3002\nfrom sklearn.cross_validation import train_test_split\ndata_train, data_test, labels_train, labels_test = train_test_split(image, result, test_size=0.10, random_state=10)\n\n\n\u30e2\u30c7\u30eb\u306e\u5b9a\u7fa9\u3068\u5b66\u7fd2\n\u30e2\u30c7\u30eb\u306e\u4e2d\u8eab\u306f\u30b3\u30f3\u30dc\u30ea\u30e5\u30fc\u30b7\u30e7\u30f3\u5c64\u3068Maxpooling\u3092\u9069\u5f53\u306b\u91cd\u306d\u3066\u307f\u305f\u3082\u306e\u3002\nmodel = Sequential()\nmodel.add(Convolution2D(96, 3, 3, border_mode=\"same\", activation=\"relu\" ,input_shape=(3, 50, 50) ))\nmodel.add(Convolution2D(96, 3, 3, border_mode=\"same\", activation=\"relu\"))\nmodel.add(MaxPooling2D(pool_size=(2,2)))\nmodel.add(Convolution2D(96, 3, 3, border_mode=\"same\", activation=\"relu\"))\nmodel.add(Convolution2D(96, 3, 3, border_mode=\"same\", activation=\"relu\"))\nmodel.add(MaxPooling2D(pool_size=(2,2)))\nmodel.add(Convolution2D(96, 3, 3, border_mode=\"same\", activation=\"relu\"))\nmodel.add(Convolution2D(96, 3, 3, border_mode=\"same\", activation=\"relu\"))\nmodel.add(MaxPooling2D(pool_size=(2,2)))\nmodel.add(Dropout(0.5))\n\nmodel.add(Flatten())\nmodel.add(Dense(512))\nmodel.add(Activation(\"relu\"))\nmodel.add(Dense(10))\nmodel.add(Activation(\"relu\"))\nmodel.add(Dense(2))\nmodel.add(Activation(\"sigmoid\"))\n#model.summary()\nmodel.compile(loss='binary_crossentropy', optimizer=\"adadelta\", metrics=['accuracy'])\n\n\n\u7d50\u679c\n2\u30af\u30e9\u30b9\u306e\u5358\u7d14\u306a\u5206\u985e\u3060\u304c\u3001\u9069\u5f53\u306b\u9078\u3093\u3060\u30e9\u30d9\u30eb\u4ed8\u304d\u753b\u50cf\u3092\u8aad\u307f\u8fbc\u3093\u3067\u300190\uff05\u306e\u7cbe\u5ea6\u3092\u51fa\u305b\u305f\u3002\n\n\n\n\nKeras\u306e\u30d0\u30b0\uff1f\u00a0\u21a9\n\n\n\u8aad\u307f\u8fbc\u307f\u306b\u3084\u305f\u3089\u3068\u6642\u9593\u304c\u304b\u304b\u308b\u306e\u3067\u3001\u3082\u3063\u3068\u826f\u3044\u3084\u308a\u65b9\u304c\u3042\u308b\u306f\u305a\u3002\u683c\u7d0d\u306e\u305f\u3073\u306b\u30e1\u30e2\u30ea\u30b3\u30d4\u30fc\u304c\u767a\u751f\u3057\u3066\u3057\u307e\u3063\u3066\u3044\u308b\u304b\u3082\u3001\u672a\u78ba\u8a8d\u3002\u00a0\u21a9\n\n\n\n[ImageNet](http://www.image-net.org/)\u304b\u3089\u53d6\u5f97\u3057\u305f\u753b\u50cf\u3067\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u3092\u4f5c\u3063\u3066\u3001\u5206\u985e\u3057\u3066\u307f\u305f\u3002\n\n\u540c\u3058\u30b3\u30fc\u30c9\u3067\u3001\u4f55\u6545\u304b\u3046\u307e\u304f\u884c\u304f\u6642\u3068\u3001\u305d\u3046\u3067\u306a\u3044\u6642\u304c\u3042\u3063\u3066\u539f\u56e0\u306f\u3088\u304f\u308f\u304b\u3089\u306a\u3044\u3002[^1]\nnotebook\u306f\u3053\u3061\u3089\uff1ahttps://gist.github.com/juntaki/263d9c43c0509c6610bdf95a59867e99\n[^1]: Keras\u306e\u30d0\u30b0\uff1f\n\u4ee5\u4e0b\u306f\u30ce\u30fc\u30c8\u306e\u89e3\u8aac\u3067\u3059\u3002\n\n## \u30c7\u30fc\u30bf\u306e\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\n\nImageNet\u3067\u691c\u7d22\u3057\u305fURL\u30ea\u30b9\u30c8\u3092\u9069\u5f53\u306a\u5834\u6240\u306b\u4fdd\u5b58\u3057\u305f\u3089\u3001\u753b\u50cf\u3092\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3059\u308b\u3002\n\u5bb9\u91cf\u304c\u7570\u5e38\u306b\u5c0f\u3055\u3044\u3082\u306e\u3084\u3001\u30c6\u30ad\u30b9\u30c8\u30d5\u30a1\u30a4\u30eb\u306f\u5931\u6557\u3057\u3066\u3044\u308b\u306e\u3067\u6368\u3066\u308b\u3002\n\n~~~\ncat ../urllist | xargs wget -T1\n~~~\n\n## \u753b\u50cf\u8aad\u307f\u8fbc\u307f\n\nKeras\u306b\u6e21\u3059\u306b\u306fRGB\u753b\u50cf\u306a\u3089\u3001[3(RGB), 50(\u7e26), 50(\u6a2a)]\u306e\u3088\u3046\u306b\u3059\u308b\u5fc5\u8981\u304c\u3042\u308b\u3002\nImage.open()\u3067\u6765\u305f\u3082\u306e\u306f[50,50,3]\u3068\u306a\u3063\u3066\u3044\u308b\u305f\u3081\u3001transpose()\u3067\u9806\u5e8f\u3092\u5909\u66f4\u3057\u3066\u3044\u308b\u3002\n\u5f15\u6570\u306f\u3001[0,1,2]\u3092[2,0,1]\u306b\u3059\u308b\u3068\u3044\u3046\u610f\u5473\u3002\n\n~~~\n    im_reading = np.array( Image.open(i).resize((50,50)))\n    im_reading = im_reading.transpose(2,0,1)\n~~~\n\n## \u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u4f5c\u6210\n\n\u3055\u3089\u306b\u3001Keras\u306b\u5165\u529b\u3059\u308b\u306b\u306f\u3001[\u30b5\u30f3\u30d7\u30eb\u30013,50,50(RGB\u753b\u50cf)]\u306enp.array\u306b\u3057\u306a\u3051\u308c\u3070\u306a\u3089\u306a\u3044\u306e\u3067\u3001\n\u7a7a\u306e\u914d\u5217\u306bappend\u3057\u3066\u3044\u304f\u5f62\u3067\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u3092\u4f5c\u6210\u3057\u305f\u3002python\u306earray\u3068\u9055\u3063\u3066\u3001\u6700\u521d\u306b\u884c\u5217\u30b5\u30a4\u30ba\u3092\u5b9a\u7fa9\u3057\u3066\u3084\u308b\u5fc5\u8981\u304c\u3042\u308b\u3002\u307e\u305f\u3001\u753b\u50cf\u306edtype\u306fuint8\u306a\u306e\u3067\u3001unsigned\u3067\u63c3\u3048\u306a\u3044\u3068imshow()\u3067\u3046\u307e\u304f\u753b\u50cf\u3068\u3057\u3066\u8868\u793a\u3067\u304d\u306a\u304f\u306a\u308b\uff08\u5b66\u7fd2\u3060\u3051\u306a\u3089\u652f\u969c\u306f\u306a\u3055\u305d\u3046\u3060\u304c\uff09[^2]\u3002\n\n[^2]: \u8aad\u307f\u8fbc\u307f\u306b\u3084\u305f\u3089\u3068\u6642\u9593\u304c\u304b\u304b\u308b\u306e\u3067\u3001\u3082\u3063\u3068\u826f\u3044\u3084\u308a\u65b9\u304c\u3042\u308b\u306f\u305a\u3002\u683c\u7d0d\u306e\u305f\u3073\u306b\u30e1\u30e2\u30ea\u30b3\u30d4\u30fc\u304c\u767a\u751f\u3057\u3066\u3057\u307e\u3063\u3066\u3044\u308b\u304b\u3082\u3001\u672a\u78ba\u8a8d\u3002\n\n~~~\nimage = np.empty((0,3,50,50), dtype=np.uint8)\n...\n    image = np.append(image, [im_reading], axis=0)\n~~~\n\n## \u753b\u50cf\u8868\u793a\n\n\u5165\u308c\u66ff\u3048\u305f\u9806\u5e8f\u3092\u623b\u3059\u3068\u3001\u8868\u793a\u3067\u304d\u308b\u3002\n\n~~~\nplt.imshow( image[number].transpose(1,2,0) )\n~~~\n\n## \u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u5206\u5272\n\nscikit-learn\u306b\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u3092\u30c8\u30ec\u30fc\u30cb\u30f3\u30b0\u7528\u3068\u30c6\u30b9\u30c8\u7528\u306b\u5206\u5272\u3059\u308b\u95a2\u6570\u304c\u3042\u308b\u3002\n\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u306f\u9806\u756a\u306bappend\u3057\u3066\u3044\u308b\u306e\u3067\u524d\u5f8c\u3067\u7dba\u9e97\u306b\u308f\u304b\u308c\u3066\u3057\u307e\u3063\u3066\u3044\u308b\u304c\u3001\u3053\u306e\u95a2\u6570\u3092\u901a\u305b\u3070\u30e9\u30f3\u30c0\u30e0\u306b\u30d4\u30c3\u30af\u30a2\u30c3\u30d7\u3057\u3066\u5206\u5272\u3057\u3066\u304f\u308c\u308b\u3002\n\n~~~\nfrom sklearn.cross_validation import train_test_split\ndata_train, data_test, labels_train, labels_test = train_test_split(image, result, test_size=0.10, random_state=10)\n~~~\n\n## \u30e2\u30c7\u30eb\u306e\u5b9a\u7fa9\u3068\u5b66\u7fd2\n\n\u30e2\u30c7\u30eb\u306e\u4e2d\u8eab\u306f\u30b3\u30f3\u30dc\u30ea\u30e5\u30fc\u30b7\u30e7\u30f3\u5c64\u3068Maxpooling\u3092\u9069\u5f53\u306b\u91cd\u306d\u3066\u307f\u305f\u3082\u306e\u3002\n\n~~~\nmodel = Sequential()\nmodel.add(Convolution2D(96, 3, 3, border_mode=\"same\", activation=\"relu\" ,input_shape=(3, 50, 50) ))\nmodel.add(Convolution2D(96, 3, 3, border_mode=\"same\", activation=\"relu\"))\nmodel.add(MaxPooling2D(pool_size=(2,2)))\nmodel.add(Convolution2D(96, 3, 3, border_mode=\"same\", activation=\"relu\"))\nmodel.add(Convolution2D(96, 3, 3, border_mode=\"same\", activation=\"relu\"))\nmodel.add(MaxPooling2D(pool_size=(2,2)))\nmodel.add(Convolution2D(96, 3, 3, border_mode=\"same\", activation=\"relu\"))\nmodel.add(Convolution2D(96, 3, 3, border_mode=\"same\", activation=\"relu\"))\nmodel.add(MaxPooling2D(pool_size=(2,2)))\nmodel.add(Dropout(0.5))\n\nmodel.add(Flatten())\nmodel.add(Dense(512))\nmodel.add(Activation(\"relu\"))\nmodel.add(Dense(10))\nmodel.add(Activation(\"relu\"))\nmodel.add(Dense(2))\nmodel.add(Activation(\"sigmoid\"))\n#model.summary()\nmodel.compile(loss='binary_crossentropy', optimizer=\"adadelta\", metrics=['accuracy'])\n~~~\n\n## \u7d50\u679c\n\n2\u30af\u30e9\u30b9\u306e\u5358\u7d14\u306a\u5206\u985e\u3060\u304c\u3001\u9069\u5f53\u306b\u9078\u3093\u3060\u30e9\u30d9\u30eb\u4ed8\u304d\u753b\u50cf\u3092\u8aad\u307f\u8fbc\u3093\u3067\u300190\uff05\u306e\u7cbe\u5ea6\u3092\u51fa\u305b\u305f\u3002\n", "tags": ["\u6a5f\u68b0\u5b66\u7fd2", "MachineLearning", "Python", "\u753b\u50cf\u51e6\u7406", "Keras"]}