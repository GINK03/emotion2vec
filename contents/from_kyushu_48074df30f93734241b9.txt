{"tags": ["Ruby", "\u3069\u3046\u66f8\u304f", "yhpg"], "context": "\u6a2a\u6d5c\u3078\u306a\u3061\u3087\u3053\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u52c9\u5f37\u4f1a\u306b\u3066\u904e\u53bb\u306b\u51fa\u984c\u3055\u308c\u305f\u4e0a\u3068\u5de6\u306e\u5408\u8a08\u3092\u89e3\u3044\u3066\u307f\u305f\u3002\n\u56de\u7b54\u306b\u304b\u304b\u3063\u305f\u6642\u9593\u306f80\u5206\u7a0b\u5ea6\u3002\n\u5b9f\u88c5\u306f\u6050\u3089\u304f\u51fa\u984c\u8005\u306e\u65b9\u304c\u60f3\u5b9a\u3057\u3066\u3044\u305f\u901a\u308a\u306e\u30e1\u30e2\u5316\u4ed8\u304d\u518d\u5e30\u3067\u5b9f\u88c5\u3057\u3066\u3044\u308b\u3002\n\u521d\u3081\u306f\u30e1\u30e2\u5316\u305b\u305a\u306b\u5358\u7d14\u306a\u518d\u5e30\u3067\u5b9f\u88c5\u3057\u3066\u3044\u3066\uff08\u3053\u306e\u6642\u70b960\u5206\u7a0b\u5ea6\u7d4c\u904e\uff09\u3060\u3063\u305f\u306e\u3060\u304c\u3001\u30c6\u30b9\u30c8\u4e2d\u306b\u7d50\u679c\u304c\u8fd4\u3063\u3066\u3053\u306a\u3044\u306e\u304c\u8a08\u7b97\u56de\u6570\u304c\u81a8\u5927\u306b\u306a\u3063\u3066\u3044\u308b\u3068\u8003\u3048\u305a\u306bBox#upper_box\u304bBox#lefter_box\u306b\u30d0\u30b0\u304c\u3042\u3063\u3066\u7121\u9650\u30eb\u30fc\u30d7\u3057\u3066\u3044\u308b\u306e\u304b\u3001\u3068\u8003\u3048\u3066\u3057\u307e\u3063\u305f\u3002\n10\u5206\u3050\u3089\u3044\u60aa\u6226\u82e6\u95d8\u3057\u305f\u5f8c\u306b\u8a08\u7b97\u56de\u6570\u304c\u81a8\u5927\u306b\u306a\u3063\u3066\u3044\u308b\u3053\u3068\u306b\u6c17\u4ed8\u304d\u3001\u30e1\u30e2\u5316\u3092\u53d6\u308a\u5165\u308c\u3066\u4e8b\u306a\u304d\u3092\u5f97\u305f\u3002\nclass Box\n  def initialize input\n    wh, axis = input.split \":\"\n    @width, @height = wh.split(\"x\").map &:to_i\n    @axis = axis.nil? ? [] : axis.split(\",\").map{|s| s.chars.map &:to_i}\n    @box_number = Array.new(@width){Array.new(@height){nil}}\n  end\n\n  def box_number left, top, width, height\n    \"%02d\" % (calc_box_number(left, top, width, height) % 100)\n  end\n\n  def right_bottom_box_number\n    box_number(*right_bottom_box)\n  end\n\n  private\n  def calc_box_number left, top, width, height\n    if @box_number[left][top].nil?\n      upper = upper_box(left, top, width, height).map{|up| box_number(*up).to_i}.inject(0, &:+)\n      lefter = lefter_box(left, top, width, height).map{|le| box_number(*le).to_i}.inject(0, &:+)\n      @box_number[left][top] = (upper.zero? and lefter.zero?) ? 1 : upper + lefter\n    end\n    @box_number[left][top]\n  end\n\n  def right_bottom_box\n    search_box(@width - 1, @height - 1)\n  end\n\n  def upper_box left, top, width, height\n    (left..(left + width - 1)).map{|l|\n      search_box(l, top - 1)\n    }.compact.reject{|(l, t, w, h)|\n      l < 0 or t < 0\n    }.uniq\n  end\n\n  def lefter_box left, top, width, height\n    (top..(top + height - 1)).map{|t|\n      search_box(left - 1, t)\n    }.compact.reject{|(l, t, w, h)|\n      l < 0 or t < 0\n    }.uniq\n  end\n\n  def search_box left, top\n    @axis.select{|(l, t, w, h)|\n      (l <= left and (l + w - 1) >= left) and (t <= top and (t + h - 1) >= top)\n    }.first || [left, top, 1, 1]\n  end\nend\n\ntest = <<_TEST\n/*0*/ test( \"8x6:6214,3024,5213,5022,0223,7115\", \"32\" );    \n/*1*/ test( \"1x1:\", \"01\" );    \n/*2*/ test( \"2x3:\", \"03\" );    \n/*3*/ test( \"9x7:\", \"03\" );    \n/*4*/ test( \"2x3:0021\", \"03\" );    \n/*5*/ test( \"2x3:1012\", \"03\" );    \n/*6*/ test( \"2x3:0022\", \"02\" );    \n/*7*/ test( \"9x9:1177\", \"98\" );    \n/*8*/ test( \"7x7:2354\", \"02\" );    \n/*9*/ test( \"3x6:1121,0333\", \"12\" );    \n/*10*/ test( \"8x1:4031,0031\", \"01\" );    \n/*11*/ test( \"8x2:3141,5031\", \"07\" );    \n/*12*/ test( \"1x6:0213,0012\", \"01\" );    \n/*13*/ test( \"3x3:1221,0021,0131\", \"04\" );    \n/*14*/ test( \"9x2:1042,8012,6012\", \"18\" );    \n/*15*/ test( \"3x6:0024,0432,2013\", \"03\" );    \n/*16*/ test( \"4x3:1131,0221,2021\", \"10\" );    \n/*17*/ test( \"8x4:3252,2121,6021\", \"48\" );    \n/*18*/ test( \"3x3:2112,0022,0221\", \"03\" );    \n/*19*/ test( \"9x9:1019,3019,5019,7019\", \"25\" );    \n/*20*/ test( \"4x3:3112,0013,1122,2021\", \"04\" );    \n/*21*/ test( \"4x8:1513,2028,0025,0612\", \"04\" );    \n/*22*/ test( \"9x6:2262,5432,8014,3151\", \"39\" );    \n/*23*/ test( \"5x2:2012,3121,3021,0121\", \"06\" );    \n/*24*/ test( \"3x4:1321,1121,1221,0012\", \"05\" );    \n/*25*/ test( \"5x3:0112,1122,4013,0041\", \"09\" );    \n/*26*/ test( \"8x7:3552,3451,5031,0162\", \"95\" );    \n/*27*/ test( \"9x9:2234,8412,0792,6421,1681\", \"52\" );    \n/*28*/ test( \"4x7:0532,1012,3014,3512,2213\", \"60\" );    \n/*29*/ test( \"8x5:4342,3033,0033,6122,1332\", \"08\" );    \n/*30*/ test( \"6x7:1431,3331,1621,2531,4621\", \"36\" );    \n/*31*/ test( \"4x9:1324,3116,0013,2722,2013,0712\", \"67\" );    \n/*32*/ test( \"7x6:3241,4531,1412,0214,3012,5321\", \"54\" );    \n/*33*/ test( \"2x9:1412,0021,0117,0821,1113,1612\", \"05\" );    \n/*34*/ test( \"9x9:2544,6034,1342,6524,0523,4022\", \"99\" );    \n/*35*/ test( \"5x6:0422,4113,2022,2313,4412,2221\", \"20\" );    \n/*36*/ test( \"7x4:6212,0012,6012,2331,3023,0321\", \"10\" );    \n/*37*/ test( \"4x4:3012,1321,2221,0212,0012,1022\", \"11\" );    \n/*38*/ test( \"5x7:1132,1332,0312,4013,0641,4512\", \"77\" );    \n/*39*/ test( \"5x5:0341,3221,3421,0221,1421,0151,1041\", \"54\" );    \n/*40*/ test( \"9x9:6224,5642,0643,0333,3422,1033,4122\", \"36\" );    \n/*41*/ test( \"6x8:0055,1642,5513,0531,5013,5312,0612\", \"12\" );    \n/*42*/ test( \"9x9:4232,1465,7326,3042,1123,7122,0514,7021\", \"34\" );    \n/*43*/ test( \"8x9:0361,5732,6413,0431,7313,1722,2141,3524,7112\", \"22\" );    \n/*44*/ test( \"8x6:6422,1053,6122,1422,3333,6021,0412,0013,6321\", \"22\" );    \n/*45*/ test( \"9x9:3324,5217,8116,2312,7314,6414,3061,7721,1231,1514,3712\", \"17\" );    \n/*46*/ test( \"9x9:7424,4423,0227,3722,4053,2324,5722,2013,7821,6321,2712,6512\", \"39\" );    \n/*47*/ test( \"8x7:5422,6022,2262,1522,3422,0122,0322,2032,6621,4621,0512,7412,5012\", \"06\" );\n_TEST\n\nrequire 'minitest/autorun'\n\ndescribe 'Box' do\n  test.split(\"\\n\").each do |line|\n    t, n, input, expect = line.match(/^\\/\\*(\\d+)\\*\\/\\s*test\\(\\s*\"([^\"]+)\",\\s*\"([^\"]+)\"\\s*\\);\\s*$/).to_a\n    box = Box.new input\n    it input do\n      assert_equal expect, box.right_bottom_box_number\n    end\n  end\nend\n\n\n[\u6a2a\u6d5c\u3078\u306a\u3061\u3087\u3053\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u52c9\u5f37\u4f1a](https://yhpg.doorkeeper.jp/)\u306b\u3066\u904e\u53bb\u306b\u51fa\u984c\u3055\u308c\u305f[\u4e0a\u3068\u5de6\u306e\u5408\u8a08](http://nabetani.sakura.ne.jp/hena/ord22irrpas/)\u3092\u89e3\u3044\u3066\u307f\u305f\u3002\n\u56de\u7b54\u306b\u304b\u304b\u3063\u305f\u6642\u9593\u306f80\u5206\u7a0b\u5ea6\u3002\n\n\u5b9f\u88c5\u306f\u6050\u3089\u304f\u51fa\u984c\u8005\u306e\u65b9\u304c\u60f3\u5b9a\u3057\u3066\u3044\u305f\u901a\u308a\u306e\u30e1\u30e2\u5316\u4ed8\u304d\u518d\u5e30\u3067\u5b9f\u88c5\u3057\u3066\u3044\u308b\u3002\n\u521d\u3081\u306f\u30e1\u30e2\u5316\u305b\u305a\u306b\u5358\u7d14\u306a\u518d\u5e30\u3067\u5b9f\u88c5\u3057\u3066\u3044\u3066\uff08\u3053\u306e\u6642\u70b960\u5206\u7a0b\u5ea6\u7d4c\u904e\uff09\u3060\u3063\u305f\u306e\u3060\u304c\u3001\u30c6\u30b9\u30c8\u4e2d\u306b\u7d50\u679c\u304c\u8fd4\u3063\u3066\u3053\u306a\u3044\u306e\u304c\u8a08\u7b97\u56de\u6570\u304c\u81a8\u5927\u306b\u306a\u3063\u3066\u3044\u308b\u3068\u8003\u3048\u305a\u306b`Box#upper_box`\u304b`Box#lefter_box`\u306b\u30d0\u30b0\u304c\u3042\u3063\u3066\u7121\u9650\u30eb\u30fc\u30d7\u3057\u3066\u3044\u308b\u306e\u304b\u3001\u3068\u8003\u3048\u3066\u3057\u307e\u3063\u305f\u3002\n10\u5206\u3050\u3089\u3044\u60aa\u6226\u82e6\u95d8\u3057\u305f\u5f8c\u306b\u8a08\u7b97\u56de\u6570\u304c\u81a8\u5927\u306b\u306a\u3063\u3066\u3044\u308b\u3053\u3068\u306b\u6c17\u4ed8\u304d\u3001\u30e1\u30e2\u5316\u3092\u53d6\u308a\u5165\u308c\u3066\u4e8b\u306a\u304d\u3092\u5f97\u305f\u3002\n\n```ruby\nclass Box\n  def initialize input\n    wh, axis = input.split \":\"\n    @width, @height = wh.split(\"x\").map &:to_i\n    @axis = axis.nil? ? [] : axis.split(\",\").map{|s| s.chars.map &:to_i}\n    @box_number = Array.new(@width){Array.new(@height){nil}}\n  end\n\n  def box_number left, top, width, height\n    \"%02d\" % (calc_box_number(left, top, width, height) % 100)\n  end\n\n  def right_bottom_box_number\n    box_number(*right_bottom_box)\n  end\n\n  private\n  def calc_box_number left, top, width, height\n    if @box_number[left][top].nil?\n      upper = upper_box(left, top, width, height).map{|up| box_number(*up).to_i}.inject(0, &:+)\n      lefter = lefter_box(left, top, width, height).map{|le| box_number(*le).to_i}.inject(0, &:+)\n      @box_number[left][top] = (upper.zero? and lefter.zero?) ? 1 : upper + lefter\n    end\n    @box_number[left][top]\n  end\n\n  def right_bottom_box\n    search_box(@width - 1, @height - 1)\n  end\n\n  def upper_box left, top, width, height\n    (left..(left + width - 1)).map{|l|\n      search_box(l, top - 1)\n    }.compact.reject{|(l, t, w, h)|\n      l < 0 or t < 0\n    }.uniq\n  end\n\n  def lefter_box left, top, width, height\n    (top..(top + height - 1)).map{|t|\n      search_box(left - 1, t)\n    }.compact.reject{|(l, t, w, h)|\n      l < 0 or t < 0\n    }.uniq\n  end\n\n  def search_box left, top\n    @axis.select{|(l, t, w, h)|\n      (l <= left and (l + w - 1) >= left) and (t <= top and (t + h - 1) >= top)\n    }.first || [left, top, 1, 1]\n  end\nend\n\ntest = <<_TEST\n/*0*/ test( \"8x6:6214,3024,5213,5022,0223,7115\", \"32\" );    \n/*1*/ test( \"1x1:\", \"01\" );    \n/*2*/ test( \"2x3:\", \"03\" );    \n/*3*/ test( \"9x7:\", \"03\" );    \n/*4*/ test( \"2x3:0021\", \"03\" );    \n/*5*/ test( \"2x3:1012\", \"03\" );    \n/*6*/ test( \"2x3:0022\", \"02\" );    \n/*7*/ test( \"9x9:1177\", \"98\" );    \n/*8*/ test( \"7x7:2354\", \"02\" );    \n/*9*/ test( \"3x6:1121,0333\", \"12\" );    \n/*10*/ test( \"8x1:4031,0031\", \"01\" );    \n/*11*/ test( \"8x2:3141,5031\", \"07\" );    \n/*12*/ test( \"1x6:0213,0012\", \"01\" );    \n/*13*/ test( \"3x3:1221,0021,0131\", \"04\" );    \n/*14*/ test( \"9x2:1042,8012,6012\", \"18\" );    \n/*15*/ test( \"3x6:0024,0432,2013\", \"03\" );    \n/*16*/ test( \"4x3:1131,0221,2021\", \"10\" );    \n/*17*/ test( \"8x4:3252,2121,6021\", \"48\" );    \n/*18*/ test( \"3x3:2112,0022,0221\", \"03\" );    \n/*19*/ test( \"9x9:1019,3019,5019,7019\", \"25\" );    \n/*20*/ test( \"4x3:3112,0013,1122,2021\", \"04\" );    \n/*21*/ test( \"4x8:1513,2028,0025,0612\", \"04\" );    \n/*22*/ test( \"9x6:2262,5432,8014,3151\", \"39\" );    \n/*23*/ test( \"5x2:2012,3121,3021,0121\", \"06\" );    \n/*24*/ test( \"3x4:1321,1121,1221,0012\", \"05\" );    \n/*25*/ test( \"5x3:0112,1122,4013,0041\", \"09\" );    \n/*26*/ test( \"8x7:3552,3451,5031,0162\", \"95\" );    \n/*27*/ test( \"9x9:2234,8412,0792,6421,1681\", \"52\" );    \n/*28*/ test( \"4x7:0532,1012,3014,3512,2213\", \"60\" );    \n/*29*/ test( \"8x5:4342,3033,0033,6122,1332\", \"08\" );    \n/*30*/ test( \"6x7:1431,3331,1621,2531,4621\", \"36\" );    \n/*31*/ test( \"4x9:1324,3116,0013,2722,2013,0712\", \"67\" );    \n/*32*/ test( \"7x6:3241,4531,1412,0214,3012,5321\", \"54\" );    \n/*33*/ test( \"2x9:1412,0021,0117,0821,1113,1612\", \"05\" );    \n/*34*/ test( \"9x9:2544,6034,1342,6524,0523,4022\", \"99\" );    \n/*35*/ test( \"5x6:0422,4113,2022,2313,4412,2221\", \"20\" );    \n/*36*/ test( \"7x4:6212,0012,6012,2331,3023,0321\", \"10\" );    \n/*37*/ test( \"4x4:3012,1321,2221,0212,0012,1022\", \"11\" );    \n/*38*/ test( \"5x7:1132,1332,0312,4013,0641,4512\", \"77\" );    \n/*39*/ test( \"5x5:0341,3221,3421,0221,1421,0151,1041\", \"54\" );    \n/*40*/ test( \"9x9:6224,5642,0643,0333,3422,1033,4122\", \"36\" );    \n/*41*/ test( \"6x8:0055,1642,5513,0531,5013,5312,0612\", \"12\" );    \n/*42*/ test( \"9x9:4232,1465,7326,3042,1123,7122,0514,7021\", \"34\" );    \n/*43*/ test( \"8x9:0361,5732,6413,0431,7313,1722,2141,3524,7112\", \"22\" );    \n/*44*/ test( \"8x6:6422,1053,6122,1422,3333,6021,0412,0013,6321\", \"22\" );    \n/*45*/ test( \"9x9:3324,5217,8116,2312,7314,6414,3061,7721,1231,1514,3712\", \"17\" );    \n/*46*/ test( \"9x9:7424,4423,0227,3722,4053,2324,5722,2013,7821,6321,2712,6512\", \"39\" );    \n/*47*/ test( \"8x7:5422,6022,2262,1522,3422,0122,0322,2032,6621,4621,0512,7412,5012\", \"06\" );\n_TEST\n\nrequire 'minitest/autorun'\n\ndescribe 'Box' do\n  test.split(\"\\n\").each do |line|\n    t, n, input, expect = line.match(/^\\/\\*(\\d+)\\*\\/\\s*test\\(\\s*\"([^\"]+)\",\\s*\"([^\"]+)\"\\s*\\);\\s*$/).to_a\n    box = Box.new input\n    it input do\n      assert_equal expect, box.right_bottom_box_number\n    end\n  end\nend\n```\n"}