{"context": "\n\n\u7d4c\u7def\n\nQiita\u306e\u3088\u3046\u306aOAuth\u8a8d\u8a3c\u3092\u5b9f\u88c5\u3057\u3088\u3046\u3068\u8a66\u307f\u305f\u3002\n\u30b0\u30b0\u3063\u3066\u307f\u308b\u3068\u3001\u30e6\u30fc\u30b6\u30fc\u3092\u30ed\u30b0\u30a4\u30f3\u3055\u305b\u305f\u5f8c\u3069\u3046\u3059\u308b\u304b\u306b\u3064\u3044\u3066\u8a00\u53ca\u3055\u308c\u3066\u3044\u306a\u3044\u3082\u306e\u304c\u591a\u304b\u3063\u305f\u3002\n\u3044\u308d\u3093\u306a\u8a18\u4e8b\u304b\u3089\u30a2\u30a4\u30c7\u30a2\u3092\u5438\u53ce\u3057\u3066\u8a66\u884c\u932f\u8aa4\u3057\u305f\u7d50\u679c\u3001\u81ea\u5206\u306e\u601d\u3044\u901a\u308a\u306e\u4ed5\u69d8\u306b\u4ed5\u4e0a\u304c\u3063\u305f\u306e\u3067\u4eca\u5f8c\u306e\u305f\u3081\u306b\u30e1\u30e2\u3002\n\n\u30b9\u30bf\u30fc\u30c8\u306e\u6642\u70b9\u3067\u3053\u308c\u3089\u306e\u8a18\u4e8b\u304c\u975e\u5e38\u306b\u53c2\u8003\u306b\u306a\u3063\u305f\u3002\n- Rails\u3067\u3044\u308d\u3093\u306aSNS\u3068OAuth\u9023\u643a/\u30ed\u30b0\u30a4\u30f3\u3059\u308b\u65b9\u6cd5\n- Rails4 \u3067 Devise \u3068 OmniAuth \u3067\u3001Twitter/Facebook \u306eOAuth\u8a8d\u8a3c\u3068\u901a\u5e38\u30d5\u30a9\u30fc\u30e0\u3067\u306e\u8a8d\u8a3c\u3092\u4f75\u7528\u3057\u3066\u5b9f\u88c5\n\n\u3084\u308a\u305f\u3044\u3053\u3068\n\nDevise\u8a8d\u8a3c\u4ed8Rails\u30a2\u30d7\u30ea\u306b\u3001OmniAuth\u3092\u8ffd\u52a0\u3057\u5404\u30e6\u30fc\u30b6\u30fc\u3092\u8907\u6570\u306e\u30d7\u30ed\u30d0\u30a4\u30c0\u3067\u8a8d\u8a3c\u3067\u304d\u308b\u69d8\u306b\u3057\u305f\u3044\u3002\uff08\u30e6\u30fc\u30b6\u30fc\u3068\u5168\u3066\u306e\u30d7\u30ed\u30d0\u30a4\u30c0\u30fc\u3092\u7d10\u4ed8\u3051\u3059\u308b\uff09\nQiita\u306e\u4ed5\u69d8\u3092\u76ee\u6a19\u3068\u3059\u308b\u3002\n\u30d7\u30ed\u30d0\u30a4\u30c0\u30fc\u3092\u5897\u3084\u305b\u308b\u3088\u3046\u306b\u62e1\u5f35\u6027\u3092\u6301\u305f\u305b\u308b\u3002\n\n\n\n\n\n\n\u65b0\u898f\u767b\u9332\uff08\uff13\u30d1\u30bf\u30fc\u30f3\uff09\n\n\u30e6\u30fc\u30b6\u30fc\u540d\u3001email\u3001\u30d1\u30b9\u30ef\u30fc\u30c9\u3092\u5165\u529b\u3057\u3001\u8a8d\u8a3c\u3002\nFacebook\u3067\u8a8d\u8a3c\u3002\nTwitter\u3067\u8a8d\u8a3c\u3002\n\n\nOAuth\u8a8d\u8a3c\u6642\u306e\u30e6\u30fc\u30b6\u30fc\u306e\u72b6\u6cc1\uff08\uff13\u30d1\u30bf\u30fc\u30f3\uff09\n\n\u65b0\u898f\u30e6\u30fc\u30b6\u30fc\u306e\u5834\u5408\u3001\u65b0\u898f\u30e6\u30fc\u30b6\u30fc\u30a2\u30ab\u30a6\u30f3\u30c8\u3092\u4f5c\u6210\u3002\n\u30e6\u30fc\u30b6\u30fc\u304c\u30ed\u30b0\u30a4\u30f3\u6e08\u307f\u306e\u5834\u5408\u3001\u8a8d\u8a3c\u3055\u308c\u305f\u30d7\u30ed\u30d0\u30a4\u30c0\u3067\u4eca\u5f8c\u30ed\u30b0\u30a4\u30f3\u306b\u4f7f\u7528\u3067\u304d\u308b\u3088\u3046\u306b\u3059\u308b\u3002\n\u4ee5\u524dOAuth\u8a8d\u8a3c\u3057\u305f\u3053\u3068\u306e\u3042\u308b\u30e6\u30fc\u30b6\u30fc\u304c\u30ed\u30b0\u30a4\u30f3\u3057\u3066\u3044\u306a\u3044\u5834\u5408\u3001\u8a8d\u8a3c\u30c7\u30fc\u30bf\u306b\u57fa\u3065\u304d\u30e6\u30fc\u30b6\u30fc\u30a2\u30ab\u30a6\u30f3\u30c8\u3092\u30af\u30a8\u30ea\u3057\u3001\u30ed\u30b0\u30a4\u30f3\u3055\u305b\u308b\u3002\n\n\nemail\u78ba\u8a8d\n\n\u3069\u306e\u30d1\u30bf\u30fc\u30f3\u3067\u65b0\u898f\u767b\u9332\u3057\u3066\u3082\u3001\u5fc5\u305aemail\u3092\u5b9f\u969b\u306b\u9001\u4fe1\u3057\u3066\u78ba\u8a8d\u3059\u308b\u3002\n\u78ba\u8a8demail\u306e\u30ea\u30f3\u30af\u3092\u30af\u30ea\u30c3\u30af\u3059\u308b\u3068\u5373\u30ed\u30b0\u30a4\u30f3\u3055\u308c\u308b\u3002\nemail\u3092\u5909\u66f4\u3059\u308b\u5834\u5408\u3082\u3001\u6bce\u56deemail\u3092\u5b9f\u969b\u306b\u9001\u4fe1\u3057\u3066\u78ba\u8a8d\u3059\u308b\u3002\n\n\n\u30e6\u30fc\u30b6\u30fc\u3068\u30d7\u30ed\u30d0\u30a4\u30c0\u30fc\u3068\u306e\u7d10\u4ed8\u3051\n\n\u30ed\u30b0\u30a4\u30f3\u4e2d\u306e\u30e6\u30fc\u30b6\u30fc\u304c\u3001\u30d7\u30ed\u30d5\u30a3\u30fc\u30eb\u30da\u30fc\u30b8\u306b\u3042\u308b\u5404\u30d7\u30ed\u30d0\u30a4\u30c0\u30fc\u3078\u306e\u30ea\u30f3\u30af\u30dc\u30bf\u30f3\u3092\u62bc\u3057\u3001OmniAuth\u306e\u8a8d\u8a3c\u3092\u30af\u30ea\u30a2\u3059\u308c\u3070\u3001\u305d\u306e\u30d7\u30ed\u30d0\u30a4\u30c0\u30fc\u304c\u7d10\u4ed8\u3051\u3055\u308c\u308b\u3002\u6b21\u56de\u30ed\u30b0\u30a4\u30f3\u6642\u306b\u7d10\u4ed8\u3051\u3055\u308c\u305f\u30d7\u30ed\u30d0\u30a4\u30c0\u30fc\u304c\u5229\u7528\u3067\u304d\u308b\u3002\n\u30ed\u30b0\u30a4\u30f3\u524d\u306b\u3001\u4e88\u3081\u30e6\u30fc\u30b6\u30fc\u306b\u7d10\u4ed8\u3051\u3055\u308c\u3066\u3044\u306a\u3044\u30d7\u30ed\u30d0\u30a4\u30c0\u30fc\u7d4c\u7531\u3067\u30ed\u30b0\u30a4\u30f3\u3057\u3088\u3046\u3068\u3059\u308b\u3068\u3001\u65b0\u898f\u30e6\u30fc\u30b6\u30fc\u3068\u307f\u306a\u3055\u308c\u3001\u65b0\u898f\u30a2\u30ab\u30a6\u30f3\u30c8\u304c\u751f\u6210\u3055\u308c\u308b\u3002\n\n\n\u30d1\u30b9\u30ef\u30fc\u30c9\n\nOmniAuth\u306e\u8a8d\u8a3c\u30ed\u30b0\u30a4\u30f3\u30e6\u30fc\u30b6\u30fc\u306f\u3001\u30d1\u30b9\u30ef\u30fc\u30c9\u5165\u529b\u304c\u514d\u9664\u3055\u308c\u308b\u3002\n\n\n\n\u5b9f\u88c5\n\n\u95a2\u9023gem\u3092\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\ndevise\u3068\u5404provider\u306eomniauth\u95a2\u9023Gem\u3092\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3002\n\nGemfile\n...\n# ruby 2.3.1\n\ngem 'rails', '>= 5.0.0.rc2', '< 5.1'\ngem 'devise', '4.2'\ngem 'omniauth', '~> 1.3', '>= 1.3.1'\ngem 'omniauth-facebook', '~> 3.0'\ngem 'omniauth-twitter', '~> 1.2', '>= 1.2.1'\n...\n\n\n\nDevise\u3092\u30bb\u30c3\u30c8\u30a2\u30c3\u30d7\n\n\u516c\u5f0f\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u306b\u5f93\u3063\u3066\u8a2d\u5b9a\u3059\u308b\u3002\n\u50d5\u306e\u8a2d\u5b9a\u306f\u3001confirmable\u3067reconfirmable\u3092\u6709\u52b9\u306b\u3057\u3066\u3042\u308b\u3002\n\n\napp/models/user.rb\nclass User < ApplicationRecord\n  ...\n  # Devise modules.\n  devise :database_authenticatable, :registerable, :recoverable, :rememberable,\n         :trackable, :validatable, :confirmable, :omniauthable\n  ...\n\n\n\n/config/initializers/devise.rb\nDevise.setup do |config|\n  ...\n  config.reconfirmable = true\n  ...\nend\n\n\n\ndb/migrate/20160701172600_devise_create_users.rb\nclass DeviseCreateUsers < ActiveRecord::Migration[5.0]\n  def change\n    create_table :users do |t|\n      ## Database authenticatable\n      t.string :email,              null: false, default: \"\"\n      t.string :encrypted_password, null: false, default: \"\"\n\n      ## Recoverable\n      t.string   :reset_password_token\n      t.datetime :reset_password_sent_at\n\n      ## Rememberable\n      t.datetime :remember_created_at\n\n      ## Trackable\n      t.integer  :sign_in_count, default: 0, null: false\n      t.datetime :current_sign_in_at\n      t.datetime :last_sign_in_at\n      t.inet     :current_sign_in_ip\n      t.inet     :last_sign_in_ip\n\n      ## Confirmable\n      t.string   :confirmation_token\n      t.datetime :confirmed_at\n      t.datetime :confirmation_sent_at\n      t.string   :unconfirmed_email # Only if using reconfirmable\n\n      ## Lockable\n      # t.integer  :failed_attempts, default: 0, null: false # Only if lock strategy is :failed_attempts\n      # t.string   :unlock_token # Only if unlock strategy is :email or :both\n      # t.datetime :locked_at\n\n\n      t.timestamps null: false\n    end\n\n    add_index :users, :email,                unique: true\n    add_index :users, :reset_password_token, unique: true\n    add_index :users, :confirmation_token,   unique: true\n    # add_index :users, :unlock_token,         unique: true\n  end\nend\n\n\n\n\u5404provider\u306e\u30ad\u30fc\u30fb\u30b7\u30fc\u30af\u30ec\u30c3\u30c8\u30c8\u30fc\u30af\u30f3\u3092\u5165\u624b\n\nhttps://dev.twitter.com/\nhttps://developers.facebook.com/\n\n\n\u5404provider\u306eOAuth\u8a2d\u5b9a\n\n/config/initializers/devise.rb\nDevise.setup do |config|\n  ...\n  config.omniauth :facebook, \"KEY\", \"SECRET\"\n  config.omniauth :twitter, \"KEY\", \"SECRET\"\n  ...\nend\n\n\n\u30ad\u30fc\u7b49\u306e\u7ba1\u7406\u65b9\u6cd5\u306f\u8272\u3005\u3042\u308b\u3088\u3046\u3067\u3059\u3002\u4f8b\u3048\u3070\u3001\u3053\u306e\u8a18\u4e8b\u3067\u306f\nconfig/omniauth.yml\u3068\u3044\u3046\u5225\u306e\u30d5\u30a1\u30a4\u30eb\u3067\u7ba1\u7406\u3059\u308b\u65b9\u6cd5\u3092\u7d39\u4ecb\u3055\u308c\u3066\u3044\u307e\u3059\u3002\n\n\u30e2\u30c7\u30eb\n\nUser\u30e2\u30c7\u30eb\n\n\u4f8b\u3067\u306fusername\u30ab\u30e9\u30e0\u3092\u8ffd\u52a0\u3057\u3066\u3042\u308b\u304c\u306a\u304f\u3066\u3082\u826f\u3044\u3068\u601d\u3046\u3002\n\n\n/app/models/user.rb\n# == Schema Information\n#\n# Table name: users\n#\n#  id                     :integer          not null, primary key\n#  email                  :string           default(\"\"), not null\n#  encrypted_password     :string           default(\"\"), not null\n#  reset_password_token   :string\n#  reset_password_sent_at :datetime\n#  remember_created_at    :datetime\n#  sign_in_count          :integer          default(0), not null\n#  current_sign_in_at     :datetime\n#  last_sign_in_at        :datetime\n#  current_sign_in_ip     :inet\n#  last_sign_in_ip        :inet\n#  confirmation_token     :string\n#  confirmed_at           :datetime\n#  confirmation_sent_at   :datetime\n#  unconfirmed_email      :string\n#  created_at             :datetime         not null\n#  updated_at             :datetime         not null\n#  username               :string\n#\n\nclass User < ActiveRecord::Base\n  #...\n  has_many :social_profiles, dependent: :destroy\n\n  # devise\u30e2\u30b8\u30e5\u30fc\u30eb\u306e\u8a2d\u5b9a\n  devise :database_authenticatable, :registerable, :recoverable, :rememberable,\n         :trackable, :validatable, :confirmable, :omniauthable\n  #...\n\n  TEMP_EMAIL_PREFIX = 'change@me'\n  TEMP_EMAIL_REGEX = /\\Achange@me/\n\n  # email\u306e\u767b\u9332\u72b6\u6cc1\u3092\u5224\u5b9a\u3059\u308b\u30ab\u30b9\u30bf\u30e0validator\u3092\u4f7f\u7528\u3059\u308b\u305f\u3081\u306e\u304a\u307e\u3058\u306a\u3044\u3002\n  validates :email, presence: true, email: true\n\n  def social_profile(provider)\n    social_profiles.select{ |sp| sp.provider == provider.to_s }.first\n  end\n\n  # \u672c\u7269\u306eemail\u304c\u30bb\u30c3\u30c8\u3055\u308c\u3066\u3044\u308b\u304b\u78ba\u8a8d\u3002\n  def email_verified?\n    self.email && self.email !~ TEMP_EMAIL_REGEX\n  end\n\n  # email\u78ba\u8a8d\u304c\u3055\u308c\u3066\u3044\u306a\u3044\u72b6\u614b\u306b\u3059\u308b\u3002\n  def reset_confirmation!\n    self.update_column(:confirmed_at, nil)\n  end\n\n  # User\u30e2\u30c7\u30eb\u7d4c\u7531\u3067current_user\u3092\u53c2\u7167\u3067\u304d\u308b\u3088\u3046\u306b\u3059\u308b\u3002\n  def self.current_user=(user)\n    # Set current user in Thread.\n    Thread.current[:current_user] = user\n  end\n\n  # User\u30e2\u30c7\u30eb\u7d4c\u7531\u3067current_user\u3092\u53c2\u7167\u3059\u308b\u3002\n  def self.current_user\n    # Get current user from Thread.\n    Thread.current[:current_user]\n  end\nend\n\n\nemail\u306e\u767b\u9332\u72b6\u6cc1\u3092\u5224\u5b9a\u3059\u308b\u30ab\u30b9\u30bf\u30e0validator\u3092\u4f5c\u308b\u3002\n\napp/validators/email_validator.rb\nrequire 'mail'\nclass EmailValidator < ActiveModel::EachValidator\n  def validate_each(record,attribute,value)\n    begin\n      m = Mail::Address.new(value)\n      # We must check that value contains a domain, the domain has at least\n      # one '.' and that value is an email address\n      r = m.domain!=nil && m.domain.match('\\.') && m.address == value\n    rescue Exception => e\n      r = false\n    end\n    record.errors[attribute] << (options[:message] || \"is invalid\") unless r\n\n    # \u4eeeemail\u304b\u3089\u5909\u66f4\u3057\u306a\u3044\u3068\u30a8\u30e9\u30fc\u306b\u306a\u308b\u3088\u3046\u306b\u3059\u308b\u3002\n    record.errors[attribute] << 'must be given. Please give us a real one!!!' unless value !~ User::TEMP_EMAIL_REGEX\n  end\nend\n\n\n\nSocialProfile\u30e2\u30c7\u30eb\nrails g model SocialProfile user:references provider uid name nickname email url image_url description others:text credentials:text raw_info:text\n\n\u751f\u6210\u3055\u308c\u305f\u30de\u30a4\u30b0\u30ec\u30fc\u30b7\u30e7\u30f3\u306b\u3001\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u3092\u8ffd\u52a0\u3002\n\ndb/migrate/20160709210000_create_social_profiles.rb\nclass CreateSocialProfiles < ActiveRecord::Migration[5.0]\n  def change\n    create_table :social_profiles do |t|\n      t.references :user, foreign_key: true\n      t.string :provider\n      t.string :uid\n      t.string :name\n      t.string :nickname\n      t.string :email\n      t.string :url\n      t.string :image_url\n      t.string :description\n      t.text :others\n      t.text :credentials\n      t.text :raw_info\n\n      t.timestamps\n    end\n    add_index :social_profiles, [:provider, :uid], unique: true\n  end\nend\n\n\n\u305d\u3057\u3066rake db:migrate\n\n/app/models/social_profile.rb\n# == Schema Information\n#\n# Table name: social_profiles\n#\n#  id          :integer          not null, primary key\n#  user_id     :integer\n#  provider    :string\n#  uid         :string\n#  name        :string\n#  nickname    :string\n#  email       :string\n#  url         :string\n#  image_url   :string\n#  description :string\n#  others      :text\n#  credentials :text\n#  raw_info    :text\n#  created_at  :datetime         not null\n#  updated_at  :datetime         not null\n#\n\nclass SocialProfile < ApplicationRecord\n  belongs_to :user\n  store      :others\n\n  validates_uniqueness_of :uid, scope: :provider\n\n  def self.find_for_oauth(auth)\n    profile = find_or_create_by(uid: auth.uid, provider: auth.provider)\n    profile.save_oauth_data!(auth)\n    profile\n  end\n\n  def save_oauth_data!(auth)\n    return unless valid_oauth?(auth)\n\n    provider = auth[\"provider\"]\n    policy   = policy(provider, auth)\n\n    self.update_attributes( uid:         policy.uid,\n                            name:        policy.name,\n                            nickname:    policy.nickname,\n                            email:       policy.email,\n                            url:         policy.url,\n                            image_url:   policy.image_url,\n                            description: policy.description,\n                            credentials: policy.credentials,\n                            raw_info:    policy.raw_info )\n  end\n\n  private\n\n    def policy(provider, auth)\n      class_name = \"#{provider}\".classify\n      \"OAuthPolicy::#{class_name}\".constantize.new(auth)\n    end\n\n    def valid_oauth?(auth)\n      (self.provider.to_s == auth['provider'].to_s) && (self.uid == auth['uid'])\n    end\nend\n\n\n\n\u8a8d\u8a3c\u30c7\u30fc\u30bf\u306e\u51e6\u7406\n\nOAuthPolicy\n\n\u5404\u30d7\u30ed\u30d0\u30a4\u30c0\u30fc\u304c\u4f3c\u305f\u3088\u3046\u3067\u5fae\u5999\u306b\u7570\u306a\u308b\u30c7\u30fc\u30bf\u3092\u8fd4\u3057\u3066\u304f\u308b\u306e\u3067\u3001OAuthPolicy\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u4ecb\u3057\u3066OAuth\u30c7\u30fc\u30bf\u3092\u52a0\u5de5\u3059\u308b\u3002\n\u3053\u308c\u3067SocialProfile\u30e2\u30c7\u30eb\u3067\u306f\u4e00\u8cab\u3057\u305f\u51e6\u7406\u304c\u53ef\u80fd\u306b\u306a\u308a\u3001\u30c7\u30fc\u30bf\u306e\u6c38\u7d9a\u5316\u306b\u5c02\u5ff5\u3067\u304d\u308b\u3002\n\n\n/app/helpers/o_auth/o_auth_policy.rb\nmodule OAuthPolicy\n  class Base\n    attr_reader :provider, :uid, :name, :nickname, :email, :url, :image_url,\n                :description, :other, :credentials, :raw_info\n  end\n\n  class Facebook < OAuthPolicy::Base\n    def initialize(auth)\n      @provider    = auth[\"provider\"]\n      @uid         = auth[\"uid\"]\n      @name        = auth[\"info\"][\"name\"]\n      @nickname    = \"\"\n      @email       = \"\"\n      @url         = \"https://www.facebook.com/\"\n      @image_url   = auth[\"info\"][\"image\"]\n      @description = \"\"\n      @credentials = auth[\"credentials\"].to_json\n      @raw_info    = auth[\"extra\"][\"raw_info\"].to_json\n      freeze\n    end\n  end\n\n  class Twitter < OAuthPolicy::Base\n    def initialize(auth)\n      @provider    = auth[\"provider\"]\n      @uid         = auth[\"uid\"]\n      @name        = auth[\"info\"][\"name\"]\n      @nickname    = auth[\"info\"][\"nickname\"]\n      @email       = \"\"\n      @url         = auth[\"info\"][\"urls\"][\"Twitter\"]\n      @image_url   = auth[\"info\"][\"image\"]\n      @description = auth[\"info\"][\"description\"].try(:truncate, 255)\n      @credentials = auth[\"credentials\"].to_json\n      @raw_info    = auth[\"extra\"][\"raw_info\"].to_json\n      freeze\n    end\n  end\nend\n\n\n\nOAuthService\n\u8a8d\u8a3c\u30c7\u30fc\u30bf\u306b\u57fa\u3065\u304d\u30e6\u30fc\u30b6\u30fc\u30a2\u30ab\u30a6\u30f3\u30c8\u3092\u63a2\u3057\u305f\u308a\u3059\u308b\u8af8\u3005\u306e\u51e6\u7406\u3092OAuthService\u3068\u3057\u3066\u307e\u3068\u3081\u305f\u3002\n\n/app/helpers/o_auth/o_auth_service.rb\nmodule OAuthService\n  class GetOAuthUser\n\n    def self.call(auth)\n      # \u8a8d\u8a3c\u30c7\u30fc\u30bf\u306b\u5bfe\u5fdc\u3059\u308bSocialProfile\u304c\u5b58\u5728\u3059\u308b\u304b\u78ba\u8a8d\u3057\u3001\u306a\u3051\u308c\u3070SocialProfile\u3092\u65b0\u898f\u4f5c\u6210\u3002\n      # \u8a8d\u8a3c\u30c7\u30fc\u30bf\u3092SocialProfile\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306b\u30bb\u30c3\u30c8\u3057\u3001\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u306b\u4fdd\u5b58\u3002\n      profile = SocialProfile.find_for_oauth(auth)\n      # \u30e6\u30fc\u30b6\u30fc\u3092\u63a2\u3059\u3002\n      # \u7b2c\uff11\u5019\u88dc\uff1a\u30ed\u30b0\u30a4\u30f3\u4e2d\u306e\u30e6\u30fc\u30b6\u30fc\u3001\u7b2c\uff12\u5019\u88dc\uff1aSocialProfile\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306b\u7d10\u4ed8\u3051\u3055\u308c\u3066\u3044\u308b\u30e6\u30fc\u30b6\u30fc\u3002\n      user = current_or_profile_user(profile)\n      unless user\n        # \u7b2c\uff13\u5019\u88dc\uff1a\u8a8d\u8a3c\u30c7\u30fc\u30bf\u306bemail\u304c\u542b\u307e\u308c\u3066\u3044\u308c\u3070\u305d\u308c\u3092\u5143\u306b\u30e6\u30fc\u30b6\u30fc\u3092\u63a2\u3059\u3002\n        user = User.where(email: email).first if verified_email_from_oauth(auth)\n        # \u898b\u3064\u304b\u3089\u306a\u3051\u308c\u3070\u3001\u30e6\u30fc\u30b6\u30fc\u3092\u65b0\u898f\u4f5c\u6210\u3002\n        user ||= find_or_create_new_user(auth)\n      end\n      associate_user_with_profile!(user, profile)\n      user\n    end\n\n    private\n\n      class << self\n\n        def current_or_profile_user(profile)\n          user = User.current_user.presence || profile.user\n        end\n\n        # \u898b\u3064\u304b\u3089\u306a\u3051\u308c\u3070\u3001\u30e6\u30fc\u30b6\u30fc\u3092\u65b0\u898f\u4f5c\u6210\u3002email\u306f\u5f8c\u306b\u78ba\u8a8d\u3059\u308b\u306e\u3067\u4eca\u306f\u4eee\u306e\u3082\u306e\u3092\u5165\u308c\u3066\u304a\u304f\u3002\n        # TEMP_EMAIL_PREFIX\u3092\u624b\u639b\u304b\u308a\u306b\u5f8c\u306b\u4eee\u306e\u3082\u306e\u304b\u3069\u3046\u304b\u306e\u5224\u5225\u304c\u53ef\u80fd\u3002\n        # OmniAuth\u8a8d\u8a3c\u6642\u306f\u30d1\u30b9\u30ef\u30fc\u30c9\u5165\u529b\u306f\u514d\u9664\u3059\u308b\u306e\u3067\u3001\u30e9\u30f3\u30c0\u30e0\u306e\u30d1\u30b9\u30ef\u30fc\u30c9\u3092\u5165\u308c\u3066\u304a\u304f\u3002\n        def find_or_create_new_user(auth)\n          # Query for user if verified email is provided\n          email = verified_email_from_oauth(auth)\n          user = User.where(email: email).first if email\n          if user.nil?\n            temp_email = \"#{User::TEMP_EMAIL_PREFIX}-#{auth.uid}-#{auth.provider}.com\"\n            user = User.new(\n              username: auth.extra.raw_info.name,\n              email:    email ? email : temp_email,\n              password: Devise.friendly_token[0,20]\n            )\n            # email\u78ba\u8a8d\u30e1\u30fc\u30eb\u9001\u4fe1\u3092\u5ef6\u671f\u3059\u308b\u305f\u3081\u306b\u4e00\u6642\u7684\u306bemail\u78ba\u8a8d\u6e08\u307f\u306e\u72b6\u614b\u306b\u3059\u308b\u3002\n            user.skip_confirmation!\n            # email\u4eee\u3092\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u306b\u4fdd\u5b58\u3059\u308b\u305f\u3081\u3001validation\u3092\u4e00\u6642\u7684\u306b\u7121\u52b9\u5316\u3002\n            user.save(validate: false)\n            user\n          end\n        end\n\n        def verified_email_from_oauth(auth)\n          auth.info.email if auth.info.email && (auth.info.verified || auth.info.verified_email)\n        end\n\n        # \u30e6\u30fc\u30b6\u30fc\u3068SocialProfile\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u95a2\u9023\u3065\u3051\u308b\u3002\n        def associate_user_with_profile!(user, profile)\n          profile.update!(user_id: user.id) if profile.user != user\n        end\n      end\n    end\nend\n\n\n\n\u30eb\u30fc\u30c6\u30a3\u30f3\u30b0\n\n/config/routes.rb\nRails.application.routes.draw do\n  ...\n\n  # Devise\u306e\u30b3\u30f3\u30c8\u30ed\u30fc\u30e9\u3092\u4e0a\u66f8\u304d\u3059\u308b\u305f\u3081\u3002\n  devise_for :users, controllers: { omniauth_callbacks: 'omniauth_callbacks',\n                                    registrations: \"registrations\",\n                                    confirmations: \"confirmations\" }\n\n  # OmniAuth\u8a8d\u8a3c\u5f8c\u3001email\u5165\u529b\u3092\u6c42\u3081\u308b\u51e6\u7406\u306e\u305f\u3081\u3002\n  match '/users/:id/finish_signup' => 'users#finish_signup', via: [:get, :patch], as: :finish_signup\n  ...\nend\n\n\n\n\u30b3\u30f3\u30c8\u30ed\u30fc\u30e9\n\nomniauth_callbacks_controller\n\n/app/controllers/omniauth_callbacks_controller.rb\nclass OmniauthCallbacksController < Devise::OmniauthCallbacksController\n\n  # \u3044\u304f\u3064\u30d7\u30ed\u30d0\u30a4\u30c0\u30fc\u3092\u5229\u7528\u3057\u3088\u3046\u304c\u51e6\u7406\u306f\u5171\u901a\u3057\u3066\u3044\u308b\u306e\u3067\u672c\u30e1\u30bd\u30c3\u30c9\u3092\u30a8\u30a4\u30ea\u30a2\u30b9\u3068\u3057\u3066\u6d41\u7528\u3002\n  def callback_for_all_providers\n    unless env[\"omniauth.auth\"].present?\n      flash[:danger] = \"Authentication data was not provided\"\n      redirect_to root_url and return\n    end\n    provider = __callee__.to_s\n    user = OAuthService::GetOAuthUser.call(env[\"omniauth.auth\"])\n    # \u30e6\u30fc\u30b6\u30fc\u304c\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u306b\u4fdd\u5b58\u3055\u308c\u3066\u304a\u308a\u3001\u4e14\u3064email\u3092\u78ba\u8a8d\u6e08\u307f\u3067\u3042\u308c\u3070\u3001\u30e6\u30fc\u30b6\u30fc\u3092\u30ed\u30b0\u30a4\u30f3\u3059\u308b\u3002\n    if user.persisted? && user.email_verified?\n      sign_in_and_redirect user, event: :authentication\n      set_flash_message(:notice, :success, kind: provider.capitalize) if is_navigational_format?\n    else\n      user.reset_confirmation!\n      flash[:warning] = \"We need your email address before proceeding.\"\n      redirect_to finish_signup_path(user)\n    end\n  end\n  alias_method :facebook, :callback_for_all_providers\n  alias_method :twitter,  :callback_for_all_providers\nend\n\n\n\nusers_controller\n\n/app/controllers/users_controller.rb\nclass UsersController < ApplicationController\n  before_action :authenticate_user!, except: :finish_signup\n\n  ...\n\n  # OAuth\u8a8d\u8a3c\u306b\u3088\u308b\u65b0\u898f\u767b\u9332\u306e\u7de0\u3081\u3092\u53f8\u308b\u30a2\u30af\u30b7\u30e7\u30f3\u3002\n  # \u30e6\u30fc\u30b6\u30fc\u30c7\u30fc\u30bf\u3092\u66f4\u65b0\u306b\u6210\u529f\u3057\u305f\u3089\u3001email\u78ba\u8a8d\u30e1\u30fc\u30eb\u3092\u9001\u4ed8\u3059\u308b\u3002\n  # GET   /users/:id/finish_signup - \u5fc5\u8981\u30c7\u30fc\u30bf\u306e\u5165\u529b\u3092\u6c42\u3081\u308b\u3002\n  # PATCH /users/:id/finish_signup - \u30e6\u30fc\u30b6\u30fc\u30c7\u30fc\u30bf\u3092\u66f4\u65b0\u3002\n  def finish_signup\n    @user = User.find(params[:id])\n    if request.patch? && @user.update(user_params)\n      @user.send_confirmation_instructions unless @user.confirmed?\n      flash[:info] = 'We sent you a confirmation email. Please find a confirmation link.'\n      redirect_to root_url\n    end\n  end\n\n  ...\n\n  private\n\n    # user_params\u306b\u30a2\u30af\u30bb\u30b9\u3059\u308b\u305f\u3081\u3002\n    def user_params\n      accessible = [ :username, :email ]\n      accessible << [ :password, :password_confirmation ] unless params[:user][:password].blank?\n      params.require(:user).permit(accessible)\n    end\n    ...\nend\n\n\n\u30d5\u30a9\u30fc\u30e0\n\napp/views/users/finish_signup.html.slim\n.row\n  .col-sm-offset-3.col-sm-6\n    h1 Add Email\n    = simple_form_for(@user, url: finish_signup_path(@user)) do |f|\n      = f.input :username, autofocus: true, class: 'form-control', placeholder: \"Username\"\n      = f.input :email, autofocus: true, class: 'form-control', placeholder: \"Email\"\n      .form-group\n        = f.submit 'Add email', class: 'btn btn-primary'\n\n\n\nsocial_profiles_controller\nFacebook/Twitter\u3078\u306e\u63a5\u7d9a\u3092\u89e3\u9664\u3059\u308b\u3002\n\n/app/controllers/social_profiles_controller.rb\nclass SocialProfilesController < ApplicationController\n  before_action :authenticate_user!\n  before_action :correct_user!\n\n  def destroy\n    @profile.destroy\n    flash[:success] = \"Disconnected from #{@profile.provider.capitalize}\"\n    redirect_to root_url\n  end\n\n  private\n\n    def correct_user!\n      @profile = SocialProfile.find(params[:id])\n      redirect_to root_url and return unless @profile.user_id == current_user.id\n    end\nend\n\n\n\nconfirmations_controller\nemail\u78ba\u8a8d\u30e1\u30fc\u30eb\u306e\u30ea\u30f3\u30af\u3092\u30af\u30ea\u30c3\u30af\u3057\u305f\u3089\u5373\u3001\u30ed\u30b0\u30a4\u30f3\u3059\u308b\u305f\u3081\u4e0a\u66f8\u304d\u3002\n\n/app/controllers/confirmations_controller.rb\nclass ConfirmationsController < Devise::ConfirmationsController\n\n  # Override\n  def show\n    self.resource = resource_class.confirm_by_token(params[:confirmation_token])\n    yield resource if block_given?\n\n    if resource.errors.empty?\n      set_flash_message(:notice, :confirmed) if is_flashing_format?\n\n      sign_in(resource) #<== \u3053\u306e\u4e00\u884c\u3092\u52a0\u3048\u308b\u306e\u307f\n\n      respond_with_navigational(resource){ redirect_to after_confirmation_path_for(resource_name, resource) }\n    else\n      respond_with_navigational(resource.errors, :status => :unprocessable_entity){ render :new }\n    end\n  end\nend\n\n\n\nregistrations_controller\nOmniAuth\u3067\u8a8d\u8a3c\u306e\u30e6\u30fc\u30b6\u30fc\u306b\u5bfe\u3057\u3066\u3001\u30d1\u30b9\u30ef\u30fc\u30c9\u5165\u529b\u3092\u514d\u9664\u3055\u305b\u308b\u305f\u3081\u4e0a\u66f8\u304d\u3002\n\n/app/controllers/registrations_controller.rb\nclass RegistrationsController < Devise::RegistrationsController\n\n  protected\n\n  # Override\n  def update_resource(resource, params)\n    resource.update_without_password(params)\n  end\nend\n\n\n\n\u30c6\u30b9\u30c8\n\nOmniAuth\u306e\u30c6\u30b9\u30c8\nemail\u78ba\u8a8d(confirmable)\u306e\u30c6\u30b9\u30c8\n\n\n\u53c2\u8003\u8cc7\u6599\nDevise\n\nREADME\nOmniAuth: Overview\nHow To: Allow users to edit their account without providing a password\nHow to: Use a custom email validator with Devise\nAllowing Unconfirmed Access\nCreate a username field in the users table\n\nOmniAuth\n\nomniauth\nomniauth-facebook\nomniauth-twitter\n\n\u5b9f\u88c5\u6280\u8853\n\nRails 4 OmniAuth using Devise with Twitter, Facebook and Linkedin\nRails\u3067\u3044\u308d\u3093\u306aSNS\u3068OAuth\u9023\u643a/\u30ed\u30b0\u30a4\u30f3\u3059\u308b\u65b9\u6cd5\nRails4 \u3067 Devise \u3068 OmniAuth \u3067\u3001Twitter/Facebook \u306eOAuth\u8a8d\u8a3c\u3068\u901a\u5e38\u30d5\u30a9\u30fc\u30e0\u3067\u306e\u8a8d\u8a3c\u3092\u4f75\u7528\u3057\u3066\u5b9f\u88c5\nClean OAuth for Rails: An Object-Oriented Approach\nrails \u3067 params \u306b\u5bfe\u3057\u3066\u8907\u96d1\u306a\u51e6\u7406\u3092\u3059\u308b\u3068\u304d\u306e\u30d9\u30b9\u30c8\u30d7\u30e9\u30af\u30c6\u30a3\u30b9\u306f\uff1f\n\u4e2d\u898f\u6a21Web\u958b\u767a\u306e\u305f\u3081\u306eMVC\u5206\u5272\u3068\u30ec\u30a4\u30e4\u30a2\u30fc\u30ad\u30c6\u30af\u30c1\u30e3\n\n## \u7d4c\u7def\n\n- Qiita\u306e\u3088\u3046\u306aOAuth\u8a8d\u8a3c\u3092\u5b9f\u88c5\u3057\u3088\u3046\u3068\u8a66\u307f\u305f\u3002\n- \u30b0\u30b0\u3063\u3066\u307f\u308b\u3068\u3001\u30e6\u30fc\u30b6\u30fc\u3092\u30ed\u30b0\u30a4\u30f3\u3055\u305b\u305f\u5f8c\u3069\u3046\u3059\u308b\u304b\u306b\u3064\u3044\u3066\u8a00\u53ca\u3055\u308c\u3066\u3044\u306a\u3044\u3082\u306e\u304c\u591a\u304b\u3063\u305f\u3002\n- \u3044\u308d\u3093\u306a\u8a18\u4e8b\u304b\u3089\u30a2\u30a4\u30c7\u30a2\u3092\u5438\u53ce\u3057\u3066\u8a66\u884c\u932f\u8aa4\u3057\u305f\u7d50\u679c\u3001\u81ea\u5206\u306e\u601d\u3044\u901a\u308a\u306e\u4ed5\u69d8\u306b\u4ed5\u4e0a\u304c\u3063\u305f\u306e\u3067\u4eca\u5f8c\u306e\u305f\u3081\u306b\u30e1\u30e2\u3002\n\n\u30b9\u30bf\u30fc\u30c8\u306e\u6642\u70b9\u3067\u3053\u308c\u3089\u306e\u8a18\u4e8b\u304c\u975e\u5e38\u306b\u53c2\u8003\u306b\u306a\u3063\u305f\u3002\n- [Rails\u3067\u3044\u308d\u3093\u306aSNS\u3068OAuth\u9023\u643a/\u30ed\u30b0\u30a4\u30f3\u3059\u308b\u65b9\u6cd5](http://qiita.com/awakia/items/03dd68dea5f15dc46c15)\n- [Rails4 \u3067 Devise \u3068 OmniAuth \u3067\u3001Twitter/Facebook \u306eOAuth\u8a8d\u8a3c\u3068\u901a\u5e38\u30d5\u30a9\u30fc\u30e0\u3067\u306e\u8a8d\u8a3c\u3092\u4f75\u7528\u3057\u3066\u5b9f\u88c5](http://easyramble.com/implement-devise-and-ominiauth-on-rails.html)\n\n## \u3084\u308a\u305f\u3044\u3053\u3068\n\n- Devise\u8a8d\u8a3c\u4ed8Rails\u30a2\u30d7\u30ea\u306b\u3001OmniAuth\u3092\u8ffd\u52a0\u3057\u5404\u30e6\u30fc\u30b6\u30fc\u3092\u8907\u6570\u306e\u30d7\u30ed\u30d0\u30a4\u30c0\u3067\u8a8d\u8a3c\u3067\u304d\u308b\u69d8\u306b\u3057\u305f\u3044\u3002\uff08\u30e6\u30fc\u30b6\u30fc\u3068\u5168\u3066\u306e\u30d7\u30ed\u30d0\u30a4\u30c0\u30fc\u3092\u7d10\u4ed8\u3051\u3059\u308b\uff09\n- Qiita\u306e\u4ed5\u69d8\u3092\u76ee\u6a19\u3068\u3059\u308b\u3002\n- \u30d7\u30ed\u30d0\u30a4\u30c0\u30fc\u3092\u5897\u3084\u305b\u308b\u3088\u3046\u306b\u62e1\u5f35\u6027\u3092\u6301\u305f\u305b\u308b\u3002\n\n\n![Screenshot 2015-08-13 20.04.34.png](https://qiita-image-store.s3.amazonaws.com/0/82804/a1e2a73d-db56-b375-ed91-7dc4ec201e77.png)\n===\n![Screenshot 2015-08-15 10.11.13.png](https://qiita-image-store.s3.amazonaws.com/0/82804/166c1d09-33ab-8066-cc0c-1ba4c200fa46.png)\n\n### \u65b0\u898f\u767b\u9332\uff08\uff13\u30d1\u30bf\u30fc\u30f3\uff09\n\n1. \u30e6\u30fc\u30b6\u30fc\u540d\u3001email\u3001\u30d1\u30b9\u30ef\u30fc\u30c9\u3092\u5165\u529b\u3057\u3001\u8a8d\u8a3c\u3002\n2. Facebook\u3067\u8a8d\u8a3c\u3002\n3. Twitter\u3067\u8a8d\u8a3c\u3002\n\n### OAuth\u8a8d\u8a3c\u6642\u306e\u30e6\u30fc\u30b6\u30fc\u306e\u72b6\u6cc1\uff08\uff13\u30d1\u30bf\u30fc\u30f3\uff09\n\n1. \u65b0\u898f\u30e6\u30fc\u30b6\u30fc\u306e\u5834\u5408\u3001\u65b0\u898f\u30e6\u30fc\u30b6\u30fc\u30a2\u30ab\u30a6\u30f3\u30c8\u3092\u4f5c\u6210\u3002\n2. \u30e6\u30fc\u30b6\u30fc\u304c\u30ed\u30b0\u30a4\u30f3\u6e08\u307f\u306e\u5834\u5408\u3001\u8a8d\u8a3c\u3055\u308c\u305f\u30d7\u30ed\u30d0\u30a4\u30c0\u3067\u4eca\u5f8c\u30ed\u30b0\u30a4\u30f3\u306b\u4f7f\u7528\u3067\u304d\u308b\u3088\u3046\u306b\u3059\u308b\u3002\n3. \u4ee5\u524dOAuth\u8a8d\u8a3c\u3057\u305f\u3053\u3068\u306e\u3042\u308b\u30e6\u30fc\u30b6\u30fc\u304c\u30ed\u30b0\u30a4\u30f3\u3057\u3066\u3044\u306a\u3044\u5834\u5408\u3001\u8a8d\u8a3c\u30c7\u30fc\u30bf\u306b\u57fa\u3065\u304d\u30e6\u30fc\u30b6\u30fc\u30a2\u30ab\u30a6\u30f3\u30c8\u3092\u30af\u30a8\u30ea\u3057\u3001\u30ed\u30b0\u30a4\u30f3\u3055\u305b\u308b\u3002\n\n### email\u78ba\u8a8d\n\n- \u3069\u306e\u30d1\u30bf\u30fc\u30f3\u3067\u65b0\u898f\u767b\u9332\u3057\u3066\u3082\u3001\u5fc5\u305aemail\u3092\u5b9f\u969b\u306b\u9001\u4fe1\u3057\u3066\u78ba\u8a8d\u3059\u308b\u3002\n- \u78ba\u8a8demail\u306e\u30ea\u30f3\u30af\u3092\u30af\u30ea\u30c3\u30af\u3059\u308b\u3068\u5373\u30ed\u30b0\u30a4\u30f3\u3055\u308c\u308b\u3002\n- email\u3092\u5909\u66f4\u3059\u308b\u5834\u5408\u3082\u3001\u6bce\u56deemail\u3092\u5b9f\u969b\u306b\u9001\u4fe1\u3057\u3066\u78ba\u8a8d\u3059\u308b\u3002\n\n### \u30e6\u30fc\u30b6\u30fc\u3068\u30d7\u30ed\u30d0\u30a4\u30c0\u30fc\u3068\u306e\u7d10\u4ed8\u3051\n\n- \u30ed\u30b0\u30a4\u30f3\u4e2d\u306e\u30e6\u30fc\u30b6\u30fc\u304c\u3001\u30d7\u30ed\u30d5\u30a3\u30fc\u30eb\u30da\u30fc\u30b8\u306b\u3042\u308b\u5404\u30d7\u30ed\u30d0\u30a4\u30c0\u30fc\u3078\u306e\u30ea\u30f3\u30af\u30dc\u30bf\u30f3\u3092\u62bc\u3057\u3001OmniAuth\u306e\u8a8d\u8a3c\u3092\u30af\u30ea\u30a2\u3059\u308c\u3070\u3001\u305d\u306e\u30d7\u30ed\u30d0\u30a4\u30c0\u30fc\u304c\u7d10\u4ed8\u3051\u3055\u308c\u308b\u3002\u6b21\u56de\u30ed\u30b0\u30a4\u30f3\u6642\u306b\u7d10\u4ed8\u3051\u3055\u308c\u305f\u30d7\u30ed\u30d0\u30a4\u30c0\u30fc\u304c\u5229\u7528\u3067\u304d\u308b\u3002\n- \u30ed\u30b0\u30a4\u30f3\u524d\u306b\u3001\u4e88\u3081\u30e6\u30fc\u30b6\u30fc\u306b\u7d10\u4ed8\u3051\u3055\u308c\u3066\u3044\u306a\u3044\u30d7\u30ed\u30d0\u30a4\u30c0\u30fc\u7d4c\u7531\u3067\u30ed\u30b0\u30a4\u30f3\u3057\u3088\u3046\u3068\u3059\u308b\u3068\u3001\u65b0\u898f\u30e6\u30fc\u30b6\u30fc\u3068\u307f\u306a\u3055\u308c\u3001\u65b0\u898f\u30a2\u30ab\u30a6\u30f3\u30c8\u304c\u751f\u6210\u3055\u308c\u308b\u3002\n\n### \u30d1\u30b9\u30ef\u30fc\u30c9\n\n- OmniAuth\u306e\u8a8d\u8a3c\u30ed\u30b0\u30a4\u30f3\u30e6\u30fc\u30b6\u30fc\u306f\u3001\u30d1\u30b9\u30ef\u30fc\u30c9\u5165\u529b\u304c\u514d\u9664\u3055\u308c\u308b\u3002\n\n---\n\n## \u5b9f\u88c5\n\n### \u95a2\u9023gem\u3092\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\n\n`devise`\u3068\u5404provider\u306e`omniauth`\u95a2\u9023Gem\u3092\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3002\n\n```rb:Gemfile\n...\n# ruby 2.3.1\n\ngem 'rails', '>= 5.0.0.rc2', '< 5.1'\ngem 'devise', '4.2'\ngem 'omniauth', '~> 1.3', '>= 1.3.1'\ngem 'omniauth-facebook', '~> 3.0'\ngem 'omniauth-twitter', '~> 1.2', '>= 1.2.1'\n...\n```\n\n### [Devise](http://devise.plataformatec.com.br/#the-devise-wiki)\u3092\u30bb\u30c3\u30c8\u30a2\u30c3\u30d7\n\n- \u516c\u5f0f\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u306b\u5f93\u3063\u3066\u8a2d\u5b9a\u3059\u308b\u3002\n- \u50d5\u306e\u8a2d\u5b9a\u306f\u3001`confirmable`\u3067`reconfirmable`\u3092\u6709\u52b9\u306b\u3057\u3066\u3042\u308b\u3002\n\n```rb:app/models/user.rb\nclass User < ApplicationRecord\n  ...\n  # Devise modules.\n  devise :database_authenticatable, :registerable, :recoverable, :rememberable,\n         :trackable, :validatable, :confirmable, :omniauthable\n  ...\n```\n\n```rb:/config/initializers/devise.rb\nDevise.setup do |config|\n  ...\n  config.reconfirmable = true\n  ...\nend\n```\n\n```rb:db/migrate/20160701172600_devise_create_users.rb\nclass DeviseCreateUsers < ActiveRecord::Migration[5.0]\n  def change\n    create_table :users do |t|\n      ## Database authenticatable\n      t.string :email,              null: false, default: \"\"\n      t.string :encrypted_password, null: false, default: \"\"\n\n      ## Recoverable\n      t.string   :reset_password_token\n      t.datetime :reset_password_sent_at\n\n      ## Rememberable\n      t.datetime :remember_created_at\n\n      ## Trackable\n      t.integer  :sign_in_count, default: 0, null: false\n      t.datetime :current_sign_in_at\n      t.datetime :last_sign_in_at\n      t.inet     :current_sign_in_ip\n      t.inet     :last_sign_in_ip\n\n      ## Confirmable\n      t.string   :confirmation_token\n      t.datetime :confirmed_at\n      t.datetime :confirmation_sent_at\n      t.string   :unconfirmed_email # Only if using reconfirmable\n\n      ## Lockable\n      # t.integer  :failed_attempts, default: 0, null: false # Only if lock strategy is :failed_attempts\n      # t.string   :unlock_token # Only if unlock strategy is :email or :both\n      # t.datetime :locked_at\n\n\n      t.timestamps null: false\n    end\n\n    add_index :users, :email,                unique: true\n    add_index :users, :reset_password_token, unique: true\n    add_index :users, :confirmation_token,   unique: true\n    # add_index :users, :unlock_token,         unique: true\n  end\nend\n```\n\n### \u5404provider\u306e\u30ad\u30fc\u30fb\u30b7\u30fc\u30af\u30ec\u30c3\u30c8\u30c8\u30fc\u30af\u30f3\u3092\u5165\u624b\n\n- [https://dev.twitter.com/](https://dev.twitter.com/)\n- [https://developers.facebook.com/](https://developers.facebook.com/)\n\n### \u5404provider\u306eOAuth\u8a2d\u5b9a\n\n```rb:/config/initializers/devise.rb\nDevise.setup do |config|\n  ...\n  config.omniauth :facebook, \"KEY\", \"SECRET\"\n  config.omniauth :twitter, \"KEY\", \"SECRET\"\n  ...\nend\n```\n\n\u30ad\u30fc\u7b49\u306e\u7ba1\u7406\u65b9\u6cd5\u306f\u8272\u3005\u3042\u308b\u3088\u3046\u3067\u3059\u3002\u4f8b\u3048\u3070\u3001[\u3053\u306e\u8a18\u4e8b](http://qiita.com/awakia/items/03dd68dea5f15dc46c15#%E5%90%84provider%E3%81%AEoauth%E8%A8%AD%E5%AE%9A)\u3067\u306f\n`config/omniauth.yml`\u3068\u3044\u3046\u5225\u306e\u30d5\u30a1\u30a4\u30eb\u3067\u7ba1\u7406\u3059\u308b\u65b9\u6cd5\u3092\u7d39\u4ecb\u3055\u308c\u3066\u3044\u307e\u3059\u3002\n\n\n### \u30e2\u30c7\u30eb\n\n#### User\u30e2\u30c7\u30eb\n\n- \u4f8b\u3067\u306fusername\u30ab\u30e9\u30e0\u3092\u8ffd\u52a0\u3057\u3066\u3042\u308b\u304c\u306a\u304f\u3066\u3082\u826f\u3044\u3068\u601d\u3046\u3002\n\n```rb:/app/models/user.rb\n# == Schema Information\n#\n# Table name: users\n#\n#  id                     :integer          not null, primary key\n#  email                  :string           default(\"\"), not null\n#  encrypted_password     :string           default(\"\"), not null\n#  reset_password_token   :string\n#  reset_password_sent_at :datetime\n#  remember_created_at    :datetime\n#  sign_in_count          :integer          default(0), not null\n#  current_sign_in_at     :datetime\n#  last_sign_in_at        :datetime\n#  current_sign_in_ip     :inet\n#  last_sign_in_ip        :inet\n#  confirmation_token     :string\n#  confirmed_at           :datetime\n#  confirmation_sent_at   :datetime\n#  unconfirmed_email      :string\n#  created_at             :datetime         not null\n#  updated_at             :datetime         not null\n#  username               :string\n#\n\nclass User < ActiveRecord::Base\n  #...\n  has_many :social_profiles, dependent: :destroy\n\n  # devise\u30e2\u30b8\u30e5\u30fc\u30eb\u306e\u8a2d\u5b9a\n  devise :database_authenticatable, :registerable, :recoverable, :rememberable,\n         :trackable, :validatable, :confirmable, :omniauthable\n  #...\n\n  TEMP_EMAIL_PREFIX = 'change@me'\n  TEMP_EMAIL_REGEX = /\\Achange@me/\n\n  # email\u306e\u767b\u9332\u72b6\u6cc1\u3092\u5224\u5b9a\u3059\u308b\u30ab\u30b9\u30bf\u30e0validator\u3092\u4f7f\u7528\u3059\u308b\u305f\u3081\u306e\u304a\u307e\u3058\u306a\u3044\u3002\n  validates :email, presence: true, email: true\n\n  def social_profile(provider)\n    social_profiles.select{ |sp| sp.provider == provider.to_s }.first\n  end\n\n  # \u672c\u7269\u306eemail\u304c\u30bb\u30c3\u30c8\u3055\u308c\u3066\u3044\u308b\u304b\u78ba\u8a8d\u3002\n  def email_verified?\n    self.email && self.email !~ TEMP_EMAIL_REGEX\n  end\n\n  # email\u78ba\u8a8d\u304c\u3055\u308c\u3066\u3044\u306a\u3044\u72b6\u614b\u306b\u3059\u308b\u3002\n  def reset_confirmation!\n    self.update_column(:confirmed_at, nil)\n  end\n\n  # User\u30e2\u30c7\u30eb\u7d4c\u7531\u3067current_user\u3092\u53c2\u7167\u3067\u304d\u308b\u3088\u3046\u306b\u3059\u308b\u3002\n  def self.current_user=(user)\n    # Set current user in Thread.\n    Thread.current[:current_user] = user\n  end\n\n  # User\u30e2\u30c7\u30eb\u7d4c\u7531\u3067current_user\u3092\u53c2\u7167\u3059\u308b\u3002\n  def self.current_user\n    # Get current user from Thread.\n    Thread.current[:current_user]\n  end\nend\n```\n\nemail\u306e\u767b\u9332\u72b6\u6cc1\u3092\u5224\u5b9a\u3059\u308b\u30ab\u30b9\u30bf\u30e0validator\u3092\u4f5c\u308b\u3002\n\n```rb:app/validators/email_validator.rb\nrequire 'mail'\nclass EmailValidator < ActiveModel::EachValidator\n  def validate_each(record,attribute,value)\n    begin\n      m = Mail::Address.new(value)\n      # We must check that value contains a domain, the domain has at least\n      # one '.' and that value is an email address\n      r = m.domain!=nil && m.domain.match('\\.') && m.address == value\n    rescue Exception => e\n      r = false\n    end\n    record.errors[attribute] << (options[:message] || \"is invalid\") unless r\n\n    # \u4eeeemail\u304b\u3089\u5909\u66f4\u3057\u306a\u3044\u3068\u30a8\u30e9\u30fc\u306b\u306a\u308b\u3088\u3046\u306b\u3059\u308b\u3002\n    record.errors[attribute] << 'must be given. Please give us a real one!!!' unless value !~ User::TEMP_EMAIL_REGEX\n  end\nend\n```\n\n#### SocialProfile\u30e2\u30c7\u30eb\n\n```bash\nrails g model SocialProfile user:references provider uid name nickname email url image_url description others:text credentials:text raw_info:text\n```\n\n\u751f\u6210\u3055\u308c\u305f\u30de\u30a4\u30b0\u30ec\u30fc\u30b7\u30e7\u30f3\u306b\u3001\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u3092\u8ffd\u52a0\u3002\n\n```rb:db/migrate/20160709210000_create_social_profiles.rb\nclass CreateSocialProfiles < ActiveRecord::Migration[5.0]\n  def change\n    create_table :social_profiles do |t|\n      t.references :user, foreign_key: true\n      t.string :provider\n      t.string :uid\n      t.string :name\n      t.string :nickname\n      t.string :email\n      t.string :url\n      t.string :image_url\n      t.string :description\n      t.text :others\n      t.text :credentials\n      t.text :raw_info\n\n      t.timestamps\n    end\n    add_index :social_profiles, [:provider, :uid], unique: true\n  end\nend\n```\n\n\u305d\u3057\u3066`rake db:migrate`\n\n```rb:/app/models/social_profile.rb\n# == Schema Information\n#\n# Table name: social_profiles\n#\n#  id          :integer          not null, primary key\n#  user_id     :integer\n#  provider    :string\n#  uid         :string\n#  name        :string\n#  nickname    :string\n#  email       :string\n#  url         :string\n#  image_url   :string\n#  description :string\n#  others      :text\n#  credentials :text\n#  raw_info    :text\n#  created_at  :datetime         not null\n#  updated_at  :datetime         not null\n#\n\nclass SocialProfile < ApplicationRecord\n  belongs_to :user\n  store      :others\n\n  validates_uniqueness_of :uid, scope: :provider\n\n  def self.find_for_oauth(auth)\n    profile = find_or_create_by(uid: auth.uid, provider: auth.provider)\n    profile.save_oauth_data!(auth)\n    profile\n  end\n\n  def save_oauth_data!(auth)\n    return unless valid_oauth?(auth)\n\n    provider = auth[\"provider\"]\n    policy   = policy(provider, auth)\n\n    self.update_attributes( uid:         policy.uid,\n                            name:        policy.name,\n                            nickname:    policy.nickname,\n                            email:       policy.email,\n                            url:         policy.url,\n                            image_url:   policy.image_url,\n                            description: policy.description,\n                            credentials: policy.credentials,\n                            raw_info:    policy.raw_info )\n  end\n\n  private\n\n    def policy(provider, auth)\n      class_name = \"#{provider}\".classify\n      \"OAuthPolicy::#{class_name}\".constantize.new(auth)\n    end\n\n    def valid_oauth?(auth)\n      (self.provider.to_s == auth['provider'].to_s) && (self.uid == auth['uid'])\n    end\nend\n```\n\n### \u8a8d\u8a3c\u30c7\u30fc\u30bf\u306e\u51e6\u7406\n\n#### OAuthPolicy\n\n- \u5404\u30d7\u30ed\u30d0\u30a4\u30c0\u30fc\u304c\u4f3c\u305f\u3088\u3046\u3067\u5fae\u5999\u306b\u7570\u306a\u308b\u30c7\u30fc\u30bf\u3092\u8fd4\u3057\u3066\u304f\u308b\u306e\u3067\u3001OAuthPolicy\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u4ecb\u3057\u3066OAuth\u30c7\u30fc\u30bf\u3092\u52a0\u5de5\u3059\u308b\u3002\n- \u3053\u308c\u3067SocialProfile\u30e2\u30c7\u30eb\u3067\u306f\u4e00\u8cab\u3057\u305f\u51e6\u7406\u304c\u53ef\u80fd\u306b\u306a\u308a\u3001\u30c7\u30fc\u30bf\u306e\u6c38\u7d9a\u5316\u306b\u5c02\u5ff5\u3067\u304d\u308b\u3002\n\n```rb:/app/helpers/o_auth/o_auth_policy.rb\nmodule OAuthPolicy\n  class Base\n    attr_reader :provider, :uid, :name, :nickname, :email, :url, :image_url,\n                :description, :other, :credentials, :raw_info\n  end\n\n  class Facebook < OAuthPolicy::Base\n    def initialize(auth)\n      @provider    = auth[\"provider\"]\n      @uid         = auth[\"uid\"]\n      @name        = auth[\"info\"][\"name\"]\n      @nickname    = \"\"\n      @email       = \"\"\n      @url         = \"https://www.facebook.com/\"\n      @image_url   = auth[\"info\"][\"image\"]\n      @description = \"\"\n      @credentials = auth[\"credentials\"].to_json\n      @raw_info    = auth[\"extra\"][\"raw_info\"].to_json\n      freeze\n    end\n  end\n\n  class Twitter < OAuthPolicy::Base\n    def initialize(auth)\n      @provider    = auth[\"provider\"]\n      @uid         = auth[\"uid\"]\n      @name        = auth[\"info\"][\"name\"]\n      @nickname    = auth[\"info\"][\"nickname\"]\n      @email       = \"\"\n      @url         = auth[\"info\"][\"urls\"][\"Twitter\"]\n      @image_url   = auth[\"info\"][\"image\"]\n      @description = auth[\"info\"][\"description\"].try(:truncate, 255)\n      @credentials = auth[\"credentials\"].to_json\n      @raw_info    = auth[\"extra\"][\"raw_info\"].to_json\n      freeze\n    end\n  end\nend\n```\n\n#### OAuthService\n\n\u8a8d\u8a3c\u30c7\u30fc\u30bf\u306b\u57fa\u3065\u304d\u30e6\u30fc\u30b6\u30fc\u30a2\u30ab\u30a6\u30f3\u30c8\u3092\u63a2\u3057\u305f\u308a\u3059\u308b\u8af8\u3005\u306e\u51e6\u7406\u3092OAuthService\u3068\u3057\u3066\u307e\u3068\u3081\u305f\u3002\n\n```rb:/app/helpers/o_auth/o_auth_service.rb\nmodule OAuthService\n  class GetOAuthUser\n\n    def self.call(auth)\n      # \u8a8d\u8a3c\u30c7\u30fc\u30bf\u306b\u5bfe\u5fdc\u3059\u308bSocialProfile\u304c\u5b58\u5728\u3059\u308b\u304b\u78ba\u8a8d\u3057\u3001\u306a\u3051\u308c\u3070SocialProfile\u3092\u65b0\u898f\u4f5c\u6210\u3002\n      # \u8a8d\u8a3c\u30c7\u30fc\u30bf\u3092SocialProfile\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306b\u30bb\u30c3\u30c8\u3057\u3001\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u306b\u4fdd\u5b58\u3002\n      profile = SocialProfile.find_for_oauth(auth)\n      # \u30e6\u30fc\u30b6\u30fc\u3092\u63a2\u3059\u3002\n      # \u7b2c\uff11\u5019\u88dc\uff1a\u30ed\u30b0\u30a4\u30f3\u4e2d\u306e\u30e6\u30fc\u30b6\u30fc\u3001\u7b2c\uff12\u5019\u88dc\uff1aSocialProfile\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306b\u7d10\u4ed8\u3051\u3055\u308c\u3066\u3044\u308b\u30e6\u30fc\u30b6\u30fc\u3002\n      user = current_or_profile_user(profile)\n      unless user\n        # \u7b2c\uff13\u5019\u88dc\uff1a\u8a8d\u8a3c\u30c7\u30fc\u30bf\u306bemail\u304c\u542b\u307e\u308c\u3066\u3044\u308c\u3070\u305d\u308c\u3092\u5143\u306b\u30e6\u30fc\u30b6\u30fc\u3092\u63a2\u3059\u3002\n        user = User.where(email: email).first if verified_email_from_oauth(auth)\n        # \u898b\u3064\u304b\u3089\u306a\u3051\u308c\u3070\u3001\u30e6\u30fc\u30b6\u30fc\u3092\u65b0\u898f\u4f5c\u6210\u3002\n        user ||= find_or_create_new_user(auth)\n      end\n      associate_user_with_profile!(user, profile)\n      user\n    end\n\n    private\n\n      class << self\n\n        def current_or_profile_user(profile)\n          user = User.current_user.presence || profile.user\n        end\n\n        # \u898b\u3064\u304b\u3089\u306a\u3051\u308c\u3070\u3001\u30e6\u30fc\u30b6\u30fc\u3092\u65b0\u898f\u4f5c\u6210\u3002email\u306f\u5f8c\u306b\u78ba\u8a8d\u3059\u308b\u306e\u3067\u4eca\u306f\u4eee\u306e\u3082\u306e\u3092\u5165\u308c\u3066\u304a\u304f\u3002\n        # TEMP_EMAIL_PREFIX\u3092\u624b\u639b\u304b\u308a\u306b\u5f8c\u306b\u4eee\u306e\u3082\u306e\u304b\u3069\u3046\u304b\u306e\u5224\u5225\u304c\u53ef\u80fd\u3002\n        # OmniAuth\u8a8d\u8a3c\u6642\u306f\u30d1\u30b9\u30ef\u30fc\u30c9\u5165\u529b\u306f\u514d\u9664\u3059\u308b\u306e\u3067\u3001\u30e9\u30f3\u30c0\u30e0\u306e\u30d1\u30b9\u30ef\u30fc\u30c9\u3092\u5165\u308c\u3066\u304a\u304f\u3002\n        def find_or_create_new_user(auth)\n          # Query for user if verified email is provided\n          email = verified_email_from_oauth(auth)\n          user = User.where(email: email).first if email\n          if user.nil?\n            temp_email = \"#{User::TEMP_EMAIL_PREFIX}-#{auth.uid}-#{auth.provider}.com\"\n            user = User.new(\n              username: auth.extra.raw_info.name,\n              email:    email ? email : temp_email,\n              password: Devise.friendly_token[0,20]\n            )\n            # email\u78ba\u8a8d\u30e1\u30fc\u30eb\u9001\u4fe1\u3092\u5ef6\u671f\u3059\u308b\u305f\u3081\u306b\u4e00\u6642\u7684\u306bemail\u78ba\u8a8d\u6e08\u307f\u306e\u72b6\u614b\u306b\u3059\u308b\u3002\n            user.skip_confirmation!\n            # email\u4eee\u3092\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u306b\u4fdd\u5b58\u3059\u308b\u305f\u3081\u3001validation\u3092\u4e00\u6642\u7684\u306b\u7121\u52b9\u5316\u3002\n            user.save(validate: false)\n            user\n          end\n        end\n\n        def verified_email_from_oauth(auth)\n          auth.info.email if auth.info.email && (auth.info.verified || auth.info.verified_email)\n        end\n\n        # \u30e6\u30fc\u30b6\u30fc\u3068SocialProfile\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u95a2\u9023\u3065\u3051\u308b\u3002\n        def associate_user_with_profile!(user, profile)\n          profile.update!(user_id: user.id) if profile.user != user\n        end\n      end\n    end\nend\n```\n\n### \u30eb\u30fc\u30c6\u30a3\u30f3\u30b0\n\n```rb:/config/routes.rb\nRails.application.routes.draw do\n  ...\n\n  # Devise\u306e\u30b3\u30f3\u30c8\u30ed\u30fc\u30e9\u3092\u4e0a\u66f8\u304d\u3059\u308b\u305f\u3081\u3002\n  devise_for :users, controllers: { omniauth_callbacks: 'omniauth_callbacks',\n                                    registrations: \"registrations\",\n                                    confirmations: \"confirmations\" }\n\n  # OmniAuth\u8a8d\u8a3c\u5f8c\u3001email\u5165\u529b\u3092\u6c42\u3081\u308b\u51e6\u7406\u306e\u305f\u3081\u3002\n  match '/users/:id/finish_signup' => 'users#finish_signup', via: [:get, :patch], as: :finish_signup\n  ...\nend\n```\n\n### \u30b3\u30f3\u30c8\u30ed\u30fc\u30e9\n\n#### omniauth_callbacks_controller\n\n```rb:/app/controllers/omniauth_callbacks_controller.rb\nclass OmniauthCallbacksController < Devise::OmniauthCallbacksController\n\n  # \u3044\u304f\u3064\u30d7\u30ed\u30d0\u30a4\u30c0\u30fc\u3092\u5229\u7528\u3057\u3088\u3046\u304c\u51e6\u7406\u306f\u5171\u901a\u3057\u3066\u3044\u308b\u306e\u3067\u672c\u30e1\u30bd\u30c3\u30c9\u3092\u30a8\u30a4\u30ea\u30a2\u30b9\u3068\u3057\u3066\u6d41\u7528\u3002\n  def callback_for_all_providers\n    unless env[\"omniauth.auth\"].present?\n      flash[:danger] = \"Authentication data was not provided\"\n      redirect_to root_url and return\n    end\n    provider = __callee__.to_s\n    user = OAuthService::GetOAuthUser.call(env[\"omniauth.auth\"])\n    # \u30e6\u30fc\u30b6\u30fc\u304c\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u306b\u4fdd\u5b58\u3055\u308c\u3066\u304a\u308a\u3001\u4e14\u3064email\u3092\u78ba\u8a8d\u6e08\u307f\u3067\u3042\u308c\u3070\u3001\u30e6\u30fc\u30b6\u30fc\u3092\u30ed\u30b0\u30a4\u30f3\u3059\u308b\u3002\n    if user.persisted? && user.email_verified?\n      sign_in_and_redirect user, event: :authentication\n      set_flash_message(:notice, :success, kind: provider.capitalize) if is_navigational_format?\n    else\n      user.reset_confirmation!\n      flash[:warning] = \"We need your email address before proceeding.\"\n      redirect_to finish_signup_path(user)\n    end\n  end\n  alias_method :facebook, :callback_for_all_providers\n  alias_method :twitter,  :callback_for_all_providers\nend\n```\n\n#### users_controller\n\n```rb:/app/controllers/users_controller.rb\nclass UsersController < ApplicationController\n  before_action :authenticate_user!, except: :finish_signup\n\n  ...\n\n  # OAuth\u8a8d\u8a3c\u306b\u3088\u308b\u65b0\u898f\u767b\u9332\u306e\u7de0\u3081\u3092\u53f8\u308b\u30a2\u30af\u30b7\u30e7\u30f3\u3002\n  # \u30e6\u30fc\u30b6\u30fc\u30c7\u30fc\u30bf\u3092\u66f4\u65b0\u306b\u6210\u529f\u3057\u305f\u3089\u3001email\u78ba\u8a8d\u30e1\u30fc\u30eb\u3092\u9001\u4ed8\u3059\u308b\u3002\n  # GET   /users/:id/finish_signup - \u5fc5\u8981\u30c7\u30fc\u30bf\u306e\u5165\u529b\u3092\u6c42\u3081\u308b\u3002\n  # PATCH /users/:id/finish_signup - \u30e6\u30fc\u30b6\u30fc\u30c7\u30fc\u30bf\u3092\u66f4\u65b0\u3002\n  def finish_signup\n    @user = User.find(params[:id])\n    if request.patch? && @user.update(user_params)\n      @user.send_confirmation_instructions unless @user.confirmed?\n      flash[:info] = 'We sent you a confirmation email. Please find a confirmation link.'\n      redirect_to root_url\n    end\n  end\n\n  ...\n\n  private\n\n    # user_params\u306b\u30a2\u30af\u30bb\u30b9\u3059\u308b\u305f\u3081\u3002\n    def user_params\n      accessible = [ :username, :email ]\n      accessible << [ :password, :password_confirmation ] unless params[:user][:password].blank?\n      params.require(:user).permit(accessible)\n    end\n    ...\nend\n```\n\n\u30d5\u30a9\u30fc\u30e0\n\n```slim:app/views/users/finish_signup.html.slim\n.row\n  .col-sm-offset-3.col-sm-6\n    h1 Add Email\n    = simple_form_for(@user, url: finish_signup_path(@user)) do |f|\n      = f.input :username, autofocus: true, class: 'form-control', placeholder: \"Username\"\n      = f.input :email, autofocus: true, class: 'form-control', placeholder: \"Email\"\n      .form-group\n        = f.submit 'Add email', class: 'btn btn-primary'\n```\n\n\n\n#### social_profiles_controller\n\nFacebook/Twitter\u3078\u306e\u63a5\u7d9a\u3092\u89e3\u9664\u3059\u308b\u3002\n\n```rb:/app/controllers/social_profiles_controller.rb\nclass SocialProfilesController < ApplicationController\n  before_action :authenticate_user!\n  before_action :correct_user!\n\n  def destroy\n    @profile.destroy\n    flash[:success] = \"Disconnected from #{@profile.provider.capitalize}\"\n    redirect_to root_url\n  end\n\n  private\n\n    def correct_user!\n      @profile = SocialProfile.find(params[:id])\n      redirect_to root_url and return unless @profile.user_id == current_user.id\n    end\nend\n```\n\n#### confirmations_controller\n\nemail\u78ba\u8a8d\u30e1\u30fc\u30eb\u306e\u30ea\u30f3\u30af\u3092\u30af\u30ea\u30c3\u30af\u3057\u305f\u3089\u5373\u3001\u30ed\u30b0\u30a4\u30f3\u3059\u308b\u305f\u3081\u4e0a\u66f8\u304d\u3002\n\n```rb:/app/controllers/confirmations_controller.rb\nclass ConfirmationsController < Devise::ConfirmationsController\n\n  # Override\n  def show\n    self.resource = resource_class.confirm_by_token(params[:confirmation_token])\n    yield resource if block_given?\n\n    if resource.errors.empty?\n      set_flash_message(:notice, :confirmed) if is_flashing_format?\n\n      sign_in(resource) #<== \u3053\u306e\u4e00\u884c\u3092\u52a0\u3048\u308b\u306e\u307f\n\n      respond_with_navigational(resource){ redirect_to after_confirmation_path_for(resource_name, resource) }\n    else\n      respond_with_navigational(resource.errors, :status => :unprocessable_entity){ render :new }\n    end\n  end\nend\n```\n\n#### registrations_controller\n\nOmniAuth\u3067\u8a8d\u8a3c\u306e\u30e6\u30fc\u30b6\u30fc\u306b\u5bfe\u3057\u3066\u3001\u30d1\u30b9\u30ef\u30fc\u30c9\u5165\u529b\u3092\u514d\u9664\u3055\u305b\u308b\u305f\u3081\u4e0a\u66f8\u304d\u3002\n\n```rb:/app/controllers/registrations_controller.rb\nclass RegistrationsController < Devise::RegistrationsController\n\n  protected\n\n  # Override\n  def update_resource(resource, params)\n    resource.update_without_password(params)\n  end\nend\n```\n\n## \u30c6\u30b9\u30c8\n\n- [OmniAuth\u306e\u30c6\u30b9\u30c8](http://qiita.com/mnishiguchi/items/3d6a4ec36c2237a11660)\n- [email\u78ba\u8a8d(confirmable)\u306e\u30c6\u30b9\u30c8](http://qiita.com/mnishiguchi/items/ff480b681537c99daeaa)\n\n\n## \u53c2\u8003\u8cc7\u6599\n\nDevise\n\n- [README](http://www.rubydoc.info/github/plataformatec/devise/)\n- [OmniAuth: Overview](https://github.com/plataformatec/devise/wiki/OmniAuth%3A-Overview)\n- [How To: Allow users to edit their account without providing a password](https://github.com/plataformatec/devise/wiki/How-To:-Allow-users-to-edit-their-account-without-providing-a-password)\n- [How to: Use a custom email validator with Devise](https://github.com/plataformatec/devise/wiki/How-to:-Use-a-custom-email-validator-with-Devise)\n- [Allowing Unconfirmed Access](https://github.com/plataformatec/devise/wiki/How-To:-Add-:confirmable-to-Users#allowing-unconfirmed-access)\n- [Create a username field in the users table](https://github.com/plataformatec/devise/wiki/How-To:-Allow-users-to-sign-in-using-their-username-or-email-address#create-a-username-field-in-the-users-table)\n\nOmniAuth\n\n- [omniauth](https://github.com/intridea/omniauth)\n- [omniauth-facebook](https://github.com/mkdynamic/omniauth-facebook)\n- [omniauth-twitter](https://github.com/arunagw/omniauth-twitter)\n\n\u5b9f\u88c5\u6280\u8853\n\n- [Rails 4 OmniAuth using Devise with Twitter, Facebook and Linkedin](http://sourcey.com/rails-4-omniauth-using-devise-with-twitter-facebook-and-linkedin/)\n- [Rails\u3067\u3044\u308d\u3093\u306aSNS\u3068OAuth\u9023\u643a/\u30ed\u30b0\u30a4\u30f3\u3059\u308b\u65b9\u6cd5](http://qiita.com/awakia/items/03dd68dea5f15dc46c15)\n- [Rails4 \u3067 Devise \u3068 OmniAuth \u3067\u3001Twitter/Facebook \u306eOAuth\u8a8d\u8a3c\u3068\u901a\u5e38\u30d5\u30a9\u30fc\u30e0\u3067\u306e\u8a8d\u8a3c\u3092\u4f75\u7528\u3057\u3066\u5b9f\u88c5](http://easyramble.com/implement-devise-and-ominiauth-on-rails.html)\n- [Clean OAuth for Rails: An Object-Oriented Approach](http://davidlesches.com/blog/clean-oauth-for-rails-an-object-oriented-approach)\n- [rails \u3067 params \u306b\u5bfe\u3057\u3066\u8907\u96d1\u306a\u51e6\u7406\u3092\u3059\u308b\u3068\u304d\u306e\u30d9\u30b9\u30c8\u30d7\u30e9\u30af\u30c6\u30a3\u30b9\u306f\uff1f](http://qa.atmarkit.co.jp/q/3005)\n- [\u4e2d\u898f\u6a21Web\u958b\u767a\u306e\u305f\u3081\u306eMVC\u5206\u5272\u3068\u30ec\u30a4\u30e4\u30a2\u30fc\u30ad\u30c6\u30af\u30c1\u30e3](http://qiita.com/yuku_t/items/961194a5443b618a4cac)\n", "tags": ["Rails", "Ruby", "devise", "OmniAuth", "Qiita"]}