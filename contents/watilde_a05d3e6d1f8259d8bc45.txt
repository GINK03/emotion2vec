{"context": " More than 1 year has passed since last update.Backbone.Model\u306evalidate\u306f\u3068\u3063\u3066\u3082\u81ea\u7531\u306a\u306e\u3067\n\u305f\u3081\u3057\u306bBackbone.Model.defaults \u306b\u30e1\u30bf\u60c5\u5831\u3092\u4ed8\u52a0\u3057\u3066\u307f\u307e\u3057\u305f\nvar Model = Backbone.Model.extend({\n  defaults: {\n    // \u30d7\u30ed\u30d1\u30c6\u30a3\u540d\n    name: {\n      value: 'foo', // \u30c7\u30d5\u30a9\u30eb\u30c8\u5024\n      type: 'string'  // \u578b\u60c5\u5831\n    }\n  },\n  validate: function (attributes) {\n    var defaults = this.defaults, type, required;\n    _.each(defaults, function (value, key) {\n      type = value.type;\n      required = value.required;\n      switch (type) {\n        case 'element' :\n          if (!_.isElement(attributes[key])) {\n            throw new TypeError('Invalid type argument of \"' + key + '\"');\n          }\n          break;\n        case 'array' :\n          if (!_.isArray(attributes[key])) {\n            throw new TypeError('Invalid type argument of \"' + key + '\"');\n          }\n          break;\n        case 'object' :\n          if (!_.isObject(attributes[key])) {\n            throw new TypeError('Invalid type argument of \"' + key + '\"');\n          }\n          break;\n        case 'function' :\n          if (!_.isFunction(attributes[key])) {\n            throw new TypeError('Invalid type argument of \"' + key + '\"');\n          }\n          break;\n        case 'string' :\n          if (!_.isString(attributes[key])) {\n            throw new TypeError('Invalid type argument of \"' + key + '\"');\n          }\n          break;\n        case 'number' :\n          if (!_.isNumber(attributes[key])) {\n            throw new TypeError('Invalid type argument of \"' + key + '\"');\n          }\n          break;\n        case 'boolean' :\n          if (!_.isBoolean(attributes[key])) {\n            throw new TypeError('Invalid type argument of \"' + key + '\"');\n          }\n          break;\n        case 'date' :\n          if (!_.isDate(attributes[key])) {\n            throw new TypeError('Invalid type argument of \"' + key + '\"');\n          }\n          break;\n        case 'regExp' :\n          if (!_.isRegExp(attributes[key])) {\n            throw new TypeError('Invalid type argument of \"' + key + '\"');\n          }\n          break;\n      }\n    });\n  }\n});\n\n\u3042\u3068\u306ftry-catch \u3067\u547c\u3073\u51fa\u305b\u3070validate\u304c\u53ef\u80fd\u3068\u306a\u308a\u307e\u3059\u3002\ntry {\n  var model  = new Model({name: 123});\n  model.isValid(); // validate\n}  catch (Exception) {\n  console.log(Exception.name + ': ' + Exception.message);\n  // => TypeError: Invalid type argument of \"name\"\n}\n\n\u3053\u308c\u306b\u52a0\u3048\u3001defaults.value \u3092\u30cf\u30f3\u30c9\u30ea\u30f3\u30b0\u3059\u308b\u306e\u306b\nBackbone.Model \u306econstructor \u3092\u66f8\u304d\u63db\u3048\u308b\u3002\n  // Backbone.Model\n  // --------------\n\n  // Backbone **Models** are the basic data object in the framework --\n  // frequently representing a row in a table in a database on your server.\n  // A discrete chunk of data and a bunch of useful, related methods for\n  // performing computations and transformations on that data.\n\n  // Create a new model with the specified attributes. A client id (`cid`)\n  // is automatically generated and assigned for you.\n  var Model = Backbone.Model = function(attributes, options) {\n    var attrs = attributes || {}, default_memo;\n    var defaults = _.reduce(this.defaults, function (memo, list, key) {\n      default_memo = {};\n      default_memo[key] = list.value;\n      return _.extend(memo, default_memo);\n    }, {});\n    options || (options = {});\n    this.cid = _.uniqueId('c');\n    this.attributes = {};\n    if (options.collection) this.collection = options.collection;\n    if (options.parse) attrs = this.parse(attrs, options) || {};\n    attrs = _.defaults({}, attrs, defaults);\n    this.set(attrs, options);\n    this.changed = {};\n    this.initialize.apply(this, arguments);\n  };\n\n\u3053\u308c\u3067\u3001\u30c7\u30d5\u30a9\u30eb\u30c8\u5024\u3082\u53cd\u6620\u3055\u308c\u308b\ntry {\n  var model  = new Model({});\n  model.get('name'); // => foo\n}  catch (Exception) {\n  console.log(Exception.name + ': ' + Exception.message);\n}\n\n\u304a\u3057\u307e\u3044\u3002\nBackbone.Model\u306evalidate\u306f\u3068\u3063\u3066\u3082\u81ea\u7531\u306a\u306e\u3067\n\u305f\u3081\u3057\u306b```Backbone.Model.defaults``` \u306b\u30e1\u30bf\u60c5\u5831\u3092\u4ed8\u52a0\u3057\u3066\u307f\u307e\u3057\u305f\n\n```js\nvar Model = Backbone.Model.extend({\n  defaults: {\n    // \u30d7\u30ed\u30d1\u30c6\u30a3\u540d\n    name: {\n      value: 'foo', // \u30c7\u30d5\u30a9\u30eb\u30c8\u5024\n      type: 'string'  // \u578b\u60c5\u5831\n    }\n  },\n  validate: function (attributes) {\n    var defaults = this.defaults, type, required;\n    _.each(defaults, function (value, key) {\n      type = value.type;\n      required = value.required;\n      switch (type) {\n        case 'element' :\n          if (!_.isElement(attributes[key])) {\n            throw new TypeError('Invalid type argument of \"' + key + '\"');\n          }\n          break;\n        case 'array' :\n          if (!_.isArray(attributes[key])) {\n            throw new TypeError('Invalid type argument of \"' + key + '\"');\n          }\n          break;\n        case 'object' :\n          if (!_.isObject(attributes[key])) {\n            throw new TypeError('Invalid type argument of \"' + key + '\"');\n          }\n          break;\n        case 'function' :\n          if (!_.isFunction(attributes[key])) {\n            throw new TypeError('Invalid type argument of \"' + key + '\"');\n          }\n          break;\n        case 'string' :\n          if (!_.isString(attributes[key])) {\n            throw new TypeError('Invalid type argument of \"' + key + '\"');\n          }\n          break;\n        case 'number' :\n          if (!_.isNumber(attributes[key])) {\n            throw new TypeError('Invalid type argument of \"' + key + '\"');\n          }\n          break;\n        case 'boolean' :\n          if (!_.isBoolean(attributes[key])) {\n            throw new TypeError('Invalid type argument of \"' + key + '\"');\n          }\n          break;\n        case 'date' :\n          if (!_.isDate(attributes[key])) {\n            throw new TypeError('Invalid type argument of \"' + key + '\"');\n          }\n          break;\n        case 'regExp' :\n          if (!_.isRegExp(attributes[key])) {\n            throw new TypeError('Invalid type argument of \"' + key + '\"');\n          }\n          break;\n      }\n    });\n  }\n});\n```\n\n\u3042\u3068\u306f```try-catch``` \u3067\u547c\u3073\u51fa\u305b\u3070validate\u304c\u53ef\u80fd\u3068\u306a\u308a\u307e\u3059\u3002\n\n```js\ntry {\n  var model  = new Model({name: 123});\n  model.isValid(); // validate\n}  catch (Exception) {\n  console.log(Exception.name + ': ' + Exception.message);\n  // => TypeError: Invalid type argument of \"name\"\n}\n```\n\n\u3053\u308c\u306b\u52a0\u3048\u3001```defaults.value``` \u3092\u30cf\u30f3\u30c9\u30ea\u30f3\u30b0\u3059\u308b\u306e\u306b\n```Backbone.Model``` \u306e```constructor``` \u3092\u66f8\u304d\u63db\u3048\u308b\u3002\n\n```js\n  // Backbone.Model\n  // --------------\n\n  // Backbone **Models** are the basic data object in the framework --\n  // frequently representing a row in a table in a database on your server.\n  // A discrete chunk of data and a bunch of useful, related methods for\n  // performing computations and transformations on that data.\n\n  // Create a new model with the specified attributes. A client id (`cid`)\n  // is automatically generated and assigned for you.\n  var Model = Backbone.Model = function(attributes, options) {\n    var attrs = attributes || {}, default_memo;\n    var defaults = _.reduce(this.defaults, function (memo, list, key) {\n      default_memo = {};\n      default_memo[key] = list.value;\n      return _.extend(memo, default_memo);\n    }, {});\n    options || (options = {});\n    this.cid = _.uniqueId('c');\n    this.attributes = {};\n    if (options.collection) this.collection = options.collection;\n    if (options.parse) attrs = this.parse(attrs, options) || {};\n    attrs = _.defaults({}, attrs, defaults);\n    this.set(attrs, options);\n    this.changed = {};\n    this.initialize.apply(this, arguments);\n  };\n```\n\n\u3053\u308c\u3067\u3001\u30c7\u30d5\u30a9\u30eb\u30c8\u5024\u3082\u53cd\u6620\u3055\u308c\u308b\n\n```js\ntry {\n  var model  = new Model({});\n  model.get('name'); // => foo\n}  catch (Exception) {\n  console.log(Exception.name + ': ' + Exception.message);\n}\n```\n\n\u304a\u3057\u307e\u3044\u3002", "tags": ["Backbone.js1.1.0", "JavaScript"]}