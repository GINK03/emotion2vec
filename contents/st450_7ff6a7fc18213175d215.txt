{"tags": ["C#", "\u975e\u540c\u671f\u51e6\u7406"], "context": " \u3053\u306e\u8a18\u4e8b\u306f\u6700\u7d42\u66f4\u65b0\u65e5\u304b\u30891\u5e74\u4ee5\u4e0a\u304c\u7d4c\u904e\u3057\u3066\u3044\u307e\u3059\u3002\n\n\u306f\u3058\u3081\u306b\nSQL Server\u306b\u5927\u91cf\u306e\u30c7\u30fc\u30bf\u3092\u5909\u63db\u3057\u306a\u304c\u3089\u51fa\u529b\u3057\u305f\u3044\u5834\u5408\u3001\uff11\u30c6\u30fc\u30d6\u30eb\u306a\u3089IEnumerable \u304b\u3089 IDataReader \u3078\u5909\u63db\u3067\u51fa\u6765\u308b\u3002\n\uff11\u3064\u306e\u30c6\u30fc\u30d6\u30eb\u304b\u3089\u8907\u6570\u306e\u30c6\u30fc\u30d6\u30eb\u3078\u51fa\u529b\u3059\u308b\u5834\u5408\u3001\u52b9\u7387\u3088\u304f\u5909\u63db\u3059\u308b\u65b9\u6cd5\u306f\u306a\u3044\u304b\u3068\u8abf\u3079\u305f\u3068\u3053\u308d\u3001Microsoft TPL Dataflow \u3092\u898b\u3064\u3051\u305f\u3002\n\u306a\u305c\u975e\u540c\u671f\u3092\u4f7f\u3046\u306e\u304b\uff1f\n\n\u30e1\u30e2\u30ea\u306e\u8ca0\u62c5\u3092\u304b\u3051\u306a\u3044\u305f\u3081\u306b\u306fIEnumerable\u3092\u4f7f\u3044\u305f\u3044\uff08\u305d\u308c\u3057\u304b\u77e5\u3089\u306a\u3044\uff09\nIEnumurable\u3092\u4f7f\u3046\u3068\u30c6\u30fc\u30d6\u30eb\u3092\u51fa\u529b\u3059\u308b\u5ea6\u306b\u30c7\u30fc\u30bf\u3092\u8aad\u3080\uff08\u52b9\u7387\u304c\u3088\u304f\u306a\u3044\uff09\n\u975e\u540c\u671f\u306b\u3059\u308b\u3053\u3068\u3067\u5165\u529b\u3068\u51fa\u529b\u304c\u540c\u6642\u306b\u52d5\u304b\u305b\u308b\u3053\u3068\u304c\u51fa\u6765\u308b\n\nTPL\u3092\u3069\u306e\u3088\u3046\u306b\u4f7f\u3048\u3070\u826f\u3044\u306e\u304b\u8a66\u884c\u932f\u8aa4\u3057\u3066\u3001\u975e\u540c\u671f\u3067IEnumurable\u3092\u8fd4\u3059\u30af\u30e9\u30b9\u3092\u4f5c\u6210\u3057\u3066\u307f\u305f\u3002\n\u3053\u308c\u3067\u3001IDataReader\u306b\u5909\u63db\u3057\u3066\u3001SqlBulkCopy\u306b\u6e21\u3059\u3053\u3068\u304c\u3067\u304d\u308b\u3002\n\n\u6e96\u5099\nMicrosoft TPL Dataflow \u306fNuget\u3067\u53d6\u5f97\u3059\u308b\u3002\n\n\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\nusing System;\nusing System.Collections;\nusing System.Collections.Generic;\nusing System.Threading.Tasks;\nusing System.Threading.Tasks.Dataflow;\nusing System.Threading;\n\nclass DataflowReadWrite\n{\n    class OutBuffer<T>\n    {\n        private BufferBlock<T> buf = new BufferBlock<T>();\n\n        private bool isEnd = false;\n\n        public void Post(T val)\n        {\n            buf.Post(val);\n        }\n\n        public void Complite()\n        {\n            isEnd = true;\n        }\n\n        public IEnumerable<T> AsEnumerable()\n        {\n            // 0.5\u79d2\u5f85\u3063\u3066\u3082\u30c7\u30fc\u30bf\u304c\u306a\u3044\u5834\u5408\u7d42\u4e86\u306e\u5224\u65ad\u3092\u3059\u308b\n            var tsLimit = new TimeSpan(0, 0, 0, 0, 500);\n            while (!isEnd || buf.Count > 0)\n            {\n                T val;\n                try\n                {\n                    val = buf.Receive(tsLimit);\n                    Console.WriteLine(\"recive val:{0}\", val.ToString());\n                }\n                catch (Exception ex)\n                {\n                    Console.WriteLine(ex.Message);\n                    continue;\n                }\n                // yield return \u306ftry\u306e\u4e2d\u306b\u306f\u304b\u3051\u306a\u3044\n                yield return val;\n            }\n\n        }\n\n\n    }\n\n    static void Main(string[] args)\n    {\n\n        var buf1 = new OutBuffer<int>();\n        var ite1 = buf1.AsEnumerable();\n        var buf2 = new OutBuffer<int>();\n        var ite2 = buf2.AsEnumerable();\n\n        var reder = Task.Run(() =>\n        {\n            for (int i = 0; i < 10; i++)\n            {\n                buf1.Post(i);\n                buf2.Post(i);\n                Thread.Sleep(1000);\n                Console.WriteLine(\"send val:{0}\", i);\n            }\n            buf1.Complite();\n            buf2.Complite();\n\n        });\n        var writer1 = Task.Run(() =>\n        {\n            foreach (var val in ite1)\n                Console.WriteLine(\"Write1 val:{0}\", val);\n        });\n        var writer2 = Task.Run(() =>\n        {\n            foreach (var val in ite2)\n                Console.WriteLine(\"Write2 val:{0}\", val);\n        });\n        Task.WaitAll(reder, writer1, writer2);\n\n    }\n}\n\n\n#\u306f\u3058\u3081\u306b\nSQL Server\u306b\u5927\u91cf\u306e\u30c7\u30fc\u30bf\u3092\u5909\u63db\u3057\u306a\u304c\u3089\u51fa\u529b\u3057\u305f\u3044\u5834\u5408\u3001\uff11\u30c6\u30fc\u30d6\u30eb\u306a\u3089[IEnumerable \u304b\u3089 IDataReader \u3078\u5909\u63db](http://qiita.com/st450/items/831d90990658e023a679)\u3067\u51fa\u6765\u308b\u3002\n\uff11\u3064\u306e\u30c6\u30fc\u30d6\u30eb\u304b\u3089\u8907\u6570\u306e\u30c6\u30fc\u30d6\u30eb\u3078\u51fa\u529b\u3059\u308b\u5834\u5408\u3001\u52b9\u7387\u3088\u304f\u5909\u63db\u3059\u308b\u65b9\u6cd5\u306f\u306a\u3044\u304b\u3068\u8abf\u3079\u305f\u3068\u3053\u308d\u3001Microsoft TPL Dataflow \u3092\u898b\u3064\u3051\u305f\u3002\n\u306a\u305c\u975e\u540c\u671f\u3092\u4f7f\u3046\u306e\u304b\uff1f\n\n1. \u30e1\u30e2\u30ea\u306e\u8ca0\u62c5\u3092\u304b\u3051\u306a\u3044\u305f\u3081\u306b\u306fIEnumerable\u3092\u4f7f\u3044\u305f\u3044\uff08\u305d\u308c\u3057\u304b\u77e5\u3089\u306a\u3044\uff09\n2. IEnumurable\u3092\u4f7f\u3046\u3068\u30c6\u30fc\u30d6\u30eb\u3092\u51fa\u529b\u3059\u308b\u5ea6\u306b\u30c7\u30fc\u30bf\u3092\u8aad\u3080\uff08\u52b9\u7387\u304c\u3088\u304f\u306a\u3044\uff09\n3. \u975e\u540c\u671f\u306b\u3059\u308b\u3053\u3068\u3067\u5165\u529b\u3068\u51fa\u529b\u304c\u540c\u6642\u306b\u52d5\u304b\u305b\u308b\u3053\u3068\u304c\u51fa\u6765\u308b\n\nTPL\u3092\u3069\u306e\u3088\u3046\u306b\u4f7f\u3048\u3070\u826f\u3044\u306e\u304b\u8a66\u884c\u932f\u8aa4\u3057\u3066\u3001\u975e\u540c\u671f\u3067IEnumurable\u3092\u8fd4\u3059\u30af\u30e9\u30b9\u3092\u4f5c\u6210\u3057\u3066\u307f\u305f\u3002\n\u3053\u308c\u3067\u3001IDataReader\u306b\u5909\u63db\u3057\u3066\u3001SqlBulkCopy\u306b\u6e21\u3059\u3053\u3068\u304c\u3067\u304d\u308b\u3002\n\n#\u6e96\u5099\nMicrosoft TPL Dataflow \u306f[Nuget](https://www.nuget.org/packages/Microsoft.Tpl.Dataflow/4.5.24)\u3067\u53d6\u5f97\u3059\u308b\u3002\n\n#\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\n```csharp\nusing System;\nusing System.Collections;\nusing System.Collections.Generic;\nusing System.Threading.Tasks;\nusing System.Threading.Tasks.Dataflow;\nusing System.Threading;\n\nclass DataflowReadWrite\n{\n    class OutBuffer<T>\n    {\n        private BufferBlock<T> buf = new BufferBlock<T>();\n\n        private bool isEnd = false;\n\n        public void Post(T val)\n        {\n            buf.Post(val);\n        }\n\n        public void Complite()\n        {\n            isEnd = true;\n        }\n\n        public IEnumerable<T> AsEnumerable()\n        {\n            // 0.5\u79d2\u5f85\u3063\u3066\u3082\u30c7\u30fc\u30bf\u304c\u306a\u3044\u5834\u5408\u7d42\u4e86\u306e\u5224\u65ad\u3092\u3059\u308b\n            var tsLimit = new TimeSpan(0, 0, 0, 0, 500);\n            while (!isEnd || buf.Count > 0)\n            {\n                T val;\n                try\n                {\n                    val = buf.Receive(tsLimit);\n                    Console.WriteLine(\"recive val:{0}\", val.ToString());\n                }\n                catch (Exception ex)\n                {\n                    Console.WriteLine(ex.Message);\n                    continue;\n                }\n                // yield return \u306ftry\u306e\u4e2d\u306b\u306f\u304b\u3051\u306a\u3044\n                yield return val;\n            }\n\n        }\n        \n\n    }\n\n    static void Main(string[] args)\n    {\n\n        var buf1 = new OutBuffer<int>();\n        var ite1 = buf1.AsEnumerable();\n        var buf2 = new OutBuffer<int>();\n        var ite2 = buf2.AsEnumerable();\n\n        var reder = Task.Run(() =>\n        {\n            for (int i = 0; i < 10; i++)\n            {\n                buf1.Post(i);\n                buf2.Post(i);\n                Thread.Sleep(1000);\n                Console.WriteLine(\"send val:{0}\", i);\n            }\n            buf1.Complite();\n            buf2.Complite();\n\n        });\n        var writer1 = Task.Run(() =>\n        {\n            foreach (var val in ite1)\n                Console.WriteLine(\"Write1 val:{0}\", val);\n        });\n        var writer2 = Task.Run(() =>\n        {\n            foreach (var val in ite2)\n                Console.WriteLine(\"Write2 val:{0}\", val);\n        });\n        Task.WaitAll(reder, writer1, writer2);\n\n    }\n}\n\n```\n\n\n\n"}