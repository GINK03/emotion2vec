{"tags": ["Java", "PlayFramework", "Ebean"], "context": " More than 1 year has passed since last update.\u5b9f\u73fe\u3059\u308b\u306b\u306f\u3001BeanPersistController\u3068BeanPersistListener\u306e\u3069\u3061\u3089\u304b\u3092\u5b9f\u88c5\u3057\u307e\u3059\u3002\n\u524d\u8005\u306fcommit\u524d\u3001\u5f8c\u8005\u306fcommit\u5f8c\u306b\u5b9f\u884c\u3055\u308c\u307e\u3059\u3002\u7528\u9014\u306b\u3042\u308f\u305b\u3066\u4f7f\u3044\u5206\u3051\u307e\u3057\u3087\u3046\u3002\u4f8b\u3048\u3070\u3001\u5909\u66f4\u306e\u5c65\u6b74\u3092\u8a18\u9332\u3059\u308b\u306e\u3067\u3042\u308c\u3070\u3001\u5f8c\u8005\u306e\u65b9\u304c\u5411\u3044\u3066\u3044\u308b\u3067\u3057\u3087\u3046\u3002\n\nBeanPersistListener only sees successfully committed events. BeanPersistController pre and post methods occur before the commit or a rollback and will see events that are later rolled back\n\n\u6ce8\u610f\u3059\u308b\u306e\u306f\u3001Ebean\u306eentity\u3092\u6271\u3046package\u4ee5\u4e0b\u306b\u3064\u304f\u308b\u3053\u3068\u3067\u3059\u3002ebean.default=models.*,server.*\n\nBeanPersistController\nhttp://ebean-orm.github.io/apidocs/com/avaje/ebean/event/BeanPersistController.html\n\u4e00\u90e8\u3060\u3051\u5b9a\u7fa9\u3057\u305f\u3044\u5834\u5408\u306f\u3001BeanPersistAdapter\u304c\u5b9f\u88c5\u6e08\u307f\u306a\u306e\u3067\u3001\u305d\u308c\u3092\u7d99\u627f\u3057\u305f\u30af\u30e9\u30b9\u3067\u5fc5\u8981\u306a\u3082\u306e\u3060\u3051\u3067override\u3059\u308b\u306e\u3082\u3088\u3044\u3067\u3057\u3087\u3046\u3002\n\nMyBeanPersistController.java\n\npackage server;\n\npublic class MyBeanPersistController implements BeanPersistController {\n\n    /**\n     * PersistController\u306e\u512a\u5148\u9806\u4f4d\u3092\u8fd4\u5374.\n     */\n    @Override\n    public int getExecutionOrder() {\n        return 0;\n    }\n\n    /**\n     * \u9069\u7528\u3057\u305f\u3044Bean\u306e\u30af\u30e9\u30b9\u304b\u3069\u3046\u304b\u306e\u5224\u5b9a.\n     */\n    @Override\n    public boolean isRegisterFor(Class<?> clazz) {\n        return clazz.equals(Hoge.class) || clazz.equals(Foo.class) || clazz.equals(Bar.class);\n    }\n\n    /**\n     * delete\u30e1\u30bd\u30c3\u30c9\u5f8c\u306e\u51e6\u7406.\n     */\n    @Override\n    public void postDelete(BeanPersistRequest<?> request) {\n           Object bean = request.getBean(); //Bean\u306e\u53d6\u308a\u51fa\u3057\n           Logger.info(bean);        \n    }\n\n    /**\n     * save\u30e1\u30bd\u30c3\u30c9\u5f8c\u306e\u51e6\u7406.\n     */\n    @Override\n    public void postInsert(BeanPersistRequest<?> request) {\n\n    }\n\n\u3000\u3000/**\n     * refresh\u30e1\u30bd\u30c3\u30c9\u5f8c\u306e\u51e6\u7406.\n     */\n    @Override\n    public void postLoad(Object arg0, Set<String> arg1) {\n\n    }\n\n\u3000\u3000/**\n     * update\u30e1\u30bd\u30c3\u30c9\u5f8c\u306e\u51e6\u7406.\n     */\n    @Override\n    public void postUpdate(BeanPersistRequest<?> request) {\n\n    }\n\n\u3000\u3000/**\n     * delete\u524d\u306e\u51e6\u7406. \u6a19\u6e96\u306e\u307e\u307e\u3067\u826f\u3044\u306a\u3089true\u3092\u8fd4\u3059.\n     */\u3000\n    @Override\n    public boolean preDelete(BeanPersistRequest<?> arg0) {\n        return true;\n    }\n\n    @Override\n    public boolean preInsert(BeanPersistRequest<?> arg0) {\n        return true;\n    }\n\n    @Override\n    public boolean preUpdate(BeanPersistRequest<?> arg0) {\n        return true;\n    }\n\n\n\nBeanPersistListener\nhttp://ebean-orm.github.io/apidocs/com/avaje/ebean/event/BeanPersistListener.html\n\nThese listen events occur after a successful commit. They also occur in a background thread rather than the thread used to perform the actual insert update or delete. In this way there is a delay between the commit and when the listener is notified of the event.\n\n\u5e73\u305f\u304f\u3068\u3044\u3046\u3068\u3001Listener\u306b\u66f8\u304b\u308c\u305f\u51e6\u7406\u306f\u5225\u30b9\u30ec\u30c3\u30c9\u3092\u305f\u3066\u3066\u884c\u308f\u308c\u308b\u3068\u306e\u3053\u3068\u3002insert,update,delete\u304ccommit\u3055\u308c\u305f\u304b\u3089\u3001listener\u306e\u51e6\u7406\u304c\u306f\u3058\u307e\u308b\u307e\u3067\u306b\u306f\u9593\u304c\u7a7a\u304f\u3088\u3046\u3067\u3059\u3002\n\nFor a cluster these events may need to be broadcast. Each of the inserted(), updated() and deleted() methods return true if you want those events to be broadcast to the other members of a cluster (the id values are broadcast). If these methods return false then the events are not broadcast.\n\n\u66f4\u306b\u8a00\u3046\u3068\u3001\u4ed6\u306eEbeanServer\u306b\u3001insert\u306a\u3069\u306eevent\u304c\u8d77\u304d\u305f\u3053\u3068\u3092\u901a\u77e5\u3059\u308b\u305f\u3081\u306b\u4f5c\u3089\u308c\u305f\u3082\u306e\u306e\u3088\u3046\u3067\u3059\u3002\u305d\u306e\u5834\u5408\u306f\u3001inserted()\u306a\u3069\u306ftrue\u3092\u8fd4\u3059\u3088\u3046\u306b\u3057\u308d\u3068\u306e\u3053\u3068\u3067\u3059\u3002\u5171\u901a\u306e\u4e8b\u5f8c\u51e6\u7406\u3067\u4f7f\u3046\u306a\u3089\u3001false\u3092\u8fd4\u305b\u3070\u3088\u3055\u305d\u3046\u3067\u3059\u3002\u3068\u3048\u3044\u3048\u3001\u3084\u3084\u5f37\u5f15\u306a\u4f7f\u3044\u304b\u305f\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u3002\n\nMyPersistListener.java\npublic class MyPersistListener implements BeanPersistListener<Hoge> {\n\n    @Override\n    public boolean deleted(Hoge bean) {\n        Logger.info(bean);\n        return false;\n    }\n\n    @Override\n    public boolean inserted(Host bean) {\n\u3000\u3000\u3000\u3000Logger.info(bean);\u3000\n        return false;\n    }\n\n\u3000\u3000@Override\n    public boolean updated(Hoge bean, Set<String> arg1) {\n      \u3000Logger.info(bean);\n        return false;\n    }\u3000\n\n    @Override\n    public void remoteDelete(Object arg0) {\n\n    }\n\n    @Override\n    public void remoteInsert(Object arg0) {\n\n    }\n\n    @Override\n    public void remoteUpdate(Object arg0) {\n\n    }\n\n\n\n\n\u5b9f\u73fe\u3059\u308b\u306b\u306f\u3001BeanPersistController\u3068BeanPersistListener\u306e\u3069\u3061\u3089\u304b\u3092\u5b9f\u88c5\u3057\u307e\u3059\u3002\n\u524d\u8005\u306fcommit\u524d\u3001\u5f8c\u8005\u306fcommit\u5f8c\u306b\u5b9f\u884c\u3055\u308c\u307e\u3059\u3002\u7528\u9014\u306b\u3042\u308f\u305b\u3066\u4f7f\u3044\u5206\u3051\u307e\u3057\u3087\u3046\u3002\u4f8b\u3048\u3070\u3001\u5909\u66f4\u306e\u5c65\u6b74\u3092\u8a18\u9332\u3059\u308b\u306e\u3067\u3042\u308c\u3070\u3001\u5f8c\u8005\u306e\u65b9\u304c\u5411\u3044\u3066\u3044\u308b\u3067\u3057\u3087\u3046\u3002\n\n>BeanPersistListener only sees successfully committed events. BeanPersistController pre and post methods occur before the commit or a rollback and will see events that are later rolled back\n\n\u6ce8\u610f\u3059\u308b\u306e\u306f\u3001Ebean\u306eentity\u3092\u6271\u3046package\u4ee5\u4e0b\u306b\u3064\u304f\u308b\u3053\u3068\u3067\u3059\u3002`ebean.default=models.*,server.*`\n\n### BeanPersistController\n\nhttp://ebean-orm.github.io/apidocs/com/avaje/ebean/event/BeanPersistController.html\n\n\u4e00\u90e8\u3060\u3051\u5b9a\u7fa9\u3057\u305f\u3044\u5834\u5408\u306f\u3001BeanPersistAdapter\u304c\u5b9f\u88c5\u6e08\u307f\u306a\u306e\u3067\u3001\u305d\u308c\u3092\u7d99\u627f\u3057\u305f\u30af\u30e9\u30b9\u3067\u5fc5\u8981\u306a\u3082\u306e\u3060\u3051\u3067override\u3059\u308b\u306e\u3082\u3088\u3044\u3067\u3057\u3087\u3046\u3002\n\n```lang:MyBeanPersistController.java\n\npackage server;\n\npublic class MyBeanPersistController implements BeanPersistController {\n\n    /**\n     * PersistController\u306e\u512a\u5148\u9806\u4f4d\u3092\u8fd4\u5374.\n     */\n    @Override\n    public int getExecutionOrder() {\n        return 0;\n    }\n\n    /**\n     * \u9069\u7528\u3057\u305f\u3044Bean\u306e\u30af\u30e9\u30b9\u304b\u3069\u3046\u304b\u306e\u5224\u5b9a.\n     */\n    @Override\n    public boolean isRegisterFor(Class<?> clazz) {\n        return clazz.equals(Hoge.class) || clazz.equals(Foo.class) || clazz.equals(Bar.class);\n    }\n\n    /**\n     * delete\u30e1\u30bd\u30c3\u30c9\u5f8c\u306e\u51e6\u7406.\n     */\n    @Override\n    public void postDelete(BeanPersistRequest<?> request) {\n           Object bean = request.getBean(); //Bean\u306e\u53d6\u308a\u51fa\u3057\n           Logger.info(bean);        \n    }\n\n    /**\n     * save\u30e1\u30bd\u30c3\u30c9\u5f8c\u306e\u51e6\u7406.\n     */\n    @Override\n    public void postInsert(BeanPersistRequest<?> request) {\n     \n    }\n\n\u3000\u3000/**\n     * refresh\u30e1\u30bd\u30c3\u30c9\u5f8c\u306e\u51e6\u7406.\n     */\n    @Override\n    public void postLoad(Object arg0, Set<String> arg1) {\n       \n    }\n\n\u3000\u3000/**\n     * update\u30e1\u30bd\u30c3\u30c9\u5f8c\u306e\u51e6\u7406.\n     */\n    @Override\n    public void postUpdate(BeanPersistRequest<?> request) {\n        \n    }\n\n\u3000\u3000/**\n     * delete\u524d\u306e\u51e6\u7406. \u6a19\u6e96\u306e\u307e\u307e\u3067\u826f\u3044\u306a\u3089true\u3092\u8fd4\u3059.\n     */\u3000\n    @Override\n    public boolean preDelete(BeanPersistRequest<?> arg0) {\n        return true;\n    }\n\n    @Override\n    public boolean preInsert(BeanPersistRequest<?> arg0) {\n        return true;\n    }\n\n    @Override\n    public boolean preUpdate(BeanPersistRequest<?> arg0) {\n        return true;\n    }\n```\n\n### BeanPersistListener\n\nhttp://ebean-orm.github.io/apidocs/com/avaje/ebean/event/BeanPersistListener.html\n\n>These listen events occur after a successful commit. They also occur in a background thread rather than the thread used to perform the actual insert update or delete. In this way there is a delay between the commit and when the listener is notified of the event.\n\n\u5e73\u305f\u304f\u3068\u3044\u3046\u3068\u3001Listener\u306b\u66f8\u304b\u308c\u305f\u51e6\u7406\u306f\u5225\u30b9\u30ec\u30c3\u30c9\u3092\u305f\u3066\u3066\u884c\u308f\u308c\u308b\u3068\u306e\u3053\u3068\u3002insert,update,delete\u304ccommit\u3055\u308c\u305f\u304b\u3089\u3001listener\u306e\u51e6\u7406\u304c\u306f\u3058\u307e\u308b\u307e\u3067\u306b\u306f\u9593\u304c\u7a7a\u304f\u3088\u3046\u3067\u3059\u3002\n\n\n>For a cluster these events may need to be broadcast. Each of the inserted(), updated() and deleted() methods return true if you want those events to be broadcast to the other members of a cluster (the id values are broadcast). If these methods return false then the events are not broadcast.\n\n\u66f4\u306b\u8a00\u3046\u3068\u3001\u4ed6\u306eEbeanServer\u306b\u3001insert\u306a\u3069\u306eevent\u304c\u8d77\u304d\u305f\u3053\u3068\u3092\u901a\u77e5\u3059\u308b\u305f\u3081\u306b\u4f5c\u3089\u308c\u305f\u3082\u306e\u306e\u3088\u3046\u3067\u3059\u3002\u305d\u306e\u5834\u5408\u306f\u3001inserted()\u306a\u3069\u306ftrue\u3092\u8fd4\u3059\u3088\u3046\u306b\u3057\u308d\u3068\u306e\u3053\u3068\u3067\u3059\u3002\u5171\u901a\u306e\u4e8b\u5f8c\u51e6\u7406\u3067\u4f7f\u3046\u306a\u3089\u3001false\u3092\u8fd4\u305b\u3070\u3088\u3055\u305d\u3046\u3067\u3059\u3002\u3068\u3048\u3044\u3048\u3001\u3084\u3084\u5f37\u5f15\u306a\u4f7f\u3044\u304b\u305f\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u3002\n\n\n```lang:MyPersistListener.java\npublic class MyPersistListener implements BeanPersistListener<Hoge> {\n\n    @Override\n    public boolean deleted(Hoge bean) {\n        Logger.info(bean);\n        return false;\n    }\n\n    @Override\n    public boolean inserted(Host bean) {\n\u3000\u3000\u3000\u3000Logger.info(bean);\u3000\n        return false;\n    }\n\n\u3000\u3000@Override\n    public boolean updated(Hoge bean, Set<String> arg1) {\n      \u3000Logger.info(bean);\n        return false;\n    }\u3000\n\n    @Override\n    public void remoteDelete(Object arg0) {\n       \n    }\n\n    @Override\n    public void remoteInsert(Object arg0) {\n       \n    }\n\n    @Override\n    public void remoteUpdate(Object arg0) {\n       \n    }\n\n    \n```\n"}