{"context": " More than 1 year has passed since last update.\u524d\u56de\u306f100\u4ef6\u3057\u304b\u53d6\u308c\u306a\u304b\u3063\u305f\u306e\u3067\u3001\u6839\u3053\u305d\u304e\u3068\u308c\u308b\u3088\u3046\u306b\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u3092\u601d\u3044\u3064\u304f\u307e\u307e\u306b\u5909\u66f4\u3057\u307e\u3057\u305f\u3002\n\u3068\u308a\u3042\u3048\u305a\u3061\u3083\u3093\u3068\u53d6\u308c\u308b\u3088\u3046\u306b\u306a\u3063\u305f\u306e\u3067\u3001BigQuery\u306bcsv\u30d5\u30a1\u30a4\u30eb\u3092\u3064\u3063\u3053\u3093\u3067\u307f\u305f\u3089\u30fb\u30fb\u30fb\n\u3072\u305f\u3059\u3089\u30a8\u30e9\u30fc\u3092\u5410\u304f\uff01\uff01\uff01\n\u30a8\u30e9\u30fc\u306e\u539f\u56e0\u306f\"\uff08\u30c0\u30d6\u30eb\u30af\u30a9\u30fc\u30c6\u30fc\u30b7\u30e7\u30f3\uff09\u304c\u3057\u3063\u304b\u308a\u3068\u9589\u3058\u3089\u308c\u3066\u3044\u306a\u3044\u304b\u3089\u3002\n\u3067\u3001\u5b9f\u969b\u306e\u30c7\u30fc\u30bf\u3092\u898b\u3066\u307f\u308b\u3068\nscreen name\n\u3053\u3044\u3064\u306b\u6539\u884c\u304c\u5165\u3063\u3066\u3044\u308b\u30e6\u30fc\u30b6\u30fc\u304c\u3044\u308b\u3002\n\u305d\u306e\u305b\u3044\u3067\u30a8\u30e9\u30fc\u3092\u5410\u3044\u3066\u3044\u305f\u3002  \n\u30e1\u30f3\u30c9\u30af\u30b5\u30a4\u306e\u3067screen name\u3092\u5165\u308c\u306a\u3044\u3088\u3046\u306b\u3057\u307e\u3057\u305f\u3002\nBigQuery\u306b\u5165\u308c\u308b\u3053\u3068\u306b\u6210\u529f\u3057\u305f\u3088\uff01\u3084\u3063\u305f\u306d\uff01\u30bf\u30a8\u3061\u3083\u3093\uff01\n*\u8ffd\u8a18\n\u5b9f\u306ftext\u306b\u3082\u6539\u884c(\\r) \u304c\u5165\u3063\u3066\u307e\u3057\u305f\u3002\n\n\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\n\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u3080\u3063\u3061\u3083\u6c5a\u3044\u3093\u3067\u30a2\u30ec\uff08\u8ab0\u304b\u30ea\u30d5\u30a1\u30af\u30bf\u30ea\u30f3\u30b0\u30fb\u30fb\u30fb\n\u3042\u3068\u3001#zanmai\u306e\u30c7\u30fc\u30bf\u53d6\u308b\u306e\u3080\u3063\u3061\u3083\u6642\u9593\u304b\u304b\u308b( \u25d4\u0e34\u03c9\u25d4\u0e34)\n(ns tweet-bigdata-clj.core\n  (:import [twitter4j TwitterFactory Query QueryResult])\n  (:require [clojure-csv.core :as csv]\n            [clojure.java.io :as io]))\n\n(declare twitter get-tweets tweets-to-map to-csvfile to-csv make-csv get-all-tweets)\n\n(def twitter (.getInstance (TwitterFactory.)))\n\n(defn get-tweets [hash-tag]\n  \"tweet\u53d6\u5f97\"\n  (let [query (doto (Query.)\n                (.setQuery hash-tag)\n                (.setCount 100)\n                (.setSince \"2014-11-03\")\n                (.setUntil \"2014-11-04\"))]\n    (->> (.search twitter query))))\n\n(defn tweets-to-map [tweets]\n  \"tweets\u3092map\u5f62\u5f0f\u306b\u5909\u63db\u3059\u308b\"\n  (map #(zipmap [:screenName\n                 :name\n                 :text\n                 :createdAt]\n                [(.. % getUser getScreenName)\n                 (.. % getUser getName)\n                 (clojure.string/replace (.getText %) #\"\\n\" \" \")\n                 (.. % getCreatedAt toString)]) tweets))\n\n(defn to-csvfile [text]\n  \"csv\u30d5\u30a1\u30a4\u30eb\u3092\u4f5c\u6210\"\n  (with-open [out-file (io/writer \"out-file.csv\" :encoding \"utf-8\" :append true)]\n    (.write out-file (apply str text))))\n\n(defn to-csv [{text :text name :name screen-name :screenName created-at :createdAt}]\n  \"\u30ab\u30f3\u30de\u5206\u5272\"\n  (csv/write-csv [[screen-name text created-at]]))\n\n(defn make-csv [query]\n  (->> query\n       (.getTweets)\n       (tweets-to-map)\n       (map #(to-csv %))\n       (to-csvfile)))\n\n(defn get-all-tweets [#^QueryResult query]\n  (loop [q query]\n    (when (.hasNext q)\n      (Thread/sleep 5000)\n      (let [nq (doto (.nextQuery q)\n                 (.setCount 100))\n            nqr (.search twitter nq)]\n        (make-csv nqr)\n        (recur nqr)))))\n\n(defn get-first-page [query]\n  (let [q (.search twitter query)]\n    (dosync(alter result-list conj q))\n    q))\n\n(defn -main[]\n  (let [first-tweets (get-tweets \"#zanmai\")]\n    (make-csv first-tweets)\n    (get-all-tweets first-tweets)))\n\n\nRT\u6570\u3067\u4e26\u3079\u305f\n(\u203btweet\u306e\u53d6\u5f97\u306b\u6642\u9593\u304b\u304b\u308a\u3059\u304e\u3066\u3001\u5168\u91cf\u3058\u3083\u306a\u3044\u3067\u3059\u3002\uff09\n\n\n\u7d50\u679c\n\u5927\u4e8b\u4ef6\u3067\u3059\nhttps://www.youtube.com/watch?v=_RufZecxXKQ\n[\u524d\u56de](http://qiita.com/FScoward/items/d10a69f3fa94e9620ae2)\u306f100\u4ef6\u3057\u304b\u53d6\u308c\u306a\u304b\u3063\u305f\u306e\u3067\u3001\u6839\u3053\u305d\u304e\u3068\u308c\u308b\u3088\u3046\u306b\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u3092\u601d\u3044\u3064\u304f\u307e\u307e\u306b\u5909\u66f4\u3057\u307e\u3057\u305f\u3002\n\n\u3068\u308a\u3042\u3048\u305a\u3061\u3083\u3093\u3068\u53d6\u308c\u308b\u3088\u3046\u306b\u306a\u3063\u305f\u306e\u3067\u3001BigQuery\u306bcsv\u30d5\u30a1\u30a4\u30eb\u3092\u3064\u3063\u3053\u3093\u3067\u307f\u305f\u3089\u30fb\u30fb\u30fb\n\n\u3072\u305f\u3059\u3089\u30a8\u30e9\u30fc\u3092\u5410\u304f\uff01\uff01\uff01\n\n\u30a8\u30e9\u30fc\u306e\u539f\u56e0\u306f\"\uff08\u30c0\u30d6\u30eb\u30af\u30a9\u30fc\u30c6\u30fc\u30b7\u30e7\u30f3\uff09\u304c\u3057\u3063\u304b\u308a\u3068\u9589\u3058\u3089\u308c\u3066\u3044\u306a\u3044\u304b\u3089\u3002\n\n\u3067\u3001\u5b9f\u969b\u306e\u30c7\u30fc\u30bf\u3092\u898b\u3066\u307f\u308b\u3068\n\n**screen name**\n\n\u3053\u3044\u3064\u306b\u6539\u884c\u304c\u5165\u3063\u3066\u3044\u308b\u30e6\u30fc\u30b6\u30fc\u304c\u3044\u308b\u3002\n\n\u305d\u306e\u305b\u3044\u3067\u30a8\u30e9\u30fc\u3092\u5410\u3044\u3066\u3044\u305f\u3002 :sweat: \n\n\u30e1\u30f3\u30c9\u30af\u30b5\u30a4\u306e\u3067screen name\u3092\u5165\u308c\u306a\u3044\u3088\u3046\u306b\u3057\u307e\u3057\u305f\u3002\n\nBigQuery\u306b\u5165\u308c\u308b\u3053\u3068\u306b\u6210\u529f\u3057\u305f\u3088\uff01\u3084\u3063\u305f\u306d\uff01\u30bf\u30a8\u3061\u3083\u3093\uff01\n\n*\u8ffd\u8a18\n\u5b9f\u306ftext\u306b\u3082\u6539\u884c(\\r) \u304c\u5165\u3063\u3066\u307e\u3057\u305f\u3002\n\n# \u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\n\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u3080\u3063\u3061\u3083\u6c5a\u3044\u3093\u3067\u30a2\u30ec\uff08\u8ab0\u304b\u30ea\u30d5\u30a1\u30af\u30bf\u30ea\u30f3\u30b0\u30fb\u30fb\u30fb\n\n\u3042\u3068\u3001#zanmai\u306e\u30c7\u30fc\u30bf\u53d6\u308b\u306e\u3080\u3063\u3061\u3083\u6642\u9593\u304b\u304b\u308b( \u25d4\u0e34\u03c9\u25d4\u0e34)\n\n```clj\n(ns tweet-bigdata-clj.core\n  (:import [twitter4j TwitterFactory Query QueryResult])\n  (:require [clojure-csv.core :as csv]\n            [clojure.java.io :as io]))\n\n(declare twitter get-tweets tweets-to-map to-csvfile to-csv make-csv get-all-tweets)\n\n(def twitter (.getInstance (TwitterFactory.)))\n\n(defn get-tweets [hash-tag]\n  \"tweet\u53d6\u5f97\"\n  (let [query (doto (Query.)\n                (.setQuery hash-tag)\n                (.setCount 100)\n                (.setSince \"2014-11-03\")\n                (.setUntil \"2014-11-04\"))]\n    (->> (.search twitter query))))\n\n(defn tweets-to-map [tweets]\n  \"tweets\u3092map\u5f62\u5f0f\u306b\u5909\u63db\u3059\u308b\"\n  (map #(zipmap [:screenName\n                 :name\n                 :text\n                 :createdAt]\n                [(.. % getUser getScreenName)\n                 (.. % getUser getName)\n                 (clojure.string/replace (.getText %) #\"\\n\" \" \")\n                 (.. % getCreatedAt toString)]) tweets))\n\n(defn to-csvfile [text]\n  \"csv\u30d5\u30a1\u30a4\u30eb\u3092\u4f5c\u6210\"\n  (with-open [out-file (io/writer \"out-file.csv\" :encoding \"utf-8\" :append true)]\n    (.write out-file (apply str text))))\n\n(defn to-csv [{text :text name :name screen-name :screenName created-at :createdAt}]\n  \"\u30ab\u30f3\u30de\u5206\u5272\"\n  (csv/write-csv [[screen-name text created-at]]))\n\n(defn make-csv [query]\n  (->> query\n       (.getTweets)\n       (tweets-to-map)\n       (map #(to-csv %))\n       (to-csvfile)))\n\n(defn get-all-tweets [#^QueryResult query]\n  (loop [q query]\n    (when (.hasNext q)\n      (Thread/sleep 5000)\n      (let [nq (doto (.nextQuery q)\n                 (.setCount 100))\n            nqr (.search twitter nq)]\n        (make-csv nqr)\n        (recur nqr)))))\n\n(defn get-first-page [query]\n  (let [q (.search twitter query)]\n    (dosync(alter result-list conj q))\n    q))\n\n(defn -main[]\n  (let [first-tweets (get-tweets \"#zanmai\")]\n    (make-csv first-tweets)\n    (get-all-tweets first-tweets)))\n```\n\n#RT\u6570\u3067\u4e26\u3079\u305f\n(\u203btweet\u306e\u53d6\u5f97\u306b\u6642\u9593\u304b\u304b\u308a\u3059\u304e\u3066\u3001\u5168\u91cf\u3058\u3083\u306a\u3044\u3067\u3059\u3002\uff09\n\n![zanmai.png](https://qiita-image-store.s3.amazonaws.com/0/39243/bcb9d835-43eb-259e-5713-be98a0130d1d.png)\n\n## \u7d50\u679c\n\u5927\u4e8b\u4ef6\u3067\u3059\nhttps://www.youtube.com/watch?v=_RufZecxXKQ\n", "tags": ["Clojure1.6.0", "bigquery", "Twitter"]}