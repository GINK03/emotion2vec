{"context": "\u5730\u7403\u3092\u771f\u7403\u3068\u307f\u306a\u3057\u3066\u3001\u7def\u5ea6\u7d4c\u5ea6\u306b\u3088\u308b2\u70b9\u9593\u306e\u8ddd\u96e2\u3092\u3044\u308d\u3044\u308d\u306a\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u8a00\u8a9e\u3067\u8a08\u7b97\u3059\u308b\u3002\n\u57fa\u672c\u65b9\u91dd\u306f\u4ee5\u4e0b\u3002\n\n\u95a2\u6570/\u30e1\u30bd\u30c3\u30c91\u3064\u3092\u30b3\u30d4\u30da\u3057\u3066\u4f7f\u3048\u305d\u3046\u306a\u30b3\u30fc\u30c9\u306b\u3059\u308b\nrequire/import\u7cfb\u3092\u66f8\u304b\u306a\u304f\u3066\u3088\u3044\u306a\u3089\u66f8\u304b\u306a\u3044\n\u6a19\u6e96\u30e9\u30a4\u30d6\u30e9\u30ea\u3060\u3051\u3092\u4f7f\u3046\n\u95a2\u6570/\u30e1\u30bd\u30c3\u30c9\u306e\u5f15\u6570\u306f\u30d7\u30ea\u30df\u30c6\u30a3\u30d6\u306a\u6d6e\u52d5\u5c0f\u6570\u70b94\u3064\n\u5909\u6570/\u518d\u4ee3\u5165\u4e0d\u53ef\u5909\u6570/\u5b9a\u6570\u306b\u3064\u3044\u3066\u306f\u300c\u30b7\u30f3\u30d7\u30eb\u3067\u9055\u548c\u611f\u306e\u306a\u3044\u8868\u73fe\u3067\u300d\u3068\u601d\u3063\u3066\u306f\u3044\u308b\u3051\u3069\u6c7a\u3081\u304b\u306d\u3066\u3044\u308b\n\n\nC\n#include <math.h>\n#include <stdio.h>\n\n// \u7403\u9762\u4e09\u89d2\u6cd5\u306b\u3088\u308a\u3001\u5927\u5186\u8ddd\u96e2(\u30e1\u30fc\u30c8\u30eb)\u3092\u6c42\u3081\u308b\ndouble distance(double lat1, double lng1, double lat2, double lng2) {\n\n    // \u5186\u5468\u7387\n    const double pi = 3.14159265359;\n\n    // \u7def\u5ea6\u7d4c\u5ea6\u3092\u30e9\u30b8\u30a2\u30f3\u306b\u5909\u63db\n    double rlat1 = lat1 * pi / 180;\n    double rlng1 = lng1 * pi / 180;\n    double rlat2 = lat2 * pi / 180;\n    double rlng2 = lng2 * pi / 180;\n\n    // 2\u70b9\u306e\u4e2d\u5fc3\u89d2(\u30e9\u30b8\u30a2\u30f3)\u3092\u6c42\u3081\u308b\n    double a =\n      sin(rlat1) * sin(rlat2) +\n      cos(rlat1) * cos(rlat2) *\n      cos(rlng1 - rlng2);\n    double rr = acos(a);\n\n    // \u5730\u7403\u8d64\u9053\u534a\u5f84(\u30e1\u30fc\u30c8\u30eb)\n    const double earth_radius = 6378140;\n\n    // 2\u70b9\u9593\u306e\u8ddd\u96e2(\u30e1\u30fc\u30c8\u30eb)\n    double distance = earth_radius * rr;\n\n    return distance;\n}\n\nint main(int argc, char *argv[]) {\n  // \u8a08\u7b97\u30b5\u30f3\u30d7\u30eb\n  printf(\"%f\\n\", distance(35.1730990, 136.883466, 35.1855732, 136.899092));\n  printf(\"%f\\n\", distance(35.1855732, 136.899092, 35.1730990, 136.883466));\n  return 0;\n}\n\n\nClojure\n; \u7403\u9762\u4e09\u89d2\u6cd5\u306b\u3088\u308a\u3001\u5927\u5186\u8ddd\u96e2(\u30e1\u30fc\u30c8\u30eb)\u3092\u6c42\u3081\u308b\n(defn distance [lat1 lng1 lat2 lng2]\n\n  ; \u7def\u5ea6\u7d4c\u5ea6\u3092\u30e9\u30b8\u30a2\u30f3\u306b\u5909\u63db\n  (let [rlat1 (/ (* lat1 Math/PI) 180)\n        rlng1 (/ (* lng1 Math/PI) 180)\n        rlat2 (/ (* lat2 Math/PI) 180)\n        rlng2 (/ (* lng2 Math/PI) 180)\n\n        ; 2\u70b9\u306e\u4e2d\u5fc3\u89d2(\u30e9\u30b8\u30a2\u30f3)\u3092\u6c42\u3081\u308b\n        a (+ (* (Math/sin rlat1) (Math/sin rlat2))\n             (* (* (Math/cos rlat1) (Math/cos rlat2))\n                (Math/cos (- rlng1 rlng2))))\n        rr (Math/acos a)\n\n        ; \u5730\u7403\u8d64\u9053\u534a\u5f84(\u30e1\u30fc\u30c8\u30eb)\n        earth_radius 6378140]\n\n  ; 2\u70b9\u9593\u306e\u8ddd\u96e2(\u30e1\u30fc\u30c8\u30eb)\n  (* earth_radius rr)))\n\n; \u8a08\u7b97\u30b5\u30f3\u30d7\u30eb\n(println (distance 35.1730990 136.883466 35.1855732 136.899092))\n(println (distance 35.1855732 136.899092 35.1730990 136.883466))\n\n\nGo\npackage main\n\nimport (\n  \"fmt\"\n  \"math\"\n)\n\nfunc main() {\n  // \u8a08\u7b97\u30b5\u30f3\u30d7\u30eb\n  fmt.Printf(\"%f\\n\", distance(35.1730990, 136.883466, 35.1855732, 136.899092));\n  fmt.Printf(\"%f\\n\", distance(35.1855732, 136.899092, 35.1730990, 136.883466));\n}\n\n// \u7403\u9762\u4e09\u89d2\u6cd5\u306b\u3088\u308a\u3001\u5927\u5186\u8ddd\u96e2(\u30e1\u30fc\u30c8\u30eb)\u3092\u6c42\u3081\u308b\nfunc distance(lat1 float64, lng1 float64, lat2 float64, lng2 float64) float64 {\n\n  // \u7def\u5ea6\u7d4c\u5ea6\u3092\u30e9\u30b8\u30a2\u30f3\u306b\u5909\u63db\n  rlat1 := lat1 * math.Pi / 180\n  rlng1 := lng1 * math.Pi / 180\n  rlat2 := lat2 * math.Pi / 180\n  rlng2 := lng2 * math.Pi / 180\n\n  // 2\u70b9\u306e\u4e2d\u5fc3\u89d2(\u30e9\u30b8\u30a2\u30f3)\u3092\u6c42\u3081\u308b\n  a :=\n    math.Sin(rlat1) * math.Sin(rlat2) +\n    math.Cos(rlat1) * math.Cos(rlat2) *\n    math.Cos(rlng1 - rlng2)\n  rr := math.Acos(a)\n\n  earth_radius := 6378140. // \u5730\u7403\u8d64\u9053\u534a\u5f84(\u30e1\u30fc\u30c8\u30eb)\n  distance := earth_radius * rr\n  return distance\n}\n\n\nHaskell\n-- \u7403\u9762\u4e09\u89d2\u6cd5\u306b\u3088\u308a\u3001\u5927\u5186\u8ddd\u96e2(\u30e1\u30fc\u30c8\u30eb)\u3092\u6c42\u3081\u308b\ndistance :: Double -> Double -> Double -> Double -> Double\ndistance lat1 lng1 lat2 lng2 = let {\n\n  -- \u7def\u5ea6\u7d4c\u5ea6\u3092\u30e9\u30b8\u30a2\u30f3\u306b\u5909\u63db\n  rlat1 = lat1 * pi / 180;\n  rlng1 = lng1 * pi / 180;\n  rlat2 = lat2 * pi / 180;\n  rlng2 = lng2 * pi / 180;\n\n  -- 2\u70b9\u306e\u4e2d\u5fc3\u89d2(\u30e9\u30b8\u30a2\u30f3)\u3092\u6c42\u3081\u308b\n  a = sin rlat1 * sin rlat2 + cos rlat1 * cos rlat2 * cos (rlng1 - rlng2);\n  rr = acos a;\n\n  earth_radius = 6378140; -- \u5730\u7403\u8d64\u9053\u534a\u5f84(\u30e1\u30fc\u30c8\u30eb)\n  distance = earth_radius * rr;\n\n} in distance\n\nmain = do\n  -- \u8a08\u7b97\u30b5\u30f3\u30d7\u30eb\n  print (distance 35.1730990 136.883466 35.1855732 136.899092)\n  print (distance 35.1855732 136.899092 35.1730990 136.883466)\n\n\nJava\npublic class Earth {\n\n  public static void main(String args[]) {\n    // \u8a08\u7b97\u30b5\u30f3\u30d7\u30eb\n    System.out.println(distance(35.1730990, 136.883466, 35.1855732, 136.899092));\n    System.out.println(distance(35.1855732, 136.899092, 35.1730990, 136.883466));\n  }\n\n  // \u7403\u9762\u4e09\u89d2\u6cd5\u306b\u3088\u308a\u3001\u5927\u5186\u8ddd\u96e2(\u30e1\u30fc\u30c8\u30eb)\u3092\u6c42\u3081\u308b\n  public static double distance(double lat1, double lng1, double lat2, double lng2) {\n\n    // \u7def\u5ea6\u7d4c\u5ea6\u3092\u30e9\u30b8\u30a2\u30f3\u306b\u5909\u63db\n    double rlat1 = Math.toRadians(lat1);\n    double rlng1 = Math.toRadians(lng1);\n    double rlat2 = Math.toRadians(lat2);\n    double rlng2 = Math.toRadians(lng2);\n\n    // 2\u70b9\u306e\u4e2d\u5fc3\u89d2(\u30e9\u30b8\u30a2\u30f3)\u3092\u6c42\u3081\u308b\n    double a =\n      Math.sin(rlat1) * Math.sin(rlat2) +\n      Math.cos(rlat1) * Math.cos(rlat2) *\n      Math.cos(rlng1 - rlng2);\n    double rr = Math.acos(a);\n\n    // \u5730\u7403\u8d64\u9053\u534a\u5f84(\u30e1\u30fc\u30c8\u30eb)\n    double earth_radius = 6378140;\n\n    // 2\u70b9\u9593\u306e\u8ddd\u96e2(\u30e1\u30fc\u30c8\u30eb)\n    double distance = earth_radius * rr;\n\n    return distance;\n  }\n}\n\n\nLOGO\n; \u7403\u9762\u4e09\u89d2\u6cd5\u306b\u3088\u308a\u3001\u5927\u5186\u8ddd\u96e2(\u30e1\u30fc\u30c8\u30eb)\u3092\u6c42\u3081\u308b\nto distance :lat1 :lng1 :lat2 :lng2\n\n  ; \u5186\u5468\u7387\n  make \"pi (radarctan 0 1) * 2\n\n  ; \u7def\u5ea6\u7d4c\u5ea6\u3092\u30e9\u30b8\u30a2\u30f3\u306b\u5909\u63db\n  make \"rlat1 :lat1 * :pi / 180\n  make \"rlng1 :lng1 * :pi / 180\n  make \"rlat2 :lat2 * :pi / 180\n  make \"rlng2 :lng2 * :pi / 180\n\n  ; 2\u70b9\u306e\u4e2d\u5fc3\u89d2(\u30e9\u30b8\u30a2\u30f3)\u3092\u6c42\u3081\u308b\n  make \"a1 (radsin :rlat1) * (radsin :rlat2)\n  make \"a2 (radcos :rlat1) * (radcos :rlat2)\n  make \"a3 radcos (rlng1 - rlng2)\n  make \"a :a1 + :a2 * :a3\n  make \"b sqrt((-1 * :a * :a) + 1)\n  make \"c radarctan((-1 * :a) / :b)\n  make \"rr :c + :pi / 2\n\n  ; \u5730\u7403\u8d64\u9053\u534a\u5f84(\u30e1\u30fc\u30c8\u30eb)\n  make \"earth_radius 6378140\n\n  ; 2\u70b9\u9593\u306e\u8ddd\u96e2(\u30e1\u30fc\u30c8\u30eb)\n  make \"distance :earth_radius * :rr\n\n  output :distance\nend\n\n; \u8a08\u7b97\u30b5\u30f3\u30d7\u30eb\nprint distance 35.1730990 136.883466 35.1855732 136.899092\nprint distance 35.1855732 136.899092 35.1730990 136.883466\n\n\nOCaml\n(* \u7403\u9762\u4e09\u89d2\u6cd5\u306b\u3088\u308a\u3001\u5927\u5186\u8ddd\u96e2(\u30e1\u30fc\u30c8\u30eb)\u3092\u6c42\u3081\u308b *)\nlet distance lat1 lng1 lat2 lng2 =\n\n  (* \u5186\u5468\u7387 *)\n  let pi = 3.14159265359 in\n\n  (* \u7def\u5ea6\u7d4c\u5ea6\u3092\u30e9\u30b8\u30a2\u30f3\u306b\u5909\u63db *)\n  let rlat1 = lat1 *. pi /. 180. in\n  let rlng1 = lng1 *. pi /. 180. in\n  let rlat2 = lat2 *. pi /. 180. in\n  let rlng2 = lng2 *. pi /. 180. in\n\n  (* 2\u70b9\u306e\u4e2d\u5fc3\u89d2(\u30e9\u30b8\u30a2\u30f3)\u3092\u6c42\u3081\u308b *)\n  let a = sin rlat1 *. sin rlat2 +. cos rlat1 *. cos rlat2 *. cos (rlng1 -. rlng2) in\n  let rr = acos a in\n\n  let earth_radius = 6378140. in (* \u5730\u7403\u8d64\u9053\u534a\u5f84(\u30e1\u30fc\u30c8\u30eb) *)\n  let distance = earth_radius *. rr in\n\n  distance;;\n\n(* \u8a08\u7b97\u30b5\u30f3\u30d7\u30eb *)\nprint_endline (string_of_float (distance 35.1730990 136.883466 35.1855732 136.899092));;\nprint_endline (string_of_float (distance 35.1855732 136.899092 35.1730990 136.883466));;\n\n\nRuby\n# \u7403\u9762\u4e09\u89d2\u6cd5\u306b\u3088\u308a\u3001\u5927\u5186\u8ddd\u96e2(\u30e1\u30fc\u30c8\u30eb)\u3092\u6c42\u3081\u308b\ndef distance(lat1, lng1, lat2, lng2)\n\n  # \u7def\u5ea6\u7d4c\u5ea6\u3092\u30e9\u30b8\u30a2\u30f3\u306b\u5909\u63db\n  rlat1 = lat1 * Math::PI / 180\n  rlng1 = lng1 * Math::PI / 180\n  rlat2 = lat2 * Math::PI / 180\n  rlng2 = lng2 * Math::PI / 180\n\n  # 2\u70b9\u306e\u4e2d\u5fc3\u89d2(\u30e9\u30b8\u30a2\u30f3)\u3092\u6c42\u3081\u308b\n  a =\n    Math::sin(rlat1) * Math::sin(rlat2) +\n    Math::cos(rlat1) * Math::cos(rlat2) *\n    Math::cos(rlng1 - rlng2)\n  rr = Math::acos(a)\n\n  earth_radius = 6378140 # \u5730\u7403\u8d64\u9053\u534a\u5f84(\u30e1\u30fc\u30c8\u30eb)\n  earth_radius * rr\nend\n\n# \u8a08\u7b97\u30b5\u30f3\u30d7\u30eb\nputs distance(35.1730990, 136.883466, 35.1855732, 136.899092)\nputs distance(35.1855732, 136.899092, 35.1730990, 136.883466)\n\n\nRust\nfn main() {\n  // \u8a08\u7b97\u30b5\u30f3\u30d7\u30eb\n  println!(\"{}\", distance(35.1730990, 136.883466, 35.1855732, 136.899092));\n  println!(\"{}\", distance(35.1855732, 136.899092, 35.1730990, 136.883466));\n}\n\n// \u7403\u9762\u4e09\u89d2\u6cd5\u306b\u3088\u308a\u3001\u5927\u5186\u8ddd\u96e2(\u30e1\u30fc\u30c8\u30eb)\u3092\u6c42\u3081\u308b\nfn distance(lat1: f64, lng1: f64, lat2: f64, lng2: f64) -> f64 {\n\n  // \u7def\u5ea6\u7d4c\u5ea6\u3092\u30e9\u30b8\u30a2\u30f3\u306b\u5909\u63db\n  let rlat1 = lat1.to_radians();\n  let rlng1 = lng1.to_radians();\n  let rlat2 = lat2.to_radians();\n  let rlng2 = lng2.to_radians();\n\n  // 2\u70b9\u306e\u4e2d\u5fc3\u89d2(\u30e9\u30b8\u30a2\u30f3)\u3092\u6c42\u3081\u308b\n  let a =\n    rlat1.sin() * rlat2.sin() +\n    rlat1.cos() * rlat2.cos() *\n    (rlng1 - rlng2).cos();\n  let rr = a.acos();\n\n  let earth_radius = 6378140.; // \u5730\u7403\u8d64\u9053\u534a\u5f84(\u30e1\u30fc\u30c8\u30eb)\n  earth_radius * rr\n}\n\n\nScratch\n\n\nSwift\nimport Foundation\n\n// \u7403\u9762\u4e09\u89d2\u6cd5\u306b\u3088\u308a\u3001\u5927\u5186\u8ddd\u96e2(\u30e1\u30fc\u30c8\u30eb)\u3092\u6c42\u3081\u308b\nfunc distance(lat1: Double, lng1: Double, lat2: Double, lng2: Double) -> Double {\n\n  // \u7def\u5ea6\u7d4c\u5ea6\u3092\u30e9\u30b8\u30a2\u30f3\u306b\u5909\u63db\n  let rlat1 = lat1 * M_PI / 180\n  let rlng1 = lng1 * M_PI / 180\n  let rlat2 = lat2 * M_PI / 180\n  let rlng2 = lng2 * M_PI / 180\n\n  // 2\u70b9\u306e\u4e2d\u5fc3\u89d2(\u30e9\u30b8\u30a2\u30f3)\u3092\u6c42\u3081\u308b\n  let a =\n    sin(rlat1) * sin(rlat2) +\n    cos(rlat1) * cos(rlat2) *\n    cos(rlng1 - rlng2)\n  let rr = acos(a)\n\n  // \u5730\u7403\u8d64\u9053\u534a\u5f84(\u30e1\u30fc\u30c8\u30eb)\n  let earth_radius = 6378140.0\n\n  // 2\u70b9\u9593\u306e\u8ddd\u96e2(\u30e1\u30fc\u30c8\u30eb)\n  let distance = earth_radius * rr\n\n  return distance\n}\n\n// \u8a08\u7b97\u30b5\u30f3\u30d7\u30eb\nprint(\"\\(distance(lat1: 35.1730990, lng1: 136.883466, lat2: 35.1855732, lng2: 136.899092))\")\nprint(\"\\(distance(lat1: 35.1855732, lng1: 136.899092, lat2: 35.1730990, lng2: 136.883466))\")\n\n\n\u53c2\u8003\u8cc7\u6599\n\n\u5927\u5186\u8ddd\u96e2 - Wikipedia https://ja.wikipedia.org/wiki/%E5%A4%A7%E5%86%86%E8%B7%9D%E9%9B%A2\n\n\n\u5730\u7403\u3092\u771f\u7403\u3068\u307f\u306a\u3057\u3066\u3001\u7def\u5ea6\u7d4c\u5ea6\u306b\u3088\u308b2\u70b9\u9593\u306e\u8ddd\u96e2\u3092\u3044\u308d\u3044\u308d\u306a\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u8a00\u8a9e\u3067\u8a08\u7b97\u3059\u308b\u3002\n\n\u57fa\u672c\u65b9\u91dd\u306f\u4ee5\u4e0b\u3002\n\n- \u95a2\u6570/\u30e1\u30bd\u30c3\u30c91\u3064\u3092\u30b3\u30d4\u30da\u3057\u3066\u4f7f\u3048\u305d\u3046\u306a\u30b3\u30fc\u30c9\u306b\u3059\u308b\n- require/import\u7cfb\u3092\u66f8\u304b\u306a\u304f\u3066\u3088\u3044\u306a\u3089\u66f8\u304b\u306a\u3044\n- \u6a19\u6e96\u30e9\u30a4\u30d6\u30e9\u30ea\u3060\u3051\u3092\u4f7f\u3046\n- \u95a2\u6570/\u30e1\u30bd\u30c3\u30c9\u306e\u5f15\u6570\u306f\u30d7\u30ea\u30df\u30c6\u30a3\u30d6\u306a\u6d6e\u52d5\u5c0f\u6570\u70b94\u3064\n- \u5909\u6570/\u518d\u4ee3\u5165\u4e0d\u53ef\u5909\u6570/\u5b9a\u6570\u306b\u3064\u3044\u3066\u306f\u300c\u30b7\u30f3\u30d7\u30eb\u3067\u9055\u548c\u611f\u306e\u306a\u3044\u8868\u73fe\u3067\u300d\u3068\u601d\u3063\u3066\u306f\u3044\u308b\u3051\u3069\u6c7a\u3081\u304b\u306d\u3066\u3044\u308b\n\n## C\n\n```c\n#include <math.h>\n#include <stdio.h>\n\n// \u7403\u9762\u4e09\u89d2\u6cd5\u306b\u3088\u308a\u3001\u5927\u5186\u8ddd\u96e2(\u30e1\u30fc\u30c8\u30eb)\u3092\u6c42\u3081\u308b\ndouble distance(double lat1, double lng1, double lat2, double lng2) {\n\n    // \u5186\u5468\u7387\n    const double pi = 3.14159265359;\n\n    // \u7def\u5ea6\u7d4c\u5ea6\u3092\u30e9\u30b8\u30a2\u30f3\u306b\u5909\u63db\n    double rlat1 = lat1 * pi / 180;\n    double rlng1 = lng1 * pi / 180;\n    double rlat2 = lat2 * pi / 180;\n    double rlng2 = lng2 * pi / 180;\n\n    // 2\u70b9\u306e\u4e2d\u5fc3\u89d2(\u30e9\u30b8\u30a2\u30f3)\u3092\u6c42\u3081\u308b\n    double a =\n      sin(rlat1) * sin(rlat2) +\n      cos(rlat1) * cos(rlat2) *\n      cos(rlng1 - rlng2);\n    double rr = acos(a);\n\n    // \u5730\u7403\u8d64\u9053\u534a\u5f84(\u30e1\u30fc\u30c8\u30eb)\n    const double earth_radius = 6378140;\n\n    // 2\u70b9\u9593\u306e\u8ddd\u96e2(\u30e1\u30fc\u30c8\u30eb)\n    double distance = earth_radius * rr;\n\n    return distance;\n}\n\nint main(int argc, char *argv[]) {\n  // \u8a08\u7b97\u30b5\u30f3\u30d7\u30eb\n  printf(\"%f\\n\", distance(35.1730990, 136.883466, 35.1855732, 136.899092));\n  printf(\"%f\\n\", distance(35.1855732, 136.899092, 35.1730990, 136.883466));\n  return 0;\n}\n```\n\n## Clojure\n\n```clj\n; \u7403\u9762\u4e09\u89d2\u6cd5\u306b\u3088\u308a\u3001\u5927\u5186\u8ddd\u96e2(\u30e1\u30fc\u30c8\u30eb)\u3092\u6c42\u3081\u308b\n(defn distance [lat1 lng1 lat2 lng2]\n\n  ; \u7def\u5ea6\u7d4c\u5ea6\u3092\u30e9\u30b8\u30a2\u30f3\u306b\u5909\u63db\n  (let [rlat1 (/ (* lat1 Math/PI) 180)\n        rlng1 (/ (* lng1 Math/PI) 180)\n        rlat2 (/ (* lat2 Math/PI) 180)\n        rlng2 (/ (* lng2 Math/PI) 180)\n\n        ; 2\u70b9\u306e\u4e2d\u5fc3\u89d2(\u30e9\u30b8\u30a2\u30f3)\u3092\u6c42\u3081\u308b\n        a (+ (* (Math/sin rlat1) (Math/sin rlat2))\n             (* (* (Math/cos rlat1) (Math/cos rlat2))\n                (Math/cos (- rlng1 rlng2))))\n        rr (Math/acos a)\n\n        ; \u5730\u7403\u8d64\u9053\u534a\u5f84(\u30e1\u30fc\u30c8\u30eb)\n        earth_radius 6378140]\n\n  ; 2\u70b9\u9593\u306e\u8ddd\u96e2(\u30e1\u30fc\u30c8\u30eb)\n  (* earth_radius rr)))\n\n; \u8a08\u7b97\u30b5\u30f3\u30d7\u30eb\n(println (distance 35.1730990 136.883466 35.1855732 136.899092))\n(println (distance 35.1855732 136.899092 35.1730990 136.883466))\n```\n\n## Go\n\n```go\npackage main\n\nimport (\n  \"fmt\"\n  \"math\"\n)\n\nfunc main() {\n  // \u8a08\u7b97\u30b5\u30f3\u30d7\u30eb\n  fmt.Printf(\"%f\\n\", distance(35.1730990, 136.883466, 35.1855732, 136.899092));\n  fmt.Printf(\"%f\\n\", distance(35.1855732, 136.899092, 35.1730990, 136.883466));\n}\n\n// \u7403\u9762\u4e09\u89d2\u6cd5\u306b\u3088\u308a\u3001\u5927\u5186\u8ddd\u96e2(\u30e1\u30fc\u30c8\u30eb)\u3092\u6c42\u3081\u308b\nfunc distance(lat1 float64, lng1 float64, lat2 float64, lng2 float64) float64 {\n\n  // \u7def\u5ea6\u7d4c\u5ea6\u3092\u30e9\u30b8\u30a2\u30f3\u306b\u5909\u63db\n  rlat1 := lat1 * math.Pi / 180\n  rlng1 := lng1 * math.Pi / 180\n  rlat2 := lat2 * math.Pi / 180\n  rlng2 := lng2 * math.Pi / 180\n\n  // 2\u70b9\u306e\u4e2d\u5fc3\u89d2(\u30e9\u30b8\u30a2\u30f3)\u3092\u6c42\u3081\u308b\n  a :=\n    math.Sin(rlat1) * math.Sin(rlat2) +\n    math.Cos(rlat1) * math.Cos(rlat2) *\n    math.Cos(rlng1 - rlng2)\n  rr := math.Acos(a)\n\n  earth_radius := 6378140. // \u5730\u7403\u8d64\u9053\u534a\u5f84(\u30e1\u30fc\u30c8\u30eb)\n  distance := earth_radius * rr\n  return distance\n}\n```\n\n## Haskell\n\n```haskell\n-- \u7403\u9762\u4e09\u89d2\u6cd5\u306b\u3088\u308a\u3001\u5927\u5186\u8ddd\u96e2(\u30e1\u30fc\u30c8\u30eb)\u3092\u6c42\u3081\u308b\ndistance :: Double -> Double -> Double -> Double -> Double\ndistance lat1 lng1 lat2 lng2 = let {\n\n  -- \u7def\u5ea6\u7d4c\u5ea6\u3092\u30e9\u30b8\u30a2\u30f3\u306b\u5909\u63db\n  rlat1 = lat1 * pi / 180;\n  rlng1 = lng1 * pi / 180;\n  rlat2 = lat2 * pi / 180;\n  rlng2 = lng2 * pi / 180;\n\n  -- 2\u70b9\u306e\u4e2d\u5fc3\u89d2(\u30e9\u30b8\u30a2\u30f3)\u3092\u6c42\u3081\u308b\n  a = sin rlat1 * sin rlat2 + cos rlat1 * cos rlat2 * cos (rlng1 - rlng2);\n  rr = acos a;\n\n  earth_radius = 6378140; -- \u5730\u7403\u8d64\u9053\u534a\u5f84(\u30e1\u30fc\u30c8\u30eb)\n  distance = earth_radius * rr;\n\n} in distance\n\nmain = do\n  -- \u8a08\u7b97\u30b5\u30f3\u30d7\u30eb\n  print (distance 35.1730990 136.883466 35.1855732 136.899092)\n  print (distance 35.1855732 136.899092 35.1730990 136.883466)\n```\n\n## Java\n\n```java\npublic class Earth {\n\n  public static void main(String args[]) {\n    // \u8a08\u7b97\u30b5\u30f3\u30d7\u30eb\n    System.out.println(distance(35.1730990, 136.883466, 35.1855732, 136.899092));\n    System.out.println(distance(35.1855732, 136.899092, 35.1730990, 136.883466));\n  }\n\n  // \u7403\u9762\u4e09\u89d2\u6cd5\u306b\u3088\u308a\u3001\u5927\u5186\u8ddd\u96e2(\u30e1\u30fc\u30c8\u30eb)\u3092\u6c42\u3081\u308b\n  public static double distance(double lat1, double lng1, double lat2, double lng2) {\n\n    // \u7def\u5ea6\u7d4c\u5ea6\u3092\u30e9\u30b8\u30a2\u30f3\u306b\u5909\u63db\n    double rlat1 = Math.toRadians(lat1);\n    double rlng1 = Math.toRadians(lng1);\n    double rlat2 = Math.toRadians(lat2);\n    double rlng2 = Math.toRadians(lng2);\n\n    // 2\u70b9\u306e\u4e2d\u5fc3\u89d2(\u30e9\u30b8\u30a2\u30f3)\u3092\u6c42\u3081\u308b\n    double a =\n      Math.sin(rlat1) * Math.sin(rlat2) +\n      Math.cos(rlat1) * Math.cos(rlat2) *\n      Math.cos(rlng1 - rlng2);\n    double rr = Math.acos(a);\n\n    // \u5730\u7403\u8d64\u9053\u534a\u5f84(\u30e1\u30fc\u30c8\u30eb)\n    double earth_radius = 6378140;\n\n    // 2\u70b9\u9593\u306e\u8ddd\u96e2(\u30e1\u30fc\u30c8\u30eb)\n    double distance = earth_radius * rr;\n\n    return distance;\n  }\n}\n```\n\n## LOGO\n\n```\n; \u7403\u9762\u4e09\u89d2\u6cd5\u306b\u3088\u308a\u3001\u5927\u5186\u8ddd\u96e2(\u30e1\u30fc\u30c8\u30eb)\u3092\u6c42\u3081\u308b\nto distance :lat1 :lng1 :lat2 :lng2\n\n  ; \u5186\u5468\u7387\n  make \"pi (radarctan 0 1) * 2\n\n  ; \u7def\u5ea6\u7d4c\u5ea6\u3092\u30e9\u30b8\u30a2\u30f3\u306b\u5909\u63db\n  make \"rlat1 :lat1 * :pi / 180\n  make \"rlng1 :lng1 * :pi / 180\n  make \"rlat2 :lat2 * :pi / 180\n  make \"rlng2 :lng2 * :pi / 180\n\n  ; 2\u70b9\u306e\u4e2d\u5fc3\u89d2(\u30e9\u30b8\u30a2\u30f3)\u3092\u6c42\u3081\u308b\n  make \"a1 (radsin :rlat1) * (radsin :rlat2)\n  make \"a2 (radcos :rlat1) * (radcos :rlat2)\n  make \"a3 radcos (rlng1 - rlng2)\n  make \"a :a1 + :a2 * :a3\n  make \"b sqrt((-1 * :a * :a) + 1)\n  make \"c radarctan((-1 * :a) / :b)\n  make \"rr :c + :pi / 2\n\n  ; \u5730\u7403\u8d64\u9053\u534a\u5f84(\u30e1\u30fc\u30c8\u30eb)\n  make \"earth_radius 6378140\n\n  ; 2\u70b9\u9593\u306e\u8ddd\u96e2(\u30e1\u30fc\u30c8\u30eb)\n  make \"distance :earth_radius * :rr\n\n  output :distance\nend\n\n; \u8a08\u7b97\u30b5\u30f3\u30d7\u30eb\nprint distance 35.1730990 136.883466 35.1855732 136.899092\nprint distance 35.1855732 136.899092 35.1730990 136.883466\n```\n\n## OCaml\n\n```ocaml\n(* \u7403\u9762\u4e09\u89d2\u6cd5\u306b\u3088\u308a\u3001\u5927\u5186\u8ddd\u96e2(\u30e1\u30fc\u30c8\u30eb)\u3092\u6c42\u3081\u308b *)\nlet distance lat1 lng1 lat2 lng2 =\n\n  (* \u5186\u5468\u7387 *)\n  let pi = 3.14159265359 in\n\n  (* \u7def\u5ea6\u7d4c\u5ea6\u3092\u30e9\u30b8\u30a2\u30f3\u306b\u5909\u63db *)\n  let rlat1 = lat1 *. pi /. 180. in\n  let rlng1 = lng1 *. pi /. 180. in\n  let rlat2 = lat2 *. pi /. 180. in\n  let rlng2 = lng2 *. pi /. 180. in\n\n  (* 2\u70b9\u306e\u4e2d\u5fc3\u89d2(\u30e9\u30b8\u30a2\u30f3)\u3092\u6c42\u3081\u308b *)\n  let a = sin rlat1 *. sin rlat2 +. cos rlat1 *. cos rlat2 *. cos (rlng1 -. rlng2) in\n  let rr = acos a in\n\n  let earth_radius = 6378140. in (* \u5730\u7403\u8d64\u9053\u534a\u5f84(\u30e1\u30fc\u30c8\u30eb) *)\n  let distance = earth_radius *. rr in\n\n  distance;;\n\n(* \u8a08\u7b97\u30b5\u30f3\u30d7\u30eb *)\nprint_endline (string_of_float (distance 35.1730990 136.883466 35.1855732 136.899092));;\nprint_endline (string_of_float (distance 35.1855732 136.899092 35.1730990 136.883466));;\n```\n\n## Ruby\n\n```ruby\n# \u7403\u9762\u4e09\u89d2\u6cd5\u306b\u3088\u308a\u3001\u5927\u5186\u8ddd\u96e2(\u30e1\u30fc\u30c8\u30eb)\u3092\u6c42\u3081\u308b\ndef distance(lat1, lng1, lat2, lng2)\n\n  # \u7def\u5ea6\u7d4c\u5ea6\u3092\u30e9\u30b8\u30a2\u30f3\u306b\u5909\u63db\n  rlat1 = lat1 * Math::PI / 180\n  rlng1 = lng1 * Math::PI / 180\n  rlat2 = lat2 * Math::PI / 180\n  rlng2 = lng2 * Math::PI / 180\n\n  # 2\u70b9\u306e\u4e2d\u5fc3\u89d2(\u30e9\u30b8\u30a2\u30f3)\u3092\u6c42\u3081\u308b\n  a =\n    Math::sin(rlat1) * Math::sin(rlat2) +\n    Math::cos(rlat1) * Math::cos(rlat2) *\n    Math::cos(rlng1 - rlng2)\n  rr = Math::acos(a)\n\n  earth_radius = 6378140 # \u5730\u7403\u8d64\u9053\u534a\u5f84(\u30e1\u30fc\u30c8\u30eb)\n  earth_radius * rr\nend\n\n# \u8a08\u7b97\u30b5\u30f3\u30d7\u30eb\nputs distance(35.1730990, 136.883466, 35.1855732, 136.899092)\nputs distance(35.1855732, 136.899092, 35.1730990, 136.883466)\n```\n\n## Rust\n\n```rust\nfn main() {\n  // \u8a08\u7b97\u30b5\u30f3\u30d7\u30eb\n  println!(\"{}\", distance(35.1730990, 136.883466, 35.1855732, 136.899092));\n  println!(\"{}\", distance(35.1855732, 136.899092, 35.1730990, 136.883466));\n}\n\n// \u7403\u9762\u4e09\u89d2\u6cd5\u306b\u3088\u308a\u3001\u5927\u5186\u8ddd\u96e2(\u30e1\u30fc\u30c8\u30eb)\u3092\u6c42\u3081\u308b\nfn distance(lat1: f64, lng1: f64, lat2: f64, lng2: f64) -> f64 {\n\n  // \u7def\u5ea6\u7d4c\u5ea6\u3092\u30e9\u30b8\u30a2\u30f3\u306b\u5909\u63db\n  let rlat1 = lat1.to_radians();\n  let rlng1 = lng1.to_radians();\n  let rlat2 = lat2.to_radians();\n  let rlng2 = lng2.to_radians();\n\n  // 2\u70b9\u306e\u4e2d\u5fc3\u89d2(\u30e9\u30b8\u30a2\u30f3)\u3092\u6c42\u3081\u308b\n  let a =\n    rlat1.sin() * rlat2.sin() +\n    rlat1.cos() * rlat2.cos() *\n    (rlng1 - rlng2).cos();\n  let rr = a.acos();\n\n  let earth_radius = 6378140.; // \u5730\u7403\u8d64\u9053\u534a\u5f84(\u30e1\u30fc\u30c8\u30eb)\n  earth_radius * rr\n}\n```\n\n## Scratch\n\n![distance_scratch.png](https://qiita-image-store.s3.amazonaws.com/0/139365/040227ab-606b-d6a3-93d5-a3732f4ff247.png)\n\n## Swift\n\n```swift\nimport Foundation\n\n// \u7403\u9762\u4e09\u89d2\u6cd5\u306b\u3088\u308a\u3001\u5927\u5186\u8ddd\u96e2(\u30e1\u30fc\u30c8\u30eb)\u3092\u6c42\u3081\u308b\nfunc distance(lat1: Double, lng1: Double, lat2: Double, lng2: Double) -> Double {\n    \n  // \u7def\u5ea6\u7d4c\u5ea6\u3092\u30e9\u30b8\u30a2\u30f3\u306b\u5909\u63db\n  let rlat1 = lat1 * M_PI / 180\n  let rlng1 = lng1 * M_PI / 180\n  let rlat2 = lat2 * M_PI / 180\n  let rlng2 = lng2 * M_PI / 180\n    \n  // 2\u70b9\u306e\u4e2d\u5fc3\u89d2(\u30e9\u30b8\u30a2\u30f3)\u3092\u6c42\u3081\u308b\n  let a =\n    sin(rlat1) * sin(rlat2) +\n    cos(rlat1) * cos(rlat2) *\n    cos(rlng1 - rlng2)\n  let rr = acos(a)\n    \n  // \u5730\u7403\u8d64\u9053\u534a\u5f84(\u30e1\u30fc\u30c8\u30eb)\n  let earth_radius = 6378140.0\n    \n  // 2\u70b9\u9593\u306e\u8ddd\u96e2(\u30e1\u30fc\u30c8\u30eb)\n  let distance = earth_radius * rr\n    \n  return distance\n}\n\n// \u8a08\u7b97\u30b5\u30f3\u30d7\u30eb\nprint(\"\\(distance(lat1: 35.1730990, lng1: 136.883466, lat2: 35.1855732, lng2: 136.899092))\")\nprint(\"\\(distance(lat1: 35.1855732, lng1: 136.899092, lat2: 35.1730990, lng2: 136.883466))\")\n```\n\n## \u53c2\u8003\u8cc7\u6599\n\n- \u5927\u5186\u8ddd\u96e2 - Wikipedia https://ja.wikipedia.org/wiki/%E5%A4%A7%E5%86%86%E8%B7%9D%E9%9B%A2\n", "tags": ["rust", "OCaml", "Clojure", "Scratch", "Swift"]}