{"tags": ["\u7af6\u6280\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0", "Python"], "context": " More than 1 year has passed since last update.Python\u3067\u7af6\u6280\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u3059\u308b\u6642\u306b\u77e5\u3063\u3066\u304a\u304d\u305f\u3044tips\u306e\uff0c\u57fa\u790e\u77e5\u8b58\u306b\u3064\u3044\u3066\u306e\u90e8\u5206\u3092\u5206\u5272\u3057\u307e\u3057\u305f\uff0e\n\u7af6\u6280\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u3067\u306f\uff0c\u591a\u304f\u306e\u5834\u5408\uff0c\u30d7\u30ed\u30b0\u30e9\u30e0\u306e\u5b9f\u884c\u6642\u9593\uff0c\u30e1\u30e2\u30ea\u4f7f\u7528\u91cf\uff0c\u30b9\u30bf\u30c3\u30af\u9818\u57df\u306e\u4f7f\u7528\u91cf\u306a\u3069\u304c\u5236\u9650\u3055\u308c\u308b\uff0e\n\u30b3\u30f3\u30c6\u30b9\u30c8\u306e\u30eb\u30fc\u30eb\u306b\u3082\u3088\u308b\u304c\uff0c\u3053\u306e\u3042\u305f\u308a\u306e\u5236\u9650\u306f\uff0cPython\u306a\u3069\u306eLL\u306b\u306f\u4e0d\u5229\u306b\u50cd\u304f\u3053\u3068\u304c\u591a\u304f\uff0c\u300cC++\u306a\u3089AC\u3055\u308c\u305f\u3051\u3069\uff0cPython\u3060\u3068TLE\u3060\u3063\u305f\u300d\u3068\u3044\u3063\u305f\u3088\u3046\u306a\u3053\u3068\u304c\u8d77\u3053\u308a\u3084\u3059\u3044\uff0e\n\u4f8b\u3048\u3070\uff0c\u30aa\u30f3\u30e9\u30a4\u30f3\u30b8\u30e3\u30c3\u30b8\u30b5\u30fc\u30d3\u30b9\u306eAtCoder\u3067\u306f\uff0c\u6642\u9593\u5236\u96502sec\uff0c\u30e1\u30e2\u30ea\u5236\u9650256MB\u306e\u554f\u984c\u304c\u591a\u3044\uff0e\n\u4eca\u56de\u306f\u3053\u308c\u3092\u57fa\u6e96\u3068\u3057\uff0c\u305d\u308c\u305e\u308c\u306e\u9650\u754c\u5024\u3092\u8abf\u3079\u308b\u3053\u3068\u3068\u3059\u308b\uff0e\n\n\u8a08\u7b97\u91cf\n\u8a08\u7b97\u91cf\u306f\uff0c\u7af6\u6280\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u306b\u304a\u3044\u3066\u975e\u5e38\u306b\u91cd\u8981\u306a\u6982\u5ff5\uff0e\n\u591a\u304f\u306e\u5834\u5408\uff0c\u30eb\u30fc\u30d7\u306e\u56de\u6570\u3092\u6570\u3048\u308b\u3053\u3068\u3067\u5927\u307e\u304b\u306a\u8a08\u7b97\u6642\u9593\u3092\u898b\u7a4d\u3082\u308b\uff0e\n\u7af6\u6280\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u754c\u9688\u3067\u6709\u540d\u306a\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u30b3\u30f3\u30c6\u30b9\u30c8\u30c1\u30e3\u30ec\u30f3\u30b8\u30d6\u30c3\u30af(\u87fb\u672c)\u306b\u3088\u308b\u3068\uff0cC++\u306e\u5834\u5408\uff0c\n\n\u5b9f\u884c\u5236\u9650\u6642\u9593\u304c1\u79d2\u306e\u5834\u5408\uff0c\n10710^7\u306a\u3089\u304a\u305d\u3089\u304f\u9593\u306b\u5408\u3046\uff0e\n10810^8\u3060\u3068\u975e\u5e38\u306b\u30b7\u30f3\u30d7\u30eb\u306a\u51e6\u7406\u3067\u306a\u3044\u9650\u308a\u53b3\u3057\u3044\uff0e\n\n\u3068\u306e\u3053\u3068\u3089\u3057\u3044\uff0e\n\u3053\u308c\u3092\u30d9\u30fc\u30b9\u30e9\u30a4\u30f3\u306b\u3057\u3066\u8a08\u6e2c\u3092\u884c\u3046\uff0e\n\n\u8a08\u6e2c\n\u4f8b\u3048\u3070\uff0c10610^6\u56de\u30eb\u30fc\u30d7\u3092\u56de\u3057\u3066\u51fa\u529b\u3055\u305b\u308b\u3088\u3046\u306a\u30b3\u30fc\u30c9\u3092\u8003\u3048\u308b\uff0e\n\ncaltest.py\nfor i in xrange(1000000):\n    print i\n\n\n\u3053\u306e\u5b9f\u884c\u6642\u9593\u3092\uff0ctime\u30b3\u30de\u30f3\u30c9\u3092\u4f7f\u3063\u3066\u8a08\u6e2c\u3059\u308b\uff0e\n$ time python caltest.py\n0\n1\n...\n999999\npython caltest.py  1.49s user 1.11s system 49% cpu 5.237 total\n\nuser\u304c\u30d7\u30ed\u30b0\u30e9\u30e0\u306e\u5b9f\u884c\u6642\u9593\u306b\u306a\u308b\uff0e\n\u3082\u3046\u7d50\u69cb\u304e\u308a\u304e\u308a\u3067\uff0c\u30eb\u30fc\u30d7\u4e2d\u3067\u3061\u3087\u3063\u3068\u91cd\u3044\u51e6\u7406\u3055\u305b\u308b\u3068\u3059\u3050\u6b7b\u306b\u305d\u3046\uff0e\n\u3053\u308c\u3092\uff0c2\u22171062*10^6\u306b\u3059\u308b\u3068\uff0c\n\ncaltest2.py\nfor i in xrange(2000000):\n    print i\n\n\n$ time python caltest2.py\n0\n1\n...\n1999999\npython caltest2.py  3.00s user 2.26s system 50% cpu 10.475 total\n\n\u5358\u7d14\u306b\u30eb\u30fc\u30d7\u3060\u3051\u307f\u3066\u3082\uff0c2\u22171062*10^6\u56de\u7a0b\u5ea6\u306e\u51fa\u529b\u3067\u30c0\u30e1\u306b\u306a\u308b\u3053\u3068\u304c\u308f\u304b\u308b\uff0e\n\u300cPython\u306f10610^6\u30eb\u30fc\u30d7\u3067\u3082\u304d\u3064\u3044\u300d\u3068\u8ab0\u304b\u304b\u3089\u805e\u3044\u305f\u3088\u3046\u306a\u6c17\u304c\u3059\u308b\u304c\uff0c\u305d\u308c\u304c\u88cf\u4ed8\u3051\u3089\u308c\u305f\u5f62\u3060\uff0e\n\u3061\u306a\u307f\u306b\uff0cC++\u3067\u540c\u3058\u3053\u3068\u3092\u3055\u305b\u308b\u3068\uff0c\n\ncaltest.cpp\n#include <cstdio>\n\nusing namespace std;\n\nint main() {\n\n  for(int i = 0; i < 2000000; i++) printf(\"%d\\n\", i);\n  return 0;\n\n}\n\n\n$ g++ caltest.cpp\n$ time ./a.out\n0\n1\n...\n1999999\n./a.out  1.27s user 2.10s system 34% cpu 9.714 total\n\n\u306e\u3088\u3046\u306b\u306a\u308b\uff0e\n\u4eca\u56de\u6bd4\u8f03\u3057\u305f\u306e\u306f\u51fa\u529b\u306e\u30b3\u30fc\u30c9\u306a\u306e\u3067\u305d\u3053\u307e\u3067\u306e\u5dee\u306f\u51fa\u306a\u304b\u3063\u305f\u304c\uff0c\u305d\u308c\u3067\u30822\u500d\u4ee5\u4e0a\u65e9\u3044\uff0e\n\u4e00\u822c\u7684\u306b\u306f\uff0cC++\u3068Python\u3060\u3068\uff0c10\u301c100\u500d\u7a0b\u5ea6\u306e\u5b9f\u884c\u6642\u9593\u306e\u9055\u3044\u304c\u3042\u308b\u3089\u3057\u3044\uff0e\nC++ vs. Python vs. Perl vs. PHP performance benchmark - /contrib/famzah\n\n\u30e1\u30e2\u30ea\u4f7f\u7528\u91cf\nPython\u3067\u306f\uff0c\u30ea\u30b9\u30c8\u306b\u4f55\u3089\u304b\u306e\u6700\u9069\u5316\u304c\u306a\u3055\u308c\u3066\u304a\u308a\uff0cC++\u306e\u3088\u3046\u306b\u578b\u306b\u3088\u3063\u3066\u914d\u5217\u306e\u30e1\u30e2\u30ea\u4f7f\u7528\u91cf\u3092\u898b\u7a4d\u3082\u308b\u3088\u3046\u306a\u3053\u3068\u304c\u96e3\u3057\u3044\uff0e\n\u4eca\u56de\u306f\uff0c\u3044\u304f\u3064\u304b\u306e\u4f8b\u306b\u3064\u3044\u3066\uff0cmemory_profiler\u3092\u4f7f\u3063\u3066\u30e1\u30e2\u30ea\u4f7f\u7528\u91cf\u3092\u8a08\u6e2c\u3059\u308b\u3053\u3068\u3068\u3059\u308b\uff0e\n\n\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\nPython \u3067\u5b9f\u884c\u6642\u30e1\u30e2\u30ea\u3092\u8a08\u6e2c\u3059\u308b\u5834\u5408 memory_profiler \u3092\u5229\u7528\u3059\u308b\u3068\u4fbf\u5229 - \u7d39\u4ecb\u30de\u30cb\u30a2\u3069\u3089\u3075\u3068\u7248\n$ pip install -U memory_profiler\n$ pip install psutil\n\n\n\u8a08\u6e2c\n\u4f8b\u3048\u3070\uff0c\u6574\u6570\u578b\u5909\u6570\u306e\u30e1\u30e2\u30ea\u4f7f\u7528\u91cf\u3092\u78ba\u8a8d\u3059\u308b\u306b\u306f\uff0c\n\nmemtest.py\n@profile\ndef main():\n    l = 0\n\nif __name__ == '__main__':\n    main()\n\n\n$ python -m memory_profiler memtest.py\nFilename: memtest.py\n\nLine #    Mem usage    Increment   Line Contents\n================================================\n     1    8.555 MiB    0.000 MiB   @profile\n     2                             def main():\n     3    8.559 MiB    0.004 MiB       l = 0\n\n\u306e\u3088\u3046\u306b\u3059\u308b\uff0e\n\u8a08\u6e2c\u3057\u305f\u3044\u95a2\u6570\u306e\u982d\u306b@profile\u3092\u3064\u3051\u308b\u3053\u3068\u306b\u6ce8\u610f\uff0e\n\"Increment\" \u304c\uff0c\u305d\u306e\u884c\u3067\u4f7f\u7528\u3057\u305f\u30e1\u30e2\u30ea\u91cf\uff0e\n\u3053\u306e\u5834\u5408\uff0cl = 0\u306f0.004Mib(\u22524KB)\u306e\u30e1\u30e2\u30ea\u3092\u98df\u3046\u3053\u3068\u304c\u308f\u304b\u308b\uff0e\n\u30ea\u30b9\u30c8\u3067\u3082\u8a66\u3057\u3066\u307f\u308b\uff0e\n\nmemtest2.py\n@profile\ndef main():\n    l = [0] * 1000000\n\nif __name__ == '__main__':\n    main()\n\n\n$ python -m memory_profiler memtest2.py\nFilename: memtest2.py\n\nLine #    Mem usage    Increment   Line Contents\n================================================\n     1    8.781 MiB    0.000 MiB   @profile\n     2                             def main():\n     3   16.418 MiB    7.637 MiB       l = [0] * 1000000\n\n\u5358\u7d14\u306b\u6574\u6570\u578b\u306e1,000,000\u500d\u306b\u306f\u306a\u3089\u306a\u3044\u307f\u305f\u3044\uff0e\n\u3060\u3044\u305f\u3044\uff0c1\u8981\u7d20\u306b\u3064\u304d8Byte\u7a0b\u5ea6\uff1f\n\u307e\u305f\uff0c2\u6b21\u5143\u30ea\u30b9\u30c8\u306b\u3064\u3044\u3066\u3082\u8a66\u3057\u3066\u307f\u308b\u3068\uff0c\n\nmemtest3.py\n@profile\ndef main():\n    l = [[0] * 1000 for _ in xrange(1000)]\n\nif __name__ == '__main__':\n    main()\n\n\n$ python -m memory_profiler memtest3.py\nFilename: memtest3.py\n\nLine #    Mem usage    Increment   Line Contents\n================================================\n     1    8.742 MiB    0.000 MiB   @profile\n     2                             def main():\n     3   16.676 MiB    7.934 MiB       l = [[0] * 1000 for _ in xrange(1000)]\n\n\u306e\u3088\u3046\u306b\u306a\u308b\uff0e\n1\u6b21\u5143\u30ea\u30b9\u30c8\u3068\u8981\u7d20\u6570\u304c\u540c\u3058\u306a\u3089\uff0c\u30e1\u30e2\u30ea\u4f7f\u7528\u91cf\u306f\u3060\u3044\u305f\u3044\u540c\u3058\u304b\uff0c2\u6b21\u5143\u30ea\u30b9\u30c8\u306e\u65b9\u304c\u5c11\u3057\u591a\u304f\u306a\u308b\u307f\u305f\u3044\uff0e\n\u5c11\u3057\u8981\u7d20\u6570\u3092\u5897\u3084\u3057\u3066\u307f\u308b\uff0e\n\nmemtest4.py\n@profile\ndef main():\n    l = [0] * 100000000\n\nif __name__ == '__main__':\n    main()\n\n\n$ python -m memory_profiler memtest4.py\nFilename: memtest4.py\n\nLine #    Mem usage    Increment   Line Contents\n================================================\n     1    8.398 MiB    0.000 MiB   @profile\n     2                             def main():\n     3  771.344 MiB  762.945 MiB       l = [0] * 100000000\n\n\nmemtest5.py\n@profile\ndef main():\n    l = [[0] * 10000 for _ in xrange(10000)]\n\nif __name__ == '__main__':\n    main()\n\n\n$ python -m memory_profiler memtest5.py\nFilename: memtest5.py\n\nLine #    Mem usage    Increment   Line Contents\n================================================\n     1    8.383 MiB    0.000 MiB   @profile\n     2                             def main():\n     3  779.613 MiB  771.230 MiB       l = [[0] * 10000 for _ in xrange(10000)]\n\n\u8981\u7d20\u657010710^7\u301c10810^8\u3050\u3089\u3044\u3067\u5236\u9650\u3092\u8d85\u3048\u3066\u3057\u307e\u3046\uff0e\n\u3082\u3063\u3068\u3082\uff0c\u3053\u308c\u3050\u3089\u3044\u5927\u304d\u306a\u30ea\u30b9\u30c8\u3092\u4f5c\u3089\u306a\u3044\u3068\u3044\u3051\u306a\u3044\u5834\u5408\uff0c\u5b9f\u88c5\u306b\u554f\u984c\u304c\u3042\u308b\u53ef\u80fd\u6027\u304c\u9ad8\u3044\uff0e\n\n\u518d\u5e30\u6df1\u5ea6\nPython\u306e\u518d\u5e30\u306e\u6df1\u3055\u306b\u3064\u3044\u3066\u3042\u308c\u3053\u308c - \u6570\u5024\u8a08\u7b97\u3068\u304b\u306e\u5099\u5fd8\u9332\uff08\u4eee\uff09\n\u518d\u5e30\u306e\u30b3\u30fc\u30c9\u3092\u66f8\u3044\u3066\u5927\u304d\u3044\u30c7\u30fc\u30bf\u3092\u5165\u529b\u3057\u305f\u6642\uff0c\u518d\u5e30\u6df1\u5ea6\u304c\u30c7\u30d5\u30a9\u30eb\u30c8\u306e\u6700\u5927\u5024\u3092\u8d85\u3048\u308b\u53ef\u80fd\u6027\u304c\u3042\u308b\uff0e\n\u4f8b\u3048\u3070\uff0c\u4ee5\u4e0b\u306e\u3088\u3046\u306a\uff0cn\u306e\u968e\u4e57\u3092\u7dda\u5f62\u53cd\u5fa9\u3067\u6c42\u3081\u308b\u30b3\u30fc\u30c9\u306b\u3064\u3044\u3066\uff0c\n\nrectest.py\n# -*- coding: utf-8 -*-\n\ndef fact_iter(n, res):\n    if n == 0:\n        return res\n    else:\n        return fact_iter(n - 1, n * res)\n\nif __name__ == '__main__':\n    print fact_iter(999, 1) # 999!\u304c\u51fa\u529b\u3055\u308c\u308b\u306f\u305a\n\n\n\u3053\u308c\u3092\u5b9f\u884c\u3059\u308b\u3068\uff0c\n  ...\n  File \"rectest.py\", line 8, in fact_iter\n    return fact_iter(n - 1, n * res)\n  File \"rectest.py\", line 8, in fact_iter\n    return fact_iter(n - 1, n * res)\n  File \"rectest.py\", line 8, in fact_iter\n    return fact_iter(n - 1, n * res)\nRuntimeError: maximum recursion depth exceeded\n\n\u306e\u3088\u3046\u306a\u30a8\u30e9\u30fc\u304c\u51fa\u308b\uff0e\n\n\u518d\u5e30\u6df1\u5ea6\u306e\u5909\u66f4\n>>> import sys\n>>> sys.getrecursionlimit()\n1000\n\n\u4e0a\u8a18\u306e\u3088\u3046\u306b\uff0c\u518d\u5e30\u6df1\u5ea6\u306f\u30c7\u30d5\u30a9\u30eb\u30c8\u30671000\u304c\u9650\u754c\u3089\u3057\u3044\uff0e\n\u3053\u308c\u3060\u3068\uff0c\u4f8b\u3048\u3070\uff0c100*100\u7a0b\u5ea6\u306e2\u6b21\u5143\u914d\u5217\u3092DFS(\u518d\u5e30\u7248)\u3059\u308b\u3050\u3089\u3044\u3067\u3082\u30a8\u30e9\u30fc\u306b\u306a\u3063\u3066\u3057\u307e\u3046\uff0e\n\u3053\u308c\u3092\uff0c\u4f8b\u3048\u307010000\u306b\u5909\u66f4\u3057\u305f\u3044\u306a\u3089\uff0c\nimport sys\n\nsys.setrecursionlimit(10000)\n\n\u3068\u3059\u308c\u3070\u3088\u3044\uff0e\n\u3053\u3053\u3067\u8a00\u3046\u300c\u518d\u5e30\u6df1\u5ea6\u300d\u306f\u5fc5\u305a\u3057\u3082(\u30d7\u30ed\u30b0\u30e9\u30de\u306e\u8003\u3048\u308b)\u518d\u5e30\u306e\u56de\u6570\u3068\u4e00\u81f4\u3057\u306a\u3044\u307f\u305f\u3044\uff0e\n\u4f8b\u3048\u3070\uff0c\u4e0a\u306e\u4f8b\u3060\u3068\uff0c\u518d\u5e30\u6df1\u5ea6\u306e\u9650\u754c\u5024\u306f1000\u306a\u306e\u306b\u5bfe\u3057\uff0c999!(\u3053\u306e\u5834\u5408\uff0c1000\u56defact_iter()\u304c\u547c\u3073\u51fa\u3055\u308c\u308b)\u304c\u8a08\u7b97\u3067\u304d\u3066\u3044\u306a\u3044\uff0e\nrecursionlimit\u306b\u3064\u3044\u3066\u306f\uff0c\u5c11\u3057\u591a\u3081\u306b\u53d6\u3063\u3066\u304a\u304f\u65b9\u304c\u826f\u3055\u305d\u3046\uff0e\n\n[Python\u3067\u7af6\u6280\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u3059\u308b\u6642\u306b\u77e5\u3063\u3066\u304a\u304d\u305f\u3044tips](http://qiita.com/lethe2211/items/b91cc9e2b355ad32f1e6)\u306e\uff0c\u57fa\u790e\u77e5\u8b58\u306b\u3064\u3044\u3066\u306e\u90e8\u5206\u3092\u5206\u5272\u3057\u307e\u3057\u305f\uff0e\n\n\u7af6\u6280\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u3067\u306f\uff0c\u591a\u304f\u306e\u5834\u5408\uff0c\u30d7\u30ed\u30b0\u30e9\u30e0\u306e\u5b9f\u884c\u6642\u9593\uff0c\u30e1\u30e2\u30ea\u4f7f\u7528\u91cf\uff0c\u30b9\u30bf\u30c3\u30af\u9818\u57df\u306e\u4f7f\u7528\u91cf\u306a\u3069\u304c\u5236\u9650\u3055\u308c\u308b\uff0e\n\n\u30b3\u30f3\u30c6\u30b9\u30c8\u306e\u30eb\u30fc\u30eb\u306b\u3082\u3088\u308b\u304c\uff0c\u3053\u306e\u3042\u305f\u308a\u306e\u5236\u9650\u306f\uff0cPython\u306a\u3069\u306eLL\u306b\u306f\u4e0d\u5229\u306b\u50cd\u304f\u3053\u3068\u304c\u591a\u304f\uff0c\u300cC++\u306a\u3089AC\u3055\u308c\u305f\u3051\u3069\uff0cPython\u3060\u3068TLE\u3060\u3063\u305f\u300d\u3068\u3044\u3063\u305f\u3088\u3046\u306a\u3053\u3068\u304c\u8d77\u3053\u308a\u3084\u3059\u3044\uff0e\n\n\u4f8b\u3048\u3070\uff0c\u30aa\u30f3\u30e9\u30a4\u30f3\u30b8\u30e3\u30c3\u30b8\u30b5\u30fc\u30d3\u30b9\u306e[AtCoder](http://atcoder.jp/)\u3067\u306f\uff0c\u6642\u9593\u5236\u96502sec\uff0c\u30e1\u30e2\u30ea\u5236\u9650256MB\u306e\u554f\u984c\u304c\u591a\u3044\uff0e\n\u4eca\u56de\u306f\u3053\u308c\u3092\u57fa\u6e96\u3068\u3057\uff0c\u305d\u308c\u305e\u308c\u306e\u9650\u754c\u5024\u3092\u8abf\u3079\u308b\u3053\u3068\u3068\u3059\u308b\uff0e\n\n## \u8a08\u7b97\u91cf\n\n\u8a08\u7b97\u91cf\u306f\uff0c\u7af6\u6280\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u306b\u304a\u3044\u3066\u975e\u5e38\u306b\u91cd\u8981\u306a\u6982\u5ff5\uff0e\n\u591a\u304f\u306e\u5834\u5408\uff0c\u30eb\u30fc\u30d7\u306e\u56de\u6570\u3092\u6570\u3048\u308b\u3053\u3068\u3067\u5927\u307e\u304b\u306a\u8a08\u7b97\u6642\u9593\u3092\u898b\u7a4d\u3082\u308b\uff0e\n\n\u7af6\u6280\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u754c\u9688\u3067\u6709\u540d\u306a[\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u30b3\u30f3\u30c6\u30b9\u30c8\u30c1\u30e3\u30ec\u30f3\u30b8\u30d6\u30c3\u30af](http://www.amazon.co.jp/%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9F%E3%83%B3%E3%82%B0%E3%82%B3%E3%83%B3%E3%83%86%E3%82%B9%E3%83%88%E3%83%81%E3%83%A3%E3%83%AC%E3%83%B3%E3%82%B8%E3%83%96%E3%83%83%E3%82%AF-%E7%A7%8B%E8%91%89-%E6%8B%93%E5%93%89/dp/4839931992)(\u87fb\u672c)\u306b\u3088\u308b\u3068\uff0cC++\u306e\u5834\u5408\uff0c\n\n>\n\u5b9f\u884c\u5236\u9650\u6642\u9593\u304c1\u79d2\u306e\u5834\u5408\uff0c\n$10^7$\u306a\u3089\u304a\u305d\u3089\u304f\u9593\u306b\u5408\u3046\uff0e\n$10^8$\u3060\u3068\u975e\u5e38\u306b\u30b7\u30f3\u30d7\u30eb\u306a\u51e6\u7406\u3067\u306a\u3044\u9650\u308a\u53b3\u3057\u3044\uff0e\n>\n\n\u3068\u306e\u3053\u3068\u3089\u3057\u3044\uff0e\n\n\u3053\u308c\u3092\u30d9\u30fc\u30b9\u30e9\u30a4\u30f3\u306b\u3057\u3066\u8a08\u6e2c\u3092\u884c\u3046\uff0e\n\n### \u8a08\u6e2c\n\n\u4f8b\u3048\u3070\uff0c$10^6$\u56de\u30eb\u30fc\u30d7\u3092\u56de\u3057\u3066\u51fa\u529b\u3055\u305b\u308b\u3088\u3046\u306a\u30b3\u30fc\u30c9\u3092\u8003\u3048\u308b\uff0e\n\n```python:caltest.py\nfor i in xrange(1000000):\n    print i\n```\n\n\u3053\u306e\u5b9f\u884c\u6642\u9593\u3092\uff0ctime\u30b3\u30de\u30f3\u30c9\u3092\u4f7f\u3063\u3066\u8a08\u6e2c\u3059\u308b\uff0e\n\n```bash\n$ time python caltest.py\n0\n1\n...\n999999\npython caltest.py  1.49s user 1.11s system 49% cpu 5.237 total\n```\n\nuser\u304c\u30d7\u30ed\u30b0\u30e9\u30e0\u306e\u5b9f\u884c\u6642\u9593\u306b\u306a\u308b\uff0e\n\n\u3082\u3046\u7d50\u69cb\u304e\u308a\u304e\u308a\u3067\uff0c\u30eb\u30fc\u30d7\u4e2d\u3067\u3061\u3087\u3063\u3068\u91cd\u3044\u51e6\u7406\u3055\u305b\u308b\u3068\u3059\u3050\u6b7b\u306b\u305d\u3046\uff0e\n\n\u3053\u308c\u3092\uff0c$2*10^6$\u306b\u3059\u308b\u3068\uff0c\n\n```python:caltest2.py\nfor i in xrange(2000000):\n    print i\n```\n\n```bash\n$ time python caltest2.py\n0\n1\n...\n1999999\npython caltest2.py  3.00s user 2.26s system 50% cpu 10.475 total\n```\n\n\u5358\u7d14\u306b\u30eb\u30fc\u30d7\u3060\u3051\u307f\u3066\u3082\uff0c$2*10^6$\u56de\u7a0b\u5ea6\u306e\u51fa\u529b\u3067\u30c0\u30e1\u306b\u306a\u308b\u3053\u3068\u304c\u308f\u304b\u308b\uff0e\n\u300cPython\u306f$10^6$\u30eb\u30fc\u30d7\u3067\u3082\u304d\u3064\u3044\u300d\u3068\u8ab0\u304b\u304b\u3089\u805e\u3044\u305f\u3088\u3046\u306a\u6c17\u304c\u3059\u308b\u304c\uff0c\u305d\u308c\u304c\u88cf\u4ed8\u3051\u3089\u308c\u305f\u5f62\u3060\uff0e\n\n\u3061\u306a\u307f\u306b\uff0cC++\u3067\u540c\u3058\u3053\u3068\u3092\u3055\u305b\u308b\u3068\uff0c\n\n```cpp:caltest.cpp\n#include <cstdio>\n\nusing namespace std;\n\nint main() {\n\n  for(int i = 0; i < 2000000; i++) printf(\"%d\\n\", i);\n  return 0;\n\n}\n```\n\n```bash\n$ g++ caltest.cpp\n$ time ./a.out\n0\n1\n...\n1999999\n./a.out  1.27s user 2.10s system 34% cpu 9.714 total\n```\n\n\u306e\u3088\u3046\u306b\u306a\u308b\uff0e\n\u4eca\u56de\u6bd4\u8f03\u3057\u305f\u306e\u306f\u51fa\u529b\u306e\u30b3\u30fc\u30c9\u306a\u306e\u3067\u305d\u3053\u307e\u3067\u306e\u5dee\u306f\u51fa\u306a\u304b\u3063\u305f\u304c\uff0c\u305d\u308c\u3067\u30822\u500d\u4ee5\u4e0a\u65e9\u3044\uff0e\n\n\u4e00\u822c\u7684\u306b\u306f\uff0cC++\u3068Python\u3060\u3068\uff0c10\u301c100\u500d\u7a0b\u5ea6\u306e\u5b9f\u884c\u6642\u9593\u306e\u9055\u3044\u304c\u3042\u308b\u3089\u3057\u3044\uff0e\n[C++ vs. Python vs. Perl vs. PHP performance benchmark - /contrib/famzah](http://blog.famzah.net/2010/07/01/cpp-vs-python-vs-perl-vs-php-performance-benchmark/)\n\n## \u30e1\u30e2\u30ea\u4f7f\u7528\u91cf\n\nPython\u3067\u306f\uff0c\u30ea\u30b9\u30c8\u306b\u4f55\u3089\u304b\u306e\u6700\u9069\u5316\u304c\u306a\u3055\u308c\u3066\u304a\u308a\uff0cC++\u306e\u3088\u3046\u306b\u578b\u306b\u3088\u3063\u3066\u914d\u5217\u306e\u30e1\u30e2\u30ea\u4f7f\u7528\u91cf\u3092\u898b\u7a4d\u3082\u308b\u3088\u3046\u306a\u3053\u3068\u304c\u96e3\u3057\u3044\uff0e\n\n\u4eca\u56de\u306f\uff0c\u3044\u304f\u3064\u304b\u306e\u4f8b\u306b\u3064\u3044\u3066\uff0c[memory_profiler](https://pypi.python.org/pypi/memory_profiler)\u3092\u4f7f\u3063\u3066\u30e1\u30e2\u30ea\u4f7f\u7528\u91cf\u3092\u8a08\u6e2c\u3059\u308b\u3053\u3068\u3068\u3059\u308b\uff0e\n\n### \u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\n\n[Python \u3067\u5b9f\u884c\u6642\u30e1\u30e2\u30ea\u3092\u8a08\u6e2c\u3059\u308b\u5834\u5408 memory_profiler \u3092\u5229\u7528\u3059\u308b\u3068\u4fbf\u5229 - \u7d39\u4ecb\u30de\u30cb\u30a2\u3069\u3089\u3075\u3068\u7248](http://www.sakito.com/2012/09/python-memoryprofiler.html)\n\n```bash\n$ pip install -U memory_profiler\n$ pip install psutil\n```\n\n### \u8a08\u6e2c\n\n\u4f8b\u3048\u3070\uff0c\u6574\u6570\u578b\u5909\u6570\u306e\u30e1\u30e2\u30ea\u4f7f\u7528\u91cf\u3092\u78ba\u8a8d\u3059\u308b\u306b\u306f\uff0c\n\n```python:memtest.py\n@profile\ndef main():\n    l = 0\n\nif __name__ == '__main__':\n    main()\n```\n\n```bash\n$ python -m memory_profiler memtest.py\nFilename: memtest.py\n\nLine #    Mem usage    Increment   Line Contents\n================================================\n     1    8.555 MiB    0.000 MiB   @profile\n     2                             def main():\n     3    8.559 MiB    0.004 MiB       l = 0\n```\n\n\u306e\u3088\u3046\u306b\u3059\u308b\uff0e\n\n\u8a08\u6e2c\u3057\u305f\u3044\u95a2\u6570\u306e\u982d\u306b`@profile`\u3092\u3064\u3051\u308b\u3053\u3068\u306b\u6ce8\u610f\uff0e\n\"Increment\" \u304c\uff0c\u305d\u306e\u884c\u3067\u4f7f\u7528\u3057\u305f\u30e1\u30e2\u30ea\u91cf\uff0e\n\u3053\u306e\u5834\u5408\uff0c`l = 0`\u306f0.004Mib(\u22524KB)\u306e\u30e1\u30e2\u30ea\u3092\u98df\u3046\u3053\u3068\u304c\u308f\u304b\u308b\uff0e\n\n\u30ea\u30b9\u30c8\u3067\u3082\u8a66\u3057\u3066\u307f\u308b\uff0e\n\n```python:memtest2.py\n@profile\ndef main():\n    l = [0] * 1000000\n\nif __name__ == '__main__':\n    main()\n```\n\n```bash\n$ python -m memory_profiler memtest2.py\nFilename: memtest2.py\n\nLine #    Mem usage    Increment   Line Contents\n================================================\n     1    8.781 MiB    0.000 MiB   @profile\n     2                             def main():\n     3   16.418 MiB    7.637 MiB       l = [0] * 1000000\n```\n\n\u5358\u7d14\u306b\u6574\u6570\u578b\u306e1,000,000\u500d\u306b\u306f\u306a\u3089\u306a\u3044\u307f\u305f\u3044\uff0e\n\n\u3060\u3044\u305f\u3044\uff0c1\u8981\u7d20\u306b\u3064\u304d8Byte\u7a0b\u5ea6\uff1f\n\n\u307e\u305f\uff0c2\u6b21\u5143\u30ea\u30b9\u30c8\u306b\u3064\u3044\u3066\u3082\u8a66\u3057\u3066\u307f\u308b\u3068\uff0c\n\n```python:memtest3.py\n@profile\ndef main():\n    l = [[0] * 1000 for _ in xrange(1000)]\n\nif __name__ == '__main__':\n    main()\n```\n\n```bash\n$ python -m memory_profiler memtest3.py\nFilename: memtest3.py\n\nLine #    Mem usage    Increment   Line Contents\n================================================\n     1    8.742 MiB    0.000 MiB   @profile\n     2                             def main():\n     3   16.676 MiB    7.934 MiB       l = [[0] * 1000 for _ in xrange(1000)]\n```\n\n\u306e\u3088\u3046\u306b\u306a\u308b\uff0e\n\n1\u6b21\u5143\u30ea\u30b9\u30c8\u3068\u8981\u7d20\u6570\u304c\u540c\u3058\u306a\u3089\uff0c\u30e1\u30e2\u30ea\u4f7f\u7528\u91cf\u306f\u3060\u3044\u305f\u3044\u540c\u3058\u304b\uff0c2\u6b21\u5143\u30ea\u30b9\u30c8\u306e\u65b9\u304c\u5c11\u3057\u591a\u304f\u306a\u308b\u307f\u305f\u3044\uff0e\n\n\u5c11\u3057\u8981\u7d20\u6570\u3092\u5897\u3084\u3057\u3066\u307f\u308b\uff0e\n\n```python:memtest4.py\n@profile\ndef main():\n    l = [0] * 100000000\n\nif __name__ == '__main__':\n    main()\n```\n\n```bash\n$ python -m memory_profiler memtest4.py\nFilename: memtest4.py\n\nLine #    Mem usage    Increment   Line Contents\n================================================\n     1    8.398 MiB    0.000 MiB   @profile\n     2                             def main():\n     3  771.344 MiB  762.945 MiB       l = [0] * 100000000\n```\n\n\n```python:memtest5.py\n@profile\ndef main():\n    l = [[0] * 10000 for _ in xrange(10000)]\n\nif __name__ == '__main__':\n    main()\n```\n\n```bash\n$ python -m memory_profiler memtest5.py\nFilename: memtest5.py\n\nLine #    Mem usage    Increment   Line Contents\n================================================\n     1    8.383 MiB    0.000 MiB   @profile\n     2                             def main():\n     3  779.613 MiB  771.230 MiB       l = [[0] * 10000 for _ in xrange(10000)]\n```\n\n\u8981\u7d20\u6570$10^7$\u301c$10^8$\u3050\u3089\u3044\u3067\u5236\u9650\u3092\u8d85\u3048\u3066\u3057\u307e\u3046\uff0e\n\n\u3082\u3063\u3068\u3082\uff0c\u3053\u308c\u3050\u3089\u3044\u5927\u304d\u306a\u30ea\u30b9\u30c8\u3092\u4f5c\u3089\u306a\u3044\u3068\u3044\u3051\u306a\u3044\u5834\u5408\uff0c\u5b9f\u88c5\u306b\u554f\u984c\u304c\u3042\u308b\u53ef\u80fd\u6027\u304c\u9ad8\u3044\uff0e\n\n## \u518d\u5e30\u6df1\u5ea6\n\n[Python\u306e\u518d\u5e30\u306e\u6df1\u3055\u306b\u3064\u3044\u3066\u3042\u308c\u3053\u308c - \u6570\u5024\u8a08\u7b97\u3068\u304b\u306e\u5099\u5fd8\u9332\uff08\u4eee\uff09](http://d.hatena.ne.jp/aldente39/20110713/1310559234)\n\n\u518d\u5e30\u306e\u30b3\u30fc\u30c9\u3092\u66f8\u3044\u3066\u5927\u304d\u3044\u30c7\u30fc\u30bf\u3092\u5165\u529b\u3057\u305f\u6642\uff0c\u518d\u5e30\u6df1\u5ea6\u304c\u30c7\u30d5\u30a9\u30eb\u30c8\u306e\u6700\u5927\u5024\u3092\u8d85\u3048\u308b\u53ef\u80fd\u6027\u304c\u3042\u308b\uff0e\n\n\u4f8b\u3048\u3070\uff0c\u4ee5\u4e0b\u306e\u3088\u3046\u306a\uff0cn\u306e\u968e\u4e57\u3092\u7dda\u5f62\u53cd\u5fa9\u3067\u6c42\u3081\u308b\u30b3\u30fc\u30c9\u306b\u3064\u3044\u3066\uff0c\n\n```python:rectest.py\n# -*- coding: utf-8 -*-\n\ndef fact_iter(n, res):\n    if n == 0:\n        return res\n    else:\n        return fact_iter(n - 1, n * res)\n\nif __name__ == '__main__':\n    print fact_iter(999, 1) # 999!\u304c\u51fa\u529b\u3055\u308c\u308b\u306f\u305a\n```\n\n\u3053\u308c\u3092\u5b9f\u884c\u3059\u308b\u3068\uff0c\n\n```python\n  ...\n  File \"rectest.py\", line 8, in fact_iter\n    return fact_iter(n - 1, n * res)\n  File \"rectest.py\", line 8, in fact_iter\n    return fact_iter(n - 1, n * res)\n  File \"rectest.py\", line 8, in fact_iter\n    return fact_iter(n - 1, n * res)\nRuntimeError: maximum recursion depth exceeded\n```\n\n\u306e\u3088\u3046\u306a\u30a8\u30e9\u30fc\u304c\u51fa\u308b\uff0e\n\n### \u518d\u5e30\u6df1\u5ea6\u306e\u5909\u66f4\n\n```python\n>>> import sys\n>>> sys.getrecursionlimit()\n1000\n```\n\n\u4e0a\u8a18\u306e\u3088\u3046\u306b\uff0c\u518d\u5e30\u6df1\u5ea6\u306f\u30c7\u30d5\u30a9\u30eb\u30c8\u30671000\u304c\u9650\u754c\u3089\u3057\u3044\uff0e\n\u3053\u308c\u3060\u3068\uff0c\u4f8b\u3048\u3070\uff0c100*100\u7a0b\u5ea6\u306e2\u6b21\u5143\u914d\u5217\u3092DFS(\u518d\u5e30\u7248)\u3059\u308b\u3050\u3089\u3044\u3067\u3082\u30a8\u30e9\u30fc\u306b\u306a\u3063\u3066\u3057\u307e\u3046\uff0e\n\n\u3053\u308c\u3092\uff0c\u4f8b\u3048\u307010000\u306b\u5909\u66f4\u3057\u305f\u3044\u306a\u3089\uff0c\n\n```python\nimport sys\n\nsys.setrecursionlimit(10000)\n```\n\n\u3068\u3059\u308c\u3070\u3088\u3044\uff0e\n\n\u3053\u3053\u3067\u8a00\u3046\u300c\u518d\u5e30\u6df1\u5ea6\u300d\u306f\u5fc5\u305a\u3057\u3082(\u30d7\u30ed\u30b0\u30e9\u30de\u306e\u8003\u3048\u308b)\u518d\u5e30\u306e\u56de\u6570\u3068\u4e00\u81f4\u3057\u306a\u3044\u307f\u305f\u3044\uff0e\n\u4f8b\u3048\u3070\uff0c\u4e0a\u306e\u4f8b\u3060\u3068\uff0c\u518d\u5e30\u6df1\u5ea6\u306e\u9650\u754c\u5024\u306f1000\u306a\u306e\u306b\u5bfe\u3057\uff0c999!(\u3053\u306e\u5834\u5408\uff0c1000\u56de`fact_iter()`\u304c\u547c\u3073\u51fa\u3055\u308c\u308b)\u304c\u8a08\u7b97\u3067\u304d\u3066\u3044\u306a\u3044\uff0e\n\nrecursionlimit\u306b\u3064\u3044\u3066\u306f\uff0c\u5c11\u3057\u591a\u3081\u306b\u53d6\u3063\u3066\u304a\u304f\u65b9\u304c\u826f\u3055\u305d\u3046\uff0e\n\n"}