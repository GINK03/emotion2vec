{"context": " More than 1 year has passed since last update.\u3075\u3068\u601d\u3063\u305f\u306e\u3067\u8abf\u3079\u3066\u307f\u305f\n\u9069\u5f53\u306b\u3084\u3063\u3066\u3044\u308b\u3060\u3051\u306a\u306e\u3067\u771f\u306b\u53d7\u3051\u306a\u3044\u3067\u304f\u3060\u3055\u3044\ncatatsuy/linear_binary_compare\npackage main\n\nimport (\n    \"math/rand\"\n    \"testing\"\n    \"time\"\n)\n\nconst (\n    Size = 75\n)\n\nfunc BenchmarkLinearSearch(b *testing.B) {\n    b.StopTimer()\n\n    lists := make([]int, 0)\n    for i := 0; i < Size; i++ {\n        lists = append(lists, i)\n    }\n    rand.Seed(time.Now().UnixNano())\n\n    b.StartTimer()\n\n    for i := 0; i < b.N; i++ {\n        target := rand.Intn(len(lists))\n        for _, v := range lists {\n            if target == v {\n                break\n            }\n        }\n    }\n}\n\nfunc BenchmarkBinarySearch(b *testing.B) {\n    b.StopTimer()\n\n    lists := make([]int, 0)\n    for i := 0; i < Size; i++ {\n        lists = append(lists, i)\n    }\n    rand.Seed(time.Now().UnixNano())\n\n    b.StartTimer()\n\n    for i := 0; i < b.N; i++ {\n        start, end := 0, len(lists)-1\n        target := rand.Intn(len(lists))\n        for start <= end {\n            pivot := (start + end) / 2\n            if lists[pivot] < target {\n                start = pivot + 1\n            } else if lists[pivot] > target {\n                end = pivot - 1\n            } else {\n                break\n            }\n        }\n    }\n}\n\n\u624b\u5143\u306eMacBook Pro\u3067\u306f75\u304f\u3089\u3044\u3067\u524d\u5f8c\u3057\u59cb\u3081\u305f\u3002\u305d\u308c\u3088\u308a\u5c0f\u3055\u3044\u30b5\u30a4\u30ba\u3067\u306f\u7dda\u5f62\u63a2\u7d22\u306e\u65b9\u304c\u65e9\u3044\u3002\n\u3053\u3046\u3044\u3046\u3068\u304d\u306bGo\u3092\u4f7f\u3046\u306e\u3001\u30b5\u30af\u30c3\u3068\u304b\u3051\u308b\u3057\u6b63\u78ba\u306a\u30d9\u30f3\u30c1\u304c\u53d6\u308c\u305d\u3046\u306a\u6c17\u304c\u3059\u308b\u3002\n\u305d\u308c\u3068\u3053\u308c\u306f\u3042\u304f\u307e\u3067\u3082\u5e73\u5747\u3067\u3001\u6700\u60aa\u5b9f\u884c\u6642\u9593\u306f\u7dda\u5f62\u63a2\u7d22\u306e\u65b9\u304c\u9045\u3044\u306f\u305a\u306a\u306e\u3067\u5b9f\u969b\u306f\u3053\u308c\u3088\u308a\u3082\u5c0f\u3055\u3044\u30b5\u30a4\u30ba\u3067\u30822\u5206\u6728\u63a2\u7d22\u306e\u65b9\u304c\u826f\u3044\u306f\u305a\u3002\n\u3075\u3068\u601d\u3063\u305f\u306e\u3067\u8abf\u3079\u3066\u307f\u305f\n\n\u9069\u5f53\u306b\u3084\u3063\u3066\u3044\u308b\u3060\u3051\u306a\u306e\u3067\u771f\u306b\u53d7\u3051\u306a\u3044\u3067\u304f\u3060\u3055\u3044\n\n[catatsuy/linear_binary_compare](https://github.com/catatsuy/linear_binary_compare)\n\n```go\npackage main\n\nimport (\n\t\"math/rand\"\n\t\"testing\"\n\t\"time\"\n)\n\nconst (\n\tSize = 75\n)\n\nfunc BenchmarkLinearSearch(b *testing.B) {\n\tb.StopTimer()\n\n\tlists := make([]int, 0)\n\tfor i := 0; i < Size; i++ {\n\t\tlists = append(lists, i)\n\t}\n\trand.Seed(time.Now().UnixNano())\n\n\tb.StartTimer()\n\n\tfor i := 0; i < b.N; i++ {\n\t\ttarget := rand.Intn(len(lists))\n\t\tfor _, v := range lists {\n\t\t\tif target == v {\n\t\t\t\tbreak\n\t\t\t}\n\t\t}\n\t}\n}\n\nfunc BenchmarkBinarySearch(b *testing.B) {\n\tb.StopTimer()\n\n\tlists := make([]int, 0)\n\tfor i := 0; i < Size; i++ {\n\t\tlists = append(lists, i)\n\t}\n\trand.Seed(time.Now().UnixNano())\n\n\tb.StartTimer()\n\n\tfor i := 0; i < b.N; i++ {\n\t\tstart, end := 0, len(lists)-1\n\t\ttarget := rand.Intn(len(lists))\n\t\tfor start <= end {\n\t\t\tpivot := (start + end) / 2\n\t\t\tif lists[pivot] < target {\n\t\t\t\tstart = pivot + 1\n\t\t\t} else if lists[pivot] > target {\n\t\t\t\tend = pivot - 1\n\t\t\t} else {\n\t\t\t\tbreak\n\t\t\t}\n\t\t}\n\t}\n}\n```\n\n\u624b\u5143\u306eMacBook Pro\u3067\u306f75\u304f\u3089\u3044\u3067\u524d\u5f8c\u3057\u59cb\u3081\u305f\u3002\u305d\u308c\u3088\u308a\u5c0f\u3055\u3044\u30b5\u30a4\u30ba\u3067\u306f\u7dda\u5f62\u63a2\u7d22\u306e\u65b9\u304c\u65e9\u3044\u3002\n\n\u3053\u3046\u3044\u3046\u3068\u304d\u306bGo\u3092\u4f7f\u3046\u306e\u3001\u30b5\u30af\u30c3\u3068\u304b\u3051\u308b\u3057\u6b63\u78ba\u306a\u30d9\u30f3\u30c1\u304c\u53d6\u308c\u305d\u3046\u306a\u6c17\u304c\u3059\u308b\u3002\n\n\u305d\u308c\u3068\u3053\u308c\u306f\u3042\u304f\u307e\u3067\u3082\u5e73\u5747\u3067\u3001\u6700\u60aa\u5b9f\u884c\u6642\u9593\u306f\u7dda\u5f62\u63a2\u7d22\u306e\u65b9\u304c\u9045\u3044\u306f\u305a\u306a\u306e\u3067\u5b9f\u969b\u306f\u3053\u308c\u3088\u308a\u3082\u5c0f\u3055\u3044\u30b5\u30a4\u30ba\u3067\u30822\u5206\u6728\u63a2\u7d22\u306e\u65b9\u304c\u826f\u3044\u306f\u305a\u3002\n", "tags": ["golang", "algorithm", "Go"]}