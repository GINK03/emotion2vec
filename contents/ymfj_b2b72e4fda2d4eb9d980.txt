{"context": "\n\n\u306f\u3058\u3081\u306b\n\u8fd1\u5e74\uff0c\u6a5f\u68b0\u5b66\u7fd2\u306e\u5206\u91ce\u3067\u30c7\u30a3\u30fc\u30d7\u30e9\u30fc\u30cb\u30f3\u30b0(\u30c7\u30a3\u30fc\u30d7\u30cb\u30e5\u30fc\u30e9\u30eb\u30cd\u30c3\u30c8\u30ef\u30fc\u30af:DNN)\u306b\u6ce8\u76ee\u304c\u96c6\u307e\u3063\u3066\u3044\u307e\u3059\uff0e\u305d\u308c\u306b\u4f34\u3063\u3066\u69d8\u3005\u306aDNN\u30e9\u30a4\u30d6\u30e9\u30ea\u304c\u516c\u958b\u3055\u308c\u3066\u3044\u307e\u3059\u304c\uff0c\u305d\u308c\u305e\u308c\u3069\u3093\u306a\u9055\u3044\u304c\u3042\u308b\u306e\u3067\u3057\u3087\u3046\u304b\uff08\u3069\u308c\u3092\u4f7f\u3048\u3070\u826f\u3044\u306e\u3060\u308d\u3046\uff09\uff0e\u672c\u7a3f\u3067\u306fDNN\u306e\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u69cb\u9020\u3092\uff0c\u5404\u30e9\u30a4\u30d6\u30e9\u30ea\u3067\u3069\u306e\u3088\u3046\u306b\u8a18\u8ff0\u3059\u308b\u306e\u304b\u6bd4\u8f03\u3057\u3066\u307f\u305f\u3044\u3068\u601d\u3044\u307e\u3059\uff0e\n\u672c\u7a3f\u3067\u60f3\u5b9a\u3059\u308b\u306e\u306f\uff0cDNN\u306b\u3064\u3044\u3066\u306f\u3042\u308b\u7a0b\u5ea6\u77e5\u3063\u3066\u3044\u308b\u304c\uff0c\u30e9\u30a4\u30d6\u30e9\u30ea\u306b\u3064\u3044\u3066\u306f\u77e5\u3089\u306a\u3044\u3068\u3044\u3046\u65b9\u3078\u306e\u8aac\u660e\u3067\u3059\uff0e\u5404\u30e9\u30a4\u30d6\u30e9\u30ea\u306e\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb\u3092\u8aad\u3093\u3067\u5b9f\u969b\u306b\u30b3\u30fc\u30c9\u3092\u66f8\u3044\u305f\u3053\u3068\u304c\u3042\u308b\u5834\u5408\u306f\uff0c\u305d\u308c\u4ee5\u4e0a\u306e\u5185\u5bb9\u306f\u306a\u3044\u3067\u3059\uff0e\n\n\u30e9\u30a4\u30d6\u30e9\u30ea\n\u591a\u6570\u306e\u30e9\u30a4\u30d6\u30e9\u30ea\u304c\u516c\u958b\u3055\u308c\u3066\u3044\u307e\u3059\u304c\uff0c\u672c\u7a3f\u3067\u306fchainer\u3068TensorFlow\u306e2\u3064\u3092\u6271\u3044\u307e\u3059\uff0e\u5c06\u6765\u7684\u306b\u306f\u4ed6\u306e\u30e9\u30a4\u30d6\u30e9\u30ea\u306b\u3064\u3044\u3066\u3082\u8ffd\u52a0\u3067\u304d\u308c\u3070\u3068\u601d\u3063\u3066\u3044\u307e\u3059\u304c\uff0e\n\u4ee5\u4e0b\u3067\u306f\u307e\u305a\u5404\u30e9\u30a4\u30d6\u30e9\u30ea\u306e\u7c21\u5358\u306a\u57fa\u672c\u60c5\u5831\u3060\u3051\u307e\u3068\u3081\u3066\u307f\u307e\u3059\uff0e\u901f\u5ea6\u7b49\u306e\u6bd4\u8f03\u306f Python\u3067\u66f8\u3051\u308bDeepLearning\u306e\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u6bd4\u8f03\u3057\u3066\u307f\u305f \u304c\u5206\u304b\u308a\u3084\u3059\u304b\u3063\u305f\u3067\u3059\uff0c\u3042\u308a\u304c\u3068\u3046\u3054\u3056\u3044\u307e\u3059\uff0e\u3053\u306e\u30b5\u30a4\u30c8\u3067\u5341\u5206\u3058\u3083\u306d?\u3063\u3066\u6c17\u3082\u3057\u307e\u3059\u304c\uff0c\u672c\u7a3f\u3067\u306f\u5177\u4f53\u7684\u306b\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u3092\u4e26\u3079\u3066\u540c\u3058\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u69cb\u9020\u306e\u8a18\u8ff0\u3092\u6bd4\u8f03\u3057\u3066\u307f\u305f\u3044\u3068\u601d\u3044\u307e\u3059\uff0e\n\nTensorFlow\n\n\u958b\u767a\u5143: google\n\u516c\u5f0f\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb: https://www.tensorflow.org/versions/master/tutorials/index.html\n\ngithub\u30b9\u30bf\u30fc\u6570: 19830\n\ngoogle\u304c\u5185\u90e8\u3067\u5b9f\u969b\u306b\u4f7f\u3063\u3066\u3044\u308b\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u30aa\u30fc\u30d7\u30f3\u5316\u3057\u305f\u3082\u306e\u3067\u3059\uff0egoogle\u3063\u3066\u3060\u3051\u3067\u60f9\u304b\u308c\u307e\u3059\u306d(?\n\nchainer\n\n\u958b\u767a\u5143: Preferred Networks\uff08PFN\uff09\n\u516c\u5f0f\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb: http://docs.chainer.org/en/stable/tutorial/index.html\n\ngithub\u30b9\u30bf\u30fc\u6570: 1240\n\nPEN\u306f\u65e5\u672c\u306e\u30b9\u30bf\u30fc\u30c8\u30a2\u30c3\u30d7\u3067NTT\u304c\u51fa\u8cc7\u3057\u3066\u3044\u308b\u3088\u3046\u3067\u3059\uff0e\u65e5\u672c\u8a9e\u306e\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u306b\u671f\u5f85\u3067\u304d\u308b(?\n\n\u30e9\u30a4\u30d6\u30e9\u30ea\u306e\u6bd4\u8f03\n\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb\u3092\u53c2\u8003\u306b\u307e\u3068\u3081\u305f\u3060\u3051\u3067\u3059\u304c...\nDNN\u521d\u5fc3\u8005\u3067\u3059\u306e\u3067\u7528\u8a9e\u306b\u9593\u9055\u3044\u7b49\u3042\u308b\u304b\u3082\u3057\u308c\u307e\u305b\u3093\uff0e\n\n\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u69cb\u9020\u30fb\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\n\u672c\u7a3f\u3067\u306f3\u5c64MLP\u306e\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u69cb\u9020\u3092\u7528\u3044\u307e\u3059\uff0e\u672c\u5f53\u306fCNN\u3092\u3084\u308a\u305f\u304b\u3063\u305f\u306e\u3067\u3059\u304c\u305d\u308c\u306f\u6b21\u56de\u3068\u3044\u3046\u3053\u3068\u3067\uff0e\u96a0\u308c\u5c64\u306e\u30e6\u30cb\u30c3\u30c8\u6570\u306f100\u3068\u3057\u307e\u3059\uff0e\n\u5165\u529b\u5c64 - \u96a0\u308c\u5c64 - \u51fa\u529b\u5c64\n\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u3068\u3057\u3066\u306fMNIST\u306e\u624b\u66f8\u304d\u6570\u5b57\u3092\u7528\u3044\u307e\u3059\uff0e\u3059\u3067\u306bDNN\u306b\u3068\u3063\u3066\u306f\u7c21\u5358\u306a\u554f\u984c\u3068\u306a\u3063\u3066\u3044\u308b\u3088\u3046\u3067\u3059\u304c\uff0c\u4eca\u56de\u306f\u4e3b\u306b\u8a18\u8ff0\u65b9\u6cd5\u306e\u6bd4\u8f03\u304c\u3057\u305f\u3044\u306e\u3067\uff0e\u5165\u529b\u5c64\u306f784\u6b21\u5143(28 x 28)\uff0c\u51fa\u529b\u306f10\u6b21\u5143\u3068\u3057\u307e\u3059\uff0e\n\u30c7\u30fc\u30bf\u306e\u53d6\u5f97\u306b\u306fchainer\u306e\u30b5\u30f3\u30d7\u30eb\u3067\u4f7f\u7528\u3055\u308c\u3066\u3044\u308bdata.py\u3092\u4f7f\u7528\u3057\u307e\u3057\u305f\uff0eTensorFlow\u3067\u306finput_data.py\u3068\u3044\u3046\u30b5\u30f3\u30d7\u30eb\u304c\u3088\u304f\u4f7f\u308f\u308c\u3066\u3044\u307e\u3059\u304c\uff0c\u52c9\u5f37\u306e\u305f\u3081\u3068\u601d\u3044data.py\u304b\u3089\u8aad\u307f\u8fbc\u3093\u3060\u30c7\u30fc\u30bf\u3092\u4f7f\u3044\u307e\u3057\u305f\uff0e\n(data.py\u3067\u306f\u30e9\u30d9\u30eb\u3092\u6570\u5b57\u3067\u8868\u3057{1,4,9,2...}\u306e\u3088\u3046\u306a\u30d9\u30af\u30c8\u30eb\u3067\u8868\u73fe\u3057\u307e\u3059\uff0e\u4e00\u65b9\u306einput_data.py\u3067\u306f{0,0,...,1,0}\u3068\u3044\u3046\u3088\u3046\u306aOne-Hot\u30d9\u30af\u30c8\u30eb\u306e\u96c6\u5408\u3067\u8868\u73fe\u3057\u307e\u3059\uff0e\u306f\u3058\u3081\u3053\u306e\u9055\u3044\u306b\u6c17\u4ed8\u304b\u305a\u6b21\u5143\u304c\u304a\u304b\u3057\u3044\u3068\u3044\u3046\u30a8\u30e9\u30fc\u304c\u51fa\u307e\u3057\u305f\uff0e\u4ee5\u4e0b\u3067\u306fdense_to_one_hot(x)\u3068\u3044\u3046\u30e1\u30bd\u30c3\u30c9\u3067\u305d\u306e\u5909\u63db\u64cd\u4f5c\u3092\u8868\u3057\u307e\u3059\uff0e\n\ntrainingData\nimport data\nimport numpy as np\n\nmnist = data.load_mnist_data()\nx_all = mnist['data'].astype(np.float32) / 255\ny_all = mnist['target'].astype(np.int32)\n\n#only tensorFlow\ny_all = dense_to_one_hot(y_all)\n\nx_train, x_test = np.split(x_all, [60000])\ny_train, y_test = np.split(y_all, [60000])\n\n\n\nx_train.shape => (60000, 784)\ny_train.shape => (60000, 1) or (60000, 10)\n\u3068\u306a\u3063\u3066\u3044\u307e\u3059\uff0e\n\n\u74b0\u5883\u69cb\u7bc9\n\u4eca\u56de\u306fubuntu14.04(CPU-only)\u3092\u7528\u3044\u307e\u3057\u305f\uff0e\u305d\u306e\u305f\u3081\u4e21\u30e9\u30a4\u30d6\u30e9\u30ea\u5171\u306b pip \u3067\u7c21\u5358\u306b\u5c0e\u5165\u3067\u304d\u307e\u3057\u305f\uff0ewindows\u3067\u306f...\u4eca\u56de\u306f\u89e6\u308c\u307e\u305b\u3093\uff0e\n\n\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u306e\u8a18\u8ff0\n\nchainer\n\nchainer(classDefine)\nimport chainer\nimport chainer.functions as F\nimport chainer.links as L\n\nclass MLP(chainer.Chain):\n    def __init__(self):\n        super(MLP, self).__init__(\n                                  l1=L.Linear(784, 100),\n                                  l2=L.Linear(100, 100),\n                                  l3=L.Linear(100, 10),\n                                  )\n\n    def __call__(self, x):\n        h1 = F.relu(self.l1(x))\n        h2 = F.relu(self.l2(h1))\n        y = self.l3(h2)\n        return y\n\n\n\nclass Classifier(Chain):\n    def __init__(self, predictor):\n        super(Classifier, self).__init__(predictor=predictor)\n\n    def __call__(self, x, t):\n        y = self.predictor(x)\n        self.loss = F.softmax_cross_entropy(y, t)\n        self.accuracy = F.accuracy(y, t)\n        return self.loss\n\n\n\n\u307e\u305a\u30ec\u30a4\u30e4\u30fc\u306e\u69cb\u9020\u3092\u5b9a\u7fa9\u3059\u308b\u30af\u30e9\u30b9\u3068\u51fa\u529b\u306e\u8aa4\u5dee\u3092\u5b9a\u7fa9\u3059\u308b\u30af\u30e9\u30b9\u3092\u4f5c\u308a\u307e\u3059\uff0e\nMLP\u30af\u30e9\u30b9\u3067\u306f\u5404\u5c64\u306bLinear(\u91cd\u307f$W$\u3068\u30d0\u30a4\u30a2\u30b9$b$\u306b\u3088\u3063\u3066\u8868\u73fe\u3055\u308c\u308b\u5168\u7d50\u5408)\u3092\uff0c\u6d3b\u6027\u5316\u95a2\u6570\u3068\u3057\u3066ReLU(...)\u3092\u7528\u3044\u3066\u3044\u308b\u3053\u3068\u304c\u5206\u304b\u308a\u307e\u3059\uff0e\u3053\u306e\u90e8\u5206\u3092\u5909\u66f4\u3059\u308b\u3053\u3068\u3067dropout(...)\u3092\u8ffd\u52a0\u3057\u305f\u308a\uff0c\u7573\u307f\u8fbc\u307f\u5c64\u3092\u8ffd\u52a0\u3059\u308b\u3053\u3068\u304c\u51fa\u6765\u305d\u3046\u3067\u3059\uff0e\n\u307e\u305f\uff0c\u8aa4\u5dee\u306e\u7b97\u51fa\u306b\u306fsoftmax_cross_entropy(...)\uff0c\u3064\u307e\u308a\u30bd\u30d5\u30c8\u30de\u30c3\u30af\u30b9\u95a2\u6570\u306e\u51fa\u529b\u306b\u5bfe\u3057\u3066\u4ea4\u5dee\u30a8\u30f3\u30c8\u30ed\u30d4\u30fc\u3092\u8a08\u7b97\u3057\u305f\u3082\u306e\uff0c\u3092\u7528\u3044\u3066\u3044\u307e\u3059\uff0e\u3061\u306a\u307f\u306b\u5b9a\u7fa9\u3057\u305fClassifier\u30af\u30e9\u30b9\u306f\uff0c\u540c\u69d8\u306e\u30af\u30e9\u30b9\u304cchainer.links.Classifier\u3068\u3057\u3066\u5b9f\u88c5\u3055\u308c\u3066\u3044\u307e\u3059\uff0e\u305d\u306e\u307e\u307e\u306e\u5b9f\u88c5\u3067\u3088\u3051\u308c\u3070\u305d\u3061\u3089\u3092\u4f7f\u3048\u307e\u3059\uff0e\n\nchainer(model)\n        model = Classifier(MLP()) # same as ``L.Classifier(MLP())``\n        optimizer = optimizers.SGD()\n        optimizer.setup(model)\n\n\n\u6b21\u306b\u5b9a\u7fa9\u3057\u305f\u30af\u30e9\u30b9\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u751f\u6210\u3057\u307e\u3059\uff0e\u3053\u3053\u3067\u6700\u9069\u5316\u306e\u624b\u6cd5\u3092\u6307\u5b9a\u3057\u3066\u304a\u308a\uff0cSGD()(\u78ba\u7387\u7684\u6700\u6025\u964d\u4e0b\u6cd5)\u3092\u6307\u5b9a\u3057\u3066\u3044\u307e\u3059\uff0e\n\ntensorFlow\n\ntensorFlow\nimport tensorFlow as tf\n\n        # input\n            x = tf.placeholder(tf.float32, [None, 784])\n        # label\n            y_ = tf.placeholder(tf.float32, [None, 10])\n\n\n        # FC1\n            W1 = tf.Variable(tf.random_normal([784, 100], mean=0.0, stddev=0.05))\n            b1 = tf.Variable(tf.zeros([100]))\n            # layer output\n            h1 = tf.nn.relu(tf.matmul(x, W1) + b1)\n\n        # FC2\n            W2 = tf.Variable(tf.random_normal([100, 100], mean=0.0, stddev=0.05))\n            b2 = tf.Variable(tf.zeros([100]))\n            # layer output\n            h2 = tf.nn.relu(tf.matmul(h1, W2) + b2)\n\n        # FC3\n            W3 = tf.Variable(tf.random_normal([100, 10], mean=0.0, stddev=0.05))\n            b3 = tf.Variable(tf.zeros([10]))\n            # output\n            y = tf.nn.softmax(tf.matmul(h2, W3) + b3)\n\n        # training\n            cross_entropy = -tf.reduce_sum(y_ * tf.log(y))\n            train_step = tf.train.GradientDescentOptimizer(0.01).minimize(cross_entropy)\n\n\ntensorFlow\u3067\u306f\u5404\u5c64\u3092\u91cd\u307f$W$\u3068\u30d0\u30a4\u30a2\u30b9$b$\u3092\u7528\u3044\u305f\u884c\u5217\u306e\u8a08\u7b97\u5f0f$y = Wx + b$\u3067\u8868\u3057\u307e\u3059($x$:\u5165\u529b\uff0c$y$:\u51fa\u529b)\uff0e\n\u5165\u529b$x$\u306f\u4eca\u56de(\u30c7\u30fc\u30bf\u6570,784)\u3068\u3044\u3046\u884c\u5217\u306b\u306a\u308a\u307e\u3059\uff0e\u30c7\u30fc\u30bf\u6570\u3092\u30b3\u30fc\u30c9\u3067\u306fNone\u3068\u6307\u5b9a\u3059\u308b\u3053\u3068\u3067\u53ef\u5909\u3068\u3057\u3066\u3044\u307e\u3059\uff0e\n1\u5c64\u76ee\u306e\u91cd\u307fW1\u306f(784,100)\uff0c\u30d0\u30a4\u30a2\u30b9b1\u306f(100,)\u3068\u5b9a\u7fa9\u3057\u3066\u304a\u308a\uff0c1\u5c64\u76ee\u306e\u51fa\u529b\u3068\u3057\u3066h1\u306e\u8a08\u7b97\u5f0f\u3092\u5b9a\u7fa9\u3057\u307e\u3059\uff0e\u3053\u3053\u3067\u6d3b\u6027\u5316\u95a2\u6570\u3068\u3057\u3066relu(...)\u3092\u7528\u3044\u3066\u3044\u307e\u3059\uff0e\u307e\u305f\uff0c\u51fa\u529b\u5c64\u3067\u306fsoftmax(...)\u3092\u8a08\u7b97\u3057\u3066\u3044\u308b\u3053\u3068\u304c\u308f\u304b\u308a\u307e\u3059\uff0e\ny_\u306f\u6b63\u89e3\u30e9\u30d9\u30eb\u3092\u683c\u7d0d\u3059\u308b\u5909\u6570\u3067\u3042\u308a\uff0c\u8aa4\u5deecross_entropy\u306e\u5b9a\u7fa9\u306b\u4f7f\u7528\u3057\u307e\u3059\uff0e\u8aa4\u5dee\u3068\u3057\u3066\u4ea4\u5dee\u30a8\u30f3\u30c8\u30ed\u30d4\u30fc\u3092\u7528\u3044\u3066\u304a\u308a\uff0cGradientDescentOptimizer\u3092\u7528\u3044\u3066minimize\u3059\u308b\u3088\u3046\u306b\u6307\u5b9a\u3057\u3066\u3044\u307e\u3059\uff0e\nchainer\u306b\u6bd4\u3079\u308b\u3068\u5404\u5c64\u306e\u8a18\u8ff0\u304c\u9762\u5012\u306a\u6c17\u304c\u3057\u307e\u3059\u304c\uff0c\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u69cb\u9020\u306b\u624b\u3092\u52a0\u3048\u3088\u3046\u3068\u601d\u3063\u305f\u6642\u306b\u8a18\u8ff0\u304c\u5f0f\u305d\u306e\u307e\u307e\u306a\u306e\u3067\u3084\u308a\u3084\u3059\u3044?\u3068\u601d\u3044\u307e\u3057\u305f\uff0e(\u30b3\u30fc\u30c9\u304c\u7169\u96d1\u306a\u306e\u306f\u3061\u3083\u3093\u3068\u30af\u30e9\u30b9\u3092\u5b9a\u7fa9\u3057\u3066\u3084\u3089\u306a\u3044\u304b\u3089\u304b\n\n\u5b66\u7fd2\nbatch_x, batch_y\u3092\u305d\u308c\u305e\u308cx_train, y_train\u306e\u30df\u30cb\u30d0\u30c3\u30c1\u3068\u3057\u307e\u3059\uff0e\u4ee5\u4e0b\u306f\u3072\u3068\u3064\u306e\u30df\u30cb\u30d0\u30c3\u30c1\u306b\u5bfe\u3059\u308b\u51e6\u7406\u3067\u3059\uff0e\n\nchainer\n\nchainerTraining\noptimizer.update(model, batch_x, batch_y)\n\n\noptimizer.update\u306e\u5f15\u6570\u306b\u6e21\u3057\u3066\u3084\u308a\u307e\u3059\uff0e\n\ntensorFlow\n\ntensorFlowTraining\n#sess = tf.Session()\nsess.run(train_step, feed_dict={x:batch_x, y_:batch_y})\n\n\ntensorFlow\u3067\u306f\u30c7\u30fc\u30bf\u3092Dictionary\u306e\u5f62\u3067\uff0c\u4e0a\u3067\u5b9a\u7fa9\u3057\u305fplaceholder\u3068\u30bb\u30c3\u30c8\u306b\u3057\u3066\u30c7\u30fc\u30bf\u3092\u6e21\u3057\u3066\u3084\u308a\u307e\u3059\uff0e\n\n\u901f\u5ea6\u30fb\u7cbe\u5ea6\u306e\u6bd4\u8f03\n\u4eca\u56de\u306fCPU\u306e\u307f\u306e\u3072\u5f31\u306a\u30c7\u30b9\u30af\u30c8\u30c3\u30d7PC\u3067\u52d5\u304b\u3057\u307e\u3059\u306e\u3067\uff0cepoch\u3082\u6570\u5341\u56de\u7a0b\u5ea6\u3067\u30b3\u30fc\u30c9\u304c\u52d5\u304f\u3053\u3068\u3092\u78ba\u8a8d\u3057\u3066\u3044\u307e\u3059\uff0e\u5e83\u304f\u4f7f\u308f\u308c\u3066\u308b\u30e9\u30a4\u30d6\u30e9\u30ea\u306a\u306e\u3067\u7cbe\u5ea6\u3084\u901f\u5ea6\u3068\u3044\u3063\u305f\u9762\u3067\u306f\u4e92\u89d2\u306a\u306e\u3067\u306f\uff0c\u3068\u601d\u3063\u3066\u3044\u307e\u3059\uff0e\u4eca\u5f8c\u6a5f\u4f1a\u304c\u3042\u308c\u3070\u691c\u8a3c\u3057\u3066\u307f\u307e\u3059\uff0e\n\n\u304a\u308f\u308a\u306b\n\u4eca\u5f8c\u306e\u8ab2\u984c\u3068\u3057\u3066\u306f\u4ee5\u4e0b\u306b\u53d6\u308a\u7d44\u3093\u3067\u307f\u305f\u3044\u3068\u601d\u3044\u307e\u3059\uff0e\n\nCNN\u3084RNN\u306a\u3069\u306e\u8907\u96d1\u306a\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u69cb\u9020\nGPU\n\u5b66\u7fd2\u6e08\u30e2\u30c7\u30eb\u306e\u914d\u5e03\u72b6\u6cc1\n\n\u4e0a2\u3064\u8fba\u308a\u3067\u30e9\u30a4\u30d6\u30e9\u30ea\u306e\u9055\u3044\u304c\u51fa\u3066\u304d\u305d\u3046\u3067\u3059\uff0e\u8907\u6570GPU\u3078\u306e\u5bfe\u5fdc\u306a\u3069\u8a66\u3057\u3066\u307f\u305f\u3044(\u305d\u306e\u305f\u3081\u306e\u30de\u30b7\u30f3\u304c...\n\u307e\u305f\uff0ccaffe\u306a\u3069\u306f\u5b66\u7fd2\u6e08\u30e2\u30c7\u30eb\u3092\u7528\u3044\u3066\u5206\u985e\u3092\u3059\u308b\u3060\u3051\u306e\u76ee\u7684\u3067\u4f7f\u7528\u3059\u308b\u3053\u3068\u3082\u591a\u3044(\u591a\u304f\u306f\u306a\u3044?)\u6c17\u304c\u3057\u307e\u3059\u304c\uff0c\u305d\u3046\u3057\u305f\u76ee\u7684\u306b\u4f7f\u3048\u308b\u304b\u3069\u3046\u304b\u3082\u6c17\u306b\u306a\u308a\u307e\u3059\uff0e\n\n\u53c2\u8003\n\n\u306e\u3093\u3073\u308a\u3057\u3066\u3044\u308b\u30a8\u30f3\u30b8\u30cb\u30a2\u306e\u65e5\u8a18 - \u300ePython\u3067\u66f8\u3051\u308bDeepLearning\u306e\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u6bd4\u8f03\u3057\u3066\u307f\u305f\u300f \n\n#\u306f\u3058\u3081\u306b\n\u8fd1\u5e74\uff0c\u6a5f\u68b0\u5b66\u7fd2\u306e\u5206\u91ce\u3067\u30c7\u30a3\u30fc\u30d7\u30e9\u30fc\u30cb\u30f3\u30b0(\u30c7\u30a3\u30fc\u30d7\u30cb\u30e5\u30fc\u30e9\u30eb\u30cd\u30c3\u30c8\u30ef\u30fc\u30af:DNN)\u306b\u6ce8\u76ee\u304c\u96c6\u307e\u3063\u3066\u3044\u307e\u3059\uff0e\u305d\u308c\u306b\u4f34\u3063\u3066\u69d8\u3005\u306aDNN\u30e9\u30a4\u30d6\u30e9\u30ea\u304c\u516c\u958b\u3055\u308c\u3066\u3044\u307e\u3059\u304c\uff0c\u305d\u308c\u305e\u308c\u3069\u3093\u306a\u9055\u3044\u304c\u3042\u308b\u306e\u3067\u3057\u3087\u3046\u304b\uff08\u3069\u308c\u3092\u4f7f\u3048\u3070\u826f\u3044\u306e\u3060\u308d\u3046\uff09\uff0e\u672c\u7a3f\u3067\u306fDNN\u306e\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u69cb\u9020\u3092\uff0c\u5404\u30e9\u30a4\u30d6\u30e9\u30ea\u3067\u3069\u306e\u3088\u3046\u306b\u8a18\u8ff0\u3059\u308b\u306e\u304b\u6bd4\u8f03\u3057\u3066\u307f\u305f\u3044\u3068\u601d\u3044\u307e\u3059\uff0e\n\u672c\u7a3f\u3067\u60f3\u5b9a\u3059\u308b\u306e\u306f\uff0cDNN\u306b\u3064\u3044\u3066\u306f\u3042\u308b\u7a0b\u5ea6\u77e5\u3063\u3066\u3044\u308b\u304c\uff0c\u30e9\u30a4\u30d6\u30e9\u30ea\u306b\u3064\u3044\u3066\u306f\u77e5\u3089\u306a\u3044\u3068\u3044\u3046\u65b9\u3078\u306e\u8aac\u660e\u3067\u3059\uff0e\u5404\u30e9\u30a4\u30d6\u30e9\u30ea\u306e\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb\u3092\u8aad\u3093\u3067\u5b9f\u969b\u306b\u30b3\u30fc\u30c9\u3092\u66f8\u3044\u305f\u3053\u3068\u304c\u3042\u308b\u5834\u5408\u306f\uff0c\u305d\u308c\u4ee5\u4e0a\u306e\u5185\u5bb9\u306f\u306a\u3044\u3067\u3059\uff0e\n\n#\u30e9\u30a4\u30d6\u30e9\u30ea\n\u591a\u6570\u306e\u30e9\u30a4\u30d6\u30e9\u30ea\u304c\u516c\u958b\u3055\u308c\u3066\u3044\u307e\u3059\u304c\uff0c\u672c\u7a3f\u3067\u306fchainer\u3068TensorFlow\u306e2\u3064\u3092\u6271\u3044\u307e\u3059\uff0e\u5c06\u6765\u7684\u306b\u306f\u4ed6\u306e\u30e9\u30a4\u30d6\u30e9\u30ea\u306b\u3064\u3044\u3066\u3082\u8ffd\u52a0\u3067\u304d\u308c\u3070\u3068\u601d\u3063\u3066\u3044\u307e\u3059\u304c\uff0e\n\u4ee5\u4e0b\u3067\u306f\u307e\u305a\u5404\u30e9\u30a4\u30d6\u30e9\u30ea\u306e\u7c21\u5358\u306a\u57fa\u672c\u60c5\u5831\u3060\u3051\u307e\u3068\u3081\u3066\u307f\u307e\u3059\uff0e\u901f\u5ea6\u7b49\u306e\u6bd4\u8f03\u306f [Python\u3067\u66f8\u3051\u308bDeepLearning\u306e\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u6bd4\u8f03\u3057\u3066\u307f\u305f][] \u304c\u5206\u304b\u308a\u3084\u3059\u304b\u3063\u305f\u3067\u3059\uff0c\u3042\u308a\u304c\u3068\u3046\u3054\u3056\u3044\u307e\u3059\uff0e\u3053\u306e\u30b5\u30a4\u30c8\u3067\u5341\u5206\u3058\u3083\u306d?\u3063\u3066\u6c17\u3082\u3057\u307e\u3059\u304c\uff0c\u672c\u7a3f\u3067\u306f\u5177\u4f53\u7684\u306b\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u3092\u4e26\u3079\u3066\u540c\u3058\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u69cb\u9020\u306e\u8a18\u8ff0\u3092\u6bd4\u8f03\u3057\u3066\u307f\u305f\u3044\u3068\u601d\u3044\u307e\u3059\uff0e\n\nTensorFlow\n------------------------------\n* \u958b\u767a\u5143: google\n* \u516c\u5f0f\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb: https://www.tensorflow.org/versions/master/tutorials/index.html\n* github\u30b9\u30bf\u30fc\u6570: 19830\n\ngoogle\u304c\u5185\u90e8\u3067\u5b9f\u969b\u306b\u4f7f\u3063\u3066\u3044\u308b\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u30aa\u30fc\u30d7\u30f3\u5316\u3057\u305f\u3082\u306e\u3067\u3059\uff0egoogle\u3063\u3066\u3060\u3051\u3067\u60f9\u304b\u308c\u307e\u3059\u306d(?\n\nchainer\n------------------------------\n* \u958b\u767a\u5143: Preferred Networks\uff08PFN\uff09\n* \u516c\u5f0f\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb: http://docs.chainer.org/en/stable/tutorial/index.html\n* github\u30b9\u30bf\u30fc\u6570: 1240\n\nPEN\u306f\u65e5\u672c\u306e\u30b9\u30bf\u30fc\u30c8\u30a2\u30c3\u30d7\u3067NTT\u304c\u51fa\u8cc7\u3057\u3066\u3044\u308b\u3088\u3046\u3067\u3059\uff0e\u65e5\u672c\u8a9e\u306e\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u306b\u671f\u5f85\u3067\u304d\u308b(?\n\n\n#\u30e9\u30a4\u30d6\u30e9\u30ea\u306e\u6bd4\u8f03\n\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb\u3092\u53c2\u8003\u306b\u307e\u3068\u3081\u305f\u3060\u3051\u3067\u3059\u304c...\nDNN\u521d\u5fc3\u8005\u3067\u3059\u306e\u3067\u7528\u8a9e\u306b\u9593\u9055\u3044\u7b49\u3042\u308b\u304b\u3082\u3057\u308c\u307e\u305b\u3093\uff0e\n\n\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u69cb\u9020\u30fb\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\n------------------------------\n\u672c\u7a3f\u3067\u306f3\u5c64MLP\u306e\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u69cb\u9020\u3092\u7528\u3044\u307e\u3059\uff0e\u672c\u5f53\u306fCNN\u3092\u3084\u308a\u305f\u304b\u3063\u305f\u306e\u3067\u3059\u304c\u305d\u308c\u306f\u6b21\u56de\u3068\u3044\u3046\u3053\u3068\u3067\uff0e\u96a0\u308c\u5c64\u306e\u30e6\u30cb\u30c3\u30c8\u6570\u306f100\u3068\u3057\u307e\u3059\uff0e\n``\u5165\u529b\u5c64 - \u96a0\u308c\u5c64 - \u51fa\u529b\u5c64``\n\n\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u3068\u3057\u3066\u306fMNIST\u306e\u624b\u66f8\u304d\u6570\u5b57\u3092\u7528\u3044\u307e\u3059\uff0e\u3059\u3067\u306bDNN\u306b\u3068\u3063\u3066\u306f\u7c21\u5358\u306a\u554f\u984c\u3068\u306a\u3063\u3066\u3044\u308b\u3088\u3046\u3067\u3059\u304c\uff0c\u4eca\u56de\u306f\u4e3b\u306b\u8a18\u8ff0\u65b9\u6cd5\u306e\u6bd4\u8f03\u304c\u3057\u305f\u3044\u306e\u3067\uff0e\u5165\u529b\u5c64\u306f784\u6b21\u5143(28 x 28)\uff0c\u51fa\u529b\u306f10\u6b21\u5143\u3068\u3057\u307e\u3059\uff0e\n\n\u30c7\u30fc\u30bf\u306e\u53d6\u5f97\u306b\u306fchainer\u306e\u30b5\u30f3\u30d7\u30eb\u3067\u4f7f\u7528\u3055\u308c\u3066\u3044\u308b``data.py``\u3092\u4f7f\u7528\u3057\u307e\u3057\u305f\uff0eTensorFlow\u3067\u306f``input_data.py``\u3068\u3044\u3046\u30b5\u30f3\u30d7\u30eb\u304c\u3088\u304f\u4f7f\u308f\u308c\u3066\u3044\u307e\u3059\u304c\uff0c\u52c9\u5f37\u306e\u305f\u3081\u3068\u601d\u3044``data.py``\u304b\u3089\u8aad\u307f\u8fbc\u3093\u3060\u30c7\u30fc\u30bf\u3092\u4f7f\u3044\u307e\u3057\u305f\uff0e\n(``data.py``\u3067\u306f\u30e9\u30d9\u30eb\u3092\u6570\u5b57\u3067\u8868\u3057``{1,4,9,2...}``\u306e\u3088\u3046\u306a\u30d9\u30af\u30c8\u30eb\u3067\u8868\u73fe\u3057\u307e\u3059\uff0e\u4e00\u65b9\u306e``input_data.py``\u3067\u306f``{0,0,...,1,0}``\u3068\u3044\u3046\u3088\u3046\u306aOne-Hot\u30d9\u30af\u30c8\u30eb\u306e\u96c6\u5408\u3067\u8868\u73fe\u3057\u307e\u3059\uff0e\u306f\u3058\u3081\u3053\u306e\u9055\u3044\u306b\u6c17\u4ed8\u304b\u305a\u6b21\u5143\u304c\u304a\u304b\u3057\u3044\u3068\u3044\u3046\u30a8\u30e9\u30fc\u304c\u51fa\u307e\u3057\u305f\uff0e\u4ee5\u4e0b\u3067\u306fdense_to_one_hot(x)\u3068\u3044\u3046\u30e1\u30bd\u30c3\u30c9\u3067\u305d\u306e\u5909\u63db\u64cd\u4f5c\u3092\u8868\u3057\u307e\u3059\uff0e\n\n```py:trainingData\nimport data\nimport numpy as np\n\nmnist = data.load_mnist_data()\nx_all = mnist['data'].astype(np.float32) / 255\ny_all = mnist['target'].astype(np.int32)\n\n#only tensorFlow\ny_all = dense_to_one_hot(y_all)\n\nx_train, x_test = np.split(x_all, [60000])\ny_train, y_test = np.split(y_all, [60000])\n\n```\n``x_train.shape => (60000, 784)``\n``y_train.shape => (60000, 1) or (60000, 10) ``\n\n\u3068\u306a\u3063\u3066\u3044\u307e\u3059\uff0e\n\n\n\u74b0\u5883\u69cb\u7bc9\n------------------------------\n\u4eca\u56de\u306fubuntu14.04(CPU-only)\u3092\u7528\u3044\u307e\u3057\u305f\uff0e\u305d\u306e\u305f\u3081\u4e21\u30e9\u30a4\u30d6\u30e9\u30ea\u5171\u306b ``pip`` \u3067\u7c21\u5358\u306b\u5c0e\u5165\u3067\u304d\u307e\u3057\u305f\uff0ewindows\u3067\u306f...\u4eca\u56de\u306f\u89e6\u308c\u307e\u305b\u3093\uff0e\n\n\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u306e\u8a18\u8ff0\n------------------------------\n### chainer\n\n```py:chainer(classDefine)\nimport chainer\nimport chainer.functions as F\nimport chainer.links as L\n\nclass MLP(chainer.Chain):\n    def __init__(self):\n        super(MLP, self).__init__(\n                                  l1=L.Linear(784, 100),\n                                  l2=L.Linear(100, 100),\n                                  l3=L.Linear(100, 10),\n                                  )\n\n    def __call__(self, x):\n        h1 = F.relu(self.l1(x))\n        h2 = F.relu(self.l2(h1))\n        y = self.l3(h2)\n        return y\n\n\n\nclass Classifier(Chain):\n    def __init__(self, predictor):\n        super(Classifier, self).__init__(predictor=predictor)\n\n    def __call__(self, x, t):\n        y = self.predictor(x)\n        self.loss = F.softmax_cross_entropy(y, t)\n        self.accuracy = F.accuracy(y, t)\n        return self.loss\n\n```\n\u307e\u305a\u30ec\u30a4\u30e4\u30fc\u306e\u69cb\u9020\u3092\u5b9a\u7fa9\u3059\u308b\u30af\u30e9\u30b9\u3068\u51fa\u529b\u306e\u8aa4\u5dee\u3092\u5b9a\u7fa9\u3059\u308b\u30af\u30e9\u30b9\u3092\u4f5c\u308a\u307e\u3059\uff0e\n``MLP``\u30af\u30e9\u30b9\u3067\u306f\u5404\u5c64\u306b``Linear``(\u91cd\u307f$W$\u3068\u30d0\u30a4\u30a2\u30b9$b$\u306b\u3088\u3063\u3066\u8868\u73fe\u3055\u308c\u308b\u5168\u7d50\u5408)\u3092\uff0c\u6d3b\u6027\u5316\u95a2\u6570\u3068\u3057\u3066``ReLU(...)``\u3092\u7528\u3044\u3066\u3044\u308b\u3053\u3068\u304c\u5206\u304b\u308a\u307e\u3059\uff0e\u3053\u306e\u90e8\u5206\u3092\u5909\u66f4\u3059\u308b\u3053\u3068\u3067``dropout(...)``\u3092\u8ffd\u52a0\u3057\u305f\u308a\uff0c\u7573\u307f\u8fbc\u307f\u5c64\u3092\u8ffd\u52a0\u3059\u308b\u3053\u3068\u304c\u51fa\u6765\u305d\u3046\u3067\u3059\uff0e\n\n\u307e\u305f\uff0c\u8aa4\u5dee\u306e\u7b97\u51fa\u306b\u306f``softmax_cross_entropy(...)``\uff0c\u3064\u307e\u308a\u30bd\u30d5\u30c8\u30de\u30c3\u30af\u30b9\u95a2\u6570\u306e\u51fa\u529b\u306b\u5bfe\u3057\u3066\u4ea4\u5dee\u30a8\u30f3\u30c8\u30ed\u30d4\u30fc\u3092\u8a08\u7b97\u3057\u305f\u3082\u306e\uff0c\u3092\u7528\u3044\u3066\u3044\u307e\u3059\uff0e\u3061\u306a\u307f\u306b\u5b9a\u7fa9\u3057\u305fClassifier\u30af\u30e9\u30b9\u306f\uff0c\u540c\u69d8\u306e\u30af\u30e9\u30b9\u304cchainer.links.Classifier\u3068\u3057\u3066\u5b9f\u88c5\u3055\u308c\u3066\u3044\u307e\u3059\uff0e\u305d\u306e\u307e\u307e\u306e\u5b9f\u88c5\u3067\u3088\u3051\u308c\u3070\u305d\u3061\u3089\u3092\u4f7f\u3048\u307e\u3059\uff0e\n\n```py:chainer(model)\n        model = Classifier(MLP()) # same as ``L.Classifier(MLP())``\n        optimizer = optimizers.SGD()\n        optimizer.setup(model)\n```\n\n\u6b21\u306b\u5b9a\u7fa9\u3057\u305f\u30af\u30e9\u30b9\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u751f\u6210\u3057\u307e\u3059\uff0e\u3053\u3053\u3067\u6700\u9069\u5316\u306e\u624b\u6cd5\u3092\u6307\u5b9a\u3057\u3066\u304a\u308a\uff0c``SGD()``(\u78ba\u7387\u7684\u6700\u6025\u964d\u4e0b\u6cd5)\u3092\u6307\u5b9a\u3057\u3066\u3044\u307e\u3059\uff0e\n\n### tensorFlow\n\n```py:tensorFlow\nimport tensorFlow as tf\n\n        # input\n            x = tf.placeholder(tf.float32, [None, 784])\n        # label\n            y_ = tf.placeholder(tf.float32, [None, 10])\n\n\n        # FC1\n            W1 = tf.Variable(tf.random_normal([784, 100], mean=0.0, stddev=0.05))\n            b1 = tf.Variable(tf.zeros([100]))\n            # layer output\n            h1 = tf.nn.relu(tf.matmul(x, W1) + b1)\n\n        # FC2\n            W2 = tf.Variable(tf.random_normal([100, 100], mean=0.0, stddev=0.05))\n            b2 = tf.Variable(tf.zeros([100]))\n            # layer output\n            h2 = tf.nn.relu(tf.matmul(h1, W2) + b2)\n\n        # FC3\n            W3 = tf.Variable(tf.random_normal([100, 10], mean=0.0, stddev=0.05))\n            b3 = tf.Variable(tf.zeros([10]))\n            # output\n            y = tf.nn.softmax(tf.matmul(h2, W3) + b3)\n\n        # training\n            cross_entropy = -tf.reduce_sum(y_ * tf.log(y))\n            train_step = tf.train.GradientDescentOptimizer(0.01).minimize(cross_entropy)\n```\ntensorFlow\u3067\u306f\u5404\u5c64\u3092\u91cd\u307f$W$\u3068\u30d0\u30a4\u30a2\u30b9$b$\u3092\u7528\u3044\u305f\u884c\u5217\u306e\u8a08\u7b97\u5f0f$y = Wx + b$\u3067\u8868\u3057\u307e\u3059($x$:\u5165\u529b\uff0c$y$:\u51fa\u529b)\uff0e\n\u5165\u529b$x$\u306f\u4eca\u56de``(\u30c7\u30fc\u30bf\u6570,784)``\u3068\u3044\u3046\u884c\u5217\u306b\u306a\u308a\u307e\u3059\uff0e\u30c7\u30fc\u30bf\u6570\u3092\u30b3\u30fc\u30c9\u3067\u306f``None``\u3068\u6307\u5b9a\u3059\u308b\u3053\u3068\u3067\u53ef\u5909\u3068\u3057\u3066\u3044\u307e\u3059\uff0e\n1\u5c64\u76ee\u306e\u91cd\u307f``W1``\u306f``(784,100)``\uff0c\u30d0\u30a4\u30a2\u30b9``b1``\u306f``(100,)``\u3068\u5b9a\u7fa9\u3057\u3066\u304a\u308a\uff0c1\u5c64\u76ee\u306e\u51fa\u529b\u3068\u3057\u3066``h1``\u306e\u8a08\u7b97\u5f0f\u3092\u5b9a\u7fa9\u3057\u307e\u3059\uff0e\u3053\u3053\u3067\u6d3b\u6027\u5316\u95a2\u6570\u3068\u3057\u3066``relu(...)``\u3092\u7528\u3044\u3066\u3044\u307e\u3059\uff0e\u307e\u305f\uff0c\u51fa\u529b\u5c64\u3067\u306f``softmax(...)``\u3092\u8a08\u7b97\u3057\u3066\u3044\u308b\u3053\u3068\u304c\u308f\u304b\u308a\u307e\u3059\uff0e\n``y_``\u306f\u6b63\u89e3\u30e9\u30d9\u30eb\u3092\u683c\u7d0d\u3059\u308b\u5909\u6570\u3067\u3042\u308a\uff0c\u8aa4\u5dee``cross_entropy``\u306e\u5b9a\u7fa9\u306b\u4f7f\u7528\u3057\u307e\u3059\uff0e\u8aa4\u5dee\u3068\u3057\u3066\u4ea4\u5dee\u30a8\u30f3\u30c8\u30ed\u30d4\u30fc\u3092\u7528\u3044\u3066\u304a\u308a\uff0c``GradientDescentOptimizer``\u3092\u7528\u3044\u3066``minimize``\u3059\u308b\u3088\u3046\u306b\u6307\u5b9a\u3057\u3066\u3044\u307e\u3059\uff0e\n\nchainer\u306b\u6bd4\u3079\u308b\u3068\u5404\u5c64\u306e\u8a18\u8ff0\u304c\u9762\u5012\u306a\u6c17\u304c\u3057\u307e\u3059\u304c\uff0c\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u69cb\u9020\u306b\u624b\u3092\u52a0\u3048\u3088\u3046\u3068\u601d\u3063\u305f\u6642\u306b\u8a18\u8ff0\u304c\u5f0f\u305d\u306e\u307e\u307e\u306a\u306e\u3067\u3084\u308a\u3084\u3059\u3044?\u3068\u601d\u3044\u307e\u3057\u305f\uff0e(\u30b3\u30fc\u30c9\u304c\u7169\u96d1\u306a\u306e\u306f\u3061\u3083\u3093\u3068\u30af\u30e9\u30b9\u3092\u5b9a\u7fa9\u3057\u3066\u3084\u3089\u306a\u3044\u304b\u3089\u304b\n\n\n\n\u5b66\u7fd2\n------------------------------\n``batch_x, batch_y``\u3092\u305d\u308c\u305e\u308c``x_train, y_train``\u306e\u30df\u30cb\u30d0\u30c3\u30c1\u3068\u3057\u307e\u3059\uff0e\u4ee5\u4e0b\u306f\u3072\u3068\u3064\u306e\u30df\u30cb\u30d0\u30c3\u30c1\u306b\u5bfe\u3059\u308b\u51e6\u7406\u3067\u3059\uff0e\n\n### chainer\n```py:chainerTraining\noptimizer.update(model, batch_x, batch_y)\n```\noptimizer.update\u306e\u5f15\u6570\u306b\u6e21\u3057\u3066\u3084\u308a\u307e\u3059\uff0e\n\n\n### tensorFlow\n```py:tensorFlowTraining\n#sess = tf.Session()\nsess.run(train_step, feed_dict={x:batch_x, y_:batch_y})\n```\ntensorFlow\u3067\u306f\u30c7\u30fc\u30bf\u3092Dictionary\u306e\u5f62\u3067\uff0c\u4e0a\u3067\u5b9a\u7fa9\u3057\u305f``placeholder``\u3068\u30bb\u30c3\u30c8\u306b\u3057\u3066\u30c7\u30fc\u30bf\u3092\u6e21\u3057\u3066\u3084\u308a\u307e\u3059\uff0e\n\n\n\u901f\u5ea6\u30fb\u7cbe\u5ea6\u306e\u6bd4\u8f03\n------------------------------\n\u4eca\u56de\u306fCPU\u306e\u307f\u306e\u3072\u5f31\u306a\u30c7\u30b9\u30af\u30c8\u30c3\u30d7PC\u3067\u52d5\u304b\u3057\u307e\u3059\u306e\u3067\uff0cepoch\u3082\u6570\u5341\u56de\u7a0b\u5ea6\u3067\u30b3\u30fc\u30c9\u304c\u52d5\u304f\u3053\u3068\u3092\u78ba\u8a8d\u3057\u3066\u3044\u307e\u3059\uff0e\u5e83\u304f\u4f7f\u308f\u308c\u3066\u308b\u30e9\u30a4\u30d6\u30e9\u30ea\u306a\u306e\u3067\u7cbe\u5ea6\u3084\u901f\u5ea6\u3068\u3044\u3063\u305f\u9762\u3067\u306f\u4e92\u89d2\u306a\u306e\u3067\u306f\uff0c\u3068\u601d\u3063\u3066\u3044\u307e\u3059\uff0e\u4eca\u5f8c\u6a5f\u4f1a\u304c\u3042\u308c\u3070\u691c\u8a3c\u3057\u3066\u307f\u307e\u3059\uff0e\n\n\n\n#\u304a\u308f\u308a\u306b\n\n\u4eca\u5f8c\u306e\u8ab2\u984c\u3068\u3057\u3066\u306f\u4ee5\u4e0b\u306b\u53d6\u308a\u7d44\u3093\u3067\u307f\u305f\u3044\u3068\u601d\u3044\u307e\u3059\uff0e\n\n* CNN\u3084RNN\u306a\u3069\u306e\u8907\u96d1\u306a\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u69cb\u9020\n* GPU\n* \u5b66\u7fd2\u6e08\u30e2\u30c7\u30eb\u306e\u914d\u5e03\u72b6\u6cc1\n\n\u4e0a2\u3064\u8fba\u308a\u3067\u30e9\u30a4\u30d6\u30e9\u30ea\u306e\u9055\u3044\u304c\u51fa\u3066\u304d\u305d\u3046\u3067\u3059\uff0e\u8907\u6570GPU\u3078\u306e\u5bfe\u5fdc\u306a\u3069\u8a66\u3057\u3066\u307f\u305f\u3044(\u305d\u306e\u305f\u3081\u306e\u30de\u30b7\u30f3\u304c...\n\u307e\u305f\uff0ccaffe\u306a\u3069\u306f\u5b66\u7fd2\u6e08\u30e2\u30c7\u30eb\u3092\u7528\u3044\u3066\u5206\u985e\u3092\u3059\u308b\u3060\u3051\u306e\u76ee\u7684\u3067\u4f7f\u7528\u3059\u308b\u3053\u3068\u3082\u591a\u3044(\u591a\u304f\u306f\u306a\u3044?)\u6c17\u304c\u3057\u307e\u3059\u304c\uff0c\u305d\u3046\u3057\u305f\u76ee\u7684\u306b\u4f7f\u3048\u308b\u304b\u3069\u3046\u304b\u3082\u6c17\u306b\u306a\u308a\u307e\u3059\uff0e\n\n\n#\u53c2\u8003\n* \u306e\u3093\u3073\u308a\u3057\u3066\u3044\u308b\u30a8\u30f3\u30b8\u30cb\u30a2\u306e\u65e5\u8a18 - \u300e[Python\u3067\u66f8\u3051\u308bDeepLearning\u306e\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u6bd4\u8f03\u3057\u3066\u307f\u305f][]\u300f \n   \n\n\n[Python\u3067\u66f8\u3051\u308bDeepLearning\u306e\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u6bd4\u8f03\u3057\u3066\u307f\u305f]: http://nonbiri-tereka.hatenablog.com/entry/2015/12/16/003512\n", "tags": ["TensorFlow", "Chainer", "Ubuntu", "Python"]}