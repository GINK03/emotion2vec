{"context": "\n\n\u6a5f\u80fd\nC++\u306b\u5b58\u5728\u3059\u308b\u8907\u6570\u306e\u7a2e\u985e\u306e\u95a2\u6570\u3092\u30e9\u30c3\u30d7\u3057\u3066\u540c\u3058\u3088\u3046\u306b\u6271\u3046\nC++\u306b\u3042\u308b\u95a2\u6570\u306e\u7a2e\u985e\n\n\u95a2\u6570\n\u30e9\u30e0\u30c0\u5f0f \n\u95a2\u6570\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\n\u30af\u30e9\u30b9\u306e\u30e1\u30f3\u30d0\u95a2\u6570\n\n\n\u30e9\u30e0\u30c0\u5f0f\u306e\u4f7f\u3044\u65b9\n[\u30ad\u30e3\u30d7\u30c1\u30e3\u30fc](\u5f15\u6570)->\u8fd4\u308a\u5024\u306e\u578b{\u95a2\u6570\u306e\u5185\u5bb9}(\u5b9f\u884c\u6642\u306e\u5f15\u6570);\n\n\u30ad\u30e3\u30d7\u30c1\u30e3\u30fc\u306b\u306f\u57fa\u672c\u7684\u306b[=]\u304b[&]\u304c\u5165\u308b\n=\u306f\u30b9\u30b3\u30fc\u30d7\u5916\u306e\u5909\u6570\u3092\u5229\u7528\u3059\u308b\u6642\u30b3\u30d4\u30fc\u3059\u308b\u3068\u3044\u3046\u610f\u5473\n&\u306f\u30b9\u30b3\u30fc\u30d7\u5916\u306e\u5909\u6570\u3092\u5229\u7528\u3059\u308b\u6642\u53c2\u7167\u3059\u308b\u3068\u3044\u3046\u610f\u5473\n[]{}();\u306e\u3088\u3046\u306b\u5f15\u6570\u3084\u8fd4\u308a\u5024\u3092\u7701\u7565\u3059\u308b\u3053\u3068\u3082\u3067\u304d\u308b\n\n\u4f7f\u3044\u65b9\nstd::function< \u623b\u308a\u5024\u306e\u65b9(\u5f15\u6570\u306e\u578b) > object = \u95a2\u6570or \u30e9\u30e0\u30c0\u5f0f or \u95a2\u6570\u30aa\u30d6\u30a4\u30a7\u30af\u30c8 or\u30af\u30e9\u30b9\u306e\u30e1\u30f3\u30d0\u95a2\u6570;\nobject(\u5f15\u6570);\u3067\u5229\u7528\u3067\u304d\u308b\n\n\n\u30b5\u30f3\u30d7\u30eb\n\n/*\n * std_function1.cpp\n * Copyright (C) 2014 kaoru <kaoru@bsd>\n */\n#include <iostream>\n#include <functional>\nusing namespace std;\n\nstruct Foo {\n        Foo(const int n) : i_(n) {}\n        void print_add(const int n) const { std::cout << i_ + n<< std::endl; }\n        int i_;\n};\n\nstruct PrintFunctor {\n        // \u5f15\u6570\u3092\u8868\u793a\u3059\u308b\u3060\u3051\u306e\u95a2\u6570\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\n        void operator()(int i) {\n                std::cout << i << std::endl;\n        }\n};\n\nvoid\nprint_number(const int i)\n{\n        std::cout << i << std::endl;\n}\n\nint\nmain(int argc, char const* argv[])\n{\n        // \u666e\u901a\u306e\u95a2\u6570\n        std::function< void(int) > f_func = print_number;\n        f_func(3);\n\n        // \u30e9\u30e0\u30c0\u5f0f\n        std::function< void(int) > f_lambda = [=](int i) { print_number(i); };\n        f_lambda(6);\n\n        // \u30d0\u30a4\u30f3\u30c9\n        std::function< void() > f_bind = std::bind(print_number, 9);\n        f_bind();\n\n        // \u30af\u30e9\u30b9\u306e\u30e1\u30f3\u30d0\u95a2\u6570\n        std::function< void(const Foo&, int) > f_member = &Foo::print_add;\n        Foo foo (1);\n        f_member(foo, 3);       // 1+3 = 4\n\n        // \u95a2\u6570\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\n        std::function< void(int) > f_func_obj = PrintFunctor();\n        f_func_obj(11);\n\n        return 0;\n}\n\n\n#\u6a5f\u80fd\nC++\u306b\u5b58\u5728\u3059\u308b\u8907\u6570\u306e\u7a2e\u985e\u306e\u95a2\u6570\u3092\u30e9\u30c3\u30d7\u3057\u3066\u540c\u3058\u3088\u3046\u306b\u6271\u3046\nC++\u306b\u3042\u308b\u95a2\u6570\u306e\u7a2e\u985e\n\n- \u95a2\u6570\n- \u30e9\u30e0\u30c0\u5f0f \n- \u95a2\u6570\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\n- \u30af\u30e9\u30b9\u306e\u30e1\u30f3\u30d0\u95a2\u6570\n\n##\u30e9\u30e0\u30c0\u5f0f\u306e\u4f7f\u3044\u65b9\n\n```g++11\n[\u30ad\u30e3\u30d7\u30c1\u30e3\u30fc](\u5f15\u6570)->\u8fd4\u308a\u5024\u306e\u578b{\u95a2\u6570\u306e\u5185\u5bb9}(\u5b9f\u884c\u6642\u306e\u5f15\u6570);\n```\n\u30ad\u30e3\u30d7\u30c1\u30e3\u30fc\u306b\u306f\u57fa\u672c\u7684\u306b[=]\u304b[&]\u304c\u5165\u308b\n=\u306f\u30b9\u30b3\u30fc\u30d7\u5916\u306e\u5909\u6570\u3092\u5229\u7528\u3059\u308b\u6642\u30b3\u30d4\u30fc\u3059\u308b\u3068\u3044\u3046\u610f\u5473\n&\u306f\u30b9\u30b3\u30fc\u30d7\u5916\u306e\u5909\u6570\u3092\u5229\u7528\u3059\u308b\u6642\u53c2\u7167\u3059\u308b\u3068\u3044\u3046\u610f\u5473\n[]{}();\u306e\u3088\u3046\u306b\u5f15\u6570\u3084\u8fd4\u308a\u5024\u3092\u7701\u7565\u3059\u308b\u3053\u3068\u3082\u3067\u304d\u308b\n\n#\u4f7f\u3044\u65b9\n\n```c++11\nstd::function< \u623b\u308a\u5024\u306e\u65b9(\u5f15\u6570\u306e\u578b) > object = \u95a2\u6570or \u30e9\u30e0\u30c0\u5f0f or \u95a2\u6570\u30aa\u30d6\u30a4\u30a7\u30af\u30c8 or\u30af\u30e9\u30b9\u306e\u30e1\u30f3\u30d0\u95a2\u6570;\nobject(\u5f15\u6570);\u3067\u5229\u7528\u3067\u304d\u308b\n```\n\n\n#\u30b5\u30f3\u30d7\u30eb\n\n```C++\n\n/*\n * std_function1.cpp\n * Copyright (C) 2014 kaoru <kaoru@bsd>\n */\n#include <iostream>\n#include <functional>\nusing namespace std;\n \nstruct Foo {\n        Foo(const int n) : i_(n) {}\n        void print_add(const int n) const { std::cout << i_ + n<< std::endl; }\n        int i_;\n};\n \nstruct PrintFunctor {\n        // \u5f15\u6570\u3092\u8868\u793a\u3059\u308b\u3060\u3051\u306e\u95a2\u6570\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\n        void operator()(int i) {\n                std::cout << i << std::endl;\n        }\n};\n \nvoid\nprint_number(const int i)\n{\n        std::cout << i << std::endl;\n}\n \nint\nmain(int argc, char const* argv[])\n{\n        // \u666e\u901a\u306e\u95a2\u6570\n        std::function< void(int) > f_func = print_number;\n        f_func(3);\n \n        // \u30e9\u30e0\u30c0\u5f0f\n        std::function< void(int) > f_lambda = [=](int i) { print_number(i); };\n        f_lambda(6);\n \n        // \u30d0\u30a4\u30f3\u30c9\n        std::function< void() > f_bind = std::bind(print_number, 9);\n        f_bind();\n \n        // \u30af\u30e9\u30b9\u306e\u30e1\u30f3\u30d0\u95a2\u6570\n        std::function< void(const Foo&, int) > f_member = &Foo::print_add;\n        Foo foo (1);\n        f_member(foo, 3);       // 1+3 = 4\n \n        // \u95a2\u6570\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\n        std::function< void(int) > f_func_obj = PrintFunctor();\n        f_func_obj(11);\n \n        return 0;\n}\n```\n", "tags": ["\u30e9\u30e0\u30c0\u5f0f", "C++", "bind"]}