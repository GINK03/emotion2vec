{"context": " More than 1 year has passed since last update.\n\nthis is working log for me in the future.\nnow I use Perl(Sledge, tt2, ORM) in business.\nI've nevert know this language, so willing to start how to create service by modern perl\n\n[ref] http://www.rwds.net/kuroita/program/Perl_oo.html\n\n\nPackage\nYou always see package hogehoge; at the top of perl file.\nwhat is this? what does this mean?\n\nIf !package\nIf you don't write this, Interpreter recognize that  in this code package is \"package main;\"\n\ntest.pl\n#!/usr/bin/perl -w\n\n$hoge = \"hello, world\";\n\n\nthe result is below.\n$ perl test\nName \"main::hoge\" used only once: possible typo at test line 3.\n\n\nlook at \"main::hoge\".\nOrdinary, grammar is PACKAGE::SUBROUTINE  . I have to remember this(^^)\nNext is the test.\n\ntest.pl\n#!/usr/bin/perl\n\npackage main;\n\n$bar = '$bar is in main package';\n\n{\n  package hoge;\n\n  $bar = '$bar is in hoge package';\n  print $bar,\"\\n\";\n}\n{\n  package hoo;\n\n  $bar = '$bar is in hoo package';\n  print $bar,\"\\n\";\n}\n\nprint $bar;\n\n\nWhat do you think this code show result? and why?\n$ perl test.pl\n$bar is in hoge package\n$bar is in hoo package\n$bar is in main package\n\nOnce you declare package, variables in it is separated to ones in others.\nThen, even if same name variables was used or edited in other package, unless the variables in the package are changed, no problem!!\nSo, $bar at bottom of the code is never changed.\nNow, rewrite this code precisely below.\n\ntest.pl\n#!/usr/bin/perl\n\npackage main;\n\n$main::bar = '$bar is in main package';\n\n{\n  package hoge;\n\n  $hoge::bar = '$bar is in hoge package';\n  print $hoge::bar,\"\\n\";\n}\n{\n  package hoo;\n\n  $hoo::bar = '$bar is in hoo package';\n  print $hoo::bar,\"\\n\";\n}\n\nprint $main::bar;\n\n\nand the result.\n$ perl test.pl\n$bar is in hoge package\n$bar is in hoo package\n$bar is in main package\n\nSame thing can be said to subroutine as variables.\nPackage declaration sets absolute territory which other cannot get friction with.\nEach package has each absolute territory.\n######this is working log for me in the future.\n\nnow I use Perl(Sledge, tt2, ORM) in business.\nI've nevert know this language, so willing to start how to create service by modern perl\n\n####[ref] http://www.rwds.net/kuroita/program/Perl_oo.html\n\n\n#Package\nYou always see package hogehoge; at the top of perl file.\nwhat is this? what does this mean?\n\n##If !package\nIf you don't write this, Interpreter recognize that  in this code package is \"package main;\"\n\n````test.pl\n#!/usr/bin/perl -w\n\n$hoge = \"hello, world\";\n````\n\nthe result is below.\n\n````shell\n$ perl test\nName \"main::hoge\" used only once: possible typo at test line 3.\n````\n\n####look at \"main::hoge\".\n\nOrdinary, grammar is **PACKAGE::SUBROUTINE**  . I have to remember this(^^)\nNext is the test.\n\n````test.pl\n#!/usr/bin/perl\n\npackage main;\n\n$bar = '$bar is in main package';\n\n{\n  package hoge;\n\n  $bar = '$bar is in hoge package';\n  print $bar,\"\\n\";\n}\n{\n  package hoo;\n\n  $bar = '$bar is in hoo package';\n  print $bar,\"\\n\";\n}\n\nprint $bar;\n````\n\nWhat do you think this code show result? and why?\n\n````shell\n$ perl test.pl\n$bar is in hoge package\n$bar is in hoo package\n$bar is in main package\n````\n\nOnce you declare package, variables in it is separated to ones in others.\n\nThen, even if same name variables was used or edited in other package, unless the variables in the package are changed, no problem!!\n\nSo, $bar at bottom of the code is never changed.\n\n\nNow, rewrite this code precisely below.\n\n````test.pl\n#!/usr/bin/perl\n\npackage main;\n\n$main::bar = '$bar is in main package';\n\n{\n  package hoge;\n\n  $hoge::bar = '$bar is in hoge package';\n  print $hoge::bar,\"\\n\";\n}\n{\n  package hoo;\n\n  $hoo::bar = '$bar is in hoo package';\n  print $hoo::bar,\"\\n\";\n}\n\nprint $main::bar;\n````\n\nand the result.\n\n```` shell\n$ perl test.pl\n$bar is in hoge package\n$bar is in hoo package\n$bar is in main package\n````\n\n\nSame thing can be said to subroutine as variables.\nPackage declaration sets absolute territory which other cannot get friction with.\nEach package has each absolute territory.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "tags": ["Perl", "Beginner"]}