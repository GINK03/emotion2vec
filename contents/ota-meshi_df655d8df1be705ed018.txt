{"context": "Apache HttpClient\u306fjava\u304b\u3089HTTP\u901a\u4fe1\u3092\u7c21\u5358\uff08\uff1f\uff09\u306b\u884c\u3046\u30e9\u30a4\u30d6\u30e9\u30ea\u3067\u3059\u3002\n\u4ed5\u4e8b\u3067\u3053\u308c\u3092\u4f7f\u3063\u3066\u901a\u4fe1\u3059\u308b\u4e88\u5b9a\u306a\u306e\u3067\u3059\u304c\u3001\u63a5\u7d9a\u5148\u306e\u30b5\u30fc\u30d0\u30fc\u304c\u624b\u5143\u306b\u306a\u3044\u306e\u3067\u3053\u306e\u307e\u307e\u3067\u306f\u30c6\u30b9\u30c8\u304c\u3067\u304d\u307e\u305b\u3093\u3002\n\u666e\u901a\u306a\u3089\u4eee\u3067\u30b5\u30fc\u30d0\u30fc\u7acb\u3066\u3066\u30c6\u30b9\u30c8\u3059\u308b\u3068\u601d\u3044\u307e\u3059\u304c\u3001HttpClient\u306e\u4e2d\u3092\u898b\u3066\u3044\u305f\u3089VM\u4e0a\u3067\u3082\u3046\u307e\u3044\u3053\u3068\u3067\u304d\u308b\u3088\u3046\u306a\u6c17\u304c\u3057\u305f\u306e\u3067\u7c21\u5358\u306b\u8abf\u3079\u3066\u5b9f\u9a13\u3057\u3066\u307f\u307e\u3057\u305f\u3002\n\n\u65b9\u6cd5\nHttpClient\u306e\u4e2d\u3067\u306fSocket\u3092\u5229\u7528\u3057\u3066\u901a\u4fe1\u3057\u3066\u3044\u308b\u306e\u3067\u3001Socket\u3092Mock\u5316\u3057\u5b9f\u969b\u306f\u901a\u4fe1\u305b\u305aVM\u4e0a\u3067\u5b8c\u7d50\u3055\u305b\u307e\u3059\u3002\n\n\u4e0b\u6e96\u5099\nmaven\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u3067\u4f5c\u696d\u3059\u308b\u306e\u3067pom.xml\u306b\u4e0b\u8a18\u3092\u8ffd\u8a18\u3057\u307e\u3059\u3002\nhttpclient\u3068\u3001\u7121\u304f\u3066\u3082\u3044\u3044\u3051\u3069lombok\u3044\u308c\u3066\u307e\u3059\u3002\n<dependency>\n    <groupId>org.apache.httpcomponents</groupId>\n    <artifactId>httpclient</artifactId>\n    <version>4.5.2</version>\n</dependency>\n\n<dependency>\n    <groupId>org.projectlombok</groupId>\n    <artifactId>lombok</artifactId>\n    <version>1.16.6</version>\n    <scope>provided</scope>\n</dependency>\n\n\n\u9001\u4fe1\u7528Mock\u30bd\u30b1\u30c3\u30c8\n@RequiredArgsConstructor\npublic class MockSocket extends Socket {\n\n    //Mock\u30b5\u30fc\u30d0\u30fc\n    private final MockServer mockServer;\n\n    private final Deque<byte[]> responses = new ConcurrentLinkedDeque<>();\n\n    private InputStream input;\n\n    @Override\n    public InputStream getInputStream() throws IOException {\n        class MockInputStream extends FilterInputStream {\n            protected MockInputStream() {\n                super(null);\n            }\n\n            @Override\n            public int read(byte[] b, int off, int len) throws IOException {\n                if (in == null) {\n                    in = new ByteArrayInputStream(responses.poll());\n                }\n                int ret = super.read(b, off, len);\n                if (ret == -1 && !responses.isEmpty()) {\n                    in = new ByteArrayInputStream(responses.poll());\n                    return super.read(b, off, len);\n                }\n                return ret;\n            }\n\n            @Override\n            public void close() throws IOException {\n                if (in != null) {\n                    super.close();\n                }\n                responses.clear();\n            }\n        }\n        input = new MockInputStream();\n        return input;\n    }\n\n    @Override\n    public void shutdownInput() throws IOException {\n        if (input != null) {\n            input.close();\n        }\n        input = null;\n    }\n\n    @Override\n    public OutputStream getOutputStream() throws IOException {\n        ByteArrayOutputStream output = new ByteArrayOutputStream();\n        return new FilterOutputStream(output) {\n            @Override\n            public void flush() throws IOException {\n                super.flush();\n\n                byte[] request = output.toByteArray();\n                if (request.length == 0) {\n                    return;\n                }\n                try {\n                    //Request byte\u914d\u5217\u3092Mock\u30b5\u30fc\u30d0\u30fc\u306b\u6e21\u3057\u3066Responses byte\u914d\u5217\u3092\u53d6\u5f97\u3059\u308b\n                    responses.add(mockServer.execute(request));\n                } catch (HttpException e) {\n                    throw new IllegalStateException(e);\n                }\n                output.reset();\n            }\n        };\n    }\n}\n\n\nOutputStream\u3092\u30e9\u30c3\u30d7\u3057\u3066flush\u3055\u308c\u305f\u3068\u304d\u306b\u3001\u5f8c\u8ff0\u3059\u308bMockServer\u306b\u51e6\u7406\u3092\u6e21\u3057\u307e\u3059\u3002\nInputStream\u3082\u30e9\u30c3\u30d7\u3057\u3066MockServer\u304b\u3089\u306e\u8fd4\u308a\u5024\u3092\u9811\u5f35\u3063\u3066\u8fd4\u3057\u307e\u3059\u3002\n\uff08\u9023\u7d9a\u3057\u305f\u30c7\u30fc\u30bf\u306e\u53d6\u308a\u56de\u3057\u51e6\u7406\u306e\u305b\u3044\u3067\u5c11\u3057\u7169\u96d1\u306b\u306a\u308a\u307e\u3057\u305f\u3002\uff09\n\u30bf\u30a4\u30e0\u30a2\u30a6\u30c8\u306f\u8003\u616e\u3057\u3066\u3044\u307e\u305b\u3093\u3002\n\nMock\u30b5\u30fc\u30d0\u30fc\u51e6\u7406\nMockServer\u3068\u3044\u3046\u540d\u524d\u3092\u4ed8\u3051\u307e\u3057\u305f\u304c\u3001\u5b9f\u969b\u306e\u30b5\u30fc\u30d0\u30fc\u3067\u306f\u306a\u304f\u3001\u30b5\u30fc\u30d0\u30fc\u3063\u307d\u3044\u51e6\u7406\u3092\u3057\u3066\u5024\u3092\u8fd4\u3059\u3060\u3051\u3067\u3059\u3002\nimport org.apache.http.HttpEntityEnclosingRequest;\nimport org.apache.http.HttpException;\nimport org.apache.http.HttpRequest;\nimport org.apache.http.HttpResponse;\nimport org.apache.http.HttpStatus;\nimport org.apache.http.MethodNotSupportedException;\nimport org.apache.http.ProtocolVersion;\nimport org.apache.http.RequestLine;\nimport org.apache.http.StatusLine;\nimport org.apache.http.impl.DefaultBHttpServerConnection;\nimport org.apache.http.impl.DefaultBHttpServerConnectionFactory;\nimport org.apache.http.impl.DefaultHttpRequestFactory;\nimport org.apache.http.impl.io.DefaultHttpRequestParser;\nimport org.apache.http.io.HttpMessageParserFactory;\nimport org.apache.http.message.BasicHttpEntityEnclosingRequest;\nimport org.apache.http.message.BasicHttpResponse;\nimport org.apache.http.message.BasicLineParser;\nimport org.apache.http.message.BasicStatusLine;\n\nimport lombok.RequiredArgsConstructor;\n\n@RequiredArgsConstructor\npublic final class MockServer {\n    //HTTP\u30e1\u30bd\u30c3\u30c9\u51e6\u7406\n    private final BiConsumer<HttpRequest, HttpResponse> method;\n\n    private static final ProtocolVersion PROTOCOL_VERSION_HTTP1_1 = new ProtocolVersion(\"HTTP\", 1, 1);\n    private static final StatusLine STATUS_LINE_OK = new BasicStatusLine(PROTOCOL_VERSION_HTTP1_1, HttpStatus.SC_OK,\n            \"OK\");\n\n    @SuppressWarnings(\"resource\")\n    public byte[] execute(byte[] request)\n            throws IOException, HttpException {\n\n        //Mock\u30b5\u30fc\u30d0\u30fc\u5074\u7528Socket\u751f\u6210\n        MockServerSocket socket = new MockServerSocket(request);\n\n        //DefaultBHttpServerConnection\u751f\u6210\n        DefaultBHttpServerConnection connection = new DefaultBHttpServerConnectionFactory()\n                .createConnection(socket);\n\n        //\u30ea\u30af\u30a8\u30b9\u30c8\u751f\u6210\n        HttpRequest httpRequest = connection.receiveRequestHeader();\n        if (httpRequest instanceof HttpEntityEnclosingRequest) {\n            HttpEntityEnclosingRequest enclosingRequest = (HttpEntityEnclosingRequest) httpRequest;\n            connection.receiveRequestEntity(enclosingRequest);\n        }\n\n        //\u30ec\u30b9\u30dd\u30f3\u30b9\u751f\u6210\n        HttpResponse httpResponse = new BasicHttpResponse(STATUS_LINE_OK);\n\n        //\u30e1\u30bd\u30c3\u30c9\u5b9f\u884c\n        method.accept(httpRequest, httpResponse);\n\n        //Stream\uff08MockServerSocket\uff09\u306b\u66f8\u304d\u8fbc\u3080\n        connection.sendResponseHeader(httpResponse);\n        connection.sendResponseEntity(httpResponse);\n\n        return socket.getResponse();\n    }\n}\n\n\nhttpcore\u306b\u5165\u3063\u3066\u3044\u308b\u3001DefaultBHttpServerConnection\u3092\u4f7f\u3063\u3066\u30b5\u30fc\u30d0\u30fc\u51e6\u7406\u3092\u4eee\u60f3\u7684\u306b\u884c\u3044\u307e\u3059\u3002\nDefaultBHttpServerConnection\u306fSocket\u3092\u5fc5\u8981\u3068\u3059\u308b\u306e\u3067\u3053\u3053\u3067\u3082\u65b0\u3057\u304fMock\u5316\u3057\u305fSocket\u3001MockServerSocket\u3092\u4f5c\u6210\u3057\u307e\u3057\u305f\u3002\nMockServerSocket\u306f\u5f8c\u8ff0\u3057\u307e\u3059\u3002\n\n\u30b5\u30fc\u30d0\u30fc\u7528Mock\u30bd\u30b1\u30c3\u30c8\n@RequiredArgsConstructor\npublic class MockServerSocket extends Socket {\n    private final byte[] request;\n    @Getter\n    private byte[] response;\n\n    @Override\n    public InputStream getInputStream() throws IOException {\n        return new ByteArrayInputStream(request);\n    }\n\n    @Override\n    public OutputStream getOutputStream() throws IOException {\n        ByteArrayOutputStream output = new ByteArrayOutputStream();\n        return new FilterOutputStream(output) {\n            @Override\n            public void flush() throws IOException {\n                super.flush();\n                byte[] bs = output.toByteArray();\n                if (bs.length == 0) {\n                    return;\n                }\n                //\u66f8\u304d\u8fbc\u307e\u308c\u305f\u5024\u3092response\u5909\u6570\u306b\u6b8b\u3059\n                response = bs;\n                output.reset();\n            }\n\n        };\n    }\n}\n\nbyte\u914d\u5217\u3092\u6a2a\u6d41\u3057\u3057\u3066\u3044\u308b\u3060\u3051\u3067\u3059\u3002\n\n\u5b9f\u884c\u7528\n\uff08https\u306f\u4eca\u56de\u672a\u5bfe\u5fdc\uff09\n    public static void main(String... a) throws URISyntaxException, ClientProtocolException, IOException {\n        String host = \"localhost\";\n\n        try (CloseableHttpClient client = HttpClientBuilder.create().build()) {\n            //Mock Socket\u3092\u6e21\u3059\u305f\u3081\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u4f5c\u6210\u3002\n            Registry<ConnectionSocketFactory> registry = RegistryBuilder.<ConnectionSocketFactory> create()\n                    .register(\"http\", new ConnectionSocketFactory() {\n                        @Override\n                        public Socket createSocket(HttpContext context) throws IOException {\n                            //Mock Socket\u3092\u8fd4\u3059\n                            return createMockSocket();\n                        }\n\n                        @Override\n                        public Socket connectSocket(int connectTimeout, Socket sock, HttpHost host,\n                                InetSocketAddress remoteAddress, InetSocketAddress localAddress, HttpContext context)\n                                throws IOException {\n                            return sock;\n                        }\n                    })\n                    .build();\n            HttpClientContext httpClientContext = new HttpClientContext();\n            //\u767b\u9332\n            httpClientContext.setAttribute(\"http.socket-factory-registry\", registry);\n\n            //GET\n            HttpGet httpGet = new HttpGet(new URIBuilder()\n                    .setScheme(\"http\")\n                    .setHost(host)\n                    .setPath(\"/string\")\n                    .build());\n\n            try (CloseableHttpResponse response = client.execute(httpGet, httpClientContext)) {\n                String body = EntityUtils.toString(response.getEntity(), StandardCharsets.UTF_8);\n                System.out.println(\"\u25a0GET\");\n                System.out.println(body);\n            }\n\n            //POST\n            HttpPost httpPost = new HttpPost(new URIBuilder()\n                    .setScheme(\"http\")\n                    .setHost(host)\n                    .setPath(\"/string\")\n                    .build());\n\n            httpPost.setEntity(new StringEntity(\"data\"));\n            try (CloseableHttpResponse response = client.execute(httpPost, httpClientContext)) {\n\n                String body = EntityUtils.toString(response.getEntity(), StandardCharsets.UTF_8);\n\n                System.out.println(\"\u25a0POST\");\n                System.out.println(body);\n            }\n\n        }\n    }\n\n    /**\n     * Mock Socket\u751f\u6210\n     * \n     * @return\n     */\n    private static Socket createMockSocket() {\n        MockServer mockServer = new MockServer((req, res) -> {\n            //Mock\u30e1\u30bd\u30c3\u30c9\n            try {\n                if (req.getRequestLine().getMethod().equals(\"GET\") && req.getRequestLine().getUri().equals(\"/string\")) {\n                    res.setEntity(new StringEntity(\"body\", StandardCharsets.UTF_8));\n                } else if (req.getRequestLine().getMethod().equals(\"POST\")\n                        && req.getRequestLine().getUri().equals(\"/string\")) {\n                    HttpEntityEnclosingRequest entityEnclosingRequest = (HttpEntityEnclosingRequest) req;\n\n                    String body = EntityUtils.toString(entityEnclosingRequest.getEntity(), StandardCharsets.UTF_8);\n\n                    res.setEntity(new StringEntity(\"request body:\" + body, StandardCharsets.UTF_8));\n                }\n            } catch (IOException e) {\n                throw new UncheckedIOException(e);\n            }\n        });\n\n        return new MockSocket(mockServer);\n    }\n\nMock\u30bd\u30b1\u30c3\u30c8\u3092\u8fd4\u3059Registry\u3092\u4f5c\u6210\u3057\u3001HttpClientContext\u306b\"http.socket-factory-registry\"\u3068\u3044\u3046Key\u3067\u767b\u9332\u3059\u308b\u3053\u3068\u3067\u3001HttpClient\u306fMock\u30bd\u30b1\u30c3\u30c8\u3067\u901a\u4fe1\u3057\u307e\u3059\u3002\uff08\u5b9f\u969b\u306f\u901a\u4fe1\u3057\u306a\u3044\u3051\u3069\uff09\n\n\u7d50\u679c\n\u25a0GET\nbody\n\u25a0POST\nrequest body:data\n\n\u30b5\u30fc\u30d0\u304c\u3044\u306a\u304f\u3066\u3082HTTP\u306e\u3084\u308a\u53d6\u308a\u304c\u3067\u304d\u305d\u3046\u306a\u3068\u3053\u308d\u307e\u3067\u3067\u304d\u307e\u3057\u305f\u3002\n\n\u554f\u984c\u70b9\u2460\n\u4e0a\u8a18\u306e\u30b3\u30fc\u30c9\u306flocalhost\u3067HTTP\u901a\u4fe1\u3092\u3057\u3066\u3044\u307e\u3059\u304c\u3001\u666e\u901a\u306ehost\u3092\u6307\u5b9a\u3057\u3001\u305d\u306e\u6307\u5b9a\u3057\u305fhost\u304c\u81ea\u5206\u306e\u74b0\u5883\u304b\u3089\u7e4b\u3052\u306a\u3044\u3068\u3046\u307e\u304f\u52d5\u304d\u307e\u305b\u3093\u3002\n\uff08Exception\u306b\u306a\u308a\u307e\u3059\u3002\uff09\n\n\u4f8b\nString host = \"localhost\";\n\u3068\u3042\u308b\u90e8\u5206\u3092\nString host = \"unittest.jp\";\n\u306b\u3059\u308b\u3068\u52d5\u304d\u307e\u305b\u3093\u3002\nException in thread \"main\" java.net.UnknownHostException: unittest.jp\n    at java.net.Inet6AddressImpl.lookupAllHostAddr(Native Method)\n    at java.net.InetAddress$2.lookupAllHostAddr(InetAddress.java:928)\n    at java.net.InetAddress.getAddressesFromNameService(InetAddress.java:1323)\n    at java.net.InetAddress.getAllByName0(InetAddress.java:1276)\n    at java.net.InetAddress.getAllByName(InetAddress.java:1192)\n    at java.net.InetAddress.getAllByName(InetAddress.java:1126)\n\n\n\u89e3\u6c7a\u7b56\nDnsResolver\u3068\u3044\u3046\u306e\u3092\u5dee\u3057\u66ff\u3048\u308c\u3070\u3046\u307e\u304f\u3044\u304d\u305d\u3046\u3067\u3059\u3002\n\u305f\u3060\u3053\u308c\u3092HttpClient\u306b\u6e21\u3059\u306b\u306fConnectionManager\u3092\u6e21\u3055\u306a\u3051\u308c\u3070\u3044\u3051\u306a\u3044\u3088\u3046\u3067\u3001\n\u30b3\u30fc\u30c9\u306f\u9762\u5012\u306a\u3053\u3068\u306b\u306a\u3063\u3066\u3057\u307e\u3044\u307e\u3057\u305f\u3002\n        PoolingHttpClientConnectionManager poolingmgr = new PoolingHttpClientConnectionManager(\n                RegistryBuilder.<ConnectionSocketFactory> create().build(),\n                null, null,\n                h -> {\n                    return new InetAddress[] { null };//Mock\u30bd\u30b1\u30c3\u30c8\u3067\u306f\u4f7f\u3063\u3066\u306a\u3044\u306e\u3067null\u304c1\u3064\u3042\u308b\u914d\u5217\u3092\u8fd4\u3059\u3002\n                    //\u5143\u306e\u30b3\u30fc\u30c9\n                    //return InetAddress.getAllByName(h);\n                }, -1, TimeUnit.MILLISECONDS);\n\n        try (CloseableHttpClient client = HttpClientBuilder.create()\n                .setConnectionManager(poolingmgr)\n                .build()) {\n\n\n\u554f\u984c\u70b9\u2461\nGET\u30fbPOST\u306f\u52d5\u304d\u307e\u3059\u3002\n\u4ed6\u3082\u5927\u4f53\u52d5\u304f\u306e\u3067\u3059\u304c\u3001HttpRequest\u306e\u5b9f\u88c5\u30af\u30e9\u30b9\u305f\u3061\u306eHttpClient\u6a19\u6e96\u306e\u4e2d\u3067\u3001PATCH\u3060\u3051\u52d5\u304d\u307e\u305b\u3093\u3002\nDefaultBHttpServerConnection\u306e\u4e2d\u3092\u8ffd\u3063\u3066\u307f\u308b\u3068\u3001\nDefaultHttpRequestFactory#newHttpRequest\u3067PATCH\u3060\u3051\u306f\u3076\u3089\u308c\u3066\u3044\u307e\u3059\u3002RFC5789\u3060\u304b\u3089\u3067\u3059\u304b\uff1f\n\n\u89e3\u6c7a\u7b56\nDefaultBHttpServerConnection\u751f\u6210\u3092\u4e0b\u8a18\u306e\u3088\u3046\u306b\u3059\u308b\u3053\u3068\u3067\u89e3\u6c7a\u3057\u307e\u3059\u3002\n        //DefaultHttpRequestFactory\u306fPATCH\u306b\u5bfe\u5fdc\u3057\u3066\u3044\u306a\u3044\u306e\u3067\u62e1\u5f35\u3059\u308b\u3002\n        HttpMessageParserFactory<HttpRequest> parserFactory = (buffer, constraints) -> {\n            return new DefaultHttpRequestParser(buffer, BasicLineParser.INSTANCE, new DefaultHttpRequestFactory() {\n\n                @Override\n                public HttpRequest newHttpRequest(RequestLine requestline) throws MethodNotSupportedException {\n                    String method = requestline.getMethod();\n                    if (\"PATCH\".equals(method)) {\n                        return new BasicHttpEntityEnclosingRequest(requestline);\n                    }\n                    return super.newHttpRequest(requestline);\n                }\n\n            }, constraints);\n        };\n\n        //DefaultBHttpServerConnection\u751f\u6210\n        DefaultBHttpServerConnection connection = new DefaultBHttpServerConnectionFactory(null, parserFactory, null)\n                .createConnection(socket);\n\n\n\u3060\u3044\u3076\u30cd\u30b8\u8fbc\u307e\u306a\u3044\u3068\u3001\u52d5\u304b\u306a\u3044\u306e\u3067\u30c6\u30b9\u30c8\u7528\u3067\u5229\u7528\u3059\u308b\u306b\u306f\u672c\u5b9f\u88c5\u3082\u5de5\u592b\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u305d\u3046\u3067\u3059\u3002\u3002\u3002\n\u3082\u3063\u3068\u7c21\u5358\u306a\u65b9\u6cd5\u306f\u306a\u3044\u306e\u304b\u306a\uff1f\n[Apache HttpClient](https://hc.apache.org/httpcomponents-client-ga/index.html)\u306fjava\u304b\u3089HTTP\u901a\u4fe1\u3092\u7c21\u5358\uff08\uff1f\uff09\u306b\u884c\u3046\u30e9\u30a4\u30d6\u30e9\u30ea\u3067\u3059\u3002\n\n\u4ed5\u4e8b\u3067\u3053\u308c\u3092\u4f7f\u3063\u3066\u901a\u4fe1\u3059\u308b\u4e88\u5b9a\u306a\u306e\u3067\u3059\u304c\u3001\u63a5\u7d9a\u5148\u306e\u30b5\u30fc\u30d0\u30fc\u304c\u624b\u5143\u306b\u306a\u3044\u306e\u3067\u3053\u306e\u307e\u307e\u3067\u306f\u30c6\u30b9\u30c8\u304c\u3067\u304d\u307e\u305b\u3093\u3002\n\u666e\u901a\u306a\u3089\u4eee\u3067\u30b5\u30fc\u30d0\u30fc\u7acb\u3066\u3066\u30c6\u30b9\u30c8\u3059\u308b\u3068\u601d\u3044\u307e\u3059\u304c\u3001HttpClient\u306e\u4e2d\u3092\u898b\u3066\u3044\u305f\u3089VM\u4e0a\u3067\u3082\u3046\u307e\u3044\u3053\u3068\u3067\u304d\u308b\u3088\u3046\u306a\u6c17\u304c\u3057\u305f\u306e\u3067\u7c21\u5358\u306b\u8abf\u3079\u3066\u5b9f\u9a13\u3057\u3066\u307f\u307e\u3057\u305f\u3002\n\n# \u65b9\u6cd5\n\nHttpClient\u306e\u4e2d\u3067\u306fSocket\u3092\u5229\u7528\u3057\u3066\u901a\u4fe1\u3057\u3066\u3044\u308b\u306e\u3067\u3001Socket\u3092Mock\u5316\u3057\u5b9f\u969b\u306f\u901a\u4fe1\u305b\u305aVM\u4e0a\u3067\u5b8c\u7d50\u3055\u305b\u307e\u3059\u3002\n\n# \u4e0b\u6e96\u5099\n\nmaven\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u3067\u4f5c\u696d\u3059\u308b\u306e\u3067pom.xml\u306b\u4e0b\u8a18\u3092\u8ffd\u8a18\u3057\u307e\u3059\u3002\nhttpclient\u3068\u3001\u7121\u304f\u3066\u3082\u3044\u3044\u3051\u3069lombok\u3044\u308c\u3066\u307e\u3059\u3002\n\n```xml\n<dependency>\n\t<groupId>org.apache.httpcomponents</groupId>\n\t<artifactId>httpclient</artifactId>\n\t<version>4.5.2</version>\n</dependency>\n\n<dependency>\n\t<groupId>org.projectlombok</groupId>\n\t<artifactId>lombok</artifactId>\n\t<version>1.16.6</version>\n\t<scope>provided</scope>\n</dependency>\n```\n\n# \u9001\u4fe1\u7528Mock\u30bd\u30b1\u30c3\u30c8\n\n```java\n@RequiredArgsConstructor\npublic class MockSocket extends Socket {\n\n\t//Mock\u30b5\u30fc\u30d0\u30fc\n\tprivate final MockServer mockServer;\n\n\tprivate final Deque<byte[]> responses = new ConcurrentLinkedDeque<>();\n\n\tprivate InputStream input;\n\n\t@Override\n\tpublic InputStream getInputStream() throws IOException {\n\t\tclass MockInputStream extends FilterInputStream {\n\t\t\tprotected MockInputStream() {\n\t\t\t\tsuper(null);\n\t\t\t}\n\n\t\t\t@Override\n\t\t\tpublic int read(byte[] b, int off, int len) throws IOException {\n\t\t\t\tif (in == null) {\n\t\t\t\t\tin = new ByteArrayInputStream(responses.poll());\n\t\t\t\t}\n\t\t\t\tint ret = super.read(b, off, len);\n\t\t\t\tif (ret == -1 && !responses.isEmpty()) {\n\t\t\t\t\tin = new ByteArrayInputStream(responses.poll());\n\t\t\t\t\treturn super.read(b, off, len);\n\t\t\t\t}\n\t\t\t\treturn ret;\n\t\t\t}\n\n\t\t\t@Override\n\t\t\tpublic void close() throws IOException {\n\t\t\t\tif (in != null) {\n\t\t\t\t\tsuper.close();\n\t\t\t\t}\n\t\t\t\tresponses.clear();\n\t\t\t}\n\t\t}\n\t\tinput = new MockInputStream();\n\t\treturn input;\n\t}\n\n\t@Override\n\tpublic void shutdownInput() throws IOException {\n\t\tif (input != null) {\n\t\t\tinput.close();\n\t\t}\n\t\tinput = null;\n\t}\n\n\t@Override\n\tpublic OutputStream getOutputStream() throws IOException {\n\t\tByteArrayOutputStream output = new ByteArrayOutputStream();\n\t\treturn new FilterOutputStream(output) {\n\t\t\t@Override\n\t\t\tpublic void flush() throws IOException {\n\t\t\t\tsuper.flush();\n\n\t\t\t\tbyte[] request = output.toByteArray();\n\t\t\t\tif (request.length == 0) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\ttry {\n\t\t\t\t\t//Request byte\u914d\u5217\u3092Mock\u30b5\u30fc\u30d0\u30fc\u306b\u6e21\u3057\u3066Responses byte\u914d\u5217\u3092\u53d6\u5f97\u3059\u308b\n\t\t\t\t\tresponses.add(mockServer.execute(request));\n\t\t\t\t} catch (HttpException e) {\n\t\t\t\t\tthrow new IllegalStateException(e);\n\t\t\t\t}\n\t\t\t\toutput.reset();\n\t\t\t}\n\t\t};\n\t}\n}\n\n```\nOutputStream\u3092\u30e9\u30c3\u30d7\u3057\u3066flush\u3055\u308c\u305f\u3068\u304d\u306b\u3001\u5f8c\u8ff0\u3059\u308bMockServer\u306b\u51e6\u7406\u3092\u6e21\u3057\u307e\u3059\u3002\nInputStream\u3082\u30e9\u30c3\u30d7\u3057\u3066MockServer\u304b\u3089\u306e\u8fd4\u308a\u5024\u3092\u9811\u5f35\u3063\u3066\u8fd4\u3057\u307e\u3059\u3002\n\uff08\u9023\u7d9a\u3057\u305f\u30c7\u30fc\u30bf\u306e\u53d6\u308a\u56de\u3057\u51e6\u7406\u306e\u305b\u3044\u3067\u5c11\u3057\u7169\u96d1\u306b\u306a\u308a\u307e\u3057\u305f\u3002\uff09\n\n\u30bf\u30a4\u30e0\u30a2\u30a6\u30c8\u306f\u8003\u616e\u3057\u3066\u3044\u307e\u305b\u3093\u3002\n\n# Mock\u30b5\u30fc\u30d0\u30fc\u51e6\u7406\n\nMockServer\u3068\u3044\u3046\u540d\u524d\u3092\u4ed8\u3051\u307e\u3057\u305f\u304c\u3001\u5b9f\u969b\u306e\u30b5\u30fc\u30d0\u30fc\u3067\u306f\u306a\u304f\u3001\u30b5\u30fc\u30d0\u30fc\u3063\u307d\u3044\u51e6\u7406\u3092\u3057\u3066\u5024\u3092\u8fd4\u3059\u3060\u3051\u3067\u3059\u3002\n\n```java\nimport org.apache.http.HttpEntityEnclosingRequest;\nimport org.apache.http.HttpException;\nimport org.apache.http.HttpRequest;\nimport org.apache.http.HttpResponse;\nimport org.apache.http.HttpStatus;\nimport org.apache.http.MethodNotSupportedException;\nimport org.apache.http.ProtocolVersion;\nimport org.apache.http.RequestLine;\nimport org.apache.http.StatusLine;\nimport org.apache.http.impl.DefaultBHttpServerConnection;\nimport org.apache.http.impl.DefaultBHttpServerConnectionFactory;\nimport org.apache.http.impl.DefaultHttpRequestFactory;\nimport org.apache.http.impl.io.DefaultHttpRequestParser;\nimport org.apache.http.io.HttpMessageParserFactory;\nimport org.apache.http.message.BasicHttpEntityEnclosingRequest;\nimport org.apache.http.message.BasicHttpResponse;\nimport org.apache.http.message.BasicLineParser;\nimport org.apache.http.message.BasicStatusLine;\n\nimport lombok.RequiredArgsConstructor;\n\n@RequiredArgsConstructor\npublic final class MockServer {\n\t//HTTP\u30e1\u30bd\u30c3\u30c9\u51e6\u7406\n\tprivate final BiConsumer<HttpRequest, HttpResponse> method;\n\n\tprivate static final ProtocolVersion PROTOCOL_VERSION_HTTP1_1 = new ProtocolVersion(\"HTTP\", 1, 1);\n\tprivate static final StatusLine STATUS_LINE_OK = new BasicStatusLine(PROTOCOL_VERSION_HTTP1_1, HttpStatus.SC_OK,\n\t\t\t\"OK\");\n\n\t@SuppressWarnings(\"resource\")\n\tpublic byte[] execute(byte[] request)\n\t\t\tthrows IOException, HttpException {\n\n\t\t//Mock\u30b5\u30fc\u30d0\u30fc\u5074\u7528Socket\u751f\u6210\n\t\tMockServerSocket socket = new MockServerSocket(request);\n\n\t\t//DefaultBHttpServerConnection\u751f\u6210\n\t\tDefaultBHttpServerConnection connection = new DefaultBHttpServerConnectionFactory()\n\t\t\t\t.createConnection(socket);\n\n\t\t//\u30ea\u30af\u30a8\u30b9\u30c8\u751f\u6210\n\t\tHttpRequest httpRequest = connection.receiveRequestHeader();\n\t\tif (httpRequest instanceof HttpEntityEnclosingRequest) {\n\t\t\tHttpEntityEnclosingRequest enclosingRequest = (HttpEntityEnclosingRequest) httpRequest;\n\t\t\tconnection.receiveRequestEntity(enclosingRequest);\n\t\t}\n\n\t\t//\u30ec\u30b9\u30dd\u30f3\u30b9\u751f\u6210\n\t\tHttpResponse httpResponse = new BasicHttpResponse(STATUS_LINE_OK);\n\n\t\t//\u30e1\u30bd\u30c3\u30c9\u5b9f\u884c\n\t\tmethod.accept(httpRequest, httpResponse);\n\n\t\t//Stream\uff08MockServerSocket\uff09\u306b\u66f8\u304d\u8fbc\u3080\n\t\tconnection.sendResponseHeader(httpResponse);\n\t\tconnection.sendResponseEntity(httpResponse);\n\n\t\treturn socket.getResponse();\n\t}\n}\n\n```\n\nhttpcore\u306b\u5165\u3063\u3066\u3044\u308b\u3001DefaultBHttpServerConnection\u3092\u4f7f\u3063\u3066\u30b5\u30fc\u30d0\u30fc\u51e6\u7406\u3092\u4eee\u60f3\u7684\u306b\u884c\u3044\u307e\u3059\u3002\nDefaultBHttpServerConnection\u306fSocket\u3092\u5fc5\u8981\u3068\u3059\u308b\u306e\u3067\u3053\u3053\u3067\u3082\u65b0\u3057\u304fMock\u5316\u3057\u305fSocket\u3001MockServerSocket\u3092\u4f5c\u6210\u3057\u307e\u3057\u305f\u3002\nMockServerSocket\u306f\u5f8c\u8ff0\u3057\u307e\u3059\u3002\n\n# \u30b5\u30fc\u30d0\u30fc\u7528Mock\u30bd\u30b1\u30c3\u30c8\n\n```java\n@RequiredArgsConstructor\npublic class MockServerSocket extends Socket {\n\tprivate final byte[] request;\n\t@Getter\n\tprivate byte[] response;\n\n\t@Override\n\tpublic InputStream getInputStream() throws IOException {\n\t\treturn new ByteArrayInputStream(request);\n\t}\n\n\t@Override\n\tpublic OutputStream getOutputStream() throws IOException {\n\t\tByteArrayOutputStream output = new ByteArrayOutputStream();\n\t\treturn new FilterOutputStream(output) {\n\t\t\t@Override\n\t\t\tpublic void flush() throws IOException {\n\t\t\t\tsuper.flush();\n\t\t\t\tbyte[] bs = output.toByteArray();\n\t\t\t\tif (bs.length == 0) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\t//\u66f8\u304d\u8fbc\u307e\u308c\u305f\u5024\u3092response\u5909\u6570\u306b\u6b8b\u3059\n\t\t\t\tresponse = bs;\n\t\t\t\toutput.reset();\n\t\t\t}\n\n\t\t};\n\t}\n}\n```\n\nbyte\u914d\u5217\u3092\u6a2a\u6d41\u3057\u3057\u3066\u3044\u308b\u3060\u3051\u3067\u3059\u3002\n\n# \u5b9f\u884c\u7528\n\uff08https\u306f\u4eca\u56de\u672a\u5bfe\u5fdc\uff09\n\n```java\n\tpublic static void main(String... a) throws URISyntaxException, ClientProtocolException, IOException {\n\t\tString host = \"localhost\";\n\n\t\ttry (CloseableHttpClient client = HttpClientBuilder.create().build()) {\n\t\t\t//Mock Socket\u3092\u6e21\u3059\u305f\u3081\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u4f5c\u6210\u3002\n\t\t\tRegistry<ConnectionSocketFactory> registry = RegistryBuilder.<ConnectionSocketFactory> create()\n\t\t\t\t\t.register(\"http\", new ConnectionSocketFactory() {\n\t\t\t\t\t\t@Override\n\t\t\t\t\t\tpublic Socket createSocket(HttpContext context) throws IOException {\n\t\t\t\t\t\t\t//Mock Socket\u3092\u8fd4\u3059\n\t\t\t\t\t\t\treturn createMockSocket();\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t@Override\n\t\t\t\t\t\tpublic Socket connectSocket(int connectTimeout, Socket sock, HttpHost host,\n\t\t\t\t\t\t\t\tInetSocketAddress remoteAddress, InetSocketAddress localAddress, HttpContext context)\n\t\t\t\t\t\t\t\tthrows IOException {\n\t\t\t\t\t\t\treturn sock;\n\t\t\t\t\t\t}\n\t\t\t\t\t})\n\t\t\t\t\t.build();\n\t\t\tHttpClientContext httpClientContext = new HttpClientContext();\n\t\t\t//\u767b\u9332\n\t\t\thttpClientContext.setAttribute(\"http.socket-factory-registry\", registry);\n\n\t\t\t//GET\n\t\t\tHttpGet httpGet = new HttpGet(new URIBuilder()\n\t\t\t\t\t.setScheme(\"http\")\n\t\t\t\t\t.setHost(host)\n\t\t\t\t\t.setPath(\"/string\")\n\t\t\t\t\t.build());\n\n\t\t\ttry (CloseableHttpResponse response = client.execute(httpGet, httpClientContext)) {\n\t\t\t\tString body = EntityUtils.toString(response.getEntity(), StandardCharsets.UTF_8);\n\t\t\t\tSystem.out.println(\"\u25a0GET\");\n\t\t\t\tSystem.out.println(body);\n\t\t\t}\n\n\t\t\t//POST\n\t\t\tHttpPost httpPost = new HttpPost(new URIBuilder()\n\t\t\t\t\t.setScheme(\"http\")\n\t\t\t\t\t.setHost(host)\n\t\t\t\t\t.setPath(\"/string\")\n\t\t\t\t\t.build());\n\n\t\t\thttpPost.setEntity(new StringEntity(\"data\"));\n\t\t\ttry (CloseableHttpResponse response = client.execute(httpPost, httpClientContext)) {\n\n\t\t\t\tString body = EntityUtils.toString(response.getEntity(), StandardCharsets.UTF_8);\n\n\t\t\t\tSystem.out.println(\"\u25a0POST\");\n\t\t\t\tSystem.out.println(body);\n\t\t\t}\n\n\t\t}\n\t}\n\n\t/**\n\t * Mock Socket\u751f\u6210\n\t * \n\t * @return\n\t */\n\tprivate static Socket createMockSocket() {\n\t\tMockServer mockServer = new MockServer((req, res) -> {\n\t\t\t//Mock\u30e1\u30bd\u30c3\u30c9\n\t\t\ttry {\n\t\t\t\tif (req.getRequestLine().getMethod().equals(\"GET\") && req.getRequestLine().getUri().equals(\"/string\")) {\n\t\t\t\t\tres.setEntity(new StringEntity(\"body\", StandardCharsets.UTF_8));\n\t\t\t\t} else if (req.getRequestLine().getMethod().equals(\"POST\")\n\t\t\t\t\t\t&& req.getRequestLine().getUri().equals(\"/string\")) {\n\t\t\t\t\tHttpEntityEnclosingRequest entityEnclosingRequest = (HttpEntityEnclosingRequest) req;\n\n\t\t\t\t\tString body = EntityUtils.toString(entityEnclosingRequest.getEntity(), StandardCharsets.UTF_8);\n\n\t\t\t\t\tres.setEntity(new StringEntity(\"request body:\" + body, StandardCharsets.UTF_8));\n\t\t\t\t}\n\t\t\t} catch (IOException e) {\n\t\t\t\tthrow new UncheckedIOException(e);\n\t\t\t}\n\t\t});\n\n\t\treturn new MockSocket(mockServer);\n\t}\n```\n\nMock\u30bd\u30b1\u30c3\u30c8\u3092\u8fd4\u3059Registry\u3092\u4f5c\u6210\u3057\u3001HttpClientContext\u306b`\"http.socket-factory-registry\"`\u3068\u3044\u3046Key\u3067\u767b\u9332\u3059\u308b\u3053\u3068\u3067\u3001HttpClient\u306fMock\u30bd\u30b1\u30c3\u30c8\u3067\u901a\u4fe1\u3057\u307e\u3059\u3002\uff08\u5b9f\u969b\u306f\u901a\u4fe1\u3057\u306a\u3044\u3051\u3069\uff09\n\n## \u7d50\u679c\n```\n\u25a0GET\nbody\n\u25a0POST\nrequest body:data\n```\n\n\u30b5\u30fc\u30d0\u304c\u3044\u306a\u304f\u3066\u3082HTTP\u306e\u3084\u308a\u53d6\u308a\u304c\u3067\u304d\u305d\u3046\u306a\u3068\u3053\u308d\u307e\u3067\u3067\u304d\u307e\u3057\u305f\u3002\n\n\n# \u554f\u984c\u70b9\u2460\n\u4e0a\u8a18\u306e\u30b3\u30fc\u30c9\u306f`localhost`\u3067HTTP\u901a\u4fe1\u3092\u3057\u3066\u3044\u307e\u3059\u304c\u3001\u666e\u901a\u306ehost\u3092\u6307\u5b9a\u3057\u3001\u305d\u306e\u6307\u5b9a\u3057\u305fhost\u304c\u81ea\u5206\u306e\u74b0\u5883\u304b\u3089\u7e4b\u3052\u306a\u3044\u3068\u3046\u307e\u304f\u52d5\u304d\u307e\u305b\u3093\u3002\n\uff08Exception\u306b\u306a\u308a\u307e\u3059\u3002\uff09\n\n## \u4f8b\n``String host = \"localhost\";``\n\u3068\u3042\u308b\u90e8\u5206\u3092\n``String host = \"unittest.jp\";``\n\u306b\u3059\u308b\u3068\u52d5\u304d\u307e\u305b\u3093\u3002\n\n```\nException in thread \"main\" java.net.UnknownHostException: unittest.jp\n\tat java.net.Inet6AddressImpl.lookupAllHostAddr(Native Method)\n\tat java.net.InetAddress$2.lookupAllHostAddr(InetAddress.java:928)\n\tat java.net.InetAddress.getAddressesFromNameService(InetAddress.java:1323)\n\tat java.net.InetAddress.getAllByName0(InetAddress.java:1276)\n\tat java.net.InetAddress.getAllByName(InetAddress.java:1192)\n\tat java.net.InetAddress.getAllByName(InetAddress.java:1126)\n```\n\n## \u89e3\u6c7a\u7b56\nDnsResolver\u3068\u3044\u3046\u306e\u3092\u5dee\u3057\u66ff\u3048\u308c\u3070\u3046\u307e\u304f\u3044\u304d\u305d\u3046\u3067\u3059\u3002\n\u305f\u3060\u3053\u308c\u3092HttpClient\u306b\u6e21\u3059\u306b\u306fConnectionManager\u3092\u6e21\u3055\u306a\u3051\u308c\u3070\u3044\u3051\u306a\u3044\u3088\u3046\u3067\u3001\n\u30b3\u30fc\u30c9\u306f\u9762\u5012\u306a\u3053\u3068\u306b\u306a\u3063\u3066\u3057\u307e\u3044\u307e\u3057\u305f\u3002\n\n\n```java\n\t\tPoolingHttpClientConnectionManager poolingmgr = new PoolingHttpClientConnectionManager(\n\t\t\t\tRegistryBuilder.<ConnectionSocketFactory> create().build(),\n\t\t\t\tnull, null,\n\t\t\t\th -> {\n\t\t\t\t\treturn new InetAddress[] { null };//Mock\u30bd\u30b1\u30c3\u30c8\u3067\u306f\u4f7f\u3063\u3066\u306a\u3044\u306e\u3067null\u304c1\u3064\u3042\u308b\u914d\u5217\u3092\u8fd4\u3059\u3002\n\t\t\t\t\t//\u5143\u306e\u30b3\u30fc\u30c9\n\t\t\t\t\t//return InetAddress.getAllByName(h);\n\t\t\t\t}, -1, TimeUnit.MILLISECONDS);\n\n\t\ttry (CloseableHttpClient client = HttpClientBuilder.create()\n\t\t\t\t.setConnectionManager(poolingmgr)\n\t\t\t\t.build()) {\n```\n\n# \u554f\u984c\u70b9\u2461\nGET\u30fbPOST\u306f\u52d5\u304d\u307e\u3059\u3002\n\u4ed6\u3082\u5927\u4f53\u52d5\u304f\u306e\u3067\u3059\u304c\u3001HttpRequest\u306e\u5b9f\u88c5\u30af\u30e9\u30b9\u305f\u3061\u306eHttpClient\u6a19\u6e96\u306e\u4e2d\u3067\u3001PATCH\u3060\u3051\u52d5\u304d\u307e\u305b\u3093\u3002\n\nDefaultBHttpServerConnection\u306e\u4e2d\u3092\u8ffd\u3063\u3066\u307f\u308b\u3068\u3001\nDefaultHttpRequestFactory#newHttpRequest\u3067PATCH\u3060\u3051\u306f\u3076\u3089\u308c\u3066\u3044\u307e\u3059\u3002RFC5789\u3060\u304b\u3089\u3067\u3059\u304b\uff1f\n\n## \u89e3\u6c7a\u7b56\nDefaultBHttpServerConnection\u751f\u6210\u3092\u4e0b\u8a18\u306e\u3088\u3046\u306b\u3059\u308b\u3053\u3068\u3067\u89e3\u6c7a\u3057\u307e\u3059\u3002\n\n```java\n\t\t//DefaultHttpRequestFactory\u306fPATCH\u306b\u5bfe\u5fdc\u3057\u3066\u3044\u306a\u3044\u306e\u3067\u62e1\u5f35\u3059\u308b\u3002\n\t\tHttpMessageParserFactory<HttpRequest> parserFactory = (buffer, constraints) -> {\n\t\t\treturn new DefaultHttpRequestParser(buffer, BasicLineParser.INSTANCE, new DefaultHttpRequestFactory() {\n\n\t\t\t\t@Override\n\t\t\t\tpublic HttpRequest newHttpRequest(RequestLine requestline) throws MethodNotSupportedException {\n\t\t\t\t\tString method = requestline.getMethod();\n\t\t\t\t\tif (\"PATCH\".equals(method)) {\n\t\t\t\t\t\treturn new BasicHttpEntityEnclosingRequest(requestline);\n\t\t\t\t\t}\n\t\t\t\t\treturn super.newHttpRequest(requestline);\n\t\t\t\t}\n\n\t\t\t}, constraints);\n\t\t};\n\n\t\t//DefaultBHttpServerConnection\u751f\u6210\n\t\tDefaultBHttpServerConnection connection = new DefaultBHttpServerConnectionFactory(null, parserFactory, null)\n\t\t\t\t.createConnection(socket);\n```\n\n\n---\n\n\u3060\u3044\u3076\u30cd\u30b8\u8fbc\u307e\u306a\u3044\u3068\u3001\u52d5\u304b\u306a\u3044\u306e\u3067\u30c6\u30b9\u30c8\u7528\u3067\u5229\u7528\u3059\u308b\u306b\u306f\u672c\u5b9f\u88c5\u3082\u5de5\u592b\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u305d\u3046\u3067\u3059\u3002\u3002\u3002\n\n\u3082\u3063\u3068\u7c21\u5358\u306a\u65b9\u6cd5\u306f\u306a\u3044\u306e\u304b\u306a\uff1f\n\n\n", "tags": ["HttpClient", "Apache", "Java", "HTTP"]}