{"context": "2017\u5e74\u306b\u30ea\u30ea\u30fc\u30b9\u3055\u308c\u308b\u65b0\u3057\u3044\u30d0\u30fc\u30b8\u30e7\u30f3\u306eAndroid\u3067\u306fOS\u306e\u6a19\u6e96\u6a5f\u80fd\u3068\u3057\u3066\u3001A2DP\u306eaptX\u3001aptX-HD\u3001LDAC\u3001AAC\u304c\u30b5\u30dd\u30fc\u30c8\u3055\u308c\u308b\u307f\u305f\u3044\u3067\u3059\u3002\n\u305d\u3046\u8003\u3048\u308b\u6839\u62e0\u3068\u3057\u3066\u306f\u30012017\u5e74\uff11\u6708\u3054\u308d\u306bAndroid\u306eBluetooth\u30d7\u30ed\u30c8\u30b3\u30eb\u30b9\u30bf\u30c3\u30af\u306bA2DP\u306eaptX\u3001aptX-HD\u3001LDAC\u3001AAC\u30b5\u30dd\u30fc\u30c8\u3059\u308b\u30b3\u30fc\u30c9\u304c\u8ffd\u52a0\u3055\u308c\u307e\u3057\u305f\u3002\n\u3067\u3082\u3001\u5b9f\u969b\u306e\u7aef\u672b\u306b\u642d\u8f09\u3055\u308c\u308b\u304b\u3069\u3046\u304b\u306f\u3001\u7aef\u672b\u30d9\u30f3\u30c0\u6bce\u306bCODEC\u306e\u30e9\u30a4\u30bb\u30f3\u30b9\u5951\u7d04\u304c\u5fc5\u8981\u306b\u306a\u308b\u3093\u3058\u3083\u306a\u3044\u306e\u304b\u306a\u3041\u3002\n2017-01\u306b\u306a\u3063\u3066\u3001\u30bd\u30cb\u30fc\u306eLDAC encoder\u306e\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9(libldac) \u304cAOSP\u306b\u8ffd\u52a0\u3055\u308c\u307e\u3057\u305f\u3002\u306a\u306e\u3067\u3001LDAC\u304c\u6b21\u306eAndroid\u306b\u6a19\u6e96\u642d\u8f09\u3055\u308c\u308b\u53ef\u80fd\u6027\u304c\u3042\u308b\u306e\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u3002\u7279\u8a31\u306f\u3069\u3046\u3059\u308b\u308b\u3093\u3060\u308d\u3002\n\nAndroid\u306eBluetooth\u30d7\u30ed\u30c8\u30b3\u30eb\u30b9\u30bf\u30c3\u30af\u3078\u306e\u30b3\u30fc\u30c9\u306e\u5909\u66f4\u70b9\n\naptX and aptX-HD\n\nIntegration of the aptX and aptX-HD codecs for A2DP source\nRenamed the aptX and aptX-HD shared libraries\nIntegration of the aptX and aptX-HD codecs for A2DP source\n\n        \"a2dp/a2dp_vendor_aptx.cc\",\n        \"a2dp/a2dp_vendor_aptx_hd.cc\",\n        \"a2dp/a2dp_vendor_aptx_encoder.cc\",\n        \"a2dp/a2dp_vendor_aptx_hd_encoder.cc\",\n\n\nLDAC\n\n\nIntegration of the LDAC codec for A2DP source \nIntegrated A2DP LDAC support with the LDAC encoder library\nIntegration of the LDAC codec for A2DP source\n\n        \"a2dp/a2dp_vendor_ldac.cc\",\n        \"a2dp/a2dp_vendor_ldac_encoder.cc\",\n\n\nAAC\n\nIntegration of the AAC codec for A2DP source\nIntegration of the AAC codec for A2DP source\n\n        \"a2dp/a2dp_aac.cc\",\n        \"a2dp/a2dp_aac_encoder.cc\",\n\n\nconfigure A2DP source CODEC\n\nAdd a mechanism for configuring the A2DP Source codecs\n\n\u3053\u306e\u30d1\u30c3\u30c1\u306e\u30b3\u30e1\u30f3\u30c8\u304c\u307e\u3068\u307e\u3063\u3066\u3044\u308b\u306e\u3067\u5f15\u7528\u3057\u3068\u304d\u307e\u3059\u3002\nAdd a mechanism for configuring the A2DP Source codecs\n\n* Codec config internal abstraction:\n - Add new classes A2dpCodecConfig and A2dpCodecs that (will)\n   encapsulate all codec-related APIs\n - Add unit tests for the above two classes\n - Add method A2dpCodecConfig.buildCodecConfig(), and use it when\n   creating the codec configuration instead of A2DP_InitSource2SinkCodec().\n   The new method can build the codec config by taking into account\n   optional user codec-related configuration preferences.\n - Use the A2DP codec config API from the hardware/libhardware bt_av.h API\n - Replace enum tA2DP_CODEC_SEP_INDEX with btav_a2dp_codec_index_t\n   from the bt_av.h API\n - Move codec-specific functions from stack/include/a2dp_api.h\n   and stack/a2dp/a2dp_api.cc to stack/include/a2dp_codec_api.h\n   and stack/a2dp/a2dp_codec_config.cc\n - Create a new base class A2dpCodecConfig() to hold some of the\n   codec-related state, and implement the corresponding A2dpCodecConfigSbc\n   and A2dpCodecConfigSbcSink derived classes.\n - Move A2DP spec-related constants from stack/include/a2dp_api.h\n   to stack/include/a2dp_constants.h\n - Move A2DP-related error codes from stack/include/a2dp_api.h\n   to stack/include/a2dp_error_codes.h\n - Move A2DP SBC spec-related constants from stack/include/a2dp_sbc.h to\n   stack/include/a2dp_sbc_constants.h\n\n* Implement the backend mechanism for handling user (re)configuration of\n  A2DP Source codecs as requested via the JNI API calls.\n  Also, any codec changes are reported back via JNI API callbacks.\n  The current audio parameter selection (sample rate, bits per\n  sample, channel mode - mono/stereo) is as follows:\n  - If the user selected parameters are acceptable (based on\n    local codec capability and the remote Sink capability),\n    those parameters are used.\n  - Else if the Audio HAL's requested parameters are acceptable,\n    those are used.\n  - Else if the default settings are acceptable, those are used.\n  - Else use the best match among the local and the remote device's\n    capabilities.\n\n* Update the mechanism for handling OTA configuration requests from the\n  remote Sink device.\n  - The OTA prefered codec configuration is ignored if the current\n  codec configuration contains explicit user configuration, or if the\n  codec configuration for the same codec contains explicit user\n  configuration.\n\n* Refactor the Audio HAL <-> Bluetooth audio parameter negotiation\n  mechanism:\n  The new mechanism gives some flexibility to the Media Framework to\n  choose the appropriate audio format (sample rate, bits per sample,\n  and channel mode - mono/stereo), and at the same time allows\n  the Bluetooth stack to double-check / overwrite the choice.\n - out_get_parameters() on the Audio HAL side asks the Bluetooth stack\n   for all currently supported formats (for the current codec),\n   and returns them to the Media Framework: sample rate, bits per sample,\n   and channel mode (mono/stereo).\n - The first time adev_open_output_stream() is called on the Audio HAL,\n   it asks the Bluetooth stack about the audio format currently selected\n   by the Bluetooth stack (based on codec negotiation with the Sink device,\n   and User Configuration).\n - The second time adev_open_output_stream() is called on the Audio HAL,\n   its \"config\" will eventually contain the audio format selected\n   internally by the Media Framework. That audio format is sent to the\n   Bluetooth stack.\n   If that format is acceptable to the Bluetooth stack, the Bluetooth\n   stack will reconfigure itself internally, and will respond back with\n   those values. Otherwise, it will respond back with the values that\n   should be used instead.\n\n* Misc other fixes and refactoring:\n - Fix the BTA handling of A2DP codec reconfiguration\n - Fix a bug in the implementation of A2DP_BitsSet(), and add the\n   approriate unit test. Also, fix the code that was using this function\n   incorrectly.\n - The SBC encoder is compiled as a separate library\n - Replace leftover usage of \"false\" with \"FALSE\" for macros, and\n   vice-versa for variable values.\n\n\n\u30e9\u30a4\u30d6\u30e9\u30ea\n\nlibaptX_encoder.so\nlibaptXHD_encoder.so\nlibldacBT_enc.so\nlibFraunhoferAAC.so\n\nldac\u30e9\u30a4\u30d6\u30e9\u30ea\u306e\u4f7f\u3044\u65b9\u306b\u3064\u3044\u3066\u300cLDAC\u30a8\u30f3\u30b3\u30fc\u30c0\u3092\u4f7f\u3063\u3066\u307f\u305f\u300d\u306b\u66f8\u304d\u307e\u3057\u305f\u3002\n\n\u8ffd\u8a18\nAAC\u3082\u8ffd\u52a0\u3055\u308c\u305f\u306e\u3067\u8a18\u8f09\u3057\u305f\u3002 (2017-01-28)\n2017\u5e74\u306b\u30ea\u30ea\u30fc\u30b9\u3055\u308c\u308b\u65b0\u3057\u3044\u30d0\u30fc\u30b8\u30e7\u30f3\u306eAndroid\u3067\u306fOS\u306e\u6a19\u6e96\u6a5f\u80fd\u3068\u3057\u3066\u3001A2DP\u306eaptX\u3001aptX-HD\u3001LDAC\u3001AAC\u304c\u30b5\u30dd\u30fc\u30c8\u3055\u308c\u308b\u307f\u305f\u3044\u3067\u3059\u3002\n\n\u305d\u3046\u8003\u3048\u308b\u6839\u62e0\u3068\u3057\u3066\u306f\u30012017\u5e74\uff11\u6708\u3054\u308d\u306bAndroid\u306eBluetooth\u30d7\u30ed\u30c8\u30b3\u30eb\u30b9\u30bf\u30c3\u30af\u306bA2DP\u306eaptX\u3001aptX-HD\u3001LDAC\u3001AAC\u30b5\u30dd\u30fc\u30c8\u3059\u308b\u30b3\u30fc\u30c9\u304c\u8ffd\u52a0\u3055\u308c\u307e\u3057\u305f\u3002\n\n\u3067\u3082\u3001\u5b9f\u969b\u306e\u7aef\u672b\u306b\u642d\u8f09\u3055\u308c\u308b\u304b\u3069\u3046\u304b\u306f\u3001\u7aef\u672b\u30d9\u30f3\u30c0\u6bce\u306bCODEC\u306e\u30e9\u30a4\u30bb\u30f3\u30b9\u5951\u7d04\u304c\u5fc5\u8981\u306b\u306a\u308b\u3093\u3058\u3083\u306a\u3044\u306e\u304b\u306a\u3041\u3002\n\n2017-01\u306b\u306a\u3063\u3066\u3001\u30bd\u30cb\u30fc\u306eLDAC encoder\u306e\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9([libldac](https://android.googlesource.com/platform/external/libldac/)) \u304cAOSP\u306b\u8ffd\u52a0\u3055\u308c\u307e\u3057\u305f\u3002\u306a\u306e\u3067\u3001LDAC\u304c\u6b21\u306eAndroid\u306b\u6a19\u6e96\u642d\u8f09\u3055\u308c\u308b\u53ef\u80fd\u6027\u304c\u3042\u308b\u306e\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u3002\u7279\u8a31\u306f\u3069\u3046\u3059\u308b\u308b\u3093\u3060\u308d\u3002\n\n# Android\u306eBluetooth\u30d7\u30ed\u30c8\u30b3\u30eb\u30b9\u30bf\u30c3\u30af\u3078\u306e\u30b3\u30fc\u30c9\u306e\u5909\u66f4\u70b9\n\n## aptX and aptX-HD\n* [Integration of the aptX and aptX-HD codecs for A2DP source](https://android.googlesource.com/platform/system/bt/+/3a3ec66a1bb7f5c99b17239021d6d184a3abd4ee)\n* [Renamed the aptX and aptX-HD shared libraries](https://android.googlesource.com/platform/system/bt/+/d43a901c579ef08a1b5d7cfe18f759aad0a14f1a)\n* [Integration of the aptX and aptX-HD codecs for A2DP source](https://android.googlesource.com/platform/hardware/libhardware/+/b2543a2f8eedb9f4cab176d0b75c27c363f4e0de)\n\n```\n        \"a2dp/a2dp_vendor_aptx.cc\",\n        \"a2dp/a2dp_vendor_aptx_hd.cc\",\n        \"a2dp/a2dp_vendor_aptx_encoder.cc\",\n        \"a2dp/a2dp_vendor_aptx_hd_encoder.cc\",\n```\n\n## LDAC\n* [Integration of the LDAC codec for A2DP source](https://android.googlesource.com/platform/system/bt/+/8e419b13ecb1e33aeb785d0221bacc5744e51113) \n* [Integrated A2DP LDAC support with the LDAC encoder library](https://android.googlesource.com/platform/system/bt/+/d556b752bd9f4219aa5b02c12ab1507b9f6e186b)\n* [Integration of the LDAC codec for A2DP source](https://android.googlesource.com/platform/hardware/libhardware/+/be1bfcea291218cb20fb1123752932da0db9e57d)\n\n```\n        \"a2dp/a2dp_vendor_ldac.cc\",\n        \"a2dp/a2dp_vendor_ldac_encoder.cc\",\n```\n\n## AAC\n* [Integration of the AAC codec for A2DP source](https://android.googlesource.com/platform/system/bt/+/d5f4960b425ac84cc7a9fd699f39c06869ce2666)\n* [Integration of the AAC codec for A2DP source](https://android.googlesource.com/platform/hardware/libhardware/+/f9b17fed4b40039681b9034f53500797fa7d51fa)\n\n```\n        \"a2dp/a2dp_aac.cc\",\n        \"a2dp/a2dp_aac_encoder.cc\",\n```\n\n## configure A2DP source CODEC\n* [Add a mechanism for configuring the A2DP Source codecs](https://android.googlesource.com/platform/system/bt/+/5ce0116fbf5b530d5b93f11312096eade1021c1e)\n\n\u3053\u306e\u30d1\u30c3\u30c1\u306e\u30b3\u30e1\u30f3\u30c8\u304c\u307e\u3068\u307e\u3063\u3066\u3044\u308b\u306e\u3067\u5f15\u7528\u3057\u3068\u304d\u307e\u3059\u3002\n\n```\nAdd a mechanism for configuring the A2DP Source codecs\n\n* Codec config internal abstraction:\n - Add new classes A2dpCodecConfig and A2dpCodecs that (will)\n   encapsulate all codec-related APIs\n - Add unit tests for the above two classes\n - Add method A2dpCodecConfig.buildCodecConfig(), and use it when\n   creating the codec configuration instead of A2DP_InitSource2SinkCodec().\n   The new method can build the codec config by taking into account\n   optional user codec-related configuration preferences.\n - Use the A2DP codec config API from the hardware/libhardware bt_av.h API\n - Replace enum tA2DP_CODEC_SEP_INDEX with btav_a2dp_codec_index_t\n   from the bt_av.h API\n - Move codec-specific functions from stack/include/a2dp_api.h\n   and stack/a2dp/a2dp_api.cc to stack/include/a2dp_codec_api.h\n   and stack/a2dp/a2dp_codec_config.cc\n - Create a new base class A2dpCodecConfig() to hold some of the\n   codec-related state, and implement the corresponding A2dpCodecConfigSbc\n   and A2dpCodecConfigSbcSink derived classes.\n - Move A2DP spec-related constants from stack/include/a2dp_api.h\n   to stack/include/a2dp_constants.h\n - Move A2DP-related error codes from stack/include/a2dp_api.h\n   to stack/include/a2dp_error_codes.h\n - Move A2DP SBC spec-related constants from stack/include/a2dp_sbc.h to\n   stack/include/a2dp_sbc_constants.h\n\n* Implement the backend mechanism for handling user (re)configuration of\n  A2DP Source codecs as requested via the JNI API calls.\n  Also, any codec changes are reported back via JNI API callbacks.\n  The current audio parameter selection (sample rate, bits per\n  sample, channel mode - mono/stereo) is as follows:\n  - If the user selected parameters are acceptable (based on\n    local codec capability and the remote Sink capability),\n    those parameters are used.\n  - Else if the Audio HAL's requested parameters are acceptable,\n    those are used.\n  - Else if the default settings are acceptable, those are used.\n  - Else use the best match among the local and the remote device's\n    capabilities.\n\n* Update the mechanism for handling OTA configuration requests from the\n  remote Sink device.\n  - The OTA prefered codec configuration is ignored if the current\n  codec configuration contains explicit user configuration, or if the\n  codec configuration for the same codec contains explicit user\n  configuration.\n\n* Refactor the Audio HAL <-> Bluetooth audio parameter negotiation\n  mechanism:\n  The new mechanism gives some flexibility to the Media Framework to\n  choose the appropriate audio format (sample rate, bits per sample,\n  and channel mode - mono/stereo), and at the same time allows\n  the Bluetooth stack to double-check / overwrite the choice.\n - out_get_parameters() on the Audio HAL side asks the Bluetooth stack\n   for all currently supported formats (for the current codec),\n   and returns them to the Media Framework: sample rate, bits per sample,\n   and channel mode (mono/stereo).\n - The first time adev_open_output_stream() is called on the Audio HAL,\n   it asks the Bluetooth stack about the audio format currently selected\n   by the Bluetooth stack (based on codec negotiation with the Sink device,\n   and User Configuration).\n - The second time adev_open_output_stream() is called on the Audio HAL,\n   its \"config\" will eventually contain the audio format selected\n   internally by the Media Framework. That audio format is sent to the\n   Bluetooth stack.\n   If that format is acceptable to the Bluetooth stack, the Bluetooth\n   stack will reconfigure itself internally, and will respond back with\n   those values. Otherwise, it will respond back with the values that\n   should be used instead.\n\n* Misc other fixes and refactoring:\n - Fix the BTA handling of A2DP codec reconfiguration\n - Fix a bug in the implementation of A2DP_BitsSet(), and add the\n   approriate unit test. Also, fix the code that was using this function\n   incorrectly.\n - The SBC encoder is compiled as a separate library\n - Replace leftover usage of \"false\" with \"FALSE\" for macros, and\n   vice-versa for variable values.\n```\n\n## \u30e9\u30a4\u30d6\u30e9\u30ea\n\n* libaptX_encoder.so\n* libaptXHD_encoder.so\n* libldacBT_enc.so\n* libFraunhoferAAC.so\n\nldac\u30e9\u30a4\u30d6\u30e9\u30ea\u306e\u4f7f\u3044\u65b9\u306b\u3064\u3044\u3066\u300c[LDAC\u30a8\u30f3\u30b3\u30fc\u30c0\u3092\u4f7f\u3063\u3066\u307f\u305f](http://qiita.com/eggman/items/fc6ba6844c71a1df305a)\u300d\u306b\u66f8\u304d\u307e\u3057\u305f\u3002\n\n\n\n# \u8ffd\u8a18\n\nAAC\u3082\u8ffd\u52a0\u3055\u308c\u305f\u306e\u3067\u8a18\u8f09\u3057\u305f\u3002 (2017-01-28)\n", "tags": ["Android", "bluetooth"]}