{"tags": ["C++", "C++11", "C++14", "boost", "Boost.Range"], "context": "Boost.Range\u304c\u6d41\u884c\u3063\u3066\u3044\u308b\u6c17\u304c\u3059\u308b\u306e\u3067\u89e3\u8aac\u3057\u307e\u3059\u3002\u305d\u308c\u305e\u308c\u306e\u7d30\u304b\u3044\u6a5f\u80fd\u306b\u3064\u3044\u3066\u306f\u30ea\u30d5\u30a1\u30ec\u30f3\u30b9\u3092\u898b\u3066\u306d\u3002\u3053\u306e\u8a18\u4e8b\u306fBoost.Range\u304c\u5206\u304b\u3089\u306a\u3044\u4eba\u3001\u7279\u306b\u5168\u304f\u77e5\u3089\u306a\u3044\u5411\u3051\u306e\u8a18\u4e8b\u306b\u306a\u3063\u3066\u3044\u308b\u305f\u3081\u3001boost\u304c1\u30df\u30ea\u3082\u5206\u304b\u3089\u306a\u304f\u3066\u3082\u8aad\u3081\u308b\u8a18\u4e8b\u306b\u306a\u3063\u3066\u3044\u308b\u3064\u3082\u308a\u3067\u3059\u3002\u306a\u304a\u3001\u79c1\u304c\u3053\u306e\u8a18\u4e8b\u3092\u66f8\u304f\u4e0a\u3067\u4f7f\u7528\u3057\u305fBoost\u306e\u30d0\u30fc\u30b8\u30e7\u30f3\u306f1.60.0\u3067\u3059\u3002\u30ea\u30d5\u30a1\u30ec\u30f3\u30b9\u306f\u4ee5\u4e0b\u3067\u3059\u3002URL\u3092\u3061\u3087\u3063\u3068\u3044\u3058\u308c\u3070\u597d\u304d\u306a\u30d0\u30fc\u30b8\u30e7\u30f3\u306b\u98db\u3079\u308b\u3068\u601d\u3044\u307e\u3059\u3002\nhttp://www.boost.org/doc/libs/1_60_0/libs/range/doc/html/\n\u306a\u304a\u3001\u6a19\u6e96\u30e9\u30a4\u30d6\u30e9\u30ea\u306e\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u30d8\u30c3\u30c0\u3082\u53c2\u7167\u306e\u3053\u3068\u3002\nhttp://en.cppreference.com/w/cpp/algorithm\n\nBoost.Range\u3068\u306f\n\u30a4\u30c6\u30ec\u30fc\u30bf\u5bfe(iterator pair)\u3068\u3044\u3046\u30a4\u30c7\u30a3\u30aa\u30e0\u3092\u5fdc\u7528\u767a\u5c55\u3055\u305b\u305fboost\u306e\u30e9\u30a4\u30d6\u30e9\u30ea\u3002\u30a4\u30c6\u30ec\u30fc\u30bf\u5bfe\u3068\u3044\u3046\u306e\u306f\u3001\u6a19\u6e96\u30e9\u30a4\u30d6\u30e9\u30ea\u3067\u3082\u975e\u5e38\u306b\u3088\u304f\u4f7f\u308f\u308c\u308b\u30a4\u30c7\u30a3\u30aa\u30e0\u3067\u3059\u3002\niterator pair\u306b\u3064\u3044\u3066\u306fc++ more idioms\u306b\u8a73\u3057\u3044\u3067\u3059\u3002\nhttps://en.wikibooks.org/wiki/More_C%2B%2B_Idioms/Iterator_Pair\nstd::fill(begin(vec), end(vec), // \u3053\u308c\u3068\u304b\n  0xff);\nstd::copy(begin(vec), end(vec), // \u3053\u308c\u3068\u304b\n  std::ostream_iterator<int>(std::cout));\nstd::list<int> list(begin(vec), end(vec)); // \u3053\u308c\u306e\u3053\u3068\n\n\u30b3\u30f3\u30c6\u30ca\u305d\u306e\u3082\u306e\u3092\u6e21\u3055\u305a\u306b\u3001begin\u3068end\u3068\u3044\u3046\u30a4\u30c6\u30ec\u30fc\u30bf\u306e\u5bfe\u3092\u4f7f\u3063\u3066\u30b3\u30f3\u30c6\u30ca\u3067\u306f\u306a\u304f\"\u7bc4\u56f2\"\u3092\u3084\u308a\u53d6\u308a\u3059\u308b\u3053\u3068\u3067\u6c4e\u7528\u6027\u3092\u4e0a\u3052\u308b\u30a4\u30c7\u30a3\u30aa\u30e0\u3067\u3059\u3002\u3067\u3082\u6b63\u76f4\u3001\u9762\u5012\u304f\u3055\u3044\u3002\n#include <iterator> // \u5fc5\u9808\n\nusing std::begin; using std::end; // ADL\u306b\u3088\u3063\u3066\u547c\u3073\u51fa\u3055\u308c\u306a\u3051\u308c\u3070\u306a\u3089\u306a\u3044\u70ba\nbegin(container); end(container); // container\u304c2\u56de\u3082\u767b\u5834\u3059\u308b\n\n\u3072\u3069\u3044\u8a71\u3067\u3059\u304c\u3001\u4e0a\u306e\u3088\u3046\u306b\u66f8\u304b\u306a\u3051\u308c\u3070\u306a\u308a\u307e\u305b\u3093\u3002STL\u306e\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u95a2\u6570\u306f\u6c4e\u7528\u6027\u306b\u512a\u308c\u3001\u9ad8\u901f\u3067\u3001\u554f\u984c\u306e\u89e3\u6c7a\u80fd\u529b\u3082\u9ad8\u3044\u3067\u3059\u304c\u3001\u30dc\u30b3\u30dc\u30b3\u306b\u7f75\u3089\u308c\u308b\u3053\u3068\u3082\u3042\u308a\u307e\u3059\u3002iterators must go\u306f\u6709\u540d\u3067\u3059\u306d\u3002iterators must go\u306f\u5b8c\u5168\u306b\u548c\u8a33\u3059\u308b\u306e\u306f\u96e3\u3057\u3044\u3067\u3059\u304c\u6d41\u3057\u8aad\u307f\u3059\u308b\u306e\u306f\u305d\u3046\u96e3\u3057\u304f\u306a\u3044\u306e\u3067\u305c\u3072\u4e00\u8aad\u3059\u308b\u3053\u3068\u3092\u304a\u3059\u3059\u3081\u3057\u307e\u3059\u3002\n\u305d\u3053\u3067Range\u3068\u3044\u3046\"\u7bc4\u56f2\"\u3068\u3044\u3046\u6982\u5ff5\u3092\u8868\u3059\u30af\u30e9\u30b9\u304c\u767b\u5834\u3059\u308b\u3068\u3044\u3046\u306e\u306f\u305d\u3093\u306a\u306b\u9769\u65b0\u7684\u306a\u8a71\u3067\u306f\u306a\u3044\u3068\u601d\u3044\u307e\u3059\u3002begin\u3068end\u306e\u30a4\u30c6\u30ec\u30fc\u30bf\u306e\u30da\u30a2\u3092\u4fdd\u6301\u3059\u308b\u30af\u30e9\u30b9\u306b\u3001empty\u3084begin, end\u306a\u3069\u306e\u30e1\u30f3\u30d0\u95a2\u6570\u3092\u6301\u305f\u305b\u3001\u30b3\u30f3\u30c6\u30ca\u3088\u308a\u3082\u7de9\u3044concept\u306e\u5143\u3067\u4f7f\u3048\u308b\u3001\u305d\u3093\u306a\u7bc4\u56f2\u3092\u6271\u3046Boost.Range\u306e\u6a5f\u80fd\u3001\u9b45\u529b\u3001\u305d\u3057\u3066\u6d41\u884c\u308a\uff1f\u306e\u30d1\u30a4\u30d7\u30e9\u30a4\u30f3\u8a18\u6cd5\u306b\u3064\u3044\u3066\u3082\u89e3\u8aac\u3057\u305f\u3044\u3068\u601d\u3044\u307e\u3059\u3002\n\nBoost.Range.Algorithms\nRange\u3092\u624b\u306b\u5165\u308c\u3066\u307e\u305a\u601d\u3044\u3064\u304f\u306e\u306f\u3001\u4e0a\u306e\u9762\u5012\u304f\u3055\u3044\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u95a2\u6570\u306e\u5f15\u6570\u3092Range\u306b\u3057\u3066\u3057\u307e\u3046\u3053\u3068\u3067\u3059\u306d\u3002\u3053\u308c\u3060\u3051\u3067\u3082\u3001\u3060\u3044\u3076\u697d\u3061\u3093\u306b\u306a\u308a\u307e\u3059\u3002Boost.Algorithm\u3068\u3054\u3063\u3061\u3083\u306b\u3057\u306a\u3044\u3088\u3046\u306b\u6c17\u3092\u4ed8\u3051\u3066\u304f\u3060\u3055\u3044\u3002\n\u6a5f\u80fd\u3054\u3068\u306b\u30d8\u30c3\u30c0\u304c\u7528\u610f\u3055\u308c\u3066\u3044\u307e\u3059\u3002\u4f7f\u3044\u305f\u3044\u3082\u306e\u3060\u3051\u30a4\u30f3\u30af\u30eb\u30fc\u30c9\u3057\u307e\u3057\u3087\u3046\u3002\nhttp://www.boost.org/doc/libs/1_60_0/libs/range/doc/html/range/headers/algorithm.html\n#include <iterator>\n#include <vector>\n#include <boost/range/algorithm/copy.hpp>\n\nint main()\n{\n  std::vector<int> vec { /* initialize */ };\n  boost::copy(vec, std::ostream_iterator<int>(std::cout));\n}\n\n\u306f\u3044\u3002\u8a00\u3044\u305f\u3044\u3053\u3068\u306f\u5206\u304b\u308a\u307e\u3059\u3002\u30d8\u30c3\u30c0\u540d\u304c\u9577\u3044\u3002\u30b3\u30f3\u30d1\u30a4\u30eb\u6642\u9593\u3082\u9577\u3044\u6c17\u304c\u3059\u308b\u3002\u3066\u3044\u3046\u304b\u3053\u306e\u304f\u3089\u3044\u6a19\u6e96\u3067\u3067\u304d\u306a\u304b\u3063\u305f\u3053\u3068\u304c\u7591\u554f\u3002\u3044\u3048\u3044\u3048\u3001\u307e\u3060\u89e6\u308a\u3067\u3059\u304b\u3089\u3001\u307e\u3060\u307e\u3060\u5e8f\u306e\u53e3\u3067\u3059\u3002\u3053\u308c\u3067\u3082\u7d50\u69cb\u697d\u306b\u306a\u3063\u305f\u3068\u601d\u3044\u307e\u3059\u3051\u3069\u306d\u3002\u3055\u3042\u3001\u6b21\u884c\u304d\u307e\u3057\u3087\u3046\u3002\n\nBoost.Range.Utilities\nRange\u304c\u7bc4\u56f2\u3092\u8868\u3059\u306a\u3089\u3001\u4f55\u3082begin\u3068end\u306e\u30da\u30a2\u3058\u3083\u306a\u304f\u3066\u3082\u3044\u3044\u3088\u306d\u3002begin+2 \uff5e end-8 \u306e\u7bc4\u56f2\u3060\u3063\u3066\u7bc4\u56f2\u3058\u3083\u3093\u3002\u305d\u3093\u306a\u3042\u306a\u305f\u306e\u4e59\u5973\u5fc3\u3092\u308f\u3057\u3065\u304b\u307f\u306b\u3059\u308b\u306e\u304c\u3053\u306eBoost.Range.Utilities\u3067\u3059\u3002\nUtilities\u306b\u306f2\u3064\u306e\u30af\u30e9\u30b9\u3001\u3059\u306a\u308f\u3061iterator_range\u3068sub_range\u306e2\u3064\u304c\u7528\u610f\u3055\u308c\u3066\u3044\u307e\u3059\u3002\niterator_range\u306f\u30a4\u30c6\u30ec\u30fc\u30bf\u306e\u578b\u3092\u6307\u5b9a\u3057\u3066\u3001\u305d\u306e\u30a4\u30c6\u30ec\u30fc\u30bf\u306e\u7bc4\u56f2\u3092\u793a\u3059\u30af\u30e9\u30b9\u3067\u3059\u3002sub_range\u306f\u30b3\u30f3\u30c6\u30ca\u306e\u578b\u3092\u6307\u5b9a\u3057\u3066\u3001\u305d\u306e\u30b3\u30f3\u30c6\u30ca\u306e\u4e00\u90e8\u306e\u7bc4\u56f2\u3092\u793a\u3059\u30af\u30e9\u30b9\u3067\u3059\u3002\u4fbf\u5229\u306e\u70ba\u306b\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u5f15\u6570\u306e\u9055\u3046\u3053\u306e\u4e8c\u3064\u304c\u7528\u610f\u3055\u308c\u3066\u3044\u307e\u3059\u304c\u3001\u5b9f\u969b\u306b\u306f\u3053\u308c\u3089\u306f\u540c\u3058\u5b9f\u88c5\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u3002\n#include <boost/range/iterator_range.hpp>\n#include <boost/range/sub_range.hpp>\n#include <vector>\n\nint main()\n{\n  std::vector<int> vec { /* initialize */ };\n  boost::sub_range<std::vector<char>> sub(vec); // vec\u306e\u6700\u521d\u304b\u3089\u6700\u5f8c\u307e\u3067\n  boost::sub_range<std::vector<char>> sub2(begin(vec)+2, begin(vec)+10); // vec\u306e2\u756a\u76ee\u304b\u30899\u756a\u76ee\u307e\u3067\u3092\u8868\u3059\n  boost::iterator_range<std::istream_iterator<int>> sub3(\n      std::istream_iterator<int>(std::cin),\n      std::istream_iterator<int>()); // \u30a4\u30c6\u30ec\u30fc\u30bf\u5bfe\u304c\u57fa\u306b\u306a\u3063\u3066\u3044\u308b\u304b\u3089\u3001\u3053\u3046\u3044\u3046\u5fdc\u7528\u3082\u52b9\u304f\n}\n\n\nBoost.Range.Adaptors\n\u3053\u308c\u304c\u672c\u984c\u3067\u3057\u3087\u3046\u304b\u3002\u304b\u306a\u308a\u5fdc\u7528\u7684\u306a\u8a71\u306b\u306a\u3063\u3066\u3057\u307e\u3044\u307e\u3059\u3002\u3053\u306e\u30e9\u30a4\u30d6\u30e9\u30ea\u306fC++\u3067\u30d1\u30a4\u30d7\u30e9\u30a4\u30f3\u8a18\u6cd5\u306e\u3082\u306e\u304c\u4f7f\u3048\u308b\u3088\u3046\u306b\u306a\u308b\u30e9\u30a4\u30d6\u30e9\u30ea\u3067\u3001\u304b\u306a\u308a\u9ed2\u9b54\u8853\u306e\u69d8\u76f8\u3092\u5448\u3057\u305f\u898b\u305f\u76ee\u3067\u306f\u3042\u308a\u307e\u3059\u304c\u3068\u3063\u3066\u3082\u5b9f\u7528\u7684\u306a\u5f62\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u3002\u3057\u304b\u3057\u51fa\u5165\u529b\u30b9\u30c8\u30ea\u30fc\u30e0\u3068\u540c\u3058\u3088\u3046\u306b\u6f14\u7b97\u5b50\u306e\u30aa\u30fc\u30d0\u30fc\u30ed\u30fc\u30c9\u3092\u60aa\u7528\u3057\u3066\u3044\u307e\u3059\u3002\n\u3053\u308c\u3082\u30d8\u30c3\u30c0\u304c\u305d\u308c\u305e\u308c\u7528\u610f\u3055\u308c\u3066\u3044\u308b\u306e\u3067\u3001\u81ea\u5206\u304c\u4f7f\u3046\u3082\u306e\u3092\u30a4\u30f3\u30af\u30eb\u30fc\u30c9\u3057\u307e\u3057\u3087\u3046\u3002\nhttp://www.boost.org/doc/libs/1_60_0/libs/range/doc/html/range/headers/adaptors.html\nboost::irange\u306fstd::iota\u306erange\u7248\u306e\u3088\u3046\u306a\u3082\u306e\u3067\u3001\u6307\u5b9a\u3057\u305f\u6570\u5024\u304b\u3089\u6570\u5024\u307e\u3067\u306erange\u3092\u4f5c\u6210\u3057\u3066\u304f\u308c\u308b\u95a2\u6570\u3067\u3059\u3002\n#include <vector>\n#include <boost/range/irange.hpp>\n#include <boost/range/adaptor/strided.hpp>\n#include <boost/range/adaptor/transformed.hpp>\n\nint main()\n{\n  // \u9069\u5f53\u306a\u6570\u5217\u3092\u4f5c\u3063\u3066\u307f\u308b\u3002\n  boost::copy(\n    boost::irange(0, 100) // 0\uff5e99\u306e\u8981\u7d20\u306erange\u3092\u4f5c\u6210; 0, 1, 2, 3, ..., 99\n      | boost::adaptors::strided(2) // \u8981\u7d20\u30921\u3064\u98db\u3070\u3057\u306b\u3059\u308b; 0, 2, 4, 6, ..., 98\n      | boost::adaptors::transformed([](int n) { return n*2; }), // \u8981\u7d20\u3092\u5168\u30662\u500d\u306b\u3059\u308b; 0, 4, 8, 12, ..., 196\n    std::ostream_iterator<int>(std::cout, \" \"));\n  // output: 0, 4, 8, 12, ..., 196\n\n\n  // \u6587\u5b57\u5217\u3092\u4f5c\u3063\u3066\u307f\u308b\n  std::string str;\n  boost::copy(\n    boost::irange<char>('a', 'z'+1) // 'a'\uff5e'z'\u306e\u8981\u7d20\u306erange\u3092\u4f5c\u6210; abcd...z\n      | boost::adaptors::transformed([](char c) { return c - ('a' - 'A'); }) // \u8981\u7d20\u3092\u5168\u3066\u5927\u6587\u5b57\u306b\u3059\u308b; ABCD...Z\n      | boost::adaptors::reversed, // \u8981\u7d20\u3092\u9006\u9806\u306b\u3059\u308bZYXW...A\n    std::back_inserter(str));\n  std::cout << str << std::endl; // output: ZYXW...A\n}\n\n\u3061\u306a\u307f\u306b\u3001adaptor\u306f\u5fc5\u305a\u30d1\u30a4\u30d7\u306b\u4f7f\u3046\u3082\u306e\u3068\u95a2\u6570\u3068\u3057\u3066\u4f7f\u3046\u3082\u306e\u3068\u304c\u3042\u308a\u3001boost::adaptors::transform\u306b\u5bfe\u3059\u308bboost::adaptors::transformed\u3001boost::adaptors::stride\u306b\u5bfe\u3059\u308bboost::adaptors::strided\u306e\u3088\u3046\u306b\u5bfe\u5fdc\u95a2\u4fc2\u306b\u3042\u308a\u307e\u3059\u3002\n\nadaptor\u3092\u81ea\u4f5c\u3057\u3066\u307f\u3088\u3046\n\u9ed2\u9b54\u8853\u306b\u898b\u3048\u307e\u3059\u304c\u5b9f\u306f\u305d\u3093\u306a\u306b\u96e3\u3057\u304f\u306a\u3044\u3067\u3059\u3002adaptor\u304c\u3069\u3046\u3084\u3063\u3066\u51fa\u6765\u3066\u3044\u308b\u306e\u304b\u3092\u77e5\u308b\u3053\u3068\u3067\u3044\u3056\u30b3\u30f3\u30d1\u30a4\u30eb\u30a8\u30e9\u30fc\u304c\u51fa\u3066\u3057\u307e\u3063\u305f\u6642\u306b\u3082\u5bfe\u51e6\u304c\u3057\u3084\u3059\u3044\u3067\u3059\u3002\u3068\u3044\u3046\u3053\u3068\u3067\u3001\u7c21\u5358\u306aadaptor\u3092\u81ea\u4f5c\u3057\u3066\u307f\u307e\u3057\u3087\u3046\u3002\u3053\u3053\u3067\u306ffor_eached\u3068\u3044\u3046\u3082\u306e\u3092\u4f5c\u3063\u3066\u307f\u307e\u3059\u3002\n\u5fc5\u305a\u5bfe\u306b\u306a\u308b\u3068\u3044\u3046\u6163\u7fd2\u3092\u5b88\u308b\u3053\u3068\u306b\u3057\u307e\u3059\u3002\u3068\u8a00\u3063\u3066\u3082\u3001for_each\u306a\u3089\u3082\u3046\u7247\u3063\u307d\u306f\u3042\u308b\u3093\u3067\u3059\u3051\u3069\u306d\u3002\nboost::for_each(range, [](value_type e) { std::cout << e; }); // \u666e\u901a\u306efor_each\nrange | for_eached([](value_type e) { std::cout << e; }); // pipe\u7528\u306efor_each\n\nstd::string str;\nboost::copy(\n  boost::irange<char>('a', 'z'+1)\n    | for_eached([](char e) { std::cout << e; }) // abcd...z\u3068\u6a19\u6e96\u51fa\u529b\u306b\u51fa\u529b\u3059\u308b\n    | boost::adaptors::transformed([](char c) { return c - ('a' - 'A'); })\n    | for_eached([](char e) { std::cout << e; }) // ABCD...Z\u3068\u6a19\u6e96\u51fa\u529b\u306b\u51fa\u529b\u3059\u308b\n    | boost::adaptors::reversed,\n  std::back_inserter(str));\n\n\u306a\u3093\u304b\u5fae\u5999\u3067\u3059\u304c\u3001\u307e\u3042\u3053\u3093\u306a\u3082\u306e\u3092\u4f5c\u308a\u305f\u3044\u3068\u601d\u3046\u308f\u3051\u3067\u3059\u3002\u57fa\u672c\u7684\u306b\u306f\u3001\u30bf\u30b0\u30c7\u30a3\u30b9\u30d1\u30c3\u30c1(tag dispatching)\u3068\u3044\u3046\u624b\u6cd5\u3092\u4f7f\u3044\u307e\u3059\u3002\u95a2\u6570\u540d\u306foperator|\u3067\u56fa\u5b9a\u3067\u3001\u7b2c\u4e00\u5f15\u6570\u306fRange&\u307e\u305f\u306fconst Range&\u3067\u306a\u304f\u3066\u306f\u306a\u308a\u307e\u305b\u3093\u306d\u3002\u623b\u308a\u5024\u306f\u7b2c\u4e00\u5f15\u6570\u3068\u540c\u3058\u3082\u306e\u3092\u8fd4\u3057\u307e\u3059\u3002\u306a\u306b\u3084\u3089\u51fa\u529b\u30b9\u30c8\u30ea\u30fc\u30e0\u6f14\u7b97\u5b50\u3068\u305d\u3063\u304f\u308a\u3067\u3059\u306d\u3002\u5168\u304f\u3053\u306e\u624b\u306e\u60aa\u7fd2\u306b\u306f\u56f0\u308a\u307e\u3059\u3002\n\u898b\u3066\u306e\u901a\u308afor_eached\u306f\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u3092\u4f7f\u308f\u306a\u304d\u3083\u3044\u3051\u306a\u3044\u306e\u3067\u3001\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u95a2\u6570\u306b\u3057\u307e\u3057\u3087\u3046\u3002\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u304c\u4e0d\u8981\u3067\u3042\u308c\u3070\u30af\u30e9\u30b9\u3092\u4f7f\u3063\u3066\u3001\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u3067\u5f15\u6570\u3092\u53d7\u3051\u53d6\u3063\u3066\u76f4\u63a5\u30bf\u30b0\u30c7\u30a3\u30b9\u30d1\u30c3\u30c1\u3092\u304b\u307e\u3057\u3066\u3082\u3044\u3044\u3067\u3059\u306d\u3002\n\u3068\u306b\u304b\u304f\u3053\u3053\u3067\u306f\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u95a2\u6570\u3067for_eached\u3092\u4f5c\u6210\u3057\u3066\u3001operator|\u306e\u7b2c\u4e8c\u5f15\u6570\u306b\u76f8\u5f53\u3059\u308b\u578b\u3092\u8fd4\u3057\u3066\u3084\u308c\u3070\u3044\u3044\u308f\u3051\u3067\u3059\u3002\n\u305d\u308c\u3067\u306f\u3001operator|\u306e\u7b2c\u4e8c\u5f15\u6570\u306b\u76f8\u5f53\u3059\u308b\u578b\u304b\u3089\u4f5c\u308a\u307e\u3057\u3087\u3046\u3002for_eached_tag\u3068\u3044\u3046\u540d\u524d\u306b\u3057\u307e\u3057\u305f\u3002\u90e8\u5206\u7279\u6b8a\u5316\u306b\u3088\u3063\u3066operator|\u306e\u30aa\u30fc\u30d0\u30fc\u30ed\u30fc\u30c9\u3092\u6b63\u78ba\u306b\u884c\u3046\u305f\u3081\u3060\u3051\u306e\u30af\u30e9\u30b9\u306a\u306e\u3067\u3001\u53d7\u3051\u53d6\u3063\u305f\u95a2\u6570\u3092\u30e9\u30c3\u30d7\u3059\u308b\u3060\u3051\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u3002\n\u305d\u3046\u3057\u305f\u3089\u3001operator|\u3092\u4f5c\u308a\u307e\u3059\u3002\u3053\u3053\u3067range\u3068\u95a2\u6570\u304c\u63c3\u3046\u306e\u3067\u3001for_each\u3092\u5b9f\u884c\u3057\u3066\u3042\u3052\u307e\u3059\u3002\n\u6700\u5f8c\u306boperator|\u3092\u547c\u3073\u51fa\u3059\u305f\u3081\u306efor_eached_tag\u3092\u4f5c\u308b\u305f\u3081\u306e\u95a2\u6570\u3001for_eached\u3092\u4f5c\u3063\u3066\u3042\u3052\u308c\u3070\u5b8c\u6210\u3067\u3059\u3002\n\u306d\u3001\u7c21\u5358\u3067\u3057\u3087\u3046\u3002\ntemplate<class UnaryFunction>\nclass for_eached_tag\n{\n  UnaryFunction f;\n\npublic:\n  for_eached_tag(UnaryFunction f) noexcept : f(f) {}\n  template<class T>\n  auto operator()(T&& arg)\n    ->decltype(f(std::forward<T>(arg)))\n    { return f(std::forward<T>(arg)); }\n\n  template<class T>\n  auto operator()(T&& arg) const\n    ->decltype(f(std::forward<T>(arg)))\n    { return f(std::forward<T>(arg)); }\n};\n\ntemplate<class Range, class UnaryFunction>\nstatic inline Range& operator|(Range& r, for_eached_tag<UnaryFunction> func)\n  { boost::for_each(r, func); return (r); }\ntemplate<class Range, class UnaryFunction>\nstatic inline const Range& operator|(const Range& r, for_eached_tag<UnaryFunction> func)\n  { boost::for_each(r, func); return (r); }\n\ntemplate<class UnaryFunction>\nstatic inline for_eached_tag<UnaryFunction> for_eached(UnaryFunction func)\n  { return for_eached_tag<UnaryFunction>(func); }\n\n\u3059\u3067\u306bqiita\u306b\u7d20\u6674\u3089\u3057\u3044\u7d39\u4ecb\u304c\u3042\u3063\u305f\u306e\u3067\u4e0d\u8981\u304b\u3068\u3082\u601d\u3044\u307e\u3057\u305f\u304c\u3001\u30b3\u30f3\u30c6\u30ca\u3078\u5909\u63db\u3057\u3066\u304f\u308c\u308b\u30a2\u30c0\u30d7\u30bf\u3082\u4f5c\u3063\u3066\u307f\u307e\u3057\u3087\u3046\u3002\u76ee\u6307\u3059\u5f62\u306f\u3053\u3093\u306a\u611f\u3058\u3067\u3059\u3002\u3084\u308a\u307e\u3057\u305f\u306d\u3001\u3082\u3046boost::copy\u3092\u631f\u3080\u5fc5\u8981\u306f\u3042\u308a\u307e\u305b\u3093\u3002\nstd::vector<int> vec = containerize(boost::irange(0, 100)); // \u95a2\u6570\u7248\nstd::string str = boost::irange<char>('a', 'z'+1) | containerized; // pipe\u7248\n\n\u3053\u3053\u3067\u306f\u623b\u308a\u5024\u306b\u3088\u308b\u95a2\u6570\u306e\u30aa\u30fc\u30d0\u30fc\u30ed\u30fc\u30c9\u306b\u4f3c\u305f\u30a4\u30c7\u30a3\u30aa\u30e0\u3092\u4f7f\u3044\u307e\u3059\u3002\n\u5148\u307b\u3069\u3068\u306f\u5c11\u3057\u624b\u9806\u304c\u5909\u308f\u3063\u3066\u3044\u308b\u306e\u304c\u9762\u767d\u3044\u3067\u3059\u306d\u3002\u6700\u521d\u306b\u5b9f\u969b\u306b\u5909\u63db\u3092\u62c5\u5f53\u3059\u308b\u30af\u30e9\u30b9\u3092\u4f5c\u6210\u3057\u3001\u305d\u308c\u3092\u4f7f\u3063\u3066containerize\u95a2\u6570\u3092\u4f5c\u6210\u3057\u307e\u3059\u3002\u305d\u3046\u3057\u305f\u3089\u30bf\u30b0\u3092\u4f5c\u308a\u3001\u4eca\u56de\u306f\u5f15\u6570\u306f\u8981\u3089\u306a\u3044\u306e\u3067\u30bf\u30b0\u3092\u305d\u306e\u307e\u307eoperator|\u306b\u6e21\u3057\u3066\u3084\u308c\u3070OK\u3067\u3059\u3002\ntemplate<class Range>\nclass containerizer\n{\n  const Range& range;\n\npublic:\n  containerizer(const Range& r) noexcept : range(r) {}\n\n  template<class To>\n  operator To() const // \u3053\u308c\u306e\u304a\u304b\u3052\u3067\u623b\u308a\u5024\u306b\u3088\u308b\u30aa\u30fc\u30d0\u30fc\u30ed\u30fc\u30c9\u3082\u3069\u304d\u304c\u3067\u304d\u308b\n  {\n    using std::begin; using std::end;\n    return To(begin(range), end(range));\n  }\n};\n\ntemplate<class Range>\nstatic inline containerizer<Range> containerize(Range&& range)\n  { return containerizer<Range>(std::forward<Range>(range)); }\n\nstruct containerized_tag {};\nstatic constexpr containerized_tag containerized; // \u4eca\u56de\u306f\u305f\u3060\u306e\u30bf\u30b0\n\ntemplate<class Range>\nstatic inline containerizer<Range> operator|(\n    Range&& range, containerized_tag)\n  { return containerize(std::forward<Range>(range)); } // operator|\u3067containerize\u3092\u5b9f\u884c\u3059\u308b\n\n\n\u304a\u308f\u308a\u306b\n\u7d50\u69cb\u5927\u5909\u306a\u8a18\u4e8b\u306b\u306a\u3063\u3066\u3057\u307e\u3044\u307e\u3057\u305f\u304c\u3001\u3053\u308c\u3067\u3082Boost.Range\u306e\u3054\u304f\u4e00\u90e8\u3057\u304b\u7d39\u4ecb\u3067\u304d\u3066\u3044\u307e\u305b\u3093\u3002\u4e0a\u306e\u3082\u306e\u3092\u3055\u3089\u306b\u697d\u306b\u66f8\u304f\u305f\u3081\u306e\u30d8\u30eb\u30d1\u95a2\u6570\u306a\u3069\u3082\u3042\u308b\u306e\u3067\u3001\u6c17\u306b\u5165\u3063\u3066\u3044\u305f\u3060\u3051\u305f\u3089\u305c\u3072Boost\u3092\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3057\u3066\u307f\u3066\u3001\u4f7f\u3063\u3066\u307f\u3066\u304f\u3060\u3055\u3044\u3002\u3053\u306e\u30e9\u30a4\u30d6\u30e9\u30ea\u306e\u3088\u3046\u306b\u3001Boost\u306b\u306f\u30d8\u30c3\u30c0\u30aa\u30f3\u30ea\u30fc\u3067\u4f7f\u3048\u308b\u30e9\u30a4\u30d6\u30e9\u30ea\u304c\u305f\u304f\u3055\u3093\u3042\u308a\u307e\u3059\u3002\u3053\u306e\u8a18\u4e8b\u304cBoost\u3092\u4f7f\u3046\u304d\u3063\u304b\u3051\u306b\u306a\u308c\u3070\u5e78\u3044\u3067\u3059\u3002\n\u4e88\u5b9a\u3057\u3066\u3044\u305f\u3088\u308a\u9577\u304f\u306a\u3063\u3066\u3057\u307e\u3044\u307e\u3057\u305f\u304c\u3001\u3053\u3053\u307e\u3067\u8aad\u3093\u3067\u3044\u305f\u3060\u3051\u305f\u65b9\u304c\u3044\u3089\u3063\u3057\u3083\u3063\u305f\u3089\u3042\u308a\u304c\u3068\u3046\u3054\u3056\u3044\u307e\u3059\u3002\n\u307e\u305f\u9593\u9055\u3044\u3001typo\u3001\u79c1\u306e\u7406\u89e3\u306e\u4e0d\u8db3\u3084\u8aac\u660e\u306e\u4e0d\u8db3\u304c\u3042\u308c\u3070\u305c\u3072\u6307\u6458\u3092\u304a\u9858\u3044\u3044\u305f\u3057\u307e\u3059\u3002\n\u8aa4\u5b57\u304c\u5927\u91cf\u306b\u3042\u308a\u307e\u3059\u306d\u3002\n\u76f4\u3057\u305f\u3064\u3082\u308a\u3067\u3059\u304c\u307e\u3060\u307e\u3060\u3042\u308a\u305d\u3046\u3002\nBoost.Range\u304c\u6d41\u884c\u3063\u3066\u3044\u308b\u6c17\u304c\u3059\u308b\u306e\u3067\u89e3\u8aac\u3057\u307e\u3059\u3002\u305d\u308c\u305e\u308c\u306e\u7d30\u304b\u3044\u6a5f\u80fd\u306b\u3064\u3044\u3066\u306f\u30ea\u30d5\u30a1\u30ec\u30f3\u30b9\u3092\u898b\u3066\u306d\u3002\u3053\u306e\u8a18\u4e8b\u306fBoost.Range\u304c\u5206\u304b\u3089\u306a\u3044\u4eba\u3001\u7279\u306b\u5168\u304f\u77e5\u3089\u306a\u3044\u5411\u3051\u306e\u8a18\u4e8b\u306b\u306a\u3063\u3066\u3044\u308b\u305f\u3081\u3001boost\u304c1\u30df\u30ea\u3082\u5206\u304b\u3089\u306a\u304f\u3066\u3082\u8aad\u3081\u308b\u8a18\u4e8b\u306b\u306a\u3063\u3066\u3044\u308b\u3064\u3082\u308a\u3067\u3059\u3002\u306a\u304a\u3001\u79c1\u304c\u3053\u306e\u8a18\u4e8b\u3092\u66f8\u304f\u4e0a\u3067\u4f7f\u7528\u3057\u305fBoost\u306e\u30d0\u30fc\u30b8\u30e7\u30f3\u306f1.60.0\u3067\u3059\u3002\u30ea\u30d5\u30a1\u30ec\u30f3\u30b9\u306f\u4ee5\u4e0b\u3067\u3059\u3002URL\u3092\u3061\u3087\u3063\u3068\u3044\u3058\u308c\u3070\u597d\u304d\u306a\u30d0\u30fc\u30b8\u30e7\u30f3\u306b\u98db\u3079\u308b\u3068\u601d\u3044\u307e\u3059\u3002\nhttp://www.boost.org/doc/libs/1_60_0/libs/range/doc/html/\n\u306a\u304a\u3001\u6a19\u6e96\u30e9\u30a4\u30d6\u30e9\u30ea\u306e\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u30d8\u30c3\u30c0\u3082\u53c2\u7167\u306e\u3053\u3068\u3002\nhttp://en.cppreference.com/w/cpp/algorithm\n\n#Boost.Range\u3068\u306f\n\u30a4\u30c6\u30ec\u30fc\u30bf\u5bfe(iterator pair)\u3068\u3044\u3046\u30a4\u30c7\u30a3\u30aa\u30e0\u3092\u5fdc\u7528\u767a\u5c55\u3055\u305b\u305fboost\u306e\u30e9\u30a4\u30d6\u30e9\u30ea\u3002\u30a4\u30c6\u30ec\u30fc\u30bf\u5bfe\u3068\u3044\u3046\u306e\u306f\u3001\u6a19\u6e96\u30e9\u30a4\u30d6\u30e9\u30ea\u3067\u3082\u975e\u5e38\u306b\u3088\u304f\u4f7f\u308f\u308c\u308b\u30a4\u30c7\u30a3\u30aa\u30e0\u3067\u3059\u3002\niterator pair\u306b\u3064\u3044\u3066\u306fc++ more idioms\u306b\u8a73\u3057\u3044\u3067\u3059\u3002\nhttps://en.wikibooks.org/wiki/More_C%2B%2B_Idioms/Iterator_Pair\n\n```cpp\nstd::fill(begin(vec), end(vec), // \u3053\u308c\u3068\u304b\n  0xff);\nstd::copy(begin(vec), end(vec), // \u3053\u308c\u3068\u304b\n  std::ostream_iterator<int>(std::cout));\nstd::list<int> list(begin(vec), end(vec)); // \u3053\u308c\u306e\u3053\u3068\n```\n\n\u30b3\u30f3\u30c6\u30ca\u305d\u306e\u3082\u306e\u3092\u6e21\u3055\u305a\u306b\u3001begin\u3068end\u3068\u3044\u3046\u30a4\u30c6\u30ec\u30fc\u30bf\u306e\u5bfe\u3092\u4f7f\u3063\u3066\u30b3\u30f3\u30c6\u30ca\u3067\u306f\u306a\u304f\"\u7bc4\u56f2\"\u3092\u3084\u308a\u53d6\u308a\u3059\u308b\u3053\u3068\u3067\u6c4e\u7528\u6027\u3092\u4e0a\u3052\u308b\u30a4\u30c7\u30a3\u30aa\u30e0\u3067\u3059\u3002\u3067\u3082\u6b63\u76f4\u3001\u9762\u5012\u304f\u3055\u3044\u3002\n\n```cpp\n#include <iterator> // \u5fc5\u9808\n\nusing std::begin; using std::end; // ADL\u306b\u3088\u3063\u3066\u547c\u3073\u51fa\u3055\u308c\u306a\u3051\u308c\u3070\u306a\u3089\u306a\u3044\u70ba\nbegin(container); end(container); // container\u304c2\u56de\u3082\u767b\u5834\u3059\u308b\n```\n\n\u3072\u3069\u3044\u8a71\u3067\u3059\u304c\u3001\u4e0a\u306e\u3088\u3046\u306b\u66f8\u304b\u306a\u3051\u308c\u3070\u306a\u308a\u307e\u305b\u3093\u3002STL\u306e\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u95a2\u6570\u306f\u6c4e\u7528\u6027\u306b\u512a\u308c\u3001\u9ad8\u901f\u3067\u3001\u554f\u984c\u306e\u89e3\u6c7a\u80fd\u529b\u3082\u9ad8\u3044\u3067\u3059\u304c\u3001\u30dc\u30b3\u30dc\u30b3\u306b\u7f75\u3089\u308c\u308b\u3053\u3068\u3082\u3042\u308a\u307e\u3059\u3002[iterators must go](https://accu.org/content/conf2009/AndreiAlexandrescu_iterators-must-go.pdf)\u306f\u6709\u540d\u3067\u3059\u306d\u3002iterators must go\u306f\u5b8c\u5168\u306b\u548c\u8a33\u3059\u308b\u306e\u306f\u96e3\u3057\u3044\u3067\u3059\u304c\u6d41\u3057\u8aad\u307f\u3059\u308b\u306e\u306f\u305d\u3046\u96e3\u3057\u304f\u306a\u3044\u306e\u3067\u305c\u3072\u4e00\u8aad\u3059\u308b\u3053\u3068\u3092\u304a\u3059\u3059\u3081\u3057\u307e\u3059\u3002\n\n\u305d\u3053\u3067Range\u3068\u3044\u3046\"\u7bc4\u56f2\"\u3068\u3044\u3046\u6982\u5ff5\u3092\u8868\u3059\u30af\u30e9\u30b9\u304c\u767b\u5834\u3059\u308b\u3068\u3044\u3046\u306e\u306f\u305d\u3093\u306a\u306b\u9769\u65b0\u7684\u306a\u8a71\u3067\u306f\u306a\u3044\u3068\u601d\u3044\u307e\u3059\u3002begin\u3068end\u306e\u30a4\u30c6\u30ec\u30fc\u30bf\u306e\u30da\u30a2\u3092\u4fdd\u6301\u3059\u308b\u30af\u30e9\u30b9\u306b\u3001empty\u3084begin, end\u306a\u3069\u306e\u30e1\u30f3\u30d0\u95a2\u6570\u3092\u6301\u305f\u305b\u3001\u30b3\u30f3\u30c6\u30ca\u3088\u308a\u3082\u7de9\u3044concept\u306e\u5143\u3067\u4f7f\u3048\u308b\u3001\u305d\u3093\u306a\u7bc4\u56f2\u3092\u6271\u3046Boost.Range\u306e\u6a5f\u80fd\u3001\u9b45\u529b\u3001\u305d\u3057\u3066\u6d41\u884c\u308a\uff1f\u306e\u30d1\u30a4\u30d7\u30e9\u30a4\u30f3\u8a18\u6cd5\u306b\u3064\u3044\u3066\u3082\u89e3\u8aac\u3057\u305f\u3044\u3068\u601d\u3044\u307e\u3059\u3002\n\n#Boost.Range.Algorithms\nRange\u3092\u624b\u306b\u5165\u308c\u3066\u307e\u305a\u601d\u3044\u3064\u304f\u306e\u306f\u3001\u4e0a\u306e\u9762\u5012\u304f\u3055\u3044\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u95a2\u6570\u306e\u5f15\u6570\u3092Range\u306b\u3057\u3066\u3057\u307e\u3046\u3053\u3068\u3067\u3059\u306d\u3002\u3053\u308c\u3060\u3051\u3067\u3082\u3001\u3060\u3044\u3076\u697d\u3061\u3093\u306b\u306a\u308a\u307e\u3059\u3002Boost.Algorithm\u3068\u3054\u3063\u3061\u3083\u306b\u3057\u306a\u3044\u3088\u3046\u306b\u6c17\u3092\u4ed8\u3051\u3066\u304f\u3060\u3055\u3044\u3002\n\u6a5f\u80fd\u3054\u3068\u306b\u30d8\u30c3\u30c0\u304c\u7528\u610f\u3055\u308c\u3066\u3044\u307e\u3059\u3002\u4f7f\u3044\u305f\u3044\u3082\u306e\u3060\u3051\u30a4\u30f3\u30af\u30eb\u30fc\u30c9\u3057\u307e\u3057\u3087\u3046\u3002\nhttp://www.boost.org/doc/libs/1_60_0/libs/range/doc/html/range/headers/algorithm.html\n\n```cpp\n#include <iterator>\n#include <vector>\n#include <boost/range/algorithm/copy.hpp>\n\nint main()\n{\n  std::vector<int> vec { /* initialize */ };\n  boost::copy(vec, std::ostream_iterator<int>(std::cout));\n}\n```\n\n\u306f\u3044\u3002\u8a00\u3044\u305f\u3044\u3053\u3068\u306f\u5206\u304b\u308a\u307e\u3059\u3002\u30d8\u30c3\u30c0\u540d\u304c\u9577\u3044\u3002\u30b3\u30f3\u30d1\u30a4\u30eb\u6642\u9593\u3082\u9577\u3044\u6c17\u304c\u3059\u308b\u3002\u3066\u3044\u3046\u304b\u3053\u306e\u304f\u3089\u3044\u6a19\u6e96\u3067\u3067\u304d\u306a\u304b\u3063\u305f\u3053\u3068\u304c\u7591\u554f\u3002\u3044\u3048\u3044\u3048\u3001\u307e\u3060\u89e6\u308a\u3067\u3059\u304b\u3089\u3001\u307e\u3060\u307e\u3060\u5e8f\u306e\u53e3\u3067\u3059\u3002\u3053\u308c\u3067\u3082\u7d50\u69cb\u697d\u306b\u306a\u3063\u305f\u3068\u601d\u3044\u307e\u3059\u3051\u3069\u306d\u3002\u3055\u3042\u3001\u6b21\u884c\u304d\u307e\u3057\u3087\u3046\u3002\n\n#Boost.Range.Utilities\nRange\u304c\u7bc4\u56f2\u3092\u8868\u3059\u306a\u3089\u3001\u4f55\u3082begin\u3068end\u306e\u30da\u30a2\u3058\u3083\u306a\u304f\u3066\u3082\u3044\u3044\u3088\u306d\u3002begin+2 \uff5e end-8 \u306e\u7bc4\u56f2\u3060\u3063\u3066\u7bc4\u56f2\u3058\u3083\u3093\u3002\u305d\u3093\u306a\u3042\u306a\u305f\u306e\u4e59\u5973\u5fc3\u3092\u308f\u3057\u3065\u304b\u307f\u306b\u3059\u308b\u306e\u304c\u3053\u306eBoost.Range.Utilities\u3067\u3059\u3002\nUtilities\u306b\u306f2\u3064\u306e\u30af\u30e9\u30b9\u3001\u3059\u306a\u308f\u3061`iterator_range`\u3068`sub_range`\u306e2\u3064\u304c\u7528\u610f\u3055\u308c\u3066\u3044\u307e\u3059\u3002\n`iterator_range`\u306f\u30a4\u30c6\u30ec\u30fc\u30bf\u306e\u578b\u3092\u6307\u5b9a\u3057\u3066\u3001\u305d\u306e\u30a4\u30c6\u30ec\u30fc\u30bf\u306e\u7bc4\u56f2\u3092\u793a\u3059\u30af\u30e9\u30b9\u3067\u3059\u3002`sub_range`\u306f\u30b3\u30f3\u30c6\u30ca\u306e\u578b\u3092\u6307\u5b9a\u3057\u3066\u3001\u305d\u306e\u30b3\u30f3\u30c6\u30ca\u306e\u4e00\u90e8\u306e\u7bc4\u56f2\u3092\u793a\u3059\u30af\u30e9\u30b9\u3067\u3059\u3002\u4fbf\u5229\u306e\u70ba\u306b\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u5f15\u6570\u306e\u9055\u3046\u3053\u306e\u4e8c\u3064\u304c\u7528\u610f\u3055\u308c\u3066\u3044\u307e\u3059\u304c\u3001\u5b9f\u969b\u306b\u306f\u3053\u308c\u3089\u306f\u540c\u3058\u5b9f\u88c5\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u3002\n\n```cpp\n#include <boost/range/iterator_range.hpp>\n#include <boost/range/sub_range.hpp>\n#include <vector>\n\nint main()\n{\n  std::vector<int> vec { /* initialize */ };\n  boost::sub_range<std::vector<char>> sub(vec); // vec\u306e\u6700\u521d\u304b\u3089\u6700\u5f8c\u307e\u3067\n  boost::sub_range<std::vector<char>> sub2(begin(vec)+2, begin(vec)+10); // vec\u306e2\u756a\u76ee\u304b\u30899\u756a\u76ee\u307e\u3067\u3092\u8868\u3059\n  boost::iterator_range<std::istream_iterator<int>> sub3(\n      std::istream_iterator<int>(std::cin),\n      std::istream_iterator<int>()); // \u30a4\u30c6\u30ec\u30fc\u30bf\u5bfe\u304c\u57fa\u306b\u306a\u3063\u3066\u3044\u308b\u304b\u3089\u3001\u3053\u3046\u3044\u3046\u5fdc\u7528\u3082\u52b9\u304f\n}\n```\n\n#Boost.Range.Adaptors\n\u3053\u308c\u304c\u672c\u984c\u3067\u3057\u3087\u3046\u304b\u3002\u304b\u306a\u308a\u5fdc\u7528\u7684\u306a\u8a71\u306b\u306a\u3063\u3066\u3057\u307e\u3044\u307e\u3059\u3002\u3053\u306e\u30e9\u30a4\u30d6\u30e9\u30ea\u306fC++\u3067\u30d1\u30a4\u30d7\u30e9\u30a4\u30f3\u8a18\u6cd5\u306e\u3082\u306e\u304c\u4f7f\u3048\u308b\u3088\u3046\u306b\u306a\u308b\u30e9\u30a4\u30d6\u30e9\u30ea\u3067\u3001\u304b\u306a\u308a\u9ed2\u9b54\u8853\u306e\u69d8\u76f8\u3092\u5448\u3057\u305f\u898b\u305f\u76ee\u3067\u306f\u3042\u308a\u307e\u3059\u304c\u3068\u3063\u3066\u3082\u5b9f\u7528\u7684\u306a\u5f62\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u3002\u3057\u304b\u3057\u51fa\u5165\u529b\u30b9\u30c8\u30ea\u30fc\u30e0\u3068\u540c\u3058\u3088\u3046\u306b\u6f14\u7b97\u5b50\u306e\u30aa\u30fc\u30d0\u30fc\u30ed\u30fc\u30c9\u3092\u60aa\u7528\u3057\u3066\u3044\u307e\u3059\u3002\n\u3053\u308c\u3082\u30d8\u30c3\u30c0\u304c\u305d\u308c\u305e\u308c\u7528\u610f\u3055\u308c\u3066\u3044\u308b\u306e\u3067\u3001\u81ea\u5206\u304c\u4f7f\u3046\u3082\u306e\u3092\u30a4\u30f3\u30af\u30eb\u30fc\u30c9\u3057\u307e\u3057\u3087\u3046\u3002\nhttp://www.boost.org/doc/libs/1_60_0/libs/range/doc/html/range/headers/adaptors.html\n\n`boost::irange`\u306f`std::iota`\u306erange\u7248\u306e\u3088\u3046\u306a\u3082\u306e\u3067\u3001\u6307\u5b9a\u3057\u305f\u6570\u5024\u304b\u3089\u6570\u5024\u307e\u3067\u306erange\u3092\u4f5c\u6210\u3057\u3066\u304f\u308c\u308b\u95a2\u6570\u3067\u3059\u3002\n\n```cpp\n#include <vector>\n#include <boost/range/irange.hpp>\n#include <boost/range/adaptor/strided.hpp>\n#include <boost/range/adaptor/transformed.hpp>\n\nint main()\n{\n  // \u9069\u5f53\u306a\u6570\u5217\u3092\u4f5c\u3063\u3066\u307f\u308b\u3002\n  boost::copy(\n    boost::irange(0, 100) // 0\uff5e99\u306e\u8981\u7d20\u306erange\u3092\u4f5c\u6210; 0, 1, 2, 3, ..., 99\n      | boost::adaptors::strided(2) // \u8981\u7d20\u30921\u3064\u98db\u3070\u3057\u306b\u3059\u308b; 0, 2, 4, 6, ..., 98\n      | boost::adaptors::transformed([](int n) { return n*2; }), // \u8981\u7d20\u3092\u5168\u30662\u500d\u306b\u3059\u308b; 0, 4, 8, 12, ..., 196\n    std::ostream_iterator<int>(std::cout, \" \"));\n  // output: 0, 4, 8, 12, ..., 196\n\n\n  // \u6587\u5b57\u5217\u3092\u4f5c\u3063\u3066\u307f\u308b\n  std::string str;\n  boost::copy(\n    boost::irange<char>('a', 'z'+1) // 'a'\uff5e'z'\u306e\u8981\u7d20\u306erange\u3092\u4f5c\u6210; abcd...z\n      | boost::adaptors::transformed([](char c) { return c - ('a' - 'A'); }) // \u8981\u7d20\u3092\u5168\u3066\u5927\u6587\u5b57\u306b\u3059\u308b; ABCD...Z\n      | boost::adaptors::reversed, // \u8981\u7d20\u3092\u9006\u9806\u306b\u3059\u308bZYXW...A\n    std::back_inserter(str));\n  std::cout << str << std::endl; // output: ZYXW...A\n}\n```\n\n\u3061\u306a\u307f\u306b\u3001adaptor\u306f\u5fc5\u305a\u30d1\u30a4\u30d7\u306b\u4f7f\u3046\u3082\u306e\u3068\u95a2\u6570\u3068\u3057\u3066\u4f7f\u3046\u3082\u306e\u3068\u304c\u3042\u308a\u3001`boost::adaptors::transform`\u306b\u5bfe\u3059\u308b`boost::adaptors::transformed`\u3001`boost::adaptors::stride`\u306b\u5bfe\u3059\u308b`boost::adaptors::strided`\u306e\u3088\u3046\u306b\u5bfe\u5fdc\u95a2\u4fc2\u306b\u3042\u308a\u307e\u3059\u3002\n\n##adaptor\u3092\u81ea\u4f5c\u3057\u3066\u307f\u3088\u3046\n\u9ed2\u9b54\u8853\u306b\u898b\u3048\u307e\u3059\u304c\u5b9f\u306f\u305d\u3093\u306a\u306b\u96e3\u3057\u304f\u306a\u3044\u3067\u3059\u3002adaptor\u304c\u3069\u3046\u3084\u3063\u3066\u51fa\u6765\u3066\u3044\u308b\u306e\u304b\u3092\u77e5\u308b\u3053\u3068\u3067\u3044\u3056\u30b3\u30f3\u30d1\u30a4\u30eb\u30a8\u30e9\u30fc\u304c\u51fa\u3066\u3057\u307e\u3063\u305f\u6642\u306b\u3082\u5bfe\u51e6\u304c\u3057\u3084\u3059\u3044\u3067\u3059\u3002\u3068\u3044\u3046\u3053\u3068\u3067\u3001\u7c21\u5358\u306aadaptor\u3092\u81ea\u4f5c\u3057\u3066\u307f\u307e\u3057\u3087\u3046\u3002\u3053\u3053\u3067\u306f`for_eached`\u3068\u3044\u3046\u3082\u306e\u3092\u4f5c\u3063\u3066\u307f\u307e\u3059\u3002\n\n\u5fc5\u305a\u5bfe\u306b\u306a\u308b\u3068\u3044\u3046\u6163\u7fd2\u3092\u5b88\u308b\u3053\u3068\u306b\u3057\u307e\u3059\u3002\u3068\u8a00\u3063\u3066\u3082\u3001`for_each`\u306a\u3089\u3082\u3046\u7247\u3063\u307d\u306f\u3042\u308b\u3093\u3067\u3059\u3051\u3069\u306d\u3002\n\n```cpp\nboost::for_each(range, [](value_type e) { std::cout << e; }); // \u666e\u901a\u306efor_each\nrange | for_eached([](value_type e) { std::cout << e; }); // pipe\u7528\u306efor_each\n\nstd::string str;\nboost::copy(\n  boost::irange<char>('a', 'z'+1)\n    | for_eached([](char e) { std::cout << e; }) // abcd...z\u3068\u6a19\u6e96\u51fa\u529b\u306b\u51fa\u529b\u3059\u308b\n    | boost::adaptors::transformed([](char c) { return c - ('a' - 'A'); })\n    | for_eached([](char e) { std::cout << e; }) // ABCD...Z\u3068\u6a19\u6e96\u51fa\u529b\u306b\u51fa\u529b\u3059\u308b\n    | boost::adaptors::reversed,\n  std::back_inserter(str));\n```\n\n\u306a\u3093\u304b\u5fae\u5999\u3067\u3059\u304c\u3001\u307e\u3042\u3053\u3093\u306a\u3082\u306e\u3092\u4f5c\u308a\u305f\u3044\u3068\u601d\u3046\u308f\u3051\u3067\u3059\u3002\u57fa\u672c\u7684\u306b\u306f\u3001[\u30bf\u30b0\u30c7\u30a3\u30b9\u30d1\u30c3\u30c1(tag dispatching)](http://www.generic-programming.org/languages/cpp/techniques.php#tag_dispatching)\u3068\u3044\u3046\u624b\u6cd5\u3092\u4f7f\u3044\u307e\u3059\u3002\u95a2\u6570\u540d\u306f`operator|`\u3067\u56fa\u5b9a\u3067\u3001\u7b2c\u4e00\u5f15\u6570\u306f`Range&`\u307e\u305f\u306f`const Range&`\u3067\u306a\u304f\u3066\u306f\u306a\u308a\u307e\u305b\u3093\u306d\u3002\u623b\u308a\u5024\u306f\u7b2c\u4e00\u5f15\u6570\u3068\u540c\u3058\u3082\u306e\u3092\u8fd4\u3057\u307e\u3059\u3002\u306a\u306b\u3084\u3089\u51fa\u529b\u30b9\u30c8\u30ea\u30fc\u30e0\u6f14\u7b97\u5b50\u3068\u305d\u3063\u304f\u308a\u3067\u3059\u306d\u3002\u5168\u304f\u3053\u306e\u624b\u306e\u60aa\u7fd2\u306b\u306f\u56f0\u308a\u307e\u3059\u3002\n\u898b\u3066\u306e\u901a\u308a`for_eached`\u306f\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u3092\u4f7f\u308f\u306a\u304d\u3083\u3044\u3051\u306a\u3044\u306e\u3067\u3001\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u95a2\u6570\u306b\u3057\u307e\u3057\u3087\u3046\u3002\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u304c\u4e0d\u8981\u3067\u3042\u308c\u3070\u30af\u30e9\u30b9\u3092\u4f7f\u3063\u3066\u3001\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u3067\u5f15\u6570\u3092\u53d7\u3051\u53d6\u3063\u3066\u76f4\u63a5\u30bf\u30b0\u30c7\u30a3\u30b9\u30d1\u30c3\u30c1\u3092\u304b\u307e\u3057\u3066\u3082\u3044\u3044\u3067\u3059\u306d\u3002\n\u3068\u306b\u304b\u304f\u3053\u3053\u3067\u306f\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u95a2\u6570\u3067`for_eached`\u3092\u4f5c\u6210\u3057\u3066\u3001`operator|`\u306e\u7b2c\u4e8c\u5f15\u6570\u306b\u76f8\u5f53\u3059\u308b\u578b\u3092\u8fd4\u3057\u3066\u3084\u308c\u3070\u3044\u3044\u308f\u3051\u3067\u3059\u3002\n\u305d\u308c\u3067\u306f\u3001`operator|`\u306e\u7b2c\u4e8c\u5f15\u6570\u306b\u76f8\u5f53\u3059\u308b\u578b\u304b\u3089\u4f5c\u308a\u307e\u3057\u3087\u3046\u3002`for_eached_tag`\u3068\u3044\u3046\u540d\u524d\u306b\u3057\u307e\u3057\u305f\u3002\u90e8\u5206\u7279\u6b8a\u5316\u306b\u3088\u3063\u3066`operator|`\u306e\u30aa\u30fc\u30d0\u30fc\u30ed\u30fc\u30c9\u3092\u6b63\u78ba\u306b\u884c\u3046\u305f\u3081\u3060\u3051\u306e\u30af\u30e9\u30b9\u306a\u306e\u3067\u3001\u53d7\u3051\u53d6\u3063\u305f\u95a2\u6570\u3092\u30e9\u30c3\u30d7\u3059\u308b\u3060\u3051\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u3002\n\u305d\u3046\u3057\u305f\u3089\u3001`operator|`\u3092\u4f5c\u308a\u307e\u3059\u3002\u3053\u3053\u3067range\u3068\u95a2\u6570\u304c\u63c3\u3046\u306e\u3067\u3001`for_each`\u3092\u5b9f\u884c\u3057\u3066\u3042\u3052\u307e\u3059\u3002\n\u6700\u5f8c\u306b`operator|`\u3092\u547c\u3073\u51fa\u3059\u305f\u3081\u306e`for_eached_tag`\u3092\u4f5c\u308b\u305f\u3081\u306e\u95a2\u6570\u3001`for_eached`\u3092\u4f5c\u3063\u3066\u3042\u3052\u308c\u3070\u5b8c\u6210\u3067\u3059\u3002\n\n\u306d\u3001\u7c21\u5358\u3067\u3057\u3087\u3046\u3002\n\n```cpp\ntemplate<class UnaryFunction>\nclass for_eached_tag\n{\n  UnaryFunction f;\n\npublic:\n  for_eached_tag(UnaryFunction f) noexcept : f(f) {}\n  template<class T>\n  auto operator()(T&& arg)\n    ->decltype(f(std::forward<T>(arg)))\n    { return f(std::forward<T>(arg)); }\n\n  template<class T>\n  auto operator()(T&& arg) const\n    ->decltype(f(std::forward<T>(arg)))\n    { return f(std::forward<T>(arg)); }\n};\n\ntemplate<class Range, class UnaryFunction>\nstatic inline Range& operator|(Range& r, for_eached_tag<UnaryFunction> func)\n  { boost::for_each(r, func); return (r); }\ntemplate<class Range, class UnaryFunction>\nstatic inline const Range& operator|(const Range& r, for_eached_tag<UnaryFunction> func)\n  { boost::for_each(r, func); return (r); }\n\ntemplate<class UnaryFunction>\nstatic inline for_eached_tag<UnaryFunction> for_eached(UnaryFunction func)\n  { return for_eached_tag<UnaryFunction>(func); }\n```\n\n\u3059\u3067\u306bqiita\u306b\u7d20\u6674\u3089\u3057\u3044\u7d39\u4ecb\u304c\u3042\u3063\u305f\u306e\u3067\u4e0d\u8981\u304b\u3068\u3082\u601d\u3044\u307e\u3057\u305f\u304c\u3001\u30b3\u30f3\u30c6\u30ca\u3078\u5909\u63db\u3057\u3066\u304f\u308c\u308b\u30a2\u30c0\u30d7\u30bf\u3082\u4f5c\u3063\u3066\u307f\u307e\u3057\u3087\u3046\u3002\u76ee\u6307\u3059\u5f62\u306f\u3053\u3093\u306a\u611f\u3058\u3067\u3059\u3002\u3084\u308a\u307e\u3057\u305f\u306d\u3001\u3082\u3046boost::copy\u3092\u631f\u3080\u5fc5\u8981\u306f\u3042\u308a\u307e\u305b\u3093\u3002\n\n```cpp\nstd::vector<int> vec = containerize(boost::irange(0, 100)); // \u95a2\u6570\u7248\nstd::string str = boost::irange<char>('a', 'z'+1) | containerized; // pipe\u7248\n```\n\n\u3053\u3053\u3067\u306f\u623b\u308a\u5024\u306b\u3088\u308b\u95a2\u6570\u306e\u30aa\u30fc\u30d0\u30fc\u30ed\u30fc\u30c9\u306b\u4f3c\u305f\u30a4\u30c7\u30a3\u30aa\u30e0\u3092\u4f7f\u3044\u307e\u3059\u3002\n\u5148\u307b\u3069\u3068\u306f\u5c11\u3057\u624b\u9806\u304c\u5909\u308f\u3063\u3066\u3044\u308b\u306e\u304c\u9762\u767d\u3044\u3067\u3059\u306d\u3002\u6700\u521d\u306b\u5b9f\u969b\u306b\u5909\u63db\u3092\u62c5\u5f53\u3059\u308b\u30af\u30e9\u30b9\u3092\u4f5c\u6210\u3057\u3001\u305d\u308c\u3092\u4f7f\u3063\u3066`containerize`\u95a2\u6570\u3092\u4f5c\u6210\u3057\u307e\u3059\u3002\u305d\u3046\u3057\u305f\u3089\u30bf\u30b0\u3092\u4f5c\u308a\u3001\u4eca\u56de\u306f\u5f15\u6570\u306f\u8981\u3089\u306a\u3044\u306e\u3067\u30bf\u30b0\u3092\u305d\u306e\u307e\u307e`operator|`\u306b\u6e21\u3057\u3066\u3084\u308c\u3070OK\u3067\u3059\u3002\n\n```cpp\ntemplate<class Range>\nclass containerizer\n{\n  const Range& range;\n\npublic:\n  containerizer(const Range& r) noexcept : range(r) {}\n\n  template<class To>\n  operator To() const // \u3053\u308c\u306e\u304a\u304b\u3052\u3067\u623b\u308a\u5024\u306b\u3088\u308b\u30aa\u30fc\u30d0\u30fc\u30ed\u30fc\u30c9\u3082\u3069\u304d\u304c\u3067\u304d\u308b\n  {\n    using std::begin; using std::end;\n    return To(begin(range), end(range));\n  }\n};\n\ntemplate<class Range>\nstatic inline containerizer<Range> containerize(Range&& range)\n  { return containerizer<Range>(std::forward<Range>(range)); }\n\nstruct containerized_tag {};\nstatic constexpr containerized_tag containerized; // \u4eca\u56de\u306f\u305f\u3060\u306e\u30bf\u30b0\n\ntemplate<class Range>\nstatic inline containerizer<Range> operator|(\n    Range&& range, containerized_tag)\n  { return containerize(std::forward<Range>(range)); } // operator|\u3067containerize\u3092\u5b9f\u884c\u3059\u308b\n```\n\n\n#\u304a\u308f\u308a\u306b\n\u7d50\u69cb\u5927\u5909\u306a\u8a18\u4e8b\u306b\u306a\u3063\u3066\u3057\u307e\u3044\u307e\u3057\u305f\u304c\u3001\u3053\u308c\u3067\u3082Boost.Range\u306e\u3054\u304f\u4e00\u90e8\u3057\u304b\u7d39\u4ecb\u3067\u304d\u3066\u3044\u307e\u305b\u3093\u3002\u4e0a\u306e\u3082\u306e\u3092\u3055\u3089\u306b\u697d\u306b\u66f8\u304f\u305f\u3081\u306e\u30d8\u30eb\u30d1\u95a2\u6570\u306a\u3069\u3082\u3042\u308b\u306e\u3067\u3001\u6c17\u306b\u5165\u3063\u3066\u3044\u305f\u3060\u3051\u305f\u3089\u305c\u3072Boost\u3092\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3057\u3066\u307f\u3066\u3001\u4f7f\u3063\u3066\u307f\u3066\u304f\u3060\u3055\u3044\u3002\u3053\u306e\u30e9\u30a4\u30d6\u30e9\u30ea\u306e\u3088\u3046\u306b\u3001Boost\u306b\u306f\u30d8\u30c3\u30c0\u30aa\u30f3\u30ea\u30fc\u3067\u4f7f\u3048\u308b\u30e9\u30a4\u30d6\u30e9\u30ea\u304c\u305f\u304f\u3055\u3093\u3042\u308a\u307e\u3059\u3002\u3053\u306e\u8a18\u4e8b\u304cBoost\u3092\u4f7f\u3046\u304d\u3063\u304b\u3051\u306b\u306a\u308c\u3070\u5e78\u3044\u3067\u3059\u3002\n\u4e88\u5b9a\u3057\u3066\u3044\u305f\u3088\u308a\u9577\u304f\u306a\u3063\u3066\u3057\u307e\u3044\u307e\u3057\u305f\u304c\u3001\u3053\u3053\u307e\u3067\u8aad\u3093\u3067\u3044\u305f\u3060\u3051\u305f\u65b9\u304c\u3044\u3089\u3063\u3057\u3083\u3063\u305f\u3089\u3042\u308a\u304c\u3068\u3046\u3054\u3056\u3044\u307e\u3059\u3002\n\u307e\u305f\u9593\u9055\u3044\u3001typo\u3001\u79c1\u306e\u7406\u89e3\u306e\u4e0d\u8db3\u3084\u8aac\u660e\u306e\u4e0d\u8db3\u304c\u3042\u308c\u3070\u305c\u3072\u6307\u6458\u3092\u304a\u9858\u3044\u3044\u305f\u3057\u307e\u3059\u3002\n\n\u8aa4\u5b57\u304c\u5927\u91cf\u306b\u3042\u308a\u307e\u3059\u306d\u3002\n\u76f4\u3057\u305f\u3064\u3082\u308a\u3067\u3059\u304c\u307e\u3060\u307e\u3060\u3042\u308a\u305d\u3046\u3002\n"}