{"context": " More than 1 year has passed since last update.\n\n\u306f\u3058\u3081\u306b\nPrologCafe\u3068\u306fJava\u8a00\u8a9e\u3067\u5b9f\u88c5\u3055\u308c\u305fProlog\u8a00\u8a9e\u306e\u51e6\u7406\u7cfb\u3067\u3059\u3002PrologCafe\u3067\u306fProlog\u306e\u9805\u3092Term\u30af\u30e9\u30b9\u306b\u3088\u3063\u3066\u8868\u73fe\u3057\u3066\u3044\u307e\u3059\u3002\u3057\u304b\u3057\u3001\u8907\u96d1\u306a\u9805\u3092Term\u30af\u30e9\u30b9\u3067\u7d44\u307f\u7acb\u3066\u308b\u306b\u306f\u9aa8\u304c\u6298\u308c\u307e\u3059\u3002\n\u4f8b\u3048\u3070\u4ee5\u4e0b\u306e\u9805\u3092Term\u30af\u30e9\u30b9\u3067\u8868\u73fe\u3057\u305f\u3044\u3068\u3057\u307e\u3059\u3002\n\n\u7bc0\nneko :- write(meow), nl\n\n\n\u3053\u308c\u306f\u666e\u901a\u3001\u7bc0\u3068\u547c\u3070\u308c\u307e\u3059\u304c\u3001\u5225\u306e\u66f8\u304d\u65b9\u3092\u3059\u308c\u3070\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002\u3064\u307e\u308a\u3001\u7bc0\u306f':-'/2\u3084','/2\u3068\u3044\u3063\u305f\u8907\u5408\u9805\u3092\u7d44\u307f\u5408\u308f\u305b\u3066\u8868\u73fe\u3055\u308c\u3066\u3044\u307e\u3059\u3002\u3061\u306a\u307f\u306b\u672c\u4f53\u90e8\u306e\u9577\u3044\u7bc0\u3067\u306f','/2\u3092\u30cd\u30b9\u30c8\u3055\u305b\u3066\u8868\u73fe\u3057\u3066\u3044\u307e\u3059\u3002\n\n\u9805\u306b\u3088\u308b\u7bc0\u306e\u8868\u73fe\n':-'(neko, ','(write(meow), nl))\n\n\n\u3059\u3053\u3057\u8131\u7dda\u3057\u307e\u3059\u304c\u3001SWI-Prolog\u3067\u8a66\u3057\u3066\u307f\u307e\u3057\u3087\u3046\u3002\n\nSWI-Prolog\u3092\u4f7f\u3063\u305f\u4f8b\n$ swipl --quiet\n?- assert((neko :- write(meow), nl)).\ntrue.\n\n?- assert(':-'(neko , ','(write(meow), nl))).\ntrue.\n\n?- listing.\n\n:- thread_local thread_message_hook/3.\n:- dynamic thread_message_hook/3.\n:- volatile thread_message_hook/3.\n\n\n:- dynamic neko/0.\n\nneko :-\n    write(meow),\n    nl.\nneko :-\n    write(meow),\n    nl.\ntrue.\n\n\n\u7570\u306a\u308b\u8a18\u6cd5\u3067assert/1\u3055\u308c\u305f\u9805\u304clisting\u3057\u3066\u307f\u308b\u3068\u540c\u3058\u3067\u3042\u308b\u3053\u3068\u304c\u78ba\u8a8d\u3067\u304d\u307e\u3059\u3002\n\u8a71\u3092\u623b\u3057\u3066\u3001PrologCafe\u3067\u3053\u306e\u7bc0\u3092\u7d44\u307f\u7acb\u3066\u3066\u307f\u307e\u3057\u3087\u3046\u3002\n\n\u7bc0\u306e\u69cb\u7bc9\npackage maglog;\n\nimport jp.ac.kobe_u.cs.prolog.lang.StructureTerm;\nimport jp.ac.kobe_u.cs.prolog.lang.SymbolTerm;\nimport jp.ac.kobe_u.cs.prolog.lang.Term;\n\npublic class Example {\n\n    // \u300cneko :- write(meow), nl\u300d\u306e\u9805\u306b\u3088\u308b\u8868\u73fe\n    public static Term makeNeko() throws Exception {\n        // nl\n        SymbolTerm nl = SymbolTerm.makeSymbol(\"nl\", 0);\n        SymbolTerm write_nl = nl;\n        // write(meow)\n        SymbolTerm meow = SymbolTerm.makeSymbol(\"meow\", 0);\n        SymbolTerm write = SymbolTerm.makeSymbol(\"write\", 1);\n        StructureTerm write_meow = new StructureTerm(write, new Term[] { meow });\n        // ','(write(meow), nl)\n        SymbolTerm comma = SymbolTerm.makeSymbol(\",\", 2);\n        StructureTerm body = new StructureTerm(comma, new Term[] { write_meow, write_nl });\n        // neko\n        SymbolTerm neko = SymbolTerm.makeSymbol(\"neko\", 0);\n        SymbolTerm head = neko;\n        // ':-'(neko, ','(write(meow), nl))\n        SymbolTerm tonbo = SymbolTerm.makeSymbol(\":-\", 2);\n        StructureTerm clause = new StructureTerm(tonbo, new Term[] { head, body });\n        return clause;\n    }\n\n}\n\n\n\u304b\u306a\u308a\u3057\u3093\u3069\u3044\u3067\u3059\u3002\u3055\u3059\u304c\u306b\u3053\u308c\u306fProlog\u8a00\u8a9e\u3067\u66f8\u304d\u305f\u3044\u5834\u5408\u3082\u3042\u308b\u3067\u3057\u3087\u3046\u3002\u3068\u3044\u3046\u308f\u3051\u3067\u3001\u4eca\u56de\u306fJava\u8a00\u8a9e\u306eString\u3067\u8a18\u8ff0\u3055\u308c\u305fProlog\u306e\u7bc0\u3092Term\u30af\u30e9\u30b9\u306b\u5909\u63db\u3057\u3066\u307f\u3088\u3046\u3068\u3044\u3046\u30e1\u30e2\u306e\u5dfb\u3067\u3059\u3002\n\n\u8a2d\u8a08\nProlog\u3067\u306f\u3001read/1\u3084read/2\u3092\u4f7f\u3048\u3070\u5165\u529b\u30b9\u30c8\u30ea\u30fc\u30e0\u3092\u30d1\u30fc\u30b9\u3057\u3066\u9805\u3068\u3057\u3066\u8aad\u307f\u8fbc\u3080\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\u4ee5\u4e0b\u306bSWI-Prolog\u3067\u306eread/1\u306e\u4f8b\u3092\u793a\u3057\u307e\u3059\u3002\n\nbash\n$ swipl --quiet\n?- read(Term), assert(Term).\n|: neko :- write(meow), nl.\nTerm = (neko:-write(meow), nl).\n\n?- listing.\n\n:- thread_local thread_message_hook/3.\n:- dynamic thread_message_hook/3.\n:- volatile thread_message_hook/3.\n\n\n:- dynamic neko/0.\n\nneko :-\n    write(meow),\n    nl.\ntrue.\n\n?- neko.\nmeow\ntrue.\n\n\n\u7c21\u5358\u306b\u52d5\u4f5c\u3092\u30e1\u30e2\u3057\u3066\u304a\u304f\u3068\u3001\u307e\u305a\u3001read(Term)\u304c\u30b3\u30fc\u30eb\u3055\u308c\u308b\u3068\u30d7\u30ed\u30f3\u30d7\u30c8\u304c?-\u3067\u306f\u306a\u304f|:\u306b\u306a\u308a\u6a19\u6e96\u5165\u529b\u304b\u3089\u306e\u5165\u529b\u3092\u53d7\u3051\u4ed8\u3051\u307e\u3059\u3002\u3053\u3053\u3067\u30ad\u30fc\u30dc\u30fc\u30c9\u306a\u3069\u304b\u3089neko :- write(meow), nl.\u3092\u5165\u529b\u3059\u308b\u3068\u3001\u5165\u529b\u3055\u308c\u305f\u6587\u5b57\u5217\u304c\u30d1\u30fc\u30b9\u3055\u308c\u3001\u9805\u3068\u306a\u308a\u3001assert(Term)\u306b\u3088\u3063\u3066\u7bc0\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u3078\u683c\u7d0d\u3055\u308c\u307e\u3059\u3002\u6b21\u306b\u3001listing/1\u3067\u7bc0\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u306e\u5185\u5bb9\u3092\u78ba\u8a8d\u3057\u3066\u3044\u307e\u3059\u3002\u6700\u5f8c\u306b\u3001\u7bc0\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u306b\u683c\u7d0d\u3055\u308c\u305fneko/1\u3092\u30b3\u30fc\u30eb\u3057\u3066\u3044\u307e\u3059\u3002\n\u3057\u305f\u304c\u3063\u3066\u3001PrologCafe\u3092\u4f7f\u3063\u3066Java\u8a00\u8a9e\u3067read/1\u3084read/2\u3092\u4f7f\u3048\u3070\u66f8\u3051\u3070\u3001String\u3092\u30e9\u30c3\u30d7\u3057\u305fStringReader\u304b\u3089Term\u3078\u5909\u63db\u3067\u304d\u305d\u3046\u3067\u3059\u3002\n\n\u5b9f\u88c5\n\u5148\u65e5\u306e\u30e1\u30e2\u300cPrologCafe\u3067Prolog\u5b9f\u884c\u30a8\u30f3\u30b8\u30f3\u3092\u30b7\u30f3\u30b0\u30eb\u30b9\u30ec\u30c3\u30c9\u3067\u52d5\u304b\u3059\u306e\u5dfb\u300d\u3067\u4f5c\u6210\u3057\u305fPrologContext\u30af\u30e9\u30b9\u3092\u5229\u7528\u3057\u307e\u3059\u3002\n\u624b\u9806\u306f\u4ee5\u4e0b\u306e\u3068\u304a\u308a\u3067\u3059\u3002\n\n\u9805\u306e\u6587\u5b57\u5217\u3092StringReader\u306b\u98df\u308f\u305b\u308b\u3002\n\u4e0a\u8a18StringReader\u3092read/2\u306e\u5165\u529b\u30b9\u30c8\u30ea\u30fc\u30e0\u306b\u7d50\u3073\u3064\u3051\u308b\u3002\uff08read/2\u306fread/1\u3068\u9055\u3063\u3066\u4efb\u610f\u306e\u30b9\u30c8\u30ea\u30fc\u30e0\u3092\u7d50\u3073\u3064\u3051\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\uff09\n\nPrologCafe\u306eread/2\u306f\u8aad\u307f\u8fbc\u307f\u306b\u5931\u6557\u3057\u305f\u5834\u5408\u3001\u30ab\u30ec\u30f3\u30c8\u51fa\u529b\u30b9\u30c8\u30ea\u30fc\u30e0\u306b\u30a8\u30e9\u30fc\u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u66f8\u304d\u51fa\u3059\u306e\u3067\u3001set_output/1\u3067StringWriter\u3092\u30ab\u30ec\u30f3\u30c8\u51fa\u529b\u30b9\u30c8\u30ea\u30fc\u30e0\u306b\u7d50\u3073\u3064\u3051\u3066\u30a8\u30e9\u30fc\u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u53d6\u5f97\u3067\u304d\u308b\u3088\u3046\u306b\u3059\u308b\u3002\nProlog\u30a8\u30f3\u30b8\u30f3\u3092\u30b0\u30eb\u30b0\u30eb\u307e\u308f\u3059\u3068String\u304cTerm\u306b\u5909\u63db\u3055\u308c\u308b\u3002\n\n\nPrologUtil.java\npackage maglog.prolog;\n\nimport java.io.PrintWriter;\nimport java.io.PushbackReader;\nimport java.io.StringReader;\nimport java.io.StringWriter;\nimport jp.ac.kobe_u.cs.prolog.builtin.PRED_read_2;\nimport jp.ac.kobe_u.cs.prolog.builtin.PRED_set_output_1;\nimport jp.ac.kobe_u.cs.prolog.lang.JavaObjectTerm;\nimport jp.ac.kobe_u.cs.prolog.lang.Predicate;\nimport jp.ac.kobe_u.cs.prolog.lang.Success;\nimport jp.ac.kobe_u.cs.prolog.lang.Term;\nimport jp.ac.kobe_u.cs.prolog.lang.VariableTerm;\n\n/**\n * @author Masayuki Higashino\n */\npublic class PrologUtil {\n\n    public static Term read(String s) throws Exception {\n        PrologContext context = new PrologContext();\n        context.init();\n\n        StringReader reader = new StringReader(s);\n        StringWriter writer = new StringWriter();\n\n        Term input = new JavaObjectTerm(new PushbackReader(reader));\n        Term output = new JavaObjectTerm(new PrintWriter(writer));\n        Term term = new VariableTerm(context.getEngine());\n\n        Predicate p1 = new Success(context);\n        Predicate p2 = new PRED_read_2();\n        p2.setArgument(new Term[] { input, term }, p1);\n        Predicate p3 = new PRED_set_output_1();\n        p3.setArgument(new Term[] { output }, p2);\n        context.setPredicate(p3);\n\n        while (!context.isStopped())\n            context.execute();\n\n        if (context.getResult() == PrologContext.Result.FAILURE)\n            throw new Exception(writer.toString());\n        return term;\n    }\n\n}\n\n\n\n\u5b9f\u9a13\n\u3067\u306f\u5b9f\u969b\u306b\u52d5\u304b\u3057\u3066\u307f\u307e\u3057\u3087\u3046\u3002\n\nExample.java\npackage maglog;\n\nimport maglog.prolog.PrologContext;\nimport maglog.prolog.PrologUtil;\nimport jp.ac.kobe_u.cs.prolog.lang.StructureTerm;\nimport jp.ac.kobe_u.cs.prolog.lang.SymbolTerm;\nimport jp.ac.kobe_u.cs.prolog.lang.Term;\n\npublic class Example {\n\n    // \u300cneko :- write(meow), nl\u300d\u306e\u9805\u306b\u3088\u308b\u8868\u73fe\n    public static Term makeNeko() throws Exception {\n        // nl\n        SymbolTerm nl = SymbolTerm.makeSymbol(\"nl\", 0);\n        SymbolTerm write_nl = nl;\n        // write(meow)\n        SymbolTerm meow = SymbolTerm.makeSymbol(\"meow\", 0);\n        SymbolTerm write = SymbolTerm.makeSymbol(\"write\", 1);\n        StructureTerm write_meow = new StructureTerm(write, new Term[] { meow });\n        // ','(write(meow), nl)\n        SymbolTerm comma = SymbolTerm.makeSymbol(\",\", 2);\n        StructureTerm body = new StructureTerm(comma, new Term[] { write_meow, write_nl });\n        // neko\n        SymbolTerm neko = SymbolTerm.makeSymbol(\"neko\", 0);\n        SymbolTerm head = neko;\n        // ':-'(neko, ','(write(meow), nl))\n        SymbolTerm tonbo = SymbolTerm.makeSymbol(\":-\", 2);\n        StructureTerm clause = new StructureTerm(tonbo, new Term[] { head, body });\n        return clause;\n    }\n\n    public static void main(String[] args) {\n        try {\n            Term t1 = Example.makeNeko();\n            Term t2 = PrologUtil.read(\"neko :- write(meow), nl.\");\n\n            System.err.println(t2);\n            System.err.println(t1);\n\n            if (t2.equals(t1)) {\n                System.err.println(\"equals: OK\");\n            } else {\n                System.err.println(\"equals: NG\");\n            }\n\n            PrologContext c = new PrologContext();\n            c.init();\n            if (t2.unify(t1, c.getEngine().trail)) {\n                System.err.println(\"unify: OK\");\n            } else {\n                System.err.println(\"unify: NG\");\n            }\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n\n}\n\n\n\n\n\u51fa\u529b\n:-(neko,,(write(meow),nl))\n:-(neko,,(write(meow),nl))\nequals: OK\nunify: OK\n\n\nJava\u8a00\u8a9e\u3067\u306eequals\u3068Prolog\u8a00\u8a9e\u3067\u306eunify\u3082\u6210\u529f\u3057\u3066\u3044\u307e\u3059\u306d\u3002PrologUtil.read(\"neko :- write(meow), nl.\")\u3068\u3059\u308c\u3070String\u304cTerm\u306b\u5909\u63db\u3055\u308c\u308b\u308f\u3051\u3067\u3059\u3002\u3088\u3057\u3088\u3057\u3002\uff08\u30c6\u30b9\u30c8\u306f\u307e\u305f\u5225\u306e\u6a5f\u4f1a\u306b\u3002\uff09\n\n\u304a\u308f\u308a\u306b\n\u30cb\u30c3\u30c1\u3059\u304e\u3066\u30b9\u30c8\u30c3\u30af\u3055\u308c\u308b\u6c17\u304c\u3057\u306a\u3044\u3002\n\n## \u306f\u3058\u3081\u306b\n\n[PrologCafe](http://kaminari.istc.kobe-u.ac.jp/PrologCafe/)\u3068\u306fJava\u8a00\u8a9e\u3067\u5b9f\u88c5\u3055\u308c\u305fProlog\u8a00\u8a9e\u306e\u51e6\u7406\u7cfb\u3067\u3059\u3002PrologCafe\u3067\u306fProlog\u306e\u9805\u3092`Term`\u30af\u30e9\u30b9\u306b\u3088\u3063\u3066\u8868\u73fe\u3057\u3066\u3044\u307e\u3059\u3002\u3057\u304b\u3057\u3001\u8907\u96d1\u306a\u9805\u3092`Term`\u30af\u30e9\u30b9\u3067\u7d44\u307f\u7acb\u3066\u308b\u306b\u306f\u9aa8\u304c\u6298\u308c\u307e\u3059\u3002\n\n\u4f8b\u3048\u3070\u4ee5\u4e0b\u306e\u9805\u3092`Term`\u30af\u30e9\u30b9\u3067\u8868\u73fe\u3057\u305f\u3044\u3068\u3057\u307e\u3059\u3002\n\n```prolog:\u7bc0\nneko :- write(meow), nl\n```\n\n\u3053\u308c\u306f\u666e\u901a\u3001\u7bc0\u3068\u547c\u3070\u308c\u307e\u3059\u304c\u3001\u5225\u306e\u66f8\u304d\u65b9\u3092\u3059\u308c\u3070\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002\u3064\u307e\u308a\u3001\u7bc0\u306f`':-'/2`\u3084`','/2`\u3068\u3044\u3063\u305f\u8907\u5408\u9805\u3092\u7d44\u307f\u5408\u308f\u305b\u3066\u8868\u73fe\u3055\u308c\u3066\u3044\u307e\u3059\u3002\u3061\u306a\u307f\u306b\u672c\u4f53\u90e8\u306e\u9577\u3044\u7bc0\u3067\u306f`','/2`\u3092\u30cd\u30b9\u30c8\u3055\u305b\u3066\u8868\u73fe\u3057\u3066\u3044\u307e\u3059\u3002\n\n```prolog:\u9805\u306b\u3088\u308b\u7bc0\u306e\u8868\u73fe\n':-'(neko, ','(write(meow), nl))\n```\n\n\u3059\u3053\u3057\u8131\u7dda\u3057\u307e\u3059\u304c\u3001SWI-Prolog\u3067\u8a66\u3057\u3066\u307f\u307e\u3057\u3087\u3046\u3002\n\n```bash:SWI-Prolog\u3092\u4f7f\u3063\u305f\u4f8b\n$ swipl --quiet\n?- assert((neko :- write(meow), nl)).\ntrue.\n\n?- assert(':-'(neko , ','(write(meow), nl))).\ntrue.\n\n?- listing.\n\n:- thread_local thread_message_hook/3.\n:- dynamic thread_message_hook/3.\n:- volatile thread_message_hook/3.\n\n\n:- dynamic neko/0.\n\nneko :-\n\twrite(meow),\n\tnl.\nneko :-\n\twrite(meow),\n\tnl.\ntrue.\n```\n\n\u7570\u306a\u308b\u8a18\u6cd5\u3067`assert/1`\u3055\u308c\u305f\u9805\u304c`listing`\u3057\u3066\u307f\u308b\u3068\u540c\u3058\u3067\u3042\u308b\u3053\u3068\u304c\u78ba\u8a8d\u3067\u304d\u307e\u3059\u3002\n\n\u8a71\u3092\u623b\u3057\u3066\u3001PrologCafe\u3067\u3053\u306e\u7bc0\u3092\u7d44\u307f\u7acb\u3066\u3066\u307f\u307e\u3057\u3087\u3046\u3002\n\n```java:\u7bc0\u306e\u69cb\u7bc9\npackage maglog;\n\nimport jp.ac.kobe_u.cs.prolog.lang.StructureTerm;\nimport jp.ac.kobe_u.cs.prolog.lang.SymbolTerm;\nimport jp.ac.kobe_u.cs.prolog.lang.Term;\n\npublic class Example {\n\n\t// \u300cneko :- write(meow), nl\u300d\u306e\u9805\u306b\u3088\u308b\u8868\u73fe\n\tpublic static Term makeNeko() throws Exception {\n\t\t// nl\n\t\tSymbolTerm nl = SymbolTerm.makeSymbol(\"nl\", 0);\n\t\tSymbolTerm write_nl = nl;\n\t\t// write(meow)\n\t\tSymbolTerm meow = SymbolTerm.makeSymbol(\"meow\", 0);\n\t\tSymbolTerm write = SymbolTerm.makeSymbol(\"write\", 1);\n\t\tStructureTerm write_meow = new StructureTerm(write, new Term[] { meow });\n\t\t// ','(write(meow), nl)\n\t\tSymbolTerm comma = SymbolTerm.makeSymbol(\",\", 2);\n\t\tStructureTerm body = new StructureTerm(comma, new Term[] { write_meow, write_nl });\n\t\t// neko\n\t\tSymbolTerm neko = SymbolTerm.makeSymbol(\"neko\", 0);\n\t\tSymbolTerm head = neko;\n\t\t// ':-'(neko, ','(write(meow), nl))\n\t\tSymbolTerm tonbo = SymbolTerm.makeSymbol(\":-\", 2);\n\t\tStructureTerm clause = new StructureTerm(tonbo, new Term[] { head, body });\n\t\treturn clause;\n\t}\n\n}\n```\n\n\u304b\u306a\u308a\u3057\u3093\u3069\u3044\u3067\u3059\u3002\u3055\u3059\u304c\u306b\u3053\u308c\u306fProlog\u8a00\u8a9e\u3067\u66f8\u304d\u305f\u3044\u5834\u5408\u3082\u3042\u308b\u3067\u3057\u3087\u3046\u3002\u3068\u3044\u3046\u308f\u3051\u3067\u3001\u4eca\u56de\u306fJava\u8a00\u8a9e\u306e`String`\u3067\u8a18\u8ff0\u3055\u308c\u305fProlog\u306e\u7bc0\u3092`Term`\u30af\u30e9\u30b9\u306b\u5909\u63db\u3057\u3066\u307f\u3088\u3046\u3068\u3044\u3046\u30e1\u30e2\u306e\u5dfb\u3067\u3059\u3002\n\n## \u8a2d\u8a08\n\nProlog\u3067\u306f\u3001`read/1`\u3084`read/2`\u3092\u4f7f\u3048\u3070\u5165\u529b\u30b9\u30c8\u30ea\u30fc\u30e0\u3092\u30d1\u30fc\u30b9\u3057\u3066\u9805\u3068\u3057\u3066\u8aad\u307f\u8fbc\u3080\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\u4ee5\u4e0b\u306bSWI-Prolog\u3067\u306e`read/1`\u306e\u4f8b\u3092\u793a\u3057\u307e\u3059\u3002\n\n```linenums:bash:linenums:SWI-Prolog\u3067\u306e\u4f8b\n$ swipl --quiet\n?- read(Term), assert(Term).\n|: neko :- write(meow), nl.\nTerm = (neko:-write(meow), nl).\n\n?- listing.\n\n:- thread_local thread_message_hook/3.\n:- dynamic thread_message_hook/3.\n:- volatile thread_message_hook/3.\n\n\n:- dynamic neko/0.\n\nneko :-\n\twrite(meow),\n\tnl.\ntrue.\n\n?- neko.\nmeow\ntrue.\n```\n\n\u7c21\u5358\u306b\u52d5\u4f5c\u3092\u30e1\u30e2\u3057\u3066\u304a\u304f\u3068\u3001\u307e\u305a\u3001`read(Term)`\u304c\u30b3\u30fc\u30eb\u3055\u308c\u308b\u3068\u30d7\u30ed\u30f3\u30d7\u30c8\u304c`?-`\u3067\u306f\u306a\u304f`|:`\u306b\u306a\u308a\u6a19\u6e96\u5165\u529b\u304b\u3089\u306e\u5165\u529b\u3092\u53d7\u3051\u4ed8\u3051\u307e\u3059\u3002\u3053\u3053\u3067\u30ad\u30fc\u30dc\u30fc\u30c9\u306a\u3069\u304b\u3089`neko :- write(meow), nl.`\u3092\u5165\u529b\u3059\u308b\u3068\u3001\u5165\u529b\u3055\u308c\u305f\u6587\u5b57\u5217\u304c\u30d1\u30fc\u30b9\u3055\u308c\u3001\u9805\u3068\u306a\u308a\u3001`assert(Term)`\u306b\u3088\u3063\u3066\u7bc0\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u3078\u683c\u7d0d\u3055\u308c\u307e\u3059\u3002\u6b21\u306b\u3001`listing/1`\u3067\u7bc0\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u306e\u5185\u5bb9\u3092\u78ba\u8a8d\u3057\u3066\u3044\u307e\u3059\u3002\u6700\u5f8c\u306b\u3001\u7bc0\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u306b\u683c\u7d0d\u3055\u308c\u305f`neko/1`\u3092\u30b3\u30fc\u30eb\u3057\u3066\u3044\u307e\u3059\u3002\n\n\u3057\u305f\u304c\u3063\u3066\u3001PrologCafe\u3092\u4f7f\u3063\u3066Java\u8a00\u8a9e\u3067`read/1`\u3084`read/2`\u3092\u4f7f\u3048\u3070\u66f8\u3051\u3070\u3001`String`\u3092\u30e9\u30c3\u30d7\u3057\u305f`StringReader`\u304b\u3089`Term`\u3078\u5909\u63db\u3067\u304d\u305d\u3046\u3067\u3059\u3002\n\n## \u5b9f\u88c5\n\n\u5148\u65e5\u306e\u30e1\u30e2\u300c[PrologCafe\u3067Prolog\u5b9f\u884c\u30a8\u30f3\u30b8\u30f3\u3092\u30b7\u30f3\u30b0\u30eb\u30b9\u30ec\u30c3\u30c9\u3067\u52d5\u304b\u3059\u306e\u5dfb](http://qiita.com/61503891/items/ce883118325a4fe73c68)\u300d\u3067\u4f5c\u6210\u3057\u305f`PrologContext`\u30af\u30e9\u30b9\u3092\u5229\u7528\u3057\u307e\u3059\u3002\n\n\u624b\u9806\u306f\u4ee5\u4e0b\u306e\u3068\u304a\u308a\u3067\u3059\u3002\n\n1. \u9805\u306e\u6587\u5b57\u5217\u3092`StringReader`\u306b\u98df\u308f\u305b\u308b\u3002\n2. \u4e0a\u8a18`StringReader`\u3092`read/2`\u306e\u5165\u529b\u30b9\u30c8\u30ea\u30fc\u30e0\u306b\u7d50\u3073\u3064\u3051\u308b\u3002\uff08`read/2`\u306f`read/1`\u3068\u9055\u3063\u3066\u4efb\u610f\u306e\u30b9\u30c8\u30ea\u30fc\u30e0\u3092\u7d50\u3073\u3064\u3051\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\uff09\n3. [PrologCafe\u306e`read/2`\u306f\u8aad\u307f\u8fbc\u307f\u306b\u5931\u6557\u3057\u305f\u5834\u5408\u3001\u30ab\u30ec\u30f3\u30c8\u51fa\u529b\u30b9\u30c8\u30ea\u30fc\u30e0\u306b\u30a8\u30e9\u30fc\u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u66f8\u304d\u51fa\u3059](https://github.com/mh61503891/plcafe/blob/master/src/builtin/builtins.pl#L1059)\u306e\u3067\u3001`set_output/1`\u3067`StringWriter`\u3092\u30ab\u30ec\u30f3\u30c8\u51fa\u529b\u30b9\u30c8\u30ea\u30fc\u30e0\u306b\u7d50\u3073\u3064\u3051\u3066\u30a8\u30e9\u30fc\u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u53d6\u5f97\u3067\u304d\u308b\u3088\u3046\u306b\u3059\u308b\u3002\n4. Prolog\u30a8\u30f3\u30b8\u30f3\u3092\u30b0\u30eb\u30b0\u30eb\u307e\u308f\u3059\u3068`String`\u304c`Term`\u306b\u5909\u63db\u3055\u308c\u308b\u3002\n\n```PrologUtil.java\npackage maglog.prolog;\n\nimport java.io.PrintWriter;\nimport java.io.PushbackReader;\nimport java.io.StringReader;\nimport java.io.StringWriter;\nimport jp.ac.kobe_u.cs.prolog.builtin.PRED_read_2;\nimport jp.ac.kobe_u.cs.prolog.builtin.PRED_set_output_1;\nimport jp.ac.kobe_u.cs.prolog.lang.JavaObjectTerm;\nimport jp.ac.kobe_u.cs.prolog.lang.Predicate;\nimport jp.ac.kobe_u.cs.prolog.lang.Success;\nimport jp.ac.kobe_u.cs.prolog.lang.Term;\nimport jp.ac.kobe_u.cs.prolog.lang.VariableTerm;\n\n/**\n * @author Masayuki Higashino\n */\npublic class PrologUtil {\n\n\tpublic static Term read(String s) throws Exception {\n\t\tPrologContext context = new PrologContext();\n\t\tcontext.init();\n\n\t\tStringReader reader = new StringReader(s);\n\t\tStringWriter writer = new StringWriter();\n\n\t\tTerm input = new JavaObjectTerm(new PushbackReader(reader));\n\t\tTerm output = new JavaObjectTerm(new PrintWriter(writer));\n\t\tTerm term = new VariableTerm(context.getEngine());\n\n\t\tPredicate p1 = new Success(context);\n\t\tPredicate p2 = new PRED_read_2();\n\t\tp2.setArgument(new Term[] { input, term }, p1);\n\t\tPredicate p3 = new PRED_set_output_1();\n\t\tp3.setArgument(new Term[] { output }, p2);\n\t\tcontext.setPredicate(p3);\n\n\t\twhile (!context.isStopped())\n\t\t\tcontext.execute();\n\n\t\tif (context.getResult() == PrologContext.Result.FAILURE)\n\t\t\tthrow new Exception(writer.toString());\n\t\treturn term;\n\t}\n\n}\n```\n\n## \u5b9f\u9a13\n\n\u3067\u306f\u5b9f\u969b\u306b\u52d5\u304b\u3057\u3066\u307f\u307e\u3057\u3087\u3046\u3002\n\n```Example.java\npackage maglog;\n\nimport maglog.prolog.PrologContext;\nimport maglog.prolog.PrologUtil;\nimport jp.ac.kobe_u.cs.prolog.lang.StructureTerm;\nimport jp.ac.kobe_u.cs.prolog.lang.SymbolTerm;\nimport jp.ac.kobe_u.cs.prolog.lang.Term;\n\npublic class Example {\n\n\t// \u300cneko :- write(meow), nl\u300d\u306e\u9805\u306b\u3088\u308b\u8868\u73fe\n\tpublic static Term makeNeko() throws Exception {\n\t\t// nl\n\t\tSymbolTerm nl = SymbolTerm.makeSymbol(\"nl\", 0);\n\t\tSymbolTerm write_nl = nl;\n\t\t// write(meow)\n\t\tSymbolTerm meow = SymbolTerm.makeSymbol(\"meow\", 0);\n\t\tSymbolTerm write = SymbolTerm.makeSymbol(\"write\", 1);\n\t\tStructureTerm write_meow = new StructureTerm(write, new Term[] { meow });\n\t\t// ','(write(meow), nl)\n\t\tSymbolTerm comma = SymbolTerm.makeSymbol(\",\", 2);\n\t\tStructureTerm body = new StructureTerm(comma, new Term[] { write_meow, write_nl });\n\t\t// neko\n\t\tSymbolTerm neko = SymbolTerm.makeSymbol(\"neko\", 0);\n\t\tSymbolTerm head = neko;\n\t\t// ':-'(neko, ','(write(meow), nl))\n\t\tSymbolTerm tonbo = SymbolTerm.makeSymbol(\":-\", 2);\n\t\tStructureTerm clause = new StructureTerm(tonbo, new Term[] { head, body });\n\t\treturn clause;\n\t}\n\n\tpublic static void main(String[] args) {\n\t\ttry {\n\t\t\tTerm t1 = Example.makeNeko();\n\t\t\tTerm t2 = PrologUtil.read(\"neko :- write(meow), nl.\");\n\n\t\t\tSystem.err.println(t2);\n\t\t\tSystem.err.println(t1);\n\n\t\t\tif (t2.equals(t1)) {\n\t\t\t\tSystem.err.println(\"equals: OK\");\n\t\t\t} else {\n\t\t\t\tSystem.err.println(\"equals: NG\");\n\t\t\t}\n\n\t\t\tPrologContext c = new PrologContext();\n\t\t\tc.init();\n\t\t\tif (t2.unify(t1, c.getEngine().trail)) {\n\t\t\t\tSystem.err.println(\"unify: OK\");\n\t\t\t} else {\n\t\t\t\tSystem.err.println(\"unify: NG\");\n\t\t\t}\n\t\t} catch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t}\n\n}\n\n```\n\n```bash:\u51fa\u529b\n:-(neko,,(write(meow),nl))\n:-(neko,,(write(meow),nl))\nequals: OK\nunify: OK\n```\n\nJava\u8a00\u8a9e\u3067\u306e`equals`\u3068Prolog\u8a00\u8a9e\u3067\u306e`unify`\u3082\u6210\u529f\u3057\u3066\u3044\u307e\u3059\u306d\u3002`PrologUtil.read(\"neko :- write(meow), nl.\")`\u3068\u3059\u308c\u3070`String`\u304c`Term`\u306b\u5909\u63db\u3055\u308c\u308b\u308f\u3051\u3067\u3059\u3002\u3088\u3057\u3088\u3057\u3002\uff08\u30c6\u30b9\u30c8\u306f\u307e\u305f\u5225\u306e\u6a5f\u4f1a\u306b\u3002\uff09\n\n## \u304a\u308f\u308a\u306b\n\n\u30cb\u30c3\u30c1\u3059\u304e\u3066\u30b9\u30c8\u30c3\u30af\u3055\u308c\u308b\u6c17\u304c\u3057\u306a\u3044\u3002\n", "tags": ["PrologCafe", "Java", "Prolog", "Maglog"]}