{"context": " More than 1 year has passed since last update.\n\nEnvironment\n\nSakura VPS (2G plan: 2G memory with 200GB HDD)\nPartitioning as follows (all in primary partition because we don't have to care about data back up or HDD access management):\n\n/dev/vda1 300MB /boot ext4 defaults [bootable]\n/dev/vda2 2GB   swap  swap\n/dev/vda3 rest  /     ext4 user_xattr\n\n\nDebian set up\n\nPrivileges\n\nInstalled Debian 7 (wheezy)\nCopy my ssh publickey to ~/.ssh/authorized_keys, and chmod to 400.\nConfigure /etc/ssh/sshd_config to deny root-login and password authentication.\n\nPermitRootLogin no\nRSAAuthentication no\nPasswordAuthentication no\n\n\nservice ssh restart\napt-get install sudo\nAdd wheel group, and add my account and root to the group.\nAdd wheel to sudoers.\n\nThen log-in as my account via SSH. Following operations are done not as root but \"my\" account.\n\nUpdate to Debian Jessie (testing)\nI want to use not the stable release \"wheezy\" but the testing release \"jessie\". Certainly it is not recommended for beginners.\n\nChange source from wheezy to jessie (testing) by editing /etc/apt/sources.list.\nAppend contrib and non-free to the list.\n\napt-get update and apt-get dist-upgrade.\n\nAlso I want to use gcc 4.9.\n\nInstall gcc-4.9 and g++-4.9 (and recommended packages) with aptitude.\nUse alternatives system as follows. (Here I add gcc-* as slave in addition to g++, but this can be bad treatement... I don't know very well.)\n\nsudo update-alternatives --install /usr/bin/gcc   gcc        /usr/bin/gcc-4.8 60 \\\n                    --slave   /usr/bin/g++        g++        /usr/bin/g++-4.8 \\\n                    --slave   /usr/bin/gcc-ar     gcc-ar     /usr/bin/gcc-ar-4.8 \\\n                    --slave   /usr/bin/gcc-nm     gcc-nm     /usr/bin/gcc-nm-4.8 \\\n                    --slave   /usr/bin/gcc-ranlib gcc-ranlib /usr/bin/gcc-ranlib-4.8 \\\n                    --slave   /usr/bin/gcov       gcov       /usr/bin/gcov-4.8\nsudo update-alternatives --install /usr/bin/gcc   gcc        /usr/bin/gcc-4.9 40 \\\n                    --slave   /usr/bin/g++        g++        /usr/bin/g++-4.9 \\\n                    --slave   /usr/bin/gcc-ar     gcc-ar     /usr/bin/gcc-ar-4.9 \\\n                    --slave   /usr/bin/gcc-nm     gcc-nm     /usr/bin/gcc-nm-4.9 \\\n                    --slave   /usr/bin/gcc-ranlib gcc-ranlib /usr/bin/gcc-ranlib-4.9 \\\n                    --slave   /usr/bin/gcov       gcov       /usr/bin/gcov-4.9\n\n\nAlso I install gfortran-4.9 as sudo apt-get install gfortran-4.9; sudo ln -s /usr/bin/gfortran-4.9 /usr/bin/gfortran.\n\n\nConfiguration with Homeshick\nsudo apt-get install git zsh zsh-dev\nchsh\n# to choose /usr/bin/zsh as login shell, and log-out and log-in.\n\n# See https://github.com/andsens/homeshick/wiki/Installation for latest commands.\ngit clone git://github.com/andsens/homeshick.git $HOME/.homesick/repos/homeshick\n\n\nInstall vim with +lua option\nI wanted to install vim with +lua option in order to use neocomplete.\nsudo apt-get build-dep vim\nsudo apt-get install devscripts\n\nsudo apt-get source vim\ncd vim-7.4.273/debian\nvi rules\n#\n# where modify from\n#   CFGFLAGS_vim-basic:=$(CFGFLAGS) $(OPTFLAGS) $(NOXFLAGS) $(NOINTERPFLAGS)\n# to\n#   CFGFLAGS_vim-basic:=$(CFGFLAGS) $(OPTFLAGS) $(NOXFLAGS) $(ALLINTERPFLAGS)\n#\ndebuild -uc -us -b\ncd ../..\nsudo dpkg -i vim_7.4.273-2_amd64.deb vim-common_7.4.273-2_amd64.deb vim-tiny_7.4.273-2_amd64.deb vim-runtime_7.4.273-2_all.deb\nsudo apt-mark hold vim vim-tiny vim-runtime\n\n\niptables and memcached\n\nFirewall (iptables) configuration\n\nmemcached (install at this stage for SSL caching of apache2)\n\n(I will perhaps publish a git repository which contains all of my configuration files are stored. Once it is published I will here add links to the iptables configuration files.)\n\nFor HTTP/IMAP with SSL: OpenSSL Private CA and SSL certificates\nI want to make validation lifetimes longer. Usually it is 1 year for certificates and 3 years for CA, but I will set 2 years and 4 years respectively. It makes SSL less secure, but I will admit it.\n\nBuild private CA as CA manager\n\nYou will do this process with playing the role of the CA manager, i.e., who will sign certificates.\ncd /etc/ssl\n\n# To change 'dir' and 'default_days' as follows:\nsudo vi openssl.cnf\n# [ CA_default ]\n# dir          = ./mishoCA\n# default_days = 730\n\n# I don't want to modify CA.pl directly.\nsudo cp /usr/lib/ssl/misc/CA.pl .\n\n# To change 'dir' and 'default_days' as follows:\nsudo vi CA.pl\n# $CATOP=\"./mishoCA\";\n# $DAYS=\"-days 760\";\n# $CADAYS=\"-days 1520\";\n\nsudo ./CA.pl -newca\n\nls\n# certs/  private/  mishoCA/  CA.pl  openssl.cnf \n\n\nYou will do this process with playing the role of the server manager, who generates a SSL certificate and is going to ask the CA manager to sign it.\nsudo ./CA.pl -newreq   # as the user who uses the certification.\n\n\nSign the request as the manager\n\nThen, as the manager, you will sign the certification.\nsudo ./CA.pl -sign\n# newcert.pem will be generated from newreq.pem.\n\nsudo rm newreq.pem\nsudo mv newcert.pem www_cert.pem\nsudo mv newkey.pem www_key.pem\n\n# Remove passphrase from the certificate (insecure!)\nsudo openssl rsa -in www_key.pem -out www_key.pem \n\nsudo chown root:www-data www_key.pem www_cert.pem\nsudo chmod 640 www_key/pem www_cert.pem\n\nsudo mv *.pem /etc/ssl/mishoCA/certs\n\n\nApache2 configuration\nI set up\n\nSVN server (apache2 dav-svn)\nwebsvn\n\n(I will perhaps publish a git repository which contains all of my configuration files are stored. Once it is published I will here add links to the iptables configuration files.)\n\nPostfix as SMTP manager, with stunnel for SMTP auth.\nsudo apt-get install postfix stunnel\nvi /etc/default/stunnel # to change ENABLED=0 to ENABLED=1\nvi /etc/stunnel4/stunnel.conf\n#[smtp-tls-wrapper]\n#accept = 11125\n#client = yes\n#connect = mail.example.com:465\nvi /etc/postfix/main.cf\n# relayhost = [127.0.0.1]:11125\n# smtp_sasl_auth_enable = yes\n# smtp_sasl_password_maps = hash:/etc/postfix/sasl_passwd\n# smtp_sasl_security_options = noanonymous\nvi /etc/postfix/sasl_passwd\n# [127.0.0.1]:11125 sho.iwamoto@ipmu.jp:###PASSWORD###\nsudo chown root: /etc/postfix/sasl_passwd\nsudo chmod 600 /etc/postfix/sasl_passwd\nsudo postmap /etc/postfix/sasl_passwd\nsudo service postfix restart; sudo service stunnel4 restart               \n\n\nGitlab\nWith latest Ruby and Git, and with Postfix installed, it is easy to install Gitlab with following the instruction.\nLinks to Apache2 configuration will be added here once configuration files are published.\n\nDovecot IMAP server\nInstallation.\nsudo apt-get install dovecot-imapd\ncd /etc/dovecot\nopenssl x509 -text -noout -in dovecot.pem\n# Issuer:  O=Dovecot mail server, OU=dav.misho-web.com, CN=dav.misho-web.com/emailAddress=root@misho-web.com\n# Subject: O=Dovecot mail server, OU=dav.misho-web.com, CN=dav.misho-web.com/emailAddress=root@misho-web.com\n\nThe installed SSL certificates are self-signed. Replace them with mishoCA-signed ones\ncd /etc/ssl\nsudo ./CA.pl -newreq\nsudo ./CA.pl -sign\nsudo openssl rsa -in newkey.pem -out newkey.pem #to remove password protection\nsudo mv newcert.pem /etc/dovecot/dovecot.pem\nsudo mv newkey.pem /etc/dovecot/private/dovecot.pem\nsudo rm newreq.pem\ncd /etc/dovecot\nopenssl x509 -text -noout -in dovecot.pem\n# Issuer:  C=JP, ST=Tokyo, O=Sho Iwamoto / Misho, OU=CA manager, CN=misho-web.com/emailAddress=webmaster@misho-web.com\n# Subject: C=JP, ST=Tokyo, O=Sho Iwamoto / Misho, OU=IMAP server, CN=dav.misho-web.com\n\nUser management. I will manage with passwdfile scheme. In the config file,\npassdb {\n  driver = passwd-file\n  args = scheme=CRYPT username_format=%u /etc/dovecot/users\n}\nuserdb {\n  driver = passwd-file\n  args = username_format=%u /etc/dovecot/users\n}\n\nand /etc/dovecot/users is, like,\nuser:{CRAM-MD5}abcde12345:1000:1000::/home/misho::\n\nThis file is userdb file as well as passdb file. As I set mail_location = maildir:~/.Maildir, and as I do not prepare any other userdb scheme, I had to specify the home directory (/home/misho) here.\nAlso I want to required SSL client certification.\nI had to create CERT+CRL file as:\ncd /etc/ssl\nopenssl ca -gencrl -out crl.pem\nmv crl.pem /etc/ssl/mishoCA\ncd /etc/ssl/mishoCA\ncat cacert.pem crl.pem > cacert_and_crl.pem\n\nand set the file as\nauth_ssl_require_client_cert = yes\nssl_verify_client_cert = yes\nssl_ca = </etc/ssl/mishoCA/cacert_and_crl.pem\n\n\nFetchmail + Dovecot + Sieve\nInstall as sudo apt-get install fetchmail dovecot-sieve, configure your ~/.fetchmailrc file.\nYou had better set set no bouncemail in your .fetchmailrc. When fetchmail fails to deliver a message, it send a failure notice to YOU with this option, while THE SENDER without this option.\n\n~/.fetchmailrc\nset postmaster webmaster@misho-web.com\n# set logfile \"/home/misho/fetchmail.log\"\nset no bouncemail   # <= important!\n\ndefaults\n  uidl\n  no mimedecode\n  mda \"/usr/lib/dovecot/deliver -d misho\"\n  keep\n\npoll pop.XXX.ne.jp\n  protocol pop3\n  user misho\n  password XXXXXXX\n  keep # <= at the first time, not to lose messages\n\n\nThen told dovecot to use sieve plugin:\n\ndovecot-configuration\nlda_mailbox_autocreate = yes\nlda_mailbox_autosubscribe = yes\nprotocol lda {\n  debug_log_path = /dev/null\n  info_log_path = /dev/null\n  log_path = /dev/null\n  mail_plugins = \"sieve\"\n}\n\n\nAlso told dovecot to wake-up fetchmail.\n/usr/sbin/dovecot --version\nsudo apt-get install dovecot-dev\n\ngit clone https://github.com/marschap/fetchmail_wakeup.git\ncd fetchmail_wakeup\nvi Makefile # to configure\nmake\nsudo make install\n\nWith this wake-up module, fetchmail is waken up when the user connects the IMAP server and receives their email, which is shown in the log as\n\n/home/misho/fetchmail.log\nfetchmail: awakened by User defined signal 1\nfetchmail: xxx messages (xxx seen) for ...\n\n\n\nznc\n\nInstall and configure\nsudo apt-get install znc\nznc --makeconf\n\n\nSign the SSL key with the CA\ncd ~/.znc/\nopenssl req -new -key znc.pem -text -out newreq.pem\ncd /etc/ssl\nsudo ln -s ~/.znc/znc.pem newkey.pem\nsudo ln -s ~/.znc/newreq.pem\nsudo ./CA.pl -sign\nsudo mv newcert.pem ~/.znc/cert.pem\nsudo rm newkey.pem newreq.pem\ncd ~/.znc\nrm newreq.pem\nvi cert.pem znc.pem\n# to overwrite pubkey (CERTIFICATE) in znc.pem with the one in cert.pem (signed pubkey).\n\n\nClam Anti-virus\n$ sudo apt-get clamav clamav-daemon\n$ sudo cpkg-reconfigure clamav-daemon\n\nI do not understand whether I should add cron job or not...\n\n## Environment\n\n* Sakura VPS (2G plan: 2G memory with 200GB HDD)\n* Partitioning as follows (all in primary partition because we don't have to care about data back up or HDD access management):\n\n```\n/dev/vda1 300MB /boot ext4 defaults [bootable]\n/dev/vda2 2GB   swap  swap\n/dev/vda3 rest  /     ext4 user_xattr\n```\n\n## Debian set up\n\n### Privileges\n* Installed Debian 7 (wheezy)\n* Copy my ssh publickey to `~/.ssh/authorized_keys`, and `chmod` to `400`.\n* Configure `/etc/ssh/sshd_config` to deny `root`-login and password authentication.\n\n```\nPermitRootLogin no\nRSAAuthentication no\nPasswordAuthentication no\n```\n\n* `service ssh restart`\n* `apt-get install sudo`\n* Add `wheel` group, and add my account and `root` to the group.\n* Add `wheel` to sudoers.\n\nThen log-in as my account via SSH. Following operations are done not as root but \"my\" account.\n\n### Update to Debian Jessie (testing)\n\nI want to use not the stable release \"wheezy\" but the testing release \"jessie\". Certainly it is not recommended for beginners.\n\n* Change source from wheezy to jessie (testing) by editing `/etc/apt/sources.list`.\n* Append `contrib` and `non-free` to the list.\n* `apt-get update` and `apt-get dist-upgrade`.\n\nAlso I want to use gcc 4.9.\n\n* Install `gcc-4.9` and `g++-4.9` (and recommended packages) with aptitude.\n* Use alternatives system as follows. (Here I add `gcc-*` as slave in addition to `g++`, but this can be bad treatement... I don't know very well.)\n\n```\nsudo update-alternatives --install /usr/bin/gcc   gcc        /usr/bin/gcc-4.8 60 \\\n                    --slave   /usr/bin/g++        g++        /usr/bin/g++-4.8 \\\n                    --slave   /usr/bin/gcc-ar     gcc-ar     /usr/bin/gcc-ar-4.8 \\\n                    --slave   /usr/bin/gcc-nm     gcc-nm     /usr/bin/gcc-nm-4.8 \\\n                    --slave   /usr/bin/gcc-ranlib gcc-ranlib /usr/bin/gcc-ranlib-4.8 \\\n                    --slave   /usr/bin/gcov       gcov       /usr/bin/gcov-4.8\nsudo update-alternatives --install /usr/bin/gcc   gcc        /usr/bin/gcc-4.9 40 \\\n                    --slave   /usr/bin/g++        g++        /usr/bin/g++-4.9 \\\n                    --slave   /usr/bin/gcc-ar     gcc-ar     /usr/bin/gcc-ar-4.9 \\\n                    --slave   /usr/bin/gcc-nm     gcc-nm     /usr/bin/gcc-nm-4.9 \\\n                    --slave   /usr/bin/gcc-ranlib gcc-ranlib /usr/bin/gcc-ranlib-4.9 \\\n                    --slave   /usr/bin/gcov       gcov       /usr/bin/gcov-4.9\n```\n\n* Also I install `gfortran-4.9` as `sudo apt-get install gfortran-4.9; sudo ln -s /usr/bin/gfortran-4.9 /usr/bin/gfortran`.\n\n### Configuration with Homeshick\n\n```shell-session\nsudo apt-get install git zsh zsh-dev\nchsh\n# to choose /usr/bin/zsh as login shell, and log-out and log-in.\n\n# See https://github.com/andsens/homeshick/wiki/Installation for latest commands.\ngit clone git://github.com/andsens/homeshick.git $HOME/.homesick/repos/homeshick\n```\n\n### Install vim with `+lua` option\nI wanted to install vim with `+lua` option in order to use neocomplete.\n\n```shell-session\nsudo apt-get build-dep vim\nsudo apt-get install devscripts\n\nsudo apt-get source vim\ncd vim-7.4.273/debian\nvi rules\n#\n# where modify from\n#   CFGFLAGS_vim-basic:=$(CFGFLAGS) $(OPTFLAGS) $(NOXFLAGS) $(NOINTERPFLAGS)\n# to\n#   CFGFLAGS_vim-basic:=$(CFGFLAGS) $(OPTFLAGS) $(NOXFLAGS) $(ALLINTERPFLAGS)\n#\ndebuild -uc -us -b\ncd ../..\nsudo dpkg -i vim_7.4.273-2_amd64.deb vim-common_7.4.273-2_amd64.deb vim-tiny_7.4.273-2_amd64.deb vim-runtime_7.4.273-2_all.deb\nsudo apt-mark hold vim vim-tiny vim-runtime\n```\n\n## iptables and memcached\n\n* Firewall (`iptables`) configuration\n* `memcached` (install at this stage for SSL caching of apache2)\n\n(I will perhaps publish a git repository which contains all of my configuration files are stored. Once it is published I will here add links to the iptables configuration files.)\n\n\n## For HTTP/IMAP with SSL: OpenSSL Private CA and SSL certificates\n\nI want to make validation lifetimes longer. Usually it is 1 year for certificates and 3 years for CA, but I will set 2 years and 4 years respectively. It makes SSL less secure, but I will admit it.\n\n#### Build private CA ***as CA manager***\n\nYou will do this process with playing the role of the CA manager, i.e., who will sign certificates.\n\n```sh\ncd /etc/ssl\n\n# To change 'dir' and 'default_days' as follows:\nsudo vi openssl.cnf\n# [ CA_default ]\n# dir          = ./mishoCA\n# default_days = 730\n\n# I don't want to modify CA.pl directly.\nsudo cp /usr/lib/ssl/misc/CA.pl .\n\n# To change 'dir' and 'default_days' as follows:\nsudo vi CA.pl\n# $CATOP=\"./mishoCA\";\n# $DAYS=\"-days 760\";\n# $CADAYS=\"-days 1520\";\n\nsudo ./CA.pl -newca\n\nls\n# certs/  private/  mishoCA/  CA.pl  openssl.cnf \n\n```\n\nYou will do this process with playing the role of the server manager, who generates a SSL certificate and is going to ask the CA manager to sign it.\n\n```\nsudo ./CA.pl -newreq   # as the user who uses the certification.\n```\n\n#### Sign the request ***as the manager***\n\nThen, as the manager, you will sign the certification.\n\n```\nsudo ./CA.pl -sign\n# newcert.pem will be generated from newreq.pem.\n\nsudo rm newreq.pem\nsudo mv newcert.pem www_cert.pem\nsudo mv newkey.pem www_key.pem\n\n# Remove passphrase from the certificate (insecure!)\nsudo openssl rsa -in www_key.pem -out www_key.pem \n\nsudo chown root:www-data www_key.pem www_cert.pem\nsudo chmod 640 www_key/pem www_cert.pem\n\nsudo mv *.pem /etc/ssl/mishoCA/certs\n```\n\n\n\n## Apache2 configuration\n\nI set up\n\n* SVN server (apache2 dav-svn)\n* websvn\n\n(I will perhaps publish a git repository which contains all of my configuration files are stored. Once it is published I will here add links to the iptables configuration files.)\n\n\n## Postfix as SMTP manager, with stunnel for SMTP auth.\n```\nsudo apt-get install postfix stunnel\nvi /etc/default/stunnel # to change ENABLED=0 to ENABLED=1\nvi /etc/stunnel4/stunnel.conf\n#[smtp-tls-wrapper]\n#accept = 11125\n#client = yes\n#connect = mail.example.com:465\nvi /etc/postfix/main.cf\n# relayhost = [127.0.0.1]:11125\n# smtp_sasl_auth_enable = yes\n# smtp_sasl_password_maps = hash:/etc/postfix/sasl_passwd\n# smtp_sasl_security_options = noanonymous\nvi /etc/postfix/sasl_passwd\n# [127.0.0.1]:11125 sho.iwamoto@ipmu.jp:###PASSWORD###\nsudo chown root: /etc/postfix/sasl_passwd\nsudo chmod 600 /etc/postfix/sasl_passwd\nsudo postmap /etc/postfix/sasl_passwd\nsudo service postfix restart; sudo service stunnel4 restart               \n```\n\n\n## Gitlab\n\nWith latest Ruby and Git, and with `Postfix` installed, it is easy to install Gitlab with following [the instruction](https://github.com/gitlabhq/gitlabhq/blob/master/doc/install/installation.md).\n\nLinks to Apache2 configuration will be added here once configuration files are published.\n\n## Dovecot IMAP server\n\nInstallation.\n\n```\nsudo apt-get install dovecot-imapd\ncd /etc/dovecot\nopenssl x509 -text -noout -in dovecot.pem\n# Issuer:  O=Dovecot mail server, OU=dav.misho-web.com, CN=dav.misho-web.com/emailAddress=root@misho-web.com\n# Subject: O=Dovecot mail server, OU=dav.misho-web.com, CN=dav.misho-web.com/emailAddress=root@misho-web.com\n```\n\nThe installed SSL certificates are self-signed. Replace them with mishoCA-signed ones\n\n```\ncd /etc/ssl\nsudo ./CA.pl -newreq\nsudo ./CA.pl -sign\nsudo openssl rsa -in newkey.pem -out newkey.pem #to remove password protection\nsudo mv newcert.pem /etc/dovecot/dovecot.pem\nsudo mv newkey.pem /etc/dovecot/private/dovecot.pem\nsudo rm newreq.pem\ncd /etc/dovecot\nopenssl x509 -text -noout -in dovecot.pem\n# Issuer:  C=JP, ST=Tokyo, O=Sho Iwamoto / Misho, OU=CA manager, CN=misho-web.com/emailAddress=webmaster@misho-web.com\n# Subject: C=JP, ST=Tokyo, O=Sho Iwamoto / Misho, OU=IMAP server, CN=dav.misho-web.com\n```\n\nUser management. I will manage with `passwdfile` scheme. In the config file,\n\n```\npassdb {\n  driver = passwd-file\n  args = scheme=CRYPT username_format=%u /etc/dovecot/users\n}\nuserdb {\n  driver = passwd-file\n  args = username_format=%u /etc/dovecot/users\n}\n```\n\nand `/etc/dovecot/users` is, like,\n\n```\nuser:{CRAM-MD5}abcde12345:1000:1000::/home/misho::\n```\n\nThis file is userdb file as well as passdb file. As I set `mail_location = maildir:~/.Maildir`, and as I do not prepare any other userdb scheme, I had to specify the home directory (`/home/misho`) here.\n\nAlso I want to required SSL client certification.\n\nI had to create CERT+CRL file as:\n\n```sh\ncd /etc/ssl\nopenssl ca -gencrl -out crl.pem\nmv crl.pem /etc/ssl/mishoCA\ncd /etc/ssl/mishoCA\ncat cacert.pem crl.pem > cacert_and_crl.pem\n```\n\n\nand set the file as\n\n```\nauth_ssl_require_client_cert = yes\nssl_verify_client_cert = yes\nssl_ca = </etc/ssl/mishoCA/cacert_and_crl.pem\n```\n\n## Fetchmail + Dovecot + Sieve\n\nInstall as `sudo apt-get install fetchmail dovecot-sieve`, configure your `~/.fetchmailrc` file.\n\n\n**You had better set `set no bouncemail` in your `.fetchmailrc`**. When fetchmail fails to deliver a message, it send a failure notice to YOU with this option, while THE SENDER **without** this option.\n\n```:~/.fetchmailrc\nset postmaster webmaster@misho-web.com\n# set logfile \"/home/misho/fetchmail.log\"\nset no bouncemail   # <= important!\n\ndefaults\n  uidl\n  no mimedecode\n  mda \"/usr/lib/dovecot/deliver -d misho\"\n  keep\n\npoll pop.XXX.ne.jp\n  protocol pop3\n  user misho\n  password XXXXXXX\n  keep # <= at the first time, not to lose messages\n```\n\nThen told dovecot to use `sieve` plugin:\n\n```:dovecot-configuration\nlda_mailbox_autocreate = yes\nlda_mailbox_autosubscribe = yes\nprotocol lda {\n  debug_log_path = /dev/null\n  info_log_path = /dev/null\n  log_path = /dev/null\n  mail_plugins = \"sieve\"\n}\n```\n\nAlso told dovecot to wake-up `fetchmail`.\n\n```\n/usr/sbin/dovecot --version\nsudo apt-get install dovecot-dev\n\ngit clone https://github.com/marschap/fetchmail_wakeup.git\ncd fetchmail_wakeup\nvi Makefile # to configure\nmake\nsudo make install\n```\n\nWith this wake-up module, fetchmail is waken up when the user connects the IMAP server and receives their email, which is shown in the log as\n\n```:/home/misho/fetchmail.log\nfetchmail: awakened by User defined signal 1\nfetchmail: xxx messages (xxx seen) for ...\n```\n\n### znc\n\n#### Install and configure\n\n```sh\nsudo apt-get install znc\nznc --makeconf\n```\n\n#### Sign the SSL key with the CA\n\n```sh\ncd ~/.znc/\nopenssl req -new -key znc.pem -text -out newreq.pem\ncd /etc/ssl\nsudo ln -s ~/.znc/znc.pem newkey.pem\nsudo ln -s ~/.znc/newreq.pem\nsudo ./CA.pl -sign\nsudo mv newcert.pem ~/.znc/cert.pem\nsudo rm newkey.pem newreq.pem\ncd ~/.znc\nrm newreq.pem\nvi cert.pem znc.pem\n# to overwrite pubkey (CERTIFICATE) in znc.pem with the one in cert.pem (signed pubkey).\n```\n\n### Clam Anti-virus\n```console\n$ sudo apt-get clamav clamav-daemon\n$ sudo cpkg-reconfigure clamav-daemon\n```\n\nI do not understand whether I should add cron job or not...\n", "tags": ["Debian"]}