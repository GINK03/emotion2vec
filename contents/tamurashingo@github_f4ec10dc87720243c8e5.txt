{"context": " More than 1 year has passed since last update.\u30e1\u30fc\u30eb\u306b\u6dfb\u4ed8\u3057\u3066\u3044\u308bzip\u30d5\u30a1\u30a4\u30eb\u304c\u6697\u53f7\u5316\u3055\u308c\u3066\u3044\u308b\u304b\u3069\u3046\u304b\u3092\u5224\u5b9a\u3057\u305f\u3044\u306e\u3067\u3001zip\u30d5\u30a1\u30a4\u30eb\u3092\u8aad\u307f\u8fbc\u3093\u3067\u89e3\u6790\u3059\u308b\u51e6\u7406\u3092\u4f5c\u3063\u3066\u307f\u307e\u3059\u3002\n\n\u30d0\u30a4\u30ca\u30ea\u30d5\u30a1\u30a4\u30eb\u306e\u8aad\u307f\u8fbc\u307f\n\u307e\u305a\u306f\u30d0\u30a4\u30ca\u30ea\u30d5\u30a1\u30a4\u30eb\u3092\u8aad\u307f\u8fbc\u3080\u3068\u3053\u308d\u304b\u3089\u59cb\u3081\u307e\u3059\u3002\n(defun read-binary-file (path)\n  (with-open-file (in path :element-type '(unsigned-byte 8))\n    (let ((bin (make-array (file-length in) :element-type '(unsigned-byte 8))))\n      (read-sequence bin in)\n      bin)))\n\n\u30d5\u30a1\u30a4\u30eb\u30b5\u30a4\u30ba\u5206\u306e\u30e1\u30e2\u30ea\u3092\u78ba\u4fdd\u3057\u3066\u305d\u3053\u306b\u4e00\u6c17\u306b\u8aad\u307f\u8fbc\u3080\u3084\u308a\u65b9\u3067\u3059\u3002\u3053\u308c\u306fvector\u3067\u8fd4\u3063\u3066\u304f\u308b\u306e\u3067\u3001\u3042\u3068\u3067list\u306b\u3057\u3066\u304a\u304d\u307e\u3059\u3002\u3068\u308a\u3042\u3048\u305a\u306f\u4f55\u3067\u3082list\u3067\u4f5c\u3063\u3066\u9045\u304b\u3063\u305f\u3089\u5bfe\u7b56\u3092\u8003\u3048\u307e\u3059\u3002\n\nLISP programmers know the value of everything and the cost of nothing.\n\n(coerce (read-binary-file #p\"/tmp/tmp.zip\") 'list)\n\n\nzip\u30d5\u30a9\u30fc\u30de\u30c3\u30c8\u306e\u5b9a\u7fa9\nzip\u30d5\u30a9\u30fc\u30de\u30c3\u30c8\u306e\u4ed5\u69d8\u306b\u5247\u3063\u3066\u30af\u30e9\u30b9\u3092\u5b9a\u7fa9\u3057\u307e\u3059\u3002\nhttp://www.pkware.com/documents/casestudies/APPNOTE.TXT\n\u3068\u308a\u3042\u3048\u305a\u30ed\u30fc\u30ab\u30eb\u30d5\u30a1\u30a4\u30eb\u30d8\u30c3\u30c0\u306e\u307f\u3002\n(defclass <zip-header> ()\n  ((version-extract)\n   (flag)\n   (compression)\n   (time)\n   (date)\n   (crc32)\n   (compressed-size)\n   (uncompressed-size)\n   (filename-length)\n   (extrafield-length)\n   (filename)\n   (extrafield)\n   (data)))\n\nextrafield-length\u307e\u3067\u306f\u5404\u5024\u306e\u30b5\u30a4\u30ba\u304c\u6c7a\u307e\u3063\u3066\u3044\u308b\u306e\u3067\u3001\u6307\u5b9a\u3057\u305f\u5024\u306b\u30ea\u30b9\u30c8\u3092\u5206\u5272\u3057\u3066\u304f\u308c\u308b\u95a2\u6570\u304c\u3042\u308b\u3068\u3046\u308c\u3057\u3044\u3067\u3059\u3002\n(defun take-list (list num)\n  (labels ((take-n (list num acc)\n             (if (or (<= num 0)\n                     (null list))\n                 (values (nreverse acc) list)\n                 (take-n (cdr list) (1- num) (cons (car list) acc)))))\n    (take-n list num '())))\n\ntake-list\u306f\u30ea\u30b9\u30c8\u304b\u3089\u6307\u5b9a\u3057\u305f\u30b5\u30a4\u30ba\u3060\u3051\u5207\u308a\u51fa\u3059\u95a2\u6570\u3067\u3059\u3002\u591a\u5024\u3067\u7d50\u679c\u3092\u8fd4\u3057\u307e\u3059\u3002\nCL-USER> (take-list '(1 2 3 4 5) 3)\n(1 2 3)\n(4 5)\n\n\u3053\u308c\u3092\u4f7f\u3046\u3068\u3001\u6b21\u306e\u95a2\u6570\u304c\u5b9a\u7fa9\u3067\u304d\u307e\u3059\u3002\n(defun split-group (list num-list &key (rest nil))\n  (labels ((split-n (list num-list acc)\n             (cond ((or (and (not rest)\n                             (or (null list)\n                                 (null num-list)))\n                        (and rest\n                             (null list)))\n                    (nreverse acc))\n                   ((and rest\n                         (null num-list))\n                    (nreverse (cons list acc)))\n                   (t\n                    (multiple-value-bind (taken-list rest-list)\n                        (take-list list (car num-list))\n                      (split-n rest-list (cdr num-list) (cons taken-list acc)))))))\n    (split-n list num-list '())))\n\nsplit-group\u304c\u4eca\u56de\u6b32\u3057\u3044\u95a2\u6570\u3067\u3059\u3002\u6307\u5b9a\u3057\u305f\u30b5\u30a4\u30ba\u306e\u30ea\u30b9\u30c8\u3092\u6e21\u3059\u3068\u3001\u305d\u306e\u30b5\u30a4\u30ba\u306b\u30ea\u30b9\u30c8\u3092\u5206\u5272\u3057\u3066\u304f\u308c\u307e\u3059\u3002\nCL-USER> (split-group '(1 2 3 4 5 6 7 8 9 10) '(1 2 3 4))\n((1) (2 3) (4 5 6) (7 8 9 10))\n\nrest\u30d5\u30e9\u30b0\u306f\u5206\u5272\u5f8c\u306e\u30ea\u30b9\u30c8\u306e\u4f59\u308a\u306e\u53d6\u6271\u3044\u3092\u6c7a\u3081\u307e\u3059\u3002\nnil\u306a\u3089\u3070\u3042\u307e\u308a\u3092\u6368\u3066\u3001t\u306a\u3089\u3070\u3042\u307e\u308a\u3092\u6700\u5f8c\u306b\u8ffd\u52a0\u3057\u307e\u3059\u3002\nCL-USER> (split-group '(1 2 3 4 5 6 7 8 9 10) '(1 2 3) :rest nil)\n((1) (2 3) (4 5 6))\nCL-USER> (split-group '(1 2 3 4 5 6 7 8 9 10) '(1 2 3) :rest t)\n((1) (2 3) (4 5 6) (7 8 9 10))\n\n\n\u30d5\u30e9\u30b0\u306a\u306e\u3067 -p \u3068\u3044\u3046\u30d1\u30e9\u30e1\u30fc\u30bf\u306e\u65b9\u304c\u826f\u3044\u306e\u304b\n\n\n\u30ea\u30c8\u30eb\u30a8\u30f3\u30c7\u30a3\u30a2\u30f3\nzip\u306f\u30ea\u30c8\u30eb\u30a8\u30f3\u30c7\u30a3\u30a2\u30f3\u3092\u4f7f\u3063\u3066\u3044\u308b\u306e\u3067\u3001\u5b9f\u969b\u306e\u5024\u306b\u623b\u3059\u95a2\u6570\u304c\u5fc5\u8981\u3067\u3059\u3002\n(defun little-endian-to-num (list)\n  (loop for x in list\n        for idx upfrom 0\n        sum (ash x (* idx 8))))\n\nCL-USER> (little-endian-to-num '(1 2))\n513\n\n\u3053\u3053\u3067\u6e21\u3057\u3066\u3044\u308b (1 2) \u306f\\x0201\u3092\u30ea\u30c8\u30eb\u30a8\u30f3\u30c7\u30a3\u30a2\u30f3\u3067\u8868\u73fe\u3057\u305f\u5024\u3067\u3059\u3002\n\n\u30ed\u30fc\u30ab\u30eb\u30d5\u30a1\u30a4\u30eb\u30d8\u30c3\u30c0\u306e\u8aad\u307f\u8fbc\u307f\n\u3053\u3053\u307e\u3067\u304f\u308b\u3068\u30ed\u30fc\u30ab\u30eb\u30d5\u30a1\u30a4\u30eb\u30d8\u30c3\u30c0\u306e\u30d1\u30fc\u30b9\u304c\u3067\u304d\u307e\u3059\u3002\n\u65b9\u6cd5\u3068\u3057\u3066\u306f\u3001\u307e\u305a\u30b5\u30a4\u30ba\u304c\u6c7a\u307e\u3063\u3066\u3044\u308bextrafield-length\u307e\u3067\u30d1\u30fc\u30b9\u3057\u3001\u6b8b\u308a\u3092filename-length\u3001extrafield-length\u3001compressed-size\u3067\u5b9a\u7fa9\u3057\u3066\u3042\u308b\u30b5\u30a4\u30ba\u5206\u8aad\u307f\u8fbc\u307f\u307e\u3059\u3002\n(defun read-zip-header (data)\n  (let ((items (split-group data '(4 ; signature\n                                   2 ; version needed to extract\n                                   2 ; general purpose bit flag\n                                   2 ; compression method\n                                   2 ; last mod file time\n                                   2 ; last mod file date\n                                   4 ; crc-32\n                                   4 ; compressed size\n                                   4 ; uncompressed size\n                                   2 ; file name length\n                                   2 ; extra field length\n                                   )\n                            :rest t  ; file name, extra field, data\n                                   ))\n        (inst (make-instance '<zip-header>)))\n    (setf (slot-value inst 'version-extract) (little-endian-to-num (nth 1 items)))\n    (setf (slot-value inst 'flag) (little-endian-to-num (nth 2 items)))\n    (setf (slot-value inst 'compression) (little-endian-to-num (nth 3 items)))\n    (setf (slot-value inst 'time) (little-endian-to-num (nth 4 items)))\n    (setf (slot-value inst 'date) (little-endian-to-num (nth 5 items)))\n    (setf (slot-value inst 'crc32) (little-endian-to-num (nth 6 items)))\n    (setf (slot-value inst 'compressed-size) (little-endian-to-num (nth 7 items)))\n    (setf (slot-value inst 'uncompressed-size) (little-endian-to-num (nth 8 items)))\n    (setf (slot-value inst 'filename-length) (little-endian-to-num (nth 9 items)))\n    (setf (slot-value inst 'extrafield-length) (little-endian-to-num (nth 10 items)))\n\n    ;; \u3053\u3053\u307e\u3067\u304c\u30b5\u30a4\u30ba\u304c\u6c7a\u307e\u3063\u3066\u3044\u308bextrafield-length\u307e\u3067\u306e\u30d1\u30fc\u30b9\n    ;; \u3053\u3053\u304b\u3089\u304c\u5404\u9805\u76ee\u3067\u8aad\u307f\u8fbc\u3093\u3060\u30b5\u30a4\u30ba\u3067\u30d1\u30fc\u30b9\u3092\u3059\u308b\u90e8\u5206\n\n    (let ((rest-items (split-group (nth 11 items) `(,(slot-value inst 'filename-length)\n                                                     ,(slot-value inst 'extrafield-length)\n                                                     ,(slot-value inst 'compressed-size))\n                                   :rest t)))\n      (setf (slot-value inst 'filename) (nth 0 rest-items))\n      (setf (slot-value inst 'extrafield) (nth 1 rest-items))\n      (setf (slot-value inst 'data) (nth 2 rest-items))\n\n      (values inst (nth 3 rest-items)))))\n;; \u623b\u308a\u306f<zip-header>\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3068\u3001\u6b8b\u308a\u306e\u90e8\u5206\u306e\u591a\u5024\n\n\n\u30c6\u30b9\u30c8\nCL-USER> (setf *zip* (read-zip-header (coerce (read-binary-file #p\"/home/shingo/test.zip\") 'list)))\n#<<ZIP-HEADER> #x3020014A551D>\nCL-USER> (slot-value *zip* 'filename)\n(116 101 115 116 46 116 120 116)\nCL-USER> (format t \"~{~A~}\" (map 'list #'code-char (slot-value *zip* 'filename)))\ntest.txt\nNIL\nCL-USER> (slot-value *zip* 'compressed-size)\n5\nCL-USER> (slot-value *zip* 'uncompressed-size)\n5\nCL-USER> ;; \u5727\u7e2e\u524d\u3068\u5727\u7e2e\u5f8c\u3067\u30b5\u30a4\u30ba\u304c\u540c\u3058\u306a\u306e\u3067\u975e\u5727\u7e2e\n; No value\nCL-USER> (slot-value *zip* 'data)\n(116 101 115 116 10)\nCL-USER> (format t \"~{~A~}\" (map 'list #'code-char (slot-value *zip* 'data)))\ntest\nNIL\n\n\u305d\u3046\u3044\u3048\u3070\u3001\u5f53\u521d\u306e\u76ee\u7684\u3060\u3063\u305f\u6697\u53f7\u5316\u3055\u308c\u3066\u3044\u308b\u304b\u3055\u308c\u3066\u3044\u306a\u3044\u304b\u306f\u3001flag\u306e1\u30d3\u30c3\u30c8\u76ee\u3092\u898b\u308c\u3070\u5206\u304b\u308a\u307e\u3059\u3002\nCL-USER> (slot-value *zip* 'flag)\n0\n\n0\u306a\u306e\u3067\u6697\u53f7\u5316\u3055\u308c\u3066\u3044\u307e\u305b\u3093\u3002\n\u3068\u308a\u3042\u3048\u305a\u306f\u5148\u982d\u306e\u30d5\u30a1\u30a4\u30eb\u3060\u3051\u6697\u53f7\u5316\u3055\u308c\u3066\u3044\u308b\u304b\u3069\u3046\u304b\u3092\u5224\u5225\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3057\u305f\u3002zip\u30d5\u30a1\u30a4\u30eb\u306f\u683c\u7d0d\u3057\u3066\u3042\u308b\u30d5\u30a1\u30a4\u30eb\u3054\u3068\u306b\u6697\u53f7\u5316\u3059\u308b\uff0f\u3057\u306a\u3044\u3092\u6307\u5b9a\u3067\u304d\u308b\u306e\u3067\u3001\u3053\u308c\u3067\u306f\u307e\u3060\u4e0d\u5341\u5206\u3067\u3059\u3002\u6b21\u56de\u4ee5\u964d\u306b\u305d\u3053\u306e\u5bfe\u5fdc\u3092\u884c\u3063\u3066\u3044\u304d\u307e\u3059\u3002\n\u30e1\u30fc\u30eb\u306b\u6dfb\u4ed8\u3057\u3066\u3044\u308bzip\u30d5\u30a1\u30a4\u30eb\u304c\u6697\u53f7\u5316\u3055\u308c\u3066\u3044\u308b\u304b\u3069\u3046\u304b\u3092\u5224\u5b9a\u3057\u305f\u3044\u306e\u3067\u3001zip\u30d5\u30a1\u30a4\u30eb\u3092\u8aad\u307f\u8fbc\u3093\u3067\u89e3\u6790\u3059\u308b\u51e6\u7406\u3092\u4f5c\u3063\u3066\u307f\u307e\u3059\u3002\n\n\n## \u30d0\u30a4\u30ca\u30ea\u30d5\u30a1\u30a4\u30eb\u306e\u8aad\u307f\u8fbc\u307f\n\u307e\u305a\u306f\u30d0\u30a4\u30ca\u30ea\u30d5\u30a1\u30a4\u30eb\u3092\u8aad\u307f\u8fbc\u3080\u3068\u3053\u308d\u304b\u3089\u59cb\u3081\u307e\u3059\u3002\n\n```cl:\n(defun read-binary-file (path)\n  (with-open-file (in path :element-type '(unsigned-byte 8))\n    (let ((bin (make-array (file-length in) :element-type '(unsigned-byte 8))))\n      (read-sequence bin in)\n      bin)))\n```\n\n\u30d5\u30a1\u30a4\u30eb\u30b5\u30a4\u30ba\u5206\u306e\u30e1\u30e2\u30ea\u3092\u78ba\u4fdd\u3057\u3066\u305d\u3053\u306b\u4e00\u6c17\u306b\u8aad\u307f\u8fbc\u3080\u3084\u308a\u65b9\u3067\u3059\u3002\u3053\u308c\u306fvector\u3067\u8fd4\u3063\u3066\u304f\u308b\u306e\u3067\u3001\u3042\u3068\u3067list\u306b\u3057\u3066\u304a\u304d\u307e\u3059\u3002\u3068\u308a\u3042\u3048\u305a\u306f\u4f55\u3067\u3082list\u3067\u4f5c\u3063\u3066\u9045\u304b\u3063\u305f\u3089\u5bfe\u7b56\u3092\u8003\u3048\u307e\u3059\u3002\n\n> LISP programmers know the value of everything and the cost of nothing.\n\n```cl:\n(coerce (read-binary-file #p\"/tmp/tmp.zip\") 'list)\n```\n\n\n## zip\u30d5\u30a9\u30fc\u30de\u30c3\u30c8\u306e\u5b9a\u7fa9\n\nzip\u30d5\u30a9\u30fc\u30de\u30c3\u30c8\u306e\u4ed5\u69d8\u306b\u5247\u3063\u3066\u30af\u30e9\u30b9\u3092\u5b9a\u7fa9\u3057\u307e\u3059\u3002\nhttp://www.pkware.com/documents/casestudies/APPNOTE.TXT\n\n\u3068\u308a\u3042\u3048\u305a\u30ed\u30fc\u30ab\u30eb\u30d5\u30a1\u30a4\u30eb\u30d8\u30c3\u30c0\u306e\u307f\u3002\n\n```cl:\n(defclass <zip-header> ()\n  ((version-extract)\n   (flag)\n   (compression)\n   (time)\n   (date)\n   (crc32)\n   (compressed-size)\n   (uncompressed-size)\n   (filename-length)\n   (extrafield-length)\n   (filename)\n   (extrafield)\n   (data)))\n```\n\nextrafield-length\u307e\u3067\u306f\u5404\u5024\u306e\u30b5\u30a4\u30ba\u304c\u6c7a\u307e\u3063\u3066\u3044\u308b\u306e\u3067\u3001\u6307\u5b9a\u3057\u305f\u5024\u306b\u30ea\u30b9\u30c8\u3092\u5206\u5272\u3057\u3066\u304f\u308c\u308b\u95a2\u6570\u304c\u3042\u308b\u3068\u3046\u308c\u3057\u3044\u3067\u3059\u3002\n\n\n```cl:\n(defun take-list (list num)\n  (labels ((take-n (list num acc)\n             (if (or (<= num 0)\n                     (null list))\n                 (values (nreverse acc) list)\n                 (take-n (cdr list) (1- num) (cons (car list) acc)))))\n    (take-n list num '())))\n```\n\ntake-list\u306f\u30ea\u30b9\u30c8\u304b\u3089\u6307\u5b9a\u3057\u305f\u30b5\u30a4\u30ba\u3060\u3051\u5207\u308a\u51fa\u3059\u95a2\u6570\u3067\u3059\u3002\u591a\u5024\u3067\u7d50\u679c\u3092\u8fd4\u3057\u307e\u3059\u3002\n\n```cl:\nCL-USER> (take-list '(1 2 3 4 5) 3)\n(1 2 3)\n(4 5)\n```\n\n\u3053\u308c\u3092\u4f7f\u3046\u3068\u3001\u6b21\u306e\u95a2\u6570\u304c\u5b9a\u7fa9\u3067\u304d\u307e\u3059\u3002\n\n```cl:\n(defun split-group (list num-list &key (rest nil))\n  (labels ((split-n (list num-list acc)\n             (cond ((or (and (not rest)\n                             (or (null list)\n                                 (null num-list)))\n                        (and rest\n                             (null list)))\n                    (nreverse acc))\n                   ((and rest\n                         (null num-list))\n                    (nreverse (cons list acc)))\n                   (t\n                    (multiple-value-bind (taken-list rest-list)\n                        (take-list list (car num-list))\n                      (split-n rest-list (cdr num-list) (cons taken-list acc)))))))\n    (split-n list num-list '())))\n```\n\nsplit-group\u304c\u4eca\u56de\u6b32\u3057\u3044\u95a2\u6570\u3067\u3059\u3002\u6307\u5b9a\u3057\u305f\u30b5\u30a4\u30ba\u306e\u30ea\u30b9\u30c8\u3092\u6e21\u3059\u3068\u3001\u305d\u306e\u30b5\u30a4\u30ba\u306b\u30ea\u30b9\u30c8\u3092\u5206\u5272\u3057\u3066\u304f\u308c\u307e\u3059\u3002\n\n```cl:\nCL-USER> (split-group '(1 2 3 4 5 6 7 8 9 10) '(1 2 3 4))\n((1) (2 3) (4 5 6) (7 8 9 10))\n```\n\nrest\u30d5\u30e9\u30b0\u306f\u5206\u5272\u5f8c\u306e\u30ea\u30b9\u30c8\u306e\u4f59\u308a\u306e\u53d6\u6271\u3044\u3092\u6c7a\u3081\u307e\u3059\u3002\nnil\u306a\u3089\u3070\u3042\u307e\u308a\u3092\u6368\u3066\u3001t\u306a\u3089\u3070\u3042\u307e\u308a\u3092\u6700\u5f8c\u306b\u8ffd\u52a0\u3057\u307e\u3059\u3002\n\n```cl:\nCL-USER> (split-group '(1 2 3 4 5 6 7 8 9 10) '(1 2 3) :rest nil)\n((1) (2 3) (4 5 6))\nCL-USER> (split-group '(1 2 3 4 5 6 7 8 9 10) '(1 2 3) :rest t)\n((1) (2 3) (4 5 6) (7 8 9 10))\n```\n\n> \u30d5\u30e9\u30b0\u306a\u306e\u3067 -p \u3068\u3044\u3046\u30d1\u30e9\u30e1\u30fc\u30bf\u306e\u65b9\u304c\u826f\u3044\u306e\u304b\n\n\n## \u30ea\u30c8\u30eb\u30a8\u30f3\u30c7\u30a3\u30a2\u30f3\n\nzip\u306f\u30ea\u30c8\u30eb\u30a8\u30f3\u30c7\u30a3\u30a2\u30f3\u3092\u4f7f\u3063\u3066\u3044\u308b\u306e\u3067\u3001\u5b9f\u969b\u306e\u5024\u306b\u623b\u3059\u95a2\u6570\u304c\u5fc5\u8981\u3067\u3059\u3002\n\n```cl:\n(defun little-endian-to-num (list)\n  (loop for x in list\n        for idx upfrom 0\n        sum (ash x (* idx 8))))\n```\n\n```cl:\nCL-USER> (little-endian-to-num '(1 2))\n513\n```\n\n\u3053\u3053\u3067\u6e21\u3057\u3066\u3044\u308b (1 2) \u306f\\x0201\u3092\u30ea\u30c8\u30eb\u30a8\u30f3\u30c7\u30a3\u30a2\u30f3\u3067\u8868\u73fe\u3057\u305f\u5024\u3067\u3059\u3002\n\n\n## \u30ed\u30fc\u30ab\u30eb\u30d5\u30a1\u30a4\u30eb\u30d8\u30c3\u30c0\u306e\u8aad\u307f\u8fbc\u307f\n\n\u3053\u3053\u307e\u3067\u304f\u308b\u3068\u30ed\u30fc\u30ab\u30eb\u30d5\u30a1\u30a4\u30eb\u30d8\u30c3\u30c0\u306e\u30d1\u30fc\u30b9\u304c\u3067\u304d\u307e\u3059\u3002\n\u65b9\u6cd5\u3068\u3057\u3066\u306f\u3001\u307e\u305a\u30b5\u30a4\u30ba\u304c\u6c7a\u307e\u3063\u3066\u3044\u308bextrafield-length\u307e\u3067\u30d1\u30fc\u30b9\u3057\u3001\u6b8b\u308a\u3092filename-length\u3001extrafield-length\u3001compressed-size\u3067\u5b9a\u7fa9\u3057\u3066\u3042\u308b\u30b5\u30a4\u30ba\u5206\u8aad\u307f\u8fbc\u307f\u307e\u3059\u3002\n\n```cl:\n(defun read-zip-header (data)\n  (let ((items (split-group data '(4 ; signature\n                                   2 ; version needed to extract\n                                   2 ; general purpose bit flag\n                                   2 ; compression method\n                                   2 ; last mod file time\n                                   2 ; last mod file date\n                                   4 ; crc-32\n                                   4 ; compressed size\n                                   4 ; uncompressed size\n                                   2 ; file name length\n                                   2 ; extra field length\n                                   )\n                            :rest t  ; file name, extra field, data\n                                   ))\n        (inst (make-instance '<zip-header>)))\n    (setf (slot-value inst 'version-extract) (little-endian-to-num (nth 1 items)))\n    (setf (slot-value inst 'flag) (little-endian-to-num (nth 2 items)))\n    (setf (slot-value inst 'compression) (little-endian-to-num (nth 3 items)))\n    (setf (slot-value inst 'time) (little-endian-to-num (nth 4 items)))\n    (setf (slot-value inst 'date) (little-endian-to-num (nth 5 items)))\n    (setf (slot-value inst 'crc32) (little-endian-to-num (nth 6 items)))\n    (setf (slot-value inst 'compressed-size) (little-endian-to-num (nth 7 items)))\n    (setf (slot-value inst 'uncompressed-size) (little-endian-to-num (nth 8 items)))\n    (setf (slot-value inst 'filename-length) (little-endian-to-num (nth 9 items)))\n    (setf (slot-value inst 'extrafield-length) (little-endian-to-num (nth 10 items)))\n\n    ;; \u3053\u3053\u307e\u3067\u304c\u30b5\u30a4\u30ba\u304c\u6c7a\u307e\u3063\u3066\u3044\u308bextrafield-length\u307e\u3067\u306e\u30d1\u30fc\u30b9\n    ;; \u3053\u3053\u304b\u3089\u304c\u5404\u9805\u76ee\u3067\u8aad\u307f\u8fbc\u3093\u3060\u30b5\u30a4\u30ba\u3067\u30d1\u30fc\u30b9\u3092\u3059\u308b\u90e8\u5206\n\n    (let ((rest-items (split-group (nth 11 items) `(,(slot-value inst 'filename-length)\n                                                     ,(slot-value inst 'extrafield-length)\n                                                     ,(slot-value inst 'compressed-size))\n                                   :rest t)))\n      (setf (slot-value inst 'filename) (nth 0 rest-items))\n      (setf (slot-value inst 'extrafield) (nth 1 rest-items))\n      (setf (slot-value inst 'data) (nth 2 rest-items))\n\n      (values inst (nth 3 rest-items)))))\n;; \u623b\u308a\u306f<zip-header>\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3068\u3001\u6b8b\u308a\u306e\u90e8\u5206\u306e\u591a\u5024\n```\n\n## \u30c6\u30b9\u30c8\n\n```cl:\nCL-USER> (setf *zip* (read-zip-header (coerce (read-binary-file #p\"/home/shingo/test.zip\") 'list)))\n#<<ZIP-HEADER> #x3020014A551D>\nCL-USER> (slot-value *zip* 'filename)\n(116 101 115 116 46 116 120 116)\nCL-USER> (format t \"~{~A~}\" (map 'list #'code-char (slot-value *zip* 'filename)))\ntest.txt\nNIL\nCL-USER> (slot-value *zip* 'compressed-size)\n5\nCL-USER> (slot-value *zip* 'uncompressed-size)\n5\nCL-USER> ;; \u5727\u7e2e\u524d\u3068\u5727\u7e2e\u5f8c\u3067\u30b5\u30a4\u30ba\u304c\u540c\u3058\u306a\u306e\u3067\u975e\u5727\u7e2e\n; No value\nCL-USER> (slot-value *zip* 'data)\n(116 101 115 116 10)\nCL-USER> (format t \"~{~A~}\" (map 'list #'code-char (slot-value *zip* 'data)))\ntest\nNIL\n```\n\n\u305d\u3046\u3044\u3048\u3070\u3001\u5f53\u521d\u306e\u76ee\u7684\u3060\u3063\u305f\u6697\u53f7\u5316\u3055\u308c\u3066\u3044\u308b\u304b\u3055\u308c\u3066\u3044\u306a\u3044\u304b\u306f\u3001flag\u306e1\u30d3\u30c3\u30c8\u76ee\u3092\u898b\u308c\u3070\u5206\u304b\u308a\u307e\u3059\u3002\n\n```cl:\nCL-USER> (slot-value *zip* 'flag)\n0\n```\n\n0\u306a\u306e\u3067\u6697\u53f7\u5316\u3055\u308c\u3066\u3044\u307e\u305b\u3093\u3002\n\n\u3068\u308a\u3042\u3048\u305a\u306f\u5148\u982d\u306e\u30d5\u30a1\u30a4\u30eb\u3060\u3051\u6697\u53f7\u5316\u3055\u308c\u3066\u3044\u308b\u304b\u3069\u3046\u304b\u3092\u5224\u5225\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3057\u305f\u3002zip\u30d5\u30a1\u30a4\u30eb\u306f\u683c\u7d0d\u3057\u3066\u3042\u308b\u30d5\u30a1\u30a4\u30eb\u3054\u3068\u306b\u6697\u53f7\u5316\u3059\u308b\uff0f\u3057\u306a\u3044\u3092\u6307\u5b9a\u3067\u304d\u308b\u306e\u3067\u3001\u3053\u308c\u3067\u306f\u307e\u3060\u4e0d\u5341\u5206\u3067\u3059\u3002\u6b21\u56de\u4ee5\u964d\u306b\u305d\u3053\u306e\u5bfe\u5fdc\u3092\u884c\u3063\u3066\u3044\u304d\u307e\u3059\u3002", "tags": ["CommonLisp", "common-lisp"]}