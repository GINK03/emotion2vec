{"context": " More than 1 year has passed since last update.SpringMVC\u306e\u5b9f\u88c5\u3067\u7528\u3044\u305f\u30b3\u30fc\u30c9\u3092\u7d39\u4ecb\u3057\u307e\u3059\u3002\n\u30c8\u30ea\u30df\u30f3\u30b0\u3084\u30d5\u30a3\u30eb\u30bf\u30fc\u306a\u3069\u3092\u7528\u3044\u3066\u52a0\u5de5\u3057\u305f\u753b\u50cf\u30c7\u30fc\u30bf\u3092Java\u3067\u51e6\u7406\u3057\u3066\u6307\u5b9a\u306e\u30d5\u30a9\u30eb\u30c0\u306b\u30a2\u30c3\u30d7\u30ed\u30fc\u30c9\u3059\u308b\u307e\u3067\u306e\u51e6\u7406\u306e\u5099\u5fd8\u9332\u3067\u3059\u3002\n\nJSP\u5074\u3067\u306e\u51e6\u7406(JS\u542b\u3080)\n\u7c21\u5358\u306b\u8868\u5074(JSP)\u3067\u306e\u51e6\u7406\u306e\u30d5\u30ed\u30fc\u3092\u66f8\u304d\u307e\u3059\u3002\n\n\u307e\u305a\u753b\u50cf\u3092\u30a2\u30c3\u30d7\u30ed\u30fc\u30c9\u3002\nCanvas\u306b\u753b\u50cfImage\u3092\u66f8\u304d\u51fa\u3059\u3002\n\u66f8\u304d\u51fa\u3057\u305fCanvas\u4e0a\u3067\u753b\u50cf\u3092\u3044\u3058\u3044\u3058\u3057\u3066\u3001\ntoDataURL()\u30e1\u30bd\u30c3\u30c9\u3092\u7528\u3044\u3066Base64\u5f62\u5f0f\u306eImageURI\u3092\u53d6\u308a\u51fa\u3057\u307e\u3059\u3002\n\n\u53d6\u308a\u51fa\u3057\u305fImageURI\u30c7\u30fc\u30bf\u306f\u982d\u306e\u90e8\u5206\u304cdata:image/gif;base64,~~~~~~\u306e\u3088\u3046\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u3002\nJavaScript\u3092\u7528\u3044\u3066\n\n\n,\u542b\u3081\u305d\u308c\u4ee5\u524d\u306e\u6587\u5b57\u5217\u3092\u5207\u308a\u51fa\u3059\n\n<form:input type=\"hidden\" path=\"imageUri\">\n\u306b\u5024\u3092\u30bb\u30c3\u30c8\n\n\u203b\u3053\u306e\u969b\u3001JS\u3067byte[]\u306b\u5909\u63db\u3057\u305f\u4e0a\u3067Controller\u306b\u6e21\u3057\u3066\u3082\u3088\u3044\u306e\u3067\u3059\u304c\u3001\u306a\u305c\u304b\u4e0d\u5b8c\u5168\u306abyte[]\u3068\u306a\u3063\u3066\u3057\u307e\u3044\u753b\u50cf\u304c\u5fa9\u5143\u51fa\u6765\u306a\u304b\u3063\u305f\u306e\u3067\u30c7\u30d5\u30a9\u30eb\u30c8\u306eBase64\u5f62\u5f0f\u3067Controller\u306b\u6e21\u3057\u307e\u3057\u305f\u3002\n\u305d\u308c\u3067\u306f\u5b9f\u969b\u306bImageUri(25\u4e07\u5b57\u524d\u5f8c\u306e\u6587\u5b57\u5217)\u3092\u53d7\u3051\u53d6\u3063\u3066\u304b\u3089\u306e\u51e6\u7406\u3092\u66f8\u3044\u3066\u3044\u304d\u305f\u3044\u3068\u601d\u3044\u307e\u3059\u3002\n\nController\u5074\u3067\u306e\u51e6\u7406(\u8aac\u660e)\n\n\u7c21\u5358\u306a\u51e6\u7406\u30d5\u30ed\u30fc\n\nBase64\u5f62\u5f0f\u306eString\u3092decodeBase64\u30e1\u30bd\u30c3\u30c9\u3092\u7528\u3044\u3066byte[]\u306b\u5909\u63db\nbyte[]\u3092ByteArrayInputStream\u30e1\u30bd\u30c3\u30c9\u3092\u7528\u3044\u3066InputStream\u578b\u306b\u5909\u63db\nInputStream\u3092ImageIO\u30af\u30e9\u30b9\u306eread\u30e1\u30bd\u30c3\u30c9\u3092\u7528\u3044\u3066BufferedImage\u578b\u306b\u5909\u63db\n\n\u203b\u3082\u3057\u304b\u3059\u308b\u3068\u3053\u3053\u307e\u3067\u306e\u51e6\u7406\u3060\u3051\u3067ImageIO\u30af\u30e9\u30b9\u306ewrite\u30e1\u30bd\u30c3\u30c9\u3092\u7528\u3044\u3066\u30d5\u30a1\u30a4\u30eb\u3068\u3057\u3066\u66f8\u304d\u51fa\u3059\u3053\u3068\u304c\u51fa\u6765\u308b\u304b\u3082\u3057\u308c\u306a\u3044\u306e\u3067\u3059\u304c\u3001\u771f\u3063\u9ed2\u306a\u753b\u50cf\u3057\u304b\u751f\u6210\u3055\u308c\u306a\u304b\u3063\u305f\u306e\u3067\u6539\u3081\u30661\u30d4\u30af\u30bb\u30eb\u305a\u3064\u753b\u50cf\u3092\u751f\u6210\u3059\u308b\u51e6\u7406\u3092\u4eca\u56de\u306f\u66f8\u304d\u307e\u3057\u305f\u3002\u4ee5\u4e0b\u306b\u88dc\u8db3\u306e\u3088\u3046\u306a\u5f62\u3067\u66f8\u3044\u3066\u304a\u304d\u307e\u3059(\u30d3\u30c3\u30c8\u6f14\u7b97\u3092\u7528\u3044\u3066\u3044\u307e\u3059)\u3002\n\n\u4e0a\u307e\u3067\u306e\u51e6\u7406\u3067\u751f\u6210\u3055\u308c\u305fBufferedImage\u578b\u306e\u5024\u304b\u3089\u753b\u50cf\u306e\u5e45\u3084\u9ad8\u3055\u3092\u8aad\u307f\u3068\u308a\u3001new\u3059\u308b\nBufferedImage\u306egetRGB\u30e1\u30bd\u30c3\u30c9\u3092\u7528\u3044\u30661\u30d4\u30af\u30bb\u30eb\u305a\u3064\u306eaRGB\u5024\u5217\u3092\u53d6\u308a\u51fa\u3059\n\u53d6\u308a\u51fa\u3057\u305fRGB\u5024\u5217\u3092\u30d3\u30c3\u30c8\u6f14\u7b97\u3057\u3001a\u5024\u3001R\u5024\u3001G\u5024\u3001B\u5024\u3092\u7b97\u51fa\n\u53d6\u308a\u51fa\u3057\u305f\u5024\u3092\u518d\u5ea6\u30011\u30d4\u30af\u30bb\u30eb\u305a\u3064aRGB\u5024\u5217\u3092\u30bb\u30c3\u30c8\n\n\u3053\u3053\u307e\u3067\u304c\u4e00\u5fdcBufferedImage\u306b\u8d77\u3053\u3059\u307e\u3067\u306e\u51e6\u7406\u30d5\u30ed\u30fc\u3067\u3059\u3002\n\u6700\u5f8c\u306b\u5b9f\u969b\u306b\u753b\u50cf\u3068\u3057\u3066\u4fdd\u5b58\u3059\u308b\u307e\u3067\u306e\u30d5\u30ed\u30fc\u3092\u66f8\u304d\u307e\u3059\u3002\n\n\u524d\u8a2d\u5b9a\u3068\u3057\u3066\u4fdd\u5b58\u3059\u308b\u30d5\u30a1\u30a4\u30eb\u540d\u304c\u304b\u3076\u3089\u306a\u3044\u3088\u3046\u306b\u73fe\u5728\u6642\u523b\u3092Hash\u5316\u3057\u3066\u30d5\u30a1\u30a4\u30eb\u540d\u3068\u3059\u308b\nFileOutputStream\u3092\u7528\u3044\u3066OutputStream\u578b\u306b\u30a2\u30a6\u30c8\u30d7\u30c3\u30c8\u3059\u308b\u30d5\u30a1\u30a4\u30eb\u306e\u4fdd\u5b58\u5148\u3092\u8a2d\u5b9a\nImageIO\u30af\u30e9\u30b9\u306ewrite\u30e1\u30bd\u30c3\u30c9\u3092\u7528\u3044\u3066\u30d5\u30a1\u30a4\u30eb\u306b\u66f8\u304d\u51fa\u3059\u3002\n\n\u4ee5\u4e0a\u3067\u30d5\u30a1\u30a4\u30eb\u751f\u6210\u306e\u30d5\u30ed\u30fc\u3092\u7d42\u308f\u308a\u307e\u3059\u3002\n\u305d\u308c\u3067\u306f\u3001\u4ee5\u4e0b\u304b\u3089\u5b9f\u969b\u306e\u30b3\u30fc\u30c9\u3092\u66f8\u3044\u3066\u3044\u304d\u305f\u3044\u3068\u601d\u3044\u307e\u3059\u3002\n\n\u5404\u30d5\u30a1\u30a4\u30eb\u3067\u306e\u51e6\u7406\n\u307e\u305a\u53d7\u3051\u53d6\u3063\u305fBase64\u5f62\u5f0f\u306eString\u3092\norg.apache.commons.codec.binary.Base64\u30af\u30e9\u30b9\u306e\ndecodeBase64\u30e1\u30bd\u30c3\u30c9\u3092\u7528\u3044\u3066bite[]\u306b\u5909\u63db\u3057\u307e\u3059\u3002\n\nFile.java\n        byte[] imageBinary = Base64.decodeBase64(ImageUri);\n\n\n\u6b21\u306b\u4f5c\u6210\u3057\u305fBinaryToBufferedImage\u30af\u30e9\u30b9\u3092\u547c\u3073\u8fbc\u307f\u307e\u3059\u3002\n\nFile.java\n        BinaryToBufferedImage BToBI = new BinaryToBufferedImage();\n        BufferedImage bufImage = BToBI.aaa(imageBinary);\n\n\n\u7d9a\u3044\u3066\u4f5c\u6210\u3059\u308bfile\u540d(\u30d1\u30b9\u542b\u3080)\u306e\u8a2d\u5b9a\u3002\n\u4e0a\u3067\u4f5c\u6210\u3057\u305fbufImage\u3001\u30a2\u30c3\u30d7\u30ed\u30fc\u30c9\u5148\u306e\u30d1\u30b9\u3092\u542b\u3080\u30d5\u30a1\u30a4\u30eb\u540d\u3092\u4f7f\u7528\u3057\u3066\u66f8\u304d\u51fa\u3057\u307e\u3059\u3002\n\nFile.java\n        OutputStream out=new FileOutputStream(uploadPath + fileName);\n        ImageIO.write(bufImage, \"jpg\", out);\n\n\n\u3053\u306eFile\u30af\u30e9\u30b9\u5185\u3067\u547c\u3073\u51fa\u3057\u3066\u3044\u308b\u81ea\u4f5c\u3057\u305fBinaryToBufferedImage\u30af\u30e9\u30b9\u304c\u3053\u3061\u3089\u3002\n\uff11\u884c\u76ee\u3067\u306f\u5f15\u6570\u3068\u3057\u3066\u53d7\u3051\u53d6\u3063\u305fbyte[]\u3092ByteArrayInputStream\u3092\u7528\u3044\u3066InputStream\u578b\u306b\u5909\u63db\u3057\u3001ImageIO\u30af\u30e9\u30b9\u306eread\u30e1\u30bd\u30c3\u30c9\u3067BufferedImage\u578b\u306b\u5909\u63db\u3059\u308b\u3068\u3044\u3046\u3053\u3068\u3092\u4e00\u6c17\u306b\u3084\u3063\u3066\u3057\u307e\u3063\u3066\u3044\u307e\u3059\u3002\n\uff12\u884c\u76ee\u306f\uff11\u884c\u76ee\u3067\u5f97\u305fBufferedImage\u578b\u306e\u5024\u3092\u7528\u3044\u3066\u518d\u5ea6BufferedImage\u578b\u306b\u66f8\u304d\u8d77\u3053\u3057\u3066\u3044\u307e\u3059\u3002\n\u753b\u50cf\u3092for\u6587\u30671pixel\u305a\u3064\u66f8\u304d\u51fa\u3057\u3066RGB\u5024\u3092\u30bb\u30c3\u30c8\u3057\u76f4\u3057\u3066\u307e\u3059\u3002\n\u30b7\u30d5\u30c8\u6f14\u7b97\u3084\u30d3\u30c3\u30c8\u6f14\u7b97\u3092\u7528\u3044\u3066\u3044\u307e\u3059\u304c\u3001\u7c21\u5358\u306a\u3053\u3068\u3057\u304b\u3057\u3066\u307e\u305b\u3093\u3002\n\u8a73\u3057\u304f\u306f\u4ee5\u4e0b\u306e\u30ea\u30f3\u30af\u3092\u53c2\u8003\u306b\u3057\u3066\u307f\u3066\u304f\u3060\u3055\u3044\u3002\n\u30b7\u30d5\u30c8\u6f14\u7b97\n\u30d3\u30c3\u30c8\u6f14\u7b97\n\nBunaryToBufferedImage.java\npublic static BufferedImage aaa(byte[] imageBinary) throws IOException {\n        BufferedImage img = ImageIO.read(new ByteArrayInputStream(imageBinary));\n\n        int width = img.getWidth();\n        int height = img.getHeight();\n        BufferedImage bufImage = new BufferedImage(width, height, BufferedImage.TYPE_INT_RGB);\n        for(int y=0;y<height;y++){\n            for(int x=0;x<width;x++){\n                int c = img.getRGB(x, y);\n                int r = r(c);\n                int g = g(c);\n                int b = b(c);\n                int rgb = rgb(r,g,b);\n                bufImage.setRGB(x,y,rgb);\n            }\n        }\n\n        return bufImage;\n    }\n\n    //\u4ee5\u4e0b\u3001\u30b7\u30d5\u30c8\u6f14\u7b97\u30d3\u30c3\u30c8\u6f14\u7b97\u306e\u30e1\u30bd\u30c3\u30c9\n    public static int a(int c){\n        return c>>>24;\n    }\n    public static int r(int c){\n        return c>>16&0xff;\n    }\n    public static int g(int c){\n        return c>>8&0xff;\n    }\n    public static int b(int c){\n        return c&0xff;\n    }\n    public static int rgb\n    (int r,int g,int b){\n        return 0xff000000 | r <<16 | g <<8 | b;\n    }\n    public static int argb\n    (int a,int r,int g,int b){\n        return a<<24 | r <<16 | g <<8 | b;\n    }\n\n\n\n\u304a\u307e\u3051(\u30d5\u30a1\u30a4\u30eb\u540dHash\u5316\u306e\u3059\u3059\u3081)\n\u3053\u3053\u304b\u3089\u304a\u307e\u3051\u3067\u3059\u304c\u3001\u73fe\u5728\u6642\u523b\u3092\u53d6\u5f97\u3057\u3066\u30cf\u30c3\u30b7\u30e5\u5316\u3057\u305f\u3082\u306e\u3092\u30d5\u30a1\u30a4\u30eb\u540d\u3068\u3059\u308b\u51e6\u7406\u3092\u66f8\u3044\u3066\u304a\u304d\u307e\u3059\u3002\n\u305d\u3082\u305d\u3082\u306a\u3093\u3067\u30cf\u30c3\u30b7\u30e5\u5316\u3059\u308b\u304b\u3068\u3044\u3046\u3068\u30bb\u30ad\u30e5\u30ea\u30c6\u30a3\u306a\u89b3\u70b9\u3068\u4fdd\u7ba1\u7684\u306a\u89b3\u70b9\u306b\u3088\u308b\u3082\u306e\u3067\u3057\u305f\u3002\n\nFile.java\npublic String makeFileName() {\n        Hash hash = new Hash();\n        Calendar cal = Calendar.getInstance();\n        SimpleDateFormat sdf = new SimpleDateFormat(\"yyyyMMddhhmmss\");\n        String strDate = sdf.format(cal.getTime());\n        String hasStringDate = hash.getSha256(strDate); //hash\u5316\n        return hasStringDate + \".jpg\";\n    }\n\n\n\u3053\u3053\u3067\u547c\u3073\u51fa\u3057\u3066\u308b\u81ea\u4f5c\u3057\u305fHash\u30af\u30e9\u30b9\u3067\u3059\u304c\u5185\u5bb9\u306f\u3053\u3061\u3089\u3002\n\u3053\u3053\u3067\u306fSHA-256\u5f62\u5f0f\u3067\u30cf\u30c3\u30b7\u30e5\u5316\u3092\u884c\u3063\u3066\u3044\u307e\u3059\u3002\n\ngetSha256.java\npublic static String getSha256(String target) {\n        MessageDigest md = null;\n        StringBuffer buf = new StringBuffer();\n        try {\n          md = MessageDigest.getInstance(\"SHA-256\");\n          md.update(target.getBytes());\n          byte[] digest = md.digest();\n\n          for (int i = 0; i < digest.length; i++) {\n            buf.append(String.format(\"%02x\", digest[i]));\n          }\n\n        } catch (NoSuchAlgorithmException e) {\n          e.printStackTrace();\n        }\n\n        return buf.toString();\n    }\n\n\n\u6700\u5f8c\u306b\u3001\u4ee5\u4e0b\u304c\u547c\u3073\u51fa\u3057\u5074\u306e\u30bd\u30fc\u30b9\u3067\u3059\u3002\n\u4eca\u56de\u306fjsp\u5074\u3067fileUploadForm\u30af\u30e9\u30b9\u306eimageUri\u30d5\u30a3\u30fc\u30eb\u30c9(String\u578b)\u306b\u5024\u3092\u30bb\u30c3\u30c8\u3057\u305f\u306e\u3067get\u3067\u53d6\u308a\u51fa\u3057\u307e\u3059\u3002\n\u5177\u4f53\u7684\u306a\u51e6\u7406\u3092\u8a18\u8ff0\u3057\u305fFile\u30af\u30e9\u30b9\u3092\u547c\u3073\u51fa\u3057\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u5316\u3057\u3001fileUpload\u30e1\u30bd\u30c3\u30c9\u306b\u5f15\u6570\u3067imageUri\u3092\u305d\u306e\u307e\u307e\u6e21\u3057\u3066\u30a2\u30c3\u30d7\u30ed\u30fc\u30c9\u307e\u3067\u306e\u51e6\u7406\u3092\u884c\u308f\u305b\u3066\u3044\u307e\u3059\u3002\n\u3061\u306a\u307f\u306b\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u5316\u3057\u305f\u969b\u306b\u547c\u3073\u51fa\u3055\u308c\u308b\u30c7\u30d5\u30a9\u30eb\u30c8\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u306e\u4e2d\u3067\u304a\u307e\u3051\u3067\u7d39\u4ecb\u3057\u305ffile\u540d\u3092\u30bb\u30c3\u30c8\u3057\u3066\u3044\u307e\u3059\u3002\n\nMainController.java\nString imageUri = fileUploadForm.getImageUri();\nFile file = new File();\nfile.fileUpload(imageUri);\n\n\n\nController\u5074\u3067\u306e\u51e6\u7406(\u5168\u30b3\u30fc\u30c9)\n\nMainController.java\nString imageUri = fileUploadForm.getImageUri();\nFile file = new File();\nfile.fileUpload(imageUri);\n\n\n\nFile.java\npackage jp.co.sample_app.app.util;\n\nimport java.awt.image.BufferedImage;\nimport java.io.FileOutputStream;\nimport java.io.IOException;\nimport java.io.OutputStream;\nimport java.text.SimpleDateFormat;\nimport java.util.Calendar;\n\nimport javax.imageio.ImageIO;\n\nimport org.apache.commons.codec.binary.Base64;\n\npublic class File {\n    private String fileName ;\n\n    public File() {\n        fileName = makeFileName();\n    }\n\n    public void fileUpload(String ImageUri) throws IOException {\n        String uploadPath = \"/usr/share/tomcat7/webapps/sample_app/resources/images/\";\n        byte[] imageBinary = Base64.decodeBase64(ImageUri);\n        BinaryToBufferedImage BToB = new BinaryToBufferedImage();\n        BufferedImage bufImage = BToB.aaa(imageBinary);\n        OutputStream out=new FileOutputStream(uploadPath + fileName);\n        ImageIO.write(bufImage, \"jpg\", out);\n    }\n\n    public String makeFileName() {\n        Hash hash = new Hash();\n        Calendar cal = Calendar.getInstance();\n        SimpleDateFormat sdf = new SimpleDateFormat(\"yyyyMMddhhmmss\");\n        String strDate = sdf.format(cal.getTime());\n        String hasStringDate = hash.getSha256(strDate); //hash\u5316\n        return hasStringDate + \".jpg\";\n    }\n\n    public String getFileName() {\n        return fileName;\n    }\n\n    public void setFileName(String fileName) {\n        this.fileName = fileName;\n    }\n}\n\n\n\n\nBinaryToBufferedImage\npackage jp.co.sample_app.app.util;\n\nimport java.awt.image.BufferedImage;\nimport java.io.ByteArrayInputStream;\nimport java.io.IOException;\n\nimport javax.imageio.ImageIO;\n\npublic class BinaryToBufferedImage {\n    public static BufferedImage aaa(byte[] imageBinary) throws IOException {\n        BufferedImage img = ImageIO.read(new ByteArrayInputStream(imageBinary));\n\n        int width = img.getWidth();\n        int height = img.getHeight();\n        BufferedImage bufImage = new BufferedImage(width, height, BufferedImage.TYPE_INT_RGB);\n        for(int y=0;y<height;y++){\n            for(int x=0;x<width;x++){\n                int c = img.getRGB(x, y);\n                int r = r(c);\n                int g = g(c);\n                int b = b(c);\n                int rgb = rgb(r,g,b);\n                bufImage.setRGB(x,y,rgb);\n            }\n        }\n\n        return bufImage;\n    }\n\n    public static int a(int c){\n        return c>>>24;\n    }\n    public static int r(int c){\n        return c>>16&0xff;\n    }\n    public static int g(int c){\n        return c>>8&0xff;\n    }\n    public static int b(int c){\n        return c&0xff;\n    }\n    public static int rgb\n    (int r,int g,int b){\n        return 0xff000000 | r <<16 | g <<8 | b;\n    }\n    public static int argb\n    (int a,int r,int g,int b){\n        return a<<24 | r <<16 | g <<8 | b;\n    }\n}\n\n\n\n\nHash.java\npackage jp.co.sample_app.app.util;\n\nimport java.security.MessageDigest;\nimport java.security.NoSuchAlgorithmException;\n\npublic class Hash {\n    /*\n       * \u6587\u5b57\u5217\u304b\u3089 SHA256 \u306e\u30cf\u30c3\u30b7\u30e5\u5024\u3092\u53d6\u5f97\n       */\n    public static String getSha256(String target) {\n        MessageDigest md = null;\n        StringBuffer buf = new StringBuffer();\n        try {\n          md = MessageDigest.getInstance(\"SHA-256\");\n          md.update(target.getBytes());\n          byte[] digest = md.digest();\n\n          for (int i = 0; i < digest.length; i++) {\n            buf.append(String.format(\"%02x\", digest[i]));\n          }\n\n        } catch (NoSuchAlgorithmException e) {\n          e.printStackTrace();\n        }\n\n        return buf.toString();\n    }\n}\n\n\n\nSpringMVC\u306e\u5b9f\u88c5\u3067\u7528\u3044\u305f\u30b3\u30fc\u30c9\u3092\u7d39\u4ecb\u3057\u307e\u3059\u3002\n\u30c8\u30ea\u30df\u30f3\u30b0\u3084\u30d5\u30a3\u30eb\u30bf\u30fc\u306a\u3069\u3092\u7528\u3044\u3066\u52a0\u5de5\u3057\u305f\u753b\u50cf\u30c7\u30fc\u30bf\u3092Java\u3067\u51e6\u7406\u3057\u3066\u6307\u5b9a\u306e\u30d5\u30a9\u30eb\u30c0\u306b\u30a2\u30c3\u30d7\u30ed\u30fc\u30c9\u3059\u308b\u307e\u3067\u306e\u51e6\u7406\u306e\u5099\u5fd8\u9332\u3067\u3059\u3002\n\n## JSP\u5074\u3067\u306e\u51e6\u7406(JS\u542b\u3080)\n\u7c21\u5358\u306b\u8868\u5074(JSP)\u3067\u306e\u51e6\u7406\u306e\u30d5\u30ed\u30fc\u3092\u66f8\u304d\u307e\u3059\u3002\n\n1. \u307e\u305a\u753b\u50cf\u3092\u30a2\u30c3\u30d7\u30ed\u30fc\u30c9\u3002\n2. Canvas\u306b\u753b\u50cfImage\u3092\u66f8\u304d\u51fa\u3059\u3002\n3. \u66f8\u304d\u51fa\u3057\u305fCanvas\u4e0a\u3067\u753b\u50cf\u3092\u3044\u3058\u3044\u3058\u3057\u3066\u3001\n4. toDataURL()\u30e1\u30bd\u30c3\u30c9\u3092\u7528\u3044\u3066Base64\u5f62\u5f0f\u306eImageURI\u3092\u53d6\u308a\u51fa\u3057\u307e\u3059\u3002\n\n\u53d6\u308a\u51fa\u3057\u305fImageURI\u30c7\u30fc\u30bf\u306f\u982d\u306e\u90e8\u5206\u304c`data:image/gif;base64,~~~~~~`\u306e\u3088\u3046\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u3002\nJavaScript\u3092\u7528\u3044\u3066\n\n1. `,`\u542b\u3081\u305d\u308c\u4ee5\u524d\u306e\u6587\u5b57\u5217\u3092\u5207\u308a\u51fa\u3059\n2. `<form:input type=\"hidden\" path=\"imageUri\">`\n\u306b\u5024\u3092\u30bb\u30c3\u30c8\n\n\u203b\u3053\u306e\u969b\u3001JS\u3067byte[]\u306b\u5909\u63db\u3057\u305f\u4e0a\u3067Controller\u306b\u6e21\u3057\u3066\u3082\u3088\u3044\u306e\u3067\u3059\u304c\u3001\u306a\u305c\u304b\u4e0d\u5b8c\u5168\u306abyte[]\u3068\u306a\u3063\u3066\u3057\u307e\u3044\u753b\u50cf\u304c\u5fa9\u5143\u51fa\u6765\u306a\u304b\u3063\u305f\u306e\u3067\u30c7\u30d5\u30a9\u30eb\u30c8\u306eBase64\u5f62\u5f0f\u3067Controller\u306b\u6e21\u3057\u307e\u3057\u305f\u3002\n\n\u305d\u308c\u3067\u306f\u5b9f\u969b\u306bImageUri(25\u4e07\u5b57\u524d\u5f8c\u306e\u6587\u5b57\u5217)\u3092\u53d7\u3051\u53d6\u3063\u3066\u304b\u3089\u306e\u51e6\u7406\u3092\u66f8\u3044\u3066\u3044\u304d\u305f\u3044\u3068\u601d\u3044\u307e\u3059\u3002\n\n\n## Controller\u5074\u3067\u306e\u51e6\u7406(\u8aac\u660e)\n###\u7c21\u5358\u306a\u51e6\u7406\u30d5\u30ed\u30fc\n\n1. Base64\u5f62\u5f0f\u306eString\u3092decodeBase64\u30e1\u30bd\u30c3\u30c9\u3092\u7528\u3044\u3066byte[]\u306b\u5909\u63db\n2. byte[]\u3092ByteArrayInputStream\u30e1\u30bd\u30c3\u30c9\u3092\u7528\u3044\u3066InputStream\u578b\u306b\u5909\u63db\n3. InputStream\u3092ImageIO\u30af\u30e9\u30b9\u306eread\u30e1\u30bd\u30c3\u30c9\u3092\u7528\u3044\u3066BufferedImage\u578b\u306b\u5909\u63db\n\n\u203b\u3082\u3057\u304b\u3059\u308b\u3068\u3053\u3053\u307e\u3067\u306e\u51e6\u7406\u3060\u3051\u3067ImageIO\u30af\u30e9\u30b9\u306ewrite\u30e1\u30bd\u30c3\u30c9\u3092\u7528\u3044\u3066\u30d5\u30a1\u30a4\u30eb\u3068\u3057\u3066\u66f8\u304d\u51fa\u3059\u3053\u3068\u304c\u51fa\u6765\u308b\u304b\u3082\u3057\u308c\u306a\u3044\u306e\u3067\u3059\u304c\u3001\u771f\u3063\u9ed2\u306a\u753b\u50cf\u3057\u304b\u751f\u6210\u3055\u308c\u306a\u304b\u3063\u305f\u306e\u3067\u6539\u3081\u30661\u30d4\u30af\u30bb\u30eb\u305a\u3064\u753b\u50cf\u3092\u751f\u6210\u3059\u308b\u51e6\u7406\u3092\u4eca\u56de\u306f\u66f8\u304d\u307e\u3057\u305f\u3002\u4ee5\u4e0b\u306b\u88dc\u8db3\u306e\u3088\u3046\u306a\u5f62\u3067\u66f8\u3044\u3066\u304a\u304d\u307e\u3059(\u30d3\u30c3\u30c8\u6f14\u7b97\u3092\u7528\u3044\u3066\u3044\u307e\u3059)\u3002\n\n1. \u4e0a\u307e\u3067\u306e\u51e6\u7406\u3067\u751f\u6210\u3055\u308c\u305fBufferedImage\u578b\u306e\u5024\u304b\u3089\u753b\u50cf\u306e\u5e45\u3084\u9ad8\u3055\u3092\u8aad\u307f\u3068\u308a\u3001new\u3059\u308b\n2. BufferedImage\u306egetRGB\u30e1\u30bd\u30c3\u30c9\u3092\u7528\u3044\u30661\u30d4\u30af\u30bb\u30eb\u305a\u3064\u306eaRGB\u5024\u5217\u3092\u53d6\u308a\u51fa\u3059\n3. \u53d6\u308a\u51fa\u3057\u305fRGB\u5024\u5217\u3092\u30d3\u30c3\u30c8\u6f14\u7b97\u3057\u3001a\u5024\u3001R\u5024\u3001G\u5024\u3001B\u5024\u3092\u7b97\u51fa\n4. \u53d6\u308a\u51fa\u3057\u305f\u5024\u3092\u518d\u5ea6\u30011\u30d4\u30af\u30bb\u30eb\u305a\u3064aRGB\u5024\u5217\u3092\u30bb\u30c3\u30c8\n\n\u3053\u3053\u307e\u3067\u304c\u4e00\u5fdcBufferedImage\u306b\u8d77\u3053\u3059\u307e\u3067\u306e\u51e6\u7406\u30d5\u30ed\u30fc\u3067\u3059\u3002\n\u6700\u5f8c\u306b\u5b9f\u969b\u306b\u753b\u50cf\u3068\u3057\u3066\u4fdd\u5b58\u3059\u308b\u307e\u3067\u306e\u30d5\u30ed\u30fc\u3092\u66f8\u304d\u307e\u3059\u3002\n\n1. \u524d\u8a2d\u5b9a\u3068\u3057\u3066\u4fdd\u5b58\u3059\u308b\u30d5\u30a1\u30a4\u30eb\u540d\u304c\u304b\u3076\u3089\u306a\u3044\u3088\u3046\u306b\u73fe\u5728\u6642\u523b\u3092Hash\u5316\u3057\u3066\u30d5\u30a1\u30a4\u30eb\u540d\u3068\u3059\u308b\n2. FileOutputStream\u3092\u7528\u3044\u3066OutputStream\u578b\u306b\u30a2\u30a6\u30c8\u30d7\u30c3\u30c8\u3059\u308b\u30d5\u30a1\u30a4\u30eb\u306e\u4fdd\u5b58\u5148\u3092\u8a2d\u5b9a\n3. ImageIO\u30af\u30e9\u30b9\u306ewrite\u30e1\u30bd\u30c3\u30c9\u3092\u7528\u3044\u3066\u30d5\u30a1\u30a4\u30eb\u306b\u66f8\u304d\u51fa\u3059\u3002\n\n\u4ee5\u4e0a\u3067\u30d5\u30a1\u30a4\u30eb\u751f\u6210\u306e\u30d5\u30ed\u30fc\u3092\u7d42\u308f\u308a\u307e\u3059\u3002\n\u305d\u308c\u3067\u306f\u3001\u4ee5\u4e0b\u304b\u3089\u5b9f\u969b\u306e\u30b3\u30fc\u30c9\u3092\u66f8\u3044\u3066\u3044\u304d\u305f\u3044\u3068\u601d\u3044\u307e\u3059\u3002\n\n### \u5404\u30d5\u30a1\u30a4\u30eb\u3067\u306e\u51e6\u7406\n\n\u307e\u305a\u53d7\u3051\u53d6\u3063\u305fBase64\u5f62\u5f0f\u306eString\u3092\norg.apache.commons.codec.binary.Base64\u30af\u30e9\u30b9\u306e\ndecodeBase64\u30e1\u30bd\u30c3\u30c9\u3092\u7528\u3044\u3066bite[]\u306b\u5909\u63db\u3057\u307e\u3059\u3002\n\n```java:File.java\n\t\tbyte[] imageBinary = Base64.decodeBase64(ImageUri);\n```\n\n\u6b21\u306b\u4f5c\u6210\u3057\u305fBinaryToBufferedImage\u30af\u30e9\u30b9\u3092\u547c\u3073\u8fbc\u307f\u307e\u3059\u3002\n\n```java:File.java\n\t\tBinaryToBufferedImage BToBI = new BinaryToBufferedImage();\n\t\tBufferedImage bufImage = BToBI.aaa(imageBinary);\n```\n\n\u7d9a\u3044\u3066\u4f5c\u6210\u3059\u308bfile\u540d(\u30d1\u30b9\u542b\u3080)\u306e\u8a2d\u5b9a\u3002\n\u4e0a\u3067\u4f5c\u6210\u3057\u305fbufImage\u3001\u30a2\u30c3\u30d7\u30ed\u30fc\u30c9\u5148\u306e\u30d1\u30b9\u3092\u542b\u3080\u30d5\u30a1\u30a4\u30eb\u540d\u3092\u4f7f\u7528\u3057\u3066\u66f8\u304d\u51fa\u3057\u307e\u3059\u3002\n\n```java:File.java\n\t\tOutputStream out=new FileOutputStream(uploadPath + fileName);\n\t\tImageIO.write(bufImage, \"jpg\", out);\n```\n\n\u3053\u306eFile\u30af\u30e9\u30b9\u5185\u3067\u547c\u3073\u51fa\u3057\u3066\u3044\u308b\u81ea\u4f5c\u3057\u305fBinaryToBufferedImage\u30af\u30e9\u30b9\u304c\u3053\u3061\u3089\u3002\n\uff11\u884c\u76ee\u3067\u306f\u5f15\u6570\u3068\u3057\u3066\u53d7\u3051\u53d6\u3063\u305fbyte[]\u3092ByteArrayInputStream\u3092\u7528\u3044\u3066InputStream\u578b\u306b\u5909\u63db\u3057\u3001ImageIO\u30af\u30e9\u30b9\u306eread\u30e1\u30bd\u30c3\u30c9\u3067BufferedImage\u578b\u306b\u5909\u63db\u3059\u308b\u3068\u3044\u3046\u3053\u3068\u3092\u4e00\u6c17\u306b\u3084\u3063\u3066\u3057\u307e\u3063\u3066\u3044\u307e\u3059\u3002\n\uff12\u884c\u76ee\u306f\uff11\u884c\u76ee\u3067\u5f97\u305fBufferedImage\u578b\u306e\u5024\u3092\u7528\u3044\u3066\u518d\u5ea6BufferedImage\u578b\u306b\u66f8\u304d\u8d77\u3053\u3057\u3066\u3044\u307e\u3059\u3002\n\u753b\u50cf\u3092for\u6587\u30671pixel\u305a\u3064\u66f8\u304d\u51fa\u3057\u3066RGB\u5024\u3092\u30bb\u30c3\u30c8\u3057\u76f4\u3057\u3066\u307e\u3059\u3002\n\u30b7\u30d5\u30c8\u6f14\u7b97\u3084\u30d3\u30c3\u30c8\u6f14\u7b97\u3092\u7528\u3044\u3066\u3044\u307e\u3059\u304c\u3001\u7c21\u5358\u306a\u3053\u3068\u3057\u304b\u3057\u3066\u307e\u305b\u3093\u3002\n\u8a73\u3057\u304f\u306f\u4ee5\u4e0b\u306e\u30ea\u30f3\u30af\u3092\u53c2\u8003\u306b\u3057\u3066\u307f\u3066\u304f\u3060\u3055\u3044\u3002\n[\u30b7\u30d5\u30c8\u6f14\u7b97](http://www.javaroad.jp/java_operator4.htm)\n[\u30d3\u30c3\u30c8\u6f14\u7b97](http://www.javaroad.jp/java_operator5.htm)\n\n```BunaryToBufferedImage.java\npublic static BufferedImage aaa(byte[] imageBinary) throws IOException {\n    \tBufferedImage img = ImageIO.read(new ByteArrayInputStream(imageBinary));\n\n        int width = img.getWidth();\n        int height = img.getHeight();\n\t    BufferedImage bufImage = new BufferedImage(width, height, BufferedImage.TYPE_INT_RGB);\n\t\tfor(int y=0;y<height;y++){\n            for(int x=0;x<width;x++){\n                int c = img.getRGB(x, y);\n                int r = r(c);\n                int g = g(c);\n                int b = b(c);\n                int rgb = rgb(r,g,b);\n                bufImage.setRGB(x,y,rgb);\n            }\n        }\n\t\t\n    \treturn bufImage;\n    }\n    \n    //\u4ee5\u4e0b\u3001\u30b7\u30d5\u30c8\u6f14\u7b97\u30d3\u30c3\u30c8\u6f14\u7b97\u306e\u30e1\u30bd\u30c3\u30c9\n\tpublic static int a(int c){\n        return c>>>24;\n    }\n    public static int r(int c){\n        return c>>16&0xff;\n    }\n    public static int g(int c){\n        return c>>8&0xff;\n    }\n    public static int b(int c){\n        return c&0xff;\n    }\n    public static int rgb\n    (int r,int g,int b){\n        return 0xff000000 | r <<16 | g <<8 | b;\n    }\n    public static int argb\n    (int a,int r,int g,int b){\n        return a<<24 | r <<16 | g <<8 | b;\n    }\n```\n\n### \u304a\u307e\u3051(\u30d5\u30a1\u30a4\u30eb\u540dHash\u5316\u306e\u3059\u3059\u3081)\n\u3053\u3053\u304b\u3089\u304a\u307e\u3051\u3067\u3059\u304c\u3001\u73fe\u5728\u6642\u523b\u3092\u53d6\u5f97\u3057\u3066\u30cf\u30c3\u30b7\u30e5\u5316\u3057\u305f\u3082\u306e\u3092\u30d5\u30a1\u30a4\u30eb\u540d\u3068\u3059\u308b\u51e6\u7406\u3092\u66f8\u3044\u3066\u304a\u304d\u307e\u3059\u3002\n\u305d\u3082\u305d\u3082\u306a\u3093\u3067\u30cf\u30c3\u30b7\u30e5\u5316\u3059\u308b\u304b\u3068\u3044\u3046\u3068\u30bb\u30ad\u30e5\u30ea\u30c6\u30a3\u306a\u89b3\u70b9\u3068\u4fdd\u7ba1\u7684\u306a\u89b3\u70b9\u306b\u3088\u308b\u3082\u306e\u3067\u3057\u305f\u3002\n\n```java:File.java\npublic String makeFileName() {\n    \tHash hash = new Hash();\n\t\tCalendar cal = Calendar.getInstance();\n\t    SimpleDateFormat sdf = new SimpleDateFormat(\"yyyyMMddhhmmss\");\n\t    String strDate = sdf.format(cal.getTime());\n\t    String hasStringDate = hash.getSha256(strDate); //hash\u5316\n\t\treturn hasStringDate + \".jpg\";\n    }\n```\n\n\u3053\u3053\u3067\u547c\u3073\u51fa\u3057\u3066\u308b\u81ea\u4f5c\u3057\u305fHash\u30af\u30e9\u30b9\u3067\u3059\u304c\u5185\u5bb9\u306f\u3053\u3061\u3089\u3002\n\u3053\u3053\u3067\u306fSHA-256\u5f62\u5f0f\u3067\u30cf\u30c3\u30b7\u30e5\u5316\u3092\u884c\u3063\u3066\u3044\u307e\u3059\u3002\n\n```java:getSha256.java\npublic static String getSha256(String target) {\n\t    MessageDigest md = null;\n\t    StringBuffer buf = new StringBuffer();\n\t    try {\n\t      md = MessageDigest.getInstance(\"SHA-256\");\n\t      md.update(target.getBytes());\n\t      byte[] digest = md.digest();\n\t \n\t      for (int i = 0; i < digest.length; i++) {\n\t        buf.append(String.format(\"%02x\", digest[i]));\n\t      }\n\t \n\t    } catch (NoSuchAlgorithmException e) {\n\t      e.printStackTrace();\n\t    }\n\t \n\t    return buf.toString();\n\t}\n```\n\n\u6700\u5f8c\u306b\u3001\u4ee5\u4e0b\u304c\u547c\u3073\u51fa\u3057\u5074\u306e\u30bd\u30fc\u30b9\u3067\u3059\u3002\n\u4eca\u56de\u306fjsp\u5074\u3067fileUploadForm\u30af\u30e9\u30b9\u306eimageUri\u30d5\u30a3\u30fc\u30eb\u30c9(String\u578b)\u306b\u5024\u3092\u30bb\u30c3\u30c8\u3057\u305f\u306e\u3067get\u3067\u53d6\u308a\u51fa\u3057\u307e\u3059\u3002\n\u5177\u4f53\u7684\u306a\u51e6\u7406\u3092\u8a18\u8ff0\u3057\u305fFile\u30af\u30e9\u30b9\u3092\u547c\u3073\u51fa\u3057\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u5316\u3057\u3001fileUpload\u30e1\u30bd\u30c3\u30c9\u306b\u5f15\u6570\u3067imageUri\u3092\u305d\u306e\u307e\u307e\u6e21\u3057\u3066\u30a2\u30c3\u30d7\u30ed\u30fc\u30c9\u307e\u3067\u306e\u51e6\u7406\u3092\u884c\u308f\u305b\u3066\u3044\u307e\u3059\u3002\n\u3061\u306a\u307f\u306b\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u5316\u3057\u305f\u969b\u306b\u547c\u3073\u51fa\u3055\u308c\u308b\u30c7\u30d5\u30a9\u30eb\u30c8\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u306e\u4e2d\u3067\u304a\u307e\u3051\u3067\u7d39\u4ecb\u3057\u305ffile\u540d\u3092\u30bb\u30c3\u30c8\u3057\u3066\u3044\u307e\u3059\u3002\n\n```java:MainController.java\nString imageUri = fileUploadForm.getImageUri();\nFile file = new File();\nfile.fileUpload(imageUri);\n```\n\n## Controller\u5074\u3067\u306e\u51e6\u7406(\u5168\u30b3\u30fc\u30c9)\n\n```java:MainController.java\nString imageUri = fileUploadForm.getImageUri();\nFile file = new File();\nfile.fileUpload(imageUri);\n```\n\n```java:File.java\npackage jp.co.sample_app.app.util;\n\nimport java.awt.image.BufferedImage;\nimport java.io.FileOutputStream;\nimport java.io.IOException;\nimport java.io.OutputStream;\nimport java.text.SimpleDateFormat;\nimport java.util.Calendar;\n\nimport javax.imageio.ImageIO;\n\nimport org.apache.commons.codec.binary.Base64;\n\npublic class File {\n\tprivate String fileName ;\n\t\n\tpublic File() {\n\t\tfileName = makeFileName();\n\t}\n\n    public void fileUpload(String ImageUri) throws IOException {\n\t    String uploadPath = \"/usr/share/tomcat7/webapps/sample_app/resources/images/\";\n\t\tbyte[] imageBinary = Base64.decodeBase64(ImageUri);\n\t\tBinaryToBufferedImage BToB = new BinaryToBufferedImage();\n\t\tBufferedImage bufImage = BToB.aaa(imageBinary);\n\t\tOutputStream out=new FileOutputStream(uploadPath + fileName);\n\t\tImageIO.write(bufImage, \"jpg\", out);\n    }\n    \n    public String makeFileName() {\n    \tHash hash = new Hash();\n\t\tCalendar cal = Calendar.getInstance();\n\t    SimpleDateFormat sdf = new SimpleDateFormat(\"yyyyMMddhhmmss\");\n\t    String strDate = sdf.format(cal.getTime());\n\t    String hasStringDate = hash.getSha256(strDate); //hash\u5316\n\t\treturn hasStringDate + \".jpg\";\n    }\n\n\tpublic String getFileName() {\n\t\treturn fileName;\n\t}\n\n\tpublic void setFileName(String fileName) {\n\t\tthis.fileName = fileName;\n\t}\n}\n\n```\n\n```java:BinaryToBufferedImage\npackage jp.co.sample_app.app.util;\n\nimport java.awt.image.BufferedImage;\nimport java.io.ByteArrayInputStream;\nimport java.io.IOException;\n\nimport javax.imageio.ImageIO;\n\npublic class BinaryToBufferedImage {\n    public static BufferedImage aaa(byte[] imageBinary) throws IOException {\n    \tBufferedImage img = ImageIO.read(new ByteArrayInputStream(imageBinary));\n\n        int width = img.getWidth();\n        int height = img.getHeight();\n\t    BufferedImage bufImage = new BufferedImage(width, height, BufferedImage.TYPE_INT_RGB);\n\t\tfor(int y=0;y<height;y++){\n            for(int x=0;x<width;x++){\n                int c = img.getRGB(x, y);\n                int r = r(c);\n                int g = g(c);\n                int b = b(c);\n                int rgb = rgb(r,g,b);\n                bufImage.setRGB(x,y,rgb);\n            }\n        }\n\t\t\n    \treturn bufImage;\n    }\n    \n\tpublic static int a(int c){\n        return c>>>24;\n    }\n    public static int r(int c){\n        return c>>16&0xff;\n    }\n    public static int g(int c){\n        return c>>8&0xff;\n    }\n    public static int b(int c){\n        return c&0xff;\n    }\n    public static int rgb\n    (int r,int g,int b){\n        return 0xff000000 | r <<16 | g <<8 | b;\n    }\n    public static int argb\n    (int a,int r,int g,int b){\n        return a<<24 | r <<16 | g <<8 | b;\n    }\n}\n\n```\n\n```Hash.java\npackage jp.co.sample_app.app.util;\n\nimport java.security.MessageDigest;\nimport java.security.NoSuchAlgorithmException;\n\npublic class Hash {\n\t/*\n\t   * \u6587\u5b57\u5217\u304b\u3089 SHA256 \u306e\u30cf\u30c3\u30b7\u30e5\u5024\u3092\u53d6\u5f97\n\t   */\n\tpublic static String getSha256(String target) {\n\t    MessageDigest md = null;\n\t    StringBuffer buf = new StringBuffer();\n\t    try {\n\t      md = MessageDigest.getInstance(\"SHA-256\");\n\t      md.update(target.getBytes());\n\t      byte[] digest = md.digest();\n\t \n\t      for (int i = 0; i < digest.length; i++) {\n\t        buf.append(String.format(\"%02x\", digest[i]));\n\t      }\n\t \n\t    } catch (NoSuchAlgorithmException e) {\n\t      e.printStackTrace();\n\t    }\n\t \n\t    return buf.toString();\n\t}\n}\n\n```\n", "tags": ["Java", "base64", "\u30b7\u30d5\u30c8\u6f14\u7b97"]}