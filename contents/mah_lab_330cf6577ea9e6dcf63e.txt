{"context": "\n\n\u3084\u308b\u3053\u3068\n\u3053\u3093\u306a\u611f\u3058\u306b\u3001RGB\u306e\u30b9\u30e9\u30a4\u30c0\u30fc\u3092\u52d5\u304b\u3059\u3068\u8272\u304c\u5909\u308f\u308b\u3001\u307f\u305f\u3044\u306a\u30a2\u30d7\u30ea\u3092\u4f5c\u3063\u3066\u307f\u308b\u3002\n\u666e\u901a\u306b\u4f5c\u308b\u3068NotifyPropertyChanged\u3092\u99c6\u4f7f\u3057\u3066\u5024\u306e\u5909\u5316\u3092\u5404\u30d7\u30ed\u30d1\u30c6\u30a3\u306b\u4f1d\u64ad\u3055\u305b\u308b\u5fc5\u8981\u304c\u3042\u308b\u3068\u601d\u3046\u306e\u3067\u3059\u304c\u3001ReactiveProperty\u3092\u5229\u7528\u3059\u308b\u3068\u30b9\u30b2\u30fc\u7c21\u5358\u306b\u66f8\u3051\u308b\u3088\u3001\u3068\u3044\u3046\u30b5\u30f3\u30d7\u30eb\u3002\n\n\nView (XAML + C#)\nusing System;\nusing System.Collections.Generic;\nusing ReactiveColorChooser.ViewModels;\nusing Xamarin.Forms;\n\nnamespace ReactiveColorChooser.Views\n{\n    public partial class ColorChooserPage : ContentPage\n    {\n        public ColorChooserPage()\n        {\n            InitializeComponent();\n\n            Title = \"Reactive Color Chooser\";\n            BindingContext = new ColorChooserViewModel();\n\n            Red.SetBinding<ColorChooserViewModel>(Slider.ValueProperty, vm => vm.Red.Value);\n            Green.SetBinding<ColorChooserViewModel>(Slider.ValueProperty, vm => vm.Green.Value);\n            Blue.SetBinding<ColorChooserViewModel>(Slider.ValueProperty, vm => vm.Blue.Value);\n            MixedColor.SetBinding<ColorChooserViewModel>(BoxView.BackgroundColorProperty, vm => vm.MixedColor.Value);\n        }\n    }\n}\n\n\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<ContentPage xmlns=\"http://xamarin.com/schemas/2014/forms\" xmlns:x=\"http://schemas.microsoft.com/winfx/2009/xaml\" x:Class=\"ReactiveColorChooser.Views.ColorChooserPage\">\n    <ContentPage.Content>\n        <StackLayout Padding=\"10, 20\">\n            <StackLayout>\n                <Label Text=\"{Binding IntRed.Value}\" TextColor=\"Red\" />\n                <Slider x:Name=\"Red\" Maximum=\"1\" Minimum=\"0\" Value=\"0\" />\n                <Label Text=\"{Binding IntGreen.Value}\" TextColor=\"Green\" />\n                <Slider x:Name=\"Green\" Maximum=\"1\" Minimum=\"0\" Value=\"0\" />\n                <Label Text=\"{Binding IntBlue.Value}\" TextColor=\"Blue\" />\n                <Slider x:Name=\"Blue\" Maximum=\"1\" Minimum=\"0\" Value=\"0\" />\n            </StackLayout>\n            <StackLayout Orientation=\"Vertical\" Padding=\"0, 20, 0, 0\">\n                <BoxView x:Name=\"MixedColor\" />\n                <Label Text=\"{Binding HexColor.Value}\" TextColor=\"{Binding MixedColor.Value}\" FontSize=\"20\" />\n            </StackLayout>\n        </StackLayout>\n    </ContentPage.Content>\n</ContentPage>\n\n\nContentPage\u306bBindingContext\u3092\u8a2d\u5b9a\u3059\u308b\u3053\u3068\u3067\u3001XAML\u5074\u3067Binding\u304c\u4f7f\u3048\u308b\u3088\u3046\u306b\u306a\u308b\u3002\n\u30b3\u30fc\u30c9\u5074\u3067ViewModel\u306e\u5024\u3068View\u306e\u5024\u3092SetBinding\u3067\u7d10\u4ed8\u3051\u3066\u3042\u3052\u308b\u5fc5\u8981\u304c\u3042\u308b\u3002\u4e00\u65b9\u3067\u3001SetBinding\u304c\u305a\u3089\u305a\u3089\u4e26\u3076\u306e\u306f\u3001\u3044\u3055\u3055\u304b\u5197\u9577\u306a\u611f\u3082\u3042\u308b\u3002\n\n\nViewModel\nusing System;\nusing System.Reactive.Linq;\nusing Reactive.Bindings;\nusing Xamarin.Forms;\n\nnamespace ReactiveColorChooser.ViewModels\n{\n    public class ColorChooserViewModel\n    {\n        public ReactiveProperty<double> Red { get; private set; }\n        public ReactiveProperty<int> IntRed { get; private set; }\n\n        public ReactiveProperty<double> Green { get; private set; }\n        public ReactiveProperty<int> IntGreen { get; private set; }\n\n        public ReactiveProperty<double> Blue { get; private set; }\n        public ReactiveProperty<int> IntBlue { get; private set; }\n\n        public ReactiveProperty<Color> MixedColor { get; private set; }\n        public ReactiveProperty<string> HexColor { get; private set; }\n\n        public ColorChooserViewModel()\n        {\n            Red   = new ReactiveProperty<double>(0.0f);\n            Green = new ReactiveProperty<double>(0.0f);\n            Blue  = new ReactiveProperty<double>(0.0f);\n\n           // \u30b9\u30e9\u30a4\u30c0\u30fc\u306e\u5024\u30920 - 255\u306e\u7bc4\u56f2\u306e\u6574\u6570\u306b\u5909\u63db\n            IntRed = Observable.Select(Red, DoubleToInt).ToReactiveProperty();\n            IntGreen = Observable.Select(Green, DoubleToInt).ToReactiveProperty();\n            IntBlue = Observable.Select(Blue, DoubleToInt).ToReactiveProperty();\n\n           // \u30b9\u30e9\u30a4\u30c0\u30fc\u306e\u5024\u304b\u3089\u8272\u3092\u751f\u6210\n            MixedColor = Observable.CombineLatest(IntRed, IntGreen, IntBlue, (r, g, b) => Color.FromRgb(r, g, b)).ToReactiveProperty();\n\n            // \u73fe\u5728\u306e\u8272\u309216\u9032\u6570\u8868\u793a\n            HexColor = Observable.CombineLatest(IntRed, IntGreen, IntBlue, (r, g, b) => string.Format(@\"#{0}{1}{2}\", r.ToString(\"X2\"), g.ToString(\"X2\"), b.ToString(\"X2\"))).ToReactiveProperty();\n        }\n\n        private int DoubleToInt(double x)\n        {\n            return (int)(x * 255);\n        }\n    }\n}\n\n\n\nReactiveProperty<T>\u578b\u3067\u5ba3\u8a00\u3059\u308b\u3053\u3068\u3067\u3001\u52dd\u624b\u306b\u5024\u306e\u5909\u5316\u3092\u76e3\u8996\u3057\u3066\u304f\u308c\u307e\u3059\u3002\u30a4\u30b1\u3066\u308b\uff01\n\u5024\u306e\u5909\u5316\u306fObservable\u3067\u53d7\u3051\u53d6\u3063\u3066\u51e6\u7406\u3059\u308c\u3070\u826f\u3044\u3067\u3059\u3002\u30ea\u30a2\u30af\u30c6\u30a3\u30d6\u611f\uff01\n\u51e6\u7406\u5f8c\u306fToReactiveProperty\u3067ReactiveProperty\u578b\u306b\u623b\u3059\u306e\u3092\u5fd8\u308c\u305a\u306b\u3002\n\n\u53d7\u3051\u53d6\u3063\u305f\u5024\u306b\u5bfe\u3057\u3066\u306f\u3044\u308d\u3044\u308d\u306a\u51e6\u7406\u304c\u3067\u304d\u308b\u306e\u3067\u3001\u3053\u3061\u3089\u306e\u65e9\u898b\u8868\u3092\u53c2\u8003\u306b\u3057\u306a\u304c\u3089\u66f8\u304f\u3068\u826f\u3044\u306e\u3067\u306f\u3068\u601d\u3044\u307e\u3059\u3002\u3068\u3066\u3082\u53c2\u8003\u306b\u3055\u305b\u3066\u3044\u305f\u3060\u304d\u307e\u3057\u305f\u3001\u3042\u308a\u304c\u3068\u3046\u3054\u3056\u3044\u307e\u3059\u3002\nReactive Extensions\u518d\u5165\u9580 \u756a\u5916\u7de8\u300cSystem.Reactive.Linq.Observable\u306e\u30e1\u30bd\u30c3\u30c9\u4e00\u89a7\u3068\u30e1\u30e2\u300d\nC#\u306e\u521d\u5fc3\u8005\u7684\u306b\u306f\u3001\u300c\u3061\u3083\u3093\u3068\u5909\u63db\u3055\u308c\u3066\u308b\u304b\u5206\u304b\u3089\u3093\u306a\u30fc\u300d\u3068\u3044\u3046\u3068\u304d\u306fDo\u3092\u631f\u3081\u3070\u826f\u3044\u3053\u3068\u3060\u3051\u899a\u3048\u3066\u3044\u308c\u3070\u5fdc\u7528\u304c\u52b9\u304f\u6c17\u304c\u3057\u307e\u3057\u305f\u3002Ruby\u3067\u8a00\u3046tap\u307f\u305f\u3044\u306a\u3082\u3093\u3067\u3059\u306d\u3002\n// \u4f8b: \u5024\u3092\u5909\u63db\u3059\u308b\u305f\u3073\u306b\u30ed\u30b0\u8868\u793a\nIntRed = Observable.Select(Red, DoubleToInt).Do(x => System.Diagnostics.Debug.WriteLine(x)).ToReactiveProperty();\n\n\n\u3042\u3068\u304c\u304d\n\u30ea\u30a2\u30af\u30c6\u30a3\u30d6\u3001\u826f\u3044\uff01\n\u53c2\u8003\uff1aMVVM\u3092\u30ea\u30a2\u30af\u30c6\u30a3\u30d6\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u3067\u5feb\u9069\u306bReactiveProperty\u30aa\u30fc\u30d0\u30fc\u30d3\u30e5\u30fc\n\n## \u3084\u308b\u3053\u3068\n\n\u3053\u3093\u306a\u611f\u3058\u306b\u3001RGB\u306e\u30b9\u30e9\u30a4\u30c0\u30fc\u3092\u52d5\u304b\u3059\u3068\u8272\u304c\u5909\u308f\u308b\u3001\u307f\u305f\u3044\u306a\u30a2\u30d7\u30ea\u3092\u4f5c\u3063\u3066\u307f\u308b\u3002\n\u666e\u901a\u306b\u4f5c\u308b\u3068`NotifyPropertyChanged`\u3092\u99c6\u4f7f\u3057\u3066\u5024\u306e\u5909\u5316\u3092\u5404\u30d7\u30ed\u30d1\u30c6\u30a3\u306b\u4f1d\u64ad\u3055\u305b\u308b\u5fc5\u8981\u304c\u3042\u308b\u3068\u601d\u3046\u306e\u3067\u3059\u304c\u3001[ReactiveProperty](https://github.com/runceel/ReactiveProperty)\u3092\u5229\u7528\u3059\u308b\u3068\u30b9\u30b2\u30fc\u7c21\u5358\u306b\u66f8\u3051\u308b\u3088\u3001\u3068\u3044\u3046\u30b5\u30f3\u30d7\u30eb\u3002\n\n![zmON6fWJMD.gif](https://qiita-image-store.s3.amazonaws.com/0/5877/62fe532e-6b05-c6ae-73fb-7813e7fd6322.gif \"zmON6fWJMD.gif\")\n\n\n## View (XAML + C#)\n\n```csharp\nusing System;\nusing System.Collections.Generic;\nusing ReactiveColorChooser.ViewModels;\nusing Xamarin.Forms;\n\nnamespace ReactiveColorChooser.Views\n{\n\tpublic partial class ColorChooserPage : ContentPage\n\t{\n\t\tpublic ColorChooserPage()\n\t\t{\n\t\t\tInitializeComponent();\n\n\t\t\tTitle = \"Reactive Color Chooser\";\n\t\t\tBindingContext = new ColorChooserViewModel();\n\n\t\t\tRed.SetBinding<ColorChooserViewModel>(Slider.ValueProperty, vm => vm.Red.Value);\n\t\t\tGreen.SetBinding<ColorChooserViewModel>(Slider.ValueProperty, vm => vm.Green.Value);\n\t\t\tBlue.SetBinding<ColorChooserViewModel>(Slider.ValueProperty, vm => vm.Blue.Value);\n\t\t\tMixedColor.SetBinding<ColorChooserViewModel>(BoxView.BackgroundColorProperty, vm => vm.MixedColor.Value);\n\t\t}\n\t}\n}\n\n```\n\n```xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<ContentPage xmlns=\"http://xamarin.com/schemas/2014/forms\" xmlns:x=\"http://schemas.microsoft.com/winfx/2009/xaml\" x:Class=\"ReactiveColorChooser.Views.ColorChooserPage\">\n\t<ContentPage.Content>\n\t\t<StackLayout Padding=\"10, 20\">\n\t\t\t<StackLayout>\n\t\t\t\t<Label Text=\"{Binding IntRed.Value}\" TextColor=\"Red\" />\n\t\t\t\t<Slider x:Name=\"Red\" Maximum=\"1\" Minimum=\"0\" Value=\"0\" />\n\t\t\t\t<Label Text=\"{Binding IntGreen.Value}\" TextColor=\"Green\" />\n\t\t\t\t<Slider x:Name=\"Green\" Maximum=\"1\" Minimum=\"0\" Value=\"0\" />\n\t\t\t\t<Label Text=\"{Binding IntBlue.Value}\" TextColor=\"Blue\" />\n\t\t\t\t<Slider x:Name=\"Blue\" Maximum=\"1\" Minimum=\"0\" Value=\"0\" />\n\t\t\t</StackLayout>\n\t\t\t<StackLayout Orientation=\"Vertical\" Padding=\"0, 20, 0, 0\">\n\t\t\t\t<BoxView x:Name=\"MixedColor\" />\n\t\t\t\t<Label Text=\"{Binding HexColor.Value}\" TextColor=\"{Binding MixedColor.Value}\" FontSize=\"20\" />\n\t\t\t</StackLayout>\n\t\t</StackLayout>\n\t</ContentPage.Content>\n</ContentPage>\n```\n\n* ContentPage\u306bBindingContext\u3092\u8a2d\u5b9a\u3059\u308b\u3053\u3068\u3067\u3001XAML\u5074\u3067Binding\u304c\u4f7f\u3048\u308b\u3088\u3046\u306b\u306a\u308b\u3002\n* \u30b3\u30fc\u30c9\u5074\u3067ViewModel\u306e\u5024\u3068View\u306e\u5024\u3092SetBinding\u3067\u7d10\u4ed8\u3051\u3066\u3042\u3052\u308b\u5fc5\u8981\u304c\u3042\u308b\u3002\u4e00\u65b9\u3067\u3001SetBinding\u304c\u305a\u3089\u305a\u3089\u4e26\u3076\u306e\u306f\u3001\u3044\u3055\u3055\u304b\u5197\u9577\u306a\u611f\u3082\u3042\u308b\u3002\n\n## ViewModel\n\n```csharp\nusing System;\nusing System.Reactive.Linq;\nusing Reactive.Bindings;\nusing Xamarin.Forms;\n\nnamespace ReactiveColorChooser.ViewModels\n{\n\tpublic class ColorChooserViewModel\n\t{\n\t\tpublic ReactiveProperty<double> Red { get; private set; }\n\t\tpublic ReactiveProperty<int> IntRed { get; private set; }\n\n\t\tpublic ReactiveProperty<double> Green { get; private set; }\n\t\tpublic ReactiveProperty<int> IntGreen { get; private set; }\n\n\t\tpublic ReactiveProperty<double> Blue { get; private set; }\n\t\tpublic ReactiveProperty<int> IntBlue { get; private set; }\n\n\t\tpublic ReactiveProperty<Color> MixedColor { get; private set; }\n\t\tpublic ReactiveProperty<string> HexColor { get; private set; }\n\n\t\tpublic ColorChooserViewModel()\n\t\t{\n\t\t\tRed   = new ReactiveProperty<double>(0.0f);\n\t\t\tGreen = new ReactiveProperty<double>(0.0f);\n\t\t\tBlue  = new ReactiveProperty<double>(0.0f);\n\n           // \u30b9\u30e9\u30a4\u30c0\u30fc\u306e\u5024\u30920 - 255\u306e\u7bc4\u56f2\u306e\u6574\u6570\u306b\u5909\u63db\n\t\t\tIntRed = Observable.Select(Red, DoubleToInt).ToReactiveProperty();\n\t\t\tIntGreen = Observable.Select(Green, DoubleToInt).ToReactiveProperty();\n\t\t\tIntBlue = Observable.Select(Blue, DoubleToInt).ToReactiveProperty();\n\n           // \u30b9\u30e9\u30a4\u30c0\u30fc\u306e\u5024\u304b\u3089\u8272\u3092\u751f\u6210\n\t\t\tMixedColor = Observable.CombineLatest(IntRed, IntGreen, IntBlue, (r, g, b) => Color.FromRgb(r, g, b)).ToReactiveProperty();\n\n\t\t\t// \u73fe\u5728\u306e\u8272\u309216\u9032\u6570\u8868\u793a\n\t\t\tHexColor = Observable.CombineLatest(IntRed, IntGreen, IntBlue, (r, g, b) => string.Format(@\"#{0}{1}{2}\", r.ToString(\"X2\"), g.ToString(\"X2\"), b.ToString(\"X2\"))).ToReactiveProperty();\n\t\t}\n\n\t\tprivate int DoubleToInt(double x)\n\t\t{\n\t\t\treturn (int)(x * 255);\n\t\t}\n\t}\n}\n```\n\n* `ReactiveProperty<T>`\u578b\u3067\u5ba3\u8a00\u3059\u308b\u3053\u3068\u3067\u3001\u52dd\u624b\u306b\u5024\u306e\u5909\u5316\u3092\u76e3\u8996\u3057\u3066\u304f\u308c\u307e\u3059\u3002\u30a4\u30b1\u3066\u308b\uff01\n* \u5024\u306e\u5909\u5316\u306fObservable\u3067\u53d7\u3051\u53d6\u3063\u3066\u51e6\u7406\u3059\u308c\u3070\u826f\u3044\u3067\u3059\u3002\u30ea\u30a2\u30af\u30c6\u30a3\u30d6\u611f\uff01\n* \u51e6\u7406\u5f8c\u306f`ToReactiveProperty`\u3067ReactiveProperty\u578b\u306b\u623b\u3059\u306e\u3092\u5fd8\u308c\u305a\u306b\u3002\n\n\u53d7\u3051\u53d6\u3063\u305f\u5024\u306b\u5bfe\u3057\u3066\u306f\u3044\u308d\u3044\u308d\u306a\u51e6\u7406\u304c\u3067\u304d\u308b\u306e\u3067\u3001\u3053\u3061\u3089\u306e\u65e9\u898b\u8868\u3092\u53c2\u8003\u306b\u3057\u306a\u304c\u3089\u66f8\u304f\u3068\u826f\u3044\u306e\u3067\u306f\u3068\u601d\u3044\u307e\u3059\u3002\u3068\u3066\u3082\u53c2\u8003\u306b\u3055\u305b\u3066\u3044\u305f\u3060\u304d\u307e\u3057\u305f\u3001\u3042\u308a\u304c\u3068\u3046\u3054\u3056\u3044\u307e\u3059\u3002\n\n[Reactive Extensions\u518d\u5165\u9580 \u756a\u5916\u7de8\u300cSystem.Reactive.Linq.Observable\u306e\u30e1\u30bd\u30c3\u30c9\u4e00\u89a7\u3068\u30e1\u30e2\u300d](http://blog.okazuki.jp/entry/20111207/1323099346)\n\nC#\u306e\u521d\u5fc3\u8005\u7684\u306b\u306f\u3001\u300c\u3061\u3083\u3093\u3068\u5909\u63db\u3055\u308c\u3066\u308b\u304b\u5206\u304b\u3089\u3093\u306a\u30fc\u300d\u3068\u3044\u3046\u3068\u304d\u306f`Do`\u3092\u631f\u3081\u3070\u826f\u3044\u3053\u3068\u3060\u3051\u899a\u3048\u3066\u3044\u308c\u3070\u5fdc\u7528\u304c\u52b9\u304f\u6c17\u304c\u3057\u307e\u3057\u305f\u3002Ruby\u3067\u8a00\u3046`tap`\u307f\u305f\u3044\u306a\u3082\u3093\u3067\u3059\u306d\u3002\n\n```csharp\n// \u4f8b: \u5024\u3092\u5909\u63db\u3059\u308b\u305f\u3073\u306b\u30ed\u30b0\u8868\u793a\nIntRed = Observable.Select(Red, DoubleToInt).Do(x => System.Diagnostics.Debug.WriteLine(x)).ToReactiveProperty();\n```\n\n## \u3042\u3068\u304c\u304d\n\n\u30ea\u30a2\u30af\u30c6\u30a3\u30d6\u3001\u826f\u3044\uff01\n\n\u53c2\u8003\uff1a[MVVM\u3092\u30ea\u30a2\u30af\u30c6\u30a3\u30d6\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u3067\u5feb\u9069\u306bReactiveProperty\u30aa\u30fc\u30d0\u30fc\u30d3\u30e5\u30fc](http://blog.okazuki.jp/entry/2015/12/05/221154)\n", "tags": ["ReactiveProperty", "Xamarin"]}