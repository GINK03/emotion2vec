{"context": "\n\n\u306f\u3058\u3081\u306b\n\u8a00\u8a9e\u51e6\u7406100\u672c\u30ce\u30c3\u30af\u306f\u3001\u6771\u5317\u5927\u5b66\u306e\u4e7e\u30fb\u5ca1\u5d0e\u7814\u7a76\u5ba4\u3067\u516c\u958b\u3055\u308c\u3066\u3044\u308b\u3001\u5b9f\u8df5\u7684\u306a\u8ab2\u984c\u306b\u53d6\u308a\u7d44\u307f\u306a\u304c\u3089\uff0c\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\uff0c\u30c7\u30fc\u30bf\u5206\u6790\uff0c\u7814\u7a76\u306e\u30b9\u30ad\u30eb\u3092\u697d\u3057\u304f\u7fd2\u5f97\u3059\u308b\u3053\u3068\u3092\u76ee\u6307\u3057\u305f\u554f\u984c\u96c6\u3067\u3059\u3002\n\u3053\u308c\u307e\u3067\u306b\u3001\u300c\u7b2c4\u7ae0 \u5f62\u614b\u7d20\u89e3\u6790\u300d\u3001\u300c\u7b2c5\u7ae0 \u4fc2\u308a\u53d7\u3051\u89e3\u6790\u300d\u3001\u300c\u7b2c8\u7ae0 \u6a5f\u68b0\u5b66\u7fd2\u300d\u3001\u300c\u7b2c9\u7ae0 \u30d9\u30af\u30c8\u30eb\u7a7a\u9593\u6cd5 (I)\u300d\u3092\u89e3\u3044\u3066\u304d\u307e\u3057\u305f\u3002\u5f15\u304d\u7d9a\u304d\u300c\u7b2c10\u7ae0 \u30d9\u30af\u30c8\u30eb\u7a7a\u9593\u6cd5 (II)\u300d\u3092\u9032\u3081\u3066\u3044\u304d\u307e\u3059\u3002\n9\u7ae0\u3067\u306f\u3001\u306a\u3093\u3061\u3083\u3063\u3066word2vec\u3092\u5b9f\u88c5\u3057\u307e\u3057\u305f\u304c\u300110\u7ae0\u3067\u306f\u4e00\u822c\u306b\u516c\u958b\u3055\u308c\u3066\u3044\u308bword2vec\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u4f7f\u3063\u3066\u8272\u3005\u3084\u3063\u3066\u3044\u304d\u307e\u3059\u3002\u3053\u308c\u304c\u6700\u7d42\u7ae0\u3067\u3059\u3002\n8\u7ae0\u30019\u7ae0\u306f\u3001NLP\u521d\u5fc3\u8005\u306e\u79c1\u306b\u306f\u3001\u554f\u984c\u6587\u306e\u7406\u89e3\u3059\u3089\u304a\u307c\u3064\u304b\u306a\u3044\u72b6\u614b\u3060\u3063\u305f\u305f\u3081\u3001\u30bf\u30a4\u30c8\u30eb\u3092\u300c\u554f\u984c\u6587\u306e\u610f\u5473\u304c\u308f\u304b\u3089\u306a\u3044\u4eba\u306e\u305f\u3081\u306e\u301c\u300d\u3068\u984c\u3057\u3066\u3001\u554f\u984c\u6587\u306e\u89e3\u91c8\u3068\u4f75\u305b\u3066\u8aac\u660e\u3057\u3066\u304d\u307e\u3057\u305f\u3002\n\u3053\u306e\u7ae0\u306f\u305d\u3053\u307e\u3067\u96e3\u3057\u304f\u306a\u3044\u3068\u601d\u3044\u307e\u3059\u306e\u3067\u3001\u30bf\u30a4\u30c8\u30eb\u304b\u3089\u300c\u554f\u984c\u6587\u306e\u610f\u5473\u304c\u308f\u304b\u3089\u306a\u3044\u4eba\u306e\u305f\u3081\u306e\u301c\u300d\u3092\u5916\u3057\u30014\u7ae0\u30015\u7ae0\u306e\u6de1\u3005\u3068\u30b3\u30fc\u30c9\u3092\u8f09\u305b\u3066\u3044\u304f\u30b9\u30bf\u30a4\u30eb\u306b\u623b\u3057\u3066\u3044\u307e\u3059\u3002\n\u8abf\u3079\u306a\u3044\u3068\u5206\u304b\u3089\u306a\u304b\u3063\u305f/\u601d\u3044\u51fa\u305b\u306a\u304b\u3063\u305f\u7528\u8a9e\u306f\u4e0b\u8a18\u306e\uff13\u3064\u3067\u3059\u3002\n\nk-means\u30af\u30e9\u30b9\u30bf\u30ea\u30f3\u30b0\nWard\u6cd5\u306b\u3088\u308b\u30af\u30e9\u30b9\u30bf\u30ea\u30f3\u30b0\nt-SNE\u306b\u3088\u308b\u53ef\u8996\u5316\n\n\u4e00\u5fdc\u3001\u7c21\u5358\u306b\u307e\u3068\u3081\u3066\u304a\u304d\u307e\u3059\u3002\n\nk-means\u30af\u30e9\u30b9\u30bf\u30ea\u30f3\u30b0 / Ward\u6cd5\u306b\u3088\u308b\u30af\u30e9\u30b9\u30bf\u30ea\u30f3\u30b0\n\u30af\u30e9\u30b9\u30bf\u30ea\u30f3\u30b0\u3068\u306f\u3001\u4eba\u9593\u304c\u3042\u308c\u3053\u308c\u6559\u3048\u308b\u3053\u3068\u306a\u3057\u306b\u3001\u6a5f\u68b0\u306b\u52dd\u624b\u306b\u30c7\u30fc\u30bf\u3092\u5206\u985e\u3055\u305b\u308b\u624b\u6cd5\u3002\n\u975e\u968e\u5c64\u578b\u306e\u30af\u30e9\u30b9\u30bf\u30ea\u30f3\u30b0\u3068\u968e\u5c64\u578b\u306e\u30af\u30e9\u30b9\u30bf\u30ea\u30f3\u30b0\u304c\u3042\u3063\u3066\u3001\u305d\u308c\u305e\u308c\u306e\u4ee3\u8868\u683c\u304ck-means(\u975e\u968e\u5c64\u578b)\u3068Ward\u6cd5(\u968e\u5c64\u578b)\u3002\u3053\u306e\u8fba\u306e\u8a18\u4e8b\uff08\u6700\u3082\u91cd\u8981\u3067\u3001\u6700\u3082\u3088\u304f\u4f7f\u308f\u308c\u3001\u6700\u3082\u96e3\u3057\u3044\u5206\u6790\u624b\u6cd5\u306e\u4e00\u3064\u300c\u30af\u30e9\u30b9\u30bf\u30fc\u5206\u6790\u300d\uff09\u306b\u77ed\u304f\u8981\u70b9\u304c\u307e\u3068\u307e\u3063\u3066\u3044\u308b\u3068\u601d\u3044\u307e\u3059\u3002\n\nt-SNE\n9\u7ae0\u306b\u51fa\u3066\u304d\u305f\u4e3b\u6210\u5206\u5206\u6790\u3084\u7279\u7570\u5024\u5206\u89e3\u3068\u540c\u3058\u3088\u3046\u306a\u6b21\u5143\u5727\u7e2e\u306e\u624b\u6cd5\u306e\u4e00\u3064\u3067\u306f\u3042\u308b\u304c\u3001\u4eba\u9593\u304c\u89e3\u91c8\u3057\u3084\u3059\u3044\u69d8\u306b\u6b21\u5143\u5727\u7e2e\u3057\u3066\u304f\u308c\u308b\u306e\u3067\u30012\u301c3\u6b21\u5143\u7a0b\u5ea6\u306b\u5727\u7e2e\u3057\u3066\u53ef\u8996\u5316\u3059\u308b\u3068\u3044\u3046\u7528\u9014\u306b\u5411\u3044\u3066\u3044\u308b\u3002\n\u300ct-SNE \u3092\u7528\u3044\u305f\u6b21\u5143\u5727\u7e2e\u65b9\u6cd5\u306e\u3054\u7d39\u4ecb\u300d\u304c\u5206\u304b\u308a\u3084\u3059\u304b\u3063\u305f\u3067\u3059\u3002\n\u3067\u306f\u3001\u4ee5\u964d\u3067\u6de1\u3005\u306890\u301c99\u3092\u89e3\u3044\u3066\u884c\u304d\u307e\u3059\u3002\u6700\u5f8c\u306b\u7dcf\u62ec\u7684\u306a\u3053\u3068\u3092\u66f8\u3044\u3066\u3044\u307e\u3059\u3002\n\n90. word2vec\u306b\u3088\u308b\u5b66\u7fd2\n\n81\u3067\u4f5c\u6210\u3057\u305f\u30b3\u30fc\u30d1\u30b9\u306b\u5bfe\u3057\u3066word2vec\u3092\u9069\u7528\u3057\uff0c\u5358\u8a9e\u30d9\u30af\u30c8\u30eb\u3092\u5b66\u7fd2\u305b\u3088\uff0e\n\u3055\u3089\u306b\uff0c\u5b66\u7fd2\u3057\u305f\u5358\u8a9e\u30d9\u30af\u30c8\u30eb\u306e\u5f62\u5f0f\u3092\u5909\u63db\u3057\uff0c86-89\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u52d5\u304b\u305b\uff0e\n\nspark.mllib\u306eword2vec\u3092\u4f7f\u3044\u307e\u3059\u3002\n\nMain.scala\npackage nlp100_10\n\nimport java.io.{File, PrintWriter}\nimport scala.io.Source\nimport org.apache.spark.rdd.RDD\nimport org.apache.spark.mllib.linalg.{Vector, Vectors}\nimport org.apache.spark.mllib.clustering.{KMeans, KMeansModel}\nimport nlp100_10.Model._\n\nobject Main {\n\n  def main(args: Array[String]) {\n    println(\"86. \u5358\u8a9e\u30d9\u30af\u30c8\u30eb\u306e\u8868\u793a\")\n    println(model.transform(\"United_States\").toArray.mkString(\" \"))\n\n    println(\"87. \u5358\u8a9e\u306e\u985e\u4f3c\u5ea6\")\n    println(multiplyVec(model.transform(\"United_States\"), model.transform(\"U.S\")))\n\n    println(\"88. \u985e\u4f3c\u5ea6\u306e\u9ad8\u3044\u5358\u8a9e10\u4ef6\")\n    wordSynonyms(\"England\", 10).foreach(println)\n\n    println(\"89. \u52a0\u6cd5\u69cb\u6210\u6027\u306b\u3088\u308b\u30a2\u30ca\u30ed\u30b8\u30fc\")\n    println(vectorSynonyms(analogyWord(\"Spain\", \"Madrid\", \"Athens\")).head._1)\n}\n\n\n\nModel.scala\npackage nlp100_10\n\nimport java.io.{File, PrintWriter}\nimport scala.io.Source\nimport org.apache.spark.{SparkConf, SparkContext}\nimport org.apache.spark.rdd.RDD\nimport org.apache.spark.mllib.feature.{Normalizer, Word2Vec, Word2VecModel}\nimport org.apache.spark.mllib.linalg.{Vector, Vectors}\nimport org.apache.spark.mllib.clustering.{KMeans, KMeansModel}\nimport nlp100_9.WikiRDD._\n\nobject Model {\n  val RAW_FILE = \"/Users/inaba/Dropbox/NLP100-Spark/src/main/resources/enwiki-20150112-400-r10-105752.txt\"\n  val COMBINED_WORDS = \"/Users/inaba/Dropbox/NLP100-Spark/src/main/resources/combined_words.txt\"\n  val CORPUS = \"/Users/inaba/Dropbox/NLP100-Spark/src/main/resources/corpus\"\n  val MODEL_PATH = \"/Users/inaba/Dropbox/NLP100-Spark/src/main/resources/model\"\n  val WORD_SIMILARITY_SET1 = \"/Users/inaba/Dropbox/NLP100-Spark/src/main/resources/set1.tab\"\n  val WORD_SIMILARITY_SET2 = \"/Users/inaba/Dropbox/NLP100-Spark/src/main/resources/set2.tab\"\n  val WORD_SIMILARITY_COMBINED = \"/Users/inaba/Dropbox/NLP100-Spark/src/main/resources/combined.tab\"\n  val COUNTRY_CLUSTERS = \"/Users/inaba/Dropbox/NLP100-Spark/src/main/resources/clusters\"\n  val COUNTRY_VECTORS = \"/Users/inaba/Dropbox/NLP100-Spark/src/main/resources/country_vectors.txt\"\n\n  val sc = new SparkContext(new SparkConf().setAppName(\"NLP100\").setMaster(\"local[*]\"))\n\n  val model: Word2VecModel = {\n    if (!new File(CORPUS).exists) {\n      // \u30b3\u30fc\u30d1\u30b9\u304c\u306a\u3051\u308c\u3070\u4f5c\u6210\u3059\u308b\n      sc.textFile(RAW_FILE).cleansData.replaceCombinedWord(COMBINED_WORDS).saveAsTextFile(CORPUS)\n    }\n\n    val model: Word2VecModel = if (new File(MODEL_PATH).exists) {\n      Word2VecModel.load(sc, MODEL_PATH)\n    } else {\n      val input = sc.textFile(CORPUS).map(_.split(\" \").toVector)\n\n      // \u30e2\u30c7\u30eb\u306e\u751f\u6210\u3068\u5b66\u7fd2\n      val m = new Word2Vec()\n        .setVectorSize(300)\n        .setNumPartitions(20)\n        .setMinCount(1000)\n        .fit(input)\n\n      m.save(sc, MODEL_PATH)\n      m\n    }\n\n    // \u6b63\u898f\u5316\n    val normalizer = new Normalizer\n    new Word2VecModel(\n      model.getVectors.map { case (key, array) =>\n        key -> normalizer.transform(toVector(array)).toArray.map(_.toFloat)\n      })\n  }\n\n  /* \u5404\u7a2e\u8a08\u7b97\u30e1\u30bd\u30c3\u30c9 */\n\n  def plusVec(vec1: Vector, vec2: Vector): Vector = Vectors.dense(vec1.toArray.zip(vec2.toArray).map { case (v1, v2) => v1 + v2 })\n\n  def minusVec(vec1: Vector, vec2: Vector): Vector = Vectors.dense(vec1.toArray.zip(vec2.toArray).map { case (v1, v2) => v1 - v2 })\n\n  def multiplyVec(vec1: Vector, vec2: Vector): Double = vec1.toArray.zip(vec2.toArray).map { case (v1, v2) => v1 * v2 }.sum\n\n  def analogyVec(vec1: Vector, vec2: Vector, vec3: Vector) = plusVec(minusVec(vec1, vec2), vec3)\n\n  def analogyWord(word1: String, word2: String, word3: String) = plusVec(minusVec(model.transform(word1), model.transform(word2)), model.transform(word3))\n\n  def toVector(a: Array[Float]): Vector = Vectors.dense(a.map(_.toDouble))\n\n  def vectorSynonyms(vector: Vector, num: Int = 10): List[(String, Double)] = {\n    model.getVectors.map { case (k, array) => k -> multiplyVec(vector, toVector(array)) }.toList.sortBy(_._2).reverse.slice(0, num)\n  }\n\n  def wordSynonyms(word: String, num: Int = 10): List[(String, Double)] = {\n    vectorSynonyms(model.transform(word), num)\n  }\n\n\n\n\u51fa\u529b\u7d50\u679c\n86. \u5358\u8a9e\u30d9\u30af\u30c8\u30eb\u306e\u8868\u793a\n-0.05195711553096771 -0.02188839577138424 -0.02766110934317112 ...\n\n87. \u5358\u8a9e\u306e\u985e\u4f3c\u5ea6\n0.7993002007168585\n\n88. \u985e\u4f3c\u5ea6\u306e\u9ad8\u3044\u5358\u8a9e10\u4ef6\n(England,0.999999995906603)\n(Scotland,0.8266511212525927)\n(Wales,0.8146345041068417)\n(London,0.7710435879598873)\n(Australia,0.7684126888668479)\n(Ireland,0.7508965993753893)\n(Hampshire,0.7350064189984341)\n(Lancashire,0.7295800707042573)\n(Yorkshire,0.7289047527357796)\n(Sydney,0.7255715511987988)\n\n89. \u52a0\u6cd5\u69cb\u6210\u6027\u306b\u3088\u308b\u30a2\u30ca\u30ed\u30b8\u30fc\nGreece\n\n\n\u5b8c\u74a7\uff01\n\n91. \u30a2\u30ca\u30ed\u30b8\u30fc\u30c7\u30fc\u30bf\u306e\u6e96\u5099\n\n\u5358\u8a9e\u30a2\u30ca\u30ed\u30b8\u30fc\u306e\u8a55\u4fa1\u30c7\u30fc\u30bf\u3092\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u305b\u3088\uff0e\u3053\u306e\u30c7\u30fc\u30bf\u4e2d\u3067\": \"\u3067\u59cb\u307e\u308b\u884c\u306f\u30bb\u30af\u30b7\u30e7\u30f3\u540d\u3092\u8868\u3059\uff0e\n\u4f8b\u3048\u3070\uff0c\": capital-common-countries\"\u3068\u3044\u3046\u884c\u306f\uff0c\"capital-common-countries\"\u3068\u3044\u3046\u30bb\u30af\u30b7\u30e7\u30f3\u306e\u958b\u59cb\u3092\u8868\u3057\u3066\u3044\u308b\uff0e\n\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3057\u305f\u8a55\u4fa1\u30c7\u30fc\u30bf\u306e\u4e2d\u3067\uff0c\"family\"\u3068\u3044\u3046\u30bb\u30af\u30b7\u30e7\u30f3\u306b\u542b\u307e\u308c\u308b\u8a55\u4fa1\u4e8b\u4f8b\u3092\u629c\u304d\u51fa\u3057\u3066\u30d5\u30a1\u30a4\u30eb\u306b\u4fdd\u5b58\u305b\u3088\uff0e\n\n\u554f\u984c\u6587\u306e\u5358\u8a9e\u30a2\u30ca\u30ed\u30b8\u30fc\u306e\u8a55\u4fa1\u30c7\u30fc\u30bf\u306f\u30ea\u30f3\u30af\u304c\u5207\u308c\u3066\u3044\u308b\u3088\u3046\u306a\u306e\u3067\u3001\u3053\u3053\u304b\u3089\u843d\u3068\u3057\u3066\u304d\u307e\u3057\u305f\u3002\n\nModel.scala\n  def analogies: List[List[String]] = {\n    val URL = \"https://raw.githubusercontent.com/arfon/word2vec/master/questions-words.txt\"\n    val ANALOGY_DATA = \"/Users/inaba/Dropbox/NLP100-Spark/src/main/resources/analogy.txt\"\n\n    if (new File(ANALOGY_DATA).exists) {\n      Source.fromFile(ANALOGY_DATA).getLines().toList.map(_.split(\" \").toList)\n    } else {\n      // family\u30bb\u30af\u30b7\u30e7\u30f3\u306e\u307f\u5207\u308a\u51fa\u3057\n      var families = Source.fromURL(URL).getLines.toList\n      families = families.slice(families.indexOf(\": family\") + 1, families.length)\n      families = families.slice(0, families.indexWhere(_.startsWith(\": \")))\n\n      // \u30d5\u30a1\u30a4\u30eb\u51fa\u529b\n      val file = new PrintWriter(ANALOGY_DATA)\n      file.write(families.mkString(\"\\n\"))\n      file.close()\n\n      families.map(_.split(\" \").toList)\n    }\n  }\n\n\n\n92. \u30a2\u30ca\u30ed\u30b8\u30fc\u30c7\u30fc\u30bf\u3078\u306e\u9069\u7528\n\n91\u3067\u4f5c\u6210\u3057\u305f\u8a55\u4fa1\u30c7\u30fc\u30bf\u306e\u5404\u4e8b\u4f8b\u306b\u5bfe\u3057\u3066\uff0cvec(2\u5217\u76ee\u306e\u5358\u8a9e) - vec(1\u5217\u76ee\u306e\u5358\u8a9e) + vec(3\u5217\u76ee\u306e\u5358\u8a9e)\u3092\u8a08\u7b97\u3057\uff0c\u305d\u306e\u30d9\u30af\u30c8\u30eb\u3068\u985e\u4f3c\u5ea6\u304c\u6700\u3082\u9ad8\u3044\u5358\u8a9e\u3068\uff0c\u305d\u306e\u985e\u4f3c\u5ea6\u3092\u6c42\u3081\u3088\uff0e\n\u6c42\u3081\u305f\u5358\u8a9e\u3068\u985e\u4f3c\u5ea6\u306f\uff0c\u5404\u4e8b\u4f8b\u306e\u672b\u5c3e\u306b\u8ffd\u8a18\u305b\u3088\uff0e\n\u3053\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u309285\u3067\u4f5c\u6210\u3057\u305f\u5358\u8a9e\u30d9\u30af\u30c8\u30eb\uff0c90\u3067\u4f5c\u6210\u3057\u305f\u5358\u8a9e\u30d9\u30af\u30c8\u30eb\u306b\u5bfe\u3057\u3066\u9069\u7528\u305b\u3088\uff0e\n\nresult\u306e\u4e2d\u306b\u6b63\u89e3(true)/\u4e0d\u6b63\u89e3(false)\u3092\u5165\u308c\u3066\u3044\u304d\u307e\u3059\u3002\n\nMain.scala\n    var result = List[Boolean]()\n\n    analogies.foreach { words =>\n      try {\n        val actualAnswer = vectorSynonyms(analogyWord(words.head, words(1), words(2)), 1).head._1\n        println(\"%s\\t-\\t%s\\t+\\t%s\\t=\\t%s\\t%s\".format(words.head, words(1), words(2), words(3), actualAnswer))\n        result :+= (words(3) == actualAnswer)\n      } catch {\n        case e: IllegalStateException => Unit\n      }\n    }\n\n\n\n93. \u30a2\u30ca\u30ed\u30b8\u30fc\u30bf\u30b9\u30af\u306e\u6b63\u89e3\u7387\u306e\u8a08\u7b97\n\n92\u3067\u4f5c\u3063\u305f\u30c7\u30fc\u30bf\u3092\u7528\u3044\uff0c\u5404\u30e2\u30c7\u30eb\u306e\u30a2\u30ca\u30ed\u30b8\u30fc\u30bf\u30b9\u30af\u306e\u6b63\u89e3\u7387\u3092\u6c42\u3081\u3088\uff0e\n\n\nMian.scala\n    println(result.count(x => x) / result.length.toDouble)\n\n\n\n\u6b63\u89e3\u7387\n0.020512820512820513\n\n\n\u4e0a\u624b\u304f\u5b66\u7fd2\u3067\u304d\u3066\u306a\u3044\u3067\u3059\u306d\u3002\u3002\u3002\nboy/girl\u3001father/mother\u3001brother/sister\u7b49\u306e\u6027\u5225\u306e\u9055\u3044\u3092\u5b66\u7fd2\u3067\u304d\u3066\u306a\u3044\u305f\u3081\u3001boy - girl + brother = brother\u306b\u306a\u3063\u3061\u3083\u3063\u3066\u308b\u3088\u3046\u3067\u3059\u3002\n\n94. WordSimilarity-353\u3067\u306e\u985e\u4f3c\u5ea6\u8a08\u7b97\n\nThe WordSimilarity-353 Test Collection\u306e\u8a55\u4fa1\u30c7\u30fc\u30bf\u3092\u5165\u529b\u3068\u3057\uff0c1\u5217\u76ee\u30682\u5217\u76ee\u306e\u5358\u8a9e\u306e\u985e\u4f3c\u5ea6\u3092\u8a08\u7b97\u3057\uff0c\u5404\u884c\u306e\u672b\u5c3e\u306b\u985e\u4f3c\u5ea6\u306e\u5024\u3092\u8ffd\u52a0\u3059\u308b\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u4f5c\u6210\u305b\u3088\uff0e\n\u3053\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u309285\u3067\u4f5c\u6210\u3057\u305f\u5358\u8a9e\u30d9\u30af\u30c8\u30eb\uff0c90\u3067\u4f5c\u6210\u3057\u305f\u5358\u8a9e\u30d9\u30af\u30c8\u30eb\u306b\u5bfe\u3057\u3066\u9069\u7528\u305b\u3088\uff0e\n\n\nMain.scala\nval (human: List[Double], machine: List[Double]) = wordSimilarity(WORD_SIMILARITY_COMBINED).unzip\n\n\n\nModel.scala\n  def wordSimilarity(fileName: String): List[(Double, Double)] = {\n    Source.fromFile(fileName).getLines.map { line =>\n      try {\n        val words = line.toString.split(\"\\t\")\n        List(words(2).toDouble, multiplyVec(model.transform(words(0)), model.transform(words(1))))\n      } catch {\n        case e: IllegalStateException => Nil\n        case e: NumberFormatException => Nil\n      }\n    }.filter(_.nonEmpty).toList.map(x => (x.head, x.last))\n  }\n\n\n\n95. WordSimilarity-353\u3067\u306e\u8a55\u4fa1\n\n94\u3067\u4f5c\u3063\u305f\u30c7\u30fc\u30bf\u3092\u7528\u3044\uff0c\u5404\u30e2\u30c7\u30eb\u304c\u51fa\u529b\u3059\u308b\u985e\u4f3c\u5ea6\u306e\u30e9\u30f3\u30ad\u30f3\u30b0\u3068\uff0c\u4eba\u9593\u306e\u985e\u4f3c\u5ea6\u5224\u5b9a\u306e\u30e9\u30f3\u30ad\u30f3\u30b0\u306e\u9593\u306e\u30b9\u30d4\u30a2\u30de\u30f3\u76f8\u95a2\u4fc2\u6570\u3092\u8a08\u7b97\u305b\u3088\uff0e\n\n\nMain.scala\n    val diff = rank(human).zip(rank(machine)) // \uff12\u3064\u306e\u985e\u4f3c\u5ea6\u306e\u30ea\u30b9\u30c8\u3092\u9806\u4f4d\u306e\u30ea\u30b9\u30c8\u306b\u5909\u63db\u306b\u5909\u63db\u3057\u3066\u30da\u30a2\u306b\u3059\u308b\n      .map(x => math.pow(x._1 - x._2, 2)) // \u5bfe\u3068\u306a\u308b\u9806\u4f4d\u306e\u5dee\u3092\u305d\u308c\u305e\u308c\u6c42\u3081\u3066\uff12\u4e57\u3059\u308b\n\n    println(spearman(diff))\n\n\n\nModel.scala\n  // \u985e\u4f3c\u5ea6\u306e\u30ea\u30b9\u30c8\u3092\u9806\u4f4d\u306e\u30ea\u30b9\u30c8\u306b\u5909\u63db\u306b\u5909\u63db\n  def rank(words: List[Double]): List[Int] = {\n    val ranking = words.sorted.zipWithIndex.map(x => (x._1, x._2 + 1)).toMap\n    words.map(ranking)\n  }\n\n  //\u30b9\u30d4\u30a2\u30de\u30f3\u306e\u9806\u4f4d\u76f8\u95a2\u4fc2\u6570\u3002\u540c\u3058\u9806\u4f4d\u306e\u5834\u5408\u306f\u6607\u9806\u306b\u3057\u3066\u3044\u308b\u305f\u3081\u82e5\u5e72\u672c\u6765\u3068\u9055\u3046\u3002a:4.5,b:4.5 => a:4,b:5\u3000\u306b\u3057\u3066\u308b\u3002\n  def spearman(diff: List[Double]) = 1 - (6 * diff.sum) / (math.pow(diff.length, 3) - diff.length)\n\n\n\n\u7d50\u679c\ncombined:  0.39186961031541434 (\u4f4e\u3044\u76f8\u95a2\u3042\u308a)\nset1: 0.2655867166143566 (\u4f4e\u3044\u76f8\u95a2\u3042\u308a)\nset2: 0.4190924041068492 (\u76f8\u95a2\u3042\u308a)\n\n\n\n96. \u56fd\u540d\u306b\u95a2\u3059\u308b\u30d9\u30af\u30c8\u30eb\u306e\u62bd\u51fa\n\nword2vec\u306e\u5b66\u7fd2\u7d50\u679c\u304b\u3089\uff0c\u56fd\u540d\u306b\u95a2\u3059\u308b\u30d9\u30af\u30c8\u30eb\u306e\u307f\u3092\u629c\u304d\u51fa\u305b\uff0e\n\n\nMain.scala\n    // \u8907\u5408\u8a9e\u306e\u51e6\u7406 (\u4f8b\u3048\u3070\u3001\"United States\" => \"United_States\")\n    val countryNames = Source.fromFile(COMBINED_WORDS).getLines.map(line => line.replace(\" \", \"_\")).toList\n\n    val countryVectors: Map[String, Vector] = model.getVectors\n      .filter(x => countryNames.indexOf(x._1) >= 0) // \u56fd\u540d\u3060\u3051\u3092\u62bd\u51fa\n      .map { case (key, array) => key -> Vectors.dense(array.map(y => y.toDouble)) } // String->Array[Float]\u3092String->Vector\u306b\u5909\u63db\n\n\n\n97. k-means\u30af\u30e9\u30b9\u30bf\u30ea\u30f3\u30b0\n\n96\u306e\u5358\u8a9e\u30d9\u30af\u30c8\u30eb\u306b\u5bfe\u3057\u3066\uff0ck-means\u30af\u30e9\u30b9\u30bf\u30ea\u30f3\u30b0\u3092\u30af\u30e9\u30b9\u30bf\u6570k=5\u3068\u3057\u3066\u5b9f\u884c\u305b\u3088\uff0e\n\n\nMain.scala\n    val countryRdd: RDD[Vector] = sc.parallelize(countryVectors.values.toList) // Map\u3092RDD\u306b\u5909\u63db\n\n    val clusters = if (new File(COUNTRY_CLUSTERS).exists) {\n      // k-means\u30af\u30e9\u30b9\u30bf\u30ea\u30f3\u30b0\u30e2\u30c7\u30eb\u304c\u30d5\u30a1\u30a4\u30eb\u306b\u4fdd\u5b58\u3055\u308c\u3066\u3044\u308b\u5834\u5408\n      KMeansModel.load(sc, COUNTRY_CLUSTERS)\n    } else {\n      // k-means\u30af\u30e9\u30b9\u30bf\u30ea\u30f3\u30b0\u30e2\u30c7\u30eb\u304c\u30d5\u30a1\u30a4\u30eb\u306b\u4fdd\u5b58\u3055\u308c\u3066\u3044\u306a\u3044\u5834\u5408\n      val clusters: KMeansModel = KMeans.train(countryRdd, 5, 100)\n      clusters.save(sc, COUNTRY_CLUSTERS)\n      clusters\n    }\n\n    // \u30af\u30e9\u30b9\u30bf\u306e\u4e2d\u5fc3\u70b9\u304c5\u3064\u3067\u304d\u3066\u3044\u308b\u3053\u3068\u3092\u78ba\u8a8d\n    clusters.clusterCenters.foreach(println)\n\n    // \u5404\u30c7\u30fc\u30bf\u304c\u3069\u306e\u30af\u30e9\u30b9\u30bf\u306b\u5c5e\u3057\u3066\u3044\u308b\u304b\u3092\u78ba\u8a8d\n    countryVectors.keys.zip(clusters.predict(countryRdd).collect)\n      .toList.sortBy(_._2).foreach(println)\n\n\n\n\u51fa\u529b\u30a4\u30e1\u30fc\u30b8\n[0.04466799285174126,0.04456286245424832,-0.01976845185050652, ...\n[0.03334749694396224,0.015676170529332012,-0.03916260437108576, ...\n[-0.014139431890928082,-0.0038628893671557307,-0.04137489525601268, ...\n[0.03492516125058473,0.024117531810506163,-0.029571880074923465, ...\n[0.043189115822315216,0.02963972231373191,-0.03933139890432358, ...\n\n(Morocco,0)\n(Macedonia,0)\n\u4e2d\u7565\n(Sudan,0)\n(Chile,1)\n(Indonesia,1)\n\u4e2d\u7565\n(Czech_Republic,1)\n(Jordan,2)\n(Jersey,2)\n\u4e2d\u7565\n(Bermuda,2)\n(Lebanon,3)\n(France,3)\n\u4e2d\u7565\n(Denmark,3)\n(India,4)\n(Pakistan,4)\n\u4e2d\u7565\n(China,4)\n\n\n\n98.Ward\u6cd5\u306b\u3088\u308b\u30af\u30e9\u30b9\u30bf\u30ea\u30f3\u30b0\u300199.t-SNE\u306b\u3088\u308b\u53ef\u8996\u5316\n\n98.Ward\u6cd5\u306b\u3088\u308b\u30af\u30e9\u30b9\u30bf\u30ea\u30f3\u30b0\n  96\u306e\u5358\u8a9e\u30d9\u30af\u30c8\u30eb\u306b\u5bfe\u3057\u3066\uff0cWard\u6cd5\u306b\u3088\u308b\u968e\u5c64\u578b\u30af\u30e9\u30b9\u30bf\u30ea\u30f3\u30b0\u3092\u5b9f\u884c\u305b\u3088\uff0e\n  \u3055\u3089\u306b\uff0c\u30af\u30e9\u30b9\u30bf\u30ea\u30f3\u30b0\u7d50\u679c\u3092\u30c7\u30f3\u30c9\u30ed\u30b0\u30e9\u30e0\u3068\u3057\u3066\u53ef\u8996\u5316\u305b\u3088\uff0e\n99.t-SNE\u306b\u3088\u308b\u53ef\u8996\u5316\n  96\u306e\u5358\u8a9e\u30d9\u30af\u30c8\u30eb\u306b\u5bfe\u3057\u3066\uff0c\u30d9\u30af\u30c8\u30eb\u7a7a\u9593\u3092t-SNE\u3067\u53ef\u8996\u5316\u305b\u3088\uff0e\n\n\u306a\u3093\u3068Spark\u306espark.mllib\u304cWard\u6cd5\u3092\u30b5\u30dd\u30fc\u30c8\u3057\u3066\u306a\u3044\u3063\u307d\u3044(Clustering - spark.mllib)\u3002\n\u3042\u3068\u4e8c\u554f\u306a\u306e\u306b\u307e\u305f\u5225\u306e\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u63a2\u3059\u306e\u9762\u5012\u304f\u3055\u3044\u306a\u3041\u3002\nJVM\u3067\u52d5\u304f\u3082\u306e\u3068\u3057\u3066\u306f\u3001Weka\u3068\u3044\u3046\u306e\u304c\u3042\u308b\u3089\u3057\u3044\u304c\"the last decade\"\u611f\u304c\u534a\u7aef\u306a\u3044\u304b\u3089\u30d1\u30b9\u3002\n\u3068\u3044\u3046\u3053\u3068\u3067\u3001\u3044\u3064\u3082\u304a\u4e16\u8a71\u306b\u306a\u3063\u3066\u3044\u308b\u5317\u91ce\u5742\u5099\u5fd8\u9332\u306b\u5023\u3063\u3066scipy\u3067\u3084\u308a\u307e\u3059\u3002\n\nMain.py\nfrom scipy.cluster.hierarchy import ward, dendrogram\nfrom sklearn.manifold import TSNE\nfrom matplotlib import pyplot as plt\n\n# \u5358\u8a9e\u30d9\u30af\u30c8\u30eb\u3092\u30d5\u30a1\u30a4\u30eb\u304b\u3089\u5fa9\u5143 (\u30b9\u30da\u30fc\u30b9\u533a\u5207\u308a\u30671\u5217\u76ee\u304c\u56fd\u540d\u30012\u5217\u76ee\u304b\u3089301\u5217\u76ee\u307e\u3067\u304c\u56fd\u540d\u306e\u7279\u5fb4\u3092\u8868\u3059\u30d9\u30af\u30c8\u30eb)\nCOUNTRY_VECTORS = '/Users/inaba/Dropbox/NLP100-Spark/src/main/resources/country_vectors.txt'\n\nwith open(COUNTRY_VECTORS) as input_handler:\n    lines = [line.split() for line in input_handler]\n\ncountry_names = [line[0] for line in lines]\ncountry_vectors = [line[1:] for line in lines]\n\n# Ward\u6cd5\u3067\u30af\u30e9\u30b9\u30bf\u30ea\u30f3\u30b0\nward_result = ward(country_vectors)\n\n# \u30c7\u30f3\u30c9\u30ed\u30b0\u30e9\u30e0\u3067\u8868\u793a\ndendrogram(ward_result, labels=country_names)\nplt.show()\n\n# t-SNE\nt_sne_result = TSNE().fit_transform(country_vectors)\n\n# \u8868\u793a\nfig, ax = plt.subplots()\nax.scatter(t_sne_result[:, 0], t_sne_result[:, 1])\nfor index, label in enumerate(country_names):\n    ax.annotate(label, xy=(t_sne_result[index, 0], t_sne_result[index, 1]))\nplt.show()\n\n\n\u30ab\u30f3\u30bf\u30f3\u3002\u3067\u3082\u3001\u6b86\u3069\u56fd\u540d\u306f\u8aad\u3081\u306a\u3044\u3002\u3002\u3002\u304b\u308d\u3046\u3058\u3066\u8aad\u3081\u308b\u3068\u3053\u308d\u3082\u3001\u3042\u307e\u308a\u7d0d\u5f97\u611f\u306f\u306a\u3044\u3002\n\u3053\u3053\u3067\u306f\u3001scipy.cluster.hierarchy\u3084sklearn.manifold\u3092\u4f7f\u3048\u3070ward\u6cd5\u3067\u306e\u30af\u30e9\u30b9\u30bf\u30ea\u30f3\u30b0\u3001dendrogram\u3067\u306e\u53ef\u8996\u5316\u3001t-SNE\u306b\u3088\u308b\u53ef\u8996\u5316\u304c\u7c21\u5358\u306b\u3067\u304d\u308b\u3053\u3068\u3092\u78ba\u8a8d\u3059\u308b\u3060\u3051\u3067\u826f\u3057\u3068\u3057\u3088\u3046\u3002\n\n\n\n\u8a00\u8a9e\u51e6\u7406100\u672c\u30ce\u30c3\u30af\u5168\u4f53\u3092\u901a\u3057\u3066\u306e\u7dcf\u62ec\uff08\u611f\u60f3\uff09\n\u6700\u5f8c\u306b\u3001\u5168\u4f53\u3092\u901a\u3057\u3066\u5b66\u3093\u3060\u3053\u3068\u3092\u7c21\u5358\u306b\u307e\u3068\u3081\u3066\u304a\u304d\u307e\u3059\u3002\n\u3042\u304f\u307e\u3067\u521d\u5fc3\u8005\u304c\u5c11\u3057\u8a00\u8a9e\u51e6\u7406\u3092\u304b\u3058\u3063\u3066\u307f\u305f\u9650\u308a\u3067\u306e\u611f\u60f3\u306a\u306e\u3067\u3001\u6b63\u3057\u3044\u3053\u3068\u3092\u8aac\u660e\u3057\u3066\u3044\u308b\u3068\u306f\u601d\u308f\u306a\u3044\u3067\u4e0b\u3055\u3044\u3002\n(\u30b3\u30e1\u30f3\u30c8\u6b04\u3067\u306e\u30c4\u30c3\u30b3\u30df\u5927\u6b53\u8fce\u3067\u3059\u3002)\n\n\u4e00\u898b\u96e3\u89e3\u306a\u6a5f\u68b0\u5b66\u7fd2\u7528\u8a9e\u3084\u7d71\u8a08\u7528\u8a9e\u3067\u3042\u3063\u3066\u3082\u3001\u76ee\u7684\u3068\u30a4\u30f3\u30d7\u30c3\u30c8\u30fb\u30a2\u30a6\u30c8\u30d7\u30c3\u30c8\u306b\u7740\u76ee\u3057\u3066\u30d6\u30e9\u30c3\u30af\u30dc\u30c3\u30af\u30b9\u7684\u30c4\u30fc\u30eb\u3068\u3057\u3066\u6271\u3048\u3070\u6016\u304f\u306a\u3044\u3002\n\u30d3\u30c3\u30b0\u30c7\u30fc\u30bf\u306eETL\u51e6\u7406\u306bSpark\u306f\u4e0d\u53ef\u6b20\u3060\u304c\u3001\u6a5f\u68b0\u5b66\u7fd2\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u306fPython\u7cfb\u30e9\u30a4\u30d6\u30e9\u30ea\u306e\u307b\u3046\u304c\u5145\u5b9f\u3057\u3066\u3044\u308b\u3002\n\u6a5f\u68b0\u5b66\u7fd2\u30fb\u81ea\u7136\u8a00\u8a9e\u51e6\u7406\u7cfb\u306e\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u4f7f\u3046\u306e\u306f\u96e3\u3057\u304f\u306a\u3044\u3002\n\u3060\u3051\u3069\u300c\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u4f7f\u3063\u3066\u307f\u308b\u300d\u306e\u3068\u300c\u7cbe\u5ea6\u306e\u9ad8\u3044\u5b66\u7fd2\u30fb\u5206\u6790\u3092\u3059\u308b\u300d\u3053\u3068\u306e\u8ddd\u96e2\u306f\u679c\u3066\u3057\u306a\u304f\u9060\u3044\u3002\u3002\u3002\uff08\u8ddd\u96e2\u3092\u57cb\u3081\u308b\u305f\u3081\u306b\u5fc5\u8981\u306a\u3053\u3068\u306f\u4f55\u306a\u3093\u3060\u308d\u3046\uff1f\uff09\n\u6a5f\u68b0\u5b66\u7fd2\u306e\u7d50\u679c\u51fa\u3066\u304d\u305f\u5206\u6790\u7d50\u679c\u304c\u3001\u6b63\u3057\u3044\u306e\u304b\u6b63\u3057\u304f\u306a\u3044\u306e\u304b\u30c6\u30b9\u30c8\u3059\u308b\u306e\u306f\u96e3\u3057\u3044\u3002\u666e\u901a\uff08\uff1f\uff09\u306e\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u306e\u69d8\u306b\u3001Expected result\u3068Actual result\u304c\u5b8c\u5168\u4e00\u81f4\u3059\u308b\u3053\u3068\u3092\u78ba\u8a8d\u3059\u308b\u3053\u3068\u306f\u3067\u304d\u306a\u3044\u304b\u3089\u3002\u7d50\u5c40\u3001\u5b66\u7fd2\u7d50\u679c\u306e\u59a5\u5f53\u6027\u306f\u3001\u5f79\u306b\u7acb\u3064\u304b\u3069\u3046\u304b\u3067\u5224\u65ad\u3059\u308b\u3057\u304b\u306a\u304f\u3001\u5f79\u306b\u7acb\u3064\u304b\u3069\u3046\u304b\u3092\u5224\u65ad\u3059\u308b\u306b\u306f\u3001\u5206\u6790\u306e\u76ee\u7684\u304c\u660e\u78ba\u3067\u306a\u304f\u3066\u306f\u306a\u3089\u306a\u3044\u3002\u3053\u306e\u7ae0\u306f\u7df4\u7fd2\u3060\u304b\u3089\u826f\u3044\u306e\u3060\u304c\u3001\u76ee\u7684\u306a\u3057\u306b\u6f2b\u7136\u3068\u30af\u30e9\u30b9\u30bf\u30ea\u30f3\u30b0\u3057\u305f\u3060\u3051\u3060\u3068\u3001\"So what?\"\u306a\u7d50\u679c\u306b\u306a\u308b\u3002\n\n# \u306f\u3058\u3081\u306b\n\n[\u8a00\u8a9e\u51e6\u7406100\u672c\u30ce\u30c3\u30af](http://www.cl.ecei.tohoku.ac.jp/nlp100/)\u306f\u3001\u6771\u5317\u5927\u5b66\u306e\u4e7e\u30fb\u5ca1\u5d0e\u7814\u7a76\u5ba4\u3067\u516c\u958b\u3055\u308c\u3066\u3044\u308b\u3001\u5b9f\u8df5\u7684\u306a\u8ab2\u984c\u306b\u53d6\u308a\u7d44\u307f\u306a\u304c\u3089\uff0c\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\uff0c\u30c7\u30fc\u30bf\u5206\u6790\uff0c\u7814\u7a76\u306e\u30b9\u30ad\u30eb\u3092\u697d\u3057\u304f\u7fd2\u5f97\u3059\u308b\u3053\u3068\u3092\u76ee\u6307\u3057\u305f\u554f\u984c\u96c6\u3067\u3059\u3002\n\n\u3053\u308c\u307e\u3067\u306b\u3001\u300c[\u7b2c4\u7ae0 \u5f62\u614b\u7d20\u89e3\u6790](http://qiita.com/Masaaki_Inaba/items/eb33cf9a3bb79102ff5c)\u300d\u3001\u300c[\u7b2c5\u7ae0 \u4fc2\u308a\u53d7\u3051\u89e3\u6790](http://qiita.com/Masaaki_Inaba/items/18613a549edc68cb20ca)\u300d\u3001\u300c[\u7b2c8\u7ae0 \u6a5f\u68b0\u5b66\u7fd2](http://qiita.com/Masaaki_Inaba/items/ddb687daf9e67461a3f7)\u300d\u3001\u300c[\u7b2c9\u7ae0 \u30d9\u30af\u30c8\u30eb\u7a7a\u9593\u6cd5 (I)](http://qiita.com/Masaaki_Inaba/items/74bf3a91347bd424556a)\u300d\u3092\u89e3\u3044\u3066\u304d\u307e\u3057\u305f\u3002\u5f15\u304d\u7d9a\u304d\u300c\u7b2c10\u7ae0 \u30d9\u30af\u30c8\u30eb\u7a7a\u9593\u6cd5 (II)\u300d\u3092\u9032\u3081\u3066\u3044\u304d\u307e\u3059\u3002\n\n9\u7ae0\u3067\u306f\u3001\u306a\u3093\u3061\u3083\u3063\u3066word2vec\u3092\u5b9f\u88c5\u3057\u307e\u3057\u305f\u304c\u300110\u7ae0\u3067\u306f\u4e00\u822c\u306b\u516c\u958b\u3055\u308c\u3066\u3044\u308bword2vec\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u4f7f\u3063\u3066\u8272\u3005\u3084\u3063\u3066\u3044\u304d\u307e\u3059\u3002\u3053\u308c\u304c\u6700\u7d42\u7ae0\u3067\u3059\u3002\n\n8\u7ae0\u30019\u7ae0\u306f\u3001NLP\u521d\u5fc3\u8005\u306e\u79c1\u306b\u306f\u3001\u554f\u984c\u6587\u306e\u7406\u89e3\u3059\u3089\u304a\u307c\u3064\u304b\u306a\u3044\u72b6\u614b\u3060\u3063\u305f\u305f\u3081\u3001\u30bf\u30a4\u30c8\u30eb\u3092\u300c\u554f\u984c\u6587\u306e\u610f\u5473\u304c\u308f\u304b\u3089\u306a\u3044\u4eba\u306e\u305f\u3081\u306e\u301c\u300d\u3068\u984c\u3057\u3066\u3001\u554f\u984c\u6587\u306e\u89e3\u91c8\u3068\u4f75\u305b\u3066\u8aac\u660e\u3057\u3066\u304d\u307e\u3057\u305f\u3002\n\u3053\u306e\u7ae0\u306f\u305d\u3053\u307e\u3067\u96e3\u3057\u304f\u306a\u3044\u3068\u601d\u3044\u307e\u3059\u306e\u3067\u3001\u30bf\u30a4\u30c8\u30eb\u304b\u3089\u300c\u554f\u984c\u6587\u306e\u610f\u5473\u304c\u308f\u304b\u3089\u306a\u3044\u4eba\u306e\u305f\u3081\u306e\u301c\u300d\u3092\u5916\u3057\u30014\u7ae0\u30015\u7ae0\u306e\u6de1\u3005\u3068\u30b3\u30fc\u30c9\u3092\u8f09\u305b\u3066\u3044\u304f\u30b9\u30bf\u30a4\u30eb\u306b\u623b\u3057\u3066\u3044\u307e\u3059\u3002\n\n\u8abf\u3079\u306a\u3044\u3068\u5206\u304b\u3089\u306a\u304b\u3063\u305f/\u601d\u3044\u51fa\u305b\u306a\u304b\u3063\u305f\u7528\u8a9e\u306f\u4e0b\u8a18\u306e\uff13\u3064\u3067\u3059\u3002\n\n- k-means\u30af\u30e9\u30b9\u30bf\u30ea\u30f3\u30b0\n- Ward\u6cd5\u306b\u3088\u308b\u30af\u30e9\u30b9\u30bf\u30ea\u30f3\u30b0\n- t-SNE\u306b\u3088\u308b\u53ef\u8996\u5316\n\n\u4e00\u5fdc\u3001\u7c21\u5358\u306b\u307e\u3068\u3081\u3066\u304a\u304d\u307e\u3059\u3002\n\n### k-means\u30af\u30e9\u30b9\u30bf\u30ea\u30f3\u30b0 / Ward\u6cd5\u306b\u3088\u308b\u30af\u30e9\u30b9\u30bf\u30ea\u30f3\u30b0\n\u30af\u30e9\u30b9\u30bf\u30ea\u30f3\u30b0\u3068\u306f\u3001\u4eba\u9593\u304c\u3042\u308c\u3053\u308c\u6559\u3048\u308b\u3053\u3068\u306a\u3057\u306b\u3001\u6a5f\u68b0\u306b\u52dd\u624b\u306b\u30c7\u30fc\u30bf\u3092\u5206\u985e\u3055\u305b\u308b\u624b\u6cd5\u3002\n\u975e\u968e\u5c64\u578b\u306e\u30af\u30e9\u30b9\u30bf\u30ea\u30f3\u30b0\u3068\u968e\u5c64\u578b\u306e\u30af\u30e9\u30b9\u30bf\u30ea\u30f3\u30b0\u304c\u3042\u3063\u3066\u3001\u305d\u308c\u305e\u308c\u306e\u4ee3\u8868\u683c\u304ck-means(\u975e\u968e\u5c64\u578b)\u3068Ward\u6cd5(\u968e\u5c64\u578b)\u3002\u3053\u306e\u8fba\u306e\u8a18\u4e8b\uff08[\u6700\u3082\u91cd\u8981\u3067\u3001\u6700\u3082\u3088\u304f\u4f7f\u308f\u308c\u3001\u6700\u3082\u96e3\u3057\u3044\u5206\u6790\u624b\u6cd5\u306e\u4e00\u3064\u300c\u30af\u30e9\u30b9\u30bf\u30fc\u5206\u6790\u300d](http://business.nikkeibp.co.jp/atclbdt/15/258678/071500002/?ST=print)\uff09\u306b\u77ed\u304f\u8981\u70b9\u304c\u307e\u3068\u307e\u3063\u3066\u3044\u308b\u3068\u601d\u3044\u307e\u3059\u3002\n\n### t-SNE\n9\u7ae0\u306b\u51fa\u3066\u304d\u305f\u4e3b\u6210\u5206\u5206\u6790\u3084\u7279\u7570\u5024\u5206\u89e3\u3068\u540c\u3058\u3088\u3046\u306a\u6b21\u5143\u5727\u7e2e\u306e\u624b\u6cd5\u306e\u4e00\u3064\u3067\u306f\u3042\u308b\u304c\u3001\u4eba\u9593\u304c\u89e3\u91c8\u3057\u3084\u3059\u3044\u69d8\u306b\u6b21\u5143\u5727\u7e2e\u3057\u3066\u304f\u308c\u308b\u306e\u3067\u30012\u301c3\u6b21\u5143\u7a0b\u5ea6\u306b\u5727\u7e2e\u3057\u3066\u53ef\u8996\u5316\u3059\u308b\u3068\u3044\u3046\u7528\u9014\u306b\u5411\u3044\u3066\u3044\u308b\u3002\n\u300c[t-SNE \u3092\u7528\u3044\u305f\u6b21\u5143\u5727\u7e2e\u65b9\u6cd5\u306e\u3054\u7d39\u4ecb](http://blog.albert2005.co.jp/2015/12/02/tsne/)\u300d\u304c\u5206\u304b\u308a\u3084\u3059\u304b\u3063\u305f\u3067\u3059\u3002\n\n\u3067\u306f\u3001\u4ee5\u964d\u3067\u6de1\u3005\u306890\u301c99\u3092\u89e3\u3044\u3066\u884c\u304d\u307e\u3059\u3002\u6700\u5f8c\u306b\u7dcf\u62ec\u7684\u306a\u3053\u3068\u3092\u66f8\u3044\u3066\u3044\u307e\u3059\u3002\n\n# 90. word2vec\u306b\u3088\u308b\u5b66\u7fd2\n\n> 81\u3067\u4f5c\u6210\u3057\u305f\u30b3\u30fc\u30d1\u30b9\u306b\u5bfe\u3057\u3066[word2vec](https://code.google.com/p/word2vec/)\u3092\u9069\u7528\u3057\uff0c\u5358\u8a9e\u30d9\u30af\u30c8\u30eb\u3092\u5b66\u7fd2\u305b\u3088\uff0e\n> \u3055\u3089\u306b\uff0c\u5b66\u7fd2\u3057\u305f\u5358\u8a9e\u30d9\u30af\u30c8\u30eb\u306e\u5f62\u5f0f\u3092\u5909\u63db\u3057\uff0c86-89\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u52d5\u304b\u305b\uff0e\n\nspark.mllib\u306eword2vec\u3092\u4f7f\u3044\u307e\u3059\u3002\n\n```scala:Main.scala\npackage nlp100_10\n\nimport java.io.{File, PrintWriter}\nimport scala.io.Source\nimport org.apache.spark.rdd.RDD\nimport org.apache.spark.mllib.linalg.{Vector, Vectors}\nimport org.apache.spark.mllib.clustering.{KMeans, KMeansModel}\nimport nlp100_10.Model._\n\nobject Main {\n\n  def main(args: Array[String]) {\n    println(\"86. \u5358\u8a9e\u30d9\u30af\u30c8\u30eb\u306e\u8868\u793a\")\n    println(model.transform(\"United_States\").toArray.mkString(\" \"))\n\n    println(\"87. \u5358\u8a9e\u306e\u985e\u4f3c\u5ea6\")\n    println(multiplyVec(model.transform(\"United_States\"), model.transform(\"U.S\")))\n\n    println(\"88. \u985e\u4f3c\u5ea6\u306e\u9ad8\u3044\u5358\u8a9e10\u4ef6\")\n    wordSynonyms(\"England\", 10).foreach(println)\n\n    println(\"89. \u52a0\u6cd5\u69cb\u6210\u6027\u306b\u3088\u308b\u30a2\u30ca\u30ed\u30b8\u30fc\")\n    println(vectorSynonyms(analogyWord(\"Spain\", \"Madrid\", \"Athens\")).head._1)\n}\n```\n\n```scala:Model.scala\npackage nlp100_10\n\nimport java.io.{File, PrintWriter}\nimport scala.io.Source\nimport org.apache.spark.{SparkConf, SparkContext}\nimport org.apache.spark.rdd.RDD\nimport org.apache.spark.mllib.feature.{Normalizer, Word2Vec, Word2VecModel}\nimport org.apache.spark.mllib.linalg.{Vector, Vectors}\nimport org.apache.spark.mllib.clustering.{KMeans, KMeansModel}\nimport nlp100_9.WikiRDD._\n\nobject Model {\n  val RAW_FILE = \"/Users/inaba/Dropbox/NLP100-Spark/src/main/resources/enwiki-20150112-400-r10-105752.txt\"\n  val COMBINED_WORDS = \"/Users/inaba/Dropbox/NLP100-Spark/src/main/resources/combined_words.txt\"\n  val CORPUS = \"/Users/inaba/Dropbox/NLP100-Spark/src/main/resources/corpus\"\n  val MODEL_PATH = \"/Users/inaba/Dropbox/NLP100-Spark/src/main/resources/model\"\n  val WORD_SIMILARITY_SET1 = \"/Users/inaba/Dropbox/NLP100-Spark/src/main/resources/set1.tab\"\n  val WORD_SIMILARITY_SET2 = \"/Users/inaba/Dropbox/NLP100-Spark/src/main/resources/set2.tab\"\n  val WORD_SIMILARITY_COMBINED = \"/Users/inaba/Dropbox/NLP100-Spark/src/main/resources/combined.tab\"\n  val COUNTRY_CLUSTERS = \"/Users/inaba/Dropbox/NLP100-Spark/src/main/resources/clusters\"\n  val COUNTRY_VECTORS = \"/Users/inaba/Dropbox/NLP100-Spark/src/main/resources/country_vectors.txt\"\n\n  val sc = new SparkContext(new SparkConf().setAppName(\"NLP100\").setMaster(\"local[*]\"))\n\n  val model: Word2VecModel = {\n    if (!new File(CORPUS).exists) {\n      // \u30b3\u30fc\u30d1\u30b9\u304c\u306a\u3051\u308c\u3070\u4f5c\u6210\u3059\u308b\n      sc.textFile(RAW_FILE).cleansData.replaceCombinedWord(COMBINED_WORDS).saveAsTextFile(CORPUS)\n    }\n\n    val model: Word2VecModel = if (new File(MODEL_PATH).exists) {\n      Word2VecModel.load(sc, MODEL_PATH)\n    } else {\n      val input = sc.textFile(CORPUS).map(_.split(\" \").toVector)\n\n      // \u30e2\u30c7\u30eb\u306e\u751f\u6210\u3068\u5b66\u7fd2\n      val m = new Word2Vec()\n        .setVectorSize(300)\n        .setNumPartitions(20)\n        .setMinCount(1000)\n        .fit(input)\n\n      m.save(sc, MODEL_PATH)\n      m\n    }\n\n    // \u6b63\u898f\u5316\n    val normalizer = new Normalizer\n    new Word2VecModel(\n      model.getVectors.map { case (key, array) =>\n        key -> normalizer.transform(toVector(array)).toArray.map(_.toFloat)\n      })\n  }\n\n  /* \u5404\u7a2e\u8a08\u7b97\u30e1\u30bd\u30c3\u30c9 */\n\n  def plusVec(vec1: Vector, vec2: Vector): Vector = Vectors.dense(vec1.toArray.zip(vec2.toArray).map { case (v1, v2) => v1 + v2 })\n\n  def minusVec(vec1: Vector, vec2: Vector): Vector = Vectors.dense(vec1.toArray.zip(vec2.toArray).map { case (v1, v2) => v1 - v2 })\n\n  def multiplyVec(vec1: Vector, vec2: Vector): Double = vec1.toArray.zip(vec2.toArray).map { case (v1, v2) => v1 * v2 }.sum\n\n  def analogyVec(vec1: Vector, vec2: Vector, vec3: Vector) = plusVec(minusVec(vec1, vec2), vec3)\n\n  def analogyWord(word1: String, word2: String, word3: String) = plusVec(minusVec(model.transform(word1), model.transform(word2)), model.transform(word3))\n\n  def toVector(a: Array[Float]): Vector = Vectors.dense(a.map(_.toDouble))\n\n  def vectorSynonyms(vector: Vector, num: Int = 10): List[(String, Double)] = {\n    model.getVectors.map { case (k, array) => k -> multiplyVec(vector, toVector(array)) }.toList.sortBy(_._2).reverse.slice(0, num)\n  }\n\n  def wordSynonyms(word: String, num: Int = 10): List[(String, Double)] = {\n    vectorSynonyms(model.transform(word), num)\n  }\n```\n\n```shell-session:\u51fa\u529b\u7d50\u679c\n86. \u5358\u8a9e\u30d9\u30af\u30c8\u30eb\u306e\u8868\u793a\n-0.05195711553096771 -0.02188839577138424 -0.02766110934317112 ...\n\n87. \u5358\u8a9e\u306e\u985e\u4f3c\u5ea6\n0.7993002007168585\n\n88. \u985e\u4f3c\u5ea6\u306e\u9ad8\u3044\u5358\u8a9e10\u4ef6\n(England,0.999999995906603)\n(Scotland,0.8266511212525927)\n(Wales,0.8146345041068417)\n(London,0.7710435879598873)\n(Australia,0.7684126888668479)\n(Ireland,0.7508965993753893)\n(Hampshire,0.7350064189984341)\n(Lancashire,0.7295800707042573)\n(Yorkshire,0.7289047527357796)\n(Sydney,0.7255715511987988)\n\n89. \u52a0\u6cd5\u69cb\u6210\u6027\u306b\u3088\u308b\u30a2\u30ca\u30ed\u30b8\u30fc\nGreece\n```\n\n\u5b8c\u74a7\uff01\n\n# 91. \u30a2\u30ca\u30ed\u30b8\u30fc\u30c7\u30fc\u30bf\u306e\u6e96\u5099\n\n> \u5358\u8a9e\u30a2\u30ca\u30ed\u30b8\u30fc\u306e\u8a55\u4fa1\u30c7\u30fc\u30bf\u3092\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u305b\u3088\uff0e\u3053\u306e\u30c7\u30fc\u30bf\u4e2d\u3067\": \"\u3067\u59cb\u307e\u308b\u884c\u306f\u30bb\u30af\u30b7\u30e7\u30f3\u540d\u3092\u8868\u3059\uff0e\n> \u4f8b\u3048\u3070\uff0c\": capital-common-countries\"\u3068\u3044\u3046\u884c\u306f\uff0c\"capital-common-countries\"\u3068\u3044\u3046\u30bb\u30af\u30b7\u30e7\u30f3\u306e\u958b\u59cb\u3092\u8868\u3057\u3066\u3044\u308b\uff0e\n> \u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3057\u305f\u8a55\u4fa1\u30c7\u30fc\u30bf\u306e\u4e2d\u3067\uff0c\"family\"\u3068\u3044\u3046\u30bb\u30af\u30b7\u30e7\u30f3\u306b\u542b\u307e\u308c\u308b\u8a55\u4fa1\u4e8b\u4f8b\u3092\u629c\u304d\u51fa\u3057\u3066\u30d5\u30a1\u30a4\u30eb\u306b\u4fdd\u5b58\u305b\u3088\uff0e\n\n\u554f\u984c\u6587\u306e\u5358\u8a9e\u30a2\u30ca\u30ed\u30b8\u30fc\u306e\u8a55\u4fa1\u30c7\u30fc\u30bf\u306f\u30ea\u30f3\u30af\u304c\u5207\u308c\u3066\u3044\u308b\u3088\u3046\u306a\u306e\u3067\u3001[\u3053\u3053](https://raw.githubusercontent.com/arfon/word2vec/master/questions-words.txt)\u304b\u3089\u843d\u3068\u3057\u3066\u304d\u307e\u3057\u305f\u3002\n\n```scala:Model.scala\n  def analogies: List[List[String]] = {\n    val URL = \"https://raw.githubusercontent.com/arfon/word2vec/master/questions-words.txt\"\n    val ANALOGY_DATA = \"/Users/inaba/Dropbox/NLP100-Spark/src/main/resources/analogy.txt\"\n\n    if (new File(ANALOGY_DATA).exists) {\n      Source.fromFile(ANALOGY_DATA).getLines().toList.map(_.split(\" \").toList)\n    } else {\n      // family\u30bb\u30af\u30b7\u30e7\u30f3\u306e\u307f\u5207\u308a\u51fa\u3057\n      var families = Source.fromURL(URL).getLines.toList\n      families = families.slice(families.indexOf(\": family\") + 1, families.length)\n      families = families.slice(0, families.indexWhere(_.startsWith(\": \")))\n\n      // \u30d5\u30a1\u30a4\u30eb\u51fa\u529b\n      val file = new PrintWriter(ANALOGY_DATA)\n      file.write(families.mkString(\"\\n\"))\n      file.close()\n\n      families.map(_.split(\" \").toList)\n    }\n  }\n```\n\n# 92. \u30a2\u30ca\u30ed\u30b8\u30fc\u30c7\u30fc\u30bf\u3078\u306e\u9069\u7528\n\n> 91\u3067\u4f5c\u6210\u3057\u305f\u8a55\u4fa1\u30c7\u30fc\u30bf\u306e\u5404\u4e8b\u4f8b\u306b\u5bfe\u3057\u3066\uff0cvec(2\u5217\u76ee\u306e\u5358\u8a9e) - vec(1\u5217\u76ee\u306e\u5358\u8a9e) + vec(3\u5217\u76ee\u306e\u5358\u8a9e)\u3092\u8a08\u7b97\u3057\uff0c\u305d\u306e\u30d9\u30af\u30c8\u30eb\u3068\u985e\u4f3c\u5ea6\u304c\u6700\u3082\u9ad8\u3044\u5358\u8a9e\u3068\uff0c\u305d\u306e\u985e\u4f3c\u5ea6\u3092\u6c42\u3081\u3088\uff0e\n> \u6c42\u3081\u305f\u5358\u8a9e\u3068\u985e\u4f3c\u5ea6\u306f\uff0c\u5404\u4e8b\u4f8b\u306e\u672b\u5c3e\u306b\u8ffd\u8a18\u305b\u3088\uff0e\n> \u3053\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u309285\u3067\u4f5c\u6210\u3057\u305f\u5358\u8a9e\u30d9\u30af\u30c8\u30eb\uff0c90\u3067\u4f5c\u6210\u3057\u305f\u5358\u8a9e\u30d9\u30af\u30c8\u30eb\u306b\u5bfe\u3057\u3066\u9069\u7528\u305b\u3088\uff0e\n\nresult\u306e\u4e2d\u306b\u6b63\u89e3(true)/\u4e0d\u6b63\u89e3(false)\u3092\u5165\u308c\u3066\u3044\u304d\u307e\u3059\u3002\n\n```scala:Main.scala\n    var result = List[Boolean]()\n\n    analogies.foreach { words =>\n      try {\n        val actualAnswer = vectorSynonyms(analogyWord(words.head, words(1), words(2)), 1).head._1\n        println(\"%s\\t-\\t%s\\t+\\t%s\\t=\\t%s\\t%s\".format(words.head, words(1), words(2), words(3), actualAnswer))\n        result :+= (words(3) == actualAnswer)\n      } catch {\n        case e: IllegalStateException => Unit\n      }\n    }\n```\n\n# 93. \u30a2\u30ca\u30ed\u30b8\u30fc\u30bf\u30b9\u30af\u306e\u6b63\u89e3\u7387\u306e\u8a08\u7b97\n\n> 92\u3067\u4f5c\u3063\u305f\u30c7\u30fc\u30bf\u3092\u7528\u3044\uff0c\u5404\u30e2\u30c7\u30eb\u306e\u30a2\u30ca\u30ed\u30b8\u30fc\u30bf\u30b9\u30af\u306e\u6b63\u89e3\u7387\u3092\u6c42\u3081\u3088\uff0e\n\n```scala:Mian.scala\n    println(result.count(x => x) / result.length.toDouble)\n```\n\n```shell-session:\u6b63\u89e3\u7387\n0.020512820512820513\n```\n\n\u4e0a\u624b\u304f\u5b66\u7fd2\u3067\u304d\u3066\u306a\u3044\u3067\u3059\u306d\u3002\u3002\u3002\nboy/girl\u3001father/mother\u3001brother/sister\u7b49\u306e\u6027\u5225\u306e\u9055\u3044\u3092\u5b66\u7fd2\u3067\u304d\u3066\u306a\u3044\u305f\u3081\u3001boy - girl + brother = brother\u306b\u306a\u3063\u3061\u3083\u3063\u3066\u308b\u3088\u3046\u3067\u3059\u3002\n\n# 94. WordSimilarity-353\u3067\u306e\u985e\u4f3c\u5ea6\u8a08\u7b97\n\n> [The WordSimilarity-353 Test Collection](http://www.cs.technion.ac.il/~gabr/resources/data/wordsim353/)\u306e\u8a55\u4fa1\u30c7\u30fc\u30bf\u3092\u5165\u529b\u3068\u3057\uff0c1\u5217\u76ee\u30682\u5217\u76ee\u306e\u5358\u8a9e\u306e\u985e\u4f3c\u5ea6\u3092\u8a08\u7b97\u3057\uff0c\u5404\u884c\u306e\u672b\u5c3e\u306b\u985e\u4f3c\u5ea6\u306e\u5024\u3092\u8ffd\u52a0\u3059\u308b\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u4f5c\u6210\u305b\u3088\uff0e\n> \u3053\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u309285\u3067\u4f5c\u6210\u3057\u305f\u5358\u8a9e\u30d9\u30af\u30c8\u30eb\uff0c90\u3067\u4f5c\u6210\u3057\u305f\u5358\u8a9e\u30d9\u30af\u30c8\u30eb\u306b\u5bfe\u3057\u3066\u9069\u7528\u305b\u3088\uff0e\n\n```scala:Main.scala\nval (human: List[Double], machine: List[Double]) = wordSimilarity(WORD_SIMILARITY_COMBINED).unzip\n```\n\n```scala:Model.scala\n  def wordSimilarity(fileName: String): List[(Double, Double)] = {\n    Source.fromFile(fileName).getLines.map { line =>\n      try {\n        val words = line.toString.split(\"\\t\")\n        List(words(2).toDouble, multiplyVec(model.transform(words(0)), model.transform(words(1))))\n      } catch {\n        case e: IllegalStateException => Nil\n        case e: NumberFormatException => Nil\n      }\n    }.filter(_.nonEmpty).toList.map(x => (x.head, x.last))\n  }\n```\n\n# 95. WordSimilarity-353\u3067\u306e\u8a55\u4fa1\n\n> 94\u3067\u4f5c\u3063\u305f\u30c7\u30fc\u30bf\u3092\u7528\u3044\uff0c\u5404\u30e2\u30c7\u30eb\u304c\u51fa\u529b\u3059\u308b\u985e\u4f3c\u5ea6\u306e\u30e9\u30f3\u30ad\u30f3\u30b0\u3068\uff0c\u4eba\u9593\u306e\u985e\u4f3c\u5ea6\u5224\u5b9a\u306e\u30e9\u30f3\u30ad\u30f3\u30b0\u306e\u9593\u306e\u30b9\u30d4\u30a2\u30de\u30f3\u76f8\u95a2\u4fc2\u6570\u3092\u8a08\u7b97\u305b\u3088\uff0e\n\n```scala:Main.scala\n    val diff = rank(human).zip(rank(machine)) // \uff12\u3064\u306e\u985e\u4f3c\u5ea6\u306e\u30ea\u30b9\u30c8\u3092\u9806\u4f4d\u306e\u30ea\u30b9\u30c8\u306b\u5909\u63db\u306b\u5909\u63db\u3057\u3066\u30da\u30a2\u306b\u3059\u308b\n      .map(x => math.pow(x._1 - x._2, 2)) // \u5bfe\u3068\u306a\u308b\u9806\u4f4d\u306e\u5dee\u3092\u305d\u308c\u305e\u308c\u6c42\u3081\u3066\uff12\u4e57\u3059\u308b\n\n    println(spearman(diff))\n```\n\n```scala:Model.scala\n  // \u985e\u4f3c\u5ea6\u306e\u30ea\u30b9\u30c8\u3092\u9806\u4f4d\u306e\u30ea\u30b9\u30c8\u306b\u5909\u63db\u306b\u5909\u63db\n  def rank(words: List[Double]): List[Int] = {\n    val ranking = words.sorted.zipWithIndex.map(x => (x._1, x._2 + 1)).toMap\n    words.map(ranking)\n  }\n\n  //\u30b9\u30d4\u30a2\u30de\u30f3\u306e\u9806\u4f4d\u76f8\u95a2\u4fc2\u6570\u3002\u540c\u3058\u9806\u4f4d\u306e\u5834\u5408\u306f\u6607\u9806\u306b\u3057\u3066\u3044\u308b\u305f\u3081\u82e5\u5e72\u672c\u6765\u3068\u9055\u3046\u3002a:4.5,b:4.5 => a:4,b:5\u3000\u306b\u3057\u3066\u308b\u3002\n  def spearman(diff: List[Double]) = 1 - (6 * diff.sum) / (math.pow(diff.length, 3) - diff.length)\n```\n\n```shell-session:\u7d50\u679c\ncombined:  0.39186961031541434 (\u4f4e\u3044\u76f8\u95a2\u3042\u308a)\nset1: 0.2655867166143566 (\u4f4e\u3044\u76f8\u95a2\u3042\u308a)\nset2: 0.4190924041068492 (\u76f8\u95a2\u3042\u308a)\n```\n\n# 96. \u56fd\u540d\u306b\u95a2\u3059\u308b\u30d9\u30af\u30c8\u30eb\u306e\u62bd\u51fa\n\n> word2vec\u306e\u5b66\u7fd2\u7d50\u679c\u304b\u3089\uff0c\u56fd\u540d\u306b\u95a2\u3059\u308b\u30d9\u30af\u30c8\u30eb\u306e\u307f\u3092\u629c\u304d\u51fa\u305b\uff0e\n\n```scala:Main.scala\n    // \u8907\u5408\u8a9e\u306e\u51e6\u7406 (\u4f8b\u3048\u3070\u3001\"United States\" => \"United_States\")\n    val countryNames = Source.fromFile(COMBINED_WORDS).getLines.map(line => line.replace(\" \", \"_\")).toList\n\n    val countryVectors: Map[String, Vector] = model.getVectors\n      .filter(x => countryNames.indexOf(x._1) >= 0) // \u56fd\u540d\u3060\u3051\u3092\u62bd\u51fa\n      .map { case (key, array) => key -> Vectors.dense(array.map(y => y.toDouble)) } // String->Array[Float]\u3092String->Vector\u306b\u5909\u63db\n```\n\n# 97. k-means\u30af\u30e9\u30b9\u30bf\u30ea\u30f3\u30b0\n\n> 96\u306e\u5358\u8a9e\u30d9\u30af\u30c8\u30eb\u306b\u5bfe\u3057\u3066\uff0ck-means\u30af\u30e9\u30b9\u30bf\u30ea\u30f3\u30b0\u3092\u30af\u30e9\u30b9\u30bf\u6570k=5\u3068\u3057\u3066\u5b9f\u884c\u305b\u3088\uff0e\n\n```scala:Main.scala\n    val countryRdd: RDD[Vector] = sc.parallelize(countryVectors.values.toList) // Map\u3092RDD\u306b\u5909\u63db\n\n    val clusters = if (new File(COUNTRY_CLUSTERS).exists) {\n      // k-means\u30af\u30e9\u30b9\u30bf\u30ea\u30f3\u30b0\u30e2\u30c7\u30eb\u304c\u30d5\u30a1\u30a4\u30eb\u306b\u4fdd\u5b58\u3055\u308c\u3066\u3044\u308b\u5834\u5408\n      KMeansModel.load(sc, COUNTRY_CLUSTERS)\n    } else {\n      // k-means\u30af\u30e9\u30b9\u30bf\u30ea\u30f3\u30b0\u30e2\u30c7\u30eb\u304c\u30d5\u30a1\u30a4\u30eb\u306b\u4fdd\u5b58\u3055\u308c\u3066\u3044\u306a\u3044\u5834\u5408\n      val clusters: KMeansModel = KMeans.train(countryRdd, 5, 100)\n      clusters.save(sc, COUNTRY_CLUSTERS)\n      clusters\n    }\n\n    // \u30af\u30e9\u30b9\u30bf\u306e\u4e2d\u5fc3\u70b9\u304c5\u3064\u3067\u304d\u3066\u3044\u308b\u3053\u3068\u3092\u78ba\u8a8d\n    clusters.clusterCenters.foreach(println)\n\n    // \u5404\u30c7\u30fc\u30bf\u304c\u3069\u306e\u30af\u30e9\u30b9\u30bf\u306b\u5c5e\u3057\u3066\u3044\u308b\u304b\u3092\u78ba\u8a8d\n    countryVectors.keys.zip(clusters.predict(countryRdd).collect)\n      .toList.sortBy(_._2).foreach(println)\n```\n\n```shell-session:\u51fa\u529b\u30a4\u30e1\u30fc\u30b8\n[0.04466799285174126,0.04456286245424832,-0.01976845185050652, ...\n[0.03334749694396224,0.015676170529332012,-0.03916260437108576, ...\n[-0.014139431890928082,-0.0038628893671557307,-0.04137489525601268, ...\n[0.03492516125058473,0.024117531810506163,-0.029571880074923465, ...\n[0.043189115822315216,0.02963972231373191,-0.03933139890432358, ...\n\n(Morocco,0)\n(Macedonia,0)\n\u4e2d\u7565\n(Sudan,0)\n(Chile,1)\n(Indonesia,1)\n\u4e2d\u7565\n(Czech_Republic,1)\n(Jordan,2)\n(Jersey,2)\n\u4e2d\u7565\n(Bermuda,2)\n(Lebanon,3)\n(France,3)\n\u4e2d\u7565\n(Denmark,3)\n(India,4)\n(Pakistan,4)\n\u4e2d\u7565\n(China,4)\n```\n\n# 98.Ward\u6cd5\u306b\u3088\u308b\u30af\u30e9\u30b9\u30bf\u30ea\u30f3\u30b0\u300199.t-SNE\u306b\u3088\u308b\u53ef\u8996\u5316\n\n> 98.Ward\u6cd5\u306b\u3088\u308b\u30af\u30e9\u30b9\u30bf\u30ea\u30f3\u30b0\n> \t96\u306e\u5358\u8a9e\u30d9\u30af\u30c8\u30eb\u306b\u5bfe\u3057\u3066\uff0cWard\u6cd5\u306b\u3088\u308b\u968e\u5c64\u578b\u30af\u30e9\u30b9\u30bf\u30ea\u30f3\u30b0\u3092\u5b9f\u884c\u305b\u3088\uff0e\n> \t\u3055\u3089\u306b\uff0c\u30af\u30e9\u30b9\u30bf\u30ea\u30f3\u30b0\u7d50\u679c\u3092\u30c7\u30f3\u30c9\u30ed\u30b0\u30e9\u30e0\u3068\u3057\u3066\u53ef\u8996\u5316\u305b\u3088\uff0e\n\n> 99.t-SNE\u306b\u3088\u308b\u53ef\u8996\u5316\n> \t96\u306e\u5358\u8a9e\u30d9\u30af\u30c8\u30eb\u306b\u5bfe\u3057\u3066\uff0c\u30d9\u30af\u30c8\u30eb\u7a7a\u9593\u3092t-SNE\u3067\u53ef\u8996\u5316\u305b\u3088\uff0e\n\n\u306a\u3093\u3068Spark\u306espark.mllib\u304cWard\u6cd5\u3092\u30b5\u30dd\u30fc\u30c8\u3057\u3066\u306a\u3044\u3063\u307d\u3044([Clustering - spark.mllib](http://spark.apache.org/docs/latest/mllib-clustering.html))\u3002\n\u3042\u3068\u4e8c\u554f\u306a\u306e\u306b\u307e\u305f\u5225\u306e\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u63a2\u3059\u306e\u9762\u5012\u304f\u3055\u3044\u306a\u3041\u3002\nJVM\u3067\u52d5\u304f\u3082\u306e\u3068\u3057\u3066\u306f\u3001[Weka](http://www.cs.waikato.ac.nz/ml/weka/index.html)\u3068\u3044\u3046\u306e\u304c\u3042\u308b\u3089\u3057\u3044\u304c\"the last decade\"\u611f\u304c\u534a\u7aef\u306a\u3044\u304b\u3089\u30d1\u30b9\u3002\n\u3068\u3044\u3046\u3053\u3068\u3067\u3001\u3044\u3064\u3082\u304a\u4e16\u8a71\u306b\u306a\u3063\u3066\u3044\u308b[\u5317\u91ce\u5742\u5099\u5fd8\u9332](http://kenichia.hatenablog.com/entry/2016/03/17/221509)\u306b\u5023\u3063\u3066scipy\u3067\u3084\u308a\u307e\u3059\u3002\n\n```python:Main.py\nfrom scipy.cluster.hierarchy import ward, dendrogram\nfrom sklearn.manifold import TSNE\nfrom matplotlib import pyplot as plt\n\n# \u5358\u8a9e\u30d9\u30af\u30c8\u30eb\u3092\u30d5\u30a1\u30a4\u30eb\u304b\u3089\u5fa9\u5143 (\u30b9\u30da\u30fc\u30b9\u533a\u5207\u308a\u30671\u5217\u76ee\u304c\u56fd\u540d\u30012\u5217\u76ee\u304b\u3089301\u5217\u76ee\u307e\u3067\u304c\u56fd\u540d\u306e\u7279\u5fb4\u3092\u8868\u3059\u30d9\u30af\u30c8\u30eb)\nCOUNTRY_VECTORS = '/Users/inaba/Dropbox/NLP100-Spark/src/main/resources/country_vectors.txt'\n\nwith open(COUNTRY_VECTORS) as input_handler:\n    lines = [line.split() for line in input_handler]\n\ncountry_names = [line[0] for line in lines]\ncountry_vectors = [line[1:] for line in lines]\n\n# Ward\u6cd5\u3067\u30af\u30e9\u30b9\u30bf\u30ea\u30f3\u30b0\nward_result = ward(country_vectors)\n\n# \u30c7\u30f3\u30c9\u30ed\u30b0\u30e9\u30e0\u3067\u8868\u793a\ndendrogram(ward_result, labels=country_names)\nplt.show()\n\n# t-SNE\nt_sne_result = TSNE().fit_transform(country_vectors)\n\n# \u8868\u793a\nfig, ax = plt.subplots()\nax.scatter(t_sne_result[:, 0], t_sne_result[:, 1])\nfor index, label in enumerate(country_names):\n    ax.annotate(label, xy=(t_sne_result[index, 0], t_sne_result[index, 1]))\nplt.show()\n```\n\n\u30ab\u30f3\u30bf\u30f3\u3002\u3067\u3082\u3001\u6b86\u3069\u56fd\u540d\u306f\u8aad\u3081\u306a\u3044\u3002\u3002\u3002\u304b\u308d\u3046\u3058\u3066\u8aad\u3081\u308b\u3068\u3053\u308d\u3082\u3001\u3042\u307e\u308a\u7d0d\u5f97\u611f\u306f\u306a\u3044\u3002\n\u3053\u3053\u3067\u306f\u3001scipy.cluster.hierarchy\u3084sklearn.manifold\u3092\u4f7f\u3048\u3070ward\u6cd5\u3067\u306e\u30af\u30e9\u30b9\u30bf\u30ea\u30f3\u30b0\u3001dendrogram\u3067\u306e\u53ef\u8996\u5316\u3001t-SNE\u306b\u3088\u308b\u53ef\u8996\u5316\u304c\u7c21\u5358\u306b\u3067\u304d\u308b\u3053\u3068\u3092\u78ba\u8a8d\u3059\u308b\u3060\u3051\u3067\u826f\u3057\u3068\u3057\u3088\u3046\u3002\n![dendrogram.png](https://qiita-image-store.s3.amazonaws.com/0/36429/7ab154b3-909d-780d-db31-9f34d83b566c.png)\n![TSNE.png](https://qiita-image-store.s3.amazonaws.com/0/36429/fa6153b6-7e60-2390-25ed-a0e563ac79c4.png)\n\n# \u8a00\u8a9e\u51e6\u7406100\u672c\u30ce\u30c3\u30af\u5168\u4f53\u3092\u901a\u3057\u3066\u306e\u7dcf\u62ec\uff08\u611f\u60f3\uff09\n\n\u6700\u5f8c\u306b\u3001\u5168\u4f53\u3092\u901a\u3057\u3066\u5b66\u3093\u3060\u3053\u3068\u3092\u7c21\u5358\u306b\u307e\u3068\u3081\u3066\u304a\u304d\u307e\u3059\u3002\n\u3042\u304f\u307e\u3067\u521d\u5fc3\u8005\u304c\u5c11\u3057\u8a00\u8a9e\u51e6\u7406\u3092\u304b\u3058\u3063\u3066\u307f\u305f\u9650\u308a\u3067\u306e\u611f\u60f3\u306a\u306e\u3067\u3001\u6b63\u3057\u3044\u3053\u3068\u3092\u8aac\u660e\u3057\u3066\u3044\u308b\u3068\u306f\u601d\u308f\u306a\u3044\u3067\u4e0b\u3055\u3044\u3002\n(\u30b3\u30e1\u30f3\u30c8\u6b04\u3067\u306e\u30c4\u30c3\u30b3\u30df\u5927\u6b53\u8fce\u3067\u3059\u3002)\n\n- \u4e00\u898b\u96e3\u89e3\u306a\u6a5f\u68b0\u5b66\u7fd2\u7528\u8a9e\u3084\u7d71\u8a08\u7528\u8a9e\u3067\u3042\u3063\u3066\u3082\u3001\u76ee\u7684\u3068\u30a4\u30f3\u30d7\u30c3\u30c8\u30fb\u30a2\u30a6\u30c8\u30d7\u30c3\u30c8\u306b\u7740\u76ee\u3057\u3066\u30d6\u30e9\u30c3\u30af\u30dc\u30c3\u30af\u30b9\u7684\u30c4\u30fc\u30eb\u3068\u3057\u3066\u6271\u3048\u3070\u6016\u304f\u306a\u3044\u3002\n- \u30d3\u30c3\u30b0\u30c7\u30fc\u30bf\u306eETL\u51e6\u7406\u306bSpark\u306f\u4e0d\u53ef\u6b20\u3060\u304c\u3001\u6a5f\u68b0\u5b66\u7fd2\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u306fPython\u7cfb\u30e9\u30a4\u30d6\u30e9\u30ea\u306e\u307b\u3046\u304c\u5145\u5b9f\u3057\u3066\u3044\u308b\u3002\n- \u6a5f\u68b0\u5b66\u7fd2\u30fb\u81ea\u7136\u8a00\u8a9e\u51e6\u7406\u7cfb\u306e\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u4f7f\u3046\u306e\u306f\u96e3\u3057\u304f\u306a\u3044\u3002\n- \u3060\u3051\u3069\u300c\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u4f7f\u3063\u3066\u307f\u308b\u300d\u306e\u3068\u300c\u7cbe\u5ea6\u306e\u9ad8\u3044\u5b66\u7fd2\u30fb\u5206\u6790\u3092\u3059\u308b\u300d\u3053\u3068\u306e\u8ddd\u96e2\u306f\u679c\u3066\u3057\u306a\u304f\u9060\u3044\u3002\u3002\u3002\uff08\u8ddd\u96e2\u3092\u57cb\u3081\u308b\u305f\u3081\u306b\u5fc5\u8981\u306a\u3053\u3068\u306f\u4f55\u306a\u3093\u3060\u308d\u3046\uff1f\uff09\n- \u6a5f\u68b0\u5b66\u7fd2\u306e\u7d50\u679c\u51fa\u3066\u304d\u305f\u5206\u6790\u7d50\u679c\u304c\u3001\u6b63\u3057\u3044\u306e\u304b\u6b63\u3057\u304f\u306a\u3044\u306e\u304b\u30c6\u30b9\u30c8\u3059\u308b\u306e\u306f\u96e3\u3057\u3044\u3002\u666e\u901a\uff08\uff1f\uff09\u306e\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u306e\u69d8\u306b\u3001Expected result\u3068Actual result\u304c\u5b8c\u5168\u4e00\u81f4\u3059\u308b\u3053\u3068\u3092\u78ba\u8a8d\u3059\u308b\u3053\u3068\u306f\u3067\u304d\u306a\u3044\u304b\u3089\u3002\u7d50\u5c40\u3001\u5b66\u7fd2\u7d50\u679c\u306e\u59a5\u5f53\u6027\u306f\u3001\u5f79\u306b\u7acb\u3064\u304b\u3069\u3046\u304b\u3067\u5224\u65ad\u3059\u308b\u3057\u304b\u306a\u304f\u3001\u5f79\u306b\u7acb\u3064\u304b\u3069\u3046\u304b\u3092\u5224\u65ad\u3059\u308b\u306b\u306f\u3001\u5206\u6790\u306e\u76ee\u7684\u304c\u660e\u78ba\u3067\u306a\u304f\u3066\u306f\u306a\u3089\u306a\u3044\u3002\u3053\u306e\u7ae0\u306f\u7df4\u7fd2\u3060\u304b\u3089\u826f\u3044\u306e\u3060\u304c\u3001\u76ee\u7684\u306a\u3057\u306b\u6f2b\u7136\u3068\u30af\u30e9\u30b9\u30bf\u30ea\u30f3\u30b0\u3057\u305f\u3060\u3051\u3060\u3068\u3001\"So what?\"\u306a\u7d50\u679c\u306b\u306a\u308b\u3002\n", "tags": ["\u6a5f\u68b0\u5b66\u7fd2", "\u81ea\u7136\u8a00\u8a9e\u51e6\u7406", "\u8a00\u8a9e\u51e6\u7406100\u672c\u30ce\u30c3\u30af", "Scala2.11.8", "Python3.5.1"]}