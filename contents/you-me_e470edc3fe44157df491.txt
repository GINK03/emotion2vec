{"context": "\u3084\u3063\u3068\u30bd\u30fc\u30b9\u3092\u8aad\u3093\u3067\u898b\u3064\u3051\u3066\u305f\u306e\u3067\u30e1\u30e2\u3002\n\n\u3084\u308a\u305f\u3044\u3053\u3068\nEloquant\u306eupdate\u6642\u306b\u3001\nSET colA = colA\uff0b\uff11\u3000\n\u306e\u3088\u3046\u306a\u3001\u751f\u306eSQL\u3092\u5165\u308c\u8fbc\u307f\u305f\u304b\u3063\u305f\u3002\n\u697d\u89b3\u6392\u4ed6\u3092\u5b9f\u88c5\u3057\u305f\u304f\u3066\u3001\uff06\u3000updated_at(timestamp)\u3067\u306a\u304f\u3066\u3001version_no\u3067\u7ba1\u7406\u3057\u305f\u304b\u3063\u305f\n\uff08\u4ee5\u524d\u307e\u3067\u4f7f\u3063\u3066\u3044\u305f\u5225\u8a00\u8a9e\u306eORM\u306e\u6587\u5316\u3063\u3066\u8a00\u308f\u308c\u308c\u308c\u3070\u305d\u308c\u307e\u3067\u306a\u3093\u3060\u3051\u3069\u30fb\u30fb\u30fb\uff09\n\n\u3084\u3063\u305f\u3053\u3068\n\u5404\u30e2\u30c7\u30eb\u306e\u89aa\u30af\u30e9\u30b9\u3068\u3057\u3066\u3001\u3053\u3093\u306a\u72ec\u81ea\u30af\u30e9\u30b9\u3092\u7528\u610f\u3002\n\u5404\u30c6\u30fc\u30d6\u30eb\u306e\u5171\u901a\u30ab\u30e9\u30e0\u3068\u3057\u3066\u4ee5\u4e0b\u3092\u4ed8\u52a0\u3059\u308b\u3088\u3046\u306b\u3057\u307e\u3059\u3002\n| field | type |  |\n|:-:|:-:|:-:|\n|  id | int  | pk  |\n|  created_at | timestamp  | Eloquant\u898f\u5b9a  |\n|  updated_at | timestamp  |  Eloquant\u898f\u5b9a |\n|  create_user_id | int  |   |\n|  update_user_id | int  |   |\n|  version_no | int  |  \u2605\u3053\u306e\u5024\u3067\u6392\u4ed6 |\n\u6700\u521d\u306b\u3001\u6b63\u89e3\u3067\u3059\u3002\n\nMymodel.php\nclass MyModel extends Model {\n\n\n    protected static function boot() {\n        parent::boot();\n\n        self::creating(function($model) {\n            return $model->onCreatingHandler();\n        });\n\n        self::updating(function($model) {\n            return $model->onUpdatingHander();\n        });\n\n\n\n        // memo:softDelete\u306e\u6392\u4ed6\u9805\u76eeupdate\u306b\u3064\u3044\u3066\u306f\u3001SoftDeletes\u3092extend\u3057\u305fMySoftDelete trait\u3067\u3002\n//\n//      self::deleted(function ($model) {\n//          return $model->onDeletingHander();\n//      });\n\n    }\n\n\n    /**\n     * create\u6642\u306e\u30cf\u30f3\u30c9\u30e9\n     * @return bool\n     */\n    protected function onCreatingHandler() {\n        $user = Auth::user();\n\n        // \u767b\u9332\u3001\u66f4\u65b0ID\u3092\u5165\u308c\u308b\n        if (isset($user)) {\n            $this->create_user_id = $user->id;\n            $this->update_user_id = $user->id;\n        } else {\n            $this->create_user_id = 0;\n            $this->update_user_id = 0;\n        }\n        $this->version_no = 1;\n        return true;\n    }\n\n    /**\n     * update\u6642\u306e\u30cf\u30f3\u30c9\u30e9\n     * @return bool\n     */\n    protected function onUpdatingHander() {\n\n        $user = Auth::user();\n        // \u66f4\u65b0\u30e6\u30fc\u30b6ID\u306e\u767b\u9332\n        if (isset($user)) {\n            $this->update_user_id = $user->id;\n        } else {\n            $this->update_user_id = 0;\n        }\n        // \u6392\u4ed6\u7528\n        $this->version_no = new Illuminate\\Database\\Query\\Expression('version_no + 1');\n\n        return true;\n    }\n}\n\n\n\n\u8a66\u884c\u932f\u8aa4\u306e\u8a18\u9332\n\n\u8a66\u884c\u932f\u8aa4\u306e\u8a18\u9332\uff11\uff1amodel\u306b\u8db3\u3057\u3066\u307f\u308b\u3002\nprotected function onUpdatingHander() {\n\n    $user = Auth::->user();\n    // \u66f4\u65b0\u30e6\u30fc\u30b6ID\u306e\u767b\u9332\n    if (isset($user)) {\n        $this->update_user_id = $user->id;\n    } else {\n        $this->update_user_id = 0;\n    }\n    // \u697d\u89b3\u6392\u4ed6\n    $this->version_no = $this->version_no + 1 ;\n\n    return true;\n}\n\n\u7d50\u679c\uff1a\nstatic\u306a\u72b6\u614b\u3067fill\u3057\u3066update\u3057\u305f\u3089\u30fb\u30fb\u304a\u308f\u304b\u308a\u3067\u3059\u306d\u3002\n$this->version_no \u304c0\u306a\u306e\u3067\u3001\u4f55\u5ea6\u3084\u3063\u3066\u30821\u3067\u3059\u3002\u5931\u6557\u3002\n\n\u8a66\u884c\u932f\u8aa4\u306e\u8a18\u9332\uff12\uff1a\u66f8\u3044\u3066\u307f\u308b\nprotected function onUpdatingHander() {\n\n    $user = Auth::->user();\n    // \u66f4\u65b0\u30e6\u30fc\u30b6ID\u306e\u767b\u9332\n    if (isset($user)) {\n        $this->update_user_id = $user->id;\n    } else {\n        $this->update_user_id = 0;\n    }\n    // \u697d\u89b3\u6392\u4ed6\n    $this->version_no =  'version_no + 1' ;\n\n    return true;\n}\n\n\u7d50\u679c\uff1a\n\u5f53\u305f\u308a\u524d\u3067\u3059\u304c\u3001string\u3068\u3057\u3066\u8a55\u4fa1\u3055\u308c\u3066?\u3067\u7f6e\u63db\u3055\u308c\u305f\u306e\u3067\u3001\u5e38\u306b0\u3067\u3059\u3002\n\n\u8a66\u884c\u932f\u8aa4\u306e\u8a18\u93323:\u30b3\u30fc\u30c9\u30ea\u30fc\u30c7\u30a3\u30f3\u30b0\u3057\u3066update\u30af\u30a8\u30ea\u751f\u6210\u7b87\u6240\u3092\u307f\u305f\n\nModel.php\npublic function save(array $options = [])\n{\n    $query = $this->newQueryWithoutScopes();\n\n    // If the \"saving\" event returns false we'll bail out of the save and return\n    // false, indicating that the save failed. This provides a chance for any\n    // listeners to cancel save operations if validations fail or whatever.\n    if ($this->fireModelEvent('saving') === false) {\n        return false;\n    }\n\n    // If the model already exists in the database we can just update our record\n    // that is already in this database using the current IDs in this \"where\"\n    // clause to only update this model. Otherwise, we'll just insert them.\n    if ($this->exists) {\n        $saved = $this->performUpdate($query, $options);\n    }\n\n    // If the model is brand new, we'll insert it into our database and set the\n    // ID attribute on the model to the value of the newly inserted row's ID\n    // which is typically an auto-increment value managed by the database.\n    else {\n        $saved = $this->performInsert($query, $options);\n    }\n\n    if ($saved) {\n        $this->finishSave($options);\n    }\n\n    return $saved;\n}\n\n\ncreate\u306b\u3057\u308dupdate\u306b\u3057\u308d\u3001\u3053\u306esave()\u30e1\u30bd\u30c3\u30c9\u3092\u901a\u308a\u3001\u5b9f\u969b\u306eupdate\u51e6\u7406\u90e8\u5206\u306f\n\nModel.php\nprotected function performUpdate(Builder $query, array $options = [])\n{\n    $dirty = $this->getDirty();\n\n    if (count($dirty) > 0) {\n        // If the updating event returns false, we will cancel the update operation so\n        // developers can hook Validation systems into their models and cancel this\n        // operation if the model does not pass validation. Otherwise, we update.\n        if ($this->fireModelEvent('updating') === false) {\n            return false;\n        }\n\n        // First we need to create a fresh query instance and touch the creation and\n        // update timestamp on the model which are maintained by us for developer\n        // convenience. Then we will just continue saving the model instances.\n        if ($this->timestamps && Arr::get($options, 'timestamps', true)) {\n            $this->updateTimestamps();\n        }\n\n        // Once we have run the update operation, we will fire the \"updated\" event for\n        // this model instance. This will allow developers to hook into these after\n        // models are updated, giving them a chance to do any special processing.\n        $dirty = $this->getDirty();\n\n        if (count($dirty) > 0) {\n            $numRows = $this->setKeysForSaveQuery($query)->update($dirty);\n\n            $this->fireModelEvent('updated', false);\n        }\n    }\n\n    return true;\n}\n\n\n\n\n\u3053\u3053\u3067\u3001\n\u3055\u3063\u304d\"updating\"\u30a4\u30d9\u30f3\u30c8\u306e\u30af\u30ed\u30fc\u30b8\u30e3\u306b\u8a2d\u5b9a\u3057\u305f\u30e1\u30bd\u30c3\u30c9\u3092\u5b9f\u884c\n\u2193\nEloquant\u898f\u5b9a\u306eupdated_at\u30ab\u30e9\u30e0\u306e\u8a2d\u5b9a\n\u2193\nupdate\u5b9f\u884c\n\u2193\nupdated\u30a4\u30d9\u30f3\u30c8\u306e\u5b9f\u884c\uff08\u4eca\u56de\u306f\u8a2d\u5b9a\u306a\u3057\uff09\n\u3068\u306a\u308b\u308f\u3051\u3067\u3001\u5b9f\u969b\u306bupdate\u6587\u3092\u7d44\u307f\u7acb\u3066\u3066\u3044\u308b\u3068\u3053\u308d\u3092\u63a2\u3059\u3002\n\u2192$numRows = $this->setKeysForSaveQuery($query)->update($dirty);\n\nIlluminate\\Database\\Eloquant\\Builder.php\npublic function update(array $values)\n{\n    return $this->toBase()->update($this->addUpdatedAtColumn($values));\n}\n\n\n\nIlluminate\\Database\\Query\\Builder.php\npublic function update(array $values)\n{\n    $bindings = array_values(array_merge($values, $this->getBindings()));\n\n    $sql = $this->grammar->compileUpdate($this, $values);\n\n    return $this->connection->update($sql, $this->cleanBindings(\n        $this->grammar->prepareBindingsForUpdate($bindings, $values)\n    ));\n}\n\n\n\nIlluminate\\Database\\Query\\Grammars\\Grammar.php\npublic function compileUpdate(Builder $query, $values)\n{\n    $table = $this->wrapTable($query->from);\n\n    // Each one of the columns in the update statements needs to be wrapped in the\n    // keyword identifiers, also a place-holder needs to be created for each of\n    // the values in the list of bindings so we can make the sets statements.\n    $columns = [];\n\n    foreach ($values as $key => $value) {\n        $columns[] = $this->wrap($key).' = '.$this->parameter($value);\n    }\n\n    $columns = implode(', ', $columns);\n\n    // If the query has any \"join\" clauses, we will setup the joins on the builder\n    // and compile them so we can attach them to this update, as update queries\n    // can get join statements to attach to other tables when they're needed.\n    if (isset($query->joins)) {\n        $joins = ' '.$this->compileJoins($query, $query->joins);\n    } else {\n        $joins = '';\n    }\n\n    // Of course, update queries may also be constrained by where clauses so we'll\n    // need to compile the where clauses and attach it to the query so only the\n    // intended records are updated by the SQL statements we generate to run.\n    $where = $this->compileWheres($query);\n\n    return trim(\"update {$table}{$joins} set $columns $where\");\n}\n\n\n\u3053\u3053\u306e\u3001\n$columns[] = $this->wrap($key).' = '.$this->parameter($value);\n\u3067SET\u90e8\u5206\u306e\u30af\u30a8\u30ea\u3092\u304f\u307f\u305f\u3066\u3066\u308b\u3002\npublic function parameter($value)\n{\n    return $this->isExpression($value) ? $this->getValue($value) : '?';\n}\n\n\n\u3068\u3044\u3046\u308f\u3051\u3067\u3001Expression\u578b\u306a\u3089\u307e\u3093\u307e\u30af\u30a8\u30ea\u306e\u4e00\u90e8\u3068\u8a55\u4fa1\u3057\u3066\u7e4b\u3052\u3066\u304f\u308c\u308b\u3053\u3068\u304c\u308f\u304b\u308a\u30b9\u30c3\u30ad\u30ea\uff01\n\n\u4f59\u8ac7\n\n\u697d\u89b3\u6392\u4ed6\u3068\u3057\u3066\u3001\u672c\u5f53\u306fupdate\u6642\u306bwhere\u53e5\u306bversion_no\u3092\u3044\u308c\u3066\u7d50\u679c\u6570\u3067\u5224\u5b9a\u3057\u305f\u304b\u3063\u305f\u3093\u3060\u3051\u3069\u3001\u7d50\u679c\u884c\u3092\u8fd4\u3057\u3066\u304f\u308c\u306a\u3044\u306e\u3067\u3001\u8ae6\u3081\u3066sharedLock()\u3067select\u3057\u3066\u3044\u308b\u3002\nmemo\u3057\u3066\u3042\u308b\u3051\u3069\u3001\u8ad6\u7406\u524a\u9664\uff1dsoftdelete\u306e\u6a5f\u69cb\u3092\u4f7f\u3046\u3068\u304d\u3001\u3053\u306esave\u306f\u901a\u3089\u306a\u3044\u306e\u3067\u3001\u6b8b\u5ff5\u306a\u304c\u3089SoftDeletes\u3092extend\u3057\u305ftrait\u3092\u7528\u610f\u3057\u3066\u3001runSoftDelete()\u3092\u540c\u69d8\u306bversion_no\u3092\u30bb\u30c3\u30c8\u3057\u3066\u3084\u308b\u3088\u3046\u306b\u81ea\u524d\u3067\u30aa\u30fc\u30d0\u30fc\u30e9\u30a4\u30c9\u3059\u308b\u5fc5\u8981\u3042\u308a\u3002\n\n\u3068\u308a\u3042\u3048\u305a\u3053\u3053\u307e\u3067\u3002\n\u3084\u3063\u3068\u30bd\u30fc\u30b9\u3092\u8aad\u3093\u3067\u898b\u3064\u3051\u3066\u305f\u306e\u3067\u30e1\u30e2\u3002\n\n\n# \u3084\u308a\u305f\u3044\u3053\u3068\nEloquant\u306eupdate\u6642\u306b\u3001\n`SET colA = colA\uff0b\uff11`\u3000\n\u306e\u3088\u3046\u306a\u3001\u751f\u306eSQL\u3092\u5165\u308c\u8fbc\u307f\u305f\u304b\u3063\u305f\u3002\n\n\u697d\u89b3\u6392\u4ed6\u3092\u5b9f\u88c5\u3057\u305f\u304f\u3066\u3001\uff06\u3000updated_at(timestamp)\u3067\u306a\u304f\u3066\u3001version_no\u3067\u7ba1\u7406\u3057\u305f\u304b\u3063\u305f\n~~\uff08\u4ee5\u524d\u307e\u3067\u4f7f\u3063\u3066\u3044\u305f\u5225\u8a00\u8a9e\u306eORM\u306e\u6587\u5316\u3063\u3066\u8a00\u308f\u308c\u308c\u308c\u3070\u305d\u308c\u307e\u3067\u306a\u3093\u3060\u3051\u3069\u30fb\u30fb\u30fb\uff09~~\n\n\n# \u3084\u3063\u305f\u3053\u3068\n\n\u5404\u30e2\u30c7\u30eb\u306e\u89aa\u30af\u30e9\u30b9\u3068\u3057\u3066\u3001\u3053\u3093\u306a\u72ec\u81ea\u30af\u30e9\u30b9\u3092\u7528\u610f\u3002\n\u5404\u30c6\u30fc\u30d6\u30eb\u306e\u5171\u901a\u30ab\u30e9\u30e0\u3068\u3057\u3066\u4ee5\u4e0b\u3092\u4ed8\u52a0\u3059\u308b\u3088\u3046\u306b\u3057\u307e\u3059\u3002\n| field | type |  |\n|:-:|:-:|:-:|\n|  id | int  | pk  |\n|  created_at | timestamp  | Eloquant\u898f\u5b9a  |\n|  updated_at | timestamp  |  Eloquant\u898f\u5b9a |\n|  create_user_id | int  |   |\n|  update_user_id | int  |   |\n|  version_no | int  |  \u2605\u3053\u306e\u5024\u3067\u6392\u4ed6 |\n\n\n\u6700\u521d\u306b\u3001\u6b63\u89e3\u3067\u3059\u3002\n\n```Mymodel.php\nclass MyModel extends Model {\n\n\n\tprotected static function boot() {\n\t\tparent::boot();\n\n\t\tself::creating(function($model) {\n\t\t\treturn $model->onCreatingHandler();\n\t\t});\n\n\t\tself::updating(function($model) {\n\t\t\treturn $model->onUpdatingHander();\n\t\t});\n\n\n\n\t\t// memo:softDelete\u306e\u6392\u4ed6\u9805\u76eeupdate\u306b\u3064\u3044\u3066\u306f\u3001SoftDeletes\u3092extend\u3057\u305fMySoftDelete trait\u3067\u3002\n//\n//\t\tself::deleted(function ($model) {\n//\t\t\treturn $model->onDeletingHander();\n//\t\t});\n\n\t}\n\n\n\t/**\n\t * create\u6642\u306e\u30cf\u30f3\u30c9\u30e9\n\t * @return bool\n\t */\n\tprotected function onCreatingHandler() {\n\t\t$user = Auth::user();\n\n\t\t// \u767b\u9332\u3001\u66f4\u65b0ID\u3092\u5165\u308c\u308b\n\t\tif (isset($user)) {\n\t\t\t$this->create_user_id = $user->id;\n\t\t\t$this->update_user_id = $user->id;\n\t\t} else {\n\t\t\t$this->create_user_id = 0;\n\t\t\t$this->update_user_id = 0;\n\t\t}\n\t\t$this->version_no = 1;\n\t\treturn true;\n\t}\n\n\t/**\n\t * update\u6642\u306e\u30cf\u30f3\u30c9\u30e9\n\t * @return bool\n\t */\n\tprotected function onUpdatingHander() {\n\n\t\t$user = Auth::user();\n\t\t// \u66f4\u65b0\u30e6\u30fc\u30b6ID\u306e\u767b\u9332\n\t\tif (isset($user)) {\n\t\t\t$this->update_user_id = $user->id;\n\t\t} else {\n\t\t\t$this->update_user_id = 0;\n\t\t}\n\t\t// \u6392\u4ed6\u7528\n\t\t$this->version_no = new Illuminate\\Database\\Query\\Expression('version_no + 1');\n\n\t\treturn true;\n\t}\n}\n```\n\n# \u8a66\u884c\u932f\u8aa4\u306e\u8a18\u9332\n\n## \u8a66\u884c\u932f\u8aa4\u306e\u8a18\u9332\uff11\uff1amodel\u306b\u8db3\u3057\u3066\u307f\u308b\u3002\n\n```\nprotected function onUpdatingHander() {\n\n\t$user = Auth::->user();\n\t// \u66f4\u65b0\u30e6\u30fc\u30b6ID\u306e\u767b\u9332\n\tif (isset($user)) {\n\t\t$this->update_user_id = $user->id;\n\t} else {\n\t\t$this->update_user_id = 0;\n\t}\n\t// \u697d\u89b3\u6392\u4ed6\n\t$this->version_no = $this->version_no + 1 ;\n\n\treturn true;\n}\n```\n\n\u7d50\u679c\uff1a\nstatic\u306a\u72b6\u614b\u3067fill\u3057\u3066update\u3057\u305f\u3089\u30fb\u30fb\u304a\u308f\u304b\u308a\u3067\u3059\u306d\u3002\n$this->version_no \u304c0\u306a\u306e\u3067\u3001\u4f55\u5ea6\u3084\u3063\u3066\u30821\u3067\u3059\u3002\u5931\u6557\u3002\n\n## \u8a66\u884c\u932f\u8aa4\u306e\u8a18\u9332\uff12\uff1a\u66f8\u3044\u3066\u307f\u308b\n\n```\nprotected function onUpdatingHander() {\n\n\t$user = Auth::->user();\n\t// \u66f4\u65b0\u30e6\u30fc\u30b6ID\u306e\u767b\u9332\n\tif (isset($user)) {\n\t\t$this->update_user_id = $user->id;\n\t} else {\n\t\t$this->update_user_id = 0;\n\t}\n\t// \u697d\u89b3\u6392\u4ed6\n\t$this->version_no =  'version_no + 1' ;\n\n\treturn true;\n}\n```\n\u7d50\u679c\uff1a\n\u5f53\u305f\u308a\u524d\u3067\u3059\u304c\u3001string\u3068\u3057\u3066\u8a55\u4fa1\u3055\u308c\u3066?\u3067\u7f6e\u63db\u3055\u308c\u305f\u306e\u3067\u3001\u5e38\u306b0\u3067\u3059\u3002\n\n## \u8a66\u884c\u932f\u8aa4\u306e\u8a18\u93323:\u30b3\u30fc\u30c9\u30ea\u30fc\u30c7\u30a3\u30f3\u30b0\u3057\u3066update\u30af\u30a8\u30ea\u751f\u6210\u7b87\u6240\u3092\u307f\u305f\n\n```Model.php\npublic function save(array $options = [])\n{\n    $query = $this->newQueryWithoutScopes();\n\n    // If the \"saving\" event returns false we'll bail out of the save and return\n    // false, indicating that the save failed. This provides a chance for any\n    // listeners to cancel save operations if validations fail or whatever.\n    if ($this->fireModelEvent('saving') === false) {\n        return false;\n    }\n\n    // If the model already exists in the database we can just update our record\n    // that is already in this database using the current IDs in this \"where\"\n    // clause to only update this model. Otherwise, we'll just insert them.\n    if ($this->exists) {\n        $saved = $this->performUpdate($query, $options);\n    }\n\n    // If the model is brand new, we'll insert it into our database and set the\n    // ID attribute on the model to the value of the newly inserted row's ID\n    // which is typically an auto-increment value managed by the database.\n    else {\n        $saved = $this->performInsert($query, $options);\n    }\n\n    if ($saved) {\n        $this->finishSave($options);\n    }\n\n    return $saved;\n}\n```\n\ncreate\u306b\u3057\u308dupdate\u306b\u3057\u308d\u3001\u3053\u306esave()\u30e1\u30bd\u30c3\u30c9\u3092\u901a\u308a\u3001\u5b9f\u969b\u306eupdate\u51e6\u7406\u90e8\u5206\u306f\n\n```Model.php\nprotected function performUpdate(Builder $query, array $options = [])\n{\n    $dirty = $this->getDirty();\n\n    if (count($dirty) > 0) {\n        // If the updating event returns false, we will cancel the update operation so\n        // developers can hook Validation systems into their models and cancel this\n        // operation if the model does not pass validation. Otherwise, we update.\n        if ($this->fireModelEvent('updating') === false) {\n            return false;\n        }\n\n        // First we need to create a fresh query instance and touch the creation and\n        // update timestamp on the model which are maintained by us for developer\n        // convenience. Then we will just continue saving the model instances.\n        if ($this->timestamps && Arr::get($options, 'timestamps', true)) {\n            $this->updateTimestamps();\n        }\n\n        // Once we have run the update operation, we will fire the \"updated\" event for\n        // this model instance. This will allow developers to hook into these after\n        // models are updated, giving them a chance to do any special processing.\n        $dirty = $this->getDirty();\n\n        if (count($dirty) > 0) {\n            $numRows = $this->setKeysForSaveQuery($query)->update($dirty);\n\n            $this->fireModelEvent('updated', false);\n        }\n    }\n\n    return true;\n}\n\n\n```\n\n\u3053\u3053\u3067\u3001\n\n\u3055\u3063\u304d\"updating\"\u30a4\u30d9\u30f3\u30c8\u306e\u30af\u30ed\u30fc\u30b8\u30e3\u306b\u8a2d\u5b9a\u3057\u305f\u30e1\u30bd\u30c3\u30c9\u3092\u5b9f\u884c\n\u2193\nEloquant\u898f\u5b9a\u306eupdated_at\u30ab\u30e9\u30e0\u306e\u8a2d\u5b9a\n\u2193\nupdate\u5b9f\u884c\n\u2193\nupdated\u30a4\u30d9\u30f3\u30c8\u306e\u5b9f\u884c\uff08\u4eca\u56de\u306f\u8a2d\u5b9a\u306a\u3057\uff09\n\n\u3068\u306a\u308b\u308f\u3051\u3067\u3001\u5b9f\u969b\u306bupdate\u6587\u3092\u7d44\u307f\u7acb\u3066\u3066\u3044\u308b\u3068\u3053\u308d\u3092\u63a2\u3059\u3002\n\u2192`$numRows = $this->setKeysForSaveQuery($query)->update($dirty);`\n\n\n```Illuminate\\Database\\Eloquant\\Builder.php\npublic function update(array $values)\n{\n    return $this->toBase()->update($this->addUpdatedAtColumn($values));\n}\n```\n\n```Illuminate\\Database\\Query\\Builder.php\npublic function update(array $values)\n{\n    $bindings = array_values(array_merge($values, $this->getBindings()));\n\n    $sql = $this->grammar->compileUpdate($this, $values);\n\n    return $this->connection->update($sql, $this->cleanBindings(\n        $this->grammar->prepareBindingsForUpdate($bindings, $values)\n    ));\n}\n```\n\n```Illuminate\\Database\\Query\\Grammars\\Grammar.php\npublic function compileUpdate(Builder $query, $values)\n{\n    $table = $this->wrapTable($query->from);\n\n    // Each one of the columns in the update statements needs to be wrapped in the\n    // keyword identifiers, also a place-holder needs to be created for each of\n    // the values in the list of bindings so we can make the sets statements.\n    $columns = [];\n\n    foreach ($values as $key => $value) {\n        $columns[] = $this->wrap($key).' = '.$this->parameter($value);\n    }\n\n    $columns = implode(', ', $columns);\n\n    // If the query has any \"join\" clauses, we will setup the joins on the builder\n    // and compile them so we can attach them to this update, as update queries\n    // can get join statements to attach to other tables when they're needed.\n    if (isset($query->joins)) {\n        $joins = ' '.$this->compileJoins($query, $query->joins);\n    } else {\n        $joins = '';\n    }\n\n    // Of course, update queries may also be constrained by where clauses so we'll\n    // need to compile the where clauses and attach it to the query so only the\n    // intended records are updated by the SQL statements we generate to run.\n    $where = $this->compileWheres($query);\n\n    return trim(\"update {$table}{$joins} set $columns $where\");\n}\n```\n\u3053\u3053\u306e\u3001\n`$columns[] = $this->wrap($key).' = '.$this->parameter($value);`\n\u3067SET\u90e8\u5206\u306e\u30af\u30a8\u30ea\u3092\u304f\u307f\u305f\u3066\u3066\u308b\u3002\n\n```\npublic function parameter($value)\n{\n    return $this->isExpression($value) ? $this->getValue($value) : '?';\n}\n\n```\n\n\u3068\u3044\u3046\u308f\u3051\u3067\u3001Expression\u578b\u306a\u3089\u307e\u3093\u307e\u30af\u30a8\u30ea\u306e\u4e00\u90e8\u3068\u8a55\u4fa1\u3057\u3066\u7e4b\u3052\u3066\u304f\u308c\u308b\u3053\u3068\u304c\u308f\u304b\u308a\u30b9\u30c3\u30ad\u30ea\uff01\n\n\n\n# \u4f59\u8ac7\n\n- \u697d\u89b3\u6392\u4ed6\u3068\u3057\u3066\u3001\u672c\u5f53\u306fupdate\u6642\u306bwhere\u53e5\u306bversion_no\u3092\u3044\u308c\u3066\u7d50\u679c\u6570\u3067\u5224\u5b9a\u3057\u305f\u304b\u3063\u305f\u3093\u3060\u3051\u3069\u3001\u7d50\u679c\u884c\u3092\u8fd4\u3057\u3066\u304f\u308c\u306a\u3044\u306e\u3067\u3001\u8ae6\u3081\u3066sharedLock()\u3067select\u3057\u3066\u3044\u308b\u3002\n- memo\u3057\u3066\u3042\u308b\u3051\u3069\u3001\u8ad6\u7406\u524a\u9664\uff1dsoftdelete\u306e\u6a5f\u69cb\u3092\u4f7f\u3046\u3068\u304d\u3001\u3053\u306esave\u306f\u901a\u3089\u306a\u3044\u306e\u3067\u3001\u6b8b\u5ff5\u306a\u304c\u3089SoftDeletes\u3092extend\u3057\u305ftrait\u3092\u7528\u610f\u3057\u3066\u3001runSoftDelete()\u3092\u540c\u69d8\u306bversion_no\u3092\u30bb\u30c3\u30c8\u3057\u3066\u3084\u308b\u3088\u3046\u306b\u81ea\u524d\u3067\u30aa\u30fc\u30d0\u30fc\u30e9\u30a4\u30c9\u3059\u308b\u5fc5\u8981\u3042\u308a\u3002\n\n\n\u3068\u308a\u3042\u3048\u305a\u3053\u3053\u307e\u3067\u3002\n\n\n", "tags": ["laravel5.2", "Eloquant"]}