{"tags": ["\u6700\u5c0f\u4e8c\u4e57\u6cd5", "OpenCV", "numpy"], "context": "\n\n\u66f4\u65b0\u5c65\u6b74\n\n(2016/09/25)\u601d\u3044\u3063\u304d\u308a\u30d7\u30ed\u30b0\u30e9\u30e0\u304c\u9593\u9055\u3063\u3066\u305f\u306e\u3067\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u3068\u5b9f\u9a13\u7d50\u679c\u3092\u4fee\u6b63\n\n\n\u306f\u3058\u3081\u306b\n\u3000\u6700\u5c0f\u4e8c\u4e57\u6cd5\u3068\u304b\u3067\u89b3\u6e2c\u30c7\u30fc\u30bf\u306b\u30e2\u30c7\u30eb\u30d5\u30a3\u30c3\u30c6\u30a3\u30f3\u30b0\u3057\u305f\u3044\u3068\u304d\u306b\u3001\u8aa4\u5dee\u306e\u5927\u304d\u3044\u89b3\u6e2c\u30c7\u30fc\u30bf\u306b\u5bfe\u3057\u3066\u306f\u91cd\u307f\u3092\u5c0f\u3055\u304f\u3059\u308b\u3088\u3046\u306a\u91cd\u307f\u4ed8\u304d\u6700\u5c0f\u4e8c\u4e57\u6cd5\u306e\u3072\u3068\u3064\u306bM\u63a8\u5b9a\u3068\u3044\u3046\u30c6\u30af\u30cb\u30c3\u30af\u304c\u3042\u308b\u3088\u3046\u3067\u3059\u3002\n\u3000\u3055\u3089\u306b\u3001M\u63a8\u5b9a\u306e\u4e2d\u306b\u3001Tukey\u306eBiweight\u63a8\u5b9a\uff08\u91cd\u307f\u306e\u8a2d\u5b9a\u306e\u4ed5\u65b9\u304cTukey\u306eBiweight\u578b\u3067\u3042\u308bM\u63a8\u5b9a\uff09\u3068\u3044\u3046\u30c6\u30af\u30cb\u30c3\u30af\u304c\u3042\u308b\u3088\u3046\u3067\u3059\u3002\n\u6709\u540d\u306a\u30c6\u30af\u30cb\u30c3\u30af\u306e\u3088\u3046\u3067\u3001\u65e2\u306b\u30cd\u30c3\u30c8\u4e0a\u3067\u3082\u591a\u304f\u306e\u89e3\u8aac\u8a18\u4e8b\u304c\u3042\u308a\u307e\u3059\u304c\u3001\u304a\u624b\u8efd\u306b\u8a66\u305b\u308b\u30b3\u30fc\u30c9\u3092\u898b\u3064\u3051\u3089\u308c\u306a\u304b\u3063\u305f\u306e\u3067\u3001\u8a66\u3057\u306b2\u6b21\u5143\u306e\u76f4\u7dda\u3092\u63a8\u5b9a\u3059\u308b\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u66f8\u3044\u3066\u307f\u307e\u3057\u305f\u3002\n\n\u554f\u984c\u8a2d\u5b9a\n2\u6b21\u5143\u306e\u753b\u50cf\u4e0a\u306e\u767d\u3044\u70b9\u7fa4\u306b\u5bfe\u3057\u3066\u76f4\u7dda\u3092\u30d5\u30a3\u30c3\u30c6\u30a3\u30f3\u30b0\u3059\u308b\u3002\u5148\u306b\u7d50\u679c\u3092\u8f09\u305b\u3066\u3057\u307e\u3044\u307e\u3059\u304c\u3001\u4ee5\u4e0b\u306e\u56f3\u306e\u767d\u3044\u70b9\u306b\u5bfe\u3057\u3066\u8d64\u3044\u7dda\u3092\u63a8\u5b9a\u3059\u308b\u554f\u984c\u3067\u3059\u3002\n\n\n\u51e6\u7406\u306e\u6d41\u308c\n\n\u91cd\u307f\u4fc2\u6570\u3092\u521d\u671f\u5316\n\u91cd\u307f\u4ed8\u304d\u6700\u5c0f\u4e8c\u4e57\n\u91cd\u307f\u4fc2\u6570\u3092\u66f4\u65b0\n1.\uff5e3.\u3092T\u56de\u7e70\u308a\u8fd4\u3059\n\n\u4ee5\u964d\u306b\u8a18\u8ff0\u3059\u308b\u30d7\u30ed\u30b0\u30e9\u30e0\u3067\u306f\u3001\u7e70\u308a\u8fd4\u3057\u56de\u6570T=3\u3068\u3057\u307e\u3057\u305f\u3002\u307e\u305f\u3001\u7e70\u308a\u8fd4\u3057\u51e6\u7406\u3092\u7d42\u4e86\u3059\u308b\u5224\u5b9a\u57fa\u6e96\u306b\u306f\u3001\u4ed6\u306b\u3082\u6b8b\u5dee\u3092\u898b\u305f\u308a\u8272\u3005\u3042\u308b\u3088\u3046\u3067\u3059\u3002\n\n\u5f0f\n\u76f4\u7dda\u306e\u5f0f\ny = ax + b\n$${y = ax + b\n}$$\n\u91cd\u307f\u4ed8\u304d\u6700\u5c0f\u4e8c\u4e57\u306e\u5f0f\n\\begin{pmatrix}\n\\sum_i w_i x_i^2 & \\sum_i w_i x_i \\\\\n\\sum_i w_i x_i   & \\sum_i w_i \n\\end{pmatrix}\n\\begin{pmatrix}\na \\\\\nb\n\\end{pmatrix}\n=\n\\begin{pmatrix}\n\\sum_i w_i x_i y_i \\\\\n\\sum_i w_i y_i   \n\\end{pmatrix}\n$${\\begin{pmatrix}\n\\sum_i w_i x_i^2 & \\sum_i w_i x_i \\\\\n\\sum_i w_i x_i   & \\sum_i w_i \n\\end{pmatrix}\n\\begin{pmatrix}\na \\\\\nb\n\\end{pmatrix}\n=\n\\begin{pmatrix}\n\\sum_i w_i x_i y_i \\\\\n\\sum_i w_i y_i   \n\\end{pmatrix}\n}$$\nx\u3001y \u306f\u305d\u308c\u305e\u308c\u30b5\u30f3\u30d7\u30eb\u70b9\u306e\u5ea7\u6a19\u5024\u3067\u3059\u3002w\u306f\u91cd\u307f\u4fc2\u6570\u3067\u3059\u3002a\u3001b\u306f\u76f4\u7dda\u306e\u65b9\u7a0b\u5f0f\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u30fc\u3067\u50be\u304d\u3068y\u5207\u7247\u3067\u3059\u3002\u3053\u306ea\u3068b\u304c\u63a8\u5b9a\u3055\u308c\u307e\u3059\u3002\n\u91cd\u307f\u4fc2\u6570\u306e\u66f4\u65b0\u5f0f\n{w_i = \\left\\{\n\\begin{array}{ll}\n\\bigl\\{ 1 - (\\frac{d_i}{c})^2 \\bigr\\} ^2 & (d_i \\leq c)\\\\\n0 & (d_i \\gt c)\n\\end{array}\n\\right.\n}\n$${{w_i = \\left\\{\n\\begin{array}{ll}\n\\bigl\\{ 1 - (\\frac{d_i}{c})^2 \\bigr\\} ^2 & (d_i \\leq c)\\\\\n0 & (d_i \\gt c)\n\\end{array}\n\\right.\n}\n}$$\n\u3053\u3053\u3067\u3001\nd_i = |y_i - (a x_i + b)|\n$${d_i = |y_i - (a x_i + b)|\n}$$\n\u306f\u3001\u63a8\u5b9a\u76f4\u7dda\u3068\u30b5\u30f3\u30d7\u30eb\u70b9\u306e\u5dee\u3067\u3059\u3002c\u306f\u30b5\u30f3\u30d7\u30eb\u70b9\u306e\u8aa4\u5dee\u306b\u95a2\u3059\u308b\u95be\u5024\u3067\u3059\u3002\u5916\u308c\u70b9\u306e\u5f71\u97ff\u3092\u7121\u304f\u3059\u52b9\u679c\u304c\u3042\u308b\u3068\u601d\u3044\u307e\u3059\u3002\n\u203bd\u2266c \u306e\u3068\u304d\u306e\u91cd\u307f\u4fc2\u6570\u306e\u66f4\u65b0\u5f0f\u306b2\u4e57\u304c2\u3064\u3042\u308a\u307e\u3059\u304c\u3001\u6700\u521d\u3001\u5916\u5074\u306e2\u4e57\u3092\u5fd8\u308c\u3066\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u5b9f\u88c5\u3057\u3066\u3057\u307e\u3044\u307e\u3057\u305f\u3002\u3057\u304b\u3057\u3001\u305d\u308c\u3067\u3082\u3046\u307e\u304f\u63a8\u5b9a\u3067\u304d\u307e\u3057\u305f\u3002\u66f4\u65b0\u5f0f\u306e\u80cc\u666f\u306b\u3042\u308b\u7406\u8ad6\u3092\u3057\u3063\u304b\u308a\u7406\u89e3\u3057\u3066\u3044\u306a\u3044\u306e\u3067\u3001\u9055\u3044\u304c\u826f\u304f\u5206\u304b\u3063\u3066\u3044\u307e\u305b\u3093\u3002\n\n\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u3068\u30c7\u30fc\u30bf\n\u30bd\u30fc\u30b9\u306fc++\u3068python\u305d\u308c\u305e\u308c\u3067\u66f8\u3044\u3066\u307f\u307e\u3057\u305f\u3002\n\n\u5165\u529b\u753b\u50cf\n\u5165\u529b\u753b\u50cf\uff08pts.png\uff09\u306f\u4ee5\u4e0b\u3067\u3059\u3002\n\n\n\u30bd\u30fc\u30b9(c++)\n#include \"opencv2\\opencv.hpp\"\n\nusing namespace cv;\n\nint main(int argc, char* argv[])\n{\n    // \u70b9\u60c5\u5831\u5165\u529b\n    const Mat1b im = imread(\"pts.png\", 0);\n\n    vector<Point> pts;\n    cv::findNonZero(im, pts);\n\n    // \u91cd\u307f\u4fc2\u6570\u306e\u521d\u671f\u5316\n    vector<double> weight(pts.size(), 1.0);\n\n    const int    T = 3; // \u6700\u5927\u7e70\u308a\u8fd4\u3057\u56de\u6570\n    const double c = 20;\n    int t = 0;\n\n    while (t < T) {\n\n        // \u91cd\u307f\u4ed8\u304d\u6700\u5c0f\u4e8c\u4e57\n        Mat1d A = Mat1d::zeros(2, 2);\n        Mat1d b = Mat1d::zeros(2, 1);\n        for (size_t p = 0; p < pts.size(); ++p){\n            double w = weight[p];\n            A(0, 0) += w * pts[p].x * pts[p].x;\n            A(1, 0) += w * pts[p].x;\n            A(1, 1) += w;\n            b(0, 0) += w * pts[p].x * pts[p].y;\n            b(1, 0) += w * pts[p].y;\n        }\n        A(0, 1) = A(1, 0);\n\n        Mat1d x;\n        cv::solve(A, b, x);\n\n        // \u63a8\u5b9a\u76f4\u7dda\u3092\u63cf\u753b\n        Point start(0, int(x(1, 0) + 0.5));\n        Point end(im.cols - 1, int(x(0, 0) * (im.cols - 1) + x(1, 0) + 0.5));\n        Mat plot_im = imread(\"pts.png\");\n        cv::line(plot_im, start, end, Scalar(0, 0, 255));\n        imwrite(format(\"plot_itr%02d.png\", t), plot_im);\n\n        // \u91cd\u307f\u306e\u66f4\u65b0      \n        for (size_t p = 0; p < pts.size(); ++p){\n            double dif = fabs( pts[p].y - (x(0, 0) * pts[p].x + x(1, 0))); // dif = |y - (ax + b)|\n            weight[p] = (dif > c) ? 0.0 : pow(1.0 - (dif / c) * (dif / c), 2);\n        }\n\n        ++t;\n    }\n    return 0;\n}\n\n\n\u30bd\u30fc\u30b9(python)\nimport numpy as np\nimport cv2\n\nim = cv2.imread('pts.png', 0)\n\ny, x = np.where(im)\nweight = np.ones((len(x)))\n\nT = 3\nc = 20.0\n\nt = 0\nwhile t < T:\n    A = np.zeros((2,2))\n    b = np.zeros((2))\n    A[0,0] = np.sum(weight * x * x)\n    A[1,0] = np.sum(weight * x)\n    A[0,1] = A[1,0]\n    A[1,1] = np.sum(weight)\n    b[0]   = np.sum(weight * x * y)\n    b[1]   = np.sum(weight * y)\n\n    coef = np.linalg.solve(A, b)\n\n    # Plot the estimated line\n    start_x = 0\n    start_y = int(coef[0] * start_x + coef[1] + 0.5)# y = ax + b\n    end_x   = im.shape[1] - 1\n    end_y   = int(coef[0] * end_x + coef[1] + 0.5)# y = ax + b\n\n    plot_im = cv2.imread('pts.png')    \n    cv2.line(plot_im,(start_x, start_y),(end_x, end_y),(0,0,255),1)\n    cv2.imwrite('plot_itr{}.png'.format(t), plot_im)\n\n    # Update weights\n    dif                     = np.abs(y - (coef[0] * x + coef[1]))\n    outlier_indices         = np.where(dif > c)\n    inlier_indices          = np.where(dif <= c)\n    weight[outlier_indices] = 0.0\n    weight[inlier_indices]  = (1.0 - (dif[inlier_indices] / c) ** 2) ** 2\n\n    t += 1\n\n\u5b9f\u884c\u3059\u308b\u3068\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u30d5\u30a3\u30c3\u30c6\u30a3\u30f3\u30b0\u7d50\u679c\u753b\u50cf\u304c\u51fa\u529b\u3055\u308c\u307e\u3059\u3002\n\u7e70\u308a\u8fd4\u3057\u51e6\u7406\u306e1\u56de\u76ee\u306e\u63a8\u5b9a\u7d50\u679c\n\n\u7e70\u308a\u8fd4\u3057\u51e6\u7406\u306e2\u56de\u76ee\u306e\u63a8\u5b9a\u7d50\u679c\n\n\u7e70\u308a\u8fd4\u3057\u51e6\u7406\u306e3\u56de\u76ee\u306e\u63a8\u5b9a\u7d50\u679c\n\n\u306a\u3093\u304b\u3046\u307e\u304f\u3044\u3063\u3066\u3044\u308b\u3088\u3046\u306b\u898b\u3048\u307e\u3059\u306d\uff1f\n\u3068\u3044\u3046\u304b\u3001\u3046\u307e\u304f\u3044\u304f\u3088\u3046\u306bc\uff08\u91cd\u307f\u4fc2\u6570\u3092\u66f4\u65b0\u3059\u308b\u3068\u304d\u306b\u4f7f\u3046\u30d1\u30e9\u30e1\u30fc\u30bf\u30fc\uff09\u3092\u8a2d\u5b9a\u3057\u305f\u304b\u3089\u3067\u3059\u304c\u3002\u3002\u3002c\u3092\u5c0f\u3055\u3044\u5024\u306b\u3057\u305f\u3089\u3001\u91cd\u307f\u4fc2\u6570\u304c\u66f4\u65b0\u6642\u306b\u5168\u90e8\u30bc\u30ed\u306b\u306a\u308a\u307e\u3057\u305f\u3002Tukey\u306eBiweight\u63a8\u5b9a\u6cd5\u306b\u3064\u3044\u3066\u3001\u6839\u672c\u7684\u306b\u52d8\u9055\u3044\u3057\u3066\u3044\u308b\u53ef\u80fd\u6027\u304c\u3042\u308b\u304b\u3082\uff1f\n# \u66f4\u65b0\u5c65\u6b74\n\n- (2016/09/25)\u601d\u3044\u3063\u304d\u308a\u30d7\u30ed\u30b0\u30e9\u30e0\u304c\u9593\u9055\u3063\u3066\u305f\u306e\u3067\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u3068\u5b9f\u9a13\u7d50\u679c\u3092\u4fee\u6b63\n\n\n# \u306f\u3058\u3081\u306b\n\n\u3000\u6700\u5c0f\u4e8c\u4e57\u6cd5\u3068\u304b\u3067\u89b3\u6e2c\u30c7\u30fc\u30bf\u306b\u30e2\u30c7\u30eb\u30d5\u30a3\u30c3\u30c6\u30a3\u30f3\u30b0\u3057\u305f\u3044\u3068\u304d\u306b\u3001\u8aa4\u5dee\u306e\u5927\u304d\u3044\u89b3\u6e2c\u30c7\u30fc\u30bf\u306b\u5bfe\u3057\u3066\u306f\u91cd\u307f\u3092\u5c0f\u3055\u304f\u3059\u308b\u3088\u3046\u306a\u91cd\u307f\u4ed8\u304d\u6700\u5c0f\u4e8c\u4e57\u6cd5\u306e\u3072\u3068\u3064\u306bM\u63a8\u5b9a\u3068\u3044\u3046\u30c6\u30af\u30cb\u30c3\u30af\u304c\u3042\u308b\u3088\u3046\u3067\u3059\u3002\n\u3000\u3055\u3089\u306b\u3001M\u63a8\u5b9a\u306e\u4e2d\u306b\u3001Tukey\u306eBiweight\u63a8\u5b9a\uff08\u91cd\u307f\u306e\u8a2d\u5b9a\u306e\u4ed5\u65b9\u304cTukey\u306eBiweight\u578b\u3067\u3042\u308bM\u63a8\u5b9a\uff09\u3068\u3044\u3046\u30c6\u30af\u30cb\u30c3\u30af\u304c\u3042\u308b\u3088\u3046\u3067\u3059\u3002\n\n\u6709\u540d\u306a\u30c6\u30af\u30cb\u30c3\u30af\u306e\u3088\u3046\u3067\u3001\u65e2\u306b\u30cd\u30c3\u30c8\u4e0a\u3067\u3082\u591a\u304f\u306e\u89e3\u8aac\u8a18\u4e8b\u304c\u3042\u308a\u307e\u3059\u304c\u3001\u304a\u624b\u8efd\u306b\u8a66\u305b\u308b\u30b3\u30fc\u30c9\u3092\u898b\u3064\u3051\u3089\u308c\u306a\u304b\u3063\u305f\u306e\u3067\u3001\u8a66\u3057\u306b2\u6b21\u5143\u306e\u76f4\u7dda\u3092\u63a8\u5b9a\u3059\u308b\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u66f8\u3044\u3066\u307f\u307e\u3057\u305f\u3002\n\n# \u554f\u984c\u8a2d\u5b9a\n2\u6b21\u5143\u306e\u753b\u50cf\u4e0a\u306e\u767d\u3044\u70b9\u7fa4\u306b\u5bfe\u3057\u3066\u76f4\u7dda\u3092\u30d5\u30a3\u30c3\u30c6\u30a3\u30f3\u30b0\u3059\u308b\u3002\u5148\u306b\u7d50\u679c\u3092\u8f09\u305b\u3066\u3057\u307e\u3044\u307e\u3059\u304c\u3001\u4ee5\u4e0b\u306e\u56f3\u306e\u767d\u3044\u70b9\u306b\u5bfe\u3057\u3066\u8d64\u3044\u7dda\u3092\u63a8\u5b9a\u3059\u308b\u554f\u984c\u3067\u3059\u3002\n![plot_itr02.png](https://qiita-image-store.s3.amazonaws.com/0/122887/0be58097-a775-5202-16ba-b557db43e843.png)\n\n\n\n# \u51e6\u7406\u306e\u6d41\u308c\n1. \u91cd\u307f\u4fc2\u6570\u3092\u521d\u671f\u5316\n2. \u91cd\u307f\u4ed8\u304d\u6700\u5c0f\u4e8c\u4e57\n3. \u91cd\u307f\u4fc2\u6570\u3092\u66f4\u65b0\n4. 1.\uff5e3.\u3092T\u56de\u7e70\u308a\u8fd4\u3059\n\n\u4ee5\u964d\u306b\u8a18\u8ff0\u3059\u308b\u30d7\u30ed\u30b0\u30e9\u30e0\u3067\u306f\u3001\u7e70\u308a\u8fd4\u3057\u56de\u6570T=3\u3068\u3057\u307e\u3057\u305f\u3002\u307e\u305f\u3001\u7e70\u308a\u8fd4\u3057\u51e6\u7406\u3092\u7d42\u4e86\u3059\u308b\u5224\u5b9a\u57fa\u6e96\u306b\u306f\u3001\u4ed6\u306b\u3082\u6b8b\u5dee\u3092\u898b\u305f\u308a\u8272\u3005\u3042\u308b\u3088\u3046\u3067\u3059\u3002\n\n# \u5f0f\n\n\u76f4\u7dda\u306e\u5f0f\n\n```math\ny = ax + b\n```\n\u91cd\u307f\u4ed8\u304d\u6700\u5c0f\u4e8c\u4e57\u306e\u5f0f\n\n```math\n\\begin{pmatrix}\n\\sum_i w_i x_i^2 & \\sum_i w_i x_i \\\\\n\\sum_i w_i x_i   & \\sum_i w_i \n\\end{pmatrix}\n\\begin{pmatrix}\na \\\\\nb\n\\end{pmatrix}\n=\n\\begin{pmatrix}\n\\sum_i w_i x_i y_i \\\\\n\\sum_i w_i y_i   \n\\end{pmatrix}\n```\n\nx\u3001y \u306f\u305d\u308c\u305e\u308c\u30b5\u30f3\u30d7\u30eb\u70b9\u306e\u5ea7\u6a19\u5024\u3067\u3059\u3002w\u306f\u91cd\u307f\u4fc2\u6570\u3067\u3059\u3002a\u3001b\u306f\u76f4\u7dda\u306e\u65b9\u7a0b\u5f0f\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u30fc\u3067\u50be\u304d\u3068y\u5207\u7247\u3067\u3059\u3002\u3053\u306ea\u3068b\u304c\u63a8\u5b9a\u3055\u308c\u307e\u3059\u3002\n\n\u91cd\u307f\u4fc2\u6570\u306e\u66f4\u65b0\u5f0f\n\n```math\n{w_i = \\left\\{\n\\begin{array}{ll}\n\\bigl\\{ 1 - (\\frac{d_i}{c})^2 \\bigr\\} ^2 & (d_i \\leq c)\\\\\n0 & (d_i \\gt c)\n\\end{array}\n\\right.\n}\n```\n\n\u3053\u3053\u3067\u3001\n\n```math\nd_i = |y_i - (a x_i + b)|\n```\n\n\u306f\u3001\u63a8\u5b9a\u76f4\u7dda\u3068\u30b5\u30f3\u30d7\u30eb\u70b9\u306e\u5dee\u3067\u3059\u3002c\u306f\u30b5\u30f3\u30d7\u30eb\u70b9\u306e\u8aa4\u5dee\u306b\u95a2\u3059\u308b\u95be\u5024\u3067\u3059\u3002\u5916\u308c\u70b9\u306e\u5f71\u97ff\u3092\u7121\u304f\u3059\u52b9\u679c\u304c\u3042\u308b\u3068\u601d\u3044\u307e\u3059\u3002\n\u203bd\u2266c \u306e\u3068\u304d\u306e\u91cd\u307f\u4fc2\u6570\u306e\u66f4\u65b0\u5f0f\u306b2\u4e57\u304c2\u3064\u3042\u308a\u307e\u3059\u304c\u3001\u6700\u521d\u3001\u5916\u5074\u306e2\u4e57\u3092\u5fd8\u308c\u3066\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u5b9f\u88c5\u3057\u3066\u3057\u307e\u3044\u307e\u3057\u305f\u3002\u3057\u304b\u3057\u3001\u305d\u308c\u3067\u3082\u3046\u307e\u304f\u63a8\u5b9a\u3067\u304d\u307e\u3057\u305f\u3002\u66f4\u65b0\u5f0f\u306e\u80cc\u666f\u306b\u3042\u308b\u7406\u8ad6\u3092\u3057\u3063\u304b\u308a\u7406\u89e3\u3057\u3066\u3044\u306a\u3044\u306e\u3067\u3001\u9055\u3044\u304c\u826f\u304f\u5206\u304b\u3063\u3066\u3044\u307e\u305b\u3093\u3002\n\n# \u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u3068\u30c7\u30fc\u30bf\n\u30bd\u30fc\u30b9\u306fc++\u3068python\u305d\u308c\u305e\u308c\u3067\u66f8\u3044\u3066\u307f\u307e\u3057\u305f\u3002\n\n## \u5165\u529b\u753b\u50cf\n\n\u5165\u529b\u753b\u50cf\uff08pts.png\uff09\u306f\u4ee5\u4e0b\u3067\u3059\u3002\n![pts.png](https://qiita-image-store.s3.amazonaws.com/0/122887/d4b72931-983c-900a-afc7-2a6ba58e7dc0.png)\n\n\n\n\n\n## \u30bd\u30fc\u30b9(c++)\n\n```cpp\n#include \"opencv2\\opencv.hpp\"\n\nusing namespace cv;\n\nint main(int argc, char* argv[])\n{\n\t// \u70b9\u60c5\u5831\u5165\u529b\n\tconst Mat1b im = imread(\"pts.png\", 0);\n\t\t\n\tvector<Point> pts;\n\tcv::findNonZero(im, pts);\n\n\t// \u91cd\u307f\u4fc2\u6570\u306e\u521d\u671f\u5316\n\tvector<double> weight(pts.size(), 1.0);\n\n\tconst int    T = 3;\t// \u6700\u5927\u7e70\u308a\u8fd4\u3057\u56de\u6570\n\tconst double c = 20;\n\tint t = 0;\n\n\twhile (t < T) {\n\t\n\t\t// \u91cd\u307f\u4ed8\u304d\u6700\u5c0f\u4e8c\u4e57\n\t\tMat1d A = Mat1d::zeros(2, 2);\n\t\tMat1d b = Mat1d::zeros(2, 1);\n\t\tfor (size_t p = 0; p < pts.size(); ++p){\n\t\t\tdouble w = weight[p];\n\t\t\tA(0, 0) += w * pts[p].x * pts[p].x;\n\t\t\tA(1, 0) += w * pts[p].x;\n\t\t\tA(1, 1) += w;\n\t\t\tb(0, 0) += w * pts[p].x * pts[p].y;\n\t\t\tb(1, 0) += w * pts[p].y;\n\t\t}\n\t\tA(0, 1) = A(1, 0);\n\n\t\tMat1d x;\n\t\tcv::solve(A, b, x);\n\n\t\t// \u63a8\u5b9a\u76f4\u7dda\u3092\u63cf\u753b\n\t\tPoint start(0, int(x(1, 0) + 0.5));\n\t\tPoint end(im.cols - 1, int(x(0, 0) * (im.cols - 1) + x(1, 0) + 0.5));\n\t\tMat plot_im = imread(\"pts.png\");\n\t\tcv::line(plot_im, start, end, Scalar(0, 0, 255));\n\t\timwrite(format(\"plot_itr%02d.png\", t), plot_im);\n\n\t\t// \u91cd\u307f\u306e\u66f4\u65b0\t\t\n\t\tfor (size_t p = 0; p < pts.size(); ++p){\n\t\t\tdouble dif = fabs( pts[p].y - (x(0, 0) * pts[p].x + x(1, 0))); // dif = |y - (ax + b)|\n\t\t\tweight[p] = (dif > c) ? 0.0 : pow(1.0 - (dif / c) * (dif / c), 2);\n\t\t}\n\n\t\t++t;\n\t}\n\treturn 0;\n}\n```\n\n\n## \u30bd\u30fc\u30b9(python)\n\n```py\nimport numpy as np\nimport cv2\n\nim = cv2.imread('pts.png', 0)\n\ny, x = np.where(im)\nweight = np.ones((len(x)))\n\nT = 3\nc = 20.0\n\nt = 0\nwhile t < T:\n    A = np.zeros((2,2))\n    b = np.zeros((2))\n    A[0,0] = np.sum(weight * x * x)\n    A[1,0] = np.sum(weight * x)\n    A[0,1] = A[1,0]\n    A[1,1] = np.sum(weight)\n    b[0]   = np.sum(weight * x * y)\n    b[1]   = np.sum(weight * y)\n    \n    coef = np.linalg.solve(A, b)\n\n    # Plot the estimated line\n    start_x = 0\n    start_y = int(coef[0] * start_x + coef[1] + 0.5)# y = ax + b\n    end_x   = im.shape[1] - 1\n    end_y   = int(coef[0] * end_x + coef[1] + 0.5)# y = ax + b\n    \n    plot_im = cv2.imread('pts.png')    \n    cv2.line(plot_im,(start_x, start_y),(end_x, end_y),(0,0,255),1)\n    cv2.imwrite('plot_itr{}.png'.format(t), plot_im)\n    \n    # Update weights\n    dif                     = np.abs(y - (coef[0] * x + coef[1]))\n    outlier_indices         = np.where(dif > c)\n    inlier_indices          = np.where(dif <= c)\n    weight[outlier_indices] = 0.0\n    weight[inlier_indices]  = (1.0 - (dif[inlier_indices] / c) ** 2) ** 2\n    \n    t += 1\n```\n\n\n\u5b9f\u884c\u3059\u308b\u3068\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u30d5\u30a3\u30c3\u30c6\u30a3\u30f3\u30b0\u7d50\u679c\u753b\u50cf\u304c\u51fa\u529b\u3055\u308c\u307e\u3059\u3002\n\n\u7e70\u308a\u8fd4\u3057\u51e6\u7406\u306e1\u56de\u76ee\u306e\u63a8\u5b9a\u7d50\u679c\n![plot_itr00.png](https://qiita-image-store.s3.amazonaws.com/0/122887/7cd134fa-c83c-856d-036f-9db11c93352e.png)\n\n\n\u7e70\u308a\u8fd4\u3057\u51e6\u7406\u306e2\u56de\u76ee\u306e\u63a8\u5b9a\u7d50\u679c\n![plot_itr01.png](https://qiita-image-store.s3.amazonaws.com/0/122887/fb669a0c-4fda-7886-8cf5-64ad0bc36f52.png)\n\n\n\u7e70\u308a\u8fd4\u3057\u51e6\u7406\u306e3\u56de\u76ee\u306e\u63a8\u5b9a\u7d50\u679c\n![plot_itr02.png](https://qiita-image-store.s3.amazonaws.com/0/122887/0be58097-a775-5202-16ba-b557db43e843.png)\n\n\n\u306a\u3093\u304b\u3046\u307e\u304f\u3044\u3063\u3066\u3044\u308b\u3088\u3046\u306b\u898b\u3048\u307e\u3059\u306d\uff1f\n\u3068\u3044\u3046\u304b\u3001\u3046\u307e\u304f\u3044\u304f\u3088\u3046\u306bc\uff08\u91cd\u307f\u4fc2\u6570\u3092\u66f4\u65b0\u3059\u308b\u3068\u304d\u306b\u4f7f\u3046\u30d1\u30e9\u30e1\u30fc\u30bf\u30fc\uff09\u3092\u8a2d\u5b9a\u3057\u305f\u304b\u3089\u3067\u3059\u304c\u3002\u3002\u3002c\u3092\u5c0f\u3055\u3044\u5024\u306b\u3057\u305f\u3089\u3001\u91cd\u307f\u4fc2\u6570\u304c\u66f4\u65b0\u6642\u306b\u5168\u90e8\u30bc\u30ed\u306b\u306a\u308a\u307e\u3057\u305f\u3002Tukey\u306eBiweight\u63a8\u5b9a\u6cd5\u306b\u3064\u3044\u3066\u3001\u6839\u672c\u7684\u306b\u52d8\u9055\u3044\u3057\u3066\u3044\u308b\u53ef\u80fd\u6027\u304c\u3042\u308b\u304b\u3082\uff1f\n"}