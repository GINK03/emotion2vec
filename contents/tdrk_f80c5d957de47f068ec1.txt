{"tags": ["\u81ea\u7136\u8a00\u8a9e\u51e6\u7406", "Python", "NLP"], "context": " More than 1 year has passed since last update.\u7b2c5\u7ae0\u306e\u524d\u534a\u306e\u554f\u984c\u3092\u89e3\u3044\u305f\u8a18\u9332\u3002\n\u5bfe\u8c61\u3068\u3059\u308b\u30d5\u30a1\u30a4\u30eb\u306fweb\u30da\u30fc\u30b8\u306b\u3082\u3042\u308b\u901a\u308a\u3001neko.txt\u3068\u3059\u308b\u3002\n\n\u590f\u76ee\u6f31\u77f3\u306e\u5c0f\u8aac\u300e\u543e\u8f29\u306f\u732b\u3067\u3042\u308b\u300f\u306e\u6587\u7ae0\uff08neko.txt\uff09\u3092CaboCha\u3092\u4f7f\u3063\u3066\u4fc2\u308a\u53d7\u3051\u89e3\u6790\u3057\uff0c\u305d\u306e\u7d50\u679c\u3092neko.txt.cabocha\u3068\u3044\u3046\u30d5\u30a1\u30a4\u30eb\u306b\u4fdd\u5b58\u305b\u3088\uff0e\u3053\u306e\u30d5\u30a1\u30a4\u30eb\u3092\u7528\u3044\u3066\uff0c\u4ee5\u4e0b\u306e\u554f\u306b\u5bfe\u5fdc\u3059\u308b\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u5b9f\u88c5\u305b\u3088\uff0e\n\n\n 40. \u4fc2\u308a\u53d7\u3051\u89e3\u6790\u7d50\u679c\u306e\u8aad\u307f\u8fbc\u307f\uff08\u5f62\u614b\u7d20\uff09\n\n\u5f62\u614b\u7d20\u3092\u8868\u3059\u30af\u30e9\u30b9Morph\u3092\u5b9f\u88c5\u305b\u3088\uff0e\u3053\u306e\u30af\u30e9\u30b9\u306f\u8868\u5c64\u5f62\uff08surface\uff09\uff0c\u57fa\u672c\u5f62\uff08base\uff09\uff0c\u54c1\u8a5e\uff08pos\uff09\uff0c\u54c1\u8a5e\u7d30\u5206\u985e1\uff08pos1\uff09\u3092\u30e1\u30f3\u30d0\u5909\u6570\u306b\u6301\u3064\u3053\u3068\u3068\u3059\u308b\uff0e\u3055\u3089\u306b\uff0cCaboCha\u306e\u89e3\u6790\u7d50\u679c\uff08neko.txt.cabocha\uff09\u3092\u8aad\u307f\u8fbc\u307f\uff0c\u5404\u6587\u3092Morph\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u30ea\u30b9\u30c8\u3068\u3057\u3066\u8868\u73fe\u3057\uff0c3\u6587\u76ee\u306e\u5f62\u614b\u7d20\u5217\u3092\u8868\u793a\u305b\u3088\uff0e\n\n# -*- coding: utf-8 -*-\n__author__ = 'todoroki'\n\nclass Morph():\n    def __init__(self, surface, base, pos, pos1):\n        self.surface = surface\n        self.base = base\n        self.pos = pos\n        self.pos1 = pos1\n\n    def print_all(self):\n        return self.surface + \"\\t\" + self.base + \", \" + self.pos + \", \" + self.pos1\n\ndef read_morpheme(cabochafile):\n    sentences = []\n    sentence = []\n    for line in cabochafile:\n        if line == \"EOS\\n\":\n            # if len(sentence) > 0:\n            #     sentences.append(sentence)\n            sentences.append(sentence)\n            sentence = []\n        elif line[0] == \"*\":\n            continue\n        else:\n            surface, other = line.split()\n            others = other.split(\",\")\n            base, pos, pos1 = others[6], others[0], others[1]\n            morph = Morph(surface, base, pos, pos1)\n            sentence.append(morph)\n    return sentences\n\nif __name__ == \"__main__\":\n    f = open(\"neko.txt.cabocha\", \"r\")\n    sentences = read_morpheme(f)\n    for morph in sentences[2]:\n        print morph.print_all()\n    f.close()\n\n\n 41. \u4fc2\u308a\u53d7\u3051\u89e3\u6790\u7d50\u679c\u306e\u8aad\u307f\u8fbc\u307f\uff08\u6587\u7bc0\u30fb\u4fc2\u308a\u53d7\u3051\uff09\n\n40\u306b\u52a0\u3048\u3066\uff0c\u6587\u7bc0\u3092\u8868\u3059\u30af\u30e9\u30b9Chunk\u3092\u5b9f\u88c5\u305b\u3088\uff0e\u3053\u306e\u30af\u30e9\u30b9\u306f\u5f62\u614b\u7d20\uff08Morph\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\uff09\u306e\u30ea\u30b9\u30c8\uff08morphs\uff09\uff0c\u4fc2\u308a\u5148\u6587\u7bc0\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u756a\u53f7\uff08dst\uff09\uff0c\u4fc2\u308a\u5143\u6587\u7bc0\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u756a\u53f7\u306e\u30ea\u30b9\u30c8\uff08srcs\uff09\u3092\u30e1\u30f3\u30d0\u5909\u6570\u306b\u6301\u3064\u3053\u3068\u3068\u3059\u308b\uff0e\u3055\u3089\u306b\uff0c\u5165\u529b\u30c6\u30ad\u30b9\u30c8\u306eCaboCha\u306e\u89e3\u6790\u7d50\u679c\u3092\u8aad\u307f\u8fbc\u307f\uff0c\uff11\u6587\u3092Chunk\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u30ea\u30b9\u30c8\u3068\u3057\u3066\u8868\u73fe\u3057\uff0c8\u6587\u76ee\u306e\u6587\u7bc0\u306e\u6587\u5b57\u5217\u3068\u4fc2\u308a\u5148\u3092\u8868\u793a\u305b\u3088\uff0e\u7b2c5\u7ae0\u306e\u6b8b\u308a\u306e\u554f\u984c\u3067\u306f\uff0c\u3053\u3053\u3067\u4f5c\u3063\u305f\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u6d3b\u7528\u305b\u3088\uff0e\n\n# -*- coding: utf-8 -*-\n__author__ = 'todoroki'\n\nimport problem40\n\n\nclass Chunk():\n    def __init__(self):\n        self.morphs = []\n        self.dst = -1\n        self.srcs = []\n\n    def __repr__(self):\n        if self.morphs:\n            surfs = [morph.surface for morph in self.morphs if morph.pos != '\u8a18\u53f7']\n            return \"\".join(surfs)\n\n    def include_pos(self, pos):\n        return pos in [morph.pos for morph in self.morphs]\n\n    def morphs_of_pos(self, pos):\n        return [morph for morph in self.morphs if morph.pos == pos]\n\n    def morphs_of_pos1(self, pos1):\n        return [morph for morph in self.morphs if morph.pos1 == pos1]\n\n\ndef read_chunk(cabochafile):\n    sentences = []\n    sentence = []\n    for line in cabochafile:\n        if line == \"EOS\\n\":\n            for idx, c in enumerate(sentence[:-1]):\n                if c.dst != -1:\n                    sentence[c.dst].srcs.append(idx)\n            # if len(sentence) > 1:\n                # sentences.append(sentence)\n            sentences.append(sentence)\n            sentence = []\n        elif line[0] == \"*\":\n            chunk = Chunk()\n            chunk.dst = int(line.split()[2].strip(\"D\"))\n            sentence.append(chunk)\n        else:\n            surface, other = line.split()\n            others = other.split(\",\")\n            base, pos, pos1 = others[6], others[0], others[1]\n            morph = problem40.Morph(surface, base, pos, pos1)\n            sentence[-1].morphs.append(morph)\n    return sentences\n\n\nif __name__ == \"__main__\":\n    f = open(\"neko.txt.cabocha\", \"r\")\n    sentences = read_chunk(f)\n    for idx, chnk in enumerate(sentences[7]):\n        surfaces = \"\"\n        for mrph in chnk.morphs:\n            surfaces += mrph.surface\n        print \"%d\" % idx, surfaces, \"=>\", chnk.dst\n    f.close()\n\n\n 42. \u4fc2\u308a\u5143\u3068\u4fc2\u308a\u5148\u306e\u6587\u7bc0\u306e\u8868\u793a\n\n\u4fc2\u308a\u5143\u306e\u6587\u7bc0\u3068\u4fc2\u308a\u5148\u306e\u6587\u7bc0\u306e\u30c6\u30ad\u30b9\u30c8\u3092\u30bf\u30d6\u533a\u5207\u308a\u5f62\u5f0f\u3067\u3059\u3079\u3066\u62bd\u51fa\u305b\u3088\uff0e\u305f\u3060\u3057\uff0c\u53e5\u8aad\u70b9\u306a\u3069\u306e\u8a18\u53f7\u306f\u51fa\u529b\u3057\u306a\u3044\u3088\u3046\u306b\u305b\u3088\uff0e\n\n# -*- coding: utf-8 -*-\n__author__ = 'todoroki'\n\nimport problem41\n\ndef make_chunk_pair(sentence):\n    pairs = []\n    for chunk in sentence:\n        if chunk.dst != -1:\n            pairs.append((chunk, sentence[chunk.dst]))\n    return pairs\n\nif __name__ == \"__main__\":\n    f = open(\"neko.txt.cabocha\")\n    sentences = problem41.read_chunk(f)\n    pair_sentences = []\n    for sentence in sentences:\n        pair = make_chunk_pair(sentence)\n        pair_sentences.append(pair)\n    for sentence in pair_sentences:\n        for pair in sentence:\n            print \"\\t\".join([str(chunk) for chunk in pair])\n    f.close()\n\n\n 43. \u540d\u8a5e\u3092\u542b\u3080\u6587\u7bc0\u304c\u52d5\u8a5e\u3092\u542b\u3080\u6587\u7bc0\u306b\u4fc2\u308b\u3082\u306e\u3092\u62bd\u51fa\n\n\u540d\u8a5e\u3092\u542b\u3080\u6587\u7bc0\u304c\uff0c\u52d5\u8a5e\u3092\u542b\u3080\u6587\u7bc0\u306b\u4fc2\u308b\u3068\u304d\uff0c\u3053\u308c\u3089\u3092\u30bf\u30d6\u533a\u5207\u308a\u5f62\u5f0f\u3067\u62bd\u51fa\u305b\u3088\uff0e\u305f\u3060\u3057\uff0c\u53e5\u8aad\u70b9\u306a\u3069\u306e\u8a18\u53f7\u306f\u51fa\u529b\u3057\u306a\u3044\u3088\u3046\u306b\u305b\u3088\uff0e\n\n# -*- coding: utf-8 -*-\n__author__ = 'todoroki'\n\nimport problem41\nimport problem42\n\ndef findNtoV(chunk_pair):\n    flagN = False\n    flagV = False\n    if \"\u540d\u8a5e\" in [morph.pos for morph in chunk_pair[0].morphs]:\n        flagN = True\n    if \"\u52d5\u8a5e\" in [morph.pos for morph in chunk_pair[1].morphs]:\n        flagV = True\n    return flagN and flagV\n\nif __name__ == \"__main__\":\n    f = open(\"neko.txt.cabocha\", \"r\")\n    sentences = problem41.read_chunk(f)\n    pair_sentences = []\n    for sentence in sentences:\n        pair = problem42.make_chunk_pair(sentence)\n        pair_sentences.append(pair)\n    pairs_NtoV = []\n    for pair_sentence in pair_sentences:\n        for chunk_pair in pair_sentence:\n            if findNtoV(chunk_pair):\n                pairs_NtoV.append(chunk_pair)\n    for pair_NtoV in pairs_NtoV:\n        noun, verb = pair_NtoV\n        print \"%s\\t%s\" % (noun, verb)\n    f.close()\n\n\n 44. \u4fc2\u308a\u53d7\u3051\u6728\u306e\u53ef\u8996\u5316\n\n\u4e0e\u3048\u3089\u308c\u305f\u6587\u306e\u4fc2\u308a\u53d7\u3051\u6728\u3092\u6709\u5411\u30b0\u30e9\u30d5\u3068\u3057\u3066\u53ef\u8996\u5316\u305b\u3088\uff0e\u53ef\u8996\u5316\u306b\u306f\uff0c\u4fc2\u308a\u53d7\u3051\u6728\u3092DOT\u8a00\u8a9e\u306b\u5909\u63db\u3057\uff0cGraphviz\u3092\u7528\u3044\u308b\u3068\u3088\u3044\uff0e\u307e\u305f\uff0cPython\u304b\u3089\u6709\u5411\u30b0\u30e9\u30d5\u3092\u76f4\u63a5\u7684\u306b\u53ef\u8996\u5316\u3059\u308b\u306b\u306f\uff0cpydot\u3092\u4f7f\u3046\u3068\u3088\u3044\uff0e\n\n# -*- coding: utf-8 -*-\n__author__ = 'todoroki'\n\nimport problem41\nimport problem42\n\n\ndef sentenceToDot(idx, sentence):\n    head = \"digraph sentence{0} \".format(idx)\n    body_head = \"{ graph [rankdir = LR]; \"\n    body = \"\"\n    for chunk_pair in sentence:\n        former, latter = chunk_pair\n        body += ('\"'+str(former)+'\"->\"'+str(latter)+'\"; ')\n    dotString = head + body_head + body + '}'\n    return dotString\n\n\nif __name__ == \"__main__\":\n    f = open(\"neko.txt.cabocha\", \"r\")\n    sentences = problem41.read_chunk(f)\n    pair_sentences = []\n    for sentence in sentences:\n        pair = problem42.make_chunk_pair(sentence)\n        pair_sentences.append(pair)\n    # dotStrings = []\n    for idx, sentence in enumerate(pair_sentences):\n        dotString = sentenceToDot(idx, sentence)\n        print dotString\n        # dotStrings.append(dotString)\n    f.close()\n\n\n\n\u7b2c5\u7ae0\u306e\u524d\u534a\u306e\u554f\u984c\u3092\u89e3\u3044\u305f\u8a18\u9332\u3002\n\u5bfe\u8c61\u3068\u3059\u308b\u30d5\u30a1\u30a4\u30eb\u306fweb\u30da\u30fc\u30b8\u306b\u3082\u3042\u308b\u901a\u308a\u3001neko.txt\u3068\u3059\u308b\u3002\n> \u590f\u76ee\u6f31\u77f3\u306e\u5c0f\u8aac\u300e\u543e\u8f29\u306f\u732b\u3067\u3042\u308b\u300f\u306e\u6587\u7ae0\uff08neko.txt\uff09\u3092CaboCha\u3092\u4f7f\u3063\u3066\u4fc2\u308a\u53d7\u3051\u89e3\u6790\u3057\uff0c\u305d\u306e\u7d50\u679c\u3092neko.txt.cabocha\u3068\u3044\u3046\u30d5\u30a1\u30a4\u30eb\u306b\u4fdd\u5b58\u305b\u3088\uff0e\u3053\u306e\u30d5\u30a1\u30a4\u30eb\u3092\u7528\u3044\u3066\uff0c\u4ee5\u4e0b\u306e\u554f\u306b\u5bfe\u5fdc\u3059\u308b\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u5b9f\u88c5\u305b\u3088\uff0e\n\n\n## <i class=\"fa fa-leaf\"></i> 40. \u4fc2\u308a\u53d7\u3051\u89e3\u6790\u7d50\u679c\u306e\u8aad\u307f\u8fbc\u307f\uff08\u5f62\u614b\u7d20\uff09\n> \u5f62\u614b\u7d20\u3092\u8868\u3059\u30af\u30e9\u30b9Morph\u3092\u5b9f\u88c5\u305b\u3088\uff0e\u3053\u306e\u30af\u30e9\u30b9\u306f\u8868\u5c64\u5f62\uff08surface\uff09\uff0c\u57fa\u672c\u5f62\uff08base\uff09\uff0c\u54c1\u8a5e\uff08pos\uff09\uff0c\u54c1\u8a5e\u7d30\u5206\u985e1\uff08pos1\uff09\u3092\u30e1\u30f3\u30d0\u5909\u6570\u306b\u6301\u3064\u3053\u3068\u3068\u3059\u308b\uff0e\u3055\u3089\u306b\uff0cCaboCha\u306e\u89e3\u6790\u7d50\u679c\uff08neko.txt.cabocha\uff09\u3092\u8aad\u307f\u8fbc\u307f\uff0c\u5404\u6587\u3092Morph\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u30ea\u30b9\u30c8\u3068\u3057\u3066\u8868\u73fe\u3057\uff0c3\u6587\u76ee\u306e\u5f62\u614b\u7d20\u5217\u3092\u8868\u793a\u305b\u3088\uff0e\n\n```python\n# -*- coding: utf-8 -*-\n__author__ = 'todoroki'\n\nclass Morph():\n    def __init__(self, surface, base, pos, pos1):\n        self.surface = surface\n        self.base = base\n        self.pos = pos\n        self.pos1 = pos1\n\n    def print_all(self):\n        return self.surface + \"\\t\" + self.base + \", \" + self.pos + \", \" + self.pos1\n\ndef read_morpheme(cabochafile):\n    sentences = []\n    sentence = []\n    for line in cabochafile:\n        if line == \"EOS\\n\":\n            # if len(sentence) > 0:\n            #     sentences.append(sentence)\n            sentences.append(sentence)\n            sentence = []\n        elif line[0] == \"*\":\n            continue\n        else:\n            surface, other = line.split()\n            others = other.split(\",\")\n            base, pos, pos1 = others[6], others[0], others[1]\n            morph = Morph(surface, base, pos, pos1)\n            sentence.append(morph)\n    return sentences\n\nif __name__ == \"__main__\":\n    f = open(\"neko.txt.cabocha\", \"r\")\n    sentences = read_morpheme(f)\n    for morph in sentences[2]:\n        print morph.print_all()\n    f.close()\n```\n\n## <i class=\"fa fa-leaf\"></i> 41. \u4fc2\u308a\u53d7\u3051\u89e3\u6790\u7d50\u679c\u306e\u8aad\u307f\u8fbc\u307f\uff08\u6587\u7bc0\u30fb\u4fc2\u308a\u53d7\u3051\uff09\n> 40\u306b\u52a0\u3048\u3066\uff0c\u6587\u7bc0\u3092\u8868\u3059\u30af\u30e9\u30b9Chunk\u3092\u5b9f\u88c5\u305b\u3088\uff0e\u3053\u306e\u30af\u30e9\u30b9\u306f\u5f62\u614b\u7d20\uff08Morph\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\uff09\u306e\u30ea\u30b9\u30c8\uff08morphs\uff09\uff0c\u4fc2\u308a\u5148\u6587\u7bc0\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u756a\u53f7\uff08dst\uff09\uff0c\u4fc2\u308a\u5143\u6587\u7bc0\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u756a\u53f7\u306e\u30ea\u30b9\u30c8\uff08srcs\uff09\u3092\u30e1\u30f3\u30d0\u5909\u6570\u306b\u6301\u3064\u3053\u3068\u3068\u3059\u308b\uff0e\u3055\u3089\u306b\uff0c\u5165\u529b\u30c6\u30ad\u30b9\u30c8\u306eCaboCha\u306e\u89e3\u6790\u7d50\u679c\u3092\u8aad\u307f\u8fbc\u307f\uff0c\uff11\u6587\u3092Chunk\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u30ea\u30b9\u30c8\u3068\u3057\u3066\u8868\u73fe\u3057\uff0c8\u6587\u76ee\u306e\u6587\u7bc0\u306e\u6587\u5b57\u5217\u3068\u4fc2\u308a\u5148\u3092\u8868\u793a\u305b\u3088\uff0e\u7b2c5\u7ae0\u306e\u6b8b\u308a\u306e\u554f\u984c\u3067\u306f\uff0c\u3053\u3053\u3067\u4f5c\u3063\u305f\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u6d3b\u7528\u305b\u3088\uff0e\n\n```python\n# -*- coding: utf-8 -*-\n__author__ = 'todoroki'\n\nimport problem40\n\n\nclass Chunk():\n    def __init__(self):\n        self.morphs = []\n        self.dst = -1\n        self.srcs = []\n\n    def __repr__(self):\n        if self.morphs:\n            surfs = [morph.surface for morph in self.morphs if morph.pos != '\u8a18\u53f7']\n            return \"\".join(surfs)\n\n    def include_pos(self, pos):\n        return pos in [morph.pos for morph in self.morphs]\n\n    def morphs_of_pos(self, pos):\n        return [morph for morph in self.morphs if morph.pos == pos]\n\n    def morphs_of_pos1(self, pos1):\n        return [morph for morph in self.morphs if morph.pos1 == pos1]\n\n\ndef read_chunk(cabochafile):\n    sentences = []\n    sentence = []\n    for line in cabochafile:\n        if line == \"EOS\\n\":\n            for idx, c in enumerate(sentence[:-1]):\n                if c.dst != -1:\n                    sentence[c.dst].srcs.append(idx)\n            # if len(sentence) > 1:\n                # sentences.append(sentence)\n            sentences.append(sentence)\n            sentence = []\n        elif line[0] == \"*\":\n            chunk = Chunk()\n            chunk.dst = int(line.split()[2].strip(\"D\"))\n            sentence.append(chunk)\n        else:\n            surface, other = line.split()\n            others = other.split(\",\")\n            base, pos, pos1 = others[6], others[0], others[1]\n            morph = problem40.Morph(surface, base, pos, pos1)\n            sentence[-1].morphs.append(morph)\n    return sentences\n\n\nif __name__ == \"__main__\":\n    f = open(\"neko.txt.cabocha\", \"r\")\n    sentences = read_chunk(f)\n    for idx, chnk in enumerate(sentences[7]):\n        surfaces = \"\"\n        for mrph in chnk.morphs:\n            surfaces += mrph.surface\n        print \"%d\" % idx, surfaces, \"=>\", chnk.dst\n    f.close()\n```\n\n## <i class=\"fa fa-leaf\"></i> 42. \u4fc2\u308a\u5143\u3068\u4fc2\u308a\u5148\u306e\u6587\u7bc0\u306e\u8868\u793a\n> \u4fc2\u308a\u5143\u306e\u6587\u7bc0\u3068\u4fc2\u308a\u5148\u306e\u6587\u7bc0\u306e\u30c6\u30ad\u30b9\u30c8\u3092\u30bf\u30d6\u533a\u5207\u308a\u5f62\u5f0f\u3067\u3059\u3079\u3066\u62bd\u51fa\u305b\u3088\uff0e\u305f\u3060\u3057\uff0c\u53e5\u8aad\u70b9\u306a\u3069\u306e\u8a18\u53f7\u306f\u51fa\u529b\u3057\u306a\u3044\u3088\u3046\u306b\u305b\u3088\uff0e\n\n```python\n# -*- coding: utf-8 -*-\n__author__ = 'todoroki'\n\nimport problem41\n\ndef make_chunk_pair(sentence):\n    pairs = []\n    for chunk in sentence:\n        if chunk.dst != -1:\n            pairs.append((chunk, sentence[chunk.dst]))\n    return pairs\n\nif __name__ == \"__main__\":\n    f = open(\"neko.txt.cabocha\")\n    sentences = problem41.read_chunk(f)\n    pair_sentences = []\n    for sentence in sentences:\n        pair = make_chunk_pair(sentence)\n        pair_sentences.append(pair)\n    for sentence in pair_sentences:\n        for pair in sentence:\n            print \"\\t\".join([str(chunk) for chunk in pair])\n    f.close()\n```\n\n## <i class=\"fa fa-leaf\"></i> 43. \u540d\u8a5e\u3092\u542b\u3080\u6587\u7bc0\u304c\u52d5\u8a5e\u3092\u542b\u3080\u6587\u7bc0\u306b\u4fc2\u308b\u3082\u306e\u3092\u62bd\u51fa\n> \u540d\u8a5e\u3092\u542b\u3080\u6587\u7bc0\u304c\uff0c\u52d5\u8a5e\u3092\u542b\u3080\u6587\u7bc0\u306b\u4fc2\u308b\u3068\u304d\uff0c\u3053\u308c\u3089\u3092\u30bf\u30d6\u533a\u5207\u308a\u5f62\u5f0f\u3067\u62bd\u51fa\u305b\u3088\uff0e\u305f\u3060\u3057\uff0c\u53e5\u8aad\u70b9\u306a\u3069\u306e\u8a18\u53f7\u306f\u51fa\u529b\u3057\u306a\u3044\u3088\u3046\u306b\u305b\u3088\uff0e\n\n```python\n# -*- coding: utf-8 -*-\n__author__ = 'todoroki'\n\nimport problem41\nimport problem42\n\ndef findNtoV(chunk_pair):\n    flagN = False\n    flagV = False\n    if \"\u540d\u8a5e\" in [morph.pos for morph in chunk_pair[0].morphs]:\n        flagN = True\n    if \"\u52d5\u8a5e\" in [morph.pos for morph in chunk_pair[1].morphs]:\n        flagV = True\n    return flagN and flagV\n\nif __name__ == \"__main__\":\n    f = open(\"neko.txt.cabocha\", \"r\")\n    sentences = problem41.read_chunk(f)\n    pair_sentences = []\n    for sentence in sentences:\n        pair = problem42.make_chunk_pair(sentence)\n        pair_sentences.append(pair)\n    pairs_NtoV = []\n    for pair_sentence in pair_sentences:\n        for chunk_pair in pair_sentence:\n            if findNtoV(chunk_pair):\n                pairs_NtoV.append(chunk_pair)\n    for pair_NtoV in pairs_NtoV:\n        noun, verb = pair_NtoV\n        print \"%s\\t%s\" % (noun, verb)\n    f.close()\n```\n\n## <i class=\"fa fa-leaf\"></i> 44. \u4fc2\u308a\u53d7\u3051\u6728\u306e\u53ef\u8996\u5316\n> \u4e0e\u3048\u3089\u308c\u305f\u6587\u306e\u4fc2\u308a\u53d7\u3051\u6728\u3092\u6709\u5411\u30b0\u30e9\u30d5\u3068\u3057\u3066\u53ef\u8996\u5316\u305b\u3088\uff0e\u53ef\u8996\u5316\u306b\u306f\uff0c\u4fc2\u308a\u53d7\u3051\u6728\u3092DOT\u8a00\u8a9e\u306b\u5909\u63db\u3057\uff0cGraphviz\u3092\u7528\u3044\u308b\u3068\u3088\u3044\uff0e\u307e\u305f\uff0cPython\u304b\u3089\u6709\u5411\u30b0\u30e9\u30d5\u3092\u76f4\u63a5\u7684\u306b\u53ef\u8996\u5316\u3059\u308b\u306b\u306f\uff0cpydot\u3092\u4f7f\u3046\u3068\u3088\u3044\uff0e\n\n```python\n# -*- coding: utf-8 -*-\n__author__ = 'todoroki'\n\nimport problem41\nimport problem42\n\n\ndef sentenceToDot(idx, sentence):\n    head = \"digraph sentence{0} \".format(idx)\n    body_head = \"{ graph [rankdir = LR]; \"\n    body = \"\"\n    for chunk_pair in sentence:\n        former, latter = chunk_pair\n        body += ('\"'+str(former)+'\"->\"'+str(latter)+'\"; ')\n    dotString = head + body_head + body + '}'\n    return dotString\n\n\nif __name__ == \"__main__\":\n    f = open(\"neko.txt.cabocha\", \"r\")\n    sentences = problem41.read_chunk(f)\n    pair_sentences = []\n    for sentence in sentences:\n        pair = problem42.make_chunk_pair(sentence)\n        pair_sentences.append(pair)\n    # dotStrings = []\n    for idx, sentence in enumerate(pair_sentences):\n        dotString = sentenceToDot(idx, sentence)\n        print dotString\n        # dotStrings.append(dotString)\n    f.close()\n```\n\n<link rel=\"stylesheet\" href=\"https://maxcdn.bootstrapcdn.com/font-awesome/4.4.0/css/font-awesome.min.css\">\n"}