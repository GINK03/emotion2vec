{"context": " More than 1 year has passed since last update.\u5143\u30cd\u30bf\u306f\u3053\u308c\u3002\u3082\u3068\u3082\u3068\u30e2\u30ce\u30af\u30ed\u306a\u3093\u3060\u3051\u3069\u3001arc\u3067\u63cf\u753b\u3057\u3066\u3044\u308b\u90e8\u5206\u3092\u9752\u7dd1\u7cfb\u306e\u8272\u3067\u5e7e\u3064\u304b\u91cd\u306d\u3066\u3001\u52a0\u7b97\u5408\u6210\u3057\u305f\u3089\u3082\u3063\u3068\u30b5\u30a4\u30d0\u30fc\u611f\u51fa\u306a\u3044\u304b\u306a\u3063\u3066\u8a66\u3057\u3066\u307f\u305f\u306e\u304c\u59cb\u307e\u308a\u3002\n\u30b3\u30fc\u30c9\u3068\u3057\u3066\u306f\u3001noFill\u6307\u5b9a\u3001arc\u306estrokeWeight\u309220\u3050\u3089\u3044\u3067\u56fa\u5b9a\u3001stroke\u306e\u8272\u3092\u8a2d\u5b9a\u3057\u305f\u611f\u3058\u3002\u305d\u308c\u3067\u3001stroke\u3067\u30a2\u30eb\u30d5\u30a1\u5024\u3092\u6307\u5b9a\u3059\u308b\u3068\u30ec\u30f3\u30c0\u30e9\u304cP2D\u3060\u3068\u63cf\u753b\u304c\u6fc0\u91cd\u306b\u306a\u3063\u3066\u3057\u307e\u3046\u306e\u3067\u3001P3D\u306b\u5909\u66f4\u3057\u3066\u8868\u793a\u3057\u3066\u307f\u305f\u3089\u3001\u8868\u793a\u306f\u901f\u3044\u3051\u3069\u30ce\u30a4\u30ba\u307f\u305f\u3044\u306a\u3082\u306e\u304c\u4e57\u3063\u3066\u3057\u307e\u3046\u3053\u3068\u304c\u308f\u304b\u3063\u305f\u3002\u3055\u3089\u306bProcessing2\u7cfb\u30683\u7cfb\u3067\u63cf\u753b\u65b9\u6cd5\u304c\u5909\u308f\u3063\u3066\u3044\u308b\u3002\u3069\u3063\u3061\u306b\u3057\u308d\u8868\u793a\u306f\u5fae\u5999\u2026\u2026\u3002\n\u304a\u305d\u3089\u304farc\u81ea\u4f53\u3053\u3046\u3044\u3046\u63cf\u753b\u3067\u4f7f\u308f\u308c\u308b\u3053\u3068\u304c\u60f3\u5b9a\u3055\u308c\u3066\u3044\u306a\u3055\u305d\u3046\u306a\u306e\u3067\u3001beginShape/endShape\u3001bezierVertex\u3068\u304b\u3067\u63cf\u304f\u65b9\u6cd5\u3092\u63a2\u3057\u3066\u307f\u305f\u3068\u3053\u308d\u3001\u307e\u3055\u306b\u305d\u308c\u3092\u3084\u3063\u3066\u3044\u308b\u8a18\u4e8b\u304c\u898b\u3064\u304b\u3063\u305f\u3002\u3053\u308c\u3067\u4f5c\u3063\u3066\u307f\u305f\u3068\u3053\u308d\u3001P2D\u3067\u3082\u8efd\u304f\u3001P3D\u3067\u3082\u304d\u308c\u3044\u306b\u8868\u793a\u3067\u304d\u305f\u306e\u3067\u30e1\u30e2\u3063\u3066\u304a\u304f\u3002\n\n\n\nProcessing 2.2.1\nProcessing 3.0a11\n\u4eca\u56de\u3067\u304d\u305f\u3082\u306e\n\n\n\n\n\n\n\n\n\n\n\nCyberCircle.pde\n\nArc[] arcs = new Arc[10];\n\nvoid setup() {\n  size(240, 240, P2D);\n  blendMode(ADD);\n\n  for (int i = 0; i < arcs.length; i++) {\n    arcs[i] = new Arc();\n  }\n}\n\nvoid draw() {\n  background(0);\n  translate(width/2, height/2);\n\n  for (Arc arc : arcs) {\n    arc.move();\n    arc.drawArc();\n  }\n}\n\nprivate class Arc {\n\n  final color fillColor;\n  final float radius, weight;\n  final float speed;\n\n  float start;\n  float end;\n\n  Arc() {\n    fillColor = color(16, random(128, 192), random(128, 192), 180);\n    speed = random(2) < 1 ? random(-0.05, -0.01) : random(0.01, 0.05);\n    radius = random(20, 120);\n    weight = 20;\n\n    start = 0;\n    end = random(HALF_PI, TAU);\n  }\n\n  void drawArc() {\n\n    // \u3082\u3068\u3082\u3068\u3053\u306e\u30b3\u30fc\u30c9\u3067\u63cf\u753b\u3057\u3066\u305f\n    // noFill();\n    // ellipseMode(RADIUS);\n    // stroke(fillColor);\n    // strokeWeight(weight);\n    // arc(0, 0, radius, radius, start, start + end);\n\n    fill(fillColor);\n    baumkuchen(0, 0, radius, weight, start, end);\n  }\n\n  void move() {\n    start += speed;\n  }\n}\n\nvoid baumkuchen(float x, float y, float radius, float weight, float start, float stop) {\n  float INTERVAL_RAD = radians(30);\n\n  pushStyle();\n  pushMatrix();\n\n  noStroke();\n  translate(x, y);\n  rotate(start);\n\n  float remain = stop; \n  while (remain > 0) {\n    float current = min(INTERVAL_RAD, remain);\n    piece(current, radius, weight);\n    remain -= current;\n    rotate(INTERVAL_RAD);\n  }\n\n  popMatrix();\n  popStyle();\n}\n\nvoid piece(float angle, float radius, float weight) {\n\n  float controlTheta1 = angle/3.0;\n  float controlTheta2 = controlTheta1*2.0;\n\n  // \u5b64\u306e\u5185\u5468\u3068\u5916\u5468\u3092\u8a08\u7b97\n  float inner = radius - weight / 2;\n  float outer = inner + weight;\n\n  // 1\u3064\u76ee\u306e\u30d9\u30b8\u30a7\u66f2\u7dda\u306e\u5024\n  float sx1 = cos(0)*inner;\n  float sy1 = sin(0)*inner;\n\n  float controlRadius1 = inner/cos(controlTheta1);\n  float cx1 = cos(controlTheta1)*controlRadius1;\n  float cy1 = sin(controlTheta1)*controlRadius1;\n  float cx2 = cos(controlTheta2)*controlRadius1;\n  float cy2 = sin(controlTheta2)*controlRadius1;\n\n  float ax1 = cos(angle)*inner;\n  float ay1 = sin(angle)*inner;\n\n  // 2\u3064\u3081\u306e\u30d9\u30b8\u30a7\u66f2\u7dda\u306e\u5024\n  float sx2 = cos(angle)*outer;\n  float sy2 = sin(angle)*outer;\n\n  float controlRadius2 = outer/cos(controlTheta1);\n  float cx3 = cos(controlTheta2)*controlRadius2;\n  float cy3 = sin(controlTheta2)*controlRadius2;\n  float cx4 = cos(controlTheta1)*controlRadius2;\n  float cy4 = sin(controlTheta1)*controlRadius2;\n\n  float ax2 = cos(0)*outer;\n  float ay2 = sin(0)*outer;\n\n  // \u5f27\u3092\u63cf\u304f\n  beginShape();\n\n  vertex(sx1, sy1);\n  bezierVertex(cx1, cy1, cx2, cy2, ax1, ay1);\n\n  vertex(sx2, sy2);\n  bezierVertex(cx3, cy3, cx4, cy4, ax2, ay2);\n\n  endShape(CLOSE);\n}\n\n\nbaumkuchen\u30e1\u30bd\u30c3\u30c9\u3067\u3001\u300cnoFill(), ellipseMode(RADIUS)\u3092\u6307\u5b9a\u3057\u3001\u304b\u3064width\u3068height\u306b\u540c\u3058\u5024\u3092\u6307\u5b9a\u3057\u305farc\u30e1\u30bd\u30c3\u30c9\u300d\u3092\u7684\u306a\u611f\u3058\u306e\u3082\u306e\u3092\u518d\u73fe\u3067\u304d\u308b\u3088\u3046\u306b\u3057\u305f\u3002\u5143\u306e\u30b3\u30fc\u30c9\u304b\u3089\u5909\u66f4\u3057\u305f\u70b9\u306f\u4e0b\u8a18\u306e\u901a\u308a\u3002\n\nangle\u306fradians\u3067\u306e\u6307\u5b9a\u306b\u3057\u305f\n30\u00b0\u305a\u3064\u63cf\u753b\u3057\u3066rotate\u3092\u7e70\u308a\u8fd4\u3059\u3088\u3046\u306b\u3057\u305f\uff0890\u00b0\u304c\u9650\u754c\u3063\u3066\u66f8\u3044\u3066\u3042\u3063\u305f\u3051\u3069\u3001\u3051\u3063\u3053\u3046\u8aa4\u5dee\u304c\u51fa\u308b\uff09\nweight\u306f\u6307\u5b9a\u3057\u305fradius\u3092\u4e2d\u5fc3\u306b\u3001\u5185\u5074\u3068\u5916\u5074\u306b\u5411\u3051\u3066(strokeWeight\u3063\u307d\u304f)\u8a2d\u5b9a\u3055\u308c\u308b\u3088\u3046\u306b\u3057\u305f\n\n\n\u5143\u30cd\u30bf\u306f[\u3053\u308c](http://labs.uechoco.com/blog/2011/12/processing-magic-circle-sf-circle-advent-2011.html)\u3002\u3082\u3068\u3082\u3068\u30e2\u30ce\u30af\u30ed\u306a\u3093\u3060\u3051\u3069\u3001arc\u3067\u63cf\u753b\u3057\u3066\u3044\u308b\u90e8\u5206\u3092\u9752\u7dd1\u7cfb\u306e\u8272\u3067\u5e7e\u3064\u304b\u91cd\u306d\u3066\u3001\u52a0\u7b97\u5408\u6210\u3057\u305f\u3089\u3082\u3063\u3068\u30b5\u30a4\u30d0\u30fc\u611f\u51fa\u306a\u3044\u304b\u306a\u3063\u3066\u8a66\u3057\u3066\u307f\u305f\u306e\u304c\u59cb\u307e\u308a\u3002\n\n\u30b3\u30fc\u30c9\u3068\u3057\u3066\u306f\u3001noFill\u6307\u5b9a\u3001arc\u306estrokeWeight\u309220\u3050\u3089\u3044\u3067\u56fa\u5b9a\u3001stroke\u306e\u8272\u3092\u8a2d\u5b9a\u3057\u305f\u611f\u3058\u3002\u305d\u308c\u3067\u3001stroke\u3067\u30a2\u30eb\u30d5\u30a1\u5024\u3092\u6307\u5b9a\u3059\u308b\u3068\u30ec\u30f3\u30c0\u30e9\u304cP2D\u3060\u3068\u63cf\u753b\u304c\u6fc0\u91cd\u306b\u306a\u3063\u3066\u3057\u307e\u3046\u306e\u3067\u3001P3D\u306b\u5909\u66f4\u3057\u3066\u8868\u793a\u3057\u3066\u307f\u305f\u3089\u3001\u8868\u793a\u306f\u901f\u3044\u3051\u3069\u30ce\u30a4\u30ba\u307f\u305f\u3044\u306a\u3082\u306e\u304c\u4e57\u3063\u3066\u3057\u307e\u3046\u3053\u3068\u304c\u308f\u304b\u3063\u305f\u3002\u3055\u3089\u306bProcessing2\u7cfb\u30683\u7cfb\u3067\u63cf\u753b\u65b9\u6cd5\u304c\u5909\u308f\u3063\u3066\u3044\u308b\u3002\u3069\u3063\u3061\u306b\u3057\u308d\u8868\u793a\u306f\u5fae\u5999\u2026\u2026\u3002\n\n\u304a\u305d\u3089\u304farc\u81ea\u4f53\u3053\u3046\u3044\u3046\u63cf\u753b\u3067\u4f7f\u308f\u308c\u308b\u3053\u3068\u304c\u60f3\u5b9a\u3055\u308c\u3066\u3044\u306a\u3055\u305d\u3046\u306a\u306e\u3067\u3001beginShape/endShape\u3001bezierVertex\u3068\u304b\u3067\u63cf\u304f\u65b9\u6cd5\u3092\u63a2\u3057\u3066\u307f\u305f\u3068\u3053\u308d\u3001[\u307e\u3055\u306b\u305d\u308c\u3092\u3084\u3063\u3066\u3044\u308b\u8a18\u4e8b](http://www.kasperkamperman.com/blog/processing-colorwheel/)\u304c\u898b\u3064\u304b\u3063\u305f\u3002\u3053\u308c\u3067\u4f5c\u3063\u3066\u307f\u305f\u3068\u3053\u308d\u3001P2D\u3067\u3082\u8efd\u304f\u3001P3D\u3067\u3082\u304d\u308c\u3044\u306b\u8868\u793a\u3067\u304d\u305f\u306e\u3067\u30e1\u30e2\u3063\u3066\u304a\u304f\u3002\n\n|Processing 2.2.1|Processing 3.0a11|\u4eca\u56de\u3067\u304d\u305f\u3082\u306e|\n|:--------------:|:---------------:|:----------:|\n|![shot.png](https://qiita-image-store.s3.amazonaws.com/0/26489/78b35b22-439a-499e-afb3-3650f55697bf.png)|![shot.png](https://qiita-image-store.s3.amazonaws.com/0/26489/c780b4c0-6403-135c-5025-df842c9e1c9c.png)|![shot.png](https://qiita-image-store.s3.amazonaws.com/0/26489/91d61120-8339-da3e-fe90-6ecb34d6a183.png)|\n\n```java:CyberCircle.pde\n\nArc[] arcs = new Arc[10];\n\nvoid setup() {\n  size(240, 240, P2D);\n  blendMode(ADD);\n\n  for (int i = 0; i < arcs.length; i++) {\n    arcs[i] = new Arc();\n  }\n}\n\nvoid draw() {\n  background(0);\n  translate(width/2, height/2);\n\n  for (Arc arc : arcs) {\n    arc.move();\n    arc.drawArc();\n  }\n}\n\nprivate class Arc {\n\n  final color fillColor;\n  final float radius, weight;\n  final float speed;\n\n  float start;\n  float end;\n\n  Arc() {\n    fillColor = color(16, random(128, 192), random(128, 192), 180);\n    speed = random(2) < 1 ? random(-0.05, -0.01) : random(0.01, 0.05);\n    radius = random(20, 120);\n    weight = 20;\n\n    start = 0;\n    end = random(HALF_PI, TAU);\n  }\n\n  void drawArc() {\n\n    // \u3082\u3068\u3082\u3068\u3053\u306e\u30b3\u30fc\u30c9\u3067\u63cf\u753b\u3057\u3066\u305f\n    // noFill();\n    // ellipseMode(RADIUS);\n    // stroke(fillColor);\n    // strokeWeight(weight);\n    // arc(0, 0, radius, radius, start, start + end);\n\n    fill(fillColor);\n    baumkuchen(0, 0, radius, weight, start, end);\n  }\n\n  void move() {\n    start += speed;\n  }\n}\n\nvoid baumkuchen(float x, float y, float radius, float weight, float start, float stop) {\n  float INTERVAL_RAD = radians(30);\n\n  pushStyle();\n  pushMatrix();\n\n  noStroke();\n  translate(x, y);\n  rotate(start);\n\n  float remain = stop; \n  while (remain > 0) {\n    float current = min(INTERVAL_RAD, remain);\n    piece(current, radius, weight);\n    remain -= current;\n    rotate(INTERVAL_RAD);\n  }\n\n  popMatrix();\n  popStyle();\n}\n\nvoid piece(float angle, float radius, float weight) {\n\n  float controlTheta1 = angle/3.0;\n  float controlTheta2 = controlTheta1*2.0;\n\n  // \u5b64\u306e\u5185\u5468\u3068\u5916\u5468\u3092\u8a08\u7b97\n  float inner = radius - weight / 2;\n  float outer = inner + weight;\n\n  // 1\u3064\u76ee\u306e\u30d9\u30b8\u30a7\u66f2\u7dda\u306e\u5024\n  float sx1 = cos(0)*inner;\n  float sy1 = sin(0)*inner;\n\n  float controlRadius1 = inner/cos(controlTheta1);\n  float cx1 = cos(controlTheta1)*controlRadius1;\n  float cy1 = sin(controlTheta1)*controlRadius1;\n  float cx2 = cos(controlTheta2)*controlRadius1;\n  float cy2 = sin(controlTheta2)*controlRadius1;\n\n  float ax1 = cos(angle)*inner;\n  float ay1 = sin(angle)*inner;\n\n  // 2\u3064\u3081\u306e\u30d9\u30b8\u30a7\u66f2\u7dda\u306e\u5024\n  float sx2 = cos(angle)*outer;\n  float sy2 = sin(angle)*outer;\n\n  float controlRadius2 = outer/cos(controlTheta1);\n  float cx3 = cos(controlTheta2)*controlRadius2;\n  float cy3 = sin(controlTheta2)*controlRadius2;\n  float cx4 = cos(controlTheta1)*controlRadius2;\n  float cy4 = sin(controlTheta1)*controlRadius2;\n\n  float ax2 = cos(0)*outer;\n  float ay2 = sin(0)*outer;\n\n  // \u5f27\u3092\u63cf\u304f\n  beginShape();\n\n  vertex(sx1, sy1);\n  bezierVertex(cx1, cy1, cx2, cy2, ax1, ay1);\n\n  vertex(sx2, sy2);\n  bezierVertex(cx3, cy3, cx4, cy4, ax2, ay2);\n\n  endShape(CLOSE);\n}\n```\n\nbaumkuchen\u30e1\u30bd\u30c3\u30c9\u3067\u3001\u300cnoFill(), ellipseMode(RADIUS)\u3092\u6307\u5b9a\u3057\u3001\u304b\u3064width\u3068height\u306b\u540c\u3058\u5024\u3092\u6307\u5b9a\u3057\u305farc\u30e1\u30bd\u30c3\u30c9\u300d\u3092\u7684\u306a\u611f\u3058\u306e\u3082\u306e\u3092\u518d\u73fe\u3067\u304d\u308b\u3088\u3046\u306b\u3057\u305f\u3002\u5143\u306e\u30b3\u30fc\u30c9\u304b\u3089\u5909\u66f4\u3057\u305f\u70b9\u306f\u4e0b\u8a18\u306e\u901a\u308a\u3002\n\n- angle\u306fradians\u3067\u306e\u6307\u5b9a\u306b\u3057\u305f\n- 30\u00b0\u305a\u3064\u63cf\u753b\u3057\u3066rotate\u3092\u7e70\u308a\u8fd4\u3059\u3088\u3046\u306b\u3057\u305f\uff0890\u00b0\u304c\u9650\u754c\u3063\u3066\u66f8\u3044\u3066\u3042\u3063\u305f\u3051\u3069\u3001\u3051\u3063\u3053\u3046\u8aa4\u5dee\u304c\u51fa\u308b\uff09\n- weight\u306f\u6307\u5b9a\u3057\u305fradius\u3092\u4e2d\u5fc3\u306b\u3001\u5185\u5074\u3068\u5916\u5074\u306b\u5411\u3051\u3066(strokeWeight\u3063\u307d\u304f)\u8a2d\u5b9a\u3055\u308c\u308b\u3088\u3046\u306b\u3057\u305f\n", "tags": ["processing"]}