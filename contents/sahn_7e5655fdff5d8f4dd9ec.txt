{"tags": ["Java", "Java\u5165\u9580", "Generics"], "context": "\n\n\u80cc\u666f\nJava Collection\u30e1\u30e2\u66f8\u304d\u3002\u3042\u3068\u3001Generics\u7684\u306a\u66f8\u304d\u65b9\u30e1\u30e2\u3002\n\n\u53c2\u8003\u6587\u732e\n\nJava Tutorial - Collections\n\nJava API - Collection - \u8aad\u3080\u6c17\u3057\u306a\u3044\u3051\u3069\u3001\u4e00\u5fdc\u30ea\u30f3\u30af\u4f5c\u3063\u3066\u304a\u3053\u3046\uff5e ^^;\n[\u6539\u8a02\u65b0\u7248]Java\u30dd\u30b1\u30c3\u30c8\u30ea\u30d5\u30a1\u30ec\u30f3\u30b9 - \u6280\u8853\u8a55\u8ad6\u793e\n\n\n\u691c\u8a3c\u74b0\u5883\n\nJDK 8\nEclipse Neon\n\n\nCollection\u306e\u57fa\u672c\u5f62\n\nList\n\n\nIndex\u3067\u7ba1\u7406\u3002\u6240\u8b02\u4e00\u822c\u7684\u306a\u914d\u5217\n\u8981\u7d20\u306f\u91cd\u8907\u53ef\u80fd\n\n\nSet\n\n\n\u8981\u7d20\u306f\u9806\u4e0d\u540c\n\u8981\u7d20\u306f\u91cd\u8907\u4e0d\u53ef\n\n\nQueue / Deque\n\n\n\u5f85\u3061\u884c\u5217\n\u5148\u982d\u307e\u305f\u306f\u672b\u5c3e\u306e\u8981\u7d20\u306e\u307f\u8ffd\u52a0\u30fb\u524a\u9664\u53ef\u80fd\n\n\nMap\n\n\n\u30ad\u30fc\u3068\u5024\u306e\u30da\u30a2\u3067\u7ba1\u7406\n\u30ad\u30fc\u306f\u91cd\u8907\u4e0d\u53ef \n\n\n\nJava Tutorial\u3060\u3068\u3001Core Collection Interface\u3068\u3044\u3046\u3053\u3068\u3067\u3001\u3053\u3093\u306a\u56f3\u3067\u8aac\u660e\u3055\u308c\u3066\u3044\u308b\u3002\n\n\nGenerics\n\u3053\u3046\u3044\u3046\u98a8\u306b\u66f8\u304f\u3084\u3064\u30fb\u30fb\u30fb\u8aac\u660e\u306b\u306a\u3063\u3068\u3089\u3093\u30fb\u30fb\u30fb\nCollection<String> col1 = new ArrayList<>();\n\nGenerics\u306e\u7528\u8a9e\u306a\u3069\u306b\u95a2\u3057\u3066\u306f\u3053\u3053\u3092\u53c2\u7167\u3002\nJava \u30b8\u30a7\u30cd\u30ea\u30af\u30b9\u306e\u30dd\u30a4\u30f3\u30c8\nType Parameter\u306e\u547d\u540d\u898f\u7d04\n\n\n\nType Parameter\n\u8aac\u660e\n\n\n\n\nE\nElement\n\n\nK\nKey\n\n\nN\nNumber\n\n\nT\nType\n\n\nV\nValue\n\n\nS,U,V etc.\n2nd, 3rd, 4th types\n\n\n\n\nArrayList\nArrayList\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u3002\n\u52d5\u304f\u3053\u3068\u306f\u52d5\u304f\u3051\u3069\u3001\u4ee5\u4e0b\u306e\u3068\u3053\u308d\u3067\u3001\u76f8\u5f53Eclipse\u304b\u3089\u6012\u3089\u308c\u308b\u30fb\u30fb\u30fb\n\u300cList myList = new ArrayList();\u300d\n        // Old usage of List - Raw type List\n        List myList = new ArrayList();\n        String s1 = \"Apple\";\n        String s2 = \"Orange\";\n        String s3 = \"Banana\";\n\n        myList.add(s1);\n        myList.add(s2);\n        myList.add(s3);\n\n        // Size, Print List\n        System.out.println(\"List size : \" + myList.size());\n        for (Object obj : myList) {\n            System.out.println(obj);\n        }\n\n        // Sort List\n        Collections.sort(myList);\n        for (Object obj : myList) {\n            System.out.println(obj);\n        }\n\n        // Using Iterator\n        Iterator itr = myList.iterator();\n        while (itr.hasNext()) {\n            System.out.println((String)itr.next());\n        }\n\nGenerics(\u30d1\u30e9\u30e1\u30fc\u30bf\u5316\u3055\u308c\u305f\u578b - parameterized type)\u3092\u4f7f\u3063\u305f\u4eca\u98a8\u306e\u3084\u308a\u65b9\uff08Java 7\u4ee5\u964d\uff09\u306f\u3053\u3061\u3089\u3002\n\u300cList<String> myList = new ArrayList<>();\u300d\u304c\u6b63\u89e3\u3002\n\u8981\u306f\u5fb9\u5e95\u7684\u306b\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0\u30ec\u30d9\u30eb\u3067\u578b\u4fdd\u8a3c\uff08type-safe\uff09\u3057\u308d\u3063\u3066\u3053\u3068\u3002\n        // New usage of List - Generics\n        List<String> myList = new ArrayList<>();\n        String s1 = \"Apple\";\n        String s2 = \"Orange\";\n        String s3 = \"Banana\";\n\n        myList.add(s1);\n        myList.add(s2);\n        myList.add(s3);\n\n        // Using Iterator\n        Iterator<String> itr = myList.iterator();\n        while (itr.hasNext()) {\n            System.out.println((String)itr.next());\n        }\n\n\nHashSet\nHashSet\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u3002\n        // Use HashSet (Old Style)\n        Set hs = new HashSet();\n        hs.add(\"Hello\");\n        hs.add(\"Dolly\");\n\n        // Using Iterator\n        Iterator itr = hs.iterator();\n        while (itr.hasNext()) {\n            System.out.println((String)itr.next());\n        }\n\n        // New Style\n        Set<String> hs2 = new HashSet<>();\n\n        // Using Iterator\n        Iterator<String> itr2 = hs2.iterator();\n        while (itr2.hasNext()) {\n            System.out.println(itr2.next());\n        }\n\n\nHashMap\nHashMap\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u3002\n        Map<Integer, String> map1 = new HashMap<>();\n\n        map1.put(1, \"Cloud\");\n        map1.put(2, \"Big Data\");\n        map1.put(3, \"Machine Learning\");\n\n        // key objects\n        Set<Integer> keys = map1.keySet();\n        for (Object key : keys) {\n            System.out.println(key + \": \" + map1.get(key));\n        }\n\n\n?Wildcard(\u975e\u5883\u754c\u30ef\u30a4\u30eb\u30c9\u30ab\u30fc\u30c9\u578b - unbounded wildcard type)\u306e\u4f8b\n    // argument with ? wildcard\n    public static void printList(List<?> list) {\n        for (Object obj : list ) {\n            System.out.println(obj);\n        }\n    }\n\n    public static void main(String[] args) {\n        List<String> list1 = new ArrayList<>();\n        list1.add(\"Apple\");\n        list1.add(\"Grape\");\n        printList(list1);\n\n        List<Integer> list2 = new ArrayList<>();\n        list2.add(100);\n        list2.add(300);\n        printList(list2);\n    }\n\n\nGeneric Type\u3092\u4f7f\u3063\u305fClass / Method\u4f8b\npublic class GenericTypeClassSample<T> {\n    T height;\n    T width;\n\n    public GenericTypeClassSample(T width, T height) {\n        super();\n        this.width = width;\n        this.height = height;\n    }\n\n    public T getWidth() {\n        return width;\n    }\n\n    public void setWidth(T width) {\n        this.width = width;\n    }\n\n    public T getHeight() {\n        return height;\n    }\n\n    public void setHeight(T height) {\n        this.height = height;\n    }\n\n    public static void main(String[] args) {\n        GenericTypeClassSample<Integer> rect1 = new GenericTypeClassSample<>(10, 5);\n        System.out.println(\"Area : \" + rect1.getHeight() * rect1.getWidth());\n\n        GenericTypeClassSample<Double> rect2 = new GenericTypeClassSample<>(4.3, 5.7);\n        System.out.println(\"Area : \" + rect2.getHeight() * rect2.getWidth());\n\n    }\n}\n\n# \u80cc\u666f\nJava Collection\u30e1\u30e2\u66f8\u304d\u3002\u3042\u3068\u3001Generics\u7684\u306a\u66f8\u304d\u65b9\u30e1\u30e2\u3002\n\n# \u53c2\u8003\u6587\u732e\n- [Java Tutorial - Collections](https://docs.oracle.com/javase/tutorial/collections/index.html)\n- [Java API - Collection](https://docs.oracle.com/javase/8/docs/api/index.html?java/util/Collection.html) - \u8aad\u3080\u6c17\u3057\u306a\u3044\u3051\u3069\u3001\u4e00\u5fdc\u30ea\u30f3\u30af\u4f5c\u3063\u3066\u304a\u3053\u3046\uff5e ^^;\n- [[\u6539\u8a02\u65b0\u7248]Java\u30dd\u30b1\u30c3\u30c8\u30ea\u30d5\u30a1\u30ec\u30f3\u30b9 - \u6280\u8853\u8a55\u8ad6\u793e](https://www.amazon.co.jp/Java-%E3%83%9D%E3%82%B1%E3%83%83%E3%83%88%E3%83%AA%E3%83%95%E3%82%A1%E3%83%AC%E3%83%B3%E3%82%B9-%E9%AB%98%E6%B1%9F-%E8%B3%A2/dp/4774145920)\n\n\n# \u691c\u8a3c\u74b0\u5883\n- JDK 8\n- Eclipse Neon\n\n# Collection\u306e\u57fa\u672c\u5f62\n1. List\n    - Index\u3067\u7ba1\u7406\u3002\u6240\u8b02\u4e00\u822c\u7684\u306a\u914d\u5217\n    - \u8981\u7d20\u306f\u91cd\u8907\u53ef\u80fd\n2. Set\n    - \u8981\u7d20\u306f\u9806\u4e0d\u540c\n    - \u8981\u7d20\u306f\u91cd\u8907\u4e0d\u53ef\n3. Queue / Deque\n    - \u5f85\u3061\u884c\u5217\n    - \u5148\u982d\u307e\u305f\u306f\u672b\u5c3e\u306e\u8981\u7d20\u306e\u307f\u8ffd\u52a0\u30fb\u524a\u9664\u53ef\u80fd\n4. Map\n    - \u30ad\u30fc\u3068\u5024\u306e\u30da\u30a2\u3067\u7ba1\u7406\n    - \u30ad\u30fc\u306f\u91cd\u8907\u4e0d\u53ef \n\nJava Tutorial\u3060\u3068\u3001Core Collection Interface\u3068\u3044\u3046\u3053\u3068\u3067\u3001\u3053\u3093\u306a\u56f3\u3067\u8aac\u660e\u3055\u308c\u3066\u3044\u308b\u3002\n![image](https://qiita-image-store.s3.amazonaws.com/0/147901/77e5f9c2-a755-7dab-6727-f8da387e36da.png)\n\n\n# Generics\n\u3053\u3046\u3044\u3046\u98a8\u306b\u66f8\u304f\u3084\u3064\u30fb\u30fb\u30fb\u8aac\u660e\u306b\u306a\u3063\u3068\u3089\u3093\u30fb\u30fb\u30fb\n\n```java\nCollection<String> col1 = new ArrayList<>();\n```\n\nGenerics\u306e\u7528\u8a9e\u306a\u3069\u306b\u95a2\u3057\u3066\u306f\u3053\u3053\u3092\u53c2\u7167\u3002\n[Java \u30b8\u30a7\u30cd\u30ea\u30af\u30b9\u306e\u30dd\u30a4\u30f3\u30c8](http://qiita.com/pebblip/items/1206f866980f2ff91e77)\n\nType Parameter\u306e\u547d\u540d\u898f\u7d04\n\n| Type Parameter | \u8aac\u660e |\n|:--|:--|\n| E  | Element  |\n| K  | Key  |\n| N  | Number  |\n| T  | Type  |\n| V  | Value  |\n| S,U,V etc.  | 2nd, 3rd, 4th types  |\n\n\n# ArrayList\nArrayList\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u3002\n\u52d5\u304f\u3053\u3068\u306f\u52d5\u304f\u3051\u3069\u3001\u4ee5\u4e0b\u306e\u3068\u3053\u308d\u3067\u3001\u76f8\u5f53Eclipse\u304b\u3089\u6012\u3089\u308c\u308b\u30fb\u30fb\u30fb\n\u300c`List myList = new ArrayList();`\u300d\n\n```java\n\t\t// Old usage of List - Raw type List\n\t\tList myList = new ArrayList();\n\t\tString s1 = \"Apple\";\n\t\tString s2 = \"Orange\";\n\t\tString s3 = \"Banana\";\n\n\t\tmyList.add(s1);\n\t\tmyList.add(s2);\n\t\tmyList.add(s3);\n\n\t\t// Size, Print List\n\t\tSystem.out.println(\"List size : \" + myList.size());\n\t\tfor (Object obj : myList) {\n\t\t\tSystem.out.println(obj);\n\t\t}\n\n\t\t// Sort List\n\t\tCollections.sort(myList);\n\t\tfor (Object obj : myList) {\n\t\t\tSystem.out.println(obj);\n\t\t}\n\t\t\n\t\t// Using Iterator\n\t\tIterator itr = myList.iterator();\n\t\twhile (itr.hasNext()) {\n\t\t\tSystem.out.println((String)itr.next());\n\t\t}\n```\n\nGenerics(\u30d1\u30e9\u30e1\u30fc\u30bf\u5316\u3055\u308c\u305f\u578b - parameterized type)\u3092\u4f7f\u3063\u305f\u4eca\u98a8\u306e\u3084\u308a\u65b9\uff08Java 7\u4ee5\u964d\uff09\u306f\u3053\u3061\u3089\u3002\n\u300c`List<String> myList = new ArrayList<>();`\u300d\u304c\u6b63\u89e3\u3002\n\u8981\u306f\u5fb9\u5e95\u7684\u306b\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0\u30ec\u30d9\u30eb\u3067\u578b\u4fdd\u8a3c\uff08type-safe\uff09\u3057\u308d\u3063\u3066\u3053\u3068\u3002\n\n```java\n\t\t// New usage of List - Generics\n\t\tList<String> myList = new ArrayList<>();\n\t\tString s1 = \"Apple\";\n\t\tString s2 = \"Orange\";\n\t\tString s3 = \"Banana\";\n\n\t\tmyList.add(s1);\n\t\tmyList.add(s2);\n\t\tmyList.add(s3);\n\t\t\n\t\t// Using Iterator\n\t\tIterator<String> itr = myList.iterator();\n\t\twhile (itr.hasNext()) {\n\t\t\tSystem.out.println((String)itr.next());\n\t\t}\n```\n\n# HashSet\nHashSet\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u3002\n\n```java\n\t\t// Use HashSet (Old Style)\n\t\tSet hs = new HashSet();\n\t\ths.add(\"Hello\");\n\t\ths.add(\"Dolly\");\n\t\t\n\t\t// Using Iterator\n\t\tIterator itr = hs.iterator();\n\t\twhile (itr.hasNext()) {\n\t\t\tSystem.out.println((String)itr.next());\n\t\t}\n\t\t\n\t\t// New Style\n\t\tSet<String> hs2 = new HashSet<>();\n\n\t\t// Using Iterator\n\t\tIterator<String> itr2 = hs2.iterator();\n\t\twhile (itr2.hasNext()) {\n\t\t\tSystem.out.println(itr2.next());\n\t\t}\n```\n\n# HashMap\nHashMap\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u3002\n\n```java\n\t\tMap<Integer, String> map1 = new HashMap<>();\n\t\t\n\t\tmap1.put(1, \"Cloud\");\n\t\tmap1.put(2, \"Big Data\");\n\t\tmap1.put(3, \"Machine Learning\");\n\t\t\n\t\t// key objects\n\t\tSet<Integer> keys = map1.keySet();\n\t\tfor (Object key : keys) {\n\t\t\tSystem.out.println(key + \": \" + map1.get(key));\n\t\t}\n```\n\n\n\n# ?Wildcard(\u975e\u5883\u754c\u30ef\u30a4\u30eb\u30c9\u30ab\u30fc\u30c9\u578b - unbounded wildcard type)\u306e\u4f8b\n\n```java\n\t// argument with ? wildcard\n\tpublic static void printList(List<?> list) {\n\t\tfor (Object obj : list ) {\n\t\t\tSystem.out.println(obj);\n\t\t}\n\t}\n\t\n\tpublic static void main(String[] args) {\n\t\tList<String> list1 = new ArrayList<>();\n\t\tlist1.add(\"Apple\");\n\t\tlist1.add(\"Grape\");\n\t\tprintList(list1);\n\t\t\n\t\tList<Integer> list2 = new ArrayList<>();\n\t\tlist2.add(100);\n\t\tlist2.add(300);\n\t\tprintList(list2);\n\t}\n```\n\n# Generic Type\u3092\u4f7f\u3063\u305fClass / Method\u4f8b\n\n```java\npublic class GenericTypeClassSample<T> {\n\tT height;\n\tT width;\n\t\n\tpublic GenericTypeClassSample(T width, T height) {\n\t\tsuper();\n\t\tthis.width = width;\n\t\tthis.height = height;\n\t}\n\n\tpublic T getWidth() {\n\t\treturn width;\n\t}\n\n\tpublic void setWidth(T width) {\n\t\tthis.width = width;\n\t}\n\n\tpublic T getHeight() {\n\t\treturn height;\n\t}\n\n\tpublic void setHeight(T height) {\n\t\tthis.height = height;\n\t}\n\n\tpublic static void main(String[] args) {\n\t\tGenericTypeClassSample<Integer> rect1 = new GenericTypeClassSample<>(10, 5);\n\t\tSystem.out.println(\"Area : \" + rect1.getHeight() * rect1.getWidth());\n\n\t\tGenericTypeClassSample<Double> rect2 = new GenericTypeClassSample<>(4.3, 5.7);\n\t\tSystem.out.println(\"Area : \" + rect2.getHeight() * rect2.getWidth());\n\n\t}\n}\n```\n"}