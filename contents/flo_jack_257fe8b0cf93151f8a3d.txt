{"context": " More than 1 year has passed since last update.\u30b3\u30f3\u30c8\u30ed\u30fc\u30e9\u306b\u30df\u30c3\u30af\u30b9\u30a4\u30f3\u3057\u3066\u3001 AdminAction \u3092\u4f7f\u3063\u3066\u51e6\u7406\u3092\u66f8\u304f\u3053\u3068\u3067\u3001\u8a8d\u8a3c\u3055\u308c\u3066\u3044\u308b\u3068\u304d\u306b\u306e\u307f\u753b\u9762\u3092\u8868\u793a\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\u30e6\u30fc\u30b6\u30fc\u540d\u3068\u30d1\u30b9\u30ef\u30fc\u30c9\u306f Basic \u8a8d\u8a3c\u3067\u884c\u308f\u308c\u3001 AdminAction \u304b\u3089\u4e0e\u3048\u3089\u308c\u305f request.userName \u3067\u3001\u8a8d\u8a3c\u3055\u308c\u305f\u540d\u524d\u304c\u5f97\u3089\u308c\u307e\u3059\u3002\nAdminSecure \u3068\u3044\u3046\u540d\u524d\u3067\u3059\u304c\u3001\u7ba1\u7406\u8005\u306b\u9650\u3063\u3066\u3044\u308b\u3068\u3044\u3046\u3053\u3068\u3067\u306f\u306a\u304f\u3001Basic \u8a8d\u8a3c\u3092\u884c\u3063\u3066\u3044\u308b\u3060\u3051\u3067\u3059\u3002\n\u30b3\u30f3\u30c8\u30ed\u30fc\u30e9\u3054\u3068\u306b\u8a8d\u8a3c\u3055\u308c\u308b\u540d\u524d\u3068\u30d1\u30b9\u30ef\u30fc\u30c9\u3092\u5909\u3048\u305f\u3044\u3068\u304d\u306f checkAccount \u3092\u30aa\u30fc\u30d0\u30fc\u30e9\u30a4\u30c9\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n\nAdminAction.scala\npackage controllers\n\nimport play.api._\nimport play.api.mvc._\n\n/**\n * \u7ba1\u7406\u8005\u306e\u30a2\u30ab\u30a6\u30f3\u30c8\u3092\u53d6\u308a\u6271\u3046\u30e2\u30b8\u30e5\u30fc\u30eb\n */\ntrait AdminSecure {\n  import play.api.mvc.Results._\n\n  private[this] val accounts = Map(\"admin\" -> \"password\")\n\n  protected val basicRealm = \"(my realm)\"\n\n  /** \u30e6\u30fc\u30b6\u30fc\u540d\u3068\u30d1\u30b9\u30ef\u30fc\u30c9\u304c\u4e00\u81f4\u3059\u308b\u304b\u3092\u8fd4\u3057\u307e\u3059 */\n  protected def checkAccount(userName: String, password: String) =\n    accounts.get(userName).filter(_ == password).nonEmpty\n\n\n  /**\n   * \u8a8d\u8a3c\u3092\u78ba\u8a8d\u3057\u3066\u5b9f\u884c\u3059\u308b\u30a2\u30af\u30b7\u30e7\u30f3\n   */\n  object AdminAction {\n    private val AUTHORIZATION = \"authorization\"\n    private val WWW_AUTHENTICATE = \"WWW-Authenticate\"\n\n    private def realm = \"Basic realm=\\\"%s\\\"\".format(basicRealm)\n\n    def apply(f: AuthenticatedRequest[AnyContent] => Result): Action[AnyContent] =\n      apply(BodyParsers.parse.anyContent)(f)\n\n    def apply[A](p: BodyParser[A])(f: AuthenticatedRequest[A] => Result) = Action(p) { request =>\n      request.headers.get(AUTHORIZATION) match {\n        case Some(BasicAuthorization(name, pw)) if checkAccount(name, pw) =>\n          f(new AuthenticatedRequest(name, request))\n        case _ => Unauthorized(\"need admin login\").withHeaders(WWW_AUTHENTICATE -> realm)\n      }\n    }\n\n    /**\n     * Basic \u8a8d\u8a3c\u306e\u5024\u306e\u53d6\u308a\u6271\u3044\n     */\n    private object BasicAuthorization {\n      private val basicPefix = \"Basic \"\n      private val AUTHORIZATION_PARAMS = \"\"\"([^:]+?):(.+)\"\"\".r\n\n      /**\n       * Base64 \u30a8\u30f3\u30b3\u30fc\u30c9\u3067\u6587\u5b57\u5217\u5316\u3055\u308c\u305f Basic \u8a8d\u8a3c\u5024\u3092\u3001\u30e6\u30fc\u30b6\u30fc\u540d\u3068\u30d1\u30b9\u30ef\u30fc\u30c9\u306b\u5206\u89e3\u3057\u3066\u8fd4\u3057\u307e\u3059\n       *\n       * @param auth Base64 \u30a8\u30f3\u30b3\u30fc\u30c9\u6587\u5b57\u5217\n       * @return \u540d\u524d\u3068\u30d1\u30b9\u30ef\u30fc\u30c9\n       */\n      private[this] def decode(auth: String): Option[(String, String)] = {\n        val d = javax.xml.bind.DatatypeConverter.parseBase64Binary(auth)\n\n        new String(d, \"utf-8\") match {\n          case AUTHORIZATION_PARAMS(username, password) => Some(username, password)\n          case _ => None\n        }\n      }\n\n      /**\n       * WWW-Authenticate \u30d8\u30c3\u30c0\u306e\u5024\u304b\u3089\u3001\u30e6\u30fc\u30b6\u30fc\u540d\u3068\u30d1\u30b9\u30ef\u30fc\u30c9\u3092\u53d6\u308a\u51fa\u3057\u307e\u3059\u3002\n       *\n       * @param authorization WWW-Authenticate \u30d8\u30c3\u30c0\u5024\u3002\u30d8\u30c3\u30c0\u306e\u540d\u524d\u306f\u542b\u307e\u306a\u3044\u3002\n       * @return \u540d\u524d\u3068\u30d1\u30b9\u30ef\u30fc\u30c9\n       */\n      def unapply(authorization: String): Option[(String, String)] = authorization match {\n        case s if s startsWith basicPefix => decode(s drop basicPefix.length)\n        case _ => None\n      }\n    }\n\n    /** \u8a8d\u8a3c\u3055\u308c\u3066\u5b9f\u884c\u3059\u308b\u30ea\u30af\u30a8\u30b9\u30c8 */\n    class AuthenticatedRequest[A] private[controllers]\n      (val userName: String, request: Request[A]) extends WrappedRequest(request)\n  }\n}\n\n\n\n\u5b9f\u88c5\u65b9\u6cd5\n\nApplication.scala\npackage controllers\n\nimport play.api._\nimport play.api.mvc._\n\nobject Application extends Controller with AdminSecure {\n  def adminHome = AdminAction { implicit request =>\n    Ok(\"Welcome back, \" + request.userName)\n  }\n}\n\n\n\u30b3\u30f3\u30c8\u30ed\u30fc\u30e9\u306b\u30df\u30c3\u30af\u30b9\u30a4\u30f3\u3057\u3066\u3001 `AdminAction` \u3092\u4f7f\u3063\u3066\u51e6\u7406\u3092\u66f8\u304f\u3053\u3068\u3067\u3001\u8a8d\u8a3c\u3055\u308c\u3066\u3044\u308b\u3068\u304d\u306b\u306e\u307f\u753b\u9762\u3092\u8868\u793a\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\n\u30e6\u30fc\u30b6\u30fc\u540d\u3068\u30d1\u30b9\u30ef\u30fc\u30c9\u306f Basic \u8a8d\u8a3c\u3067\u884c\u308f\u308c\u3001 `AdminAction` \u304b\u3089\u4e0e\u3048\u3089\u308c\u305f `request.userName` \u3067\u3001\u8a8d\u8a3c\u3055\u308c\u305f\u540d\u524d\u304c\u5f97\u3089\u308c\u307e\u3059\u3002\n\n`AdminSecure` \u3068\u3044\u3046\u540d\u524d\u3067\u3059\u304c\u3001\u7ba1\u7406\u8005\u306b\u9650\u3063\u3066\u3044\u308b\u3068\u3044\u3046\u3053\u3068\u3067\u306f\u306a\u304f\u3001Basic \u8a8d\u8a3c\u3092\u884c\u3063\u3066\u3044\u308b\u3060\u3051\u3067\u3059\u3002\n\u30b3\u30f3\u30c8\u30ed\u30fc\u30e9\u3054\u3068\u306b\u8a8d\u8a3c\u3055\u308c\u308b\u540d\u524d\u3068\u30d1\u30b9\u30ef\u30fc\u30c9\u3092\u5909\u3048\u305f\u3044\u3068\u304d\u306f `checkAccount` \u3092\u30aa\u30fc\u30d0\u30fc\u30e9\u30a4\u30c9\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n\n```scala:AdminAction.scala\npackage controllers\n\nimport play.api._\nimport play.api.mvc._\n\n/**\n * \u7ba1\u7406\u8005\u306e\u30a2\u30ab\u30a6\u30f3\u30c8\u3092\u53d6\u308a\u6271\u3046\u30e2\u30b8\u30e5\u30fc\u30eb\n */\ntrait AdminSecure {\n  import play.api.mvc.Results._\n\n  private[this] val accounts = Map(\"admin\" -> \"password\")\n\n  protected val basicRealm = \"(my realm)\"\n\n  /** \u30e6\u30fc\u30b6\u30fc\u540d\u3068\u30d1\u30b9\u30ef\u30fc\u30c9\u304c\u4e00\u81f4\u3059\u308b\u304b\u3092\u8fd4\u3057\u307e\u3059 */\n  protected def checkAccount(userName: String, password: String) =\n    accounts.get(userName).filter(_ == password).nonEmpty\n\n\n  /**\n   * \u8a8d\u8a3c\u3092\u78ba\u8a8d\u3057\u3066\u5b9f\u884c\u3059\u308b\u30a2\u30af\u30b7\u30e7\u30f3\n   */\n  object AdminAction {\n    private val AUTHORIZATION = \"authorization\"\n    private val WWW_AUTHENTICATE = \"WWW-Authenticate\"\n\n    private def realm = \"Basic realm=\\\"%s\\\"\".format(basicRealm)\n\n    def apply(f: AuthenticatedRequest[AnyContent] => Result): Action[AnyContent] =\n      apply(BodyParsers.parse.anyContent)(f)\n\n    def apply[A](p: BodyParser[A])(f: AuthenticatedRequest[A] => Result) = Action(p) { request =>\n      request.headers.get(AUTHORIZATION) match {\n        case Some(BasicAuthorization(name, pw)) if checkAccount(name, pw) =>\n          f(new AuthenticatedRequest(name, request))\n        case _ => Unauthorized(\"need admin login\").withHeaders(WWW_AUTHENTICATE -> realm)\n      }\n    }\n\n    /**\n     * Basic \u8a8d\u8a3c\u306e\u5024\u306e\u53d6\u308a\u6271\u3044\n     */\n    private object BasicAuthorization {\n      private val basicPefix = \"Basic \"\n      private val AUTHORIZATION_PARAMS = \"\"\"([^:]+?):(.+)\"\"\".r\n\n      /**\n       * Base64 \u30a8\u30f3\u30b3\u30fc\u30c9\u3067\u6587\u5b57\u5217\u5316\u3055\u308c\u305f Basic \u8a8d\u8a3c\u5024\u3092\u3001\u30e6\u30fc\u30b6\u30fc\u540d\u3068\u30d1\u30b9\u30ef\u30fc\u30c9\u306b\u5206\u89e3\u3057\u3066\u8fd4\u3057\u307e\u3059\n       *\n       * @param auth Base64 \u30a8\u30f3\u30b3\u30fc\u30c9\u6587\u5b57\u5217\n       * @return \u540d\u524d\u3068\u30d1\u30b9\u30ef\u30fc\u30c9\n       */\n      private[this] def decode(auth: String): Option[(String, String)] = {\n        val d = javax.xml.bind.DatatypeConverter.parseBase64Binary(auth)\n\n        new String(d, \"utf-8\") match {\n          case AUTHORIZATION_PARAMS(username, password) => Some(username, password)\n          case _ => None\n        }\n      }\n\n      /**\n       * WWW-Authenticate \u30d8\u30c3\u30c0\u306e\u5024\u304b\u3089\u3001\u30e6\u30fc\u30b6\u30fc\u540d\u3068\u30d1\u30b9\u30ef\u30fc\u30c9\u3092\u53d6\u308a\u51fa\u3057\u307e\u3059\u3002\n       *\n       * @param authorization WWW-Authenticate \u30d8\u30c3\u30c0\u5024\u3002\u30d8\u30c3\u30c0\u306e\u540d\u524d\u306f\u542b\u307e\u306a\u3044\u3002\n       * @return \u540d\u524d\u3068\u30d1\u30b9\u30ef\u30fc\u30c9\n       */\n      def unapply(authorization: String): Option[(String, String)] = authorization match {\n        case s if s startsWith basicPefix => decode(s drop basicPefix.length)\n        case _ => None\n      }\n    }\n\n    /** \u8a8d\u8a3c\u3055\u308c\u3066\u5b9f\u884c\u3059\u308b\u30ea\u30af\u30a8\u30b9\u30c8 */\n    class AuthenticatedRequest[A] private[controllers]\n      (val userName: String, request: Request[A]) extends WrappedRequest(request)\n  }\n}\n```\n\n## \u5b9f\u88c5\u65b9\u6cd5\n\n```scala:Application.scala\npackage controllers\n\nimport play.api._\nimport play.api.mvc._\n\nobject Application extends Controller with AdminSecure {\n  def adminHome = AdminAction { implicit request =>\n    Ok(\"Welcome back, \" + request.userName)\n  }\n}", "tags": ["Scala", "PlayFramework2.x"]}