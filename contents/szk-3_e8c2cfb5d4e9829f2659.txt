{"context": " More than 1 year has passed since last update.\n\u30ab\u30ec\u30f3\u30c0\u30fc\u3084\u30ea\u30de\u30a4\u30f3\u30c0\u30fc\u3092\u6271\u3046EventKit\u30d5\u30ec\u30fc\u30e0\u30ef\u30fc\u30af\n\n\n\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u3092\u8d77\u52d5\u3057\u306a\u304f\u3066\u3082\u64cd\u4f5c\u3067\u304d\u308b\nAppleScript\u306b\u5bfe\u5fdc\u3057\u3066\u3044\u306a\u3044\u9805\u76ee\u3092\u53d6\u5f97\u3001\u8a2d\u5b9a\u3067\u304d\u308b\n\n\nEverntKit\u30d5\u30ec\u30fc\u30e0\u30ef\u30fc\u30af\u306b\u3042\u308b\u30a4\u30d9\u30f3\u30c8\u306e\u7e70\u308a\u8fd4\u3057\u3092\u7ba1\u7406\u3059\u308bEKRecurrenceRule\u30af\u30e9\u30b9\n\n\n\ninitRecurrenceWithFrequency:interval:end:\u30e1\u30bd\u30c3\u30c9\u3067\u4f5c\u6210\n\n\n\u4e00\u65b9\u3067\u3001\u4e00\u822c\u7684\u306a\u30ab\u30ec\u30f3\u30c0\u30fc\u3067\u7e70\u308a\u8fd4\u3057\u30eb\u30fc\u30eb\u3092\u8868\u3059\u6587\u5b57\u5217\u3068\u3057\u3066\u3088\u304f\u4f7f\u308f\u308c\u308bRRULE (Recurrence Rule)\n\n\n\u4f8b\uff1aFREQ=DAILY;INTERVAL=2\u306f\u300c\u9694\u65e5\u306e\u7e70\u308a\u8fd4\u3057\u300d\u3092\u610f\u5473\u3059\u308b\n\niCalendar RFC\u306e\u4e00\u90e8\n\n\n\u4e21\u8005\u3092\u76f8\u4e92\u5909\u63db\u3059\u308bAppleScript\u30cf\u30f3\u30c9\u30e9\u3092\u4f5c\u6210\n\n\nEKRecurrenceRule\u3067\u306f1\u65e5\u672a\u6e80\u306e\u7e70\u308a\u8fd4\u3057\u306b\u5bfe\u5fdc\u3057\u3066\u3044\u306a\u3044\u305f\u3081\u3001FREQ=MINUTELY\u306a\u3069\u306f\u7121\u8996\n\u9031\u306e\u958b\u59cb\u66dc\u65e5\u3092\u6c7a\u3081\u308bWKST\u3082EKRucurrenceRule\u3067\u306f\u8a2d\u5b9a\u3067\u304d\u306a\u3044\u6a21\u69d8\n\n\n\nuse scripting additions\nuse framework \"EventKit\"\nuse framework \"Foundation\"\n\n--Every other day\nset recurrenceRule to my recurrenceRuleFromString(\"FREQ=DAILY;INTERVAL=2\")\n--> \u00abclass ocid\u00bb id \u00abdata optr00000000200393FFB97F0000\u00bb\n\nmy stringFromRecurrenceRule(recurrenceRule)\n--> \"FREQ=DAILY;INTERVAL=2\"\n\non recurrenceRuleFromString(recur as text)\n    --require framework: EventKit, Foundation\n\n    --recur\u3092\u30d1\u30fc\u30b9\u3057\u3066dictionary\u306b\u5909\u63db\n    set RRULE to current application's NSMutableDictionary's dictionaryWithObject:1 forKey:\"INTERVAL\"\n    set scanner to current application's NSScanner's scannerWithString:(recur & \";\")\n    repeat until scanner's atEnd as boolean\n        set {scanResult, |name|} to scanner's scanUpToString:\"=\" intoString:(reference)\n        set scanResult to scanner's scanString:\"=\" intoString:(missing value)\n        set {scanResult, value} to scanner's scanUpToString:\";\" intoString:(reference)\n        set scanResult to scanner's scanString:\";\" intoString:(missing value)\n        try\n\n            if |name|'s isEqualToString:\"FREQ\" then\n                set freqDictionary to (current application's NSDictionary's dictionaryWithObjects:{current application's EKRecurrenceFrequencyDaily, current application's EKRecurrenceFrequencyWeekly, current application's EKRecurrenceFrequencyMonthly, current application's EKRecurrenceFrequencyYearly} forKeys:{\"DAILY\", \"WEEKLY\", \"MONTHLY\", \"YEARLY\"})\n                set value to (freqDictionary's objectForKey:value)\n\n            else if |name|'s isEqualToString:\"UNTIL\" then\n                if (value's |length| as integer) = 8 then\n                    set endDate to my dateFromStringUsingFormat(value, \"yyyyMMdd\")\n                else if (value's |length| as integer) = 15 then\n                    set endDate to my dateFromStringUsingFormat(value, \"yyyyMMdd'T'HHmmss\")\n                else if (value's |length| as integer) = 16 then\n                    set endDate to my dateFromStringUsingFormat(value, \"yyyyMMdd'T'HHmmss'Z'\")\n                    set endDate to my shiftDateFromGMT(endDate)\n                end if\n                set value to (current application's EKRecurrenceEnd's recurrenceEndWithEndDate:endDate)\n                set |name| to \"END\"\n\n            else if |name|'s isEqualToString:\"COUNT\" then\n                set value to (current application's EKRecurrenceEnd's recurrenceEndWithOccurrenceCount:(value's integerValue))\n                set |name| to \"END\"\n\n            else if |name|'s isEqualToString:\"INTERVAL\" then\n                set value to value's integerValue\n\n            else if |name|'s isEqualToString:\"BYDAY\" then\n                set weekdayDictionary to (current application's NSDictionary's dictionaryWithObjects:{current application's EKSunday, current application's EKMonday, current application's EKTuesday, current application's EKWednesday, current application's EKThursday, current application's EKFriday, current application's EKSaturday} forKeys:{\"SU\", \"MO\", \"TU\", \"WE\", \"TH\", \"FR\", \"SA\"})\n                set recurrenceDayOfWeekArray to current application's NSMutableArray's array()\n                repeat with weekdaynum in (value's componentsSeparatedByString:\",\") as list\n                    set |weekday| to (weekdayDictionary's objectForKey:(text -2 thru -1 of weekdaynum))\n                    if (count weekdaynum) = 2 then\n                        set recurrenceDayOfWeek to (current application's EKRecurrenceDayOfWeek's dayOfWeek:|weekday|)\n                    else\n                        set recurrenceDayOfWeek to (current application's EKRecurrenceDayOfWeek's dayOfWeek:|weekday| weekNumber:(text 1 thru -3 of weekdaynum as integer))\n                    end if\n                    (recurrenceDayOfWeekArray's addObject:recurrenceDayOfWeek)\n                end repeat\n                set value to recurrenceDayOfWeekArray\n\n            else if (current application's NSArray's arrayWithArray:{\"BYMONTHDAY\", \"BYYEARDAY\", \"BYWEEKNO\", \"BYMONTH\", \"BYSETPOS\"})'s containsObject:|name| then\n                set value to ((value's componentsSeparatedByString:\",\")'s valueForKeyPath:\"self.integerValue\")\n\n            else\n                set value to |name| & \"=\" & value\n                set |name| to \"UNRECOGNIZED NAME\"\n            end if\n\n            --RRULE\u306b\u8ffd\u52a0\n            (RRULE's setObject:value forKey:|name|)\n\n            --\u30a8\u30e9\u30fc\n        on error\n            error \"Invalid \" & |name| & \" in Recurrence Rule: \" & |name| & \"=\" & value\n        end try\n    end repeat\n\n    --EKRecurrenceRule\u4f5c\u6210\n    set nameSet to current application's NSSet's setWithArray:(RRULE's allKeys())\n    if nameSet's isSubsetOfSet:(current application's NSSet's setWithArray:{\"FREQ\", \"INTERVAL\", \"END\", \"UNRECOGNIZED NAME\"}) then\n        return current application's EKRecurrenceRule's alloc()'s initRecurrenceWithFrequency:(RRULE's objectForKey:\"FREQ\") interval:(RRULE's objectForKey:\"INTERVAL\") |end|:(RRULE's objectForKey:\"END\")\n    else\n        return current application's EKRecurrenceRule's alloc()'s initRecurrenceWithFrequency:(RRULE's objectForKey:\"FREQ\") interval:(RRULE's objectForKey:\"INTERVAL\") daysOfTheWeek:(RRULE's objectForKey:\"BYDAY\") daysOfTheMonth:(RRULE's objectForKey:\"BYMONTHDAY\") monthsOfTheYear:(RRULE's objectForKey:\"BYMONTH\") weeksOfTheYear:(RRULE's objectForKey:\"BYWEEKNO\") daysOfTheYear:(RRULE's objectForKey:\"BYYEARDAY\") setPositions:(RRULE's objectForKey:\"BYSETPOS\") |end|:(RRULE's objectForKey:\"END\")\n    end if\nend recurrenceRuleFromString\n\non stringFromRecurrenceRule(recurrenceRule)\n    --require framework: Foundation\n    return (recurrenceRule's |description|'s componentsSeparatedByString:space)'s lastObject() as text\nend stringFromRecurrenceRule\n\non dateFromStringUsingFormat(dateString as text, dateFormat as text)\n    --reference: UTS #35: Unicode Locale Data Markup Language - http://www.unicode.org/reports/tr35/tr35-25.html#Date_Format_Patterns\n    set dateFormatter to my currentDateFormatter(dateFormat)\n    return (dateFormatter's dateFromString:dateString) as date\nend dateFromStringUsingFormat\n\non shiftDateFromGMT(aDate as date)\n    global timeToGMT\n    try\n        timeToGMT\n    on error number -2753\n        set timeToGMT to time to GMT\n    end try\n    return aDate + timeToGMT\nend shiftDateFromGMT\n\non currentDateFormatter(dateFormat as text)\n    --require framework: Foundation\n    set dateFormatter to current application's NSDateFormatter's alloc()'s init()\n    set dateFormatter's locale to current application's NSLocale's currentLocale()\n    set dateFormatter's timeZone to current application's NSTimeZone's localTimeZone()\n    set dateFormatter's dateFormat to dateFormat\n    return dateFormatter\nend currentDateFormatter\n\n\n\u66f4\u65b0\u5c65\u6b74\n\n2016-02-03: EventKit\u30d5\u30ec\u30fc\u30e0\u30ef\u30fc\u30af\u3092\u4f7f\u3063\u3066stringFromRecurrenceRule\u30cf\u30f3\u30c9\u30e9\u3092\u4f5c\u6210\n2016-02-05: EKRecurrenceRule\u3092RRULE\u6587\u5b57\u5217\u306b\u5909\u63db\u3059\u308bstringFromRecurrenceRule\u30cf\u30f3\u30c9\u30e9\u3092\u4f5c\u6210\n2016-03-04: recurrenceRuleFromString\u30cf\u30f3\u30c9\u30e9\u3067recur\u306e\u30d1\u30fc\u30b9\u306bNSScanner\u3092\u4f7f\u7528\n\n\n\n* \u30ab\u30ec\u30f3\u30c0\u30fc\u3084\u30ea\u30de\u30a4\u30f3\u30c0\u30fc\u3092\u6271\u3046EventKit\u30d5\u30ec\u30fc\u30e0\u30ef\u30fc\u30af\n\t* \u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u3092\u8d77\u52d5\u3057\u306a\u304f\u3066\u3082\u64cd\u4f5c\u3067\u304d\u308b\n\t* AppleScript\u306b\u5bfe\u5fdc\u3057\u3066\u3044\u306a\u3044\u9805\u76ee\u3092\u53d6\u5f97\u3001\u8a2d\u5b9a\u3067\u304d\u308b\n* EverntKit\u30d5\u30ec\u30fc\u30e0\u30ef\u30fc\u30af\u306b\u3042\u308b\u30a4\u30d9\u30f3\u30c8\u306e\u7e70\u308a\u8fd4\u3057\u3092\u7ba1\u7406\u3059\u308bEKRecurrenceRule\u30af\u30e9\u30b9\n\t* `initRecurrenceWithFrequency:interval:end:`\u30e1\u30bd\u30c3\u30c9\u3067\u4f5c\u6210\n* \u4e00\u65b9\u3067\u3001\u4e00\u822c\u7684\u306a\u30ab\u30ec\u30f3\u30c0\u30fc\u3067\u7e70\u308a\u8fd4\u3057\u30eb\u30fc\u30eb\u3092\u8868\u3059\u6587\u5b57\u5217\u3068\u3057\u3066\u3088\u304f\u4f7f\u308f\u308c\u308bRRULE (Recurrence Rule)\n\t* \u4f8b\uff1a`FREQ=DAILY;INTERVAL=2`\u306f\u300c\u9694\u65e5\u306e\u7e70\u308a\u8fd4\u3057\u300d\u3092\u610f\u5473\u3059\u308b\n\t* [iCalendar RFC](http://www.ietf.org/rfc/rfc2445.txt)\u306e\u4e00\u90e8\n* \u4e21\u8005\u3092\u76f8\u4e92\u5909\u63db\u3059\u308bAppleScript\u30cf\u30f3\u30c9\u30e9\u3092\u4f5c\u6210\n\t* EKRecurrenceRule\u3067\u306f1\u65e5\u672a\u6e80\u306e\u7e70\u308a\u8fd4\u3057\u306b\u5bfe\u5fdc\u3057\u3066\u3044\u306a\u3044\u305f\u3081\u3001`FREQ=MINUTELY`\u306a\u3069\u306f\u7121\u8996\n\t* \u9031\u306e\u958b\u59cb\u66dc\u65e5\u3092\u6c7a\u3081\u308b`WKST`\u3082EKRucurrenceRule\u3067\u306f\u8a2d\u5b9a\u3067\u304d\u306a\u3044\u6a21\u69d8\n\n\n\n```AppleScript\nuse scripting additions\nuse framework \"EventKit\"\nuse framework \"Foundation\"\n\n--Every other day\nset recurrenceRule to my recurrenceRuleFromString(\"FREQ=DAILY;INTERVAL=2\")\n--> \u00abclass ocid\u00bb id \u00abdata optr00000000200393FFB97F0000\u00bb\n\nmy stringFromRecurrenceRule(recurrenceRule)\n--> \"FREQ=DAILY;INTERVAL=2\"\n\non recurrenceRuleFromString(recur as text)\n\t--require framework: EventKit, Foundation\n\t\n\t--recur\u3092\u30d1\u30fc\u30b9\u3057\u3066dictionary\u306b\u5909\u63db\n\tset RRULE to current application's NSMutableDictionary's dictionaryWithObject:1 forKey:\"INTERVAL\"\n\tset scanner to current application's NSScanner's scannerWithString:(recur & \";\")\n\trepeat until scanner's atEnd as boolean\n\t\tset {scanResult, |name|} to scanner's scanUpToString:\"=\" intoString:(reference)\n\t\tset scanResult to scanner's scanString:\"=\" intoString:(missing value)\n\t\tset {scanResult, value} to scanner's scanUpToString:\";\" intoString:(reference)\n\t\tset scanResult to scanner's scanString:\";\" intoString:(missing value)\n\t\ttry\n\t\t\t\n\t\t\tif |name|'s isEqualToString:\"FREQ\" then\n\t\t\t\tset freqDictionary to (current application's NSDictionary's dictionaryWithObjects:{current application's EKRecurrenceFrequencyDaily, current application's EKRecurrenceFrequencyWeekly, current application's EKRecurrenceFrequencyMonthly, current application's EKRecurrenceFrequencyYearly} forKeys:{\"DAILY\", \"WEEKLY\", \"MONTHLY\", \"YEARLY\"})\n\t\t\t\tset value to (freqDictionary's objectForKey:value)\n\t\t\t\t\n\t\t\telse if |name|'s isEqualToString:\"UNTIL\" then\n\t\t\t\tif (value's |length| as integer) = 8 then\n\t\t\t\t\tset endDate to my dateFromStringUsingFormat(value, \"yyyyMMdd\")\n\t\t\t\telse if (value's |length| as integer) = 15 then\n\t\t\t\t\tset endDate to my dateFromStringUsingFormat(value, \"yyyyMMdd'T'HHmmss\")\n\t\t\t\telse if (value's |length| as integer) = 16 then\n\t\t\t\t\tset endDate to my dateFromStringUsingFormat(value, \"yyyyMMdd'T'HHmmss'Z'\")\n\t\t\t\t\tset endDate to my shiftDateFromGMT(endDate)\n\t\t\t\tend if\n\t\t\t\tset value to (current application's EKRecurrenceEnd's recurrenceEndWithEndDate:endDate)\n\t\t\t\tset |name| to \"END\"\n\t\t\t\t\n\t\t\telse if |name|'s isEqualToString:\"COUNT\" then\n\t\t\t\tset value to (current application's EKRecurrenceEnd's recurrenceEndWithOccurrenceCount:(value's integerValue))\n\t\t\t\tset |name| to \"END\"\n\t\t\t\t\n\t\t\telse if |name|'s isEqualToString:\"INTERVAL\" then\n\t\t\t\tset value to value's integerValue\n\t\t\t\t\n\t\t\telse if |name|'s isEqualToString:\"BYDAY\" then\n\t\t\t\tset weekdayDictionary to (current application's NSDictionary's dictionaryWithObjects:{current application's EKSunday, current application's EKMonday, current application's EKTuesday, current application's EKWednesday, current application's EKThursday, current application's EKFriday, current application's EKSaturday} forKeys:{\"SU\", \"MO\", \"TU\", \"WE\", \"TH\", \"FR\", \"SA\"})\n\t\t\t\tset recurrenceDayOfWeekArray to current application's NSMutableArray's array()\n\t\t\t\trepeat with weekdaynum in (value's componentsSeparatedByString:\",\") as list\n\t\t\t\t\tset |weekday| to (weekdayDictionary's objectForKey:(text -2 thru -1 of weekdaynum))\n\t\t\t\t\tif (count weekdaynum) = 2 then\n\t\t\t\t\t\tset recurrenceDayOfWeek to (current application's EKRecurrenceDayOfWeek's dayOfWeek:|weekday|)\n\t\t\t\t\telse\n\t\t\t\t\t\tset recurrenceDayOfWeek to (current application's EKRecurrenceDayOfWeek's dayOfWeek:|weekday| weekNumber:(text 1 thru -3 of weekdaynum as integer))\n\t\t\t\t\tend if\n\t\t\t\t\t(recurrenceDayOfWeekArray's addObject:recurrenceDayOfWeek)\n\t\t\t\tend repeat\n\t\t\t\tset value to recurrenceDayOfWeekArray\n\t\t\t\t\n\t\t\telse if (current application's NSArray's arrayWithArray:{\"BYMONTHDAY\", \"BYYEARDAY\", \"BYWEEKNO\", \"BYMONTH\", \"BYSETPOS\"})'s containsObject:|name| then\n\t\t\t\tset value to ((value's componentsSeparatedByString:\",\")'s valueForKeyPath:\"self.integerValue\")\n\t\t\t\t\n\t\t\telse\n\t\t\t\tset value to |name| & \"=\" & value\n\t\t\t\tset |name| to \"UNRECOGNIZED NAME\"\n\t\t\tend if\n\t\t\t\n\t\t\t--RRULE\u306b\u8ffd\u52a0\n\t\t\t(RRULE's setObject:value forKey:|name|)\n\t\t\t\n\t\t\t--\u30a8\u30e9\u30fc\n\t\ton error\n\t\t\terror \"Invalid \" & |name| & \" in Recurrence Rule: \" & |name| & \"=\" & value\n\t\tend try\n\tend repeat\n\t\n\t--EKRecurrenceRule\u4f5c\u6210\n\tset nameSet to current application's NSSet's setWithArray:(RRULE's allKeys())\n\tif nameSet's isSubsetOfSet:(current application's NSSet's setWithArray:{\"FREQ\", \"INTERVAL\", \"END\", \"UNRECOGNIZED NAME\"}) then\n\t\treturn current application's EKRecurrenceRule's alloc()'s initRecurrenceWithFrequency:(RRULE's objectForKey:\"FREQ\") interval:(RRULE's objectForKey:\"INTERVAL\") |end|:(RRULE's objectForKey:\"END\")\n\telse\n\t\treturn current application's EKRecurrenceRule's alloc()'s initRecurrenceWithFrequency:(RRULE's objectForKey:\"FREQ\") interval:(RRULE's objectForKey:\"INTERVAL\") daysOfTheWeek:(RRULE's objectForKey:\"BYDAY\") daysOfTheMonth:(RRULE's objectForKey:\"BYMONTHDAY\") monthsOfTheYear:(RRULE's objectForKey:\"BYMONTH\") weeksOfTheYear:(RRULE's objectForKey:\"BYWEEKNO\") daysOfTheYear:(RRULE's objectForKey:\"BYYEARDAY\") setPositions:(RRULE's objectForKey:\"BYSETPOS\") |end|:(RRULE's objectForKey:\"END\")\n\tend if\nend recurrenceRuleFromString\n\non stringFromRecurrenceRule(recurrenceRule)\n\t--require framework: Foundation\n\treturn (recurrenceRule's |description|'s componentsSeparatedByString:space)'s lastObject() as text\nend stringFromRecurrenceRule\n\non dateFromStringUsingFormat(dateString as text, dateFormat as text)\n\t--reference: UTS #35: Unicode Locale Data Markup Language - http://www.unicode.org/reports/tr35/tr35-25.html#Date_Format_Patterns\n\tset dateFormatter to my currentDateFormatter(dateFormat)\n\treturn (dateFormatter's dateFromString:dateString) as date\nend dateFromStringUsingFormat\n\non shiftDateFromGMT(aDate as date)\n\tglobal timeToGMT\n\ttry\n\t\ttimeToGMT\n\ton error number -2753\n\t\tset timeToGMT to time to GMT\n\tend try\n\treturn aDate + timeToGMT\nend shiftDateFromGMT\n\non currentDateFormatter(dateFormat as text)\n\t--require framework: Foundation\n\tset dateFormatter to current application's NSDateFormatter's alloc()'s init()\n\tset dateFormatter's locale to current application's NSLocale's currentLocale()\n\tset dateFormatter's timeZone to current application's NSTimeZone's localTimeZone()\n\tset dateFormatter's dateFormat to dateFormat\n\treturn dateFormatter\nend currentDateFormatter\n```\n\n\n## \u66f4\u65b0\u5c65\u6b74\n\n* 2016-02-03: EventKit\u30d5\u30ec\u30fc\u30e0\u30ef\u30fc\u30af\u3092\u4f7f\u3063\u3066`stringFromRecurrenceRule`\u30cf\u30f3\u30c9\u30e9\u3092\u4f5c\u6210\n* 2016-02-05: EKRecurrenceRule\u3092RRULE\u6587\u5b57\u5217\u306b\u5909\u63db\u3059\u308b`stringFromRecurrenceRule`\u30cf\u30f3\u30c9\u30e9\u3092\u4f5c\u6210\n* 2016-03-04: `recurrenceRuleFromString`\u30cf\u30f3\u30c9\u30e9\u3067`recur`\u306e\u30d1\u30fc\u30b9\u306bNSScanner\u3092\u4f7f\u7528\n\n", "tags": ["AppleScript"]}