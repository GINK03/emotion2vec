{"context": " More than 1 year has passed since last update.\n\njson11\u3068\u306f\nC++11\u3067\u66f8\u304b\u308c\u305fjson\u30e9\u30a4\u30d6\u30e9\u30ea\u3067\n\u4f7f\u3044\u65b9\u304c\u7dba\u9e97\u306a\u305f\u3081\u3001\u597d\u307e\u308c\u3066\u4f7f\u308f\u308c\u3066\u3044\u308b\u3068\u601d\u3044\u307e\u3059\n\u79c1\u306f\u3001\u4ee5\u524d\u306fpicojson\u3092\u4f7f\u3063\u3066\u307e\u3057\u305f\u304c\u6700\u8fd1\u306fjson11\u3092\u4f7f\u3063\u3066\u307e\u3059\nhttps://github.com/dropbox/json11/blob/master\n\u3053\u3053\u304b\u3089\u3000json11.cpp\u3068json11.hpp\u3092\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3057\u3066\u4f7f\u3063\u3066\u307e\u3059\n\n\u4f7f\u3044\u65b9\nhttps://github.com/dropbox/json11/blob/master/test.cpp\n\u306b\u30b5\u30f3\u30d7\u30eb\u304c\u66f8\u3044\u3066\u3044\u308b\u306e\u3067\u8aad\u3081\u3070\u308f\u304b\u308a\u307e\u3059\u304c\u3001\u88dc\u8db3\u3057\u307e\u3059\n\njson\u30d1\u30fc\u30b9\n\u30b5\u30f3\u30d7\u30eb\u306e\u3088\u3046\u306b\n\nparse\n\n    const string simple_test =\n        R\"({\"k1\":\"v1\", \"k2\":42, \"k3\":[\"a\",123,true,false,null]})\";\n\n    string err;\n    auto json = json11::Json::parse(simple_test, err);\n\n\n\n\u3068\u3059\u308c\u3070\u3001\u7c21\u5358\u306b\u6587\u5b57\u5217\u304b\u3089\u3000json\u306b\u30d1\u30fc\u30b9\u51fa\u6765\u307e\u3059\u3002\njson.dump()\u3000\u3068\u3059\u308b\u3068\u3001json\u306e\u6587\u5b57\u5217\u304c\u53d6\u5f97\u51fa\u6765\u307e\u3059\n\u30d1\u30fc\u30b9\u30a8\u30e9\u30fc\u304c\u3042\u308c\u3070 err\u306b\u30a8\u30e9\u30fc\u30e1\u30c3\u30bb\u30fc\u30b8\u304c\u8fd4\u3063\u3066\u304d\u307e\u3059\njson\u306f \u30b7\u30f3\u30b0\u30eb\u30af\u30aa\u30fc\u30c8\u3067\u306f\u30c0\u30e1\u306a\u306e\u3067\u3001\u30c0\u30d6\u30eb\u30af\u30aa\u30fc\u30c8\u306e\u30a8\u30b9\u30b1\u30fc\u30d7\u304c\u9762\u5012\u3067\u3059\u304c\n\u305d\u3093\u306a\u6642 R\"()\" \u3092\u3064\u304b\u3063\u3066\u3000\u30d2\u30a2\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u306b\u3059\u308b\u3068\u3000\u4e0a\u8a18\u306e\u3088\u3046\u306b\u697d\u3067\u3059\n\u898b\u3066\u308f\u304b\u308b\u3068\u304a\u308a \"k3\":[\"a\",123,true,false,null] \u3053\u308c\u3067\u914d\u5217\u8981\u7d20\u3092\u6271\u3046\u3053\u3068\u304c\u51fa\u6765\u307e\u3059\n\n\u5024\u306e\u53d6\u5f97\n\u30b5\u30f3\u30d7\u30eb\u306e\u3088\u3046\u306b\n\nget\n    cout << \"k1=\" << json[\"k1\"].string_value() << endl;\n    cout << \"k2=\" << json[\"k2\"].int_value() << endl;\n\n    for (auto &k : json[\"k3\"].array_items()) {\n        cout << \"    - \" << k.dump() << endl;\n    }\n\n\n\u3053\u308c\u3067\u5024\u3092\u53d6\u5f97\u3067\u304d\u307e\u3059\u306d\u3002\nstring_value \u3067\u6587\u5b57\u5217\u306e\u5024\u3092\nint_value \u3067\u6574\u6570\u306e\u5024\u3092\narray_items \u3067\u914d\u5217\u3092\u53d6\u5f97\u3057\u307e\u3059\n\u4ed6\u306b\u3082 bool_value\u3001number_value \u304c\u3042\u308a\u307e\u3059\n\u305f\u3060\u3057\u300064bit int\u306e\u5024\u306f\u53d6\u5f97\u3067\u304d\u306a\u3044\u306e\u3067 \n\u5927\u304d\u3044\u6574\u6570\u306f\u3001number_value\u3067\u53d6\u5f97\u3057\u307e\u3059\u3002\u305f\u3060\u3057 \u4eee\u6570\u90e8\u306e52\u30d3\u30c3\u30c8\u307e\u3067\u3057\u304b\u6271\u3048\u307e\u305b\u3093\n\u305d\u308c\u4ee5\u4e0a\u306e\u5024\u3092\u3068\u308b\u306b\u306f\u3001string\u3067\u9001\u308b\u306e\u304c\u826f\u3044\u304b\u3082\u3057\u308c\u307e\u305b\u3093\n\njson\u69cb\u7bc9\n\u30b5\u30f3\u30d7\u30eb\u306e\u3088\u3046\u306b\n\nliterals\n    Json obj = Json::object({\n        { \"k1\", \"v1\" },\n        { \"k2\", 42.0 },\n        { \"k3\", Json::array({ \"a\", 123.0, true, false, nullptr }) },\n    });\n\n\n\u3068\u3001\u30a4\u30cb\u30b7\u30e3\u30e9\u30a4\u30ba\u30ea\u30b9\u30c8\u3092\u4f7f\u3044\u3001json\u3092\u69cb\u7bc9\u3067\u304d\u307e\u3059\n\u3068\u3066\u3082\u7dba\u9e97\u306a\u5b9f\u88c5\u3067\u3059\u3002\u3053\u306e\u7dba\u9e97\u3055\u304c json11\u306e\u4eba\u6c17\u306e\u30dd\u30a4\u30f3\u30c8\u3060\u3068\u601d\u3044\u307e\u3059\n\u914d\u5217\u306fJson::array() \u3067\u69cb\u7bc9\u3057\u307e\u3059\n\u6587\u5b57\u5217\u3067\u4e0e\u3048\u308b\u306e\u306b\u6bd4\u3079\u3001\u30b3\u30f3\u30d1\u30a4\u30eb\u6642\u306b\u89e3\u6c7a\u51fa\u6765\u308b\u306e\u3067\u3001\u304a\u305d\u3089\u304f\u3053\u306e\u65b9\u304c\u65e9\u304f\u306a\u308a\u307e\u3059\n\u307e\u305f\u3001STL\u30b3\u30f3\u30c6\u30ca\u3092\u4f7f\u3044\u3001\u69cb\u7bc9\u3059\u308b\u4e8b\u304c\u53ef\u80fd\u3067\u3059\uff01\n\nstlarray\n    std::list<int> l1 { 1, 2, 3 };\n    std::vector<int> l2 { 1, 2, 3 };\n    std::set<int> l3 { 1, 2, 3 };\n    std::array<int,3> l4 { 1, 2, 3 };\n\n    cout << json11::Json(l1).dump() << endl;\n    cout << json11::Json(l2).dump() << endl;\n    cout << json11::Json(l3).dump() << endl;\n    cout << json11::Json(l4).dump() << endl;\n\n\n\u3053\u308c\u3089\u306f\u3044\u305a\u308c\u3082\u3001dump()\u3059\u308b\u3068\n[1,2,3]\n\u3068\u3044\u3046 \u914d\u5217\u306b\u306a\u308a\u307e\u3059\n\nstlmap\n    std::map<string, string> m1 { { \"k1\", \"v1\" }, { \"k2\", \"v2\" } };\n    std::multimap<string, string> m2 { { \"k1\", \"v1\" }, { \"k2\", \"v2\" } };\n    std::unordered_map<string, string> m3 { { \"k1\", \"v1\" }, { \"k2\", \"v2\" } };\n    std::unordered_multimap<string, string> m4 { { \"k1\", \"v1\" }, { \"k2\", \"v2\" } };\n\n    cout << json11::Json(m1).dump() << endl;\n    cout << json11::Json(m2).dump() << endl;\n    cout << json11::Json(m3).dump() << endl;\n    cout << json11::Json(m4).dump() << endl;\n\n\nstl::map\u7cfb\u3092\u4f7f\u3046\u3068\u3001\u540d\u524d\u4ed8\u304d\u30d5\u30a3\u30fc\u30eb\u30c9\u3092\u69cb\u7bc9\u3067\u304d\u307e\u3059\n\u4e0a\u8a18\u3092\u5b9f\u884c\u3059\u308b\u3068\u3044\u305a\u308c\u3082\n{\"k1\": \"v1\", \"k2\": \"v2\"}\n\u3068\u3044\u3046json\u306b\u306a\u308a\u307e\u3059\n\u3068\u3046\u305c\u3093\u3000\u3053\u308c\u3089\u306f\u8907\u5408\u3055\u305b\u308b\u3053\u3068\u304c\u53ef\u80fd\u3067\u3059\n\ncomplex\n    std::map<string, string> m1 { { \"k1\", \"v1\" }, { \"k2\", \"v2\" } };\n    std::list<int> l1 { 1, 2, 3 };\n    json11::Json json1 = json11::Json::object {\n            { \"key1\", m1 },\n            { \"key2\", l1 }\n    };\n    cout << json1.dump() << endl;\n\n\n\u3068\u3059\u308b\u3068\n{\"key1\": {\"k1\": \"v1\", \"k2\": \"v2\"},  \"key2\": [1, 2, 3]}\n\u304c\u5f97\u3089\u308c\u307e\u3059\u3002\n\u3082\u3061\u308d\u3093json\u540c\u58eb\u3092\u8907\u5408\u3055\u305b\u3089\u308c\u307e\u3059\n\ncomp\n    std::map<string, string> m1 { { \"k1\", \"v1\" }, { \"k2\", \"v2\" } };\n    std::list<int> l1 { 1, 2, 3 };\n\n    json11::Json json1 = json11::Json::object {\n            { \"key1\", m1 },\n            { \"key2\", l1 }\n    };\n\n    json11::Json json2 = json11::Json::object {\n            { \"json1\", json1 },\n            { \"json2\", \"value\" }\n    };\n\n    cout << json2.dump() << endl;\n\n\n\u7d50\u679c\u306f\n{\"json1\": {\"key1\": {\"k1\": \"v1\", \"k2\": \"v2\"},     \"key2\": [1, 2, 3]}, \"json2\": \"value\"}\njson\u540c\u58eb\u3082\u9023\u7d50\u3067\u304d\u307e\u3059\n\n\u540c\u3058\u968e\u5c64\u3067\u9023\u7d50\u3055\u305b\u305f\u3044\u30fb\u30fb\n\u4e0a\u8a18\u3060\u3068\n{\"key1\": {\"k1\": \"v1\", \"k2\": \"v2\"}, \"key2\": [1, 2, 3]}\n{\"json1\": {\"key1\": {\"k1\": \"v1\", \"k2\": \"v2\"}, \"key2\": [1, 2, 3]}, \"json2\": \"value\"}\n\u9023\u7d50\u3057\u305f\u969b\u306b\u30011\u968e\u5c64\u306f\u3044\u3063\u3066\u3057\u307e\u3044\u307e\u3059\u3002\u30d5\u30e9\u30c3\u30c8\u306b\u9023\u7d50\u3067\u304d\u306a\u3044\u304b\uff1f\n{\"k1\": \"v1\", \"k2\": \"v2\", \"key2\": [1, 2, 3]}\n{\"k1\": \"v1\", \"k2\": \"v2\", \"key2\": [1, 2, 3], \"json2\": \"value\"}\n\u3053\u306e\u3088\u3046\u306b\u3002\n\u3068\u3044\u3046\u3053\u3068\u3067 json11\u306e\u30b3\u30fc\u30c9\u3092\u898b\u307e\u3059\n\njson11\n        typedef std::vector<Json> array;\n        typedef std::map<std::string, Json> object;\n\n        // Constructors for the various types of JSON value.\n        Json() noexcept;                // NUL\n        Json(std::nullptr_t) noexcept;  // NUL\n        Json(double value);             // NUMBER\n        Json(int value);                // NUMBER\n        Json(bool value);               // BOOL\n        Json(const std::string &value); // STRING\n        Json(std::string &&value);      // STRING\n        Json(const char * value);       // STRING\n        Json(const array &values);      // ARRAY\n        Json(array &&values);           // ARRAY\n        Json(const object &values);     // OBJECT\n        Json(object &&values);          // OBJECT\n\n\n        // Implicit constructor: anything with a to_json() function.\n        template <class T, class = decltype(&T::to_json)>\n        Json(const T & t) : Json(t.to_json()) {}\n\n        // Implicit constructor: map-like objects (std::map, std::unordered_map, etc)\n        template <class M, typename std::enable_if<\n                std::is_constructible<std::string, typename M::key_type>::value\n                && std::is_constructible<Json, typename M::mapped_type>::value,\n                int>::type = 0>\n        Json(const M & m) : Json(object(m.begin(), m.end())) {}\n\n        // Implicit constructor: vector-like objects (std::list, std::vector, std::set, etc)\n        template <class V, typename std::enable_if<\n                std::is_constructible<Json, typename V::value_type>::value,\n                int>::type = 0>\n        Json(const V & v) : Json(array(v.begin(), v.end())) {}\n\n\n\u3053\u306e\u3088\u3046\u306b Json::object\u306f map\u306etypedef\u3067\u3042\u308a\n\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u306b\u3066 map\u3068\u3057\u3066\u53d7\u3051\u53d6\u3063\u3066\u3044\u308b\u305f\u3081\n\u30a4\u30cb\u30b7\u30e3\u30e9\u30a4\u30b6\u30ea\u30b9\u30c8\u306b\u3066\u3001\u30d5\u30e9\u30c3\u30c8\u306b\u9023\u7d50\u3059\u308b\u306e\u306f\u3000\u5c11\u3057\u96e3\u3057\u305d\u3046\u3067\u3059\n\u30a2\u30af\u30bb\u30c3\u30b5\u3082\n\njson11\n    Json::Type Json::type()                           const { return m_ptr->type();         }\n    double Json::number_value()                       const { return m_ptr->number_value(); }\n    int Json::int_value()                             const { return m_ptr->int_value();    }\n    bool Json::bool_value()                           const { return m_ptr->bool_value();   }\n    const string & Json::string_value()               const { return m_ptr->string_value(); }\n    const vector<Json> & Json::array_items()          const { return m_ptr->array_items();  }\n    const map<string, Json> & Json::object_items()    const { return m_ptr->object_items(); }\n    const Json & Json::operator[] (size_t i)          const { return (*m_ptr)[i];           }\n    const Json & Json::operator[] (const string &key) const { return (*m_ptr)[key];         }\n\n    double                    JsonValue::number_value()              const { return 0; }\n    int                       JsonValue::int_value()                 const { return 0; }\n    bool                      JsonValue::bool_value()                const { return false; }\n    const string &            JsonValue::string_value()              const { return statics().empty_string; }\n    const vector<Json> &      JsonValue::array_items()               const { return statics().empty_vector; }\n    const map<string, Json> & JsonValue::object_items()              const { return statics().empty_map; }\n    const Json &              JsonValue::operator[] (size_t)         const { return static_null(); }\n    const Json &              JsonValue::operator[] (const string &) const { return static_null(); }\n\n    const Json & JsonObject::operator[] (const string &key) const {\n        auto iter = m_value.find(key);\n        return (iter == m_value.end()) ? static_null() : iter->second;\n    }\n    const Json & JsonArray::operator[] (size_t i) const {\n        if (i >= m_value.size()) return static_null();\n        else return m_value[i];\n    }\n\n\n\u3068\u3001\u9811\u306a\u306b const\u306a\u306e\u3067\u3001\u96e3\u3057\u305d\u3046\u3067\u3059\n\uff08\u975econst\u30e1\u30f3\u30d0\u3092\u4f5c\u308a \u5185\u90e8\u306em_ptr\u306b\u30a2\u30af\u30bb\u30b9\u51fa\u6765\u308b\u3088\u3046\u306b\u3059\u308c\u3070\u3001json\u30ce\u30fc\u30c9\u3092\u4efb\u610f\u3067\u3044\u3058\u308c\u308b\u3088\u3046\u306b\u306a\u308b\u304b\u3082\u3057\u308c\u307e\u305b\u3093\uff09\n\u3068\u308a\u3042\u3048\u305a\u306f\u3001\u65b9\u91dd\u3068\u3057\u3066\nJson::object\uff08map\uff09 \u3092\u4f5c\u6210\u3057 insert\u3066\u3044\u304f\n\u3053\u308c\u3067\u3084\u3063\u3066\u307f\u3088\u3046\u3068\u601d\u3044\u307e\u3059\n\nmap\n    std::map<string, string> m1 { { \"k1\", \"v1\" }, { \"k2\", \"v2\" } };\n    std::list<int> l1 { 1, 2, 3 };\n\n    json11::Json::object jo(m1.begin(),m1.end());\n    jo.insert(pair<string,json11::Json>(\"key2\", l1));\n    cout << json1.dump() << endl;\n\n\n\n{\"k1\": \"v1\", \"k2\": \"v2\", \"key2\": [1, 2, 3]}\n\u304c\u51fa\u529b\u3055\u308c\u307e\u3057\u305f\u3002\n\u3053\u306e\u3088\u3046\u306b Json::object\u3092\u76f4\u63a5\u64cd\u4f5c\u3059\u308c\u3070\u3001\u4efb\u610f\u306ejson\u3092\u4f5c\u308b\u4e8b\u304c\u51fa\u6765\u305d\u3046\u3067\u3059\u3002\n\n\u307e\u3068\u3081\njson11\u306f\u7dba\u9e97\u3060\u304c\u3001json\u306e\u751f\u6210\u306b\u95a2\u3057\u3066\u306f\u4eca\u306e\u3068\u3053\u308d\u4f7f\u3044\u3084\u3059\u3044\u5370\u8c61\u304c\u306a\u3044\u3002\n\u7279\u306b\u3000\u4efb\u610f\u306e\u30ce\u30fc\u30c9\u306b\u30ce\u30fc\u30c9\u3092\u9023\u7d50\u3057\u3088\u3046\u3068\u601d\u3046\u3068\u4e0d\u4fbf\u3092\u611f\u3058\u308b\n\u7d50\u5c40\u306f map\u3092\u76f4\u63a5\u89e6\u308b\u4e8b\u306b\u306a\u308b\u3093\u3060\u308d\u3046\u304b\uff1f\n\u8a73\u3057\u3044\u65b9\u3001\u30d8\u30eb\u30d7\uff01\n#json11\u3068\u306f\nC++11\u3067\u66f8\u304b\u308c\u305fjson\u30e9\u30a4\u30d6\u30e9\u30ea\u3067\n\u4f7f\u3044\u65b9\u304c\u7dba\u9e97\u306a\u305f\u3081\u3001\u597d\u307e\u308c\u3066\u4f7f\u308f\u308c\u3066\u3044\u308b\u3068\u601d\u3044\u307e\u3059\n\u79c1\u306f\u3001\u4ee5\u524d\u306fpicojson\u3092\u4f7f\u3063\u3066\u307e\u3057\u305f\u304c\u6700\u8fd1\u306fjson11\u3092\u4f7f\u3063\u3066\u307e\u3059\n\nhttps://github.com/dropbox/json11/blob/master\n\u3053\u3053\u304b\u3089\u3000json11.cpp\u3068json11.hpp\u3092\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3057\u3066\u4f7f\u3063\u3066\u307e\u3059\n\n\n#\u4f7f\u3044\u65b9\nhttps://github.com/dropbox/json11/blob/master/test.cpp\n\u306b\u30b5\u30f3\u30d7\u30eb\u304c\u66f8\u3044\u3066\u3044\u308b\u306e\u3067\u8aad\u3081\u3070\u308f\u304b\u308a\u307e\u3059\u304c\u3001\u88dc\u8db3\u3057\u307e\u3059\n\n\n##json\u30d1\u30fc\u30b9\n\u30b5\u30f3\u30d7\u30eb\u306e\u3088\u3046\u306b\n\n```cpp:parse\n\n    const string simple_test =\n        R\"({\"k1\":\"v1\", \"k2\":42, \"k3\":[\"a\",123,true,false,null]})\";\n\n    string err;\n    auto json = json11::Json::parse(simple_test, err);\n\n```\n\n\u3068\u3059\u308c\u3070\u3001\u7c21\u5358\u306b\u6587\u5b57\u5217\u304b\u3089\u3000json\u306b\u30d1\u30fc\u30b9\u51fa\u6765\u307e\u3059\u3002\n\njson.dump()\u3000\u3068\u3059\u308b\u3068\u3001json\u306e\u6587\u5b57\u5217\u304c\u53d6\u5f97\u51fa\u6765\u307e\u3059\n\n\u30d1\u30fc\u30b9\u30a8\u30e9\u30fc\u304c\u3042\u308c\u3070 err\u306b\u30a8\u30e9\u30fc\u30e1\u30c3\u30bb\u30fc\u30b8\u304c\u8fd4\u3063\u3066\u304d\u307e\u3059\njson\u306f \u30b7\u30f3\u30b0\u30eb\u30af\u30aa\u30fc\u30c8\u3067\u306f\u30c0\u30e1\u306a\u306e\u3067\u3001\u30c0\u30d6\u30eb\u30af\u30aa\u30fc\u30c8\u306e\u30a8\u30b9\u30b1\u30fc\u30d7\u304c\u9762\u5012\u3067\u3059\u304c\n\u305d\u3093\u306a\u6642 R\"()\" \u3092\u3064\u304b\u3063\u3066\u3000\u30d2\u30a2\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u306b\u3059\u308b\u3068\u3000\u4e0a\u8a18\u306e\u3088\u3046\u306b\u697d\u3067\u3059\n\n\u898b\u3066\u308f\u304b\u308b\u3068\u304a\u308a \"k3\":[\"a\",123,true,false,null] \u3053\u308c\u3067\u914d\u5217\u8981\u7d20\u3092\u6271\u3046\u3053\u3068\u304c\u51fa\u6765\u307e\u3059\n\n##\u5024\u306e\u53d6\u5f97\n\u30b5\u30f3\u30d7\u30eb\u306e\u3088\u3046\u306b\n\n```cpp:get\n    cout << \"k1=\" << json[\"k1\"].string_value() << endl;\n    cout << \"k2=\" << json[\"k2\"].int_value() << endl;\n\n    for (auto &k : json[\"k3\"].array_items()) {\n        cout << \"    - \" << k.dump() << endl;\n    }\n```\n\n\u3053\u308c\u3067\u5024\u3092\u53d6\u5f97\u3067\u304d\u307e\u3059\u306d\u3002\nstring_value \u3067\u6587\u5b57\u5217\u306e\u5024\u3092\nint_value \u3067\u6574\u6570\u306e\u5024\u3092\narray_items \u3067\u914d\u5217\u3092\u53d6\u5f97\u3057\u307e\u3059\n\n\u4ed6\u306b\u3082 bool_value\u3001number_value \u304c\u3042\u308a\u307e\u3059\n\n\u305f\u3060\u3057\u300064bit int\u306e\u5024\u306f\u53d6\u5f97\u3067\u304d\u306a\u3044\u306e\u3067 \n\u5927\u304d\u3044\u6574\u6570\u306f\u3001number_value\u3067\u53d6\u5f97\u3057\u307e\u3059\u3002\u305f\u3060\u3057 \u4eee\u6570\u90e8\u306e52\u30d3\u30c3\u30c8\u307e\u3067\u3057\u304b\u6271\u3048\u307e\u305b\u3093\n\u305d\u308c\u4ee5\u4e0a\u306e\u5024\u3092\u3068\u308b\u306b\u306f\u3001string\u3067\u9001\u308b\u306e\u304c\u826f\u3044\u304b\u3082\u3057\u308c\u307e\u305b\u3093\n\n\n##json\u69cb\u7bc9\n\u30b5\u30f3\u30d7\u30eb\u306e\u3088\u3046\u306b\n\n```cpp:literals\n    Json obj = Json::object({\n        { \"k1\", \"v1\" },\n        { \"k2\", 42.0 },\n        { \"k3\", Json::array({ \"a\", 123.0, true, false, nullptr }) },\n    });\n```\n\n\u3068\u3001\u30a4\u30cb\u30b7\u30e3\u30e9\u30a4\u30ba\u30ea\u30b9\u30c8\u3092\u4f7f\u3044\u3001json\u3092\u69cb\u7bc9\u3067\u304d\u307e\u3059\n\n\u3068\u3066\u3082\u7dba\u9e97\u306a\u5b9f\u88c5\u3067\u3059\u3002\u3053\u306e\u7dba\u9e97\u3055\u304c json11\u306e\u4eba\u6c17\u306e\u30dd\u30a4\u30f3\u30c8\u3060\u3068\u601d\u3044\u307e\u3059\n\n\u914d\u5217\u306fJson::array() \u3067\u69cb\u7bc9\u3057\u307e\u3059\n\n\u6587\u5b57\u5217\u3067\u4e0e\u3048\u308b\u306e\u306b\u6bd4\u3079\u3001\u30b3\u30f3\u30d1\u30a4\u30eb\u6642\u306b\u89e3\u6c7a\u51fa\u6765\u308b\u306e\u3067\u3001\u304a\u305d\u3089\u304f\u3053\u306e\u65b9\u304c\u65e9\u304f\u306a\u308a\u307e\u3059\n\n\n\u307e\u305f\u3001STL\u30b3\u30f3\u30c6\u30ca\u3092\u4f7f\u3044\u3001\u69cb\u7bc9\u3059\u308b\u4e8b\u304c\u53ef\u80fd\u3067\u3059\uff01\n\n```cpp:stlarray\n    std::list<int> l1 { 1, 2, 3 };\n    std::vector<int> l2 { 1, 2, 3 };\n    std::set<int> l3 { 1, 2, 3 };\n    std::array<int,3> l4 { 1, 2, 3 };\n\n    cout << json11::Json(l1).dump() << endl;\n    cout << json11::Json(l2).dump() << endl;\n    cout << json11::Json(l3).dump() << endl;\n    cout << json11::Json(l4).dump() << endl;\n```\n\n\u3053\u308c\u3089\u306f\u3044\u305a\u308c\u3082\u3001dump()\u3059\u308b\u3068\n[1,2,3]\n\u3068\u3044\u3046 \u914d\u5217\u306b\u306a\u308a\u307e\u3059\n\n\n```cpp:stlmap\n    std::map<string, string> m1 { { \"k1\", \"v1\" }, { \"k2\", \"v2\" } };\n    std::multimap<string, string> m2 { { \"k1\", \"v1\" }, { \"k2\", \"v2\" } };\n    std::unordered_map<string, string> m3 { { \"k1\", \"v1\" }, { \"k2\", \"v2\" } };\n    std::unordered_multimap<string, string> m4 { { \"k1\", \"v1\" }, { \"k2\", \"v2\" } };\n\n    cout << json11::Json(m1).dump() << endl;\n    cout << json11::Json(m2).dump() << endl;\n    cout << json11::Json(m3).dump() << endl;\n    cout << json11::Json(m4).dump() << endl;\n```\n\nstl::map\u7cfb\u3092\u4f7f\u3046\u3068\u3001\u540d\u524d\u4ed8\u304d\u30d5\u30a3\u30fc\u30eb\u30c9\u3092\u69cb\u7bc9\u3067\u304d\u307e\u3059\n\n\u4e0a\u8a18\u3092\u5b9f\u884c\u3059\u308b\u3068\u3044\u305a\u308c\u3082\n{\"k1\": \"v1\", \"k2\": \"v2\"}\n\n\u3068\u3044\u3046json\u306b\u306a\u308a\u307e\u3059\n\n\n\u3068\u3046\u305c\u3093\u3000\u3053\u308c\u3089\u306f\u8907\u5408\u3055\u305b\u308b\u3053\u3068\u304c\u53ef\u80fd\u3067\u3059\n\n```cpp:complex\n    std::map<string, string> m1 { { \"k1\", \"v1\" }, { \"k2\", \"v2\" } };\n    std::list<int> l1 { 1, 2, 3 };\n    json11::Json json1 = json11::Json::object {\n            { \"key1\", m1 },\n            { \"key2\", l1 }\n    };\n    cout << json1.dump() << endl;\n```\n\n\u3068\u3059\u308b\u3068\n{\"key1\": {\"k1\": \"v1\", \"k2\": \"v2\"},  \"key2\": [1, 2, 3]}\n\n\u304c\u5f97\u3089\u308c\u307e\u3059\u3002\n\n\n\u3082\u3061\u308d\u3093json\u540c\u58eb\u3092\u8907\u5408\u3055\u305b\u3089\u308c\u307e\u3059\n\n```cpp:comp\n    std::map<string, string> m1 { { \"k1\", \"v1\" }, { \"k2\", \"v2\" } };\n    std::list<int> l1 { 1, 2, 3 };\n\n    json11::Json json1 = json11::Json::object {\n            { \"key1\", m1 },\n            { \"key2\", l1 }\n    };\n\n    json11::Json json2 = json11::Json::object {\n            { \"json1\", json1 },\n            { \"json2\", \"value\" }\n    };\n    \n    cout << json2.dump() << endl;\n```\n\n\u7d50\u679c\u306f\n{\"json1\": {\"key1\": {\"k1\": \"v1\", \"k2\": \"v2\"},     \"key2\": [1, 2, 3]}, \"json2\": \"value\"}\n\n\njson\u540c\u58eb\u3082\u9023\u7d50\u3067\u304d\u307e\u3059\n\n\n##\u540c\u3058\u968e\u5c64\u3067\u9023\u7d50\u3055\u305b\u305f\u3044\u30fb\u30fb\n\u4e0a\u8a18\u3060\u3068\n{\"key1\": {\"k1\": \"v1\", \"k2\": \"v2\"}, \"key2\": [1, 2, 3]}\n{\"json1\": {\"key1\": {\"k1\": \"v1\", \"k2\": \"v2\"}, \"key2\": [1, 2, 3]}, \"json2\": \"value\"}\n\n\u9023\u7d50\u3057\u305f\u969b\u306b\u30011\u968e\u5c64\u306f\u3044\u3063\u3066\u3057\u307e\u3044\u307e\u3059\u3002\u30d5\u30e9\u30c3\u30c8\u306b\u9023\u7d50\u3067\u304d\u306a\u3044\u304b\uff1f\n{\"k1\": \"v1\", \"k2\": \"v2\", \"key2\": [1, 2, 3]}\n{\"k1\": \"v1\", \"k2\": \"v2\", \"key2\": [1, 2, 3], \"json2\": \"value\"}\n\n\u3053\u306e\u3088\u3046\u306b\u3002\n\u3068\u3044\u3046\u3053\u3068\u3067 json11\u306e\u30b3\u30fc\u30c9\u3092\u898b\u307e\u3059\n\n\n```cpp:json11\n        typedef std::vector<Json> array;\n        typedef std::map<std::string, Json> object;\n\n        // Constructors for the various types of JSON value.\n        Json() noexcept;                // NUL\n        Json(std::nullptr_t) noexcept;  // NUL\n        Json(double value);             // NUMBER\n        Json(int value);                // NUMBER\n        Json(bool value);               // BOOL\n        Json(const std::string &value); // STRING\n        Json(std::string &&value);      // STRING\n        Json(const char * value);       // STRING\n        Json(const array &values);      // ARRAY\n        Json(array &&values);           // ARRAY\n        Json(const object &values);     // OBJECT\n        Json(object &&values);          // OBJECT\n\n\n        // Implicit constructor: anything with a to_json() function.\n        template <class T, class = decltype(&T::to_json)>\n        Json(const T & t) : Json(t.to_json()) {}\n\n        // Implicit constructor: map-like objects (std::map, std::unordered_map, etc)\n        template <class M, typename std::enable_if<\n                std::is_constructible<std::string, typename M::key_type>::value\n                && std::is_constructible<Json, typename M::mapped_type>::value,\n                int>::type = 0>\n        Json(const M & m) : Json(object(m.begin(), m.end())) {}\n\n        // Implicit constructor: vector-like objects (std::list, std::vector, std::set, etc)\n        template <class V, typename std::enable_if<\n                std::is_constructible<Json, typename V::value_type>::value,\n                int>::type = 0>\n        Json(const V & v) : Json(array(v.begin(), v.end())) {}\n```\n\n\u3053\u306e\u3088\u3046\u306b Json::object\u306f map<string,Json>\u306etypedef\u3067\u3042\u308a\n\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u306b\u3066 map\u3068\u3057\u3066\u53d7\u3051\u53d6\u3063\u3066\u3044\u308b\u305f\u3081\n\u30a4\u30cb\u30b7\u30e3\u30e9\u30a4\u30b6\u30ea\u30b9\u30c8\u306b\u3066\u3001\u30d5\u30e9\u30c3\u30c8\u306b\u9023\u7d50\u3059\u308b\u306e\u306f\u3000\u5c11\u3057\u96e3\u3057\u305d\u3046\u3067\u3059\n\n\n\u30a2\u30af\u30bb\u30c3\u30b5\u3082\n\n```cpp:json11\n    Json::Type Json::type()                           const { return m_ptr->type();         }\n    double Json::number_value()                       const { return m_ptr->number_value(); }\n    int Json::int_value()                             const { return m_ptr->int_value();    }\n    bool Json::bool_value()                           const { return m_ptr->bool_value();   }\n    const string & Json::string_value()               const { return m_ptr->string_value(); }\n    const vector<Json> & Json::array_items()          const { return m_ptr->array_items();  }\n    const map<string, Json> & Json::object_items()    const { return m_ptr->object_items(); }\n    const Json & Json::operator[] (size_t i)          const { return (*m_ptr)[i];           }\n    const Json & Json::operator[] (const string &key) const { return (*m_ptr)[key];         }\n\n    double                    JsonValue::number_value()              const { return 0; }\n    int                       JsonValue::int_value()                 const { return 0; }\n    bool                      JsonValue::bool_value()                const { return false; }\n    const string &            JsonValue::string_value()              const { return statics().empty_string; }\n    const vector<Json> &      JsonValue::array_items()               const { return statics().empty_vector; }\n    const map<string, Json> & JsonValue::object_items()              const { return statics().empty_map; }\n    const Json &              JsonValue::operator[] (size_t)         const { return static_null(); }\n    const Json &              JsonValue::operator[] (const string &) const { return static_null(); }\n\n    const Json & JsonObject::operator[] (const string &key) const {\n        auto iter = m_value.find(key);\n        return (iter == m_value.end()) ? static_null() : iter->second;\n    }\n    const Json & JsonArray::operator[] (size_t i) const {\n        if (i >= m_value.size()) return static_null();\n        else return m_value[i];\n    }\n```\n\n\u3068\u3001\u9811\u306a\u306b const\u306a\u306e\u3067\u3001\u96e3\u3057\u305d\u3046\u3067\u3059\n\uff08\u975econst\u30e1\u30f3\u30d0\u3092\u4f5c\u308a \u5185\u90e8\u306em_ptr\u306b\u30a2\u30af\u30bb\u30b9\u51fa\u6765\u308b\u3088\u3046\u306b\u3059\u308c\u3070\u3001json\u30ce\u30fc\u30c9\u3092\u4efb\u610f\u3067\u3044\u3058\u308c\u308b\u3088\u3046\u306b\u306a\u308b\u304b\u3082\u3057\u308c\u307e\u305b\u3093\uff09\n\n\n\n\u3068\u308a\u3042\u3048\u305a\u306f\u3001\u65b9\u91dd\u3068\u3057\u3066\nJson::object\uff08map<string,Json>\uff09 \u3092\u4f5c\u6210\u3057 insert\u3066\u3044\u304f\n\n\n\u3053\u308c\u3067\u3084\u3063\u3066\u307f\u3088\u3046\u3068\u601d\u3044\u307e\u3059\n\n\n```cpp:map\n    std::map<string, string> m1 { { \"k1\", \"v1\" }, { \"k2\", \"v2\" } };\n    std::list<int> l1 { 1, 2, 3 };\n\n    json11::Json::object jo(m1.begin(),m1.end());\n    jo.insert(pair<string,json11::Json>(\"key2\", l1));\n    cout << json1.dump() << endl;\n\n```\n\n{\"k1\": \"v1\", \"k2\": \"v2\", \"key2\": [1, 2, 3]}\n\n\u304c\u51fa\u529b\u3055\u308c\u307e\u3057\u305f\u3002\n\u3053\u306e\u3088\u3046\u306b Json::object\u3092\u76f4\u63a5\u64cd\u4f5c\u3059\u308c\u3070\u3001\u4efb\u610f\u306ejson\u3092\u4f5c\u308b\u4e8b\u304c\u51fa\u6765\u305d\u3046\u3067\u3059\u3002\n\n\n#\u307e\u3068\u3081\njson11\u306f\u7dba\u9e97\u3060\u304c\u3001json\u306e\u751f\u6210\u306b\u95a2\u3057\u3066\u306f\u4eca\u306e\u3068\u3053\u308d\u4f7f\u3044\u3084\u3059\u3044\u5370\u8c61\u304c\u306a\u3044\u3002\n\u7279\u306b\u3000\u4efb\u610f\u306e\u30ce\u30fc\u30c9\u306b\u30ce\u30fc\u30c9\u3092\u9023\u7d50\u3057\u3088\u3046\u3068\u601d\u3046\u3068\u4e0d\u4fbf\u3092\u611f\u3058\u308b\n\u7d50\u5c40\u306f map\u3092\u76f4\u63a5\u89e6\u308b\u4e8b\u306b\u306a\u308b\u3093\u3060\u308d\u3046\u304b\uff1f\n\n\u8a73\u3057\u3044\u65b9\u3001\u30d8\u30eb\u30d7\uff01\n\n\n\n", "tags": ["C++11", "Json11"]}