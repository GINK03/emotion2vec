{"context": "Crystal \u306e\u958b\u767a\u5143\u3067\u3042\u308b Manas\u793e\u306eTwitter\u30a2\u30ab\u30a6\u30f3\u30c8\u3067\uff0c\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u3064\u3076\u3084\u304d\u3092\u898b\u304b\u3051\u307e\u3057\u3066\u3002\n\n\u3068\u308a\u3042\u3048\u305a\uff0c\u624b\u4f5c\u696d\u306747\u500b\u307e\u3067\u306f\u898b\u3064\u3051\u305f\u306e\u3067\u3059\u304c\uff0c\u4ed6\u306b\u3082\u306a\u3044\u306e\u304b\u6a5f\u68b0\u7684\u306b\u63a2\u7d22\u3059\u308b\u30b3\u30fc\u30c9\u3092 Crystal \u3067\u66f8\u3044\u3066\u307f\u305f\u306e\u304c\u3053\u3093\u306a\u611f\u3058\u3002\n\ntriangles.cr\nPATH = [ [1, 2, 3], [1, 4, 6, 9], [1, 7, 10], [2, 1], [2, 3], [2, 4, 7], [2, 6, 8, 10], [2, 5, 9], [3, 2, 1], [3, 5, 6, 7], [3, 9, 10], [4, 1], [4, 2], [4, 6, 9], [4, 7], [5, 2], [5, 3], [5, 6, 7], [5, 9], [6, 2], [6, 4, 1], [6, 5, 3], [6, 7], [6, 8, 10], [6, 9], [7, 1], [7, 4, 2], [7, 6, 5, 3], [7, 8, 9], [7, 10], [8, 6, 2], [8, 7], [8, 9], [8, 10], [9, 3], [9, 5, 2], [9, 6, 4, 1], [9, 8, 7], [9, 10], [10, 7, 1], [10, 8, 6, 2], [10, 9, 3] ]\ndef straight?(p1, p2, p3)\n  PATH.each { |path| return true if path.includes?(p1) && path.includes?(p2) && path.includes?(p3) }\n  return false\nend\ndst = Hash(Int32, Array(Array(Int32))).new { |h,k| h[k] = Array(Array(Int32)).new }\ntriangles = Array(Array(Int32)).new\nPATH.each { |path| dst[path.first] << path[1..-1] }\ndst.each_key do |p1|\n  dst[p1].flatten.sort.each do |p2|\n    dst[p2].flatten.sort.each do |p3|\n      next if !dst[p3].flatten.includes?(p1) || straight?(p1, p2, p3)\n      triangle = [p1, p2, p3].sort\n      triangles << triangle unless triangles.includes?(triangle)\n    end\n  end\nend\nputs triangles.map{|t| t.join(\"-\") + \"\\n\"}.join() + \"total: #{triangles.size}\"\n\n\n\u3067\u3082\u3063\u3066\uff0c\u305d\u306e\u51fa\u529b\u304c\u3053\u3061\u3089\u3002\n1-2-4\n1-2-6\n1-2-7\n1-2-9\n1-2-10\n1-3-6\n1-3-7\n1-3-9\n1-3-10\n1-4-7\n1-6-7\n1-6-10\n1-7-9\n1-9-10\n2-3-5\n2-3-6\n2-3-7\n2-3-9\n2-3-10\n2-4-6\n2-4-9\n2-5-6\n2-5-7\n2-6-7\n2-6-9\n2-7-8\n2-7-9\n2-7-10\n2-8-9\n2-9-10\n3-5-9\n3-6-9\n3-6-10\n3-7-9\n3-7-10\n4-6-7\n4-7-9\n5-6-9\n5-7-9\n6-7-8\n6-7-9\n6-7-10\n6-8-9\n6-9-10\n7-8-10\n7-9-10\n8-9-10\ntotal: 47\n\n\u3069\u3046\u3084\u308947\u3067\u5168\u90e8\u3063\u307d\u3044\uff1f\n\n \u8ffd\u8a18\uff082016/03/17\uff09\n\u4e0a\u8a18\u304c\u3068\u308a\u3042\u3048\u305a\u52d5\u304f\u4e8b\u512a\u5148\u3067\u7121\u99c4\u306a\u52d5\u304d\u304c\u3042\u3063\u305f\u306e\u3067\u624b\u76f4\u3057\u3092\u3070\u3002\n\ntriangles2.cr\nPATH = [ [1, 2, 3], [1, 4, 6, 9], [1, 7, 10],\n         [2, 1], [2, 3], [2, 4, 7], [2, 6, 8, 10], [2, 5, 9],\n         [3, 2, 1], [3, 5, 6, 7], [3, 9, 10], [4, 1],\n         [4, 2], [4, 6, 9], [4, 7],\n         [5, 2], [5, 3], [5, 6, 7], [5, 9],\n         [6, 2], [6, 4, 1], [6, 5, 3], [6, 7], [6, 8, 10], [6, 9],\n         [7, 1], [7, 4, 2], [7, 6, 5, 3], [7, 8, 9], [7, 10],\n         [8, 6, 2], [8, 7], [8, 9], [8, 10],\n         [9, 3], [9, 5, 2], [9, 6, 4, 1], [9, 8, 7], [9, 10],\n         [10, 7, 1], [10, 8, 6, 2], [10, 9, 3] ]\n\ndef on_a_path?(p1, p2, p3)\n  PATH.each do |path|\n    return true if path.includes?(p1) && path.includes?(p2) && path.includes?(p3)\n  end\n  return false\nend\n\ndst = Hash(Int32, Array(Int32)).new { |h,k| h[k] = Array(Int32).new }\ntriangles = Array(Array(Int32)).new\n\nPATH.each do |path|\n  dst[path.first] += path[1..-1]\nend\n\ndst.each_key do |p1|\n  dst[p1].each do |p2|\n    dst[p2].each do |p3|\n      next if !dst[p3].includes?(p1) || on_a_path?(p1, p2, p3)\n      triangle = [p1, p2, p3].sort\n      triangles << triangle unless triangles.includes?(triangle)\n    end\n  end\nend\n\ntriangles.sort.each do |triangle|\n  puts triangle.join(\"-\")\nend\nputs \"total: #{triangles.size}\"\n\n\n\n\u5909\u66f4\u70b9\uff11\uff1a dst \u306e\u5b9a\u7fa9\ndst \u306f\u59cb\u70b9\u3068\u306a\u308b\u70b9\u3092 key \u3068\u3057\u3066\uff0c\u300c\u53d6\u308a\u5f97\u308b\u76f4\u7dda\u306e\u7d42\u70b9\u306e\u30ea\u30b9\u30c8\u300d\u3092 value \u3068\u3057\u3066\u4fdd\u6301\u3059\u308b\u30cf\u30c3\u30b7\u30e5\u3067\u3059\u3002\u4e0a\u8a18\u30b3\u30fc\u30c9\u4e2d\u306e value \u306f\u59cb\u70b9\u304b\u3089\u53d6\u308a\u5f97\u308b\u76f4\u7dda\u3054\u3068\u306b\u7d42\u70b9\u306e\u30ea\u30b9\u30c8\u3092\u914d\u5217\u3068\u3057\u3066\u4f5c\u308a\uff0c\u76f4\u7dda\u306e\u6570\u3060\u3051\u300c\u305d\u306e\u914d\u5217\u300d\u3092\u6301\u3064\u914d\u5217\uff08\u65e5\u672c\u8a9e\u306b\u3059\u308b\u3068\u5206\u304b\u308a\u306b\u304f\u3044\u3067\u3059\u306d\uff09\u3068\u3057\u3066 Array(Array(Int32)) \u578b\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u3002\n\u5f53\u521d\u306f\u76f4\u7dda\u3054\u3068\u306b\u307e\u3068\u307e\u3063\u3066\u308b\u3068\u4f7f\u3044\u9053\u304c\u3042\u308b\u304b\u306a\u3068\u601d\u3063\u305f\u306e\u3067\u3059\u304c\uff0c\u5b9f\u969b\u306e\u3068\u3053\u308d\u306f\u5fc5\u305a #flatten \u3067\u30d5\u30e9\u30c3\u30c8\u306a\uff11\u6b21\u5143\u914d\u5217\u306b\u843d\u3068\u3057\u8fbc\u3093\u3067\u4f7f\u3063\u3066\u308b\u72b6\u614b\u3067\u3057\u305f\u306e\u3067\uff0c\u6700\u521d\u304b\u3089\uff11\u6b21\u5143\u914d\u5217\u306b\u5b9a\u7fa9\u3092\u5909\u66f4\u3057\u307e\u3057\u305f\u3002\n\n\u5909\u66f4\u70b9\uff12\uff1a sort \u3092\u547c\u3076\u30bf\u30a4\u30df\u30f3\u30b0\n\u6700\u7d42\u7684\u306a\u51fa\u529b\u7d50\u679c\u304c\u756a\u53f7\u9806\u306b\u306a\u3063\u3066\u6b32\u3057\u304f\u3066\uff0c\u7d42\u70b9\u30ea\u30b9\u30c8\u3092 #each \u3067\u56de\u3059\u305f\u3073\u306b #sort \u3092\u547c\u3093\u3067\u3044\u307e\u3057\u305f\u304c\uff0c\u6700\u5f8c\u306e\u51fa\u529b\u6642\u70b9\u3067 triangles \u3092 #sort \u3059\u308c\u3070\u826f\u3044\u3053\u3068\u306b\u6c17\u3065\u3044\u305f\u306e\u3067\u305d\u306e\u3088\u3046\u306b\u5909\u66f4\u3057\u307e\u3057\u305f\u3002\n\n\u5909\u66f4\u70b9\uff13\uff1a \u30d5\u30a9\u30fc\u30de\u30c3\u30c8\u3092\u8aad\u307f\u3084\u3059\u304f\n\u6700\u521d\u306e PATH \u5b9a\u7fa9\u3092\u59cb\u3081\uff0c\u884c\u6570\u3092\u6e1b\u3089\u3059\u305f\u3081\u306b\u5f37\u5f15\u306b\uff11\u884c\u306b\u8a70\u3081\u8fbc\u3093\u3060\u90e8\u5206\u304c\u3042\u308a\u307e\u3057\u305f\u304c\uff0c\u305d\u3053\u307e\u3067\u3057\u3066\u884c\u6570\u3092\u3078\u3089\u3057\u3066\u3082\u8aad\u307f\u3065\u3089\u3044\u3060\u3051\u306a\u306e\u3067\u4e00\u822c\u7684\u306a\u8a18\u8ff0\u65b9\u5f0f\u306b\u5909\u66f4\u3057\u307e\u3057\u305f\u3002\n\u305f\u3060\uff0c\u51fa\u529b\u51e6\u7406\u306b\u3064\u3044\u3066\u306f\uff0c\u914d\u5217\u306e\u8981\u7d20\u3092 #each \u3067\u56de\u3057\u3066\u305d\u306e\u4e2d\u3067\u6574\u5f62\u3057\u305f\u3082\u306e\u3092\u6bce\u56de puts \u3067\u66f8\u304d\u51fa\u3059\u306e\u3068\uff0c#map \u5f8c\u306b #join \u3057\u3066\uff11\u56de\u306e puts \u3067\u6e08\u307e\u305b\u308b\u306e\u306e\u3069\u3061\u3089\u304c\u51e6\u7406\u7684\u306b\u8efd\u3044\u306e\u304b\u306f\u6c17\u306a\u308b\u3068\u3053\u308d\u3002\n**Crystal** \u306e\u958b\u767a\u5143\u3067\u3042\u308b Manas\u793e\u306eTwitter\u30a2\u30ab\u30a6\u30f3\u30c8\u3067\uff0c\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u3064\u3076\u3084\u304d\u3092\u898b\u304b\u3051\u307e\u3057\u3066\u3002\n\n<blockquote class=\"twitter-tweet\" data-lang=\"ja\"><p lang=\"en\" dir=\"ltr\">Today in <a href=\"https://twitter.com/hashtag/ManasBlog?src=hash\">#ManasBlog</a> we ask you: How many triangles can you find in this figure? by <a href=\"https://twitter.com/bcardiff\">@bcardiff</a> <a href=\"https://t.co/EA3eQQxYMb\">https://t.co/EA3eQQxYMb</a> <a href=\"https://t.co/00S3LaDRG2\">pic.twitter.com/00S3LaDRG2</a></p>&mdash; Manas (@manastech) <a href=\"https://twitter.com/manastech/status/709428123679514624\">2016\u5e743\u670814\u65e5</a></blockquote>\n\n\u3068\u308a\u3042\u3048\u305a\uff0c\u624b\u4f5c\u696d\u306747\u500b\u307e\u3067\u306f\u898b\u3064\u3051\u305f\u306e\u3067\u3059\u304c\uff0c\u4ed6\u306b\u3082\u306a\u3044\u306e\u304b\u6a5f\u68b0\u7684\u306b\u63a2\u7d22\u3059\u308b\u30b3\u30fc\u30c9\u3092 **Crystal** \u3067\u66f8\u3044\u3066\u307f\u305f\u306e\u304c\u3053\u3093\u306a\u611f\u3058\u3002\n\n```rb:triangles.cr\nPATH = [ [1, 2, 3], [1, 4, 6, 9], [1, 7, 10], [2, 1], [2, 3], [2, 4, 7], [2, 6, 8, 10], [2, 5, 9], [3, 2, 1], [3, 5, 6, 7], [3, 9, 10], [4, 1], [4, 2], [4, 6, 9], [4, 7], [5, 2], [5, 3], [5, 6, 7], [5, 9], [6, 2], [6, 4, 1], [6, 5, 3], [6, 7], [6, 8, 10], [6, 9], [7, 1], [7, 4, 2], [7, 6, 5, 3], [7, 8, 9], [7, 10], [8, 6, 2], [8, 7], [8, 9], [8, 10], [9, 3], [9, 5, 2], [9, 6, 4, 1], [9, 8, 7], [9, 10], [10, 7, 1], [10, 8, 6, 2], [10, 9, 3] ]\ndef straight?(p1, p2, p3)\n  PATH.each { |path| return true if path.includes?(p1) && path.includes?(p2) && path.includes?(p3) }\n  return false\nend\ndst = Hash(Int32, Array(Array(Int32))).new { |h,k| h[k] = Array(Array(Int32)).new }\ntriangles = Array(Array(Int32)).new\nPATH.each { |path| dst[path.first] << path[1..-1] }\ndst.each_key do |p1|\n  dst[p1].flatten.sort.each do |p2|\n    dst[p2].flatten.sort.each do |p3|\n      next if !dst[p3].flatten.includes?(p1) || straight?(p1, p2, p3)\n      triangle = [p1, p2, p3].sort\n      triangles << triangle unless triangles.includes?(triangle)\n    end\n  end\nend\nputs triangles.map{|t| t.join(\"-\") + \"\\n\"}.join() + \"total: #{triangles.size}\"\n```\n\n\u3067\u3082\u3063\u3066\uff0c\u305d\u306e\u51fa\u529b\u304c\u3053\u3061\u3089\u3002\n\n```\n1-2-4\n1-2-6\n1-2-7\n1-2-9\n1-2-10\n1-3-6\n1-3-7\n1-3-9\n1-3-10\n1-4-7\n1-6-7\n1-6-10\n1-7-9\n1-9-10\n2-3-5\n2-3-6\n2-3-7\n2-3-9\n2-3-10\n2-4-6\n2-4-9\n2-5-6\n2-5-7\n2-6-7\n2-6-9\n2-7-8\n2-7-9\n2-7-10\n2-8-9\n2-9-10\n3-5-9\n3-6-9\n3-6-10\n3-7-9\n3-7-10\n4-6-7\n4-7-9\n5-6-9\n5-7-9\n6-7-8\n6-7-9\n6-7-10\n6-8-9\n6-9-10\n7-8-10\n7-9-10\n8-9-10\ntotal: 47\n```\n\n\u3069\u3046\u3084\u308947\u3067\u5168\u90e8\u3063\u307d\u3044\uff1f\n\n# <i class=\"fa fa-file-text-o\"></i> \u8ffd\u8a18\uff082016/03/17\uff09\n\n\u4e0a\u8a18\u304c\u3068\u308a\u3042\u3048\u305a\u52d5\u304f\u4e8b\u512a\u5148\u3067\u7121\u99c4\u306a\u52d5\u304d\u304c\u3042\u3063\u305f\u306e\u3067\u624b\u76f4\u3057\u3092\u3070\u3002\n\n```rb:triangles2.cr\nPATH = [ [1, 2, 3], [1, 4, 6, 9], [1, 7, 10],\n         [2, 1], [2, 3], [2, 4, 7], [2, 6, 8, 10], [2, 5, 9],\n         [3, 2, 1], [3, 5, 6, 7], [3, 9, 10], [4, 1],\n         [4, 2], [4, 6, 9], [4, 7],\n         [5, 2], [5, 3], [5, 6, 7], [5, 9],\n         [6, 2], [6, 4, 1], [6, 5, 3], [6, 7], [6, 8, 10], [6, 9],\n         [7, 1], [7, 4, 2], [7, 6, 5, 3], [7, 8, 9], [7, 10],\n         [8, 6, 2], [8, 7], [8, 9], [8, 10],\n         [9, 3], [9, 5, 2], [9, 6, 4, 1], [9, 8, 7], [9, 10],\n         [10, 7, 1], [10, 8, 6, 2], [10, 9, 3] ]\n\ndef on_a_path?(p1, p2, p3)\n  PATH.each do |path|\n    return true if path.includes?(p1) && path.includes?(p2) && path.includes?(p3)\n  end\n  return false\nend\n\ndst = Hash(Int32, Array(Int32)).new { |h,k| h[k] = Array(Int32).new }\ntriangles = Array(Array(Int32)).new\n\nPATH.each do |path|\n  dst[path.first] += path[1..-1]\nend\n\ndst.each_key do |p1|\n  dst[p1].each do |p2|\n    dst[p2].each do |p3|\n      next if !dst[p3].includes?(p1) || on_a_path?(p1, p2, p3)\n      triangle = [p1, p2, p3].sort\n      triangles << triangle unless triangles.includes?(triangle)\n    end\n  end\nend\n\ntriangles.sort.each do |triangle|\n  puts triangle.join(\"-\")\nend\nputs \"total: #{triangles.size}\"\n```\n\n## \u5909\u66f4\u70b9\uff11\uff1a `dst` \u306e\u5b9a\u7fa9\n`dst` \u306f\u59cb\u70b9\u3068\u306a\u308b\u70b9\u3092 key \u3068\u3057\u3066\uff0c\u300c\u53d6\u308a\u5f97\u308b\u76f4\u7dda\u306e\u7d42\u70b9\u306e\u30ea\u30b9\u30c8\u300d\u3092 value \u3068\u3057\u3066\u4fdd\u6301\u3059\u308b\u30cf\u30c3\u30b7\u30e5\u3067\u3059\u3002\u4e0a\u8a18\u30b3\u30fc\u30c9\u4e2d\u306e value \u306f\u59cb\u70b9\u304b\u3089\u53d6\u308a\u5f97\u308b\u76f4\u7dda\u3054\u3068\u306b\u7d42\u70b9\u306e\u30ea\u30b9\u30c8\u3092\u914d\u5217\u3068\u3057\u3066\u4f5c\u308a\uff0c\u76f4\u7dda\u306e\u6570\u3060\u3051\u300c\u305d\u306e\u914d\u5217\u300d\u3092\u6301\u3064\u914d\u5217\uff08\u65e5\u672c\u8a9e\u306b\u3059\u308b\u3068\u5206\u304b\u308a\u306b\u304f\u3044\u3067\u3059\u306d\uff09\u3068\u3057\u3066 `Array(Array(Int32))` \u578b\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u3002\n\n\u5f53\u521d\u306f\u76f4\u7dda\u3054\u3068\u306b\u307e\u3068\u307e\u3063\u3066\u308b\u3068\u4f7f\u3044\u9053\u304c\u3042\u308b\u304b\u306a\u3068\u601d\u3063\u305f\u306e\u3067\u3059\u304c\uff0c\u5b9f\u969b\u306e\u3068\u3053\u308d\u306f\u5fc5\u305a `#flatten` \u3067\u30d5\u30e9\u30c3\u30c8\u306a\uff11\u6b21\u5143\u914d\u5217\u306b\u843d\u3068\u3057\u8fbc\u3093\u3067\u4f7f\u3063\u3066\u308b\u72b6\u614b\u3067\u3057\u305f\u306e\u3067\uff0c\u6700\u521d\u304b\u3089\uff11\u6b21\u5143\u914d\u5217\u306b\u5b9a\u7fa9\u3092\u5909\u66f4\u3057\u307e\u3057\u305f\u3002\n\n## \u5909\u66f4\u70b9\uff12\uff1a `sort` \u3092\u547c\u3076\u30bf\u30a4\u30df\u30f3\u30b0\n\u6700\u7d42\u7684\u306a\u51fa\u529b\u7d50\u679c\u304c\u756a\u53f7\u9806\u306b\u306a\u3063\u3066\u6b32\u3057\u304f\u3066\uff0c\u7d42\u70b9\u30ea\u30b9\u30c8\u3092 `#each` \u3067\u56de\u3059\u305f\u3073\u306b `#sort` \u3092\u547c\u3093\u3067\u3044\u307e\u3057\u305f\u304c\uff0c\u6700\u5f8c\u306e\u51fa\u529b\u6642\u70b9\u3067 `triangles` \u3092 `#sort` \u3059\u308c\u3070\u826f\u3044\u3053\u3068\u306b\u6c17\u3065\u3044\u305f\u306e\u3067\u305d\u306e\u3088\u3046\u306b\u5909\u66f4\u3057\u307e\u3057\u305f\u3002\n\n## \u5909\u66f4\u70b9\uff13\uff1a \u30d5\u30a9\u30fc\u30de\u30c3\u30c8\u3092\u8aad\u307f\u3084\u3059\u304f\n\u6700\u521d\u306e `PATH` \u5b9a\u7fa9\u3092\u59cb\u3081\uff0c\u884c\u6570\u3092\u6e1b\u3089\u3059\u305f\u3081\u306b\u5f37\u5f15\u306b\uff11\u884c\u306b\u8a70\u3081\u8fbc\u3093\u3060\u90e8\u5206\u304c\u3042\u308a\u307e\u3057\u305f\u304c\uff0c\u305d\u3053\u307e\u3067\u3057\u3066\u884c\u6570\u3092\u3078\u3089\u3057\u3066\u3082\u8aad\u307f\u3065\u3089\u3044\u3060\u3051\u306a\u306e\u3067\u4e00\u822c\u7684\u306a\u8a18\u8ff0\u65b9\u5f0f\u306b\u5909\u66f4\u3057\u307e\u3057\u305f\u3002\n\n\u305f\u3060\uff0c\u51fa\u529b\u51e6\u7406\u306b\u3064\u3044\u3066\u306f\uff0c\u914d\u5217\u306e\u8981\u7d20\u3092 `#each` \u3067\u56de\u3057\u3066\u305d\u306e\u4e2d\u3067\u6574\u5f62\u3057\u305f\u3082\u306e\u3092\u6bce\u56de `puts` \u3067\u66f8\u304d\u51fa\u3059\u306e\u3068\uff0c`#map` \u5f8c\u306b `#join` \u3057\u3066\uff11\u56de\u306e `puts` \u3067\u6e08\u307e\u305b\u308b\u306e\u306e\u3069\u3061\u3089\u304c\u51e6\u7406\u7684\u306b\u8efd\u3044\u306e\u304b\u306f\u6c17\u306a\u308b\u3068\u3053\u308d\u3002\n", "tags": ["crystal"]}