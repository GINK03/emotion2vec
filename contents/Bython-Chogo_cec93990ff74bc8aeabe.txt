{"context": " More than 1 year has passed since last update.\n\n<ENGLISH>\nHi, I hope you're doing well. \nI'm so sleepy... because gym activities in morning time. But I'd like to resume my process ... with drink  yahoo!\nSo today's topic is finally ... machine learning! we already got necessary elements for learning ant test, so only what I have to do, train my machine!\nStart ... but I have to say one thing before starting. \nI can't do coding of Machine Learning...!\nReally sorry, oh, stop!! don't through a stone in you hand ... yep, light. I don't make it actually I can't. \nInstead, I'd like to use script from another site. And I think you know it. Here. \n\u6a5f\u68b0\u5b66\u7fd2 \u306f\u3058\u3081\u3088\u3046 \u7b2c3\u56de\u3000\u30d9\u30a4\u30b8\u30a2\u30f3\u30d5\u30a3\u30eb\u30bf\u3092\u5b9f\u88c5\u3057\u3066\u307f\u3088\u3046 - gihyo.jp\nThis is very good site for learning Machine Learning as entrance. I really recommend it. \nSo today, that's call it for today... ? Humm. Actually I have to change some points to apply to my purpose. I'd like to show some change how I can change it. Nothing of machine learning today... \ndef train(self, doc, cat):\nword = getwords(doc)\nfor w in word:\n    self.wordcountup(w, cat)\nself.catcountup(cat)\n\nThis is train function: Got words in doc then cat value amounts are counted up for the words. However this is only for one category by one web content. However there are two or upper category will also be tagged for one web content. So I changed the script like this. \ndef train(self, doc, cats):\nword = getwords(doc)\nfor w in word:\n    for cat in cats:\n        self.wordcountup(w, cat)\n        self.catcountup(cat)\n\nUse cats value as list. Not single string. using for to count up each category by words. \nNext is to modifying the result showing. Original script is like this. \ndef classifier(self, doc):\n    best = None\n    max = -sys.maxint\n    word = getwords(doc)\n\n    for cat in self.catcount.keys():\n        prob = self.score(word, cat)\n        if prob < max:\n            max = prob\n            best = cat\n    return best\n\nThis function returns the best category name. However I'd like to show all category and probability. So I modified like this. \ndef classifier(self, doc):\n    best = None\n    max = -sys.maxint\n    word = getwords(doc)\n    pList = []\n\n    for cat in self.catcount.keys():\n        prob = math.exp(self.score(word, cat))\n        pList.append([cat, self.score(word, cat)]) \n\n    return sorted( pList, key=lambda prob: prob[1], reverse=True)\n\nPrevious code, just return maximum probably tag. But I'd like to know all tag's result. so return the list. \nThe engine of machine language is just using other person's idea... Next I'd like to show you the result of the machine learning and consideration. \n\n<\u65e5\u672c\u8a9e>\n\u3069\u3046\u3082\u3069\u3046\u3082\u3001\u6885\u6751\u3067\u3059\u3002\n\u3044\u3064\u3082\u30d3\u30fc\u30eb\u4e00\u7f36\u3042\u304a\u3063\u3066\u304b\u3089\u6587\u7ae0\u66f8\u3044\u3066\u3044\u307e\u3059\u3002\u307b\u308d\u3088\u3044\u304c\u3061\u3087\u3046\u3069\u3088\u3044\u3093\u3059\u3002\n\u3067\u306f\u3001\u304d\u3087\u3046\u306f\u3068\u3046\u3068\u3046\u6a5f\u68b0\u5b66\u7fd2\u306e\u672c\u4e38\u306b\u3044\u304d\u307e\u3059\u3002\u3044\u3084\u30fc\u3001\u3053\u3053\u307e\u3067\u304a\u5f85\u3061\u3044\u305f\u3060\u3044\u3066\u7533\u3057\u308f\u3051\u306a\u3044\u3067\u3059\u3002\u3068\u3046\u3068\u3046\u306f\u3058\u307e\u308a\u307e\u3059\u3088\u30fc\u3002\u3044\u3084\u306f\u3084\u3002\u3002\u3072\u3068\u3064\u8b1d\u308a\u305f\u3044\u3053\u3068\u304c\u3042\u308a\u307e\u3059\u3002\n\u4eca\u56de\u306f\u6a5f\u68b0\u5b66\u7fd2\u306e\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0\u306f\u3044\u305f\u3057\u307e\u305b\u3093\uff01\n\u3044\u3084\u3001\u3084\u3081\u3066\u3001\u77f3\u6295\u3052\u306a\u3044\u3067\uff01\u3000\u30fb\u30fb\u30fb\u3000\u305d\u3046\u306a\u3093\u3067\u3059\u3002\u3084\u308a\u307e\u305b\u3093\u3002\u3068\u3044\u3046\u304b\u3067\u304d\u307e\u305b\u3093\u3002\u4ee3\u308f\u308a\u306b\u6a5f\u68b0\u5b66\u7fd2\u4ee5\u4e0b\u306e\u30b5\u30a4\u30c8\u306e\u30cd\u30a4\u30c6\u30a3\u30d6\u30d9\u30a4\u30ba\u306e\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u3092\u6d41\u7528\u3044\u305f\u3057\u307e\u3059\u3002\n\u6a5f\u68b0\u5b66\u7fd2 \u306f\u3058\u3081\u3088\u3046 \u7b2c3\u56de\u3000\u30d9\u30a4\u30b8\u30a2\u30f3\u30d5\u30a3\u30eb\u30bf\u3092\u5b9f\u88c5\u3057\u3066\u307f\u3088\u3046 - gihyo.jp\n\u3053\u306e\u8a18\u4e8b\u3068\u30b7\u30ea\u30fc\u30ba\u306f\u3068\u3066\u3082\u52c9\u5f37\u306b\u306a\u308a\u307e\u3059\u3002\u5b9f\u306f\u79c1\u3082\u3053\u306e\u8a18\u4e8b\u3092\u3068\u3063\u304b\u304b\u308a\u306b\u3057\u3066\u6a5f\u68b0\u5b66\u7fd2\u3092\u306f\u3058\u3081\u307e\u3057\u305f\u3002\u9ad8\u6821\u6570\u5b66\u306e\u78ba\u7387\u3001\u4ee3\u6570\u8a08\u7b97\u3001\u5fae\u5206\u306e\u77e5\u8b58\u3092\u4e00\u56de\u601d\u3044\u51fa\u305b\u308c\u3070\u3060\u308c\u3067\u3082\u6a5f\u68b0\u5b66\u7fd2\u306b\u53d6\u308a\u7d44\u3080\u3053\u3068\u304c\u3067\u304d\u308b\u3001\u3068\u3066\u3082\u4e01\u5be7\u306a\u3064\u304f\u308a\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u3002\n\u3067\u306f\u3001\u672c\u65e5\u306e\u5185\u5bb9\u304c\u304a\u308f\u3063\u3066\u3057\u307e\u3044\u307e\u3057\u305f\u3002\u3002\u3002\u305d\u308c\u3067\u306f\uff01\n\u3068\u3001\u3044\u3046\u306e\u3082\u5bc2\u3057\u3044\u306e\u3067\u4eca\u65e5\u306f\u3053\u306e\u30cd\u30a4\u30c6\u30a3\u30d6\u30d9\u30a4\u30ba\u306e\u30b3\u30fc\u30c9\u3092\u3069\u306e\u3088\u3046\u306b\u6539\u5909\u3057\u305f\u306e\u304b\u306e\u3054\u7d39\u4ecb\u3092\u3057\u305f\u3044\u3068\u304a\u3082\u3044\u307e\u3059\u3002\n\u307e\u305a\u306f\u4ee5\u4e0b\u306e\u90e8\u5206\u3002\ndef train(self, doc, cat):\nword = getwords(doc)\nfor w in word:\n    self.wordcountup(w, cat)\nself.catcountup(cat)\n\n\u3053\u3053\u3067\u3001doc\u306f\u5b66\u7fd2\u3092\u3059\u308b\u6587\u7ae0\u3001cat\u306f\u5f53\u3066\u306f\u3081\u308b\u30bf\u30b0\u306a\u306e\u3067\u3059\u304c\u30aa\u30ea\u30b8\u30ca\u30eb\u306f\u4e00\u3064\u306e\u6587\u7ae0\u306b\u4e00\u3064\u306e\u30bf\u30b0\u3057\u304b\u3064\u3051\u3089\u308c\u306a\u3044\u5f62\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u3002\u305f\u3060\u3001\u4eca\u56de\u306f\u8907\u6570\u306e\u30bf\u30b0\u4ed8\u3051\u3092\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u308b\u306e\u3067cat\u3092cats\u306b\u3057\u3066\u30bf\u30b0\u306e\u30ea\u30b9\u30c8\u3092\u5165\u308c\u3089\u308c\u308b\u3088\u3046\u306b\u3057\u307e\u3059\u3002\ndef train(self, doc, cats):\nword = getwords(doc)\nfor w in word:\n    for cat in cats:\n        self.wordcountup(w, cat)\n        self.catcountup(cat)\n\n\u305d\u308c\u306b\u3042\u308f\u305b\u3066\u30ea\u30b9\u30c8\u306e\u306a\u304b\u306e\u30bf\u30b0\u3072\u3068\u3064\u3072\u3068\u3064\u306e\u51fa\u73fe\u30ab\u30a6\u30f3\u30c8\u3092\u30a2\u30c3\u30d7\u3055\u305b\u3066\u304a\u308a\u3084\u3059\u3002\n\u305d\u3057\u3066\u6b21\u3002\u63a8\u5b9a\u306e\u5224\u5b9a\u7d50\u679c\u306e\u898b\u305b\u65b9\u3067\u3059\u304c\u3001\u30aa\u30ea\u30b8\u30ca\u30eb\u306e\u30b9\u30af\u30ea\u30d7\u30c8\u306f\u305f\u3060\u3001\u4e00\u756a\u78ba\u7387\u304c\u9ad8\u304b\u3063\u305f\u30bf\u30b0\u3092\u8fd4\u3059\u3088\u3046\u306b\u3057\u3066\u3044\u307e\u3059\u3002\ndef classifier(self, doc):\n    best = None\n    max = -sys.maxint\n    word = getwords(doc)\n\n    for cat in self.catcount.keys():\n        prob = self.score(word, cat)\n        if prob < max:\n            max = prob\n            best = cat\n    return best\n\n\u305d\u308c\u3060\u3051\u3060\u3068\u8003\u5bdf\u306e\u30cd\u30bf\u304c\u5c11\u306a\u3044\u306e\u3067\u3001\u3059\u3079\u3066\u306e\u30bf\u30b0\u3068\u305d\u306e\u78ba\u7387\uff08\u5b9f\u969b\u306f\u5bfe\u6570\u5024\uff09\u3092\u8fd4\u3059\u3088\u3046\u306b\u3057\u307e\u3059\u3002\u78ba\u7387\u9ad8\u3044\u9806\u306b\u4e26\u3073\u66ff\u3048\u3066\u307e\u3059\u3002\ndef classifier(self, doc):\n    best = None\n    max = -sys.maxint\n    word = getwords(doc)\n    pList = []\n\n    for cat in self.catcount.keys():\n        prob = math.exp(self.score(word, cat))\n        pList.append([cat, self.score(word, cat)]) \n\n    return sorted( pList, key=lambda prob: prob[1], reverse=True)\n\n\u306f\u3066\u3055\u3066\u3001\u672c\u65e5\u306f\u6a5f\u68b0\u5b66\u7fd2\u306e\u30b9\u30af\u30ea\u30d7\u30c8\u30fb\u30fb\u30fb\u3092\u3054\u7d39\u4ecb\u3055\u305b\u3066\u3044\u305f\u3060\u304d\u307e\u3057\u305f\u3002\u6b21\u56de\u306f\u3053\u306e\u30b9\u30af\u30ea\u30d7\u30c8\u3092\u4f7f\u3063\u3066\u5b66\u7fd2\u3092\u3055\u305b\u3066\u3001\u305d\u306e\u7d50\u679c\u3092\u304a\u898b\u305b\u3057\u305f\u3044\u3068\u601d\u3044\u307e\u3059\u3002\u305d\u3057\u3066\u305d\u306e\u7d50\u679c\u306b\u3064\u3044\u3066\u3044\u308d\u3044\u308d\u8003\u5bdf\u3092\u3057\u3066\u3044\u304d\u305f\u3044\u3068\u601d\u3044\u307e\u3059\u3002\n\u305d\u308c\u3067\u306f\u307e\u305f\u3001\u304a\u5143\u6c17\u3067\uff01\n#\\<ENGLISH>\n\nHi, I hope you're doing well. \nI'm so sleepy... because gym activities in morning time. But I'd like to resume my process ... with drink :stuck_out_tongue_closed_eyes: yahoo!\n\nSo today's topic is finally ... machine learning! we already got necessary elements for learning ant test, so only what I have to do, train my machine!\nStart ... but I have to say one thing before starting. \n\n**I can't do coding of Machine Learning...!**\n\nReally sorry, oh, stop!! don't through a stone in you hand ... yep, light. I don't make it actually I can't. \nInstead, I'd like to use script from another site. And I think you know it. Here. \n[\u6a5f\u68b0\u5b66\u7fd2 \u306f\u3058\u3081\u3088\u3046 \u7b2c3\u56de\u3000\u30d9\u30a4\u30b8\u30a2\u30f3\u30d5\u30a3\u30eb\u30bf\u3092\u5b9f\u88c5\u3057\u3066\u307f\u3088\u3046 - gihyo.jp](http://gihyo.jp/dev/serial/01/machine-learning/0003)\nThis is very good site for learning Machine Learning as entrance. I really recommend it. \n\nSo today, that's call it for today... ? Humm. Actually I have to change some points to apply to my purpose. I'd like to show some change how I can change it. Nothing of machine learning today... \n\n    def train(self, doc, cat):\n    word = getwords(doc)\n    for w in word:\n        self.wordcountup(w, cat)\n    self.catcountup(cat)\n\nThis is train function: Got words in doc then cat value amounts are counted up for the words. However this is only for one category by one web content. However there are two or upper category will also be tagged for one web content. So I changed the script like this. \n\n    def train(self, doc, cats):\n    word = getwords(doc)\n    for w in word:\n        for cat in cats:\n            self.wordcountup(w, cat)\n            self.catcountup(cat)\n\nUse cats value as list. Not single string. using for to count up each category by words. \n\nNext is to modifying the result showing. Original script is like this. \n\n    \n    def classifier(self, doc):\n        best = None\n        max = -sys.maxint\n        word = getwords(doc)\n    \n        for cat in self.catcount.keys():\n            prob = self.score(word, cat)\n            if prob < max:\n                max = prob\n                best = cat\n        return best\n\nThis function returns the best category name. However I'd like to show all category and probability. So I modified like this. \n\n    def classifier(self, doc):\n        best = None\n        max = -sys.maxint\n        word = getwords(doc)\n        pList = []\n        \n        for cat in self.catcount.keys():\n            prob = math.exp(self.score(word, cat))\n            pList.append([cat, self.score(word, cat)]) \n\n        return sorted( pList, key=lambda prob: prob[1], reverse=True)\n\n\nPrevious code, just return maximum probably tag. But I'd like to know all tag's result. so return the list. \n\nThe engine of machine language is just using other person's idea... Next I'd like to show you the result of the machine learning and consideration. \n\n\n#<\u65e5\u672c\u8a9e>\n\u3069\u3046\u3082\u3069\u3046\u3082\u3001\u6885\u6751\u3067\u3059\u3002\n\n\u3044\u3064\u3082\u30d3\u30fc\u30eb\u4e00\u7f36\u3042\u304a\u3063\u3066\u304b\u3089\u6587\u7ae0\u66f8\u3044\u3066\u3044\u307e\u3059\u3002\u307b\u308d\u3088\u3044\u304c\u3061\u3087\u3046\u3069\u3088\u3044\u3093\u3059\u3002\n\n\u3067\u306f\u3001\u304d\u3087\u3046\u306f\u3068\u3046\u3068\u3046\u6a5f\u68b0\u5b66\u7fd2\u306e\u672c\u4e38\u306b\u3044\u304d\u307e\u3059\u3002\u3044\u3084\u30fc\u3001\u3053\u3053\u307e\u3067\u304a\u5f85\u3061\u3044\u305f\u3060\u3044\u3066\u7533\u3057\u308f\u3051\u306a\u3044\u3067\u3059\u3002\u3068\u3046\u3068\u3046\u306f\u3058\u307e\u308a\u307e\u3059\u3088\u30fc\u3002\u3044\u3084\u306f\u3084\u3002\u3002\u3072\u3068\u3064\u8b1d\u308a\u305f\u3044\u3053\u3068\u304c\u3042\u308a\u307e\u3059\u3002\n\n**\u4eca\u56de\u306f\u6a5f\u68b0\u5b66\u7fd2\u306e\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0\u306f\u3044\u305f\u3057\u307e\u305b\u3093\uff01**\n\n\u3044\u3084\u3001\u3084\u3081\u3066\u3001\u77f3\u6295\u3052\u306a\u3044\u3067\uff01\u3000\u30fb\u30fb\u30fb\u3000\u305d\u3046\u306a\u3093\u3067\u3059\u3002\u3084\u308a\u307e\u305b\u3093\u3002\u3068\u3044\u3046\u304b\u3067\u304d\u307e\u305b\u3093\u3002\u4ee3\u308f\u308a\u306b\u6a5f\u68b0\u5b66\u7fd2\u4ee5\u4e0b\u306e\u30b5\u30a4\u30c8\u306e\u30cd\u30a4\u30c6\u30a3\u30d6\u30d9\u30a4\u30ba\u306e\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u3092\u6d41\u7528\u3044\u305f\u3057\u307e\u3059\u3002\n\n[\u6a5f\u68b0\u5b66\u7fd2 \u306f\u3058\u3081\u3088\u3046 \u7b2c3\u56de\u3000\u30d9\u30a4\u30b8\u30a2\u30f3\u30d5\u30a3\u30eb\u30bf\u3092\u5b9f\u88c5\u3057\u3066\u307f\u3088\u3046 - gihyo.jp](http://gihyo.jp/dev/serial/01/machine-learning/0003)\n\n\u3053\u306e\u8a18\u4e8b\u3068\u30b7\u30ea\u30fc\u30ba\u306f\u3068\u3066\u3082\u52c9\u5f37\u306b\u306a\u308a\u307e\u3059\u3002\u5b9f\u306f\u79c1\u3082\u3053\u306e\u8a18\u4e8b\u3092\u3068\u3063\u304b\u304b\u308a\u306b\u3057\u3066\u6a5f\u68b0\u5b66\u7fd2\u3092\u306f\u3058\u3081\u307e\u3057\u305f\u3002\u9ad8\u6821\u6570\u5b66\u306e\u78ba\u7387\u3001\u4ee3\u6570\u8a08\u7b97\u3001\u5fae\u5206\u306e\u77e5\u8b58\u3092\u4e00\u56de\u601d\u3044\u51fa\u305b\u308c\u3070\u3060\u308c\u3067\u3082\u6a5f\u68b0\u5b66\u7fd2\u306b\u53d6\u308a\u7d44\u3080\u3053\u3068\u304c\u3067\u304d\u308b\u3001\u3068\u3066\u3082\u4e01\u5be7\u306a\u3064\u304f\u308a\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u3002\n\n\u3067\u306f\u3001\u672c\u65e5\u306e\u5185\u5bb9\u304c\u304a\u308f\u3063\u3066\u3057\u307e\u3044\u307e\u3057\u305f\u3002\u3002\u3002\u305d\u308c\u3067\u306f\uff01\n\u3068\u3001\u3044\u3046\u306e\u3082\u5bc2\u3057\u3044\u306e\u3067\u4eca\u65e5\u306f\u3053\u306e\u30cd\u30a4\u30c6\u30a3\u30d6\u30d9\u30a4\u30ba\u306e\u30b3\u30fc\u30c9\u3092\u3069\u306e\u3088\u3046\u306b\u6539\u5909\u3057\u305f\u306e\u304b\u306e\u3054\u7d39\u4ecb\u3092\u3057\u305f\u3044\u3068\u304a\u3082\u3044\u307e\u3059\u3002\n\u307e\u305a\u306f\u4ee5\u4e0b\u306e\u90e8\u5206\u3002\n\n    def train(self, doc, cat):\n    word = getwords(doc)\n    for w in word:\n        self.wordcountup(w, cat)\n    self.catcountup(cat)\n\n\u3053\u3053\u3067\u3001doc\u306f\u5b66\u7fd2\u3092\u3059\u308b\u6587\u7ae0\u3001cat\u306f\u5f53\u3066\u306f\u3081\u308b\u30bf\u30b0\u306a\u306e\u3067\u3059\u304c\u30aa\u30ea\u30b8\u30ca\u30eb\u306f\u4e00\u3064\u306e\u6587\u7ae0\u306b\u4e00\u3064\u306e\u30bf\u30b0\u3057\u304b\u3064\u3051\u3089\u308c\u306a\u3044\u5f62\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u3002\u305f\u3060\u3001\u4eca\u56de\u306f\u8907\u6570\u306e\u30bf\u30b0\u4ed8\u3051\u3092\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u308b\u306e\u3067cat\u3092cats\u306b\u3057\u3066\u30bf\u30b0\u306e\u30ea\u30b9\u30c8\u3092\u5165\u308c\u3089\u308c\u308b\u3088\u3046\u306b\u3057\u307e\u3059\u3002\n\n    def train(self, doc, cats):\n    word = getwords(doc)\n    for w in word:\n        for cat in cats:\n            self.wordcountup(w, cat)\n            self.catcountup(cat)\n\n\u305d\u308c\u306b\u3042\u308f\u305b\u3066\u30ea\u30b9\u30c8\u306e\u306a\u304b\u306e\u30bf\u30b0\u3072\u3068\u3064\u3072\u3068\u3064\u306e\u51fa\u73fe\u30ab\u30a6\u30f3\u30c8\u3092\u30a2\u30c3\u30d7\u3055\u305b\u3066\u304a\u308a\u3084\u3059\u3002\n\n\u305d\u3057\u3066\u6b21\u3002\u63a8\u5b9a\u306e\u5224\u5b9a\u7d50\u679c\u306e\u898b\u305b\u65b9\u3067\u3059\u304c\u3001\u30aa\u30ea\u30b8\u30ca\u30eb\u306e\u30b9\u30af\u30ea\u30d7\u30c8\u306f\u305f\u3060\u3001\u4e00\u756a\u78ba\u7387\u304c\u9ad8\u304b\u3063\u305f\u30bf\u30b0\u3092\u8fd4\u3059\u3088\u3046\u306b\u3057\u3066\u3044\u307e\u3059\u3002\n    \n    def classifier(self, doc):\n        best = None\n        max = -sys.maxint\n        word = getwords(doc)\n    \n        for cat in self.catcount.keys():\n            prob = self.score(word, cat)\n            if prob < max:\n                max = prob\n                best = cat\n        return best\n\n\u305d\u308c\u3060\u3051\u3060\u3068\u8003\u5bdf\u306e\u30cd\u30bf\u304c\u5c11\u306a\u3044\u306e\u3067\u3001\u3059\u3079\u3066\u306e\u30bf\u30b0\u3068\u305d\u306e\u78ba\u7387\uff08\u5b9f\u969b\u306f\u5bfe\u6570\u5024\uff09\u3092\u8fd4\u3059\u3088\u3046\u306b\u3057\u307e\u3059\u3002\u78ba\u7387\u9ad8\u3044\u9806\u306b\u4e26\u3073\u66ff\u3048\u3066\u307e\u3059\u3002\n\n    def classifier(self, doc):\n        best = None\n        max = -sys.maxint\n        word = getwords(doc)\n        pList = []\n        \n        for cat in self.catcount.keys():\n            prob = math.exp(self.score(word, cat))\n            pList.append([cat, self.score(word, cat)]) \n\n        return sorted( pList, key=lambda prob: prob[1], reverse=True)\n\n\n\u306f\u3066\u3055\u3066\u3001\u672c\u65e5\u306f\u6a5f\u68b0\u5b66\u7fd2\u306e\u30b9\u30af\u30ea\u30d7\u30c8\u30fb\u30fb\u30fb\u3092\u3054\u7d39\u4ecb\u3055\u305b\u3066\u3044\u305f\u3060\u304d\u307e\u3057\u305f\u3002\u6b21\u56de\u306f\u3053\u306e\u30b9\u30af\u30ea\u30d7\u30c8\u3092\u4f7f\u3063\u3066\u5b66\u7fd2\u3092\u3055\u305b\u3066\u3001\u305d\u306e\u7d50\u679c\u3092\u304a\u898b\u305b\u3057\u305f\u3044\u3068\u601d\u3044\u307e\u3059\u3002\u305d\u3057\u3066\u305d\u306e\u7d50\u679c\u306b\u3064\u3044\u3066\u3044\u308d\u3044\u308d\u8003\u5bdf\u3092\u3057\u3066\u3044\u304d\u305f\u3044\u3068\u601d\u3044\u307e\u3059\u3002\n\n\u305d\u308c\u3067\u306f\u307e\u305f\u3001\u304a\u5143\u6c17\u3067\uff01\n", "tags": ["MachineLearning", "Python", "scraping"]}