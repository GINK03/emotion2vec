{"context": "\n\nScrollView\u306e\u4e2d\u306bMenu\u3092\u5165\u308c\u305f\u6642\u306e\u554f\u984c\u70b9\n\nMenu\u304c\u30bf\u30c3\u30c1\u3092\u98f2\u307f\u8fbc\u3093\u3067\u3001\u30b9\u30af\u30ed\u30fc\u30eb\u3067\u304d\u306a\u3044\u3002\n\u30b9\u30af\u30ed\u30fc\u30eb\u304c\u7d42\u308f\u3063\u305f\u6642\u3001\u6700\u5f8c\u306b\u89e6\u308c\u3066\u3044\u305fMenuItem\u304cactivate\u3055\u308c\u308b\u3002\nScrollView\u306e\u898b\u3048\u306a\u3044\u30a8\u30ea\u30a2\u306b\u306f\u307f\u3060\u3057\u305fMenuItem\u3082\u30bf\u30c3\u30c1\u306b\u53cd\u5fdc\u3057\u3066\u3057\u307e\u3046\u3002\n\n\u3053\u308c\u3089\u3092\u89e3\u6c7a\u3059\u308b\u305f\u3081\u306b\u3001Menu\u306e\u30b5\u30d6\u30af\u30e9\u30b9\u3092\u4f5c\u308b\u3002\n\nMyMenu.h\n#ifndef __MyMenu__\n#define __MyMenu__\n\n#include \"cocos2d.h\"\n#include \"ui/CocosGUI.h\"\n\nUSING_NS_CC;\nusing namespace ui;\n\nclass MyMenu : public Menu\n{\npublic:\n    MyMenu();\n    ~MyMenu();\n    static MyMenu* create();\n    static MyMenu* create(MenuItem* item, ...) CC_REQUIRES_NULL_TERMINATION;\n    static MyMenu* createWithItems(MenuItem* item, va_list args);\n    static MyMenu* createWithArray(const Vector<MenuItem*>& arrayOfItems);\n\n    virtual bool init();\n    virtual bool initWithArray(const Vector<MenuItem*>& arrayOfItems);\n\n    void setScrollView(ScrollView* scrollView);\n\n    virtual bool onTouchBegan(Touch* touch, Event* event) override;\n    virtual void onTouchEnded(Touch* touch, Event* event) override;\n    virtual void onTouchCancelled(Touch* touch, Event* event) override;\n    virtual void onTouchMoved(Touch* touch, Event* event) override;\nprotected:\nprivate:\n    EventListenerTouchOneByOne* _listener;\n    ScrollView* _scrollView;\n};\n\n#endif\n\n\nEventListener\u3092\u30e1\u30f3\u30d0\u5909\u6570\u306b\u3059\u308b\u3053\u3068\u306b\u3088\u3063\u3066\u3001\n\u5f8c\u304b\u3089swallowTouches\u3092\u5909\u66f4\u3067\u304d\u308b\u3088\u3046\u306b\u3057\u305f\u3002\n\nMyMenu.cpp\n#include \"MyMenu.h\"\n\nMyMenu::MyMenu()\n:_listener(nullptr),\n_scrollView(nullptr)\n{\n\n}\n\nMyMenu::~MyMenu()\n{\n    CC_SAFE_RELEASE_NULL(_listener);\n}\n\n#pragma mark - create methods\n\nMyMenu* MyMenu::create()\n{\n    return MyMenu::create(nullptr, nullptr);\n}\n\nMyMenu* MyMenu::create(MenuItem* item, ...)\n{\n    va_list args;\n    va_start(args,item);\n\n    MyMenu *ret = MyMenu::createWithItems(item, args);\n\n    va_end(args);\n\n    return ret;\n}\n\nMyMenu* MyMenu::createWithItems(MenuItem* item, va_list args)\n{\n    Vector<MenuItem*> items;\n    if( item )\n    {\n        items.pushBack(item);\n        MenuItem *i = va_arg(args, MenuItem*);\n        while(i)\n        {\n            items.pushBack(i);\n            i = va_arg(args, MenuItem*);\n        }\n    }\n\n    return MyMenu::createWithArray(items);\n}\n\nMyMenu* MyMenu::createWithArray(const Vector<MenuItem*>& arrayOfItems)\n{\n    auto ret = new (std::nothrow) MyMenu();\n    if (ret && ret->initWithArray(arrayOfItems))\n    {\n        ret->autorelease();\n    }\n    else\n    {\n        CC_SAFE_DELETE(ret);\n    }\n\n    return ret;\n}\n\n#pragma mark - initializer\n\nbool MyMenu::init()\n{\n    return initWithArray(Vector<MenuItem*>());\n}\n\nbool MyMenu::initWithArray(const Vector<MenuItem*>& arrayOfItems)\n{\n    if (Layer::init())\n    {\n        _enabled = true;\n\n        ignoreAnchorPointForPosition(false);\n        setContentSize(Size(0,0));\n\n        int z=0;\n\n        for (auto& item : arrayOfItems)\n        {\n            this->addChild(item, z);\n            z++;\n        }\n\n        _selectedItem = nullptr;\n        _state = Menu::State::WAITING;\n\n        // enable cascade color and opacity on menus\n        setCascadeColorEnabled(true);\n        setCascadeOpacityEnabled(true);\n\n\n        _listener = EventListenerTouchOneByOne::create();\n        CC_SAFE_RETAIN(_listener);\n        _listener->setSwallowTouches(true);\n\n        _listener->onTouchBegan = CC_CALLBACK_2(Menu::onTouchBegan, this);\n        _listener->onTouchMoved = CC_CALLBACK_2(Menu::onTouchMoved, this);\n        _listener->onTouchEnded = CC_CALLBACK_2(Menu::onTouchEnded, this);\n        _listener->onTouchCancelled = CC_CALLBACK_2(Menu::onTouchCancelled, this);\n\n        _eventDispatcher->addEventListenerWithSceneGraphPriority(_listener, this);\n\n        return true;\n    } else {\n        return false;\n    }\n}\n\n\nScrollView\u3092\u30bb\u30c3\u30c8\u3059\u308b\u6642\u3001swallowTouches\u3092false\u306b\u3057\u3066\u3001\nScrollView\u306b\u30bf\u30c3\u30c1\u30a4\u30d9\u30f3\u30c8\u3092\u6e21\u305b\u308b\u3088\u3046\u306b\u3059\u308b\u3002\n\u307e\u305f\u3001ScrollView\u304c\u30b9\u30af\u30ed\u30fc\u30eb\u3057\u305f\u6642\u3001Menu\u306e\u30bf\u30c3\u30c1\u30a4\u30d9\u30f3\u30c8\u3092\u30ad\u30e3\u30f3\u30bb\u30eb\u3059\u308b\u3088\u3046\u306b\u3059\u308b\u3002\n\nMyMenu.cpp\nvoid MyMenu::setScrollView(ScrollView* scrollView)\n{\n    _scrollView = scrollView;\n    _listener->setSwallowTouches(false);\n    _scrollView->addEventListener([this](Ref* ref, ScrollView::EventType eventType) {\n        if (eventType == ScrollView::EventType::CONTAINER_MOVED) {\n            this->onTouchCancelled(nullptr, nullptr);\n        }\n    });\n}\n\n\nonTouchBegan\u3067\u306f\u3001\u30bf\u30c3\u30c1\u304cScrollView\u306e\u4e2d\u306b\u3042\u308b\u304b\u8abf\u3079\u3066\u3001\n\u305d\u3046\u3067\u306a\u3051\u308c\u3070false\u3092\u8fd4\u3057\u305f\u3002\n\nMyMenu.cpp\n#pragma mark - touch\n\nbool MyMenu::onTouchBegan(Touch* touch, Event* event)\n{\n    if (_scrollView) {\n        Point touchPoint = touch->getLocation();\n        Rect rect = Rect(_scrollView->convertToWorldSpace(_scrollView->getPosition()),\n                         _scrollView->getContentSize());\n        if (rect.containsPoint(touchPoint)) {\n            return Menu::onTouchBegan(touch, event);\n        } else {\n            return false;\n        }\n    } else {\n        return Menu::onTouchBegan(touch, event);\n    }\n}\n\n\nScrollView\u304c\u30b9\u30af\u30ed\u30fc\u30eb\u3057\u305f\u6642\u3001Menu\u306e\u30bf\u30c3\u30c1\u30a4\u30d9\u30f3\u30c8\u304c\u30ad\u30e3\u30f3\u30bb\u30eb\u3055\u308c\u308b\u304c\u3001\n\u305d\u306e\u5f8c\u3001onTouchMoved\u3084onTouchEnded\u304c\u547c\u3070\u308c\u308b\u3068\u3001Menu\u306e\u30a2\u30b5\u30fc\u30b7\u30e7\u30f3\u306b\u3088\u3063\u3066\n\u30a2\u30d7\u30ea\u304c\u7d42\u4e86\u3057\u3066\u3057\u307e\u3046\u306e\u3067\u3001\u3053\u308c\u3089\u306e\u30e1\u30bd\u30c3\u30c9\u3092\u4e0a\u66f8\u304d\u3059\u308b\u3002\n\nMyMenu.cpp\nvoid MyMenu::onTouchEnded(Touch* touch, Event* event)\n{\n    if (_state == Menu::State::TRACKING_TOUCH) {\n        Menu::onTouchEnded(touch, event);\n    }\n}\n\nvoid MyMenu::onTouchCancelled(Touch* touch, Event* event)\n{\n    if (_state == Menu::State::TRACKING_TOUCH) {\n        Menu::onTouchCancelled(touch, event);\n    }\n}\n\nvoid MyMenu::onTouchMoved(Touch* touch, Event* event)\n{\n    if (_state == Menu::State::TRACKING_TOUCH) {\n        Menu::onTouchMoved(touch, event);\n    }\n}\n\n\n\n\n\u4f7f\u3044\u65b9\nMyMenu\u3092ScrollView\u306b\u5165\u308c\u3066\u3001\nmenu->setScrollView(scrollView);\n\u3068\u3059\u308b\u3002\n\nHelloWorldScene.cpp\nMyMenu* menu = MyMenu::create();\n\nfor (int i = 0; i < 30; i++) {\n    Label* label = Label::createWithSystemFont(StringUtils::format(\"TestString%d\", i),\n                                               \"Helvetica\",\n                                               20);\n    MenuItemLabel* item = MenuItemLabel::create(label, [i](Ref* sender) {\n        CCLOG(\"item pressed : %d\", i);\n    });\n    menu->addChild(item);\n}\nmenu->alignItemsVertically();\nmenu->setContentSize(size);\n\nScrollView* scrollView = ScrollView::create();\nscrollView->addChild(menu);\nscrollView->setInnerContainerSize(menu->getContentSize());\nscrollView->setContentSize(Size(100,100));\nscrollView->setDirection(ScrollView::Direction::VERTICAL);\n\nmenu->setScrollView(scrollView);\n\n\n\u3053\u306e\u65b9\u6cd5\u3060\u3068\u3001ScrollView\u306e\u30b5\u30d6\u30af\u30e9\u30b9\u306f\u4f5c\u3089\u305a\u306b\u3001\u89e3\u6c7a\u3059\u308b\u3002\n\u8ffd\u8a18\uff1a\nMenu\u304b\u3089ScrollView\u306b\u6e21\u3059\u30b3\u30fc\u30eb\u30d0\u30c3\u30af\u3092\u5909\u66f4\n\nMyMenu.cpp\n_scrollView->addEventListener([this](Ref* ref, ScrollView::EventType eventType) {\n        //if (eventType == ScrollView::EventType::SCROLLING) {\n        if (eventType == ScrollView::EventType::CONTAINER_MOVED) {\n            this->onTouchCancelled(nullptr, nullptr);\n        }\n    });\n\n\n\u307e\u305f\u3001\u3053\u306e\u65b9\u6cd5\u3060\u3068\u3001Xperia\u306a\u3069\u306e\u4e00\u90e8\u306eAndroid\u7aef\u672b\u3067\u3001\n\u30bf\u30c3\u30c1\u306e\u5fae\u5c0f\u306a\u52d5\u304d\u304c\u30b9\u30af\u30ed\u30fc\u30eb\u3068\u611f\u77e5\u3055\u308c\u3066\u3057\u307e\u3044\u3001\n\u30dc\u30bf\u30f3\u306e\u30bf\u30c3\u30c1\u304c\u5168\u3066\u30ad\u30e3\u30f3\u30bb\u30eb\u3055\u308c\u3066\u3057\u307e\u3044\u30dc\u30bf\u30f3\u304c\u62bc\u305b\u306a\u3044\u3068\u3044\u3046\u554f\u984c\u304c\u8d77\u3053\u3063\u305f\u3002\nScrollView\u306e\u30b3\u30fc\u30c9\u3092\u5909\u66f4\u3057\u3066\u3001_innerContainer\u304c20\u4ee5\u4e0a\u52d5\u3044\u305f\u6642\u306b\u30b3\u30fc\u30eb\u30d0\u30c3\u30af\u3092\n\u547c\u3076\u3088\u3046\u306b\u3057\u305f\u3002\n\nUIScrollView.h\nclass CC_GUI_DLL ScrollView : public Layout\n{\n    //\u4e2d\u7565\n    //\u30bf\u30c3\u30c1\u958b\u59cb\u3057\u305f\u6642\u306e_innerContainer\u306e\u4f4d\u7f6e\u3092\u899a\u3048\u3066\u304a\u304f\u5909\u6570\n    Vec2 _scrollStartPosition;\n}\n\n\n\nUIScrollView.cpp\nbool ScrollView::onTouchBegan(Touch *touch, Event *unusedEvent)\n{\n    //edit\n    _scrollStartPosition = _innerContainer->getPosition();\n\n    bool pass = Layout::onTouchBegan(touch, unusedEvent);\n    if (!_isInterceptTouch)\n    {\n        if (_hitted)\n        {\n            handlePressLogic(touch);\n        }\n    }\n    return pass;\n}\nvoid ScrollView::setInnerContainerPosition(const Vec2 &position)\n{\n    if(position == _innerContainer->getPosition())\n    {\n        return;\n    }\n    _innerContainer->setPosition(position);\n    _outOfBoundaryAmountDirty = true;\n\n    // Process bouncing events\n    if(_bounceEnabled)\n    {\n        for(int direction = (int) MoveDirection::TOP; direction < (int) MoveDirection::RIGHT; ++direction)\n        {\n            if(isOutOfBoundary((MoveDirection) direction))\n            {\n                processScrollEvent((MoveDirection) direction, true);\n            }\n        }\n    }\n\n    this->retain();\n    //if (_eventCallback)\n    //edit\n    if (_eventCallback && _scrollStartPosition.distanceSquared(_innerContainer->getPosition()) > 400)\n    {\n        _eventCallback(this, EventType::CONTAINER_MOVED);\n    }\n    if (_ccEventCallback)\n    {\n        //_ccEventCallback(this, static_cast<int>(EventType::CONTAINER_MOVED));\n    }\n    this->release();\n}\n\n\n\u53c2\u8003\uff1a\nhttp://qiita.com/qittu/items/88b53597eda287f7fa70\nhttp://lethargysyndrome.blog.fc2.com/blog-entry-10.html\n# ScrollView\u306e\u4e2d\u306bMenu\u3092\u5165\u308c\u305f\u6642\u306e\u554f\u984c\u70b9\n\n1. Menu\u304c\u30bf\u30c3\u30c1\u3092\u98f2\u307f\u8fbc\u3093\u3067\u3001\u30b9\u30af\u30ed\u30fc\u30eb\u3067\u304d\u306a\u3044\u3002\n2. \u30b9\u30af\u30ed\u30fc\u30eb\u304c\u7d42\u308f\u3063\u305f\u6642\u3001\u6700\u5f8c\u306b\u89e6\u308c\u3066\u3044\u305fMenuItem\u304cactivate\u3055\u308c\u308b\u3002\n3. ScrollView\u306e\u898b\u3048\u306a\u3044\u30a8\u30ea\u30a2\u306b\u306f\u307f\u3060\u3057\u305fMenuItem\u3082\u30bf\u30c3\u30c1\u306b\u53cd\u5fdc\u3057\u3066\u3057\u307e\u3046\u3002\n\n\u3053\u308c\u3089\u3092\u89e3\u6c7a\u3059\u308b\u305f\u3081\u306b\u3001Menu\u306e\u30b5\u30d6\u30af\u30e9\u30b9\u3092\u4f5c\u308b\u3002\n\n```lang:MyMenu.h\n#ifndef __MyMenu__\n#define __MyMenu__\n\n#include \"cocos2d.h\"\n#include \"ui/CocosGUI.h\"\n\nUSING_NS_CC;\nusing namespace ui;\n\nclass MyMenu : public Menu\n{\npublic:\n    MyMenu();\n    ~MyMenu();\n    static MyMenu* create();\n    static MyMenu* create(MenuItem* item, ...) CC_REQUIRES_NULL_TERMINATION;\n    static MyMenu* createWithItems(MenuItem* item, va_list args);\n    static MyMenu* createWithArray(const Vector<MenuItem*>& arrayOfItems);\n    \n    virtual bool init();\n    virtual bool initWithArray(const Vector<MenuItem*>& arrayOfItems);\n    \n    void setScrollView(ScrollView* scrollView);\n\n    virtual bool onTouchBegan(Touch* touch, Event* event) override;\n    virtual void onTouchEnded(Touch* touch, Event* event) override;\n    virtual void onTouchCancelled(Touch* touch, Event* event) override;\n    virtual void onTouchMoved(Touch* touch, Event* event) override;\nprotected:\nprivate:\n    EventListenerTouchOneByOne* _listener;\n    ScrollView* _scrollView;\n};\n\n#endif\n```\n\nEventListener\u3092\u30e1\u30f3\u30d0\u5909\u6570\u306b\u3059\u308b\u3053\u3068\u306b\u3088\u3063\u3066\u3001\n\u5f8c\u304b\u3089swallowTouches\u3092\u5909\u66f4\u3067\u304d\u308b\u3088\u3046\u306b\u3057\u305f\u3002\n\n```lang:MyMenu.cpp\n#include \"MyMenu.h\"\n\nMyMenu::MyMenu()\n:_listener(nullptr),\n_scrollView(nullptr)\n{\n    \n}\n\nMyMenu::~MyMenu()\n{\n    CC_SAFE_RELEASE_NULL(_listener);\n}\n\n#pragma mark - create methods\n\nMyMenu* MyMenu::create()\n{\n    return MyMenu::create(nullptr, nullptr);\n}\n\nMyMenu* MyMenu::create(MenuItem* item, ...)\n{\n    va_list args;\n    va_start(args,item);\n    \n    MyMenu *ret = MyMenu::createWithItems(item, args);\n    \n    va_end(args);\n    \n    return ret;\n}\n\nMyMenu* MyMenu::createWithItems(MenuItem* item, va_list args)\n{\n    Vector<MenuItem*> items;\n    if( item )\n    {\n        items.pushBack(item);\n        MenuItem *i = va_arg(args, MenuItem*);\n        while(i)\n        {\n            items.pushBack(i);\n            i = va_arg(args, MenuItem*);\n        }\n    }\n    \n    return MyMenu::createWithArray(items);\n}\n\nMyMenu* MyMenu::createWithArray(const Vector<MenuItem*>& arrayOfItems)\n{\n    auto ret = new (std::nothrow) MyMenu();\n    if (ret && ret->initWithArray(arrayOfItems))\n    {\n        ret->autorelease();\n    }\n    else\n    {\n        CC_SAFE_DELETE(ret);\n    }\n    \n    return ret;\n}\n\n#pragma mark - initializer\n\nbool MyMenu::init()\n{\n    return initWithArray(Vector<MenuItem*>());\n}\n\nbool MyMenu::initWithArray(const Vector<MenuItem*>& arrayOfItems)\n{\n    if (Layer::init())\n    {\n        _enabled = true;\n        \n        ignoreAnchorPointForPosition(false);\n        setContentSize(Size(0,0));\n        \n        int z=0;\n        \n        for (auto& item : arrayOfItems)\n        {\n            this->addChild(item, z);\n            z++;\n        }\n        \n        _selectedItem = nullptr;\n        _state = Menu::State::WAITING;\n        \n        // enable cascade color and opacity on menus\n        setCascadeColorEnabled(true);\n        setCascadeOpacityEnabled(true);\n        \n        \n        _listener = EventListenerTouchOneByOne::create();\n        CC_SAFE_RETAIN(_listener);\n        _listener->setSwallowTouches(true);\n        \n        _listener->onTouchBegan = CC_CALLBACK_2(Menu::onTouchBegan, this);\n        _listener->onTouchMoved = CC_CALLBACK_2(Menu::onTouchMoved, this);\n        _listener->onTouchEnded = CC_CALLBACK_2(Menu::onTouchEnded, this);\n        _listener->onTouchCancelled = CC_CALLBACK_2(Menu::onTouchCancelled, this);\n        \n        _eventDispatcher->addEventListenerWithSceneGraphPriority(_listener, this);\n        \n        return true;\n    } else {\n        return false;\n    }\n}\n```\n\nScrollView\u3092\u30bb\u30c3\u30c8\u3059\u308b\u6642\u3001swallowTouches\u3092false\u306b\u3057\u3066\u3001\nScrollView\u306b\u30bf\u30c3\u30c1\u30a4\u30d9\u30f3\u30c8\u3092\u6e21\u305b\u308b\u3088\u3046\u306b\u3059\u308b\u3002\n\u307e\u305f\u3001ScrollView\u304c\u30b9\u30af\u30ed\u30fc\u30eb\u3057\u305f\u6642\u3001Menu\u306e\u30bf\u30c3\u30c1\u30a4\u30d9\u30f3\u30c8\u3092\u30ad\u30e3\u30f3\u30bb\u30eb\u3059\u308b\u3088\u3046\u306b\u3059\u308b\u3002\n\n```lang:MyMenu.cpp\nvoid MyMenu::setScrollView(ScrollView* scrollView)\n{\n    _scrollView = scrollView;\n    _listener->setSwallowTouches(false);\n    _scrollView->addEventListener([this](Ref* ref, ScrollView::EventType eventType) {\n        if (eventType == ScrollView::EventType::CONTAINER_MOVED) {\n            this->onTouchCancelled(nullptr, nullptr);\n        }\n    });\n}\n```\n\nonTouchBegan\u3067\u306f\u3001\u30bf\u30c3\u30c1\u304cScrollView\u306e\u4e2d\u306b\u3042\u308b\u304b\u8abf\u3079\u3066\u3001\n\u305d\u3046\u3067\u306a\u3051\u308c\u3070false\u3092\u8fd4\u3057\u305f\u3002\n\n```lang:MyMenu.cpp\n#pragma mark - touch\n\nbool MyMenu::onTouchBegan(Touch* touch, Event* event)\n{\n    if (_scrollView) {\n        Point touchPoint = touch->getLocation();\n        Rect rect = Rect(_scrollView->convertToWorldSpace(_scrollView->getPosition()),\n                         _scrollView->getContentSize());\n        if (rect.containsPoint(touchPoint)) {\n            return Menu::onTouchBegan(touch, event);\n        } else {\n            return false;\n        }\n    } else {\n        return Menu::onTouchBegan(touch, event);\n    }\n}\n```\n\nScrollView\u304c\u30b9\u30af\u30ed\u30fc\u30eb\u3057\u305f\u6642\u3001Menu\u306e\u30bf\u30c3\u30c1\u30a4\u30d9\u30f3\u30c8\u304c\u30ad\u30e3\u30f3\u30bb\u30eb\u3055\u308c\u308b\u304c\u3001\n\u305d\u306e\u5f8c\u3001onTouchMoved\u3084onTouchEnded\u304c\u547c\u3070\u308c\u308b\u3068\u3001Menu\u306e\u30a2\u30b5\u30fc\u30b7\u30e7\u30f3\u306b\u3088\u3063\u3066\n\u30a2\u30d7\u30ea\u304c\u7d42\u4e86\u3057\u3066\u3057\u307e\u3046\u306e\u3067\u3001\u3053\u308c\u3089\u306e\u30e1\u30bd\u30c3\u30c9\u3092\u4e0a\u66f8\u304d\u3059\u308b\u3002\n\n```lang:MyMenu.cpp\nvoid MyMenu::onTouchEnded(Touch* touch, Event* event)\n{\n    if (_state == Menu::State::TRACKING_TOUCH) {\n        Menu::onTouchEnded(touch, event);\n    }\n}\n\nvoid MyMenu::onTouchCancelled(Touch* touch, Event* event)\n{\n    if (_state == Menu::State::TRACKING_TOUCH) {\n        Menu::onTouchCancelled(touch, event);\n    }\n}\n\nvoid MyMenu::onTouchMoved(Touch* touch, Event* event)\n{\n    if (_state == Menu::State::TRACKING_TOUCH) {\n        Menu::onTouchMoved(touch, event);\n    }\n}\n\n```\n#\u4f7f\u3044\u65b9\nMyMenu\u3092ScrollView\u306b\u5165\u308c\u3066\u3001\nmenu->setScrollView(scrollView);\n\u3068\u3059\u308b\u3002\n\n```lang:HelloWorldScene.cpp\nMyMenu* menu = MyMenu::create();\n\nfor (int i = 0; i < 30; i++) {\n    Label* label = Label::createWithSystemFont(StringUtils::format(\"TestString%d\", i),\n                                               \"Helvetica\",\n                                               20);\n    MenuItemLabel* item = MenuItemLabel::create(label, [i](Ref* sender) {\n        CCLOG(\"item pressed : %d\", i);\n    });\n    menu->addChild(item);\n}\nmenu->alignItemsVertically();\nmenu->setContentSize(size);\n\nScrollView* scrollView = ScrollView::create();\nscrollView->addChild(menu);\nscrollView->setInnerContainerSize(menu->getContentSize());\nscrollView->setContentSize(Size(100,100));\nscrollView->setDirection(ScrollView::Direction::VERTICAL);\n\nmenu->setScrollView(scrollView);\n```\n\u3053\u306e\u65b9\u6cd5\u3060\u3068\u3001ScrollView\u306e\u30b5\u30d6\u30af\u30e9\u30b9\u306f\u4f5c\u3089\u305a\u306b\u3001\u89e3\u6c7a\u3059\u308b\u3002\n\n\u8ffd\u8a18\uff1a\nMenu\u304b\u3089ScrollView\u306b\u6e21\u3059\u30b3\u30fc\u30eb\u30d0\u30c3\u30af\u3092\u5909\u66f4\n\n```lang:MyMenu.cpp\n_scrollView->addEventListener([this](Ref* ref, ScrollView::EventType eventType) {\n        //if (eventType == ScrollView::EventType::SCROLLING) {\n        if (eventType == ScrollView::EventType::CONTAINER_MOVED) {\n            this->onTouchCancelled(nullptr, nullptr);\n        }\n    });\n```\n\n\u307e\u305f\u3001\u3053\u306e\u65b9\u6cd5\u3060\u3068\u3001Xperia\u306a\u3069\u306e\u4e00\u90e8\u306eAndroid\u7aef\u672b\u3067\u3001\n\u30bf\u30c3\u30c1\u306e\u5fae\u5c0f\u306a\u52d5\u304d\u304c\u30b9\u30af\u30ed\u30fc\u30eb\u3068\u611f\u77e5\u3055\u308c\u3066\u3057\u307e\u3044\u3001\n\u30dc\u30bf\u30f3\u306e\u30bf\u30c3\u30c1\u304c\u5168\u3066\u30ad\u30e3\u30f3\u30bb\u30eb\u3055\u308c\u3066\u3057\u307e\u3044\u30dc\u30bf\u30f3\u304c\u62bc\u305b\u306a\u3044\u3068\u3044\u3046\u554f\u984c\u304c\u8d77\u3053\u3063\u305f\u3002\n\nScrollView\u306e\u30b3\u30fc\u30c9\u3092\u5909\u66f4\u3057\u3066\u3001_innerContainer\u304c20\u4ee5\u4e0a\u52d5\u3044\u305f\u6642\u306b\u30b3\u30fc\u30eb\u30d0\u30c3\u30af\u3092\n\u547c\u3076\u3088\u3046\u306b\u3057\u305f\u3002\n\n```lang:UIScrollView.h\nclass CC_GUI_DLL ScrollView : public Layout\n{\n    //\u4e2d\u7565\n    //\u30bf\u30c3\u30c1\u958b\u59cb\u3057\u305f\u6642\u306e_innerContainer\u306e\u4f4d\u7f6e\u3092\u899a\u3048\u3066\u304a\u304f\u5909\u6570\n    Vec2 _scrollStartPosition;\n}\n```\n```lang:UIScrollView.cpp\nbool ScrollView::onTouchBegan(Touch *touch, Event *unusedEvent)\n{\n    //edit\n    _scrollStartPosition = _innerContainer->getPosition();\n    \n    bool pass = Layout::onTouchBegan(touch, unusedEvent);\n    if (!_isInterceptTouch)\n    {\n        if (_hitted)\n        {\n            handlePressLogic(touch);\n        }\n    }\n    return pass;\n}\nvoid ScrollView::setInnerContainerPosition(const Vec2 &position)\n{\n    if(position == _innerContainer->getPosition())\n    {\n        return;\n    }\n    _innerContainer->setPosition(position);\n    _outOfBoundaryAmountDirty = true;\n    \n    // Process bouncing events\n    if(_bounceEnabled)\n    {\n        for(int direction = (int) MoveDirection::TOP; direction < (int) MoveDirection::RIGHT; ++direction)\n        {\n            if(isOutOfBoundary((MoveDirection) direction))\n            {\n                processScrollEvent((MoveDirection) direction, true);\n            }\n        }\n    }\n    \n    this->retain();\n    //if (_eventCallback)\n    //edit\n    if (_eventCallback && _scrollStartPosition.distanceSquared(_innerContainer->getPosition()) > 400)\n    {\n        _eventCallback(this, EventType::CONTAINER_MOVED);\n    }\n    if (_ccEventCallback)\n    {\n        //_ccEventCallback(this, static_cast<int>(EventType::CONTAINER_MOVED));\n    }\n    this->release();\n}\n```\n\n\u53c2\u8003\uff1a\nhttp://qiita.com/qittu/items/88b53597eda287f7fa70\nhttp://lethargysyndrome.blog.fc2.com/blog-entry-10.html\n", "tags": ["cocos2d-x"]}