{"context": " More than 1 year has passed since last update.\n\n\u76ee\u7684\nScala 2.10\u304b\u3089\u3001\u30e1\u30bf\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u306e\u4e00\u7a2e\u3067\u3042\u308b\u30ea\u30d5\u30ec\u30af\u30b7\u30e7\u30f3\u6a5f\u80fd\u304c\u5165\u3063\u3066\u3044\u307e\u3059\u3002\nReflection - \u6982\u8981 - Scala Documentation\nimport scala.reflect.runtime.universe._\n\n\u5b87\u5b99\u3092\u30a4\u30f3\u30dd\u30fc\u30c8\u3068\u304b\u71b1\u3044\u3067\u3059\u306d\u2026\u2026\uff01\n\u904a\u3093\u3067\u307f\u305f\u304b\u3063\u305f\u306e\u3067\u3001\u578b\u3092\u4e0e\u3048\u308b\u3068\u7c21\u6613ScalaDoc\u3092\u51fa\u529b\u3059\u308b\u3088\u3046\u306a\u3082\u306e\u3001\u3064\u307e\u308a\u3001\nprintMethods[List[Int]]\n\n\u3068\u3059\u308b\u3068\u3001Scala Standard Library 2.11.2 - List \u306e\u30e1\u30bd\u30c3\u30c9\u629c\u7c8b\u306e\u3088\u3046\u306a\u611f\u3058\u3067\u3001\n...\naddString(b: StringBuilder): StringBuilder\naddString(b: StringBuilder, sep: String): StringBuilder\naddString(b: StringBuilder, start: String, sep: String, end: String): StringBuilder\naggregate[B](z: => B)(seqop: (B, A) => B, combop: (B, B) => B): B\nandThen[C](k: B => C): PartialFunction[A,C]\napply(n: Int): A\napplyOrElse[A1][B1](x: A1, default: A1 => B1): B1\nasInstanceOf[T0]: T0\n...\n\n\u3092\u51fa\u529b\u3059\u308b\u3082\u306e\u3092\u3001Scala2.11\u3067\u66f8\u3044\u3066\u307f\u307e\u3057\u305f\u3002\n\u305f\u3060\u3057\u3001\u578b\u30d1\u30e9\u30e1\u30fc\u30bf\u306elower/upper bound\u306e\u53d6\u5f97\u65b9\u6cd5\u304c\u5206\u304b\u3089\u305a\u3058\u307e\u3044\u2026\u2026\u3002\n\n\u30b3\u30fc\u30c9\n\u30ea\u30d5\u30ec\u30af\u30b7\u30e7\u30f3\u306f\u307e\u3060EXPERIMENTAL\u306a\u6a5f\u80fd\u306a\u306e\u3067\u3001Scala 2.12\u4ee5\u4e0a\u3067\u306f\u52d5\u304b\u306a\u304f\u306a\u308b\u304b\u3082\u3002\n2.10\u3067\u66f8\u3044\u305f\u30b3\u30fc\u30c9\u30922.11\u306b\u4e0a\u3052\u305f\u3089\u3001deprecated\u306b\u306a\u3063\u3066\u3044\u308b\u3082\u306e\u304c\u5e7e\u3064\u304b\u3042\u308a\u307e\u3057\u305f\u3002\n\nHelloUniverse.scala\nobject HelloUniverse extends App {\n\n  implicit class RichList[T](self: List[T]) {\n    def mkStringIfNonEmpty[T](start: String,\n                              seq: String,\n                              end: String): String =\n      if (self.nonEmpty) self.mkString(start, seq, end)\n      else \"\"\n  }\n\n  import scala.reflect.runtime.universe._\n\n  def paramToString(param: Symbol): String =\n    (if (param.isImplicit) \"implicit \" else \"\") +\n      param.name +\n      \": \" +\n      param.typeSignature\n\n  def methodToString(method: MethodSymbol): String =\n    method.name.decodedName +\n      method.typeParams.map(\n        _.name\n      ).mkStringIfNonEmpty(\"[\", \"][\", \"]\") +\n      method.paramLists.map(\n        _.map(paramToString).mkString(\", \")\n      ).mkStringIfNonEmpty(\"(\", \")(\", \")\") +\n      \": \" +\n      method.returnType\n\n  def printMethods[T: TypeTag] =\n    typeOf[T].\n      members.\n      filter(_.isMethod).\n      map(_.asMethod).\n      map(methodToString).\n      toArray.\n      sorted.\n      foreach(println)\n\n  printMethods[List[Int]]\n}\n\n\n\nbuild.properties\nsbt.version=0.13.6\n\n\n\nbuild.sbt\nname := \"hello_universe\"\n\nversion := \"1.0\"\n\nscalaVersion := \"2.11.2\"\n\nlibraryDependencies += \"org.scala-lang\" % \"scala-reflect\" % scalaVersion.value\n\n\n\n# \u76ee\u7684\n\nScala 2.10\u304b\u3089\u3001\u30e1\u30bf\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u306e\u4e00\u7a2e\u3067\u3042\u308b\u30ea\u30d5\u30ec\u30af\u30b7\u30e7\u30f3\u6a5f\u80fd\u304c\u5165\u3063\u3066\u3044\u307e\u3059\u3002\n[Reflection - \u6982\u8981 - Scala Documentation](http://docs.scala-lang.org/ja/overviews/reflection/overview.html)\n\n```scala\nimport scala.reflect.runtime.universe._\n```\n\n\u5b87\u5b99\u3092\u30a4\u30f3\u30dd\u30fc\u30c8\u3068\u304b\u71b1\u3044\u3067\u3059\u306d\u2026\u2026\uff01\n\n\u904a\u3093\u3067\u307f\u305f\u304b\u3063\u305f\u306e\u3067\u3001\u578b\u3092\u4e0e\u3048\u308b\u3068\u7c21\u6613ScalaDoc\u3092\u51fa\u529b\u3059\u308b\u3088\u3046\u306a\u3082\u306e\u3001\u3064\u307e\u308a\u3001\n\n```scala\nprintMethods[List[Int]]\n```\n\n\u3068\u3059\u308b\u3068\u3001[Scala Standard Library 2.11.2 - List](http://www.scala-lang.org/api/2.11.2/#scala.collection.immutable.List) \u306e\u30e1\u30bd\u30c3\u30c9\u629c\u7c8b\u306e\u3088\u3046\u306a\u611f\u3058\u3067\u3001\n\n```scala\n...\naddString(b: StringBuilder): StringBuilder\naddString(b: StringBuilder, sep: String): StringBuilder\naddString(b: StringBuilder, start: String, sep: String, end: String): StringBuilder\naggregate[B](z: => B)(seqop: (B, A) => B, combop: (B, B) => B): B\nandThen[C](k: B => C): PartialFunction[A,C]\napply(n: Int): A\napplyOrElse[A1][B1](x: A1, default: A1 => B1): B1\nasInstanceOf[T0]: T0\n...\n```\n\n\u3092\u51fa\u529b\u3059\u308b\u3082\u306e\u3092\u3001Scala2.11\u3067\u66f8\u3044\u3066\u307f\u307e\u3057\u305f\u3002\n\u305f\u3060\u3057\u3001\u578b\u30d1\u30e9\u30e1\u30fc\u30bf\u306elower/upper bound\u306e\u53d6\u5f97\u65b9\u6cd5\u304c\u5206\u304b\u3089\u305a\u3058\u307e\u3044\u2026\u2026\u3002\n\n# \u30b3\u30fc\u30c9\n\n\u30ea\u30d5\u30ec\u30af\u30b7\u30e7\u30f3\u306f\u307e\u3060EXPERIMENTAL\u306a\u6a5f\u80fd\u306a\u306e\u3067\u3001Scala 2.12\u4ee5\u4e0a\u3067\u306f\u52d5\u304b\u306a\u304f\u306a\u308b\u304b\u3082\u3002\n2.10\u3067\u66f8\u3044\u305f\u30b3\u30fc\u30c9\u30922.11\u306b\u4e0a\u3052\u305f\u3089\u3001deprecated\u306b\u306a\u3063\u3066\u3044\u308b\u3082\u306e\u304c\u5e7e\u3064\u304b\u3042\u308a\u307e\u3057\u305f\u3002\n\n```scala:HelloUniverse.scala\nobject HelloUniverse extends App {\n\n  implicit class RichList[T](self: List[T]) {\n    def mkStringIfNonEmpty[T](start: String,\n                              seq: String,\n                              end: String): String =\n      if (self.nonEmpty) self.mkString(start, seq, end)\n      else \"\"\n  }\n\n  import scala.reflect.runtime.universe._\n\n  def paramToString(param: Symbol): String =\n    (if (param.isImplicit) \"implicit \" else \"\") +\n      param.name +\n      \": \" +\n      param.typeSignature\n\n  def methodToString(method: MethodSymbol): String =\n    method.name.decodedName +\n      method.typeParams.map(\n        _.name\n      ).mkStringIfNonEmpty(\"[\", \"][\", \"]\") +\n      method.paramLists.map(\n        _.map(paramToString).mkString(\", \")\n      ).mkStringIfNonEmpty(\"(\", \")(\", \")\") +\n      \": \" +\n      method.returnType\n\n  def printMethods[T: TypeTag] =\n    typeOf[T].\n      members.\n      filter(_.isMethod).\n      map(_.asMethod).\n      map(methodToString).\n      toArray.\n      sorted.\n      foreach(println)\n\n  printMethods[List[Int]]\n}\n```\n\n```scala:build.properties\nsbt.version=0.13.6\n```\n\n```scala:build.sbt\nname := \"hello_universe\"\n\nversion := \"1.0\"\n\nscalaVersion := \"2.11.2\"\n\nlibraryDependencies += \"org.scala-lang\" % \"scala-reflect\" % scalaVersion.value\n```\n", "tags": ["Scala2.11", "\u30e1\u30bf\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0", "metaprogramming", "reflection"]}