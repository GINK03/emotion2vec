{"context": "\n\n\u306f\u3058\u3081\u306b\n\u5358\u7d14\u306a\u30c7\u30fc\u30bf\u3092\u4e3b\u6210\u5206\u5206\u6790(PCA)\u3059\u308b\u3053\u3068\u3067PCA\u306e\u610f\u5473\u3092\u7406\u89e3\u3057\u305f\u3044\uff0e\nOpenCV\u306e\u306a\u304b\u306b\u300cPCA\u300d\u3068\u540d\u524d\u306e\u3064\u3044\u305f\u95a2\u6570\u304c\u3042\u308b\uff0e\n\u3060\u304b\u3089\u3053\u306e\u95a2\u6570\u3092\u3064\u304b\u3063\u3066\u30b9\u30af\u30ea\u30d7\u30c8(python)\u3092\u52d5\u304b\u3057\u3064\u3064\u63a8\u6e2c\u3057\u3066\u4e3b\u6210\u5206\u306e\u6b63\u4f53\u3092\u898b\u6975\u3081\u3088\u3046\uff0e\n\n\u3059\u3054\u304f\u5358\u7d14\u306a\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\n\u307e\u305a\u306f\u3058\u3081\u306f\u3059\u3054\u304f\u7c21\u5358\u306a2\u6b21\u5143\u30c7\u30fc\u30bf\u306e\u7d44\u3092\u4f7f\u3046\uff0e\nimport numpy as np\n\ndata = np.array([\n    [1.0, 0.0], [0.0, 1.0]\n])\n\ncv2\u306ePCACompute\u95a2\u6570\u3092\u4f7f\u3046\u3068\u4e3b\u6210\u5206\u306a\u308b\u3082\u306e\u304c\u308f\u304b\u308b\u3088\u3046\u3060\uff0e\n\u3053\u306e\u3068\u304d\u4e8c\u756a\u76ee\u306e\u5f15\u6570\u306eshape\u306b\u6ce8\u610f\uff0e\nimport cv2\n\nmean, eigenvectors = cv2.PCACompute(\n    data=data,\n    mean=np.mean(data, axis=0).reshape(1, -1)\n)\n\n\u5f97\u3089\u308c\u308b\u7d50\u679c\u306f\u3064\u304e\u306e\u3068\u304a\u308a\uff0e\n# mean \n[[ 0.5  0.5]]\n\n# eigenvectors\n[[-0.70710678  0.70710678]\n [ 0.70710678  0.70710678]]\n\nmean\u306f\u5e73\u5747\u5024\u306b\u306a\u3063\u3066\u3044\u308b\uff0e\n\u4e00\u65b9\u3067eigenvectors\u306f\u2026\u3053\u308c\u304c\u4e3b\u6210\u5206\u3089\u3057\u3044\uff0e\n>>> print np.sqrt(2) / 2\n0.70710678\n\n\u306a\u306e\u3067eigenvectors\u306f\u2026\nt(cos(\u03c0/4)sin(\u03c0/4))t(cos(3\u03c0/4)sin(3\u03c0/4)t(cos\u2061(\u03c0/4)sin\u2061(\u03c0/4))t(cos\u2061(3\u03c0/4)sin\u2061(3\u03c0/4){{}^t (\\cos (\\pi / 4)\\, \\sin(\\pi / 4)) \\\\\n{}^t (\\cos (3\\pi / 4)\\, \\sin(3\\pi / 4)\n}\n\u3063\u3066\u308f\u3051\u304b\uff0e\n\u3064\u307e\u308a\uff0c\u3053\u3053\u3067\u306e\u4e3b\u6210\u5206\u3068\u306f\u30c7\u30fc\u30bf\u306e\u9593\u3092\u30d9\u30af\u30c8\u30eb\u3068\u305d\u308c\u306b\u76f4\u884c\u3059\u308b\u30d9\u30af\u30c8\u30eb\u3068\u3044\u3046\u3053\u3068\uff0e\n\n\u3059\u3053\u3057\u5909\u5316\u3092\u52a0\u3048\u308b\n\u7b2c\u4e8c\u8c61\u9650(x\u8ef8\u306e\u8ca0\u306e\u65b9\u5411)\u306b\u4e00\u3064\u30c7\u30fc\u30bf\u3092\u52a0\u3048\u3066\u307f\u308b\uff0e\ndata = np.array([[1.0, 0.0], [0.0, 1.0], [-1.0, 1.0]])\n\n\u540c\u3058\u3088\u3046\u306bPCACompute\u306b\u98df\u308f\u305b\u308b\uff0e\nmean, eigenvectors = cv2.PCACompute(\n    data=data,\n    mean=np.mean(data, axis=0).reshape(1, -1)\n)\n\nprint np.rad2deg(np.arccos(eigenvectors[:, 0]))\nprint np.rad2deg(np.arcsin(eigenvectors[:, 1]))\n\n\u305d\u306e\u307e\u307e\u3060\u3068\u4e3b\u6210\u5206\u304c\u308f\u304b\u3089\u306a\u3044\u306e\u3067\u89d2\u5ea6\uff08\u5ea6\u6570\uff09\u306b\u5909\u63db\u3057\u305f\uff0e\n\u7d50\u679c\u306f\n[ 28.15496624  61.84503376]\n[-28.15496624  61.84503376]\n\n\u3059\u3053\u3057\u53f3\uff08x\u8ef8\u306e\u8ca0\u306e\u65b9\u5411\uff09\u306b\u5f15\u3063\u5f35\u3089\u308c\u3066\u3044\u308b\uff0e\n\u4e3b\u6210\u5206\u306f\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u306e\u3042\u3044\u307e\u3092\u3046\u307e\u304f\u3068\u304a\u308b\u306e\u304b\uff0e\n\n\u307e\u3068\u3081\n\u4ee5\u4e0a\u306e\u3053\u3068\u304b\u3089\u4e3b\u6210\u5206\u3068\u306f\n\n\u30c7\u30fc\u30bf\u306e\u9593\u3092\u3068\u304a\u308b\u30d9\u30af\u30c8\u30eb\n\u305d\u308c\u3068\u76f4\u884c\u3059\u308b\u30d9\u30af\u30c8\u30eb\n\u30d9\u30af\u30c8\u30eb\u306f\u898f\u683c\u5316\u3055\u308c\u3066\u3044\u308b\n\n\u3068\u63a8\u6e2c\u3055\u308c\u308b\uff0e\n\n# \u306f\u3058\u3081\u306b\n\n\u5358\u7d14\u306a\u30c7\u30fc\u30bf\u3092\u4e3b\u6210\u5206\u5206\u6790(PCA)\u3059\u308b\u3053\u3068\u3067PCA\u306e\u610f\u5473\u3092\u7406\u89e3\u3057\u305f\u3044\uff0e\nOpenCV\u306e\u306a\u304b\u306b\u300cPCA\u300d\u3068\u540d\u524d\u306e\u3064\u3044\u305f\u95a2\u6570\u304c\u3042\u308b\uff0e\n\u3060\u304b\u3089\u3053\u306e\u95a2\u6570\u3092\u3064\u304b\u3063\u3066\u30b9\u30af\u30ea\u30d7\u30c8(python)\u3092\u52d5\u304b\u3057\u3064\u3064\u63a8\u6e2c\u3057\u3066\u4e3b\u6210\u5206\u306e\u6b63\u4f53\u3092\u898b\u6975\u3081\u3088\u3046\uff0e\n\n# \u3059\u3054\u304f\u5358\u7d14\u306a\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\n\n\u307e\u305a\u306f\u3058\u3081\u306f\u3059\u3054\u304f\u7c21\u5358\u306a2\u6b21\u5143\u30c7\u30fc\u30bf\u306e\u7d44\u3092\u4f7f\u3046\uff0e\n\n```python\nimport numpy as np\n\ndata = np.array([\n\t[1.0, 0.0], [0.0, 1.0]\n])\n```\n\ncv2\u306ePCACompute\u95a2\u6570\u3092\u4f7f\u3046\u3068\u4e3b\u6210\u5206\u306a\u308b\u3082\u306e\u304c\u308f\u304b\u308b\u3088\u3046\u3060\uff0e\n\u3053\u306e\u3068\u304d\u4e8c\u756a\u76ee\u306e\u5f15\u6570\u306eshape\u306b\u6ce8\u610f\uff0e\n\n```python\nimport cv2\n\nmean, eigenvectors = cv2.PCACompute(\n    data=data,\n    mean=np.mean(data, axis=0).reshape(1, -1)\n)\n```\n\n\u5f97\u3089\u308c\u308b\u7d50\u679c\u306f\u3064\u304e\u306e\u3068\u304a\u308a\uff0e\n\n```\n# mean \n[[ 0.5  0.5]]\n\n# eigenvectors\n[[-0.70710678  0.70710678]\n [ 0.70710678  0.70710678]]\n```\n\nmean\u306f\u5e73\u5747\u5024\u306b\u306a\u3063\u3066\u3044\u308b\uff0e\n\u4e00\u65b9\u3067eigenvectors\u306f\u2026\u3053\u308c\u304c\u4e3b\u6210\u5206\u3089\u3057\u3044\uff0e\n\n```python\n>>> print np.sqrt(2) / 2\n0.70710678\n```\n\n\u306a\u306e\u3067eigenvectors\u306f\u2026\n\n```math\n{}^t (\\cos (\\pi / 4)\\, \\sin(\\pi / 4)) \\\\\n{}^t (\\cos (3\\pi / 4)\\, \\sin(3\\pi / 4)\n```\n\n\u3063\u3066\u308f\u3051\u304b\uff0e\n\n\u3064\u307e\u308a\uff0c\u3053\u3053\u3067\u306e\u4e3b\u6210\u5206\u3068\u306f\u30c7\u30fc\u30bf\u306e\u9593\u3092\u30d9\u30af\u30c8\u30eb\u3068\u305d\u308c\u306b\u76f4\u884c\u3059\u308b\u30d9\u30af\u30c8\u30eb\u3068\u3044\u3046\u3053\u3068\uff0e\n\n# \u3059\u3053\u3057\u5909\u5316\u3092\u52a0\u3048\u308b\n\n\u7b2c\u4e8c\u8c61\u9650(x\u8ef8\u306e\u8ca0\u306e\u65b9\u5411)\u306b\u4e00\u3064\u30c7\u30fc\u30bf\u3092\u52a0\u3048\u3066\u307f\u308b\uff0e\n\n```python\ndata = np.array([[1.0, 0.0], [0.0, 1.0], [-1.0, 1.0]])\n```\n\n\u540c\u3058\u3088\u3046\u306bPCACompute\u306b\u98df\u308f\u305b\u308b\uff0e\n\n```python\nmean, eigenvectors = cv2.PCACompute(\n    data=data,\n    mean=np.mean(data, axis=0).reshape(1, -1)\n)\n\nprint np.rad2deg(np.arccos(eigenvectors[:, 0]))\nprint np.rad2deg(np.arcsin(eigenvectors[:, 1]))\n```\n\n\u305d\u306e\u307e\u307e\u3060\u3068\u4e3b\u6210\u5206\u304c\u308f\u304b\u3089\u306a\u3044\u306e\u3067\u89d2\u5ea6\uff08\u5ea6\u6570\uff09\u306b\u5909\u63db\u3057\u305f\uff0e\n\u7d50\u679c\u306f\n\n```\n[ 28.15496624  61.84503376]\n[-28.15496624  61.84503376]\n```\n\n\u3059\u3053\u3057\u53f3\uff08x\u8ef8\u306e\u8ca0\u306e\u65b9\u5411\uff09\u306b\u5f15\u3063\u5f35\u3089\u308c\u3066\u3044\u308b\uff0e\n\u4e3b\u6210\u5206\u306f\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u306e\u3042\u3044\u307e\u3092\u3046\u307e\u304f\u3068\u304a\u308b\u306e\u304b\uff0e\n\n# \u307e\u3068\u3081\n\n\u4ee5\u4e0a\u306e\u3053\u3068\u304b\u3089\u4e3b\u6210\u5206\u3068\u306f\n\n* \u30c7\u30fc\u30bf\u306e\u9593\u3092\u3068\u304a\u308b\u30d9\u30af\u30c8\u30eb\n* \u305d\u308c\u3068\u76f4\u884c\u3059\u308b\u30d9\u30af\u30c8\u30eb\n* \u30d9\u30af\u30c8\u30eb\u306f\u898f\u683c\u5316\u3055\u308c\u3066\u3044\u308b\n\n\u3068\u63a8\u6e2c\u3055\u308c\u308b\uff0e\n", "tags": ["\u30c7\u30fc\u30bf\u5206\u6790", "Python", "OpenCV"]}