{"context": " More than 1 year has passed since last update.H2O\u304c\u51fa\u3057\u3066\u3044\u308bApache Spark\u306e\u62e1\u5f35\u3001Sparkling Water\u3002\n\u6b8b\u5ff5\u306a\u304c\u3089\u3001Spark\u7d44\u307f\u8fbc\u307f\u306e\u6a5f\u68b0\u5b66\u7fd2\u30e9\u30a4\u30d6\u30e9\u30eaMLlib\u306b\u306f\u3001Deep Learning\u306f\u5b9f\u88c5\u3055\u308c\u3066\u3044\u306a\u3044\u308f\u3051\u3067\u3059\u304c\u3001\u3061\u3087\u3046\u3069\u305d\u308c\u3092\u88dc\u5b8c\u3059\u308b\u3088\u3046\u306b\u3001Sparkiling Water\u306e\u65b9\u306b\u306f\u5b9f\u88c5\u304c\u3042\u308a\u307e\u3059\u306d\u3002\nSparkling Water - 0xdata\nh2oai/sparkling-water - github\n\u3067\u3001Example\u3092\u8a66\u3057\u3066\u305f\u306e\u3067\u3059\u304c\u3001\u30a4\u30de\u30a4\u30c1\u3057\u3063\u304f\u308a\u6765\u305a\u3002\n\u3044\u308d\u3044\u308d\u773a\u3081\u3066\u3044\u305f\u3068\u3053\u308d\u300cKaggle Digit Recognizer\u300d\u306e\u30c7\u30fc\u30bf\u306b\u5bfe\u3059\u308b\u5206\u985e\u304c\u8a66\u3057\u3084\u3059\u305d\u3046\u3060\u3063\u305f\u306e\u3067\u3001\u3053\u308c\u3092Sparkling Water\u3067\u3084\u308b\u3068\u3069\u3046\u306a\u308b\u304b\u3001\u8a66\u3057\u305f\u7d50\u679c\u3092\u66f8\u3044\u3066\u307f\u305f\u3044\u3068\u601d\u3044\u307e\u3059\u3002\u4eca\u56de\u306f\u3001Windows\u306e\u30ed\u30fc\u30ab\u30eb\u74b0\u5883\u3067\u306e\u304a\u8a71\u3067\u3059\u3002\n\n\u74b0\u5883\u69cb\u7bc9\n\nOS\nWindows 8 64bit (\u7121\u5370\u7248, not pro)\n\n\u5fc5\u8981\u306a\u30e2\u30ce\n\nKaggle Digit Recognizer\u306e\u30c7\u30fc\u30bf\nhttps://www.kaggle.com/c/digit-recognizer/data\n\ntrain.csv\ntest.csv\n\n\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u306b\u306f\u3001\u30a2\u30ab\u30a6\u30f3\u30c8\u306e\u4f5c\u6210\u304c\u5fc5\u8981\u3067\u3059\n\nJDK8 & SBT\n\nJDK 8: http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html\n\nSBT: http://www.scala-sbt.org/\n\n\nJDK\u3068SBT\u306b\u3064\u3044\u3066\u306f\u3001\u30a4\u30f3\u30b9\u30c8\u30fc\u30e9\u30fc\u3067\u3055\u304f\u3063\u3068\u5165\u308a\u307e\u3059\u306d\u3002\n\nApache Spark 1.2.0\nhttps://spark.apache.org/downloads.html\n\nChose a Spark release: 1.2.0\n\nChose a package type: PreBuild for hadoop 2.4 and later\n\nChose a download type: Direct Download\n\n\n\u3068\u3059\u308b\u3068\u30014.\u3067\u300cspark-1.2.0-bin-hadoop2.4.tgz\u300d\u306e\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u30ea\u30f3\u30af\u304c\u51fa\u3066\u304d\u307e\u3059\u3002\n[Note]\n\u73fe\u6642\u70b9\u3067\u306f\u3001Spark 1.2.1\u4ee5\u964d\u306f\u30b5\u30dd\u30fc\u30c8\u3055\u308c\u3066\u3044\u307e\u305b\u3093\u3002\u306a\u3093\u304b\u52d5\u304b\u306a\u304f\u3066revert\u3057\u305fcommit\u304c\u898b\u5f53\u305f\u308a\u307e\u3059\u306d\u3002\u3002\u3002\nhttps://github.com/h2oai/sparkling-water/commit/bbb777498e7587a3513f7e4d45937f593f540400\n\nh2o Sparkling-Water\nhttps://github.com/h2oai/sparkling-water\nreadme\u306e\u4e2d\u307b\u3069\u306b\u3001\u300cDownloads of binaries -> Sparkling Water - Latest version\u300d\u3068\u3044\u3046\u30ea\u30f3\u30af\u304c\u3042\u308b\u3068\u601d\u3046\u306e\u3067\u3001\u305d\u3053\u304b\u3089\u3002\n\u3053\u308c\u66f8\u3044\u3066\u308b\u6642\u70b9\u306eversion\u306f\u30010.2.12-92\n\u8ffd\u8a18(2015/05/06):\n0.2.14-97\u3067\u3044\u308d\u3044\u308d\u5909\u308f\u3063\u3066\u307e\u3059\u3002\n\nhadoop\u306ewinutils.exe\u3068\u74b0\u5883\u5909\u6570HADOOP_PATH\nWindows\u7279\u6709\u306e\u554f\u984c\u3067\u3059\u304c\u3001\u5b9f\u884c\u6642\u3001winutils.exe\u304c\u7121\u3044\u3088\u3063\u3066\u30a8\u30e9\u30fc\u304c\u51fa\u3066\u304d\u307e\u3059\u3002\nWARN NativeCodeLoader: Unable to load native-hadoop library for your platform... using builtin-java classes where applicable\nERROR Shell: Failed to locate the winutils binary in the hadoop binary path\njava.io.IOException: Could not locate executable null\\bin\\winutils.exe in the Hadoop binaries.\n        at org.apache.hadoop.util.Shell.getQualifiedBinPath(Shell.java:318)\n        at org.apache.hadoop.util.Shell.getWinUtilsPath(Shell.java:333)\n\n\u3053\u308c\u3001\u7121\u8996\u3057\u3066\u3082\u554f\u984c\u7121\u3044\u306e\u3067\u3059\u304c\u3001\u6c17\u306b\u306a\u308b\u65b9\u306f\u3053\u3061\u3089\u3092\u53c2\u8003\u306b\u3002\n\n\u30ea\u30bd\u30fc\u30b9\u306e\u4f5c\u6210 & \u914d\u7f6e\n\n\u30d5\u30a9\u30eb\u30c0\u4f5c\u6210\n\u9069\u5f53\u306b\u30d5\u30a9\u30eb\u30c0\u3092\u6398\u3063\u3066\u3044\u304d\u307e\u3059\u3001\u3053\u3093\u306a\u611f\u3058\u3067\u3002\n> mkdir c:\\scala\\kaggle\n> mkdir c:\\scala\\kaggle\\libs\n> mkdir c:\\scala\\kaggle\\data\\digit\n\n\nbuild.sbt\nc:\\scala\\kaggle\u306bbuild.sbt\u3092\u4f5c\u308a\u307e\u3059\n\nbuild.sbt\nname := \"Kaggle\"\n\nversion := \"0.0.1\"\n\norganization := \"my\"\n\nscalaVersion := \"2.10.4\"\n\nscalacOptions ++= Seq(\"-Xlint\", \"-deprecation\", \"-unchecked\", \"-feature\", \"-Xelide-below\", \"ALL\")\n\nunmanagedBase := baseDirectory.value / \"libs\"\n\nfork :=true\n\nlibraryDependencies ++= Seq(\n  \"org.apache.spark\" %% \"spark-core\" % \"1.2.0\",\n  \"org.apache.spark\" %% \"spark-sql\" % \"1.2.0\",\n  \"org.apache.commons\" % \"commons-lang3\" % \"3.4\"\n)\n\n\n[Note]\ncommons-lang3\u306fDeepLearningParameter\u306edump\u7528\u3002ToString\u3057\u3066\u3082\u30c0\u30e1\u306a\u306e\u3067ReflectionToStringBuilder\u3067\u3002\n\nsparkling-water\u306ejar\u3092\u3001\u5916\u90e8jar\u30d5\u30a9\u30eb\u30c0\u306b\u914d\u7f6e\nsparkling-water\u306ezip\u3092\u89e3\u51cd\u3057\u3066\u3001assembly\\build\\libs\u306b\u3042\u308bsparkling-water-assembly-0.2.12-92-all.jar\u3092\u3001c:\\scala\\kaggle\\libs\u306b\u30b3\u30d4\u30fc\u3057\u3066\u304f\u3060\u3055\u3044\n[Note]\nbuild.sbt\u3067unmanagedBase := baseDirectory.value / \"libs\"\u3068\u3044\u3046\u884c\u3092\u5165\u308c\u3066\u3042\u308a\u307e\u3059\u304c\u3001\u3053\u308c\u306f\u5916\u90e8jar\u3092\u4f7f\u3046\u305f\u3081\u306e\u8a2d\u5b9a\u3067\u3001sparkling-water\u306f\u305d\u3053\u304b\u3089\u8aad\u307e\u305b\u308b\u65b9\u91dd\u3067\u3059\u3002\u672c\u5f53\u306fMaven Repo\u304b\u3089\u5f15\u3063\u5f35\u3063\u3066\u304d\u305f\u3044\u3093\u3067\u3059\u304c\u3001\u30d0\u30fc\u30b8\u30e7\u30f3\u53e4\u3044\u3057\u4f9d\u5b58\u95a2\u4fc2\u3081\u3061\u3083\u304f\u3061\u3083\u3060\u3057\u3067\u7121\u7406\u3067\u3057\u305f\u3002\u3002\u3002\n\nData \u30d5\u30a9\u30eb\u30c0\u306bKaggle Digit\u306e\u30c7\u30fc\u30bf\u3092\u914d\u7f6e\nc:\\scala\\kaggle\\data\\digit\u306b\u3001kaggle\u304b\u3089\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3057\u305f2\u30d5\u30a1\u30a4\u30eb\u3092\u7f6e\u304d\u307e\u3059\n\ntrain.csv\ntest.csv\n\n\nDigitRecognizer.scala\nc:\\scala\\kaggle\u306bDigitRecognizer.scala\u3092\u4f5c\u6210\u3002\u3084\u3063\u3066\u308b\u3053\u3068\u3092\u8981\u7d04\u3059\u308b\u3068\u3001\n\nSparkContext, H20Context\u3092\u8d77\u52d5\ntrain.csv\u3092h2o\u306eDataFrame\u3068\u3057\u3066\u8aad\u307f\u8fbc\u3080\nDataFrame\u3092\u300ctrain:valid = 8:2\u300d\u3067\u5206\u5272\ndeep learning\u306eprediction model\u3092\u4f5c\u6210\nvalid\u30c7\u30fc\u30bf\u306b\u5bfe\u3059\u308bprediction\u306esummary\u3092\u51fa\u529b\n\n\u3068\u3044\u3046\u3088\u3046\u306a\u6d41\u308c\u3067\u3059\u3002\n\nDigitRecognizer.scala\n\n\npackage my\n\nimport org.apache.spark\nimport org.apache.spark._\nimport org.apache.spark.SparkContext\nimport org.apache.spark.SparkContext._\nimport org.apache.spark.sql._\n\nimport org.apache.spark.h2o._\nimport org.apache.spark.examples.h2o._\nimport water.fvec.H2OFrame\nimport hex.deeplearning.DeepLearning\nimport hex.deeplearning.DeepLearningModel.DeepLearningParameters\nimport hex.deeplearning.DeepLearningModel.DeepLearningParameters.{Activation, Loss, InitialWeightDistribution}\nimport hex.{FrameSplitter, SplitFrame}\n\nimport org.apache.commons.lang.builder._\n\n\nobject DigitRecognizer\n{\n  val trainCsv = \"C:/scala/kaggle/data/digit/train.csv\"\n  val testCsv = \"C:/scala/kaggle/data/digit/test.csv\"\n\n  def main(args: Array[String]): Unit =\n  {\n    val dlParams = new DeepLearningParameters()\n    //dlParams._epochs = 0.01\n\n    Execute(dlParams, false)\n  }\n\n  def Execute(dlParams: DeepLearningParameters, useTestCsv: Boolean): Unit =\n  {\n    logging(\"Start\")\n    val startTime = System.currentTimeMillis\n\n    val sparkConf = new SparkConf()\n      .setAppName(\"Kaggle-Digit\")\n      .setMaster(\"local\")\n\n    logging(\"Initialize SparkContext\")\n    val sc = new SparkContext(sparkConf)\n\n    logging(\"Initialize H2OContext\")\n    val h2oContext = new H2OContext(sc)\n\n    logging(\"Start H2OContext\")\n    h2oContext.start()\n    logging(h2oContext.toString)\n\n    logging(\"Load TrainData\")\n    val trainData = new H2OFrame(new java.io.File(trainCsv))\n\n    // For Classification, we need to convert the label value to Enum\n    trainData.replace(0, trainData.vec(0).toEnum) // Column 0 is \"label\"\n\n    logging(\"Split Data for Train/Test\")\n    val sf = new FrameSplitter(trainData, Array(0.8), Array(\"train\", \"valid\").map(water.Key.make(_)), null)\n    water.H2O.submitTask(sf)\n    val splits = sf.getResult\n    val spTrain = splits(0)\n    val spValid = splits(1)\n\n    logging(\"DeepLearning - Set Train / Valid data to param\")\n    val resColName = \"label\"\n    dlParams._response_column = resColName\n    if(useTestCsv)\n    {\n      // All data for train\n      dlParams._train = h2oContext.dataFrameToKey(trainData)\n    }\n    else\n    {\n      // Use splitted data for train/valid\n      dlParams._train = h2oContext.dataFrameToKey(spTrain)\n      dlParams._valid = h2oContext.dataFrameToKey(spValid)\n    }\n\n    logging(\"DeepLearning - \\\"new\\\" object\")\n    val dl = new DeepLearning(dlParams)\n\n    logging(\"DeepLearning - Training data, and generating model\")\n    val dlModel = dl.trainModel.get\n\n    logging(\"dlModel\")\n    println(dlModel)\n\n    logging(\"dlModel.score(train)\")\n    println(dlModel.score(spTrain))\n\n    if(useTestCsv)\n    {\n      logging(\"dlModel.score(testCsv)\")\n      val testData = new DataFrame(new java.io.File(testCsv))\n      val predRes = dlModel.score(testData, resColName)\n\n      logging(\"Convert predicted values to array\")\n      val sqlContext = new SQLContext(sc)\n      val predAry =\n        (h2oContext.asSchemaRDD(new org.apache.spark.h2o.DataFrame(predRes))(sqlContext))\n        .collect().map(row => row.getString(0))\n\n      logging(\"Output predicted values to text\")\n      //predAry.foreach(println)\n      val file = new java.io.File(\"submission.txt\")\n      val pw = new java.io.PrintWriter(new java.io.FileWriter(file))\n      pw.println(\"ImageId,Label\")\n      var i = 1\n      for (line <- predAry)\n      {\n        pw.println(i.toString + \",\" + line)\n        i += 1\n      }\n      pw.close()\n    }\n    else\n    {\n      logging(\"dlModel.score(valid)\")\n      println(dlModel.score(spValid))\n    }\n\n    logging(\"Parameters for model\")\n    println(dumpDlParams(dlParams))\n\n    val execTime = System.currentTimeMillis - startTime\n    logging(\"Done, ExecTime (sec): \" + execTime / 1000)\n\n    logging(\"Stop SparkContext / H2O\")\n    sc.stop()\n    water.H2O.shutdown()\n  }\n\n  def logging(msg: String) =\n  {\n    val currntDateTime = \"%tF-%<tT\" format new java.util.Date\n    val logStr = currntDateTime + \": \" + msg\n    println(\"####################\")\n    println(logStr)\n    println(\"####################\")\n  }\n\n  def dumpDlParams(dlParams: DeepLearningParameters): String =\n  {\n    val builder = ReflectionToStringBuilder.toString(dlParams, ToStringStyle.MULTI_LINE_STYLE)\n    builder.toString\n  }\n}\n\n\n\n\n\u8ffd\u8a18(2015/05/06):\n0.2.14-97\u3067water.fvec.DataFrame\u304cH2OFrame\u3068\u540d\u524d\u5909\u66f4\u3002\u307e\u305f\u3001FrameSpliter\u306e\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u306e\u5f15\u6570\u3082\u5909\u308f\u3063\u3066\u304a\u308a\u307e\u3059\u3002\n\n\u914d\u7f6e\u56f3\n\u6700\u7d42\u7684\u306b\u3001\u3053\u3093\u306a\u30d5\u30a9\u30eb\u30c0\u69cb\u6210\u306b\u306a\u3063\u3066\u308b\u306f\u305a\u3002\nc:\\scala\\kaggle\n | build.sbt\n | DigitRecognizer.scala\n \u2514libs\n |  sparkling-water-assembly-0.2.12-92-all.jar\n \u2514data\\digit\n    train.csv\n    test.csv\n\n\n\u5b9f\u884c & \u7d50\u679c\n\nsbt run\u3067\u5b9f\u884c\nPowerShell\u3060\u3068Tee-Object\u304c\u4f7f\u3048\u308b\u306e\u3067\u3001\u305d\u3061\u3089\u3067\u51fa\u529b\u3092\u4fdd\u5b58\u3057\u3064\u3064\u3001\u753b\u9762\u306b\u51fa\u3057\u3064\u3064\u3002\n> cd c:\\scala\\kaggle\n> sbt run | Tee-Object -file out.txt\n\n\n\u7d50\u679c\nvalid\u30c7\u30fc\u30bf\u306b\u5bfe\u3057\u3066prediction\u3057\u3066\u307f\u305f\u7d50\u679c\u306esummary\u3068\u3001\u5b9f\u884c\u6642\u9593\u7b49\u3005\u304c\u51fa\u3066\u304f\u308b\u306f\u305a\u3002\n####################\ndlModel.score(valid)\n####################\nINFO: Confusion Matrix:\nINFO: Act/Pred   0   1   2   3   4   5   6   7   8   9  Error              \nINFO:        0 842   0   1   0   2   0   2   0   3   2 0.0117 =    10 / 852\nINFO:        1   0 936   3   0   2   1   0   4   4   0 0.0147 =    14 / 950\nINFO:        2   6   1 771   4   1   0   4   7   4   3 0.0375 =    30 / 801\nINFO:        3   3   1   8 845   0   9   0   7   4   5 0.0420 =    37 / 882\nINFO:        4   1   2   0   0 786   0   4   2   4  12 0.0308 =    25 / 811\nINFO:        5   6   2   1   9   5 708   3   1   5   7 0.0522 =    39 / 747\nINFO:        6  10   3   2   0   2   2 812   0   0   0 0.0229 =    19 / 831\nINFO:        7   2   0   2   1   3   1   0 873   0   2 0.0124 =    11 / 884\nINFO:        8   3   6   1   4   4   7   1   0 771   5 0.0387 =    31 / 802\nINFO:        9   6   1   2   4   8   0   0  15   2 802 0.0452 =    38 / 840\nINFO:   Totals 879 952 791 867 813 728 826 909 797 838 0.0302 = 254 / 8,400\n####################\nParameters\n####################\nhex.deeplearning.DeepLearningModel$DeepLearningParameters@469d003c[\n  _n_folds=0\n  _keep_cross_validation_splits=false\n  _checkpoint=<null>\n  _override_with_best_model=true\n  _autoencoder=false\n  _use_all_factor_levels=true\n  _activation=Rectifier\n  _hidden={200,200}\n  _epochs=10.0\n  _train_samples_per_iteration=-2\n  _target_ratio_comm_to_comp=0.02\n  _seed=-4159351283397432880\n  _adaptive_rate=true\n  _rho=0.99\n  _epsilon=1.0E-8\n  _rate=0.005\n  _rate_annealing=1.0E-6\n  _rate_decay=1.0\n  _momentum_start=0.0\n  _momentum_ramp=1000000.0\n  _momentum_stable=0.0\n  _nesterov_accelerated_gradient=true\n  _input_dropout_ratio=0.0\n  _hidden_dropout_ratios=<null>\n  _l1=0.0\n  _l2=0.0\n  _max_w2=Infinity\n  _initial_weight_distribution=UniformAdaptive\n  _initial_weight_scale=1.0\n  _loss=CrossEntropy\n  _score_interval=5.0\n  _score_training_samples=10000\n  _score_validation_samples=0\n  _score_duty_cycle=0.1\n  _classification_stop=0.0\n  _regression_stop=1.0E-6\n  _quiet_mode=false\n  _score_validation_sampling=Uniform\n  _diagnostics=true\n  _variable_importances=false\n  _fast_mode=true\n  _ignore_const_cols=true\n  _force_load_balance=true\n  _replicate_training_data=false\n  _single_node_mode=false\n  _shuffle_training_data=false\n  _missing_values_handling=MeanImputation\n  _sparse=false\n  _col_major=false\n  _average_activation=0.0\n  _sparsity_beta=0.0\n  _max_categorical_features=2147483647\n  _reproducible=false\n  _response_column=label\n  _balance_classes=false\n  _max_after_balance_size=5.0\n  _class_sampling_factors=<null>\n  _max_hit_ratio_k=10\n  _destination_key=<null>\n  _train=train_part0.hex\n  _valid=train_part1.hex\n  _ignored_columns=<null>\n  _dropNA20Cols=false\n  _dropConsCols=true\n  _score_each_iteration=false\n  _max_confusion_matrix_size=20\n  _ice_id=58\n]####################\nDone, ExecTime (sec): 1601\n####################\n\n\u30d1\u30e9\u30e1\u30fc\u30bf\u30fc\u5168\u90e8\u30c7\u30d5\u30a9\u30eb\u30c8\u3067\u3001train\u30c7\u30fc\u30bf\u30928:2\u3067train/valid\u306b\u5272\u3063\u305f\u5834\u5408\u3001\u300c0.0302 = 254 / 8,400\u300d\u3001\u6b63\u89e3\u738796.9%\u7a0b\u5ea6\u3002\n\u306a\u304a\u3001\u3053\u308c\u3092\u5b9f\u884c\u3057\u305f\u79c1\u306e\u30ce\u30fc\u30c8PC\u3001CPU\u304c\u300cAMD E1-1200 APU\u300d\u3068\u3044\u3046\u30cd\u30c3\u30c8\u30d6\u30c3\u30af\u4ed5\u69d8\u306e\u4ee3\u7269\u306a\u306e\u3067\u3001\u5b9f\u884c\u6642\u9593\u306f\u901a\u5e38\u3082\u3063\u3068\u65e9\u3044\u306f\u305a\u3002\n\nKaggle \u306b\u63d0\u51fa\u3059\u308bsubmission\u3092\u51fa\u529b\u3059\u308b\nDigitRecognizer.scala\u306emain\u30e1\u30bd\u30c3\u30c9\u306b\u3001Execute(dlParams, false)\u3068\u3044\u3046\u884c\u304c\u3042\u308a\u307e\u3059\u3002\u3053\u308c\u3092Execute(dlParams, true)\u306b\u5909\u66f4\u3057\u3066\u5b9f\u884c\u3059\u308b\u3068\u3001\u4ee5\u4e0b\u306e\u6d41\u308c\u3067submission.txt\u3092\u51fa\u529b\u3059\u308b\u3088\u3046\u306b\u3057\u3066\u3042\u308a\u307e\u3059\u3002\n\ntrain.csv\u3092\u5206\u5272\u305b\u305a\u3001\u5168\u3066train\u30c7\u30fc\u30bf\u3068\u3057\u3066\u6271\u3046\n\u305d\u308c\u3067\u51fa\u6765\u305f\u30e2\u30c7\u30eb\u306b\u5bfe\u3057\u3066\u3001test.csv\u3078\u306eprediction\u306e\u7d50\u679c\u3092\u5410\u304f\n\n\u5b9f\u969b\u306b\u51fa\u6765\u305f\u3082\u306e\u3092submit\u3057\u3066\u307f\u308b\u3068\u3001\u300c0.96914\u300d\u3067207\u4f4d\u3002\u6d41\u77f3\u306b\u30c7\u30d5\u30a9\u30eb\u30c8\u3060\u3068\u3001\u3082\u3046\u3059\u3053\u3057\u304c\u3093\u3070\u308a\u307e\u3057\u3087\u3046\u3063\u3066\u611f\u3058\u306b\u306a\u308a\u307e\u3059\u306a\u3002\n\nNext Step\n\u6b63\u76f4\u306a\u3068\u3053\u308d\u3001Windows\u306e\u30ed\u30fc\u30ab\u30eb\u74b0\u5883\u3067\u3084\u308b\u5206\u306b\u306f\u3001R\u304b\u3089H2O\u3092\u53e9\u3051\u3070\u3044\u3044\u3093\u3067\u3059\u304c\u3001EMR\u4e0a\u3067\u306e\u52d5\u4f5c\u3092\u898b\u636e\u3048\u3064\u3064\u3001\u3068\u3044\u3046\u3053\u3068\u3067\u3002\nH2O\u304c\u51fa\u3057\u3066\u3044\u308bApache Spark\u306e\u62e1\u5f35\u3001Sparkling Water\u3002\n\n\u6b8b\u5ff5\u306a\u304c\u3089\u3001Spark\u7d44\u307f\u8fbc\u307f\u306e\u6a5f\u68b0\u5b66\u7fd2\u30e9\u30a4\u30d6\u30e9\u30eaMLlib\u306b\u306f\u3001Deep Learning\u306f\u5b9f\u88c5\u3055\u308c\u3066\u3044\u306a\u3044\u308f\u3051\u3067\u3059\u304c\u3001\u3061\u3087\u3046\u3069\u305d\u308c\u3092\u88dc\u5b8c\u3059\u308b\u3088\u3046\u306b\u3001Sparkiling Water\u306e\u65b9\u306b\u306f\u5b9f\u88c5\u304c\u3042\u308a\u307e\u3059\u306d\u3002\n\n[Sparkling Water - 0xdata](http://0xdata.com/product/sparkling-water/)\n[h2oai/sparkling-water - github](https://github.com/h2oai/sparkling-water)\n\n\u3067\u3001[Example](https://github.com/h2oai/sparkling-water/blob/master/examples/README.md)\u3092\u8a66\u3057\u3066\u305f\u306e\u3067\u3059\u304c\u3001\u30a4\u30de\u30a4\u30c1\u3057\u3063\u304f\u308a\u6765\u305a\u3002\n\n\u3044\u308d\u3044\u308d\u773a\u3081\u3066\u3044\u305f\u3068\u3053\u308d\u300cKaggle Digit Recognizer\u300d\u306e\u30c7\u30fc\u30bf\u306b\u5bfe\u3059\u308b\u5206\u985e\u304c\u8a66\u3057\u3084\u3059\u305d\u3046\u3060\u3063\u305f\u306e\u3067\u3001\u3053\u308c\u3092Sparkling Water\u3067\u3084\u308b\u3068\u3069\u3046\u306a\u308b\u304b\u3001\u8a66\u3057\u305f\u7d50\u679c\u3092\u66f8\u3044\u3066\u307f\u305f\u3044\u3068\u601d\u3044\u307e\u3059\u3002\u4eca\u56de\u306f\u3001Windows\u306e\u30ed\u30fc\u30ab\u30eb\u74b0\u5883\u3067\u306e\u304a\u8a71\u3067\u3059\u3002\n\n# \u74b0\u5883\u69cb\u7bc9\n\n## OS\nWindows 8 64bit (\u7121\u5370\u7248, not pro)\n\n## \u5fc5\u8981\u306a\u30e2\u30ce\n\n### Kaggle Digit Recognizer\u306e\u30c7\u30fc\u30bf\n\nhttps://www.kaggle.com/c/digit-recognizer/data\n\n- train.csv\n- test.csv\n\n\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u306b\u306f\u3001\u30a2\u30ab\u30a6\u30f3\u30c8\u306e\u4f5c\u6210\u304c\u5fc5\u8981\u3067\u3059\n\n\n### JDK8 & SBT\n\n- JDK 8: http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html\n- SBT: http://www.scala-sbt.org/\n\nJDK\u3068SBT\u306b\u3064\u3044\u3066\u306f\u3001\u30a4\u30f3\u30b9\u30c8\u30fc\u30e9\u30fc\u3067\u3055\u304f\u3063\u3068\u5165\u308a\u307e\u3059\u306d\u3002\n\n\n### Apache Spark 1.2.0\n\nhttps://spark.apache.org/downloads.html\n\n1. Chose a Spark release: **1.2.0**\n2. Chose a package type: **PreBuild for hadoop 2.4 and later**\n3. Chose a download type: **Direct Download**\n\n\u3068\u3059\u308b\u3068\u30014.\u3067\u300cspark-1.2.0-bin-hadoop2.4.tgz\u300d\u306e\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u30ea\u30f3\u30af\u304c\u51fa\u3066\u304d\u307e\u3059\u3002\n\n[Note]\n\u73fe\u6642\u70b9\u3067\u306f\u3001**Spark 1.2.1\u4ee5\u964d\u306f\u30b5\u30dd\u30fc\u30c8\u3055\u308c\u3066\u3044\u307e\u305b\u3093**\u3002\u306a\u3093\u304b\u52d5\u304b\u306a\u304f\u3066revert\u3057\u305fcommit\u304c\u898b\u5f53\u305f\u308a\u307e\u3059\u306d\u3002\u3002\u3002\nhttps://github.com/h2oai/sparkling-water/commit/bbb777498e7587a3513f7e4d45937f593f540400\n\n### h2o Sparkling-Water\n\nhttps://github.com/h2oai/sparkling-water\n\nreadme\u306e\u4e2d\u307b\u3069\u306b\u3001\u300cDownloads of binaries -> **Sparkling Water - Latest version**\u300d\u3068\u3044\u3046\u30ea\u30f3\u30af\u304c\u3042\u308b\u3068\u601d\u3046\u306e\u3067\u3001\u305d\u3053\u304b\u3089\u3002\n\n\u3053\u308c\u66f8\u3044\u3066\u308b\u6642\u70b9\u306eversion\u306f\u3001**0.2.12-92**\n\n\u8ffd\u8a18(2015/05/06):\n**0.2.14-97**\u3067\u3044\u308d\u3044\u308d\u5909\u308f\u3063\u3066\u307e\u3059\u3002\n\n### hadoop\u306ewinutils.exe\u3068\u74b0\u5883\u5909\u6570HADOOP_PATH\n\nWindows\u7279\u6709\u306e\u554f\u984c\u3067\u3059\u304c\u3001\u5b9f\u884c\u6642\u3001winutils.exe\u304c\u7121\u3044\u3088\u3063\u3066\u30a8\u30e9\u30fc\u304c\u51fa\u3066\u304d\u307e\u3059\u3002\n\n```\nWARN NativeCodeLoader: Unable to load native-hadoop library for your platform... using builtin-java classes where applicable\nERROR Shell: Failed to locate the winutils binary in the hadoop binary path\njava.io.IOException: Could not locate executable null\\bin\\winutils.exe in the Hadoop binaries.\n        at org.apache.hadoop.util.Shell.getQualifiedBinPath(Shell.java:318)\n        at org.apache.hadoop.util.Shell.getWinUtilsPath(Shell.java:333)\n```\n\n\u3053\u308c\u3001\u7121\u8996\u3057\u3066\u3082\u554f\u984c\u7121\u3044\u306e\u3067\u3059\u304c\u3001\u6c17\u306b\u306a\u308b\u65b9\u306f[\u3053\u3061\u3089](http://qiita.com/pyr_revs/items/9bd4a1ef3f40a2f7a804)\u3092\u53c2\u8003\u306b\u3002\n\n\n## \u30ea\u30bd\u30fc\u30b9\u306e\u4f5c\u6210 & \u914d\u7f6e\n\n### \u30d5\u30a9\u30eb\u30c0\u4f5c\u6210\n\n\u9069\u5f53\u306b\u30d5\u30a9\u30eb\u30c0\u3092\u6398\u3063\u3066\u3044\u304d\u307e\u3059\u3001\u3053\u3093\u306a\u611f\u3058\u3067\u3002\n\n```console\n> mkdir c:\\scala\\kaggle\n> mkdir c:\\scala\\kaggle\\libs\n> mkdir c:\\scala\\kaggle\\data\\digit\n```\n\n### build.sbt\n\n`c:\\scala\\kaggle`\u306b`build.sbt`\u3092\u4f5c\u308a\u307e\u3059\n\n```scala:build.sbt\nname := \"Kaggle\"\n\nversion := \"0.0.1\"\n\norganization := \"my\"\n\nscalaVersion := \"2.10.4\"\n\nscalacOptions ++= Seq(\"-Xlint\", \"-deprecation\", \"-unchecked\", \"-feature\", \"-Xelide-below\", \"ALL\")\n\nunmanagedBase := baseDirectory.value / \"libs\"\n\nfork :=true\n\nlibraryDependencies ++= Seq(\n  \"org.apache.spark\" %% \"spark-core\" % \"1.2.0\",\n  \"org.apache.spark\" %% \"spark-sql\" % \"1.2.0\",\n  \"org.apache.commons\" % \"commons-lang3\" % \"3.4\"\n)\n```\n[Note]\ncommons-lang3\u306fDeepLearningParameter\u306edump\u7528\u3002ToString\u3057\u3066\u3082\u30c0\u30e1\u306a\u306e\u3067ReflectionToStringBuilder\u3067\u3002\n\n\n### sparkling-water\u306ejar\u3092\u3001\u5916\u90e8jar\u30d5\u30a9\u30eb\u30c0\u306b\u914d\u7f6e\n\nsparkling-water\u306ezip\u3092\u89e3\u51cd\u3057\u3066\u3001assembly\\build\\libs\u306b\u3042\u308b**sparkling-water-assembly-0.2.12-92-all.jar**\u3092\u3001`c:\\scala\\kaggle\\libs`\u306b\u30b3\u30d4\u30fc\u3057\u3066\u304f\u3060\u3055\u3044\n\n[Note]\nbuild.sbt\u3067`unmanagedBase := baseDirectory.value / \"libs\"`\u3068\u3044\u3046\u884c\u3092\u5165\u308c\u3066\u3042\u308a\u307e\u3059\u304c\u3001\u3053\u308c\u306f\u5916\u90e8jar\u3092\u4f7f\u3046\u305f\u3081\u306e\u8a2d\u5b9a\u3067\u3001sparkling-water\u306f\u305d\u3053\u304b\u3089\u8aad\u307e\u305b\u308b\u65b9\u91dd\u3067\u3059\u3002\u672c\u5f53\u306f[Maven Repo](http://mvnrepository.com/artifact/ai.h2o/sparkling-water-core_2.10)\u304b\u3089\u5f15\u3063\u5f35\u3063\u3066\u304d\u305f\u3044\u3093\u3067\u3059\u304c\u3001\u30d0\u30fc\u30b8\u30e7\u30f3\u53e4\u3044\u3057\u4f9d\u5b58\u95a2\u4fc2\u3081\u3061\u3083\u304f\u3061\u3083\u3060\u3057\u3067\u7121\u7406\u3067\u3057\u305f\u3002\u3002\u3002\n\n\n### Data \u30d5\u30a9\u30eb\u30c0\u306bKaggle Digit\u306e\u30c7\u30fc\u30bf\u3092\u914d\u7f6e\n\n`c:\\scala\\kaggle\\data\\digit`\u306b\u3001kaggle\u304b\u3089\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3057\u305f2\u30d5\u30a1\u30a4\u30eb\u3092\u7f6e\u304d\u307e\u3059\n\n- train.csv\n- test.csv\n\n\n### DigitRecognizer.scala\n\n`c:\\scala\\kaggle`\u306b`DigitRecognizer.scala`\u3092\u4f5c\u6210\u3002\u3084\u3063\u3066\u308b\u3053\u3068\u3092\u8981\u7d04\u3059\u308b\u3068\u3001\n\n0. SparkContext, H20Context\u3092\u8d77\u52d5\n2. train.csv\u3092h2o\u306eDataFrame\u3068\u3057\u3066\u8aad\u307f\u8fbc\u3080\n3. DataFrame\u3092\u300ctrain:valid = 8:2\u300d\u3067\u5206\u5272\n4. deep learning\u306eprediction model\u3092\u4f5c\u6210\n5. valid\u30c7\u30fc\u30bf\u306b\u5bfe\u3059\u308bprediction\u306esummary\u3092\u51fa\u529b\n\n\u3068\u3044\u3046\u3088\u3046\u306a\u6d41\u308c\u3067\u3059\u3002\n\n```scala:DigitRecognizer.scala\n\n\npackage my\n\nimport org.apache.spark\nimport org.apache.spark._\nimport org.apache.spark.SparkContext\nimport org.apache.spark.SparkContext._\nimport org.apache.spark.sql._\n\nimport org.apache.spark.h2o._\nimport org.apache.spark.examples.h2o._\nimport water.fvec.H2OFrame\nimport hex.deeplearning.DeepLearning\nimport hex.deeplearning.DeepLearningModel.DeepLearningParameters\nimport hex.deeplearning.DeepLearningModel.DeepLearningParameters.{Activation, Loss, InitialWeightDistribution}\nimport hex.{FrameSplitter, SplitFrame}\n\nimport org.apache.commons.lang.builder._\n\n\nobject DigitRecognizer\n{\n  val trainCsv = \"C:/scala/kaggle/data/digit/train.csv\"\n  val testCsv = \"C:/scala/kaggle/data/digit/test.csv\"\n\n  def main(args: Array[String]): Unit =\n  {\n    val dlParams = new DeepLearningParameters()\n    //dlParams._epochs = 0.01\n\n    Execute(dlParams, false)\n  }\n\n  def Execute(dlParams: DeepLearningParameters, useTestCsv: Boolean): Unit =\n  {\n    logging(\"Start\")\n    val startTime = System.currentTimeMillis\n\n    val sparkConf = new SparkConf()\n      .setAppName(\"Kaggle-Digit\")\n      .setMaster(\"local\")\n\n    logging(\"Initialize SparkContext\")\n    val sc = new SparkContext(sparkConf)\n\n    logging(\"Initialize H2OContext\")\n    val h2oContext = new H2OContext(sc)\n\n    logging(\"Start H2OContext\")\n    h2oContext.start()\n    logging(h2oContext.toString)\n\n    logging(\"Load TrainData\")\n    val trainData = new H2OFrame(new java.io.File(trainCsv))\n\n    // For Classification, we need to convert the label value to Enum\n    trainData.replace(0, trainData.vec(0).toEnum) // Column 0 is \"label\"\n\n    logging(\"Split Data for Train/Test\")\n    val sf = new FrameSplitter(trainData, Array(0.8), Array(\"train\", \"valid\").map(water.Key.make(_)), null)\n    water.H2O.submitTask(sf)\n    val splits = sf.getResult\n    val spTrain = splits(0)\n    val spValid = splits(1)\n\n    logging(\"DeepLearning - Set Train / Valid data to param\")\n    val resColName = \"label\"\n    dlParams._response_column = resColName\n    if(useTestCsv)\n    {\n      // All data for train\n      dlParams._train = h2oContext.dataFrameToKey(trainData)\n    }\n    else\n    {\n      // Use splitted data for train/valid\n      dlParams._train = h2oContext.dataFrameToKey(spTrain)\n      dlParams._valid = h2oContext.dataFrameToKey(spValid)\n    }\n\n    logging(\"DeepLearning - \\\"new\\\" object\")\n    val dl = new DeepLearning(dlParams)\n\n    logging(\"DeepLearning - Training data, and generating model\")\n    val dlModel = dl.trainModel.get\n\n    logging(\"dlModel\")\n    println(dlModel)\n\n    logging(\"dlModel.score(train)\")\n    println(dlModel.score(spTrain))\n\n    if(useTestCsv)\n    {\n      logging(\"dlModel.score(testCsv)\")\n      val testData = new DataFrame(new java.io.File(testCsv))\n      val predRes = dlModel.score(testData, resColName)\n\n      logging(\"Convert predicted values to array\")\n      val sqlContext = new SQLContext(sc)\n      val predAry =\n        (h2oContext.asSchemaRDD(new org.apache.spark.h2o.DataFrame(predRes))(sqlContext))\n        .collect().map(row => row.getString(0))\n\n      logging(\"Output predicted values to text\")\n      //predAry.foreach(println)\n      val file = new java.io.File(\"submission.txt\")\n      val pw = new java.io.PrintWriter(new java.io.FileWriter(file))\n      pw.println(\"ImageId,Label\")\n      var i = 1\n      for (line <- predAry)\n      {\n        pw.println(i.toString + \",\" + line)\n        i += 1\n      }\n      pw.close()\n    }\n    else\n    {\n      logging(\"dlModel.score(valid)\")\n      println(dlModel.score(spValid))\n    }\n\n    logging(\"Parameters for model\")\n    println(dumpDlParams(dlParams))\n\n    val execTime = System.currentTimeMillis - startTime\n    logging(\"Done, ExecTime (sec): \" + execTime / 1000)\n\n    logging(\"Stop SparkContext / H2O\")\n    sc.stop()\n    water.H2O.shutdown()\n  }\n\n  def logging(msg: String) =\n  {\n    val currntDateTime = \"%tF-%<tT\" format new java.util.Date\n    val logStr = currntDateTime + \": \" + msg\n    println(\"####################\")\n    println(logStr)\n    println(\"####################\")\n  }\n\n  def dumpDlParams(dlParams: DeepLearningParameters): String =\n  {\n    val builder = ReflectionToStringBuilder.toString(dlParams, ToStringStyle.MULTI_LINE_STYLE)\n    builder.toString\n  }\n}\n\n\n```\n\n\u8ffd\u8a18(2015/05/06):\n**0.2.14-97**\u3067water.fvec.DataFrame\u304cH2OFrame\u3068\u540d\u524d\u5909\u66f4\u3002\u307e\u305f\u3001FrameSpliter\u306e\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u306e\u5f15\u6570\u3082\u5909\u308f\u3063\u3066\u304a\u308a\u307e\u3059\u3002\n\n\n### \u914d\u7f6e\u56f3\n\n\u6700\u7d42\u7684\u306b\u3001\u3053\u3093\u306a\u30d5\u30a9\u30eb\u30c0\u69cb\u6210\u306b\u306a\u3063\u3066\u308b\u306f\u305a\u3002\n\n```\nc:\\scala\\kaggle\n | build.sbt\n | DigitRecognizer.scala\n \u2514libs\n |  sparkling-water-assembly-0.2.12-92-all.jar\n \u2514data\\digit\n    train.csv\n    test.csv\n```\n\n\n# \u5b9f\u884c & \u7d50\u679c\n\n## sbt run\u3067\u5b9f\u884c\n    \nPowerShell\u3060\u3068Tee-Object\u304c\u4f7f\u3048\u308b\u306e\u3067\u3001\u305d\u3061\u3089\u3067\u51fa\u529b\u3092\u4fdd\u5b58\u3057\u3064\u3064\u3001\u753b\u9762\u306b\u51fa\u3057\u3064\u3064\u3002\n\n```powershell\n> cd c:\\scala\\kaggle\n> sbt run | Tee-Object -file out.txt\n```\n\n## \u7d50\u679c\n\nvalid\u30c7\u30fc\u30bf\u306b\u5bfe\u3057\u3066prediction\u3057\u3066\u307f\u305f\u7d50\u679c\u306esummary\u3068\u3001\u5b9f\u884c\u6642\u9593\u7b49\u3005\u304c\u51fa\u3066\u304f\u308b\u306f\u305a\u3002\n\n\n```\n####################\ndlModel.score(valid)\n####################\nINFO: Confusion Matrix:\nINFO: Act/Pred   0   1   2   3   4   5   6   7   8   9  Error              \nINFO:        0 842   0   1   0   2   0   2   0   3   2 0.0117 =    10 / 852\nINFO:        1   0 936   3   0   2   1   0   4   4   0 0.0147 =    14 / 950\nINFO:        2   6   1 771   4   1   0   4   7   4   3 0.0375 =    30 / 801\nINFO:        3   3   1   8 845   0   9   0   7   4   5 0.0420 =    37 / 882\nINFO:        4   1   2   0   0 786   0   4   2   4  12 0.0308 =    25 / 811\nINFO:        5   6   2   1   9   5 708   3   1   5   7 0.0522 =    39 / 747\nINFO:        6  10   3   2   0   2   2 812   0   0   0 0.0229 =    19 / 831\nINFO:        7   2   0   2   1   3   1   0 873   0   2 0.0124 =    11 / 884\nINFO:        8   3   6   1   4   4   7   1   0 771   5 0.0387 =    31 / 802\nINFO:        9   6   1   2   4   8   0   0  15   2 802 0.0452 =    38 / 840\nINFO:   Totals 879 952 791 867 813 728 826 909 797 838 0.0302 = 254 / 8,400\n####################\nParameters\n####################\nhex.deeplearning.DeepLearningModel$DeepLearningParameters@469d003c[\n  _n_folds=0\n  _keep_cross_validation_splits=false\n  _checkpoint=<null>\n  _override_with_best_model=true\n  _autoencoder=false\n  _use_all_factor_levels=true\n  _activation=Rectifier\n  _hidden={200,200}\n  _epochs=10.0\n  _train_samples_per_iteration=-2\n  _target_ratio_comm_to_comp=0.02\n  _seed=-4159351283397432880\n  _adaptive_rate=true\n  _rho=0.99\n  _epsilon=1.0E-8\n  _rate=0.005\n  _rate_annealing=1.0E-6\n  _rate_decay=1.0\n  _momentum_start=0.0\n  _momentum_ramp=1000000.0\n  _momentum_stable=0.0\n  _nesterov_accelerated_gradient=true\n  _input_dropout_ratio=0.0\n  _hidden_dropout_ratios=<null>\n  _l1=0.0\n  _l2=0.0\n  _max_w2=Infinity\n  _initial_weight_distribution=UniformAdaptive\n  _initial_weight_scale=1.0\n  _loss=CrossEntropy\n  _score_interval=5.0\n  _score_training_samples=10000\n  _score_validation_samples=0\n  _score_duty_cycle=0.1\n  _classification_stop=0.0\n  _regression_stop=1.0E-6\n  _quiet_mode=false\n  _score_validation_sampling=Uniform\n  _diagnostics=true\n  _variable_importances=false\n  _fast_mode=true\n  _ignore_const_cols=true\n  _force_load_balance=true\n  _replicate_training_data=false\n  _single_node_mode=false\n  _shuffle_training_data=false\n  _missing_values_handling=MeanImputation\n  _sparse=false\n  _col_major=false\n  _average_activation=0.0\n  _sparsity_beta=0.0\n  _max_categorical_features=2147483647\n  _reproducible=false\n  _response_column=label\n  _balance_classes=false\n  _max_after_balance_size=5.0\n  _class_sampling_factors=<null>\n  _max_hit_ratio_k=10\n  _destination_key=<null>\n  _train=train_part0.hex\n  _valid=train_part1.hex\n  _ignored_columns=<null>\n  _dropNA20Cols=false\n  _dropConsCols=true\n  _score_each_iteration=false\n  _max_confusion_matrix_size=20\n  _ice_id=58\n]####################\nDone, ExecTime (sec): 1601\n####################\n```\n\n\u30d1\u30e9\u30e1\u30fc\u30bf\u30fc\u5168\u90e8\u30c7\u30d5\u30a9\u30eb\u30c8\u3067\u3001train\u30c7\u30fc\u30bf\u30928:2\u3067train/valid\u306b\u5272\u3063\u305f\u5834\u5408\u3001\u300c0.0302 = 254 / 8,400\u300d\u3001\u6b63\u89e3\u738796.9%\u7a0b\u5ea6\u3002\n\n\u306a\u304a\u3001\u3053\u308c\u3092\u5b9f\u884c\u3057\u305f\u79c1\u306e\u30ce\u30fc\u30c8PC\u3001CPU\u304c\u300cAMD E1-1200 APU\u300d\u3068\u3044\u3046\u30cd\u30c3\u30c8\u30d6\u30c3\u30af\u4ed5\u69d8\u306e\u4ee3\u7269\u306a\u306e\u3067\u3001\u5b9f\u884c\u6642\u9593\u306f\u901a\u5e38\u3082\u3063\u3068\u65e9\u3044\u306f\u305a\u3002\n\n## Kaggle \u306b\u63d0\u51fa\u3059\u308bsubmission\u3092\u51fa\u529b\u3059\u308b\n\nDigitRecognizer.scala\u306emain\u30e1\u30bd\u30c3\u30c9\u306b\u3001`Execute(dlParams, false)`\u3068\u3044\u3046\u884c\u304c\u3042\u308a\u307e\u3059\u3002\u3053\u308c\u3092`Execute(dlParams, true)`\u306b\u5909\u66f4\u3057\u3066\u5b9f\u884c\u3059\u308b\u3068\u3001\u4ee5\u4e0b\u306e\u6d41\u308c\u3067`submission.txt`\u3092\u51fa\u529b\u3059\u308b\u3088\u3046\u306b\u3057\u3066\u3042\u308a\u307e\u3059\u3002\n\n0. train.csv\u3092\u5206\u5272\u305b\u305a\u3001\u5168\u3066train\u30c7\u30fc\u30bf\u3068\u3057\u3066\u6271\u3046\n1. \u305d\u308c\u3067\u51fa\u6765\u305f\u30e2\u30c7\u30eb\u306b\u5bfe\u3057\u3066\u3001test.csv\u3078\u306eprediction\u306e\u7d50\u679c\u3092\u5410\u304f\n\n\n\u5b9f\u969b\u306b\u51fa\u6765\u305f\u3082\u306e\u3092submit\u3057\u3066\u307f\u308b\u3068\u3001\u300c0.96914\u300d\u3067207\u4f4d\u3002\u6d41\u77f3\u306b\u30c7\u30d5\u30a9\u30eb\u30c8\u3060\u3068\u3001\u3082\u3046\u3059\u3053\u3057\u304c\u3093\u3070\u308a\u307e\u3057\u3087\u3046\u3063\u3066\u611f\u3058\u306b\u306a\u308a\u307e\u3059\u306a\u3002\n\n## Next Step\n\n\u6b63\u76f4\u306a\u3068\u3053\u308d\u3001Windows\u306e\u30ed\u30fc\u30ab\u30eb\u74b0\u5883\u3067\u3084\u308b\u5206\u306b\u306f\u3001R\u304b\u3089H2O\u3092\u53e9\u3051\u3070\u3044\u3044\u3093\u3067\u3059\u304c\u3001EMR\u4e0a\u3067\u306e\u52d5\u4f5c\u3092\u898b\u636e\u3048\u3064\u3064\u3001\u3068\u3044\u3046\u3053\u3068\u3067\u3002\n", "tags": ["Spark1.2.0", "Scala", "DeepLearning", "Sparkling-Water0.2.14-97", "h2o.ai"]}