{"context": " More than 1 year has passed since last update.GPX\u30d5\u30a1\u30a4\u30eb\u306f\u3001Garmin\u793e\u88fd\u306eGPS\u30c7\u30d0\u30a4\u30b9\u3084EPSON\u306eGPS\u30ea\u30b9\u30c8\u30a6\u30a9\u30c3\u30c1\u306b\u63a1\u7528\u3055\u308c\u3066\u3044\u308b\u4f4d\u7f6e\u60c5\u5831\u3092\u53d6\u308a\u6271\u3046\u305f\u3081\u306e\u30d5\u30a1\u30a4\u30eb\u5f62\u5f0f\u306e1\u7a2e\u3067\u3059\u3002XML\u5f62\u5f0f\u306e\u30c6\u30ad\u30b9\u30c8\u306a\u306e\u3067\u9811\u5f35\u308c\u3070\u305d\u306e\u307e\u307e\u76ee\u3067\u8aad\u3081\u306a\u3044\u3053\u3068\u3082\u306a\u3044\u3067\u3059\u304c\u3001\u30d7\u30ed\u30b0\u30e9\u30e0\u7684\u306b\u6271\u3046\u306a\u3089\u4f55\u304b\u3057\u3089\u306e\u5225\u306e\u5f62\u5f0f\u306b\u306a\u3063\u3066\u3044\u305f\u307b\u3046\u304c\u4fbf\u5229\u3067\u3059\u3002\nPython\u306eSAX\u30e2\u30b8\u30e5\u30fc\u30eb\u3092\u4f7f\u3063\u3066GPX\u30d5\u30a1\u30a4\u30eb\u306e\u4e2d\u8eab\u3092\u8aad\u307f\u53d6\u3063\u3066\u307f\u307e\u3059\u3002\nGPX\u30d5\u30a1\u30a4\u30eb\u306f\u3044\u304f\u3064\u304b\u7a2e\u985e\u304c\u3042\u308b\u306e\u3067\u3059\u304c\u3001\u4ee3\u8868\u7684\u306a2\u3064\u3001\u30c8\u30e9\u30c3\u30af\u30dd\u30a4\u30f3\u30c8\u5f62\u5f0f\u3068\u30a6\u30a7\u30a4\u30dd\u30a4\u30f3\u30c8\u5f62\u5f0f\u3092\u8aad\u307f\u51fa\u3057\u3066\u307f\u307e\u3059\u3002\n\nparser.py\nimport xml\nfrom xml.sax.handler import ContentHandler\n\n\nclass WayPointHandler(ContentHandler):\n    \"\"\"\u30a6\u30a7\u30a4\u30dd\u30a4\u30f3\u30c8\u5f62\u5f0f\u306e\u30cf\u30f3\u30c9\u30e9\n    \"\"\"\n\n    def __init__(self, buf):\n        self.buf = buf\n\n        self.results = []\n        self.lon = None\n        self.lat = None\n        self.ele = None\n        self.inEle = False\n\n    def startElement(self, name, attrs):\n        if name == 'wpt':  # wpt\u30a8\u30ec\u30e1\u30f3\u30c8\u3060\u3063\u305f\u3089lon, lat\u3092\u53d6\u5f97\n            self.ele = None\n            self.lon = attrs['lon']\n            self.lat = attrs['lat']\n        elif name == 'ele':  # ele\u30a8\u30ec\u30e1\u30f3\u30c8\u3060\u3063\u305f\u3089\u30d5\u30e9\u30b0\u3092\u7acb\u3066\u308b\n            self.inEle = True\n\n    def endElement(self, name):\n        # \u914d\u5217\u306b\u8ffd\u52a0\u3057\u3066\u30d5\u30e9\u30b0\u3092\u521d\u671f\u5316\n        if name == 'wpt':\n            self.results.append([self.lon, self.lat, self.ele])\n        elif name == 'ele':\n            self.inEle = False\n\n    def characters(self, content):\n        if self.inEle:  # \u30a8\u30ec\u30e1\u30f3\u30c8\u5185\u306e\u6587\u5b57\u5217\u3092\u53d6\u5f97\u3059\u308b\n            self.ele = content.strip()\n\n    def parse(self):\n        \"\"\"\u6307\u5b9a\u3055\u308c\u305f\u30d5\u30a1\u30a4\u30eb\u306e\u7def\u5ea6\u7d4c\u5ea6\u304a\u3088\u3073\u6a19\u9ad8\u3092\u8fd4\u3059\u3002\n\n        @return: [[longitude, latitude, altitude], ... ]\n        @rtype: list\n        \"\"\"\n        parser = xml.sax.make_parser()\n        parser.setContentHandler(self)\n        parser.parse(self.buf)\n\n        return self.results\n\n\nclass TrackPointHandler(ContentHandler):\n    \"\"\"\u30c8\u30e9\u30c3\u30af\u30dd\u30a4\u30f3\u30c8\u5f62\u5f0fGPX\u306e\u30cf\u30f3\u30c9\u30e9\n    \"\"\"\n\n    def __init__(self, buf):\n        self.buf = buf\n\n        self.results = []\n        self.lon = None\n        self.lat = None\n        self.ele = None\n        self.inEle = False\n\n    def startElement(self, name, attrs):\n        if name == 'trkpt':  # trkpt\u30a8\u30ec\u30e1\u30f3\u30c8\u3060\u3063\u305f\u3089lon, lat\u3092\u53d6\u5f97\n            self.ele = None\n            self.lon = attrs['lon']\n            self.lat = attrs['lat']\n        elif name == 'ele':  # ele\u30a8\u30ec\u30e1\u30f3\u30c8\u3060\u3063\u305f\u3089\u30d5\u30e9\u30b0\u3092\u7acb\u3066\u308b\n            self.inEle = True\n\n    def endElement(self, name):\n        # \u53d6\u5f97\u3057\u305f\u5024\u3092\u914d\u5217\u306b\u8ffd\u52a0\u3001\u30d5\u30e9\u30b0\u3092\u521d\u671f\u5316\n        if name == 'trkpt':\n            self.results.append([self.lon, self.lat, self.ele])\n        elif name == 'ele':\n            self.inEle = False\n\n    def characters(self, content):\n        if self.inEle:  # \u30d5\u30e9\u30b0\u304c\u7acb\u3063\u3066\u3044\u305f\u3089\u30a8\u30ec\u30e1\u30f3\u30c8\u5185\u306e\u6587\u5b57\u5217\u3092\u53d6\u5f97\u3059\u308b\n            self.ele = content.strip()\n\n    def parse(self):\n        \"\"\"\u6307\u5b9a\u3055\u308c\u305f\u30d5\u30a1\u30a4\u30eb\u306e\u7def\u5ea6\u7d4c\u5ea6\u304a\u3088\u3073\u6a19\u9ad8\u3092\u8fd4\u3059\u3002\n\n        @return: [[longitude, latitude, altitude], ... ]\n        @rtype: list\n        \"\"\"\n        parser = xml.sax.make_parser()\n        parser.setContentHandler(self)\n        parser.parse(self.buf)\n\n        return self.results\n\n\n\u4f7f\u3044\u65b9\u3002\n\u30a6\u30a7\u30a4\u30dd\u30a4\u30f3\u30c8\u5f62\u5f0f\u306eGPX\u30d5\u30a1\u30a4\u30eb\u306fYahoo! Japan\u30eb\u30fc\u30c8\u30e9\u30dc\u8fba\u308a\u304b\u3089\u62fe\u3063\u3066\u304d\u3066\u304f\u3060\u3055\u3044\u3002\n>>> f = open('waypoints.gpx', 'rt')\n>>> handler = parser.WayPointHandler(f)\n>>> handler.parse()\n[[u'141.6223275', u'39.0208238888889', u'4.8'],\n [u'141.622242777778', u'39.0208955555556', u'4.9'],\n [u'141.62209', u'39.0210269444444', u'5.5']]\n ...\n\n\u30c8\u30e9\u30c3\u30af\u30dd\u30a4\u30f3\u30c8\u5f62\u5f0f\u306e\u30d5\u30a1\u30a4\u30eb\u306f\u30b5\u30f3\u30d7\u30eb\u304c\u898b\u5f53\u305f\u3089\u306a\u304b\u3063\u305f\u306e\u3067\u9069\u5f53\u306b\u30b0\u30b0\u3063\u3066\u62fe\u3063\u3066\u304d\u3066\u304f\u3060\u3055\u3044(\u6c57\n>>> f = open('trackponits.gpx', 'rt')\n>>> handler = parser.TrackPointHandler(f)\n>>> handler.parse()\n[[u'141.622163611111', u'39.0209638888889', u'4.9'],\n [u'141.622242777778', u'39.0208955555556', u'4.9'],\n [u'141.6223275', u'39.0208238888889', u'4.8'],\n [u'141.623074722222', u'39.0201783333333', u'4.4'],\n ...\n\n\n\u3042\u308f\u305b\u3066\u8aad\u307f\u305f\u3044\n\nXcode\u3067iOS\u30c7\u30d0\u30a4\u30b9\u306e\u4f4d\u7f6e\u60c5\u5831\u3092\u30b7\u30df\u30e5\u30ec\u30fc\u30c8\u3059\u308b\n\n\nGPX\u30d5\u30a1\u30a4\u30eb\u306f\u3001Garmin\u793e\u88fd\u306eGPS\u30c7\u30d0\u30a4\u30b9\u3084EPSON\u306eGPS\u30ea\u30b9\u30c8\u30a6\u30a9\u30c3\u30c1\u306b\u63a1\u7528\u3055\u308c\u3066\u3044\u308b\u4f4d\u7f6e\u60c5\u5831\u3092\u53d6\u308a\u6271\u3046\u305f\u3081\u306e\u30d5\u30a1\u30a4\u30eb\u5f62\u5f0f\u306e1\u7a2e\u3067\u3059\u3002XML\u5f62\u5f0f\u306e\u30c6\u30ad\u30b9\u30c8\u306a\u306e\u3067\u9811\u5f35\u308c\u3070\u305d\u306e\u307e\u307e\u76ee\u3067\u8aad\u3081\u306a\u3044\u3053\u3068\u3082\u306a\u3044\u3067\u3059\u304c\u3001\u30d7\u30ed\u30b0\u30e9\u30e0\u7684\u306b\u6271\u3046\u306a\u3089\u4f55\u304b\u3057\u3089\u306e\u5225\u306e\u5f62\u5f0f\u306b\u306a\u3063\u3066\u3044\u305f\u307b\u3046\u304c\u4fbf\u5229\u3067\u3059\u3002\n\nPython\u306eSAX\u30e2\u30b8\u30e5\u30fc\u30eb\u3092\u4f7f\u3063\u3066GPX\u30d5\u30a1\u30a4\u30eb\u306e\u4e2d\u8eab\u3092\u8aad\u307f\u53d6\u3063\u3066\u307f\u307e\u3059\u3002\n\nGPX\u30d5\u30a1\u30a4\u30eb\u306f\u3044\u304f\u3064\u304b\u7a2e\u985e\u304c\u3042\u308b\u306e\u3067\u3059\u304c\u3001\u4ee3\u8868\u7684\u306a2\u3064\u3001\u30c8\u30e9\u30c3\u30af\u30dd\u30a4\u30f3\u30c8\u5f62\u5f0f\u3068\u30a6\u30a7\u30a4\u30dd\u30a4\u30f3\u30c8\u5f62\u5f0f\u3092\u8aad\u307f\u51fa\u3057\u3066\u307f\u307e\u3059\u3002\n\n```python:parser.py\nimport xml\nfrom xml.sax.handler import ContentHandler\n\n\nclass WayPointHandler(ContentHandler):\n    \"\"\"\u30a6\u30a7\u30a4\u30dd\u30a4\u30f3\u30c8\u5f62\u5f0f\u306e\u30cf\u30f3\u30c9\u30e9\n    \"\"\"\n\n    def __init__(self, buf):\n        self.buf = buf\n\n        self.results = []\n        self.lon = None\n        self.lat = None\n        self.ele = None\n        self.inEle = False\n\n    def startElement(self, name, attrs):\n        if name == 'wpt':  # wpt\u30a8\u30ec\u30e1\u30f3\u30c8\u3060\u3063\u305f\u3089lon, lat\u3092\u53d6\u5f97\n            self.ele = None\n            self.lon = attrs['lon']\n            self.lat = attrs['lat']\n        elif name == 'ele':  # ele\u30a8\u30ec\u30e1\u30f3\u30c8\u3060\u3063\u305f\u3089\u30d5\u30e9\u30b0\u3092\u7acb\u3066\u308b\n            self.inEle = True\n\n    def endElement(self, name):\n        # \u914d\u5217\u306b\u8ffd\u52a0\u3057\u3066\u30d5\u30e9\u30b0\u3092\u521d\u671f\u5316\n        if name == 'wpt':\n            self.results.append([self.lon, self.lat, self.ele])\n        elif name == 'ele':\n            self.inEle = False\n\n    def characters(self, content):\n        if self.inEle:  # \u30a8\u30ec\u30e1\u30f3\u30c8\u5185\u306e\u6587\u5b57\u5217\u3092\u53d6\u5f97\u3059\u308b\n            self.ele = content.strip()\n\n    def parse(self):\n        \"\"\"\u6307\u5b9a\u3055\u308c\u305f\u30d5\u30a1\u30a4\u30eb\u306e\u7def\u5ea6\u7d4c\u5ea6\u304a\u3088\u3073\u6a19\u9ad8\u3092\u8fd4\u3059\u3002\n\n        @return: [[longitude, latitude, altitude], ... ]\n        @rtype: list\n        \"\"\"\n        parser = xml.sax.make_parser()\n        parser.setContentHandler(self)\n        parser.parse(self.buf)\n\n        return self.results\n\n\nclass TrackPointHandler(ContentHandler):\n    \"\"\"\u30c8\u30e9\u30c3\u30af\u30dd\u30a4\u30f3\u30c8\u5f62\u5f0fGPX\u306e\u30cf\u30f3\u30c9\u30e9\n    \"\"\"\n\n    def __init__(self, buf):\n        self.buf = buf\n\n        self.results = []\n        self.lon = None\n        self.lat = None\n        self.ele = None\n        self.inEle = False\n\n    def startElement(self, name, attrs):\n        if name == 'trkpt':  # trkpt\u30a8\u30ec\u30e1\u30f3\u30c8\u3060\u3063\u305f\u3089lon, lat\u3092\u53d6\u5f97\n            self.ele = None\n            self.lon = attrs['lon']\n            self.lat = attrs['lat']\n        elif name == 'ele':  # ele\u30a8\u30ec\u30e1\u30f3\u30c8\u3060\u3063\u305f\u3089\u30d5\u30e9\u30b0\u3092\u7acb\u3066\u308b\n            self.inEle = True\n\n    def endElement(self, name):\n        # \u53d6\u5f97\u3057\u305f\u5024\u3092\u914d\u5217\u306b\u8ffd\u52a0\u3001\u30d5\u30e9\u30b0\u3092\u521d\u671f\u5316\n        if name == 'trkpt':\n            self.results.append([self.lon, self.lat, self.ele])\n        elif name == 'ele':\n            self.inEle = False\n\n    def characters(self, content):\n        if self.inEle:  # \u30d5\u30e9\u30b0\u304c\u7acb\u3063\u3066\u3044\u305f\u3089\u30a8\u30ec\u30e1\u30f3\u30c8\u5185\u306e\u6587\u5b57\u5217\u3092\u53d6\u5f97\u3059\u308b\n            self.ele = content.strip()\n\n    def parse(self):\n        \"\"\"\u6307\u5b9a\u3055\u308c\u305f\u30d5\u30a1\u30a4\u30eb\u306e\u7def\u5ea6\u7d4c\u5ea6\u304a\u3088\u3073\u6a19\u9ad8\u3092\u8fd4\u3059\u3002\n\n        @return: [[longitude, latitude, altitude], ... ]\n        @rtype: list\n        \"\"\"\n        parser = xml.sax.make_parser()\n        parser.setContentHandler(self)\n        parser.parse(self.buf)\n\n        return self.results\n```\n\n\u4f7f\u3044\u65b9\u3002\n\n\u30a6\u30a7\u30a4\u30dd\u30a4\u30f3\u30c8\u5f62\u5f0f\u306eGPX\u30d5\u30a1\u30a4\u30eb\u306f[Yahoo! Japan\u30eb\u30fc\u30c8\u30e9\u30dc](http://latlonglab.yahoo.co.jp/route/)\u8fba\u308a\u304b\u3089\u62fe\u3063\u3066\u304d\u3066\u304f\u3060\u3055\u3044\u3002\n\n```python\n>>> f = open('waypoints.gpx', 'rt')\n>>> handler = parser.WayPointHandler(f)\n>>> handler.parse()\n[[u'141.6223275', u'39.0208238888889', u'4.8'],\n [u'141.622242777778', u'39.0208955555556', u'4.9'],\n [u'141.62209', u'39.0210269444444', u'5.5']]\n ...\n```\n\n\u30c8\u30e9\u30c3\u30af\u30dd\u30a4\u30f3\u30c8\u5f62\u5f0f\u306e\u30d5\u30a1\u30a4\u30eb\u306f\u30b5\u30f3\u30d7\u30eb\u304c\u898b\u5f53\u305f\u3089\u306a\u304b\u3063\u305f\u306e\u3067\u9069\u5f53\u306b\u30b0\u30b0\u3063\u3066\u62fe\u3063\u3066\u304d\u3066\u304f\u3060\u3055\u3044(\u6c57\n\n```python\n>>> f = open('trackponits.gpx', 'rt')\n>>> handler = parser.TrackPointHandler(f)\n>>> handler.parse()\n[[u'141.622163611111', u'39.0209638888889', u'4.9'],\n [u'141.622242777778', u'39.0208955555556', u'4.9'],\n [u'141.6223275', u'39.0208238888889', u'4.8'],\n [u'141.623074722222', u'39.0201783333333', u'4.4'],\n ...\n```\n\n\n\n# \u3042\u308f\u305b\u3066\u8aad\u307f\u305f\u3044\n\n* [Xcode\u3067iOS\u30c7\u30d0\u30a4\u30b9\u306e\u4f4d\u7f6e\u60c5\u5831\u3092\u30b7\u30df\u30e5\u30ec\u30fc\u30c8\u3059\u308b](http://qiita.com/key/items/d33aba1f7eb76f898730)\n", "tags": ["GPX", "GIS", "Garmin"]}