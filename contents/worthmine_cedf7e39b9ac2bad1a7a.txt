{"context": "\n\n\u7d50\u8ad6\nsleipnir for Mac\u306e\u30d0\u30b0\u3067\u3057\u305f\u3002\n\n\u958b\u767a\u4e2d\u306e\u30b3\u30fc\u30c9\u3088\u308a\u3001\u3056\u3063\u304f\u308a\u3068\u524a\u3063\u3066\u307f\u3066\u3082\u518d\u73fe\u3059\u308b\u306e\u3067\u3053\u308c\u306f\u3082\u3046\u3088\u304f\u5206\u304b\u3089\u306a\u3044\u3002\n\u30b0\u30b0\u3063\u3066\u3082\u51fa\u306a\u3044\u306e\u3067Qiita\u306e\u307f\u3093\u306a\u3001\u30aa\u30e9\u306b\u529b\u3092\u5206\u3051\u3066\u304f\u308c\uff01\n\n\u30b3\u30fc\u30c9\n\ntest.pl\nuse strict;\nuse warnings;\nuse Carp;\n\nuse Plack::App::Path::Router::PSGI;\nuse Path::Router;\nuse Plack::Builder;\nuse Plack::Request;\n\nuse lib './lib';    # Pwd.pl \u306e\u4fdd\u5b58\u5148\n\nuse Data::Section::Simple;\nmy $vpath = Data::Section::Simple->new()->get_data_section();\n\nuse Text::Xslate;\nmy $tx = Text::Xslate->new(\n    syntax => 'Kolon',\n    cache => 0,\n    verbose => 1,\n    path => [$vpath],\n);\n\nuse CGI::Session;\nmy $session = CGI::Session->new(undef, undef, {Directory=>'./sessions'});\nmy $sid = $session->param('CGISESSID') || undef;\n$session = CGI::Session->new(undef, $sid, {Directory=>'./sessions'});\n$session->expire('+2y');\n\nuse DBI;\nmy $mysqlPasswd = require 'Pwd.pl';\nmy $dbh = DBI->connect(\"DBI:mysql:TEST\", 'TEST', $mysqlPasswd, {'RaiseError' => 1} );\nuse Storable qw(nfreeze thaw);\n\nmy $router = Path::Router->new;\n$router->add_route( '/'         => target => \\&root );\n$router->add_route( '/download'   => target => \\&download );\n\n# now create the Plack app\nmy $app = Plack::App::Path::Router::PSGI->new( router => $router );\nuse File::RotateLogs;\nmy $rotatelogs = File::RotateLogs->new(\n    logfile => './log/access_log.%Y%m%d',\n    linkname => './log/access_log',\n    maxage => 86400 * 30, #30day\n);\n\nuse Log::Dispatch;\nmy $logger = Log::Dispatch->new;\nuse Log::Dispatch::Config;\nLog::Dispatch::Config->configure('./log.conf');\nmy $dispatcher = Log::Dispatch::Config->instance();\n$dispatcher->info('\u518d\u8d77\u52d5');\n\nbuilder {\n    if ( !$app && ( my $error = $@ || $! )) { die $error; }\n    enable \"Plack::Middleware::Static\",  path => qr{^/static}, root => './common';\n    enable 'AccessLog', logger => sub { $rotatelogs->print(@_) };\n    enable 'LogErrors', logger => sub {\n        my $args = shift;\n        $logger->log(%$args);\n    };\n\n    $app->to_app();\n};\n\n#===============================================================================\nsub download {\n    my $env = shift;\n    my $req = Plack::Request->new($env);\n    my $ip = $env->{'REMOTE_ADDR'};\n    my $sth = $dbh->prepare('SELECT * FROM Counter WHERE ip_address = ?')  or die $dbh->errstr;\n    $sth->execute($ip) or die $sth->errstr;\n    my $hash = $sth->fetchrow_hashref();\n    $sth->finish;\n\n    my $count = thaw( $hash->{'referer'} );\n    my $ref = $req->query_parameters->{'ref'};\n    $count->{ $ref }++ if exists $count->{ $ref };\n    $count->{ 'total' }++ if $ref ne 'total';\n    $hash->{'referer'} = nfreeze($count);\n\n    $sth = $dbh->prepare('UPDATE Counter SET referer = ? WHERE ip_address = ?')  or die $dbh->errstr;\n    $sth->execute( $hash->{'referer'}, $ip ) or die $sth->errstr;\n    $sth->finish;\n\n    use Text::vCard;\n    my $vc = Text::vCard->new( { 'encoding_out' => 'none', } );\n    $vc->version('4.0');\n    my $vcf = $vc->as_string();\n    $dispatcher->info(\"\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9 $ip:ref=$ref is $count->{ $ref }\" );\n    $dispatcher->info(\"\u7dcf\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9 $ip is $count->{ 'total' }\" );\n    response( $env, $vcf,\n        -MIME => 'text/vcard; charset=utf-8', -headers => {\n            'Content-Disposition' => qq|attachment; filename=\"test.vcf\"|,\n            'Content-Length' => length $vcf,\n            'Pragma' => 'no-cache',\n            'Cache-Control' => 'private, no-store, no-cache, must-revalidate',\n        }\n    );\n}\n\nsub root {\n    my $env = shift;\n    my $req = Plack::Request->new($env);\n    my %param = %{ $req->query_parameters };\n    my $render;\n\n    my $sth = $dbh->prepare(\"INSERT INTO Counter VALUES(?,?)\") or die $dbh->errstr;\n    $sth->execute(\n        $env->{'REMOTE_ADDR'},\n        nfreeze({ total => 0, reload => 0 }),\n    ) or die $dbh->errstr;\n    $sth->finish;\n\n    $dispatcher->info('\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u306e\u521d\u671f\u5316\u306b\u6210\u529f');\n\n    # \u4ee5\u4e0b\u753b\u9762\u8868\u793a\n    $render = $tx->render( 'template.tx');\n    response( $env, $render );\n}\n\nsub response {\n    my $env = shift;\n    my $body = shift || croak 'empty body!';\n    my %ARG = @_;\n    my $status = $ARG{'-status'} || 200;\n    croak \"unvalid status: $status\" if $status !~ /\\d{3}/s;\n    my $mime = $ARG{'-MIME'} || 'text/html; charset=utf-8';\n    my $headers = $ARG{'-headers'} || {};\n    my $req = Plack::Request->new($env);\n    my $res = $req->new_response($status);\n    $res->content_type($mime);\n    $res->header({\n        'Set-Cookie' => $session->cookie,\n        %$headers\n    });\n    $res->body($body);\n    $res->finalize;\n}\n\n__DATA__\n\n@@ template.tx\n    <meta charset=\"UTF-8\">\n\n    <h2>\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u521d\u671f\u5316\u5b8c\u4e86</h2>\n    <p><a href=\"/download?ref=reload\">\u3053\u3061\u3089\u3092\u30af\u30ea\u30c3\u30af\u3057\u3066\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9</a></p>\n\n\n\n\u30a8\u30e9\u30fc\u306e\u6982\u8981\n\u307e\u3041\u9069\u5f53\u306b\u7a7a\u306evCard\u30d5\u30a1\u30a4\u30eb\u3092\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3055\u305b\u308b\u3093\u3060\u304c\u3001\n\nerror.log\n[Fri Oct 21 21:26:08 2016] [info] \u518d\u8d77\u52d5 \nHTTP::Server::PSGI: Accepting connections at http://0:5000/\n[Fri Oct 21 21:39:16 2016] [info] \u30c0\u30a6\u30f3\u30ed\u30fc\u30c9 127.0.0.1:ref=reload is 11 \n[Fri Oct 21 21:39:16 2016] [info] \u7dcf\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9 127.0.0.1 is 13 \n[Fri Oct 21 21:39:16 2016] [info] \u30c0\u30a6\u30f3\u30ed\u30fc\u30c9 127.0.0.1:ref=reload is 12 \n[Fri Oct 21 21:39:16 2016] [info] \u7dcf\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9 127.0.0.1 is 14 ```\n\n\n\u2191sleipnil\u304b\u3089\u306e\u30a2\u30af\u30bb\u30b9\u3067\u306f\u4e0d\u601d\u8b70\u306a\u3053\u3068\u306b1\u30a2\u30af\u30bb\u30b9\u306b\u3064\u304d2\u56de\u3001sub download\u304c\u547c\u3070\u308c\u3066\u308b\u3063\u307d\u3044\u3002\u3057\u304b\u3057\u30a2\u30af\u30bb\u30b9\u30ed\u30b0\u306b\u306f1\u30af\u30ea\u30c3\u30af\u306b\u3064\u304dGET\u30ea\u30af\u30a8\u30b9\u30c81\u56de\u9650\u308a\u3002\n\n\uff0811/2\u8ffd\u8a18\uff09Chorome,Safari\u3067\u306e\u691c\u8a3c\u7d50\u679c\n\u6b63\u5e38\u306b\u52d5\u4f5c\u3057\u307e\u3057\u305f\u3002\u304a\u9a12\u304c\u305b\u3057\u307e\u3057\u305f\u3002\n#\u7d50\u8ad6\n[sleipnir for Mac](http://www.fenrir-inc.com/jp/sleipnir/)\u306e\u30d0\u30b0\u3067\u3057\u305f\u3002\n\n---\n\u958b\u767a\u4e2d\u306e\u30b3\u30fc\u30c9\u3088\u308a\u3001\u3056\u3063\u304f\u308a\u3068\u524a\u3063\u3066\u307f\u3066\u3082\u518d\u73fe\u3059\u308b\u306e\u3067\u3053\u308c\u306f\u3082\u3046\u3088\u304f\u5206\u304b\u3089\u306a\u3044\u3002\n\u30b0\u30b0\u3063\u3066\u3082\u51fa\u306a\u3044\u306e\u3067**Qiita\u306e\u307f\u3093\u306a\u3001\u30aa\u30e9\u306b\u529b\u3092\u5206\u3051\u3066\u304f\u308c\uff01**\n\n##\u30b3\u30fc\u30c9\n```test.pl\nuse strict;\nuse warnings;\nuse Carp;\n\nuse Plack::App::Path::Router::PSGI;\nuse Path::Router;\nuse Plack::Builder;\nuse Plack::Request;\n\nuse lib './lib';    # Pwd.pl \u306e\u4fdd\u5b58\u5148\n\nuse Data::Section::Simple;\nmy $vpath = Data::Section::Simple->new()->get_data_section();\n\nuse Text::Xslate;\nmy $tx = Text::Xslate->new(\n    syntax => 'Kolon',\n    cache => 0,\n    verbose => 1,\n    path => [$vpath],\n);\n\nuse CGI::Session;\nmy $session = CGI::Session->new(undef, undef, {Directory=>'./sessions'});\nmy $sid = $session->param('CGISESSID') || undef;\n$session = CGI::Session->new(undef, $sid, {Directory=>'./sessions'});\n$session->expire('+2y');\n\nuse DBI;\nmy $mysqlPasswd = require 'Pwd.pl';\nmy $dbh = DBI->connect(\"DBI:mysql:TEST\", 'TEST', $mysqlPasswd, {'RaiseError' => 1} );\nuse Storable qw(nfreeze thaw);\n\nmy $router = Path::Router->new;\n$router->add_route( '/'         => target => \\&root );\n$router->add_route( '/download'   => target => \\&download );\n\n# now create the Plack app\nmy $app = Plack::App::Path::Router::PSGI->new( router => $router );\nuse File::RotateLogs;\nmy $rotatelogs = File::RotateLogs->new(\n    logfile => './log/access_log.%Y%m%d',\n    linkname => './log/access_log',\n    maxage => 86400 * 30, #30day\n);\n\nuse Log::Dispatch;\nmy $logger = Log::Dispatch->new;\nuse Log::Dispatch::Config;\nLog::Dispatch::Config->configure('./log.conf');\nmy $dispatcher = Log::Dispatch::Config->instance();\n$dispatcher->info('\u518d\u8d77\u52d5');\n\nbuilder {\n    if ( !$app && ( my $error = $@ || $! )) { die $error; }\n    enable \"Plack::Middleware::Static\",  path => qr{^/static}, root => './common';\n    enable 'AccessLog', logger => sub { $rotatelogs->print(@_) };\n    enable 'LogErrors', logger => sub {\n        my $args = shift;\n        $logger->log(%$args);\n    };\n\n    $app->to_app();\n};\n\n#===============================================================================\nsub download {\n    my $env = shift;\n    my $req = Plack::Request->new($env);\n    my $ip = $env->{'REMOTE_ADDR'};\n    my $sth = $dbh->prepare('SELECT * FROM Counter WHERE ip_address = ?')  or die $dbh->errstr;\n    $sth->execute($ip) or die $sth->errstr;\n    my $hash = $sth->fetchrow_hashref();\n    $sth->finish;\n    \n    my $count = thaw( $hash->{'referer'} );\n    my $ref = $req->query_parameters->{'ref'};\n    $count->{ $ref }++ if exists $count->{ $ref };\n    $count->{ 'total' }++ if $ref ne 'total';\n    $hash->{'referer'} = nfreeze($count);\n    \n    $sth = $dbh->prepare('UPDATE Counter SET referer = ? WHERE ip_address = ?')  or die $dbh->errstr;\n    $sth->execute( $hash->{'referer'}, $ip ) or die $sth->errstr;\n    $sth->finish;\n\n    use Text::vCard;\n    my $vc = Text::vCard->new( { 'encoding_out' => 'none', } );\n    $vc->version('4.0');\n    my $vcf = $vc->as_string();\n    $dispatcher->info(\"\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9 $ip:ref=$ref is $count->{ $ref }\" );\n    $dispatcher->info(\"\u7dcf\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9 $ip is $count->{ 'total' }\" );\n    response( $env, $vcf,\n        -MIME => 'text/vcard; charset=utf-8', -headers => {\n            'Content-Disposition' => qq|attachment; filename=\"test.vcf\"|,\n            'Content-Length' => length $vcf,\n            'Pragma' => 'no-cache',\n            'Cache-Control' => 'private, no-store, no-cache, must-revalidate',\n        }\n    );\n}\n\nsub root {\n    my $env = shift;\n    my $req = Plack::Request->new($env);\n    my %param = %{ $req->query_parameters };\n    my $render;\n\n    my $sth = $dbh->prepare(\"INSERT INTO Counter VALUES(?,?)\") or die $dbh->errstr;\n    $sth->execute(\n        $env->{'REMOTE_ADDR'},\n        nfreeze({ total => 0, reload => 0 }),\n    ) or die $dbh->errstr;\n    $sth->finish;\n\n    $dispatcher->info('\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u306e\u521d\u671f\u5316\u306b\u6210\u529f');\n\n    # \u4ee5\u4e0b\u753b\u9762\u8868\u793a\n    $render = $tx->render( 'template.tx');\n    response( $env, $render );\n}\n\nsub response {\n    my $env = shift;\n    my $body = shift || croak 'empty body!';\n    my %ARG = @_;\n    my $status = $ARG{'-status'} || 200;\n    croak \"unvalid status: $status\" if $status !~ /\\d{3}/s;\n    my $mime = $ARG{'-MIME'} || 'text/html; charset=utf-8';\n    my $headers = $ARG{'-headers'} || {};\n    my $req = Plack::Request->new($env);\n    my $res = $req->new_response($status);\n    $res->content_type($mime);\n    $res->header({\n        'Set-Cookie' => $session->cookie,\n        %$headers\n    });\n    $res->body($body);\n    $res->finalize;\n}\n\n__DATA__\n\n@@ template.tx\n    <meta charset=\"UTF-8\">\n\n    <h2>\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u521d\u671f\u5316\u5b8c\u4e86</h2>\n    <p><a href=\"/download?ref=reload\">\u3053\u3061\u3089\u3092\u30af\u30ea\u30c3\u30af\u3057\u3066\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9</a></p>\n```\n##\u30a8\u30e9\u30fc\u306e\u6982\u8981\n\u307e\u3041\u9069\u5f53\u306b\u7a7a\u306evCard\u30d5\u30a1\u30a4\u30eb\u3092\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3055\u305b\u308b\u3093\u3060\u304c\u3001\n\n```error.log\n[Fri Oct 21 21:26:08 2016] [info] \u518d\u8d77\u52d5 \nHTTP::Server::PSGI: Accepting connections at http://0:5000/\n[Fri Oct 21 21:39:16 2016] [info] \u30c0\u30a6\u30f3\u30ed\u30fc\u30c9 127.0.0.1:ref=reload is 11 \n[Fri Oct 21 21:39:16 2016] [info] \u7dcf\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9 127.0.0.1 is 13 \n[Fri Oct 21 21:39:16 2016] [info] \u30c0\u30a6\u30f3\u30ed\u30fc\u30c9 127.0.0.1:ref=reload is 12 \n[Fri Oct 21 21:39:16 2016] [info] \u7dcf\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9 127.0.0.1 is 14 ```\n```\n\u2191sleipnil\u304b\u3089\u306e\u30a2\u30af\u30bb\u30b9\u3067\u306f\u4e0d\u601d\u8b70\u306a\u3053\u3068\u306b1\u30a2\u30af\u30bb\u30b9\u306b\u3064\u304d2\u56de\u3001```sub download```\u304c\u547c\u3070\u308c\u3066\u308b\u3063\u307d\u3044\u3002\u3057\u304b\u3057\u30a2\u30af\u30bb\u30b9\u30ed\u30b0\u306b\u306f1\u30af\u30ea\u30c3\u30af\u306b\u3064\u304dGET\u30ea\u30af\u30a8\u30b9\u30c81\u56de\u9650\u308a\u3002\n\n##\uff0811/2\u8ffd\u8a18\uff09Chorome,Safari\u3067\u306e\u691c\u8a3c\u7d50\u679c\n**\u6b63\u5e38\u306b\u52d5\u4f5c\u3057\u307e\u3057\u305f\u3002**\u304a\u9a12\u304c\u305b\u3057\u307e\u3057\u305f\u3002\n", "tags": ["\u30d0\u30b0", "Sleipnir"]}