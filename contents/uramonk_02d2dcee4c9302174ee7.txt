{"context": "Rx\u3067\u306e\u51e6\u7406\u5185\u3067\u4f55\u304b\u3057\u3089\u306e\u30a8\u30e9\u30fc\u304c\u767a\u751f\u3057\u305f\u5834\u5408\u306b\u4e00\u5b9a\u6642\u9593\u5f85\u6a5f\u3057\u3066\u304b\u3089\u4e00\u5b9a\u56de\u6570\u30ea\u30c8\u30e9\u30a4\u3057\u3001\u305d\u308c\u3067\u3082\u30a8\u30e9\u30fc\u306e\u5834\u5408\u306f\u30a8\u30e9\u30fc\u3092\u6d41\u3059\u3068\u3044\u3063\u305f\u51e6\u7406\u3092\u3057\u307e\u3059\u3002\n\u6bce\u56de\u66f8\u304d\u65b9\u3092\u5fd8\u308c\u3066\u3057\u307e\u3046\u306e\u3067\u4e0b\u8a18\u306b\u6b8b\u3057\u307e\u3059\u3002\n\u4e0b\u8a18\u306eretryWhenError()\u30e1\u30bd\u30c3\u30c9\u3092rx\u306eretryWhen\u306e\u5f15\u6570\u306b\u3044\u308c\u308c\u3070OK\u3067\u3059\u3002\nprivate fun retryWhenError(): Function<Observable<out Throwable>, Observable<Any>> {\n    return Function { observable ->\n        observable.zipWith(Observable.range(0, N + 1),\n                BiFunction<Throwable, Int, Pair<Throwable, Int>> { throwable, integer ->\n                    Pair(throwable, integer)\n                })\n                .flatMap<Any> { throwableIntegerPair ->\n                    if (throwableIntegerPair.second < N) {\n                        Observable.timer(X, TimeUnit.SECONDS)\n                    } else {\n                        Observable.error(throwableIntegerPair.first)\n                    }\n                }\n    }\n}\n\n\n\nRx\u3067\u306e\u51e6\u7406\u5185\u3067\u4f55\u304b\u3057\u3089\u306e\u30a8\u30e9\u30fc\u304c\u767a\u751f\u3057\u305f\u5834\u5408\u306b\u4e00\u5b9a\u6642\u9593\u5f85\u6a5f\u3057\u3066\u304b\u3089\u4e00\u5b9a\u56de\u6570\u30ea\u30c8\u30e9\u30a4\u3057\u3001\u305d\u308c\u3067\u3082\u30a8\u30e9\u30fc\u306e\u5834\u5408\u306f\u30a8\u30e9\u30fc\u3092\u6d41\u3059\u3068\u3044\u3063\u305f\u51e6\u7406\u3092\u3057\u307e\u3059\u3002\n\n\u6bce\u56de\u66f8\u304d\u65b9\u3092\u5fd8\u308c\u3066\u3057\u307e\u3046\u306e\u3067\u4e0b\u8a18\u306b\u6b8b\u3057\u307e\u3059\u3002\n\n\u4e0b\u8a18\u306e`retryWhenError()`\u30e1\u30bd\u30c3\u30c9\u3092rx\u306e`retryWhen`\u306e\u5f15\u6570\u306b\u3044\u308c\u308c\u3070OK\u3067\u3059\u3002\n\n```kotlin\nprivate fun retryWhenError(): Function<Observable<out Throwable>, Observable<Any>> {\n    return Function { observable ->\n        observable.zipWith(Observable.range(0, N + 1),\n                BiFunction<Throwable, Int, Pair<Throwable, Int>> { throwable, integer ->\n                    Pair(throwable, integer)\n                })\n                .flatMap<Any> { throwableIntegerPair ->\n                    if (throwableIntegerPair.second < N) {\n                        Observable.timer(X, TimeUnit.SECONDS)\n                    } else {\n                        Observable.error(throwableIntegerPair.first)\n                    }\n                }\n    }\n}\n\n```\n", "tags": ["Kotlin", "Android", "RxJava"]}