{"tags": ["C++", "Lua", "UserData", "ffi", "module"], "context": " More than 1 year has passed since last update.\n\n\u76ee\u7684\n\u524d\u56de\u6295\u7a3f\u3057\u305f\u300cC++ & Lua : C++ \u306e\u30cd\u30a4\u30c6\u30a3\u30d6\u30c7\u30fc\u30bf\u578b\u3092 Lua \u3078\u63d0\u4f9b\u3057\u3001\u64cd\u4f5c\u3059\u308b\u4f8b\u300d \u3067\u306f\u305d\u308c\u306b\u5fc5\u8981\u306a\u5b9f\u88c5\u3092\u30b3\u30f3\u30d1\u30af\u30c8\u306b\u76f4\u63a5\u6e08\u307e\u305b\u305f\u3002\n\u3053\u306e\u8a18\u4e8b\u3067\u306f\u524d\u56de\u306e\u5185\u5bb9\u3092\u30d8\u30eb\u30d1\u30fc\u30e9\u30a4\u30d6\u30e9\u30ea\u30fc\u3068\u3057\u3066\u6574\u7406\u3059\u308b\u5b9f\u88c5\u4f8b\u3092\u793a\u3059\u3002\uff08\u30d8\u30eb\u30d1\u30fc\u30e9\u30a4\u30d6\u30e9\u30ea\u30fc\u5b9f\u88c5\u306e\u6307\u91dd\u3068\u3059\u308b\u4f8b\u3067\u3042\u308a\u3001\u3042\u304f\u307e\u3067\u3082\u5b9f\u7528\u7684\u306a\u30e9\u30a4\u30d6\u30e9\u30ea\u30fc\u3092\u5b9f\u88c5\u3059\u308b\u305f\u3081\u306e\u8db3\u639b\u304b\u308a\u3084\u985e\u4f3c\u306e\u30b3\u30fc\u30c9\u4f8b\u306b\u3064\u3044\u3066\u7406\u89e3\u3092\u6df1\u3081\u308b\u76ee\u7684\u306e\u7a0b\u5ea6\u306b\u7559\u3081\u308b\u3002\uff09\n\n\u5b9f\u88c5\u4f8b\n#include <lua.hpp>\n#include <iostream>\n#include <vector>\n#include <new>\n#include <mutex>\n#include <stdexcept>\n\nnamespace usagi\n{\n  namespace lua\n  {\n    using function_definitions_type = std::vector< luaL_Reg >;\n\n    struct meta_definition_type\n    {\n      std::string               name;\n      function_definitions_type function_definitions;\n    };\n\n    using meta_definitions_type = std::vector< meta_definition_type >;\n\n    template < typename T, typename ... TS >\n    auto make_userdata( lua_State* raw_state, const std::string& name, TS ... ts )\n    {\n      const auto p = lua_newuserdata( raw_state, sizeof( T ) );\n      luaL_setmetatable( raw_state, name.c_str() );\n      return new( p ) T( ts ... );\n    }\n\n    template < typename T >\n    auto check_userdata( lua_State* raw_state, const std::string& name, const int narg = 1 )\n    {\n      if ( const auto p = luaL_checkudata( raw_state, narg, name.c_str() ) )\n        return reinterpret_cast< T* >( p );\n      throw std::runtime_error( \"check_userdata was failed.\" );\n    }\n\n    namespace detail\n    {\n      namespace require\n      {\n        const function_definitions_type* pfs;\n        const meta_definitions_type*     pms;\n        std::mutex                       m;\n      }\n    }\n\n    auto require\n    ( lua_State* raw_state\n    , const std::string& name\n    , const function_definitions_type& function_definitions\n    , const meta_definitions_type& meta_definitions = { }\n    , const bool is_global = true\n    )\n    {\n      std::lock_guard< decltype( detail::require::m ) > lock( detail::require::m );\n      detail::require::pfs = &function_definitions;\n      detail::require::pms = &meta_definitions;\n\n      luaL_requiref\n      ( raw_state\n      , name.c_str()\n      , []( auto raw_state )\n        {\n          function_definitions_type function_definitions_copy( *detail::require::pfs );\n          function_definitions_copy.resize( function_definitions_copy.size() + 1 );\n\n          luaL_checkversion( raw_state );\n          lua_createtable( raw_state, 0, function_definitions_copy.size() );\n          luaL_setfuncs( raw_state, function_definitions_copy.data(), 0 );\n\n          for ( auto meta_definition : *detail::require::pms )\n          {\n            function_definitions_type meta_function_definitions_copy( meta_definition.function_definitions );\n            meta_function_definitions_copy.resize( meta_function_definitions_copy.size() + 1 );\n\n            luaL_newmetatable( raw_state, meta_definition.name.c_str() );\n\n            luaL_checkversion( raw_state );\n            lua_createtable( raw_state, 0, meta_function_definitions_copy.size() );\n            luaL_setfuncs( raw_state, meta_function_definitions_copy.data(), 0 );\n\n            lua_setfield( raw_state, -2, \"__index\" );\n\n            lua_pop( raw_state, 1);\n          }\n\n          return 1;\n        }\n      , static_cast< int >( is_global )\n      );\n\n      lua_pop( raw_state, 1 );\n    }\n  }\n}\n\nauto main() -> int\n{\n  const auto raw_state = luaL_newstate();\n  luaL_openlibs( raw_state );\n\n  usagi::lua::require\n  ( raw_state\n  , \"usagi\"\n  , { { \"make_x\"\n      , []( auto raw_state )\n        { std::cout << \"usagi.make_x : \" << usagi::lua::make_userdata<int>( raw_state, \"x_type\", static_cast<int>( luaL_checkinteger( raw_state, 1 ) ) ) << \"\\n\"; return 1; }\n      }\n    , { \"make_y\"\n      , []( auto raw_state )\n        { std::cout << \"usagi.make_y : \" << usagi::lua::make_userdata<int>( raw_state, \"y_type\", static_cast<int>( luaL_checkinteger( raw_state, 1 ) ) ) << \"\\n\"; return 1; }\n      }\n    }\n  , { { \"x_type\", { { \"hello\", []( auto raw_state ) { std::cout << \"x_type.hello : \" << *usagi::lua::check_userdata<int>( raw_state, \"x_type\" ) << \"\\n\"; return 0; } } } }\n    , { \"y_type\", { { \"hello\", []( auto raw_state ) { std::cout << \"y_type.hello : \" << *usagi::lua::check_userdata<int>( raw_state, \"y_type\" ) << \"\\n\"; return 0; } } } }\n    }\n  );\n\n  luaL_dostring\n  ( raw_state\n  , u8R\"(\n      print( \"hello, lua\" )\n      local x = usagi.make_x( 123 )\n      local y = usagi.make_y( 456 )\n      x:hello();\n      y:hello();\n    )\"\n  );\n\n  lua_close( raw_state );\n}\n\n\n\u5b9f\u884c\u7d50\u679c\nhello, lua\nusagi.make_x : 0x16443e8\nusagi.make_y : 0x1644428\nx_type.hello : 123\ny_type.hello : 456\n\n\nWandbox\n\nhttp://melpon.org/wandbox/permlink/BpTm3y7NeHyjayKa\n\n\n\u6982\u8aac\n\n\nusagi::lua \u540d\u524d\u7a7a\u9593\u306b Lua \u5236\u5fa1\u306e\u305f\u3081\u306e\u30d8\u30eb\u30d1\u30fc\u30e9\u30a4\u30d6\u30e9\u30ea\u30fc\u3092\u69cb\u7bc9\u3059\u308b\u3068\u4eee\u5b9a\n\nusagi::lua::require \u306b\u3088\u308a Lua \u5074\u306b\u30e2\u30b8\u30e5\u30fc\u30eb\u7684\u306a\u6a5f\u80fd\u3068\u30e6\u30fc\u30b6\u30fc\u5b9a\u7fa9\u578b\u3092\u5185\u5305\u53ef\u80fd\u306a\u30e6\u30fc\u30b6\u30fc\u30c7\u30fc\u30bf\u578b\u3092\u307e\u3068\u3081\u3066\u63d0\u4f9b\u3059\u308b\n\n\n\u7b2c2\u4eee\u5f15\u6570 name : Lua \u5074\u3078\u4e0e\u3048\u308b\u30e2\u30b8\u30e5\u30fc\u30eb\u306e\u540d\u79f0\n\u7b2c3\u4eee\u5f15\u6570 function_definitions : Lua \u30e2\u30b8\u30e5\u30fc\u30eb\u3078\u76f4\u63a5\u5b9f\u88c5\u3059\u308b\u30e1\u30f3\u30d0\u30fc\u95a2\u6570\u7fa4\u306b\u76f8\u5f53\u3059\u308b\u5b9a\u7fa9\u7fa4\n\u7b2c4\u4eee\u5f15\u6570 meta_definitions : Lua \u30e2\u30b8\u30e5\u30fc\u30eb\u304c\u63d0\u4f9b\u3059\u308b\u30e6\u30fc\u30b6\u30fc\u5b9a\u7fa9\u578b\u3068\u305d\u306e\u30e1\u30f3\u30d0\u30fc\u95a2\u6570\u7fa4\u306b\u76f8\u5f53\u3059\u308b\u5b9a\u7fa9\u7fa4\n\u7b2c5\u4eee\u5f15\u6570 is_global : \u30e2\u30b8\u30e5\u30fc\u30eb\u3092\u30b0\u30ed\u30fc\u30d0\u30eb\u5909\u6570\u306b\u767b\u9332\u3059\u308b\u304b\u5426\u304b\n\n\n\nusagi::lua::make_userdata \u30d8\u30eb\u30d1\u30fc\u95a2\u6570\u306b\u3088\u308a C++ \u306e\u4efb\u610f\u306e\u578b\u3092\u30d0\u30a4\u30f3\u30c7\u30a3\u30f3\u30b0\u3059\u308b Lua \u30e6\u30fc\u30b6\u30fc\u30c7\u30fc\u30bf\u3092\u7c21\u4fbf\u306b\u5b9a\u7fa9\u3067\u304d\u308b\n\nusagi::lua::check_userdata \u30d8\u30eb\u30d1\u30fc\u95a2\u6570\u306b\u3088\u308a Lua \u30e6\u30fc\u30b6\u30fc\u30c7\u30fc\u30bf\u306b\u30d0\u30a4\u30f3\u30c7\u30a3\u30f3\u30b0\u3055\u308c\u305f C++ \u306e\u30c7\u30fc\u30bf\u578b\u3092\u7c21\u4fbf\u306b\u53d6\u5f97\u3067\u304d\u308b\n\n\n\u30c8\u30ea\u30c3\u30af\n\n\nusagi::lua::require \u306f usagi::lua::detail \u540d\u524d\u7a7a\u9593\u306b\u5b9a\u7fa9\u3057\u305f\u88dc\u52a9\u7684\u306a\u5927\u57df\u5909\u6570\u3092\u7528\u3044\u3066\u672c\u6765\u30b9\u30c6\u30fc\u30c8\u30ec\u30b9\u306a\u30d5\u30a1\u30f3\u30af\u30bf\u30fc\u3057\u304b\u6271\u3048\u306a\u3044 Lua \u306e C API \u306e lua_CFunction \u578b\u306b\u4e0e\u3048\u308b\u30d5\u30a1\u30f3\u30af\u30bf\u30fc\u306b\u9593\u63a5\u7684\u306b\u30b9\u30c6\u30fc\u30c8\u3092\u4e0e\u3048 function_definitions \u3068 meta_definitions \u3092\u53c2\u7167\u305b\u3057\u3081\u3066\u3044\u308b\u3002\n\nluaL_newlib \u306f\u30de\u30af\u30ed\u306b\u3088\u308b\u4fbf\u5229\u306a\u30d8\u30eb\u30d1\u30fc API \u3067\u306f\u3042\u308b\u304c\u3001\u3053\u308c\u3092\u4f7f\u3046\u3068\u5c55\u958b\u3055\u308c\u308b luaL_newlibtable \u30de\u30af\u30ed\u304c\u30b5\u30a4\u30ba\u4ed8\u304d\u306e\u914d\u5217\uff08int a[]\u306e\u3088\u3046\u306a\uff09\u3092\u524d\u63d0\u3068\u3057\u3066\u3057\u3066\u3044\u308b\u305f\u3081\u3001C++ \u7684\u306b\u306f\u898b\u65b9\u306b\u3088\u3063\u3066\u3042\u307e\u308a\u7f8e\u3057\u304f\u306a\u3044\u3057\u3001\u30e6\u30fc\u30b6\u30fc\u304c\u3053\u306e\u914d\u5217\u306b\u660e\u793a\u7684\u306b\u3044\u308f\u3086\u308b\"\u756a\u5175\"\uff08\u914d\u5217\u672b\u5c3e\u306e nullptr \u5024\u306e\u3088\u3046\u306a\uff09\u3092\u4e0e\u3048\u306a\u304f\u3066\u306f\u306a\u3089\u306a\u3044\u4e8b\u3082\u898b\u65b9\u306b\u3088\u3063\u3066\u306f\u3042\u307e\u308a\u7f8e\u3057\u304f\u306a\u3044\u3002\u305d\u3053\u3067\u4f4e\u30ec\u30d9\u30eb API \u3092\u76f4\u63a5\u5c55\u958b\u3057\u3066\u7528\u3044\u308b\u4e8b\u3067\u3001\u898b\u65b9\u306b\u3088\u3063\u3066\u306f\u7f8e\u3057\u3044 C++ \u30e9\u30a4\u30d6\u30e9\u30ea\u30fc\u306e\u305d\u3068\u3063\u3064\u3089\u3092\u6574\u3048\u3066\u3044\u308b\u3002\n\n\n\u300c\u898b\u65b9\u306b\u3088\u3063\u3066\u306f\u300d\u3068\u3057\u3064\u3053\u304f\u66f8\u3044\u305f\u304c\u3001\u3053\u306e\u5b9f\u88c5\u4f8b\u306f\u660e\u3089\u304b\u306b\u30c7\u30fc\u30bf\u64cd\u4f5c\u4e0a\u306f\u4e0d\u8981\u306a\u30aa\u30fc\u30d0\u30fc\u30d8\u30c3\u30c9\u304c\u767a\u751f\u3059\u308b\u304b\u3089\u3042\u3089\u3086\u308b\u8996\u70b9\u3067\u7f8e\u3057\u3044\u3068\u306f\u8a00\u3044\u96e3\u3044\u304c\u3001\u4f4e\u30ec\u30d9\u30eb API \u3092\u5c01\u5165\u3057\u5229\u4fbf\u6027\u3068\u53ef\u8aad\u6027\u306e\u826f\u3044\u30e6\u30fc\u30b6\u30fc\u30b3\u30fc\u30c9\u3092\u8a18\u8ff0\u3059\u308b\u305f\u3081\u306e\u30e9\u30a4\u30d6\u30e9\u30ea\u30fc\u3068\u3057\u3066\u8003\u3048\u308b\u3068\u3001\u7279\u306b\u3053\u306e\u6a5f\u80fd\u306f\u4e00\u822c\u306b\u7e70\u308a\u8fd4\u3057\u3066\u5b9f\u884c\u3055\u308c\u305f\u308a\u3001\u30e6\u30fc\u30b6\u30fc\u3092\u8457\u3057\u304f\u5f85\u305f\u305b\u308b\u307b\u3069\u306e\u91cd\u3044\u51e6\u7406\u3067\u306f\u7121\u3044\u4e8b\u3082\u3042\u308a\u3001\u898b\u65b9\u306b\u3088\u3063\u3066\u306f\u3053\u306e\u5b9f\u88c5\u3082\u307e\u305f\u7f8e\u3057\u304f\u3082\u3042\u308a\u3048\u308b\u3002\n\n\n\n#define luaL_newlibtable(L,l)        \\\n  lua_createtable(L, 0, sizeof(l)/sizeof((l)[0]) - 1)\n\n#define luaL_newlib(L,l)  \\\n  (luaL_checkversion(L), luaL_newlibtable(L,l), luaL_setfuncs(L,l,0))\n\ntypedef struct luaL_Reg {\n  const char *name;\n  lua_CFunction func;\n} luaL_Reg;\n\nLUALIB_API void (luaL_setfuncs) (lua_State *L, const luaL_Reg *l, int nup);\n\n# \u76ee\u7684\n\n\u524d\u56de\u6295\u7a3f\u3057\u305f[\u300cC++ & Lua : C++ \u306e\u30cd\u30a4\u30c6\u30a3\u30d6\u30c7\u30fc\u30bf\u578b\u3092 Lua \u3078\u63d0\u4f9b\u3057\u3001\u64cd\u4f5c\u3059\u308b\u4f8b\u300d](http://qiita.com/usagi/items/1e9f759b1822e4eeab93) \u3067\u306f\u305d\u308c\u306b\u5fc5\u8981\u306a\u5b9f\u88c5\u3092\u30b3\u30f3\u30d1\u30af\u30c8\u306b\u76f4\u63a5\u6e08\u307e\u305b\u305f\u3002\n\n\u3053\u306e\u8a18\u4e8b\u3067\u306f\u524d\u56de\u306e\u5185\u5bb9\u3092\u30d8\u30eb\u30d1\u30fc\u30e9\u30a4\u30d6\u30e9\u30ea\u30fc\u3068\u3057\u3066\u6574\u7406\u3059\u308b\u5b9f\u88c5\u4f8b\u3092\u793a\u3059\u3002\uff08\u30d8\u30eb\u30d1\u30fc\u30e9\u30a4\u30d6\u30e9\u30ea\u30fc\u5b9f\u88c5\u306e\u6307\u91dd\u3068\u3059\u308b\u4f8b\u3067\u3042\u308a\u3001\u3042\u304f\u307e\u3067\u3082\u5b9f\u7528\u7684\u306a\u30e9\u30a4\u30d6\u30e9\u30ea\u30fc\u3092\u5b9f\u88c5\u3059\u308b\u305f\u3081\u306e\u8db3\u639b\u304b\u308a\u3084\u985e\u4f3c\u306e\u30b3\u30fc\u30c9\u4f8b\u306b\u3064\u3044\u3066\u7406\u89e3\u3092\u6df1\u3081\u308b\u76ee\u7684\u306e\u7a0b\u5ea6\u306b\u7559\u3081\u308b\u3002\uff09\n\n# \u5b9f\u88c5\u4f8b\n\n```cpp\n#include <lua.hpp>\n#include <iostream>\n#include <vector>\n#include <new>\n#include <mutex>\n#include <stdexcept>\n\nnamespace usagi\n{\n  namespace lua\n  {\n    using function_definitions_type = std::vector< luaL_Reg >;\n    \n    struct meta_definition_type\n    {\n      std::string               name;\n      function_definitions_type function_definitions;\n    };\n    \n    using meta_definitions_type = std::vector< meta_definition_type >;\n    \n    template < typename T, typename ... TS >\n    auto make_userdata( lua_State* raw_state, const std::string& name, TS ... ts )\n    {\n      const auto p = lua_newuserdata( raw_state, sizeof( T ) );\n      luaL_setmetatable( raw_state, name.c_str() );\n      return new( p ) T( ts ... );\n    }\n    \n    template < typename T >\n    auto check_userdata( lua_State* raw_state, const std::string& name, const int narg = 1 )\n    {\n      if ( const auto p = luaL_checkudata( raw_state, narg, name.c_str() ) )\n        return reinterpret_cast< T* >( p );\n      throw std::runtime_error( \"check_userdata was failed.\" );\n    }\n\n    namespace detail\n    {\n      namespace require\n      {\n        const function_definitions_type* pfs;\n        const meta_definitions_type*     pms;\n        std::mutex                       m;\n      }\n    }\n\n    auto require\n    ( lua_State* raw_state\n    , const std::string& name\n    , const function_definitions_type& function_definitions\n    , const meta_definitions_type& meta_definitions = { }\n    , const bool is_global = true\n    )\n    {\n      std::lock_guard< decltype( detail::require::m ) > lock( detail::require::m );\n      detail::require::pfs = &function_definitions;\n      detail::require::pms = &meta_definitions;\n      \n      luaL_requiref\n      ( raw_state\n      , name.c_str()\n      , []( auto raw_state )\n        {\n          function_definitions_type function_definitions_copy( *detail::require::pfs );\n          function_definitions_copy.resize( function_definitions_copy.size() + 1 );\n          \n          luaL_checkversion( raw_state );\n          lua_createtable( raw_state, 0, function_definitions_copy.size() );\n          luaL_setfuncs( raw_state, function_definitions_copy.data(), 0 );\n          \n          for ( auto meta_definition : *detail::require::pms )\n          {\n            function_definitions_type meta_function_definitions_copy( meta_definition.function_definitions );\n            meta_function_definitions_copy.resize( meta_function_definitions_copy.size() + 1 );\n            \n            luaL_newmetatable( raw_state, meta_definition.name.c_str() );\n            \n            luaL_checkversion( raw_state );\n            lua_createtable( raw_state, 0, meta_function_definitions_copy.size() );\n            luaL_setfuncs( raw_state, meta_function_definitions_copy.data(), 0 );\n            \n            lua_setfield( raw_state, -2, \"__index\" );\n            \n            lua_pop( raw_state, 1);\n          }\n          \n          return 1;\n        }\n      , static_cast< int >( is_global )\n      );\n      \n      lua_pop( raw_state, 1 );\n    }\n  }\n}\n\nauto main() -> int\n{\n  const auto raw_state = luaL_newstate();\n  luaL_openlibs( raw_state );\n  \n  usagi::lua::require\n  ( raw_state\n  , \"usagi\"\n  , { { \"make_x\"\n      , []( auto raw_state )\n        { std::cout << \"usagi.make_x : \" << usagi::lua::make_userdata<int>( raw_state, \"x_type\", static_cast<int>( luaL_checkinteger( raw_state, 1 ) ) ) << \"\\n\"; return 1; }\n      }\n    , { \"make_y\"\n      , []( auto raw_state )\n        { std::cout << \"usagi.make_y : \" << usagi::lua::make_userdata<int>( raw_state, \"y_type\", static_cast<int>( luaL_checkinteger( raw_state, 1 ) ) ) << \"\\n\"; return 1; }\n      }\n    }\n  , { { \"x_type\", { { \"hello\", []( auto raw_state ) { std::cout << \"x_type.hello : \" << *usagi::lua::check_userdata<int>( raw_state, \"x_type\" ) << \"\\n\"; return 0; } } } }\n    , { \"y_type\", { { \"hello\", []( auto raw_state ) { std::cout << \"y_type.hello : \" << *usagi::lua::check_userdata<int>( raw_state, \"y_type\" ) << \"\\n\"; return 0; } } } }\n    }\n  );\n  \n  luaL_dostring\n  ( raw_state\n  , u8R\"(\n      print( \"hello, lua\" )\n      local x = usagi.make_x( 123 )\n      local y = usagi.make_y( 456 )\n      x:hello();\n      y:hello();\n    )\"\n  );\n  \n  lua_close( raw_state );\n}\n```\n\n## \u5b9f\u884c\u7d50\u679c\n\n```\nhello, lua\nusagi.make_x : 0x16443e8\nusagi.make_y : 0x1644428\nx_type.hello : 123\ny_type.hello : 456\n```\n\n## Wandbox\n\n- http://melpon.org/wandbox/permlink/BpTm3y7NeHyjayKa\n\n# \u6982\u8aac\n\n- `usagi::lua` \u540d\u524d\u7a7a\u9593\u306b Lua \u5236\u5fa1\u306e\u305f\u3081\u306e\u30d8\u30eb\u30d1\u30fc\u30e9\u30a4\u30d6\u30e9\u30ea\u30fc\u3092\u69cb\u7bc9\u3059\u308b\u3068\u4eee\u5b9a\n- `usagi::lua::require` \u306b\u3088\u308a Lua \u5074\u306b\u30e2\u30b8\u30e5\u30fc\u30eb\u7684\u306a\u6a5f\u80fd\u3068\u30e6\u30fc\u30b6\u30fc\u5b9a\u7fa9\u578b\u3092\u5185\u5305\u53ef\u80fd\u306a\u30e6\u30fc\u30b6\u30fc\u30c7\u30fc\u30bf\u578b\u3092\u307e\u3068\u3081\u3066\u63d0\u4f9b\u3059\u308b\n    - \u7b2c2\u4eee\u5f15\u6570 `name` : Lua \u5074\u3078\u4e0e\u3048\u308b\u30e2\u30b8\u30e5\u30fc\u30eb\u306e\u540d\u79f0\n    - \u7b2c3\u4eee\u5f15\u6570 `function_definitions` : Lua \u30e2\u30b8\u30e5\u30fc\u30eb\u3078\u76f4\u63a5\u5b9f\u88c5\u3059\u308b\u30e1\u30f3\u30d0\u30fc\u95a2\u6570\u7fa4\u306b\u76f8\u5f53\u3059\u308b\u5b9a\u7fa9\u7fa4\n    - \u7b2c4\u4eee\u5f15\u6570 `meta_definitions` : Lua \u30e2\u30b8\u30e5\u30fc\u30eb\u304c\u63d0\u4f9b\u3059\u308b\u30e6\u30fc\u30b6\u30fc\u5b9a\u7fa9\u578b\u3068\u305d\u306e\u30e1\u30f3\u30d0\u30fc\u95a2\u6570\u7fa4\u306b\u76f8\u5f53\u3059\u308b\u5b9a\u7fa9\u7fa4\n    - \u7b2c5\u4eee\u5f15\u6570 `is_global` : \u30e2\u30b8\u30e5\u30fc\u30eb\u3092\u30b0\u30ed\u30fc\u30d0\u30eb\u5909\u6570\u306b\u767b\u9332\u3059\u308b\u304b\u5426\u304b\n- `usagi::lua::make_userdata` \u30d8\u30eb\u30d1\u30fc\u95a2\u6570\u306b\u3088\u308a C++ \u306e\u4efb\u610f\u306e\u578b\u3092\u30d0\u30a4\u30f3\u30c7\u30a3\u30f3\u30b0\u3059\u308b Lua \u30e6\u30fc\u30b6\u30fc\u30c7\u30fc\u30bf\u3092\u7c21\u4fbf\u306b\u5b9a\u7fa9\u3067\u304d\u308b\n- `usagi::lua::check_userdata` \u30d8\u30eb\u30d1\u30fc\u95a2\u6570\u306b\u3088\u308a Lua \u30e6\u30fc\u30b6\u30fc\u30c7\u30fc\u30bf\u306b\u30d0\u30a4\u30f3\u30c7\u30a3\u30f3\u30b0\u3055\u308c\u305f C++ \u306e\u30c7\u30fc\u30bf\u578b\u3092\u7c21\u4fbf\u306b\u53d6\u5f97\u3067\u304d\u308b\n\n## \u30c8\u30ea\u30c3\u30af\n\n- `usagi::lua::require` \u306f `usagi::lua::detail` \u540d\u524d\u7a7a\u9593\u306b\u5b9a\u7fa9\u3057\u305f\u88dc\u52a9\u7684\u306a\u5927\u57df\u5909\u6570\u3092\u7528\u3044\u3066\u672c\u6765\u30b9\u30c6\u30fc\u30c8\u30ec\u30b9\u306a\u30d5\u30a1\u30f3\u30af\u30bf\u30fc\u3057\u304b\u6271\u3048\u306a\u3044 Lua \u306e C API \u306e `lua_CFunction` \u578b\u306b\u4e0e\u3048\u308b\u30d5\u30a1\u30f3\u30af\u30bf\u30fc\u306b\u9593\u63a5\u7684\u306b\u30b9\u30c6\u30fc\u30c8\u3092\u4e0e\u3048 `function_definitions` \u3068 `meta_definitions` \u3092\u53c2\u7167\u305b\u3057\u3081\u3066\u3044\u308b\u3002\n- `luaL_newlib` \u306f\u30de\u30af\u30ed\u306b\u3088\u308b\u4fbf\u5229\u306a\u30d8\u30eb\u30d1\u30fc API \u3067\u306f\u3042\u308b\u304c\u3001\u3053\u308c\u3092\u4f7f\u3046\u3068\u5c55\u958b\u3055\u308c\u308b `luaL_newlibtable` \u30de\u30af\u30ed\u304c\u30b5\u30a4\u30ba\u4ed8\u304d\u306e\u914d\u5217\uff08`int a[]`\u306e\u3088\u3046\u306a\uff09\u3092\u524d\u63d0\u3068\u3057\u3066\u3057\u3066\u3044\u308b\u305f\u3081\u3001C++ \u7684\u306b\u306f\u898b\u65b9\u306b\u3088\u3063\u3066\u3042\u307e\u308a\u7f8e\u3057\u304f\u306a\u3044\u3057\u3001\u30e6\u30fc\u30b6\u30fc\u304c\u3053\u306e\u914d\u5217\u306b\u660e\u793a\u7684\u306b\u3044\u308f\u3086\u308b\"\u756a\u5175\"\uff08\u914d\u5217\u672b\u5c3e\u306e `nullptr` \u5024\u306e\u3088\u3046\u306a\uff09\u3092\u4e0e\u3048\u306a\u304f\u3066\u306f\u306a\u3089\u306a\u3044\u4e8b\u3082\u898b\u65b9\u306b\u3088\u3063\u3066\u306f\u3042\u307e\u308a\u7f8e\u3057\u304f\u306a\u3044\u3002\u305d\u3053\u3067\u4f4e\u30ec\u30d9\u30eb API \u3092\u76f4\u63a5\u5c55\u958b\u3057\u3066\u7528\u3044\u308b\u4e8b\u3067\u3001\u898b\u65b9\u306b\u3088\u3063\u3066\u306f\u7f8e\u3057\u3044 C++ \u30e9\u30a4\u30d6\u30e9\u30ea\u30fc\u306e\u305d\u3068\u3063\u3064\u3089\u3092\u6574\u3048\u3066\u3044\u308b\u3002\n    - \u300c\u898b\u65b9\u306b\u3088\u3063\u3066\u306f\u300d\u3068\u3057\u3064\u3053\u304f\u66f8\u3044\u305f\u304c\u3001\u3053\u306e\u5b9f\u88c5\u4f8b\u306f\u660e\u3089\u304b\u306b\u30c7\u30fc\u30bf\u64cd\u4f5c\u4e0a\u306f\u4e0d\u8981\u306a\u30aa\u30fc\u30d0\u30fc\u30d8\u30c3\u30c9\u304c\u767a\u751f\u3059\u308b\u304b\u3089\u3042\u3089\u3086\u308b\u8996\u70b9\u3067\u7f8e\u3057\u3044\u3068\u306f\u8a00\u3044\u96e3\u3044\u304c\u3001\u4f4e\u30ec\u30d9\u30eb API \u3092\u5c01\u5165\u3057\u5229\u4fbf\u6027\u3068\u53ef\u8aad\u6027\u306e\u826f\u3044\u30e6\u30fc\u30b6\u30fc\u30b3\u30fc\u30c9\u3092\u8a18\u8ff0\u3059\u308b\u305f\u3081\u306e\u30e9\u30a4\u30d6\u30e9\u30ea\u30fc\u3068\u3057\u3066\u8003\u3048\u308b\u3068\u3001\u7279\u306b\u3053\u306e\u6a5f\u80fd\u306f\u4e00\u822c\u306b\u7e70\u308a\u8fd4\u3057\u3066\u5b9f\u884c\u3055\u308c\u305f\u308a\u3001\u30e6\u30fc\u30b6\u30fc\u3092\u8457\u3057\u304f\u5f85\u305f\u305b\u308b\u307b\u3069\u306e\u91cd\u3044\u51e6\u7406\u3067\u306f\u7121\u3044\u4e8b\u3082\u3042\u308a\u3001\u898b\u65b9\u306b\u3088\u3063\u3066\u306f\u3053\u306e\u5b9f\u88c5\u3082\u307e\u305f\u7f8e\u3057\u304f\u3082\u3042\u308a\u3048\u308b\u3002\n\n```cpp\n#define luaL_newlibtable(L,l)        \\\n  lua_createtable(L, 0, sizeof(l)/sizeof((l)[0]) - 1)\n\n#define luaL_newlib(L,l)  \\\n  (luaL_checkversion(L), luaL_newlibtable(L,l), luaL_setfuncs(L,l,0))\n\ntypedef struct luaL_Reg {\n  const char *name;\n  lua_CFunction func;\n} luaL_Reg;\n\nLUALIB_API void (luaL_setfuncs) (lua_State *L, const luaL_Reg *l, int nup);\n```\n"}