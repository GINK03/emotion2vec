{"context": "\n\n\u307e\u3048\u304a\u304d\n\u30ed\u30b0\u3092\u65e5\u4ed8\u5225\u30c6\u30fc\u30d6\u30eb(\u4f8b\uff1anginx_log_20160727\u3068\u304b)\u4f5c\u3063\u3066BigQuery\u306b\u6bce\u65e5\u3064\u3063\u3053\u3093\u3067\u308b\u5834\u5408\u306f\n-- standard\nselect ...\nfrom `dataset.nginx_log_*`\nwhere _table_suffix between '20160701' and '20160727'\n\n\u3068\u304b\u3084\u3063\u3066\u5fc5\u8981\u306a\u671f\u9593\u306e\u30c6\u30fc\u30d6\u30eb\u306b\u307e\u305f\u304c\u3063\u3066\u96c6\u8a08\u3067\u304d\u308b\u3093\u3067\u3059\u304c\uff0c\u305d\u3046\u3067\u306f\u306a\u3044\uff0c\u4f8b\u3048\u3070\u30b7\u30b9\u30c6\u30e0\u306e\u30e6\u30fc\u30b6\u60c5\u5831\u30c6\u30fc\u30d6\u30eb\u3092\u6bce\u65e5BigQuery\u306b\u3064\u3063\u3053\u3093\u3067\u65e5\u6b21\u3067\u306e\u5909\u5316\u3092\u77e5\u308a\u305f\u3044\u307f\u305f\u3044\u306a\u5834\u5408\uff0c\u65e5\u4ed8\u306e\u30ab\u30e9\u30e0\u304c\u306a\u304b\u3063\u305f\u308a\u3057\u3066\u3046\u307e\u304f\u3044\u304d\u307e\u305b\u3093\uff0e\nusers\u30c6\u30fc\u30d6\u30eb\u306bBQ\u306b\u30a4\u30f3\u30dd\u30fc\u30c8\u3057\u305f\u65e5\u7684\u306a\u30ab\u30e9\u30e0\u3092\u6301\u305f\u305b\u3066\u304a\u3051\u3070\u305d\u3044\u3064\u3092\u4f7f\u3063\u3066\u96c6\u8a08\u3067\u304d\u305d\u3046\u3067\u3059\u304c\uff0c\u305d\u3082\u305d\u3082\u65e5\u4ed8\u5225\u306b\u5206\u3051\u3066\u308b\u306e\u306b\u3055\u3089\u306b\u65e5\u4ed8\u3092\u6301\u305f\u305b\u308b\u306e\u304c\u7121\u99c4\u3063\u307d\u304f\u3066\u3064\u3089\u3044\uff0e\uff0e\uff0e\n\n\u3084\u3063\u305f\u3053\u3068\n\n\n__TABLES_SUMMARY__\u3092\u898b\u3066\u5fc5\u8981\u306asuffix\u3092\u53d6\u5f97\n\n\n\u305d\u3082\u305d\u3082BQ\u306eTableQuery\u3068\u304b\u4f7f\u3046\u3068\u5185\u90e8\u7684\u306b\u540c\u3058\u3053\u3068\u3092\u3084\u3063\u3066\u308b\u3089\u3057\u3044\u3067\u30591\n\n\n__TABLES_SUMMARY__\u306f\u5927\u6587\u5b57\u3058\u3083\u306a\u3044\u3068\u30c0\u30e1(\u82e5\u5e72\u30cf\u30de\u3063\u305f)\n\n\n\u76ee\u7684\u306e\u30c6\u30fc\u30d6\u30eb\u7fa4\u3068cross join\u3057\u3066\uff0c_table_suffix\u7591\u4f3c\u30ab\u30e9\u30e0\u3068\u4e00\u81f4\u3059\u308b\u3082\u306e\u3092\u7d5e\u308a\u3053\u3080\n\n\u305f\u3068\u3048\u3070\uff0cusers_*\u306exxx_status\u3054\u3068\u306e\u4eba\u6570\u3092\u3042\u308b\u671f\u9593\u3067\u65e5\u5225\u306b\u96c6\u8a08\u3057\u305f\u3044\u5834\u5408\u306f\u3053\u3093\u306a\u611f\u3058\uff0e\n-- standard\nWITH ts as\n  (SELECT substr(table_id, -8) t\n   FROM dataset.__TABLES_SUMMARY__\n   WHERE table_id LIKE 'users_%')\nSELECT parse_date('%Y%m%d', ts.t) t,\n       xxx_status,\n       count(id) c\nFROM `dataset.users_*`,\n     ts\nWHERE _table_suffix = ts.t\nGROUP BY t,\n         xxx_status\n\n\nWITH ts as(...) \u3092\u6bce\u56de\u66f8\u304f\u306e\u3057\u3093\u3069\u3044\u3093\u3067UDF\u306b\u3057\u3066\u307f\u308b\nStandard SQL\u3092\u4f7f\u3063\u3066\u308b\u3068\u305d\u3082\u305d\u3082UDF\u304c\u52d5\u304b\u306a\u3044\uff0e\uff0e?(\u7ba1\u7406\u30b3\u30f3\u30bd\u30fc\u30eb\u4e0a\u306e\u30a8\u30c7\u30a3\u30bf\u4e0a\u306e\u30b5\u30f3\u30d7\u30eb(passthrough)\u3082Standard\u3060\u3068\u52d5\u304b\u306a\u304b\u3063\u305f)\n// Example user-defined function, documentation: https://goo.gl/6KR8O0\n// Sample SQL: SELECT outputA, outputB FROM (passthrough(SELECT \"abc\" AS inputA, \"def\" AS inputB))\n\n\nfunction generate_date_series(row, emit) {\n    var start = new Date(row.start_date.substr(0, 4), row.start_date.substr(4, 2) - 1, row.start_date.substr(6, 2));\n    var end = new Date(row.end_date.substr(0, 4), row.end_date.substr(4, 2) - 1, row.end_date.substr(6, 2));\n    if (start.getTime() > end.getTime()) {\n      var tmp = start;\n      start = end;\n      end = tmp;\n    }\n    do {\n           emit({date: start});\n           var s = new Date(start.getUTCFullYear(), start.getUTCMonth(), start.getUTCDate() + 1);\n           start = s;\n    } while (end.getTime() >= start.getTime())\n}\n\nbigquery.defineFunction(\n  'generate_date_series',                           // Name of the function exported to SQL\n  ['start_date', 'end_date'],                    // Names of input columns\n  [{'name': 'date', 'type': 'timestamp'}  // Output schema\n  ],\n  generate_date_series                       // Reference to JavaScript UDF\n);\n\n\u30a8\u30e9\u30fc\u51e6\u7406\u3082\u306a\u306b\u3082\u306a\u3044\u304c\nSELECT FORMAT_UTC_USEC(date) \nFROM (generate_date_series(SELECT \"20160701\" AS start_date, \"20160710\" AS end_date))\n\n\u3068\u304b\u3084\u308c\u3070\u9023\u7d9a\u3059\u308b\u65e5\u4ed8\u306eTimestamp\u304c\u53d6\u5f97\u3067\u304d\u308b\uff0e\n\n\u3042\u3068\u304c\u304d\nLegacy SQL\u3060\u3068\u96e3\u3057\u3044\u304b\u306a\uff0e\uff0e\uff0e?\u601d\u3044\u3064\u3044\u305f\u3089\u8ffd\u8a18\u3057\u3088\u3046\uff0e\uff0e\uff0e\n\n\n\n\n\nhttp://stackoverflow.com/a/22735031\u00a0\u21a9\n\n\n\n# \u307e\u3048\u304a\u304d\n\u30ed\u30b0\u3092\u65e5\u4ed8\u5225\u30c6\u30fc\u30d6\u30eb(\u4f8b\uff1a`nginx_log_20160727`\u3068\u304b)\u4f5c\u3063\u3066BigQuery\u306b\u6bce\u65e5\u3064\u3063\u3053\u3093\u3067\u308b\u5834\u5408\u306f\n\n```sql\n-- standard\nselect ...\nfrom `dataset.nginx_log_*`\nwhere _table_suffix between '20160701' and '20160727'\n```\n\u3068\u304b\u3084\u3063\u3066\u5fc5\u8981\u306a\u671f\u9593\u306e\u30c6\u30fc\u30d6\u30eb\u306b\u307e\u305f\u304c\u3063\u3066\u96c6\u8a08\u3067\u304d\u308b\u3093\u3067\u3059\u304c\uff0c\u305d\u3046\u3067\u306f\u306a\u3044\uff0c\u4f8b\u3048\u3070\u30b7\u30b9\u30c6\u30e0\u306e\u30e6\u30fc\u30b6\u60c5\u5831\u30c6\u30fc\u30d6\u30eb\u3092\u6bce\u65e5BigQuery\u306b\u3064\u3063\u3053\u3093\u3067\u65e5\u6b21\u3067\u306e\u5909\u5316\u3092\u77e5\u308a\u305f\u3044\u307f\u305f\u3044\u306a\u5834\u5408\uff0c\u65e5\u4ed8\u306e\u30ab\u30e9\u30e0\u304c\u306a\u304b\u3063\u305f\u308a\u3057\u3066\u3046\u307e\u304f\u3044\u304d\u307e\u305b\u3093\uff0e\n\n`users`\u30c6\u30fc\u30d6\u30eb\u306b**BQ\u306b\u30a4\u30f3\u30dd\u30fc\u30c8\u3057\u305f\u65e5**\u7684\u306a\u30ab\u30e9\u30e0\u3092\u6301\u305f\u305b\u3066\u304a\u3051\u3070\u305d\u3044\u3064\u3092\u4f7f\u3063\u3066\u96c6\u8a08\u3067\u304d\u305d\u3046\u3067\u3059\u304c\uff0c\u305d\u3082\u305d\u3082\u65e5\u4ed8\u5225\u306b\u5206\u3051\u3066\u308b\u306e\u306b\u3055\u3089\u306b\u65e5\u4ed8\u3092\u6301\u305f\u305b\u308b\u306e\u304c\u7121\u99c4\u3063\u307d\u304f\u3066\u3064\u3089\u3044\uff0e\uff0e\uff0e\n\n# \u3084\u3063\u305f\u3053\u3068\n- `__TABLES_SUMMARY__`\u3092\u898b\u3066\u5fc5\u8981\u306asuffix\u3092\u53d6\u5f97\n    - \u305d\u3082\u305d\u3082BQ\u306eTableQuery\u3068\u304b\u4f7f\u3046\u3068\u5185\u90e8\u7684\u306b\u540c\u3058\u3053\u3068\u3092\u3084\u3063\u3066\u308b\u3089\u3057\u3044\u3067\u3059[^so]\n    - `__TABLES_SUMMARY__`\u306f\u5927\u6587\u5b57\u3058\u3083\u306a\u3044\u3068\u30c0\u30e1(\u82e5\u5e72\u30cf\u30de\u3063\u305f)\n- \u76ee\u7684\u306e\u30c6\u30fc\u30d6\u30eb\u7fa4\u3068`cross join`\u3057\u3066\uff0c`_table_suffix`\u7591\u4f3c\u30ab\u30e9\u30e0\u3068\u4e00\u81f4\u3059\u308b\u3082\u306e\u3092\u7d5e\u308a\u3053\u3080\n\n\u305f\u3068\u3048\u3070\uff0c`users_*`\u306e`xxx_status`\u3054\u3068\u306e\u4eba\u6570\u3092\u3042\u308b\u671f\u9593\u3067\u65e5\u5225\u306b\u96c6\u8a08\u3057\u305f\u3044\u5834\u5408\u306f\u3053\u3093\u306a\u611f\u3058\uff0e\n\n```sql\n-- standard\nWITH ts as\n  (SELECT substr(table_id, -8) t\n   FROM dataset.__TABLES_SUMMARY__\n   WHERE table_id LIKE 'users_%')\nSELECT parse_date('%Y%m%d', ts.t) t,\n       xxx_status,\n       count(id) c\nFROM `dataset.users_*`,\n     ts\nWHERE _table_suffix = ts.t\nGROUP BY t,\n         xxx_status\n```\n\n## `WITH ts as(...)` \u3092\u6bce\u56de\u66f8\u304f\u306e\u3057\u3093\u3069\u3044\u3093\u3067UDF\u306b\u3057\u3066\u307f\u308b\nStandard SQL\u3092\u4f7f\u3063\u3066\u308b\u3068\u305d\u3082\u305d\u3082UDF\u304c\u52d5\u304b\u306a\u3044\uff0e\uff0e?(\u7ba1\u7406\u30b3\u30f3\u30bd\u30fc\u30eb\u4e0a\u306e\u30a8\u30c7\u30a3\u30bf\u4e0a\u306e\u30b5\u30f3\u30d7\u30eb(`passthrough`)\u3082Standard\u3060\u3068\u52d5\u304b\u306a\u304b\u3063\u305f)\n\n```js\n// Example user-defined function, documentation: https://goo.gl/6KR8O0\n// Sample SQL: SELECT outputA, outputB FROM (passthrough(SELECT \"abc\" AS inputA, \"def\" AS inputB))\n\n\nfunction generate_date_series(row, emit) {\n    var start = new Date(row.start_date.substr(0, 4), row.start_date.substr(4, 2) - 1, row.start_date.substr(6, 2));\n    var end = new Date(row.end_date.substr(0, 4), row.end_date.substr(4, 2) - 1, row.end_date.substr(6, 2));\n    if (start.getTime() > end.getTime()) {\n      var tmp = start;\n      start = end;\n      end = tmp;\n    }\n    do {\n           emit({date: start});\n           var s = new Date(start.getUTCFullYear(), start.getUTCMonth(), start.getUTCDate() + 1);\n           start = s;\n    } while (end.getTime() >= start.getTime())\n}\n\nbigquery.defineFunction(\n  'generate_date_series',                           // Name of the function exported to SQL\n  ['start_date', 'end_date'],                    // Names of input columns\n  [{'name': 'date', 'type': 'timestamp'}  // Output schema\n  ],\n  generate_date_series                       // Reference to JavaScript UDF\n);\n```\n\n\u30a8\u30e9\u30fc\u51e6\u7406\u3082\u306a\u306b\u3082\u306a\u3044\u304c\n\n```sql\nSELECT FORMAT_UTC_USEC(date) \nFROM (generate_date_series(SELECT \"20160701\" AS start_date, \"20160710\" AS end_date))\n```\n\n\u3068\u304b\u3084\u308c\u3070\u9023\u7d9a\u3059\u308b\u65e5\u4ed8\u306eTimestamp\u304c\u53d6\u5f97\u3067\u304d\u308b\uff0e\n\n# \u3042\u3068\u304c\u304d\nLegacy SQL\u3060\u3068\u96e3\u3057\u3044\u304b\u306a\uff0e\uff0e\uff0e?\u601d\u3044\u3064\u3044\u305f\u3089\u8ffd\u8a18\u3057\u3088\u3046\uff0e\uff0e\uff0e\n\n---\n[^so]: http://stackoverflow.com/a/22735031\n", "tags": ["bigquery"]}