{"context": " More than 1 year has passed since last update.\n\n\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u3092\u66f8\u3044\u3066\u3044\u3066\u3001\u63a8\u8ad6\u3055\u308c\u305f\u578b\u3092\u78ba\u8a8d\u3057\u305f\u3044\n\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u3092\u8a18\u8ff0\u3057\u3066\u3044\u308b\u3068\n\u300c\u3053\u306e\u5f15\u6570\u3092\u4e0e\u3048\u305f\u3068\u304d\u306b\u306f\u3001T\u304c\u3069\u3046\u63a8\u8ad6\u3055\u308c\u308b\u306e\u304b\uff1f\u300d\n\u306a\u3093\u3066\u601d\u3046\u3053\u3068\u306f\u826f\u304f\u3042\u308a\u307e\u3059\u3088\u306d\uff1f\n\u55da\u547c\u3001\u305d\u3093\u306a\u3068\u304d\u3001\u3069\u30fc\u3057\u305f\u3089\u3088\u3044\u306e\u3067\u3057\u3087\u30fc\u304b\uff1f\n\u305f\u3068\u3048\u3070\ntemplate < typename T >\nvoid f(T&&){}\n\nvoid g(int const&){};\n\nint main(){\n    f(g);\n}\n\n\u3053\u306e\u5834\u5408\u306eT\u304c\u3069\u3046\u63a8\u8ad6\u3055\u308c\u308b\u306e\u304b\u77e5\u308a\u305f\u3044\uff01\n\u3068\u601d\u3063\u305f\u3068\u304d\u3001\u3069\u3046\u3057\u307e\u3059\u304b\uff1f\n\n\u8ae6\u3081\u308b\nIDE\u306b\u983c\u308b\ntypeid.name()\u3092\u4f7f\u3046\nBoost.Typeindex\u3092\u4f7f\u3046\nAttribute\u3092\u4f7f\u3046\uff08C++14\uff09\n\n\nIDE\u306b\u983c\u308b\n\u30d5\u30a9\u30fc\u30ab\u30b9\u3059\u308b\u3068\u60c5\u5831\u304c\u8868\u793a\u3055\u308c\u308b\u306e\u3092\u5229\u7528\u3059\u308b\nIDE\u3092\u4f7f\u3063\u3066\u3044\u308b\u5834\u5408\u306f\u6982\u306d\u3053\u308c\u3067\u4e8b\u8db3\u308a\u308b\n\n\ntypeid.name()\u3092\u4f7f\u3046\n\u30d8\u30c3\u30c0\u3092\u30a4\u30f3\u30af\u30eb\u30fc\u30c9\u3057\u3066\n\u3053\u306e\u65b9\u6cd5\u3067\u306f\u5b9f\u884c\u6642\u307e\u3067\u308f\u304b\u3089\u306a\u3044\u578b\u60c5\u5831\u3092\u8868\u793a\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u308b\u306e\u3067\nRTTI(Run Time Type Identifier)\u3068\u547c\u3070\u308c\u3066\u3044\u308b\n#include <iostream>\n#include <typeinfo>\nusing namespace std;\n\ntemplate < typename T >\nvoid f(T&&){ cout << typeid(T).name() << endl;}\n\nvoid g(int const&){};\n\nint main(){\n    f(g);\n}\n\n\u5b9f\u884c\u7d50\u679c\n\nFvRKiE\n\n\u3081\u3067\u305f\u3057\u3081\u3067\u305f\u3057...\n\u3044\u3084\u307e\u3066\u3001\u4f55\u3060\u3053\u306e\u6587\u5b57\u5217\u306f\uff01\uff01\ntypeid\u3067\u53d6\u5f97\u3067\u304d\u308b\u578b\u540d\u306f\u305d\u306e\u307e\u307e\u3067\u306f\u30de\u30f3\u30b0\u30eb\u3055\u308c\u3066\u3044\u3066\n\u5bb9\u6613\u306b\u8aad\u3080\u3053\u3068\u306f\u3067\u304d\u306a\u3044\u306e\u3067\u3042\u308b(Microsoft \u30b3\u30f3\u30d1\u30a4\u30e9\u306f\u8aad\u3081\u308b\u6587\u5b57\u5217\u3092\u8fd4\u3059)\n\u30c7\u30de\u30f3\u30b0\u30eb\u3059\u308b\u306b\u306f\u6b21\u306e\u3088\u3046\u306b\u3059\u308b\n#include <iostream>\n#include <typeinfo>\n#include <cxxabi.h>\nusing namespace std;\n\ntemplate < typename T >\nvoid f(T&&){\n    const type_info& id = typeid(T);\n    int stat;\n    char *name = abi::__cxa_demangle(id.name(),0,0,&stat);\n    if( name!=NULL ) {\n        if( stat==0 ) {    // \u30b9\u30c6\u30fc\u30bf\u30b9\u304c0\u306a\u3089\u6210\u529f\n            printf(\"T = %s\",name);\n        }\n        free(name);        // free\u3059\u308b\u5fc5\u8981\u304c\u3042\u308b\n    }\n}\n\nvoid g(int const&){};\n\nint main(){\n    f(g);\n}\n\n\nBoost.Typeindex\nBoost.Typeindex\u3092\u4f7f\u3048\u3070\u74b0\u5883\u306b\u3088\u3063\u3066\u30de\u30f3\u30b0\u30eb\u3055\u308c\u3066\u3044\u305f\u308a\n\u3055\u308c\u3066\u3044\u306a\u304b\u3063\u305f\u308a\u3059\u308b\u3053\u3068\u306f\u306a\u3044\u3068\u601d\u308f\u308c\u308b\n#include <iostream>\n#include <boost/type_index.hpp>\nusing namespace std;\n\ntemplate < typename T >\nvoid f(T&&){ cout << boost::typeindex::type_id_with_cvr<T>().pretty_name() << endl;}\n\nvoid g(int const&){};\n\nint main(){\n    f(g);\n}\n\n\u5b9f\u884c\u7d50\u679c\n\nvoid (&)(int const&)\n\n\u3081\u3067\u305f\u3057\u3081\u3067\u305f\u3057...\n\u3057\u304b\u3057\u3001\u3061\u3087\u3063\u3068\u5f85\u3066\u3088\n\u3053\u308c\u306f\u9762\u5012\u3067\u306f\u306a\u3044\u304b\uff1f\n\u3082\u3063\u3068\u624b\u8efd\u306a\u65b9\u6cd5\u304cC++14\u306b\u306f\u5b58\u5728\u3059\u308b\n\nAttribute [[deprecated]]\n[[deprecated]]\u6307\u5b9a\u3057\u3066\u3057\u307e\u3046\u306e\u3060\uff01\n\u305d\u3046\u3059\u308c\u3070\u975e\u63a8\u5968\u3055\u308c\u305f\u95a2\u6570\u304c\u4f7f\u7528\u3055\u308c\u305f\u3053\u3068\u3092\u609f\u3063\u305f\u30b3\u30f3\u30d1\u30a4\u30e9\u306f\n\u8b66\u544a\u6587\u3092\u51fa\u3059\n\u305d\u3046\u3001\u5f15\u6570\u306e\u578b\u540d\u3082\u540c\u6642\u306b\u8868\u793a\u3057\u3066\u304f\u308c\u308b\uff01\ntemplate < typename T >\n[[deprecated]] void f(T&&){}\n\nvoid g(int const&){};\n\nint main(){\n    f(g);\n}\n\n\u8b66\u544a\u6587\nprog.cc: In function 'int main()':\nprog.cc:8:8: warning: 'void f(T&&) [with T = void (&)(const int&)]' is deprecated [-Wdeprecated-declarations]\n     f(g);\n        ^\n\n>prog.cc:3:21: note: declared here\n [[deprecated]] void f(T&&){}\n                     ^\n\n\u3053\u306e\u65b9\u6cd5\u3067\u306f\u30d8\u30c3\u30c0\u3092\u30a4\u30f3\u30af\u30eb\u30fc\u30c9\u3059\u308b\u3053\u3068\u3082\n\u30c7\u30d0\u30c3\u30b0\u51fa\u529b\u3092\u66f8\u304f\u3053\u3068\u3082\n\u3082\u306f\u3084\u5fc5\u8981\u304c\u7121\u3044\uff01\uff01\n#\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u3092\u66f8\u3044\u3066\u3044\u3066\u3001\u63a8\u8ad6\u3055\u308c\u305f\u578b\u3092\u78ba\u8a8d\u3057\u305f\u3044\n\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u3092\u8a18\u8ff0\u3057\u3066\u3044\u308b\u3068\n\u300c\u3053\u306e\u5f15\u6570\u3092\u4e0e\u3048\u305f\u3068\u304d\u306b\u306f\u3001`T`\u304c\u3069\u3046\u63a8\u8ad6\u3055\u308c\u308b\u306e\u304b\uff1f\u300d\n\u306a\u3093\u3066\u601d\u3046\u3053\u3068\u306f\u826f\u304f\u3042\u308a\u307e\u3059\u3088\u306d\uff1f\n\n\u55da\u547c\u3001\u305d\u3093\u306a\u3068\u304d\u3001\u3069\u30fc\u3057\u305f\u3089\u3088\u3044\u306e\u3067\u3057\u3087\u30fc\u304b\uff1f\n\n\u305f\u3068\u3048\u3070\n\n```cpp\ntemplate < typename T >\nvoid f(T&&){}\n\nvoid g(int const&){};\n\nint main(){\n    f(g);\n}\n```\n\n\u3053\u306e\u5834\u5408\u306e`T`\u304c\u3069\u3046\u63a8\u8ad6\u3055\u308c\u308b\u306e\u304b\u77e5\u308a\u305f\u3044\uff01\n\u3068\u601d\u3063\u305f\u3068\u304d\u3001\u3069\u3046\u3057\u307e\u3059\u304b\uff1f\n\n\n1. \u8ae6\u3081\u308b\n2. IDE\u306b\u983c\u308b\n3. typeid.name()\u3092\u4f7f\u3046\n4. Boost.Typeindex\u3092\u4f7f\u3046\n5. Attribute\u3092\u4f7f\u3046\uff08C++14\uff09\n\n#IDE\u306b\u983c\u308b\n\u30d5\u30a9\u30fc\u30ab\u30b9\u3059\u308b\u3068\u60c5\u5831\u304c\u8868\u793a\u3055\u308c\u308b\u306e\u3092\u5229\u7528\u3059\u308b\nIDE\u3092\u4f7f\u3063\u3066\u3044\u308b\u5834\u5408\u306f\u6982\u306d\u3053\u308c\u3067\u4e8b\u8db3\u308a\u308b\n![ET.png](https://qiita-image-store.s3.amazonaws.com/0/100319/0a9cdff9-86a6-bded-f12b-c865e4d783b0.png)\n\n#typeid.name()\u3092\u4f7f\u3046\n<typeinfo>\u30d8\u30c3\u30c0\u3092\u30a4\u30f3\u30af\u30eb\u30fc\u30c9\u3057\u3066\n\u3053\u306e\u65b9\u6cd5\u3067\u306f\u5b9f\u884c\u6642\u307e\u3067\u308f\u304b\u3089\u306a\u3044\u578b\u60c5\u5831\u3092\u8868\u793a\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u308b\u306e\u3067\n`RTTI(Run Time Type Identifier)`\u3068\u547c\u3070\u308c\u3066\u3044\u308b\n\n```cpp\n#include <iostream>\n#include <typeinfo>\nusing namespace std;\n\ntemplate < typename T >\nvoid f(T&&){ cout << typeid(T).name() << endl;}\n\nvoid g(int const&){};\n\nint main(){\n    f(g);\n}\n```\n\n\u5b9f\u884c\u7d50\u679c\n>FvRKiE\n\n\u3081\u3067\u305f\u3057\u3081\u3067\u305f\u3057...\n\n\u3044\u3084\u307e\u3066\u3001\u4f55\u3060\u3053\u306e\u6587\u5b57\u5217\u306f\uff01\uff01\n\ntypeid\u3067\u53d6\u5f97\u3067\u304d\u308b\u578b\u540d\u306f\u305d\u306e\u307e\u307e\u3067\u306f\u30de\u30f3\u30b0\u30eb\u3055\u308c\u3066\u3044\u3066\n\u5bb9\u6613\u306b\u8aad\u3080\u3053\u3068\u306f\u3067\u304d\u306a\u3044\u306e\u3067\u3042\u308b(Microsoft \u30b3\u30f3\u30d1\u30a4\u30e9\u306f\u8aad\u3081\u308b\u6587\u5b57\u5217\u3092\u8fd4\u3059)\n\u30c7\u30de\u30f3\u30b0\u30eb\u3059\u308b\u306b\u306f\u6b21\u306e\u3088\u3046\u306b\u3059\u308b\n\n```cpp\n#include <iostream>\n#include <typeinfo>\n#include <cxxabi.h>\nusing namespace std;\n\ntemplate < typename T >\nvoid f(T&&){\n    const type_info& id = typeid(T);\n    int stat;\n    char *name = abi::__cxa_demangle(id.name(),0,0,&stat);\n    if( name!=NULL ) {\n        if( stat==0 ) {    // \u30b9\u30c6\u30fc\u30bf\u30b9\u304c0\u306a\u3089\u6210\u529f\n            printf(\"T = %s\",name);\n        }\n        free(name);        // free\u3059\u308b\u5fc5\u8981\u304c\u3042\u308b\n    }\n}\n\nvoid g(int const&){};\n\nint main(){\n    f(g);\n}\n```\n\n\n#Boost.Typeindex\n\nBoost.Typeindex\u3092\u4f7f\u3048\u3070\u74b0\u5883\u306b\u3088\u3063\u3066\u30de\u30f3\u30b0\u30eb\u3055\u308c\u3066\u3044\u305f\u308a\n\u3055\u308c\u3066\u3044\u306a\u304b\u3063\u305f\u308a\u3059\u308b\u3053\u3068\u306f\u306a\u3044\u3068\u601d\u308f\u308c\u308b\n\n```cpp\n#include <iostream>\n#include <boost/type_index.hpp>\nusing namespace std;\n\ntemplate < typename T >\nvoid f(T&&){ cout << boost::typeindex::type_id_with_cvr<T>().pretty_name() << endl;}\n\nvoid g(int const&){};\n\nint main(){\n    f(g);\n}\n```\n\n\u5b9f\u884c\u7d50\u679c\n>void (&)(int const&)\n\n\u3081\u3067\u305f\u3057\u3081\u3067\u305f\u3057...\n\n\u3057\u304b\u3057\u3001\u3061\u3087\u3063\u3068\u5f85\u3066\u3088\n\u3053\u308c\u306f\u9762\u5012\u3067\u306f\u306a\u3044\u304b\uff1f\n\n\u3082\u3063\u3068\u624b\u8efd\u306a\u65b9\u6cd5\u304cC++14\u306b\u306f\u5b58\u5728\u3059\u308b\n\n#Attribute [[deprecated]]\n\n`[[deprecated]]`\u6307\u5b9a\u3057\u3066\u3057\u307e\u3046\u306e\u3060\uff01\n\u305d\u3046\u3059\u308c\u3070\u975e\u63a8\u5968\u3055\u308c\u305f\u95a2\u6570\u304c\u4f7f\u7528\u3055\u308c\u305f\u3053\u3068\u3092\u609f\u3063\u305f\u30b3\u30f3\u30d1\u30a4\u30e9\u306f\n\u8b66\u544a\u6587\u3092\u51fa\u3059\n\u305d\u3046\u3001\u5f15\u6570\u306e\u578b\u540d\u3082\u540c\u6642\u306b\u8868\u793a\u3057\u3066\u304f\u308c\u308b\uff01\n\n```cpp\ntemplate < typename T >\n[[deprecated]] void f(T&&){}\n\nvoid g(int const&){};\n\nint main(){\n    f(g);\n}\n```\n\n\u8b66\u544a\u6587\n\n```\nprog.cc: In function 'int main()':\nprog.cc:8:8: warning: 'void f(T&&) [with T = void (&)(const int&)]' is deprecated [-Wdeprecated-declarations]\n     f(g);\n        ^\n\n>prog.cc:3:21: note: declared here\n [[deprecated]] void f(T&&){}\n                     ^\n```\n\n\u3053\u306e\u65b9\u6cd5\u3067\u306f\u30d8\u30c3\u30c0\u3092\u30a4\u30f3\u30af\u30eb\u30fc\u30c9\u3059\u308b\u3053\u3068\u3082\n\u30c7\u30d0\u30c3\u30b0\u51fa\u529b\u3092\u66f8\u304f\u3053\u3068\u3082\n\u3082\u306f\u3084\u5fc5\u8981\u304c\u7121\u3044\uff01\uff01\n\n", "tags": ["C++", "C++11", "C++14"]}