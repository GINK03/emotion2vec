{"context": " More than 1 year has passed since last update.\u203b\u3053\u306e\u8a18\u4e8b\u3067\u4f7f\u3063\u3066\u3044\u308bUnity\u306e\u30d0\u30fc\u30b8\u30e7\u30f3\u306f Unity5.2.1p3 \u3067\u3059\u3002\n\n\nC#\u30b3\u30fc\u30c9\n\u4ee5\u4e0b\u306e\u30b9\u30af\u30ea\u30d7\u30c8\u3092\u4f5c\u6210\u3057\u3066\u9069\u5f53\u306a\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306b\u30a2\u30bf\u30c3\u30c1\n\nNewBehaviourScript.cs\nusing UnityEngine;\nusing System.Collections;\n\npublic class NewBehaviourScript : MonoBehaviour\n{\n\n}\n\n\n\u4ee5\u4e0b\u306e\u30b9\u30af\u30ea\u30d7\u30c8\u3092\u4f5c\u6210\u3057\u3066Editor\u30d5\u30a9\u30eb\u30c0\u5185\u3078\u5165\u308c\u308b\n\nNewBehaviourScriptEditor.cs\nusing UnityEngine;\nusing UnityEditor;\nusing System.Collections;\n\n[CustomEditor(typeof(NewBehaviourScript))]\npublic class NewBehaviourScriptEditor : Editor\n{\n  private Material material = null;\n  public override bool HasPreviewGUI()\n  {\n    return true;\n  }\n\n  public override GUIContent GetPreviewTitle()\n  {\n    return new GUIContent(\"\u307b\u3052\");\n  }\n\n  public override void OnPreviewGUI(Rect r, GUIStyle background)\n  {\n    if (material == null)\n    {\n      Shader shader = Resources.Load<Shader>(\"Shader/RayMarch\");\n      this.material = new Material(shader);\n    }\n\n    base.OnPreviewGUI(r, background);\n    Graphics.DrawTexture(r, Texture2D.whiteTexture, this.material);\n    Repaint();\n\n  }\n\n}\n\n\n\n\n\u30b7\u30a7\u30fc\u30c0\u30fc\u30b3\u30fc\u30c9\n\u30ec\u30a4\u30de\u30fc\u30c1\u30f3\u30b0\u306f \u5168\u80fd\u611fUP! GLSL\u3067\u9032\u3081\u30ec\u30a4\u30de\u30fc\u30c1\u30f3\u30b0 \u3092\u53c2\u8003\u306b\u3057\u307e\u3057\u305f.\n\u5149\u3068\u6cd5\u7dda\u306e\u5185\u7a4d\u3092\u3068\u3063\u3066\u5f71\u3092\u3064\u3051\u3066\u3044\u307e\u3059.\n\u30d5\u30a1\u30a4\u30eb\u30d1\u30b9\u304cAssets/Resources/Shader/RayMarch.shader\u3068\u306a\u308b\u3088\u3046\u306b\n\u914d\u7f6e\u3057\u307e\u3059.\n\nRayMarch.shader\nShader \"Unlit/RayMarch\"\n{\n    Properties\n    {\n        _MainTex(\"Texture\", 2D) = \"white\" {}\n    }\n\n        SubShader\n    {\n        Tags{ \"RenderType\" = \"Opaque\" }\n\n        Pass\n    {\nCGPROGRAM\n#pragma vertex vert\n#pragma fragment frag\n\n#include \"UnityCG.cginc\"\n\n    struct appdata\n    {\n        float4 vertex : POSITION;\n        float2 uv : TEXCOORD0;\n    };\n\n    struct v2f\n    {\n        float2 uv : TEXCOORD0;\n        float4 vertex : SV_POSITION;\n        float4 screenPos : TEXCOORD1;\n    };\n\n    sampler2D _MainTex;\n    float4 _MainTex_ST;\n\n    v2f vert(appdata v)\n    {\n        v2f o;\n        o.vertex = mul(UNITY_MATRIX_MVP, v.vertex);\n        o.uv = TRANSFORM_TEX(v.uv, _MainTex);\n        return o;\n    }\n\n    float distanceFunc(float3 p) {\n        float sphereSize = 0.1;\n        float3 spherePos = float3(0.0, 0.0, -4.0);\n        return length(p - spherePos) - sphereSize;\n    }\n\n    float3 getNormal(float3 p)\n    {\n        const float d = 0.0001;\n        return\n            normalize\n            (\n                float3\n                (\n                    distanceFunc(p + float3(d, 0.0, 0.0)) - distanceFunc(p + float3(-d, 0.0, 0.0)),\n                    distanceFunc(p + float3(0.0, d, 0.0)) - distanceFunc(p + float3(0.0, -d, 0.0)),\n                    distanceFunc(p + float3(0.0, 0.0, d)) - distanceFunc(p + float3(0.0, 0.0, -d))\n                    )\n                );\n    }\n\n    fixed4 frag(v2f i) : SV_Target\n    {\n        // fragment position\n        float2 p = i.uv - 0.5;\n        p *= 0.3;\n\n        // camera\n        float3 cPos = float3(0.0, 0.0, 2.0);\n        float3 cDir = float3(0.0, 0.0, -1.0);\n        float3 cUp = float3(0.0, 1.0, 0.0);\n        float3 cSide = cross(cDir, cUp);\n        float targetDepth = 1.0;\n\n        // ray\n        float3 ray = normalize(cSide * p.x + cUp * p.y + cDir * targetDepth);\n\n        // marching loop\n        float distance = 0.0; // \u30ec\u30a4\u3068\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u9593\u306e\u6700\u77ed\u8ddd\u96e2\n        float rLen = 0.0;     // \u30ec\u30a4\u306b\u7d99\u304e\u8db3\u3059\u9577\u3055\n        float3  rPos = cPos;  // \u30ec\u30a4\u306e\u5148\u7aef\u4f4d\u7f6e\n        for (int i = 0; i < 4; i++) {\n            distance = distanceFunc(rPos);\n            rLen += distance;\n            rPos = cPos + ray * rLen;\n\n        }\n\n        // hit check\n        if (abs(distance) < 0.1) {\n            float t = _Time.z;\n            float3 normal = getNormal(rPos); \n            float3 light = float3(0.3 * cos(t), 0.3 * sin(t), 0.0);\n            float env = 0.3; // \u74b0\u5883\u5149\n            float diffuse = dot(normal, light);\n            float color = env + diffuse;\n            return float4(color, color, color, 1.0);\n        }else\n        {\n            return float4(0.0, 0.0, 0.0, 1.0);\n        }\n    }\n\nENDCG\n    }\n    }\n}\n\n\n\n\u7d50\u679c\n\n\n\u53c2\u8003\n\u5168\u80fd\u611fUP! GLSL\u3067\u9032\u3081\u30ec\u30a4\u30de\u30fc\u30c1\u30f3\u30b0\nhttp://www.demoscene.jp/?p=811\n\n\u203b\u3053\u306e\u8a18\u4e8b\u3067\u4f7f\u3063\u3066\u3044\u308bUnity\u306e\u30d0\u30fc\u30b8\u30e7\u30f3\u306f Unity5.2.1p3 \u3067\u3059\u3002\n\n![image](https://qiita-image-store.s3.amazonaws.com/0/44288/21f2f4e7-8311-89b1-d364-5cbedc6aa16a.png)\n\n# C#\u30b3\u30fc\u30c9\n\u4ee5\u4e0b\u306e\u30b9\u30af\u30ea\u30d7\u30c8\u3092\u4f5c\u6210\u3057\u3066\u9069\u5f53\u306a\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306b\u30a2\u30bf\u30c3\u30c1\n\n``` NewBehaviourScript.cs\nusing UnityEngine;\nusing System.Collections;\n\npublic class NewBehaviourScript : MonoBehaviour\n{\n\n}\n```\n\n\u4ee5\u4e0b\u306e\u30b9\u30af\u30ea\u30d7\u30c8\u3092\u4f5c\u6210\u3057\u3066Editor\u30d5\u30a9\u30eb\u30c0\u5185\u3078\u5165\u308c\u308b\n\n``` NewBehaviourScriptEditor.cs\nusing UnityEngine;\nusing UnityEditor;\nusing System.Collections;\n\n[CustomEditor(typeof(NewBehaviourScript))]\npublic class NewBehaviourScriptEditor : Editor\n{\n  private Material material = null;\n  public override bool HasPreviewGUI()\n  {\n    return true;\n  }\n\n  public override GUIContent GetPreviewTitle()\n  {\n    return new GUIContent(\"\u307b\u3052\");\n  }\n\n  public override void OnPreviewGUI(Rect r, GUIStyle background)\n  {\n    if (material == null)\n    {\n      Shader shader = Resources.Load<Shader>(\"Shader/RayMarch\");\n      this.material = new Material(shader);\n    }\n\n    base.OnPreviewGUI(r, background);\n    Graphics.DrawTexture(r, Texture2D.whiteTexture, this.material);\n    Repaint();\n\n  }\n\n}\n\n```\n\n# \u30b7\u30a7\u30fc\u30c0\u30fc\u30b3\u30fc\u30c9\n\u30ec\u30a4\u30de\u30fc\u30c1\u30f3\u30b0\u306f<a href =\"http://www.demoscene.jp/?p=811\"> \u5168\u80fd\u611fUP! GLSL\u3067\u9032\u3081\u30ec\u30a4\u30de\u30fc\u30c1\u30f3\u30b0 </a>\u3092\u53c2\u8003\u306b\u3057\u307e\u3057\u305f.\n\u5149\u3068\u6cd5\u7dda\u306e\u5185\u7a4d\u3092\u3068\u3063\u3066\u5f71\u3092\u3064\u3051\u3066\u3044\u307e\u3059.\n\n\u30d5\u30a1\u30a4\u30eb\u30d1\u30b9\u304cAssets/Resources/Shader/RayMarch.shader\u3068\u306a\u308b\u3088\u3046\u306b\n\u914d\u7f6e\u3057\u307e\u3059.\n\n\n``` RayMarch.shader\nShader \"Unlit/RayMarch\"\n{\n\tProperties\n\t{\n\t\t_MainTex(\"Texture\", 2D) = \"white\" {}\n\t}\n\n\t\tSubShader\n\t{\n\t\tTags{ \"RenderType\" = \"Opaque\" }\n\n\t\tPass\n\t{\nCGPROGRAM\n#pragma vertex vert\n#pragma fragment frag\n\n#include \"UnityCG.cginc\"\n\n\tstruct appdata\n\t{\n\t\tfloat4 vertex : POSITION;\n\t\tfloat2 uv : TEXCOORD0;\n\t};\n\n\tstruct v2f\n\t{\n\t\tfloat2 uv : TEXCOORD0;\n\t\tfloat4 vertex : SV_POSITION;\n\t\tfloat4 screenPos : TEXCOORD1;\n\t};\n\n\tsampler2D _MainTex;\n\tfloat4 _MainTex_ST;\n\n\tv2f vert(appdata v)\n\t{\n\t\tv2f o;\n\t\to.vertex = mul(UNITY_MATRIX_MVP, v.vertex);\n\t\to.uv = TRANSFORM_TEX(v.uv, _MainTex);\n\t\treturn o;\n\t}\n\n\tfloat distanceFunc(float3 p) {\n\t\tfloat sphereSize = 0.1;\n\t\tfloat3 spherePos = float3(0.0, 0.0, -4.0);\n\t\treturn length(p - spherePos) - sphereSize;\n\t}\n\n\tfloat3 getNormal(float3 p)\n\t{\n\t\tconst float d = 0.0001;\n\t\treturn\n\t\t\tnormalize\n\t\t\t(\n\t\t\t\tfloat3\n\t\t\t\t(\n\t\t\t\t\tdistanceFunc(p + float3(d, 0.0, 0.0)) - distanceFunc(p + float3(-d, 0.0, 0.0)),\n\t\t\t\t\tdistanceFunc(p + float3(0.0, d, 0.0)) - distanceFunc(p + float3(0.0, -d, 0.0)),\n\t\t\t\t\tdistanceFunc(p + float3(0.0, 0.0, d)) - distanceFunc(p + float3(0.0, 0.0, -d))\n\t\t\t\t\t)\n\t\t\t\t);\n\t}\n\n\tfixed4 frag(v2f i) : SV_Target\n\t{\n\t\t// fragment position\n\t\tfloat2 p = i.uv - 0.5;\n\t\tp *= 0.3;\n\n\t\t// camera\n\t\tfloat3 cPos = float3(0.0, 0.0, 2.0);\n\t\tfloat3 cDir = float3(0.0, 0.0, -1.0);\n\t\tfloat3 cUp = float3(0.0, 1.0, 0.0);\n\t\tfloat3 cSide = cross(cDir, cUp);\n\t\tfloat targetDepth = 1.0;\n\n\t\t// ray\n\t\tfloat3 ray = normalize(cSide * p.x + cUp * p.y + cDir * targetDepth);\n\n\t\t// marching loop\n\t\tfloat distance = 0.0; // \u30ec\u30a4\u3068\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u9593\u306e\u6700\u77ed\u8ddd\u96e2\n\t\tfloat rLen = 0.0;     // \u30ec\u30a4\u306b\u7d99\u304e\u8db3\u3059\u9577\u3055\n\t\tfloat3  rPos = cPos;  // \u30ec\u30a4\u306e\u5148\u7aef\u4f4d\u7f6e\n\t\tfor (int i = 0; i < 4; i++) {\n\t\t\tdistance = distanceFunc(rPos);\n\t\t\trLen += distance;\n\t\t\trPos = cPos + ray * rLen;\n\n\t\t}\n\n\t\t// hit check\n\t\tif (abs(distance) < 0.1) {\n\t\t\tfloat t = _Time.z;\n\t\t\tfloat3 normal = getNormal(rPos); \n\t\t\tfloat3 light = float3(0.3 * cos(t), 0.3 * sin(t), 0.0);\n\t\t\tfloat env = 0.3; // \u74b0\u5883\u5149\n\t\t\tfloat diffuse = dot(normal, light);\n\t\t\tfloat color = env + diffuse;\n\t\t\treturn float4(color, color, color, 1.0);\n\t\t}else\n\t\t{\n\t\t\treturn float4(0.0, 0.0, 0.0, 1.0);\n\t\t}\n\t}\n\nENDCG\n\t}\n\t}\n}\n```\n\n#\u7d50\u679c\n![image](https://qiita-image-store.s3.amazonaws.com/0/44288/aa4490fa-7ed0-ad9f-babd-e603a59f53f4.png)\n\n#\u53c2\u8003\n\u5168\u80fd\u611fUP! GLSL\u3067\u9032\u3081\u30ec\u30a4\u30de\u30fc\u30c1\u30f3\u30b0\nhttp://www.demoscene.jp/?p=811\n", "tags": ["Unity", "GLSL"]}