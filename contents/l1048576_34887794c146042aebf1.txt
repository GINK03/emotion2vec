{"context": "\n\n\u306f\u3058\u3081\u306b\n\u6b63\u76f4\u306a\u3068\u3053\u308d\u3001\u516c\u5f0f\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8 std::iter::Iterator - Rust \u3092\u8aad\u3081\u3070\u7d42\u4e86\u3001\u3053\u306e\u8a18\u4e8b\u306f\u4e0d\u8981\u3001\u3068\u3044\u3046\u611f\u3058\u306f\u3042\u308b\u3002\n\u3057\u304b\u3057\u3053\u306e\u30da\u30fc\u30b8\u3001\u4f8b\u3068\u304b\u306f\u8c4a\u5bcc\u3060\u3057\u826f\u3044\u306e\u3060\u304c\u3001\u95a2\u6570\u306e\u4e26\u3079\u9806\u304c\u3069\u3046\u306b\u3082\u5fae\u5999\u306a\u611f\u3058\u304c\u3059\u308b\u306e\u3067\u3001\u30e1\u30e2\u3092\u517c\u306d\u3066\u7528\u9014\u5225(\u72ec\u65ad\u3068\u504f\u898b\u306b\u3088\u308b\u5206\u985e)\u3067\u7d39\u4ecb\u3057\u3066\u307f\u308b\u3053\u3068\u306b\u3059\u308b\u3002\n\u3042\u3068\u3001\u95a2\u6570\u306e\u578b\u306fHaskell\u98a8\u306b\u66f8\u304f\u3068\u6d41\u308c\u308b\u611f\u3058\u304c\u3042\u3063\u3066\u826f\u3044(\u30a4\u30c6\u30ec\u30fc\u30bf\u306e\u7528\u9014\u3068\u30de\u30c3\u30c1\u3057\u3066\u3044\u308b\u6c17\u304c\u3059\u308b)\u306e\u3067\u3001 T -> U -> V \u306e\u3088\u3046\u306b\u66f8\u304f\u3053\u3068\u304c\u3042\u308b\u3002\n\u3068\u306f\u3044\u3048\u3001\u308f\u304b\u308a\u3084\u3059\u3055\u512a\u5148\u3067\u66f8\u304f\u3068 FnMut \u3068\u304b FromA: Default + Extend<A> \u307f\u305f\u3044\u306a\u72ec\u7279\u306e\u60c5\u5831\u304c\u5931\u308f\u308c\u3066\u3057\u307e\u3063\u305f\u305f\u3081\u3001\u3084\u306f\u308a\u516c\u5f0f\u306e\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u3092\u3042\u308f\u305b\u3066\u898b\u308b\u3053\u3068\u3092\u304a\u3059\u3059\u3081\u3059\u308b\u3002(\u30ea\u30f3\u30af\u3092\u6ca2\u5c71\u5f35\u3063\u305f\u306e\u3067\u3001\u767a\u898b\u6b21\u7b2c\u5225\u30a6\u30a3\u30f3\u30c9\u30a6\u3067\u958b\u304f\u304f\u3089\u3044\u306e\u52e2\u3044\u304c\u826f\u3044\u3002)\n\u305d\u308c\u304b\u3089\u3001\u4ee5\u4e0b\u3067 Iterator<T> \u3068\u66f8\u3044\u3066\u3044\u308b\u3082\u306e\u306f\u3001\u5b9f\u969b\u306b\u306f\u5225\u306e\u69d8\u3005\u306a\u578b\u3067\u3042\u308a\u3046\u308b\u304c\u3001\u3069\u3046\u305b\u5177\u4f53\u7684\u306a\u578b\u306f\u30b3\u30fc\u30c9\u4e2d\u3067\u610f\u8b58\u3059\u308b\u3053\u3068\u306f(\u6ec5\u591a\u306b)\u306a\u3044\u306e\u3067\u3001 Iterator trait\u3092\u5b9f\u88c5\u3057\u3066\u3044\u308b\u3082\u306e\u306f\u3059\u3079\u3066 Iterator<T> \u3068\u66f8\u304f\u3053\u3068\u306b\u3059\u308b\u3002\n\u898b\u51fa\u3057\u3092\u6d3b\u7528\u3057\u3066\u306d\uff01\u2192\n\n\n\u4e2d\u8eab\u3092(\u6700\u59271\u3064)\u53d6\u308a\u51fa\u3059\u7cfb\n\u4ee5\u4e0b\u306e\u3082\u306e\u306f\u3001\u307f\u306a\u6700\u59271\u3064\u306e\u8981\u7d20\u3092 Option<T> \u3067\u8fd4\u3059\u3002\n\nnext(): Iterator<T> -> Option<T>\n\n\u6b21\u306e\u8981\u7d20\u3092 Some \u3067\u8fd4\u3059\u3002\n\u6b21\u306e\u8981\u7d20\u304c\u306a\u3051\u308c\u3070 None \u3092\u8fd4\u3059\u3002\n\u305f\u3060\u3057\u3001\u30a4\u30c6\u30ec\u30fc\u30bf(\u306e next())\u304c None \u3092\u8fd4\u3057\u305f\u5f8c\u306b next() \u3092\u547c\u3093\u3060\u3068\u304d\u3001 None \u304c\u8fd4\u308b\u3053\u3068\u306f\u4fdd\u8a3c\u3055\u308c\u306a\u3044(\u518d\u3073 Some \u3092\u8fd4\u3057\u3066\u3082\u826f\u3044)\u3089\u3057\u3044\u3002\n\u305d\u306e\u4fdd\u8a3c\u304c\u6b32\u3057\u3051\u308c\u3070\u3001 fuse() \u3092\u4f7f\u3046\u3079\u3057\u3002\n(\u3068\u306f\u3044\u3048\u3001\u666e\u901a\u306f\u4f7f\u3044\u5207\u3063\u305f\u30a4\u30c6\u30ec\u30fc\u30bf\u3092\u518d\u5229\u7528\u3059\u308b\u3053\u3068\u306f\u306a\u3044\u306e\u3067\u3001\u6c17\u306b\u305b\u305a\u3068\u3082\u826f\u3044\u3060\u308d\u3046\u3002)\n\nlast(): Iterator<T> -> Option<T>\n\n\u6700\u5f8c\u306e\u8981\u7d20\u3092 Some \u3067\u8fd4\u3059\u3002\n\u8981\u7d20\u304c\u306a\u3051\u308c\u3070\u3001 None \u3092\u8fd4\u3059\u3002\n\u6b63\u78ba\u306b\u306f\u3001\u300c None \u304c\u8fd4\u3055\u308c\u308b\u76f4\u524d\u306b\u8fd4\u3055\u308c\u305f\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u8fd4\u3059\u300d\u304c\u6b63\u3057\u3044\u3002\n\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u306b\u3082\u305d\u3046\u66f8\u3044\u3066\u3042\u308b\u3002\n(\u30a4\u30c6\u30ec\u30fc\u30bf\u304c None \u306e\u5f8c\u306b\u307e\u305f Some \u3092\u8fd4\u3059\u3053\u3068\u3082\u3042\u308b\u306e\u3067\u3001\u300c\u6700\u5f8c\u306e\u300d\u3068\u3044\u3046\u8a00\u3044\u56de\u3057\u306f\u5fae\u5999\u3067\u3042\u308b\u3002\u304c\u3001\u307e\u3042\u76f4\u89b3\u7684\u306a\u4f7f\u3044\u65b9\u3067\u306e\u300c\u6700\u5f8c\u300d\u3067\u3042\u308b\u3002)\n\u3061\u306a\u307f\u306b\u3001 last() \u304c\u3042\u308b\u306e\u3060\u304b\u3089 first() \u304c\u3042\u3063\u3066\u3082\u826f\u3044\u306e\u3067\u306f\u3001\u3068\u4e00\u77ac\u8003\u3048\u3066\u3057\u307e\u3046\u304c\u3001\u8981\u3059\u308b\u306b\u305d\u308c\u306f next() \u3060\u3002\n\nnth(): Iterator<T> -> usize -> Option<T>\n\nn\u756a\u76ee\u306e\u8981\u7d20\u3092 Some \u3067\u8fd4\u3059\u3002\n(\u8a00\u3046\u307e\u3067\u3082\u306a\u3044\u304c\u3001\u6700\u521d\u306e\u8981\u7d20\u306f0\u756a\u76ee\u3067\u3042\u308b\u3002)\nn\u756a\u76ee\u306e\u8981\u7d20\u3092\u5f97\u308b\u524d\u306b\u7d42\u7aef\u306b\u5230\u9054\u3057\u305f\u5834\u5408\u3001 None \u3092\u8fd4\u3059\u3002\n\nfind(): Iterator<T> -> (&T -> bool) -> Option<T>\n\n\u4e0e\u3048\u3089\u308c\u305f\u95a2\u6570 &T -> bool \u304c true \u3092\u8fd4\u3059\u6700\u521d\u306e\u8981\u7d20\u3092 Some \u3067\u8fd4\u3059\u3002\n\u767a\u898b\u3067\u304d\u306a\u3051\u308c\u3070 None \u3092\u8fd4\u3059\u3002\n\nmax(): Iterator<T> -> Option<T> (\u305f\u3060\u3057 T: Ord)\nOrd trait\u3092\u5b9f\u88c5\u3057\u3066\u3044\u308b\u578b\u306e\u30a4\u30c6\u30ec\u30fc\u30bf\u306b\u3064\u3044\u3066\u3001\u305d\u306e\u6700\u5927\u306e\u8981\u7d20\u3092 Some \u3067\u8fd4\u3059\u3002\n\u3082\u3057\u540c\u3058\u6700\u5927\u5024\u304c\u8907\u6570\u3042\u308c\u3070\u3001\u6700\u5f8c\u306b\u51fa\u73fe\u3057\u305f\u3082\u306e\u3092\u8fd4\u3059\u3002\nNone \u304c\u8fd4\u308b\u306e\u306f\u3001\u305d\u3082\u305d\u3082\u8981\u7d20\u304c\u3072\u3068\u3064\u3082\u306a\u304b\u3063\u305f\u5834\u5408\u3067\u3042\u308b\u3002\n\nmin()\n\n\u6700\u5c0f\u5024\u3092\u8fd4\u3059\u3002\n\u8a73\u7d30\u306f max() \u306b\u540c\u3058\u3002\n\nmax_by_key(): Iterator<T> -> (&T -> U) -> Option<T> (\u305f\u3060\u3057 U: Ord)\nmax() \u3068\u4f3c\u3066\u3044\u308b\u304c\u3001T \u306e\u4ee3\u308f\u308a\u306b\u3001 U \u3067\u6bd4\u8f03\u3092\u884c\u3063\u305f\u7d50\u679c\u306e\u6700\u5927\u5024\u3092\u8fd4\u3059\u3002\n\u516c\u5f0f\u3067\u306f\u3001\u7d76\u5bfe\u5024\u304c\u6700\u5927\u306e\u8981\u7d20\u3092\u8fd4\u3059\u30b3\u30fc\u30c9\u4f8b\u304c\u8f09\u3063\u3066\u3044\u308b\u3002\n\nmin_by_key()\n\nmax_by_key() \u306e\u6700\u5c0f\u5024\u7248\u3002\n\nmax_by(): Iterator<T> -> (&T -> &T -> Ordering) -> Option<T>\n\n\u63d0\u4f9b\u3055\u308c\u305f\u6bd4\u8f03\u95a2\u6570\u3067\u6bd4\u8f03\u3092\u3057\u305f\u5834\u5408\u306e\u6700\u5927\u306e\u8981\u7d20\u3092 Some \u3067\u8fd4\u3059\u3002\n\u3053\u308c\u3092\u4f7f\u3048\u3070\u3001\u305f\u3068\u3048\u3070\u300c(ASCII\u306e)\u5927\u6587\u5b57\u30fb\u5c0f\u6587\u5b57\u3092\u533a\u5225\u305b\u305a\u5927\u5c0f\u6bd4\u8f03\u3059\u308b\u300d\u3068\u3044\u3063\u305f\u7279\u6b8a\u306a\u6bd4\u8f03\u3092\u4f7f\u3063\u305f\u6700\u5c0f\u5024\u304c\u6c42\u3081\u3089\u308c\u308b\u3002\n\n\u5927\u6587\u5b57\u30fb\u5c0f\u6587\u5b57\u3092\u7121\u8996\u3057\u305f\u6bd4\u8f03(\u3054\u3081\u3093\u3053\u308cmin_by\u306e\u30b5\u30f3\u30d7\u30eb\u3060\u308f)\nlet words = vec![\"abc\", \"FOOBAR\", \"xyz\"];\nlet case_insensitive_min = words.iter().min_by(|a, b| {\n    use std::ascii::AsciiExt;  // for `to_ascii_lowercase()`.\n\n    let a_iter = a.chars().map(|c| c.to_ascii_lowercase());\n    let b_iter = b.chars().map(|c| c.to_ascii_lowercase());\n    a_iter.cmp(b_iter)\n}).unwrap();\n\n\n(\u5168\u4f53\u30b3\u30fc\u30c9: Playground)\n\u5b89\u76f4\u306b\u3084\u308c\u3070\u3001 str::to_lowercase() \u3067\u5148\u306b(\u3053\u3061\u3089\u306f ASCII \u306b\u9650\u3089\u305a)\u5c0f\u6587\u5b57\u306b\u5909\u63db\u3057\u304d\u3063\u3066\u304b\u3089\u6bd4\u8f03\u3068\u3044\u3046\u3053\u3068\u306b\u306a\u308b\u304c\u3001\u3053\u308c\u3060\u3068\u6587\u5b57\u5217\u306e\u751f\u6210\u3001\u3064\u307e\u308a\u30e1\u30e2\u30ea\u30a2\u30ed\u30b1\u30fc\u30b7\u30e7\u30f3\u304c\u3042\u308b\u306e\u3067\u7121\u99c4\u304c\u591a\u3044\u3002\n\u305d\u3053\u3067 min_by \u3092\u4f7f\u3048\u3070\u3001\u6587\u5b57\u5217\u3092\u751f\u6210\u3059\u308b\u3053\u3068\u306a\u304f\u3001\u6587\u5b57\u6bce\u306b\u5909\u63db\u3092\u3057\u3064\u3064\u6bd4\u8f03\u3068\u3044\u3046\u3053\u3068\u304c\u53ef\u80fd\u306b\u306a\u308b\u3002\n\nmin_by()\n\nmax_by \u306e\u6700\u5c0f\u5024\u7248\u3002\n\n\u4e2d\u8eab\u3092\u5f04\u3089\u305a\u8981\u7d20\u3092\u9078\u629e\u3059\u308b\u7cfb\n\u4ee5\u4e0b\u306e\u3082\u306e\u306f\u3001\u307f\u306a\u65b0\u305f\u306a\u30a4\u30c6\u30ec\u30fc\u30bf Iterator<T> \u3092\u8fd4\u3059\u3002\n\nfilter(): Iterator<T> -> (&T -> bool) -> Iterator<T>\n\n\u540d\u524d\u306e\u901a\u308a\u3002\n\uff5b\u4e0e\u3048\u3089\u308c\u305f\u95a2\u6570(&T -> bool)\u304c true \u3092\u8fd4\u3059\u3082\u306e\u3060\u3051\u3092\u8fd4\u3059\u3088\u3046\u306a\u3001\u65b0\u305f\u306a\u30a4\u30c6\u30ec\u30fc\u30bf\uff5d\u3092\u8fd4\u3059\u3002\n\ntake(): Iterator<T> -> usize -> Iterator<T>\n\n\u540d\u524d\u306e\u901a\u308a\u3002\n\uff5b\u4e0e\u3048\u3089\u308c\u305f\u500b\u6570(usize)\u3076\u3093\u306e\u8981\u7d20\u3092\u8fd4\u3057\u3001\u305d\u308c\u4ee5\u964d\u306e\u8981\u7d20\u3092\u7121\u8996\u3059\u308b\u3088\u3046\u306a\u3001\u65b0\u305f\u306a\u30a4\u30c6\u30ec\u30fc\u30bf\uff5d\u3092\u8fd4\u3059\u3002\ntake() \u3057\u305f\u3082\u306e\u3068 skip() \u3057\u305f\u3082\u306e\u3092\u4e21\u65b9\u4f7f\u3044\u305f\u3044\u306e\u3067\u3042\u308c\u3070\u3001 by_ref() \u3092\u4f7f\u3046\u3053\u3068\u306b\u306a\u308b\u3002\u305d\u3063\u3061\u53c2\u7167\u3002\n\nskip(): Iterator<T> -> usize -> Iterator<T>\n\n\u540d\u524d\u306e\u901a\u308a\u3002\n\uff5b\u4e0e\u3048\u3089\u308c\u305f\u500b\u6570(usize)\u3076\u3093\u306e\u8981\u7d20\u3092\u7121\u8996\u3057\u3001\u305d\u308c\u4ee5\u964d\u306e\u8981\u7d20\u3092\u8fd4\u3059\u3088\u3046\u306a\u3001\u65b0\u305f\u306a\u30a4\u30c6\u30ec\u30fc\u30bf\uff5d\u3092\u8fd4\u3059\u3002\ntake() \u3057\u305f\u3082\u306e\u3068 skip() \u3057\u305f\u3082\u306e\u3092\u4e21\u65b9\u4f7f\u3044\u305f\u3044\u306e\u3067\u3042\u308c\u3070\u3001 by_ref() \u3092\u4f7f\u3046\u3053\u3068\u306b\u306a\u308b\u3002\u305d\u3063\u3061\u53c2\u7167\u3002\n\ntake_while(): Iterator<T> -> (&T -> bool) -> Iterator<T>\n\n\u540d\u524d\u306e\u901a\u308a\u3002\n\uff5b\u4e0e\u3048\u3089\u308c\u305f\u95a2\u6570(&T -> bool)\u304c true \u3092\u8fd4\u3057\u7d9a\u3051\u308b\u9593\u306f\u305d\u306e\u8981\u7d20\u3092\u8fd4\u3057\u3001\u6700\u521d\u306b false \u3092\u8fd4\u3057\u305f\u3082\u306e\u542b\u3081\u305d\u308c\u4ee5\u964d\u306e\u8981\u7d20\u3092\u7121\u8996\u3059\u308b\u3088\u3046\u306a\u3001\u65b0\u305f\u306a\u30a4\u30c6\u30ec\u30fc\u30bf\uff5d\u3092\u8fd4\u3059\u3002\n\u8981\u3059\u308b\u306b\u300c\u6700\u521d\u306b false \u306b\u306a\u3063\u305f\u3082\u306e\u3092\u542b\u307e\u305a\u3001\u305d\u308c\u4ee5\u524d\u300d\u3067\u3042\u308b\u3002\n\u3061\u3087\u3046\u3069 skip_while() \u306e\u53cd\u5bfe\u3060\u3002\ntake_while() \u3057\u305f\u3082\u306e\u3068 skip_while() \u3057\u305f\u3082\u306e\u3092\u4e21\u65b9\u4f7f\u3044\u305f\u3044\u306e\u3067\u3042\u308c\u3070\u3001 by_ref() \u3092\u4f7f\u3046\u3053\u3068\u306b\u306a\u308b\u3002\u305d\u3063\u3061\u53c2\u7167\u3002\n\u8a02\u6b63: take_while() \u306f\u3001\u4e0e\u3048\u305f\u6761\u4ef6\u3092\u6e80\u305f\u3055\u306a\u3044\u6700\u521d\u306e\u8981\u7d20\u3092\u6368\u3066\u3066\u3057\u307e\u3046\u306e\u3067\u3001 by_ref() \u3092\u4f7f\u3063\u3066\u3082\u99c4\u76ee\u3060\u3002\n\u7d20\u76f4\u306b\u30eb\u30fc\u30d7\u7b49\u3067\u66f8\u304f\u3079\u304d\u3060\u308d\u3046\u3002\n\nskip_while(): Iterator<T> -> (&T -> bool) -> Iterator<T>\n\n\u540d\u524d\u306e\u901a\u308a\u3002\n\uff5b\u4e0e\u3048\u3089\u308c\u305f\u95a2\u6570(&T -> bool)\u304c true \u3092\u8fd4\u3057\u7d9a\u3051\u308b\u9593\u306f\u305d\u306e\u8981\u7d20\u3092\u7121\u8996\u3057\u3001\u6700\u521d\u306b false \u3092\u8fd4\u3057\u305f\u3082\u306e\u542b\u3081\u305d\u308c\u4ee5\u964d\u306e\u8981\u7d20\u3092\u8fd4\u3059\u3088\u3046\u306a\u3001\u65b0\u305f\u306a\u30a4\u30c6\u30ec\u30fc\u30bf\uff5d\u3092\u8fd4\u3059\u3002\n\u8981\u3059\u308b\u306b\u300c\u6700\u521d\u306b false \u306b\u306a\u3063\u305f\u3082\u306e\u3092\u542b\u3081\u3001\u305d\u308c\u4ee5\u964d\u300d\u3067\u3042\u308b\u3002\ntake_while() \u3057\u305f\u3082\u306e\u3068 skip_while() \u3057\u305f\u3082\u306e\u3092\u4e21\u65b9\u4f7f\u3044\u305f\u3044\u306e\u3067\u3042\u308c\u3070\u3001 by_ref() \u3092\u4f7f\u3046\u3053\u3068\u306b\u306a\u308b\u3002\u305d\u3063\u3061\u53c2\u7167\u3002\n\u8a02\u6b63: take_while() \u306f\u3001\u4e0e\u3048\u305f\u6761\u4ef6\u3092\u6e80\u305f\u3055\u306a\u3044\u6700\u521d\u306e\u8981\u7d20\u3092\u6368\u3066\u3066\u3057\u307e\u3046\u306e\u3067\u3001 by_ref() \u3092\u4f7f\u3063\u3066\u3082\u99c4\u76ee\u3060\u3002\n\u7d20\u76f4\u306b\u30eb\u30fc\u30d7\u7b49\u3067\u66f8\u304f\u3079\u304d\u3060\u308d\u3046\u3002\n\n\u30a4\u30c6\u30ec\u30fc\u30bf\u304c\u6301\u3064\u8981\u7d20\u5168\u4f53\u306b\u3064\u3044\u3066\u4f55\u304b\u306e\u60c5\u5831\u3092\u5f97\u308b\u7cfb\n\u4ee5\u4e0b\u306e\u3082\u306e\u306f\u3001\u3060\u3044\u305f\u3044 Iterator<T> -> U (\u305f\u3060\u3057 U \u306f\u30a4\u30c6\u30ec\u30fc\u30bf\u3067\u306f\u306a\u3044) \u306e\u3088\u3046\u306a\u578b\u306b\u306a\u308b\u3002\n\u500b\u3005\u306e\u8981\u7d20(T \u578b)\u306b\u3064\u3044\u3066\u4f55\u304b\u3092\u5f04\u3063\u305f\u5024\u3092\u8fd4\u3059\u3068\u3044\u3046\u308f\u3051\u3067\u306f\u306a\u3044\u3002\n\u4e00\u822c\u7684\u306a\u60c5\u5831\u3092\u5f97\u308b\u306e\u3067\u3001\u5927\u62b5\u306e\u5834\u5408\u3001 U \u306f T \u3068\u306f\u76f4\u63a5\u306b\u306f\u6b86\u3069\u95a2\u4fc2\u306e\u306a\u3044\u578b\u306b\u306a\u308b\u3002\n\nsize_hint(): Iterator<T> -> (usize, Option<usize>)\n\n\u308f\u304b\u308b\u7bc4\u56f2\u3067\u306e\u6b8b\u308a\u306e\u8981\u7d20\u6570\u306e\u3001\u6700\u4f4e\u3068\u6700\u9ad8\u3092\u8fd4\u3059\u3002\n\u6700\u4f4e\u304c usize \u3067\u3001\u6700\u9ad8\u304c Option<usize> \u3060\u3002\n\u73cd\u3057\u3044\u3053\u3068\u306b\u3001\u3053\u306e\u95a2\u6570\u306f\u30a4\u30c6\u30ec\u30fc\u30bf\u3092consume \u3057\u306a\u3044\u3002\n\u30c7\u30d5\u30a9\u30eb\u30c8\u3067\u306f(\u3064\u307e\u308a\u500b\u3005\u306e\u30a4\u30c6\u30ec\u30fc\u30bf\u578b\u306b\u7279\u5225\u306b\u5b9f\u88c5\u3057\u306a\u3051\u308c\u3070)\u3001 (0, None) \u304c\u8fd4\u3055\u308c\u308b\u3002\n\u300c\u6b8b\u308a\u306e\u8981\u7d20\u306f\u6700\u4f4e0\u500b\u3067\u3001\u6700\u9ad8\u3067\u5e7e\u3064\u306a\u306e\u304b\u306f\u4e0d\u660e\u300d\u3068\u3044\u3046\u610f\u5473\u3060\u304b\u3089\u3001\u307e\u3042\u4f55\u3082\u8a00\u3063\u3066\u306a\u3044\u306e\u3068\u540c\u3058\u3060\u3002\n\u3053\u306e\u95a2\u6570\u306f\u5143\u3005\u306f\u3001\u30e1\u30e2\u30ea\u9818\u57df\u78ba\u4fdd\u306e\u969b\u306e\u6700\u9069\u5316\u306a\u3069\u3067\u306e\u5229\u7528\u3092\u610f\u56f3\u3057\u3066\u7528\u610f\u3055\u308c\u3066\u3044\u308b\u3089\u3057\u3044\u3002(\u305f\u3068\u3048\u3070\u3001 collect::<Vec<_>>() \u3068\u304b\u3067\u4e88\u3081reserve\u3057\u3066\u304a\u304f\u8981\u7d20\u6570\u3092\u898b\u7a4d\u3063\u3066\u52b9\u7387\u5316\u3092\u76ee\u8ad6\u3080\u3001\u3068\u304b\u3060\u308d\u3046\u3002)\n\u3057\u304b\u3057\u30a4\u30c6\u30ec\u30fc\u30bf\u5074\u3067\u306e\u5b9f\u88c5\u306b\u30d0\u30b0\u304c\u3042\u308b\u304b\u3082\u3057\u308c\u306a\u3044\u304b\u3089\u3001\u4fe1\u7528\u3057\u3059\u304e\u308b\u306a\u3088\u3001\u3068\u3082\u66f8\u3044\u3066\u3042\u308b\u3002\n\u7c21\u5358\u306a\u7528\u9014\u3067\u306f\u3001\u3053\u306e\u95a2\u6570\u3092\u4f7f\u3046\u6a5f\u4f1a\u306f\u306a\u3044\u3068\u8003\u3048\u3066\u826f\u3044\u3060\u308d\u3046\u3002\n\ncount(): Iterator<T> -> usize\n\n\u8981\u7d20\u3092\u6089\u304f\u8aad\u307f\u98db\u3070\u3057\u3001\u305d\u306e\u8981\u7d20\u6570\u3092\u8fd4\u3059\u3002\n\u6b63\u78ba\u306b\u306f\u3001\uff5b\u30a4\u30c6\u30ec\u30fc\u30bf(\u306e next())\u304c\u6700\u521d\u306b None \u3092\u8fd4\u3059\u307e\u3067\u306b\u8fd4\u3057\u305f\u8981\u7d20\uff5d\u306e\u500b\u6570\u3092\u8fd4\u3059\u3002\nsize_hint() \u3068\u306f\u9055\u3063\u3066\u3001\u30a4\u30c6\u30ec\u30fc\u30bf\u3092consume\u3059\u308b\u306e\u3067\u6ce8\u610f\u3002\n\nall(): Iterator<T> -> (T -> bool) -> bool\n\n\u540d\u524d\u306e\u901a\u308a\u3002\n\u8981\u7d20\u3092\u4e0e\u3048\u3089\u308c\u305f\u95a2\u6570(T -> bool)\u306b\u6e21\u3057\u305f\u3068\u304d\u3001\u3059\u3079\u3066\u306e\u8981\u7d20\u306b\u3064\u3044\u3066 true \u304c\u8fd4\u308c\u3070 true \u3092\u3001\u305d\u3046\u3067\u306a\u3051\u308c\u3070(\u3064\u307e\u308a1\u3064\u4ee5\u4e0a\u306e\u8981\u7d20\u3067 false \u3092\u8fd4\u308c\u3070) false \u3092\u8fd4\u3059\u3002\n\nany(): Iterator<T> -> (T -> bool) -> bool\n\n\u540d\u524d\u306e\u901a\u308a\u3002\n\u8981\u7d20\u3092\u4e0e\u3048\u3089\u308c\u305f\u95a2\u6570(T -> bool)\u306b\u6e21\u3057\u305f\u3068\u304d\u30011\u3064\u4ee5\u4e0a\u306e\u8981\u7d20\u306b\u3064\u3044\u3066 true \u304c\u8fd4\u308c\u3070 true \u3092\u3001\u305d\u3046\u3067\u306a\u3051\u308c\u3070(\u3064\u307e\u308a\u3059\u3079\u3066\u306e\u8981\u7d20\u3067 false \u304c\u8fd4\u308c\u3070) false \u3092\u8fd4\u3059\u3002\n\nposition(): Iterator<T> -> (T -> bool) -> Option<usize>\n\n\u4e0e\u3048\u3089\u308c\u305f\u95a2\u6570(T -> bool)\u3067 true \u3092\u8fd4\u3059\u3088\u3046\u306a\u6700\u521d\u306e\u8981\u7d20\u306e\u9806\u756a\u3092\u3001 Some \u3067\u8fd4\u3059\u3002\n\u305d\u306e\u3088\u3046\u306a\u8981\u7d20\u304c\u306a\u3051\u308c\u3070\u3001 None \u3092\u8fd4\u3059\u3002\n\u3082\u3057\u9806\u756a\u304c usize \u3067\u8868\u73fe\u3067\u304d\u308b\u6700\u5927\u5024\u3092\u8d85\u3048\u3066\u3044\u308c\u3070\u3001panic\u3059\u308b(\u30e1\u30a4\u30f3\u30b9\u30ec\u30c3\u30c9\u3060\u3063\u305f\u3089\u666e\u901a\u3060\u3068\u843d\u3061\u308b)\u306e\u3067\u6ce8\u610f\u3002\n(\u3068\u306f\u3044\u3048\u3001\u666e\u901a\u306b\u4f7f\u3063\u3066\u3044\u308c\u3070\u554f\u984c\u306b\u306f\u306a\u3089\u306a\u3044\u306f\u305a\u3002)\n\nrposition(): I -> (T -> bool) -> Option<usize> (\u305f\u3060\u3057 I \u306f ExactSizeIterator<T> \u304b\u3064 DoubleEndedIterator<T>)\n\u4e0e\u3048\u3089\u308c\u305f\u95a2\u6570(T -> bool)\u3067 true \u3092\u8fd4\u3059\u3088\u3046\u306a\u6700\u5f8c\u306e\u8981\u7d20\u306e(\u6700\u521d\u5074\u304b\u3089\u6570\u3048\u3066\u306e)\u9806\u756a\u3092\u3001 Some \u3067\u8fd4\u3059\u3002\n\u305d\u306e\u3088\u3046\u306a\u8981\u7d20\u304c\u306a\u3051\u308c\u3070\u3001 None \u3092\u8fd4\u3059\u3002\n\u3053\u308c\u3092\u4f7f\u3048\u308b\u30a4\u30c6\u30ec\u30fc\u30bf\u306f\u6761\u4ef6\u304c\u5c11\u3057\u53b3\u3057\u304f\u3001\u8981\u7d20\u6570\u304c\u4e8b\u524d\u306b\u6b63\u3057\u304f\u308f\u304b\u3063\u3066\u304a\u308a\u3001\u304b\u3064\u5f8c\u308d\u304b\u3089\u8fbf\u308c\u308b\u5fc5\u8981\u304c\u3042\u308b\u3002\n\u914d\u5217(array\u3084slice)\u3084 Vec<T> \u306a\u3069\u306f\u305d\u306e\u6761\u4ef6\u3092\u6e80\u305f\u3059\u3002\n\n\u30a4\u30c6\u30ec\u30fc\u30bf\u3072\u3068\u3064\u3092\u3001\u4e2d\u8eab\u3092\u307b\u3068\u3093\u3069\u5909\u3048\u305a\u3001\u5f79\u7acb\u3064\u5f62\u306b\u4f5c\u308a\u66ff\u3048\u308b\u7cfb (\u5f37\u5316\u7cfb)\n\u4ee5\u4e0b\u306e\u3082\u306e\u306f\u3001\u69d8\u3005\u306a\u578b\u306e\u5024\u3092\u8fd4\u3059\u304c\u3001\u3060\u3044\u305f\u3044\u304c Iterator<T> -> Iterator<T> \u3068\u304b Iterator<T> -> Iterator<&T> \u3068\u304b\u3067\u3042\u308b\u3002\n\u304c\u3001\u300c\u5143\u306e\u30a4\u30c6\u30ec\u30fc\u30bf\u306e\u8981\u7d20\u81ea\u4f53\u306b\u306f(\u6b86\u3069)\u624b\u3092\u52a0\u3048\u306a\u3044\u300d\u70b9\u306f\u5171\u901a\u3057\u3066\u3044\u308b\u3002\n\npeekable(): Iterator<T> -> Iterator<T>\n\npeek() \u3068\u3044\u3046\u30e1\u30f3\u30d0\u95a2\u6570\u304c\u4f7f\u3048\u308b\u3088\u3046\u306a\u65b0\u305f\u306a\u30a4\u30c6\u30ec\u30fc\u30bf(Peekable<T>)\u3092\u8fd4\u3059\u3002\npeek() \u306e\u578b\u306f\u3001 Peekable<T> -> Option<&T> \u3067\u3042\u308b\u3002\n\u540d\u524d\u306e\u901a\u308a\u3001\u5024\u3092\u53d6\u5f97\u3057\u3066\u30a4\u30c6\u30ec\u30fc\u30bf\u5074\u304b\u3089\u596a\u3044\u53bb\u308b\u524d\u306b\u3001\u524d\u4ee5\u3066\u53c2\u7167\u3092\u8cb0\u3063\u3066\u4e2d\u8eab\u3092\u78ba\u8a8d\u3067\u304d\u308b\u3068\u3044\u3046\u308f\u3051\u3060\u3002\n\ncloned(): Iterator<&T> -> Iterator<T>\n\niter.cloned() \u306f\u3001 iter.map(|r| r.clone()) \u306e\u3088\u3046\u306b\u52d5\u4f5c\u3059\u308b\u3002\n(\u5b9f\u969b\u306e\u5b9f\u88c5\u3067\u306f\u3001\u5143\u306e\u30a4\u30c6\u30ec\u30fc\u30bf\u306e next() \u306e\u7d50\u679c\u306b\u3064\u3044\u3066Option::cloned()\u3092\u547c\u3073\u51fa\u3059\u3088\u3046\u306b\u306a\u3063\u3066\u3044\u308b\u3002)\n\u8981\u3059\u308b\u306b\u3001\u53c2\u7167\u306e\u30a4\u30c6\u30ec\u30fc\u30bf\u3092\u3001\u6240\u6709\u6a29\u306e\u3042\u308b(clone\u3055\u308c\u305f)\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u30a4\u30c6\u30ec\u30fc\u30bf\u306b\u3059\u308b\u305f\u3081\u306e\u3082\u306e\u3060\u3002\n\u306a\u304a\u3001\u53c2\u7167\u306e\u30a4\u30c6\u30ec\u30fc\u30bf\u3067\u306a\u3044\u3082\u306e\u306b\u3064\u3044\u3066 cloned() \u3092\u547c\u3076\u3053\u3068\u306f\u3067\u304d\u306a\u3044(\u578b\u30a8\u30e9\u30fc\u306b\u306a\u308b)\u306e\u3067\u3001\u3044\u3064\u3067\u3082 cloned() \u3092\u4f7f\u3063\u3066\u304a\u3051\u3070\u3044\u3044\u3068\u3044\u3046\u3082\u306e\u3067\u3082\u306a\u3044\u3002\n\u5fc5\u8981\u306a\u3068\u304d\u306b\u3060\u3051\u4f7f\u304a\u3046\u3002\n\nfuse(): Iterator<T> -> Iterator<T>\n\n\uff5b\u5143\u306e\u30a4\u30c6\u30ec\u30fc\u30bf(\u306e next())\u304c\u4e00\u5ea6\u3067\u3082 None \u3092\u8fd4\u3057\u305f\u3089\u3001\u305d\u308c\u4ee5\u964d\u5fc5\u305a None \u3092\u8fd4\u3059\u3088\u3046\u306a\u3001\u65b0\u305f\u306a\u30a4\u30c6\u30ec\u30fc\u30bf\uff5d\u3092\u8fd4\u3059\u3002\n\u96fb\u5b50\u90e8\u54c1\u306e\u30d2\u30e5\u30fc\u30ba\u307f\u305f\u3044\u306a\u3082\u306e\u3067\u3001\u4e00\u5ea6\u8981\u7d20\u304c\u5207\u308c\u305f\u3089\u518d\u3073\u7e4b\u304c\u308b\u3053\u3068\u306f\u306a\u3044\u3001\u3068\u3044\u3046\u3053\u3068\u3060\u3002\nNone \u306e\u5f8c\u306b\u518d\u3073 Some \u3092\u8fd4\u3059\u30a4\u30c6\u30ec\u30fc\u30bf\u3068\u3044\u3046\u306e\u304c\u3069\u3093\u306a\u3082\u306e\u304b\u306f\u3001\u516c\u5f0f\u306b(\u82e5\u5e72\u5f37\u5f15\u306a\u6c17\u306f\u3059\u308b\u304c)\u4f8b\u304c\u8f09\u3063\u3066\u3044\u308b\u306e\u3067\u3001\u6c17\u306b\u306a\u308b\u306e\u3067\u3042\u308c\u3070\u53c2\u7167\u3055\u308c\u305f\u3057\u3002\n\u307e\u305f\u3001\u5b9f\u7528\u7684\u306a\u4f8b\u3068\u3057\u3066\u306f\u3001\u30e1\u30c3\u30bb\u30fc\u30b8\u30ad\u30e5\u30fc\u306e\u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u9806\u6b21\u53d6\u5f97\u3059\u308b\u30a4\u30c6\u30ec\u30fc\u30bf(\u305f\u3068\u3048\u3070glutin::PollEventsIterator - Rust\u7b49)\u304c\u3042\u308b\u3002\n\u3053\u308c\u306f\u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u4e00\u5ea6\u3059\u3079\u3066\u8aad\u307f\u5207\u3063\u3066 None \u304c\u8fd4\u3063\u3066\u304d\u305f\u3068\u3057\u3066\u3082\u3001\u305d\u306e\u5f8c\u307e\u305f\u30e1\u30c3\u30bb\u30fc\u30b8\u304c\u5230\u7740\u3059\u308c\u3070 Some \u304c\u8fd4\u308b\u3088\u3046\u306a\u30a4\u30c6\u30ec\u30fc\u30bf\u3060\u3002\n\nby_ref(): Iterator<T> -> &Iterator<T>\n\n\u30a4\u30c6\u30ec\u30fc\u30bf\u3092consume \u305b\u305a\u306b\u3001\u305d\u306e\u30a4\u30c6\u30ec\u30fc\u30bf\u306emutable\u306a\u53c2\u7167\u3092\u8fd4\u3059\u3002\n\u3053\u3044\u3064\u306f\u3061\u3087\u3063\u3068\u7279\u6b8a\u3060\u3002\n\u30a4\u30c6\u30ec\u30fc\u30bf\u3092\u5225\u306e\u30a4\u30c6\u30ec\u30fc\u30bf\u306b\u5909\u5316\u3055\u305b\u308b\u7cfb(map() \u3068\u304b take() \u3068\u304b)\u306e\u95a2\u6570\u306e\u5927\u534a\u306f\u3001\u5143\u306e\u30a4\u30c6\u30ec\u30fc\u30bf\u3092\u6d88\u8cbb(consume)\u3057\u3066\u65b0\u305f\u306a\u30a4\u30c6\u30ec\u30fc\u30bf\u3092\u8fd4\u3059\u3002\n\u3057\u304b\u3057\u3001\u305f\u3068\u3048\u3070\u300c take() \u3057\u305f\u30a4\u30c6\u30ec\u30fc\u30bf\u306e\u6b8b\u308a\u3092\u3001\u307e\u305f\u5f8c\u3067\u4f7f\u3044\u305f\u3044\u300d\u306a\u3069\u306e\u5834\u5408\u3001 take() \u306e\u6642\u70b9\u3067\u5143\u306e\u30a4\u30c6\u30ec\u30fc\u30bf\u306e\u6240\u6709\u6a29\u3092\u5931\u3063\u3066\u306f\u56f0\u308b\u308f\u3051\u3060\u3002\nlet vec_iter = (40..46).collect::<Vec<_>>().into_iter();\n\nprintln!(\"first three:\");\nfor (i, n) in vec_iter.take(3).enumerate() {\n    println!(\"{}: {}\", i, n);\n}\n\nprintln!(\"rest:\");\nfor (i, n) in vec_iter.enumerate() { // <- \u30a8\u30e9\u30fc\uff01\n    // \u2191 \"use of moved value: `vec_iter` [E0382]\"\n    println!(\"{}: {}\", i, n);\n}\n\n\u4e0a\u306e\u4f8b\u3060\u3068\u3001\u4e8c\u5ea6\u76ee\u306b\u4f7f\u3044\u305f\u3044\u3068\u304d(\u30a8\u30e9\u30fc\u306e\u884c)\u3001\u65e2\u306b vec_iter \u306f vec_iter.take(3) \u306b\u3088\u3063\u3066consume\u3055\u308c\u3066\u304a\u308a\u3001\u547c\u3073\u51fa\u3057\u5143\u306e\u30b3\u30fc\u30c9\u306f vec_iter \u306e\u6240\u6709\u6a29\u3092\u5931\u3063\u3066\u3044\u308b\u305f\u3081\u3001\u6b21\u306e\u4f7f\u7528(vec_iter.enumerate())\u3067\u30a8\u30e9\u30fc\u306b\u306a\u3063\u305f\u308f\u3051\u3060\u3002\n\u3067\u3001\u3069\u3046\u3059\u308b\u304b\u3068\u3044\u3046\u3068\u3001\u3053\u3046\u3059\u308b\u3002\n// \u30a4\u30c6\u30ec\u30fc\u30bf\u306f\u4f55\u5ea6\u3082\u4f7f\u3046(\u304b\u3064\u72b6\u614b\u304c\u5909\u66f4\u3055\u308c\u308b)\u306e\u3067\u3001mutable\u306b\u3059\u308b\nlet mut vec_iter = (40..46).collect::<Vec<_>>().into_iter();\n\nprintln!(\"first three:\");\n// `by_ref()` \u3057\u3066\u304b\u3089 `take()` \u3059\u308b\nfor (i, n) in vec_iter.by_ref().take(3).enumerate() {\n    println!(\"{}: {}\", i, n);\n}\n\nprintln!(\"rest:\");\nfor (i, n) in vec_iter.enumerate() { // <- \u304a\uff4b\n    println!(\"{}: {}\", i, n);\n}\n\n\u3053\u308c\u306f\u30b3\u30f3\u30d1\u30a4\u30eb\u3067\u304d\u3001\u6b63\u3057\u304f\u52d5\u4f5c\u3059\u308b\u3002\n\u3082\u3061\u308d\u3093\u3001\u51fa\u529b\u306f\u3053\u3046\u306a\u308b\u3002\noutput:\n0: 40\n1: 41\n2: 42\nrest:\n0: 43\n1: 44\n2: 45\n\n\n\u53c2\u8003\u307e\u3067\u306b\n\u578b\u3092\u898b\u308c\u3070\u308f\u304b\u308b\u3068\u304a\u308a\u3001 iter.by_ref() \u3068\u3044\u3046\u306e\u306f\u3001\u3064\u307e\u308a (&mut iter) \u3068\u540c\u3058\u306a\u306e\u3060\u304c\u3001C++\u7b49\u306b\u99b4\u67d3\u3093\u3067\u3044\u308b\u4eba\u306b\u306f\u3053\u306e\u30b3\u30fc\u30c9\u306f\u76f4\u89b3\u7684\u306b\u308f\u304b\u308a\u304b\u306d\u308b\u3060\u308d\u3046(\u5c11\u306a\u304f\u3068\u3082\u79c1\u306f\u305d\u3046\u3060\u3063\u305f)\u3002\n\u516c\u5f0f\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u306e\u3001Iterator trait\u3092\u5b9f\u88c5\u3057\u3066\u3044\u308b\u578b\u306e\u30ea\u30b9\u30c8\u3092\u3088\u301c\u304f\u898b\u308b\u3068\u3001\nimpl<'a, I> Iterator for &'a mut I where I: Iterator + ?Sized\n\u3068\u3044\u3046\u306e\u304c\u3042\u308b\u3002\n\u300c\u4efb\u610f\u306e\u30a4\u30c6\u30ec\u30fc\u30bf\u578b I \u306b\u3064\u3044\u3066\u3001 &mut I \u578b\u306f Iterator trait\u3092\u5b9f\u88c5\u3057\u3066\u3044\u308b\u300d\u3068\u3044\u3046\u610f\u5473\u3060\u3002\n\u5b9f\u306fRust\u3067\u306f\u3001\u30dd\u30a4\u30f3\u30bf\u306e\u3088\u3046\u306a\u578b\u306b\u3064\u3044\u3066\u3082\u30e1\u30f3\u30d0\u95a2\u6570(\u306e\u3088\u3046\u306a\u3082\u306e)\u3092\u5b9f\u88c5\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u3001\u3053\u306e\u5834\u5408\u3067\u306f\u300c\u30a4\u30c6\u30ec\u30fc\u30bf\u306e\u30dd\u30a4\u30f3\u30bf\u300d\u306b\u3064\u3044\u3066 next() \u7b49\u306e\u30e1\u30f3\u30d0\u95a2\u6570\u3092\u5b9f\u88c5\u3057\u3066\u3044\u308b\u3002\n\u305d\u3057\u3066\u3001 iter.by_ref().take(3) \u3084 (&mut iter).take(3) \u3068\u3044\u3046\u306e\u306f\u3001 iter \u305d\u306e\u3082\u306e\u3067\u306f\u306a\u304f\u3001 iter \u3078\u306e\u53c2\u7167\u306b\u3064\u3044\u3066 take() \u3092\u547c\u3073\u51fa\u3057\u3066\u3044\u308b\u306e\u3060\u3002\n\u3067\u3001 Iterator::take(&mut iter, 3) \u306e\u3088\u3046\u306a\u5f62\u3067\u547c\u3073\u51fa\u3055\u308c\u308b\u304b\u3089\u3001 iter \u306fconsume\u3055\u308c\u305a\u3001\u6240\u6709\u6a29\u3082\u6301\u3063\u305f\u307e\u307e\u3067\u3044\u3089\u308c\u308b\u3001\u3068\u3044\u3046\u539f\u7406\u3060\u3002\n\u53c2\u8003\u307e\u3067\u306b\u3001\u8a72\u5f53\u7b87\u6240\u306e\u30bd\u30fc\u30b9 (github)\u306e\u5f15\u7528\u3082\u3057\u3066\u304a\u3053\u3046\u3002\n\n#[stable(feature = \"rust1\", since = \"1.0.0\")]\nimpl<'a, I: Iterator + ?Sized> Iterator for &'a mut I {\n    type Item = I::Item;\n    fn next(&mut self) -> Option<I::Item> { (**self).next() }\n    fn size_hint(&self) -> (usize, Option<usize>) { (**self).size_hint() }\n}\n\n\n\ninspect(): Iterator<T> -> (&T -> ()) -> Iterator<T>\n\n\uff5b\u30a4\u30c6\u30ec\u30fc\u30bf\u306e\u8981\u7d20\u304c\u5fc5\u8981\u3068\u3055\u308c\u308b\u6bce\u306b\u3001\u305d\u306e\u8981\u7d20\u3092\u526f\u4f5c\u7528\u306e\u3042\u308b\u95a2\u6570\u306b\u6e21\u3057\u3066\u5b9f\u884c\u3059\u308b\u3088\u3046\u306a\u3001\u65b0\u305f\u306a\u30a4\u30c6\u30ec\u30fc\u30bf\uff5d\u3092\u8fd4\u3059\u95a2\u6570\u3002\n\u8981\u3059\u308b\u306b\u3001\u4e2d\u8eab\u3092\u8997\u304d\u898b\u3067\u304d\u308b\u3002\nRuby\u3067\u8a00\u3046\u3068\u3053\u308d\u306e tap \u3060\u3002\n(\u53c2\u8003: Tap\u304cRuby\u306e\u65b0\u305f\u306a\u5236\u5fa1\u69cb\u9020\u306e\u4e16\u754c\u3092\u958b\u304f)\n\u516c\u5f0f\u306e\u30b3\u30fc\u30c9\u4f8b\u3092\u898b\u308c\u3070\u3001\u4f55\u3082\u304b\u3082\u7406\u89e3\u3067\u304d\u308b\u3053\u3068\u3060\u308d\u3046\u3002\n\n\u30a4\u30c6\u30ec\u30fc\u30bf\u3072\u3068\u3064\u3092\u3001\u9806\u3092\u5909\u5316\u3055\u305b\u305f\u308a\u60c5\u5831\u3092\u4ed8\u968f\u3055\u305b\u305f\u308a\u3057\u3066\u3001\u5f79\u7acb\u3064\u5f62\u306b\u4f5c\u308a\u66ff\u3048\u308b\u7cfb (\u9032\u5316\u7cfb)\n\u4ee5\u4e0b\u306e\u3082\u306e\u306f\u3001\u69d8\u3005\u306a\u578b\u306e\u5024\u3092\u8fd4\u3059\u3002\n\u304c\u3001\u300c\u5143\u306e\u30a4\u30c6\u30ec\u30fc\u30bf\u306e\u8981\u7d20\u81ea\u4f53\u306b\u306f(\u6b86\u3069)\u624b\u3092\u52a0\u3048\u306a\u3044\u300d\u70b9\u306f\u5171\u901a\u3057\u3066\u3044\u308b\u3002\n\nenumerate(): Iterator<T> -> Iterator<(usize, T)>\n\n\uff5bT \u3092\u8fd4\u3059\u30a4\u30c6\u30ec\u30fc\u30bf\u304b\u3089\u3001 enumerate() \u3092\u547c\u3093\u3060\u6642\u70b9\u3092\u6700\u521d\u3068\u3057\u3066\u3001\u8981\u7d20\u306e\u9806\u756a\u3092 (\u9806\u756a, T) \u306e\u5f62\u3067\u4e00\u7dd2\u306b\u8fd4\u3059\u3088\u3046\u306a\u3001\u65b0\u305f\u306a\u30a4\u30c6\u30ec\u30fc\u30bf\uff5d\u3092\u8fd4\u3059\u3002\niter.enumerate() \u306f\u3001 (0_usize..).zip(iter) \u3068\u540c\u7fa9\u3067\u3042\u308b\u3002\n\u3082\u3057 usize \u4ee5\u5916\u306e\u8981\u7d20\u3067\u9806\u756a\u304c\u5fc5\u8981\u306a\u306e\u3067\u3042\u308c\u3070\u3001 zip() \u3092\u4f7f\u3063\u305f\u65b9\u304c\u826f\u3044\u3002\n\ncycle(): Iterator<T> -> Iterator<T>\n\n\u30a4\u30c6\u30ec\u30fc\u30bf\u3092\u6c38\u9060\u306b\u30eb\u30fc\u30d7\u3055\u305b\u308b\u3002\n\u3064\u307e\u308a\u3001\u6700\u5f8c\u306e\u8981\u7d20\u306e\u6b21\u306b\u3001\u307e\u305f\u6700\u521d\u306e\u8981\u7d20\u304b\u3089\u7e70\u308a\u8fd4\u3059\u3002\n(\u5143\u306e\u30a4\u30c6\u30ec\u30fc\u30bf(\u306e next()) \u304c None \u3092\u8fd4\u3059\u3088\u3046\u306a\u5834\u5408\u3001\u30a4\u30c6\u30ec\u30fc\u30bf\u306e\u72b6\u614b\u304c cycle() \u547c\u3073\u51fa\u3057\u76f4\u5f8c\u3068\u540c\u3058\u306b\u306a\u308b\u2026\u2026\u3068\u3044\u3046\u30a4\u30e1\u30fc\u30b8\u3002\u4f1d\u308f\u308c\uff01)\n\u516c\u5f0f\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u306e\u4f8b\u3092\u898b\u305f\u65b9\u304c\u65e9\u3044\u6c17\u306f\u3057\u305f\u3002\n\nscan(): Iterator<T> -> (&mut S -> T -> Option<B>) -> Iterator<B>\n\nfold() \u306e\u9014\u4e2d\u7d4c\u904e\u304c\u898b\u3048\u308b\u7248\u3002\nS \u306f\u72b6\u614b\u3001 B \u306f\u65b0\u3057\u3044\u30a4\u30c6\u30ec\u30fc\u30bf\u304c\u5410\u304f\u578b\u3060\u3002\n\u8a73\u3057\u304f\u306f\u516c\u5f0f\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u306e\u4f8b\u3092\u898b\u308c\u3070\u308f\u304b\u308b\u304c\u3001\u6e21\u3057\u305f\u95a2\u6570\u304c\u3001\u72b6\u614b\u306e\u66f4\u65b0\u3068\u3001\u6b21\u306b\u30a4\u30c6\u30ec\u30fc\u30bf\u304c\u8fd4\u3059\u5024\u306e\u8a08\u7b97\u306e\u4e21\u65b9\u3092\u62c5\u3063\u3066\u3044\u308b\u3002\n\u516c\u5f0f\u3068\u306f\u5225\u306e\u4f8b\u3082\u51fa\u3057\u3066\u307f\u3088\u3046\u3002\u304a\u306a\u3058\u307f\u30d5\u30a3\u30dc\u30ca\u30c3\u30c1\u6570\u5217\u3060\u3002\n\n\u4f8b\nlet fib = (0..12).scan((0, 1), |prev, _| {\n        let ret = prev.0;\n        *prev = (prev.1, prev.0 + prev.1);\n        Some(ret)\n    })\n    .collect::<Vec<_>>();\nprintln!(\"fib: {:?}\", fib);\n\n\n\n\u5b9f\u884c\u7d50\u679c\nfib: [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89]\n\n\n\u3079\u3064\u306b\u30eb\u30fc\u30d7\u3067\u3084\u308c\u3070\u3044\u3044\u8a71\u3067\u306f\u3042\u308b\u306e\u3060\u304c\u3001\u307e\u3042\u3068\u306b\u304b\u304f\u72b6\u614b\u3092\u6301\u3066\u308b\u3068\u3044\u3046\u3053\u3068\u306f\u666e\u901a\u306e\u30eb\u30fc\u30d7\u3063\u307d\u3044\u3053\u3068\u304c\u3067\u304d\u308b\u3068\u3044\u3046\u3053\u3068\u3060\u3002\n(\u4f55\u304b\u3044\u3044\u4f8b\u52df\u96c6\u4e2d)\n\u4f8b\u306f\u30b3\u30e1\u30f3\u30c8\u3092\u53c2\u7167\u3002\n\nrev(): DoubleEndedIterator<T> -> DoubleEndedIterator<T>\n\n\u540d\u524d\u306e\u901a\u308a\u3002\n\uff5b\u5143\u306e\u30a4\u30c6\u30ec\u30fc\u30bf\u3068\u306f\u9806\u756a\u3092\u9006\u306b\u3057\u3066\u8fd4\u3059\u3088\u3046\u306a\u3001\u65b0\u305f\u306a\u30a4\u30c6\u30ec\u30fc\u30bf\uff5d\u3092\u8fd4\u3059\u3002\n\n\u53c2\u8003\nDoubleEndedIterator<T> \u3068\u3044\u3046\u306e\u306f\u3001\u6700\u5f8c\u5c3e\u304b\u3089\u524d\u3078\u3068\u8fbf\u308c\u308b\u30a4\u30c6\u30ec\u30fc\u30bf\u306e\u3053\u3068\u3060\u3002\n(\u5358\u306b\u5f8c\u308d\u5411\u304d\u306b\u9032\u3081\u308b\u30a4\u30c6\u30ec\u30fc\u30bf\u3068\u3044\u3046\u308f\u3051\u3067\u306f\u306a\u3044\u3002)\nC++\u3067\u8a00\u3046\u3068\u3053\u308d\u306e\u3001\u5f8c\u308d\u5411\u304d\u306b\u9032\u3080ForwardIterator\u3067\u3042\u308a\u3001BidirectionalIterator\u3067\u306f\u306a\u3044\u3002\nDoubleEndedIterator<T> \u306f\u3001 Iterator<T> \u3067\u3082\u3042\u308b\u304c\u3001\u305d\u308c\u306b\u52a0\u3048\u3066 next_back() \u3068\u3044\u3046\u30e1\u30f3\u30d0\u95a2\u6570\u3092\u6301\u3063\u3066\u3044\u308b\u3002\n\u305d\u306e\u52d5\u4f5c\u306b\u3064\u3044\u3066\u306f\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8(\u524d\u30ea\u30f3\u30af)\u3092\u898b\u308b\u3079\u3057\u3002\n\n\u30a4\u30c6\u30ec\u30fc\u30bf\u3075\u305f\u3064\u3092\u7d44\u307f\u5408\u308f\u305b\u3066\u3001\u5f79\u7acb\u3064\u5f62\u306b\u4f5c\u308a\u66ff\u3048\u308b\u7cfb (\u5408\u4f53\u7cfb)\n\u4ee5\u4e0b\u306e\u3082\u306e\u306f\u3001 Iterator<T> -> Iterator<U> -> Iterator<T\u3068U\u306b\u95a2\u4fc2\u3042\u308b\u578b> \u306e\u3088\u3046\u306a\u611f\u3058\u3067\u3042\u308b\u3002\n\nchain(): Iterator<T> -> IntoIterator<T> -> Iterator<T>\n\n\u30a4\u30c6\u30ec\u30fc\u30bf\u3092\u7e4b\u3052\u308b\u3002\niter1.chain(iter2) \u306f\u3001 iter1 \u304b\u3089\u8981\u7d20\u3092\u5168\u90e8\u8aad\u307f\u304d\u3063\u305f\u5f8c\u3001\u7d9a\u3051\u3066 iter2 \u306e\u8981\u7d20\u3092\u8fd4\u3059\u3002 iter2 \u306e\u8981\u7d20\u3082\u5168\u90e8\u8aad\u3093\u3060\u3089\u3001\u4eca\u5ea6\u3053\u305d\u7d42\u308f\u308a\u3068\u306a\u308b\u3002\nIntoIterator<T> \u3068\u3044\u3046\u306e\u306f\u3001\u3064\u307e\u308a\u96d1\u306b\u8a00\u3048\u3070\u300c Iterator<T> \u306b\u5909\u63db\u53ef\u80fd\u300d\u3068\u3044\u3046\u3053\u3068\u3060\u3002\n\u81ea\u660e\u306a\u4f8b\u3067\u306f\u3001 Iterator<T> \u306a\u3069\u306f IntoIterator<T> \u3067\u3082\u3042\u308b\u3002\n\u4ed6\u306b\u3082\u3001 Vec<T> \u306f Iterator<T> \u306b\u5909\u63db\u3067\u304d\u308b(\u6b63\u78ba\u306b\u306f impl<T> IntoIterator for Vec<T> \u3067\u5b9f\u88c5\u3055\u308c\u3066\u3044\u308b)\u306e\u3067\u3001 Iterator<T>::chain() \u306b Vec<T> \u3092\u6e21\u3059\u3001\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u30b3\u30fc\u30c9\u3082\u66f8\u3051\u308b\u3002\nfor i in vec![1, 2, 3].into_iter().chain(vec![4, 5, 6]) {\n    println!(\"{}\", i);\n}\n\n\u307e\u305f\u3001 iter1.chain(iter2).chain(iter3) \u306a\u3069\u306e\u3088\u3046\u306b\u8907\u6570\u3092\u4e00\u6c17\u306b\u7e4b\u3052\u308b\u3053\u3068\u3082\u3067\u304d\u308b\u3002\n\nzip(): Iterator<T> -> IntoIterator<U> -> Iterator<(T, U)>\n\n2\u3064\u306e\u30a4\u30c6\u30ec\u30fc\u30bf\u304b\u3089\u3001\uff5b\u4e21\u65b9\u306e\u8981\u7d20\u3092\u9806\u306b\u53d6\u3063\u3066\u3001\u305d\u306e\u30da\u30a2\u3092\u8fd4\u3059\u3088\u3046\u306a\u30a4\u30c6\u30ec\u30fc\u30bf\uff5d\u3092\u4f5c\u308b\u3002\n\u3053\u3053\u3067\u8aac\u660e\u3059\u308b\u3088\u308a\u3001\u516c\u5f0f\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u306e\u4f8b\u3092\u898b\u305f\u65b9\u304c\u65e9\u3044\u3060\u308d\u3046\u3002\nIntoIterator<U> \u306b\u3064\u3044\u3066\u306f\u3001 chain() \u306e\u3068\u3053\u308d\u3067\u8aac\u660e\u3057\u305f\u901a\u308a\u3060\u3002\n\n\u30a4\u30c6\u30ec\u30fc\u30bf\u304c\u6301\u3064\u500b\u3005\u306e\u8981\u7d20\u3092\u5909\u66f4\u3057\u3066\u6d41\u3059\u7cfb (\u52a0\u5de5\u7cfb)\n\u578b\u306f\u3001\u3060\u3044\u305f\u3044 Iterator<T> -> (T -> U) -> U\u306b\u95a2\u4fc2\u3059\u308b\u30a4\u30c6\u30ec\u30fc\u30bf\u578b \u307f\u305f\u3044\u306a\u611f\u3058\u3067\u3042\u308b\u3002\n\nmap(): Iterator<T> -> (T -> U) -> Iterator<U>\n\n\u540d\u524d\u304b\u3089\u60f3\u50cf\u3067\u304d\u308b\u901a\u308a\u3060\u3002\n\u5c11\u3057\u3060\u3051\u6ce8\u610f\u304c\u5fc5\u8981\u306a\u306e\u306f\u3001 map() \u7b49\u306f\u57fa\u672c\u7684\u306b\u8a55\u4fa1\u304c\u9045\u5ef6\u3055\u308c\u308b\u306e\u3067\u3001\u3053\u308c\u5358\u4f53\u3067\u306f for \u6587\u306e\u4ee3\u308f\u308a\u306b\u306f\u4f7f\u3048\u306a\u3044\u3068\u3044\u3046\u3053\u3068\u3067\u3042\u308b\u3002\n\u308f\u304b\u308a\u3084\u3059\u3044\u30b3\u30fc\u30c9\u3092\u66f8\u304f\u306e\u306a\u3089\u3001\u3042\u304f\u307e\u3067\u5024\u3092\u5909\u5316\u3055\u305b\u308b\u305f\u3081\u306b\u4f7f\u3046\u3079\u304d\u3060\u308d\u3046\u3002\n\nfliter_map(): Iterator<T> -> (T -> Option<U>) -> Iterator<U>\n\n\u30a4\u30c6\u30ec\u30fc\u30bf\u306b\u5bfe\u3057\u3066\u3001\uff5b\u8981\u7d20\u3092\u53d7\u3051\u53d6\u3063\u3066 Option \u3092\u8fd4\u3059\u95a2\u6570\uff5d\u3092\u9069\u7528\u3057\u3001 Some \u3060\u3063\u305f\u3082\u306e\u306e\u4e2d\u8eab\u3060\u3051\u3092\u7e4b\u3052\u3066\u8fd4\u3059\u95a2\u6570\u3002\n\u8981\u3059\u308b\u306b\u3001\u540d\u524d\u306e\u901a\u308a filter \u3068 map \u3092\u540c\u6642\u306b\u884c\u3046\u3068\u3044\u3046\u3053\u3068\u3060\u3002\n\u5225\u306e\u30a4\u30e1\u30fc\u30b8\u3068\u3057\u3066\u306f\u3001Option \u306e\u30a4\u30c6\u30ec\u30fc\u30bf\u306b\u3064\u3044\u3066\u3001\u5185\u5074\u306e Some \u3092\u5265\u304c\u3059(unwrap\u3059\u308b)\u611f\u899a\u3060\u3002\n\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u30b3\u30fc\u30c9\u304c:\n\n\u4f8b1\nfor temp_opt in iter.map(foo) {\n    if let Some(i) = temp_opt {\n        bar(i);\n    }\n}\n\n\n\n\u4f8b2\nfor temp_iter in iter.map(foo).filter(Option::is_some).map(Option::unwrap) {\n    bar(i);\n}\n\n\nfilter_map \u3092\u4f7f\u3046\u3068\u3001\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u3067\u304d\u308b:\nfor i in iter.filter_map(foo) {\n    bar(i);\n}\n\n\u7d50\u69cb\u4fbf\u5229\u3060\u3002\n\u516c\u5f0f\u306e\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u3067\u306f\u3001\u300c\u5931\u6557\u3059\u308b\u304b\u3082\u3057\u308c\u306a\u3044(Result \u3092\u8fd4\u3059)\u95a2\u6570\u3067map\u3057\u3001\u305d\u306e\u7d50\u679c\u304b\u3089 Ok \u306a\u3082\u306e\u3060\u3051\u3092\u53d6\u308a\u51fa\u3057\u3066\u3001\u305d\u306e\u4e2d\u8eab\u3092\u5217\u6319\u3059\u308b\u30a4\u30c6\u30ec\u30fc\u30bf\u3092\u8fd4\u3059\u300d\u3001\u8981\u3059\u308b\u306b\u6210\u529f\u4f8b\u3060\u3051\u3092\u5217\u6319\u3059\u308b\u3068\u3044\u3046\u3001\u3044\u304b\u306b\u3082\u5b9f\u7528\u7684\u306a\u4f8b\u304c\u8f09\u3063\u3066\u3044\u308b\u306e\u3067\u3001\u4e00\u5ea6\u306f\u898b\u3066\u307f\u308b\u3079\u304d\u3067\u3042\u308b\u3002\n\nflat_map(): Iterator<T> -> (T -> IntoIterator<U>) -> Iterator<U>\n\n\u30a4\u30c6\u30ec\u30fc\u30bf\u306b\u5bfe\u3057\u3066\u3001\uff5b\u8981\u7d20\u3092\u53d7\u3051\u53d6\u3063\u3066\u30a4\u30c6\u30ec\u30fc\u30bf(\u306b\u5909\u63db\u3067\u304d\u308b\u3082\u306e)\u3092\u8fd4\u3059\u95a2\u6570\uff5d\u3092\u9069\u7528\u3057\u3001\u7d50\u679c\u51fa\u3066\u304d\u305f\u305d\u308c\u305e\u308c\u306e\u30a4\u30c6\u30ec\u30fc\u30bf\u3092\u9806\u306b\u7e4b\u3052\u3066\u8fd4\u3059\u95a2\u6570\u3067\u3042\u308b\u3002\n\u30a4\u30e1\u30fc\u30b8\u3068\u3057\u3066\u306f\u3001\u30cd\u30b9\u30c8\u3057\u305f\u30a4\u30c6\u30ec\u30fc\u30bf\u306b\u3064\u3044\u3066\u3001\u5185\u5074\u306e\u30a4\u30c6\u30ec\u30fc\u30bf\u3092\u5265\u304c\u3059(unwrap\u3059\u308b)\u611f\u899a\u3060\u3002\n\u3053\u3093\u306a\u30b3\u30fc\u30c9\u304c:\n\n\u4f8b1\nfor temp_iter in iter.map(foo) {\n    for i in temp_iter {\n        bar(i);\n    }\n}\n\n\n\u3053\u3046\u306a\u308b:\nfor temp_iter in iter.flat_map(foo) {\n    bar(i);\n}\n\n\n\u53c2\u8003\n\u52d8\u306e\u826f\u3044\u4eba\u306f(\u3068\u3044\u3046\u304b\u578b\u3092\u898b\u308c\u3070)\u304a\u6c17\u4ed8\u304d\u3060\u308d\u3046\u304c\u3001 filter_map() \u306f flat_map() \u306e Option \u7279\u5316\u7248\u3067\u3042\u308b\u3002\n\u305d\u3057\u3066 Option<T> \u306f IntoIterator<T> \u3067\u3082\u3042\u308b(\u301c\u3092\u5b9f\u88c5\u3057\u3066\u3044\u308b)\u304b\u3089\u3001 filter_map() \u306f flat_map() \u306b\u6a5f\u68b0\u7684\u306b\u7f6e\u304d\u63db\u3048\u3066\u3082\u3001\u4f55\u3089\u554f\u984c\u306a\u304f\u52d5\u4f5c\u3059\u308b\u3002\n\u3080\u3057\u308d\u3001 Result<T> \u306a\u3093\u304b\u3082 IntoIterator<T> \u3092\u5b9f\u88c5\u3057\u3066\u3044\u308b\u306e\u3067\u3001\u516c\u5f0f\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u306e filter_map() \u306e\u4f8b\u306f\u3001 flat_map \u3092\u4f7f\u3046\u3068\u3082\u3063\u3068\u7c21\u5358\u306b\u306a\u308b\u3002\n\n\u516c\u5f0f\u306e\u4f8b\nlet a = [\"1\", \"2\", \"lol\"];\n\nlet mut iter = a.iter().filter_map(|s| s.parse().ok());\n\nassert_eq!(iter.next(), Some(1));\nassert_eq!(iter.next(), Some(2));\nassert_eq!(iter.next(), None);\n\n\n\nflat_map\u3092\u4f7f\u3046\nlet a = [\"1\", \"2\", \"lol\"];\n\n// \u2193 `.ok()` \u8981\u3089\u305a\nlet mut iter = a.iter().flat_map(|s| s.parse());\n\nassert_eq!(iter.next(), Some(1));\nassert_eq!(iter.next(), Some(2));\nassert_eq!(iter.next(), None);\n\n\n\u3069\u3061\u3089\u3082\u4f7f\u3048\u308b\u5834\u5408\u3001\u6587\u5b57\u6570\u3092\u7bc0\u7d04\u3067\u304d\u308b flat_map() \u3092\u4f7f\u3046\u304b\u3001\u578b\u3068\u610f\u5473\u306e\u660e\u78ba\u306a filter_map() \u3092\u4f7f\u3046\u304b\u306f\u2026\u2026\u307e\u3042\u7686\u3055\u3093\u306e\u4fe1\u4ef0\u6b21\u7b2c\u3060\u3002\n\n\u30a4\u30c6\u30ec\u30fc\u30bf\u306e\u5168\u8981\u7d20\u3092\u6d3b\u7528\u3057\u3066\u3001\u5225\u7269\u3092\u4f5c\u308a\u51fa\u3059\u7cfb\n\u76f4\u89b3\u7684\u306b\u306f\u3001reduce\u3068\u304bfold\u307f\u305f\u3044\u306a\u30a4\u30e1\u30fc\u30b8\u3060\u3002\n\u578b\u306f\u69d8\u3005\u3067\u3001 Iterator<T> -> T\u306b\u95a2\u4fc2\u3042\u308b\u578b \u304f\u3089\u3044\u306e\u3053\u3068\u3057\u304b\u8a00\u3048\u306a\u3044\u3002\n\ncollect(): Iterator<T> -> T\u306e\u30b3\u30ec\u30af\u30b7\u30e7\u30f3\n\n\u540d\u524d\u306e\u901a\u308a\u3002\n(\u30b3\u30ec\u30af\u30b7\u30e7\u30f3\u3068\u3044\u3046\u306e\u306f\u3001C++\u3067\u8a00\u3046\u3068\u3053\u308d\u306e\u30b3\u30f3\u30c6\u30ca\u3067\u3042\u308b\u3002)\ninto_iter() \u306e\u9006\u307f\u305f\u3044\u306a\u3084\u3064\u3060\u3002\n\u3068\u306f\u3044\u3048\u3001\u5b9f\u969b\u306e\u3068\u3053\u308dRust\u3067\u30b3\u30ec\u30af\u30b7\u30e7\u30f3\u3068\u3057\u3066\u4f7f\u3048\u308b\u578b\u306f\u5b9f\u306b\u69d8\u3005\u3067\u3001 Vec \u3084 String \u306f\u52ff\u8ad6\u3001 Result \u306a\u3093\u304b\u3082\u3044\u3051\u308b\u3002\n\u7279\u306b collect::<Result<Vec<_>, _> \u306e\u4f7f\u3044\u65b9\u306a\u3069\u306a\u304b\u306a\u304b\u9762\u767d\u3044\u306e\u3067\u3001\u662f\u975e\u516c\u5f0f\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u306e\u4f8b\u306a\u3069\u3092\u78ba\u8a8d\u3057\u3066\u307b\u3057\u3044\u3002\n\npartition(): Iterator<T> -> (&T -> bool) -> (T\u306e\u30b3\u30ec\u30af\u30b7\u30e7\u30f3, T\u306e\u30b3\u30ec\u30af\u30b7\u30e7\u30f3)\n\n\u4e0e\u3048\u3089\u308c\u305f\u8ff0\u8a9e(&T -> bool)\u304c true \u3092\u8fd4\u3059\u8981\u7d20\u3068 false \u3092\u8fd4\u3059\u8981\u7d20\u3092\u5206\u985e\u3057\u3001\u305d\u308c\u3089\u3092\u5225\u3005\u306e\u30b3\u30ec\u30af\u30b7\u30e7\u30f3\u306b\u683c\u7d0d\u3057\u3066\u30bf\u30d7\u30eb\u3067\u8fd4\u3059\u95a2\u6570\u3067\u3042\u308b\u3002\n(\u5ff5\u306e\u305f\u3081\u66f8\u3044\u3066\u304a\u304f\u304c\u3001\u30bf\u30d7\u30eb\u306e\u6700\u521d\u306e\u30b3\u30ec\u30af\u30b7\u30e7\u30f3\u304c true \u3060\u3063\u305f\u8981\u7d20\u3001\u6b21\u306e(\u6700\u5f8c\u306e)\u30b3\u30ec\u30af\u30b7\u30e7\u30f3\u304c false \u3060\u3063\u305f\u8981\u7d20\u3067\u3042\u308b\u3002)\n\nfold(): Iterator<T> -> (B -> T -> B) -> B\n\n\u307f\u3093\u306a\u5927\u597d\u304dfold\u3002\n\u3053\u3053\u3067\u8aac\u660e\u3059\u308b\u307e\u3067\u3082\u306a\u3044\u3002\n\nunzip(): Iterator<(T, U)> -> (T\u306e\u30b3\u30ec\u30af\u30b7\u30e7\u30f3, U\u306e\u30b3\u30ec\u30af\u30b7\u30e7\u30f3)\n\n\u30da\u30a2\u3092\u5217\u6319\u3059\u308b\u30a4\u30c6\u30ec\u30fc\u30bf\u3092\u3001\u30da\u30a2\u306e\u4e2d\u306e\u4e00\u65b9\u306e\u8981\u7d20\u3060\u3051\u3092\u96c6\u3081\u305f2\u3064\u306e\u30b3\u30ec\u30af\u30b7\u30e7\u30f3\u306b\u5206\u89e3\u3059\u308b\u95a2\u6570\u3002\n\u8981\u3059\u308b\u306b\u3001 zip() \u306e\u9006\u307f\u305f\u3044\u306a\u3053\u3068\u3092\u3059\u308b\u3002\n\u516c\u5f0f\u306e\u4f8b\u3092\u898b\u308c\u3070\u3059\u3050\u306b\u7406\u89e3\u3067\u304d\u308b\u3060\u308d\u3046\u3002\n\nsum(): Iterator<T> -> T\u306e\u548c\u306e\u578b\n\n\u30a4\u30c6\u30ec\u30fc\u30bf\u306e\u5168\u3066\u306e(\u6b63\u78ba\u306b\u306f\u6700\u521d\u306bNone\u304c\u8fd4\u308b\u307e\u3067\u306e)\u8981\u7d20\u306e\u548c\u3092\u8fd4\u3059\u3002\n\u3053\u308c\u306ffold()\u3067\u5b9f\u73fe\u53ef\u80fd\u306b\u898b\u3048\u308b\u3057\u5b9f\u969b\u305d\u306e\u901a\u308a\u3060\u304c\u3001\u3053\u3061\u3089\u306e\u65b9\u304c\u82e5\u5e72\u697d\u304c\u3067\u304d\u305f\u308a\u3059\u308b\u3002\n\u30ea\u30d5\u30a1\u30ec\u30f3\u30b9\u306b\u306ffn sum<S>(self) -> S where S: Sum<Self::Item>\u3068\u3042\u308b\u304c\u3001\u3053\u3053\u3067S\u3068\u306f\u300c\u5bfe\u8c61\u306e\u30a4\u30c6\u30ec\u30fc\u30bf\u306e\u8981\u7d20\u306e\u578b\u3092\u96c6\u3081\u3066\u4f5c\u308b\u3053\u3068\u306e\u3067\u304d\u308b\u3001\u76ee\u7684\u306e\u5024\u306e\u578b\u300d\u3067\u3042\u308b(\u305f\u3068\u3048\u3070Iterator<i32>\u306b\u5bfe\u3057\u3066i32\u3001\u306a\u3069\u3067\u3042\u308b)\u3002\nfold()\u306f\u4e8c\u9805\u6f14\u7b97(F: FnMut(B, Self::Item) -> B)\u3092\u7e70\u308a\u8fd4\u3057\u3066\u6700\u7d42\u7684\u306a\u7d50\u679c\u3092\u6c42\u3081\u308b\u304c\u3001\u3053\u306esum()\u3067\u306f\u30a4\u30c6\u30ec\u30fc\u30bf\u306b\u3088\u3063\u3066\u8981\u7d20\u3092\u4e00\u6c17\u306b\u53d7\u3051\u53d6\u3063\u3066\u7d50\u679c\u3092\u8fd4\u3059\u3002\u3064\u307e\u308a\u3001\u305f\u3068\u3048\u3070\u5185\u90e8\u7684\u306b\u306f\u4e8c\u9805\u6f14\u7b97\u3067\u306a\u304f\u8907\u6570\u8981\u7d20\u3092\u4e00\u6c17\u306b\u51e6\u7406\u3057\u305f\u308a\u3001\u3068\u3044\u3063\u305f\u5b9f\u88c5\u3082\u53ef\u80fd\u306a\u306e\u3067\u3042\u308b\u3002\n\u307e\u305f\u3001sum()\u3068collect()\u306f\u3001\u7528\u9014\u304c\u9055\u3046\u3060\u3051\u3067\u6839\u672c\u7684\u306b\u306f\u540c\u3058\u3082\u306e\u3067\u3042\u308b\u3002\n\u578b\u3092\u898b\u3066\u307f\u3088\u3046\u3002\nfn sum<S>(self) -> S where S: Sum<Self::Item>;\nfn collect<B>(self) -> B where B: FromIterator<Self::Item>;\n\n\u540d\u524d\u3068\u623b\u308a\u5024\u306etrait\u3057\u304b\u9055\u308f\u306a\u3044\u3053\u3068\u304c\u308f\u304b\u308b\u3002\ncollect()\u3067\u4f7f\u308f\u308c\u308b::std::iter::FromIterator\u306f\u3001\u30a4\u30c6\u30ec\u30fc\u30bf\u304b\u3089\u4f5c\u308c\u308b\u30aa\u30d6\u30b8\u30a7\u30af\u30c8(\u5178\u578b\u7684\u306b\u306fVec\u3084HashMap\u7b49\u306e\u30b3\u30f3\u30c6\u30ca)\u306b\u5bfe\u3057\u3066\u5b9a\u7fa9\u3059\u308b\u3082\u306e\u3067\u3042\u308b\u304c\u3001::std::iter::Sum\u306f\u305d\u306e\u4e2d\u3067\u3082\u7279\u306b\u3001\u30a4\u30c6\u30ec\u30fc\u30bf\u304b\u3089\u8a08\u7b97\u3067\u304d\u308b\u548c\u306b\u5bfe\u3057\u3066\u5b9a\u7fa9\u3059\u308b\u3082\u306e\u3067\u3042\u308b\u3002\n\u3053\u306e\u3088\u3046\u306b\u7528\u9014\u3067\u5206\u3051\u308b\u3053\u3068\u306b\u3088\u3063\u3066\u3001\u305f\u3068\u3048\u3070Iterator<i32>\u304b\u3089Vec<i32>\u3092\u4f5c\u308a\u305f\u3044\u5834\u5408\u3068i32\u306e\u548c\u3092\u6c42\u3081\u305f\u3044\u5834\u5408\u3067\u540c\u3058\u66f8\u304d\u65b9\u3067\u5225\u306e\u52d5\u4f5c\u3092\u3055\u305b\u308b\u3053\u3068\u304c\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u308b\u306e\u3067\u3042\u308b\u3002\n\nproduct(): Iterator<T> -> T\u306e\u7a4d\u306e\u578b\n\nsum()\u306e\u7a4d\u30d0\u30fc\u30b8\u30e7\u30f3\u3002\u8a73\u7d30\u306f(trait\u3068\u610f\u5473\u3092\u9664\u3044\u3066)sum()\u3068\u540c\u3058\u3002\n\n\u8f9e\u66f8\u9806\u6bd4\u8f03\u7cfb\n\u3075\u305f\u3064\u306e\u30a4\u30c6\u30ec\u30fc\u30bf\u3092\u8f9e\u66f8\u9806\u6bd4\u8f03\u3059\u308b\u3002\n\ncmp(): Iterator<T> -> IntoIterator<T> -> Ordering\n\n\u8f9e\u66f8\u9806\u6bd4\u8f03\u3057\u3001\u305d\u306e\u7d50\u679c(::std::cmp::Ordering::Less \u3068\u304b)\u3092\u8fd4\u3059\u3002\n\u4f8b\u306e\u3054\u3068\u304f IntoIterator<T> \u3092\u53d7\u3051\u53d6\u308b\u306e\u3067\u3001\u30a4\u30c6\u30ec\u30fc\u30bf\u3092\u660e\u793a\u7684\u306b\u4f5c\u3063\u3066\u6e21\u3055\u305a\u3068\u3082\u6bd4\u8f03\u306b\u4f7f\u3046\u3053\u3068\u304c\u3067\u304d\u308b\u3002\n\npartial_cmp(): Iterator<T> -> IntoIterator<T> -> Option<Ordering>\n\n\u8f9e\u66f8\u9806\u6bd4\u8f03\u3057\u3001\u305d\u306e\u7d50\u679c(::std::cmp::Ordering::Less \u3068\u304b)\u3092 Some \u3067\u8fd4\u3059\u3002\nNone \u304c\u8fd4\u308b\u306e\u306f\u3001\u6bd4\u8f03\u3067\u304d\u306a\u3044\u5024\u3092\u6bd4\u8f03\u3057\u305f\u5834\u5408\u3067\u3042\u308b\u3002\n\n\u53c2\u8003\n\u8a73\u7d30\u306fPartialOrd\u3067\u3082\u8aad\u3093\u3060\u65b9\u304c\u826f\u3044\u306e\u3060\u304c\u3001\u7c21\u5358\u306b\u8aac\u660e\u3057\u3066\u304a\u3053\u3046\u3002\nPartialOrd \u3068\u3044\u3046\u300c\u534a\u9806\u5e8f\u300d\u304c\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u308b\u3053\u3068\u3092\u8868\u73fe\u3059\u308btrait\u304c\u3042\u3063\u3066\u3001\u3053\u3044\u3064\u3092\u4f7f\u3063\u305f\u6bd4\u8f03(PartialOrd::partial_cmp())\u306f Option<Ordering> \u3092\u8fd4\u3059\u3002\n\u5177\u4f53\u7684\u306a\u4f8b\u3068\u3057\u3066\u6709\u540d\u306a\u306e\u304c f64 \u7b49\u3067\u3001 !(NaN >= 0) \u304b\u3064 !(Nan < 0) \u3067\u3042\u308b\u304b\u3089\u3001\u5168\u9806\u5e8f(\u3044\u308f\u3086\u308b\u666e\u901a\u306e\u5927\u5c0f\u95a2\u4fc2)\u306b\u306f\u3067\u304d\u306a\u3044\u308f\u3051\u3067\u3042\u308b\u3002\u305d\u3046\u3044\u3046\u5834\u5408\u306b\u306f\u3001\u6bd4\u8f03\u306e\u7d50\u679c\u3068\u3057\u3066 None \u304c\u8fd4\u308b\u3002\nPartialOrd \u306b\u4f3c\u305f\u3082\u306e\u3068\u3057\u3066PartialEq\u304c\u3042\u308b\u306e\u3067\u3001\u4f75\u305b\u3066\u898b\u308b\u306e\u304c\u826f\u3044\u3060\u308d\u3046\u3002\n\u3053\u3061\u3089\u306f\u3082\u3046\u5c11\u3057\u308f\u304b\u308a\u3084\u3059\u3044\u3002\u8981\u3059\u308b\u306b\u300c\u540c\u5024\u95a2\u4fc2\u306e\u3001\u53cd\u5c04\u5f8b\u306e\u6210\u308a\u7acb\u305f\u306a\u3044\u7248\u300d\u3060\u304b\u3089\u3060\u3002\n\u53cd\u5c04\u5f8b\u306e\u7834\u308c\u308b\u4f8b\u306f\u3001 NaN != NaN \u307f\u305f\u3044\u306a\u3084\u3064\u3067\u3042\u308b\u3002\n\neq(), ne(), lt(), le(), gt(), ge(): Iterator<T> -> IntoIterator<T> -> bool\n\n\u540d\u524d\u306e\u901a\u308a\u3002\n\u8f9e\u66f8\u9806\u6bd4\u8f03\u3057\u3001\u95a2\u6570\u540d\u306e\u793a\u3059\u95a2\u4fc2\u304c\u6210\u308a\u7acb\u3064\u306a\u3089 true \u3092\u3001\u305d\u308c\u4ee5\u5916\u306a\u3089 false \u3092\u8fd4\u3059\u3002\n\n\n\u307e\u3068\u3081\n\n\u30eb\u30fc\u30d7\u306e\u30cd\u30b9\u30c8\u304c\u6df1\u3044\u3068\u304d\u306f\u3001\u4e2d\u8eab\u306e\u4f55\u304b\u3092\u5265\u304c\u3059\u7cfb\u306e\u30e1\u30bd\u30c3\u30c9\u3092\u63a2\u305d\u3046\n\u300c\u5265\u304c\u3057\u3066\u307e\u305f\u5305\u3080\u300d\u3088\u3046\u306a\u5197\u9577\u306b\u898b\u3048\u308b\u51e6\u7406\u304c\u3042\u308b\u3068\u304d\u306f\u3001\u5265\u304c\u3057\u305f\u4e2d\u8eab\u306b\u4f5c\u7528\u3059\u308b\u30e1\u30bd\u30c3\u30c9\u3092\u63a2\u305d\u3046\n\u30a4\u30c6\u30ec\u30fc\u30bf\u306e\u4ee3\u308f\u308a\u306b\u3001\u300c\u30a4\u30c6\u30ec\u30fc\u30bf\u306b\u3067\u304d\u308b\u3082\u306e(IntoIterator)\u300d\u3092\u6e21\u305b\u308b\u30e1\u30bd\u30c3\u30c9\u3082\u3042\u308b\u306e\u3067\u3001\u3046\u307e\u304f\u4f7f\u304a\u3046\n\nOption \u3084 Result \u7b49\u3082\u30a4\u30c6\u30ec\u30fc\u30bf\u306b\u3067\u304d\u308b\u3053\u3068\u3092\u61b6\u3048\u3066\u304a\u3053\u3046\n\u95a2\u6570\u3092\u53d7\u3051\u53d6\u308b\u30e1\u30bd\u30c3\u30c9\u306f\u3001\u6e21\u3055\u308c\u308b\u95a2\u6570\u304c Self::Item \u3092\u53d7\u3051\u53d6\u308b\u304b &Self::item \u3092\u53d7\u3051\u53d6\u308b\u304b\u3067\u6319\u52d5\u304c\u63a8\u6e2c\u3067\u304d\u308b\u30be\n\n\n\nSelf::Item \u306f\u5909\u63db\u7cfb\u304b\u3001\u30a4\u30c6\u30ec\u30fc\u30bf\u3092\u8fd4\u3055\u306a\u3044\u30e1\u30bd\u30c3\u30c9\n\n&Self::Item \u306f\u30d5\u30a3\u30eb\u30bf\u7cfb\u3067\u3001\u304b\u3064\u30a4\u30c6\u30ec\u30fc\u30bf\u3092\u8fd4\u3059\u30e1\u30bd\u30c3\u30c9\n\n\n\u305d\u308c\u306f\u3055\u3066\u304a\u304d\u3001\u516c\u5f0f\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u3092\u8aad\u3082\u3046\uff01\n\n\nSee also\n\n\nRust Iterator Cheat Sheet\n\n\u591a\u5c11\u53e4\u3044\u304b\u3082\u3002GitHub\u3067\u7ba1\u7406\u3055\u308c\u3066\u3044\u308b\u306e\u3067\u3001\u305d\u3053\u3092\u898b\u308c\u3070\u3044\u3064\u6642\u70b9\u306e\u60c5\u5831\u304b\u308f\u304b\u308b\u3002\n\n\n\n# \u306f\u3058\u3081\u306b\n\u6b63\u76f4\u306a\u3068\u3053\u308d\u3001\u516c\u5f0f\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8 [std::iter::Iterator - Rust](https://doc.rust-lang.org/std/iter/trait.Iterator.html) \u3092\u8aad\u3081\u3070\u7d42\u4e86\u3001\u3053\u306e\u8a18\u4e8b\u306f\u4e0d\u8981\u3001\u3068\u3044\u3046\u611f\u3058\u306f\u3042\u308b\u3002\n\u3057\u304b\u3057\u3053\u306e\u30da\u30fc\u30b8\u3001\u4f8b\u3068\u304b\u306f\u8c4a\u5bcc\u3060\u3057\u826f\u3044\u306e\u3060\u304c\u3001\u95a2\u6570\u306e\u4e26\u3079\u9806\u304c\u3069\u3046\u306b\u3082\u5fae\u5999\u306a\u611f\u3058\u304c\u3059\u308b\u306e\u3067\u3001\u30e1\u30e2\u3092\u517c\u306d\u3066\u7528\u9014\u5225(\u72ec\u65ad\u3068\u504f\u898b\u306b\u3088\u308b\u5206\u985e)\u3067\u7d39\u4ecb\u3057\u3066\u307f\u308b\u3053\u3068\u306b\u3059\u308b\u3002\n\n\u3042\u3068\u3001\u95a2\u6570\u306e\u578b\u306fHaskell\u98a8\u306b\u66f8\u304f\u3068\u6d41\u308c\u308b\u611f\u3058\u304c\u3042\u3063\u3066\u826f\u3044(\u30a4\u30c6\u30ec\u30fc\u30bf\u306e\u7528\u9014\u3068\u30de\u30c3\u30c1\u3057\u3066\u3044\u308b\u6c17\u304c\u3059\u308b)\u306e\u3067\u3001 `T -> U -> V` \u306e\u3088\u3046\u306b\u66f8\u304f\u3053\u3068\u304c\u3042\u308b\u3002\n\u3068\u306f\u3044\u3048\u3001\u308f\u304b\u308a\u3084\u3059\u3055\u512a\u5148\u3067\u66f8\u304f\u3068 `FnMut` \u3068\u304b `FromA: Default + Extend<A>` \u307f\u305f\u3044\u306a\u72ec\u7279\u306e\u60c5\u5831\u304c\u5931\u308f\u308c\u3066\u3057\u307e\u3063\u305f\u305f\u3081\u3001\u3084\u306f\u308a\u516c\u5f0f\u306e\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u3092\u3042\u308f\u305b\u3066\u898b\u308b\u3053\u3068\u3092\u304a\u3059\u3059\u3081\u3059\u308b\u3002(\u30ea\u30f3\u30af\u3092\u6ca2\u5c71\u5f35\u3063\u305f\u306e\u3067\u3001\u767a\u898b\u6b21\u7b2c\u5225\u30a6\u30a3\u30f3\u30c9\u30a6\u3067\u958b\u304f\u304f\u3089\u3044\u306e\u52e2\u3044\u304c\u826f\u3044\u3002)\n\n\u305d\u308c\u304b\u3089\u3001\u4ee5\u4e0b\u3067 `Iterator<T>` \u3068\u66f8\u3044\u3066\u3044\u308b\u3082\u306e\u306f\u3001\u5b9f\u969b\u306b\u306f\u5225\u306e\u69d8\u3005\u306a\u578b\u3067\u3042\u308a\u3046\u308b\u304c\u3001\u3069\u3046\u305b\u5177\u4f53\u7684\u306a\u578b\u306f\u30b3\u30fc\u30c9\u4e2d\u3067\u610f\u8b58\u3059\u308b\u3053\u3068\u306f(\u6ec5\u591a\u306b)\u306a\u3044\u306e\u3067\u3001 `Iterator` trait\u3092\u5b9f\u88c5\u3057\u3066\u3044\u308b\u3082\u306e\u306f\u3059\u3079\u3066 `Iterator<T>` \u3068\u66f8\u304f\u3053\u3068\u306b\u3059\u308b\u3002\n\n\u898b\u51fa\u3057\u3092\u6d3b\u7528\u3057\u3066\u306d\uff01\u2192\n\n<!--\n## \u3082\u304f\u3058\n- [\u4e2d\u8eab\u3092(\u6700\u59271\u3064)\u53d6\u308a\u51fa\u3059\u7cfb]()\n  * [`next`]()\n  * [`last`]()\n  * [`nth`]()\n  * [`find`]()\n  * [`max`]()\n  * [`min`]()\n  * [`max_by_key`]()\n  * [`min_by_key`]()\n  * [`max_by`]()\n  * [`min_by`]()\n- [\u4e2d\u8eab\u3092\u5f04\u3089\u305a\u8981\u7d20\u3092\u9078\u629e\u3059\u308b\u7cfb]()\n  * [`filter`]()\n  * [`take`]()\n  * [`skip`]()\n  * [`take_while`]()\n  * [`skip_while`]()\n- [\u30a4\u30c6\u30ec\u30fc\u30bf\u304c\u6301\u3064\u8981\u7d20\u5168\u4f53\u306b\u3064\u3044\u3066\u4f55\u304b\u306e\u60c5\u5831\u3092\u5f97\u308b\u7cfb]()\n  * [`count`]()\n  * [`all`]()\n  * [`any`]()\n  * [`position`]()\n  * [`rposition`]()\n- [\u30a4\u30c6\u30ec\u30fc\u30bf\u3072\u3068\u3064\u3092\u3001\u4e2d\u8eab\u3092\u307b\u3068\u3093\u3069\u5909\u3048\u305a\u3001\u5f79\u7acb\u3064\u5f62\u306b\u4f5c\u308a\u66ff\u3048\u308b\u7cfb (\u5f37\u5316\u7cfb)]()\n  * [`peekable`]()\n  * [`cloned`]()\n  * [`fuse`]()\n  * [`by_ref`]()\n  * [`inspect`]()\n- [\u30a4\u30c6\u30ec\u30fc\u30bf\u3072\u3068\u3064\u3092\u3001\u9806\u3092\u5909\u5316\u3055\u305b\u305f\u308a\u60c5\u5831\u3092\u4ed8\u968f\u3055\u305b\u305f\u308a\u3057\u3066\u3001\u5f79\u7acb\u3064\u5f62\u306b\u4f5c\u308a\u66ff\u3048\u308b\u7cfb (\u9032\u5316\u7cfb)]()\n  * [`enumerate`]()\n  * [`cycle`]()\n  * [`scan`]()\n  * [`rev`]()\n- [\u30a4\u30c6\u30ec\u30fc\u30bf\u3075\u305f\u3064\u3092\u7d44\u307f\u5408\u308f\u305b\u3066\u3001\u5f79\u7acb\u3064\u5f62\u306b\u4f5c\u308a\u66ff\u3048\u308b\u7cfb (\u5408\u4f53\u7cfb)]()\n  * [`chain`]()\n  * [`zip`]()\n- [\u30a4\u30c6\u30ec\u30fc\u30bf\u304c\u6301\u3064\u500b\u3005\u306e\u8981\u7d20\u3092\u5909\u66f4\u3057\u3066\u6d41\u3059\u7cfb (\u52a0\u5de5\u7cfb)]()\n  * [`map`]()\n  * [`filter_map`]()\n  * [`flat_map`]()\n- [\u30a4\u30c6\u30ec\u30fc\u30bf\u306e\u5168\u8981\u7d20\u3092\u6d3b\u7528\u3057\u3066\u3001\u5225\u7269\u3092\u4f5c\u308a\u51fa\u3059\u7cfb]()\n  * [`collect`]()\n  * [`partition`]()\n  * [`fold`]()\n  * [`unzip`]()\n  * [`sum`]()\n  * [`product`]()\n- [\u8f9e\u66f8\u9806\u6bd4\u8f03\u7cfb]()\n  * [`cmp`]()\n  * [`partial_cmp`]()\n  * [`eq`, `ne`, `lt`, `le`, `gt`, `ge`]()\n-->\n\n* * *\n\n# \u4e2d\u8eab\u3092(\u6700\u59271\u3064)\u53d6\u308a\u51fa\u3059\u7cfb\n\u4ee5\u4e0b\u306e\u3082\u306e\u306f\u3001\u307f\u306a\u6700\u59271\u3064\u306e\u8981\u7d20\u3092 `Option<T>` \u3067\u8fd4\u3059\u3002\n\n## [`next()`](https://doc.rust-lang.org/std/iter/trait.Iterator.html#tymethod.next): `Iterator<T> -> Option<T>`\n\u6b21\u306e\u8981\u7d20\u3092 `Some` \u3067\u8fd4\u3059\u3002\n\u6b21\u306e\u8981\u7d20\u304c\u306a\u3051\u308c\u3070 `None` \u3092\u8fd4\u3059\u3002\n\n\u305f\u3060\u3057\u3001\u30a4\u30c6\u30ec\u30fc\u30bf(\u306e `next()`)\u304c `None` \u3092\u8fd4\u3057\u305f\u5f8c\u306b `next()` \u3092\u547c\u3093\u3060\u3068\u304d\u3001 `None` \u304c\u8fd4\u308b\u3053\u3068\u306f\u4fdd\u8a3c\u3055\u308c\u306a\u3044(\u518d\u3073 `Some` \u3092\u8fd4\u3057\u3066\u3082\u826f\u3044)\u3089\u3057\u3044\u3002\n\u305d\u306e\u4fdd\u8a3c\u304c\u6b32\u3057\u3051\u308c\u3070\u3001 `fuse()` \u3092\u4f7f\u3046\u3079\u3057\u3002\n(\u3068\u306f\u3044\u3048\u3001\u666e\u901a\u306f\u4f7f\u3044\u5207\u3063\u305f\u30a4\u30c6\u30ec\u30fc\u30bf\u3092\u518d\u5229\u7528\u3059\u308b\u3053\u3068\u306f\u306a\u3044\u306e\u3067\u3001\u6c17\u306b\u305b\u305a\u3068\u3082\u826f\u3044\u3060\u308d\u3046\u3002)\n\n## [`last()`](https://doc.rust-lang.org/std/iter/trait.Iterator.html#method.last): `Iterator<T> -> Option<T>`\n\u6700\u5f8c\u306e\u8981\u7d20\u3092 `Some` \u3067\u8fd4\u3059\u3002\n\u8981\u7d20\u304c\u306a\u3051\u308c\u3070\u3001 `None` \u3092\u8fd4\u3059\u3002\n\n\u6b63\u78ba\u306b\u306f\u3001\u300c `None` \u304c\u8fd4\u3055\u308c\u308b\u76f4\u524d\u306b\u8fd4\u3055\u308c\u305f\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u8fd4\u3059\u300d\u304c\u6b63\u3057\u3044\u3002\n\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u306b\u3082\u305d\u3046\u66f8\u3044\u3066\u3042\u308b\u3002\n(\u30a4\u30c6\u30ec\u30fc\u30bf\u304c `None` \u306e\u5f8c\u306b\u307e\u305f `Some` \u3092\u8fd4\u3059\u3053\u3068\u3082\u3042\u308b\u306e\u3067\u3001\u300c\u6700\u5f8c\u306e\u300d\u3068\u3044\u3046\u8a00\u3044\u56de\u3057\u306f\u5fae\u5999\u3067\u3042\u308b\u3002\u304c\u3001\u307e\u3042\u76f4\u89b3\u7684\u306a\u4f7f\u3044\u65b9\u3067\u306e\u300c\u6700\u5f8c\u300d\u3067\u3042\u308b\u3002)\n\n\u3061\u306a\u307f\u306b\u3001 `last()` \u304c\u3042\u308b\u306e\u3060\u304b\u3089 `first()` \u304c\u3042\u3063\u3066\u3082\u826f\u3044\u306e\u3067\u306f\u3001\u3068\u4e00\u77ac\u8003\u3048\u3066\u3057\u307e\u3046\u304c\u3001\u8981\u3059\u308b\u306b\u305d\u308c\u306f `next()` \u3060\u3002\n\n## [`nth()`](https://doc.rust-lang.org/std/iter/trait.Iterator.html#method.nth): `Iterator<T> -> usize -> Option<T>`\nn\u756a\u76ee\u306e\u8981\u7d20\u3092 `Some` \u3067\u8fd4\u3059\u3002\n(\u8a00\u3046\u307e\u3067\u3082\u306a\u3044\u304c\u3001**\u6700\u521d\u306e\u8981\u7d20\u306f0\u756a\u76ee**\u3067\u3042\u308b\u3002)\nn\u756a\u76ee\u306e\u8981\u7d20\u3092\u5f97\u308b\u524d\u306b\u7d42\u7aef\u306b\u5230\u9054\u3057\u305f\u5834\u5408\u3001 `None` \u3092\u8fd4\u3059\u3002\n\n## [`find()`](https://doc.rust-lang.org/std/iter/trait.Iterator.html#method.find): `Iterator<T> -> (&T -> bool) -> Option<T>`\n\u4e0e\u3048\u3089\u308c\u305f\u95a2\u6570 `&T -> bool` \u304c `true` \u3092\u8fd4\u3059\u6700\u521d\u306e\u8981\u7d20\u3092 `Some` \u3067\u8fd4\u3059\u3002\n\u767a\u898b\u3067\u304d\u306a\u3051\u308c\u3070 `None` \u3092\u8fd4\u3059\u3002\n\n## [`max()`](https://doc.rust-lang.org/std/iter/trait.Iterator.html#method.max): `Iterator<T> -> Option<T>` (\u305f\u3060\u3057 `T: Ord`)\n`Ord` trait\u3092\u5b9f\u88c5\u3057\u3066\u3044\u308b\u578b\u306e\u30a4\u30c6\u30ec\u30fc\u30bf\u306b\u3064\u3044\u3066\u3001\u305d\u306e\u6700\u5927\u306e\u8981\u7d20\u3092 `Some` \u3067\u8fd4\u3059\u3002\n\u3082\u3057\u540c\u3058\u6700\u5927\u5024\u304c\u8907\u6570\u3042\u308c\u3070\u3001\u6700\u5f8c\u306b\u51fa\u73fe\u3057\u305f\u3082\u306e\u3092\u8fd4\u3059\u3002\n`None` \u304c\u8fd4\u308b\u306e\u306f\u3001\u305d\u3082\u305d\u3082\u8981\u7d20\u304c\u3072\u3068\u3064\u3082\u306a\u304b\u3063\u305f\u5834\u5408\u3067\u3042\u308b\u3002\n\n## [`min()`](https://doc.rust-lang.org/std/iter/trait.Iterator.html#method.min)\n\u6700\u5c0f\u5024\u3092\u8fd4\u3059\u3002\n\u8a73\u7d30\u306f `max()` \u306b\u540c\u3058\u3002\n\n## [`max_by_key()`](https://doc.rust-lang.org/std/iter/trait.Iterator.html#method.max_by_key): `Iterator<T> -> (&T -> U) -> Option<T>` (\u305f\u3060\u3057 `U: Ord`)\n`max()` \u3068\u4f3c\u3066\u3044\u308b\u304c\u3001**`T` \u306e\u4ee3\u308f\u308a\u306b\u3001 `U` \u3067\u6bd4\u8f03\u3092\u884c\u3063\u305f\u7d50\u679c\u306e\u6700\u5927\u5024\u3092\u8fd4\u3059**\u3002\n[\u516c\u5f0f](https://doc.rust-lang.org/std/iter/trait.Iterator.html#method.max_by_key)\u3067\u306f\u3001\u7d76\u5bfe\u5024\u304c\u6700\u5927\u306e\u8981\u7d20\u3092\u8fd4\u3059\u30b3\u30fc\u30c9\u4f8b\u304c\u8f09\u3063\u3066\u3044\u308b\u3002\n\n## [`min_by_key()`](https://doc.rust-lang.org/std/iter/trait.Iterator.html#method.min_by_key)\n`max_by_key()` \u306e\u6700\u5c0f\u5024\u7248\u3002\n\n## [`max_by()`](https://doc.rust-lang.org/std/iter/trait.Iterator.html#method.max_by): `Iterator<T> -> (&T -> &T -> Ordering) -> Option<T>`\n\u63d0\u4f9b\u3055\u308c\u305f\u6bd4\u8f03\u95a2\u6570\u3067\u6bd4\u8f03\u3092\u3057\u305f\u5834\u5408\u306e\u6700\u5927\u306e\u8981\u7d20\u3092 `Some` \u3067\u8fd4\u3059\u3002\n\u3053\u308c\u3092\u4f7f\u3048\u3070\u3001\u305f\u3068\u3048\u3070\u300c(ASCII\u306e)\u5927\u6587\u5b57\u30fb\u5c0f\u6587\u5b57\u3092\u533a\u5225\u305b\u305a\u5927\u5c0f\u6bd4\u8f03\u3059\u308b\u300d\u3068\u3044\u3063\u305f\u7279\u6b8a\u306a\u6bd4\u8f03\u3092\u4f7f\u3063\u305f\u6700\u5c0f\u5024\u304c\u6c42\u3081\u3089\u308c\u308b\u3002\n\n```rust:\u5927\u6587\u5b57\u30fb\u5c0f\u6587\u5b57\u3092\u7121\u8996\u3057\u305f\u6bd4\u8f03(\u3054\u3081\u3093\u3053\u308cmin_by\u306e\u30b5\u30f3\u30d7\u30eb\u3060\u308f)\nlet words = vec![\"abc\", \"FOOBAR\", \"xyz\"];\nlet case_insensitive_min = words.iter().min_by(|a, b| {\n    use std::ascii::AsciiExt;  // for `to_ascii_lowercase()`.\n\n    let a_iter = a.chars().map(|c| c.to_ascii_lowercase());\n    let b_iter = b.chars().map(|c| c.to_ascii_lowercase());\n    a_iter.cmp(b_iter)\n}).unwrap();\n```\n\n(\u5168\u4f53\u30b3\u30fc\u30c9: [Playground](https://play.rust-lang.org/?gist=0f14a5f3cdac6f26d5a0e1d616e0fe9b&version=stable&backtrace=0))\n\n\u5b89\u76f4\u306b\u3084\u308c\u3070\u3001 [`str::to_lowercase()`](https://doc.rust-lang.org/std/primitive.str.html#method.to_lowercase) \u3067\u5148\u306b(\u3053\u3061\u3089\u306f ASCII \u306b\u9650\u3089\u305a)\u5c0f\u6587\u5b57\u306b\u5909\u63db\u3057\u304d\u3063\u3066\u304b\u3089\u6bd4\u8f03\u3068\u3044\u3046\u3053\u3068\u306b\u306a\u308b\u304c\u3001\u3053\u308c\u3060\u3068\u6587\u5b57\u5217\u306e\u751f\u6210\u3001\u3064\u307e\u308a\u30e1\u30e2\u30ea\u30a2\u30ed\u30b1\u30fc\u30b7\u30e7\u30f3\u304c\u3042\u308b\u306e\u3067\u7121\u99c4\u304c\u591a\u3044\u3002\n\u305d\u3053\u3067 `min_by` \u3092\u4f7f\u3048\u3070\u3001\u6587\u5b57\u5217\u3092\u751f\u6210\u3059\u308b\u3053\u3068\u306a\u304f\u3001\u6587\u5b57\u6bce\u306b\u5909\u63db\u3092\u3057\u3064\u3064\u6bd4\u8f03\u3068\u3044\u3046\u3053\u3068\u304c\u53ef\u80fd\u306b\u306a\u308b\u3002\n\n## [`min_by()`](https://doc.rust-lang.org/std/iter/trait.Iterator.html#method.min_by)\n`max_by` \u306e\u6700\u5c0f\u5024\u7248\u3002\n\n\n# \u4e2d\u8eab\u3092\u5f04\u3089\u305a\u8981\u7d20\u3092\u9078\u629e\u3059\u308b\u7cfb\n\u4ee5\u4e0b\u306e\u3082\u306e\u306f\u3001\u307f\u306a\u65b0\u305f\u306a\u30a4\u30c6\u30ec\u30fc\u30bf `Iterator<T>` \u3092\u8fd4\u3059\u3002\n\n## [`filter()`](https://doc.rust-lang.org/std/iter/trait.Iterator.html#method.filter): `Iterator<T> -> (&T -> bool) -> Iterator<T>`\n\u540d\u524d\u306e\u901a\u308a\u3002\n\uff5b\u4e0e\u3048\u3089\u308c\u305f\u95a2\u6570(`&T -> bool`)\u304c `true` \u3092\u8fd4\u3059\u3082\u306e\u3060\u3051\u3092\u8fd4\u3059\u3088\u3046\u306a\u3001\u65b0\u305f\u306a\u30a4\u30c6\u30ec\u30fc\u30bf\uff5d\u3092\u8fd4\u3059\u3002\n\n## [`take()`](https://doc.rust-lang.org/std/iter/trait.Iterator.html#method.take): `Iterator<T> -> usize -> Iterator<T>`\n\u540d\u524d\u306e\u901a\u308a\u3002\n\uff5b\u4e0e\u3048\u3089\u308c\u305f\u500b\u6570(`usize`)\u3076\u3093\u306e\u8981\u7d20\u3092\u8fd4\u3057\u3001\u305d\u308c\u4ee5\u964d\u306e\u8981\u7d20\u3092\u7121\u8996\u3059\u308b\u3088\u3046\u306a\u3001\u65b0\u305f\u306a\u30a4\u30c6\u30ec\u30fc\u30bf\uff5d\u3092\u8fd4\u3059\u3002\n\n`take()` \u3057\u305f\u3082\u306e\u3068 `skip()` \u3057\u305f\u3082\u306e\u3092\u4e21\u65b9\u4f7f\u3044\u305f\u3044\u306e\u3067\u3042\u308c\u3070\u3001 `by_ref()` \u3092\u4f7f\u3046\u3053\u3068\u306b\u306a\u308b\u3002\u305d\u3063\u3061\u53c2\u7167\u3002\n\n\n## [`skip()`](https://doc.rust-lang.org/std/iter/trait.Iterator.html#method.skip): `Iterator<T> -> usize -> Iterator<T>`\n\u540d\u524d\u306e\u901a\u308a\u3002\n\uff5b\u4e0e\u3048\u3089\u308c\u305f\u500b\u6570(`usize`)\u3076\u3093\u306e\u8981\u7d20\u3092\u7121\u8996\u3057\u3001\u305d\u308c\u4ee5\u964d\u306e\u8981\u7d20\u3092\u8fd4\u3059\u3088\u3046\u306a\u3001\u65b0\u305f\u306a\u30a4\u30c6\u30ec\u30fc\u30bf\uff5d\u3092\u8fd4\u3059\u3002\n\n`take()` \u3057\u305f\u3082\u306e\u3068 `skip()` \u3057\u305f\u3082\u306e\u3092\u4e21\u65b9\u4f7f\u3044\u305f\u3044\u306e\u3067\u3042\u308c\u3070\u3001 `by_ref()` \u3092\u4f7f\u3046\u3053\u3068\u306b\u306a\u308b\u3002\u305d\u3063\u3061\u53c2\u7167\u3002\n\n## [`take_while()`](https://doc.rust-lang.org/std/iter/trait.Iterator.html#method.take_while): `Iterator<T> -> (&T -> bool) -> Iterator<T>`\n\u540d\u524d\u306e\u901a\u308a\u3002\n\uff5b\u4e0e\u3048\u3089\u308c\u305f\u95a2\u6570(`&T -> bool`)\u304c `true` \u3092\u8fd4\u3057\u7d9a\u3051\u308b\u9593\u306f\u305d\u306e\u8981\u7d20\u3092\u8fd4\u3057\u3001\u6700\u521d\u306b `false` \u3092\u8fd4\u3057\u305f\u3082\u306e\u542b\u3081\u305d\u308c\u4ee5\u964d\u306e\u8981\u7d20\u3092\u7121\u8996\u3059\u308b\u3088\u3046\u306a\u3001\u65b0\u305f\u306a\u30a4\u30c6\u30ec\u30fc\u30bf\uff5d\u3092\u8fd4\u3059\u3002\n\u8981\u3059\u308b\u306b\u300c**\u6700\u521d\u306b `false` \u306b\u306a\u3063\u305f\u3082\u306e\u3092\u542b\u307e\u305a\u3001\u305d\u308c\u4ee5\u524d**\u300d\u3067\u3042\u308b\u3002\n\u3061\u3087\u3046\u3069 `skip_while()` \u306e\u53cd\u5bfe\u3060\u3002\n\n~~`take_while()` \u3057\u305f\u3082\u306e\u3068 `skip_while()` \u3057\u305f\u3082\u306e\u3092\u4e21\u65b9\u4f7f\u3044\u305f\u3044\u306e\u3067\u3042\u308c\u3070\u3001 `by_ref()` \u3092\u4f7f\u3046\u3053\u3068\u306b\u306a\u308b\u3002\u305d\u3063\u3061\u53c2\u7167\u3002~~\n**\u8a02\u6b63**: `take_while()` \u306f\u3001\u4e0e\u3048\u305f\u6761\u4ef6\u3092\u6e80\u305f\u3055\u306a\u3044\u6700\u521d\u306e\u8981\u7d20\u3092\u6368\u3066\u3066\u3057\u307e\u3046\u306e\u3067\u3001 `by_ref()` \u3092\u4f7f\u3063\u3066\u3082\u99c4\u76ee\u3060\u3002\n\u7d20\u76f4\u306b\u30eb\u30fc\u30d7\u7b49\u3067\u66f8\u304f\u3079\u304d\u3060\u308d\u3046\u3002\n\n## [`skip_while()`](https://doc.rust-lang.org/std/iter/trait.Iterator.html#method.skip_while): `Iterator<T> -> (&T -> bool) -> Iterator<T>`\n\u540d\u524d\u306e\u901a\u308a\u3002\n\uff5b\u4e0e\u3048\u3089\u308c\u305f\u95a2\u6570(`&T -> bool`)\u304c `true` \u3092\u8fd4\u3057\u7d9a\u3051\u308b\u9593\u306f\u305d\u306e\u8981\u7d20\u3092\u7121\u8996\u3057\u3001\u6700\u521d\u306b `false` \u3092\u8fd4\u3057\u305f\u3082\u306e\u542b\u3081\u305d\u308c\u4ee5\u964d\u306e\u8981\u7d20\u3092\u8fd4\u3059\u3088\u3046\u306a\u3001\u65b0\u305f\u306a\u30a4\u30c6\u30ec\u30fc\u30bf\uff5d\u3092\u8fd4\u3059\u3002\n\u8981\u3059\u308b\u306b\u300c**\u6700\u521d\u306b `false` \u306b\u306a\u3063\u305f\u3082\u306e\u3092\u542b\u3081\u3001\u305d\u308c\u4ee5\u964d**\u300d\u3067\u3042\u308b\u3002\n\n~~`take_while()` \u3057\u305f\u3082\u306e\u3068 `skip_while()` \u3057\u305f\u3082\u306e\u3092\u4e21\u65b9\u4f7f\u3044\u305f\u3044\u306e\u3067\u3042\u308c\u3070\u3001 `by_ref()` \u3092\u4f7f\u3046\u3053\u3068\u306b\u306a\u308b\u3002\u305d\u3063\u3061\u53c2\u7167\u3002~~\n**\u8a02\u6b63**: `take_while()` \u306f\u3001\u4e0e\u3048\u305f\u6761\u4ef6\u3092\u6e80\u305f\u3055\u306a\u3044\u6700\u521d\u306e\u8981\u7d20\u3092\u6368\u3066\u3066\u3057\u307e\u3046\u306e\u3067\u3001 `by_ref()` \u3092\u4f7f\u3063\u3066\u3082\u99c4\u76ee\u3060\u3002\n\u7d20\u76f4\u306b\u30eb\u30fc\u30d7\u7b49\u3067\u66f8\u304f\u3079\u304d\u3060\u308d\u3046\u3002\n\n\n# \u30a4\u30c6\u30ec\u30fc\u30bf\u304c\u6301\u3064\u8981\u7d20\u5168\u4f53\u306b\u3064\u3044\u3066\u4f55\u304b\u306e\u60c5\u5831\u3092\u5f97\u308b\u7cfb\n\u4ee5\u4e0b\u306e\u3082\u306e\u306f\u3001\u3060\u3044\u305f\u3044 `Iterator<T> -> U` (\u305f\u3060\u3057 `U` \u306f\u30a4\u30c6\u30ec\u30fc\u30bf\u3067\u306f\u306a\u3044) \u306e\u3088\u3046\u306a\u578b\u306b\u306a\u308b\u3002\n\u500b\u3005\u306e\u8981\u7d20(`T` \u578b)\u306b\u3064\u3044\u3066\u4f55\u304b\u3092\u5f04\u3063\u305f\u5024\u3092\u8fd4\u3059\u3068\u3044\u3046\u308f\u3051\u3067\u306f\u306a\u3044\u3002\n\u4e00\u822c\u7684\u306a\u60c5\u5831\u3092\u5f97\u308b\u306e\u3067\u3001\u5927\u62b5\u306e\u5834\u5408\u3001 `U` \u306f `T` \u3068\u306f\u76f4\u63a5\u306b\u306f\u6b86\u3069\u95a2\u4fc2\u306e\u306a\u3044\u578b\u306b\u306a\u308b\u3002\n\n## [`size_hint()`](https://doc.rust-lang.org/std/iter/trait.Iterator.html#method.size_hint): `Iterator<T> -> (usize, Option<usize>)`\n\u308f\u304b\u308b\u7bc4\u56f2\u3067\u306e\u6b8b\u308a\u306e\u8981\u7d20\u6570\u306e\u3001\u6700\u4f4e\u3068\u6700\u9ad8\u3092\u8fd4\u3059\u3002\n\u6700\u4f4e\u304c `usize` \u3067\u3001\u6700\u9ad8\u304c `Option<usize>` \u3060\u3002\n\u73cd\u3057\u3044\u3053\u3068\u306b\u3001\u3053\u306e\u95a2\u6570\u306f\u30a4\u30c6\u30ec\u30fc\u30bf\u3092consume **\u3057\u306a\u3044**\u3002\n\n\u30c7\u30d5\u30a9\u30eb\u30c8\u3067\u306f(\u3064\u307e\u308a\u500b\u3005\u306e\u30a4\u30c6\u30ec\u30fc\u30bf\u578b\u306b\u7279\u5225\u306b\u5b9f\u88c5\u3057\u306a\u3051\u308c\u3070)\u3001 `(0, None)` \u304c\u8fd4\u3055\u308c\u308b\u3002\n\u300c\u6b8b\u308a\u306e\u8981\u7d20\u306f\u6700\u4f4e0\u500b\u3067\u3001\u6700\u9ad8\u3067\u5e7e\u3064\u306a\u306e\u304b\u306f\u4e0d\u660e\u300d\u3068\u3044\u3046\u610f\u5473\u3060\u304b\u3089\u3001\u307e\u3042\u4f55\u3082\u8a00\u3063\u3066\u306a\u3044\u306e\u3068\u540c\u3058\u3060\u3002\n\n\u3053\u306e\u95a2\u6570\u306f\u5143\u3005\u306f\u3001\u30e1\u30e2\u30ea\u9818\u57df\u78ba\u4fdd\u306e\u969b\u306e\u6700\u9069\u5316\u306a\u3069\u3067\u306e\u5229\u7528\u3092\u610f\u56f3\u3057\u3066\u7528\u610f\u3055\u308c\u3066\u3044\u308b\u3089\u3057\u3044\u3002(\u305f\u3068\u3048\u3070\u3001 `collect::<Vec<_>>()` \u3068\u304b\u3067\u4e88\u3081reserve\u3057\u3066\u304a\u304f\u8981\u7d20\u6570\u3092\u898b\u7a4d\u3063\u3066\u52b9\u7387\u5316\u3092\u76ee\u8ad6\u3080\u3001\u3068\u304b\u3060\u308d\u3046\u3002)\n\u3057\u304b\u3057\u30a4\u30c6\u30ec\u30fc\u30bf\u5074\u3067\u306e\u5b9f\u88c5\u306b\u30d0\u30b0\u304c\u3042\u308b\u304b\u3082\u3057\u308c\u306a\u3044\u304b\u3089\u3001\u4fe1\u7528\u3057\u3059\u304e\u308b\u306a\u3088\u3001\u3068\u3082[\u66f8\u3044\u3066\u3042\u308b](https://doc.rust-lang.org/std/iter/trait.Iterator.html#implementation-notes)\u3002\n\n\u7c21\u5358\u306a\u7528\u9014\u3067\u306f\u3001\u3053\u306e\u95a2\u6570\u3092\u4f7f\u3046\u6a5f\u4f1a\u306f\u306a\u3044\u3068\u8003\u3048\u3066\u826f\u3044\u3060\u308d\u3046\u3002\n\n## [`count()`](https://doc.rust-lang.org/std/iter/trait.Iterator.html#method.count): `Iterator<T> -> usize`\n\u8981\u7d20\u3092\u6089\u304f\u8aad\u307f\u98db\u3070\u3057\u3001\u305d\u306e\u8981\u7d20\u6570\u3092\u8fd4\u3059\u3002\n\u6b63\u78ba\u306b\u306f\u3001\uff5b\u30a4\u30c6\u30ec\u30fc\u30bf(\u306e `next()`)\u304c\u6700\u521d\u306b `None` \u3092\u8fd4\u3059\u307e\u3067\u306b\u8fd4\u3057\u305f\u8981\u7d20\uff5d\u306e\u500b\u6570\u3092\u8fd4\u3059\u3002\n\n`size_hint()` \u3068\u306f\u9055\u3063\u3066\u3001\u30a4\u30c6\u30ec\u30fc\u30bf\u3092consume\u3059\u308b\u306e\u3067\u6ce8\u610f\u3002\n\n## [`all()`](https://doc.rust-lang.org/std/iter/trait.Iterator.html#method.all): `Iterator<T> -> (T -> bool) -> bool`\n\u540d\u524d\u306e\u901a\u308a\u3002\n\u8981\u7d20\u3092\u4e0e\u3048\u3089\u308c\u305f\u95a2\u6570(`T -> bool`)\u306b\u6e21\u3057\u305f\u3068\u304d\u3001\u3059\u3079\u3066\u306e\u8981\u7d20\u306b\u3064\u3044\u3066 `true` \u304c\u8fd4\u308c\u3070 `true` \u3092\u3001\u305d\u3046\u3067\u306a\u3051\u308c\u3070(\u3064\u307e\u308a1\u3064\u4ee5\u4e0a\u306e\u8981\u7d20\u3067 `false` \u3092\u8fd4\u308c\u3070) `false` \u3092\u8fd4\u3059\u3002\n\n## [`any()`](https://doc.rust-lang.org/std/iter/trait.Iterator.html#method.any): `Iterator<T> -> (T -> bool) -> bool`\n\u540d\u524d\u306e\u901a\u308a\u3002\n\u8981\u7d20\u3092\u4e0e\u3048\u3089\u308c\u305f\u95a2\u6570(`T -> bool`)\u306b\u6e21\u3057\u305f\u3068\u304d\u30011\u3064\u4ee5\u4e0a\u306e\u8981\u7d20\u306b\u3064\u3044\u3066 `true` \u304c\u8fd4\u308c\u3070 `true` \u3092\u3001\u305d\u3046\u3067\u306a\u3051\u308c\u3070(\u3064\u307e\u308a\u3059\u3079\u3066\u306e\u8981\u7d20\u3067 `false` \u304c\u8fd4\u308c\u3070) `false` \u3092\u8fd4\u3059\u3002\n\n## [`position()`](https://doc.rust-lang.org/std/iter/trait.Iterator.html#method.position): `Iterator<T> -> (T -> bool) -> Option<usize>`\n\u4e0e\u3048\u3089\u308c\u305f\u95a2\u6570(`T -> bool`)\u3067 `true` \u3092\u8fd4\u3059\u3088\u3046\u306a\u6700\u521d\u306e\u8981\u7d20\u306e\u9806\u756a\u3092\u3001 `Some` \u3067\u8fd4\u3059\u3002\n\u305d\u306e\u3088\u3046\u306a\u8981\u7d20\u304c\u306a\u3051\u308c\u3070\u3001 `None` \u3092\u8fd4\u3059\u3002\n\n\u3082\u3057\u9806\u756a\u304c `usize` \u3067\u8868\u73fe\u3067\u304d\u308b\u6700\u5927\u5024\u3092\u8d85\u3048\u3066\u3044\u308c\u3070\u3001panic\u3059\u308b(\u30e1\u30a4\u30f3\u30b9\u30ec\u30c3\u30c9\u3060\u3063\u305f\u3089\u666e\u901a\u3060\u3068\u843d\u3061\u308b)\u306e\u3067\u6ce8\u610f\u3002\n(\u3068\u306f\u3044\u3048\u3001\u666e\u901a\u306b\u4f7f\u3063\u3066\u3044\u308c\u3070\u554f\u984c\u306b\u306f\u306a\u3089\u306a\u3044\u306f\u305a\u3002)\n\n## [`rposition()`](https://doc.rust-lang.org/std/iter/trait.Iterator.html#method.rposition): `I -> (T -> bool) -> Option<usize>` (\u305f\u3060\u3057 `I` \u306f `ExactSizeIterator<T>` \u304b\u3064 `DoubleEndedIterator<T>`)\n\u4e0e\u3048\u3089\u308c\u305f\u95a2\u6570(`T -> bool`)\u3067 `true` \u3092\u8fd4\u3059\u3088\u3046\u306a\u6700\u5f8c\u306e\u8981\u7d20\u306e(\u6700\u521d\u5074\u304b\u3089\u6570\u3048\u3066\u306e)\u9806\u756a\u3092\u3001 `Some` \u3067\u8fd4\u3059\u3002\n\u305d\u306e\u3088\u3046\u306a\u8981\u7d20\u304c\u306a\u3051\u308c\u3070\u3001 `None` \u3092\u8fd4\u3059\u3002\n\n\u3053\u308c\u3092\u4f7f\u3048\u308b\u30a4\u30c6\u30ec\u30fc\u30bf\u306f\u6761\u4ef6\u304c\u5c11\u3057\u53b3\u3057\u304f\u3001**\u8981\u7d20\u6570\u304c\u4e8b\u524d\u306b\u6b63\u3057\u304f\u308f\u304b\u3063\u3066\u304a\u308a\u3001\u304b\u3064\u5f8c\u308d\u304b\u3089\u8fbf\u308c\u308b**\u5fc5\u8981\u304c\u3042\u308b\u3002\n\u914d\u5217(array\u3084slice)\u3084 `Vec<T>` \u306a\u3069\u306f\u305d\u306e\u6761\u4ef6\u3092\u6e80\u305f\u3059\u3002\n\n\n# \u30a4\u30c6\u30ec\u30fc\u30bf\u3072\u3068\u3064\u3092\u3001\u4e2d\u8eab\u3092\u307b\u3068\u3093\u3069\u5909\u3048\u305a\u3001\u5f79\u7acb\u3064\u5f62\u306b\u4f5c\u308a\u66ff\u3048\u308b\u7cfb (\u5f37\u5316\u7cfb)\n\u4ee5\u4e0b\u306e\u3082\u306e\u306f\u3001\u69d8\u3005\u306a\u578b\u306e\u5024\u3092\u8fd4\u3059\u304c\u3001\u3060\u3044\u305f\u3044\u304c `Iterator<T> -> Iterator<T>` \u3068\u304b `Iterator<T> -> Iterator<&T>` \u3068\u304b\u3067\u3042\u308b\u3002\n\u304c\u3001\u300c\u5143\u306e\u30a4\u30c6\u30ec\u30fc\u30bf\u306e\u8981\u7d20\u81ea\u4f53\u306b\u306f(\u6b86\u3069)\u624b\u3092\u52a0\u3048\u306a\u3044\u300d\u70b9\u306f\u5171\u901a\u3057\u3066\u3044\u308b\u3002\n\n## [`peekable()`](https://doc.rust-lang.org/std/iter/trait.Iterator.html#method.peekable): `Iterator<T> -> Iterator<T>`\n`peek()` \u3068\u3044\u3046\u30e1\u30f3\u30d0\u95a2\u6570\u304c\u4f7f\u3048\u308b\u3088\u3046\u306a\u65b0\u305f\u306a\u30a4\u30c6\u30ec\u30fc\u30bf(`Peekable<T>`)\u3092\u8fd4\u3059\u3002\n`peek()` \u306e\u578b\u306f\u3001 `Peekable<T> -> Option<&T>` \u3067\u3042\u308b\u3002\n\u540d\u524d\u306e\u901a\u308a\u3001\u5024\u3092\u53d6\u5f97\u3057\u3066\u30a4\u30c6\u30ec\u30fc\u30bf\u5074\u304b\u3089\u596a\u3044\u53bb\u308b\u524d\u306b\u3001\u524d\u4ee5\u3066\u53c2\u7167\u3092\u8cb0\u3063\u3066\u4e2d\u8eab\u3092\u78ba\u8a8d\u3067\u304d\u308b\u3068\u3044\u3046\u308f\u3051\u3060\u3002\n\n## [`cloned()`](https://doc.rust-lang.org/std/iter/trait.Iterator.html#method.cloned): `Iterator<&T> -> Iterator<T>`\n`iter.cloned()` \u306f\u3001 `iter.map(|r| r.clone())` \u306e\u3088\u3046\u306b\u52d5\u4f5c\u3059\u308b\u3002\n(\u5b9f\u969b\u306e\u5b9f\u88c5\u3067\u306f\u3001\u5143\u306e\u30a4\u30c6\u30ec\u30fc\u30bf\u306e `next()` \u306e\u7d50\u679c\u306b\u3064\u3044\u3066[`Option::cloned()`](https://doc.rust-lang.org/core/option/enum.Option.html#method.cloned)\u3092\u547c\u3073\u51fa\u3059\u3088\u3046\u306b\u306a\u3063\u3066\u3044\u308b\u3002)\n\u8981\u3059\u308b\u306b\u3001\u53c2\u7167\u306e\u30a4\u30c6\u30ec\u30fc\u30bf\u3092\u3001\u6240\u6709\u6a29\u306e\u3042\u308b(clone\u3055\u308c\u305f)\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u30a4\u30c6\u30ec\u30fc\u30bf\u306b\u3059\u308b\u305f\u3081\u306e\u3082\u306e\u3060\u3002\n\u306a\u304a\u3001\u53c2\u7167\u306e\u30a4\u30c6\u30ec\u30fc\u30bf\u3067\u306a\u3044\u3082\u306e\u306b\u3064\u3044\u3066 `cloned()` \u3092\u547c\u3076\u3053\u3068\u306f\u3067\u304d\u306a\u3044(\u578b\u30a8\u30e9\u30fc\u306b\u306a\u308b)\u306e\u3067\u3001\u3044\u3064\u3067\u3082 `cloned()` \u3092\u4f7f\u3063\u3066\u304a\u3051\u3070\u3044\u3044\u3068\u3044\u3046\u3082\u306e\u3067\u3082\u306a\u3044\u3002\n\u5fc5\u8981\u306a\u3068\u304d\u306b\u3060\u3051\u4f7f\u304a\u3046\u3002\n\n## [`fuse()`](https://doc.rust-lang.org/std/iter/trait.Iterator.html#method.fuse): `Iterator<T> -> Iterator<T>`\n\uff5b\u5143\u306e\u30a4\u30c6\u30ec\u30fc\u30bf(\u306e `next()`)\u304c\u4e00\u5ea6\u3067\u3082 `None` \u3092\u8fd4\u3057\u305f\u3089\u3001\u305d\u308c\u4ee5\u964d\u5fc5\u305a `None` \u3092\u8fd4\u3059\u3088\u3046\u306a\u3001\u65b0\u305f\u306a\u30a4\u30c6\u30ec\u30fc\u30bf\uff5d\u3092\u8fd4\u3059\u3002\n\u96fb\u5b50\u90e8\u54c1\u306e\u30d2\u30e5\u30fc\u30ba\u307f\u305f\u3044\u306a\u3082\u306e\u3067\u3001\u4e00\u5ea6\u8981\u7d20\u304c\u5207\u308c\u305f\u3089\u518d\u3073\u7e4b\u304c\u308b\u3053\u3068\u306f\u306a\u3044\u3001\u3068\u3044\u3046\u3053\u3068\u3060\u3002\n\n`None` \u306e\u5f8c\u306b\u518d\u3073 `Some` \u3092\u8fd4\u3059\u30a4\u30c6\u30ec\u30fc\u30bf\u3068\u3044\u3046\u306e\u304c\u3069\u3093\u306a\u3082\u306e\u304b\u306f\u3001[\u516c\u5f0f](https://doc.rust-lang.org/std/iter/trait.Iterator.html#method.fuse)\u306b(\u82e5\u5e72\u5f37\u5f15\u306a\u6c17\u306f\u3059\u308b\u304c)\u4f8b\u304c\u8f09\u3063\u3066\u3044\u308b\u306e\u3067\u3001\u6c17\u306b\u306a\u308b\u306e\u3067\u3042\u308c\u3070\u53c2\u7167\u3055\u308c\u305f\u3057\u3002\n\u307e\u305f\u3001\u5b9f\u7528\u7684\u306a\u4f8b\u3068\u3057\u3066\u306f\u3001\u30e1\u30c3\u30bb\u30fc\u30b8\u30ad\u30e5\u30fc\u306e\u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u9806\u6b21\u53d6\u5f97\u3059\u308b\u30a4\u30c6\u30ec\u30fc\u30bf(\u305f\u3068\u3048\u3070[glutin::PollEventsIterator - Rust](http://tomaka.github.io/glutin/glutin/struct.PollEventsIterator.html)\u7b49)\u304c\u3042\u308b\u3002\n\u3053\u308c\u306f\u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u4e00\u5ea6\u3059\u3079\u3066\u8aad\u307f\u5207\u3063\u3066 `None` \u304c\u8fd4\u3063\u3066\u304d\u305f\u3068\u3057\u3066\u3082\u3001\u305d\u306e\u5f8c\u307e\u305f\u30e1\u30c3\u30bb\u30fc\u30b8\u304c\u5230\u7740\u3059\u308c\u3070 `Some` \u304c\u8fd4\u308b\u3088\u3046\u306a\u30a4\u30c6\u30ec\u30fc\u30bf\u3060\u3002\n\n## [`by_ref()`](https://doc.rust-lang.org/std/iter/trait.Iterator.html#method.by_ref): `Iterator<T> -> &Iterator<T>`\n\u30a4\u30c6\u30ec\u30fc\u30bf\u3092consume **\u305b\u305a\u306b**\u3001\u305d\u306e\u30a4\u30c6\u30ec\u30fc\u30bf\u306emutable\u306a\u53c2\u7167\u3092\u8fd4\u3059\u3002\n\u3053\u3044\u3064\u306f\u3061\u3087\u3063\u3068\u7279\u6b8a\u3060\u3002\n\n\u30a4\u30c6\u30ec\u30fc\u30bf\u3092\u5225\u306e\u30a4\u30c6\u30ec\u30fc\u30bf\u306b\u5909\u5316\u3055\u305b\u308b\u7cfb(`map()` \u3068\u304b `take()` \u3068\u304b)\u306e\u95a2\u6570\u306e\u5927\u534a\u306f\u3001\u5143\u306e\u30a4\u30c6\u30ec\u30fc\u30bf\u3092\u6d88\u8cbb(**consume**)\u3057\u3066\u65b0\u305f\u306a\u30a4\u30c6\u30ec\u30fc\u30bf\u3092\u8fd4\u3059\u3002\n\u3057\u304b\u3057\u3001\u305f\u3068\u3048\u3070\u300c `take()` \u3057\u305f\u30a4\u30c6\u30ec\u30fc\u30bf\u306e\u6b8b\u308a\u3092\u3001\u307e\u305f\u5f8c\u3067\u4f7f\u3044\u305f\u3044\u300d\u306a\u3069\u306e\u5834\u5408\u3001 `take()` \u306e\u6642\u70b9\u3067\u5143\u306e\u30a4\u30c6\u30ec\u30fc\u30bf\u306e\u6240\u6709\u6a29\u3092\u5931\u3063\u3066\u306f\u56f0\u308b\u308f\u3051\u3060\u3002\n\n```rust\nlet vec_iter = (40..46).collect::<Vec<_>>().into_iter();\n\nprintln!(\"first three:\");\nfor (i, n) in vec_iter.take(3).enumerate() {\n    println!(\"{}: {}\", i, n);\n}\n\nprintln!(\"rest:\");\nfor (i, n) in vec_iter.enumerate() { // <- \u30a8\u30e9\u30fc\uff01\n    // \u2191 \"use of moved value: `vec_iter` [E0382]\"\n    println!(\"{}: {}\", i, n);\n}\n```\n\n\u4e0a\u306e\u4f8b\u3060\u3068\u3001\u4e8c\u5ea6\u76ee\u306b\u4f7f\u3044\u305f\u3044\u3068\u304d(\u30a8\u30e9\u30fc\u306e\u884c)\u3001\u65e2\u306b `vec_iter` \u306f `vec_iter.take(3)` \u306b\u3088\u3063\u3066consume\u3055\u308c\u3066\u304a\u308a\u3001\u547c\u3073\u51fa\u3057\u5143\u306e\u30b3\u30fc\u30c9\u306f `vec_iter` \u306e\u6240\u6709\u6a29\u3092\u5931\u3063\u3066\u3044\u308b\u305f\u3081\u3001\u6b21\u306e\u4f7f\u7528(`vec_iter.enumerate()`)\u3067\u30a8\u30e9\u30fc\u306b\u306a\u3063\u305f\u308f\u3051\u3060\u3002\n\n\u3067\u3001\u3069\u3046\u3059\u308b\u304b\u3068\u3044\u3046\u3068\u3001\u3053\u3046\u3059\u308b\u3002\n\n```rust\n// \u30a4\u30c6\u30ec\u30fc\u30bf\u306f\u4f55\u5ea6\u3082\u4f7f\u3046(\u304b\u3064\u72b6\u614b\u304c\u5909\u66f4\u3055\u308c\u308b)\u306e\u3067\u3001mutable\u306b\u3059\u308b\nlet mut vec_iter = (40..46).collect::<Vec<_>>().into_iter();\n\nprintln!(\"first three:\");\n// `by_ref()` \u3057\u3066\u304b\u3089 `take()` \u3059\u308b\nfor (i, n) in vec_iter.by_ref().take(3).enumerate() {\n    println!(\"{}: {}\", i, n);\n}\n\nprintln!(\"rest:\");\nfor (i, n) in vec_iter.enumerate() { // <- \u304a\uff4b\n    println!(\"{}: {}\", i, n);\n}\n```\n\n\u3053\u308c\u306f\u30b3\u30f3\u30d1\u30a4\u30eb\u3067\u304d\u3001\u6b63\u3057\u304f\u52d5\u4f5c\u3059\u308b\u3002\n\u3082\u3061\u308d\u3093\u3001\u51fa\u529b\u306f\u3053\u3046\u306a\u308b\u3002\n\n```text\noutput:\n0: 40\n1: 41\n2: 42\nrest:\n0: 43\n1: 44\n2: 45\n```\n\n### \u53c2\u8003\u307e\u3067\u306b\n\n\u578b\u3092\u898b\u308c\u3070\u308f\u304b\u308b\u3068\u304a\u308a\u3001 `iter.by_ref()` \u3068\u3044\u3046\u306e\u306f\u3001\u3064\u307e\u308a `(&mut iter)` \u3068\u540c\u3058\u306a\u306e\u3060\u304c\u3001C++\u7b49\u306b\u99b4\u67d3\u3093\u3067\u3044\u308b\u4eba\u306b\u306f\u3053\u306e\u30b3\u30fc\u30c9\u306f\u76f4\u89b3\u7684\u306b\u308f\u304b\u308a\u304b\u306d\u308b\u3060\u308d\u3046(\u5c11\u306a\u304f\u3068\u3082\u79c1\u306f\u305d\u3046\u3060\u3063\u305f)\u3002\n\n\u516c\u5f0f\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u306e\u3001[`Iterator` trait\u3092\u5b9f\u88c5\u3057\u3066\u3044\u308b\u578b\u306e\u30ea\u30b9\u30c8](https://doc.rust-lang.org/std/iter/trait.Iterator.html#implementors)\u3092\u3088\u301c\u304f\u898b\u308b\u3068\u3001\n`impl<'a, I> Iterator for &'a mut I where I: Iterator + ?Sized`\n\u3068\u3044\u3046\u306e\u304c\u3042\u308b\u3002\n\u300c\u4efb\u610f\u306e\u30a4\u30c6\u30ec\u30fc\u30bf\u578b `I` \u306b\u3064\u3044\u3066\u3001 `&mut I` \u578b\u306f `Iterator` trait\u3092\u5b9f\u88c5\u3057\u3066\u3044\u308b\u300d\u3068\u3044\u3046\u610f\u5473\u3060\u3002\n\u5b9f\u306fRust\u3067\u306f\u3001\u30dd\u30a4\u30f3\u30bf\u306e\u3088\u3046\u306a\u578b\u306b\u3064\u3044\u3066\u3082\u30e1\u30f3\u30d0\u95a2\u6570(\u306e\u3088\u3046\u306a\u3082\u306e)\u3092\u5b9f\u88c5\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u3001\u3053\u306e\u5834\u5408\u3067\u306f\u300c\u30a4\u30c6\u30ec\u30fc\u30bf\u306e\u30dd\u30a4\u30f3\u30bf\u300d\u306b\u3064\u3044\u3066 `next()` \u7b49\u306e\u30e1\u30f3\u30d0\u95a2\u6570\u3092\u5b9f\u88c5\u3057\u3066\u3044\u308b\u3002\n\u305d\u3057\u3066\u3001 `iter.by_ref().take(3)` \u3084 `(&mut iter).take(3)` \u3068\u3044\u3046\u306e\u306f\u3001 **`iter` \u305d\u306e\u3082\u306e\u3067\u306f\u306a\u304f\u3001 `iter` \u3078\u306e\u53c2\u7167\u306b\u3064\u3044\u3066 `take()` \u3092\u547c\u3073\u51fa\u3057\u3066\u3044\u308b**\u306e\u3060\u3002\n\u3067\u3001 **`Iterator::take(&mut iter, 3)`** \u306e\u3088\u3046\u306a\u5f62\u3067\u547c\u3073\u51fa\u3055\u308c\u308b\u304b\u3089\u3001 `iter` \u306fconsume\u3055\u308c\u305a\u3001\u6240\u6709\u6a29\u3082\u6301\u3063\u305f\u307e\u307e\u3067\u3044\u3089\u308c\u308b\u3001\u3068\u3044\u3046\u539f\u7406\u3060\u3002\n\n\u53c2\u8003\u307e\u3067\u306b\u3001[\u8a72\u5f53\u7b87\u6240\u306e\u30bd\u30fc\u30b9 (github)](https://github.com/rust-lang/rust/blob/c30b771ad9d44ab84f8c88b80c25fcfde2433126/src/libcore/iter.rs#L2385-L2390)\u306e\u5f15\u7528\u3082\u3057\u3066\u304a\u3053\u3046\u3002\n> ```rust\n> #[stable(feature = \"rust1\", since = \"1.0.0\")]\n> impl<'a, I: Iterator + ?Sized> Iterator for &'a mut I {\n>     type Item = I::Item;\n>     fn next(&mut self) -> Option<I::Item> { (**self).next() }\n>     fn size_hint(&self) -> (usize, Option<usize>) { (**self).size_hint() }\n> }\n> ```\n\n## [`inspect()`](https://doc.rust-lang.org/std/iter/trait.Iterator.html#method.inspect): `Iterator<T> -> (&T -> ()) -> Iterator<T>`\n\uff5b\u30a4\u30c6\u30ec\u30fc\u30bf\u306e\u8981\u7d20\u304c\u5fc5\u8981\u3068\u3055\u308c\u308b\u6bce\u306b\u3001\u305d\u306e\u8981\u7d20\u3092\u526f\u4f5c\u7528\u306e\u3042\u308b\u95a2\u6570\u306b\u6e21\u3057\u3066\u5b9f\u884c\u3059\u308b\u3088\u3046\u306a\u3001\u65b0\u305f\u306a\u30a4\u30c6\u30ec\u30fc\u30bf\uff5d\u3092\u8fd4\u3059\u95a2\u6570\u3002\n\n\u8981\u3059\u308b\u306b\u3001\u4e2d\u8eab\u3092\u8997\u304d\u898b\u3067\u304d\u308b\u3002\n**Ruby\u3067\u8a00\u3046\u3068\u3053\u308d\u306e `tap`** \u3060\u3002\n(\u53c2\u8003: [Tap\u304cRuby\u306e\u65b0\u305f\u306a\u5236\u5fa1\u69cb\u9020\u306e\u4e16\u754c\u3092\u958b\u304f](http://melborne.github.io/2012/10/29/rubys-new-control-structure-by-tap-and-break/))\n\n[\u516c\u5f0f\u306e\u30b3\u30fc\u30c9\u4f8b](https://doc.rust-lang.org/std/iter/trait.Iterator.html#examples-19)\u3092\u898b\u308c\u3070\u3001\u4f55\u3082\u304b\u3082\u7406\u89e3\u3067\u304d\u308b\u3053\u3068\u3060\u308d\u3046\u3002\n\n\n# \u30a4\u30c6\u30ec\u30fc\u30bf\u3072\u3068\u3064\u3092\u3001\u9806\u3092\u5909\u5316\u3055\u305b\u305f\u308a\u60c5\u5831\u3092\u4ed8\u968f\u3055\u305b\u305f\u308a\u3057\u3066\u3001\u5f79\u7acb\u3064\u5f62\u306b\u4f5c\u308a\u66ff\u3048\u308b\u7cfb (\u9032\u5316\u7cfb)\n\u4ee5\u4e0b\u306e\u3082\u306e\u306f\u3001\u69d8\u3005\u306a\u578b\u306e\u5024\u3092\u8fd4\u3059\u3002\n\u304c\u3001\u300c\u5143\u306e\u30a4\u30c6\u30ec\u30fc\u30bf\u306e\u8981\u7d20\u81ea\u4f53\u306b\u306f(\u6b86\u3069)\u624b\u3092\u52a0\u3048\u306a\u3044\u300d\u70b9\u306f\u5171\u901a\u3057\u3066\u3044\u308b\u3002\n\n## [`enumerate()`](https://doc.rust-lang.org/std/iter/trait.Iterator.html#method.enumerate): `Iterator<T> -> Iterator<(usize, T)>`\n\uff5b`T` \u3092\u8fd4\u3059\u30a4\u30c6\u30ec\u30fc\u30bf\u304b\u3089\u3001 `enumerate()` \u3092\u547c\u3093\u3060\u6642\u70b9\u3092\u6700\u521d\u3068\u3057\u3066\u3001\u8981\u7d20\u306e\u9806\u756a\u3092 `(\u9806\u756a, T)` \u306e\u5f62\u3067\u4e00\u7dd2\u306b\u8fd4\u3059\u3088\u3046\u306a\u3001\u65b0\u305f\u306a\u30a4\u30c6\u30ec\u30fc\u30bf\uff5d\u3092\u8fd4\u3059\u3002\n\n`iter.enumerate()` \u306f\u3001 `(0_usize..).zip(iter)` \u3068\u540c\u7fa9\u3067\u3042\u308b\u3002\n\u3082\u3057 `usize` \u4ee5\u5916\u306e\u8981\u7d20\u3067\u9806\u756a\u304c\u5fc5\u8981\u306a\u306e\u3067\u3042\u308c\u3070\u3001 `zip()` \u3092\u4f7f\u3063\u305f\u65b9\u304c\u826f\u3044\u3002\n\n## [`cycle()`](https://doc.rust-lang.org/std/iter/trait.Iterator.html#method.cycle): `Iterator<T> -> Iterator<T>`\n\u30a4\u30c6\u30ec\u30fc\u30bf\u3092\u6c38\u9060\u306b\u30eb\u30fc\u30d7\u3055\u305b\u308b\u3002\n\u3064\u307e\u308a\u3001\u6700\u5f8c\u306e\u8981\u7d20\u306e\u6b21\u306b\u3001\u307e\u305f\u6700\u521d\u306e\u8981\u7d20\u304b\u3089\u7e70\u308a\u8fd4\u3059\u3002\n(\u5143\u306e\u30a4\u30c6\u30ec\u30fc\u30bf(\u306e `next()`) \u304c `None` \u3092\u8fd4\u3059\u3088\u3046\u306a\u5834\u5408\u3001\u30a4\u30c6\u30ec\u30fc\u30bf\u306e\u72b6\u614b\u304c `cycle()` \u547c\u3073\u51fa\u3057\u76f4\u5f8c\u3068\u540c\u3058\u306b\u306a\u308b\u2026\u2026\u3068\u3044\u3046\u30a4\u30e1\u30fc\u30b8\u3002\u4f1d\u308f\u308c\uff01)\n\n[\u516c\u5f0f\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u306e\u4f8b](https://doc.rust-lang.org/std/iter/trait.Iterator.html#examples-38)\u3092\u898b\u305f\u65b9\u304c\u65e9\u3044\u6c17\u306f\u3057\u305f\u3002\n\n## [`scan()`](https://doc.rust-lang.org/std/iter/trait.Iterator.html#method.scan): `Iterator<T> -> (&mut S -> T -> Option<B>) -> Iterator<B>`\n`fold()` \u306e\u9014\u4e2d\u7d4c\u904e\u304c\u898b\u3048\u308b\u7248\u3002\n`S` \u306f\u72b6\u614b\u3001 `B` \u306f\u65b0\u3057\u3044\u30a4\u30c6\u30ec\u30fc\u30bf\u304c\u5410\u304f\u578b\u3060\u3002\n\n\u8a73\u3057\u304f\u306f[\u516c\u5f0f\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u306e\u4f8b](https://doc.rust-lang.org/std/iter/trait.Iterator.html#examples-16)\u3092\u898b\u308c\u3070\u308f\u304b\u308b\u304c\u3001\u6e21\u3057\u305f\u95a2\u6570\u304c\u3001\u72b6\u614b\u306e\u66f4\u65b0\u3068\u3001\u6b21\u306b\u30a4\u30c6\u30ec\u30fc\u30bf\u304c\u8fd4\u3059\u5024\u306e\u8a08\u7b97\u306e\u4e21\u65b9\u3092\u62c5\u3063\u3066\u3044\u308b\u3002\n\n\u516c\u5f0f\u3068\u306f\u5225\u306e\u4f8b\u3082\u51fa\u3057\u3066\u307f\u3088\u3046\u3002\u304a\u306a\u3058\u307f\u30d5\u30a3\u30dc\u30ca\u30c3\u30c1\u6570\u5217\u3060\u3002\n\n```rust:\u4f8b\nlet fib = (0..12).scan((0, 1), |prev, _| {\n        let ret = prev.0;\n        *prev = (prev.1, prev.0 + prev.1);\n        Some(ret)\n    })\n    .collect::<Vec<_>>();\nprintln!(\"fib: {:?}\", fib);\n```\n\n```text:\u5b9f\u884c\u7d50\u679c\nfib: [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89]\n```\n\n\u3079\u3064\u306b\u30eb\u30fc\u30d7\u3067\u3084\u308c\u3070\u3044\u3044\u8a71\u3067\u306f\u3042\u308b\u306e\u3060\u304c\u3001\u307e\u3042\u3068\u306b\u304b\u304f\u72b6\u614b\u3092\u6301\u3066\u308b\u3068\u3044\u3046\u3053\u3068\u306f\u666e\u901a\u306e\u30eb\u30fc\u30d7\u3063\u307d\u3044\u3053\u3068\u304c\u3067\u304d\u308b\u3068\u3044\u3046\u3053\u3068\u3060\u3002\n\n~~(\u4f55\u304b\u3044\u3044\u4f8b\u52df\u96c6\u4e2d)~~\n\u4f8b\u306f[\u30b3\u30e1\u30f3\u30c8](http://qiita.com/l1048576/items/34887794c146042aebf1#comment-680fcc7685da699bdb79)\u3092\u53c2\u7167\u3002\n\n## [`rev()`](https://doc.rust-lang.org/std/iter/trait.Iterator.html#method.rev): `DoubleEndedIterator<T> -> DoubleEndedIterator<T>`\n\u540d\u524d\u306e\u901a\u308a\u3002\n\uff5b\u5143\u306e\u30a4\u30c6\u30ec\u30fc\u30bf\u3068\u306f\u9806\u756a\u3092\u9006\u306b\u3057\u3066\u8fd4\u3059\u3088\u3046\u306a\u3001\u65b0\u305f\u306a\u30a4\u30c6\u30ec\u30fc\u30bf\uff5d\u3092\u8fd4\u3059\u3002\n\n### \u53c2\u8003\n\n`DoubleEndedIterator<T>` \u3068\u3044\u3046\u306e\u306f\u3001**\u6700\u5f8c\u5c3e\u304b\u3089\u524d\u3078\u3068\u8fbf\u308c\u308b\u30a4\u30c6\u30ec\u30fc\u30bf**\u306e\u3053\u3068\u3060\u3002\n(\u5358\u306b\u5f8c\u308d\u5411\u304d\u306b\u9032\u3081\u308b\u30a4\u30c6\u30ec\u30fc\u30bf\u3068\u3044\u3046\u308f\u3051**\u3067\u306f\u306a\u3044**\u3002)\nC++\u3067\u8a00\u3046\u3068\u3053\u308d\u306e\u3001\u5f8c\u308d\u5411\u304d\u306b\u9032\u3080`ForwardIterator`\u3067\u3042\u308a\u3001[`BidirectionalIterator`](http://en.cppreference.com/w/cpp/concept/BidirectionalIterator)**\u3067\u306f\u306a\u3044**\u3002\n\n`DoubleEndedIterator<T>` \u306f\u3001 `Iterator<T>` \u3067\u3082\u3042\u308b\u304c\u3001\u305d\u308c\u306b\u52a0\u3048\u3066 [`next_back()`](https://doc.rust-lang.org/std/iter/trait.DoubleEndedIterator.html#tymethod.next_back) \u3068\u3044\u3046\u30e1\u30f3\u30d0\u95a2\u6570\u3092\u6301\u3063\u3066\u3044\u308b\u3002\n\u305d\u306e\u52d5\u4f5c\u306b\u3064\u3044\u3066\u306f\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8(\u524d\u30ea\u30f3\u30af)\u3092\u898b\u308b\u3079\u3057\u3002\n\n\n# \u30a4\u30c6\u30ec\u30fc\u30bf\u3075\u305f\u3064\u3092\u7d44\u307f\u5408\u308f\u305b\u3066\u3001\u5f79\u7acb\u3064\u5f62\u306b\u4f5c\u308a\u66ff\u3048\u308b\u7cfb (\u5408\u4f53\u7cfb)\n\u4ee5\u4e0b\u306e\u3082\u306e\u306f\u3001 `Iterator<T> -> Iterator<U> -> Iterator<T\u3068U\u306b\u95a2\u4fc2\u3042\u308b\u578b>` \u306e\u3088\u3046\u306a\u611f\u3058\u3067\u3042\u308b\u3002\n\n## [`chain()`](https://doc.rust-lang.org/std/iter/trait.Iterator.html#method.chain): `Iterator<T> -> IntoIterator<T> -> Iterator<T>`\n\u30a4\u30c6\u30ec\u30fc\u30bf\u3092\u7e4b\u3052\u308b\u3002\n`iter1.chain(iter2)` \u306f\u3001 `iter1` \u304b\u3089\u8981\u7d20\u3092\u5168\u90e8\u8aad\u307f\u304d\u3063\u305f\u5f8c\u3001\u7d9a\u3051\u3066 `iter2` \u306e\u8981\u7d20\u3092\u8fd4\u3059\u3002 `iter2` \u306e\u8981\u7d20\u3082\u5168\u90e8\u8aad\u3093\u3060\u3089\u3001\u4eca\u5ea6\u3053\u305d\u7d42\u308f\u308a\u3068\u306a\u308b\u3002\n\n`IntoIterator<T>` \u3068\u3044\u3046\u306e\u306f\u3001\u3064\u307e\u308a\u96d1\u306b\u8a00\u3048\u3070\u300c `Iterator<T>` \u306b\u5909\u63db\u53ef\u80fd\u300d\u3068\u3044\u3046\u3053\u3068\u3060\u3002\n\u81ea\u660e\u306a\u4f8b\u3067\u306f\u3001 `Iterator<T>` \u306a\u3069\u306f `IntoIterator<T>` \u3067\u3082\u3042\u308b\u3002\n\u4ed6\u306b\u3082\u3001 `Vec<T>` \u306f `Iterator<T>` \u306b\u5909\u63db\u3067\u304d\u308b(\u6b63\u78ba\u306b\u306f `impl<T> IntoIterator for Vec<T>` \u3067\u5b9f\u88c5\u3055\u308c\u3066\u3044\u308b)\u306e\u3067\u3001 `Iterator<T>::chain()` \u306b `Vec<T>` \u3092\u6e21\u3059\u3001\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u30b3\u30fc\u30c9\u3082\u66f8\u3051\u308b\u3002\n\n```rust\nfor i in vec![1, 2, 3].into_iter().chain(vec![4, 5, 6]) {\n    println!(\"{}\", i);\n}\n```\n\n\u307e\u305f\u3001 `iter1.chain(iter2).chain(iter3)` \u306a\u3069\u306e\u3088\u3046\u306b\u8907\u6570\u3092\u4e00\u6c17\u306b\u7e4b\u3052\u308b\u3053\u3068\u3082\u3067\u304d\u308b\u3002\n\n## [`zip()`](https://doc.rust-lang.org/std/iter/trait.Iterator.html#method.zip): `Iterator<T> -> IntoIterator<U> -> Iterator<(T, U)>`\n2\u3064\u306e\u30a4\u30c6\u30ec\u30fc\u30bf\u304b\u3089\u3001\uff5b\u4e21\u65b9\u306e\u8981\u7d20\u3092\u9806\u306b\u53d6\u3063\u3066\u3001\u305d\u306e\u30da\u30a2\u3092\u8fd4\u3059\u3088\u3046\u306a\u30a4\u30c6\u30ec\u30fc\u30bf\uff5d\u3092\u4f5c\u308b\u3002\n\n\u3053\u3053\u3067\u8aac\u660e\u3059\u308b\u3088\u308a\u3001[\u516c\u5f0f\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u306e\u4f8b](https://doc.rust-lang.org/std/iter/trait.Iterator.html#examples-6)\u3092\u898b\u305f\u65b9\u304c\u65e9\u3044\u3060\u308d\u3046\u3002\n\n`IntoIterator<U>` \u306b\u3064\u3044\u3066\u306f\u3001 `chain()` \u306e\u3068\u3053\u308d\u3067\u8aac\u660e\u3057\u305f\u901a\u308a\u3060\u3002\n\n\n# \u30a4\u30c6\u30ec\u30fc\u30bf\u304c\u6301\u3064\u500b\u3005\u306e\u8981\u7d20\u3092\u5909\u66f4\u3057\u3066\u6d41\u3059\u7cfb (\u52a0\u5de5\u7cfb)\n\u578b\u306f\u3001\u3060\u3044\u305f\u3044 `Iterator<T> -> (T -> U) -> U\u306b\u95a2\u4fc2\u3059\u308b\u30a4\u30c6\u30ec\u30fc\u30bf\u578b` \u307f\u305f\u3044\u306a\u611f\u3058\u3067\u3042\u308b\u3002\n\n## [`map()`](https://doc.rust-lang.org/std/iter/trait.Iterator.html#method.map): `Iterator<T> -> (T -> U) -> Iterator<U>`\n\u540d\u524d\u304b\u3089\u60f3\u50cf\u3067\u304d\u308b\u901a\u308a\u3060\u3002\n\n\u5c11\u3057\u3060\u3051\u6ce8\u610f\u304c\u5fc5\u8981\u306a\u306e\u306f\u3001 `map()` \u7b49\u306f\u57fa\u672c\u7684\u306b**\u8a55\u4fa1\u304c\u9045\u5ef6\u3055\u308c\u308b**\u306e\u3067\u3001\u3053\u308c**\u5358\u4f53\u3067\u306f `for` \u6587\u306e\u4ee3\u308f\u308a\u306b\u306f\u4f7f\u3048\u306a\u3044**\u3068\u3044\u3046\u3053\u3068\u3067\u3042\u308b\u3002\n\u308f\u304b\u308a\u3084\u3059\u3044\u30b3\u30fc\u30c9\u3092\u66f8\u304f\u306e\u306a\u3089\u3001\u3042\u304f\u307e\u3067\u5024\u3092\u5909\u5316\u3055\u305b\u308b\u305f\u3081\u306b\u4f7f\u3046\u3079\u304d\u3060\u308d\u3046\u3002\n\n## [`fliter_map()`](https://doc.rust-lang.org/std/iter/trait.Iterator.html#method.filter_map): `Iterator<T> -> (T -> Option<U>) -> Iterator<U>`\n\u30a4\u30c6\u30ec\u30fc\u30bf\u306b\u5bfe\u3057\u3066\u3001\uff5b\u8981\u7d20\u3092\u53d7\u3051\u53d6\u3063\u3066 `Option` \u3092\u8fd4\u3059\u95a2\u6570\uff5d\u3092\u9069\u7528\u3057\u3001 `Some` \u3060\u3063\u305f\u3082\u306e\u306e\u4e2d\u8eab\u3060\u3051\u3092\u7e4b\u3052\u3066\u8fd4\u3059\u95a2\u6570\u3002\n\u8981\u3059\u308b\u306b\u3001\u540d\u524d\u306e\u901a\u308a `filter` \u3068 `map` \u3092\u540c\u6642\u306b\u884c\u3046\u3068\u3044\u3046\u3053\u3068\u3060\u3002\n\n\u5225\u306e\u30a4\u30e1\u30fc\u30b8\u3068\u3057\u3066\u306f\u3001**`Option` \u306e\u30a4\u30c6\u30ec\u30fc\u30bf\u306b\u3064\u3044\u3066\u3001\u5185\u5074\u306e `Some` \u3092\u5265\u304c\u3059(unwrap\u3059\u308b)**\u611f\u899a\u3060\u3002\n\n\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u30b3\u30fc\u30c9\u304c:\n\n```rust:\u4f8b1\nfor temp_opt in iter.map(foo) {\n    if let Some(i) = temp_opt {\n        bar(i);\n    }\n}\n```\n\n```rust:\u4f8b2\nfor temp_iter in iter.map(foo).filter(Option::is_some).map(Option::unwrap) {\n    bar(i);\n}\n```\n\n`filter_map` \u3092\u4f7f\u3046\u3068\u3001\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u3067\u304d\u308b:\n\n```rust\nfor i in iter.filter_map(foo) {\n    bar(i);\n}\n```\n\n\u7d50\u69cb\u4fbf\u5229\u3060\u3002\n\n[\u516c\u5f0f\u306e\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8](https://doc.rust-lang.org/std/iter/trait.Iterator.html#examples-9)\u3067\u306f\u3001\u300c\u5931\u6557\u3059\u308b\u304b\u3082\u3057\u308c\u306a\u3044(`Result` \u3092\u8fd4\u3059)\u95a2\u6570\u3067map\u3057\u3001\u305d\u306e\u7d50\u679c\u304b\u3089 `Ok` \u306a\u3082\u306e\u3060\u3051\u3092\u53d6\u308a\u51fa\u3057\u3066\u3001\u305d\u306e\u4e2d\u8eab\u3092\u5217\u6319\u3059\u308b\u30a4\u30c6\u30ec\u30fc\u30bf\u3092\u8fd4\u3059\u300d\u3001\u8981\u3059\u308b\u306b**\u6210\u529f\u4f8b\u3060\u3051\u3092\u5217\u6319\u3059\u308b**\u3068\u3044\u3046\u3001\u3044\u304b\u306b\u3082\u5b9f\u7528\u7684\u306a\u4f8b\u304c\u8f09\u3063\u3066\u3044\u308b\u306e\u3067\u3001\u4e00\u5ea6\u306f\u898b\u3066\u307f\u308b\u3079\u304d\u3067\u3042\u308b\u3002\n\n## [`flat_map()`](https://doc.rust-lang.org/std/iter/trait.Iterator.html#method.flat_map): `Iterator<T> -> (T -> IntoIterator<U>) -> Iterator<U>`\n\u30a4\u30c6\u30ec\u30fc\u30bf\u306b\u5bfe\u3057\u3066\u3001\uff5b\u8981\u7d20\u3092\u53d7\u3051\u53d6\u3063\u3066\u30a4\u30c6\u30ec\u30fc\u30bf(\u306b\u5909\u63db\u3067\u304d\u308b\u3082\u306e)\u3092\u8fd4\u3059\u95a2\u6570\uff5d\u3092\u9069\u7528\u3057\u3001\u7d50\u679c\u51fa\u3066\u304d\u305f\u305d\u308c\u305e\u308c\u306e\u30a4\u30c6\u30ec\u30fc\u30bf\u3092\u9806\u306b\u7e4b\u3052\u3066\u8fd4\u3059\u95a2\u6570\u3067\u3042\u308b\u3002\n\n\u30a4\u30e1\u30fc\u30b8\u3068\u3057\u3066\u306f\u3001**\u30cd\u30b9\u30c8\u3057\u305f\u30a4\u30c6\u30ec\u30fc\u30bf\u306b\u3064\u3044\u3066\u3001\u5185\u5074\u306e\u30a4\u30c6\u30ec\u30fc\u30bf\u3092\u5265\u304c\u3059(unwrap\u3059\u308b)**\u611f\u899a\u3060\u3002\n\n\u3053\u3093\u306a\u30b3\u30fc\u30c9\u304c:\n\n```rust:\u4f8b1\nfor temp_iter in iter.map(foo) {\n    for i in temp_iter {\n        bar(i);\n    }\n}\n```\n\n\u3053\u3046\u306a\u308b:\n\n```rust:\nfor temp_iter in iter.flat_map(foo) {\n    bar(i);\n}\n```\n\n### \u53c2\u8003\n\n\u52d8\u306e\u826f\u3044\u4eba\u306f(\u3068\u3044\u3046\u304b\u578b\u3092\u898b\u308c\u3070)\u304a\u6c17\u4ed8\u304d\u3060\u308d\u3046\u304c\u3001 `filter_map()` \u306f `flat_map()` \u306e `Option` \u7279\u5316\u7248\u3067\u3042\u308b\u3002\n\u305d\u3057\u3066 `Option<T>` \u306f `IntoIterator<T>` \u3067\u3082\u3042\u308b(\u301c\u3092\u5b9f\u88c5\u3057\u3066\u3044\u308b)\u304b\u3089\u3001 `filter_map()` \u306f `flat_map()` \u306b\u6a5f\u68b0\u7684\u306b\u7f6e\u304d\u63db\u3048\u3066\u3082\u3001\u4f55\u3089\u554f\u984c\u306a\u304f\u52d5\u4f5c\u3059\u308b\u3002\n\n\u3080\u3057\u308d\u3001 `Result<T>` \u306a\u3093\u304b\u3082 `IntoIterator<T>` \u3092\u5b9f\u88c5\u3057\u3066\u3044\u308b\u306e\u3067\u3001[\u516c\u5f0f\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u306e `filter_map()` \u306e\u4f8b](https://doc.rust-lang.org/std/iter/trait.Iterator.html#examples-9)\u306f\u3001 `flat_map` \u3092\u4f7f\u3046\u3068\u3082\u3063\u3068\u7c21\u5358\u306b\u306a\u308b\u3002\n\n```rust:\u516c\u5f0f\u306e\u4f8b\nlet a = [\"1\", \"2\", \"lol\"];\n\nlet mut iter = a.iter().filter_map(|s| s.parse().ok());\n\nassert_eq!(iter.next(), Some(1));\nassert_eq!(iter.next(), Some(2));\nassert_eq!(iter.next(), None);\n```\n\n```rust:flat_map\u3092\u4f7f\u3046\nlet a = [\"1\", \"2\", \"lol\"];\n\n// \u2193 `.ok()` \u8981\u3089\u305a\nlet mut iter = a.iter().flat_map(|s| s.parse());\n\nassert_eq!(iter.next(), Some(1));\nassert_eq!(iter.next(), Some(2));\nassert_eq!(iter.next(), None);\n```\n\n\u3069\u3061\u3089\u3082\u4f7f\u3048\u308b\u5834\u5408\u3001\u6587\u5b57\u6570\u3092\u7bc0\u7d04\u3067\u304d\u308b `flat_map()` \u3092\u4f7f\u3046\u304b\u3001\u578b\u3068\u610f\u5473\u306e\u660e\u78ba\u306a `filter_map()` \u3092\u4f7f\u3046\u304b\u306f\u2026\u2026\u307e\u3042\u7686\u3055\u3093\u306e\u4fe1\u4ef0\u6b21\u7b2c\u3060\u3002\n\n\n# \u30a4\u30c6\u30ec\u30fc\u30bf\u306e\u5168\u8981\u7d20\u3092\u6d3b\u7528\u3057\u3066\u3001\u5225\u7269\u3092\u4f5c\u308a\u51fa\u3059\u7cfb\n\u76f4\u89b3\u7684\u306b\u306f\u3001reduce\u3068\u304bfold\u307f\u305f\u3044\u306a\u30a4\u30e1\u30fc\u30b8\u3060\u3002\n\u578b\u306f\u69d8\u3005\u3067\u3001 `Iterator<T> -> T\u306b\u95a2\u4fc2\u3042\u308b\u578b` \u304f\u3089\u3044\u306e\u3053\u3068\u3057\u304b\u8a00\u3048\u306a\u3044\u3002\n\n## [`collect()`](https://doc.rust-lang.org/std/iter/trait.Iterator.html#method.collect): `Iterator<T> -> T\u306e\u30b3\u30ec\u30af\u30b7\u30e7\u30f3`\n\u540d\u524d\u306e\u901a\u308a\u3002\n(\u30b3\u30ec\u30af\u30b7\u30e7\u30f3\u3068\u3044\u3046\u306e\u306f\u3001C++\u3067\u8a00\u3046\u3068\u3053\u308d\u306e\u30b3\u30f3\u30c6\u30ca\u3067\u3042\u308b\u3002)\n`into_iter()` \u306e\u9006\u307f\u305f\u3044\u306a\u3084\u3064\u3060\u3002\n\n\u3068\u306f\u3044\u3048\u3001\u5b9f\u969b\u306e\u3068\u3053\u308dRust\u3067\u30b3\u30ec\u30af\u30b7\u30e7\u30f3\u3068\u3057\u3066\u4f7f\u3048\u308b\u578b\u306f\u5b9f\u306b\u69d8\u3005\u3067\u3001 `Vec` \u3084 `String` \u306f\u52ff\u8ad6\u3001 `Result` \u306a\u3093\u304b\u3082\u3044\u3051\u308b\u3002\n\u7279\u306b `collect::<Result<Vec<_>, _>` \u306e\u4f7f\u3044\u65b9\u306a\u3069\u306a\u304b\u306a\u304b\u9762\u767d\u3044\u306e\u3067\u3001\u662f\u975e[\u516c\u5f0f\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8](https://doc.rust-lang.org/std/iter/trait.Iterator.html#method.collect)\u306e\u4f8b\u306a\u3069\u3092\u78ba\u8a8d\u3057\u3066\u307b\u3057\u3044\u3002\n\n## [`partition()`](https://doc.rust-lang.org/std/iter/trait.Iterator.html#method.partition): `Iterator<T> -> (&T -> bool) -> (T\u306e\u30b3\u30ec\u30af\u30b7\u30e7\u30f3, T\u306e\u30b3\u30ec\u30af\u30b7\u30e7\u30f3)`\n\u4e0e\u3048\u3089\u308c\u305f\u8ff0\u8a9e(`&T -> bool`)\u304c `true` \u3092\u8fd4\u3059\u8981\u7d20\u3068 `false` \u3092\u8fd4\u3059\u8981\u7d20\u3092\u5206\u985e\u3057\u3001\u305d\u308c\u3089\u3092\u5225\u3005\u306e\u30b3\u30ec\u30af\u30b7\u30e7\u30f3\u306b\u683c\u7d0d\u3057\u3066\u30bf\u30d7\u30eb\u3067\u8fd4\u3059\u95a2\u6570\u3067\u3042\u308b\u3002\n(\u5ff5\u306e\u305f\u3081\u66f8\u3044\u3066\u304a\u304f\u304c\u3001\u30bf\u30d7\u30eb\u306e\u6700\u521d\u306e\u30b3\u30ec\u30af\u30b7\u30e7\u30f3\u304c `true` \u3060\u3063\u305f\u8981\u7d20\u3001\u6b21\u306e(\u6700\u5f8c\u306e)\u30b3\u30ec\u30af\u30b7\u30e7\u30f3\u304c `false` \u3060\u3063\u305f\u8981\u7d20\u3067\u3042\u308b\u3002)\n\n## [`fold()`](https://doc.rust-lang.org/std/iter/trait.Iterator.html#method.fold): `Iterator<T> -> (B -> T -> B) -> B`\n\u307f\u3093\u306a\u5927\u597d\u304dfold\u3002\n\u3053\u3053\u3067\u8aac\u660e\u3059\u308b\u307e\u3067\u3082\u306a\u3044\u3002\n\n## [`unzip()`](https://doc.rust-lang.org/std/iter/trait.Iterator.html#method.unzip): `Iterator<(T, U)> -> (T\u306e\u30b3\u30ec\u30af\u30b7\u30e7\u30f3, U\u306e\u30b3\u30ec\u30af\u30b7\u30e7\u30f3)`\n\u30da\u30a2\u3092\u5217\u6319\u3059\u308b\u30a4\u30c6\u30ec\u30fc\u30bf\u3092\u3001\u30da\u30a2\u306e\u4e2d\u306e\u4e00\u65b9\u306e\u8981\u7d20\u3060\u3051\u3092\u96c6\u3081\u305f2\u3064\u306e\u30b3\u30ec\u30af\u30b7\u30e7\u30f3\u306b\u5206\u89e3\u3059\u308b\u95a2\u6570\u3002\n\u8981\u3059\u308b\u306b\u3001 `zip()` \u306e\u9006\u307f\u305f\u3044\u306a\u3053\u3068\u3092\u3059\u308b\u3002\n\n[\u516c\u5f0f\u306e\u4f8b](https://doc.rust-lang.org/std/iter/trait.Iterator.html#examples-36)\u3092\u898b\u308c\u3070\u3059\u3050\u306b\u7406\u89e3\u3067\u304d\u308b\u3060\u308d\u3046\u3002\n\n## [`sum()`](https://doc.rust-lang.org/std/iter/trait.Iterator.html#method.sum): `Iterator<T> -> T\u306e\u548c\u306e\u578b`\n\u30a4\u30c6\u30ec\u30fc\u30bf\u306e\u5168\u3066\u306e(\u6b63\u78ba\u306b\u306f\u6700\u521d\u306b`None`\u304c\u8fd4\u308b\u307e\u3067\u306e)\u8981\u7d20\u306e\u548c\u3092\u8fd4\u3059\u3002\n\u3053\u308c\u306f[`fold()`](https://doc.rust-lang.org/std/iter/trait.Iterator.html#method.fold)\u3067\u5b9f\u73fe\u53ef\u80fd\u306b\u898b\u3048\u308b\u3057\u5b9f\u969b\u305d\u306e\u901a\u308a\u3060\u304c\u3001\u3053\u3061\u3089\u306e\u65b9\u304c\u82e5\u5e72\u697d\u304c\u3067\u304d\u305f\u308a\u3059\u308b\u3002\n\n[\u30ea\u30d5\u30a1\u30ec\u30f3\u30b9](https://doc.rust-lang.org/std/iter/trait.Iterator.html#method.sum)\u306b\u306f`fn sum<S>(self) -> S where S: Sum<Self::Item>`\u3068\u3042\u308b\u304c\u3001\u3053\u3053\u3067`S`\u3068\u306f\u300c\u5bfe\u8c61\u306e\u30a4\u30c6\u30ec\u30fc\u30bf\u306e\u8981\u7d20\u306e\u578b\u3092\u96c6\u3081\u3066\u4f5c\u308b\u3053\u3068\u306e\u3067\u304d\u308b\u3001**\u76ee\u7684\u306e\u5024\u306e\u578b**\u300d\u3067\u3042\u308b(\u305f\u3068\u3048\u3070`Iterator<i32>`\u306b\u5bfe\u3057\u3066`i32`\u3001\u306a\u3069\u3067\u3042\u308b)\u3002\n[`fold()`](https://doc.rust-lang.org/std/iter/trait.Iterator.html#method.fold)\u306f\u4e8c\u9805\u6f14\u7b97(`F: FnMut(B, Self::Item) -> B`)\u3092\u7e70\u308a\u8fd4\u3057\u3066\u6700\u7d42\u7684\u306a\u7d50\u679c\u3092\u6c42\u3081\u308b\u304c\u3001\u3053\u306e`sum()`\u3067\u306f\u30a4\u30c6\u30ec\u30fc\u30bf\u306b\u3088\u3063\u3066\u8981\u7d20\u3092\u4e00\u6c17\u306b\u53d7\u3051\u53d6\u3063\u3066\u7d50\u679c\u3092\u8fd4\u3059\u3002\u3064\u307e\u308a\u3001\u305f\u3068\u3048\u3070\u5185\u90e8\u7684\u306b\u306f\u4e8c\u9805\u6f14\u7b97\u3067\u306a\u304f\u8907\u6570\u8981\u7d20\u3092\u4e00\u6c17\u306b\u51e6\u7406\u3057\u305f\u308a\u3001\u3068\u3044\u3063\u305f\u5b9f\u88c5\u3082\u53ef\u80fd\u306a\u306e\u3067\u3042\u308b\u3002\n\n\u307e\u305f\u3001[`sum()`](https://doc.rust-lang.org/std/iter/trait.Iterator.html#method.collect)\u3068[`collect()`](https://doc.rust-lang.org/std/iter/trait.Iterator.html#method.collect)\u306f\u3001\u7528\u9014\u304c\u9055\u3046\u3060\u3051\u3067\u6839\u672c\u7684\u306b\u306f\u540c\u3058\u3082\u306e\u3067\u3042\u308b\u3002\n\u578b\u3092\u898b\u3066\u307f\u3088\u3046\u3002\n\n```rust\nfn sum<S>(self) -> S where S: Sum<Self::Item>;\nfn collect<B>(self) -> B where B: FromIterator<Self::Item>;\n```\n\n\u540d\u524d\u3068\u623b\u308a\u5024\u306etrait\u3057\u304b\u9055\u308f\u306a\u3044\u3053\u3068\u304c\u308f\u304b\u308b\u3002\n`collect()`\u3067\u4f7f\u308f\u308c\u308b[`::std::iter::FromIterator`](https://doc.rust-lang.org/std/iter/trait.FromIterator.html)\u306f\u3001\u30a4\u30c6\u30ec\u30fc\u30bf\u304b\u3089\u4f5c\u308c\u308b\u30aa\u30d6\u30b8\u30a7\u30af\u30c8(\u5178\u578b\u7684\u306b\u306f`Vec`\u3084`HashMap`\u7b49\u306e\u30b3\u30f3\u30c6\u30ca)\u306b\u5bfe\u3057\u3066\u5b9a\u7fa9\u3059\u308b\u3082\u306e\u3067\u3042\u308b\u304c\u3001[`::std::iter::Sum`](https://doc.rust-lang.org/std/iter/trait.Sum.html)\u306f\u305d\u306e\u4e2d\u3067\u3082\u7279\u306b\u3001\u30a4\u30c6\u30ec\u30fc\u30bf\u304b\u3089\u8a08\u7b97\u3067\u304d\u308b**\u548c**\u306b\u5bfe\u3057\u3066\u5b9a\u7fa9\u3059\u308b\u3082\u306e\u3067\u3042\u308b\u3002\n\u3053\u306e\u3088\u3046\u306b\u7528\u9014\u3067\u5206\u3051\u308b\u3053\u3068\u306b\u3088\u3063\u3066\u3001\u305f\u3068\u3048\u3070`Iterator<i32>`\u304b\u3089`Vec<i32>`\u3092\u4f5c\u308a\u305f\u3044\u5834\u5408\u3068`i32`\u306e\u548c\u3092\u6c42\u3081\u305f\u3044\u5834\u5408\u3067\u540c\u3058\u66f8\u304d\u65b9\u3067\u5225\u306e\u52d5\u4f5c\u3092\u3055\u305b\u308b\u3053\u3068\u304c\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u308b\u306e\u3067\u3042\u308b\u3002\n\n## [`product()`](https://doc.rust-lang.org/std/iter/trait.Iterator.html#method.product): `Iterator<T> -> T\u306e\u7a4d\u306e\u578b`\n[`sum()`](https://doc.rust-lang.org/std/iter/trait.Iterator.html#method.sum)\u306e\u7a4d\u30d0\u30fc\u30b8\u30e7\u30f3\u3002\u8a73\u7d30\u306f(trait\u3068\u610f\u5473\u3092\u9664\u3044\u3066)`sum()`\u3068\u540c\u3058\u3002\n\n\n# \u8f9e\u66f8\u9806\u6bd4\u8f03\u7cfb\n\u3075\u305f\u3064\u306e\u30a4\u30c6\u30ec\u30fc\u30bf\u3092\u8f9e\u66f8\u9806\u6bd4\u8f03\u3059\u308b\u3002\n\n## [`cmp()`](https://doc.rust-lang.org/std/iter/trait.Iterator.html#method.cmp): `Iterator<T> -> IntoIterator<T> -> Ordering`\n\u8f9e\u66f8\u9806\u6bd4\u8f03\u3057\u3001\u305d\u306e\u7d50\u679c(`::std::cmp::Ordering::Less` \u3068\u304b)\u3092\u8fd4\u3059\u3002\n\n\u4f8b\u306e\u3054\u3068\u304f `IntoIterator<T>` \u3092\u53d7\u3051\u53d6\u308b\u306e\u3067\u3001\u30a4\u30c6\u30ec\u30fc\u30bf\u3092\u660e\u793a\u7684\u306b\u4f5c\u3063\u3066\u6e21\u3055\u305a\u3068\u3082\u6bd4\u8f03\u306b\u4f7f\u3046\u3053\u3068\u304c\u3067\u304d\u308b\u3002\n\n## [`partial_cmp()`](https://doc.rust-lang.org/std/iter/trait.Iterator.html#method.partial_cmp): `Iterator<T> -> IntoIterator<T> -> Option<Ordering>`\n\u8f9e\u66f8\u9806\u6bd4\u8f03\u3057\u3001\u305d\u306e\u7d50\u679c(`::std::cmp::Ordering::Less` \u3068\u304b)\u3092 `Some` \u3067\u8fd4\u3059\u3002\n`None` \u304c\u8fd4\u308b\u306e\u306f\u3001\u6bd4\u8f03\u3067\u304d\u306a\u3044\u5024\u3092\u6bd4\u8f03\u3057\u305f\u5834\u5408\u3067\u3042\u308b\u3002\n\n### \u53c2\u8003\n\u8a73\u7d30\u306f[`PartialOrd`](https://doc.rust-lang.org/std/cmp/trait.PartialOrd.html)\u3067\u3082\u8aad\u3093\u3060\u65b9\u304c\u826f\u3044\u306e\u3060\u304c\u3001\u7c21\u5358\u306b\u8aac\u660e\u3057\u3066\u304a\u3053\u3046\u3002\n\n`PartialOrd` \u3068\u3044\u3046\u300c[\u534a\u9806\u5e8f](https://ja.wikipedia.org/wiki/%E9%A0%86%E5%BA%8F%E9%9B%86%E5%90%88#.E5.8D.8A.E9.A0.86.E5.BA.8F)\u300d\u304c\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u308b\u3053\u3068\u3092\u8868\u73fe\u3059\u308btrait\u304c\u3042\u3063\u3066\u3001\u3053\u3044\u3064\u3092\u4f7f\u3063\u305f\u6bd4\u8f03([`PartialOrd::partial_cmp()`](https://doc.rust-lang.org/std/cmp/trait.PartialOrd.html#tymethod.partial_cmp))\u306f `Option<Ordering>` \u3092\u8fd4\u3059\u3002\n\u5177\u4f53\u7684\u306a\u4f8b\u3068\u3057\u3066\u6709\u540d\u306a\u306e\u304c `f64` \u7b49\u3067\u3001 `!(NaN >= 0)` \u304b\u3064 `!(Nan < 0)` \u3067\u3042\u308b\u304b\u3089\u3001\u5168\u9806\u5e8f(\u3044\u308f\u3086\u308b\u666e\u901a\u306e\u5927\u5c0f\u95a2\u4fc2)\u306b\u306f\u3067\u304d\u306a\u3044\u308f\u3051\u3067\u3042\u308b\u3002\u305d\u3046\u3044\u3046\u5834\u5408\u306b\u306f\u3001\u6bd4\u8f03\u306e\u7d50\u679c\u3068\u3057\u3066 `None` \u304c\u8fd4\u308b\u3002\n\n`PartialOrd` \u306b\u4f3c\u305f\u3082\u306e\u3068\u3057\u3066[`PartialEq`](https://doc.rust-lang.org/std/cmp/trait.PartialEq.html)\u304c\u3042\u308b\u306e\u3067\u3001\u4f75\u305b\u3066\u898b\u308b\u306e\u304c\u826f\u3044\u3060\u308d\u3046\u3002\n\u3053\u3061\u3089\u306f\u3082\u3046\u5c11\u3057\u308f\u304b\u308a\u3084\u3059\u3044\u3002\u8981\u3059\u308b\u306b\u300c\u540c\u5024\u95a2\u4fc2\u306e\u3001\u53cd\u5c04\u5f8b\u306e\u6210\u308a\u7acb\u305f\u306a\u3044\u7248\u300d\u3060\u304b\u3089\u3060\u3002\n\u53cd\u5c04\u5f8b\u306e\u7834\u308c\u308b\u4f8b\u306f\u3001 `NaN != NaN` \u307f\u305f\u3044\u306a\u3084\u3064\u3067\u3042\u308b\u3002\n\n## [`eq()`](https://doc.rust-lang.org/std/iter/trait.Iterator.html#method.eq), [`ne()`](https://doc.rust-lang.org/std/iter/trait.Iterator.html#method.ne), [`lt()`](https://doc.rust-lang.org/std/iter/trait.Iterator.html#method.lt), [`le()`](https://doc.rust-lang.org/std/iter/trait.Iterator.html#method.le), [`gt()`](https://doc.rust-lang.org/std/iter/trait.Iterator.html#method.gt), [`ge()`](https://doc.rust-lang.org/std/iter/trait.Iterator.html#method.ge): `Iterator<T> -> IntoIterator<T> -> bool`\n\u540d\u524d\u306e\u901a\u308a\u3002\n\u8f9e\u66f8\u9806\u6bd4\u8f03\u3057\u3001\u95a2\u6570\u540d\u306e\u793a\u3059\u95a2\u4fc2\u304c\u6210\u308a\u7acb\u3064\u306a\u3089 `true` \u3092\u3001\u305d\u308c\u4ee5\u5916\u306a\u3089 `false` \u3092\u8fd4\u3059\u3002\n\n\n* * *\n\n# \u307e\u3068\u3081\n- \u30eb\u30fc\u30d7\u306e\u30cd\u30b9\u30c8\u304c\u6df1\u3044\u3068\u304d\u306f\u3001\u4e2d\u8eab\u306e\u4f55\u304b\u3092\u5265\u304c\u3059\u7cfb\u306e\u30e1\u30bd\u30c3\u30c9\u3092\u63a2\u305d\u3046\n- \u300c\u5265\u304c\u3057\u3066\u307e\u305f\u5305\u3080\u300d\u3088\u3046\u306a\u5197\u9577\u306b\u898b\u3048\u308b\u51e6\u7406\u304c\u3042\u308b\u3068\u304d\u306f\u3001\u5265\u304c\u3057\u305f\u4e2d\u8eab\u306b\u4f5c\u7528\u3059\u308b\u30e1\u30bd\u30c3\u30c9\u3092\u63a2\u305d\u3046\n- \u30a4\u30c6\u30ec\u30fc\u30bf\u306e\u4ee3\u308f\u308a\u306b\u3001\u300c\u30a4\u30c6\u30ec\u30fc\u30bf\u306b\u3067\u304d\u308b\u3082\u306e(`IntoIterator`)\u300d\u3092\u6e21\u305b\u308b\u30e1\u30bd\u30c3\u30c9\u3082\u3042\u308b\u306e\u3067\u3001\u3046\u307e\u304f\u4f7f\u304a\u3046\n- `Option` \u3084 `Result` \u7b49\u3082\u30a4\u30c6\u30ec\u30fc\u30bf\u306b\u3067\u304d\u308b\u3053\u3068\u3092\u61b6\u3048\u3066\u304a\u3053\u3046\n- \u95a2\u6570\u3092\u53d7\u3051\u53d6\u308b\u30e1\u30bd\u30c3\u30c9\u306f\u3001\u6e21\u3055\u308c\u308b\u95a2\u6570\u304c `Self::Item` \u3092\u53d7\u3051\u53d6\u308b\u304b `&Self::item` \u3092\u53d7\u3051\u53d6\u308b\u304b\u3067\u6319\u52d5\u304c\u63a8\u6e2c\u3067\u304d\u308b\u30be\n  * `Self::Item` \u306f\u5909\u63db\u7cfb\u304b\u3001\u30a4\u30c6\u30ec\u30fc\u30bf\u3092\u8fd4\u3055\u306a\u3044\u30e1\u30bd\u30c3\u30c9\n  * `&Self::Item` \u306f\u30d5\u30a3\u30eb\u30bf\u7cfb\u3067\u3001\u304b\u3064\u30a4\u30c6\u30ec\u30fc\u30bf\u3092\u8fd4\u3059\u30e1\u30bd\u30c3\u30c9\n- \u305d\u308c\u306f\u3055\u3066\u304a\u304d\u3001[\u516c\u5f0f\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8](https://doc.rust-lang.org/std/iter/trait.Iterator.html)\u3092\u8aad\u3082\u3046\uff01\n\n# See also\n- [Rust Iterator Cheat Sheet](https://danielkeep.github.io/itercheat_baked.html)\n  * \u591a\u5c11\u53e4\u3044\u304b\u3082\u3002[GitHub](https://github.com/DanielKeep/DanielKeep.github.io/blob/master/itercheat_baked.html)\u3067\u7ba1\u7406\u3055\u308c\u3066\u3044\u308b\u306e\u3067\u3001\u305d\u3053\u3092\u898b\u308c\u3070\u3044\u3064\u6642\u70b9\u306e\u60c5\u5831\u304b\u308f\u304b\u308b\u3002\n", "tags": ["rust"]}