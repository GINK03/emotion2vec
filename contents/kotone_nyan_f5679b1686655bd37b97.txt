{"context": " More than 1 year has passed since last update.\u5099\u5fd8\u9332\u7684\u306b\u30e1\u30e2\u3057\u307e\u3059\u3002\n#include <iostream>\n#include <memory>\n\nclass Base {\npublic:\n  Base() : pimpl(new impl()) {}\n  void dump() {std::cout<<\"B: \"<<pimpl<<std::endl;}\nprivate:\n  struct impl {}; std::shared_ptr<impl> pimpl;\n};\n\nclass Derived : public Base {\npublic:\n  Derived() : pimpl(new impl()) {}\n  void dump() {Base::dump();std::cout<<\"D: \"<<pimpl<<std::endl;}\nprivate:\n  struct impl {}; std::shared_ptr<impl> pimpl;\n};\n\nint main() {\n  Base b1;\n  Base b2 = b1;\n\n  b1.dump();\n  b2.dump();\n\n  Derived d1;\n  Derived d2 = d1;\n\n  d1.dump();\n  d2.dump();\n\n  return 0;\n}\n\n\u3053\u308c\u3092\u5b9f\u884c\u3059\u308b\u3068\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3059 (\u4f8b)\nB: 0x7fd082404ce0\nB: 0x7fd082404ce0\nB: 0x7fd082404d10\nD: 0x7fd082404d40\nB: 0x7fd082404d10\nD: 0x7fd082404d40\n\n\u6d3e\u751f\u30af\u30e9\u30b9\u306epimpl\u304cBase\u3082Derived\u3082\u540c\u3058\u53c2\u7167\u5148\u3092\u6301\u3063\u3066\u3044\u307e\u3059\u306d\u3002\n\u3053\u306e\u30b3\u30fc\u30c9\u306bRule of five\u3092\u9069\u7528\u3059\u308b\u3068\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002\n#include <iostream>\n#include <memory>\n\nclass Base {\npublic:\n  Base() : pimpl(new impl()) {}\n  Base(const Base& other) : pimpl(other.pimpl) {}\n  Base(Base&& other) noexcept : pimpl(other.pimpl) {\n    other.pimpl.reset();\n  }\n  Base& operator=(const Base& other) {\n    Base tmp(other);\n    *this = std::move(tmp);\n    return *this;\n  }\n  Base& operator=(Base&& other) {\n    swap(*this, other);\n    return *this;\n  }\n  friend void swap(Base& a, Base& b) {\n    std::swap(a.pimpl, b.pimpl);\n  }\n  void dump() {std::cout<<\"B: \"<<pimpl<<std::endl;}\nprivate:\n  struct impl {}; std::shared_ptr<impl> pimpl;\n};\n\nclass Derived : public Base {\npublic:\n  Derived() : pimpl(new impl()) {}\n  Derived(const Derived& other) : pimpl(other.pimpl) {}\n  Derived(Derived&& other) noexcept : pimpl(other.pimpl) {\n    other.pimpl.reset();\n  }\n  Derived& operator=(const Derived& other) {\n    Derived tmp(other);\n    *this = std::move(tmp);\n    return *this;\n  }\n  Derived& operator=(Derived&& other) {\n    swap(*this, other);\n    return *this;\n  }\n  friend void swap(Derived& a, Derived& b) {\n    std::swap(a.pimpl, b.pimpl);\n  }\n  void dump() {Base::dump();std::cout<<\"D: \"<<pimpl<<std::endl;}\nprivate:\n  struct impl {}; std::shared_ptr<impl> pimpl;\n};\n\nint main() {\n  Base b1;\n  Base b2 = b1;\n\n  b1.dump();\n  b2.dump();\n\n  Derived d1;\n  Derived d2 = d1;\n\n  d1.dump();\n  d2.dump();\n\n  return 0;\n}\n\n\u3053\u308c\u3092\u5b9f\u884c\u3059\u308b\u3068\u3082\u3061\u308d\u3093\u6700\u521d\u306e\u30b3\u30fc\u30c9\u306e\u3088\u3046\u306b\u306a\u3063\u3066\u6b32\u3057\u3044\u308f\u3051\u3067\u3059\u304c...\nB: 0x7f9e49600000\nB: 0x7f9e49600000\nB: 0x7f9e49600030\nD: 0x7f9e49600060\nB: 0x7f9e49600090\nD: 0x7f9e49600060\n\nBase\u306eshared_ptr\u306e\u53c2\u7167\u5148\u304c\u9055\u3044\u307e\u3059\u3002\n\u8003\u3048\u3066\u307f\u308c\u3070\u5f53\u7136\u3067\u3059\u304c\u30b9\u30fc\u30d1\u30fc\u30af\u30e9\u30b9\u306e\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u3092\u660e\u793a\u7684\u306b\u547c\u3070\u306a\u3044\u5834\u5408\u306f\u6697\u9ed9\u7684\u306b\u7121\u5f15\u6570\u306e\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u304c\u547c\u3070\u308c\u308b\u306e\u3067Base(): pimpl(new impl) {}\u304c\u547c\u3070\u308c\u3066\u3057\u307e\u3046\u305f\u3081\u30d9\u30fc\u30b9\u30af\u30e9\u30b9\u306eshared_ptr\u306f\u65b0\u3057\u3044\u53c2\u7167\u5148\u3092\u6301\u3061\u307e\u3059\u3002\n\u89e3\u6c7a\u65b9\u6cd5\u306f\u81ea\u660e\u3067\u3059\u306d\u3001\u30b9\u30fc\u30d1\u30fc\u30af\u30e9\u30b9\u306e\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u3092\u660e\u793a\u7684\u306b\u547c\u3073\u307e\u3057\u3087\u3046\u3002\n(\u8ffd\u8a18: swap\u3082Base\u306eswap\u3092\u547c\u3070\u306a\u3044\u3068\u30c0\u30e1\u3067\u3059\u306d\u3001\u8ffd\u52a0\u3057\u307e\u3057\u305f\u3002)\n#include <iostream>\n#include <memory>\n\nclass Base {\npublic:\n  Base() : pimpl(new impl()) {}\n  Base(const Base& other) : pimpl(other.pimpl) {}\n  Base(Base&& other) noexcept : pimpl(other.pimpl) {\n    other.pimpl.reset();\n  }\n  Base& operator=(const Base& other) {\n    Base tmp(other);\n    *this = std::move(tmp);\n    return *this;\n  }\n  Base& operator=(Base&& other) {\n    swap(*this, other);\n    return *this;\n  }\n  friend void swap(Base& a, Base& b) {\n    std::swap(a.pimpl, b.pimpl);\n  }\n  void dump() {std::cout<<\"B: \"<<pimpl<<std::endl;}\nprivate:\n  struct impl {}; std::shared_ptr<impl> pimpl;\n};\n\nclass Derived : public Base {\npublic:\n  Derived() : pimpl(new impl()) {}\n  Derived(const Derived& other) : Base(other), pimpl(other.pimpl) {}\n  Derived(Derived&& other) noexcept : Base(other), pimpl(other.pimpl) {\n    other.pimpl.reset();\n  }\n  Derived& operator=(const Derived& other) {\n    Derived tmp(other);\n    *this = std::move(tmp);\n    return *this;\n  }\n  Derived& operator=(Derived&& other) {\n    swap(dynamic_cast<Base&>(*this), dynamic_cast<Base&>(other));\n    swap(*this, other);\n    return *this;\n  }\n  friend void swap(Derived& a, Derived& b) {\n    std::swap(a.pimpl, b.pimpl);\n  }\n  void dump() {Base::dump();std::cout<<\"D: \"<<pimpl<<std::endl;}\nprivate:\n  struct impl {}; std::shared_ptr<impl> pimpl;\n};\n\nint main() {\n  Base b1;\n  Base b2 = b1;\n\n  b1.dump();\n  b2.dump();\n\n  Derived d1;\n  Derived d2 = d1;\n\n  d1.dump();\n  d2.dump();\n\n  return 0;\n}\n\n\u51fa\u529b\u7d50\u679c\nB: 0x7ff8c9c04ce0\nB: 0x7ff8c9c04ce0\nB: 0x7ff8c9c04d10\nD: 0x7ff8c9c04d40\nB: 0x7ff8c9c04d10\nD: 0x7ff8c9c04d40\n\n\u3053\u308c\u306e\u305f\u3081\u306b5\u6642\u9593\u30cf\u30de\u3063\u305f...\n\u5099\u5fd8\u9332\u7684\u306b\u30e1\u30e2\u3057\u307e\u3059\u3002\n\n```cpp\n#include <iostream>\n#include <memory>\n\nclass Base {\npublic:\n  Base() : pimpl(new impl()) {}\n  void dump() {std::cout<<\"B: \"<<pimpl<<std::endl;}\nprivate:\n  struct impl {}; std::shared_ptr<impl> pimpl;\n};\n\nclass Derived : public Base {\npublic:\n  Derived() : pimpl(new impl()) {}\n  void dump() {Base::dump();std::cout<<\"D: \"<<pimpl<<std::endl;}\nprivate:\n  struct impl {}; std::shared_ptr<impl> pimpl;\n};\n\nint main() {\n  Base b1;\n  Base b2 = b1;\n\n  b1.dump();\n  b2.dump();\n\n  Derived d1;\n  Derived d2 = d1;\n\n  d1.dump();\n  d2.dump();\n\n  return 0;\n}\n```\n\n\u3053\u308c\u3092\u5b9f\u884c\u3059\u308b\u3068\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3059 (\u4f8b)\n\n```\nB: 0x7fd082404ce0\nB: 0x7fd082404ce0\nB: 0x7fd082404d10\nD: 0x7fd082404d40\nB: 0x7fd082404d10\nD: 0x7fd082404d40\n```\n\n\u6d3e\u751f\u30af\u30e9\u30b9\u306epimpl\u304cBase\u3082Derived\u3082\u540c\u3058\u53c2\u7167\u5148\u3092\u6301\u3063\u3066\u3044\u307e\u3059\u306d\u3002\n\n\u3053\u306e\u30b3\u30fc\u30c9\u306bRule of five\u3092\u9069\u7528\u3059\u308b\u3068\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002\n\n```cpp\n#include <iostream>\n#include <memory>\n\nclass Base {\npublic:\n  Base() : pimpl(new impl()) {}\n  Base(const Base& other) : pimpl(other.pimpl) {}\n  Base(Base&& other) noexcept : pimpl(other.pimpl) {\n    other.pimpl.reset();\n  }\n  Base& operator=(const Base& other) {\n    Base tmp(other);\n    *this = std::move(tmp);\n    return *this;\n  }\n  Base& operator=(Base&& other) {\n    swap(*this, other);\n    return *this;\n  }\n  friend void swap(Base& a, Base& b) {\n    std::swap(a.pimpl, b.pimpl);\n  }\n  void dump() {std::cout<<\"B: \"<<pimpl<<std::endl;}\nprivate:\n  struct impl {}; std::shared_ptr<impl> pimpl;\n};\n\nclass Derived : public Base {\npublic:\n  Derived() : pimpl(new impl()) {}\n  Derived(const Derived& other) : pimpl(other.pimpl) {}\n  Derived(Derived&& other) noexcept : pimpl(other.pimpl) {\n    other.pimpl.reset();\n  }\n  Derived& operator=(const Derived& other) {\n    Derived tmp(other);\n    *this = std::move(tmp);\n    return *this;\n  }\n  Derived& operator=(Derived&& other) {\n    swap(*this, other);\n    return *this;\n  }\n  friend void swap(Derived& a, Derived& b) {\n    std::swap(a.pimpl, b.pimpl);\n  }\n  void dump() {Base::dump();std::cout<<\"D: \"<<pimpl<<std::endl;}\nprivate:\n  struct impl {}; std::shared_ptr<impl> pimpl;\n};\n\nint main() {\n  Base b1;\n  Base b2 = b1;\n\n  b1.dump();\n  b2.dump();\n\n  Derived d1;\n  Derived d2 = d1;\n\n  d1.dump();\n  d2.dump();\n\n  return 0;\n}\n```\n\n\u3053\u308c\u3092\u5b9f\u884c\u3059\u308b\u3068\u3082\u3061\u308d\u3093\u6700\u521d\u306e\u30b3\u30fc\u30c9\u306e\u3088\u3046\u306b\u306a\u3063\u3066\u6b32\u3057\u3044\u308f\u3051\u3067\u3059\u304c...\n\n```\nB: 0x7f9e49600000\nB: 0x7f9e49600000\nB: 0x7f9e49600030\nD: 0x7f9e49600060\nB: 0x7f9e49600090\nD: 0x7f9e49600060\n```\n\nBase\u306eshared_ptr\u306e\u53c2\u7167\u5148\u304c\u9055\u3044\u307e\u3059\u3002\n\n\u8003\u3048\u3066\u307f\u308c\u3070\u5f53\u7136\u3067\u3059\u304c\u30b9\u30fc\u30d1\u30fc\u30af\u30e9\u30b9\u306e\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u3092\u660e\u793a\u7684\u306b\u547c\u3070\u306a\u3044\u5834\u5408\u306f\u6697\u9ed9\u7684\u306b\u7121\u5f15\u6570\u306e\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u304c\u547c\u3070\u308c\u308b\u306e\u3067`Base(): pimpl(new impl) {}`\u304c\u547c\u3070\u308c\u3066\u3057\u307e\u3046\u305f\u3081\u30d9\u30fc\u30b9\u30af\u30e9\u30b9\u306eshared_ptr\u306f\u65b0\u3057\u3044\u53c2\u7167\u5148\u3092\u6301\u3061\u307e\u3059\u3002\n\n\u89e3\u6c7a\u65b9\u6cd5\u306f\u81ea\u660e\u3067\u3059\u306d\u3001\u30b9\u30fc\u30d1\u30fc\u30af\u30e9\u30b9\u306e\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u3092\u660e\u793a\u7684\u306b\u547c\u3073\u307e\u3057\u3087\u3046\u3002\n\n(\u8ffd\u8a18: swap\u3082Base\u306eswap\u3092\u547c\u3070\u306a\u3044\u3068\u30c0\u30e1\u3067\u3059\u306d\u3001\u8ffd\u52a0\u3057\u307e\u3057\u305f\u3002)\n\n```cpp\n#include <iostream>\n#include <memory>\n\nclass Base {\npublic:\n  Base() : pimpl(new impl()) {}\n  Base(const Base& other) : pimpl(other.pimpl) {}\n  Base(Base&& other) noexcept : pimpl(other.pimpl) {\n    other.pimpl.reset();\n  }\n  Base& operator=(const Base& other) {\n    Base tmp(other);\n    *this = std::move(tmp);\n    return *this;\n  }\n  Base& operator=(Base&& other) {\n    swap(*this, other);\n    return *this;\n  }\n  friend void swap(Base& a, Base& b) {\n    std::swap(a.pimpl, b.pimpl);\n  }\n  void dump() {std::cout<<\"B: \"<<pimpl<<std::endl;}\nprivate:\n  struct impl {}; std::shared_ptr<impl> pimpl;\n};\n\nclass Derived : public Base {\npublic:\n  Derived() : pimpl(new impl()) {}\n  Derived(const Derived& other) : Base(other), pimpl(other.pimpl) {}\n  Derived(Derived&& other) noexcept : Base(other), pimpl(other.pimpl) {\n    other.pimpl.reset();\n  }\n  Derived& operator=(const Derived& other) {\n    Derived tmp(other);\n    *this = std::move(tmp);\n    return *this;\n  }\n  Derived& operator=(Derived&& other) {\n    swap(dynamic_cast<Base&>(*this), dynamic_cast<Base&>(other));\n    swap(*this, other);\n    return *this;\n  }\n  friend void swap(Derived& a, Derived& b) {\n    std::swap(a.pimpl, b.pimpl);\n  }\n  void dump() {Base::dump();std::cout<<\"D: \"<<pimpl<<std::endl;}\nprivate:\n  struct impl {}; std::shared_ptr<impl> pimpl;\n};\n\nint main() {\n  Base b1;\n  Base b2 = b1;\n\n  b1.dump();\n  b2.dump();\n\n  Derived d1;\n  Derived d2 = d1;\n\n  d1.dump();\n  d2.dump();\n\n  return 0;\n}\n```\n\n\u51fa\u529b\u7d50\u679c\n\n```\nB: 0x7ff8c9c04ce0\nB: 0x7ff8c9c04ce0\nB: 0x7ff8c9c04d10\nD: 0x7ff8c9c04d40\nB: 0x7ff8c9c04d10\nD: 0x7ff8c9c04d40\n```\n\n\u3053\u308c\u306e\u305f\u3081\u306b5\u6642\u9593\u30cf\u30de\u3063\u305f...\n", "tags": ["C++11"]}