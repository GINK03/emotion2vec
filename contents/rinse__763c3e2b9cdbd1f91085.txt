{"context": "std::unique_ptr\u3001\u3061\u3083\u3093\u3068\u4f7f\u3063\u3066\u3044\u307e\u3059\u304b\uff1f\u3000\u305f\u3060\u5fc5\u8981\u306b\u5fdc\u3058\u3066delete\u3059\u308b\u3060\u3051\u3067\u306a\u304f\u3001\u30c7\u30ea\u30fc\u30bf\u3092\u81ea\u4f5c\u3059\u308b\u3053\u3068\u3067scoped guard\u3092\u5b9f\u73fe\u3059\u308b\u3053\u3068\u3082\u3067\u304d\u308b\u7d20\u6674\u3089\u3057\u3044\u30af\u30e9\u30b9\u3067\u3059\u304c\u3001scoped guard\u306e\u601d\u60f3\u3092\u4f53\u73fe\u3059\u308b\u306b\u306f\u60dc\u3057\u3044\u90e8\u5206\u304c\u3042\u308a\u307e\u3059\u3002\n\u305d\u308c\u306f\u7ba1\u7406\u3059\u308b\u578bpointer\u306b\u5bfe\u3057\u3066\u5fc5\u8981\u4ee5\u4e0a\u306e\u8981\u6c42\u3092\u8ab2\u3059\u3053\u3068\u3001\u3059\u306a\u308f\u3061nullable pointer\u3092\u8981\u6c42\u3059\u308b\u3053\u3068\u3067\u3059\u3002\n\u3053\u308c\u306e\u305b\u3044\u3067\u3001\u4f55\u304b\u30ea\u30bd\u30fc\u30b9\u3084\u30cf\u30f3\u30c9\u30eb\u306a\u3069\u30dd\u30a4\u30f3\u30bf\u3067\u5b9a\u7fa9\u3055\u308c\u306a\u3044\u3082\u306e\u3092std::unique_ptr\u3067\u7ba1\u7406\u3059\u308b\u3053\u3068\u306f\u3067\u304d\u307e\u305b\u3093\u3002\u305b\u3063\u304b\u304f\u30ab\u30b9\u30bf\u30de\u30a4\u30ba\u3067\u304d\u308b\u306e\u306b\u3002\nnullable pointer\u306f\u4ee5\u4e0b\u3092\u6e80\u305f\u3059\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\n\u30fbEqualityComparable\n\u30fbDefaultConstructible\n\u30fbCopyConstructible\n\u30fbCopyAssignable\n\u30fbDestructible\n\u52a0\u3048\u3066\u3001bool\u578b\u306b\u5909\u63db\u53ef\u80fd\u3067\u3001\u5168\u3066\u306e\u52d5\u4f5c\u304c\u4f8b\u5916\u3092\u6295\u3052\u308b\u53ef\u80fd\u6027\u304c\u306a\u3044\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\u307e\u305f\u3001std::nullptr_t\u578b\u3067\u306e\u521d\u671f\u5316\u3001std::nullptr_t\u578b\u3092\u4ee3\u5165\u3059\u308b\u3053\u3068\u3001std::nullptr_t\u578b\u3068\u306e\u7b49\u4fa1\u6bd4\u8f03\u304c\u53ef\u80fd\u3067\u306a\u3051\u308c\u3070\u306a\u308a\u307e\u305b\u3093\u3002\n\u3057\u304b\u3057\u3001\u5b8c\u5168\u306ascoped guard\u30af\u30e9\u30b9\u3092\u5b9f\u73fe\u3059\u308b\u306b\u306f\u3001\u4ee5\u4e0b\u306e\u6761\u4ef6\u3060\u3051\u3067\u5341\u5206\u306a\u306f\u305a\u3067\u3059\u3002\n\u30fbCopyConstructible\n\u30fbCopyAssignable\n\u30fbNothrowDestructible\n\u4f8b\u5916\u3092\u6295\u3052\u306a\u3044\u30e0\u30fc\u30d6\u304c\u3042\u308b\u306a\u3089\u30b3\u30d4\u30fc\u306f\u3067\u304d\u306a\u304f\u3066\u3082\u5927\u4e08\u592b\u3002\n\u524d\u7f6e\u304d\u304c\u9577\u304f\u306a\u308a\u307e\u3057\u305f\u304c\u3001\u3053\u306e\u8a18\u4e8b\u3067\u306f\u3053\u306e\u4e0d\u6e80\u3092\u89e3\u6d88\u3059\u3079\u304f\u3001std::unique_ptr\u578b\u3092\u6539\u826f\u3057\u305f\u3088\u308a\u6c4e\u7528\u7684\u306ascoped_guard \u30af\u30e9\u30b9\u3092\u4f5c\u6210\u3057\u305f\u3044\u3068\u601d\u3044\u307e\u3059\u3002\n\u3068\u8a00\u3063\u3066\u3082\u3001std::unique_ptr\u306enullable pointer\u578b\u306e\u90e8\u5206\u3092\u5225\u306e\u81ea\u4f5c\u578b\u3067\u7f6e\u304d\u63db\u3048\u308c\u3070\u3044\u3044\u3060\u3051\u306a\u306e\u3067\u305d\u3093\u306a\u5927\u5c64\u306a\u4ed5\u4e8b\u306f\u3057\u307e\u305b\u3093\u3002\u3053\u3053\u3067\u306f\u305d\u306enullable\u578b\u306bboost::optional\u3092\u4f7f\u3046\u3053\u3068\u306b\u3057\u307e\u3057\u305f\u3002\n\u5b9f\u88c5\u306e\u30b3\u30fc\u30c9\u306e\u524d\u306b\u4f7f\u3044\u65b9\u306e\u30b3\u30fc\u30c9\u3092\u793a\u3057\u305f\u3044\u3068\u601d\u3044\u307e\u3059\u3002\n\u578bresource\u304c\u3088\u304f\u3042\u308b\u30ea\u30bd\u30fc\u30b9\u30af\u30e9\u30b9\u3067\u3059\u3002\u30ea\u30bd\u30fc\u30b9\u306f\u6c7a\u307e\u3063\u305f\u624b\u9806\u3067\u53d6\u5f97\u3057\u3066\u3001\u6c7a\u307e\u3063\u305f\u624b\u9806\u3067\u89e3\u653e\u3057\u306a\u3051\u308c\u3070\u306a\u308a\u307e\u305b\u3093\u3002\nscoped_guard\u306b\u306f\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u5f15\u6570\u306b\u7ba1\u7406\u3059\u308b\u578b\u3068\u89e3\u653e\u51e6\u7406\u3092\u3059\u308bCallable\u578b\u3092\u5fc5\u8981\u3068\u3057\u307e\u3059\u3002\u30c7\u30ea\u30fc\u30bf\u306f\u3053\u306eCallable\u578b\u306b\u5909\u63db\u53ef\u80fd\u3067\u306a\u3051\u308c\u3070\u306a\u308a\u307e\u305b\u3093\u3002\u4ed6\u306f\u307b\u3068\u3093\u3069std::unique_ptr\u3068\u540c\u3058\u3088\u3046\u306b\u4f7f\u3048\u307e\u3059\u3002\u305f\u3060\u3057\u3001get\u3084reset\u306e\u30aa\u30fc\u30d0\u30fc\u30ed\u30fc\u30c9\u306e\u4e00\u90e8\u3001\u6bd4\u8f03\u6f14\u7b97\u5b50\u306a\u3069\u4e0d\u8981\u306b\u306a\u3063\u305f\u30e1\u30f3\u30d0\u95a2\u6570\u304c\u7528\u610f\u3055\u308c\u3066\u3044\u307e\u305b\u3093\u306e\u3067\u6ce8\u610f\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n#include <utility>\n\n// \u30ea\u30bd\u30fc\u30b9\nstruct resource ;\nresource get_resource() ;\nvoid release_res(resource res) ;\nvoid res_dosomething(resource res) ;\n\n\nint main()\n{\n  using resource_type = scoped_guard< resource, void(*)(res) >;\n  resource_type r(get_res(), &release_res); // \u751f\u6210\u3068\u89e3\u653e\n\n  if (r) { res_dosomething(*r); } // res_dosomething\u304c\u5b9f\u884c\u3055\u308c\u308b\u3002\n  // auto r2 = r; // \u30b3\u30d4\u30fc\u306f\u8a8d\u3081\u3089\u308c\u306a\u3044\n  auto r2 = std::move(r);         // \u6240\u6709\u6a29\u304c\u79fb\u8b72\u3055\u308c\u308b\u3002\n  if (r) { res_dosomething(*r); } // res_dosomething\u306f\u5b9f\u884c\u3055\u308c\u306a\u3044\u3002\n\n// res_dosomething(*r); // undefined behavior! \n}\n\n\n\u4ee5\u4e0b\u304c\u5b9f\u88c5\u306e\u30b3\u30fc\u30c9\u3067\u3059\u3002\u5b9f\u969b\u306b\u4f7f\u3046\u5834\u5408\u306f\u540d\u524d\u7a7a\u9593\u3092\u3061\u3083\u3093\u3068\u3064\u3051\u3066\u3042\u3052\u306a\u3051\u308c\u3070\u306a\u308a\u307e\u305b\u3093\u306d\u3002\n\u305b\u3063\u304b\u304fboost\u3092\u4f7f\u3063\u3066\u3044\u308b\u306e\u306bnoncopyable\u3092\u81ea\u4f5c\u3057\u3066\u3044\u308b\u306e\u306f\u3001boost::noncopyable\u304c\u8272\u3005\u3068\u6b8b\u5ff5\u306a\u4ed5\u69d8\u3060\u304b\u3089\u3067\u3059\u3002\u3053\u3061\u3089\u3067\u4f5c\u3063\u305fnoncopyable\u306f\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u5f15\u6570\u306b\u81ea\u5206\u306e\u578b\u3092\u7a81\u3063\u8fbc\u3093\u3067\u3042\u3052\u306a\u3051\u308c\u3070\u306a\u308a\u307e\u305b\u3093\u3002\n#include <utility>\n\n#include <boost/optional.hpp>\n#include <boost/operators.hpp>\n\n// helpers\ntemplate< class T >\nstruct do_nothing { void operator()(const T&) noexcept {} };\ntemplate< class T >\nclass noncopyable\n{\nprotected:\n  noncopyable() = default;\n  noncopyable(const noncopyable&) = delete;\n  noncopyable& operator=(const noncopyable&) = delete;\n  noncopyable(noncopyable&&) = default;\n  noncopyable& operator=(noncopyable&&) = default;\n  ~noncopyable() = default;\n};\n\n// forward declaration\ntemplate< class T, class D = do_nothing< T > >\nclass scoped_guard ;\n\n// implement\ntemplate< class T, class D >\nclass scoped_guard\n  : noncopyable< scoped_guard< T, D > >,\n    public boost::dereferenceable< scoped_guard< T, D >, T* >\n{\n  boost::optional< T > element;\n  D deleter;\n\n  void release_element() noexcept { if (element) { deleter(*element); } }\n\npublic:\n  using value_type = T;\n  using reference = value_type&;\n  using const_reference = const value_type&;\n  using pointer = value_type*;\n  using const_pointer = const value_type*;\n  using optional_type = boost::optional< value_type >;\n  using deleter_type = D;\n\n  // ctors and dtor\n  scoped_guard() = default;\n  scoped_guard(const_reference value, deleter_type d = deleter_type())\n    : element(value), deleter(d) {}\n  scoped_guard(value_type&& value, deleter_type d = deleter_type())\n    noexcept : element(std::move(value)), deleter(d) {}\n  scoped_guard(scoped_guard&& rhs) noexcept\n    : element(std::move(rhs.element)), deleter(std::move(rhs.deleter))\n    { rhs.element = boost::none; }\n  scoped_guard& operator=(scoped_guard&& rhs) noexcept\n  {\n    element = std::move(rhs.element);\n    deleter = std::move(rhs.deleter);\n    rhs.element = boost::none;\n    return (*this);\n  }\n  ~scoped_guard() noexcept { release_element(); }\n\n  // modifiers\n  optional_type release() noexcept\n  {\n    auto temp = std::move(element);\n    element = boost::none;\n    return temp;\n  }\n  void reset(const_reference value)\n  {\n    release_element();\n    element = value;\n  }\n  void reset(value_type&& value) noexcept\n  {\n    release_element();\n    element = std::move(value);\n  }\n  void swap(scoped_guard& other) noexcept\n  {\n    auto temp = std::move(*this);\n    *this = std::move(other);\n    other = std::move(temp);\n  }\n\n  // observers\n  deleter_type get_deleter() noexcept { return deleter; }\n  explicit operator bool() const noexcept\n    { return static_cast< bool >(element); }\n  reference operator*() const noexcept\n    { return *(const_cast< scoped_guard* >(this)->element); }\n};\n\n\n\u9593\u9055\u3044\u3084\u6539\u5584\u70b9\u306a\u3069\u3054\u6307\u6458\u304c\u3054\u3056\u3044\u307e\u3057\u305f\u3089\u30b3\u30e1\u30f3\u30c8\u3092\u304a\u9858\u3044\u3044\u305f\u3057\u307e\u3059\u3002\n`std::unique_ptr`\u3001\u3061\u3083\u3093\u3068\u4f7f\u3063\u3066\u3044\u307e\u3059\u304b\uff1f\u3000\u305f\u3060\u5fc5\u8981\u306b\u5fdc\u3058\u3066delete\u3059\u308b\u3060\u3051\u3067\u306a\u304f\u3001\u30c7\u30ea\u30fc\u30bf\u3092\u81ea\u4f5c\u3059\u308b\u3053\u3068\u3067scoped guard\u3092\u5b9f\u73fe\u3059\u308b\u3053\u3068\u3082\u3067\u304d\u308b\u7d20\u6674\u3089\u3057\u3044\u30af\u30e9\u30b9\u3067\u3059\u304c\u3001scoped guard\u306e\u601d\u60f3\u3092\u4f53\u73fe\u3059\u308b\u306b\u306f\u60dc\u3057\u3044\u90e8\u5206\u304c\u3042\u308a\u307e\u3059\u3002\n\u305d\u308c\u306f\u7ba1\u7406\u3059\u308b\u578b`pointer`\u306b\u5bfe\u3057\u3066\u5fc5\u8981\u4ee5\u4e0a\u306e\u8981\u6c42\u3092\u8ab2\u3059\u3053\u3068\u3001\u3059\u306a\u308f\u3061[nullable pointer](http://en.cppreference.com/w/cpp/concept/NullablePointer)\u3092\u8981\u6c42\u3059\u308b\u3053\u3068\u3067\u3059\u3002\n\u3053\u308c\u306e\u305b\u3044\u3067\u3001\u4f55\u304b\u30ea\u30bd\u30fc\u30b9\u3084\u30cf\u30f3\u30c9\u30eb\u306a\u3069\u30dd\u30a4\u30f3\u30bf\u3067\u5b9a\u7fa9\u3055\u308c\u306a\u3044\u3082\u306e\u3092`std::unique_ptr`\u3067\u7ba1\u7406\u3059\u308b\u3053\u3068\u306f\u3067\u304d\u307e\u305b\u3093\u3002\u305b\u3063\u304b\u304f\u30ab\u30b9\u30bf\u30de\u30a4\u30ba\u3067\u304d\u308b\u306e\u306b\u3002\nnullable pointer\u306f\u4ee5\u4e0b\u3092\u6e80\u305f\u3059\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\n\u30fbEqualityComparable\n\u30fbDefaultConstructible\n\u30fbCopyConstructible\n\u30fbCopyAssignable\n\u30fbDestructible\n\u52a0\u3048\u3066\u3001`bool`\u578b\u306b\u5909\u63db\u53ef\u80fd\u3067\u3001\u5168\u3066\u306e\u52d5\u4f5c\u304c\u4f8b\u5916\u3092\u6295\u3052\u308b\u53ef\u80fd\u6027\u304c\u306a\u3044\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\u307e\u305f\u3001`std::nullptr_t`\u578b\u3067\u306e\u521d\u671f\u5316\u3001`std::nullptr_t`\u578b\u3092\u4ee3\u5165\u3059\u308b\u3053\u3068\u3001`std::nullptr_t`\u578b\u3068\u306e\u7b49\u4fa1\u6bd4\u8f03\u304c\u53ef\u80fd\u3067\u306a\u3051\u308c\u3070\u306a\u308a\u307e\u305b\u3093\u3002\n\n\u3057\u304b\u3057\u3001\u5b8c\u5168\u306ascoped guard\u30af\u30e9\u30b9\u3092\u5b9f\u73fe\u3059\u308b\u306b\u306f\u3001\u4ee5\u4e0b\u306e\u6761\u4ef6\u3060\u3051\u3067\u5341\u5206\u306a\u306f\u305a\u3067\u3059\u3002\n\u30fbCopyConstructible\n\u30fbCopyAssignable\n\u30fbNothrowDestructible\n\n\u4f8b\u5916\u3092\u6295\u3052\u306a\u3044\u30e0\u30fc\u30d6\u304c\u3042\u308b\u306a\u3089\u30b3\u30d4\u30fc\u306f\u3067\u304d\u306a\u304f\u3066\u3082\u5927\u4e08\u592b\u3002\n\u524d\u7f6e\u304d\u304c\u9577\u304f\u306a\u308a\u307e\u3057\u305f\u304c\u3001\u3053\u306e\u8a18\u4e8b\u3067\u306f\u3053\u306e\u4e0d\u6e80\u3092\u89e3\u6d88\u3059\u3079\u304f\u3001`std::unique_ptr`\u578b\u3092\u6539\u826f\u3057\u305f\u3088\u308a\u6c4e\u7528\u7684\u306a`scoped_guard` \u30af\u30e9\u30b9\u3092\u4f5c\u6210\u3057\u305f\u3044\u3068\u601d\u3044\u307e\u3059\u3002\n\u3068\u8a00\u3063\u3066\u3082\u3001`std::unique_ptr`\u306enullable pointer\u578b\u306e\u90e8\u5206\u3092\u5225\u306e\u81ea\u4f5c\u578b\u3067\u7f6e\u304d\u63db\u3048\u308c\u3070\u3044\u3044\u3060\u3051\u306a\u306e\u3067\u305d\u3093\u306a\u5927\u5c64\u306a\u4ed5\u4e8b\u306f\u3057\u307e\u305b\u3093\u3002\u3053\u3053\u3067\u306f\u305d\u306enullable\u578b\u306b`boost::optional`\u3092\u4f7f\u3046\u3053\u3068\u306b\u3057\u307e\u3057\u305f\u3002\n\n\u5b9f\u88c5\u306e\u30b3\u30fc\u30c9\u306e\u524d\u306b\u4f7f\u3044\u65b9\u306e\u30b3\u30fc\u30c9\u3092\u793a\u3057\u305f\u3044\u3068\u601d\u3044\u307e\u3059\u3002\n\u578b`resource`\u304c\u3088\u304f\u3042\u308b\u30ea\u30bd\u30fc\u30b9\u30af\u30e9\u30b9\u3067\u3059\u3002\u30ea\u30bd\u30fc\u30b9\u306f\u6c7a\u307e\u3063\u305f\u624b\u9806\u3067\u53d6\u5f97\u3057\u3066\u3001\u6c7a\u307e\u3063\u305f\u624b\u9806\u3067\u89e3\u653e\u3057\u306a\u3051\u308c\u3070\u306a\u308a\u307e\u305b\u3093\u3002\n`scoped_guard`\u306b\u306f\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u5f15\u6570\u306b\u7ba1\u7406\u3059\u308b\u578b\u3068\u89e3\u653e\u51e6\u7406\u3092\u3059\u308b[Callable\u578b](http://en.cppreference.com/w/cpp/concept/Callable)\u3092\u5fc5\u8981\u3068\u3057\u307e\u3059\u3002\u30c7\u30ea\u30fc\u30bf\u306f\u3053\u306eCallable\u578b\u306b\u5909\u63db\u53ef\u80fd\u3067\u306a\u3051\u308c\u3070\u306a\u308a\u307e\u305b\u3093\u3002\u4ed6\u306f\u307b\u3068\u3093\u3069`std::unique_ptr`\u3068\u540c\u3058\u3088\u3046\u306b\u4f7f\u3048\u307e\u3059\u3002\u305f\u3060\u3057\u3001`get`\u3084`reset`\u306e\u30aa\u30fc\u30d0\u30fc\u30ed\u30fc\u30c9\u306e\u4e00\u90e8\u3001\u6bd4\u8f03\u6f14\u7b97\u5b50\u306a\u3069\u4e0d\u8981\u306b\u306a\u3063\u305f\u30e1\u30f3\u30d0\u95a2\u6570\u304c\u7528\u610f\u3055\u308c\u3066\u3044\u307e\u305b\u3093\u306e\u3067\u6ce8\u610f\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n\n\n```cpp\n#include <utility>\n\n// \u30ea\u30bd\u30fc\u30b9\nstruct resource ;\nresource get_resource() ;\nvoid release_res(resource res) ;\nvoid res_dosomething(resource res) ;\n\n\nint main()\n{\n  using resource_type = scoped_guard< resource, void(*)(res) >;\n  resource_type r(get_res(), &release_res); // \u751f\u6210\u3068\u89e3\u653e\n\n  if (r) { res_dosomething(*r); } // res_dosomething\u304c\u5b9f\u884c\u3055\u308c\u308b\u3002\n  // auto r2 = r; // \u30b3\u30d4\u30fc\u306f\u8a8d\u3081\u3089\u308c\u306a\u3044\n  auto r2 = std::move(r);         // \u6240\u6709\u6a29\u304c\u79fb\u8b72\u3055\u308c\u308b\u3002\n  if (r) { res_dosomething(*r); } // res_dosomething\u306f\u5b9f\u884c\u3055\u308c\u306a\u3044\u3002\n\n// res_dosomething(*r); // undefined behavior! \n}\n\n```\n\n\u4ee5\u4e0b\u304c\u5b9f\u88c5\u306e\u30b3\u30fc\u30c9\u3067\u3059\u3002\u5b9f\u969b\u306b\u4f7f\u3046\u5834\u5408\u306f\u540d\u524d\u7a7a\u9593\u3092\u3061\u3083\u3093\u3068\u3064\u3051\u3066\u3042\u3052\u306a\u3051\u308c\u3070\u306a\u308a\u307e\u305b\u3093\u306d\u3002\n\u305b\u3063\u304b\u304fboost\u3092\u4f7f\u3063\u3066\u3044\u308b\u306e\u306b`noncopyable`\u3092\u81ea\u4f5c\u3057\u3066\u3044\u308b\u306e\u306f\u3001`boost::noncopyable`\u304c\u8272\u3005\u3068\u6b8b\u5ff5\u306a\u4ed5\u69d8\u3060\u304b\u3089\u3067\u3059\u3002\u3053\u3061\u3089\u3067\u4f5c\u3063\u305f`noncopyable`\u306f\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u5f15\u6570\u306b\u81ea\u5206\u306e\u578b\u3092\u7a81\u3063\u8fbc\u3093\u3067\u3042\u3052\u306a\u3051\u308c\u3070\u306a\u308a\u307e\u305b\u3093\u3002\n\n```cpp\n#include <utility>\n\n#include <boost/optional.hpp>\n#include <boost/operators.hpp>\n\n// helpers\ntemplate< class T >\nstruct do_nothing { void operator()(const T&) noexcept {} };\ntemplate< class T >\nclass noncopyable\n{\nprotected:\n  noncopyable() = default;\n  noncopyable(const noncopyable&) = delete;\n  noncopyable& operator=(const noncopyable&) = delete;\n  noncopyable(noncopyable&&) = default;\n  noncopyable& operator=(noncopyable&&) = default;\n  ~noncopyable() = default;\n};\n\n// forward declaration\ntemplate< class T, class D = do_nothing< T > >\nclass scoped_guard ;\n\n// implement\ntemplate< class T, class D >\nclass scoped_guard\n  : noncopyable< scoped_guard< T, D > >,\n    public boost::dereferenceable< scoped_guard< T, D >, T* >\n{\n  boost::optional< T > element;\n  D deleter;\n\n  void release_element() noexcept { if (element) { deleter(*element); } }\n\npublic:\n  using value_type = T;\n  using reference = value_type&;\n  using const_reference = const value_type&;\n  using pointer = value_type*;\n  using const_pointer = const value_type*;\n  using optional_type = boost::optional< value_type >;\n  using deleter_type = D;\n\n  // ctors and dtor\n  scoped_guard() = default;\n  scoped_guard(const_reference value, deleter_type d = deleter_type())\n    : element(value), deleter(d) {}\n  scoped_guard(value_type&& value, deleter_type d = deleter_type())\n    noexcept : element(std::move(value)), deleter(d) {}\n  scoped_guard(scoped_guard&& rhs) noexcept\n    : element(std::move(rhs.element)), deleter(std::move(rhs.deleter))\n    { rhs.element = boost::none; }\n  scoped_guard& operator=(scoped_guard&& rhs) noexcept\n  {\n    element = std::move(rhs.element);\n    deleter = std::move(rhs.deleter);\n    rhs.element = boost::none;\n    return (*this);\n  }\n  ~scoped_guard() noexcept { release_element(); }\n\n  // modifiers\n  optional_type release() noexcept\n  {\n    auto temp = std::move(element);\n    element = boost::none;\n    return temp;\n  }\n  void reset(const_reference value)\n  {\n    release_element();\n    element = value;\n  }\n  void reset(value_type&& value) noexcept\n  {\n    release_element();\n    element = std::move(value);\n  }\n  void swap(scoped_guard& other) noexcept\n  {\n    auto temp = std::move(*this);\n    *this = std::move(other);\n    other = std::move(temp);\n  }\n\n  // observers\n  deleter_type get_deleter() noexcept { return deleter; }\n  explicit operator bool() const noexcept\n    { return static_cast< bool >(element); }\n  reference operator*() const noexcept\n    { return *(const_cast< scoped_guard* >(this)->element); }\n};\n\n```\n\n\n\u9593\u9055\u3044\u3084\u6539\u5584\u70b9\u306a\u3069\u3054\u6307\u6458\u304c\u3054\u3056\u3044\u307e\u3057\u305f\u3089\u30b3\u30e1\u30f3\u30c8\u3092\u304a\u9858\u3044\u3044\u305f\u3057\u307e\u3059\u3002\n", "tags": ["C++", "C++11"]}