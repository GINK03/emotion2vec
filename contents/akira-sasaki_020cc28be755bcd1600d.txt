{"context": " More than 1 year has passed since last update.\n\nISL229034\n\n\nDatasheet\nDatasheet\n\nSlave Address\n\n\n\nSlave address\n???\n\n\n\n\n\n\nPowerOn\n\n\n\n\u9805\u76ee\n\u30a2\u30c9\u30ec\u30b9\nBit7\nBit6\nBit5\nBit4\nBit3\nBit2\nBit1\nBit0\n\n\n\n\nCOMMAND-I\n0x00\nOP7\nOP6\nOP5\nRESERVED\nRESERVED\nRESERVED\nRESERVED\nRESERVED\n\n\n\n\n\n\nOP7Bit7\nOP6Bit6\nOP5Bit5\n\u6982\u8981\n\n\n\n\n0\n0\n0\nPower-down the device (Default)\n\n\n0\n0\n1\nThe device measures ALS only once every integration cycle. This is the lowest operating mode. (Note 11)\n\n\n0\n1\n0\nIR once\n\n\n0\n1\n1\nReserved (DO NOT USE)\n\n\n1\n0\n0\nReserved (DO NOT USE)\n\n\n1\n0\n1\nMeasures ALS continuously\n\n\n1\n1\n0\nMeasures IR continuous\n\n\n1\n1\n1\nReserved (DO NOT USE)\n\n\n\n\narduino\n#define ISL29034_POWER_DOWN 0b000\n#define ISL29034_ALS_ONLY 0b001\n#define ISL29034_ALS_CONTINUOSULY 0b101\n#define ISL29034_IR_CONTINUOSULY 0b110\n\n#define ISL29034_COMMAIN_I_REG 0x00\n\nvoid PowerOn()\n{\n  writeI2c(ISL29034_COMMAIN_I_REG, ISL29034_ALS_CONTINUOSULY);  \n}\n\n\n\nConfiguration\n\n\n\n\u9805\u76ee\n\u30a2\u30c9\u30ec\u30b9\nBit7\nBit6\nBit5\nBit4\nBit3\nBit2\nBit1\nBit0\n\n\n\n\nCOMMAND-II\n0x01\nRESERVED\nRESERVED\nRESERVED\nRESERVED\nRES1\nRES0\nRANGE1\nRANGE0\n\n\n\n\n\n\nRANGE1Bit1\nRANGE0Bit0\nFULL SCALE LUX RANGE\n\n\n\n\n0\n0\n1,000\n\n\n0\n1\n4,000\n\n\n1\n0\n16,000\n\n\n1\n1\n64,000\n\n\n\n\n\n\nRES1Bit3\nRES2Bit2\nNUMBER OF CLOCK CYCLES\nn-BIT ADC\n\n\n\n\n0\n0\n65,536\n16\n\n\n0\n1\n4,096\n12\n\n\n1\n0\n256\n8\n\n\n1\n1\n16\n4\n\n\n\n\narduino\n#define ISL29034_LUX_RANGE_1000 0b00\n#define ISL29034_LUX_RANGE_4000 0b01\n#define ISL29034_LUX_RANGE_16000 0b10\n#define ISL29034_LUX_RANGE_64000 0b11\n\n#define ISL29034_CLOCK_65536 0b0000\n#define ISL29034_CLOCk_4096 0b0100\n#define ISL29034_CLOCK_256 0b1000\n#define ISL29034_CLOCK_16 0b1100\n\n#define ISL29034_COMMAIN_II_REG 0x01\n\nvoid Configuration()\n{\n  writeI2c(ISL29034_COMMAIN_II_REG, ISL29034_LUX_RANGE_64000|ISL29034_CLOCK_65536);  \n}\n\n\n\nAmbient\u306e\u8aad\u307f\u53d6\u308a\n\narduino\n#define ISL29034_DATA 0x02\n\nuint16_t ReadData()\n{\n  uint16_t ambient;\n  uint8_t buffer[2];\n\n  readI2c(ISL29034_DATA, 2, buffer);\n  ambient = (((uint16_t)buffer[1])<<8) | (uint16_t)buffer[0];\n\n  return ambient;\n}\n\n\n\nLower Interrupt Threshold Registers\nToDo\n\nUpper Interrupt Threshold Registers\nToDo\n\nI2C\u306e\u30a2\u30af\u30bb\u30b9\u7528\u30b3\u30fc\u30c9\n\nArduino\n#define ISL29034_SLAVE_ADDRESS 0x??\n\n// I2C\u3078\u306e\u66f8\u304d\u8fbc\u307f\nvoid writeI2c(byte register_addr, byte value) {\n  Wire.beginTransmission(ISL29034_SLAVE_ADDRESS);  \n  Wire.write(register_addr);         \n  Wire.write(value);                 \n  Wire.endTransmission();        \n}\n\n// I2C\u3078\u306e\u8aad\u307f\u8fbc\u307f\nvoid readI2c(byte register_addr, int num, byte *buf) {\n  Wire.beginTransmission(ISL29034_SLAVE_ADDRESS); \n  Wire.write(register_addr);           \n  Wire.endTransmission(false);         \n\n  //Wire.beginTransmission(DEVICE_ADDR); \n  Wire.requestFrom(HTS221_SLAVE_ADDRESS, num);  \n\n  int i = 0;\n  while (Wire.available())\n  {\n    buf[i] = Wire.read(); \n    i++;   \n  }\n  //Wire.endTransmission();         \n}\n\n\n# ISL229034\n\n![ISL29034.png](https://qiita-image-store.s3.amazonaws.com/0/63450/ebe8e721-767f-4d6e-66f0-12041874c975.png)\n\n# Datasheet\n[Datasheet](https://octopart.com/isl29034iroz-t7-intersil-46958301)\n\n# Slave Address\n\n| Slave address | ??? |\n|:-:|:-:|\n\n# PowerOn\n\n| \u9805\u76ee  | \u30a2\u30c9\u30ec\u30b9 | Bit7 | Bit6 | Bit5 | Bit4 | Bit3 | Bit2 | Bit1 | Bit0 | \n|:-:|:-:|:-:|:-:|:-:|:-:|:-:|:-:|:-:|:-:|\n|COMMAND-I|0x00| OP7 | OP6 | OP5 | RESERVED| RESERVED| RESERVED| RESERVED| RESERVED| RESERVED|\n\n| OP7<br>Bit7 | OP6<br>Bit6 | OP5<br>Bit5 | \u6982\u8981 |\n|:-:|:-:|:-:|:--|\n| 0 | 0 | 0 | Power-down the device (Default) |\n| 0 | 0 | 1 | The device measures ALS only once every integration cycle. This is the lowest operating mode. (Note 11) | \n| 0 | 1 | 0 | IR once |\n| 0 | 1 | 1 | Reserved (DO NOT USE) |\n| 1 | 0 | 0 | Reserved (DO NOT USE) |\n| 1 | 0 | 1 | Measures ALS continuously |\n| 1 | 1 | 0 | Measures IR continuous |\n| 1 | 1 | 1 | Reserved (DO NOT USE) |\n\n```cpp:arduino\n#define ISL29034_POWER_DOWN 0b000\n#define ISL29034_ALS_ONLY 0b001\n#define ISL29034_ALS_CONTINUOSULY 0b101\n#define ISL29034_IR_CONTINUOSULY 0b110\n\n#define ISL29034_COMMAIN_I_REG 0x00\n\nvoid PowerOn()\n{\n  writeI2c(ISL29034_COMMAIN_I_REG, ISL29034_ALS_CONTINUOSULY);  \n}\n```\n\n# Configuration\n\n| \u9805\u76ee  | \u30a2\u30c9\u30ec\u30b9 | Bit7 | Bit6 | Bit5 | Bit4 | Bit3 | Bit2 | Bit1 | Bit0 | \n|:-:|:-:|:-:|:-:|:-:|:-:|:-:|:-:|:-:|:-:|\n|COMMAND-II|0x01| RESERVED | RESERVED | RESERVED | RESERVED| RES1 |  RES0 | RANGE1 | RANGE0 |\n\n| RANGE1<br>Bit1 | RANGE0<br>Bit0 |  FULL SCALE LUX RANGE |\n|:-:|:-:|:-:|:--|\n| 0 | 0 | 1,000 |\n| 0 | 1 | 4,000 | \n| 1 | 0 | 16,000 | \n| 1 | 1 | 64,000 | \n\n| RES1<br>Bit3 | RES2<br>Bit2 |  NUMBER OF CLOCK CYCLES | n-BIT ADC |\n|:-:|:-:|:-:|:--|\n| 0 | 0 | 65,536 | 16 |\n| 0 | 1 | 4,096 | 12 | \n| 1 | 0 | 256  | 8 | \n| 1 | 1 | 16 | 4 |\n\n```cpp:arduino\n#define ISL29034_LUX_RANGE_1000 0b00\n#define ISL29034_LUX_RANGE_4000 0b01\n#define ISL29034_LUX_RANGE_16000 0b10\n#define ISL29034_LUX_RANGE_64000 0b11\n\n#define ISL29034_CLOCK_65536 0b0000\n#define ISL29034_CLOCk_4096 0b0100\n#define ISL29034_CLOCK_256 0b1000\n#define ISL29034_CLOCK_16 0b1100\n\n#define ISL29034_COMMAIN_II_REG 0x01\n\nvoid Configuration()\n{\n  writeI2c(ISL29034_COMMAIN_II_REG, ISL29034_LUX_RANGE_64000|ISL29034_CLOCK_65536);  \n}\n```\n\n# Ambient\u306e\u8aad\u307f\u53d6\u308a\n\n```cpp:arduino\n#define ISL29034_DATA 0x02\n\nuint16_t ReadData()\n{\n  uint16_t ambient;\n  uint8_t buffer[2];\n\n  readI2c(ISL29034_DATA, 2, buffer);\n  ambient = (((uint16_t)buffer[1])<<8) | (uint16_t)buffer[0];\n\n  return ambient;\n}\n```\n\n# Lower Interrupt Threshold Registers \nToDo\n\n# Upper Interrupt Threshold Registers \nToDo\n\n# I2C\u306e\u30a2\u30af\u30bb\u30b9\u7528\u30b3\u30fc\u30c9\n\n```cpp:Arduino\n#define ISL29034_SLAVE_ADDRESS 0x??\n\n// I2C\u3078\u306e\u66f8\u304d\u8fbc\u307f\nvoid writeI2c(byte register_addr, byte value) {\n  Wire.beginTransmission(ISL29034_SLAVE_ADDRESS);  \n  Wire.write(register_addr);         \n  Wire.write(value);                 \n  Wire.endTransmission();        \n}\n\n// I2C\u3078\u306e\u8aad\u307f\u8fbc\u307f\nvoid readI2c(byte register_addr, int num, byte *buf) {\n  Wire.beginTransmission(ISL29034_SLAVE_ADDRESS); \n  Wire.write(register_addr);           \n  Wire.endTransmission(false);         \n\n  //Wire.beginTransmission(DEVICE_ADDR); \n  Wire.requestFrom(HTS221_SLAVE_ADDRESS, num);  \n\n  int i = 0;\n  while (Wire.available())\n  {\n    buf[i] = Wire.read(); \n    i++;   \n  }\n  //Wire.endTransmission();         \n}\n```\n", "tags": ["fabo", "IoT", "I2C", "ambientlight", "mems"]}