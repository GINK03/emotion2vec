{"context": "\u4ed5\u4e8b\u4e2d\u3069\u3046\u3057\u3066\u3082GET WILD\u304c\u8074\u304d\u305f\u304f\u306a\u308b\u3053\u3068\u3068\u3044\u3046\u306e\u306f\u3088\u304f\u3042\u308b\u3068\u601d\u3044\u307e\u3059\u3002\n\u305f\u3068\u3048\u3070\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u72b6\u6cc1\u3002\n\n\u30db\u30ef\u30a4\u30c8\u30dc\u30fc\u30c9\u306b\uff62XYZ\uff63\u3068\u66f8\u304b\u308c\u3066\u3044\u305f\n\u540c\u50da\u304c\u5de8\u4f53\u306e\u30b5\u30f3\u30b0\u30e9\u30b9\u574a\u4e3b\n\u3082\u3063\u3053\u308a\n\n\u3057\u304b\u3057GET WILD\u304c\u3044\u3064\u3067\u3082\u3042\u306a\u305f\u306e\u305d\u3070\u306b\u3042\u308b\u3068\u306f\u9650\u308a\u307e\u305b\u3093\u3002\n\u4eca\u56de\u306f\u305d\u3093\u306a\u3068\u304d\u306e\u305f\u3081\u306b\u3001Android\u3068Kotlin\u3092\u3064\u304b\u3063\u3066\u81ea\u3089GET WILD\u3092\u3059\u308b\u65b9\u6cd5\u3092\u63d0\u4f9b\u3057\u307e\u3059\u3002\n\nAudioTrack\n\u97f3\u6e90\u304c\u306a\u3044\u306e\u3067\u3042\u308c\u3070\u3001\u81ea\u5206\u3067\u6f14\u594f\u3059\u308c\u3070\u826f\u3044\u308f\u3051\u3067\u3059\u3002\nAndroid\u306b\u306fAudioTrack\u3068\u3044\u3046\u97f3\u3092\u518d\u751f\u3067\u304d\u308bAPI\u304c\u63d0\u4f9b\u3055\u308c\u3066\u3044\u308b\u306e\u3067\u3053\u3044\u3064\u3092\u4f7f\u3063\u3066GET WILD\u3057\u307e\u3057\u3087\u3046\u3002\n\nKey\n\u307e\u305a\u306fKey\u3092\u5b9a\u7fa9\u3057\u307e\u3057\u3087\u3046\u3002\nenum class Key(val freq: Float) {\n    C(16.35f),\n    C_SHARP(17.32f),\n    D(18.35f),\n    D_SHARP(19.45f),\n    E(20.6f),\n    F(21.83f),\n    F_SHARP(23.12f),\n    G(24.5f),\n    G_SHARP(25.96f),\n    A(27.5f),\n    A_SHARP(29.14f),\n    B(30.87f);\n}\n\nenum\u3068\u3057\u3066\u4ee5\u4e0b\u3092\u5b9a\u7fa9\u3057\u307e\u3057\u305f\u3002\n\u305d\u308c\u305e\u308c\u306b\u4e00\u756a\u4f4e\u3044\u30aa\u30af\u30bf\u30fc\u30d6\u306e\u5468\u6ce2\u6570\u3082\u6301\u305f\u305b\u3066\u3044\u307e\u3059\u3002\n\nC\nC#\nD\nD#\nE\nF\nF#\nG\nG#\nA\nA#\nB\n\n\nNote Length\n\u3064\u304e\u306b\u97f3\u306e\u9577\u3055\u3067\u3059\u3002\nenum class NoteLength(val length: Float) {\n    NOTE_1(1f),\n    NOTE_2_DOTTED(0.75f),\n    NOTE_2(0.5f),\n    NOTE_4_DOTTED(0.375f),\n    NOTE_4(0.25f),\n    NOTE_8_DOTTED(0.1875f),\n    NOTE_8(0.125f),\n    NOTE_16_DOTTED(0.09375f),\n    NOTE_16(0.0625f);\n}\n\n\u3053\u308c\u3082enum\u3068\u3057\u3066\u5b9a\u7fa9\u3057\u307e\u3057\u305f\u3002\n\u3068\u308a\u3042\u3048\u305a\u306f\u4ee5\u4e0b\u306e\u307f\u3092\u5b9a\u7fa9\u3057\u307e\u3057\u305f\u3002\n\u305d\u308c\u305e\u308c\u306b\u4e00\u5c0f\u7bc0\u3042\u305f\u308a\u306e\u9577\u3055\u3092Float\u3068\u3057\u3066\u6301\u305f\u305b\u3066\u3044\u307e\u3059\u3002\n\n\u5168\u97f3\u7b26\n\u4ed8\u70b92\u5206\u97f3\u7b26\n2\u5206\u97f3\u7b26\n\u4ed8\u70b94\u5206\u97f3\u7b26\n4\u5206\u97f3\u7b26\n\u4ed8\u70b98\u5206\u97f3\u7b26\n8\u5206\u97f3\u7b26\n\u4ed8\u70b916\u5206\u97f3\u7b26\n16\u5206\u97f3\u7b26\n\n\nNote\n\u97f3\u7a0b\u3068\u97f3\u306e\u9577\u3055\u3092\u5b9a\u7fa9\u3067\u304d\u307e\u3057\u305f\u3002\u3064\u304e\u306fNote\u3092\u3064\u304f\u308a\u307e\u3059\u3002\n\u97f3\u7b26\u3068\u4f11\u7b26\u306e\u30b9\u30fc\u30d1\u30fc\u30af\u30e9\u30b9\u3068\u306a\u308b\u62bd\u8c61\u30af\u30e9\u30b9\u3068\u3057\u3066Note\u3092\u5b9a\u7fa9\u3057\u307e\u3057\u305f\u3002\nabstract class Note {\n    abstract val frequency: Float\n    abstract val length: Float\n}\n\n\nMusicalNote\n\u6b21\u306b\u97f3\u7b26\u3068\u3057\u3066MusicalNote\u3092\u5b9a\u7fa9\u3057\u307e\u3057\u305f\u3002\nMusicalNote\u306f\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u3067\u5148\u7a0b\u5b9a\u7fa9\u3057\u305fKey\u3068NoteLength\u3001\u30aa\u30af\u30bf\u30fc\u30d6\u3092\u53d7\u3051\u53d6\u308a\u307e\u3059\u3002\n\u30d7\u30ed\u30d1\u30c6\u30a3\u306efrequency\u306f Key.freq * (2^octave)\u3092\u8fd4\u3057\u307e\u3059\u3002\u3053\u308c\u304c\u305d\u306e\u97f3\u7b26\u306e\u5468\u6ce2\u6570\u3067\u3059\u3002\nopen class MusicalNote(private val key: Key,\n                       private val octave: Int,\n                       private val noteLength: NoteLength): Note() {\n\n    override val frequency: Float\n        get() = key.freq * Math.pow(2.0, octave.toDouble()).toFloat()\n\n    override val length: Float\n        get() = noteLength.length\n}\n\n\nRestNote\n\u6b21\u306b\u4f11\u7b26\u3068\u3057\u3066RestNote\u3092\u5b9a\u7fa9\u3057\u307e\u3057\u305f\u3002\n\u4f11\u7b26\u306f\u97f3\u3092\u6301\u305f\u306a\u3044\u306e\u3067\u30d7\u30ed\u30d1\u30c6\u30a3frequency\u306f0\u3092\u8fd4\u3057\u307e\u3059\u3002\nclass RestNote(private val noteLength: NoteLength): Note() {\n\n    override val frequency: Float\n        get() = 0f\n\n    override val length: Float\n        get() = noteLength.length\n}\n\n\n\u697d\u8b5c\u3092\u4f5c\u308d\u3046\n\u3055\u3066\u3001Note\u3092\u4e00\u901a\u308a\u5b9f\u88c5\u3067\u304d\u305f\u306e\u3067\u3055\u3063\u305d\u304f\u697d\u8b5c\u3092\u3064\u304f\u308a\u307e\u3057\u3087\u3046\u3002\n\u4eca\u56de\u306fGET WILD\u306e\u697d\u8b5c\u3092\u3064\u304f\u308b\u308f\u3051\u3067\u3059\u304c\u3001\u305f\u304b\u304c\u77f3\u3053\u308d\u4e00\u3064\u30ac\u30f3\u30c0\u30e0\u3067\u62bc\u3057\u8fd4\u3057\u3066\u3084\u308b\u3068\u304d\u306b\u306fBeyond The Time\u3092\u8074\u304d\u305f\u304f\u306a\u308b\u3053\u3068\u3082\u3042\u308b\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u3002\u697d\u8b5c\u306f\u66f8\u304d\u3084\u3059\u304f\u8aad\u307f\u3084\u3059\u3044\u65b9\u304c\u3044\u3044\u3067\u3059\u3088\u306d?\n\u3068\u3044\u3046\u3053\u3068\u3067\u3001Recorder\u30af\u30e9\u30b9\u3092\u3064\u304f\u308a\u307e\u3059\u3002\nclass Recorder {\n    private val notes = arrayListOf<Note>()\n\n    fun c(octave: Int) = MusicalNoteBuilder(Key.C, octave, notes)\n    fun cS(octave: Int) = MusicalNoteBuilder(Key.C_SHARP, octave, notes)\n    fun d(octave: Int) = MusicalNoteBuilder(Key.D, octave, notes)\n    fun dS(octave: Int) = MusicalNoteBuilder(Key.D_SHARP, octave, notes)\n    fun e(octave: Int) = MusicalNoteBuilder(Key.E, octave, notes)\n    fun f(octave: Int) = MusicalNoteBuilder(Key.F, octave, notes)\n    fun fS(octave: Int) = MusicalNoteBuilder(Key.F_SHARP, octave, notes)\n    fun g(octave: Int) = MusicalNoteBuilder(Key.G_SHARP, octave, notes)\n    fun gS(octave: Int) = MusicalNoteBuilder(Key.G, octave, notes)\n    fun a(octave: Int) = MusicalNoteBuilder(Key.A, octave, notes)\n    fun aS(octave: Int) = MusicalNoteBuilder(Key.A_SHARP, octave, notes)\n    fun b(octave: Int) = MusicalNoteBuilder(Key.B, octave, notes)\n    fun rest() = RestNoteBuilder(notes)\n\n    fun record(block: Recorder.()->Unit) = apply(block)\n    fun export() = Music(notes)\n\n\n    abstract class NoteBuilder(protected val notes: ArrayList<Note>) {\n        fun whole() = newNote(NoteLength.NOTE_1)\n        fun dottedHalf() = newNote(NoteLength.NOTE_2_DOTTED)\n        fun half() = newNote(NoteLength.NOTE_2)\n        fun dottedQuarter() = newNote(NoteLength.NOTE_4_DOTTED)\n        fun quarter() = newNote(NoteLength.NOTE_4)\n        fun dottedEight() = newNote(NoteLength.NOTE_8_DOTTED)\n        fun eight() = newNote(NoteLength.NOTE_8)\n        fun dottedSixteenth() = newNote(NoteLength.NOTE_16_DOTTED)\n        fun sixteenth() = newNote(NoteLength.NOTE_16)\n\n        abstract protected fun newNote(length: NoteLength)\n    }\n\n    class MusicalNoteBuilder(private val key: Key,\n                             private val octave: Int,\n                             notes: ArrayList<Note>): NoteBuilder(notes) {\n\n        override fun newNote(length: NoteLength) {\n            notes.add(MusicalNote(key, octave, length))\n        }\n    }\n\n    class RestNoteBuilder(notes: ArrayList<Note>): NoteBuilder(notes) {\n\n        override fun newNote(length: NoteLength) {\n            notes.add(RestNote(length))\n        }\n    }\n}\n\nRecorder\u306b\u306f\u5404Key\u3092\u540d\u524d\u3068\u3057\u305f\u95a2\u6570\u3092\u5b9f\u88c5\u3057\u307e\u3057\u305f\u3002\u5f15\u6570\u306f\u30aa\u30af\u30bf\u30fc\u30d6\u6570\u3067\u3059\u3002\u3053\u306e\u95a2\u6570\u306fMusicalNoteBuilder\u3092\u8fd4\u3057\u307e\u3059\u3002\n\u3053\u3044\u3064\u306b\u306f\u97f3\u306e\u9577\u3055\u3092\u540d\u524d\u3068\u3057\u305f\u95a2\u6570\u304c\u5b9f\u88c5\u3055\u308c\u3066\u3044\u307e\u3059\u3002\n\nrecord\u95a2\u6570\nrecord\u95a2\u6570\u306f\u9ad8\u968e\u95a2\u6570\u306b\u306a\u3063\u3066\u3044\u3066\u3001\u5f15\u6570\u306fRecorder\u306e\u62e1\u5f35\u95a2\u6570\u3067\u3059\u3002\n\u3064\u307e\u308a\u3001record\u95a2\u6570\u306b\u6e21\u3059\u95a2\u6570\u306fRecorder\u306e\u4e00\u90e8\u3068\u306a\u308b\u306e\u3067\u3001\u305d\u306e\u95a2\u6570\u306e\u306a\u304b\u3067\u306fthis\u30ad\u30fc\u30ef\u30fc\u30c9\u304cRecorder\u3068\u4e00\u81f4\u3057\u307e\u3059\u3002\n\u5b9f\u969b\u306b\u4f7f\u3063\u3066\u307f\u307e\u3057\u3087\u3046\u3002\nRecorder().record {\n    dS(4).quarter()\n    cS(4).quarter()\n    b(3).quarter()\n    rest().eight()\n    dS(4).eight()\n\n    cS(4).dottedEight()\n    b(3).dottedEight()\n    b(3).dottedQuarter()\n    rest().eight()\n    b(3).sixteenth()\n    cS(4).sixteenth()\n\n    dS(4).dottedEight()\n    dS(4).dottedEight()\n    e(4).eight()\n    dS(4).dottedEight()\n    b(3).dottedEight()\n    dS(4).eight()\n\n    dS(4).dottedEight()\n    cS(4).dottedEight()\n    b(3).quarter()\n    rest().quarter()\n\n    dS(4).quarter()\n    cS(4).quarter()\n    b(3).quarter()\n    rest().eight()\n    dS(4).eight()\n\n    cS(4).dottedEight()\n    b(3).dottedEight()\n    b(3).dottedQuarter()\n    rest().eight()\n    b(3).sixteenth()\n    cS(4).sixteenth()\n\n    dS(4).dottedEight()\n    dS(4).dottedEight()\n    e(4).eight()\n    dS(4).dottedEight()\n    b(3).dottedEight()\n    dS(4).eight()\n    dS(4).dottedEight()\n    cS(4).dottedEight()\n    b(3).eight()\n    b(3).quarter()\n}.export()\n\nrecord\u306e\u5f8c\u306bexport\u3059\u308b\u3053\u3068\u3067Music\u30af\u30e9\u30b9\u3092\u53d6\u5f97\u3067\u304d\u307e\u3059\u3002\nMusic\u30af\u30e9\u30b9\u306fNote\u306e\u30ea\u30b9\u30c8\u3092\u6301\u3063\u3066\u308b\u30c7\u30fc\u30bf\u30af\u30e9\u30b9\u3067\u3059\u3002\n\nSynthesizer\n\u697d\u8b5c\u304c\u3067\u304d\u305f\u3089\u305d\u3053\u304b\u3089\u97f3\u3092\u9cf4\u3089\u3057\u3066\u304f\u308c\u308b\u30af\u30e9\u30b9\u3092\u3064\u304f\u308a\u307e\u3057\u3087\u3046\u3002\nclass Synthesizer(private val audioTrack: AudioTrack,\n                  private val samplingRate: Int,\n                  private val bufferSize: Int) {\n\n    fun play(music: Music) {\n        music.notes.map { toSineWave(it) }\n\n        Thread {\n            audioTrack.play()\n            music.notes.map { toSineWave(it) }\n                    .forEach { audioTrack.write(it, 0, it.size) }\n            audioTrack.stop()\n        }.start()\n    }\n\n    private fun toSineWave(note: Note): ByteArray {\n        with(note) {\n            val noteLength = (bufferSize + length).toDouble()\n            val buffer = ByteArray(Math.ceil(noteLength).toInt()) { i ->\n                val wave = Math.sin( i / (samplingRate/frequency) * (Math.PI * 2) )\n                if (wave > 0.0) Byte.MAX_VALUE else Byte.MIN_VALUE\n            }\n            return buffer\n        }\n    }\n\n}\n\n\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u306f\u5192\u982d\u3067\u304b\u3044\u305fAudioTrack\u3068\u30b5\u30f3\u30d7\u30ea\u30f3\u30b0\u30ec\u30fc\u30c8\u3068\u30d0\u30c3\u30d5\u30a1\u30b5\u30a4\u30ba\u3067\u3059\u3002\n\n\u30b5\u30a4\u30f3\u6ce2\n\u97f3\u306f\u6ce2\u3067\u3059\u3002\ntoSineWave\u95a2\u6570\u306fNote\u30af\u30e9\u30b9\u304b\u3089\u30b5\u30a4\u30f3\u6ce2\u3092ByteArray\u306b\u3057\u305f\u3082\u306e\u3092\u8fd4\u3057\u3066\u304f\u308c\u307e\u3059\u3002\n\nAudioTrack\u3067\u518d\u751f\n\u307e\u305aNote\u30ea\u30b9\u30c8(List<Note>)\u3092toSineWave\u3092\u3064\u304b\u3063\u3066\u3059\u3079\u3066ByteArray\u306e\u30ea\u30b9\u30c8(List<ByteArray>)\u306b\u3057\u307e\u3059\u3002\n\u305d\u3046\u3057\u305f\u3089\u3001forEach\u3067\u307e\u308f\u3057\u3066AudioTrack#write\u306bByteArray\u3092\u6e21\u3057\u3066\u3044\u304d\u307e\u3057\u3087\u3046\u3002\n\nGetWild\u306f\u3044\u3064\u3082\u305d\u3070\u306b\n\u306f\u3044\u3001\u3053\u308c\u3067\u3042\u306a\u305f\u306f\u3044\u3064\u3067\u3082Android\u3067GetWild\u3092\u8074\u304f\u3053\u3068\u304c\u51fa\u6765\u307e\u3059\u3002\nGitHub\u306b\u3082\u3042\u3052\u3066\u3044\u307e\u3059\u306e\u3067\u3001\u3088\u308a\u8a73\u7d30\u306b\u30b3\u30fc\u30c9\u3092\u307f\u305f\u3044\u3072\u3068\u306f\u305d\u3061\u3089\u3092\u3054\u3089\u3093\u304f\u3060\u305b\u3044\u3002\nGetWildroid\n\u4ed5\u4e8b\u4e2d\u3069\u3046\u3057\u3066\u3082GET WILD\u304c\u8074\u304d\u305f\u304f\u306a\u308b\u3053\u3068\u3068\u3044\u3046\u306e\u306f\u3088\u304f\u3042\u308b\u3068\u601d\u3044\u307e\u3059\u3002\n\u305f\u3068\u3048\u3070\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u72b6\u6cc1\u3002\n\n- \u30db\u30ef\u30a4\u30c8\u30dc\u30fc\u30c9\u306b\uff62XYZ\uff63\u3068\u66f8\u304b\u308c\u3066\u3044\u305f\n- \u540c\u50da\u304c\u5de8\u4f53\u306e\u30b5\u30f3\u30b0\u30e9\u30b9\u574a\u4e3b\n- \u3082\u3063\u3053\u308a\n\n\u3057\u304b\u3057GET WILD\u304c\u3044\u3064\u3067\u3082\u3042\u306a\u305f\u306e\u305d\u3070\u306b\u3042\u308b\u3068\u306f\u9650\u308a\u307e\u305b\u3093\u3002\n\u4eca\u56de\u306f\u305d\u3093\u306a\u3068\u304d\u306e\u305f\u3081\u306b\u3001Android\u3068Kotlin\u3092\u3064\u304b\u3063\u3066\u81ea\u3089GET WILD\u3092\u3059\u308b\u65b9\u6cd5\u3092\u63d0\u4f9b\u3057\u307e\u3059\u3002\n\n# AudioTrack\n\u97f3\u6e90\u304c\u306a\u3044\u306e\u3067\u3042\u308c\u3070\u3001\u81ea\u5206\u3067\u6f14\u594f\u3059\u308c\u3070\u826f\u3044\u308f\u3051\u3067\u3059\u3002\nAndroid\u306b\u306fAudioTrack\u3068\u3044\u3046\u97f3\u3092\u518d\u751f\u3067\u304d\u308bAPI\u304c\u63d0\u4f9b\u3055\u308c\u3066\u3044\u308b\u306e\u3067\u3053\u3044\u3064\u3092\u4f7f\u3063\u3066GET WILD\u3057\u307e\u3057\u3087\u3046\u3002\n\n# Key\n\u307e\u305a\u306fKey\u3092\u5b9a\u7fa9\u3057\u307e\u3057\u3087\u3046\u3002\n\n```kotlin\nenum class Key(val freq: Float) {\n    C(16.35f),\n    C_SHARP(17.32f),\n    D(18.35f),\n    D_SHARP(19.45f),\n    E(20.6f),\n    F(21.83f),\n    F_SHARP(23.12f),\n    G(24.5f),\n    G_SHARP(25.96f),\n    A(27.5f),\n    A_SHARP(29.14f),\n    B(30.87f);\n}\n```\n\nenum\u3068\u3057\u3066\u4ee5\u4e0b\u3092\u5b9a\u7fa9\u3057\u307e\u3057\u305f\u3002\n\u305d\u308c\u305e\u308c\u306b\u4e00\u756a\u4f4e\u3044\u30aa\u30af\u30bf\u30fc\u30d6\u306e\u5468\u6ce2\u6570\u3082\u6301\u305f\u305b\u3066\u3044\u307e\u3059\u3002\n\n- C\n- C#\n- D\n- D#\n- E\n- F\n- F#\n- G\n- G#\n- A\n- A#\n- B\n\n# Note Length\n\u3064\u304e\u306b\u97f3\u306e\u9577\u3055\u3067\u3059\u3002\n\n```kotlin\nenum class NoteLength(val length: Float) {\n    NOTE_1(1f),\n    NOTE_2_DOTTED(0.75f),\n    NOTE_2(0.5f),\n    NOTE_4_DOTTED(0.375f),\n    NOTE_4(0.25f),\n    NOTE_8_DOTTED(0.1875f),\n    NOTE_8(0.125f),\n    NOTE_16_DOTTED(0.09375f),\n    NOTE_16(0.0625f);\n}\n```\n\n\u3053\u308c\u3082enum\u3068\u3057\u3066\u5b9a\u7fa9\u3057\u307e\u3057\u305f\u3002\n\u3068\u308a\u3042\u3048\u305a\u306f\u4ee5\u4e0b\u306e\u307f\u3092\u5b9a\u7fa9\u3057\u307e\u3057\u305f\u3002\n\u305d\u308c\u305e\u308c\u306b\u4e00\u5c0f\u7bc0\u3042\u305f\u308a\u306e\u9577\u3055\u3092Float\u3068\u3057\u3066\u6301\u305f\u305b\u3066\u3044\u307e\u3059\u3002\n\n- \u5168\u97f3\u7b26\n- \u4ed8\u70b92\u5206\u97f3\u7b26\n- 2\u5206\u97f3\u7b26\n- \u4ed8\u70b94\u5206\u97f3\u7b26\n- 4\u5206\u97f3\u7b26\n- \u4ed8\u70b98\u5206\u97f3\u7b26\n- 8\u5206\u97f3\u7b26\n- \u4ed8\u70b916\u5206\u97f3\u7b26\n- 16\u5206\u97f3\u7b26\n\n# Note\n\u97f3\u7a0b\u3068\u97f3\u306e\u9577\u3055\u3092\u5b9a\u7fa9\u3067\u304d\u307e\u3057\u305f\u3002\u3064\u304e\u306fNote\u3092\u3064\u304f\u308a\u307e\u3059\u3002\n\u97f3\u7b26\u3068\u4f11\u7b26\u306e\u30b9\u30fc\u30d1\u30fc\u30af\u30e9\u30b9\u3068\u306a\u308b\u62bd\u8c61\u30af\u30e9\u30b9\u3068\u3057\u3066Note\u3092\u5b9a\u7fa9\u3057\u307e\u3057\u305f\u3002\n\n```\nabstract class Note {\n    abstract val frequency: Float\n    abstract val length: Float\n}\n```\n\n## MusicalNote\n\u6b21\u306b\u97f3\u7b26\u3068\u3057\u3066MusicalNote\u3092\u5b9a\u7fa9\u3057\u307e\u3057\u305f\u3002\nMusicalNote\u306f\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u3067\u5148\u7a0b\u5b9a\u7fa9\u3057\u305fKey\u3068NoteLength\u3001\u30aa\u30af\u30bf\u30fc\u30d6\u3092\u53d7\u3051\u53d6\u308a\u307e\u3059\u3002\n\u30d7\u30ed\u30d1\u30c6\u30a3\u306e`frequency`\u306f `Key.freq * (2^octave)`\u3092\u8fd4\u3057\u307e\u3059\u3002\u3053\u308c\u304c\u305d\u306e\u97f3\u7b26\u306e\u5468\u6ce2\u6570\u3067\u3059\u3002\n\n```kotlin\nopen class MusicalNote(private val key: Key,\n                       private val octave: Int,\n                       private val noteLength: NoteLength): Note() {\n                       \n    override val frequency: Float\n        get() = key.freq * Math.pow(2.0, octave.toDouble()).toFloat()\n\n    override val length: Float\n        get() = noteLength.length\n}\n```\n\n## RestNote\n\u6b21\u306b\u4f11\u7b26\u3068\u3057\u3066RestNote\u3092\u5b9a\u7fa9\u3057\u307e\u3057\u305f\u3002\n\u4f11\u7b26\u306f\u97f3\u3092\u6301\u305f\u306a\u3044\u306e\u3067\u30d7\u30ed\u30d1\u30c6\u30a3`frequency`\u306f`0`\u3092\u8fd4\u3057\u307e\u3059\u3002\n\n```kotlin\nclass RestNote(private val noteLength: NoteLength): Note() {\n\n    override val frequency: Float\n        get() = 0f\n        \n    override val length: Float\n        get() = noteLength.length\n}\n```\n\n# \u697d\u8b5c\u3092\u4f5c\u308d\u3046\n\u3055\u3066\u3001Note\u3092\u4e00\u901a\u308a\u5b9f\u88c5\u3067\u304d\u305f\u306e\u3067\u3055\u3063\u305d\u304f\u697d\u8b5c\u3092\u3064\u304f\u308a\u307e\u3057\u3087\u3046\u3002\n\u4eca\u56de\u306fGET WILD\u306e\u697d\u8b5c\u3092\u3064\u304f\u308b\u308f\u3051\u3067\u3059\u304c\u3001\u305f\u304b\u304c\u77f3\u3053\u308d\u4e00\u3064\u30ac\u30f3\u30c0\u30e0\u3067\u62bc\u3057\u8fd4\u3057\u3066\u3084\u308b\u3068\u304d\u306b\u306fBeyond The Time\u3092\u8074\u304d\u305f\u304f\u306a\u308b\u3053\u3068\u3082\u3042\u308b\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u3002\u697d\u8b5c\u306f\u66f8\u304d\u3084\u3059\u304f\u8aad\u307f\u3084\u3059\u3044\u65b9\u304c\u3044\u3044\u3067\u3059\u3088\u306d?\n\u3068\u3044\u3046\u3053\u3068\u3067\u3001`Recorder`\u30af\u30e9\u30b9\u3092\u3064\u304f\u308a\u307e\u3059\u3002\n\n```kotlin\nclass Recorder {\n    private val notes = arrayListOf<Note>()\n\n    fun c(octave: Int) = MusicalNoteBuilder(Key.C, octave, notes)\n    fun cS(octave: Int) = MusicalNoteBuilder(Key.C_SHARP, octave, notes)\n    fun d(octave: Int) = MusicalNoteBuilder(Key.D, octave, notes)\n    fun dS(octave: Int) = MusicalNoteBuilder(Key.D_SHARP, octave, notes)\n    fun e(octave: Int) = MusicalNoteBuilder(Key.E, octave, notes)\n    fun f(octave: Int) = MusicalNoteBuilder(Key.F, octave, notes)\n    fun fS(octave: Int) = MusicalNoteBuilder(Key.F_SHARP, octave, notes)\n    fun g(octave: Int) = MusicalNoteBuilder(Key.G_SHARP, octave, notes)\n    fun gS(octave: Int) = MusicalNoteBuilder(Key.G, octave, notes)\n    fun a(octave: Int) = MusicalNoteBuilder(Key.A, octave, notes)\n    fun aS(octave: Int) = MusicalNoteBuilder(Key.A_SHARP, octave, notes)\n    fun b(octave: Int) = MusicalNoteBuilder(Key.B, octave, notes)\n    fun rest() = RestNoteBuilder(notes)\n\n    fun record(block: Recorder.()->Unit) = apply(block)\n    fun export() = Music(notes)\n\n\n    abstract class NoteBuilder(protected val notes: ArrayList<Note>) {\n        fun whole() = newNote(NoteLength.NOTE_1)\n        fun dottedHalf() = newNote(NoteLength.NOTE_2_DOTTED)\n        fun half() = newNote(NoteLength.NOTE_2)\n        fun dottedQuarter() = newNote(NoteLength.NOTE_4_DOTTED)\n        fun quarter() = newNote(NoteLength.NOTE_4)\n        fun dottedEight() = newNote(NoteLength.NOTE_8_DOTTED)\n        fun eight() = newNote(NoteLength.NOTE_8)\n        fun dottedSixteenth() = newNote(NoteLength.NOTE_16_DOTTED)\n        fun sixteenth() = newNote(NoteLength.NOTE_16)\n\n        abstract protected fun newNote(length: NoteLength)\n    }\n\n    class MusicalNoteBuilder(private val key: Key,\n                             private val octave: Int,\n                             notes: ArrayList<Note>): NoteBuilder(notes) {\n\n        override fun newNote(length: NoteLength) {\n            notes.add(MusicalNote(key, octave, length))\n        }\n    }\n\n    class RestNoteBuilder(notes: ArrayList<Note>): NoteBuilder(notes) {\n\n        override fun newNote(length: NoteLength) {\n            notes.add(RestNote(length))\n        }\n    }\n}\n```\n\n`Recorder`\u306b\u306f\u5404Key\u3092\u540d\u524d\u3068\u3057\u305f\u95a2\u6570\u3092\u5b9f\u88c5\u3057\u307e\u3057\u305f\u3002\u5f15\u6570\u306f\u30aa\u30af\u30bf\u30fc\u30d6\u6570\u3067\u3059\u3002\u3053\u306e\u95a2\u6570\u306fMusicalNoteBuilder\u3092\u8fd4\u3057\u307e\u3059\u3002\n\u3053\u3044\u3064\u306b\u306f\u97f3\u306e\u9577\u3055\u3092\u540d\u524d\u3068\u3057\u305f\u95a2\u6570\u304c\u5b9f\u88c5\u3055\u308c\u3066\u3044\u307e\u3059\u3002\n\n## record\u95a2\u6570\nrecord\u95a2\u6570\u306f\u9ad8\u968e\u95a2\u6570\u306b\u306a\u3063\u3066\u3044\u3066\u3001\u5f15\u6570\u306f`Recorder\u306e\u62e1\u5f35\u95a2\u6570`\u3067\u3059\u3002\n\u3064\u307e\u308a\u3001record\u95a2\u6570\u306b\u6e21\u3059\u95a2\u6570\u306fRecorder\u306e\u4e00\u90e8\u3068\u306a\u308b\u306e\u3067\u3001\u305d\u306e\u95a2\u6570\u306e\u306a\u304b\u3067\u306f`this`\u30ad\u30fc\u30ef\u30fc\u30c9\u304cRecorder\u3068\u4e00\u81f4\u3057\u307e\u3059\u3002\n\n\u5b9f\u969b\u306b\u4f7f\u3063\u3066\u307f\u307e\u3057\u3087\u3046\u3002\n\n```kotlin\nRecorder().record {\n    dS(4).quarter()\n    cS(4).quarter()\n    b(3).quarter()\n    rest().eight()\n    dS(4).eight()\n\n    cS(4).dottedEight()\n    b(3).dottedEight()\n    b(3).dottedQuarter()\n    rest().eight()\n    b(3).sixteenth()\n    cS(4).sixteenth()\n\n    dS(4).dottedEight()\n    dS(4).dottedEight()\n    e(4).eight()\n    dS(4).dottedEight()\n    b(3).dottedEight()\n    dS(4).eight()\n\n    dS(4).dottedEight()\n    cS(4).dottedEight()\n    b(3).quarter()\n    rest().quarter()\n\n    dS(4).quarter()\n    cS(4).quarter()\n    b(3).quarter()\n    rest().eight()\n    dS(4).eight()\n\n    cS(4).dottedEight()\n    b(3).dottedEight()\n    b(3).dottedQuarter()\n    rest().eight()\n    b(3).sixteenth()\n    cS(4).sixteenth()\n\n    dS(4).dottedEight()\n    dS(4).dottedEight()\n    e(4).eight()\n    dS(4).dottedEight()\n    b(3).dottedEight()\n    dS(4).eight()\n    dS(4).dottedEight()\n    cS(4).dottedEight()\n    b(3).eight()\n    b(3).quarter()\n}.export()\n```\n\nrecord\u306e\u5f8c\u306bexport\u3059\u308b\u3053\u3068\u3067Music\u30af\u30e9\u30b9\u3092\u53d6\u5f97\u3067\u304d\u307e\u3059\u3002\nMusic\u30af\u30e9\u30b9\u306fNote\u306e\u30ea\u30b9\u30c8\u3092\u6301\u3063\u3066\u308b\u30c7\u30fc\u30bf\u30af\u30e9\u30b9\u3067\u3059\u3002\n\n# Synthesizer\n\u697d\u8b5c\u304c\u3067\u304d\u305f\u3089\u305d\u3053\u304b\u3089\u97f3\u3092\u9cf4\u3089\u3057\u3066\u304f\u308c\u308b\u30af\u30e9\u30b9\u3092\u3064\u304f\u308a\u307e\u3057\u3087\u3046\u3002\n\n```kotlin\nclass Synthesizer(private val audioTrack: AudioTrack,\n                  private val samplingRate: Int,\n                  private val bufferSize: Int) {\n\n    fun play(music: Music) {\n        music.notes.map { toSineWave(it) }\n\n        Thread {\n            audioTrack.play()\n            music.notes.map { toSineWave(it) }\n                    .forEach { audioTrack.write(it, 0, it.size) }\n            audioTrack.stop()\n        }.start()\n    }\n\n    private fun toSineWave(note: Note): ByteArray {\n        with(note) {\n            val noteLength = (bufferSize + length).toDouble()\n            val buffer = ByteArray(Math.ceil(noteLength).toInt()) { i ->\n                val wave = Math.sin( i / (samplingRate/frequency) * (Math.PI * 2) )\n                if (wave > 0.0) Byte.MAX_VALUE else Byte.MIN_VALUE\n            }\n            return buffer\n        }\n    }\n\n}\n```\n\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u306f\u5192\u982d\u3067\u304b\u3044\u305fAudioTrack\u3068\u30b5\u30f3\u30d7\u30ea\u30f3\u30b0\u30ec\u30fc\u30c8\u3068\u30d0\u30c3\u30d5\u30a1\u30b5\u30a4\u30ba\u3067\u3059\u3002\n\n## \u30b5\u30a4\u30f3\u6ce2\n\u97f3\u306f\u6ce2\u3067\u3059\u3002\n`toSineWave`\u95a2\u6570\u306fNote\u30af\u30e9\u30b9\u304b\u3089\u30b5\u30a4\u30f3\u6ce2\u3092ByteArray\u306b\u3057\u305f\u3082\u306e\u3092\u8fd4\u3057\u3066\u304f\u308c\u307e\u3059\u3002\n\n## AudioTrack\u3067\u518d\u751f\n\u307e\u305aNote\u30ea\u30b9\u30c8(`List<Note>`)\u3092`toSineWave`\u3092\u3064\u304b\u3063\u3066\u3059\u3079\u3066ByteArray\u306e\u30ea\u30b9\u30c8(`List<ByteArray>`)\u306b\u3057\u307e\u3059\u3002\n\u305d\u3046\u3057\u305f\u3089\u3001forEach\u3067\u307e\u308f\u3057\u3066`AudioTrack#write`\u306bByteArray\u3092\u6e21\u3057\u3066\u3044\u304d\u307e\u3057\u3087\u3046\u3002\n\n# GetWild\u306f\u3044\u3064\u3082\u305d\u3070\u306b\n\u306f\u3044\u3001\u3053\u308c\u3067\u3042\u306a\u305f\u306f\u3044\u3064\u3067\u3082Android\u3067GetWild\u3092\u8074\u304f\u3053\u3068\u304c\u51fa\u6765\u307e\u3059\u3002\nGitHub\u306b\u3082\u3042\u3052\u3066\u3044\u307e\u3059\u306e\u3067\u3001\u3088\u308a\u8a73\u7d30\u306b\u30b3\u30fc\u30c9\u3092\u307f\u305f\u3044\u3072\u3068\u306f\u305d\u3061\u3089\u3092\u3054\u3089\u3093\u304f\u3060\u305b\u3044\u3002\n[GetWildroid](https://github.com/lVlA/GetWildroid)\n", "tags": ["GetWild", "Android", "Kotlin"]}