{"context": "\n\nGrid search \u3068\u306f\nscikit learn\u306b\u306f\u30b0\u30ea\u30c3\u30c9\u30b5\u30fc\u30c1\u306a\u308b\u6a5f\u80fd\u304c\u3042\u308b\u3002\u6a5f\u68b0\u5b66\u7fd2\u30e2\u30c7\u30eb\u306e\u30cf\u30a4\u30d1\u30fc\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u81ea\u52d5\u7684\u306b\u6700\u9069\u5316\u3057\u3066\u304f\u308c\u308b\u3068\u3044\u3046\u3042\u308a\u304c\u305f\u3044\u6a5f\u80fd\u3002\u4f8b\u3048\u3070\u3001SVM\u306a\u3089C\u3084\u3001kernel\u3084gamma\u3068\u304b\u3002Scikit-learn\u306e\u30e6\u30fc\u30b6\u30fc\u30ac\u30a4\u30c9\u3088\u308a\u3001\u4eca\u56de\u53c2\u8003\u306b\u3057\u305f\u306e\u306f\u3053\u3061\u3089\u3002\n\n3.2.Parameter estimation using grid search with cross-validation\nExample:Parameter estimation using grid search with cross-validation\n\n\n\u3084\u3063\u305f\u3053\u3068\n\n\u624b\u66f8\u304d\u6570\u5b57(0~9)\u306e\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8digits\u3092SVM\u3067\u5206\u985e\n\nGridSearchCV\u3092\u4f7f\u3063\u3066\u3001\u4ea4\u5dee\u691c\u5b9a\u3067\u30cf\u30a4\u30d1\u30fc\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u6700\u9069\u5316\n\u6700\u9069\u5316\u6642\u306e\u30e2\u30c7\u30eb\u306e\u8a55\u4fa1\u95a2\u6570\u306b\u306ff1\u3092\u4f7f\u7528\n\n\n\u30c7\u30fc\u30bf\u306e\u6e96\u5099\n\u624b\u66f8\u304d\u6570\u5b57\u306edigits\u3092\u30a4\u30f3\u30dd\u30fc\u30c8\u3002\nfrom sklearn import datasets\nfrom sklearn.cross_validation import train_test_split\nfrom sklearn.grid_search import GridSearchCV\nfrom sklearn.metrics import classification_report\nfrom sklearn.svm import SVC\n\ndigits = datasets.load_digits()\nn_samples = len(digits.images) # \u6a19\u672c\u6570 1797\u500b\nX = digits.images.reshape((n_samples, -1)) # 8x8\u306e\u914d\u5217\u304b\u308964\u6b21\u5143\u306e\u30d9\u30af\u30c8\u30eb\u306b\u5909\u63db\ny = digits.target # \u6b63\u89e3\u30e9\u30d9\u30eb\n\ntrain_test_split\u3067\u3001\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u3092\u30c8\u30ec\u30fc\u30cb\u30f3\u30b0\u7528\u3068\u30c6\u30b9\u30c8\u7528\u306b2\u5206\u5272\u3002\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.5, random_state=0)\nprint(X.shape)\n>>> (1797, 64)\nprint(X_train.shape)\n>>> (898, 64)\nprint(X_test.shape)\n>>> (899, 64)\n\n\n\u6700\u9069\u5316\u3057\u305f\u3044\u30d1\u30e9\u30e1\u30fc\u30bf\u306e\u8a2d\u5b9a\n\u6b21\u306b\u3001\u6700\u9069\u5316\u3057\u305f\u3044\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u30ea\u30b9\u30c8\u3067\u5b9a\u7fa9\u3002\u4f8b\u984c\u306e\u3082\u306e\u306b\u52a0\u3048\u3066\u3001poly\u3068sigmoid\u306ekernel\u3092\u8ffd\u52a0\u3002\ntuned_parameters = [\n    {'C': [1, 10, 100, 1000], 'kernel': ['linear']},\n    {'C': [1, 10, 100, 1000], 'kernel': ['rbf'], 'gamma': [0.001, 0.0001]},\n    {'C': [1, 10, 100, 1000], 'kernel': ['poly'], 'degree': [2, 3, 4], 'gamma': [0.001, 0.0001]},\n    {'C': [1, 10, 100, 1000], 'kernel': ['sigmoid'], 'gamma': [0.001, 0.0001]}\n    ]\n\n\n\u6700\u9069\u5316\u306e\u5b9f\u884c\nGridSearchCV\u3092\u4f7f\u3063\u3066\u3001\u4e0a\u3067\u5b9a\u7fa9\u3057\u305f\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u6700\u9069\u5316\u3002\u6307\u5b9a\u3057\u305f\u5909\u6570\u306f\u3001\u4f7f\u7528\u3059\u308b\u30e2\u30c7\u30eb\u3001\u6700\u9069\u5316\u3057\u305f\u3044\u30d1\u30e9\u30e1\u30fc\u30bf\u30bb\u30c3\u30c8\u3001\u4ea4\u5dee\u691c\u5b9a\u306e\u56de\u6570\u3001\u30e2\u30c7\u30eb\u306e\u8a55\u4fa1\u5024\u306e\uff14\u3064\u3002\u8a55\u4fa1\u5024\u306ff1\u3068\u3057\u305f\u3002precision\u3084recall\u3067\u3082OK\u3002\u8a73\u3057\u304f\u306f\u3053\u3061\u3089\u3002\nscore = 'f1'\nclf = GridSearchCV(\n    SVC(), # \u8b58\u5225\u5668\n    tuned_parameters, # \u6700\u9069\u5316\u3057\u305f\u3044\u30d1\u30e9\u30e1\u30fc\u30bf\u30bb\u30c3\u30c8 \n    cv=5, # \u4ea4\u5dee\u691c\u5b9a\u306e\u56de\u6570\n    scoring='%s_weighted' % score ) # \u30e2\u30c7\u30eb\u306e\u8a55\u4fa1\u95a2\u6570\u306e\u6307\u5b9a\n\n\u30c8\u30ec\u30fc\u30cb\u30f3\u30b0\u7528\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u306e\u307f\u3092\u4f7f\u3044\u3001\u6700\u9069\u5316\u3092\u5b9f\u884c\u3002\u30d1\u30e9\u30e1\u30fc\u30bf\u30bb\u30c3\u30c8\u306a\u3069\u304c\u8868\u793a\u3055\u308c\u308b\u3002\nclf.fit(X_train, y_train) \n>>> GridSearchCV(cv=5, error_score='raise',\n>>>       estimator=SVC(C=1.0, cache_size=200, class_weight=None, coef0=0.0,\n>>>  decision_function_shape=None, degree=3, gamma='auto', kernel='rbf',\n>>>  max_iter=-1, probability=False, random_state=None, shrinking=True,\n>>>  tol=0.001, verbose=False),\n>>>       fit_params={}, iid=True, n_jobs=1,\n>>>       param_grid=[{'kernel': ['linear'], 'C': [1, 10, 100, 1000]}, {'kernel': ['rbf'], 'C': [1, 10, 100, 1000], 'gamma': [0.001, 0.0001]}, {'kernel': ['poly'], 'C': [1, 10, 100, 1000], 'gamma': [0.001, 0.0001], 'degree': [2, 3, 4]}, {'kernel': ['sigmoid'], 'C': [1, 10, 100, 1000], 'gamma': [0.001, 0.0001]}],\n       pre_dispatch='2*n_jobs', refit=True, scoring='f1_weighted',\n       verbose=0)\n\n\n\u7d50\u679c\u306e\u8868\u793a\nclf.grid_scores_\u3067\u5404\u8a66\u884c\u3067\u306e\u30b9\u30b3\u30a2\u3092\u78ba\u8a8d\u3067\u304d\u308b\u3002\nclf.grid_scores_\n>>> [mean: 0.97311, std: 0.00741, params: {'kernel': 'linear', 'C': 1},\n>>> mean: 0.97311, std: 0.00741, params: {'kernel': 'linear', 'C': 10},\n>>> mean: 0.97311, std: 0.00741, params: {'kernel': 'linear', 'C': 100}, \n>>> ...\n>>>  mean: 0.96741, std: 0.00457, params: {'kernel': 'sigmoid', 'C': 1000, 'gamma': 0.0001}]\n\nclf.best_params_\u3067\u6700\u9069\u5316\u3057\u305f\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u78ba\u8a8d\u3067\u304d\u308b\u3002\nclf.best_params_\n{'C': 10, 'gamma': 0.001, 'kernel': 'rbf'}\n\n\u5404\u8a66\u884c\u306e\u30b9\u30b3\u30a2\u3092\u30c6\u30ad\u30b9\u30c8\u3067\u3001\u6700\u9069\u5316\u3057\u305f\u30d1\u30e9\u30e1\u30fc\u30bf\u3067\u306e\u7cbe\u5ea6\u3092\u30c6\u30fc\u30d6\u30eb\u3067\u8868\u793a\u3002\nprint(\"# Tuning hyper-parameters for %s\" % score)\nprint()\nprint(\"Best parameters set found on development set: %s\" % clf.best_params_)\nprint()\n\n# \u305d\u308c\u305e\u308c\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u3067\u306e\u8a66\u884c\u7d50\u679c\u306e\u8868\u793a\nprint(\"Grid scores on development set:\")\nprint()\nfor params, mean_score, scores in clf.grid_scores_:\n    print(\"%0.3f (+/-%0.03f) for %r\"\n          % (mean_score, scores.std() * 2, params))\nprint()\n\n# \u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u3067\u306e\u5206\u985e\u7cbe\u5ea6\u3092\u8868\u793a\nprint(\"The scores are computed on the full evaluation set.\")\nprint()\ny_true, y_pred = y_test, clf.predict(X_test)\nprint(classification_report(y_true, y_pred))\n\n\u3053\u3093\u306a\u3075\u3046\u306b\u51fa\u529b\u3055\u308c\u307e\u3059\u3002\n# Tuning hyper-parameters for f1\n\nBest parameters set found on development set: {'kernel': 'rbf', 'C': 10, 'gamma': 0.001}\n\nGrid scores on development set:\n\n0.973 (+/-0.015) for {'kernel': 'linear', 'C': 1}\n0.973 (+/-0.015) for {'kernel': 'linear', 'C': 10}\n0.973 (+/-0.015) for {'kernel': 'linear', 'C': 100}\n\n [\u9577\u3044\u306e\u3067\u4e2d\u7565]\n\n0.967 (+/-0.009) for {'kernel': 'sigmoid', 'C': 1000, 'gamma': 0.0001}\n\nThe scores are computed on the full evaluation set.\n\n             precision    recall  f1-score   support\n\n          0       1.00      1.00      1.00        89\n          1       0.97      1.00      0.98        90\n          2       0.99      0.98      0.98        92\n          3       1.00      0.99      0.99        93\n          4       1.00      1.00      1.00        76\n          5       0.99      0.98      0.99       108\n          6       0.99      1.00      0.99        89\n          7       0.99      1.00      0.99        78\n          8       1.00      0.98      0.99        92\n          9       0.99      0.99      0.99        92\n\navg / total       0.99      0.99      0.99       899\n\n# Grid search \u3068\u306f\nscikit learn\u306b\u306f\u30b0\u30ea\u30c3\u30c9\u30b5\u30fc\u30c1\u306a\u308b\u6a5f\u80fd\u304c\u3042\u308b\u3002\u6a5f\u68b0\u5b66\u7fd2\u30e2\u30c7\u30eb\u306e\u30cf\u30a4\u30d1\u30fc\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u81ea\u52d5\u7684\u306b\u6700\u9069\u5316\u3057\u3066\u304f\u308c\u308b\u3068\u3044\u3046\u3042\u308a\u304c\u305f\u3044\u6a5f\u80fd\u3002\u4f8b\u3048\u3070\u3001SVM\u306a\u3089C\u3084\u3001kernel\u3084gamma\u3068\u304b\u3002[Scikit-learn\u306e\u30e6\u30fc\u30b6\u30fc\u30ac\u30a4\u30c9](http://scikit-learn.org/stable/user_guide.html)\u3088\u308a\u3001\u4eca\u56de\u53c2\u8003\u306b\u3057\u305f\u306e\u306f\u3053\u3061\u3089\u3002\n\n- [3.2.Parameter estimation using grid search with cross-validation](http://scikit-learn.org/stable/modules/grid_search.html)\n- [Example:Parameter estimation using grid search with cross-validation](http://scikit-learn.org/stable/auto_examples/model_selection/grid_search_digits.html#example-model-selection-grid-search-digits-py)\n\n# \u3084\u3063\u305f\u3053\u3068\n- \u624b\u66f8\u304d\u6570\u5b57(0~9)\u306e\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8digits\u3092SVM\u3067\u5206\u985e\n- [GridSearchCV](http://scikit-learn.org/stable/modules/generated/sklearn.grid_search.GridSearchCV.html#sklearn.grid_search.GridSearchCV)\u3092\u4f7f\u3063\u3066\u3001\u4ea4\u5dee\u691c\u5b9a\u3067\u30cf\u30a4\u30d1\u30fc\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u6700\u9069\u5316\n- \u6700\u9069\u5316\u6642\u306e\u30e2\u30c7\u30eb\u306e\u8a55\u4fa1\u95a2\u6570\u306b\u306f[f1](https://en.wikipedia.org/wiki/F1_score)\u3092\u4f7f\u7528\n\n\n# \u30c7\u30fc\u30bf\u306e\u6e96\u5099\n\u624b\u66f8\u304d\u6570\u5b57\u306edigits\u3092\u30a4\u30f3\u30dd\u30fc\u30c8\u3002\n\n```python\nfrom sklearn import datasets\nfrom sklearn.cross_validation import train_test_split\nfrom sklearn.grid_search import GridSearchCV\nfrom sklearn.metrics import classification_report\nfrom sklearn.svm import SVC\n\ndigits = datasets.load_digits()\nn_samples = len(digits.images) # \u6a19\u672c\u6570 1797\u500b\nX = digits.images.reshape((n_samples, -1)) # 8x8\u306e\u914d\u5217\u304b\u308964\u6b21\u5143\u306e\u30d9\u30af\u30c8\u30eb\u306b\u5909\u63db\ny = digits.target # \u6b63\u89e3\u30e9\u30d9\u30eb\n```\n\n[`train_test_split`](http://scikit-learn.org/stable/modules/generated/sklearn.cross_validation.train_test_split.html)\u3067\u3001\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u3092\u30c8\u30ec\u30fc\u30cb\u30f3\u30b0\u7528\u3068\u30c6\u30b9\u30c8\u7528\u306b2\u5206\u5272\u3002\n\n```\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.5, random_state=0)\nprint(X.shape)\n>>> (1797, 64)\nprint(X_train.shape)\n>>> (898, 64)\nprint(X_test.shape)\n>>> (899, 64)\n```\n\n# \u6700\u9069\u5316\u3057\u305f\u3044\u30d1\u30e9\u30e1\u30fc\u30bf\u306e\u8a2d\u5b9a\n\u6b21\u306b\u3001\u6700\u9069\u5316\u3057\u305f\u3044\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u30ea\u30b9\u30c8\u3067\u5b9a\u7fa9\u3002\u4f8b\u984c\u306e\u3082\u306e\u306b\u52a0\u3048\u3066\u3001poly\u3068sigmoid\u306ekernel\u3092\u8ffd\u52a0\u3002\n\n```python\ntuned_parameters = [\n    {'C': [1, 10, 100, 1000], 'kernel': ['linear']},\n    {'C': [1, 10, 100, 1000], 'kernel': ['rbf'], 'gamma': [0.001, 0.0001]},\n    {'C': [1, 10, 100, 1000], 'kernel': ['poly'], 'degree': [2, 3, 4], 'gamma': [0.001, 0.0001]},\n    {'C': [1, 10, 100, 1000], 'kernel': ['sigmoid'], 'gamma': [0.001, 0.0001]}\n    ]\n```\n\n# \u6700\u9069\u5316\u306e\u5b9f\u884c\n`GridSearchCV`\u3092\u4f7f\u3063\u3066\u3001\u4e0a\u3067\u5b9a\u7fa9\u3057\u305f\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u6700\u9069\u5316\u3002\u6307\u5b9a\u3057\u305f\u5909\u6570\u306f\u3001\u4f7f\u7528\u3059\u308b\u30e2\u30c7\u30eb\u3001\u6700\u9069\u5316\u3057\u305f\u3044\u30d1\u30e9\u30e1\u30fc\u30bf\u30bb\u30c3\u30c8\u3001\u4ea4\u5dee\u691c\u5b9a\u306e\u56de\u6570\u3001\u30e2\u30c7\u30eb\u306e\u8a55\u4fa1\u5024\u306e\uff14\u3064\u3002\u8a55\u4fa1\u5024\u306f`f1`\u3068\u3057\u305f\u3002`precision`\u3084`recall`\u3067\u3082OK\u3002\u8a73\u3057\u304f\u306f[\u3053\u3061\u3089](http://scikit-learn.org/stable/modules/model_evaluation.html#scoring-parameter)\u3002\n\n```python\nscore = 'f1'\nclf = GridSearchCV(\n    SVC(), # \u8b58\u5225\u5668\n    tuned_parameters, # \u6700\u9069\u5316\u3057\u305f\u3044\u30d1\u30e9\u30e1\u30fc\u30bf\u30bb\u30c3\u30c8 \n    cv=5, # \u4ea4\u5dee\u691c\u5b9a\u306e\u56de\u6570\n    scoring='%s_weighted' % score ) # \u30e2\u30c7\u30eb\u306e\u8a55\u4fa1\u95a2\u6570\u306e\u6307\u5b9a\n```\n\n\u30c8\u30ec\u30fc\u30cb\u30f3\u30b0\u7528\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u306e\u307f\u3092\u4f7f\u3044\u3001\u6700\u9069\u5316\u3092\u5b9f\u884c\u3002\u30d1\u30e9\u30e1\u30fc\u30bf\u30bb\u30c3\u30c8\u306a\u3069\u304c\u8868\u793a\u3055\u308c\u308b\u3002\n\n    clf.fit(X_train, y_train) \n    >>> GridSearchCV(cv=5, error_score='raise',\n    >>>       estimator=SVC(C=1.0, cache_size=200, class_weight=None, coef0=0.0,\n    >>>  decision_function_shape=None, degree=3, gamma='auto', kernel='rbf',\n    >>>  max_iter=-1, probability=False, random_state=None, shrinking=True,\n    >>>  tol=0.001, verbose=False),\n    >>>       fit_params={}, iid=True, n_jobs=1,\n    >>>       param_grid=[{'kernel': ['linear'], 'C': [1, 10, 100, 1000]}, {'kernel': ['rbf'], 'C': [1, 10, 100, 1000], 'gamma': [0.001, 0.0001]}, {'kernel': ['poly'], 'C': [1, 10, 100, 1000], 'gamma': [0.001, 0.0001], 'degree': [2, 3, 4]}, {'kernel': ['sigmoid'], 'C': [1, 10, 100, 1000], 'gamma': [0.001, 0.0001]}],\n           pre_dispatch='2*n_jobs', refit=True, scoring='f1_weighted',\n           verbose=0)\n\n\n#\u7d50\u679c\u306e\u8868\u793a\n`clf.grid_scores_`\u3067\u5404\u8a66\u884c\u3067\u306e\u30b9\u30b3\u30a2\u3092\u78ba\u8a8d\u3067\u304d\u308b\u3002\n\n```py\nclf.grid_scores_\n>>> [mean: 0.97311, std: 0.00741, params: {'kernel': 'linear', 'C': 1},\n>>> mean: 0.97311, std: 0.00741, params: {'kernel': 'linear', 'C': 10},\n>>> mean: 0.97311, std: 0.00741, params: {'kernel': 'linear', 'C': 100}, \n>>> ...\n>>>  mean: 0.96741, std: 0.00457, params: {'kernel': 'sigmoid', 'C': 1000, 'gamma': 0.0001}]\n```\n\n`clf.best_params_`\u3067\u6700\u9069\u5316\u3057\u305f\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u78ba\u8a8d\u3067\u304d\u308b\u3002\n\n```py\nclf.best_params_\n{'C': 10, 'gamma': 0.001, 'kernel': 'rbf'}\n```\n\n\u5404\u8a66\u884c\u306e\u30b9\u30b3\u30a2\u3092\u30c6\u30ad\u30b9\u30c8\u3067\u3001\u6700\u9069\u5316\u3057\u305f\u30d1\u30e9\u30e1\u30fc\u30bf\u3067\u306e\u7cbe\u5ea6\u3092\u30c6\u30fc\u30d6\u30eb\u3067\u8868\u793a\u3002\n\n```python\nprint(\"# Tuning hyper-parameters for %s\" % score)\nprint()\nprint(\"Best parameters set found on development set: %s\" % clf.best_params_)\nprint()\n\n# \u305d\u308c\u305e\u308c\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u3067\u306e\u8a66\u884c\u7d50\u679c\u306e\u8868\u793a\nprint(\"Grid scores on development set:\")\nprint()\nfor params, mean_score, scores in clf.grid_scores_:\n    print(\"%0.3f (+/-%0.03f) for %r\"\n          % (mean_score, scores.std() * 2, params))\nprint()\n\n# \u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u3067\u306e\u5206\u985e\u7cbe\u5ea6\u3092\u8868\u793a\nprint(\"The scores are computed on the full evaluation set.\")\nprint()\ny_true, y_pred = y_test, clf.predict(X_test)\nprint(classification_report(y_true, y_pred))\n```\n\n\u3053\u3093\u306a\u3075\u3046\u306b\u51fa\u529b\u3055\u308c\u307e\u3059\u3002\n\n```\n# Tuning hyper-parameters for f1\n\nBest parameters set found on development set: {'kernel': 'rbf', 'C': 10, 'gamma': 0.001}\n\nGrid scores on development set:\n\n0.973 (+/-0.015) for {'kernel': 'linear', 'C': 1}\n0.973 (+/-0.015) for {'kernel': 'linear', 'C': 10}\n0.973 (+/-0.015) for {'kernel': 'linear', 'C': 100}\n\n [\u9577\u3044\u306e\u3067\u4e2d\u7565]\n\n0.967 (+/-0.009) for {'kernel': 'sigmoid', 'C': 1000, 'gamma': 0.0001}\n\nThe scores are computed on the full evaluation set.\n\n             precision    recall  f1-score   support\n\n          0       1.00      1.00      1.00        89\n          1       0.97      1.00      0.98        90\n          2       0.99      0.98      0.98        92\n          3       1.00      0.99      0.99        93\n          4       1.00      1.00      1.00        76\n          5       0.99      0.98      0.99       108\n          6       0.99      1.00      0.99        89\n          7       0.99      1.00      0.99        78\n          8       1.00      0.98      0.99        92\n          9       0.99      0.99      0.99        92\n\navg / total       0.99      0.99      0.99       899\n```\n", "tags": ["Python", "scikit-learn", "MachineLearning", "\u6a5f\u68b0\u5b66\u7fd2"]}