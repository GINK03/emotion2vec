{"context": "\u4ee5\u524d\u3001Objective-C \u3067\u306e Unit Test \u3092\u7d39\u4ecb\u3057\u307e\u3057\u305f\u304c\u3001\u4eca\u56de\u306f OCMock \u3068\u3044\u3046\u30e2\u30c3\u30af\u30e9\u30a4\u30d6\u30e9\u30ea\u306e\u4f7f\u3044\u65b9\u3092\u7d39\u4ecb\u3057\u307e\u3059\u3002\n\nMock \u3068\u306f\n\u30e2\u30c3\u30af\u3092\u4f7f\u3046\u76ee\u7684\u306f\u5927\u304d\u304f\u4ee5\u4e0b\u306e\u3082\u306e\u306b\u306a\u308b\u304b\u3068\u601d\u3044\u307e\u3059\u3002\n\n\u307e\u3060\u5b8c\u6210\u3057\u3066\u3044\u306a\u3044\u30af\u30e9\u30b9\u3092\u4ee3\u7528\u3059\u308b\u3002\n\u30b7\u30b9\u30c6\u30e0\u65e5\u6642\u306a\u3069\u90fd\u5ea6\u90fd\u5ea6\u5024\u304c\u5909\u5316\u3059\u308b\u3082\u306e\u3092\u56fa\u5b9a\u306b\u3059\u308b\u3002\n\u30c6\u30b9\u30c8\u5bfe\u8c61\u304b\u3089\u5225\u306a\u30af\u30e9\u30b9\u306e\u30e1\u30bd\u30c3\u30c9\u304c\u547c\u3070\u308c\u3066\u3044\u308b\u304b\u78ba\u8a8d\u3059\u308b\u3002\n\u30a8\u30e9\u30fc\u3092\u767a\u751f\u3055\u305b\u308b\u3053\u3068\u304c\u56f0\u96e3\u306a\u5834\u5408\u3001\u3053\u306e\u30a8\u30e9\u30fc\u3092\u64ec\u4f3c\u7684\u306b\u767a\u751f\u3055\u305b\u308b\u3002\n\n\n\u5c0e\u5165\nCocoaPods \u304b\u3089\u5c0e\u5165\u3057\u307e\u3059\u3002\n\u30e1\u30a4\u30f3\u306e\u30bf\u30fc\u30b2\u30c3\u30c8\u306b\u306f\u542b\u3081\u305a\u3001\u30c6\u30b9\u30c8\u7528\u306e\u30bf\u30fc\u30b2\u30c3\u30c8\u306b\u542b\u3081\u307e\u3059\u3002\n\nPodfile\n# Uncomment this line to define a global platform for your project\n# platform :ios, '9.0'\n\ntarget 'sample' do\n  # Uncomment this line if you're using Swift or would like to use dynamic frameworks\n  # use_frameworks!\n\n  # Pods for sample\n\n  target 'sampleTests' do\n    inherit! :search_paths\n    # Pods for testing\n    pod 'OCMock'\n  end\n\n  target 'sampleUITests' do\n    inherit! :search_paths\n    # Pods for testing\n    pod 'OCMock'\n  end\n\nend\n\n\n\n\u4f7f\u3044\u65b9\n\u3053\u306e\u3088\u3046\u306b OCMock \u3092\u30a4\u30f3\u30dd\u30fc\u30c8\u3057\u307e\u3059\u3002\n\nsampleTests.m\n#import <OCMock/OCMock.h>\n\n\n\n\u30e2\u30c3\u30af\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u4f5c\u6210\n\n\u30af\u30e9\u30b9\n\u30af\u30e9\u30b9\u30e1\u30bd\u30c3\u30c9\u3092\u5dee\u3057\u66ff\u3048\u5bfe\u8c61\u3068\u3059\u308b\u5834\u5408\u306b\u4f7f\u7528\u3057\u307e\u3059\u3002\n\nsampleTests.m\n    id sampleMock = OCMClassMock([SampleClass class]);\n\n\n\n\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\n\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u4f5c\u6210\u3057\u3001\u305d\u306e\u4e00\u90e8\u306e\u30e1\u30bd\u30c3\u30c9\u3092\u5dee\u3057\u66ff\u3048\u5bfe\u8c61\u3068\u3059\u308b\u5834\u5408\u306b\u4f7f\u7528\u3057\u307e\u3059\u3002\n\nsampleTests.m\n    SampleClass *sampleObject = [[SampleClass alloc] init];\n    id sampleMock = OCMPartialMock(sampleObject);\n\n\n\n\u30d7\u30ed\u30c8\u30b3\u30eb\n\u30c7\u30ea\u30b2\u30fc\u30c8\u306a\u3069\u306e\u30d7\u30ed\u30c8\u30b3\u30eb\u3092\u5bfe\u8c61\u3068\u3059\u308b\u5834\u5408\u306b\u4f7f\u7528\u3057\u307e\u3059\u3002\n\nsampleTests.m\n    id sampleMock = OCMProtocolMock(@protocol(SampleClassDelegate));\n\n\n\n\u623b\u308a\u5024\u306e\u5dee\u3057\u66ff\u3048\n\u3042\u308b\u30e1\u30bd\u30c3\u30c9\u306e\u623b\u308a\u5024\u3092\u5dee\u3057\u66ff\u3048\u308b\u5834\u5408\u306b\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306b andRerurn \u3092\u4f7f\u3063\u3066\u5b9a\u7fa9\u3057\u307e\u3059\u3002\n\u3053\u306e\u4f8b\u3067\u306f\u3001 stringValueMethod: \u306e\u623b\u308a\u5024\u3068\u3057\u3066 \"ABC\" \u3092\u8fd4\u3059\u3088\u3046\u306b\u3057\u3066\u3044\u307e\u3059\u3002\nstringValueMethod: \u306e\u5f15\u6570\u3068\u3057\u3066\u7279\u306b\u6307\u5b9a\u304c\u306a\u3044\u5834\u5408\u306f\u3001\u5f15\u6570\u306b OCMOCK_ANY \u3092\u6307\u5b9a\u3057\u307e\u3059\u3002\n\nsampleTests.m\nOCMStub([mock stringValueMethod:OCMOCK_ANY]).andReturn(@\"ABC\");\n\n\n\u5f15\u6570\u304c\u7279\u5b9a\u306e\u5024(1)\u306e\u5834\u5408\u306b\u3060\u3051 \"ABC\" \u3092\u8fd4\u3059\u5834\u5408\u306f\u3001\u3053\u306e\u3088\u3046\u306b\u5f15\u6570\u306b 1 \u3092\u6307\u5b9a\u3057\u307e\u3059\u3002\n\nsampleTests.m\nOCMStub([mock stringValueMethod:@(1)]).andReturn(@\"ABC\");\n\n\n\n\u30b5\u30f3\u30d7\u30eb\n\nsampleTests.m\n/*!\n * \u623b\u308a\u5024\u3092 Mock \u3067\u5dee\u3057\u66ff\u3048\u308b\u3002\n */\n- (void)testMockUserData {\n    // \u623b\u308a\u5024\u3092\u5dee\u3057\u66ff\u3048\u308b\n    id dateMock = OCMClassMock([NSDate class]);\n    // [NSDate date] \u304c\u547c\u3070\u308c\u305f\u3089\u3001 [NSDate dateWithTimeIntervalSince1970:0] \u3092\u8fd4\u3059\u3002\n    OCMStub([dateMock date]).andReturn([NSDate dateWithTimeIntervalSince1970:0]);\n\n    NetworkManager *manager = [[NetworkManager alloc] init];\n    NSDictionary *userData = [manager userData];\n\n    XCTAssertNotNil(userData);\n\n    XCTAssertNotNil(userData[UserDataUsername]);\n    XCTAssertEqualObjects(userData[UserDataUsername], @\"TEST1234\");\n\n    XCTAssertNotNil(userData[UserDataUUID]);\n    XCTAssertEqualObjects(userData[UserDataUUID], @\"CAD34831-E763-45A9-8BA2-31991DCB682B\");\n\n    XCTAssertNotNil(userData[UserDataLatestAccessDate]);\n    // UserDataLatestAccessDate \u306b\u30b7\u30b9\u30c6\u30e0\u65e5\u6642\u3092\u8a2d\u5b9a\u3057\u3066\u3044\u305f\u5834\u5408\u3001\n    // [manager userData] \u304c\u5b9f\u884c\u3055\u308c\u308b\u30bf\u30a4\u30df\u30f3\u30b0\u3068\u30c6\u30b9\u30c8\u3092\u5b9f\u884c\u3059\u308b\u30bf\u30a4\u30df\u30f3\u30b0\u306f\u3053\u3068\u306a\u308b\u304c\u3001\n    // [NSDate date] \u306f\u540c\u3058\u5024\u304c\u8fd4\u308b\u3088\u3046\u306b\u3057\u3066\u3044\u308b\u305f\u3081\u3001\u3053\u308c\u306f\u30a8\u30e9\u30fc\u306b\u306f\u306a\u3089\u306a\u3044\u3002\n    XCTAssertEqualObjects(userData[UserDataLatestAccessDate], [NSDate date]);\n}\n\n- (void)testMockCurrentDateString {\n    // Mock \u7528\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u4f5c\u6210\n    NSDateFormatter *dateFormatter = [[NSDateFormatter alloc] init];\n    // \u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u304b\u3089 Mock \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u4f5c\u6210\n    id formatterMock = OCMPartialMock(dateFormatter);\n    // \u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092 Mock \u7528\u306e\u3082\u306e\u306b\u5dee\u3057\u66ff\u3048\u308b\n    OCMStub([[formatterMock alloc] init]).andReturn(dateFormatter);\n    OCMStub([formatterMock stringFromDate:OCMOCK_ANY]).andReturn(@\"1980-12-31 12:34:56\");\n\n    NetworkManager *manager = [[NetworkManager alloc] init];\n    NSString *currentDate = [manager currentDateString];\n\n    XCTAssertEqualObjects(currentDate, @\"1980-12-31 12:34:56\", @\"Date String is wrong.\");\n}\n\n\n\nBlocks \u306e\u5dee\u3057\u66ff\u3048\nBlocks \u3092\u5dee\u3057\u66ff\u3048\u308b\u5834\u5408\u306f\u3001 andDo \u3092\u5229\u7528\u3057\u3001 NSInvocation \u306b\u3066\u5b9a\u7fa9\u3057\u305f\u51e6\u7406\u304c\u5b9f\u884c\u3055\u308c\u308b\u3088\u3046\u306b\u3057\u307e\u3059\u3002\n\n\u30b5\u30f3\u30d7\u30eb\n\nsampleTests.m\n/*!\n * Blocks \u3092 Mock \u3067\u5dee\u3057\u66ff\u3048\u308b\u3002\n */\n- (void)testMockImageDownload {\n    NSString *imageUrlString = @\"https://api.test.com/Images/IMG_1234.jpg\";\n    NSURL *imageUrl = [NSURL URLWithString:imageUrlString];\n\n    // \u5dee\u3057\u66ff\u3048\u308b Blocks \u306e\u5185\u5bb9\u3092\u5b9a\u7fa9\u3059\u308b\n    void (^invocation)(NSInvocation *) = ^(NSInvocation *invocation) {\n        __unsafe_unretained void (^handler)(NSData * __nullable data, NSURLResponse * __nullable response, NSError * __nullable error);\n\n        // Argument \u306e Index \u306f\u3053\u3093\u306a\u611f\u3058\u3068\u4e88\u60f3\n        // 0: \u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\n        // 1: \u30e1\u30bd\u30c3\u30c9\n        // 2: \u5f15\u6570\uff11\n        // 3: \u5f15\u6570\uff12 ...\n        [invocation getArgument:&handler atIndex:3];\n        NSHTTPURLResponse *httpResponse = [[NSHTTPURLResponse alloc] initWithURL:imageUrl statusCode:404 HTTPVersion:@\"1.1\" headerFields:nil];\n        handler(nil, httpResponse, nil);\n    };\n\n    id urlSessionMock = OCMClassMock([NSURLSession class]);\n    // NSURLSession \u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092 Mock \u306e\u3082\u306e\u306b\u5dee\u3057\u66ff\u3048\u308b\n    OCMStub([urlSessionMock sessionWithConfiguration:OCMOCK_ANY]).andReturn(urlSessionMock);\n    // Blocks \u306e\u5185\u5bb9\u3092\u5dee\u3057\u66ff\u3048\u308b\n    // [NSURLSession dataTaskWithURL:completionHandler:] \u304c\u547c\u3070\u308c\u305f\u3089\u3001 invocation \u3092\u5b9f\u884c\u3059\u308b\u3002\n    OCMStub([urlSessionMock dataTaskWithURL:OCMOCK_ANY completionHandler:OCMOCK_ANY]).andDo(invocation);\n\n    XCTestExpectation *expectation = [self expectationWithDescription:@\"MockImageDownloader\"];\n\n    NetworkManager *manager = [[NetworkManager alloc] init];\n    [manager downloadImage:imageUrlString completionHandler:^(BOOL result, NSData * _Nullable imageData, NSError * _Nullable error) {\n        [expectation fulfill];\n        XCTAssertFalse(result, @\"Image downlad failed.\");\n        XCTAssertEqual(error.code, 404, @\"Error is not 'Not Found'\");\n    }];\n\n    [self waitForExpectationsWithTimeout:60 handler:^(NSError * _Nullable error) {\n        XCTAssertNil(error, @\"has error.\");\n    }];\n}\n\n\n\n\u547c\u3073\u51fa\u3057\u306e\u78ba\u8a8d\n\u5bfe\u8c61\u306e\u30e1\u30bd\u30c3\u30c9\u304c\u547c\u3073\u51fa\u3055\u308c\u308b\u304b\u78ba\u8a8d\u3059\u308b\u5834\u5408\u306f\u3001OCMVerify \u3084 OCMVerifyAllWithDelay \u3092\u5229\u7528\u3057\u307e\u3059\u3002\n\u5358\u7d14\u306b\u30e1\u30bd\u30c3\u30c9\u304c\u547c\u3073\u51fa\u3055\u308c\u305f\u306e\u304b\u3092\u78ba\u8a8d\u3059\u308b\u5834\u5408\u306f\u3001OCMVerify \u3092\u5229\u7528\u3057\u3001\u975e\u540c\u671f\u51e6\u7406\u306e\u5b8c\u4e86\u3092\u53d7\u3051\u3066\u547c\u3073\u51fa\u3055\u308c\u308b\u5834\u5408\u306f\u3001 OCMVerifyAllWithDelay \u3092\u5229\u7528\u3057\u307e\u3059\u3002\n\u307e\u305f\u3001\u975e\u540c\u671f\u51e6\u7406\u306e\u5834\u5408\u306f\u3000OCMExpect \u3067\u547c\u3073\u51fa\u3055\u308c\u308b\u30e1\u30bd\u30c3\u30c9\u3092\u4e8b\u524d\u306b\u5b9a\u7fa9\u3057\u3066\u304a\u304d\u307e\u3059\u3002\n\n\u30b5\u30f3\u30d7\u30eb\n\nsampleTests.m\n/*!\n * \u51e6\u7406\u304c\u547c\u3070\u308c\u305f\u304b\u78ba\u8a8d\u3059\u308b\u3002\n */\n- (void)testVerifyMethod {\n    id dataManagerMock = OCMClassMock([DataManager class]);\n    // \u78ba\u8a8d\u3059\u308b\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u5dee\u3057\u66ff\u3048\u308b\n    OCMStub([dataManagerMock sharedInstance]).andReturn(dataManagerMock);\n\n    NetworkManager *netowrkMgr = [[NetworkManager alloc] init];\n    [netowrkMgr callApiWithCommand:ApiTypeLogout parameters:nil completionHandler:nil];\n\n    // \u51e6\u7406\u304c\u547c\u3070\u308c\u305f\u304b\u691c\u8a3c\n    OCMVerify([dataManagerMock deleteUserData]);\n}\n\n/*!\n * \u51e6\u7406\u304c\u547c\u3070\u308c\u305f\u304b\u78ba\u8a8d\u3059\u308b\u3002\uff08\u9045\u5ef6\uff09\n */\n- (void)testVerifyMethodWait {\n    id dataManagerMock = OCMClassMock([DataManager class]);\n    OCMStub([dataManagerMock sharedInstance]).andReturn(dataManagerMock);\n    // \u547c\u3073\u51fa\u3055\u308c\u308b\u51e6\u7406\u3092\u5b9a\u7fa9\n    OCMExpect([dataManagerMock updateUserData:OCMOCK_ANY]);\n\n    NetworkManager *netowrkMgr = [[NetworkManager alloc] init];\n    [netowrkMgr callApiWithCommand:ApiTypeLogin parameters:nil completionHandler:nil];\n\n    // \u6307\u5b9a\u3057\u305f\u51e6\u7406\u304c\u547c\u3073\u51fa\u3055\u308c\u308b\u307e\u3067\u3001\u6307\u5b9a\u79d2\u6570\uff08\uff16\uff10\u79d2\uff09\u5f85\u3064\n    OCMVerifyAllWithDelay(dataManagerMock, 60);\n}\n\n/*!\n * Delegate \u30e1\u30bd\u30c3\u30c9\u304c\u547c\u3070\u308c\u305f\u304b\u78ba\u8a8d\u3059\u308b\u3002\n */\n- (void)testMockSamleProtocol {\n    id sampleMock = OCMProtocolMock(@protocol(SampleClassDelegate));\n\n    SampleClass *sampleObject = [[SampleClass alloc] init];\n    sampleObject.delegate = sampleMock;\n    [sampleObject callDelegate];\n\n    OCMVerify([sampleMock sampleClass:OCMOCK_ANY returnValue:OCMOCK_ANY]);\n}\n\n\n\n\u5f15\u6570\u306e\u78ba\u8a8d\n\u5f15\u6570\u306e\u5024\u3092\u78ba\u8a8d\u3059\u308b\u5834\u5408\u3001\u305d\u306e\u30d1\u30bf\u30fc\u30f3\u304c\u4e00\u3064\u3060\u3051\u306e\u5834\u5408\u3067\u3042\u308c\u3070\u3001\u5148\u307b\u3069\u306e OCMVerify \u3067\u691c\u8a3c\u3057\u305f\u3044\u30e1\u30bd\u30c3\u30c9\u306e\u5f15\u6570\u3092 OCMOCK_ANY \u3067\u306f\u306a\u304f\u3001\u78ba\u8a8d\u3057\u305f\u3044\u5024\u3068\u3059\u308c\u3070\u5b9f\u73fe\u3067\u304d\u307e\u3059\u3002\n\nsampleTests.m\n- (void)testMockSamleProtocol {\n    id sampleMock = OCMProtocolMock(@protocol(SampleClassDelegate));\n\n    SampleClass *sampleObject = [[SampleClass alloc] init];\n    sampleObject.delegate = sampleMock;\n    [sampleObject callDelegate];\n\n    OCMVerify([sampleMock sampleClass:sampleObject returnValue:@(YES)]);\n}\n\n\n\u3082\u3046\u5c11\u3057\u7d30\u304b\u304f\u691c\u8a3c\u3057\u305f\u3044\u5834\u5408\u3084\u3001\u691c\u8a3c\u3057\u305f\u3044\u5024\u306b\u5e45\u304c\u3042\u308b\u5834\u5408\u306f\u3001OCMArg \u3092\u5229\u7528\u3057\u307e\u3059\u3002\n\nsampleTests.m\n- (void)testVerifyArgment {\n    NSString *bookmarkId = @\"ABC123\";\n    NSDictionary *bookmarkData = @{BookmarkDataId: bookmarkId};\n\n    DataManager *manager = [DataManager sharedInstance];\n    id dataManagerMock = OCMPartialMock(manager);\n    // selectBookmarkData: \u304c\u547c\u3070\u308c\u305f\u3068\u304d\u306b\u3001\u5f15\u6570\u306e\u5185\u5bb9\u3092\u691c\u8a3c\u3059\u308b\u3002\n    OCMExpect([dataManagerMock selectBookmarkData:[OCMArg checkWithBlock:^BOOL(id obj) {\n        XCTAssertNotNil(obj);\n        XCTAssertTrue([obj isKindOfClass:[NSString class]]);\n        XCTAssertEqualObjects(obj, @\"ABC123\");\n    }]]);\n\n    [manager updateBookmarkData:bookmarkData];\n    OCMVerify([dataManagerMock selectBookmarkData:OCMOCK_ANY]);\n}\n\n\n\u3053\u306e\u3088\u3046\u306b\u5bfe\u8c61\u3068\u306a\u308b\u5f15\u6570\u306b\u5bfe\u3057\u3066 -checkWithBlock: \u3092\u57cb\u3081\u8fbc\u307f\u3001\u3053\u306e\u4e2d\u3067\u5024\u306e\u691c\u8a3c\u3092\u884c\u3044\u307e\u3059\u3002\n\u307e\u305f\u3001\u30e1\u30bd\u30c3\u30c9\u304c\u547c\u3070\u308c\u306a\u304b\u3063\u305f\u5834\u5408\u306f\u30a8\u30e9\u30fc\u3068\u306a\u3089\u306a\u3044\u306e\u3067\u3001OCMVerify \u306b\u3066\u30e1\u30bd\u30c3\u30c9\u81ea\u4f53\u304c\u547c\u3070\u308c\u308b\u3053\u3068\u3082\u691c\u8a3c\u3057\u307e\u3059\u3002\n\n\u6700\u5f8c\u306b\n\u521d\u3081\u306e\u65b9\u306b\u3082\u66f8\u304d\u307e\u3057\u305f\u304c\u3001\u30e2\u30c3\u30af\u3092\u5229\u7528\u3059\u308b\u3068\u5bfe\u8c61\u3068\u306a\u308b\u30af\u30e9\u30b9\u306e\u632f\u308b\u821e\u3044\u3092\u5909\u3048\u308b\u3053\u3068\u304c\u3067\u304d\u308b\u306e\u3067\u3001\u307e\u3060\u5b9f\u88c5\u304c\u5b8c\u4e86\u3057\u3066\u3044\u306a\u3044\u30af\u30e9\u30b9\u304c\u95a2\u4fc2\u3057\u3066\u3044\u308b\u30c6\u30b9\u30c8\u3084\u3001\u30a8\u30e9\u30fc\u3092\u767a\u751f\u3055\u305b\u308b\u3053\u3068\u304c\u96e3\u3057\u3044\u306a\u3069\u306e\u8907\u96d1\u306a\u30c6\u30b9\u30c8\u304c\u6bd4\u8f03\u7684\u7c21\u5358\u306b\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002\n\n\u53c2\u8003\nhttp://ocmock.org/\nhttp://qiita.com/YusukeHosonuma/items/09fe9be15007f2870b83\nhttp://qiita.com/nomadmonad/items/e9b3500998ad0b2d3fee\n[\u4ee5\u524d](http://qiita.com/s-harada_i-enter/items/f7d57966a5bf9d53038e)\u3001Objective-C \u3067\u306e Unit Test \u3092\u7d39\u4ecb\u3057\u307e\u3057\u305f\u304c\u3001\u4eca\u56de\u306f `OCMock` \u3068\u3044\u3046\u30e2\u30c3\u30af\u30e9\u30a4\u30d6\u30e9\u30ea\u306e\u4f7f\u3044\u65b9\u3092\u7d39\u4ecb\u3057\u307e\u3059\u3002\n\n# Mock \u3068\u306f\n\u30e2\u30c3\u30af\u3092\u4f7f\u3046\u76ee\u7684\u306f\u5927\u304d\u304f\u4ee5\u4e0b\u306e\u3082\u306e\u306b\u306a\u308b\u304b\u3068\u601d\u3044\u307e\u3059\u3002\n\n* \u307e\u3060\u5b8c\u6210\u3057\u3066\u3044\u306a\u3044\u30af\u30e9\u30b9\u3092\u4ee3\u7528\u3059\u308b\u3002\n* \u30b7\u30b9\u30c6\u30e0\u65e5\u6642\u306a\u3069\u90fd\u5ea6\u90fd\u5ea6\u5024\u304c\u5909\u5316\u3059\u308b\u3082\u306e\u3092\u56fa\u5b9a\u306b\u3059\u308b\u3002\n* \u30c6\u30b9\u30c8\u5bfe\u8c61\u304b\u3089\u5225\u306a\u30af\u30e9\u30b9\u306e\u30e1\u30bd\u30c3\u30c9\u304c\u547c\u3070\u308c\u3066\u3044\u308b\u304b\u78ba\u8a8d\u3059\u308b\u3002\n* \u30a8\u30e9\u30fc\u3092\u767a\u751f\u3055\u305b\u308b\u3053\u3068\u304c\u56f0\u96e3\u306a\u5834\u5408\u3001\u3053\u306e\u30a8\u30e9\u30fc\u3092\u64ec\u4f3c\u7684\u306b\u767a\u751f\u3055\u305b\u308b\u3002\n\n# \u5c0e\u5165\nCocoaPods \u304b\u3089\u5c0e\u5165\u3057\u307e\u3059\u3002\n\u30e1\u30a4\u30f3\u306e\u30bf\u30fc\u30b2\u30c3\u30c8\u306b\u306f\u542b\u3081\u305a\u3001\u30c6\u30b9\u30c8\u7528\u306e\u30bf\u30fc\u30b2\u30c3\u30c8\u306b\u542b\u3081\u307e\u3059\u3002\n\n```ruby:Podfile\n# Uncomment this line to define a global platform for your project\n# platform :ios, '9.0'\n\ntarget 'sample' do\n  # Uncomment this line if you're using Swift or would like to use dynamic frameworks\n  # use_frameworks!\n\n  # Pods for sample\n\n  target 'sampleTests' do\n    inherit! :search_paths\n    # Pods for testing\n    pod 'OCMock'\n  end\n\n  target 'sampleUITests' do\n    inherit! :search_paths\n    # Pods for testing\n    pod 'OCMock'\n  end\n\nend\n```\n\n# \u4f7f\u3044\u65b9\n\n\u3053\u306e\u3088\u3046\u306b OCMock \u3092\u30a4\u30f3\u30dd\u30fc\u30c8\u3057\u307e\u3059\u3002\n\n```objc:sampleTests.m\n#import <OCMock/OCMock.h>\n```\n\n## \u30e2\u30c3\u30af\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u4f5c\u6210\n### \u30af\u30e9\u30b9\n\n\u30af\u30e9\u30b9\u30e1\u30bd\u30c3\u30c9\u3092\u5dee\u3057\u66ff\u3048\u5bfe\u8c61\u3068\u3059\u308b\u5834\u5408\u306b\u4f7f\u7528\u3057\u307e\u3059\u3002\n\n```objc:sampleTests.m\n    id sampleMock = OCMClassMock([SampleClass class]);\n```\n\n### \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\n\n\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u4f5c\u6210\u3057\u3001\u305d\u306e\u4e00\u90e8\u306e\u30e1\u30bd\u30c3\u30c9\u3092\u5dee\u3057\u66ff\u3048\u5bfe\u8c61\u3068\u3059\u308b\u5834\u5408\u306b\u4f7f\u7528\u3057\u307e\u3059\u3002\n\n```objc:sampleTests.m\n    SampleClass *sampleObject = [[SampleClass alloc] init];\n    id sampleMock = OCMPartialMock(sampleObject);\n```\n\n### \u30d7\u30ed\u30c8\u30b3\u30eb\n\n\u30c7\u30ea\u30b2\u30fc\u30c8\u306a\u3069\u306e\u30d7\u30ed\u30c8\u30b3\u30eb\u3092\u5bfe\u8c61\u3068\u3059\u308b\u5834\u5408\u306b\u4f7f\u7528\u3057\u307e\u3059\u3002\n\n```objc:sampleTests.m\n    id sampleMock = OCMProtocolMock(@protocol(SampleClassDelegate));\n```\n\n## \u623b\u308a\u5024\u306e\u5dee\u3057\u66ff\u3048\n\u3042\u308b\u30e1\u30bd\u30c3\u30c9\u306e\u623b\u308a\u5024\u3092\u5dee\u3057\u66ff\u3048\u308b\u5834\u5408\u306b\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306b `andRerurn` \u3092\u4f7f\u3063\u3066\u5b9a\u7fa9\u3057\u307e\u3059\u3002\n\u3053\u306e\u4f8b\u3067\u306f\u3001 `stringValueMethod:` \u306e\u623b\u308a\u5024\u3068\u3057\u3066 \"ABC\" \u3092\u8fd4\u3059\u3088\u3046\u306b\u3057\u3066\u3044\u307e\u3059\u3002\n`stringValueMethod:` \u306e\u5f15\u6570\u3068\u3057\u3066\u7279\u306b\u6307\u5b9a\u304c\u306a\u3044\u5834\u5408\u306f\u3001\u5f15\u6570\u306b `OCMOCK_ANY` \u3092\u6307\u5b9a\u3057\u307e\u3059\u3002\n\n```objc:sampleTests.m\nOCMStub([mock stringValueMethod:OCMOCK_ANY]).andReturn(@\"ABC\");\n```\n\n\u5f15\u6570\u304c\u7279\u5b9a\u306e\u5024(1)\u306e\u5834\u5408\u306b\u3060\u3051 \"ABC\" \u3092\u8fd4\u3059\u5834\u5408\u306f\u3001\u3053\u306e\u3088\u3046\u306b\u5f15\u6570\u306b 1 \u3092\u6307\u5b9a\u3057\u307e\u3059\u3002\n\n```objc:sampleTests.m\nOCMStub([mock stringValueMethod:@(1)]).andReturn(@\"ABC\");\n```\n\n### \u30b5\u30f3\u30d7\u30eb\n\n```objc:sampleTests.m\n/*!\n * \u623b\u308a\u5024\u3092 Mock \u3067\u5dee\u3057\u66ff\u3048\u308b\u3002\n */\n- (void)testMockUserData {\n    // \u623b\u308a\u5024\u3092\u5dee\u3057\u66ff\u3048\u308b\n    id dateMock = OCMClassMock([NSDate class]);\n    // [NSDate date] \u304c\u547c\u3070\u308c\u305f\u3089\u3001 [NSDate dateWithTimeIntervalSince1970:0] \u3092\u8fd4\u3059\u3002\n    OCMStub([dateMock date]).andReturn([NSDate dateWithTimeIntervalSince1970:0]);\n\n    NetworkManager *manager = [[NetworkManager alloc] init];\n    NSDictionary *userData = [manager userData];\n\n    XCTAssertNotNil(userData);\n\n    XCTAssertNotNil(userData[UserDataUsername]);\n    XCTAssertEqualObjects(userData[UserDataUsername], @\"TEST1234\");\n\n    XCTAssertNotNil(userData[UserDataUUID]);\n    XCTAssertEqualObjects(userData[UserDataUUID], @\"CAD34831-E763-45A9-8BA2-31991DCB682B\");\n\n    XCTAssertNotNil(userData[UserDataLatestAccessDate]);\n    // UserDataLatestAccessDate \u306b\u30b7\u30b9\u30c6\u30e0\u65e5\u6642\u3092\u8a2d\u5b9a\u3057\u3066\u3044\u305f\u5834\u5408\u3001\n    // [manager userData] \u304c\u5b9f\u884c\u3055\u308c\u308b\u30bf\u30a4\u30df\u30f3\u30b0\u3068\u30c6\u30b9\u30c8\u3092\u5b9f\u884c\u3059\u308b\u30bf\u30a4\u30df\u30f3\u30b0\u306f\u3053\u3068\u306a\u308b\u304c\u3001\n    // [NSDate date] \u306f\u540c\u3058\u5024\u304c\u8fd4\u308b\u3088\u3046\u306b\u3057\u3066\u3044\u308b\u305f\u3081\u3001\u3053\u308c\u306f\u30a8\u30e9\u30fc\u306b\u306f\u306a\u3089\u306a\u3044\u3002\n    XCTAssertEqualObjects(userData[UserDataLatestAccessDate], [NSDate date]);\n}\n\n- (void)testMockCurrentDateString {\n    // Mock \u7528\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u4f5c\u6210\n    NSDateFormatter *dateFormatter = [[NSDateFormatter alloc] init];\n    // \u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u304b\u3089 Mock \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u4f5c\u6210\n    id formatterMock = OCMPartialMock(dateFormatter);\n    // \u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092 Mock \u7528\u306e\u3082\u306e\u306b\u5dee\u3057\u66ff\u3048\u308b\n    OCMStub([[formatterMock alloc] init]).andReturn(dateFormatter);\n    OCMStub([formatterMock stringFromDate:OCMOCK_ANY]).andReturn(@\"1980-12-31 12:34:56\");\n\n    NetworkManager *manager = [[NetworkManager alloc] init];\n    NSString *currentDate = [manager currentDateString];\n\n    XCTAssertEqualObjects(currentDate, @\"1980-12-31 12:34:56\", @\"Date String is wrong.\");\n}\n```\n\n## Blocks \u306e\u5dee\u3057\u66ff\u3048\nBlocks \u3092\u5dee\u3057\u66ff\u3048\u308b\u5834\u5408\u306f\u3001 `andDo` \u3092\u5229\u7528\u3057\u3001 `NSInvocation` \u306b\u3066\u5b9a\u7fa9\u3057\u305f\u51e6\u7406\u304c\u5b9f\u884c\u3055\u308c\u308b\u3088\u3046\u306b\u3057\u307e\u3059\u3002\n\n### \u30b5\u30f3\u30d7\u30eb\n\n```objc:sampleTests.m\n/*!\n * Blocks \u3092 Mock \u3067\u5dee\u3057\u66ff\u3048\u308b\u3002\n */\n- (void)testMockImageDownload {\n    NSString *imageUrlString = @\"https://api.test.com/Images/IMG_1234.jpg\";\n    NSURL *imageUrl = [NSURL URLWithString:imageUrlString];\n\n    // \u5dee\u3057\u66ff\u3048\u308b Blocks \u306e\u5185\u5bb9\u3092\u5b9a\u7fa9\u3059\u308b\n    void (^invocation)(NSInvocation *) = ^(NSInvocation *invocation) {\n        __unsafe_unretained void (^handler)(NSData * __nullable data, NSURLResponse * __nullable response, NSError * __nullable error);\n\n        // Argument \u306e Index \u306f\u3053\u3093\u306a\u611f\u3058\u3068\u4e88\u60f3\n        // 0: \u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\n        // 1: \u30e1\u30bd\u30c3\u30c9\n        // 2: \u5f15\u6570\uff11\n        // 3: \u5f15\u6570\uff12 ...\n        [invocation getArgument:&handler atIndex:3];\n        NSHTTPURLResponse *httpResponse = [[NSHTTPURLResponse alloc] initWithURL:imageUrl statusCode:404 HTTPVersion:@\"1.1\" headerFields:nil];\n        handler(nil, httpResponse, nil);\n    };\n\n    id urlSessionMock = OCMClassMock([NSURLSession class]);\n    // NSURLSession \u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092 Mock \u306e\u3082\u306e\u306b\u5dee\u3057\u66ff\u3048\u308b\n    OCMStub([urlSessionMock sessionWithConfiguration:OCMOCK_ANY]).andReturn(urlSessionMock);\n    // Blocks \u306e\u5185\u5bb9\u3092\u5dee\u3057\u66ff\u3048\u308b\n    // [NSURLSession dataTaskWithURL:completionHandler:] \u304c\u547c\u3070\u308c\u305f\u3089\u3001 invocation \u3092\u5b9f\u884c\u3059\u308b\u3002\n    OCMStub([urlSessionMock dataTaskWithURL:OCMOCK_ANY completionHandler:OCMOCK_ANY]).andDo(invocation);\n\n    XCTestExpectation *expectation = [self expectationWithDescription:@\"MockImageDownloader\"];\n    \n    NetworkManager *manager = [[NetworkManager alloc] init];\n    [manager downloadImage:imageUrlString completionHandler:^(BOOL result, NSData * _Nullable imageData, NSError * _Nullable error) {\n        [expectation fulfill];\n        XCTAssertFalse(result, @\"Image downlad failed.\");\n        XCTAssertEqual(error.code, 404, @\"Error is not 'Not Found'\");\n    }];\n    \n    [self waitForExpectationsWithTimeout:60 handler:^(NSError * _Nullable error) {\n        XCTAssertNil(error, @\"has error.\");\n    }];\n}\n```\n\n## \u547c\u3073\u51fa\u3057\u306e\u78ba\u8a8d\n\u5bfe\u8c61\u306e\u30e1\u30bd\u30c3\u30c9\u304c\u547c\u3073\u51fa\u3055\u308c\u308b\u304b\u78ba\u8a8d\u3059\u308b\u5834\u5408\u306f\u3001`OCMVerify` \u3084 `OCMVerifyAllWithDelay` \u3092\u5229\u7528\u3057\u307e\u3059\u3002\n\u5358\u7d14\u306b\u30e1\u30bd\u30c3\u30c9\u304c\u547c\u3073\u51fa\u3055\u308c\u305f\u306e\u304b\u3092\u78ba\u8a8d\u3059\u308b\u5834\u5408\u306f\u3001`OCMVerify` \u3092\u5229\u7528\u3057\u3001\u975e\u540c\u671f\u51e6\u7406\u306e\u5b8c\u4e86\u3092\u53d7\u3051\u3066\u547c\u3073\u51fa\u3055\u308c\u308b\u5834\u5408\u306f\u3001 `OCMVerifyAllWithDelay` \u3092\u5229\u7528\u3057\u307e\u3059\u3002\n\u307e\u305f\u3001\u975e\u540c\u671f\u51e6\u7406\u306e\u5834\u5408\u306f\u3000`OCMExpect` \u3067\u547c\u3073\u51fa\u3055\u308c\u308b\u30e1\u30bd\u30c3\u30c9\u3092\u4e8b\u524d\u306b\u5b9a\u7fa9\u3057\u3066\u304a\u304d\u307e\u3059\u3002\n\n### \u30b5\u30f3\u30d7\u30eb\n\n```objc:sampleTests.m\n/*!\n * \u51e6\u7406\u304c\u547c\u3070\u308c\u305f\u304b\u78ba\u8a8d\u3059\u308b\u3002\n */\n- (void)testVerifyMethod {\n    id dataManagerMock = OCMClassMock([DataManager class]);\n    // \u78ba\u8a8d\u3059\u308b\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u5dee\u3057\u66ff\u3048\u308b\n    OCMStub([dataManagerMock sharedInstance]).andReturn(dataManagerMock);\n\n    NetworkManager *netowrkMgr = [[NetworkManager alloc] init];\n    [netowrkMgr callApiWithCommand:ApiTypeLogout parameters:nil completionHandler:nil];\n\n    // \u51e6\u7406\u304c\u547c\u3070\u308c\u305f\u304b\u691c\u8a3c\n    OCMVerify([dataManagerMock deleteUserData]);\n}\n\n/*!\n * \u51e6\u7406\u304c\u547c\u3070\u308c\u305f\u304b\u78ba\u8a8d\u3059\u308b\u3002\uff08\u9045\u5ef6\uff09\n */\n- (void)testVerifyMethodWait {\n    id dataManagerMock = OCMClassMock([DataManager class]);\n    OCMStub([dataManagerMock sharedInstance]).andReturn(dataManagerMock);\n    // \u547c\u3073\u51fa\u3055\u308c\u308b\u51e6\u7406\u3092\u5b9a\u7fa9\n    OCMExpect([dataManagerMock updateUserData:OCMOCK_ANY]);\n    \n    NetworkManager *netowrkMgr = [[NetworkManager alloc] init];\n    [netowrkMgr callApiWithCommand:ApiTypeLogin parameters:nil completionHandler:nil];\n\n    // \u6307\u5b9a\u3057\u305f\u51e6\u7406\u304c\u547c\u3073\u51fa\u3055\u308c\u308b\u307e\u3067\u3001\u6307\u5b9a\u79d2\u6570\uff08\uff16\uff10\u79d2\uff09\u5f85\u3064\n    OCMVerifyAllWithDelay(dataManagerMock, 60);\n}\n\n/*!\n * Delegate \u30e1\u30bd\u30c3\u30c9\u304c\u547c\u3070\u308c\u305f\u304b\u78ba\u8a8d\u3059\u308b\u3002\n */\n- (void)testMockSamleProtocol {\n    id sampleMock = OCMProtocolMock(@protocol(SampleClassDelegate));\n\n    SampleClass *sampleObject = [[SampleClass alloc] init];\n    sampleObject.delegate = sampleMock;\n    [sampleObject callDelegate];\n\n    OCMVerify([sampleMock sampleClass:OCMOCK_ANY returnValue:OCMOCK_ANY]);\n}\n```\n\n## \u5f15\u6570\u306e\u78ba\u8a8d\n\n\u5f15\u6570\u306e\u5024\u3092\u78ba\u8a8d\u3059\u308b\u5834\u5408\u3001\u305d\u306e\u30d1\u30bf\u30fc\u30f3\u304c\u4e00\u3064\u3060\u3051\u306e\u5834\u5408\u3067\u3042\u308c\u3070\u3001\u5148\u307b\u3069\u306e `OCMVerify` \u3067\u691c\u8a3c\u3057\u305f\u3044\u30e1\u30bd\u30c3\u30c9\u306e\u5f15\u6570\u3092 `OCMOCK_ANY` \u3067\u306f\u306a\u304f\u3001\u78ba\u8a8d\u3057\u305f\u3044\u5024\u3068\u3059\u308c\u3070\u5b9f\u73fe\u3067\u304d\u307e\u3059\u3002\n\n```objc:sampleTests.m\n- (void)testMockSamleProtocol {\n    id sampleMock = OCMProtocolMock(@protocol(SampleClassDelegate));\n\n    SampleClass *sampleObject = [[SampleClass alloc] init];\n    sampleObject.delegate = sampleMock;\n    [sampleObject callDelegate];\n\n    OCMVerify([sampleMock sampleClass:sampleObject returnValue:@(YES)]);\n}\n```\n\n\u3082\u3046\u5c11\u3057\u7d30\u304b\u304f\u691c\u8a3c\u3057\u305f\u3044\u5834\u5408\u3084\u3001\u691c\u8a3c\u3057\u305f\u3044\u5024\u306b\u5e45\u304c\u3042\u308b\u5834\u5408\u306f\u3001`OCMArg` \u3092\u5229\u7528\u3057\u307e\u3059\u3002\n\n```objc:sampleTests.m\n- (void)testVerifyArgment {\n    NSString *bookmarkId = @\"ABC123\";\n    NSDictionary *bookmarkData = @{BookmarkDataId: bookmarkId};\n    \n    DataManager *manager = [DataManager sharedInstance];\n    id dataManagerMock = OCMPartialMock(manager);\n    // selectBookmarkData: \u304c\u547c\u3070\u308c\u305f\u3068\u304d\u306b\u3001\u5f15\u6570\u306e\u5185\u5bb9\u3092\u691c\u8a3c\u3059\u308b\u3002\n    OCMExpect([dataManagerMock selectBookmarkData:[OCMArg checkWithBlock:^BOOL(id obj) {\n        XCTAssertNotNil(obj);\n        XCTAssertTrue([obj isKindOfClass:[NSString class]]);\n        XCTAssertEqualObjects(obj, @\"ABC123\");\n    }]]);\n    \n    [manager updateBookmarkData:bookmarkData];\n    OCMVerify([dataManagerMock selectBookmarkData:OCMOCK_ANY]);\n}\n```\n\n\u3053\u306e\u3088\u3046\u306b\u5bfe\u8c61\u3068\u306a\u308b\u5f15\u6570\u306b\u5bfe\u3057\u3066 `-checkWithBlock:` \u3092\u57cb\u3081\u8fbc\u307f\u3001\u3053\u306e\u4e2d\u3067\u5024\u306e\u691c\u8a3c\u3092\u884c\u3044\u307e\u3059\u3002\n\u307e\u305f\u3001\u30e1\u30bd\u30c3\u30c9\u304c\u547c\u3070\u308c\u306a\u304b\u3063\u305f\u5834\u5408\u306f\u30a8\u30e9\u30fc\u3068\u306a\u3089\u306a\u3044\u306e\u3067\u3001`OCMVerify` \u306b\u3066\u30e1\u30bd\u30c3\u30c9\u81ea\u4f53\u304c\u547c\u3070\u308c\u308b\u3053\u3068\u3082\u691c\u8a3c\u3057\u307e\u3059\u3002\n\n# \u6700\u5f8c\u306b\n\u521d\u3081\u306e\u65b9\u306b\u3082\u66f8\u304d\u307e\u3057\u305f\u304c\u3001\u30e2\u30c3\u30af\u3092\u5229\u7528\u3059\u308b\u3068\u5bfe\u8c61\u3068\u306a\u308b\u30af\u30e9\u30b9\u306e\u632f\u308b\u821e\u3044\u3092\u5909\u3048\u308b\u3053\u3068\u304c\u3067\u304d\u308b\u306e\u3067\u3001\u307e\u3060\u5b9f\u88c5\u304c\u5b8c\u4e86\u3057\u3066\u3044\u306a\u3044\u30af\u30e9\u30b9\u304c\u95a2\u4fc2\u3057\u3066\u3044\u308b\u30c6\u30b9\u30c8\u3084\u3001\u30a8\u30e9\u30fc\u3092\u767a\u751f\u3055\u305b\u308b\u3053\u3068\u304c\u96e3\u3057\u3044\u306a\u3069\u306e\u8907\u96d1\u306a\u30c6\u30b9\u30c8\u304c\u6bd4\u8f03\u7684\u7c21\u5358\u306b\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002\n\n# \u53c2\u8003\nhttp://ocmock.org/\nhttp://qiita.com/YusukeHosonuma/items/09fe9be15007f2870b83\nhttp://qiita.com/nomadmonad/items/e9b3500998ad0b2d3fee\n", "tags": ["iOS", "Xcode", "OCMock", "unittest"]}