{"context": "Python\u3067\u3088\u304f\u4f7f\u3046\u753b\u50cf\u51e6\u7406\u30e9\u30a4\u30d6\u30e9\u30ea\u306e\u95a2\u6570\u307e\u3068\u3081\u5099\u5fd8\u9332\u3002\n\u968f\u6642\u66f4\u65b0\u4e88\u5b9a\u3002\n\u4ee5\u4e0b\u306e\u30e9\u30a4\u30d6\u30e9\u30ea\u3092import\u3057\u3066\u3044\u308b\u3053\u3068\u304c\u524d\u63d0\nimport numpy as np\nimport copy\nimport cv2 as cv\nimport skimage\nimport skimage.io as sk\nimport skimage.filters as fil\nimport skimage.filters.rank as rank\nimport skimage.morphology as mor\nimport skimage.transform as tr\nimport scipy.misc as sp\nimport scipy.ndimage as ndi\n\n\nRead Image\n\u753b\u50cf\u306e\u8aad\u307f\u8fbc\u307f\u306b\u4f7f\u3046\u30e9\u30a4\u30d6\u30e9\u30ea\u3054\u3068\u306e\u6bd4\u8f03\n\nscikit-image\nimg = sk.imread(filename,as_grey=False,plugin=None,flatten=None)\n\n\n\u30de\u30eb\u30c1\u30c1\u30e3\u30cd\u30eb\u753b\u50cf\u8aad\u307f\u8fbc\u307f\u53ef\u80fd\u3000(3D multi channel \u753b\u50cf\u306b\u306f\u3053\u308c)\nas_gray=True\u3067RGB\u753b\u50cf\u3092\u8aad\u307f\u8fbc\u3080\u969b\u306b\u30b0\u30ec\u30a4\u30b9\u30b1\u30fc\u30eb\u5909\u63db\u3057\u3066\u304f\u308c\u308b\u304c\u300164bit-float\u306b\u306a\u3063\u3066\u753b\u7d20\u5024\u304c\u6f70\u3055\u308c\u3066\u3057\u307e\u3046\u305f\u3081\u6c17\u3092\u4ed8\u3051\u308b\u5fc5\u8981\u3042\u308a\n\n\nOpenCV\nimg = cv.imread((filename[, flags])\n\n\nflags\n\n\ncv.IMREAD_COLOR (or 1) : RGB\u753b\u50cf\u3092\u8aad\u307f\u8fbc\u307f\ncv.IMREAD_GRAYSCALE\uff08or 0\uff09: \u30b0\u30ec\u30a4\u30b9\u30b1\u30fc\u30eb\u306b\u5909\u63db\u3057\u3066\u8aad\u307f\u8fbc\u307f\ncv.IMREAD_UNCHANGED\uff08or -1\uff09: \u5909\u63db\u306a\u3057\u8aad\u307f\u8fbc\u307f (\u03b1 \u30c1\u30e3\u30cd\u30eb\u3082\u8aad\u307f\u8fbc\u307f\u53ef\u80fd)\n\n\nRGB\u753b\u50cf\u306e\u8aad\u307f\u8fbc\u307f\u306f\u30c1\u30e3\u30cd\u30eb\u304cBGR\u306b\u306a\u308b\u304b\u3089\u6ce8\u610f\ncv.cvtColor(image, cv2.COLOR_BGR2RGB)\u3067RGB\u306b\u5909\u63db\u53ef\u80fd\n\n\nSciPy\nimg = sp.imread(name, flatten=False, mode=None)\n\n\n\u666e\u6bb5\u3042\u307e\u308a\u4f7f\u308f\u306a\u3044\u304c\u3001\u4e0a\u306e\u4e8c\u3064\u3067\u7121\u7406\u3060\u3063\u305f\u5834\u5408\u983c\u308b\nmode : str, optional\n\n\n'L' : \u30b0\u30ec\u30a4\u30b9\u30b1\u30fc\u30eb\u5909\u63db\u8aad\u307f\u8fbc\u307f(8-bit)\n'RGB' : RGB\u753b\u50cf\u8aad\u307f\u8fbc\u307f (3x8-bit)\n'RGBA' : 4 channel\u8aad\u307f\u8fbc\u307f(4x8-bit)\n'I' : \u30b0\u30ec\u30a4\u30b9\u30b1\u30fc\u30eb\u5909\u63db\u8aad\u307f\u8fbc\u307f (32-bit signed integer)\n'F' : \u30b0\u30ec\u30a4\u30b9\u30b1\u30fc\u30eb\u5909\u63db\u8aad\u307f\u8fbc\u307f (32-bit floating point)\n\u4ed6\u306b\u3082 'P', 'CMYK', 'YCbCr' \u304c\u3042\u308b\n\n\n\n\nBinalization\n\u753b\u50cf\u306e\u4e8c\u5024\u5316\u306f\u57fa\u672c\u7684\u306b\u5927\u6d25\u304f\u3089\u3044\u3057\u304b\u7528\u3044\u306a\u3044\u304c\u3001\u76ee\u7684\u306b\u3088\u3063\u3066\u306f\u4ed6\u306e\u624b\u6cd5\u3082\u7528\u3044\u308b\u306e\u3067\u53c2\u8003\u307e\u3067\u306b\u3002\n\nscikit-image\n# \u5404\u4e8c\u5024\u5316\u624b\u6cd5\u306e\u95be\u5024\u3092\u6c42\u3081\u308b\nthrOtsu = fil.threshold_otsu(img)\nthrli = fil.threshold_li(img)\nthrIso = fil.threshold_isodata(img)\nthrYen = fil.threshold_yen(img)\n\n# \u4e8c\u5024\u5316\nthrImg = ((thrOtsu < img) * 255).astype(np.uint8)\n\n\n\nOpenCV\n\u307e\u3063\u305f\u304f\u4f7f\u308f\u306a\u3044\u304c\u8aad\u307f\u8fbc\u307f\u306a\u3069\u4e00\u8cab\u3057\u3066OpenCV\u3092\u4f7f\u3063\u3066\u308b\u3068\u304d\u306a\u3069\u306b\u3002\nthr, thrImg = cv.threshold(img, 0, 255, cv.THRESH_BINARY + cv.THRESH_OTSU)\n\n\nFiltering\n\u4e3b\u306b\u753b\u50cf\u51e6\u7406\u306e\u524d\u51e6\u7406\u3068\u3057\u3066\u884c\u3046\u30ce\u30a4\u30ba\u9664\u53bb\u306b\u7528\u3044\u308b\u3002\n\u30ce\u30a4\u30ba\u9664\u53bb\u3067\u306f\u3001\u30ce\u30a4\u30ba\u306e\u7a2e\u985e\u3084\u753b\u50cf\u306e\u7279\u5fb4\u306b\u5408\u308f\u305b\u3066\u69d8\u3005\u306a filtering \u3092\u4f7f\u3044\u5206\u3051\u308b\u5fc5\u8981\u304c\u3042\u308b\u3002\n\u306a\u306e\u3067\u3053\u3053\u3067\u306e\u69cb\u6210\u306f\u3001\u4f7f\u3044\u5206\u3051\u3067\u304d\u308b\u3088\u3046\u306b filtering \u306e\u7a2e\u985e\u3054\u3068\u306b\u307e\u3068\u3081\u308b\u3002\n\nGaussian Fitering\n\u30ac\u30a6\u30b9\u5206\u5e03\u306b\u5f93\u3063\u305f\u91cd\u307f\u30ab\u30fc\u30cd\u30eb\u3067\u7573\u307f\u8fbc\u3080\u3002\u4e00\u822c\u7684\u306a\u753b\u50cf\u306e\u5e73\u6ed1\u5316\u306b\u7528\u3044\u308b\u3002\n# \u6b63\u898f\u5206\u5e03\u306e\u5206\u6563\nsigma = 1\n# \u30ab\u30fc\u30cd\u30eb\u30b5\u30a4\u30ba\nksize = (3, 3)\n\n# OpenCV\ngauImg = cv.GaussianBlur(img, ksize=ksize, sigmaX=sigma)\n\n# SciPy\ngauImg = ndi.gaussian_filter(img, sigma=sigma)\n\n# scikit-image\n# img\u304cfloat\u578b\u306e\u5834\u5408\u306f-1~1\u306b\u6b63\u898f\u5316\u3059\u308b\u5fc5\u8981\u3042\u308a\ngauImg = fil.gaussian_filter(img, sigma=sigma)\n\n\n\nMean Filtering\n\u5e73\u5747\u91cd\u307f\u30ab\u30fc\u30cd\u30eb\u3067\u7573\u307f\u8fbc\u3080\u3002\n\u4e00\u69d8\u30ce\u30a4\u30ba\u306e\u3088\u3046\u306a\u7d30\u304b\u3044\u30ce\u30a4\u30ba\u306a\u3069\u3092\u9664\u53bb\u3059\u308b\u5834\u5408\u306b\u7528\u3044\u308b\u3002\n# \u30ab\u30fc\u30cd\u30eb\u30b5\u30a4\u30ba\nksize = (5, 5)\n# \u534a\u5f8420pixel\u5186\u306e\u91cd\u307f\u30ab\u30fc\u30cd\u30eb\nselem = disk(20)\n\n# OpenCV\nmeanImg = cv.blur(img, ksize=ksize)\n\n# scikit-image\n# img\u304cfloat\u578b\u306e\u5834\u5408\u306f-1~1\u306b\u6b63\u898f\u5316\u3059\u308b\u5fc5\u8981\u3042\u308a\nmeanImg = rank.mean(img, selem=selem)\n\n\nMedian Filtering\n\u4e2d\u592e\u5024\u30d5\u30a3\u30eb\u30bf\u30ea\u30f3\u30b0\u3002\n\u30b4\u30de\u5869\u30ce\u30a4\u30ba\u306e\u3088\u3046\u306a\u30b9\u30d1\u30a4\u30af\u72b6\u306e\u30ce\u30a4\u30ba\u306a\u3069\u3092\u9664\u53bb\u3059\u308b\u5834\u5408\u306b\u7528\u3044\u308b\u3002\n# \u30ab\u30fc\u30cd\u30eb\u30b5\u30a4\u30ba\nksize = 3\n# \u534a\u5f8420pixel\u5186\u306e\u91cd\u307f\u30ab\u30fc\u30cd\u30eb\nselem = disk(20)\n\n# OpenCV\nmedImg = cv.medianBlur(img, ksize=ksize)\n\n# scikit-learn\n# img\u304cfloat\u578b\u306e\u5834\u5408\u306f-1~1\u306b\u6b63\u898f\u5316\u3059\u308b\u5fc5\u8981\u3042\u308a\nmedImg = rank.median(img, selem=selem)\n\n\nBilateral Filtering\nGaussian filtering \u3067\u306f\u30a8\u30c3\u30b8\u306a\u3069\u7279\u5fb4\u7684\u306a\u753b\u7d20\u3082\u542b\u3081\u3066\u5e73\u6ed1\u5316\u3057\u3066\u3057\u307e\u3046\u3053\u3068\u304b\u3089\u3001\u305d\u306e\u5f8c\u306e\u753b\u50cf\u51e6\u7406\u306b\u3088\u3063\u3066\u306f\u554f\u984c\u3068\u306a\u3063\u3066\u304f\u308b\u3002\n\u305d\u3053\u3067Bilateral filtering \u3067\u306f\u3001\u30a8\u30c3\u30b8\u3092\u4fdd\u6301\u3057\u3064\u3064\u5e73\u6ed1\u5316\u3092\u884c\u3046\u3053\u3068\u304c\u3067\u304d\u308b\u3002\nGaussian filtering\u3068\u306e\u6c7a\u5b9a\u7684\u306a\u9055\u3044\u306f\u3001\u30ab\u30fc\u30cd\u30eb\u4e2d\u5fc3\u304b\u3089\u306e\u8ddd\u96e2\u5dee\u306b\u95a2\u3059\u308b\u30ac\u30a6\u30b9\u5206\u5e03\u3060\u3051\u3067\u306a\u304f\u3001\u4e2d\u5fc3\u8f1d\u5ea6\u5024\u304b\u3089\u306e\u8f1d\u5ea6\u5dee\u5206\u306b\u95a2\u3059\u308b\u30ac\u30a6\u30b9\u5206\u5e03\u306b\u5f93\u3063\u305f\u91cd\u307f\u30ab\u30fc\u30cd\u30eb\n# \u30ab\u30fc\u30cd\u30eb\u30b5\u30a4\u30ba\nd = 5\n# \u8f1d\u5ea6\u5024\u30ac\u30a6\u30b9\u5206\u5e03\u306e\u5206\u6563\nsigmaColor = 1\n# \u8ddd\u96e2\u5dee\u30ac\u30a6\u30b9\u5206\u5e03\u306e\u5206\u6563\nsigmaSpace = 1\n\n# OpenCV\nbiImage = cv.bilateralFilter(img, d=d, sigmaColor=sigmaColor, sigmaSpace=sigmaSpace)\n\n\nMorphological Operation\n\u4e3b\u306b\u30b0\u30ec\u30fc\u30b9\u30b1\u30fc\u30eb\u3084\u4e8c\u5024\u753b\u50cf\u306e\u30ce\u30a4\u30ba\u30fb\u30d0\u30c3\u30af\u30b0\u30e9\u30a6\u30f3\u30c9\u9664\u53bb\u3001\u7279\u5fb4\u62bd\u51fa\u306a\u3069\u3001\u305d\u306e\u5f8c\u306e\u753b\u50cf\u51e6\u7406\u306b\u5927\u304d\u304f\u5f71\u97ff\u3059\u308b\u51e6\u7406\u3092\u884c\u3046\u3002\n\u3053\u306e\u7bc0\u3067\u3082\u5404\u30e2\u30eb\u30d5\u30a9\u30ed\u30b8\u6f14\u7b97\u51e6\u7406\u3054\u3068\u306b\u307e\u3068\u3081\u308b\u3002\n\u500b\u4eba\u7684\u306b\u306f\u3001Dilation\u3068Erosion\u3060\u3051\u30e9\u30a4\u30d6\u30e9\u30ea\u304b\u3089\u62dd\u501f\u3057\u3066opening\u3084closing\u95a2\u6570\u3092\u69cb\u7bc9\u3057\u305f\u65b9\u304c\u8272\u3005\u3068\u81ea\u7531\u5ea6\u5897\u3057\u3066\u3044\u3044\u3068\u601d\u3063\u3066\u3044\u307e\u3075\u3002\n\nDilation\n\u4e8c\u5024\u753b\u50cf\u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u81a8\u5f35\u3055\u305b\u308b\u51e6\u7406\u3002\n# \u30ab\u30fc\u30cd\u30eb\u30b5\u30a4\u30ba\nkernel = np.ones((3,3),np.uint8)\n# \u8a66\u884c\u56de\u6570\niterations = 2\n\n# OpenCV\ndilImg = cv.dilate(thrImg, kernel=kernel, iterations=iterations)\n\n# scikit-image\ndilImg = mor.dilation(thrImg, selem=kernel)\n\n\nErosion\n\u4e8c\u5024\u753b\u50cf\u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u53ce\u7e2e\u3055\u305b\u308b\u51e6\u7406\u3002\n# OpenCV\neroImg = cv.erode(thrImg, kernel=kernel, iterations=iterations)\n\n# scikit-image\neroImg = mor.erosion(thrImg, selem=kernel)\n\n\nOpening\n\u5c0f\u3055\u306a\u30ce\u30a4\u30ba\u306a\u3069\u3092\u9664\u53bb\u3057\u305f\u3044\u3068\u304d\u306a\u3069\u306b\u7528\u3044\u308b\u3002\n\u8907\u6570\u56de\u306eErosion\u5f8c\u306b\u540c\u3058\u56de\u6570\u3060\u3051Dilation\u3092\u884c\u3046\u3002\u3053\u306e\u3068\u304d\u5404\u51e6\u7406\u56de\u6570\u306f\u9664\u53bb\u3057\u305f\u3044\u30ce\u30a4\u30ba\u306e\u5927\u304d\u3055\u306b\u4f9d\u5b58\u3059\u308b\u3002\n# OpenCV\nopenImg = cv.morphologyEx(thrImg, cv.MORPH_OPEN, kernel=kernel, iterations=iterations)\n\n# scikit-image\nopenImg = mor.opening(thrImg, selem=kernel)\n\n\nClosing\n\u30ce\u30a4\u30ba\u306e\u5f71\u97ff\u3084\u753b\u50cf\u306e\u6027\u8cea\u4e0a\u3001\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u304c\u7dba\u9e97\u306b\u4e8c\u5024\u5316\u3067\u304d\u306a\u304b\u3063\u305f\u3068\u304d\u306b\u751f\u3058\u308b\u7a74\u306a\u3069\u3092fill\u3059\u308b\u3068\u304d\u306b\u7528\u3044\u308b\u3002\n\u8907\u6570\u56de\u306eDilation\u5f8c\u306b\u540c\u3058\u56de\u6570\u3060\u3051Erosion\u3092\u884c\u3046\u3002\u3053\u306e\u3068\u304d\u5404\u51e6\u7406\u56de\u6570\u306ffill\u3057\u305f\u3044\u7a74\u306e\u5927\u304d\u3055\u306a\u3069\u306b\u4f9d\u5b58\u3059\u308b\u3002\n# OpenCV\ncloseImg = cv.morphologyEx(thrImg, cv.MORPH_CLOSE, kernel=kernel, iterations=iterations)\n\n# scikit-image\ncloseImg = mor.closing(thrImg)\n\n\nWhite Top-Hat\nopening\u51e6\u7406\u3057\u305f\u753b\u50cf\u3068\u5143\u753b\u50cf\u306e\u5dee\u5206\u3092\u51fa\u3059\u3053\u3068\u3067\u3001\u30d0\u30c3\u30af\u30b0\u30e9\u30a6\u30f3\u30c9\u306b\u5b58\u5728\u3057\u305f\u5c0f\u3055\u3044\u7279\u5fb4\u30d1\u30bf\u30fc\u30f3\u3092\u62bd\u51fa\u3059\u308b\u969b\u306b\u7528\u3044\u308b\u3002\n# OpenCV\nwthImg = cv.morphologyEx(thrImg, cv.MORPH_TOPHAT, kernel=kernel, iterations=iterations)\n\n# scikit-image\nwthImg = mor.white_tophat(thrImg)\n\n\nBlack Top-Hat\nclosing\u51e6\u7406\u3057\u305f\u753b\u50cf\u3068\u5143\u753b\u50cf\u306e\u5dee\u5206\u3092\u51fa\u3059\u3053\u3068\u3067\u3001\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u5185\u306b\u5b58\u5728\u3057\u305f\u5c0f\u3055\u3044\u7279\u5fb4\u30d1\u30bf\u30fc\u30f3\u3092\u62bd\u51fa\u3059\u308b\u969b\u306b\u7528\u3044\u308b\u3002\n# OpenCV\nbthImg = cv.morphologyEx(thrImg, cv.MORPH_BLACKHAT, kernel=kernel, iterations=iterations)\n\n# scikit-image\nbthImg = mor.black_tophat(thrImg)\n\n\n\nRotation of Image\n\u753b\u50cf\u306e\u56de\u8ee2\u3092\u884c\u3046\u95a2\u6570\u307e\u3068\u3081\u3002\n\u4eca\u56de\u306f\u753b\u50cf\u306e\u4e2d\u5fc3\u304b\u3089\u56de\u8ee2\u3055\u305b\u308b\u5834\u5408\u306b\u3064\u3044\u3066\u306e\u307f\u307e\u3068\u3081\u308b\u3002\n# \u56de\u8ee2\u89d2\u5ea6(\u53cd\u6642\u8a08\u56de\u308a)\nangle = 90\n\n# Scipy\nrotImg = ndi.interpolation.rotate(img, angle=angle)\n\n# OpenCV\nimsize = img.shape\nrotMat = cv.getRotationMatrix2D(tuple(np.array(imsize)/2), angle, scale=1.0)\nrotImg = cv.warpAffine(img, rotMat, imsize)\n\n\nInterpolation\n\u753b\u50cf\u306e\u88dc\u9593\u3092\u884c\u3046\u95a2\u6570\u307e\u3068\u3081\u3002\n\u753b\u50cf\u88dc\u9593\u624b\u6cd5\u3068\u3057\u3066\u3001Nearest, Bilinear, Bicubic\u306a\u3069\u304c\u3042\u308a\u3001\u753b\u50cf\u3084\u76ee\u7684\u306b\u5fdc\u3058\u3066\u4f7f\u3044\u5206\u3051\u308b\u3002\n# \u88dc\u9593\u30b5\u30a4\u30ba\nipsize = (200, 200)\n\n# OpneCV\n# \u88dc\u9593\u6cd5\ncv.INTER_NEAREST  # Nearest\ncv.INTER_LINEAR   # Bilinear\ncv.INTER_CUBIC    # Bicubic\nipImg = cv.resize(img, ipsize, metLinear)\n\n# scikit-image\n# \u88dc\u9593\u6cd5 (Biquintic\u306a\u3069\u3082\u7528\u610f\u3055\u308c\u3066\u3044\u308b)\norder = 0  # Nearest\norder = 1  # Bilinear (default)\norder = 3  # Bicubic\n# img\u304cfloat\u306e\u5834\u5408preserve_range\u3092True\u306b\u3057\u3066\u304a\u304f\u5fc5\u8981\u3042\u308a\nipImg = tr.resize(img, ipsize, order = 3, preserve_range = True)\n\n\n\nExtract Feature\n\u753b\u50cf\u306b\u304a\u3051\u308b\u30a8\u30c3\u30b8\u306a\u3069\u306e\u7279\u5fb4\u3092\u62bd\u51fa\u3059\u308b\u3002\n\u7279\u5fb4\u91cf\u62bd\u51fa\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u3067\u3042\u308bSIFT\u306e\u4ed6\u306b\u3082\u3001\u5fae\u5206\u30d5\u30a3\u30eb\u30bf\u306b\u3088\u308b\u30a8\u30c3\u30b8\u62bd\u51fa\u3082\u3053\u306e\u7bc0\u306b\u307e\u3068\u3081\u308b\u3002\n\nSIFT\nSIFT (Scale-Invariant Feature Transform) \u306f\u3001\u7279\u5fb4\u91cf\u62bd\u51fa\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u306e\u4e2d\u3067\u6700\u3082\u7528\u3044\u3089\u308c\u3066\u3044\u308b\u3082\u306e\u306e\u4e00\u3064\u3067\u3001\u30b9\u30b1\u30fc\u30eb\u3084\u4f4d\u7f6e\u5909\u5316\u306b\u30ed\u30d0\u30b9\u30c8\u306a\u7279\u5fb4\u91cf\u3092\u62bd\u51fa\u3057\u3066\u304f\u308c\u308b\u3002\n\u4e3b\u306b\u753b\u50cf\u8a8d\u8b58\u306e\u5206\u91ce\u3067\u3082\u3001\u30d1\u30bf\u30fc\u30f3\u8a8d\u8b58\u3084\u6a5f\u68b0\u5b66\u7fd2\u306a\u3069\u306b\u304a\u3044\u3066\u7528\u3044\u3089\u308c\u308b\u3002\nOpenCV\u306b\u7528\u610f\u3055\u308c\u3066\u3044\u308b\u95a2\u6570\u306f\u30013.0\u304b\u3089contrib\u30e2\u30b8\u30e5\u30fc\u30eb\u306b\u683c\u7d0d\u3055\u308c\u3066\u3044\u308b\u305f\u3081\u3001\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3059\u308b\u969b\u306bvariant\u306b\u8ffd\u52a0\u3057\u3066\u304a\u304f\u5fc5\u8981\u304c\u3042\u308b\u3002\n\u307e\u305f\u30012.4\u307e\u3067\u306e\u30d0\u30fc\u30b8\u30e7\u30f3\u3067\u884c\u3046\u65b9\u6cd5\u3082\u5225\u306b\u3042\u308b\u304c\u3001\u4eca\u56de\u306f3.0\u4ee5\u964d\u306eOpenCV\u3067\u3042\u308b\u3053\u3068\u3092\u524d\u63d0\u306b\u307e\u3068\u3081\u308b\u3002\n# \u7279\u5fb4\u91cf\u62bd\u51fa\ndet = cv.xfeatures2d.SIFT_create()\nkp = det.detect(img)   # img\u306fCV_8U(uint8)\n\n# \u753b\u50cf\u306b\u4ed8\u52a0\nsiftImg = cv.drawKeypoints(img, kp, None)\n\n\nSURF\nSURF (Speeded-Up Robust Features) \u306f\u3001SIFT\u306e\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u306b\u304a\u3051\u308b\u7279\u5fb4\u91cf\u3092\u8868\u3059\u30d9\u30af\u30c8\u30eb\u306e\u6b21\u5143\u6570\u3092\u524a\u6e1b\u3059\u308b\u4ee3\u308f\u308a\u306b\u3001\u51e6\u7406\u901f\u5ea6\u3092\u4e0a\u3052\u305f\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u3002\n# \u7279\u5fb4\u91cf\u62bd\u51fa\ndet = cv.xfeatures2d.SURF_create()\nkp = det.detect(img)   # img\u306fCV_8U(uint8)\n\n# \u753b\u50cf\u306b\u4ed8\u52a0\nsurfImg = cv.drawKeypoints(img, kp, None)\n\n\n\nPrewitt Filtering\n\u753b\u50cf\u5185\u306e\u8f1d\u5ea6\u52fe\u914d\u3092\u691c\u51fa\u3059\u308b\u305f\u3081\u306e\u30d5\u30a3\u30eb\u30bf\u30ea\u30f3\u30b0\u624b\u6cd5\u3002\nPrewitt Filter\u306e\u30b3\u30f3\u30bb\u30d7\u30c8\u306f\u3001\u30ab\u30fc\u30cd\u30eb\u306b\u304a\u3051\u308b\u3042\u308b\u65b9\u5411\u306e\u52fe\u914d\u3092\u8a08\u7b97\u3059\u308b\u969b\u306b\u3001\u305d\u306e\u65b9\u5411\u3068\u6c34\u5e73\u65b9\u5411\u306b\u5e73\u6ed1\u5316\u3092\u884c\u3063\u3066\u304b\u3089\u5fae\u5206\u3092\u884c\u3046\u3068\u3044\u3046\u3082\u306e\u3002\n# SciPy\npreImg = ndi.filters.prewitt(img)\n\n\nSobel Filtering\nPrewitt Filter\u3068\u307b\u3068\u3093\u3069\u540c\u3058\u5fae\u5206\u30d5\u30a3\u30eb\u30bf\u3067\u3042\u308b\u304c\u3001\u3055\u3089\u306b\u30ab\u30fc\u30cd\u30eb\u5185\u306e\u4e2d\u592e\u306b\u91cd\u307f\u4ed8\u3051\u3057\u3066\u3042\u308b\u70b9\u304c\u7570\u306a\u308b\u3002\n\u500b\u4eba\u7684\u306b\u306fSobel Filter\u306e\u65b9\u304c\u30a8\u30c3\u30b8\u3092\u304d\u308c\u3044\u306b\u53d6\u308c\u3066\u3053\u308c\u308b\u5370\u8c61\u3002\n# SciPy\nsobImg = ndi.filters.sobel(img)\n\n\n\nOthers\n\nDownhill Filtering\n\u30d0\u30c3\u30af\u30b0\u30e9\u30a6\u30f3\u30c9(BG)\u9664\u53bb\u306b\u7528\u3044\u308b\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u3002\u4e2d\u8eab\u306f\u5143\u8ad6\u6587[1]\u53c2\u7167\u3002\n# seed (BG\u3068\u3057\u3066\u307f\u306a\u3059\u5024\u306e\u57fa\u6e96) \u306e\u4f5c\u6210\nseed = copy.deepcopy(img)\nseed[1:-1, 1:-1] = img.min()\n\ndilatedImg = mor.reconstruction(seed, img, method='dilation')\ndhImg = copy.deepcopy(img - dilated)\n\n\n\n\u307e\u3068\u3081\n\u753b\u50cf\u51e6\u7406\u306b\u304a\u3044\u3066\u3069\u306e\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u4f7f\u3046\u306b\u3057\u3066\u3082\u3001\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u3092\u7406\u89e3\u3057\u306a\u3044\u3067\u7528\u3044\u308b\u3053\u3068\u306f\u5371\u967a\u306a\u305f\u3081\u3001\u4e2d\u8eab\u3092\u719f\u77e5\u3057\u3066\u3044\u308b\u4f7f\u3044\u6163\u308c\u3066\u3044\u308b\u30e9\u30a4\u30d6\u30e9\u30ea\u3067\u4e00\u8cab\u3057\u3066Cording\u3057\u3066\u3044\u304f\u3053\u3068\u304c\u5927\u4e8b\u3060\u3068\u601d\u3046\u3002\n\u307e\u305f\u3001\u81ea\u5206\u304c\u884c\u3046\u753b\u50cf\u89e3\u6790\u3067\u306f\u4e3b\u306b\u30b0\u30ec\u30fc\u30b9\u30b1\u30fc\u30eb\u753b\u50cf\u304c\u5bfe\u8c61\u3067\u3042\u308b\u305f\u3081\u3001RGB\u753b\u50cf\u306b\u304a\u3051\u308b\u753b\u50cf\u51e6\u7406\u306f\u82e6\u624b\u3067\u4eca\u56de\u306e\u5185\u5bb9\u306b\u3082\u3042\u307e\u308a\u53cd\u6620\u3067\u304d\u3066\u3044\u306a\u3044\u3002\n\u4eca\u5f8c\u306fRGB\u753b\u50cf\u3082\u898b\u636e\u3048\u305f\u30de\u30eb\u30c1\u30c1\u30e3\u30cd\u30eb\u753b\u50cf\u51e6\u7406\u3092\u7fd2\u5f97\u3057\u3066\u3044\u304d\u305f\u3044\u3002\n\u5185\u5bb9\u306f\u968f\u6642\u66f4\u65b0\u3057\u3066\u3044\u304f\u4e88\u5b9a\u3002\n\n\u53c2\u8003\u6587\u732e\n[1] Robinson, Kevin, and Paul F. Whelan. \"Efficient morphological reconstruction: a downhill filter.\" Pattern Recognition Letters 25.15 (2004): 1759-1767.\nPython\u3067\u3088\u304f\u4f7f\u3046\u753b\u50cf\u51e6\u7406\u30e9\u30a4\u30d6\u30e9\u30ea\u306e\u95a2\u6570\u307e\u3068\u3081\u5099\u5fd8\u9332\u3002\n\u968f\u6642\u66f4\u65b0\u4e88\u5b9a\u3002\n\n\u4ee5\u4e0b\u306e\u30e9\u30a4\u30d6\u30e9\u30ea\u3092import\u3057\u3066\u3044\u308b\u3053\u3068\u304c\u524d\u63d0\n\n```py\nimport numpy as np\nimport copy\nimport cv2 as cv\nimport skimage\nimport skimage.io as sk\nimport skimage.filters as fil\nimport skimage.filters.rank as rank\nimport skimage.morphology as mor\nimport skimage.transform as tr\nimport scipy.misc as sp\nimport scipy.ndimage as ndi\n```\n\n# Read Image\n\u753b\u50cf\u306e\u8aad\u307f\u8fbc\u307f\u306b\u4f7f\u3046\u30e9\u30a4\u30d6\u30e9\u30ea\u3054\u3068\u306e\u6bd4\u8f03\n\n### scikit-image\n\n```python\nimg = sk.imread(filename,as_grey=False,plugin=None,flatten=None)\n```\n\n* \u30de\u30eb\u30c1\u30c1\u30e3\u30cd\u30eb\u753b\u50cf\u8aad\u307f\u8fbc\u307f\u53ef\u80fd\u3000(3D multi channel \u753b\u50cf\u306b\u306f\u3053\u308c)\n* as_gray=True\u3067RGB\u753b\u50cf\u3092\u8aad\u307f\u8fbc\u3080\u969b\u306b\u30b0\u30ec\u30a4\u30b9\u30b1\u30fc\u30eb\u5909\u63db\u3057\u3066\u304f\u308c\u308b\u304c\u300164bit-float\u306b\u306a\u3063\u3066\u753b\u7d20\u5024\u304c\u6f70\u3055\u308c\u3066\u3057\u307e\u3046\u305f\u3081\u6c17\u3092\u4ed8\u3051\u308b\u5fc5\u8981\u3042\u308a\n\n### OpenCV\n\n```py\nimg = cv.imread((filename[, flags])\n```\n\n* flags\n  + cv.IMREAD_COLOR (or 1) : RGB\u753b\u50cf\u3092\u8aad\u307f\u8fbc\u307f\n  + cv.IMREAD_GRAYSCALE\uff08or 0\uff09: \u30b0\u30ec\u30a4\u30b9\u30b1\u30fc\u30eb\u306b\u5909\u63db\u3057\u3066\u8aad\u307f\u8fbc\u307f\n  + cv.IMREAD_UNCHANGED\uff08or -1\uff09: \u5909\u63db\u306a\u3057\u8aad\u307f\u8fbc\u307f (\u03b1 \u30c1\u30e3\u30cd\u30eb\u3082\u8aad\u307f\u8fbc\u307f\u53ef\u80fd)\n* RGB\u753b\u50cf\u306e\u8aad\u307f\u8fbc\u307f\u306f\u30c1\u30e3\u30cd\u30eb\u304cBGR\u306b\u306a\u308b\u304b\u3089\u6ce8\u610f\n* cv.cvtColor(image, cv2.COLOR_BGR2RGB)\u3067RGB\u306b\u5909\u63db\u53ef\u80fd\n\n### SciPy\n\n```py\nimg = sp.imread(name, flatten=False, mode=None)\n```\n* \u666e\u6bb5\u3042\u307e\u308a\u4f7f\u308f\u306a\u3044\u304c\u3001\u4e0a\u306e\u4e8c\u3064\u3067\u7121\u7406\u3060\u3063\u305f\u5834\u5408\u983c\u308b\n* mode : str, optional\n  * 'L' : \u30b0\u30ec\u30a4\u30b9\u30b1\u30fc\u30eb\u5909\u63db\u8aad\u307f\u8fbc\u307f(8-bit)\n  * 'RGB' : RGB\u753b\u50cf\u8aad\u307f\u8fbc\u307f (3x8-bit)\n  * 'RGBA' : 4 channel\u8aad\u307f\u8fbc\u307f(4x8-bit)\n  * 'I' : \u30b0\u30ec\u30a4\u30b9\u30b1\u30fc\u30eb\u5909\u63db\u8aad\u307f\u8fbc\u307f (32-bit signed integer)\n  * 'F' : \u30b0\u30ec\u30a4\u30b9\u30b1\u30fc\u30eb\u5909\u63db\u8aad\u307f\u8fbc\u307f (32-bit floating point)\n  * \u4ed6\u306b\u3082 'P', 'CMYK', 'YCbCr' \u304c\u3042\u308b\n\n\n# Binalization\n\n\u753b\u50cf\u306e\u4e8c\u5024\u5316\u306f\u57fa\u672c\u7684\u306b\u5927\u6d25\u304f\u3089\u3044\u3057\u304b\u7528\u3044\u306a\u3044\u304c\u3001\u76ee\u7684\u306b\u3088\u3063\u3066\u306f\u4ed6\u306e\u624b\u6cd5\u3082\u7528\u3044\u308b\u306e\u3067\u53c2\u8003\u307e\u3067\u306b\u3002\n\n### scikit-image\n\n```py\n# \u5404\u4e8c\u5024\u5316\u624b\u6cd5\u306e\u95be\u5024\u3092\u6c42\u3081\u308b\nthrOtsu = fil.threshold_otsu(img)\nthrli = fil.threshold_li(img)\nthrIso = fil.threshold_isodata(img)\nthrYen = fil.threshold_yen(img)\n\n# \u4e8c\u5024\u5316\nthrImg = ((thrOtsu < img) * 255).astype(np.uint8)\n```\n\n![binalization.001.jpeg](https://qiita-image-store.s3.amazonaws.com/0/137574/88838ee1-2bc1-f3ad-0099-8d8782baf0e2.jpeg)\n\n### OpenCV\n\n\u307e\u3063\u305f\u304f\u4f7f\u308f\u306a\u3044\u304c\u8aad\u307f\u8fbc\u307f\u306a\u3069\u4e00\u8cab\u3057\u3066OpenCV\u3092\u4f7f\u3063\u3066\u308b\u3068\u304d\u306a\u3069\u306b\u3002\n\n```py\nthr, thrImg = cv.threshold(img, 0, 255, cv.THRESH_BINARY + cv.THRESH_OTSU)\n```\n\n\n# Filtering\n\n\u4e3b\u306b\u753b\u50cf\u51e6\u7406\u306e\u524d\u51e6\u7406\u3068\u3057\u3066\u884c\u3046\u30ce\u30a4\u30ba\u9664\u53bb\u306b\u7528\u3044\u308b\u3002\n\u30ce\u30a4\u30ba\u9664\u53bb\u3067\u306f\u3001\u30ce\u30a4\u30ba\u306e\u7a2e\u985e\u3084\u753b\u50cf\u306e\u7279\u5fb4\u306b\u5408\u308f\u305b\u3066\u69d8\u3005\u306a filtering \u3092\u4f7f\u3044\u5206\u3051\u308b\u5fc5\u8981\u304c\u3042\u308b\u3002\n\u306a\u306e\u3067\u3053\u3053\u3067\u306e\u69cb\u6210\u306f\u3001\u4f7f\u3044\u5206\u3051\u3067\u304d\u308b\u3088\u3046\u306b filtering \u306e\u7a2e\u985e\u3054\u3068\u306b\u307e\u3068\u3081\u308b\u3002\n\n### Gaussian Fitering\n\u30ac\u30a6\u30b9\u5206\u5e03\u306b\u5f93\u3063\u305f\u91cd\u307f\u30ab\u30fc\u30cd\u30eb\u3067\u7573\u307f\u8fbc\u3080\u3002\u4e00\u822c\u7684\u306a\u753b\u50cf\u306e\u5e73\u6ed1\u5316\u306b\u7528\u3044\u308b\u3002\n\n```python\n# \u6b63\u898f\u5206\u5e03\u306e\u5206\u6563\nsigma = 1\n# \u30ab\u30fc\u30cd\u30eb\u30b5\u30a4\u30ba\nksize = (3, 3)\n\n# OpenCV\ngauImg = cv.GaussianBlur(img, ksize=ksize, sigmaX=sigma)\n\n# SciPy\ngauImg = ndi.gaussian_filter(img, sigma=sigma)\n\n# scikit-image\n# img\u304cfloat\u578b\u306e\u5834\u5408\u306f-1~1\u306b\u6b63\u898f\u5316\u3059\u308b\u5fc5\u8981\u3042\u308a\ngauImg = fil.gaussian_filter(img, sigma=sigma)\n\n```\n\n### Mean Filtering\n\n\u5e73\u5747\u91cd\u307f\u30ab\u30fc\u30cd\u30eb\u3067\u7573\u307f\u8fbc\u3080\u3002\n\u4e00\u69d8\u30ce\u30a4\u30ba\u306e\u3088\u3046\u306a\u7d30\u304b\u3044\u30ce\u30a4\u30ba\u306a\u3069\u3092\u9664\u53bb\u3059\u308b\u5834\u5408\u306b\u7528\u3044\u308b\u3002\n\n```python\n# \u30ab\u30fc\u30cd\u30eb\u30b5\u30a4\u30ba\nksize = (5, 5)\n# \u534a\u5f8420pixel\u5186\u306e\u91cd\u307f\u30ab\u30fc\u30cd\u30eb\nselem = disk(20)\n\n# OpenCV\nmeanImg = cv.blur(img, ksize=ksize)\n\n# scikit-image\n# img\u304cfloat\u578b\u306e\u5834\u5408\u306f-1~1\u306b\u6b63\u898f\u5316\u3059\u308b\u5fc5\u8981\u3042\u308a\nmeanImg = rank.mean(img, selem=selem)\n```\n\n### Median Filtering\n\n\u4e2d\u592e\u5024\u30d5\u30a3\u30eb\u30bf\u30ea\u30f3\u30b0\u3002\n\u30b4\u30de\u5869\u30ce\u30a4\u30ba\u306e\u3088\u3046\u306a\u30b9\u30d1\u30a4\u30af\u72b6\u306e\u30ce\u30a4\u30ba\u306a\u3069\u3092\u9664\u53bb\u3059\u308b\u5834\u5408\u306b\u7528\u3044\u308b\u3002\n\n```python\n# \u30ab\u30fc\u30cd\u30eb\u30b5\u30a4\u30ba\nksize = 3\n# \u534a\u5f8420pixel\u5186\u306e\u91cd\u307f\u30ab\u30fc\u30cd\u30eb\nselem = disk(20)\n\n# OpenCV\nmedImg = cv.medianBlur(img, ksize=ksize)\n\n# scikit-learn\n# img\u304cfloat\u578b\u306e\u5834\u5408\u306f-1~1\u306b\u6b63\u898f\u5316\u3059\u308b\u5fc5\u8981\u3042\u308a\nmedImg = rank.median(img, selem=selem)\n```\n\n### Bilateral Filtering\n\nGaussian filtering \u3067\u306f\u30a8\u30c3\u30b8\u306a\u3069\u7279\u5fb4\u7684\u306a\u753b\u7d20\u3082\u542b\u3081\u3066\u5e73\u6ed1\u5316\u3057\u3066\u3057\u307e\u3046\u3053\u3068\u304b\u3089\u3001\u305d\u306e\u5f8c\u306e\u753b\u50cf\u51e6\u7406\u306b\u3088\u3063\u3066\u306f\u554f\u984c\u3068\u306a\u3063\u3066\u304f\u308b\u3002\n\u305d\u3053\u3067Bilateral filtering \u3067\u306f\u3001\u30a8\u30c3\u30b8\u3092\u4fdd\u6301\u3057\u3064\u3064\u5e73\u6ed1\u5316\u3092\u884c\u3046\u3053\u3068\u304c\u3067\u304d\u308b\u3002\nGaussian filtering\u3068\u306e\u6c7a\u5b9a\u7684\u306a\u9055\u3044\u306f\u3001\u30ab\u30fc\u30cd\u30eb\u4e2d\u5fc3\u304b\u3089\u306e\u8ddd\u96e2\u5dee\u306b\u95a2\u3059\u308b\u30ac\u30a6\u30b9\u5206\u5e03\u3060\u3051\u3067\u306a\u304f\u3001\u4e2d\u5fc3\u8f1d\u5ea6\u5024\u304b\u3089\u306e\u8f1d\u5ea6\u5dee\u5206\u306b\u95a2\u3059\u308b\u30ac\u30a6\u30b9\u5206\u5e03\u306b\u5f93\u3063\u305f\u91cd\u307f\u30ab\u30fc\u30cd\u30eb\n\n```python\n# \u30ab\u30fc\u30cd\u30eb\u30b5\u30a4\u30ba\nd = 5\n# \u8f1d\u5ea6\u5024\u30ac\u30a6\u30b9\u5206\u5e03\u306e\u5206\u6563\nsigmaColor = 1\n# \u8ddd\u96e2\u5dee\u30ac\u30a6\u30b9\u5206\u5e03\u306e\u5206\u6563\nsigmaSpace = 1\n\n# OpenCV\nbiImage = cv.bilateralFilter(img, d=d, sigmaColor=sigmaColor, sigmaSpace=sigmaSpace)\n```\n\n# Morphological Operation\n\n\u4e3b\u306b\u30b0\u30ec\u30fc\u30b9\u30b1\u30fc\u30eb\u3084\u4e8c\u5024\u753b\u50cf\u306e\u30ce\u30a4\u30ba\u30fb\u30d0\u30c3\u30af\u30b0\u30e9\u30a6\u30f3\u30c9\u9664\u53bb\u3001\u7279\u5fb4\u62bd\u51fa\u306a\u3069\u3001\u305d\u306e\u5f8c\u306e\u753b\u50cf\u51e6\u7406\u306b\u5927\u304d\u304f\u5f71\u97ff\u3059\u308b\u51e6\u7406\u3092\u884c\u3046\u3002\n\u3053\u306e\u7bc0\u3067\u3082\u5404\u30e2\u30eb\u30d5\u30a9\u30ed\u30b8\u6f14\u7b97\u51e6\u7406\u3054\u3068\u306b\u307e\u3068\u3081\u308b\u3002\n\u500b\u4eba\u7684\u306b\u306f\u3001Dilation\u3068Erosion\u3060\u3051\u30e9\u30a4\u30d6\u30e9\u30ea\u304b\u3089\u62dd\u501f\u3057\u3066opening\u3084closing\u95a2\u6570\u3092\u69cb\u7bc9\u3057\u305f\u65b9\u304c\u8272\u3005\u3068\u81ea\u7531\u5ea6\u5897\u3057\u3066\u3044\u3044\u3068\u601d\u3063\u3066\u3044\u307e\u3075\u3002\n\n### Dilation\n\n\u4e8c\u5024\u753b\u50cf\u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u81a8\u5f35\u3055\u305b\u308b\u51e6\u7406\u3002\n\n```python\n# \u30ab\u30fc\u30cd\u30eb\u30b5\u30a4\u30ba\nkernel = np.ones((3,3),np.uint8)\n# \u8a66\u884c\u56de\u6570\niterations = 2\n\n# OpenCV\ndilImg = cv.dilate(thrImg, kernel=kernel, iterations=iterations)\n\n# scikit-image\ndilImg = mor.dilation(thrImg, selem=kernel)\n```\n\n### Erosion\n\n\u4e8c\u5024\u753b\u50cf\u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u53ce\u7e2e\u3055\u305b\u308b\u51e6\u7406\u3002\n\n```python\n# OpenCV\neroImg = cv.erode(thrImg, kernel=kernel, iterations=iterations)\n\n# scikit-image\neroImg = mor.erosion(thrImg, selem=kernel)\n```\n\n### Opening\n\n\u5c0f\u3055\u306a\u30ce\u30a4\u30ba\u306a\u3069\u3092\u9664\u53bb\u3057\u305f\u3044\u3068\u304d\u306a\u3069\u306b\u7528\u3044\u308b\u3002\n\u8907\u6570\u56de\u306eErosion\u5f8c\u306b\u540c\u3058\u56de\u6570\u3060\u3051Dilation\u3092\u884c\u3046\u3002\u3053\u306e\u3068\u304d\u5404\u51e6\u7406\u56de\u6570\u306f\u9664\u53bb\u3057\u305f\u3044\u30ce\u30a4\u30ba\u306e\u5927\u304d\u3055\u306b\u4f9d\u5b58\u3059\u308b\u3002\n\n```python\n# OpenCV\nopenImg = cv.morphologyEx(thrImg, cv.MORPH_OPEN, kernel=kernel, iterations=iterations)\n\n# scikit-image\nopenImg = mor.opening(thrImg, selem=kernel)\n```\n\n### Closing\n\n\u30ce\u30a4\u30ba\u306e\u5f71\u97ff\u3084\u753b\u50cf\u306e\u6027\u8cea\u4e0a\u3001\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u304c\u7dba\u9e97\u306b\u4e8c\u5024\u5316\u3067\u304d\u306a\u304b\u3063\u305f\u3068\u304d\u306b\u751f\u3058\u308b\u7a74\u306a\u3069\u3092fill\u3059\u308b\u3068\u304d\u306b\u7528\u3044\u308b\u3002\n\u8907\u6570\u56de\u306eDilation\u5f8c\u306b\u540c\u3058\u56de\u6570\u3060\u3051Erosion\u3092\u884c\u3046\u3002\u3053\u306e\u3068\u304d\u5404\u51e6\u7406\u56de\u6570\u306ffill\u3057\u305f\u3044\u7a74\u306e\u5927\u304d\u3055\u306a\u3069\u306b\u4f9d\u5b58\u3059\u308b\u3002\n\n```python\n# OpenCV\ncloseImg = cv.morphologyEx(thrImg, cv.MORPH_CLOSE, kernel=kernel, iterations=iterations)\n\n# scikit-image\ncloseImg = mor.closing(thrImg)\n```\n\n### White Top-Hat\n\nopening\u51e6\u7406\u3057\u305f\u753b\u50cf\u3068\u5143\u753b\u50cf\u306e\u5dee\u5206\u3092\u51fa\u3059\u3053\u3068\u3067\u3001\u30d0\u30c3\u30af\u30b0\u30e9\u30a6\u30f3\u30c9\u306b\u5b58\u5728\u3057\u305f\u5c0f\u3055\u3044\u7279\u5fb4\u30d1\u30bf\u30fc\u30f3\u3092\u62bd\u51fa\u3059\u308b\u969b\u306b\u7528\u3044\u308b\u3002\n\n```python\n# OpenCV\nwthImg = cv.morphologyEx(thrImg, cv.MORPH_TOPHAT, kernel=kernel, iterations=iterations)\n\n# scikit-image\nwthImg = mor.white_tophat(thrImg)\n```\n\n### Black Top-Hat\n\nclosing\u51e6\u7406\u3057\u305f\u753b\u50cf\u3068\u5143\u753b\u50cf\u306e\u5dee\u5206\u3092\u51fa\u3059\u3053\u3068\u3067\u3001\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u5185\u306b\u5b58\u5728\u3057\u305f\u5c0f\u3055\u3044\u7279\u5fb4\u30d1\u30bf\u30fc\u30f3\u3092\u62bd\u51fa\u3059\u308b\u969b\u306b\u7528\u3044\u308b\u3002\n\n```python\n# OpenCV\nbthImg = cv.morphologyEx(thrImg, cv.MORPH_BLACKHAT, kernel=kernel, iterations=iterations)\n\n# scikit-image\nbthImg = mor.black_tophat(thrImg)\n```\n\n![morphorogy2.001.jpeg](https://qiita-image-store.s3.amazonaws.com/0/137574/4f02548d-487a-fc62-5cdd-7309aeee5382.jpeg)\n\n\n# Rotation of Image\n\n\u753b\u50cf\u306e\u56de\u8ee2\u3092\u884c\u3046\u95a2\u6570\u307e\u3068\u3081\u3002\n\u4eca\u56de\u306f\u753b\u50cf\u306e\u4e2d\u5fc3\u304b\u3089\u56de\u8ee2\u3055\u305b\u308b\u5834\u5408\u306b\u3064\u3044\u3066\u306e\u307f\u307e\u3068\u3081\u308b\u3002\n\n```python\n# \u56de\u8ee2\u89d2\u5ea6(\u53cd\u6642\u8a08\u56de\u308a)\nangle = 90\n\n# Scipy\nrotImg = ndi.interpolation.rotate(img, angle=angle)\n\n# OpenCV\nimsize = img.shape\nrotMat = cv.getRotationMatrix2D(tuple(np.array(imsize)/2), angle, scale=1.0)\nrotImg = cv.warpAffine(img, rotMat, imsize)\n```\n\n# Interpolation\n\n\u753b\u50cf\u306e\u88dc\u9593\u3092\u884c\u3046\u95a2\u6570\u307e\u3068\u3081\u3002\n\u753b\u50cf\u88dc\u9593\u624b\u6cd5\u3068\u3057\u3066\u3001Nearest, Bilinear, Bicubic\u306a\u3069\u304c\u3042\u308a\u3001\u753b\u50cf\u3084\u76ee\u7684\u306b\u5fdc\u3058\u3066\u4f7f\u3044\u5206\u3051\u308b\u3002\n\n```python\n# \u88dc\u9593\u30b5\u30a4\u30ba\nipsize = (200, 200)\n\n# OpneCV\n# \u88dc\u9593\u6cd5\ncv.INTER_NEAREST  # Nearest\ncv.INTER_LINEAR   # Bilinear\ncv.INTER_CUBIC    # Bicubic\nipImg = cv.resize(img, ipsize, metLinear)\n\n# scikit-image\n# \u88dc\u9593\u6cd5 (Biquintic\u306a\u3069\u3082\u7528\u610f\u3055\u308c\u3066\u3044\u308b)\norder = 0  # Nearest\norder = 1  # Bilinear (default)\norder = 3  # Bicubic\n# img\u304cfloat\u306e\u5834\u5408preserve_range\u3092True\u306b\u3057\u3066\u304a\u304f\u5fc5\u8981\u3042\u308a\nipImg = tr.resize(img, ipsize, order = 3, preserve_range = True)\n```\n\n![interpolation.001.jpeg](https://qiita-image-store.s3.amazonaws.com/0/137574/87536b23-cb1b-73b0-ae5f-578caefdce34.jpeg)\n\n\n# Extract Feature\n\n\u753b\u50cf\u306b\u304a\u3051\u308b\u30a8\u30c3\u30b8\u306a\u3069\u306e\u7279\u5fb4\u3092\u62bd\u51fa\u3059\u308b\u3002\n\u7279\u5fb4\u91cf\u62bd\u51fa\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u3067\u3042\u308bSIFT\u306e\u4ed6\u306b\u3082\u3001\u5fae\u5206\u30d5\u30a3\u30eb\u30bf\u306b\u3088\u308b\u30a8\u30c3\u30b8\u62bd\u51fa\u3082\u3053\u306e\u7bc0\u306b\u307e\u3068\u3081\u308b\u3002\n\n### SIFT\n\nSIFT (Scale-Invariant Feature Transform) \u306f\u3001\u7279\u5fb4\u91cf\u62bd\u51fa\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u306e\u4e2d\u3067\u6700\u3082\u7528\u3044\u3089\u308c\u3066\u3044\u308b\u3082\u306e\u306e\u4e00\u3064\u3067\u3001\u30b9\u30b1\u30fc\u30eb\u3084\u4f4d\u7f6e\u5909\u5316\u306b\u30ed\u30d0\u30b9\u30c8\u306a\u7279\u5fb4\u91cf\u3092\u62bd\u51fa\u3057\u3066\u304f\u308c\u308b\u3002\n\u4e3b\u306b\u753b\u50cf\u8a8d\u8b58\u306e\u5206\u91ce\u3067\u3082\u3001\u30d1\u30bf\u30fc\u30f3\u8a8d\u8b58\u3084\u6a5f\u68b0\u5b66\u7fd2\u306a\u3069\u306b\u304a\u3044\u3066\u7528\u3044\u3089\u308c\u308b\u3002\n\nOpenCV\u306b\u7528\u610f\u3055\u308c\u3066\u3044\u308b\u95a2\u6570\u306f\u30013.0\u304b\u3089contrib\u30e2\u30b8\u30e5\u30fc\u30eb\u306b\u683c\u7d0d\u3055\u308c\u3066\u3044\u308b\u305f\u3081\u3001\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3059\u308b\u969b\u306bvariant\u306b\u8ffd\u52a0\u3057\u3066\u304a\u304f\u5fc5\u8981\u304c\u3042\u308b\u3002\n\u307e\u305f\u30012.4\u307e\u3067\u306e\u30d0\u30fc\u30b8\u30e7\u30f3\u3067\u884c\u3046\u65b9\u6cd5\u3082\u5225\u306b\u3042\u308b\u304c\u3001\u4eca\u56de\u306f3.0\u4ee5\u964d\u306eOpenCV\u3067\u3042\u308b\u3053\u3068\u3092\u524d\u63d0\u306b\u307e\u3068\u3081\u308b\u3002\n\n```python\n# \u7279\u5fb4\u91cf\u62bd\u51fa\ndet = cv.xfeatures2d.SIFT_create()\nkp = det.detect(img)   # img\u306fCV_8U(uint8)\n\n# \u753b\u50cf\u306b\u4ed8\u52a0\nsiftImg = cv.drawKeypoints(img, kp, None)\n```\n\n### SURF\n\nSURF (Speeded-Up Robust Features) \u306f\u3001SIFT\u306e\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u306b\u304a\u3051\u308b\u7279\u5fb4\u91cf\u3092\u8868\u3059\u30d9\u30af\u30c8\u30eb\u306e\u6b21\u5143\u6570\u3092\u524a\u6e1b\u3059\u308b\u4ee3\u308f\u308a\u306b\u3001\u51e6\u7406\u901f\u5ea6\u3092\u4e0a\u3052\u305f\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u3002\n\n```python\n# \u7279\u5fb4\u91cf\u62bd\u51fa\ndet = cv.xfeatures2d.SURF_create()\nkp = det.detect(img)   # img\u306fCV_8U(uint8)\n\n# \u753b\u50cf\u306b\u4ed8\u52a0\nsurfImg = cv.drawKeypoints(img, kp, None)\n```\n\n![siftandsurf.001.jpeg](https://qiita-image-store.s3.amazonaws.com/0/137574/8c547e28-df78-8556-997c-22767df09c3f.jpeg)\n\n\n### Prewitt Filtering\n\n\u753b\u50cf\u5185\u306e\u8f1d\u5ea6\u52fe\u914d\u3092\u691c\u51fa\u3059\u308b\u305f\u3081\u306e\u30d5\u30a3\u30eb\u30bf\u30ea\u30f3\u30b0\u624b\u6cd5\u3002\nPrewitt Filter\u306e\u30b3\u30f3\u30bb\u30d7\u30c8\u306f\u3001\u30ab\u30fc\u30cd\u30eb\u306b\u304a\u3051\u308b\u3042\u308b\u65b9\u5411\u306e\u52fe\u914d\u3092\u8a08\u7b97\u3059\u308b\u969b\u306b\u3001\u305d\u306e\u65b9\u5411\u3068\u6c34\u5e73\u65b9\u5411\u306b\u5e73\u6ed1\u5316\u3092\u884c\u3063\u3066\u304b\u3089\u5fae\u5206\u3092\u884c\u3046\u3068\u3044\u3046\u3082\u306e\u3002\n\n```python\n# SciPy\npreImg = ndi.filters.prewitt(img)\n```\n\n### Sobel Filtering\n\nPrewitt Filter\u3068\u307b\u3068\u3093\u3069\u540c\u3058\u5fae\u5206\u30d5\u30a3\u30eb\u30bf\u3067\u3042\u308b\u304c\u3001\u3055\u3089\u306b\u30ab\u30fc\u30cd\u30eb\u5185\u306e\u4e2d\u592e\u306b\u91cd\u307f\u4ed8\u3051\u3057\u3066\u3042\u308b\u70b9\u304c\u7570\u306a\u308b\u3002\n\u500b\u4eba\u7684\u306b\u306fSobel Filter\u306e\u65b9\u304c\u30a8\u30c3\u30b8\u3092\u304d\u308c\u3044\u306b\u53d6\u308c\u3066\u3053\u308c\u308b\u5370\u8c61\u3002\n\n```python\n# SciPy\nsobImg = ndi.filters.sobel(img)\n```\n\n![presob.001.jpeg](https://qiita-image-store.s3.amazonaws.com/0/137574/672f9a63-0899-8e91-6399-b2fc79794503.jpeg)\n\n\n# Others\n\n### Downhill Filtering\n\n\u30d0\u30c3\u30af\u30b0\u30e9\u30a6\u30f3\u30c9(BG)\u9664\u53bb\u306b\u7528\u3044\u308b\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u3002\u4e2d\u8eab\u306f\u5143\u8ad6\u6587[1]\u53c2\u7167\u3002\n\n```python\n# seed (BG\u3068\u3057\u3066\u307f\u306a\u3059\u5024\u306e\u57fa\u6e96) \u306e\u4f5c\u6210\nseed = copy.deepcopy(img)\nseed[1:-1, 1:-1] = img.min()\n\ndilatedImg = mor.reconstruction(seed, img, method='dilation')\ndhImg = copy.deepcopy(img - dilated)\n```\n\n![downhill.001.jpeg](https://qiita-image-store.s3.amazonaws.com/0/137574/c8a95105-9c9c-80d4-dac0-5ac6c3c9d0c6.jpeg)\n\n\n# \u307e\u3068\u3081\n\n\u753b\u50cf\u51e6\u7406\u306b\u304a\u3044\u3066\u3069\u306e\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u4f7f\u3046\u306b\u3057\u3066\u3082\u3001\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u3092\u7406\u89e3\u3057\u306a\u3044\u3067\u7528\u3044\u308b\u3053\u3068\u306f\u5371\u967a\u306a\u305f\u3081\u3001\u4e2d\u8eab\u3092\u719f\u77e5\u3057\u3066\u3044\u308b\u4f7f\u3044\u6163\u308c\u3066\u3044\u308b\u30e9\u30a4\u30d6\u30e9\u30ea\u3067\u4e00\u8cab\u3057\u3066Cording\u3057\u3066\u3044\u304f\u3053\u3068\u304c\u5927\u4e8b\u3060\u3068\u601d\u3046\u3002\n\u307e\u305f\u3001\u81ea\u5206\u304c\u884c\u3046\u753b\u50cf\u89e3\u6790\u3067\u306f\u4e3b\u306b\u30b0\u30ec\u30fc\u30b9\u30b1\u30fc\u30eb\u753b\u50cf\u304c\u5bfe\u8c61\u3067\u3042\u308b\u305f\u3081\u3001RGB\u753b\u50cf\u306b\u304a\u3051\u308b\u753b\u50cf\u51e6\u7406\u306f\u82e6\u624b\u3067\u4eca\u56de\u306e\u5185\u5bb9\u306b\u3082\u3042\u307e\u308a\u53cd\u6620\u3067\u304d\u3066\u3044\u306a\u3044\u3002\n\u4eca\u5f8c\u306fRGB\u753b\u50cf\u3082\u898b\u636e\u3048\u305f\u30de\u30eb\u30c1\u30c1\u30e3\u30cd\u30eb\u753b\u50cf\u51e6\u7406\u3092\u7fd2\u5f97\u3057\u3066\u3044\u304d\u305f\u3044\u3002\n\u5185\u5bb9\u306f\u968f\u6642\u66f4\u65b0\u3057\u3066\u3044\u304f\u4e88\u5b9a\u3002\n\n# \u53c2\u8003\u6587\u732e\n[1] Robinson, Kevin, and Paul F. Whelan. \"Efficient morphological reconstruction: a downhill filter.\" Pattern Recognition Letters 25.15 (2004): 1759-1767.\n", "tags": ["Python", "ImageProcessing", "OpenCV", "scikit-image", "\u753b\u50cf\u51e6\u7406"]}