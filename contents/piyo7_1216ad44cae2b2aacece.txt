{"tags": ["Scala", "\u30e1\u30bf\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0", "metaprogramming"], "context": " More than 1 year has passed since last update.\n\n\u6982\u8981\n\u578b\u30ec\u30d9\u30eb\u3067\u6574\u6570\u3092\u8868\u73fe\u3067\u304d\u308b\u3068\u4fbf\u5229\u3067\u3059\u3002\u3048\u3048\u3068\u3001\u6574\u6570\u306e\u578bInt\u3067\u306f\u306a\u304f\u3002\n\u305f\u3068\u3048\u3070\u56fa\u5b9a\u9577\u914d\u5217\u3002\u9577\u30553\u306e\u914d\u5217\u3068\u9577\u30555\u306e\u914d\u5217\u3092\u7d50\u5408\u3059\u308b\u3068\u3001\u8981\u7d20\u306b\u4f9d\u3089\u305a\u9577\u30558\u306e\u914d\u5217\u306b\u306a\u308b\u306f\u305a\u3067\u3059\u3002\u3053\u306e\u914d\u5217\u304b\u3089\u300113\u756a\u76ee\u306e\u8981\u7d20\u3092\u53d6\u308a\u3060\u3059\u30b3\u30fc\u30c9\u306f\u660e\u3089\u304b\u306b\u30d0\u30b0\u3063\u3066\u3044\u308b\u308f\u3051\u3067\u3059\u3002\u9759\u7684\u578b\u4ed8\u3051\u8133\u3068\u3057\u3066\u306f\u3001\u3053\u3046\u3044\u3046\u306f\u5b9f\u884c\u6642\u3067\u306f\u306a\u304f\u30b3\u30f3\u30d1\u30a4\u30eb\u6642\u306b\u30a8\u30e9\u30fc\u306b\u3057\u3066\u307b\u3057\u3044\u3067\u3059\u306d\uff1f\n\u305f\u3068\u3048\u3070\u884c\u5217\u30022x4\u884c\u5217\u30683x6\u884c\u5217\u3092\u639b\u3051\u7b97\u3059\u308b\u30b3\u30fc\u30c9\u306f\u3001\u3084\u306f\u308a\u30b3\u30f3\u30d1\u30a4\u30eb\u30a8\u30e9\u30fc\u306b\u306a\u3063\u3066\u307b\u3057\u3044\u3067\u3059\u306d\uff1f\n\u305f\u3068\u3048\u3070\u5358\u4f4d\u7cfb\u30023km/sec \u00f7 7sec\u3068\u3044\u3046\u8a08\u7b97\u7d50\u679c\u306e\u5024\u306b\u306f\u3001\u81ea\u52d5\u7684\u306bkm/sec^2\u306e\u578b\u304c\u4ed8\u3044\u3066\u307b\u3057\u3044\u3067\u3059\u306d\uff1f\n\u3053\u308c\u3089\u3092\u5b9f\u73fe\u3059\u308b\u305f\u3081\u306b\u306f\u3001\u578b\u306b\u6570\u5024\u60c5\u5831\u3092\u57cb\u3081\u8fbc\u3093\u3067\u3001\u305d\u308c\u3092\u30b3\u30f3\u30d1\u30a4\u30eb\u6642\u306b\u8db3\u3057\u7b97\u3057\u305f\u308a\u6bd4\u8f03\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\n\u305d\u306e\u3088\u3046\u306b\u5024\u304c\u5165\u308a\u8fbc\u3093\u3067\u3044\u308b\u578b\u3092\u3001\u4f9d\u5b58\u578b(dependent type)\u3068\u547c\u3073\u307e\u3059\u3002\u307e\u3055\u306b\u305d\u306e\u305f\u3081\u306e\u30e9\u30a4\u30d6\u30e9\u30ea shapeless \u306b\u81ea\u7136\u6570\u3092\u8868\u73fe\u3059\u308b\u578b Nat \u304c\u3042\u308a\u307e\u3059\u3002\u305f\u3060\u6574\u6570\u306f\u898b\u5f53\u305f\u3089\u306a\u304b\u3063\u305f\u306e\u3067\u3001\u8272\u3005\u3068\u53c2\u8003\u306b\u3057\u306a\u304c\u3089\u56db\u5247\u6f14\u7b97\u3067\u304d\u308b\u3088\u3046\u306b\u3057\u3066\u307f\u307e\u3057\u305f\u30fc\u3068\u3044\u3046\u8a18\u4e8b\u3067\u3059\u3002\n\u4eca\u56de\u306fScala\u3067\u3084\u3063\u3066\u307f\u307e\u3059\u3002\u304c\u3001\u624b\u6cd5\u81ea\u4f53\u306f\u4ed6\u306e\u8a00\u8a9e\u3067\u3082\u4f7f\u3048\u308b\u3082\u306e\u306a\u306e\u3060\u3068\u601d\u3044\u307e\u3059\u3002\n\n\u578b\u30ec\u30d9\u30eb\u771f\u507d\u5024\u306e\u8ad6\u7406\u6f14\u7b97\n\u6e96\u5099\u3068\u3057\u3066\u3001\u307e\u305a\u578b\u30ec\u30d9\u30eb\u3067\u771f\u507d\u5024\u3092\u8868\u73fe\u3057\u3066\u3001\u8ad6\u7406\u6f14\u7b97\u304c\u3067\u304d\u308b\u3088\u3046\u306b\u3057\u3066\u307f\u307e\u3059\u3002\n\u5358\u4f4d\u7cfb\u30e9\u30a4\u30d6\u30e9\u30ea KarolS/units \u306e internal/Bools.scala \u3067\u4f7f\u308f\u308c\u3066\u3044\u308b\u624b\u6cd5\u3092\u3001\u307b\u307c\u305d\u306e\u307e\u307e\u4f7f\u3044\u307e\u3057\u305f\u3002\n\u771f\u3092\u8868\u3059\u30af\u30e9\u30b9TBool\u3068\u507d\u3092\u8868\u3059\u30af\u30e9\u30b9TFalse\u3092\u4f5c\u308a\u307e\u3059\u3002\u3069\u3061\u3089\u3082TBool\u30c8\u30ec\u30a4\u30c8\u3092\u30df\u30c3\u30af\u30b9\u30a4\u30f3\u3057\u3066\u3044\u307e\u3059\u3002\n\nTBool.scala\nimport scala.language.higherKinds\n\nsealed trait TBool {\n  type Not <: TBool\n  type And[A <: TBool] <: TBool\n  type Or[A <: TBool] <: TBool\n  type If[Then <: T, Else <: T, T] <: T\n}\n\nclass TTrue extends TBool {\n  type Not = TFalse\n  type And[A <: TBool] = A\n  type Or[A <: TBool] = TTrue\n  type If[Then <: T, Else <: T, T] = Then\n}\n\nclass TFalse extends TBool {\n  type Not = TTrue\n  type And[A <: TBool] = TFalse\n  type Or[A <: TBool] = A\n  type If[Then <: T, Else <: T, T] = Else\n}\n\nobject TBool {\n  type ![A <: TBool] = A#Not\n  type &&[A <: TBool, B <: TBool] = A#And[B]\n  type ||[A <: TBool, B <: TBool] = A#Or[B]\n  type If[A <: TBool, Then <: T, Else <: T, T] = A#If[Then, Else, T]\n\n  object ToBool {\n    def apply[A <: TBool](implicit toBool: ToBool[A]): Boolean = toBool()\n  }\n  trait ToBool[A <: TBool] {\n    def apply(): Boolean\n  }\n  implicit val toBoolTTrue = new ToBool[TTrue] {\n    def apply() = true\n  }\n  implicit val toBoolTFalse = new ToBool[TFalse] {\n    def apply() = false\n  }\n}\n\n\n\u3053\u308c\u3067OK\u3067\u3059\u3002TBool\u306e\u6d3e\u751f\u578b\u3092Boolean\u306e\u5024\u306b\u5909\u63db\u3059\u308bToBool\u3092\u7528\u610f\u3057\u305f\u306e\u3067\u3001\u7c21\u5358\u306b\u578b\u30c1\u30a7\u30c3\u30af\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\nimport TBool._\n\ntype Temp0 = ![TTrue]  // TFalse\nprintln(ToBool[Temp0]) // false\n\ntype Temp1 = TTrue && TFalse // TFalse\nprintln(ToBool[Temp1])       // false\n\ntype Temp2 = TTrue || TFalse // TTrue\nprintln(ToBool[Temp2])       // true\n\ntype Temp3 = If[TFalse, TFalse, TTrue, TBool] // TTrue\nprintln(ToBool[Temp3])                        // true\n\n\u305f\u3057\u304b\u306b\u8ad6\u7406\u6f14\u7b97\u304c\u3067\u304d\u3066\u3044\u307e\u3059\u3002\u30b3\u30f3\u30d1\u30a4\u30eb\u6642\u306b\u2015\u2015\uff01\n\n\u9ad8\u30ab\u30a4\u30f3\u30c9\u578b\u306b\u3064\u3044\u3066\nimport scala.language.higherKinds \u306f\u66f8\u304b\u306a\u3044\u3068\u3001TBool\u306eAnd / Or / If\u306b\u3064\u3044\u3066\u3001\n\nhigher-kinded type should be enabled by making the implicit value scala.language.higherKinds visible.\n\n\u3068\u30b3\u30f3\u30d1\u30a4\u30e9\u304c\u8b66\u544a\u3092\u51fa\u3057\u307e\u3059\u3002\u3053\u306e\u7406\u7531\u306f Scala Standard Library 2.11.2 - language \u306b\u3001\n\nHigher kinded types in Scala lead to a Turing-complete type system, where compiler termination is no longer guaranteed.\n\n\u3068\u66f8\u304b\u308c\u3066\u3044\u307e\u3059\u3002\u30c7\u30e1\u30ea\u30c3\u30c8\u3092\u610f\u8b58\u3057\u3066\u81ea\u5df1\u8cac\u4efb\u3067\u4f7f\u3048\u3088\u3001\u3068\u3044\u3046\u3053\u3068\u3067\u3059\u306d\u3002\n\u3068\u304f\u306b\u4eca\u56de\u306f\u3001\u578b\u4ed8\u3051\u6642\u306b\u8a08\u7b97\u3057\u3088\u3046\u3068\u3057\u3066\u3044\u308b\u306e\u3067\u3001\u3046\u3063\u304b\u308a\u7d42\u308f\u3089\u306a\u3044\u8a08\u7b97\u3092\u66f8\u304f\u3068\u578b\u4ed8\u3051\u304c\u505c\u6b62\u3057\u306a\u304f\u306a\u3063\u3066\u3057\u307e\u3044\u307e\u3059\u3002\u5b9f\u969b\u3001\u5b9f\u88c5\u30df\u30b9\u3063\u3066\u30b3\u30f3\u30d1\u30a4\u30e9\u304c\u30b9\u30bf\u30c3\u30af\u30aa\u30fc\u30d0\u30fc\u30d5\u30ed\u30fc\u3057\u305f\u308a\u3001\u958b\u767a\u74b0\u5883\u304c\u56fa\u307e\u3063\u305f\u308a\u3057\u307e\u3057\u305f\u3002\u30e1\u30bf\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u306e\u4ee3\u511f\u3002\u3002\u3002\n\n\u578b\u30ec\u30d9\u30eb\u6574\u6570\u306e\u56db\u5247\u6f14\u7b97\n\u578b\u30ec\u30d9\u30eb\u3067\u6574\u6570\u3092\u8868\u73fe\u3059\u308b\u305f\u3081\u306b\u3001 Practical Church Numerals in Scala \u3067\u89e3\u8aac\u3055\u308c\u3066\u3044\u308b\u624b\u6cd5\u3092\u4f7f\u3044\u307e\u3059\u3002\n\u305f\u3068\u3048\u3070\u30013\u3092\u8868\u73fe\u3059\u308b\u578b\u306f\u6b21\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002\u3044\u308f\u3086\u308b\u30da\u30a2\u30ce\u6570\u3067\u3059\u306d\u3002\ntype T3 = TSuc[TSuc[TSuc[TZero]]]\n\n-3\u3092\u8868\u73fe\u3059\u308b\u578b\u306e\u305f\u3081\u306b\u306f\u3001Successor\u306e\u4ee3\u308f\u308a\u306bPredecessor\u3092\u4f7f\u3044\u307e\u3059\u3002\ntype T_3 = TPre[TPre[TPre[TZero]]]\n\n\u305d\u308c\u3067\u306f\u5b9f\u88c5\u3092\u8cbc\u308a\u307e\u3059\u3002\u639b\u3051\u7b97\u3068\u5272\u308a\u7b97\u304c\u81ea\u529b\u3067\u8a66\u884c\u932f\u8aa4\u3057\u305f\u3068\u3053\u308d\u3067\u3059\u3002\n\nTInt.scala\nimport scala.language.higherKinds\nimport TBool._\n\nsealed trait TInt {\n  type Neg <: TInt\n  type Abs <: TInt\n  type Suc <: TInt\n  type Pre <: TInt\n  type Add[A <: TInt] <: TInt\n  type Sub[A <: TInt] = Add[A#Neg]\n  type Mul[A <: TInt] <: TInt\n  // type Div[A <: TInt] <: TInt\n  protected type TSucDivTSuc[A <: TInt] <: TInt\n  type Div[A <: TInt] = IfTZeroTSucTPre[\n    TZero,\n    A#IfTZeroTSucTPre[TZero, TSucDivTSuc[A], TSucDivTSuc[A#Neg]#Neg, TInt],\n    A#IfTZeroTSucTPre[TZero, Neg#TSucDivTSuc[A]#Suc#Neg, Neg#TSucDivTSuc[A#Neg]#Suc, TInt],\n    TInt]\n  type Mod[A <: TInt] <: TInt\n\n  type IfTZeroTSucTPre[TZeroThen <: T, TSucThen <: T, TPreThen <: T, T] <: T\n  type IsTZero = IfTZeroTSucTPre[TTrue, TFalse, TFalse, TBool]\n  type IsTSuc = IfTZeroTSucTPre[TFalse, TTrue, TFalse, TBool]\n  type IsTPre = IfTZeroTSucTPre[TFalse, TFalse, TTrue, TBool]\n\n  type Equal[A <: TInt] = Sub[A]#IsTZero\n  type Greater[A <: TInt] = Sub[A]#IsTSuc\n  type Less[A <: TInt] = Sub[A]#IsTPre\n}\n\ntrait TPos extends TInt\ntrait TNeg extends TInt\n\nclass TZero extends TPos with TNeg {\n  type Neg = TZero\n  type Abs = TZero\n  type Suc = TSuc[TZero]\n  type Pre = TPre[TZero]\n  type Add[A <: TInt] = A\n  type Mul[A <: TInt] = TZero\n  // type Div[A <: TInt] = TZero\n  type TSucDivTSuc[A <: TInt] = TZero\n  type Mod[A <: TInt] = TZero\n\n  type IfTZeroTSucTPre[TZeroThen <: T, TSucThen <: T, TPreThen <: T, T] = TZeroThen\n}\n\nclass TSuc[P <: TPos] extends TPos {\n  type Neg = Pre#Neg#Pre\n  type Abs = Pre#Suc\n  type Suc = TSuc[TSuc[Pre]]\n  type Pre = P\n  type Add[A <: TInt] = Pre#Add[A]#Suc\n  type Mul[A <: TInt] = Pre#Mul[A]#Add[A]\n  /*\n  type Div[A <: TInt] = A#IfTZeroTSucTPre[\n    TZero, // \u30bc\u30ed\u3067\u5272\u3063\u305f\u5546\u306f\u30bc\u30ed\u3068\u3059\u308b\n    If[Less[A], TZero, Sub[A]#Div[A]#Suc, TInt],\n    If[Less[A#Neg], TZero, Add[A]#Div[A]#Pre, TInt],\n    TInt]\n  */\n  type TSucDivTSuc[A <: TInt] = If[Less[A#Abs], TZero, Sub[A#Abs]#TSucDivTSuc[A]#Suc, TInt]\n  type Mod[A <: TInt] = A#IfTZeroTSucTPre[\n    TZero, // \u30bc\u30ed\u3067\u5272\u3063\u305f\u4f59\u308a\u306f\u30bc\u30ed\u3068\u3059\u308b\n    If[Less[A], Pre#Suc, Sub[A]#Mod[A], TInt],\n    If[Less[A#Neg], Pre#Suc, Add[A]#Mod[A], TInt],\n    TInt]\n\n  type IfTZeroTSucTPre[TZeroThen <: T, TSucThen <: T, TPreThen <: T, T] = TSucThen\n}\n\nclass TPre[S <: TNeg] extends TNeg {\n  type Neg = Suc#Neg#Suc\n  type Abs = Neg\n  type Suc = S\n  type Pre = TPre[TPre[Suc]]\n  type Add[A <: TInt] = Suc#Add[A]#Pre\n  type Mul[A <: TInt] = Suc#Mul[A]#Sub[A]\n  /*\n  type Div[A <: TInt] = A#IfTZeroTSucTPre[\n    TZero, // \u30bc\u30ed\u3067\u5272\u3063\u305f\u5546\u306f\u30bc\u30ed\u3068\u3059\u308b\n    Add[A]#Div[A]#Pre,\n    Sub[A]#Div[A]#Suc,\n    TInt]\n  */\n  type TSucDivTSuc[A <: TInt] = TZero\n  type Mod[A <: TInt] = A#IfTZeroTSucTPre[\n    TZero, // \u30bc\u30ed\u3067\u5272\u3063\u305f\u4f59\u308a\u306f\u30bc\u30ed\u3068\u3059\u308b\n    Add[A]#Mod[A],\n    Sub[A]#Mod[A],\n    TInt]\n\n  type IfTZeroTSucTPre[TZeroThen <: T, TSucThen <: T, TPreThen <: T, T] = TPreThen\n}\n\nobject TInt {\n  type +[N1 <: TInt, N2 <: TInt] = N1#Add[N2]\n  type -[N1 <: TInt, N2 <: TInt] = N1#Sub[N2]\n  type *[N1 <: TInt, N2 <: TInt] = N1#Mul[N2]\n  type /[N1 <: TInt, N2 <: TInt] = N1#Div[N2]\n  type %[N1 <: TInt, N2 <: TInt] = N1#Mod[N2]\n\n  type ==[A <: TInt, B <: TInt] = A#Equal[B]\n  type !=[A <: TInt, B <: TInt] = A#Equal[B]#Not\n  type  >[A <: TInt, B <: TInt] = A#Greater[B]\n  type <=[A <: TInt, B <: TInt] = A#Greater[B]#Not\n  type  <[A <: TInt, B <: TInt] = A#Less[B]\n  type >=[A <: TInt, B <: TInt] = A#Less[B]#Not\n\n  object ToInt {\n    def apply[N <: TInt](implicit toIntN: ToInt[N]): Int = toIntN()\n  }\n  trait ToInt[N <: TInt] {\n    def apply(): Int\n  }\n  implicit def toIntTZero = new ToInt[TZero] {\n    def apply() = 0\n  }\n  implicit def toIntTSuc[P <: TPos](implicit toIntP: ToInt[P]) = new ToInt[TSuc[P]] {\n    def apply() = toIntP() + 1\n  }\n  implicit def toIntTPre[S <: TNeg](implicit toIntS: ToInt[S]) = new ToInt[TPre[S]] {\n    def apply() = toIntS() - 1\n  }\n\n  type T0 = TZero\n  type T1 = T0#Suc\n  type T2 = T1#Suc\n  type T3 = T2#Suc\n  type T4 = T3#Suc\n  type T5 = T4#Suc\n  type T6 = T5#Suc\n  type T7 = T6#Suc\n  type T8 = T7#Suc\n  type T9 = T8#Suc\n\n  type T_1 = T0#Pre\n  type T_2 = T_1#Pre\n  type T_3 = T_2#Pre\n  type T_4 = T_3#Pre\n  type T_5 = T_4#Pre\n  type T_6 = T_5#Pre\n  type T_7 = T_6#Pre\n  type T_8 = T_7#Pre\n  type T_9 = T_8#Pre\n}\n\n\n\u3046\u307e\u304f\u51fa\u6765\u3066\u3044\u308b\u304b\u3001TInt\u306e\u6d3e\u751f\u578b\u3092Int\u306e\u5024\u306b\u5909\u63db\u3059\u308bToInt\u3092\u4f7f\u3063\u3066\u3001\u78ba\u304b\u3081\u3066\u307f\u307e\u3059\u3002\nimport TInt._\n\nprintln(ToInt[T8 + T3])   // 11\nprintln(ToInt[T8 + T_3])  // 5\nprintln(ToInt[T_8 + T3])  // -5\nprintln(ToInt[T_8 + T_3]) // -11\n\nprintln(ToInt[T8 - T3])   // 5\nprintln(ToInt[T8 - T_3])  // 11\nprintln(ToInt[T_8 - T3])  // -11\nprintln(ToInt[T_8 - T_3]) // -5\n\nprintln(ToInt[T8 * T3])   // 24\nprintln(ToInt[T8 * T_3])  // -24\nprintln(ToInt[T_8 * T3])  // -24\nprintln(ToInt[T_8 * T_3]) // 24\n\nprintln(ToInt[T8 / T3])   // 2\nprintln(ToInt[T8 / T_3])  // -2\nprintln(ToInt[T_8 / T3])  // -3\nprintln(ToInt[T_8 / T_3]) // 3\n\nprintln(ToInt[T8 % T3])   // 2\nprintln(ToInt[T8 % T_3])  // 2\nprintln(ToInt[T_8 % T3])  // 1\nprintln(ToInt[T_8 % T_3]) // 1\n\n\u305f\u3057\u304b\u306b\u56db\u5247\u6f14\u7b97\u304c\u3067\u304d\u3066\u3044\u307e\u3059\u3002\u30b3\u30f3\u30d1\u30a4\u30eb\u6642\u306b\u2015\u2015\uff01\n\u4ee5\u4e0b\u3001\u4f59\u8ac7\u3067\u3059\u3002\n\u307e\u305a\u3001TInt\u306e\u6f14\u7b97\u306b\u3064\u3044\u3066\u3067\u3059\u304c\u3001 Typelevel FizzBuzz in Scala \u306e\u3088\u3046\u306bimplicit\u4f7f\u3063\u3066\u5916\u90e8\u3067\u5b9f\u88c5\u3059\u308b\u624b\u6cd5\u3082\u3042\u3063\u3066\u3001\u305d\u3061\u3089\u306e\u65b9\u304c\u7b4b\u306f\u826f\u3044\u6c17\u304c\u3059\u308b\u306e\u3067\u3059\u304c\u3001\u8a08\u7b97\u7d50\u679c\u306e\u578b\u305d\u306e\u3082\u306e\u3092\u53d6\u308a\u3060\u3059\u65b9\u6cd5\u304c\u5206\u304b\u3089\u306a\u304b\u3063\u305f\u306e\u3067\u3001TInt\u30c8\u30ec\u30a4\u30c8\u306b\u6f14\u7b97\u3092\u8a70\u3081\u8fbc\u307f\u307e\u3057\u305f\u3002\n\u3055\u3066\u3001TInt\u306e\u5546\u3092\u6c42\u3081\u308b\u5272\u308a\u7b97Div\u304c\u3001\u306a\u3093\u3060\u304b\u304a\u304b\u3057\u306a\u5b9f\u88c5\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u3002\u3053\u308c\u306f\u5143\u3005\u30b3\u30e1\u30f3\u30c8\u30a2\u30a6\u30c8\u3057\u305f\u30b3\u30fc\u30c9\u3067\u3044\u3051\u308b\u3068\u601d\u3063\u305f\u306e\u3067\u3059\u304c\u3001scalac\u304cStackOverflowError\u3092\u5410\u3044\u3066\u3057\u307e\u3044\u307e\u3057\u305f\u3002\u304a\u305d\u3089\u304ftyper\u30d5\u30a7\u30fc\u30ba\u3067\u3001type alias\u306e\u518d\u5e30\u547c\u3073\u51fa\u3057\u304c\u5faa\u74b0\u3057\u3066\u3044\u308b\u304b\u53ce\u675f\u3057\u306a\u304f\u306a\u3063\u3066\u3044\u308b\u306e\u3060\u3068\u601d\u3044\u307e\u3059\u3002If\u6587\u3067\u77ed\u7d61\u8a55\u4fa1\u3067\u304d\u3066\u3044\u306a\u3044\u306e\u304c\u539f\u56e0\u306a\u6c17\u306f\u3059\u308b\u306e\u3067\u3059\u304c\u3001\u3053\u306e\u3042\u305f\u308ascalac\u304c\u3069\u3046\u3044\u3046\u9806\u756a\u3067type alias\u3092\u89e3\u6c7a\u3057\u3066\u3044\u308b\u304b\u77e5\u3089\u306a\u3044\u3068\u3069\u3046\u3057\u3088\u3046\u3082\u306a\u3044\u611f\u3058\u304c\u3042\u3063\u3066\u3001\u82e6\u3057\u7d1b\u308c\u306b\u8272\u3005\u5909\u5f62\u3057\u3066\u3044\u3063\u305f\u3089\u5076\u7136\u3046\u307e\u304f\u3044\u3063\u305f\u306e\u304c\u4e0a\u8a18\u306e\u30b3\u30fc\u30c9\u3067\u3059\u2026\u2026\u3002\n\u3042\u3068\u3001\u9ad8\u30ab\u30a4\u30f3\u30c9\u306a\u30da\u30a2\u30ce\u6570\u3067\u8868\u305b\u308b\u6570\u306e\u4e0a\u9650\u3067\u3059\u304c\u3001 Limits of Nat type in Shapeless \u306b\u3088\u308b\u3068\u3001\n\nShapeless 2.0 currently still uses the Church encoding, which will get you to 1,000 or so before the compiler gives up.\n\n\u3060\u305d\u3046\u3067\u3059\u3002\u30b3\u30f3\u30d1\u30a4\u30eb\u6642\u9593\u306e\u554f\u984c\u3082\u3042\u308b\u306e\u3067\u3001\u5b9f\u7528\u7684\u306b\u306f\u3069\u3046\u306a\u3093\u3067\u3057\u3087\u3046\u306d\u2026\u2026\u3002\n\u5358\u4f4d\u7cfb\u306e\u6b21\u5143\u3092\u8868\u3059\u7528\u9014\u306e\u5834\u5408\u306f\u3001\u4e8c\u6841\u306e\u6574\u6570\u304c\u5fc5\u8981\u306b\u306a\u308b\u3053\u3068\u306f\u305d\u3046\u305d\u3046\u306a\u3044\u3068\u601d\u3046\u306e\u3067\u3001\u9069\u3057\u3066\u3044\u305d\u3046\u3067\u3059\u3002\n\n\u5b9f\u884c\u74b0\u5883\n\nbuild.sbt\nname := \"type_level_encode\"\n\nversion := \"1.0\"\n\nscalaVersion := \"2.11.2\"\n\n\n\nbuild.properties\nsbt.version=0.13.6\n\n\n# \u6982\u8981\n\n\u578b\u30ec\u30d9\u30eb\u3067\u6574\u6570\u3092\u8868\u73fe\u3067\u304d\u308b\u3068\u4fbf\u5229\u3067\u3059\u3002\u3048\u3048\u3068\u3001\u6574\u6570\u306e\u578bInt\u3067\u306f\u306a\u304f\u3002\n\n\u305f\u3068\u3048\u3070\u56fa\u5b9a\u9577\u914d\u5217\u3002\u9577\u30553\u306e\u914d\u5217\u3068\u9577\u30555\u306e\u914d\u5217\u3092\u7d50\u5408\u3059\u308b\u3068\u3001\u8981\u7d20\u306b\u4f9d\u3089\u305a\u9577\u30558\u306e\u914d\u5217\u306b\u306a\u308b\u306f\u305a\u3067\u3059\u3002\u3053\u306e\u914d\u5217\u304b\u3089\u300113\u756a\u76ee\u306e\u8981\u7d20\u3092\u53d6\u308a\u3060\u3059\u30b3\u30fc\u30c9\u306f\u660e\u3089\u304b\u306b\u30d0\u30b0\u3063\u3066\u3044\u308b\u308f\u3051\u3067\u3059\u3002\u9759\u7684\u578b\u4ed8\u3051\u8133\u3068\u3057\u3066\u306f\u3001\u3053\u3046\u3044\u3046\u306f\u5b9f\u884c\u6642\u3067\u306f\u306a\u304f\u30b3\u30f3\u30d1\u30a4\u30eb\u6642\u306b\u30a8\u30e9\u30fc\u306b\u3057\u3066\u307b\u3057\u3044\u3067\u3059\u306d\uff1f\n\u305f\u3068\u3048\u3070\u884c\u5217\u30022x4\u884c\u5217\u30683x6\u884c\u5217\u3092\u639b\u3051\u7b97\u3059\u308b\u30b3\u30fc\u30c9\u306f\u3001\u3084\u306f\u308a\u30b3\u30f3\u30d1\u30a4\u30eb\u30a8\u30e9\u30fc\u306b\u306a\u3063\u3066\u307b\u3057\u3044\u3067\u3059\u306d\uff1f\n\u305f\u3068\u3048\u3070\u5358\u4f4d\u7cfb\u30023km/sec \u00f7 7sec\u3068\u3044\u3046\u8a08\u7b97\u7d50\u679c\u306e\u5024\u306b\u306f\u3001\u81ea\u52d5\u7684\u306bkm/sec^2\u306e\u578b\u304c\u4ed8\u3044\u3066\u307b\u3057\u3044\u3067\u3059\u306d\uff1f\n\n\u3053\u308c\u3089\u3092\u5b9f\u73fe\u3059\u308b\u305f\u3081\u306b\u306f\u3001\u578b\u306b\u6570\u5024\u60c5\u5831\u3092\u57cb\u3081\u8fbc\u3093\u3067\u3001\u305d\u308c\u3092\u30b3\u30f3\u30d1\u30a4\u30eb\u6642\u306b\u8db3\u3057\u7b97\u3057\u305f\u308a\u6bd4\u8f03\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\n\u305d\u306e\u3088\u3046\u306b\u5024\u304c\u5165\u308a\u8fbc\u3093\u3067\u3044\u308b\u578b\u3092\u3001\u4f9d\u5b58\u578b(dependent type)\u3068\u547c\u3073\u307e\u3059\u3002\u307e\u3055\u306b\u305d\u306e\u305f\u3081\u306e\u30e9\u30a4\u30d6\u30e9\u30ea [shapeless](https://github.com/milessabin/shapeless) \u306b\u81ea\u7136\u6570\u3092\u8868\u73fe\u3059\u308b\u578b [Nat](https://github.com/milessabin/shapeless/blob/shapeless-2.0.0/core/src/main/scala/shapeless/nat.scala) \u304c\u3042\u308a\u307e\u3059\u3002\u305f\u3060\u6574\u6570\u306f\u898b\u5f53\u305f\u3089\u306a\u304b\u3063\u305f\u306e\u3067\u3001\u8272\u3005\u3068\u53c2\u8003\u306b\u3057\u306a\u304c\u3089\u56db\u5247\u6f14\u7b97\u3067\u304d\u308b\u3088\u3046\u306b\u3057\u3066\u307f\u307e\u3057\u305f\u30fc\u3068\u3044\u3046\u8a18\u4e8b\u3067\u3059\u3002\n\u4eca\u56de\u306fScala\u3067\u3084\u3063\u3066\u307f\u307e\u3059\u3002\u304c\u3001\u624b\u6cd5\u81ea\u4f53\u306f\u4ed6\u306e\u8a00\u8a9e\u3067\u3082\u4f7f\u3048\u308b\u3082\u306e\u306a\u306e\u3060\u3068\u601d\u3044\u307e\u3059\u3002\n\n# \u578b\u30ec\u30d9\u30eb\u771f\u507d\u5024\u306e\u8ad6\u7406\u6f14\u7b97\n\n\u6e96\u5099\u3068\u3057\u3066\u3001\u307e\u305a\u578b\u30ec\u30d9\u30eb\u3067\u771f\u507d\u5024\u3092\u8868\u73fe\u3057\u3066\u3001\u8ad6\u7406\u6f14\u7b97\u304c\u3067\u304d\u308b\u3088\u3046\u306b\u3057\u3066\u307f\u307e\u3059\u3002\n\u5358\u4f4d\u7cfb\u30e9\u30a4\u30d6\u30e9\u30ea [KarolS/units](https://github.com/KarolS/units) \u306e [internal/Bools.scala](https://github.com/KarolS/units/blob/v0.2.1/units/src/main/scala/internal/Bools.scala) \u3067\u4f7f\u308f\u308c\u3066\u3044\u308b\u624b\u6cd5\u3092\u3001\u307b\u307c\u305d\u306e\u307e\u307e\u4f7f\u3044\u307e\u3057\u305f\u3002\n\u771f\u3092\u8868\u3059\u30af\u30e9\u30b9TBool\u3068\u507d\u3092\u8868\u3059\u30af\u30e9\u30b9TFalse\u3092\u4f5c\u308a\u307e\u3059\u3002\u3069\u3061\u3089\u3082TBool\u30c8\u30ec\u30a4\u30c8\u3092\u30df\u30c3\u30af\u30b9\u30a4\u30f3\u3057\u3066\u3044\u307e\u3059\u3002\n\n```scala:TBool.scala\nimport scala.language.higherKinds\n\nsealed trait TBool {\n  type Not <: TBool\n  type And[A <: TBool] <: TBool\n  type Or[A <: TBool] <: TBool\n  type If[Then <: T, Else <: T, T] <: T\n}\n\nclass TTrue extends TBool {\n  type Not = TFalse\n  type And[A <: TBool] = A\n  type Or[A <: TBool] = TTrue\n  type If[Then <: T, Else <: T, T] = Then\n}\n\nclass TFalse extends TBool {\n  type Not = TTrue\n  type And[A <: TBool] = TFalse\n  type Or[A <: TBool] = A\n  type If[Then <: T, Else <: T, T] = Else\n}\n\nobject TBool {\n  type ![A <: TBool] = A#Not\n  type &&[A <: TBool, B <: TBool] = A#And[B]\n  type ||[A <: TBool, B <: TBool] = A#Or[B]\n  type If[A <: TBool, Then <: T, Else <: T, T] = A#If[Then, Else, T]\n\n  object ToBool {\n    def apply[A <: TBool](implicit toBool: ToBool[A]): Boolean = toBool()\n  }\n  trait ToBool[A <: TBool] {\n    def apply(): Boolean\n  }\n  implicit val toBoolTTrue = new ToBool[TTrue] {\n    def apply() = true\n  }\n  implicit val toBoolTFalse = new ToBool[TFalse] {\n    def apply() = false\n  }\n}\n```\n\n\u3053\u308c\u3067OK\u3067\u3059\u3002TBool\u306e\u6d3e\u751f\u578b\u3092Boolean\u306e\u5024\u306b\u5909\u63db\u3059\u308bToBool\u3092\u7528\u610f\u3057\u305f\u306e\u3067\u3001\u7c21\u5358\u306b\u578b\u30c1\u30a7\u30c3\u30af\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\n```\nimport TBool._\n\ntype Temp0 = ![TTrue]  // TFalse\nprintln(ToBool[Temp0]) // false\n\ntype Temp1 = TTrue && TFalse // TFalse\nprintln(ToBool[Temp1])       // false\n\ntype Temp2 = TTrue || TFalse // TTrue\nprintln(ToBool[Temp2])       // true\n\ntype Temp3 = If[TFalse, TFalse, TTrue, TBool] // TTrue\nprintln(ToBool[Temp3])                        // true\n```\n\n\u305f\u3057\u304b\u306b\u8ad6\u7406\u6f14\u7b97\u304c\u3067\u304d\u3066\u3044\u307e\u3059\u3002\u30b3\u30f3\u30d1\u30a4\u30eb\u6642\u306b\u2015\u2015\uff01\n\n# \u9ad8\u30ab\u30a4\u30f3\u30c9\u578b\u306b\u3064\u3044\u3066\n\n```import scala.language.higherKinds``` \u306f\u66f8\u304b\u306a\u3044\u3068\u3001TBool\u306eAnd / Or / If\u306b\u3064\u3044\u3066\u3001\n\n> higher-kinded type should be enabled by making the implicit value scala.language.higherKinds visible.\n\n\u3068\u30b3\u30f3\u30d1\u30a4\u30e9\u304c\u8b66\u544a\u3092\u51fa\u3057\u307e\u3059\u3002\u3053\u306e\u7406\u7531\u306f [Scala Standard Library 2.11.2 - language](http://www.scala-lang.org/api/2.11.2/#scala.language$) \u306b\u3001\n\n> Higher kinded types in Scala lead to a Turing-complete type system, where compiler termination is no longer guaranteed.\n\n\u3068\u66f8\u304b\u308c\u3066\u3044\u307e\u3059\u3002\u30c7\u30e1\u30ea\u30c3\u30c8\u3092\u610f\u8b58\u3057\u3066\u81ea\u5df1\u8cac\u4efb\u3067\u4f7f\u3048\u3088\u3001\u3068\u3044\u3046\u3053\u3068\u3067\u3059\u306d\u3002\n\u3068\u304f\u306b\u4eca\u56de\u306f\u3001\u578b\u4ed8\u3051\u6642\u306b\u8a08\u7b97\u3057\u3088\u3046\u3068\u3057\u3066\u3044\u308b\u306e\u3067\u3001\u3046\u3063\u304b\u308a\u7d42\u308f\u3089\u306a\u3044\u8a08\u7b97\u3092\u66f8\u304f\u3068\u578b\u4ed8\u3051\u304c\u505c\u6b62\u3057\u306a\u304f\u306a\u3063\u3066\u3057\u307e\u3044\u307e\u3059\u3002\u5b9f\u969b\u3001\u5b9f\u88c5\u30df\u30b9\u3063\u3066\u30b3\u30f3\u30d1\u30a4\u30e9\u304c\u30b9\u30bf\u30c3\u30af\u30aa\u30fc\u30d0\u30fc\u30d5\u30ed\u30fc\u3057\u305f\u308a\u3001\u958b\u767a\u74b0\u5883\u304c\u56fa\u307e\u3063\u305f\u308a\u3057\u307e\u3057\u305f\u3002\u30e1\u30bf\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u306e\u4ee3\u511f\u3002\u3002\u3002\n\n# \u578b\u30ec\u30d9\u30eb\u6574\u6570\u306e\u56db\u5247\u6f14\u7b97\n\n\u578b\u30ec\u30d9\u30eb\u3067\u6574\u6570\u3092\u8868\u73fe\u3059\u308b\u305f\u3081\u306b\u3001 [Practical Church Numerals in Scala](http://jim-mcbeath.blogspot.co.at/2008/11/practical-church-numerals-in-scala.html) \u3067\u89e3\u8aac\u3055\u308c\u3066\u3044\u308b\u624b\u6cd5\u3092\u4f7f\u3044\u307e\u3059\u3002\n\u305f\u3068\u3048\u3070\u30013\u3092\u8868\u73fe\u3059\u308b\u578b\u306f\u6b21\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002\u3044\u308f\u3086\u308b\u30da\u30a2\u30ce\u6570\u3067\u3059\u306d\u3002\n\n```\ntype T3 = TSuc[TSuc[TSuc[TZero]]]\n```\n\n-3\u3092\u8868\u73fe\u3059\u308b\u578b\u306e\u305f\u3081\u306b\u306f\u3001Successor\u306e\u4ee3\u308f\u308a\u306bPredecessor\u3092\u4f7f\u3044\u307e\u3059\u3002\n\n```\ntype T_3 = TPre[TPre[TPre[TZero]]]\n```\n\n\u305d\u308c\u3067\u306f\u5b9f\u88c5\u3092\u8cbc\u308a\u307e\u3059\u3002\u639b\u3051\u7b97\u3068\u5272\u308a\u7b97\u304c\u81ea\u529b\u3067\u8a66\u884c\u932f\u8aa4\u3057\u305f\u3068\u3053\u308d\u3067\u3059\u3002\n\n```scala:TInt.scala\nimport scala.language.higherKinds\nimport TBool._\n\nsealed trait TInt {\n  type Neg <: TInt\n  type Abs <: TInt\n  type Suc <: TInt\n  type Pre <: TInt\n  type Add[A <: TInt] <: TInt\n  type Sub[A <: TInt] = Add[A#Neg]\n  type Mul[A <: TInt] <: TInt\n  // type Div[A <: TInt] <: TInt\n  protected type TSucDivTSuc[A <: TInt] <: TInt\n  type Div[A <: TInt] = IfTZeroTSucTPre[\n    TZero,\n    A#IfTZeroTSucTPre[TZero, TSucDivTSuc[A], TSucDivTSuc[A#Neg]#Neg, TInt],\n    A#IfTZeroTSucTPre[TZero, Neg#TSucDivTSuc[A]#Suc#Neg, Neg#TSucDivTSuc[A#Neg]#Suc, TInt],\n    TInt]\n  type Mod[A <: TInt] <: TInt\n\n  type IfTZeroTSucTPre[TZeroThen <: T, TSucThen <: T, TPreThen <: T, T] <: T\n  type IsTZero = IfTZeroTSucTPre[TTrue, TFalse, TFalse, TBool]\n  type IsTSuc = IfTZeroTSucTPre[TFalse, TTrue, TFalse, TBool]\n  type IsTPre = IfTZeroTSucTPre[TFalse, TFalse, TTrue, TBool]\n\n  type Equal[A <: TInt] = Sub[A]#IsTZero\n  type Greater[A <: TInt] = Sub[A]#IsTSuc\n  type Less[A <: TInt] = Sub[A]#IsTPre\n}\n\ntrait TPos extends TInt\ntrait TNeg extends TInt\n\nclass TZero extends TPos with TNeg {\n  type Neg = TZero\n  type Abs = TZero\n  type Suc = TSuc[TZero]\n  type Pre = TPre[TZero]\n  type Add[A <: TInt] = A\n  type Mul[A <: TInt] = TZero\n  // type Div[A <: TInt] = TZero\n  type TSucDivTSuc[A <: TInt] = TZero\n  type Mod[A <: TInt] = TZero\n\n  type IfTZeroTSucTPre[TZeroThen <: T, TSucThen <: T, TPreThen <: T, T] = TZeroThen\n}\n\nclass TSuc[P <: TPos] extends TPos {\n  type Neg = Pre#Neg#Pre\n  type Abs = Pre#Suc\n  type Suc = TSuc[TSuc[Pre]]\n  type Pre = P\n  type Add[A <: TInt] = Pre#Add[A]#Suc\n  type Mul[A <: TInt] = Pre#Mul[A]#Add[A]\n  /*\n  type Div[A <: TInt] = A#IfTZeroTSucTPre[\n    TZero, // \u30bc\u30ed\u3067\u5272\u3063\u305f\u5546\u306f\u30bc\u30ed\u3068\u3059\u308b\n    If[Less[A], TZero, Sub[A]#Div[A]#Suc, TInt],\n    If[Less[A#Neg], TZero, Add[A]#Div[A]#Pre, TInt],\n    TInt]\n  */\n  type TSucDivTSuc[A <: TInt] = If[Less[A#Abs], TZero, Sub[A#Abs]#TSucDivTSuc[A]#Suc, TInt]\n  type Mod[A <: TInt] = A#IfTZeroTSucTPre[\n    TZero, // \u30bc\u30ed\u3067\u5272\u3063\u305f\u4f59\u308a\u306f\u30bc\u30ed\u3068\u3059\u308b\n    If[Less[A], Pre#Suc, Sub[A]#Mod[A], TInt],\n    If[Less[A#Neg], Pre#Suc, Add[A]#Mod[A], TInt],\n    TInt]\n\n  type IfTZeroTSucTPre[TZeroThen <: T, TSucThen <: T, TPreThen <: T, T] = TSucThen\n}\n\nclass TPre[S <: TNeg] extends TNeg {\n  type Neg = Suc#Neg#Suc\n  type Abs = Neg\n  type Suc = S\n  type Pre = TPre[TPre[Suc]]\n  type Add[A <: TInt] = Suc#Add[A]#Pre\n  type Mul[A <: TInt] = Suc#Mul[A]#Sub[A]\n  /*\n  type Div[A <: TInt] = A#IfTZeroTSucTPre[\n    TZero, // \u30bc\u30ed\u3067\u5272\u3063\u305f\u5546\u306f\u30bc\u30ed\u3068\u3059\u308b\n    Add[A]#Div[A]#Pre,\n    Sub[A]#Div[A]#Suc,\n    TInt]\n  */\n  type TSucDivTSuc[A <: TInt] = TZero\n  type Mod[A <: TInt] = A#IfTZeroTSucTPre[\n    TZero, // \u30bc\u30ed\u3067\u5272\u3063\u305f\u4f59\u308a\u306f\u30bc\u30ed\u3068\u3059\u308b\n    Add[A]#Mod[A],\n    Sub[A]#Mod[A],\n    TInt]\n\n  type IfTZeroTSucTPre[TZeroThen <: T, TSucThen <: T, TPreThen <: T, T] = TPreThen\n}\n\nobject TInt {\n  type +[N1 <: TInt, N2 <: TInt] = N1#Add[N2]\n  type -[N1 <: TInt, N2 <: TInt] = N1#Sub[N2]\n  type *[N1 <: TInt, N2 <: TInt] = N1#Mul[N2]\n  type /[N1 <: TInt, N2 <: TInt] = N1#Div[N2]\n  type %[N1 <: TInt, N2 <: TInt] = N1#Mod[N2]\n\n  type ==[A <: TInt, B <: TInt] = A#Equal[B]\n  type !=[A <: TInt, B <: TInt] = A#Equal[B]#Not\n  type  >[A <: TInt, B <: TInt] = A#Greater[B]\n  type <=[A <: TInt, B <: TInt] = A#Greater[B]#Not\n  type  <[A <: TInt, B <: TInt] = A#Less[B]\n  type >=[A <: TInt, B <: TInt] = A#Less[B]#Not\n\n  object ToInt {\n    def apply[N <: TInt](implicit toIntN: ToInt[N]): Int = toIntN()\n  }\n  trait ToInt[N <: TInt] {\n    def apply(): Int\n  }\n  implicit def toIntTZero = new ToInt[TZero] {\n    def apply() = 0\n  }\n  implicit def toIntTSuc[P <: TPos](implicit toIntP: ToInt[P]) = new ToInt[TSuc[P]] {\n    def apply() = toIntP() + 1\n  }\n  implicit def toIntTPre[S <: TNeg](implicit toIntS: ToInt[S]) = new ToInt[TPre[S]] {\n    def apply() = toIntS() - 1\n  }\n\n  type T0 = TZero\n  type T1 = T0#Suc\n  type T2 = T1#Suc\n  type T3 = T2#Suc\n  type T4 = T3#Suc\n  type T5 = T4#Suc\n  type T6 = T5#Suc\n  type T7 = T6#Suc\n  type T8 = T7#Suc\n  type T9 = T8#Suc\n\n  type T_1 = T0#Pre\n  type T_2 = T_1#Pre\n  type T_3 = T_2#Pre\n  type T_4 = T_3#Pre\n  type T_5 = T_4#Pre\n  type T_6 = T_5#Pre\n  type T_7 = T_6#Pre\n  type T_8 = T_7#Pre\n  type T_9 = T_8#Pre\n}\n```\n\n\u3046\u307e\u304f\u51fa\u6765\u3066\u3044\u308b\u304b\u3001TInt\u306e\u6d3e\u751f\u578b\u3092Int\u306e\u5024\u306b\u5909\u63db\u3059\u308bToInt\u3092\u4f7f\u3063\u3066\u3001\u78ba\u304b\u3081\u3066\u307f\u307e\u3059\u3002\n\n```\nimport TInt._\n\nprintln(ToInt[T8 + T3])   // 11\nprintln(ToInt[T8 + T_3])  // 5\nprintln(ToInt[T_8 + T3])  // -5\nprintln(ToInt[T_8 + T_3]) // -11\n\nprintln(ToInt[T8 - T3])   // 5\nprintln(ToInt[T8 - T_3])  // 11\nprintln(ToInt[T_8 - T3])  // -11\nprintln(ToInt[T_8 - T_3]) // -5\n\nprintln(ToInt[T8 * T3])   // 24\nprintln(ToInt[T8 * T_3])  // -24\nprintln(ToInt[T_8 * T3])  // -24\nprintln(ToInt[T_8 * T_3]) // 24\n\nprintln(ToInt[T8 / T3])   // 2\nprintln(ToInt[T8 / T_3])  // -2\nprintln(ToInt[T_8 / T3])  // -3\nprintln(ToInt[T_8 / T_3]) // 3\n\nprintln(ToInt[T8 % T3])   // 2\nprintln(ToInt[T8 % T_3])  // 2\nprintln(ToInt[T_8 % T3])  // 1\nprintln(ToInt[T_8 % T_3]) // 1\n```\n\n\u305f\u3057\u304b\u306b\u56db\u5247\u6f14\u7b97\u304c\u3067\u304d\u3066\u3044\u307e\u3059\u3002\u30b3\u30f3\u30d1\u30a4\u30eb\u6642\u306b\u2015\u2015\uff01\n\u4ee5\u4e0b\u3001\u4f59\u8ac7\u3067\u3059\u3002\n\n\u307e\u305a\u3001TInt\u306e\u6f14\u7b97\u306b\u3064\u3044\u3066\u3067\u3059\u304c\u3001 [Typelevel FizzBuzz in Scala](http://halcat0x15a.github.io/programming/typelevel_fizzbuzz.html) \u306e\u3088\u3046\u306bimplicit\u4f7f\u3063\u3066\u5916\u90e8\u3067\u5b9f\u88c5\u3059\u308b\u624b\u6cd5\u3082\u3042\u3063\u3066\u3001\u305d\u3061\u3089\u306e\u65b9\u304c\u7b4b\u306f\u826f\u3044\u6c17\u304c\u3059\u308b\u306e\u3067\u3059\u304c\u3001\u8a08\u7b97\u7d50\u679c\u306e\u578b\u305d\u306e\u3082\u306e\u3092\u53d6\u308a\u3060\u3059\u65b9\u6cd5\u304c\u5206\u304b\u3089\u306a\u304b\u3063\u305f\u306e\u3067\u3001TInt\u30c8\u30ec\u30a4\u30c8\u306b\u6f14\u7b97\u3092\u8a70\u3081\u8fbc\u307f\u307e\u3057\u305f\u3002\n\n\u3055\u3066\u3001TInt\u306e\u5546\u3092\u6c42\u3081\u308b\u5272\u308a\u7b97Div\u304c\u3001\u306a\u3093\u3060\u304b\u304a\u304b\u3057\u306a\u5b9f\u88c5\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u3002\u3053\u308c\u306f\u5143\u3005\u30b3\u30e1\u30f3\u30c8\u30a2\u30a6\u30c8\u3057\u305f\u30b3\u30fc\u30c9\u3067\u3044\u3051\u308b\u3068\u601d\u3063\u305f\u306e\u3067\u3059\u304c\u3001scalac\u304cStackOverflowError\u3092\u5410\u3044\u3066\u3057\u307e\u3044\u307e\u3057\u305f\u3002\u304a\u305d\u3089\u304ftyper\u30d5\u30a7\u30fc\u30ba\u3067\u3001type alias\u306e\u518d\u5e30\u547c\u3073\u51fa\u3057\u304c\u5faa\u74b0\u3057\u3066\u3044\u308b\u304b\u53ce\u675f\u3057\u306a\u304f\u306a\u3063\u3066\u3044\u308b\u306e\u3060\u3068\u601d\u3044\u307e\u3059\u3002If\u6587\u3067\u77ed\u7d61\u8a55\u4fa1\u3067\u304d\u3066\u3044\u306a\u3044\u306e\u304c\u539f\u56e0\u306a\u6c17\u306f\u3059\u308b\u306e\u3067\u3059\u304c\u3001\u3053\u306e\u3042\u305f\u308ascalac\u304c\u3069\u3046\u3044\u3046\u9806\u756a\u3067type alias\u3092\u89e3\u6c7a\u3057\u3066\u3044\u308b\u304b\u77e5\u3089\u306a\u3044\u3068\u3069\u3046\u3057\u3088\u3046\u3082\u306a\u3044\u611f\u3058\u304c\u3042\u3063\u3066\u3001\u82e6\u3057\u7d1b\u308c\u306b\u8272\u3005\u5909\u5f62\u3057\u3066\u3044\u3063\u305f\u3089\u5076\u7136\u3046\u307e\u304f\u3044\u3063\u305f\u306e\u304c\u4e0a\u8a18\u306e\u30b3\u30fc\u30c9\u3067\u3059\u2026\u2026\u3002\n\n\u3042\u3068\u3001\u9ad8\u30ab\u30a4\u30f3\u30c9\u306a\u30da\u30a2\u30ce\u6570\u3067\u8868\u305b\u308b\u6570\u306e\u4e0a\u9650\u3067\u3059\u304c\u3001 [Limits of Nat type in Shapeless](http://stackoverflow.com/questions/21296099/limits-of-nat-type-in-shapeless) \u306b\u3088\u308b\u3068\u3001\n\n> Shapeless 2.0 currently still uses the Church encoding, which will get you to 1,000 or so before the compiler gives up.\n\n\u3060\u305d\u3046\u3067\u3059\u3002\u30b3\u30f3\u30d1\u30a4\u30eb\u6642\u9593\u306e\u554f\u984c\u3082\u3042\u308b\u306e\u3067\u3001\u5b9f\u7528\u7684\u306b\u306f\u3069\u3046\u306a\u3093\u3067\u3057\u3087\u3046\u306d\u2026\u2026\u3002\n\u5358\u4f4d\u7cfb\u306e\u6b21\u5143\u3092\u8868\u3059\u7528\u9014\u306e\u5834\u5408\u306f\u3001\u4e8c\u6841\u306e\u6574\u6570\u304c\u5fc5\u8981\u306b\u306a\u308b\u3053\u3068\u306f\u305d\u3046\u305d\u3046\u306a\u3044\u3068\u601d\u3046\u306e\u3067\u3001\u9069\u3057\u3066\u3044\u305d\u3046\u3067\u3059\u3002\n\n# \u5b9f\u884c\u74b0\u5883\n\n```build.sbt\nname := \"type_level_encode\"\n\nversion := \"1.0\"\n\nscalaVersion := \"2.11.2\"\n```\n\n```build.properties\nsbt.version=0.13.6\n```\n"}