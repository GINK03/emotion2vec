{"context": "\u524d\u56de\u306e\u7d9a\u304d\n\nindex.html\n<!DOCTYPE html>\n<html>\n\n  <head>\n    <script data-require=\"jquery@*\" data-semver=\"2.2.0\" src=\"https://ajax.googleapis.com/ajax/libs/jquery/2.2.0/jquery.min.js\"></script>\n    <link data-require=\"bootstrap-css@3.3.6\" data-semver=\"3.3.6\" rel=\"stylesheet\" href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.6/css/bootstrap.css\" />\n    <link rel=\"stylesheet\" href=\"style.css\" />\n  </head>\n\n  <body>\n    <div id=\"container\" class=\"container\"></div>\n    <script src=\"https://fb.me/react-0.13.3.js\"></script>\n    <script src=\"https://fb.me/JSXTransformer-0.13.3.js\"></script>\n    <script type=\"text/jsx\" src=\"script.jsx\"></script>\n  </body>\n\n</html>\n\n\n\nstyle.css\n#stars-frame .glyphicon{\n  margin: 0.3em;\n  font-size: 1.75em;\n}\n\n#stars-frame, #answer-frame{\n  width: 40%;\n  float:left;\n}\n\n#button-frame{\n  width:20%;\n  float:left;\n  text-align:center;\n  margin-top: 70px;\n}\n\n#stars-frame .well, #answer-frame .well{\n  height:200px;\n}\n\n#numbers-frame .number, #answer-frame .well span{\n  display:inline-block;\n  margin: 0.5em;\n  background-color:#bbb;\n  width:30px;\n  text-align:center;\n  font-size:22px;\n  border-radius:50%;\n  cursor:pointer;\n}\n\n#numbers-frame .selected-true{\n  background-color:#e8e8e8;\n  color:#ddd;\n  cursor:not-allowed;\n}\n\n#numbers-frame .used-true{\n  background-color:#aaddaa;\n  color:#99bb99;\n  cursor:not-allowed;\n}\n\n\n\nscript.jsx\n//bit.ly/s-pcs\nvar possibleCombinationSum = function(arr, n) {\n  if (arr.indexOf(n) >= 0) { return true; }\n  if (arr[0] > n) { return false; }\n  if (arr[arr.length - 1] > n) {\n    arr.pop();\n    return possibleCombinationSum(arr, n);\n  }\n  var listSize = arr.length, combinationsCount = (1 << listSize)\n  for (var i = 1; i < combinationsCount ; i++ ) {\n    var combinationSum = 0;\n    for (var j=0 ; j < listSize ; j++) {\n      if (i & (1 << j)) { combinationSum += arr[j]; }\n    }\n    if (n === combinationSum) { return true; }\n  }\n  return false;\n};\n\nvar StarsFrame = React.createClass({\n  render: function(){\n    var stars = [];\n    for(var i = 0; i < this.props.numberOfStars; i++){\n      stars.push(\n        <span className=\"glyphicon glyphicon-star\"></span>\n      );\n    }\n\n    return (\n      <div id=\"stars-frame\">\n        <div className=\"well\">\n          {stars}\n        </div>\n      </div>\n    );\n  }\n});\n\nvar ButtonFrame = React.createClass({\n  render: function(){\n    var disabled, button, correct = this.props.correct;\n\n    switch(correct){\n      case true:\n        button = (\n          <button className=\"btn btn-success btn-lg\" onClick={this.props.acceptAnswer}>\n            <span className=\"glyphicon glyphicon-ok\"></span>\n          </button>\n        );\n        break;\n      case false:\n        button = (\n          <button className=\"btn btn-danger btn-lg\">\n            <span className=\"glyphicon glyphicon-remove\"></span>\n          </button>\n        );\n        break;\n      default:\n        disabled = (this.props.selectedNumbers.length === 0);\n        button = (\n          <button className=\"btn btn-primary btn-lg\" disabled={disabled}\n                  onClick={this.props.checkAnswer}>\n            =\n          </button>\n        );\n    }\n\n    disabled = (this.props.selectedNumbers.length === 0);\n    return (\n      <div id=\"button-frame\">\n        {button}\n        <br /><br />\n        <button className=\"btn btn-warning btn-xs\" onClick={this.props.redraw}\n                disabled={this.props.redraws === 0}>\n          <span className=\"glyphicon glyphicon-refresh\"></span>\n          &nbsp;\n          {this.props.redraws}\n        </button>\n      </div>\n    );\n  }\n});\n\nvar AnswerFrame = React.createClass({\n  render: function(){\n    var props = this.props;\n    var selectedNumbers = props.selectedNumbers.map(function(i){\n      return (\n        <span onClick={props.unselectNumber.bind(null, i)}>\n          {i}\n        </span>\n      )\n    });\n\n    return (\n      <div id=\"answer-frame\">\n        <div className=\"well\">\n          {selectedNumbers}\n        </div>\n      </div>\n    );\n  }\n});\n\nvar NumbersFrame = React.createClass({\n  render: function(){\n    var numbers = [], className,\n        selectNumber = this.props.selectNumber,\n        usedNumbers = this.props.usedNumbers,\n        selectedNumbers = this.props.selectedNumbers;\n\n    for( var i = 1; i <= 9; i++){\n      className = \"number selected-\" + (selectedNumbers.indexOf(i) >= 0);\n      className += \" used-\" + (usedNumbers.indexOf(i) >= 0);\n      numbers.push(\n        <div className={className} onClick={selectNumber.bind(null, i)}>\n          {i}\n        </div>\n      );\n    }\n    return (\n      <div id=\"numbers-frame\">\n        <div className=\"well\">\n          {numbers}\n        </div>\n      </div>\n    );\n  }\n});\n\nvar DoneFrame = React.createClass({\n  render: function(){\n    return (\n      <div className=\"well text-center\">\n        <h2>{this.props.doneStatus}</h2>\n        <button className=\"btn btn-default\"\n                onClick={this.props.resetGame}>\n          Play again\n        </button>\n      </div>\n    );\n  }\n});\n\nvar Game = React.createClass({\n  getInitialState: function(){\n    return {numberOfStars: this.randomNumber(),\n            selectedNumbers: [],\n            usedNumbers: [],\n            redraws: 5,\n            correct: null,\n            doneStatus: null\n    };\n  },\n  resetGame: function(){\n    this.replaceState(this.getInitialState());\n  },\n  randomNumber: function(){\n    return Math.floor(Math.random() * 9) + 1\n  },\n  selectNumber: function(clickedNumber){\n    if(this.state.selectedNumbers.indexOf(clickedNumber) < 0){\n      this.setState(\n        {selectedNumbers: this.state.selectedNumbers.concat(clickedNumber),\n          correct: null\n        }\n      );\n    }\n  },\n  unselectNumber: function(clickedNumber){\n    var selectedNumbers = this.state.selectedNumbers,\n        indexOfNumber = selectedNumbers.indexOf(clickedNumber);\n\n    selectedNumbers.splice(indexOfNumber, 1);\n\n    this.setState({selectedNumbers: selectedNumbers, correct: null});\n  },\n  sumOfSelectedNumbers: function(){\n    return this.state.selectedNumbers.reduce(function(p, n){\n      return p+n;\n    }, 0)\n  },\n  checkAnswer: function(){\n    var correct = (this.state.numberOfStars === this.sumOfSelectedNumbers());\n    this.setState({correct: correct});\n  },\n  acceptAnswer: function(){\n    var usedNumbers = this.state.usedNumbers.concat(this.state.selectedNumbers);\n    this.setState({\n      selectedNumbers: [],\n      usedNumbers: usedNumbers,\n      correct: null,\n      numberOfStars: this.randomNumber()\n    }, function(){\n      this.updateDoneStatus();\n    });\n  },\n  redraw: function(){\n    if(this.state.redraws > 0){\n      this.setState({\n        numberOfStars: this.randomNumber(),\n        correct: null,\n        selectedNumbers: [],\n        redraws: this.state.redraws - 1\n      }, function(){\n        this.updateDoneStatus();\n      });\n    }\n  },\n  possibleSolution: function(){\n    var numberOfStars = this.state.numberOfStars,\n        possibleNumbers = [],\n        usedNumbers = this.state.usedNumbers;\n\n    for(var i = 1; i <= 9; i++){\n      if(usedNumbers.indexOf(i) < 0){\n        possibleNumbers.push(i);\n      }\n    }\n\n    return possibleCombinationSum(possibleNumbers, numberOfStars);\n  },\n  updateDoneStatus: function(){\n    if(this.state.usedNumbers.length === 9){\n      this.setState({doneStatus: 'Done. Nice!'});\n      return;\n    }\n    if(this.state.redraws === 0 && !this.possibleSolution()){\n      this.setState({doneStatus: 'Game Pver!'});\n    }\n\n  },\n  render: function(){\n    var selectedNumbers = this.state.selectedNumbers,\n        usedNumbers = this.state.usedNumbers,\n        numberOfStars = this.state.numberOfStars,\n        redraws = this.state.redraws,\n        correct = this.state.correct,\n        doneStatus = this.state.doneStatus,\n        bottomFrame;\n\n        if(doneStatus){\n          bottomFrame = <DoneFrame doneStatus={doneStatus}\n                                   resetGame={this.resetGame} />;\n        }else{\n          bottomFrame = <NumbersFrame selectedNumbers={selectedNumbers}\n                      usedNumbers={usedNumbers}\n                      selectNumber={this.selectNumber} />;\n        }\n\n    return (\n      <div id=\"game\">\n        <h2>Play Nine</h2>\n        <hr />\n        <div className=\"clearfix\">\n          <StarsFrame numberOfStars={numberOfStars} />\n          <ButtonFrame selectedNumbers={selectedNumbers}\n                       correct={correct}\n                       redraws={redraws}\n                       checkAnswer={this.checkAnswer} \n                       acceptAnswer={this.acceptAnswer}\n                       redraw={this.redraw} />\n          <AnswerFrame selectedNumbers={selectedNumbers} \n                       unselectNumber={this.unselectNumber} />\n        </div>\n\n        {bottomFrame} \n\n      </div>\n    );\n  }\n});\n\nReact.render(\n  <Game />,\n  document.getElementById('container')\n);\n\n\n[\u524d\u56de](http://qiita.com/1-AizawaSatoshi/items/a38666ddb8025d975167)\u306e\u7d9a\u304d\n\n```index.html\n<!DOCTYPE html>\n<html>\n\n  <head>\n    <script data-require=\"jquery@*\" data-semver=\"2.2.0\" src=\"https://ajax.googleapis.com/ajax/libs/jquery/2.2.0/jquery.min.js\"></script>\n    <link data-require=\"bootstrap-css@3.3.6\" data-semver=\"3.3.6\" rel=\"stylesheet\" href=\"https://maxcdn.bootstrapcdn.com/bootstrap/3.3.6/css/bootstrap.css\" />\n    <link rel=\"stylesheet\" href=\"style.css\" />\n  </head>\n\n  <body>\n    <div id=\"container\" class=\"container\"></div>\n    <script src=\"https://fb.me/react-0.13.3.js\"></script>\n    <script src=\"https://fb.me/JSXTransformer-0.13.3.js\"></script>\n    <script type=\"text/jsx\" src=\"script.jsx\"></script>\n  </body>\n\n</html>\n```\n\n```style.css\n#stars-frame .glyphicon{\n  margin: 0.3em;\n  font-size: 1.75em;\n}\n\n#stars-frame, #answer-frame{\n  width: 40%;\n  float:left;\n}\n\n#button-frame{\n  width:20%;\n  float:left;\n  text-align:center;\n  margin-top: 70px;\n}\n\n#stars-frame .well, #answer-frame .well{\n  height:200px;\n}\n\n#numbers-frame .number, #answer-frame .well span{\n  display:inline-block;\n  margin: 0.5em;\n  background-color:#bbb;\n  width:30px;\n  text-align:center;\n  font-size:22px;\n  border-radius:50%;\n  cursor:pointer;\n}\n\n#numbers-frame .selected-true{\n  background-color:#e8e8e8;\n  color:#ddd;\n  cursor:not-allowed;\n}\n\n#numbers-frame .used-true{\n  background-color:#aaddaa;\n  color:#99bb99;\n  cursor:not-allowed;\n}\n```\n\n```script.jsx\n//bit.ly/s-pcs\nvar possibleCombinationSum = function(arr, n) {\n  if (arr.indexOf(n) >= 0) { return true; }\n  if (arr[0] > n) { return false; }\n  if (arr[arr.length - 1] > n) {\n    arr.pop();\n    return possibleCombinationSum(arr, n);\n  }\n  var listSize = arr.length, combinationsCount = (1 << listSize)\n  for (var i = 1; i < combinationsCount ; i++ ) {\n    var combinationSum = 0;\n    for (var j=0 ; j < listSize ; j++) {\n      if (i & (1 << j)) { combinationSum += arr[j]; }\n    }\n    if (n === combinationSum) { return true; }\n  }\n  return false;\n};\n\nvar StarsFrame = React.createClass({\n  render: function(){\n    var stars = [];\n    for(var i = 0; i < this.props.numberOfStars; i++){\n      stars.push(\n        <span className=\"glyphicon glyphicon-star\"></span>\n      );\n    }\n    \n    return (\n      <div id=\"stars-frame\">\n        <div className=\"well\">\n          {stars}\n        </div>\n      </div>\n    );\n  }\n});\n\nvar ButtonFrame = React.createClass({\n  render: function(){\n    var disabled, button, correct = this.props.correct;\n    \n    switch(correct){\n      case true:\n        button = (\n          <button className=\"btn btn-success btn-lg\" onClick={this.props.acceptAnswer}>\n            <span className=\"glyphicon glyphicon-ok\"></span>\n          </button>\n        );\n        break;\n      case false:\n        button = (\n          <button className=\"btn btn-danger btn-lg\">\n            <span className=\"glyphicon glyphicon-remove\"></span>\n          </button>\n        );\n        break;\n      default:\n        disabled = (this.props.selectedNumbers.length === 0);\n        button = (\n          <button className=\"btn btn-primary btn-lg\" disabled={disabled}\n                  onClick={this.props.checkAnswer}>\n            =\n          </button>\n        );\n    }\n    \n    disabled = (this.props.selectedNumbers.length === 0);\n    return (\n      <div id=\"button-frame\">\n        {button}\n        <br /><br />\n        <button className=\"btn btn-warning btn-xs\" onClick={this.props.redraw}\n                disabled={this.props.redraws === 0}>\n          <span className=\"glyphicon glyphicon-refresh\"></span>\n          &nbsp;\n          {this.props.redraws}\n        </button>\n      </div>\n    );\n  }\n});\n\nvar AnswerFrame = React.createClass({\n  render: function(){\n    var props = this.props;\n    var selectedNumbers = props.selectedNumbers.map(function(i){\n      return (\n        <span onClick={props.unselectNumber.bind(null, i)}>\n          {i}\n        </span>\n      )\n    });\n    \n    return (\n      <div id=\"answer-frame\">\n        <div className=\"well\">\n          {selectedNumbers}\n        </div>\n      </div>\n    );\n  }\n});\n\nvar NumbersFrame = React.createClass({\n  render: function(){\n    var numbers = [], className,\n        selectNumber = this.props.selectNumber,\n        usedNumbers = this.props.usedNumbers,\n        selectedNumbers = this.props.selectedNumbers;\n        \n    for( var i = 1; i <= 9; i++){\n      className = \"number selected-\" + (selectedNumbers.indexOf(i) >= 0);\n      className += \" used-\" + (usedNumbers.indexOf(i) >= 0);\n      numbers.push(\n        <div className={className} onClick={selectNumber.bind(null, i)}>\n          {i}\n        </div>\n      );\n    }\n    return (\n      <div id=\"numbers-frame\">\n        <div className=\"well\">\n          {numbers}\n        </div>\n      </div>\n    );\n  }\n});\n\nvar DoneFrame = React.createClass({\n  render: function(){\n    return (\n      <div className=\"well text-center\">\n        <h2>{this.props.doneStatus}</h2>\n        <button className=\"btn btn-default\"\n                onClick={this.props.resetGame}>\n          Play again\n        </button>\n      </div>\n    );\n  }\n});\n\nvar Game = React.createClass({\n  getInitialState: function(){\n    return {numberOfStars: this.randomNumber(),\n            selectedNumbers: [],\n            usedNumbers: [],\n            redraws: 5,\n            correct: null,\n            doneStatus: null\n    };\n  },\n  resetGame: function(){\n    this.replaceState(this.getInitialState());\n  },\n  randomNumber: function(){\n    return Math.floor(Math.random() * 9) + 1\n  },\n  selectNumber: function(clickedNumber){\n    if(this.state.selectedNumbers.indexOf(clickedNumber) < 0){\n      this.setState(\n        {selectedNumbers: this.state.selectedNumbers.concat(clickedNumber),\n          correct: null\n        }\n      );\n    }\n  },\n  unselectNumber: function(clickedNumber){\n    var selectedNumbers = this.state.selectedNumbers,\n        indexOfNumber = selectedNumbers.indexOf(clickedNumber);\n        \n    selectedNumbers.splice(indexOfNumber, 1);\n    \n    this.setState({selectedNumbers: selectedNumbers, correct: null});\n  },\n  sumOfSelectedNumbers: function(){\n    return this.state.selectedNumbers.reduce(function(p, n){\n      return p+n;\n    }, 0)\n  },\n  checkAnswer: function(){\n    var correct = (this.state.numberOfStars === this.sumOfSelectedNumbers());\n    this.setState({correct: correct});\n  },\n  acceptAnswer: function(){\n    var usedNumbers = this.state.usedNumbers.concat(this.state.selectedNumbers);\n    this.setState({\n      selectedNumbers: [],\n      usedNumbers: usedNumbers,\n      correct: null,\n      numberOfStars: this.randomNumber()\n    }, function(){\n      this.updateDoneStatus();\n    });\n  },\n  redraw: function(){\n    if(this.state.redraws > 0){\n      this.setState({\n        numberOfStars: this.randomNumber(),\n        correct: null,\n        selectedNumbers: [],\n        redraws: this.state.redraws - 1\n      }, function(){\n        this.updateDoneStatus();\n      });\n    }\n  },\n  possibleSolution: function(){\n    var numberOfStars = this.state.numberOfStars,\n        possibleNumbers = [],\n        usedNumbers = this.state.usedNumbers;\n        \n    for(var i = 1; i <= 9; i++){\n      if(usedNumbers.indexOf(i) < 0){\n        possibleNumbers.push(i);\n      }\n    }\n    \n    return possibleCombinationSum(possibleNumbers, numberOfStars);\n  },\n  updateDoneStatus: function(){\n    if(this.state.usedNumbers.length === 9){\n      this.setState({doneStatus: 'Done. Nice!'});\n      return;\n    }\n    if(this.state.redraws === 0 && !this.possibleSolution()){\n      this.setState({doneStatus: 'Game Pver!'});\n    }\n    \n  },\n  render: function(){\n    var selectedNumbers = this.state.selectedNumbers,\n        usedNumbers = this.state.usedNumbers,\n        numberOfStars = this.state.numberOfStars,\n        redraws = this.state.redraws,\n        correct = this.state.correct,\n        doneStatus = this.state.doneStatus,\n        bottomFrame;\n        \n        if(doneStatus){\n          bottomFrame = <DoneFrame doneStatus={doneStatus}\n                                   resetGame={this.resetGame} />;\n        }else{\n          bottomFrame = <NumbersFrame selectedNumbers={selectedNumbers}\n                      usedNumbers={usedNumbers}\n                      selectNumber={this.selectNumber} />;\n        }\n        \n    return (\n      <div id=\"game\">\n        <h2>Play Nine</h2>\n        <hr />\n        <div className=\"clearfix\">\n          <StarsFrame numberOfStars={numberOfStars} />\n          <ButtonFrame selectedNumbers={selectedNumbers}\n                       correct={correct}\n                       redraws={redraws}\n                       checkAnswer={this.checkAnswer} \n                       acceptAnswer={this.acceptAnswer}\n                       redraw={this.redraw} />\n          <AnswerFrame selectedNumbers={selectedNumbers} \n                       unselectNumber={this.unselectNumber} />\n        </div>\n        \n        {bottomFrame} \n        \n      </div>\n    );\n  }\n});\n\nReact.render(\n  <Game />,\n  document.getElementById('container')\n);\n```\n", "tags": ["react.js", "JavaScript"]}