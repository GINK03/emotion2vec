{"context": " More than 1 year has passed since last update.\n\n\u3053\u306e\u8a18\u4e8b\u3092\u66f8\u3044\u305f\u304d\u3063\u304b\u3051\n1, 2\u5e74\u304f\u3089\u3044\u524d\u304b\u3089D\u8a00\u8a9e\u3067\u5f0f\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u3092\u4f7f\u3063\u305f\u884c\u5217\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u66f8\u3044\u3066\u304d\u307e\u3057\u3066\u3001\n\u305d\u306e\u6642\u306b\u300c\u5f0f\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u3068\u30e2\u30ca\u30c9\u3063\u3066\u4f3c\u3066\u308b\u3088\u306a\u3042\u300d\u3068\u601d\u3063\u305f\u306e\u304c\u304d\u3063\u304b\u3051\u3067\u3059\u3002\n\u305d\u3053\u3067\u3001\u4eca\u56de\u306f\u5f0f\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u3092\u4f7f\u3063\u3066\u7d14\u7c8b\u95a2\u6570\u578b\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u3092\u884c\u3063\u3066\u307f\u305f\u3044\u3068\u601d\u3044\u307e\u3059\u3002\n\n\u7d14\u7c8b\u95a2\u6570\u578b\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0 on D\u8a00\u8a9e\n\u304b\u306e\u6709\u540d\u306aHaskell\u3067\u306f\u3001\u30e2\u30ca\u30c9\u3068\u3044\u3046\u3082\u306e\u3092\u7528\u3044\u3066\u975e\u7d14\u7c8b\u306a\u8a08\u7b97\u3067\u3082\u7d14\u7c8b\u6027\u3092\u78ba\u4fdd\u3057\u3066\u3044\u308b\u3088\u3046\u3067\u3059\u304c\u3001\u30e2\u30ca\u30c9\u3068\u306f\u300c\u624b\u7d9a\u304d\u547d\u4ee4\u66f8\u300d\u3089\u3057\u3044\u306e\u3067\u3001D\u8a00\u8a9e\u3067\u306f\u5f0f\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u3067\u8868\u305b\u307e\u3059\u3002\n\u5f0f\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u3068\u306f\u3001\u6b21\u306e\u3088\u3046\u306b\u5f0f\u306e\u8a08\u7b97\u624b\u9806\u3092\u578b\u3068\u3057\u3066\u4fdd\u6301\u3057\u3066\u3044\u308b\u3088\u3046\u306a\u3082\u306e\u3067\u3059\u3002\n\u5927\u304d\u306a\u7279\u5fb4\u3068\u3057\u3066\u306f\u9045\u5ef6\u8a55\u4fa1\u304c\u3042\u308a\u3001\u5f0f\u306e\u5024\u306f\u5fc5\u8981\u306b\u306a\u3063\u3066\u304b\u3089\u3057\u304b\u8a08\u7b97\u3055\u308c\u307e\u305b\u3093\u3002\n\u307e\u305f\u975e\u7d14\u7c8b\u306a\u8a08\u7b97\u3067\u3042\u3063\u3066\u3082\u3001\u305d\u306e\u8a08\u7b97\u3092\u3057\u306a\u3051\u308c\u3070\u7d14\u7c8b\u3060\u3068\u8a00\u3048\u307e\u3059(\u3053\u3053\u91cd\u8981)\u3002\n\u3064\u307e\u308a\u3001\u5f0f\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u3067\u9045\u5ef6\u8a55\u4fa1\u3055\u3048\u3067\u304d\u308c\u3070\u7d14\u7c8b\u95a2\u6570\u578b\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u304c\u3067\u304d\u305d\u3046\u3067\u3059\u3002\n\n\u9045\u5ef6\u8a55\u4fa1\u5f0f\n\u307e\u305a\u30d5\u30a1\u30f3\u30af\u30bf\u3092\u8003\u3048\u307e\u3059\u3002\nHaskell\u3067\u306f\u30d5\u30a1\u30f3\u30af\u30bf\u306f\u6b21\u306e\u3088\u3046\u306b\u8868\u3055\u308c\u307e\u3059\u3002\n\u3061\u306a\u307f\u306b\u3001\u30d5\u30a1\u30f3\u30af\u30bf\u306f\u300c\u7bb1\u3067\u3042\u308a\u3001\u305d\u306e\u7bb1\u306e\u4e2d\u3067\u306f\u7bb1\u306b\u5165\u3063\u3066\u3044\u308b\u5024\u306b\u5bfe\u3057\u3066\u95a2\u6570\u3092\u76f4\u63a5\u9069\u7528\u3067\u304d\u308b\u7bb1\u3067\u3042\u308b\u300d\u3068\u8003\u3048\u3066\u304f\u3060\u3055\u3044\u3002\nclass Functor f where\n    fmap::(a -> b) -> f a -> f b\n\n\u307e\u305f\u30e2\u30ca\u30c9\u3068\u306f\u30d5\u30a1\u30f3\u30af\u30bf\u3092\u5c11\u3057\u30a4\u30b8\u3063\u305f\u3082\u306e\u3067\u3059\u3002\n\u4eca\u56de\u306f>>=\u3068return\u3057\u304b\u4f7f\u7528\u3057\u307e\u305b\u3093\u3002\n\u30e2\u30ca\u30c9\u306f\u300c\u30d5\u30a1\u30f3\u30af\u30bf\u306e\u3046\u3061\u3001\u7bb1\u304c\u4e8c\u91cd\u306b\u306a\u3063\u305f\u5834\u5408\u306b\u306f\u5916\u5074\u306e\u7bb1\u3092\u7834\u308b\u3053\u3068\u304c\u3067\u304d\u308b\u7bb1\u300d\u307f\u305f\u3044\u306a\u611f\u3058\u3067\u3059\u3002\nclass  Monad m  where\n    (>>=)   :: m a -> (a -> m b) -> m b\n    (>>)    :: m a -> m b -> m b\n    return  :: a -> m a\n    fail    :: String -> m a\n\n    m >> k  =  m >>= \\_ -> k\n    fail s  = error s\n\n\u9045\u5ef6\u8a55\u4fa1\u3092\u884c\u3046\u5f0f\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u3055\u3048\u5b9f\u88c5\u3067\u304d\u308c\u3070\u3001\u305d\u308c\u3092\u7528\u3044\u3066D\u8a00\u8a9e\u4e0a\u3067\u3082\u7d14\u7c8b\u95a2\u6570\u578b\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u304c\u3067\u304d\u305d\u3046\u3067\u3042\u308b\u3068\u3044\u3044\u307e\u3057\u305f\u3002\n\u5b9f\u306f\u3001\u9045\u5ef6\u8a55\u4fa1\u3092\u884c\u3046\u5f0f\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u306f\u30d5\u30a1\u30f3\u30af\u30bf\u3067\u3082\u3042\u308a\u30e2\u30ca\u30c9\u3067\u3082\u3042\u308a\u307e\u3059\u3002\n\u3064\u307e\u308a\u3001Lazy!T\u3068\u3044\u3046\u9045\u5ef6\u8a55\u4fa1\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306b\u5bfe\u3057\u3066\u95a2\u6570\u3092\u9069\u7528\u3057\u305f\u5834\u5408\u306e\u8fd4\u308a\u5024\u306f\u3001Lazy!(typeof(f(T.init)))\u3067\u3042\u308a\u3001Lazy!(Lazy!T)\u3068Lazy!(T)\u306f\u540c\u3058\u3053\u3068\u3092\u3057\u3066\u3044\u308b\u3068\u3044\u3046\u3053\u3068\u3067\u3059\u3002\n\u306a\u306e\u3067\u3001\u9045\u5ef6\u8a55\u4fa1\u3092\u8868\u3059\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306b\u306f\u30d5\u30a1\u30f3\u30af\u30bf\u306efmap\u3068\u3001\u30e2\u30ca\u30c9\u306e>>=, return\u3092\u5b9f\u88c5\u3057\u307e\u3059\u3002\n>>=\u3068return\u306f\u540d\u524d\u304cD\u8a00\u8a9e\u7684\u3067\u306f\u306a\u3044\u306e\u3067\u3001bind\u3068make\u3068\u3057\u307e\u3059\u3002\n\u305d\u3046\u3059\u308b\u3068\u3001D\u8a00\u8a9e\u3067\u30d5\u30a1\u30f3\u30af\u30bf\u3068\u30e2\u30ca\u30c9\u3092\u53ef\u80fd\u306a\u9650\u308a\u8868\u73fe\u3059\u308b\u3068\u6b21\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002\nenum bool isFunctor(T) = is(typeof((T t){\n  static if(is(typeof(t.get) == void))\n    static assert(is(typeof(t.fmap!(() => int.init).get) == int));\n  else\n  {\n    static U f(U)(U a){ return a; }\n\n    static assert(is(typeof(t.fmap!f.get) == typeof(f(t.get))));\n  }\n}));\n\n\nenum bool isMonad(T) = is(typeof((T t){\n  static if(is(typeof(t.get) == void))\n    static assert(is(typeof(t.bind!(() => T.make(int.init)).get) == int));\n  else\n  {\n    static auto f(U)(U a){ return T.make(a); }\n\n    static assert(is(typeof(t.bind!f.get) == typeof(f(t.get).get)));\n  }\n}));\n\n\u3055\u3089\u306b\u3001\u9045\u5ef6\u8a55\u4fa1\u3092\u884c\u3046\u5f0f\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8(LazyExpr)\u306f\u6b21\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002\nenum bool isLazyExpr(T) = T.isLazyExpr && isFunctor!T;\n\n\n/**\n\u9045\u5ef6\u8a55\u4fa1\u3092\u884c\u3046\u5f0f\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u3067\u5b9f\u88c5\u3059\u3079\u304d\u30e1\u30bd\u30c3\u30c9\u3002\nfmap\u3068bind\u3068make\u306e3\u3064\u3002\n*/\nmixin template LazyExprMethod()\n{\n  static if(!is(typeof(this.get) == void))\n  {\n    LazyFuncCallExpr!(a => f(a.get), typeof(this)) fmap(alias f)() pure { return typeof(return)(this); }\n    LazyFuncCallExpr!(a => f(a.get).get, typeof(this)) bind(alias f)() pure { return typeof(return)(this); }\n  }\n  else\n  {\n    LazyFuncCallExpr!(a => { a.get; return f(); }(), typeof(this)) fmap(alias f)() pure { return typeof(return)(this); }\n    LazyFuncCallExpr!(a => { a.get; return f().get; }(), typeof(this)) bind(alias f)() pure { return typeof(return)(this); }\n  }\n\n    static ValueExpr!T make(T)(T v) pure { return ValueExpr!T(v); }\n}\n\n\n/**\n\u305f\u3060\u306e\u5024\u3092\u683c\u7d0d\u3059\u308b\n*/\nstruct ValueExpr(T)\n{\n    enum isLazyExpr = true;\n\n    T get() @property { return _v; }\n    mixin LazyExprMethod!();\n\n  private:\n    T _v;\n}\n\n\n/**\n\u95a2\u6570\u547c\u3073\u51fa\u3057\u3092\u9045\u5ef6\u8a55\u4fa1\u3059\u308b\n*/\nstruct LazyFuncCallExpr(alias f, T...)\n{\n    enum isLazyExpr = true;\n\n    typeof(f(_v)) get() @property { return f(_v); }\n    mixin LazyExprMethod!();\n\n  private:\n    T _v;\n}\n\n\n/// ditto\nLazyFuncCallExpr!(f, T) lazyFuncCallExpr(alias f, T...)(T args)\n{\n    static assert(isLazyExpr!(typeof(return)));\n    return typeof(return)(args);\n}\n\n\n\u307f\u3093\u306a\u7d14\u7c8b\u306a\u3093\u3060\u3088\u306d\n\u4ee5\u4e0a\u306e\u30b3\u30fc\u30c9\u3092lazymode\u3068\u3044\u3046\u30e2\u30b8\u30e5\u30fc\u30eb\u306b\u3059\u308b\u3068\u3001\u6b21\u306e\u3088\u3046\u306b\u51c4\u304f\u7d14\u7c8b\u306b\u30d7\u30ed\u30b0\u30e9\u30e0\u304c\u66f8\u3051\u307e\u3059\u3002\n\u3053\u306e\u30b3\u30fc\u30c9\u306freadln.split.writeln\u3068\u540c\u3058\u52d5\u4f5c\u3092\u3057\u307e\u3059\u3002\n/**\n(\u3053\u306emain\u95a2\u6570\u306f\u51e6\u7406\u7cfb\u306e\u4e00\u90e8\u3060\u3068\u8003\u3048\u3066\u304f\u3060\u3055\u3044\u2026)\n*/\nvoid main()\n{\n    auto v = pmain();\n    static assert(isLazyExpr!(typeof(v)));\n    v.get;\n}\n\n\npure:   // \u3053\u3053\u4ee5\u4e0b\u3059\u3079\u3066pure\n\nimport std.stdio;\nimport std.string;\nimport lazymode;\n\nauto preadln(){ return lazyFuncCallExpr!readln(); }\nauto pwriteln(T...)(T args){ return lazyFuncCallExpr!writeln(args); }\n\n/**\npure\u306amain\u95a2\u6570\n*/\nauto pmain()\n{\n    return preadln.fmap!split.bind!pwriteln;\n}\n\n\n\u307e\u3068\u3081\n\u672c\u8a18\u4e8b\u3067\u306f\u3001\u975e\u7d14\u7c8b\u306a\u8a08\u7b97\u3092\u9045\u5ef6\u8a55\u4fa1\u3059\u308b\u3053\u3068\u3067\u7d14\u7c8b\u6027\u3092\u78ba\u4fdd\u3057\u307e\u3057\u305f\u3002\n\u9045\u5ef6\u8a55\u4fa1\u3092\u884c\u3046\u305f\u3081\u306b\u5f0f\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u3092\u5c0e\u5165\u3057\u3001\u307e\u305f\u5f0f\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u3092\u6271\u3044\u3084\u3059\u304f\u3059\u308b\u305f\u3081\u306b\u30d5\u30a1\u30f3\u30af\u30bf\u3068\u30e2\u30ca\u30c9\u306e\u8003\u3048\u65b9\u3092\u5c0e\u5165\u3057\u307e\u3057\u305f\u3002\n\n\u6700\u5f8c\u306b\n\u672c\u5f53\u306f\u30b0\u30ed\u30fc\u30d0\u30eb\u5909\u6570\u3068\u304b\u3082\u6271\u3044\u305f\u304b\u3063\u305f\u306e\u3067\u3059\u304c\u3001\u6642\u9593\u304c\u306a\u304b\u3063\u305f\u306e\u3067\u3053\u306e\u7a0b\u5ea6\u306b\u306a\u3063\u3066\u3057\u307e\u3044\u307e\u3057\u305f\u3002\n\u3053\u3053\u306b\u8f09\u305b\u305f\u30b3\u30fc\u30c9\u3092\u62e1\u5f35\u3059\u308c\u3070\u7c21\u5358\u306b\u30b0\u30ed\u30fc\u30d0\u30eb\u5909\u6570\u3082\u7d14\u7c8b\u306a\u95a2\u6570\u3067\u6271\u3046\u3053\u3068\u304c\u3067\u304d\u308b\u3068\u304a\u3082\u3044\u307e\u3059\u3002\n\u660e\u65e5\u306fshoo\u3055\u3093\u3067\u3059\u3002\n\u306a\u306b\u3084\u3089D\u8a00\u8a9e\u3067\u7d44\u307f\u8fbc\u307f\u306e\u3053\u3068\u3089\u3057\u3044\u306e\u3067\u3001\u50d5\u306f\u3059\u3054\u304f\u697d\u3057\u307f\u3067\u3059\u3002\n\u305d\u308c\u3067\u306f\u3002\n## \u3053\u306e\u8a18\u4e8b\u3092\u66f8\u3044\u305f\u304d\u3063\u304b\u3051\n\n1, 2\u5e74\u304f\u3089\u3044\u524d\u304b\u3089D\u8a00\u8a9e\u3067\u5f0f\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u3092\u4f7f\u3063\u305f\u884c\u5217\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u66f8\u3044\u3066\u304d\u307e\u3057\u3066\u3001\n\u305d\u306e\u6642\u306b\u300c\u5f0f\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u3068\u30e2\u30ca\u30c9\u3063\u3066\u4f3c\u3066\u308b\u3088\u306a\u3042\u300d\u3068\u601d\u3063\u305f\u306e\u304c\u304d\u3063\u304b\u3051\u3067\u3059\u3002\n\n\u305d\u3053\u3067\u3001\u4eca\u56de\u306f\u5f0f\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u3092\u4f7f\u3063\u3066\u7d14\u7c8b\u95a2\u6570\u578b\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u3092\u884c\u3063\u3066\u307f\u305f\u3044\u3068\u601d\u3044\u307e\u3059\u3002\n\n\n## \u7d14\u7c8b\u95a2\u6570\u578b\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0 on D\u8a00\u8a9e\n\n\u304b\u306e\u6709\u540d\u306aHaskell\u3067\u306f\u3001\u30e2\u30ca\u30c9\u3068\u3044\u3046\u3082\u306e\u3092\u7528\u3044\u3066\u975e\u7d14\u7c8b\u306a\u8a08\u7b97\u3067\u3082\u7d14\u7c8b\u6027\u3092\u78ba\u4fdd\u3057\u3066\u3044\u308b\u3088\u3046\u3067\u3059\u304c\u3001\u30e2\u30ca\u30c9\u3068\u306f\u300c\u624b\u7d9a\u304d\u547d\u4ee4\u66f8\u300d\u3089\u3057\u3044\u306e\u3067\u3001D\u8a00\u8a9e\u3067\u306f\u5f0f\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u3067\u8868\u305b\u307e\u3059\u3002\n\n\u5f0f\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u3068\u306f\u3001\u6b21\u306e\u3088\u3046\u306b\u5f0f\u306e\u8a08\u7b97\u624b\u9806\u3092\u578b\u3068\u3057\u3066\u4fdd\u6301\u3057\u3066\u3044\u308b\u3088\u3046\u306a\u3082\u306e\u3067\u3059\u3002\n\u5927\u304d\u306a\u7279\u5fb4\u3068\u3057\u3066\u306f\u9045\u5ef6\u8a55\u4fa1\u304c\u3042\u308a\u3001\u5f0f\u306e\u5024\u306f\u5fc5\u8981\u306b\u306a\u3063\u3066\u304b\u3089\u3057\u304b\u8a08\u7b97\u3055\u308c\u307e\u305b\u3093\u3002\n\n\u307e\u305f\u975e\u7d14\u7c8b\u306a\u8a08\u7b97\u3067\u3042\u3063\u3066\u3082\u3001\u305d\u306e\u8a08\u7b97\u3092\u3057\u306a\u3051\u308c\u3070\u7d14\u7c8b\u3060\u3068\u8a00\u3048\u307e\u3059(\u3053\u3053\u91cd\u8981)\u3002\n\u3064\u307e\u308a\u3001\u5f0f\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u3067\u9045\u5ef6\u8a55\u4fa1\u3055\u3048\u3067\u304d\u308c\u3070\u7d14\u7c8b\u95a2\u6570\u578b\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u304c\u3067\u304d\u305d\u3046\u3067\u3059\u3002\n\n\n## \u9045\u5ef6\u8a55\u4fa1\u5f0f\n\n\u307e\u305a\u30d5\u30a1\u30f3\u30af\u30bf\u3092\u8003\u3048\u307e\u3059\u3002\nHaskell\u3067\u306f\u30d5\u30a1\u30f3\u30af\u30bf\u306f\u6b21\u306e\u3088\u3046\u306b\u8868\u3055\u308c\u307e\u3059\u3002\n\n\u3061\u306a\u307f\u306b\u3001\u30d5\u30a1\u30f3\u30af\u30bf\u306f\u300c\u7bb1\u3067\u3042\u308a\u3001\u305d\u306e\u7bb1\u306e\u4e2d\u3067\u306f\u7bb1\u306b\u5165\u3063\u3066\u3044\u308b\u5024\u306b\u5bfe\u3057\u3066\u95a2\u6570\u3092\u76f4\u63a5\u9069\u7528\u3067\u304d\u308b\u7bb1\u3067\u3042\u308b\u300d\u3068\u8003\u3048\u3066\u304f\u3060\u3055\u3044\u3002\n\n~~~~~~~hs\nclass Functor f where\n    fmap::(a -> b) -> f a -> f b\n~~~~~~~~\n\n\u307e\u305f\u30e2\u30ca\u30c9\u3068\u306f\u30d5\u30a1\u30f3\u30af\u30bf\u3092\u5c11\u3057\u30a4\u30b8\u3063\u305f\u3082\u306e\u3067\u3059\u3002\n\u4eca\u56de\u306f`>>=`\u3068`return`\u3057\u304b\u4f7f\u7528\u3057\u307e\u305b\u3093\u3002\n\u30e2\u30ca\u30c9\u306f\u300c\u30d5\u30a1\u30f3\u30af\u30bf\u306e\u3046\u3061\u3001\u7bb1\u304c\u4e8c\u91cd\u306b\u306a\u3063\u305f\u5834\u5408\u306b\u306f\u5916\u5074\u306e\u7bb1\u3092\u7834\u308b\u3053\u3068\u304c\u3067\u304d\u308b\u7bb1\u300d\u307f\u305f\u3044\u306a\u611f\u3058\u3067\u3059\u3002\n\n~~~~~~~hs\nclass  Monad m  where\n    (>>=)   :: m a -> (a -> m b) -> m b\n    (>>)    :: m a -> m b -> m b\n    return  :: a -> m a\n    fail    :: String -> m a\n\n    m >> k  =  m >>= \\_ -> k\n    fail s  = error s\n~~~~~~~~\n\n\n\u9045\u5ef6\u8a55\u4fa1\u3092\u884c\u3046\u5f0f\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u3055\u3048\u5b9f\u88c5\u3067\u304d\u308c\u3070\u3001\u305d\u308c\u3092\u7528\u3044\u3066D\u8a00\u8a9e\u4e0a\u3067\u3082\u7d14\u7c8b\u95a2\u6570\u578b\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u304c\u3067\u304d\u305d\u3046\u3067\u3042\u308b\u3068\u3044\u3044\u307e\u3057\u305f\u3002\n\u5b9f\u306f\u3001\u9045\u5ef6\u8a55\u4fa1\u3092\u884c\u3046\u5f0f\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u306f\u30d5\u30a1\u30f3\u30af\u30bf\u3067\u3082\u3042\u308a\u30e2\u30ca\u30c9\u3067\u3082\u3042\u308a\u307e\u3059\u3002\n\u3064\u307e\u308a\u3001`Lazy!T`\u3068\u3044\u3046\u9045\u5ef6\u8a55\u4fa1\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306b\u5bfe\u3057\u3066\u95a2\u6570\u3092\u9069\u7528\u3057\u305f\u5834\u5408\u306e\u8fd4\u308a\u5024\u306f\u3001`Lazy!(typeof(f(T.init)))`\u3067\u3042\u308a\u3001`Lazy!(Lazy!T)`\u3068`Lazy!(T)`\u306f\u540c\u3058\u3053\u3068\u3092\u3057\u3066\u3044\u308b\u3068\u3044\u3046\u3053\u3068\u3067\u3059\u3002\n\n\u306a\u306e\u3067\u3001\u9045\u5ef6\u8a55\u4fa1\u3092\u8868\u3059\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306b\u306f\u30d5\u30a1\u30f3\u30af\u30bf\u306e`fmap`\u3068\u3001\u30e2\u30ca\u30c9\u306e`>>=`, `return`\u3092\u5b9f\u88c5\u3057\u307e\u3059\u3002\n`>>=`\u3068`return`\u306f\u540d\u524d\u304cD\u8a00\u8a9e\u7684\u3067\u306f\u306a\u3044\u306e\u3067\u3001`bind`\u3068`make`\u3068\u3057\u307e\u3059\u3002\n\n\u305d\u3046\u3059\u308b\u3068\u3001D\u8a00\u8a9e\u3067\u30d5\u30a1\u30f3\u30af\u30bf\u3068\u30e2\u30ca\u30c9\u3092\u53ef\u80fd\u306a\u9650\u308a\u8868\u73fe\u3059\u308b\u3068\u6b21\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002\n\n~~~~~d\nenum bool isFunctor(T) = is(typeof((T t){\n  static if(is(typeof(t.get) == void))\n    static assert(is(typeof(t.fmap!(() => int.init).get) == int));\n  else\n  {\n    static U f(U)(U a){ return a; }\n\n    static assert(is(typeof(t.fmap!f.get) == typeof(f(t.get))));\n  }\n}));\n\n\nenum bool isMonad(T) = is(typeof((T t){\n  static if(is(typeof(t.get) == void))\n    static assert(is(typeof(t.bind!(() => T.make(int.init)).get) == int));\n  else\n  {\n    static auto f(U)(U a){ return T.make(a); }\n\n    static assert(is(typeof(t.bind!f.get) == typeof(f(t.get).get)));\n  }\n}));\n~~~~~~\n\n\u3055\u3089\u306b\u3001\u9045\u5ef6\u8a55\u4fa1\u3092\u884c\u3046\u5f0f\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8(`LazyExpr`)\u306f\u6b21\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002\n\n~~~~~~d\nenum bool isLazyExpr(T) = T.isLazyExpr && isFunctor!T;\n\n\n/**\n\u9045\u5ef6\u8a55\u4fa1\u3092\u884c\u3046\u5f0f\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u3067\u5b9f\u88c5\u3059\u3079\u304d\u30e1\u30bd\u30c3\u30c9\u3002\nfmap\u3068bind\u3068make\u306e3\u3064\u3002\n*/\nmixin template LazyExprMethod()\n{\n  static if(!is(typeof(this.get) == void))\n  {\n    LazyFuncCallExpr!(a => f(a.get), typeof(this)) fmap(alias f)() pure { return typeof(return)(this); }\n    LazyFuncCallExpr!(a => f(a.get).get, typeof(this)) bind(alias f)() pure { return typeof(return)(this); }\n  }\n  else\n  {\n    LazyFuncCallExpr!(a => { a.get; return f(); }(), typeof(this)) fmap(alias f)() pure { return typeof(return)(this); }\n    LazyFuncCallExpr!(a => { a.get; return f().get; }(), typeof(this)) bind(alias f)() pure { return typeof(return)(this); }\n  }\n\n    static ValueExpr!T make(T)(T v) pure { return ValueExpr!T(v); }\n}\n\n\n/**\n\u305f\u3060\u306e\u5024\u3092\u683c\u7d0d\u3059\u308b\n*/\nstruct ValueExpr(T)\n{\n    enum isLazyExpr = true;\n\n    T get() @property { return _v; }\n    mixin LazyExprMethod!();\n\n  private:\n    T _v;\n}\n\n\n/**\n\u95a2\u6570\u547c\u3073\u51fa\u3057\u3092\u9045\u5ef6\u8a55\u4fa1\u3059\u308b\n*/\nstruct LazyFuncCallExpr(alias f, T...)\n{\n    enum isLazyExpr = true;\n\n    typeof(f(_v)) get() @property { return f(_v); }\n    mixin LazyExprMethod!();\n\n  private:\n    T _v;\n}\n\n\n/// ditto\nLazyFuncCallExpr!(f, T) lazyFuncCallExpr(alias f, T...)(T args)\n{\n    static assert(isLazyExpr!(typeof(return)));\n    return typeof(return)(args);\n}\n~~~~~~~\n\n\n## \u307f\u3093\u306a\u7d14\u7c8b\u306a\u3093\u3060\u3088\u306d\n\n\u4ee5\u4e0a\u306e\u30b3\u30fc\u30c9\u3092`lazymode`\u3068\u3044\u3046\u30e2\u30b8\u30e5\u30fc\u30eb\u306b\u3059\u308b\u3068\u3001\u6b21\u306e\u3088\u3046\u306b\u51c4\u304f\u7d14\u7c8b\u306b\u30d7\u30ed\u30b0\u30e9\u30e0\u304c\u66f8\u3051\u307e\u3059\u3002\n\u3053\u306e\u30b3\u30fc\u30c9\u306f`readln.split.writeln`\u3068\u540c\u3058\u52d5\u4f5c\u3092\u3057\u307e\u3059\u3002\n\n~~~~~~~d\n/**\n(\u3053\u306emain\u95a2\u6570\u306f\u51e6\u7406\u7cfb\u306e\u4e00\u90e8\u3060\u3068\u8003\u3048\u3066\u304f\u3060\u3055\u3044\u2026)\n*/\nvoid main()\n{\n    auto v = pmain();\n    static assert(isLazyExpr!(typeof(v)));\n    v.get;\n}\n\n\npure:   // \u3053\u3053\u4ee5\u4e0b\u3059\u3079\u3066pure\n\nimport std.stdio;\nimport std.string;\nimport lazymode;\n\nauto preadln(){ return lazyFuncCallExpr!readln(); }\nauto pwriteln(T...)(T args){ return lazyFuncCallExpr!writeln(args); }\n\n/**\npure\u306amain\u95a2\u6570\n*/\nauto pmain()\n{\n    return preadln.fmap!split.bind!pwriteln;\n}\n~~~~~~~~\n\n\n## \u307e\u3068\u3081\n\n\u672c\u8a18\u4e8b\u3067\u306f\u3001\u975e\u7d14\u7c8b\u306a\u8a08\u7b97\u3092\u9045\u5ef6\u8a55\u4fa1\u3059\u308b\u3053\u3068\u3067\u7d14\u7c8b\u6027\u3092\u78ba\u4fdd\u3057\u307e\u3057\u305f\u3002\n\u9045\u5ef6\u8a55\u4fa1\u3092\u884c\u3046\u305f\u3081\u306b\u5f0f\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u3092\u5c0e\u5165\u3057\u3001\u307e\u305f\u5f0f\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u3092\u6271\u3044\u3084\u3059\u304f\u3059\u308b\u305f\u3081\u306b\u30d5\u30a1\u30f3\u30af\u30bf\u3068\u30e2\u30ca\u30c9\u306e\u8003\u3048\u65b9\u3092\u5c0e\u5165\u3057\u307e\u3057\u305f\u3002\n\n\n## \u6700\u5f8c\u306b\n\n\u672c\u5f53\u306f\u30b0\u30ed\u30fc\u30d0\u30eb\u5909\u6570\u3068\u304b\u3082\u6271\u3044\u305f\u304b\u3063\u305f\u306e\u3067\u3059\u304c\u3001\u6642\u9593\u304c\u306a\u304b\u3063\u305f\u306e\u3067\u3053\u306e\u7a0b\u5ea6\u306b\u306a\u3063\u3066\u3057\u307e\u3044\u307e\u3057\u305f\u3002\n\u3053\u3053\u306b\u8f09\u305b\u305f\u30b3\u30fc\u30c9\u3092\u62e1\u5f35\u3059\u308c\u3070\u7c21\u5358\u306b\u30b0\u30ed\u30fc\u30d0\u30eb\u5909\u6570\u3082\u7d14\u7c8b\u306a\u95a2\u6570\u3067\u6271\u3046\u3053\u3068\u304c\u3067\u304d\u308b\u3068\u304a\u3082\u3044\u307e\u3059\u3002\n\n\u660e\u65e5\u306fshoo\u3055\u3093\u3067\u3059\u3002\n\u306a\u306b\u3084\u3089D\u8a00\u8a9e\u3067\u7d44\u307f\u8fbc\u307f\u306e\u3053\u3068\u3089\u3057\u3044\u306e\u3067\u3001\u50d5\u306f\u3059\u3054\u304f\u697d\u3057\u307f\u3067\u3059\u3002\n\u305d\u308c\u3067\u306f\u3002\n", "tags": ["dlang"]}