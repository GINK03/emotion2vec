{"context": " More than 1 year has passed since last update.\n\n\u3084\u308a\u305f\u3044\u3053\u3068\ndocomo\u306eAPI\u3092\u4f7f\u3063\u3066\u753b\u50cf\u304b\u3089\u6587\u5b57\u3092\u62bd\u51fa\u3057\u305f\u3044\u3002\n\u8ffd\u8a18(2016/02/16)\nGitHub\u306b\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u30a2\u30c3\u30d7\u3057\u307e\u3057\u305f\u3002\u2192 source\n\n\u4e8b\u524d\u6e96\u5099\n\ndocomo Developer support\u306b\u767b\u9332\u3057\u3066API key\u3092\u53d6\u5f97\u3059\u308b\u3002\n\n\ndocomo Developer support\n\n\n\u8a8d\u8b58\u3057\u305f\u3044\u753b\u50cf\u30d5\u30a1\u30a4\u30eb\u3092\u7528\u610f (JPEG\u5f62\u5f0f)\n\u8a73\u3057\u304f\u306f\u30ea\u30d5\u30a1\u30ec\u30f3\u30b9\u3092\u53c2\u7167\n\n\n\u30ea\u30d5\u30a1\u30ec\u30f3\u30b9\n\n\n\n\n\u8a8d\u8b58\u3059\u308b\u753b\u50cf\u30d5\u30a1\u30a4\u30eb (test.jpg)\n\n\n\u958b\u767a\u74b0\u5883\n\npython 2.7\u7cfb\n\n\n\u30d7\u30ed\u30b0\u30e9\u30e0\n\ncharacterRecognition.py\n#coding: utf-8\nfrom poster.encode import multipart_encode\nfrom poster.streaminghttp import register_openers\nimport urllib2\nimport json\nimport time \nimport urllib\nimport re\nimport sys\n\n#\u753b\u50cf\u30c7\u30fc\u30bf\u3092\u6295\u3052\u3066\u3001\u753b\u50cf\u306eID\u3092json\u5f62\u5f0f\u3067\u53d6\u5f97 (\u60c5\u666f\u753b\u50cf\u8a8d\u8b58\u8981\u6c42)\ndef getImageID(fname):\n    register_openers()\n    url = 'https://api.apigw.smt.docomo.ne.jp/characterRecognition/v1/document?APIKEY=(API key\u3092\u5165\u529b\u3057\u3066\u4e0b\u3055\u3044)'\n\n    f = open(fname, 'r')\n\n    datagen, headers = multipart_encode({\"image\": f, 'lang': 'jpn'})\n    request = urllib2.Request(url,datagen, headers)\n    response = urllib2.urlopen(request)\n\n    res_dat = response.read()\n    return json.loads(res_dat)['job']['@id'] #\u753b\u50cf\u306eID\u3092\u8fd4\u3059\n\n#\u53d6\u5f97\u3057\u305fjson\u304b\u3089\u5358\u8a9e\u3060\u3051\u3092\u53d6\u308a\u51fa\u3059\u3002\ndef makeWordList(result):\n\n    word_list = []\n    count  = int(result['lines']['@count'])\n\n    for i in range(count):\n        word = result['lines']['line'][i]['@text']\n        word_list.append(word)\n\n    return word_list\n\n#\u60c5\u666f\u753b\u50cf\u8a8d\u8b58\u7d50\u679c\u53d6\u5f97\ndef getWordList(img_id):\n\n    register_openers()\n    url = 'https://api.apigw.smt.docomo.ne.jp/characterRecognition/v1/document/' + img_id + '?APIKEY=(API key\u3092\u5165\u529b\u3057\u3066\u4e0b\u3055\u3044)'\n\n    request = urllib2.Request(url)\n\n    recog_result = {}\n    for i in range(5):\n        response = urllib2.urlopen(request)\n        res_dat = response.read()\n\n        recog_result = json.loads(res_dat)\n\n        status = recog_result['job']['@status']\n\n        if status == 'queue':\n            print '\u53d7\u4ed8\u4e2d...'\n        elif status == 'process':\n            print '\u8a8d\u8b58\u51e6\u7406\u4e2d...'\n        elif status == 'success':\n            print '\u8a8d\u8b58\u6210\u529f' #, recog_result\n            word_list = makeWordList(recog_result)\n            return word_list\n        elif status == 'failure':\n            print '\u8a8d\u8b58\u5931\u6557'\n            return None\n\n        time.sleep(3) #\u3061\u3087\u3063\u3068\u5f85\u3064\n\n\n\nif __name__ == '__main__':\n\n    #\u753b\u50cfID\u3092\u53d6\u5f97\n    img_id = getImageID(sys.argv[1])\n\n    #\u5358\u8a9e\u30ea\u30b9\u30c8\u3092\u53d6\u5f97\n    word_list = getWordList(img_id)\n\n    #\u8a8d\u8b58\u3057\u305f\u6587\u5b57\u5217\u3092\u8868\u793a\n    for word in word_list:\n        print word\n\n\n\n\n\u5b9f\u884c\u7d50\u679c\n>python characterRecognition.py test.jpg\n\u8a8d\u8b58\u51e6\u7406\u4e2d...\n\u8a8d\u8b58\u6210\u529f\n\u6587\u5b57\u8a8d\u8b58\u306e\u30c6\u30b9\u30c8\n\n\n\u88dc\u8db3(\u53d6\u5f97\u3057\u305fjson\u306e\u4f8b)\n{\n  \"job\": {\n    \"@status\": \"success\",\n    \"@id\": \"(\u753b\u50cfID)\", #\u753b\u50cf\u306eID\n    \"@queue-time\": \"2016/02/13 17:03:07\"\n  },\n  \"lines\": {\n    \"line\": [\n      {\n        \"@text\": \"\\u6587\\u5b57\\u8a8d\\u8b58\\u306e\\u30c6\\u30b9\\u30c8\", #\u8a8d\u8b58\u3057\u305f\u6587\u5b57\u5217\n        \"shape\": {\n          \"@count\": \"4\",\n          \"point\": [       #\u6587\u5b57\u306e\u753b\u50cf\u4e0a\u306e\u5ea7\u6a19 (\u5de6\u4e0a\u3001\u5de6\u4e0b\u3001\u53f3\u4e0b\u3001\u53f3\u4e0a)\n            {\n              \"@x\": \"35\",\n              \"@y\": \"33\"\n            },\n            {\n              \"@x\": \"35\",\n              \"@y\": \"67\"\n            },\n            {\n              \"@x\": \"293\",\n              \"@y\": \"67\"\n            },\n            {\n              \"@x\": \"293\",\n              \"@y\": \"33\"\n            }\n          ]\n        }\n      }\n    ],\n    \"@count\": \"1\"\n  },\n  \"message\": null\n}\n\n\n\u3042\u3068\u304c\u304d\n\u3068\u308a\u3042\u3048\u305a\u30e1\u30e2\u7528\u306b\u66f8\u3044\u3066\u307f\u307e\u3057\u305f\u3002\n\u8a73\u3057\u304f\u77e5\u308a\u305f\u3044\u65b9\u306f\u30b3\u30e1\u30f3\u30c8\u3092\u304a\u5f85\u3061\u3057\u3066\u3044\u307e\u3059\u3002\n#\u3084\u308a\u305f\u3044\u3053\u3068\ndocomo\u306eAPI\u3092\u4f7f\u3063\u3066\u753b\u50cf\u304b\u3089\u6587\u5b57\u3092\u62bd\u51fa\u3057\u305f\u3044\u3002\n\n**\u8ffd\u8a18(2016/02/16)**\nGitHub\u306b\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u30a2\u30c3\u30d7\u3057\u307e\u3057\u305f\u3002\u2192 [source](https://github.com/ichiroex/characterRecognition)\n\n#\u4e8b\u524d\u6e96\u5099\n- docomo Developer support\u306b\u767b\u9332\u3057\u3066API key\u3092\u53d6\u5f97\u3059\u308b\u3002\n - [docomo Developer support](https://dev.smt.docomo.ne.jp/?p=index)\n- \u8a8d\u8b58\u3057\u305f\u3044\u753b\u50cf\u30d5\u30a1\u30a4\u30eb\u3092\u7528\u610f (JPEG\u5f62\u5f0f)\n- \u8a73\u3057\u304f\u306f\u30ea\u30d5\u30a1\u30ec\u30f3\u30b9\u3092\u53c2\u7167\n - [\u30ea\u30d5\u30a1\u30ec\u30f3\u30b9](https://dev.smt.docomo.ne.jp/?p=docs.api.page&api_name=character_recognition&p_name=api_reference#tag01)\n\n#\u8a8d\u8b58\u3059\u308b\u753b\u50cf\u30d5\u30a1\u30a4\u30eb (test.jpg)\n![test.jpg](https://qiita-image-store.s3.amazonaws.com/0/92685/997d0a1f-0c8a-f58f-56a7-36aa7fb2347d.jpeg)\n\n#\u958b\u767a\u74b0\u5883\n- python 2.7\u7cfb\n\n#\u30d7\u30ed\u30b0\u30e9\u30e0\n```lang:characterRecognition.py\n#coding: utf-8\nfrom poster.encode import multipart_encode\nfrom poster.streaminghttp import register_openers\nimport urllib2\nimport json\nimport time \nimport urllib\nimport re\nimport sys\n\n#\u753b\u50cf\u30c7\u30fc\u30bf\u3092\u6295\u3052\u3066\u3001\u753b\u50cf\u306eID\u3092json\u5f62\u5f0f\u3067\u53d6\u5f97 (\u60c5\u666f\u753b\u50cf\u8a8d\u8b58\u8981\u6c42)\ndef getImageID(fname):\n    register_openers()\n    url = 'https://api.apigw.smt.docomo.ne.jp/characterRecognition/v1/document?APIKEY=(API key\u3092\u5165\u529b\u3057\u3066\u4e0b\u3055\u3044)'\n    \n    f = open(fname, 'r')\n\n    datagen, headers = multipart_encode({\"image\": f, 'lang': 'jpn'})\n    request = urllib2.Request(url,datagen, headers)\n    response = urllib2.urlopen(request)\n    \n    res_dat = response.read()\n    return json.loads(res_dat)['job']['@id'] #\u753b\u50cf\u306eID\u3092\u8fd4\u3059\n\n#\u53d6\u5f97\u3057\u305fjson\u304b\u3089\u5358\u8a9e\u3060\u3051\u3092\u53d6\u308a\u51fa\u3059\u3002\ndef makeWordList(result):\n    \n    word_list = []\n    count  = int(result['lines']['@count'])\n\n    for i in range(count):\n        word = result['lines']['line'][i]['@text']\n        word_list.append(word)\n\n    return word_list\n\n#\u60c5\u666f\u753b\u50cf\u8a8d\u8b58\u7d50\u679c\u53d6\u5f97\ndef getWordList(img_id):\n\n    register_openers()\n    url = 'https://api.apigw.smt.docomo.ne.jp/characterRecognition/v1/document/' + img_id + '?APIKEY=(API key\u3092\u5165\u529b\u3057\u3066\u4e0b\u3055\u3044)'\n    \n    request = urllib2.Request(url)\n    \n    recog_result = {}\n    for i in range(5):\n        response = urllib2.urlopen(request)\n        res_dat = response.read()\n        \n        recog_result = json.loads(res_dat)\n        \n        status = recog_result['job']['@status']\n        \n        if status == 'queue':\n            print '\u53d7\u4ed8\u4e2d...'\n        elif status == 'process':\n            print '\u8a8d\u8b58\u51e6\u7406\u4e2d...'\n        elif status == 'success':\n            print '\u8a8d\u8b58\u6210\u529f' #, recog_result\n            word_list = makeWordList(recog_result)\n            return word_list\n        elif status == 'failure':\n            print '\u8a8d\u8b58\u5931\u6557'\n            return None\n\n        time.sleep(3) #\u3061\u3087\u3063\u3068\u5f85\u3064\n\n\n\nif __name__ == '__main__':\n    \n    #\u753b\u50cfID\u3092\u53d6\u5f97\n    img_id = getImageID(sys.argv[1])\n    \n    #\u5358\u8a9e\u30ea\u30b9\u30c8\u3092\u53d6\u5f97\n    word_list = getWordList(img_id)\n    \n    #\u8a8d\u8b58\u3057\u305f\u6587\u5b57\u5217\u3092\u8868\u793a\n    for word in word_list:\n        print word\n\n```\n#\u5b9f\u884c\u7d50\u679c\n```\n>python characterRecognition.py test.jpg\n\u8a8d\u8b58\u51e6\u7406\u4e2d...\n\u8a8d\u8b58\u6210\u529f\n\u6587\u5b57\u8a8d\u8b58\u306e\u30c6\u30b9\u30c8\n```\n\n#\u88dc\u8db3(\u53d6\u5f97\u3057\u305fjson\u306e\u4f8b)\n```\n{\n  \"job\": {\n    \"@status\": \"success\",\n    \"@id\": \"(\u753b\u50cfID)\", #\u753b\u50cf\u306eID\n    \"@queue-time\": \"2016/02/13 17:03:07\"\n  },\n  \"lines\": {\n    \"line\": [\n      {\n        \"@text\": \"\\u6587\\u5b57\\u8a8d\\u8b58\\u306e\\u30c6\\u30b9\\u30c8\", #\u8a8d\u8b58\u3057\u305f\u6587\u5b57\u5217\n        \"shape\": {\n          \"@count\": \"4\",\n          \"point\": [       #\u6587\u5b57\u306e\u753b\u50cf\u4e0a\u306e\u5ea7\u6a19 (\u5de6\u4e0a\u3001\u5de6\u4e0b\u3001\u53f3\u4e0b\u3001\u53f3\u4e0a)\n            {\n              \"@x\": \"35\",\n              \"@y\": \"33\"\n            },\n            {\n              \"@x\": \"35\",\n              \"@y\": \"67\"\n            },\n            {\n              \"@x\": \"293\",\n              \"@y\": \"67\"\n            },\n            {\n              \"@x\": \"293\",\n              \"@y\": \"33\"\n            }\n          ]\n        }\n      }\n    ],\n    \"@count\": \"1\"\n  },\n  \"message\": null\n}\n```\n\n#\u3042\u3068\u304c\u304d\n\u3068\u308a\u3042\u3048\u305a\u30e1\u30e2\u7528\u306b\u66f8\u3044\u3066\u307f\u307e\u3057\u305f\u3002\n\u8a73\u3057\u304f\u77e5\u308a\u305f\u3044\u65b9\u306f\u30b3\u30e1\u30f3\u30c8\u3092\u304a\u5f85\u3061\u3057\u3066\u3044\u307e\u3059\u3002\n", "tags": ["\u6587\u5b57\u8a8d\u8b58", "Python", "rest", "\u753b\u50cf\u51e6\u7406", "\u753b\u50cf\u8a8d\u8b58"]}