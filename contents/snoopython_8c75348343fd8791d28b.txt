{"context": " More than 1 year has passed since last update.\n\n\u306f\u3058\u3081\u306b\n\u30bb\u30eb\u30fb\u30aa\u30fc\u30c8\u30de\u30c8\u30f3\u3068\u3057\u3066\u6709\u540d\u306a\u30e9\u30a4\u30d5\u30b2\u30fc\u30e0\u304c\u9762\u767d\u305d\u3046\u3060\u3063\u305f\u306e\u3067\u3001Python\u3068numpy\u3067\u30e9\u30a4\u30d5\u30b2\u30fc\u30e0\u306e\u30de\u30c3\u30d7\u914d\u5217\u3092\u751f\u6210\u3059\u308b\u30b3\u30fc\u30c9\u3092\u66f8\u3044\u3066\u307f\u307e\u3057\u305f\u30020(dead)\u30681(live)\u3067\u66f8\u304b\u308c\u305f\u521d\u671f\u4e16\u4ee3\u306e\u30de\u30c3\u30d7\u914d\u5217\u3092\u4e0e\u3048\u308b\u3053\u3068\u3067\u3001iterative\u306b\u6b21\u4e16\u4ee3\u306e\u30de\u30c3\u30d7\u914d\u5217\u3092\u751f\u6210\u3059\u308bgenerator\u3068\u3057\u3066\u5b9f\u88c5\u3057\u3066\u3044\u307e\u3059\u3002\u30de\u30c3\u30d7\u306f\u5468\u671f\u7684\u5883\u754c\u6761\u4ef6(\u7aef\u3068\u7aef\u304c\u3064\u306a\u304c\u3063\u305f\u72b6\u614b)\u306b\u3082\u5bfe\u5fdc\u3055\u305b\u3066\u307f\u307e\u3057\u305f\uff01\n\nlifegame.py\n\u4ee5\u4e0b\u306elifegame.py\u3092\u30e2\u30b8\u30e5\u30fc\u30eb\u3068\u3057\u3066import\u3057\u3066\u4f7f\u7528\u3057\u307e\u3059\u3002\u5b9f\u969b\u306e\u4f7f\u7528\u4f8b\u306f\u4e0b\u8a18\u306e\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u3092\u3054\u89a7\u304f\u3060\u3055\u3044\u3002\u9032\u5316\u306e\u30eb\u30fc\u30eb\u306fWikipedia\u3067\u7d39\u4ecb\u3055\u308c\u3066\u3044\u308b23/3\u306b\u6e96\u62e0\u3057\u3066\u307e\u3059\u304c\u3001\u30b3\u30fc\u30c9\u306e\u4e2d\u3092\u3044\u3058\u3063\u3066\u5bb9\u6613\u306b\u5909\u3048\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\nusage\n>>> lg_map = lifegame.MapGenerator(map_init, periodic=False)\n>>> lg_map.evolve()\narray([...]) # \u7b2c0\u4e16\u4ee3\u306e\u30de\u30c3\u30d7\u914d\u5217 (= map_init)\n>>> lg_map.evolve()\narray([...]) # \u7b2c1\u4e16\u4ee3\u306e\u30de\u30c3\u30d7\u914d\u5217\n>>> ...\n\n\n\nmap_init : \u521d\u671f\u4e16\u4ee3\u306e\u30de\u30c3\u30d7\u914d\u5217 (list or numpy.ndarray)\n\nperiodic : \u30de\u30c3\u30d7\u306b\u5468\u671f\u7684\u5883\u754c\u6761\u4ef6\u3092\u4f7f\u7528\u3059\u308b\u304b\u3069\u3046\u304b (bool)\n\n\nlifegame.py\n\nlifegame.py\nimport numpy as np\nfrom itertools import product\n\nclass MapGenerator(object):\n    def __init__(self, map_init, periodic=False):\n        self.map_init  = np.array(map_init, np.int64)\n        self.periodic  = periodic\n        self.generator = self.map_evolver()\n\n    def map_evolver(self):\n        map_now   = self.map_init\n        map_shape = self.map_init.shape\n\n        while True:\n            map_next = np.zeros_like(map_now, np.int64)\n            for (i,j) in product(range(map_shape[0]), range(map_shape[1])):\n                islive = bool(map_now[i,j])\n                nlive  = self.num_live_neighbours(map_now, i, j)\n                # write the rules of lifegame here!\n                # ........................................\n                if nlive == 2:\n                    if islive: map_next[i,j] = 1\n                elif nlive == 3:\n                    map_next[i,j] = 1\n                # ........................................\n\n            yield map_now\n            map_now = map_next\n\n    def num_live_neighbours(self, map_now, i, j):\n        if self.periodic:\n            neighbours = np.roll(np.roll(map_now, -i+1, 0), -j+1, 1)[:3,:3]\n        else:\n            sl_i = slice(0,i+2) if i == 0 else slice(i-1,i+2)\n            sl_j = slice(0,j+2) if j == 0 else slice(j-1,j+2)\n            neighbours = map_now[sl_i,sl_j]\n\n        return neighbours.sum() - map_now[i,j]\n\n    def evolve(self):\n        return self.generator.next()\n\n\n\nmatplotlib\u3092\u4f7f\u3063\u305f\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\n\u4ee5\u4e0b\u3067\u306f\u30d1\u30eb\u30b5\u30fc\u3068\u547c\u3070\u308c\u308b\u632f\u52d5\u5b50\u306e\u4e00\u7a2e\u304c\u300115x15\u306e\u30de\u30c3\u30d7\u4e0a\u3067\u30a8\u30f3\u30c9\u30ec\u30b9\u306b\u9032\u5316\u3059\u308b\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u3067\u3059\u3002\n\u3042\u304f\u307e\u3067\u30b5\u30f3\u30d7\u30eb\u306a\u306e\u3067\u3001\u914d\u5217\u306e\u8a08\u7b97\u901f\u5ea6\u3088\u308a\u3082matplotlib\u306e\u63cf\u753b\u52b9\u7387\u3067\u30ea\u30df\u30c3\u30c8\u3055\u308c\u3066\u3044\u308b\u3068\u601d\u308f\u308c\u307e\u3059\u2026\n\n\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\n\npulsar.py\nimport time\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport lifegame\n\npulsar = np.array([\n[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n[0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0],\n[0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0],\n[0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0],\n[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]])\n\nlg_map = lifegame.MapGenerator(map_init=pulsar, periodic=False)\nplt.ion()\nwhile True:\n    plt.pcolormesh(lg_map.evolve())\n    plt.xlim([0, pulsar.shape[1]])\n    plt.ylim([0, pulsar.shape[0]])\n    plt.draw()\n    plt.clf()\n    time.sleep(0.05)\n\n\n\n\u63cf\u753b\u306e\u69d8\u5b50\n\n\n\u4eca\u5f8c\u306e\u4e88\u5b9a\uff1f\n\u73fe\u6642\u70b9\u3067\u306f\u521d\u671f\u4e16\u4ee3\u306e\u30de\u30c3\u30d7\u914d\u5217\u3092\u30c6\u30ad\u30b9\u30c8\u3067\u4e88\u3081\u7528\u610f\u3059\u308b\u5fc5\u8981\u304c\u3042\u308b\u306e\u3067\u3001matplotlib.widgets\u3092\u4f7f\u3063\u3066\u753b\u9762\u4e0a\u304b\u3089\u30de\u30c3\u30d7\u914d\u5217\u3092\u30dd\u30c1\u30dd\u30c1\u3068\u5165\u529b\u3067\u304d\u308b\u3088\u3046\u306b\u3082\u3057\u305f\u3044\u306a\u3068\u601d\u3044\u307e\u3059\u3002\u904a\u3073\u306a\u306e\u3067\u3044\u3064\u4f5c\u308b\u304b\u306f\u672a\u5b9a\u3067\u3059\u304c(\u7b11)\n\u306f\u3058\u3081\u306b\n------------------------------\n\u30bb\u30eb\u30fb\u30aa\u30fc\u30c8\u30de\u30c8\u30f3\u3068\u3057\u3066\u6709\u540d\u306a[\u30e9\u30a4\u30d5\u30b2\u30fc\u30e0][link01]\u304c\u9762\u767d\u305d\u3046\u3060\u3063\u305f\u306e\u3067\u3001Python\u3068numpy\u3067\u30e9\u30a4\u30d5\u30b2\u30fc\u30e0\u306e\u30de\u30c3\u30d7\u914d\u5217\u3092\u751f\u6210\u3059\u308b\u30b3\u30fc\u30c9\u3092\u66f8\u3044\u3066\u307f\u307e\u3057\u305f\u3002`0`(dead)\u3068`1`(live)\u3067\u66f8\u304b\u308c\u305f\u521d\u671f\u4e16\u4ee3\u306e\u30de\u30c3\u30d7\u914d\u5217\u3092\u4e0e\u3048\u308b\u3053\u3068\u3067\u3001iterative\u306b\u6b21\u4e16\u4ee3\u306e\u30de\u30c3\u30d7\u914d\u5217\u3092\u751f\u6210\u3059\u308bgenerator\u3068\u3057\u3066\u5b9f\u88c5\u3057\u3066\u3044\u307e\u3059\u3002\u30de\u30c3\u30d7\u306f\u5468\u671f\u7684\u5883\u754c\u6761\u4ef6(\u7aef\u3068\u7aef\u304c\u3064\u306a\u304c\u3063\u305f\u72b6\u614b)\u306b\u3082\u5bfe\u5fdc\u3055\u305b\u3066\u307f\u307e\u3057\u305f\uff01\n\nlifegame.py\n------------------------------\n\u4ee5\u4e0b\u306e`lifegame.py`\u3092\u30e2\u30b8\u30e5\u30fc\u30eb\u3068\u3057\u3066import\u3057\u3066\u4f7f\u7528\u3057\u307e\u3059\u3002\u5b9f\u969b\u306e\u4f7f\u7528\u4f8b\u306f\u4e0b\u8a18\u306e\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u3092\u3054\u89a7\u304f\u3060\u3055\u3044\u3002\u9032\u5316\u306e\u30eb\u30fc\u30eb\u306fWikipedia\u3067\u7d39\u4ecb\u3055\u308c\u3066\u3044\u308b`23/3`\u306b\u6e96\u62e0\u3057\u3066\u307e\u3059\u304c\u3001\u30b3\u30fc\u30c9\u306e\u4e2d\u3092\u3044\u3058\u3063\u3066\u5bb9\u6613\u306b\u5909\u3048\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\n### usage\n```py\n>>> lg_map = lifegame.MapGenerator(map_init, periodic=False)\n>>> lg_map.evolve()\narray([...]) # \u7b2c0\u4e16\u4ee3\u306e\u30de\u30c3\u30d7\u914d\u5217 (= map_init)\n>>> lg_map.evolve()\narray([...]) # \u7b2c1\u4e16\u4ee3\u306e\u30de\u30c3\u30d7\u914d\u5217\n>>> ...\n```\n+ `map_init` : \u521d\u671f\u4e16\u4ee3\u306e\u30de\u30c3\u30d7\u914d\u5217 (list or numpy.ndarray)\n+ `periodic` : \u30de\u30c3\u30d7\u306b\u5468\u671f\u7684\u5883\u754c\u6761\u4ef6\u3092\u4f7f\u7528\u3059\u308b\u304b\u3069\u3046\u304b (bool)\n\n\n\n### lifegame.py\n```py:lifegame.py\nimport numpy as np\nfrom itertools import product\n\nclass MapGenerator(object):\n    def __init__(self, map_init, periodic=False):\n        self.map_init  = np.array(map_init, np.int64)\n        self.periodic  = periodic\n        self.generator = self.map_evolver()\n\n    def map_evolver(self):\n        map_now   = self.map_init\n        map_shape = self.map_init.shape\n\n        while True:\n            map_next = np.zeros_like(map_now, np.int64)\n            for (i,j) in product(range(map_shape[0]), range(map_shape[1])):\n                islive = bool(map_now[i,j])\n                nlive  = self.num_live_neighbours(map_now, i, j)\n                # write the rules of lifegame here!\n                # ........................................\n                if nlive == 2:\n                    if islive: map_next[i,j] = 1\n                elif nlive == 3:\n                    map_next[i,j] = 1\n                # ........................................\n\n            yield map_now\n            map_now = map_next\n\n    def num_live_neighbours(self, map_now, i, j):\n        if self.periodic:\n            neighbours = np.roll(np.roll(map_now, -i+1, 0), -j+1, 1)[:3,:3]\n        else:\n            sl_i = slice(0,i+2) if i == 0 else slice(i-1,i+2)\n            sl_j = slice(0,j+2) if j == 0 else slice(j-1,j+2)\n            neighbours = map_now[sl_i,sl_j]\n\n        return neighbours.sum() - map_now[i,j]\n\n    def evolve(self):\n        return self.generator.next()\n```\n\nmatplotlib\u3092\u4f7f\u3063\u305f\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\n------------------------------\n\u4ee5\u4e0b\u3067\u306f[\u30d1\u30eb\u30b5\u30fc][link02]\u3068\u547c\u3070\u308c\u308b\u632f\u52d5\u5b50\u306e\u4e00\u7a2e\u304c\u300115x15\u306e\u30de\u30c3\u30d7\u4e0a\u3067\u30a8\u30f3\u30c9\u30ec\u30b9\u306b\u9032\u5316\u3059\u308b\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u3067\u3059\u3002\n\u3042\u304f\u307e\u3067\u30b5\u30f3\u30d7\u30eb\u306a\u306e\u3067\u3001\u914d\u5217\u306e\u8a08\u7b97\u901f\u5ea6\u3088\u308a\u3082matplotlib\u306e\u63cf\u753b\u52b9\u7387\u3067\u30ea\u30df\u30c3\u30c8\u3055\u308c\u3066\u3044\u308b\u3068\u601d\u308f\u308c\u307e\u3059\u2026\n\n### \u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\n```py:pulsar.py\nimport time\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport lifegame\n\npulsar = np.array([\n[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n[0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0],\n[0, 0, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0],\n[0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0],\n[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],\n[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]])\n\nlg_map = lifegame.MapGenerator(map_init=pulsar, periodic=False)\nplt.ion()\nwhile True:\n    plt.pcolormesh(lg_map.evolve())\n    plt.xlim([0, pulsar.shape[1]])\n    plt.ylim([0, pulsar.shape[0]])\n    plt.draw()\n    plt.clf()\n    time.sleep(0.05)\n```\n\n### \u63cf\u753b\u306e\u69d8\u5b50\n![lifegame-pulsar.png][link03]\n\n\u4eca\u5f8c\u306e\u4e88\u5b9a\uff1f\n------------------------------\n\u73fe\u6642\u70b9\u3067\u306f\u521d\u671f\u4e16\u4ee3\u306e\u30de\u30c3\u30d7\u914d\u5217\u3092\u30c6\u30ad\u30b9\u30c8\u3067\u4e88\u3081\u7528\u610f\u3059\u308b\u5fc5\u8981\u304c\u3042\u308b\u306e\u3067\u3001`matplotlib.widgets`\u3092\u4f7f\u3063\u3066\u753b\u9762\u4e0a\u304b\u3089\u30de\u30c3\u30d7\u914d\u5217\u3092\u30dd\u30c1\u30dd\u30c1\u3068\u5165\u529b\u3067\u304d\u308b\u3088\u3046\u306b\u3082\u3057\u305f\u3044\u306a\u3068\u601d\u3044\u307e\u3059\u3002\u904a\u3073\u306a\u306e\u3067\u3044\u3064\u4f5c\u308b\u304b\u306f\u672a\u5b9a\u3067\u3059\u304c(\u7b11)\n\n[link01]: http://ja.wikipedia.org/wiki/\u30e9\u30a4\u30d5\u30b2\u30fc\u30e0\n[link02]: http://ja.wikipedia.org/wiki/\u30d1\u30eb\u30b5\u30fc_(\u30e9\u30a4\u30d5\u30b2\u30fc\u30e0)\n[link03]: https://qiita-image-store.s3.amazonaws.com/0/44000/18e4ac52-9120-dae6-b683-8ca29cd1d507.png\n", "tags": ["Python", "numpy", "matplotlib"]}