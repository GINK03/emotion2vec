{"tags": ["flux"], "context": " More than 1 year has passed since last update.\n\nFlux architecture using Reflux library\n\nReact is only the view layer, Flux architecture is used to manage data and actions.\n \"top-to-down\" approach: data only changes at the top level\n\n\n1. React \"FluxContainer\" component\n\nComponent connected to flux stores and actions.\nListens to the store and the actions and update pass down data store and action using props.\nThis is the only component that has a state.\n\n\njavascript\nvar CybozuBackupFluxContainer = React.createClass({\n  componentDidMount: function() {\n    //Listen to any change from the store (@trigger() in the store)\n    actions.getData();\n    this.listenTo(store, this.onChangeStore);\n\n  },\n  onChangeStore: function(storeData) {\n    //Store has changed => update the view.\n    this.setState(storeData);\n  },\n  render: function() {\n    return (\n      <CybozuBackup\n        storeData={ this.state }\n        onToggleBackup={ actions.toggleBackup }\n        onChangeGenerationNumber={ actions.changeGenerationNumber }\n        onChangeRestoreDate={ actions.changeRestoreDate }\n        onSubmitRestore={ actions.submitRestore }\n        onStartTour={ actions.startTour }\n      />\n    );\n  }\n\n});\n\n\n\n2. React state-less components\nReact components without state, only render props that come from the parent component.\n(they receive everything using props)\nvar CybozuBackup = React.createClass({\n\n  render: function() {\n    return (\n      <div id=\"content\">\n\n        <Logo />\n\n        <h1>\u30d0\u30c3\u30af\u30a2\u30c3\u30d7 / \u30ea\u30b9\u30c8\u30a2</h1>\n\n        { this.props.storeData && (\n          <div>\n\n            <BackupSettings {...this.props} />\n\n            <Restore {...this.props} />\n\n          </div>\n        ) }\n      </div>\n    );\n  }\n\n});\n\n\n3. Flux actions\nFirst step: define the actions.\n2 kind of action: synchronous and asynchronous (ajax)\nactions = Reflux.createActions\n  \"getData\":\n    asyncResult: true\n\n  \"toggleBackup\": {}\n  \"changeGenerationNumber\": {}\n  \"showModalBackup\": {}\n  \"submitBackup\": {}\n\n  \"changeRestoreDate\": {}\n  \"showModalRestore\": {}\n  \"submitRestore\": {}\n\n  \"startTour\": {}\n\nLaunch an action:\nactions.toggleBackup(data)\n\nListen to action:\nactions.getData.listen () ->\n  api.actions.request('cybozuBackupGetData', null, this)\n\n\n4. Flux stores\nStore can listen to action and trigger callbacks.\nFor example .onToggleBackup() method is automatically called when toggleBackup action is called.\nstore = Reflux.createStore\n  listenables: [actions]\n\n  onToggleBackup: (enabled) ->\n    console.log 'toggleBackup action listener', enabled\n    @enabled = enabled\n\n    #Reset backup size to its initial value\n    if !enabled\n      @generationNumber = @initialSettings.generationNumber\n\n    @hasChanged = true\n    @trigger @getState()\n\n## Flux architecture using [Reflux](https://github.com/spoike/refluxjs) library\n\n* React is only the view layer, Flux architecture is used to manage data and actions.\n*  \"top-to-down\" approach: data only changes at the top level\n\n\n### 1. React \"FluxContainer\" component\n\n* Component connected to flux stores and actions.\n* Listens to the store and the actions and update pass down data store and action using props.\n* This is the only component that has a state.\n\n``` lang:javascript\nvar CybozuBackupFluxContainer = React.createClass({\n  componentDidMount: function() {\n    //Listen to any change from the store (@trigger() in the store)\n    actions.getData();\n    this.listenTo(store, this.onChangeStore);\n\n  },\n  onChangeStore: function(storeData) {\n    //Store has changed => update the view.\n    this.setState(storeData);\n  },\n  render: function() {\n    return (\n      <CybozuBackup\n        storeData={ this.state }\n        onToggleBackup={ actions.toggleBackup }\n        onChangeGenerationNumber={ actions.changeGenerationNumber }\n        onChangeRestoreDate={ actions.changeRestoreDate }\n        onSubmitRestore={ actions.submitRestore }\n        onStartTour={ actions.startTour }\n      />\n    );\n  }\n\n});\n```\n\n### 2. React state-less components\n\nReact components without state, only render `props` that come from the parent component.\n(they receive everything using props)\n\n```\nvar CybozuBackup = React.createClass({\n\n  render: function() {\n    return (\n      <div id=\"content\">\n\n        <Logo />\n\n        <h1>\u30d0\u30c3\u30af\u30a2\u30c3\u30d7 / \u30ea\u30b9\u30c8\u30a2</h1>\n\n        { this.props.storeData && (\n          <div>\n\n            <BackupSettings {...this.props} />\n\n            <Restore {...this.props} />\n\n          </div>\n        ) }\n      </div>\n    );\n  }\n\n});\n```\n\n### 3. Flux actions\n\nFirst step: define the actions.\n2 kind of action: synchronous and asynchronous (ajax)\n\n```\nactions = Reflux.createActions\n  \"getData\":\n    asyncResult: true\n\n  \"toggleBackup\": {}\n  \"changeGenerationNumber\": {}\n  \"showModalBackup\": {}\n  \"submitBackup\": {}\n\n  \"changeRestoreDate\": {}\n  \"showModalRestore\": {}\n  \"submitRestore\": {}\n\n  \"startTour\": {}\n```\n\nLaunch an action:\n\n```\nactions.toggleBackup(data)\n```\n\nListen to action:\n\n```\nactions.getData.listen () ->\n  api.actions.request('cybozuBackupGetData', null, this)\n```\n\n### 4. Flux stores\n\nStore can listen to action and trigger callbacks.\nFor example `.onToggleBackup()` method is automatically called when `toggleBackup` action is called.\n\n```\nstore = Reflux.createStore\n  listenables: [actions]\n\n  onToggleBackup: (enabled) ->\n    console.log 'toggleBackup action listener', enabled\n    @enabled = enabled\n\n    #Reset backup size to its initial value\n    if !enabled\n      @generationNumber = @initialSettings.generationNumber\n\n    @hasChanged = true\n    @trigger @getState()\n```\n"}