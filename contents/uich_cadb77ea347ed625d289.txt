{"context": "\n\n\u5916\u90e8\u5b9a\u7fa9\u3055\u308c\u305f\u5b9a\u6570\n\u30d7\u30ed\u30d1\u30c6\u30a3\u30d5\u30a1\u30a4\u30eb\u3084\u3089Redis\u3084\u3089MySQL\u3084\u3089\u306b\u5024\u3092\u7a81\u3063\u8fbc\u3093\u3067\u3001\n\n\u3055\u3066\u3001\u3069\u3053\u306b\u5b9a\u7fa9\u3057\u3066\u305f\u304b\uff1f\n\u6570\u5024\u5909\u63db\u30df\u30b9\u3063\u305f\u3089\u5c02\u7528\u306e\u4f8b\u5916\u6295\u3052\u306a\u304d\u3083\u3044\u3051\u306a\u3044\n\u65e5\u6642\u306e\u30d5\u30a9\u30fc\u30de\u30c3\u30c8\u5408\u308f\u305b\u308d\u3088\n\u540c\u3058\u3088\u3046\u306a\u5909\u63db\u30ed\u30b8\u30c3\u30af\u305f\u304f\u3055\u3093\u3067\u304d\u305f\uff01\n\u30d7\u30ed\u30d1\u30c6\u30a3\uff11\u3064\u8ffd\u52a0\u3059\u308b\u306e\u306b\u3082\u5104\u52ab\n\n\u307f\u305f\u3044\u306a\u7d4c\u9a13\u3001\u5730\u5473\u306b\u3042\u308a\u307e\u3059\u3002\n\u3053\u308c\u3092\u89e3\u6c7a\u3059\u308b\u65b9\u6cd5\u3092\u8003\u3048\u3066\u307f\u307e\u3057\u305f\u3002\n\uff03\u672c\u5f53\u306f\u30c7\u30fc\u30bf\u30b9\u30c8\u30a2\u3092\uff11\u3064\u306b\u7d5e\u308b\u3053\u3068\u304c\u30d9\u30b9\u30c8\u3002\n\u691c\u8a3c\u7528\u306e\u30b3\u30fc\u30c9\u306fSpringBoot\u4f7f\u3063\u3066\u307e\u3059\u304c\u3001Non-Boot\u9650\u5b9a\u306e\u8a71\u3067\u3059\u3002\nSpringBoot\u4f7f\u3063\u3066\u308b\u5834\u5408\u306fSpring Cloud Config\u4f7f\u3063\u305f\u65b9\u304c\u826f\u3044\u3067\u3059\u3002\n\n\u3046\u3093\u3056\u308a\u3059\u308b\u30b3\u30fc\u30c9\n\u4e0a\u8a18\u3067\u8aac\u660e\u3057\u305f\u3088\u3046\u306a\u30b3\u30fc\u30c9\u3092\u8f09\u305b\u3066\u307f\u307e\u3059\u3002\n\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30fc\u30b9\u306f\u3053\u3093\u306a\u611f\u3058\u3067\u3059\u3002\n\u5185\u5bb9\u306f\u9069\u5f53\u3067\u3059\u3002\nLocalDate\u306fjoda-time\u306e\u3084\u3064\u3067\u3059\u3002\n\nApplicationProperties.java\n/** \u4f1a\u54e1\u767b\u9332\u53ef\u80fd\u306a\u6700\u4f4e\u5e74\u9f62 */\nInteger getJoinableMinAge();\n/** \u6307\u5b9a\u3057\u305f\u30aa\u30d6\u30b8\u30a7\u30af\u306bURL\u304c\u5272\u308a\u5f53\u3066\u3089\u308c\u3066\u3044\u305f\u3089URL\u304c\u8fd4\u308b */\nString getUrl(Object object);\n/** \u30b5\u30fc\u30d3\u30b9\u958b\u59cb\u65e5 */\nLocalDate getServiceStartDate();\n\n\n\nRedis\n$ redis-cli hget \"ApplicationProperties\" \"service.joinable.min.age\"\n\"23\"\n\n\n\nservice.properties\njp.uich.entity.Item.url=/items/{id}\njp.uich.entity.User.url=/users/{name}\n\n\n\nMySQL\nmysql> select * from application_property;\n+--------------------+------------+\n| key                | value      |\n+--------------------+------------+\n| service.start.date | 2017-02-27 |\n+--------------------+------------+\n\n\n\u3053\u308c\u3092\u666e\u901a\u306b\u5b9f\u88c5\u3057\u305f\u3089\u3053\u3046\u306a\u308a\u307e\u3057\u305f\u3002\n\nDefaultApplicationProperties.java\n@Override\npublic Integer getJoinableMinAge() {\n  String value = this.hashOps().get(ApplicationProperties.class.getSimpleName(), \"service.joinable.min.age\");\n  if (value == null) {\n    throw new ApplicationPropertyException(\"service.joinable.min.age\", \"\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u307e\u305b\u3093\u3002\");\n  }\n  try {\n    return Integer.valueOf(value);\n  } catch (NumberFormatException e) {\n    throw new ApplicationPropertyException(\"service.joinable.min.age\", \"\u6570\u5024\u3067\u306f\u3042\u308a\u307e\u305b\u3093\u3002\", e);\n  }\n}\n\n@Override\npublic String getUrl(Object object) {\n  String urlFormat = (String) this.properties.get(object.getClass().getName() + \".url\");\n  if (StringUtils.isBlank(urlFormat)) {\n    throw new ApplicationPropertyException(object.getClass().getName() + \".url\", \"\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u307e\u305b\u3093\u3002\");\n  }\n  try {\n    Map<String, Object> placeholder = this.objectMapper.convertValue(object,\n      new TypeReference<Map<String, Object>>() {});\n    return StrSubstitutor.replace(urlFormat, placeholder, \"{\", \"}\");\n  } catch (Exception e) {\n    throw new ApplicationPropertyException(object.getClass().getName() + \".url\", \"URL\u6587\u5b57\u5217\u751f\u6210\u6642\u306b\u30a8\u30e9\u30fc\u304c\u767a\u751f\u3057\u307e\u3057\u305f\u3002\", e);\n  }\n}\n\n@Override\n@Transactional\npublic LocalDate getServiceStartDate() {\n  ApplicationProperty property = this.repository.getByKey(\"service.start.date\");\n  if (property == null || StringUtils.isBlank(property.getValue())) {\n    throw new ApplicationPropertyException(\"service.start.date\", \"\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u307e\u305b\u3093\u3002\");\n  }\n\n  try {\n    return LocalDate.parse(property.getValue(), DateTimeFormat.forPattern(\"yyyy-MM-dd\"));\n  } catch (IllegalArgumentException e) {\n    throw new ApplicationPropertyException(\"service.start.date\", \"\u65e5\u4ed8\u578b\u306e\u30d1\u30fc\u30b9\u306b\u5931\u6557\u3057\u307e\u3057\u305f\u3002\", e);\n  }\n}\n\n\n\u9577\u3044\u3057\u898b\u901a\u3057\u60aa\u3044\u3002\n\u30ad\u30fc\u304c\u3069\u3053\u306b\u3042\u308b\u304b\u308f\u304b\u3089\u306a\u3044\u3002\u3002\n\u3069\u306e\u30ad\u30fc\u304c\u3069\u3053\u306b\u683c\u7d0d\u3055\u308c\u3066\u308b\u306e\uff1f\n\u305d\u3057\u3066\u3001\u3053\u3093\u306a\u30ed\u30b8\u30c3\u30af\u306f\u30d7\u30ed\u30d1\u30c6\u30a3\u304c\u5897\u3048\u308b\u6bce\u306b\u5897\u3048\u3066\u3044\u304f\u306e\u3067\u3059\u3002\n\u30ad\u30fc\u3092\u5b9a\u6570\u306b\u3057\u3066\u30af\u30e9\u30b9\u4e0a\u90e8\u306b\u307e\u3068\u3081\u305f\u308a\u3001\u540c\u3058\u3088\u3046\u306a\u30ed\u30b8\u30c3\u30af\u3092\u3042\u308b\u7a0b\u5ea6\u306f\u30e1\u30bd\u30c3\u30c9\u306b\u5207\u308a\u51fa\u305b\u308b\u304b\u3068\u601d\u3044\u307e\u3059\u304c\u3001\n\n\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30fc\u30b9\u5074\u306b\u30e1\u30bd\u30c3\u30c9\u5b9a\u7fa9\u3057\u3066\n\u5177\u8c61\u30af\u30e9\u30b9\u3067\u30ad\u30fc\u3092\u5b9a\u7fa9\u3057\u3066\n\u30e1\u30bd\u30c3\u30c9\u5b9f\u88c5\u3057\u3066\n\n\u3063\u3066\u5730\u5473\u306b\u3081\u3093\u3069\u304f\u3055\u3044\u3093\u3067\u3059\u3001\u3053\u308c\u304c\u3002\n\n\u7406\u60f3\u306e\u5f62\n\u8981\u306f\u3001\n\n\u3069\u3053\u306b\u683c\u7d0d\u3055\u308c\u3066\u3044\u308b\u304b\u3059\u3050\u306b\u308f\u304b\u308b\n\u30ad\u30fc\u304c\u308f\u304b\u308a\u3084\u3059\u3044\n\u3054\u3061\u3083\u3054\u3061\u3083\u3057\u3066\u306a\u3044\n\n\u3092\u6e80\u305f\u3057\u305f\u3044\u306e\u3067\u3059\u3002\n\u3088\u3063\u3066\u3001\n\nApplicationProperties.java\n@StoredRedis(\"service.joinable.min.age\")\nInteger getJoinableMinAge();\n\n@StoredFile(\"#object.class.name + '.url'\")\nString getUrl(Object object);\n\n@StoredDB(\"service.start.date\")\nLocalDate getServiceStartDate();\n\n\n\u3053\u3093\u306a\u5f62\u304c\u7406\u60f3\u3067\u3059\u3002\n\u3053\u308c\u3001\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30fc\u30b9\u5074\u3067\u3059\u3002\n\u305d\u3057\u3066\u3001\u5b9f\u88c5\u30af\u30e9\u30b9\u306f\u7121\u3057\uff01\uff01\n\u8ffd\u52a0\u3059\u308b\u6642\u306f\u3001\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30fc\u30b9\u306b\u30e1\u30bd\u30c3\u30c9\u8ffd\u52a0\u3057\u3066\u7d42\u308f\u308a\uff01\nSpring\u3063\u307d\u3044\u3002\n\u307e\u3041\u3001\u4f55\u3082\u3057\u306a\u3051\u308c\u3070\u305d\u3093\u306a\u3053\u3068\u306f\u5b9f\u73fe\u3067\u304d\u306a\u3044\u306e\u3067\u3001\u5b9f\u73fe\u65b9\u6cd5\u3092\u8003\u3048\u3066\u307f\u307e\u3059\u3002\n\nProxy\u3092\u5b9f\u88c5\u3059\u308b\nSpring\u3082\u63a1\u3063\u3066\u3044\u308b\u624b\u6cd5\u3067\u3059\u304c\u3001\u3053\u3093\u306a\u6642\u306fProxy\u3067\u3059\u306d\u3002\n\u306a\u306e\u3067\u3001Proxy\u3092\u5b9f\u88c5\u3057\u3066\u307f\u307e\u3059\u3002\nDI\u767b\u9332\u304c\u3081\u3093\u3069\u304f\u3055\u3044\u306e\u3067FactoryBean\u3092\u4f7f\u3044\u307e\u3057\u3087\u3046\u3002\n\nApplicationPropertiesProxyFactoryBean.java\npublic class ApplicationPropertiesProxyFactoryBean implements FactoryBean<ApplicationProperties> , InitializingBean {\n\n  /** \u30e1\u30bd\u30c3\u30c9\u5f15\u6570\u306e\u540d\u524d\u3092\u89e3\u6c7a\u3059\u308b */\n  private static final ParameterNameDiscoverer PARAM_NAME_DISCOVERER = new DefaultParameterNameDiscoverer();\n\n  /** Proxy\u30aa\u30d6\u30b8\u30a7\u30af\u30c8 */\n  @Getter\n  private ApplicationProperties object;\n\n  /** \u30d7\u30ed\u30d1\u30c6\u30a3\u306e\u6587\u5b57\u5217\u304b\u3089\u30e1\u30bd\u30c3\u30c9\u306e\u623b\u308a\u306e\u578b\u306b\u5909\u63db\u3059\u308b\u305f\u3081\u306e\u30b5\u30fc\u30d3\u30b9 */\n  private FormattingConversionService conversionService = new DefaultFormattingConversionService();\n  /** \u30ad\u30fc\u6587\u5b57\u5217\u3067\u6307\u5b9a\u3055\u308c\u5f97\u308bSpEL\u5f0f\u3092\u30d1\u30fc\u30b9\u3059\u308b */\n  private ExpressionParser elParser = new SpelExpressionParser();\n\n  /** \u30d5\u30a1\u30a4\u30eb\u306b\u5b9a\u7fa9\u3055\u308c\u305f\u30d7\u30ed\u30d1\u30c6\u30a3\u5168\u90e8 */\n  @Resource(name = \"service.properties\")\n  private Properties properties;\n\n  /** Redis\u306b\u7a81\u3063\u8fbc\u3093\u3060\u30d7\u30ed\u30d1\u30c6\u30a3\u306b\u30a2\u30af\u30bb\u30b9\u3059\u308b */\n  @Autowired\n  private StringRedisTemplate redisOps;\n  /** DB\u306b\u7a81\u3063\u8fbc\u3093\u3060\u30d7\u30ed\u30d1\u30c6\u30a3\u306b\u30a2\u30af\u30bb\u30b9\u3059\u308b */\n  @Autowired\n  private ApplicationPropertiesRepository repository;\n\n  /** \u30d7\u30ed\u30d1\u30c6\u30a3\u5024\u306b\u57cb\u3081\u8fbc\u307e\u308c\u305f\u30d7\u30ec\u30fc\u30b9\u30db\u30eb\u30c0\u3092\u751f\u6210\u3059\u308b */\n  private ObjectMapper objectMapper = new ObjectMapper();\n\n  private HashOperations<String, String, String> hashOps() {\n    return this.redisOps.opsForHash();\n  }\n\n  // \u5b9f\u88c5\u306b\u7d9a\u304f\n}\n\n\n\u3053\u3093\u306a\u611f\u3058\u3067\u5fc5\u8981\u306a\u30b3\u30f3\u30dd\u30fc\u30cd\u30f3\u30c8\u3092\u7528\u610f\u3057\u307e\u3059\u3002\nLocalDate\u7528\u306bConverter\u3092\u7528\u610f\u3057\u307e\u3059\u3002\n\nApplicationPropertiesProxyFactoryBean.java\nprivate enum StringToLocalDateConverter implements Converter<String, LocalDate> {\n  INSTANCE;\n\n  @Override\n  public LocalDate convert(String source) {\n    return LocalDate.parse(source, DateTimeFormat.forPattern(\"yyyy-MM-dd\"));\n  }\n}\n\n\nConversionService \u306b\u8ffd\u52a0\u3057\u307e\u3059\u3002\n\u305d\u306e\u4ed6\u306e\u5909\u63db\u30eb\u30fc\u30eb\u306f\u30c7\u30d5\u30a9\u30eb\u30c8\u3067\u8a2d\u5b9a\u3055\u308c\u308bConverter\u3067OK\u3067\u3059\u3002\n\nApplicationPropertiesProxyFactoryBean.java\n@Override\npublic void afterPropertiesSet() {\n  ConversionServiceFactory.registerConverters(Collections.singleton(StringToLocalDateConverter.INSTANCE),\n    this.conversionService);\n}\n\n\n\u30d7\u30ed\u30ad\u30b7\u4f5c\u308a\u307e\u3059\u3002\n\nApplicationPropertiesProxyFactoryBean.java\n@Override\npublic void afterPropertiesSet() {\n  // \u2026 for conversionService.\n  this.object = (ApplicationProperties) Proxy.newProxyInstance(ClassUtils.getDefaultClassLoader(),\n    new Class[] { ApplicationProperties.class }, (proxy, method, args) -> {\n      // equals&toSring&hashCode\u306e\u5b9f\u88c5\n      if (ReflectionUtils.isEqualsMethod(method)) {\n        return EqualsBuilder.reflectionEquals(this.object, args[0]);\n      }\n      if (ReflectionUtils.isToStringMethod(method)) {\n        return ToStringBuilder.reflectionToString(this.object);\n      }\n      if (ReflectionUtils.isHashCodeMethod(method)) {\n        return HashCodeBuilder.reflectionHashCode(this.object);\n      }\n\n      // \u30ad\u30fc\u6587\u5b57\u5217\u3092\u53d6\u5f97\u3059\u308b\n      String key = this.getKey(proxy, method, args);\n      // \u7d14\u7c8b\u306b\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u308b\u5024\u3092\u305d\u306e\u307e\u307e\u6587\u5b57\u5217\u578b\u3067\u53d6\u5f97\u3059\u308b\n      String valueAsText = this.getPureValue(key, method);\n\n      // \u4eca\u56de\u306f\u691c\u8a3c\u7528\u306a\u306e\u3067\u5f15\u6570\u4e00\u3064\u306e\u5834\u5408\u306e\u307f\u5bfe\u5fdc\n      if (args != null && args.length == 1) {\n        try {\n          // \u6307\u5b9a\u3055\u308c\u305f\u5f15\u6570\u304b\u3089\u30d7\u30ec\u30fc\u30b9\u30db\u30eb\u30c0\u751f\u6210\n          Map<String, Object> placeholder = this.objectMapper.convertValue(args[0],\n            new TypeReference<Map<String, Object>>() {});\n          // \u30d7\u30ed\u30d1\u30c6\u30a3\u5024\u306e\u30d7\u30ec\u30fc\u30b9\u30db\u30eb\u30c0\u306b\u5024\u3092\u57cb\u3081\u8fbc\u3080\n          valueAsText = StrSubstitutor.replace(valueAsText, placeholder, \"{\", \"}\");\n        } catch (Exception e) {\n          throw new ApplicationPropertyException(key, \"\u30d7\u30ec\u30fc\u30b9\u30db\u30eb\u30c0\u30d0\u30a4\u30f3\u30c9\u6642\u306b\u30a8\u30e9\u30fc\u304c\u767a\u751f\u3057\u307e\u3057\u305f\u3002]\", e);\n        }\n      }\n\n      // \u30e1\u30bd\u30c3\u30c9\u306e\u623b\u308a\u306e\u578b\n      TypeDescriptor toType = new TypeDescriptor(MethodParameter.forMethodOrConstructor(method, -1));\n\n      try {\n        // \u30e1\u30bd\u30c3\u30c9\u306e\u623b\u308a\u306e\u578b\u306b\u5909\u63db\n        return this.conversionService.convert(valueAsText, toType);\n      } catch (Exception e) {\n        throw new ApplicationPropertyException(key, \"\u623b\u308a\u5024\u306e\u5909\u63db\u51e6\u7406\u306b\u5931\u6557\u3057\u307e\u3057\u305f\u3002\", e);\n      }\n    });\n} \n\n\n\u30d7\u30ec\u30fc\u30b9\u30db\u30eb\u30c0\u306e\u751f\u6210\u306bObjectMapper\u4f7f\u3046\u3068\u4fbf\u5229\u3002\n\u3067\u3082\u3001\u30cd\u30b9\u30c8\u3057\u305f\u5024\u306e\u30de\u30c3\u30d4\u30f3\u30b0\u304c\u3067\u304d\u306a\u3044\u306e\u304c\u3001\u3061\u3087\u3063\u3068\u75db\u3044\u3068\u3053\u308d\u3002\n\u4e0a\u8a18\u306e\u30ad\u30fc\u6587\u5b57\u5217\u306e\u53d6\u5f97\u7b87\u6240\u2193\n\nApplicationPropertiesProxyFactoryBean.java\nString key = this.getKey(proxy, method, args);\n\n\n\u306e\u5185\u5bb9\u306f\u6b21\u306e\u901a\u308a\u3067\u3059\u3002SpEL\u3067\u3082\u6307\u5b9a\u53ef\u80fd\u306b\u3057\u3066\u3044\u308b\u306e\u3067\u305d\u306e\u3042\u305f\u308a\u306e\u8003\u616e\u3092\u3057\u3066\u304a\u304d\u307e\u3059\u3002\n\nApplicationPropertiesProxyFactoryBean.java\nprivate String getKey(Object proxy, Method method, Object[] args) {\n  StandardEvaluationContext evalContext = this.createEvalContext(proxy, method, args);\n  AbstractStored stored = AnnotatedElementUtils.findMergedAnnotation(method, AbstractStored.class);\n  String key = stored.key();\n  Assert.isTrue(StringUtils.isNotBlank(key), \"\u30ad\u30fc\u304c\u7a7a\u6587\u5b57\u5217\u3067\u3059\u3002 [method:[\" + method + \"]]\");\n\n  try {\n    return this.elParser.parseExpression(key).getValue(evalContext, String.class);\n  } catch (Exception e) {\n    return key;\n  }\n}\n\n\n@AbstractStored\u30a2\u30ce\u30c6\u30fc\u30b7\u30e7\u30f3\u306f@StoredRedis\u3067\u3042\u308d\u3046\u304c@StoredFile\u3067\u3042\u308d\u3046\u304c@StoredDB\u3067\u3042\u308d\u3046\u304c\u30ad\u30fc\u306e\u53d6\u5f97\u51e6\u7406\u306f\u5171\u901a\u306a\u306e\u3067\u62bd\u8c61\u30a2\u30ce\u30c6\u30fc\u30b7\u30e7\u30f3\u3092\u7528\u610f\u3057\u307e\u3057\u305f\u3002\n\nAbstractStored.java\n@Retention(RUNTIME)\n@Target(ANNOTATION_TYPE)\npublic @interface AbstractStored {\n\n  @AliasFor(\"key\")\n  String value() default \"\";\n\n  @AliasFor(\"value\")\n  String key() default \"\";\n}\n\n\n\u3053\u306e\u30a2\u30ce\u30c6\u30fc\u30b7\u30e7\u30f3\u3092\u5404\u30a2\u30ce\u30c6\u30fc\u30b7\u30e7\u30f3\u306b\u4ed8\u4e0e\u3057\u3066\u9069\u5207\u306b@AliasFor\u3057\u3066\u3084\u308b\u3068\u3001\u53d6\u5f97\u51e6\u7406\u304c\u4e0a\u8a18\u306e\u3088\u3046\u306b\u30b7\u30f3\u30d7\u30eb\u306b\u306a\u308a\u307e\u3059\u3002\n\u4f8b\u3048\u3070@StoredRedis\n\nStoredRedis.java\n@Target(ElementType.METHOD)\n@Retention(RetentionPolicy.RUNTIME)\n@AbstractStored\npublic @interface StoredRedis {\n\n  @AliasFor(annotation = AbstractStored.class)\n  String value() default \"\";\n\n  @AliasFor(annotation = AbstractStored.class)\n  String key() default \"\";\n}\n\n\n\u3053\u306e\u2193\u7b87\u6240\u306b\u3064\u3044\u3066\u306f\u5272\u611b\u3057\u307e\u3059\u3002\u305f\u3060\u5358\u306bmethod\u3068arg\u304b\u3089\u5909\u6570\u3092\u767b\u9332\u3057\u3066\u3044\u308b\u3060\u3051\u3067\u3059\u3002\n\nApplicationPropertiesProxyFactoryBean.java\nStandardEvaluationContext evalContext = this.createEvalContext(proxy, method, args);\n\n\n\u6b21\u306f\u5024\u53d6\u5f97\u306e\u7b87\u6240\n\nApplicationPropertiesProxyFactoryBean.java\nString valueAsText = this.getPureValue(key, method);\n\n\n\u306e\u547c\u51fa\u5148\u3067\u3059\u3002\n\nApplicationPropertiesProxyFactoryBean.java\n@NonNull\nprivate String getPureValue(String key, Method method) {\n  // DB\u306b\u683c\u7d0d\u3055\u308c\u3066\u3044\u308b\u5024\u3092\u53d6\u5f97\u3059\u308b\n  StoredDB storedDB = AnnotatedElementUtils.findMergedAnnotation(method, StoredDB.class);\n  if (storedDB != null) {\n    Assert.isTrue(StringUtils.isNotBlank(key), \"\u30ad\u30fc\u304c\u7a7a\u6587\u5b57\u5217\u3067\u3059\u3002 [method:[\" + method + \"]]\");\n    return Optional.ofNullable(this.repository.getByKey(key))\n      .map(ApplicationProperty::getValue)\n      .filter(StringUtils::isNotBlank)\n      .orElseThrow(() -> new ApplicationPropertyException(storedDB.value(), \"\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u307e\u305b\u3093\u3002\"));\n  }\n  // Redis\u306b\u683c\u7d0d\u3055\u308c\u3066\u3044\u308b\u5024\u3092\u53d6\u5f97\u3059\u308b\n  StoredRedis storedRedis = AnnotatedElementUtils.findMergedAnnotation(method, StoredRedis.class);\n  if (storedRedis != null) {\n    Assert.isTrue(StringUtils.isNotBlank(key), \"\u30ad\u30fc\u304c\u7a7a\u6587\u5b57\u5217\u3067\u3059\u3002 [method:[\" + method + \"]]\");\n\n    return Optional.ofNullable(this.hashOps().get(ApplicationProperties.class.getSimpleName(), key))\n      .filter(StringUtils::isNotBlank)\n      .orElseThrow(() -> new ApplicationPropertyException(key, \"\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u307e\u305b\u3093\u3002\"));\n  }\n\n  // \u30d7\u30ed\u30d1\u30c6\u30a3\u30d5\u30a1\u30a4\u30eb\u306b\u683c\u7d0d\u3055\u308c\u3066\u3044\u308b\u5024\u3092\u53d6\u5f97\u3059\u308b\n  StoredFile storedFile = AnnotatedElementUtils.findMergedAnnotation(method, StoredFile.class);\n  if (storedFile != null) {\n    Assert.isTrue(StringUtils.isNotBlank(key), \"\u30ad\u30fc\u304c\u7a7a\u6587\u5b57\u5217\u3067\u3059\u3002 [method:[\" + method + \"]]\");\n\n    return Optional.ofNullable((String) this.properties.get(key))\n      .filter(StringUtils::isNotBlank)\n      .orElseThrow(() -> new ApplicationPropertyException(key, \"\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u307e\u305b\u3093\u3002\"));\n  }\n\n  throw new IllegalStateException(\"\u30c7\u30fc\u30bf\u306e\u5b9a\u7fa9\u5148\u304c\u6307\u5b9a\u3055\u308c\u3066\u3044\u307e\u305b\u3093\u3002 [method:[\" + method + \"]]\");\n}\n\n\n\u3053\u308c\u3067\u6e96\u5099\u5b8c\u4e86\u3002\n\n\u691c\u8a3c\n\u3044\u3064\u3082\u306e\u3088\u3046\u306b\u30b3\u30f3\u30c8\u30ed\u30fc\u30e9\u7528\u610f\u3057\u3066\u5b9f\u884c\u3057\u3066\u307f\u308b\u3002\n\u30b3\u30f3\u30c8\u30ed\u30fc\u30e9\u306f\u3053\u3093\u306a\u611f\u3058\u3067\u3059\u3002\n\nDemoController.java\n@Autowired\nprivate ApplicationProperties properties;\n\n@GetMapping(\"/age\")\npublic Integer age() {\n  return this.properties.getJoinableMinAge();\n}\n\n@GetMapping(\"/items/{id}/url\")\npublic String itemUrl(@PathVariable Long id) {\n  return this.properties.getUrl(Item.builder().id(id).build());\n}\n\n@GetMapping(\"/users/{id}/url\")\npublic String userUrl(@PathVariable Long id) {\n  return this.properties.getUrl(User.builder().id(id).name(\"kenny\").build());\n}\n\n@GetMapping(\"/date\")\npublic LocalDate date() {\n  return this.properties.getServiceStartDate();\n}\n\n\n\u3044\u3056\u3002\n$ curl http://localhost:8080/age && echo\n23\n\n$ curl http://localhost:8080/items/2/url && echo\n/items/2\n\n$ curl http://localhost:8080/users/10/url && echo\n/users/kenny\n\n$ curl http://localhost:8080/date --silent | jq \".values\"\n[\n  2017,\n  2,\n  27\n]\n\n\n\u307e\u3068\u3081\n\n\n\u5b9f\u969b\u306b\u904b\u7528\u3057\u3066\u307f\u305f\u304c\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30fc\u30b9\u30e1\u30bd\u30c3\u30c9\u306e\u8ffd\u52a0\u3060\u3051\u3063\u3066\u3044\u3046\u306e\u306f\u672c\u5f53\u306b\u697d\u3002\n\n\u623b\u308a\u306e\u578b\u306e\u30d1\u30bf\u30fc\u30f3\u304c\u5897\u3048\u3066\u3082ConversionService\u306bConverter\u8ffd\u52a0\u3059\u308b\u3060\u3051\u3002\n\n\u30d7\u30ed\u30d1\u30c6\u30a3\u306e\u898b\u901a\u3057\u304c\u826f\u304f\u306a\u3063\u305f\n\n\u305d\u3082\u305d\u3082\u5b9a\u7fa9\u5148\u304c\u30d0\u30e9\u3051\u3066\u308b\u306e\u4f55\u3068\u304b\u3057\u305f\u65b9\u304c\u826f\u3044\n\nRedis\u3084MySQL\u306b\u30c7\u30fc\u30bf\u5165\u308c\u5fd8\u308c\u308b(\u203b1)\n\n\u30a2\u30af\u30bb\u30b9\u304c\u591a\u3044\u30d7\u30ed\u30d1\u30c6\u30a3\u3060\u3068Redis\u3084MySQL\u3078\u306e\u30a2\u30af\u30bb\u30b9\u8ca0\u8377\u304c\u9ad8\u3044(\u203b2)\n\n\u6b21\u56de\u306f\u203b1\u3068\u203b2\u306b\u3064\u3044\u3066\u4f55\u3068\u304b\u3057\u305f\u3044\u3068\u601d\u3044\u307e\u3059\u3002\n\u4eca\u56de\u306e\u30b3\u30fc\u30c9\u3067\u3059\u3002\n# \u5916\u90e8\u5b9a\u7fa9\u3055\u308c\u305f\u5b9a\u6570\n\n\u30d7\u30ed\u30d1\u30c6\u30a3\u30d5\u30a1\u30a4\u30eb\u3084\u3089Redis\u3084\u3089MySQL\u3084\u3089\u306b\u5024\u3092\u7a81\u3063\u8fbc\u3093\u3067\u3001\n\n- \u3055\u3066\u3001\u3069\u3053\u306b\u5b9a\u7fa9\u3057\u3066\u305f\u304b\uff1f\n- \u6570\u5024\u5909\u63db\u30df\u30b9\u3063\u305f\u3089\u5c02\u7528\u306e\u4f8b\u5916\u6295\u3052\u306a\u304d\u3083\u3044\u3051\u306a\u3044\n- \u65e5\u6642\u306e\u30d5\u30a9\u30fc\u30de\u30c3\u30c8\u5408\u308f\u305b\u308d\u3088\n- \u540c\u3058\u3088\u3046\u306a\u5909\u63db\u30ed\u30b8\u30c3\u30af\u305f\u304f\u3055\u3093\u3067\u304d\u305f\uff01\n- \u30d7\u30ed\u30d1\u30c6\u30a3\uff11\u3064\u8ffd\u52a0\u3059\u308b\u306e\u306b\u3082\u5104\u52ab\n\n\u307f\u305f\u3044\u306a\u7d4c\u9a13\u3001\u5730\u5473\u306b\u3042\u308a\u307e\u3059\u3002\n\u3053\u308c\u3092\u89e3\u6c7a\u3059\u308b\u65b9\u6cd5\u3092\u8003\u3048\u3066\u307f\u307e\u3057\u305f\u3002\n\uff03\u672c\u5f53\u306f\u30c7\u30fc\u30bf\u30b9\u30c8\u30a2\u3092\uff11\u3064\u306b\u7d5e\u308b\u3053\u3068\u304c\u30d9\u30b9\u30c8\u3002\n\n\u691c\u8a3c\u7528\u306e\u30b3\u30fc\u30c9\u306fSpringBoot\u4f7f\u3063\u3066\u307e\u3059\u304c\u3001Non-Boot\u9650\u5b9a\u306e\u8a71\u3067\u3059\u3002\nSpringBoot\u4f7f\u3063\u3066\u308b\u5834\u5408\u306fSpring Cloud Config\u4f7f\u3063\u305f\u65b9\u304c\u826f\u3044\u3067\u3059\u3002\n\n# \u3046\u3093\u3056\u308a\u3059\u308b\u30b3\u30fc\u30c9\n\n\u4e0a\u8a18\u3067\u8aac\u660e\u3057\u305f\u3088\u3046\u306a\u30b3\u30fc\u30c9\u3092\u8f09\u305b\u3066\u307f\u307e\u3059\u3002\n\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30fc\u30b9\u306f\u3053\u3093\u306a\u611f\u3058\u3067\u3059\u3002\n\u5185\u5bb9\u306f\u9069\u5f53\u3067\u3059\u3002\n`LocalDate`\u306fjoda-time\u306e\u3084\u3064\u3067\u3059\u3002\n\n```java:ApplicationProperties.java\n/** \u4f1a\u54e1\u767b\u9332\u53ef\u80fd\u306a\u6700\u4f4e\u5e74\u9f62 */\nInteger getJoinableMinAge();\n/** \u6307\u5b9a\u3057\u305f\u30aa\u30d6\u30b8\u30a7\u30af\u306bURL\u304c\u5272\u308a\u5f53\u3066\u3089\u308c\u3066\u3044\u305f\u3089URL\u304c\u8fd4\u308b */\nString getUrl(Object object);\n/** \u30b5\u30fc\u30d3\u30b9\u958b\u59cb\u65e5 */\nLocalDate getServiceStartDate();\n```\n\n```bash:Redis\n$ redis-cli hget \"ApplicationProperties\" \"service.joinable.min.age\"\n\"23\"\n```\n\n```properties:service.properties\njp.uich.entity.Item.url=/items/{id}\njp.uich.entity.User.url=/users/{name}\n```\n\n```bash:MySQL\nmysql> select * from application_property;\n+--------------------+------------+\n| key                | value      |\n+--------------------+------------+\n| service.start.date | 2017-02-27 |\n+--------------------+------------+\n```\n\n\n\u3053\u308c\u3092\u666e\u901a\u306b\u5b9f\u88c5\u3057\u305f\u3089\u3053\u3046\u306a\u308a\u307e\u3057\u305f\u3002\n\n```java:DefaultApplicationProperties.java\n@Override\npublic Integer getJoinableMinAge() {\n  String value = this.hashOps().get(ApplicationProperties.class.getSimpleName(), \"service.joinable.min.age\");\n  if (value == null) {\n    throw new ApplicationPropertyException(\"service.joinable.min.age\", \"\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u307e\u305b\u3093\u3002\");\n  }\n  try {\n    return Integer.valueOf(value);\n  } catch (NumberFormatException e) {\n    throw new ApplicationPropertyException(\"service.joinable.min.age\", \"\u6570\u5024\u3067\u306f\u3042\u308a\u307e\u305b\u3093\u3002\", e);\n  }\n}\n\n@Override\npublic String getUrl(Object object) {\n  String urlFormat = (String) this.properties.get(object.getClass().getName() + \".url\");\n  if (StringUtils.isBlank(urlFormat)) {\n    throw new ApplicationPropertyException(object.getClass().getName() + \".url\", \"\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u307e\u305b\u3093\u3002\");\n  }\n  try {\n    Map<String, Object> placeholder = this.objectMapper.convertValue(object,\n      new TypeReference<Map<String, Object>>() {});\n    return StrSubstitutor.replace(urlFormat, placeholder, \"{\", \"}\");\n  } catch (Exception e) {\n    throw new ApplicationPropertyException(object.getClass().getName() + \".url\", \"URL\u6587\u5b57\u5217\u751f\u6210\u6642\u306b\u30a8\u30e9\u30fc\u304c\u767a\u751f\u3057\u307e\u3057\u305f\u3002\", e);\n  }\n}\n\n@Override\n@Transactional\npublic LocalDate getServiceStartDate() {\n  ApplicationProperty property = this.repository.getByKey(\"service.start.date\");\n  if (property == null || StringUtils.isBlank(property.getValue())) {\n    throw new ApplicationPropertyException(\"service.start.date\", \"\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u307e\u305b\u3093\u3002\");\n  }\n\n  try {\n    return LocalDate.parse(property.getValue(), DateTimeFormat.forPattern(\"yyyy-MM-dd\"));\n  } catch (IllegalArgumentException e) {\n    throw new ApplicationPropertyException(\"service.start.date\", \"\u65e5\u4ed8\u578b\u306e\u30d1\u30fc\u30b9\u306b\u5931\u6557\u3057\u307e\u3057\u305f\u3002\", e);\n  }\n}\n```\n\n\u9577\u3044\u3057\u898b\u901a\u3057\u60aa\u3044\u3002\n\u30ad\u30fc\u304c\u3069\u3053\u306b\u3042\u308b\u304b\u308f\u304b\u3089\u306a\u3044\u3002\u3002\n\u3069\u306e\u30ad\u30fc\u304c\u3069\u3053\u306b\u683c\u7d0d\u3055\u308c\u3066\u308b\u306e\uff1f\n\n\u305d\u3057\u3066\u3001\u3053\u3093\u306a\u30ed\u30b8\u30c3\u30af\u306f\u30d7\u30ed\u30d1\u30c6\u30a3\u304c\u5897\u3048\u308b\u6bce\u306b\u5897\u3048\u3066\u3044\u304f\u306e\u3067\u3059\u3002\n\u30ad\u30fc\u3092\u5b9a\u6570\u306b\u3057\u3066\u30af\u30e9\u30b9\u4e0a\u90e8\u306b\u307e\u3068\u3081\u305f\u308a\u3001\u540c\u3058\u3088\u3046\u306a\u30ed\u30b8\u30c3\u30af\u3092\u3042\u308b\u7a0b\u5ea6\u306f\u30e1\u30bd\u30c3\u30c9\u306b\u5207\u308a\u51fa\u305b\u308b\u304b\u3068\u601d\u3044\u307e\u3059\u304c\u3001\n\n1. \u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30fc\u30b9\u5074\u306b\u30e1\u30bd\u30c3\u30c9\u5b9a\u7fa9\u3057\u3066\n1. \u5177\u8c61\u30af\u30e9\u30b9\u3067\u30ad\u30fc\u3092\u5b9a\u7fa9\u3057\u3066\n1. \u30e1\u30bd\u30c3\u30c9\u5b9f\u88c5\u3057\u3066\n\n\u3063\u3066\u5730\u5473\u306b\u3081\u3093\u3069\u304f\u3055\u3044\u3093\u3067\u3059\u3001\u3053\u308c\u304c\u3002\n\n# \u7406\u60f3\u306e\u5f62\n\n\u8981\u306f\u3001\n\n- \u3069\u3053\u306b\u683c\u7d0d\u3055\u308c\u3066\u3044\u308b\u304b\u3059\u3050\u306b\u308f\u304b\u308b\n- \u30ad\u30fc\u304c\u308f\u304b\u308a\u3084\u3059\u3044\n- \u3054\u3061\u3083\u3054\u3061\u3083\u3057\u3066\u306a\u3044\n\n\u3092\u6e80\u305f\u3057\u305f\u3044\u306e\u3067\u3059\u3002\n\n\u3088\u3063\u3066\u3001\n\n```java:ApplicationProperties.java\n@StoredRedis(\"service.joinable.min.age\")\nInteger getJoinableMinAge();\n\n@StoredFile(\"#object.class.name + '.url'\")\nString getUrl(Object object);\n\n@StoredDB(\"service.start.date\")\nLocalDate getServiceStartDate();\n```\n\n\u3053\u3093\u306a\u5f62\u304c\u7406\u60f3\u3067\u3059\u3002\n\u3053\u308c\u3001\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30fc\u30b9\u5074\u3067\u3059\u3002\n\u305d\u3057\u3066\u3001\u5b9f\u88c5\u30af\u30e9\u30b9\u306f\u7121\u3057\uff01\uff01\n\u8ffd\u52a0\u3059\u308b\u6642\u306f\u3001\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30fc\u30b9\u306b\u30e1\u30bd\u30c3\u30c9\u8ffd\u52a0\u3057\u3066\u7d42\u308f\u308a\uff01\n\nSpring\u3063\u307d\u3044\u3002\n\n\u307e\u3041\u3001\u4f55\u3082\u3057\u306a\u3051\u308c\u3070\u305d\u3093\u306a\u3053\u3068\u306f\u5b9f\u73fe\u3067\u304d\u306a\u3044\u306e\u3067\u3001\u5b9f\u73fe\u65b9\u6cd5\u3092\u8003\u3048\u3066\u307f\u307e\u3059\u3002\n\n# Proxy\u3092\u5b9f\u88c5\u3059\u308b\n\nSpring\u3082\u63a1\u3063\u3066\u3044\u308b\u624b\u6cd5\u3067\u3059\u304c\u3001\u3053\u3093\u306a\u6642\u306fProxy\u3067\u3059\u306d\u3002\n\u306a\u306e\u3067\u3001Proxy\u3092\u5b9f\u88c5\u3057\u3066\u307f\u307e\u3059\u3002\n\nDI\u767b\u9332\u304c\u3081\u3093\u3069\u304f\u3055\u3044\u306e\u3067`FactoryBean`\u3092\u4f7f\u3044\u307e\u3057\u3087\u3046\u3002\n\n```java:ApplicationPropertiesProxyFactoryBean.java\npublic class ApplicationPropertiesProxyFactoryBean implements FactoryBean<ApplicationProperties> , InitializingBean {\n\n  /** \u30e1\u30bd\u30c3\u30c9\u5f15\u6570\u306e\u540d\u524d\u3092\u89e3\u6c7a\u3059\u308b */\n  private static final ParameterNameDiscoverer PARAM_NAME_DISCOVERER = new DefaultParameterNameDiscoverer();\n\n  /** Proxy\u30aa\u30d6\u30b8\u30a7\u30af\u30c8 */\n  @Getter\n  private ApplicationProperties object;\n\n  /** \u30d7\u30ed\u30d1\u30c6\u30a3\u306e\u6587\u5b57\u5217\u304b\u3089\u30e1\u30bd\u30c3\u30c9\u306e\u623b\u308a\u306e\u578b\u306b\u5909\u63db\u3059\u308b\u305f\u3081\u306e\u30b5\u30fc\u30d3\u30b9 */\n  private FormattingConversionService conversionService = new DefaultFormattingConversionService();\n  /** \u30ad\u30fc\u6587\u5b57\u5217\u3067\u6307\u5b9a\u3055\u308c\u5f97\u308bSpEL\u5f0f\u3092\u30d1\u30fc\u30b9\u3059\u308b */\n  private ExpressionParser elParser = new SpelExpressionParser();\n\n  /** \u30d5\u30a1\u30a4\u30eb\u306b\u5b9a\u7fa9\u3055\u308c\u305f\u30d7\u30ed\u30d1\u30c6\u30a3\u5168\u90e8 */\n  @Resource(name = \"service.properties\")\n  private Properties properties;\n\n  /** Redis\u306b\u7a81\u3063\u8fbc\u3093\u3060\u30d7\u30ed\u30d1\u30c6\u30a3\u306b\u30a2\u30af\u30bb\u30b9\u3059\u308b */\n  @Autowired\n  private StringRedisTemplate redisOps;\n  /** DB\u306b\u7a81\u3063\u8fbc\u3093\u3060\u30d7\u30ed\u30d1\u30c6\u30a3\u306b\u30a2\u30af\u30bb\u30b9\u3059\u308b */\n  @Autowired\n  private ApplicationPropertiesRepository repository;\n\n  /** \u30d7\u30ed\u30d1\u30c6\u30a3\u5024\u306b\u57cb\u3081\u8fbc\u307e\u308c\u305f\u30d7\u30ec\u30fc\u30b9\u30db\u30eb\u30c0\u3092\u751f\u6210\u3059\u308b */\n  private ObjectMapper objectMapper = new ObjectMapper();\n\n  private HashOperations<String, String, String> hashOps() {\n    return this.redisOps.opsForHash();\n  }\n\n  // \u5b9f\u88c5\u306b\u7d9a\u304f\n}\n```\n\n\u3053\u3093\u306a\u611f\u3058\u3067\u5fc5\u8981\u306a\u30b3\u30f3\u30dd\u30fc\u30cd\u30f3\u30c8\u3092\u7528\u610f\u3057\u307e\u3059\u3002\n`LocalDate`\u7528\u306b`Converter`\u3092\u7528\u610f\u3057\u307e\u3059\u3002\n\n```java:ApplicationPropertiesProxyFactoryBean.java\nprivate enum StringToLocalDateConverter implements Converter<String, LocalDate> {\n  INSTANCE;\n\n  @Override\n  public LocalDate convert(String source) {\n    return LocalDate.parse(source, DateTimeFormat.forPattern(\"yyyy-MM-dd\"));\n  }\n}\n```\n\n`ConversionService` \u306b\u8ffd\u52a0\u3057\u307e\u3059\u3002\n\u305d\u306e\u4ed6\u306e\u5909\u63db\u30eb\u30fc\u30eb\u306f\u30c7\u30d5\u30a9\u30eb\u30c8\u3067\u8a2d\u5b9a\u3055\u308c\u308b`Converter`\u3067OK\u3067\u3059\u3002\n\n```java:ApplicationPropertiesProxyFactoryBean.java\n@Override\npublic void afterPropertiesSet() {\n  ConversionServiceFactory.registerConverters(Collections.singleton(StringToLocalDateConverter.INSTANCE),\n    this.conversionService);\n}\n```\n\n\u30d7\u30ed\u30ad\u30b7\u4f5c\u308a\u307e\u3059\u3002\n\n```java:ApplicationPropertiesProxyFactoryBean.java\n@Override\npublic void afterPropertiesSet() {\n  // \u2026 for conversionService.\n  this.object = (ApplicationProperties) Proxy.newProxyInstance(ClassUtils.getDefaultClassLoader(),\n    new Class[] { ApplicationProperties.class }, (proxy, method, args) -> {\n      // equals&toSring&hashCode\u306e\u5b9f\u88c5\n      if (ReflectionUtils.isEqualsMethod(method)) {\n        return EqualsBuilder.reflectionEquals(this.object, args[0]);\n      }\n      if (ReflectionUtils.isToStringMethod(method)) {\n        return ToStringBuilder.reflectionToString(this.object);\n      }\n      if (ReflectionUtils.isHashCodeMethod(method)) {\n        return HashCodeBuilder.reflectionHashCode(this.object);\n      }\n\n      // \u30ad\u30fc\u6587\u5b57\u5217\u3092\u53d6\u5f97\u3059\u308b\n      String key = this.getKey(proxy, method, args);\n      // \u7d14\u7c8b\u306b\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u308b\u5024\u3092\u305d\u306e\u307e\u307e\u6587\u5b57\u5217\u578b\u3067\u53d6\u5f97\u3059\u308b\n      String valueAsText = this.getPureValue(key, method);\n\n      // \u4eca\u56de\u306f\u691c\u8a3c\u7528\u306a\u306e\u3067\u5f15\u6570\u4e00\u3064\u306e\u5834\u5408\u306e\u307f\u5bfe\u5fdc\n      if (args != null && args.length == 1) {\n        try {\n          // \u6307\u5b9a\u3055\u308c\u305f\u5f15\u6570\u304b\u3089\u30d7\u30ec\u30fc\u30b9\u30db\u30eb\u30c0\u751f\u6210\n          Map<String, Object> placeholder = this.objectMapper.convertValue(args[0],\n            new TypeReference<Map<String, Object>>() {});\n          // \u30d7\u30ed\u30d1\u30c6\u30a3\u5024\u306e\u30d7\u30ec\u30fc\u30b9\u30db\u30eb\u30c0\u306b\u5024\u3092\u57cb\u3081\u8fbc\u3080\n          valueAsText = StrSubstitutor.replace(valueAsText, placeholder, \"{\", \"}\");\n        } catch (Exception e) {\n          throw new ApplicationPropertyException(key, \"\u30d7\u30ec\u30fc\u30b9\u30db\u30eb\u30c0\u30d0\u30a4\u30f3\u30c9\u6642\u306b\u30a8\u30e9\u30fc\u304c\u767a\u751f\u3057\u307e\u3057\u305f\u3002]\", e);\n        }\n      }\n\n      // \u30e1\u30bd\u30c3\u30c9\u306e\u623b\u308a\u306e\u578b\n      TypeDescriptor toType = new TypeDescriptor(MethodParameter.forMethodOrConstructor(method, -1));\n\n      try {\n        // \u30e1\u30bd\u30c3\u30c9\u306e\u623b\u308a\u306e\u578b\u306b\u5909\u63db\n        return this.conversionService.convert(valueAsText, toType);\n      } catch (Exception e) {\n        throw new ApplicationPropertyException(key, \"\u623b\u308a\u5024\u306e\u5909\u63db\u51e6\u7406\u306b\u5931\u6557\u3057\u307e\u3057\u305f\u3002\", e);\n      }\n    });\n} \n```\n\n\u30d7\u30ec\u30fc\u30b9\u30db\u30eb\u30c0\u306e\u751f\u6210\u306b`ObjectMapper`\u4f7f\u3046\u3068\u4fbf\u5229\u3002\n\u3067\u3082\u3001\u30cd\u30b9\u30c8\u3057\u305f\u5024\u306e\u30de\u30c3\u30d4\u30f3\u30b0\u304c\u3067\u304d\u306a\u3044\u306e\u304c\u3001\u3061\u3087\u3063\u3068\u75db\u3044\u3068\u3053\u308d\u3002\n\n\u4e0a\u8a18\u306e\u30ad\u30fc\u6587\u5b57\u5217\u306e\u53d6\u5f97\u7b87\u6240\u2193\n\n```java:ApplicationPropertiesProxyFactoryBean.java\nString key = this.getKey(proxy, method, args);\n```\n\n\u306e\u5185\u5bb9\u306f\u6b21\u306e\u901a\u308a\u3067\u3059\u3002SpEL\u3067\u3082\u6307\u5b9a\u53ef\u80fd\u306b\u3057\u3066\u3044\u308b\u306e\u3067\u305d\u306e\u3042\u305f\u308a\u306e\u8003\u616e\u3092\u3057\u3066\u304a\u304d\u307e\u3059\u3002\n\n```java:ApplicationPropertiesProxyFactoryBean.java\nprivate String getKey(Object proxy, Method method, Object[] args) {\n  StandardEvaluationContext evalContext = this.createEvalContext(proxy, method, args);\n  AbstractStored stored = AnnotatedElementUtils.findMergedAnnotation(method, AbstractStored.class);\n  String key = stored.key();\n  Assert.isTrue(StringUtils.isNotBlank(key), \"\u30ad\u30fc\u304c\u7a7a\u6587\u5b57\u5217\u3067\u3059\u3002 [method:[\" + method + \"]]\");\n\n  try {\n    return this.elParser.parseExpression(key).getValue(evalContext, String.class);\n  } catch (Exception e) {\n    return key;\n  }\n}\n```\n\n`@AbstractStored`\u30a2\u30ce\u30c6\u30fc\u30b7\u30e7\u30f3\u306f`@StoredRedis`\u3067\u3042\u308d\u3046\u304c`@StoredFile`\u3067\u3042\u308d\u3046\u304c`@StoredDB`\u3067\u3042\u308d\u3046\u304c\u30ad\u30fc\u306e\u53d6\u5f97\u51e6\u7406\u306f\u5171\u901a\u306a\u306e\u3067\u62bd\u8c61\u30a2\u30ce\u30c6\u30fc\u30b7\u30e7\u30f3\u3092\u7528\u610f\u3057\u307e\u3057\u305f\u3002\n\n```java:AbstractStored.java\n@Retention(RUNTIME)\n@Target(ANNOTATION_TYPE)\npublic @interface AbstractStored {\n\n  @AliasFor(\"key\")\n  String value() default \"\";\n\n  @AliasFor(\"value\")\n  String key() default \"\";\n}\n```\n\n\u3053\u306e\u30a2\u30ce\u30c6\u30fc\u30b7\u30e7\u30f3\u3092\u5404\u30a2\u30ce\u30c6\u30fc\u30b7\u30e7\u30f3\u306b\u4ed8\u4e0e\u3057\u3066\u9069\u5207\u306b`@AliasFor`\u3057\u3066\u3084\u308b\u3068\u3001\u53d6\u5f97\u51e6\u7406\u304c\u4e0a\u8a18\u306e\u3088\u3046\u306b\u30b7\u30f3\u30d7\u30eb\u306b\u306a\u308a\u307e\u3059\u3002\n\u4f8b\u3048\u3070`@StoredRedis`\n\n```java:StoredRedis.java\n@Target(ElementType.METHOD)\n@Retention(RetentionPolicy.RUNTIME)\n@AbstractStored\npublic @interface StoredRedis {\n\n  @AliasFor(annotation = AbstractStored.class)\n  String value() default \"\";\n\n  @AliasFor(annotation = AbstractStored.class)\n  String key() default \"\";\n}\n```\n\n\u3053\u306e\u2193\u7b87\u6240\u306b\u3064\u3044\u3066\u306f\u5272\u611b\u3057\u307e\u3059\u3002\u305f\u3060\u5358\u306b`method`\u3068`arg`\u304b\u3089\u5909\u6570\u3092\u767b\u9332\u3057\u3066\u3044\u308b\u3060\u3051\u3067\u3059\u3002\n\n```java:ApplicationPropertiesProxyFactoryBean.java\nStandardEvaluationContext evalContext = this.createEvalContext(proxy, method, args);\n```\n\n\u6b21\u306f\u5024\u53d6\u5f97\u306e\u7b87\u6240\n\n```java:ApplicationPropertiesProxyFactoryBean.java\nString valueAsText = this.getPureValue(key, method);\n```\n\n\u306e\u547c\u51fa\u5148\u3067\u3059\u3002\n\n```java:ApplicationPropertiesProxyFactoryBean.java\n@NonNull\nprivate String getPureValue(String key, Method method) {\n  // DB\u306b\u683c\u7d0d\u3055\u308c\u3066\u3044\u308b\u5024\u3092\u53d6\u5f97\u3059\u308b\n  StoredDB storedDB = AnnotatedElementUtils.findMergedAnnotation(method, StoredDB.class);\n  if (storedDB != null) {\n    Assert.isTrue(StringUtils.isNotBlank(key), \"\u30ad\u30fc\u304c\u7a7a\u6587\u5b57\u5217\u3067\u3059\u3002 [method:[\" + method + \"]]\");\n    return Optional.ofNullable(this.repository.getByKey(key))\n      .map(ApplicationProperty::getValue)\n      .filter(StringUtils::isNotBlank)\n      .orElseThrow(() -> new ApplicationPropertyException(storedDB.value(), \"\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u307e\u305b\u3093\u3002\"));\n  }\n  // Redis\u306b\u683c\u7d0d\u3055\u308c\u3066\u3044\u308b\u5024\u3092\u53d6\u5f97\u3059\u308b\n  StoredRedis storedRedis = AnnotatedElementUtils.findMergedAnnotation(method, StoredRedis.class);\n  if (storedRedis != null) {\n    Assert.isTrue(StringUtils.isNotBlank(key), \"\u30ad\u30fc\u304c\u7a7a\u6587\u5b57\u5217\u3067\u3059\u3002 [method:[\" + method + \"]]\");\n\n    return Optional.ofNullable(this.hashOps().get(ApplicationProperties.class.getSimpleName(), key))\n      .filter(StringUtils::isNotBlank)\n      .orElseThrow(() -> new ApplicationPropertyException(key, \"\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u307e\u305b\u3093\u3002\"));\n  }\n\n  // \u30d7\u30ed\u30d1\u30c6\u30a3\u30d5\u30a1\u30a4\u30eb\u306b\u683c\u7d0d\u3055\u308c\u3066\u3044\u308b\u5024\u3092\u53d6\u5f97\u3059\u308b\n  StoredFile storedFile = AnnotatedElementUtils.findMergedAnnotation(method, StoredFile.class);\n  if (storedFile != null) {\n    Assert.isTrue(StringUtils.isNotBlank(key), \"\u30ad\u30fc\u304c\u7a7a\u6587\u5b57\u5217\u3067\u3059\u3002 [method:[\" + method + \"]]\");\n\n    return Optional.ofNullable((String) this.properties.get(key))\n      .filter(StringUtils::isNotBlank)\n      .orElseThrow(() -> new ApplicationPropertyException(key, \"\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u307e\u305b\u3093\u3002\"));\n  }\n\n  throw new IllegalStateException(\"\u30c7\u30fc\u30bf\u306e\u5b9a\u7fa9\u5148\u304c\u6307\u5b9a\u3055\u308c\u3066\u3044\u307e\u305b\u3093\u3002 [method:[\" + method + \"]]\");\n}\n```\n\n\u3053\u308c\u3067\u6e96\u5099\u5b8c\u4e86\u3002\n\n# \u691c\u8a3c\n\n\u3044\u3064\u3082\u306e\u3088\u3046\u306b\u30b3\u30f3\u30c8\u30ed\u30fc\u30e9\u7528\u610f\u3057\u3066\u5b9f\u884c\u3057\u3066\u307f\u308b\u3002\n\u30b3\u30f3\u30c8\u30ed\u30fc\u30e9\u306f\u3053\u3093\u306a\u611f\u3058\u3067\u3059\u3002\n\n```java:DemoController.java\n@Autowired\nprivate ApplicationProperties properties;\n\n@GetMapping(\"/age\")\npublic Integer age() {\n  return this.properties.getJoinableMinAge();\n}\n\n@GetMapping(\"/items/{id}/url\")\npublic String itemUrl(@PathVariable Long id) {\n  return this.properties.getUrl(Item.builder().id(id).build());\n}\n\n@GetMapping(\"/users/{id}/url\")\npublic String userUrl(@PathVariable Long id) {\n  return this.properties.getUrl(User.builder().id(id).name(\"kenny\").build());\n}\n\n@GetMapping(\"/date\")\npublic LocalDate date() {\n  return this.properties.getServiceStartDate();\n}\n```\n\n\u3044\u3056\u3002\n\n```bash\n$ curl http://localhost:8080/age && echo\n23\n```\n```bash\n$ curl http://localhost:8080/items/2/url && echo\n/items/2\n```\n```bash\n$ curl http://localhost:8080/users/10/url && echo\n/users/kenny\n```\n```bash\n$ curl http://localhost:8080/date --silent | jq \".values\"\n[\n  2017,\n  2,\n  27\n]\n```\n\n# \u307e\u3068\u3081\n\n- :o:\u5b9f\u969b\u306b\u904b\u7528\u3057\u3066\u307f\u305f\u304c\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30fc\u30b9\u30e1\u30bd\u30c3\u30c9\u306e\u8ffd\u52a0\u3060\u3051\u3063\u3066\u3044\u3046\u306e\u306f\u672c\u5f53\u306b\u697d\u3002\n- :o:\u623b\u308a\u306e\u578b\u306e\u30d1\u30bf\u30fc\u30f3\u304c\u5897\u3048\u3066\u3082`ConversionService`\u306b`Converter`\u8ffd\u52a0\u3059\u308b\u3060\u3051\u3002\n- :o:\u30d7\u30ed\u30d1\u30c6\u30a3\u306e\u898b\u901a\u3057\u304c\u826f\u304f\u306a\u3063\u305f\n- :x:\u305d\u3082\u305d\u3082\u5b9a\u7fa9\u5148\u304c\u30d0\u30e9\u3051\u3066\u308b\u306e\u4f55\u3068\u304b\u3057\u305f\u65b9\u304c\u826f\u3044\n- :x:Redis\u3084MySQL\u306b\u30c7\u30fc\u30bf\u5165\u308c\u5fd8\u308c\u308b(\u203b1)\n- :x:\u30a2\u30af\u30bb\u30b9\u304c\u591a\u3044\u30d7\u30ed\u30d1\u30c6\u30a3\u3060\u3068Redis\u3084MySQL\u3078\u306e\u30a2\u30af\u30bb\u30b9\u8ca0\u8377\u304c\u9ad8\u3044(\u203b2)\n\n\u6b21\u56de\u306f\u203b1\u3068\u203b2\u306b\u3064\u3044\u3066\u4f55\u3068\u304b\u3057\u305f\u3044\u3068\u601d\u3044\u307e\u3059\u3002\n\n\u4eca\u56de\u306e[\u30b3\u30fc\u30c9](https://github.com/uich/demo-app-prop)\u3067\u3059\u3002\n\n", "tags": ["spring4.3.6"]}