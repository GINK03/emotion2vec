{"context": "\u79fb\u690d\u3084\u3063\u3066\u3066\u6c17\u306b\u306a\u3063\u305f\u306e\u3067\u30e1\u30e2\u3002\n\n\u305d\u308c\u305e\u308c\u306e\u57fa\u672csubscribe\n\n\nRxSwift\u306esubscribe\n\nhttps://github.com/ReactiveX/RxSwift/blob/2.5.0/RxSwift/Observable.swift#L28-L30\nObserver\u3092\u53d7\u3051\u53d6\u308aDisposable\u3092\u8fd4\u3059\u3002\n\nRxJava\u306esubscribe\n\nhttps://github.com/ReactiveX/RxJava/blob/v1.1.6/src/main/java/rx/Observable.java#L8725-L8727\nSubscriber\u3092\u53d7\u3051\u53d6\u308aSubscription\u3092\u8fd4\u3059\u3002\n\u5185\u90e8\u3067\u306fstatic\u30e1\u30bd\u30c3\u30c9\u306esubscribe\u3092\u547c\u3073\u51fa\u3057\u3001SafeSubscriber\u306b\u30e9\u30c3\u30d7\u3057\u3064\u3064\u9032\u3093\u3067\n(1)https://github.com/ReactiveX/RxJava/blob/v1.1.6/src/main/java/rx/Observable.java#L8760\n\u3053\u3053\u3067Subscription\u304c\u8fd4\u3063\u3066\u3044\u308b\u3002\n(2)https://github.com/ReactiveX/RxJava/blob/v1.1.6/src/main/java/rx/plugins/RxJavaObservableExecutionHook.java#L90-L93\n(1)\u3067\u306fSubscriber\u3092\u6e21\u3057\u3066\u3044\u308b\u304c\u3001(2)\u3067\u306f\u305d\u308c\u3092Subscription\u3068\u3057\u3066\u53d7\u3051\u53d6\u3063\u3066\u3001\u305d\u306e\u307e\u307e\u8fd4\u3057\u3066\u3044\u308b\u3002\n\u3059\u306a\u308f\u3061Subscriber \u2286 Subscription\u3002\n\uff08Observer\u3082\u3042\u308b\u304c\u5185\u90e8\u3067\u306fSubscriber\u3067\u306e\u547c\u3073\u51fa\u3057\u306b\u306a\u308b\u3002\uff09\n\n\u6bd4\u8f03\n\nRxSwift\n\nSwift\nlet observer = AnyObserver<Int> { ev in\n    switch ev {\n    case .Next(let i):  print(\"onNext: \\(i)\")\n    case .Error(let e): print(\"onError: \\(e)\")\n    case .Completed:    print(\"onCompleted\")\n    }\n}\n\nlet observableA = PublishSubject<Int>()\nlet observableB = PublishSubject<Int>()\n\nlet disposableA = observableA.subscribe(observer)\nlet disposableB = observableB.subscribe(observer)\n\nobservableA.onNext(1)\nobservableB.onNext(2)\ndisposableA.dispose()\nobservableA.onNext(3)\nobservableB.onNext(4)\n\n\n\n\u51fa\u529b\nonNext: 1\nonNext: 2\nonNext: 4\n\n\n\u3075\u305f\u3064\u306e\u8cfc\u8aad\u304c\u5225\u3005\u306b\u7ba1\u7406\u3055\u308c\u3066\u3044\u308b\u306e\u304c\u5206\u304b\u308b\u3002\n\nRxJava\n\nKotlin\nval subscriber = object: Subscriber<Int>() {\n    override fun onNext(t: Int?) {\n        println(\"onNext: $t\")\n    }\n    override fun onError(e: Throwable?) {\n        println(\"onError: $e\")\n    }\n    override fun onCompleted() {\n        println(\"onCompleted\")\n    }\n}\nval observableA = PublishSubject.create<Int>()\nval observableB = PublishSubject.create<Int>()\nval subscriptionA = observableA\n        .doOnUnsubscribe { println(\"unsubscribe A\") }\n        .subscribe(subscriber)\nval subscriptionB = observableB\n        .doOnUnsubscribe { println(\"unsubscribe B\") }\n        .subscribe(subscriber)\nobservableA.onNext(1)\nobservableB.onNext(2)\nsubscriptionA.unsubscribe()\nobservableA.onNext(3)\nobservableB.onNext(4)\n\n\n\n\u51fa\u529b\nonNext: 1\nonNext: 2\nunsubscribe A\nunsubscribe B\n\n\ndoOnUnsubscribe\u304c\u631f\u3081\u308b\u306e\u3067\u5206\u304b\u308a\u3084\u3059\u3044\u3088\u3046\u306b\u8ffd\u52a0\u3057\u3066\u3044\u308b\u3002\nsubscriptionA\u3092\u7834\u68c4\u3059\u308b\u3068subscriptionB\u3082\u7834\u68c4\u3055\u308c\u308b\u306e\u3067RxSwift\u3068\u540c\u3058\u52d5\u4f5c\u306b\u306a\u3089\u306a\u3044\u3002\nsubscriptionA\u3068B\u306f\u305d\u308c\u305e\u308cSubscriber\u3092\u30e9\u30c3\u30d7\u3057\u305fSafeSubscriber\u306a\u308b\u3082\u306e\u306b\u306a\u3063\u3066\u3044\u308b\u304c\u3001\u8cfc\u8aad\u306f\u5171\u6709\u3057\u3066\u3044\u308b\u3089\u3057\u3044\uff08\u30e1\u30e2\u30ea\u3092\u8997\u304f\u3068SubscriptionList\u306a\u308b\u3082\u306e\u304c\u5171\u6709\u3055\u308c\u3066\u305f\uff09\u3002\nhttps://github.com/ReactiveX/RxJava/issues/1535\n\nObserver\u3092\u4f7f\u3063\u305f\u5834\u5408\nObserver\u3092\u4f7f\u3046\u3068RxSwift\u3068\u540c\u3058\u52d5\u4f5c\u306b\u306a\u308b\u3002\n\nKotlin\nval observer = object: Observer<Int> {\n    override fun onNext(t: Int?) {\n        println(\"onNext: $t\")\n    }\n    override fun onError(e: Throwable?) {\n        println(\"onError: $e\")\n    }\n    override fun onCompleted() {\n        println(\"onCompleted\")\n    }\n}\nval observableA = PublishSubject.create<Int>()\nval observableB = PublishSubject.create<Int>()\nval subscriptionA = observableA\n        .doOnUnsubscribe { println(\"unsubscribe A\") }\n        .subscribe(observer)\nval subscriptionB = observableB\n        .doOnUnsubscribe { println(\"unsubscribe B\") }\n        .subscribe(observer)\nobservableA.onNext(1)\nobservableB.onNext(2)\nsubscriptionA.unsubscribe()\nobservableA.onNext(3)\nobservableB.onNext(4)\n\n\n\n\u51fa\u529b\nonNext: 1\nonNext: 2\nunsubscribe A\nonNext: 4\n\n\nRxSwift\u3068\u540c\u69d8\u306e\u7d50\u679c\u306b\u306a\u308b\u3002\u3053\u308c\u306fsubscribe\u5185\u3067\u500b\u5225\u306bSubscriber\u304c\u4f5c\u3089\u308c\u308b\u305f\u3081\u3002\n\u5c11\u306a\u304f\u3068\u3082\u79fb\u690d\u3067\u306fSubscriber\u306f\u4f7f\u308f\u306a\u3044\u3088\u3046\u306b\u3059\u308b\u306e\u304c\u826f\u3044\u306e\u3060\u308d\u3046\u304b\u3002\n\nObservable#create\n\n\nRxSwift\n\nSwift\nObservable<Int>.create { observer in\n    var cnt = 0\n\n    let queue = dispatch_queue_create(\"com.example\", nil)\n    let timer = dispatch_source_create(DISPATCH_SOURCE_TYPE_TIMER, 0, 0, queue)\n    dispatch_source_set_timer(timer, DISPATCH_TIME_NOW, 1 * NSEC_PER_SEC, 1 * NSEC_PER_SEC)\n    dispatch_source_set_event_handler(timer) {\n        observer.onNext(cnt)\n        cnt += 1\n    }\n    dispatch_resume(timer)\n\n    return AnonymousDisposable {\n        dispatch_source_cancel(timer)\n    }\n}\n\n\nAnyObserver\u3092\u53d7\u3051\u53d6\u308a\u3001Disposable\u3092\u8fd4\u3059\u3002\nAnonymousDisposable\u3067\u30ad\u30e3\u30f3\u30bb\u30eb\u51e6\u7406\u3092\u66f8\u3044\u3066\u304a\u304f\u3053\u3068\u3067\u3001dispose\u5f8c\u306b\u30bf\u30a4\u30de\u30fc\u304c\u6b8b\u308a\u7d9a\u3051\u308b\u3088\u3046\u306a\u3053\u3068\u3092\u9632\u3050\u3002\n\nRxJava\n\nKotlin\nObservable.create<Int> { subscriber ->\n    var cnt = 0\n    val timer = timer(initialDelay = 1000, period = 1000) {\n        subscriber.onNext(cnt)\n        cnt += 1\n    }\n    subscriber.add(Subscriptions.create{\n        timer.cancel()\n    })\n}\n\n\nSubscriber\u3092\u53d7\u3051\u53d6\u308b\u3002\u3053\u3061\u3089\u306f\u30ad\u30e3\u30f3\u30bb\u30eb\u51e6\u7406\u3092Subscriber\u306badd\u3059\u308b\u3002\n\u5148\u8ff0\u306eSubscriber \u2286 Subscription\u306e\u69cb\u56f3\u304c\u3053\u3053\u306b\u5f71\u97ff\u3057\u3066\u3044\u308b\u3063\u307d\u3044\u3002\n\n\u304b\u3093\u305d\u3046\nRxJava\u306fSubscriber\u304c\u8cfc\u8aad\u3068\u7834\u68c4\u4e21\u65b9\u3092\u62c5\u3046\u306e\u306b\u5bfe\u3057\u3001RxSwift\u306fObserver\u3068Disposable\u3067\u660e\u78ba\u306b\u5206\u304b\u308c\u3066\u308b\u306e\u3067\u3053\u3061\u3089\u306e\u307b\u3046\u304c\u7dba\u9e97\u3060\u3068\u304a\u3082\u3063\u305f\u3002\n\n\u4f59\u8ac7\n\u3069\u3046\u3044\u3046\u308f\u3051\u304bRxJava\u306ev1.1.3\u4ee5\u524d\u306e\u3082\u306e\u3092\u4f7f\u3046\u3053\u3068\u306b\u306a\u3063\u3066\u3044\u305f\u306e\u3060\u304c\u3001\u4ee5\u4e0b\u306e\u30b3\u30fc\u30c9\u304c\u60f3\u5b9a\u3068\u7570\u306a\u308b\u52d5\u4f5c\u3092\u3057\u3066\u3044\u305f\u3002\n\nKotlin\nval observable = Observable.create<Long> { subscriber ->\n    val sec = getSec()\n    Observable.timer(sec, TimeUnit.SECONDS).subscribe(subscriber)\n}\n\nobservable\n        .doOnEach { println(\"on1: $it\") }\n        .doOnUnsubscribe { println(\"unsub1\") }\n        .flatMap {\n            observable\n                    .doOnEach { println(\"on2: $it\") }\n                    .doOnUnsubscribe { println(\"unsub2\") }\n        }.subscribe()\n\n\n\nv1.1.3\u4ee5\u524d\u3067\u306e\u51fa\u529b(\u304a\u304b\u3057\u3044)\non1: [rx.Notification@133c40ae OnNext 0]\non1: [rx.Notification@df4db0e OnCompleted]\nunsub1\nunsub2\n\n\n\nv1.1.4\u4ee5\u964d\u3067\u306e\u51fa\u529b(\u305f\u3060\u3057\u3044)\non1: [rx.Notification@133c40ae OnNext 0]\non1: [rx.Notification@df4db0e OnCompleted]\nunsub1\non2: [rx.Notification@133c40ae OnNext 0]\non2: [rx.Notification@df4db0e OnCompleted]\nunsub2\n\n\n\u30ea\u30ea\u30fc\u30b9\u30ce\u30fc\u30c8\u3092\u8aad\u3093\u3067\u3082\u4f55\u306b\u3088\u3063\u3066\u76f4\u3063\u305f\u306e\u304b\u5206\u304b\u3089\u306a\u304b\u3063\u305f\u304c\u3001reactivex.io\u3084RxJava\u306eJavadoc\u306b\u306fonNext,onError,onCompleted\u3092\u9069\u5207\u306b\u547c\u3079\u3068\u66f8\u3044\u3066\u3042\u308b\u306e\u3067\u3001\u305d\u3082\u305d\u3082\u4e2d\u3067subscribe\u3059\u308b\u3053\u3068\u81ea\u4f53\u304c\u9593\u9055\u3063\u3066\u3044\u308b\u306e\u304b\u3082\u3057\u308c\u306a\u3044\u3002\n\u3053\u306e\u5834\u5408getSec\u3067\u5f97\u3089\u308c\u308b\u5024\u304c\u4e00\u5b9a\u5024\u306a\u3089\u305d\u3082\u305d\u3082create\u306a\u3093\u304b\u4f7f\u308f\u306a\u3044\u3001subscribe\u6642\u306b\u5024\u3092\u6c7a\u5b9a\u3057\u305f\u3044\u306a\u3089defer\u3092\u4f7f\u3046\u3068\u3044\u3046\u306e\u304c\u3044\u3044\u3068\u601d\u3046\u3002\n\u79fb\u690d\u3084\u3063\u3066\u3066\u6c17\u306b\u306a\u3063\u305f\u306e\u3067\u30e1\u30e2\u3002\n\n# \u305d\u308c\u305e\u308c\u306e\u57fa\u672c`subscribe`\n## RxSwift\u306e`subscribe`\n\nhttps://github.com/ReactiveX/RxSwift/blob/2.5.0/RxSwift/Observable.swift#L28-L30\n`Observer`\u3092\u53d7\u3051\u53d6\u308a`Disposable`\u3092\u8fd4\u3059\u3002\n\n## RxJava\u306e`subscribe`\n\nhttps://github.com/ReactiveX/RxJava/blob/v1.1.6/src/main/java/rx/Observable.java#L8725-L8727\n`Subscriber`\u3092\u53d7\u3051\u53d6\u308a`Subscription`\u3092\u8fd4\u3059\u3002\n\n\u5185\u90e8\u3067\u306fstatic\u30e1\u30bd\u30c3\u30c9\u306e`subscribe`\u3092\u547c\u3073\u51fa\u3057\u3001`SafeSubscriber`\u306b\u30e9\u30c3\u30d7\u3057\u3064\u3064\u9032\u3093\u3067\n(1)https://github.com/ReactiveX/RxJava/blob/v1.1.6/src/main/java/rx/Observable.java#L8760\n\n\u3053\u3053\u3067`Subscription`\u304c\u8fd4\u3063\u3066\u3044\u308b\u3002\n(2)https://github.com/ReactiveX/RxJava/blob/v1.1.6/src/main/java/rx/plugins/RxJavaObservableExecutionHook.java#L90-L93\n\n(1)\u3067\u306f`Subscriber`\u3092\u6e21\u3057\u3066\u3044\u308b\u304c\u3001(2)\u3067\u306f\u305d\u308c\u3092`Subscription`\u3068\u3057\u3066\u53d7\u3051\u53d6\u3063\u3066\u3001\u305d\u306e\u307e\u307e\u8fd4\u3057\u3066\u3044\u308b\u3002\n\u3059\u306a\u308f\u3061[`Subscriber` \u2286 `Subscription`](https://github.com/ReactiveX/RxJava/blob/v1.1.6/src/main/java/rx/Subscriber.java#L33)\u3002\n\n\uff08[`Observer`\u3082\u3042\u308b\u304c\u5185\u90e8\u3067\u306f`Subscriber`\u3067\u306e\u547c\u3073\u51fa\u3057\u306b\u306a\u308b\u3002](https://github.com/ReactiveX/RxJava/blob/v1.1.6/src/main/java/rx/Observable.java#L8636-L8641)\uff09\n\n# \u6bd4\u8f03\n\n## RxSwift\n\n```swift:Swift\nlet observer = AnyObserver<Int> { ev in\n    switch ev {\n    case .Next(let i):  print(\"onNext: \\(i)\")\n    case .Error(let e): print(\"onError: \\(e)\")\n    case .Completed:    print(\"onCompleted\")\n    }\n}\n\nlet observableA = PublishSubject<Int>()\nlet observableB = PublishSubject<Int>()\n\nlet disposableA = observableA.subscribe(observer)\nlet disposableB = observableB.subscribe(observer)\n\nobservableA.onNext(1)\nobservableB.onNext(2)\ndisposableA.dispose()\nobservableA.onNext(3)\nobservableB.onNext(4)\n```\n\n```:\u51fa\u529b\nonNext: 1\nonNext: 2\nonNext: 4\n```\n\n\u3075\u305f\u3064\u306e\u8cfc\u8aad\u304c\u5225\u3005\u306b\u7ba1\u7406\u3055\u308c\u3066\u3044\u308b\u306e\u304c\u5206\u304b\u308b\u3002\n\n## RxJava\n\n```kotlin:Kotlin\nval subscriber = object: Subscriber<Int>() {\n    override fun onNext(t: Int?) {\n        println(\"onNext: $t\")\n    }\n    override fun onError(e: Throwable?) {\n        println(\"onError: $e\")\n    }\n    override fun onCompleted() {\n        println(\"onCompleted\")\n    }\n}\nval observableA = PublishSubject.create<Int>()\nval observableB = PublishSubject.create<Int>()\nval subscriptionA = observableA\n        .doOnUnsubscribe { println(\"unsubscribe A\") }\n        .subscribe(subscriber)\nval subscriptionB = observableB\n        .doOnUnsubscribe { println(\"unsubscribe B\") }\n        .subscribe(subscriber)\nobservableA.onNext(1)\nobservableB.onNext(2)\nsubscriptionA.unsubscribe()\nobservableA.onNext(3)\nobservableB.onNext(4)\n```\n\n```:\u51fa\u529b\nonNext: 1\nonNext: 2\nunsubscribe A\nunsubscribe B\n```\n\n`doOnUnsubscribe`\u304c\u631f\u3081\u308b\u306e\u3067\u5206\u304b\u308a\u3084\u3059\u3044\u3088\u3046\u306b\u8ffd\u52a0\u3057\u3066\u3044\u308b\u3002\n`subscriptionA`\u3092\u7834\u68c4\u3059\u308b\u3068`subscriptionB`\u3082\u7834\u68c4\u3055\u308c\u308b\u306e\u3067RxSwift\u3068\u540c\u3058\u52d5\u4f5c\u306b\u306a\u3089\u306a\u3044\u3002\n`subscriptionA`\u3068`B`\u306f\u305d\u308c\u305e\u308c`Subscriber`\u3092\u30e9\u30c3\u30d7\u3057\u305f`SafeSubscriber`\u306a\u308b\u3082\u306e\u306b\u306a\u3063\u3066\u3044\u308b\u304c\u3001\u8cfc\u8aad\u306f\u5171\u6709\u3057\u3066\u3044\u308b\u3089\u3057\u3044\uff08\u30e1\u30e2\u30ea\u3092\u8997\u304f\u3068`SubscriptionList`\u306a\u308b\u3082\u306e\u304c\u5171\u6709\u3055\u308c\u3066\u305f\uff09\u3002\n\nhttps://github.com/ReactiveX/RxJava/issues/1535\n\n## `Observer`\u3092\u4f7f\u3063\u305f\u5834\u5408\n\n`Observer`\u3092\u4f7f\u3046\u3068RxSwift\u3068\u540c\u3058\u52d5\u4f5c\u306b\u306a\u308b\u3002\n\n```kotlin:Kotlin\nval observer = object: Observer<Int> {\n    override fun onNext(t: Int?) {\n        println(\"onNext: $t\")\n    }\n    override fun onError(e: Throwable?) {\n        println(\"onError: $e\")\n    }\n    override fun onCompleted() {\n        println(\"onCompleted\")\n    }\n}\nval observableA = PublishSubject.create<Int>()\nval observableB = PublishSubject.create<Int>()\nval subscriptionA = observableA\n        .doOnUnsubscribe { println(\"unsubscribe A\") }\n        .subscribe(observer)\nval subscriptionB = observableB\n        .doOnUnsubscribe { println(\"unsubscribe B\") }\n        .subscribe(observer)\nobservableA.onNext(1)\nobservableB.onNext(2)\nsubscriptionA.unsubscribe()\nobservableA.onNext(3)\nobservableB.onNext(4)\n```\n\n```:\u51fa\u529b\nonNext: 1\nonNext: 2\nunsubscribe A\nonNext: 4\n```\n\nRxSwift\u3068\u540c\u69d8\u306e\u7d50\u679c\u306b\u306a\u308b\u3002\u3053\u308c\u306f`subscribe`\u5185\u3067\u500b\u5225\u306b`Subscriber`\u304c\u4f5c\u3089\u308c\u308b\u305f\u3081\u3002\n\u5c11\u306a\u304f\u3068\u3082\u79fb\u690d\u3067\u306f`Subscriber`\u306f\u4f7f\u308f\u306a\u3044\u3088\u3046\u306b\u3059\u308b\u306e\u304c\u826f\u3044\u306e\u3060\u308d\u3046\u304b\u3002\n\n# `Observable#create`<a name=\"Observable.create\"/>\n\n## RxSwift\n\n```swift:Swift\nObservable<Int>.create { observer in\n    var cnt = 0\n    \n    let queue = dispatch_queue_create(\"com.example\", nil)\n    let timer = dispatch_source_create(DISPATCH_SOURCE_TYPE_TIMER, 0, 0, queue)\n    dispatch_source_set_timer(timer, DISPATCH_TIME_NOW, 1 * NSEC_PER_SEC, 1 * NSEC_PER_SEC)\n    dispatch_source_set_event_handler(timer) {\n        observer.onNext(cnt)\n        cnt += 1\n    }\n    dispatch_resume(timer)\n    \n    return AnonymousDisposable {\n        dispatch_source_cancel(timer)\n    }\n}\n```\n\n`AnyObserver`\u3092\u53d7\u3051\u53d6\u308a\u3001`Disposable`\u3092\u8fd4\u3059\u3002\n`AnonymousDisposable`\u3067\u30ad\u30e3\u30f3\u30bb\u30eb\u51e6\u7406\u3092\u66f8\u3044\u3066\u304a\u304f\u3053\u3068\u3067\u3001`dispose`\u5f8c\u306b\u30bf\u30a4\u30de\u30fc\u304c\u6b8b\u308a\u7d9a\u3051\u308b\u3088\u3046\u306a\u3053\u3068\u3092\u9632\u3050\u3002\n\n## RxJava\n\n```kotlin:Kotlin\nObservable.create<Int> { subscriber ->\n    var cnt = 0\n    val timer = timer(initialDelay = 1000, period = 1000) {\n        subscriber.onNext(cnt)\n        cnt += 1\n    }\n    subscriber.add(Subscriptions.create{\n        timer.cancel()\n    })\n}\n```\n\n`Subscriber`\u3092\u53d7\u3051\u53d6\u308b\u3002\u3053\u3061\u3089\u306f\u30ad\u30e3\u30f3\u30bb\u30eb\u51e6\u7406\u3092`Subscriber`\u306b`add`\u3059\u308b\u3002\n\u5148\u8ff0\u306e`Subscriber` \u2286 `Subscription`\u306e\u69cb\u56f3\u304c\u3053\u3053\u306b\u5f71\u97ff\u3057\u3066\u3044\u308b\u3063\u307d\u3044\u3002\n\n# \u304b\u3093\u305d\u3046\n\nRxJava\u306f`Subscriber`\u304c\u8cfc\u8aad\u3068\u7834\u68c4\u4e21\u65b9\u3092\u62c5\u3046\u306e\u306b\u5bfe\u3057\u3001RxSwift\u306f`Observer`\u3068`Disposable`\u3067\u660e\u78ba\u306b\u5206\u304b\u308c\u3066\u308b\u306e\u3067\u3053\u3061\u3089\u306e\u307b\u3046\u304c\u7dba\u9e97\u3060\u3068\u304a\u3082\u3063\u305f\u3002\n\n# \u4f59\u8ac7\n\n\u3069\u3046\u3044\u3046\u308f\u3051\u304bRxJava\u306ev1.1.3\u4ee5\u524d\u306e\u3082\u306e\u3092\u4f7f\u3046\u3053\u3068\u306b\u306a\u3063\u3066\u3044\u305f\u306e\u3060\u304c\u3001\u4ee5\u4e0b\u306e\u30b3\u30fc\u30c9\u304c\u60f3\u5b9a\u3068\u7570\u306a\u308b\u52d5\u4f5c\u3092\u3057\u3066\u3044\u305f\u3002\n\n```kotlin:Kotlin\nval observable = Observable.create<Long> { subscriber ->\n    val sec = getSec()\n    Observable.timer(sec, TimeUnit.SECONDS).subscribe(subscriber)\n}\n\nobservable\n        .doOnEach { println(\"on1: $it\") }\n        .doOnUnsubscribe { println(\"unsub1\") }\n        .flatMap {\n            observable\n                    .doOnEach { println(\"on2: $it\") }\n                    .doOnUnsubscribe { println(\"unsub2\") }\n        }.subscribe()\n```\n\n```:v1.1.3\u4ee5\u524d\u3067\u306e\u51fa\u529b(\u304a\u304b\u3057\u3044)\non1: [rx.Notification@133c40ae OnNext 0]\non1: [rx.Notification@df4db0e OnCompleted]\nunsub1\nunsub2\n```\n\n```:v1.1.4\u4ee5\u964d\u3067\u306e\u51fa\u529b(\u305f\u3060\u3057\u3044)\non1: [rx.Notification@133c40ae OnNext 0]\non1: [rx.Notification@df4db0e OnCompleted]\nunsub1\non2: [rx.Notification@133c40ae OnNext 0]\non2: [rx.Notification@df4db0e OnCompleted]\nunsub2\n```\n\n\u30ea\u30ea\u30fc\u30b9\u30ce\u30fc\u30c8\u3092\u8aad\u3093\u3067\u3082\u4f55\u306b\u3088\u3063\u3066\u76f4\u3063\u305f\u306e\u304b\u5206\u304b\u3089\u306a\u304b\u3063\u305f\u304c\u3001[reactivex.io](http://reactivex.io/documentation/operators/create.html)\u3084[RxJava\u306eJavadoc](http://reactivex.io/RxJava/javadoc/rx/Observable.html#create(rx.Observable.OnSubscribe))\u306b\u306f`onNext`,`onError`,`onCompleted`\u3092\u9069\u5207\u306b\u547c\u3079\u3068\u66f8\u3044\u3066\u3042\u308b\u306e\u3067\u3001\u305d\u3082\u305d\u3082\u4e2d\u3067`subscribe`\u3059\u308b\u3053\u3068\u81ea\u4f53\u304c\u9593\u9055\u3063\u3066\u3044\u308b\u306e\u304b\u3082\u3057\u308c\u306a\u3044\u3002\n\n\u3053\u306e\u5834\u5408`getSec`\u3067\u5f97\u3089\u308c\u308b\u5024\u304c\u4e00\u5b9a\u5024\u306a\u3089\u305d\u3082\u305d\u3082`create`\u306a\u3093\u304b\u4f7f\u308f\u306a\u3044\u3001`subscribe`\u6642\u306b\u5024\u3092\u6c7a\u5b9a\u3057\u305f\u3044\u306a\u3089`defer`\u3092\u4f7f\u3046\u3068\u3044\u3046\u306e\u304c\u3044\u3044\u3068\u601d\u3046\u3002\n", "tags": ["Swift", "Kotlin", "RxSwift", "RxJava"]}