{"tags": ["\u3069\u3046\u66f8\u304f", "C", "C\u8a00\u8a9e", "yhpg"], "context": " More than 1 year has passed since last update.\u30aa\u30d5\u30e9\u30a4\u30f3\u30ea\u30a2\u30eb\u30bf\u30a4\u30e0\u3069\u3046\u66f8\u304f\nhttp://atnd.org/events/38770\n\u306e\u3001\u554f\u984c(\u30d3\u30c3\u30c8\u3042\u307f\u3060\u304f\u3058)\nhttp://nabetani.sakura.ne.jp/hena/ord11bitamida/\n\u306e\u3001C\u8a00\u8a9e(C99) \u306b\u3088\u308b\u5b9f\u88c5\n\u5f53\u65e5\u305d\u306e\u5834\u3067\u66f8\u3044\u305f\u3082\u306e\u3002\n\u3068\u306f\u3044\u3048\u3001\u79c1\u306f\u51fa\u984c\u8005\u306a\u306e\u3067\u516c\u5e73\u3058\u3083\u306a\u3044\u3002\n\u4ed6\u306e\u8a00\u8a9e\u306a\u3069\u306e\u89e3\u7b54\u4f8b\u306f\nhttp://qiita.com/items/93cde1a6b7561426a3ac\n\u304b\u3089\u8fbf\u308c\u307e\u3059\u3002\n\u3067\u3002\n\u3053\u3093\u306a\u611f\u3058\u3002\n\nsolver.c\n// compiled with \"clang -std=c99 -Wall solver.c\"\n\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <assert.h>\n\nstruct amida\n{\n  int m[5];\n};\n\nstruct amida build_amida( char const * src  )\n{\n  struct amida a;\n  for( int i=0 ; i<4 ; ++i ){\n    a.m[i+1] = strtol( src+i*3, 0, 16 );\n  }\n  a.m[0]=-1; // Sentinel\n  return a;\n}\n\nint previous_pos( int m, int i )\n{\n  _Bool left = m & ( 1<<(8-i));\n  _Bool right = m & ( 1<<(7-i));\n  if ( left && ! right ){\n    for( ; m & ( 1<<(8-i)) ; --i );\n    return i;\n  }\n  if ( right && ! left ){\n    for( ; m & ( 1<<(7-i)) ; ++i );\n    return i;\n  }\n  assert( right == left );\n  return i;\n}\n\nint trace_amida( const int * m, int i, int d )\n{\n  if ( *m<0 ){\n    return i;\n  }\n  return trace_amida( m-1, previous_pos( *m, i ), d-1 );\n}\n\n#define COUNT_OF( a )  (sizeof(a) / sizeof( *(a) ) )\n#define LAST_OF( a ) ( (a) + COUNT_OF(a)-1 )\n\nvoid solve( char const * src, char * r )\n{\n  struct amida a = build_amida( src );\n  for( int i=0 ; i<=8 ; ++i ){\n    r[i]=trace_amida( LAST_OF(a.m), i,3 )+'0';\n  }\n}\n\nvoid test( char const * src, char const * expected )\n{\n  char actual[10]={0};\n  solve( src, actual );\n  _Bool ok = 0==strcmp( actual, expected );\n  printf( \"%s %s -> %s ( %s )\\n\",\n    ok ? \"ok\" : \"***NG***\", \n    src, actual, expected );\n}\n\nint main()\n{\n/*0*/ test( \"d6-7b-e1-9e\", \"740631825\" );\n/*1*/ test( \"83-4c-20-10\", \"123805476\" );\n/*41*/ test( \"6f-dd-ff-ff\", \"230685147\" );\n  return 0;\n}\n\n\n\u3044\u3064\u3082\u3069\u304a\u308a\u3001\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u306e\u5927\u534a\u3092\u7701\u7565\u3002\n\u4eca\u56de\u306f\u3001\u4e0b\u304b\u3089\u9806\u306b\u30011\u3064\u305a\u3064\u51e6\u7406\u3001\u3068\u3044\u3046\u65b9\u91dd\u3067\u3002\n\u3042\u307f\u3060\u304f\u3058\u304c4\u6bb5\u3068\u6c7a\u307e\u3063\u3066\u3044\u308b\u306e\u3067\u9060\u616e\u306a\u304f\u518d\u5e30\u3092\u4f7f\u3063\u305f\u3002\n\u305b\u3063\u304b\u304fC\u8a00\u8a9e\u306a\u306e\u3067\u30dd\u30a4\u30f3\u30bf\u3092\u4f7f\u3063\u3066\u307f\u305f\u3089\u3001\u3084\u3081\u3069\u304d\u3092\u5224\u65ad\u3059\u308b\u6750\u6599\u3092\u5931\u3063\u305f\u306e\u3067\u756a\u5175\u3092\u7528\u610f\u3057\u305f\u3002\n\u51e6\u7406\u3092\u8ffd\u3044\u3084\u3059\u3044\u611f\u3058\u306b\u306a\u3063\u3066\u3044\u308b\u3064\u3082\u308a\u306a\u3093\u3060\u3051\u3069\u3001\u3069\u3046\u3060\u308d\u3046\u3002\n\u30aa\u30d5\u30e9\u30a4\u30f3\u30ea\u30a2\u30eb\u30bf\u30a4\u30e0\u3069\u3046\u66f8\u304f\nhttp://atnd.org/events/38770\n\u306e\u3001\u554f\u984c(\u30d3\u30c3\u30c8\u3042\u307f\u3060\u304f\u3058)\nhttp://nabetani.sakura.ne.jp/hena/ord11bitamida/\n\u306e\u3001C\u8a00\u8a9e(C99) \u306b\u3088\u308b\u5b9f\u88c5\n\n\u5f53\u65e5\u305d\u306e\u5834\u3067\u66f8\u3044\u305f\u3082\u306e\u3002\n\u3068\u306f\u3044\u3048\u3001\u79c1\u306f\u51fa\u984c\u8005\u306a\u306e\u3067\u516c\u5e73\u3058\u3083\u306a\u3044\u3002\n\n\u4ed6\u306e\u8a00\u8a9e\u306a\u3069\u306e\u89e3\u7b54\u4f8b\u306f\nhttp://qiita.com/items/93cde1a6b7561426a3ac\n\u304b\u3089\u8fbf\u308c\u307e\u3059\u3002\n\n\u3067\u3002\n\u3053\u3093\u306a\u611f\u3058\u3002\n\n```c:solver.c\n// compiled with \"clang -std=c99 -Wall solver.c\"\n\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n#include <assert.h>\n\nstruct amida\n{\n  int m[5];\n};\n\nstruct amida build_amida( char const * src  )\n{\n  struct amida a;\n  for( int i=0 ; i<4 ; ++i ){\n    a.m[i+1] = strtol( src+i*3, 0, 16 );\n  }\n  a.m[0]=-1; // Sentinel\n  return a;\n}\n\nint previous_pos( int m, int i )\n{\n  _Bool left = m & ( 1<<(8-i));\n  _Bool right = m & ( 1<<(7-i));\n  if ( left && ! right ){\n    for( ; m & ( 1<<(8-i)) ; --i );\n    return i;\n  }\n  if ( right && ! left ){\n    for( ; m & ( 1<<(7-i)) ; ++i );\n    return i;\n  }\n  assert( right == left );\n  return i;\n}\n\nint trace_amida( const int * m, int i, int d )\n{\n  if ( *m<0 ){\n    return i;\n  }\n  return trace_amida( m-1, previous_pos( *m, i ), d-1 );\n}\n\n#define COUNT_OF( a )  (sizeof(a) / sizeof( *(a) ) )\n#define LAST_OF( a ) ( (a) + COUNT_OF(a)-1 )\n\nvoid solve( char const * src, char * r )\n{\n  struct amida a = build_amida( src );\n  for( int i=0 ; i<=8 ; ++i ){\n    r[i]=trace_amida( LAST_OF(a.m), i,3 )+'0';\n  }\n}\n\nvoid test( char const * src, char const * expected )\n{\n  char actual[10]={0};\n  solve( src, actual );\n  _Bool ok = 0==strcmp( actual, expected );\n  printf( \"%s %s -> %s ( %s )\\n\",\n    ok ? \"ok\" : \"***NG***\", \n    src, actual, expected );\n}\n\nint main()\n{\n/*0*/ test( \"d6-7b-e1-9e\", \"740631825\" );\n/*1*/ test( \"83-4c-20-10\", \"123805476\" );\n/*41*/ test( \"6f-dd-ff-ff\", \"230685147\" );\n  return 0;\n}\n```\n\n\u3044\u3064\u3082\u3069\u304a\u308a\u3001\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u306e\u5927\u534a\u3092\u7701\u7565\u3002\n\n\u4eca\u56de\u306f\u3001\u4e0b\u304b\u3089\u9806\u306b\u30011\u3064\u305a\u3064\u51e6\u7406\u3001\u3068\u3044\u3046\u65b9\u91dd\u3067\u3002\n\n\u3042\u307f\u3060\u304f\u3058\u304c4\u6bb5\u3068\u6c7a\u307e\u3063\u3066\u3044\u308b\u306e\u3067\u9060\u616e\u306a\u304f\u518d\u5e30\u3092\u4f7f\u3063\u305f\u3002\n\u305b\u3063\u304b\u304fC\u8a00\u8a9e\u306a\u306e\u3067\u30dd\u30a4\u30f3\u30bf\u3092\u4f7f\u3063\u3066\u307f\u305f\u3089\u3001\u3084\u3081\u3069\u304d\u3092\u5224\u65ad\u3059\u308b\u6750\u6599\u3092\u5931\u3063\u305f\u306e\u3067\u756a\u5175\u3092\u7528\u610f\u3057\u305f\u3002\n\n\u51e6\u7406\u3092\u8ffd\u3044\u3084\u3059\u3044\u611f\u3058\u306b\u306a\u3063\u3066\u3044\u308b\u3064\u3082\u308a\u306a\u3093\u3060\u3051\u3069\u3001\u3069\u3046\u3060\u308d\u3046\u3002"}