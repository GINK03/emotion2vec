{"context": " More than 1 year has passed since last update.Here!\nimport std.conv : text;\nimport std.traits : Unqual;\n\n/**\n * Get a field name of class or struct.\n */\ntemplate getFieldName(Type, size_t i)\n{\n    static assert((is(Unqual!Type == class) || is(Unqual!Type == struct)), \"Type must be class or struct: type = \" ~ Type.stringof);\n    static assert(i < Type.tupleof.length, text(Type.stringof, \" has \", Type.tupleof.length, \" attributes: given index = \", i));\n\n    // 3 means () + .\n    enum getFieldName = Type.tupleof[i].stringof[3 + Type.stringof.length..$];\n}\n\nHere!\n\n```d\nimport std.conv : text;\nimport std.traits : Unqual;\n\n/**\n * Get a field name of class or struct.\n */\ntemplate getFieldName(Type, size_t i)\n{\n    static assert((is(Unqual!Type == class) || is(Unqual!Type == struct)), \"Type must be class or struct: type = \" ~ Type.stringof);\n    static assert(i < Type.tupleof.length, text(Type.stringof, \" has \", Type.tupleof.length, \" attributes: given index = \", i));\n\n    // 3 means () + .\n    enum getFieldName = Type.tupleof[i].stringof[3 + Type.stringof.length..$];\n}\n```", "tags": ["Dlanguage", "dlang"]}