{"context": " More than 1 year has passed since last update.\n\n\u6982\u8981\n\nReact\u3068Flux\u5b9f\u88c5\u306e\u4e00\u3064\u3067\u3042\u308bFluxxor\u3067\u30b3\u30f3\u30dd\u30fc\u30cd\u30f3\u30c8\u3092\u4f5c\u6210\u3059\u308b\u3002\n\u30b5\u30fc\u30d0\u30fc\u30b5\u30a4\u30c9\u306fRails\u3092\u4f7f\u7528\u3059\u308b\u3002\n\u30d3\u30e5\u30fc\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u4e0a\u306b\u3066JSON\u30c7\u30fc\u30bf\u3092\u6e21\u3057\u3066\u30ec\u30f3\u30c0\u30ea\u30f3\u30b0\u3059\u308b\u3002(HAML\u306e:coffee\u30d5\u30a3\u30eb\u30bf\u3092\u5229\u7528)\n\uff09\n\u5fc5\u8981\u306a\u6642\u306bAjax\u3067\u30c7\u30fc\u30bf\u4ea4\u4fe1\u3059\u308b\u30b7\u30f3\u30d7\u30eb\u306a\u30b3\u30f3\u30dd\u30fc\u30cd\u30f3\u30c8\u3002\n\u3042\u308b\u7a0b\u5ea6\u5f62\u304c\u6574\u3063\u305f\u306e\u3067\u4eca\u5f8c\u306e\u305f\u3081\u306b\u30e1\u30e2\u3002\n\n\n\n\n\n\u74b0\u5883\nruby 2.2.1\nRails 4.2.1\nreact-rails\nfluxxor\n\n\u30b3\u30f3\u30c8\u30ed\u30fc\u30e9\uff08#index\uff09\u3067JSON\u30c7\u30fc\u30bf\u3092\u6e96\u5099\u3057\u3001\u30d3\u30e5\u30fc\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u306b\u6e21\u3059\u76ee\u7684\u3067\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u5909\u6570\u306b\u683c\u7d0d\n\ntodos_controller.rb\nclass TodosController < ApplicationController\n  #...\n\n  # Initializes the todo app with initial JSON data.\n  def index\n    @todos = current_user.todos.select(:id, :content, :completed, :created_at).to_json\n  end\n\n  #...\n\n\n\nReact\nR = React.DOM\n\n@Components.TodoApp = React.createClass\n  mixins: [ Fluxxor.FluxMixin(React),\n            Fluxxor.StoreWatchMixin(\"TodoStore\") ]\n\n  getInitialState: ->\n    newTodoText: \"\"\n    filterMode: \"ALL\"\n\n  getStateFromFlux: ->\n    flux = @getFlux()\n    flux.store('TodoStore').getState()\n\n  handleChangeAddTodoText: (e) ->\n    @setState(newTodoText: e.target.value)\n\n  handleSubmitForm: (e) ->\n    e.preventDefault()\n    if @state.newTodoText.trim()\n      @getFlux().actions.addTodo(@state.newTodoText)\n      @setState(newTodoText: \"\")\n\n  # Clears one completed item that is first found.\n  handleClearCompleted: (e) ->\n    e.preventDefault()\n    todos = @getStateFromFlux().todos\n    for todo in todos when todo.completed\n      if confirm(\"Clear #{todo.content}?\")\n        @getFlux().actions.deleteTodo(todo)\n        break\n\n  handleSelectFilter: (e) ->\n    selectedFilter = e.target.name\n    @setState filterMode: selectedFilter\n\n  todoFilter: (todo) ->\n    switch @state.filterMode\n      when \"ALL\" then true\n      when \"ACTIVE\" then not todo.completed\n      when \"DONE\" then todo.completed\n\n  addForm: ->\n    R.form\n      className: \"form-horizontal\"\n      id:       \"add_form\"\n      onSubmit: @handleSubmitForm\n      R.div\n        className: \"form-group\"\n        R.div\n          className: \"input-group\"\n          R.input\n            className:   \"form-control\"\n            type:        \"text\"\n            placeholder: \"New Todo\"\n            ref:         'input'\n            value:       @state.newTodoText\n            onChange:    @handleChangeAddTodoText\n          R.div\n            className: \"input-group-btn\"\n            R.button\n              className: \"btn btn-primary\"\n              type:      \"submit\"\n              \"Add\"\n\n  filterButtons: ->\n    R.ul\n      className: \"nav nav-tabs\"\n      id: \"filter_buttons\"\n      R.li\n        className: if @state.filterMode is \"ALL\" then \"active\" else \"\"\n        R.a\n          onClick: @handleSelectFilter\n          name: \"ALL\"\n          \"All\"\n      R.li\n        className: if @state.filterMode is \"ACTIVE\" then \"active\" else \"\"\n        R.a\n          onClick: @handleSelectFilter\n          name: \"ACTIVE\"\n          \"Active\"\n      R.li\n        className: if @state.filterMode is \"DONE\" then \"active\" else \"\"\n        R.a\n          onClick: @handleSelectFilter\n          name: \"DONE\"\n          \"Done\"\n      R.li\n        className: \"pull-right\"\n        R.a\n          @clearButton()\n\n  clearButton: ->\n    R.button\n      onClick:   @handleClearCompleted\n      className: \"pull-right\"\n      \"Clear completed\"\n\n  createTodoItems: ->\n    todos = @state.todos\n    R.div\n      id: \"todo_items_wrapper\"\n      for todo in todos when @todoFilter(todo)\n        React.createElement TodoItem,\n          key:  todo.id\n          todo: todo\n\n  render: ->\n    R.div\n      id: \"todolist_wrapper\"\n      @addForm()\n      @filterButtons()\n      @createTodoItems()\n\nR = React.DOM\n\n@TodoItem = React.createClass\n  mixins: [Fluxxor.FluxMixin(React)]\n\n  getInitialState: ->\n    value:      @props.todo.content\n    completed:  @props.todo.completed\n    changed:    false\n    updated:    false\n\n  handleToggleCompleted: (e) ->\n    e.preventDefault()\n    @getFlux().actions.toggleTodo(@props.todo, not @state.completed)\n    @setState(completed: not @state.completed)\n\n  handleChange: (e) ->\n    input = e.target.value\n    newState = if input is @props.todo.content\n    then { value: input, changed: false, updated: false }\n    else { value: input, changed: true, updated: false }\n    @setState newState\n\n  handleUpdate: (e) ->\n    e.preventDefault()\n    input = React.findDOMNode(@refs.input).value\n    @getFlux().actions.updateTodo(@props.todo, input)\n    @setState(changed: false, updated: true)\n\n  handleCancelChange: (e) ->\n    e.preventDefault()\n    originalContent = @props.todo.content\n    @setState(value: originalContent, changed: false)\n\n  checkBox: ->\n    R.div\n      className: \"input-group-addon\"\n      R.i\n        className: if @state.completed then \"fa fa-check-square-o\" else \"fa fa-square-o\"\n        onClick: @handleToggleCompleted\n\n  field: ->\n    R.input\n      className: \"form-control\"\n      type:      \"text\"\n      style:     { fontSize: \"1.5em\" }\n      ref:       'input'\n      value:     @state.value\n      onChange:  @handleChange\n\n  fieldColor: ->\n    if @state.changed\n      'has-warning'\n    else if @state.updated\n      'has-success'\n\n  updateButton: ->\n    R.div\n      className: \"input-group-addon\"\n      R.div null,\n        R.a\n          onClick: @handleUpdate\n          \"Update\"\n        R.div\n          \"\\u0020|\\u0020\"\n        R.a\n          onClick: @handleCancelChange\n          \"Cancel\"\n\n  render: ->\n    R.form\n      className: \"form-horizontal\"\n      R.div\n        className: \"form-group #{@fieldColor()}\"\n        R.div\n          className: \"input-group\"\n          @checkBox()\n          @field()\n          @updateButton() if @state.changed\n\n\nFluxxor\nStore\u304c\u30c7\u30fc\u30bf\u3092\u53d7\u3051\u53d6\u308c\u308b\u3088\u3046\u306binitialize\u30e1\u30bd\u30c3\u30c9\u3092\u30bb\u30c3\u30c8\u30a2\u30c3\u30d7\n@Components.TodoStore = Fluxxor.createStore\n\n  initialize: (todos=[]) ->\n    @todos = todos\n  ...\n\n# ==> Constants\n\nTodoConstants =\n  ADD_TODO:    'ADD_TODO'\n  TOGGLE_TODO: 'TOGGLE_TODO'\n  UPDATE_TODO: 'UPDATE_TODO'\n  DELETE_TODO: 'DELETE_TODO'\n@Components.TodoConstants = TodoConstants\n\n\n# ==> Store\n\n@Components.TodoStore = Fluxxor.createStore\n\n  initialize: (todos=[]) ->\n    @todos = todos\n\n    @bindActions(TodoConstants.ADD_TODO,    @onAddTodo,\n                 TodoConstants.TOGGLE_TODO, @onToggleTodo,\n                 TodoConstants.UPDATE_TODO, @onUpdateTodo,\n                 TodoConstants.DELETE_TODO, @onDeleteTodo )\n\n  getState: ->\n    todos: @todos\n\n  onAddTodo: (payload) ->\n    # Update UI\n    new_todo = payload.new_todo\n    @todos.unshift(new_todo)\n    @emit('change')\n\n  onToggleTodo: (payload) ->\n    # Update UI\n    index = @todos.indexOf(payload.todo)\n    @todos[index].completed = payload.completed\n    @emit('change')\n\n  onUpdateTodo: (payload) ->\n    # Update UI\n    index = @todos.indexOf(payload.todo)\n    @todos[index].content = payload.new_content\n    @emit('change')\n\n  onDeleteTodo: (payload) ->\n    # Update UI\n    index = @todos.indexOf(payload.todo)\n    @todos.splice(index, 1)  # Deletes the todo.\n    @emit('change')\n\n\n# ==> Actions\n\n@Components.TodoActions =\n\n  # Creates a new todo to database.\n  # Waits for data because we need a new id generated by database.\n  # Dispatches ADD_TODO on successful Ajax.\n  addTodo:    (content) ->\n    return if not isOnline()\n    $.ajax\n      method: \"POST\"\n      url:    \"/todos/\"\n      data:   todo:\n                content: content\n    .done (data, textStatus, XHR) =>\n      new_todo =\n        id:        data.id\n        content:   data.content\n        completed: data.completed\n      @dispatch(TodoConstants.ADD_TODO, new_todo: new_todo)\n      $.growl.notice title: \"Todo added\", message: data.content\n    .fail (XHR, textStatus, errorThrown) =>\n      if error_messages = JSON.parse(XHR.responseText)\n        for k, v of error_messages\n          $.growl.error title: \"#{ capitalize(k) } #{v}\", message: \"\"\n      else\n        $.growl.error title: \"Error adding todo\", message: \"#{errorThrown}\"\n      console.error(\"#{textStatus}: #{errorThrown}\")\n\n  # Saves a new completion status to database.\n  toggleTodo: (todo, completed) ->\n    return if not isOnline()\n    @dispatch(TodoConstants.TOGGLE_TODO, todo: todo, completed: completed)\n    $.ajax\n      method: \"PATCH\"\n      url:    \"/todos/\" + todo.id\n      data:   todo:\n                completed: completed\n    .done (data, textStatus, XHR) =>\n      title = if data.completed then \"Completed\" else \"Not completed\"\n      $.growl.notice title: title, message: data.content\n    .fail (XHR, textStatus, errorThrown) =>\n      if error_messages = JSON.parse(XHR.responseText)\n        for k, v of error_messages\n          $.growl.error title: \"#{ capitalize(k) } #{v}\", message: \"\"\n      else\n        $.growl.error title: \"Error toggling todo\", message: \"#{errorThrown}\"\n      console.error(\"#{textStatus}: #{errorThrown}\")\n\n  # Saves a new content to database.\n  updateTodo: (todo, new_content) ->\n    return if not isOnline()\n    @dispatch(TodoConstants.UPDATE_TODO, todo: todo, new_content: new_content)\n    $.ajax\n      method: \"PATCH\"\n      url:    \"/todos/\" + todo.id\n      data:   todo:\n                content: new_content\n    .done (data, textStatus, XHR) =>\n      $.growl.notice title: \"Todo updated\", message: \"\"\n    .fail (XHR, textStatus, errorThrown) =>\n      if error_messages = JSON.parse(XHR.responseText)\n        for k, v of error_messages\n          $.growl.error title: \"#{ capitalize(k) } #{v}\", message: \"\"\n      else\n        $.growl.error title: \"Error updating todo\", message: \"#{errorThrown}\"\n      console.error(\"#{textStatus}: #{errorThrown}\")\n\n  # Deletes a todo to database.\n  deleteTodo: (todo) ->\n    return if not isOnline()\n    @dispatch(TodoConstants.DELETE_TODO, todo: todo)\n    $.ajax\n      method: \"DELETE\"\n      url:    \"/todos/\" + todo.id\n    .done (data, textStatus, XHR) =>\n      $.growl.notice title: \"Deleted\", message: data.content\n    .fail (XHR, textStatus, errorThrown) =>\n      if error_messages = JSON.parse(XHR.responseText)\n        for k, v of error_messages\n          $.growl.error title: \"#{ capitalize(k) } #{v}\", message: \"\"\n      else\n        $.growl.error title: \"Error deleting todo\", message: \"#{errorThrown}\"\n      console.error(\"#{textStatus}: #{errorThrown}\")\n\n\n# ==> Utils\n\nisOnline = ->\n  return true if navigator.onLine\n  $.growl.error(title: \"Offline\", message: \"\")\n  false\n\ncapitalize = (string) ->\n  string.charAt(0).toUpperCase() + string.slice(1)\n\n\nReact\u30b3\u30f3\u30dd\u30fc\u30cd\u30f3\u30c8\u3068Flux\u3092\u53d7\u3051\u53d6\u3063\u305f\u30c7\u30fc\u30bf\u3092\u7528\u3044\u521d\u671f\u5316\u3059\u308b\u30e1\u30bd\u30c3\u30c9\u3092\u6e96\u5099\nclass @Components.initTodoApp\n  constructor: (mountNode, options={}) ->\n\n    todoData =  if options.hasOwnProperty(\"todos\") then options[\"todos\"] else []\n\n    # Instantiating the stores.\n    stores =\n      TodoStore: new Components.TodoStore(todoData)\n\n    # Actions\n    actions = Components.TodoActions\n\n    # Instantiating the flux with the stores and actions.\n    flux = new Fluxxor.Flux(stores, actions)\n\n    # Logging for the \"dispatch\" event.\n    flux.on 'dispatch', (type, payload) ->\n      console.log \"[Dispatch]\", type, payload if console?.log?\n\n    # Rendering the whole component to the mount node.\n    app = React.createElement Components.TodoApp, {flux: flux}\n    React.render(app, document.getElementById(mountNode))\n\n\nHTML\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u4e0a\u3067\u521d\u671f\u5316\u30e1\u30bd\u30c3\u30c9\u306b\u30c7\u30fc\u30bf\u3092\u6e21\u3057\u3001\u547c\u3076\n\n_todo_component.html.haml\n%h1 Todo List\n\n/ MountNode\n#todo_component\n\n:coffee\n  jQuery ->\n    new Components.initTodoApp(\"todo_component\", todos: #{ Todo.getInitialData })\n\n\n\n\u8cc7\u6599\n\nhttp://aspiringwebdev.com/react-js-and-rails-real-world-results/\nhttp://aspiringwebdev.com/react-js-and-flux-in-rails-a-complete-example/\nhttps://github.com/mnishiguchi/TodoListComponent\n\n## \u6982\u8981\n- React\u3068Flux\u5b9f\u88c5\u306e\u4e00\u3064\u3067\u3042\u308b[Fluxxor](http://fluxxor.com/)\u3067\u30b3\u30f3\u30dd\u30fc\u30cd\u30f3\u30c8\u3092\u4f5c\u6210\u3059\u308b\u3002\n- \u30b5\u30fc\u30d0\u30fc\u30b5\u30a4\u30c9\u306fRails\u3092\u4f7f\u7528\u3059\u308b\u3002\n- \u30d3\u30e5\u30fc\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u4e0a\u306b\u3066JSON\u30c7\u30fc\u30bf\u3092\u6e21\u3057\u3066\u30ec\u30f3\u30c0\u30ea\u30f3\u30b0\u3059\u308b\u3002(HAML\u306e:coffee\u30d5\u30a3\u30eb\u30bf\u3092\u5229\u7528)\n\uff09\n- \u5fc5\u8981\u306a\u6642\u306bAjax\u3067\u30c7\u30fc\u30bf\u4ea4\u4fe1\u3059\u308b\u30b7\u30f3\u30d7\u30eb\u306a\u30b3\u30f3\u30dd\u30fc\u30cd\u30f3\u30c8\u3002\n- \u3042\u308b\u7a0b\u5ea6\u5f62\u304c\u6574\u3063\u305f\u306e\u3067\u4eca\u5f8c\u306e\u305f\u3081\u306b\u30e1\u30e2\u3002\n\n[![Screenshot.png](https://qiita-image-store.s3.amazonaws.com/0/82804/47bc7061-9f65-ab2a-0cef-763fa225e35e.png)](https://github.com/mnishiguchi/TodoListComponent)\n----\n\n## \u74b0\u5883\nruby 2.2.1\nRails 4.2.1\nreact-rails\nfluxxor\n\n#### \u30b3\u30f3\u30c8\u30ed\u30fc\u30e9\uff08#index\uff09\u3067JSON\u30c7\u30fc\u30bf\u3092\u6e96\u5099\u3057\u3001\u30d3\u30e5\u30fc\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u306b\u6e21\u3059\u76ee\u7684\u3067\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u5909\u6570\u306b\u683c\u7d0d\n\n```rb:todos_controller.rb\nclass TodosController < ApplicationController\n  #...\n\n  # Initializes the todo app with initial JSON data.\n  def index\n    @todos = current_user.todos.select(:id, :content, :completed, :created_at).to_json\n  end\n\n  #...\n```\n\n#### React\n\n```coffeescript\nR = React.DOM\n\n@Components.TodoApp = React.createClass\n  mixins: [ Fluxxor.FluxMixin(React),\n            Fluxxor.StoreWatchMixin(\"TodoStore\") ]\n\n  getInitialState: ->\n    newTodoText: \"\"\n    filterMode: \"ALL\"\n\n  getStateFromFlux: ->\n    flux = @getFlux()\n    flux.store('TodoStore').getState()\n\n  handleChangeAddTodoText: (e) ->\n    @setState(newTodoText: e.target.value)\n\n  handleSubmitForm: (e) ->\n    e.preventDefault()\n    if @state.newTodoText.trim()\n      @getFlux().actions.addTodo(@state.newTodoText)\n      @setState(newTodoText: \"\")\n\n  # Clears one completed item that is first found.\n  handleClearCompleted: (e) ->\n    e.preventDefault()\n    todos = @getStateFromFlux().todos\n    for todo in todos when todo.completed\n      if confirm(\"Clear #{todo.content}?\")\n        @getFlux().actions.deleteTodo(todo)\n        break\n\n  handleSelectFilter: (e) ->\n    selectedFilter = e.target.name\n    @setState filterMode: selectedFilter\n\n  todoFilter: (todo) ->\n    switch @state.filterMode\n      when \"ALL\" then true\n      when \"ACTIVE\" then not todo.completed\n      when \"DONE\" then todo.completed\n\n  addForm: ->\n    R.form\n      className: \"form-horizontal\"\n      id:       \"add_form\"\n      onSubmit: @handleSubmitForm\n      R.div\n        className: \"form-group\"\n        R.div\n          className: \"input-group\"\n          R.input\n            className:   \"form-control\"\n            type:        \"text\"\n            placeholder: \"New Todo\"\n            ref:         'input'\n            value:       @state.newTodoText\n            onChange:    @handleChangeAddTodoText\n          R.div\n            className: \"input-group-btn\"\n            R.button\n              className: \"btn btn-primary\"\n              type:      \"submit\"\n              \"Add\"\n\n  filterButtons: ->\n    R.ul\n      className: \"nav nav-tabs\"\n      id: \"filter_buttons\"\n      R.li\n        className: if @state.filterMode is \"ALL\" then \"active\" else \"\"\n        R.a\n          onClick: @handleSelectFilter\n          name: \"ALL\"\n          \"All\"\n      R.li\n        className: if @state.filterMode is \"ACTIVE\" then \"active\" else \"\"\n        R.a\n          onClick: @handleSelectFilter\n          name: \"ACTIVE\"\n          \"Active\"\n      R.li\n        className: if @state.filterMode is \"DONE\" then \"active\" else \"\"\n        R.a\n          onClick: @handleSelectFilter\n          name: \"DONE\"\n          \"Done\"\n      R.li\n        className: \"pull-right\"\n        R.a\n          @clearButton()\n\n  clearButton: ->\n    R.button\n      onClick:   @handleClearCompleted\n      className: \"pull-right\"\n      \"Clear completed\"\n\n  createTodoItems: ->\n    todos = @state.todos\n    R.div\n      id: \"todo_items_wrapper\"\n      for todo in todos when @todoFilter(todo)\n        React.createElement TodoItem,\n          key:  todo.id\n          todo: todo\n\n  render: ->\n    R.div\n      id: \"todolist_wrapper\"\n      @addForm()\n      @filterButtons()\n      @createTodoItems()\n```\n\n```coffeescript\nR = React.DOM\n\n@TodoItem = React.createClass\n  mixins: [Fluxxor.FluxMixin(React)]\n\n  getInitialState: ->\n    value:      @props.todo.content\n    completed:  @props.todo.completed\n    changed:    false\n    updated:    false\n\n  handleToggleCompleted: (e) ->\n    e.preventDefault()\n    @getFlux().actions.toggleTodo(@props.todo, not @state.completed)\n    @setState(completed: not @state.completed)\n\n  handleChange: (e) ->\n    input = e.target.value\n    newState = if input is @props.todo.content\n    then { value: input, changed: false, updated: false }\n    else { value: input, changed: true, updated: false }\n    @setState newState\n\n  handleUpdate: (e) ->\n    e.preventDefault()\n    input = React.findDOMNode(@refs.input).value\n    @getFlux().actions.updateTodo(@props.todo, input)\n    @setState(changed: false, updated: true)\n\n  handleCancelChange: (e) ->\n    e.preventDefault()\n    originalContent = @props.todo.content\n    @setState(value: originalContent, changed: false)\n\n  checkBox: ->\n    R.div\n      className: \"input-group-addon\"\n      R.i\n        className: if @state.completed then \"fa fa-check-square-o\" else \"fa fa-square-o\"\n        onClick: @handleToggleCompleted\n\n  field: ->\n    R.input\n      className: \"form-control\"\n      type:      \"text\"\n      style:     { fontSize: \"1.5em\" }\n      ref:       'input'\n      value:     @state.value\n      onChange:  @handleChange\n\n  fieldColor: ->\n    if @state.changed\n      'has-warning'\n    else if @state.updated\n      'has-success'\n\n  updateButton: ->\n    R.div\n      className: \"input-group-addon\"\n      R.div null,\n        R.a\n          onClick: @handleUpdate\n          \"Update\"\n        R.div\n          \"\\u0020|\\u0020\"\n        R.a\n          onClick: @handleCancelChange\n          \"Cancel\"\n\n  render: ->\n    R.form\n      className: \"form-horizontal\"\n      R.div\n        className: \"form-group #{@fieldColor()}\"\n        R.div\n          className: \"input-group\"\n          @checkBox()\n          @field()\n          @updateButton() if @state.changed\n```\n\n#### Fluxxor\n\nStore\u304c\u30c7\u30fc\u30bf\u3092\u53d7\u3051\u53d6\u308c\u308b\u3088\u3046\u306binitialize\u30e1\u30bd\u30c3\u30c9\u3092\u30bb\u30c3\u30c8\u30a2\u30c3\u30d7\n\n```coffeescript\n@Components.TodoStore = Fluxxor.createStore\n\n  initialize: (todos=[]) ->\n    @todos = todos\n  ...\n```\n\n```coffeescript\n# ==> Constants\n\nTodoConstants =\n  ADD_TODO:    'ADD_TODO'\n  TOGGLE_TODO: 'TOGGLE_TODO'\n  UPDATE_TODO: 'UPDATE_TODO'\n  DELETE_TODO: 'DELETE_TODO'\n@Components.TodoConstants = TodoConstants\n\n\n# ==> Store\n\n@Components.TodoStore = Fluxxor.createStore\n\n  initialize: (todos=[]) ->\n    @todos = todos\n\n    @bindActions(TodoConstants.ADD_TODO,    @onAddTodo,\n                 TodoConstants.TOGGLE_TODO, @onToggleTodo,\n                 TodoConstants.UPDATE_TODO, @onUpdateTodo,\n                 TodoConstants.DELETE_TODO, @onDeleteTodo )\n\n  getState: ->\n    todos: @todos\n\n  onAddTodo: (payload) ->\n    # Update UI\n    new_todo = payload.new_todo\n    @todos.unshift(new_todo)\n    @emit('change')\n\n  onToggleTodo: (payload) ->\n    # Update UI\n    index = @todos.indexOf(payload.todo)\n    @todos[index].completed = payload.completed\n    @emit('change')\n\n  onUpdateTodo: (payload) ->\n    # Update UI\n    index = @todos.indexOf(payload.todo)\n    @todos[index].content = payload.new_content\n    @emit('change')\n\n  onDeleteTodo: (payload) ->\n    # Update UI\n    index = @todos.indexOf(payload.todo)\n    @todos.splice(index, 1)  # Deletes the todo.\n    @emit('change')\n\n\n# ==> Actions\n\n@Components.TodoActions =\n\n  # Creates a new todo to database.\n  # Waits for data because we need a new id generated by database.\n  # Dispatches ADD_TODO on successful Ajax.\n  addTodo:    (content) ->\n    return if not isOnline()\n    $.ajax\n      method: \"POST\"\n      url:    \"/todos/\"\n      data:   todo:\n                content: content\n    .done (data, textStatus, XHR) =>\n      new_todo =\n        id:        data.id\n        content:   data.content\n        completed: data.completed\n      @dispatch(TodoConstants.ADD_TODO, new_todo: new_todo)\n      $.growl.notice title: \"Todo added\", message: data.content\n    .fail (XHR, textStatus, errorThrown) =>\n      if error_messages = JSON.parse(XHR.responseText)\n        for k, v of error_messages\n          $.growl.error title: \"#{ capitalize(k) } #{v}\", message: \"\"\n      else\n        $.growl.error title: \"Error adding todo\", message: \"#{errorThrown}\"\n      console.error(\"#{textStatus}: #{errorThrown}\")\n\n  # Saves a new completion status to database.\n  toggleTodo: (todo, completed) ->\n    return if not isOnline()\n    @dispatch(TodoConstants.TOGGLE_TODO, todo: todo, completed: completed)\n    $.ajax\n      method: \"PATCH\"\n      url:    \"/todos/\" + todo.id\n      data:   todo:\n                completed: completed\n    .done (data, textStatus, XHR) =>\n      title = if data.completed then \"Completed\" else \"Not completed\"\n      $.growl.notice title: title, message: data.content\n    .fail (XHR, textStatus, errorThrown) =>\n      if error_messages = JSON.parse(XHR.responseText)\n        for k, v of error_messages\n          $.growl.error title: \"#{ capitalize(k) } #{v}\", message: \"\"\n      else\n        $.growl.error title: \"Error toggling todo\", message: \"#{errorThrown}\"\n      console.error(\"#{textStatus}: #{errorThrown}\")\n\n  # Saves a new content to database.\n  updateTodo: (todo, new_content) ->\n    return if not isOnline()\n    @dispatch(TodoConstants.UPDATE_TODO, todo: todo, new_content: new_content)\n    $.ajax\n      method: \"PATCH\"\n      url:    \"/todos/\" + todo.id\n      data:   todo:\n                content: new_content\n    .done (data, textStatus, XHR) =>\n      $.growl.notice title: \"Todo updated\", message: \"\"\n    .fail (XHR, textStatus, errorThrown) =>\n      if error_messages = JSON.parse(XHR.responseText)\n        for k, v of error_messages\n          $.growl.error title: \"#{ capitalize(k) } #{v}\", message: \"\"\n      else\n        $.growl.error title: \"Error updating todo\", message: \"#{errorThrown}\"\n      console.error(\"#{textStatus}: #{errorThrown}\")\n\n  # Deletes a todo to database.\n  deleteTodo: (todo) ->\n    return if not isOnline()\n    @dispatch(TodoConstants.DELETE_TODO, todo: todo)\n    $.ajax\n      method: \"DELETE\"\n      url:    \"/todos/\" + todo.id\n    .done (data, textStatus, XHR) =>\n      $.growl.notice title: \"Deleted\", message: data.content\n    .fail (XHR, textStatus, errorThrown) =>\n      if error_messages = JSON.parse(XHR.responseText)\n        for k, v of error_messages\n          $.growl.error title: \"#{ capitalize(k) } #{v}\", message: \"\"\n      else\n        $.growl.error title: \"Error deleting todo\", message: \"#{errorThrown}\"\n      console.error(\"#{textStatus}: #{errorThrown}\")\n\n\n# ==> Utils\n\nisOnline = ->\n  return true if navigator.onLine\n  $.growl.error(title: \"Offline\", message: \"\")\n  false\n\ncapitalize = (string) ->\n  string.charAt(0).toUpperCase() + string.slice(1)\n```\n\n#### React\u30b3\u30f3\u30dd\u30fc\u30cd\u30f3\u30c8\u3068Flux\u3092\u53d7\u3051\u53d6\u3063\u305f\u30c7\u30fc\u30bf\u3092\u7528\u3044\u521d\u671f\u5316\u3059\u308b\u30e1\u30bd\u30c3\u30c9\u3092\u6e96\u5099\n\n```coffeescript\nclass @Components.initTodoApp\n  constructor: (mountNode, options={}) ->\n\n    todoData =  if options.hasOwnProperty(\"todos\") then options[\"todos\"] else []\n\n    # Instantiating the stores.\n    stores =\n      TodoStore: new Components.TodoStore(todoData)\n\n    # Actions\n    actions = Components.TodoActions\n\n    # Instantiating the flux with the stores and actions.\n    flux = new Fluxxor.Flux(stores, actions)\n\n    # Logging for the \"dispatch\" event.\n    flux.on 'dispatch', (type, payload) ->\n      console.log \"[Dispatch]\", type, payload if console?.log?\n\n    # Rendering the whole component to the mount node.\n    app = React.createElement Components.TodoApp, {flux: flux}\n    React.render(app, document.getElementById(mountNode))\n```\n\n#### HTML\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u4e0a\u3067\u521d\u671f\u5316\u30e1\u30bd\u30c3\u30c9\u306b\u30c7\u30fc\u30bf\u3092\u6e21\u3057\u3001\u547c\u3076\n\n```haml:_todo_component.html.haml\n%h1 Todo List\n\n/ MountNode\n#todo_component\n\n:coffee\n  jQuery ->\n    new Components.initTodoApp(\"todo_component\", todos: #{ Todo.getInitialData })\n```\n\n# \u8cc7\u6599\n\n- http://aspiringwebdev.com/react-js-and-rails-real-world-results/\n- http://aspiringwebdev.com/react-js-and-flux-in-rails-a-complete-example/\n- https://github.com/mnishiguchi/TodoListComponent\n", "tags": ["Rails", "flux", "fluxxor", "reactjs", "CoffeeScript"]}