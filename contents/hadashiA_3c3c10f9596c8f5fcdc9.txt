{"context": " More than 1 year has passed since last update.js\u3063\u307d\u3044\u30a4\u30d9\u30f3\u30c8\u30cf\u30f3\u30c9\u30e9\u304c\u3051\u3063\u3053\u3046\u77ed\u3044\u30b3\u30fc\u30c9\u3067\u5b9f\u73fe\u3067\u304d\u308b\u3002\n#include <iostream>\n#include <functional>\n#include <string>\n#include <map>\n#include <vector>\n\nusing namespace std;\n\nstruct Event {\n    Event(const string& name, int data)\n        : name(name),\n          data(data) {\n    }\n\n    string name;\n    int data;\n};\n\ntypedef function<bool(const Event&)> EventHandler;\n\nint main(int argc, char **argv) {\n    // set evnet queues\n    vector<Event> queues;\n    queues.emplace_back(\"hoge\", 100);\n    queues.emplace_back(\"hoge\", 101);\n\n    // set handlers\n    multimap<string, EventHandler> handlers;\n\n    handlers.emplace(\"hoge\", [](const Event& e) {\n            cout << \"emit hoge event!!!\" << e.data << endl;\n            return true;\n        });\n\n    handlers.emplace(\"moge\", [](const Event& e) {\n            cout << \"emit moge event!!!\" << e.data << endl;\n            return true;\n        });\n\n    // trigger \n    for (auto event : queues) {\n        for (auto iter : handlers) {\n            if (event.name == iter.first) {\n                iter.second(event);\n            }\n        }\n    }\n\n    return 0;\n}\n\njs\u3063\u307d\u3044\u30a4\u30d9\u30f3\u30c8\u30cf\u30f3\u30c9\u30e9\u304c\u3051\u3063\u3053\u3046\u77ed\u3044\u30b3\u30fc\u30c9\u3067\u5b9f\u73fe\u3067\u304d\u308b\u3002\n\n```cpp\n#include <iostream>\n#include <functional>\n#include <string>\n#include <map>\n#include <vector>\n\nusing namespace std;\n\nstruct Event {\n    Event(const string& name, int data)\n        : name(name),\n          data(data) {\n    }\n\n    string name;\n    int data;\n};\n\ntypedef function<bool(const Event&)> EventHandler;\n\nint main(int argc, char **argv) {\n    // set evnet queues\n    vector<Event> queues;\n    queues.emplace_back(\"hoge\", 100);\n    queues.emplace_back(\"hoge\", 101);\n\n    // set handlers\n    multimap<string, EventHandler> handlers;\n\n    handlers.emplace(\"hoge\", [](const Event& e) {\n            cout << \"emit hoge event!!!\" << e.data << endl;\n            return true;\n        });\n\n    handlers.emplace(\"moge\", [](const Event& e) {\n            cout << \"emit moge event!!!\" << e.data << endl;\n            return true;\n        });\n\n    // trigger \n    for (auto event : queues) {\n        for (auto iter : handlers) {\n            if (event.name == iter.first) {\n                iter.second(event);\n            }\n        }\n    }\n\n    return 0;\n}\n```", "tags": ["C++11"]}