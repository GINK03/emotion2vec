{"context": " More than 1 year has passed since last update.Clojure\u306e-> ->>\u30b9\u30ec\u30c3\u30c7\u30a3\u30f3\u30b0\u30de\u30af\u30ed\u3067\u524d\u56de\u30d5\u30a9\u30fc\u30e0\u7d50\u679c\u3092\u4efb\u610f\u306e\u5834\u6240\u306b\u5c55\u958b\u3057\u305f\u3044\u5834\u5408\u3001\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u30e9\u30e0\u30c0\u3092\u4f7f\u7528\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n(->> (range 10) (map -) (#(nth % 3)))\n\n\u305f\u3060\u3001\u3053\u306e\u65b9\u6cd5\u3060\u3068 (#( \u3068\u306a\u308b\u306e\u304c\u5c11\u3057\u6c17\u6301\u3061\u60aa\u3044\u3067\u3059\u3002\u307e\u305f\u3001\u30e9\u30e0\u30c0\u306f\u30cd\u30b9\u30c8\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u306a\u3044\u306e\u3067\u3001\u306a\u308b\u3079\u304f\u7bc0\u7d04\u3057\u305f\u3044\u3068\u3053\u308d\u3067\u3059\u3002\nas->\u30de\u30af\u30ed\u3082\u3042\u308a\u307e\u3059\u304cas->\u306f\u6bce\u56de\u5834\u6240\u3092\u6307\u5b9a\u3057\u306a\u3044\u3068\u3044\u3051\u306a\u3044\u306e\u3067\u9762\u5012\u3067\u3059\u3002\n\u305d\u3053\u3067\u3001\u30b7\u30f3\u30dc\u30eb\u3068\u3057\u3066<>\u304c\u51fa\u73fe\u3057\u305f\u3068\u304d\u3060\u3051\u305d\u306e\u5834\u6240\u306b\u524d\u56de\u30d5\u30a9\u30fc\u30e0\u7d50\u679c\u304c\u5c55\u958b\u3055\u308c\u3001<>\u304c\u306a\u3044\u3068\u304d\u306f-> ->>\u3068\u540c\u3058\u52d5\u4f5c\u3092\u3059\u308b\u30b9\u30ec\u30c3\u30c7\u30a3\u30f3\u30b0\u30de\u30af\u30ed\u3068\u3057\u3066o> o>>\u3092\u4f5c\u3063\u3066\u307f\u307e\u3059\u3002\n\noptional_threading_macro.clj\n(defn cons-nth [index x coll]\n  (concat (take index coll) [x] (drop index coll)))\n(defn cons-last [x coll]\n  (concat coll [x]))\n\n(defn- find-symbol [form sym]\n  (cond (or (sequential? form) (set? form)) (some #(find-symbol % sym) form)\n        (map? form) (or (find-symbol (keys form) sym)\n                        (find-symbol (vals form) sym))\n        :else (= form sym)))\n\n(defmacro o> [x & forms]\n  (loop [x x forms forms]\n    (if-not forms x\n      (let [form (first forms)\n            threaded (if (seq? form)\n                       (-> (if (find-symbol form '<>)\n                             (list 'let ['<> x] form)\n                             (cons-nth 1 x form))\n                           (with-meta (meta form)))\n                       (list form x))]\n        (recur threaded (next forms))))))\n\n(defmacro o>> [x & forms]\n  (loop [x x forms forms]\n    (if-not forms x\n      (let [form (first forms)\n            threaded (if (seq? form)\n                       (-> (if (find-symbol form '<>)\n                             (list 'let ['<> x] form)\n                             (cons-last x form))\n                           (with-meta (meta form)))\n                       (list form x))]\n        (recur threaded (next forms))))))\n\n\n\u3053\u306e\u30de\u30af\u30ed\u3092\u7528\u3044\u305f\u30b5\u30f3\u30d7\u30eb\u306f\u4ee5\u4e0b\u306e\u3068\u304a\u308a\u3067\u3059\u3002<>\u304c\u73fe\u308c\u305f\u3068\u304d\u306e\u307f\u3001\u305d\u306e\u5834\u6240\u306b\u524d\u56de\u30d5\u30a9\u30fc\u30e0\u7d50\u679c\u304c\u5c55\u958b\u3055\u308c\u3066\u3044\u307e\u3059\u3002\nuser=> (o>> 10 (range) reverse (map -) (nth <> 3) (identity {:a [1 <>]}))\n{:a [1 -6]}\nuser=> (o> 10 (range) reverse (nth 3) (map - (range <>)))\n(0 -1 -2 -3 -4 -5)\n\nClojure\u306e`->` `->>`\u30b9\u30ec\u30c3\u30c7\u30a3\u30f3\u30b0\u30de\u30af\u30ed\u3067\u524d\u56de\u30d5\u30a9\u30fc\u30e0\u7d50\u679c\u3092\u4efb\u610f\u306e\u5834\u6240\u306b\u5c55\u958b\u3057\u305f\u3044\u5834\u5408\u3001\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u30e9\u30e0\u30c0\u3092\u4f7f\u7528\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\n```\n(->> (range 10) (map -) (#(nth % 3)))\n```\n\n\u305f\u3060\u3001\u3053\u306e\u65b9\u6cd5\u3060\u3068 `(#(` \u3068\u306a\u308b\u306e\u304c\u5c11\u3057\u6c17\u6301\u3061\u60aa\u3044\u3067\u3059\u3002\u307e\u305f\u3001\u30e9\u30e0\u30c0\u306f\u30cd\u30b9\u30c8\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u306a\u3044\u306e\u3067\u3001\u306a\u308b\u3079\u304f\u7bc0\u7d04\u3057\u305f\u3044\u3068\u3053\u308d\u3067\u3059\u3002\n`as->`\u30de\u30af\u30ed\u3082\u3042\u308a\u307e\u3059\u304c`as->`\u306f\u6bce\u56de\u5834\u6240\u3092\u6307\u5b9a\u3057\u306a\u3044\u3068\u3044\u3051\u306a\u3044\u306e\u3067\u9762\u5012\u3067\u3059\u3002\n\n\u305d\u3053\u3067\u3001\u30b7\u30f3\u30dc\u30eb\u3068\u3057\u3066`<>`\u304c\u51fa\u73fe\u3057\u305f\u3068\u304d\u3060\u3051\u305d\u306e\u5834\u6240\u306b\u524d\u56de\u30d5\u30a9\u30fc\u30e0\u7d50\u679c\u304c\u5c55\u958b\u3055\u308c\u3001`<>`\u304c\u306a\u3044\u3068\u304d\u306f`->` `->>`\u3068\u540c\u3058\u52d5\u4f5c\u3092\u3059\u308b\u30b9\u30ec\u30c3\u30c7\u30a3\u30f3\u30b0\u30de\u30af\u30ed\u3068\u3057\u3066`o>` `o>>`\u3092\u4f5c\u3063\u3066\u307f\u307e\u3059\u3002\n\n```optional_threading_macro.clj\n(defn cons-nth [index x coll]\n  (concat (take index coll) [x] (drop index coll)))\n(defn cons-last [x coll]\n  (concat coll [x]))\n\n(defn- find-symbol [form sym]\n  (cond (or (sequential? form) (set? form)) (some #(find-symbol % sym) form)\n        (map? form) (or (find-symbol (keys form) sym)\n                        (find-symbol (vals form) sym))\n        :else (= form sym)))\n\n(defmacro o> [x & forms]\n  (loop [x x forms forms]\n    (if-not forms x\n      (let [form (first forms)\n            threaded (if (seq? form)\n                       (-> (if (find-symbol form '<>)\n                             (list 'let ['<> x] form)\n                             (cons-nth 1 x form))\n                           (with-meta (meta form)))\n                       (list form x))]\n        (recur threaded (next forms))))))\n\n(defmacro o>> [x & forms]\n  (loop [x x forms forms]\n    (if-not forms x\n      (let [form (first forms)\n            threaded (if (seq? form)\n                       (-> (if (find-symbol form '<>)\n                             (list 'let ['<> x] form)\n                             (cons-last x form))\n                           (with-meta (meta form)))\n                       (list form x))]\n        (recur threaded (next forms))))))\n```\n\n\u3053\u306e\u30de\u30af\u30ed\u3092\u7528\u3044\u305f\u30b5\u30f3\u30d7\u30eb\u306f\u4ee5\u4e0b\u306e\u3068\u304a\u308a\u3067\u3059\u3002`<>`\u304c\u73fe\u308c\u305f\u3068\u304d\u306e\u307f\u3001\u305d\u306e\u5834\u6240\u306b\u524d\u56de\u30d5\u30a9\u30fc\u30e0\u7d50\u679c\u304c\u5c55\u958b\u3055\u308c\u3066\u3044\u307e\u3059\u3002\n\n```\nuser=> (o>> 10 (range) reverse (map -) (nth <> 3) (identity {:a [1 <>]}))\n{:a [1 -6]}\nuser=> (o> 10 (range) reverse (nth 3) (map - (range <>)))\n(0 -1 -2 -3 -4 -5)\n```", "tags": ["Clojure1.6.0"]}