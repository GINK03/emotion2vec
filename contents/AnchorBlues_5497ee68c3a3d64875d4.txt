{"context": "2\u6b21\u5143\u306e\u30c7\u30fc\u30bf\u3092\u3001python\u306ematplotlib\u3092\u7528\u3044\u3066\u4e00\u77ac\u3067\u56f3\u306b\u8d77\u3053\u3059\n\u306b\u7d9a\u304f\u3001\u300cpython\u306ematplotlib\u3092\u7528\u3044\u3066\u4e00\u77ac\u3067\u56f3\u793a\u3059\u308b\u300d\u30b7\u30ea\u30fc\u30ba\u7b2c\u4e8c\u5f3e\u3002\n\u3068\u306b\u304b\u304f\u624b\u8efd\u306b\u4e0b\u56f3\u306e\u3088\u3046\u306a1\u6b21\u5143\u6642\u7cfb\u5217\u30c7\u30fc\u30bf\u3067\u5353\u8d8a\u3057\u3066\u3044\u308b\u5468\u671f\u3092\u6c42\u3081\u305f\u3044\u3068\u601d\u3063\u3066\u3044\u308b\u4eba\u3078\u3002\n\npython\u3092\u7528\u3044\u3066\u3001\n\n\n\u30b9\u30da\u30af\u30c8\u30eb\u89e3\u6790\u306e\u8a08\u7b97\u306e\u5b9f\u884c\n\u8a08\u7b97\u7d50\u679c\u306e\u56f3\u793a\n\n\u3092\u4e00\u62ec\u3067\u884c\u3046\u3002\n\n1. \u30b3\u30fc\u30c9\n\u4e88\u3081\u3001\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u30af\u30e9\u30b9\u3092\u8a2d\u5b9a\u3057\u3066\u304a\u304f\u3002\n\nSpectra.py\n#coding:utf-8\n\nfrom scipy import fftpack\nimport numpy as np\nimport matplotlib.pyplot as plt\n\nclass Spectra(object):\n    def __init__(self, t, f, TimeUnit):\n        self.t = t                 # \u6642\u9593\u8ef8\u306e\u5024\n        self.f = f                 # \u30c7\u30fc\u30bf\u306e\u5024\n        self.TimeUnit = TimeUnit   # \u6642\u9593\u306e\u5358\u4f4d\n        self.T = (t[1] - t[0]) * t.size\n        self.omega = 2 * np.pi * np.arange(self.t.size / 2) / self.T\n        self.time = 2.0 * np.pi / self.omega\n\n        # \u30d1\u30ef\u30fc\u30b9\u30da\u30af\u30c8\u30eb\u5bc6\u5ea6\u3092\u8a08\u7b97\n        f = self.f - np.average(self.f)         # \u5e73\u5747\u3092\u30bc\u30ed\u306b\u3002\n        F = fftpack.fft(f)                          # \u9ad8\u901f\u30d5\u30fc\u30ea\u30a8\u5909\u63db\n        self.Po = (abs(F[0:(self.t.size / 2)]) ** 2) / self.T\n\n\n    def draw_with_omega(self, fsizex = 8, fsizey = 6):\n        # \u6a2a\u8ef8\u306b\u89d2\u901f\u5ea6\u03c9\u3092\u3068\u3063\u3066\u30d1\u30ef\u30fc\u30b9\u30da\u30af\u30c8\u30eb\u5bc6\u5ea6\u3092\u30d7\u30ed\u30c3\u30c8\n        fig, ax = plt.subplots(figsize=(fsizex, fsizey))   # \u56f3\u306e\u30b5\u30a4\u30ba\u306e\u6307\u5b9a\n        ax.set_yscale('log')\n        ax.set_xscale('log')\n        ax.set_xlabel(\"Omega\")\n        ax.set_ylabel(\"Power Spectrum Density\")\n        ax.plot(self.omega, self.Po)\n        return plt\n\n\n    def draw_with_time(self, fsizex = 8, fsizey = 6, Print_flg = True, Threshold = 1.0):\n        # \u6a2a\u8ef8\u306b\u6642\u9593\u3092\u3068\u3063\u3066\u30d1\u30ef\u30fc\u30b9\u30da\u30af\u30c8\u30eb\u5bc6\u5ea6\u3092\u30d7\u30ed\u30c3\u30c8\n        fig, ax = plt.subplots(figsize=(fsizex, fsizey))   # \u56f3\u306e\u30b5\u30a4\u30ba\u306e\u6307\u5b9a\n        ax.set_yscale('log')\n        ax.set_xscale('log')\n        ax.set_xlabel(self.TimeUnit)\n        ax.set_ylabel(\"Power Spectrum Density\")\n        ax.plot(self.time, self.Po)\n        if Print_flg == True:   # \u30d1\u30ef\u30fc\u30b9\u30da\u30af\u30c8\u30eb\u5bc6\u5ea6\u306e\u5024\u304cThreshold\u3088\u308a\u5927\u304d\u3044\u90e8\u5206\u306b\u7dda\u3092\u5f15\u304d\u3001\u5468\u671f\u306e\u5024\u3092\u8a18\u8ff0\u3059\u308b\n            Dominant_Period = self.time[np.where(self.Po > Threshold)]\n            print Dominant_Period, self.TimeUnit + ' component is dominant!'\n            for i in range(0, Dominant_Period.size):\n                plt.axvline(x = Dominant_Period[i], linewidth = 0.5, color = 'k')\n                ax.text(Dominant_Period[i], Threshold, str(round(Dominant_Period[i], 3)))\n\n        return plt\n\n\n\u898b\u3066\u306e\u901a\u308a\u3001scipy\u306efft\u95a2\u6570\u3092\u7528\u3044\u3066\u6642\u7cfb\u5217\u306bFFT(\u96e2\u6563\u30d5\u30fc\u30ea\u30a8\u5909\u63db)\u3092\u884c\u3044\u3001\u30d1\u30ef\u30fc\u30b9\u30da\u30af\u30c8\u30eb\u5bc6\u5ea6\u3092\u8a08\u7b97\u3057\u3066\u3044\u308b\u3002\n\u3053\u306e\u30d1\u30ef\u30fc\u30b9\u30da\u30af\u30c8\u30eb\u5bc6\u5ea6\u304c\u5468\u56f2\u306b\u6bd4\u3079\u3066\u5927\u304d\u306a\u5024\u3092\u793a\u3057\u3066\u3044\u308b\u7b87\u6240\u306e\u5468\u671f\u304c\u3001\u305d\u306e\u6642\u7cfb\u5217\u306e\u4e2d\u3067\u5353\u8d8a\u3057\u3066\u3044\u308b\u5468\u671f\u3067\u3042\u308b\u3002\n\n2. \u691c\u8a3c\n\u6642\u7cfb\u5217\u30c7\u30fc\u30bf\u3092\u81ea\u4f5c\u3057\u3066\u4e0a\u8a18\u30b3\u30fc\u30c9\u306e\u691c\u8a3c\u306b\u7528\u3044\u308b\u3002\n#coding:utf-8\n\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport Spectra\n\nif __name__ ==  \"__main__\" :\n    # \u6642\u7cfb\u5217\u30c7\u30fc\u30bf\u306e\u4f5c\u6210\n    # Monthly\u30c7\u30fc\u30bf30\u5e74\u5206(\u3059\u306a\u308f\u3061\u30c7\u30fc\u30bf\u6570\u306f360\u500b)\n    # \u5927\u304d\u306a1\u5e74(=12\u30f6\u6708)\u5468\u671f\u306b\u52a0\u3048\u3066\u7de9\u3084\u304b\u306a10\u5e74(=120\u30f6\u6708)\u5468\u671f\u3001\u66f4\u306b\u5404\u6642\u523b\u306b\u5fae\u5c0f\u306a\u30ce\u30a4\u30ba\n    N = 360\n    t = np.arange(0, N)\n    td = t * np.pi / 6.0\n    f = np.sin(td) + 35.0 + 0.2 * np.sin(td * 0.1) + np.random.randn(N) * 0.1\n\n    # \u5143\u306e\u6642\u7cfb\u5217\u306e\u63cf\u753b\n    plt.figure(figsize = (20, 6))\n    plt.plot(t, f)\n    plt.xlim(0,N)\n    plt.xlabel('Month')\n    plt.show()\n\n    # \u5353\u8d8a\u3057\u3066\u3044\u308b\u5468\u671f\u306e\u63cf\u753b\n    # time\u3092\u8a08\u7b97\u3059\u308b\u969b\u306b0\u3067\u5272\u3063\u3066\u3044\u308b\u305f\u3081\u8b66\u544a\u304c\u51fa\u308b\u304c\u7279\u306b\u6c17\u306b\u3057\u306a\u304f\u3066\u3088\u3044\n    Timeseries = Spectra.Spectra(t, f, 'Month')\n    plt = Timeseries.draw_with_time()\n    plt.show()\n\n\n3. \u7d50\u679c\n\u5143\u306e\u6642\u7cfb\u5217\u30c7\u30fc\u30bf\u306e\u56f3\u306f\u3001\u3053\u306e\u6295\u7a3f\u306e\u4e00\u756a\u4e0a\u306e\u56f3\u306e\u3088\u3046\u306b\u306a\u3063\u305f\u3002\n\u305d\u3057\u3066\u3001\u5353\u8d8a\u3059\u308b\u5468\u671f\u306b\u95a2\u3059\u308b\u56f3\u306f\u3001\u4ee5\u4e0b\u306e\u901a\u308a\u306b\u3002\n[ 120.   12.] Month component is dominant!\n\n\u3053\u306e\u901a\u308a\u3001\u5353\u8d8a\u3059\u308b\u5468\u671f\u3067\u3042\u308b\n\n12\u30f6\u6708\n120\u30f6\u6708\n\n\u3092\u898b\u4e8b\u62bd\u51fa\u3057\u3066\u304f\u308c\u305f\u3002\n\u306a\u304a\u3001\u3082\u3057\u5143\u306e\u6642\u7cfb\u5217\u30c7\u30fc\u30bf\u306e\u4e21\u7aef\u306e\u5024\u304c\u5927\u304d\u304f\u7570\u306a\u308b\u5834\u5408\u306b\u306f\u3001\u4e88\u3081\u7a93\u95a2\u6570\u3092\u65bd\u3059\u306a\u3069\u3057\u3066\u30b9\u30da\u30af\u30c8\u30eb\u89e3\u6790\u3092\u3059\u308b\u306b\u3075\u3055\u308f\u3057\u3044\u5f62\u306b\u30c7\u30fc\u30bf\u3092\u52a0\u5de5\u3057\u3066\u304a\u304f\u3002\n\n\u53c2\u8003\u6587\u732e\n\nUNIX/Windows/Macintosh\u3092\u4f7f\u3063\u305f\u5b9f\u8df5 \u6c17\u5019\u30c7\u30fc\u30bf\u89e3\u6790\u2015\u6c17\u5019\u5b66\u30fb\u6c17\u8c61\u5b66\u30fb\u6d77\u6d0b\u5b66\u306a\u3069\u306e\u5831\u544a\u66f8\u30fb\u8ad6\u6587\u3092\u66f8\u304f\u4eba\u304c\u77e5\u3063\u3066\u304a\u304d\u305f\u30443\u3064\u306e\u30dd\u30a4\u30f3\u30c8\nhttps://docs.scipy.org/doc/scipy-0.18.1/reference/generated/scipy.fftpack.fft.html\n\n[2\u6b21\u5143\u306e\u30c7\u30fc\u30bf\u3092\u3001python\u306ematplotlib\u3092\u7528\u3044\u3066\u4e00\u77ac\u3067\u56f3\u306b\u8d77\u3053\u3059](http://qiita.com/AnchorBlues/items/0dd1499196670fdf1c46)\n\u306b\u7d9a\u304f\u3001\u300cpython\u306ematplotlib\u3092\u7528\u3044\u3066\u4e00\u77ac\u3067\u56f3\u793a\u3059\u308b\u300d\u30b7\u30ea\u30fc\u30ba\u7b2c\u4e8c\u5f3e\u3002\n\u3068\u306b\u304b\u304f\u624b\u8efd\u306b**\u4e0b\u56f3\u306e\u3088\u3046\u306a1\u6b21\u5143\u6642\u7cfb\u5217\u30c7\u30fc\u30bf\u3067\u5353\u8d8a\u3057\u3066\u3044\u308b\u5468\u671f\u3092\u6c42\u3081\u305f\u3044**\u3068\u601d\u3063\u3066\u3044\u308b\u4eba\u3078\u3002\n\n![image](https://qiita-image-store.s3.amazonaws.com/0/88804/abd73e9f-73f2-4e8d-fb02-4321a1e29b6d.png)\n\npython\u3092\u7528\u3044\u3066\u3001\n\n - [\u30b9\u30da\u30af\u30c8\u30eb\u89e3\u6790](https://ja.wikipedia.org/wiki/%E5%91%A8%E6%B3%A2%E6%95%B0%E3%82%B9%E3%83%9A%E3%82%AF%E3%83%88%E3%83%AB)\u306e\u8a08\u7b97\u306e\u5b9f\u884c\n - \u8a08\u7b97\u7d50\u679c\u306e\u56f3\u793a\n\n\u3092\u4e00\u62ec\u3067\u884c\u3046\u3002\n\n# 1. \u30b3\u30fc\u30c9\n\u4e88\u3081\u3001\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u30af\u30e9\u30b9\u3092\u8a2d\u5b9a\u3057\u3066\u304a\u304f\u3002\n\n```Spectra.py\n#coding:utf-8\n\nfrom scipy import fftpack\nimport numpy as np\nimport matplotlib.pyplot as plt\n\nclass Spectra(object):\n\tdef __init__(self, t, f, TimeUnit):\n\t\tself.t = t                 # \u6642\u9593\u8ef8\u306e\u5024\n\t\tself.f = f                 # \u30c7\u30fc\u30bf\u306e\u5024\n\t\tself.TimeUnit = TimeUnit   # \u6642\u9593\u306e\u5358\u4f4d\n\t\tself.T = (t[1] - t[0]) * t.size\n\t\tself.omega = 2 * np.pi * np.arange(self.t.size / 2) / self.T\n\t\tself.time = 2.0 * np.pi / self.omega\n\n\t\t# \u30d1\u30ef\u30fc\u30b9\u30da\u30af\u30c8\u30eb\u5bc6\u5ea6\u3092\u8a08\u7b97\n\t\tf = self.f - np.average(self.f)\t\t\t# \u5e73\u5747\u3092\u30bc\u30ed\u306b\u3002\n\t\tF = fftpack.fft(f)\t\t\t\t\t\t\t# \u9ad8\u901f\u30d5\u30fc\u30ea\u30a8\u5909\u63db\n\t\tself.Po = (abs(F[0:(self.t.size / 2)]) ** 2) / self.T\n\n\n\tdef draw_with_omega(self, fsizex = 8, fsizey = 6):\n\t\t# \u6a2a\u8ef8\u306b\u89d2\u901f\u5ea6\u03c9\u3092\u3068\u3063\u3066\u30d1\u30ef\u30fc\u30b9\u30da\u30af\u30c8\u30eb\u5bc6\u5ea6\u3092\u30d7\u30ed\u30c3\u30c8\n\t\tfig, ax = plt.subplots(figsize=(fsizex, fsizey))   # \u56f3\u306e\u30b5\u30a4\u30ba\u306e\u6307\u5b9a\n\t\tax.set_yscale('log')\n\t\tax.set_xscale('log')\n\t\tax.set_xlabel(\"Omega\")\n\t\tax.set_ylabel(\"Power Spectrum Density\")\n\t\tax.plot(self.omega, self.Po)\n\t\treturn plt\n\n\n\tdef draw_with_time(self, fsizex = 8, fsizey = 6, Print_flg = True, Threshold = 1.0):\n\t\t# \u6a2a\u8ef8\u306b\u6642\u9593\u3092\u3068\u3063\u3066\u30d1\u30ef\u30fc\u30b9\u30da\u30af\u30c8\u30eb\u5bc6\u5ea6\u3092\u30d7\u30ed\u30c3\u30c8\n\t\tfig, ax = plt.subplots(figsize=(fsizex, fsizey))   # \u56f3\u306e\u30b5\u30a4\u30ba\u306e\u6307\u5b9a\n\t\tax.set_yscale('log')\n\t\tax.set_xscale('log')\n\t\tax.set_xlabel(self.TimeUnit)\n\t\tax.set_ylabel(\"Power Spectrum Density\")\n\t\tax.plot(self.time, self.Po)\n\t\tif Print_flg == True:   # \u30d1\u30ef\u30fc\u30b9\u30da\u30af\u30c8\u30eb\u5bc6\u5ea6\u306e\u5024\u304cThreshold\u3088\u308a\u5927\u304d\u3044\u90e8\u5206\u306b\u7dda\u3092\u5f15\u304d\u3001\u5468\u671f\u306e\u5024\u3092\u8a18\u8ff0\u3059\u308b\n\t\t\tDominant_Period = self.time[np.where(self.Po > Threshold)]\n\t\t\tprint Dominant_Period, self.TimeUnit + ' component is dominant!'\n\t\t\tfor i in range(0, Dominant_Period.size):\n\t\t\t\tplt.axvline(x = Dominant_Period[i], linewidth = 0.5, color = 'k')\n\t\t\t\tax.text(Dominant_Period[i], Threshold, str(round(Dominant_Period[i], 3)))\n\n\t\treturn plt\n```\n\n\u898b\u3066\u306e\u901a\u308a\u3001scipy\u306efft\u95a2\u6570\u3092\u7528\u3044\u3066\u6642\u7cfb\u5217\u306b[FFT(\u96e2\u6563\u30d5\u30fc\u30ea\u30a8\u5909\u63db)](https://ja.wikipedia.org/wiki/%E9%AB%98%E9%80%9F%E3%83%95%E3%83%BC%E3%83%AA%E3%82%A8%E5%A4%89%E6%8F%9B)\u3092\u884c\u3044\u3001\u30d1\u30ef\u30fc\u30b9\u30da\u30af\u30c8\u30eb\u5bc6\u5ea6\u3092\u8a08\u7b97\u3057\u3066\u3044\u308b\u3002\n\u3053\u306e\u30d1\u30ef\u30fc\u30b9\u30da\u30af\u30c8\u30eb\u5bc6\u5ea6\u304c\u5468\u56f2\u306b\u6bd4\u3079\u3066\u5927\u304d\u306a\u5024\u3092\u793a\u3057\u3066\u3044\u308b\u7b87\u6240\u306e\u5468\u671f\u304c\u3001\u305d\u306e\u6642\u7cfb\u5217\u306e\u4e2d\u3067\u5353\u8d8a\u3057\u3066\u3044\u308b\u5468\u671f\u3067\u3042\u308b\u3002\n\n# 2. \u691c\u8a3c\n\n\u6642\u7cfb\u5217\u30c7\u30fc\u30bf\u3092\u81ea\u4f5c\u3057\u3066\u4e0a\u8a18\u30b3\u30fc\u30c9\u306e\u691c\u8a3c\u306b\u7528\u3044\u308b\u3002\n\n```py\n#coding:utf-8\n\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport Spectra\n\nif __name__ ==  \"__main__\" :\n    # \u6642\u7cfb\u5217\u30c7\u30fc\u30bf\u306e\u4f5c\u6210\n    # Monthly\u30c7\u30fc\u30bf30\u5e74\u5206(\u3059\u306a\u308f\u3061\u30c7\u30fc\u30bf\u6570\u306f360\u500b)\n    # \u5927\u304d\u306a1\u5e74(=12\u30f6\u6708)\u5468\u671f\u306b\u52a0\u3048\u3066\u7de9\u3084\u304b\u306a10\u5e74(=120\u30f6\u6708)\u5468\u671f\u3001\u66f4\u306b\u5404\u6642\u523b\u306b\u5fae\u5c0f\u306a\u30ce\u30a4\u30ba\n    N = 360\n    t = np.arange(0, N)\n    td = t * np.pi / 6.0\n    f = np.sin(td) + 35.0 + 0.2 * np.sin(td * 0.1) + np.random.randn(N) * 0.1\n\n    # \u5143\u306e\u6642\u7cfb\u5217\u306e\u63cf\u753b\n    plt.figure(figsize = (20, 6))\n    plt.plot(t, f)\n    plt.xlim(0,N)\n    plt.xlabel('Month')\n    plt.show()\n\n    # \u5353\u8d8a\u3057\u3066\u3044\u308b\u5468\u671f\u306e\u63cf\u753b\n    # time\u3092\u8a08\u7b97\u3059\u308b\u969b\u306b0\u3067\u5272\u3063\u3066\u3044\u308b\u305f\u3081\u8b66\u544a\u304c\u51fa\u308b\u304c\u7279\u306b\u6c17\u306b\u3057\u306a\u304f\u3066\u3088\u3044\n    Timeseries = Spectra.Spectra(t, f, 'Month')\n    plt = Timeseries.draw_with_time()\n    plt.show()\n```\n\n# 3. \u7d50\u679c\n\u5143\u306e\u6642\u7cfb\u5217\u30c7\u30fc\u30bf\u306e\u56f3\u306f\u3001\u3053\u306e\u6295\u7a3f\u306e\u4e00\u756a\u4e0a\u306e\u56f3\u306e\u3088\u3046\u306b\u306a\u3063\u305f\u3002\n\u305d\u3057\u3066\u3001\u5353\u8d8a\u3059\u308b\u5468\u671f\u306b\u95a2\u3059\u308b\u56f3\u306f\u3001\u4ee5\u4e0b\u306e\u901a\u308a\u306b\u3002\n\n`[ 120.   12.] Month component is dominant!`\n![image](https://qiita-image-store.s3.amazonaws.com/0/88804/bf623eab-6fe4-16fd-3e85-9405a3c9ee1c.png)\n\n\n\u3053\u306e\u901a\u308a\u3001\u5353\u8d8a\u3059\u308b\u5468\u671f\u3067\u3042\u308b\n\n - 12\u30f6\u6708\n - 120\u30f6\u6708\n\n\u3092\u898b\u4e8b\u62bd\u51fa\u3057\u3066\u304f\u308c\u305f\u3002\n\u306a\u304a\u3001\u3082\u3057\u5143\u306e\u6642\u7cfb\u5217\u30c7\u30fc\u30bf\u306e\u4e21\u7aef\u306e\u5024\u304c\u5927\u304d\u304f\u7570\u306a\u308b\u5834\u5408\u306b\u306f\u3001\u4e88\u3081[\u7a93\u95a2\u6570](https://ja.wikipedia.org/wiki/%E7%AA%93%E9%96%A2%E6%95%B0)\u3092\u65bd\u3059\u306a\u3069\u3057\u3066\u30b9\u30da\u30af\u30c8\u30eb\u89e3\u6790\u3092\u3059\u308b\u306b\u3075\u3055\u308f\u3057\u3044\u5f62\u306b\u30c7\u30fc\u30bf\u3092\u52a0\u5de5\u3057\u3066\u304a\u304f\u3002\n\n* * *\n\u53c2\u8003\u6587\u732e\n\n - [UNIX/Windows/Macintosh\u3092\u4f7f\u3063\u305f\u5b9f\u8df5 \u6c17\u5019\u30c7\u30fc\u30bf\u89e3\u6790\u2015\u6c17\u5019\u5b66\u30fb\u6c17\u8c61\u5b66\u30fb\u6d77\u6d0b\u5b66\u306a\u3069\u306e\u5831\u544a\u66f8\u30fb\u8ad6\u6587\u3092\u66f8\u304f\u4eba\u304c\u77e5\u3063\u3066\u304a\u304d\u305f\u30443\u3064\u306e\u30dd\u30a4\u30f3\u30c8](https://www.amazon.co.jp/UNIX-Windows-Macintosh%E3%82%92%E4%BD%BF%E3%81%A3%E3%81%9F%E5%AE%9F%E8%B7%B5-%E6%B0%97%E5%80%99%E3%83%87%E3%83%BC%E3%82%BF%E8%A7%A3%E6%9E%90-%E6%B0%97%E5%80%99%E5%AD%A6-%E6%B0%97%E8%B1%A1%E5%AD%A6-%E6%B5%B7%E6%B4%8B%E5%AD%A6%E3%81%AA%E3%81%A9%E3%81%AE%E5%A0%B1%E5%91%8A%E6%9B%B8-%E8%AB%96%E6%96%87%E3%82%92%E6%9B%B8%E3%81%8F%E4%BA%BA%E3%81%8C%E7%9F%A5%E3%81%A3%E3%81%A6%E3%81%8A%E3%81%8D%E3%81%9F%E3%81%843%E3%81%A4%E3%81%AE%E3%83%9D%E3%82%A4%E3%83%B3%E3%83%88-%E6%9D%BE%E5%B1%B1/dp/4772241221/ref=sr_1_1?ie=UTF8&qid=1482492333&sr=8-1&keywords=%E6%B0%97%E5%80%99%E3%83%87%E3%83%BC%E3%82%BF%E8%A7%A3%E6%9E%90)\n - https://docs.scipy.org/doc/scipy-0.18.1/reference/generated/scipy.fftpack.fft.html\n\n\n\n", "tags": ["Python", "matplotlib", "\u30c7\u30fc\u30bf\u5206\u6790", "\u6642\u7cfb\u5217\u89e3\u6790"]}