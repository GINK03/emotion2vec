{"tags": ["curl"], "context": "curl --get -d \"wd=q\" \"http://www.baidu.com/s\"\n\nhttps://curl.haxx.se/mail/archive-2002-01/0093.html\nhttp://stackoverflow.com/questions/28216437/end-of-file-in-stdin\n       -d, --data <data>\n              (HTTP) Sends the specified data in a POST request to the HTTP server, in the same way that a browser does when a user  has\n              filled  in  an HTML form and presses the submit button. This will cause curl to pass the data to the server using the con\u2010\n              tent-type application/x-www-form-urlencoded.  Compare to -F, --form.\n\n              -d, --data is the same as --data-ascii. To post data purely binary, you should instead use the  --data-binary  option.  To\n              URL-encode the value of a form field you may use --data-urlencode.\n\n              If any of these options is used more than once on the same command line, the data pieces specified will be merged together\n              with a separating &-symbol. Thus, using '-d name=daniel -d skill=lousy' would  generate  a  post  chunk  that  looks  like\n              'name=daniel&skill=lousy'.\n\n              If  you  start  the data with the letter @, the rest should be a file name to read the data from, or - if you want curl to\n              read the data from stdin.  The contents of the file must already be URL-encoded. Multiple files  can  also  be  specified.\n              Posting data from a file named 'foobar' would thus be done with --data @foobar.\n\n       -G, --get\n              When  used,  this  option  will  make all data specified with -d, --data or --data-binary to be used in a HTTP GET request\n              instead of the POST request that otherwise would be used. The data will be appended to the URL with a '?' separator.\n\n              If used in combination with -I, the POST data will instead be appended to the URL with a HEAD request.\n\n              If this option is used several times, the following occurrences make no difference. This is because undoing a GET  doesn't\n              make sense, but you should then instead enforce the alternative method you prefer.\n\n```bash\ncurl --get -d \"wd=q\" \"http://www.baidu.com/s\"\n```\n\nhttps://curl.haxx.se/mail/archive-2002-01/0093.html\n\nhttp://stackoverflow.com/questions/28216437/end-of-file-in-stdin\n\n```bash\n       -d, --data <data>\n              (HTTP) Sends the specified data in a POST request to the HTTP server, in the same way that a browser does when a user  has\n              filled  in  an HTML form and presses the submit button. This will cause curl to pass the data to the server using the con\u2010\n              tent-type application/x-www-form-urlencoded.  Compare to -F, --form.\n\n              -d, --data is the same as --data-ascii. To post data purely binary, you should instead use the  --data-binary  option.  To\n              URL-encode the value of a form field you may use --data-urlencode.\n\n              If any of these options is used more than once on the same command line, the data pieces specified will be merged together\n              with a separating &-symbol. Thus, using '-d name=daniel -d skill=lousy' would  generate  a  post  chunk  that  looks  like\n              'name=daniel&skill=lousy'.\n\n              If  you  start  the data with the letter @, the rest should be a file name to read the data from, or - if you want curl to\n              read the data from stdin.  The contents of the file must already be URL-encoded. Multiple files  can  also  be  specified.\n              Posting data from a file named 'foobar' would thus be done with --data @foobar.\n```\n\n```bash\n       -G, --get\n              When  used,  this  option  will  make all data specified with -d, --data or --data-binary to be used in a HTTP GET request\n              instead of the POST request that otherwise would be used. The data will be appended to the URL with a '?' separator.\n\n              If used in combination with -I, the POST data will instead be appended to the URL with a HEAD request.\n\n              If this option is used several times, the following occurrences make no difference. This is because undoing a GET  doesn't\n              make sense, but you should then instead enforce the alternative method you prefer.\n```\n\n"}