{"context": " More than 1 year has passed since last update.This is something that many people probably already know, but I'm going to write about it since I haven't seen anything really obvious on the internet.\nNpm-link lets you use symbolic links from your package to anywhere else you choose to link to the package. You can run npm link in your package and then run npm link my-package in whatever project you want to use it.\nThat's it! Now for a silly project involving this...\n\nExample Time\nAnyone who's seen my other articles probably knows that I like Github's Atom.io way too much for stupid reasons. Good news! There's a plug-in that I love using called atom-spotify, but I want to add some extra features to it. Let's get started.\n\nSetup\napm is the Atom Package Manager, which works almost exactly like npm. First, we will have to have our repository checked out: \n$ git clone https://github.com/kimagure/atom-spotify\n\nOnce we have that checked out, we need to cd in and install dependencies like any node project.\n$ apm install\nInstalling modules \u2713\n\nNext, link it in apm by running apm link. You'll see something like this:\n$ apm link\n/Users/jwoo/.atom/packages/atom-spotify -> /Users/jwoo/github/atom-spotify\n\nCool. Start up atom and take a look.\n\n\nWorkflow\nAs you can see, it works! Now, if you change something in here, your changes will be automatically reflected in the .atom/packages/atom-spotify directory, so you can use this to make changes that you can see and use right as you make the changes!\nE.g. if we change Now Playing and Paused to something silly like \u3077\u308c\u3044\u3061\u3085\u3046\u3067\u3059\u301c and \u30dd\u30fc\u30ba\u3057\u3066\u3044\u307e\u30fc\u3059\u301c and save and reload (ctrl+opt+cmd+L), we will see that the status bar changes (i.e. with 'Show Play Icon As Text' on):\nBefore:\n\nAfter:\n\n\nConclusion\nAin't that something? You can apply the same thing in your node projects, but with one big difference: npm link creates the symlink for use in projects but requires you link to the project specifically. npm link in my-super-project requires a corresponding npm link my-super-project in my-other-project-that-depends-on-my-super-project.\nNow you can develop on multiple interdependent projects with no problem! Cool stuff.\n\nThis is something that many people probably already know, but I'm going to write about it since I haven't seen anything really obvious on the internet.\n\nNpm-link lets you use symbolic links from your package to anywhere else you choose to link to the package. You can run `npm link` in your package and then run `npm link my-package` in whatever project you want to use it.\n\nThat's it! Now for a silly project involving this...\n\n# Example Time\n\nAnyone who's seen my other articles probably knows that I like Github's Atom.io way too much for stupid reasons. Good news! There's a plug-in that I love using called `atom-spotify`, but I want to add some extra features to it. Let's get started.\n\n##Setup\n\n`apm` is the Atom Package Manager, which works almost exactly like `npm`. First, we will have to have our repository checked out: \n\n    $ git clone https://github.com/kimagure/atom-spotify\n\nOnce we have that checked out, we need to `cd` in and install dependencies like any node project.\n\n    $ apm install\n    Installing modules \u2713\n\nNext, link it in apm by running `apm link`. You'll see something like this:\n\n\t$ apm link\n    /Users/jwoo/.atom/packages/atom-spotify -> /Users/jwoo/github/atom-spotify\n\nCool. Start up `atom` and take a look.\n\n![atom-spotify in action](https://qiita-image-store.s3.amazonaws.com/0/42481/a2d61f38-d803-9be9-584b-77dffde01850.png \"Screen Shot 2014-06-20 at 10.31.10 PM.png\")\n\n##Workflow\n\nAs you can see, it works! Now, if you change something in here, your changes will be automatically reflected in the `.atom/packages/atom-spotify` directory, so you can use this to make changes that you can see and use right as you make the changes!\n\nE.g. if we change `Now Playing` and `Paused` to something silly like `\u3077\u308c\u3044\u3061\u3085\u3046\u3067\u3059\u301c` and `\u30dd\u30fc\u30ba\u3057\u3066\u3044\u307e\u30fc\u3059\u301c` and save and reload (ctrl+opt+cmd+L), we will see that the status bar changes (i.e. with 'Show Play Icon As Text' on):\n\nBefore:\n![Screen Shot 2014-06-20 at 10.39.55 PM.png](https://qiita-image-store.s3.amazonaws.com/0/42481/713522f7-1dda-d620-a7dd-14cf8cbdd18b.png \"Screen Shot 2014-06-20 at 10.39.55 PM.png\")\n\n\nAfter:\n![Screen Shot 2014-06-20 at 10.40.59 PM.png](https://qiita-image-store.s3.amazonaws.com/0/42481/18caa125-97db-b1af-0adb-622a6c8d0955.png \"Screen Shot 2014-06-20 at 10.40.59 PM.png\")\n\n# Conclusion\n\nAin't that something? You can apply the same thing in your node projects, but with one big difference: `npm link` creates the symlink for use in projects but requires you link to the project specifically. `npm link` in `my-super-project` requires a corresponding `npm link my-super-project` in `my-other-project-that-depends-on-my-super-project`.\n\nNow you can develop on multiple interdependent projects with no problem! Cool stuff.\n", "tags": ["JavaScript", "Node", "npm"]}