{"context": "\n\n\u30e9\u30c6\u30f3\u8d85\u65b9\u683c\u30b5\u30f3\u30d7\u30ea\u30f3\u30b0(LHS)\u3068\u306f\n\u591a\u5909\u6570\u306e\u5c64\u5225\u30b5\u30f3\u30d7\u30ea\u30f3\u30b0\u624b\u6cd5\u306e\u3072\u3068\u3064\u3067\u3042\u308a,n\u500b\u306e\u5b9f\u9a13\u6570\u3092\u6307\u5b9a\u3057\u305f\u5834\u5408\uff0c\u5404\u5909\u6570\u3092n\u500b\u306e\u533a\u9593\u306b\u5206\u5272\u3057,\u533a\u9593\u304b\u3089\u30e9\u30f3\u30c0\u30e0\u306b\u5024\u3092\u53d6\u308a\u3060\u3057\u30e9\u30f3\u30c0\u30e0\u306b\u7d44\u307f\u5408\u308f\u305b\u3066\u3044\u304f\u5b9f\u9a13\u8a08\u753b\u6cd5\u3067\u3042\u308b.\n\u6587\u7ae0\u3060\u3068\u3088\u304f\u308f\u304b\u3089\u306a\u3044\u306e\u3067pyDOE\u306a\u308b\u30e2\u30b8\u30e5\u30fc\u30eb\u304c\u3042\u3063\u305f\u306e\u3067\u8a66\u3057\u3066\u307f\u308b.\n\n\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\npip install pyDOE\n\n\n\u5b9f\u9a13\u65705\u500b\u3001\u5909\u65702\u500b\u3067\u533a\u9593\u306e\u4e2d\u5fc3\u3092\u53d6\u308a\u51fa\u3059\u5834\u5408\u306e\u5b9f\u9a13\u30d1\u30bf\u30fc\u30f3\u306f\uff1f\n>from pyDOE import lhs\n>lhs(2,5,\"c\")\narray([[ 0.3,  0.7],\n       [ 0.1,  0.1],\n       [ 0.5,  0.9],\n       [ 0.9,  0.5],\n       [ 0.7,  0.3]])\n\n\u4e0a\u8a18\u3092\u518d\u3073\u5b9f\u884c\u3059\u308b\u3068\u7d44\u307f\u5408\u308f\u305b\u304c\u7570\u306a\u308b.\n\u3055\u3089\u306b\u5f15\u6570\"c\"\u3092\u6307\u5b9a\u3057\u306a\u3051\u308c\u3070\u533a\u9593\u5185\u304b\u3089\u30e9\u30f3\u30c0\u30e0\u306b\u62bd\u51fa\u3055\u308c\u308b.\n\u3053\u3093\u306a\u611f\u3058\u3067\u3042\u308b.\n\n\nOpenMDAO\u3092\u7528\u3044\u305f\u653e\u7269\u9762\u306e\u30e9\u30c6\u30f3\u8d85\u65b9\u683c\u30b5\u30f3\u30d7\u30ea\u30f3\u30b0\nsubjecttof(x,y)=(x\u22123)2+xy+(y+4)2\u22123\u221250.0\u2264x\u226450.0\u221250.0\u2264y\u226450.0f(x,y)=(x\u22123)2+xy+(y+4)2\u22123subjectto\u221250.0\u2264x\u226450.0\u221250.0\u2264y\u226450.0{\n\\begin{align}\n& f(x,y) = (x-3)^2 + xy + (y+4)^2 - 3 \\\\\n    {\\rm subject \\: to} \\: \\: \\:&  -50.0\\leq x \\leq 50.0 \\\\\n                                &  -50.0\\leq y \\leq 50.0\n\\end{align}\n}\n\nComponent\u306e\u6e96\u5099\n\u4e0b\u8a18\u306eparaboloid.py\u30d5\u30a1\u30a4\u30eb\u3092\u6e96\u5099\u3059\u308b\n\nparaboloid.py\nfrom openmdao.api import Component\nclass Paraboloid(Component):\n    \"\"\" Evaluates the equation f(x,y) = (x-3)^2 + xy + (y+4)^2 - 3 \"\"\"\n    def __init__(self):\n        super(Paraboloid, self).__init__()\n        self.add_param('x', val=0.0)\n        self.add_param('y', val=0.0)\n        self.add_output('f_xy', shape=1)\n    def solve_nonlinear(self, params, unknowns, resids):\n        \"\"\"f(x,y) = (x-3)^2 + xy + (y+4)^2 - 3 \"\"\"\n        x = params['x']; y = params['y']\n        unknowns['f_xy'] = (x-3.0)**2 + x*y + (y+4.0)**2 - 3.0\n\n\n\n\nProblem(\u554f\u984c\uff09\u306e\u8a2d\u5b9a\n\u4e0b\u8a18\u3092doe_paraboloid.py\u3092\u6e96\u5099\u3059\u308b.OpenMDAO\u3067\u653e\u7269\u9762\u306e\u6700\u5c0f\u5316\u554f\u984c\u3092\u89e3\u304f\u3068\u306e\u9055\u3044\u3092\u5f8c\u308d\u3067\u6982\u8aac\u3059\u308b.\n\ndoe_paraboloid.py\n#!/bin/pyhton\n\nfrom openmdao.api import IndepVarComp, Group, Problem,  SqliteRecorder\nfrom paraboloid import Paraboloid\nfrom openmdao.drivers.latinhypercube_driver import OptimizedLatinHypercubeDriver\nfrom openmdao.core.mpi_wrap import MPI\n\nif MPI: # pragma: no cover\n    # if you called this script with 'mpirun', then use the petsc data passing\n    from openmdao.core.petsc_impl import PetscImpl as impl\nelse:\n    # if you didn't use `mpirun`, then use the numpy data passing\n    from openmdao.api import BasicImpl as impl\n\ntop = Problem(impl=impl)\nroot = top.root = Group()\n\nroot.add('p1', IndepVarComp('x', 50.0), promotes=['x'])\nroot.add('p2', IndepVarComp('y', 50.0), promotes=['y'])\nroot.add('comp', Paraboloid(), promotes=['x', 'y', 'f_xy'])\n\ntop.driver = OptimizedLatinHypercubeDriver(num_samples=100, seed=0, population=20, \\\n            generations=4, norm_method=2, num_par_doe=5)\ntop.driver.add_desvar('x', lower=-50.0, upper=50.0)\ntop.driver.add_desvar('y', lower=-50.0, upper=50.0)\n\n\n\n\ndoe_paraboloid.py\u7d9a\u304d\ntop.driver.add_objective('f_xy')\n\nrecorder = SqliteRecorder('doe_paraboloid')\nrecorder.options['record_params'] = True\nrecorder.options['record_unknowns'] = True\nrecorder.options['record_resids'] = False\ntop.driver.add_recorder(recorder)\n\ntop.setup()\ntop.run()\n\ntop.cleanup()\n\n\nroot\u306bParaboloid()\u3092add\u3059\u308b\u969b,promotes\u3092\u5f15\u6570\u306b\u3059\u308b\u3053\u3068\u3067,p1.x\u3068comp.x\u306a\u3069\u3092\u81ea\u52d5\u63a5\u7d9a\u3092\u884c\u3063\u3066\u3044\u308b.\n\u4eca\u56de\u306fLHS\u306e\u5b9f\u9a13\u70b9\u306e\u914d\u7f6e\u3092GA\u3092\u4f7f\u3063\u3066\u3044\u3044\u611f\u3058\u306b\u3057\u3066\u304f\u308c\u308bdriver\u3067\u3042\u308bOptimizedLatinHypercubeDriver\u3092\u4f7f\u7528.\nOptimizedLatinHypercubeDriver\u306e\u5f15\u6570\u306b\u306f\u30b5\u30f3\u30d7\u30eb\u6570\u306f100,\u30e9\u30f3\u30c0\u30e0\u30b7\u30fc\u30c90, GA\u306e\u500b\u4f5320,\u4e16\u4ee34,GA\u306e\u4e2d\u3067\u5404DOE\u30dd\u30a4\u30f3\u30c8\u9593\u306e\u8ddd\u96e2\u3092\u6b63\u898f\u5316\u3059\u308b\u30ce\u30eb\u30e0(np.linalg.norm\u3067\u4f7f\u7528),num_par_doe\u3067\u4e26\u5217\u5316\u6570\u304c\u6307\u5b9a\u3055\u308c\u3066\u3044\u308b.\n\u30bf\u30fc\u30df\u30ca\u30eb\u3067\u4e0b\u8a18\u3092\u5b9f\u884c\u3059\u308b\nmpirun -np 5 python doe_paraboloid.py\n\n\n\n\u7d50\u679c\u306e\u8aad\u307f\u8fbc\u307f\n\nIPython\nimport numpy as np\nfrom matplotlib import pyplot as plt\nfrom mpl_toolkits.mplot3d import Axes3D\nimport sqlitedict\n\ndb =sqlitedict.SqliteDict(\"doe_paraboloid\",\"iterations\")\nres = np.array([[0.,0.,0.]] * len(db.items()))\nfor i, v in enumerate(db.items()):\n    res[i,0] = v[1][\"Unknowns\"][\"x\"]\n    res[i,1] = v[1][\"Unknowns\"][\"y\"]\n    res[i,2] = v[1][\"Unknowns\"][\"f_xy\"]\n\nx = np.arange(-50, 50, 4)\ny = np.arange(-50, 50, 4)\nX, Y = np.meshgrid(x, y)\nZ = (X-3.0)**2 + X*Y + (Y+4.0)**2 - 3.0\n\nfig = plt.figure()\nax = Axes3D(fig)\nax.plot_wireframe(X,Y,Z)\nax.scatter3D(res[:,0],res[:,1],res[:,2],c=\"r\", marker=\"o\")\nax.set_xlabel('x')\nax.set_ylabel('y')\nax.set_zlabel('f_xy')\nplt.show()\n\n\n\n\n# \u30e9\u30c6\u30f3\u8d85\u65b9\u683c\u30b5\u30f3\u30d7\u30ea\u30f3\u30b0(LHS)\u3068\u306f\n\u591a\u5909\u6570\u306e\u5c64\u5225\u30b5\u30f3\u30d7\u30ea\u30f3\u30b0\u624b\u6cd5\u306e\u3072\u3068\u3064\u3067\u3042\u308a,n\u500b\u306e\u5b9f\u9a13\u6570\u3092\u6307\u5b9a\u3057\u305f\u5834\u5408\uff0c\u5404\u5909\u6570\u3092n\u500b\u306e\u533a\u9593\u306b\u5206\u5272\u3057,\u533a\u9593\u304b\u3089\u30e9\u30f3\u30c0\u30e0\u306b\u5024\u3092\u53d6\u308a\u3060\u3057\u30e9\u30f3\u30c0\u30e0\u306b\u7d44\u307f\u5408\u308f\u305b\u3066\u3044\u304f\u5b9f\u9a13\u8a08\u753b\u6cd5\u3067\u3042\u308b.\n\u6587\u7ae0\u3060\u3068\u3088\u304f\u308f\u304b\u3089\u306a\u3044\u306e\u3067pyDOE\u306a\u308b\u30e2\u30b8\u30e5\u30fc\u30eb\u304c\u3042\u3063\u305f\u306e\u3067\u8a66\u3057\u3066\u307f\u308b.\n\n```bash:\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\npip install pyDOE\n```\n\n\u5b9f\u9a13\u65705\u500b\u3001\u5909\u65702\u500b\u3067\u533a\u9593\u306e\u4e2d\u5fc3\u3092\u53d6\u308a\u51fa\u3059\u5834\u5408\u306e\u5b9f\u9a13\u30d1\u30bf\u30fc\u30f3\u306f\uff1f\n\n```py\n>from pyDOE import lhs\n>lhs(2,5,\"c\")\narray([[ 0.3,  0.7],\n       [ 0.1,  0.1],\n       [ 0.5,  0.9],\n       [ 0.9,  0.5],\n       [ 0.7,  0.3]])\n```\n\n\u4e0a\u8a18\u3092\u518d\u3073\u5b9f\u884c\u3059\u308b\u3068\u7d44\u307f\u5408\u308f\u305b\u304c\u7570\u306a\u308b.\n\u3055\u3089\u306b\u5f15\u6570`\"c\"`\u3092\u6307\u5b9a\u3057\u306a\u3051\u308c\u3070\u533a\u9593\u5185\u304b\u3089\u30e9\u30f3\u30c0\u30e0\u306b\u62bd\u51fa\u3055\u308c\u308b.\n\u3053\u3093\u306a\u611f\u3058\u3067\u3042\u308b.\n\n---\n# OpenMDAO\u3092\u7528\u3044\u305f\u653e\u7269\u9762\u306e\u30e9\u30c6\u30f3\u8d85\u65b9\u683c\u30b5\u30f3\u30d7\u30ea\u30f3\u30b0\n\n```math\n\n\\begin{align}\n& f(x,y) = (x-3)^2 + xy + (y+4)^2 - 3 \\\\\n    {\\rm subject \\: to} \\: \\: \\:&  -50.0\\leq x \\leq 50.0 \\\\\n                                &  -50.0\\leq y \\leq 50.0\n\\end{align}\n```\n\n# Component\u306e\u6e96\u5099\n\u4e0b\u8a18\u306eparaboloid.py\u30d5\u30a1\u30a4\u30eb\u3092\u6e96\u5099\u3059\u308b\n\n```py:paraboloid.py\nfrom openmdao.api import Component\nclass Paraboloid(Component):\n    \"\"\" Evaluates the equation f(x,y) = (x-3)^2 + xy + (y+4)^2 - 3 \"\"\"\n    def __init__(self):\n        super(Paraboloid, self).__init__()\n        self.add_param('x', val=0.0)\n        self.add_param('y', val=0.0)\n        self.add_output('f_xy', shape=1)\n    def solve_nonlinear(self, params, unknowns, resids):\n        \"\"\"f(x,y) = (x-3)^2 + xy + (y+4)^2 - 3 \"\"\"\n        x = params['x']; y = params['y']\n        unknowns['f_xy'] = (x-3.0)**2 + x*y + (y+4.0)**2 - 3.0\n```\n\n---\n# Problem(\u554f\u984c\uff09\u306e\u8a2d\u5b9a \n\u4e0b\u8a18\u3092doe_paraboloid.py\u3092\u6e96\u5099\u3059\u308b.[OpenMDAO\u3067\u653e\u7269\u9762\u306e\u6700\u5c0f\u5316\u554f\u984c\u3092\u89e3\u304f](http://qiita.com/TatsuyaKatayama/items/16d916a9e4dc243ca12f)\u3068\u306e\u9055\u3044\u3092\u5f8c\u308d\u3067\u6982\u8aac\u3059\u308b.\n\n```py:doe_paraboloid.py\n#!/bin/pyhton\n\nfrom openmdao.api import IndepVarComp, Group, Problem,  SqliteRecorder\nfrom paraboloid import Paraboloid\nfrom openmdao.drivers.latinhypercube_driver import OptimizedLatinHypercubeDriver\nfrom openmdao.core.mpi_wrap import MPI\n\nif MPI: # pragma: no cover\n    # if you called this script with 'mpirun', then use the petsc data passing\n    from openmdao.core.petsc_impl import PetscImpl as impl\nelse:\n    # if you didn't use `mpirun`, then use the numpy data passing\n    from openmdao.api import BasicImpl as impl\n\ntop = Problem(impl=impl)\nroot = top.root = Group()\n\nroot.add('p1', IndepVarComp('x', 50.0), promotes=['x'])\nroot.add('p2', IndepVarComp('y', 50.0), promotes=['y'])\nroot.add('comp', Paraboloid(), promotes=['x', 'y', 'f_xy'])\n\ntop.driver = OptimizedLatinHypercubeDriver(num_samples=100, seed=0, population=20, \\\n            generations=4, norm_method=2, num_par_doe=5)\ntop.driver.add_desvar('x', lower=-50.0, upper=50.0)\ntop.driver.add_desvar('y', lower=-50.0, upper=50.0)\n```\n\n---\n\n```py:doe_paraboloid.py\u7d9a\u304d\ntop.driver.add_objective('f_xy')\n\nrecorder = SqliteRecorder('doe_paraboloid')\nrecorder.options['record_params'] = True\nrecorder.options['record_unknowns'] = True\nrecorder.options['record_resids'] = False\ntop.driver.add_recorder(recorder)\n\ntop.setup()\ntop.run()\n\ntop.cleanup()\n```\nroot\u306bParaboloid()\u3092add\u3059\u308b\u969b,promotes\u3092\u5f15\u6570\u306b\u3059\u308b\u3053\u3068\u3067,p1.x\u3068comp.x\u306a\u3069\u3092\u81ea\u52d5\u63a5\u7d9a\u3092\u884c\u3063\u3066\u3044\u308b.\n\n\u4eca\u56de\u306fLHS\u306e\u5b9f\u9a13\u70b9\u306e\u914d\u7f6e\u3092GA\u3092\u4f7f\u3063\u3066\u3044\u3044\u611f\u3058\u306b\u3057\u3066\u304f\u308c\u308bdriver\u3067\u3042\u308bOptimizedLatinHypercubeDriver\u3092\u4f7f\u7528.\nOptimizedLatinHypercubeDriver\u306e\u5f15\u6570\u306b\u306f\u30b5\u30f3\u30d7\u30eb\u6570\u306f100,\u30e9\u30f3\u30c0\u30e0\u30b7\u30fc\u30c90, GA\u306e\u500b\u4f5320,\u4e16\u4ee34,GA\u306e\u4e2d\u3067\u5404DOE\u30dd\u30a4\u30f3\u30c8\u9593\u306e\u8ddd\u96e2\u3092\u6b63\u898f\u5316\u3059\u308b\u30ce\u30eb\u30e0(np.linalg.norm\u3067\u4f7f\u7528),num_par_doe\u3067\u4e26\u5217\u5316\u6570\u304c\u6307\u5b9a\u3055\u308c\u3066\u3044\u308b.\n\n\u30bf\u30fc\u30df\u30ca\u30eb\u3067\u4e0b\u8a18\u3092\u5b9f\u884c\u3059\u308b\n\n```bash\nmpirun -np 5 python doe_paraboloid.py\n```\n\n---\n# \u7d50\u679c\u306e\u8aad\u307f\u8fbc\u307f\n\n```py:IPython\nimport numpy as np\nfrom matplotlib import pyplot as plt\nfrom mpl_toolkits.mplot3d import Axes3D\nimport sqlitedict\n\ndb =sqlitedict.SqliteDict(\"doe_paraboloid\",\"iterations\")\nres = np.array([[0.,0.,0.]] * len(db.items()))\nfor i, v in enumerate(db.items()):\n    res[i,0] = v[1][\"Unknowns\"][\"x\"]\n    res[i,1] = v[1][\"Unknowns\"][\"y\"]\n    res[i,2] = v[1][\"Unknowns\"][\"f_xy\"]\n\nx = np.arange(-50, 50, 4)\ny = np.arange(-50, 50, 4)\nX, Y = np.meshgrid(x, y)\nZ = (X-3.0)**2 + X*Y + (Y+4.0)**2 - 3.0\n\nfig = plt.figure()\nax = Axes3D(fig)\nax.plot_wireframe(X,Y,Z)\nax.scatter3D(res[:,0],res[:,1],res[:,2],c=\"r\", marker=\"o\")\nax.set_xlabel('x')\nax.set_ylabel('y')\nax.set_zlabel('f_xy')\nplt.show()\n```\n\n---\n\n![doe_paraboloid.png](https://qiita-image-store.s3.amazonaws.com/0/132571/4dfd4ddd-0e60-39c9-8c3f-824a1280c0bf.png)\n\n", "tags": ["\u6700\u9069\u5316", "\u5b9f\u9a13\u8a08\u753b\u6cd5", "Python", "OpenMDAO", "DOE"]}