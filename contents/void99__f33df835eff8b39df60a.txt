{"context": "\n\n\u3053\u308c\u306f\u4f55\n\u30c7\u30fc\u30bf\u30d5\u30a1\u30a4\u30eb\u3084\u95a2\u6570\u3092\u4f5c\u56f3\u3059\u308bMaplotlib\u306e\u30b9\u30af\u30ea\u30d7\u30c8\u3092\u4f5c\u6210\u3059\u308b\u305f\u3081\u306eGUI\u30a2\u30d7\u30ea\u3002\u8ef8\u306e\u30d5\u30a9\u30f3\u30c8\u3084\u8ef8\u306e\u592a\u3055\u306a\u3069\u306e\u7d30\u304b\u3044\u8a2d\u5b9a\u3092GUI\u3067\u9078\u629e\u3067\u304d\u308b\u3002\u4e00\u5fdc\u3001\u30af\u30ed\u30b9\u30d7\u30e9\u30c3\u30c8\u30d5\u30a9\u30fc\u30e0\u306e\u3064\u3082\u308a\u3002\n\u76f4\u63a5\u65e5\u672c\u8a9e\u3092\u5165\u529b\u3067\u304d\u308b\u304b\u3069\u3046\u304b\u306f\u3001tk\u3067\u65e5\u672c\u8a9e\u306e\u5165\u529b\u304c\u53ef\u80fd\u304b\u3069\u3046\u304b\u306b\u3088\u308a\u307e\u3059\u3002\u3067\u304d\u306a\u3044\u5834\u5408\u306f\u30b3\u30d4\u30da\u3067\u5bfe\u51e6\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n\n\n\u8a2d\u5b9a\n\nglobalVarSet\u95a2\u6570\u306e\u4e2d\u3067\u30d5\u30a9\u30f3\u30c8\u3084\u30a8\u30c7\u30a3\u30bf\u3092\u81ea\u5206\u306e\u74b0\u5883\u306b\u5408\u308f\u305b\u3066\u5909\u66f4\u3059\u308b\u3002\n\u51e6\u7406\u3059\u308b\u30c7\u30fc\u30bf\u30d5\u30a1\u30a4\u30eb\u306e\u6570\u3092\u5897\u3084\u3057\u305f\u3051\u308c\u3070DATA_LMSTR\u30ea\u30b9\u30c8\u306e\u8981\u7d20\u3092\u5897\u3084\u3059\u3002\u95a2\u6570\u306a\u3089FUNC_LMSTR\u30ea\u30b9\u30c8\u306e\u8981\u7d20\u3092\u5897\u3084\u3059\u3002\n\n\n\u30d0\u30b0\nEl Captitan\u3067\u306ftkFileDialog\u306a\u3069\u3092\u4e00\u5ea6\u547c\u3073\u51fa\u3057\u305f\u5f8c\u306b\u30d7\u30ed\u30c3\u30c8\u3059\u308b\u3068\u9589\u3058\u305f\u30a6\u30a3\u30f3\u30c9\u30a6\u304c\u5fa9\u6d3b\u3057\u3066\u3057\u307e\u3046\u3002Ubuntu\u3067\u306f\u554f\u984c\u306a\u3044\u306e\u3060\u3051\u3069...\u3002\n\n2016/07/03 \u4fee\u6b63\n\u65e5\u672c\u8a9e\u306e\u30e9\u30d9\u30eb\u3042\u308a\u3067\u30b9\u30af\u30ea\u30d7\u30c8\u4fdd\u5b58\u51fa\u6765\u306a\u304b\u3063\u305f\u70b9\u3092\u4fee\u6b63\nline 320: cmd_text = cmd_text + JFONT.encode(JCODE)\n       \u2193\nline 320: cmd_text = cmd_text\n#!/usr/bin/python\n# coding:utf-8\n#\n# mk_matplotscript.py\n# Copyright(c) by void99\n#  maplotlib\u306e\u30b9\u30af\u30ea\u30d7\u30c8\u4f5c\u6210\u7528\u306eGUI\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30fc\u30b9\n#  2016/06/08 Ver 0.9\n#  2016/07/03 Ver 1.0 \u65e5\u672c\u8a9e\u306e\u30e9\u30d9\u30eb\u3042\u308a\u3067\u30b9\u30af\u30ea\u30d7\u30c8\u4fdd\u5b58\u51fa\u6765\u306a\u304b\u3063\u305f\u70b9\u3092\u4fee\u6b63\n\nfrom tkFileDialog import askopenfilename, asksaveasfilename\nfrom tkMessageBox import showwarning\nfrom pylab import *\nfrom functools import *\nfrom ScrolledText import ScrolledText\nimport matplotlib.font_manager as fm\nimport subprocess as sub\nimport Tkinter as Tk\nimport os, sys\n\n__author__  = \"void99\"\n__version__ = \"1.0\"\n\n# \u30d5\u30a9\u30f3\u30c8\u306e\u8a2d\u5b9a \nDEFAULT_FONT = ('Helvetica', 12)\n\ndef globalVarSet():\n    global JCODE, JFONT, TrueTypeUSE, EDITOR, DATA_LMSTR, FUNC_LMSTR, NEWLINE\n    DATA_LMSTR = [\"r-o\", \"g-s\"]  # \u30c7\u30fc\u30bf\u306e\u7dda\u30fb\u70b9\u7a2e\n    FUNC_LMSTR = [\"k-\"]           # \u95a2\u6570\u306e\u7dda\u30fb\u70b9\u7a2e\n    JCODE = \"utf8\"\n    NEWLINE = \"\\n\"\n    if sys.platform == \"darwin\":  # MacOS\n        # El Capitan\u306f\u65e5\u672c\u8a9e\u30d5\u30a9\u30f3\u30c8\u306e\u5834\u6240\u304c\u9055\u3046\n        JFONT = \"/System/Library/Fonts/\u30d2\u30e9\u30ae\u30ce\u89d2\u30b4\u30b7\u30c3\u30af W5.ttc\"\n        # CotEditor\u306b\u6c7a\u3081\u3046\u3061\n        EDITOR = \"/Applications/CotEditor.app/Contents/MacOS/CotEditor\"\n    elif sys.platform == \"win32\":\n        fontpath = fm.win32FontDirectory() + u\"\\\\\"\n        JFONT = fontpath + \"meiryo.ttc\" # \u597d\u307f\u306eTrueType\u30d5\u30a9\u30f3\u30c8\u30d5\u30a1\u30a4\u30eb\u3092\u6307\u5b9a\n        EDITOR = \"c:\\\\Hidemaru\\\\hidemaru.exe\"\n    elif sys.platform == \"linux2\":\n        # Ubuntu 12\n        JFONT = \"/usr/share/fonts/truetype/fonts-japanese-gothic.ttf\"\n        EDITOR = \"/usr/bin/gedit\"\n\n    if os.path.exists(JFONT):\n        TrueTypeUSE = True\n    else:\n        TrueTypeUSE = False\n    if not os.path.exists(EDITOR):\n          EDITOR = \"\"\n\nclass LabelEntry():\n    def __init__(self, master, label, width, value=\"\"):\n        self.__entrystr = Tk.StringVar()\n        lbl = Tk.Label(master, text = label, font=DEFAULT_FONT)\n        ent = Tk.Entry(master, width = width, font=DEFAULT_FONT,\n            textvariable=self.__entrystr)\n        lbl.pack(side = Tk.LEFT, padx = 1)\n        ent.pack(side = Tk.LEFT, padx = 1)\n        self.__entrystr.set(value)\n\n    def get(self):\n        return self.__entrystr.get()\n\n    def set(self, value):\n        self.__entrystr.set(value)\n\nclass FrameWithWidget(Tk.Frame):\n    def __init__(self, master=None, anchor=Tk.W, side=Tk.TOP, pad=0, bd=0):\n        Tk.Frame.__init__(self, master, relief=Tk.GROOVE, bd=bd)\n        self.pack(anchor=anchor, side=side, padx=pad, pady=pad)\n\n    def addLabelEntry(self, label, width, value=\"\"):\n        return LabelEntry(self, label, width, value)\n\n    def addButton(self, text, command, fsize=DEFAULT_FONT[1]):\n        Tk.Button(self, text=text, command=command, \n            font=('Helvetica', fsize)).pack(side=Tk.LEFT, padx=2, pady=0)\n\n    def addRadiobutton(self, text):\n        if not 'radbtnvalue' in vars(self): self.radbtnvalue = 0\n        if not 'radbtnvariable' in vars(self): self.radbtnvariable = Tk.IntVar()\n        Tk.Radiobutton(self, text=text, font=DEFAULT_FONT,\n            value=self.radbtnvalue, variable=self.radbtnvariable).pack(side=Tk.LEFT)\n        self.radbtnvalue += 1\n        return self.radbtnvariable\n\n    def addCheckbutton(self, text):\n        cbtnvariable = Tk.BooleanVar()\n        Tk.Checkbutton(self, text=text, font=DEFAULT_FONT,\n            variable=cbtnvariable).pack(side=Tk.LEFT)\n        return cbtnvariable\n\n    def addLabel(self, text):\n        lbl = Tk.Label(self, text=text, font=DEFAULT_FONT)\n        lbl.pack(side=Tk.LEFT)\n        return lbl\n\nclass DataSetWidget():\n    def __init__(self, master, id=1):\n        f = FrameWithWidget(master, pad=1, bd=2)\n        f1 = FrameWithWidget(f, pad=1, bd=0)\n        self.dataname = f1.addLabelEntry(u\"\u30d5\u30a1\u30a4\u30eb \" + str(id), 26)\n        f1.addButton(\"...\", self.openFileName, 8)\n        if EDITOR != \"\":\n            f1.addButton(\"E\", self.viewFile, 8)\n        self.legend = f1.addLabelEntry(u\"\u51e1\u4f8b\", 15)\n        self.xcol = f.addLabelEntry(u\"X\u7cfb\u5217\", 3, 1)\n        self.ycol = f.addLabelEntry(u\"Y\u7cfb\u5217\", 3, 2)\n        f.addButton(u\"\u30b9\u30bf\u30a4\u30eb\", self.showLineMakerStyle)\n        self.lmstr = Tk.StringVar()\n        Tk.Entry(f, width = 3, textvariable=self.lmstr).pack(side = Tk.LEFT, padx = 1)\n        self.lmstr.set(\"r-o\")\n        self.linesize = f.addLabelEntry(u\"\u7dda\u5e45\", 3, 1.5)\n        self.marksize = f.addLabelEntry(u\"\u70b9\u30b5\u30a4\u30ba\", 2, 8)\n\n    def viewFile(self):\n        if EDITOR != \"\":\n            fname = self.dataname.get().encode(JCODE)\n            if len(fname) > 0:\n                sub.Popen([EDITOR, fname])\n            else:\n                sub.Popen([EDITOR])\n\n    def openFileName(self):\n        self.setFileName(askopenfilename())\n\n    def setFileName(self, filename):\n        if filename != \"\":\n            self.dataname.set(filename)\n            self.legend.set(os.path.basename(filename))\n\n    def showLineMakerStyle(self):\n        linestyle = ('-', '--', '-.', ':')\n        for i, ls in enumerate(linestyle):\n            plot([0,1],[i,i], \"k\" + ls, lw=1.5)\n            text(-0.1,i, \"'\" + ls + \"'\", ha = 'right', va='center', fontsize=16)\n        nl = len(linestyle)\n        colors = ('r', 'g', 'b', 'c', 'm', 'y', 'k')\n        for i, c in enumerate(colors):\n            plot([0,1],[nl+i,nl+i], c + \"-\", lw=2)\n            text(-0.1,nl+i, \"'\" + c + \"'\", ha = 'right', va='center', fontsize=16)\n        markers = ('.', ',', 'o', 'v', '^', '<', '>', '1', '2', '3', '4', 's', 'p', '*', 'h', 'H', '+', 'x', 'D', 'd', '|', '_')\n        for i, m in enumerate(markers):\n            x = 1.7 + (i // 11)*0.7; y = i % 11\n            plot([x],[y], \"r\" + m, ms=12)\n            text(x-0.2,y, \"'\" + m + \"'\", ha = 'right', va='center', fontsize=16)\n        xlim(-0.5, 3); ylim(-1,11)\n        xticks([]); yticks([])\n        show()\n\nclass FuncWidget():\n    def __init__(self, master):\n        f = FrameWithWidget(master, pad=1, bd=2)\n        f1 = FrameWithWidget(f, pad=1, bd=0)\n        self.formula = f1.addLabelEntry(u\"\u95a2\u6570\", 37)\n        self.legend = f1.addLabelEntry(u\"\u51e1\u4f8b\", 15)\n        self.nsamp = f.addLabelEntry(u\"\u30b5\u30f3\u30d7\u30eb\u6570\", 5, 100)\n        f.addLabel(u\"\u30b9\u30bf\u30a4\u30eb\")\n        self.lmstr = Tk.StringVar()\n        Tk.Entry(f, width = 3, textvariable=self.lmstr).pack(side = Tk.LEFT, padx = 1)\n        self.lmstr.set(\"k-\")\n        self.linesize = f.addLabelEntry(u\"\u7dda\u5e45\", 3, 1.5)\n        self.marksize = f.addLabelEntry(u\"\u70b9\u30b5\u30a4\u30ba\", 2, 8)\n\nclass TextLabelWidget():\n    def __init__(self, master):\n        f = FrameWithWidget(master, pad=1, bd=2)\n        f1 = FrameWithWidget(f, pad=1, bd=0)\n        self.text = f1.addLabelEntry(u\"\u6ce8\u91c8\", 37)\n        self.x = f1.addLabelEntry(u\"X\u4f4d\u7f6e\", 4, 0.5)\n        self.y = f1.addLabelEntry(u\"Y\u4f4d\u7f6e\", 4, 0.5)\n        fw = FrameWithWidget(f)\n        f1 = FrameWithWidget(fw, side=Tk.LEFT)\n        self.color = f1.addLabelEntry(u\"\u8272\", 3, 'k')\n        self.fsize = f1.addLabelEntry(u\"\u30d5\u30a9\u30f3\u30c8\u30b5\u30a4\u30ba\", 3, 20)\n        f1 = FrameWithWidget(fw, side=Tk.LEFT)\n        f1.addLabel(u\"\u3000\u3000\u5ea7\u6a19\u7cfb\")\n        f1.addRadiobutton(u\"\u30b0\u30e9\u30d5\u8ef8\")\n        self.trans = f1.addRadiobutton(u\"\u30c7\u30fc\u30bf\")\n        self.trans.set(0)\n        f1 = FrameWithWidget(f, side=Tk.LEFT)\n        f1.addLabel(u\"\u6a2a\u914d\u7f6e\")\n        f1.addRadiobutton(u\"\u5de6\")\n        f1.addRadiobutton(u\"\u4e2d\")\n        self.halign = f1.addRadiobutton(u\"\u53f3\")\n        self.halign.set(0)\n        f1 = FrameWithWidget(f, side=Tk.TOP)\n        f1.addLabel(u\"\u3000\u3000\u7e26\u914d\u7f6e\")\n        f1.addRadiobutton(u\"\u4e0a\")\n        f1.addRadiobutton(u\"\u4e2d\")\n        f1.addRadiobutton(u\"\u4e0b\")\n        self.valign = f1.addRadiobutton(u\"\u30d9\u30fc\u30b9\")\n        self.valign.set(0)\n\nclass App(Tk.Frame):\n    def __init__(self, master=None):\n        Tk.Frame.__init__(self, master)\n        self.pack()\n        self.init()\n\n    def init(self):\n        self.master.title(\"Script maker for matplotlib by \" + __author__ + \" ver.\" + __version__)\n        self.master.bind(\"<Return>\", self.callCmdPlot )\n        self.dataset = []\n        self.funcset = []\n        f = FrameWithWidget(self, pad=1, bd=3)\n        for i, lm in enumerate(DATA_LMSTR):\n            self.dataset.append(DataSetWidget(f, i+1))\n            self.dataset[i].lmstr.set(lm)    \n        f = FrameWithWidget(self, pad=1, bd=3)\n        for lm in FUNC_LMSTR:\n            func = FuncWidget(f)\n            func.lmstr.set(lm)    \n            self.funcset.append(func)\n        f1 = FrameWithWidget(self, pad=1, bd=2)\n        f = FrameWithWidget(f1, side=Tk.LEFT)\n        self.xmin = f.addLabelEntry(u\"X\u6700\u5c0f\u5024\", 6)\n        self.xmax = f.addLabelEntry(u\"X\u6700\u5927\u5024\", 6)\n        f = FrameWithWidget(f1, side=Tk.LEFT)\n        self.ymin = f.addLabelEntry(u\"\u3000Y\u6700\u5c0f\u5024\", 6)\n        self.ymax = f.addLabelEntry(u\"Y\u6700\u5927\u5024\", 6)\n        f = FrameWithWidget(self, pad=1, bd=2)\n        Tk.Label(f, text = u'\u8ef8\u30e9\u30d9\u30eb\u3000', font=DEFAULT_FONT).pack(side=Tk.LEFT)\n        self.pxlabel = FrameWithWidget(f, side=Tk.LEFT).addLabelEntry(u\"X\", 24)\n        self.pylabel = FrameWithWidget(f, side=Tk.LEFT).addLabelEntry(u\"Y\", 24)\n        self.ptitle  = FrameWithWidget(self).addLabelEntry(u\"\u30bf\u30a4\u30c8\u30eb\", 56)\n        f = FrameWithWidget(self)\n        f1 = FrameWithWidget(f, side=Tk.LEFT, pad=1, bd=2)\n        Tk.Label(f1, text=u\"\u30d5\u30a9\u30f3\u30c8\u30b5\u30a4\u30ba\", font=DEFAULT_FONT).pack(anchor=Tk.W)\n        self.plfsize = f1.addLabelEntry(u\"\u8ef8\u30e9\u30d9\u30eb\", 4, 20)\n        self.ptfsize = f1.addLabelEntry(u\"\u76ee\u76db\u308a\u6570\u5b57\", 4, 18)\n        f1 = FrameWithWidget(f, side=Tk.LEFT, pad=1, bd=2)\n        f = FrameWithWidget(f1, side=Tk.TOP, bd=0, pad=0)\n        self.framewidth = f.addLabelEntry(u\"\u67a0\u306e\u592a\u3055\", 4, 1.7)\n        f = FrameWithWidget(f1, side=Tk.TOP)\n        f.addLabel(u\"\u76ee\u76db\u65b9\u5411\")\n        f.addRadiobutton(u\"\u5185\u5074\")\n        f.addRadiobutton(u\"\u5916\u5074\")\n        self.ticksdir = f.addRadiobutton(u\"\u306a\u3057\")\n        self.ticksdir.set(0)\n        f = FrameWithWidget(self)\n        self.textlabel = TextLabelWidget(f)\n        f = FrameWithWidget(self)\n        if TrueTypeUSE:\n            self.jfonton = f.addCheckbutton(u\"\u65e5\u672c\u8a9e\")\n        else:\n            self.jfonton = Tk.BooleanVar()\n        self.legendon = f.addCheckbutton(u\"\u51e1\u4f8b\u8868\u793a\")\n        self.mtickon  = f.addCheckbutton(u\"\u526f\u76ee\u76db\")\n        self.gridon   = f.addCheckbutton(u\"\u30b0\u30ea\u30c3\u30c9\")\n        self.x0on     = f.addCheckbutton(\"X=0\")\n        self.y0on     = f.addCheckbutton(\"Y=0\")\n        self.xyon     = f.addCheckbutton(\"Y=X\")\n        f = FrameWithWidget(self)\n        f.addButton(u\"\u30d7\u30ed\u30c3\u30c8\", self.cmd_plot)\n        f.addButton(u\"\u30b9\u30af\u30ea\u30d7\u30c8\u4fdd\u5b58\", self.writeScript)\n        f.addButton(u\"\u7d42\u4e86\", self.cmd_quit)\n\n    def setFileName(self, filenames):\n        n = len(filenames)\n        if(n == 1): return\n        nmax = len(self.dataset)\n        if( (n-1) < nmax ): nmax = (n-1)\n        for i in range(nmax):\n            self.dataset[i].setFileName(filenames[i+1])\n\n    def showScript(self):\n        if not self.checkPlot(): return\n        sub_win = Tk.Toplevel()\n        t = TextWidget(sub_win)\n        t.insert_text(self.make_cmdstr())\n\n    def callCmdPlot( self, event ):\n        self.cmd_plot()\n\n    def writeScript(self):\n        if not self.checkPlot(): return\n        fname = asksaveasfilename(title=u\"\u30b9\u30af\u30ea\u30d7\u30c8\u4fdd\u5b58\", filetypes=[('python script', '*.py')], defaultextension=\".py\")\n        if len(fname) == 0: return\n        with open(fname, \"w\") as f:\n            print >> f, self.make_cmdstr()\n\n    def make_cmdstr(self):\n        cmd_text = \"#!/usr/bin/python\"\n        cmd_text = cmd_text + NEWLINE+ '# coding: ' + JCODE\n        cmd_text = cmd_text + NEWLINE+ 'from pylab import *'\n        cmd_text = cmd_text + NEWLINE+ 'import matplotlib.font_manager as fm'\n        cmd_text = cmd_text + NEWLINE+ ''\n        write_getdata = False\n        for dset in self.dataset:\n            filename = dset.dataname.get()\n            if len(filename) == 0: continue\n            write_getdata = True\n        if(write_getdata):\n            cmd_text = cmd_text + NEWLINE+ '# \u30c7\u30fc\u30bf\u306e\u8aad\u307f\u8fbc\u307f\u95a2\u6570'\n            cmd_text = cmd_text + NEWLINE+ '# n1, n2\u756a\u76ee\u306e\u5217\u3092array\u3067\u8fd4\u3059'\n            cmd_text = cmd_text + NEWLINE+ 'def getdata(fname, n1, n2):'\n            cmd_text = cmd_text + NEWLINE+ '    data = loadtxt(fname)'\n            cmd_text = cmd_text + NEWLINE+ '    return data[:,(n1-1)], data[:,(n2-1)]'\n            cmd_text = cmd_text + NEWLINE+ ''\n        cmd_text = cmd_text + NEWLINE+ 'def main():'\n        cmd_text = cmd_text + NEWLINE+ '# \u30e9\u30d9\u30eb\u306e\u30d5\u30a9\u30f3\u30c8\u30b5\u30a4\u30ba'\n        cmd_text = cmd_text + NEWLINE+ '    lfsize = ' + self.plfsize.get()\n        cmd_text = cmd_text + NEWLINE+ '# \u76ee\u76db\u308a\u306e\u30d5\u30a9\u30f3\u30c8\u30b5\u30a4\u30ba'\n        cmd_text = cmd_text + NEWLINE+ '    tfsize = ' + self.ptfsize.get()\n        cmd_text = cmd_text + NEWLINE+ '# \u67a0\u306e\u592a\u3055'\n        cmd_text = cmd_text + NEWLINE+ '    axlinelw = ' + self.framewidth.get()\n        cmd_text = cmd_text + NEWLINE+ '    rcParams[\"xtick.labelsize\"] = tfsize'\n        cmd_text = cmd_text + NEWLINE+ '    rcParams[\"ytick.labelsize\"] = tfsize'\n        cmd_text = cmd_text + NEWLINE+ '    rcParams[\"axes.linewidth\"] = axlinelw'\n        if self.ticksdir.get() == 1:\n            cmd_text = cmd_text + NEWLINE+ '# \u76ee\u76db\u308a\u306e\u5411\u304d'\n            cmd_text = cmd_text + NEWLINE+ '    rcParams[\"xtick.direction\"] = \"out\"'\n            cmd_text = cmd_text + NEWLINE+ '    rcParams[\"ytick.direction\"] = \"out\"'\n        if self.jfonton.get():\n            cmd_text = cmd_text + NEWLINE+ '# TrueType\u30d5\u30a9\u30f3\u30c8\u306e\u4f7f\u7528'\n            cmd_text = cmd_text + NEWLINE+ '    rcParams[\"pdf.fonttype\"] = 42'\n            cmd_text = cmd_text + NEWLINE+ '    fp = {\"fontproperties\":fm.FontProperties(fname=\"'\n            cmd_text = cmd_text\n            cmd_text = cmd_text + '\")}'\n        else:\n            cmd_text = cmd_text + NEWLINE+ '    fp = {} # dummy for truetype font'\n        cmd_text = cmd_text + NEWLINE+ '    figure(facecolor=\"w\")'\n        cmd_text = cmd_text + NEWLINE+ '# \u4f59\u767d\u306e\u8a2d\u5b9a'\n        cmd_text = cmd_text + NEWLINE+ '    subplots_adjust(left=0.15, bottom=0.15)'\n        cmd_text = cmd_text + NEWLINE+ '# \u63cf\u753b\u4e2d\u306eaxes\u306e\u53d6\u5f97'\n        cmd_text = cmd_text + NEWLINE+ '    ax = gca()'\n        labelonFlag = False\n        for dset in self.dataset:\n            filename = dset.dataname.get()\n            if len(filename) == 0: continue\n            xcol = int(dset.xcol.get())\n            ycol = int(dset.ycol.get())\n            lmstr = dset.lmstr.get()\n            label = dset.legend.get().encode(JCODE)\n            marksize = float(dset.marksize.get())\n            linesize = float(dset.linesize.get())\n            cmd_text = cmd_text + NEWLINE+ '# \u30c7\u30fc\u30bf\u306e\u30d7\u30ed\u30c3\u30c8'\n            cmd_text = cmd_text + NEWLINE+ '    x, y = getdata(u\"%s\", %d, %d)'%(filename.encode(JCODE), xcol, ycol)\n            if label:\n                cmd_text = cmd_text + NEWLINE+ '    plot(x, y, \"%s\", ms=%d, lw=%d, label=u\"%s\")'%(lmstr,\n                    marksize,linesize,label)\n                labelonFlag = True\n            else:\n                cmd_text = cmd_text + NEWLINE+ '    plot(x, y, \"%s\", ms=%d, lw=%d)'%(lmstr,\n                     marksize,linesize)\n        xrangeset = True\n        l1 = self.xmin.get(); l2 = self.xmax.get()\n        for fset in self.funcset:\n            if len(fset.formula.get()) > 0:\n                if xrangeset:\n                    cmd_text = cmd_text + NEWLINE+ '# \u95a2\u6570\u306eX\u7bc4\u56f2'\n                    if len(l1) > 0 and len(l2) > 0:\n                        cmd_text = cmd_text + NEWLINE+ \"    x1, x2 = %s, %s\"%(l1, l2)\n                    else:\n                        cmd_text = cmd_text + NEWLINE+ \"    x1, x2 = xlim()\"\n                    xrangeset = False\n                cmd_text = cmd_text + NEWLINE+ '# \u95a2\u6570\u306e\u30d7\u30ed\u30c3\u30c8'\n                cmd_text = cmd_text + NEWLINE+ \"    x = linspace(x1, x2, %s)\"%(fset.nsamp.get())\n                cmd_text = cmd_text + NEWLINE+ \"    y = \" + fset.formula.get()\n                lmstr = fset.lmstr.get()\n                label = fset.legend.get().encode(JCODE)\n                marksize = float(fset.marksize.get())\n                linesize = float(fset.linesize.get())\n                if label:\n                    cmd_text = cmd_text + NEWLINE+ '    plot(x, y, \"%s\", ms=%d, lw=%d, label=u\"%s\")'%(lmstr,marksize,\n                            linesize,label)\n                    labelonFlag = True\n                else:\n                    cmd_text = cmd_text + NEWLINE+ '    plot(x, y, \"%s\", ms=%d, lw=%d)'%(lmstr,marksize,linesize)\n        if len(l1) > 0 and len(l2) > 0:\n            cmd_text = cmd_text + NEWLINE+ '# \u30d7\u30ed\u30c3\u30c8\u3059\u308bX\u306e\u7bc4\u56f2'\n            cmd_text = cmd_text + NEWLINE+ '    xlim(' + l1 + ', ' +  l2 + ')'\n        l1 = self.ymin.get(); l2 = self.ymax.get()\n        if len(l1) > 0 and len(l2) > 0:\n            cmd_text = cmd_text + NEWLINE+ '# \u30d7\u30ed\u30c3\u30c8\u3059\u308bY\u306e\u7bc4\u56f2'\n            cmd_text = cmd_text + NEWLINE+ '    ylim(' + l1 + ', ' +  l2 + ')'\n        if self.legendon.get() and labelonFlag:\n            cmd_text = cmd_text + NEWLINE+ '# \u51e1\u4f8b\u306e\u8a2d\u5b9a'\n            cmd_text = cmd_text + NEWLINE+ '# \u4f4d\u7f6e(loc)\u306f\"lower\", \"upper\", \"right\", \"center\", \"left\"'\n            cmd_text = cmd_text + NEWLINE+ '# \u306e\u7d44\u307f\u5408\u308f\u305b\u3067\u6307\u5b9a\u3067\u304d\u308b'\n            cmd_text = cmd_text + NEWLINE+ '    leg = legend(loc=\"best\", numpoints=1)'\n            cmd_text = cmd_text + NEWLINE+ '    for lt in leg.get_texts(): setp(lt, fontsize=tfsize-2,  **fp)'\n        l = self.pxlabel.get().encode(JCODE)\n        if len(l) > 0: cmd_text = cmd_text + NEWLINE+ '    xlabel(u\"' + l + '\", fontsize=lfsize, labelpad=10, **fp)'\n        l = self.pylabel.get().encode(JCODE)\n        if len(l) > 0: cmd_text = cmd_text + NEWLINE+ '    ylabel(u\"' + l + '\", fontsize=lfsize, labelpad=10, **fp)'\n        l = self.ptitle.get().encode(JCODE)\n        if len(l) > 0: cmd_text = cmd_text + NEWLINE+ '    title(u\"' + l + '\", fontsize=lfsize+2, **fp)'\n        if self.gridon.get(): cmd_text = cmd_text + NEWLINE+ '    grid(True)'\n        if self.ticksdir.get() == 2:\n            cmd_text = cmd_text + NEWLINE+ '# \u76ee\u76db\u308a\u8868\u793a\u3092off\u306b\u3059\u308b'\n            cmd_text = cmd_text + NEWLINE+ '    xticks([])'\n            cmd_text = cmd_text + NEWLINE+ '    yticks([])'\n        else:\n            if self.mtickon.get():\n                cmd_text = cmd_text + NEWLINE+ '# \u526f\u76ee\u76db\u308a\u306e\u8a2d\u5b9a'\n                cmd_text = cmd_text + NEWLINE+ '    minorticks_on()'\n                cmd_text = cmd_text + NEWLINE+ '    for xyax in (ax.xaxis, ax.yaxis):'\n                cmd_text = cmd_text + NEWLINE+ '        setp(xyax.get_minorticklines(), markersize=2+axlinelw, markeredgewidth=axlinelw-0.7)'\n            cmd_text = cmd_text + NEWLINE+ '# \u76ee\u76db\u308a\u7dda\u306e\u9577\u3055\u3068\u592a\u3055\u6307\u5b9a'\n            cmd_text = cmd_text + NEWLINE+ '    for xyax in (ax.xaxis, ax.yaxis):'\n            cmd_text = cmd_text + NEWLINE+ '        setp(xyax.get_ticklines(), markersize=4+axlinelw, markeredgewidth=axlinelw-0.3)'\n        if self.x0on.get(): cmd_text = cmd_text + NEWLINE+ '    axvline(0.0, color=\"k\")'\n        if self.y0on.get(): cmd_text = cmd_text + NEWLINE+ '    axhline(0.0, color=\"k\")'\n        if self.xyon.get():\n            cmd_text = cmd_text + NEWLINE+ '# y=x\u306e\u7dda\u3092\u30d7\u30ed\u30c3\u30c8'\n            cmd_text = cmd_text + NEWLINE+ '    axy = axis()'\n            cmd_text = cmd_text + NEWLINE+ '    plot(xlim(), xlim(), \"k-\")'\n            cmd_text = cmd_text + NEWLINE+ '    axis(axy)'\n        if self.textlabel.text.get():\n            tl = self.textlabel\n            if tl.trans.get() == 0:\n                transform = 'ax.transAxes'\n            else:\n                transform = 'ax.transData'\n            halign = ('left', 'center', 'right')\n            valign = ('top', 'center', 'bottom', 'baseline')\n            cmd_text = cmd_text + NEWLINE+ '# \u6ce8\u91c8\u306e\u63cf\u753b'\n            cmd_text = cmd_text + NEWLINE+ '    text(%s, %s, u\"%s\",'%(tl.x.get(),\n                     tl.y.get(), tl.text.get().encode(JCODE))\n            cmd_text = cmd_text + NEWLINE+ '        color = \"%s\", fontsize = %s,'%(tl.color.get(),\n                     tl.fsize.get()) \n            cmd_text = cmd_text + NEWLINE+ '        ha = \"%s\", va = \"%s\",'%(halign[tl.halign.get()],\n                     valign[tl.valign.get()])\n            cmd_text = cmd_text + NEWLINE+ '        transform = %s, **fp)'%(transform)\n        cmd_text = cmd_text + NEWLINE+ ''\n        cmd_text = cmd_text + NEWLINE+ '    show()'\n        cmd_text = cmd_text + NEWLINE+ ''\n        cmd_text = cmd_text + NEWLINE+ 'main()' + NEWLINE\n        return cmd_text\n\n    def cmd_quit(self):\n        self.master.destroy()\n\n    def getxy(self, dataname, n1, n2):\n        data = loadtxt(dataname)\n        return data[:, n1-1], data[:,n2-1]\n\n    def checkPlot(self):\n        canplot = False\n        for dset in self.dataset:\n            fname = dset.dataname.get()\n            if len(fname) == 0: continue\n            if os.path.exists(fname):\n                canplot = True\n            else:\n                showwarning(u\"\u30d5\u30a1\u30a4\u30eb\u306e\u8aad\u307f\u8fbc\u307f\", u\"\u30d5\u30a1\u30a4\u30eb'\" + fname + u\"'\u304c\u3042\u308a\u307e\u305b\u3093\")\n                return False\n        for fset in self.funcset:\n            if len(fset.formula.get()) > 0:\n                canplot = True\n        return canplot\n\n    def cmd_plot(self):\n        if not self.checkPlot(): return\n        lfsize = float(self.plfsize.get())\n        tfsize = float(self.ptfsize.get())\n        axlinelw = float(self.framewidth.get())\n        rcParams[\"xtick.labelsize\"] = tfsize\n        rcParams[\"ytick.labelsize\"] = tfsize\n        rcParams[\"axes.linewidth\"] = axlinelw\n        if self.ticksdir.get() == 1:\n            rcParams[\"xtick.direction\"] = \"out\"\n            rcParams[\"ytick.direction\"] = \"out\"\n        if self.ticksdir.get() == 0:\n            rcParams[\"xtick.direction\"] = \"in\"\n            rcParams[\"ytick.direction\"] = \"in\"\n        if self.jfonton.get():\n            rcParams[\"pdf.fonttype\"] = 42\n            fp = {\"fontproperties\":fm.FontProperties(fname=JFONT)}\n        else:\n            fp = {}\n        figure(facecolor=\"w\")\n        subplots_adjust(left=0.15, bottom=0.15)\n        ax = gca()\n\n        labelonFlag = False\n        for dset in self.dataset:\n            fname = dset.dataname.get()\n            if len(fname) == 0: continue\n            xcol = int(dset.xcol.get())\n            ycol = int(dset.ycol.get())\n            x, y = self.getxy(fname , xcol, ycol)\n            lmstr = dset.lmstr.get()\n            label = dset.legend.get()\n            marksize = float(dset.marksize.get())\n            linesize = float(dset.linesize.get())\n            if label:\n                plot(x, y, lmstr, ms=marksize, lw=linesize, label=label)\n                labelonFlag = True\n            else:\n                plot(x, y, lmstr, ms=marksize, lw=linesize)\n\n        xrangeset = True\n        l1 = self.xmin.get(); l2 = self.xmax.get()\n        for fset in self.funcset:\n            if len(fset.formula.get()) > 0:\n                if xrangeset:\n                    if len(l1) > 0 and len(l2) > 0:\n                        x1, x2 = float(l1), float(l2)\n                    else:\n                        x1, x2 = xlim()\n                    xrangeset = False\n                x = linspace(x1, x2, int(fset.nsamp.get()))\n                y = eval(fset.formula.get())\n                lmstr = fset.lmstr.get()\n                label = fset.legend.get()\n                marksize = float(fset.marksize.get())\n                linesize = float(fset.linesize.get())\n                if label:\n                    plot(x, y, lmstr, ms=marksize, lw=linesize, label=label)\n                    labelonFlag = True\n                else:\n                    plot(x, y, lmstr, ms=marksize, lw=linesize)\n        if len(l1) > 0 and len(l2) > 0: xlim(float(l1), float(l2))\n        l1 = self.ymin.get(); l2 = self.ymax.get()\n        if len(l1) > 0 and len(l2) > 0: ylim(float(l1), float(l2))\n        if self.legendon.get() and labelonFlag:\n            leg = legend(loc='best', numpoints=1)\n            for lt in leg.get_texts(): setp(lt, fontsize=tfsize-2, **fp)\n\n        l = self.pxlabel.get()\n        if len(l) > 0: xlabel(l, fontsize=lfsize, labelpad=10, **fp)\n        l = self.pylabel.get()\n        if len(l) > 0: ylabel(l, fontsize=lfsize, labelpad=10, **fp)\n\n        l = self.ptitle.get()\n        if len(l) > 0: title(l, fontsize=lfsize+2, **fp)\n\n        if self.gridon.get(): grid(True)\n        if self.ticksdir.get() == 2:\n            xticks([]); yticks([])\n        else:\n            if self.mtickon.get():\n                minorticks_on()\n                for xyax in (ax.xaxis, ax.yaxis):\n                    setp(xyax.get_minorticklines(), ms=2+axlinelw, mew=axlinelw-0.7)\n            for xyax in (ax.xaxis, ax.yaxis):\n                setp(xyax.get_ticklines(), ms=4+axlinelw, mew=axlinelw-0.3)\n                if self.x0on.get(): axvline(0.0, color='k')\n                if self.y0on.get(): axhline(0.0, color='k')\n        if self.xyon.get():\n            axy = axis()\n            plot(xlim(), xlim(), \"k-\")\n            axis(axy)\n        if self.textlabel.text.get():\n            tl = self.textlabel\n            if tl.trans.get() == 0:\n                transform = ax.transAxes\n            else:\n                transform = ax.transData\n            halign = ('left', 'center', 'right')\n            valign = ('top', 'center', 'bottom', 'baseline')\n            text(float(tl.x.get()), float(tl.y.get()),\n                 tl.text.get(),\n                 color=tl.color.get(),\n                 fontsize=float(tl.fsize.get()),\n                 ha = halign[tl.halign.get()],\n                 va = valign[tl.valign.get()],\n                 transform=transform, **fp)\n        show()\n\nglobalVarSet()\n\nif __name__ == \"__main__\":\n    app = App()\n    if(len(sys.argv) > 0):\n        app.setFileName(sys.argv)\n    app.mainloop()\n\n\n# \u3053\u308c\u306f\u4f55\n\u30c7\u30fc\u30bf\u30d5\u30a1\u30a4\u30eb\u3084\u95a2\u6570\u3092\u4f5c\u56f3\u3059\u308bMaplotlib\u306e\u30b9\u30af\u30ea\u30d7\u30c8\u3092\u4f5c\u6210\u3059\u308b\u305f\u3081\u306eGUI\u30a2\u30d7\u30ea\u3002\u8ef8\u306e\u30d5\u30a9\u30f3\u30c8\u3084\u8ef8\u306e\u592a\u3055\u306a\u3069\u306e\u7d30\u304b\u3044\u8a2d\u5b9a\u3092GUI\u3067\u9078\u629e\u3067\u304d\u308b\u3002\u4e00\u5fdc\u3001\u30af\u30ed\u30b9\u30d7\u30e9\u30c3\u30c8\u30d5\u30a9\u30fc\u30e0\u306e\u3064\u3082\u308a\u3002\n\u76f4\u63a5\u65e5\u672c\u8a9e\u3092\u5165\u529b\u3067\u304d\u308b\u304b\u3069\u3046\u304b\u306f\u3001tk\u3067\u65e5\u672c\u8a9e\u306e\u5165\u529b\u304c\u53ef\u80fd\u304b\u3069\u3046\u304b\u306b\u3088\u308a\u307e\u3059\u3002\u3067\u304d\u306a\u3044\u5834\u5408\u306f\u30b3\u30d4\u30da\u3067\u5bfe\u51e6\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n![python_fig.png](https://qiita-image-store.s3.amazonaws.com/0/128826/0b5d88b1-7f92-ee04-165d-850aff2e4551.png \"python_fig.png\")\n\n\n#\u8a2d\u5b9a\n- globalVarSet\u95a2\u6570\u306e\u4e2d\u3067\u30d5\u30a9\u30f3\u30c8\u3084\u30a8\u30c7\u30a3\u30bf\u3092\u81ea\u5206\u306e\u74b0\u5883\u306b\u5408\u308f\u305b\u3066\u5909\u66f4\u3059\u308b\u3002\n- \u51e6\u7406\u3059\u308b\u30c7\u30fc\u30bf\u30d5\u30a1\u30a4\u30eb\u306e\u6570\u3092\u5897\u3084\u3057\u305f\u3051\u308c\u3070DATA_LMSTR\u30ea\u30b9\u30c8\u306e\u8981\u7d20\u3092\u5897\u3084\u3059\u3002\u95a2\u6570\u306a\u3089FUNC_LMSTR\u30ea\u30b9\u30c8\u306e\u8981\u7d20\u3092\u5897\u3084\u3059\u3002\n\n#\u30d0\u30b0\nEl Captitan\u3067\u306ftkFileDialog\u306a\u3069\u3092\u4e00\u5ea6\u547c\u3073\u51fa\u3057\u305f\u5f8c\u306b\u30d7\u30ed\u30c3\u30c8\u3059\u308b\u3068\u9589\u3058\u305f\u30a6\u30a3\u30f3\u30c9\u30a6\u304c\u5fa9\u6d3b\u3057\u3066\u3057\u307e\u3046\u3002Ubuntu\u3067\u306f\u554f\u984c\u306a\u3044\u306e\u3060\u3051\u3069...\u3002\n\n# 2016/07/03 \u4fee\u6b63\n\u65e5\u672c\u8a9e\u306e\u30e9\u30d9\u30eb\u3042\u308a\u3067\u30b9\u30af\u30ea\u30d7\u30c8\u4fdd\u5b58\u51fa\u6765\u306a\u304b\u3063\u305f\u70b9\u3092\u4fee\u6b63\nline 320: cmd_text = cmd_text + JFONT.encode(JCODE)\n       \u2193\nline 320: cmd_text = cmd_text\n\n\n```\n#!/usr/bin/python\n# coding:utf-8\n#\n# mk_matplotscript.py\n# Copyright(c) by void99\n#  maplotlib\u306e\u30b9\u30af\u30ea\u30d7\u30c8\u4f5c\u6210\u7528\u306eGUI\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30fc\u30b9\n#  2016/06/08 Ver 0.9\n#  2016/07/03 Ver 1.0 \u65e5\u672c\u8a9e\u306e\u30e9\u30d9\u30eb\u3042\u308a\u3067\u30b9\u30af\u30ea\u30d7\u30c8\u4fdd\u5b58\u51fa\u6765\u306a\u304b\u3063\u305f\u70b9\u3092\u4fee\u6b63\n\nfrom tkFileDialog import askopenfilename, asksaveasfilename\nfrom tkMessageBox import showwarning\nfrom pylab import *\nfrom functools import *\nfrom ScrolledText import ScrolledText\nimport matplotlib.font_manager as fm\nimport subprocess as sub\nimport Tkinter as Tk\nimport os, sys\n\n__author__  = \"void99\"\n__version__ = \"1.0\"\n\n# \u30d5\u30a9\u30f3\u30c8\u306e\u8a2d\u5b9a \nDEFAULT_FONT = ('Helvetica', 12)\n\ndef globalVarSet():\n    global JCODE, JFONT, TrueTypeUSE, EDITOR, DATA_LMSTR, FUNC_LMSTR, NEWLINE\n    DATA_LMSTR = [\"r-o\", \"g-s\"]  # \u30c7\u30fc\u30bf\u306e\u7dda\u30fb\u70b9\u7a2e\n    FUNC_LMSTR = [\"k-\"]           # \u95a2\u6570\u306e\u7dda\u30fb\u70b9\u7a2e\n    JCODE = \"utf8\"\n    NEWLINE = \"\\n\"\n    if sys.platform == \"darwin\":  # MacOS\n        # El Capitan\u306f\u65e5\u672c\u8a9e\u30d5\u30a9\u30f3\u30c8\u306e\u5834\u6240\u304c\u9055\u3046\n        JFONT = \"/System/Library/Fonts/\u30d2\u30e9\u30ae\u30ce\u89d2\u30b4\u30b7\u30c3\u30af W5.ttc\"\n        # CotEditor\u306b\u6c7a\u3081\u3046\u3061\n        EDITOR = \"/Applications/CotEditor.app/Contents/MacOS/CotEditor\"\n    elif sys.platform == \"win32\":\n        fontpath = fm.win32FontDirectory() + u\"\\\\\"\n        JFONT = fontpath + \"meiryo.ttc\" # \u597d\u307f\u306eTrueType\u30d5\u30a9\u30f3\u30c8\u30d5\u30a1\u30a4\u30eb\u3092\u6307\u5b9a\n        EDITOR = \"c:\\\\Hidemaru\\\\hidemaru.exe\"\n    elif sys.platform == \"linux2\":\n        # Ubuntu 12\n        JFONT = \"/usr/share/fonts/truetype/fonts-japanese-gothic.ttf\"\n        EDITOR = \"/usr/bin/gedit\"\n\n    if os.path.exists(JFONT):\n        TrueTypeUSE = True\n    else:\n        TrueTypeUSE = False\n    if not os.path.exists(EDITOR):\n          EDITOR = \"\"\n\nclass LabelEntry():\n    def __init__(self, master, label, width, value=\"\"):\n        self.__entrystr = Tk.StringVar()\n        lbl = Tk.Label(master, text = label, font=DEFAULT_FONT)\n        ent = Tk.Entry(master, width = width, font=DEFAULT_FONT,\n        \ttextvariable=self.__entrystr)\n        lbl.pack(side = Tk.LEFT, padx = 1)\n        ent.pack(side = Tk.LEFT, padx = 1)\n        self.__entrystr.set(value)\n\n    def get(self):\n        return self.__entrystr.get()\n\n    def set(self, value):\n        self.__entrystr.set(value)\n\nclass FrameWithWidget(Tk.Frame):\n    def __init__(self, master=None, anchor=Tk.W, side=Tk.TOP, pad=0, bd=0):\n        Tk.Frame.__init__(self, master, relief=Tk.GROOVE, bd=bd)\n        self.pack(anchor=anchor, side=side, padx=pad, pady=pad)\n\n    def addLabelEntry(self, label, width, value=\"\"):\n        return LabelEntry(self, label, width, value)\n\n    def addButton(self, text, command, fsize=DEFAULT_FONT[1]):\n        Tk.Button(self, text=text, command=command, \n        \tfont=('Helvetica', fsize)).pack(side=Tk.LEFT, padx=2, pady=0)\n\n    def addRadiobutton(self, text):\n        if not 'radbtnvalue' in vars(self): self.radbtnvalue = 0\n        if not 'radbtnvariable' in vars(self): self.radbtnvariable = Tk.IntVar()\n        Tk.Radiobutton(self, text=text, font=DEFAULT_FONT,\n        \tvalue=self.radbtnvalue, variable=self.radbtnvariable).pack(side=Tk.LEFT)\n        self.radbtnvalue += 1\n        return self.radbtnvariable\n\n    def addCheckbutton(self, text):\n        cbtnvariable = Tk.BooleanVar()\n        Tk.Checkbutton(self, text=text, font=DEFAULT_FONT,\n        \tvariable=cbtnvariable).pack(side=Tk.LEFT)\n        return cbtnvariable\n\n    def addLabel(self, text):\n        lbl = Tk.Label(self, text=text, font=DEFAULT_FONT)\n        lbl.pack(side=Tk.LEFT)\n        return lbl\n\nclass DataSetWidget():\n    def __init__(self, master, id=1):\n        f = FrameWithWidget(master, pad=1, bd=2)\n        f1 = FrameWithWidget(f, pad=1, bd=0)\n        self.dataname = f1.addLabelEntry(u\"\u30d5\u30a1\u30a4\u30eb \" + str(id), 26)\n        f1.addButton(\"...\", self.openFileName, 8)\n        if EDITOR != \"\":\n            f1.addButton(\"E\", self.viewFile, 8)\n        self.legend = f1.addLabelEntry(u\"\u51e1\u4f8b\", 15)\n        self.xcol = f.addLabelEntry(u\"X\u7cfb\u5217\", 3, 1)\n        self.ycol = f.addLabelEntry(u\"Y\u7cfb\u5217\", 3, 2)\n        f.addButton(u\"\u30b9\u30bf\u30a4\u30eb\", self.showLineMakerStyle)\n        self.lmstr = Tk.StringVar()\n        Tk.Entry(f, width = 3, textvariable=self.lmstr).pack(side = Tk.LEFT, padx = 1)\n        self.lmstr.set(\"r-o\")\n        self.linesize = f.addLabelEntry(u\"\u7dda\u5e45\", 3, 1.5)\n        self.marksize = f.addLabelEntry(u\"\u70b9\u30b5\u30a4\u30ba\", 2, 8)\n\n    def viewFile(self):\n        if EDITOR != \"\":\n            fname = self.dataname.get().encode(JCODE)\n            if len(fname) > 0:\n                sub.Popen([EDITOR, fname])\n            else:\n                sub.Popen([EDITOR])\n\n    def openFileName(self):\n        self.setFileName(askopenfilename())\n\n    def setFileName(self, filename):\n        if filename != \"\":\n            self.dataname.set(filename)\n            self.legend.set(os.path.basename(filename))\n\n    def showLineMakerStyle(self):\n        linestyle = ('-', '--', '-.', ':')\n        for i, ls in enumerate(linestyle):\n            plot([0,1],[i,i], \"k\" + ls, lw=1.5)\n            text(-0.1,i, \"'\" + ls + \"'\", ha = 'right', va='center', fontsize=16)\n        nl = len(linestyle)\n        colors = ('r', 'g', 'b', 'c', 'm', 'y', 'k')\n        for i, c in enumerate(colors):\n            plot([0,1],[nl+i,nl+i], c + \"-\", lw=2)\n            text(-0.1,nl+i, \"'\" + c + \"'\", ha = 'right', va='center', fontsize=16)\n        markers = ('.', ',', 'o', 'v', '^', '<', '>', '1', '2', '3', '4', 's', 'p', '*', 'h', 'H', '+', 'x', 'D', 'd', '|', '_')\n        for i, m in enumerate(markers):\n            x = 1.7 + (i // 11)*0.7; y = i % 11\n            plot([x],[y], \"r\" + m, ms=12)\n            text(x-0.2,y, \"'\" + m + \"'\", ha = 'right', va='center', fontsize=16)\n        xlim(-0.5, 3); ylim(-1,11)\n        xticks([]); yticks([])\n        show()\n\nclass FuncWidget():\n    def __init__(self, master):\n        f = FrameWithWidget(master, pad=1, bd=2)\n        f1 = FrameWithWidget(f, pad=1, bd=0)\n        self.formula = f1.addLabelEntry(u\"\u95a2\u6570\", 37)\n        self.legend = f1.addLabelEntry(u\"\u51e1\u4f8b\", 15)\n        self.nsamp = f.addLabelEntry(u\"\u30b5\u30f3\u30d7\u30eb\u6570\", 5, 100)\n        f.addLabel(u\"\u30b9\u30bf\u30a4\u30eb\")\n        self.lmstr = Tk.StringVar()\n        Tk.Entry(f, width = 3, textvariable=self.lmstr).pack(side = Tk.LEFT, padx = 1)\n        self.lmstr.set(\"k-\")\n        self.linesize = f.addLabelEntry(u\"\u7dda\u5e45\", 3, 1.5)\n        self.marksize = f.addLabelEntry(u\"\u70b9\u30b5\u30a4\u30ba\", 2, 8)\n\nclass TextLabelWidget():\n    def __init__(self, master):\n        f = FrameWithWidget(master, pad=1, bd=2)\n        f1 = FrameWithWidget(f, pad=1, bd=0)\n        self.text = f1.addLabelEntry(u\"\u6ce8\u91c8\", 37)\n        self.x = f1.addLabelEntry(u\"X\u4f4d\u7f6e\", 4, 0.5)\n        self.y = f1.addLabelEntry(u\"Y\u4f4d\u7f6e\", 4, 0.5)\n        fw = FrameWithWidget(f)\n        f1 = FrameWithWidget(fw, side=Tk.LEFT)\n        self.color = f1.addLabelEntry(u\"\u8272\", 3, 'k')\n        self.fsize = f1.addLabelEntry(u\"\u30d5\u30a9\u30f3\u30c8\u30b5\u30a4\u30ba\", 3, 20)\n        f1 = FrameWithWidget(fw, side=Tk.LEFT)\n        f1.addLabel(u\"\u3000\u3000\u5ea7\u6a19\u7cfb\")\n        f1.addRadiobutton(u\"\u30b0\u30e9\u30d5\u8ef8\")\n        self.trans = f1.addRadiobutton(u\"\u30c7\u30fc\u30bf\")\n        self.trans.set(0)\n        f1 = FrameWithWidget(f, side=Tk.LEFT)\n        f1.addLabel(u\"\u6a2a\u914d\u7f6e\")\n        f1.addRadiobutton(u\"\u5de6\")\n        f1.addRadiobutton(u\"\u4e2d\")\n        self.halign = f1.addRadiobutton(u\"\u53f3\")\n        self.halign.set(0)\n        f1 = FrameWithWidget(f, side=Tk.TOP)\n        f1.addLabel(u\"\u3000\u3000\u7e26\u914d\u7f6e\")\n        f1.addRadiobutton(u\"\u4e0a\")\n        f1.addRadiobutton(u\"\u4e2d\")\n        f1.addRadiobutton(u\"\u4e0b\")\n        self.valign = f1.addRadiobutton(u\"\u30d9\u30fc\u30b9\")\n        self.valign.set(0)\n\nclass App(Tk.Frame):\n    def __init__(self, master=None):\n        Tk.Frame.__init__(self, master)\n        self.pack()\n        self.init()\n\n    def init(self):\n        self.master.title(\"Script maker for matplotlib by \" + __author__ + \" ver.\" + __version__)\n        self.master.bind(\"<Return>\", self.callCmdPlot )\n        self.dataset = []\n        self.funcset = []\n        f = FrameWithWidget(self, pad=1, bd=3)\n        for i, lm in enumerate(DATA_LMSTR):\n            self.dataset.append(DataSetWidget(f, i+1))\n            self.dataset[i].lmstr.set(lm)    \n        f = FrameWithWidget(self, pad=1, bd=3)\n        for lm in FUNC_LMSTR:\n            func = FuncWidget(f)\n            func.lmstr.set(lm)    \n            self.funcset.append(func)\n        f1 = FrameWithWidget(self, pad=1, bd=2)\n        f = FrameWithWidget(f1, side=Tk.LEFT)\n        self.xmin = f.addLabelEntry(u\"X\u6700\u5c0f\u5024\", 6)\n        self.xmax = f.addLabelEntry(u\"X\u6700\u5927\u5024\", 6)\n        f = FrameWithWidget(f1, side=Tk.LEFT)\n        self.ymin = f.addLabelEntry(u\"\u3000Y\u6700\u5c0f\u5024\", 6)\n        self.ymax = f.addLabelEntry(u\"Y\u6700\u5927\u5024\", 6)\n        f = FrameWithWidget(self, pad=1, bd=2)\n        Tk.Label(f, text = u'\u8ef8\u30e9\u30d9\u30eb\u3000', font=DEFAULT_FONT).pack(side=Tk.LEFT)\n        self.pxlabel = FrameWithWidget(f, side=Tk.LEFT).addLabelEntry(u\"X\", 24)\n        self.pylabel = FrameWithWidget(f, side=Tk.LEFT).addLabelEntry(u\"Y\", 24)\n        self.ptitle  = FrameWithWidget(self).addLabelEntry(u\"\u30bf\u30a4\u30c8\u30eb\", 56)\n        f = FrameWithWidget(self)\n        f1 = FrameWithWidget(f, side=Tk.LEFT, pad=1, bd=2)\n        Tk.Label(f1, text=u\"\u30d5\u30a9\u30f3\u30c8\u30b5\u30a4\u30ba\", font=DEFAULT_FONT).pack(anchor=Tk.W)\n        self.plfsize = f1.addLabelEntry(u\"\u8ef8\u30e9\u30d9\u30eb\", 4, 20)\n        self.ptfsize = f1.addLabelEntry(u\"\u76ee\u76db\u308a\u6570\u5b57\", 4, 18)\n        f1 = FrameWithWidget(f, side=Tk.LEFT, pad=1, bd=2)\n        f = FrameWithWidget(f1, side=Tk.TOP, bd=0, pad=0)\n        self.framewidth = f.addLabelEntry(u\"\u67a0\u306e\u592a\u3055\", 4, 1.7)\n        f = FrameWithWidget(f1, side=Tk.TOP)\n        f.addLabel(u\"\u76ee\u76db\u65b9\u5411\")\n        f.addRadiobutton(u\"\u5185\u5074\")\n        f.addRadiobutton(u\"\u5916\u5074\")\n        self.ticksdir = f.addRadiobutton(u\"\u306a\u3057\")\n        self.ticksdir.set(0)\n        f = FrameWithWidget(self)\n        self.textlabel = TextLabelWidget(f)\n        f = FrameWithWidget(self)\n        if TrueTypeUSE:\n            self.jfonton = f.addCheckbutton(u\"\u65e5\u672c\u8a9e\")\n        else:\n            self.jfonton = Tk.BooleanVar()\n        self.legendon = f.addCheckbutton(u\"\u51e1\u4f8b\u8868\u793a\")\n        self.mtickon  = f.addCheckbutton(u\"\u526f\u76ee\u76db\")\n        self.gridon   = f.addCheckbutton(u\"\u30b0\u30ea\u30c3\u30c9\")\n        self.x0on     = f.addCheckbutton(\"X=0\")\n        self.y0on     = f.addCheckbutton(\"Y=0\")\n        self.xyon     = f.addCheckbutton(\"Y=X\")\n        f = FrameWithWidget(self)\n        f.addButton(u\"\u30d7\u30ed\u30c3\u30c8\", self.cmd_plot)\n        f.addButton(u\"\u30b9\u30af\u30ea\u30d7\u30c8\u4fdd\u5b58\", self.writeScript)\n        f.addButton(u\"\u7d42\u4e86\", self.cmd_quit)\n\n    def setFileName(self, filenames):\n        n = len(filenames)\n        if(n == 1): return\n        nmax = len(self.dataset)\n        if( (n-1) < nmax ): nmax = (n-1)\n        for i in range(nmax):\n            self.dataset[i].setFileName(filenames[i+1])\n\n    def showScript(self):\n        if not self.checkPlot(): return\n        sub_win = Tk.Toplevel()\n        t = TextWidget(sub_win)\n        t.insert_text(self.make_cmdstr())\n\n    def callCmdPlot( self, event ):\n        self.cmd_plot()\n\n    def writeScript(self):\n        if not self.checkPlot(): return\n        fname = asksaveasfilename(title=u\"\u30b9\u30af\u30ea\u30d7\u30c8\u4fdd\u5b58\", filetypes=[('python script', '*.py')], defaultextension=\".py\")\n        if len(fname) == 0: return\n        with open(fname, \"w\") as f:\n            print >> f, self.make_cmdstr()\n\n    def make_cmdstr(self):\n        cmd_text = \"#!/usr/bin/python\"\n        cmd_text = cmd_text + NEWLINE+ '# coding: ' + JCODE\n        cmd_text = cmd_text + NEWLINE+ 'from pylab import *'\n        cmd_text = cmd_text + NEWLINE+ 'import matplotlib.font_manager as fm'\n        cmd_text = cmd_text + NEWLINE+ ''\n        write_getdata = False\n        for dset in self.dataset:\n            filename = dset.dataname.get()\n            if len(filename) == 0: continue\n            write_getdata = True\n        if(write_getdata):\n            cmd_text = cmd_text + NEWLINE+ '# \u30c7\u30fc\u30bf\u306e\u8aad\u307f\u8fbc\u307f\u95a2\u6570'\n            cmd_text = cmd_text + NEWLINE+ '# n1, n2\u756a\u76ee\u306e\u5217\u3092array\u3067\u8fd4\u3059'\n            cmd_text = cmd_text + NEWLINE+ 'def getdata(fname, n1, n2):'\n            cmd_text = cmd_text + NEWLINE+ '    data = loadtxt(fname)'\n            cmd_text = cmd_text + NEWLINE+ '    return data[:,(n1-1)], data[:,(n2-1)]'\n            cmd_text = cmd_text + NEWLINE+ ''\n        cmd_text = cmd_text + NEWLINE+ 'def main():'\n        cmd_text = cmd_text + NEWLINE+ '# \u30e9\u30d9\u30eb\u306e\u30d5\u30a9\u30f3\u30c8\u30b5\u30a4\u30ba'\n        cmd_text = cmd_text + NEWLINE+ '    lfsize = ' + self.plfsize.get()\n        cmd_text = cmd_text + NEWLINE+ '# \u76ee\u76db\u308a\u306e\u30d5\u30a9\u30f3\u30c8\u30b5\u30a4\u30ba'\n        cmd_text = cmd_text + NEWLINE+ '    tfsize = ' + self.ptfsize.get()\n        cmd_text = cmd_text + NEWLINE+ '# \u67a0\u306e\u592a\u3055'\n        cmd_text = cmd_text + NEWLINE+ '    axlinelw = ' + self.framewidth.get()\n        cmd_text = cmd_text + NEWLINE+ '    rcParams[\"xtick.labelsize\"] = tfsize'\n        cmd_text = cmd_text + NEWLINE+ '    rcParams[\"ytick.labelsize\"] = tfsize'\n        cmd_text = cmd_text + NEWLINE+ '    rcParams[\"axes.linewidth\"] = axlinelw'\n        if self.ticksdir.get() == 1:\n            cmd_text = cmd_text + NEWLINE+ '# \u76ee\u76db\u308a\u306e\u5411\u304d'\n            cmd_text = cmd_text + NEWLINE+ '    rcParams[\"xtick.direction\"] = \"out\"'\n            cmd_text = cmd_text + NEWLINE+ '    rcParams[\"ytick.direction\"] = \"out\"'\n        if self.jfonton.get():\n            cmd_text = cmd_text + NEWLINE+ '# TrueType\u30d5\u30a9\u30f3\u30c8\u306e\u4f7f\u7528'\n            cmd_text = cmd_text + NEWLINE+ '    rcParams[\"pdf.fonttype\"] = 42'\n            cmd_text = cmd_text + NEWLINE+ '    fp = {\"fontproperties\":fm.FontProperties(fname=\"'\n            cmd_text = cmd_text\n            cmd_text = cmd_text + '\")}'\n        else:\n            cmd_text = cmd_text + NEWLINE+ '    fp = {} # dummy for truetype font'\n        cmd_text = cmd_text + NEWLINE+ '    figure(facecolor=\"w\")'\n        cmd_text = cmd_text + NEWLINE+ '# \u4f59\u767d\u306e\u8a2d\u5b9a'\n        cmd_text = cmd_text + NEWLINE+ '    subplots_adjust(left=0.15, bottom=0.15)'\n        cmd_text = cmd_text + NEWLINE+ '# \u63cf\u753b\u4e2d\u306eaxes\u306e\u53d6\u5f97'\n        cmd_text = cmd_text + NEWLINE+ '    ax = gca()'\n        labelonFlag = False\n        for dset in self.dataset:\n            filename = dset.dataname.get()\n            if len(filename) == 0: continue\n            xcol = int(dset.xcol.get())\n            ycol = int(dset.ycol.get())\n            lmstr = dset.lmstr.get()\n            label = dset.legend.get().encode(JCODE)\n            marksize = float(dset.marksize.get())\n            linesize = float(dset.linesize.get())\n            cmd_text = cmd_text + NEWLINE+ '# \u30c7\u30fc\u30bf\u306e\u30d7\u30ed\u30c3\u30c8'\n            cmd_text = cmd_text + NEWLINE+ '    x, y = getdata(u\"%s\", %d, %d)'%(filename.encode(JCODE), xcol, ycol)\n            if label:\n                cmd_text = cmd_text + NEWLINE+ '    plot(x, y, \"%s\", ms=%d, lw=%d, label=u\"%s\")'%(lmstr,\n                    marksize,linesize,label)\n                labelonFlag = True\n            else:\n                cmd_text = cmd_text + NEWLINE+ '    plot(x, y, \"%s\", ms=%d, lw=%d)'%(lmstr,\n                     marksize,linesize)\n        xrangeset = True\n        l1 = self.xmin.get(); l2 = self.xmax.get()\n        for fset in self.funcset:\n            if len(fset.formula.get()) > 0:\n                if xrangeset:\n                    cmd_text = cmd_text + NEWLINE+ '# \u95a2\u6570\u306eX\u7bc4\u56f2'\n                    if len(l1) > 0 and len(l2) > 0:\n                        cmd_text = cmd_text + NEWLINE+ \"    x1, x2 = %s, %s\"%(l1, l2)\n                    else:\n                        cmd_text = cmd_text + NEWLINE+ \"    x1, x2 = xlim()\"\n                    xrangeset = False\n                cmd_text = cmd_text + NEWLINE+ '# \u95a2\u6570\u306e\u30d7\u30ed\u30c3\u30c8'\n                cmd_text = cmd_text + NEWLINE+ \"    x = linspace(x1, x2, %s)\"%(fset.nsamp.get())\n                cmd_text = cmd_text + NEWLINE+ \"    y = \" + fset.formula.get()\n                lmstr = fset.lmstr.get()\n                label = fset.legend.get().encode(JCODE)\n                marksize = float(fset.marksize.get())\n                linesize = float(fset.linesize.get())\n                if label:\n                    cmd_text = cmd_text + NEWLINE+ '    plot(x, y, \"%s\", ms=%d, lw=%d, label=u\"%s\")'%(lmstr,marksize,\n                            linesize,label)\n                    labelonFlag = True\n                else:\n                    cmd_text = cmd_text + NEWLINE+ '    plot(x, y, \"%s\", ms=%d, lw=%d)'%(lmstr,marksize,linesize)\n        if len(l1) > 0 and len(l2) > 0:\n            cmd_text = cmd_text + NEWLINE+ '# \u30d7\u30ed\u30c3\u30c8\u3059\u308bX\u306e\u7bc4\u56f2'\n            cmd_text = cmd_text + NEWLINE+ '    xlim(' + l1 + ', ' +  l2 + ')'\n        l1 = self.ymin.get(); l2 = self.ymax.get()\n        if len(l1) > 0 and len(l2) > 0:\n            cmd_text = cmd_text + NEWLINE+ '# \u30d7\u30ed\u30c3\u30c8\u3059\u308bY\u306e\u7bc4\u56f2'\n            cmd_text = cmd_text + NEWLINE+ '    ylim(' + l1 + ', ' +  l2 + ')'\n        if self.legendon.get() and labelonFlag:\n            cmd_text = cmd_text + NEWLINE+ '# \u51e1\u4f8b\u306e\u8a2d\u5b9a'\n            cmd_text = cmd_text + NEWLINE+ '# \u4f4d\u7f6e(loc)\u306f\"lower\", \"upper\", \"right\", \"center\", \"left\"'\n            cmd_text = cmd_text + NEWLINE+ '# \u306e\u7d44\u307f\u5408\u308f\u305b\u3067\u6307\u5b9a\u3067\u304d\u308b'\n            cmd_text = cmd_text + NEWLINE+ '    leg = legend(loc=\"best\", numpoints=1)'\n            cmd_text = cmd_text + NEWLINE+ '    for lt in leg.get_texts(): setp(lt, fontsize=tfsize-2,  **fp)'\n        l = self.pxlabel.get().encode(JCODE)\n        if len(l) > 0: cmd_text = cmd_text + NEWLINE+ '    xlabel(u\"' + l + '\", fontsize=lfsize, labelpad=10, **fp)'\n        l = self.pylabel.get().encode(JCODE)\n        if len(l) > 0: cmd_text = cmd_text + NEWLINE+ '    ylabel(u\"' + l + '\", fontsize=lfsize, labelpad=10, **fp)'\n        l = self.ptitle.get().encode(JCODE)\n        if len(l) > 0: cmd_text = cmd_text + NEWLINE+ '    title(u\"' + l + '\", fontsize=lfsize+2, **fp)'\n        if self.gridon.get(): cmd_text = cmd_text + NEWLINE+ '    grid(True)'\n        if self.ticksdir.get() == 2:\n            cmd_text = cmd_text + NEWLINE+ '# \u76ee\u76db\u308a\u8868\u793a\u3092off\u306b\u3059\u308b'\n            cmd_text = cmd_text + NEWLINE+ '    xticks([])'\n            cmd_text = cmd_text + NEWLINE+ '    yticks([])'\n        else:\n            if self.mtickon.get():\n                cmd_text = cmd_text + NEWLINE+ '# \u526f\u76ee\u76db\u308a\u306e\u8a2d\u5b9a'\n                cmd_text = cmd_text + NEWLINE+ '    minorticks_on()'\n                cmd_text = cmd_text + NEWLINE+ '    for xyax in (ax.xaxis, ax.yaxis):'\n                cmd_text = cmd_text + NEWLINE+ '        setp(xyax.get_minorticklines(), markersize=2+axlinelw, markeredgewidth=axlinelw-0.7)'\n            cmd_text = cmd_text + NEWLINE+ '# \u76ee\u76db\u308a\u7dda\u306e\u9577\u3055\u3068\u592a\u3055\u6307\u5b9a'\n            cmd_text = cmd_text + NEWLINE+ '    for xyax in (ax.xaxis, ax.yaxis):'\n            cmd_text = cmd_text + NEWLINE+ '        setp(xyax.get_ticklines(), markersize=4+axlinelw, markeredgewidth=axlinelw-0.3)'\n        if self.x0on.get(): cmd_text = cmd_text + NEWLINE+ '    axvline(0.0, color=\"k\")'\n        if self.y0on.get(): cmd_text = cmd_text + NEWLINE+ '    axhline(0.0, color=\"k\")'\n        if self.xyon.get():\n            cmd_text = cmd_text + NEWLINE+ '# y=x\u306e\u7dda\u3092\u30d7\u30ed\u30c3\u30c8'\n            cmd_text = cmd_text + NEWLINE+ '    axy = axis()'\n            cmd_text = cmd_text + NEWLINE+ '    plot(xlim(), xlim(), \"k-\")'\n            cmd_text = cmd_text + NEWLINE+ '    axis(axy)'\n        if self.textlabel.text.get():\n            tl = self.textlabel\n            if tl.trans.get() == 0:\n                transform = 'ax.transAxes'\n            else:\n                transform = 'ax.transData'\n            halign = ('left', 'center', 'right')\n            valign = ('top', 'center', 'bottom', 'baseline')\n            cmd_text = cmd_text + NEWLINE+ '# \u6ce8\u91c8\u306e\u63cf\u753b'\n            cmd_text = cmd_text + NEWLINE+ '    text(%s, %s, u\"%s\",'%(tl.x.get(),\n                     tl.y.get(), tl.text.get().encode(JCODE))\n            cmd_text = cmd_text + NEWLINE+ '        color = \"%s\", fontsize = %s,'%(tl.color.get(),\n                     tl.fsize.get()) \n            cmd_text = cmd_text + NEWLINE+ '        ha = \"%s\", va = \"%s\",'%(halign[tl.halign.get()],\n                     valign[tl.valign.get()])\n            cmd_text = cmd_text + NEWLINE+ '        transform = %s, **fp)'%(transform)\n        cmd_text = cmd_text + NEWLINE+ ''\n        cmd_text = cmd_text + NEWLINE+ '    show()'\n        cmd_text = cmd_text + NEWLINE+ ''\n        cmd_text = cmd_text + NEWLINE+ 'main()' + NEWLINE\n        return cmd_text\n\n    def cmd_quit(self):\n        self.master.destroy()\n\n    def getxy(self, dataname, n1, n2):\n        data = loadtxt(dataname)\n        return data[:, n1-1], data[:,n2-1]\n\n    def checkPlot(self):\n        canplot = False\n        for dset in self.dataset:\n            fname = dset.dataname.get()\n            if len(fname) == 0: continue\n            if os.path.exists(fname):\n                canplot = True\n            else:\n                showwarning(u\"\u30d5\u30a1\u30a4\u30eb\u306e\u8aad\u307f\u8fbc\u307f\", u\"\u30d5\u30a1\u30a4\u30eb'\" + fname + u\"'\u304c\u3042\u308a\u307e\u305b\u3093\")\n                return False\n        for fset in self.funcset:\n            if len(fset.formula.get()) > 0:\n                canplot = True\n        return canplot\n\n    def cmd_plot(self):\n        if not self.checkPlot(): return\n        lfsize = float(self.plfsize.get())\n        tfsize = float(self.ptfsize.get())\n        axlinelw = float(self.framewidth.get())\n        rcParams[\"xtick.labelsize\"] = tfsize\n        rcParams[\"ytick.labelsize\"] = tfsize\n        rcParams[\"axes.linewidth\"] = axlinelw\n        if self.ticksdir.get() == 1:\n            rcParams[\"xtick.direction\"] = \"out\"\n            rcParams[\"ytick.direction\"] = \"out\"\n        if self.ticksdir.get() == 0:\n            rcParams[\"xtick.direction\"] = \"in\"\n            rcParams[\"ytick.direction\"] = \"in\"\n        if self.jfonton.get():\n            rcParams[\"pdf.fonttype\"] = 42\n            fp = {\"fontproperties\":fm.FontProperties(fname=JFONT)}\n        else:\n            fp = {}\n        figure(facecolor=\"w\")\n        subplots_adjust(left=0.15, bottom=0.15)\n        ax = gca()\n\n        labelonFlag = False\n        for dset in self.dataset:\n            fname = dset.dataname.get()\n            if len(fname) == 0: continue\n            xcol = int(dset.xcol.get())\n            ycol = int(dset.ycol.get())\n            x, y = self.getxy(fname , xcol, ycol)\n            lmstr = dset.lmstr.get()\n            label = dset.legend.get()\n            marksize = float(dset.marksize.get())\n            linesize = float(dset.linesize.get())\n            if label:\n                plot(x, y, lmstr, ms=marksize, lw=linesize, label=label)\n                labelonFlag = True\n            else:\n                plot(x, y, lmstr, ms=marksize, lw=linesize)\n\n        xrangeset = True\n        l1 = self.xmin.get(); l2 = self.xmax.get()\n        for fset in self.funcset:\n            if len(fset.formula.get()) > 0:\n                if xrangeset:\n                    if len(l1) > 0 and len(l2) > 0:\n                        x1, x2 = float(l1), float(l2)\n                    else:\n                        x1, x2 = xlim()\n                    xrangeset = False\n                x = linspace(x1, x2, int(fset.nsamp.get()))\n                y = eval(fset.formula.get())\n                lmstr = fset.lmstr.get()\n                label = fset.legend.get()\n                marksize = float(fset.marksize.get())\n                linesize = float(fset.linesize.get())\n                if label:\n                    plot(x, y, lmstr, ms=marksize, lw=linesize, label=label)\n                    labelonFlag = True\n                else:\n                    plot(x, y, lmstr, ms=marksize, lw=linesize)\n        if len(l1) > 0 and len(l2) > 0: xlim(float(l1), float(l2))\n        l1 = self.ymin.get(); l2 = self.ymax.get()\n        if len(l1) > 0 and len(l2) > 0: ylim(float(l1), float(l2))\n        if self.legendon.get() and labelonFlag:\n            leg = legend(loc='best', numpoints=1)\n            for lt in leg.get_texts(): setp(lt, fontsize=tfsize-2, **fp)\n\n        l = self.pxlabel.get()\n        if len(l) > 0: xlabel(l, fontsize=lfsize, labelpad=10, **fp)\n        l = self.pylabel.get()\n        if len(l) > 0: ylabel(l, fontsize=lfsize, labelpad=10, **fp)\n\n        l = self.ptitle.get()\n        if len(l) > 0: title(l, fontsize=lfsize+2, **fp)\n\n        if self.gridon.get(): grid(True)\n        if self.ticksdir.get() == 2:\n            xticks([]); yticks([])\n        else:\n            if self.mtickon.get():\n                minorticks_on()\n                for xyax in (ax.xaxis, ax.yaxis):\n                    setp(xyax.get_minorticklines(), ms=2+axlinelw, mew=axlinelw-0.7)\n            for xyax in (ax.xaxis, ax.yaxis):\n                setp(xyax.get_ticklines(), ms=4+axlinelw, mew=axlinelw-0.3)\n                if self.x0on.get(): axvline(0.0, color='k')\n                if self.y0on.get(): axhline(0.0, color='k')\n        if self.xyon.get():\n            axy = axis()\n            plot(xlim(), xlim(), \"k-\")\n            axis(axy)\n        if self.textlabel.text.get():\n            tl = self.textlabel\n            if tl.trans.get() == 0:\n                transform = ax.transAxes\n            else:\n                transform = ax.transData\n            halign = ('left', 'center', 'right')\n            valign = ('top', 'center', 'bottom', 'baseline')\n            text(float(tl.x.get()), float(tl.y.get()),\n                 tl.text.get(),\n                 color=tl.color.get(),\n                 fontsize=float(tl.fsize.get()),\n                 ha = halign[tl.halign.get()],\n                 va = valign[tl.valign.get()],\n                 transform=transform, **fp)\n        show()\n\nglobalVarSet()\n\nif __name__ == \"__main__\":\n    app = App()\n    if(len(sys.argv) > 0):\n        app.setFileName(sys.argv)\n    app.mainloop()\n```\n", "tags": ["Python", "matplotlib"]}