{"context": " More than 1 year has passed since last update.This is an example of implementing dynamic fields of has_many associations.\nWe have two models Price and Product with has_many association as defined below.\n\nprice.rb\nclass Price < ActiveRecord::Base\n  belongs_to :product\nend\n\n\n\nproduct.rb\nclass Product < ActiveRecord::Base\n  has_many :prices\n  accepts_nested_attributes_for :prices, allow_destroy: true\n\n  def initialize(attrs=nil)\n    super\n    self.prices << Price.new if self.prices.empty?\n  end\nend\n\n\nWe define route for adding dynamic price fields.\n\nroutes.rb\n    resources :products do\n      get :new_price, on: :collection\n    end\n\n\nIn controller, we make sure  to include prices_attributes in permitted attributes.\nWe don't need any controller action for new_price since it will be processed directly by new_price.js.erb\n\nproducts_controller.rb\n  private\n  def product_params\n    params.require(:product).permit(:name, :other_product_fields...\n                                     prices_attributes: [\n                                       :id, :value, ...,\n                                     ])\n  end\n\n\nThis is the javascript for rendering new dynamic fields based on the next_index received.\nWe render the dynamic fields with child_index set as next_index. Also, next_index of new button is incremented.\n\nnew_price.js.erb\n<% field = \"\" %>\n<% form = \"\" %>\n\n<%# build a single price field %>\n<% form_for Product.new do |f| %>\n  <% form = f %>\n  <% f.fields_for :prices, Price.new, child_index: params[:next_index] do |fa,idx| %>\n    <% field = fa %>\n  <% end %>\n<% end %>\n$(\"#new-price\").append(\"<%= escape_javascript(render(partial: \"price\", locals: {f: form, fa: field}))%>\");\n$(\"#new-price-btn\").attr({href: \"<%= escape_javascript(new_price_products_path(next_index: params[:next_index].to_i+1)) %>\"})\n\n\nIn price partial file, _destroy checkbox is included so that we can remove dynamic fields on save.\n\n_price.html.haml\n/ Price fields ...\n\n/ Actions\n= fa.check_box :_destroy\n\n\nFinally, we add new price button in product form.\n\n_form.html.haml\n=form_for @product do |f|\n  / Product fields...\n  =f.fields_for :prices do |fa,idx|\n    / Price \n    = render partial: \"price\", locals: {f: f, fa: fa}\n  / Add new price button\n  = link_to new_price_products_path(next_index: f.object.prices.length), id: \"new-price-btn\", class: \"btn btn-info btn-sm\", remote: true do\n    =t(\"helpers.links.new\")\n\n\nThis is an example of implementing dynamic fields of has_many associations.\nWe have two models Price and Product with has_many association as defined below.\n\n```price.rb\nclass Price < ActiveRecord::Base\n  belongs_to :product\nend\n```\n\n```product.rb\nclass Product < ActiveRecord::Base\n  has_many :prices\n  accepts_nested_attributes_for :prices, allow_destroy: true\n\n  def initialize(attrs=nil)\n    super\n    self.prices << Price.new if self.prices.empty?\n  end\nend\n```\n\nWe define route for adding dynamic price fields.\n\n```routes.rb\n    resources :products do\n      get :new_price, on: :collection\n    end\n```\n\nIn controller, we make sure  to include prices_attributes in permitted attributes.\nWe don't need any controller action for new_price since it will be processed directly by new_price.js.erb\n\n```products_controller.rb\n  private\n  def product_params\n    params.require(:product).permit(:name, :other_product_fields...\n                                     prices_attributes: [\n                                       :id, :value, ...,\n                                     ])\n  end\n```\n\nThis is the javascript for rendering new dynamic fields based on the next_index received.\nWe render the dynamic fields with child_index set as next_index. Also, next_index of new button is incremented.\n\n```new_price.js.erb\n<% field = \"\" %>\n<% form = \"\" %>\n\n<%# build a single price field %>\n<% form_for Product.new do |f| %>\n  <% form = f %>\n  <% f.fields_for :prices, Price.new, child_index: params[:next_index] do |fa,idx| %>\n    <% field = fa %>\n  <% end %>\n<% end %>\n$(\"#new-price\").append(\"<%= escape_javascript(render(partial: \"price\", locals: {f: form, fa: field}))%>\");\n$(\"#new-price-btn\").attr({href: \"<%= escape_javascript(new_price_products_path(next_index: params[:next_index].to_i+1)) %>\"})\n```\n\nIn price partial file, _destroy checkbox is included so that we can remove dynamic fields on save.\n\n```_price.html.haml\n/ Price fields ...\n\n/ Actions\n= fa.check_box :_destroy\n```\n\nFinally, we add new price button in product form.\n\n```_form.html.haml\n=form_for @product do |f|\n  / Product fields...\n  =f.fields_for :prices do |fa,idx|\n    / Price \n    = render partial: \"price\", locals: {f: f, fa: fa}\n  / Add new price button\n  = link_to new_price_products_path(next_index: f.object.prices.length), id: \"new-price-btn\", class: \"btn btn-info btn-sm\", remote: true do\n    =t(\"helpers.links.new\")\n```\n\n\n\n", "tags": ["Rails", "Ajax"]}