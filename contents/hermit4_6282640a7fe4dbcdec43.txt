{"context": "\n\n\u306f\u3058\u3081\u306b\n\u3053\u306e\u65e5\u8a18\u306f\u3001Qt Advent Calendar 2016\u306e9\u65e5\u76ee\u306e\u65e5\u8a18\u3067\u3059\u3002\n\u6628\u65e5\u306f@nekomatu\u3055\u3093\u306b\u3088\u308b\u300cQtCreator\u306e\u7ffb\u8a33\u3092\u30ec\u30d3\u30e5\u30fc\u3057\u305f\u8a71\u300d\u3067\u3057\u305f\u3002Qt Creator\u306f\u4fbf\u5229\u306aIDE\u3067\u30e1\u30cb\u30e5\u30fc\u306a\u3069\u3082\u65e5\u672c\u8a9e\u5316\u3055\u308c\u3066\u3044\u307e\u3059\u304c\u3001\u3053\u308c\u3089\u306f\u671d\u6728\u3055\u3093\u3092\u306f\u3058\u3081\u6709\u5fd7\u306e\u307f\u306a\u3055\u3093\u306e\u304a\u304b\u3052\u3067\u3059\u3002\u3042\u308a\u304c\u305f\u3044\u3053\u3068\u3067\u3059\u306d\u3002\u8fd1\u3005 Qt Creator 4.2\u3082\u30ea\u30ea\u30fc\u30b9\u3055\u308c\u308b\u3053\u3068\u3067\u3057\u3087\u3046\u3057\u3001\u7ffb\u8a33\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u304c\u52df\u96c6\u3055\u308c\u308c\u3070\u662f\u975e\u304a\u624b\u4f1d\u3044\u3057\u305f\u3044\u3068\u3053\u308d\u3067\u3059\u3002\n\u3055\u3066\u3001Qt\u306e\u30ab\u30ec\u30f3\u30c0\u30fc\u30823\u5e74\u76ee\u3067\u3059\u304c\u30011\u5e74\u76ee\u30012\u5e74\u76ee\u306b\u30b9\u30ec\u30c3\u30c9\u95a2\u9023\u3092\uff12\u4ef6\u307b\u3069\u66f8\u304b\u305b\u3066\u3044\u305f\u3060\u304d\u307e\u3057\u305f\u3002\n\n\u300cQt\u3067\u30b9\u30ec\u30c3\u30c9\u3092\u4f7f\u3046\u524d\u306b\u77e5\u3063\u3066\u304a\u3053\u3046\u300d\n\u300cQThread\u3092\u4f7f\u3063\u3066\u307f\u3088\u3046\u300d\n\u300cQtConcurrent\u3067\u30de\u30eb\u30c1\u30b9\u30ec\u30c3\u30c9\u306b\u6311\u6226\u300d\n\n\u305b\u3063\u304b\u304f\u3067\u3059\u306e\u3067\u3001\u4eca\u5e74\u3082\uff11\u4ef6\u30b9\u30ec\u30c3\u30c9\u95a2\u9023\u3092\u3068\u3044\u3046\u3053\u3068\u3067\u3002\n\nSingle Threaded Execution\u30d1\u30bf\u30fc\u30f3\n\u7d50\u57ce\u6d69\u5148\u751f\u306e\u300eJava\u8a00\u8a9e\u3067\u5b66\u3076\u30c7\u30b6\u30a4\u30f3\u30d1\u30bf\u30fc\u30f3\u5165\u9580\u30de\u30eb\u30c1\u30b9\u30ec\u30c3\u30c9\u7de8\u300f\u3067\u300c\u3053\u306e\u6a4b\u3092\u308f\u305f\u308c\u308b\u306e\u306f\u4e00\u4eba\u3060\u3051\u300d\u3068\u3057\u3066\u7d39\u4ecb\u3055\u308c\u3066\u3044\u308b\u306e\u304c\u3001Single Thread Execution\u3067\u3059\u3002\n\u30de\u30eb\u30c1\u30b9\u30ec\u30c3\u30c9\u306f\u3001\u4e26\u5217\u306b\u52d5\u4f5c\u3092\u884c\u3046\u305f\u3081\u306e\u6a5f\u69cb\u3067\u3059\u304c\u3001\u4e26\u5217\u52d5\u4f5c\u3059\u308b\u8907\u6570\u306e\u30b9\u30ec\u30c3\u30c9\u304c\u3001\u540c\u6642\u306b\u540c\u3058\u30ea\u30bd\u30fc\u30b9\u306b\u5909\u66f4\u3092\u52a0\u3048\u308b\u3068\u305d\u306e\u7d50\u679c\u306f\u672a\u5b9a\u7fa9\u3067\u3059\u3002\u305d\u3053\u3067\u3001\u540c\u6642\u306b\u4e00\u3064\u306e\u30b9\u30ec\u30c3\u30c9\u3060\u3051\u304c\u5b9f\u884c\u3092\u884c\u3046\u3088\u3046\u306b\u3059\u308b\u3068\u3044\u3046\u30d1\u30bf\u30fc\u30f3\u304c\u3001Single Thread Execution\u3067\u3059\u3002\n\n\u30b9\u30ec\u30c3\u30c9\u30bb\u30fc\u30d5\u3067\u306f\u306a\u3044\u4f8b\n\u307e\u305a\u3001\u9580(Gate)\u3092\u4f5c\u308a\u3001\uff13\u4eba\u306e\u4eba\u7269\u306e\u901a\u884c\u8a18\u9332\u3092\u3068\u308a\u307e\u3059\u3002\n\u30fb\u4e95\u51fa\u6c0f\uff08\u77f3\u5ddd\u770c\uff09\n\u30fb\u4e09\u6728\u6c0f\uff08\u4e09\u91cd\u770c\uff09\n\u30fb\u798f\u7530\u6c0f\uff08\u798f\u5ca1\u770c\uff09\n\u5076\u7136\u3001\u540d\u524d\u306e\u30a4\u30cb\u30b7\u30e3\u30eb\u3068\u4f4f\u6240\u306e\u30a4\u30cb\u30b7\u30e3\u30eb\u304c\u4e00\u7dd2\u3067\u3059\u3002\n\n\u30d7\u30ed\u30b0\u30e9\u30e0\n\ngate.h\n#ifndef GATE_H\n#define GATE_H\n\n#include <QString>\n\nclass Gate\n{\npublic:\n    Gate();\n    void pass(const QString& name, const QString& address);\n\nprivate:\n    void check();\n\n    int cnt_;\n    QString name_;\n    QString address_;\n};\n\n#endif // GATE_H\n\n\n\ngate.cpp\n#include \"gate.h\"\n#include <QDebug>\n\nGate::Gate()\n    : cnt_(0)\n{\n}\n\nvoid Gate::pass(const QString &name, const QString &address)\n{\n    ++cnt_;\n    name_ = name;\n    address_ = address;\n    check();\n}\n\nvoid Gate::check()\n{\n    if (name_.at(0) != address_.at(0)) {\n        qWarning() << \"****** BROKEN ****** No.\" << cnt_ << \" : \" << name_ << \",\" << address_;\n    }\n}\n\n\n\u30b2\u30fc\u30c8\u3092\u6e21\u3063\u305f\u5f8c\u3001\u4e00\u5fdc\u540d\u524d\u3068\u30a2\u30c9\u30ec\u30b9\u306e\u30a4\u30cb\u30b7\u30e3\u30eb\u304c\u4e00\u81f4\u3057\u3066\u3044\u308b\u304b\u691c\u67fb\u3057\u3066\u304a\u304d\u307e\u3057\u3087\u3046\u3002\n\nuserthread.h\n#ifndef USERTHREAD_H\n#define USERTHREAD_H\n\n#include <QThread>\nclass Gate;\n\nclass UserThread : public QThread\n{\n    Q_OBJECT\npublic:\n    explicit UserThread(Gate* gate, const QString& name, const QString& addr, QObject *parent = 0);\n\nprotected:\n    void run();\n\nprivate:\n    Gate*   gate_;\n    QString name_;\n    QString address_;\n};\n\n#endif // USERTHREAD_H\n\n\n\n\nuserthread.cpp\n#include \"userthread.h\"\n#include \"gate.h\"\n\nUserThread::UserThread(Gate *gate, const QString &name, const QString &addr, QObject *parent)\n    : QThread(parent), gate_(gate), name_(name), address_(addr)\n{\n}\n\nvoid UserThread::run()\n{\n    forever {\n        gate_->pass(name_, address_);\n    }\n}\n\n\n\n\nmain.cpp\n#include <QCoreApplication>\n#include \"gate.h\"\n#include \"userthread.h\"\n\nint main(int argc, char *argv[])\n{\n    QCoreApplication a(argc, argv);\n    Gate* gate = new Gate;\n    UserThread alice(gate, \"Ide\", \"Ishikawa\");\n    UserThread bobby(gate, \"Miki\", \"Mie\");\n    UserThread chris(gate, \"Fukuda\", \"Fukuoka\");\n    alice.start();\n    bobby.start();\n    chris.start();\n    alice.wait();\n    bobby.wait();\n    chris.wait();\n    delete gate;\n    return 0;\n}\n\n\n\n\n\u5b9f\u884c\u7d50\u679c\n\u4e0a\u8a18\u30d7\u30ed\u30b0\u30e9\u30e0\u306e\u5b9f\u884c\u7d50\u679c\u306f\u3001\u6563\u3005\u3067\u3059\u3002\n****** BROKEN ****** No. 792  :  \"Fukuda\" , \"Fukuoka\"\n****** BROKEN ****** No. 792  :  \"Fukuda\" , \"Fukuoka\"\ngate_nothreadsafe(7706,0x7000006b5000) malloc: *** error for object 0x7f9e9fa06f60: pointer being freed was not allocated\n*** set a breakpoint in malloc_error_break to debug\n****** BROKEN ****** No. 4269  :  \"Miki\" , \"Mie\"\n****** BROKEN ****** No. 4522  :  \"Miki\" , \"Mie\"\n****** BROKEN ****** No. 4658  :  \"Miki\" , \"Mie\"\ngate_nothreadsafe(7706,0x700000632000) malloc: *** error for object 0x7f9e9fa06e70: pointer being freed was not allocated\n*** set a breakpoint in malloc_error_break to debug\ngate_nothreadsafe(7706,0x7000005af000) malloc: *** error for object 0x7f9e9fa06e70: pointer being freed was not allocated\n*** set a breakpoint in malloc_error_break to debug\n<\u30ea\u30bf\u30fc\u30f3>\u30ad\u30fc\u3092\u62bc\u3057\u3066\u30a6\u30a3\u30f3\u30c9\u30a6\u3092\u9589\u3058\u3066\u304f\u3060\u3055\u3044...\n\n792\u756a\u76ee\u3067\u58ca\u308c\u3066\u3044\u308b\u3068\u51fa\u3066\u3044\u308b\u306e\u306b\u3001\u30a4\u30cb\u30b7\u30e3\u30eb\u304c\u4e00\u81f4\u3057\u3066\u3044\u307e\u3059\u3002\u305d\u306e\u5f8c\u3001malloc\u3067\u30a8\u30e9\u30fc\u304c\u51fa\u305f\u308a\u3001\u6319\u53e5\u306b\u30d7\u30ed\u30b0\u30e9\u30e0\u304c\u30af\u30e9\u30c3\u30b7\u30e5\u3057\u305f\u308a\u3057\u307e\u3057\u305f\u3002\n\u306a\u305c\u3053\u3093\u306a\u3053\u3068\u306b\u306a\u308b\u306e\u3067\u3057\u3087\u3046\u304b\u3002\n\n\u89e3\u8aac\n\u3053\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u306f\u3001\uff13\u3064\u306e\u30b9\u30ec\u30c3\u30c9\u304c\u52d5\u4f5c\u3057\u3066\u3044\u307e\u3059\u3002\u3053\u306e\uff13\u3064\u306e\u30b9\u30ec\u30c3\u30c9\u306f\u4e26\u5217\u306b\u52d5\u4f5c\u3057\u306a\u304c\u3089\u3001\u540c\u3058\uff11\u3064\u306eGate\u30af\u30e9\u30b9\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u306b\u30a2\u30af\u30bb\u30b9\u3057\u3066\u3044\u307e\u3059\u3002\n\u51e6\u7406\u7684\u306b\u306f\u3001\u30ab\u30a6\u30f3\u30bf\u3092\u30ab\u30a6\u30f3\u30c8\u30a2\u30c3\u30d7\u3057\u3066name\u3068address\u3092\u8a18\u9332\u3057\u3066\u3044\u308b\u3060\u3051\u3067\u3059\u304c\u3001\n1)cnt_\u3092\u52a0\u7b97\u3059\u308b\n2)name_\u3092name\u306b\u7f6e\u304d\u63db\u3048\u308b\n3)address_\u3092address\u306b\u7f6e\u304d\u63db\u3048\u308b\n4)name_\u306e\u4e00\u6587\u5b57\u76ee\u3092\u53d6\u308a\u51fa\u3057\n5)address_\u306e\u4e00\u6587\u5b57\u76ee\u3092\u53d6\u308a\u51fa\u3057\n6)\u6bd4\u8f03\n7)\u4e0d\u4e00\u81f4\u306a\u3089\u753b\u9762\u306b\u8868\u793a\n\u3068\u5927\u96d1\u628a\u306b\u308f\u3051\u3066\u3082\u4e0a\u8a18\u306e\u3088\u3046\u306a\u4f5c\u696d\u304c\uff13\u4eba\u5206\u4e26\u5217\u4f5c\u696d\u3055\u308c\u307e\u3059\u3002\u4e00\u9023\u306e\u51e6\u7406\u304c\u4e26\u5217\u306b\u5272\u308a\u8fbc\u307e\u308c\u306a\u304c\u3089\u52d5\u4f5c\u3059\u308b\u3068\u3057\u3066\n1-1) cnt_(0) + 1\n1-2) name_ = \"Ide\"\n1-3) address_ = \"Ishikawa\"\n2-1) cnt_(1) + 1\n2-2) name_ = \"Miki\"\n3-1) cnt_(2) + 1\n1-4) name_[0] == 'M'\n1-5) address_[0] = 'I'\n1-6) \u6bd4\u8f03\u3000\uff08\u4e0d\u4e00\u81f4\uff09\n2-3) address_ = \"Mie\"\n1-7) warning \"Miki\",\"Mie\"\n\u3068\u3044\u3046\u3053\u3068\u306b\u306a\u308b\u3068\u3001Warning\u3068\u3057\u3066\u6b63\u3057\u304f\u898b\u3048\u308b\u60c5\u5831\u304c\u8868\u793a\u3055\u308c\u305f\u308a\u3082\u3059\u308b\u308f\u3051\u3067\u3059\u3002\n\u304a\u307e\u3051\u306b\u3001QString\u578b\u306f\u5185\u90e8\u3067\u6587\u5b57\u5217\u7528\u306e\u30d2\u30fc\u30d7\u3092\u78ba\u4fdd\u3001\u30b3\u30d4\u30fc\u3001\u89e3\u653e\u306a\u3069\u3092\u3057\u3066\u3044\u307e\u3059\u3002\u4f55\u306e\u5bfe\u7b56\u3082\u305b\u305a\u4e26\u5217\u306b\u5272\u308a\u8fbc\u3093\u3067\u3057\u307e\u3063\u305f\u3089\u30e1\u30e2\u30ea\u5468\u308a\u3067\u6df1\u523b\u306a\u7834\u7dbb\u3092\u8d77\u3053\u3059\u3053\u3068\u3082\u3042\u308b\u3067\u3057\u3087\u3046\u3002\n\u3053\u306e\u3088\u3046\u306b\u3001\u5171\u6709\u306e\u30ea\u30bd\u30fc\u30b9\u306b\u5225\u3005\u306b\u66f8\u304d\u8fbc\u3080\u305f\u3081\u3001\u4e26\u5217\u306b\u5b9f\u884c\u3059\u308b\u3068\u7834\u7dbb\u3059\u308b\u90e8\u5206\u3092\u30af\u30ea\u30c6\u30a3\u30ab\u30eb\u30bb\u30c3\u30b7\u30e7\u30f3\u3068\u547c\u3073\u307e\u3059\u3002\n\u30af\u30ea\u30c6\u30a3\u30ab\u30eb\u30bb\u30c3\u30b7\u30e7\u30f3\u3067\u306f\u3053\u306e\u3088\u3046\u306a\u7834\u58ca\u3092\u9632\u3050\u305f\u3081\u3001\u30b9\u30ec\u30c3\u30c9\u9593\u3067\u6392\u4ed6\u5236\u5fa1\u3092\u884c\u3063\u3066\u3001\u4e00\u3064\u306e\u30ec\u30c3\u30c9\u3060\u3051\u304c\u5b9f\u884c\u3055\u308c\u308b\u3088\u3046\u306b\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\u3053\u306e\u3088\u3046\u306a\u6642\u306b\u5229\u7528\u3059\u308b\u306e\u304c\u3001QMutex\u3067\u3059\u3002\n\ngate.h\n#ifndef GATE_H\n#define GATE_H\n\n#include <QString>\n#include <QMutex>\n\nclass Gate\n{\npublic:\n    Gate();\n    void pass(const QString& name, const QString& address);\n\nprivate:\n    void check();\n\n    int cnt_;\n    QString name_;\n    QString address_;\n    QMutex mutex_;\n};\n\n#endif // GATE_H\n\n\n\nQMutex\u578b\u306e\u30e1\u30f3\u30d0\u3092\u4e00\u3064\u7528\u610f\u3057\u307e\u3057\u305f\u3002\n\ngate.cpp\nvoid Gate::pass(const QString &name, const QString &address)\n{\n    mutex_.lock();\n    ++cnt_;\n    name_ = name;\n    address_ = address;\n    check();\n    mutex_.unlock();\n}\n\n\n\u3042\u3068\u306f\u3001Gate\u901a\u904e\u8a18\u9332\u524d\u306block\u3092\u304b\u3051\u3001\u901a\u904e\u8a18\u9332\u30fb\u691c\u8a3c\u5f8c\u306bunlock\u3059\u308b\u3060\u3051\u3067\u3059\u3002\n\u3053\u3046\u3059\u308b\u3053\u3068\u3067\u3001\u8ab0\u304b\u4e00\u4eba\u304clock\u3057\u3066\u5024\u3092\u8aad\u307f\u66f8\u304d\u3057\u3066\u3044\u308b\u6700\u4e2d\u3001\u4ed6\u306e\u4eba\u306flock()\u6642\u70b9\u3067\u5f85\u3061\u5408\u308f\u305b\u3092\u884c\u3044\u3001unlock\u3055\u308c\u308b\u306e\u3092\u5f85\u3061\u307e\u3059\u3002\u3053\u306e\u3088\u3046\u306a\u6392\u4ed6\u5236\u5fa1\u306e\u305f\u3081\u306b\u4f7f\u3046\u306e\u304c\u3001QMutex\u3067\u3059\u3002\n\nQMutexLocker\u3092\u4f7f\u304a\u3046\n\u3068\u3053\u308d\u3067\u3001\u5341\u5206\u306b\u5b89\u5b9a\u3057\u3066\u304d\u305f\u306e\u3067check\u306f10\u56de\u306b\uff11\u56de\u884c\u308f\u308c\u308c\u3070\u3044\u3044\u3068\u3057\u307e\u3057\u3087\u3046\u3002\n\ngate.cpp\nvoid Gate::pass(const QString &name, const QString &address)\n{\n    mutex_.lock();\n    ++cnt_;\n    name_ = name;\n    address_ = address;\n    if (cnt_ % 10) \n        return;\n    check();\n    mutex_.unlock();\n}\n\n\n\u4f55\u304c\u8d77\u304d\u308b\u304b\u304a\u308f\u304b\u308a\u3067\u3057\u3087\u3046\u304b\u3002\u4e0a\u8a18\u306funlock\u524d\u306breturn\u3057\u3066\u3057\u307e\u3063\u3066\u3044\u307e\u3059\u3002\u3053\u306e\u307e\u307e\u629c\u3051\u3066\u3057\u307e\u3046\u3068\u3001lock\u3057\u305f\u307e\u307e\u3068\u306a\u308b\u305f\u3081\u3053\u306e\u5f8c\u306elock\u306f\u3059\u3079\u3066\u5f85\u3061\u72b6\u614b\u306b\u306a\u308a\u307e\u3059\u3002\n\u3053\u306e\u305f\u3081\u3001\u30d7\u30ed\u30b0\u30e9\u30e0\u306f\u6c38\u9060\u306b\u6b62\u307e\u3063\u305f\u307e\u307e\u3068\u306a\u308a\u307e\u3059\u3002\u3053\u306e\u3088\u3046\u306a\u30d0\u30b0\u3092\u9632\u3050\u306b\u306fQMutexLocker\u304c\u4fbf\u5229\u3067\u3059\u3002\n\ngate.cpp\n#include \"gate.h\"\n#include <QMutexLocker>\n#include <QDebug>\n\nGate::Gate()\n    : cnt_(0)\n{\n}\n\nvoid Gate::pass(const QString &name, const QString &address)\n{\n    QMutexLocker lock(&mutex_);\n    ++cnt_;\n    name_ = name;\n    address_ = address;\n    if (cnt_ % 10)\n        return;\n    check();\n}\n\nvoid Gate::check()\n{\n    if (name_.at(0) != address_.at(0)) {\n        qWarning() << \"****** BROKEN ****** No.\" << cnt_ << \" : \" << name_ << \",\" << address_;\n    }\n}\n\n\n\n\u3053\u3046\u3059\u308b\u3068\u3001QMutexLocker\u306f\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30c8\u6642\u306b\u30ed\u30c3\u30af\u3092\u884c\u3044\u3001\u30c7\u30b9\u30c8\u30e9\u30af\u30c8\u6642\u306bunlock\u3057\u3066\u304f\u308c\u308b\u306e\u3067\u3059\u3002\u9014\u4e2d\u3067\u9593\u9055\u3063\u3066return\u3084\u4f8b\u5916\u306ethrow\u3067\u629c\u3051\u3066\u3057\u307e\u3063\u3066\u3082\u3001mutex\u3092\u30ed\u30c3\u30af\u3057\u305f\u307e\u307e\u306b\u306a\u308b\u3053\u3068\u304c\u9632\u3052\u307e\u3059\u3002\n\nGuarded Suspension\u30d1\u30bf\u30fc\u30f3\n\u7d9a\u3044\u3066\u306f\u3001\u7d50\u57ce\u5148\u751f\u306e\u30c7\u30b6\u30a4\u30f3\u30d1\u30bf\u30fc\u30f3\u672c\u3067\u300c\u7528\u610f\u304c\u3067\u304d\u308b\u307e\u3067\u3001\u5f85\u3063\u3066\u3066\u306d\u300d\u3068\u7d39\u4ecb\u3055\u308c\u3066\u3044\u308bGuarded Suspension\u30d1\u30bf\u30fc\u30f3\u3067\u3059\u3002\n\u30d5\u30a1\u30df\u30ec\u30b9\u3067\u3001\u6ce8\u6587\u3092\u6c7a\u3081\u305f\u3089\u30dc\u30bf\u30f3\u3092\u62bc\u3057\u3066\u304a\u77e5\u3089\u305b\u4e0b\u3055\u3044\u3068\u8a00\u308f\u308c\u307e\u3059\u3088\u306d\u3002\u30dc\u30bf\u30f3\u3092\u62bc\u3059\u3068\u3001\u624b\u306e\u7a7a\u3044\u305f\u5e97\u54e1\u3055\u3093\u304c\u6ce8\u6587\u3092\u4f3a\u3044\u306b\u6765\u3066\u304f\u308c\u307e\u3059\u304c\u3001\u624b\u304c\u7a7a\u304b\u306a\u3044\u5834\u5408\u306b\u300c\u5f85\u305f\u305b\u308b\u300d\u3068\u3044\u3046\u6319\u52d5\u3092\u30b9\u30ec\u30c3\u30c9\u306b\u5b9f\u73fe\u3055\u305b\u308b\u306e\u304c\u3001\u3053\u306e\u30d1\u30bf\u30fc\u30f3\u3067\u3059\u3002\n\n\u30b5\u30f3\u30d7\u30eb\u30d7\u30ed\u30b0\u30e9\u30e0\n\nRequestQueue\u30af\u30e9\u30b9\n\nrequestqueue.h\n#ifndef REQUESTQUEUE_H\n#define REQUESTQUEUE_H\n\n#include <QString>\n#include <QQueue>\n#include <QMutex>\n#include <QWaitCondition>\n\nclass RequestQueue\n{\npublic:\n    struct Request {\n        Request(const QString& name) : name_(name) {}\n        QString name_;\n    };\n\n    explicit RequestQueue();\n    Request getRequest();\n    void putRequest(const Request& request);\n\nprivate:\n    QMutex mutex_;\n    QWaitCondition cond_;\n    QQueue<Request> queue_;\n};\n\n#endif // REQUESTQUEUE_H\n\n\n\nrequestqueue.cpp\n#include \"requestqueue.h\"\n#include <QMutexLocker>\n\nRequestQueue::RequestQueue()\n{\n}\n\nRequestQueue::Request RequestQueue::getRequest()\n{\n    QMutexLocker lock(&mutex_);\n    while (queue_.isEmpty()) {\n        cond_.wait(&mutex_);\n    }\n    return queue_.dequeue();\n}\n\nvoid RequestQueue::putRequest(const RequestQueue::Request &request)\n{\n    QMutexLocker lock(&mutex_);\n    queue_.enqueue(request);\n    cond_.wakeAll();\n}\n\n\n\u3053\u306e\u30af\u30e9\u30b9\u306f\u3001\u30ea\u30af\u30a8\u30b9\u30c8\u306e\u51e6\u7406\u3092\u4ef2\u4ecb\u3059\u308b\u30af\u30e9\u30b9\u3067\u3059\u3002\u5148\u307b\u3069\u306e\u4f8b\u3067\u3044\u3046\u3068Gate\u30af\u30e9\u30b9\u3068\u540c\u3058\u7acb\u5834\u306b\u3044\u307e\u3059\u304c\u3001\u4eca\u56de\u306fput\u3055\u308c\u305f\u60c5\u5831\u3092\u4fdd\u6301\u3057\u3066\u3001get\u3055\u308c\u305f\u3089\u8fd4\u3059\u305f\u3081\u30ad\u30e5\u30fc\u3092\u6709\u3057\u3066\u3044\u307e\u3059\u3002\nput\u3059\u308b\u3088\u308a\u3082\u591a\u304fget\u3055\u308c\u308b\u3068\u3001\u5f53\u7136\u30ad\u30e5\u30fc\u304c\u30ab\u30e9\u306b\u306a\u308b\u30b1\u30fc\u30b9\u304c\u3042\u308b\u305f\u3081\u3001\u5f85\u3061\u72b6\u614b\u304c\u767a\u751f\u3057\u307e\u3059\u3002\n\u3053\u306e\u3088\u3046\u306a\u5834\u5408\u306b\u4f7f\u3046\u306e\u304c\u3001QWaitCondition\u3067\u3059\u3002putRequest\u306f\u3001\u6700\u521d\u306bMutex\u3092lock\u3057\u3066\u6392\u4ed6\u5236\u5fa1\u3057\u3001queue\u306e\u7a7a\u304d\u72b6\u614b\u3092\u78ba\u8a8d\u3057\u307e\u3059\u3002\u3082\u3057\u30ab\u30e9\u3060\u3063\u305f\u5834\u5408\u3001QWaitCondition::wait\u306bmutex_\u3092\u6e21\u3057\u3066\u3044\u307e\u3059\u3002\nQWaitCondition\u306bQMutex\u3092\u6e21\u3059\u3068\u3001mutex\u3092\u4e00\u6642\u7684\u306bunlock\u3057\u3066condition\u306e\u6210\u7acb\u3092\u5f85\u3061\u5408\u308f\u305b\u3001condition\u306e\u6210\u7acb\u3092\u901a\u77e5\u3055\u308c\u308b\u3068mutex\u3092\u53d6\u5f97\u3057\u307e\u3059\u3002\nputRequest\u306e\u5074\u306f\u3001mutex\u3092\u30ed\u30c3\u30af\u3057\u3066queue\u306bRequest\u3092\u5165\u308c\u305f\u5f8c\u3001QWaitCondition\u306ewakeAll\u3092\u5b9f\u65bd\u3057\u3066\u3044\u307e\u3059\u3001\u3053\u308c\u306f\u3001QWaitCondition\u3067wait\u3057\u3066\u3044\u308b\u5168\u3066\u306e\u30b9\u30ec\u30c3\u30c9\u306b\u5bfe\u3057\u3066\u3001\u6761\u4ef6\u6210\u7acb\u3092\u901a\u77e5\u3057\u3066\u8d77\u3053\u3059\u305f\u3081\u306e\u51e6\u7406\u3067\u3001\u3053\u306e\u6642\u70b9\u3067\u5168\u3066\u306e\u30b9\u30ec\u30c3\u30c9\u304cMutex\u306elock\u3092\u3057\u3088\u3046\u3068\u3057\u3066\u3001\u30ed\u30c3\u30af\u3067\u304d\u305f\u30b9\u30ec\u30c3\u30c9\u304b\u3089\u52d5\u4f5c\u3092\u518d\u958b\u3057\u307e\u3059\u3002\n\nclienthread.h\n#ifndef CLIENTTHREAD_H\n#define CLIENTTHREAD_H\n\n#include <QThread>\nclass RequestQueue;\n\nclass ClientThread : public QThread\n{\n    Q_OBJECT\npublic:\n    explicit ClientThread(RequestQueue* queue, const QString& name,\n                          QObject *parent = 0);\n\nprotected:\n    void run();\n\nprivate:\n    RequestQueue* queue_;\n    QString name_;\n};\n\n#endif // CLIENTTHREAD_H\n\n\n\n\nclientthread.cpp\n#include \"clientthread.h\"\n#include \"requestqueue.h\"\n#include <QDebug>\n\nClientThread::ClientThread(RequestQueue *queue, const QString &name, QObject *parent)\n    : QThread(parent), queue_(queue), name_(name)\n{\n}\n\nvoid ClientThread::run()\n{\n    qsrand(3141592);\n    for (int i=0; i<100000; ++i) {\n        RequestQueue::Request request(tr(\"No.%1\").arg(i));\n        qDebug() << name_ << \" request \" << request.name_;\n        queue_->putRequest(request);\n        msleep(qrand() % 1000);\n    }\n}\n\n\n\nserverthread.h\n#ifndef SERVERTHREAD_H\n#define SERVERTHREAD_H\n\n#include <QThread>\nclass RequestQueue;\n\nclass ServerThread : public QThread\n{\n    Q_OBJECT\npublic:\n    ServerThread(RequestQueue* queue, const QString& name, QObject* parent=0);\n\nprotected:\n    void run();\n\nprivate:\n    RequestQueue* queue_;\n    QString name_;\n};\n\n#endif // SERVERTHREAD_H\n\n\n\nserverthread.cpp\n#include \"serverthread.h\"\n#include \"requestqueue.h\"\n#include <QDebug>\n\nServerThread::ServerThread(RequestQueue *queue, const QString &name, QObject *parent)\n    : QThread(parent), queue_(queue), name_(name)\n{\n}\n\nvoid ServerThread::run()\n{\n    qsrand(6535897);\n    for (int i=0; i<10000; ++i) {\n        RequestQueue::Request request = queue_->getRequest();\n        qDebug() << name_ << \" handles \" << request.name_;\n        msleep(qrand()%1000);\n    }\n}\n\n\n\nmain.cpp\n#include <QCoreApplication>\n#include \"clientthread.h\"\n#include \"serverthread.h\"\n#include \"requestqueue.h\"\n\nint main(int argc, char *argv[])\n{\n    QCoreApplication a(argc, argv);\n    RequestQueue* queue = new RequestQueue;\n    ClientThread client(queue, \"Alice\");\n    ServerThread server(queue, \"Bobby\");\n    client.start();\n    server.start();\n    client.wait();\n    server.wait();\n    delete queue;\n    return 0;\n}\n\n\n\u3042\u3068\u306f\u3001\u3053\u306eRequestQueue\u306bput\u3059\u308bclient\u3068get\u3059\u308bserver\u3092\u7528\u610f\u3057\u3066\u4e21\u8005\u3067\u3084\u308a\u3068\u308a\u3055\u305b\u307e\u3059\u3002\u3053\u306e\u4e21\u8005\u306f\u3001\u9069\u5ea6\u306b\u52d5\u4f5c\u304c\u3070\u3089\u3051\u308b\u3088\u3046\u306b\u30e9\u30f3\u30c0\u30e0\u306bsleep\u3059\u308b\u3088\u3046\u306b\u5b9f\u88c5\u3057\u3066\u3044\u307e\u3059\u3002\n\n\u5b9f\u884c\u7d50\u679c\n\"Alice\"  request  \"No.0\"\n\"Bobby\"  handles  \"No.0\"\n\"Alice\"  request  \"No.1\"\n\"Alice\"  request  \"No.2\" // Client\u304c\u5148\u306brequest2\u307e\u3067\u5165\u308c\u308b\n\"Bobby\"  handles  \"No.1\"\n\"Alice\"  request  \"No.3\"\n\"Bobby\"  handles  \"No.2\"\n\"Alice\"  request  \"No.4\"\n\"Bobby\"  handles  \"No.3\"\n\"Alice\"  request  \"No.5\"\n\"Bobby\"  handles  \"No.4\"\n\"Alice\"  request  \"No.6\"\n\"Bobby\"  handles  \"No.5\"\n\"Alice\"  request  \"No.7\"\n\"Bobby\"  handles  \"No.6\"\n\"Alice\"  request  \"No.8\"\n\"Bobby\"  handles  \"No.7\"\n\"Alice\"  request  \"No.9\"\n\"Alice\"  request  \"No.10\"\n\"Alice\"  request  \"No.11\"\n\"Bobby\"  handles  \"No.8\"\n\"Bobby\"  handles  \"No.9\"\n\"Alice\"  request  \"No.12\"\n\"Bobby\"  handles  \"No.10\"\n\"Bobby\"  handles  \"No.11\"\n\"Alice\"  request  \"No.13\"\n\"Bobby\"  handles  \"No.12\"\n\"Alice\"  request  \"No.14\"\n\"Alice\"  request  \"No.15\"\n\"Alice\"  request  \"No.16\" // Client\u304c\u9577\u3081\u306esleep\u306b\u7a81\u5165\n\"Bobby\"  handles  \"No.13\"\n\"Bobby\"  handles  \"No.14\"\n\"Bobby\"  handles  \"No.15\"\n\"Bobby\"  handles  \"No.16\" // Server\u304c\u8ffd\u3044\u3064\u3044\u3066\u7a7a\u306b\u306a\u3063\u3066wait\n\"Alice\"  request  \"No.17\" // Client\u304c\u8ffd\u52a0\u3057\u3066wakeAll()\n\"Bobby\"  handles  \"No.17\" // Server\u304c\u51e6\u7406\u518d\u958b\n\n\nProducer-Consumer\u30d1\u30bf\u30fc\u30f3\n\u3055\u3066\u3001Guarded Suspension\u306e\u4f8b\u3067\u306f\u3001Client\u306f\u6c38\u9060\u3068put\u3057\u7d9a\u3051\u3066\u3001Server\u306fempty\u306a\u3089\u5f85\u3064\u3068\u3044\u3046\u5b9f\u88c5\u3067\u3057\u305f\u3002\u3082\u3057\u3001Server\u5074\u304c\u30df\u30ea\u79d2\u5358\u4f4d\u3067\u306f\u306a\u304f\u79d2\u5358\u4f4d\u3067\u5f85\u3061\u5408\u308f\u305b\u3066\u304a\u308a\u3001Client\u304c\u56de\u6570\u5236\u9650\u306a\u304f\u7121\u5236\u9650\u306bput\u3057\u3066\u305f\u3089\u3069\u3046\u306a\u308b\u3067\u3057\u3087\u3046\u304b\u3002\nRequestQueue\u304c\u4fdd\u6301\u3067\u304d\u308b\u9650\u754c\u306b\u9054\u3057\u3066\u7834\u7dbb\u3059\u308b\u304b\u3001\u30e1\u30e2\u30ea\u30b5\u30a4\u30ba\u3092\u3068\u308a\u3059\u304e\u3066\u7834\u7dbb\u3059\u308b\u304b\u3001\u6761\u4ef6\u306b\u3082\u3088\u308a\u307e\u3059\u304c\u3001put\u5074\u306b\u3082\u76f8\u5fdc\u306e\u30ac\u30fc\u30c9\u3092\u5165\u308c\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\n\u305d\u3046\u3044\u3046\u3053\u3068\u3092\u8003\u616e\u3057\u3001\u751f\u7523\u8005(Producer)\u3001\u6d88\u8cbb\u8005(Consumer)\u304c\u3001\u305d\u308c\u305e\u308cGuarded Suspension\u3092\u884c\u3046\u30d1\u30bf\u30fc\u30f3\u3092Producer-Consumer\u30d1\u30bf\u30fc\u30f3\u3068\u8a00\u3044\u307e\u3059\u3002\n\u7d50\u57ce\u5148\u751f\u306e\u672c\u306b\u3042\u3084\u304b\u3063\u3066\u3001\u66f8\u7c4d\u306e\u30b5\u30f3\u30d7\u30eb\u3092C++\u5316\u3059\u308b\u306e\u3082\u826f\u3044\u306e\u3067\u3059\u304c\u3001\u3061\u3087\u3063\u3068\u57f7\u7b46\u6d3b\u52d5\u304c\u6ede\u3063\u3066\u307e\u3059\u3057\u3001Qt\u306b\u306f\u8c4a\u5bcc\u306a\u30b5\u30f3\u30d7\u30eb\u304c\u542b\u307e\u308c\u3066\u3044\u307e\u3059\u3002\u305d\u3053\u3067\u3001Qt\u306e\u300c\u3088\u3046\u3053\u305d\u300d\u304b\u3089\u30b5\u30f3\u30d7\u30eb\u3092\u958b\u304d\u307e\u3057\u3087\u3046\u3002\n\nWaitCondition\u3092\u4f7f\u3046\u4f8b\n\nWait Condition Example\u3067\u3059\u3002\n\nwaitconditions.cpp\n/*\n**\n** Copyright (C) 2016 The Qt Company Ltd.\n** Contact: https://www.qt.io/licensing/\n**\n** This file is part of the examples of the Qt Toolkit.\n**\n** \u30a4\u30ab\u7565\uff09BSD\u30e9\u30a4\u30bb\u30f3\u30b9\u3067\u63d0\u4f9b\u3055\u308c\u3066\u3044\u307e\u3059\n*/\n\n#include <QtCore>\n\n#include <stdio.h>\n#include <stdlib.h>\n\nconst int DataSize = 100000;\n\nconst int BufferSize = 8192;\nchar buffer[BufferSize];\n\nQWaitCondition bufferNotEmpty;\nQWaitCondition bufferNotFull;\nQMutex mutex;\nint numUsedBytes = 0;\n\nclass Producer : public QThread\n{\npublic:\n    Producer(QObject *parent = NULL) : QThread(parent)\n    {\n    }\n\n    void run() Q_DECL_OVERRIDE\n    {\n        qsrand(QTime(0,0,0).secsTo(QTime::currentTime()));\n\n        for (int i = 0; i < DataSize; ++i) {\n            mutex.lock();\n            if (numUsedBytes == BufferSize)\n                bufferNotFull.wait(&mutex);\n            mutex.unlock();\n\n            buffer[i % BufferSize] = \"ACGT\"[(int)qrand() % 4];\n\n            mutex.lock();\n            ++numUsedBytes;\n            bufferNotEmpty.wakeAll();\n            mutex.unlock();\n        }\n    }\n};\n\nclass Consumer : public QThread\n{\n    Q_OBJECT\npublic:\n    Consumer(QObject *parent = NULL) : QThread(parent)\n    {\n    }\n\n    void run() Q_DECL_OVERRIDE\n    {\n        for (int i = 0; i < DataSize; ++i) {\n            mutex.lock();\n            if (numUsedBytes == 0)\n                bufferNotEmpty.wait(&mutex);\n            mutex.unlock();\n\n            fprintf(stderr, \"%c\", buffer[i % BufferSize]);\n\n            mutex.lock();\n            --numUsedBytes;\n            bufferNotFull.wakeAll();\n            mutex.unlock();\n        }\n        fprintf(stderr, \"\\n\");\n    }\n\nsignals:\n    void stringConsumed(const QString &text);\n};\n\nint main(int argc, char *argv[])\n{\n    QCoreApplication app(argc, argv);\n    Producer producer;\n    Consumer consumer;\n    producer.start();\n    consumer.start();\n    producer.wait();\n    consumer.wait();\n    return 0;\n}\n\n#include \"waitconditions.moc\"\n\n\n\u6700\u5f8c\u306b#include \u3057\u3066\u3044\u308b\u306e\u306f\u3001wait conditions.cpp\u306bQObject\u306e\u30b3\u30fc\u30c9\u3092\u5165\u308c\u3066\u3044\u308b\u305f\u3081\u3067\u3001moc\u306e\u751f\u6210\u3059\u308b\u30b3\u30fc\u30c9\u3092\u53d6\u308a\u8fbc\u3080\u5fc5\u8981\u304c\u3042\u308b\u304b\u3089\u3067\u3059\u3002\n\u3053\u306e\u30b5\u30f3\u30d7\u30eb\u306f\u3001char\u578b\u306e8192byte\u306ebuffer\u3092\u30ea\u30f3\u30b0\u30d0\u30c3\u30d5\u30a1\u3068\u3057\u3066\u4f7f\u3044\u3001Producer\u3068Consumer\u9593\u3067100000byte\u306eA/C/G/T\u306e\u3046\u3061\u4efb\u610f\u306e\u4e00\u6587\u5b57\u3092\u53d7\u3051\u308f\u305f\u3059\u3068\u3044\u3046\u30b5\u30f3\u30d7\u30eb\u3067\u3059\u3002\n\uff12\u3064\u306eQWaitCondition\u30681\u3064\u306eQMutex\u3092\u4f7f\u3044\u3001\u30d0\u30c3\u30d5\u30a1\u304c\u7a7a\u306a\u3089Consumer\u304c\u5f85\u3061\u3001\u30d0\u30c3\u30d5\u30a1\u304c\u4e00\u676f\u306a\u3089Producer\u304c\u5f85\u3064\u3068\u3044\u3046\u5b9f\u88c5\u3068\u306a\u3063\u3066\u3044\u307e\u3059\u3002\n\u3068\u3053\u308d\u3067\u3001QMutex\u306f\u6392\u4ed6\u5236\u5fa1\u3067\u3059\u304b\u3089\u3001\u30d0\u30c3\u30d5\u30a1\u306e\u4f7f\u7528\u72b6\u6cc1\u3092\u7ba1\u7406\u3059\u308b\u30bf\u30a4\u30df\u30f3\u30b0\u3067\u306f\u7247\u65b9\u306e\u30b9\u30ec\u30c3\u30c9\u304c\u5fc5\u305a\u505c\u6b62\u3057\u3066\u3057\u307e\u3044\u307e\u3059\u3002\u30d0\u30c3\u30d5\u30a1\u304c\u534a\u5206\u4f7f\u7528\u3055\u308c\u3066\u3044\u308b\u30bf\u30a4\u30df\u30f3\u30b0\u3067\u306f\u3001Producer\u3082Consumer\u3082\u52d5\u3051\u308b\u4f59\u5730\u304c\u3042\u308b\u306e\u306b\u3001\u5f85\u3061\u5408\u308f\u305b\u3092\u983b\u7e41\u306b\u884c\u3046\u3053\u3068\u306b\u306a\u308a\u307e\u3059\u3002\u305d\u3046\u3044\u3046\u5834\u5408\u306b\u6709\u7528\u306a\u306e\u304cQSemaphore\u3067\u3059\u3002\n\u30bb\u30de\u30d5\u30a9\u306f\u624b\u65d7\u4fe1\u53f7\u306e\u610f\u5473\u3067\u3001\u30b9\u30ec\u30c3\u30c9\u9593\u306e\u540c\u671f\u6a5f\u69cb\u306e\u4e00\u3064\u3067\u3059\u3002\u4eca\u5ea6\u306f\u3001\u30b5\u30f3\u30d7\u30eb\u3067Semaphore\u3092\u958b\u3044\u3066\u307f\u307e\u3057\u3087\u3046\u3002\n\n\nsemaphores.cpp\n/*\n**\n** Copyright (C) 2016 The Qt Company Ltd.\n** Contact: https://www.qt.io/licensing/\n**\n** This file is part of the examples of the Qt Toolkit.\n**\n** \u30a4\u30ab\u7565\uff09BSD\u30e9\u30a4\u30bb\u30f3\u30b9\u3067\u63d0\u4f9b\u3055\u308c\u3066\u3044\u307e\u3059\n*/\n#include <QtCore>\n\n#include <stdio.h>\n#include <stdlib.h>\n\nconst int DataSize = 100000;\n\nconst int BufferSize = 8192;\nchar buffer[BufferSize];\n\nQSemaphore freeBytes(BufferSize);\nQSemaphore usedBytes;\n\nclass Producer : public QThread\n{\npublic:\n    void run() Q_DECL_OVERRIDE\n    {\n        qsrand(QTime(0,0,0).secsTo(QTime::currentTime()));\n        for (int i = 0; i < DataSize; ++i) {\n            freeBytes.acquire();\n            buffer[i % BufferSize] = \"ACGT\"[(int)qrand() % 4];\n            usedBytes.release();\n        }\n    }\n};\n\nclass Consumer : public QThread\n{\n    Q_OBJECT\npublic:\n    void run() Q_DECL_OVERRIDE\n    {\n        for (int i = 0; i < DataSize; ++i) {\n            usedBytes.acquire();\n            fprintf(stderr, \"%c\", buffer[i % BufferSize]);\n            freeBytes.release();\n        }\n        fprintf(stderr, \"\\n\");\n    }\n\nsignals:\n    void stringConsumed(const QString &text);\n\nprotected:\n    bool finish;\n};\n\nint main(int argc, char *argv[])\n{\n    QCoreApplication app(argc, argv);\n    Producer producer;\n    Consumer consumer;\n    producer.start();\n    consumer.start();\n    producer.wait();\n    consumer.wait();\n    return 0;\n}\n\n#include \"semaphores.moc\"\n\n\nQWaitCondition\u3092\u4f7f\u3063\u3066\u3044\u305f\u4f8b\u3067\u306f\u3001QMutex\u3092\u4f7f\u3044\u30ed\u30c3\u30af\u3092\u3057\u306a\u304c\u3089\u5024\u3092\u691c\u67fb\u3057\u3066\u3044\u307e\u3057\u305f\u3002\u305d\u3057\u3066\u30c7\u30fc\u30bf\u306e\u8ffd\u52a0\u5f8c\u518d\u5ea6\u30ed\u30c3\u30af\u3092\u304b\u3051\u3066\u3001\u4f7f\u7528\u91cf\u3092\u64cd\u4f5c\u3057\u3066\u3044\u307e\u3057\u305f\u304c\u3001\u305d\u306e\u3042\u305f\u308a\u306e\u64cd\u4f5c\u3092QSemaphore\u304c\u4e00\u56de\u306e\u64cd\u4f5c\u3067\u884c\u3063\u3066\u304f\u308c\u3066\u3044\u307e\u3059\u3002\n\u30bb\u30de\u30d5\u30a9\u306f\u3001\u521d\u671f\u30ab\u30a6\u30f3\u30c8\u5024\u3092\u3082\u3061\u3001\u30b9\u30ec\u30c3\u30c9\u9593\u3067\u8cc7\u6e90\u306e\u5229\u7528\u53ef\u80fd\u306a\u30ab\u30a6\u30f3\u30c8\u3092\u5171\u6709\u3059\u308b\u540c\u671f\u6a5f\u69cb\u3067\u3059\u3002\nvoid QSemaphore::acquire(int n = 1) // \u52a0\u7b97\uff08V\u64cd\u4f5c\uff09\nvoid QSemaphore::release(int n = 1) // \u6e1b\u7b97\uff08P\u64cd\u4f5c\uff09\n\u3068\u3044\u3046\u51e6\u7406\u306b\u3088\u308a\u3001\u5024\u3092\u52a0\u7b97\u30fb\u6e1b\u7b97\u3057\u3066\u3044\u304d\u3001\u30ab\u30a6\u30f3\u30c8\u304c0\u3068\u306a\u308b\u3068\u5f85\u3061\u5408\u308f\u305b\u304c\u767a\u751f\u3057\u307e\u3059\u3002\u30d7\u30e9\u30c3\u30c8\u30d5\u30a9\u30fc\u30e0\u4f9d\u5b58\u306e\u5b9f\u88c5\u306b\u3082\u3088\u308a\u307e\u3059\u304c\u3001\u57fa\u672c\u7684\u306b\u30e6\u30fc\u30b6\u30fc\u304cQMutex\u3092\u64cd\u4f5c\u3059\u308b\u3088\u308a\u306f\u8efd\u91cf\u306b\u5229\u7528\u306a\u30d0\u30c3\u30d5\u30a1\u30b5\u30a4\u30ba\u3092\u540c\u671f\u3067\u304d\u308b\u306e\u3067\u3059\u3002\n\n\u307e\u3068\u3081\n\u672c\u65e5\u306e\u8a18\u4e8b\u3067\u306f\n- QMutex\n- QWaitCondition\n- QSemaphore\n\u306b\u3064\u3044\u3066\u7c21\u5358\u306b\u4f55\u306b\u4f7f\u3046\u3082\u306e\u306a\u306e\u304b\u3092\u8aac\u660e\u3057\u307e\u3057\u305f\u3002\n\u7d50\u57ce \u6d69\u5148\u751f\u306e\u300eJava\u8a00\u8a9e\u3067\u5b66\u3076\u3000\u30c7\u30b6\u30a4\u30f3\u30d1\u30bf\u30fc\u30f3\u5165\u9580 [\u30de\u30eb\u30c1\u30b9\u30ec\u30c3\u30c9\u7de8]\u300f\u306f\u3001\u30de\u30eb\u30c1\u30b9\u30ec\u30c3\u30c9\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u3067\u5229\u7528\u3059\u308b\u5b9a\u77f3\u3092\u8a18\u3057\u305f\u540d\u8457\u3067\u3059\u3002\n\u30de\u30eb\u30c1\u30b9\u30ec\u30c3\u30c9\u304c\u3001\u3044\u304b\u306b\u7c21\u5358\u306b\u7834\u7dbb\u3059\u308b\u304b\u306f\u30b5\u30f3\u30d7\u30eb\u3067\u793a\u3057\u305f\u901a\u308a\u3067\u3059\u304c\u3001QMutex\u306e\u6392\u4ed6\u6a5f\u69cb\u7b49\u306f\u3001\u4e00\u3064\u9593\u9055\u3048\u3070\u5168\u3066\u306e\u30b9\u30ec\u30c3\u30c9\u304c\u30ed\u30c3\u30af\u306e\u89e3\u653e\u5f85\u3061\u3092\u8d77\u3053\u3059\u300c\u30c7\u30c3\u30c9\u30ed\u30c3\u30af\u300d\u3068\u3044\u3046\u6050\u308d\u3057\u3044\u4e0d\u5177\u5408\u3092\u5f15\u304d\u8d77\u3053\u3057\u307e\u3059\u3002\n\u4e26\u5217\u51e6\u7406\u306f\u3001\u30de\u30eb\u30c1\u30b3\u30a2CPU\u306e\u3054\u6642\u4e16\u306b\u306f\u51e6\u7406\u901f\u5ea6\u3092\u7a3c\u3050\u983c\u3082\u3057\u3044\u5473\u65b9\u3067\u3059\u304c\u3001\u4e00\u5ea6\u4e0d\u5177\u5408\u3092\u8d77\u3053\u305b\u3070\u30c7\u30d0\u30c3\u30b0\u306e\u96e3\u3057\u3044\u6050\u308d\u3057\u3044\u6575\u306b\u304b\u308f\u308a\u307e\u3059\u3002\u30af\u30e9\u30b9\u5206\u5272\u4ee5\u4e0a\u306b\u5b9a\u77f3\u96c6\u306e\u6301\u3064\u610f\u5473\u306f\u91cd\u8981\u3067\u3059\u3002Java\u8a00\u8a9e\u306e\u6a5f\u80fd\u3092\u4f7f\u3063\u305f\u66f8\u7c4d\u3067\u3001\u5358\u7d14\u306b\u305d\u306e\u307e\u307eC++\u306b\u9069\u5fdc\u3067\u304d\u308b\u308f\u3051\u3067\u306f\u3042\u308a\u307e\u305b\u3093\u304c\u3001\u3053\u306e\u624b\u306e\u5b9a\u77f3\u3068\u3044\u3046\u3082\u306e\u306b\u3064\u3044\u3066\u306f\u77e5\u3063\u3066\u304a\u3044\u3066\u640d\u306f\u306a\u3044\u304b\u3068\u601d\u3044\u307e\u3059\u3002\n\u30de\u30eb\u30c1\u30b9\u30ec\u30c3\u30c9\u306b\u95a2\u3057\u3066\u306f\u3001Qt\u306e\u63d0\u4f9b\u3059\u308b\u30af\u30e9\u30b9\u3068\u6a5f\u80fd\u306e\u4ed6\u306b\u3001\u305d\u308c\u3092\u3069\u3046\u7d44\u307f\u5408\u308f\u305b\u3066\u3069\u306e\u3088\u3046\u306b\u4f7f\u3046\u306e\u304b\u3001\u305d\u3046\u3044\u3046\u5b66\u7fd2\u3092\u3059\u308b\u3053\u3068\u304c\u3068\u3066\u3082\u91cd\u8981\u306a\u5206\u91ce\u3067\u3059\u3002Qt\u306e\u30b5\u30f3\u30d7\u30eb\u3068\u30d8\u30eb\u30d7\u3092\u62fe\u3044\u8aad\u307f\u306a\u304c\u3089\u305c\u3072\u8272\u3005\u5b9f\u9a13\u3057\u3066\u307f\u3066\u4e0b\u3055\u3044\u3002\n\u3055\u3066\u3001\u672c\u5f53\u306f\u3053\u306e\u307b\u304b\u306b\n\nRead-Write Lock (QReadWriteLock)\nThread-Specific Storage (QThreadStorage)\n\n\u3068\u3044\u3063\u305f\u8aac\u660e\u3092\u3057\u306a\u304f\u3066\u306f\u306a\u306e\u3067\u3059\u304c\u3001\u5e2b\u8d70\u3067\u5fd8\u5e74\u4f1a\u306a\u3069\u306b\u5f15\u3063\u5f35\u308a\u51fa\u3055\u308c\u3066\u3057\u307e\u3063\u3066\u3001\u983c\u307f\u306e\u304a\u663c\u4f11\u307f\u6642\u9593\u3082\u5c3d\u304d\u3066\u3057\u307e\u3044\u305d\u3046\u3067\u3059\u3002\u3068\u3044\u3046\u308f\u3051\u3067\u3001\u6b8b\u308a\u306e\u30af\u30e9\u30b9\u306e\u8aac\u660e\u3068\u3001\u66f8\u3044\u305f\u30b5\u30f3\u30d7\u30eb\u3092\u3082\u3063\u3068\u4eca\u98a8\u306eQThread\u306e\u4f7f\u3044\u65b9\u306b\u76f4\u3059\u3042\u305f\u308a\u3092\u6b21\u306e\u65e5\u8a18\u306b\u304b\u3051\u308c\u3070\u3044\u3044\u306a\u3041\u3068\u601d\u3044\u3064\u3064\u4eca\u65e5\u306eAdvent Calendar\u306f\u3053\u3053\u307e\u3067\u3068\u3057\u307e\u3059\u3002\n\u3061\u3087\u3063\u3068\u99c6\u3051\u8db3\u3067\u66f8\u304d\u4ed8\u3051\u305f\u306e\u3067\u3001\u8aa4\u5b57\u3001\u8131\u5b57\u3001\u9593\u9055\u3044\u306a\u3069\u3092\u898b\u3064\u3051\u305f\u3089\u3054\u4e00\u5831\u304f\u3060\u3055\u3044\u3002\n\u660e\u65e5\u306f\u3001@sharkpp\u3055\u3093\u306b\u3088\u308b\u300cQMacCocoaViewContainer\u3092\u4f7f\u3063\u3066\u307f\u308b\u300d\u3067\u3059\u3002\u304a\u697d\u3057\u307f\u306b\u3002\n# \u306f\u3058\u3081\u306b\n\u3053\u306e\u65e5\u8a18\u306f\u3001[Qt Advent Calendar 2016](http://qiita.com/advent-calendar/2016/qt)\u306e9\u65e5\u76ee\u306e\u65e5\u8a18\u3067\u3059\u3002\n\n\u6628\u65e5\u306f@nekomatu\u3055\u3093\u306b\u3088\u308b\u300c[QtCreator\u306e\u7ffb\u8a33\u3092\u30ec\u30d3\u30e5\u30fc\u3057\u305f\u8a71](http://nekomatu.blogspot.jp/2016/12/qtcreator-translation-review.html)\u300d\u3067\u3057\u305f\u3002Qt Creator\u306f\u4fbf\u5229\u306aIDE\u3067\u30e1\u30cb\u30e5\u30fc\u306a\u3069\u3082\u65e5\u672c\u8a9e\u5316\u3055\u308c\u3066\u3044\u307e\u3059\u304c\u3001\u3053\u308c\u3089\u306f\u671d\u6728\u3055\u3093\u3092\u306f\u3058\u3081\u6709\u5fd7\u306e\u307f\u306a\u3055\u3093\u306e\u304a\u304b\u3052\u3067\u3059\u3002\u3042\u308a\u304c\u305f\u3044\u3053\u3068\u3067\u3059\u306d\u3002\u8fd1\u3005 Qt Creator 4.2\u3082\u30ea\u30ea\u30fc\u30b9\u3055\u308c\u308b\u3053\u3068\u3067\u3057\u3087\u3046\u3057\u3001\u7ffb\u8a33\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u304c\u52df\u96c6\u3055\u308c\u308c\u3070\u662f\u975e\u304a\u624b\u4f1d\u3044\u3057\u305f\u3044\u3068\u3053\u308d\u3067\u3059\u3002\n\n\u3055\u3066\u3001Qt\u306e\u30ab\u30ec\u30f3\u30c0\u30fc\u30823\u5e74\u76ee\u3067\u3059\u304c\u30011\u5e74\u76ee\u30012\u5e74\u76ee\u306b\u30b9\u30ec\u30c3\u30c9\u95a2\u9023\u3092\uff12\u4ef6\u307b\u3069\u66f8\u304b\u305b\u3066\u3044\u305f\u3060\u304d\u307e\u3057\u305f\u3002\n\n- \u300c[Qt\u3067\u30b9\u30ec\u30c3\u30c9\u3092\u4f7f\u3046\u524d\u306b\u77e5\u3063\u3066\u304a\u3053\u3046](http://qiita.com/hermit4/items/1606750332d1d2685bdb)\u300d\n- \u300c[QThread\u3092\u4f7f\u3063\u3066\u307f\u3088\u3046](http://qiita.com/hermit4/items/b1eaf6132fb06a30091f)\u300d\n- \u300c[QtConcurrent\u3067\u30de\u30eb\u30c1\u30b9\u30ec\u30c3\u30c9\u306b\u6311\u6226](http://qiita.com/hermit4/items/d949160c8108d61cf744)\u300d\n\n\u305b\u3063\u304b\u304f\u3067\u3059\u306e\u3067\u3001\u4eca\u5e74\u3082\uff11\u4ef6\u30b9\u30ec\u30c3\u30c9\u95a2\u9023\u3092\u3068\u3044\u3046\u3053\u3068\u3067\u3002\n\n# Single Threaded Execution\u30d1\u30bf\u30fc\u30f3\n\u7d50\u57ce\u6d69\u5148\u751f\u306e\u300eJava\u8a00\u8a9e\u3067\u5b66\u3076\u30c7\u30b6\u30a4\u30f3\u30d1\u30bf\u30fc\u30f3\u5165\u9580\u30de\u30eb\u30c1\u30b9\u30ec\u30c3\u30c9\u7de8\u300f\u3067\u300c\u3053\u306e\u6a4b\u3092\u308f\u305f\u308c\u308b\u306e\u306f\u4e00\u4eba\u3060\u3051\u300d\u3068\u3057\u3066\u7d39\u4ecb\u3055\u308c\u3066\u3044\u308b\u306e\u304c\u3001Single Thread Execution\u3067\u3059\u3002\n\n\u30de\u30eb\u30c1\u30b9\u30ec\u30c3\u30c9\u306f\u3001\u4e26\u5217\u306b\u52d5\u4f5c\u3092\u884c\u3046\u305f\u3081\u306e\u6a5f\u69cb\u3067\u3059\u304c\u3001\u4e26\u5217\u52d5\u4f5c\u3059\u308b\u8907\u6570\u306e\u30b9\u30ec\u30c3\u30c9\u304c\u3001\u540c\u6642\u306b\u540c\u3058\u30ea\u30bd\u30fc\u30b9\u306b\u5909\u66f4\u3092\u52a0\u3048\u308b\u3068\u305d\u306e\u7d50\u679c\u306f\u672a\u5b9a\u7fa9\u3067\u3059\u3002\u305d\u3053\u3067\u3001\u540c\u6642\u306b\u4e00\u3064\u306e\u30b9\u30ec\u30c3\u30c9\u3060\u3051\u304c\u5b9f\u884c\u3092\u884c\u3046\u3088\u3046\u306b\u3059\u308b\u3068\u3044\u3046\u30d1\u30bf\u30fc\u30f3\u304c\u3001Single Thread Execution\u3067\u3059\u3002\n\n## \u30b9\u30ec\u30c3\u30c9\u30bb\u30fc\u30d5\u3067\u306f\u306a\u3044\u4f8b\n\u307e\u305a\u3001\u9580(Gate)\u3092\u4f5c\u308a\u3001\uff13\u4eba\u306e\u4eba\u7269\u306e\u901a\u884c\u8a18\u9332\u3092\u3068\u308a\u307e\u3059\u3002\n\n\u30fb\u4e95\u51fa\u6c0f\uff08\u77f3\u5ddd\u770c\uff09\n\u30fb\u4e09\u6728\u6c0f\uff08\u4e09\u91cd\u770c\uff09\n\u30fb\u798f\u7530\u6c0f\uff08\u798f\u5ca1\u770c\uff09\n\n\u5076\u7136\u3001\u540d\u524d\u306e\u30a4\u30cb\u30b7\u30e3\u30eb\u3068\u4f4f\u6240\u306e\u30a4\u30cb\u30b7\u30e3\u30eb\u304c\u4e00\u7dd2\u3067\u3059\u3002\n\n### \u30d7\u30ed\u30b0\u30e9\u30e0\n```cpp:gate.h\n#ifndef GATE_H\n#define GATE_H\n\n#include <QString>\n\nclass Gate\n{\npublic:\n    Gate();\n    void pass(const QString& name, const QString& address);\n\nprivate:\n    void check();\n\n    int cnt_;\n    QString name_;\n    QString address_;\n};\n\n#endif // GATE_H\n```\n\n```cpp:gate.cpp\n#include \"gate.h\"\n#include <QDebug>\n\nGate::Gate()\n    : cnt_(0)\n{\n}\n\nvoid Gate::pass(const QString &name, const QString &address)\n{\n    ++cnt_;\n    name_ = name;\n    address_ = address;\n    check();\n}\n\nvoid Gate::check()\n{\n    if (name_.at(0) != address_.at(0)) {\n        qWarning() << \"****** BROKEN ****** No.\" << cnt_ << \" : \" << name_ << \",\" << address_;\n    }\n}\n```\n\n\u30b2\u30fc\u30c8\u3092\u6e21\u3063\u305f\u5f8c\u3001\u4e00\u5fdc\u540d\u524d\u3068\u30a2\u30c9\u30ec\u30b9\u306e\u30a4\u30cb\u30b7\u30e3\u30eb\u304c\u4e00\u81f4\u3057\u3066\u3044\u308b\u304b\u691c\u67fb\u3057\u3066\u304a\u304d\u307e\u3057\u3087\u3046\u3002\n\n\n```cpp:userthread.h\n#ifndef USERTHREAD_H\n#define USERTHREAD_H\n\n#include <QThread>\nclass Gate;\n\nclass UserThread : public QThread\n{\n    Q_OBJECT\npublic:\n    explicit UserThread(Gate* gate, const QString& name, const QString& addr, QObject *parent = 0);\n\nprotected:\n    void run();\n\nprivate:\n    Gate*   gate_;\n    QString name_;\n    QString address_;\n};\n\n#endif // USERTHREAD_H\n\n```\n\n```cpp:userthread.cpp\n#include \"userthread.h\"\n#include \"gate.h\"\n\nUserThread::UserThread(Gate *gate, const QString &name, const QString &addr, QObject *parent)\n    : QThread(parent), gate_(gate), name_(name), address_(addr)\n{\n}\n\nvoid UserThread::run()\n{\n    forever {\n        gate_->pass(name_, address_);\n    }\n}\n\n```\n\n```cpp:main.cpp\n#include <QCoreApplication>\n#include \"gate.h\"\n#include \"userthread.h\"\n\nint main(int argc, char *argv[])\n{\n    QCoreApplication a(argc, argv);\n    Gate* gate = new Gate;\n    UserThread alice(gate, \"Ide\", \"Ishikawa\");\n    UserThread bobby(gate, \"Miki\", \"Mie\");\n    UserThread chris(gate, \"Fukuda\", \"Fukuoka\");\n    alice.start();\n    bobby.start();\n    chris.start();\n    alice.wait();\n    bobby.wait();\n    chris.wait();\n    delete gate;\n    return 0;\n}\n\n```\n### \u5b9f\u884c\u7d50\u679c\n\u4e0a\u8a18\u30d7\u30ed\u30b0\u30e9\u30e0\u306e\u5b9f\u884c\u7d50\u679c\u306f\u3001\u6563\u3005\u3067\u3059\u3002\n\n```:\n****** BROKEN ****** No. 792  :  \"Fukuda\" , \"Fukuoka\"\n****** BROKEN ****** No. 792  :  \"Fukuda\" , \"Fukuoka\"\ngate_nothreadsafe(7706,0x7000006b5000) malloc: *** error for object 0x7f9e9fa06f60: pointer being freed was not allocated\n*** set a breakpoint in malloc_error_break to debug\n****** BROKEN ****** No. 4269  :  \"Miki\" , \"Mie\"\n****** BROKEN ****** No. 4522  :  \"Miki\" , \"Mie\"\n****** BROKEN ****** No. 4658  :  \"Miki\" , \"Mie\"\ngate_nothreadsafe(7706,0x700000632000) malloc: *** error for object 0x7f9e9fa06e70: pointer being freed was not allocated\n*** set a breakpoint in malloc_error_break to debug\ngate_nothreadsafe(7706,0x7000005af000) malloc: *** error for object 0x7f9e9fa06e70: pointer being freed was not allocated\n*** set a breakpoint in malloc_error_break to debug\n<\u30ea\u30bf\u30fc\u30f3>\u30ad\u30fc\u3092\u62bc\u3057\u3066\u30a6\u30a3\u30f3\u30c9\u30a6\u3092\u9589\u3058\u3066\u304f\u3060\u3055\u3044...\n```\n\n 792\u756a\u76ee\u3067\u58ca\u308c\u3066\u3044\u308b\u3068\u51fa\u3066\u3044\u308b\u306e\u306b\u3001\u30a4\u30cb\u30b7\u30e3\u30eb\u304c\u4e00\u81f4\u3057\u3066\u3044\u307e\u3059\u3002\u305d\u306e\u5f8c\u3001malloc\u3067\u30a8\u30e9\u30fc\u304c\u51fa\u305f\u308a\u3001\u6319\u53e5\u306b\u30d7\u30ed\u30b0\u30e9\u30e0\u304c\u30af\u30e9\u30c3\u30b7\u30e5\u3057\u305f\u308a\u3057\u307e\u3057\u305f\u3002\n\n\u306a\u305c\u3053\u3093\u306a\u3053\u3068\u306b\u306a\u308b\u306e\u3067\u3057\u3087\u3046\u304b\u3002\n\n### \u89e3\u8aac\n\u3053\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u306f\u3001\uff13\u3064\u306e\u30b9\u30ec\u30c3\u30c9\u304c\u52d5\u4f5c\u3057\u3066\u3044\u307e\u3059\u3002\u3053\u306e\uff13\u3064\u306e\u30b9\u30ec\u30c3\u30c9\u306f\u4e26\u5217\u306b\u52d5\u4f5c\u3057\u306a\u304c\u3089\u3001\u540c\u3058\uff11\u3064\u306eGate\u30af\u30e9\u30b9\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u306b\u30a2\u30af\u30bb\u30b9\u3057\u3066\u3044\u307e\u3059\u3002\n\u51e6\u7406\u7684\u306b\u306f\u3001\u30ab\u30a6\u30f3\u30bf\u3092\u30ab\u30a6\u30f3\u30c8\u30a2\u30c3\u30d7\u3057\u3066name\u3068address\u3092\u8a18\u9332\u3057\u3066\u3044\u308b\u3060\u3051\u3067\u3059\u304c\u3001\n\n1)cnt_\u3092\u52a0\u7b97\u3059\u308b\n2)name_\u3092name\u306b\u7f6e\u304d\u63db\u3048\u308b\n3)address_\u3092address\u306b\u7f6e\u304d\u63db\u3048\u308b\n4)name_\u306e\u4e00\u6587\u5b57\u76ee\u3092\u53d6\u308a\u51fa\u3057\n5)address_\u306e\u4e00\u6587\u5b57\u76ee\u3092\u53d6\u308a\u51fa\u3057\n6)\u6bd4\u8f03\n7)\u4e0d\u4e00\u81f4\u306a\u3089\u753b\u9762\u306b\u8868\u793a\n\n\n\u3068\u5927\u96d1\u628a\u306b\u308f\u3051\u3066\u3082\u4e0a\u8a18\u306e\u3088\u3046\u306a\u4f5c\u696d\u304c\uff13\u4eba\u5206\u4e26\u5217\u4f5c\u696d\u3055\u308c\u307e\u3059\u3002\u4e00\u9023\u306e\u51e6\u7406\u304c\u4e26\u5217\u306b\u5272\u308a\u8fbc\u307e\u308c\u306a\u304c\u3089\u52d5\u4f5c\u3059\u308b\u3068\u3057\u3066\n\n1-1) cnt_(0) + 1\n1-2) name_ = \"Ide\"\n1-3) address_ = \"Ishikawa\"\n2-1) cnt_(1) + 1\n2-2) name_ = \"Miki\"\n3-1) cnt_(2) + 1\n1-4) name_[0] == 'M'\n1-5) address_[0] = 'I'\n1-6) \u6bd4\u8f03\u3000\uff08\u4e0d\u4e00\u81f4\uff09\n2-3) address_ = \"Mie\"\n1-7) warning \"Miki\",\"Mie\"\n\n\u3068\u3044\u3046\u3053\u3068\u306b\u306a\u308b\u3068\u3001Warning\u3068\u3057\u3066\u6b63\u3057\u304f\u898b\u3048\u308b\u60c5\u5831\u304c\u8868\u793a\u3055\u308c\u305f\u308a\u3082\u3059\u308b\u308f\u3051\u3067\u3059\u3002\n\n\u304a\u307e\u3051\u306b\u3001QString\u578b\u306f\u5185\u90e8\u3067\u6587\u5b57\u5217\u7528\u306e\u30d2\u30fc\u30d7\u3092\u78ba\u4fdd\u3001\u30b3\u30d4\u30fc\u3001\u89e3\u653e\u306a\u3069\u3092\u3057\u3066\u3044\u307e\u3059\u3002\u4f55\u306e\u5bfe\u7b56\u3082\u305b\u305a\u4e26\u5217\u306b\u5272\u308a\u8fbc\u3093\u3067\u3057\u307e\u3063\u305f\u3089\u30e1\u30e2\u30ea\u5468\u308a\u3067\u6df1\u523b\u306a\u7834\u7dbb\u3092\u8d77\u3053\u3059\u3053\u3068\u3082\u3042\u308b\u3067\u3057\u3087\u3046\u3002\n\n\u3053\u306e\u3088\u3046\u306b\u3001\u5171\u6709\u306e\u30ea\u30bd\u30fc\u30b9\u306b\u5225\u3005\u306b\u66f8\u304d\u8fbc\u3080\u305f\u3081\u3001\u4e26\u5217\u306b\u5b9f\u884c\u3059\u308b\u3068\u7834\u7dbb\u3059\u308b\u90e8\u5206\u3092\u30af\u30ea\u30c6\u30a3\u30ab\u30eb\u30bb\u30c3\u30b7\u30e7\u30f3\u3068\u547c\u3073\u307e\u3059\u3002\n\n\u30af\u30ea\u30c6\u30a3\u30ab\u30eb\u30bb\u30c3\u30b7\u30e7\u30f3\u3067\u306f\u3053\u306e\u3088\u3046\u306a\u7834\u58ca\u3092\u9632\u3050\u305f\u3081\u3001\u30b9\u30ec\u30c3\u30c9\u9593\u3067\u6392\u4ed6\u5236\u5fa1\u3092\u884c\u3063\u3066\u3001\u4e00\u3064\u306e\u30ec\u30c3\u30c9\u3060\u3051\u304c\u5b9f\u884c\u3055\u308c\u308b\u3088\u3046\u306b\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\u3053\u306e\u3088\u3046\u306a\u6642\u306b\u5229\u7528\u3059\u308b\u306e\u304c\u3001QMutex\u3067\u3059\u3002\n\n```cpp:gate.h\n#ifndef GATE_H\n#define GATE_H\n\n#include <QString>\n#include <QMutex>\n\nclass Gate\n{\npublic:\n    Gate();\n    void pass(const QString& name, const QString& address);\n\nprivate:\n    void check();\n\n    int cnt_;\n    QString name_;\n    QString address_;\n    QMutex mutex_;\n};\n\n#endif // GATE_H\n\n```\n\nQMutex\u578b\u306e\u30e1\u30f3\u30d0\u3092\u4e00\u3064\u7528\u610f\u3057\u307e\u3057\u305f\u3002\n\n```cpp:gate.cpp\nvoid Gate::pass(const QString &name, const QString &address)\n{\n    mutex_.lock();\n    ++cnt_;\n    name_ = name;\n    address_ = address;\n    check();\n    mutex_.unlock();\n}\n```\n\n\u3042\u3068\u306f\u3001Gate\u901a\u904e\u8a18\u9332\u524d\u306block\u3092\u304b\u3051\u3001\u901a\u904e\u8a18\u9332\u30fb\u691c\u8a3c\u5f8c\u306bunlock\u3059\u308b\u3060\u3051\u3067\u3059\u3002\n\n\u3053\u3046\u3059\u308b\u3053\u3068\u3067\u3001\u8ab0\u304b\u4e00\u4eba\u304clock\u3057\u3066\u5024\u3092\u8aad\u307f\u66f8\u304d\u3057\u3066\u3044\u308b\u6700\u4e2d\u3001\u4ed6\u306e\u4eba\u306flock()\u6642\u70b9\u3067\u5f85\u3061\u5408\u308f\u305b\u3092\u884c\u3044\u3001unlock\u3055\u308c\u308b\u306e\u3092\u5f85\u3061\u307e\u3059\u3002\u3053\u306e\u3088\u3046\u306a\u6392\u4ed6\u5236\u5fa1\u306e\u305f\u3081\u306b\u4f7f\u3046\u306e\u304c\u3001QMutex\u3067\u3059\u3002\n\n### QMutexLocker\u3092\u4f7f\u304a\u3046\n\u3068\u3053\u308d\u3067\u3001\u5341\u5206\u306b\u5b89\u5b9a\u3057\u3066\u304d\u305f\u306e\u3067check\u306f10\u56de\u306b\uff11\u56de\u884c\u308f\u308c\u308c\u3070\u3044\u3044\u3068\u3057\u307e\u3057\u3087\u3046\u3002\n\n```cpp:gate.cpp\nvoid Gate::pass(const QString &name, const QString &address)\n{\n    mutex_.lock();\n    ++cnt_;\n    name_ = name;\n    address_ = address;\n    if (cnt_ % 10) \n        return;\n    check();\n    mutex_.unlock();\n}\n```\n\n\u4f55\u304c\u8d77\u304d\u308b\u304b\u304a\u308f\u304b\u308a\u3067\u3057\u3087\u3046\u304b\u3002\u4e0a\u8a18\u306funlock\u524d\u306breturn\u3057\u3066\u3057\u307e\u3063\u3066\u3044\u307e\u3059\u3002\u3053\u306e\u307e\u307e\u629c\u3051\u3066\u3057\u307e\u3046\u3068\u3001lock\u3057\u305f\u307e\u307e\u3068\u306a\u308b\u305f\u3081\u3053\u306e\u5f8c\u306elock\u306f\u3059\u3079\u3066\u5f85\u3061\u72b6\u614b\u306b\u306a\u308a\u307e\u3059\u3002\n\u3053\u306e\u305f\u3081\u3001\u30d7\u30ed\u30b0\u30e9\u30e0\u306f\u6c38\u9060\u306b\u6b62\u307e\u3063\u305f\u307e\u307e\u3068\u306a\u308a\u307e\u3059\u3002\u3053\u306e\u3088\u3046\u306a\u30d0\u30b0\u3092\u9632\u3050\u306b\u306fQMutexLocker\u304c\u4fbf\u5229\u3067\u3059\u3002\n\n```cpp:gate.cpp\n#include \"gate.h\"\n#include <QMutexLocker>\n#include <QDebug>\n\nGate::Gate()\n    : cnt_(0)\n{\n}\n\nvoid Gate::pass(const QString &name, const QString &address)\n{\n    QMutexLocker lock(&mutex_);\n    ++cnt_;\n    name_ = name;\n    address_ = address;\n    if (cnt_ % 10)\n        return;\n    check();\n}\n\nvoid Gate::check()\n{\n    if (name_.at(0) != address_.at(0)) {\n        qWarning() << \"****** BROKEN ****** No.\" << cnt_ << \" : \" << name_ << \",\" << address_;\n    }\n}\n\n```\n\n\u3053\u3046\u3059\u308b\u3068\u3001QMutexLocker\u306f\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30c8\u6642\u306b\u30ed\u30c3\u30af\u3092\u884c\u3044\u3001\u30c7\u30b9\u30c8\u30e9\u30af\u30c8\u6642\u306bunlock\u3057\u3066\u304f\u308c\u308b\u306e\u3067\u3059\u3002\u9014\u4e2d\u3067\u9593\u9055\u3063\u3066return\u3084\u4f8b\u5916\u306ethrow\u3067\u629c\u3051\u3066\u3057\u307e\u3063\u3066\u3082\u3001mutex\u3092\u30ed\u30c3\u30af\u3057\u305f\u307e\u307e\u306b\u306a\u308b\u3053\u3068\u304c\u9632\u3052\u307e\u3059\u3002\n\n# Guarded Suspension\u30d1\u30bf\u30fc\u30f3\n\u7d9a\u3044\u3066\u306f\u3001\u7d50\u57ce\u5148\u751f\u306e\u30c7\u30b6\u30a4\u30f3\u30d1\u30bf\u30fc\u30f3\u672c\u3067\u300c\u7528\u610f\u304c\u3067\u304d\u308b\u307e\u3067\u3001\u5f85\u3063\u3066\u3066\u306d\u300d\u3068\u7d39\u4ecb\u3055\u308c\u3066\u3044\u308bGuarded Suspension\u30d1\u30bf\u30fc\u30f3\u3067\u3059\u3002\n\n\u30d5\u30a1\u30df\u30ec\u30b9\u3067\u3001\u6ce8\u6587\u3092\u6c7a\u3081\u305f\u3089\u30dc\u30bf\u30f3\u3092\u62bc\u3057\u3066\u304a\u77e5\u3089\u305b\u4e0b\u3055\u3044\u3068\u8a00\u308f\u308c\u307e\u3059\u3088\u306d\u3002\u30dc\u30bf\u30f3\u3092\u62bc\u3059\u3068\u3001\u624b\u306e\u7a7a\u3044\u305f\u5e97\u54e1\u3055\u3093\u304c\u6ce8\u6587\u3092\u4f3a\u3044\u306b\u6765\u3066\u304f\u308c\u307e\u3059\u304c\u3001\u624b\u304c\u7a7a\u304b\u306a\u3044\u5834\u5408\u306b\u300c\u5f85\u305f\u305b\u308b\u300d\u3068\u3044\u3046\u6319\u52d5\u3092\u30b9\u30ec\u30c3\u30c9\u306b\u5b9f\u73fe\u3055\u305b\u308b\u306e\u304c\u3001\u3053\u306e\u30d1\u30bf\u30fc\u30f3\u3067\u3059\u3002\n\n## \u30b5\u30f3\u30d7\u30eb\u30d7\u30ed\u30b0\u30e9\u30e0\n### RequestQueue\u30af\u30e9\u30b9\n\n```cpp:requestqueue.h\n#ifndef REQUESTQUEUE_H\n#define REQUESTQUEUE_H\n\n#include <QString>\n#include <QQueue>\n#include <QMutex>\n#include <QWaitCondition>\n\nclass RequestQueue\n{\npublic:\n    struct Request {\n        Request(const QString& name) : name_(name) {}\n        QString name_;\n    };\n\n    explicit RequestQueue();\n    Request getRequest();\n    void putRequest(const Request& request);\n    \nprivate:\n    QMutex mutex_;\n    QWaitCondition cond_;\n    QQueue<Request> queue_;\n};\n\n#endif // REQUESTQUEUE_H\n```\n\n```cpp:requestqueue.cpp\n#include \"requestqueue.h\"\n#include <QMutexLocker>\n\nRequestQueue::RequestQueue()\n{\n}\n\nRequestQueue::Request RequestQueue::getRequest()\n{\n    QMutexLocker lock(&mutex_);\n    while (queue_.isEmpty()) {\n        cond_.wait(&mutex_);\n    }\n    return queue_.dequeue();\n}\n\nvoid RequestQueue::putRequest(const RequestQueue::Request &request)\n{\n    QMutexLocker lock(&mutex_);\n    queue_.enqueue(request);\n    cond_.wakeAll();\n}\n```\n\u3053\u306e\u30af\u30e9\u30b9\u306f\u3001\u30ea\u30af\u30a8\u30b9\u30c8\u306e\u51e6\u7406\u3092\u4ef2\u4ecb\u3059\u308b\u30af\u30e9\u30b9\u3067\u3059\u3002\u5148\u307b\u3069\u306e\u4f8b\u3067\u3044\u3046\u3068Gate\u30af\u30e9\u30b9\u3068\u540c\u3058\u7acb\u5834\u306b\u3044\u307e\u3059\u304c\u3001\u4eca\u56de\u306fput\u3055\u308c\u305f\u60c5\u5831\u3092\u4fdd\u6301\u3057\u3066\u3001get\u3055\u308c\u305f\u3089\u8fd4\u3059\u305f\u3081\u30ad\u30e5\u30fc\u3092\u6709\u3057\u3066\u3044\u307e\u3059\u3002\n\nput\u3059\u308b\u3088\u308a\u3082\u591a\u304fget\u3055\u308c\u308b\u3068\u3001\u5f53\u7136\u30ad\u30e5\u30fc\u304c\u30ab\u30e9\u306b\u306a\u308b\u30b1\u30fc\u30b9\u304c\u3042\u308b\u305f\u3081\u3001\u5f85\u3061\u72b6\u614b\u304c\u767a\u751f\u3057\u307e\u3059\u3002\n\n\u3053\u306e\u3088\u3046\u306a\u5834\u5408\u306b\u4f7f\u3046\u306e\u304c\u3001QWaitCondition\u3067\u3059\u3002putRequest\u306f\u3001\u6700\u521d\u306bMutex\u3092lock\u3057\u3066\u6392\u4ed6\u5236\u5fa1\u3057\u3001queue\u306e\u7a7a\u304d\u72b6\u614b\u3092\u78ba\u8a8d\u3057\u307e\u3059\u3002\u3082\u3057\u30ab\u30e9\u3060\u3063\u305f\u5834\u5408\u3001QWaitCondition::wait\u306bmutex_\u3092\u6e21\u3057\u3066\u3044\u307e\u3059\u3002\n\nQWaitCondition\u306bQMutex\u3092\u6e21\u3059\u3068\u3001mutex\u3092\u4e00\u6642\u7684\u306bunlock\u3057\u3066condition\u306e\u6210\u7acb\u3092\u5f85\u3061\u5408\u308f\u305b\u3001condition\u306e\u6210\u7acb\u3092\u901a\u77e5\u3055\u308c\u308b\u3068mutex\u3092\u53d6\u5f97\u3057\u307e\u3059\u3002\n\nputRequest\u306e\u5074\u306f\u3001mutex\u3092\u30ed\u30c3\u30af\u3057\u3066queue\u306bRequest\u3092\u5165\u308c\u305f\u5f8c\u3001QWaitCondition\u306ewakeAll\u3092\u5b9f\u65bd\u3057\u3066\u3044\u307e\u3059\u3001\u3053\u308c\u306f\u3001QWaitCondition\u3067wait\u3057\u3066\u3044\u308b\u5168\u3066\u306e\u30b9\u30ec\u30c3\u30c9\u306b\u5bfe\u3057\u3066\u3001\u6761\u4ef6\u6210\u7acb\u3092\u901a\u77e5\u3057\u3066\u8d77\u3053\u3059\u305f\u3081\u306e\u51e6\u7406\u3067\u3001\u3053\u306e\u6642\u70b9\u3067\u5168\u3066\u306e\u30b9\u30ec\u30c3\u30c9\u304cMutex\u306elock\u3092\u3057\u3088\u3046\u3068\u3057\u3066\u3001\u30ed\u30c3\u30af\u3067\u304d\u305f\u30b9\u30ec\u30c3\u30c9\u304b\u3089\u52d5\u4f5c\u3092\u518d\u958b\u3057\u307e\u3059\u3002\n\n```cpp:clienthread.h\n#ifndef CLIENTTHREAD_H\n#define CLIENTTHREAD_H\n\n#include <QThread>\nclass RequestQueue;\n\nclass ClientThread : public QThread\n{\n    Q_OBJECT\npublic:\n    explicit ClientThread(RequestQueue* queue, const QString& name,\n                          QObject *parent = 0);\n\nprotected:\n    void run();\n\nprivate:\n    RequestQueue* queue_;\n    QString name_;\n};\n\n#endif // CLIENTTHREAD_H\n\n```\n\n```cpp:clientthread.cpp\n#include \"clientthread.h\"\n#include \"requestqueue.h\"\n#include <QDebug>\n\nClientThread::ClientThread(RequestQueue *queue, const QString &name, QObject *parent)\n    : QThread(parent), queue_(queue), name_(name)\n{\n}\n\nvoid ClientThread::run()\n{\n    qsrand(3141592);\n    for (int i=0; i<100000; ++i) {\n        RequestQueue::Request request(tr(\"No.%1\").arg(i));\n        qDebug() << name_ << \" request \" << request.name_;\n        queue_->putRequest(request);\n        msleep(qrand() % 1000);\n    }\n}\n```\n\n```cpp:serverthread.h\n#ifndef SERVERTHREAD_H\n#define SERVERTHREAD_H\n\n#include <QThread>\nclass RequestQueue;\n\nclass ServerThread : public QThread\n{\n    Q_OBJECT\npublic:\n    ServerThread(RequestQueue* queue, const QString& name, QObject* parent=0);\n\nprotected:\n    void run();\n\nprivate:\n    RequestQueue* queue_;\n    QString name_;\n};\n\n#endif // SERVERTHREAD_H\n```\n\n```cpp:serverthread.cpp\n#include \"serverthread.h\"\n#include \"requestqueue.h\"\n#include <QDebug>\n\nServerThread::ServerThread(RequestQueue *queue, const QString &name, QObject *parent)\n    : QThread(parent), queue_(queue), name_(name)\n{\n}\n\nvoid ServerThread::run()\n{\n    qsrand(6535897);\n    for (int i=0; i<10000; ++i) {\n        RequestQueue::Request request = queue_->getRequest();\n        qDebug() << name_ << \" handles \" << request.name_;\n        msleep(qrand()%1000);\n    }\n}\n```\n\n```cpp:main.cpp\n#include <QCoreApplication>\n#include \"clientthread.h\"\n#include \"serverthread.h\"\n#include \"requestqueue.h\"\n\nint main(int argc, char *argv[])\n{\n    QCoreApplication a(argc, argv);\n    RequestQueue* queue = new RequestQueue;\n    ClientThread client(queue, \"Alice\");\n    ServerThread server(queue, \"Bobby\");\n    client.start();\n    server.start();\n    client.wait();\n    server.wait();\n    delete queue;\n    return 0;\n}\n```\n\n\u3042\u3068\u306f\u3001\u3053\u306eRequestQueue\u306bput\u3059\u308bclient\u3068get\u3059\u308bserver\u3092\u7528\u610f\u3057\u3066\u4e21\u8005\u3067\u3084\u308a\u3068\u308a\u3055\u305b\u307e\u3059\u3002\u3053\u306e\u4e21\u8005\u306f\u3001\u9069\u5ea6\u306b\u52d5\u4f5c\u304c\u3070\u3089\u3051\u308b\u3088\u3046\u306b\u30e9\u30f3\u30c0\u30e0\u306bsleep\u3059\u308b\u3088\u3046\u306b\u5b9f\u88c5\u3057\u3066\u3044\u307e\u3059\u3002\n\n### \u5b9f\u884c\u7d50\u679c\n```:\n\"Alice\"  request  \"No.0\"\n\"Bobby\"  handles  \"No.0\"\n\"Alice\"  request  \"No.1\"\n\"Alice\"  request  \"No.2\" // Client\u304c\u5148\u306brequest2\u307e\u3067\u5165\u308c\u308b\n\"Bobby\"  handles  \"No.1\"\n\"Alice\"  request  \"No.3\"\n\"Bobby\"  handles  \"No.2\"\n\"Alice\"  request  \"No.4\"\n\"Bobby\"  handles  \"No.3\"\n\"Alice\"  request  \"No.5\"\n\"Bobby\"  handles  \"No.4\"\n\"Alice\"  request  \"No.6\"\n\"Bobby\"  handles  \"No.5\"\n\"Alice\"  request  \"No.7\"\n\"Bobby\"  handles  \"No.6\"\n\"Alice\"  request  \"No.8\"\n\"Bobby\"  handles  \"No.7\"\n\"Alice\"  request  \"No.9\"\n\"Alice\"  request  \"No.10\"\n\"Alice\"  request  \"No.11\"\n\"Bobby\"  handles  \"No.8\"\n\"Bobby\"  handles  \"No.9\"\n\"Alice\"  request  \"No.12\"\n\"Bobby\"  handles  \"No.10\"\n\"Bobby\"  handles  \"No.11\"\n\"Alice\"  request  \"No.13\"\n\"Bobby\"  handles  \"No.12\"\n\"Alice\"  request  \"No.14\"\n\"Alice\"  request  \"No.15\"\n\"Alice\"  request  \"No.16\" // Client\u304c\u9577\u3081\u306esleep\u306b\u7a81\u5165\n\"Bobby\"  handles  \"No.13\"\n\"Bobby\"  handles  \"No.14\"\n\"Bobby\"  handles  \"No.15\"\n\"Bobby\"  handles  \"No.16\" // Server\u304c\u8ffd\u3044\u3064\u3044\u3066\u7a7a\u306b\u306a\u3063\u3066wait\n\"Alice\"  request  \"No.17\" // Client\u304c\u8ffd\u52a0\u3057\u3066wakeAll()\n\"Bobby\"  handles  \"No.17\" // Server\u304c\u51e6\u7406\u518d\u958b\n```\n\n# Producer-Consumer\u30d1\u30bf\u30fc\u30f3\n\u3055\u3066\u3001Guarded Suspension\u306e\u4f8b\u3067\u306f\u3001Client\u306f\u6c38\u9060\u3068put\u3057\u7d9a\u3051\u3066\u3001Server\u306fempty\u306a\u3089\u5f85\u3064\u3068\u3044\u3046\u5b9f\u88c5\u3067\u3057\u305f\u3002\u3082\u3057\u3001Server\u5074\u304c\u30df\u30ea\u79d2\u5358\u4f4d\u3067\u306f\u306a\u304f\u79d2\u5358\u4f4d\u3067\u5f85\u3061\u5408\u308f\u305b\u3066\u304a\u308a\u3001Client\u304c\u56de\u6570\u5236\u9650\u306a\u304f\u7121\u5236\u9650\u306bput\u3057\u3066\u305f\u3089\u3069\u3046\u306a\u308b\u3067\u3057\u3087\u3046\u304b\u3002\n\nRequestQueue\u304c\u4fdd\u6301\u3067\u304d\u308b\u9650\u754c\u306b\u9054\u3057\u3066\u7834\u7dbb\u3059\u308b\u304b\u3001\u30e1\u30e2\u30ea\u30b5\u30a4\u30ba\u3092\u3068\u308a\u3059\u304e\u3066\u7834\u7dbb\u3059\u308b\u304b\u3001\u6761\u4ef6\u306b\u3082\u3088\u308a\u307e\u3059\u304c\u3001put\u5074\u306b\u3082\u76f8\u5fdc\u306e\u30ac\u30fc\u30c9\u3092\u5165\u308c\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\n\n\u305d\u3046\u3044\u3046\u3053\u3068\u3092\u8003\u616e\u3057\u3001\u751f\u7523\u8005(Producer)\u3001\u6d88\u8cbb\u8005(Consumer)\u304c\u3001\u305d\u308c\u305e\u308cGuarded Suspension\u3092\u884c\u3046\u30d1\u30bf\u30fc\u30f3\u3092Producer-Consumer\u30d1\u30bf\u30fc\u30f3\u3068\u8a00\u3044\u307e\u3059\u3002\n\n\u7d50\u57ce\u5148\u751f\u306e\u672c\u306b\u3042\u3084\u304b\u3063\u3066\u3001\u66f8\u7c4d\u306e\u30b5\u30f3\u30d7\u30eb\u3092C++\u5316\u3059\u308b\u306e\u3082\u826f\u3044\u306e\u3067\u3059\u304c\u3001\u3061\u3087\u3063\u3068\u57f7\u7b46\u6d3b\u52d5\u304c\u6ede\u3063\u3066\u307e\u3059\u3057\u3001Qt\u306b\u306f\u8c4a\u5bcc\u306a\u30b5\u30f3\u30d7\u30eb\u304c\u542b\u307e\u308c\u3066\u3044\u307e\u3059\u3002\u305d\u3053\u3067\u3001Qt\u306e\u300c\u3088\u3046\u3053\u305d\u300d\u304b\u3089\u30b5\u30f3\u30d7\u30eb\u3092\u958b\u304d\u307e\u3057\u3087\u3046\u3002\n\n## WaitCondition\u3092\u4f7f\u3046\u4f8b\n<img width=\"1012\" alt=\"\u30b9\u30af\u30ea\u30fc\u30f3\u30b7\u30e7\u30c3\u30c8 2016-12-09 12.17.56.png\" src=\"https://qiita-image-store.s3.amazonaws.com/0/58828/410f1fea-02ed-9ff3-6d97-6f061646ed4a.png\">\n\nWait Condition Example\u3067\u3059\u3002\n\n```cpp:waitconditions.cpp\n/*\n**\n** Copyright (C) 2016 The Qt Company Ltd.\n** Contact: https://www.qt.io/licensing/\n**\n** This file is part of the examples of the Qt Toolkit.\n**\n** \u30a4\u30ab\u7565\uff09BSD\u30e9\u30a4\u30bb\u30f3\u30b9\u3067\u63d0\u4f9b\u3055\u308c\u3066\u3044\u307e\u3059\n*/\n\n#include <QtCore>\n\n#include <stdio.h>\n#include <stdlib.h>\n\nconst int DataSize = 100000;\n\nconst int BufferSize = 8192;\nchar buffer[BufferSize];\n\nQWaitCondition bufferNotEmpty;\nQWaitCondition bufferNotFull;\nQMutex mutex;\nint numUsedBytes = 0;\n\nclass Producer : public QThread\n{\npublic:\n    Producer(QObject *parent = NULL) : QThread(parent)\n    {\n    }\n\n    void run() Q_DECL_OVERRIDE\n    {\n        qsrand(QTime(0,0,0).secsTo(QTime::currentTime()));\n\n        for (int i = 0; i < DataSize; ++i) {\n            mutex.lock();\n            if (numUsedBytes == BufferSize)\n                bufferNotFull.wait(&mutex);\n            mutex.unlock();\n\n            buffer[i % BufferSize] = \"ACGT\"[(int)qrand() % 4];\n\n            mutex.lock();\n            ++numUsedBytes;\n            bufferNotEmpty.wakeAll();\n            mutex.unlock();\n        }\n    }\n};\n\nclass Consumer : public QThread\n{\n    Q_OBJECT\npublic:\n    Consumer(QObject *parent = NULL) : QThread(parent)\n    {\n    }\n\n    void run() Q_DECL_OVERRIDE\n    {\n        for (int i = 0; i < DataSize; ++i) {\n            mutex.lock();\n            if (numUsedBytes == 0)\n                bufferNotEmpty.wait(&mutex);\n            mutex.unlock();\n\n            fprintf(stderr, \"%c\", buffer[i % BufferSize]);\n\n            mutex.lock();\n            --numUsedBytes;\n            bufferNotFull.wakeAll();\n            mutex.unlock();\n        }\n        fprintf(stderr, \"\\n\");\n    }\n\nsignals:\n    void stringConsumed(const QString &text);\n};\n\nint main(int argc, char *argv[])\n{\n    QCoreApplication app(argc, argv);\n    Producer producer;\n    Consumer consumer;\n    producer.start();\n    consumer.start();\n    producer.wait();\n    consumer.wait();\n    return 0;\n}\n\n#include \"waitconditions.moc\"\n```\n\n\n\u6700\u5f8c\u306b#include \u3057\u3066\u3044\u308b\u306e\u306f\u3001wait conditions.cpp\u306bQObject\u306e\u30b3\u30fc\u30c9\u3092\u5165\u308c\u3066\u3044\u308b\u305f\u3081\u3067\u3001moc\u306e\u751f\u6210\u3059\u308b\u30b3\u30fc\u30c9\u3092\u53d6\u308a\u8fbc\u3080\u5fc5\u8981\u304c\u3042\u308b\u304b\u3089\u3067\u3059\u3002\n\n\u3053\u306e\u30b5\u30f3\u30d7\u30eb\u306f\u3001char\u578b\u306e8192byte\u306ebuffer\u3092\u30ea\u30f3\u30b0\u30d0\u30c3\u30d5\u30a1\u3068\u3057\u3066\u4f7f\u3044\u3001Producer\u3068Consumer\u9593\u3067100000byte\u306eA/C/G/T\u306e\u3046\u3061\u4efb\u610f\u306e\u4e00\u6587\u5b57\u3092\u53d7\u3051\u308f\u305f\u3059\u3068\u3044\u3046\u30b5\u30f3\u30d7\u30eb\u3067\u3059\u3002\n\n\uff12\u3064\u306eQWaitCondition\u30681\u3064\u306eQMutex\u3092\u4f7f\u3044\u3001\u30d0\u30c3\u30d5\u30a1\u304c\u7a7a\u306a\u3089Consumer\u304c\u5f85\u3061\u3001\u30d0\u30c3\u30d5\u30a1\u304c\u4e00\u676f\u306a\u3089Producer\u304c\u5f85\u3064\u3068\u3044\u3046\u5b9f\u88c5\u3068\u306a\u3063\u3066\u3044\u307e\u3059\u3002\n\n\u3068\u3053\u308d\u3067\u3001QMutex\u306f\u6392\u4ed6\u5236\u5fa1\u3067\u3059\u304b\u3089\u3001\u30d0\u30c3\u30d5\u30a1\u306e\u4f7f\u7528\u72b6\u6cc1\u3092\u7ba1\u7406\u3059\u308b\u30bf\u30a4\u30df\u30f3\u30b0\u3067\u306f\u7247\u65b9\u306e\u30b9\u30ec\u30c3\u30c9\u304c\u5fc5\u305a\u505c\u6b62\u3057\u3066\u3057\u307e\u3044\u307e\u3059\u3002\u30d0\u30c3\u30d5\u30a1\u304c\u534a\u5206\u4f7f\u7528\u3055\u308c\u3066\u3044\u308b\u30bf\u30a4\u30df\u30f3\u30b0\u3067\u306f\u3001Producer\u3082Consumer\u3082\u52d5\u3051\u308b\u4f59\u5730\u304c\u3042\u308b\u306e\u306b\u3001\u5f85\u3061\u5408\u308f\u305b\u3092\u983b\u7e41\u306b\u884c\u3046\u3053\u3068\u306b\u306a\u308a\u307e\u3059\u3002\u305d\u3046\u3044\u3046\u5834\u5408\u306b\u6709\u7528\u306a\u306e\u304cQSemaphore\u3067\u3059\u3002\n\n\u30bb\u30de\u30d5\u30a9\u306f\u624b\u65d7\u4fe1\u53f7\u306e\u610f\u5473\u3067\u3001\u30b9\u30ec\u30c3\u30c9\u9593\u306e\u540c\u671f\u6a5f\u69cb\u306e\u4e00\u3064\u3067\u3059\u3002\u4eca\u5ea6\u306f\u3001\u30b5\u30f3\u30d7\u30eb\u3067Semaphore\u3092\u958b\u3044\u3066\u307f\u307e\u3057\u3087\u3046\u3002\n\n<img width=\"1134\" alt=\"\u30b9\u30af\u30ea\u30fc\u30f3\u30b7\u30e7\u30c3\u30c8 2016-12-09 12.35.42.png\" src=\"https://qiita-image-store.s3.amazonaws.com/0/58828/d8816ade-966b-35a1-e43c-b5ebe55adf51.png\">\n\n```cpp:semaphores.cpp\n/*\n**\n** Copyright (C) 2016 The Qt Company Ltd.\n** Contact: https://www.qt.io/licensing/\n**\n** This file is part of the examples of the Qt Toolkit.\n**\n** \u30a4\u30ab\u7565\uff09BSD\u30e9\u30a4\u30bb\u30f3\u30b9\u3067\u63d0\u4f9b\u3055\u308c\u3066\u3044\u307e\u3059\n*/\n#include <QtCore>\n\n#include <stdio.h>\n#include <stdlib.h>\n\nconst int DataSize = 100000;\n\nconst int BufferSize = 8192;\nchar buffer[BufferSize];\n\nQSemaphore freeBytes(BufferSize);\nQSemaphore usedBytes;\n\nclass Producer : public QThread\n{\npublic:\n    void run() Q_DECL_OVERRIDE\n    {\n        qsrand(QTime(0,0,0).secsTo(QTime::currentTime()));\n        for (int i = 0; i < DataSize; ++i) {\n            freeBytes.acquire();\n            buffer[i % BufferSize] = \"ACGT\"[(int)qrand() % 4];\n            usedBytes.release();\n        }\n    }\n};\n\nclass Consumer : public QThread\n{\n    Q_OBJECT\npublic:\n    void run() Q_DECL_OVERRIDE\n    {\n        for (int i = 0; i < DataSize; ++i) {\n            usedBytes.acquire();\n            fprintf(stderr, \"%c\", buffer[i % BufferSize]);\n            freeBytes.release();\n        }\n        fprintf(stderr, \"\\n\");\n    }\n\nsignals:\n    void stringConsumed(const QString &text);\n\nprotected:\n    bool finish;\n};\n\nint main(int argc, char *argv[])\n{\n    QCoreApplication app(argc, argv);\n    Producer producer;\n    Consumer consumer;\n    producer.start();\n    consumer.start();\n    producer.wait();\n    consumer.wait();\n    return 0;\n}\n\n#include \"semaphores.moc\"\n```\n\nQWaitCondition\u3092\u4f7f\u3063\u3066\u3044\u305f\u4f8b\u3067\u306f\u3001QMutex\u3092\u4f7f\u3044\u30ed\u30c3\u30af\u3092\u3057\u306a\u304c\u3089\u5024\u3092\u691c\u67fb\u3057\u3066\u3044\u307e\u3057\u305f\u3002\u305d\u3057\u3066\u30c7\u30fc\u30bf\u306e\u8ffd\u52a0\u5f8c\u518d\u5ea6\u30ed\u30c3\u30af\u3092\u304b\u3051\u3066\u3001\u4f7f\u7528\u91cf\u3092\u64cd\u4f5c\u3057\u3066\u3044\u307e\u3057\u305f\u304c\u3001\u305d\u306e\u3042\u305f\u308a\u306e\u64cd\u4f5c\u3092QSemaphore\u304c\u4e00\u56de\u306e\u64cd\u4f5c\u3067\u884c\u3063\u3066\u304f\u308c\u3066\u3044\u307e\u3059\u3002\n\n\u30bb\u30de\u30d5\u30a9\u306f\u3001\u521d\u671f\u30ab\u30a6\u30f3\u30c8\u5024\u3092\u3082\u3061\u3001\u30b9\u30ec\u30c3\u30c9\u9593\u3067\u8cc7\u6e90\u306e\u5229\u7528\u53ef\u80fd\u306a\u30ab\u30a6\u30f3\u30c8\u3092\u5171\u6709\u3059\u308b\u540c\u671f\u6a5f\u69cb\u3067\u3059\u3002\n\nvoid QSemaphore::acquire(int n = 1) // \u52a0\u7b97\uff08V\u64cd\u4f5c\uff09\nvoid QSemaphore::release(int n = 1) // \u6e1b\u7b97\uff08P\u64cd\u4f5c\uff09\n\n\u3068\u3044\u3046\u51e6\u7406\u306b\u3088\u308a\u3001\u5024\u3092\u52a0\u7b97\u30fb\u6e1b\u7b97\u3057\u3066\u3044\u304d\u3001\u30ab\u30a6\u30f3\u30c8\u304c0\u3068\u306a\u308b\u3068\u5f85\u3061\u5408\u308f\u305b\u304c\u767a\u751f\u3057\u307e\u3059\u3002\u30d7\u30e9\u30c3\u30c8\u30d5\u30a9\u30fc\u30e0\u4f9d\u5b58\u306e\u5b9f\u88c5\u306b\u3082\u3088\u308a\u307e\u3059\u304c\u3001\u57fa\u672c\u7684\u306b\u30e6\u30fc\u30b6\u30fc\u304cQMutex\u3092\u64cd\u4f5c\u3059\u308b\u3088\u308a\u306f\u8efd\u91cf\u306b\u5229\u7528\u306a\u30d0\u30c3\u30d5\u30a1\u30b5\u30a4\u30ba\u3092\u540c\u671f\u3067\u304d\u308b\u306e\u3067\u3059\u3002\n\n# \u307e\u3068\u3081\n\u672c\u65e5\u306e\u8a18\u4e8b\u3067\u306f\n- QMutex\n- QWaitCondition\n- QSemaphore\n\n\u306b\u3064\u3044\u3066\u7c21\u5358\u306b\u4f55\u306b\u4f7f\u3046\u3082\u306e\u306a\u306e\u304b\u3092\u8aac\u660e\u3057\u307e\u3057\u305f\u3002\n\n\u7d50\u57ce \u6d69\u5148\u751f\u306e\u300eJava\u8a00\u8a9e\u3067\u5b66\u3076\u3000\u30c7\u30b6\u30a4\u30f3\u30d1\u30bf\u30fc\u30f3\u5165\u9580 [\u30de\u30eb\u30c1\u30b9\u30ec\u30c3\u30c9\u7de8]\u300f\u306f\u3001\u30de\u30eb\u30c1\u30b9\u30ec\u30c3\u30c9\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u3067\u5229\u7528\u3059\u308b\u5b9a\u77f3\u3092\u8a18\u3057\u305f\u540d\u8457\u3067\u3059\u3002\n\n\u30de\u30eb\u30c1\u30b9\u30ec\u30c3\u30c9\u304c\u3001\u3044\u304b\u306b\u7c21\u5358\u306b\u7834\u7dbb\u3059\u308b\u304b\u306f\u30b5\u30f3\u30d7\u30eb\u3067\u793a\u3057\u305f\u901a\u308a\u3067\u3059\u304c\u3001QMutex\u306e\u6392\u4ed6\u6a5f\u69cb\u7b49\u306f\u3001\u4e00\u3064\u9593\u9055\u3048\u3070\u5168\u3066\u306e\u30b9\u30ec\u30c3\u30c9\u304c\u30ed\u30c3\u30af\u306e\u89e3\u653e\u5f85\u3061\u3092\u8d77\u3053\u3059\u300c\u30c7\u30c3\u30c9\u30ed\u30c3\u30af\u300d\u3068\u3044\u3046\u6050\u308d\u3057\u3044\u4e0d\u5177\u5408\u3092\u5f15\u304d\u8d77\u3053\u3057\u307e\u3059\u3002\n\n\u4e26\u5217\u51e6\u7406\u306f\u3001\u30de\u30eb\u30c1\u30b3\u30a2CPU\u306e\u3054\u6642\u4e16\u306b\u306f\u51e6\u7406\u901f\u5ea6\u3092\u7a3c\u3050\u983c\u3082\u3057\u3044\u5473\u65b9\u3067\u3059\u304c\u3001\u4e00\u5ea6\u4e0d\u5177\u5408\u3092\u8d77\u3053\u305b\u3070\u30c7\u30d0\u30c3\u30b0\u306e\u96e3\u3057\u3044\u6050\u308d\u3057\u3044\u6575\u306b\u304b\u308f\u308a\u307e\u3059\u3002\u30af\u30e9\u30b9\u5206\u5272\u4ee5\u4e0a\u306b\u5b9a\u77f3\u96c6\u306e\u6301\u3064\u610f\u5473\u306f\u91cd\u8981\u3067\u3059\u3002Java\u8a00\u8a9e\u306e\u6a5f\u80fd\u3092\u4f7f\u3063\u305f\u66f8\u7c4d\u3067\u3001\u5358\u7d14\u306b\u305d\u306e\u307e\u307eC++\u306b\u9069\u5fdc\u3067\u304d\u308b\u308f\u3051\u3067\u306f\u3042\u308a\u307e\u305b\u3093\u304c\u3001\u3053\u306e\u624b\u306e\u5b9a\u77f3\u3068\u3044\u3046\u3082\u306e\u306b\u3064\u3044\u3066\u306f\u77e5\u3063\u3066\u304a\u3044\u3066\u640d\u306f\u306a\u3044\u304b\u3068\u601d\u3044\u307e\u3059\u3002\n\n\u30de\u30eb\u30c1\u30b9\u30ec\u30c3\u30c9\u306b\u95a2\u3057\u3066\u306f\u3001Qt\u306e\u63d0\u4f9b\u3059\u308b\u30af\u30e9\u30b9\u3068\u6a5f\u80fd\u306e\u4ed6\u306b\u3001\u305d\u308c\u3092\u3069\u3046\u7d44\u307f\u5408\u308f\u305b\u3066\u3069\u306e\u3088\u3046\u306b\u4f7f\u3046\u306e\u304b\u3001\u305d\u3046\u3044\u3046\u5b66\u7fd2\u3092\u3059\u308b\u3053\u3068\u304c\u3068\u3066\u3082\u91cd\u8981\u306a\u5206\u91ce\u3067\u3059\u3002Qt\u306e\u30b5\u30f3\u30d7\u30eb\u3068\u30d8\u30eb\u30d7\u3092\u62fe\u3044\u8aad\u307f\u306a\u304c\u3089\u305c\u3072\u8272\u3005\u5b9f\u9a13\u3057\u3066\u307f\u3066\u4e0b\u3055\u3044\u3002\n\n\u3055\u3066\u3001\u672c\u5f53\u306f\u3053\u306e\u307b\u304b\u306b\n\n- Read-Write Lock (QReadWriteLock)\n- Thread-Specific Storage (QThreadStorage)\n\n\u3068\u3044\u3063\u305f\u8aac\u660e\u3092\u3057\u306a\u304f\u3066\u306f\u306a\u306e\u3067\u3059\u304c\u3001\u5e2b\u8d70\u3067\u5fd8\u5e74\u4f1a\u306a\u3069\u306b\u5f15\u3063\u5f35\u308a\u51fa\u3055\u308c\u3066\u3057\u307e\u3063\u3066\u3001\u983c\u307f\u306e\u304a\u663c\u4f11\u307f\u6642\u9593\u3082\u5c3d\u304d\u3066\u3057\u307e\u3044\u305d\u3046\u3067\u3059\u3002\u3068\u3044\u3046\u308f\u3051\u3067\u3001\u6b8b\u308a\u306e\u30af\u30e9\u30b9\u306e\u8aac\u660e\u3068\u3001\u66f8\u3044\u305f\u30b5\u30f3\u30d7\u30eb\u3092\u3082\u3063\u3068\u4eca\u98a8\u306eQThread\u306e\u4f7f\u3044\u65b9\u306b\u76f4\u3059\u3042\u305f\u308a\u3092\u6b21\u306e\u65e5\u8a18\u306b\u304b\u3051\u308c\u3070\u3044\u3044\u306a\u3041\u3068\u601d\u3044\u3064\u3064\u4eca\u65e5\u306eAdvent Calendar\u306f\u3053\u3053\u307e\u3067\u3068\u3057\u307e\u3059\u3002\n\n\u3061\u3087\u3063\u3068\u99c6\u3051\u8db3\u3067\u66f8\u304d\u4ed8\u3051\u305f\u306e\u3067\u3001\u8aa4\u5b57\u3001\u8131\u5b57\u3001\u9593\u9055\u3044\u306a\u3069\u3092\u898b\u3064\u3051\u305f\u3089\u3054\u4e00\u5831\u304f\u3060\u3055\u3044\u3002\n\n\u660e\u65e5\u306f\u3001@sharkpp\u3055\u3093\u306b\u3088\u308b\u300c[QMacCocoaViewContainer\u3092\u4f7f\u3063\u3066\u307f\u308b](http://www.sharkpp.net/blog/2016/12/10/qt-advent-calendar-2016-10th-day.html)\u300d\u3067\u3059\u3002\u304a\u697d\u3057\u307f\u306b\u3002\n", "tags": ["Qt", "C++"]}