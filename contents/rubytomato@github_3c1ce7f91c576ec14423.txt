{"context": " More than 1 year has passed since last update.\n\n\u6982\u8981\nSpring Boot\u3068Spring Data MongoDB\u3092\u4f7f\u7528\u3057\u3066\u3001\u7c21\u5358\u306a\u691c\u7d22\u304c\u3067\u304d\u308bWeb\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u3092\u958b\u767a\u3057\u307e\u3059\u3002\n\u74b0\u5883\n\nWindows7 (64bit)\nJava 1.8.0_60\nSpring-Boot 1.2.5\n\n\nSpring-Data-MongoDB 1.6.3\n\n\nMongoDB 2.4.14\n\n\u53c2\u8003\n\u4e0b\u8a18\u306e\u30b5\u30a4\u30c8\u3092\u53c2\u8003\u306b\u3055\u305b\u3066\u3044\u305f\u3060\u304d\u307e\u3057\u305f\u3002\n\nSpring Data MongoDB - Reference Documentation\n\n\u5b8c\u6210\u56f3\n\n\ngithub\n\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u306frubytomato/sbdm-example\u306b\u3042\u308a\u307e\u3059\u3002\n\n\u4e8b\u524d\u6e96\u5099\nSpring Data MongoDB\u304c\u30b5\u30dd\u30fc\u30c8\u3059\u308bMongoDB\u306e\u30d0\u30fc\u30b8\u30e7\u30f3\u306f\u4e0b\u8868\u306e\u901a\u308a\u3067\u3059\u3002\n\u3053\u306e\u8868\u306b\u5f93\u3063\u3066\u4eca\u56de\u4f7f\u7528\u3059\u308bMongoDB\u306e\u30d0\u30fc\u30b8\u30e7\u30f3\u306f2.4.14\u306b\u3057\u307e\u3057\u305f\u3002\nSpring Data MongoDB Support\n\n\n\nSpring-Data-MongoDB Version\nSupport MongoDB Version\nreference\n\n\n\n\n1.6.3\nSpring MongoDB support requires MongoDB 1.4 or higher\nMongoDB support\n\n\n1.7.2\nSpring MongoDB support requires MongoDB 2.6 or higher\nMongoDB support\n\n\n1.8.0 RC1\nSpring MongoDB support requires MongoDB 2.6 or higher\nMongoDB support\n\n\n\n\nMongoDB\u306e\u6e96\u5099\nMongoDB\u306e\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u4f5c\u696d\u306e\u8aac\u660e\u306f\u7701\u7565\u3057\u307e\u3059\u3002\n\n\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u3001\u30a2\u30ab\u30a6\u30f3\u30c8\u306e\u4f5c\u6210\n\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u540d: mongovwdb\n\u30e6\u30fc\u30b6\u30fc/\u30d1\u30b9\u30ef\u30fc\u30c9: mongovwuser / mongovwpass\n> use mongovwdb\n\n\u30e6\u30fc\u30b6\u30fc\u3092\u8ffd\u52a0\u3057\u307e\u3059\u3002\n> db.addUser({user:\"mongovwuser\", pwd:\"mongovwpass\", roles: [ \"userAdmin\" ]})\n\n\u8a8d\u8a3c\u3067\u304d\u308b\u304b\u78ba\u8a8d\u3057\u307e\u3059\u3002\n> db.auth(\"mongovwuser\",\"mongovwpass\")\n1\n\n\n\u30b5\u30f3\u30d7\u30eb\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\n\u3053\u306e\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u3067\u6271\u3046\u30c7\u30fc\u30bf\u306fMySQL Sample Database - MySQLTutorial\u3067\u516c\u958b\u3055\u308c\u3066\u3044\u308b\u30b5\u30f3\u30d7\u30eb\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u3092\u304a\u501f\u308a\u3057\u307e\u3057\u305f\u3002\n\u30b3\u30ec\u30af\u30b7\u30e7\u30f3\u306e\u4e00\u89a7\n\n\n\nname\ndescription\n\n\n\n\ncustomers\n\u9867\u5ba2\n\n\norder_details\n\u6ce8\u6587\u660e\u7d30\n\n\norders\n\u6ce8\u6587\n\n\npayments\n\u652f\u6255\u3044\n\n\nproduct_lines\n\u88fd\u54c1\u7a2e\u5225\n\n\nproducts\n\u88fd\u54c1\n\n\n\n\u30c7\u30fc\u30bf\u4f8b\ncustomers\n> db.customers.findOne()\n{\n        \"_id\" : ObjectId(\"55df620d67cdfe3cd8549f4b\"),\n        \"_class\" : \"com.example.sbdm.domain.Customers\",\n        \"customerNumber\" : NumberLong(103),\n        \"customerName\" : \"Atelier graphique\",\n        \"contactLastName\" : \"Schmitt\",\n        \"contactFirstName\" : \"Carine\",\n        \"phone\" : \"40.32.2555\",\n        \"addressLine1\" : \"54, rue Royale\",\n        \"city\" : \"Nantes\",\n        \"postalCode\" : \"44000\",\n        \"country\" : \"France\",\n        \"salesRepEmployeeNumber\" : NumberLong(1370),\n        \"creditLimit\" : \"21000\"\n}\n\norder_details\n> db.order_details.findOne()\n{\n        \"_id\" : ObjectId(\"55df620d67cdfe3cd8549fc5\"),\n        \"_class\" : \"com.example.sbdm.domain.OrderDetails\",\n        \"orderNumber\" : NumberLong(10100),\n        \"productCode\" : \"S18_1749\",\n        \"quantityOrdered\" : NumberLong(30),\n        \"priceEach\" : \"136\",\n        \"orderLineNumber\" : 3\n}\n\norders\n> db.orders.findOne()\n{\n        \"_id\" : ObjectId(\"55df620d67cdfe3cd854ab79\"),\n        \"_class\" : \"com.example.sbdm.domain.Orders\",\n        \"orderNumber\" : NumberLong(10100),\n        \"orderDate\" : ISODate(\"2011-01-05T15:00:00Z\"),\n        \"requiredDate\" : ISODate(\"2011-01-12T15:00:00Z\"),\n        \"shippedDate\" : ISODate(\"2011-01-09T15:00:00Z\"),\n        \"status\" : \"Shipped\",\n        \"customerNumber\" : NumberLong(363)\n}\n\npayments\n> db.payments.findOne()\n{\n        \"_id\" : ObjectId(\"55df620d67cdfe3cd854acbf\"),\n        \"_class\" : \"com.example.sbdm.domain.Payments\",\n        \"customerNumber\" : NumberLong(103),\n        \"checkNumber\" : \"HQ336336\",\n        \"paymentDate\" : ISODate(\"2012-10-18T15:00:00Z\"),\n        \"amount\" : \"6066.78\"\n}\n\nproduct_lines\n> db.product_lines.findOne()\n{\n        \"_id\" : ObjectId(\"55df620d67cdfe3cd854add0\"),\n        \"_class\" : \"com.example.sbdm.domain.ProductLines\",\n        \"productLine\" : \"Classic Cars\",\n        \"textDescription\" : \"Attention car enthusiasts: Make yo ...\u7701\u7565...\"\n}\n\nproducts\n> db.products.findOne()\n{\n        \"_id\" : ObjectId(\"55df620d67cdfe3cd854add7\"),\n        \"_class\" : \"com.example.sbdm.domain.Products\",\n        \"productCode\" : \"S10_1678\",\n        \"productName\" : \"1969 Harley Davidson Ultimate Chopper\",\n        \"productLine\" : \"Motorcycles\",\n        \"productScale\" : \"1:10\",\n        \"productVendor\" : \"Min Lin Diecast\",\n        \"productDescription\" : \"This replica features working kickstand, ...\u7701\u7565...\",\n        \"quantityInStock\" : 7933,\n        \"buyPrice\" : \"48.81\",\n        \"MSRP\" : \"95.7\"\n}\n\n\n\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u306e\u4f5c\u6210\n\n\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u306e\u96db\u5f62\u3092\u751f\u6210\n\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u540d: sbdm-example\nmaven\u3067\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u306e\u96db\u5f62\u3092\u4f5c\u6210\n\ngenerate\n> mvn archetype:generate -DgroupId=com.example.sbdm -DartifactId=sbdm-example -DarchetypeArtifactId=maven-archetype-quickstart -DinteractiveMode=false\n\n\n\neclipse\n> cd sbdm-example\n> mvn eclipse:eclipse\n\n\neclipse\u306b\u30a4\u30f3\u30dd\u30fc\u30c8\n\n\u30e1\u30cb\u30e5\u30fc\u30d0\u30fc\u306e\"File\" -> \"Import...\" -> \"Maven\" -> \"Existing Maven Projects\"\u3092\u9078\u629e\u3057\u307e\u3059\u3002\n\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u306e\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u3092\u9078\u629e\u3057\u3001\"Finish\"\u30dc\u30bf\u30f3\u3092\u30af\u30ea\u30c3\u30af\u3057\u307e\u3059\u3002\n\npom.xml\u306e\u7de8\u96c6\n\npom.xml\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n  xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd\">\n  <modelVersion>4.0.0</modelVersion>\n  <groupId>com.example.sbdm</groupId>\n  <artifactId>sbdm-example</artifactId>\n  <packaging>jar</packaging>\n  <version>1.0-SNAPSHOT</version>\n  <name>sbdm-example</name>\n  <url>http://maven.apache.org</url>\n\n  <properties>\n    <java.version>1.8</java.version>\n    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n  </properties>\n\n  <parent>\n    <groupId>org.springframework.boot</groupId>\n    <artifactId>spring-boot-starter-parent</artifactId>\n    <version>1.2.5.RELEASE</version>\n  </parent>\n\n  <dependencies>\n    <dependency>\n        <groupId>org.springframework.boot</groupId>\n        <artifactId>spring-boot-starter-web</artifactId>\n    </dependency>\n    <dependency>\n      <groupId>org.springframework.boot</groupId>\n      <artifactId>spring-boot-starter-thymeleaf</artifactId>\n    </dependency>\n    <dependency>\n      <groupId>org.springframework.boot</groupId>\n      <artifactId>spring-boot-starter-data-mongodb</artifactId>\n    </dependency>\n    <dependency>\n      <groupId>org.codehaus.jackson</groupId>\n      <artifactId>jackson-mapper-asl</artifactId>\n      <version>1.9.13</version>\n    </dependency>\n    <dependency>\n      <groupId>commons-collections</groupId>\n      <artifactId>commons-collections</artifactId>\n    </dependency>\n    <dependency>\n      <groupId>org.apache.commons</groupId>\n      <artifactId>commons-lang3</artifactId>\n      <version>3.4</version>\n    </dependency>\n    <dependency>\n      <groupId>junit</groupId>\n      <artifactId>junit</artifactId>\n      <scope>test</scope>\n    </dependency>\n  </dependencies>\n\n  <build>\n    <pluginManagement>\n      <plugins>\n        <plugin>\n          <groupId>org.springframework.boot</groupId>\n          <artifactId>spring-boot-maven-plugin</artifactId>\n          <version>1.2.5.RELEASE</version>\n        </plugin>\n      </plugins>\n    </pluginManagement>\n    <plugins>\n      <plugin>\n        <groupId>org.apache.maven.plugins</groupId>\n        <artifactId>maven-compiler-plugin</artifactId>\n        <configuration>\n          <verbose>true</verbose>\n          <source>${java.version}</source>\n          <target>${java.version}</target>\n          <encoding>${project.build.sourceEncoding}</encoding>\n        </configuration>\n      </plugin>\n      <plugin>\n        <groupId>org.springframework.boot</groupId>\n        <artifactId>spring-boot-maven-plugin</artifactId>\n      </plugin>\n      <plugin>\n        <groupId>org.codehaus.mojo</groupId>\n        <artifactId>versions-maven-plugin</artifactId>\n      </plugin>\n    </plugins>\n  </build>\n</project>\n\n\nresources\u30d5\u30a9\u30eb\u30c0\u306e\u4f5c\u6210\n\u8a2d\u5b9a\u30d5\u30a1\u30a4\u30eb\u3084\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u30d5\u30a1\u30a4\u30eb\u306a\u3069\u3092\u914d\u7f6e\u3059\u308bresources\u30d5\u30a9\u30eb\u30c0\u3092src/main\u4e0b\u306b\u4f5c\u6210\u3057\u307e\u3059\u3002\n\u4f5c\u6210\u3057\u305f\u3089\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u306b\u53cd\u6620\u3055\u305b\u307e\u3059\u3002\n\n\"Build Path\" -> \"Configure Build Path\" -> \"Java Buld Path\" -> \"Source\"\u30bf\u30d6\u3092\u9078\u629e\u3059\u308b\u3002\n\"Add Folder\"\u30dc\u30bf\u30f3\u3092\u30af\u30ea\u30c3\u30af -> \u4f5c\u6210\u3057\u305f\"resources\"\u30d5\u30a9\u30eb\u30c0\u306b\u30c1\u30a7\u30c3\u30af\u3092\u5165\u308c\u308b\u3002\n\napplication.yml\u306e\u4f5c\u6210\nsrc/main/resources\u30d5\u30a9\u30eb\u30c0\u5185\u306bapplication.yml\u3092\u4f5c\u6210\u3057\u307e\u3059\u3002\n\napplication.yml\n# EMBEDDED SERVER CONFIGURATION (ServerProperties)\nserver:\n  port: 9000\n\nspring:\n# THYMELEAF (ThymeleafAutoConfiguration)\n  thymeleaf:\n    enabled: true\n    cache: false\n# INTERNATIONALIZATION (MessageSourceAutoConfiguration)\n  messages:\n    basename: messages\n    cache-seconds: -1\n    encoding: UTF-8\n# MONGODB (MongoProperties)\n  data:\n    mongodb:\n      host: localhost\n      port: 27017\n      uri: mongodb://localhost/mongovwdb # connection URL\n      database: mongovwdb\n#      authentication-database: mongovwdb\n#      grid-fs-database:\n      username: mongovwuser\n      password: mongovwpass\n      repositories:\n        enabled: true  # if spring data repository support is enabled\n\n# ENDPOINTS (AbstractEndpoint subclasses)\nendpoints:\n  enabled: true\n\n\nlogback.xml\u306e\u4f5c\u6210\nsrc/main/resources\u30d5\u30a9\u30eb\u30c0\u5185\u306blogback.xml\u3092\u4f5c\u6210\u3057\u307e\u3059\u3002\n\u30ed\u30b0\u306e\u51fa\u529b\u5148\u30d5\u30a9\u30eb\u30c0\u3092\"D:/logs\"\u306b\u6307\u5b9a\u3057\u307e\u3057\u305f\u3002\n\nlogback.xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<configuration>\n\n  <property name=\"LOG_DIR\" value=\"D:/logs\" />\n\n  <appender name=\"STDOUT\" class=\"ch.qos.logback.core.ConsoleAppender\">\n    <encoder>\n      <pattern>%d{yyyy-MMM-dd HH:mm:ss.SSS} %-5level [%thread] %logger{35} - %msg %n</pattern>\n    </encoder>\n  </appender>\n  <appender name=\"FILE\" class=\"ch.qos.logback.core.FileAppender\">\n     <file>${LOG_DIR}/sbdm-example.log</file>\n     <encoder>\n       <charset>UTF-8</charset>\n       <pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} %-5level [%thread] - %msg %n</pattern>\n     </encoder>\n  </appender>\n\n  <logger name=\"com.example\" level=\"DEBUG\" />\n\n  <logger name=\"org.hibernate\" level=\"ERROR\"/>\n  <logger name=\"org.springframework\" level=\"INFO\"/>\n  <logger name=\"org.thymeleaf\" level=\"INFO\"/>\n  <logger name=\"org.eclipse.jetty\" level=\"INFO\"/>\n  <logger name=\"org.apache.http\" level=\"INFO\"/>\n  <root>\n    <appender-ref ref=\"STDOUT\" />\n    <appender-ref ref=\"FILE\" />\n  </root>\n</configuration>\n\n\n\u30d3\u30eb\u30c9\n\u3053\u306e\u6642\u70b9\u3067\u52d5\u4f5c\u691c\u8a3c\u3092\u517c\u306d\u3066\u30d3\u30eb\u30c9\u3057\u307e\u3059\u3002\n\npackage\n> mvn package\n\n\n\u30d3\u30eb\u30c9\u304c\u6210\u529f\u3057\u305f\u3089\u751f\u6210\u3057\u305fjar\u30d5\u30a1\u30a4\u30eb\u3092\u5b9f\u884c\u3057\u307e\u3059\u3002\n\u30b3\u30de\u30f3\u30c9\u30d7\u30ed\u30f3\u30d7\u30c8\u306b\"Hello World!\"\u3068\u8868\u793a\u3055\u308c\u308c\u3070\u6210\u529f\u3067\u3059\u3002\n\njar\n> cd target\n> java -jar sbdm-example-1.0-SNAPSHOT.jar\nHello World!\n\n\n\n\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u306e\u958b\u767a\n\u3059\u3079\u3066\u306e\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u3092\u63b2\u8f09\u3059\u308b\u3068\u8a18\u4e8b\u30b5\u30a4\u30ba\u304c\u5927\u304d\u304f\u306a\u3063\u3066\u3057\u307e\u3046\u306e\u3067\u30dd\u30a4\u30f3\u30c8\u3068\u306a\u308b\u90e8\u5206\u3060\u3051\u63b2\u8f09\u3057\u3066\u3044\u304d\u307e\u3059\u3002\n\nApp\n\u30a8\u30f3\u30c9\u30dd\u30a4\u30f3\u30c8\u3068\u306a\u308b\u30af\u30e9\u30b9\u3092\u4f5c\u6210\u3057\u307e\u3059\u3002\n\u3059\u3067\u306b\u30b5\u30f3\u30d7\u30eb\u306eApp.java\u304c\u3042\u308a\u307e\u3059\u306e\u3067\u3001\u3053\u306e\u30d5\u30a1\u30a4\u30eb\u3092\u4e0b\u8a18\u306e\u3088\u3046\u306b\u5909\u66f4\u3057\u307e\u3059\u3002\n\nApp.java\npackage com.example.sbdm;\n\nimport org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\nimport org.springframework.context.annotation.Bean;\n\nimport com.example.sbdm.viewhelper.MyDialect;\n\n@SpringBootApplication\npublic class App {\n\n  public static void main(String[] args) {\n    SpringApplication.run(App.class, args);\n  }\n\n  //THYMELEAF Utility Object\n  @Bean\n  MyDialect myDialect(){\n    return new MyDialect();\n  }\n\n}\n\n\n\nMongodbConfig\nMongoDB\u306e\u8a2d\u5b9a\u3092\u884c\u3046\u30af\u30e9\u30b9\u3092AbstractMongoConfiguration\u3092\u7d99\u627f\u3057\u3066\u4f5c\u6210\u3057\u307e\u3059\u3002\n\nMongoDB.java\npackage com.example.sbdm;\n\nimport org.springframework.beans.factory.annotation.Value;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.data.authentication.UserCredentials;\nimport org.springframework.data.mongodb.MongoDbFactory;\nimport org.springframework.data.mongodb.config.AbstractMongoConfiguration;\nimport org.springframework.data.mongodb.core.MongoTemplate;\nimport org.springframework.data.mongodb.core.SimpleMongoDbFactory;\nimport org.springframework.data.mongodb.core.WriteResultChecking;\nimport org.springframework.data.mongodb.repository.config.EnableMongoRepositories;\nimport org.springframework.data.repository.query.QueryLookupStrategy;\n\nimport com.mongodb.Mongo;\nimport com.mongodb.MongoClient;\nimport com.mongodb.WriteConcern;\n\n@Configuration\n@EnableMongoRepositories(\n  basePackages = \"com.example.sbdm.repository\",\n  queryLookupStrategy = QueryLookupStrategy.Key.CREATE_IF_NOT_FOUND\n)\npublic class MongodbConfig extends AbstractMongoConfiguration {\n\n  @Override\n  @Bean\n  public Mongo mongo() throws Exception {\n    Mongo mongo = new MongoClient(\"localhost\", 27017);\n    mongo.setWriteConcern(WriteConcern.SAFE);\n    return mongo;\n  }\n\n  @Override\n  @Bean\n  public MongoDbFactory mongoDbFactory() throws Exception {\n    return new SimpleMongoDbFactory(mongo(), getDatabaseName(), getUserCredentials());\n    //return new SimpleMongoDbFactory(mongo(), getDatabaseName());\n  }\n\n  @Override\n  @Bean\n  public MongoTemplate mongoTemplate() throws Exception {\n    MongoTemplate template = new MongoTemplate(mongoDbFactory());\n    template.setWriteResultChecking(WriteResultChecking.EXCEPTION);\n    return template;\n  }\n\n  @Value(\"${spring.data.mongodb.database}\")\n  private String databasename;\n\n  @Override\n  protected String getDatabaseName() {\n    return databasename;\n  }\n\n  @Override\n  protected String getMappingBasePackage() {\n    return \"com.example.sbdm.domain\";\n  }\n\n  @Value(\"${spring.data.mongodb.username}\")\n  private String username;\n  @Value(\"${spring.data.mongodb.password}\")\n  private String password;\n\n  @Override\n  protected UserCredentials getUserCredentials() {\n    UserCredentials userCredentials = new UserCredentials(username, password);\n    return userCredentials;\n  }\n\n}\n\n\n\nDomain\n\u30d1\u30c3\u30b1\u30fc\u30b8: com.example.sbdm.domain\nMongoDB\u306e\u30b3\u30ec\u30af\u30b7\u30e7\u30f3\u306b\u5bfe\u5fdc\u3059\u308bdomain\u30af\u30e9\u30b9\u3092\u4f5c\u6210\u3057\u307e\u3059\u3002\nCustomers\n\nCustomers.java\npackage com.example.sbdm.domain;\n\nimport java.math.BigDecimal;\n\nimport org.springframework.data.annotation.Id;\nimport org.springframework.data.annotation.PersistenceConstructor;\nimport org.springframework.data.mongodb.core.index.CompoundIndex;\nimport org.springframework.data.mongodb.core.index.CompoundIndexes;\nimport org.springframework.data.mongodb.core.index.IndexDirection;\nimport org.springframework.data.mongodb.core.index.Indexed;\nimport org.springframework.data.mongodb.core.mapping.Document;\nimport org.springframework.data.mongodb.core.mapping.Field;\n\n@Document(collection = CollectionNames.Customers)\n@CompoundIndexes({\n  @CompoundIndex(\n    name = \"idx1_customers\",\n    def = \"{'contactLastName' : 1, 'contactFirstName' : 1}\"\n  )\n})\npublic class Customers {\n\n  public Customers() {\n  }\n\n  @PersistenceConstructor\n  public Customers(Long customerNumber, String customerName) {\n    this.customerNumber = customerNumber;\n    this.customerName = customerName;\n  }\n\n  @Id\n  private String id;\n\n  @Indexed(name = \"pk_customers\", direction = IndexDirection.DESCENDING, unique = true)\n  @Field(\"customerNumber\")\n  private Long customerNumber;\n\n  private String customerName;\n\n  @Field(\"contactLastName\")\n  private String contactLastName;\n\n  @Field(\"contactFirstName\")\n  private String contactFirstName;\n\n  private String phone;\n\n  private String addressLine1;\n\n  private String addressLine2;\n\n  private String city;\n\n  private String state;\n\n  private String postalCode;\n\n  private String country;\n\n  private Long salesRepEmployeeNumber;\n\n  private BigDecimal creditLimit;\n\n  //...getter/setter\u306f\u7701\u7565\u3057\u307e\u3059...\n}\n\n\n\u30dd\u30a4\u30f3\u30c8\n\u30a2\u30ce\u30c6\u30fc\u30b7\u30e7\u30f3\u3092\u4f7f\u7528\u3057\u3066MongoDB\u306e\u30b3\u30ec\u30af\u30b7\u30e7\u30f3/\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u3068\u306e\u95a2\u4fc2\u3092\u5b9a\u7fa9\u3057\u307e\u3059\u3002\n\n\n@Id\u30a2\u30ce\u30c6\u30fc\u30b7\u30e7\u30f3\u3067\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u306e_id\u30d5\u30a3\u30fc\u30eb\u30c9\u3092\u30de\u30c3\u30d4\u30f3\u30b0\u3057\u307e\u3059\u3002\n\n@Document\u30a2\u30ce\u30c6\u30fc\u30b7\u30e7\u30f3\u3067\u30b3\u30ec\u30af\u30b7\u30e7\u30f3\u540d\u3092\u5b9a\u7fa9\u3057\u307e\u3059\u3002\n\n@Indexed\u30a2\u30ce\u30c6\u30fc\u30b7\u30e7\u30f3\u3084@CompoundIndex\u30a2\u30ce\u30c6\u30fc\u30b7\u30e7\u30f3\u3067\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u3092\u5b9a\u7fa9\u3057\u307e\u3059\u3002\n\n@Field\u30a2\u30ce\u30c6\u30fc\u30b7\u30e7\u30f3\u3067\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u306e\u30d5\u30a3\u30fc\u30eb\u30c9\u3092\u30de\u30c3\u30d4\u30f3\u30b0\u3057\u307e\u3059\u3002\n\n\nRepository\n\u30d1\u30c3\u30b1\u30fc\u30b8: com.example.sbdm.repository\nMongoRepository\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30fc\u30b9\u3092\u7d99\u627f\u3057\u305f\u5404\u30b3\u30ec\u30af\u30b7\u30e7\u30f3\u7528\u306erepository\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30fc\u30b9\u3092\u4f5c\u6210\u3057\u307e\u3059\u3002\nCustomersRepository\n\nCustomersRepository.java\npackage com.example.sbdm.repository;\n\nimport org.springframework.data.domain.PageImpl;\nimport org.springframework.data.domain.Pageable;\nimport org.springframework.data.domain.Sort;\nimport org.springframework.data.mongodb.repository.MongoRepository;\nimport org.springframework.data.mongodb.repository.Query;\n\nimport com.example.sbdm.domain.Customers;\n\npublic interface CustomersRepository extends MongoRepository<Customers, String> {\n\n  public static final String FIND =\n   \"{$or:[\" +\n   \"{'customerName': {$regex: '?0', $options: 'i'}},\" +\n   \"{'contactFirstName': {$regex: '?0', $options: 'i'}},\" +\n   \"{'contactLastName': {$regex: '?0', $options: 'i'}}\" +\n   \"]}\";\n\n  Customers findByCustomerNumber(Long customerNumber);\n\n  Iterable<Customers> findByCustomerNameLike(String customerName, Sort sort);\n\n  Long countByCustomerNameLike(String keyword);\n\n  @Query(value = FIND, count = true)\n  Long searchCount(String keyword);\n\n  @Query(value = FIND)\n  PageImpl<Customers> search(String keyword, Pageable page);\n}\n\n\n\u30dd\u30a4\u30f3\u30c8\n\n\u3053\u306erepository\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30fc\u30b9\u306b\u306f@Repository\u30a2\u30ce\u30c6\u30fc\u30b7\u30e7\u30f3\u3092\u4ed8\u3051\u307e\u305b\u3093\u3002\u4ed8\u3051\u308b\u3068\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u8d77\u52d5\u6642\u306b\u30a8\u30e9\u30fc\u304c\u767a\u751f\u3057\u307e\u3059\u3002\n\nMongoRepository\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30fc\u30b9\u3092\u7d99\u627f\u3059\u308b\u3053\u3068\u3067\u57fa\u672c\u7684\u306a\u30e1\u30bd\u30c3\u30c9(find\u3084count,save,delete)\u304c\u4f7f\u7528\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002\n\u4efb\u610f\u306e\u6761\u4ef6\u3067\u691c\u7d22\u3092\u304a\u3053\u306a\u3044\u305f\u3044\u5834\u5408\u306f\u547d\u540d\u30eb\u30fc\u30eb\u306b\u57fa\u3065\u3044\u3066\u72ec\u81ea\u30e1\u30bd\u30c3\u30c9\u3092\u5b9a\u7fa9\u3057\u307e\u3059\u3002\n\u4efb\u610f\u306e\u30af\u30a8\u30ea\u30fc\u3092\u767a\u884c\u3057\u305f\u3044\u5834\u5408\u306f@Query\u30a2\u30ce\u30c6\u30fc\u30b7\u30e7\u30f3\u3092\u4f7f\u7528\u3057\u3066\u5b9f\u884c\u3059\u308b\u30af\u30a8\u30ea\u30fc\u3092\u6307\u5b9a\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\n\u72ec\u81ea\u30e1\u30bd\u30c3\u30c9\u306e\u5b9a\u7fa9\u306b\u3064\u3044\u3066\n\u547d\u540d\u30eb\u30fc\u30eb\u306b\u5f93\u3063\u305f\u30e1\u30bd\u30c3\u30c9\u540d\u306b\u3059\u308b\u3053\u3068\u3067\u4efb\u610f\u306e\u30af\u30a8\u30ea\u30fc\u3092\u767a\u884c\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\u30eb\u30fc\u30eb\u306fQuery methods\u3067\u8a73\u7d30\u306b\u89e3\u8aac\u3055\u308c\u3066\u3044\u307e\u3059\u3002\n\u4f8b\u3048\u3070\u4e0b\u8a18\u306e\u30e1\u30bd\u30c3\u30c9\u5b9a\u7fa9\u306f\u3001customers\u30b3\u30ec\u30af\u30b7\u30e7\u30f3\u306ecusotomerNumber\u30d5\u30a3\u30fc\u30eb\u30c9\u306b\u5bfe\u3057\u3066\u30d1\u30e9\u30e1\u30fc\u30bf\u5024\u3068\u540c\u3058\u5024\u3092\u6301\u3064\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u3092\u691c\u7d22\u3057\u307e\u3059\u3002\uff08\u306a\u304a\u3053\u306e\u30d5\u30a3\u30fc\u30eb\u30c9\u306f\u4e00\u610f\u306a\u306e\u3067\u30011\u4ef6\u3057\u304b\u691c\u7d22\u3055\u308c\u306a\u3044\u3053\u3068\u304c\u4fdd\u8a3c\u3055\u308c\u3066\u3044\u307e\u3059\u3002)\n\ncustomize\nCustomers findByCustomerNumber(Long customerNumber);\n\n\n\u30e1\u30bd\u30c3\u30c9\u540d\u306bLike\u3092\u52a0\u3048\u308b\u3068like\u691c\u7d22\u3092\u884c\u3044\u307e\u3059\u3002\n\ncustomize\nIterable<Customers> findByCustomerNameLike(String customerName, Sort sort);\n\n\n\u4ef6\u6570\u306e\u30ab\u30a6\u30f3\u30c8\u306fcountBy\u3092\u52a0\u3048\u307e\u3059\u3002\n\ncustomize\nLong countByCustomerNameLike(String keyword);\n\n\n\u8907\u6570\u306e\u30d5\u30a3\u30fc\u30eb\u30c9\u3092\u691c\u7d22\u6761\u4ef6\u306b\u3057\u305f\u3044\u5834\u5408\u306fAnd\u3084Or\u3092\u52a0\u3048\u307e\u3059\u3002\n\ncustomize\nOrderDetails findByOrderNumberAndProductCode(Long orderNumber, String prodctCode);\n\n\n@Query\u30a2\u30ce\u30c6\u30fc\u30b7\u30e7\u30f3\u3092\u4f7f\u3048\u3070\u3001\u5b9f\u884c\u3057\u305f\u3044\u30af\u30a8\u30ea\u30fc\u3092\u76f4\u63a5\u6307\u5b9a\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\u3061\u306a\u307f\u306b\u3001\u3053\u306e\u4f8b\u3067\u306fPageable\u30a4\u30f3\u30bf\u30d5\u30a7\u30fc\u30b9\u3092\u5f15\u6570\u306b\u52a0\u3048\u3066\u3044\u307e\u3059\u304c\u3001\u3053\u306e\u5834\u5408\u306e\u623b\u308a\u5024\u306e\u578b\u306fPageImpl\u30af\u30e9\u30b9\u306b\u306a\u308a\u307e\u3059\u3002\uff08\u52a0\u3048\u306a\u3044\u5834\u5408\u306fArrayList\u30af\u30e9\u30b9\u306b\u306a\u308a\u307e\u3059\u3002)\n\ncustomize\n@Query(value = FIND)\nPageImpl<Customers> search(String keyword, Pageable page);\n\n\ncount = true\u3092\u52a0\u3048\u308b\u3068\u30af\u30a8\u30ea\u30fc\u306e\u7d50\u679c\u3092\u30ab\u30a6\u30f3\u30c8\u3057\u307e\u3059\u3002\n\ncustomize\n@Query(value = FIND, count = true)\nLong searchCount(String keyword);\n\n\n\nService\n\u30d1\u30c3\u30b1\u30fc\u30b8: com.example.sbdm.service\n\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u64cd\u4f5c\u3092\u884c\u3046\u57fa\u672c\u7684\u306a\u30e1\u30bd\u30c3\u30c9\u3092\u5b9a\u7fa9\u3057\u305f\u30a4\u30f3\u30bf\u30d5\u30a7\u30fc\u30b9\u3092\u4f5c\u6210\u3057\u307e\u3059\u3002\nIService\n\nIService.java\npackage com.example.sbdm.service;\n\n\npublic interface IService<T> extends Pagination {\n\n  /**\n   * \u30b3\u30ec\u30af\u30b7\u30e7\u30f3\u306e\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u306e\u4ef6\u6570\n   */\n  public long count();\n\n  /**\n   * \u30c9\u30ad\u30e5\u30e1\u30f3\u30c8ID\u3067\u691c\u7d22\n   */\n  public T findById(String id);\n\n  /**\n   * \u6761\u4ef6\u306a\u3057\u3067\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u3092\u691c\u7d22\n   */\n  public Iterable<T> findAll(int page, int size, String sortColumn);\n\n  /**\n   * \u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u306e\u30d7\u30e9\u30a4\u30de\u30ea\u30fc\u30ad\u30fc\u3067\u691c\u7d22\n   */\n  public T findByPk(Object...keys);\n\n  /**\n   * \u540d\u79f0\u306elike\u691c\u7d22\n   */\n  public Iterable<T> findByNameLike(String name, String sortColumn);\n\n  /**\n   * \u691c\u7d22\u30ef\u30fc\u30c9\u306b\u4e00\u81f4\u3059\u308b\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u306e\u4ef6\u6570\n   */\n  public long searchCount(String keyword);\n\n  /**\n   * \u691c\u7d22\u30ef\u30fc\u30c9\u306b\u4e00\u81f4\u3059\u308b\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u3092\u691c\u7d22\n   */\n  public Iterable<T> search(String keyword, int page, int size, String sortColumn);\n\n  public T save(T model);\n\n  public Iterable<T> save(Iterable<T> model);\n\n  public void delete(String id);\n\n  public void delete(Iterable<T> model);\n}\n\n\nAbstractService\n\u5404\u30b3\u30ec\u30af\u30b7\u30e7\u30f3\u7528\u306e\u30b5\u30fc\u30d3\u30b9\u30af\u30e9\u30b9\u306e\u57fa\u5e95\u30af\u30e9\u30b9\u3092IService\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30fc\u30b9\u3092\u5b9f\u88c5\u3057\u3066\u4f5c\u6210\u3057\u307e\u3059\u3002\n\u3053\u306eAbstractService\u30af\u30e9\u30b9\u3067\u306f\u3001\u4f3c\u305f\u3088\u3046\u306a\u6a5f\u80fd\u306e\u30e1\u30bd\u30c3\u30c9\u304c\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u307e\u3059\u304c\u3001\u305d\u306e\u9055\u3044\u306f\u6b21\u306e\u3088\u3046\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u3002\n\n\nIService\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30fc\u30b9\u306e\u30e1\u30bd\u30c3\u30c9\u306e\u5b9f\u88c5\u3067\u306f\u3001\u4e0a\u8a18\u3067\u8aac\u660e\u3057\u305frepository\u3092\u4f7f\u7528\u3057\u307e\u3059\u3002\n\nAbstractService\u30af\u30e9\u30b9\u3067\u5b9a\u7fa9\u3059\u308b\u30e1\u30bd\u30c3\u30c9\u306f\u3001MongoTemplate\u3068Query\u3092\u4f7f\u7528\u3059\u308b\u30e1\u30bd\u30c3\u30c9\u3092\u4f7f\u7528\u3057\u307e\u3059\u3002\n\n\nAbstractService.java\npackage com.example.sbdm.service;\n\nimport java.util.List;\n\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.data.domain.PageRequest;\nimport org.springframework.data.domain.Pageable;\nimport org.springframework.data.domain.Sort;\nimport org.springframework.data.domain.Sort.Direction;\nimport org.springframework.data.mongodb.core.MongoTemplate;\nimport org.springframework.data.mongodb.core.query.Criteria;\nimport org.springframework.data.mongodb.core.query.Query;\nimport org.springframework.data.mongodb.core.query.Update;\nimport org.springframework.data.mongodb.repository.MongoRepository;\n\nimport com.example.sbdm.utils.MongoService;\n\npublic abstract class AbstractService<T> implements IService<T> {\n  private static Logger logger = LoggerFactory.getLogger(AbstractService.class);\n\n  @Autowired\n  private MongoTemplate template;\n\n  /* *\n   * repository\u3092\u4f7f\u7528\u3059\u308b\u65b9\u6cd5\n   * \n   * */\n\n  @Override\n  public long count() {\n    return getRepository().count();\n  }\n\n  @Override\n  public T findById(String id) {\n    return getRepository().findOne(id);\n  }\n\n  @Override\n  public Iterable<T> findAll(int page, int size, String sort) {\n    Pageable pager = new PageRequest(currentPage(page), size, Direction.ASC, sort);\n    Iterable<T> result = getRepository().findAll(pager);\n    return result;\n  }\n\n  @Override\n  public T save(T model) {\n    return getRepository().save(model);\n  }\n\n  @Override\n  public Iterable<T> save(Iterable<T> model) {\n    return getRepository().save(model);\n  }\n\n  @Override\n  public void delete(String id) {\n    getRepository().delete(id);\n  }\n\n  @Override\n  public void delete(Iterable<T> model) {\n    getRepository().delete(model);\n  }\n\n  abstract protected MongoRepository<T, String> getRepository();\n\n\n  /* *\n   * template\u3068query\u3092\u4f7f\u7528\u3059\u308b\u65b9\u6cd5\n   * \n   * */\n\n  protected long doCount(Query query, Class<T> clazz) {\n    return template.count(query, clazz);\n  }\n\n  protected T doFindOne(Query query, Class<T> clazz) {\n    return template.findOne(query, clazz);\n  }\n\n  protected List<T> doFind(Query query, Class<T> clazz) {\n    return template.find(query, clazz);\n  }\n\n  protected List<T> doFindAll(Class<T> clazz) {\n    return template.findAll(clazz);\n  }\n\n  protected Criteria makeCriteriaById(String id) {\n    return Criteria.where(\"id\").is(id);\n  }\n\n  protected Criteria makeCriteriaRegex(Criteria criteria, String field, String param) {\n    if (criteria == null) {\n      criteria = Criteria.where(field).regex(param,\"i\");\n    } else {\n      criteria.and(field).regex(param,\"i\");\n    }\n    return criteria;\n  }\n\n  protected Criteria makeCriteria(Criteria criteria, String field, Object param) {\n    if (criteria == null) {\n      criteria = Criteria.where(field).is(param);\n    } else {\n      criteria.and(field).is(param);\n    }\n    return criteria;\n  }\n\n  protected Criteria makeWhere(String name) {\n    return Criteria.where(name);\n  }\n\n  protected Criteria makeWhere(String name, Object param) {\n    return Criteria.where(name).is(param);\n  }\n\n  protected Query makeQuery(Criteria criteria) {\n    Query query;\n    if (criteria != null) {\n      query = new Query(criteria);\n    } else {\n      query = new Query();\n    }\n    return query;\n  }\n\n  protected int calcSkipNum(int page, int size) {\n    return (page - 1) * size;\n  }\n\n  abstract protected long count(T searchCondition);\n  abstract protected List<T> search(int page, int size, Sort sort, T searchCondition);\n  abstract protected Criteria makeCriteriaByPk(T model);\n  abstract protected Criteria makeCriteria(T model);\n  abstract protected Update makeAllUpdate(T model);\n}\n\n\n\u30dd\u30a4\u30f3\u30c8\n\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u306e\u64cd\u4f5c\u65b9\u6cd5\u306b\u306f\u3001Repository\u30a4\u30f3\u30bf\u30d5\u30a7\u30fc\u30b9\u3092\u4f7f\u7528\u3059\u308b\u65b9\u6cd5\u3068\u3001MongoTemplate\u3068Query\u3092\u4f7f\u7528\u3059\u308b\u65b9\u6cd5\u304c\u3042\u308a\u307e\u3059\u3002\u3069\u3061\u3089\u306e\u65b9\u6cd5\u3067\u3082\u540c\u3058\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u304c\u3001Repository\u3092\u4f7f\u7528\u3059\u308b\u65b9\u304c\u30b3\u30fc\u30c9\u306e\u5b9f\u88c5\u91cf\u304c\u6e1b\u308a\u307e\u3059\u3002\n\nRepository\u3092\u4f7f\u7528\u3059\u308b\u65b9\u6cd5: \u30b7\u30f3\u30d7\u30eb\u306a\u30af\u30a8\u30ea\u30fc\u3067\u3042\u308c\u3070\u30e1\u30bd\u30c3\u30c9\u5b9a\u7fa9\u3060\u3051\u3067\u6e08\u307f\u3001\u30b3\u30fc\u30c9\u306e\u8a18\u8ff0\u3084\u30af\u30a8\u30ea\u30fc\u3092\u610f\u8b58\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u305b\u3093\u3002\nMongoTemplate\u3068Query\u3092\u4f7f\u7528\u3059\u308b\u65b9\u6cd5: \u30d7\u30ed\u30b0\u30e9\u30e0\u3067\u30af\u30a8\u30ea\u30fc\u3092\u7d44\u307f\u7acb\u3066\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\n\u306a\u304a\u3069\u3061\u3089\u306e\u65b9\u6cd5\u3067\u3082\u76f4\u63a5\u30af\u30a8\u30ea\u30fc\u3092\u5b9f\u884c\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\nService\u306e\u5177\u8c61\u30af\u30e9\u30b9\n\u30d1\u30c3\u30b1\u30fc\u30b8: com.example.sbdm.service.impl\nCustomersService\n\nCustomersService.java\npackage com.example.sbdm.service.impl;\n\nimport java.util.List;\n\nimport org.apache.commons.lang3.StringUtils;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.data.domain.PageRequest;\nimport org.springframework.data.domain.Pageable;\nimport org.springframework.data.domain.Sort;\nimport org.springframework.data.domain.Sort.Direction;\nimport org.springframework.data.mongodb.core.query.Criteria;\nimport org.springframework.data.mongodb.core.query.Query;\nimport org.springframework.data.mongodb.core.query.Update;\nimport org.springframework.data.mongodb.repository.MongoRepository;\nimport org.springframework.stereotype.Service;\n\nimport com.example.sbdm.domain.Customers;\nimport com.example.sbdm.repository.CustomersRepository;\nimport com.example.sbdm.service.AbstractService;\n\n@Service\npublic class CustomersService extends AbstractService<Customers> {\n  private static Logger logger = LoggerFactory.getLogger(CustomersService.class);\n\n  @Autowired\n  private CustomersRepository customersRepository;\n\n  @Override\n  protected MongoRepository<Customers, String> getRepository() {\n    return customersRepository;\n  }\n\n  @Override\n  public Customers findByPk(Object...keys) {\n    return customersRepository.findByCustomerNumber((Long)keys[0]);\n  }\n\n  @Override\n  public Iterable<Customers> findByNameLike(String customerName, String sortColumn) {\n    Sort sort = new Sort(sortColumn);\n    return customersRepository.findByCustomerNameLike(customerName, sort);\n  }\n\n  @Override\n  public long searchCount(String keyword) {\n    return customersRepository.searchCount(keyword);\n  }\n\n  @Override\n  public Iterable<Customers> search(String keyword, int page, int size, String sortColumn) {\n    Pageable pager = new PageRequest(currentPage(page), size, Direction.ASC, sortColumn);\n    return customersRepository.search(keyword, pager);\n  }\n\n  @Override\n  public long count(Customers searchCondition) {\n    Criteria criteria = makeCriteria(searchCondition);\n    Query query = makeQuery(criteria);\n    return doCount(query, Customers.class);\n  }\n\n  @Override\n  public List<Customers> search(int page, int size, Sort sort, Customers searchCondition) {\n    Criteria criteria = makeCriteria(searchCondition);\n    Query query= makeQuery(criteria);\n    query.skip(calcSkipNum(page, size)).limit(size);\n    if (sort != null) {\n      query.with(sort);\n    }\n    return doFind(query, Customers.class);\n  }\n\n  @Override\n  protected Criteria makeCriteriaByPk(Customers model) {\n    return Criteria.where(\"customerNumber\").is(model.getCustomerNumber());\n  }\n\n  @Override\n  protected Criteria makeCriteria(Customers model) {\n    Criteria criteria = null;\n    if (model.getCustomerNumber() != null && model.getCustomerNumber() > 0L) {\n      criteria = makeCriteria(criteria, \"customerNumber\", model.getCustomerNumber());\n    }\n    if (StringUtils.isNotEmpty(model.getCustomerName())) {\n      criteria = makeCriteria(criteria, \"customerName\", model.getCustomerName());\n    }\n    if (StringUtils.isNotEmpty(model.getPhone())) {\n      criteria = makeCriteria(criteria, \"phone\", model.getPhone());\n    }\n    if (StringUtils.isNotEmpty(model.getCity())) {\n      criteria = makeCriteria(criteria, \"city\", model.getCity());\n    }\n    if (StringUtils.isNotEmpty(model.getCountry())) {\n      criteria = makeCriteria(criteria, \"country\", model.getCountry());\n    }\n    if (StringUtils.isNotEmpty(model.getState())) {\n      criteria = makeCriteria(criteria, \"state\", model.getState());\n    }\n    if (StringUtils.isNotEmpty(model.getPostalCode())) {\n      criteria = makeCriteria(criteria, \"postalCode\", model.getPostalCode());\n    }\n    return criteria;\n  }\n\n  @Override\n  protected Update makeAllUpdate(Customers model) {\n    Update update = new Update();\n    update.set(\"customerName\", model.getCustomerName());\n    update.set(\"contactLastName\", model.getContactLastName());\n    update.set(\"contactFirstName\", model.getContactFirstName());\n    update.set(\"phone\", model.getPhone());\n    update.set(\"addressLine1\", model.getAddressLine1());\n    update.set(\"addressLine2\",model.getAddressLine2());\n    update.set(\"city\", model.getCity());\n    update.set(\"state\", model.getState());\n    update.set(\"postalCode\", model.getPostalCode());\n    update.set(\"country\", model.getCountry());\n    update.set(\"salesRepEmployeeNumber\", model.getSalesRepEmployeeNumber());\n    update.set(\"creditLimit\", model.getCreditLimit());\n    return update;\n  }\n\n}\n\n\n\nController\n\u30d1\u30c3\u30b1\u30fc\u30b8: com.example.sbdm.web\nCustomersController\n\nCustomersController.java\npackage com.example.sbdm.web;\n\nimport java.util.List;\n\nimport org.apache.commons.lang3.StringUtils;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Controller;\nimport org.springframework.ui.Model;\nimport org.springframework.web.bind.annotation.PathVariable;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RequestMethod;\nimport org.springframework.web.bind.annotation.RequestParam;\n\nimport com.example.sbdm.domain.Customers;\nimport com.example.sbdm.domain.Orders;\nimport com.example.sbdm.service.impl.CustomersService;\nimport com.example.sbdm.service.impl.OrdersService;\nimport com.example.sbdm.utils.JsonLoader;\n\n@Controller\n@RequestMapping(value = \"/customers\")\npublic class CustomersController extends BaseController {\n  private static Logger logger = LoggerFactory.getLogger(CustomersController.class);\n\n  private static final int PAGE_SIZE = 10;\n\n  @Autowired\n  private CustomersService customersService;\n\n  @Autowired\n  private OrdersService ordersService;\n\n  @RequestMapping(method = RequestMethod.GET)\n  public String _index(Model model) {\n    return index(1, null, model);\n  }\n\n  @RequestMapping(value = \"/\", method = RequestMethod.GET)\n  public String index(Model model) {\n    return index(1, null, model);\n  }\n\n  @RequestMapping(value = \"/{pageNo}\", method = RequestMethod.GET)\n  public String index(\n      @PathVariable Integer pageNo,\n      @RequestParam String keyword,\n      Model model) {\n    logger.debug(\"CustomersController:[index] Passing through...\");\n\n    int totalCount = 0;\n    Iterable<Customers> result;\n\n    if (StringUtils.isNotEmpty(keyword)) {\n      result = customersService.search(keyword, pageNo, PAGE_SIZE, \"customerName\");\n      totalCount = (int)customersService.searchCount(keyword);\n    } else {\n      result = customersService.findAll(pageNo, PAGE_SIZE, \"customerNumber\");\n      totalCount = (int)customersService.count();\n    }\n\n    model.addAttribute(\"keyword\", keyword);\n    model.addAttribute(\"result\", result);\n\n    addPageAttr(customersService.calcPage(totalCount, pageNo, PAGE_SIZE), model);\n\n    return \"Customers/index\";\n  }\n\n  @RequestMapping(value = \"/detail/{id}\", method = RequestMethod.GET)\n  public String detail(\n      @PathVariable String id,\n      Model model) {\n    logger.debug(\"CustomersController:[detail] Passing through...\");\n\n    Customers customer =  customersService.findById(id);\n\n    String json = \"{}\";\n    if (customer != null) {\n      json = JsonLoader.toJson(customer);\n    }\n\n    Iterable<Orders> orderList = ordersService.findByCustomerNumber(customer.getCustomerNumber());\n\n    model.addAttribute(\"customer\", customer);\n    model.addAttribute(\"orderList\", orderList);\n    model.addAttribute(\"json\", json);\n\n    return \"Customers/detail\";\n  }\n\n  @RequestMapping(value = \"/search\", method = RequestMethod.GET)\n  public String search(\n      @RequestParam(required = false) String country,\n      @RequestParam(required = false) String city,\n      @RequestParam(required = false) String state,\n      @RequestParam(required = false) String postalcode,\n      Model model) {\n    logger.debug(\"CustomersController:[search] Passing through...\");\n\n    int pageNo = 1;\n\n    Customers searchCondition = new Customers();\n    if (StringUtils.isNotEmpty(country)) {\n      searchCondition.setCountry(country);\n    }\n    if (StringUtils.isNotEmpty(city)) {\n      searchCondition.setCity(city);\n    }\n    if (StringUtils.isNotEmpty(state)) {\n      searchCondition.setState(state);\n    }\n    if (StringUtils.isNotEmpty(postalcode)) {\n      searchCondition.setPostalCode(postalcode);\n    }\n\n    List<Customers> result = customersService.search(pageNo, PAGE_SIZE, null, searchCondition);\n\n    int totalCount = (int)customersService.count(searchCondition);\n\n    model.addAttribute(\"result\", result);\n\n    addPageAttr(customersService.calcPage(totalCount, pageNo, PAGE_SIZE), model);\n\n    return \"Customers/index\";\n  }\n\n}\n\n\n\n\nsearch\u30a2\u30af\u30b7\u30e7\u30f3\u306e\u547c\u3073\u51fa\u3057\u306f\u3001\u30d6\u30e9\u30a6\u30b6\u306e\u30a2\u30c9\u30ec\u30b9\u30d0\u30fc\u306b\u76f4\u63a5URL\u3092\u5165\u529b\u3057\u3066\u884c\u3044\u307e\u3059\u3002\u5b9f\u884c\u7d50\u679c\u306f\u4e00\u89a7\u30da\u30fc\u30b8\u306b\u8868\u793a\u3055\u308c\u307e\u3059\u3002\n\n\n\u305d\u306e\u4ed6\u306e\u30af\u30e9\u30b9\u3084\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\n\u305d\u306e\u4ed6\u306e\u30af\u30e9\u30b9\u3084\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u306b\u3064\u3044\u3066\u306f\u7701\u7565\u3057\u307e\u3059\u3002(MongoDB\u306b\u95a2\u4fc2\u3059\u308b\u91cd\u8981\u306a\u90e8\u5206\u304c\u7121\u3044\u3053\u3068\u3068\u3001\u8a18\u4e8b\u30b5\u30a4\u30ba\u304c\u5927\u304d\u304f\u306a\u3063\u3066\u3057\u307e\u3046\u305f\u3081\u3002)\n\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u5168\u6587\u306fgithub\u4e0a\u3067\u516c\u958b\u3057\u3066\u3044\u307e\u3059\u3002\n\n\u5b9f\u884c\u3059\u308b\nMongoDB\u304c\u8d77\u52d5\u3055\u308c\u3066\u3044\u308b\u3053\u3068\u3092\u78ba\u8a8d\u3057\u4e0b\u8a18\u306e\u30b3\u30de\u30f3\u30c9\u3092\u5b9f\u884c\u3057\u307e\u3059\u3002\n> mvn spring-boot:run\n\n\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u304c\u8d77\u52d5\u3057\u305f\u3089\u4e0b\u8a18\u306eURL\u306b\u30a2\u30af\u30bb\u30b9\u3057\u30da\u30fc\u30b8\u304c\u8868\u793a\u3055\u308c\u308c\u3070\u6210\u529f\u3067\u3059\u3002\n\u305f\u3060\u3057\u3001\u30c7\u30fc\u30bf\u304c1\u4ef6\u3082\u306a\u3044\u72b6\u614b\u306a\u306e\u3067\u4e0b\u56f3\u306e\u30da\u30fc\u30b8\u304c\u8868\u793a\u3055\u308c\u308b\u306f\u305a\u3067\u3059\u3002\nhttp://localhost:9000/\n\n\n\u30c7\u30fc\u30bf\u306e\u521d\u671f\u5316\n\u521d\u671f\u30c7\u30fc\u30bf\u306fjson\u30d5\u30a1\u30a4\u30eb\u3067\u7ba1\u7406\u3057\u3066\u3044\u307e\u3059\u3002(\u30d5\u30a1\u30a4\u30eb\u306fresources/data/init\u30d5\u30a9\u30eb\u30c0\u4e0b\u306b\u3042\u308a\u307e\u3059)\nresources\n \u2514\u2500data\n    \u2514\u2500init\n        \u251c\u2500Customers\n        \u251c\u2500OrderDetails\n        \u251c\u2500Orders\n        \u251c\u2500Payments\n        \u251c\u2500ProductLines\n        \u2514\u2500Products\n\n\u30da\u30fc\u30b8\u306e\u30e1\u30cb\u30e5\u30fc\u306b\u3042\u308b\"admin:init\"\u3092\u30af\u30ea\u30c3\u30af\u3059\u308b\u3068json\u30d5\u30a1\u30a4\u30eb\u3092\u30ed\u30fc\u30c9\u3057\u3066\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u3092\u4f5c\u6210\u3057\u307e\u3059\u3002\n\u30c7\u30fc\u30bf\u306e\u521d\u671f\u5316\u304c\u6210\u529f\u3059\u308b\u3068\u4e0b\u56f3\u306e\u7d50\u679c\u30da\u30fc\u30b8\u304c\u8868\u793a\u3055\u308c\u307e\u3059\u3002\n\n\u30c7\u30fc\u30bf\u306e\u521d\u671f\u5316\u304c\u7d42\u308f\u3063\u305f\u3089\u5404\u30da\u30fc\u30b8\u3067\u30c7\u30fc\u30bf\u3092\u78ba\u8a8d\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\u9867\u5ba2\u4e00\u89a7\n\n\u6ce8\u6587\u4e00\u89a7\n\n\u88fd\u54c1\u4e00\u89a7\n\n\u88fd\u54c1\u7a2e\u76ee\u4e00\u89a7\n\n\u652f\u6255\u3044\u4e00\u89a7\n\n# \u6982\u8981\n\nSpring Boot\u3068Spring Data MongoDB\u3092\u4f7f\u7528\u3057\u3066\u3001\u7c21\u5358\u306a\u691c\u7d22\u304c\u3067\u304d\u308bWeb\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u3092\u958b\u767a\u3057\u307e\u3059\u3002\n\n**\u74b0\u5883**\n\n* Windows7 (64bit)\n* Java 1.8.0_60\n* Spring-Boot 1.2.5\n  * Spring-Data-MongoDB 1.6.3\n* MongoDB 2.4.14\n\n\n**\u53c2\u8003**\n\n\u4e0b\u8a18\u306e\u30b5\u30a4\u30c8\u3092\u53c2\u8003\u306b\u3055\u305b\u3066\u3044\u305f\u3060\u304d\u307e\u3057\u305f\u3002\n\n* [Spring Data MongoDB - Reference Documentation] (http://docs.spring.io/spring-data/data-mongo/docs/1.6.3.RELEASE/reference/html/)\n\n**\u5b8c\u6210\u56f3**\n\n![customers.png](https://qiita-image-store.s3.amazonaws.com/0/22772/52ef3440-d0b0-8076-a9db-cf6dec6b8abf.png)\n\n![customer_details.png](https://qiita-image-store.s3.amazonaws.com/0/22772/388159d0-20c5-4d16-2006-9226dab2a0ce.png)\n\n**github**\n\n\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u306f[rubytomato/sbdm-example] (https://github.com/rubytomato/sbdm-example)\u306b\u3042\u308a\u307e\u3059\u3002\n\n\n## \u4e8b\u524d\u6e96\u5099\n\nSpring Data MongoDB\u304c\u30b5\u30dd\u30fc\u30c8\u3059\u308bMongoDB\u306e\u30d0\u30fc\u30b8\u30e7\u30f3\u306f\u4e0b\u8868\u306e\u901a\u308a\u3067\u3059\u3002\n\u3053\u306e\u8868\u306b\u5f93\u3063\u3066\u4eca\u56de\u4f7f\u7528\u3059\u308bMongoDB\u306e\u30d0\u30fc\u30b8\u30e7\u30f3\u306f2.4.14\u306b\u3057\u307e\u3057\u305f\u3002\n\n**Spring Data MongoDB Support**\n\n|Spring-Data-MongoDB Version   |Support MongoDB Version             |reference |\n|:---------|:-------------------------------------------------------|:---------|\n|1.6.3     |Spring MongoDB support requires MongoDB 1.4 or higher   |[MongoDB support] (http://docs.spring.io/spring-data/data-mongo/docs/1.6.3.RELEASE/reference/html/#mongo.core)|\n|1.7.2     |Spring MongoDB support requires MongoDB 2.6 or higher   |[MongoDB support] (http://docs.spring.io/spring-data/data-mongo/docs/1.7.2.RELEASE/reference/html/#mongo.core)|\n|1.8.0 RC1 |Spring MongoDB support requires MongoDB 2.6 or higher   |[MongoDB support] (http://docs.spring.io/spring-data/data-mongo/docs/1.8.0.RC1/reference/html/#mongo.core)|\n\n\n### MongoDB\u306e\u6e96\u5099\n\nMongoDB\u306e\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u4f5c\u696d\u306e\u8aac\u660e\u306f\u7701\u7565\u3057\u307e\u3059\u3002\n\n\n#### \u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u3001\u30a2\u30ab\u30a6\u30f3\u30c8\u306e\u4f5c\u6210\n\n\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u540d: `mongovwdb`\n\u30e6\u30fc\u30b6\u30fc/\u30d1\u30b9\u30ef\u30fc\u30c9: `mongovwuser` / `mongovwpass`\n\n```text\n> use mongovwdb\n```\n\n\u30e6\u30fc\u30b6\u30fc\u3092\u8ffd\u52a0\u3057\u307e\u3059\u3002\n\n```text\n> db.addUser({user:\"mongovwuser\", pwd:\"mongovwpass\", roles: [ \"userAdmin\" ]})\n```\n\n\u8a8d\u8a3c\u3067\u304d\u308b\u304b\u78ba\u8a8d\u3057\u307e\u3059\u3002\n\n```text\n> db.auth(\"mongovwuser\",\"mongovwpass\")\n1\n```\n\n#### \u30b5\u30f3\u30d7\u30eb\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\n\n\u3053\u306e\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u3067\u6271\u3046\u30c7\u30fc\u30bf\u306f[MySQL Sample Database - MySQLTutorial] (http://www.mysqltutorial.org/mysql-sample-database.aspx)\u3067\u516c\u958b\u3055\u308c\u3066\u3044\u308b\u30b5\u30f3\u30d7\u30eb\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u3092\u304a\u501f\u308a\u3057\u307e\u3057\u305f\u3002\n\n**\u30b3\u30ec\u30af\u30b7\u30e7\u30f3\u306e\u4e00\u89a7**\n\n|name          |description|\n|:-------------|:----------|\n|customers     |\u9867\u5ba2       |\n|order_details |\u6ce8\u6587\u660e\u7d30   |\n|orders        |\u6ce8\u6587       |\n|payments      |\u652f\u6255\u3044     |\n|product_lines |\u88fd\u54c1\u7a2e\u5225   |\n|products      |\u88fd\u54c1       |\n\n**\u30c7\u30fc\u30bf\u4f8b**\n\n***customers***\n\n```json\n> db.customers.findOne()\n{\n        \"_id\" : ObjectId(\"55df620d67cdfe3cd8549f4b\"),\n        \"_class\" : \"com.example.sbdm.domain.Customers\",\n        \"customerNumber\" : NumberLong(103),\n        \"customerName\" : \"Atelier graphique\",\n        \"contactLastName\" : \"Schmitt\",\n        \"contactFirstName\" : \"Carine\",\n        \"phone\" : \"40.32.2555\",\n        \"addressLine1\" : \"54, rue Royale\",\n        \"city\" : \"Nantes\",\n        \"postalCode\" : \"44000\",\n        \"country\" : \"France\",\n        \"salesRepEmployeeNumber\" : NumberLong(1370),\n        \"creditLimit\" : \"21000\"\n}\n```\n\n***order_details***\n\n```json\n> db.order_details.findOne()\n{\n        \"_id\" : ObjectId(\"55df620d67cdfe3cd8549fc5\"),\n        \"_class\" : \"com.example.sbdm.domain.OrderDetails\",\n        \"orderNumber\" : NumberLong(10100),\n        \"productCode\" : \"S18_1749\",\n        \"quantityOrdered\" : NumberLong(30),\n        \"priceEach\" : \"136\",\n        \"orderLineNumber\" : 3\n}\n```\n\n***orders***\n\n```json\n> db.orders.findOne()\n{\n        \"_id\" : ObjectId(\"55df620d67cdfe3cd854ab79\"),\n        \"_class\" : \"com.example.sbdm.domain.Orders\",\n        \"orderNumber\" : NumberLong(10100),\n        \"orderDate\" : ISODate(\"2011-01-05T15:00:00Z\"),\n        \"requiredDate\" : ISODate(\"2011-01-12T15:00:00Z\"),\n        \"shippedDate\" : ISODate(\"2011-01-09T15:00:00Z\"),\n        \"status\" : \"Shipped\",\n        \"customerNumber\" : NumberLong(363)\n}\n```\n\n***payments***\n\n```json\n> db.payments.findOne()\n{\n        \"_id\" : ObjectId(\"55df620d67cdfe3cd854acbf\"),\n        \"_class\" : \"com.example.sbdm.domain.Payments\",\n        \"customerNumber\" : NumberLong(103),\n        \"checkNumber\" : \"HQ336336\",\n        \"paymentDate\" : ISODate(\"2012-10-18T15:00:00Z\"),\n        \"amount\" : \"6066.78\"\n}\n```\n\n***product_lines***\n\n```json\n> db.product_lines.findOne()\n{\n        \"_id\" : ObjectId(\"55df620d67cdfe3cd854add0\"),\n        \"_class\" : \"com.example.sbdm.domain.ProductLines\",\n        \"productLine\" : \"Classic Cars\",\n        \"textDescription\" : \"Attention car enthusiasts: Make yo ...\u7701\u7565...\"\n}\n```\n\n***products***\n\n```json\n> db.products.findOne()\n{\n        \"_id\" : ObjectId(\"55df620d67cdfe3cd854add7\"),\n        \"_class\" : \"com.example.sbdm.domain.Products\",\n        \"productCode\" : \"S10_1678\",\n        \"productName\" : \"1969 Harley Davidson Ultimate Chopper\",\n        \"productLine\" : \"Motorcycles\",\n        \"productScale\" : \"1:10\",\n        \"productVendor\" : \"Min Lin Diecast\",\n        \"productDescription\" : \"This replica features working kickstand, ...\u7701\u7565...\",\n        \"quantityInStock\" : 7933,\n        \"buyPrice\" : \"48.81\",\n        \"MSRP\" : \"95.7\"\n}\n```\n\n\n## \u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u306e\u4f5c\u6210\n\n### \u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u306e\u96db\u5f62\u3092\u751f\u6210\n\n\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u540d: `sbdm-example`\n\n**maven\u3067\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u306e\u96db\u5f62\u3092\u4f5c\u6210**\n\n```text:generate\n> mvn archetype:generate -DgroupId=com.example.sbdm -DartifactId=sbdm-example -DarchetypeArtifactId=maven-archetype-quickstart -DinteractiveMode=false\n```\n\n```text:eclipse\n> cd sbdm-example\n> mvn eclipse:eclipse\n```\n\n**eclipse\u306b\u30a4\u30f3\u30dd\u30fc\u30c8**\n\n* \u30e1\u30cb\u30e5\u30fc\u30d0\u30fc\u306e\"File\" -> \"Import...\" -> \"Maven\" -> \"Existing Maven Projects\"\u3092\u9078\u629e\u3057\u307e\u3059\u3002\n* \u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u306e\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u3092\u9078\u629e\u3057\u3001\"Finish\"\u30dc\u30bf\u30f3\u3092\u30af\u30ea\u30c3\u30af\u3057\u307e\u3059\u3002\n\n**pom.xml\u306e\u7de8\u96c6**\n\n```xml:pom.xml\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n  xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd\">\n  <modelVersion>4.0.0</modelVersion>\n  <groupId>com.example.sbdm</groupId>\n  <artifactId>sbdm-example</artifactId>\n  <packaging>jar</packaging>\n  <version>1.0-SNAPSHOT</version>\n  <name>sbdm-example</name>\n  <url>http://maven.apache.org</url>\n\n  <properties>\n    <java.version>1.8</java.version>\n    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n  </properties>\n\n  <parent>\n    <groupId>org.springframework.boot</groupId>\n    <artifactId>spring-boot-starter-parent</artifactId>\n    <version>1.2.5.RELEASE</version>\n  </parent>\n\n  <dependencies>\n    <dependency>\n        <groupId>org.springframework.boot</groupId>\n        <artifactId>spring-boot-starter-web</artifactId>\n    </dependency>\n    <dependency>\n      <groupId>org.springframework.boot</groupId>\n      <artifactId>spring-boot-starter-thymeleaf</artifactId>\n    </dependency>\n    <dependency>\n      <groupId>org.springframework.boot</groupId>\n      <artifactId>spring-boot-starter-data-mongodb</artifactId>\n    </dependency>\n    <dependency>\n      <groupId>org.codehaus.jackson</groupId>\n      <artifactId>jackson-mapper-asl</artifactId>\n      <version>1.9.13</version>\n    </dependency>\n    <dependency>\n      <groupId>commons-collections</groupId>\n      <artifactId>commons-collections</artifactId>\n    </dependency>\n    <dependency>\n      <groupId>org.apache.commons</groupId>\n      <artifactId>commons-lang3</artifactId>\n      <version>3.4</version>\n    </dependency>\n    <dependency>\n      <groupId>junit</groupId>\n      <artifactId>junit</artifactId>\n      <scope>test</scope>\n    </dependency>\n  </dependencies>\n\n  <build>\n    <pluginManagement>\n      <plugins>\n        <plugin>\n          <groupId>org.springframework.boot</groupId>\n          <artifactId>spring-boot-maven-plugin</artifactId>\n          <version>1.2.5.RELEASE</version>\n        </plugin>\n      </plugins>\n    </pluginManagement>\n    <plugins>\n      <plugin>\n        <groupId>org.apache.maven.plugins</groupId>\n        <artifactId>maven-compiler-plugin</artifactId>\n        <configuration>\n          <verbose>true</verbose>\n          <source>${java.version}</source>\n          <target>${java.version}</target>\n          <encoding>${project.build.sourceEncoding}</encoding>\n        </configuration>\n      </plugin>\n      <plugin>\n        <groupId>org.springframework.boot</groupId>\n        <artifactId>spring-boot-maven-plugin</artifactId>\n      </plugin>\n      <plugin>\n        <groupId>org.codehaus.mojo</groupId>\n        <artifactId>versions-maven-plugin</artifactId>\n      </plugin>\n    </plugins>\n  </build>\n</project>\n```\n\n**resources\u30d5\u30a9\u30eb\u30c0\u306e\u4f5c\u6210**\n\n\u8a2d\u5b9a\u30d5\u30a1\u30a4\u30eb\u3084\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u30d5\u30a1\u30a4\u30eb\u306a\u3069\u3092\u914d\u7f6e\u3059\u308b`resources`\u30d5\u30a9\u30eb\u30c0\u3092`src/main`\u4e0b\u306b\u4f5c\u6210\u3057\u307e\u3059\u3002\n\n\u4f5c\u6210\u3057\u305f\u3089\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u306b\u53cd\u6620\u3055\u305b\u307e\u3059\u3002\n\n* \"Build Path\" -> \"Configure Build Path\" -> \"Java Buld Path\" -> \"Source\"\u30bf\u30d6\u3092\u9078\u629e\u3059\u308b\u3002\n* \"Add Folder\"\u30dc\u30bf\u30f3\u3092\u30af\u30ea\u30c3\u30af -> \u4f5c\u6210\u3057\u305f\"resources\"\u30d5\u30a9\u30eb\u30c0\u306b\u30c1\u30a7\u30c3\u30af\u3092\u5165\u308c\u308b\u3002\n\n**application.yml\u306e\u4f5c\u6210**\n\nsrc/main/resources\u30d5\u30a9\u30eb\u30c0\u5185\u306bapplication.yml\u3092\u4f5c\u6210\u3057\u307e\u3059\u3002\n\n```yaml:application.yml\n# EMBEDDED SERVER CONFIGURATION (ServerProperties)\nserver:\n  port: 9000\n\nspring:\n# THYMELEAF (ThymeleafAutoConfiguration)\n  thymeleaf:\n    enabled: true\n    cache: false\n# INTERNATIONALIZATION (MessageSourceAutoConfiguration)\n  messages:\n    basename: messages\n    cache-seconds: -1\n    encoding: UTF-8\n# MONGODB (MongoProperties)\n  data:\n    mongodb:\n      host: localhost\n      port: 27017\n      uri: mongodb://localhost/mongovwdb # connection URL\n      database: mongovwdb\n#      authentication-database: mongovwdb\n#      grid-fs-database:\n      username: mongovwuser\n      password: mongovwpass\n      repositories:\n        enabled: true  # if spring data repository support is enabled\n\n# ENDPOINTS (AbstractEndpoint subclasses)\nendpoints:\n  enabled: true\n```\n\n**logback.xml\u306e\u4f5c\u6210**\n\nsrc/main/resources\u30d5\u30a9\u30eb\u30c0\u5185\u306blogback.xml\u3092\u4f5c\u6210\u3057\u307e\u3059\u3002\n\u30ed\u30b0\u306e\u51fa\u529b\u5148\u30d5\u30a9\u30eb\u30c0\u3092\"D:/logs\"\u306b\u6307\u5b9a\u3057\u307e\u3057\u305f\u3002\n\n```xml:logback.xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<configuration>\n\n  <property name=\"LOG_DIR\" value=\"D:/logs\" />\n\n  <appender name=\"STDOUT\" class=\"ch.qos.logback.core.ConsoleAppender\">\n    <encoder>\n      <pattern>%d{yyyy-MMM-dd HH:mm:ss.SSS} %-5level [%thread] %logger{35} - %msg %n</pattern>\n    </encoder>\n  </appender>\n  <appender name=\"FILE\" class=\"ch.qos.logback.core.FileAppender\">\n     <file>${LOG_DIR}/sbdm-example.log</file>\n     <encoder>\n       <charset>UTF-8</charset>\n       <pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} %-5level [%thread] - %msg %n</pattern>\n     </encoder>\n  </appender>\n\n  <logger name=\"com.example\" level=\"DEBUG\" />\n\n  <logger name=\"org.hibernate\" level=\"ERROR\"/>\n  <logger name=\"org.springframework\" level=\"INFO\"/>\n  <logger name=\"org.thymeleaf\" level=\"INFO\"/>\n  <logger name=\"org.eclipse.jetty\" level=\"INFO\"/>\n  <logger name=\"org.apache.http\" level=\"INFO\"/>\n  <root>\n    <appender-ref ref=\"STDOUT\" />\n    <appender-ref ref=\"FILE\" />\n  </root>\n</configuration>\n```\n\n**\u30d3\u30eb\u30c9**\n\n\u3053\u306e\u6642\u70b9\u3067\u52d5\u4f5c\u691c\u8a3c\u3092\u517c\u306d\u3066\u30d3\u30eb\u30c9\u3057\u307e\u3059\u3002\n\n```text:package\n> mvn package\n```\n\n\u30d3\u30eb\u30c9\u304c\u6210\u529f\u3057\u305f\u3089\u751f\u6210\u3057\u305fjar\u30d5\u30a1\u30a4\u30eb\u3092\u5b9f\u884c\u3057\u307e\u3059\u3002\n\u30b3\u30de\u30f3\u30c9\u30d7\u30ed\u30f3\u30d7\u30c8\u306b\"Hello World!\"\u3068\u8868\u793a\u3055\u308c\u308c\u3070\u6210\u529f\u3067\u3059\u3002\n\n```text:jar\n> cd target\n> java -jar sbdm-example-1.0-SNAPSHOT.jar\nHello World!\n```\n\n\n### \u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u306e\u958b\u767a\n\n\u3059\u3079\u3066\u306e\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u3092\u63b2\u8f09\u3059\u308b\u3068\u8a18\u4e8b\u30b5\u30a4\u30ba\u304c\u5927\u304d\u304f\u306a\u3063\u3066\u3057\u307e\u3046\u306e\u3067\u30dd\u30a4\u30f3\u30c8\u3068\u306a\u308b\u90e8\u5206\u3060\u3051\u63b2\u8f09\u3057\u3066\u3044\u304d\u307e\u3059\u3002\n\n#### App\n\n\u30a8\u30f3\u30c9\u30dd\u30a4\u30f3\u30c8\u3068\u306a\u308b\u30af\u30e9\u30b9\u3092\u4f5c\u6210\u3057\u307e\u3059\u3002\n\u3059\u3067\u306b\u30b5\u30f3\u30d7\u30eb\u306eApp.java\u304c\u3042\u308a\u307e\u3059\u306e\u3067\u3001\u3053\u306e\u30d5\u30a1\u30a4\u30eb\u3092\u4e0b\u8a18\u306e\u3088\u3046\u306b\u5909\u66f4\u3057\u307e\u3059\u3002\n\n```java:App.java\npackage com.example.sbdm;\n\nimport org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\nimport org.springframework.context.annotation.Bean;\n\nimport com.example.sbdm.viewhelper.MyDialect;\n\n@SpringBootApplication\npublic class App {\n\n  public static void main(String[] args) {\n    SpringApplication.run(App.class, args);\n  }\n\n  //THYMELEAF Utility Object\n  @Bean\n  MyDialect myDialect(){\n    return new MyDialect();\n  }\n\n}\n```\n\n#### MongodbConfig\n\nMongoDB\u306e\u8a2d\u5b9a\u3092\u884c\u3046\u30af\u30e9\u30b9\u3092`AbstractMongoConfiguration`\u3092\u7d99\u627f\u3057\u3066\u4f5c\u6210\u3057\u307e\u3059\u3002\n\n```java:MongoDB.java\npackage com.example.sbdm;\n\nimport org.springframework.beans.factory.annotation.Value;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.data.authentication.UserCredentials;\nimport org.springframework.data.mongodb.MongoDbFactory;\nimport org.springframework.data.mongodb.config.AbstractMongoConfiguration;\nimport org.springframework.data.mongodb.core.MongoTemplate;\nimport org.springframework.data.mongodb.core.SimpleMongoDbFactory;\nimport org.springframework.data.mongodb.core.WriteResultChecking;\nimport org.springframework.data.mongodb.repository.config.EnableMongoRepositories;\nimport org.springframework.data.repository.query.QueryLookupStrategy;\n\nimport com.mongodb.Mongo;\nimport com.mongodb.MongoClient;\nimport com.mongodb.WriteConcern;\n\n@Configuration\n@EnableMongoRepositories(\n  basePackages = \"com.example.sbdm.repository\",\n  queryLookupStrategy = QueryLookupStrategy.Key.CREATE_IF_NOT_FOUND\n)\npublic class MongodbConfig extends AbstractMongoConfiguration {\n\n  @Override\n  @Bean\n  public Mongo mongo() throws Exception {\n    Mongo mongo = new MongoClient(\"localhost\", 27017);\n    mongo.setWriteConcern(WriteConcern.SAFE);\n    return mongo;\n  }\n\n  @Override\n  @Bean\n  public MongoDbFactory mongoDbFactory() throws Exception {\n    return new SimpleMongoDbFactory(mongo(), getDatabaseName(), getUserCredentials());\n    //return new SimpleMongoDbFactory(mongo(), getDatabaseName());\n  }\n\n  @Override\n  @Bean\n  public MongoTemplate mongoTemplate() throws Exception {\n    MongoTemplate template = new MongoTemplate(mongoDbFactory());\n    template.setWriteResultChecking(WriteResultChecking.EXCEPTION);\n    return template;\n  }\n\n  @Value(\"${spring.data.mongodb.database}\")\n  private String databasename;\n\n  @Override\n  protected String getDatabaseName() {\n    return databasename;\n  }\n\n  @Override\n  protected String getMappingBasePackage() {\n    return \"com.example.sbdm.domain\";\n  }\n\n  @Value(\"${spring.data.mongodb.username}\")\n  private String username;\n  @Value(\"${spring.data.mongodb.password}\")\n  private String password;\n\n  @Override\n  protected UserCredentials getUserCredentials() {\n    UserCredentials userCredentials = new UserCredentials(username, password);\n    return userCredentials;\n  }\n\n}\n```\n\n#### Domain\n\n\u30d1\u30c3\u30b1\u30fc\u30b8: `com.example.sbdm.domain`\n\nMongoDB\u306e\u30b3\u30ec\u30af\u30b7\u30e7\u30f3\u306b\u5bfe\u5fdc\u3059\u308bdomain\u30af\u30e9\u30b9\u3092\u4f5c\u6210\u3057\u307e\u3059\u3002\n\n**Customers**\n\n```java:Customers.java\npackage com.example.sbdm.domain;\n\nimport java.math.BigDecimal;\n\nimport org.springframework.data.annotation.Id;\nimport org.springframework.data.annotation.PersistenceConstructor;\nimport org.springframework.data.mongodb.core.index.CompoundIndex;\nimport org.springframework.data.mongodb.core.index.CompoundIndexes;\nimport org.springframework.data.mongodb.core.index.IndexDirection;\nimport org.springframework.data.mongodb.core.index.Indexed;\nimport org.springframework.data.mongodb.core.mapping.Document;\nimport org.springframework.data.mongodb.core.mapping.Field;\n\n@Document(collection = CollectionNames.Customers)\n@CompoundIndexes({\n  @CompoundIndex(\n    name = \"idx1_customers\",\n    def = \"{'contactLastName' : 1, 'contactFirstName' : 1}\"\n  )\n})\npublic class Customers {\n\n  public Customers() {\n  }\n\n  @PersistenceConstructor\n  public Customers(Long customerNumber, String customerName) {\n    this.customerNumber = customerNumber;\n    this.customerName = customerName;\n  }\n\n  @Id\n  private String id;\n\n  @Indexed(name = \"pk_customers\", direction = IndexDirection.DESCENDING, unique = true)\n  @Field(\"customerNumber\")\n  private Long customerNumber;\n\n  private String customerName;\n\n  @Field(\"contactLastName\")\n  private String contactLastName;\n\n  @Field(\"contactFirstName\")\n  private String contactFirstName;\n\n  private String phone;\n\n  private String addressLine1;\n\n  private String addressLine2;\n\n  private String city;\n\n  private String state;\n\n  private String postalCode;\n\n  private String country;\n\n  private Long salesRepEmployeeNumber;\n\n  private BigDecimal creditLimit;\n\n  //...getter/setter\u306f\u7701\u7565\u3057\u307e\u3059...\n}\n```\n\n**\u30dd\u30a4\u30f3\u30c8**\n\n\u30a2\u30ce\u30c6\u30fc\u30b7\u30e7\u30f3\u3092\u4f7f\u7528\u3057\u3066MongoDB\u306e\u30b3\u30ec\u30af\u30b7\u30e7\u30f3/\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u3068\u306e\u95a2\u4fc2\u3092\u5b9a\u7fa9\u3057\u307e\u3059\u3002\n\n* `@Id`\u30a2\u30ce\u30c6\u30fc\u30b7\u30e7\u30f3\u3067\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u306e_id\u30d5\u30a3\u30fc\u30eb\u30c9\u3092\u30de\u30c3\u30d4\u30f3\u30b0\u3057\u307e\u3059\u3002\n* `@Document`\u30a2\u30ce\u30c6\u30fc\u30b7\u30e7\u30f3\u3067\u30b3\u30ec\u30af\u30b7\u30e7\u30f3\u540d\u3092\u5b9a\u7fa9\u3057\u307e\u3059\u3002\n* `@Indexed`\u30a2\u30ce\u30c6\u30fc\u30b7\u30e7\u30f3\u3084`@CompoundIndex`\u30a2\u30ce\u30c6\u30fc\u30b7\u30e7\u30f3\u3067\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u3092\u5b9a\u7fa9\u3057\u307e\u3059\u3002\n* `@Field`\u30a2\u30ce\u30c6\u30fc\u30b7\u30e7\u30f3\u3067\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u306e\u30d5\u30a3\u30fc\u30eb\u30c9\u3092\u30de\u30c3\u30d4\u30f3\u30b0\u3057\u307e\u3059\u3002\n\n\n#### Repository\n\n\u30d1\u30c3\u30b1\u30fc\u30b8: `com.example.sbdm.repository`\n\n`MongoRepository`\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30fc\u30b9\u3092\u7d99\u627f\u3057\u305f\u5404\u30b3\u30ec\u30af\u30b7\u30e7\u30f3\u7528\u306erepository\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30fc\u30b9\u3092\u4f5c\u6210\u3057\u307e\u3059\u3002\n\n**CustomersRepository**\n\n```java:CustomersRepository.java\npackage com.example.sbdm.repository;\n\nimport org.springframework.data.domain.PageImpl;\nimport org.springframework.data.domain.Pageable;\nimport org.springframework.data.domain.Sort;\nimport org.springframework.data.mongodb.repository.MongoRepository;\nimport org.springframework.data.mongodb.repository.Query;\n\nimport com.example.sbdm.domain.Customers;\n\npublic interface CustomersRepository extends MongoRepository<Customers, String> {\n\n  public static final String FIND =\n   \"{$or:[\" +\n   \"{'customerName': {$regex: '?0', $options: 'i'}},\" +\n   \"{'contactFirstName': {$regex: '?0', $options: 'i'}},\" +\n   \"{'contactLastName': {$regex: '?0', $options: 'i'}}\" +\n   \"]}\";\n\n  Customers findByCustomerNumber(Long customerNumber);\n\n  Iterable<Customers> findByCustomerNameLike(String customerName, Sort sort);\n\n  Long countByCustomerNameLike(String keyword);\n\n  @Query(value = FIND, count = true)\n  Long searchCount(String keyword);\n\n  @Query(value = FIND)\n  PageImpl<Customers> search(String keyword, Pageable page);\n}\n```\n\n**\u30dd\u30a4\u30f3\u30c8**\n\n* \u3053\u306erepository\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30fc\u30b9\u306b\u306f`@Repository`\u30a2\u30ce\u30c6\u30fc\u30b7\u30e7\u30f3\u3092\u4ed8\u3051\u307e\u305b\u3093\u3002\u4ed8\u3051\u308b\u3068\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u8d77\u52d5\u6642\u306b\u30a8\u30e9\u30fc\u304c\u767a\u751f\u3057\u307e\u3059\u3002\n* `MongoRepository`\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30fc\u30b9\u3092\u7d99\u627f\u3059\u308b\u3053\u3068\u3067\u57fa\u672c\u7684\u306a\u30e1\u30bd\u30c3\u30c9(find\u3084count,save,delete)\u304c\u4f7f\u7528\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002\n* \u4efb\u610f\u306e\u6761\u4ef6\u3067\u691c\u7d22\u3092\u304a\u3053\u306a\u3044\u305f\u3044\u5834\u5408\u306f\u547d\u540d\u30eb\u30fc\u30eb\u306b\u57fa\u3065\u3044\u3066\u72ec\u81ea\u30e1\u30bd\u30c3\u30c9\u3092\u5b9a\u7fa9\u3057\u307e\u3059\u3002\n* \u4efb\u610f\u306e\u30af\u30a8\u30ea\u30fc\u3092\u767a\u884c\u3057\u305f\u3044\u5834\u5408\u306f`@Query`\u30a2\u30ce\u30c6\u30fc\u30b7\u30e7\u30f3\u3092\u4f7f\u7528\u3057\u3066\u5b9f\u884c\u3059\u308b\u30af\u30a8\u30ea\u30fc\u3092\u6307\u5b9a\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\n**\u72ec\u81ea\u30e1\u30bd\u30c3\u30c9\u306e\u5b9a\u7fa9\u306b\u3064\u3044\u3066**\n\n\u547d\u540d\u30eb\u30fc\u30eb\u306b\u5f93\u3063\u305f\u30e1\u30bd\u30c3\u30c9\u540d\u306b\u3059\u308b\u3053\u3068\u3067\u4efb\u610f\u306e\u30af\u30a8\u30ea\u30fc\u3092\u767a\u884c\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\u30eb\u30fc\u30eb\u306f[Query methods] (http://docs.spring.io/spring-data/data-mongo/docs/1.6.3.RELEASE/reference/html/#repositories.query-methods)\u3067\u8a73\u7d30\u306b\u89e3\u8aac\u3055\u308c\u3066\u3044\u307e\u3059\u3002\n\n\u4f8b\u3048\u3070\u4e0b\u8a18\u306e\u30e1\u30bd\u30c3\u30c9\u5b9a\u7fa9\u306f\u3001`customers`\u30b3\u30ec\u30af\u30b7\u30e7\u30f3\u306e`cusotomerNumber`\u30d5\u30a3\u30fc\u30eb\u30c9\u306b\u5bfe\u3057\u3066\u30d1\u30e9\u30e1\u30fc\u30bf\u5024\u3068\u540c\u3058\u5024\u3092\u6301\u3064\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u3092\u691c\u7d22\u3057\u307e\u3059\u3002\uff08\u306a\u304a\u3053\u306e\u30d5\u30a3\u30fc\u30eb\u30c9\u306f\u4e00\u610f\u306a\u306e\u3067\u30011\u4ef6\u3057\u304b\u691c\u7d22\u3055\u308c\u306a\u3044\u3053\u3068\u304c\u4fdd\u8a3c\u3055\u308c\u3066\u3044\u307e\u3059\u3002)\n\n```java:customize\nCustomers findByCustomerNumber(Long customerNumber);\n```\n\u30e1\u30bd\u30c3\u30c9\u540d\u306bLike\u3092\u52a0\u3048\u308b\u3068like\u691c\u7d22\u3092\u884c\u3044\u307e\u3059\u3002\n\n```java:customize\nIterable<Customers> findByCustomerNameLike(String customerName, Sort sort);\n```\n\n\u4ef6\u6570\u306e\u30ab\u30a6\u30f3\u30c8\u306fcountBy\u3092\u52a0\u3048\u307e\u3059\u3002\n\n```java:customize\nLong countByCustomerNameLike(String keyword);\n```\n\n\u8907\u6570\u306e\u30d5\u30a3\u30fc\u30eb\u30c9\u3092\u691c\u7d22\u6761\u4ef6\u306b\u3057\u305f\u3044\u5834\u5408\u306fAnd\u3084Or\u3092\u52a0\u3048\u307e\u3059\u3002\n\n```java:customize\nOrderDetails findByOrderNumberAndProductCode(Long orderNumber, String prodctCode);\n```\n\n`@Query`\u30a2\u30ce\u30c6\u30fc\u30b7\u30e7\u30f3\u3092\u4f7f\u3048\u3070\u3001\u5b9f\u884c\u3057\u305f\u3044\u30af\u30a8\u30ea\u30fc\u3092\u76f4\u63a5\u6307\u5b9a\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\u3061\u306a\u307f\u306b\u3001\u3053\u306e\u4f8b\u3067\u306fPageable\u30a4\u30f3\u30bf\u30d5\u30a7\u30fc\u30b9\u3092\u5f15\u6570\u306b\u52a0\u3048\u3066\u3044\u307e\u3059\u304c\u3001\u3053\u306e\u5834\u5408\u306e\u623b\u308a\u5024\u306e\u578b\u306f`PageImpl`\u30af\u30e9\u30b9\u306b\u306a\u308a\u307e\u3059\u3002\uff08\u52a0\u3048\u306a\u3044\u5834\u5408\u306f`ArrayList`\u30af\u30e9\u30b9\u306b\u306a\u308a\u307e\u3059\u3002)\n\n```java:customize\n@Query(value = FIND)\nPageImpl<Customers> search(String keyword, Pageable page);\n```\n\n`count = true`\u3092\u52a0\u3048\u308b\u3068\u30af\u30a8\u30ea\u30fc\u306e\u7d50\u679c\u3092\u30ab\u30a6\u30f3\u30c8\u3057\u307e\u3059\u3002\n\n```java:customize\n@Query(value = FIND, count = true)\nLong searchCount(String keyword);\n```\n\n#### Service\n\n\u30d1\u30c3\u30b1\u30fc\u30b8: `com.example.sbdm.service`\n\n\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u64cd\u4f5c\u3092\u884c\u3046\u57fa\u672c\u7684\u306a\u30e1\u30bd\u30c3\u30c9\u3092\u5b9a\u7fa9\u3057\u305f\u30a4\u30f3\u30bf\u30d5\u30a7\u30fc\u30b9\u3092\u4f5c\u6210\u3057\u307e\u3059\u3002\n\n**IService**\n\n```java:IService.java\npackage com.example.sbdm.service;\n\n\npublic interface IService<T> extends Pagination {\n\n  /**\n   * \u30b3\u30ec\u30af\u30b7\u30e7\u30f3\u306e\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u306e\u4ef6\u6570\n   */\n  public long count();\n\n  /**\n   * \u30c9\u30ad\u30e5\u30e1\u30f3\u30c8ID\u3067\u691c\u7d22\n   */\n  public T findById(String id);\n\n  /**\n   * \u6761\u4ef6\u306a\u3057\u3067\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u3092\u691c\u7d22\n   */\n  public Iterable<T> findAll(int page, int size, String sortColumn);\n\n  /**\n   * \u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u306e\u30d7\u30e9\u30a4\u30de\u30ea\u30fc\u30ad\u30fc\u3067\u691c\u7d22\n   */\n  public T findByPk(Object...keys);\n\n  /**\n   * \u540d\u79f0\u306elike\u691c\u7d22\n   */\n  public Iterable<T> findByNameLike(String name, String sortColumn);\n\n  /**\n   * \u691c\u7d22\u30ef\u30fc\u30c9\u306b\u4e00\u81f4\u3059\u308b\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u306e\u4ef6\u6570\n   */\n  public long searchCount(String keyword);\n\n  /**\n   * \u691c\u7d22\u30ef\u30fc\u30c9\u306b\u4e00\u81f4\u3059\u308b\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u3092\u691c\u7d22\n   */\n  public Iterable<T> search(String keyword, int page, int size, String sortColumn);\n\n  public T save(T model);\n\n  public Iterable<T> save(Iterable<T> model);\n\n  public void delete(String id);\n\n  public void delete(Iterable<T> model);\n}\n```\n\n**AbstractService**\n\n\u5404\u30b3\u30ec\u30af\u30b7\u30e7\u30f3\u7528\u306e\u30b5\u30fc\u30d3\u30b9\u30af\u30e9\u30b9\u306e\u57fa\u5e95\u30af\u30e9\u30b9\u3092`IService`\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30fc\u30b9\u3092\u5b9f\u88c5\u3057\u3066\u4f5c\u6210\u3057\u307e\u3059\u3002\n\n\u3053\u306e`AbstractService`\u30af\u30e9\u30b9\u3067\u306f\u3001\u4f3c\u305f\u3088\u3046\u306a\u6a5f\u80fd\u306e\u30e1\u30bd\u30c3\u30c9\u304c\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u307e\u3059\u304c\u3001\u305d\u306e\u9055\u3044\u306f\u6b21\u306e\u3088\u3046\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u3002\n\n* `IService`\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30fc\u30b9\u306e\u30e1\u30bd\u30c3\u30c9\u306e\u5b9f\u88c5\u3067\u306f\u3001\u4e0a\u8a18\u3067\u8aac\u660e\u3057\u305frepository\u3092\u4f7f\u7528\u3057\u307e\u3059\u3002\n* `AbstractService`\u30af\u30e9\u30b9\u3067\u5b9a\u7fa9\u3059\u308b\u30e1\u30bd\u30c3\u30c9\u306f\u3001MongoTemplate\u3068Query\u3092\u4f7f\u7528\u3059\u308b\u30e1\u30bd\u30c3\u30c9\u3092\u4f7f\u7528\u3057\u307e\u3059\u3002\n\n```java:AbstractService.java\npackage com.example.sbdm.service;\n\nimport java.util.List;\n\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.data.domain.PageRequest;\nimport org.springframework.data.domain.Pageable;\nimport org.springframework.data.domain.Sort;\nimport org.springframework.data.domain.Sort.Direction;\nimport org.springframework.data.mongodb.core.MongoTemplate;\nimport org.springframework.data.mongodb.core.query.Criteria;\nimport org.springframework.data.mongodb.core.query.Query;\nimport org.springframework.data.mongodb.core.query.Update;\nimport org.springframework.data.mongodb.repository.MongoRepository;\n\nimport com.example.sbdm.utils.MongoService;\n\npublic abstract class AbstractService<T> implements IService<T> {\n  private static Logger logger = LoggerFactory.getLogger(AbstractService.class);\n\n  @Autowired\n  private MongoTemplate template;\n\n  /* *\n   * repository\u3092\u4f7f\u7528\u3059\u308b\u65b9\u6cd5\n   * \n   * */\n\n  @Override\n  public long count() {\n    return getRepository().count();\n  }\n\n  @Override\n  public T findById(String id) {\n    return getRepository().findOne(id);\n  }\n\n  @Override\n  public Iterable<T> findAll(int page, int size, String sort) {\n    Pageable pager = new PageRequest(currentPage(page), size, Direction.ASC, sort);\n    Iterable<T> result = getRepository().findAll(pager);\n    return result;\n  }\n\n  @Override\n  public T save(T model) {\n    return getRepository().save(model);\n  }\n\n  @Override\n  public Iterable<T> save(Iterable<T> model) {\n    return getRepository().save(model);\n  }\n\n  @Override\n  public void delete(String id) {\n    getRepository().delete(id);\n  }\n\n  @Override\n  public void delete(Iterable<T> model) {\n    getRepository().delete(model);\n  }\n\n  abstract protected MongoRepository<T, String> getRepository();\n\n\n  /* *\n   * template\u3068query\u3092\u4f7f\u7528\u3059\u308b\u65b9\u6cd5\n   * \n   * */\n\n  protected long doCount(Query query, Class<T> clazz) {\n    return template.count(query, clazz);\n  }\n\n  protected T doFindOne(Query query, Class<T> clazz) {\n    return template.findOne(query, clazz);\n  }\n\n  protected List<T> doFind(Query query, Class<T> clazz) {\n    return template.find(query, clazz);\n  }\n\n  protected List<T> doFindAll(Class<T> clazz) {\n    return template.findAll(clazz);\n  }\n\n  protected Criteria makeCriteriaById(String id) {\n    return Criteria.where(\"id\").is(id);\n  }\n\n  protected Criteria makeCriteriaRegex(Criteria criteria, String field, String param) {\n    if (criteria == null) {\n      criteria = Criteria.where(field).regex(param,\"i\");\n    } else {\n      criteria.and(field).regex(param,\"i\");\n    }\n    return criteria;\n  }\n\n  protected Criteria makeCriteria(Criteria criteria, String field, Object param) {\n    if (criteria == null) {\n      criteria = Criteria.where(field).is(param);\n    } else {\n      criteria.and(field).is(param);\n    }\n    return criteria;\n  }\n\n  protected Criteria makeWhere(String name) {\n    return Criteria.where(name);\n  }\n\n  protected Criteria makeWhere(String name, Object param) {\n    return Criteria.where(name).is(param);\n  }\n\n  protected Query makeQuery(Criteria criteria) {\n    Query query;\n    if (criteria != null) {\n      query = new Query(criteria);\n    } else {\n      query = new Query();\n    }\n    return query;\n  }\n\n  protected int calcSkipNum(int page, int size) {\n    return (page - 1) * size;\n  }\n\n  abstract protected long count(T searchCondition);\n  abstract protected List<T> search(int page, int size, Sort sort, T searchCondition);\n  abstract protected Criteria makeCriteriaByPk(T model);\n  abstract protected Criteria makeCriteria(T model);\n  abstract protected Update makeAllUpdate(T model);\n}\n```\n\n**\u30dd\u30a4\u30f3\u30c8**\n\n\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u306e\u64cd\u4f5c\u65b9\u6cd5\u306b\u306f\u3001Repository\u30a4\u30f3\u30bf\u30d5\u30a7\u30fc\u30b9\u3092\u4f7f\u7528\u3059\u308b\u65b9\u6cd5\u3068\u3001MongoTemplate\u3068Query\u3092\u4f7f\u7528\u3059\u308b\u65b9\u6cd5\u304c\u3042\u308a\u307e\u3059\u3002\u3069\u3061\u3089\u306e\u65b9\u6cd5\u3067\u3082\u540c\u3058\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u304c\u3001Repository\u3092\u4f7f\u7528\u3059\u308b\u65b9\u304c\u30b3\u30fc\u30c9\u306e\u5b9f\u88c5\u91cf\u304c\u6e1b\u308a\u307e\u3059\u3002\n\n* Repository\u3092\u4f7f\u7528\u3059\u308b\u65b9\u6cd5: \u30b7\u30f3\u30d7\u30eb\u306a\u30af\u30a8\u30ea\u30fc\u3067\u3042\u308c\u3070\u30e1\u30bd\u30c3\u30c9\u5b9a\u7fa9\u3060\u3051\u3067\u6e08\u307f\u3001\u30b3\u30fc\u30c9\u306e\u8a18\u8ff0\u3084\u30af\u30a8\u30ea\u30fc\u3092\u610f\u8b58\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u305b\u3093\u3002\n* MongoTemplate\u3068Query\u3092\u4f7f\u7528\u3059\u308b\u65b9\u6cd5: \u30d7\u30ed\u30b0\u30e9\u30e0\u3067\u30af\u30a8\u30ea\u30fc\u3092\u7d44\u307f\u7acb\u3066\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\n\u306a\u304a\u3069\u3061\u3089\u306e\u65b9\u6cd5\u3067\u3082\u76f4\u63a5\u30af\u30a8\u30ea\u30fc\u3092\u5b9f\u884c\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\n\n##### Service\u306e\u5177\u8c61\u30af\u30e9\u30b9\n\n\u30d1\u30c3\u30b1\u30fc\u30b8: `com.example.sbdm.service.impl`\n\n**CustomersService**\n\n```java:CustomersService.java\npackage com.example.sbdm.service.impl;\n\nimport java.util.List;\n\nimport org.apache.commons.lang3.StringUtils;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.data.domain.PageRequest;\nimport org.springframework.data.domain.Pageable;\nimport org.springframework.data.domain.Sort;\nimport org.springframework.data.domain.Sort.Direction;\nimport org.springframework.data.mongodb.core.query.Criteria;\nimport org.springframework.data.mongodb.core.query.Query;\nimport org.springframework.data.mongodb.core.query.Update;\nimport org.springframework.data.mongodb.repository.MongoRepository;\nimport org.springframework.stereotype.Service;\n\nimport com.example.sbdm.domain.Customers;\nimport com.example.sbdm.repository.CustomersRepository;\nimport com.example.sbdm.service.AbstractService;\n\n@Service\npublic class CustomersService extends AbstractService<Customers> {\n  private static Logger logger = LoggerFactory.getLogger(CustomersService.class);\n\n  @Autowired\n  private CustomersRepository customersRepository;\n\n  @Override\n  protected MongoRepository<Customers, String> getRepository() {\n    return customersRepository;\n  }\n\n  @Override\n  public Customers findByPk(Object...keys) {\n    return customersRepository.findByCustomerNumber((Long)keys[0]);\n  }\n\n  @Override\n  public Iterable<Customers> findByNameLike(String customerName, String sortColumn) {\n    Sort sort = new Sort(sortColumn);\n    return customersRepository.findByCustomerNameLike(customerName, sort);\n  }\n\n  @Override\n  public long searchCount(String keyword) {\n    return customersRepository.searchCount(keyword);\n  }\n\n  @Override\n  public Iterable<Customers> search(String keyword, int page, int size, String sortColumn) {\n    Pageable pager = new PageRequest(currentPage(page), size, Direction.ASC, sortColumn);\n    return customersRepository.search(keyword, pager);\n  }\n\n  @Override\n  public long count(Customers searchCondition) {\n    Criteria criteria = makeCriteria(searchCondition);\n    Query query = makeQuery(criteria);\n    return doCount(query, Customers.class);\n  }\n\n  @Override\n  public List<Customers> search(int page, int size, Sort sort, Customers searchCondition) {\n    Criteria criteria = makeCriteria(searchCondition);\n    Query query= makeQuery(criteria);\n    query.skip(calcSkipNum(page, size)).limit(size);\n    if (sort != null) {\n      query.with(sort);\n    }\n    return doFind(query, Customers.class);\n  }\n\n  @Override\n  protected Criteria makeCriteriaByPk(Customers model) {\n    return Criteria.where(\"customerNumber\").is(model.getCustomerNumber());\n  }\n\n  @Override\n  protected Criteria makeCriteria(Customers model) {\n    Criteria criteria = null;\n    if (model.getCustomerNumber() != null && model.getCustomerNumber() > 0L) {\n      criteria = makeCriteria(criteria, \"customerNumber\", model.getCustomerNumber());\n    }\n    if (StringUtils.isNotEmpty(model.getCustomerName())) {\n      criteria = makeCriteria(criteria, \"customerName\", model.getCustomerName());\n    }\n    if (StringUtils.isNotEmpty(model.getPhone())) {\n      criteria = makeCriteria(criteria, \"phone\", model.getPhone());\n    }\n    if (StringUtils.isNotEmpty(model.getCity())) {\n      criteria = makeCriteria(criteria, \"city\", model.getCity());\n    }\n    if (StringUtils.isNotEmpty(model.getCountry())) {\n      criteria = makeCriteria(criteria, \"country\", model.getCountry());\n    }\n    if (StringUtils.isNotEmpty(model.getState())) {\n      criteria = makeCriteria(criteria, \"state\", model.getState());\n    }\n    if (StringUtils.isNotEmpty(model.getPostalCode())) {\n      criteria = makeCriteria(criteria, \"postalCode\", model.getPostalCode());\n    }\n    return criteria;\n  }\n\n  @Override\n  protected Update makeAllUpdate(Customers model) {\n    Update update = new Update();\n    update.set(\"customerName\", model.getCustomerName());\n    update.set(\"contactLastName\", model.getContactLastName());\n    update.set(\"contactFirstName\", model.getContactFirstName());\n    update.set(\"phone\", model.getPhone());\n    update.set(\"addressLine1\", model.getAddressLine1());\n    update.set(\"addressLine2\",model.getAddressLine2());\n    update.set(\"city\", model.getCity());\n    update.set(\"state\", model.getState());\n    update.set(\"postalCode\", model.getPostalCode());\n    update.set(\"country\", model.getCountry());\n    update.set(\"salesRepEmployeeNumber\", model.getSalesRepEmployeeNumber());\n    update.set(\"creditLimit\", model.getCreditLimit());\n    return update;\n  }\n\n}\n```\n\n#### Controller\n\n\u30d1\u30c3\u30b1\u30fc\u30b8: `com.example.sbdm.web`\n\n**CustomersController**\n\n```java:CustomersController.java\npackage com.example.sbdm.web;\n\nimport java.util.List;\n\nimport org.apache.commons.lang3.StringUtils;\nimport org.slf4j.Logger;\nimport org.slf4j.LoggerFactory;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Controller;\nimport org.springframework.ui.Model;\nimport org.springframework.web.bind.annotation.PathVariable;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RequestMethod;\nimport org.springframework.web.bind.annotation.RequestParam;\n\nimport com.example.sbdm.domain.Customers;\nimport com.example.sbdm.domain.Orders;\nimport com.example.sbdm.service.impl.CustomersService;\nimport com.example.sbdm.service.impl.OrdersService;\nimport com.example.sbdm.utils.JsonLoader;\n\n@Controller\n@RequestMapping(value = \"/customers\")\npublic class CustomersController extends BaseController {\n  private static Logger logger = LoggerFactory.getLogger(CustomersController.class);\n\n  private static final int PAGE_SIZE = 10;\n\n  @Autowired\n  private CustomersService customersService;\n\n  @Autowired\n  private OrdersService ordersService;\n\n  @RequestMapping(method = RequestMethod.GET)\n  public String _index(Model model) {\n    return index(1, null, model);\n  }\n\n  @RequestMapping(value = \"/\", method = RequestMethod.GET)\n  public String index(Model model) {\n    return index(1, null, model);\n  }\n\n  @RequestMapping(value = \"/{pageNo}\", method = RequestMethod.GET)\n  public String index(\n      @PathVariable Integer pageNo,\n      @RequestParam String keyword,\n      Model model) {\n    logger.debug(\"CustomersController:[index] Passing through...\");\n\n    int totalCount = 0;\n    Iterable<Customers> result;\n\n    if (StringUtils.isNotEmpty(keyword)) {\n      result = customersService.search(keyword, pageNo, PAGE_SIZE, \"customerName\");\n      totalCount = (int)customersService.searchCount(keyword);\n    } else {\n      result = customersService.findAll(pageNo, PAGE_SIZE, \"customerNumber\");\n      totalCount = (int)customersService.count();\n    }\n\n    model.addAttribute(\"keyword\", keyword);\n    model.addAttribute(\"result\", result);\n\n    addPageAttr(customersService.calcPage(totalCount, pageNo, PAGE_SIZE), model);\n\n    return \"Customers/index\";\n  }\n\n  @RequestMapping(value = \"/detail/{id}\", method = RequestMethod.GET)\n  public String detail(\n      @PathVariable String id,\n      Model model) {\n    logger.debug(\"CustomersController:[detail] Passing through...\");\n\n    Customers customer =  customersService.findById(id);\n\n    String json = \"{}\";\n    if (customer != null) {\n      json = JsonLoader.toJson(customer);\n    }\n\n    Iterable<Orders> orderList = ordersService.findByCustomerNumber(customer.getCustomerNumber());\n\n    model.addAttribute(\"customer\", customer);\n    model.addAttribute(\"orderList\", orderList);\n    model.addAttribute(\"json\", json);\n\n    return \"Customers/detail\";\n  }\n\n  @RequestMapping(value = \"/search\", method = RequestMethod.GET)\n  public String search(\n      @RequestParam(required = false) String country,\n      @RequestParam(required = false) String city,\n      @RequestParam(required = false) String state,\n      @RequestParam(required = false) String postalcode,\n      Model model) {\n    logger.debug(\"CustomersController:[search] Passing through...\");\n\n    int pageNo = 1;\n\n    Customers searchCondition = new Customers();\n    if (StringUtils.isNotEmpty(country)) {\n      searchCondition.setCountry(country);\n    }\n    if (StringUtils.isNotEmpty(city)) {\n      searchCondition.setCity(city);\n    }\n    if (StringUtils.isNotEmpty(state)) {\n      searchCondition.setState(state);\n    }\n    if (StringUtils.isNotEmpty(postalcode)) {\n      searchCondition.setPostalCode(postalcode);\n    }\n\n    List<Customers> result = customersService.search(pageNo, PAGE_SIZE, null, searchCondition);\n\n    int totalCount = (int)customersService.count(searchCondition);\n\n    model.addAttribute(\"result\", result);\n\n    addPageAttr(customersService.calcPage(totalCount, pageNo, PAGE_SIZE), model);\n\n    return \"Customers/index\";\n  }\n\n}\n```\n\n* `search`\u30a2\u30af\u30b7\u30e7\u30f3\u306e\u547c\u3073\u51fa\u3057\u306f\u3001\u30d6\u30e9\u30a6\u30b6\u306e\u30a2\u30c9\u30ec\u30b9\u30d0\u30fc\u306b\u76f4\u63a5URL\u3092\u5165\u529b\u3057\u3066\u884c\u3044\u307e\u3059\u3002\u5b9f\u884c\u7d50\u679c\u306f\u4e00\u89a7\u30da\u30fc\u30b8\u306b\u8868\u793a\u3055\u308c\u307e\u3059\u3002\n\n\n#### \u305d\u306e\u4ed6\u306e\u30af\u30e9\u30b9\u3084\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\n\n\u305d\u306e\u4ed6\u306e\u30af\u30e9\u30b9\u3084\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u306b\u3064\u3044\u3066\u306f\u7701\u7565\u3057\u307e\u3059\u3002(MongoDB\u306b\u95a2\u4fc2\u3059\u308b\u91cd\u8981\u306a\u90e8\u5206\u304c\u7121\u3044\u3053\u3068\u3068\u3001\u8a18\u4e8b\u30b5\u30a4\u30ba\u304c\u5927\u304d\u304f\u306a\u3063\u3066\u3057\u307e\u3046\u305f\u3081\u3002)\n\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u5168\u6587\u306fgithub\u4e0a\u3067\u516c\u958b\u3057\u3066\u3044\u307e\u3059\u3002\n\n\n### \u5b9f\u884c\u3059\u308b\n\nMongoDB\u304c\u8d77\u52d5\u3055\u308c\u3066\u3044\u308b\u3053\u3068\u3092\u78ba\u8a8d\u3057\u4e0b\u8a18\u306e\u30b3\u30de\u30f3\u30c9\u3092\u5b9f\u884c\u3057\u307e\u3059\u3002\n\n```text\n> mvn spring-boot:run\n```\n\n\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u304c\u8d77\u52d5\u3057\u305f\u3089\u4e0b\u8a18\u306eURL\u306b\u30a2\u30af\u30bb\u30b9\u3057\u30da\u30fc\u30b8\u304c\u8868\u793a\u3055\u308c\u308c\u3070\u6210\u529f\u3067\u3059\u3002\n\u305f\u3060\u3057\u3001\u30c7\u30fc\u30bf\u304c1\u4ef6\u3082\u306a\u3044\u72b6\u614b\u306a\u306e\u3067\u4e0b\u56f3\u306e\u30da\u30fc\u30b8\u304c\u8868\u793a\u3055\u308c\u308b\u306f\u305a\u3067\u3059\u3002\n\nhttp://localhost:9000/\n\n![empty.png](https://qiita-image-store.s3.amazonaws.com/0/22772/1e944a6d-ff2e-2a5d-0c5a-d3f5cc267a08.png)\n\n#### \u30c7\u30fc\u30bf\u306e\u521d\u671f\u5316\n\n\u521d\u671f\u30c7\u30fc\u30bf\u306fjson\u30d5\u30a1\u30a4\u30eb\u3067\u7ba1\u7406\u3057\u3066\u3044\u307e\u3059\u3002(\u30d5\u30a1\u30a4\u30eb\u306f`resources/data/init`\u30d5\u30a9\u30eb\u30c0\u4e0b\u306b\u3042\u308a\u307e\u3059)\n\n```text\nresources\n \u2514\u2500data\n    \u2514\u2500init\n        \u251c\u2500Customers\n        \u251c\u2500OrderDetails\n        \u251c\u2500Orders\n        \u251c\u2500Payments\n        \u251c\u2500ProductLines\n        \u2514\u2500Products\n```\n\n\u30da\u30fc\u30b8\u306e\u30e1\u30cb\u30e5\u30fc\u306b\u3042\u308b\"admin:init\"\u3092\u30af\u30ea\u30c3\u30af\u3059\u308b\u3068json\u30d5\u30a1\u30a4\u30eb\u3092\u30ed\u30fc\u30c9\u3057\u3066\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u3092\u4f5c\u6210\u3057\u307e\u3059\u3002\n\u30c7\u30fc\u30bf\u306e\u521d\u671f\u5316\u304c\u6210\u529f\u3059\u308b\u3068\u4e0b\u56f3\u306e\u7d50\u679c\u30da\u30fc\u30b8\u304c\u8868\u793a\u3055\u308c\u307e\u3059\u3002\n\n![init_result.png](https://qiita-image-store.s3.amazonaws.com/0/22772/d63f6f46-59b2-b044-34f6-48e9d630dae3.png)\n\n\u30c7\u30fc\u30bf\u306e\u521d\u671f\u5316\u304c\u7d42\u308f\u3063\u305f\u3089\u5404\u30da\u30fc\u30b8\u3067\u30c7\u30fc\u30bf\u3092\u78ba\u8a8d\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\n**\u9867\u5ba2\u4e00\u89a7**\n\n![customers.png](https://qiita-image-store.s3.amazonaws.com/0/22772/aa586b8b-9c2f-dd4e-4992-1a956c5a5537.png)\n\n**\u6ce8\u6587\u4e00\u89a7**\n\n![orders.png](https://qiita-image-store.s3.amazonaws.com/0/22772/914bd118-0fb5-5c0d-aa7d-067ccff1ff6a.png)\n\n**\u88fd\u54c1\u4e00\u89a7**\n\n![products.png](https://qiita-image-store.s3.amazonaws.com/0/22772/0501ffb2-a59a-2b99-d794-dee23c8e8f6b.png)\n\n**\u88fd\u54c1\u7a2e\u76ee\u4e00\u89a7**\n\n![productlines.png](https://qiita-image-store.s3.amazonaws.com/0/22772/563c2ea7-0499-1855-0835-e0249d5a3dba.png)\n\n**\u652f\u6255\u3044\u4e00\u89a7**\n\n![payments.png](https://qiita-image-store.s3.amazonaws.com/0/22772/13b81834-10e1-1e60-220a-14237691b121.png)\n", "tags": ["spring-boot1.2.5", "spring-data-mongodb1.6.3", "Java"]}