{"context": " More than 1 year has passed since last update.\n\nmap\nhttp://reactivex.io/documentation/operators/map.html#collapseRxGroovy\n\noutput: T\n\u5f9e\u5716\u4e2d\u53ef\u4ee5\u770b\u5230\n\u4f9d\u5e8f\u7531Observable\u5708\u5708\u57f7\u884caction\u5f8creturn T\u518d\u8b8a\u70baObservable\u83f1\u5f62\u8f38\u51fa\nnumbers = Observable.from([1, 2, 3, 4, 5]);\n\nnumbers.map({it * it}).subscribe(\n  { println(it); },                          // onNext\n  { println(\"Error: \" + it.getMessage()); }, // onError\n  { println(\"Sequence complete\"); }          // onCompleted\n);\n\n1\n4\n9\n16\n25\nSequence complete\n\n\nflatMap\nhttp://reactivex.io/documentation/operators/flatmap.html#collapseRxGroovy\n\noutput: unordered Observables\n\u5f9e\u5716\u4e2d\u53ef\u4ee5\u770b\u5230\nObservables\u5168\u90e8\u6524\u5e73\u4e00\u9f4a\u8f38\u5165\u57f7\u884caction\u5f8creturn Observables\n\u53ef\u4ee5\u5f9e\u4e00\u500bObservable\u5708\u5708\u8b8a\u70ba\u591a\u500bObservables\u83f1\u5f62\u8f38\u51fa\u4e14\u662f\u6c92\u6709\u9806\u5e8f\u7684\n\u4f8b\u5982\u6b64\u5716\u4e00\u500b\u5708\u5708Observable\u8b8a\u70ba\u5169\u500b\u83f1\u5f62Observables\n\u800c\u4e14\u7da0\u8272\u83f1\u5f622\u8f38\u51fa\u8f03\u6162\u6240\u4ee5\u85cd\u8272\u83f1\u5f621\u6703\u5148\u8f38\u51fa\n\u4f46\u9806\u5e8f\u554f\u984c\u662f\u56e0\u70baaction\u6709\u57f7\u884cSchedulers\u591a\u57f7\u884c\u5e8f\u6240\u5c0e\u81f4\n\u4ee5\u4e0bsample\u70ba\u4e00\u822c\u55ae\u57f7\u884c\u5e8f\u6240\u4ee5\u6703\u4f9d\u5e8f\u8f38\u51fa\u7d50\u679c\n// this closure is an Observable that emits three numbers\nnumbers   = Observable.from([1, 2, 3]);\n// this closure is an Observable that emits two numbers based on what number it is passed\nmultiples = { n -> Observable.from([ n*2, n*3 ]) };\n\nnumbers.flatMap(multiples).subscribe(\n  { println(it); },                          // onNext\n  { println(\"Error: \" + it.getMessage()); }, // onError\n  { println(\"Sequence complete\"); }          // onCompleted\n);\n\n2\n3\n4\n6\n6\n9\nSequence complete\n\n\nconcatMap\nhttp://reactivex.io/documentation/operators/flatmap.html#collapseRxGroovy\n\noutput: ordered Observables\n\u5f9e\u5716\u4e2d\u53ef\u4ee5\u770b\u5230\n\u8ddfflatMap\u662f\u76f8\u4f3c\u7684\n\u53ef\u4ee5\u5f9e\u4e00\u500bObservable\u5708\u5708\u8b8a\u70ba\u591a\u500bObservables\u83f1\u5f62\u8f38\u51fa\u4f46\u662f\u662f\u6709\u9806\u5e8f\u7684\n\u4f8b\u5982\u6b64\u5716\u5982\u679c\u57f7\u884c\u8207flatMap\u540c\u6a23\u7684action\n\u7da0\u8272\u83f1\u5f622\u5373\u4f7f\u8f38\u51fa\u8f03\u6162\u4ecd\u6703\u5148\u8f38\u51fa\u5f8c\u85cd\u8272\u83f1\u5f621\u624d\u6703\u8f38\u51fa\n\u5c31\u7b97action\u6709\u57f7\u884cSchedulers\u591a\u57f7\u884c\u5e8f\u4e5f\u6703\u8b8a\u70ba\u55ae\u57f7\u884c\u5e8f\u4f9d\u5e8f\u57f7\u884c\nRxJava Observable tranformation: concatMap() vs flatMap()\nList<Integer> numbers;\nExecutor jobExecutor;\n\nDataManager() {\n    this.numbers = new ArrayList<>(Arrays.asList(2, 3, 4, 5, 6, 7, 8, 9, 10));\n    this.jobExecutor = JobExecutor.getInstance();\n}\n\nObservable<Integer> squareOfAsync(int number) {\n    return Observable.just(number * number).subscribeOn(Schedulers.from(this.jobExecutor));\n}\n\ndataManager.numbers().flatMap(dataManager::squareOfAsync)\ndataManager.numbers().concatMap(dataManager::squareOfAsync)\n\u6bd4\u8f03\u7d50\u679c\u5982\u4e0b\n\n\n.Net\n\u5982\u679c\u662f.Net\u9663\u71df\u5c0d\u65bc\u547d\u540d\u611f\u5230\u56f0\u60d1\u7684\u8a71\n\u53ef\u4ee5\u53c3\u8003\u6bcf\u500bOperator\u88e1\u7684See Also\nIntroduction to Rx: xxx\n\u8b6c\u5982\nMap -> Select (Introduction to Rx: Select)\nFlatMap -> SelectMany (Introduction to Rx: SelectMany)\n\u53e6\u5916ToList Operator\n\u8207.Net ToList\u622a\u7136\u4e0d\u540c\nRx\u662f\u56de\u50b3\u4e00\u500bObservable\u7269\u4ef6\nhttp://reactivex.io/documentation/operators/to.html\n\n\u4f46.Net\u5247\u662f\u56de\u50b3\u53ef\u5217\u8209\u5167\u5bb9\u7684\u591a\u500b\u7269\u4ef6\n##map\n[http://reactivex.io/documentation/operators/map.html#collapseRxGroovy](http://reactivex.io/documentation/operators/map.html#collapseRxGroovy)\n<img width=\"640\" alt=\"map.png\" src=\"https://qiita-image-store.s3.amazonaws.com/0/84946/b6b1b4dd-c8dc-b18c-b9d4-e79d98c67c26.png\">\noutput: **T**\n\u5f9e\u5716\u4e2d\u53ef\u4ee5\u770b\u5230\n\u4f9d\u5e8f\u7531Observable\u5708\u5708\u57f7\u884caction\u5f8creturn T\u518d\u8b8a\u70baObservable\u83f1\u5f62\u8f38\u51fa\n\n```groovy\nnumbers = Observable.from([1, 2, 3, 4, 5]);\n\nnumbers.map({it * it}).subscribe(\n  { println(it); },                          // onNext\n  { println(\"Error: \" + it.getMessage()); }, // onError\n  { println(\"Sequence complete\"); }          // onCompleted\n);\n```\n```text\n1\n4\n9\n16\n25\nSequence complete\n```\n\n##flatMap\n[http://reactivex.io/documentation/operators/flatmap.html#collapseRxGroovy](http://reactivex.io/documentation/operators/flatmap.html#collapseRxGroovy)\n<img width=\"640\" alt=\"mergeMap.png\" src=\"https://qiita-image-store.s3.amazonaws.com/0/84946/86f81b0e-5ef6-0a5a-1daf-6971a3fa321a.png\">\noutput: **unordered Observables**\n\u5f9e\u5716\u4e2d\u53ef\u4ee5\u770b\u5230\nObservables\u5168\u90e8\u6524\u5e73\u4e00\u9f4a\u8f38\u5165\u57f7\u884caction\u5f8creturn Observables\n\u53ef\u4ee5\u5f9e**\u4e00\u500bObservable**\u5708\u5708\u8b8a\u70ba**\u591a\u500bObservables**\u83f1\u5f62\u8f38\u51fa\u4e14\u662f**\u6c92\u6709\u9806\u5e8f\u7684**\n\u4f8b\u5982\u6b64\u5716\u4e00\u500b\u5708\u5708Observable\u8b8a\u70ba\u5169\u500b\u83f1\u5f62Observables\n\u800c\u4e14\u7da0\u8272\u83f1\u5f622\u8f38\u51fa\u8f03\u6162\u6240\u4ee5\u85cd\u8272\u83f1\u5f621\u6703\u5148\u8f38\u51fa\n\u4f46\u9806\u5e8f\u554f\u984c\u662f\u56e0\u70baaction\u6709\u57f7\u884cSchedulers\u591a\u57f7\u884c\u5e8f\u6240\u5c0e\u81f4\n\u4ee5\u4e0bsample\u70ba\u4e00\u822c\u55ae\u57f7\u884c\u5e8f\u6240\u4ee5\u6703\u4f9d\u5e8f\u8f38\u51fa\u7d50\u679c\n\n```groovy\n// this closure is an Observable that emits three numbers\nnumbers   = Observable.from([1, 2, 3]);\n// this closure is an Observable that emits two numbers based on what number it is passed\nmultiples = { n -> Observable.from([ n*2, n*3 ]) };\n\nnumbers.flatMap(multiples).subscribe(\n  { println(it); },                          // onNext\n  { println(\"Error: \" + it.getMessage()); }, // onError\n  { println(\"Sequence complete\"); }          // onCompleted\n);\n```\n```text\n2\n3\n4\n6\n6\n9\nSequence complete\n```\n\n##concatMap\n[http://reactivex.io/documentation/operators/flatmap.html#collapseRxGroovy](http://reactivex.io/documentation/operators/flatmap.html#collapseRxGroovy)\n<img width=\"640\" alt=\"concatMap.png\" src=\"https://qiita-image-store.s3.amazonaws.com/0/84946/920c233c-241a-4218-7b6f-d013f26984d4.png\">\noutput: **ordered Observables**\n\u5f9e\u5716\u4e2d\u53ef\u4ee5\u770b\u5230\n\u8ddfflatMap\u662f\u76f8\u4f3c\u7684\n\u53ef\u4ee5\u5f9e**\u4e00\u500bObservable**\u5708\u5708\u8b8a\u70ba**\u591a\u500bObservables**\u83f1\u5f62\u8f38\u51fa\u4f46\u662f\u662f**\u6709\u9806\u5e8f\u7684**\n\u4f8b\u5982\u6b64\u5716\u5982\u679c\u57f7\u884c\u8207flatMap\u540c\u6a23\u7684action\n\u7da0\u8272\u83f1\u5f622\u5373\u4f7f\u8f38\u51fa\u8f03\u6162\u4ecd\u6703\u5148\u8f38\u51fa\u5f8c\u85cd\u8272\u83f1\u5f621\u624d\u6703\u8f38\u51fa\n\u5c31\u7b97action\u6709\u57f7\u884cSchedulers\u591a\u57f7\u884c\u5e8f\u4e5f\u6703\u8b8a\u70ba\u55ae\u57f7\u884c\u5e8f\u4f9d\u5e8f\u57f7\u884c\n\n[RxJava Observable tranformation: concatMap() vs flatMap()](http://fernandocejas.com/2015/01/11/rxjava-observable-tranformation-concatmap-vs-flatmap/)\n\n```groovy\nList<Integer> numbers;\nExecutor jobExecutor;\n \nDataManager() {\n    this.numbers = new ArrayList<>(Arrays.asList(2, 3, 4, 5, 6, 7, 8, 9, 10));\n    this.jobExecutor = JobExecutor.getInstance();\n}\n\nObservable<Integer> squareOfAsync(int number) {\n    return Observable.just(number * number).subscribeOn(Schedulers.from(this.jobExecutor));\n}\n```\n`dataManager.numbers().flatMap(dataManager::squareOfAsync)`\n`dataManager.numbers().concatMap(dataManager::squareOfAsync)`\n\u6bd4\u8f03\u7d50\u679c\u5982\u4e0b\n![final_results_concatMap-576x1024.png](https://qiita-image-store.s3.amazonaws.com/0/84946/a7002be2-140d-d9aa-0c37-3a300cc36db7.png)\n\n##.Net\n\u5982\u679c\u662f.Net\u9663\u71df\u5c0d\u65bc\u547d\u540d\u611f\u5230\u56f0\u60d1\u7684\u8a71\n\u53ef\u4ee5\u53c3\u8003\u6bcf\u500b[Operator](http://reactivex.io/documentation/operators.html)\u88e1\u7684See Also\nIntroduction to Rx: xxx\n\n\u8b6c\u5982\nMap -> Select (Introduction to Rx: Select)\nFlatMap -> SelectMany (Introduction to Rx: SelectMany)\n\n\u53e6\u5916ToList Operator\n\u8207.Net ToList\u622a\u7136\u4e0d\u540c\nRx\u662f\u56de\u50b3**\u4e00\u500bObservable**\u7269\u4ef6\n[http://reactivex.io/documentation/operators/to.html](http://reactivex.io/documentation/operators/to.html)\n<img width=\"640\" alt=\"to.c.png\" src=\"https://qiita-image-store.s3.amazonaws.com/0/84946/fb8771a2-3ea2-312a-c38a-22e3a5740793.png\">\n\n\u4f46.Net\u5247\u662f\u56de\u50b3\u53ef\u5217\u8209\u5167\u5bb9\u7684**\u591a\u500b\u7269\u4ef6**\n", "tags": ["ReactiveX", "Groovy"]}