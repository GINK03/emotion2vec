{"tags": ["FPGA", "SystemVerilog"], "context": " More than 1 year has passed since last update.\n\n\u306f\u3058\u3081\u306b\nAltera\u306eQsys\u3067\u30b5\u30af\u30c3\u3068\u30b5\u30d6\u30b7\u30b9\u30c6\u30e0(\u30e2\u30c7\u30eb\u304c\u3042\u308b\u306e\u3067\u5408\u6210\u4e0d\u53ef)\u3092\u4f5c\u3063\u3066\u3001DDR3 SDRAM\u30e2\u30c7\u30eb\u3092\u3064\u306a\u3044\u3067\u30b7\u30df\u30e5\u30ec\u30fc\u30b7\u30e7\u30f3\u3092\u3084\u3063\u3066\u307f\u307e\u3057\u305f\u3002\nNIOS II\u306e\u4ee3\u308f\u308a\u306bAvalon MM BFM\u3092\u4f7f\u7528\u3057\u3066\u307f\u305f\u306e\u3067\u3059\u304c\u3001\u3042\u307e\u308a\u4f7f\u308f\u308c\u3066\u3044\u306a\u3055\u305d\u3046\u3067\u60c5\u5831\u304c\u3042\u307e\u308a\u306a\u304f\u3001\u30e1\u30e2\u4ee3\u308f\u308a\u3067\u3059\u3002\n\nQsys\u3067\u30b5\u30d6\u30b7\u30b9\u30c6\u30e0\u4f5c\u6210\nDDR3\u30b3\u30f3\u30c8\u30ed\u30fc\u30e9\u4ee5\u5916\u306f\u30e2\u30c7\u30eb\u3067\u69cb\u6210\u3055\u308c\u3066\u3044\u307e\u3059\u3002\n\nDDR3\u30b3\u30f3\u30c8\u30ed\u30fc\u30e9\u306fPHY\u306fUniPHY\u3092\u4f7f\u7528\u3057\u3066\u3044\u307e\u3059\u3002UniPHY\u3060\u3068PLL\u3084DLL\u306e\u8abf\u6574\u304c\u96a0\u853d\u3055\u308c\u3001\u30ec\u30b8\u30b9\u30bf\u8a2d\u5b9a\u306f\u7279\u306b\u306a\u304f\u697d\u3067\u3059\u3002\n\u30d7\u30ea\u30bb\u30c3\u30c8\u306fMicron\u793e\u306e2Gb\u306ex16\u54c1\u3092\u4f7f\u7528\u3057\u307e\u3057\u305f\u3002\nDDR3\u30e1\u30e2\u30ea\u30d0\u30b9\u3070\u30c7\u30fc\u30bf\u5e45\u309216bit\u306b\u3057\u3066\u3044\u307e\u3059\u3002\nDDR3\u30b3\u30f3\u30c8\u30ed\u30fc\u30e9\u306f\u4f7f\u7528\u3067\u304d\u308b\u306e\u304c\u30cf\u30fc\u30d5\u30fb\u30ec\u30fc\u30c8\u30e2\u30fc\u30c9\u306e\u307f\u306a\u306e\u3067\u3001\u5185\u90e8\u306eAvalon\u30d0\u30b9\u306e\u30c7\u30fc\u30bf\u5e45\u306f64bit\u306b\u306a\u308a\u307e\u3059\u3002\nAvalon\u30d0\u30b9\u5074\u306f8\u30d0\u30fc\u30b9\u30c8\u306b\u306a\u308b\u3088\u3046\u306b\u8abf\u6574\u3057\u3066\u307f\u307e\u3057\u305f\u3002\n\nDDR3 SDRAM\u30e2\u30c7\u30eb\n\u30aa\u30fc\u30d7\u30f3\u30bd\u30fc\u30b9\u3067\u516c\u958b\u3055\u308c\u3066\u3044\u308bMicron\u793e\u306eVerilog\u30e2\u30c7\u30eb\u3092\u4f7f\u7528\u3057\u307e\u3059\u3002\n2Gb\u306ex16\u3001933MHz\u3092\u4f7f\u7528\u3059\u308b\u3068\u4eee\u5b9a\u3059\u308b\u3068\u3001den2048Mb, x16, sg107 \u3092define\u3055\u305b\u3066\u30b3\u30f3\u30d1\u30a4\u30eb\u3057\u307e\u3059\u3002\n\u30aa\u30d7\u30b7\u30e7\u30f3\u3068\u3057\u3066\u306f\u3053\u3093\u306a\u611f\u3058\u3067\u3057\u3087\u3046\u304b\u3002\n  +define+den2048Mb \\\n  +define+sg107 \\\n  +define+x16 \\\n  +incdir+$DDR3DIR/ddr3_model \\\n  $DDR3DIR/ddr3_model/ddr3.v \n\n\u300c$DDR3DIR\u300d\u306f\u30e2\u30c7\u30eb\u307e\u3067\u306e\u30d1\u30b9\u3067\u3059\u3002\n\u30e2\u30c7\u30eb\u306e\u4e2d\u8eab\u3092\u898b\u308b\u3068SystemVerilog\u306e\u30b7\u30f3\u30bf\u30c3\u30af\u30b9\u304c\u3061\u3087\u3053\u3061\u3087\u3053\u542b\u307e\u308c\u3066\u3044\u307e\u3059\u3002\n411\u884c\u76ee\u306e\u3053\u308c\u306f\u3061\u3087\u3063\u3068\u30a2\u30ec\u306a\u306e\u3067\u4fee\u6b63\u3057\u307e\u3057\u305f\u3002\n\n\u4fee\u6b63\u524d\n        string char;\n\n\n\n\u4fee\u6b63\u5f8c\n        string char0;\n\n\nMicron\u793e\u306eVerilog\u30e2\u30c7\u30eb\u306f\u3001DDR3\u30b3\u30f3\u30c8\u30ed\u30fc\u30e9\u306e\u8a2d\u5b9a\u304c\u304a\u304b\u3057\u3044\u3068\u30ad\u30e3\u30ea\u30d6\u30ec\u30fc\u30b7\u30e7\u30f3\u6bb5\u968e\u3067\u30a8\u30e9\u30fc\u3092\u51fa\u3057\u3066\u304f\u308c\u3066\u4fbf\u5229\u3067\u3059\u3002\n\n\u30c6\u30b9\u30c8\nQsys\u304b\u3089\u751f\u6210\u3057\u305fVerilog\u30b7\u30df\u30e5\u30ec\u30fc\u30b7\u30e7\u30f3\u7528\u30b3\u30fc\u30c9\u3068\u3001DDR3 SDRAM\u30e2\u30c7\u30eb\u3092\u3064\u306a\u3044\u3067\u3001\u30c6\u30b9\u30c8\u3092\u4f5c\u6210\u3057\u3066\u307f\u307e\u3057\u305f\u3002\n\ntb.sv\n`define BFM      dut.av_mst_model\n`define DDR3CON  dut.ddr3_0\n\nmodule tb();\n\n  import verbosity_pkg::*;\n  import avalon_mm_pkg::*;\n\n  localparam AV_ADDRESS_W     = 32;\n  localparam AV_DATA_W        = 64;\n  localparam AV_BURST_LENGTH  =  8;\n\n  wire        clk_clk;            //    clk.clk\n  wire        reset_reset_n;      //  reset.reset_n\n  wire [13:0] memory_mem_a;       // memory.mem_a\n  wire [2:0]  memory_mem_ba;      //       .mem_ba\n  wire [0:0]  memory_mem_ck;      //       .mem_ck\n  wire [0:0]  memory_mem_ck_n;    //       .mem_ck_n\n  wire [0:0]  memory_mem_cke;     //       .mem_cke\n  wire [0:0]  memory_mem_cs_n;    //       .mem_cs_n\n  wire [1:0]  memory_mem_dm;      //       .mem_dm\n  wire [0:0]  memory_mem_ras_n;   //       .mem_ras_n\n  wire [0:0]  memory_mem_cas_n;   //       .mem_cas_n\n  wire [0:0]  memory_mem_we_n;    //       .mem_we_n\n  wire        memory_mem_reset_n; //       .mem_reset_n\n  wire [15:0] memory_mem_dq;      //       .mem_dq\n  wire [1:0]  memory_mem_dqs;     //       .mem_dqs\n  wire [1:0]  memory_mem_dqs_n;   //       .mem_dqs_n\n  wire [0:0]  memory_mem_odt;     //       .mem_odt\n  wire        oct_rzqin;           //    oct.rzqin\n\n  wand        memory_mem_dm_w;\n  tri0        memory_mem_dm_0;\n\n  assign memory_mem_dm_0 = memory_mem_dm_w;\n  assign memory_mem_dm   = memory_mem_dm_0;\n\n  logic [AV_DATA_W-1 : 0] wdata [int] ;\n  logic [AV_DATA_W-1 : 0] rdata [int] ;\n\n  DDR3_SUBSYS dut(.*);\n\n  ddr3 u_ddr3_mem(\n    .rst_n(memory_mem_reset_n),\n    .ck(memory_mem_ck),\n    .ck_n(memory_mem_ck_n),\n    .cke(memory_mem_cke),\n    .cs_n(memory_mem_cs_n),\n    .ras_n(memory_mem_ras_n),\n    .cas_n(memory_mem_cas_n),\n    .we_n(memory_mem_we_n),\n    .dm_tdqs(memory_mem_dm),\n    .ba(memory_mem_ba),\n    .addr(memory_mem_a),\n    .dq(memory_mem_dq),\n    .dqs(memory_mem_dqs),\n    .dqs_n(memory_mem_dqs_n),\n    .tdqs_n(),\n    .odt(memory_mem_odt)\n  );\n\n  // ============================================================\n  // Tasks\n  // ============================================================\n\n  task data_init(output [AV_DATA_W-1:0] data [int]);\n    for(int i=0; i<AV_BURST_LENGTH; i++)\n      data[i] = {$random(), $random()};\n  endtask\n\n  task data_print([AV_DATA_W-1:0] data0 [int], [AV_DATA_W-1:0] data1 [int]);\n    for(int i=0; i<AV_BURST_LENGTH; i++)\n      $display(\"Data0 == 0x%16h : Data1 == 0x%16h\", data0[i], data1[i]);\n  endtask\n\n  task avalon_write ([AV_ADDRESS_W-1:0] addr, [AV_DATA_W-1:0]  data [int]);\n    // Construct the BFM request\n    `BFM.set_command_request(REQ_WRITE);\n    `BFM.set_command_idle(0, 0);\n    `BFM.set_command_init_latency(0);\n    `BFM.set_command_address(addr);\n    `BFM.set_command_byte_enable('1,0);\n    `BFM.set_command_burst_size(AV_BURST_LENGTH);\n    `BFM.set_command_burst_count(AV_BURST_LENGTH);\n\n    for(int i=0; i<AV_BURST_LENGTH; i++)\n      `BFM.set_command_data(data[i], i);\n\n    // Queue the command\n    `BFM.push_command();\n\n    // Wait until the transaction has completed\n    while (`BFM.get_response_queue_size() != 1)\n      @(posedge `BFM.clk);\n\n      // Dequeue the response and discard\n      `BFM.pop_response();\n  endtask\n\n  task avalon_read ([AV_ADDRESS_W-1:0] addr, output [AV_DATA_W-1:0]  data [int]);\n    // Construct the BFM request\n    `BFM.set_command_request(REQ_READ);\n    `BFM.set_command_idle(0, 0);\n    `BFM.set_command_init_latency(0);\n    `BFM.set_command_address(addr);\n    `BFM.set_command_byte_enable('1,0);\n    `BFM.set_command_data(0, 0);\n    `BFM.set_command_burst_size(AV_BURST_LENGTH);\n    `BFM.set_command_burst_count(AV_BURST_LENGTH);\n\n    // Queue the command\n    `BFM.push_command();\n\n    // Wait until the transaction has completed\n    while (`BFM.get_response_queue_size() != 1)\n      @(posedge `BFM.clk);\n\n    // Dequeue the response and return the data\n    `BFM.pop_response();\n\n    for(int i=0; i<AV_BURST_LENGTH; i++)\n      data[i] = `BFM.get_response_data(i);\n\n  endtask\n\n  // ============================================================\n  // Test\n  // ============================================================\n\n  initial begin\n    data_init(wdata);\n    wait(`DDR3CON.local_init_done);\n    avalon_write(32'h0000_0000, wdata);\n    avalon_read(32'h0000_0000, rdata);\n    data_print(wdata, rdata);\n  end\n\nendmodule\n\n\n\u30c6\u30b9\u30c8\u5185\u5bb9\u306f\u3001\u30e9\u30f3\u30c0\u30e0\u306a\u30c7\u30fc\u30bf\u3092Avalon\u30d0\u30b9\u5074\u304b\u30898\u30d0\u30fc\u30b9\u30c8\u3067\u30e9\u30a4\u30c8\u3057\u3066DDR3\u30e1\u30e2\u30ea\u30e2\u30c7\u30eb\u306b\u30c7\u30fc\u30bf\u3092\u683c\u7d0d\u3057\u3001\u305d\u306e\u5f8c\u3001\u30ea\u30fc\u30c9\u3057\u3066\u30c7\u30fc\u30bf\u3092\u8aad\u307f\u8fbc\u307f\u3001\u8868\u793a\u3057\u3066\u3044\u308b\u3060\u3051\u3067\u3059\u3002\nDDR3\u30b3\u30f3\u30c8\u30ed\u30fc\u30e9\u306fdm\u304c\u51fa\u529b\u3060\u3051\u306b\u5bfe\u3057\u3066\u3001DDR3\u30e1\u30e2\u30ea\u30e2\u30c7\u30eb\u306f\u53cc\u65b9\u5411\u306e\u305f\u3081\u3001wand\u4fe1\u53f7\u3092\u4f5c\u3063\u3066DDR3\u30e1\u30e2\u30ea\u30e2\u30c7\u30eb\u306e\u5165\u529b\u4fe1\u53f7\u306f0\u56fa\u5b9a\u3057\u3066\u3044\u307e\u3059\u3002\n\n\u7d50\u679c\nDDR3\u30b3\u30f3\u30c8\u30ed\u30fc\u30e9\u3068\u30e1\u30e2\u30ea\u306e\u30ad\u30e3\u30ea\u30d6\u30ec\u30fc\u30b7\u30e7\u30f3\u304c\u6210\u529f\u3057\u3001\u30ea\u30fc\u30c9\u30e9\u30a4\u30c8\u306e\u30c7\u30fc\u30bf\u304c\u4e00\u81f4\u3057\u3066\u3044\u308b\u306e\u3092\u78ba\u8a8d\u3057\u307e\u3057\u305f\u3002\n\n\u304a\u308f\u308a\u306b\n\u3059\u3067\u306b\u30dc\u30fc\u30c9\u304c\u3042\u3063\u3066\u3001\u305d\u3053\u306b\u8f09\u3063\u305fFPGA\u306b\u30c7\u30d7\u30ed\u30a4\u3059\u308b\u3060\u3051\u306a\u3089\u3053\u3053\u307e\u3067\u3084\u308b\u5fc5\u8981\u306f\u306a\u3044\u3068\u601d\u3044\u307e\u3059\u3002\n\u3057\u304b\u3057\u30ab\u30b9\u30bf\u30e0\u30dc\u30fc\u30c9\u3092\u4f5c\u6210\u3057\u3066\u30dc\u30fc\u30c9\u62c5\u5f53\u3068\u9023\u643a\u3092\u53d6\u308a\u306a\u304c\u3089\u3084\u308b\u5834\u5408\u3001\u30ed\u30b8\u30c3\u30af\u5074\u3082IP\u3092\u4fe1\u7528\u3057\u3059\u304e\u308b\u3053\u3068\u306a\u304f\u30c6\u30b9\u30c8\u74b0\u5883\u4f5c\u3089\u306a\u304f\u3066\u306f\u3068\u601d\u3044\u4f5c\u6210\u3057\u3066\u307f\u307e\u3057\u305f\u3002\nBFM\u4ee3\u308f\u308a\u306bNIOS II\u3068\u304b\u4f7f\u7528\u3057\u305f\u65b9\u304c\u697d\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u3002\n##\u306f\u3058\u3081\u306b\nAltera\u306eQsys\u3067\u30b5\u30af\u30c3\u3068\u30b5\u30d6\u30b7\u30b9\u30c6\u30e0(\u30e2\u30c7\u30eb\u304c\u3042\u308b\u306e\u3067\u5408\u6210\u4e0d\u53ef)\u3092\u4f5c\u3063\u3066\u3001DDR3 SDRAM\u30e2\u30c7\u30eb\u3092\u3064\u306a\u3044\u3067\u30b7\u30df\u30e5\u30ec\u30fc\u30b7\u30e7\u30f3\u3092\u3084\u3063\u3066\u307f\u307e\u3057\u305f\u3002\nNIOS II\u306e\u4ee3\u308f\u308a\u306bAvalon MM BFM\u3092\u4f7f\u7528\u3057\u3066\u307f\u305f\u306e\u3067\u3059\u304c\u3001\u3042\u307e\u308a\u4f7f\u308f\u308c\u3066\u3044\u306a\u3055\u305d\u3046\u3067\u60c5\u5831\u304c\u3042\u307e\u308a\u306a\u304f\u3001\u30e1\u30e2\u4ee3\u308f\u308a\u3067\u3059\u3002\n\n##Qsys\u3067\u30b5\u30d6\u30b7\u30b9\u30c6\u30e0\u4f5c\u6210\nDDR3\u30b3\u30f3\u30c8\u30ed\u30fc\u30e9\u4ee5\u5916\u306f\u30e2\u30c7\u30eb\u3067\u69cb\u6210\u3055\u308c\u3066\u3044\u307e\u3059\u3002\n\n![qsys.png](https://qiita-image-store.s3.amazonaws.com/0/32925/3071ec7b-b9c1-d661-6b2c-cb4120f0deed.png)\n\nDDR3\u30b3\u30f3\u30c8\u30ed\u30fc\u30e9\u306fPHY\u306fUniPHY\u3092\u4f7f\u7528\u3057\u3066\u3044\u307e\u3059\u3002UniPHY\u3060\u3068PLL\u3084DLL\u306e\u8abf\u6574\u304c\u96a0\u853d\u3055\u308c\u3001\u30ec\u30b8\u30b9\u30bf\u8a2d\u5b9a\u306f\u7279\u306b\u306a\u304f\u697d\u3067\u3059\u3002\n\u30d7\u30ea\u30bb\u30c3\u30c8\u306fMicron\u793e\u306e2Gb\u306ex16\u54c1\u3092\u4f7f\u7528\u3057\u307e\u3057\u305f\u3002\n\nDDR3\u30e1\u30e2\u30ea\u30d0\u30b9\u3070\u30c7\u30fc\u30bf\u5e45\u309216bit\u306b\u3057\u3066\u3044\u307e\u3059\u3002\nDDR3\u30b3\u30f3\u30c8\u30ed\u30fc\u30e9\u306f\u4f7f\u7528\u3067\u304d\u308b\u306e\u304c\u30cf\u30fc\u30d5\u30fb\u30ec\u30fc\u30c8\u30e2\u30fc\u30c9\u306e\u307f\u306a\u306e\u3067\u3001\u5185\u90e8\u306eAvalon\u30d0\u30b9\u306e\u30c7\u30fc\u30bf\u5e45\u306f64bit\u306b\u306a\u308a\u307e\u3059\u3002\n\nAvalon\u30d0\u30b9\u5074\u306f8\u30d0\u30fc\u30b9\u30c8\u306b\u306a\u308b\u3088\u3046\u306b\u8abf\u6574\u3057\u3066\u307f\u307e\u3057\u305f\u3002\n\n##DDR3 SDRAM\u30e2\u30c7\u30eb\n\u30aa\u30fc\u30d7\u30f3\u30bd\u30fc\u30b9\u3067\u516c\u958b\u3055\u308c\u3066\u3044\u308b[Micron\u793e\u306eVerilog\u30e2\u30c7\u30eb](http://www.micron.com/-/media/documents/products/sim%20model/dram/ddr3/ddr3%20sdram%20verilog%20model.zip)\u3092\u4f7f\u7528\u3057\u307e\u3059\u3002\n2Gb\u306ex16\u3001933MHz\u3092\u4f7f\u7528\u3059\u308b\u3068\u4eee\u5b9a\u3059\u308b\u3068\u3001den2048Mb, x16, sg107 \u3092define\u3055\u305b\u3066\u30b3\u30f3\u30d1\u30a4\u30eb\u3057\u307e\u3059\u3002\n\u30aa\u30d7\u30b7\u30e7\u30f3\u3068\u3057\u3066\u306f\u3053\u3093\u306a\u611f\u3058\u3067\u3057\u3087\u3046\u304b\u3002\n\n```bash\n  +define+den2048Mb \\\n  +define+sg107 \\\n  +define+x16 \\\n  +incdir+$DDR3DIR/ddr3_model \\\n  $DDR3DIR/ddr3_model/ddr3.v \n```\n\n\u300c$DDR3DIR\u300d\u306f\u30e2\u30c7\u30eb\u307e\u3067\u306e\u30d1\u30b9\u3067\u3059\u3002\n\n\u30e2\u30c7\u30eb\u306e\u4e2d\u8eab\u3092\u898b\u308b\u3068SystemVerilog\u306e\u30b7\u30f3\u30bf\u30c3\u30af\u30b9\u304c\u3061\u3087\u3053\u3061\u3087\u3053\u542b\u307e\u308c\u3066\u3044\u307e\u3059\u3002\n411\u884c\u76ee\u306e\u3053\u308c\u306f\u3061\u3087\u3063\u3068\u30a2\u30ec\u306a\u306e\u3067\u4fee\u6b63\u3057\u307e\u3057\u305f\u3002\n\n```sv:\u4fee\u6b63\u524d\n        string char;\n```\n\n```sv:\u4fee\u6b63\u5f8c\n        string char0;\n```\n\nMicron\u793e\u306eVerilog\u30e2\u30c7\u30eb\u306f\u3001DDR3\u30b3\u30f3\u30c8\u30ed\u30fc\u30e9\u306e\u8a2d\u5b9a\u304c\u304a\u304b\u3057\u3044\u3068\u30ad\u30e3\u30ea\u30d6\u30ec\u30fc\u30b7\u30e7\u30f3\u6bb5\u968e\u3067\u30a8\u30e9\u30fc\u3092\u51fa\u3057\u3066\u304f\u308c\u3066\u4fbf\u5229\u3067\u3059\u3002\n\n##\u30c6\u30b9\u30c8\nQsys\u304b\u3089\u751f\u6210\u3057\u305fVerilog\u30b7\u30df\u30e5\u30ec\u30fc\u30b7\u30e7\u30f3\u7528\u30b3\u30fc\u30c9\u3068\u3001DDR3 SDRAM\u30e2\u30c7\u30eb\u3092\u3064\u306a\u3044\u3067\u3001\u30c6\u30b9\u30c8\u3092\u4f5c\u6210\u3057\u3066\u307f\u307e\u3057\u305f\u3002\n\n```sv:tb.sv\n`define BFM      dut.av_mst_model\n`define DDR3CON  dut.ddr3_0\n\nmodule tb();\n\n  import verbosity_pkg::*;\n  import avalon_mm_pkg::*;\n\n  localparam AV_ADDRESS_W     = 32;\n  localparam AV_DATA_W        = 64;\n  localparam AV_BURST_LENGTH  =  8;\n\n  wire        clk_clk;            //    clk.clk\n  wire        reset_reset_n;      //  reset.reset_n\n  wire [13:0] memory_mem_a;       // memory.mem_a\n  wire [2:0]  memory_mem_ba;      //       .mem_ba\n  wire [0:0]  memory_mem_ck;      //       .mem_ck\n  wire [0:0]  memory_mem_ck_n;    //       .mem_ck_n\n  wire [0:0]  memory_mem_cke;     //       .mem_cke\n  wire [0:0]  memory_mem_cs_n;    //       .mem_cs_n\n  wire [1:0]  memory_mem_dm;      //       .mem_dm\n  wire [0:0]  memory_mem_ras_n;   //       .mem_ras_n\n  wire [0:0]  memory_mem_cas_n;   //       .mem_cas_n\n  wire [0:0]  memory_mem_we_n;    //       .mem_we_n\n  wire        memory_mem_reset_n; //       .mem_reset_n\n  wire [15:0] memory_mem_dq;      //       .mem_dq\n  wire [1:0]  memory_mem_dqs;     //       .mem_dqs\n  wire [1:0]  memory_mem_dqs_n;   //       .mem_dqs_n\n  wire [0:0]  memory_mem_odt;     //       .mem_odt\n  wire        oct_rzqin;           //    oct.rzqin\n\n  wand        memory_mem_dm_w;\n  tri0        memory_mem_dm_0;\n\n  assign memory_mem_dm_0 = memory_mem_dm_w;\n  assign memory_mem_dm   = memory_mem_dm_0;\n\n  logic [AV_DATA_W-1 : 0] wdata [int] ;\n  logic [AV_DATA_W-1 : 0] rdata [int] ;\n\n  DDR3_SUBSYS dut(.*);\n\n  ddr3 u_ddr3_mem(\n    .rst_n(memory_mem_reset_n),\n    .ck(memory_mem_ck),\n    .ck_n(memory_mem_ck_n),\n    .cke(memory_mem_cke),\n    .cs_n(memory_mem_cs_n),\n    .ras_n(memory_mem_ras_n),\n    .cas_n(memory_mem_cas_n),\n    .we_n(memory_mem_we_n),\n    .dm_tdqs(memory_mem_dm),\n    .ba(memory_mem_ba),\n    .addr(memory_mem_a),\n    .dq(memory_mem_dq),\n    .dqs(memory_mem_dqs),\n    .dqs_n(memory_mem_dqs_n),\n    .tdqs_n(),\n    .odt(memory_mem_odt)\n  );\n\n  // ============================================================\n  // Tasks\n  // ============================================================\n\n  task data_init(output [AV_DATA_W-1:0] data [int]);\n    for(int i=0; i<AV_BURST_LENGTH; i++)\n      data[i] = {$random(), $random()};\n  endtask\n\n  task data_print([AV_DATA_W-1:0] data0 [int], [AV_DATA_W-1:0] data1 [int]);\n    for(int i=0; i<AV_BURST_LENGTH; i++)\n      $display(\"Data0 == 0x%16h : Data1 == 0x%16h\", data0[i], data1[i]);\n  endtask\n\n  task avalon_write ([AV_ADDRESS_W-1:0] addr, [AV_DATA_W-1:0]  data [int]);\n    // Construct the BFM request\n    `BFM.set_command_request(REQ_WRITE);\n    `BFM.set_command_idle(0, 0);\n    `BFM.set_command_init_latency(0);\n    `BFM.set_command_address(addr);\n    `BFM.set_command_byte_enable('1,0);\n    `BFM.set_command_burst_size(AV_BURST_LENGTH);\n    `BFM.set_command_burst_count(AV_BURST_LENGTH);\n\n    for(int i=0; i<AV_BURST_LENGTH; i++)\n      `BFM.set_command_data(data[i], i);\n\n    // Queue the command\n    `BFM.push_command();\n\n    // Wait until the transaction has completed\n    while (`BFM.get_response_queue_size() != 1)\n      @(posedge `BFM.clk);\n\n      // Dequeue the response and discard\n      `BFM.pop_response();\n  endtask\n\n  task avalon_read ([AV_ADDRESS_W-1:0] addr, output [AV_DATA_W-1:0]  data [int]);\n    // Construct the BFM request\n    `BFM.set_command_request(REQ_READ);\n    `BFM.set_command_idle(0, 0);\n    `BFM.set_command_init_latency(0);\n    `BFM.set_command_address(addr);\n    `BFM.set_command_byte_enable('1,0);\n    `BFM.set_command_data(0, 0);\n    `BFM.set_command_burst_size(AV_BURST_LENGTH);\n    `BFM.set_command_burst_count(AV_BURST_LENGTH);\n\n    // Queue the command\n    `BFM.push_command();\n\n    // Wait until the transaction has completed\n    while (`BFM.get_response_queue_size() != 1)\n      @(posedge `BFM.clk);\n\n    // Dequeue the response and return the data\n    `BFM.pop_response();\n\n    for(int i=0; i<AV_BURST_LENGTH; i++)\n      data[i] = `BFM.get_response_data(i);\n\n  endtask\n\n  // ============================================================\n  // Test\n  // ============================================================\n\n  initial begin\n    data_init(wdata);\n    wait(`DDR3CON.local_init_done);\n    avalon_write(32'h0000_0000, wdata);\n    avalon_read(32'h0000_0000, rdata);\n    data_print(wdata, rdata);\n  end\n\nendmodule\n```\n\n\u30c6\u30b9\u30c8\u5185\u5bb9\u306f\u3001\u30e9\u30f3\u30c0\u30e0\u306a\u30c7\u30fc\u30bf\u3092Avalon\u30d0\u30b9\u5074\u304b\u30898\u30d0\u30fc\u30b9\u30c8\u3067\u30e9\u30a4\u30c8\u3057\u3066DDR3\u30e1\u30e2\u30ea\u30e2\u30c7\u30eb\u306b\u30c7\u30fc\u30bf\u3092\u683c\u7d0d\u3057\u3001\u305d\u306e\u5f8c\u3001\u30ea\u30fc\u30c9\u3057\u3066\u30c7\u30fc\u30bf\u3092\u8aad\u307f\u8fbc\u307f\u3001\u8868\u793a\u3057\u3066\u3044\u308b\u3060\u3051\u3067\u3059\u3002\n\nDDR3\u30b3\u30f3\u30c8\u30ed\u30fc\u30e9\u306fdm\u304c\u51fa\u529b\u3060\u3051\u306b\u5bfe\u3057\u3066\u3001DDR3\u30e1\u30e2\u30ea\u30e2\u30c7\u30eb\u306f\u53cc\u65b9\u5411\u306e\u305f\u3081\u3001wand\u4fe1\u53f7\u3092\u4f5c\u3063\u3066DDR3\u30e1\u30e2\u30ea\u30e2\u30c7\u30eb\u306e\u5165\u529b\u4fe1\u53f7\u306f0\u56fa\u5b9a\u3057\u3066\u3044\u307e\u3059\u3002\n\n###\u7d50\u679c\nDDR3\u30b3\u30f3\u30c8\u30ed\u30fc\u30e9\u3068\u30e1\u30e2\u30ea\u306e\u30ad\u30e3\u30ea\u30d6\u30ec\u30fc\u30b7\u30e7\u30f3\u304c\u6210\u529f\u3057\u3001\u30ea\u30fc\u30c9\u30e9\u30a4\u30c8\u306e\u30c7\u30fc\u30bf\u304c\u4e00\u81f4\u3057\u3066\u3044\u308b\u306e\u3092\u78ba\u8a8d\u3057\u307e\u3057\u305f\u3002\n\n###\u304a\u308f\u308a\u306b\n\u3059\u3067\u306b\u30dc\u30fc\u30c9\u304c\u3042\u3063\u3066\u3001\u305d\u3053\u306b\u8f09\u3063\u305fFPGA\u306b\u30c7\u30d7\u30ed\u30a4\u3059\u308b\u3060\u3051\u306a\u3089\u3053\u3053\u307e\u3067\u3084\u308b\u5fc5\u8981\u306f\u306a\u3044\u3068\u601d\u3044\u307e\u3059\u3002\n\u3057\u304b\u3057\u30ab\u30b9\u30bf\u30e0\u30dc\u30fc\u30c9\u3092\u4f5c\u6210\u3057\u3066\u30dc\u30fc\u30c9\u62c5\u5f53\u3068\u9023\u643a\u3092\u53d6\u308a\u306a\u304c\u3089\u3084\u308b\u5834\u5408\u3001\u30ed\u30b8\u30c3\u30af\u5074\u3082IP\u3092\u4fe1\u7528\u3057\u3059\u304e\u308b\u3053\u3068\u306a\u304f\u30c6\u30b9\u30c8\u74b0\u5883\u4f5c\u3089\u306a\u304f\u3066\u306f\u3068\u601d\u3044\u4f5c\u6210\u3057\u3066\u307f\u307e\u3057\u305f\u3002\nBFM\u4ee3\u308f\u308a\u306bNIOS II\u3068\u304b\u4f7f\u7528\u3057\u305f\u65b9\u304c\u697d\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u3002\n"}