{"context": " More than 1 year has passed since last update.$ cd /Users/myname/Documents/command_line_apps_in_ruby_demo\n\n\napp.rb\nrequire \"thor\"\n\nclass App < Thor\n  desc \"hello WORD\", \"Prints 'Hello WORD' to the screen.\"\n  def hello word\n    puts \"Hello #{word}\"\n  end\n\n  desc \"list_recipes [KEYWORD] [OPTIONS]\", \"List all recipes. If a keyword is given, it filters the list based off it.\"\n  option :format\n  def list_recipes keyword=nil\n    # puts options[:format]\n    recipes = [\n      {\n        title: \"Ratatouille\",\n        cooking_time: \"60 min\",\n        ingredients:  %w(potatoes carrots peppers onions zucchini tomatoes)\n      },\n      {\n        title: \"Mac & Cheese\",\n        cooking_time: \"20 min\",\n        ingredients: %w(macarroni cheese mustard milk)\n      },\n      {\n        title: \"Caesar Salad\",\n        cooking_time: \"10 min\",\n        ingredients:  %w(chicken lettuce croutons eggs)\n      }\n    ]\n\n  recipes_to_be_listed = if keyword.nil? then recipes\n                         else recipes.select { |recipe| recipe[:title].downcase.include? keyword.downcase}\n                         end\n\n    recipes_to_be_listed.each do | recipe |\n      puts \"-------------\"\n      puts \"Recipe: #{recipe[:title]}\"\n      puts \"It takes: #{recipe[:cooking_time]} to cook.\"\n      puts \"The ingredients are: #{recipe[:ingredients].join(\", \")}\"\n      puts \"\"\n    end\n  end     \nend\n\nApp.start ARGV\n# ARGV is for options, arguments, subcommand to be parsed in app.\n\n\ndesc will be used when you type ruby app.rb to describe the method.\nTo find out a recipes which name includes \"oui\" and print out format option to test it if it picks up the format or not.\n$ ruby app.rb list_recipes oui --format sometext\n\n\nAdding options and arguments\n\napp.rb\nrequire \"thor\"\n\nclass App < Thor\n  desc \"hello WORD\", \"Prints 'Hello WORD' to the screen.\"\n  def hello word\n    puts \"Hello #{word}\"\n  end\n\n  desc \"list_recipes [KEYWORD] [OPTIONS]\", \"List all recipes. If a keyword is given, it filters the list based off it.\"\n  option :format\n  option :show_time, type: :boolean, default: true #--show-time --no-show-time\n  def list_recipes keyword=nil\n    recipes = [\n      {\n        title: \"Ratatouille\",\n        cooking_time: \"60 min\",\n        ingredients:  %w(potatoes carrots peppers onions zucchini tomatoes)\n      },\n      {\n        title: \"Mac & Cheese\",\n        cooking_time: \"20 min\",\n        ingredients: %w(macarroni cheese mustard milk)\n      },\n      {\n        title: \"Caesar Salad\",\n        cooking_time: \"10 min\",\n        ingredients:  %w(chicken lettuce croutons eggs)\n      }\n    ]\n\n    recipes_to_be_listed = if keyword.nil? then recipes\n                         else recipes.select { |recipe| recipe[:title].downcase.include? keyword.downcase}\n                         end\n\n    recipes_to_be_listed.each do | recipe |\n      if options[:format].nil?\n        print_default recipe\n      else options[:format] == \"oneline\"\n        print_oneline recipe\n      end\n\n    end\n  end     \n\n  private\n\n  def print_default recipe\n    puts \"-------------\"\n    puts \"Recipe: #{recipe[:title]}\"\n    puts \"It takes: #{recipe[:cooking_time]} to cook.\"\n    puts \"The ingredients are: #{recipe[:ingredients].join(\", \")}\"\n    puts \"\"\n  end\n\n  def print_oneline recipe\n    if options[:show_time]\n      time = \"(#{recipe[:cooking_time]})\"\n    else\n      time = \"\"\n    end\n\n    puts %Q{#{recipe[:title]} #{time}}\n  end\n\nend\n\nApp.start ARGV\n# ARGV is for options, arguments, subcommand to be parsed in app.\n\n\n\noption :show_time in code and --show-time in command line. Thor is cleaver enough to understand no in --no-show-time.\nTest this with the followings.\n# 1.\n$ ruby app.rb list_recipes --format oneline\n# or \n$ ruby app.rb list_recipes --format \"oneline\"\n\n# 2.\n$ ruby app.rb list_recipes --format=\"oneline\"\n\n# 3.\n$ ruby app.rb list_recipes --format=\"oneline\" --no-show-time\n\noption :show_time, type: :boolean, default: true #--show-time --no-show-time\nIf there is no default: true, the default is false. Thor is clever enough to recognize --show-time as true and --no-show-time as false.\nIn option you use \"-\" like --show-time, but in method use under-bar, options[:show_time].\nIf you add required true, like option: format, required: true, then you are required the option.\n\nSubcommands\n\nAdding recipes add method\nExamples are \"git remote add\", \"git remote list\", etc.\nEvery Thor application can be hooked inside another application.\nsubcommand <name of command>, <name of class to hook>. This can be used as app.rb recipes add. The add options will be defined as Thor options, not arguments. Arguments are explicit in the form of options. Rather than app.rb recipes add title time description, it is better to be app.rb recipes add --title=\"\" --time=\"\" --description=\"\"\n\napp2.rb\nrequire \"thor\"\n\nRECIPES = [\n      {\n        title: \"Ratatouille\",\n        cooking_time: \"60 min\",\n        ingredients:  %w(potatoes carrots peppers onions zucchini tomatoes)\n      },\n      {\n        title: \"Mac & Cheese\",\n        cooking_time: \"20 min\",\n        ingredients: %w(macarroni cheese mustard milk)\n      },\n      {\n        title: \"Caesar Salad\",\n        cooking_time: \"10 min\",\n        ingredients:  %w(chicken lettuce croutons eggs)\n      }\n    ]\n\nclass Recipes < Thor\n  desc \"add --title --cooking-time --description\", \"Adds a new recipe.\"\n  option :title, required: true\n  option :cooking_time, required: true\n  option :description, required: true\n\n  def add # app.rb recipes add --title=\"\" --cooking-time=\"\" --description=\"\"\n    recipe = {\n      title: options[:title],\n      cooking_time: options[:cooking_time],\n      description: options[:description]\n    }\n\n    RECIPES << recipe\n\n    RECIPES.each do |recipe|\n      puts recipe[:title]\n    end\n  end\nend\n\nclass App < Thor\n  desc \"hello WORD\", \"Prints 'Hello WORD' to the screen.\"\n  def hello word\n    puts \"Hello #{word}\"\n  end\n\n  desc \"recipes\", \"Manages recipes\"\n  subcommand \"recipes\", Recipes # app.rb recipes add \n\n  desc \"list_recipes [KEYWORD] [OPTIONS]\", \"List all recipes. If a keyword is given, it filters the list based off it.\"\n  option :format\n  option :show_time, type: :boolean, default: true #--show-time --no-show-time\n  def list_recipes keyword=nil\n    recipes = RECIPES\n    recipes_to_be_listed = if keyword.nil? then recipes\n                         else recipes.select { |recipe| recipe[:title].downcase.include? keyword.downcase}\n                         end\n\n    recipes_to_be_listed.each do | recipe |\n      if options[:format].nil?\n        print_default recipe\n      else options[:format] == \"oneline\"\n        print_oneline recipe\n      end\n\n    end\n  end   \n\n  private\n\n  def print_default recipe\n    puts \"-------------\"\n    puts \"Recipe: #{recipe[:title]}\"\n    puts \"It takes: #{recipe[:cooking_time]} to cook.\"\n    puts \"The ingredients are: #{recipe[:ingredients].join(\", \")}\"\n    puts \"\"\n  end\n\n  def print_oneline recipe\n    if options[:show_time]\n      time = \"(#{recipe[:cooking_time]})\"\n    else \n      time = \"\"\n    end\n\n    puts %Q{#{recipe[:title]} #{time}}\n  end\n\nend\n\nApp.start ARGV\n# ARGV is for options, arguments, subcommand to be parsed in app.\n\n\n\nTest it.\n# 1. \n$ ruby app2.rb recipes add # this will give an error\n\n# 2. \n$ ruby app2.rb recipes add --title=\"Steak\" --cooking-time=\"10 min\" --description=\"Good ol' steak\"\n\n\nAdding recipes list\n\napp3.rb\nrequire \"thor\"\n\nRECIPES = [\n      {\n        title: \"Ratatouille\",\n        cooking_time: \"60 min\",\n        ingredients:  %w(potatoes carrots peppers onions zucchini tomatoes)\n      },\n      {\n        title: \"Mac & Cheese\",\n        cooking_time: \"20 min\",\n        ingredients: %w(macarroni cheese mustard milk)\n      },\n      {\n        title: \"Caesar Salad\",\n        cooking_time: \"10 min\",\n        ingredients:  %w(chicken lettuce croutons eggs)\n      }\n    ]\n\nclass Recipes < Thor\n  desc \"add --title --cooking-time --description\", \"Adds a new recipe.\"\n  option :title, required: true\n  option :cooking_time, required: true\n  option :description, required: true\n\n  def add # app.rb recipes add --title=\"\" --cooking-time=\"\" --description=\"\"\n    recipe = {\n      title: options[:title],\n      cooking_time: options[:cooking_time],\n      description: options[:description]\n    }\n\n    RECIPES << recipe\n\n    RECIPES.each do |recipe|\n      puts recipe[:title]\n    end\n  end\n\n  desc \"list [KEYWORD] [OPTIONS]\", \"List all recipes. If a keyword is given, it filters the list based off it.\"\n  option :format\n  option :show_time, type: :boolean, default: true #--show-time --no-show-time\n\n  def list keyword=nil\n    recipes = RECIPES\n    recipes_to_be_listed = if keyword.nil? then recipes\n                         else recipes.select { |recipe| recipe[:title].downcase.include? keyword.downcase}\n                         end\n\n    recipes_to_be_listed.each do | recipe |\n      if options[:format].nil?\n        print_default recipe\n      else options[:format] == \"oneline\"\n        print_oneline recipe\n      end\n\n    end\n  end   \n\n  private\n\n  def print_default recipe\n    puts \"-------------\"\n    puts \"Recipe: #{recipe[:title]}\"\n    puts \"It takes: #{recipe[:cooking_time]} to cook.\"\n    puts \"The ingredients are: #{recipe[:ingredients].join(\", \")}\"\n    puts \"\"\n  end\n\n  def print_oneline recipe\n    if options[:show_time]\n      time = \"(#{recipe[:cooking_time]})\"\n    else \n      time = \"\"\n    end\n\n    puts %Q{#{recipe[:title]} #{time}}\n  end\nend\n\nclass App < Thor\n  desc \"hello WORD\", \"Prints 'Hello WORD' to the screen.\"\n  def hello word\n    puts \"Hello #{word}\"\n  end\n\n  desc \"recipes\", \"Manages recipes\"\n  subcommand \"recipes\", Recipes # app.rb recipes add \n\n\nend\n\nApp.start ARGV\n# ARGV is for options, arguments, subcommand to be parsed in app.\n\n\n\nTest it.\n# 1. \n$ ruby app3.rb recipes list\n\n# 2. This will show help message for recipes.\n$ ruby app3.rb recipes \n\n\nThor will automatically insert options, so change,\ndesc \"add --title --cooking-time --description\", \"Adds a new recipe.\"\nto\ndesc \"add\", \"Adds a new recipe.\"\nAdding alias for options. This allow to type -t rather than --title etc. You can use only one letter after -, like, -t, -c or -d.\n- is mandatory.\n\napp4.rb\n  option :title, required: true, aliases: \"-t\"\n  option :cooking_time, required: true, aliases: \"-c\"\n  option :description, required: true, aliases: \"-d\"\n\n\nTest it. \n# 1. To display help\n$ ruby app4.rb recipes\n\n# 2.\n$ ruby app4.rb recipes add -c=\"10 min\" -t \"Steak\" -d \"Good ol' steak.\"\n\n\nGLI\nAims for a higher standard.\nBetter documentation, better testing, better dependency management.\nInstall gem gli\n$ gem install gli\n# Initialize with name of app and methods you want.\n$ gli init recipes list add\n\nswitch in GLI is the same as boolean flag in Thor.\n\nbin/recipes.rb\n# In Thor\noption :s, type :boolean\n# In GLI\nswitch [:s,:switch]\n\n# flag in GLI is the same as option in Thor without using boolean type.\n\n\n\nTO BE CONTINUE\n\n~~~ terminal\n$ cd /Users/myname/Documents/command_line_apps_in_ruby_demo\n~~~\n\n~~~ app.rb\nrequire \"thor\"\n\nclass App < Thor\n  desc \"hello WORD\", \"Prints 'Hello WORD' to the screen.\"\n  def hello word\n    puts \"Hello #{word}\"\n  end\n\n  desc \"list_recipes [KEYWORD] [OPTIONS]\", \"List all recipes. If a keyword is given, it filters the list based off it.\"\n  option :format\n  def list_recipes keyword=nil\n    # puts options[:format]\n    recipes = [\n      {\n        title: \"Ratatouille\",\n        cooking_time: \"60 min\",\n        ingredients:  %w(potatoes carrots peppers onions zucchini tomatoes)\n      },\n      {\n        title: \"Mac & Cheese\",\n        cooking_time: \"20 min\",\n        ingredients: %w(macarroni cheese mustard milk)\n      },\n      {\n        title: \"Caesar Salad\",\n        cooking_time: \"10 min\",\n        ingredients:  %w(chicken lettuce croutons eggs)\n      }\n    ]\n\n  recipes_to_be_listed = if keyword.nil? then recipes\n                         else recipes.select { |recipe| recipe[:title].downcase.include? keyword.downcase}\n                         end\n\n    recipes_to_be_listed.each do | recipe |\n      puts \"-------------\"\n      puts \"Recipe: #{recipe[:title]}\"\n      puts \"It takes: #{recipe[:cooking_time]} to cook.\"\n      puts \"The ingredients are: #{recipe[:ingredients].join(\", \")}\"\n      puts \"\"\n    end\n  end\t  \nend\n\nApp.start ARGV\n# ARGV is for options, arguments, subcommand to be parsed in app.\n~~~\n\ndesc will be used when you type ruby app.rb to describe the method.\n\nTo find out a recipes which name includes \"oui\" and print out format option to test it if it picks up the format or not.\n\n~~~ terminal\n$ ruby app.rb list_recipes oui --format sometext\n~~~\n\n\n## Adding options and arguments\n\n~~~app.rb\nrequire \"thor\"\n\nclass App < Thor\n  desc \"hello WORD\", \"Prints 'Hello WORD' to the screen.\"\n  def hello word\n    puts \"Hello #{word}\"\n  end\n\n  desc \"list_recipes [KEYWORD] [OPTIONS]\", \"List all recipes. If a keyword is given, it filters the list based off it.\"\n  option :format\n  option :show_time, type: :boolean, default: true #--show-time --no-show-time\n  def list_recipes keyword=nil\n    recipes = [\n      {\n        title: \"Ratatouille\",\n        cooking_time: \"60 min\",\n        ingredients:  %w(potatoes carrots peppers onions zucchini tomatoes)\n      },\n      {\n        title: \"Mac & Cheese\",\n        cooking_time: \"20 min\",\n        ingredients: %w(macarroni cheese mustard milk)\n      },\n      {\n        title: \"Caesar Salad\",\n        cooking_time: \"10 min\",\n        ingredients:  %w(chicken lettuce croutons eggs)\n      }\n    ]\n\n    recipes_to_be_listed = if keyword.nil? then recipes\n                         else recipes.select { |recipe| recipe[:title].downcase.include? keyword.downcase}\n                         end\n\n    recipes_to_be_listed.each do | recipe |\n      if options[:format].nil?\n        print_default recipe\n      else options[:format] == \"oneline\"\n        print_oneline recipe\n      end\n\n    end\n  end\t  \n\n  private\n\n  def print_default recipe\n    puts \"-------------\"\n    puts \"Recipe: #{recipe[:title]}\"\n    puts \"It takes: #{recipe[:cooking_time]} to cook.\"\n    puts \"The ingredients are: #{recipe[:ingredients].join(\", \")}\"\n    puts \"\"\n  end\n\n  def print_oneline recipe\n    if options[:show_time]\n      time = \"(#{recipe[:cooking_time]})\"\n    else\n      time = \"\"\n    end\n\n    puts %Q{#{recipe[:title]} #{time}}\n  end\n\nend\n\nApp.start ARGV\n# ARGV is for options, arguments, subcommand to be parsed in app.\n\n~~~\n\noption :show_time in code and --show-time in command line. Thor is cleaver enough to understand no in --no-show-time.\nTest this with the followings.\n\t\n~~~ terminal\n# 1.\n$ ruby app.rb list_recipes --format oneline\n# or \n$ ruby app.rb list_recipes --format \"oneline\"\n\n# 2.\n$ ruby app.rb list_recipes --format=\"oneline\"\n\n# 3.\n$ ruby app.rb list_recipes --format=\"oneline\" --no-show-time\n~~~\n\noption :show_time, type: :boolean, default: true #--show-time --no-show-time\n\nIf there is no default: true, the default is false. Thor is clever enough to recognize --show-time as true and --no-show-time as false.\n\nIn option you use \"-\" like --show-time, but in method use under-bar, options[:show_time].\n\nIf you add required true, like option: format, required: true, then you are required the option.\n\n\n## Subcommands\n\n### Adding recipes add method\n\nExamples are \"git remote add\", \"git remote list\", etc.\n\nEvery Thor application can be hooked inside another application.\n\nsubcommand `<name of command>`, `<name of class to hook>`. This can be used as app.rb recipes add. The add options will be defined as Thor options, not arguments. Arguments are explicit in the form of options. Rather than app.rb recipes add title time description, it is better to be app.rb recipes add --title=\"\" --time=\"\" --description=\"\"\n\n~~~ app2.rb\nrequire \"thor\"\n\nRECIPES = [\n      {\n        title: \"Ratatouille\",\n        cooking_time: \"60 min\",\n        ingredients:  %w(potatoes carrots peppers onions zucchini tomatoes)\n      },\n      {\n        title: \"Mac & Cheese\",\n        cooking_time: \"20 min\",\n        ingredients: %w(macarroni cheese mustard milk)\n      },\n      {\n        title: \"Caesar Salad\",\n        cooking_time: \"10 min\",\n        ingredients:  %w(chicken lettuce croutons eggs)\n      }\n    ]\n\nclass Recipes < Thor\n  desc \"add --title --cooking-time --description\", \"Adds a new recipe.\"\n  option :title, required: true\n  option :cooking_time, required: true\n  option :description, required: true\n\n  def add # app.rb recipes add --title=\"\" --cooking-time=\"\" --description=\"\"\n    recipe = {\n      title: options[:title],\n      cooking_time: options[:cooking_time],\n      description: options[:description]\n    }\n\n    RECIPES << recipe\n\n    RECIPES.each do |recipe|\n      puts recipe[:title]\n    end\n  end\nend\n\nclass App < Thor\n  desc \"hello WORD\", \"Prints 'Hello WORD' to the screen.\"\n  def hello word\n    puts \"Hello #{word}\"\n  end\n\n  desc \"recipes\", \"Manages recipes\"\n  subcommand \"recipes\", Recipes # app.rb recipes add \n\n  desc \"list_recipes [KEYWORD] [OPTIONS]\", \"List all recipes. If a keyword is given, it filters the list based off it.\"\n  option :format\n  option :show_time, type: :boolean, default: true #--show-time --no-show-time\n  def list_recipes keyword=nil\n    recipes = RECIPES\n    recipes_to_be_listed = if keyword.nil? then recipes\n                         else recipes.select { |recipe| recipe[:title].downcase.include? keyword.downcase}\n                         end\n\n    recipes_to_be_listed.each do | recipe |\n      if options[:format].nil?\n        print_default recipe\n      else options[:format] == \"oneline\"\n        print_oneline recipe\n      end\n\n    end\n  end   \n\n  private\n\n  def print_default recipe\n    puts \"-------------\"\n    puts \"Recipe: #{recipe[:title]}\"\n    puts \"It takes: #{recipe[:cooking_time]} to cook.\"\n    puts \"The ingredients are: #{recipe[:ingredients].join(\", \")}\"\n    puts \"\"\n  end\n\n  def print_oneline recipe\n    if options[:show_time]\n      time = \"(#{recipe[:cooking_time]})\"\n    else \n      time = \"\"\n    end\n\n    puts %Q{#{recipe[:title]} #{time}}\n  end\n\nend\n\nApp.start ARGV\n# ARGV is for options, arguments, subcommand to be parsed in app.\n\n~~~\n\nTest it.\n  \n~~~ terminal\n# 1. \n$ ruby app2.rb recipes add # this will give an error\n\n# 2. \n$ ruby app2.rb recipes add --title=\"Steak\" --cooking-time=\"10 min\" --description=\"Good ol' steak\"\n~~~\n\n### Adding recipes list\n\n~~~ app3.rb\nrequire \"thor\"\n\nRECIPES = [\n      {\n        title: \"Ratatouille\",\n        cooking_time: \"60 min\",\n        ingredients:  %w(potatoes carrots peppers onions zucchini tomatoes)\n      },\n      {\n        title: \"Mac & Cheese\",\n        cooking_time: \"20 min\",\n        ingredients: %w(macarroni cheese mustard milk)\n      },\n      {\n        title: \"Caesar Salad\",\n        cooking_time: \"10 min\",\n        ingredients:  %w(chicken lettuce croutons eggs)\n      }\n    ]\n\nclass Recipes < Thor\n  desc \"add --title --cooking-time --description\", \"Adds a new recipe.\"\n  option :title, required: true\n  option :cooking_time, required: true\n  option :description, required: true\n\n  def add # app.rb recipes add --title=\"\" --cooking-time=\"\" --description=\"\"\n    recipe = {\n      title: options[:title],\n      cooking_time: options[:cooking_time],\n      description: options[:description]\n    }\n\n    RECIPES << recipe\n\n    RECIPES.each do |recipe|\n      puts recipe[:title]\n    end\n  end\n\n  desc \"list [KEYWORD] [OPTIONS]\", \"List all recipes. If a keyword is given, it filters the list based off it.\"\n  option :format\n  option :show_time, type: :boolean, default: true #--show-time --no-show-time\n\n  def list keyword=nil\n    recipes = RECIPES\n    recipes_to_be_listed = if keyword.nil? then recipes\n                         else recipes.select { |recipe| recipe[:title].downcase.include? keyword.downcase}\n                         end\n\n    recipes_to_be_listed.each do | recipe |\n      if options[:format].nil?\n        print_default recipe\n      else options[:format] == \"oneline\"\n        print_oneline recipe\n      end\n\n    end\n  end   \n\n  private\n\n  def print_default recipe\n    puts \"-------------\"\n    puts \"Recipe: #{recipe[:title]}\"\n    puts \"It takes: #{recipe[:cooking_time]} to cook.\"\n    puts \"The ingredients are: #{recipe[:ingredients].join(\", \")}\"\n    puts \"\"\n  end\n\n  def print_oneline recipe\n    if options[:show_time]\n      time = \"(#{recipe[:cooking_time]})\"\n    else \n      time = \"\"\n    end\n\n    puts %Q{#{recipe[:title]} #{time}}\n  end\nend\n\nclass App < Thor\n  desc \"hello WORD\", \"Prints 'Hello WORD' to the screen.\"\n  def hello word\n    puts \"Hello #{word}\"\n  end\n\n  desc \"recipes\", \"Manages recipes\"\n  subcommand \"recipes\", Recipes # app.rb recipes add \n\n\nend\n\nApp.start ARGV\n# ARGV is for options, arguments, subcommand to be parsed in app.\n\n~~~\n\nTest it.\n  \n~~~ terminal\n# 1. \n$ ruby app3.rb recipes list\n\n# 2. This will show help message for recipes.\n$ ruby app3.rb recipes \n\n~~~\n\nThor will automatically insert options, so change,\n    `desc \"add --title --cooking-time --description\", \"Adds a new recipe.\"`\nto\n     ` desc \"add\", \"Adds a new recipe.\"`\n\nAdding alias for options. This allow to type -t rather than --title etc. You can use only one letter after -, like, -t, -c or -d.\n- is mandatory.\n  \n~~~ app4.rb\n  option :title, required: true, aliases: \"-t\"\n  option :cooking_time, required: true, aliases: \"-c\"\n  option :description, required: true, aliases: \"-d\"\n~~~\n\nTest it. \n  \n~~~ terminal\n# 1. To display help\n$ ruby app4.rb recipes\n\n# 2.\n$ ruby app4.rb recipes add -c=\"10 min\" -t \"Steak\" -d \"Good ol' steak.\"\n~~~\n\n## GLI\n\nAims for a higher standard.\nBetter documentation, better testing, better dependency management.\n\nInstall gem gli\n  \n~~~ terminal\n$ gem install gli\n# Initialize with name of app and methods you want.\n$ gli init recipes list add\n~~~\n\nswitch in GLI is the same as boolean flag in Thor.\n\n~~~ bin/recipes.rb\n# In Thor\noption :s, type :boolean\n# In GLI\nswitch [:s,:switch]\n\n# flag in GLI is the same as option in Thor without using boolean type.\n\n~~~\n\nTO BE CONTINUE\n\n", "tags": ["thor", "Ruby"]}