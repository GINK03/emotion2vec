{"context": " More than 1 year has passed since last update.Java8 \u3067 filter \u3084 map \u304c\u4f7f\u3048\u308b\u3088\u3046\u306b\u306a\u3063\u305f\u30fc\uff01\n\u3068\u3044\u3046\u308f\u3051\u3067 .NET \u306e LINQ to Objects \u3068\u306e\u5bfe\u5fdc\u8868\u3092\u4f5c\u3063\u3066\u307f\u307e\u3057\u305f\u3002\n\nLINQ - Enumerable \u30af\u30e9\u30b9 (System.Linq)\n\nJava8 - Stream (Java Platform SE 8 )\n\n\n\u306e\u6bd4\u8f03\u3067\u3059\u3002\nJava \u306e\u65b9\u306f\n\nCollectors (Java Platform SE 8 )\n\n\u3082\u4f7f\u3044\u307e\u3059\u3002\n\u307e\u3060\u8a66\u3057\u305f\u3082\u306e\u306f\u5c11\u306a\u3044\u306e\u3067\u9593\u9055\u3063\u3066\u308b\u304b\u3082\u3057\u308c\u306a\u3044 \uff06 \u30ab\u30c6\u30b4\u30e9\u30a4\u30ba\u304c\u9069\u5f53 \u306a\u306e\u3067\u3001\u7de8\u96c6\u30ea\u30af\u30a8\u30b9\u30c8\u3057\u3066\u3082\u3089\u3048\u308b\u3068\u3042\u308a\u304c\u305f\u3044\u3067\u3059\u3002\n\n\n\n\u6a5f\u80fd\nLINQ\nJava8\n\n\n\n\n\u3010\u57fa\u672c\u7684\u306a\u3084\u3064\u3011\n\n\n\n\n\u62bd\u51fa\nWhere\nfilter\n\n\n\u5c04\u5f71\nSelect\nmap\n\n\n\u4e26\u3079\u66ff\u3048\nOrderBy / OrderByDescending\nsorted\n\n\n\u5f8c\u7d9a\u3092\u4e26\u3079\u66ff\u3048\nThenBy / ThenByDescending\nn/a\n\n\n\u5e73\u5766\u5316\u3057\u3066\u5c04\u5f71\nSelectMany\nflatMap\n\n\n\u3010\u62bd\u51fa\u7cfb\u3011\n\n\n\n\n\uff4e\u4ef6\u98db\u3070\u3059\nSkip\nskip\n\n\n\u6761\u4ef6\u3092\u6e80\u305f\u3059\u307e\u3067\u98db\u3070\u3059\nSkipWhile\nn/a\n\n\n\uff4e\u4ef6\u307e\u3067\u6d41\u3059\nTake\nlimit\n\n\n\u6761\u4ef6\u3092\u6e80\u305f\u3059\u307e\u3067\u6d41\u3059\nTakeWhile\nn/a\n\n\n\u3010\u5408\u6210\u7cfb\u3011\n\n\n\n\n\u9023\u7d50\nConcat\nconcat\n\n\n\u7a4d\u96c6\u5408\nIntersect\nn/a\n\n\n\u548c\u96c6\u5408\nUnion\nn/a\n\n\n\u5dee\u96c6\u5408\nExcept\nn/a\n\n\n\u5185\u90e8\u7d50\u5408\nJoin\nn/a\n\n\n\u5916\u90e8\u7d50\u5408\nGroupJoin\nn/a\n\n\n\u4e26\u3073\u3092\u9006\u306b\u3059\u308b\nReverse\nn/a\n\n\n2\u3064\u306e\u5024\u3092\u63c3\u3048\u3066\u6d41\u3059\nZip\nn/a\n\n\n\u3010\u30b0\u30eb\u30fc\u30d7\u5316\u3001\u96c6\u8a08\u7cfb\u3011\n\n\n\n\n\u91cd\u8907\u3092\u7121\u304f\u3059\nDistinct\ndistinct\n\n\n\u7573\u307f\u8fbc\u307f\nAggregate\nreduce\n\n\n\u30b0\u30eb\u30fc\u30d7\u5316\nGroupBy\nCollectors.groupingBy\n\n\n\u5e73\u5747\nAverage\nIntStream.average /  Collectors.summarizingXXX\n\n\n\u4ef6\u6570\nCount / LongCount\ncount\n\n\n\u6700\u5927\nMax\nmax\n\n\n\u6700\u5c0f\nMin\nmin\n\n\n\u5408\u8a08\nSum\nIntStream.sum / Collectors.summarizingXXX\n\n\n\u5148\u982d\nFirst / FirstOrDefault\nfindFirst\n\n\n\u7d42\u7aef\nLast / LastOrDefault\nn/a\n\n\n\u3068\u308a\u3042\u3048\u305a\u5024\u3092\u5f97\u308b\n\nfindAny\n\n\n\u96c6\u8a08\u7528\u306e\u6c4e\u7528\u95a2\u6570\uff1f\n\ncollect\n\n\n1\u4ef6\u306e\u5024\u3092\u5f97\u308b\nSingle / SingleOrDefault\n\n\n\n\u7a7a\u306a\u3089\u65e2\u5b9a\u5024\u3092\u8fd4\u3059\nDefaultIfEmpty\n\n\n\n\u5168\u30c7\u30fc\u30bf\u304c\u6761\u4ef6\u306b\u30de\u30c3\u30c1\u3059\u308b\u304b\uff1f\nAll\nallMatch\n\n\n\u3044\u305a\u308c\u304b\u306e\u30c7\u30fc\u30bf\u304c\u6761\u4ef6\u306b\u30de\u30c3\u30c1\u3059\u308b\u304b\uff1f\nAny\nanyMatch\n\n\n\u3044\u305a\u308c\u304b\u306e\u30c7\u30fc\u30bf\u3082\u6761\u4ef6\u306b\u30de\u30c3\u30c1\u3057\u306a\u3044\u304b\uff1f\n\nnoneMatch\n\n\n\u3010\u751f\u6210\u7cfb\u3011\n\n\n\n\n\u7a7a\u3063\u307d\nEmpty\nempty\n\n\n\u7bc4\u56f2\u3092\u751f\u6210\nRange\nn/a\n\n\n\u7e70\u308a\u8fd4\u3059\nRepeat\nn/a\n\n\n\u7121\u9650\u30ea\u30b9\u30c8\u751f\u6210\n\ngenerate / iterate\n\n\n\u3010\u305d\u306e\u4ed6\u3011\n\n\n\n\n\nSequenceEqual\n\n\n\n\u5217\u6319\nToList().ForEach\nforEach\n\n\n\u306a\u3093\u304b Action \u3092\u631f\u3080(\u30c7\u30d0\u30c3\u30b0\u7528\uff1f)\n\npeek\n\n\n\n\u3046\u3046\u3080\u3001\u5408\u6210\u7cfb\u306e\u6a5f\u80fd\u306f\u307b\u3068\u3093\u3069\u306a\u3044\u3088\u3046\u3067\u3059\u2026\u306e\u3067\u81ea\u529b\u3067\u3084\u308b\u3057\u304b\u3002\n\u4ee5\u4e0b\u3001\u30b5\u30f3\u30d7\u30eb\u3002\n\n\u30b5\u30f3\u30d7\u30eb\nLINQ \u306e\u65b9\u306f Mac+Mono(Xamarin) \u3067\u8a66\u3057\u3066\u3044\u307e\u3059\uff08\u307c\u305d\u308a\n\n\u62bd\u51fa(Where)\u3001\u4e26\u3079\u66ff\u3048(OrderBy)\u3001\u5c04\u5f71(Select)\n0\u301c9 \u3092\u3001\u5076\u6570\u5024\u3060\u3051\u62bd\u51fa\u3057\u3066\u3001\u964d\u9806\u306b\u30bd\u30fc\u30c8\u3057\u3066\u3001\u5024\u309210\u500d\u3057\u3066\u3001\u51fa\u529b\u3002\n\nC#\nEnumerable.Range(0, 10)\n  .Where(x => x % 2 == 0)\n  .OrderByDescending(x => x)\n  .Select(x => x * 10)\n  .ToList().ForEach(Console.WriteLine);\n\n\n\nJava\nArrays.asList(0,1,2,3,4,5,6,7,8,9).stream()\n  .filter(x -> x % 2 == 0)\n  .sorted((x, y) -> y - x)\n  .map(x -> x * 10)\n  .forEach(System.out::println);\n\n\n80 60 40 20 0\n\n\n\u5e73\u5766\u5316\u3057\u3066\u5c04\u5f71(SelectMany)\n1\u301c5\u306e\u30ea\u30b9\u30c8\u304b\u3089\u3001\u300cn\u00d710\u304b\u3089\u59cb\u307e\u308bn\u4ef6\u300d\u306e\u30ea\u30b9\u30c8\u3092\u751f\u6210\u3002(\u7d50\u679c\u898b\u305f\u307b\u3046\u304c\u5206\u304b\u308a\u3084\u3059\u3044\u306a\uff08^_^;)\n\nC#\nEnumerable.Range(1, 5)\n  .SelectMany(x => Enumerable.Range(10 * x, x))\n  .ToList().ForEach(Console.WriteLine);\n\n\n\nJava\nArrays.asList(1,2,3,4,5).stream()\n  .flatMap(x -> IntStream.range(x * 10, x * 10 + x).boxed())\n  .forEach(System.out::println);\n\n\n10 \n20 21 \n30 31 32 \n40 41 42 43 \n50 51 52 53 54\n\n\n\u62bd\u51fa\u7cfb(Take, Skip)\n1\u301c10\u306e\u30ea\u30b9\u30c8\u306e3\u4ef6\u98db\u3070\u3057\u3066\u30015\u4ef6\u53d6\u5f97\u3002\n\nC#\nEnumerable.Range(1, 10)\n  .Skip(3)\n  .Take(5)\n  .ToList().ForEach(Console.WriteLine);\n\n\n\nJava\n// \u7121\u9650\u30ea\u30b9\u30c8\u3067\u3082 limit \u3042\u308b\u304b\u3089\u5927\u4e08\u592b\nStream.iterate(1, x-> x++)\n  .skip(3)\n  .limit(5)\n  .forEach(System.out::println);\n\n\n4 5 6 7 8\n\nLINQ \u306b\u306f\u4ef6\u6570\u3067\u306a\u304f\u6761\u4ef6\u3092\u6307\u5b9a\u3067\u304d\u308b TakeWhile SkipWhile \u304c\u3042\u308a\u307e\u3059\u304c\u3001Java \u306b\u306f\u306a\u3055\u305d\u3046\u306a\u306e\u3067 filter \u3067\u4ee3\u7528\u3057\u306a\u3044\u3068\u3044\u3051\u306a\u3055\u305d\u3046\u3002\n\nC#\nEnumerable.Range(1, 10)\n  .SkipWhile(x => x < 4)\n  .TakeWhile(x => x < 9)\n  .ToList().ForEach(Console.WriteLine);\n\n\n\n\u9023\u7d50(Concat)\n2\u3064\u306e\u30ea\u30b9\u30c8\u3092\u3064\u306a\u3052\u308b\n\nC#\nnew int[] { 1, 2, 3 }.Concat(new int[]{ 30, 20, 10 })\n.ToList().ForEach(Console.WriteLine);\n\n\n\nJava\nStream.concat(\n  Arrays.asList(1,2,3).stream(), \n  Arrays.asList(30,20,10).stream())\n.forEach(System.out::println);\n\n\n\u306a\u3093\u3067 static \u30e1\u30bd\u30c3\u30c9\u3084\u306d\u3093\u2026\u3002\n1 2 3 30 20 10\n\n\n\u7a4d\u96c6\u5408(Intersect)\u3001\u548c\u96c6\u5408(Union)\u3001\u5dee\u96c6\u5408(Except)\n\u7a4d\u96c6\u5408\uff1a2\u3064\u306e\u30ea\u30b9\u30c8\u304b\u3089\u91cd\u8907\u3092\u306a\u304f\u3059\u3002\n\u548c\u96c6\u5408\uff1a2\u3064\u306e\u30ea\u30b9\u30c8\u3092\u30de\u30fc\u30b8\u3059\u308b\u3002\n\u5dee\u96c6\u5408\uff1a\u30ea\u30b9\u30c81\u3092\u57fa\u6e96\u306b\u30ea\u30b9\u30c82\u3068\u306e\u5dee\u5206\u3092\u5f97\u308b\u3002\n\nC#\nvar list1 = new int[]{1,2,3,4,5,6};\nvar list2 = new int[]{8,7,6,5,4};\n\nlist1.Intersect(list2)\n  .ToList().ForEach(Console.WriteLine);\n\nlist1.Union(list2)\n  .ToList().ForEach(Console.WriteLine);\n\nlist1.Except(list2)\n  .ToList().ForEach(Console.WriteLine);\n\n\n\nJava\n// \u81ea\u529b\u3067\u5b9f\u73fe\u304b\u3088\uff57\nlist1.stream().filter(x -> list2.stream().anyMatch(y -> y == x))\n  .forEach(System.out::println);\n\nStream.concat(list1.stream(), \n  list2.stream().filter(x -> list1.stream().noneMatch(y -> y == x)))\n  .forEach(System.out::println);\n\nlist1.stream().filter(x -> list2.stream().noneMatch(y -> y == x))\n  .forEach(System.out::println);\n\n\n4 5 6 // \u7a4d\n1 2 3 4 5 6 8 7 // \u548c\n1 2 3 // \u5dee\n\n\n\u5185\u90e8\u7d50\u5408(Join)\n\u5546\u54c1\u30de\u30b9\u30bf\u3068\u58f2\u4e0a\u30c6\u30fc\u30d6\u30eb\u3092 INNER JOIN \u3059\u308b\u7684\u306a\u3002\n\nC#\nvar master = new [] {\n    new { Id = 1, Name = \"Apple\" },\n    new { Id = 2, Name = \"Grape\" }\n}; \n\nvar sales = new [] { \n    new { Id = 1, Sales = 100 },\n    new { Id = 2, Sales = 200 },\n    new { Id = 2, Sales = 300 },\n    new { Id = 3, Sales = 400 },\n};\n\nmaster.Join(sales, \n  outer=>outer.Id, \n  inner=>inner.Id, \n  (o, i) => new { o.Name, i.Sales })\n.ToList().ForEach(Console.WriteLine);\n\n\n\nJava\n// \u81ea\u529b\nList<Pair<Integer, String>> master = Arrays.asList(\n  new Pair<>(1, \"Apple\"),\n  new Pair<>(2, \"Grape\")\n);\n\nList<Pair<Integer, Integer>> sales = Arrays.asList(\n  new Pair<>(1, 100),\n  new Pair<>(2, 200),\n  new Pair<>(2, 300),\n  new Pair<>(3, 400)\n);\n\nmaster.stream()\n  .flatMap(outer -> sales.stream()\n    .filter(inner -> outer.getKey() == inner.getKey())\n    .map(z-> new Pair<String, Integer>(outer.getValue(), z.getValue())))\n  .forEach(System.out::println);\n\n\n{ Name = Apple, Sales = 100 }\n{ Name = Grape, Sales = 200 }\n{ Name = Grape, Sales = 300 }\n\n\n\u5916\u90e8\u7d50\u5408(GroupJoin)\n\u5546\u54c1\u30de\u30b9\u30bf\u3068\u58f2\u4e0a\u30c6\u30fc\u30d6\u30eb\u3092 OUTER JOIN \u3059\u308b\u7684\u306a\u3002\u7d50\u5408\u5148\u306e\u30c6\u30fc\u30d6\u30eb\u306b\u884c\u304c\u898b\u3064\u304b\u3089\u306a\u304b\u3063\u305f\u3082\u306e\u306f null \u306b\u306a\u308b\u3002\n\nC#\nvar master = new [] {\n    new { Id = 1, Name = \"Apple\" },\n    new { Id = 2, Name = \"Grape\" },\n    new { Id = 5, Name = \"Orange\" },\n}; \n\nvar sales = new [] {  // Orange \u306f\u7121\u3044\n    new { Id = 1, Sales = 100},\n    new { Id = 2, Sales = 200},\n    new { Id = 3, Sales = 400},\n};\n\nmaster.GroupJoin(sales, \n  outer=>outer.Id, \n  inner=>inner.Id, \n  (o, i) => new { o.Name, FirstOfSales = i.Select(\n    x=>(int?)x.Sales).FirstOrDefault() }) // \u7121\u304b\u3063\u305f\u3089 null \u306b\u3057\u305f\u3044\u306e\u3067 null\u8a31\u5bb9\u578b\u306b\u3057\u3066\u304b\u3089 FirstOrDefault\n.ToList().ForEach(Console.WriteLine);\n\n\n\u305f\u3076\u3093\u666e\u901a\u306f First \u3058\u3083\u306a\u304f\u3066 Sum \u3068\u304b\u4f7f\u3046\u3093\u3060\u308d\u3046\u3002\n\nJava\n// \u3053\u308c\u3082\u81ea\u529b\nList<Pair<Integer, String>> master = Arrays.asList(\n  new Pair<>(1, \"Apple\"),\n  new Pair<>(2, \"Grape\"),\n  new Pair<>(5, \"Orange\")\n);\n\nList<Pair<Integer, Integer>> sales = Arrays.asList(\n  new Pair<>(1, 100),\n  new Pair<>(2, 200),\n  new Pair<>(2, 300),\n  new Pair<>(3, 400)\n);\n\nmaster.stream().map(outer->new Pair<String, Optional<Integer>>(outer.getValue(), \n  sales.stream()\n    .filter(inner->inner.getKey() == outer.getKey()) // Id \u3067\u30d5\u30a3\u30eb\u30bf\n      .map(x->x.getValue()) // Sales \u3060\u3051\u306b\u5c04\u5f71\n      .findFirst())) // \u540c\u4e00Id\u4e2d\u306e\u5148\u982d\n  .forEach(System.out::println);\n\n\n[.NET]\n{ Name = Apple, FirstOfSales = 100 }\n{ Name = Grape, FirstOfSales = 200 }\n{ Name = Orange, FirstOfSales = } // \u76f8\u624b\u304c\u5c45\u306a\u3044\u3084\u3064\u306f null \u306b\u306a\u308b\n\n[Java]\nApple=Optional[100]\nGrape=Optional[200]\nOrange=Optional.empty // Option \u3060\u304b\u3089 empty \u306b\u306a\u308b\u306e\u306f\u826f\u3044\n\n\n2\u3064\u306e\u5024\u3092\u63c3\u3048\u3066\u6d41\u3059(Zip)\n\uff12\u3064\u306e\u30ea\u30b9\u30c8\u306e\u5024\u3092\u3072\u3068\u3064\u305a\u3064\u30bb\u30c3\u30c8\u306b\u3057\u3066\u6d41\u3059\u3002\n\nC#\nvar arr1 = new int[] { 1, 2, 3, 4, 5 };\nvar arr2 = new string[] { \"hoge\", \"fuga\", \"piyo\" };\n\narr1.Zip(arr2, (x, y) =>  new {x, y})\n    .ToList()\n    .ForEach(Console.WriteLine);\n\n\n\nJava\n// FIXME \u3069\u3046\u3084\u308b\u306e\uff1f Streams.zip \u306f\u3069\u3053\u3044\u3063\u305f\uff1f\n\n\n{ x = 1, y = hoge }\n{ x = 2, y = fuga }\n{ x = 3, y = piyo }\n\n\n\u91cd\u8907\u3092\u7121\u304f\u3059(Distinct)\n\u91cd\u8907\u3059\u308b\u6570\u5024\u30ea\u30b9\u30c8\u304b\u3089\u91cd\u8907\u3092\u306a\u304f\u3059\u3002\n\nC#\nnew int[]{1,3,4,3,2,4}\n  .Distinct()\n  .ToList().ForEach(Console.WriteLine);\n\n\n\nJava\nArrays.asList(1,3,4,3,2,4).stream()\n  .distinct()\n  .forEach(System.out::println);\n\n\n1 3 4 2\n\n\n\u7573\u307f\u8fbc\u307f\n\u3044\u308d\u3044\u308d\u306a\u96c6\u8a08\u306e\u7d20\u3001\u7573\u307f\u8fbc\u307f\u3002\u8a00\u8a9e\u306b\u3088\u308a fold \u3068\u304b reduce \u3068\u304b aggregate \u3068\u304b\u3001\u3044\u308d\u3044\u308d\u306a\u547c\u3073\u540d\u304c\u3042\u308a\u307e\u3059\u306d\u3002\n\u3088\u3044\u4f8b\u304c\u6d6e\u304b\u306a\u304b\u3063\u305f\u306e\u3067 Max \u3092\u5b9f\u88c5\u3057\u3066\u307f\u307e\u3057\u305f\u3002\n\nC#\nvar max = new int[]{1,5,3,7,2,4}\n    .Aggregate(Int32.MinValue, (x, y) => Math.Max(x, y));\nConsole.WriteLine(max);\n\n\n\nJava\nint max = Arrays.asList(1,5,3,7,2,4).stream()\n  .reduce(Integer.MIN_VALUE, (x, y) -> Math.max(x, y));\nSystem.out.println(max);\n\n\n7\n\n\n\u30b0\u30eb\u30fc\u30d7\u5316\n\u30ea\u30b9\u30c8\u306e\u8981\u7d20\u3092\u30ad\u30fc\u306b\u3057\u3066\u30b0\u30eb\u30fc\u30d7\u5316\u3059\u308b\u3002Sales\u306f\u5408\u8a08\u3092\u8a08\u7b97\u3059\u308b\u3002\n\nC#\nvar sales = new [] { \n    new { Id = 1, Sales = 100 },\n    new { Id = 2, Sales = 200 },\n    new { Id = 2, Sales = 300 },\n    new { Id = 3, Sales = 400 },\n};\n\nsales.GroupBy(x=>x.Id, (Id, groupedSales) => new {Id, \n    SumOfSales = groupedSales.Sum( element => element.Sales) // Sales \u306f\u5408\u8a08\u3059\u308b\n  }) \n  .ToList().ForEach(Console.WriteLine);\n\n\n\uff08LINQ \u3067\u306f\u3042\u308a\u307e\u305b\u3093\u304c\u3001 List.LookUp \u3092\u4f7f\u3063\u3066\u5b9f\u73fe\u3059\u308b\u3053\u3068\u3082\u3067\u304d\u308b\u3088\u3046\u3067\u3059 \u2192 \u30b3\u30e1\u30f3\u30c8:2014/03/22 00:29\uff09\n\nJava\n// javafx \u306b Pair \u304c\u3042\u3063\u305f\u306e\u3067 Tuple \u4ee3\u308f\u308a\u306b\u4f7f\u3063\u3061\u3083\u3063\u305f\nList<Pair<Integer, Integer>> list1 = Arrays.asList(\n  new Pair<>(1, 100),\n  new Pair<>(2, 200),\n  new Pair<>(2, 300),\n  new Pair<>(3, 400)\n);\n\nlist1.stream().collect(Collectors.groupingBy(x -> x.getKey()))\n  .entrySet().stream() // group\u5316\u306e\u7d50\u679c\u304c Map \u306a\u306e\u3067\u3001\u30a8\u30f3\u30c8\u30ea\u3092 Stream \u5316\n  .map(x -> new Pair<Integer, Integer>(\n    x.getKey(), // Key \u304c Id \u306b\u76f8\u5f53\n    x.getValue().stream().collect(Collectors.summingInt(y->y.getValue())))) // Value \u304c List \u306a\u306e\u3067\u307e\u305f Stream \u5316\u3057\u3066\u5408\u8a08\u3092\u5f97\u308b\n  .forEach(System.out::println);\n\n// Collectors.groupingBy \u4f7f\u308f\u305a\u306b Map.merge \u3092\u4f7f\u3063\u305f\u307b\u3046\u304c\u5206\u304b\u308a\u3084\u3059\u3044\u6c17\u3082\u3002\u3002\u3002\nlist1.stream().collect(\n  () -> new HashMap<Integer, Integer>(),\n  (map, item) -> map.merge(item.getKey(), item.getValue(), (x, y) -> x + y), // \u540c\u3058\u30ad\u30fc\u306e\u5024\u3092\u52a0\u7b97\u3057\u3066\u304f\n  (left, right) -> left.putAll(right))\n  .forEach((k, v) -> System.out.println(k + \":\" + v));\n\n\nJava \u306e\u65b9\u3001\u30ab\u30aa\u30b9\u3059\u304e\u308b\u2026\u3002.NET \u306e IGrouping \u3092 Map \u3067\u3084\u3063\u3066\u308b\u304b\u3089\u3060\u306a\u3002\n[.NET]\n{ Id = 1, SumOfSales = 100 }\n{ Id = 2, SumOfSales = 500 } // ID=2 \u306e Sales \u304c\u5408\u8a08\u3055\u308c\u3066\u3044\u308b\n{ Id = 3, SumOfSales = 400 }\n\n[Java]\n1=100\n2=500\n3=400\n\n\n\u5408\u8a08(Sum)\u3001\u6700\u5927(Max)\u3001\u6700\u5c0f(Min)\u3001\u5e73\u5747(Average)\u3001\u4ef6\u6570(Count)\u3001\u5148\u982d(First)\u3001\u7d42\u7aef(Last)\n\u96c6\u8a08\u3044\u308d\u3044\u308d\u3002\n\nC#\nvar list1 = Enumerable.Range(0, 10);\nConsole.WriteLine(\"Sum={0}\", list1.Sum());\nConsole.WriteLine(\"Max={0}\", list1.Max());\nConsole.WriteLine(\"Min={0}\", list1.Min());\nConsole.WriteLine(\"Count={0}\", list1.Count());\nConsole.WriteLine(\"First={0}\", list1.First());\nConsole.WriteLine(\"Last={0}\", list1.Last());\nConsole.WriteLine(\"Average={0}\", list1.Average());\n\n\n\nJava\nList<Integer> list1 = Arrays.asList(0,1,2,3,4,5,6,7,8,9);\nIntSummaryStatistics stats = list1.stream().collect(Collectors.summarizingInt(x -> x)); // Max,Min,Count,Average \u304c\u53d6\u5f97\u3067\u304d\u308b\nSystem.out.println(\"Sum=\" + stats.getSum());\nSystem.out.println(\"Max=\" + stats.getMax());\nSystem.out.println(\"Min=\" + stats.getMin());\nSystem.out.println(\"Count=\" + stats.getCount());\nSystem.out.println(\"First=\" + list1.stream().findFirst().orElse(-1)); // summarizing \u3067\u306f\u53d6\u308c\u306a\u3044\nSystem.out.println(\"Last=\" + list1.stream().sorted((x,y) -> y-x).findFirst().orElse(-1)); // \u5fae\u5999\nSystem.out.println(\"Average=\" + stats.getAverage());\n\nSystem.out.println(\"Average=\" + IntStream.range(0, 10).average()); // \u578b\u6307\u5b9a Stream \u306a\u3089 average, sum \u304c\u3042\u308b\uff08\u7d50\u679c\u306f Option \u306b\u5305\u307e\u308c\u308b\uff09\n\n\nSum=45\nMax=9\nMin=0\nCount=10\nFirst=0\nLast=9\nAverage=4.5\n\n\u2026\u75b2\u308c\u305f\u3002\u3002\u3002\nJava8 \u3067 ``filter`` \u3084 ``map`` \u304c\u4f7f\u3048\u308b\u3088\u3046\u306b\u306a\u3063\u305f\u30fc\uff01\n\u3068\u3044\u3046\u308f\u3051\u3067 .NET \u306e LINQ to Objects \u3068\u306e\u5bfe\u5fdc\u8868\u3092\u4f5c\u3063\u3066\u307f\u307e\u3057\u305f\u3002\n\n* LINQ - [Enumerable \u30af\u30e9\u30b9 (System.Linq)](http://msdn.microsoft.com/ja-jp/library/system.linq.enumerable(v=vs.110).aspx)\n* Java8 - [Stream (Java Platform SE 8 )](http://docs.oracle.com/javase/8/docs/api/java/util/stream/Stream.html)\n\n\u306e\u6bd4\u8f03\u3067\u3059\u3002\n\nJava \u306e\u65b9\u306f\n\n* [Collectors (Java Platform SE 8 )](http://download.java.net/jdk8/docs/api/java/util/stream/Collectors.html)\n\n\u3082\u4f7f\u3044\u307e\u3059\u3002\n\n\u307e\u3060\u8a66\u3057\u305f\u3082\u306e\u306f\u5c11\u306a\u3044\u306e\u3067\u9593\u9055\u3063\u3066\u308b\u304b\u3082\u3057\u308c\u306a\u3044 \uff06 \u30ab\u30c6\u30b4\u30e9\u30a4\u30ba\u304c\u9069\u5f53 \u306a\u306e\u3067\u3001\u7de8\u96c6\u30ea\u30af\u30a8\u30b9\u30c8\u3057\u3066\u3082\u3089\u3048\u308b\u3068\u3042\u308a\u304c\u305f\u3044\u3067\u3059\u3002\n\n| \u6a5f\u80fd | LINQ | Java8 |\n|----------------------|-------------------|----|\n| **[\u3010\u57fa\u672c\u7684\u306a\u3084\u3064\u3011](#3-1)** |||\n| \u62bd\u51fa | Where | filter |\n| \u5c04\u5f71 | Select | map |\n| \u4e26\u3079\u66ff\u3048 | OrderBy / OrderByDescending | sorted |\n| \u5f8c\u7d9a\u3092\u4e26\u3079\u66ff\u3048 | ThenBy / ThenByDescending | n/a |\n| [\u5e73\u5766\u5316\u3057\u3066\u5c04\u5f71](#3-2) | SelectMany | flatMap |\n| **[\u3010\u62bd\u51fa\u7cfb\u3011](#3-3)** |  |  |\n| \uff4e\u4ef6\u98db\u3070\u3059 | Skip | skip |\n| \u6761\u4ef6\u3092\u6e80\u305f\u3059\u307e\u3067\u98db\u3070\u3059 | SkipWhile | n/a |\n| \uff4e\u4ef6\u307e\u3067\u6d41\u3059 | Take | limit |\n| \u6761\u4ef6\u3092\u6e80\u305f\u3059\u307e\u3067\u6d41\u3059 | TakeWhile | n/a |\n| **\u3010\u5408\u6210\u7cfb\u3011** |  |  |\n| [\u9023\u7d50](#3-4) | Concat | concat |\n| [\u7a4d\u96c6\u5408](#3-5) | Intersect | n/a |\n| [\u548c\u96c6\u5408](#3-5) | Union | n/a |\n| [\u5dee\u96c6\u5408](#3-5) | Except | n/a |\n| [\u5185\u90e8\u7d50\u5408](#3-6) | Join | n/a |\n| [\u5916\u90e8\u7d50\u5408](#3-7)| GroupJoin | n/a |\n| \u4e26\u3073\u3092\u9006\u306b\u3059\u308b | Reverse | n/a |\n| [2\u3064\u306e\u5024\u3092\u63c3\u3048\u3066\u6d41\u3059](#3-8) | Zip | n/a |\n| **\u3010\u30b0\u30eb\u30fc\u30d7\u5316\u3001\u96c6\u8a08\u7cfb\u3011** |  |  |\n| [\u91cd\u8907\u3092\u7121\u304f\u3059](#3-9) | Distinct | distinct |\n| [\u7573\u307f\u8fbc\u307f](#3-10) | Aggregate | reduce |\n| [\u30b0\u30eb\u30fc\u30d7\u5316](#3-11) | GroupBy | Collectors.groupingBy |\n| [\u5e73\u5747](#3-12) | Average | IntStream.average /  Collectors.summarizingXXX |\n| [\u4ef6\u6570](#3-12) | Count / LongCount | count |\n| [\u6700\u5927](#3-12) | Max | max |\n| [\u6700\u5c0f](#3-12) | Min | min |\n| [\u5408\u8a08](#3-12) | Sum | IntStream.sum / Collectors.summarizingXXX|\n| \u5148\u982d | First / FirstOrDefault | findFirst |\n| \u7d42\u7aef | Last / LastOrDefault | n/a |\n| \u3068\u308a\u3042\u3048\u305a\u5024\u3092\u5f97\u308b | | findAny |\n| [\u96c6\u8a08\u7528\u306e\u6c4e\u7528\u95a2\u6570\uff1f](#3-11) | | collect |\n| 1\u4ef6\u306e\u5024\u3092\u5f97\u308b | Single / SingleOrDefault | |\n| \u7a7a\u306a\u3089\u65e2\u5b9a\u5024\u3092\u8fd4\u3059 | DefaultIfEmpty | |\n| [\u5168\u30c7\u30fc\u30bf\u304c\u6761\u4ef6\u306b\u30de\u30c3\u30c1\u3059\u308b\u304b\uff1f](#3-5) | All | allMatch |\n| [\u3044\u305a\u308c\u304b\u306e\u30c7\u30fc\u30bf\u304c\u6761\u4ef6\u306b\u30de\u30c3\u30c1\u3059\u308b\u304b\uff1f](#3-5) | Any | anyMatch |\n| [\u3044\u305a\u308c\u304b\u306e\u30c7\u30fc\u30bf\u3082\u6761\u4ef6\u306b\u30de\u30c3\u30c1\u3057\u306a\u3044\u304b\uff1f](#3-5) | | noneMatch |\n| **\u3010\u751f\u6210\u7cfb\u3011** |  |  |\n| \u7a7a\u3063\u307d | Empty | empty |\n| [\u7bc4\u56f2\u3092\u751f\u6210](#3-1) | Range | n/a |\n| \u7e70\u308a\u8fd4\u3059 | Repeat | n/a |\n| [\u7121\u9650\u30ea\u30b9\u30c8\u751f\u6210](#3-3) | | generate / iterate |\n| **\u3010\u305d\u306e\u4ed6\u3011** |  |  |\n| | SequenceEqual | |\n| \u5217\u6319 | ToList().ForEach | forEach |\n| \u306a\u3093\u304b Action \u3092\u631f\u3080(\u30c7\u30d0\u30c3\u30b0\u7528\uff1f) | | peek |\n\n\u3046\u3046\u3080\u3001\u5408\u6210\u7cfb\u306e\u6a5f\u80fd\u306f\u307b\u3068\u3093\u3069\u306a\u3044\u3088\u3046\u3067\u3059\u2026\u306e\u3067\u81ea\u529b\u3067\u3084\u308b\u3057\u304b\u3002\n\u4ee5\u4e0b\u3001\u30b5\u30f3\u30d7\u30eb\u3002\n\n\n## \u30b5\u30f3\u30d7\u30eb\n\nLINQ \u306e\u65b9\u306f Mac+Mono(Xamarin) \u3067\u8a66\u3057\u3066\u3044\u307e\u3059\uff08\u307c\u305d\u308a\n\n### \u62bd\u51fa(Where)\u3001\u4e26\u3079\u66ff\u3048(OrderBy)\u3001\u5c04\u5f71(Select)\n\n0\u301c9 \u3092\u3001\u5076\u6570\u5024\u3060\u3051\u62bd\u51fa\u3057\u3066\u3001\u964d\u9806\u306b\u30bd\u30fc\u30c8\u3057\u3066\u3001\u5024\u309210\u500d\u3057\u3066\u3001\u51fa\u529b\u3002\n\n```csharp:C#\nEnumerable.Range(0, 10)\n  .Where(x => x % 2 == 0)\n  .OrderByDescending(x => x)\n  .Select(x => x * 10)\n  .ToList().ForEach(Console.WriteLine);\n```\n\n```java:Java\nArrays.asList(0,1,2,3,4,5,6,7,8,9).stream()\n  .filter(x -> x % 2 == 0)\n  .sorted((x, y) -> y - x)\n  .map(x -> x * 10)\n  .forEach(System.out::println);\n```\n\n```result\n80 60 40 20 0\n```\n\n### \u5e73\u5766\u5316\u3057\u3066\u5c04\u5f71(SelectMany)\n\n1\u301c5\u306e\u30ea\u30b9\u30c8\u304b\u3089\u3001\u300cn\u00d710\u304b\u3089\u59cb\u307e\u308bn\u4ef6\u300d\u306e\u30ea\u30b9\u30c8\u3092\u751f\u6210\u3002(\u7d50\u679c\u898b\u305f\u307b\u3046\u304c\u5206\u304b\u308a\u3084\u3059\u3044\u306a\uff08^_^;)\n\n```csharp:C#\nEnumerable.Range(1, 5)\n  .SelectMany(x => Enumerable.Range(10 * x, x))\n  .ToList().ForEach(Console.WriteLine);\n```\n\n```java:Java\nArrays.asList(1,2,3,4,5).stream()\n  .flatMap(x -> IntStream.range(x * 10, x * 10 + x).boxed())\n  .forEach(System.out::println);\n```\n\n```result\n10 \n20 21 \n30 31 32 \n40 41 42 43 \n50 51 52 53 54\n```\n\n### \u62bd\u51fa\u7cfb(Take, Skip)\n\n1\u301c10\u306e\u30ea\u30b9\u30c8\u306e3\u4ef6\u98db\u3070\u3057\u3066\u30015\u4ef6\u53d6\u5f97\u3002\n\n```csharp:C#\nEnumerable.Range(1, 10)\n  .Skip(3)\n  .Take(5)\n  .ToList().ForEach(Console.WriteLine);\n```\n\n```java:Java\n// \u7121\u9650\u30ea\u30b9\u30c8\u3067\u3082 limit \u3042\u308b\u304b\u3089\u5927\u4e08\u592b\nStream.iterate(1, x-> x++)\n  .skip(3)\n  .limit(5)\n  .forEach(System.out::println);\n```\n\n```result\n4 5 6 7 8\n```\n\nLINQ \u306b\u306f\u4ef6\u6570\u3067\u306a\u304f\u6761\u4ef6\u3092\u6307\u5b9a\u3067\u304d\u308b ``TakeWhile`` ``SkipWhile`` \u304c\u3042\u308a\u307e\u3059\u304c\u3001Java \u306b\u306f\u306a\u3055\u305d\u3046\u306a\u306e\u3067 ``filter`` \u3067\u4ee3\u7528\u3057\u306a\u3044\u3068\u3044\u3051\u306a\u3055\u305d\u3046\u3002\n\n```csharp:C#\nEnumerable.Range(1, 10)\n  .SkipWhile(x => x < 4)\n  .TakeWhile(x => x < 9)\n  .ToList().ForEach(Console.WriteLine);\n```\n\n### \u9023\u7d50(Concat)\n\n2\u3064\u306e\u30ea\u30b9\u30c8\u3092\u3064\u306a\u3052\u308b\n\n```csharp:C#\nnew int[] { 1, 2, 3 }.Concat(new int[]{ 30, 20, 10 })\n.ToList().ForEach(Console.WriteLine);\n```\n\n```java:Java\nStream.concat(\n  Arrays.asList(1,2,3).stream(), \n  Arrays.asList(30,20,10).stream())\n.forEach(System.out::println);\n```\n\n\u306a\u3093\u3067 static \u30e1\u30bd\u30c3\u30c9\u3084\u306d\u3093\u2026\u3002\n\n```result\n1 2 3 30 20 10\n```\n\n### \u7a4d\u96c6\u5408(Intersect)\u3001\u548c\u96c6\u5408(Union)\u3001\u5dee\u96c6\u5408(Except)\n\n\u7a4d\u96c6\u5408\uff1a2\u3064\u306e\u30ea\u30b9\u30c8\u304b\u3089\u91cd\u8907\u3092\u306a\u304f\u3059\u3002\n\u548c\u96c6\u5408\uff1a2\u3064\u306e\u30ea\u30b9\u30c8\u3092\u30de\u30fc\u30b8\u3059\u308b\u3002\n\u5dee\u96c6\u5408\uff1a\u30ea\u30b9\u30c81\u3092\u57fa\u6e96\u306b\u30ea\u30b9\u30c82\u3068\u306e\u5dee\u5206\u3092\u5f97\u308b\u3002\n\n```csharp:C#\nvar list1 = new int[]{1,2,3,4,5,6};\nvar list2 = new int[]{8,7,6,5,4};\n\nlist1.Intersect(list2)\n  .ToList().ForEach(Console.WriteLine);\n            \nlist1.Union(list2)\n  .ToList().ForEach(Console.WriteLine);\n            \nlist1.Except(list2)\n  .ToList().ForEach(Console.WriteLine);\n```\n\n```java:Java\n// \u81ea\u529b\u3067\u5b9f\u73fe\u304b\u3088\uff57\nlist1.stream().filter(x -> list2.stream().anyMatch(y -> y == x))\n  .forEach(System.out::println);\n\nStream.concat(list1.stream(), \n  list2.stream().filter(x -> list1.stream().noneMatch(y -> y == x)))\n  .forEach(System.out::println);\n\nlist1.stream().filter(x -> list2.stream().noneMatch(y -> y == x))\n  .forEach(System.out::println);\n```\n\n```result\n4 5 6 // \u7a4d\n1 2 3 4 5 6 8 7 // \u548c\n1 2 3 // \u5dee\n```\n\n### \u5185\u90e8\u7d50\u5408(Join)\n\n\u5546\u54c1\u30de\u30b9\u30bf\u3068\u58f2\u4e0a\u30c6\u30fc\u30d6\u30eb\u3092 INNER JOIN \u3059\u308b\u7684\u306a\u3002\n\n```csharp:C#\nvar master = new [] {\n    new { Id = 1, Name = \"Apple\" },\n    new { Id = 2, Name = \"Grape\" }\n}; \n\nvar sales = new [] { \n    new { Id = 1, Sales = 100 },\n    new { Id = 2, Sales = 200 },\n    new { Id = 2, Sales = 300 },\n    new { Id = 3, Sales = 400 },\n};\n            \nmaster.Join(sales, \n  outer=>outer.Id, \n  inner=>inner.Id, \n  (o, i) => new { o.Name, i.Sales })\n.ToList().ForEach(Console.WriteLine);\n```\n\n```java:Java\n// \u81ea\u529b\nList<Pair<Integer, String>> master = Arrays.asList(\n  new Pair<>(1, \"Apple\"),\n  new Pair<>(2, \"Grape\")\n);\n\nList<Pair<Integer, Integer>> sales = Arrays.asList(\n  new Pair<>(1, 100),\n  new Pair<>(2, 200),\n  new Pair<>(2, 300),\n  new Pair<>(3, 400)\n);\n\nmaster.stream()\n  .flatMap(outer -> sales.stream()\n    .filter(inner -> outer.getKey() == inner.getKey())\n    .map(z-> new Pair<String, Integer>(outer.getValue(), z.getValue())))\n  .forEach(System.out::println);\n```\n\n```result\n{ Name = Apple, Sales = 100 }\n{ Name = Grape, Sales = 200 }\n{ Name = Grape, Sales = 300 }\n```\n\n### \u5916\u90e8\u7d50\u5408(GroupJoin)\n\n\u5546\u54c1\u30de\u30b9\u30bf\u3068\u58f2\u4e0a\u30c6\u30fc\u30d6\u30eb\u3092 OUTER JOIN \u3059\u308b\u7684\u306a\u3002\u7d50\u5408\u5148\u306e\u30c6\u30fc\u30d6\u30eb\u306b\u884c\u304c\u898b\u3064\u304b\u3089\u306a\u304b\u3063\u305f\u3082\u306e\u306f null \u306b\u306a\u308b\u3002\n\n```csharp:C#\nvar master = new [] {\n    new { Id = 1, Name = \"Apple\" },\n    new { Id = 2, Name = \"Grape\" },\n    new { Id = 5, Name = \"Orange\" },\n}; \n\nvar sales = new [] {  // Orange \u306f\u7121\u3044\n    new { Id = 1, Sales = 100},\n    new { Id = 2, Sales = 200},\n    new { Id = 3, Sales = 400},\n};\n            \nmaster.GroupJoin(sales, \n  outer=>outer.Id, \n  inner=>inner.Id, \n  (o, i) => new { o.Name, FirstOfSales = i.Select(\n    x=>(int?)x.Sales).FirstOrDefault() }) // \u7121\u304b\u3063\u305f\u3089 null \u306b\u3057\u305f\u3044\u306e\u3067 null\u8a31\u5bb9\u578b\u306b\u3057\u3066\u304b\u3089 FirstOrDefault\n.ToList().ForEach(Console.WriteLine);\n```\n\n\u305f\u3076\u3093\u666e\u901a\u306f First \u3058\u3083\u306a\u304f\u3066 Sum \u3068\u304b\u4f7f\u3046\u3093\u3060\u308d\u3046\u3002\n\n```java:Java\n// \u3053\u308c\u3082\u81ea\u529b\nList<Pair<Integer, String>> master = Arrays.asList(\n  new Pair<>(1, \"Apple\"),\n  new Pair<>(2, \"Grape\"),\n  new Pair<>(5, \"Orange\")\n);\n\nList<Pair<Integer, Integer>> sales = Arrays.asList(\n  new Pair<>(1, 100),\n  new Pair<>(2, 200),\n  new Pair<>(2, 300),\n  new Pair<>(3, 400)\n);\n\nmaster.stream().map(outer->new Pair<String, Optional<Integer>>(outer.getValue(), \n  sales.stream()\n    .filter(inner->inner.getKey() == outer.getKey()) // Id \u3067\u30d5\u30a3\u30eb\u30bf\n      .map(x->x.getValue()) // Sales \u3060\u3051\u306b\u5c04\u5f71\n      .findFirst())) // \u540c\u4e00Id\u4e2d\u306e\u5148\u982d\n  .forEach(System.out::println);\n```\n\n```result\n[.NET]\n{ Name = Apple, FirstOfSales = 100 }\n{ Name = Grape, FirstOfSales = 200 }\n{ Name = Orange, FirstOfSales = } // \u76f8\u624b\u304c\u5c45\u306a\u3044\u3084\u3064\u306f null \u306b\u306a\u308b\n\n[Java]\nApple=Optional[100]\nGrape=Optional[200]\nOrange=Optional.empty // Option \u3060\u304b\u3089 empty \u306b\u306a\u308b\u306e\u306f\u826f\u3044\n```\n\n### 2\u3064\u306e\u5024\u3092\u63c3\u3048\u3066\u6d41\u3059(Zip)\n\n\uff12\u3064\u306e\u30ea\u30b9\u30c8\u306e\u5024\u3092\u3072\u3068\u3064\u305a\u3064\u30bb\u30c3\u30c8\u306b\u3057\u3066\u6d41\u3059\u3002\n\n```csharp:C#\nvar arr1 = new int[] { 1, 2, 3, 4, 5 };\nvar arr2 = new string[] { \"hoge\", \"fuga\", \"piyo\" };\n\narr1.Zip(arr2, (x, y) =>  new {x, y})\n    .ToList()\n    .ForEach(Console.WriteLine);\n```\n\n```java:Java\n// FIXME \u3069\u3046\u3084\u308b\u306e\uff1f Streams.zip \u306f\u3069\u3053\u3044\u3063\u305f\uff1f\n```\n\n```result\n{ x = 1, y = hoge }\n{ x = 2, y = fuga }\n{ x = 3, y = piyo }\n```\n\n### \u91cd\u8907\u3092\u7121\u304f\u3059(Distinct)\n\n\u91cd\u8907\u3059\u308b\u6570\u5024\u30ea\u30b9\u30c8\u304b\u3089\u91cd\u8907\u3092\u306a\u304f\u3059\u3002\n\n```csharp:C#\nnew int[]{1,3,4,3,2,4}\n  .Distinct()\n  .ToList().ForEach(Console.WriteLine);\n```\n\n```java:Java\nArrays.asList(1,3,4,3,2,4).stream()\n  .distinct()\n  .forEach(System.out::println);\n```\n\n```result\n1 3 4 2\n```\n\n### \u7573\u307f\u8fbc\u307f\n\n\u3044\u308d\u3044\u308d\u306a\u96c6\u8a08\u306e\u7d20\u3001\u7573\u307f\u8fbc\u307f\u3002\u8a00\u8a9e\u306b\u3088\u308a fold \u3068\u304b reduce \u3068\u304b aggregate \u3068\u304b\u3001\u3044\u308d\u3044\u308d\u306a\u547c\u3073\u540d\u304c\u3042\u308a\u307e\u3059\u306d\u3002\n\u3088\u3044\u4f8b\u304c\u6d6e\u304b\u306a\u304b\u3063\u305f\u306e\u3067 Max \u3092\u5b9f\u88c5\u3057\u3066\u307f\u307e\u3057\u305f\u3002\n\n```csharp:C#\nvar max = new int[]{1,5,3,7,2,4}\n    .Aggregate(Int32.MinValue, (x, y) => Math.Max(x, y));\nConsole.WriteLine(max);\n```\n\n```java:Java\nint max = Arrays.asList(1,5,3,7,2,4).stream()\n  .reduce(Integer.MIN_VALUE, (x, y) -> Math.max(x, y));\nSystem.out.println(max);\n```\n\n```result\n7\n```\n\n### \u30b0\u30eb\u30fc\u30d7\u5316\n\n\u30ea\u30b9\u30c8\u306e\u8981\u7d20\u3092\u30ad\u30fc\u306b\u3057\u3066\u30b0\u30eb\u30fc\u30d7\u5316\u3059\u308b\u3002Sales\u306f\u5408\u8a08\u3092\u8a08\u7b97\u3059\u308b\u3002\n\n```csharp:C#\nvar sales = new [] { \n    new { Id = 1, Sales = 100 },\n    new { Id = 2, Sales = 200 },\n    new { Id = 2, Sales = 300 },\n    new { Id = 3, Sales = 400 },\n};\n            \nsales.GroupBy(x=>x.Id, (Id, groupedSales) => new {Id, \n    SumOfSales = groupedSales.Sum( element => element.Sales) // Sales \u306f\u5408\u8a08\u3059\u308b\n  }) \n  .ToList().ForEach(Console.WriteLine);\n```\n\n\uff08LINQ \u3067\u306f\u3042\u308a\u307e\u305b\u3093\u304c\u3001 ``List.LookUp`` \u3092\u4f7f\u3063\u3066\u5b9f\u73fe\u3059\u308b\u3053\u3068\u3082\u3067\u304d\u308b\u3088\u3046\u3067\u3059 \u2192 [\u30b3\u30e1\u30f3\u30c8:2014/03/22 00:29](http://qiita.com/amay077/items/9d2941283c4a5f61f302#comment-82388821b902ad7999b0)\uff09\n\n```java:Java\n// javafx \u306b Pair \u304c\u3042\u3063\u305f\u306e\u3067 Tuple \u4ee3\u308f\u308a\u306b\u4f7f\u3063\u3061\u3083\u3063\u305f\nList<Pair<Integer, Integer>> list1 = Arrays.asList(\n  new Pair<>(1, 100),\n  new Pair<>(2, 200),\n  new Pair<>(2, 300),\n  new Pair<>(3, 400)\n);\n\nlist1.stream().collect(Collectors.groupingBy(x -> x.getKey()))\n  .entrySet().stream() // group\u5316\u306e\u7d50\u679c\u304c Map \u306a\u306e\u3067\u3001\u30a8\u30f3\u30c8\u30ea\u3092 Stream \u5316\n  .map(x -> new Pair<Integer, Integer>(\n    x.getKey(), // Key \u304c Id \u306b\u76f8\u5f53\n    x.getValue().stream().collect(Collectors.summingInt(y->y.getValue())))) // Value \u304c List \u306a\u306e\u3067\u307e\u305f Stream \u5316\u3057\u3066\u5408\u8a08\u3092\u5f97\u308b\n  .forEach(System.out::println);\n\n// Collectors.groupingBy \u4f7f\u308f\u305a\u306b Map.merge \u3092\u4f7f\u3063\u305f\u307b\u3046\u304c\u5206\u304b\u308a\u3084\u3059\u3044\u6c17\u3082\u3002\u3002\u3002\nlist1.stream().collect(\n  () -> new HashMap<Integer, Integer>(),\n  (map, item) -> map.merge(item.getKey(), item.getValue(), (x, y) -> x + y), // \u540c\u3058\u30ad\u30fc\u306e\u5024\u3092\u52a0\u7b97\u3057\u3066\u304f\n  (left, right) -> left.putAll(right))\n  .forEach((k, v) -> System.out.println(k + \":\" + v));\n```\n\nJava \u306e\u65b9\u3001\u30ab\u30aa\u30b9\u3059\u304e\u308b\u2026\u3002.NET \u306e ``IGrouping`` \u3092 Map \u3067\u3084\u3063\u3066\u308b\u304b\u3089\u3060\u306a\u3002\n\n```result\n[.NET]\n{ Id = 1, SumOfSales = 100 }\n{ Id = 2, SumOfSales = 500 } // ID=2 \u306e Sales \u304c\u5408\u8a08\u3055\u308c\u3066\u3044\u308b\n{ Id = 3, SumOfSales = 400 }\n\n[Java]\n1=100\n2=500\n3=400\n```\n\n### \u5408\u8a08(Sum)\u3001\u6700\u5927(Max)\u3001\u6700\u5c0f(Min)\u3001\u5e73\u5747(Average)\u3001\u4ef6\u6570(Count)\u3001\u5148\u982d(First)\u3001\u7d42\u7aef(Last)\n\n\u96c6\u8a08\u3044\u308d\u3044\u308d\u3002\n\n```csharp:C#\nvar list1 = Enumerable.Range(0, 10);\nConsole.WriteLine(\"Sum={0}\", list1.Sum());\nConsole.WriteLine(\"Max={0}\", list1.Max());\nConsole.WriteLine(\"Min={0}\", list1.Min());\nConsole.WriteLine(\"Count={0}\", list1.Count());\nConsole.WriteLine(\"First={0}\", list1.First());\nConsole.WriteLine(\"Last={0}\", list1.Last());\nConsole.WriteLine(\"Average={0}\", list1.Average());\n```\n\n```java:Java\nList<Integer> list1 = Arrays.asList(0,1,2,3,4,5,6,7,8,9);\nIntSummaryStatistics stats = list1.stream().collect(Collectors.summarizingInt(x -> x)); // Max,Min,Count,Average \u304c\u53d6\u5f97\u3067\u304d\u308b\nSystem.out.println(\"Sum=\" + stats.getSum());\nSystem.out.println(\"Max=\" + stats.getMax());\nSystem.out.println(\"Min=\" + stats.getMin());\nSystem.out.println(\"Count=\" + stats.getCount());\nSystem.out.println(\"First=\" + list1.stream().findFirst().orElse(-1)); // summarizing \u3067\u306f\u53d6\u308c\u306a\u3044\nSystem.out.println(\"Last=\" + list1.stream().sorted((x,y) -> y-x).findFirst().orElse(-1)); // \u5fae\u5999\nSystem.out.println(\"Average=\" + stats.getAverage());\n\nSystem.out.println(\"Average=\" + IntStream.range(0, 10).average()); // \u578b\u6307\u5b9a Stream \u306a\u3089 average, sum \u304c\u3042\u308b\uff08\u7d50\u679c\u306f Option \u306b\u5305\u307e\u308c\u308b\uff09\n```\n\n```result\nSum=45\nMax=9\nMin=0\nCount=10\nFirst=0\nLast=9\nAverage=4.5\n```\n\n\n\u2026\u75b2\u308c\u305f\u3002\u3002\u3002", "tags": ["C#", "Java", "LINQ"]}