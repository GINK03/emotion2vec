{"context": " More than 1 year has passed since last update.Opencv\nhttp://docs.opencv.org/trunk/doc/tutorials/introduction/linux_gcc_cmake/linux_gcc_cmake.html\ncmake\nhttp://www.wakayama-u.ac.jp/~chen/cmake/cmakecv.html\n\u305d\u306e\u307e\u307e\u3067\u3059\u304c\u524d\u63d0.\ngcc,OpenCV,CMake\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u6e08\u307f\u3002\n\u30b9\u30c6\u30c3\u30d7\n1.MyLine.cpp\n2.CMake file CMakeLists.txt\n3.cmake make\n4.Run\nUsing OpenCV with gcc and CMake\nNote We assume that you have successfully installed OpenCV in your workstation.\nThe easiest way of using OpenCV in your code is to use CMake. A few advantages (taken from the Wiki):\nNo need to change anything when porting between Linux and Windows\nCan easily be combined with other tools by CMake( i.e. Qt, ITK and VTK )\nIf you are not familiar with CMake, checkout the tutorial on its website.\nSteps\nCreate a program using OpenCV\nLet\u2019s use a simple program such as DisplayImage.cpp shown below.\n\u53c2\u8003\uff1ahttp://opencv.jp/cookbook/opencv_drawing.html\n\u5c11\u3005\u3001\u8ffd\u52a0\u3001\u5909\u66f4\u3057\u3066\u3044\u307e\u3059\u3002\n\nMyLine.cpp\n//MyLine.cpp\n#include <opencv2/core/core.hpp>\n#include <opencv2/highgui/highgui.hpp>\n\nusing namespace cv;\n\nint\nmain(int argc, char *argv[])\n{\n  Mat img = Mat::zeros(800, 900, CV_8UC3);\n\n  // Red\uff0c\u592a\u30553\uff0c4\u8fd1\u508d\u9023\u7d50\n  line(img, Point(100, 100), Point(400, 105), Scalar(0,0,200), 3, 4);  \n  // Green\uff0c\u592a\u30555\uff0c8\u8fd1\u508d\u9023\u7d50\n  line(img, Point(100, 200), Point(400, 205), Scalar(0,200,0), 5, 8);\n  // Blue\uff0c\u592a\u305510\uff0c\u30a2\u30f3\u30c1\u30a8\u30a4\u30ea\u30a2\u30b9\n  line(img, Point(100, 300), Point(400, 305), Scalar(200,0,0), 10, CV_AA);\n\n  //add by ggggnonaka start\n  //White Line 1,4\n  line(img, Point(100, 400), Point(800, 400), Scalar(255,255,255), 1, 4);\n  //Red Line 1,4\n  line(img, Point(100, 500), Point(800, 500), Scalar(0,0,255), 1, 4);  \n  //Blue\uff0cLine 10,AA\n  line(img, Point(100, 600), Point(800, 600), Scalar(200,0,0), 10, CV_AA);\n  //add by ggggnonaka end\n\n  namedWindow(\"drawing\", CV_WINDOW_AUTOSIZE|CV_WINDOW_FREERATIO);\n  imshow(\"drawing\", img);\n  waitKey(0);\n}\n//end MyLine.cpp\n\n\nCreate a CMake file\nNow you have to create your CMakeLists.txt file. It should look like this:\n\nCMakeLists.txt\ncmake_minimum_required (VERSION 2.6)\n\nproject( MyLine )\nfind_package( OpenCV REQUIRED )\nadd_executable( MyLine MyLine.cpp ) \ntarget_link_libraries( MyLine ${OpenCV_LIBS} )\n\n\n\nGenerate the executable\nThis part is easy, just proceed as with any other project using CMake:\ncd <DisplayImage_directory>\ncmake .\nmake\n\nRun\n./MyLine\nResult\n\n\nOpencv\nhttp://docs.opencv.org/trunk/doc/tutorials/introduction/linux_gcc_cmake/linux_gcc_cmake.html\n\ncmake\nhttp://www.wakayama-u.ac.jp/~chen/cmake/cmakecv.html\n\n\u305d\u306e\u307e\u307e\u3067\u3059\u304c\u524d\u63d0.\ngcc,OpenCV,CMake\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u6e08\u307f\u3002\n\n\u30b9\u30c6\u30c3\u30d7\n1.MyLine.cpp\n2.CMake file CMakeLists.txt\n3.cmake make\n4.Run\n\nUsing OpenCV with gcc and CMake\nNote We assume that you have successfully installed OpenCV in your workstation.\nThe easiest way of using OpenCV in your code is to use CMake. A few advantages (taken from the Wiki):\nNo need to change anything when porting between Linux and Windows\nCan easily be combined with other tools by CMake( i.e. Qt, ITK and VTK )\nIf you are not familiar with CMake, checkout the tutorial on its website.\nSteps\n\nCreate a program using OpenCV\nLet\u2019s use a simple program such as DisplayImage.cpp shown below.\n\n\u53c2\u8003\uff1ahttp://opencv.jp/cookbook/opencv_drawing.html\n\u5c11\u3005\u3001\u8ffd\u52a0\u3001\u5909\u66f4\u3057\u3066\u3044\u307e\u3059\u3002\n\n```cpp:MyLine.cpp\n//MyLine.cpp\n#include <opencv2/core/core.hpp>\n#include <opencv2/highgui/highgui.hpp>\n\nusing namespace cv;\n\nint\nmain(int argc, char *argv[])\n{\n  Mat img = Mat::zeros(800, 900, CV_8UC3);\n\n  // Red\uff0c\u592a\u30553\uff0c4\u8fd1\u508d\u9023\u7d50\n  line(img, Point(100, 100), Point(400, 105), Scalar(0,0,200), 3, 4);  \n  // Green\uff0c\u592a\u30555\uff0c8\u8fd1\u508d\u9023\u7d50\n  line(img, Point(100, 200), Point(400, 205), Scalar(0,200,0), 5, 8);\n  // Blue\uff0c\u592a\u305510\uff0c\u30a2\u30f3\u30c1\u30a8\u30a4\u30ea\u30a2\u30b9\n  line(img, Point(100, 300), Point(400, 305), Scalar(200,0,0), 10, CV_AA);\n\n  //add by ggggnonaka start\n  //White Line 1,4\n  line(img, Point(100, 400), Point(800, 400), Scalar(255,255,255), 1, 4);\n  //Red Line 1,4\n  line(img, Point(100, 500), Point(800, 500), Scalar(0,0,255), 1, 4);  \n  //Blue\uff0cLine 10,AA\n  line(img, Point(100, 600), Point(800, 600), Scalar(200,0,0), 10, CV_AA);\n  //add by ggggnonaka end\n\n  namedWindow(\"drawing\", CV_WINDOW_AUTOSIZE|CV_WINDOW_FREERATIO);\n  imshow(\"drawing\", img);\n  waitKey(0);\n}\n//end MyLine.cpp\n```\n\nCreate a CMake file\nNow you have to create your CMakeLists.txt file. It should look like this:\n\n```CMakeLists.txt\ncmake_minimum_required (VERSION 2.6)\n\nproject( MyLine )\nfind_package( OpenCV REQUIRED )\nadd_executable( MyLine MyLine.cpp ) \ntarget_link_libraries( MyLine ${OpenCV_LIBS} )\n\n```\n\nGenerate the executable\nThis part is easy, just proceed as with any other project using CMake:\n\n```\ncd <DisplayImage_directory>\ncmake .\nmake\n```\nRun\n./MyLine\n\nResult\n![kobito.1418979067.861201.png](https://qiita-image-store.s3.amazonaws.com/0/33317/e3e5e9b3-a6ee-fd0f-a7d7-07c1653ac960.png \"kobito.1418979067.861201.png\")\n\n", "tags": ["C++", "OpenCV"]}