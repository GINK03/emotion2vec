{"context": "Android \u306e Bluetooth PAN \u306e\u5b9f\u88c5\u306b\u3064\u3044\u3066\u8abf\u3079\u3066\u307f\u307e\u3057\u305f\u3002\n\u5bfe\u8c61\u306e\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u306e\u30d0\u30fc\u30b8\u30e7\u30f3\u306f2016\u5e74\u6642\u70b9\u306emaster\u3067\u3059\u3002\n\n\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30a4\u30b9\u306e\u751f\u6210\nPAN\u3092\u958b\u59cb\u3059\u308b\u3068\u3001bt-pan\u3068\u3044\u3046\u540d\u524d\u306enetwork interface\u304c\u751f\u6210\u3055\u308c\u307e\u3059\u3002\n\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30a4\u30b9\u306e\u751f\u6210\u306fBluetooth\u30d7\u30ed\u30c8\u30b3\u30eb\u30b9\u30bf\u30c3\u30af\u3067\u884c\u3063\u3066\u3044\u307e\u3059\u3002\n\nbtif/include/btif_pan_internal.h\n#define TAP_IF_NAME \"bt-pan\"\n\n\n\nbtif/co/bta_pan_co.cc\nint btpan_tap_open()\n{\n    struct ifreq ifr;\n    int fd, err;\n    const char *clonedev = \"/dev/tun\";\n\n    /* open the clone device */\n\n    if ((fd = open(clonedev, O_RDWR)) < 0)\n    {\n        BTIF_TRACE_DEBUG(\"could not open %s, err:%d\", clonedev, errno);\n        return fd;\n    }\n\n    memset(&ifr, 0, sizeof(ifr));\n    ifr.ifr_flags = IFF_TAP | IFF_NO_PI;\n\n    strncpy(ifr.ifr_name, TAP_IF_NAME, IFNAMSIZ);\n\n    /* try to create the device */\n    if ((err = ioctl(fd, TUNSETIFF, (void *) &ifr)) < 0)\n    {\n        BTIF_TRACE_DEBUG(\"ioctl error:%d, errno:%s\", err, strerror(errno));\n        close(fd);\n        return err;\n    }\n    if (tap_if_up(TAP_IF_NAME, controller_get_interface()->get_address()) == 0)\n    {\n        int flags = fcntl(fd, F_GETFL, 0);\n        fcntl(fd, F_SETFL, flags | O_NONBLOCK);\n        return fd;\n    }\n    BTIF_TRACE_ERROR(\"can not bring up tap interface:%s\", TAP_IF_NAME);\n    close(fd);\n    return INVALID_FD;\n}\n\n\n\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u3092\u8aac\u660e\u3059\u308b\u3068\u3001\n\n/dev/tun\u3068\u3044\u3046tunnel device\u3092OPEN\u3059\u308b\nioctl\u3067\u3001bt-pan \u306e\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30a4\u30b9\u3092\u751f\u6210\u3059\u308b\nioctl\u3067\u3001bt-pan\u3092up\u3059\u308b\u3002 /dev/tun\u3092\u958b\u3044\u305ffile descriptor\u3092\u8fd4\u3059\n\n\n\u30c7\u30fc\u30bf\u306e\u9001\u4fe1\nPAN\u306e\u30c7\u30fc\u30bf\u9001\u4fe1\u306f\u3001PAN\u306e\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30a4\u30b9 bt-pan\u3092\u7d4c\u7531\u3057\u3066\u884c\u308f\u308c\u308b\u3002\nBluetooth\u30d7\u30ed\u30c8\u30b3\u30eb\u30b9\u30bf\u30c3\u30af\u306f\u3001bt-pan\u306b\u66f8\u304d\u8fbc\u307e\u308c\u305f\u30c7\u30fc\u30bf\u306f/dev/tun\u3092\u7d4c\u7531\u3057\u3066\u8aad\u307f\u3060\u3059\u3002\n\nbt-pan\u304b\u3089\u30c7\u30fc\u30bf\u3092\u53d7\u3051\u53d6\u308b\u307e\u3067\nBluetooth\u30d7\u30ed\u30c8\u30b3\u30eb\u30b9\u30bf\u30c3\u30af\u306f/dev/tun\u3092\u8aad\u307f\u51fa\u3059\u305f\u3081\u306b\u3001\u5c02\u7528\u306ethread\u3092\u4f7f\u3046\u3002\nvoid bta_pan_co_open(uint16_t handle, uint8_t app_id, tBTA_PAN_ROLE local_role,\n                            tBTA_PAN_ROLE peer_role, BD_ADDR peer_addr)\n{\n    BTIF_TRACE_API(\"bta_pan_co_open:app_id:%d, local_role:%d, peer_role:%d, \"\n                    \"handle:%d\", app_id, local_role, peer_role, handle);\n    btpan_conn_t* conn = btpan_find_conn_addr(peer_addr);\n    if(conn == NULL)\n        conn = btpan_new_conn(handle, peer_addr, local_role, peer_role);\n    if(conn)\n    {\n        BTIF_TRACE_DEBUG(\"bta_pan_co_open:tap_fd:%d, open_count:%d, \"\n            \"conn->handle:%d should = handle:%d, local_role:%d, remote_role:%d\",\n             btpan_cb.tap_fd, btpan_cb.open_count, conn->handle, handle,\n             conn->local_role, conn->remote_role);\n        //refresh the role & bt address\n\n        btpan_cb.open_count++;\n        conn->handle = handle;\n        //bdcpy(conn->peer, peer_addr);\n        if(btpan_cb.tap_fd < 0)\n        {\n            btpan_cb.tap_fd = btpan_tap_open();\n            if(btpan_cb.tap_fd >= 0)\n                create_tap_read_thread(btpan_cb.tap_fd);\n        }\n         if(btpan_cb.tap_fd >= 0)\n         {\n             btpan_cb.flow = 1;\n             conn->state = PAN_STATE_OPEN;\n             bta_pan_ci_rx_ready(ha*(ndle);\n         }\n     }\n}\n\n\nvoid create_tap_read_thread(int tap_fd) \n{ \n    if (pan_pth < 0) \n        pan_pth = btsock_thread_create(btpan_tap_fd_signaled, NULL); \n    if (pan_pth >= 0) \n        btsock_thread_add_fd(pan_pth, tap_fd, 0, SOCK_THREAD_FD_RD, 0); \n} \n\n\nstatic void btpan_tap_fd_signaled(int fd, int type, int flags, uint32_t user_id) { \n    assert(btpan_cb.tap_fd == INVALID_FD || btpan_cb.tap_fd == fd); \n\n    if (btpan_cb.tap_fd != fd) { \n        BTIF_TRACE_WARNING(\"%s Signaled on mismatched fds exp:%d act:%d\\n\", \n                __func__, btpan_cb.tap_fd, fd); \n        return; \n    } \n\n    if (flags & SOCK_THREAD_FD_EXCEPTION) { \n        btpan_cb.tap_fd = INVALID_FD; \n        btpan_tap_close(fd); \n        btif_pan_close_all_conns(); \n    } else if (flags & SOCK_THREAD_FD_RD) \n        bta_dmexecutecallback(btu_exec_tap_fd_read, INT_TO_PTR(fd)); \n}\n\n\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u3092\u8aac\u660e\u3059\u308b\u3068\n\n\u5148\u307b\u3069\u8aac\u660e\u3057\u305fbtpan_tap_open()\u3067bt-pan\u306e\u751f\u6210\u3068/dev/tun\u306eopen\u3092\u884c\u3046\ncreate_tap_read_thread()\u3067\u30b9\u30ec\u30c3\u30c9\u3092\u751f\u6210\u3059\u308b\u3002\n\u30b9\u30ec\u30c3\u30c9\u306fbtpan_tap_fd_signaled()\u3067signal\u51e6\u7406\u3092\u3057\u3001/dev/tun\u306efd\u3068\u95a2\u9023\u3065\u3051\u3089\u308c\u308b\n\u30b9\u30ec\u30c3\u30c9\u306fSOCK_THREAD_FD_RD\u306e\u30b7\u30b0\u30ca\u30eb\u3092\u53d7\u4fe1\u3059\u308b\u3068\u3001PAN\u306e\u9001\u4fe1\u30c7\u30fc\u30bf\u3092bta_dmexecutecallback()\u306b\u6e21\u3059\n\n\nPAN\u306e\u9001\u4fe1\n        bta_dmexecutecallback(btu_exec_tap_fd_read, INT_TO_PTR(fd)); \n\n\u306e\u5148\u306e\u8a71\u3067\u3059\u3002bta\u306e\u30b3\u30fc\u30eb\u30d0\u30c3\u30af\u3068\u3057\u3066btu_exec_tap_fd_read()\u3092\u5b9f\u884c\u3057\u307e\u3059\u3002\n\nbuffer \u3092\u78ba\u4fdd\u3059\u308b\u3002\nread()\u3067buffer\u306b\u9001\u4fe1\u30c7\u30fc\u30bf\u3092\u30b3\u30d4\u30fc\u3059\u308b\n\u9001\u4fe1\u30c7\u30fc\u30bf\u3092forward_bnep()\u306b\u6e21\u3059\nforward_bnep()\u306fPAN_WriteBuf()\u306b\u9001\u4fe1\u30c7\u30fc\u30bf\u3092\u6e21\u3059\u3002\nPAN_WriteBuf()\u306fBNEP_Write()\u306b\u9001\u4fe1\u30c7\u30fc\u30bf\u3092\u6e21\u3059\u3002\n\n\nBluetooth PAN\u306e Java\u90e8\u5206\nframeworks/base \u306b PAN\u306e\u30b3\u30fc\u30c9\u304c\u542b\u307e\u308c\u3066\u3044\u308b\nframeworks/base/core/java/android/bluetooth/BluetoothPan.java\n\nBluetooth tethering\nBluetooth \u30c6\u30b6\u30ea\u30f3\u30b0\u306e\u30b3\u30fc\u30c9\u306fframeworks/base \u306b\u542b\u307e\u308c\u3066\u3044\u308b\u3002\nframeworks/base/services/core/java/com/android/server/connectivity/Tethering.java\n\u30c6\u30b6\u30ea\u30f3\u30b0\u3092\u6709\u52b9\u306b\u3057\u3066\u3044\u308b\u90e8\u5206\u3002TetherInterfaceSM\u306f\u30c6\u30b6\u30ea\u30f3\u30b0\u306e\u30b9\u30c6\u30fc\u30c8\u30de\u30b7\u30f3\u306e\u30af\u30e9\u30b9\u3002\n\n            TetherInterfaceSM sm = mIfaces.get(iface);\n            if (sm != null) {\n                if (VDBG) Log.d(TAG, \"active iface (\" + iface + \") reported as added, ignoring\");\n                return;\n            }\n            sm = new TetherInterfaceSM(iface, mLooper, usb);\n            mIfaces.put(iface, sm);\n            sm.start();\n\nAndroid \u306e Bluetooth PAN \u306e\u5b9f\u88c5\u306b\u3064\u3044\u3066\u8abf\u3079\u3066\u307f\u307e\u3057\u305f\u3002\n\n\u5bfe\u8c61\u306e\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u306e\u30d0\u30fc\u30b8\u30e7\u30f3\u306f2016\u5e74\u6642\u70b9\u306emaster\u3067\u3059\u3002\n\n# \u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30a4\u30b9\u306e\u751f\u6210\nPAN\u3092\u958b\u59cb\u3059\u308b\u3068\u3001bt-pan\u3068\u3044\u3046\u540d\u524d\u306enetwork interface\u304c\u751f\u6210\u3055\u308c\u307e\u3059\u3002\n\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30a4\u30b9\u306e\u751f\u6210\u306fBluetooth\u30d7\u30ed\u30c8\u30b3\u30eb\u30b9\u30bf\u30c3\u30af\u3067\u884c\u3063\u3066\u3044\u307e\u3059\u3002\n\n```C:btif/include/btif_pan_internal.h\n#define TAP_IF_NAME \"bt-pan\"\n```\n\n```C:btif/co/bta_pan_co.cc\nint btpan_tap_open()\n{\n    struct ifreq ifr;\n    int fd, err;\n    const char *clonedev = \"/dev/tun\";\n\n    /* open the clone device */\n\n    if ((fd = open(clonedev, O_RDWR)) < 0)\n    {\n        BTIF_TRACE_DEBUG(\"could not open %s, err:%d\", clonedev, errno);\n        return fd;\n    }\n\n    memset(&ifr, 0, sizeof(ifr));\n    ifr.ifr_flags = IFF_TAP | IFF_NO_PI;\n\n    strncpy(ifr.ifr_name, TAP_IF_NAME, IFNAMSIZ);\n\n    /* try to create the device */\n    if ((err = ioctl(fd, TUNSETIFF, (void *) &ifr)) < 0)\n    {\n        BTIF_TRACE_DEBUG(\"ioctl error:%d, errno:%s\", err, strerror(errno));\n        close(fd);\n        return err;\n    }\n    if (tap_if_up(TAP_IF_NAME, controller_get_interface()->get_address()) == 0)\n    {\n        int flags = fcntl(fd, F_GETFL, 0);\n        fcntl(fd, F_SETFL, flags | O_NONBLOCK);\n        return fd;\n    }\n    BTIF_TRACE_ERROR(\"can not bring up tap interface:%s\", TAP_IF_NAME);\n    close(fd);\n    return INVALID_FD;\n}\n```\n\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u3092\u8aac\u660e\u3059\u308b\u3068\u3001\n\n* /dev/tun\u3068\u3044\u3046tunnel device\u3092OPEN\u3059\u308b\n* ioctl\u3067\u3001bt-pan \u306e\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30a4\u30b9\u3092\u751f\u6210\u3059\u308b\n* ioctl\u3067\u3001bt-pan\u3092up\u3059\u308b\u3002 /dev/tun\u3092\u958b\u3044\u305ffile descriptor\u3092\u8fd4\u3059\n\n# \u30c7\u30fc\u30bf\u306e\u9001\u4fe1\nPAN\u306e\u30c7\u30fc\u30bf\u9001\u4fe1\u306f\u3001PAN\u306e\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30a4\u30b9 bt-pan\u3092\u7d4c\u7531\u3057\u3066\u884c\u308f\u308c\u308b\u3002\n\nBluetooth\u30d7\u30ed\u30c8\u30b3\u30eb\u30b9\u30bf\u30c3\u30af\u306f\u3001bt-pan\u306b\u66f8\u304d\u8fbc\u307e\u308c\u305f\u30c7\u30fc\u30bf\u306f/dev/tun\u3092\u7d4c\u7531\u3057\u3066\u8aad\u307f\u3060\u3059\u3002\n\n\n## bt-pan\u304b\u3089\u30c7\u30fc\u30bf\u3092\u53d7\u3051\u53d6\u308b\u307e\u3067\n\nBluetooth\u30d7\u30ed\u30c8\u30b3\u30eb\u30b9\u30bf\u30c3\u30af\u306f/dev/tun\u3092\u8aad\u307f\u51fa\u3059\u305f\u3081\u306b\u3001\u5c02\u7528\u306ethread\u3092\u4f7f\u3046\u3002\n\n```c\nvoid bta_pan_co_open(uint16_t handle, uint8_t app_id, tBTA_PAN_ROLE local_role,\n                            tBTA_PAN_ROLE peer_role, BD_ADDR peer_addr)\n{\n    BTIF_TRACE_API(\"bta_pan_co_open:app_id:%d, local_role:%d, peer_role:%d, \"\n                    \"handle:%d\", app_id, local_role, peer_role, handle);\n    btpan_conn_t* conn = btpan_find_conn_addr(peer_addr);\n    if(conn == NULL)\n        conn = btpan_new_conn(handle, peer_addr, local_role, peer_role);\n    if(conn)\n    {\n        BTIF_TRACE_DEBUG(\"bta_pan_co_open:tap_fd:%d, open_count:%d, \"\n            \"conn->handle:%d should = handle:%d, local_role:%d, remote_role:%d\",\n             btpan_cb.tap_fd, btpan_cb.open_count, conn->handle, handle,\n             conn->local_role, conn->remote_role);\n        //refresh the role & bt address\n\n        btpan_cb.open_count++;\n        conn->handle = handle;\n        //bdcpy(conn->peer, peer_addr);\n        if(btpan_cb.tap_fd < 0)\n        {\n            btpan_cb.tap_fd = btpan_tap_open();\n            if(btpan_cb.tap_fd >= 0)\n                create_tap_read_thread(btpan_cb.tap_fd);\n        }\n         if(btpan_cb.tap_fd >= 0)\n         {\n             btpan_cb.flow = 1;\n             conn->state = PAN_STATE_OPEN;\n             bta_pan_ci_rx_ready(ha*(ndle);\n         }\n     }\n}\n\n```\n\n```\nvoid create_tap_read_thread(int tap_fd) \n{ \n    if (pan_pth < 0) \n        pan_pth = btsock_thread_create(btpan_tap_fd_signaled, NULL); \n    if (pan_pth >= 0) \n        btsock_thread_add_fd(pan_pth, tap_fd, 0, SOCK_THREAD_FD_RD, 0); \n} \n\n```\n\n```\nstatic void btpan_tap_fd_signaled(int fd, int type, int flags, uint32_t user_id) { \n    assert(btpan_cb.tap_fd == INVALID_FD || btpan_cb.tap_fd == fd); \n \n    if (btpan_cb.tap_fd != fd) { \n        BTIF_TRACE_WARNING(\"%s Signaled on mismatched fds exp:%d act:%d\\n\", \n                __func__, btpan_cb.tap_fd, fd); \n        return; \n    } \n \n    if (flags & SOCK_THREAD_FD_EXCEPTION) { \n        btpan_cb.tap_fd = INVALID_FD; \n        btpan_tap_close(fd); \n        btif_pan_close_all_conns(); \n    } else if (flags & SOCK_THREAD_FD_RD) \n        bta_dmexecutecallback(btu_exec_tap_fd_read, INT_TO_PTR(fd)); \n}\n```\n\n\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u3092\u8aac\u660e\u3059\u308b\u3068\n\n* \u5148\u307b\u3069\u8aac\u660e\u3057\u305fbtpan_tap_open()\u3067bt-pan\u306e\u751f\u6210\u3068/dev/tun\u306eopen\u3092\u884c\u3046\n* create_tap_read_thread()\u3067\u30b9\u30ec\u30c3\u30c9\u3092\u751f\u6210\u3059\u308b\u3002\n* \u30b9\u30ec\u30c3\u30c9\u306fbtpan_tap_fd_signaled()\u3067signal\u51e6\u7406\u3092\u3057\u3001/dev/tun\u306efd\u3068\u95a2\u9023\u3065\u3051\u3089\u308c\u308b\n* \u30b9\u30ec\u30c3\u30c9\u306fSOCK_THREAD_FD_RD\u306e\u30b7\u30b0\u30ca\u30eb\u3092\u53d7\u4fe1\u3059\u308b\u3068\u3001PAN\u306e\u9001\u4fe1\u30c7\u30fc\u30bf\u3092bta_dmexecutecallback()\u306b\u6e21\u3059\n\n## PAN\u306e\u9001\u4fe1\n\n```\n        bta_dmexecutecallback(btu_exec_tap_fd_read, INT_TO_PTR(fd)); \n```\n\n\u306e\u5148\u306e\u8a71\u3067\u3059\u3002bta\u306e\u30b3\u30fc\u30eb\u30d0\u30c3\u30af\u3068\u3057\u3066btu_exec_tap_fd_read()\u3092\u5b9f\u884c\u3057\u307e\u3059\u3002\n \n* buffer \u3092\u78ba\u4fdd\u3059\u308b\u3002\n* read()\u3067buffer\u306b\u9001\u4fe1\u30c7\u30fc\u30bf\u3092\u30b3\u30d4\u30fc\u3059\u308b\n* \u9001\u4fe1\u30c7\u30fc\u30bf\u3092forward_bnep()\u306b\u6e21\u3059\n* forward_bnep()\u306fPAN_WriteBuf()\u306b\u9001\u4fe1\u30c7\u30fc\u30bf\u3092\u6e21\u3059\u3002\n* PAN_WriteBuf()\u306fBNEP_Write()\u306b\u9001\u4fe1\u30c7\u30fc\u30bf\u3092\u6e21\u3059\u3002\n\n# Bluetooth PAN\u306e Java\u90e8\u5206\n\nframeworks/base \u306b PAN\u306e\u30b3\u30fc\u30c9\u304c\u542b\u307e\u308c\u3066\u3044\u308b\n\nframeworks/base/core/java/android/bluetooth/BluetoothPan.java\n\n# Bluetooth tethering\n\nBluetooth \u30c6\u30b6\u30ea\u30f3\u30b0\u306e\u30b3\u30fc\u30c9\u306fframeworks/base \u306b\u542b\u307e\u308c\u3066\u3044\u308b\u3002\n\nframeworks/base/services/core/java/com/android/server/connectivity/Tethering.java\n\n\u30c6\u30b6\u30ea\u30f3\u30b0\u3092\u6709\u52b9\u306b\u3057\u3066\u3044\u308b\u90e8\u5206\u3002TetherInterfaceSM\u306f\u30c6\u30b6\u30ea\u30f3\u30b0\u306e\u30b9\u30c6\u30fc\u30c8\u30de\u30b7\u30f3\u306e\u30af\u30e9\u30b9\u3002\n```\n            TetherInterfaceSM sm = mIfaces.get(iface);\n            if (sm != null) {\n                if (VDBG) Log.d(TAG, \"active iface (\" + iface + \") reported as added, ignoring\");\n                return;\n            }\n            sm = new TetherInterfaceSM(iface, mLooper, usb);\n            mIfaces.put(iface, sm);\n            sm.start();\n```\n\n\n\n", "tags": ["Android", "bluetooth"]}