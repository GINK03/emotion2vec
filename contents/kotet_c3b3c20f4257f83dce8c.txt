{"context": "\u884c\u5217\u306b\u8208\u5473\u304c\u3042\u308b\u3002\u3057\u304b\u3057\u6570C\u306f\u5ec3\u6b62\u3055\u308c\u3001\u884c\u5217\u306e\u52c9\u5f37\u306f\u3057\u306a\u3044\u3068\u306e\u3053\u3068\u306a\u306e\u3067\u5c11\u3057\u3065\u3064\u81ea\u4e3b\u5b66\u7fd2\u3002\n\u3068\u308a\u3042\u3048\u305a\u884c\u5217\u306e\u7a4d\u306b\u3064\u3044\u3066\u7406\u89e3\u3067\u304d\u305f\u306e\u3067\u30d7\u30ed\u30b0\u30e9\u30e0\u306b\u3057\u3066\u307f\u308b\u3002\u3064\u3044\u3067\u306b\u524d\u304b\u3089\u3084\u3063\u3066\u307f\u305f\u304b\u3063\u305f\u4e26\u5217\u51e6\u7406\u3068\u304b\u3092\u8a66\u3057\u3066\u901f\u5ea6\u3092\u306f\u304b\u308b\u3002  \n\n\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\n100\u6b21\u306e\u6b63\u65b9\u884c\u5217\u30921000\u56de\u304b\u3051\u308b\u3002\n//import\u7565\n\nalias int[][] matrix;\n\nmatrix matrix_product(matrix A,matrix B)\nin{\n    assert(A[0].length == B.length);\n    }\nbody{\n    //\u3053\u3053\u306b\u51e6\u7406\u3092\u66f8\u304f\n    }\n\nvoid init_matrix(ref matrix A){\n    foreach(ref row;A){\n        foreach(ref n;row){\n            n = uniform(-10,10);\n        }\n    }\n}\n\nvoid main(){\n    matrix A = [\n        [2,-1],\n        [-3,4]];\n    matrix B = [\n        [1],\n        [2]];\n    matrix C = [\n        [1,-1],\n        [-2,3]];\n    matrix D = [\n        [1,2],\n        [3,4]];\n    matrix E = [\n        [1,2]];\n    matrix F = [\n        [2,-1],\n        [-3,4]];\n    assert(matrix_product(A,B) == [[0],[5]]);\n    assert(matrix_product(C,D) == [[-2,-2],[7,8]]);\n    assert(matrix_product(E,F) == [[-4,7]]);\n\n    StopWatch sw;\n    int n = 1000;\n    matrix[][] testdata = new matrix[][](n,2);\n    foreach(i;0..n){\n        testdata[i][0] = new matrix(100,100);\n        testdata[i][1] = new matrix(100,100);\n        init_matrix(testdata[i][0]);\n        init_matrix(testdata[i][1]);\n    }\n    sw.start();\n    foreach(i; 0..n) matrix_product(testdata[i][0],testdata[i][1]);\n    sw.stop();\n    writeln(n,\" times done.\u3000time: \", sw.peek().msecs, \"[ms]\");\n    }\n\n\n1. \u5358\u7d14\u306a\u3084\u308a\u65b9\n\nprod_1.d\nmatrix matrix_product(matrix A,matrix B)\nin{\n    assert(A[0].length == B.length);\n    }\nbody{\n    matrix result = new matrix(A.length,B[0].length);\n    foreach(k,row;A){\n        foreach(i;0..B[0].length){\n            int sum;\n            foreach(j;0..row.length){\n                sum += B[j][i] * row[j];\n            }\n            result[k][i] = sum;\n        }\n    }\n    return result;\n    }\n\n\n$ dmd prod_1\n$ ./prod_1\n1000 times done. time: 6411[ms]\n$ ./prod_1\n1000 times done. time: 6389[ms]\n$ ./prod_1\n1000 times done. time: 6402[ms]\n\n$ dmd prod_1 -O\n$ ./prod_1\n1000 times done. time: 3570[ms]\n$ ./prod_1\n1000 times done. time: 3511[ms]\n$ ./prod_1\n1000 times done. time: 3502[ms]\n\nOptimize\u3064\u3051\u308b\u3060\u3051\u3067\u500d\u304f\u3089\u3044\u901f\u304f\u306a\u308b\u3002\n\n2. parallel\u3092\u3064\u3051\u308b\n\u884c\u3092\u4e26\u5217\u3067\u51e6\u7406\u3059\u308b\u3002\u3053\u3093\u306a\u66f8\u304d\u65b9\u3067\u3044\u3044\u306e\u3060\u308d\u3046\u304b?\n\nprod_2.d\nmatrix matrix_product(matrix A,matrix B)\nin{\n    assert(A[0].length == B.length);\n    }\nbody{\n    matrix result = new matrix(A.length,B[0].length);\n    foreach(k,row;A.parallel){\n        foreach(i;0..B[0].length){\n            int sum;\n            foreach(j;0..row.length){\n                sum += B[j][i] * row[j];\n            }\n            result[k][i] = sum;\n        }\n    }\n    return result;\n    }\n\n\ndmd prod_2\n$ ./prod_2\n1000 times done. time: 4143[ms]\n$ ./prod_2\n1000 times done. time: 4164[ms]\n$ ./prod_2\n1000 times done. time: 4187[ms]\n\n$ dmd prod_2 -O\n$ ./prod_2\n1000 times done. time: 2420[ms]\n$ ./prod_2\n1000 times done. time: 2440[ms]\n$ ./prod_2\n1000 times done. time: 2437[ms]\n\nCPU\u306f4\u3064\u3042\u308b\u306e\u3060\u304c\u3001\u9ad8\u901f\u5316\u306f\u534a\u5206\u304f\u3089\u3044\u306b\u3002\n\n3. SIMD\n\nprod_3.d\nmatrix matrix_product(matrix A,matrix B)\nin{\n    assert(A[0].length == B.length);\n    }\nbody{\n    ulong blen = B[0].length;\n    matrix result = new matrix(A.length,blen);\n    foreach(k,row;A){\n        int4 v;\n        int[] tmp = new int[](blen);\n        foreach(i,a;row){\n            foreach(j;0..blen/4+1){\n                v.array[0] = (j<blen)?B[i][j*4]:0;\n                v.array[1] = (j+1<blen)?B[i][j*4+1]:0;\n                v.array[2] = (j+2<blen)?B[i][j*4+2]:0;\n                v.array[3] = (j+3<blen)?B[i][j*4+3]:0;\n                v = a*v;\n                tmp[j*4] += v.array[0];\n                tmp[j*4+1] += v.array[1];\n                tmp[j*4+2] += v.array[2];\n                tmp[j*4+3] += v.array[3];\n            }\n        }\n        result[k] = tmp;\n    }\n    return result;\n    }\n\n\n\u3057\u304b\u3057\u3053\u306e\u30b3\u30fc\u30c9\u52d5\u304b\u306a\u3044\u3002\n$ dmd prod_3\nprod_3.d(28): Error: incompatible types for ((cast(__vector(int[4]))a) * (v)): '__vector(int[4])' and '__vector(int[4])'\n\n\u305d\u3082\u305d\u3082SIMD\u306b\u89e6\u308c\u305f\u306e\u304c\u521d\u3081\u3066\u3060\u3057\u3001\u3053\u306e\u4f7f\u3044\u65b9\u304c\u6b63\u3057\u3044\u306e\u304b\u3082\u308f\u304b\u3089\u306a\u3044\u3002\nOpenCL\u3068\u304b\u3082\u4f7f\u3063\u3066\u307f\u305f\u304b\u3063\u305f\u304c\u4eca\u56de\u306f\u4f55\u3082\u3067\u304d\u3066\u3044\u306a\u3044\u3002\u305d\u306e\u3046\u3061\u66f8\u3051\u308b\u3088\u3046\u306b\u306a\u308c\u3070\u3044\u3044\u306a\u3002\n\n\u307e\u3068\u3081\n3\u56de\u306e\u8a08\u6e2c\u306e\u5e73\u5747\u3092\u3068\u3063\u305f\u3002\n\n\n\n1. \u5358\u7d14\u306a\u3084\u308a\u65b9\n1-A. -O\u3092\u3064\u3051\u308b\n2. parallel\u3092\u3064\u3051\u308b\n2-A. -O\u3092\u3064\u3051\u308b\n\n\n\n\n6401\n3528\n4165\n2432\n\n\n\nparallel\u3067\u304d\u308b\u3068\u3053\u308d\u3092\u898b\u3064\u3051\u308b\u3088\u308a\u3082\u6700\u9069\u5316\u30aa\u30d7\u30b7\u30e7\u30f3\u3092\u3064\u3051\u308b\u306e\u3092\u5fd8\u308c\u306a\u3044\u307b\u3046\u304c\u901f\u304f\u306a\u308b\u306e\u306f\u610f\u5916\u3060\u3063\u305f\u3002\n\u884c\u5217\u306b\u8208\u5473\u304c\u3042\u308b\u3002\u3057\u304b\u3057\u6570C\u306f\u5ec3\u6b62\u3055\u308c\u3001\u884c\u5217\u306e\u52c9\u5f37\u306f\u3057\u306a\u3044\u3068\u306e\u3053\u3068\u306a\u306e\u3067\u5c11\u3057\u3065\u3064\u81ea\u4e3b\u5b66\u7fd2\u3002  \n\u3068\u308a\u3042\u3048\u305a\u884c\u5217\u306e\u7a4d\u306b\u3064\u3044\u3066\u7406\u89e3\u3067\u304d\u305f\u306e\u3067\u30d7\u30ed\u30b0\u30e9\u30e0\u306b\u3057\u3066\u307f\u308b\u3002\u3064\u3044\u3067\u306b\u524d\u304b\u3089\u3084\u3063\u3066\u307f\u305f\u304b\u3063\u305f\u4e26\u5217\u51e6\u7406\u3068\u304b\u3092\u8a66\u3057\u3066\u901f\u5ea6\u3092\u306f\u304b\u308b\u3002  \n\n# \u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\n\n100\u6b21\u306e\u6b63\u65b9\u884c\u5217\u30921000\u56de\u304b\u3051\u308b\u3002\n\n```d\n//import\u7565\n\nalias int[][] matrix;\n\nmatrix matrix_product(matrix A,matrix B)\nin{\n\tassert(A[0].length == B.length);\n\t}\nbody{\n\t//\u3053\u3053\u306b\u51e6\u7406\u3092\u66f8\u304f\n\t}\n\nvoid init_matrix(ref matrix A){\n\tforeach(ref row;A){\n\t\tforeach(ref n;row){\n\t\t\tn = uniform(-10,10);\n\t\t}\n\t}\n}\n\nvoid main(){\n\tmatrix A = [\n\t\t[2,-1],\n\t\t[-3,4]];\n\tmatrix B = [\n\t\t[1],\n\t\t[2]];\n\tmatrix C = [\n\t\t[1,-1],\n\t\t[-2,3]];\n\tmatrix D = [\n\t\t[1,2],\n\t\t[3,4]];\n\tmatrix E = [\n\t\t[1,2]];\n\tmatrix F = [\n\t\t[2,-1],\n\t\t[-3,4]];\n\tassert(matrix_product(A,B) == [[0],[5]]);\n\tassert(matrix_product(C,D) == [[-2,-2],[7,8]]);\n\tassert(matrix_product(E,F) == [[-4,7]]);\n\n\tStopWatch sw;\n\tint n = 1000;\n\tmatrix[][] testdata = new matrix[][](n,2);\n\tforeach(i;0..n){\n\t\ttestdata[i][0] = new matrix(100,100);\n\t\ttestdata[i][1] = new matrix(100,100);\n\t\tinit_matrix(testdata[i][0]);\n\t\tinit_matrix(testdata[i][1]);\n\t}\n\tsw.start();\n\tforeach(i; 0..n) matrix_product(testdata[i][0],testdata[i][1]);\n\tsw.stop();\n\twriteln(n,\" times done.\u3000time: \", sw.peek().msecs, \"[ms]\");\n\t}\n```\n\n# 1. \u5358\u7d14\u306a\u3084\u308a\u65b9\n\n```d:prod_1.d\nmatrix matrix_product(matrix A,matrix B)\nin{\n\tassert(A[0].length == B.length);\n\t}\nbody{\n\tmatrix result = new matrix(A.length,B[0].length);\n\tforeach(k,row;A){\n\t\tforeach(i;0..B[0].length){\n\t\t\tint sum;\n\t\t\tforeach(j;0..row.length){\n\t\t\t\tsum += B[j][i] * row[j];\n\t\t\t}\n\t\t\tresult[k][i] = sum;\n\t\t}\n\t}\n\treturn result;\n\t}\n```\n\n```console\n$ dmd prod_1\n$ ./prod_1\n1000 times done. time: 6411[ms]\n$ ./prod_1\n1000 times done. time: 6389[ms]\n$ ./prod_1\n1000 times done. time: 6402[ms]\n```\n\n```console\n$ dmd prod_1 -O\n$ ./prod_1\n1000 times done. time: 3570[ms]\n$ ./prod_1\n1000 times done. time: 3511[ms]\n$ ./prod_1\n1000 times done. time: 3502[ms]\n```\n\nOptimize\u3064\u3051\u308b\u3060\u3051\u3067\u500d\u304f\u3089\u3044\u901f\u304f\u306a\u308b\u3002\n\n# 2. parallel\u3092\u3064\u3051\u308b\n\n\u884c\u3092\u4e26\u5217\u3067\u51e6\u7406\u3059\u308b\u3002\u3053\u3093\u306a\u66f8\u304d\u65b9\u3067\u3044\u3044\u306e\u3060\u308d\u3046\u304b?\n\n```d:prod_2.d\nmatrix matrix_product(matrix A,matrix B)\nin{\n\tassert(A[0].length == B.length);\n\t}\nbody{\n\tmatrix result = new matrix(A.length,B[0].length);\n\tforeach(k,row;A.parallel){\n\t\tforeach(i;0..B[0].length){\n\t\t\tint sum;\n\t\t\tforeach(j;0..row.length){\n\t\t\t\tsum += B[j][i] * row[j];\n\t\t\t}\n\t\t\tresult[k][i] = sum;\n\t\t}\n\t}\n\treturn result;\n\t}\n```\n\n```console\ndmd prod_2\n$ ./prod_2\n1000 times done. time: 4143[ms]\n$ ./prod_2\n1000 times done. time: 4164[ms]\n$ ./prod_2\n1000 times done. time: 4187[ms]\n```\n\n```console\n$ dmd prod_2 -O\n$ ./prod_2\n1000 times done. time: 2420[ms]\n$ ./prod_2\n1000 times done. time: 2440[ms]\n$ ./prod_2\n1000 times done. time: 2437[ms]\n```\n\nCPU\u306f4\u3064\u3042\u308b\u306e\u3060\u304c\u3001\u9ad8\u901f\u5316\u306f\u534a\u5206\u304f\u3089\u3044\u306b\u3002\n\n# 3. SIMD\n\n```d:prod_3.d\nmatrix matrix_product(matrix A,matrix B)\nin{\n\tassert(A[0].length == B.length);\n\t}\nbody{\n\tulong blen = B[0].length;\n\tmatrix result = new matrix(A.length,blen);\n\tforeach(k,row;A){\n\t\tint4 v;\n\t\tint[] tmp = new int[](blen);\n\t\tforeach(i,a;row){\n\t\t\tforeach(j;0..blen/4+1){\n\t\t\t\tv.array[0] = (j<blen)?B[i][j*4]:0;\n\t\t\t\tv.array[1] = (j+1<blen)?B[i][j*4+1]:0;\n\t\t\t\tv.array[2] = (j+2<blen)?B[i][j*4+2]:0;\n\t\t\t\tv.array[3] = (j+3<blen)?B[i][j*4+3]:0;\n\t\t\t\tv = a*v;\n\t\t\t\ttmp[j*4] += v.array[0];\n\t\t\t\ttmp[j*4+1] += v.array[1];\n\t\t\t\ttmp[j*4+2] += v.array[2];\n\t\t\t\ttmp[j*4+3] += v.array[3];\n\t\t\t}\n\t\t}\n\t\tresult[k] = tmp;\n\t}\n\treturn result;\n\t}\n```\n\n\u3057\u304b\u3057\u3053\u306e\u30b3\u30fc\u30c9\u52d5\u304b\u306a\u3044\u3002\n\n```console\n$ dmd prod_3\nprod_3.d(28): Error: incompatible types for ((cast(__vector(int[4]))a) * (v)): '__vector(int[4])' and '__vector(int[4])'\n```\n\n\u305d\u3082\u305d\u3082SIMD\u306b\u89e6\u308c\u305f\u306e\u304c\u521d\u3081\u3066\u3060\u3057\u3001\u3053\u306e\u4f7f\u3044\u65b9\u304c\u6b63\u3057\u3044\u306e\u304b\u3082\u308f\u304b\u3089\u306a\u3044\u3002  \nOpenCL\u3068\u304b\u3082\u4f7f\u3063\u3066\u307f\u305f\u304b\u3063\u305f\u304c\u4eca\u56de\u306f\u4f55\u3082\u3067\u304d\u3066\u3044\u306a\u3044\u3002\u305d\u306e\u3046\u3061\u66f8\u3051\u308b\u3088\u3046\u306b\u306a\u308c\u3070\u3044\u3044\u306a\u3002\n\n# \u307e\u3068\u3081\n\n3\u56de\u306e\u8a08\u6e2c\u306e\u5e73\u5747\u3092\u3068\u3063\u305f\u3002\n\n| 1. \u5358\u7d14\u306a\u3084\u308a\u65b9 | 1-A. -O\u3092\u3064\u3051\u308b | 2. parallel\u3092\u3064\u3051\u308b | 2-A. -O\u3092\u3064\u3051\u308b\n|--:|--:|--:|--:|\n| 6401 | 3528 | 4165 | 2432 |\n\nparallel\u3067\u304d\u308b\u3068\u3053\u308d\u3092\u898b\u3064\u3051\u308b\u3088\u308a\u3082\u6700\u9069\u5316\u30aa\u30d7\u30b7\u30e7\u30f3\u3092\u3064\u3051\u308b\u306e\u3092\u5fd8\u308c\u306a\u3044\u307b\u3046\u304c\u901f\u304f\u306a\u308b\u306e\u306f\u610f\u5916\u3060\u3063\u305f\u3002\n", "tags": ["dlang", "\u6570\u5b66", "\u884c\u5217"]}