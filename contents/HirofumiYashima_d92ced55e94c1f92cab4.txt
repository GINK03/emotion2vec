{"context": " More than 1 year has passed since last update.\n\nLU\u5206\u89e3\u306e\u8a08\u7b97\u624b\u9806\n\n\u4ee5\u4e0b\u306e\u30a6\u30a7\u30d6\u30b5\u30a4\u30c8\u304c\u5206\u304b\u308a\u3084\u3059\u3044\u3067\u3059\u3002\n\n\uff08 \u53c2\u8003 \uff09\u7269\u7406\u306e\u304b\u304e\u3057\u3063\u307d  \u300cLU\u5206\u89e3\u300d\n\n\n\u4ee5\u4e0b\u306f\u3001\u4e0a\u8a18\u30a6\u30a7\u30d6\u30b5\u30a4\u30c8\u3067\u8aac\u660e\u3055\u308c\u3066\u3044\u308b\u8a08\u7b97\u624b\u9806\u306e\u304a\u308f\u308a\u306e\u90e8\u5206\u306e\u307f\u306e\u629c\u7c8b\u3067\u3059\u3002\n\n\n\n\n( \u62e1\u5927 )\u3000\n\n\n\u4e0a\u8a18\u306eC++\u8a00\u8a9e\u3067\u306e\u5b9f\u88c5\n\n\n\u30e1\u30e2\u5e33X\u3055\u3093 \u300cLU\u5206\u89e3\u3092\u4f7f\u3063\u3066n\u5143\u9023\u7acb1\u6b21\u65b9\u7a0b\u5f0f\u3092\u89e3\u304f\u300d\n\n\n\u4e0a\u8a18\u306e\u30a6\u30a7\u30d6\u30b5\u30a4\u30c8\u3067\u306f\u3001\u4e0a\u3067\u898b\u3066\u304d\u305f\u51e6\u7406\u3068\u540c\u3058\u8981\u9818\u3067\u3001\u4e0a\u4e09\u89d2\u884c\u5217\u90e8\u5206\u3092\u6c42\u3081\u308b\u51e6\u7406\u3000\u3068\u3000\u4e0b\u4e09\u89d2\u884c\u5217\u90e8\u5206\u3092\u6c42\u3081\u308b\u51e6\u7406\u3068\u3067\u3001\u5225\u3005\u306e\u51e6\u7406\u3092\u5b9f\u884c\u3057\u3066\u3044\u307e\u3059\u3002\n\n\n\n1.\u3010\u3000i>j (\u884c\u756a\u53f7 i > \u5217\u756a\u53f7 j \u3064\u307e\u308a\u3000\u4e0b\u4e09\u89d2\u884c\u5217L\uff09\u3000\u306e\u5834\u5408\u306b\u5b9f\u884c\u3059\u308b\u51e6\u7406\u3000\u3011\n\n\n(1)\u3000\u7dcf\u548c\u8a08\u7b97\u2211\u90e8\u5206\u3000 for(int k=0;k<j;k++)\u3000\uff4b\u306f\u3001\uff10\u756a\u5730\u304b\u3089  \uff4a \u756a\u5730\u672a\u6e80 \u307e\u3067\u3001\u8db3\u3057\u4e0a\u3052\u308b\n\n\n(2)\u3000L[i][j] \u3092\u6c42\u3081\u308b\u3068\u304d\u3001\uff08A[i][j]-sum)\u3000\u3092\u3000U[j][j]\u3000\u3067\u5272\u308b\u3002\n\n\n2.\u3010 else \uff1d>\u3000i<=j (\u884c\u756a\u53f7 i  <=\u3000\u5217\u756a\u53f7 j\u3000\u3064\u307e\u308a\u3000\u4e0a\u4e09\u89d2\u884c\u5217U\uff09\u3000\u306e\u5834\u5408\u306b\u5b9f\u884c\u3059\u308b\u51e6\u7406\u3000\u3011\n\n\n(1)  \u7dcf\u548c\u8a08\u7b97\u2211\u90e8\u5206\u3000\u3000for(int k=0;k<i;k++) \uff4b\u306f\u3001\uff10\u756a\u5730\u304b\u3089 __i \u756a\u5730\u672a\u6e80 \u307e\u3067\u3001\u8db3\u3057\u4e0a\u3052\u308b\u3002__\n\n(2)  U[i][j] \u3092\u6c42\u3081\u308b\u3068\u304d\u3001\uff08A[i][j]-sum)\u3000\u3092\u3000U[j][j]\u3000\u3067\u5272\u3089\u306a\u3044\u3002\n\n\n\n\u4ee5\u4e0a\u3092\u5b9f\u88c5\u3057\u3066\u3044\u308b\u306e\u306f\u3001\u30b3\u30fc\u30c9\u306e\u6b21\u306e\u90e8\u5206\u3067\u3059\u3002\n\n\nif(i>j){\n           /*L\u6210\u5206\u3092\u6c42\u3081\u308b*/ \n           sum=0.0;\n            for(int k=0;k<j;k++){\n                sum+=L[i][k]*U[k][j];\n            }\n            L[i][j]=(A[i][j]-sum)/U[j][j];\n        }else{\n            /*U\u6210\u5206\u3092\u6c42\u3081\u308b*/\n            sum=0.0;\n            for(int k=0;k<i;k++){\n                sum+=L[i][k]*U[k][j];\n            }\n            U[i][j]=A[i][j]-sum;\n        }\n\n\n\n\n\u305d\u308c\u3067\u306f\u3001\u5148\u306e\u30a6\u30a7\u30d6\u30b5\u30a4\u30c8\u304b\u3089\u3001\u30b3\u30fc\u30c9\u5168\u4f53\u3092\u8ee2\u8f09\u3057\u3066\u307f\u307e\u3059\u3002\n\n\n( \u884c\u5217\u3092LU\u5206\u89e3\u3057\u305f\u5f8c\u306b\u3001\u300c\u524d\u9032\u6d88\u53bb\u300d\u3068\u300c\u5f8c\u9000\u4ee3\u5165\u300d\u3092\u5b9f\u884c\u3057\u3001\u9023\u7acb\u65b9\u7a0b\u5f0f\u306e\u89e3\u3092\u6c42\u3081\u308b\u30d7\u30ed\u30b0\u30e9\u30e0 \uff09\n\nC++\n#include <iostream>\nusing namespace std;\n\nvoid LUdecomposition(int dimension, double** A, double** L, double** U){//LU\u5206\u89e3\n    for(int i=0;i<dimension;i++){\n        for(int j=0;j<dimension;j++){\n            L[i][j]=0.0;\n            U[i][j]=0.0;\n            if(i==j)L[i][j]=1.0;\n        }\n    }\n    double sum;\n    for(int i=0;i<dimension;i++){\n        for(int j=0;j<dimension;j++){\n            if(i>j){\n                /*L\u6210\u5206\u3092\u6c42\u3081\u308b*/\n                sum=0.0;\n                for(int k=0;k<j;k++){\n                    sum+=L[i][k]*U[k][j];\n                }\n                L[i][j]=(A[i][j]-sum)/U[j][j];\n            }else{\n                /*U\u6210\u5206\u3092\u6c42\u3081\u308b*/\n                sum=0.0;\n                for(int k=0;k<i;k++){\n                    sum+=L[i][k]*U[k][j];\n                }\n                U[i][j]=A[i][j]-sum;\n            }\n        }\n    }\n}\n\nvoid Lforwardsubs(int dimension, double** L, double* b, double* y){//\u524d\u9032\u4ee3\u5165\n    for(int i=0;i<dimension;i++){\n        y[i]=b[i];\n    }\n    for(int i=0;i<dimension;i++){\n        y[i]/=L[i][i];\n        for(int j=i+1;j<dimension;j++){\n            y[j]-=y[i]*L[j][i];\n        }\n    }\n}\n\nvoid Ubackwardsubs(int dimension, double** U, double* y, double* x){//\u5f8c\u9000\u4ee3\u5165\n    for(int i=0;i<dimension;i++){\n        x[i]=y[i];\n    }\n    for(int i=dimension-1;i>=0;i--){\n        x[i]/=U[i][i];\n        for(int j=i-1;j>=0;j--){\n            x[j]-=x[i]*U[j][i];\n        }\n    }\n}\n\nint main(){\n    int dimension,problem_num;\n    double **A,**L,**U,**b,**x,*y;\n\n/*\u5165\u529b\u3092\u53d7\u3051\u53d6\u308b*/\n    cin >> dimension;\n    A=new double*[dimension];\n    L=new double*[dimension];\n    U=new double*[dimension];\n    y=new double[dimension];\n    for(int i=0;i<dimension;i++){\n        A[i]=new double[dimension];\n        L[i]=new double[dimension];\n        U[i]=new double[dimension];\n    }\n\n    for(int i=0;i<dimension;i++){\n        for(int j=0;j<dimension;j++){\n            cin >> A[i][j];\n        }\n    }\n\n    cin >> problem_num;\n    b=new double*[problem_num];\n    x=new double*[problem_num];\n    for(int i=0;i<problem_num;i++){\n        b[i]=new double[dimension];\n        x[i]=new double[dimension];\n    }\n\n    for(int i=0;i<problem_num;i++){\n        for(int j=0;j<dimension;j++){\n            cin >> b[i][j];\n        }\n    }\n\n/*\u554f\u984c\u3092\u89e3\u304f*/\n    LUdecomposition(dimension,A,L,U);\n    for(int i=0;i<problem_num;i++){\n        Lforwardsubs(dimension,L,b[i],y);\n        Ubackwardsubs(dimension,U,y,x[i]);\n    }\n\n/*\u89e3\u7b54\u3092\u51fa\u529b\u3059\u308b*/\n    for(int i=0;i<problem_num;i++){\n        for(int j=0;j<dimension;j++){\n            if(j!=0)cout << \" \"; \n            cout << x[i][j];\n        }\n        cout << endl;\n    }\n\n/*\u30e1\u30e2\u30ea\u306e\u89e3\u653e*/\n    for(int i=0;i<dimension;i++){\n        delete [] A[i];\n        delete [] L[i];\n        delete [] U[i];\n    }\n    for(int i=0;i<problem_num;i++){\n        delete [] b[i];\n        delete [] x[i];\n    }\n    delete [] A;\n    delete [] L;\n    delete [] U;\n    delete [] b;\n    delete [] x;\n    delete [] y;\n\n\n\nPython\u8a00\u8a9e\u3067\u306e\u5b9f\u88c5\n\n\n\u9023\u7acb\u65b9\u7a0b\u5f0f\u3092\u6c42\u3081\u308b\u51e6\u7406\u306e\u3046\u3061\u3001\u307e\u305a\u306f\u7b2c\uff11\u6bb5\u968e\u3068\u3057\u3066\u3001\u4e0e\u3048\u3089\u308c\u305f\u884c\u5217\u3092LU\u5206\u89e3\u3057\u3066\u51fa\u529b\u3059\u308b\u3068\u3053\u308d\u307e\u3067\u3092\u3001Python\u3067\u7f6e\u304d\u63db\u3048\u3066\u307f\u307e\u3059\u3002\n\n\n\uff08 \u30aa\u30ea\u30b8\u30ca\u30eb\u306e\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9 \uff09\n\n\noriginal\nvoid LUdecomposition(int dimension, double** A, double** L, double** U){//LU\u5206\u89e3\n    for(int i=0;i<dimension;i++){\n        for(int j=0;j<dimension;j++){\n            L[i][j]=0.0;\n            U[i][j]=0.0;\n            if(i==j)L[i][j]=1.0;\n        }\n    }\n    double sum;\n    for(int i=0;i<dimension;i++){\n        for(int j=0;j<dimension;j++){\n            if(i>j){\n                /*L\u6210\u5206\u3092\u6c42\u3081\u308b*/\n                sum=0.0;\n                for(int k=0;k<j;k++){\n                    sum+=L[i][k]*U[k][j];\n                }\n                L[i][j]=(A[i][j]-sum)/U[j][j];\n            }else{\n                /*U\u6210\u5206\u3092\u6c42\u3081\u308b*/\n                sum=0.0;\n                for(int k=0;k<i;k++){\n                    sum+=L[i][k]*U[k][j];\n                }\n                U[i][j]=A[i][j]-sum;\n            }\n        }\n    }\n}\n\n\n\n\uff08 Python\u3067\u7f6e\u304d\u63db\u3048\u305f\u30b3\u30fc\u30c9 \uff09\n\n\n\u203b\u884c\u5217\u3092\u53d7\u3051\u53d6\u308b\u90e8\u5206\u306e\u51e6\u7406\u306f\u3001\u72ec\u81ea\u306b\u5b9f\u88c5\u5909\u66f4\u3057\u3066\u3044\u307e\u3059\u3002\n\n\nLU_decomp.py\n#!/Usr/bin/env python\n# -*- coding: utf-8 -*- \n\nimport math\nimport numpy as np\n\nmessage_1 = \"\"\"                                                                                                                                    \nLU\u5206\u89e3\u3092\u5b9f\u884c\u3059\u308b\u884c\u5217\u306e\u884c\u6570\uff08\uff1d\u5217\u6570\uff09\u3092\u5165\u529b\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n\"\"\"\n\nmessage_2 = \"\"\"                                                                                                                                    \n\n\u884c\u5217\u306e\u8981\u7d20\u3092\u3001\uff11\u3064\u305a\u3064\u9806\u756a\u306b\u5165\u529b\u3057\u3066\u304f\u3060\u3055\u3044\u3002\"\"\"\n\nmessage_3 = \"\"\"\n\n\u884c\u5217\u306e\u5bfe\u89d2\u8981\u7d20\u304c 0 \u306e\u5834\u5408\u3001\u30bc\u30ed\u3067\u5272\u308b\u51e6\u7406\u304c\u884c\u308f\u308c\u308b\u3068\u30a8\u30e9\u30fc\u304c\u767a\u751f\u3057\u307e\u3059\u3002\u6383\u304d\u51fa\u3057\u6cd5\u3092\u4f7f\u3063\u3066\u3001\u53d7\u3051\u53d6\u3063\u305f\u884c\u5217\u3092\n\n\"\"\"\n\n\n### main()\u30e1\u30bd\u30c3\u30c9\ndef main():\n    print(message_1)\n    n = int(raw_input())\n\n    # \u30e6\u30fc\u30b6\u304c\u5165\u529b\u3057\u305f\u6570\u5024 n \u3092\u3082\u3068\u306b\u3001\u884c\u5217\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u521d\u671f\u5316\u5ba3\u8a00\n    A = [[0 for col in range(n)] for row in range(n)]\n    L = [[0 for col in range(n)] for row in range(n)]\n    U = [[0 for col in range(n)] for row in range(n)]\n\n    #\u30e6\u30fc\u30b6\u304b\u3089\u53d7\u3051\u53d6\u3063\u305f\u6570\u5024\u3092\uff11\u3064\u3065\u3064\u3001\u884c\u5217matrix \u306e\u8981\u7d20\u306b\u4ee3\u5165\u3057\u3066\u3044\u304f\u51e6\u7406\n    print(message_2)\n\n    for i in range(n):\n        for j in range(n):\n            print(\"\\n\u884c\u5217({i}, {j})\u8981\u7d20\u306e\u5024\u3092\u5165\u529b\u3057\u3066\u304f\u3060\u3055\u3044\u3002\".format(i=i, j=j))\n            float_num = float(raw_input())\n            A[i][j] = float_num\n\n    print(\"\\n\u5165\u529b\u304c\u5b8c\u4e86\u3057\u307e\u3057\u305f\u3002\")\n    print(\"\\n\u3053\u308c\u304b\u3089LU\u5206\u89e3\u3092\u304a\u3053\u306a\u3046\u884c\u5217\u306f\u3001\u4ee5\u4e0b\u306b\u306a\u308a\u307e\u3059\u3002\\n\\n {matrix}\".format(matrix=np.array(A)))\n\n    #\u884c\u5217matrix \u306b\u5bfe\u3059\u308b\u30e6\u30fc\u30b6\u6307\u5b9a\u6570\u5024\u306e\u4ee3\u5165\u7d42\u4e86\n    print(message_3)\n\n    for i in range(n):\n        for j in range(n):\n            A[i][j] == float(0.0)\n            if((j-n) == i):\n                A[i][j] = float(1.0)\n\n    #LU\u5206\u89e3\u3092\u5b9f\u884c  \n    (L, U) = LU_decomp(A, L, U, n)\n\n\n    #\u7d50\u679c\u3092\u51fa\u529b\n    console_display(U, n, \"Upper matrix\")\n    print(\"\\n\\n\")\n    console_display(L, n, \"Lower matrix\")\n\n    L_dot_U = np.dot(np.array(L), np.array(U))\n    print(\"\\n\\n L_dot_U :\\n  {L_dot_U}\\n\\n\".format(L_dot_U = L_dot_U))\n\n    print(\"\\n\u30d7\u30ed\u30b0\u30e9\u30e0\u306e\u51e6\u7406\u304c\u6b63\u5e38\u306b\u7d42\u308f\u308a\u307e\u3057\u305f\u3002\")\n\n##### main()\u30e1\u30bd\u30c3\u30c9\u4ee5\u4e0a\n\n##### \ndef LU_decomp(A, L, U, n):\n    for i in range(n):\n        for j in range(n):\n            L[i][j]=float(0.0)\n            U[i][j]=float(0.0)\n            if(i==j):\n                L[i][j]=float(1.0)\n\n    for i in range(n):\n            for j in range(n):\n                if(i > j): #/*L\u6210\u5206\u3092\u6c42\u3081\u308b*/\n                    sum=float(0.0)  #sum\u306e\u521d\u671f\u5316\u5ba3\u8a00 \n                    for k in range(0, j):\n                        sum += L[i][k]*U[k][j]\n\n                    L[i][j]=(A[i][j]-sum)/U[j][j]\n                else: #/*U\u6210\u5206\u3092\u6c42\u3081\u308b*/\n                    sum=float(0.0) #sum\u306e\u521d\u671f\u5316\u5ba3\u8a00\n                    for k in range(0, i):\n                        sum += L[i][k]*U[k][j]\n\n                    U[i][j]=A[i][j]-sum\n\n    return (L, U)\n\n\n\ndef console_display(matrix, n, matrix_name):\n    print(\"{matrix_name}  :\\n\".format(matrix_name = matrix_name))\n\n    for i in range(n):\n        output = \"\"\n\n        for j in range(n):\n            output +=\"{element}  \".format(element=matrix[i][j])\n\n        print(output) #matrix \u306e\u5404\u884c\u3092\uff11\u884c\u3054\u3068\u306b\u51fa\u529b\u3002             \n\n\n\n##### \u3053\u306e\u30b9\u30af\u30ea\u30d7\u30c8\u30d5\u30a1\u30a4\u30eb\u3092\u5b9f\u884c\u3057\u305f\u3068\u304d\u306b\u3001main()\u30e1\u30bd\u30c3\u30c9\u5b9f\u884c\nif __name__ == '__main__':\n    main()\n\n\n\n\uff08\u3000\u5b9f\u884c\u3000\uff09\n\n\n\nScipy / Numpy \u3092\u7528\u3044\u305f\u6f14\u7b97\u306e\u7d50\u679c\u3068\u7a81\u304d\u5408\u308f\u305b\u3066\u691c\u7b97\n\n\nQuantStart, LU Decomposition in Python and NumPy\n\nLU\u5206\u89e3\u3055\u308c\u305f\u884c\u5217\u306f\u3001\u4e0a\u8a18\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u306e\u306f\u3058\u304d\u3060\u3057\u305f\u884c\u5217\u3068\u306f\u8981\u7d20\u306e\u5024\u304c\u7570\u306a\u308b\u304c\u3001\u5185\u7a4d\u3092\u3068\u308b\u3068\u3001\u7d50\u679c\u306f\u540c\u3058\u3001\u6700\u521d\u306b\u4e0e\u3048\u305f\u884c\u5217\u306b\u306a\u308b\n\uff08\u884c\u304c\uff11\u90e8\u5165\u308c\u66ff\u308f\u3063\u3066\u3044\u308b\u306e\u306f\u3001\u30e2\u30b8\u30e5\u30fc\u30eb\u5185\u90e8\u3067\u3001\u30d4\u30dc\u30c3\u30c8\u4ea4\u63db\u3092\u884c\u3044\u3001\u30bc\u30ed\u3067\u5272\u3063\u3066\u30a8\u30e9\u30fc\u306b\u306a\u308b\u30ea\u30b9\u30af\u3092\u56de\u907f\u3059\u308b\u51e6\u7406\u304c\u5b9f\u88c5\u3055\u308c\u3066\u3044\u308b\u304b\u3089\u3060\u3068\u304a\u3082\u308f\u308c\u308b\uff09\n\n\n\n\n\uff08\u88dc\u8db3\uff09\n\n\n\u4e0a\u4e09\u89d2\u6210\u5206\u3068\u4e0b\u4e09\u89d2\u6210\u5206\u3067\u51e6\u7406\u3092\u5834\u5408\u5206\u3051\u3057\u306a\u3044\u3067\u5b9f\u88c5\u3059\u308b\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u306b\u3064\u3044\u3066\n\nLU\u6cd5 \u306b\u3064\u3044\u3066\u8a08\u7b97\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u3092\u8aac\u660e\u3057\u3066\u3044\u308b\u30a6\u30a7\u30d6\u30b5\u30a4\u30c8\u3092\u307f\u308b\u3068\u3001\u591a\u304f\u306f\u3001if(i>j)\u22efelif(i<=j)if(i>j)\u22efelif(i<=j)if (i >j) \\cdots elif (i <= j) \u306e\u5834\u5408\u5206\u3051\u51e6\u7406\u3092\u884c\u3063\u3066\u3044\u306a\u3044\u3002\n\u5834\u5408\u5206\u3051\u3092\u884c\u308f\u306a\u3044\u306e\u306b\u3001\u3069\u3046\u3084\u3063\u3066\u4e0a\u4e09\u89d2\u6210\u5206\u3068\u3057\u305f\u4e09\u89d2\u6210\u5206\u306e\u8981\u7d20\u3092\u8a08\u7b97\u3067\u304d\u3066\u3044\u308b\u306e\u304b\u306b\u3064\u3044\u3066\u3001\u8a00\u53ca\u3057\u3066\u3044\u308b\u30a6\u30a7\u30d6\u30b5\u30a4\u30c8\u306f\u5c11\u306a\u3044\u3002\n\u3053\u306e\u70b9\u3092\u660e\u78ba\u306b\u89e3\u8aac\u3057\u3066\u3044\u308b\u304f\u3060\u308a\u3068\u3057\u3066\u306f\u3001\u305f\u3068\u3048\u3070\u3001\u4ee5\u4e0b\u306e\u30a6\u30a7\u30d6\u30b5\u30a4\u30c8\u304c\u5206\u304b\u308a\u3084\u3059\u3044\u3002\n\n\u9ad8\u77e5\u5927\u5b66 \u300c \u6570\u5024\u89e3\u6790\uff08\u5869\u7530\uff09\u30fcLU\u5206\u89e3\u6cd5\u30fc \u300d\n\n\n\n\n\uff08 \u30b3\u30fc\u30c9\u5b9f\u88c5\u4f8b \uff09\n\n\n\uff08\u51fa\u5178\uff09\n\nHatena::Diary \u6570\u5024\u8a08\u7b97\u3068\u304b\u306e\u5099\u5fd8\u9332\uff08\u4eee\uff09\u300cLU\u5206\u89e3\u300d\n\n\n\u884c\u5217\u8981\u7d20aija_{ij}\u3092\u3001\u884c\u5217\u306e\u5bfe\u89d2\u6210\u5206aiia_{ii}\u3067\u5272\u308a\u7b97\u3057\u3066\u3044\u308b\u3002\n\u306a\u304a\u3001\u30b3\u30fc\u30c9\u4e2d\u306e upup \u3068\u306f\u3001\u30e6\u30fc\u30b6\u5b9a\u7fa9\u306e\u884c\u5217\u3092\u53d7\u3051\u53d6\u3063\u305f\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3067\u3042\u308a\u3001\u672c\u8a18\u4e8b\u3067\u52d5\u4f5c\u3092\u78ba\u8a8d\u3057\u305f\u30b3\u30fc\u30c9\u306b\u304a\u3051\u308b\u884c\u5217\u30aa\u30d6\u30b8\u30a7\u30af\u30c8AA\u306b\u76f8\u5f53\u3002\n\n\n\n\n\n\uff08 \u53c2\u8003 \uff09\n\n\nPUKIWIKI LU\u5206\u89e3\n\n\n\n\uff08 \u30b3\u30fc\u30c9\u6539\u4fee\u88dc\u8db3 \uff09\n\n\n\uff08 \u5909\u66f4\u70b9 \uff09\n\n1. \u884c\u5217\u30c7\u30fc\u30bf\u3092\u8a18\u8ff0\u3057\u305f\u30d5\u30a1\u30a4\u30eb\u304b\u3089\u8aad\u307f\u8fbc\u3080\u3088\u3046\u306b\u5909\u66f4\n2. \u30d7\u30ed\u30b0\u30e9\u30e0\u304b\u3089\u8fd4\u3055\u308c\u308b\u4e0a\u4e09\u89d2\u884c\u5217\u3068\u4e0b\u4e09\u89d2\u884c\u5217\u304c\u6b63\u3057\u3044\u306e\u304b\u306e\u691c\u7b97\u7d44\u307f\u8fbc\u307f\uff08\uff12\u3064\u306e\u884c\u5217\u3092\u5185\u7a4d\u3057\u305f\u7d50\u679c\u304c\u3001\u5143\u306e\u8aad\u307f\u8fbc\u3093\u3060\u884c\u5217\u3068\u4e00\u81f4\u3059\u308b\u304b\u306e\u30c1\u30a7\u30c3\u30af\uff09\n\n\u203b \u5909\u66f4\u70b9\uff11\u306f\u3001\u4ee5\u4e0b\u306e\u30a6\u30a7\u30d6\u30b5\u30a4\u30c8\u3092\u53c2\u8003\u306b\u3057\u3066\u3044\u307e\u3059\nHatena::Diary \u6570\u5024\u8a08\u7b97\u3068\u304b\u306e\u5099\u5fd8\u9332\uff08\u4eee\uff09\u300cLU\u5206\u89e3\u300d\n\n\u5b9f\u884c\n\n\n\u30ab\u30ec\u30f3\u30c8\u30fb\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u306b\u3001\u4ee5\u4e0b\u306e\u6570\u5024\u304c\u8a18\u8ff0\u3055\u308c\u305f\u30d5\u30a1\u30a4\u30eb\u304c\u3042\u308a\u307e\u3059\u3002\n\n\u4e0a\u8a18\u30d5\u30a1\u30a4\u30eb\u306e\u30d1\u30b9\u3092\u7d76\u5bfe\u30d1\u30b9\u3067\u6e21\u3057\u3066\u3001\u8aad\u307f\u8fbc\u307f\u5b9f\u884c\n\n\n\n\n\u6539\u4fee\u5f8c\u306e\u30b9\u30af\u30ea\u30d7\u30c8\n#!/Usr/bin/env python\n# -*- coding: utf-8 -*- \n\nimport math, copy\nimport numpy as np\n\nmessage_1 = \"\"\"                                                                                                                                    \n\u3053\u308c\u304b\u3089\u51e6\u7406\u3092\u884c\u3046\u884c\u5217\u306e\u6570\u5024\u30c7\u30fc\u30bf\u3092\u3001\u30d5\u30a1\u30a4\u30eb\u304b\u3089\u8aad\u307f\u8fbc\u307f\u307e\u3059\u3002\n\u884c\u5217\u30c7\u30fc\u30bf\u306f\u3001\u884c\u6570\u3068\u5217\u6570\u304c\u540c\u3058\u6b63\u65b9\u884c\u5217\u3067\u306a\u3044\u3068\u3044\u3051\u307e\u305b\u3093\u3002\n\n\u884c\u5217\u6570\u5024\u304c\u8a18\u8ff0\u3055\u308c\u305f\u30d5\u30a1\u30a4\u30eb\u306e\u683c\u7d0d\u5834\u6240\u3092\u3001\u7d76\u5bfe\u30d1\u30b9\u3067\u5165\u529b\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n\"\"\"\n\nmessage_2 = \"\"\"\n\n\u884c\u5217\u3092\u4e0b\u4e09\u89d2\u884c\u5217\u3068\u4e0a\u4e09\u89d2\u884c\u5217\u306b\u5206\u89e3\u3057\u307e\u3059\u3002\n\u884c\u5217\u306e\u5bfe\u89d2\u8981\u7d20\u304c 0 \u306e\u5834\u5408\u3001\u30bc\u30ed\u3067\u5272\u308b\u51e6\u7406\u304c\u884c\u308f\u308c\u308b\u3068\u30a8\u30e9\u30fc\u304c\u767a\u751f\u3057\u307e\u3059\u3002\n\n\"\"\"\n\nsuccess_message = \"\"\"\n\"\u4e0a\u8a18\u306e\u4e0a\u4e09\u89d2\u884c\u5217\u3068\u4e0b\u4e09\u89d2\u884c\u5217\u3092\u5185\u7a4d\u6f14\u7b97\u3057\u305f\u7d50\u679c\u306f\u3001\u6700\u521d\u306b\u8aad\u307f\u8fbc\u3093\u3060\u884c\u5217\u3068\u5b8c\u5168\u306b\u4e00\u81f4\u3057\u307e\u3059\u3002\n\u4e09\u89d2\u884c\u5217\u3078\u306e\u5206\u89e3\u306f\u6210\u529f\u3057\u307e\u3057\u305f\u3002\n\n\"\"\"\n\n\nfailure_message = \"\"\"                                                                                                    \n\"\u4e0a\u8a18\u306e\u4e0a\u4e09\u89d2\u884c\u5217\u3068\u4e0b\u4e09\u89d2\u884c\u5217\u3092\u5185\u7a4d\u6f14\u7b97\u3057\u305f\u7d50\u679c\u306f\u3001\u6700\u521d\u306b\u8aad\u307f\u8fbc\u3093\u3060\u884c\u5217\u3068\u4e00\u81f4\u3057\u307e\u305b\u3093\u3002                               \n\u4e09\u89d2\u884c\u5217\u3078\u306e\u5206\u89e3\u306b\u5931\u6557\u6210\u529f\u3057\u307e\u3057\u305f\u3002                                                                                     \n\n\"\"\"\n\n\n### main()\u30e1\u30bd\u30c3\u30c9\ndef main():\n    print(message_1)\n\n    file_path = raw_input()\n\n    # \u30e6\u30fc\u30b6\u304c\u6307\u5b9a\u3057\u305f\u7d76\u5bfe\u30d1\u30b9\u306e\u30d5\u30a1\u30a4\u30eb\u306b\u30a2\u30af\u30bb\u30b9\u3057\u3066\u3001\u884c\u5217\u6570\u5024\u30c7\u30fc\u30bf\u3092\u8aad\u307f\u8fbc\u3080\n    (dim, matrix) = read_matrix_data(file_path)\n\n    # \u5143\u306ematrix\u3092\u58ca\u3055\u306a\u3044\u3088\u3046\u306bcopy\u3059\u308b\n    A = copy.deepcopy(matrix) \n\n    print(\"\\n\u30c7\u30fc\u30bf\u306e\u8aad\u307f\u8fbc\u307f\u304c\u5b8c\u4e86\u3057\u307e\u3057\u305f\u3002\")\n    print(\"\\n\u3053\u308c\u304b\u3089LU\u5206\u89e3\u3092\u304a\u3053\u306a\u3046\u884c\u5217\u306f\u3001\u4ee5\u4e0b\u306b\u306a\u308a\u307e\u3059\u3002\\n\\n {matrix}\".format(matrix=np.array(A)))\n\n    # \u8aad\u307f\u8fbc\u3080\u884c\u5217\u306f\u3001\u884c\u6570\u3068\u5217\u6570\u304c\u7b49\u3057\u3044\u6b63\u65b9\u884c\u5217\u3067\u3042\u308b\u3053\u3068\u3092\u524d\u63d0\u3068\u3057\u3066\u3044\u308b\u305f\u3081\u3001\u884c\u6570n\u3092\u53d6\u5f97\n    n = dim \n\n    # \u30e6\u30fc\u30b6\u304c\u5165\u529b\u3057\u305f\u6570\u5024 n \u3092\u3082\u3068\u306b\u3001\u4e09\u89d2\u884c\u5217\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u521d\u671f\u5316\u5ba3\u8a00\n    L = [[0 for col in range(n)] for row in range(n)]\n    U = [[0 for col in range(n)] for row in range(n)]\n\n\n    #\u4e0b\u4e09\u89d2\u884c\u5217\u306e\u5bfe\u89d2\u8981\u7d20\u3092\uff11\u306b\u8a2d\u5b9a \uff08\u30af\u30e9\u30a6\u30c8\u6cd5\uff09\n    for i in range(n):\n        for j in range(n):\n            A[i][j] == float(0.0)\n            if((j-n) == i):\n                A[i][j] = float(1.0)\n\n    #LU\u5206\u89e3\u3092\u5b9f\u884c \n    print(message_2)\n    (L, U) = LU_decomp(A, L, U, n)\n\n\n    #\u7d50\u679c\u3092\u51fa\u529b\n    console_display(U, n, \"Upper matrix\")\n    print(\"\\n\\n\")\n    console_display(L, n, \"Lower matrix\")\n\n    L_dot_U = np.dot(np.array(L), np.array(U))\n    print(\"\\n\\nUpper matrix \u3068 Lower matrix \u3092\u5185\u7a4d\u3057\u305f\u7d50\u679c :\\n\\n{L_dot_U}\\n\\n\".format(L_dot_U = L_dot_U))\n\n    #\u7d50\u679c\u306e\u691c\u8a3c\u3000\uff08\u8a08\u7b97\u306e\u7d50\u679c\u3001\u5f97\u3089\u308c\u305f\u4e0a\u4e09\u89d2\u884c\u5217\u3068\u4e0b\u4e09\u89d2\u884c\u5217\u3092\u5185\u7a4d\u3057\u305f\u7d50\u679c\u304c\u3001\u3082\u3068\u306e\u884c\u5217\u3068\u5b8c\u5168\u4e00\u81f4\u3059\u308b\u304b\u306e\u78ba\u8a8d \uff09\n    evaluation_expression = np.all(L_dot_U == np.array(matrix))\n\n    if(evaluation_expression):\n        print(success_message)\n    else:\n        print(failure_message)\n\n    print(\"\\n\u30d7\u30ed\u30b0\u30e9\u30e0\u306e\u51e6\u7406\u304c\u7d42\u308f\u308a\u307e\u3057\u305f\u3002\")\n\n##### main()\u30e1\u30bd\u30c3\u30c9\u4ee5\u4e0a\n\n##### \u884c\u5217\u30c7\u30fc\u30bf\u306e\u8aad\u307f\u8fbc\u307f\u30e1\u30bd\u30c3\u30c9\ndef read_matrix_data(file_path):\n    dim = 0\n    matrix = []\n    num = []\n\n    for line in open(file_path):\n        row = line.split(' ') #\u884c\u5217\u30c7\u30fc\u30bf\u3092\uff11\u884c\u305a\u3064\u8aad\u307f\u8fbc\u307f\n        for element in row:\n            num.append(float(element)) #\u884c\u5217\u30c7\u30fc\u30bf\u306e\u3042\u308b\uff11\u884c\u3092\u30ea\u30b9\u30c8\u306b\u8aad\u8fbc\u307f\n        matrix.append(num) #\u30ea\u30b9\u30c8\u578b\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u300cmatrix\u300d\u306e\u8981\u7d20\u306b\u3001\u884c\u5217\u30c7\u30fc\u30bf\u306e\uff11\u884c\u3092append\uff08\uff12\u6b21\u5143\u914d\u5217\u306e\u751f\u6210\uff09\n        num = []\n        dim += 1\n\n    return (dim, matrix) #\uff12\u6b21\u5143\u914d\u5217 (list\u3092\u8981\u7d20\u306b\u3082\u3064list) \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092return\n\n##### LU\u5206\u89e3\u5b9f\u884c\u30e1\u30bd\u30c3\u30c9\ndef LU_decomp(A, L, U, n):\n    for i in range(n):\n        for j in range(n):\n            L[i][j]=float(0.0)\n            U[i][j]=float(0.0)\n            if(i==j):\n                L[i][j]=float(1.0)\n\n    for i in range(n):\n            for j in range(n):\n                if(i > j): #/*L\u6210\u5206\u3092\u6c42\u3081\u308b*/\n                    sum=float(0.0)  #sum\u306e\u521d\u671f\u5316\u5ba3\u8a00 \n                    for k in range(0, j):\n                        sum += L[i][k]*U[k][j]\n\n                    L[i][j]=(A[i][j]-sum)/U[j][j]\n                else: #/*U\u6210\u5206\u3092\u6c42\u3081\u308b*/\n                    sum=float(0.0) #sum\u306e\u521d\u671f\u5316\u5ba3\u8a00\n                    for k in range(0, i):\n                        sum += L[i][k]*U[k][j]\n\n                    U[i][j]=A[i][j]-sum\n\n    return (L, U)\n\n\n##### \u884c\u5217\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u6a19\u6e96\u51fa\u529b\u8868\u793a\u30e1\u30bd\u30c3\u30c9\ndef console_display(matrix, n, matrix_name):\n    print(\"{matrix_name}  :\\n\".format(matrix_name = matrix_name))\n\n    for i in range(n):\n        output = \"\"\n\n        for j in range(n):\n            output +=\"{element}  \".format(element=matrix[i][j])\n\n        print(output) #matrix \u306e\u5404\u884c\u3092\uff11\u884c\u3054\u3068\u306b\u51fa\u529b\u3002             \n\n\n##### \u3053\u306e\u30b9\u30af\u30ea\u30d7\u30c8\u30d5\u30a1\u30a4\u30eb\u3092\u5b9f\u884c\u3057\u305f\u3068\u304d\u306b\u3001main()\u30e1\u30bd\u30c3\u30c9\u5b9f\u884c                                                         \nif __name__ == '__main__':\n    main()\n\n\n###__LU\u5206\u89e3\u306e\u8a08\u7b97\u624b\u9806__\n\n__\u4ee5\u4e0b\u306e\u30a6\u30a7\u30d6\u30b5\u30a4\u30c8\u304c\u5206\u304b\u308a\u3084\u3059\u3044\u3067\u3059\u3002__\n\n#####__[\uff08 \u53c2\u8003 \uff09\u7269\u7406\u306e\u304b\u304e\u3057\u3063\u307d  \u300cLU\u5206\u89e3\u300d](http://hooktail.org/computer/index.php?LU%CA%AC%B2%F2)__\n\n##### __\u4ee5\u4e0b\u306f\u3001\u4e0a\u8a18\u30a6\u30a7\u30d6\u30b5\u30a4\u30c8\u3067\u8aac\u660e\u3055\u308c\u3066\u3044\u308b\u8a08\u7b97\u624b\u9806\u306e\u304a\u308f\u308a\u306e\u90e8\u5206\u306e\u307f\u306e\u629c\u7c8b\u3067\u3059\u3002__\n\n![1.png](https://qiita-image-store.s3.amazonaws.com/0/43487/6487a09b-ef0a-343e-5e2d-ff1fb373245c.png)\n\n___\n\n### __( \u62e1\u5927 )__\u3000\n\n![2.png](https://qiita-image-store.s3.amazonaws.com/0/43487/e12ba7aa-893c-a69f-4b5c-cf358989e578.png)\n\n\n\n### __\u4e0a\u8a18\u306eC++\u8a00\u8a9e\u3067\u306e\u5b9f\u88c5__\n#### __[\u30e1\u30e2\u5e33X\u3055\u3093 \u300cLU\u5206\u89e3\u3092\u4f7f\u3063\u3066n\u5143\u9023\u7acb1\u6b21\u65b9\u7a0b\u5f0f\u3092\u89e3\u304f\u300d](http://d.hatena.ne.jp/OhXeno/20110702/1309547336)__\n\n####__\u4e0a\u8a18\u306e\u30a6\u30a7\u30d6\u30b5\u30a4\u30c8\u3067\u306f\u3001\u4e0a\u3067\u898b\u3066\u304d\u305f\u51e6\u7406\u3068\u540c\u3058\u8981\u9818\u3067\u3001\u4e0a\u4e09\u89d2\u884c\u5217\u90e8\u5206\u3092\u6c42\u3081\u308b\u51e6\u7406\u3000\u3068\u3000\u4e0b\u4e09\u89d2\u884c\u5217\u90e8\u5206\u3092\u6c42\u3081\u308b\u51e6\u7406\u3068\u3067\u3001\u5225\u3005\u306e\u51e6\u7406\u3092\u5b9f\u884c\u3057\u3066\u3044\u307e\u3059\u3002__\n___\n\n####__1.\u3010\u3000i>j (\u884c\u756a\u53f7 i > \u5217\u756a\u53f7 j \u3064\u307e\u308a\u3000\u4e0b\u4e09\u89d2\u884c\u5217L\uff09\u3000\u306e\u5834\u5408\u306b\u5b9f\u884c\u3059\u308b\u51e6\u7406\u3000\u3011__\n##### __(1)\u3000\u7dcf\u548c\u8a08\u7b97\u2211\u90e8\u5206\u3000 for(int k=0;k<j;k++)\u3000\uff4b\u306f\u3001\uff10\u756a\u5730\u304b\u3089  \uff4a \u756a\u5730\u672a\u6e80 \u307e\u3067\u3001\u8db3\u3057\u4e0a\u3052\u308b__\n##### __(2)\u3000L[i][j] \u3092\u6c42\u3081\u308b\u3068\u304d\u3001\uff08A[i][j]-sum)\u3000\u3092\u3000U[j][j]\u3000\u3067\u5272\u308b\u3002__\n\n####__2.\u3010 else \uff1d>\u3000i<=j (\u884c\u756a\u53f7 i  <=\u3000\u5217\u756a\u53f7 j\u3000\u3064\u307e\u308a\u3000\u4e0a\u4e09\u89d2\u884c\u5217U\uff09\u3000\u306e\u5834\u5408\u306b\u5b9f\u884c\u3059\u308b\u51e6\u7406\u3000\u3011__\n##### __(1)  \u7dcf\u548c\u8a08\u7b97\u2211\u90e8\u5206\u3000\u3000for(int k=0;k<i;k++) \uff4b\u306f\u3001\uff10\u756a\u5730\u304b\u3089 __i__ \u756a\u5730\u672a\u6e80 \u307e\u3067\u3001\u8db3\u3057\u4e0a\u3052\u308b\u3002__\n##### __(2)  U[i][j] \u3092\u6c42\u3081\u308b\u3068\u304d\u3001\uff08A[i][j]-sum)\u3000\u3092\u3000U[j][j]\u3000\u3067\u5272\u3089\u306a\u3044\u3002__\n___\n###__\u4ee5\u4e0a\u3092\u5b9f\u88c5\u3057\u3066\u3044\u308b\u306e\u306f\u3001\u30b3\u30fc\u30c9\u306e\u6b21\u306e\u90e8\u5206\u3067\u3059\u3002__\n\n> if(i>j){\n\n>                /*L\u6210\u5206\u3092\u6c42\u3081\u308b*/ \n>                sum=0.0;\n                for(int k=0;k<j;k++){\n                    sum+=L[i][k]*U[k][j];\n                }\n                L[i][j]=(A[i][j]-sum)/U[j][j];\n            }else{\n                /*U\u6210\u5206\u3092\u6c42\u3081\u308b*/\n                sum=0.0;\n                for(int k=0;k<i;k++){\n                    sum+=L[i][k]*U[k][j];\n                }\n                U[i][j]=A[i][j]-sum;\n            }\n\n___\n \n###__\u305d\u308c\u3067\u306f\u3001\u5148\u306e\u30a6\u30a7\u30d6\u30b5\u30a4\u30c8\u304b\u3089\u3001\u30b3\u30fc\u30c9\u5168\u4f53\u3092\u8ee2\u8f09\u3057\u3066\u307f\u307e\u3059\u3002__\n\n##### ( \u884c\u5217\u3092LU\u5206\u89e3\u3057\u305f\u5f8c\u306b\u3001\u300c\u524d\u9032\u6d88\u53bb\u300d\u3068\u300c\u5f8c\u9000\u4ee3\u5165\u300d\u3092\u5b9f\u884c\u3057\u3001\u9023\u7acb\u65b9\u7a0b\u5f0f\u306e\u89e3\u3092\u6c42\u3081\u308b\u30d7\u30ed\u30b0\u30e9\u30e0 \uff09\n\n\n```{C++:C++}\n#include <iostream>\nusing namespace std;\n\nvoid LUdecomposition(int dimension, double** A, double** L, double** U){//LU\u5206\u89e3\n\tfor(int i=0;i<dimension;i++){\n\t\tfor(int j=0;j<dimension;j++){\n\t\t\tL[i][j]=0.0;\n\t\t\tU[i][j]=0.0;\n\t\t\tif(i==j)L[i][j]=1.0;\n\t\t}\n\t}\n\tdouble sum;\n\tfor(int i=0;i<dimension;i++){\n\t\tfor(int j=0;j<dimension;j++){\n\t\t\tif(i>j){\n\t\t\t\t/*L\u6210\u5206\u3092\u6c42\u3081\u308b*/\n\t\t\t\tsum=0.0;\n\t\t\t\tfor(int k=0;k<j;k++){\n\t\t\t\t\tsum+=L[i][k]*U[k][j];\n\t\t\t\t}\n\t\t\t\tL[i][j]=(A[i][j]-sum)/U[j][j];\n\t\t\t}else{\n\t\t\t\t/*U\u6210\u5206\u3092\u6c42\u3081\u308b*/\n\t\t\t\tsum=0.0;\n\t\t\t\tfor(int k=0;k<i;k++){\n\t\t\t\t\tsum+=L[i][k]*U[k][j];\n\t\t\t\t}\n\t\t\t\tU[i][j]=A[i][j]-sum;\n\t\t\t}\n\t\t}\n\t}\n}\n\nvoid Lforwardsubs(int dimension, double** L, double* b, double* y){//\u524d\u9032\u4ee3\u5165\n\tfor(int i=0;i<dimension;i++){\n\t\ty[i]=b[i];\n\t}\n\tfor(int i=0;i<dimension;i++){\n\t\ty[i]/=L[i][i];\n\t\tfor(int j=i+1;j<dimension;j++){\n\t\t\ty[j]-=y[i]*L[j][i];\n\t\t}\n\t}\n}\n\nvoid Ubackwardsubs(int dimension, double** U, double* y, double* x){//\u5f8c\u9000\u4ee3\u5165\n\tfor(int i=0;i<dimension;i++){\n\t\tx[i]=y[i];\n\t}\n\tfor(int i=dimension-1;i>=0;i--){\n\t\tx[i]/=U[i][i];\n\t\tfor(int j=i-1;j>=0;j--){\n\t\t\tx[j]-=x[i]*U[j][i];\n\t\t}\n\t}\n}\n\nint main(){\n\tint dimension,problem_num;\n\tdouble **A,**L,**U,**b,**x,*y;\n\n/*\u5165\u529b\u3092\u53d7\u3051\u53d6\u308b*/\n\tcin >> dimension;\n\tA=new double*[dimension];\n\tL=new double*[dimension];\n\tU=new double*[dimension];\n\ty=new double[dimension];\n\tfor(int i=0;i<dimension;i++){\n\t\tA[i]=new double[dimension];\n\t\tL[i]=new double[dimension];\n\t\tU[i]=new double[dimension];\n\t}\n\n\tfor(int i=0;i<dimension;i++){\n\t\tfor(int j=0;j<dimension;j++){\n\t\t\tcin >> A[i][j];\n\t\t}\n\t}\n\n\tcin >> problem_num;\n\tb=new double*[problem_num];\n\tx=new double*[problem_num];\n\tfor(int i=0;i<problem_num;i++){\n\t\tb[i]=new double[dimension];\n\t\tx[i]=new double[dimension];\n\t}\n\n\tfor(int i=0;i<problem_num;i++){\n\t\tfor(int j=0;j<dimension;j++){\n\t\t\tcin >> b[i][j];\n\t\t}\n\t}\n\n/*\u554f\u984c\u3092\u89e3\u304f*/\n\tLUdecomposition(dimension,A,L,U);\n\tfor(int i=0;i<problem_num;i++){\n\t\tLforwardsubs(dimension,L,b[i],y);\n\t\tUbackwardsubs(dimension,U,y,x[i]);\n\t}\n\n/*\u89e3\u7b54\u3092\u51fa\u529b\u3059\u308b*/\n\tfor(int i=0;i<problem_num;i++){\n\t\tfor(int j=0;j<dimension;j++){\n\t\t\tif(j!=0)cout << \" \"; \n\t\t\tcout << x[i][j];\n\t\t}\n\t\tcout << endl;\n\t}\n\n/*\u30e1\u30e2\u30ea\u306e\u89e3\u653e*/\n\tfor(int i=0;i<dimension;i++){\n\t\tdelete [] A[i];\n\t\tdelete [] L[i];\n\t\tdelete [] U[i];\n\t}\n\tfor(int i=0;i<problem_num;i++){\n\t\tdelete [] b[i];\n\t\tdelete [] x[i];\n\t}\n\tdelete [] A;\n\tdelete [] L;\n\tdelete [] U;\n\tdelete [] b;\n\tdelete [] x;\n\tdelete [] y;\n```\n\n### __Python\u8a00\u8a9e\u3067\u306e\u5b9f\u88c5__\n\n####__\u9023\u7acb\u65b9\u7a0b\u5f0f\u3092\u6c42\u3081\u308b\u51e6\u7406\u306e\u3046\u3061\u3001\u307e\u305a\u306f\u7b2c\uff11\u6bb5\u968e\u3068\u3057\u3066\u3001\u4e0e\u3048\u3089\u308c\u305f\u884c\u5217\u3092LU\u5206\u89e3\u3057\u3066\u51fa\u529b\u3059\u308b\u3068\u3053\u308d\u307e\u3067\u3092\u3001Python\u3067\u7f6e\u304d\u63db\u3048\u3066\u307f\u307e\u3059\u3002__\n\n##### __\uff08 \u30aa\u30ea\u30b8\u30ca\u30eb\u306e\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9 \uff09__\n\n```{C++:original}\nvoid LUdecomposition(int dimension, double** A, double** L, double** U){//LU\u5206\u89e3\n    for(int i=0;i<dimension;i++){\n        for(int j=0;j<dimension;j++){\n            L[i][j]=0.0;\n            U[i][j]=0.0;\n            if(i==j)L[i][j]=1.0;\n        }\n    }\n    double sum;\n    for(int i=0;i<dimension;i++){\n        for(int j=0;j<dimension;j++){\n            if(i>j){\n                /*L\u6210\u5206\u3092\u6c42\u3081\u308b*/\n                sum=0.0;\n                for(int k=0;k<j;k++){\n                    sum+=L[i][k]*U[k][j];\n                }\n                L[i][j]=(A[i][j]-sum)/U[j][j];\n            }else{\n                /*U\u6210\u5206\u3092\u6c42\u3081\u308b*/\n                sum=0.0;\n                for(int k=0;k<i;k++){\n                    sum+=L[i][k]*U[k][j];\n                }\n                U[i][j]=A[i][j]-sum;\n            }\n        }\n    }\n}\n```\n\n##### __\uff08 Python\u3067\u7f6e\u304d\u63db\u3048\u305f\u30b3\u30fc\u30c9 \uff09__\n\n* \u203b\u884c\u5217\u3092\u53d7\u3051\u53d6\u308b\u90e8\u5206\u306e\u51e6\u7406\u306f\u3001\u72ec\u81ea\u306b\u5b9f\u88c5\u5909\u66f4\u3057\u3066\u3044\u307e\u3059\u3002\n\n```{Python:LU_decomp.py}\n#!/Usr/bin/env python\n# -*- coding: utf-8 -*- \n\nimport math\nimport numpy as np\n\nmessage_1 = \"\"\"                                                                                                                                    \nLU\u5206\u89e3\u3092\u5b9f\u884c\u3059\u308b\u884c\u5217\u306e\u884c\u6570\uff08\uff1d\u5217\u6570\uff09\u3092\u5165\u529b\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n\"\"\"\n\nmessage_2 = \"\"\"                                                                                                                                    \n\n\u884c\u5217\u306e\u8981\u7d20\u3092\u3001\uff11\u3064\u305a\u3064\u9806\u756a\u306b\u5165\u529b\u3057\u3066\u304f\u3060\u3055\u3044\u3002\"\"\"\n\nmessage_3 = \"\"\"\n\n\u884c\u5217\u306e\u5bfe\u89d2\u8981\u7d20\u304c 0 \u306e\u5834\u5408\u3001\u30bc\u30ed\u3067\u5272\u308b\u51e6\u7406\u304c\u884c\u308f\u308c\u308b\u3068\u30a8\u30e9\u30fc\u304c\u767a\u751f\u3057\u307e\u3059\u3002\u6383\u304d\u51fa\u3057\u6cd5\u3092\u4f7f\u3063\u3066\u3001\u53d7\u3051\u53d6\u3063\u305f\u884c\u5217\u3092\n\n\"\"\"\n\n\n### main()\u30e1\u30bd\u30c3\u30c9\ndef main():\n    print(message_1)\n    n = int(raw_input())\n\n    # \u30e6\u30fc\u30b6\u304c\u5165\u529b\u3057\u305f\u6570\u5024 n \u3092\u3082\u3068\u306b\u3001\u884c\u5217\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u521d\u671f\u5316\u5ba3\u8a00\n    A = [[0 for col in range(n)] for row in range(n)]\n    L = [[0 for col in range(n)] for row in range(n)]\n    U = [[0 for col in range(n)] for row in range(n)]\n\n    #\u30e6\u30fc\u30b6\u304b\u3089\u53d7\u3051\u53d6\u3063\u305f\u6570\u5024\u3092\uff11\u3064\u3065\u3064\u3001\u884c\u5217matrix \u306e\u8981\u7d20\u306b\u4ee3\u5165\u3057\u3066\u3044\u304f\u51e6\u7406\n    print(message_2)\n\n    for i in range(n):\n        for j in range(n):\n            print(\"\\n\u884c\u5217({i}, {j})\u8981\u7d20\u306e\u5024\u3092\u5165\u529b\u3057\u3066\u304f\u3060\u3055\u3044\u3002\".format(i=i, j=j))\n            float_num = float(raw_input())\n            A[i][j] = float_num\n\n    print(\"\\n\u5165\u529b\u304c\u5b8c\u4e86\u3057\u307e\u3057\u305f\u3002\")\n    print(\"\\n\u3053\u308c\u304b\u3089LU\u5206\u89e3\u3092\u304a\u3053\u306a\u3046\u884c\u5217\u306f\u3001\u4ee5\u4e0b\u306b\u306a\u308a\u307e\u3059\u3002\\n\\n {matrix}\".format(matrix=np.array(A)))\n\n    #\u884c\u5217matrix \u306b\u5bfe\u3059\u308b\u30e6\u30fc\u30b6\u6307\u5b9a\u6570\u5024\u306e\u4ee3\u5165\u7d42\u4e86\n    print(message_3)\n\n    for i in range(n):\n        for j in range(n):\n            A[i][j] == float(0.0)\n            if((j-n) == i):\n                A[i][j] = float(1.0)\n\n    #LU\u5206\u89e3\u3092\u5b9f\u884c  \n    (L, U) = LU_decomp(A, L, U, n)\n\n\n    #\u7d50\u679c\u3092\u51fa\u529b\n    console_display(U, n, \"Upper matrix\")\n    print(\"\\n\\n\")\n    console_display(L, n, \"Lower matrix\")\n    \n    L_dot_U = np.dot(np.array(L), np.array(U))\n    print(\"\\n\\n L_dot_U :\\n  {L_dot_U}\\n\\n\".format(L_dot_U = L_dot_U))\n    \n    print(\"\\n\u30d7\u30ed\u30b0\u30e9\u30e0\u306e\u51e6\u7406\u304c\u6b63\u5e38\u306b\u7d42\u308f\u308a\u307e\u3057\u305f\u3002\")\n\n##### main()\u30e1\u30bd\u30c3\u30c9\u4ee5\u4e0a\n \n##### \ndef LU_decomp(A, L, U, n):\n    for i in range(n):\n        for j in range(n):\n            L[i][j]=float(0.0)\n            U[i][j]=float(0.0)\n            if(i==j):\n                L[i][j]=float(1.0)\n            \n    for i in range(n):\n            for j in range(n):\n                if(i > j): #/*L\u6210\u5206\u3092\u6c42\u3081\u308b*/\n                    sum=float(0.0)  #sum\u306e\u521d\u671f\u5316\u5ba3\u8a00 \n                    for k in range(0, j):\n                        sum += L[i][k]*U[k][j]\n                \n                    L[i][j]=(A[i][j]-sum)/U[j][j]\n                else: #/*U\u6210\u5206\u3092\u6c42\u3081\u308b*/\n                    sum=float(0.0) #sum\u306e\u521d\u671f\u5316\u5ba3\u8a00\n                    for k in range(0, i):\n                        sum += L[i][k]*U[k][j]\n                \n                    U[i][j]=A[i][j]-sum\n            \n    return (L, U)\n\n\n\ndef console_display(matrix, n, matrix_name):\n    print(\"{matrix_name}  :\\n\".format(matrix_name = matrix_name))\n\n    for i in range(n):\n        output = \"\"\n\n        for j in range(n):\n            output +=\"{element}  \".format(element=matrix[i][j])\n\n        print(output) #matrix \u306e\u5404\u884c\u3092\uff11\u884c\u3054\u3068\u306b\u51fa\u529b\u3002             \n\n\n\n##### \u3053\u306e\u30b9\u30af\u30ea\u30d7\u30c8\u30d5\u30a1\u30a4\u30eb\u3092\u5b9f\u884c\u3057\u305f\u3068\u304d\u306b\u3001main()\u30e1\u30bd\u30c3\u30c9\u5b9f\u884c\nif __name__ == '__main__':\n    main()\n```\n\n### \uff08\u3000\u5b9f\u884c\u3000\uff09\n\n![console_1.png](https://qiita-image-store.s3.amazonaws.com/0/43487/f70afc02-4fc9-36f9-610b-ccd812ee6e97.png)\n![console_2.png](https://qiita-image-store.s3.amazonaws.com/0/43487/340f8df0-d9e3-f2e2-7a14-257ac8c5f26a.png)\n### __Scipy / Numpy \u3092\u7528\u3044\u305f\u6f14\u7b97\u306e\u7d50\u679c\u3068\u7a81\u304d\u5408\u308f\u305b\u3066\u691c\u7b97__\n\n####[QuantStart, LU Decomposition in Python and NumPy](http://www.quantstart.com/articles/LU-Decomposition-in-Python-and-NumPy)\n\n\n__LU\u5206\u89e3\u3055\u308c\u305f\u884c\u5217\u306f\u3001\u4e0a\u8a18\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u306e\u306f\u3058\u304d\u3060\u3057\u305f\u884c\u5217\u3068\u306f\u8981\u7d20\u306e\u5024\u304c\u7570\u306a\u308b\u304c\u3001\u5185\u7a4d\u3092\u3068\u308b\u3068\u3001\u7d50\u679c\u306f\u540c\u3058\u3001\u6700\u521d\u306b\u4e0e\u3048\u305f\u884c\u5217\u306b\u306a\u308b__\n\n\uff08\u884c\u304c\uff11\u90e8\u5165\u308c\u66ff\u308f\u3063\u3066\u3044\u308b\u306e\u306f\u3001\u30e2\u30b8\u30e5\u30fc\u30eb\u5185\u90e8\u3067\u3001\u30d4\u30dc\u30c3\u30c8\u4ea4\u63db\u3092\u884c\u3044\u3001\u30bc\u30ed\u3067\u5272\u3063\u3066\u30a8\u30e9\u30fc\u306b\u306a\u308b\u30ea\u30b9\u30af\u3092\u56de\u907f\u3059\u308b\u51e6\u7406\u304c\u5b9f\u88c5\u3055\u308c\u3066\u3044\u308b\u304b\u3089\u3060\u3068\u304a\u3082\u308f\u308c\u308b\uff09\n\n![add_1.png](https://qiita-image-store.s3.amazonaws.com/0/43487/db563a8e-a0bc-39ee-e904-8703cef6eeb4.png)\n![add_2.png](https://qiita-image-store.s3.amazonaws.com/0/43487/de34e796-c415-b244-f06b-78b78b064e13.png)\n\n___\n\n### __\uff08\u88dc\u8db3\uff09__\n#### __\u4e0a\u4e09\u89d2\u6210\u5206\u3068\u4e0b\u4e09\u89d2\u6210\u5206\u3067\u51e6\u7406\u3092\u5834\u5408\u5206\u3051\u3057\u306a\u3044\u3067\u5b9f\u88c5\u3059\u308b\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u306b\u3064\u3044\u3066__\n\nLU\u6cd5 \u306b\u3064\u3044\u3066\u8a08\u7b97\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u3092\u8aac\u660e\u3057\u3066\u3044\u308b\u30a6\u30a7\u30d6\u30b5\u30a4\u30c8\u3092\u307f\u308b\u3068\u3001\u591a\u304f\u306f\u3001$if (i >j) \\cdots elif (i <= j)$ \u306e\u5834\u5408\u5206\u3051\u51e6\u7406\u3092\u884c\u3063\u3066\u3044\u306a\u3044\u3002\n\n\u5834\u5408\u5206\u3051\u3092\u884c\u308f\u306a\u3044\u306e\u306b\u3001\u3069\u3046\u3084\u3063\u3066\u4e0a\u4e09\u89d2\u6210\u5206\u3068\u3057\u305f\u4e09\u89d2\u6210\u5206\u306e\u8981\u7d20\u3092\u8a08\u7b97\u3067\u304d\u3066\u3044\u308b\u306e\u304b\u306b\u3064\u3044\u3066\u3001\u8a00\u53ca\u3057\u3066\u3044\u308b\u30a6\u30a7\u30d6\u30b5\u30a4\u30c8\u306f\u5c11\u306a\u3044\u3002\n\n\u3053\u306e\u70b9\u3092\u660e\u78ba\u306b\u89e3\u8aac\u3057\u3066\u3044\u308b\u304f\u3060\u308a\u3068\u3057\u3066\u306f\u3001\u305f\u3068\u3048\u3070\u3001\u4ee5\u4e0b\u306e\u30a6\u30a7\u30d6\u30b5\u30a4\u30c8\u304c\u5206\u304b\u308a\u3084\u3059\u3044\u3002\n\n* __[\u9ad8\u77e5\u5927\u5b66 \u300c \u6570\u5024\u89e3\u6790\uff08\u5869\u7530\uff09\u30fcLU\u5206\u89e3\u6cd5\u30fc \u300d](http://lupus.is.kochi-u.ac.jp/shiota/na2014/LU.pdf)__\n\n![pic_add.png](https://qiita-image-store.s3.amazonaws.com/0/43487/811e0b73-1c03-365c-a3b6-812a150322fc.png)\n\n___\n#### __\uff08 \u30b3\u30fc\u30c9\u5b9f\u88c5\u4f8b \uff09__  \n\n#####__\uff08\u51fa\u5178\uff09__ \n__[Hatena::Diary \u6570\u5024\u8a08\u7b97\u3068\u304b\u306e\u5099\u5fd8\u9332\uff08\u4eee\uff09\u300cLU\u5206\u89e3\u300d](http://d.hatena.ne.jp/aldente39/20110828/1314525894)__\n\n___\n* \u884c\u5217\u8981\u7d20$a_{ij}$\u3092\u3001\u884c\u5217\u306e\u5bfe\u89d2\u6210\u5206$a_{ii}$\u3067\u5272\u308a\u7b97\u3057\u3066\u3044\u308b\u3002\n* \u306a\u304a\u3001\u30b3\u30fc\u30c9\u4e2d\u306e $up$ \u3068\u306f\u3001\u30e6\u30fc\u30b6\u5b9a\u7fa9\u306e\u884c\u5217\u3092\u53d7\u3051\u53d6\u3063\u305f\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3067\u3042\u308a\u3001\u672c\u8a18\u4e8b\u3067\u52d5\u4f5c\u3092\u78ba\u8a8d\u3057\u305f\u30b3\u30fc\u30c9\u306b\u304a\u3051\u308b\u884c\u5217\u30aa\u30d6\u30b8\u30a7\u30af\u30c8$A$\u306b\u76f8\u5f53\u3002\n\n___\n\n![pic_add_2.png](https://qiita-image-store.s3.amazonaws.com/0/43487/d248a64e-6816-b676-a4e6-c3f48d21cc8f.png)\n\n___\n\n### __\uff08 \u53c2\u8003 \uff09__\n\n* __[PUKIWIKI LU\u5206\u89e3](http://slis.tsukuba.ac.jp/~fujisawa.makoto.fu/cgi-bin/wiki/index.php?LU%CA%AC%B2%F2)__\n\n\n___\n\n### __\uff08 \u30b3\u30fc\u30c9\u6539\u4fee\u88dc\u8db3 \uff09__\n##### __\uff08 \u5909\u66f4\u70b9 \uff09__\n\n    1. \u884c\u5217\u30c7\u30fc\u30bf\u3092\u8a18\u8ff0\u3057\u305f\u30d5\u30a1\u30a4\u30eb\u304b\u3089\u8aad\u307f\u8fbc\u3080\u3088\u3046\u306b\u5909\u66f4\n    2. \u30d7\u30ed\u30b0\u30e9\u30e0\u304b\u3089\u8fd4\u3055\u308c\u308b\u4e0a\u4e09\u89d2\u884c\u5217\u3068\u4e0b\u4e09\u89d2\u884c\u5217\u304c\u6b63\u3057\u3044\u306e\u304b\u306e\u691c\u7b97\u7d44\u307f\u8fbc\u307f\uff08\uff12\u3064\u306e\u884c\u5217\u3092\u5185\u7a4d\u3057\u305f\u7d50\u679c\u304c\u3001\u5143\u306e\u8aad\u307f\u8fbc\u3093\u3060\u884c\u5217\u3068\u4e00\u81f4\u3059\u308b\u304b\u306e\u30c1\u30a7\u30c3\u30af\uff09\n\n__**\u203b \u5909\u66f4\u70b9\uff11\u306f\u3001\u4ee5\u4e0b\u306e\u30a6\u30a7\u30d6\u30b5\u30a4\u30c8\u3092\u53c2\u8003\u306b\u3057\u3066\u3044\u307e\u3059**__\n__[Hatena::Diary \u6570\u5024\u8a08\u7b97\u3068\u304b\u306e\u5099\u5fd8\u9332\uff08\u4eee\uff09\u300cLU\u5206\u89e3\u300d](http://d.hatena.ne.jp/aldente39/20110828/1314525894)__\n\n\n###__\u5b9f\u884c__\n\n* \u30ab\u30ec\u30f3\u30c8\u30fb\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u306b\u3001\u4ee5\u4e0b\u306e\u6570\u5024\u304c\u8a18\u8ff0\u3055\u308c\u305f\u30d5\u30a1\u30a4\u30eb\u304c\u3042\u308a\u307e\u3059\u3002\n![insert_0.png](https://qiita-image-store.s3.amazonaws.com/0/43487/df2a743c-5462-f4a3-a1af-21a1d02da7f0.png)\n\n* \u4e0a\u8a18\u30d5\u30a1\u30a4\u30eb\u306e\u30d1\u30b9\u3092\u7d76\u5bfe\u30d1\u30b9\u3067\u6e21\u3057\u3066\u3001\u8aad\u307f\u8fbc\u307f\u5b9f\u884c\n![insert_1.png](https://qiita-image-store.s3.amazonaws.com/0/43487/efc0c304-80e2-7c47-d8c9-11ac73aa3fd2.png)\n![insert_2.png](https://qiita-image-store.s3.amazonaws.com/0/43487/ad04f39d-e15b-0642-b061-11adbc7ebe13.png)\n\n\n```{Python:\u6539\u4fee\u5f8c\u306e\u30b9\u30af\u30ea\u30d7\u30c8}\n#!/Usr/bin/env python\n# -*- coding: utf-8 -*- \n\nimport math, copy\nimport numpy as np\n\nmessage_1 = \"\"\"                                                                                                                                    \n\u3053\u308c\u304b\u3089\u51e6\u7406\u3092\u884c\u3046\u884c\u5217\u306e\u6570\u5024\u30c7\u30fc\u30bf\u3092\u3001\u30d5\u30a1\u30a4\u30eb\u304b\u3089\u8aad\u307f\u8fbc\u307f\u307e\u3059\u3002\n\u884c\u5217\u30c7\u30fc\u30bf\u306f\u3001\u884c\u6570\u3068\u5217\u6570\u304c\u540c\u3058\u6b63\u65b9\u884c\u5217\u3067\u306a\u3044\u3068\u3044\u3051\u307e\u305b\u3093\u3002\n\n\u884c\u5217\u6570\u5024\u304c\u8a18\u8ff0\u3055\u308c\u305f\u30d5\u30a1\u30a4\u30eb\u306e\u683c\u7d0d\u5834\u6240\u3092\u3001\u7d76\u5bfe\u30d1\u30b9\u3067\u5165\u529b\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n\"\"\"\n\nmessage_2 = \"\"\"\n\n\u884c\u5217\u3092\u4e0b\u4e09\u89d2\u884c\u5217\u3068\u4e0a\u4e09\u89d2\u884c\u5217\u306b\u5206\u89e3\u3057\u307e\u3059\u3002\n\u884c\u5217\u306e\u5bfe\u89d2\u8981\u7d20\u304c 0 \u306e\u5834\u5408\u3001\u30bc\u30ed\u3067\u5272\u308b\u51e6\u7406\u304c\u884c\u308f\u308c\u308b\u3068\u30a8\u30e9\u30fc\u304c\u767a\u751f\u3057\u307e\u3059\u3002\n\n\"\"\"\n\nsuccess_message = \"\"\"\n\"\u4e0a\u8a18\u306e\u4e0a\u4e09\u89d2\u884c\u5217\u3068\u4e0b\u4e09\u89d2\u884c\u5217\u3092\u5185\u7a4d\u6f14\u7b97\u3057\u305f\u7d50\u679c\u306f\u3001\u6700\u521d\u306b\u8aad\u307f\u8fbc\u3093\u3060\u884c\u5217\u3068\u5b8c\u5168\u306b\u4e00\u81f4\u3057\u307e\u3059\u3002\n\u4e09\u89d2\u884c\u5217\u3078\u306e\u5206\u89e3\u306f\u6210\u529f\u3057\u307e\u3057\u305f\u3002\n\n\"\"\"\n\n\nfailure_message = \"\"\"                                                                                                    \n\"\u4e0a\u8a18\u306e\u4e0a\u4e09\u89d2\u884c\u5217\u3068\u4e0b\u4e09\u89d2\u884c\u5217\u3092\u5185\u7a4d\u6f14\u7b97\u3057\u305f\u7d50\u679c\u306f\u3001\u6700\u521d\u306b\u8aad\u307f\u8fbc\u3093\u3060\u884c\u5217\u3068\u4e00\u81f4\u3057\u307e\u305b\u3093\u3002                               \n\u4e09\u89d2\u884c\u5217\u3078\u306e\u5206\u89e3\u306b\u5931\u6557\u6210\u529f\u3057\u307e\u3057\u305f\u3002                                                                                     \n\n\"\"\"\n\n\n### main()\u30e1\u30bd\u30c3\u30c9\ndef main():\n    print(message_1)\n\n    file_path = raw_input()\n\n    # \u30e6\u30fc\u30b6\u304c\u6307\u5b9a\u3057\u305f\u7d76\u5bfe\u30d1\u30b9\u306e\u30d5\u30a1\u30a4\u30eb\u306b\u30a2\u30af\u30bb\u30b9\u3057\u3066\u3001\u884c\u5217\u6570\u5024\u30c7\u30fc\u30bf\u3092\u8aad\u307f\u8fbc\u3080\n    (dim, matrix) = read_matrix_data(file_path)\n\n    # \u5143\u306ematrix\u3092\u58ca\u3055\u306a\u3044\u3088\u3046\u306bcopy\u3059\u308b\n    A = copy.deepcopy(matrix) \n\n    print(\"\\n\u30c7\u30fc\u30bf\u306e\u8aad\u307f\u8fbc\u307f\u304c\u5b8c\u4e86\u3057\u307e\u3057\u305f\u3002\")\n    print(\"\\n\u3053\u308c\u304b\u3089LU\u5206\u89e3\u3092\u304a\u3053\u306a\u3046\u884c\u5217\u306f\u3001\u4ee5\u4e0b\u306b\u306a\u308a\u307e\u3059\u3002\\n\\n {matrix}\".format(matrix=np.array(A)))\n\n    # \u8aad\u307f\u8fbc\u3080\u884c\u5217\u306f\u3001\u884c\u6570\u3068\u5217\u6570\u304c\u7b49\u3057\u3044\u6b63\u65b9\u884c\u5217\u3067\u3042\u308b\u3053\u3068\u3092\u524d\u63d0\u3068\u3057\u3066\u3044\u308b\u305f\u3081\u3001\u884c\u6570n\u3092\u53d6\u5f97\n    n = dim \n\n    # \u30e6\u30fc\u30b6\u304c\u5165\u529b\u3057\u305f\u6570\u5024 n \u3092\u3082\u3068\u306b\u3001\u4e09\u89d2\u884c\u5217\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u521d\u671f\u5316\u5ba3\u8a00\n    L = [[0 for col in range(n)] for row in range(n)]\n    U = [[0 for col in range(n)] for row in range(n)]\n\n\n    #\u4e0b\u4e09\u89d2\u884c\u5217\u306e\u5bfe\u89d2\u8981\u7d20\u3092\uff11\u306b\u8a2d\u5b9a \uff08\u30af\u30e9\u30a6\u30c8\u6cd5\uff09\n    for i in range(n):\n        for j in range(n):\n            A[i][j] == float(0.0)\n            if((j-n) == i):\n                A[i][j] = float(1.0)\n\n    #LU\u5206\u89e3\u3092\u5b9f\u884c \n    print(message_2)\n    (L, U) = LU_decomp(A, L, U, n)\n\n\n    #\u7d50\u679c\u3092\u51fa\u529b\n    console_display(U, n, \"Upper matrix\")\n    print(\"\\n\\n\")\n    console_display(L, n, \"Lower matrix\")\n\n    L_dot_U = np.dot(np.array(L), np.array(U))\n    print(\"\\n\\nUpper matrix \u3068 Lower matrix \u3092\u5185\u7a4d\u3057\u305f\u7d50\u679c :\\n\\n{L_dot_U}\\n\\n\".format(L_dot_U = L_dot_U))\n\n    #\u7d50\u679c\u306e\u691c\u8a3c\u3000\uff08\u8a08\u7b97\u306e\u7d50\u679c\u3001\u5f97\u3089\u308c\u305f\u4e0a\u4e09\u89d2\u884c\u5217\u3068\u4e0b\u4e09\u89d2\u884c\u5217\u3092\u5185\u7a4d\u3057\u305f\u7d50\u679c\u304c\u3001\u3082\u3068\u306e\u884c\u5217\u3068\u5b8c\u5168\u4e00\u81f4\u3059\u308b\u304b\u306e\u78ba\u8a8d \uff09\n    evaluation_expression = np.all(L_dot_U == np.array(matrix))\n\n    if(evaluation_expression):\n        print(success_message)\n    else:\n        print(failure_message)\n\n    print(\"\\n\u30d7\u30ed\u30b0\u30e9\u30e0\u306e\u51e6\u7406\u304c\u7d42\u308f\u308a\u307e\u3057\u305f\u3002\")\n\n##### main()\u30e1\u30bd\u30c3\u30c9\u4ee5\u4e0a\n\n##### \u884c\u5217\u30c7\u30fc\u30bf\u306e\u8aad\u307f\u8fbc\u307f\u30e1\u30bd\u30c3\u30c9\ndef read_matrix_data(file_path):\n    dim = 0\n    matrix = []\n    num = []\n\n    for line in open(file_path):\n        row = line.split(' ') #\u884c\u5217\u30c7\u30fc\u30bf\u3092\uff11\u884c\u305a\u3064\u8aad\u307f\u8fbc\u307f\n        for element in row:\n            num.append(float(element)) #\u884c\u5217\u30c7\u30fc\u30bf\u306e\u3042\u308b\uff11\u884c\u3092\u30ea\u30b9\u30c8\u306b\u8aad\u8fbc\u307f\n        matrix.append(num) #\u30ea\u30b9\u30c8\u578b\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u300cmatrix\u300d\u306e\u8981\u7d20\u306b\u3001\u884c\u5217\u30c7\u30fc\u30bf\u306e\uff11\u884c\u3092append\uff08\uff12\u6b21\u5143\u914d\u5217\u306e\u751f\u6210\uff09\n        num = []\n        dim += 1\n\n    return (dim, matrix) #\uff12\u6b21\u5143\u914d\u5217 (list\u3092\u8981\u7d20\u306b\u3082\u3064list) \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092return\n\n##### LU\u5206\u89e3\u5b9f\u884c\u30e1\u30bd\u30c3\u30c9\ndef LU_decomp(A, L, U, n):\n    for i in range(n):\n        for j in range(n):\n            L[i][j]=float(0.0)\n            U[i][j]=float(0.0)\n            if(i==j):\n                L[i][j]=float(1.0)\n\n    for i in range(n):\n            for j in range(n):\n                if(i > j): #/*L\u6210\u5206\u3092\u6c42\u3081\u308b*/\n                    sum=float(0.0)  #sum\u306e\u521d\u671f\u5316\u5ba3\u8a00 \n                    for k in range(0, j):\n                        sum += L[i][k]*U[k][j]\n\n                    L[i][j]=(A[i][j]-sum)/U[j][j]\n                else: #/*U\u6210\u5206\u3092\u6c42\u3081\u308b*/\n                    sum=float(0.0) #sum\u306e\u521d\u671f\u5316\u5ba3\u8a00\n                    for k in range(0, i):\n                        sum += L[i][k]*U[k][j]\n\n                    U[i][j]=A[i][j]-sum\n\n    return (L, U)\n\n\n##### \u884c\u5217\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u6a19\u6e96\u51fa\u529b\u8868\u793a\u30e1\u30bd\u30c3\u30c9\ndef console_display(matrix, n, matrix_name):\n    print(\"{matrix_name}  :\\n\".format(matrix_name = matrix_name))\n\n    for i in range(n):\n        output = \"\"\n\n        for j in range(n):\n            output +=\"{element}  \".format(element=matrix[i][j])\n\n        print(output) #matrix \u306e\u5404\u884c\u3092\uff11\u884c\u3054\u3068\u306b\u51fa\u529b\u3002             \n\n\n##### \u3053\u306e\u30b9\u30af\u30ea\u30d7\u30c8\u30d5\u30a1\u30a4\u30eb\u3092\u5b9f\u884c\u3057\u305f\u3068\u304d\u306b\u3001main()\u30e1\u30bd\u30c3\u30c9\u5b9f\u884c                                                         \nif __name__ == '__main__':\n    main()\n```\n\n\n", "tags": ["Python", "\u6570\u5024\u8a08\u7b97", "statistics", "\u7d71\u8a08\u5b66", "\u6570\u5b66"]}