{"context": " More than 1 year has passed since last update.\n\n\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\n\u3044\u3064\u3082\u901a\u308a pip \u3067\u3002\n$ pip install lettuce\n\n\nFeature \u3092\u66f8\u304f\n\u62e1\u5f35\u5b50\u3092 .feature \u306b\u3059\u308c\u3070\u3044\u3044\u3067\u3059\u304c\u3001features \u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u306b\u66f8\u304f\u65b9\u304c\u6c17\u6301\u3061\u3044\u3044\u6c17\u304c\u3059\u3057\u307e\u3059\u3002\u65e5\u672c\u8a9e\u306b\u3082\u5bfe\u5fdc\u3057\u3066\u308b\u305d\u3046\u3067\u3059\u3002\n\nfeatures/example.feature\nFeature: a cookie in a bug\n  In order to eat a cookie\n  I carry a bug\n\nScenario: simple test\n  Given I have a bug\n  Then a cookie exists in the bug\n\n\n\u3067\u3001lettuce \u3092\u5b9f\u884c\u3059\u308b\u3068\u3001\u66f8\u304f\u3079\u304d step \u306e\u30c6\u30f3\u30d7\u30ec\u3092\u8868\u793a\u3057\u3066\u304f\u308c\u307e\u3059\u3002\n#You can implement step definitions for undefined steps with these snippets:\n\n# -*- coding: utf-8 -*-\nfrom lettuce import step\n\n@step(u'Given I have a bug')\ndef given_i_have_a_bug(step):\n    assert False, 'This step must be implemented'\n@step(u'Then a coookie exists in the bug')\ndef then_a_cookie_exists_in_the_bug(step):\n    assert False, 'This step must be implemented'\n\npending \u304c\u7121\u3044\u30fb\u30fb\u30fb\u306e\u304b\u306a\uff1f\n\nStep \u3092\u66f8\u304f\n\u4f5c\u3063\u305f feature \u3068\u540c\u3058\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u306b\u3001.py \u3067\u4f5c\u308a\u307e\u3059\u3002\u307e\u305a\u306f\u30b3\u30d4\u30da\u3002\n\nfeatures/example.py\n# -*- coding: utf-8 -*-\nfrom lettuce import step\n\n@step(u'Given I have a bug')\ndef given_i_have_a_bug(step):\n    assert False, 'This step must be implemented'\n@step(u'Then a coookie exists in the bug')\ndef then_a_coookie_exists_in_the_bug(step):\n    assert False, 'This step must be implemented'\n\n\n\u3053\u306e\u307e\u307e\u3067\u306f\u3001\u3059\u3079\u3066 Fail \u3059\u308b\u306e\u3067\u3001\u305d\u308c\u3063\u307d\u304f\u66f8\u304d\u63db\u3048\u307e\u3059\u3002\n\nexample.py\n# -*- coding: utf-8 -*-\nfrom lettuce import *\nimport sys\nimport bug # \u3053\u308c\u304b\u3089\u4f5c\u308b\n\n@step(u'Given I have a (.*)$')\ndef given_i_have_a_bug(step, arg):\n    cls = getattr(sys.modules[arg], arg[0].upper() + arg[1:])\n    world.__dict__[arg] = cls()\n    assert world.__dict__[arg], arg + ' must be an instance'\n\n@step(u'Then a cookie exists in the (.*)$')\ndef then_a_coookie_exists_in_the_bug(step, obj):\n    assert world.__dict__[obj].cookie, arg1 + ' should return True'\n\n\n\n\u30c6\u30b9\u30c8\uff01\nlettuce \u3092\u5b9f\u884c\u3059\u308b\u3060\u3051\u3067\u3059\u3002\n\n\u3044\u3056\u5b9f\u88c5\n\u3061\u3087\u3063\u3068\u3057\u3087\u307c\u3059\u304e\u307e\u3059\u304c\u3002\u3002\u3002\n\nbug.py\nclass Bug(object):\n  def __init__(self):\n    self.cookie = True\n\n\n\n\u307e\u3068\u3081\u307e\u3059\n\n\u30b9\u30c6\u30c3\u30d7\u306e import \u306f\u30c6\u30f3\u30d7\u30ec\u304b\u3089\u66f8\u304d\u63db\u3048\u308b\nworld \u3067\u5404\u30b9\u30c6\u30c3\u30d7\u5171\u6709\u306e\u5909\u6570\u3092\u4f5c\u308b\n\n@step \u306f ruby \u3068\u4f3c\u3066\u308b\u306e\u3067\u66f8\u304d\u3084\u3059\u3044\n\n@step \u306e\u6587\u5b57\u5217\u3068\u76f4\u5f8c\u306e\u95a2\u6570\u540d\u306f\u540c\u3058\u3058\u3083\u306a\u304f\u3066\u826f\u3044\n\u30b9\u30c6\u30c3\u30d7\u3092\u66f8\u304f\u306e\u304c\u96e3\u3057\u3044(\u3053\u308c\u3060\u3051\u3067\uff12\u6642\u9593\u304b\u304b\u3063\u305f\uff09\n\u3082\u3063\u3068\u826f\u3044\u30b5\u30f3\u30d7\u30eb\u304c\u4e16\u306e\u4e2d\u306b\u306f\u305f\u304f\u3055\u3093\u3042\u308b orz\n\n\n## \u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\n\n\u3044\u3064\u3082\u901a\u308a pip \u3067\u3002\n\n```\n$ pip install lettuce\n```\n\n## Feature \u3092\u66f8\u304f\n\n\u62e1\u5f35\u5b50\u3092 .feature \u306b\u3059\u308c\u3070\u3044\u3044\u3067\u3059\u304c\u3001features \u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u306b\u66f8\u304f\u65b9\u304c\u6c17\u6301\u3061\u3044\u3044\u6c17\u304c\u3059\u3057\u307e\u3059\u3002[\u65e5\u672c\u8a9e\u306b\u3082\u5bfe\u5fdc\u3057\u3066\u308b\u305d\u3046\u3067\u3059\u3002](http://d.hatena.ne.jp/aroma_black/20110711/1310391394)\n\n```Cucumber:features/example.feature\nFeature: a cookie in a bug\n  In order to eat a cookie\n  I carry a bug\n\nScenario: simple test\n  Given I have a bug\n  Then a cookie exists in the bug\n```\n\n\u3067\u3001lettuce \u3092\u5b9f\u884c\u3059\u308b\u3068\u3001\u66f8\u304f\u3079\u304d step \u306e\u30c6\u30f3\u30d7\u30ec\u3092\u8868\u793a\u3057\u3066\u304f\u308c\u307e\u3059\u3002\n\n```python:\n#You can implement step definitions for undefined steps with these snippets:\n\n# -*- coding: utf-8 -*-\nfrom lettuce import step\n\n@step(u'Given I have a bug')\ndef given_i_have_a_bug(step):\n    assert False, 'This step must be implemented'\n@step(u'Then a coookie exists in the bug')\ndef then_a_cookie_exists_in_the_bug(step):\n    assert False, 'This step must be implemented'\n```\n\npending \u304c\u7121\u3044\u30fb\u30fb\u30fb\u306e\u304b\u306a\uff1f\n\n## Step \u3092\u66f8\u304f\n\n\u4f5c\u3063\u305f feature \u3068\u540c\u3058\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u306b\u3001.py \u3067\u4f5c\u308a\u307e\u3059\u3002\u307e\u305a\u306f\u30b3\u30d4\u30da\u3002\n\n```python:features/example.py\n# -*- coding: utf-8 -*-\nfrom lettuce import step\n\n@step(u'Given I have a bug')\ndef given_i_have_a_bug(step):\n    assert False, 'This step must be implemented'\n@step(u'Then a coookie exists in the bug')\ndef then_a_coookie_exists_in_the_bug(step):\n    assert False, 'This step must be implemented'\n```\n\n\u3053\u306e\u307e\u307e\u3067\u306f\u3001\u3059\u3079\u3066 Fail \u3059\u308b\u306e\u3067\u3001\u305d\u308c\u3063\u307d\u304f\u66f8\u304d\u63db\u3048\u307e\u3059\u3002\n\n```example.py\n# -*- coding: utf-8 -*-\nfrom lettuce import *\nimport sys\nimport bug # \u3053\u308c\u304b\u3089\u4f5c\u308b\n\n@step(u'Given I have a (.*)$')\ndef given_i_have_a_bug(step, arg):\n    cls = getattr(sys.modules[arg], arg[0].upper() + arg[1:])\n    world.__dict__[arg] = cls()\n    assert world.__dict__[arg], arg + ' must be an instance'\n\n@step(u'Then a cookie exists in the (.*)$')\ndef then_a_coookie_exists_in_the_bug(step, obj):\n    assert world.__dict__[obj].cookie, arg1 + ' should return True'\n```\n## \u30c6\u30b9\u30c8\uff01\n\nlettuce \u3092\u5b9f\u884c\u3059\u308b\u3060\u3051\u3067\u3059\u3002\n\n## \u3044\u3056\u5b9f\u88c5\n\n\u3061\u3087\u3063\u3068\u3057\u3087\u307c\u3059\u304e\u307e\u3059\u304c\u3002\u3002\u3002\n\n```python:bug.py\nclass Bug(object):\n  def __init__(self):\n    self.cookie = True\n```\n\n\n## \u307e\u3068\u3081\u307e\u3059\n\n* \u30b9\u30c6\u30c3\u30d7\u306e import \u306f\u30c6\u30f3\u30d7\u30ec\u304b\u3089\u66f8\u304d\u63db\u3048\u308b\n* world \u3067\u5404\u30b9\u30c6\u30c3\u30d7\u5171\u6709\u306e\u5909\u6570\u3092\u4f5c\u308b\n* @step \u306f ruby \u3068\u4f3c\u3066\u308b\u306e\u3067\u66f8\u304d\u3084\u3059\u3044\n* @step \u306e\u6587\u5b57\u5217\u3068\u76f4\u5f8c\u306e\u95a2\u6570\u540d\u306f\u540c\u3058\u3058\u3083\u306a\u304f\u3066\u826f\u3044\n* \u30b9\u30c6\u30c3\u30d7\u3092\u66f8\u304f\u306e\u304c\u96e3\u3057\u3044(\u3053\u308c\u3060\u3051\u3067\uff12\u6642\u9593\u304b\u304b\u3063\u305f\uff09\n* \u3082\u3063\u3068\u826f\u3044\u30b5\u30f3\u30d7\u30eb\u304c\u4e16\u306e\u4e2d\u306b\u306f\u305f\u304f\u3055\u3093\u3042\u308b orz", "tags": ["Python", "Cucumber", "lettuce"]}