{"context": " More than 1 year has passed since last update.Clojure\u304b\u3089Jubatus\u306eRegression\uff08\u56de\u5e30\uff09\u3092\u4f7f\u3063\u3066\u307f\u308b\u30b5\u30f3\u30d7\u30eb\u3067\u3059\u3002\n\u516c\u5f0f\u30b5\u30a4\u30c8\u306e http://jubat.us/ja/tutorial/regression.html \u306eClojure\u7248\u3067\u3059\u3002\n\u8cc3\u8cb8\u60c5\u5831\u304b\u3089\u56de\u5e30\u30e2\u30c7\u30eb\u3092\u4f5c\u6210\u3057\u3066\u3001\u5bb6\u8cc3\u3092\u63a8\u5b9a\u3059\u308b\u30d7\u30ed\u30b0\u30e9\u30e0\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u3002\n\u56de\u5e30\u3068\u306f$y = a_0 + a_1 x_1 + a_2 x_2 + ... $\u306a\u3069\u306e\u5f0f\u3067\u3001\u5b9f\u969b\u306e\u5024\u3068\u305d\u306e\u5f0f\uff08\u8fd1\u4f3c\u5f0f\uff09\u304c\u6f38\u8fd1\u3059\u308b\u3088\u3046\u306a\u4fc2\u6570$a_0 , a_1 , a_2...$\u3092\u6c42\u3081\u308b\u3082\u306e\u3067\u3059\u3002\n\u52d5\u4f5c\u306b\u5fc5\u8981\u306arent.json\u3068rent-data.csv\u306f\u4e0a\u8a18\u30ea\u30f3\u30af\u5148\u304b\u3089\u3069\u3046\u305e\u3002\njubaregression -f rent.json\u3067Jubatus\u30b5\u30fc\u30d0\u3092\u8d77\u52d5\u3057\u3066\u304a\u3051\u3070\u4ee5\u4e0b\u306e\u30b5\u30f3\u30d7\u30eb\u3092\u5b9f\u884c\u3067\u304d\u307e\u3059\u3002\nmyhome.edn\u30d5\u30a1\u30a4\u30eb\u306f\u63a8\u5b9a\u3057\u305f\u3044\u8cc3\u8cb8\u60c5\u5831\u3067\u3059\u3002\n\nmyhome.edn\n;\n; distance : \u99c5\u304b\u3089\u306e\u5f92\u6b69\u6642\u9593 (\u5206)\n; space    : \u5c02\u6709\u9762\u7a4d (m*m)\n; age      : \u7bc9\u5e74\u6570 (\u5e74)\n; stair    : \u968e\u6570\n; aspect   : \u5411\u304d [ N / NE / E / SE / S / SW / W / NW ]\n;\n{\"distance\" 8\n \"space\"    32.00\n \"age\"      15\n \"stair\"    5\n \"aspect\"   \"S\"}\n\n\n\nregression.clj\n(ns jubatus-sample.regression\n  (:require [clojure.java.io :as io]\n            [clojure.string :as s]\n            [clojure.edn :as e])\n  (:import [us.jubat.regression RegressionClient ScoredDatum]\n           [us.jubat.common Datum]))\n\n(defn read-csv [file]\n  (with-open [r (io/reader file)]\n    (let [f #(when-not (.startsWith % \"#\")\n               (s/split % #\",\"))]\n      (doall (keep f (line-seq r))))))\n\n(defn map->datum [hmap]\n  (let [d (Datum.)]\n    (doseq [[k v] hmap]\n      (condp instance? v\n        String (.addString d k v)\n        Number (.addNumber d k v)\n        (.addBinary d k v)))\n    d))\n\n(defn ->double [v] (Double/parseDouble v))\n\n(defn train [client csvfile]\n  (let [csvs (read-csv csvfile)]\n    (doseq [csv csvs]\n      (let [ks [\"aspect\" \"distance\" \"space\" \"age\" \"stair\"]\n            vs (cons (last csv) (map #(->double (s/trim %)) (rest (butlast csv))))\n            datum (map->datum (zipmap ks vs))]\n        (.train client [(ScoredDatum. (->double (first csv)) datum)])))\n    (println \"train ...\" (count csvs))))\n\n(defn estimate [client ednfile]\n  (let [datum (map->datum (e/read-string (slurp ednfile)))\n        result (.estimate client [datum])]\n    (println \"rent ....\" (format \"%.1f\" (first result)))))\n\n(def client (RegressionClient. \"127.0.0.1\" 9199 \"reg\" 1))\n(train client \"rent-data.csv\")\n(estimate client \"myhome.edn\")\n\n\nClassifier\u3084Recommender\u306e\u3068\u304d\u3068\u6d41\u308c\u306f\u307b\u3068\u3093\u3069\u540c\u3058\u3067\u3059\u306d\u3002\nScoredDatum[float, Datum]\u3092\u8907\u6570\u5165\u529b\u3057\u3066\u5b66\u7fd2(train)\u3057\u3066\u3001Datum\u3092\u5165\u529b\u3057\u3066\u63a8\u5b9a(estimate)\u3057\u3066\u3044\u307e\u3059\u3002\nClojure\u304b\u3089Jubatus\u306eRegression\uff08\u56de\u5e30\uff09\u3092\u4f7f\u3063\u3066\u307f\u308b\u30b5\u30f3\u30d7\u30eb\u3067\u3059\u3002\n\u516c\u5f0f\u30b5\u30a4\u30c8\u306e http://jubat.us/ja/tutorial/regression.html \u306eClojure\u7248\u3067\u3059\u3002\n\u8cc3\u8cb8\u60c5\u5831\u304b\u3089\u56de\u5e30\u30e2\u30c7\u30eb\u3092\u4f5c\u6210\u3057\u3066\u3001\u5bb6\u8cc3\u3092\u63a8\u5b9a\u3059\u308b\u30d7\u30ed\u30b0\u30e9\u30e0\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u3002\n\u56de\u5e30\u3068\u306f$y = a_0 + a_1 x_1 + a_2 x_2 + ... $\u306a\u3069\u306e\u5f0f\u3067\u3001\u5b9f\u969b\u306e\u5024\u3068\u305d\u306e\u5f0f\uff08\u8fd1\u4f3c\u5f0f\uff09\u304c\u6f38\u8fd1\u3059\u308b\u3088\u3046\u306a\u4fc2\u6570$a_0 , a_1 , a_2...$\u3092\u6c42\u3081\u308b\u3082\u306e\u3067\u3059\u3002\n\n\u52d5\u4f5c\u306b\u5fc5\u8981\u306arent.json\u3068rent-data.csv\u306f\u4e0a\u8a18\u30ea\u30f3\u30af\u5148\u304b\u3089\u3069\u3046\u305e\u3002\n\n`jubaregression -f rent.json`\u3067Jubatus\u30b5\u30fc\u30d0\u3092\u8d77\u52d5\u3057\u3066\u304a\u3051\u3070\u4ee5\u4e0b\u306e\u30b5\u30f3\u30d7\u30eb\u3092\u5b9f\u884c\u3067\u304d\u307e\u3059\u3002\nmyhome.edn\u30d5\u30a1\u30a4\u30eb\u306f\u63a8\u5b9a\u3057\u305f\u3044\u8cc3\u8cb8\u60c5\u5831\u3067\u3059\u3002\n\n```clj:myhome.edn\n;\n; distance : \u99c5\u304b\u3089\u306e\u5f92\u6b69\u6642\u9593 (\u5206)\n; space    : \u5c02\u6709\u9762\u7a4d (m*m)\n; age      : \u7bc9\u5e74\u6570 (\u5e74)\n; stair    : \u968e\u6570\n; aspect   : \u5411\u304d [ N / NE / E / SE / S / SW / W / NW ]\n;\n{\"distance\" 8\n \"space\"    32.00\n \"age\"      15\n \"stair\"    5\n \"aspect\"   \"S\"}\n```\n\n```regression.clj\n(ns jubatus-sample.regression\n  (:require [clojure.java.io :as io]\n            [clojure.string :as s]\n            [clojure.edn :as e])\n  (:import [us.jubat.regression RegressionClient ScoredDatum]\n           [us.jubat.common Datum]))\n\n(defn read-csv [file]\n  (with-open [r (io/reader file)]\n    (let [f #(when-not (.startsWith % \"#\")\n               (s/split % #\",\"))]\n      (doall (keep f (line-seq r))))))\n\n(defn map->datum [hmap]\n  (let [d (Datum.)]\n    (doseq [[k v] hmap]\n      (condp instance? v\n        String (.addString d k v)\n        Number (.addNumber d k v)\n        (.addBinary d k v)))\n    d))\n\n(defn ->double [v] (Double/parseDouble v))\n\n(defn train [client csvfile]\n  (let [csvs (read-csv csvfile)]\n    (doseq [csv csvs]\n      (let [ks [\"aspect\" \"distance\" \"space\" \"age\" \"stair\"]\n            vs (cons (last csv) (map #(->double (s/trim %)) (rest (butlast csv))))\n            datum (map->datum (zipmap ks vs))]\n        (.train client [(ScoredDatum. (->double (first csv)) datum)])))\n    (println \"train ...\" (count csvs))))\n\n(defn estimate [client ednfile]\n  (let [datum (map->datum (e/read-string (slurp ednfile)))\n        result (.estimate client [datum])]\n    (println \"rent ....\" (format \"%.1f\" (first result)))))\n\n(def client (RegressionClient. \"127.0.0.1\" 9199 \"reg\" 1))\n(train client \"rent-data.csv\")\n(estimate client \"myhome.edn\")\n```\n\nClassifier\u3084Recommender\u306e\u3068\u304d\u3068\u6d41\u308c\u306f\u307b\u3068\u3093\u3069\u540c\u3058\u3067\u3059\u306d\u3002\nScoredDatum[float, Datum]\u3092\u8907\u6570\u5165\u529b\u3057\u3066\u5b66\u7fd2(train)\u3057\u3066\u3001Datum\u3092\u5165\u529b\u3057\u3066\u63a8\u5b9a(estimate)\u3057\u3066\u3044\u307e\u3059\u3002\n\n\n", "tags": ["Clojure1.6.0", "jubatus0.6.1", "\u6a5f\u68b0\u5b66\u7fd2"]}