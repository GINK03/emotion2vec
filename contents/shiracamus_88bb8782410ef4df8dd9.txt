{"context": " More than 1 year has passed since last update.\u554f\u984c\u306f\u3053\u3061\u3089\nhttp://nabetani.sakura.ne.jp/hena/ord18notfork/\n\u5b9f\u884c\u7d50\u679c\u306f\u3053\u3061\u3089\nhttp://ideone.com/0UElur\n\u4ed6\u306e\u65b9\u3005\u306e\u89e3\u7b54\u4f8b\u306f\u3053\u3061\u3089\nhttp://qiita.com/Nabetani/items/ad47666c2f2f44ada1e7\n#!/usr/bin/env python\n\ncashiers = (2,7,3,5,2)    # capabilities\n\ndef solve(data):\n    customer = [0] * len(cashiers)\n    processable = [9*len(data)] * len(cashiers)\n    for d in data:\n        cashier = customer.index(min(customer))\n        if d in '123456789':\n            customer[cashier] += int(d)\n        elif d == 'x':\n            processable[cashier] = min(customer[cashier], processable[cashier])\n            customer[cashier] += 1\n        elif d == '.':\n            for cashier,capability in enumerate(cashiers):\n                customer[cashier] -= min(customer[cashier], processable[cashier], capability)\n                processable[cashier] -= min(processable[cashier], capability)\n    return ','.join(map(str, customer))\n\ndef test(data, correct):\n    answer = solve(data)\n    print 'xo'[answer==correct], data, correct, answer\n\n0, test( \"42873x.3.\", \"0,4,2,0,0\" );\n1, test( \"1\", \"1,0,0,0,0\" );\n2, test( \".\", \"0,0,0,0,0\" );\n3, test( \"x\", \"1,0,0,0,0\" );\n4, test( \"31.\", \"1,0,0,0,0\" );\n5, test( \"3x.\", \"1,1,0,0,0\" );\n6, test( \"99569x\", \"9,9,6,6,9\" );\n7, test( \"99569x33\", \"9,9,9,9,9\" );\n8, test( \"99569x33.\", \"7,2,6,4,7\" );\n9, test( \"99569x33..\", \"5,0,4,0,5\" );\n10, test( \"12345x3333.\", \"4,0,3,2,3\" );\n11, test( \"54321x3333.\", \"3,0,3,0,4\" );\n12, test( \"51423x3333.\", \"3,4,4,0,4\" );\n13, test( \"12x34x.\", \"1,0,1,0,2\" );\n14, test( \"987x654x.32\", \"7,6,4,10,5\" );\n15, test( \"99999999999x99999999.......9.\", \"20,10,12,5,20\" );\n16, test( \"997\", \"9,9,7,0,0\" );\n17, test( \".3.9\", \"1,9,0,0,0\" );\n18, test( \"832.6\", \"6,6,0,0,0\" );\n19, test( \".5.568\", \"3,5,6,8,0\" );\n20, test( \"475..48\", \"4,8,0,0,0\" );\n21, test( \"7.2..469\", \"1,4,6,9,0\" );\n22, test( \"574x315.3\", \"3,3,1,7,1\" );\n23, test( \"5.2893.x98\", \"10,9,5,4,1\" );\n24, test( \"279.6xxx..4\", \"2,1,4,1,1\" );\n25, test( \"1.1.39..93.x\", \"7,1,0,0,0\" );\n26, test( \"7677749325927\", \"16,12,17,18,12\" );\n27, test( \"x6235.87.56.9.\", \"7,2,0,0,0\" );\n28, test( \"4.1168.6.197.6.\", \"0,0,3,0,0\" );\n29, test( \"2.8.547.25..19.6\", \"6,2,0,0,0\" );\n30, test( \".5.3x82x32.1829..\", \"5,0,5,0,7\" );\n31, test( \"x.1816..36.24.429.\", \"1,0,0,0,7\" );\n32, test( \"79.2.6.81x..26x31.1\", \"1,0,2,1,1\" );\n33, test( \"574296x6538984..5974\", \"14,13,10,15,14\" );\n34, test( \"99.6244.4376636..72.6\", \"5,6,0,0,3\" );\n35, test( \"1659.486x5637168278123\", \"17,16,16,18,17\" );\n36, test( \".5.17797.x626x5x9457.3.\", \"14,0,3,5,8\" );\n37, test( \"..58624.85623..4.7..23.x\", \"1,1,0,0,0\" );\n38, test( \"716.463.9.x.8..4.15.738x4\", \"7,3,5,8,1\" );\n39, test( \"22xx.191.96469472.7232377.\", \"10,11,18,12,9\" );\n40, test( \"24..4...343......4.41.6...2\", \"2,0,0,0,0\" );\n41, test( \"32732.474x153.866..4x29.2573\", \"7,5,7,8,5\" );\n42, test( \"786.1267x9937.17.15448.1x33.4\", \"4,4,8,4,10\" );\n43, test( \"671714849.149.686852.178.895x3\", \"13,16,13,10,12\" );\n44, test( \"86x.47.517..29621.61x937..xx935\", \"7,11,8,8,10\" );\n45, test( \".2233.78x.94.x59511.5.86x3.x714.\", \"4,6,10,8,8\" );\n46, test( \".793...218.687x415x13.1...x58576x\", \"8,11,8,6,9\" );\n47, test( \"6.6x37.3x51x932.72x4x33.9363.x7761\", \"15,13,15,12,15\" );\n48, test( \"6..4.x187..681.2x.2.713276.669x.252\", \"6,7,8,6,5\" );\n49, test( \".6.xx64..5146x897231.x.21265392x9775\", \"19,17,19,20,17\" );\n50, test( \"334.85413.263314.x.6293921x3.6357647x\", \"14,14,12,16,10\" );\n51, test( \"4.1..9..513.266..5999769852.2.38x79.x7\", \"12,10,13,6,10\" );\n\n\u5909\u6570\u306e\u767b\u5834\u9806\u5e8f\u304c\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u6307\u5411\u3068\u9006\u306b\u306a\u3063\u3066\u3057\u307e\u3046\u306e\u3067\u3001\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u6307\u5411\u98a8\u306a\u69cb\u9020\u306b\u3057\u3066\u307f\u307e\u3057\u305f\u3002\ncapabilities = (2,7,3,5,2)\n\ndef solve(data):\n    cashiers = [[capability, 0, 9*len(data)] for capability in capabilities]\n    capability, customer, processable = 0, 1, 2   # indexies in cashier\n    for d in data:\n        cashier = min(cashiers, key=lambda cashier: cashier[customer])\n        if d in '123456789':\n            cashier[customer] += int(d)\n        elif d == 'x':\n            cashier[processable] = min(cashier[customer], cashier[processable])\n            cashier[customer] += 1\n        elif d == '.':\n            for cashier in cashiers:\n                cashier[customer] -= min(cashier)\n                cashier[processable] -= min(cashier[processable], cashier[capability])\n    return ','.join(str(cashier[customer]) for cashier in cashiers)\n\n\u305b\u3063\u304b\u304f\u306a\u306e\u3067\u3001\u30af\u30e9\u30b9\u3092\u4f7f\u3046\u5b9f\u88c5\u3082\u4f5c\u3063\u3066\u307f\u307e\u3057\u305f\u3002\nclass Cashier:\n    def __init__(self, capability):\n        self.capability = capability\n\n    def reset(self, processable):\n        self.customer = 0\n        self.processable = processable\n\n    def join_customer(self, customer):\n        self.customer += customer\n\n    def join_troubler(self):\n        self.processable = min(self.customer, self.processable)\n        self.customer += 1\n\n    def process(self):\n        self.customer -= min(self.customer, self.processable, self.capability)\n        self.processable -= min(self.processable, self.capability)\n\n\ncashiers = [ Cashier(capability) for capability in (2,7,3,5,2) ]\n\ndef solve(data):\n    for cashier in cashiers:\n        cashier.reset(9 * len(data))\n    for d in data:\n        cashier = min(cashiers, key=lambda cashier: cashier.customer)\n        if d in '123456789':\n            cashier.join_customer(int(d))\n        elif d == 'x':\n            cashier.join_troubler()\n        elif d == '.':\n            for cashier in cashiers:\n                cashier.process()\n    return ','.join(str(cashier.customer) for cashier in cashiers)\n\n\u554f\u984c\u306f\u3053\u3061\u3089\nhttp://nabetani.sakura.ne.jp/hena/ord18notfork/\n\u5b9f\u884c\u7d50\u679c\u306f\u3053\u3061\u3089\nhttp://ideone.com/0UElur\n\u4ed6\u306e\u65b9\u3005\u306e\u89e3\u7b54\u4f8b\u306f\u3053\u3061\u3089\nhttp://qiita.com/Nabetani/items/ad47666c2f2f44ada1e7\n\n```py\n#!/usr/bin/env python\n\ncashiers = (2,7,3,5,2)    # capabilities\n\ndef solve(data):\n    customer = [0] * len(cashiers)\n    processable = [9*len(data)] * len(cashiers)\n    for d in data:\n        cashier = customer.index(min(customer))\n        if d in '123456789':\n            customer[cashier] += int(d)\n        elif d == 'x':\n            processable[cashier] = min(customer[cashier], processable[cashier])\n            customer[cashier] += 1\n        elif d == '.':\n            for cashier,capability in enumerate(cashiers):\n                customer[cashier] -= min(customer[cashier], processable[cashier], capability)\n                processable[cashier] -= min(processable[cashier], capability)\n    return ','.join(map(str, customer))\n\ndef test(data, correct):\n    answer = solve(data)\n    print 'xo'[answer==correct], data, correct, answer\n\n0, test( \"42873x.3.\", \"0,4,2,0,0\" );\n1, test( \"1\", \"1,0,0,0,0\" );\n2, test( \".\", \"0,0,0,0,0\" );\n3, test( \"x\", \"1,0,0,0,0\" );\n4, test( \"31.\", \"1,0,0,0,0\" );\n5, test( \"3x.\", \"1,1,0,0,0\" );\n6, test( \"99569x\", \"9,9,6,6,9\" );\n7, test( \"99569x33\", \"9,9,9,9,9\" );\n8, test( \"99569x33.\", \"7,2,6,4,7\" );\n9, test( \"99569x33..\", \"5,0,4,0,5\" );\n10, test( \"12345x3333.\", \"4,0,3,2,3\" );\n11, test( \"54321x3333.\", \"3,0,3,0,4\" );\n12, test( \"51423x3333.\", \"3,4,4,0,4\" );\n13, test( \"12x34x.\", \"1,0,1,0,2\" );\n14, test( \"987x654x.32\", \"7,6,4,10,5\" );\n15, test( \"99999999999x99999999.......9.\", \"20,10,12,5,20\" );\n16, test( \"997\", \"9,9,7,0,0\" );\n17, test( \".3.9\", \"1,9,0,0,0\" );\n18, test( \"832.6\", \"6,6,0,0,0\" );\n19, test( \".5.568\", \"3,5,6,8,0\" );\n20, test( \"475..48\", \"4,8,0,0,0\" );\n21, test( \"7.2..469\", \"1,4,6,9,0\" );\n22, test( \"574x315.3\", \"3,3,1,7,1\" );\n23, test( \"5.2893.x98\", \"10,9,5,4,1\" );\n24, test( \"279.6xxx..4\", \"2,1,4,1,1\" );\n25, test( \"1.1.39..93.x\", \"7,1,0,0,0\" );\n26, test( \"7677749325927\", \"16,12,17,18,12\" );\n27, test( \"x6235.87.56.9.\", \"7,2,0,0,0\" );\n28, test( \"4.1168.6.197.6.\", \"0,0,3,0,0\" );\n29, test( \"2.8.547.25..19.6\", \"6,2,0,0,0\" );\n30, test( \".5.3x82x32.1829..\", \"5,0,5,0,7\" );\n31, test( \"x.1816..36.24.429.\", \"1,0,0,0,7\" );\n32, test( \"79.2.6.81x..26x31.1\", \"1,0,2,1,1\" );\n33, test( \"574296x6538984..5974\", \"14,13,10,15,14\" );\n34, test( \"99.6244.4376636..72.6\", \"5,6,0,0,3\" );\n35, test( \"1659.486x5637168278123\", \"17,16,16,18,17\" );\n36, test( \".5.17797.x626x5x9457.3.\", \"14,0,3,5,8\" );\n37, test( \"..58624.85623..4.7..23.x\", \"1,1,0,0,0\" );\n38, test( \"716.463.9.x.8..4.15.738x4\", \"7,3,5,8,1\" );\n39, test( \"22xx.191.96469472.7232377.\", \"10,11,18,12,9\" );\n40, test( \"24..4...343......4.41.6...2\", \"2,0,0,0,0\" );\n41, test( \"32732.474x153.866..4x29.2573\", \"7,5,7,8,5\" );\n42, test( \"786.1267x9937.17.15448.1x33.4\", \"4,4,8,4,10\" );\n43, test( \"671714849.149.686852.178.895x3\", \"13,16,13,10,12\" );\n44, test( \"86x.47.517..29621.61x937..xx935\", \"7,11,8,8,10\" );\n45, test( \".2233.78x.94.x59511.5.86x3.x714.\", \"4,6,10,8,8\" );\n46, test( \".793...218.687x415x13.1...x58576x\", \"8,11,8,6,9\" );\n47, test( \"6.6x37.3x51x932.72x4x33.9363.x7761\", \"15,13,15,12,15\" );\n48, test( \"6..4.x187..681.2x.2.713276.669x.252\", \"6,7,8,6,5\" );\n49, test( \".6.xx64..5146x897231.x.21265392x9775\", \"19,17,19,20,17\" );\n50, test( \"334.85413.263314.x.6293921x3.6357647x\", \"14,14,12,16,10\" );\n51, test( \"4.1..9..513.266..5999769852.2.38x79.x7\", \"12,10,13,6,10\" );\n```\n\n\u5909\u6570\u306e\u767b\u5834\u9806\u5e8f\u304c\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u6307\u5411\u3068\u9006\u306b\u306a\u3063\u3066\u3057\u307e\u3046\u306e\u3067\u3001\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u6307\u5411\u98a8\u306a\u69cb\u9020\u306b\u3057\u3066\u307f\u307e\u3057\u305f\u3002\n\n```py\ncapabilities = (2,7,3,5,2)\n\ndef solve(data):\n    cashiers = [[capability, 0, 9*len(data)] for capability in capabilities]\n    capability, customer, processable = 0, 1, 2   # indexies in cashier\n    for d in data:\n        cashier = min(cashiers, key=lambda cashier: cashier[customer])\n        if d in '123456789':\n            cashier[customer] += int(d)\n        elif d == 'x':\n            cashier[processable] = min(cashier[customer], cashier[processable])\n            cashier[customer] += 1\n        elif d == '.':\n            for cashier in cashiers:\n                cashier[customer] -= min(cashier)\n                cashier[processable] -= min(cashier[processable], cashier[capability])\n    return ','.join(str(cashier[customer]) for cashier in cashiers)\n```\n\n\u305b\u3063\u304b\u304f\u306a\u306e\u3067\u3001\u30af\u30e9\u30b9\u3092\u4f7f\u3046\u5b9f\u88c5\u3082\u4f5c\u3063\u3066\u307f\u307e\u3057\u305f\u3002\n\n```py\nclass Cashier:\n    def __init__(self, capability):\n        self.capability = capability\n\n    def reset(self, processable):\n        self.customer = 0\n        self.processable = processable\n\n    def join_customer(self, customer):\n        self.customer += customer\n\n    def join_troubler(self):\n        self.processable = min(self.customer, self.processable)\n        self.customer += 1\n\n    def process(self):\n        self.customer -= min(self.customer, self.processable, self.capability)\n        self.processable -= min(self.processable, self.capability)\n\n\ncashiers = [ Cashier(capability) for capability in (2,7,3,5,2) ]\n\ndef solve(data):\n    for cashier in cashiers:\n        cashier.reset(9 * len(data))\n    for d in data:\n        cashier = min(cashiers, key=lambda cashier: cashier.customer)\n        if d in '123456789':\n            cashier.join_customer(int(d))\n        elif d == 'x':\n            cashier.join_troubler()\n        elif d == '.':\n            for cashier in cashiers:\n                cashier.process()\n    return ','.join(str(cashier.customer) for cashier in cashiers)\n```\n", "tags": ["Python", "\u3069\u3046\u66f8\u304f", "yhpg"]}