{"context": " More than 1 year has passed since last update.\u4eca\u56de\u306f\u300c\u306f\u3058\u3081\u3066\u306e Go \u8a00\u8a9e (on Windows) \u305d\u306e10\u300d\u306e\u4f59\u9332\u3002\n\u300c\u306f\u3058\u3081\u3066\u306e Go \u8a00\u8a9e (on Windows) \u305d\u306e10\u300d\u3067 tcnksm/gcli \u3092\u7d39\u4ecb\u3057\u305f\u3051\u3069\uff0c\u3053\u306e  tcnksm/gcli \u3092\u4f7f\u3063\u3066 cli \u30d1\u30c3\u30b1\u30fc\u30b8\u306e\u611f\u60f3\uff08\u8a55\u4fa1\u307e\u3067\u306f\u884c\u304b\u306a\u3044\uff09\u3092\u66f8\u3044\u3066\u307f\u3088\u3046\u3068\u601d\u3046\u3002\u306a\u306e\u3067 tcnksm/gcli \u304c\u30b5\u30dd\u30fc\u30c8\u3057\u3066\u3044\u306a\u3044 cli \u30d1\u30c3\u30b1\u30fc\u30b8\u306f\u4eca\u56de\u306f\u5bfe\u8c61\u5916\u3002\ntcnksm/gcli \u304c\u30b5\u30dd\u30fc\u30c8\u3059\u308b cli \u30d1\u30c3\u30b1\u30fc\u30b8\u306f\u4ee5\u4e0b\u306e\u3068\u304a\u308a\u3002\n\nflag\ncodegangsta/cli\nmitchellh/cli\n\nLike Go command pattern\n\nflag \u306f\u6a19\u6e96\u30d1\u30c3\u30b1\u30fc\u30b8\u3067\u3042\u308b\u3002\u300cLike Go command pattern\u300d\u306f\u30d1\u30c3\u30b1\u30fc\u30b8\u3067\u306f\u306a\u3044\u306e\u3060\u304c\uff0c Go \u30b3\u30f3\u30d1\u30a4\u30e9\u5b9f\u88c5\u30d1\u30bf\u30fc\u30f3\u306b\u4f3c\u305f\u30b3\u30fc\u30c9\u3092\u51fa\u529b\u3057\u3066\u304f\u308c\u308b\u3002\n\u4e00\u8a00\u611f\u60f3\u3068\u3057\u3066\u306f\u3053\u3093\u306a\u611f\u3058\u3002\n\nflag \u30b5\u30d6\u30b3\u30de\u30f3\u30c9\u304c\u306a\u3044\u5834\u5408\u306b\u306f\u304a\u52e7\u3081\ncodegangsta/cli\n\u554f\u984c\u5916\nmitchellh/cli \u30b5\u30d6\u30b3\u30de\u30f3\u30c9\u5f62\u5f0f\u306a\u3089\u304a\u52e7\u3081\u3060\u304c\uff0c\u30d5\u30e9\u30b0\u3092\u6271\u3048\u306a\u3044\nLike Go command\n\u81ea\u52d5\u751f\u6210\u3055\u308c\u308b\u30b3\u30fc\u30c9\u304b\u3089\u304b\u306a\u308a\u30ab\u30b9\u30bf\u30de\u30a4\u30ba\u3059\u308b\u5834\u5408\u306b\u306f\u304a\u52e7\u3081\n\n\u3042\u304f\u307e\u3067\u500b\u4eba\u306e\u611f\u60f3\u306a\u306e\u3067\uff0c\u6012\u3089\u306a\u3044\u3067\u306d\u3002\u3067\u306f\uff0c\u3082\u3046\u5c11\u3057\u8a73\u3057\u304f\u898b\u3066\u3044\u304f\u3002\n\n\u30b3\u30de\u30f3\u30c9\u30e9\u30a4\u30f3\u30fb\u30c4\u30fc\u30eb\u306e\u8981\u4ef6\n\u300c\u306f\u3058\u3081\u3066\u306e Go \u8a00\u8a9e (on Windows) \u305d\u306e10\u300d\u3067\u3082\u66f8\u3044\u305f\u304c\uff0c\u4e00\u822c\u7684\u306a\u30b3\u30de\u30f3\u30c9\u30e9\u30a4\u30f3\u30fb\u30c4\u30fc\u30eb\u306e\u8981\u4ef6\u306f\u4ee5\u4e0b\u306e\u3068\u304a\u308a\u3002\n\nshell\uff08bash \u3084\u30b3\u30de\u30f3\u30c9\u30d7\u30ed\u30f3\u30d7\u30c8\u306a\u3069\uff09\u304b\u3089\u306e\u8d77\u52d5\u3092\u524d\u63d0\u3068\u3059\u308b\n\u30b3\u30de\u30f3\u30c9\u30e9\u30a4\u30f3\u306e\u5f15\u6570\u307e\u305f\u306f\u6a19\u6e96\u5165\u529b\u304b\u3089\u30c7\u30fc\u30bf\u3084\u6761\u4ef6\u3092\u5165\u529b\u3059\u308b\n\u7d50\u679c\u3092\u6a19\u6e96\u51fa\u529b\u306b\u51fa\u529b\u3059\u308b\n\u7d50\u679c\u4ee5\u5916\u306e\u60c5\u5831\u306f\u6a19\u6e96\u30a8\u30e9\u30fc\u51fa\u529b\u306b\u51fa\u529b\u3059\u308b\nshell \u3078\u5b9f\u884c\u7d50\u679c\u306e\u72b6\u614b\u3092\u8fd4\u3059\n\n\u5b9f\u306f\u3053\u308c\u306b\u3082\u3046\u3072\u3068\u3064\u91cd\u8981\u306a\u8981\u4ef6\u3068\u3044\u3046\u304b\u601d\u60f3\u306e\u3088\u3046\u306a\u3082\u306e\u304c\u3042\u3063\u3066\uff0c\u305d\u308c\u306f\u300c\u30b3\u30de\u30f3\u30c9\u30e9\u30a4\u30f3\u30fb\u30c4\u30fc\u30eb\u306e\u6a5f\u80fd\u306f\u3067\u304d\u308b\u3060\u3051\u5358\u6a5f\u80fd\u306b\u3059\u308b\u300d\u3068\u3044\u3046\u3082\u306e\u3060\u3002\u30b3\u30de\u30f3\u30c9\u30e9\u30a4\u30f3\u30fb\u30c4\u30fc\u30eb\u3092\u5358\u72ec\u3067\u4f7f\u3046\u3053\u3068\u306f\u5c11\u306a\u304f\uff0c\u5b9f\u969b\u306b\u306f shell script\uff08Windows \u306a\u3089\u30d0\u30c3\u30c1\u30b9\u30af\u30ea\u30d7\u30c8\u7b49\uff09\u3092\u4f7f\u3063\u3066\u8907\u6570\u306e\u30c4\u30fc\u30eb\u3092\u7d44\u307f\u5408\u308f\u305b\u3066\u4f7f\u3046\u3053\u3068\u304c\u591a\u3044\u3002\n\nDmain-Driven \u3067\u884c\u3053\u3046\nDDD\uff08Dmain-Driven Design\uff09\u3068\u3044\u3046\u3082\u306e\u304c\u3042\u308b\u3002\u3053\u308c\u306f Domain Model \u3092\u30d9\u30fc\u30b9\u306b\u3057\u305f\u8a2d\u8a08\u30d1\u30bf\u30fc\u30f3\u306e\u3053\u3068\u3067 DRY\uff08Don't Repeat Yourself\uff09\u306a\u69cb\u9020\u306b\u3059\u308b\u306e\u306b\u9069\u3057\u3066\u3044\u308b\u3068\u8a00\u308f\u308c\u3066\u3044\u308b\u3002 DDD \u306f10\u5e74\u304f\u3089\u3044\u524d\u304b\u3089\u53f0\u982d\u3057\u3066\u304d\u305f\u304c\uff0c\u601d\u60f3\u81ea\u4f53\u306f\u65b0\u3057\u3044\u3082\u306e\u3067\u306f\u306a\u304f\uff0c\u3044\u308f\u3086\u308b\u300c\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u6307\u5411\u300d\u8a2d\u8a08\u306e\u30d1\u30bf\u30fc\u30f3\u3068\u3057\u3066\u9577\u3044\u6642\u9593\uff08\u3068\u3044\u3063\u3066\u3082\u534a\u4e16\u7d00\u306f\u7d4c\u3063\u3066\u3044\u306a\u3044\u306f\u305a\u3060\u3051\u3069\uff09\u3092\u304b\u3051\u3066\u91b8\u6210\u3055\u308c\u305f\u77e5\u898b\u306e\u96c6\u7a4d\u3068\u8a00\u3048\u308b\uff08\u305f\u3060\u3057 DDD \u81ea\u4f53\u306f\u5fc5\u305a\u3057\u3082\u300c\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u6307\u5411\u300d\u3092\u8981\u4ef6\u3068\u3057\u306a\u3044\uff09\u3002\n\u30a2\u30fc\u30ad\u30c6\u30af\u30c1\u30e3\u306e\u6982\u5ff5\u3068\u3057\u3066\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u306a\u611f\u3058\u3060\u308d\u3046\u3002\uff08\u3053\u308c\uff0c\u7d50\u69cb\u3072\u3068\u306b\u3088\u3063\u3066\u9055\u3046\u3093\u3060\u3088\u306a\u3041\uff09\n\n\u3053\u306e\u4e2d\u306e Domain Layer \u306b\u30d3\u30b8\u30cd\u30b9\u30ed\u30b8\u30c3\u30af\u304c\u5165\u308b\u3002\u4e0a\u4e0b\u306e\u968e\u5c64\u69cb\u9020\u3067\u306f\u306a\u304f\u5de6\u53f3\u306e\u69cb\u9020\u306b\u306a\u3063\u3066\u3044\u308b\u306e\u306f\uff0c\u30c7\u30fc\u30bf\u306e\u6d41\u308c\u3092\u610f\u8b58\u3057\u3066\u307b\u3057\u3044\u304b\u3089\u3002 Iuput (trigger) \u306f\u5de6\u304b\u3089\u53f3\u306b\u6d41\u308c\uff0c ouutput (response) \u306f\u53f3\u304b\u3089\u5de6\u306b\u6d41\u308c\u308b\u3002\n\u666e\u901a DDD \u306f\u5927\u898f\u6a21\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\uff08\u307e\u305f\u306f\u30b5\u30fc\u30d3\u30b9\uff09\u306e\u8a2d\u8a08\u3067\u9069\u7528\u3059\u308b\u3082\u306e\u3060\u304c\uff0c\u30b3\u30de\u30f3\u30c9\u30e9\u30a4\u30f3\u30fb\u30c4\u30fc\u30eb\u3067\u3082 DDD \u3092\u610f\u8b58\u3059\u308b\u3053\u3068\u306f\u60aa\u304f\u306a\u3044\u3057\u8a13\u7df4\u306b\u3082\u306a\u308b\u3002\u305f\u3068\u3048\u3070\uff0c\u30b3\u30de\u30f3\u30c9\u30e9\u30a4\u30f3\u30fb\u30c4\u30fc\u30eb\u3092\u547c\u3073\u51fa\u3059 shell \u3084 shell script \u304c Presentation Layer \u3067 cli \u30d1\u30c3\u30b1\u30fc\u30b8\u304c Application Layer \u3068\u3044\u3063\u305f\u611f\u3058\u3067\u8003\u3048\u308b\u3002 cli \u30d1\u30c3\u30b1\u30fc\u30b8\u304c\u547c\u3073\u51fa\u3059\u30ed\u30b8\u30c3\u30af\u304c Domain Layer \u3060\u3068\u8003\u3048\u308b\u3068\u5206\u304b\u308a\u3084\u3059\u3044\u304b\u3082\u77e5\u308c\u306a\u3044\u3002\u307e\u305f\uff0c\u524d\u56de\u4f5c\u3063\u305f\u30c4\u30fc\u30eb\u3067\u306f Git.io \u304c Data Layer \u306b\u306a\u308b\u308f\u3051\u3060\u3002\n\n\u30b5\u30d6\u30b3\u30de\u30f3\u30c9\u3092\u6301\u305f\u306a\u3044\u69cb\u6210\u306e\u5834\u5408\n\u8a71\u304c\u9038\u308c\u3066\u3057\u307e\u3063\u305f\u3002 cli \u30d1\u30c3\u30b1\u30fc\u30b8\u306e\u8a71\u306b\u623b\u308d\u3046\u3002\n\u307e\u305a\u306f\u30b5\u30d6\u30b3\u30de\u30f3\u30c9\u3092\u6301\u305f\u306a\u3044\u69cb\u6210\u306e\u5834\u5408\u3002\u4f8b\u3048\u3070\u3053\u3093\u306a\u611f\u3058\u3002\n$ cmd -flag -parm parameter argument\n\n\u6761\u4ef6\u3092\u6307\u5b9a\u3059\u308b -flag \u3084 -parm \u30aa\u30d7\u30b7\u30e7\u30f3\u304c\u3042\u3063\u3066\uff0c\u305d\u306e\u5f8c\u308d\u306b\u5f15\u6570\u304c\u7d9a\u304f\u3002\u3053\u3046\u3044\u3063\u305f\u7528\u9014\u306a\u3089 flag \u30d1\u30c3\u30b1\u30fc\u30b8\u304c\u6700\u9069\u3067\u3042\u308b\u3002 tcnksm/gcli \u3067\u5b9f\u969b\u306b\u30b3\u30fc\u30c9\u3092\u751f\u6210\u3057\u3066\u307f\u308b\u3002\nC:>gcli new -F flag -flag=flag:Bool:\"Enable Flag\" -flag=parm:String:\"Option Parameter\" cmd\n  Created cmd\\main.go\n  Created cmd\\CHANGELOG.md\n  Created cmd\\README.md\n  Created cmd\\cli_test.go\n  Created cmd\\cli.go\n  Created cmd\\version.go\n====> Successfully generated cmd\n\n\ncmd/main.go\npackage main\n\nimport \"os\"\n\nfunc main() {\n    cli := &CLI{outStream: os.Stdout, errStream: os.Stderr}\n    os.Exit(cli.Run(os.Args))\n}\n\n\n\ncmd/cli.go\npackage main\n\nimport (\n    \"flag\"\n    \"fmt\"\n    \"io\"\n)\n\n// Exit codes are int values that represent an exit code for a particular error.\nconst (\n    ExitCodeOK    int = 0\n    ExitCodeError int = 1 + iota\n)\n\n// CLI is the command line object\ntype CLI struct {\n    // outStream and errStream are the stdout and stderr\n    // to write message from the CLI.\n    outStream, errStream io.Writer\n}\n\n// Run invokes the CLI with the given arguments.\nfunc (cli *CLI) Run(args []string) int {\n    var (\n        flag bool\n        parm string\n    )\n\n    // Define option flag parse\n    flags := flag.NewFlagSet(Name, flag.ContinueOnError)\n    flags.SetOutput(cli.errStream)\n\n    flags.BoolVar(&flag, \"flag\", false, \"Enable Flag\")\n    flags.StringVar(&parm, \"parm\", \"\", \"Option Parameter\")\n\n    flVersion := flags.Bool(\"version\", false, \"Print version information and quit.\")\n\n    // Parse commandline flag\n    if err := flags.Parse(args[1:]); err != nil {\n        return ExitCodeError\n    }\n\n    // Show version\n    if *flVersion {\n        fmt.Fprintf(cli.errStream, \"%s version %s\\n\", Name, Version)\n        return ExitCodeOK\n    }\n\n    _ = flag\n\n    _ = parm\n\n    return ExitCodeOK\n}\n\n\n\u5b9f\u306f\u3053\u306e\u307e\u307e\u3067\u306f\u5909\u6570\u540d\u306e flag \u3068\u30d1\u30c3\u30b1\u30fc\u30b8\u540d\u306e flag \u304c\u88ab\u308b\u306e\u3067\uff0c\u3061\u3087\u3063\u3068\u4fee\u6b63\uff08\u30aa\u30d7\u30b7\u30e7\u30f3\u540d\u3092\u305d\u306e\u307e\u307e\u5909\u6570\u540d\u306b\u3059\u308b\u306e\u306f\u4f55\u304b\u3068\u62d9\u3044\u3068\u601d\u3046\uff09\u3002\u307e\u305f\uff0c\u30aa\u30d7\u30b7\u30e7\u30f3\u4ee5\u5916\u306e\u5f15\u6570\u3092\u89e3\u6790\u3059\u308b\u30ed\u30b8\u30c3\u30af\u306f\u306a\u3044\u304c\uff0c\u3053\u308c\u306f\u81ea\u524d\u3067\u5b9f\u88c5\u3059\u308b\u3002\n\ncmd/cli.go\npackage main\n\nimport (\n    \"flag\"\n    \"fmt\"\n    \"io\"\n)\n\n// Exit codes are int values that represent an exit code for a particular error.\nconst (\n    ExitCodeOK    int = 0\n    ExitCodeError int = 1 + iota\n)\n\n// CLI is the command line object\ntype CLI struct {\n    // outStream and errStream are the stdout and stderr\n    // to write message from the CLI.\n    outStream, errStream io.Writer\n}\n\n// Run invokes the CLI with the given arguments.\nfunc (cli *CLI) Run(args []string) int {\n    var (\n        flagFlag  bool\n        parmFlag  string\n        arguments []string\n    )\n\n    // Define option flag parse\n    flags := flag.NewFlagSet(Name, flag.ContinueOnError)\n    flags.SetOutput(cli.errStream)\n\n    flags.BoolVar(&flagFlag, \"flag\", false, \"Enable Flag\")\n    flags.StringVar(&parmFlag, \"parm\", \"\", \"Option Parameter\")\n\n    flVersion := flags.Bool(\"version\", false, \"Print version information and quit.\")\n\n    // Parse commandline flag\n    if err := flags.Parse(args[1:]); err != nil {\n        return ExitCodeError\n    }\n\n    // Show version\n    if *flVersion {\n        fmt.Fprintf(cli.errStream, \"%s version %s\\n\", Name, Version)\n        return ExitCodeOK\n    }\n\n    for 0 < flags.NArg() {\n        arguments = append(arguments, flags.Arg(0))\n        flags.Parse(flags.Args()[1:])\n    }\n\n    fmt.Fprintln(cli.errStream, \"flag =\", flagFlag)\n    fmt.Fprintln(cli.errStream, \"parm =\", parmFlag)\n    fmt.Fprintln(cli.errStream, \"arguments =\", arguments)\n\n    return ExitCodeOK\n}\n\n\n\u3053\u308c\u3092\u30b3\u30f3\u30d1\u30a4\u30eb\u3057\u3066\u52d5\u304b\u3057\u3066\u307f\u308b\u3002\nC:>go build ./cmd\n\nC:>cmd -version\ncmd version 0.1.0\n\nC:>cmd arg1 arg2\nflag = false\nparm =\narguments = [arg1 arg2]\n\nC:>cmd -flag -parm parm1 arg1 arg2\nflag = true\nparm = parm1\narguments = [arg1 arg2]\n\n\u751f\u6210\u3055\u308c\u305f CLI \u30af\u30e9\u30b9\u3067\u306f\uff0c\u6a19\u6e96\uff08\u30a8\u30e9\u30fc\uff09\u51fa\u529b\u3084\u5f15\u6570\u3092\u5165\u529b\u3068\u3057\u3066\u60c5\u5831\u3092\u6574\u7406\u3057\u305f\u4e0a\u3067\u6b21\u306e\u51e6\u7406\uff08\u304a\u305d\u3089\u304f Domain Layer\uff09\u306b\u51e6\u7406\u3092\u6e21\u3059\u3053\u3068\u304c\u3067\u304d\u308b\u3002\u304b\u306a\u308a\u7406\u60f3\u7684\u306a\u69cb\u6210\u3067\u3042\u308b\u3002\u305f\u3060\u3057\uff0c\u4f55\u6545\u304b\u6a19\u6e96\u5165\u529b\u306f\u542b\u307e\u308c\u3066\u3044\u306a\u3044\u305f\u3081\uff0c\u6a19\u6e96\u5165\u529b\u3082\u5fc5\u8981\u306a\u5834\u5408\u306f CLI \u30af\u30e9\u30b9\u3084 CLI \u30af\u30e9\u30b9\u3092\u547c\u3073\u51fa\u3059 main \u95a2\u6570\u3092\u66f8\u304d\u63db\u3048\u308b\u5fc5\u8981\u304c\u3042\u308b\u3002\n\n\u30b5\u30d6\u30b3\u30de\u30f3\u30c9\u3092\u6301\u3064\u69cb\u6210\u306e\u5834\u5408\n\u30b5\u30d6\u30b3\u30de\u30f3\u30c9\u3092\u6301\u3064\u69cb\u6210\u3068\u3044\u3046\u306e\u306f\uff0c\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u5f15\u6570\u306e\u69cb\u6210\u306b\u306a\u3063\u3066\u3044\u308b\u30c4\u30fc\u30eb\u3067\u3042\u308b\u3002\ncommand [global options] subcommand [subcommand options] [arguments...]\n\nflag \u30d1\u30c3\u30b1\u30fc\u30b8\u306f\u30b5\u30d6\u30b3\u30de\u30f3\u30c9\u3092\u69cb\u6210\u3059\u308b\u306b\u306f\u4e0d\u5411\u304d\uff08\u3067\u304d\u306a\u3044\u3053\u3068\u306f\u306a\u3044\u304c\u9762\u5012\uff09\u306a\u306e\u3067\uff0c\u4ed6\u306e\u30d1\u30c3\u30b1\u30fc\u30b8\u3092\u4f7f\u3046\u3053\u3068\u306b\u306a\u308b\u3002\n\ncodegangsta/cli \u3092\u4f7f\u7528\u3059\u308b\u5834\u5408\n\u6b21\u306e\u3088\u3046\u306a\u30c4\u30fc\u30eb\u3092\u8003\u3048\u308b\u3002\n$ cmd2 sub -flag -parm parameter argument\n\nsub \u304c\u30b5\u30d6\u30b3\u30de\u30f3\u30c9\u3002\u3053\u308c\u3092 codegangsta/cli \u7528\u306b\u751f\u6210\u3057\u3066\u307f\u308b\u3002\nC:>gcli new -F codegangsta_cli -c sub:\"Sub-command\" -flag=flag:Bool:\"Enable Flag\" -flag=parm:String:\"Option Parameter\" cmd2\n  Created cmd2\\CHANGELOG.md\n  Created cmd2\\main.go\n  Created cmd2\\version.go\n  Created cmd2\\command\\sub.go\n  Created cmd2\\command\\sub_test.go\n  Created cmd2\\README.md\n  Created cmd2\\commands.go\n====> Successfully generated cmd2\n\n\ncmd2/main.go\npackage main\n\nimport (\n    \"os\"\n\n    \"github.com/codegangsta/cli\"\n)\n\nfunc main() {\n\n    app := cli.NewApp()\n    app.Name = Name\n    app.Version = Version\n    app.Author = \"Spiegel\"\n    app.Email = \"\"\n    app.Usage = \"\"\n\n    app.Flags = GlobalFlags\n    app.Commands = Commands\n    app.CommandNotFound = CommandNotFound\n\n    app.Run(os.Args)\n}\n\n\n\u898b\u305f\u3089\u308f\u304b\u308b\u3068\u601d\u3046\u304c\uff0c app.Run() \u95a2\u6570\u306e\u8fd4\u308a\u5024\u3092\u5168\u304f\u898b\u3066\u3044\u306a\u3044\u3002\u5b9f\u306f error \u578b\u306e\u5024\u3092\u8fd4\u3059\u306e\u3060\u304c\uff0c\u3053\u306e\u30a8\u30e9\u30fc\u60c5\u5831\u306f\u30e1\u30a4\u30f3\u306e\u51e6\u7406\u7d50\u679c\u306b\u5bfe\u3059\u308b\u3082\u306e\u3067\u306f\u306a\u3044\u3002\u306a\u3089\u3070\u3069\u3046\u3059\u308b\u304b\u3068\u3044\u3046\u3068\uff0c\u30b5\u30d6\u30b3\u30de\u30f3\u30c9\u5185\u306e\u51e6\u7406\u306e\u4e2d\u3067 os.Exit() \u3059\u308b\u3068\u3044\u3046\uff0c\u304b\u306a\u308a\u3048\u3052\u3064\u306a\u3044\u4ed5\u69d8\u306b\u306a\u3063\u3066\u3044\u308b\u3002\u500b\u4eba\u7684\u306b\u306f\u3053\u306e\u4e00\u70b9\u3067 codegangsta/cli \u306f \u554f\u984c\u5916 \u306a\u306e\u3060\u304c\uff0c\u3082\u3046\u5c11\u3057\u3060\u3051\u89e3\u8aac\u3059\u308b\u3002\n\ncmd2/commands.go\npackage main\n\nimport (\n    \"fmt\"\n    \"os\"\n\n    \"github.com/spiegel-im-spiegel/cmd2/command\"\n    \"github.com/codegangsta/cli\"\n)\n\nvar GlobalFlags = []cli.Flag{\n    cli.BoolFlag{\n        EnvVar: \"ENV_FLAG\",\n        Name:   \"flag\",\n\n        Usage: \"Enable Flag\",\n    },\n    cli.StringFlag{\n        EnvVar: \"ENV_PARM\",\n        Name:   \"parm\",\n        Value:  \"\",\n        Usage:  \"Option Parameter\",\n    },\n}\n\nvar Commands = []cli.Command{\n    {\n        Name:   \"sub\",\n        Usage:  \"Sub-command\",\n        Action: command.CmdSub,\n        Flags:  []cli.Flag{},\n    },\n}\n\nfunc CommandNotFound(c *cli.Context, command string) {\n    fmt.Fprintf(os.Stderr, \"%s: '%s' is not a %s command. See '%s --help'.\", c.App.Name, command, c.App.Name, c.App.Name)\n    os.Exit(2)\n}\n\n\n\u6b8b\u5ff5\u306a\u304c\u3089 tcnksm/gcli \u306f\u30b5\u30d6\u30b3\u30de\u30f3\u30c9\u30fb\u30aa\u30d7\u30b7\u30e7\u30f3\u3092\u30b5\u30dd\u30fc\u30c8\u3057\u3066\u3044\u306a\u3044\u3002\u306a\u306e\u3067\uff0c -flag \u3067\u6307\u5b9a\u3057\u305f\u30aa\u30d7\u30b7\u30e7\u30f3\u306f\u5168\u3066\u30b0\u30ed\u30fc\u30d0\u30eb\u30fb\u30aa\u30d7\u30b7\u30e7\u30f3\u3068\u3057\u3066\u5b9a\u7fa9\u3055\u308c\u308b\u3002\u3084\u308a\u65b9\u3068\u3057\u3066\u306f\u5fc5\u8981\u306a\u30aa\u30d7\u30b7\u30e7\u30f3\u3092 tcnksm/gcli \u306b\u66f8\u304d\u51fa\u3057\uff0c commands.go \u306e\u4e2d\u3067\u30b0\u30ed\u30fc\u30d0\u30eb\u30fb\u30aa\u30d7\u30b7\u30e7\u30f3\u3068\u3057\u3066\u8a18\u8ff0\u3055\u308c\u3066\u3044\u308b\u3082\u306e\u3092\u30b5\u30d6\u30b3\u30de\u30f3\u30c9\u30fb\u30aa\u30d7\u30b7\u30e7\u30f3\u3068\u3057\u3066\u624b\u52d5\u3067\u632f\u308a\u5206\u3051\u76f4\u3059\u306e\u304c\u3044\u3044\u3060\u308d\u3046\u3002\u4eca\u56de\u306a\u3089\u3053\u3093\u306a\u611f\u3058\u306b\u306a\u308b\u3002\n\ncmd2/commands.go\npackage main\n\nimport (\n    \"fmt\"\n    \"os\"\n\n    \"github.com/spiegel-im-spiegel/cmd2/command\"\n    \"github.com/codegangsta/cli\"\n)\n\nvar GlobalFlags = []cli.Flag{}\n\nvar Commands = []cli.Command{\n    {\n        Name:   \"sub\",\n        Usage:  \"Sub-command\",\n        Action: command.CmdSub,\n        Flags:  []cli.Flag{\n            cli.BoolFlag{\n                //EnvVar: \"ENV_FLAG\",\n                Name:   \"flag\",\n\n                Usage: \"Enable Flag\",\n            },\n            cli.StringFlag{\n                //EnvVar: \"ENV_PARM\",\n                Name:   \"parm\",\n                Value:  \"\",\n                Usage:  \"Option Parameter\",\n            },\n        },\n    },\n}\n\nfunc CommandNotFound(c *cli.Context, command string) {\n    fmt.Fprintf(os.Stderr, \"%s: '%s' is not a %s command. See '%s --help'.\", c.App.Name, command, c.App.Name, c.App.Name)\n    os.Exit(2)\n}\n\n\n\u3068\u3053\u308d\u3067 cli.Commans \u304a\u3088\u3073 cli.Context \u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u308b\u3002\n\ncli/command.go\ntype Command struct {\n    // The name of the command\n    Name string\n    // short name of the command. Typically one character (deprecated, use `Aliases`)\n    ShortName string\n    // A list of aliases for the command\n    Aliases []string\n    // A short description of the usage of this command\n    Usage string\n    // A longer explanation of how the command works\n    Description string\n    // The function to call when checking for bash command completions\n    BashComplete func(context *Context)\n    // An action to execute before any sub-subcommands are run, but after the context is ready\n    // If a non-nil error is returned, no sub-subcommands are run\n    Before func(context *Context) error\n    // An action to execute after any subcommands are run, but after the subcommand has finished\n    // It is run even if Action() panics\n    After func(context *Context) error\n    // The function to call when this command is invoked\n    Action func(context *Context)\n    // List of child commands\n    Subcommands []Command\n    // List of flags to parse\n    Flags []Flag\n    // Treat all flags as normal arguments if true\n    SkipFlagParsing bool\n    // Boolean to hide built-in help command\n    HideHelp bool\n\n    commandNamePath []string\n}\n\n\n\ncli/context.go\ntype Context struct {\n    App            *App\n    Command        Command\n    flagSet        *flag.FlagSet\n    setFlags       map[string]bool\n    globalSetFlags map[string]bool\n    parentContext  *Context\n}\n\n\n\u3064\u307e\u308a\u3053\u308c\u304c context \u306e\u5168\u3066\u3067\uff0c\u305d\u306e\u4e2d\u306b\u306f\u6a19\u6e96\u5165\u51fa\u529b\u3084\u30aa\u30d7\u30b7\u30e7\u30f3\u4ee5\u5916\u306e\u5f15\u6570\u60c5\u5831\u306f\u5165\u3063\u3066\u3044\u306a\u3044\u3002\u3058\u3083\u3042\uff0c\u3069\u3046\u3059\u308b\u304b\u3068\u3044\u3046\u3068 Action property \u306b\u30bb\u30c3\u30c8\u3059\u308b\u95a2\u6570\u5185\u3067\u6a19\u6e96\u5165\u51fa\u529b\u3084\u30aa\u30d7\u30b7\u30e7\u30f3\u4ee5\u5916\u306e\u5f15\u6570\u60c5\u5831\u3092\u53d6\u5f97\u3057\u3066\u51e6\u7406\u3059\u308b\u3057\u304b\u306a\u3044\u3002\u305d\u3057\u3066 Action property \u306b\u30bb\u30c3\u30c8\u3059\u308b\u95a2\u6570\u306f\u5024\u3092\u8fd4\u3055\u306a\u3044\uff08\u8fd4\u305b\u306a\u3044\uff09\u3002\u3057\u305f\u304c\u3063\u3066\u547c\u3073\u51fa\u3055\u308c\u308b\u95a2\u6570\u306e\u5185\u90e8\u3067 os.Exit() \u3059\u308b\u3057\u304b\u306a\u3044\u308f\u3051\u3060\u3002\u3084\u308c\u3084\u308c\u3002\n\nmitchellh/cli \u3092\u4f7f\u7528\u3059\u308b\u5834\u5408\n\u540c\u3058 UI \u3092\uff0c\u4eca\u5ea6\u306f mitchellh/cli \u3092\u4f7f\u3063\u3066\u5b9f\u88c5\u3057\u3066\u307f\u308b\u3002\nC:>gcli new -F mitchellh_cli -c sub:\"Sub-command\" -flag=flag:Bool:\"Enable Flag\" -flag=parm:String:\"Option Parameter\" cmd3\n  Created cmd3\\main.go\n  Created cmd3\\command\\meta.go\n  Created cmd3\\command\\version.go\n  Created cmd3\\cli.go\n  Created cmd3\\CHANGELOG.md\n  Created cmd3\\version.go\n  Created cmd3\\commands.go\n  Created cmd3\\command\\sub.go\n  Created cmd3\\README.md\n  Created cmd3\\command\\sub_test.go\n====> Successfully generated cmd3\n\n\ncmd3/cli.go\npackage main\n\nimport (\n    \"fmt\"\n    \"os\"\n\n    \"github.com/mitchellh/cli\"\n    \"github.com/spiegel-im-spiegel/cmd3/command\"\n)\n\nfunc Run(args []string) int {\n\n    // Meta-option for executables.\n    // It defines output color and its stdout/stderr stream.\n    meta := &command.Meta{\n        Ui: &cli.ColoredUi{\n            InfoColor:  cli.UiColorBlue,\n            ErrorColor: cli.UiColorRed,\n            Ui: &cli.BasicUi{\n                Writer:      os.Stdout,\n                ErrorWriter: os.Stderr,\n                Reader:      os.Stdin,\n            },\n        }}\n\n    return RunCustom(args, Commands(meta))\n}\n\nfunc RunCustom(args []string, commands map[string]cli.CommandFactory) int {\n\n    // Get the command line args. We shortcut \"--version\" and \"-v\" to\n    // just show the version.\n    for _, arg := range args {\n        if arg == \"-v\" || arg == \"-version\" || arg == \"--version\" {\n            newArgs := make([]string, len(args)+1)\n            newArgs[0] = \"version\"\n            copy(newArgs[1:], args)\n            args = newArgs\n            break\n        }\n    }\n\n    cli := &cli.CLI{\n        Args:       args,\n        Commands:   commands,\n        Version:    Version,\n        HelpFunc:   cli.BasicHelpFunc(Name),\n        HelpWriter: os.Stdout,\n    }\n\n    exitCode, err := cli.Run()\n    if err != nil {\n        fmt.Fprintf(os.Stderr, \"Failed to execute: %s\\n\", err.Error())\n    }\n\n    return exitCode\n}\n\n\n\ncmd3/commands.go\npackage main\n\nimport (\n    \"github.com/mitchellh/cli\"\n    \"github.com/spiegel-im-spiegel/cmd3/command\"\n)\n\nfunc Commands(meta *command.Meta) map[string]cli.CommandFactory {\n    return map[string]cli.CommandFactory{\n        \"sub\": func() (cli.Command, error) {\n            return &command.SubCommand{\n                Meta: *meta,\n            }, nil\n        },\n\n        \"version\": func() (cli.Command, error) {\n            return &command.VersionCommand{\n                Meta:     *meta,\n                Version:  Version,\n                Revision: GitCommit,\n                Name:     Name,\n            }, nil\n        },\n    }\n}\n\n\n\u5b9f\u306f\uff0c mitchellh/cli \u81ea\u8eab\u306f\u30d5\u30e9\u30b0\u3092\u30b5\u30dd\u30fc\u30c8\u3057\u3066\u3044\u306a\u3044\u3002\u305d\u3053\u3067 tcnksm/gcli \u304c mitchellh/cli \u3092\u30e9\u30c3\u30d7\u3059\u308b\u30b3\u30fc\u30c9\u3092\u751f\u6210\u3059\u308b\u3053\u3068\u3067 mitchellh/cli \u306e\u5f31\u70b9\u3092\u30ab\u30d0\u30fc\u3057\u3066\u3044\u308b\u3002\n\u6700\u7d42\u7684\u306b mitchellh/cli \u306b\u6e21\u3059\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u306f\u4ee5\u4e0b\u306e\u30a4\u30f3\u30bf\u30d5\u30a7\u30fc\u30b9\u3092\u6e80\u305f\u3057\u3066\u3044\u308c\u3070\u3088\u3044\u3002\n\ncli/command.go\npackage cli\n\n// A command is a runnable sub-command of a CLI.\ntype Command interface {\n    // Help should return long-form help text that includes the command-line\n    // usage, a brief few sentences explaining the function of the command,\n    // and the complete list of flags the command accepts.\n    Help() string\n\n    // Run should run the actual command with the given CLI instance and\n    // command-line arguments. It should return the exit status when it is\n    // finished.\n    Run(args []string) int\n\n    // Synopsis should return a one-line, short synopsis of the command.\n    // This should be less than 50 characters ideally.\n    Synopsis() string\n}\n\n// CommandFactory is a type of function that is a factory for commands.\n// We need a factory because we may need to setup some state on the\n// struct that implements the command itself.\ntype CommandFactory func() (Command, error)\n\n\n\n\u4f8b\u3048\u3070 sub \u30b5\u30d6\u30b3\u30de\u30f3\u30c9 command.SubCommand \u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u306a\u3063\u3066\u3044\u308b\u3002\n\ncmd3/command/sub.go\npackage command\n\nimport (\n    \"strings\"\n)\n\ntype SubCommand struct {\n    Meta\n}\n\nfunc (c *SubCommand) Run(args []string) int {\n    // Write your code here\n    return 0\n}\n\nfunc (c *SubCommand) Synopsis() string {\n    return \"Sub-command\"\n}\n\nfunc (c *SubCommand) Help() string {\n    helpText := `\n\n`\n    return strings.TrimSpace(helpText)\n}\n\n\n\u3053\u306e\u3046\u3061 Run() \u95a2\u6570\u304c\u51e6\u7406\u306e\u672c\u4f53\u3067\u3042\u308b\u3002 tcnksm/gcli \u3067\u306f\u7a7a\u3063\u307d\u306e\u95a2\u6570\u3057\u304b\u751f\u6210\u3057\u3066\u304f\u308c\u306a\u3044\u304c\uff0c\u5b9f\u969b\u306b\u306f\u3053\u306e\u4e2d\u3067\u5f15\u6570\u306e\u89e3\u6790\u3092\u884c\u3046\u3002\u5f15\u6570\u89e3\u6790\u306b\u306f flag \u304c\u4f7f\u3048\u308b\u3002\n\ncmd3/command/sub.go\nfunc (c *SubCommand) Run(args []string) int {\n    var (\n        flagFlag  bool\n        parmFlag  string\n        arguments []string\n    )\n\n    // Define option flag parse\n    flags := flag.NewFlagSet(Name, flag.ContinueOnError)\n    flags.Usage = func() {}\n\n    flags.BoolVar(&flagFlag, \"flag\", false, \"Enable Flag\")\n    flags.StringVar(&parmFlag, \"parm\", \"\", \"Option Parameter\")\n\n    // Parse commandline flag\n    if err := flags.Parse(args[1:]); err != nil {\n        return 1\n    }\n    for 0 < flags.NArg() {\n        arguments = append(arguments, flags.Arg(0))\n        flags.Parse(flags.Args()[1:])\n    }\n\n    c.Ui.Output(\"flag =\", flagFlag)\n    c.Ui.Output(\"parm =\", parmFlag)\n    c.Ui.Output(\"arguments =\", arguments)\n\n    return 0\n}\n\n\nDDD \u7684\u306b\u307f\u308c\u3070\uff0c\u751f\u6210\u3055\u308c\u305f command \u30b5\u30d6\u30d1\u30c3\u30b1\u30fc\u30b8\u306f Application Layer \u306e Facade \u3068\u898b\u306a\u305b\u308b\u3002\u30b5\u30d6\u30b3\u30de\u30f3\u30c9\u3092\u547c\u3073\u51fa\u3059\u5074\uff08Application Layer\uff09\u306f command \u30b5\u30d6\u30d1\u30c3\u30b1\u30fc\u30b8\u306e\u5404\u30b3\u30de\u30f3\u30c9\u3092\u5b9a\u578b\u7684\u306b\u547c\u3073\u51fa\u3059\u3060\u3051\u3067\u3088\u304f\uff0c\u30b5\u30d6\u30b3\u30de\u30f3\u30c9\u3092\u547c\u3073\u51fa\u3055\u308c\u308b\u5074\uff08Domain Layer\uff09\u306f command \u30b5\u30d6\u30d1\u30c3\u30b1\u30fc\u30b8\u3068\u306e\u9593\u3067\u8a71\u304c\u901a\u3058\u3066\u3044\u308c\u3070\u300c\u53cb\u9054\u306e\u53cb\u9054\u300d\u306e\u3053\u3068\u306f\u6c17\u306b\u3057\u306a\u304f\u3066\u3082\u3088\u3044\u3002\n\n\u6a19\u6e96\u5165\u51fa\u529b\u306b\u3064\u3044\u3066\n\u30b5\u30d6\u30b3\u30de\u30f3\u30c9 command.SubCommand \u306b\u57cb\u3081\u8fbc\uff08embed\uff09\u307e\u308c\u3066\u3044\u308b Meta \u306f\u4ee5\u4e0b\u306e\u69cb\u9020\u306b\u306a\u3063\u3066\u3044\u308b\u3002\n\ncmd3/command/meta.go\npackage command\n\nimport \"github.com/mitchellh/cli\"\n\n// Meta contain the meta-option that nearly all subcommand inherited.\ntype Meta struct {\n    Ui cli.Ui\n}\n\n\n\u66f4\u306b cli.Ui \u306f interface \u578b\u3067\n\ncli/ui.go\n// Ui is an interface for interacting with the terminal, or \"interface\"\n// of a CLI. This abstraction doesn't have to be used, but helps provide\n// a simple, layerable way to manage user interactions.\ntype Ui interface {\n    // Ask asks the user for input using the given query. The response is\n    // returned as the given string, or an error.\n    Ask(string) (string, error)\n\n    // AskSecret asks the user for input using the given query, but does not echo\n    // the keystrokes to the terminal.\n    AskSecret(string) (string, error)\n\n    // Output is called for normal standard output.\n    Output(string)\n\n    // Info is called for information related to the previous output.\n    // In general this may be the exact same as Output, but this gives\n    // Ui implementors some flexibility with output formats.\n    Info(string)\n\n    // Error is used for any error messages that might appear on standard\n    // error.\n    Error(string)\n\n    // Warn is used for any warning messages that might appear on standard\n    // error.\n    Warn(string)\n}\n\n\n\u3068\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u3066\uff0c\u751f\u306e\u6a19\u6e96\u5165\u51fa\u529b\u3092\u96a0\u307a\u3044\u3059\u308b\u3088\u3046\u306b\u306a\u3063\u3066\u3044\u308b\u3002\u3057\u304b\u3057\uff0c\u5b9f\u969b\u306b\u306f\u6a19\u6e96\u5165\u51fa\u529b\u3092\u30b9\u30c8\u30ea\u30fc\u30e0\u3068\u3057\u3066\u76f4\u63a5\u5236\u5fa1\u3057\u305f\u3044\u5834\u5408\u304c\u3042\u308b\u3002\u307e\u305f\uff0c\u30aa\u30d7\u30b7\u30e7\u30f3\u7b49\u3067\u6a19\u6e96\u5165\u51fa\u529b\u3092\u30d5\u30a1\u30a4\u30eb\u306b\u4ed8\u3051\u66ff\u3048\u305f\u3044\u5834\u5408\u3082\u3042\u308b\u306e\u3067\uff0c\u6a19\u6e96\u5165\u51fa\u529b\u3092\u96a0\u307a\u3044\u3059\u308b\u306e\u306f\u5fc5\u305a\u3057\u3082\u5f97\u7b56\u3067\u306f\u306a\u3044\u3002\u3053\u306e\u5834\u5408\u306f\u3044\u3063\u305d\n\ncmd3/command/meta.go\npackage command\n\nimport \"github.com/mitchellh/cli\"\n\n// Meta contain the meta-option that nearly all subcommand inherited.\ntype Meta struct {\n    Ui cli.BasicUi\n}\n\n\n\u306a\u3069\u3068\u66f8\u304d\u63db\u3048\u305f\u307b\u3046\u304c\u3044\u3044\u304b\u3082\u3057\u308c\u306a\u3044\u3002\u3053\u306e\u8fba\u306f\u304a\u597d\u307f\u3067\u3002\n\nLike Go command\n\u6700\u5f8c\u306b \u201cLike Go command\u201d \u30d1\u30bf\u30fc\u30f3\u306e\u30b3\u30fc\u30c9\u3092\u751f\u6210\u3057\u3066\u307f\u308b\u3002\nC:>gcli new -F go_cmd -c sub:\"Sub-command\" -flag=flag:Bool:\"Enable Flag\" -flag=parm:String:\"Option Parameter\" cmd4\n  Created cmd4\\CHANGELOG.md\n  Created cmd4\\README.md\n  Created cmd4\\sub.go\n  Created cmd4\\sub_test.go\n  Created cmd4\\main.go\n====> Successfully generated cmd4\n\n\u3053\u306e\u30d1\u30bf\u30fc\u30f3\u3067\u306f Command \u3092\u30b5\u30d6\u30b3\u30de\u30f3\u30c9\u6bce\u306e context \u3068\u3057\u3066\u5b9a\u7fa9\u3057\u3066\u3044\u308b\u3002\n\ncmd4/main.go\n// A Command is an implementation of a cmd4 command\ntype Command struct {\n    // Run runs the command.\n    // The args are the arguments after the command name.\n    Run func(args []string) int\n\n    // UsageLine is the one-line usage message.\n    // The first word in the line is taken to be the command name.\n    UsageLine string\n\n    // Short is the short description shown in the 'cmd4 help' output.\n    Short string\n\n    // Long is the long message shown in the 'cmd4 help <this-command>' output.\n    Long string\n\n    // Flag is a set of flags specific to this command.\n    Flag flag.FlagSet\n}\n\n// Commands lists the available commands and help topics.\n// The order here is the order in which they are printed by 'cmd4 help'.\nvar commands = []*Command{\n    cmdSub,\n}\n\n\n\ncmd4/sub.go\npackage main\n\nvar cmdSub = &Command{\n    Run:       runSub,\n    UsageLine: \"sub \",\n    Short:     \"Sub-command\",\n    Long: `\n\n    `,\n}\n\nfunc init() {\n    // Set your flag here like below.\n    // cmdSub.Flag.BoolVar(&flagA, \"a\", false, \"\")\n}\n\n// runSub executes sub command and return exit code.\nfunc runSub(args []string) int {\n    return 0\n}\n\n\nApplication Layer \u306e\u30ed\u30b8\u30c3\u30af\u304c\u5168\u3066 main \u30d1\u30c3\u30b1\u30fc\u30b8\u306b\u5c55\u958b\u3055\u308c\u3066\u3044\u308b\u305f\u3081\u30ab\u30b9\u30bf\u30de\u30a4\u30ba\u3057\u3084\u3059\u306e\u304c\u7279\u5fb4\u3002 mitchellh/cli \u3067\u5b9f\u88c5\u3057\u3065\u3089\u3044\u69cb\u6210\u306a\u3089 \u201cLike Go command\u201d \u30d1\u30bf\u30fc\u30f3\u3092\u8a66\u3057\u3066\u307f\u308b\u306e\u3082\u3044\u3044\u304b\u3082\u3057\u308c\u306a\u3044\u3002\n\u4eca\u56de\u306f\u300c[\u306f\u3058\u3081\u3066\u306e Go \u8a00\u8a9e (on Windows) \u305d\u306e10](http://qiita.com/spiegel-im-spiegel/items/5d2878596360af8dd753)\u300d\u306e\u4f59\u9332\u3002\n\n\u300c[\u306f\u3058\u3081\u3066\u306e Go \u8a00\u8a9e (on Windows) \u305d\u306e10](http://qiita.com/spiegel-im-spiegel/items/5d2878596360af8dd753)\u300d\u3067 [tcnksm/gcli] \u3092\u7d39\u4ecb\u3057\u305f\u3051\u3069\uff0c\u3053\u306e  [tcnksm/gcli] \u3092\u4f7f\u3063\u3066 cli \u30d1\u30c3\u30b1\u30fc\u30b8\u306e\u611f\u60f3\uff08\u8a55\u4fa1\u307e\u3067\u306f\u884c\u304b\u306a\u3044\uff09\u3092\u66f8\u3044\u3066\u307f\u3088\u3046\u3068\u601d\u3046\u3002\u306a\u306e\u3067 [tcnksm/gcli] \u304c\u30b5\u30dd\u30fc\u30c8\u3057\u3066\u3044\u306a\u3044 cli \u30d1\u30c3\u30b1\u30fc\u30b8\u306f\u4eca\u56de\u306f\u5bfe\u8c61\u5916\u3002\n\n[tcnksm/gcli] \u304c\u30b5\u30dd\u30fc\u30c8\u3059\u308b cli \u30d1\u30c3\u30b1\u30fc\u30b8\u306f\u4ee5\u4e0b\u306e\u3068\u304a\u308a\u3002\n\n- [flag]\n- [codegangsta/cli]\n- [mitchellh/cli]\n- [Like Go command] pattern\n\n[flag] \u306f\u6a19\u6e96\u30d1\u30c3\u30b1\u30fc\u30b8\u3067\u3042\u308b\u3002\u300c[Like Go command] pattern\u300d\u306f\u30d1\u30c3\u30b1\u30fc\u30b8\u3067\u306f\u306a\u3044\u306e\u3060\u304c\uff0c Go \u30b3\u30f3\u30d1\u30a4\u30e9\u5b9f\u88c5\u30d1\u30bf\u30fc\u30f3\u306b\u4f3c\u305f\u30b3\u30fc\u30c9\u3092\u51fa\u529b\u3057\u3066\u304f\u308c\u308b\u3002\n\n\u4e00\u8a00\u611f\u60f3\u3068\u3057\u3066\u306f\u3053\u3093\u306a\u611f\u3058\u3002\n\n<dl>\n<dt>flag</dt>           <dd>\u30b5\u30d6\u30b3\u30de\u30f3\u30c9\u304c\u306a\u3044\u5834\u5408\u306b\u306f\u304a\u52e7\u3081</dd>\n<dt>codegangsta/cli</dt><dd>\u554f\u984c\u5916</dd>\n<dt>mitchellh/cli</dt>  <dd>\u30b5\u30d6\u30b3\u30de\u30f3\u30c9\u5f62\u5f0f\u306a\u3089\u304a\u52e7\u3081\u3060\u304c\uff0c\u30d5\u30e9\u30b0\u3092\u6271\u3048\u306a\u3044</dd>\n<dt>Like Go command</dt><dd>\u81ea\u52d5\u751f\u6210\u3055\u308c\u308b\u30b3\u30fc\u30c9\u304b\u3089\u304b\u306a\u308a\u30ab\u30b9\u30bf\u30de\u30a4\u30ba\u3059\u308b\u5834\u5408\u306b\u306f\u304a\u52e7\u3081</dd>\n</dl>\n\n\u3042\u304f\u307e\u3067\u500b\u4eba\u306e\u611f\u60f3\u306a\u306e\u3067\uff0c\u6012\u3089\u306a\u3044\u3067\u306d\u3002\u3067\u306f\uff0c\u3082\u3046\u5c11\u3057\u8a73\u3057\u304f\u898b\u3066\u3044\u304f\u3002\n\n## \u30b3\u30de\u30f3\u30c9\u30e9\u30a4\u30f3\u30fb\u30c4\u30fc\u30eb\u306e\u8981\u4ef6\n\n\u300c[\u306f\u3058\u3081\u3066\u306e Go \u8a00\u8a9e (on Windows) \u305d\u306e10](http://qiita.com/spiegel-im-spiegel/items/5d2878596360af8dd753)\u300d\u3067\u3082\u66f8\u3044\u305f\u304c\uff0c\u4e00\u822c\u7684\u306a\u30b3\u30de\u30f3\u30c9\u30e9\u30a4\u30f3\u30fb\u30c4\u30fc\u30eb\u306e\u8981\u4ef6\u306f\u4ee5\u4e0b\u306e\u3068\u304a\u308a\u3002\n\n- shell\uff08bash \u3084\u30b3\u30de\u30f3\u30c9\u30d7\u30ed\u30f3\u30d7\u30c8\u306a\u3069\uff09\u304b\u3089\u306e\u8d77\u52d5\u3092\u524d\u63d0\u3068\u3059\u308b\n- \u30b3\u30de\u30f3\u30c9\u30e9\u30a4\u30f3\u306e\u5f15\u6570\u307e\u305f\u306f\u6a19\u6e96\u5165\u529b\u304b\u3089\u30c7\u30fc\u30bf\u3084\u6761\u4ef6\u3092\u5165\u529b\u3059\u308b\n- \u7d50\u679c\u3092\u6a19\u6e96\u51fa\u529b\u306b\u51fa\u529b\u3059\u308b\n- \u7d50\u679c\u4ee5\u5916\u306e\u60c5\u5831\u306f\u6a19\u6e96\u30a8\u30e9\u30fc\u51fa\u529b\u306b\u51fa\u529b\u3059\u308b\n- shell \u3078\u5b9f\u884c\u7d50\u679c\u306e\u72b6\u614b\u3092\u8fd4\u3059\n\n\u5b9f\u306f\u3053\u308c\u306b\u3082\u3046\u3072\u3068\u3064\u91cd\u8981\u306a\u8981\u4ef6\u3068\u3044\u3046\u304b\u601d\u60f3\u306e\u3088\u3046\u306a\u3082\u306e\u304c\u3042\u3063\u3066\uff0c\u305d\u308c\u306f\u300c\u30b3\u30de\u30f3\u30c9\u30e9\u30a4\u30f3\u30fb\u30c4\u30fc\u30eb\u306e\u6a5f\u80fd\u306f\u3067\u304d\u308b\u3060\u3051\u5358\u6a5f\u80fd\u306b\u3059\u308b\u300d\u3068\u3044\u3046\u3082\u306e\u3060\u3002\u30b3\u30de\u30f3\u30c9\u30e9\u30a4\u30f3\u30fb\u30c4\u30fc\u30eb\u3092\u5358\u72ec\u3067\u4f7f\u3046\u3053\u3068\u306f\u5c11\u306a\u304f\uff0c\u5b9f\u969b\u306b\u306f shell script\uff08Windows \u306a\u3089\u30d0\u30c3\u30c1\u30b9\u30af\u30ea\u30d7\u30c8\u7b49\uff09\u3092\u4f7f\u3063\u3066\u8907\u6570\u306e\u30c4\u30fc\u30eb\u3092\u7d44\u307f\u5408\u308f\u305b\u3066\u4f7f\u3046\u3053\u3068\u304c\u591a\u3044\u3002\n\n### Dmain-Driven \u3067\u884c\u3053\u3046\n\nDDD\uff08Dmain-Driven Design\uff09\u3068\u3044\u3046\u3082\u306e\u304c\u3042\u308b\u3002\u3053\u308c\u306f Domain Model \u3092\u30d9\u30fc\u30b9\u306b\u3057\u305f\u8a2d\u8a08\u30d1\u30bf\u30fc\u30f3\u306e\u3053\u3068\u3067 DRY\uff08Don't Repeat Yourself\uff09\u306a\u69cb\u9020\u306b\u3059\u308b\u306e\u306b\u9069\u3057\u3066\u3044\u308b\u3068\u8a00\u308f\u308c\u3066\u3044\u308b\u3002 DDD \u306f10\u5e74\u304f\u3089\u3044\u524d\u304b\u3089\u53f0\u982d\u3057\u3066\u304d\u305f\u304c\uff0c\u601d\u60f3\u81ea\u4f53\u306f\u65b0\u3057\u3044\u3082\u306e\u3067\u306f\u306a\u304f\uff0c\u3044\u308f\u3086\u308b\u300c\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u6307\u5411\u300d\u8a2d\u8a08\u306e\u30d1\u30bf\u30fc\u30f3\u3068\u3057\u3066\u9577\u3044\u6642\u9593\uff08\u3068\u3044\u3063\u3066\u3082\u534a\u4e16\u7d00\u306f\u7d4c\u3063\u3066\u3044\u306a\u3044\u306f\u305a\u3060\u3051\u3069\uff09\u3092\u304b\u3051\u3066\u91b8\u6210\u3055\u308c\u305f\u77e5\u898b\u306e\u96c6\u7a4d\u3068\u8a00\u3048\u308b\uff08\u305f\u3060\u3057 DDD \u81ea\u4f53\u306f\u5fc5\u305a\u3057\u3082\u300c\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u6307\u5411\u300d\u3092\u8981\u4ef6\u3068\u3057\u306a\u3044\uff09\u3002\n\n\u30a2\u30fc\u30ad\u30c6\u30af\u30c1\u30e3\u306e\u6982\u5ff5\u3068\u3057\u3066\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u306a\u611f\u3058\u3060\u308d\u3046\u3002\uff08\u3053\u308c\uff0c\u7d50\u69cb\u3072\u3068\u306b\u3088\u3063\u3066\u9055\u3046\u3093\u3060\u3088\u306a\u3041\uff09\n\n[![DDD Architecture](http://www.baldanders.info/spiegel/archive/DDD-fig.svg)](http://www.baldanders.info/spiegel/archive/DDD-fig.html)\n\n\u3053\u306e\u4e2d\u306e Domain Layer \u306b\u30d3\u30b8\u30cd\u30b9\u30ed\u30b8\u30c3\u30af\u304c\u5165\u308b\u3002\u4e0a\u4e0b\u306e\u968e\u5c64\u69cb\u9020\u3067\u306f\u306a\u304f\u5de6\u53f3\u306e\u69cb\u9020\u306b\u306a\u3063\u3066\u3044\u308b\u306e\u306f\uff0c\u30c7\u30fc\u30bf\u306e\u6d41\u308c\u3092\u610f\u8b58\u3057\u3066\u307b\u3057\u3044\u304b\u3089\u3002 Iuput (trigger) \u306f\u5de6\u304b\u3089\u53f3\u306b\u6d41\u308c\uff0c ouutput (response) \u306f\u53f3\u304b\u3089\u5de6\u306b\u6d41\u308c\u308b\u3002\n\n\u666e\u901a DDD \u306f\u5927\u898f\u6a21\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\uff08\u307e\u305f\u306f\u30b5\u30fc\u30d3\u30b9\uff09\u306e\u8a2d\u8a08\u3067\u9069\u7528\u3059\u308b\u3082\u306e\u3060\u304c\uff0c\u30b3\u30de\u30f3\u30c9\u30e9\u30a4\u30f3\u30fb\u30c4\u30fc\u30eb\u3067\u3082 DDD \u3092\u610f\u8b58\u3059\u308b\u3053\u3068\u306f\u60aa\u304f\u306a\u3044\u3057\u8a13\u7df4\u306b\u3082\u306a\u308b\u3002\u305f\u3068\u3048\u3070\uff0c\u30b3\u30de\u30f3\u30c9\u30e9\u30a4\u30f3\u30fb\u30c4\u30fc\u30eb\u3092\u547c\u3073\u51fa\u3059 shell \u3084 shell script \u304c Presentation Layer \u3067 cli \u30d1\u30c3\u30b1\u30fc\u30b8\u304c Application Layer \u3068\u3044\u3063\u305f\u611f\u3058\u3067\u8003\u3048\u308b\u3002 cli \u30d1\u30c3\u30b1\u30fc\u30b8\u304c\u547c\u3073\u51fa\u3059\u30ed\u30b8\u30c3\u30af\u304c Domain Layer \u3060\u3068\u8003\u3048\u308b\u3068\u5206\u304b\u308a\u3084\u3059\u3044\u304b\u3082\u77e5\u308c\u306a\u3044\u3002\u307e\u305f\uff0c[\u524d\u56de\u4f5c\u3063\u305f\u30c4\u30fc\u30eb](http://qiita.com/spiegel-im-spiegel/items/5d2878596360af8dd753)\u3067\u306f Git.io \u304c Data Layer \u306b\u306a\u308b\u308f\u3051\u3060\u3002\n\n## \u30b5\u30d6\u30b3\u30de\u30f3\u30c9\u3092\u6301\u305f\u306a\u3044\u69cb\u6210\u306e\u5834\u5408\n\n\u8a71\u304c\u9038\u308c\u3066\u3057\u307e\u3063\u305f\u3002 cli \u30d1\u30c3\u30b1\u30fc\u30b8\u306e\u8a71\u306b\u623b\u308d\u3046\u3002\n\n\u307e\u305a\u306f\u30b5\u30d6\u30b3\u30de\u30f3\u30c9\u3092\u6301\u305f\u306a\u3044\u69cb\u6210\u306e\u5834\u5408\u3002\u4f8b\u3048\u3070\u3053\u3093\u306a\u611f\u3058\u3002\n\n```bash\n$ cmd -flag -parm parameter argument\n```\n\n\u6761\u4ef6\u3092\u6307\u5b9a\u3059\u308b `-flag` \u3084 `-parm` \u30aa\u30d7\u30b7\u30e7\u30f3\u304c\u3042\u3063\u3066\uff0c\u305d\u306e\u5f8c\u308d\u306b\u5f15\u6570\u304c\u7d9a\u304f\u3002\u3053\u3046\u3044\u3063\u305f\u7528\u9014\u306a\u3089 [flag] \u30d1\u30c3\u30b1\u30fc\u30b8\u304c\u6700\u9069\u3067\u3042\u308b\u3002 [tcnksm/gcli] \u3067\u5b9f\u969b\u306b\u30b3\u30fc\u30c9\u3092\u751f\u6210\u3057\u3066\u307f\u308b\u3002\n\n```shell\nC:>gcli new -F flag -flag=flag:Bool:\"Enable Flag\" -flag=parm:String:\"Option Parameter\" cmd\n  Created cmd\\main.go\n  Created cmd\\CHANGELOG.md\n  Created cmd\\README.md\n  Created cmd\\cli_test.go\n  Created cmd\\cli.go\n  Created cmd\\version.go\n====> Successfully generated cmd\n```\n\n```go:cmd/main.go\npackage main\n\nimport \"os\"\n\nfunc main() {\n\tcli := &CLI{outStream: os.Stdout, errStream: os.Stderr}\n\tos.Exit(cli.Run(os.Args))\n}\n```\n\n```go:cmd/cli.go\npackage main\n\nimport (\n\t\"flag\"\n\t\"fmt\"\n\t\"io\"\n)\n\n// Exit codes are int values that represent an exit code for a particular error.\nconst (\n\tExitCodeOK    int = 0\n\tExitCodeError int = 1 + iota\n)\n\n// CLI is the command line object\ntype CLI struct {\n\t// outStream and errStream are the stdout and stderr\n\t// to write message from the CLI.\n\toutStream, errStream io.Writer\n}\n\n// Run invokes the CLI with the given arguments.\nfunc (cli *CLI) Run(args []string) int {\n\tvar (\n\t\tflag bool\n\t\tparm string\n\t)\n\n\t// Define option flag parse\n\tflags := flag.NewFlagSet(Name, flag.ContinueOnError)\n\tflags.SetOutput(cli.errStream)\n\n\tflags.BoolVar(&flag, \"flag\", false, \"Enable Flag\")\n\tflags.StringVar(&parm, \"parm\", \"\", \"Option Parameter\")\n\n\tflVersion := flags.Bool(\"version\", false, \"Print version information and quit.\")\n\n\t// Parse commandline flag\n\tif err := flags.Parse(args[1:]); err != nil {\n\t\treturn ExitCodeError\n\t}\n\n\t// Show version\n\tif *flVersion {\n\t\tfmt.Fprintf(cli.errStream, \"%s version %s\\n\", Name, Version)\n\t\treturn ExitCodeOK\n\t}\n\n\t_ = flag\n\n\t_ = parm\n\n\treturn ExitCodeOK\n}\n```\n\n\u5b9f\u306f\u3053\u306e\u307e\u307e\u3067\u306f\u5909\u6570\u540d\u306e `flag` \u3068\u30d1\u30c3\u30b1\u30fc\u30b8\u540d\u306e `flag` \u304c\u88ab\u308b\u306e\u3067\uff0c\u3061\u3087\u3063\u3068\u4fee\u6b63\uff08\u30aa\u30d7\u30b7\u30e7\u30f3\u540d\u3092\u305d\u306e\u307e\u307e\u5909\u6570\u540d\u306b\u3059\u308b\u306e\u306f\u4f55\u304b\u3068\u62d9\u3044\u3068\u601d\u3046\uff09\u3002\u307e\u305f\uff0c\u30aa\u30d7\u30b7\u30e7\u30f3\u4ee5\u5916\u306e\u5f15\u6570\u3092\u89e3\u6790\u3059\u308b\u30ed\u30b8\u30c3\u30af\u306f\u306a\u3044\u304c\uff0c\u3053\u308c\u306f\u81ea\u524d\u3067\u5b9f\u88c5\u3059\u308b\u3002\n\n```go:cmd/cli.go\npackage main\n\nimport (\n\t\"flag\"\n\t\"fmt\"\n\t\"io\"\n)\n\n// Exit codes are int values that represent an exit code for a particular error.\nconst (\n\tExitCodeOK    int = 0\n\tExitCodeError int = 1 + iota\n)\n\n// CLI is the command line object\ntype CLI struct {\n\t// outStream and errStream are the stdout and stderr\n\t// to write message from the CLI.\n\toutStream, errStream io.Writer\n}\n\n// Run invokes the CLI with the given arguments.\nfunc (cli *CLI) Run(args []string) int {\n\tvar (\n\t\tflagFlag  bool\n\t\tparmFlag  string\n\t\targuments []string\n\t)\n\n\t// Define option flag parse\n\tflags := flag.NewFlagSet(Name, flag.ContinueOnError)\n\tflags.SetOutput(cli.errStream)\n\n\tflags.BoolVar(&flagFlag, \"flag\", false, \"Enable Flag\")\n\tflags.StringVar(&parmFlag, \"parm\", \"\", \"Option Parameter\")\n\n\tflVersion := flags.Bool(\"version\", false, \"Print version information and quit.\")\n\n\t// Parse commandline flag\n\tif err := flags.Parse(args[1:]); err != nil {\n\t\treturn ExitCodeError\n\t}\n\n\t// Show version\n\tif *flVersion {\n\t\tfmt.Fprintf(cli.errStream, \"%s version %s\\n\", Name, Version)\n\t\treturn ExitCodeOK\n\t}\n\n\tfor 0 < flags.NArg() {\n\t\targuments = append(arguments, flags.Arg(0))\n\t\tflags.Parse(flags.Args()[1:])\n\t}\n\n\tfmt.Fprintln(cli.errStream, \"flag =\", flagFlag)\n\tfmt.Fprintln(cli.errStream, \"parm =\", parmFlag)\n\tfmt.Fprintln(cli.errStream, \"arguments =\", arguments)\n\n\treturn ExitCodeOK\n}\n```\n\n\u3053\u308c\u3092\u30b3\u30f3\u30d1\u30a4\u30eb\u3057\u3066\u52d5\u304b\u3057\u3066\u307f\u308b\u3002\n\n```shell\nC:>go build ./cmd\n\nC:>cmd -version\ncmd version 0.1.0\n\nC:>cmd arg1 arg2\nflag = false\nparm =\narguments = [arg1 arg2]\n\nC:>cmd -flag -parm parm1 arg1 arg2\nflag = true\nparm = parm1\narguments = [arg1 arg2]\n```\n\n\u751f\u6210\u3055\u308c\u305f `CLI` \u30af\u30e9\u30b9\u3067\u306f\uff0c\u6a19\u6e96\uff08\u30a8\u30e9\u30fc\uff09\u51fa\u529b\u3084\u5f15\u6570\u3092\u5165\u529b\u3068\u3057\u3066\u60c5\u5831\u3092\u6574\u7406\u3057\u305f\u4e0a\u3067\u6b21\u306e\u51e6\u7406\uff08\u304a\u305d\u3089\u304f Domain Layer\uff09\u306b\u51e6\u7406\u3092\u6e21\u3059\u3053\u3068\u304c\u3067\u304d\u308b\u3002\u304b\u306a\u308a\u7406\u60f3\u7684\u306a\u69cb\u6210\u3067\u3042\u308b\u3002\u305f\u3060\u3057\uff0c\u4f55\u6545\u304b\u6a19\u6e96\u5165\u529b\u306f\u542b\u307e\u308c\u3066\u3044\u306a\u3044\u305f\u3081\uff0c\u6a19\u6e96\u5165\u529b\u3082\u5fc5\u8981\u306a\u5834\u5408\u306f `CLI` \u30af\u30e9\u30b9\u3084 `CLI` \u30af\u30e9\u30b9\u3092\u547c\u3073\u51fa\u3059 `main` \u95a2\u6570\u3092\u66f8\u304d\u63db\u3048\u308b\u5fc5\u8981\u304c\u3042\u308b\u3002\n\n## \u30b5\u30d6\u30b3\u30de\u30f3\u30c9\u3092\u6301\u3064\u69cb\u6210\u306e\u5834\u5408\n\n\u30b5\u30d6\u30b3\u30de\u30f3\u30c9\u3092\u6301\u3064\u69cb\u6210\u3068\u3044\u3046\u306e\u306f\uff0c\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u5f15\u6570\u306e\u69cb\u6210\u306b\u306a\u3063\u3066\u3044\u308b\u30c4\u30fc\u30eb\u3067\u3042\u308b\u3002\n\n```\ncommand [global options] subcommand [subcommand options] [arguments...]\n```\n\n[flag] \u30d1\u30c3\u30b1\u30fc\u30b8\u306f\u30b5\u30d6\u30b3\u30de\u30f3\u30c9\u3092\u69cb\u6210\u3059\u308b\u306b\u306f\u4e0d\u5411\u304d\uff08\u3067\u304d\u306a\u3044\u3053\u3068\u306f\u306a\u3044\u304c\u9762\u5012\uff09\u306a\u306e\u3067\uff0c\u4ed6\u306e\u30d1\u30c3\u30b1\u30fc\u30b8\u3092\u4f7f\u3046\u3053\u3068\u306b\u306a\u308b\u3002\n\n### codegangsta/cli \u3092\u4f7f\u7528\u3059\u308b\u5834\u5408\n\n\u6b21\u306e\u3088\u3046\u306a\u30c4\u30fc\u30eb\u3092\u8003\u3048\u308b\u3002\n\n```bash\n$ cmd2 sub -flag -parm parameter argument\n```\n\n`sub` \u304c\u30b5\u30d6\u30b3\u30de\u30f3\u30c9\u3002\u3053\u308c\u3092 [codegangsta/cli] \u7528\u306b\u751f\u6210\u3057\u3066\u307f\u308b\u3002\n\n```shell\nC:>gcli new -F codegangsta_cli -c sub:\"Sub-command\" -flag=flag:Bool:\"Enable Flag\" -flag=parm:String:\"Option Parameter\" cmd2\n  Created cmd2\\CHANGELOG.md\n  Created cmd2\\main.go\n  Created cmd2\\version.go\n  Created cmd2\\command\\sub.go\n  Created cmd2\\command\\sub_test.go\n  Created cmd2\\README.md\n  Created cmd2\\commands.go\n====> Successfully generated cmd2\n```\n\n```go:cmd2/main.go\npackage main\n\nimport (\n\t\"os\"\n\n\t\"github.com/codegangsta/cli\"\n)\n\nfunc main() {\n\n\tapp := cli.NewApp()\n\tapp.Name = Name\n\tapp.Version = Version\n\tapp.Author = \"Spiegel\"\n\tapp.Email = \"\"\n\tapp.Usage = \"\"\n\n\tapp.Flags = GlobalFlags\n\tapp.Commands = Commands\n\tapp.CommandNotFound = CommandNotFound\n\n\tapp.Run(os.Args)\n}\n```\n\n\u898b\u305f\u3089\u308f\u304b\u308b\u3068\u601d\u3046\u304c\uff0c [`app.Run()`](http://godoc.org/github.com/codegangsta/cli#App.Run) \u95a2\u6570\u306e\u8fd4\u308a\u5024\u3092\u5168\u304f\u898b\u3066\u3044\u306a\u3044\u3002\u5b9f\u306f `error` \u578b\u306e\u5024\u3092\u8fd4\u3059\u306e\u3060\u304c\uff0c\u3053\u306e\u30a8\u30e9\u30fc\u60c5\u5831\u306f\u30e1\u30a4\u30f3\u306e\u51e6\u7406\u7d50\u679c\u306b\u5bfe\u3059\u308b\u3082\u306e\u3067\u306f\u306a\u3044\u3002\u306a\u3089\u3070\u3069\u3046\u3059\u308b\u304b\u3068\u3044\u3046\u3068\uff0c\u30b5\u30d6\u30b3\u30de\u30f3\u30c9\u5185\u306e\u51e6\u7406\u306e\u4e2d\u3067 `os.Exit()` \u3059\u308b\u3068\u3044\u3046\uff0c\u304b\u306a\u308a\u3048\u3052\u3064\u306a\u3044\u4ed5\u69d8\u306b\u306a\u3063\u3066\u3044\u308b\u3002\u500b\u4eba\u7684\u306b\u306f\u3053\u306e\u4e00\u70b9\u3067 [codegangsta/cli] \u306f **\u554f\u984c\u5916** \u306a\u306e\u3060\u304c\uff0c\u3082\u3046\u5c11\u3057\u3060\u3051\u89e3\u8aac\u3059\u308b\u3002\n\n```go:cmd2/commands.go\npackage main\n\nimport (\n\t\"fmt\"\n\t\"os\"\n\n\t\"github.com/spiegel-im-spiegel/cmd2/command\"\n\t\"github.com/codegangsta/cli\"\n)\n\nvar GlobalFlags = []cli.Flag{\n\tcli.BoolFlag{\n\t\tEnvVar: \"ENV_FLAG\",\n\t\tName:   \"flag\",\n\n\t\tUsage: \"Enable Flag\",\n\t},\n\tcli.StringFlag{\n\t\tEnvVar: \"ENV_PARM\",\n\t\tName:   \"parm\",\n\t\tValue:  \"\",\n\t\tUsage:  \"Option Parameter\",\n\t},\n}\n\nvar Commands = []cli.Command{\n\t{\n\t\tName:   \"sub\",\n\t\tUsage:  \"Sub-command\",\n\t\tAction: command.CmdSub,\n\t\tFlags:  []cli.Flag{},\n\t},\n}\n\nfunc CommandNotFound(c *cli.Context, command string) {\n\tfmt.Fprintf(os.Stderr, \"%s: '%s' is not a %s command. See '%s --help'.\", c.App.Name, command, c.App.Name, c.App.Name)\n\tos.Exit(2)\n}\n```\n\n\u6b8b\u5ff5\u306a\u304c\u3089 [tcnksm/gcli] \u306f\u30b5\u30d6\u30b3\u30de\u30f3\u30c9\u30fb\u30aa\u30d7\u30b7\u30e7\u30f3\u3092\u30b5\u30dd\u30fc\u30c8\u3057\u3066\u3044\u306a\u3044\u3002\u306a\u306e\u3067\uff0c `-flag` \u3067\u6307\u5b9a\u3057\u305f\u30aa\u30d7\u30b7\u30e7\u30f3\u306f\u5168\u3066\u30b0\u30ed\u30fc\u30d0\u30eb\u30fb\u30aa\u30d7\u30b7\u30e7\u30f3\u3068\u3057\u3066\u5b9a\u7fa9\u3055\u308c\u308b\u3002\u3084\u308a\u65b9\u3068\u3057\u3066\u306f\u5fc5\u8981\u306a\u30aa\u30d7\u30b7\u30e7\u30f3\u3092 [tcnksm/gcli] \u306b\u66f8\u304d\u51fa\u3057\uff0c `commands.go` \u306e\u4e2d\u3067\u30b0\u30ed\u30fc\u30d0\u30eb\u30fb\u30aa\u30d7\u30b7\u30e7\u30f3\u3068\u3057\u3066\u8a18\u8ff0\u3055\u308c\u3066\u3044\u308b\u3082\u306e\u3092\u30b5\u30d6\u30b3\u30de\u30f3\u30c9\u30fb\u30aa\u30d7\u30b7\u30e7\u30f3\u3068\u3057\u3066\u624b\u52d5\u3067\u632f\u308a\u5206\u3051\u76f4\u3059\u306e\u304c\u3044\u3044\u3060\u308d\u3046\u3002\u4eca\u56de\u306a\u3089\u3053\u3093\u306a\u611f\u3058\u306b\u306a\u308b\u3002\n\n```go:cmd2/commands.go\npackage main\n\nimport (\n\t\"fmt\"\n\t\"os\"\n\n\t\"github.com/spiegel-im-spiegel/cmd2/command\"\n\t\"github.com/codegangsta/cli\"\n)\n\nvar GlobalFlags = []cli.Flag{}\n\nvar Commands = []cli.Command{\n\t{\n\t\tName:   \"sub\",\n\t\tUsage:  \"Sub-command\",\n\t\tAction: command.CmdSub,\n\t\tFlags:  []cli.Flag{\n\t\t\tcli.BoolFlag{\n\t\t\t\t//EnvVar: \"ENV_FLAG\",\n\t\t\t\tName:   \"flag\",\n\n\t\t\t\tUsage: \"Enable Flag\",\n\t\t\t},\n\t\t\tcli.StringFlag{\n\t\t\t\t//EnvVar: \"ENV_PARM\",\n\t\t\t\tName:   \"parm\",\n\t\t\t\tValue:  \"\",\n\t\t\t\tUsage:  \"Option Parameter\",\n\t\t\t},\n\t\t},\n\t},\n}\n\nfunc CommandNotFound(c *cli.Context, command string) {\n\tfmt.Fprintf(os.Stderr, \"%s: '%s' is not a %s command. See '%s --help'.\", c.App.Name, command, c.App.Name, c.App.Name)\n\tos.Exit(2)\n}\n```\n\n\u3068\u3053\u308d\u3067 `cli.Commans` \u304a\u3088\u3073 `cli.Context` \u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u308b\u3002\n\n```go:cli/command.go\ntype Command struct {\n\t// The name of the command\n\tName string\n\t// short name of the command. Typically one character (deprecated, use `Aliases`)\n\tShortName string\n\t// A list of aliases for the command\n\tAliases []string\n\t// A short description of the usage of this command\n\tUsage string\n\t// A longer explanation of how the command works\n\tDescription string\n\t// The function to call when checking for bash command completions\n\tBashComplete func(context *Context)\n\t// An action to execute before any sub-subcommands are run, but after the context is ready\n\t// If a non-nil error is returned, no sub-subcommands are run\n\tBefore func(context *Context) error\n\t// An action to execute after any subcommands are run, but after the subcommand has finished\n\t// It is run even if Action() panics\n\tAfter func(context *Context) error\n\t// The function to call when this command is invoked\n\tAction func(context *Context)\n\t// List of child commands\n\tSubcommands []Command\n\t// List of flags to parse\n\tFlags []Flag\n\t// Treat all flags as normal arguments if true\n\tSkipFlagParsing bool\n\t// Boolean to hide built-in help command\n\tHideHelp bool\n\n\tcommandNamePath []string\n}\n```\n\n```go:cli/context.go\ntype Context struct {\n\tApp            *App\n\tCommand        Command\n\tflagSet        *flag.FlagSet\n\tsetFlags       map[string]bool\n\tglobalSetFlags map[string]bool\n\tparentContext  *Context\n}\n```\n\n\u3064\u307e\u308a\u3053\u308c\u304c context \u306e\u5168\u3066\u3067\uff0c\u305d\u306e\u4e2d\u306b\u306f\u6a19\u6e96\u5165\u51fa\u529b\u3084\u30aa\u30d7\u30b7\u30e7\u30f3\u4ee5\u5916\u306e\u5f15\u6570\u60c5\u5831\u306f\u5165\u3063\u3066\u3044\u306a\u3044\u3002\u3058\u3083\u3042\uff0c\u3069\u3046\u3059\u308b\u304b\u3068\u3044\u3046\u3068 `Action` property \u306b\u30bb\u30c3\u30c8\u3059\u308b\u95a2\u6570\u5185\u3067\u6a19\u6e96\u5165\u51fa\u529b\u3084\u30aa\u30d7\u30b7\u30e7\u30f3\u4ee5\u5916\u306e\u5f15\u6570\u60c5\u5831\u3092\u53d6\u5f97\u3057\u3066\u51e6\u7406\u3059\u308b\u3057\u304b\u306a\u3044\u3002\u305d\u3057\u3066 `Action` property \u306b\u30bb\u30c3\u30c8\u3059\u308b\u95a2\u6570\u306f\u5024\u3092\u8fd4\u3055\u306a\u3044\uff08\u8fd4\u305b\u306a\u3044\uff09\u3002\u3057\u305f\u304c\u3063\u3066\u547c\u3073\u51fa\u3055\u308c\u308b\u95a2\u6570\u306e\u5185\u90e8\u3067 `os.Exit()` \u3059\u308b\u3057\u304b\u306a\u3044\u308f\u3051\u3060\u3002\u3084\u308c\u3084\u308c\u3002\n\n### mitchellh/cli \u3092\u4f7f\u7528\u3059\u308b\u5834\u5408\n\n\u540c\u3058 UI \u3092\uff0c\u4eca\u5ea6\u306f [mitchellh/cli] \u3092\u4f7f\u3063\u3066\u5b9f\u88c5\u3057\u3066\u307f\u308b\u3002\n\n```shell\nC:>gcli new -F mitchellh_cli -c sub:\"Sub-command\" -flag=flag:Bool:\"Enable Flag\" -flag=parm:String:\"Option Parameter\" cmd3\n  Created cmd3\\main.go\n  Created cmd3\\command\\meta.go\n  Created cmd3\\command\\version.go\n  Created cmd3\\cli.go\n  Created cmd3\\CHANGELOG.md\n  Created cmd3\\version.go\n  Created cmd3\\commands.go\n  Created cmd3\\command\\sub.go\n  Created cmd3\\README.md\n  Created cmd3\\command\\sub_test.go\n====> Successfully generated cmd3\n```\n\n```go:cmd3/cli.go\npackage main\n\nimport (\n\t\"fmt\"\n\t\"os\"\n\n\t\"github.com/mitchellh/cli\"\n\t\"github.com/spiegel-im-spiegel/cmd3/command\"\n)\n\nfunc Run(args []string) int {\n\n\t// Meta-option for executables.\n\t// It defines output color and its stdout/stderr stream.\n\tmeta := &command.Meta{\n\t\tUi: &cli.ColoredUi{\n\t\t\tInfoColor:  cli.UiColorBlue,\n\t\t\tErrorColor: cli.UiColorRed,\n\t\t\tUi: &cli.BasicUi{\n\t\t\t\tWriter:      os.Stdout,\n\t\t\t\tErrorWriter: os.Stderr,\n\t\t\t\tReader:      os.Stdin,\n\t\t\t},\n\t\t}}\n\n\treturn RunCustom(args, Commands(meta))\n}\n\nfunc RunCustom(args []string, commands map[string]cli.CommandFactory) int {\n\n\t// Get the command line args. We shortcut \"--version\" and \"-v\" to\n\t// just show the version.\n\tfor _, arg := range args {\n\t\tif arg == \"-v\" || arg == \"-version\" || arg == \"--version\" {\n\t\t\tnewArgs := make([]string, len(args)+1)\n\t\t\tnewArgs[0] = \"version\"\n\t\t\tcopy(newArgs[1:], args)\n\t\t\targs = newArgs\n\t\t\tbreak\n\t\t}\n\t}\n\n\tcli := &cli.CLI{\n\t\tArgs:       args,\n\t\tCommands:   commands,\n\t\tVersion:    Version,\n\t\tHelpFunc:   cli.BasicHelpFunc(Name),\n\t\tHelpWriter: os.Stdout,\n\t}\n\n\texitCode, err := cli.Run()\n\tif err != nil {\n\t\tfmt.Fprintf(os.Stderr, \"Failed to execute: %s\\n\", err.Error())\n\t}\n\n\treturn exitCode\n}\n```\n\n```go:cmd3/commands.go\npackage main\n\nimport (\n\t\"github.com/mitchellh/cli\"\n\t\"github.com/spiegel-im-spiegel/cmd3/command\"\n)\n\nfunc Commands(meta *command.Meta) map[string]cli.CommandFactory {\n\treturn map[string]cli.CommandFactory{\n\t\t\"sub\": func() (cli.Command, error) {\n\t\t\treturn &command.SubCommand{\n\t\t\t\tMeta: *meta,\n\t\t\t}, nil\n\t\t},\n\n\t\t\"version\": func() (cli.Command, error) {\n\t\t\treturn &command.VersionCommand{\n\t\t\t\tMeta:     *meta,\n\t\t\t\tVersion:  Version,\n\t\t\t\tRevision: GitCommit,\n\t\t\t\tName:     Name,\n\t\t\t}, nil\n\t\t},\n\t}\n}\n```\n\n\n\u5b9f\u306f\uff0c [mitchellh/cli] \u81ea\u8eab\u306f\u30d5\u30e9\u30b0\u3092\u30b5\u30dd\u30fc\u30c8\u3057\u3066\u3044\u306a\u3044\u3002\u305d\u3053\u3067 [tcnksm/gcli] \u304c [mitchellh/cli] \u3092\u30e9\u30c3\u30d7\u3059\u308b\u30b3\u30fc\u30c9\u3092\u751f\u6210\u3059\u308b\u3053\u3068\u3067 [mitchellh/cli] \u306e\u5f31\u70b9\u3092\u30ab\u30d0\u30fc\u3057\u3066\u3044\u308b\u3002\n\n\u6700\u7d42\u7684\u306b [mitchellh/cli] \u306b\u6e21\u3059\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u306f\u4ee5\u4e0b\u306e\u30a4\u30f3\u30bf\u30d5\u30a7\u30fc\u30b9\u3092\u6e80\u305f\u3057\u3066\u3044\u308c\u3070\u3088\u3044\u3002\n\n```go:cli/command.go\npackage cli\n\n// A command is a runnable sub-command of a CLI.\ntype Command interface {\n\t// Help should return long-form help text that includes the command-line\n\t// usage, a brief few sentences explaining the function of the command,\n\t// and the complete list of flags the command accepts.\n\tHelp() string\n\n\t// Run should run the actual command with the given CLI instance and\n\t// command-line arguments. It should return the exit status when it is\n\t// finished.\n\tRun(args []string) int\n\n\t// Synopsis should return a one-line, short synopsis of the command.\n\t// This should be less than 50 characters ideally.\n\tSynopsis() string\n}\n\n// CommandFactory is a type of function that is a factory for commands.\n// We need a factory because we may need to setup some state on the\n// struct that implements the command itself.\ntype CommandFactory func() (Command, error)\n\n```\n\n\u4f8b\u3048\u3070 `sub` \u30b5\u30d6\u30b3\u30de\u30f3\u30c9 `command.SubCommand` \u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u306a\u3063\u3066\u3044\u308b\u3002\n\n```go:cmd3/command/sub.go\npackage command\n\nimport (\n\t\"strings\"\n)\n\ntype SubCommand struct {\n\tMeta\n}\n\nfunc (c *SubCommand) Run(args []string) int {\n\t// Write your code here\n\treturn 0\n}\n\nfunc (c *SubCommand) Synopsis() string {\n\treturn \"Sub-command\"\n}\n\nfunc (c *SubCommand) Help() string {\n\thelpText := `\n\n`\n\treturn strings.TrimSpace(helpText)\n}\n```\n\n\u3053\u306e\u3046\u3061 `Run()` \u95a2\u6570\u304c\u51e6\u7406\u306e\u672c\u4f53\u3067\u3042\u308b\u3002 [tcnksm/gcli] \u3067\u306f\u7a7a\u3063\u307d\u306e\u95a2\u6570\u3057\u304b\u751f\u6210\u3057\u3066\u304f\u308c\u306a\u3044\u304c\uff0c\u5b9f\u969b\u306b\u306f\u3053\u306e\u4e2d\u3067\u5f15\u6570\u306e\u89e3\u6790\u3092\u884c\u3046\u3002\u5f15\u6570\u89e3\u6790\u306b\u306f [flag] \u304c\u4f7f\u3048\u308b\u3002\n\n```go:cmd3/command/sub.go\nfunc (c *SubCommand) Run(args []string) int {\n    var (\n\t\tflagFlag  bool\n\t\tparmFlag  string\n\t\targuments []string\n\t)\n\n\t// Define option flag parse\n\tflags := flag.NewFlagSet(Name, flag.ContinueOnError)\n    flags.Usage = func() {}\n\n\tflags.BoolVar(&flagFlag, \"flag\", false, \"Enable Flag\")\n\tflags.StringVar(&parmFlag, \"parm\", \"\", \"Option Parameter\")\n\n\t// Parse commandline flag\n\tif err := flags.Parse(args[1:]); err != nil {\n\t\treturn 1\n\t}\n\tfor 0 < flags.NArg() {\n\t\targuments = append(arguments, flags.Arg(0))\n\t\tflags.Parse(flags.Args()[1:])\n\t}\n\n\tc.Ui.Output(\"flag =\", flagFlag)\n\tc.Ui.Output(\"parm =\", parmFlag)\n\tc.Ui.Output(\"arguments =\", arguments)\n\n\treturn 0\n}\n```\n\nDDD \u7684\u306b\u307f\u308c\u3070\uff0c\u751f\u6210\u3055\u308c\u305f `command` \u30b5\u30d6\u30d1\u30c3\u30b1\u30fc\u30b8\u306f Application Layer \u306e Facade \u3068\u898b\u306a\u305b\u308b\u3002\u30b5\u30d6\u30b3\u30de\u30f3\u30c9\u3092\u547c\u3073\u51fa\u3059\u5074\uff08Application Layer\uff09\u306f `command` \u30b5\u30d6\u30d1\u30c3\u30b1\u30fc\u30b8\u306e\u5404\u30b3\u30de\u30f3\u30c9\u3092\u5b9a\u578b\u7684\u306b\u547c\u3073\u51fa\u3059\u3060\u3051\u3067\u3088\u304f\uff0c\u30b5\u30d6\u30b3\u30de\u30f3\u30c9\u3092\u547c\u3073\u51fa\u3055\u308c\u308b\u5074\uff08Domain Layer\uff09\u306f `command` \u30b5\u30d6\u30d1\u30c3\u30b1\u30fc\u30b8\u3068\u306e\u9593\u3067\u8a71\u304c\u901a\u3058\u3066\u3044\u308c\u3070\u300c\u53cb\u9054\u306e\u53cb\u9054\u300d\u306e\u3053\u3068\u306f\u6c17\u306b\u3057\u306a\u304f\u3066\u3082\u3088\u3044\u3002\n\n#### \u6a19\u6e96\u5165\u51fa\u529b\u306b\u3064\u3044\u3066\n\n\u30b5\u30d6\u30b3\u30de\u30f3\u30c9 `command.SubCommand` \u306b\u57cb\u3081\u8fbc\uff08embed\uff09\u307e\u308c\u3066\u3044\u308b Meta \u306f\u4ee5\u4e0b\u306e\u69cb\u9020\u306b\u306a\u3063\u3066\u3044\u308b\u3002\n\n```go:cmd3/command/meta.go\npackage command\n\nimport \"github.com/mitchellh/cli\"\n\n// Meta contain the meta-option that nearly all subcommand inherited.\ntype Meta struct {\n\tUi cli.Ui\n}\n```\n\n\u66f4\u306b `cli.Ui` \u306f interface \u578b\u3067\n\n```go:cli/ui.go\n// Ui is an interface for interacting with the terminal, or \"interface\"\n// of a CLI. This abstraction doesn't have to be used, but helps provide\n// a simple, layerable way to manage user interactions.\ntype Ui interface {\n\t// Ask asks the user for input using the given query. The response is\n\t// returned as the given string, or an error.\n\tAsk(string) (string, error)\n\n\t// AskSecret asks the user for input using the given query, but does not echo\n\t// the keystrokes to the terminal.\n\tAskSecret(string) (string, error)\n\n\t// Output is called for normal standard output.\n\tOutput(string)\n\n\t// Info is called for information related to the previous output.\n\t// In general this may be the exact same as Output, but this gives\n\t// Ui implementors some flexibility with output formats.\n\tInfo(string)\n\n\t// Error is used for any error messages that might appear on standard\n\t// error.\n\tError(string)\n\n\t// Warn is used for any warning messages that might appear on standard\n\t// error.\n\tWarn(string)\n}\n```\n\n\u3068\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u3066\uff0c\u751f\u306e\u6a19\u6e96\u5165\u51fa\u529b\u3092\u96a0\u307a\u3044\u3059\u308b\u3088\u3046\u306b\u306a\u3063\u3066\u3044\u308b\u3002\u3057\u304b\u3057\uff0c\u5b9f\u969b\u306b\u306f\u6a19\u6e96\u5165\u51fa\u529b\u3092\u30b9\u30c8\u30ea\u30fc\u30e0\u3068\u3057\u3066\u76f4\u63a5\u5236\u5fa1\u3057\u305f\u3044\u5834\u5408\u304c\u3042\u308b\u3002\u307e\u305f\uff0c\u30aa\u30d7\u30b7\u30e7\u30f3\u7b49\u3067\u6a19\u6e96\u5165\u51fa\u529b\u3092\u30d5\u30a1\u30a4\u30eb\u306b\u4ed8\u3051\u66ff\u3048\u305f\u3044\u5834\u5408\u3082\u3042\u308b\u306e\u3067\uff0c\u6a19\u6e96\u5165\u51fa\u529b\u3092\u96a0\u307a\u3044\u3059\u308b\u306e\u306f\u5fc5\u305a\u3057\u3082\u5f97\u7b56\u3067\u306f\u306a\u3044\u3002\u3053\u306e\u5834\u5408\u306f\u3044\u3063\u305d\n\n```go:cmd3/command/meta.go\npackage command\n\nimport \"github.com/mitchellh/cli\"\n\n// Meta contain the meta-option that nearly all subcommand inherited.\ntype Meta struct {\n\tUi cli.BasicUi\n}\n```\n\n\u306a\u3069\u3068\u66f8\u304d\u63db\u3048\u305f\u307b\u3046\u304c\u3044\u3044\u304b\u3082\u3057\u308c\u306a\u3044\u3002\u3053\u306e\u8fba\u306f\u304a\u597d\u307f\u3067\u3002\n\n### Like Go command\n\n\u6700\u5f8c\u306b \u201c[Like Go command]\u201d \u30d1\u30bf\u30fc\u30f3\u306e\u30b3\u30fc\u30c9\u3092\u751f\u6210\u3057\u3066\u307f\u308b\u3002\n\n```shell\nC:>gcli new -F go_cmd -c sub:\"Sub-command\" -flag=flag:Bool:\"Enable Flag\" -flag=parm:String:\"Option Parameter\" cmd4\n  Created cmd4\\CHANGELOG.md\n  Created cmd4\\README.md\n  Created cmd4\\sub.go\n  Created cmd4\\sub_test.go\n  Created cmd4\\main.go\n====> Successfully generated cmd4\n```\n\n\u3053\u306e\u30d1\u30bf\u30fc\u30f3\u3067\u306f `Command` \u3092\u30b5\u30d6\u30b3\u30de\u30f3\u30c9\u6bce\u306e context \u3068\u3057\u3066\u5b9a\u7fa9\u3057\u3066\u3044\u308b\u3002\n\n```go:cmd4/main.go\n// A Command is an implementation of a cmd4 command\ntype Command struct {\n\t// Run runs the command.\n\t// The args are the arguments after the command name.\n\tRun func(args []string) int\n\n\t// UsageLine is the one-line usage message.\n\t// The first word in the line is taken to be the command name.\n\tUsageLine string\n\n\t// Short is the short description shown in the 'cmd4 help' output.\n\tShort string\n\n\t// Long is the long message shown in the 'cmd4 help <this-command>' output.\n\tLong string\n\n\t// Flag is a set of flags specific to this command.\n\tFlag flag.FlagSet\n}\n\n// Commands lists the available commands and help topics.\n// The order here is the order in which they are printed by 'cmd4 help'.\nvar commands = []*Command{\n\tcmdSub,\n}\n```\n\n```go:cmd4/sub.go\npackage main\n\nvar cmdSub = &Command{\n\tRun:       runSub,\n\tUsageLine: \"sub \",\n\tShort:     \"Sub-command\",\n\tLong: `\n\n\t`,\n}\n\nfunc init() {\n\t// Set your flag here like below.\n\t// cmdSub.Flag.BoolVar(&flagA, \"a\", false, \"\")\n}\n\n// runSub executes sub command and return exit code.\nfunc runSub(args []string) int {\n\treturn 0\n}\n```\n\nApplication Layer \u306e\u30ed\u30b8\u30c3\u30af\u304c\u5168\u3066 `main` \u30d1\u30c3\u30b1\u30fc\u30b8\u306b\u5c55\u958b\u3055\u308c\u3066\u3044\u308b\u305f\u3081\u30ab\u30b9\u30bf\u30de\u30a4\u30ba\u3057\u3084\u3059\u306e\u304c\u7279\u5fb4\u3002 [mitchellh/cli] \u3067\u5b9f\u88c5\u3057\u3065\u3089\u3044\u69cb\u6210\u306a\u3089 \u201c[Like Go command]\u201d \u30d1\u30bf\u30fc\u30f3\u3092\u8a66\u3057\u3066\u307f\u308b\u306e\u3082\u3044\u3044\u304b\u3082\u3057\u308c\u306a\u3044\u3002\n\n[tcnksm/gcli]: https://github.com/tcnksm/gcli \"The easy way to build Golang command-line application.\"\n[flag]: https://golang.org/pkg/flag/\n[codegangsta/cli]: http://deeeet.com/writing/2014/06/22/cli-init/\n[mitchellh/cli]: https://github.com/mitchellh/cli\n[Like Go command]: https://github.com/golang/go/blob/master/src/cmd/go/main.go#L30#L51\n", "tags": ["golang", "Go", "cli"]}