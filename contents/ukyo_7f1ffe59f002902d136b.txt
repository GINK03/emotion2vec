{"context": " More than 1 year has passed since last update.emscripten\u3067\u30b3\u30de\u30f3\u30c9\u30e9\u30a4\u30f3\u30c4\u30fc\u30eb(ukyo/zlib-asm)\u3092\u5909\u63db\u3057\u305f\u3084\u3064\u306eIO\u90e8\u5206\u3092\u3051\u3063\u3053\u3046\u6700\u9069\u5316\u3068\u3044\u3046\u8a71\u3002\n\n\u60f3\u5b9a\u306e\u8aad\u8005\n\nemscripten\u3067\u30b3\u30de\u30f3\u30c9\u30e9\u30a4\u30f3\u30c4\u30fc\u30eb\u3092\u5909\u63db\u3057\u3066\u308b\nemscripten\u306eFileSystem API\u304c\u4f7f\u3048\u308b\nTypedArray\u304c\u4f7f\u3048\u308b\n\n\n\u666e\u901a\u306b\u5909\u63db\u3059\u308b\u3068\u9045\u3044\uff01\n\n\nModule.stdin,Module.stdout\u3092\u4f7f\u3046\u3068\u30d5\u30a1\u30a4\u30ebIO1\u30d0\u30a4\u30c8\u3054\u3068\u306b\u95a2\u6570\u547c\u3073\u51fa\u3055\u308c\u308b\u306e\u3067\u9045\u3044\uff01\n\u30c7\u30d5\u30a9\u30eb\u30c8\u306eFileSystem\u3067\u3042\u308bMEMFS\u306f\u306a\u305c\u304bArray.prototype.slice\u3092\u4f7f\u3044\u307e\u304f\u308b\u306e\u3067\u9045\u3044\uff01\n\n\n\u306a\u306e\u3067TypedArray\u3060\u3051\u3092\u4f7f\u3046\u30ab\u30b9\u30bf\u30e0FileSystem\u3092\u4f5c\u308b\nFilesystem API \u00b7 kripken/emscripten Wiki\u3068\u304b\u30bd\u30fc\u30b9\u3092\u307f\u306a\u304c\u3089FileSystem\u3092\u4f5c\u308b\u3002emscripten\u3067\u306f\u30ce\u30fc\u30c9\u3068\u3044\u3046\u5f62\u3067\u30d5\u30a1\u30a4\u30eb\u3084\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u3092\u6271\u3063\u3066\u3044\u3066\u3001\u30ce\u30fc\u30c9\u306e\u30d7\u30ed\u30d1\u30c6\u30a3(node_ops,stream_ops,contents)\u3092\u3046\u307e\u3044\u5177\u5408\u306b\u8a2d\u5b9a\u3057\u3066\u3084\u308b\u5fc5\u8981\u304c\u3042\u308b\u3002\u4ee5\u4e0b\u3001zlib\u306b\u5165\u3063\u3066\u308b\u30b5\u30f3\u30d7\u30eb\u306ezpipe\u3092\u5909\u63db\u3057\u305f\u4f8b\u3002\nvar zlib = (function () {\n  var Module = {\n    noInitialRun: true\n  };\n\n  /* \u3053\u3053\u306bemscripten\u304c\u5410\u304d\u51fa\u3057\u305f\u304a\u305e\u307e\u3057\u3044\u3082\u306e\u304c\u5165\u308b */\n\n  // \u5fc5\u8981\u306a\u306e\u3060\u3051\u5b9f\u88c5\n  var MYFS = {\n    // FS.mount\u5b9f\u884c\u6642\u306b\u547c\u3070\u308c\u308b  \n    mount: function (parent, name, mode, rdev) {\n      // 3\u756a\u76ee\u306e\u5f15\u6570\u306f\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u30d5\u30e9\u30b0\u3068\u30d1\u30fc\u30df\u30c3\u30b7\u30e7\u30f3\n      return MYFS.createNode(null, '/', 16384 | 0777, 0);\n    },\n    // \u4f5c\u6210\u3057\u305f\u30ce\u30fc\u30c9\u3092\u64cd\u4f5c\u3059\u308b\u30e1\u30bd\u30c3\u30c9\n    node_ops: {\n      // \u30ce\u30fc\u30c9\u306e\u5c5e\u6027\u3092\u66f8\u304d\u8fbc\u307f(\u4f8b: node.timestamp)\n      setattr: function (node, attr) {\n        if (attr.mode !== undefined) node.mode = attr.mode;\n        if (attr.timestamp !== undefined) node.timestamp = attr.timestamp;\n        if (attr.size !== undefined) {\n          var contents = node.contents;\n          if (contents.length > attr.size) {\n            contents = contents.subarray(0, attr.size);\n          } else {\n            contents = MYFS.expandBuffer(contents, attr.size);\n          }\n          node.contents = contents;\n          node.size = attr.size;\n        }\n      },\n      // \u30ce\u30fc\u30c9\u3092\u691c\u7d22\u3059\u308b\u3093\u3060\u3051\u3069\u3001\u4e0d\u5fc5\u8981\u306a\u306e\u3067MEMFS\u304b\u3089\u62dd\u501f\n      lookup: MEMFS.node_ops.lookup,\n      // \u65b0\u3057\u3044\u30ce\u30fc\u30c9\u3092\u4f5c\u308b\n      mknod: function (parent, name, mode, dev) {\n        return MYFS.createNode(parent, name, mode, dev);\n      }\n    },\n    // IO\u7cfb\u306e\u64cd\u4f5c\u3092\u3059\u308b\u30e1\u30bd\u30c3\u30c9\n    stream_ops: {\n      // \u8aad\u307f\n      read: function (stream, buffer, offset, length, position) {\n        var node = stream.node,\n            contents = node.contents,\n            size = Math.min(contents.length - position, length);\n\n        if (size > 8 && contents.subarray) { // non-trivial, and typed array\n          buffer.set(contents.subarray(position, position + size), offset);\n        } else {\n          for (var i = 0; i < size; i++) {\n            buffer[offset + i] = contents[position + i];\n          }\n        }\n        return size;\n      },\n      // \u66f8\u304d\n      write: function (stream, buffer, offset, length, position, canOwn) {\n        var node = stream.node,\n            contents = node.contents,\n            bufferSize = contents.length,\n            size = position + length;\n        // expand buffer\n        if (bufferSize === 0) {\n          contents = new Uint8Array(size);\n          bufferSize = contents.length;\n        }\n        contents = MYFS.expandBuffer(contents, size);\n        // write\n        contents.set(buffer.subarray(offset, offset + length), position);\n        node.contents = contents;\n        node.size = size;\n\n        return length;\n      }\n    },\n    // \u30ce\u30fc\u30c9\u306e\u4f5c\u6210\u3002node_ops, stream_ops, contents\u3092\u8a2d\u5b9a\u3059\u308b\u5fc5\u8981\u304c\u3042\u308b\n    createNode: function (parent, name, mode, dev) {\n      var node = FS.createNode(parent, name, mode, dev);\n      node.node_ops = MYFS.node_ops;\n      node.stream_ops = MYFS.stream_ops;\n      node.contents = [];\n      node.timestamp = Date.now();\n      if (parent) parent.contents[name] = node;\n      return node;\n    },\n    // FS.createDataFile\u3063\u307d\u304f\u4f7f\u3048\u308b\u3084\u3064\n    createFile: function (parent, name, data, r, w) {\n      var node = FS.createFile(\n        parent,\n        name,\n        {},\n        r,\n        w\n      );\n      node.contents = data;\n      node.node_ops = MYFS.node_ops;\n      node.stream_ops = MYFS.stream_ops;\n      return node;\n    },\n    // \u30d0\u30c3\u30d5\u30a1\u30b5\u30a4\u30ba\u306e\u62e1\u5f35\u3002\u3068\u308a\u3042\u3048\u305a\u500d\u3005\n    expandBuffer: function (buffer, size) {\n      if (buffer.length >= size) return buffer;\n      var bufferSize = buffer.length, _buffer;\n      while (bufferSize < size) bufferSize *= 2;\n      var _buffer = new Uint8Array(bufferSize);\n      _buffer.set(buffer);\n      return _buffer;\n    }\n  };\n\n  // MYFS\u3092\u30de\u30a6\u30f3\u30c8\u3002\u7d76\u5bfe\u5fc5\u8981\uff01  \n  FS.mount(MYFS, {}, '/');\n\n  function $run (args, input) {\n    // \u30d5\u30a1\u30a4\u30eb\u304c\u6b8b\u3063\u3066\u3044\u308b\u5834\u5408\u306f\u524a\u9664\n    try {\n      FS.destroyNode(FS.lookupPath('/input').node);\n    } catch (e) {} \n    try {\n      FS.destroyNode(FS.lookupPath('/output').node);\n    } catch (e) {}\n    // \u30d5\u30a1\u30a4\u30eb\u3092\u4f5c\u6210\n    MYFS.createFile(\n      '/',\n      'input',\n      input,\n      true,\n      true\n    );\n    var outputNode = MYFS.createFile(\n      '/',\n      'output',\n      new Uint8Array(0),\n      true,\n      true\n    );\n    // main\u95a2\u6570\u547c\u3073\u51fa\u3057\n    Module.callMain(args);\n    // \u304a\u3057\u308a\u3092\u524a\u3063\u3066\u8fd4\u3059\n    return outputNode.contents.subarray(0, outputNode.size);\n  }\n\n  return {\n    run: $run,\n    compress: $run.bind(null, []),\n    decompress: $run.bind(null, ['-d'])\n  };\n\n})();\n\n\u3053\u3053\u307e\u3067\u3084\u3063\u3066asm.js\u7528\u306b\u5909\u63db\u3059\u308b\u3068\u3088\u3046\u3084\u304f\u5927\u4f53\u30cd\u30a4\u30c6\u30a3\u30d6\u306e2\u301c3\u500d\u304f\u3089\u3044\u306e\u30b9\u30d4\u30fc\u30c9\u3067\u52d5\u3044\u3066\u304f\u308c\u307e\u3059\u3002\nemscripten\u3067\u30b3\u30de\u30f3\u30c9\u30e9\u30a4\u30f3\u30c4\u30fc\u30eb([ukyo/zlib-asm](https://github.com/ukyo/zlib-asm))\u3092\u5909\u63db\u3057\u305f\u3084\u3064\u306eIO\u90e8\u5206\u3092\u3051\u3063\u3053\u3046\u6700\u9069\u5316\u3068\u3044\u3046\u8a71\u3002\n\n##\u60f3\u5b9a\u306e\u8aad\u8005\n\n* emscripten\u3067\u30b3\u30de\u30f3\u30c9\u30e9\u30a4\u30f3\u30c4\u30fc\u30eb\u3092\u5909\u63db\u3057\u3066\u308b\n* emscripten\u306eFileSystem API\u304c\u4f7f\u3048\u308b\n* TypedArray\u304c\u4f7f\u3048\u308b\n\n##\u666e\u901a\u306b\u5909\u63db\u3059\u308b\u3068\u9045\u3044\uff01\n\n* `Module.stdin`,`Module.stdout`\u3092\u4f7f\u3046\u3068\u30d5\u30a1\u30a4\u30ebIO1\u30d0\u30a4\u30c8\u3054\u3068\u306b\u95a2\u6570\u547c\u3073\u51fa\u3055\u308c\u308b\u306e\u3067\u9045\u3044\uff01\n* \u30c7\u30d5\u30a9\u30eb\u30c8\u306eFileSystem\u3067\u3042\u308b`MEMFS`\u306f\u306a\u305c\u304b`Array.prototype.slice`\u3092\u4f7f\u3044\u307e\u304f\u308b\u306e\u3067\u9045\u3044\uff01\n\n##\u306a\u306e\u3067TypedArray\u3060\u3051\u3092\u4f7f\u3046\u30ab\u30b9\u30bf\u30e0FileSystem\u3092\u4f5c\u308b\n\n[Filesystem API \u00b7 kripken/emscripten Wiki](https://github.com/kripken/emscripten/wiki/Filesystem-API)\u3068\u304b\u30bd\u30fc\u30b9\u3092\u307f\u306a\u304c\u3089FileSystem\u3092\u4f5c\u308b\u3002emscripten\u3067\u306f\u30ce\u30fc\u30c9\u3068\u3044\u3046\u5f62\u3067\u30d5\u30a1\u30a4\u30eb\u3084\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u3092\u6271\u3063\u3066\u3044\u3066\u3001\u30ce\u30fc\u30c9\u306e\u30d7\u30ed\u30d1\u30c6\u30a3(`node_ops`,`stream_ops`,`contents`)\u3092\u3046\u307e\u3044\u5177\u5408\u306b\u8a2d\u5b9a\u3057\u3066\u3084\u308b\u5fc5\u8981\u304c\u3042\u308b\u3002\u4ee5\u4e0b\u3001zlib\u306b\u5165\u3063\u3066\u308b\u30b5\u30f3\u30d7\u30eb\u306ezpipe\u3092\u5909\u63db\u3057\u305f\u4f8b\u3002\n\n```js\nvar zlib = (function () {\n  var Module = {\n    noInitialRun: true\n  };\n\n  /* \u3053\u3053\u306bemscripten\u304c\u5410\u304d\u51fa\u3057\u305f\u304a\u305e\u307e\u3057\u3044\u3082\u306e\u304c\u5165\u308b */\n\n  // \u5fc5\u8981\u306a\u306e\u3060\u3051\u5b9f\u88c5\n  var MYFS = {\n    // FS.mount\u5b9f\u884c\u6642\u306b\u547c\u3070\u308c\u308b  \n    mount: function (parent, name, mode, rdev) {\n      // 3\u756a\u76ee\u306e\u5f15\u6570\u306f\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u30d5\u30e9\u30b0\u3068\u30d1\u30fc\u30df\u30c3\u30b7\u30e7\u30f3\n      return MYFS.createNode(null, '/', 16384 | 0777, 0);\n    },\n    // \u4f5c\u6210\u3057\u305f\u30ce\u30fc\u30c9\u3092\u64cd\u4f5c\u3059\u308b\u30e1\u30bd\u30c3\u30c9\n    node_ops: {\n      // \u30ce\u30fc\u30c9\u306e\u5c5e\u6027\u3092\u66f8\u304d\u8fbc\u307f(\u4f8b: node.timestamp)\n      setattr: function (node, attr) {\n        if (attr.mode !== undefined) node.mode = attr.mode;\n        if (attr.timestamp !== undefined) node.timestamp = attr.timestamp;\n        if (attr.size !== undefined) {\n          var contents = node.contents;\n          if (contents.length > attr.size) {\n            contents = contents.subarray(0, attr.size);\n          } else {\n            contents = MYFS.expandBuffer(contents, attr.size);\n          }\n          node.contents = contents;\n          node.size = attr.size;\n        }\n      },\n      // \u30ce\u30fc\u30c9\u3092\u691c\u7d22\u3059\u308b\u3093\u3060\u3051\u3069\u3001\u4e0d\u5fc5\u8981\u306a\u306e\u3067MEMFS\u304b\u3089\u62dd\u501f\n      lookup: MEMFS.node_ops.lookup,\n      // \u65b0\u3057\u3044\u30ce\u30fc\u30c9\u3092\u4f5c\u308b\n      mknod: function (parent, name, mode, dev) {\n        return MYFS.createNode(parent, name, mode, dev);\n      }\n    },\n    // IO\u7cfb\u306e\u64cd\u4f5c\u3092\u3059\u308b\u30e1\u30bd\u30c3\u30c9\n    stream_ops: {\n      // \u8aad\u307f\n      read: function (stream, buffer, offset, length, position) {\n        var node = stream.node,\n            contents = node.contents,\n            size = Math.min(contents.length - position, length);\n\n        if (size > 8 && contents.subarray) { // non-trivial, and typed array\n          buffer.set(contents.subarray(position, position + size), offset);\n        } else {\n          for (var i = 0; i < size; i++) {\n            buffer[offset + i] = contents[position + i];\n          }\n        }\n        return size;\n      },\n      // \u66f8\u304d\n      write: function (stream, buffer, offset, length, position, canOwn) {\n        var node = stream.node,\n            contents = node.contents,\n            bufferSize = contents.length,\n            size = position + length;\n        // expand buffer\n        if (bufferSize === 0) {\n          contents = new Uint8Array(size);\n          bufferSize = contents.length;\n        }\n        contents = MYFS.expandBuffer(contents, size);\n        // write\n        contents.set(buffer.subarray(offset, offset + length), position);\n        node.contents = contents;\n        node.size = size;\n\n        return length;\n      }\n    },\n    // \u30ce\u30fc\u30c9\u306e\u4f5c\u6210\u3002node_ops, stream_ops, contents\u3092\u8a2d\u5b9a\u3059\u308b\u5fc5\u8981\u304c\u3042\u308b\n    createNode: function (parent, name, mode, dev) {\n      var node = FS.createNode(parent, name, mode, dev);\n      node.node_ops = MYFS.node_ops;\n      node.stream_ops = MYFS.stream_ops;\n      node.contents = [];\n      node.timestamp = Date.now();\n      if (parent) parent.contents[name] = node;\n      return node;\n    },\n    // FS.createDataFile\u3063\u307d\u304f\u4f7f\u3048\u308b\u3084\u3064\n    createFile: function (parent, name, data, r, w) {\n      var node = FS.createFile(\n        parent,\n        name,\n        {},\n        r,\n        w\n      );\n      node.contents = data;\n      node.node_ops = MYFS.node_ops;\n      node.stream_ops = MYFS.stream_ops;\n      return node;\n    },\n    // \u30d0\u30c3\u30d5\u30a1\u30b5\u30a4\u30ba\u306e\u62e1\u5f35\u3002\u3068\u308a\u3042\u3048\u305a\u500d\u3005\n    expandBuffer: function (buffer, size) {\n      if (buffer.length >= size) return buffer;\n      var bufferSize = buffer.length, _buffer;\n      while (bufferSize < size) bufferSize *= 2;\n      var _buffer = new Uint8Array(bufferSize);\n      _buffer.set(buffer);\n      return _buffer;\n    }\n  };\n\n  // MYFS\u3092\u30de\u30a6\u30f3\u30c8\u3002\u7d76\u5bfe\u5fc5\u8981\uff01  \n  FS.mount(MYFS, {}, '/');\n\n  function $run (args, input) {\n    // \u30d5\u30a1\u30a4\u30eb\u304c\u6b8b\u3063\u3066\u3044\u308b\u5834\u5408\u306f\u524a\u9664\n    try {\n      FS.destroyNode(FS.lookupPath('/input').node);\n    } catch (e) {} \n    try {\n      FS.destroyNode(FS.lookupPath('/output').node);\n    } catch (e) {}\n    // \u30d5\u30a1\u30a4\u30eb\u3092\u4f5c\u6210\n    MYFS.createFile(\n      '/',\n      'input',\n      input,\n      true,\n      true\n    );\n    var outputNode = MYFS.createFile(\n      '/',\n      'output',\n      new Uint8Array(0),\n      true,\n      true\n    );\n    // main\u95a2\u6570\u547c\u3073\u51fa\u3057\n    Module.callMain(args);\n    // \u304a\u3057\u308a\u3092\u524a\u3063\u3066\u8fd4\u3059\n    return outputNode.contents.subarray(0, outputNode.size);\n  }\n\n  return {\n    run: $run,\n    compress: $run.bind(null, []),\n    decompress: $run.bind(null, ['-d'])\n  };\n\n})();\n```\n\n\u3053\u3053\u307e\u3067\u3084\u3063\u3066asm.js\u7528\u306b\u5909\u63db\u3059\u308b\u3068\u3088\u3046\u3084\u304f\u5927\u4f53\u30cd\u30a4\u30c6\u30a3\u30d6\u306e2\u301c3\u500d\u304f\u3089\u3044\u306e\u30b9\u30d4\u30fc\u30c9\u3067\u52d5\u3044\u3066\u304f\u308c\u307e\u3059\u3002", "tags": ["JavaScript", "Emscripten"]}