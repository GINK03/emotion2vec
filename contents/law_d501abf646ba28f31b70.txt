{"context": "This post is about how to make hyperlink of words in UILabel.\n\nPurpose\nPersonal Note\n\nDevelopment Environment\n\nOS X El Captain 10.11.2\nXcode Version 8.0\n\n\nLanguage\nSwift 3.0\n\nCode\n    @IBOutlet weak var yourLabel: UILabel!\n    var targetRect: CGRect = CGRect()\n    // Hyper Link\n    func setHyperLink(hyperlinkText: String){\n        let text = \"Hello Qiita Hello Law Hello Guys\"\n\n        yourLabel.backgroundColor = UIColor.clear\n        yourLabel.textAlignment = .left\n\n        let nsText = text as NSString\n        let linkRange = text.range(of: hyperlinkText)\n\n        let style = NSMutableParagraphStyle()\n        style.alignment = NSTextAlignment.left\n\n        let attributedString = NSMutableAttributedString(string: text, attributes: [ NSParagraphStyleAttributeName: style ])\n\n        let firstStart = text.distance(from: text.startIndex, to: linkRange!.lowerBound)\n        let firstLength = hyperlinkText.characters.count\n        let firstRange = NSMakeRange(firstStart, firstLength)\n        let boldFontAttribute = [NSFontAttributeName: UIFont.boldSystemFont(ofSize: 13.0)]\n\n        // all text colour\n        attributedString.addAttribute(NSForegroundColorAttributeName, value: UIColor.black, range: NSMakeRange(0, nsText.length))\n        // link colour\n        attributedString.addAttribute(NSForegroundColorAttributeName, value: UIColor.black, range: firstRange)\n        attributedString.addAttributes(boldFontAttribute, range: firstRange)\n        yourLabel.attributedText = attributedString\n\n        yourLabel.isUserInteractionEnabled = true\n        targetRect = getRect(str: yourLabel.attributedText!, range: firstRange, width: yourLabel.frame.width)\n        yourLabel.addGestureRecognizer(UITapGestureRecognizer(target: self, action: #selector(self.tapText(sender:))))\n    }\n\n    func getRect(str: NSAttributedString, range: NSRange, width: CGFloat) -> CGRect {\n        let storage = NSTextStorage(attributedString: str)\n        let container = NSTextContainer(size: CGSize(width: width, height: CGFloat.greatestFiniteMagnitude))\n        let layoutManager = NSLayoutManager()\n        layoutManager.addTextContainer(container)\n        storage.addLayoutManager(layoutManager)\n        container.lineFragmentPadding = 0\n        let pointer = UnsafeMutablePointer<NSRange>.allocate(capacity: 1)\n        layoutManager.characterRange(forGlyphRange: range, actualGlyphRange: pointer)\n        return layoutManager.boundingRect(forGlyphRange: pointer.move(), in: container)\n    }\n\n    func tapText(sender: UITapGestureRecognizer) {\n        if targetRect.contains(sender.location(in: sender.view)) {\n            // add your action from here\n        }\n    }\n\nHowever, this code is not compatible with Emoji... counting emoji characters is still problematic.\nThis post is about how to make hyperlink of words in UILabel.\n\n#Purpose\nPersonal Note\n\n#Development Environment\n- OS X El Captain 10.11.2\n- Xcode Version 8.0\n\n#Language\nSwift 3.0\n\n#Code\n```swift\n    @IBOutlet weak var yourLabel: UILabel!\n    var targetRect: CGRect = CGRect()\n    // Hyper Link\n    func setHyperLink(hyperlinkText: String){\n        let text = \"Hello Qiita Hello Law Hello Guys\"\n        \n        yourLabel.backgroundColor = UIColor.clear\n        yourLabel.textAlignment = .left\n        \n        let nsText = text as NSString\n        let linkRange = text.range(of: hyperlinkText)\n        \n        let style = NSMutableParagraphStyle()\n        style.alignment = NSTextAlignment.left\n        \n        let attributedString = NSMutableAttributedString(string: text, attributes: [ NSParagraphStyleAttributeName: style ])\n        \n        let firstStart = text.distance(from: text.startIndex, to: linkRange!.lowerBound)\n        let firstLength = hyperlinkText.characters.count\n        let firstRange = NSMakeRange(firstStart, firstLength)\n        let boldFontAttribute = [NSFontAttributeName: UIFont.boldSystemFont(ofSize: 13.0)]\n        \n        // all text colour\n        attributedString.addAttribute(NSForegroundColorAttributeName, value: UIColor.black, range: NSMakeRange(0, nsText.length))\n        // link colour\n        attributedString.addAttribute(NSForegroundColorAttributeName, value: UIColor.black, range: firstRange)\n        attributedString.addAttributes(boldFontAttribute, range: firstRange)\n        yourLabel.attributedText = attributedString\n        \n        yourLabel.isUserInteractionEnabled = true\n        targetRect = getRect(str: yourLabel.attributedText!, range: firstRange, width: yourLabel.frame.width)\n        yourLabel.addGestureRecognizer(UITapGestureRecognizer(target: self, action: #selector(self.tapText(sender:))))\n    }\n    \n    func getRect(str: NSAttributedString, range: NSRange, width: CGFloat) -> CGRect {\n        let storage = NSTextStorage(attributedString: str)\n        let container = NSTextContainer(size: CGSize(width: width, height: CGFloat.greatestFiniteMagnitude))\n        let layoutManager = NSLayoutManager()\n        layoutManager.addTextContainer(container)\n        storage.addLayoutManager(layoutManager)\n        container.lineFragmentPadding = 0\n        let pointer = UnsafeMutablePointer<NSRange>.allocate(capacity: 1)\n        layoutManager.characterRange(forGlyphRange: range, actualGlyphRange: pointer)\n        return layoutManager.boundingRect(forGlyphRange: pointer.move(), in: container)\n    }\n    \n    func tapText(sender: UITapGestureRecognizer) {\n        if targetRect.contains(sender.location(in: sender.view)) {\n            // add your action from here\n        }\n    }\n```\n\nHowever, this code is not compatible with Emoji... counting emoji characters is still problematic.\n\n", "tags": ["Swift", "Swift3.0"]}