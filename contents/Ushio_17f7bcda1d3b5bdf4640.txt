{"context": " More than 1 year has passed since last update.\n\n\u52d5\u6a5f\n65507\u30d0\u30a4\u30c8\u306e\u30c7\u30fc\u30bf\u3092\u307e\u308b\u3063\u3068\u5225\u306a\u3068\u3053\u308d\u306b\u9001\u308a\u305f\u3044\u3002\u3060\u3051\u3069\u305b\u3063\u304b\u304f\u306a\u306e\u3067\u3001\n\u3061\u3087\u3063\u3068\u4f4e\u30ec\u30d9\u30ebAPI\u3067\u904a\u3093\u3067\u898b\u305f\u304f\u306a\u308a\u307e\u3057\u305f\u3002\n\u306a\u306e\u3067\u3061\u3087\u3063\u3068\u4e0d\u6163\u308c\u3067\u3059\u304cudp\u30bd\u30b1\u30c3\u30c8\u901a\u4fe1\u3092\u8a66\u3057\u3066\u898b\u3088\u3046\u3068\u601d\u3044\u307e\u3059\u3002\n\n\u74b0\u5883\nios9.2.1, osx 10.11.1, xcode 7.2.1\u306b\u306a\u308a\u307e\u3059\u3002\n\n\u5b9f\u88c5(ios: \u9001\u4fe1\u5074)\n\n#import \"ViewController.h\"\n\n#include <sys/types.h>\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <arpa/inet.h>\n#include <errno.h>\n\n@implementation ViewController {\n    NSTimer *_timer;\n    int _index;\n}\n\n- (void)viewDidLoad {\n    [super viewDidLoad];\n\n    _timer = [NSTimer scheduledTimerWithTimeInterval:1.0 / 60.0 target:self selector:@selector(tick:) userInfo:nil repeats:YES];\n}\n\n- (void)tick:(id)sender {\n    const int kSendSize = 65507;\n\n    int sock = socket(AF_INET, SOCK_DGRAM, 0);\n\n    struct sockaddr_in addr = {0};\n    addr.sin_family = AF_INET;\n    addr.sin_port = htons(3000);\n    addr.sin_addr.s_addr = inet_addr(\"192.168.10.3\");\n\n    int maxsize = kSendSize;\n    int r = setsockopt(sock, SOL_SOCKET, SO_SNDBUF, &maxsize, sizeof(int));\n    assert(r == 0);\n\n    char bytes[kSendSize] = \"\";\n    sprintf(bytes, \"index = %d\", _index);\n    ssize_t s = sendto(sock, bytes, sizeof(bytes), 0, (struct sockaddr *)&addr, sizeof(addr));\n    if(s != kSendSize) {\n        printf(\"failed to sendto: errno = %d, %s\\n\", errno, strerror(errno));\n    }\n\n    close(sock);\n\n    _index++;\n}\n\n@end \n\n\n\n\u5b9f\u88c5(osx: \u53d7\u4fe1\u5074)\n\n#include <iostream>\n\n#include <sys/types.h>\n#include <sys/socket.h>\n#include <netinet/in.h>\n\nint main(int argc, const char * argv[]) {\n    const int kSendSize = 65507;\n    int sock = socket(AF_INET, SOCK_DGRAM, 0);\n\n    struct sockaddr_in addr = {0};\n    addr.sin_family = AF_INET;\n    addr.sin_port = htons(3000);\n    addr.sin_addr.s_addr = INADDR_ANY;\n\n    bind(sock, (struct sockaddr *)&addr, sizeof(addr));\n\n    for(int i = 0 ; i < 10000 ; ++i) {\n        char buf[kSendSize] = {0};\n        ssize_t r = recv(sock, buf, sizeof(buf), 0);\n        if(r == kSendSize) {\n            printf(\"%s\\n\", buf);\n        }\n    }\n\n    close(sock);\n\n    return 0;\n}\n\n\n\n\nNote\n\u3069\u3046\u3084\u3089setsockopt\u3067\u3001SO_SNDBUF\u3092\u5e83\u3052\u3066\u3042\u3052\u306a\u3044\u3068\u3046\u307e\u304f\u9001\u308c\u306a\u3044\u3088\u3046\u3067\u3057\u305f\u3002\n\u307e\u305f\u3001\u901a\u4fe1\u983b\u5ea6\u3092\u30011.0 / 60.0\u304b\u30891.0 / 120\u306a\u3069\u4e0a\u3052\u3066\u307f\u308b\u3068\u3001\n\u983b\u7e41\u306b\u3001failed to sendto: errno = 55, No buffer space available\n\u3068\u30a8\u30e9\u30fc\u304c\u5410\u304b\u308c\u3066\u901a\u4fe1\u304c\u4e0d\u5b89\u5b9a\u306b\u306a\u308b\u3088\u3046\u3067\u3057\u305f\u3002\n\u5e2f\u57df\u304c\u3044\u3063\u3071\u3044\u306b\u306a\u3063\u305f\u3001\u3068\u3044\u3046\u3053\u3068\u306e\u3088\u3046\u3067\u3059\u3002\n\nwindows (vvvv)\n\u4eca\u65e5\u304b\u3089\u59cb\u3081\u305fvvvv\u306a\u3089\u3001\nios\u304b\u3089\u306eudp\u9001\u4fe1\u3001\u305d\u306e\u307e\u307e\u53d7\u4fe1\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\n\u7d20\u6674\u3089\u3057\u304f\u7c21\u5358\u3067\u3059\n\n\u307e\u3068\u3081\n\u4f4e\u30ec\u30d9\u30ebAPI\u306f\u5f97\u3066\u3057\u3066\u9762\u5012\u3060\u3063\u305f\u308a\u8907\u96d1\u306b\u306a\u308a\u304c\u3061\u3067\u3059\u3002\n\u3057\u304b\u3057\u306a\u304c\u3089\u3001UDP\u306e\u6301\u3064\u3001\u6295\u3052\u3063\u3071\u306a\u3057\u3067\u30d1\u30b1\u30c3\u30c8\u30ed\u30b9\u3092\u6c17\u306b\u3057\u306a\u3044\u3001\u3068\u3044\u3046\u6027\u8cea\u3082\u3042\u3063\u3066\u3001\u6848\u5916\u30b7\u30f3\u30d7\u30eb\u306a\u5b9f\u88c5\u3067\u901a\u4fe1\u3092\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u3066\u5c11\u3057\u9a5a\u3044\u3066\u3044\u307e\u3059\u3002\u4eca\u307e\u3067\u3061\u3087\u3063\u3068\u6bdb\u5acc\u3044\u3057\u3066\u3044\u307e\u3057\u305f\u304c\u3001\u4e0b\u624b\u306b\u9ad8\u30ec\u30d9\u30eb\u306a\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u4f7f\u3046\u3088\u308a\u3082\u3001\u5b9f\u306f\u3053\u3061\u3089\u306e\u307b\u3046\u304c\u30e1\u30ea\u30c3\u30c8\u304c\u5927\u304d\u3044\u5834\u9762\u3082\u3042\u308b\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u3002\n\n\u53c2\u8003\n\u4ee5\u4e0b\u30da\u30fc\u30b8\u7b49\u3092\u53c2\u8003\u306b\u3055\u305b\u3066\u3044\u305f\u3060\u304d\u307e\u3057\u305f\u3002\n\u30bd\u30b1\u30c3\u30c8\u5165\u9580\nhttp://software.aufheben.info/kouza/senior/kouza_socket.html\nUDP\u3092\u4f7f\u3046\nhttp://www.geekpage.jp/programming/linux-network/udp.php\n## \u52d5\u6a5f\n65507\u30d0\u30a4\u30c8\u306e\u30c7\u30fc\u30bf\u3092\u307e\u308b\u3063\u3068\u5225\u306a\u3068\u3053\u308d\u306b\u9001\u308a\u305f\u3044\u3002\u3060\u3051\u3069\u305b\u3063\u304b\u304f\u306a\u306e\u3067\u3001\n\u3061\u3087\u3063\u3068\u4f4e\u30ec\u30d9\u30ebAPI\u3067\u904a\u3093\u3067\u898b\u305f\u304f\u306a\u308a\u307e\u3057\u305f\u3002\n\u306a\u306e\u3067\u3061\u3087\u3063\u3068\u4e0d\u6163\u308c\u3067\u3059\u304cudp\u30bd\u30b1\u30c3\u30c8\u901a\u4fe1\u3092\u8a66\u3057\u3066\u898b\u3088\u3046\u3068\u601d\u3044\u307e\u3059\u3002\n\n## \u74b0\u5883\nios9.2.1, osx 10.11.1, xcode 7.2.1\u306b\u306a\u308a\u307e\u3059\u3002\n\n## \u5b9f\u88c5(ios: \u9001\u4fe1\u5074)\n\n```objc\n\n#import \"ViewController.h\"\n\n#include <sys/types.h>\n#include <sys/socket.h>\n#include <netinet/in.h>\n#include <arpa/inet.h>\n#include <errno.h>\n\n@implementation ViewController {\n    NSTimer *_timer;\n    int _index;\n}\n\n- (void)viewDidLoad {\n    [super viewDidLoad];\n    \n    _timer = [NSTimer scheduledTimerWithTimeInterval:1.0 / 60.0 target:self selector:@selector(tick:) userInfo:nil repeats:YES];\n}\n\n- (void)tick:(id)sender {\n    const int kSendSize = 65507;\n    \n    int sock = socket(AF_INET, SOCK_DGRAM, 0);\n    \n    struct sockaddr_in addr = {0};\n    addr.sin_family = AF_INET;\n    addr.sin_port = htons(3000);\n    addr.sin_addr.s_addr = inet_addr(\"192.168.10.3\");\n    \n    int maxsize = kSendSize;\n    int r = setsockopt(sock, SOL_SOCKET, SO_SNDBUF, &maxsize, sizeof(int));\n    assert(r == 0);\n    \n    char bytes[kSendSize] = \"\";\n    sprintf(bytes, \"index = %d\", _index);\n    ssize_t s = sendto(sock, bytes, sizeof(bytes), 0, (struct sockaddr *)&addr, sizeof(addr));\n    if(s != kSendSize) {\n        printf(\"failed to sendto: errno = %d, %s\\n\", errno, strerror(errno));\n    }\n    \n    close(sock);\n    \n    _index++;\n}\n\n@end \n\n```\n\n## \u5b9f\u88c5(osx: \u53d7\u4fe1\u5074)\n\n```cpp\n\n#include <iostream>\n\n#include <sys/types.h>\n#include <sys/socket.h>\n#include <netinet/in.h>\n\nint main(int argc, const char * argv[]) {\n    const int kSendSize = 65507;\n    int sock = socket(AF_INET, SOCK_DGRAM, 0);\n    \n    struct sockaddr_in addr = {0};\n    addr.sin_family = AF_INET;\n    addr.sin_port = htons(3000);\n    addr.sin_addr.s_addr = INADDR_ANY;\n    \n    bind(sock, (struct sockaddr *)&addr, sizeof(addr));\n    \n    for(int i = 0 ; i < 10000 ; ++i) {\n        char buf[kSendSize] = {0};\n        ssize_t r = recv(sock, buf, sizeof(buf), 0);\n        if(r == kSendSize) {\n            printf(\"%s\\n\", buf);\n        }\n    }\n\n    close(sock);\n    \n    return 0;\n}\n\n\n```\n\n## Note\n\u3069\u3046\u3084\u3089setsockopt\u3067\u3001SO_SNDBUF\u3092\u5e83\u3052\u3066\u3042\u3052\u306a\u3044\u3068\u3046\u307e\u304f\u9001\u308c\u306a\u3044\u3088\u3046\u3067\u3057\u305f\u3002\n\u307e\u305f\u3001\u901a\u4fe1\u983b\u5ea6\u3092\u30011.0 / 60.0\u304b\u30891.0 / 120\u306a\u3069\u4e0a\u3052\u3066\u307f\u308b\u3068\u3001\n\u983b\u7e41\u306b\u3001failed to sendto: errno = 55, No buffer space available\n\u3068\u30a8\u30e9\u30fc\u304c\u5410\u304b\u308c\u3066\u901a\u4fe1\u304c\u4e0d\u5b89\u5b9a\u306b\u306a\u308b\u3088\u3046\u3067\u3057\u305f\u3002\n\u5e2f\u57df\u304c\u3044\u3063\u3071\u3044\u306b\u306a\u3063\u305f\u3001\u3068\u3044\u3046\u3053\u3068\u306e\u3088\u3046\u3067\u3059\u3002\n\n## windows (vvvv)\n\u4eca\u65e5\u304b\u3089\u59cb\u3081\u305fvvvv\u306a\u3089\u3001\nios\u304b\u3089\u306eudp\u9001\u4fe1\u3001\u305d\u306e\u307e\u307e\u53d7\u4fe1\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\n![SnapCrab_NoName_2016-2-27_22-47-50_No-00.png](https://qiita-image-store.s3.amazonaws.com/0/8588/cff49263-9fb3-411b-3be0-75feeffe2cd2.png)\n\n\u7d20\u6674\u3089\u3057\u304f\u7c21\u5358\u3067\u3059\n\n## \u307e\u3068\u3081\n\u4f4e\u30ec\u30d9\u30ebAPI\u306f\u5f97\u3066\u3057\u3066\u9762\u5012\u3060\u3063\u305f\u308a\u8907\u96d1\u306b\u306a\u308a\u304c\u3061\u3067\u3059\u3002\n\u3057\u304b\u3057\u306a\u304c\u3089\u3001UDP\u306e\u6301\u3064\u3001\u6295\u3052\u3063\u3071\u306a\u3057\u3067\u30d1\u30b1\u30c3\u30c8\u30ed\u30b9\u3092\u6c17\u306b\u3057\u306a\u3044\u3001\u3068\u3044\u3046\u6027\u8cea\u3082\u3042\u3063\u3066\u3001\u6848\u5916\u30b7\u30f3\u30d7\u30eb\u306a\u5b9f\u88c5\u3067\u901a\u4fe1\u3092\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u3066\u5c11\u3057\u9a5a\u3044\u3066\u3044\u307e\u3059\u3002\u4eca\u307e\u3067\u3061\u3087\u3063\u3068\u6bdb\u5acc\u3044\u3057\u3066\u3044\u307e\u3057\u305f\u304c\u3001\u4e0b\u624b\u306b\u9ad8\u30ec\u30d9\u30eb\u306a\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u4f7f\u3046\u3088\u308a\u3082\u3001\u5b9f\u306f\u3053\u3061\u3089\u306e\u307b\u3046\u304c\u30e1\u30ea\u30c3\u30c8\u304c\u5927\u304d\u3044\u5834\u9762\u3082\u3042\u308b\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u3002\n\n## \u53c2\u8003\n\n\u4ee5\u4e0b\u30da\u30fc\u30b8\u7b49\u3092\u53c2\u8003\u306b\u3055\u305b\u3066\u3044\u305f\u3060\u304d\u307e\u3057\u305f\u3002\n\n\u30bd\u30b1\u30c3\u30c8\u5165\u9580\nhttp://software.aufheben.info/kouza/senior/kouza_socket.html\n\nUDP\u3092\u4f7f\u3046\nhttp://www.geekpage.jp/programming/linux-network/udp.php\n", "tags": ["iOS", "C", "OSX", "vvvv"]}