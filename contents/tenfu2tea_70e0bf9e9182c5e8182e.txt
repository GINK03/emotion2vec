{"context": "Julia Advent Calendar 2016 \u3067\u3059\u300212\u67082\u65e5\u306e\u57cb\u3081\u8349\u3068\u3057\u3066 12\u670823\u65e5\u306b\u6295\u7a3f\u3057\u307e\u3057\u305f\u3002\u4e00\u4eba\u3067\uff13\u3064\u3082\u66f8\u304f\u306e\u306f\u53cd\u5247\u304b\u3057\u3089\u3093\u3002\n\u3000Julia \u3067\u306f\u3001\u914d\u5217\u306e\u6dfb\u5b57\u3092 1 \u304b\u3089\u6570\u3048\u307e\u3059\u304c (1-based array index)\u3001Julia 0.5 \u3067\u306f\u30011 \u4ee5\u5916\u304b\u3089\u6dfb\u5b57\u3092\u6570\u3048\u308b\u6a5f\u80fd\u304c\u8a66\u9a13\u7684\u306b\u5b9f\u88c5\u3055\u308c\u307e\u3057\u305f\u3002\u8a72\u5f53\u306e\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8 Arrays with custom indices \u306b\u306f\u3001\u3053\u306e\u6a5f\u80fd\u306e\u5229\u7528\u4e0a\u306e\u6ce8\u610f\u3057\u304b\u8a18\u8f09\u3055\u308c\u3066\u3044\u307e\u305b\u3093\u3002\u4f55\u3089\u304b\u306e\u30d1\u30c3\u30b1\u30fc\u30b8\u3092\u901a\u3058\u3066\u4f7f\u3046\u3088\u3046\u3067\u3059\u3002\n\u3000\u3053\u3053\u3067\u306f\u3001OffsetArray \u30d1\u30c3\u30b1\u30fc\u30b8\u3092\u7d39\u4ecb\u3057\u307e\u3059\u3002Qiita\u8a18\u4e8b \u30e9\u30d7\u30e9\u30b9\u65b9\u7a0b\u5f0f \u5185\u306e Fortran 2008 \u30d7\u30ed\u30b0\u30e9\u30e0\u3092 Julia \u306b\u79fb\u690d\u3057\u3066\u307f\u307e\u3057\u305f\u3002\n\u4e0b\u306e Jupyter notebook: https://gist.github.com/anonymous/7437f799d132fb15e4cf0e086d5c16a9\nusing PyPlot\nusing OffsetArrays\nn = 100\n\n# real :: mesh(0:n + 1, 0:n + 1)\n# mesh(0:n + 1, 0:n + 1) # Good\nmesh0 = Array( Float64, n+2, n+2) \nmesh = OffsetArray(mesh0, 0:n+1, 0:n+1)\n\nmask = falses( (n,n) )\n\n## define shape : eccentric pipe   \n#  forall (i = 1:n, j = 1:n, (i - 51)**2 + (j - 51)**2 < 50**2) mask(i, j) = .true.\nfor i = 1:n, j = 1:n\n    if (i - 51)^2 + (j - 51)^2 < 50^2\n        mask[i, j] = true\n    end\nend\n\n# forall (i = 1:n, j = 1:n, (i - 51)**2 + (j - 71)**2 < 10**2) mask(i, j) = .false.\nfor i = 1:n, j = 1:n\n    if (i - 51)^2 + (j - 71)^2 < 10^2\n        mask[i, j] = false\n    end\nend\n\n# mesh=100.0 \nfill!(mesh, 100.0)\n\n# forall (i = 1:n, j = 1:n, (i - 51)**2 + (j - 51)**2 < 50**2) mesh(i, j) = 20.0    \nfor i = 1:n, j = 1:n\n    if (i - 51)^2 + (j - 51)^2 < 50^2\n        mesh[i, j]= 20.0 \n    end\nend\n\n# forall (i = 1:n, j = 1:n, (i - 51)**2 + (j - 71)**2 < 10**2) mesh(i, j) =  0.0\nfor i = 1:n, j = 1:n\n    if (i - 51)^2 + (j - 71)^2 < 10^2\n        mesh[i, j]= 0.0 \n    end\nend\n\n#      do iter = 0, 10000\n#        if (mod(iter, 100) == 0) then        ! character animation\n#          call execute_command_line('cls')  \n#          print '(2g/, (52i1))', ' iteration =', iter, int(mesh(::2,::4) / 10.0)\n#        end if  \n#        forall (i = 1:n, j = 1:n, mask(i, j)) mesh(i, j) = (mesh(i - 1, j) + mesh(i + 1, j) + mesh(i, j - 1) + mesh(i, j + 1)) / 4\n#      end do\n\nfor iter=0:1000\n    if iter % 500 == 0\n        # imshow(mesh[:,:]) # NG\n        # imshow(mesh[0:n+1,0:n+1])  # Good\n        imshow( parent(mesh)) # Good\n    end\n    for i = 1:n, j = 1:n\n        if mask[i, j] \n            mesh[i, j] = (mesh[i - 1, j] + mesh[i + 1, j] + mesh[i, j - 1] + mesh[i, j + 1]) / 4\n        end\n    end\nend\n\n\n\u3000\u8a08\u7b97\u7d50\u679c\u306f Pyplot.imshow \u3067\u8868\u793a\u3057\u3066\u307f\u307e\u3057\u305f\u3002\n\u30002\u6b21\u5143\u914d\u5217 mesh \u304c 0-based index \u3067\u3059\u3002Fortran \u6587\u306e\u4e00\u90e8\u3092\u3001\u30b3\u30e1\u30f3\u30c8\u306b\u6b8b\u3057\u3066\u304a\u304d\u307e\u3057\u305f\u3002\u307b\u3068\u3093\u3069 Fortran \u3068\u5909\u308f\u3089\u306a\u3044\u3067\u3059\u306d\u3002Fortran \u306e forall \u6587\u306e 1\u884c\u306f\u3088\u304f\u3070\u308a\u3059\u304e\u3067\u3001\u4e0a\u306e\u30bd\u30fc\u30b9\u3050\u3089\u3044\u306e\u7c92\u5ea6\u304c\u3001\u79c1\u306f\u597d\u304d\u3067\u3059\u3002 \n\u3000\u4ee5\u4e0b OffsetArray \u306e\u4f7f\u3044\u65b9\u3092\u4e00\u90e8\u7d39\u4ecb\u3057\u307e\u3059\u3002\n\u25a0 OffsetArrays \u30d1\u30c3\u30b1\u30fc\u30b8\u306f Pkg.add(\"OffsetArrays\") \u3067\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3067\u304d\u307e\u3059\u3002\u4f7f\u3046\u306b\u306f using OffsetArrays \u3067\u3059\u3002\n\u25a0 OffsetArray\u3092\u78ba\u4fdd\u3059\u308b\u65b9\u6cd5\u306f\u4e8c\u3064\u3042\u308a\u307e\u3059\u3002\nn=100\n# 1\na = OffsetArray(Float64, 0:n, 0:n) \n# 2\na0 = Array(Float64, n+1, n+1)\na = OffsetArray(a0, 0:n, 0:n) \n\n2\u306f\u3001Julia\u6a19\u6e96\u306e 1-based index\u914d\u5217\u3092\u30010-based\u6dfb\u5b57\u3068\u3057\u3066\u5225\u540d\u3092\u4ed8\u3051\u308b\u4f8b\u3067\u3059\u3002 \u578b\u306f\u3001\u3053\u306e\u3088\u3046\u306b\u8868\u793a\u3055\u308c\u307e\u3059\u3002\na0\n101\u00d7101 Array{Float64,2}:\n\na\nOffsetArrays.OffsetArray{Float64,2,Array{Float64,2}} with indices 0:100\u00d70:100:\n\n\u25a0 OffsetArray \u306f\u3001\u6dfb\u5b57\u3092\u6307\u5b9a\u3057\u3066\u8aad\u307f\u66f8\u304d\u3059\u308b\u5206\u306b\u306f\u3001\u901a\u5e38\u306e\u914d\u5217\u3068\u540c\u3058\u3088\u3046\u306b\u66f8\u304f\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\u25a0 \u914d\u5217\u5168\u8981\u7d20\u3092\u8aad\u3080\u306b\u306f\u3001\u5168\u3066\u306e\u7bc4\u56f2\u3092\u6dfb\u5b57\u3067\u6307\u5b9a\u3057\u307e\u3059\u3002\u4e0a\u306e 2 \u306e\u65b9\u6cd5\u3067\u78ba\u4fdd\u3057\u305f OffsetArray \u3067\u306f parent(a) \u3067\u3082\u3088\u3044\u3067\u3059\u3002\na[0:n,0:n]\nparent(a)\n\n\u3000\u540c\u3058\u5024\u3092 OffsetArray \u306e\u5168\u8981\u7d20\u306b\u4ee3\u5165\u3059\u308b\u306b\u306f fill! \u3092\u4f7f\u3044\u307e\u3059\u3002\nfill!( a, 100.0 )\na[:,:]=100.0 # NG\n\n\u25a0 \u6a19\u6e96\u306e Julia \u306e\u914d\u5217\u64cd\u4f5c\u95a2\u6570\u306e\u591a\u304f\u306f\u3001OffsetArray \u306b\u306f\u5bfe\u5fdc\u3057\u3066\u3044\u306a\u3044\u306e\u3067\u4f7f\u3048\u307e\u305b\u3093\u3002\nArrays with custom indices \u306b\u306f\u3001\u4ee5\u4e0b\u306e\u6ce8\u610f\u66f8\u304d\u304c\u3042\u308a\u307e\u3059\u3002\n- size \u3092\u4f7f\u308f\u306a\u3044\u3002\u4ee3\u308f\u308a\u306b indices \u3092\u4f7f\u3046\n- 1:length(A) \u3092 linearindices(A) \u306b\u7f6e\u63db\u3059\u308b\n- length(A) \u3092 length(linearindices(A)) \u306b\u7f6e\u63db\u3059\u308b\n- Array{Int}(size(B)) \u3092 similar(Array{Int}, indices(B)) \u306b\u7f6e\u63db\u3059\u308b\n- @boundscheck \u3092\u4f7f\u308f\u306a\u3044\n\u25a0 \u305d\u306e\u4ed6\u306e\u8868\u73fe\u306f OffsetArray \u306e test \u3092\u898b\u308b\u3068\u3088\u3044\u3067\u3059\u3002\nhttps://github.com/alsam/OffsetArrays.jl/blob/master/test/runtests.jl\n\u4ee5\u4e0a\u99c6\u3051\u8db3\u3067 OffsetArray \u306e\u4f7f\u3044\u65b9\u3092\u5b9f\u4f8b\u3067\u898b\u307e\u3057\u305f\u30020-based index \u5411\u3051\u306e\u30d1\u30c3\u30b1\u30fc\u30b8\u306f\u3001\u4ed6\u306b\u3082\u3042\u308b\u3088\u3046\u3067\u3059\u3002 Julia \u672c\u4f53\u306e\u6a5f\u80fd\u3068\u3057\u3066\u63d0\u4f9b\u3055\u308c\u308b\u3068\u3046\u308c\u3057\u3044\u3067\u3059\u3002\u3000\n[\u8ffd\u8a18 2016/12/23 22:00]\n\u3000OffsetArray\u884c\u5217\u306e\u4e00\u90e8\u3092\u53d6\u308a\u51fa\u305b\u307e\u3059\u306d\u3002\njulia> using OffsetArrays\n\njulia> m0=reshape( vec(1:16), (4,4))'\n\n4\u00d74 Array{Int64,2}:\n  1   2   3   4\n  5   6   7   8\n  9  10  11  12\n 13  14  15  16\n\njulia> m=OffsetArray(m0,0:3,0:3)\n\nOffsetArrays.OffsetArray{Int64,2,Array{Int64,2}} with indices 0:3\u00d70:3:\n  1   2   3   4\n  5   6   7   8\n  9  10  11  12\n 13  14  15  16\n\njulia> m[1:2,1:2]\n\n2\u00d72 Array{Int64,2}:\n  6   7\n 10  11\n\n[Julia Advent Calendar 2016](http://qiita.com/advent-calendar/2016/julialang) \u3067\u3059\u300212\u67082\u65e5\u306e\u57cb\u3081\u8349\u3068\u3057\u3066 12\u670823\u65e5\u306b\u6295\u7a3f\u3057\u307e\u3057\u305f\u3002\u4e00\u4eba\u3067\uff13\u3064\u3082\u66f8\u304f\u306e\u306f\u53cd\u5247\u304b\u3057\u3089\u3093\u3002\n\n\u3000Julia \u3067\u306f\u3001\u914d\u5217\u306e\u6dfb\u5b57\u3092 1 \u304b\u3089\u6570\u3048\u307e\u3059\u304c (1-based array index)\u3001Julia 0.5 \u3067\u306f\u30011 \u4ee5\u5916\u304b\u3089\u6dfb\u5b57\u3092\u6570\u3048\u308b\u6a5f\u80fd\u304c\u8a66\u9a13\u7684\u306b\u5b9f\u88c5\u3055\u308c\u307e\u3057\u305f\u3002\u8a72\u5f53\u306e\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8 [Arrays with custom indices](http://web.mit.edu/julia_v0.5.0/.julia-3c9d75391c.amd64_ubuntu1404/share/doc/julia/html/devdocs/offset-arrays.html) \u306b\u306f\u3001\u3053\u306e\u6a5f\u80fd\u306e\u5229\u7528\u4e0a\u306e\u6ce8\u610f\u3057\u304b\u8a18\u8f09\u3055\u308c\u3066\u3044\u307e\u305b\u3093\u3002\u4f55\u3089\u304b\u306e\u30d1\u30c3\u30b1\u30fc\u30b8\u3092\u901a\u3058\u3066\u4f7f\u3046\u3088\u3046\u3067\u3059\u3002\n\u3000\u3053\u3053\u3067\u306f\u3001[OffsetArray](https://github.com/alsam/OffsetArrays.jl) \u30d1\u30c3\u30b1\u30fc\u30b8\u3092\u7d39\u4ecb\u3057\u307e\u3059\u3002Qiita\u8a18\u4e8b [\u30e9\u30d7\u30e9\u30b9\u65b9\u7a0b\u5f0f](http://qiita.com/cure_honey/items/b8b106a309e505b654f6) \u5185\u306e Fortran 2008 \u30d7\u30ed\u30b0\u30e9\u30e0\u3092 Julia \u306b\u79fb\u690d\u3057\u3066\u307f\u307e\u3057\u305f\u3002\n\n\u4e0b\u306e Jupyter notebook: https://gist.github.com/anonymous/7437f799d132fb15e4cf0e086d5c16a9\n\n```Julia\nusing PyPlot\nusing OffsetArrays\nn = 100\n\n# real :: mesh(0:n + 1, 0:n + 1)\n# mesh(0:n + 1, 0:n + 1) # Good\nmesh0 = Array( Float64, n+2, n+2) \nmesh = OffsetArray(mesh0, 0:n+1, 0:n+1)\n\nmask = falses( (n,n) )\n\n## define shape : eccentric pipe   \n#  forall (i = 1:n, j = 1:n, (i - 51)**2 + (j - 51)**2 < 50**2) mask(i, j) = .true.\nfor i = 1:n, j = 1:n\n    if (i - 51)^2 + (j - 51)^2 < 50^2\n        mask[i, j] = true\n    end\nend\n\n# forall (i = 1:n, j = 1:n, (i - 51)**2 + (j - 71)**2 < 10**2) mask(i, j) = .false.\nfor i = 1:n, j = 1:n\n    if (i - 51)^2 + (j - 71)^2 < 10^2\n        mask[i, j] = false\n    end\nend\n\n# mesh=100.0 \nfill!(mesh, 100.0)\n\n# forall (i = 1:n, j = 1:n, (i - 51)**2 + (j - 51)**2 < 50**2) mesh(i, j) = 20.0    \nfor i = 1:n, j = 1:n\n    if (i - 51)^2 + (j - 51)^2 < 50^2\n        mesh[i, j]= 20.0 \n    end\nend\n\n# forall (i = 1:n, j = 1:n, (i - 51)**2 + (j - 71)**2 < 10**2) mesh(i, j) =  0.0\nfor i = 1:n, j = 1:n\n    if (i - 51)^2 + (j - 71)^2 < 10^2\n        mesh[i, j]= 0.0 \n    end\nend\n\n#      do iter = 0, 10000\n#        if (mod(iter, 100) == 0) then        ! character animation\n#          call execute_command_line('cls')  \n#          print '(2g/, (52i1))', ' iteration =', iter, int(mesh(::2,::4) / 10.0)\n#        end if  \n#        forall (i = 1:n, j = 1:n, mask(i, j)) mesh(i, j) = (mesh(i - 1, j) + mesh(i + 1, j) + mesh(i, j - 1) + mesh(i, j + 1)) / 4\n#      end do\n\nfor iter=0:1000\n    if iter % 500 == 0\n        # imshow(mesh[:,:]) # NG\n        # imshow(mesh[0:n+1,0:n+1])  # Good\n        imshow( parent(mesh)) # Good\n    end\n    for i = 1:n, j = 1:n\n        if mask[i, j] \n            mesh[i, j] = (mesh[i - 1, j] + mesh[i + 1, j] + mesh[i, j - 1] + mesh[i, j + 1]) / 4\n        end\n    end\nend\n```\n\n![laplace-1.png](https://qiita-image-store.s3.amazonaws.com/0/103217/559f7e83-630e-4006-fdc1-2974fdd12b33.png)\n\n\n\u3000\u8a08\u7b97\u7d50\u679c\u306f `Pyplot.imshow` \u3067\u8868\u793a\u3057\u3066\u307f\u307e\u3057\u305f\u3002\n\u30002\u6b21\u5143\u914d\u5217 `mesh` \u304c 0-based index \u3067\u3059\u3002Fortran \u6587\u306e\u4e00\u90e8\u3092\u3001\u30b3\u30e1\u30f3\u30c8\u306b\u6b8b\u3057\u3066\u304a\u304d\u307e\u3057\u305f\u3002\u307b\u3068\u3093\u3069 Fortran \u3068\u5909\u308f\u3089\u306a\u3044\u3067\u3059\u306d\u3002Fortran \u306e `forall` \u6587\u306e 1\u884c\u306f\u3088\u304f\u3070\u308a\u3059\u304e\u3067\u3001\u4e0a\u306e\u30bd\u30fc\u30b9\u3050\u3089\u3044\u306e\u7c92\u5ea6\u304c\u3001\u79c1\u306f\u597d\u304d\u3067\u3059\u3002 \n\n\u3000\u4ee5\u4e0b `OffsetArray` \u306e\u4f7f\u3044\u65b9\u3092\u4e00\u90e8\u7d39\u4ecb\u3057\u307e\u3059\u3002\n\n\u25a0 OffsetArrays \u30d1\u30c3\u30b1\u30fc\u30b8\u306f `Pkg.add(\"OffsetArrays\")` \u3067\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3067\u304d\u307e\u3059\u3002\u4f7f\u3046\u306b\u306f `using OffsetArrays` \u3067\u3059\u3002\n\n\u25a0 OffsetArray\u3092\u78ba\u4fdd\u3059\u308b\u65b9\u6cd5\u306f\u4e8c\u3064\u3042\u308a\u307e\u3059\u3002\n\n```Julia\nn=100\n# 1\na = OffsetArray(Float64, 0:n, 0:n) \n# 2\na0 = Array(Float64, n+1, n+1)\na = OffsetArray(a0, 0:n, 0:n) \n```\n\n2\u306f\u3001Julia\u6a19\u6e96\u306e 1-based index\u914d\u5217\u3092\u30010-based\u6dfb\u5b57\u3068\u3057\u3066\u5225\u540d\u3092\u4ed8\u3051\u308b\u4f8b\u3067\u3059\u3002 \u578b\u306f\u3001\u3053\u306e\u3088\u3046\u306b\u8868\u793a\u3055\u308c\u307e\u3059\u3002\n\n```Julia\na0\n101\u00d7101 Array{Float64,2}:\n\na\nOffsetArrays.OffsetArray{Float64,2,Array{Float64,2}} with indices 0:100\u00d70:100:\n```\n\n\n\u25a0 OffsetArray \u306f\u3001\u6dfb\u5b57\u3092\u6307\u5b9a\u3057\u3066\u8aad\u307f\u66f8\u304d\u3059\u308b\u5206\u306b\u306f\u3001\u901a\u5e38\u306e\u914d\u5217\u3068\u540c\u3058\u3088\u3046\u306b\u66f8\u304f\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\u25a0 \u914d\u5217\u5168\u8981\u7d20\u3092\u8aad\u3080\u306b\u306f\u3001\u5168\u3066\u306e\u7bc4\u56f2\u3092\u6dfb\u5b57\u3067\u6307\u5b9a\u3057\u307e\u3059\u3002\u4e0a\u306e 2 \u306e\u65b9\u6cd5\u3067\u78ba\u4fdd\u3057\u305f OffsetArray \u3067\u306f `parent(a)` \u3067\u3082\u3088\u3044\u3067\u3059\u3002\n\n```Julia\na[0:n,0:n]\nparent(a)\n```\n\n\u3000\u540c\u3058\u5024\u3092 OffsetArray \u306e\u5168\u8981\u7d20\u306b\u4ee3\u5165\u3059\u308b\u306b\u306f `fill!` \u3092\u4f7f\u3044\u307e\u3059\u3002\n\n```Julia\nfill!( a, 100.0 )\na[:,:]=100.0 # NG\n```\n\n\u25a0 \u6a19\u6e96\u306e Julia \u306e\u914d\u5217\u64cd\u4f5c\u95a2\u6570\u306e\u591a\u304f\u306f\u3001OffsetArray \u306b\u306f\u5bfe\u5fdc\u3057\u3066\u3044\u306a\u3044\u306e\u3067\u4f7f\u3048\u307e\u305b\u3093\u3002\n[Arrays with custom indices](http://web.mit.edu/julia_v0.5.0/.julia-3c9d75391c.amd64_ubuntu1404/share/doc/julia/html/devdocs/offset-arrays.html) \u306b\u306f\u3001\u4ee5\u4e0b\u306e\u6ce8\u610f\u66f8\u304d\u304c\u3042\u308a\u307e\u3059\u3002\n- `size` \u3092\u4f7f\u308f\u306a\u3044\u3002\u4ee3\u308f\u308a\u306b `indices` \u3092\u4f7f\u3046\n- `1:length(A)` \u3092 `linearindices(A)` \u306b\u7f6e\u63db\u3059\u308b\n- `length(A)` \u3092 `length(linearindices(A))` \u306b\u7f6e\u63db\u3059\u308b\n- `Array{Int}(size(B))` \u3092 `similar(Array{Int}, indices(B))` \u306b\u7f6e\u63db\u3059\u308b\n- `@boundscheck` \u3092\u4f7f\u308f\u306a\u3044\n\n\n\u25a0 \u305d\u306e\u4ed6\u306e\u8868\u73fe\u306f OffsetArray \u306e test \u3092\u898b\u308b\u3068\u3088\u3044\u3067\u3059\u3002\nhttps://github.com/alsam/OffsetArrays.jl/blob/master/test/runtests.jl\n \n\u4ee5\u4e0a\u99c6\u3051\u8db3\u3067 `OffsetArray` \u306e\u4f7f\u3044\u65b9\u3092\u5b9f\u4f8b\u3067\u898b\u307e\u3057\u305f\u30020-based index \u5411\u3051\u306e\u30d1\u30c3\u30b1\u30fc\u30b8\u306f\u3001\u4ed6\u306b\u3082\u3042\u308b\u3088\u3046\u3067\u3059\u3002 Julia \u672c\u4f53\u306e\u6a5f\u80fd\u3068\u3057\u3066\u63d0\u4f9b\u3055\u308c\u308b\u3068\u3046\u308c\u3057\u3044\u3067\u3059\u3002\u3000\n\n[\u8ffd\u8a18 2016/12/23 22:00]\n\n\u3000OffsetArray\u884c\u5217\u306e\u4e00\u90e8\u3092\u53d6\u308a\u51fa\u305b\u307e\u3059\u306d\u3002\n\n```Julia\njulia> using OffsetArrays\n\njulia> m0=reshape( vec(1:16), (4,4))'\n\n4\u00d74 Array{Int64,2}:\n  1   2   3   4\n  5   6   7   8\n  9  10  11  12\n 13  14  15  16\n\njulia> m=OffsetArray(m0,0:3,0:3)\n\nOffsetArrays.OffsetArray{Int64,2,Array{Int64,2}} with indices 0:3\u00d70:3:\n  1   2   3   4\n  5   6   7   8\n  9  10  11  12\n 13  14  15  16\n\njulia> m[1:2,1:2]\n\n2\u00d72 Array{Int64,2}:\n  6   7\n 10  11\n```\n\n\n\n\n", "tags": ["Julia", "0.5", "OffsetArray", "\u914d\u5217", "\u6570\u5024\u8a08\u7b97"]}