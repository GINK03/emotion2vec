{"context": "OTP\u3068\u3044\u3046\u304b\u3001gen_server \u306e\u6982\u8981\u3092\u63b4\u3080\u305f\u3081\u306e\u30e1\u30e2\n\n\u6c4e\u7528\u30b5\u30fc\u30d0\u30fc\u30e2\u30b8\u30e5\u30fc\u30eb\u3092\u4f5c\u308b\n\n\u30b5\u30fc\u30d0\u30fc\u5171\u901a\u90e8\u5206\n\n-module(my_server).\n-export([start/2, start_link/2, call/2, cast/2, reply/2]).\n\n%%% \u516c\u958bAPI\nstart(Module, InitialState) ->\n    spawn(fun() -> init(Module, InitialState) end).\n\nstart_link(Module, InitialState) ->\n    spawn_link(fun() -> init(Module, InitialState) end).\n\ncall(Pid, Msg) ->\n    Ref = erlang:monitor(process, Pid),\n    Pid ! {sync, self(), Ref, Msg},\n    receive\n        {Ref, Reply} ->\n            erlang:demonitor(Ref, [flush]),\n            Reply;\n        {'DOWN', Ref, process, Pid, Reason} ->\n            erlang:error(Reason)\n    after 5000 ->\n        erlang:error(timeout)\n    end.\n\ncast(Pid, Msg) ->\n    Pid ! {async, Msg},\n    ok.\n\nreply({Pid, Ref}, Reply) ->\n    Pid ! {Ref, Reply}.\n\n%%% \u30d7\u30e9\u30a4\u30d9\u30fc\u30c8\u95a2\u6570\ninit(Module, InitialState) ->\n    loop(Module, Module:init(InitialState)).\n\nloop(Module, State) ->\n    receive\n        {async, Msg} ->\n             loop(Module, Module:handle_cast(Msg, State));\n        {sync, Pid, Ref, Msg} ->\n             loop(Module, Module:handle_call(Msg, {Pid, Ref}, State))\n    end.\n\n\n\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u30b3\u30fc\u30c9\n\n-module(kitty_server2).\n\n-export([start_link/0, order_cat/4, return_cat/2, close_shop/1]).\n-export([init/1, handle_call/3, handle_cast/2]).\n\n-record(cat, {name, color=green, description}).\n\n%%% \u30af\u30e9\u30a4\u30a2\u30f3\u30c8API\nstart_link() -> my_server:start_link(?MODULE, []).\n\n%% \u540c\u671f\u547c\u3073\u51fa\u3057\norder_cat(Pid, Name, Color, Description) ->\n    my_server:call(Pid, {order, Name, Color, Description}).\n\n%% \u975e\u540c\u671f\u547c\u3073\u51fa\u3057\nreturn_cat(Pid, Cat = #cat{}) ->\n    my_server:cast(Pid, {return, Cat}).\n\n%% \u540c\u671f\u547c\u3073\u51fa\u3057\nclose_shop(Pid) ->\n    my_server:call(Pid, terminate).\n\n%%% \u30b5\u30fc\u30d0\u30fc\u95a2\u6570\ninit([]) -> []. %% \u3053\u3053\u3067\u306f\u4f55\u3082\u3057\u306a\u3044\n\nhandle_call({order, Name, Color, Description}, From, Cats) ->\n    if Cats =:= [] ->\n        my_server:reply(From, make_cat(Name, Color, Description)),\n        Cats;\n       Cats =/= [] ->\n        my_server:reply(From, hd(Cats)),\n        tl(Cats)\n    end;\n\nhandle_call(terminate, From, Cats) ->\n    my_server:reply(From, ok),\n    terminate(Cats).\n\nhandle_cast({return, Cat = #cat{}}, Cats) ->\n    [Cat|Cats].\n\n%%% \u30d7\u30e9\u30a4\u30d9\u30fc\u30c8\u95a2\u6570\nmake_cat(Name, Col, Desc) ->\n    #cat{name=Name, color=Col, description=Desc}.\n\nterminate(Cats) ->\n    [io:format(\"~p was set free.~n\",[C#cat.name]) || C <- Cats],\n    exit(normal).\n\n\nmy_server, kitty_server2 \u306e\u6982\u8981\n\nmy_server.erl \u306b\u306f\u8efd\u91cf\u30d7\u30ed\u30bb\u30b9\u5316\u3055\u308c\u308b\u30e1\u30a4\u30f3\u30eb\u30fc\u30d7(loop\u95a2\u6570)\u304c\u3042\u308b\n\n\nmy_server:call, my_server:cast \u306f\u3053\u306e\u30e1\u30a4\u30f3\u30eb\u30fc\u30d7\u306ePid\u306b\u5bfe\u3057\u3066send\u3059\u308b\n\u30e1\u30a4\u30f3\u30eb\u30fc\u30d7\u306f\u6e21\u3055\u308c\u305f\u5f15\u6570\u3092\u5143\u306b\u30b5\u30fc\u30d0\u30fc\u95a2\u6570\u3067\u3042\u308b handle_cast, handle_call \u3092\u547c\u3073\u51fa\u3059\n\n\nkitty_server2 \u306f\u30b5\u30fc\u30d0\u30fc\u306e\u6a5f\u80fd\u3092\u547c\u3073\u51fa\u3059\u305f\u3081\u306e\u516c\u958bAPI\u3068\u3001\u5b9f\u969b\u306b\u51e6\u7406\u3055\u308c\u308bhandle_cast, handle_call \u304c\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u308b\n\n\nkitty_server2\u81ea\u4f53\u306f\u30e1\u30a4\u30f3\u30eb\u30fc\u30d7\u3092\u6301\u305f\u306a\u3044\n\n\n\u30e1\u30a4\u30f3\u30eb\u30fc\u30d7\u3084\u30b5\u30fc\u30d0\u30fc\u306e\u72b6\u614b\u4fdd\u5b58\u306f my_server\u30e2\u30b8\u30e5\u30fc\u30eb\u304c\u6301\u3064\n\n\nkitty_server2 \u306f\u30b5\u30fc\u30d0\u30fc\u306b\u5b9f\u969b\u306b\u63d0\u4f9b\u3057\u305f\u3044\u6a5f\u80fd\u306e\u307f\u3092\u5b9a\u7fa9\u3059\u308c\u3070\u826f\u3044\n\n\n\u30b5\u30fc\u30d0\u30fc\u3068\u3057\u3066\u6a5f\u80fd\u306f my_server\u30e2\u30b8\u30e5\u30fc\u30eb\u304c\u6301\u3064\n\n\n\n\n\u3053\u306e my_server \u30e2\u30b8\u30e5\u30fc\u30eb\u304cOTP\u306e gen_server \u306e\u6982\u8981\u7684\u30e2\u30c7\u30eb\u3068\u306a\u308b\n\n\n\u52d5\u4f5c\u30a4\u30e1\u30fc\u30b8\n\nmy_server, kitty_server2 \u306f\u5927\u4f53\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u95a2\u4fc2\u3001\u5f79\u5272\u5206\u62c5\u3068\u306a\u308b\u3002\n\n\n\nOTP\u3068\u3044\u3046\u304b\u3001gen_server \u306e\u6982\u8981\u3092\u63b4\u3080\u305f\u3081\u306e\u30e1\u30e2\n\n\n## \u6c4e\u7528\u30b5\u30fc\u30d0\u30fc\u30e2\u30b8\u30e5\u30fc\u30eb\u3092\u4f5c\u308b\n\n- \u30b5\u30fc\u30d0\u30fc\u5171\u901a\u90e8\u5206\n\n```erlang\n-module(my_server).\n-export([start/2, start_link/2, call/2, cast/2, reply/2]).\n\n%%% \u516c\u958bAPI\nstart(Module, InitialState) ->\n    spawn(fun() -> init(Module, InitialState) end).\n\nstart_link(Module, InitialState) ->\n    spawn_link(fun() -> init(Module, InitialState) end).\n\ncall(Pid, Msg) ->\n    Ref = erlang:monitor(process, Pid),\n    Pid ! {sync, self(), Ref, Msg},\n    receive\n        {Ref, Reply} ->\n            erlang:demonitor(Ref, [flush]),\n            Reply;\n        {'DOWN', Ref, process, Pid, Reason} ->\n            erlang:error(Reason)\n    after 5000 ->\n        erlang:error(timeout)\n    end.\n\ncast(Pid, Msg) ->\n    Pid ! {async, Msg},\n    ok.\n\nreply({Pid, Ref}, Reply) ->\n    Pid ! {Ref, Reply}.\n\n%%% \u30d7\u30e9\u30a4\u30d9\u30fc\u30c8\u95a2\u6570\ninit(Module, InitialState) ->\n    loop(Module, Module:init(InitialState)).\n\nloop(Module, State) ->\n    receive\n        {async, Msg} ->\n             loop(Module, Module:handle_cast(Msg, State));\n        {sync, Pid, Ref, Msg} ->\n             loop(Module, Module:handle_call(Msg, {Pid, Ref}, State))\n    end.\n```\n\n- \u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u30b3\u30fc\u30c9\n\n\n```erlang\n-module(kitty_server2).\n\n-export([start_link/0, order_cat/4, return_cat/2, close_shop/1]).\n-export([init/1, handle_call/3, handle_cast/2]).\n\n-record(cat, {name, color=green, description}).\n\n%%% \u30af\u30e9\u30a4\u30a2\u30f3\u30c8API\nstart_link() -> my_server:start_link(?MODULE, []).\n\n%% \u540c\u671f\u547c\u3073\u51fa\u3057\norder_cat(Pid, Name, Color, Description) ->\n    my_server:call(Pid, {order, Name, Color, Description}).\n\n%% \u975e\u540c\u671f\u547c\u3073\u51fa\u3057\nreturn_cat(Pid, Cat = #cat{}) ->\n    my_server:cast(Pid, {return, Cat}).\n\n%% \u540c\u671f\u547c\u3073\u51fa\u3057\nclose_shop(Pid) ->\n    my_server:call(Pid, terminate).\n\n%%% \u30b5\u30fc\u30d0\u30fc\u95a2\u6570\ninit([]) -> []. %% \u3053\u3053\u3067\u306f\u4f55\u3082\u3057\u306a\u3044\n\nhandle_call({order, Name, Color, Description}, From, Cats) ->\n    if Cats =:= [] ->\n        my_server:reply(From, make_cat(Name, Color, Description)),\n        Cats;\n       Cats =/= [] ->\n        my_server:reply(From, hd(Cats)),\n        tl(Cats)\n    end;\n\nhandle_call(terminate, From, Cats) ->\n    my_server:reply(From, ok),\n    terminate(Cats).\n\nhandle_cast({return, Cat = #cat{}}, Cats) ->\n    [Cat|Cats].\n\n%%% \u30d7\u30e9\u30a4\u30d9\u30fc\u30c8\u95a2\u6570\nmake_cat(Name, Col, Desc) ->\n    #cat{name=Name, color=Col, description=Desc}.\n\nterminate(Cats) ->\n    [io:format(\"~p was set free.~n\",[C#cat.name]) || C <- Cats],\n    exit(normal).\n```\n\n### my_server, kitty_server2 \u306e\u6982\u8981\n\n- my_server.erl \u306b\u306f\u8efd\u91cf\u30d7\u30ed\u30bb\u30b9\u5316\u3055\u308c\u308b\u30e1\u30a4\u30f3\u30eb\u30fc\u30d7(loop\u95a2\u6570)\u304c\u3042\u308b\n\t- my_server:call, my_server:cast \u306f\u3053\u306e\u30e1\u30a4\u30f3\u30eb\u30fc\u30d7\u306ePid\u306b\u5bfe\u3057\u3066send\u3059\u308b\n\t- \u30e1\u30a4\u30f3\u30eb\u30fc\u30d7\u306f\u6e21\u3055\u308c\u305f\u5f15\u6570\u3092\u5143\u306b\u30b5\u30fc\u30d0\u30fc\u95a2\u6570\u3067\u3042\u308b handle_cast, handle_call \u3092\u547c\u3073\u51fa\u3059\n- kitty_server2 \u306f\u30b5\u30fc\u30d0\u30fc\u306e\u6a5f\u80fd\u3092\u547c\u3073\u51fa\u3059\u305f\u3081\u306e\u516c\u958bAPI\u3068\u3001\u5b9f\u969b\u306b\u51e6\u7406\u3055\u308c\u308bhandle_cast, handle_call \u304c\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u308b\n\t- kitty_server2\u81ea\u4f53\u306f\u30e1\u30a4\u30f3\u30eb\u30fc\u30d7\u3092\u6301\u305f\u306a\u3044\n\t\t- \u30e1\u30a4\u30f3\u30eb\u30fc\u30d7\u3084\u30b5\u30fc\u30d0\u30fc\u306e\u72b6\u614b\u4fdd\u5b58\u306f my_server\u30e2\u30b8\u30e5\u30fc\u30eb\u304c\u6301\u3064\n\t- kitty_server2 \u306f\u30b5\u30fc\u30d0\u30fc\u306b\u5b9f\u969b\u306b\u63d0\u4f9b\u3057\u305f\u3044\u6a5f\u80fd\u306e\u307f\u3092\u5b9a\u7fa9\u3059\u308c\u3070\u826f\u3044\n\t\t- \u30b5\u30fc\u30d0\u30fc\u3068\u3057\u3066\u6a5f\u80fd\u306f my_server\u30e2\u30b8\u30e5\u30fc\u30eb\u304c\u6301\u3064\n- \u3053\u306e my_server \u30e2\u30b8\u30e5\u30fc\u30eb\u304cOTP\u306e gen_server \u306e\u6982\u8981\u7684\u30e2\u30c7\u30eb\u3068\u306a\u308b\n\n### \u52d5\u4f5c\u30a4\u30e1\u30fc\u30b8\n- my_server, kitty_server2 \u306f\u5927\u4f53\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u95a2\u4fc2\u3001\u5f79\u5272\u5206\u62c5\u3068\u306a\u308b\u3002\n\n![my_server_and_kitty_server2.png](https://qiita-image-store.s3.amazonaws.com/0/4428/3d934168-2866-359a-dc80-f4195599efcb.png \"my_server_and_kitty_server2.png\")\n\n", "tags": ["Erlang", "\u3059\u3054\u3044E\u672c"]}