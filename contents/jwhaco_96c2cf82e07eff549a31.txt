{"context": " More than 1 year has passed since last update.( Scala Advent Calendar 2013 \u306e 20 \u65e5\u76ee\u3067\u3059 ) \n\nsbt \u306e\u30bf\u30b9\u30af\u3092\u5b9a\u7fa9\u3059\u308b\n\u3053\u3093\u306a\u30b3\u30fc\u30c9\u3092\u8003\u3048\u3066\u307f\u307e\u3059\u3002\n\nlist1\n  def unreadableSettings = {\n    val hoge1 = TaskKey[Unit](\"hoge1\") in Compile\n    val hoge2 = TaskKey[Unit](\":hoge2\") in Compile\n    val hoge3 = TaskKey[Unit](\":hoge3\") in Compile\n\n    val fuga1 = TaskKey[Unit](\":fuga1\") in Compile\n    val fuga2 = TaskKey[Unit](\":fuga2\") in Compile\n    Seq(\n      hoge1 := println(\"hoge1!\"),\n      hoge2 := println(\"hoge2!\"),\n      hoge3 := println(\"hoge3!\"),\n\n      fuga1 := println(\"fuga1!\"),\n      fuga2 := println(\"fuga2!\"),\n\n      fuga1 <<= fuga1 dependsOn fuga2,\n      fuga1 <<= fuga1 andFinally println(\"fuga1 is over!\"),\n\n      hoge1 <<= hoge1 dependsOn fuga1,\n      hoge1 <<= hoge1 dependsOn hoge2,\n      hoge1 <<= hoge1 dependsOn hoge3,\n      hoge1 <<= hoge1 andFinally println(\"hoge1 is over!\")\n    )\n  }\n\n\n\u3084\u3084\u6063\u610f\u7684\u306a\u4f8b\u3067\u3059\u304c\u305d\u3053\u306f\u6c17\u306b\u3057\u3066\u306f\u3044\u3051\u307e\u305b\u3093\u3002\n\n\u3068\u308a\u3042\u3048\u305a\u5b9f\u884c\u3060\n\nlist2\n> hoge1\nhoge3!\nhoge2!\nfuga2!\nfuga1!\nfuga1 is over!\nhoge1!\nhoge1 is over!\n\n\n\u3075\u3080\u308a\u2026\uff1f\n\n\u89e3\u8aad\u3059\u308b\nlist1 \u3092\u8aad\u307f\u4e0b\u3057\u3066\u307f\u308b\u3068\u4e0b\u8a18\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002\n\nfuga1 \u306e\u524d\u306b fuga2 \u3092\u5b9f\u884c\nfuga1 \u304c\u7d42\u308f\u3063\u305f\u3089 \"fuga1 is over!\" \u3092\u51fa\u529b\nhoge1 \u306e\u524d\u306b fuga1 \u3092\u5b9f\u884c\n\u305d\u306e\u524d\u306b hoge2 \u3092\u5b9f\u884c\n\u305d\u306e\u524d\u306b hoge3 \u3092\u5b9f\u884c\nhoge1 \u304c\u7d42\u308f\u3063\u305f\u3089 \"hoge1 is over!\" \u3092\u51fa\u529b\n\n\u306a\u308b\u307b\u3069\u308f\u304b\u3089\u3093\n\n\u3053\u3093\u306a\u306e\u8aad\u3080\u306e\u3082\u66f8\u304f\u306e\u3082\u7121\u7406\n\u306a\u306e\u3067 DSL \u3092\u4f5c\u3063\u3066\u307f\u307e\u3057\u305f\u3002\n\nlist2\n  def readableSettings = new TaskSettings{\n    def foo =\n      define(\"foo1\") as (\n        call to {\n          println(\"foo3!\")\n          println(\"foo2!\")\n        },\n        bind (\n          call to println(\"bar2!\"),\n          call to println(\"bar1!\")\n        ) ensure {\n          println(\"bar1 is over!\")\n        },\n        call to println(\"foo1!\")\n      ) ensure {\n        println(\"foo1 is over!\")\n      }\n  }\n\n\n\u3053\u308c\u3067\u3084\u3063\u3068\u5b89\u5fc3\u3057\u3066\u901a\u5e38\u306e\u9010\u6b21\u51e6\u7406\u306e\u3088\u3046\u306b\u8aad\u3081\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3057\u305f\u3002\n\u3042\u3068\u306f\u3044\u3064\u3082\u3069\u304a\u308a ProjectSetting \u306b\u52a0\u3048\u3066\u3057\u307e\u3048\u3070\u6e96\u5099\u5b8c\u4e86\u3067\u3059\u3002\nsettings = Project.defaultSettings ++ readableSettings.foo.toSeq\n\nfoo1 \u3068\u3044\u3046\u30bf\u30b9\u30af\u306e\u51fa\u529b\u3092\u78ba\u8a8d\u3057\u3066\u307f\u307e\u3059\u3002\n> foo1\nfoo3!\nfoo2!\nbar2!\nbar1!\nbar1 is over!\nfoo1!\nfoo1 is over!\n\n\u8a08\u753b\u901a\u308a\uff08\uff84\uff9e\uff94\uff67\n\n\u307e\u3068\u3081\n\nsbt \u3067\u306f\u8907\u6570\u306e\u30bf\u30b9\u30af\u304b\u3089\u4f9d\u5b58\u95a2\u4fc2\u306e\u3042\u308b\u65b0\u305f\u306a\u30bf\u30b9\u30af\u3092\u3064\u304f\u308b\u306e\u304c\u3068\u3066\u3082\u5927\u5909 ( \u4e26\u5217\u5b9f\u884c\u306f\u7c21\u5358 )\nDSL \u3067\u8efd\u304f\u30e9\u30c3\u30d7\u3059\u308b\u3068\u7d20\u76f4\u306a\u30b3\u30fc\u30c9\u304c\u66f8\u3051\u308b\u3088\u3046\u306b\u306a\u308b\n\n\n\u304a\u307e\u3051\n\n\u958b\u767a\u4e2d\u306e\u3042\u308b\u3042\u308b\u8981\u4ef6\n\u3068\u3057\u3066\u300c\u3053\u306e\u4e00\u9023\u306e bar \u51fa\u529b\u306f\u5358\u4f53\u3067\u5b9f\u884c\u3067\u304d\u308b\u30bf\u30b9\u30af\u306b\u3057\u305f\u3044\u300d\u307f\u305f\u3044\u306a\u30b1\u30fc\u30b9\u304c\u3088\u304f\u3042\u308a\u307e\u3059\u304c\u3001\u3053\u306e DSL \u3067\u306f\u305d\u308c\u3082\u8003\u616e\u3055\u308c\u3066\u3044\u307e\u3059\u3002\nbind \u306e\u90e8\u5206\u3092\u4e0b\u8a18\u306e\u3088\u3046\u306b\u7f6e\u304d\u63db\u3048\u308b\u3060\u3051\u3067\ndefine(\"bar1\") as (\n\n\u305d\u306e\u6642\u70b9\u3067 bar1 \u3068\u3044\u3046\u30bf\u30b9\u30af\u304c\u5b9a\u7fa9\u3055\u308c\u307e\u3059\u3002\n> bar1\nbar2!\nbar1!\nbar1 is over!\n\n\u30b7\u30f3\u30d7\u30eb\u3067\u3059\u306d\u3002\n ( \u65b0\u305f\u306b\u5916\u306b TaskKey \u3092\u4f5c\u3063\u3066\u305d\u308c\u3092\u767b\u9332\u3057\u3066 dependsOn \u3067\u3064\u306a\u3052\u308b\u624b\u9593\u306f\u3082\u3046\u5fc5\u8981\u3042\u308a\u307e\u305b\u3093 )\n\n\u65e2\u5b58\u306e TaskKey \u3092\u7d44\u307f\u8fbc\u3080\n\u3053\u3068\u3082\u3067\u304d\u307e\u3059\u3002\n\u3053\u308c\u306f \"bar2!\" \u3092\u51fa\u529b\u3057\u305f\u76f4\u5f8c\u306b clean \u30bf\u30b9\u30af\u3092\u5b9f\u884c\u3059\u308b\u4f8b\u3067\u3059\u3002\n        bind (\n          call to println(\"bar2!\"),\n          task of clean,\n          call to println(\"bar1!\")\n        ) ensure {\n          println(\"bar1 is over!\")\n        },\n\n\nDSL \u306e\u4e2d\u8eab\n\nlist3\nclass TaskSettings extends SettingsAlias{\n\n  def bind(label: String)(binders: Binder*): Multiple = {\n    val key = TaskKey[Unit](label) in Compile\n    val settings = binders.reverse.map(_ dependenciesFrom key).flatten\n    new Multiple(key, settings)\n  }\n  def bind(binders: Binder*): Multiple = bind(createLabel)(binders:_*)\n\n  def execute[A](f: => A) = {\n    val key = TaskKey[Unit](createLabel) in Compile\n    new Procedure(key, () => f)\n  }\n  def register[A](taskKey: TaskKey[A]) = new KeyStore(taskKey)\n\n  import java.util.UUID\n  private def createLabel = \"ts:dummy:\" + UUID.randomUUID\n\n  private type Settings = Seq[Project.Setting[Task[Unit]]]\n\n  trait Binder {\n    def taskKey: TaskKey[_]\n    def dependenciesFrom(key: TaskKey[Unit]): Settings\n    def connectFrom(key: TaskKey[Unit]) = Seq(key <<= key dependsOn taskKey)\n  }\n  class KeyStore[A](val taskKey: TaskKey[A]) extends Binder {\n    def dependenciesFrom(key: TaskKey[Unit]) = connectFrom(key)\n  }\n  class Procedure(val taskKey: TaskKey[Unit], f: () => Unit) extends Binder {\n    def dependenciesFrom(key: TaskKey[Unit]) = Seq(taskKey := f()) ++ connectFrom(key)\n  }\n  class Multiple(val taskKey: TaskKey[Unit], settings: Settings) extends Binder{\n    def ensure[A](f: => A) = {\n      new Multiple(taskKey, settings ++ Seq(taskKey <<= taskKey andFinally f))\n    }\n    def dependenciesFrom(key: TaskKey[Unit]) = toSeq ++ connectFrom(key)\n    def toSeq = Seq(taskKey := {}) ++ settings\n  }\n}\n\ntrait SettingsAlias { self: TaskSettings =>\n  def define(label: String) = new {\n    def as (binders: Binder*) = bind(label)(binders:_*)\n  }\n  def call = new {\n    def to (f: => Unit) = execute(f)\n  }\n  def task = new {\n    def of (taskKey: TaskKey[_]) = register(taskKey)\n  }\n}\n\n\n( [Scala Advent Calendar 2013](http://qiita.com/advent-calendar/2013/scala) \u306e 20 \u65e5\u76ee\u3067\u3059 ) \n\n# sbt \u306e\u30bf\u30b9\u30af\u3092\u5b9a\u7fa9\u3059\u308b\n\n\u3053\u3093\u306a\u30b3\u30fc\u30c9\u3092\u8003\u3048\u3066\u307f\u307e\u3059\u3002\n\n```scala:list1\n  def unreadableSettings = {\n    val hoge1 = TaskKey[Unit](\"hoge1\") in Compile\n    val hoge2 = TaskKey[Unit](\":hoge2\") in Compile\n    val hoge3 = TaskKey[Unit](\":hoge3\") in Compile\n\n    val fuga1 = TaskKey[Unit](\":fuga1\") in Compile\n    val fuga2 = TaskKey[Unit](\":fuga2\") in Compile\n    Seq(\n      hoge1 := println(\"hoge1!\"),\n      hoge2 := println(\"hoge2!\"),\n      hoge3 := println(\"hoge3!\"),\n\n      fuga1 := println(\"fuga1!\"),\n      fuga2 := println(\"fuga2!\"),\n\n      fuga1 <<= fuga1 dependsOn fuga2,\n      fuga1 <<= fuga1 andFinally println(\"fuga1 is over!\"),\n\n      hoge1 <<= hoge1 dependsOn fuga1,\n      hoge1 <<= hoge1 dependsOn hoge2,\n      hoge1 <<= hoge1 dependsOn hoge3,\n      hoge1 <<= hoge1 andFinally println(\"hoge1 is over!\")\n    )\n  }\n```\n\n\u3084\u3084\u6063\u610f\u7684\u306a\u4f8b\u3067\u3059\u304c\u305d\u3053\u306f\u6c17\u306b\u3057\u3066\u306f\u3044\u3051\u307e\u305b\u3093\u3002\n\n## \u3068\u308a\u3042\u3048\u305a\u5b9f\u884c\u3060\n\n```:list2\n> hoge1\nhoge3!\nhoge2!\nfuga2!\nfuga1!\nfuga1 is over!\nhoge1!\nhoge1 is over!\n```\n\n\u3075\u3080\u308a\u2026\uff1f\n\n# \u89e3\u8aad\u3059\u308b\n\nlist1 \u3092\u8aad\u307f\u4e0b\u3057\u3066\u307f\u308b\u3068\u4e0b\u8a18\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002\n\n* fuga1 \u306e\u524d\u306b fuga2 \u3092\u5b9f\u884c\n* fuga1 \u304c\u7d42\u308f\u3063\u305f\u3089 \"fuga1 is over!\" \u3092\u51fa\u529b\n* hoge1 \u306e\u524d\u306b fuga1 \u3092\u5b9f\u884c\n* \u305d\u306e\u524d\u306b hoge2 \u3092\u5b9f\u884c\n* \u305d\u306e\u524d\u306b hoge3 \u3092\u5b9f\u884c\n* hoge1 \u304c\u7d42\u308f\u3063\u305f\u3089 \"hoge1 is over!\" \u3092\u51fa\u529b\n\n\u306a\u308b\u307b\u3069\u308f\u304b\u3089\u3093\n\n# \u3053\u3093\u306a\u306e\u8aad\u3080\u306e\u3082\u66f8\u304f\u306e\u3082\u7121\u7406\n\n\u306a\u306e\u3067 DSL \u3092\u4f5c\u3063\u3066\u307f\u307e\u3057\u305f\u3002\n\n```scala:list2\n  def readableSettings = new TaskSettings{\n    def foo =\n      define(\"foo1\") as (\n        call to {\n          println(\"foo3!\")\n          println(\"foo2!\")\n        },\n        bind (\n          call to println(\"bar2!\"),\n          call to println(\"bar1!\")\n        ) ensure {\n          println(\"bar1 is over!\")\n        },\n        call to println(\"foo1!\")\n      ) ensure {\n        println(\"foo1 is over!\")\n      }\n  }\n```\n\n\u3053\u308c\u3067\u3084\u3063\u3068\u5b89\u5fc3\u3057\u3066\u901a\u5e38\u306e\u9010\u6b21\u51e6\u7406\u306e\u3088\u3046\u306b\u8aad\u3081\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3057\u305f\u3002\n\u3042\u3068\u306f\u3044\u3064\u3082\u3069\u304a\u308a ProjectSetting \u306b\u52a0\u3048\u3066\u3057\u307e\u3048\u3070\u6e96\u5099\u5b8c\u4e86\u3067\u3059\u3002\n\n```scala\nsettings = Project.defaultSettings ++ readableSettings.foo.toSeq\n```\n\nfoo1 \u3068\u3044\u3046\u30bf\u30b9\u30af\u306e\u51fa\u529b\u3092\u78ba\u8a8d\u3057\u3066\u307f\u307e\u3059\u3002\n\n```\n> foo1\nfoo3!\nfoo2!\nbar2!\nbar1!\nbar1 is over!\nfoo1!\nfoo1 is over!\n```\n\n\u8a08\u753b\u901a\u308a\uff08\uff84\uff9e\uff94\uff67\n\n# \u307e\u3068\u3081\n\n* sbt \u3067\u306f\u8907\u6570\u306e\u30bf\u30b9\u30af\u304b\u3089\u4f9d\u5b58\u95a2\u4fc2\u306e\u3042\u308b\u65b0\u305f\u306a\u30bf\u30b9\u30af\u3092\u3064\u304f\u308b\u306e\u304c\u3068\u3066\u3082\u5927\u5909 ( \u4e26\u5217\u5b9f\u884c\u306f\u7c21\u5358 )\n* DSL \u3067\u8efd\u304f\u30e9\u30c3\u30d7\u3059\u308b\u3068\u7d20\u76f4\u306a\u30b3\u30fc\u30c9\u304c\u66f8\u3051\u308b\u3088\u3046\u306b\u306a\u308b\n\n# \u304a\u307e\u3051\n\n## \u958b\u767a\u4e2d\u306e\u3042\u308b\u3042\u308b\u8981\u4ef6\n\n\u3068\u3057\u3066\u300c\u3053\u306e\u4e00\u9023\u306e bar \u51fa\u529b\u306f\u5358\u4f53\u3067\u5b9f\u884c\u3067\u304d\u308b\u30bf\u30b9\u30af\u306b\u3057\u305f\u3044\u300d\u307f\u305f\u3044\u306a\u30b1\u30fc\u30b9\u304c\u3088\u304f\u3042\u308a\u307e\u3059\u304c\u3001\u3053\u306e DSL \u3067\u306f\u305d\u308c\u3082\u8003\u616e\u3055\u308c\u3066\u3044\u307e\u3059\u3002\n\nbind \u306e\u90e8\u5206\u3092\u4e0b\u8a18\u306e\u3088\u3046\u306b\u7f6e\u304d\u63db\u3048\u308b\u3060\u3051\u3067\n\n```scala\ndefine(\"bar1\") as (\n```\n\n\u305d\u306e\u6642\u70b9\u3067 bar1 \u3068\u3044\u3046\u30bf\u30b9\u30af\u304c\u5b9a\u7fa9\u3055\u308c\u307e\u3059\u3002\n\n```\n> bar1\nbar2!\nbar1!\nbar1 is over!\n```\n\n\u30b7\u30f3\u30d7\u30eb\u3067\u3059\u306d\u3002\n ( \u65b0\u305f\u306b\u5916\u306b TaskKey \u3092\u4f5c\u3063\u3066\u305d\u308c\u3092\u767b\u9332\u3057\u3066 dependsOn \u3067\u3064\u306a\u3052\u308b\u624b\u9593\u306f\u3082\u3046\u5fc5\u8981\u3042\u308a\u307e\u305b\u3093 )\n\n## \u65e2\u5b58\u306e TaskKey \u3092\u7d44\u307f\u8fbc\u3080\n\n\u3053\u3068\u3082\u3067\u304d\u307e\u3059\u3002\n\u3053\u308c\u306f \"bar2!\" \u3092\u51fa\u529b\u3057\u305f\u76f4\u5f8c\u306b clean \u30bf\u30b9\u30af\u3092\u5b9f\u884c\u3059\u308b\u4f8b\u3067\u3059\u3002\n\n```scala\n        bind (\n          call to println(\"bar2!\"),\n          task of clean,\n          call to println(\"bar1!\")\n        ) ensure {\n          println(\"bar1 is over!\")\n        },\n```\n\n# DSL \u306e\u4e2d\u8eab\n\n```scala:list3\nclass TaskSettings extends SettingsAlias{\n\n  def bind(label: String)(binders: Binder*): Multiple = {\n    val key = TaskKey[Unit](label) in Compile\n    val settings = binders.reverse.map(_ dependenciesFrom key).flatten\n    new Multiple(key, settings)\n  }\n  def bind(binders: Binder*): Multiple = bind(createLabel)(binders:_*)\n\n  def execute[A](f: => A) = {\n    val key = TaskKey[Unit](createLabel) in Compile\n    new Procedure(key, () => f)\n  }\n  def register[A](taskKey: TaskKey[A]) = new KeyStore(taskKey)\n\n  import java.util.UUID\n  private def createLabel = \"ts:dummy:\" + UUID.randomUUID\n\n  private type Settings = Seq[Project.Setting[Task[Unit]]]\n\n  trait Binder {\n    def taskKey: TaskKey[_]\n    def dependenciesFrom(key: TaskKey[Unit]): Settings\n    def connectFrom(key: TaskKey[Unit]) = Seq(key <<= key dependsOn taskKey)\n  }\n  class KeyStore[A](val taskKey: TaskKey[A]) extends Binder {\n    def dependenciesFrom(key: TaskKey[Unit]) = connectFrom(key)\n  }\n  class Procedure(val taskKey: TaskKey[Unit], f: () => Unit) extends Binder {\n    def dependenciesFrom(key: TaskKey[Unit]) = Seq(taskKey := f()) ++ connectFrom(key)\n  }\n  class Multiple(val taskKey: TaskKey[Unit], settings: Settings) extends Binder{\n    def ensure[A](f: => A) = {\n      new Multiple(taskKey, settings ++ Seq(taskKey <<= taskKey andFinally f))\n    }\n    def dependenciesFrom(key: TaskKey[Unit]) = toSeq ++ connectFrom(key)\n    def toSeq = Seq(taskKey := {}) ++ settings\n  }\n}\n\ntrait SettingsAlias { self: TaskSettings =>\n  def define(label: String) = new {\n    def as (binders: Binder*) = bind(label)(binders:_*)\n  }\n  def call = new {\n    def to (f: => Unit) = execute(f)\n  }\n  def task = new {\n    def of (taskKey: TaskKey[_]) = register(taskKey)\n  }\n}\n```", "tags": ["Scala2.10", "sbt0.13.0"]}