{"context": " More than 1 year has passed since last update.Node.js \u3067 AWS\u3092\u64cd\u4f5c\u3059\u308b\u74b0\u5883\u3092\u4f5c\u308b\uff08Mac) \u306e\u7d9a\u304d\u3067\u3059\u3002\nNode.js\u304b\u3089DynamoDB\u306e\u30aa\u30da\u30ec\u30fc\u30b7\u30e7\u30f3\u3092\u8a66\u3057\u3066\u307f\u307e\u3059\u3002\n\n00. \u6e96\u5099\n\n\nNode.js \u3067 AWS\u3092\u64cd\u4f5c\u3059\u308b\u74b0\u5883\u3092\u4f5c\u308b\uff08Mac) \u304c\u7d42\u308f\u3063\u3066\u3044\u308b\u524d\u63d0\u3067\u3059\u3002\n\u5404\u30d5\u30a1\u30a4\u30eb\u3067\u306f\u4e0b\u8a18\u306e\u3088\u3046\u306a\u5171\u901a\u306e\u51e6\u7406\u304c\u5165\u3063\u3066\u3044\u307e\u3059\u304c\u3001\u8a18\u8ff0\u3092\u7701\u7565\u3057\u3066\u3044\u307e\u3059\u3002\n\nvar AWS = require('aws-sdk');\nvar php = require('phpjs');\n\nvar dynamodb = new AWS.DynamoDB({region: 'ap-northeast-1'});\n\n\n\u203b phpjs \u306f\u5b8c\u5168\u306b\u8da3\u5473\u306a\u306e\u3067\u30b9\u30eb\u30fc\u3057\u3066\u3060\u3044\u3058\u3087\u3046\u3076\u3067\u3059\u3002php.var_dump()\u3001php.print_r() \u306f console.log() \u306e\u4ee3\u7528\u3068\u3057\u3066\u3044\u307e\u3059\u3002\n\n01. list-tables (\u30c6\u30fc\u30d6\u30eb\u4e00\u89a7)\n\n\u30d7\u30ed\u30b0\u30e9\u30e0:\n\nvar params = {\n    Limit: 100\n};\n\ndynamodb.listTables(params, function(err, data) {\n    if (err) {\n        console.log(err, err.stack); \n    } else {\n        console.log(data);\n        // php.print_r(data);\n    }\n});\n\n\n02. describe-table \uff08\u30c6\u30fc\u30d6\u30eb\u8a73\u7d30\u8868\u793a\uff09\n\n\u30d7\u30ed\u30b0\u30e9\u30e0:\nvar params = {TableName:'json_test'};\ndynamodb.describeTable(params, function(err, data) {\n    if (err) {\n        console.log(err, err.stack);\n    } else {\n        console.log(data);\n        // php.var_dump(data);\n    }\n});\n\n\n\u51fa\u529b:\n\n$ node describe-table.js\n\n{ Table:\n   { AttributeDefinitions: [ [Object] ],\n     CreationDateTime: Sun Nov 09 2014 09:01:08 GMT+0900 (JST),\n     ItemCount: 1,\n     KeySchema: [ [Object] ],\n     ProvisionedThroughput:\n      { NumberOfDecreasesToday: 0,\n        ReadCapacityUnits: 1,\n        WriteCapacityUnits: 1 },\n     TableName: 'json_test',\n     TableSizeBytes: 74,\n     TableStatus: 'ACTIVE' } }\n\nconsole.log \u306e\u3068\u3053\u308d\u3092\u30b3\u30e1\u30f3\u30c8\u30a2\u30a6\u30c8\u3057\u3066\u3001php.var_dump(data); \u306e\u65b9\u3067\u5b9f\u884c\u3059\u308b\u3068\u3001[Object] \u306e\u4e2d\u8eab\u3082\u898b\u3089\u308c\u3066\u3059\u3054\u3044\u4fbf\u5229\u3002\n\u306a\u3093\u304b\u90aa\u9053\u306a\u6c17\u304c\u3059\u308b\u3051\u3069\u3002\u6b63\u5f0f\u306a\u3084\u308a\u65b9\u3042\u3063\u305f\u3089\u6559\u3048\u3066\u304f\u3060\u3055\u3044\u3002\n\n03. put-table \uff08\u30c7\u30fc\u30bf\u767b\u9332\uff09\n\n\u30d7\u30ed\u30b0\u30e9\u30e0:\nvar params = {\n    TableName: 'json_test',\n    Item: {\n        'id':       {\"S\": \"1003\"},\n        'name':     {\"S\": \"orange\"},\n        'price':    {\"N\": \"210\"}\n    }\n};\n\n// \"N\": 210 \u306e\u3088\u3046\u306b\u6570\u5024\u3067\u5165\u308c\u305f\u3089\u30a8\u30e9\u30fc\u306b\u306a\u3063\u305f\u3002\n\ndynamodb.putItem(params, function (err, data) {\n    if (err) {\n        console.log(err, err.stack);\n    } else {\n        console.log(data);\n    }\n});\n\n\n04. scan-table \uff08\u5168\u4ef6\u51fa\u529b\uff09\n\n\u30d7\u30ed\u30b0\u30e9\u30e0:\nvar params = {\n    TableName: 'json_test',\n    Select: \"ALL_ATTRIBUTES\"\n};\n\ndynamodb.scan(params, function (err, res) {\n    php.var_dump(res);\n});\n\n\n\n\u51fa\u529b:\narray(3) {\n    [Count] =>\n    int(1)\n    [Items] =>\n    array(1) {\n            [0] =>\n            array(3) {\n                    [name] =>\n                    array(1) {\n                            [S] =>\n                            string(6) \"orange\"\n                    }\n                    [id] =>\n                    array(1) {\n                            [S] =>\n                            string(4) \"1003\"\n                    }\n                    [price] =>\n                    array(1) {\n                            [N] =>\n                            string(3) \"210\"\n                    }\n            }\n    }\n    [ScannedCount] =>\n    int(1)\n}\n\n\n05. get-item \uff08\uff11\u4ef6\u53d6\u5f97\uff09\n\n\u30d7\u30ed\u30b0\u30e9\u30e0:\nKey\u306b\u30d7\u30e9\u30a4\u30de\u30ea\u30ad\u30fc\u3092\u6e21\u3059\u3002\nvar params = {\n    TableName: 'json_test',\n    Key: {\n        \"id\": {\"S\": \"1003\"}\n    }\n};\n\ndynamodb.getItem(params, function (err, res) {\n    php.var_dump(res);\n});\n\n\n\n\u51fa\u529b:\narray(1) {\n    [Item] =>\n    array(3) {\n            [name] =>\n            array(1) {\n                    [S] =>\n                    string(6) \"banana\"\n            }\n            [id] =>\n            array(1) {\n                    [S] =>\n                    string(4) \"1002\"\n            }\n            [price] =>\n            array(1) {\n                    [N] =>\n                    string(2) \"80\"\n            }\n    }\n}\n\n\n06. update-item\n\n\u30d7\u30ed\u30b0\u30e9\u30e0:\n\nvar params = {\n    TableName: 'json_test',\n    Key: {\n        \"id\": {\"S\": \"1003\"} // Hash\u30ad\u30fc\n    },\n    AttributeUpdates: {\n        \"price\": {\n            'Action': 'PUT',\n            'Value': {\"N\": \"30\"}\n        }\n    }\n};\n\ndynamodb.updateItem(params, function (err, res) {\n    php.var_dump(err);\n    php.var_dump(res);\n});\n\n\n\u4e0a\u8a18\u30b5\u30f3\u30d7\u30eb\u3067\u306f\u3001AttributeUpdates \u4f7f\u3063\u3066\u307e\u3059\u304c\u3001Developpers.IO\u3067\u4e0b\u8a18\u306e\u3088\u3046\u306a\u60c5\u5831\u3092\u898b\u304b\u3051\u307e\u3057\u305f\u3002\u304a\u3046\u3075\n\nupdateItem\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u306bAttributeUpdates\u3092\u4f7f\u3046\u306e\u306f\u975e\u63a8\u5968\nhttp://dev.classmethod.jp/cloud/aws/dynamodb_updateexpression/\n\n\n07. query\n\n\u30d7\u30ed\u30b0\u30e9\u30e0:\nvar params = {\n    TableName: 'json_test',\n    KeyConditions: {\n        'id': {\n            'ComparisonOperator': 'EQ',\n            'AttributeValueList': [{S: '1002'}]\n        }\n    }\n}\n\ndynamodb.query(params, function (err, data) {\n        if (err) {\n            console.log(err);\n        } else {\n            php.var_dump(data);\n        }\n    }\n);\n\n\n08. delete-item\n\n\u30d7\u30ed\u30b0\u30e9\u30e0:\nvar params = {\n    TableName: 'json_test',\n    Key: {\n        \"id\": {\"S\": \"1009\"}\n    }\n};\n\ndynamodb.deleteItem(params, function (err, res) {\n    php.var_dump(err);\n    php.var_dump(res);\n});\n\n\n09. batch-get-item\n\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u898b\u3066\u3082\u3088\u304f\u5206\u304b\u3089\u305a\u3002 stackoverflow\u3067\u3082\u6df7\u4e71\u304e\u307f\u3002\n\n\u30d7\u30ed\u30b0\u30e9\u30e0:\nhttp://stackoverflow.com/questions/15043043/how-to-use-batchgetitem-for-the-nodejs-aws-sdk-for-dynamodb\nvar params = {\n    RequestItems : {\n        \"json_test\": {\n            Keys: [\n                {\n                    \"id\": {S: \"1002\"}\n                },\n                {\n                    \"id\": {S: \"1003\"}\n                }\n            ]\n        }\n    }\n};\n\ndynamodb.batchGetItem(params, function (err, res) {\n    php.var_dump(res);\n});\n\n\u7d50\u5c40\u306f\u3053\u3046\u3044\u3046\u3053\u3068\u3089\u3057\u3044\u3002\n\"RequestItems\": {\n    \"<TableName>\": {\n        \"Keys\": [\n            {\"<HashKeyName>\": {\"<type>\":\"<hash key value>\"}},\n            {\"<HashKeyName>\": {\"<type>\":\"<hash key value>\"}},\n            {\"<HashKeyName>\": {\"<type>\":\"<hash key value>\"}}\n        ]\n    }\n}\n\n\n10. batch-write-item\n\n\u30d7\u30ed\u30b0\u30e9\u30e0:\nvar params = {\n    RequestItems: {\n        \"json_test\": [\n            {\n                PutRequest: {\n                    Item: {\n                        'id': {\"S\": \"2001\"},\n                        'name': {\"S\": \"batch-put-item-1!\"},\n                        'price': {\"N\": \"9990\"}\n                    }\n                }\n            },\n            {\n                PutRequest: {\n                    Item: {\n                        'id': {\"S\": \"2002\"},\n                        'name': {\"S\": \"batch-put-item-2!\"},\n                        'price': {\"N\": \"9991\"}\n                    }\n                }\n            },\n\n        ]\n    }\n}\n\ndynamodb.batchWriteItem(params, function (err, res) {\n    php.var_dump(res);\n});\n\n\n\u96d1\u611f\n\u3084\u3063\u3071\u308a\u3001\u7d20\u306eSDK\u3092\u305d\u306e\u307e\u307e\u4f7f\u3046\u306e\u306f\u3064\u3089\u3044\u306a\u3041\u3002\u826f\u3044\u30e9\u30c3\u30d1\u30fc\u7684\u306a\u306e\u304c\u6b32\u3057\u3044\u3002\n\u3042\u3093\u307e\u308a\u3061\u3083\u3093\u3068\u8abf\u3079\u3066\u306a\u3044\u3067\u3059\u304c\u3001\u3053\u308c\u3068\u304b\u826f\u3044\u304b\u3082\u3057\u308c\u306a\u3044\u3002 \n\n[nodejs] DynamoDB ODM\u306evogels\u3092JSON\u5f62\u5f0f\u306b\u5bfe\u5fdc\u3055\u305b\u305f | \u8e0a\u308b\u72ac.net\nnoradaiko/vogels\n\n\n\u53c2\u8003\n\nAWSJavaScriptSDK/latest/AWS/DynamoDB\n\n\n[Node.js \u3067 AWS\u3092\u64cd\u4f5c\u3059\u308b\u74b0\u5883\u3092\u4f5c\u308b\uff08Mac)]\n(http://qiita.com/inouet/items/2798cbbc677d7141904a) \u306e\u7d9a\u304d\u3067\u3059\u3002\nNode.js\u304b\u3089DynamoDB\u306e\u30aa\u30da\u30ec\u30fc\u30b7\u30e7\u30f3\u3092\u8a66\u3057\u3066\u307f\u307e\u3059\u3002\n\n# 00. \u6e96\u5099\n\n* [Node.js \u3067 AWS\u3092\u64cd\u4f5c\u3059\u308b\u74b0\u5883\u3092\u4f5c\u308b\uff08Mac)]\n(http://qiita.com/inouet/items/2798cbbc677d7141904a) \u304c\u7d42\u308f\u3063\u3066\u3044\u308b\u524d\u63d0\u3067\u3059\u3002\n* \u5404\u30d5\u30a1\u30a4\u30eb\u3067\u306f\u4e0b\u8a18\u306e\u3088\u3046\u306a\u5171\u901a\u306e\u51e6\u7406\u304c\u5165\u3063\u3066\u3044\u307e\u3059\u304c\u3001\u8a18\u8ff0\u3092\u7701\u7565\u3057\u3066\u3044\u307e\u3059\u3002\n\n```js\nvar AWS = require('aws-sdk');\nvar php = require('phpjs');\n\nvar dynamodb = new AWS.DynamoDB({region: 'ap-northeast-1'});\n\n```\n\n\u203b phpjs \u306f\u5b8c\u5168\u306b\u8da3\u5473\u306a\u306e\u3067\u30b9\u30eb\u30fc\u3057\u3066\u3060\u3044\u3058\u3087\u3046\u3076\u3067\u3059\u3002php.var_dump()\u3001php.print_r() \u306f console.log() \u306e\u4ee3\u7528\u3068\u3057\u3066\u3044\u307e\u3059\u3002\n\n# 01. list-tables (\u30c6\u30fc\u30d6\u30eb\u4e00\u89a7)\n\n## \u30d7\u30ed\u30b0\u30e9\u30e0:\n\n```js\n\nvar params = {\n    Limit: 100\n};\n\ndynamodb.listTables(params, function(err, data) {\n    if (err) {\n        console.log(err, err.stack); \n    } else {\n        console.log(data);\n        // php.print_r(data);\n    }\n});\n```\n\n# 02. describe-table \uff08\u30c6\u30fc\u30d6\u30eb\u8a73\u7d30\u8868\u793a\uff09\n\n## \u30d7\u30ed\u30b0\u30e9\u30e0:\n\n```js\nvar params = {TableName:'json_test'};\ndynamodb.describeTable(params, function(err, data) {\n    if (err) {\n        console.log(err, err.stack);\n    } else {\n        console.log(data);\n        // php.var_dump(data);\n    }\n});\n```\n\n## \u51fa\u529b: \n\n```\n\n$ node describe-table.js\n\n{ Table:\n   { AttributeDefinitions: [ [Object] ],\n     CreationDateTime: Sun Nov 09 2014 09:01:08 GMT+0900 (JST),\n     ItemCount: 1,\n     KeySchema: [ [Object] ],\n     ProvisionedThroughput:\n      { NumberOfDecreasesToday: 0,\n        ReadCapacityUnits: 1,\n        WriteCapacityUnits: 1 },\n     TableName: 'json_test',\n     TableSizeBytes: 74,\n     TableStatus: 'ACTIVE' } }\n```\n\nconsole.log \u306e\u3068\u3053\u308d\u3092\u30b3\u30e1\u30f3\u30c8\u30a2\u30a6\u30c8\u3057\u3066\u3001php.var_dump(data); \u306e\u65b9\u3067\u5b9f\u884c\u3059\u308b\u3068\u3001[Object] \u306e\u4e2d\u8eab\u3082\u898b\u3089\u308c\u3066\u3059\u3054\u3044\u4fbf\u5229\u3002\n\n\u306a\u3093\u304b\u90aa\u9053\u306a\u6c17\u304c\u3059\u308b\u3051\u3069\u3002\u6b63\u5f0f\u306a\u3084\u308a\u65b9\u3042\u3063\u305f\u3089\u6559\u3048\u3066\u304f\u3060\u3055\u3044\u3002\n\n# 03. put-table \uff08\u30c7\u30fc\u30bf\u767b\u9332\uff09\n\n## \u30d7\u30ed\u30b0\u30e9\u30e0:\n\n```js\nvar params = {\n    TableName: 'json_test',\n    Item: {\n        'id':       {\"S\": \"1003\"},\n        'name':     {\"S\": \"orange\"},\n        'price':    {\"N\": \"210\"}\n    }\n};\n\n// \"N\": 210 \u306e\u3088\u3046\u306b\u6570\u5024\u3067\u5165\u308c\u305f\u3089\u30a8\u30e9\u30fc\u306b\u306a\u3063\u305f\u3002\n\ndynamodb.putItem(params, function (err, data) {\n    if (err) {\n        console.log(err, err.stack);\n    } else {\n        console.log(data);\n    }\n});\n```\n\n# 04. scan-table \uff08\u5168\u4ef6\u51fa\u529b\uff09\n\n## \u30d7\u30ed\u30b0\u30e9\u30e0:\n\n```js\nvar params = {\n    TableName: 'json_test',\n    Select: \"ALL_ATTRIBUTES\"\n};\n\ndynamodb.scan(params, function (err, res) {\n    php.var_dump(res);\n});\n\n```\n\n## \u51fa\u529b:\n```\narray(3) {\n    [Count] =>\n    int(1)\n    [Items] =>\n    array(1) {\n            [0] =>\n            array(3) {\n                    [name] =>\n                    array(1) {\n                            [S] =>\n                            string(6) \"orange\"\n                    }\n                    [id] =>\n                    array(1) {\n                            [S] =>\n                            string(4) \"1003\"\n                    }\n                    [price] =>\n                    array(1) {\n                            [N] =>\n                            string(3) \"210\"\n                    }\n            }\n    }\n    [ScannedCount] =>\n    int(1)\n}\n```\n\n# 05. get-item \uff08\uff11\u4ef6\u53d6\u5f97\uff09\n\n## \u30d7\u30ed\u30b0\u30e9\u30e0:\n\nKey\u306b\u30d7\u30e9\u30a4\u30de\u30ea\u30ad\u30fc\u3092\u6e21\u3059\u3002\n\n```js\nvar params = {\n    TableName: 'json_test',\n    Key: {\n        \"id\": {\"S\": \"1003\"}\n    }\n};\n\ndynamodb.getItem(params, function (err, res) {\n    php.var_dump(res);\n});\n\n```\n\n## \u51fa\u529b:\n\n```\narray(1) {\n    [Item] =>\n    array(3) {\n            [name] =>\n            array(1) {\n                    [S] =>\n                    string(6) \"banana\"\n            }\n            [id] =>\n            array(1) {\n                    [S] =>\n                    string(4) \"1002\"\n            }\n            [price] =>\n            array(1) {\n                    [N] =>\n                    string(2) \"80\"\n            }\n    }\n}\n```\n\n# 06. update-item\n\n## \u30d7\u30ed\u30b0\u30e9\u30e0:\n\n```js\n\nvar params = {\n    TableName: 'json_test',\n    Key: {\n        \"id\": {\"S\": \"1003\"} // Hash\u30ad\u30fc\n    },\n    AttributeUpdates: {\n        \"price\": {\n            'Action': 'PUT',\n            'Value': {\"N\": \"30\"}\n        }\n    }\n};\n\ndynamodb.updateItem(params, function (err, res) {\n    php.var_dump(err);\n    php.var_dump(res);\n});\n\n```\n\n\u4e0a\u8a18\u30b5\u30f3\u30d7\u30eb\u3067\u306f\u3001AttributeUpdates \u4f7f\u3063\u3066\u307e\u3059\u304c\u3001Developpers.IO\u3067\u4e0b\u8a18\u306e\u3088\u3046\u306a\u60c5\u5831\u3092\u898b\u304b\u3051\u307e\u3057\u305f\u3002\u304a\u3046\u3075\n\n> updateItem\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u306bAttributeUpdates\u3092\u4f7f\u3046\u306e\u306f\u975e\u63a8\u5968\nhttp://dev.classmethod.jp/cloud/aws/dynamodb_updateexpression/\n\n\n# 07. query\n\n## \u30d7\u30ed\u30b0\u30e9\u30e0:\n\n```js\nvar params = {\n    TableName: 'json_test',\n    KeyConditions: {\n        'id': {\n            'ComparisonOperator': 'EQ',\n            'AttributeValueList': [{S: '1002'}]\n        }\n    }\n}\n\ndynamodb.query(params, function (err, data) {\n        if (err) {\n            console.log(err);\n        } else {\n            php.var_dump(data);\n        }\n    }\n);\n```\n\n# 08. delete-item\n\n## \u30d7\u30ed\u30b0\u30e9\u30e0: \n\n```js\nvar params = {\n    TableName: 'json_test',\n    Key: {\n        \"id\": {\"S\": \"1009\"}\n    }\n};\n\ndynamodb.deleteItem(params, function (err, res) {\n    php.var_dump(err);\n    php.var_dump(res);\n});\n```\n\n# 09. batch-get-item\n\n\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u898b\u3066\u3082\u3088\u304f\u5206\u304b\u3089\u305a\u3002 stackoverflow\u3067\u3082\u6df7\u4e71\u304e\u307f\u3002\n\n## \u30d7\u30ed\u30b0\u30e9\u30e0:\n\nhttp://stackoverflow.com/questions/15043043/how-to-use-batchgetitem-for-the-nodejs-aws-sdk-for-dynamodb\n\n```js\nvar params = {\n    RequestItems : {\n        \"json_test\": {\n            Keys: [\n                {\n                    \"id\": {S: \"1002\"}\n                },\n                {\n                    \"id\": {S: \"1003\"}\n                }\n            ]\n        }\n    }\n};\n\ndynamodb.batchGetItem(params, function (err, res) {\n    php.var_dump(res);\n});\n```\n\n\u7d50\u5c40\u306f\u3053\u3046\u3044\u3046\u3053\u3068\u3089\u3057\u3044\u3002\n\n```\n\"RequestItems\": {\n    \"<TableName>\": {\n        \"Keys\": [\n            {\"<HashKeyName>\": {\"<type>\":\"<hash key value>\"}},\n            {\"<HashKeyName>\": {\"<type>\":\"<hash key value>\"}},\n            {\"<HashKeyName>\": {\"<type>\":\"<hash key value>\"}}\n        ]\n    }\n}\n```\n\n\n# 10. batch-write-item\n\n## \u30d7\u30ed\u30b0\u30e9\u30e0:\n\n```js\nvar params = {\n    RequestItems: {\n        \"json_test\": [\n            {\n                PutRequest: {\n                    Item: {\n                        'id': {\"S\": \"2001\"},\n                        'name': {\"S\": \"batch-put-item-1!\"},\n                        'price': {\"N\": \"9990\"}\n                    }\n                }\n            },\n            {\n                PutRequest: {\n                    Item: {\n                        'id': {\"S\": \"2002\"},\n                        'name': {\"S\": \"batch-put-item-2!\"},\n                        'price': {\"N\": \"9991\"}\n                    }\n                }\n            },\n\n        ]\n    }\n}\n\ndynamodb.batchWriteItem(params, function (err, res) {\n    php.var_dump(res);\n});\n```\n\n\n# \u96d1\u611f\n\n\u3084\u3063\u3071\u308a\u3001\u7d20\u306eSDK\u3092\u305d\u306e\u307e\u307e\u4f7f\u3046\u306e\u306f\u3064\u3089\u3044\u306a\u3041\u3002\u826f\u3044\u30e9\u30c3\u30d1\u30fc\u7684\u306a\u306e\u304c\u6b32\u3057\u3044\u3002\n\u3042\u3093\u307e\u308a\u3061\u3083\u3093\u3068\u8abf\u3079\u3066\u306a\u3044\u3067\u3059\u304c\u3001\u3053\u308c\u3068\u304b\u826f\u3044\u304b\u3082\u3057\u308c\u306a\u3044\u3002 \n\n* [[nodejs] DynamoDB ODM\u306evogels\u3092JSON\u5f62\u5f0f\u306b\u5bfe\u5fdc\u3055\u305b\u305f | \u8e0a\u308b\u72ac.net](http://odoruinu.net/blog/2014/10/27/nodejs-dynamodb-odm-vogels-json/)\n* [noradaiko/vogels](https://github.com/noradaiko/vogels)\n\n\n\n# \u53c2\u8003\n\n* [AWSJavaScriptSDK/latest/AWS/DynamoDB](http://docs.aws.amazon.com/AWSJavaScriptSDK/latest/AWS/DynamoDB.html#putItem-property)\n\n\n\n\n\n\n", "tags": ["AWS", "DynamoDB", "Node.js"]}