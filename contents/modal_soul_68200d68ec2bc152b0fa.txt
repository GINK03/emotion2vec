{"tags": ["Haxe"], "context": " More than 1 year has passed since last update.null\u66f8\u3044\u305f\u3089\u8ca0\u3051\u3002\u305d\u3093\u306a\u3042\u306a\u305f\u306b\u30aa\u30b9\u30b9\u30e1\u306a\u306e\u304c\u3001Option\u3067\u3059\u3002\nOption\u3092\u4f7f\u3046\u3053\u3068\u3067\u3001null\u306e\u5024\u3092\u53d6\u308b\u5834\u5408\u306e\u51e6\u7406\u304c\u3001\u3044\u3044\u611f\u3058\u306b\u66f8\u3051\u308b\u306e\u3067\u3059\u304c\u3001\u5982\u4f55\u305b\u3093haxe.ds.Option\u3067\u306f\u7269\u8db3\u308a\u306a\u3055\u3092\u611f\u3058\u3066\u3057\u307e\u3044\u307e\u3059\u3002\n\u305d\u3053\u3067\u3001Haxe\u306eOption\u3092Scala\u306eOption\u3063\u307d\u304f\u4f7f\u3048\u308b\u3088\u3046\u3001\u62e1\u5f35\u3057\u3066\u307f\u307e\u3057\u305f\u3002\nScala\u306eOption\u306e\u30e1\u30bd\u30c3\u30c9\u3092\u5168\u3066\u5b9f\u88c5\u3059\u308b\u306e\u306f\u9762\u5012\u306a\u306e\u3067\u3001\u500b\u4eba\u7684\u306b\u826f\u304f\u4f7f\u3046\u3082\u306e\u3092\u9078\u3093\u3067\u5b9f\u88c5\u3057\u307e\u3057\u305f\u3002\nScalikeOption\u30af\u30e9\u30b9\u306b\u3001\u9759\u7684\u306a\u30e1\u30bd\u30c3\u30c9\u3092\u5b9a\u7fa9\u3057\u3066\u3001\n\u3042\u3068\u306fusing\u3092\u4f7f\u3063\u3066ScalikeOption\u306e\u30e1\u30bd\u30c3\u30c9\u3092\u547c\u3076\u3060\u3051\u3001\u3068\u3066\u3082\u7c21\u5358\u3002\nimport haxe.ds.Option;\n\nusing ScalikeOption;\n\nclass ScalikeOption {\n    public static function isEmpty<T>(opt:Option<T>) {\n        return switch(opt) {\n            case Some(v): false;\n            case None: true;\n        }\n    }\n\n    public static function isDefined<T>(opt:Option<T>) {\n        return !opt.isEmpty();\n    }\n\n    public static function getOrElse<T>(opt:Option<T>, defValue:T) {\n        return switch(opt) {\n            case Some(v): v;\n            case None: defValue;\n        }\n    }\n\n    public static function map<A, B>(opt:Option<A>, f:A -> B) {\n        return switch (opt) {\n            case Some(v): Some(f(v));\n            case None: opt;\n        }\n    }\n\n    public static function fold<A, B>(opt:Option<A>, defValue:B, f:A -> B) {\n        return opt.map(f).getOrElse(defValue);\n    }\n\n    public static function iter<A>(opt:Option<A>, f:A -> Void) {\n        switch(opt) {\n            case Some(v): f(v);\n            case None: \n        }\n    }\n\n    public static function flatten<T>(opt:Option<Option<T>>) {\n        return switch (opt) {\n            case Some(v): v;\n            case None: None;\n        }   \n    }\n\n    public static function flatMap<A, B>(opt:Option<A>, f:A -> Option<B>) {\n        return switch (opt) {\n            case Some(v): \n                switch(f(v)) {\n                    case Some(w): Some(w);\n                    case None: None;\n                }\n            case None: None;\n        }      \n    }\n} \n\n\nScala\u306eOption.foreach\u306f\u5024\u3092\u8fd4\u3055\u305a\u526f\u4f5c\u7528\u306e\u307f\u306a\u306e\u306b\u5bfe\u3057\u3066\u3001Haxe\u306eLambda.foreach\u306fBool\u5024\u3092\u8fd4\u3059\u306e\u3067\u3001\u3061\u3087\u3063\u3068\u9055\u3044\u307e\u3059\u3002Haxe\u3067\u5024\u3092\u8fd4\u3055\u305a\u526f\u4f5c\u7528\u306e\u307f\u3092\u53d6\u308b\u306e\u306f\u3001Lambda.iter\u306a\u306e\u3067\u3001\u305d\u308c\u306b\u306a\u3089\u3044\u3001Scala\u306eOption.foreach\u306b\u5bfe\u5fdc\u3059\u308b\u30e1\u30bd\u30c3\u30c9\u306fScalikeOption.iter\u3068\u3057\u307e\u3057\u305f\u3002\nScala\u306eOption.get\u306f\u3001\u500b\u4eba\u7684\u306b\u4f7f\u3063\u3061\u3083\u3044\u3051\u306a\u3044\u3082\u306e\u3060\u3068\u601d\u3063\u3066\u3044\u308b\u306e\u3067\u3001\u8ffd\u52a0\u3057\u307e\u305b\u3093\u3067\u3057\u305f\u3002\n\u4f7f\u3044\u65b9\u306f\u3053\u3061\u3089\nimport haxe.ds.Option;\n\nusing ScalikeOption;\n\nclass Sample {\n    static var s = Some(1);\n    static var n = None;\n    static var ss = Some(s);\n    static var sn = Some(n);\n\n    public static function main(){\n        trace(\"Some.getOrElse(0): \" + s.getOrElse(0));\n        trace(\"None.getOrElse(0): \" + n.getOrElse(0));\n        trace(\"Some.isEmpty: \" + s.isEmpty());\n        trace(\"None.isEmpty: \" + n.isEmpty());\n        trace(\"Some.isDefined: \" + s.isDefined());\n        trace(\"None.isDefined: \" + n.isDefined());\n        trace(\"Some.map: \" + s.map(function(a) { return a * 10;}));\n        trace(\"None.map: \" + n.map(function(a) { return a * 10;}));\n        trace(\"Some.fold: \" + s.fold(99, function(a) { return a *10;}));\n        trace(\"None.fold: \" + n.fold(99, function(a) { return a *10;}));\n        s.iter(function(a) { trace(\"Some.iter: \" + a); });\n        n.iter(function(a) { trace(\"None.iter: \" + a); });\n        trace(\"Some(Some).flatten: \" + ss.flatten());\n        trace(\"Some(None).flatten: \" + sn.flatten());\n        trace(\"Some.flatMap: \" + s.flatMap(function(a) { if(a == 1) { return Some(\"one\"); } else { return None;} }));\n        trace(\"None.flatMap: \" + n.flatMap(function(a) { if(a == 1) { return Some(\"one\"); } else { return None;} }));\n    }\n}\n\nihx\u3067\u3053\u308c\u3092\u5b9f\u884c\u3059\u308b\u3068\u3001\n>> Sample.main(); \nSample.hx:12: Some.getOrElse(0): 1\nSample.hx:13: None.getOrElse(0): 0\nSample.hx:14: Some.isEmpty: false\nSample.hx:15: None.isEmpty: true\nSample.hx:16: Some.isDefined: true\nSample.hx:17: None.isDefined: false\nSample.hx:18: Some.map: Some(10)\nSample.hx:19: None.map: None\nSample.hx:20: Some.fold: 10\nSample.hx:21: None.fold: 99\nSample.hx:22: Some.iter: 1\nSample.hx:24: Some(Some).flatten: Some(1)\nSample.hx:25: Some(None).flatten: None\nSample.hx:26: Some.flatMap: Some(one)\nSample.hx:27: None.flatMap: None\n\n\u3068\u3044\u3063\u305f\u5177\u5408\u306b\u306a\u308a\u307e\u3059\u3002\n\u3061\u3087\u3063\u3068\u3057\u305f\u3082\u306e\u3067\u3059\u304c\u3001null\u306e\u306a\u3044\u30b3\u30fc\u30c9\u304c\u5c11\u3057\u306f\u66f8\u304d\u3084\u3059\u304f\u306a\u308b\u3068\u601d\u3044\u307e\u3059\u3002\nnull\u306e\u306a\u3044\u30b3\u30fc\u30c9\u306b\u5e78\u3042\u308c\uff01\n\nnull\u66f8\u3044\u305f\u3089\u8ca0\u3051\u3002\u305d\u3093\u306a\u3042\u306a\u305f\u306b\u30aa\u30b9\u30b9\u30e1\u306a\u306e\u304c\u3001[Option](http://api.haxe.org/haxe/ds/Option.html)\u3067\u3059\u3002\n\nOption\u3092\u4f7f\u3046\u3053\u3068\u3067\u3001null\u306e\u5024\u3092\u53d6\u308b\u5834\u5408\u306e\u51e6\u7406\u304c\u3001\u3044\u3044\u611f\u3058\u306b\u66f8\u3051\u308b\u306e\u3067\u3059\u304c\u3001\u5982\u4f55\u305b\u3093haxe.ds.Option\u3067\u306f\u7269\u8db3\u308a\u306a\u3055\u3092\u611f\u3058\u3066\u3057\u307e\u3044\u307e\u3059\u3002\n\n\u305d\u3053\u3067\u3001Haxe\u306eOption\u3092Scala\u306eOption\u3063\u307d\u304f\u4f7f\u3048\u308b\u3088\u3046\u3001\u62e1\u5f35\u3057\u3066\u307f\u307e\u3057\u305f\u3002\nScala\u306eOption\u306e\u30e1\u30bd\u30c3\u30c9\u3092\u5168\u3066\u5b9f\u88c5\u3059\u308b\u306e\u306f\u9762\u5012\u306a\u306e\u3067\u3001\u500b\u4eba\u7684\u306b\u826f\u304f\u4f7f\u3046\u3082\u306e\u3092\u9078\u3093\u3067\u5b9f\u88c5\u3057\u307e\u3057\u305f\u3002\n\nScalikeOption\u30af\u30e9\u30b9\u306b\u3001\u9759\u7684\u306a\u30e1\u30bd\u30c3\u30c9\u3092\u5b9a\u7fa9\u3057\u3066\u3001\n\u3042\u3068\u306fusing\u3092\u4f7f\u3063\u3066ScalikeOption\u306e\u30e1\u30bd\u30c3\u30c9\u3092\u547c\u3076\u3060\u3051\u3001\u3068\u3066\u3082\u7c21\u5358\u3002\n\n```Haxe\nimport haxe.ds.Option;\n\nusing ScalikeOption;\n\nclass ScalikeOption {\n    public static function isEmpty<T>(opt:Option<T>) {\n        return switch(opt) {\n            case Some(v): false;\n            case None: true;\n        }\n    }\n\n    public static function isDefined<T>(opt:Option<T>) {\n        return !opt.isEmpty();\n    }\n\n    public static function getOrElse<T>(opt:Option<T>, defValue:T) {\n        return switch(opt) {\n            case Some(v): v;\n            case None: defValue;\n        }\n    }\n\n    public static function map<A, B>(opt:Option<A>, f:A -> B) {\n        return switch (opt) {\n            case Some(v): Some(f(v));\n            case None: opt;\n        }\n    }\n\n    public static function fold<A, B>(opt:Option<A>, defValue:B, f:A -> B) {\n        return opt.map(f).getOrElse(defValue);\n    }\n\n    public static function iter<A>(opt:Option<A>, f:A -> Void) {\n        switch(opt) {\n            case Some(v): f(v);\n            case None: \n        }\n    }\n\n    public static function flatten<T>(opt:Option<Option<T>>) {\n        return switch (opt) {\n            case Some(v): v;\n            case None: None;\n        }   \n    }\n\n    public static function flatMap<A, B>(opt:Option<A>, f:A -> Option<B>) {\n        return switch (opt) {\n            case Some(v): \n                switch(f(v)) {\n                    case Some(w): Some(w);\n                    case None: None;\n                }\n            case None: None;\n        }      \n    }\n} \n\n```\n\nScala\u306eOption.foreach\u306f\u5024\u3092\u8fd4\u3055\u305a\u526f\u4f5c\u7528\u306e\u307f\u306a\u306e\u306b\u5bfe\u3057\u3066\u3001Haxe\u306eLambda.foreach\u306fBool\u5024\u3092\u8fd4\u3059\u306e\u3067\u3001\u3061\u3087\u3063\u3068\u9055\u3044\u307e\u3059\u3002Haxe\u3067\u5024\u3092\u8fd4\u3055\u305a\u526f\u4f5c\u7528\u306e\u307f\u3092\u53d6\u308b\u306e\u306f\u3001Lambda.iter\u306a\u306e\u3067\u3001\u305d\u308c\u306b\u306a\u3089\u3044\u3001Scala\u306eOption.foreach\u306b\u5bfe\u5fdc\u3059\u308b\u30e1\u30bd\u30c3\u30c9\u306fScalikeOption.iter\u3068\u3057\u307e\u3057\u305f\u3002\n\nScala\u306eOption.get\u306f\u3001\u500b\u4eba\u7684\u306b\u4f7f\u3063\u3061\u3083\u3044\u3051\u306a\u3044\u3082\u306e\u3060\u3068\u601d\u3063\u3066\u3044\u308b\u306e\u3067\u3001\u8ffd\u52a0\u3057\u307e\u305b\u3093\u3067\u3057\u305f\u3002\n\n\n\n\u4f7f\u3044\u65b9\u306f\u3053\u3061\u3089\n\n```Haxe\nimport haxe.ds.Option;\n\nusing ScalikeOption;\n\nclass Sample {\n    static var s = Some(1);\n    static var n = None;\n    static var ss = Some(s);\n    static var sn = Some(n);\n\n    public static function main(){\n        trace(\"Some.getOrElse(0): \" + s.getOrElse(0));\n        trace(\"None.getOrElse(0): \" + n.getOrElse(0));\n        trace(\"Some.isEmpty: \" + s.isEmpty());\n        trace(\"None.isEmpty: \" + n.isEmpty());\n        trace(\"Some.isDefined: \" + s.isDefined());\n        trace(\"None.isDefined: \" + n.isDefined());\n        trace(\"Some.map: \" + s.map(function(a) { return a * 10;}));\n        trace(\"None.map: \" + n.map(function(a) { return a * 10;}));\n        trace(\"Some.fold: \" + s.fold(99, function(a) { return a *10;}));\n        trace(\"None.fold: \" + n.fold(99, function(a) { return a *10;}));\n        s.iter(function(a) { trace(\"Some.iter: \" + a); });\n        n.iter(function(a) { trace(\"None.iter: \" + a); });\n        trace(\"Some(Some).flatten: \" + ss.flatten());\n        trace(\"Some(None).flatten: \" + sn.flatten());\n        trace(\"Some.flatMap: \" + s.flatMap(function(a) { if(a == 1) { return Some(\"one\"); } else { return None;} }));\n        trace(\"None.flatMap: \" + n.flatMap(function(a) { if(a == 1) { return Some(\"one\"); } else { return None;} }));\n    }\n}\n```\n\nihx\u3067\u3053\u308c\u3092\u5b9f\u884c\u3059\u308b\u3068\u3001\n\n```Bash\n>> Sample.main(); \nSample.hx:12: Some.getOrElse(0): 1\nSample.hx:13: None.getOrElse(0): 0\nSample.hx:14: Some.isEmpty: false\nSample.hx:15: None.isEmpty: true\nSample.hx:16: Some.isDefined: true\nSample.hx:17: None.isDefined: false\nSample.hx:18: Some.map: Some(10)\nSample.hx:19: None.map: None\nSample.hx:20: Some.fold: 10\nSample.hx:21: None.fold: 99\nSample.hx:22: Some.iter: 1\nSample.hx:24: Some(Some).flatten: Some(1)\nSample.hx:25: Some(None).flatten: None\nSample.hx:26: Some.flatMap: Some(one)\nSample.hx:27: None.flatMap: None\n```\n\n\u3068\u3044\u3063\u305f\u5177\u5408\u306b\u306a\u308a\u307e\u3059\u3002\n\n\n\u3061\u3087\u3063\u3068\u3057\u305f\u3082\u306e\u3067\u3059\u304c\u3001null\u306e\u306a\u3044\u30b3\u30fc\u30c9\u304c\u5c11\u3057\u306f\u66f8\u304d\u3084\u3059\u304f\u306a\u308b\u3068\u601d\u3044\u307e\u3059\u3002\nnull\u306e\u306a\u3044\u30b3\u30fc\u30c9\u306b\u5e78\u3042\u308c\uff01\n"}