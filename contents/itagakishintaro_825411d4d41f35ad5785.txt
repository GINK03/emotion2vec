{"context": " More than 1 year has passed since last update.Swift\u3092\u3055\u308f\u3063\u3066\u307f\u3088\u3046\u3068\u3044\u3046\u3053\u3068\u3067\u3001DevNomi\u3067\u304a\u99b4\u67d3\u307f\u306e\u30dd\u30fc\u30ab\u30fc\u5f79\u5224\u5b9a\u3092TDD\u3063\u307d\u304f\u3084\u3063\u3066\u307f\u307e\u3057\u305f\u3002\n\n\u74b0\u5883\u69cb\u7bc9\nApp\u3000Store\u304b\u3089Xcode\u3092\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3002\n\nPlayground\u3067\u7df4\u7fd2\nSwift\u3063\u3066\u3069\u3093\u306a\u3082\u3093\u304b\u3044\u3058\u308b\u305f\u3081\u306b\u3001Playground\u3067\u3044\u3058\u3063\u3066\u307f\u308b\u3002\n\u521d\u671f\u753b\u9762 => Get started with a playground\n\u203b \u300cWEB+DB PRESS vol.84\u300d\u3092\u8aad\u307f\u306a\u304c\u3089\u66f8\u3044\u305f\u3089\u306a\u3093\u3068\u306a\u304f\u3002\u3002\u3002\n\n\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u4f5c\u6210\n\n\u521d\u671f\u753b\u9762 => Create a new Xcode project\nOS X => Other => Empty\nProduct Name: Poker\n\n\nPoker\u30af\u30e9\u30b9\u306e\u4f5c\u6210\n\n\u753b\u9762\u5de6\u30da\u30a4\u30f3\u306e\u5de6\u304b\u3089\uff14\u3064\u76ee\u306e\u30a2\u30a4\u30b3\u30f3\u3092\u30af\u30ea\u30c3\u30af\u3057\u3066[Test Navigator]\u3092\u958b\u304f\n\u753b\u9762\u5de6\u4e0b\u306e[+]\u30a2\u30a4\u30b3\u30f3\u3092\u30af\u30ea\u30c3\u30af => New Test Target\nProduct Name: Poker, Organization Identifier: \u4efb\u610f\n\n\u203b \u306a\u305c\u304b\u30c6\u30b9\u30c8\u304c\u3067\u304d\u3066\u3057\u307e\u3046\u306e\u3067\u3001\u672c\u5f53\u306f\u624b\u9806\u304c\u9055\u3046\uff1f\n\n\n\u30c6\u30b9\u30c8\u30af\u30e9\u30b9\u306e\u4f5c\u6210\n\n\u753b\u9762\u5de6\u30da\u30a4\u30f3\u306e\u5de6\u304b\u3089\uff14\u3064\u76ee\u306e\u30a2\u30a4\u30b3\u30f3\u3092\u30af\u30ea\u30c3\u30af\u3057\u3066[Test Navigator]\u3092\u958b\u304f\n\u753b\u9762\u5de6\u4e0b\u306e[+]\u30a2\u30a4\u30b3\u30f3\u3092\u30af\u30ea\u30c3\u30af => New Test Class\nOS X => Source => Test Case Class\nClass: PokerTest, Subclass of: XCTestCase, Language: Swift\n\n\n\u30c6\u30b9\u30c8\u306e\u5b9f\u884c\n\n\u30c6\u30b9\u30c8\u5b9f\u884c\u74b0\u5883\u8a2d\u5b9a\n\u3084\u3063\u3066\u304a\u304f\u3068\u30c6\u30b9\u30c8\u5b9f\u884c\u6642\u306b\u30b3\u30f3\u30bd\u30fc\u30eb\u304c\u8868\u793a\u3055\u308c\u308b\u3002\n1.Preference => Behaviors => Testing => Starts\n2.[Show] debugger with [Valiables & Console] \u3092\u30c1\u30a7\u30c3\u30af\n\n\n\u30c6\u30b9\u30c8\u306e\u8a66\u3057\u6253\u3061\n\n\u753b\u9762\u5de6\u4e0a\u306e\u30d5\u30a9\u30eb\u30c0\u30fc\u30a2\u30a4\u30b3\u30f3\u3067[Project Navigator]\u3092\u958b\u304f\nPokerTest.swift\u3092\u6b21\u306e\u3068\u304a\u308a\u7de8\u96c6\n\nimport XCTest\n\nclass PokerTest: XCTestCase {\n\n    override func setUp() {\n        super.setUp()\n        // Put setup code here. This method is called before the invocation of each test method in the class.\n    }\n\n    override func tearDown() {\n        // Put teardown code here. This method is called after the invocation of each test method in the class.\n        super.tearDown()\n    }\n\n\n    func test() {\n        XCTAssertEqual(true, true)\n    }\n\n}\n\n\n3.Cmd+U\n\n\u30d6\u30bf\u306e\u5b9f\u88c5\n\n\u65b9\u91dd\n\n1\u679a\u306e\u30ab\u30fc\u30c9\u306fRank\u3068Suit\u3092\u3082\u3064\u69cb\u9020\u4f53\n\u624b\u672d\u306f5\u679a\u306e\u30ab\u30fc\u30c9\u306e\u914d\u5217\n\u5f79\u306fenum\n\n\nRed\n\u3068\u308a\u3042\u3048\u305a\u3001\u30c6\u30b9\u30c8\u30b3\u30fc\u30c9\u3092\u6b21\u306e\u901a\u308a\u4f5c\u6210\u3002\nPokerTest.swift\nimport XCTest\n\nclass PokerTest: XCTestCase {\n\n    override func setUp() {\n        super.setUp()\n        // Put setup code here. This method is called before the invocation of each test method in the class.\n    }\n\n    override func tearDown() {\n        // Put teardown code here. This method is called after the invocation of each test method in the class.\n        super.tearDown()\n    }\n\n\n    func testHightCard() {\n        let cards = [\n            Card(rank:1,  suit:\"\u2663\"),\n            Card(rank:9,  suit:\"\u2663\"),\n            Card(rank:8,  suit:\"\u2665\"),\n            Card(rank:7,  suit:\"\u2666\"),\n            Card(rank:5,  suit:\"\u2660\")\n        ];\n        XCTAssertEqual(Poker.getScore(cards), Hands.HIGH_CARD.score)\n    }\n\n}\n\n\u5f53\u7136\u3001\u30b3\u30f3\u30d1\u30a4\u30eb\u30a8\u30e9\u30fc\u306a\u306e\u3067\u3001\u6b21\u3092\u30d7\u30ed\u30c0\u30af\u30b7\u30e7\u30f3\u30b3\u30fc\u30c9\u306e\u4e2d\u3067\u4f5c\u6210\u3002\n\n\u30ab\u30fc\u30c9\u306e\u69cb\u9020\u4f53: Card\n\u5f79\u306eenum: Hands\ngetScore\u30e1\u30bd\u30c3\u30c9: \u3068\u308a\u3042\u3048\u305a\u30010\u3092return\u3059\u308b\u3002\n\nPoker.swift\nenum Hands {\n    case HIGH_CARD\n    case ONE_PAIR\n    case TWO_PAIR\n    case THREE_OF_A_KIND\n    case STRAIGHT\n    case FLUSH\n    case FULL_HOUSE\n    case FOUR_OF_A_KIND\n    case STRAIGHT_FLUSH\n    case ROYAL_FLUSH\n\n    var score: Int {\n        switch self {\n        case .HIGH_CARD: return 100\n        case .ONE_PAIR: return 200\n        case .TWO_PAIR: return 300\n        case .THREE_OF_A_KIND: return 400\n        case .STRAIGHT: return 500\n        case .FLUSH: return 600\n        case .FULL_HOUSE: return 700\n        case .FOUR_OF_A_KIND: return 800\n        case .STRAIGHT_FLUSH: return 900\n        case .ROYAL_FLUSH: return 1000\n        }\n    }\n}\n\nstruct Card {\n    let rank: Int\n    let suit: String\n}\n\nclass Poker{\n    class func getScore(cards: [Card]) -> Int {\n        return 0\n    }\n}\n\nPokerTest.swift\u306e\u753b\u9762\u3067Cmd+U\u3067\u30c6\u30b9\u30c8\u5b9f\u884c\u3002\n\u5f53\u7136\u3001Test\u306f\u5931\u6557\u3059\u308b\u3002\n\uff08PokerTest.swift\u306e\u30b3\u30fc\u30c9\u4e0a\u306b\u8d64\u3044X\u30de\u30fc\u30af\u304c\u3064\u304f\uff09\n\nGreen\nHIGH_CARD\u3092return\u3059\u308b\u3088\u3046\u306b\u4fee\u6b63\u3002\nclass Poker{\n    class func getScore(cards: [Card]) -> Int {\n        return Hands.HIGH_CARD.score\n    }\n}\n\nPokerTest.swift\u306e\u753b\u9762\u3067Cmd+U\u3067\u30c6\u30b9\u30c8\u5b9f\u884c\u3002\nTest\u304c\u6210\u529f\u3059\u308b\u3002\n\uff08PokerTest.swift\u306e\u30b3\u30fc\u30c9\u4e0a\u306b\u7dd1\u306e\u30c1\u30a7\u30c3\u30af\u30de\u30fc\u30af\u304c\u3064\u304f\uff09\n\nRefactor\n\u3053\u306e\u6642\u70b9\u3067\u306f\u306a\u3057\u3002\n\n\u30ef\u30f3\u30da\u30a2\u306e\u5b9f\u88c5\n\nRed\nPokerTest.swift\u306b\u6b21\u306e\u30e1\u30bd\u30c3\u30c9\u3092\u8ffd\u52a0\u3057\u3066\u30c6\u30b9\u30c8\u5b9f\u884c\nfunc testOnePair() {\n    let cards = [\n        Card(rank:9, suit:\"\u2663\"),\n        Card(rank:9, suit:\"\u2666\"),\n        Card(rank:1, suit:\"\u2663\"),\n        Card(rank:8, suit:\"\u2665\"),\n        Card(rank:5, suit:\"\u2660\")\n    ]\n    XCTAssertEqual(Poker.getScore(cards), Hands.ONE_PAIR.score)\n}\n\n\nGreen\nPoker.swift#getScore\u3092\u6b21\u306e\u3068\u304a\u308a\u4fee\u6b63\u3057\u3066\u30c6\u30b9\u30c8\u5b9f\u884c\nclass func getScore(cards: [Card]) -> Int {\n    // \u5404\u30e9\u30f3\u30af\u304c\u305d\u308c\u305e\u308c\u4f55\u679a\u3042\u308b\u304b\u3092numOfRanks\u306b\u4fdd\u5b58\n    var numOfRanks = [0,0,0,0,0,0,0,0,0,0,0,0,0,0]\n    for card in cards {\n        numOfRanks[card.rank]++\n    }\n\n    // ONE_PAIR\n    if find(numOfRanks, 2) != nil {\n        return Hands.ONE_PAIR.score\n    }\n\n    return Hands.HIGH_CARD.score\n}\n\n\nRefactor\nnumOfRanks\u306e\u5f15\u6570\u304crank\u306e\u5024\u306b\u306a\u3063\u3066\u3044\u308b\u306e\u304c\u308f\u304b\u308a\u306b\u304f\u3044\u306e\u3067\u30ea\u30d5\u30a1\u30af\u30bf\u30ea\u30f3\u30b0\u3057\u305f\u3044\u3002\n\u3067\u3082\u3001\u3061\u3087\u3063\u3068\u3044\u3044\u6848\u304c\u6d6e\u304b\u3070\u306a\u3044\u306e\u3067\u3002\u3002\u3002\n\n\u305d\u3093\u306a\u611f\u3058\u3067\u3084\u3063\u305f\u7d50\u679c\n\n\u3068\u308a\u3042\u3048\u305a\u3001\u52d5\u3044\u305f\u3051\u3069\u3001\u8272\u3005\u308f\u304b\u3063\u3066\u306a\u3044\u3002\nCollection\u30af\u30e9\u30b9\u306e\u30e1\u30bd\u30c3\u30c9\u306f\u3082\u3063\u3068\u6c17\u306e\u5229\u3044\u305f\u306e\u304c\u8272\u3005\u3042\u308b\u304b\u3068\u601d\u3063\u305f\u3089\u306a\u304f\u3066\u6b8b\u5ff5\u3002\n\u304d\u3063\u3068Swift\u3089\u3057\u304f\u306a\u3044\u66f8\u304d\u65b9\u306a\u3093\u3060\u3068\u601d\u3046\u3002\u3002\u3002\n\nPokerTest.swift\nimport XCTest\n\nclass PokerTest: XCTestCase {\n\n    override func setUp() {\n        super.setUp()\n        // Put setup code here. This method is called before the invocation of each test method in the class.\n    }\n\n    override func tearDown() {\n        // Put teardown code here. This method is called after the invocation of each test method in the class.\n        super.tearDown()\n    }\n\n    func testHightCard() {\n        let cards = [\n            Card(rank:1,  suit:\"\u2663\"),\n            Card(rank:9,  suit:\"\u2663\"),\n            Card(rank:8,  suit:\"\u2665\"),\n            Card(rank:7,  suit:\"\u2666\"),\n            Card(rank:5,  suit:\"\u2660\")\n        ];\n        XCTAssertEqual(Poker.getScore(cards), Hands.HIGH_CARD.score)\n    }\n\n    func testOnePair() {\n        let cards = [\n            Card(rank:9, suit:\"\u2663\"),\n            Card(rank:9, suit:\"\u2666\"),\n            Card(rank:1, suit:\"\u2663\"),\n            Card(rank:8, suit:\"\u2665\"),\n            Card(rank:5, suit:\"\u2660\")\n        ]\n        XCTAssertEqual(Poker.getScore(cards), Hands.ONE_PAIR.score)\n    }\n\n    func testTwoPair(){\n        let cards = [\n            Card(rank:9,  suit:\"\u2663\"),\n            Card(rank:9,  suit:\"\u2666\"),\n            Card(rank:5,  suit:\"\u2663\"),\n            Card(rank:5,  suit:\"\u2665\"),\n            Card(rank:1,  suit:\"\u2660\")\n        ]\n        XCTAssertEqual(Poker.getScore(cards), Hands.TWO_PAIR.score)\n    }\n\n    func testThreeOfAKind(){\n        let cards = [\n            Card(rank:9,  suit:\"\u2663\"),\n            Card(rank:9,  suit:\"\u2666\"),\n            Card(rank:9,  suit:\"\u2660\"),\n            Card(rank:1,  suit:\"\u2665\"),\n            Card(rank:7,  suit:\"\u2660\")\n        ]\n        XCTAssertEqual(Poker.getScore(cards), Hands.THREE_OF_A_KIND.score)\n    }\n\n    func testStraight(){\n        let cards = [\n            Card(rank:8,  suit:\"\u2665\"),\n            Card(rank:7,  suit:\"\u2666\"),\n            Card(rank:6,  suit:\"\u2666\"),\n            Card(rank:5,  suit:\"\u2660\"),\n            Card(rank:4,  suit:\"\u2665\")\n        ]\n        XCTAssertEqual(Poker.getScore(cards), Hands.STRAIGHT.score)\n    }\n\n    func testStraight2(){\n        let cards = [\n            Card(rank:13,  suit:\"\u2665\"),\n            Card(rank:1,  suit:\"\u2666\"),\n            Card(rank:2,  suit:\"\u2666\"),\n            Card(rank:3,  suit:\"\u2660\"),\n            Card(rank:4,  suit:\"\u2665\")\n        ]\n        XCTAssertEqual(Poker.getScore(cards), Hands.STRAIGHT.score)\n    }\n\n    func testFlush(){\n        let cards = [\n            Card(rank:13, suit:\"\u2665\"),\n            Card(rank:10, suit:\"\u2665\"),\n            Card(rank:9,  suit:\"\u2665\"),\n            Card(rank:6,  suit:\"\u2665\"),\n            Card(rank:2,  suit:\"\u2665\")\n        ]\n        XCTAssertEqual(Poker.getScore(cards), Hands.FLUSH.score)\n    }\n\n    func testFullHouse(){\n        let cards = [\n            Card(rank:5, suit:\"\u2663\"),\n            Card(rank:5, suit:\"\u2666\"),\n            Card(rank:5, suit:\"\u2665\"),\n            Card(rank:8, suit:\"\u2665\"),\n            Card(rank:8, suit:\"\u2660\")\n        ]\n        XCTAssertEqual(Poker.getScore(cards), Hands.FULL_HOUSE.score)\n    }\n\n    func testFourOfAKind(){\n        let cards = [\n            Card(rank:5, suit:\"\u2663\"),\n            Card(rank:5, suit:\"\u2666\"),\n            Card(rank:5, suit:\"\u2665\"),\n            Card(rank:5, suit:\"\u2660\"),\n            Card(rank:8, suit:\"\u2665\")\n        ]\n        XCTAssertEqual(Poker.getScore(cards), Hands.FOUR_OF_A_KIND.score)\n    }\n\n    func testStraightFlush(){\n        let cards = [\n            Card(rank:8, suit:\"\u2665\"),\n            Card(rank:7, suit:\"\u2665\"),\n            Card(rank:6, suit:\"\u2665\"),\n            Card(rank:5, suit:\"\u2665\"),\n            Card(rank:4, suit:\"\u2665\")\n        ]\n        XCTAssertEqual(Poker.getScore(cards), Hands.STRAIGHT_FLUSH.score)\n    }\n\n    func testRoyalStraightFlush(){\n        let cards = [\n            Card(rank:10, suit:\"\u2665\"),\n            Card(rank:11, suit:\"\u2665\"),\n            Card(rank:12, suit:\"\u2665\"),\n            Card(rank:13, suit:\"\u2665\"),\n            Card(rank:1, suit:\"\u2665\")\n        ]\n        XCTAssertEqual(Poker.getScore(cards), Hands.ROYAL_FLUSH.score)\n    }\n\n}\n\n\nPoker.swift\nenum Hands {\n    case HIGH_CARD\n    case ONE_PAIR\n    case TWO_PAIR\n    case THREE_OF_A_KIND\n    case STRAIGHT\n    case FLUSH\n    case FULL_HOUSE\n    case FOUR_OF_A_KIND\n    case STRAIGHT_FLUSH\n    case ROYAL_FLUSH\n\n    var score: Int {\n        switch self {\n        case .HIGH_CARD: return 100\n        case .ONE_PAIR: return 200\n        case .TWO_PAIR: return 300\n        case .THREE_OF_A_KIND: return 400\n        case .STRAIGHT: return 500\n        case .FLUSH: return 600\n        case .FULL_HOUSE: return 700\n        case .FOUR_OF_A_KIND: return 800\n        case .STRAIGHT_FLUSH: return 900\n        case .ROYAL_FLUSH: return 1000\n        }\n    }\n}\n\nstruct Card {\n    let rank: Int\n    let suit: String\n}\n\nstruct NUM {\n    static let MAX_RANK = 13 // \u30ab\u30fc\u30c9\u306e\u6700\u9ad8\u30e9\u30f3\u30af\uff08\u30ad\u30f3\u30b0\uff09\n    static let CARDS = 5 // \u624b\u672d\u306e\u6570\n}\n\nclass Poker{\n    class func getScore(cards: [Card]) -> Int {\n        // \u5404\u30e9\u30f3\u30af\u304c\u305d\u308c\u305e\u308c\u4f55\u679a\u3042\u308b\u304b\u3092numOfRanks\u306b\u4fdd\u5b58\n        var numOfRanks = [0,0,0,0,0,0,0,0,0,0,0,0,0,0]\n        for card in cards {\n            numOfRanks[card.rank]++\n        }\n\n        // ROYAL_STRAIGHT_FLUSH\n        if isStraight(cards, numOfRanks: numOfRanks) && isFlush(cards) && numOfRanks[10] == 1 && numOfRanks[1] == 1 {\n            return Hands.ROYAL_FLUSH.score\n        }\n        // STRAIGHT_FLUSH\n        if isStraight(cards, numOfRanks: numOfRanks) && isFlush(cards) {\n            return Hands.STRAIGHT_FLUSH.score\n        }\n        // FOUR_OF_A_KIND\n        if find(numOfRanks, 4) != nil {\n            return Hands.FOUR_OF_A_KIND.score\n        }\n        // FULL_HOUSE\n        if find(numOfRanks, 3) != nil && find(numOfRanks, 2) != nil {\n            return Hands.FULL_HOUSE.score\n        }\n        // FLUSH\n        if isFlush(cards) {\n            return Hands.FLUSH.score\n        }\n        // STRAIGHT\n        if isStraight(cards, numOfRanks: numOfRanks) {\n            return Hands.STRAIGHT.score\n        }\n        // THREE_OF_A_KIND\n        if find(numOfRanks, 3) != nil {\n            return Hands.THREE_OF_A_KIND.score\n        }\n        // TWO_PAIR\n        if numOfRanks.filter({$0 == 2}).count == 2 {\n            return Hands.TWO_PAIR.score\n        }\n        // ONE_PAIR\n        if find(numOfRanks, 2) != nil {\n            return Hands.ONE_PAIR.score\n        }\n        // HIGH_CARD\n        return Hands.HIGH_CARD.score\n    }\n\n    /**\n     * STRAIGHT\u306e\u5224\u5b9a\n     * numOfRanks\u306e\u4e2d\u304b\u3089\uff15\u679a\u3068\u3063\u3066\u3001\u5168\u90e8\u304c1\u306e\u3082\u306e\u304c\u3042\u308c\u3070\u30b9\u30c8\u30ec\u30fc\u30c8\n     * 10, 11, 12, 13, 1\u306e\u3088\u3046\u306b\u5de1\u56de\u3059\u308b\u30d1\u30bf\u30fc\u30f3\u3082\u3042\u308b\u306e\u3067\u3001\u306f\u3058\u3081\u306bnumOfRanks + numOfRanks[1 ... NUM_OF_CARDS-1]\u3068\u3057\u3066\u5de1\u56de\u3055\u305b\u3066\u3044\u308b\n     */\n    private class func isStraight(cards: [Card], numOfRanks: [Int]) -> Bool {\n        var isStraight = false\n        for var i = 1; i <= NUM.MAX_RANK; i++ {\n            if (numOfRanks + numOfRanks[1 ... NUM.CARDS-1])[i ..< i+NUM.CARDS].reduce(true, { $0 && $1 == 1 }) {\n                isStraight = true\n                break\n            }\n        }\n        return isStraight\n    }\n\n    // FLUSH\u306e\u5224\u5b9a\n    private class func isFlush(cards: [Card]) -> Bool {\n        var isFlush = true\n        for var i = 1; i < NUM.CARDS; i++ {\n            isFlush = isFlush && cards[i-1].suit == cards[i].suit\n        }\n        return isFlush\n    }\n}\n\n\nSwift\u3092\u3055\u308f\u3063\u3066\u307f\u3088\u3046\u3068\u3044\u3046\u3053\u3068\u3067\u3001[DevNomi](http://xpfriend.com/DevNomi/#/start)\u3067\u304a\u99b4\u67d3\u307f\u306e\u30dd\u30fc\u30ab\u30fc\u5f79\u5224\u5b9a\u3092TDD\u3063\u307d\u304f\u3084\u3063\u3066\u307f\u307e\u3057\u305f\u3002\n\n# \u74b0\u5883\u69cb\u7bc9\n\nApp\u3000Store\u304b\u3089Xcode\u3092\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3002\n\n# Playground\u3067\u7df4\u7fd2\n\nSwift\u3063\u3066\u3069\u3093\u306a\u3082\u3093\u304b\u3044\u3058\u308b\u305f\u3081\u306b\u3001Playground\u3067\u3044\u3058\u3063\u3066\u307f\u308b\u3002\n\n\u521d\u671f\u753b\u9762 => Get started with a playground\n\n\u203b \u300cWEB+DB PRESS vol.84\u300d\u3092\u8aad\u307f\u306a\u304c\u3089\u66f8\u3044\u305f\u3089\u306a\u3093\u3068\u306a\u304f\u3002\u3002\u3002\n\n\n# \u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u4f5c\u6210\n\n1. \u521d\u671f\u753b\u9762 => Create a new Xcode project\n2. OS X => Other => Empty\n3. Product Name: Poker\n\n# Poker\u30af\u30e9\u30b9\u306e\u4f5c\u6210\n\n1. \u753b\u9762\u5de6\u30da\u30a4\u30f3\u306e\u5de6\u304b\u3089\uff14\u3064\u76ee\u306e\u30a2\u30a4\u30b3\u30f3\u3092\u30af\u30ea\u30c3\u30af\u3057\u3066[Test Navigator]\u3092\u958b\u304f\n2. \u753b\u9762\u5de6\u4e0b\u306e[+]\u30a2\u30a4\u30b3\u30f3\u3092\u30af\u30ea\u30c3\u30af => New Test Target\n3. Product Name: Poker, Organization Identifier: \u4efb\u610f\n\n\u203b \u306a\u305c\u304b\u30c6\u30b9\u30c8\u304c\u3067\u304d\u3066\u3057\u307e\u3046\u306e\u3067\u3001\u672c\u5f53\u306f\u624b\u9806\u304c\u9055\u3046\uff1f\n\n![swift1.png](https://qiita-image-store.s3.amazonaws.com/0/50720/c0860bfd-6c94-91e4-6c17-40faa0bd1cea.png \"swift1.png\")\n\n# \u30c6\u30b9\u30c8\u30af\u30e9\u30b9\u306e\u4f5c\u6210\n\n1. \u753b\u9762\u5de6\u30da\u30a4\u30f3\u306e\u5de6\u304b\u3089\uff14\u3064\u76ee\u306e\u30a2\u30a4\u30b3\u30f3\u3092\u30af\u30ea\u30c3\u30af\u3057\u3066[Test Navigator]\u3092\u958b\u304f\n2. \u753b\u9762\u5de6\u4e0b\u306e[+]\u30a2\u30a4\u30b3\u30f3\u3092\u30af\u30ea\u30c3\u30af => New Test Class\n3. OS X => Source => Test Case Class\n4. Class: PokerTest, Subclass of: XCTestCase, Language: Swift\n\n# \u30c6\u30b9\u30c8\u306e\u5b9f\u884c\n\n## \u30c6\u30b9\u30c8\u5b9f\u884c\u74b0\u5883\u8a2d\u5b9a\n\n\u3084\u3063\u3066\u304a\u304f\u3068\u30c6\u30b9\u30c8\u5b9f\u884c\u6642\u306b\u30b3\u30f3\u30bd\u30fc\u30eb\u304c\u8868\u793a\u3055\u308c\u308b\u3002\n\n1.Preference => Behaviors => Testing => Starts\n2.[Show] debugger with [Valiables & Console] \u3092\u30c1\u30a7\u30c3\u30af\n\n![swift2.png](https://qiita-image-store.s3.amazonaws.com/0/50720/d1a5c686-c35e-1064-dad3-e5627d9224fe.png \"swift2.png\")\n\n## \u30c6\u30b9\u30c8\u306e\u8a66\u3057\u6253\u3061\n\n1. \u753b\u9762\u5de6\u4e0a\u306e\u30d5\u30a9\u30eb\u30c0\u30fc\u30a2\u30a4\u30b3\u30f3\u3067[Project Navigator]\u3092\u958b\u304f\n2. PokerTest.swift\u3092\u6b21\u306e\u3068\u304a\u308a\u7de8\u96c6\n\n```swift\nimport XCTest\n\nclass PokerTest: XCTestCase {\n    \n    override func setUp() {\n        super.setUp()\n        // Put setup code here. This method is called before the invocation of each test method in the class.\n    }\n    \n    override func tearDown() {\n        // Put teardown code here. This method is called after the invocation of each test method in the class.\n        super.tearDown()\n    }\n    \n    \n    func test() {\n        XCTAssertEqual(true, true)\n    }\n    \n}\n\n```\n\n3.Cmd+U\n\n# \u30d6\u30bf\u306e\u5b9f\u88c5\n\n## \u65b9\u91dd\n\n* 1\u679a\u306e\u30ab\u30fc\u30c9\u306fRank\u3068Suit\u3092\u3082\u3064\u69cb\u9020\u4f53\n* \u624b\u672d\u306f5\u679a\u306e\u30ab\u30fc\u30c9\u306e\u914d\u5217\n* \u5f79\u306fenum\n\n## Red\n\n\u3068\u308a\u3042\u3048\u305a\u3001\u30c6\u30b9\u30c8\u30b3\u30fc\u30c9\u3092\u6b21\u306e\u901a\u308a\u4f5c\u6210\u3002\n\nPokerTest.swift\n\n```\nimport XCTest\n\nclass PokerTest: XCTestCase {\n    \n    override func setUp() {\n        super.setUp()\n        // Put setup code here. This method is called before the invocation of each test method in the class.\n    }\n    \n    override func tearDown() {\n        // Put teardown code here. This method is called after the invocation of each test method in the class.\n        super.tearDown()\n    }\n    \n    \n    func testHightCard() {\n        let cards = [\n            Card(rank:1,  suit:\"\u2663\"),\n            Card(rank:9,  suit:\"\u2663\"),\n            Card(rank:8,  suit:\"\u2665\"),\n            Card(rank:7,  suit:\"\u2666\"),\n            Card(rank:5,  suit:\"\u2660\")\n        ];\n        XCTAssertEqual(Poker.getScore(cards), Hands.HIGH_CARD.score)\n    }\n    \n}\n```\n\n\u5f53\u7136\u3001\u30b3\u30f3\u30d1\u30a4\u30eb\u30a8\u30e9\u30fc\u306a\u306e\u3067\u3001\u6b21\u3092\u30d7\u30ed\u30c0\u30af\u30b7\u30e7\u30f3\u30b3\u30fc\u30c9\u306e\u4e2d\u3067\u4f5c\u6210\u3002\n\n* \u30ab\u30fc\u30c9\u306e\u69cb\u9020\u4f53: Card\n* \u5f79\u306eenum: Hands\n* getScore\u30e1\u30bd\u30c3\u30c9: \u3068\u308a\u3042\u3048\u305a\u30010\u3092return\u3059\u308b\u3002\n\nPoker.swift\n\n```swift\nenum Hands {\n    case HIGH_CARD\n    case ONE_PAIR\n    case TWO_PAIR\n    case THREE_OF_A_KIND\n    case STRAIGHT\n    case FLUSH\n    case FULL_HOUSE\n    case FOUR_OF_A_KIND\n    case STRAIGHT_FLUSH\n    case ROYAL_FLUSH\n    \n    var score: Int {\n        switch self {\n        case .HIGH_CARD: return 100\n        case .ONE_PAIR: return 200\n        case .TWO_PAIR: return 300\n        case .THREE_OF_A_KIND: return 400\n        case .STRAIGHT: return 500\n        case .FLUSH: return 600\n        case .FULL_HOUSE: return 700\n        case .FOUR_OF_A_KIND: return 800\n        case .STRAIGHT_FLUSH: return 900\n        case .ROYAL_FLUSH: return 1000\n        }\n    }\n}\n\nstruct Card {\n    let rank: Int\n    let suit: String\n}\n\nclass Poker{\n    class func getScore(cards: [Card]) -> Int {\n        return 0\n    }\n}\n```\n\nPokerTest.swift\u306e\u753b\u9762\u3067Cmd+U\u3067\u30c6\u30b9\u30c8\u5b9f\u884c\u3002\n\u5f53\u7136\u3001Test\u306f\u5931\u6557\u3059\u308b\u3002\n\uff08PokerTest.swift\u306e\u30b3\u30fc\u30c9\u4e0a\u306b\u8d64\u3044X\u30de\u30fc\u30af\u304c\u3064\u304f\uff09\n\n## Green\n\nHIGH_CARD\u3092return\u3059\u308b\u3088\u3046\u306b\u4fee\u6b63\u3002\n\n```swift\nclass Poker{\n    class func getScore(cards: [Card]) -> Int {\n        return Hands.HIGH_CARD.score\n    }\n}\n```\n\nPokerTest.swift\u306e\u753b\u9762\u3067Cmd+U\u3067\u30c6\u30b9\u30c8\u5b9f\u884c\u3002\nTest\u304c\u6210\u529f\u3059\u308b\u3002\n\uff08PokerTest.swift\u306e\u30b3\u30fc\u30c9\u4e0a\u306b\u7dd1\u306e\u30c1\u30a7\u30c3\u30af\u30de\u30fc\u30af\u304c\u3064\u304f\uff09\n\n## Refactor\n\n\u3053\u306e\u6642\u70b9\u3067\u306f\u306a\u3057\u3002\n\n# \u30ef\u30f3\u30da\u30a2\u306e\u5b9f\u88c5\n\n## Red\n\nPokerTest.swift\u306b\u6b21\u306e\u30e1\u30bd\u30c3\u30c9\u3092\u8ffd\u52a0\u3057\u3066\u30c6\u30b9\u30c8\u5b9f\u884c\n\n```swift\nfunc testOnePair() {\n\tlet cards = [\n        Card(rank:9, suit:\"\u2663\"),\n        Card(rank:9, suit:\"\u2666\"),\n        Card(rank:1, suit:\"\u2663\"),\n        Card(rank:8, suit:\"\u2665\"),\n        Card(rank:5, suit:\"\u2660\")\n    ]\n    XCTAssertEqual(Poker.getScore(cards), Hands.ONE_PAIR.score)\n}\n```\n\n## Green\n\nPoker.swift#getScore\u3092\u6b21\u306e\u3068\u304a\u308a\u4fee\u6b63\u3057\u3066\u30c6\u30b9\u30c8\u5b9f\u884c\n\n```swift\nclass func getScore(cards: [Card]) -> Int {\n    // \u5404\u30e9\u30f3\u30af\u304c\u305d\u308c\u305e\u308c\u4f55\u679a\u3042\u308b\u304b\u3092numOfRanks\u306b\u4fdd\u5b58\n    var numOfRanks = [0,0,0,0,0,0,0,0,0,0,0,0,0,0]\n    for card in cards {\n        numOfRanks[card.rank]++\n    }\n    \n    // ONE_PAIR\n    if find(numOfRanks, 2) != nil {\n        return Hands.ONE_PAIR.score\n    }\n    \n    return Hands.HIGH_CARD.score\n}\n```\n\n## Refactor\n\nnumOfRanks\u306e\u5f15\u6570\u304crank\u306e\u5024\u306b\u306a\u3063\u3066\u3044\u308b\u306e\u304c\u308f\u304b\u308a\u306b\u304f\u3044\u306e\u3067\u30ea\u30d5\u30a1\u30af\u30bf\u30ea\u30f3\u30b0\u3057\u305f\u3044\u3002\n\u3067\u3082\u3001\u3061\u3087\u3063\u3068\u3044\u3044\u6848\u304c\u6d6e\u304b\u3070\u306a\u3044\u306e\u3067\u3002\u3002\u3002\n\n# \u305d\u3093\u306a\u611f\u3058\u3067\u3084\u3063\u305f\u7d50\u679c\n\n* \u3068\u308a\u3042\u3048\u305a\u3001\u52d5\u3044\u305f\u3051\u3069\u3001\u8272\u3005\u308f\u304b\u3063\u3066\u306a\u3044\u3002\n* Collection\u30af\u30e9\u30b9\u306e\u30e1\u30bd\u30c3\u30c9\u306f\u3082\u3063\u3068\u6c17\u306e\u5229\u3044\u305f\u306e\u304c\u8272\u3005\u3042\u308b\u304b\u3068\u601d\u3063\u305f\u3089\u306a\u304f\u3066\u6b8b\u5ff5\u3002\n* \u304d\u3063\u3068Swift\u3089\u3057\u304f\u306a\u3044\u66f8\u304d\u65b9\u306a\u3093\u3060\u3068\u601d\u3046\u3002\u3002\u3002\n\nPokerTest.swift\n\n```swift\nimport XCTest\n\nclass PokerTest: XCTestCase {\n    \n    override func setUp() {\n        super.setUp()\n        // Put setup code here. This method is called before the invocation of each test method in the class.\n    }\n    \n    override func tearDown() {\n        // Put teardown code here. This method is called after the invocation of each test method in the class.\n        super.tearDown()\n    }\n    \n    func testHightCard() {\n        let cards = [\n            Card(rank:1,  suit:\"\u2663\"),\n            Card(rank:9,  suit:\"\u2663\"),\n            Card(rank:8,  suit:\"\u2665\"),\n            Card(rank:7,  suit:\"\u2666\"),\n            Card(rank:5,  suit:\"\u2660\")\n        ];\n        XCTAssertEqual(Poker.getScore(cards), Hands.HIGH_CARD.score)\n    }\n    \n    func testOnePair() {\n        let cards = [\n            Card(rank:9, suit:\"\u2663\"),\n            Card(rank:9, suit:\"\u2666\"),\n            Card(rank:1, suit:\"\u2663\"),\n            Card(rank:8, suit:\"\u2665\"),\n            Card(rank:5, suit:\"\u2660\")\n        ]\n        XCTAssertEqual(Poker.getScore(cards), Hands.ONE_PAIR.score)\n    }\n    \n    func testTwoPair(){\n        let cards = [\n            Card(rank:9,  suit:\"\u2663\"),\n            Card(rank:9,  suit:\"\u2666\"),\n            Card(rank:5,  suit:\"\u2663\"),\n            Card(rank:5,  suit:\"\u2665\"),\n            Card(rank:1,  suit:\"\u2660\")\n        ]\n        XCTAssertEqual(Poker.getScore(cards), Hands.TWO_PAIR.score)\n    }\n    \n    func testThreeOfAKind(){\n        let cards = [\n            Card(rank:9,  suit:\"\u2663\"),\n            Card(rank:9,  suit:\"\u2666\"),\n            Card(rank:9,  suit:\"\u2660\"),\n            Card(rank:1,  suit:\"\u2665\"),\n            Card(rank:7,  suit:\"\u2660\")\n        ]\n        XCTAssertEqual(Poker.getScore(cards), Hands.THREE_OF_A_KIND.score)\n    }\n    \n    func testStraight(){\n        let cards = [\n            Card(rank:8,  suit:\"\u2665\"),\n            Card(rank:7,  suit:\"\u2666\"),\n            Card(rank:6,  suit:\"\u2666\"),\n            Card(rank:5,  suit:\"\u2660\"),\n            Card(rank:4,  suit:\"\u2665\")\n        ]\n        XCTAssertEqual(Poker.getScore(cards), Hands.STRAIGHT.score)\n    }\n    \n    func testStraight2(){\n        let cards = [\n            Card(rank:13,  suit:\"\u2665\"),\n            Card(rank:1,  suit:\"\u2666\"),\n            Card(rank:2,  suit:\"\u2666\"),\n            Card(rank:3,  suit:\"\u2660\"),\n            Card(rank:4,  suit:\"\u2665\")\n        ]\n        XCTAssertEqual(Poker.getScore(cards), Hands.STRAIGHT.score)\n    }\n    \n    func testFlush(){\n        let cards = [\n            Card(rank:13, suit:\"\u2665\"),\n            Card(rank:10, suit:\"\u2665\"),\n            Card(rank:9,  suit:\"\u2665\"),\n            Card(rank:6,  suit:\"\u2665\"),\n            Card(rank:2,  suit:\"\u2665\")\n        ]\n        XCTAssertEqual(Poker.getScore(cards), Hands.FLUSH.score)\n    }\n    \n    func testFullHouse(){\n        let cards = [\n            Card(rank:5, suit:\"\u2663\"),\n            Card(rank:5, suit:\"\u2666\"),\n            Card(rank:5, suit:\"\u2665\"),\n            Card(rank:8, suit:\"\u2665\"),\n            Card(rank:8, suit:\"\u2660\")\n        ]\n        XCTAssertEqual(Poker.getScore(cards), Hands.FULL_HOUSE.score)\n    }\n    \n    func testFourOfAKind(){\n        let cards = [\n            Card(rank:5, suit:\"\u2663\"),\n            Card(rank:5, suit:\"\u2666\"),\n            Card(rank:5, suit:\"\u2665\"),\n            Card(rank:5, suit:\"\u2660\"),\n            Card(rank:8, suit:\"\u2665\")\n        ]\n        XCTAssertEqual(Poker.getScore(cards), Hands.FOUR_OF_A_KIND.score)\n    }\n    \n    func testStraightFlush(){\n        let cards = [\n            Card(rank:8, suit:\"\u2665\"),\n            Card(rank:7, suit:\"\u2665\"),\n            Card(rank:6, suit:\"\u2665\"),\n            Card(rank:5, suit:\"\u2665\"),\n            Card(rank:4, suit:\"\u2665\")\n        ]\n        XCTAssertEqual(Poker.getScore(cards), Hands.STRAIGHT_FLUSH.score)\n    }\n    \n    func testRoyalStraightFlush(){\n        let cards = [\n            Card(rank:10, suit:\"\u2665\"),\n            Card(rank:11, suit:\"\u2665\"),\n            Card(rank:12, suit:\"\u2665\"),\n            Card(rank:13, suit:\"\u2665\"),\n            Card(rank:1, suit:\"\u2665\")\n        ]\n        XCTAssertEqual(Poker.getScore(cards), Hands.ROYAL_FLUSH.score)\n    }\n    \n}\n\n```\n\nPoker.swift\n\n```swift\nenum Hands {\n    case HIGH_CARD\n    case ONE_PAIR\n    case TWO_PAIR\n    case THREE_OF_A_KIND\n    case STRAIGHT\n    case FLUSH\n    case FULL_HOUSE\n    case FOUR_OF_A_KIND\n    case STRAIGHT_FLUSH\n    case ROYAL_FLUSH\n    \n    var score: Int {\n        switch self {\n        case .HIGH_CARD: return 100\n        case .ONE_PAIR: return 200\n        case .TWO_PAIR: return 300\n        case .THREE_OF_A_KIND: return 400\n        case .STRAIGHT: return 500\n        case .FLUSH: return 600\n        case .FULL_HOUSE: return 700\n        case .FOUR_OF_A_KIND: return 800\n        case .STRAIGHT_FLUSH: return 900\n        case .ROYAL_FLUSH: return 1000\n        }\n    }\n}\n\nstruct Card {\n    let rank: Int\n    let suit: String\n}\n\nstruct NUM {\n    static let MAX_RANK = 13 // \u30ab\u30fc\u30c9\u306e\u6700\u9ad8\u30e9\u30f3\u30af\uff08\u30ad\u30f3\u30b0\uff09\n    static let CARDS = 5 // \u624b\u672d\u306e\u6570\n}\n\nclass Poker{\n    class func getScore(cards: [Card]) -> Int {\n        // \u5404\u30e9\u30f3\u30af\u304c\u305d\u308c\u305e\u308c\u4f55\u679a\u3042\u308b\u304b\u3092numOfRanks\u306b\u4fdd\u5b58\n        var numOfRanks = [0,0,0,0,0,0,0,0,0,0,0,0,0,0]\n        for card in cards {\n            numOfRanks[card.rank]++\n        }\n        \n        // ROYAL_STRAIGHT_FLUSH\n        if isStraight(cards, numOfRanks: numOfRanks) && isFlush(cards) && numOfRanks[10] == 1 && numOfRanks[1] == 1 {\n            return Hands.ROYAL_FLUSH.score\n        }\n        // STRAIGHT_FLUSH\n        if isStraight(cards, numOfRanks: numOfRanks) && isFlush(cards) {\n            return Hands.STRAIGHT_FLUSH.score\n        }\n        // FOUR_OF_A_KIND\n        if find(numOfRanks, 4) != nil {\n            return Hands.FOUR_OF_A_KIND.score\n        }\n        // FULL_HOUSE\n        if find(numOfRanks, 3) != nil && find(numOfRanks, 2) != nil {\n            return Hands.FULL_HOUSE.score\n        }\n        // FLUSH\n        if isFlush(cards) {\n            return Hands.FLUSH.score\n        }\n        // STRAIGHT\n        if isStraight(cards, numOfRanks: numOfRanks) {\n            return Hands.STRAIGHT.score\n        }\n        // THREE_OF_A_KIND\n        if find(numOfRanks, 3) != nil {\n            return Hands.THREE_OF_A_KIND.score\n        }\n        // TWO_PAIR\n        if numOfRanks.filter({$0 == 2}).count == 2 {\n            return Hands.TWO_PAIR.score\n        }\n        // ONE_PAIR\n        if find(numOfRanks, 2) != nil {\n            return Hands.ONE_PAIR.score\n        }\n        // HIGH_CARD\n        return Hands.HIGH_CARD.score\n    }\n    \n    /**\n     * STRAIGHT\u306e\u5224\u5b9a\n     * numOfRanks\u306e\u4e2d\u304b\u3089\uff15\u679a\u3068\u3063\u3066\u3001\u5168\u90e8\u304c1\u306e\u3082\u306e\u304c\u3042\u308c\u3070\u30b9\u30c8\u30ec\u30fc\u30c8\n     * 10, 11, 12, 13, 1\u306e\u3088\u3046\u306b\u5de1\u56de\u3059\u308b\u30d1\u30bf\u30fc\u30f3\u3082\u3042\u308b\u306e\u3067\u3001\u306f\u3058\u3081\u306bnumOfRanks + numOfRanks[1 ... NUM_OF_CARDS-1]\u3068\u3057\u3066\u5de1\u56de\u3055\u305b\u3066\u3044\u308b\n     */\n    private class func isStraight(cards: [Card], numOfRanks: [Int]) -> Bool {\n        var isStraight = false\n        for var i = 1; i <= NUM.MAX_RANK; i++ {\n            if (numOfRanks + numOfRanks[1 ... NUM.CARDS-1])[i ..< i+NUM.CARDS].reduce(true, { $0 && $1 == 1 }) {\n                isStraight = true\n                break\n            }\n        }\n        return isStraight\n    }\n    \n    // FLUSH\u306e\u5224\u5b9a\n    private class func isFlush(cards: [Card]) -> Bool {\n        var isFlush = true\n        for var i = 1; i < NUM.CARDS; i++ {\n            isFlush = isFlush && cards[i-1].suit == cards[i].suit\n        }\n        return isFlush\n    }\n}\n```\n\n", "tags": ["TDD", "Swift"]}