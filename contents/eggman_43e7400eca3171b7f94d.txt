{"context": "GCC tree\u306e\u8996\u899a\u5316 \u3067\u4f5c\u6210\u3057\u305ftree\u3092\u8aad\u3093\u3067\u307f\u307e\u3057\u305f\u3002\ntree\u306fgcc\u306efront end\u3067\u4f7f\u308f\u308c\u3066\u3044\u308b\u69cb\u6587\u6728\u3092\u8868\u3059\u30c7\u30fc\u30bf\u69cb\u9020\u3067\u3059\u3002\n\n\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u3068tree\u306e\u56f3\n\n\u8aac\u660e\u3059\u308b\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u3068\u3001gcc-4.x\u306etree dump\u304b\u3089\u4f5c\u3063\u305f\u56f3\u3067\u3059\u3002\n\nint main() {\n    return 0;\n}\n\n\n\ntree\u306e\u8aad\u307f\u65b9\n\n\u56db\u89d2\u5f62\u304ctree node\u306b1\u5bfe1\u306b\u5bfe\u5fdc\u3057\u3066\u3044\u307e\u3059\u3002\n\u56db\u89d2\u5f62\u4e0a\u6bb5\u306e\u6570\u5b57\u306fnode\u306e\u30e6\u30cb\u30fc\u30afID\u3067\u3059\u3002\n\u56db\u89d2\u5f62\u4e0b\u6bb5\u306e\u5de6\u7aef\u306e\u8981\u7d20\u306fnode\u306ecode\u3067\u3059\u3002node\u306e\u7a2e\u985e\u3092\u8868\u3057\u307e\u3059\u3002\n\u56db\u89d2\u5f62\u4e0b\u6bb5code\u3088\u308a\u53f3\u306b\u3042\u308b\u8981\u7d20\u306ftree code\u3084\u3001\u305d\u306e\u4ed6\u6761\u4ef6\u306b\u3088\u308a\u7570\u306a\u308a\u307e\u3059\u3002\n\u77e2\u5370\u304cnode\u306e\u8981\u7d20\u304b\u3089node\u3078\u53c2\u7167\u3057\u3066\u3044\u308b\u3053\u3068\u3092\u793a\u3057\u307e\u3059\u3002\nnode\u306e\u60c5\u5831\u306fnode\u5185\u306b\u4fdd\u6301\u3059\u308b\u5834\u5408\u3001node\u3092\u53c2\u7167\u3059\u308b\u5834\u5408\u3001\u30dd\u30a4\u30f3\u30bf\u3092\u53c2\u7167\u3059\u308b\u5834\u5408\u304c\u3042\u308a\u307e\u3059\u3002\ngcc\u306etree dump\u306f\u3001tree\u306e\u3059\u3079\u3066\u306e\u60c5\u5831\u3092\u51fa\u529b\u3057\u3066\u3044\u308b\u308f\u3051\u3067\u306f\u306a\u3044\u3067\u3059\u3002\u3082\u3063\u3068\u8a73\u3057\u3044\u60c5\u5831\u304c\u77e5\u308a\u305f\u3044\u4eba\u306f\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u3092\u8aad\u307f\u307e\u3057\u3087\u3046\u3002\n\n\n\u6574\u6570\u5b9a\u6570\u306etree\n\n\u6574\u6570\u5b9a\u6570\u306ecode\u306finteger_cst\u3067\u3059\u3002\u3000\u8981\u7d20\u3068\u3057\u3066\u578b(type)\u3068\u5024(high,low)\u3092\u6301\u3061\u307e\u3059\u3002\n\u5024\u306f\u4e0a\u4f4d high\u3068\u4e0b\u4f4d low \u306b\u308f\u304b\u308c\u3066\u3044\u307e\u3059\u3002high\u304c0\u306e\u5834\u5408\u306f\u3001high\u306fdump\u3067\u8868\u793a\u3055\u308c\u307e\u305b\u3093(\u4f8b:\n\uff11\uff13\u306e\u30ce\u30fc\u30c9)\u3002dump\u3067\u306f\u5024\u3092signed\u3068\u3057\u3066\u8868\u793a\u3057\u307e\u3059\u3002low\u306buint64_t\u306e\u6700\u5927\u5024\u304c\u5165\u3063\u3066\u3044\u308b\u3068-1\u3068\u8868\u793a\u3055\u308c\u307e\u3059\u3002\uff08\u4f8b:22\u306e\u30ce\u30fc\u30c9)\n\u5024\u304c\u8ca0\u306e\u5834\u5408\u306f\u3001\uff12\u306e\u88dc\u6570\u3067\u683c\u7d0d\u3059\u308b\u306e\u3067\u3001high\u304c-1 \u306b\u306a\u308a\u307e\u3059\u3002(\u4f8b:12\u306e\u30ce\u30fc\u30c9)\ntree dump\u306e\u56f3\u3067\u306f\u30019, 11, 12,\u300013, 20, 21, 22\u304c\u6574\u6570\u5b9a\u6570\u306enode\u3067\u3059\u3002\n\u56f3\u306e\u4e2d\u306einteger_cst\u306etree\n\n\n9 int\u578b\u3067\u5024\u304c0\n11 bitsizetype\u578b\u3067\u5024\u304c32\n12 int\u578b-2147483648\n13 int\u578b\u3067\u5024\u304c2147483647\n20 bitsizetype\u578b\u3067\u5024\u304c64\n21 bitsizetype\u578b\u3067\u5024\u304c0\n21 bitsizetype\u578b\u3067\u5024\u304c0xFFFFFFFF\n\n\n\n\n\u578b\u5ba3\u8a00\u306etree\n\ntree\u306e\u56f3\u306b\u306f\u3001void\u306e\u578b\u5ba3\u8a00 \u3068 int\u306e\u578b\u5ba3\u8a00 \u304c\u3042\u308a\u307e\u3059\u3002\n \u578b\u5ba3\u8a00\u306etree\u57fa\u672c\u5f62\u306f\uff13\u3064\u306e\u30ce\u30fc\u30c9\u304c\u542b\u307e\u308c\u307e\u3059\u3002\n\n\ntype_decl \u578b\u5ba3\u8a00 name\u3068type\u306e\u53c2\u7167\u3092\u6301\u3064\nidentifer_node \u578b\u540d \u6587\u5b57\u5217\u306e\u30dd\u30a4\u30f3\u30bf\u53c2\u7167strg\u3068\u6587\u5b57\u5217\u9577lengt\u3092\u6301\u3064\n\u306a\u3093\u3068\u304b_type \u578b \u578b\u306b\u3088\u308a\u6301\u3064\u8981\u7d20\u304c\u7570\u306a\u308b\u3002name\u3068algn\u306f\u6700\u4f4e\u9650\u3042\u308b\u3002 (algn\u304c\u3088\u304f\u308f\u304b\u3089\u306a\u3044\u3002)\n\n\n2, 4, 8\u304cvoid\u306e\u578b\u5ba3\u8a00\u3067\u3059\u3002\n\n\n4 \u578b\u5ba3\u8a00\n6 \u578b\u540d \"void\" \n2 \u578b void_type\u3067algn\u304c8\n\n\n7, 10, 12, 13, 15\u304cint\u306e\u578b\u5ba3\u8a00\u3067\u3059\u3002\n\n\n10 \u578b\u3092\u5ba3\u8a00\n15 \u578b\u540d \"int\"\n7 \u578b\u306finteger\u3067\u7cbe\u5ea6\u3001signed\u3001align\u304c32\u3067\u3001\u540d\u524d\u3001\u30b5\u30a4\u30ba\u3001\u6700\u5c0f\u5024\u3001\u6700\u5927\u5024\u306e\u53c2\u7167\u3092\u6301\u3064\u3002\n11 \u578b\u306e\u30b5\u30a4\u30ba\u304c32\n12 \u578b\u306e\u6700\u5c0f\u5024\u304c-2147483648\n13 \u578b\u306e\u6700\u5927\u5024\u304c2147483647\n\n\n\u56f3\u3092\u898b\u308b\u3068\u5206\u304b\u308b\u306e\u3067\u3059\u304c\u3001tree\u5185\u3067\u578b\u3092\u53c2\u7167\u3059\u308b\u5834\u5408\u306f2,11\u306e\u578b\u306etree\u3092\u53c2\u7167\u3057\u307e\u3059\u3002\n\n\nGCC internal types \u306etree\n\nGCC internal types\u306fGCC\u304c\u5185\u90e8\u3067\u4f7f\u3046\u578b\u3067\u3059\u3002\u901a\u5e38\u3068\u7570\u306a\u308a\u578b\u5ba3\u8a00\u304c\u3042\u308a\u307e\u305b\u3093\u3002\n16, 19, 20, 21, 23 \u304cGCC internal types \u306e bitsizetype\u306etree\u3059\u3002 type_decl\u304c\u30ea\u30f3\u30af\u3055\u308c\u3066\u3044\u307e\u305b\u3093\u3002\n\u3000* 16 \u578b integer\u3067\u30b5\u30a4\u30ba\u3001\u7cbe\u5ea6\u3001unsigned\u3001\u6700\u5c0f\u5024\u3001\u6700\u5927\u5024\n\u3000* 19 \u578b\u540d \"bitsizetype\"\n\u3000* 20 \u578b\u306e\u30b5\u30a4\u30ba\u304c64bit\n\u3000* 21 \u578b\u306e\u6700\u5c0f\u50240\n\u3000* 22 \u578b\u306e\u6700\u5927\u50240xFFFFFFFF\n\n\n\u578b\u5ba3\u8a00\u3092\u7701\u7565\u3057\u305ftree \u306e\u56f3\n\n\u578b\u3092\u89e3\u8aac\u3057\u305f\u306e\u3067\u3001\u578b\u306e\u5ba3\u8a00\u3092\u7701\u7565\u3057\u305f\u56f3\u3092\u63cf\u753b\u3057\u307e\u3057\u305f\u3002\n2\u304cvoid\u578b\u30017\u304cint\u578b\u300116\u304cbitsizetype\u578b\u3067\u3059\u3002\n\n\n\n\u5f0f\u306etree\n\ntree\u3067\u306f\u6f14\u7b97\u306a\u3069\u3092\u5f0f\u3067\u8868\u73fe\u3057\u307e\u3059\u3002 _expr\u304c\u672b\u5c3e\u306b\u3042\u308bcode\u3092\u6301\u3064node\u304c\u5f0f\u3067\u3059\u3002\ntree dump\u306e\u56f3\u3067\u306fbind_expr\u3068return_expr\u3068modify_expr\u304c\u3042\u308a\u307e\u3059\u3002\nmodify_expr\n\n\nmodify_expr\u306f\u4ee3\u5165\u6587\u3067\u3059\u3002\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u306b\u4ee3\u5165\u6587\u306f\u3042\u308a\u307e\u305b\u3093\u304c\u3001\u95a2\u6570\u306e\u623b\u308a\u5024\u3092\u8868\u3059\u306e\u306bmodify_expr\u3092\u4f7f\u3044\u307e\u3059\u3002\nmodify_expr\u306f\u8981\u7d20\u306btype\u3068op1\u3068op2\u3092\u6301\u3061\u307e\u3059\u3002\u3000type\u306f\u5f0f\u306e\u578b\u3001op1\u306f\u4ee3\u5165\u5148\u306enode\u3001op2\u306f\u4ee3\u5165\u5143\u306enode\n\u306a\u306e\u30675\u306e\u30ce\u30fc\u30c9\u306f\u3001\u6574\u6570\u5b9a\u65700\u3092\u623b\u308a\u5024\u306bint\u578b\u3067\u4ee3\u5165\u3059\u308b\u3068\u3044\u3046\u610f\u5473\u3067\u3059\u3002 (\u623b\u308a\u5024\u306b\u4ee3\u5165\u3068\u3044\u3046\u306e\u304c\u3088\u304f\u5206\u304b\u3089\u306a\u3044\u306e\u3067\u3059\u304c\u2026)\n\n\nreturn_expr\n\n\nreturn_expr\u306f\u95a2\u6570\u304b\u3089\u306e\u30ea\u30bf\u30fc\u30f3\u3067\u3059\u3002\nreturn_epxr\u306f\u8981\u7d20\u306btype\u3068expr\u3092\u6301\u3061\u307e\u3059\u3002\n\u306a\u306e\u30673\u306e\u30ce\u30fc\u30c9\u306f\u30015\u306emodifi_expr\u3092void\u578b\u3067\u30ea\u30bf\u30fc\u30f3\u3059\u308b\u3068\u3044\u3046\u610f\u5473\u3067\u3059\u3002\n\n\n\nbind_expr\n\n\nbind_expr\u306fblock\u3092\u8868\u73fe\u3059\u308bnode\u3067\u3059\u3002\ntree dump\u306e\u56f3\u3067\u306fmain\u95a2\u6570\u5168\u4f53\u3092\u4e00\u3064\u306e\u30d6\u30ed\u30c3\u30af\u3068\u3057\u3066\u8868\u73fe\u3057\u3066\u3044\u307e\u3059\u3002\nbind_epxr\u306f\u5b9f\u969b\u306f\u3082\u3063\u3068\u8981\u7d20\u304c\u3042\u308b\u306e\u3067\u3059\u304c\u3001\u3053\u306e\u4f8b\u3067\u306f\u578btype\u3068\u30d6\u30ed\u30c3\u30af\u306e\u4e2d\u8eabbody\u306e\u307f\u3067\u3059\u3002\n\n\n\n\n\u95a2\u6570\u306etree\n\n\u95a2\u6570\u306e\u5b9a\u7fa9\u306f\u4ee5\u4e0b\u306enode\u304b\u3089\u3067\u304d\u3066\u3044\u307e\u3059\u3002\n\n\nfunction_decl \u95a2\u6570\u5ba3\u8a00\nfunction_type \u5f15\u6570\u306e\u578b\nresult_decl \u623b\u308a\u5024\u306e\u5ba3\u8a00\n\n\n7, 8, 9, 11, 14, 17, 18 \u304c\u95a2\u6570\u5b9a\u7fa9\u3067\u3059\u3002\n\n\n14 \u95a2\u6570\u5ba3\u8a00 \u540d\u524d\u306f\"main\"\u3001size\u306e\u53c2\u7167\u3001\u30d5\u30a1\u30a4\u30eb\u540d\u3068\u884c\u6570\u3001extern\n18 \u95a2\u6570\u306e\u578b size\u306f32 \u623b\u308a\u5024\u306fint\u578b unql\u304c\u3088\u304f\u5206\u304b\u3089\u306a\u3044 unqualified \u306e\u610f\u5473\u3089\u3057\u3044\n23 \u95a2\u6570\u306e\u578b size\u306f32 \u623b\u308a\u5024\u306fint\u578b\n8 \u623b\u308a\u5024\u306e\u5ba3\u8a00 \u578b\u306fint\u3001scpe\u306f\u30ce\u30fc\u30c914\u3001\u30d5\u30a1\u30a4\u30eb\u540d\u3068\u884c\u6570\u3001size\u306e\u53c2\u7167\u3001algn\u304c32\n\n\n\n\n\u3064\u3065\u304f\n\n\u3060\u3044\u3076tree\u3092\u8aad\u3081\u308b\u3088\u3046\u306b\u306a\u3063\u3066\u304d\u305f\u3051\u3069\u3001\u307e\u3060\u8db3\u308a\u306a\u3044\u306e\u3067\u3001\u5909\u6570\u3001if\u6587\u3001for\u6587\u3001\u95a2\u6570\u547c\u3073\u51fa\u3057\u3001\u306a\u3069\u306etree\u306e\u8aad\u307f\u65b9\u3092\u8abf\u67fb\u3059\u308b\u4e88\u5b9a\u3002\n\n\n\u305d\u306e\u4ed6\n\n\u3088\u304f\u5206\u304b\u3089\u306a\u3044 return_expr\u304cvoid\u578b\u306a\u306e\u306f\u3069\u3046\u3057\u3066\u304b\nfunction_type\u304c2\u500b\u3042\u308b\u306e\u306f\u306a\u305c\u304b\n\n\ntree dump\n\ntree\u306edump\u3082\u7f6e\u3044\u3068\u304d\u307e\u3059\u3002\n\n\n;; Function main (null)\n;; enabled by -tree-original\n\n@1      bind_expr        type: @2       body: @3      \n@2      void_type        name: @4       algn: 8       \n@3      return_expr      type: @2       expr: @5      \n@4      type_decl        name: @6       type: @2      \n@5      modify_expr      type: @7       op 0: @8       op 1: @9      \n@6      identifier_node  strg: void     lngt: 4       \n@7      integer_type     name: @10      size: @11      algn: 32      \n                         prec: 32       sign: signed   min : @12     \n                         max : @13     \n@8      result_decl      type: @7       scpe: @14      srcp: test.c:1      \n                         note: artificial              size: @11     \n                         algn: 32      \n@9      integer_cst      type: @7       low : 0       \n@10     type_decl        name: @15      type: @7      \n@11     integer_cst      type: @16      low : 32      \n@12     integer_cst      type: @7       high: -1       low : -2147483648 \n@13     integer_cst      type: @7       low : 2147483647 \n@14     function_decl    name: @17      type: @18      srcp: test.c:1      \n                         link: extern  \n@15     identifier_node  strg: int      lngt: 3       \n@16     integer_type     name: @19      size: @20      algn: 64      \n                         prec: 64       sign: unsigned min : @21     \n                         max : @22     \n@17     identifier_node  strg: main     lngt: 4       \n@18     function_type    unql: @23      size: @11      algn: 32      \n                         retn: @7      \n@19     identifier_node  strg: bitsizetype             lngt: 11      \n@20     integer_cst      type: @16      low : 64      \n@21     integer_cst      type: @16      low : 0       \n@22     integer_cst      type: @16      low : -1      \n@23     function_type    size: @11      algn: 32       retn: @7  \n\n\n\u53c2\u8003\n\n\nhttp://www.ospn.jp/osc2008-do/gcc_hacks.pdf\n\n\u4eca\u56de\u306e\u30b5\u30f3\u30d7\u30eb\u30bd\u30fc\u30b9\u3068\u540c\u3058\u30b3\u30fc\u30c9\u3092\u3092gcc\u306e\u95a2\u6570\u3067\u4f5c\u6210\u3059\u308b\u4f8b\u304c\u8f09\u3063\u3066\u3044\u307e\u3059\u3002 \n\n\n\n[GCC tree\u306e\u8996\u899a\u5316](http://qiita.com/eggman/items/2a98c9c901290bfde703) \u3067\u4f5c\u6210\u3057\u305ftree\u3092\u8aad\u3093\u3067\u307f\u307e\u3057\u305f\u3002\n\ntree\u306fgcc\u306efront end\u3067\u4f7f\u308f\u308c\u3066\u3044\u308b\u69cb\u6587\u6728\u3092\u8868\u3059\u30c7\u30fc\u30bf\u69cb\u9020\u3067\u3059\u3002\n\n# \u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u3068tree\u306e\u56f3\n* \u8aac\u660e\u3059\u308b\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u3068\u3001gcc-4.x\u306etree dump\u304b\u3089\u4f5c\u3063\u305f\u56f3\u3067\u3059\u3002\n\n```c\nint main() {\n    return 0;\n}\n```\n\n![test.png](https://qiita-image-store.s3.amazonaws.com/0/42120/d0f7f218-69dc-db3f-c306-b021d20bb108.png)\n\n# tree\u306e\u8aad\u307f\u65b9\n* \u56db\u89d2\u5f62\u304ctree node\u306b1\u5bfe1\u306b\u5bfe\u5fdc\u3057\u3066\u3044\u307e\u3059\u3002\n* \u56db\u89d2\u5f62\u4e0a\u6bb5\u306e\u6570\u5b57\u306fnode\u306e\u30e6\u30cb\u30fc\u30afID\u3067\u3059\u3002\n* \u56db\u89d2\u5f62\u4e0b\u6bb5\u306e\u5de6\u7aef\u306e\u8981\u7d20\u306fnode\u306ecode\u3067\u3059\u3002node\u306e\u7a2e\u985e\u3092\u8868\u3057\u307e\u3059\u3002\n* \u56db\u89d2\u5f62\u4e0b\u6bb5code\u3088\u308a\u53f3\u306b\u3042\u308b\u8981\u7d20\u306ftree code\u3084\u3001\u305d\u306e\u4ed6\u6761\u4ef6\u306b\u3088\u308a\u7570\u306a\u308a\u307e\u3059\u3002\n* \u77e2\u5370\u304cnode\u306e\u8981\u7d20\u304b\u3089node\u3078\u53c2\u7167\u3057\u3066\u3044\u308b\u3053\u3068\u3092\u793a\u3057\u307e\u3059\u3002\n* node\u306e\u60c5\u5831\u306fnode\u5185\u306b\u4fdd\u6301\u3059\u308b\u5834\u5408\u3001node\u3092\u53c2\u7167\u3059\u308b\u5834\u5408\u3001\u30dd\u30a4\u30f3\u30bf\u3092\u53c2\u7167\u3059\u308b\u5834\u5408\u304c\u3042\u308a\u307e\u3059\u3002\n* gcc\u306etree dump\u306f\u3001tree\u306e\u3059\u3079\u3066\u306e\u60c5\u5831\u3092\u51fa\u529b\u3057\u3066\u3044\u308b\u308f\u3051\u3067\u306f\u306a\u3044\u3067\u3059\u3002\u3082\u3063\u3068\u8a73\u3057\u3044\u60c5\u5831\u304c\u77e5\u308a\u305f\u3044\u4eba\u306f\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u3092\u8aad\u307f\u307e\u3057\u3087\u3046\u3002\n\n# \u6574\u6570\u5b9a\u6570\u306etree\n* \u6574\u6570\u5b9a\u6570\u306ecode\u306finteger_cst\u3067\u3059\u3002\u3000\u8981\u7d20\u3068\u3057\u3066\u578b(type)\u3068\u5024(high,low)\u3092\u6301\u3061\u307e\u3059\u3002\n* \u5024\u306f\u4e0a\u4f4d high\u3068\u4e0b\u4f4d low \u306b\u308f\u304b\u308c\u3066\u3044\u307e\u3059\u3002high\u304c0\u306e\u5834\u5408\u306f\u3001high\u306fdump\u3067\u8868\u793a\u3055\u308c\u307e\u305b\u3093(\u4f8b:\n\uff11\uff13\u306e\u30ce\u30fc\u30c9)\u3002dump\u3067\u306f\u5024\u3092signed\u3068\u3057\u3066\u8868\u793a\u3057\u307e\u3059\u3002low\u306buint64_t\u306e\u6700\u5927\u5024\u304c\u5165\u3063\u3066\u3044\u308b\u3068-1\u3068\u8868\u793a\u3055\u308c\u307e\u3059\u3002\uff08\u4f8b:22\u306e\u30ce\u30fc\u30c9)\n* \u5024\u304c\u8ca0\u306e\u5834\u5408\u306f\u3001\uff12\u306e\u88dc\u6570\u3067\u683c\u7d0d\u3059\u308b\u306e\u3067\u3001high\u304c-1 \u306b\u306a\u308a\u307e\u3059\u3002(\u4f8b:12\u306e\u30ce\u30fc\u30c9)\n* tree dump\u306e\u56f3\u3067\u306f\u30019, 11, 12,\u300013, 20, 21, 22\u304c\u6574\u6570\u5b9a\u6570\u306enode\u3067\u3059\u3002\n* \u56f3\u306e\u4e2d\u306einteger_cst\u306etree\n * 9 int\u578b\u3067\u5024\u304c0\n * 11 bitsizetype\u578b\u3067\u5024\u304c32\n * 12 int\u578b-2147483648\n * 13 int\u578b\u3067\u5024\u304c2147483647\n * 20 bitsizetype\u578b\u3067\u5024\u304c64\n * 21 bitsizetype\u578b\u3067\u5024\u304c0\n * 21 bitsizetype\u578b\u3067\u5024\u304c0xFFFFFFFF\n\n# \u578b\u5ba3\u8a00\u306etree\n\n* tree\u306e\u56f3\u306b\u306f\u3001void\u306e\u578b\u5ba3\u8a00 \u3068 int\u306e\u578b\u5ba3\u8a00 \u304c\u3042\u308a\u307e\u3059\u3002\n*  \u578b\u5ba3\u8a00\u306etree\u57fa\u672c\u5f62\u306f\uff13\u3064\u306e\u30ce\u30fc\u30c9\u304c\u542b\u307e\u308c\u307e\u3059\u3002\n * type_decl \u578b\u5ba3\u8a00 name\u3068type\u306e\u53c2\u7167\u3092\u6301\u3064\n * identifer_node \u578b\u540d \u6587\u5b57\u5217\u306e\u30dd\u30a4\u30f3\u30bf\u53c2\u7167strg\u3068\u6587\u5b57\u5217\u9577lengt\u3092\u6301\u3064\n * \u306a\u3093\u3068\u304b_type \u578b \u578b\u306b\u3088\u308a\u6301\u3064\u8981\u7d20\u304c\u7570\u306a\u308b\u3002name\u3068algn\u306f\u6700\u4f4e\u9650\u3042\u308b\u3002 (algn\u304c\u3088\u304f\u308f\u304b\u3089\u306a\u3044\u3002)\n* 2, 4, 8\u304cvoid\u306e\u578b\u5ba3\u8a00\u3067\u3059\u3002\n * 4 \u578b\u5ba3\u8a00\n * 6 \u578b\u540d \"void\" \n * 2 \u578b void_type\u3067algn\u304c8\n* 7, 10, 12, 13, 15\u304cint\u306e\u578b\u5ba3\u8a00\u3067\u3059\u3002\n * 10 \u578b\u3092\u5ba3\u8a00\n * 15 \u578b\u540d \"int\"\n * 7 \u578b\u306finteger\u3067\u7cbe\u5ea6\u3001signed\u3001align\u304c32\u3067\u3001\u540d\u524d\u3001\u30b5\u30a4\u30ba\u3001\u6700\u5c0f\u5024\u3001\u6700\u5927\u5024\u306e\u53c2\u7167\u3092\u6301\u3064\u3002\n * 11 \u578b\u306e\u30b5\u30a4\u30ba\u304c32\n * 12 \u578b\u306e\u6700\u5c0f\u5024\u304c-2147483648\n * 13 \u578b\u306e\u6700\u5927\u5024\u304c2147483647\n* \u56f3\u3092\u898b\u308b\u3068\u5206\u304b\u308b\u306e\u3067\u3059\u304c\u3001tree\u5185\u3067\u578b\u3092\u53c2\u7167\u3059\u308b\u5834\u5408\u306f2,11\u306e\u578b\u306etree\u3092\u53c2\u7167\u3057\u307e\u3059\u3002\n\n# GCC internal types \u306etree\n* GCC internal types\u306fGCC\u304c\u5185\u90e8\u3067\u4f7f\u3046\u578b\u3067\u3059\u3002\u901a\u5e38\u3068\u7570\u306a\u308a\u578b\u5ba3\u8a00\u304c\u3042\u308a\u307e\u305b\u3093\u3002\n* 16, 19, 20, 21, 23 \u304cGCC internal types \u306e bitsizetype\u306etree\u3059\u3002 type_decl\u304c\u30ea\u30f3\u30af\u3055\u308c\u3066\u3044\u307e\u305b\u3093\u3002\n\u3000* 16 \u578b integer\u3067\u30b5\u30a4\u30ba\u3001\u7cbe\u5ea6\u3001unsigned\u3001\u6700\u5c0f\u5024\u3001\u6700\u5927\u5024\n\u3000* 19 \u578b\u540d \"bitsizetype\"\n\u3000* 20 \u578b\u306e\u30b5\u30a4\u30ba\u304c64bit\n\u3000* 21 \u578b\u306e\u6700\u5c0f\u50240\n\u3000* 22 \u578b\u306e\u6700\u5927\u50240xFFFFFFFF\n \n\n# \u578b\u5ba3\u8a00\u3092\u7701\u7565\u3057\u305ftree \u306e\u56f3\n* \u578b\u3092\u89e3\u8aac\u3057\u305f\u306e\u3067\u3001\u578b\u306e\u5ba3\u8a00\u3092\u7701\u7565\u3057\u305f\u56f3\u3092\u63cf\u753b\u3057\u307e\u3057\u305f\u3002\n* 2\u304cvoid\u578b\u30017\u304cint\u578b\u300116\u304cbitsizetype\u578b\u3067\u3059\u3002\n\n![t1.png](https://qiita-image-store.s3.amazonaws.com/0/42120/fe20da16-beb7-b182-01a3-e54dcd9eb4ff.png)\n\n# \u5f0f\u306etree\n* tree\u3067\u306f\u6f14\u7b97\u306a\u3069\u3092\u5f0f\u3067\u8868\u73fe\u3057\u307e\u3059\u3002 _expr\u304c\u672b\u5c3e\u306b\u3042\u308bcode\u3092\u6301\u3064node\u304c\u5f0f\u3067\u3059\u3002\n* tree dump\u306e\u56f3\u3067\u306fbind_expr\u3068return_expr\u3068modify_expr\u304c\u3042\u308a\u307e\u3059\u3002\n* modify_expr\n * modify_expr\u306f\u4ee3\u5165\u6587\u3067\u3059\u3002\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u306b\u4ee3\u5165\u6587\u306f\u3042\u308a\u307e\u305b\u3093\u304c\u3001\u95a2\u6570\u306e\u623b\u308a\u5024\u3092\u8868\u3059\u306e\u306bmodify_expr\u3092\u4f7f\u3044\u307e\u3059\u3002\n * modify_expr\u306f\u8981\u7d20\u306btype\u3068op1\u3068op2\u3092\u6301\u3061\u307e\u3059\u3002\u3000type\u306f\u5f0f\u306e\u578b\u3001op1\u306f\u4ee3\u5165\u5148\u306enode\u3001op2\u306f\u4ee3\u5165\u5143\u306enode\n * \u306a\u306e\u30675\u306e\u30ce\u30fc\u30c9\u306f\u3001\u6574\u6570\u5b9a\u65700\u3092\u623b\u308a\u5024\u306bint\u578b\u3067\u4ee3\u5165\u3059\u308b\u3068\u3044\u3046\u610f\u5473\u3067\u3059\u3002 (\u623b\u308a\u5024\u306b\u4ee3\u5165\u3068\u3044\u3046\u306e\u304c\u3088\u304f\u5206\u304b\u3089\u306a\u3044\u306e\u3067\u3059\u304c\u2026)\n* return_expr\n * return_expr\u306f\u95a2\u6570\u304b\u3089\u306e\u30ea\u30bf\u30fc\u30f3\u3067\u3059\u3002\n * return_epxr\u306f\u8981\u7d20\u306btype\u3068expr\u3092\u6301\u3061\u307e\u3059\u3002\n * \u306a\u306e\u30673\u306e\u30ce\u30fc\u30c9\u306f\u30015\u306emodifi_expr\u3092void\u578b\u3067\u30ea\u30bf\u30fc\u30f3\u3059\u308b\u3068\u3044\u3046\u610f\u5473\u3067\u3059\u3002  \n* bind_expr\n * bind_expr\u306fblock\u3092\u8868\u73fe\u3059\u308bnode\u3067\u3059\u3002\n * tree dump\u306e\u56f3\u3067\u306fmain\u95a2\u6570\u5168\u4f53\u3092\u4e00\u3064\u306e\u30d6\u30ed\u30c3\u30af\u3068\u3057\u3066\u8868\u73fe\u3057\u3066\u3044\u307e\u3059\u3002\n * bind_epxr\u306f\u5b9f\u969b\u306f\u3082\u3063\u3068\u8981\u7d20\u304c\u3042\u308b\u306e\u3067\u3059\u304c\u3001\u3053\u306e\u4f8b\u3067\u306f\u578btype\u3068\u30d6\u30ed\u30c3\u30af\u306e\u4e2d\u8eabbody\u306e\u307f\u3067\u3059\u3002\n\n# \u95a2\u6570\u306etree\n* \u95a2\u6570\u306e\u5b9a\u7fa9\u306f\u4ee5\u4e0b\u306enode\u304b\u3089\u3067\u304d\u3066\u3044\u307e\u3059\u3002\n * function_decl \u95a2\u6570\u5ba3\u8a00\n * function_type \u5f15\u6570\u306e\u578b\n * result_decl \u623b\u308a\u5024\u306e\u5ba3\u8a00\n* 7, 8, 9, 11, 14, 17, 18 \u304c\u95a2\u6570\u5b9a\u7fa9\u3067\u3059\u3002\n * 14 \u95a2\u6570\u5ba3\u8a00 \u540d\u524d\u306f\"main\"\u3001size\u306e\u53c2\u7167\u3001\u30d5\u30a1\u30a4\u30eb\u540d\u3068\u884c\u6570\u3001extern\n * 18 \u95a2\u6570\u306e\u578b size\u306f32 \u623b\u308a\u5024\u306fint\u578b unql\u304c\u3088\u304f\u5206\u304b\u3089\u306a\u3044 unqualified \u306e\u610f\u5473\u3089\u3057\u3044\n * 23 \u95a2\u6570\u306e\u578b size\u306f32 \u623b\u308a\u5024\u306fint\u578b\n * 8 \u623b\u308a\u5024\u306e\u5ba3\u8a00 \u578b\u306fint\u3001scpe\u306f\u30ce\u30fc\u30c914\u3001\u30d5\u30a1\u30a4\u30eb\u540d\u3068\u884c\u6570\u3001size\u306e\u53c2\u7167\u3001algn\u304c32\n\n\n# \u3064\u3065\u304f\n* \u3060\u3044\u3076tree\u3092\u8aad\u3081\u308b\u3088\u3046\u306b\u306a\u3063\u3066\u304d\u305f\u3051\u3069\u3001\u307e\u3060\u8db3\u308a\u306a\u3044\u306e\u3067\u3001\u5909\u6570\u3001if\u6587\u3001for\u6587\u3001\u95a2\u6570\u547c\u3073\u51fa\u3057\u3001\u306a\u3069\u306etree\u306e\u8aad\u307f\u65b9\u3092\u8abf\u67fb\u3059\u308b\u4e88\u5b9a\u3002\n\n# \u305d\u306e\u4ed6\n* \u3088\u304f\u5206\u304b\u3089\u306a\u3044 return_expr\u304cvoid\u578b\u306a\u306e\u306f\u3069\u3046\u3057\u3066\u304b\n* function_type\u304c2\u500b\u3042\u308b\u306e\u306f\u306a\u305c\u304b\n\n# tree dump\n* tree\u306edump\u3082\u7f6e\u3044\u3068\u304d\u307e\u3059\u3002\n\n```\n\n;; Function main (null)\n;; enabled by -tree-original\n\n@1      bind_expr        type: @2       body: @3      \n@2      void_type        name: @4       algn: 8       \n@3      return_expr      type: @2       expr: @5      \n@4      type_decl        name: @6       type: @2      \n@5      modify_expr      type: @7       op 0: @8       op 1: @9      \n@6      identifier_node  strg: void     lngt: 4       \n@7      integer_type     name: @10      size: @11      algn: 32      \n                         prec: 32       sign: signed   min : @12     \n                         max : @13     \n@8      result_decl      type: @7       scpe: @14      srcp: test.c:1      \n                         note: artificial              size: @11     \n                         algn: 32      \n@9      integer_cst      type: @7       low : 0       \n@10     type_decl        name: @15      type: @7      \n@11     integer_cst      type: @16      low : 32      \n@12     integer_cst      type: @7       high: -1       low : -2147483648 \n@13     integer_cst      type: @7       low : 2147483647 \n@14     function_decl    name: @17      type: @18      srcp: test.c:1      \n                         link: extern  \n@15     identifier_node  strg: int      lngt: 3       \n@16     integer_type     name: @19      size: @20      algn: 64      \n                         prec: 64       sign: unsigned min : @21     \n                         max : @22     \n@17     identifier_node  strg: main     lngt: 4       \n@18     function_type    unql: @23      size: @11      algn: 32      \n                         retn: @7      \n@19     identifier_node  strg: bitsizetype             lngt: 11      \n@20     integer_cst      type: @16      low : 64      \n@21     integer_cst      type: @16      low : 0       \n@22     integer_cst      type: @16      low : -1      \n@23     function_type    size: @11      algn: 32       retn: @7  \n```\n\n\n# \u53c2\u8003\n* http://www.ospn.jp/osc2008-do/gcc_hacks.pdf\n * \u4eca\u56de\u306e\u30b5\u30f3\u30d7\u30eb\u30bd\u30fc\u30b9\u3068\u540c\u3058\u30b3\u30fc\u30c9\u3092\u3092gcc\u306e\u95a2\u6570\u3067\u4f5c\u6210\u3059\u308b\u4f8b\u304c\u8f09\u3063\u3066\u3044\u307e\u3059\u3002 \n", "tags": ["GCC", "C", "\u30c7\u30fc\u30bf\u69cb\u9020"]}