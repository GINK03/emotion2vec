{"tags": ["Kotlin", "Android"], "context": "Kotlin\u30a2\u30c9\u30d9\u30f3\u30c8\u30ab\u30ec\u30f3\u30c0\u30fc2015 23\u65e5\u76ee\u306e\u8a18\u4e8b\u3067\u3059\u3002\n\u524d\u65e5\u306f@laprasDrum\u3055\u3093\u306e\u300ckapt \u306e generateStubs \u3068 DI \u30c4\u30fc\u30eb\u3068\u306e\u95a2\u4fc2\u300d\u3067\u3057\u305f\u3002\n\n\u306f\u3058\u3081\u306b\nCyberAgent2015\u5e74\u5ea6\u65b0\u5352Android\u30a8\u30f3\u30b8\u30cb\u30a2 AAkira(github), @AAkira(twitter)\u3067\u3059\u3002\n\u73fe\u5728\u3001Kotlin\u30a2\u30c9\u30d9\u30f3\u30c8\u30ab\u30ec\u30f3\u30c0\u30fc \u306e18\u65e5\u76ee\u306e\u57f7\u7b46\u8005@magie_pooh\u3055\u3093\u306825\u65e5\u306e\u57f7\u7b46\u4e88\u5b9a\u8005@satorufujiwara\u3055\u3093\u3068\u5171\u306bAmebaFRESH!\u3068\u3044\u3046\u52d5\u753b\u30b5\u30fc\u30d3\u30b9\u3092\u30d5\u30ebKotlin(Dagger\u7b49 \u4e00\u90e8Java)\u3067\u958b\u767a\u4e2d\u3067\u3059\u3002\n\n\u76ee\u6b21\n\nOperator\nInfix\n\u5fdc\u7528\u4f8b\n\n\n2\u884c\u4ee5\u4e0a\u306eelvis\u6f14\u7b97\u5b50\nnullable\u306aif-else\n\n\n\n\nOperator\n\nCustom operator(Swift)\nKotlin\u306fAndroid\u3068\u306e\u76f8\u6027\u304c\u30d0\u30c3\u30c1\u30ea\u3067Android\u3067\u7528\u3044\u3089\u308c\u3066\u3044\u308b\u4e8b\u304c\u591a\u304f\u3001\niOS\u7528\u8a00\u8a9eSwift\u3068\u8a00\u8a9e\u4ed5\u69d8\u304c\u3068\u3066\u3082\u4f3c\u3066\u3044\u308b\u306e\u3067\u3001\u304a\u4e92\u3044\u6bd4\u8f03\u3055\u308c\u308b\u4e8b\u304c\u591a\u3044\u3088\u3046\u306b\u611f\u3058\u307e\u3059\u3002\n\u305d\u3093\u306aSwift\u306b\u306fcustom operator\u3068\u3044\u3046\u72ec\u81ea\u306b\u6f14\u7b97\u5b50\u3092\u8ffd\u52a0\u3057\u3066\u30b4\u30cb\u30e7\u30b4\u30cb\u30e7\u51fa\u6765\u308b\u4ed5\u7d44\u307f\u304c\u3042\u308a\u307e\u3059\u3002\nSwift\u3067\u306f\u3053\u306e\u3088\u3046\u306b\u5b9a\u7fa9\u3059\u308b\u3053\u3068\u3067\ninfix operator +- { associativity left precedence 140 }\nfunc +- (left: Vector2D, right: Vector2D) -> Vector2D {\n    return Vector2D(x: left.x + right.x, y: left.y - right.y)\n}\n\n+-\u3068\u3044\u3046\u72ec\u81ea\u306eoperator\u3092\u7528\u3044\u3066\u4fbf\u5229\u306a\u8a08\u7b97\u3092\u3059\u308b\u3053\u3068\u304c\u51fa\u6765\u307e\u3059\u3002\nlet firstVector = Vector2D(x: 1.0, y: 2.0)\nlet secondVector = Vector2D(x: 3.0, y: 4.0)\nlet plusMinusVector = firstVector +- secondVector\n// plusMinusVector is a Vector2D instance with values of (4.0, -2.0)\n\n\n\u4ed6\u306b\u3082\u03a3\u3068\u304b\u222b\u7b49\u306e\u6587\u5b57\u3082\u4f7f\u3048\u308b\u306e\u3067\u6570\u5b66\u95a2\u4fc2\u306e\u5229\u7528\u306b\u3082\u9069\u3057\u3066\u305d\u3046\u3067\u3059\u3002\n\u30a4\u30b1\u3066\u308b\u30e9\u30a4\u30d6\u30e9\u30ea\u3068\u304b\u3067\u3088\u304f\u72ec\u81ea\u306e\u8a18\u53f7\u304c\u4f7f\u308f\u308c\u3066\u3044\u3066\u30ab\u30c3\u30b3\u3044\u3044\u3067\u3059\uff01\n\nOperator overloading(Kotilin)\n\u3055\u3066\u672c\u984c\u306eKotlin\u306eOperator\u306b\u3064\u3044\u3066\u898b\u3066\u3044\u304d\u307e\u3057\u3087\u3046\nKotlin\u3067\u306f\u3001\u524d\u8ff0\u306eSwift\u306e\u3088\u3046\u306b\u597d\u304d\u306a\u8a18\u53f7\u3092\u5b9a\u7fa9\u3059\u308b\u3053\u3068\u306f\u51fa\u6765\u306a\u3044\u306e\u3067\u3059\u304c\u3001(\u5f8c\u8ff0\u3042\u308a)\nC++\u306e\u3088\u3046\u306bOperator\u3092overload\u3059\u308b\u4e8b\u304c\u51fa\u6765\u307e\u3059\u3002\n\u4f8b\u3048\u3070\u3001\u666e\u6bb5\u4f55\u6c17\u306a\u304f\u4f7f\u3063\u3066\u308bString\u540c\u58eb\u306e\u8db3\u3057\u7b97\u3002\u3088\u304f\u4f7f\u3044\u307e\u3059\u3088\u306d\u3002\nKotlin\u306b\u306fString Templates\u304c\u3042\u308b\u306e\u3067\u4f7f\u308f\u306a\u304f\u3066\u3082\u3044\u3044\u306e\u3067\u3059\u304c\u3001\u500b\u4eba\u7684\u306b\u898b\u96e3\u3044\u306e\u3068Java\u304b\u3089\u306e\u6d41\u308c\u3067\u3061\u3087\u3063\u3068Log\u51fa\u3059\u3060\u3051\u306e\u6642\u7b49\u306f+\u3067\u7d50\u5408\u3057\u3066\u3057\u307e\u3044\u307e\u3059\u3002\n\u3053\u308c\u304c\u3069\u306e\u3088\u3046\u306b\u5b9f\u88c5\u3055\u308c\u3066\u3044\u308b\u306e\u304b\u3001kotlin.String.kt\u306e\u30bd\u30fc\u30b9\u3092\u898b\u308b\u3068plusOperator\u3092overload\u3057\u3066\u3044\u308b\u306e\u304c\u308f\u304b\u308a\u307e\u3059\u3002\n\nString.kt\npublic class String : Comparable<String>, CharSequence {\n    ...\n\n    public operator fun plus(other: Any?): String\n\n    ...\n}\n\n\n\u3053\u308c\u306b\u3088\u3063\u3066\nval hoge: String = \"foo\" + \"bar\"\n\n\u307f\u305f\u3044\u306a\u4e8b\u304c\u5b9f\u73fe\u51fa\u6765\u307e\u3059\u3002\nplus\u3092overload\u51fa\u6765\u308b\u3068\u3044\u3046\u3053\u3068\u306f\u5f15\u304d\u7b97\u3084\u8db3\u3057\u7b97\u3001Range\u3084\u6bd4\u8f03\u6f14\u7b97\u5b50\u3082\u66f8\u3051\u307e\u3059\u3002[Kotlin Expression\u4e00\u89a7]\n\u62e1\u5f35\u95a2\u6570\u3068\u7d44\u307f\u5408\u308f\u305b\u308b\u3068\u3044\u3044\u611f\u3058\u306b\u66f8\u3051\u307e\u3059\u3002toInt()\u304c\u5fae\u5999\u3067\u3059\u304c\u2026\noperator fun String.minus(other: String) = this.toInt().minus(other.toInt())\n\noperator fun String.times(other: String) = this.toInt().times(other.toInt())\n\nval foo = \"10\" - \"5\" // 5\nval bar = \"10\" * \"5\" // 50\n\n\u3061\u306a\u307f\u306bKotlin\u306e\u62e1\u5f35\u95a2\u6570\u306f\u5fc5\u305a\u30e1\u30f3\u30d0\u306e\u30e1\u30bd\u30c3\u30c9\u304c\u547c\u3073\u51fa\u3055\u308c\u308b\u305f\u3081\u3001\u65e2\u306b\u89aa\u30af\u30e9\u30b9\u306b\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u308boperator\u3092\u62e1\u5f35\u95a2\u6570\u3067\u66f8\u304d\u63db\u3048\u3066\u3082\u30b3\u30f3\u30d1\u30a4\u30eb\u30a8\u30e9\u30fc\u306b\u306f\u306a\u308a\u307e\u305b\u3093\u304c\u5024\u306f\u5909\u308f\u308a\u307e\u305b\u3093\u3002\n\u62e1\u5f35\u95a2\u6570\u306f\u4f55\u51e6\u306b\u3067\u3082\u66f8\u3051\u3066\u3057\u307e\u3044\u3001\u512a\u5148\u9806\u4f4d\u304c\u4ed8\u3051\u3089\u308c\u306a\u3044\u306e\u3067\u3001\u5f53\u7136\u3068\u8a00\u3048\u3070\u5f53\u7136\u306e\u6319\u52d5\u3067\u3059\u306d\u3002\noperator fun Int.plus(other: Int) = this.minus(other)\n\nval hoge = 10 + 5 // 15\n\n\n\u5229\u7528\u30b7\u30fc\u30f3\nThreeTen\u4f7f\u3048\u3063\u3066\u8a71\u3067\u3059\u304c\u3001Comparable\u3092\u5b9f\u88c5\u3057\u305f\u65e5\u4ed8\u3092\u8868\u3059class\u304c\u3042\u3063\u305f\u3068\u3057\u307e\u3059\u3002\n\nMyDate.kt\ndata class MyDate(val year: Int, val month: Int, val dayOfMonth: Int) : Comparable<MyDate> {\n    override fun compareTo(other: MyDate) = when {\n        year != other.year -> year - other.year\n        month != other.month -> month - other.month\n        else -> dayOfMonth - other.dayOfMonth\n    }\n}\n\n\n\u3055\u3089\u306bcontainsoperator\u3092\u6301\u3063\u305f\u65e5\u4ed8\u306e\u7bc4\u56f2\u3092\u8a08\u7b97\u3059\u308bDateRangeclass\u3092\u4f5c\u6210\u3057\u3001\u62e1\u5f35\u95a2\u6570\u3067MyDateclass\u306brangeTooperator\u3092\u8db3\u3057\u307e\u3059\u3002\nclass DateRange(val start: MyDate, val endInclusive: MyDate) {\n    operator fun contains(item: MyDate) = start <= item && item <= endInclusive\n}\n\noperator fun MyDate.rangeTo(other: MyDate): DateRange = DateRange(this, other)\n\nval date = MyDate(2005, 5, 19)\nval first = MyDate(1977, 5, 25)\nval end = MyDate(2015, 12, 18)\n\nval hoge = date in first..last // true\n\n\u3053\u306e\u3088\u3046\u306bOperator\u3092\u72ec\u81ea\u306eclass\u306b\u8db3\u3059\u3053\u3068\u304c\u51fa\u6765\u308b\u306e\u3067\u3001\nJava\u3067\u306f\u51fa\u6765\u306a\u304b\u3063\u305f\u69d8\u3005\u306a\u4e8b\u304c\u884c\u3048\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3057\u305f\uff01\n\u4fbf\u5229\u3067\u3059\u306dKotlin(*\u00b4\u03c9\uff40*)\n\nInfix\nKotlin\u306b\u306f\u4e0a\u8a18\u306eOperator\u3068\u4f3c\u305f\u6a5f\u80fd\u3068\u3057\u3066Infix\u3068\u3044\u3046\u3082\u306e\u304c\u3042\u308a\u307e\u3059\u3002\n\u4e0a\u8a18\u3067\u306eOperator\u306e\u8aac\u660e\u3067\u306fSwift\u306e\u3088\u3046\u306b\u597d\u304d\u306a\u8a18\u53f7\u3092\u5b9a\u7fa9\u3059\u308b\u3053\u3068\u306f\u51fa\u6765\u306a\u3044\u3068\u66f8\u3044\u305f\u306e\u3067\u3059\u304c\u3001\n\u306a\u3093\u3068Kotlin\u306f\u30e1\u30bd\u30c3\u30c9\u540d\u3067\u4f7f\u3048\u308b\u6587\u5b57\u5217\u306b\u95a2\u3057\u3066\u306fCustom Operator\u3092\u4f5c\u308b\u3053\u3068\u304c\u51fa\u6765\u307e\u3059\uff01\uff01\n\n(12/21 11:30\u88dc\u8db3)\n\n\u8a18\u53f7\u306f\u5b9a\u7fa9\u51fa\u6765\u306a\u3044\u3068\u66f8\u3044\u305f\u306e\u3067\u3059\u304c\u3001\u305f\u308d\u3046\u3055\u3093\u306b\u30a2\u30af\u30b5\u30f3 \u30b0\u30e9\u30fc\u30d6\u3092\u4f7f\u3046\u3068\u66f8\u3051\u306a\u304f\u306f\u7121\u3044\u3068\u6559\u3048\u3066\u3044\u305f\u3060\u304d\u307e\u3057\u305f\uff01\n\ninfix fun Int.`**`(n: Int) = ...\n5 `**` 3 //=> 125\n\n\u305f\u3060\u3001\u672c\u6765\u306fJava\u30b3\u30fc\u30c9\u4e0a\u3067\u306e\u8b58\u5225\u5b50\u304cKotlin\u306e\u4e88\u7d04\u8a9e\u3068\u3076\u3064\u304b\u3063\u305f\u3068\u304d\u306e\u5bfe\u51e6\u6cd5\u3089\u3057\u3044\u306e\u3067\u672c\u6765\u907f\u3051\u308b\u3079\u304d\u66f8\u304d\u65b9\u307f\u305f\u3044\u3067\u3059\u3002\n\n\u4f8b\u3048\u3070Boolean\u306f\u3053\u306e\u69d8\u306b\u66f8\u3044\u3066\u3082\u6bd4\u8f03\u3059\u308b\u3053\u3068\u304c\u51fa\u6765\u307e\u3059\u3002\nval foo = true\nval bar = true\n\n// pattern 1\nif(foo and bar) return\n\n// pattern 2\nval hoge = when {\n    foo or bar -> 100\n    else -> 0\n}\n\nBoolean\u306e\u30bd\u30fc\u30b9\u3092\u898b\u308b\u3068\u3001\u3053\u306e\u3088\u3046\u306b\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u307e\u3059\u3002\n\nBoolean.kt\npublic class Boolean private () : Comparable<Boolean> {\n    /**\n     * Returns the inverse of this boolean.\n     */\n    public operator fun not(): Boolean\n\n    /**\n     * Performs a logical `and` operation between this Boolean and the [other] one.\n     */\n    public infix fun and(other: Boolean): Boolean\n\n    /**\n     * Performs a logical `or` operation between this Boolean and the [other] one.\n     */\n    public infix fun or(other: Boolean): Boolean\n\n    /**\n     * Performs a logical `xor` operation between this Boolean and the [other] one.\n     */\n    public infix fun xor(other: Boolean): Boolean\n\n    ...\n}\n\n\n\u5148\u7a0b\u306eoperator\u3068infix\u304c\u5b9a\u7fa9\u3055\u308c\u3066\u307e\u3059\u306d\u3002\n\u3064\u307e\u308a\u3001Kotlin\u3067\u3082infix\u3092\u5229\u7528\u3059\u308c\u3070custom operator\u304c\u4f5c\u308c\u308b\u3068\u3044\u3046\u3053\u3068\u3067\u3059\u3002\n\n\u5fdc\u7528\u4f8b\n\n2\u884c\u4ee5\u4e0a\u306eElvis\u6f14\u7b97\u5b50\n\u5148\u65e5kotlinlang-jp\u306eslack\u3067\nnull check\u306f\u300cif else\u300d\u3067\u3059\u308b\u304b\u3001\u300cElvis\u6f14\u7b97\u5b50\u300d\u3067\u3059\u308b\u304b\u304c\u8a71\u984c\u306b\u306a\u3063\u3066\u3044\u305f\u306e\u3067\u3059\u304c\u3001\n\u500b\u4eba\u7684\u306bKotlin\u3067\u306f\u3001\u6bd4\u8f03\u306bnull\u3092\u4f7f\u3044\u305f\u304f\u7121\u3044\u3068\u601d\u3063\u3066\u3044\u307e\u3059\u3002(\u4ee3\u5165\u3084\u623b\u308a\u5024\u4ee5\u5916\u3067null\u3092\u66f8\u304d\u305f\u304f\u306a\u3044)\n\u305d\u306e\u305f\u3081\u666e\u6bb5\u30b3\u30fc\u30c9\u3092\u66f8\u304f\u6642\u306b\u306f\nval foo: Int? = null\nfoo = 100\n\nval hoge = foo ?: 0\n\n\u306e\u3088\u3046\u306b\u3057\u3066\u4ee3\u5165\u3092\u884c\u3063\u305f\u308a\nfun hoge(value: Int?) {\n    valure ?: return\n    ...\n}\n\n\u306e\u3088\u3046\u306b\u3057\u3066\u65e9\u671freturn\u3092\u304a\u3053\u306a\u3063\u3066\u3044\u308b\u306e\u3067\u3059\u304c\u3001\u30a8\u30eb\u30d3\u30b9\u6f14\u7b97\u5b50\u306f\u5f8c\u308d\u306b1\u884c\u3057\u304b\u3068\u308c\u306a\u3044\u554f\u984c\u304c\u3042\u308a\u307e\u3059\u3002\n\u73fe\u72b6\u30c1\u30fc\u30e0\u3068\u3057\u3066\u306frun\u3092\u4f7f\u3063\u30662\u884c\u4ee5\u4e0a\u306e\u51e6\u7406\u3092\u884c\u3063\u3066\u3044\u307e\u3059\u3002\nfun generator() = 10 * 10\nval foo: Int? = null\nfoo = 100\n\n// possible\nval hoge = foo ?: 0\n\n// possible\nval hoge = foo ?: generator()\n\n// possible\nval hoge = foo ?: run {\n    // 2\u884c\u4ee5\u4e0a\u306e\u51e6\u7406\n}\n\n// impossible\nval bar = true\nval hoge = foo ?: {\n   // 2\u884c\u4ee5\u4e0a\u306e\u51e6\u7406\n   val a = if(bar) 10 else 100\n   a * generator()\n}\n\n\u305d\u3053\u3067\u3001infix\u3092\u7528\u3044\u3066\u4ee5\u4e0b\u306e\u69d8\u306a\u95a2\u6570\u3092\u4f5c\u6210\u3057\u307e\u3059\u3002\ninline infix fun <R> R?.elvis(f: () -> R): R = this ?: f()\n\n\u3053\u308c\u3092\u7528\u3044\u308b\u3068\u5148\u307b\u3069\u66f8\u3051\u306a\u304b\u3063\u305f\u5f0f\u306e\u30b3\u30f3\u30d1\u30a4\u30eb\u304c\u901a\u308a\u307e\u3059\u3002(\u540d\u524d\u306f\u3082\u3046\u5c11\u3057\u8003\u3048\u305f\u3044\u3067\u3059\u306d\u2026\uff09\n// possible :-D\nval hoge = foo elvis {\n   // 2\u884c\u4ee5\u4e0a\u306e\u51e6\u7406\n   val a = if(bar) 10 else 100\n   a * generator()\n}\n\n\nnullable\u306aif-else\n\u4ed6\u306b\u4f7f\u3048\u305d\u3046\u306a\u7b87\u6240\u3068\u3057\u3066\u306f\u3001\nif\u3067\u6bd4\u8f03\u3092\u3057\u305f\u3044\u6642\u306b\u4e2d\u8eab\u304cnullable\u3060\u3068Kotlin\u306e\u30b3\u30f3\u30d1\u30a4\u30e9\u306f\u30a8\u30e9\u30fc\u3092\u51fa\u3057\u307e\u3059\u3002\nnull\u3060\u3063\u305f\u3089false\u306e\u65b9\u306b\u3057\u3066\u6b32\u3057\u3044\u3051\u3069\u3001\u6bd4\u8f03\u524d\u306bsmart cast\u3057\u3066\u2026\u3068\u7d50\u69cb\u624b\u9593\u306a\u3053\u3068\u304c\u3042\u308a\u307e\u3059\u3002\n\u305d\u3093\u306a\u6642\u306b\u5148\u307b\u3069\u81ea\u4f5c\u3057\u305felvis\u95a2\u6570\u3068infix\u3092\u7d44\u307f\u5408\u308f\u305b\u3066 \u3053\u306e\u3088\u3046\u306b\u66f8\u3051\u307e\u3059\u3002\nval hoge: Int? = null\n\ninline infix fun <R> nullableIf(value: Boolean?, f: () -> R): R? {\n    value ?: return null\n    return if (value) f() else null\n}\n\nnullableIf(hoge == 0) {\n    // don't be called here\n} elvis {\n    // be called here\n}\n\n\n\u51c4\u3044\u305eKotlin!!\n\u306a\u3093\u3060\u304b\u3093\u3060Kotlin\u6b746\u30f6\u6708\u306b\u306a\u308a\u307e\u3059\u304c\u3001\u3053\u306e\u8a18\u4e8b\u3092\u66f8\u3044\u3066\u308b\u6642\u306b\u521d\u3081\u3066\u3053\u3093\u306a\u4e8b\u304c\u51fa\u6765\u308b\uff01\uff01\u3063\u3066\u6c17\u3065\u304d\u307e\u3057\u305f\u3002\nKotlin\u306b\u306frequireNotNull()\u7b49\u306e\u4fbf\u5229\u306a\u30e1\u30bd\u30c3\u30c9\u304c\u6a19\u6e96\u3067\u591a\u6570\u7528\u610f\u3055\u308c\u3066\u3044\u308b\u306e\u3067\u3001\n\u3082\u3057\u304b\u3059\u308b\u3068\u3053\u3093\u306a\u4e8b\u3092\u3057\u306a\u3044\u3067\u3082\u3044\u3044\u611f\u3058\u306b\u5b9f\u73fe\u51fa\u6765\u308b\u306e\u304b\u3082\u3057\u308c\u306a\u3044\u3067\u3059\u304c\u3001\n\u4ed6\u306e\u7528\u9014\u306b\u3082\u5fdc\u7528\u51fa\u6765\u308b\u3068\u601d\u3046\u306e\u3067\u9762\u767d\u3044\u4f7f\u3044\u65b9\u304c\u3042\u3063\u305f\u3089\u6559\u3048\u3066\u4e0b\u3055\u3044\uff01\n\u4ee5\u4e0aoperator\u3068infix\u306b\u3064\u3044\u3066\u304a\u8a71\u3092\u3057\u307e\u3057\u305f\u3002\n\u4f55\u304b\u9593\u9055\u3044\u7b49\u3042\u308a\u307e\u3057\u305f\u3089\u3001@AAkira, Mail\u306b\u9023\u7d61\u3092\u9802\u3051\u308b\u3068\u6709\u308a\u96e3\u3044\u3067\u3059\u3002\nSlack\u306b\u3082\u3044\u308b\u306e\u3067\u662f\u975e\u307f\u306a\u3055\u3093\u3067\u8b70\u8ad6\u3057\u307e\u3057\u3087\u3046\uff01\n\n\u660e\u65e5\u306frabitarochan\u3055\u3093\u3067\u3059\u3002\n\n[Kotlin\u30a2\u30c9\u30d9\u30f3\u30c8\u30ab\u30ec\u30f3\u30c0\u30fc2015](http://www.adventar.org/calendars/857) 23\u65e5\u76ee\u306e\u8a18\u4e8b\u3067\u3059\u3002\n\u524d\u65e5\u306f[@laprasDrum](http://qiita.com/laprasDrum)\u3055\u3093\u306e[\u300ckapt \u306e generateStubs \u3068 DI \u30c4\u30fc\u30eb\u3068\u306e\u95a2\u4fc2\u300d](http://qiita.com/laprasDrum/items/417b48972ddefdc3b2cd)\u3067\u3057\u305f\u3002\n\n# \u306f\u3058\u3081\u306b\n\nCyberAgent2015\u5e74\u5ea6\u65b0\u5352Android\u30a8\u30f3\u30b8\u30cb\u30a2 [AAkira(github)](https://github.com/AAkira), [@AAkira(twitter)](https://twitter.com/_a_akira)\u3067\u3059\u3002\n\u73fe\u5728\u3001[Kotlin\u30a2\u30c9\u30d9\u30f3\u30c8\u30ab\u30ec\u30f3\u30c0\u30fc](http://www.adventar.org/calendars/857) \u306e18\u65e5\u76ee\u306e\u57f7\u7b46\u8005[@magie_pooh\u3055\u3093](https://twitter.com/magie_pooh)\u306825\u65e5\u306e\u57f7\u7b46\u4e88\u5b9a\u8005[@satorufujiwara\u3055\u3093](https://twitter.com/satorufujiwara)\u3068\u5171\u306b[AmebaFRESH!](https://amebafresh.tv/pc/index.html)\u3068\u3044\u3046\u52d5\u753b\u30b5\u30fc\u30d3\u30b9\u3092\u30d5\u30ebKotlin(Dagger\u7b49 \u4e00\u90e8Java)\u3067\u958b\u767a\u4e2d\u3067\u3059\u3002\n\n# \u76ee\u6b21\n\n1. Operator\n2. Infix\n3. \u5fdc\u7528\u4f8b\n - 2\u884c\u4ee5\u4e0a\u306eelvis\u6f14\u7b97\u5b50\n - nullable\u306aif-else\n\n# Operator\n\n## Custom operator(Swift)\n\nKotlin\u306fAndroid\u3068\u306e\u76f8\u6027\u304c\u30d0\u30c3\u30c1\u30ea\u3067Android\u3067\u7528\u3044\u3089\u308c\u3066\u3044\u308b\u4e8b\u304c\u591a\u304f\u3001\niOS\u7528\u8a00\u8a9eSwift\u3068\u8a00\u8a9e\u4ed5\u69d8\u304c\u3068\u3066\u3082\u4f3c\u3066\u3044\u308b\u306e\u3067\u3001\u304a\u4e92\u3044\u6bd4\u8f03\u3055\u308c\u308b\u4e8b\u304c\u591a\u3044\u3088\u3046\u306b\u611f\u3058\u307e\u3059\u3002\n\u305d\u3093\u306aSwift\u306b\u306f[custom operator](https://developer.apple.com/library/ios/documentation/Swift/Conceptual/Swift_Programming_Language/AdvancedOperators.html)\u3068\u3044\u3046\u72ec\u81ea\u306b\u6f14\u7b97\u5b50\u3092\u8ffd\u52a0\u3057\u3066\u30b4\u30cb\u30e7\u30b4\u30cb\u30e7\u51fa\u6765\u308b\u4ed5\u7d44\u307f\u304c\u3042\u308a\u307e\u3059\u3002\n\nSwift\u3067\u306f\u3053\u306e\u3088\u3046\u306b\u5b9a\u7fa9\u3059\u308b\u3053\u3068\u3067\n\n```swift\ninfix operator +- { associativity left precedence 140 }\nfunc +- (left: Vector2D, right: Vector2D) -> Vector2D {\n    return Vector2D(x: left.x + right.x, y: left.y - right.y)\n}\n```\n\n `+-`\u3068\u3044\u3046\u72ec\u81ea\u306eoperator\u3092\u7528\u3044\u3066\u4fbf\u5229\u306a\u8a08\u7b97\u3092\u3059\u308b\u3053\u3068\u304c\u51fa\u6765\u307e\u3059\u3002\n\n```swift\nlet firstVector = Vector2D(x: 1.0, y: 2.0)\nlet secondVector = Vector2D(x: 3.0, y: 4.0)\nlet plusMinusVector = firstVector +- secondVector\n// plusMinusVector is a Vector2D instance with values of (4.0, -2.0)\n\n```\n\n\u4ed6\u306b\u3082`\u03a3`\u3068\u304b`\u222b`\u7b49\u306e\u6587\u5b57\u3082\u4f7f\u3048\u308b\u306e\u3067\u6570\u5b66\u95a2\u4fc2\u306e\u5229\u7528\u306b\u3082\u9069\u3057\u3066\u305d\u3046\u3067\u3059\u3002\n\u30a4\u30b1\u3066\u308b\u30e9\u30a4\u30d6\u30e9\u30ea\u3068\u304b\u3067\u3088\u304f\u72ec\u81ea\u306e\u8a18\u53f7\u304c\u4f7f\u308f\u308c\u3066\u3044\u3066\u30ab\u30c3\u30b3\u3044\u3044\u3067\u3059\uff01\n\n## Operator overloading(Kotilin)\n\n\u3055\u3066\u672c\u984c\u306eKotlin\u306eOperator\u306b\u3064\u3044\u3066\u898b\u3066\u3044\u304d\u307e\u3057\u3087\u3046\nKotlin\u3067\u306f\u3001\u524d\u8ff0\u306eSwift\u306e\u3088\u3046\u306b\u597d\u304d\u306a__\u8a18\u53f7__\u3092\u5b9a\u7fa9\u3059\u308b\u3053\u3068\u306f\u51fa\u6765\u306a\u3044\u306e\u3067\u3059\u304c\u3001(\u5f8c\u8ff0\u3042\u308a)\nC++\u306e\u3088\u3046\u306bOperator\u3092overload\u3059\u308b\u4e8b\u304c\u51fa\u6765\u307e\u3059\u3002\n\n\u4f8b\u3048\u3070\u3001\u666e\u6bb5\u4f55\u6c17\u306a\u304f\u4f7f\u3063\u3066\u308bString\u540c\u58eb\u306e\u8db3\u3057\u7b97\u3002\u3088\u304f\u4f7f\u3044\u307e\u3059\u3088\u306d\u3002\nKotlin\u306b\u306f[String Templates](https://kotlinlang.org/docs/reference/basic-types.html#string-templates)\u304c\u3042\u308b\u306e\u3067\u4f7f\u308f\u306a\u304f\u3066\u3082\u3044\u3044\u306e\u3067\u3059\u304c\u3001\u500b\u4eba\u7684\u306b\u898b\u96e3\u3044\u306e\u3068Java\u304b\u3089\u306e\u6d41\u308c\u3067\u3061\u3087\u3063\u3068Log\u51fa\u3059\u3060\u3051\u306e\u6642\u7b49\u306f`+`\u3067\u7d50\u5408\u3057\u3066\u3057\u307e\u3044\u307e\u3059\u3002\n\u3053\u308c\u304c\u3069\u306e\u3088\u3046\u306b\u5b9f\u88c5\u3055\u308c\u3066\u3044\u308b\u306e\u304b\u3001`kotlin.String.kt`\u306e\u30bd\u30fc\u30b9\u3092\u898b\u308b\u3068`plus`Operator\u3092overload\u3057\u3066\u3044\u308b\u306e\u304c\u308f\u304b\u308a\u307e\u3059\u3002\n\n```kotlin:String.kt\npublic class String : Comparable<String>, CharSequence {\n    ...\n    \n    public operator fun plus(other: Any?): String\n   \n    ...\n}\n```\n\n\u3053\u308c\u306b\u3088\u3063\u3066\n\n```kotlin\nval hoge: String = \"foo\" + \"bar\"\n```\n\u307f\u305f\u3044\u306a\u4e8b\u304c\u5b9f\u73fe\u51fa\u6765\u307e\u3059\u3002\nplus\u3092overload\u51fa\u6765\u308b\u3068\u3044\u3046\u3053\u3068\u306f\u5f15\u304d\u7b97\u3084\u8db3\u3057\u7b97\u3001Range\u3084\u6bd4\u8f03\u6f14\u7b97\u5b50\u3082\u66f8\u3051\u307e\u3059\u3002[[Kotlin Expression\u4e00\u89a7]](https://kotlinlang.org/docs/reference/operator-overloading.html)\n\u62e1\u5f35\u95a2\u6570\u3068\u7d44\u307f\u5408\u308f\u305b\u308b\u3068\u3044\u3044\u611f\u3058\u306b\u66f8\u3051\u307e\u3059\u3002~~`toInt()`\u304c\u5fae\u5999\u3067\u3059\u304c\u2026~~\n\n```kotlin\noperator fun String.minus(other: String) = this.toInt().minus(other.toInt())\n\noperator fun String.times(other: String) = this.toInt().times(other.toInt())\n\nval foo = \"10\" - \"5\" // 5\nval bar = \"10\" * \"5\" // 50\n```\n\n\u3061\u306a\u307f\u306bKotlin\u306e\u62e1\u5f35\u95a2\u6570\u306f[\u5fc5\u305a\u30e1\u30f3\u30d0\u306e\u30e1\u30bd\u30c3\u30c9\u304c\u547c\u3073\u51fa\u3055\u308c\u308b](https://kotlinlang.org/docs/reference/extensions.html#extensions-are-resolved-statically)\u305f\u3081\u3001\u65e2\u306b\u89aa\u30af\u30e9\u30b9\u306b\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u308boperator\u3092\u62e1\u5f35\u95a2\u6570\u3067\u66f8\u304d\u63db\u3048\u3066\u3082\u30b3\u30f3\u30d1\u30a4\u30eb\u30a8\u30e9\u30fc\u306b\u306f\u306a\u308a\u307e\u305b\u3093\u304c\u5024\u306f\u5909\u308f\u308a\u307e\u305b\u3093\u3002\n\u62e1\u5f35\u95a2\u6570\u306f\u4f55\u51e6\u306b\u3067\u3082\u66f8\u3051\u3066\u3057\u307e\u3044\u3001\u512a\u5148\u9806\u4f4d\u304c\u4ed8\u3051\u3089\u308c\u306a\u3044\u306e\u3067\u3001\u5f53\u7136\u3068\u8a00\u3048\u3070\u5f53\u7136\u306e\u6319\u52d5\u3067\u3059\u306d\u3002\n\n```kotlin\noperator fun Int.plus(other: Int) = this.minus(other)\n\nval hoge = 10 + 5 // 15\n```\n\n## \u5229\u7528\u30b7\u30fc\u30f3\n\n~~[ThreeTen](http://www.threeten.org)\u4f7f\u3048\u3063\u3066\u8a71\u3067\u3059\u304c\u3001~~`Comparable`\u3092\u5b9f\u88c5\u3057\u305f\u65e5\u4ed8\u3092\u8868\u3059class\u304c\u3042\u3063\u305f\u3068\u3057\u307e\u3059\u3002\n\n```kotlin:MyDate.kt\ndata class MyDate(val year: Int, val month: Int, val dayOfMonth: Int) : Comparable<MyDate> {\n    override fun compareTo(other: MyDate) = when {\n        year != other.year -> year - other.year\n        month != other.month -> month - other.month\n        else -> dayOfMonth - other.dayOfMonth\n    }\n}\n```\n\u3055\u3089\u306b`contains`operator\u3092\u6301\u3063\u305f\u65e5\u4ed8\u306e\u7bc4\u56f2\u3092\u8a08\u7b97\u3059\u308b`DateRange`class\u3092\u4f5c\u6210\u3057\u3001\u62e1\u5f35\u95a2\u6570\u3067`MyDate`class\u306b`rangeTo`operator\u3092\u8db3\u3057\u307e\u3059\u3002\n\n```kotlin\nclass DateRange(val start: MyDate, val endInclusive: MyDate) {\n    operator fun contains(item: MyDate) = start <= item && item <= endInclusive\n}\n\noperator fun MyDate.rangeTo(other: MyDate): DateRange = DateRange(this, other)\n\nval date = MyDate(2005, 5, 19)\nval first = MyDate(1977, 5, 25)\nval end = MyDate(2015, 12, 18)\n\nval hoge = date in first..last // true\n```\n\u3053\u306e\u3088\u3046\u306bOperator\u3092\u72ec\u81ea\u306eclass\u306b\u8db3\u3059\u3053\u3068\u304c\u51fa\u6765\u308b\u306e\u3067\u3001\nJava\u3067\u306f\u51fa\u6765\u306a\u304b\u3063\u305f\u69d8\u3005\u306a\u4e8b\u304c\u884c\u3048\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3057\u305f\uff01\n\u4fbf\u5229\u3067\u3059\u306dKotlin(\\*\u00b4\u03c9\uff40*)\n\n\n# Infix\n\nKotlin\u306b\u306f\u4e0a\u8a18\u306eOperator\u3068\u4f3c\u305f\u6a5f\u80fd\u3068\u3057\u3066[Infix](https://kotlinlang.org/docs/reference/functions.html#infix-notation)\u3068\u3044\u3046\u3082\u306e\u304c\u3042\u308a\u307e\u3059\u3002\n\u4e0a\u8a18\u3067\u306eOperator\u306e\u8aac\u660e\u3067\u306fSwift\u306e\u3088\u3046\u306b\u597d\u304d\u306a__\u8a18\u53f7__\u3092\u5b9a\u7fa9\u3059\u308b\u3053\u3068\u306f\u51fa\u6765\u306a\u3044\u3068\u66f8\u3044\u305f\u306e\u3067\u3059\u304c\u3001\n\u306a\u3093\u3068Kotlin\u306f\u30e1\u30bd\u30c3\u30c9\u540d\u3067\u4f7f\u3048\u308b\u6587\u5b57\u5217\u306b\u95a2\u3057\u3066\u306fCustom Operator\u3092\u4f5c\u308b\u3053\u3068\u304c\u51fa\u6765\u307e\u3059\uff01\uff01\n\n###(12/21 11:30\u88dc\u8db3)\n---\n\u8a18\u53f7\u306f\u5b9a\u7fa9\u51fa\u6765\u306a\u3044\u3068\u66f8\u3044\u305f\u306e\u3067\u3059\u304c\u3001\u305f\u308d\u3046\u3055\u3093\u306b[\u30a2\u30af\u30b5\u30f3 \u30b0\u30e9\u30fc\u30d6\u3092\u4f7f\u3046\u3068\u66f8\u3051\u306a\u304f\u306f\u7121\u3044](https://twitter.com/ngsw_taro/status/678758565251710977)\u3068\u6559\u3048\u3066\u3044\u305f\u3060\u304d\u307e\u3057\u305f\uff01\n> infix fun Int.\\`\\*\\*\\`(n: Int) = ...\n5 \\`**` 3 //=> 125\n\n\u305f\u3060\u3001\u672c\u6765\u306fJava\u30b3\u30fc\u30c9\u4e0a\u3067\u306e\u8b58\u5225\u5b50\u304cKotlin\u306e\u4e88\u7d04\u8a9e\u3068\u3076\u3064\u304b\u3063\u305f\u3068\u304d\u306e\u5bfe\u51e6\u6cd5\u3089\u3057\u3044\u306e\u3067\u672c\u6765\u907f\u3051\u308b\u3079\u304d\u66f8\u304d\u65b9\u307f\u305f\u3044\u3067\u3059\u3002\n\n---\n\n\n\u4f8b\u3048\u3070Boolean\u306f\u3053\u306e\u69d8\u306b\u66f8\u3044\u3066\u3082\u6bd4\u8f03\u3059\u308b\u3053\u3068\u304c\u51fa\u6765\u307e\u3059\u3002\n\n```kotlin\nval foo = true\nval bar = true\n\n// pattern 1\nif(foo and bar) return\n\n// pattern 2\nval hoge = when {\n    foo or bar -> 100\n    else -> 0\n}\n```\n\nBoolean\u306e\u30bd\u30fc\u30b9\u3092\u898b\u308b\u3068\u3001\u3053\u306e\u3088\u3046\u306b\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u307e\u3059\u3002\n\n```kotlin:Boolean.kt\npublic class Boolean private () : Comparable<Boolean> {\n    /**\n     * Returns the inverse of this boolean.\n     */\n    public operator fun not(): Boolean\n\n    /**\n     * Performs a logical `and` operation between this Boolean and the [other] one.\n     */\n    public infix fun and(other: Boolean): Boolean\n\n    /**\n     * Performs a logical `or` operation between this Boolean and the [other] one.\n     */\n    public infix fun or(other: Boolean): Boolean\n\n    /**\n     * Performs a logical `xor` operation between this Boolean and the [other] one.\n     */\n    public infix fun xor(other: Boolean): Boolean\n\n    ...\n}\n```\n\n\u5148\u7a0b\u306e`operator`\u3068`infix`\u304c\u5b9a\u7fa9\u3055\u308c\u3066\u307e\u3059\u306d\u3002\n\u3064\u307e\u308a\u3001Kotlin\u3067\u3082`infix`\u3092\u5229\u7528\u3059\u308c\u3070custom operator\u304c\u4f5c\u308c\u308b\u3068\u3044\u3046\u3053\u3068\u3067\u3059\u3002\n\n# \u5fdc\u7528\u4f8b\n\n## 2\u884c\u4ee5\u4e0a\u306eElvis\u6f14\u7b97\u5b50\n\n\u5148\u65e5[kotlinlang-jp\u306eslack](http://kotlinlang-jp.herokuapp.com)\u3067\nnull check\u306f\u300c`if else`\u300d\u3067\u3059\u308b\u304b\u3001\u300cElvis\u6f14\u7b97\u5b50\u300d\u3067\u3059\u308b\u304b\u304c\u8a71\u984c\u306b\u306a\u3063\u3066\u3044\u305f\u306e\u3067\u3059\u304c\u3001\n\u500b\u4eba\u7684\u306bKotlin\u3067\u306f\u3001\u6bd4\u8f03\u306bnull\u3092\u4f7f\u3044\u305f\u304f\u7121\u3044\u3068\u601d\u3063\u3066\u3044\u307e\u3059\u3002(\u4ee3\u5165\u3084\u623b\u308a\u5024\u4ee5\u5916\u3067null\u3092\u66f8\u304d\u305f\u304f\u306a\u3044)\n\u305d\u306e\u305f\u3081\u666e\u6bb5\u30b3\u30fc\u30c9\u3092\u66f8\u304f\u6642\u306b\u306f\n\n```kotlin\nval foo: Int? = null\nfoo = 100\n\nval hoge = foo ?: 0\n```\n\n\u306e\u3088\u3046\u306b\u3057\u3066\u4ee3\u5165\u3092\u884c\u3063\u305f\u308a\n\n```kotlin\nfun hoge(value: Int?) {\n    valure ?: return\n    ...\n}\n```\n\u306e\u3088\u3046\u306b\u3057\u3066\u65e9\u671freturn\u3092\u304a\u3053\u306a\u3063\u3066\u3044\u308b\u306e\u3067\u3059\u304c\u3001\u30a8\u30eb\u30d3\u30b9\u6f14\u7b97\u5b50\u306f\u5f8c\u308d\u306b1\u884c\u3057\u304b\u3068\u308c\u306a\u3044\u554f\u984c\u304c\u3042\u308a\u307e\u3059\u3002\n\u73fe\u72b6\u30c1\u30fc\u30e0\u3068\u3057\u3066\u306f`run`\u3092\u4f7f\u3063\u30662\u884c\u4ee5\u4e0a\u306e\u51e6\u7406\u3092\u884c\u3063\u3066\u3044\u307e\u3059\u3002\n\n```kotlin\nfun generator() = 10 * 10\nval foo: Int? = null\nfoo = 100\n\n// possible\nval hoge = foo ?: 0\n\n// possible\nval hoge = foo ?: generator()\n\n// possible\nval hoge = foo ?: run {\n    // 2\u884c\u4ee5\u4e0a\u306e\u51e6\u7406\n}\n\n// impossible\nval bar = true\nval hoge = foo ?: {\n   // 2\u884c\u4ee5\u4e0a\u306e\u51e6\u7406\n   val a = if(bar) 10 else 100\n   a * generator()\n}\n```\n\n\u305d\u3053\u3067\u3001`infix`\u3092\u7528\u3044\u3066\u4ee5\u4e0b\u306e\u69d8\u306a\u95a2\u6570\u3092\u4f5c\u6210\u3057\u307e\u3059\u3002\n\n```kotlin\ninline infix fun <R> R?.elvis(f: () -> R): R = this ?: f()\n```\n\n\u3053\u308c\u3092\u7528\u3044\u308b\u3068\u5148\u307b\u3069\u66f8\u3051\u306a\u304b\u3063\u305f\u5f0f\u306e\u30b3\u30f3\u30d1\u30a4\u30eb\u304c\u901a\u308a\u307e\u3059\u3002(\u540d\u524d\u306f\u3082\u3046\u5c11\u3057\u8003\u3048\u305f\u3044\u3067\u3059\u306d\u2026\uff09\n\n```kotlin\n// possible :-D\nval hoge = foo elvis {\n   // 2\u884c\u4ee5\u4e0a\u306e\u51e6\u7406\n   val a = if(bar) 10 else 100\n   a * generator()\n}\n```\n\n## nullable\u306aif-else\n\n\u4ed6\u306b\u4f7f\u3048\u305d\u3046\u306a\u7b87\u6240\u3068\u3057\u3066\u306f\u3001\nif\u3067\u6bd4\u8f03\u3092\u3057\u305f\u3044\u6642\u306b\u4e2d\u8eab\u304cnullable\u3060\u3068Kotlin\u306e\u30b3\u30f3\u30d1\u30a4\u30e9\u306f\u30a8\u30e9\u30fc\u3092\u51fa\u3057\u307e\u3059\u3002\nnull\u3060\u3063\u305f\u3089false\u306e\u65b9\u306b\u3057\u3066\u6b32\u3057\u3044\u3051\u3069\u3001\u6bd4\u8f03\u524d\u306bsmart cast\u3057\u3066\u2026\u3068\u7d50\u69cb\u624b\u9593\u306a\u3053\u3068\u304c\u3042\u308a\u307e\u3059\u3002\n\u305d\u3093\u306a\u6642\u306b\u5148\u307b\u3069\u81ea\u4f5c\u3057\u305f`elvis`\u95a2\u6570\u3068`infix`\u3092\u7d44\u307f\u5408\u308f\u305b\u3066 \u3053\u306e\u3088\u3046\u306b\u66f8\u3051\u307e\u3059\u3002\n\n```kotlin\nval hoge: Int? = null\n\ninline infix fun <R> nullableIf(value: Boolean?, f: () -> R): R? {\n    value ?: return null\n    return if (value) f() else null\n}\n\nnullableIf(hoge == 0) {\n    // don't be called here\n} elvis {\n    // be called here\n}\n\n```\n\n__\u51c4\u3044\u305eKotlin!!__\n\u306a\u3093\u3060\u304b\u3093\u3060Kotlin\u6b746\u30f6\u6708\u306b\u306a\u308a\u307e\u3059\u304c\u3001\u3053\u306e\u8a18\u4e8b\u3092\u66f8\u3044\u3066\u308b\u6642\u306b\u521d\u3081\u3066\u3053\u3093\u306a\u4e8b\u304c\u51fa\u6765\u308b\uff01\uff01\u3063\u3066\u6c17\u3065\u304d\u307e\u3057\u305f\u3002\nKotlin\u306b\u306f`requireNotNull()`\u7b49\u306e\u4fbf\u5229\u306a\u30e1\u30bd\u30c3\u30c9\u304c\u6a19\u6e96\u3067\u591a\u6570\u7528\u610f\u3055\u308c\u3066\u3044\u308b\u306e\u3067\u3001\n\u3082\u3057\u304b\u3059\u308b\u3068\u3053\u3093\u306a\u4e8b\u3092\u3057\u306a\u3044\u3067\u3082\u3044\u3044\u611f\u3058\u306b\u5b9f\u73fe\u51fa\u6765\u308b\u306e\u304b\u3082\u3057\u308c\u306a\u3044\u3067\u3059\u304c\u3001\n\u4ed6\u306e\u7528\u9014\u306b\u3082\u5fdc\u7528\u51fa\u6765\u308b\u3068\u601d\u3046\u306e\u3067\u9762\u767d\u3044\u4f7f\u3044\u65b9\u304c\u3042\u3063\u305f\u3089\u6559\u3048\u3066\u4e0b\u3055\u3044\uff01\n\n\u4ee5\u4e0a`operator`\u3068`infix`\u306b\u3064\u3044\u3066\u304a\u8a71\u3092\u3057\u307e\u3057\u305f\u3002\n\u4f55\u304b\u9593\u9055\u3044\u7b49\u3042\u308a\u307e\u3057\u305f\u3089\u3001[@AAkira](https://twitter.com/_a_akira), [Mail](developer.a.akira@gmail.com)\u306b\u9023\u7d61\u3092\u9802\u3051\u308b\u3068\u6709\u308a\u96e3\u3044\u3067\u3059\u3002\nSlack\u306b\u3082\u3044\u308b\u306e\u3067\u662f\u975e\u307f\u306a\u3055\u3093\u3067\u8b70\u8ad6\u3057\u307e\u3057\u3087\u3046\uff01\n\n\n---\n\u660e\u65e5\u306frabitarochan\u3055\u3093\u3067\u3059\u3002\n"}