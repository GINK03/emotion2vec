{"context": " More than 1 year has passed since last update.\ntaskf/cmd.scm\n(define-module taskf.cmd\n               (use srfi-1)\n               (use srfi-19)\n               (use gauche.process)\n               (use file.util)\n               (export clear ToDo w r del))\n(select-module taskf.cmd)\n(define clear\n  (let1 c (process-output->string '(\"clear\"))\n        (lambda ()\n          (display c))))\n(define (ToDo)\n  (display \"?> \")(flush)\n  (let1 cmd (read)\n        (cond ((eq? cmd ':q)(exit))\n              ((eq? cmd ':w)(w))\n              ((eq? cmd ':r)(r))\n              ((eq? cmd ':del)(del))\n              (else (begin(print \"***ERROR***\\ncommand not found: \" cmd)(ToDo))))))\n(define (w)\n  (let1 words (with-input-from-file \n                (string-append (home-directory) \"/SchemeTask/.todo\") \n                (pa$ read))\n        (if (eof-object? words)\n          (writ (create) '())\n          (writ (create) (cons words '())))))\n(define (create)\n  (display \"\u65b0\u3057\u3044\u30bf\u30b9\u30af> \")(flush)\n  (let1 solve (read)\n        (if (eq? solve ':q)\n          (r)\n          (begin\n            (display \"\u671f\u9650\u65e5> \")(flush)\n            (let1 ttime (read)\n                  (if (eq? ttime ':q)\n                    (r)\n                    (cons solve (cons ttime '()))))))))\n(define (writ result words)\n  (with-output-to-file \n    (string-append (home-directory) \"/SchemeTask/.todo\")\n    (pa$ print\n         (if (null? words)\n           (x->string (cons result words))\n           (x->string (cons result (car words))))))\n  (w))\n(define (timer result)\n  (let* ((date1 \n           (make-date 0 0 0 0 (date-day(current-date))(date-month(current-date))(date-year(current-date))(date-zone-offset (current-date))))\n         (date2 (make-date 0 0 0 0 \n                           (third result) \n                           (second result) \n                           (first result) \n                           (date-zone-offset (current-date)))))\n        (cond ((> (date->modified-julian-day date1) (date->modified-julian-day date2))'\u671f\u9650\u904e\u304d\u3099\u3066\u307e\u3059\u3002)\n              ((eqv? (date->modified-julian-day date1) (date->modified-julian-day date2))'\u671f\u9650\u65e5\u3066\u3099\u3059\u3002)\n              (else (string->symbol\n                      (string-append \"\u6b8b\u308a\" \n                                     (x->string \n                                       (- (date->modified-julian-day date2) \n                                          (date->modified-julian-day date1)))\"\u65e5\u3066\u3099\u3059\u3002\"))))))\n(define (r)\n  (let1 words (with-input-from-file (string-append (home-directory) \"/SchemeTask/.todo\") (pa$ read))\n        (cond ((eof-object? words)\n               (begin\n                 (print \"Nothing!!!!!!\")\n                 (ToDo)))\n              ((null? words)\n               (begin \n                 (print \"Nothing!!!!!!\")\n                 (ToDo)))\n              (else (begin(for-each(lambda(word n)\n                                     (format #t \"[~s]~s: ~s\\n-> ~s\\n\" n (second word) (first word) \n                                             (timer (map (lambda(n)(x->number n)) (string-split (x->string (second word)) #\\/)))))\n                            (reverse words)(iota (length words) 1))(ToDo))))))\n(define (del)\n  (let1 n (read)\n        (let1 words (with-input-from-file \n                      (string-append (home-directory) \"/SchemeTask/.todo\") (pa$ read))\n              (with-output-to-file (string-append (home-directory) \"/SchemeToDo/.todo\")\n                                   (pa$ print\n                                        (cond\n                                          ((number? n)(x->string (delete (ref (reverse words) (- n 1)) words)))\n                                          ((eq? n '-a)\n                                           (begin \n                                             (display \"\u672c\u5f53\u306b\u3044\u3044\u3066\u3099\u3059\u304b?(y/n)\")\n                                             (flush)\n                                             (let1 ans (read)\n                                                   (if (eq? ans 'y)\n                                                     (x->string (filter symbol? words)))\n                                                   '())))\n                                          (else (string-append \"***ERROR command not found: \"n)))))\n              (ToDo))))\n(provide \"taskf/cmd\")\n\n\n```taskf/cmd.scm\n(define-module taskf.cmd\n\t\t\t   (use srfi-1)\n\t\t\t   (use srfi-19)\n\t\t\t   (use gauche.process)\n\t\t\t   (use file.util)\n\t\t\t   (export clear ToDo w r del))\n(select-module taskf.cmd)\n(define clear\n  (let1 c (process-output->string '(\"clear\"))\n\t\t(lambda ()\n\t\t  (display c))))\n(define (ToDo)\n  (display \"?> \")(flush)\n  (let1 cmd (read)\n\t\t(cond ((eq? cmd ':q)(exit))\n\t\t\t  ((eq? cmd ':w)(w))\n\t\t\t  ((eq? cmd ':r)(r))\n\t\t\t  ((eq? cmd ':del)(del))\n\t\t\t  (else (begin(print \"***ERROR***\\ncommand not found: \" cmd)(ToDo))))))\n(define (w)\n  (let1 words (with-input-from-file \n\t\t\t\t(string-append (home-directory) \"/SchemeTask/.todo\") \n\t\t\t\t(pa$ read))\n\t\t(if (eof-object? words)\n\t\t  (writ (create) '())\n\t\t  (writ (create) (cons words '())))))\n(define (create)\n  (display \"\u65b0\u3057\u3044\u30bf\u30b9\u30af> \")(flush)\n  (let1 solve (read)\n\t\t(if (eq? solve ':q)\n\t\t  (r)\n\t\t  (begin\n\t\t\t(display \"\u671f\u9650\u65e5> \")(flush)\n\t\t\t(let1 ttime (read)\n\t\t\t\t  (if (eq? ttime ':q)\n\t\t\t\t\t(r)\n\t\t\t\t\t(cons solve (cons ttime '()))))))))\n(define (writ result words)\n  (with-output-to-file \n\t(string-append (home-directory) \"/SchemeTask/.todo\")\n\t(pa$ print\n\t\t (if (null? words)\n\t\t   (x->string (cons result words))\n\t\t   (x->string (cons result (car words))))))\n  (w))\n(define (timer result)\n  (let*\t((date1 \n\t\t   (make-date 0 0 0 0 (date-day(current-date))(date-month(current-date))(date-year(current-date))(date-zone-offset (current-date))))\n\t\t (date2 (make-date 0 0 0 0 \n\t\t\t\t\t\t   (third result) \n\t\t\t\t\t\t   (second result) \n\t\t\t\t\t\t   (first result) \n\t\t\t\t\t\t   (date-zone-offset (current-date)))))\n\t\t(cond ((> (date->modified-julian-day date1) (date->modified-julian-day date2))'\u671f\u9650\u904e\u304d\u3099\u3066\u307e\u3059\u3002)\n\t\t\t  ((eqv? (date->modified-julian-day date1) (date->modified-julian-day date2))'\u671f\u9650\u65e5\u3066\u3099\u3059\u3002)\n\t\t\t  (else (string->symbol\n\t\t\t\t\t  (string-append \"\u6b8b\u308a\" \n\t\t\t\t\t\t\t\t\t (x->string \n\t\t\t\t\t\t\t\t\t   (- (date->modified-julian-day date2) \n\t\t\t\t\t\t\t\t\t\t  (date->modified-julian-day date1)))\"\u65e5\u3066\u3099\u3059\u3002\"))))))\n(define (r)\n  (let1 words (with-input-from-file (string-append (home-directory) \"/SchemeTask/.todo\") (pa$ read))\n\t\t(cond ((eof-object? words)\n\t\t\t   (begin\n\t\t\t\t (print \"Nothing!!!!!!\")\n\t\t\t\t (ToDo)))\n\t\t\t  ((null? words)\n\t\t\t   (begin \n\t\t\t\t (print \"Nothing!!!!!!\")\n\t\t\t\t (ToDo)))\n\t\t\t  (else (begin(for-each(lambda(word n)\n\t\t\t\t\t\t\t\t\t (format #t \"[~s]~s: ~s\\n-> ~s\\n\" n (second word) (first word) \n\t\t\t\t\t\t\t\t\t\t\t (timer (map (lambda(n)(x->number n)) (string-split (x->string (second word)) #\\/)))))\n\t\t\t\t\t\t\t(reverse words)(iota (length words) 1))(ToDo))))))\n(define (del)\n  (let1 n (read)\n\t\t(let1 words (with-input-from-file \n\t\t\t\t\t  (string-append (home-directory) \"/SchemeTask/.todo\") (pa$ read))\n\t\t\t  (with-output-to-file (string-append (home-directory) \"/SchemeToDo/.todo\")\n\t\t\t\t\t\t\t\t   (pa$ print\n\t\t\t\t\t\t\t\t\t\t(cond\n\t\t\t\t\t\t\t\t\t\t  ((number? n)(x->string (delete (ref (reverse words) (- n 1)) words)))\n\t\t\t\t\t\t\t\t\t\t  ((eq? n '-a)\n\t\t\t\t\t\t\t\t\t\t   (begin \n\t\t\t\t\t\t\t\t\t\t\t (display \"\u672c\u5f53\u306b\u3044\u3044\u3066\u3099\u3059\u304b?(y/n)\")\n\t\t\t\t\t\t\t\t\t\t\t (flush)\n\t\t\t\t\t\t\t\t\t\t\t (let1 ans (read)\n\t\t\t\t\t\t\t\t\t\t\t\t   (if (eq? ans 'y)\n\t\t\t\t\t\t\t\t\t\t\t\t\t (x->string (filter symbol? words)))\n\t\t\t\t\t\t\t\t\t\t\t\t   '())))\n\t\t\t\t\t\t\t\t\t\t  (else (string-append \"***ERROR command not found: \"n)))))\n\t\t\t  (ToDo))))\n(provide \"taskf/cmd\")\n```", "tags": ["Scheme"]}