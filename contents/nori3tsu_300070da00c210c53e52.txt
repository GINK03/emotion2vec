{"tags": ["JavaScript", "es2015"], "context": "DynamoDB\u306e\u3088\u3046\u306a\u30b9\u30eb\u30fc\u30d7\u30c3\u30c8\u3092\u6c17\u306b\u3059\u308b\u5fc5\u8981\u304c\u3042\u308bAPI\u306b\u30a2\u30af\u30bb\u30b9\u3059\u308b\u5834\u5408\u3001API\u5b9f\u884c\u306b\u5b9f\u884c\u56de\u6570\u5236\u9650\u3092\u304b\u3051\u305f\u304f\u306a\u308b\u5834\u5408\u304c\u3042\u308a\u307e\u3059\u3002npm\u306b\u6ca2\u5c71\u30e9\u30a4\u30d6\u30e9\u30ea\u304c\u516c\u958b\u3055\u308c\u3066\u3044\u307e\u3059\u304c\u3001Promise\u95a2\u6570\u306b\u30ec\u30fc\u30c8\u30ea\u30df\u30c3\u30c8\u3092\u4ed8\u4e0e\u3057\u305f\u30af\u30ed\u30fc\u30b8\u30e3\u30fc\u3092\u8fd4\u3059\u5b9f\u88c5\u3092\u66f8\u3044\u3066\u4f7f\u3046\u3053\u3068\u306b\u3057\u307e\u3057\u305f\u3002\n\u4f8b\u3048\u3070\u3042\u308bPromise\u3092\u8fd4\u3059\u95a2\u6570\u306e\u5b9f\u884c\u3092\u79d2\u959320\u56de\u306b\u5236\u9650\u3057\u305f\u3044\u5834\u5408\u3001\u6b21\u306e\u3088\u3046\u306b\u66f8\u304f\u3068\u8a2d\u5b9a\u5024\u3092\u8d85\u3048\u308b\u56de\u6570\u306e\u5b9f\u884c\u3092sleep\u3067\u8abf\u6574\u3057\u307e\u3059\u3002\nrateLimit\u95a2\u6570\u3067\u306f\u7d50\u679c\u7684\u306b\u5f15\u6570\u306e\u95a2\u6570\u3092\u5b9f\u884c\u3059\u308b\u30af\u30ed\u30fc\u30b8\u30e3\u30fc\u3092\u8fd4\u3057\u3066\u3044\u308b\u306e\u3067\u3001\u95a2\u6570\u306e\u4f7f\u3044\u65b9\u306f\u5909\u308f\u308a\u307e\u305b\u3093\u3002\nconst testFunctionRateLimit = rateLimit(testFunction, 20, 1000);\n\n\n\u5b9f\u88c5\n\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9:\n// ES2015\u4ee5\u5916\u306ePromise\u30e9\u30a4\u30d6\u30e9\u30ea\u3067\u3082\u52d5\u4f5c\u53ef\n// import Promise from 'bluebird';\n\nconst delay = (ms) => {\n  return new Promise((resolve) => {\n      setTimeout(resolve, ms);\n  });\n};\n\nconst rateLimit = (func, rate, inMs) => {\n  let executedHistories = [];\n\n  const wrapped = (...args) => {\n    const now = Date.now();\n    executedHistories.push(now);\n    executedHistories = executedHistories.filter((executedAt) => {\n      return (now - executedAt) < inMs;\n    });\n\n    if (rate < executedHistories.length) {\n      const sleepTime = inMs - (now - Math.min(...executedHistories));\n      return delay(sleepTime).then(() => {\n          executedHistories.pop();\n          return wrapped(...args);\n      });\n    } else {\n      return func(...args);\n    }\n  }\n  return wrapped;\n};\n\n\n\u52d5\u4f5c\u78ba\u8a8d\n\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9:\n// \u52d5\u4f5c\u78ba\u8a8d\u7528\u306e\u95a2\u6570\u3092\u5b9a\u7fa9\nconst startTime = Date.now();\nconst testFunction = (arg1, arg2, arg3) => {\n  return Promise.resolve().then(() => {\n      const elapsed = Date.now() - startTime;\n      console.log('arg1:', arg1, ', arg2:', arg2, ', arg3:', arg3, 'elapsed:', elapsed);\n  });\n};\n\n// testFunction\u306e\u5b9f\u884c\u30921000ms\u306b20\u56de\u306b\u5236\u9650\nconst testFunctionRateLimit = rateLimit(testFunction, 20, 1000);\n\n// \u76f4\u5217\u306b100\u56de\u5b9f\u884c\nlet promise = Promise.resolve(null);\nfor (let i = 0; i < 100; i++) {\n  promise = promise.then(() => {\n    return testFunctionRateLimit(i, i + 1, i + 2);\n  });\n}\n\npromise.then(() => {\n  console.log('done');\n});\n\n\u51fa\u529b:\narg1: 0 , arg2: 1 , arg3: 2 elapsed: 2\narg1: 1 , arg2: 2 , arg3: 3 elapsed: 3\n...\narg1: 18 , arg2: 19 , arg3: 20 elapsed: 5\narg1: 19 , arg2: 20 , arg3: 21 elapsed: 5\narg1: 20 , arg2: 21 , arg3: 22 elapsed: 1004\narg1: 21 , arg2: 22 , arg3: 23 elapsed: 1005\n...\narg1: 38 , arg2: 39 , arg3: 40 elapsed: 1006\narg1: 39 , arg2: 40 , arg3: 41 elapsed: 1006\narg1: 40 , arg2: 41 , arg3: 42 elapsed: 2006\narg1: 41 , arg2: 42 , arg3: 43 elapsed: 2006\n...\narg1: 58 , arg2: 59 , arg3: 60 elapsed: 2007\narg1: 59 , arg2: 60 , arg3: 61 elapsed: 2007\narg1: 60 , arg2: 61 , arg3: 62 elapsed: 3003\narg1: 61 , arg2: 62 , arg3: 63 elapsed: 3003\n...\narg1: 78 , arg2: 79 , arg3: 80 elapsed: 3006\narg1: 79 , arg2: 80 , arg3: 81 elapsed: 3006\narg1: 80 , arg2: 81 , arg3: 82 elapsed: 4002\narg1: 81 , arg2: 82 , arg3: 83 elapsed: 4002\n...\ndone\n\n\nDynamoDB\u306e\u3088\u3046\u306a\u30b9\u30eb\u30fc\u30d7\u30c3\u30c8\u3092\u6c17\u306b\u3059\u308b\u5fc5\u8981\u304c\u3042\u308bAPI\u306b\u30a2\u30af\u30bb\u30b9\u3059\u308b\u5834\u5408\u3001API\u5b9f\u884c\u306b\u5b9f\u884c\u56de\u6570\u5236\u9650\u3092\u304b\u3051\u305f\u304f\u306a\u308b\u5834\u5408\u304c\u3042\u308a\u307e\u3059\u3002npm\u306b\u6ca2\u5c71\u30e9\u30a4\u30d6\u30e9\u30ea\u304c\u516c\u958b\u3055\u308c\u3066\u3044\u307e\u3059\u304c\u3001Promise\u95a2\u6570\u306b\u30ec\u30fc\u30c8\u30ea\u30df\u30c3\u30c8\u3092\u4ed8\u4e0e\u3057\u305f\u30af\u30ed\u30fc\u30b8\u30e3\u30fc\u3092\u8fd4\u3059\u5b9f\u88c5\u3092\u66f8\u3044\u3066\u4f7f\u3046\u3053\u3068\u306b\u3057\u307e\u3057\u305f\u3002\n\n\u4f8b\u3048\u3070\u3042\u308bPromise\u3092\u8fd4\u3059\u95a2\u6570\u306e\u5b9f\u884c\u3092\u79d2\u959320\u56de\u306b\u5236\u9650\u3057\u305f\u3044\u5834\u5408\u3001\u6b21\u306e\u3088\u3046\u306b\u66f8\u304f\u3068\u8a2d\u5b9a\u5024\u3092\u8d85\u3048\u308b\u56de\u6570\u306e\u5b9f\u884c\u3092sleep\u3067\u8abf\u6574\u3057\u307e\u3059\u3002\nrateLimit\u95a2\u6570\u3067\u306f\u7d50\u679c\u7684\u306b\u5f15\u6570\u306e\u95a2\u6570\u3092\u5b9f\u884c\u3059\u308b\u30af\u30ed\u30fc\u30b8\u30e3\u30fc\u3092\u8fd4\u3057\u3066\u3044\u308b\u306e\u3067\u3001\u95a2\u6570\u306e\u4f7f\u3044\u65b9\u306f\u5909\u308f\u308a\u307e\u305b\u3093\u3002\n\n\n```js\nconst testFunctionRateLimit = rateLimit(testFunction, 20, 1000);\n```\n\n## \u5b9f\u88c5\n\n\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9:\n\n```js\n// ES2015\u4ee5\u5916\u306ePromise\u30e9\u30a4\u30d6\u30e9\u30ea\u3067\u3082\u52d5\u4f5c\u53ef\n// import Promise from 'bluebird';\n\nconst delay = (ms) => {\n  return new Promise((resolve) => {\n      setTimeout(resolve, ms);\n  });\n};\n\nconst rateLimit = (func, rate, inMs) => {\n  let executedHistories = [];\n\n  const wrapped = (...args) => {\n    const now = Date.now();\n    executedHistories.push(now);\n    executedHistories = executedHistories.filter((executedAt) => {\n      return (now - executedAt) < inMs;\n    });\n\n    if (rate < executedHistories.length) {\n      const sleepTime = inMs - (now - Math.min(...executedHistories));\n      return delay(sleepTime).then(() => {\n          executedHistories.pop();\n          return wrapped(...args);\n      });\n    } else {\n      return func(...args);\n    }\n  }\n  return wrapped;\n};\n```\n\n### \u52d5\u4f5c\u78ba\u8a8d\n\n\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9:\n\n```js\n// \u52d5\u4f5c\u78ba\u8a8d\u7528\u306e\u95a2\u6570\u3092\u5b9a\u7fa9\nconst startTime = Date.now();\nconst testFunction = (arg1, arg2, arg3) => {\n  return Promise.resolve().then(() => {\n      const elapsed = Date.now() - startTime;\n      console.log('arg1:', arg1, ', arg2:', arg2, ', arg3:', arg3, 'elapsed:', elapsed);\n  });\n};\n\n// testFunction\u306e\u5b9f\u884c\u30921000ms\u306b20\u56de\u306b\u5236\u9650\nconst testFunctionRateLimit = rateLimit(testFunction, 20, 1000);\n\n// \u76f4\u5217\u306b100\u56de\u5b9f\u884c\nlet promise = Promise.resolve(null);\nfor (let i = 0; i < 100; i++) {\n  promise = promise.then(() => {\n    return testFunctionRateLimit(i, i + 1, i + 2);\n  });\n}\n\npromise.then(() => {\n  console.log('done');\n});\n```\n\n\u51fa\u529b:\n\n```\narg1: 0 , arg2: 1 , arg3: 2 elapsed: 2\narg1: 1 , arg2: 2 , arg3: 3 elapsed: 3\n...\narg1: 18 , arg2: 19 , arg3: 20 elapsed: 5\narg1: 19 , arg2: 20 , arg3: 21 elapsed: 5\narg1: 20 , arg2: 21 , arg3: 22 elapsed: 1004\narg1: 21 , arg2: 22 , arg3: 23 elapsed: 1005\n...\narg1: 38 , arg2: 39 , arg3: 40 elapsed: 1006\narg1: 39 , arg2: 40 , arg3: 41 elapsed: 1006\narg1: 40 , arg2: 41 , arg3: 42 elapsed: 2006\narg1: 41 , arg2: 42 , arg3: 43 elapsed: 2006\n...\narg1: 58 , arg2: 59 , arg3: 60 elapsed: 2007\narg1: 59 , arg2: 60 , arg3: 61 elapsed: 2007\narg1: 60 , arg2: 61 , arg3: 62 elapsed: 3003\narg1: 61 , arg2: 62 , arg3: 63 elapsed: 3003\n...\narg1: 78 , arg2: 79 , arg3: 80 elapsed: 3006\narg1: 79 , arg2: 80 , arg3: 81 elapsed: 3006\narg1: 80 , arg2: 81 , arg3: 82 elapsed: 4002\narg1: 81 , arg2: 82 , arg3: 83 elapsed: 4002\n...\ndone\n```\n"}