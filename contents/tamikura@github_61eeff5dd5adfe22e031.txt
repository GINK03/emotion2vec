{"tags": ["AWS", "Ruby", "Graphviz"], "context": " More than 1 year has passed since last update.\n\n\u4ed5\u69d8\n\nVPC + Subnet + EC2 + ELB\u3092\u8868\u793a\n\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u306f\u6307\u5b9a\u3057\u305f\u5c5e\u6027\u30fb\u30bf\u30b0\u3092\u8868\u793a\nELB\u306f\u53c2\u52a0\u3057\u3066\u3044\u308bEC2\u306eInService/OutOfService\u304c\u5206\u304b\u308b\u3088\u3046\u306b\u8272\u5206\u3051\uff08Inservice=\u9752, OutofService=\u8d64)\nVPC\u3054\u3068\u306b\u753b\u50cf\u3092\u51fa\u529b\n\n\n\u51fa\u529b\u7d50\u679c\n\nAWS\u69cb\u6210\n\nVPC\u306f\uff11\u3064\uff08\"dev\"\uff09\nSubnet\u306f\uff12\u3064\uff08\"sub1\" , \"sub2\"\uff09\nEC2\u306f\uff13\u3064\uff08\"dev1\", \"dev2\", \"dev3\")\n\n\n\u30bf\u30b0\u306f Name, status, role\n\n\nELB\u306f\uff11\u3064\uff08\"elb1\")\n\n\n\n\u51fa\u529b\u7d50\u679c\n\n\n\u30bb\u30c3\u30c8\u30a2\u30c3\u30d7\nsudo yum install -y graphviz\ngem install gviz\n\n\n\u30b3\u30fc\u30c9\n# -*- coding: utf-8 -*-\nrequire 'json'\nrequire 'gviz'\n\nDISPLAY_INSTANCE_TAG  = ['Name', 'status', 'role']\nDISPLAY_INSTANCE_ATTR = ['PrivateIpAddress']\n\ndef get_tag_value(tags, key)\n  return nil if tags.nil? or tags == []\n  tags.each do |k, v|\n    next unless k\n    return k['Value'] if k['Key'].downcase == key.downcase\n  end\n  nil\nend\n\ndef get_vpc_info\n  ret = {}\n  JSON.parse(`aws ec2 describe-vpcs`)['Vpcs'].each do |vpc|\n    ret[vpc['VpcId']] = { 'name' => get_tag_value(vpc['Tags'], \"name\"), 'vpc_id' => vpc['VpcId'], 'subnets' => [], 'elbs' => [] }\n  end\n  ret\nend\n\ndef get_subnet_info\n  ret = {}\n  JSON.parse(`aws ec2 describe-subnets`)['Subnets'].each do |subnet|\n    name = get_tag_value(subnet['Tags'], \"name\")\n    ret[subnet['SubnetId']] = { 'name' => get_tag_value(subnet['Tags'], \"name\"), 'subnet_id' => subnet['SubnetId'], 'vpc_id' => subnet['VpcId'], 'instances' => [] }\n  end\n  ret\nend\n\ndef get_instance_info\n  ret = {}\n  JSON.parse(`aws ec2 describe-instances`)['Reservations'].each do |i|\n    i['Instances'].each do |inst|\n      attr = {'instance_id' => inst['InstanceId'], 'subnet_id' => inst['SubnetId']}\n      # \u8868\u793a\u3055\u305b\u305f\u3044\u30bf\u30b0\u3092\u53d6\u5f97\uff06\u8a2d\u5b9a\n      DISPLAY_INSTANCE_TAG.each do |tag|\n        attr.merge!(tag => get_tag_value(inst['Tags'], tag))\n      end\n      # \u8868\u793a\u3055\u305b\u305f\u3044\u5c5e\u6027\u3092\u53d6\u5f97\uff06\u8a2d\u5b9a\n      DISPLAY_INSTANCE_ATTR.each do |attr_key|\n        attr.merge!(attr_key => inst[attr_key])\n      end\n      ret[inst['InstanceId']] = attr\n    end\n  end\n  ret\nend\n\n\ndef get_elb_info\n  ret = {}\n  JSON.parse(`aws elb describe-load-balancers`)['LoadBalancerDescriptions'].each do |e|\n    instance_ids = []\n    e['Instances'].select {|inst| instance_ids << inst['InstanceId'] if inst['InstanceId'] }\n    ret[e['LoadBalancerName']] = { 'name' => e['LoadBalancerName'], 'vpc_id' => e['VPCId'], 'instances' => instance_ids, 'health' => {} }\n  end\n  ret\nend\n\ndef get_elb_health(elb_name)\n  ret = {}\n  JSON.parse(`aws elb describe-instance-health --load-balancer-name #{elb_name}`)['InstanceStates'].each do |e|\n    ret[e['InstanceId']] =  e['State']\n  end\n  ret\nend\n\n# VPC\u60c5\u5831\u3092\u53d6\u5f97\nvpc = get_vpc_info\n# Subnet\u60c5\u5831\u306e\u53d6\u5f97\nsubnet = get_subnet_info\n# VPC\u60c5\u5831\u306bSubnet\u3092\u8ffd\u52a0\nsubnet.each do |subnet_id, v|\n  next unless vpc[v['vpc_id']]\n  vpc[v['vpc_id']]['subnets'] << subnet_id\nend\n# EC2\u60c5\u5831\u3092\u53d6\u5f97\ninstance = get_instance_info\n# Subnet\u60c5\u5831\u306bEC2\u3092\u8ffd\u52a0\ninstance.each do |inst_id, v|\n  next unless subnet[v['subnet_id']]\n  subnet[v['subnet_id']]['instances'] << inst_id\nend\n# ELB\u60c5\u5831\u3092\u53d6\u5f97\nelb = get_elb_info\n# VPC\u60c5\u5831\u306bELB\u3092\u8ffd\u52a0\nelb.each do |elb_name, v|\n  next unless vpc[v['vpc_id']]\n  vpc[v['vpc_id']]['elbs'] << elb_name\n  v['health'] = get_elb_health(elb_name)\nend\n\nvpc.each do |vpc_id, v|\n  Graph do\n   subgraph do\n      global label:\"#{vpc[vpc_id]['name']}\"\n\n      v['subnets'].each_with_index do |subnet_id, i|\n        subgraph(\"cluster#{i+1}\") do\n          global label:\"#{subnet[subnet_id]['name']}\"\n          subnet[subnet_id]['instances'].each do |inst_id|\n\n            label = \"{ \"\n            DISPLAY_INSTANCE_TAG.each_with_index do |tag, i|\n              label += \" | \" if i > 0\n              label += instance[inst_id][tag] ? instance[inst_id][tag] : \"\"\n            end\n            DISPLAY_INSTANCE_ATTR.each_with_index do |at, i|\n              label += \" | \"\n              label += instance[inst_id][at] ? instance[inst_id][at] : \"\"\n            end\n            label += \" }\"\n            node:\"#{instance[inst_id]['Name'].gsub(\"-\",\"\")}\",\n            :shape => :Mrecord,\n            :style => :filled,\n            :fillcolor => :yellow,\n            :label => label\n          end\n        end\n      end\n\n      v['elbs'].each do |elb_name|\n        node:\"#{elb_name.gsub(\"-\",\"\")}\"\n\n        instance_names = []\n        elb[elb_name]['instances'].each do |inst_id|\n          instance_names << instance[inst_id]['Name'].gsub(\"-\",\"\")\n\n          color = elb[elb_name]['health'][inst_id] == 'InService' ? \"blue\" : \"red\"\n          edge :\"#{elb_name.gsub(\"-\",\"\")}_#{instance[inst_id]['Name'].gsub(\"-\",\"\")}\", color:\"#{color}\"\n        end\n        route :\"#{elb_name.gsub(\"-\",\"\")}\" => instance_names\n      end\n    end\n    save(:\"#{v['name']}\", :png)\n  end\n  `dot -Tpng #{v['name']}.dot -o #{v['name']}.png`\nend\n\n\n\n## \u4ed5\u69d8\n* VPC + Subnet + EC2 + ELB\u3092\u8868\u793a\n* \u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u306f\u6307\u5b9a\u3057\u305f\u5c5e\u6027\u30fb\u30bf\u30b0\u3092\u8868\u793a\n* ELB\u306f\u53c2\u52a0\u3057\u3066\u3044\u308bEC2\u306eInService/OutOfService\u304c\u5206\u304b\u308b\u3088\u3046\u306b\u8272\u5206\u3051\uff08Inservice=\u9752, OutofService=\u8d64)\n* VPC\u3054\u3068\u306b\u753b\u50cf\u3092\u51fa\u529b\n\n## \u51fa\u529b\u7d50\u679c\n### AWS\u69cb\u6210\n* VPC\u306f\uff11\u3064\uff08\"dev\"\uff09\n* Subnet\u306f\uff12\u3064\uff08\"sub1\" , \"sub2\"\uff09\n* EC2\u306f\uff13\u3064\uff08\"dev1\", \"dev2\", \"dev3\")\n * \u30bf\u30b0\u306f Name, status, role\n* ELB\u306f\uff11\u3064\uff08\"elb1\")\n\n![20160229_003815.jpg](https://qiita-image-store.s3.amazonaws.com/0/10862/fa60051a-473e-bed1-62c9-b2ae245ae7e6.jpeg)\n\n### \u51fa\u529b\u7d50\u679c\n![dev.png](https://qiita-image-store.s3.amazonaws.com/0/10862/122110b9-494d-c6cd-139f-a50c8c16c4f0.png)\n\n\n## \u30bb\u30c3\u30c8\u30a2\u30c3\u30d7\n```\nsudo yum install -y graphviz\ngem install gviz\n```\n\n## \u30b3\u30fc\u30c9\n``` ruby\n# -*- coding: utf-8 -*-\nrequire 'json'\nrequire 'gviz'\n\nDISPLAY_INSTANCE_TAG  = ['Name', 'status', 'role']\nDISPLAY_INSTANCE_ATTR = ['PrivateIpAddress']\n\ndef get_tag_value(tags, key)\n  return nil if tags.nil? or tags == []\n  tags.each do |k, v|\n    next unless k\n    return k['Value'] if k['Key'].downcase == key.downcase\n  end\n  nil\nend\n\ndef get_vpc_info\n  ret = {}\n  JSON.parse(`aws ec2 describe-vpcs`)['Vpcs'].each do |vpc|\n    ret[vpc['VpcId']] = { 'name' => get_tag_value(vpc['Tags'], \"name\"), 'vpc_id' => vpc['VpcId'], 'subnets' => [], 'elbs' => [] }\n  end\n  ret\nend\n\ndef get_subnet_info\n  ret = {}\n  JSON.parse(`aws ec2 describe-subnets`)['Subnets'].each do |subnet|\n    name = get_tag_value(subnet['Tags'], \"name\")\n    ret[subnet['SubnetId']] = { 'name' => get_tag_value(subnet['Tags'], \"name\"), 'subnet_id' => subnet['SubnetId'], 'vpc_id' => subnet['VpcId'], 'instances' => [] }\n  end\n  ret\nend\n\ndef get_instance_info\n  ret = {}\n  JSON.parse(`aws ec2 describe-instances`)['Reservations'].each do |i|\n    i['Instances'].each do |inst|\n      attr = {'instance_id' => inst['InstanceId'], 'subnet_id' => inst['SubnetId']}\n      # \u8868\u793a\u3055\u305b\u305f\u3044\u30bf\u30b0\u3092\u53d6\u5f97\uff06\u8a2d\u5b9a\n      DISPLAY_INSTANCE_TAG.each do |tag|\n        attr.merge!(tag => get_tag_value(inst['Tags'], tag))\n      end\n      # \u8868\u793a\u3055\u305b\u305f\u3044\u5c5e\u6027\u3092\u53d6\u5f97\uff06\u8a2d\u5b9a\n      DISPLAY_INSTANCE_ATTR.each do |attr_key|\n        attr.merge!(attr_key => inst[attr_key])\n      end\n      ret[inst['InstanceId']] = attr\n    end\n  end\n  ret\nend\n\n\ndef get_elb_info\n  ret = {}\n  JSON.parse(`aws elb describe-load-balancers`)['LoadBalancerDescriptions'].each do |e|\n    instance_ids = []\n    e['Instances'].select {|inst| instance_ids << inst['InstanceId'] if inst['InstanceId'] }\n    ret[e['LoadBalancerName']] = { 'name' => e['LoadBalancerName'], 'vpc_id' => e['VPCId'], 'instances' => instance_ids, 'health' => {} }\n  end\n  ret\nend\n\ndef get_elb_health(elb_name)\n  ret = {}\n  JSON.parse(`aws elb describe-instance-health --load-balancer-name #{elb_name}`)['InstanceStates'].each do |e|\n    ret[e['InstanceId']] =  e['State']\n  end\n  ret\nend\n\n# VPC\u60c5\u5831\u3092\u53d6\u5f97\nvpc = get_vpc_info\n# Subnet\u60c5\u5831\u306e\u53d6\u5f97\nsubnet = get_subnet_info\n# VPC\u60c5\u5831\u306bSubnet\u3092\u8ffd\u52a0\nsubnet.each do |subnet_id, v|\n  next unless vpc[v['vpc_id']]\n  vpc[v['vpc_id']]['subnets'] << subnet_id\nend\n# EC2\u60c5\u5831\u3092\u53d6\u5f97\ninstance = get_instance_info\n# Subnet\u60c5\u5831\u306bEC2\u3092\u8ffd\u52a0\ninstance.each do |inst_id, v|\n  next unless subnet[v['subnet_id']]\n  subnet[v['subnet_id']]['instances'] << inst_id\nend\n# ELB\u60c5\u5831\u3092\u53d6\u5f97\nelb = get_elb_info\n# VPC\u60c5\u5831\u306bELB\u3092\u8ffd\u52a0\nelb.each do |elb_name, v|\n  next unless vpc[v['vpc_id']]\n  vpc[v['vpc_id']]['elbs'] << elb_name\n  v['health'] = get_elb_health(elb_name)\nend\n\nvpc.each do |vpc_id, v|\n  Graph do\n   subgraph do\n      global label:\"#{vpc[vpc_id]['name']}\"\n\n      v['subnets'].each_with_index do |subnet_id, i|\n        subgraph(\"cluster#{i+1}\") do\n          global label:\"#{subnet[subnet_id]['name']}\"\n          subnet[subnet_id]['instances'].each do |inst_id|\n\n            label = \"{ \"\n            DISPLAY_INSTANCE_TAG.each_with_index do |tag, i|\n              label += \" | \" if i > 0\n              label += instance[inst_id][tag] ? instance[inst_id][tag] : \"\"\n            end\n            DISPLAY_INSTANCE_ATTR.each_with_index do |at, i|\n              label += \" | \"\n              label += instance[inst_id][at] ? instance[inst_id][at] : \"\"\n            end\n            label += \" }\"\n            node:\"#{instance[inst_id]['Name'].gsub(\"-\",\"\")}\",\n            :shape => :Mrecord,\n            :style => :filled,\n            :fillcolor => :yellow,\n            :label => label\n          end\n        end\n      end\n\n      v['elbs'].each do |elb_name|\n        node:\"#{elb_name.gsub(\"-\",\"\")}\"\n\n        instance_names = []\n        elb[elb_name]['instances'].each do |inst_id|\n          instance_names << instance[inst_id]['Name'].gsub(\"-\",\"\")\n\n          color = elb[elb_name]['health'][inst_id] == 'InService' ? \"blue\" : \"red\"\n          edge :\"#{elb_name.gsub(\"-\",\"\")}_#{instance[inst_id]['Name'].gsub(\"-\",\"\")}\", color:\"#{color}\"\n        end\n        route :\"#{elb_name.gsub(\"-\",\"\")}\" => instance_names\n      end\n    end\n    save(:\"#{v['name']}\", :png)\n  end\n  `dot -Tpng #{v['name']}.dot -o #{v['name']}.png`\nend\n\n```\n"}