{"context": "Kotlin\u3067View\u306e\u30d0\u30a4\u30f3\u30c9\u3092\u3059\u308b\u306e\u306b\u3001ButterKnife\u306e\u4ee3\u308f\u308a\u306bKotterKnife\u3092\u4f7f\u3046\u3068\u3044\u3046\u306e\u306f\u3001\u7d20\u76f4\u306a\u9078\u629e\u3060\u3068\u601d\u3046\u306e\u3067\u3059\u304c\u3001Fragment\u3067\u4f7f\u3046\u5834\u5408\u3001Fragment\u306e\u6027\u8cea\u3068KotterKnife\u306e\u5b9f\u88c5\u306e\u95a2\u4fc2\u304b\u3089\u3001\u610f\u56f3\u3057\u305f\u3068\u304a\u308a\u306b\u306f\u52d5\u4f5c\u3057\u306a\u3044\u3053\u3068\u304c\u3042\u308a\u307e\u3059\u3002\n\nKotterKnife\u306f\u306a\u306b\u3092\u3057\u3066\u304f\u308c\u308b\uff1f\nKotterKnife\u3067\u306f\u3001Kotlin\u306eDelegation\u3092\u5229\u7528\u3057\u3066\u3001\u5909\u6570\u306e\u521d\u671f\u5316\u3092\u9045\u5ef6\u3057\u3066\u3001\u5fc5\u8981\u306a\u3068\u304d\u306bfindViewById()\u3057\u3066\u304f\u308c\u307e\u3059\u3002\n\u305f\u3060\u3057\u3001\u4e00\u5ea6\u3001findViewById()\u3067\u898b\u3064\u3051\u305fView\u306f\u30ad\u30e3\u30c3\u30b7\u30e5\uff08\u30e1\u30e2\u5316\uff09\u3057\u3066\u3001\u305d\u308c\u4ee5\u5f8c\u306f\u30ad\u30e3\u30c3\u30b7\u30e5\u3057\u305fView\u3092\u8fd4\u3059\u3088\u3046\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u3002\n\nFragment\u306e\u30e9\u30a4\u30d5\u30b5\u30a4\u30af\u30eb\u3092\u601d\u3044\u51fa\u3057\u3066\u307f\u3088\u3046\nhttp://developer.android.com/intl/ja/guide/components/fragments.html#Creating\nFragment\u3067\u753b\u9762\u9077\u79fb\u3092\u3059\u308b\u5834\u5408\u3001\u9077\u79fb\u5148\u304b\u3089\u623b\u3063\u3066\u304f\u308b\u3068\u304d\uff08\u30d0\u30c3\u30af\u30b9\u30bf\u30c3\u30af\u304b\u3089\u623b\u3055\u308c\u308b\u3068\u304d\uff09\u3001onCreateView()\u304c\u547c\u3070\u308c\u307e\u3059\u3002\n\u901a\u5e38\u3001\u305d\u3053\u3067\u306f\u30ea\u30bd\u30fc\u30b9\u3067\u5b9a\u7fa9\u3057\u305f\u30ec\u30a4\u30a2\u30a6\u30c8\u3092inflate()\u3057\u3066\u8fd4\u3057\u307e\u3059\u3002\n\n\u306a\u306b\u304c\u554f\u984c\uff1f\nKotterKnife\u304cfindViewById()\u3059\u308b\u306e\u306f\u3001\u6700\u521d\u306e\u4e00\u56de\u3060\u3051\u3067\u3059\u3002\nFragment\u3067\u306f\u3001View\u3092\u751f\u6210\u3059\u308b\u306e\u306f\u4e00\u56de\u3060\u3051\u3068\u306f\u9650\u308a\u307e\u305b\u3093\u3002\n\u3064\u307e\u308a\u3001Fragment\u304c\u62b1\u3048\u308bView\u3068Fragment\u5185\u3067\u5909\u6570\u306b\u30d0\u30a4\u30f3\u30c9\u3055\u308c\u305fView\u304c\u7570\u306a\u3063\u3066\u3057\u307e\u3046\u5834\u5408\u304c\u3042\u308b\u308f\u3051\u3067\u3059\u3002\u3068\u3044\u3046\u304b\u3001onCreateView()\u3067View\u3092\u4f5c\u308a\u76f4\u3057\u3066\u3044\u308b\u9650\u308a\u3001\u9077\u79fb\u5148\u304b\u3089\u623b\u3063\u3066\u304d\u305fFragment\u3067\u306f\u3001\u5fc5\u305a\u7570\u306a\u308b\u3082\u306e\u306b\u306a\u3063\u3066\u3057\u307e\u3044\u307e\u3059\u3002\n\n\u7d50\u5c40\nKotterKnife\u3092\u4f7f\u3046\u306e\u306f\u3084\u3081\u307e\u3057\u305f\u3002\n\u30ad\u30e3\u30c3\u30b7\u30e5\u3092\u30af\u30ea\u30a2\u3067\u304d\u308bdelegate\u306a\u3089\u3044\u3051\u305d\u3046\u306a\u306e\u3067\u3001\n\nViewDelegate.kt\n\nclass ViewDelegate(var rootView: View? = null) {\n\n    private val delegates = ArrayList<Bind<*>>()\n\n    fun <V: View> bind(id: Int): Bind<V> {\n        val delegate = Bind<V>(id)\n        delegates.add(delegate)\n        return delegate\n    }\n\n    fun clearAll() {\n        delegates.forEach { it.clear() }\n    }\n\n    inner class Bind<V: View>(val id: Int) : ReadOnlyProperty<Any, V> {\n        var root: View? = null\n        var view: View? = null\n\n        @Suppress(\"UNCHECKED_CAST\")\n        override fun getValue(thisRef: Any, property: KProperty<*>): V {\n            if (view == null || root != rootView) {\n                root = rootView\n                if (root != null) {\n                    view = root!!.findViewById(id)\n                } else {\n                    throw IllegalStateException(\"root view is null.\")\n                }\n            }\n            if (view != null) {\n                return view!! as V\n            } else {\n                throw IllegalStateException(\"View ID $id for '${property.name}' not found.\")\n            }\n        }\n\n        fun clear() {\n            root = null\n            view = null\n        }\n    }\n}\n\n\n\n\u3053\u3093\u306a\u30af\u30e9\u30b9\u3092\u4f5c\u3063\u3066\u3001\n\nFooFragment.kt\n\nclass FooFragment : Fragment() {\n    val views = ViewDelegate()\n    val hogeButton: Button by views.bind(R.id.hoge_button)\n    val fugaText: TextView by views.bind(R.id.fuga_text)\n\n    override fun onCreateView(inflater: LayoutInflater, container: ViewGroup?, savedInstanceState: Bundle?): View? {\n        val view inflater.inflate(R.layout.fragment_foo, container, false)\n        views.rootView = view\n        return view\n    }\n\n    override fun onDestroyView() {\n        super.onDestroyView()\n        views.clearAll()\n    }\n\n    ...\n}\n\n\n\n\u3053\u3093\u306a\u98a8\u306b\u4f7f\u3046\u3088\u3046\u306b\u3057\u307e\u3057\u305f\u3002\nBind\u30af\u30e9\u30b9\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u304cView\u3092\u4fdd\u6301\u3059\u308b\u306e\u3067\u3001\u30e1\u30e2\u30ea\u30ea\u30fc\u30af\u3057\u306a\u3044\u3088\u3046\u306bonDestroyView()\u3067clearAll()\u3057\u3066\u307e\u3059\u304c\u3001\u5b9a\u578b\u51e6\u7406\u306a\u306e\u3067\u3061\u3087\u3063\u3068\u3044\u3084\u3093\u306a\u611f\u3058\u3067\u3059\u306d\u3002\nViewHolder\u30d1\u30bf\u30fc\u30f3\u3067\u3082\u4f7f\u3048\u308b\u3088\u3046\u306b\u3001rootView\u3092\u4fdd\u6301\u3057\u3066\u3044\u308b\u306e\u3067\u3059\u304c\u3001Fragment\u3092\u4fdd\u6301\u3059\u308b\u3088\u3046\u306b\u3059\u308c\u3070\u3001views.rootView = view\u3068\u3057\u3066\u3044\u308b\u3068\u3053\u308d\u3082\u7701\u3051\u305d\u3046\u3067\u3059\u3002\n\u8ab0\u304b\u3001\u3044\u3044\u611f\u3058\u306b\u307e\u3068\u3081\u3066\u304f\u308c\u308b\u4eba\u304c\u73fe\u308c\u308b\u3068\u3046\u308c\u3057\u3044\u3067\u3059\u306d\u3002\n\n2016.5.23 \u8ffd\u8a18\nDelegate\u306b\u3064\u3044\u3066\u3001\u3044\u308d\u3044\u308d\u7d06\u4f59\u66f2\u6298\u3042\u3063\u3066\u3001\u4eca\u3067\u306f\u3001\n\nViews.kt\n@Suppress(\"UNCHECKED_CAST\")\nobject Views {\n\n    fun <V: View> bind(activity: Activity, id: Int): Lazy<V> = lazy { activity.findViewById(id) as V }\n    fun <V: View> bind(fragment: android.support.v4.app.Fragment, id: Int): Bind4<V> = Bind4(fragment, id)\n    fun <V: View> bind(fragment: android.app.Fragment, id: Int): Bind<V> = Bind(fragment, id)\n    fun <V: View> bind(view: View, id: Int): Lazy<V> = lazy { view.findViewById(id) as V }\n\n    class Bind<V: View>(val fragment: android.app.Fragment, val id: Int) : ReadOnlyProperty<Any, V> {\n\n        override fun getValue(thisRef: Any, property: KProperty<*>): V {\n            return fragment.view?.findViewById(id) as V\n        }\n    }\n\n    class Bind4<V: View>(val fragment: android.support.v4.app.Fragment, val id: Int) : ReadOnlyProperty<Any, V> {\n\n        override fun getValue(thisRef: Any, property: KProperty<*>): V {\n            return fragment.view?.findViewById(id) as V\n        }\n    }\n}\n\n\n\u3053\u3093\u306aobject\u3092\u4f5c\u3063\u3066\u3001\n\nFooFragment.kt\n\nclass FooFragment : Fragment() {\n    val hogeButton: Button by Views.bind(this, R.id.hoge_button)\n    val fugaText: TextView by Views.bind(this, R.id.fuga_text)\n\n    override fun onCreateView(inflater: LayoutInflater, container: ViewGroup?, savedInstanceState: Bundle?): View? {\n        return inflater.inflate(R.layout.fragment_foo, container, false)\n    }\n\n    ...\n}\n\n\n\n\u3053\u3093\u306a\u98a8\u306b\u4f7f\u3063\u3066\u3044\u307e\u3059\u3002\nFragment\u306e\u5834\u5408\u306b\u306f\u3001\u6bce\u56de\u3001findViewById()\u3057\u3066\u3044\u3066\u52b9\u7387\u306f\u60aa\u3044\u306e\u3067\u3059\u304c\u3001clearAll()\u3092\u5fd8\u308c\u305a\u306b\u8a18\u8ff0\u3059\u308b\u3068\u3044\u3046\u30d7\u30ec\u30c3\u30b7\u30e3\u30fc\u304c\u5fc3\u5730\u3088\u304f\u306a\u3044\u306e\u3067\u3001\u52b9\u7387\u306b\u3064\u3044\u3066\u306f\u307e\u3041\u3044\u3044\u3084\u3068\u601d\u3046\u3053\u3068\u306b\u3057\u3066\u3044\u307e\u3059\u3002\n\nKotlin\u3067View\u306e\u30d0\u30a4\u30f3\u30c9\u3092\u3059\u308b\u306e\u306b\u3001ButterKnife\u306e\u4ee3\u308f\u308a\u306bKotterKnife\u3092\u4f7f\u3046\u3068\u3044\u3046\u306e\u306f\u3001\u7d20\u76f4\u306a\u9078\u629e\u3060\u3068\u601d\u3046\u306e\u3067\u3059\u304c\u3001Fragment\u3067\u4f7f\u3046\u5834\u5408\u3001Fragment\u306e\u6027\u8cea\u3068KotterKnife\u306e\u5b9f\u88c5\u306e\u95a2\u4fc2\u304b\u3089\u3001\u610f\u56f3\u3057\u305f\u3068\u304a\u308a\u306b\u306f\u52d5\u4f5c\u3057\u306a\u3044\u3053\u3068\u304c\u3042\u308a\u307e\u3059\u3002\n\n\n### KotterKnife\u306f\u306a\u306b\u3092\u3057\u3066\u304f\u308c\u308b\uff1f\n\nKotterKnife\u3067\u306f\u3001Kotlin\u306eDelegation\u3092\u5229\u7528\u3057\u3066\u3001\u5909\u6570\u306e\u521d\u671f\u5316\u3092\u9045\u5ef6\u3057\u3066\u3001\u5fc5\u8981\u306a\u3068\u304d\u306bfindViewById()\u3057\u3066\u304f\u308c\u307e\u3059\u3002\n\u305f\u3060\u3057\u3001\u4e00\u5ea6\u3001findViewById()\u3067\u898b\u3064\u3051\u305fView\u306f\u30ad\u30e3\u30c3\u30b7\u30e5\uff08\u30e1\u30e2\u5316\uff09\u3057\u3066\u3001\u305d\u308c\u4ee5\u5f8c\u306f\u30ad\u30e3\u30c3\u30b7\u30e5\u3057\u305fView\u3092\u8fd4\u3059\u3088\u3046\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u3002\n\n### Fragment\u306e\u30e9\u30a4\u30d5\u30b5\u30a4\u30af\u30eb\u3092\u601d\u3044\u51fa\u3057\u3066\u307f\u3088\u3046\n\nhttp://developer.android.com/intl/ja/guide/components/fragments.html#Creating\n\nFragment\u3067\u753b\u9762\u9077\u79fb\u3092\u3059\u308b\u5834\u5408\u3001\u9077\u79fb\u5148\u304b\u3089\u623b\u3063\u3066\u304f\u308b\u3068\u304d\uff08\u30d0\u30c3\u30af\u30b9\u30bf\u30c3\u30af\u304b\u3089\u623b\u3055\u308c\u308b\u3068\u304d\uff09\u3001onCreateView()\u304c\u547c\u3070\u308c\u307e\u3059\u3002\n\u901a\u5e38\u3001\u305d\u3053\u3067\u306f\u30ea\u30bd\u30fc\u30b9\u3067\u5b9a\u7fa9\u3057\u305f\u30ec\u30a4\u30a2\u30a6\u30c8\u3092inflate()\u3057\u3066\u8fd4\u3057\u307e\u3059\u3002\n\n### \u306a\u306b\u304c\u554f\u984c\uff1f\n\nKotterKnife\u304cfindViewById()\u3059\u308b\u306e\u306f\u3001\u6700\u521d\u306e\u4e00\u56de\u3060\u3051\u3067\u3059\u3002\nFragment\u3067\u306f\u3001View\u3092\u751f\u6210\u3059\u308b\u306e\u306f\u4e00\u56de\u3060\u3051\u3068\u306f\u9650\u308a\u307e\u305b\u3093\u3002\n\n\u3064\u307e\u308a\u3001Fragment\u304c\u62b1\u3048\u308bView\u3068Fragment\u5185\u3067\u5909\u6570\u306b\u30d0\u30a4\u30f3\u30c9\u3055\u308c\u305fView\u304c\u7570\u306a\u3063\u3066\u3057\u307e\u3046\u5834\u5408\u304c\u3042\u308b\u308f\u3051\u3067\u3059\u3002\u3068\u3044\u3046\u304b\u3001onCreateView()\u3067View\u3092\u4f5c\u308a\u76f4\u3057\u3066\u3044\u308b\u9650\u308a\u3001\u9077\u79fb\u5148\u304b\u3089\u623b\u3063\u3066\u304d\u305fFragment\u3067\u306f\u3001\u5fc5\u305a\u7570\u306a\u308b\u3082\u306e\u306b\u306a\u3063\u3066\u3057\u307e\u3044\u307e\u3059\u3002\n\n### \u7d50\u5c40\n\nKotterKnife\u3092\u4f7f\u3046\u306e\u306f\u3084\u3081\u307e\u3057\u305f\u3002\n\n\u30ad\u30e3\u30c3\u30b7\u30e5\u3092\u30af\u30ea\u30a2\u3067\u304d\u308bdelegate\u306a\u3089\u3044\u3051\u305d\u3046\u306a\u306e\u3067\u3001\n\n```ViewDelegate.kt\n\nclass ViewDelegate(var rootView: View? = null) {\n\n    private val delegates = ArrayList<Bind<*>>()\n\n    fun <V: View> bind(id: Int): Bind<V> {\n        val delegate = Bind<V>(id)\n        delegates.add(delegate)\n        return delegate\n    }\n\n    fun clearAll() {\n        delegates.forEach { it.clear() }\n    }\n\n    inner class Bind<V: View>(val id: Int) : ReadOnlyProperty<Any, V> {\n        var root: View? = null\n        var view: View? = null\n\n        @Suppress(\"UNCHECKED_CAST\")\n        override fun getValue(thisRef: Any, property: KProperty<*>): V {\n            if (view == null || root != rootView) {\n                root = rootView\n                if (root != null) {\n                    view = root!!.findViewById(id)\n                } else {\n                    throw IllegalStateException(\"root view is null.\")\n                }\n            }\n            if (view != null) {\n                return view!! as V\n            } else {\n                throw IllegalStateException(\"View ID $id for '${property.name}' not found.\")\n            }\n        }\n\n        fun clear() {\n            root = null\n            view = null\n        }\n    }\n}\n\n```\n\n\u3053\u3093\u306a\u30af\u30e9\u30b9\u3092\u4f5c\u3063\u3066\u3001\n\n```FooFragment.kt\n\nclass FooFragment : Fragment() {\n    val views = ViewDelegate()\n    val hogeButton: Button by views.bind(R.id.hoge_button)\n    val fugaText: TextView by views.bind(R.id.fuga_text)\n\n    override fun onCreateView(inflater: LayoutInflater, container: ViewGroup?, savedInstanceState: Bundle?): View? {\n        val view inflater.inflate(R.layout.fragment_foo, container, false)\n        views.rootView = view\n        return view\n    }\n\n    override fun onDestroyView() {\n        super.onDestroyView()\n        views.clearAll()\n    }\n    \n    ...\n}\n\n```\n\n\u3053\u3093\u306a\u98a8\u306b\u4f7f\u3046\u3088\u3046\u306b\u3057\u307e\u3057\u305f\u3002\n\nBind\u30af\u30e9\u30b9\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u304cView\u3092\u4fdd\u6301\u3059\u308b\u306e\u3067\u3001\u30e1\u30e2\u30ea\u30ea\u30fc\u30af\u3057\u306a\u3044\u3088\u3046\u306bonDestroyView()\u3067clearAll()\u3057\u3066\u307e\u3059\u304c\u3001\u5b9a\u578b\u51e6\u7406\u306a\u306e\u3067\u3061\u3087\u3063\u3068\u3044\u3084\u3093\u306a\u611f\u3058\u3067\u3059\u306d\u3002\nViewHolder\u30d1\u30bf\u30fc\u30f3\u3067\u3082\u4f7f\u3048\u308b\u3088\u3046\u306b\u3001rootView\u3092\u4fdd\u6301\u3057\u3066\u3044\u308b\u306e\u3067\u3059\u304c\u3001Fragment\u3092\u4fdd\u6301\u3059\u308b\u3088\u3046\u306b\u3059\u308c\u3070\u3001views.rootView = view\u3068\u3057\u3066\u3044\u308b\u3068\u3053\u308d\u3082\u7701\u3051\u305d\u3046\u3067\u3059\u3002\n\u8ab0\u304b\u3001\u3044\u3044\u611f\u3058\u306b\u307e\u3068\u3081\u3066\u304f\u308c\u308b\u4eba\u304c\u73fe\u308c\u308b\u3068\u3046\u308c\u3057\u3044\u3067\u3059\u306d\u3002\n\n### 2016.5.23 \u8ffd\u8a18\n\nDelegate\u306b\u3064\u3044\u3066\u3001\u3044\u308d\u3044\u308d\u7d06\u4f59\u66f2\u6298\u3042\u3063\u3066\u3001\u4eca\u3067\u306f\u3001\n\n```Views.kt\n@Suppress(\"UNCHECKED_CAST\")\nobject Views {\n\n    fun <V: View> bind(activity: Activity, id: Int): Lazy<V> = lazy { activity.findViewById(id) as V }\n    fun <V: View> bind(fragment: android.support.v4.app.Fragment, id: Int): Bind4<V> = Bind4(fragment, id)\n    fun <V: View> bind(fragment: android.app.Fragment, id: Int): Bind<V> = Bind(fragment, id)\n    fun <V: View> bind(view: View, id: Int): Lazy<V> = lazy { view.findViewById(id) as V }\n\n    class Bind<V: View>(val fragment: android.app.Fragment, val id: Int) : ReadOnlyProperty<Any, V> {\n\n        override fun getValue(thisRef: Any, property: KProperty<*>): V {\n            return fragment.view?.findViewById(id) as V\n        }\n    }\n\n    class Bind4<V: View>(val fragment: android.support.v4.app.Fragment, val id: Int) : ReadOnlyProperty<Any, V> {\n\n        override fun getValue(thisRef: Any, property: KProperty<*>): V {\n            return fragment.view?.findViewById(id) as V\n        }\n    }\n}\n```\n\n\u3053\u3093\u306aobject\u3092\u4f5c\u3063\u3066\u3001\n\n```FooFragment.kt\n\nclass FooFragment : Fragment() {\n    val hogeButton: Button by Views.bind(this, R.id.hoge_button)\n    val fugaText: TextView by Views.bind(this, R.id.fuga_text)\n\n    override fun onCreateView(inflater: LayoutInflater, container: ViewGroup?, savedInstanceState: Bundle?): View? {\n        return inflater.inflate(R.layout.fragment_foo, container, false)\n    }\n    \n    ...\n}\n\n```\n\n\u3053\u3093\u306a\u98a8\u306b\u4f7f\u3063\u3066\u3044\u307e\u3059\u3002\n\nFragment\u306e\u5834\u5408\u306b\u306f\u3001\u6bce\u56de\u3001findViewById()\u3057\u3066\u3044\u3066\u52b9\u7387\u306f\u60aa\u3044\u306e\u3067\u3059\u304c\u3001clearAll()\u3092\u5fd8\u308c\u305a\u306b\u8a18\u8ff0\u3059\u308b\u3068\u3044\u3046\u30d7\u30ec\u30c3\u30b7\u30e3\u30fc\u304c\u5fc3\u5730\u3088\u304f\u306a\u3044\u306e\u3067\u3001\u52b9\u7387\u306b\u3064\u3044\u3066\u306f\u307e\u3041\u3044\u3044\u3084\u3068\u601d\u3046\u3053\u3068\u306b\u3057\u3066\u3044\u307e\u3059\u3002\n", "tags": ["Kotlin", "Android", "Fragment", "KotterKnife"]}