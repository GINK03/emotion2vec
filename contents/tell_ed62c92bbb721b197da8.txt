{"tags": ["C++", "C++11", "tuple", "optional", "C++1y"], "context": "\u5fd8\u308c\u308b\u524d\u306b\u30e1\u30e2\uff0e\n\n\u8a2d\u5b9a\n\n\u95a2\u6570\u306e\u8fd4\u308a\u5024\u3068\u3057\u3066\u8907\u6570\u306e\u5024\u3092\u8fd4\u3057\u305f\u3044\uff0e\n\u4f8b\u3048\u3070\uff0c\u4f55\u304b\u306e\u51e6\u7406\u3092\u884c\u3044\uff0c\u3053\u308c\u306b\u6210\u529f\u3057\u305f\u3089\u8fd4\u3063\u3066\u6765\u305f\u5024\u3092\u4f7f\u7528\u3057\u3066\u51e6\u7406\uff0c\u5931\u6557\u3057\u305f\u3089\u4f55\u3082\u3057\u306a\u3044\uff0c\u3068\u3044\u3046\u3053\u3068\u304c\u3067\u304d\u308b\u3088\u3046\u306a\u7c21\u5358\u306a\u30b3\u30fc\u30c9\u3092\u66f8\u304d\u305f\u3044\uff0e\n\u8fd4\u308a\u5024\u3092\u53d7\u3051\u308b\u4ee3\u308f\u308a\u306b\u30dd\u30a4\u30f3\u30bf\u3092\u6e21\u3059\u306e\u306f\u95a2\u6570\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30fc\u30b9\u306e\u898b\u6804\u3048\u304c\u3088\u308d\u3057\u304f\u306a\u3044\uff0e\n\u9069\u5f53\u306b\u30a8\u30f3\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0\u3092\u8003\u3048\u3066\uff0c\u4e00\u3064\u306e\u8fd4\u308a\u5024\u306b\u8907\u6570\u306e\u5024\u306e\u610f\u5473\u3092\u57cb\u3081\u8fbc\u3093\u3067\u3057\u307e\u3046\u306e\u306f\uff0c\u3082\u3063\u3068\u3088\u308d\u3057\u304f\u306a\u3044\uff0e\n\u5024\u304c\u6709\u52b9\u304b\uff0c\u7121\u52b9\u304b\u3092\u793a\u3059\u3060\u3051\u306a\u3089Boost.Optional\u304c\u3042\u308b\u3051\u3069\uff0c\u6a19\u6e96\u30e9\u30a4\u30d6\u30e9\u30ea\u3060\u3051\u3067\u3069\u3046\u306b\u304b\u3057\u305f\u3044\uff0e\nstd::optional\u304c\u6a19\u6e96\u306b\u5165\u308b\u306e\u306f\u307e\u3060\u5148\u306e\u3088\u3046\u3060\u2026\nC++11\u306e\u7bc4\u56f2\u3060\u3051\u3067\u3069\u3046\u306b\u304b\u3059\u308b\uff0e\n\n\n\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\n\u3068\u308a\u3042\u3048\u305a\uff0c\u30b5\u30f3\u30d7\u30eb\u3092\u66f8\u304d\u307e\u3057\u305f\u304c\uff0c\u3053\u306e\u4f8b\u3060\u3068\u30a4\u30c6\u30ec\u30fc\u30bf\u4f7f\u3048\uff0c\u3068\u8a00\u308f\u308c\u305d\u3046\u3067\u3059\u306d\uff0e\u3068\u308a\u3042\u3048\u305a\u30d1\u3063\u3068\u601d\u3044\u4ed8\u3044\u305f\u3082\u306e\u304c\u3053\u308c\u306a\u306e\u3067\uff0c\u3082\u3063\u3068\u826f\u3044\u30b5\u30f3\u30d7\u30eb\u304c\u3042\u308c\u3070\u305d\u308c\u306b\u66f8\u304d\u76f4\u3057\u307e\u3059\uff0e\n\u8fd4\u308a\u5024\u3092std::tuple\u306b\u3059\u308b\u5834\u5408\u306e\u30dd\u30a4\u30f3\u30c8\u3068\u3057\u3066\uff0cstd::tie\u3067\u8fd4\u308a\u5024\u3092\u53d7\u3051\u308b\u5909\u6570\u3092\u6307\u5b9a\u3059\u308b\u5834\u5408\u306fconst\u5ba3\u8a00\u3067\u304d\u306a\u3044\uff0e\nconst\u306a\u5909\u6570\u306b\u8fd4\u308a\u5024\u3092\u4ee3\u5165\u3057\u305f\u3044\u5834\u5408\u306f\uff0c\u666e\u901a\u306bconst std::tuple<...>\u578b\u306e\u5909\u6570\u3067\u53d7\u3051\u3066\uff0cstd::get\u3067\u5024\u3092\u53c2\u7167\u3059\u308b\u3053\u3068\u306b\u306a\u308b\uff0e\u3061\u3087\u3063\u3068\u6253\u3064\u306e\u304c\u9762\u5012\u304b\u3082\uff0e\n\u6709\u52b9\u304b\u7121\u52b9\u304b\u3092\u8868\u308f\u3057\u305f\u3044\u5834\u5408\uff0cstd::optional\u304c\u4f7f\u3048\u308b\u3088\u3046\u306b\u306a\u3063\u305f\u3089\uff0c\u305d\u308c\u3092\u4f7f\u3063\u305f\u65b9\u304c\u826f\u3055\u305d\u3046\uff0e\u3042\u308b\u3044\u306f\u304a\u3068\u306a\u3057\u304fBoost.Optional\u3092\u4f7f\u3046\uff0e\n#include <tuple>\n\n#include <iostream>\n#include <vector>\n\nnamespace before {\n\nlong find(const std::vector<int>& vec, const int a)\n{\n    for(size_t i = 0; i < vec.size(); i++) {\n        if (vec[i] == a) {\n            return i;\n        }\n    }\n    return -1;\n}\n\nvoid demo()\n{\n    const std::vector<int> vec = {0, -1, 1, 2, -2, 3};\n\n    const int a = 2;\n    const long b = find(vec, a);\n    if (b < 0) {\n        std::cout << a << \" is not contained in vec.\" << std::endl;\n    } else {\n        std::cout << a << \" is contained at \" << b << \" in vec.\" << std::endl;\n    }\n\n    const int c = -5;\n    const long d = find(vec, c);\n    if (d < 0) {\n        std::cout << c << \" is not contained in vec.\" << std::endl;\n    } else {\n        std::cout << c << \" is contained at \" << d << \" in vec.\" << std::endl;\n    }\n}\n\n}\n\nnamespace after {\n\nstd::tuple<size_t, bool> find(const std::vector<int>& vec, const int a)\n{\n    for(size_t i = 0; i < vec.size(); i++) {\n        if (vec[i] == a) {\n            return std::forward_as_tuple(i, true);\n        }\n    }\n    return std::forward_as_tuple(0, false);\n}\n\nvoid demo()\n{\n    const std::vector<int> vec = {0, -1, 1, 2, -2, 3};\n\n    const int a = 2;\n    size_t b;\n    bool c;\n    std::tie(b, c) = find(vec, a);\n    if (c) {\n        std::cout << a << \" is contained at \" << b << \" in vec.\" << std::endl;\n    } else {\n        std::cout << a << \" is not contained in vec.\" << std::endl;\n    }\n\n    const int d = -5;\n    size_t e;\n    bool f;\n    std::tie(e, f) = find(vec, d);\n    if (f) {\n        std::cout << d << \" is contained at \" << e << \" in vec.\" << std::endl;\n    } else {\n        std::cout << d << \" is not contained in vec.\" << std::endl;\n    }\n}\n\ntemplate<class T, class V, class Option>\nvoid puts_result(const T& value, const std::tuple<V, Option>& result) {\n    if (std::get<1>(result)) {\n        std::cout << value << \" is contained at \" << std::get<0>(result) << \".\" << std::endl;\n    } else {\n        std::cout << value << \" is not contained.\" << std::endl;\n    }\n}\n\nvoid demo2()\n{\n    const std::vector<int> vec = {0, -1, 1, 2, -2, 3};\n\n    const int a = 2;\n    const std::tuple<size_t, bool> b = find(vec, a);\n    puts_result(a, b);\n\n    const int c = -5;\n    const std::tuple<size_t, bool> d = find(vec, c);\n    puts_result(c, d);\n}\n\n}\n\nint main()\n{\n    before::demo();\n    after::demo();\n    after::demo2();\n}\n\n\n[Wandbox]\u4e09\u3078( \u3078\u055e\u0a0a \u055e)\u3078 \uff8a\uff6f\uff8a\uff6f\n\n\n\u53c2\u8003\u6587\u732e\n\n\nA proposal to add a utility class to represent optional objects (Revision 2)\n\n\u30ea\u30d5\u30a1\u30ec\u30f3\u30b9\u5b9f\u88c5\u6709\u308a\u2192akrzemi1/Optional (\u554f\u984c\u7121\u304f\u52d5\u304f\u304b\u3069\u3046\u304b\u306f\u672a\u691c\u8a3c\u3067\u3059)\n\n\nTwitter / Flast_RO: @t_teruya std::tupe\u306b\u5bfe\u3057\u3066std::fo ...\nTwitter / Flast_RO: @t_teruya std::tie\u306f\u5927\u4f53\u305d\u3093\u306a\u611f\u3058\u306e\u76ee\u7684\u3067 ...\n\n\u5fd8\u308c\u308b\u524d\u306b\u30e1\u30e2\uff0e\n\n## \u8a2d\u5b9a\n\n- \u95a2\u6570\u306e\u8fd4\u308a\u5024\u3068\u3057\u3066\u8907\u6570\u306e\u5024\u3092\u8fd4\u3057\u305f\u3044\uff0e\n- \u4f8b\u3048\u3070\uff0c\u4f55\u304b\u306e\u51e6\u7406\u3092\u884c\u3044\uff0c\u3053\u308c\u306b\u6210\u529f\u3057\u305f\u3089\u8fd4\u3063\u3066\u6765\u305f\u5024\u3092\u4f7f\u7528\u3057\u3066\u51e6\u7406\uff0c\u5931\u6557\u3057\u305f\u3089\u4f55\u3082\u3057\u306a\u3044\uff0c\u3068\u3044\u3046\u3053\u3068\u304c\u3067\u304d\u308b\u3088\u3046\u306a\u7c21\u5358\u306a\u30b3\u30fc\u30c9\u3092\u66f8\u304d\u305f\u3044\uff0e\n- \u8fd4\u308a\u5024\u3092\u53d7\u3051\u308b\u4ee3\u308f\u308a\u306b\u30dd\u30a4\u30f3\u30bf\u3092\u6e21\u3059\u306e\u306f\u95a2\u6570\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30fc\u30b9\u306e\u898b\u6804\u3048\u304c\u3088\u308d\u3057\u304f\u306a\u3044\uff0e\n- \u9069\u5f53\u306b\u30a8\u30f3\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0\u3092\u8003\u3048\u3066\uff0c\u4e00\u3064\u306e\u8fd4\u308a\u5024\u306b\u8907\u6570\u306e\u5024\u306e\u610f\u5473\u3092\u57cb\u3081\u8fbc\u3093\u3067\u3057\u307e\u3046\u306e\u306f\uff0c\u3082\u3063\u3068\u3088\u308d\u3057\u304f\u306a\u3044\uff0e\n- \u5024\u304c\u6709\u52b9\u304b\uff0c\u7121\u52b9\u304b\u3092\u793a\u3059\u3060\u3051\u306a\u3089Boost.Optional\u304c\u3042\u308b\u3051\u3069\uff0c\u6a19\u6e96\u30e9\u30a4\u30d6\u30e9\u30ea\u3060\u3051\u3067\u3069\u3046\u306b\u304b\u3057\u305f\u3044\uff0e\n- std::optional\u304c\u6a19\u6e96\u306b\u5165\u308b\u306e\u306f\u307e\u3060\u5148\u306e\u3088\u3046\u3060\u2026\n- C++11\u306e\u7bc4\u56f2\u3060\u3051\u3067\u3069\u3046\u306b\u304b\u3059\u308b\uff0e\n\n## \u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\n\n\u3068\u308a\u3042\u3048\u305a\uff0c\u30b5\u30f3\u30d7\u30eb\u3092\u66f8\u304d\u307e\u3057\u305f\u304c\uff0c\u3053\u306e\u4f8b\u3060\u3068\u30a4\u30c6\u30ec\u30fc\u30bf\u4f7f\u3048\uff0c\u3068\u8a00\u308f\u308c\u305d\u3046\u3067\u3059\u306d\uff0e\u3068\u308a\u3042\u3048\u305a\u30d1\u3063\u3068\u601d\u3044\u4ed8\u3044\u305f\u3082\u306e\u304c\u3053\u308c\u306a\u306e\u3067\uff0c\u3082\u3063\u3068\u826f\u3044\u30b5\u30f3\u30d7\u30eb\u304c\u3042\u308c\u3070\u305d\u308c\u306b\u66f8\u304d\u76f4\u3057\u307e\u3059\uff0e\n\n\u8fd4\u308a\u5024\u3092std::tuple\u306b\u3059\u308b\u5834\u5408\u306e\u30dd\u30a4\u30f3\u30c8\u3068\u3057\u3066\uff0cstd::tie\u3067\u8fd4\u308a\u5024\u3092\u53d7\u3051\u308b\u5909\u6570\u3092\u6307\u5b9a\u3059\u308b\u5834\u5408\u306fconst\u5ba3\u8a00\u3067\u304d\u306a\u3044\uff0e\nconst\u306a\u5909\u6570\u306b\u8fd4\u308a\u5024\u3092\u4ee3\u5165\u3057\u305f\u3044\u5834\u5408\u306f\uff0c\u666e\u901a\u306bconst std::tuple<...>\u578b\u306e\u5909\u6570\u3067\u53d7\u3051\u3066\uff0cstd::get<n>\u3067\u5024\u3092\u53c2\u7167\u3059\u308b\u3053\u3068\u306b\u306a\u308b\uff0e\u3061\u3087\u3063\u3068\u6253\u3064\u306e\u304c\u9762\u5012\u304b\u3082\uff0e\n\n\u6709\u52b9\u304b\u7121\u52b9\u304b\u3092\u8868\u308f\u3057\u305f\u3044\u5834\u5408\uff0cstd::optional\u304c\u4f7f\u3048\u308b\u3088\u3046\u306b\u306a\u3063\u305f\u3089\uff0c\u305d\u308c\u3092\u4f7f\u3063\u305f\u65b9\u304c\u826f\u3055\u305d\u3046\uff0e\u3042\u308b\u3044\u306f\u304a\u3068\u306a\u3057\u304fBoost.Optional\u3092\u4f7f\u3046\uff0e\n\n```cpp\n#include <tuple>\n\n#include <iostream>\n#include <vector>\n\nnamespace before {\n\nlong find(const std::vector<int>& vec, const int a)\n{\n\tfor(size_t i = 0; i < vec.size(); i++) {\n\t\tif (vec[i] == a) {\n\t\t\treturn i;\n\t\t}\n\t}\n\treturn -1;\n}\n\nvoid demo()\n{\n\tconst std::vector<int> vec = {0, -1, 1, 2, -2, 3};\n\n\tconst int a = 2;\n\tconst long b = find(vec, a);\n\tif (b < 0) {\n\t\tstd::cout << a << \" is not contained in vec.\" << std::endl;\n\t} else {\n\t\tstd::cout << a << \" is contained at \" << b << \" in vec.\" << std::endl;\n\t}\n\n\tconst int c = -5;\n\tconst long d = find(vec, c);\n\tif (d < 0) {\n\t\tstd::cout << c << \" is not contained in vec.\" << std::endl;\n\t} else {\n\t\tstd::cout << c << \" is contained at \" << d << \" in vec.\" << std::endl;\n\t}\n}\n\n}\n\nnamespace after {\n\nstd::tuple<size_t, bool> find(const std::vector<int>& vec, const int a)\n{\n\tfor(size_t i = 0; i < vec.size(); i++) {\n\t\tif (vec[i] == a) {\n\t\t\treturn std::forward_as_tuple(i, true);\n\t\t}\n\t}\n\treturn std::forward_as_tuple(0, false);\n}\n\nvoid demo()\n{\n\tconst std::vector<int> vec = {0, -1, 1, 2, -2, 3};\n\n\tconst int a = 2;\n\tsize_t b;\n\tbool c;\n\tstd::tie(b, c) = find(vec, a);\n\tif (c) {\n\t\tstd::cout << a << \" is contained at \" << b << \" in vec.\" << std::endl;\n\t} else {\n\t\tstd::cout << a << \" is not contained in vec.\" << std::endl;\n\t}\n\n\tconst int d = -5;\n\tsize_t e;\n\tbool f;\n\tstd::tie(e, f) = find(vec, d);\n\tif (f) {\n\t\tstd::cout << d << \" is contained at \" << e << \" in vec.\" << std::endl;\n\t} else {\n\t\tstd::cout << d << \" is not contained in vec.\" << std::endl;\n\t}\n}\n\ntemplate<class T, class V, class Option>\nvoid puts_result(const T& value, const std::tuple<V, Option>& result) {\n\tif (std::get<1>(result)) {\n\t\tstd::cout << value << \" is contained at \" << std::get<0>(result) << \".\" << std::endl;\n\t} else {\n\t\tstd::cout << value << \" is not contained.\" << std::endl;\n\t}\n}\n\nvoid demo2()\n{\n\tconst std::vector<int> vec = {0, -1, 1, 2, -2, 3};\n\n\tconst int a = 2;\n\tconst std::tuple<size_t, bool> b = find(vec, a);\n\tputs_result(a, b);\n\n\tconst int c = -5;\n\tconst std::tuple<size_t, bool> d = find(vec, c);\n\tputs_result(c, d);\n}\n\n}\n\nint main()\n{\n\tbefore::demo();\n\tafter::demo();\n\tafter::demo2();\n}\n```\n- [[Wandbox]\u4e09\u3078( \u3078\u055e\u0a0a \u055e)\u3078 \uff8a\uff6f\uff8a\uff6f](http://melpon.org/wandbox/permlink/7C5PLLYdv6yE46L7 \"[Wandbox]\u4e09\u3078( \u3078\u055e\u0a0a \u055e)\u3078 \uff8a\uff6f\uff8a\uff6f\")\n\n## \u53c2\u8003\u6587\u732e\n\n- [A proposal to add a utility class to represent optional objects (Revision 2)](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2013/n3527.html \"A proposal to add a utility class to represent optional objects (Revision 2)\")\n    - \u30ea\u30d5\u30a1\u30ec\u30f3\u30b9\u5b9f\u88c5\u6709\u308a\u2192[akrzemi1/Optional](https://github.com/akrzemi1/Optional/ \"akrzemi1/Optional\") (\u554f\u984c\u7121\u304f\u52d5\u304f\u304b\u3069\u3046\u304b\u306f\u672a\u691c\u8a3c\u3067\u3059)\n- [Twitter / Flast_RO: @t_teruya std::tupe\u306b\u5bfe\u3057\u3066std::fo ...](https://twitter.com/Flast_RO/status/417379848017825794 \"Twitter / Flast_RO: @t_teruya std::tupe\u306b\u5bfe\u3057\u3066std::fo ...\")\n- [Twitter / Flast_RO: @t_teruya std::tie\u306f\u5927\u4f53\u305d\u3093\u306a\u611f\u3058\u306e\u76ee\u7684\u3067 ...](https://twitter.com/Flast_RO/status/417384572251148288 \"Twitter / Flast_RO: @t_teruya std::tie\u306f\u5927\u4f53\u305d\u3093\u306a\u611f\u3058\u306e\u76ee\u7684\u3067 ...\")\n"}