{"context": " More than 1 year has passed since last update.RxCpp\u3092\u4f7f\u3046\u306b\u3042\u305f\u3063\u3066\u306e\u81ea\u5206\u5411\u3051\u306e\u30e1\u30e2\n\nobservable::create.filter.map.subscribe\n#include \"rxcpp/rx.hpp\"\n\nnamespace rx=rxcpp;\nnamespace rxsub=rxcpp::subjects;\nnamespace rxu=rxcpp::util;\nnamespace rxs=rxcpp::sources;\n\nint main()\n{\n    std::cout << \"start\" << std::endl;\n\n    rx::observable<>::create<int>([](rx::subscriber<int> dest) {\n        dest.on_next(1);\n        dest.on_next(10);\n        dest.on_next(100);\n    }).filter([](int i) {\n        return i != 10;\n    }).map(/* Selector s */[](int i) {\n        std::cout << i << std::endl;\n        return i * 2;\n    }).subscribe([](int i) {\n        std::cout << i << std::endl;\n    });\n\n    std::cout << \"end\" << std::endl;\n\n    return 0;\n}\n\n\nstdout\nstart\n1\n2\n100\n200\nend\n\n\n\nobservable::create.subscribe(on{next, error, complete})\n    rx::observable<>::create<int>([](rx::subscriber<int> dest) {\n        try {\n            dest.on_next(1);\n            dest.on_next(2);\n            throw std::make_exception_ptr(std::runtime_error(\"error\"));\n            dest.on_next(3);\n            dest.on_completed();\n        } catch(std::exception_ptr e) {\n            dest.on_error(e);\n        }\n    }).subscribe(\n        // on next\n        [](const int v){ std::cout << v << std::endl; },\n        // on error\n        [](const std::exception_ptr& e){ std::cout << \"error.\" << std::endl; },\n        // on completed\n        [](){ std::cout << \" done.\" << std::endl; }\n    );\n\n\nstdout\n1\n2\nerror.\n\n\n\nreturn observable\n\nrxcpp::observable<int> a() {\n    return rx::observable<>::from<int>(1, 2, 3);\n}\n\nint main()\n{\n    a().subscribe([](int i) {\n        std::cout << i << std::endl;\n    });\n    return 1;\n}\n\n\nstdout\n1\n2\n3\n\n\n\nrange.flat_map\n    rxs::range(1, 3)\n    .flat_map(\n              [](int i) {\n                  return rxs::range(1, i)\n                  .as_dynamic();\n              },\n              [](int i, int j) {\n                  std::cout << \"# \" << i << \", \" << j << std::endl;\n                  return i;\n              }\n    )\n    .subscribe(\n               [](int i) {\n                   std::cout << \"subscribe: \" << i << std::endl;\n               }\n    );\n\n\nstdout\n# 1, 1\nsubscribe: 1\n# 2, 1\nsubscribe: 2\n# 2, 2\nsubscribe: 2\n# 3, 1\nsubscribe: 3\n# 3, 2\nsubscribe: 3\n# 3, 3\nsubscribe: 3\n\n\n\nstream\u306e\u4e2d\u3067stream\u306b\u3064\u306a\u3052\u308b\n    rxs::range(1, 3)\n    .flat_map(\n        /* CollectionSelector &&s */\n        [](int i) {\n            return rx::observable<>::create<int>([=](rx::subscriber<int> dest) {\n                dest.on_error(std::make_exception_ptr(std::runtime_error(\"error\")));\n            });\n        },\n        /* ResultSelector &&rs */\n        [](int i, int j) {\n            std::cout << \"# \" << i << \", \" << j << std::endl;\n            return i;\n        })\n    .subscribe(\n        [](int i) {\n            std::cout << i << std::endl;\n        },\n        [](const std::exception_ptr& e) {\n            std::cout << \"error.\" << std::endl;\n        });\n\n\nstdout\nerror.\n\n\n\n\u5b9f\u7528\u4f8b\u3063\u307d\u3044observable\u306e\u9023\u7d50\n\nApiClient::getApiResponseA(int)\n\nApiClient::getApiResponseB(int)\n\u304c\u3042\u308a\u3001A \u306e\u7d50\u679c\u3092\u4f7f\u3044 B \u3092\u53e9\u304f\u4f8b\n\nclass ApiClient\n{\npublic:\n    static rxcpp::observable<int> getApiResponseA(const int i) {\n        return rx::observable<>::create<int>([=](rx::subscriber<int> dest) {\n            try {\n                // \u306a\u3093\u3089\u304b\u306eAPI\u51e6\u7406\n                dest.on_next(i);\n            } catch (std::exception_ptr e) {\n                dest.on_error(e);\n            }\n            dest.on_completed();\n        });\n    }\n\n    static rxcpp::observable<std::string> getApiResponseB(const int i) {\n        //throw std::make_exception_ptr(std::runtime_error(\"error\"));\n        return rx::observable<>::create<std::string>([=](rx::subscriber<std::string> dest) {\n            try {\n                // \u306a\u3093\u3089\u304b\u306eAPI\u51e6\u7406\n                // throw std::make_exception_ptr(std::runtime_error(\"error\"));\n                auto str = std::string(\"result:\") + std::to_string(i);\n                dest.on_next(str);\n            } catch (std::exception_ptr e) {\n                dest.on_error(e);\n            }\n            dest.on_completed();\n        });\n    }\n};\n\nint main()\n{\n    ApiClient::getApiResponseA(1)\n    .flat_map([](int i) {\n            return ApiClient::getApiResponseB(i);\n        }, [](int i, std::string str) {\n            return \"#\" + str;\n        })\n    .subscribe([](std::string s) {\n            std::cout << s << std::endl;\n        },[](const std::exception_ptr& e) {\n            std::cout << \"error.\" << std::endl;\n        });\n\n    return 0;\n}\n\n\nstdout\n#result:1\n\n\n\nfinally\nrx::observable<>::create<int>([](rx::subscriber<int> dest) {\n    dest.on_next(1);\n    // finally\u3092\u52d5\u304b\u3059\u306b\u306f on_error \u304b on_complete \u304c\u5b9f\u884c\u3055\u308c\u308b\u5fc5\u8981\u304c\u3042\u308b\n    dest.on_error(std::make_exception_ptr(std::runtime_error(\"a\")));\n    dest.on_completed();\n}).finally([]() {\n    std::cout << \"finally\" << std::endl;\n}).subscribe(\n    [](int i) {std::cout << i << std::endl;},\n    [](const std::exception_ptr& e){ std::cout << \"error.\" << std::endl; }\n);\n\n\nstdout\n1\nerror.\nfinally\n\n\n\nsubject\n#include \"rxcpp/rx.hpp\"\n#include <iostream>\n\nnamespace rx = rxcpp;\nnamespace rxsub = rxcpp::subjects;\nnamespace rxu = rxcpp::util;\nnamespace rxs = rxcpp::sources;\n\nint main()\n{\n    std::cout << \"start\" << std::endl;\n\n    rxsub::subject<int> subject;\n\n    auto subscriber = subject.get_subscriber();\n    auto subscriber2 = subject.get_subscriber();\n    auto observable = subject.get_observable();\n    auto observable2 = subject.get_observable();\n    observable.subscribe(\n        [](const int v){ std::cout << \"observable :\" << v << std::endl; },// next\n        [](const std::exception_ptr& e){ std::cout << \"error.\" << std::endl; }, // error\n        [](){ std::cout << \"observable  completed.\" << std::endl; });// complete\n    observable2.subscribe(\n        [](const int v){ std::cout << \"observable2:\" << v << std::endl; },\n        [](const std::exception_ptr& e){ std::cout << \"error.\" << std::endl; },\n        [](){ std::cout << \"observable2 completed.\" << std::endl; });\n    subscriber.on_next(1);\n    subscriber.on_next(2);\n    subscriber2.on_next(3);\n    subscriber.on_completed();\n    subscriber2.on_next(4);\n\n    std::cout << \"end\" << std::endl;\n\n    getchar();\n\n    return 0;\n}\n\n\nstdout\nstart\nobservable :1\nobservable2:1\nobservable :2\nobservable2:2\nobservable :3\nobservable2:3\nobservable  completed.\nobservable2 completed.\nend\n\n\nRxCpp\u3092\u4f7f\u3046\u306b\u3042\u305f\u3063\u3066\u306e\u81ea\u5206\u5411\u3051\u306e\u30e1\u30e2\n\n## observable::create.filter.map.subscribe\n\n```cpp\n#include \"rxcpp/rx.hpp\"\n\nnamespace rx=rxcpp;\nnamespace rxsub=rxcpp::subjects;\nnamespace rxu=rxcpp::util;\nnamespace rxs=rxcpp::sources;\n\nint main()\n{\n    std::cout << \"start\" << std::endl;\n    \n    rx::observable<>::create<int>([](rx::subscriber<int> dest) {\n        dest.on_next(1);\n        dest.on_next(10);\n        dest.on_next(100);\n    }).filter([](int i) {\n        return i != 10;\n    }).map(/* Selector s */[](int i) {\n        std::cout << i << std::endl;\n        return i * 2;\n    }).subscribe([](int i) {\n        std::cout << i << std::endl;\n    });\n    \n    std::cout << \"end\" << std::endl;\n\n    return 0;\n}\n```\n\n```:stdout\nstart\n1\n2\n100\n200\nend\n```\n\n## observable::create.subscribe(on{next, error, complete})\n\n```cpp\n    rx::observable<>::create<int>([](rx::subscriber<int> dest) {\n        try {\n            dest.on_next(1);\n            dest.on_next(2);\n            throw std::make_exception_ptr(std::runtime_error(\"error\"));\n            dest.on_next(3);\n            dest.on_completed();\n        } catch(std::exception_ptr e) {\n            dest.on_error(e);\n        }\n    }).subscribe(\n        // on next\n        [](const int v){ std::cout << v << std::endl; },\n        // on error\n        [](const std::exception_ptr& e){ std::cout << \"error.\" << std::endl; },\n        // on completed\n        [](){ std::cout << \" done.\" << std::endl; }\n    );\n```\n\n```:stdout\n1\n2\nerror.\n```\n\n## return observable\n\n```cpp\n\nrxcpp::observable<int> a() {\n    return rx::observable<>::from<int>(1, 2, 3);\n}\n\nint main()\n{\n    a().subscribe([](int i) {\n        std::cout << i << std::endl;\n    });\n    return 1;\n}\n```\n\n```:stdout\n1\n2\n3\n```\n\n# range.flat_map\n\n```cpp\n    rxs::range(1, 3)\n    .flat_map(\n              [](int i) {\n                  return rxs::range(1, i)\n                  .as_dynamic();\n              },\n              [](int i, int j) {\n                  std::cout << \"# \" << i << \", \" << j << std::endl;\n                  return i;\n              }\n    )\n    .subscribe(\n               [](int i) {\n                   std::cout << \"subscribe: \" << i << std::endl;\n               }\n    );\n```\n\n```:stdout\n# 1, 1\nsubscribe: 1\n# 2, 1\nsubscribe: 2\n# 2, 2\nsubscribe: 2\n# 3, 1\nsubscribe: 3\n# 3, 2\nsubscribe: 3\n# 3, 3\nsubscribe: 3\n```\n\n# stream\u306e\u4e2d\u3067stream\u306b\u3064\u306a\u3052\u308b\n\n```cpp\n    rxs::range(1, 3)\n    .flat_map(\n        /* CollectionSelector &&s */\n        [](int i) {\n            return rx::observable<>::create<int>([=](rx::subscriber<int> dest) {\n                dest.on_error(std::make_exception_ptr(std::runtime_error(\"error\")));\n            });\n        },\n        /* ResultSelector &&rs */\n        [](int i, int j) {\n            std::cout << \"# \" << i << \", \" << j << std::endl;\n            return i;\n        })\n    .subscribe(\n        [](int i) {\n            std::cout << i << std::endl;\n        },\n        [](const std::exception_ptr& e) {\n            std::cout << \"error.\" << std::endl;\n        });\n```\n\n```:stdout\nerror.\n```\n\n# \u5b9f\u7528\u4f8b\u3063\u307d\u3044observable\u306e\u9023\u7d50\n\n- `ApiClient::getApiResponseA(int)`\n- `ApiClient::getApiResponseB(int)`  \n\u304c\u3042\u308a\u3001`A` \u306e\u7d50\u679c\u3092\u4f7f\u3044 `B` \u3092\u53e9\u304f\u4f8b\n\n```cpp\nclass ApiClient\n{\npublic:\n    static rxcpp::observable<int> getApiResponseA(const int i) {\n        return rx::observable<>::create<int>([=](rx::subscriber<int> dest) {\n            try {\n                // \u306a\u3093\u3089\u304b\u306eAPI\u51e6\u7406\n                dest.on_next(i);\n            } catch (std::exception_ptr e) {\n                dest.on_error(e);\n            }\n            dest.on_completed();\n        });\n    }\n    \n    static rxcpp::observable<std::string> getApiResponseB(const int i) {\n        //throw std::make_exception_ptr(std::runtime_error(\"error\"));\n        return rx::observable<>::create<std::string>([=](rx::subscriber<std::string> dest) {\n            try {\n                // \u306a\u3093\u3089\u304b\u306eAPI\u51e6\u7406\n                // throw std::make_exception_ptr(std::runtime_error(\"error\"));\n                auto str = std::string(\"result:\") + std::to_string(i);\n                dest.on_next(str);\n            } catch (std::exception_ptr e) {\n                dest.on_error(e);\n            }\n            dest.on_completed();\n        });\n    }\n};\n\nint main()\n{\n    ApiClient::getApiResponseA(1)\n    .flat_map([](int i) {\n            return ApiClient::getApiResponseB(i);\n        }, [](int i, std::string str) {\n            return \"#\" + str;\n        })\n    .subscribe([](std::string s) {\n            std::cout << s << std::endl;\n        },[](const std::exception_ptr& e) {\n            std::cout << \"error.\" << std::endl;\n        });\n    \n    return 0;\n}\n```\n\n```:stdout\n#result:1\n```\n\n# finally\n\n```cpp\nrx::observable<>::create<int>([](rx::subscriber<int> dest) {\n    dest.on_next(1);\n    // finally\u3092\u52d5\u304b\u3059\u306b\u306f on_error \u304b on_complete \u304c\u5b9f\u884c\u3055\u308c\u308b\u5fc5\u8981\u304c\u3042\u308b\n    dest.on_error(std::make_exception_ptr(std::runtime_error(\"a\")));\n    dest.on_completed();\n}).finally([]() {\n    std::cout << \"finally\" << std::endl;\n}).subscribe(\n    [](int i) {std::cout << i << std::endl;},\n    [](const std::exception_ptr& e){ std::cout << \"error.\" << std::endl; }\n);\n```\n\n```:stdout\n1\nerror.\nfinally\n```\n\n# subject\n\n```cpp\n#include \"rxcpp/rx.hpp\"\n#include <iostream>\n\nnamespace rx = rxcpp;\nnamespace rxsub = rxcpp::subjects;\nnamespace rxu = rxcpp::util;\nnamespace rxs = rxcpp::sources;\n\nint main()\n{\n\tstd::cout << \"start\" << std::endl;\n\n\trxsub::subject<int> subject;\n\n\tauto subscriber = subject.get_subscriber();\n\tauto subscriber2 = subject.get_subscriber();\n\tauto observable = subject.get_observable();\n\tauto observable2 = subject.get_observable();\n\tobservable.subscribe(\n\t\t[](const int v){ std::cout << \"observable :\" << v << std::endl; },// next\n\t\t[](const std::exception_ptr& e){ std::cout << \"error.\" << std::endl; }, // error\n\t\t[](){ std::cout << \"observable  completed.\" << std::endl; });// complete\n\tobservable2.subscribe(\n\t\t[](const int v){ std::cout << \"observable2:\" << v << std::endl; },\n\t\t[](const std::exception_ptr& e){ std::cout << \"error.\" << std::endl; },\n\t\t[](){ std::cout << \"observable2 completed.\" << std::endl; });\n\tsubscriber.on_next(1);\n\tsubscriber.on_next(2);\n\tsubscriber2.on_next(3);\n\tsubscriber.on_completed();\n\tsubscriber2.on_next(4);\n\n\tstd::cout << \"end\" << std::endl;\n\n\tgetchar();\n\n\treturn 0;\n}\n```\n\n```:stdout\nstart\nobservable :1\nobservable2:1\nobservable :2\nobservable2:2\nobservable :3\nobservable2:3\nobservable  completed.\nobservable2 completed.\nend\n```\n", "tags": ["RxCpp", "C++11", "FRP"]}