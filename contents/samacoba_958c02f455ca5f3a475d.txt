{"tags": ["DeepLearning", "Chainer", "Jupyter", "Bokeh", "Python"], "context": "\n\n\u306f\u3058\u3081\u306b\n\u30c7\u30a3\u30fc\u30d7\u30e9\u30fc\u30cb\u30f3\u30b0\u306e\u5b66\u7fd2\u7d4c\u904e\u306e\u753b\u50cf\u3092jupyter\u4e0a\u3067\u30ea\u30a2\u30eb\u30bf\u30a4\u30e0\u306b\u8868\u793a\u3067\u304d\u308b\u3082\u306e\u304c\u306a\u3044\u304b\u3068\u63a2\u3057\u3066\u3044\u305f\u3068\u3053\u308d\u3001Bokeh\u3068\u3044\u3046\u30e9\u30a4\u30d6\u30e9\u30ea\u304c\u3042\u3063\u305f\u306e\u3067\u8a66\u3057\u3066\u307f\u307e\u3057\u305f\u3002\n\n\u5b66\u7fd2\u5185\u5bb9\nChainer \u3092\u4f7f\u3063\u30661\u5c64\u306eDeconvolution 2D(\u7c21\u5358\u306a\u30d5\u30a3\u30eb\u30bf\u307f\u305f\u3044\u306a\u3082\u306e\uff09\u3092\u5b66\u7fd2\u3055\u305b\u3066\u307f\u307e\u3057\u305f\u3002Deconvolution\u306b\u3064\u3044\u3066\u306f\u4ee5\u524d\u306b\u3053\u3061\u3089\u3067\u7d39\u4ecb\u3057\u305f\u3053\u3068\u306a\u3069\u53c2\u8003\u306b\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n\u4e0b\u306egif\u3067\u306f\u70b9 \u21d2 \u7403\u72b6\u306e\u6a21\u69d8\u306b\u5909\u5316\u3055\u305b\u308b\u3088\u3046\u306b\u5b66\u7fd2\u3055\u305b\u3066\u3044\u307e\u3059\u3002\n\nBokeh\u3067\u306f\u753b\u50cf\u3092\u30de\u30a6\u30b9\u30db\u30a4\u30fc\u30eb\u3067\u62e1\u5927\u7e2e\u5c0f\u306a\u3069\u3067\u304d\u308b\u306e\u3067\u5b66\u7fd2\u306e\u78ba\u8a8d\u306b\u306f\u4fbf\u5229\u3067\u3059\u3002\n\n\u30bd\u30fc\u30b9\n\u4ee5\u524d\u306eChainer\u3067\u306fnumpy\u3092\u4e00\u5ea6Variable\u306b\u5909\u63db\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3057\u305f\u304c\u3001Ver 1.17\u306e\u73fe\u5728\u3067\u306f\u81ea\u52d5\u3067Variable\u306b\u5909\u63db\u3057\u3066\u304f\u308c\u308b\u3088\u3046\u3067\u3059\u3002\nBokeh\u306ejupyter\u4e0a\u3067\u306e\u8868\u793a\u306b\u3064\u3044\u3066\u306f\u3053\u3061\u3089\u306a\u3069\u53c2\u8003\u306b\u3057\u3066\u3044\u307e\u3059\u3002\nimport chainer.links as L\nimport chainer.functions as F\nfrom chainer import Variable, optimizers\nimport numpy as np\nimport math\n\n#\uff11\u3064\u306e\u7403\u72b6\u306e\u6a21\u69d8\u3092\u4f5c\u6210\uff08\u30ac\u30a6\u30b9\u3067\u3059\u304c\uff09\ndef make_one_core():            \n    max_xy=15    \n    sig=5.0\n    sig2=sig*sig\n    c_xy=7\n    core=np.zeros((max_xy, max_xy), dtype= np.float32)\n    for px in range(0, max_xy):\n        for py in range(0, max_xy):\n            r2=(px-c_xy)*(px-c_xy)+(py-c_xy)*(py-c_xy)\n            core[py][px]=math.exp(-r2/sig2)*1\n    return core.reshape((1, 1, core.shape[0], core.shape[1]))\n\n#\u70b9\u3068\u7403\u72b6\u306eimage\u3092\u4f5c\u6210\ndef get_image(N=1, img_w=128, img_h=128):\n\n    #\u30e9\u30f3\u30c0\u30e0\u306b0.1\uff05\u306e\u70b9\u3092\u4f5c\u308b\n    img_p = np.random.randint(0, 10000, size = N*img_w*img_h)\n    img_p[img_p < 9990]=0\n    img_p[img_p >= 9990]=255\n\n    img_p = img_p.reshape((N,1,img_h, img_w)).astype(np.float32)\n\n    decon_core = L.Deconvolution2D(1, 1, 15, stride=1, pad=7)\n    #W\u306b\u7403\u72b6\u306e\u6a21\u69d8\u3092\u3042\u3066\u308b\n    decon_core.W.data = make_one_core()\n\n    #\u70b9\u21d2\u7403\u306b\u5909\u63db\n    img_core = decon_core(img_p)#Variable\u306b\u5909\u63db\u306a\u3057\u3067\u3082OK\n\n    return img_p, img_core.data    \n\n\n#\u521d\u671f\u63cf\u753b\nfrom bokeh.plotting import figure\nfrom bokeh.io import gridplot, push_notebook, show, output_notebook\n\noutput_notebook()\n\npalette_256 = ['#%02x%02x%02x' %(i,i,i) for i in range(256)] #256\u6bb5\u968e\u3067\u767d\u9ed2\u8868\u793a\u7528\n\nimg_p, img_core = get_image()#\u70b9\u3068\u7403\u72b6\u306eimage\u3092\u53d6\u5f97\n\nimg_h = img_p.shape[2]\nimg_w = img_p.shape[3]\n\nplt1 = figure(title = 'epoch = --', x_range=[0, img_w], y_range=[0, img_h])\nrend1 = plt1.image(image=[img_p[0][0]],x=[0], y=[0], dw=[img_w], dh=[img_h], palette=palette_256)\n\nplt2 = figure(title = 'loss  = 0', x_range=plt1.x_range, y_range=plt1.y_range)\nrend2 = plt2.image(image=[img_core[0][0]],x=[0], y=[0], dw=[img_w], dh=[img_h], palette=palette_256)\n\nplts = gridplot([[plt1,plt2]], plot_width=300, plot_height=300)\nhandle = show(plts, notebook_handle=True)\n\n#\u30e2\u30c7\u30eb\u30fb\u30aa\u30d7\u30c6\u30a3\u30de\u30a4\u30b6\u8a2d\u5b9a\nmodel =  L.Deconvolution2D(1, 1, 15, stride=1, pad=7)#1\u5c64\u306eDeconvolution\noptimizer = optimizers.SGD(lr=0.001)#\u5927\u304d\u3044\u3068\u767a\u6563\u3059\u308b\noptimizer.setup(model)\n\n#\u8a08\u7b97\nfor epoch in range(0,31):    \n\n    #1\u5c64\u306eDeconvolution\u3092\u901a\u3057\u3066\u30ed\u30b9\u3092\u8a08\u7b97\u3057\u30a2\u30c3\u30d7\u30c7\u30fc\u30c8\n    optimizer.zero_grads()\n    img_y = model(img_p)\n    loss = F.mean_squared_error(img_y, img_core)\n    loss.backward()\n    optimizer.update()\n\n    #\u753b\u50cf\u30fb\u30ed\u30b9\u30c7\u30fc\u30bf\u3092\u30bb\u30c3\u30c8\n    rend1.data_source.data['image'] = [img_p[0][0]]\n    rend2.data_source.data['image'] = [img_y.data[0][0]]\n    plt1.title.text='epoch = '+str(epoch)\n    plt2.title.text='loss  = '+str(loss.data)\n    push_notebook(handle = handle)#\u8868\u793a\u3092\u30a2\u30c3\u30d7\u30c7\u30fc\u30c8\n\n\n#\u306f\u3058\u3081\u306b\n\u30c7\u30a3\u30fc\u30d7\u30e9\u30fc\u30cb\u30f3\u30b0\u306e\u5b66\u7fd2\u7d4c\u904e\u306e\u753b\u50cf\u3092jupyter\u4e0a\u3067\u30ea\u30a2\u30eb\u30bf\u30a4\u30e0\u306b\u8868\u793a\u3067\u304d\u308b\u3082\u306e\u304c\u306a\u3044\u304b\u3068\u63a2\u3057\u3066\u3044\u305f\u3068\u3053\u308d\u3001[Bokeh](http://bokeh.pydata.org/en/latest/)\u3068\u3044\u3046\u30e9\u30a4\u30d6\u30e9\u30ea\u304c\u3042\u3063\u305f\u306e\u3067\u8a66\u3057\u3066\u307f\u307e\u3057\u305f\u3002\n\n#\u5b66\u7fd2\u5185\u5bb9\nChainer \u3092\u4f7f\u3063\u30661\u5c64\u306eDeconvolution 2D(\u7c21\u5358\u306a\u30d5\u30a3\u30eb\u30bf\u307f\u305f\u3044\u306a\u3082\u306e\uff09\u3092\u5b66\u7fd2\u3055\u305b\u3066\u307f\u307e\u3057\u305f\u3002Deconvolution\u306b\u3064\u3044\u3066\u306f\u4ee5\u524d\u306b[\u3053\u3061\u3089\u3067\u7d39\u4ecb\u3057\u305f\u3053\u3068](http://www.slideshare.net/samacoba1983/chainer-63698486)\u306a\u3069\u53c2\u8003\u306b\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n\u4e0b\u306egif\u3067\u306f\u70b9 \u21d2 \u7403\u72b6\u306e\u6a21\u69d8\u306b\u5909\u5316\u3055\u305b\u308b\u3088\u3046\u306b\u5b66\u7fd2\u3055\u305b\u3066\u3044\u307e\u3059\u3002\n\n![test2.gif](https://qiita-image-store.s3.amazonaws.com/0/109458/9a7a4426-a9ed-0273-9edd-274482b80ccc.gif)\n\nBokeh\u3067\u306f\u753b\u50cf\u3092\u30de\u30a6\u30b9\u30db\u30a4\u30fc\u30eb\u3067\u62e1\u5927\u7e2e\u5c0f\u306a\u3069\u3067\u304d\u308b\u306e\u3067\u5b66\u7fd2\u306e\u78ba\u8a8d\u306b\u306f\u4fbf\u5229\u3067\u3059\u3002\n\n#\u30bd\u30fc\u30b9\n\u4ee5\u524d\u306eChainer\u3067\u306fnumpy\u3092\u4e00\u5ea6Variable\u306b\u5909\u63db\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3057\u305f\u304c\u3001Ver 1.17\u306e\u73fe\u5728\u3067\u306f\u81ea\u52d5\u3067Variable\u306b\u5909\u63db\u3057\u3066\u304f\u308c\u308b\u3088\u3046\u3067\u3059\u3002\nBokeh\u306ejupyter\u4e0a\u3067\u306e\u8868\u793a\u306b\u3064\u3044\u3066\u306f[\u3053\u3061\u3089](\nhttp://bokeh.pydata.org/en/latest/docs/user_guide/notebook.html)\u306a\u3069\u53c2\u8003\u306b\u3057\u3066\u3044\u307e\u3059\u3002\n\n```\nimport chainer.links as L\nimport chainer.functions as F\nfrom chainer import Variable, optimizers\nimport numpy as np\nimport math\n\n#\uff11\u3064\u306e\u7403\u72b6\u306e\u6a21\u69d8\u3092\u4f5c\u6210\uff08\u30ac\u30a6\u30b9\u3067\u3059\u304c\uff09\ndef make_one_core():            \n    max_xy=15    \n    sig=5.0\n    sig2=sig*sig\n    c_xy=7\n    core=np.zeros((max_xy, max_xy), dtype= np.float32)\n    for px in range(0, max_xy):\n        for py in range(0, max_xy):\n            r2=(px-c_xy)*(px-c_xy)+(py-c_xy)*(py-c_xy)\n            core[py][px]=math.exp(-r2/sig2)*1\n    return core.reshape((1, 1, core.shape[0], core.shape[1]))\n\n#\u70b9\u3068\u7403\u72b6\u306eimage\u3092\u4f5c\u6210\ndef get_image(N=1, img_w=128, img_h=128):\n    \n    #\u30e9\u30f3\u30c0\u30e0\u306b0.1\uff05\u306e\u70b9\u3092\u4f5c\u308b\n    img_p = np.random.randint(0, 10000, size = N*img_w*img_h)\n    img_p[img_p < 9990]=0\n    img_p[img_p >= 9990]=255\n\n    img_p = img_p.reshape((N,1,img_h, img_w)).astype(np.float32)\n    \n    decon_core = L.Deconvolution2D(1, 1, 15, stride=1, pad=7)\n    #W\u306b\u7403\u72b6\u306e\u6a21\u69d8\u3092\u3042\u3066\u308b\n    decon_core.W.data = make_one_core()\n    \n    #\u70b9\u21d2\u7403\u306b\u5909\u63db\n    img_core = decon_core(img_p)#Variable\u306b\u5909\u63db\u306a\u3057\u3067\u3082OK\n    \n    return img_p, img_core.data    \n\n\n#\u521d\u671f\u63cf\u753b\nfrom bokeh.plotting import figure\nfrom bokeh.io import gridplot, push_notebook, show, output_notebook\n\noutput_notebook()\n\npalette_256 = ['#%02x%02x%02x' %(i,i,i) for i in range(256)] #256\u6bb5\u968e\u3067\u767d\u9ed2\u8868\u793a\u7528\n\nimg_p, img_core = get_image()#\u70b9\u3068\u7403\u72b6\u306eimage\u3092\u53d6\u5f97\n\nimg_h = img_p.shape[2]\nimg_w = img_p.shape[3]\n\nplt1 = figure(title = 'epoch = --', x_range=[0, img_w], y_range=[0, img_h])\nrend1 = plt1.image(image=[img_p[0][0]],x=[0], y=[0], dw=[img_w], dh=[img_h], palette=palette_256)\n\nplt2 = figure(title = 'loss  = 0', x_range=plt1.x_range, y_range=plt1.y_range)\nrend2 = plt2.image(image=[img_core[0][0]],x=[0], y=[0], dw=[img_w], dh=[img_h], palette=palette_256)\n\nplts = gridplot([[plt1,plt2]], plot_width=300, plot_height=300)\nhandle = show(plts, notebook_handle=True)\n\n#\u30e2\u30c7\u30eb\u30fb\u30aa\u30d7\u30c6\u30a3\u30de\u30a4\u30b6\u8a2d\u5b9a\nmodel =  L.Deconvolution2D(1, 1, 15, stride=1, pad=7)#1\u5c64\u306eDeconvolution\noptimizer = optimizers.SGD(lr=0.001)#\u5927\u304d\u3044\u3068\u767a\u6563\u3059\u308b\noptimizer.setup(model)\n \n#\u8a08\u7b97\nfor epoch in range(0,31):    \n    \n    #1\u5c64\u306eDeconvolution\u3092\u901a\u3057\u3066\u30ed\u30b9\u3092\u8a08\u7b97\u3057\u30a2\u30c3\u30d7\u30c7\u30fc\u30c8\n    optimizer.zero_grads()\n    img_y = model(img_p)\n    loss = F.mean_squared_error(img_y, img_core)\n    loss.backward()\n    optimizer.update()\n    \n    #\u753b\u50cf\u30fb\u30ed\u30b9\u30c7\u30fc\u30bf\u3092\u30bb\u30c3\u30c8\n    rend1.data_source.data['image'] = [img_p[0][0]]\n    rend2.data_source.data['image'] = [img_y.data[0][0]]\n    plt1.title.text='epoch = '+str(epoch)\n    plt2.title.text='loss  = '+str(loss.data)\n    push_notebook(handle = handle)#\u8868\u793a\u3092\u30a2\u30c3\u30d7\u30c7\u30fc\u30c8\n\n```\n"}