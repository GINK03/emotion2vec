{"context": " More than 1 year has passed since last update.SMTP\u306f\u30d1\u30b9\u30ef\u30fc\u30c9\u8a8d\u8a3c\u304c\u30c7\u30d5\u30a9\u3089\u3057\u304f\uff0c\u30d1\u30b9\u30ef\u30fc\u30c9\u3092\u5229\u7528\u3059\u308b\u30b5\u30f3\u30d7\u30eb\u306f\u305f\u304f\u3055\u3093\u3042\u308b\u304c\uff0cGmail\u306fOAuth\u306e\u30c8\u30fc\u30af\u30f3\u306b\u3088\u308b\u8a8d\u8a3c\u3082\u51fa\u6765\u308b\u306e\u3067\uff0c\u5b9f\u969b\u306b\u3084\u3063\u3066\u307f\u305f\u30b5\u30f3\u30d7\u30eb\uff0eStackOverflow\u3092\u53c2\u8003\u306b\u5b9f\u88c5\u3057\u305f\u304c\u5143\u30b9\u30ec\u898b\u3064\u3051\u3089\u308c\u306a\u304f\u306a\u3063\u3066\u3057\u307e\u3063\u305f\u306e\u3067\uff0c\u624b\u5143\u3067\u52d5\u3044\u305f\u30b3\u30fc\u30c9\u3092\u4e0b\u306b\u30e1\u30e2\u3057\u3066\u304a\u304f\uff0ejavamail-android\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u5229\u7528\u3057\u3066\u3044\u308b\uff0e\n\u524d\u63d0\u3068\u3057\u3066\uff0c https://mail.google.com\u306b\u5bfe\u3059\u308b\u30c8\u30fc\u30af\u30f3\u306f\u3059\u3067\u306b\u53d6\u5f97\u3067\u304d\u3066\u3044\u308b\u3082\u306e\u3068\u3059\u308b\uff0e\nimport android.os.AsyncTask;\nimport com.sun.mail.smtp.SMTPTransport;\nimport com.sun.mail.util.BASE64EncoderStream;\n\nimport javax.activation.DataHandler;\nimport javax.mail.Message;\nimport javax.mail.MessagingException;\nimport javax.mail.Session;\nimport javax.mail.internet.InternetAddress;\nimport javax.mail.internet.MimeMessage;\nimport javax.mail.util.ByteArrayDataSource;\nimport java.util.Properties;\n\npublic class GmailSendHelper {\n    private static final int RESPONSE_CODE_AUTH_SUCCESS = 235;\n    private static final int SUBMISSION_PORT = 587;\n    private static final String GMAIL_SMTP_SERVER = \"smtp.gmail.com\";\n    private final String userEmail;\n    private final String authToken;\n    private Session session;\n\n    public GmailSendHelper(String userEmail, String authToken) {\n        this.userEmail = userEmail;\n        this.authToken = authToken;\n    }\n\n    private SMTPTransport connectToSmtp(String host, int port) \n            throws MessagingException {\n        Properties props = new Properties();\n        props.put(\"mail.smtp.starttls.enable\", \"true\");\n        props.put(\"mail.smtp.starttls.required\", \"true\");\n        props.put(\"mail.smtp.sasl.enable\", \"false\");\n        session = Session.getInstance(props);\n\n        SMTPTransport transport \n                = new SMTPTransport(session, /* URL Name */ null);\n        transport.connect(\n                host, port, userEmail, /* Password, OAuth\u8a8d\u8a3c\u306a\u306e\u3067Null */ null);\n\n        byte[] response = BASE64EncoderStream.encode(\n                String.format(\"user=%s\\1auth=Bearer %s\\1\\1\", \n                        userEmail, authToken).getBytes()\n        );\n\n        transport.issueCommand(\n                \"AUTH XOAUTH2 \" + new String(response), RESPONSE_CODE_AUTH_SUCCESS);\n        return transport;\n    }\n\n    public synchronized void sendHtmlMail(\n            String subject, String body, String recipients) \n            throws MessagingException {\n        SMTPTransport smtpTransport \n                = connectToSmtp(GMAIL_SMTP_SERVER, SUBMISSION_PORT);\n\n        MimeMessage message = new MimeMessage(session);\n        DataHandler handler = new DataHandler(\n                new ByteArrayDataSource(body.getBytes(), \"text/html\"));\n        message.setSender(new InternetAddress(userEmail));\n        message.setSubject(subject);\n        message.setDataHandler(handler);\n        if (recipients.indexOf(',') > 0) {\n            message.setRecipients(\n                    Message.RecipientType.TO, InternetAddress.parse(recipients));\n        } else {\n            message.setRecipient(\n                    Message.RecipientType.TO, new InternetAddress(recipients));\n        }\n        smtpTransport.sendMessage(message, message.getAllRecipients());\n    }\n\n    public synchronized void sendHtmlMailAsync(\n            final String subject, final String body, final String recipients) {\n        AsyncTask<Void, Void, String> task = new AsyncTask<Void, Void, String>() {\n            @Override\n            protected String doInBackground(Void... params) {\n                try {\n                    sendHtmlMail(subject, body, recipients);\n                    return \"\";\n                } catch (MessagingException e) {\n                    // TODO: handle error\n                    return e.getMessage();\n                }\n            }\n        };\n        task.execute();\n    }\n}\n\nSMTP\u306f\u30d1\u30b9\u30ef\u30fc\u30c9\u8a8d\u8a3c\u304c\u30c7\u30d5\u30a9\u3089\u3057\u304f\uff0c\u30d1\u30b9\u30ef\u30fc\u30c9\u3092\u5229\u7528\u3059\u308b\u30b5\u30f3\u30d7\u30eb\u306f\u305f\u304f\u3055\u3093\u3042\u308b\u304c\uff0c[Gmail\u306fOAuth\u306e\u30c8\u30fc\u30af\u30f3\u306b\u3088\u308b\u8a8d\u8a3c\u3082\u51fa\u6765\u308b](https://developers.google.com/gmail/xoauth2_protocol)\u306e\u3067\uff0c\u5b9f\u969b\u306b\u3084\u3063\u3066\u307f\u305f\u30b5\u30f3\u30d7\u30eb\uff0eStackOverflow\u3092\u53c2\u8003\u306b\u5b9f\u88c5\u3057\u305f\u304c\u5143\u30b9\u30ec\u898b\u3064\u3051\u3089\u308c\u306a\u304f\u306a\u3063\u3066\u3057\u307e\u3063\u305f\u306e\u3067\uff0c\u624b\u5143\u3067\u52d5\u3044\u305f\u30b3\u30fc\u30c9\u3092\u4e0b\u306b\u30e1\u30e2\u3057\u3066\u304a\u304f\uff0e[javamail-android](https://code.google.com/p/javamail-android/)\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u5229\u7528\u3057\u3066\u3044\u308b\uff0e\n\n\n\u524d\u63d0\u3068\u3057\u3066\uff0c https://mail.google.com\u306b\u5bfe\u3059\u308b\u30c8\u30fc\u30af\u30f3\u306f\u3059\u3067\u306b\u53d6\u5f97\u3067\u304d\u3066\u3044\u308b\u3082\u306e\u3068\u3059\u308b\uff0e\n\n```java:\nimport android.os.AsyncTask;\nimport com.sun.mail.smtp.SMTPTransport;\nimport com.sun.mail.util.BASE64EncoderStream;\n\nimport javax.activation.DataHandler;\nimport javax.mail.Message;\nimport javax.mail.MessagingException;\nimport javax.mail.Session;\nimport javax.mail.internet.InternetAddress;\nimport javax.mail.internet.MimeMessage;\nimport javax.mail.util.ByteArrayDataSource;\nimport java.util.Properties;\n\npublic class GmailSendHelper {\n    private static final int RESPONSE_CODE_AUTH_SUCCESS = 235;\n    private static final int SUBMISSION_PORT = 587;\n    private static final String GMAIL_SMTP_SERVER = \"smtp.gmail.com\";\n    private final String userEmail;\n    private final String authToken;\n    private Session session;\n\n    public GmailSendHelper(String userEmail, String authToken) {\n        this.userEmail = userEmail;\n        this.authToken = authToken;\n    }\n\n    private SMTPTransport connectToSmtp(String host, int port) \n            throws MessagingException {\n        Properties props = new Properties();\n        props.put(\"mail.smtp.starttls.enable\", \"true\");\n        props.put(\"mail.smtp.starttls.required\", \"true\");\n        props.put(\"mail.smtp.sasl.enable\", \"false\");\n        session = Session.getInstance(props);\n\n        SMTPTransport transport \n                = new SMTPTransport(session, /* URL Name */ null);\n        transport.connect(\n                host, port, userEmail, /* Password, OAuth\u8a8d\u8a3c\u306a\u306e\u3067Null */ null);\n\n        byte[] response = BASE64EncoderStream.encode(\n                String.format(\"user=%s\\1auth=Bearer %s\\1\\1\", \n                        userEmail, authToken).getBytes()\n        );\n\n        transport.issueCommand(\n                \"AUTH XOAUTH2 \" + new String(response), RESPONSE_CODE_AUTH_SUCCESS);\n        return transport;\n    }\n\n    public synchronized void sendHtmlMail(\n            String subject, String body, String recipients) \n            throws MessagingException {\n        SMTPTransport smtpTransport \n                = connectToSmtp(GMAIL_SMTP_SERVER, SUBMISSION_PORT);\n\n        MimeMessage message = new MimeMessage(session);\n        DataHandler handler = new DataHandler(\n                new ByteArrayDataSource(body.getBytes(), \"text/html\"));\n        message.setSender(new InternetAddress(userEmail));\n        message.setSubject(subject);\n        message.setDataHandler(handler);\n        if (recipients.indexOf(',') > 0) {\n            message.setRecipients(\n                    Message.RecipientType.TO, InternetAddress.parse(recipients));\n        } else {\n            message.setRecipient(\n                    Message.RecipientType.TO, new InternetAddress(recipients));\n        }\n        smtpTransport.sendMessage(message, message.getAllRecipients());\n    }\n\n    public synchronized void sendHtmlMailAsync(\n            final String subject, final String body, final String recipients) {\n        AsyncTask<Void, Void, String> task = new AsyncTask<Void, Void, String>() {\n            @Override\n            protected String doInBackground(Void... params) {\n                try {\n                    sendHtmlMail(subject, body, recipients);\n                    return \"\";\n                } catch (MessagingException e) {\n                    // TODO: handle error\n                    return e.getMessage();\n                }\n            }\n        };\n        task.execute();\n    }\n}\n```", "tags": ["Android", "Java", "gmail"]}