{"context": "\u554f\u984c\u306f\u3053\u3061\u3089\nhttp://qiita.com/Nabetani/items/6e7a6fadbfaa4ae20e89\nrequire 'bundler/inline'\n\ngemfile do\n  source 'https://rubygems.org'\n\n  gem 'activesupport', require: 'active_support/all'\n\n  gem 'minitest', require: 'minitest/autorun'\n  gem 'minitest-reporters'\n\n  gem 'awesome_print'\n  gem 'tapp'\n\n  gem 'pry'\n  gem 'pry-rescue', require: 'pry-rescue/minitest'\n  gem 'pry-stack_explorer'\nend\n\nclass Seg\n  class << self\n    def convert_str_to_set(str)\n      str.to_i(16).to_s(2).chars.reverse.map.with_index.select {|e, i| e == '1' }.map(&:last).to_set\n    end\n  end\n\n  LIGHTS = %w(3f 06 5b 4f 66 6d 7d 27 7f 6f).map {|s| convert_str_to_set(s) }.map.with_index.to_a\n  DARKS = %w(40 79 24 30 19 12 02 58 00 10).map {|s| convert_str_to_set(s) }.map.with_index.to_a\n\n  def initialize(light, dark)\n    @light = self.class.convert_str_to_set(light)\n    @dark = self.class.convert_str_to_set(dark)\n  end\n\n  def candidates\n    ls = LIGHTS.select {|e, i| e.superset?(@light) }.map(&:last)\n    ds = DARKS.select {|e, i| e.superset?(@dark) }.map(&:last)\n\n    result = (ls & ds)\n\n    if ls.count == 10\n      result << nil\n    end\n\n    result\n  end\nend\n\ndef calc_min(candidates)\n  nils = candidates[0..-2].take_while {|xs| xs.include?(nil) }\n  first_digit, *xs = candidates[nils.count..-1]\n  if (candidates.count - nils.count) > 1\n    return if first_digit == [0]\n    first_digit = first_digit.without(0)\n  end\n\n  [first_digit, *xs].map(&:compact).map(&:min).join\nend\n\ndef calc_max(candidates)\n  candidates.map(&:compact).map(&:max).join\nend\n\ndef solve(input)\n  lights, darks = input.split(?,).map {|e| e.split(?:) }\n  segs = lights.zip(darks).map {|l, d| Seg.new(l, d) }\n  candidates = segs.map(&:candidates)\n  candidates = candidates.drop_while {|xs| xs != [nil] } if candidates.include?([nil])\n\n  return '-' if candidates.any?(&:empty?)\n\n  min = calc_min(candidates)\n  max = calc_max(candidates)\n\n  return '-' if min.blank?\n\n  [min, max].join(?,)\nend\n\nTEST_DATA = <<~EOS\n/*0*/ test( \"06:4b:46:64:6d,79:20:10:10:02\", \"12345,13996\" );\n/*1*/ test( \"41:00,3e:01\", \"-\" );\n/*2*/ test( \"00:00,79:79\", \"1,11\" );\n/*3*/ test( \"02:4b:46:64,20:20:10:10\", \"1234,3399\" );\n/*4*/ test( \"06:2f:3f:27,40:00:00:40\", \"1000,7987\" );\n/*5*/ test( \"00:3d:2d:26,00:00:00:00\", \"600,9899\" );\n/*6*/ test( \"40:20:10,00:00:00\", \"200,998\" );\n/*7*/ test( \"00:00:00,40:20:10\", \"1,739\" );\n/*8*/ test( \"08:04:02:01,00:00:00:00\", \"2000,9999\" );\n/*9*/ test( \"00:00:00:00,08:04:02:01\", \"1,7264\" );\n/*10*/ test( \"08:04:02:01,01:02:04:08\", \"-\" );\n/*11*/ test( \"04:02:01,02:04:08\", \"527,627\" );\n/*12*/ test( \"04:02:01:40:10,02:04:08:10:20\", \"52732,62792\" );\n/*13*/ test( \"00:30:07,00:01:10\", \"-\" );\n/*14*/ test( \"37,00\", \"0,8\" );\n/*15*/ test( \"3f,40\", \"0,0\" );\n/*16*/ test( \"3f:3f,40:40\", \"-\" );\n/*17*/ test( \"00:3f,40:40\", \"0,70\" );\n/*18*/ test( \"00:3f,38:00\", \"0,18\" );\n/*19*/ test( \"18,07\", \"-\" );\n/*20*/ test( \"08,10\", \"3,9\" );\n/*21*/ test( \"42,11\", \"4,4\" );\n/*22*/ test( \"18,05\", \"-\" );\n/*23*/ test( \"10:00,0b:33\", \"-\" );\n/*24*/ test( \"14:02,00:30\", \"61,83\" );\n/*25*/ test( \"00:1a,3d:04\", \"2,2\" );\n/*26*/ test( \"00:28,38:40\", \"0,10\" );\n/*27*/ test( \"20:08:12,4f:37:24\", \"-\" );\n/*28*/ test( \"02:4c:18,00:00:04\", \"132,992\" );\n/*29*/ test( \"4a:7a:02,10:00:30\", \"381,983\" );\n/*30*/ test( \"00:00:06,0b:11:08\", \"1,47\" );\n/*31*/ test( \"04:20:2c:14,39:08:50:09\", \"-\" );\n/*32*/ test( \"02:06:02:02,00:31:18:11\", \"1111,9174\" );\n/*33*/ test( \"00:04:48:50,03:02:20:02\", \"526,636\" );\n/*34*/ test( \"00:58:42:40,00:20:08:12\", \"245,9245\" );\n/*35*/ test( \"08:08:60:00:32,76:67:02:16:04\", \"-\" );\n/*36*/ test( \"00:00:00:08:02,06:1a:3b:20:11\", \"21,34\" );\n/*37*/ test( \"08:58:12:06:12,10:20:20:00:04\", \"32202,92292\" );\n/*38*/ test( \"00:10:74:4e:10,10:04:02:00:24\", \"2632,92692\" );\n/*39*/ test( \"44:76:0a:00:0c:44,39:08:11:09:02:11\", \"-\" );\n/*40*/ test( \"00:00:44:0a:04:00,79:06:02:04:79:28\", \"5211,6211\" );\n/*41*/ test( \"30:02:02:2c:0e:02,00:08:04:02:20:01\", \"612531,872634\" );\n/*42*/ test( \"00:00:04:10:00:60,25:19:01:02:24:00\", \"1624,44629\" );\n/*43*/ test( \"04:18:54:38:00:14:70,10:65:09:01:6c:00:0d\", \"-\" );\n/*44*/ test( \"18:04:26:20:04:24:1a,02:21:50:48:02:08:00\", \"6177540,6177678\" );\n/*45*/ test( \"00:08:34:00:00:64:06,18:24:02:00:61:08:61\", \"260141,7269141\" );\n/*46*/ test( \"00:02:0a:04:4a:00:20,18:21:24:02:04:60:19\", \"125214,7126214\" );\nEOS\n\nMinitest::Reporters.use!(Minitest::Reporters::ProgressReporter.new)\n\ndescribe 'Doukaku' do\n  TEST_DATA.each_line do |test|\n    input, expected = test.scan(/\"(.*)\", \"(.*)\"/)[0]\n\n    it input do\n      assert_equal expected, solve(input)\n    end\n  end\nend\n\n1\u6642\u9593 + \u305d\u306e\u5834\u306e\u5ef6\u957710\u5206 + \u5e30\u3063\u3066\u304b\u3089 30 \u5206\u304f\u3089\u3044\u3002\n\u3060\u3044\u3076\u8ca0\u3051\u305f\u3002\n\u554f\u984c\u306f\u3053\u3061\u3089\nhttp://qiita.com/Nabetani/items/6e7a6fadbfaa4ae20e89\n\n```rb\nrequire 'bundler/inline'\n\ngemfile do\n  source 'https://rubygems.org'\n\n  gem 'activesupport', require: 'active_support/all'\n\n  gem 'minitest', require: 'minitest/autorun'\n  gem 'minitest-reporters'\n\n  gem 'awesome_print'\n  gem 'tapp'\n\n  gem 'pry'\n  gem 'pry-rescue', require: 'pry-rescue/minitest'\n  gem 'pry-stack_explorer'\nend\n\nclass Seg\n  class << self\n    def convert_str_to_set(str)\n      str.to_i(16).to_s(2).chars.reverse.map.with_index.select {|e, i| e == '1' }.map(&:last).to_set\n    end\n  end\n\n  LIGHTS = %w(3f 06 5b 4f 66 6d 7d 27 7f 6f).map {|s| convert_str_to_set(s) }.map.with_index.to_a\n  DARKS = %w(40 79 24 30 19 12 02 58 00 10).map {|s| convert_str_to_set(s) }.map.with_index.to_a\n\n  def initialize(light, dark)\n    @light = self.class.convert_str_to_set(light)\n    @dark = self.class.convert_str_to_set(dark)\n  end\n\n  def candidates\n    ls = LIGHTS.select {|e, i| e.superset?(@light) }.map(&:last)\n    ds = DARKS.select {|e, i| e.superset?(@dark) }.map(&:last)\n\n    result = (ls & ds)\n\n    if ls.count == 10\n      result << nil\n    end\n\n    result\n  end\nend\n\ndef calc_min(candidates)\n  nils = candidates[0..-2].take_while {|xs| xs.include?(nil) }\n  first_digit, *xs = candidates[nils.count..-1]\n  if (candidates.count - nils.count) > 1\n    return if first_digit == [0]\n    first_digit = first_digit.without(0)\n  end\n\n  [first_digit, *xs].map(&:compact).map(&:min).join\nend\n\ndef calc_max(candidates)\n  candidates.map(&:compact).map(&:max).join\nend\n\ndef solve(input)\n  lights, darks = input.split(?,).map {|e| e.split(?:) }\n  segs = lights.zip(darks).map {|l, d| Seg.new(l, d) }\n  candidates = segs.map(&:candidates)\n  candidates = candidates.drop_while {|xs| xs != [nil] } if candidates.include?([nil])\n\n  return '-' if candidates.any?(&:empty?)\n\n  min = calc_min(candidates)\n  max = calc_max(candidates)\n\n  return '-' if min.blank?\n\n  [min, max].join(?,)\nend\n\nTEST_DATA = <<~EOS\n/*0*/ test( \"06:4b:46:64:6d,79:20:10:10:02\", \"12345,13996\" );\n/*1*/ test( \"41:00,3e:01\", \"-\" );\n/*2*/ test( \"00:00,79:79\", \"1,11\" );\n/*3*/ test( \"02:4b:46:64,20:20:10:10\", \"1234,3399\" );\n/*4*/ test( \"06:2f:3f:27,40:00:00:40\", \"1000,7987\" );\n/*5*/ test( \"00:3d:2d:26,00:00:00:00\", \"600,9899\" );\n/*6*/ test( \"40:20:10,00:00:00\", \"200,998\" );\n/*7*/ test( \"00:00:00,40:20:10\", \"1,739\" );\n/*8*/ test( \"08:04:02:01,00:00:00:00\", \"2000,9999\" );\n/*9*/ test( \"00:00:00:00,08:04:02:01\", \"1,7264\" );\n/*10*/ test( \"08:04:02:01,01:02:04:08\", \"-\" );\n/*11*/ test( \"04:02:01,02:04:08\", \"527,627\" );\n/*12*/ test( \"04:02:01:40:10,02:04:08:10:20\", \"52732,62792\" );\n/*13*/ test( \"00:30:07,00:01:10\", \"-\" );\n/*14*/ test( \"37,00\", \"0,8\" );\n/*15*/ test( \"3f,40\", \"0,0\" );\n/*16*/ test( \"3f:3f,40:40\", \"-\" );\n/*17*/ test( \"00:3f,40:40\", \"0,70\" );\n/*18*/ test( \"00:3f,38:00\", \"0,18\" );\n/*19*/ test( \"18,07\", \"-\" );\n/*20*/ test( \"08,10\", \"3,9\" );\n/*21*/ test( \"42,11\", \"4,4\" );\n/*22*/ test( \"18,05\", \"-\" );\n/*23*/ test( \"10:00,0b:33\", \"-\" );\n/*24*/ test( \"14:02,00:30\", \"61,83\" );\n/*25*/ test( \"00:1a,3d:04\", \"2,2\" );\n/*26*/ test( \"00:28,38:40\", \"0,10\" );\n/*27*/ test( \"20:08:12,4f:37:24\", \"-\" );\n/*28*/ test( \"02:4c:18,00:00:04\", \"132,992\" );\n/*29*/ test( \"4a:7a:02,10:00:30\", \"381,983\" );\n/*30*/ test( \"00:00:06,0b:11:08\", \"1,47\" );\n/*31*/ test( \"04:20:2c:14,39:08:50:09\", \"-\" );\n/*32*/ test( \"02:06:02:02,00:31:18:11\", \"1111,9174\" );\n/*33*/ test( \"00:04:48:50,03:02:20:02\", \"526,636\" );\n/*34*/ test( \"00:58:42:40,00:20:08:12\", \"245,9245\" );\n/*35*/ test( \"08:08:60:00:32,76:67:02:16:04\", \"-\" );\n/*36*/ test( \"00:00:00:08:02,06:1a:3b:20:11\", \"21,34\" );\n/*37*/ test( \"08:58:12:06:12,10:20:20:00:04\", \"32202,92292\" );\n/*38*/ test( \"00:10:74:4e:10,10:04:02:00:24\", \"2632,92692\" );\n/*39*/ test( \"44:76:0a:00:0c:44,39:08:11:09:02:11\", \"-\" );\n/*40*/ test( \"00:00:44:0a:04:00,79:06:02:04:79:28\", \"5211,6211\" );\n/*41*/ test( \"30:02:02:2c:0e:02,00:08:04:02:20:01\", \"612531,872634\" );\n/*42*/ test( \"00:00:04:10:00:60,25:19:01:02:24:00\", \"1624,44629\" );\n/*43*/ test( \"04:18:54:38:00:14:70,10:65:09:01:6c:00:0d\", \"-\" );\n/*44*/ test( \"18:04:26:20:04:24:1a,02:21:50:48:02:08:00\", \"6177540,6177678\" );\n/*45*/ test( \"00:08:34:00:00:64:06,18:24:02:00:61:08:61\", \"260141,7269141\" );\n/*46*/ test( \"00:02:0a:04:4a:00:20,18:21:24:02:04:60:19\", \"125214,7126214\" );\nEOS\n\nMinitest::Reporters.use!(Minitest::Reporters::ProgressReporter.new)\n\ndescribe 'Doukaku' do\n  TEST_DATA.each_line do |test|\n    input, expected = test.scan(/\"(.*)\", \"(.*)\"/)[0]\n\n    it input do\n      assert_equal expected, solve(input)\n    end\n  end\nend\n```\n\n1\u6642\u9593 + \u305d\u306e\u5834\u306e\u5ef6\u957710\u5206 + \u5e30\u3063\u3066\u304b\u3089 30 \u5206\u304f\u3089\u3044\u3002\n\u3060\u3044\u3076\u8ca0\u3051\u305f\u3002\n", "tags": ["Ruby", "\u3069\u3046\u66f8\u304f", "yhpg"]}