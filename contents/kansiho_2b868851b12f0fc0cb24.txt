{"context": "\n\n\u306f\u3058\u3081\u306b\nPython\u30fb\u30c6\u30ad\u30b9\u30c8\u30de\u30a4\u30cb\u30f3\u30b0\u521d\u5fc3\u8005\u6587\u7cfb\u5927\u5b66\u751f\u3067\u3059\u3002\n\u5352\u8ad6\u306e\u305f\u3081\u306b\u3001\u3042\u308b\u6587\u732e\u306b\u304a\u3051\u308b\u5358\u8a9e\u306e\u983b\u51fa\u5ea6\u306a\u3069\u3092\u8abf\u3079\u308b\u5fc5\u8981\u304c\u3042\u3063\u305f\u306e\u3067\u3001\u53d6\u308a\u7d44\u3093\u3067\u307f\u3088\u3046\u3068\u601d\u3044\u307e\u3059\u3002\n\n\u753b\u50cf\u306f\u3053\u3061\u3089\u304b\u3089\n\u4eca\u56de\u984c\u6750\u3068\u3059\u308b\u8ce2\u8005\u306e\u8d08\u308a\u7269\u306e\u30c6\u30ad\u30b9\u30c8\u306f\u7d50\u57ce\u6d69\u3055\u3093\u8a33\u3067\u3053\u3061\u3089\u306b\u3042\u308a\u307e\u3059\u3002\n\u3053\u3061\u3089\u3092okurimono.txt\u3068\u3057\u3066\u3001\u30ed\u30fc\u30ab\u30eb\u306b\u4fdd\u5b58\u3002\n\u4eca\u56de\u306f\u3001\u300c\u8ce2\u8005\u306e\u8d08\u308a\u7269\u300d\u306e\u5f62\u614b\u7d20\u89e3\u6790\u7d50\u679c\u3092\u5206\u6790\u3057\u3066\uff0c\n \u4fc2\u52a9\u8a5e\u306e\u300c\u306f\u300d\u306e\u76f4\u524d\u306b\u73fe\u308c\u308b\u540d\u8a5e\u306e\u983b\u5ea6\u8868\u3092\u4f5c\u6210\u3057\u307e\u3059\uff01\n\uff08\u203b\u3000\u983b\u5ea6\u306e\u5927\u304d\u3044\u9806\u306b\u3001\u983b\u5ea6\u304c\uff11\u3088\u308a\u5927\u304d\u3044\u3082\u306e\u306e\u307f\u51fa\u529b\u3059\u308b\u3053\u3068\u306b\u3057\u307e\u3059\uff09\n\n\u65b9\u91dd\n\u307e\u305a\u30c6\u30ad\u30b9\u30c8(infile) \u3092\u8aad\u307f\u8fbc\u3093\u3067\u3001MeCab\u3067\u5f62\u614b\u7d20\u89e3\u6790\u3092\u3057\u305f\u7d50\u679c\u3092\u65b0\u3057\u3044\u30d5\u30a1\u30a4\u30eb(outfile) \u306b\u66f8\u304d\u8fbc\u3080\u95a2\u6570\u3001morph_analysis(infile, outfile)\u3092\u3064\u304f\u308a\u307e\u3059\u3002\n\nsample.py\n\ndef morph_analysis(infile, outfile) : # infile\u306e\u6587\u7ae0\u3092\u89e3\u6790\u3057\u3066\uff0c\u7d50\u679c\u3092outfile\u306b\u51fa\u529b\n    t = MeCab.Tagger(' '.join(sys.argv)) # \u5f62\u614b\u7d20\u89e3\u6790\u5668\u306e\u5909\u6570\uff08\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\uff09\u3092\u4f5c\u6210\n    fin = open(infile, 'r') # \u89e3\u6790\u5bfe\u8c61\u306e\u30d5\u30a1\u30a4\u30eb\u3092\u958b\u304f\n    fout = open(outfile, 'w') # \u89e3\u6790\u7d50\u679c\u3092\u66f8\u304d\u51fa\u3059\u30d5\u30a1\u30a4\u30eb\u3092\u958b\u304f\n    fout.write(t.parse(fin.read())) # \u8aad\u307f\u8fbc\u3093\u3067\u89e3\u6790\u3057\u3066\u66f8\u304d\u51fa\u3057\n    fin.close() # \u30d5\u30a1\u30a4\u30eb\u3092\u9589\u3058\u308b\n    fout.close()\n    return outfile\n\n\nmorph_analysis('okurimono.txt', 'okurimono_m.txt')\n\n\n\n\u3055\u3066\u3001\u3053\u306e\u95a2\u6570\u3092\u5b9f\u884c\u3057\u3066\u3001\u66f8\u304d\u8fbc\u307e\u308c\u305f okurimono_m.txt\u3092\u898b\u3066\u307f\u308b\u3068\u30fb\u30fb\u30fb\n\n\u5f62\u614b\u7d20\u3055\u308c\u3066\u308b\u301c\u3002\n\u3053\u306e\u30d5\u30a1\u30a4\u30eb\u3092 get_m_lines\u3068\u3044\u3046\u95a2\u6570\u306b\u6e21\u3059\u3068\u30011\u5f62\u614b\u7d20\u3054\u3068\u306e\u30ea\u30b9\u30c8\u304c\u8fd4\u308b\u3088\u3046\u306b\u3057\u307e\u3059\u3002\n\nsample.py\n\ndef get_m_lines(file) : # \u89e3\u6790\u7d50\u679c\u306e\u30d5\u30a1\u30a4\u30eb\u3092\u8aad\u307f\u8fbc\u3080\n    f = open(file, 'r') # \u89e3\u6790\u7d50\u679c\u306e\u30d5\u30a1\u30a4\u30eb\u3092\u958b\u304f\n    m_lines = f.read().split('\\n') # \u8aad\u307f\u8fbc\u3093\u3067\uff0c\u6539\u884c\u3067\u5206\u5272\n\n    # m_lines\u306e\u6700\u5f8c2\u3064\u306e\u8981\u7d20\u306fEOS\u3068\u7a7a\u767d\u306a\u306e\u3067\u30ab\u30c3\u30c8\u3057\u3066\u304a\u304f\n    m_lines.pop(-1)\n    m_lines.pop(-1)\n\n    f.close()\n    return m_lines # \u7d50\u679c\uff08\uff11\u5f62\u614b\u7d20\u6bce\u306e\u60c5\u5831\u306e\u30ea\u30b9\u30c8\uff09\u3092\u8fd4\u3059\n\n\nmlines = get_m_lines('okurimono_m.txt')\n\n\n\n\u305d\u3057\u3066\u3001\u5f62\u614b\u7d20\u306e\u89e3\u6790\u7d50\u679c\u306f\u6587\u5b57\u5217\u3067\u308f\u304b\u308a\u306b\u304f\u3044\u306e\u3067\u3001\n\nsample.txt\n\n\u306e  \u52a9\u8a5e,\u9023\u4f53\u5316,*,*,*,*,\u306e,\u30ce,\u30ce\n\n\n\nmecab_data(line) \u3068\u3044\u3046\u3001\u4e00\u3064\u306e\u5f62\u614b\u7d20\u3092\u5165\u308c\u3053\u3093\u3060\u3089\u3001\u4f7f\u3044\u3084\u3059\u3044\u8f9e\u66f8\u578b\u306b\u306a\u3063\u3066\u8fd4\u3063\u3066\u304f\u308b\u95a2\u6570\u3092\u4f5c\u308d\u3046\u3068\u601d\u3044\u307e\u3059\u3002\n\nsample.py\n\ndef mecab_data(line) : # \u6587\u5b57\u5217\u3067\u3042\u308b\u89e3\u6790\u7d50\u679c\u3092\u4f7f\u3044\u3084\u3059\u3044\u5f62\uff08\u8f9e\u66f8\u578b\uff09\u306b\n    #print line #\u306e  \u52a9\u8a5e,\u9023\u4f53\u5316,*,*,*,*,\u306e,\u30ce,\u30ce\n    mkeys = ['pos', 'pos1', 'pos2', 'pos3', 'inf', 'form', 'base', 'yomi', 'oto'] # \u30ad\u30a3\u3092\u5b9a\u7fa9\n    morph = OrderedDict() # \u8f9e\u66f8\u578b\u30c7\u30fc\u30bf\u306e\u521d\u671f\u5316\u3002\u30ad\u30fc\u9806\u5e8f\u3092\u4fdd\u3064\u305f\u3081\u6a19\u6e96\u30e9\u30a4\u30d6\u30e9\u30ea\u304b\u3089OrderedDict\u3092\u30a4\u30f3\u30dd\u30fc\u30c8\u3057\u3066\u3044\u307e\u3059\u3002\n    data = line.rstrip('\\n').split('\\t') # \u6539\u884c\u30b3\u30fc\u30c9\u3092\u5916\u3057\u3066(?)\uff0c\u30bf\u30d6\u3067\uff08\u8868\u8a18\u3068\u305d\u306e\u4ed6\u306e\u60c5\u5831\u306b\uff09\u5206\u5272\n    morph['surface'] = data[0] # \u8868\u8a18\u3092\u3057\u307e\u3046\n\n    #print data[0] #\u306a\n    #print data[1] #\u52a9\u52d5\u8a5e,*,*,*,\u7279\u6b8a\u30fb\u30c0,\u4f53\u8a00\u63a5\u7d9a,\u3060,\u30ca,\u30ca\n\n    features = data[1].split(',') # \u305d\u306e\u4ed6\u306e\u60c5\u5831\u306f\u30ab\u30f3\u30de\u533a\u5207\u308a\u306a\u306e\u3067\uff0c\u30ab\u30f3\u30de\u3067\u5206\u5272 [\u52a9\u8a5e,\u9023\u4f53\u5316,*,*,*,*,\u306e,\u30ce,\u30ce]\n    for i in range(len(features)) : # \u5206\u5272\u3055\u308c\u305f\u305d\u308c\u305e\u308c\u306e\u60c5\u5831\u3092\n        morph[mkeys[i]] = features[i] # \u305d\u306e\u9806\u5e8f\u306b\u5f93\u3063\u3066\uff0c\u9069\u5207\u306a\u30ad\u30a3\u306e\u5024\u3068\u3059\u308b\n\n    if morph['base'] == '*' : # \u672a\u77e5\u8a9e\u306b\u3064\u3044\u3066\uff0c\u6271\u3044\u3084\u3059\u3044\u3088\u3046\u306b\u5fc5\u8981\u306a\u60c5\u5831\u3092\u4ed8\u52a0\n        morph['yomi'] = '*'\n        morph['oto'] = '*'\n\n    return morph # \u5f97\u3089\u308c\u305f\u8f9e\u66f8\u578b\u30c7\u30fc\u30bf\u3092\u8fd4\u3059\n\n\n\n\n\n\n\n\n\u7d50\u679c\u3092\u898b\u3066\u307f\u308b\u3068\u3001\u826f\u3044\u611f\u3058\u3067\u3059\uff01\n\n[('surface', '\u306f'), ('pos', '\u52a9\u8a5e'), ('pos1', '\u4fc2\u52a9\u8a5e'), ('pos2', '*'), ('pos3', '*'), ('inf', '*'), ('form', '*'), ('base', '\u306f'), ('yomi', '\u30cf'), ('oto', '\u30ef')]), ......\n\n\u4e0b\u3054\u3057\u3089\u3048\u306f\u7d42\u308f\u3063\u305f\u306e\u3067\u3001\u5206\u6790\u306b\u5165\u308a\u307e\u3059\u3002\n\u5f62\u614b\u7d20\u3054\u3068\u306e\u30ea\u30b9\u30c8\u3092\u53d7\u3051\u53d6\u3063\u305f\u3089\u3001mecab_data\u95a2\u6570\u3092\u4f7f\u3063\u3066\u308f\u304b\u308a\u3084\u3059\u304f\u5f62\u614b\u7d20\u3054\u3068\u306b\u8f9e\u66f8\u306b\u3057\u3066\u3001morphs\u3068\u3044\u3046\u8f9e\u66f8\u3092\u4f5c\u308a\u3001\n\u3055\u3089\u306b\u305d\u306emorphs\u3092\u5206\u6790\u3057\u3066\u3001\u4fc2\u52a9\u8a5e\u306e\u300c\u306f\u300d\u306e\u76f4\u524d\u306b\u73fe\u308c\u308b\u540d\u8a5e\u3092\u63a2\u3057\u3001\u305d\u306e\u540d\u8a5e\u3092\u30ad\u30fc\u3001\u51fa\u73fe\u56de\u6570\u3092\u30d0\u30ea\u30e5\u30fc\u3068\u3059\u308b\u8f9e\u66f8(hist)\u3092\u4f5c\u3063\u3066\u3001\u305d\u308c\u3092\u308f\u304b\u308a\u3084\u3059\u304f\u51fa\u73fe\u56de\u6570\u306e\u9ad8\u3044\u9806\u306b\u4e26\u3073\u66ff\u3048\u305f\u8f9e\u66f8(tr_hist)\u3092\u4f5c\u308a\u3001\u8868\u793a\u3057\u3088\u3046\u3068\u601d\u3044\u307e\u3059\u3002\nnoun_ha\u3068\u3044\u3046\u95a2\u6570\u3092\u4f5c\u308a\u307e\u3059\u3002\n\nsample.py\n\n\ndef noun_ha(mlines):\n    hist = dict() # \u30ad\u30fc\u306b\u540d\u8a5e\u3001\u5024\u306b\u983b\u5ea6\uff08\u6570\u5b57\uff09\u304c\u5165\u308b\u306e\u3092\u60f3\u5b9a\n    morphs = []\n    tr_hist = dict()\n\n    for line in mlines:\n        morphs.append(mecab_data(line)) #\u5f62\u614b\u7d20\u3092\uff11\u3064\u305a\u3064\u8f9e\u66f8\u578b\u306b\u5909\u63db\n\n    for i in range(len(morphs) -1): # i+1 \u304c\u300c\u306f\u300d\u306e\u6642\u3092\u60f3\u5b9a\u3057\u3066\u3044\u308b\u306e\u3067\u3001len -1\n        #\u3042\u308b\u5f62\u614b\u7d20\u306e\u8981\u7d20\u304c\u540d\u8a5e\u3067\u3001\u305d\u306e\u6b21\u306e\u8981\u7d20\u304c\u4fc2\u52a9\u8a5e\u3067\u3001\u304b\u3064\u4fc2\u52a9\u8a5e\u300c\u306f\u300d\u306e\u3068\u304d\n        if morphs[i]['pos'] == '\u540d\u8a5e' \\\n        and morphs[i+1]['pos1'] == '\u4fc2\u52a9\u8a5e' \\\n        and morphs[i+1]['surface'] == '\u306f':\n            key = morphs[i]['surface'] #\u305d\u306e\u540d\u8a5e\u3092\u30ad\u30fc\u3068\u3059\u308b\n            hist[key] = hist.get(key,0) + 1 #\u3082\u3057\u3001\u307e\u3060\u305d\u306ekey\u304c\u5b58\u5728\u3057\u306a\u304b\u3063\u305f\u3089(=\u521d\u3081\u3066\u51fa\u73fe\u3057\u305f\u3089),\u30c7\u30d5\u30a9\u30eb\u30c8\u5024\u30920\u3068\u8003\u3048\u30661\u3092\u8db3\u3059\u3002\n\n    for noun in hist: #\u30ad\u30fc\u3092\u53d6\u308a\u51fa\u3059\n        #hist\u306f\u983b\u51fa\u56de\u6570\u304c\u30d0\u30ea\u30e5\u30fc\u3060\u304c\u3001\n        #tr_hist \u306b\u3000\u983b\u51fa\u56de\u6570\u3092\u30ad\u30fc\u306b\u5909\u63db\u3057\u305f\u3082\u306e\u3092\u5165\u308c\u308b\u3002\u30d0\u30ea\u30e5\u30fc\u3092\u540d\u8a5e\u306e\u30ea\u30b9\u30c8\u306b\u3059\u308b\n        tr_hist[hist[noun]] = tr_hist.get(hist[noun],[])+[noun]\n\n    #print(tr_hist)\n    #{32: ['\u30c7\u30e9'], 1: ['\u547c\u3073\u9234', '\u53ce\u5165', '\u3053\u3053', '\u9055\u3044', '\u50d5', '\u8208\u596e', '\u3068\u304d', '\u6642\u8a08', '\u671b\u307f', '\u652f\u51fa', '\u7b54\u3048', '\u308f\u305f\u3057', '\u30c7\u30b6\u30a4\u30f3', '\u69d8\u5b50', '\u30d5\u30e9\u30a4\u30d1\u30f3', '\u30d7\u30ec\u30bc\u30f3\u30c8', '\u6587\u5b57', '\u4eba', '\u8272', '\u738b\u69d8', '\u9854', '\u8868\u73fe', '\u8a00\u660e', '\u305f\u3061', '\u5f7c', '\u6bd4\u55a9', '\u5149', '\u9aea\u306e\u6bdb', '\u30bb\u30c3\u30c8', '\u30bb\u30f3\u30c8', '\u5c0f\u92ad', '\u308f\u305f\u304f\u3057', '\u5f7c\u3089'], 2: ['\u660e\u65e5', '\u3053\u308c', '\u76ee', '\u9396', '\u8ce2\u8005', '\u5b9d\u7269', '\u306e', '\u4e00\u3064'], 3: ['\u3082\u306e', '\u3053\u3068', '\u305d\u308c', '\u4e3b\u4eba'], 4: ['\u9aea'], 13: ['\u30b8\u30e0']}\n\n    for i in sorted(tr_hist.keys(), reverse = True):\n        #\u898b\u3084\u3059\u304f\u540d\u8a5e\u3054\u3068\u306b\u51fa\u529b\u3001\u983b\u5ea6\u9ad8\u3044\u9806\u306b\n        if i > 1: #\u983b\u51fa\u56de\u6570\u304c2\u4ee5\u4e0a\u306a\u3089\n            for m in range(len(tr_hist[i])):\n            #\u540c\u3058\u51fa\u73fe\u56de\u6570\u306e\u540d\u8a5e\u3092\u5206\u3051\u3066\u8868\u793a\n                print( tr_hist[i][m], i)\n\n\n\n\n\n\n\u7d50\u679c\u306f\u3053\u3061\u3089\u3002\n\u826f\u3044\u611f\u3058\u306b\u983b\u5ea6\u8868\u304c\u3067\u304d\u307e\u3057\u305f\u301c\u301c\u301c\uff01\n\n\n\u5168\u6587\n\nsample.py\n\n\n# -*- coding: utf-8 -*-\n\n#\u8ab2\u984c\n#\u300c\u8ce2\u8005\u306e\u8d08\u308a\u7269\u300d\u306e\u5f62\u614b\u7d20\u89e3\u6790\u7d50\u679c\u3092\u5206\u6790\u3057\u3066\uff0c\u4fc2\u52a9\u8a5e\u306e\u300c\u306f\u300d\u306e\u76f4\u524d\u306b\u73fe\u308c\u308b\u540d\u8a5e\u306e\u983b\u5ea6\u8868\u3092\u4f5c\u6210\n#\u305b\u3088\uff0e\u983b\u5ea6\u306e\u5927\u304d\u3044\u9806\u306b\u983b\u5ea6\u304c\uff11\u3088\u308a\u5927\u304d\u3044\u3082\u306e\u3060\u3051\u51fa\u529b\u305b\u3088\uff0e\n\nimport MeCab # \u5fc5\u8981\u306a\u30e2\u30b8\u30e5\u30fc\u30eb\u3092\u8aad\u307f\u8fbc\u307f\nimport sys\nimport string\nfrom collections import OrderedDict\n\n\ndef morph_analysis(infile, outfile) : # infile\u306e\u6587\u7ae0\u3092\u89e3\u6790\u3057\u3066\uff0c\u7d50\u679c\u3092outfile\u306b\u51fa\u529b\n    t = MeCab.Tagger(' '.join(sys.argv)) # \u5f62\u614b\u7d20\u89e3\u6790\u5668\u306e\u5909\u6570\uff08\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\uff09\u3092\u4f5c\u6210\n    fin = open(infile, 'r') # \u89e3\u6790\u5bfe\u8c61\u306e\u30d5\u30a1\u30a4\u30eb\u3092\u958b\u304f\n    fout = open(outfile, 'w') # \u89e3\u6790\u7d50\u679c\u3092\u66f8\u304d\u51fa\u3059\u30d5\u30a1\u30a4\u30eb\u3092\u958b\u304f\n    fout.write(t.parse(fin.read())) # \u8aad\u307f\u8fbc\u3093\u3067\u89e3\u6790\u3057\u3066\u66f8\u304d\u51fa\u3057\n    fin.close() # \u30d5\u30a1\u30a4\u30eb\u3092\u9589\u3058\u308b\n    fout.close()\n    return outfile\n\n#\u6ce8\u3000\u8aad\u307f\u8fbc\u3093\u3067\u89e3\u6790\u5668\u306b\u6e21\u3057\u7d50\u679c\u3092\u53d7\u3051\u53d6\u308a\u305d\u308c\u3092\u66f8\u304d\u51fa\u3059\u307e\u3067\uff0c\u3059\u3079\u3066utf-8\u306e\u6587\u5b57\u5217\u3067\u884c\u3063\u3066\u3044\u308b\n\ndef get_m_lines(file) : # \u89e3\u6790\u7d50\u679c\u306e\u30d5\u30a1\u30a4\u30eb\u3092\u8aad\u307f\u8fbc\u3080\n    f = open(file, 'r') # \u89e3\u6790\u7d50\u679c\u306e\u30d5\u30a1\u30a4\u30eb\u3092\u958b\u304f\n    m_lines = f.read().split('\\n') # \u8aad\u307f\u8fbc\u3093\u3067\uff0c\u6539\u884c\u3067\u5206\u5272\n\n    # m_lines\u306e\u6700\u5f8c2\u3064\u306e\u8981\u7d20\u306fEOS\u3068\u7a7a\u767d\u306a\u306e\u3067\u30ab\u30c3\u30c8\u3057\u3066\u304a\u304f\n    m_lines.pop(-1)\n    m_lines.pop(-1)\n\n    f.close()\n    return m_lines # \u7d50\u679c\uff08\uff11\u5f62\u614b\u7d20\u6bce\u306e\u60c5\u5831\u306e\u30ea\u30b9\u30c8\uff09\u3092\u8fd4\u3059\n\ndef noun_ha(mlines):\n    hist = dict() # \u30ad\u30fc\u306b\u540d\u8a5e\u3001\u5024\u306b\u983b\u5ea6\uff08\u6570\u5b57\uff09\u304c\u5165\u308b\u306e\u3092\u60f3\u5b9a\n    morphs = []\n    tr_hist = dict()\n\n    for line in mlines:\n        morphs.append(mecab_data(line)) #\u5f62\u614b\u7d20\u3092\uff11\u3064\u305a\u3064\u8f9e\u66f8\u578b\u306b\u5909\u63db\n\n    for i in range(len(morphs) -1): # i+1 \u304c\u300c\u306f\u300d\u306e\u6642\u3092\u60f3\u5b9a\u3057\u3066\u3044\u308b\u306e\u3067\u3001len -1\n        #\u3042\u308b\u5f62\u614b\u7d20\u306e\u8981\u7d20\u304c\u540d\u8a5e\u3067\u3001\u305d\u306e\u6b21\u306e\u8981\u7d20\u304c\u4fc2\u52a9\u8a5e\u3067\u3001\u304b\u3064\u4fc2\u52a9\u8a5e\u300c\u306f\u300d\u306e\u3068\u304d\n        if morphs[i]['pos'] == '\u540d\u8a5e' \\\n        and morphs[i+1]['pos1'] == '\u4fc2\u52a9\u8a5e' \\\n        and morphs[i+1]['surface'] == '\u306f':\n            key = morphs[i]['surface'] #\u305d\u306e\u540d\u8a5e\u3092\u30ad\u30fc\u3068\u3059\u308b\n            hist[key] = hist.get(key,0) + 1 #\u3082\u3057\u3001\u307e\u3060\u305d\u306ekey\u304c\u5b58\u5728\u3057\u306a\u304b\u3063\u305f\u3089(=\u521d\u3081\u3066\u51fa\u73fe\u3057\u305f\u3089),\u30c7\u30d5\u30a9\u30eb\u30c8\u5024\u30920\u3068\u8003\u3048\u30661\u3092\u8db3\u3059\u3002\n\n    for noun in hist: #\u30ad\u30fc\u3092\u53d6\u308a\u51fa\u3059\n        #hist\u306f\u983b\u51fa\u56de\u6570\u304c\u30d0\u30ea\u30e5\u30fc\u3060\u304c\u3001\n        #tr_hist \u306b\u3000\u983b\u51fa\u56de\u6570\u3092\u30ad\u30fc\u306b\u5909\u63db\u3057\u305f\u3082\u306e\u3092\u5165\u308c\u308b\u3002\u30d0\u30ea\u30e5\u30fc\u3092\u540d\u8a5e\u306e\u30ea\u30b9\u30c8\u306b\u3059\u308b\n        tr_hist[hist[noun]] = tr_hist.get(hist[noun],[])+[noun]\n\n    #print(tr_hist)\n    #{32: ['\u30c7\u30e9'], 1: ['\u547c\u3073\u9234', '\u53ce\u5165', '\u3053\u3053', '\u9055\u3044', '\u50d5', '\u8208\u596e', '\u3068\u304d', '\u6642\u8a08', '\u671b\u307f', '\u652f\u51fa', '\u7b54\u3048', '\u308f\u305f\u3057', '\u30c7\u30b6\u30a4\u30f3', '\u69d8\u5b50', '\u30d5\u30e9\u30a4\u30d1\u30f3', '\u30d7\u30ec\u30bc\u30f3\u30c8', '\u6587\u5b57', '\u4eba', '\u8272', '\u738b\u69d8', '\u9854', '\u8868\u73fe', '\u8a00\u660e', '\u305f\u3061', '\u5f7c', '\u6bd4\u55a9', '\u5149', '\u9aea\u306e\u6bdb', '\u30bb\u30c3\u30c8', '\u30bb\u30f3\u30c8', '\u5c0f\u92ad', '\u308f\u305f\u304f\u3057', '\u5f7c\u3089'], 2: ['\u660e\u65e5', '\u3053\u308c', '\u76ee', '\u9396', '\u8ce2\u8005', '\u5b9d\u7269', '\u306e', '\u4e00\u3064'], 3: ['\u3082\u306e', '\u3053\u3068', '\u305d\u308c', '\u4e3b\u4eba'], 4: ['\u9aea'], 13: ['\u30b8\u30e0']}\n\n    for i in sorted(tr_hist.keys(), reverse = True):\n        #\u898b\u3084\u3059\u304f\u540d\u8a5e\u3054\u3068\u306b\u51fa\u529b\u3001\u983b\u5ea6\u9ad8\u3044\u9806\u306b\n        if i > 1: #\u983b\u51fa\u56de\u6570\u304c2\u4ee5\u4e0a\u306a\u3089\n            for m in range(len(tr_hist[i])):\n            #\u540c\u3058\u51fa\u73fe\u56de\u6570\u306e\u540d\u8a5e\u3092\u5206\u3051\u3066\u8868\u793a\n            print( tr_hist[i][m], i)\n\n\ndef mecab_data(line) : # \u6587\u5b57\u5217\u3067\u3042\u308b\u89e3\u6790\u7d50\u679c\u3092\u4f7f\u3044\u3084\u3059\u3044\u5f62\uff08\u8f9e\u66f8\u578b\uff09\u306b\n    #print line #\u306e  \u52a9\u8a5e,\u9023\u4f53\u5316,*,*,*,*,\u306e,\u30ce,\u30ce\n    mkeys = ['pos', 'pos1', 'pos2', 'pos3', 'inf', 'form', 'base', 'yomi', 'oto'] # \u30ad\u30a3\u3092\u5b9a\u7fa9\n    morph = OrderedDict() # \u8f9e\u66f8\u578b\u30c7\u30fc\u30bf\u306e\u521d\u671f\u5316\n    data = line.split('\\t') # \u6539\u884c\u30b3\u30fc\u30c9\u3092\u5916\u3057\u3066(?)\uff0c\u30bf\u30d6\u3067\uff08\u8868\u8a18\u3068\u305d\u306e\u4ed6\u306e\u60c5\u5831\u306b\uff09\u5206\u5272\n    #\u306e \u52a9\u8a5e,\u9023\u4f53\u5316,*,*,*,*,\u306e,\u30ce,\u30ce \u304c\u3001\u300c\u306e\u300d\u3068\u300c\u52a9\u8a5e,\u9023\u4f53\u5316,*,*,*,*,\u306e,\u30ce,\u30ce\u300d\u306b\u5206\u5272\u3055\u308c\u308b\n    morph['surface'] = data[0] # \u8868\u8a18\u3092\u3057\u307e\u3046\n    #print \"====================\"\n    #print data[0] #\u306a\n    #print data[1] #\u52a9\u52d5\u8a5e,*,*,*,\u7279\u6b8a\u30fb\u30c0,\u4f53\u8a00\u63a5\u7d9a,\u3060,\u30ca,\u30ca\n    #print \"====================\"\n    features = data[1].split(',') # \u305d\u306e\u4ed6\u306e\u60c5\u5831\u306f\u30ab\u30f3\u30de\u533a\u5207\u308a\u306a\u306e\u3067\uff0c\u30ab\u30f3\u30de\u3067\u5206\u5272 [\u52a9\u8a5e,\u9023\u4f53\u5316,*,*,*,*,\u306e,\u30ce,\u30ce]\n    for i in range(len(features)) : # \u5206\u5272\u3055\u308c\u305f\u305d\u308c\u305e\u308c\u306e\u60c5\u5831\u3092\n        morph[mkeys[i]] = features[i] # \u305d\u306e\u9806\u5e8f\u306b\u5f93\u3063\u3066\uff0c\u9069\u5207\u306a\u30ad\u30a3\u306e\u5024\u3068\u3059\u308b\n\n    if morph['base'] == '*' : # \u672a\u77e5\u8a9e\u306b\u3064\u3044\u3066\uff0c\u6271\u3044\u3084\u3059\u3044\u3088\u3046\u306b\u5fc5\u8981\u306a\u60c5\u5831\u3092\u4ed8\u52a0\n        morph['yomi'] = '*'\n        morph['oto'] = '*'\n\n    return morph # \u5f97\u3089\u308c\u305f\u8f9e\u66f8\u578b\u30c7\u30fc\u30bf\u3092\u8fd4\u3059\n#\u4f8b\u3048\u3070\uff0c\u54c1\u8a5e\u60c5\u5831\u3092\u7528\u3044\u3066\uff0c\u7279\u5b9a\u306e\u54c1\u8a5e\u306b\u3064\u3044\u3066\u983b\u5ea6\u8868\u3092\u4f5c\u3063\u3066\u307f\u308b\nmorph_analysis('okurimono.txt', 'okurimono_m.txt') #\u5168\u4f53\u306e\u6d41\u308c\nmlines = get_m_lines('okurimono_m.txt')\nmorphs_dict = {}\nnoun_ha(mlines)\n\n\n\n\u3054\u52a9\u8a00\u30fb\u3054\u6307\u6458\u304a\u5f85\u3061\u3057\u3066\u307e\u3059\uff01\uff01\n\n## \u306f\u3058\u3081\u306b\nPython\u30fb\u30c6\u30ad\u30b9\u30c8\u30de\u30a4\u30cb\u30f3\u30b0\u521d\u5fc3\u8005\u6587\u7cfb\u5927\u5b66\u751f\u3067\u3059\u3002\n\u5352\u8ad6\u306e\u305f\u3081\u306b\u3001\u3042\u308b\u6587\u732e\u306b\u304a\u3051\u308b\u5358\u8a9e\u306e\u983b\u51fa\u5ea6\u306a\u3069\u3092\u8abf\u3079\u308b\u5fc5\u8981\u304c\u3042\u3063\u305f\u306e\u3067\u3001\u53d6\u308a\u7d44\u3093\u3067\u307f\u3088\u3046\u3068\u601d\u3044\u307e\u3059\u3002\n\n<img src=\"http://invest-s.jp/wp-content/uploads/2015/12/syunmao80_424641.jpg\">\n<small>\u753b\u50cf\u306f<a href =\"https://www.google.co.jp/url?sa=i&rct=j&q=&esrc=s&source=images&cd=&cad=rja&uact=8&ved=0ahUKEwj1j6rmgInOAhWGoJQKHRu_DqEQjRwIBw&url=http%3A%2F%2Finvest-s.jp%2F535.html&psig=AFQjCNE7IcNMP7p6Zy1jimNtyy0WK9Aq2Q&ust=1469343381627109\">\u3053\u3061\u3089</a>\u304b\u3089</small>\n\n\u4eca\u56de\u984c\u6750\u3068\u3059\u308b\u8ce2\u8005\u306e\u8d08\u308a\u7269\u306e\u30c6\u30ad\u30b9\u30c8\u306f\u7d50\u57ce\u6d69\u3055\u3093\u8a33\u3067[\u3053\u3061\u3089](http://www.hyuki.com/trans/magi.html)\u306b\u3042\u308a\u307e\u3059\u3002\n\u3053\u3061\u3089\u3092okurimono.txt\u3068\u3057\u3066\u3001\u30ed\u30fc\u30ab\u30eb\u306b\u4fdd\u5b58\u3002\n\n\u4eca\u56de\u306f\u3001\u300c\u8ce2\u8005\u306e\u8d08\u308a\u7269\u300d\u306e\u5f62\u614b\u7d20\u89e3\u6790\u7d50\u679c\u3092\u5206\u6790\u3057\u3066\uff0c\n<strong> \u4fc2\u52a9\u8a5e\u306e\u300c\u306f\u300d\u306e\u76f4\u524d\u306b\u73fe\u308c\u308b\u540d\u8a5e\u306e\u983b\u5ea6\u8868\u3092\u4f5c\u6210</strong>\u3057\u307e\u3059\uff01\n\uff08\u203b\u3000\u983b\u5ea6\u306e\u5927\u304d\u3044\u9806\u306b\u3001\u983b\u5ea6\u304c\uff11\u3088\u308a\u5927\u304d\u3044\u3082\u306e\u306e\u307f\u51fa\u529b\u3059\u308b\u3053\u3068\u306b\u3057\u307e\u3059\uff09\n\n\n## \u65b9\u91dd\n\n\n\u307e\u305a\u30c6\u30ad\u30b9\u30c8(infile) \u3092\u8aad\u307f\u8fbc\u3093\u3067\u3001MeCab\u3067\u5f62\u614b\u7d20\u89e3\u6790\u3092\u3057\u305f\u7d50\u679c\u3092\u65b0\u3057\u3044\u30d5\u30a1\u30a4\u30eb(outfile) \u306b\u66f8\u304d\u8fbc\u3080\u95a2\u6570\u3001morph_analysis(infile, outfile)\u3092\u3064\u304f\u308a\u307e\u3059\u3002\n\n```sample.py\n\ndef morph_analysis(infile, outfile) : # infile\u306e\u6587\u7ae0\u3092\u89e3\u6790\u3057\u3066\uff0c\u7d50\u679c\u3092outfile\u306b\u51fa\u529b\n    t = MeCab.Tagger(' '.join(sys.argv)) # \u5f62\u614b\u7d20\u89e3\u6790\u5668\u306e\u5909\u6570\uff08\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\uff09\u3092\u4f5c\u6210\n    fin = open(infile, 'r') # \u89e3\u6790\u5bfe\u8c61\u306e\u30d5\u30a1\u30a4\u30eb\u3092\u958b\u304f\n    fout = open(outfile, 'w') # \u89e3\u6790\u7d50\u679c\u3092\u66f8\u304d\u51fa\u3059\u30d5\u30a1\u30a4\u30eb\u3092\u958b\u304f\n    fout.write(t.parse(fin.read())) # \u8aad\u307f\u8fbc\u3093\u3067\u89e3\u6790\u3057\u3066\u66f8\u304d\u51fa\u3057\n    fin.close() # \u30d5\u30a1\u30a4\u30eb\u3092\u9589\u3058\u308b\n    fout.close()\n    return outfile\n    \n    \nmorph_analysis('okurimono.txt', 'okurimono_m.txt')\n    \n```\n\n\n\u3055\u3066\u3001\u3053\u306e\u95a2\u6570\u3092\u5b9f\u884c\u3057\u3066\u3001\u66f8\u304d\u8fbc\u307e\u308c\u305f okurimono_m.txt\u3092\u898b\u3066\u307f\u308b\u3068\u30fb\u30fb\u30fb\n\n\n![\u30b9\u30af\u30ea\u30fc\u30f3\u30b7\u30e7\u30c3\u30c8 2016-07-23 14.38.10.png](https://qiita-image-store.s3.amazonaws.com/0/67394/dfff5b1e-c60e-7cf2-d501-4ed031e66ba7.png \"\u30b9\u30af\u30ea\u30fc\u30f3\u30b7\u30e7\u30c3\u30c8 2016-07-23 14.38.10.png\")\n\n\u5f62\u614b\u7d20\u3055\u308c\u3066\u308b\u301c\u3002\n\n\u3053\u306e\u30d5\u30a1\u30a4\u30eb\u3092 get_m_lines\u3068\u3044\u3046\u95a2\u6570\u306b\u6e21\u3059\u3068\u30011\u5f62\u614b\u7d20\u3054\u3068\u306e\u30ea\u30b9\u30c8\u304c\u8fd4\u308b\u3088\u3046\u306b\u3057\u307e\u3059\u3002\n\n```sample.py\n\ndef get_m_lines(file) : # \u89e3\u6790\u7d50\u679c\u306e\u30d5\u30a1\u30a4\u30eb\u3092\u8aad\u307f\u8fbc\u3080\n    f = open(file, 'r') # \u89e3\u6790\u7d50\u679c\u306e\u30d5\u30a1\u30a4\u30eb\u3092\u958b\u304f\n    m_lines = f.read().split('\\n') # \u8aad\u307f\u8fbc\u3093\u3067\uff0c\u6539\u884c\u3067\u5206\u5272\n\n    # m_lines\u306e\u6700\u5f8c2\u3064\u306e\u8981\u7d20\u306fEOS\u3068\u7a7a\u767d\u306a\u306e\u3067\u30ab\u30c3\u30c8\u3057\u3066\u304a\u304f\n    m_lines.pop(-1)\n    m_lines.pop(-1)\n\n    f.close()\n    return m_lines # \u7d50\u679c\uff08\uff11\u5f62\u614b\u7d20\u6bce\u306e\u60c5\u5831\u306e\u30ea\u30b9\u30c8\uff09\u3092\u8fd4\u3059\n\n\nmlines = get_m_lines('okurimono_m.txt')\n\n```\n\n\n\u305d\u3057\u3066\u3001\u5f62\u614b\u7d20\u306e\u89e3\u6790\u7d50\u679c\u306f\u6587\u5b57\u5217\u3067\u308f\u304b\u308a\u306b\u304f\u3044\u306e\u3067\u3001\n\n\n\n```sample.txt\n\n\u306e  \u52a9\u8a5e,\u9023\u4f53\u5316,*,*,*,*,\u306e,\u30ce,\u30ce\n\n```\n\n  \nmecab_data(line) \u3068\u3044\u3046\u3001\u4e00\u3064\u306e\u5f62\u614b\u7d20\u3092\u5165\u308c\u3053\u3093\u3060\u3089\u3001\u4f7f\u3044\u3084\u3059\u3044\u8f9e\u66f8\u578b\u306b\u306a\u3063\u3066\u8fd4\u3063\u3066\u304f\u308b\u95a2\u6570\u3092\u4f5c\u308d\u3046\u3068\u601d\u3044\u307e\u3059\u3002\n\n\n```sample.py\n\ndef mecab_data(line) : # \u6587\u5b57\u5217\u3067\u3042\u308b\u89e3\u6790\u7d50\u679c\u3092\u4f7f\u3044\u3084\u3059\u3044\u5f62\uff08\u8f9e\u66f8\u578b\uff09\u306b\n    #print line #\u306e  \u52a9\u8a5e,\u9023\u4f53\u5316,*,*,*,*,\u306e,\u30ce,\u30ce\n    mkeys = ['pos', 'pos1', 'pos2', 'pos3', 'inf', 'form', 'base', 'yomi', 'oto'] # \u30ad\u30a3\u3092\u5b9a\u7fa9\n    morph = OrderedDict() # \u8f9e\u66f8\u578b\u30c7\u30fc\u30bf\u306e\u521d\u671f\u5316\u3002\u30ad\u30fc\u9806\u5e8f\u3092\u4fdd\u3064\u305f\u3081\u6a19\u6e96\u30e9\u30a4\u30d6\u30e9\u30ea\u304b\u3089OrderedDict\u3092\u30a4\u30f3\u30dd\u30fc\u30c8\u3057\u3066\u3044\u307e\u3059\u3002\n    data = line.rstrip('\\n').split('\\t') # \u6539\u884c\u30b3\u30fc\u30c9\u3092\u5916\u3057\u3066(?)\uff0c\u30bf\u30d6\u3067\uff08\u8868\u8a18\u3068\u305d\u306e\u4ed6\u306e\u60c5\u5831\u306b\uff09\u5206\u5272\n    morph['surface'] = data[0] # \u8868\u8a18\u3092\u3057\u307e\u3046\n    \n    #print data[0] #\u306a\n    #print data[1] #\u52a9\u52d5\u8a5e,*,*,*,\u7279\u6b8a\u30fb\u30c0,\u4f53\u8a00\u63a5\u7d9a,\u3060,\u30ca,\u30ca\n    \n    features = data[1].split(',') # \u305d\u306e\u4ed6\u306e\u60c5\u5831\u306f\u30ab\u30f3\u30de\u533a\u5207\u308a\u306a\u306e\u3067\uff0c\u30ab\u30f3\u30de\u3067\u5206\u5272 [\u52a9\u8a5e,\u9023\u4f53\u5316,*,*,*,*,\u306e,\u30ce,\u30ce]\n    for i in range(len(features)) : # \u5206\u5272\u3055\u308c\u305f\u305d\u308c\u305e\u308c\u306e\u60c5\u5831\u3092\n        morph[mkeys[i]] = features[i] # \u305d\u306e\u9806\u5e8f\u306b\u5f93\u3063\u3066\uff0c\u9069\u5207\u306a\u30ad\u30a3\u306e\u5024\u3068\u3059\u308b\n\n    if morph['base'] == '*' : # \u672a\u77e5\u8a9e\u306b\u3064\u3044\u3066\uff0c\u6271\u3044\u3084\u3059\u3044\u3088\u3046\u306b\u5fc5\u8981\u306a\u60c5\u5831\u3092\u4ed8\u52a0\n        morph['yomi'] = '*'\n        morph['oto'] = '*'\n\n    return morph # \u5f97\u3089\u308c\u305f\u8f9e\u66f8\u578b\u30c7\u30fc\u30bf\u3092\u8fd4\u3059\n    \n    \n\n\n\n\n```\n\n\u7d50\u679c\u3092\u898b\u3066\u307f\u308b\u3068\u3001\u826f\u3044\u611f\u3058\u3067\u3059\uff01\n\n```\n\n[('surface', '\u306f'), ('pos', '\u52a9\u8a5e'), ('pos1', '\u4fc2\u52a9\u8a5e'), ('pos2', '*'), ('pos3', '*'), ('inf', '*'), ('form', '*'), ('base', '\u306f'), ('yomi', '\u30cf'), ('oto', '\u30ef')]), ......\n```\n\n\n\u4e0b\u3054\u3057\u3089\u3048\u306f\u7d42\u308f\u3063\u305f\u306e\u3067\u3001\u5206\u6790\u306b\u5165\u308a\u307e\u3059\u3002\n\u5f62\u614b\u7d20\u3054\u3068\u306e\u30ea\u30b9\u30c8\u3092\u53d7\u3051\u53d6\u3063\u305f\u3089\u3001mecab_data\u95a2\u6570\u3092\u4f7f\u3063\u3066\u308f\u304b\u308a\u3084\u3059\u304f\u5f62\u614b\u7d20\u3054\u3068\u306b\u8f9e\u66f8\u306b\u3057\u3066\u3001morphs\u3068\u3044\u3046\u8f9e\u66f8\u3092\u4f5c\u308a\u3001\n\u3055\u3089\u306b\u305d\u306emorphs\u3092\u5206\u6790\u3057\u3066\u3001\u4fc2\u52a9\u8a5e\u306e\u300c\u306f\u300d\u306e\u76f4\u524d\u306b\u73fe\u308c\u308b\u540d\u8a5e\u3092\u63a2\u3057\u3001\u305d\u306e\u540d\u8a5e\u3092\u30ad\u30fc\u3001\u51fa\u73fe\u56de\u6570\u3092\u30d0\u30ea\u30e5\u30fc\u3068\u3059\u308b\u8f9e\u66f8(hist)\u3092\u4f5c\u3063\u3066\u3001\u305d\u308c\u3092\u308f\u304b\u308a\u3084\u3059\u304f\u51fa\u73fe\u56de\u6570\u306e\u9ad8\u3044\u9806\u306b\u4e26\u3073\u66ff\u3048\u305f\u8f9e\u66f8(tr_hist)\u3092\u4f5c\u308a\u3001\u8868\u793a\u3057\u3088\u3046\u3068\u601d\u3044\u307e\u3059\u3002\n\n\nnoun_ha\u3068\u3044\u3046\u95a2\u6570\u3092\u4f5c\u308a\u307e\u3059\u3002\n\n\n```sample.py\n\n\ndef noun_ha(mlines):\n    hist = dict() # \u30ad\u30fc\u306b\u540d\u8a5e\u3001\u5024\u306b\u983b\u5ea6\uff08\u6570\u5b57\uff09\u304c\u5165\u308b\u306e\u3092\u60f3\u5b9a\n    morphs = []\n    tr_hist = dict()\n\n    for line in mlines:\n        morphs.append(mecab_data(line)) #\u5f62\u614b\u7d20\u3092\uff11\u3064\u305a\u3064\u8f9e\u66f8\u578b\u306b\u5909\u63db\n\n    for i in range(len(morphs) -1): # i+1 \u304c\u300c\u306f\u300d\u306e\u6642\u3092\u60f3\u5b9a\u3057\u3066\u3044\u308b\u306e\u3067\u3001len -1\n        #\u3042\u308b\u5f62\u614b\u7d20\u306e\u8981\u7d20\u304c\u540d\u8a5e\u3067\u3001\u305d\u306e\u6b21\u306e\u8981\u7d20\u304c\u4fc2\u52a9\u8a5e\u3067\u3001\u304b\u3064\u4fc2\u52a9\u8a5e\u300c\u306f\u300d\u306e\u3068\u304d\n        if morphs[i]['pos'] == '\u540d\u8a5e' \\\n        and morphs[i+1]['pos1'] == '\u4fc2\u52a9\u8a5e' \\\n        and morphs[i+1]['surface'] == '\u306f':\n            key = morphs[i]['surface'] #\u305d\u306e\u540d\u8a5e\u3092\u30ad\u30fc\u3068\u3059\u308b\n            hist[key] = hist.get(key,0) + 1 #\u3082\u3057\u3001\u307e\u3060\u305d\u306ekey\u304c\u5b58\u5728\u3057\u306a\u304b\u3063\u305f\u3089(=\u521d\u3081\u3066\u51fa\u73fe\u3057\u305f\u3089),\u30c7\u30d5\u30a9\u30eb\u30c8\u5024\u30920\u3068\u8003\u3048\u30661\u3092\u8db3\u3059\u3002\n\n    for noun in hist: #\u30ad\u30fc\u3092\u53d6\u308a\u51fa\u3059\n        #hist\u306f\u983b\u51fa\u56de\u6570\u304c\u30d0\u30ea\u30e5\u30fc\u3060\u304c\u3001\n        #tr_hist \u306b\u3000\u983b\u51fa\u56de\u6570\u3092\u30ad\u30fc\u306b\u5909\u63db\u3057\u305f\u3082\u306e\u3092\u5165\u308c\u308b\u3002\u30d0\u30ea\u30e5\u30fc\u3092\u540d\u8a5e\u306e\u30ea\u30b9\u30c8\u306b\u3059\u308b\n        tr_hist[hist[noun]] = tr_hist.get(hist[noun],[])+[noun]\n\n    #print(tr_hist)\n    #{32: ['\u30c7\u30e9'], 1: ['\u547c\u3073\u9234', '\u53ce\u5165', '\u3053\u3053', '\u9055\u3044', '\u50d5', '\u8208\u596e', '\u3068\u304d', '\u6642\u8a08', '\u671b\u307f', '\u652f\u51fa', '\u7b54\u3048', '\u308f\u305f\u3057', '\u30c7\u30b6\u30a4\u30f3', '\u69d8\u5b50', '\u30d5\u30e9\u30a4\u30d1\u30f3', '\u30d7\u30ec\u30bc\u30f3\u30c8', '\u6587\u5b57', '\u4eba', '\u8272', '\u738b\u69d8', '\u9854', '\u8868\u73fe', '\u8a00\u660e', '\u305f\u3061', '\u5f7c', '\u6bd4\u55a9', '\u5149', '\u9aea\u306e\u6bdb', '\u30bb\u30c3\u30c8', '\u30bb\u30f3\u30c8', '\u5c0f\u92ad', '\u308f\u305f\u304f\u3057', '\u5f7c\u3089'], 2: ['\u660e\u65e5', '\u3053\u308c', '\u76ee', '\u9396', '\u8ce2\u8005', '\u5b9d\u7269', '\u306e', '\u4e00\u3064'], 3: ['\u3082\u306e', '\u3053\u3068', '\u305d\u308c', '\u4e3b\u4eba'], 4: ['\u9aea'], 13: ['\u30b8\u30e0']}\n\n    for i in sorted(tr_hist.keys(), reverse = True):\n        #\u898b\u3084\u3059\u304f\u540d\u8a5e\u3054\u3068\u306b\u51fa\u529b\u3001\u983b\u5ea6\u9ad8\u3044\u9806\u306b\n        if i > 1: #\u983b\u51fa\u56de\u6570\u304c2\u4ee5\u4e0a\u306a\u3089\n            for m in range(len(tr_hist[i])):\n            #\u540c\u3058\u51fa\u73fe\u56de\u6570\u306e\u540d\u8a5e\u3092\u5206\u3051\u3066\u8868\u793a\n            \tprint( tr_hist[i][m], i)\n\n\n\n\n```\n\n\u7d50\u679c\u306f\u3053\u3061\u3089\u3002\n\n\u826f\u3044\u611f\u3058\u306b\u983b\u5ea6\u8868\u304c\u3067\u304d\u307e\u3057\u305f\u301c\u301c\u301c\uff01\n\n\n![\u30b9\u30af\u30ea\u30fc\u30f3\u30b7\u30e7\u30c3\u30c8 2016-07-23 15.44.04.png](https://qiita-image-store.s3.amazonaws.com/0/67394/23cfc1df-4b56-5c0d-000a-9496a0fcd6e6.png \"\u30b9\u30af\u30ea\u30fc\u30f3\u30b7\u30e7\u30c3\u30c8 2016-07-23 15.44.04.png\")\n\n\n\n\n\n## \u5168\u6587\n\n\n\n```sample.py\n\n\n# -*- coding: utf-8 -*-\n\n#\u8ab2\u984c\n#\u300c\u8ce2\u8005\u306e\u8d08\u308a\u7269\u300d\u306e\u5f62\u614b\u7d20\u89e3\u6790\u7d50\u679c\u3092\u5206\u6790\u3057\u3066\uff0c\u4fc2\u52a9\u8a5e\u306e\u300c\u306f\u300d\u306e\u76f4\u524d\u306b\u73fe\u308c\u308b\u540d\u8a5e\u306e\u983b\u5ea6\u8868\u3092\u4f5c\u6210\n#\u305b\u3088\uff0e\u983b\u5ea6\u306e\u5927\u304d\u3044\u9806\u306b\u983b\u5ea6\u304c\uff11\u3088\u308a\u5927\u304d\u3044\u3082\u306e\u3060\u3051\u51fa\u529b\u305b\u3088\uff0e\n\nimport MeCab # \u5fc5\u8981\u306a\u30e2\u30b8\u30e5\u30fc\u30eb\u3092\u8aad\u307f\u8fbc\u307f\nimport sys\nimport string\nfrom collections import OrderedDict\n\n\ndef morph_analysis(infile, outfile) : # infile\u306e\u6587\u7ae0\u3092\u89e3\u6790\u3057\u3066\uff0c\u7d50\u679c\u3092outfile\u306b\u51fa\u529b\n    t = MeCab.Tagger(' '.join(sys.argv)) # \u5f62\u614b\u7d20\u89e3\u6790\u5668\u306e\u5909\u6570\uff08\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\uff09\u3092\u4f5c\u6210\n    fin = open(infile, 'r') # \u89e3\u6790\u5bfe\u8c61\u306e\u30d5\u30a1\u30a4\u30eb\u3092\u958b\u304f\n    fout = open(outfile, 'w') # \u89e3\u6790\u7d50\u679c\u3092\u66f8\u304d\u51fa\u3059\u30d5\u30a1\u30a4\u30eb\u3092\u958b\u304f\n    fout.write(t.parse(fin.read())) # \u8aad\u307f\u8fbc\u3093\u3067\u89e3\u6790\u3057\u3066\u66f8\u304d\u51fa\u3057\n    fin.close() # \u30d5\u30a1\u30a4\u30eb\u3092\u9589\u3058\u308b\n    fout.close()\n    return outfile\n\n#\u6ce8\u3000\u8aad\u307f\u8fbc\u3093\u3067\u89e3\u6790\u5668\u306b\u6e21\u3057\u7d50\u679c\u3092\u53d7\u3051\u53d6\u308a\u305d\u308c\u3092\u66f8\u304d\u51fa\u3059\u307e\u3067\uff0c\u3059\u3079\u3066utf-8\u306e\u6587\u5b57\u5217\u3067\u884c\u3063\u3066\u3044\u308b\n\ndef get_m_lines(file) : # \u89e3\u6790\u7d50\u679c\u306e\u30d5\u30a1\u30a4\u30eb\u3092\u8aad\u307f\u8fbc\u3080\n    f = open(file, 'r') # \u89e3\u6790\u7d50\u679c\u306e\u30d5\u30a1\u30a4\u30eb\u3092\u958b\u304f\n    m_lines = f.read().split('\\n') # \u8aad\u307f\u8fbc\u3093\u3067\uff0c\u6539\u884c\u3067\u5206\u5272\n\n    # m_lines\u306e\u6700\u5f8c2\u3064\u306e\u8981\u7d20\u306fEOS\u3068\u7a7a\u767d\u306a\u306e\u3067\u30ab\u30c3\u30c8\u3057\u3066\u304a\u304f\n    m_lines.pop(-1)\n    m_lines.pop(-1)\n\n    f.close()\n    return m_lines # \u7d50\u679c\uff08\uff11\u5f62\u614b\u7d20\u6bce\u306e\u60c5\u5831\u306e\u30ea\u30b9\u30c8\uff09\u3092\u8fd4\u3059\n    \ndef noun_ha(mlines):\n    hist = dict() # \u30ad\u30fc\u306b\u540d\u8a5e\u3001\u5024\u306b\u983b\u5ea6\uff08\u6570\u5b57\uff09\u304c\u5165\u308b\u306e\u3092\u60f3\u5b9a\n    morphs = []\n    tr_hist = dict()\n\n    for line in mlines:\n        morphs.append(mecab_data(line)) #\u5f62\u614b\u7d20\u3092\uff11\u3064\u305a\u3064\u8f9e\u66f8\u578b\u306b\u5909\u63db\n\n    for i in range(len(morphs) -1): # i+1 \u304c\u300c\u306f\u300d\u306e\u6642\u3092\u60f3\u5b9a\u3057\u3066\u3044\u308b\u306e\u3067\u3001len -1\n        #\u3042\u308b\u5f62\u614b\u7d20\u306e\u8981\u7d20\u304c\u540d\u8a5e\u3067\u3001\u305d\u306e\u6b21\u306e\u8981\u7d20\u304c\u4fc2\u52a9\u8a5e\u3067\u3001\u304b\u3064\u4fc2\u52a9\u8a5e\u300c\u306f\u300d\u306e\u3068\u304d\n        if morphs[i]['pos'] == '\u540d\u8a5e' \\\n        and morphs[i+1]['pos1'] == '\u4fc2\u52a9\u8a5e' \\\n        and morphs[i+1]['surface'] == '\u306f':\n            key = morphs[i]['surface'] #\u305d\u306e\u540d\u8a5e\u3092\u30ad\u30fc\u3068\u3059\u308b\n            hist[key] = hist.get(key,0) + 1 #\u3082\u3057\u3001\u307e\u3060\u305d\u306ekey\u304c\u5b58\u5728\u3057\u306a\u304b\u3063\u305f\u3089(=\u521d\u3081\u3066\u51fa\u73fe\u3057\u305f\u3089),\u30c7\u30d5\u30a9\u30eb\u30c8\u5024\u30920\u3068\u8003\u3048\u30661\u3092\u8db3\u3059\u3002\n\n    for noun in hist: #\u30ad\u30fc\u3092\u53d6\u308a\u51fa\u3059\n        #hist\u306f\u983b\u51fa\u56de\u6570\u304c\u30d0\u30ea\u30e5\u30fc\u3060\u304c\u3001\n        #tr_hist \u306b\u3000\u983b\u51fa\u56de\u6570\u3092\u30ad\u30fc\u306b\u5909\u63db\u3057\u305f\u3082\u306e\u3092\u5165\u308c\u308b\u3002\u30d0\u30ea\u30e5\u30fc\u3092\u540d\u8a5e\u306e\u30ea\u30b9\u30c8\u306b\u3059\u308b\n        tr_hist[hist[noun]] = tr_hist.get(hist[noun],[])+[noun]\n\n    #print(tr_hist)\n    #{32: ['\u30c7\u30e9'], 1: ['\u547c\u3073\u9234', '\u53ce\u5165', '\u3053\u3053', '\u9055\u3044', '\u50d5', '\u8208\u596e', '\u3068\u304d', '\u6642\u8a08', '\u671b\u307f', '\u652f\u51fa', '\u7b54\u3048', '\u308f\u305f\u3057', '\u30c7\u30b6\u30a4\u30f3', '\u69d8\u5b50', '\u30d5\u30e9\u30a4\u30d1\u30f3', '\u30d7\u30ec\u30bc\u30f3\u30c8', '\u6587\u5b57', '\u4eba', '\u8272', '\u738b\u69d8', '\u9854', '\u8868\u73fe', '\u8a00\u660e', '\u305f\u3061', '\u5f7c', '\u6bd4\u55a9', '\u5149', '\u9aea\u306e\u6bdb', '\u30bb\u30c3\u30c8', '\u30bb\u30f3\u30c8', '\u5c0f\u92ad', '\u308f\u305f\u304f\u3057', '\u5f7c\u3089'], 2: ['\u660e\u65e5', '\u3053\u308c', '\u76ee', '\u9396', '\u8ce2\u8005', '\u5b9d\u7269', '\u306e', '\u4e00\u3064'], 3: ['\u3082\u306e', '\u3053\u3068', '\u305d\u308c', '\u4e3b\u4eba'], 4: ['\u9aea'], 13: ['\u30b8\u30e0']}\n\n    for i in sorted(tr_hist.keys(), reverse = True):\n        #\u898b\u3084\u3059\u304f\u540d\u8a5e\u3054\u3068\u306b\u51fa\u529b\u3001\u983b\u5ea6\u9ad8\u3044\u9806\u306b\n        if i > 1: #\u983b\u51fa\u56de\u6570\u304c2\u4ee5\u4e0a\u306a\u3089\n            for m in range(len(tr_hist[i])):\n            #\u540c\u3058\u51fa\u73fe\u56de\u6570\u306e\u540d\u8a5e\u3092\u5206\u3051\u3066\u8868\u793a\n            print( tr_hist[i][m], i)\n\n\ndef mecab_data(line) : # \u6587\u5b57\u5217\u3067\u3042\u308b\u89e3\u6790\u7d50\u679c\u3092\u4f7f\u3044\u3084\u3059\u3044\u5f62\uff08\u8f9e\u66f8\u578b\uff09\u306b\n    #print line #\u306e  \u52a9\u8a5e,\u9023\u4f53\u5316,*,*,*,*,\u306e,\u30ce,\u30ce\n    mkeys = ['pos', 'pos1', 'pos2', 'pos3', 'inf', 'form', 'base', 'yomi', 'oto'] # \u30ad\u30a3\u3092\u5b9a\u7fa9\n    morph = OrderedDict() # \u8f9e\u66f8\u578b\u30c7\u30fc\u30bf\u306e\u521d\u671f\u5316\n    data = line.split('\\t') # \u6539\u884c\u30b3\u30fc\u30c9\u3092\u5916\u3057\u3066(?)\uff0c\u30bf\u30d6\u3067\uff08\u8868\u8a18\u3068\u305d\u306e\u4ed6\u306e\u60c5\u5831\u306b\uff09\u5206\u5272\n    #\u306e \u52a9\u8a5e,\u9023\u4f53\u5316,*,*,*,*,\u306e,\u30ce,\u30ce \u304c\u3001\u300c\u306e\u300d\u3068\u300c\u52a9\u8a5e,\u9023\u4f53\u5316,*,*,*,*,\u306e,\u30ce,\u30ce\u300d\u306b\u5206\u5272\u3055\u308c\u308b\n    morph['surface'] = data[0] # \u8868\u8a18\u3092\u3057\u307e\u3046\n    #print \"====================\"\n    #print data[0] #\u306a\n    #print data[1] #\u52a9\u52d5\u8a5e,*,*,*,\u7279\u6b8a\u30fb\u30c0,\u4f53\u8a00\u63a5\u7d9a,\u3060,\u30ca,\u30ca\n    #print \"====================\"\n    features = data[1].split(',') # \u305d\u306e\u4ed6\u306e\u60c5\u5831\u306f\u30ab\u30f3\u30de\u533a\u5207\u308a\u306a\u306e\u3067\uff0c\u30ab\u30f3\u30de\u3067\u5206\u5272 [\u52a9\u8a5e,\u9023\u4f53\u5316,*,*,*,*,\u306e,\u30ce,\u30ce]\n    for i in range(len(features)) : # \u5206\u5272\u3055\u308c\u305f\u305d\u308c\u305e\u308c\u306e\u60c5\u5831\u3092\n        morph[mkeys[i]] = features[i] # \u305d\u306e\u9806\u5e8f\u306b\u5f93\u3063\u3066\uff0c\u9069\u5207\u306a\u30ad\u30a3\u306e\u5024\u3068\u3059\u308b\n\n    if morph['base'] == '*' : # \u672a\u77e5\u8a9e\u306b\u3064\u3044\u3066\uff0c\u6271\u3044\u3084\u3059\u3044\u3088\u3046\u306b\u5fc5\u8981\u306a\u60c5\u5831\u3092\u4ed8\u52a0\n        morph['yomi'] = '*'\n        morph['oto'] = '*'\n\n    return morph # \u5f97\u3089\u308c\u305f\u8f9e\u66f8\u578b\u30c7\u30fc\u30bf\u3092\u8fd4\u3059\n#\u4f8b\u3048\u3070\uff0c\u54c1\u8a5e\u60c5\u5831\u3092\u7528\u3044\u3066\uff0c\u7279\u5b9a\u306e\u54c1\u8a5e\u306b\u3064\u3044\u3066\u983b\u5ea6\u8868\u3092\u4f5c\u3063\u3066\u307f\u308b\nmorph_analysis('okurimono.txt', 'okurimono_m.txt') #\u5168\u4f53\u306e\u6d41\u308c\nmlines = get_m_lines('okurimono_m.txt')\nmorphs_dict = {}\nnoun_ha(mlines)\n\n```\n\n\n\u3054\u52a9\u8a00\u30fb\u3054\u6307\u6458\u304a\u5f85\u3061\u3057\u3066\u307e\u3059\uff01\uff01\n\n\n", "tags": ["mecab", "\u30c6\u30ad\u30b9\u30c8\u30de\u30a4\u30cb\u30f3\u30b0", "pythn3", "Pyhton"]}