{"context": " More than 1 year has passed since last update.\n\n\u30a2\u30c9\u30d9\u30f3\u30c8\u30ab\u30ec\u30f3\u30c0\u30fc\n7\u65e5\u76ee\u306e\u8a18\u4e8b\u306f fetburner \u3055\u3093\u306e \u5358\u4e00\u5316\u306e\u8a3c\u660e \u3067\u3057\u305f\u3002\n\n\u307e\u3068\u3081\n\n\u4f9d\u5b58\u578b\u3068\u578b\u30af\u30e9\u30b9\u3068 Notation \u3092\u4f7f\u3063\u3066\u3001\u8a08\u7b97\u7d50\u679c\u304c\u5408\u308f\u306a\u3044\u3068\u304d\u306b\u578b\u30a8\u30e9\u30fc\u3092\u5f15\u304d\u8d77\u3053\u3059\u4ed5\u7d44\u307f\u3092\u4f5c\u3063\u305f\u3002\n\u8a3c\u660e\u3068\u9055\u3044\u3001\u5177\u4f53\u7684\u306a\u8a08\u7b97\u306e\u30c1\u30a7\u30c3\u30af\u3002\n\u771f\u7406\u5024\u8868\u306e\u78ba\u8a8d\u3068\u304b\u6570\u5024\u8a08\u7b97\u306b\u4fbf\u5229\u3001\u304b\u3082\u3002\n\nProof. now idtac. Qed. \u3063\u3066\u4e00\u3005\u66f8\u304d\u305f\u304f\u306a\u3044\u3057 Unnamed_thm \u3068\u304b\u3044\u3089\u3093\u3001\u3068\u3044\u3046\u4eba\u5411\u3051\u3002\n\u30b9\u30af\u30ea\u30d7\u30c8\u5168\u4f53\u306f \u3053\u3053\u3002\n\u30bf\u30a4\u30c8\u30eb\u306f\u8003\u3048\u308b\u306e\u304c\u9762\u5012\u3067\u3057\u305f\u3002\n\n\n\u5fc5\u8981\u306a\u9053\u5177\u3092\u4f5c\u308b\u3002\n\n\u3068\u308a\u3042\u3048\u305a\u5fc5\u8981\u306a\u3082\u306e\n\n\nTrue_or_Eq :: \u6c7a\u5b9a\u53ef\u80fd\u306a\u547d\u984c\u306e\u7d50\u679c\u306b\u5fdc\u3058\u3066\u578b\u304c\u5909\u308f\u308b\u4f9d\u5b58\u578b\n\nI_or_0eq0 :: \u305d\u306e\u7d50\u679c\u306b\u5fdc\u3058\u3066\u5909\u308f\u308b\u578b\u306e\u5024\u3092\u8fd4\u3059\u51fd\u6570\n\nonlyTrue :: \u305d\u306e\u4e00\u65b9\u306e\u578b\u3060\u3051\u3092\u53d7\u3051\u4ed8\u3051\u308b\u51fd\u6570\n\nSet Implicit Arguments.\nUnset Strict Implicit.\n\nDefinition True_or_Eq (P: Prop)(dec: {P}+{~P}): Prop := if dec then True else 0 = 0.\nDefinition I_or_0eq0 (P: Prop)(dec: {P}+{~P}): True_or_Eq dec :=\n  if dec as dec' return True_or_Eq dec' then I else eq_refl 0.\nDefinition onlyTrue (H: True): True := H.\n\n\u3053\u308c\u3089\u3092\u4f7f\u3046\u3068\u3001(\u6c7a\u5b9a\u53ef\u80fd\u306a)\u547d\u984c\u306e\u6210\u7acb\u3059\u308b\u6642\u306e\u307f\u3001 I_or_0eq0 \u306b onlyTrue \u3092\u9069\u7528\u3067\u304d\u308b\u3053\u3068\u306b\u306a\u308a\u307e\u3059\u3002\n\u5f53\u7136\u3001\u73fe\u6642\u70b9\u3067\u306f\u9069\u7528\u3059\u308b\u3068\u305d\u3082\u305d\u3082\u578b\u30a8\u30e9\u30fc\u306b\u306a\u308b\u306e\u3067\u3059\u304c\u3001 \u3053\u308c\u306f Notation \u3068\u7d44\u307f\u5408\u308f\u305b\u308b\u3053\u3068\u3067\u52b9\u679c\u3092\u767a\u63ee\u3057\u307e\u3059\u3002\n\u4ee5\u964d\u3067\u306f\u6c7a\u5b9a\u53ef\u80fd\u306a\u7b49\u4fa1\u6027\u3092\u4f7f\u3044\u3001\u4ee5\u4e0a\u306e\u9053\u5177\u306e\u4f7f\u3044\u65b9\u3092\u898b\u3066\u3044\u304d\u307e\u3059\u3002\n\neq \u304c\u6c7a\u5b9a\u53ef\u80fd\u306a\u578b\u306e\u305f\u3081\u306e\u691c\u67fb\u6a5f\u69cb\n\u578b\u30af\u30e9\u30b9 dec_Type \u306f\u3001\u578b\u3068\u305d\u306e\u4e0a\u306e\u7b49\u4fa1\u6027\u306e\u6c7a\u5b9a\u624b\u7d9a\u304d\u3068\u3092\u7e8f\u3081\u305f\u3082\u306e\u3067\u3059\u3002\n\u578b A \u304b\u3089 dec_Type \u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u4f5c\u3063\u3066\u304a\u304f\u3068\u3001 dec_Type \u306e\u5b58\u5728\u3092\u610f\u8b58\u305b\u305a\u3068\u3082\u3001\u578b\u30af\u30e9\u30b9\u306e\u4ed5\u7d44\u307f\u306b\u3088\u3063\u3066\u5fc5\u8981\u306a\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u63a8\u8ad6\u3057\u3066\u304f\u308c\u307e\u3059\u3002\n\u307e\u305f\u3001 Coercion \u3092\u4f7f\u3046\u3053\u3068\u3067 X: dec_Type \u306b\u3064\u3044\u3066 x: X \u3068\u3044\u3046\u8a18\u8ff0\u304c\u51fa\u6765\u308b\u3088\u3046\u306b\u3057\u3066\u3042\u308a\u307e\u3059\u3002\nClass dec_Type :=\n  {\n    carrier: Type;\n    decider: forall (x y: carrier), {x = y} + {~x = y}\n  }.\nCoercion carrier: dec_Type >-> Sortclass.\n\n\u305d\u3057\u3066\u3001\u4e0a\u3067\u5b9a\u7fa9\u3057\u305f\u578b\u30af\u30e9\u30b9\u3092\u4f7f\u3044\u3001\u51fd\u6570 check_eq \u3092\u5b9a\u7fa9\u3057\u307e\u3059\u3002\nDefinition check_eq {X: dec_Type}(x y: X) := I_or_0eq0 (decider x y).\n\ndec_Type \u306f\u305d\u306e\u30d5\u30a3\u30fc\u30eb\u30c9\u306b\u7b49\u4fa1\u6027\u306e\u6c7a\u5b9a\u624b\u7d9a\u304d decider \u3092\u6301\u3063\u3066\u3044\u307e\u3057\u305f\u3002\u3086\u3048\u306b decider x y \u306f\u6c7a\u5b9a\u53ef\u80fd\u3067\u3059\u3002\n\u5148\u306b\u5b9a\u7fa9\u3057\u305f I_or_0eq0 \u3092\u9069\u7528\u3059\u308c\u3070\u3001\u3053\u308c\u306f\u3000x \u3068 y \u304c\u7b49\u3057\u3051\u308c\u3070 True \u306e\u3001\u7b49\u3057\u304f\u306a\u3051\u308c\u3070 0 = 0 \u306e\u8a3c\u660e\u3092\u8fd4\u3059\u9805\u3068\u306a\u308a\u307e\u3059\u3002\n\u3053\u3053\u3067 Notation \u306e\u6a5f\u80fd\u3092\u4f7f\u3063\u3066\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u8a18\u6cd5\u3092\u5b9a\u7fa9\u3057\u307e\u3059\u3002\nNotation \u306f\u3042\u304f\u307e\u3067\u8a18\u6cd5\u3092\u5b9a\u7fa9\u3059\u308b\u306e\u3067\u3042\u3063\u3066\u3001\u9805\u3092\u4f5c\u308b\u308f\u3051\u3067\u306f\u3042\u308a\u307e\u305b\u3093\u304b\u3089\u3001\u578b\u691c\u67fb\u306a\u3069\u3082\u884c\u306a\u3044\u307e\u305b\u3093\u3002\nNotation ok x y := (onlyTrue (check_eq x y)).\n\n\u3057\u304b\u3057\u3001\u3053\u306e\u8a18\u6cd5\u3092\u5b9f\u969b\u306b\u4f7f\u3046\u30bf\u30a4\u30df\u30f3\u30b0\u306b\u306a\u308b\u3068\u3001 := \u306e\u53f3\u5074\u306b\u66f8\u304b\u308c\u305f\u901a\u308a\u306e\u9805\u304c\u4f5c\u3089\u308c\u308b\u3053\u3068\u306b\u306a\u308a\u307e\u3059\u3002\n\u305d\u306e\u6bb5\u968e\u3067 check_eq x y \u306e\u578b\u304c True \u304b\u5426\u304b\u306b\u3088\u3063\u3066 onlyTrue \u304c\u9069\u7528\u3067\u304d\u308b\u304b\u5426\u304b\u304c\u6c7a\u307e\u308a\u3001\u3082\u3057\u3082 x \u3068 y \u306e\u5024\u304c\u7570\u306a\u308c\u3070\u578b\u30a8\u30e9\u30fc\u304c\u8d77\u304d\u3001\u8a08\u7b97\u305d\u306e\u3082\u306e\u304b\u3001\u3042\u308b\u3044\u306f\u8a08\u7b97\u7d50\u679c\u306e\u9593\u9055\u3044\u3092\u691c\u51fa\u3067\u304d\u308b\u3053\u3068\u306b\u306a\u308a\u307e\u3059\u3002\nCheck \u3084 Compute \u306a\u3069\u3001\u9805\u3092\u89e6\u308b\u30b3\u30de\u30f3\u30c9\u306b\u98df\u308f\u305b\u308c\u3070\u578b\u691c\u67fb\u304c\u884c\u306a\u308f\u308c\u308b\u306e\u3067\u3001\u305d\u306e\u6642\u306b\u5024\u304c\u7b49\u3057\u3044\u304b\u3069\u3046\u304b\u306e\u30c1\u30a7\u30c3\u30af\u304c\u3067\u304d\u308b\u3053\u3068\u306b\u3082\u306a\u308b\u308f\u3051\u3067\u3059\u3002\n\u4ee5\u964d\u3067\u306f\u3001\u3053\u306e\u4ed5\u7d44\u307f\u3092\u5b9f\u969b\u306b\u4f7f\u3063\u3066\u307f\u307e\u3059\u3002\n\u306a\u3093\u3060\u304b\u3084\u3084\u3053\u3057\u3044\u8aac\u660e\u306b\u306a\u308a\u307e\u3057\u305f\u304c\u3001\u4f7f\u3063\u3066\u307f\u308c\u3070\u3069\u3046\u3044\u3046\u3053\u3068\u304b\u306f\u3059\u3050\u306b\u308f\u304b\u308b\u3068\u601d\u3044\u307e\u3059\u3002\n\n\u30d6\u30fc\u30eb\u51fd\u6570\u3067\u8a66\u3059\nbool \u578b\u304b\u3089 dec_Type \u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u4f5c\u3063\u3066\u304a\u304d\u307e\u3059\u3002\nRequire Import Bool.\n\nInstance dec_bool: dec_Type :=\n  {\n    decider := bool_dec\n  }.\n\n\u3064\u3044\u3067\u306b\u3001\u8a18\u8ff0\u3092\u7c21\u5358\u306b\u3059\u308b\u305f\u3081\u306b true \u3068 false \u3092\u305d\u308c\u305e\u308c 1,0 \u3067\u8868\u73fe\u3067\u304d\u308b\u3088\u3046\u306b\u3082\u3057\u3066\u304a\u304d\u307e\u3059\u3002\n\u30b0\u30ed\u30fc\u30d0\u30eb\u306b\u3057\u3066\u3057\u307e\u3046\u3068\u9762\u5012\u306a\u306e\u3067\u3001 bool_scope \u306e\u4e2d\u306b\u7559\u3081\u3066\u304a\u304d\u307e\u3057\u3087\u3046\u3002\nNotation \"1\" := true: bool_scope.\nNotation \"0\" := false: bool_scope.\n\nOpen Scope bool_scope.\n\n\nNAND \u304b\u3089\u59cb\u3081\u3066\u5168\u90e8\u4f5c\u308b\u3084\u3064\n\u4ee5\u964d\u3067\u306f\u57fa\u672c\u7684\u306a\u30d6\u30fc\u30eb\u51fd\u6570\u3068\u305d\u306e\u771f\u7406\u5024\u8868(\u306b\u5bfe\u5fdc\u3057\u305f\u691c\u67fb)\u3092\u8a18\u8ff0\u3057\u3066\u3044\u307e\u3059\u3002\nBool \u306b\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u308b\u3082\u306e\u3082\u5bb9\u8d66\u306a\u304f\u4e0a\u66f8\u304d\u3067\u3059\u3002\nNAND \u304b\u3089\u59cb\u3081\u3066\n\nAND\nNOT\nOR\nXOR\nMUX\n\n\u3092\u4f5c\u3063\u3066\u3044\u304f\u3084\u3064\u3067\u3059\u3002\n\u5b9a\u7fa9\u306e\u4e0b\u306b\u771f\u7406\u5024\u8868\u3092\u8a18\u8ff0\u3057\u3066\u3044\u308b\u306e\u3067\u3001\u3053\u308c\u3089\u306e Check \u3067\u578b\u30a8\u30e9\u30fc\u304c\u8d77\u304d\u306a\u3044\u3068\u3044\u3046\u3053\u3068\u306f\u51fd\u6570\u304c\u6b63\u3057\u304f\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u308b\u3053\u3068\u306b\u306a\u308a\u307e\u3059\u3002\n\nNAND\nDefinition nand (x y: bool): bool :=\n  match x, y with\n  | 1,1 => 0\n  | _,_ => 1\n  end.\nNotation \"x 'NAND' y\" := (nand x y) (at level 50, left associativity): bool_scope.\n\nCheck ok (0 NAND 0) 1.\nCheck ok (1 NAND 0) 1.\nCheck ok (0 NAND 1) 1.\nCheck ok (1 NAND 1) 0.\n\n\nAND\nDefinition and (x y: bool) := let b := (x NAND y) in b NAND b.\nNotation \"x 'AND' y\" := (and x y) (at level 40, left associativity): bool_scope.\nNotation \"x * y\" := (x AND y) (at level 40, left associativity): bool_scope.\n\nCheck ok (0 AND 0) 0.\nCheck ok (1 AND 0) 0.\nCheck ok (0 AND 1) 0.\nCheck ok (1 AND 1) 1.\n\n\nNOT\nDefinition not (x: bool): bool := x NAND x.\nNotation \"'NOT' x\" := (not x) (at level 35, right associativity): bool_scope.\nNotation \"! x\" := (not x) (at level 35, right associativity): bool_scope.\n\nCheck ok (NOT 0) 1.\nCheck ok (NOT 1) 0.\n\n\nOR\nDefinition or (x y: bool) := !(!x * !y).\nNotation \"x 'OR' y\" := (or x y) (at level 50, left associativity): bool_scope.\nNotation \"x + y\" := (x OR y) (at level 50, left associativity): bool_scope.\n\nCheck ok (0 OR 0) 0.\nCheck ok (1 OR 0) 1.\nCheck ok (0 OR 1) 1.\nCheck ok (1 OR 1) 1.\n\n\nXOR\nDefinition xor (x y: bool): bool := (x + y) * (x NAND y).\nNotation \"x 'XOR' y\" := (xor x y) (at level 55, left associativity): bool_scope.\n\nCheck ok (0 XOR 0) 0.\nCheck ok (1 XOR 0) 1.\nCheck ok (0 XOR 1) 1.\nCheck ok (1 XOR 1) 0.\n\n\nMUX\nDefinition mux (x y sel: bool): bool := (!sel * x) + (sel * y).\n\nCheck ok (mux 0 0 0) 0.\nCheck ok (mux 0 0 1) 0.\nCheck ok (mux 0 1 0) 0.\nCheck ok (mux 0 1 1) 1.\nCheck ok (mux 1 0 0) 1.\nCheck ok (mux 1 0 1) 0.\nCheck ok (mux 1 1 0) 1.\nCheck ok (mux 1 1 1) 1.\n\n\n\u5931\u6557\u3059\u308b\u4f8b\n\u6210\u529f\u3059\u308b\u4f8b\u3060\u3051\u898b\u3066\u3066\u3082\u3064\u307e\u3089\u3093\u306e\u3067\u3001\u5931\u6557\u3059\u308b\u4f8b\u3082\u898b\u3066\u307f\u307e\u3057\u3087\u3046\u3002\n\u305f\u3068\u3048\u3070\u3001\u30de\u30eb\u30c1\u30d7\u30ec\u30af\u30b5(MUX)\u306e\u5b9a\u7fa9\u3092\u6b21\u306e\u3088\u3046\u306b\u5c11\u3057\u9593\u9055\u3048\u3066\u3057\u307e\u3063\u305f\u3068\u3057\u307e\u3057\u3087\u3046\u3002\ny \u3068 AND \u3092\u53d6\u308b\u306e\u306f sel \u306e\u306f\u305a\u3067\u3059\u304c\u3001\u3053\u3053\u3067\u306f !sel \u306b\u306a\u3063\u3066\u3057\u307e\u3063\u3066\u3044\u307e\u3059\u306d\u3002\nDefinition mux' (x y sel: bool): bool := (!sel * x) + (!sel * y).\n\n\u3059\u308b\u3068\u3001\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u8868\u306e\u4e09\u884c\u3081\u306e\u691c\u67fb\u304c\u5931\u6557\u3057\u307e\u3059\u3002\nCheck ok (mux' 0 0 0) 0.\nCheck ok (mux' 0 0 1) 0.\nFail Check ok (mux' 0 1 0) 0.\n(* The command has indeed failed with message: *)\n(* => Error: The term \"check_eq (mux' 0 1 0) 0\" has type *)\n(*     \"True_or_Eq (decider (mux' 0 1 0) 0)\" while it is expected to have type *)\n(*     \"True\". *)\n\n\u8a08\u7b97\u7d50\u679c\u304c\u7570\u306a\u308b\u3068 onlyTrue \u306b\u4e0e\u3048\u3089\u308c\u308b\u9805\u306e\u578b\u304c 0 = 0 \u306b\u306a\u308a\u578b\u30a8\u30e9\u30fc\u304c\u8d77\u304d\u308b\u304b\u3089\u3067\u3059\u3002\nCompute \u3067\u76ee\u8996\u306e\u5024\u30c1\u30a7\u30c3\u30af\u3092\u3059\u308b\u3088\u308a\u306f\u30df\u30b9\u3092\u691c\u51fa\u3057\u3084\u3059\u3044\u3067\u3059\u306d\u3002\n\u8a08\u7b97\u7d50\u679c\u304c\u3069\u3046\u306a\u3063\u305f\u306e\u304b\u3001\u306f\u5b9f\u969b\u306b Compute \u3057\u3066\u78ba\u304b\u3081\u3066\u4e0b\u3055\u3044\u3002\n\u30a8\u30e9\u30fc\u30e1\u30c3\u30bb\u30fc\u30b8\u3067\u51fa\u3066\u304f\u308c\u308a\u3083\u3044\u3044\u306e\u306b\u306a\u3041\u3002\n\nnat \u3067\u8a66\u3059\n\u30d6\u30fc\u30eb\u5024\u3060\u3051\u3067\u306f\u7269\u8db3\u308a\u306a\u3044\u306e\u3067\u3001\u6570\u5024\u8a08\u7b97\u3082\u3057\u3066\u307f\u307e\u3059\u3002\n\u307e\u305a\u306f nat \u304b\u3089 dec_Type \u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u4f5c\u308a\u307e\u3059\u3002\nRequire Import Arith.\nOpen Scope nat_scope.\n\nInstance dec_nat: dec_Type :=\n  {\n    decider := eq_nat_dec\n  }.\n\n\u691c\u67fb\u5bfe\u8c61\u3068\u3057\u3066\u306a\u3093\u304b\u3088\u304f\u308f\u304b\u3089\u306a\u3044\u51fd\u6570\u3092\u5b9a\u7fa9\u3057\u3066\u307f\u307e\u3059\u3002\u4e0a\u304c\u3063\u305f\u308a\u4e0b\u304c\u3063\u305f\u308a\u3002\nFixpoint evenb (n: nat) :=\n  match n with\n  | O => true\n  | S n' => negb (evenb n')\n  end.\n\nDefinition updown (n: nat): nat :=\n  match n with\n  | O => S O\n  | S n' => if evenb n' then n' else S n\n  end.\n\nupdown \u306f\u5f15\u6570\u304c\u5076\u6570\u306e\u6642\u306b +1 \u3001\u5947\u6570\u306e\u6642\u306b -1 \u3092\u3059\u308b\u51fd\u6570\u3067\u3059\u3002\n\u4eca\u56de\u306f\u4ed5\u69d8\u304c\u5358\u7d14\u306a\u306e\u3067\u8a3c\u660e\u3082\u3042\u3063\u3055\u308a\u3057\u3066\u3044\u307e\u3059\u304c\u3001\u3068\u308a\u3042\u3048\u305a\u8a08\u7b97\u7d50\u679c\u306e\u6b63\u3057\u3055\u3092\u5e7e\u3064\u304b\u306e\u4f8b\u3067\u691c\u67fb\u3057\u3066\u307f\u307e\u3059\u3002\n\u4e09\u3064\u3081\u306b\u9593\u9055\u3063\u305f\u8a08\u7b97\u7d50\u679c\u3092\u66f8\u3044\u305f\u306e\u3067\u3001\u305d\u3053\u3067\u3061\u3083\u3093\u3068\u578b\u30a8\u30e9\u30fc\u304c\u8d77\u304d\u3001\u305d\u308c\u4ee5\u5916\u306f\u6b63\u3057\u304f\u691c\u67fb\u3055\u308c\u3066\u3044\u308b\u306e\u304c\u308f\u304b\u308b\u3068\u601d\u3044\u307e\u3059\u3002\nCheck ok (updown 0) 1.\nCheck ok (updown 1) 0.\nFail Check ok (updown 2) 1.\n(* The command has indeed failed with message: *)\n(* => Error: The term \"check_eq (updown 2) 1\" has type *)\n(*     \"True_or_Eq (decider (updown 2) 1)\" while it is expected to have type *)\n(*     \"True\". *)\nCheck ok (updown 2) 3.\nCheck ok (updown 3) 2.\nCheck ok (updown 4) 5.\n\nupdown \u306f\u5358\u7d14\u306a\u51fd\u6570\u3067\u3059\u304c\u3001\u3082\u3063\u3068\u8fbc\u307f\u5165\u3063\u305f\u8a08\u7b97\u3092\u3059\u308b\u51fd\u6570\u3092\u76f8\u624b\u53d6\u308b\u3068\u304d\u306f\u3053\u3046\u3044\u3046\u691c\u67fb\u304c\u7c21\u5358\u306b\u51fa\u6765\u308b\u3068\u4fbf\u5229\u3067\u3059\u3088\u306d\u3002\u304d\u3063\u3068\u3002\n\n\u3069\u3046\u4f7f\u304a\u3046\uff1f\n\u8907\u96d1\u306a\u8a08\u7b97\u3092\u3059\u308b\u51fd\u6570\u306b\u3064\u3044\u3066\u306e\u6027\u8cea\u3092\u8a3c\u660e\u3057\u305f\u3044\u3068\u304d\u3001\u8a3c\u660e\u306b\u5165\u308b\u524d\u306b\u5e7e\u3064\u304b\u306e\u30c6\u30b9\u30c8\u30b1\u30fc\u30b9\u3092\u901a\u308b\u3053\u3068\u3067\u3001\u51fd\u6570\u304c\u3061\u3083\u3093\u3068\u5b9a\u7fa9\u3067\u304d\u3066\u3044\u305d\u3046\u304b\u78ba\u8a8d\u3059\u308b\u3002\n\u305d\u3093\u306a\u4f7f\u3044\u65b9\u304c\u4fbf\u5229\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u3002\n\u3042\u3068\u3001\u3053\u3046\u3044\u3046\u8a18\u4e8b\u66f8\u304f\u6642\u3001 Compute \u306e\u7d50\u679c\u3092 C-c C-; \u3067\u633f\u5165\u3059\u308b\u65b9\u5f0f\u3060\u3068\u51fd\u6570\u306e\u5b9a\u7fa9\u3092\u5909\u3048\u305f\u308a\u3057\u305f\u3068\u304d\u306b\u30b3\u30e1\u30f3\u30c8\u306e\u4fee\u6b63\u304c\u5fc5\u8981\u3060\u3057\u5999\u306b\u898b\u8f9b\u3044\u3057\u3067\u4e0d\u4fbf\u3060\u3063\u305f\u306e\u3067\u3001\u3053\u306e\u4ed5\u7d44\u307f\u3092\u4f7f\u3046\u3068\u305d\u3046\u3044\u3046\u5fc3\u914d\u304c\u3044\u3089\u305a\u697d\u3067\u3057\u305f\u3002\n# \u30a2\u30c9\u30d9\u30f3\u30c8\u30ab\u30ec\u30f3\u30c0\u30fc\n\n7\u65e5\u76ee\u306e\u8a18\u4e8b\u306f fetburner \u3055\u3093\u306e [\u5358\u4e00\u5316\u306e\u8a3c\u660e](http://fetburner.hatenablog.com/entry/2015/12/06/224619) \u3067\u3057\u305f\u3002\n\n# \u307e\u3068\u3081\n\n* \u4f9d\u5b58\u578b\u3068\u578b\u30af\u30e9\u30b9\u3068 `Notation` \u3092\u4f7f\u3063\u3066\u3001\u8a08\u7b97\u7d50\u679c\u304c\u5408\u308f\u306a\u3044\u3068\u304d\u306b\u578b\u30a8\u30e9\u30fc\u3092\u5f15\u304d\u8d77\u3053\u3059\u4ed5\u7d44\u307f\u3092\u4f5c\u3063\u305f\u3002\n* \u8a3c\u660e\u3068\u9055\u3044\u3001\u5177\u4f53\u7684\u306a\u8a08\u7b97\u306e\u30c1\u30a7\u30c3\u30af\u3002\n* \u771f\u7406\u5024\u8868\u306e\u78ba\u8a8d\u3068\u304b\u6570\u5024\u8a08\u7b97\u306b\u4fbf\u5229\u3001\u304b\u3082\u3002\n* `Proof. now idtac. Qed.` \u3063\u3066\u4e00\u3005\u66f8\u304d\u305f\u304f\u306a\u3044\u3057 `Unnamed_thm` \u3068\u304b\u3044\u3089\u3093\u3001\u3068\u3044\u3046\u4eba\u5411\u3051\u3002\n* \u30b9\u30af\u30ea\u30d7\u30c8\u5168\u4f53\u306f [\u3053\u3053](https://gist.github.com/mathink/a312ab28fe787c74b5b1)\u3002\n* \u30bf\u30a4\u30c8\u30eb\u306f\u8003\u3048\u308b\u306e\u304c\u9762\u5012\u3067\u3057\u305f\u3002\n\n# \u5fc5\u8981\u306a\u9053\u5177\u3092\u4f5c\u308b\u3002\n\n\n\n## \u3068\u308a\u3042\u3048\u305a\u5fc5\u8981\u306a\u3082\u306e\n\n* `True_or_Eq` :: \u6c7a\u5b9a\u53ef\u80fd\u306a\u547d\u984c\u306e\u7d50\u679c\u306b\u5fdc\u3058\u3066\u578b\u304c\u5909\u308f\u308b\u4f9d\u5b58\u578b\n* `I_or_0eq0` :: \u305d\u306e\u7d50\u679c\u306b\u5fdc\u3058\u3066\u5909\u308f\u308b\u578b\u306e\u5024\u3092\u8fd4\u3059\u51fd\u6570\n* `onlyTrue` :: \u305d\u306e\u4e00\u65b9\u306e\u578b\u3060\u3051\u3092\u53d7\u3051\u4ed8\u3051\u308b\u51fd\u6570\n\n```coq:\nSet Implicit Arguments.\nUnset Strict Implicit.\n\nDefinition True_or_Eq (P: Prop)(dec: {P}+{~P}): Prop := if dec then True else 0 = 0.\nDefinition I_or_0eq0 (P: Prop)(dec: {P}+{~P}): True_or_Eq dec :=\n  if dec as dec' return True_or_Eq dec' then I else eq_refl 0.\nDefinition onlyTrue (H: True): True := H.\n```\n\n\u3053\u308c\u3089\u3092\u4f7f\u3046\u3068\u3001(\u6c7a\u5b9a\u53ef\u80fd\u306a)\u547d\u984c\u306e\u6210\u7acb\u3059\u308b\u6642\u306e\u307f\u3001 `I_or_0eq0` \u306b `onlyTrue` \u3092\u9069\u7528\u3067\u304d\u308b\u3053\u3068\u306b\u306a\u308a\u307e\u3059\u3002\n\u5f53\u7136\u3001\u73fe\u6642\u70b9\u3067\u306f\u9069\u7528\u3059\u308b\u3068\u305d\u3082\u305d\u3082\u578b\u30a8\u30e9\u30fc\u306b\u306a\u308b\u306e\u3067\u3059\u304c\u3001 \u3053\u308c\u306f `Notation` \u3068\u7d44\u307f\u5408\u308f\u305b\u308b\u3053\u3068\u3067\u52b9\u679c\u3092\u767a\u63ee\u3057\u307e\u3059\u3002\n\n\u4ee5\u964d\u3067\u306f\u6c7a\u5b9a\u53ef\u80fd\u306a\u7b49\u4fa1\u6027\u3092\u4f7f\u3044\u3001\u4ee5\u4e0a\u306e\u9053\u5177\u306e\u4f7f\u3044\u65b9\u3092\u898b\u3066\u3044\u304d\u307e\u3059\u3002\n\n## `eq` \u304c\u6c7a\u5b9a\u53ef\u80fd\u306a\u578b\u306e\u305f\u3081\u306e\u691c\u67fb\u6a5f\u69cb\n\n\u578b\u30af\u30e9\u30b9 `dec_Type` \u306f\u3001\u578b\u3068\u305d\u306e\u4e0a\u306e\u7b49\u4fa1\u6027\u306e\u6c7a\u5b9a\u624b\u7d9a\u304d\u3068\u3092\u7e8f\u3081\u305f\u3082\u306e\u3067\u3059\u3002\n\u578b `A` \u304b\u3089 `dec_Type` \u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u4f5c\u3063\u3066\u304a\u304f\u3068\u3001 `dec_Type` \u306e\u5b58\u5728\u3092\u610f\u8b58\u305b\u305a\u3068\u3082\u3001\u578b\u30af\u30e9\u30b9\u306e\u4ed5\u7d44\u307f\u306b\u3088\u3063\u3066\u5fc5\u8981\u306a\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u63a8\u8ad6\u3057\u3066\u304f\u308c\u307e\u3059\u3002\n\n\u307e\u305f\u3001 `Coercion` \u3092\u4f7f\u3046\u3053\u3068\u3067 `X: dec_Type` \u306b\u3064\u3044\u3066 `x: X` \u3068\u3044\u3046\u8a18\u8ff0\u304c\u51fa\u6765\u308b\u3088\u3046\u306b\u3057\u3066\u3042\u308a\u307e\u3059\u3002\n\n```coq:\nClass dec_Type :=\n  {\n    carrier: Type;\n    decider: forall (x y: carrier), {x = y} + {~x = y}\n  }.\nCoercion carrier: dec_Type >-> Sortclass.\n```\n\n\u305d\u3057\u3066\u3001\u4e0a\u3067\u5b9a\u7fa9\u3057\u305f\u578b\u30af\u30e9\u30b9\u3092\u4f7f\u3044\u3001\u51fd\u6570 `check_eq` \u3092\u5b9a\u7fa9\u3057\u307e\u3059\u3002\n\n```coq:\nDefinition check_eq {X: dec_Type}(x y: X) := I_or_0eq0 (decider x y).\n```\n\n`dec_Type` \u306f\u305d\u306e\u30d5\u30a3\u30fc\u30eb\u30c9\u306b\u7b49\u4fa1\u6027\u306e\u6c7a\u5b9a\u624b\u7d9a\u304d `decider` \u3092\u6301\u3063\u3066\u3044\u307e\u3057\u305f\u3002\u3086\u3048\u306b `decider x y` \u306f\u6c7a\u5b9a\u53ef\u80fd\u3067\u3059\u3002\n\u5148\u306b\u5b9a\u7fa9\u3057\u305f `I_or_0eq0` \u3092\u9069\u7528\u3059\u308c\u3070\u3001\u3053\u308c\u306f\u3000`x` \u3068 `y` \u304c\u7b49\u3057\u3051\u308c\u3070 `True` \u306e\u3001\u7b49\u3057\u304f\u306a\u3051\u308c\u3070 `0 = 0` \u306e\u8a3c\u660e\u3092\u8fd4\u3059\u9805\u3068\u306a\u308a\u307e\u3059\u3002\n\n\u3053\u3053\u3067 `Notation` \u306e\u6a5f\u80fd\u3092\u4f7f\u3063\u3066\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u8a18\u6cd5\u3092\u5b9a\u7fa9\u3057\u307e\u3059\u3002\n`Notation` \u306f\u3042\u304f\u307e\u3067\u8a18\u6cd5\u3092\u5b9a\u7fa9\u3059\u308b\u306e\u3067\u3042\u3063\u3066\u3001\u9805\u3092\u4f5c\u308b\u308f\u3051\u3067\u306f\u3042\u308a\u307e\u305b\u3093\u304b\u3089\u3001\u578b\u691c\u67fb\u306a\u3069\u3082\u884c\u306a\u3044\u307e\u305b\u3093\u3002\n\n```coq:\nNotation ok x y := (onlyTrue (check_eq x y)).\n```\n\n\u3057\u304b\u3057\u3001\u3053\u306e\u8a18\u6cd5\u3092\u5b9f\u969b\u306b\u4f7f\u3046\u30bf\u30a4\u30df\u30f3\u30b0\u306b\u306a\u308b\u3068\u3001 `:=` \u306e\u53f3\u5074\u306b\u66f8\u304b\u308c\u305f\u901a\u308a\u306e\u9805\u304c\u4f5c\u3089\u308c\u308b\u3053\u3068\u306b\u306a\u308a\u307e\u3059\u3002\n\u305d\u306e\u6bb5\u968e\u3067 `check_eq x y` \u306e\u578b\u304c `True` \u304b\u5426\u304b\u306b\u3088\u3063\u3066 `onlyTrue` \u304c\u9069\u7528\u3067\u304d\u308b\u304b\u5426\u304b\u304c\u6c7a\u307e\u308a\u3001\u3082\u3057\u3082 `x` \u3068 `y` \u306e\u5024\u304c\u7570\u306a\u308c\u3070\u578b\u30a8\u30e9\u30fc\u304c\u8d77\u304d\u3001\u8a08\u7b97\u305d\u306e\u3082\u306e\u304b\u3001\u3042\u308b\u3044\u306f\u8a08\u7b97\u7d50\u679c\u306e\u9593\u9055\u3044\u3092\u691c\u51fa\u3067\u304d\u308b\u3053\u3068\u306b\u306a\u308a\u307e\u3059\u3002\n\n`Check` \u3084 `Compute` \u306a\u3069\u3001\u9805\u3092\u89e6\u308b\u30b3\u30de\u30f3\u30c9\u306b\u98df\u308f\u305b\u308c\u3070\u578b\u691c\u67fb\u304c\u884c\u306a\u308f\u308c\u308b\u306e\u3067\u3001\u305d\u306e\u6642\u306b\u5024\u304c\u7b49\u3057\u3044\u304b\u3069\u3046\u304b\u306e\u30c1\u30a7\u30c3\u30af\u304c\u3067\u304d\u308b\u3053\u3068\u306b\u3082\u306a\u308b\u308f\u3051\u3067\u3059\u3002\n\n\u4ee5\u964d\u3067\u306f\u3001\u3053\u306e\u4ed5\u7d44\u307f\u3092\u5b9f\u969b\u306b\u4f7f\u3063\u3066\u307f\u307e\u3059\u3002\n\u306a\u3093\u3060\u304b\u3084\u3084\u3053\u3057\u3044\u8aac\u660e\u306b\u306a\u308a\u307e\u3057\u305f\u304c\u3001\u4f7f\u3063\u3066\u307f\u308c\u3070\u3069\u3046\u3044\u3046\u3053\u3068\u304b\u306f\u3059\u3050\u306b\u308f\u304b\u308b\u3068\u601d\u3044\u307e\u3059\u3002\n\n\n# \u30d6\u30fc\u30eb\u51fd\u6570\u3067\u8a66\u3059\n\n`bool` \u578b\u304b\u3089 `dec_Type` \u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u4f5c\u3063\u3066\u304a\u304d\u307e\u3059\u3002\n\n```coq:\nRequire Import Bool.\n\nInstance dec_bool: dec_Type :=\n  {\n    decider := bool_dec\n  }.\n```\n\n\u3064\u3044\u3067\u306b\u3001\u8a18\u8ff0\u3092\u7c21\u5358\u306b\u3059\u308b\u305f\u3081\u306b `true` \u3068 `false` \u3092\u305d\u308c\u305e\u308c `1`,`0` \u3067\u8868\u73fe\u3067\u304d\u308b\u3088\u3046\u306b\u3082\u3057\u3066\u304a\u304d\u307e\u3059\u3002\n\u30b0\u30ed\u30fc\u30d0\u30eb\u306b\u3057\u3066\u3057\u307e\u3046\u3068\u9762\u5012\u306a\u306e\u3067\u3001 `bool_scope` \u306e\u4e2d\u306b\u7559\u3081\u3066\u304a\u304d\u307e\u3057\u3087\u3046\u3002\n\n```coq:\nNotation \"1\" := true: bool_scope.\nNotation \"0\" := false: bool_scope.\n\nOpen Scope bool_scope.\n```\n\n## NAND \u304b\u3089\u59cb\u3081\u3066\u5168\u90e8\u4f5c\u308b\u3084\u3064\n\n\u4ee5\u964d\u3067\u306f\u57fa\u672c\u7684\u306a\u30d6\u30fc\u30eb\u51fd\u6570\u3068\u305d\u306e\u771f\u7406\u5024\u8868(\u306b\u5bfe\u5fdc\u3057\u305f\u691c\u67fb)\u3092\u8a18\u8ff0\u3057\u3066\u3044\u307e\u3059\u3002\n`Bool` \u306b\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u308b\u3082\u306e\u3082\u5bb9\u8d66\u306a\u304f\u4e0a\u66f8\u304d\u3067\u3059\u3002\n\nNAND \u304b\u3089\u59cb\u3081\u3066\n\n* AND\n* NOT\n* OR\n* XOR\n* MUX\n\n\u3092\u4f5c\u3063\u3066\u3044\u304f\u3084\u3064\u3067\u3059\u3002\n\n\u5b9a\u7fa9\u306e\u4e0b\u306b\u771f\u7406\u5024\u8868\u3092\u8a18\u8ff0\u3057\u3066\u3044\u308b\u306e\u3067\u3001\u3053\u308c\u3089\u306e `Check` \u3067\u578b\u30a8\u30e9\u30fc\u304c\u8d77\u304d\u306a\u3044\u3068\u3044\u3046\u3053\u3068\u306f\u51fd\u6570\u304c\u6b63\u3057\u304f\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u308b\u3053\u3068\u306b\u306a\u308a\u307e\u3059\u3002\n\n### NAND\n\n```coq:\nDefinition nand (x y: bool): bool :=\n  match x, y with\n  | 1,1 => 0\n  | _,_ => 1\n  end.\nNotation \"x 'NAND' y\" := (nand x y) (at level 50, left associativity): bool_scope.\n\nCheck ok (0 NAND 0) 1.\nCheck ok (1 NAND 0) 1.\nCheck ok (0 NAND 1) 1.\nCheck ok (1 NAND 1) 0.\n```\n\n### AND\n\n```coq:\nDefinition and (x y: bool) := let b := (x NAND y) in b NAND b.\nNotation \"x 'AND' y\" := (and x y) (at level 40, left associativity): bool_scope.\nNotation \"x * y\" := (x AND y) (at level 40, left associativity): bool_scope.\n\nCheck ok (0 AND 0) 0.\nCheck ok (1 AND 0) 0.\nCheck ok (0 AND 1) 0.\nCheck ok (1 AND 1) 1.\n```\n\n### NOT\n\n```coq:\nDefinition not (x: bool): bool := x NAND x.\nNotation \"'NOT' x\" := (not x) (at level 35, right associativity): bool_scope.\nNotation \"! x\" := (not x) (at level 35, right associativity): bool_scope.\n\nCheck ok (NOT 0) 1.\nCheck ok (NOT 1) 0.\n```\n\n### OR\n\n```coq:\nDefinition or (x y: bool) := !(!x * !y).\nNotation \"x 'OR' y\" := (or x y) (at level 50, left associativity): bool_scope.\nNotation \"x + y\" := (x OR y) (at level 50, left associativity): bool_scope.\n\nCheck ok (0 OR 0) 0.\nCheck ok (1 OR 0) 1.\nCheck ok (0 OR 1) 1.\nCheck ok (1 OR 1) 1.\n```\n\n### XOR\n\n```coq:\nDefinition xor (x y: bool): bool := (x + y) * (x NAND y).\nNotation \"x 'XOR' y\" := (xor x y) (at level 55, left associativity): bool_scope.\n\nCheck ok (0 XOR 0) 0.\nCheck ok (1 XOR 0) 1.\nCheck ok (0 XOR 1) 1.\nCheck ok (1 XOR 1) 0.\n```\n\n### MUX\n\n```coq:\nDefinition mux (x y sel: bool): bool := (!sel * x) + (sel * y).\n\nCheck ok (mux 0 0 0) 0.\nCheck ok (mux 0 0 1) 0.\nCheck ok (mux 0 1 0) 0.\nCheck ok (mux 0 1 1) 1.\nCheck ok (mux 1 0 0) 1.\nCheck ok (mux 1 0 1) 0.\nCheck ok (mux 1 1 0) 1.\nCheck ok (mux 1 1 1) 1.\n```\n\n## \u5931\u6557\u3059\u308b\u4f8b\n\n\u6210\u529f\u3059\u308b\u4f8b\u3060\u3051\u898b\u3066\u3066\u3082\u3064\u307e\u3089\u3093\u306e\u3067\u3001\u5931\u6557\u3059\u308b\u4f8b\u3082\u898b\u3066\u307f\u307e\u3057\u3087\u3046\u3002\n\n\u305f\u3068\u3048\u3070\u3001\u30de\u30eb\u30c1\u30d7\u30ec\u30af\u30b5(MUX)\u306e\u5b9a\u7fa9\u3092\u6b21\u306e\u3088\u3046\u306b\u5c11\u3057\u9593\u9055\u3048\u3066\u3057\u307e\u3063\u305f\u3068\u3057\u307e\u3057\u3087\u3046\u3002\n`y` \u3068 AND \u3092\u53d6\u308b\u306e\u306f `sel` \u306e\u306f\u305a\u3067\u3059\u304c\u3001\u3053\u3053\u3067\u306f `!sel` \u306b\u306a\u3063\u3066\u3057\u307e\u3063\u3066\u3044\u307e\u3059\u306d\u3002\n\n```coq:\nDefinition mux' (x y sel: bool): bool := (!sel * x) + (!sel * y).\n```\n\n\u3059\u308b\u3068\u3001\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u8868\u306e\u4e09\u884c\u3081\u306e\u691c\u67fb\u304c\u5931\u6557\u3057\u307e\u3059\u3002\n\n```coq:\nCheck ok (mux' 0 0 0) 0.\nCheck ok (mux' 0 0 1) 0.\nFail Check ok (mux' 0 1 0) 0.\n(* The command has indeed failed with message: *)\n(* => Error: The term \"check_eq (mux' 0 1 0) 0\" has type *)\n(*     \"True_or_Eq (decider (mux' 0 1 0) 0)\" while it is expected to have type *)\n(*     \"True\". *)\n```\n\n\u8a08\u7b97\u7d50\u679c\u304c\u7570\u306a\u308b\u3068 `onlyTrue` \u306b\u4e0e\u3048\u3089\u308c\u308b\u9805\u306e\u578b\u304c `0 = 0` \u306b\u306a\u308a\u578b\u30a8\u30e9\u30fc\u304c\u8d77\u304d\u308b\u304b\u3089\u3067\u3059\u3002\nCompute \u3067\u76ee\u8996\u306e\u5024\u30c1\u30a7\u30c3\u30af\u3092\u3059\u308b\u3088\u308a\u306f\u30df\u30b9\u3092\u691c\u51fa\u3057\u3084\u3059\u3044\u3067\u3059\u306d\u3002\n\n\u8a08\u7b97\u7d50\u679c\u304c\u3069\u3046\u306a\u3063\u305f\u306e\u304b\u3001\u306f\u5b9f\u969b\u306b `Compute` \u3057\u3066\u78ba\u304b\u3081\u3066\u4e0b\u3055\u3044\u3002\n\u30a8\u30e9\u30fc\u30e1\u30c3\u30bb\u30fc\u30b8\u3067\u51fa\u3066\u304f\u308c\u308a\u3083\u3044\u3044\u306e\u306b\u306a\u3041\u3002\n\n\n# `nat` \u3067\u8a66\u3059\n\n\u30d6\u30fc\u30eb\u5024\u3060\u3051\u3067\u306f\u7269\u8db3\u308a\u306a\u3044\u306e\u3067\u3001\u6570\u5024\u8a08\u7b97\u3082\u3057\u3066\u307f\u307e\u3059\u3002\n\u307e\u305a\u306f `nat` \u304b\u3089 `dec_Type` \u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u4f5c\u308a\u307e\u3059\u3002\n\n```coq:\nRequire Import Arith.\nOpen Scope nat_scope.\n\nInstance dec_nat: dec_Type :=\n  {\n    decider := eq_nat_dec\n  }.\n```\n\n\u691c\u67fb\u5bfe\u8c61\u3068\u3057\u3066\u306a\u3093\u304b\u3088\u304f\u308f\u304b\u3089\u306a\u3044\u51fd\u6570\u3092\u5b9a\u7fa9\u3057\u3066\u307f\u307e\u3059\u3002\u4e0a\u304c\u3063\u305f\u308a\u4e0b\u304c\u3063\u305f\u308a\u3002\n\n```coq:\nFixpoint evenb (n: nat) :=\n  match n with\n  | O => true\n  | S n' => negb (evenb n')\n  end.\n\nDefinition updown (n: nat): nat :=\n  match n with\n  | O => S O\n  | S n' => if evenb n' then n' else S n\n  end.\n```\n\n`updown` \u306f\u5f15\u6570\u304c\u5076\u6570\u306e\u6642\u306b +1 \u3001\u5947\u6570\u306e\u6642\u306b -1 \u3092\u3059\u308b\u51fd\u6570\u3067\u3059\u3002\n\u4eca\u56de\u306f\u4ed5\u69d8\u304c\u5358\u7d14\u306a\u306e\u3067\u8a3c\u660e\u3082\u3042\u3063\u3055\u308a\u3057\u3066\u3044\u307e\u3059\u304c\u3001\u3068\u308a\u3042\u3048\u305a\u8a08\u7b97\u7d50\u679c\u306e\u6b63\u3057\u3055\u3092\u5e7e\u3064\u304b\u306e\u4f8b\u3067\u691c\u67fb\u3057\u3066\u307f\u307e\u3059\u3002\n\n\u4e09\u3064\u3081\u306b\u9593\u9055\u3063\u305f\u8a08\u7b97\u7d50\u679c\u3092\u66f8\u3044\u305f\u306e\u3067\u3001\u305d\u3053\u3067\u3061\u3083\u3093\u3068\u578b\u30a8\u30e9\u30fc\u304c\u8d77\u304d\u3001\u305d\u308c\u4ee5\u5916\u306f\u6b63\u3057\u304f\u691c\u67fb\u3055\u308c\u3066\u3044\u308b\u306e\u304c\u308f\u304b\u308b\u3068\u601d\u3044\u307e\u3059\u3002\n\n```coq:\nCheck ok (updown 0) 1.\nCheck ok (updown 1) 0.\nFail Check ok (updown 2) 1.\n(* The command has indeed failed with message: *)\n(* => Error: The term \"check_eq (updown 2) 1\" has type *)\n(*     \"True_or_Eq (decider (updown 2) 1)\" while it is expected to have type *)\n(*     \"True\". *)\nCheck ok (updown 2) 3.\nCheck ok (updown 3) 2.\nCheck ok (updown 4) 5.\n```\n\n`updown` \u306f\u5358\u7d14\u306a\u51fd\u6570\u3067\u3059\u304c\u3001\u3082\u3063\u3068\u8fbc\u307f\u5165\u3063\u305f\u8a08\u7b97\u3092\u3059\u308b\u51fd\u6570\u3092\u76f8\u624b\u53d6\u308b\u3068\u304d\u306f\u3053\u3046\u3044\u3046\u691c\u67fb\u304c\u7c21\u5358\u306b\u51fa\u6765\u308b\u3068\u4fbf\u5229\u3067\u3059\u3088\u306d\u3002\u304d\u3063\u3068\u3002\n\n# \u3069\u3046\u4f7f\u304a\u3046\uff1f\n\n\u8907\u96d1\u306a\u8a08\u7b97\u3092\u3059\u308b\u51fd\u6570\u306b\u3064\u3044\u3066\u306e\u6027\u8cea\u3092\u8a3c\u660e\u3057\u305f\u3044\u3068\u304d\u3001\u8a3c\u660e\u306b\u5165\u308b\u524d\u306b\u5e7e\u3064\u304b\u306e\u30c6\u30b9\u30c8\u30b1\u30fc\u30b9\u3092\u901a\u308b\u3053\u3068\u3067\u3001\u51fd\u6570\u304c\u3061\u3083\u3093\u3068\u5b9a\u7fa9\u3067\u304d\u3066\u3044\u305d\u3046\u304b\u78ba\u8a8d\u3059\u308b\u3002\n\u305d\u3093\u306a\u4f7f\u3044\u65b9\u304c\u4fbf\u5229\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u3002\n\n\u3042\u3068\u3001\u3053\u3046\u3044\u3046\u8a18\u4e8b\u66f8\u304f\u6642\u3001 `Compute` \u306e\u7d50\u679c\u3092 `C-c C-;` \u3067\u633f\u5165\u3059\u308b\u65b9\u5f0f\u3060\u3068\u51fd\u6570\u306e\u5b9a\u7fa9\u3092\u5909\u3048\u305f\u308a\u3057\u305f\u3068\u304d\u306b\u30b3\u30e1\u30f3\u30c8\u306e\u4fee\u6b63\u304c\u5fc5\u8981\u3060\u3057\u5999\u306b\u898b\u8f9b\u3044\u3057\u3067\u4e0d\u4fbf\u3060\u3063\u305f\u306e\u3067\u3001\u3053\u306e\u4ed5\u7d44\u307f\u3092\u4f7f\u3046\u3068\u305d\u3046\u3044\u3046\u5fc3\u914d\u304c\u3044\u3089\u305a\u697d\u3067\u3057\u305f\u3002\n", "tags": ["Coq"]}