{"context": " More than 1 year has passed since last update.\u524d\u56de\u306e\u8a18\u4e8bstd::unique_ptr\u306b\u306f ->* \u6f14\u7b97\u5b50\u304c\u306a\u3044\uff01\u306b\u3066\u4f5c\u3063\u305f\u3082\u306e\u3092\u6539\u826f\u3057\u3066\u3001\u8272\u3005\u306a\u30b9\u30de\u30fc\u30c8\u30dd\u30a4\u30f3\u30bf\u306b->*\u6f14\u7b97\u5b50\u3092\u8ffd\u52a0\u3059\u308b\u30af\u30e9\u30b9\u3092\u4f5c\u308a\u307e\u3057\u305f\u3002\u307e\u305f\u3001\u4eca\u56de\u3001\u4e0a\u306e\u8a18\u4e8b\u3092\u8aad\u307e\u306a\u304f\u3066\u3082\u5927\u4e08\u592b\u306a\u5185\u5bb9\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u3002\n\u3042\u307e\u308a\u4f7f\u3063\u305f\u3053\u3068\u304c\u306a\u3044\u3068\u3044\u3046\u65b9\u304c\u5927\u591a\u6570\u3060\u3068\u601d\u3044\u307e\u3059\u306e\u3067(\u308f\u305f\u3057\u3082\u3067\u3059\u304c)\u3001\u5fd8\u308c\u3066\u305f\u65b9\u3082\u3042\u3042\u305d\u3093\u306a\u3082\u3093\u3082\u3042\u3063\u305f\u306a\u3068\u601d\u3044\u51fa\u305b\u308b\u7a0b\u5ea6\u306b\u7d39\u4ecb\u3044\u305f\u3057\u307e\u3059\u3002\n\n->*\u6f14\u7b97\u5b50\u3068\u306f\n\n\u9593\u63a5\u30e1\u30f3\u30d0\u30dd\u30a4\u30f3\u30bf\u6f14\u7b97\u5b50\u3068\u3044\u3046\u3082\u306e\u3067\u3001\u30e1\u30f3\u30d0\u5909\u6570 / \u30e1\u30f3\u30d0\u95a2\u6570\u3078\u306e\u30dd\u30a4\u30f3\u30bf\u3092\u53d7\u3051\u53d6\u3063\u3066\u305d\u308c\u3092\u89e3\u6c7a\u3057\u3066\u304f\u308c\u308b\u6f14\u7b97\u5b50\u3067\u3059\u3002\u30e1\u30f3\u30d0\u5909\u6570 / \u30e1\u30f3\u30d0\u95a2\u6570\u3078\u306e\u30dd\u30a4\u30f3\u30bf\u3068\u3044\u3046\u306e\u306f\u3001\u30af\u30e9\u30b9\u306e\u982d\u304b\u3089\u305d\u306e\u30e1\u30f3\u30d0\u5909\u6570\u3084\u30e1\u30f3\u30d0\u95a2\u6570\u307e\u3067\u306e\u30aa\u30d5\u30bb\u30c3\u30c8\u307f\u305f\u3044\u306a\u3082\u306e\u3067\u3059\u3002this\u30dd\u30a4\u30f3\u30bf\u306b\u30aa\u30d5\u30bb\u30c3\u30c8\u3092\u52a0\u7b97\u3057\u3066\u304f\u308c\u308b\u6f14\u7b97\u5b50\u307f\u305f\u3044\u306a\u611f\u3058\u3067\u3059\u306d\u3002\nfoo* f = new foo();\n\nint foo::* foobar = &foo::bar;\nf->*foobar= 10; // \u30e1\u30f3\u30d0\u5909\u6570\u3078\u306e\u9593\u63a5\u53c2\u7167\n\nvoid ( foo::* foobaz)() = &foo::baz;\n( f->* barbaz )(); // \u30e1\u30f3\u30d0\u95a2\u6570\u3092\u9593\u63a5\u53c2\u7167\u3057\u3066\u547c\u3073\u51fa\u3057\n\nvoid ( foo::* fooqux )() const = &foo::qux;\n( f->* fooqux )(); // const\u30e1\u30f3\u30d0\u95a2\u6570\u3092\u9593\u63a5\u53c2\u7167\u3057\u3066\u547c\u3073\u51fa\u3057\n\nvoid ( foo::* const fooquux )() const = &foo::quux; // const\u30dd\u30a4\u30f3\u30bf\n( f->* fooqux )();\nfooquux = fooqux; // oops! quux is qualified as cosntant type\n\n\u69cb\u6587\u3068\u3057\u3066\u306f\u3053\u3093\u306a\u611f\u3058\u3067\u3059\u3002\u5909\u614b\u7684\u306a\u6587\u6cd5\u306e\u591a\u3044C++\u3067\u3082\u6c17\u6301\u3061\u60aa\u3044\u90e8\u985e\u3067\u3059\u3002\u30e1\u30f3\u30d0\u95a2\u6570\u304c\u30aa\u30fc\u30d0\u30fc\u30ed\u30fc\u30c9\u3055\u308c\u3066\u3044\u3066\u304b\u3064\u5bfe\u8c61\u304c\u63a8\u8ad6\u3067\u304d\u306a\u3044\u3068\u304d\u306f\u3001\u76ee\u7684\u306e\u578b\u306b\u30ad\u30e3\u30b9\u30c8\u3057\u3066\u3042\u3052\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\n\u3055\u3066\u3001\u305d\u308d\u305d\u308d\u5f71\u306e\u8584\u3044\u6f14\u7b97\u5b50\u3082\u6398\u308a\u8d77\u3053\u3055\u308c\u3066\u304d\u305f\u9803\u5408\u3044\u3060\u3068\u601d\u3046\u306e\u3067\u672c\u984c\u306b\u5165\u308a\u307e\u3059\u3002\n\u3055\u304d\u306b\u3001\u5b9f\u969b\u306e\u30b3\u30fc\u30c9\u3067\u4f7f\u308f\u308c\u308b\u30e1\u30bf\u95a2\u6570\u3092\u8f09\u305b\u307e\u3059\u3002\n// std::conditional\u306e\u9ad8\u968e\u30e1\u30bf\u95a2\u6570\ntemplate < class _Test, class _Ty1, class _Ty2 >\nusing conditional_t = typename std::conditional< _Test::value, _Ty1, _Ty2 >::type;\n\n// std::true_type\u304bstd::false_type\u3092\u53d7\u3051\u53d6\u3063\u3066\u8ad6\u7406\u548c\u3092\u53d6\u308b\ntemplate < class A, class... Args >\nstruct meta_or\n  : conditional_t < A, std::true_type, meta_or < Args... > >\n{\n};\ntemplate < class A >\nstruct meta_or < A > : A\n{\n};\n\n\u4ee5\u4e0b\u304c\u305d\u306e\u30b3\u30fc\u30c9\u3067\u3059\u3002ptr\u306b\u57fa\u3068\u306a\u308b\u30b9\u30de\u30fc\u30c8\u30dd\u30a4\u30f3\u30bf\u3092\u6307\u5b9a\u3057\u307e\u3059\u3002\n#include <memory>\n#include <type_traits>\n\ntemplate < class ptr >\nclass ex_smart_ptr \n  : public ptr\n{\n  using elem_t = typename ptr::element_type;\npublic:\n  using ptr::ptr;\n\n  // const\u30e1\u30f3\u30d0\u95a2\u6570\u30d0\u30fc\u30b8\u30e7\u30f3\n  template < class Ret, class... Args >\n  auto operator ->* ( Ret( elem_t::* mem_ptr ) ( Args... ) ) const\n  {\n    return [this, mem_ptr] ( Args&&... args )\n    {\n      return ( ptr::get()->*mem_ptr )( std::forward < Args >( args )... );\n    };\n  }\n\n  // \u975econst\u30e1\u30f3\u30d0\u95a2\u6570\u30d0\u30fc\u30b8\u30e7\u30f3\n  template < class Ret, class... Args >\n  auto operator ->* ( Ret( elem_t::* mem_ptr ) ( Args... ) const ) const\n  {\n    return [this, mem_ptr] ( Args&&... args )\n    {\n      return ( ptr::get()->*mem_ptr )( std::forward < Args >( args )... );\n    };\n  }\n\n  // \u30e1\u30f3\u30d0\u5909\u6570\u30d0\u30fc\u30b8\u30e7\u30f3\n  template < class Uz >\n  auto operator ->* ( Uz elem_t::* mem_ptr ) const\n    -> conditional_t < meta_or < std::is_const < elem_t >, std::is_const < Uz > >, const Uz, Uz >&\n  {\n    return ptr::get()->*mem_ptr;\n  }\n};\n\n\u95a2\u6570\u7528\u306e->*\u3067\u306f\u3001\u30e9\u30e0\u30c0\u5f0f\u304c\u8fd4\u308b\u3088\u3046\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u3002\u5f15\u6570\u306e\u30e1\u30f3\u30d0\u95a2\u6570\u30dd\u30a4\u30f3\u30bf\u304cconst\u4fee\u98fe\u3055\u308c\u3066\u3044\u308b\u304b\u3069\u3046\u304b\u3067\u30aa\u30fc\u30d0\u30fc\u30ed\u30fc\u30c9\u3057\u306a\u3051\u308c\u3070\u306a\u308a\u307e\u305b\u3093\u3002\n\u5909\u6570\u7528\u306e->*\u3067\u306f\u3001\u5909\u6570\u3078\u306e\u53c2\u7167\u304c\u8fd4\u308a\u307e\u3059\u3002const\u4fee\u98fe\u306e\u305b\u3044\u3067\u623b\u308a\u5024\u304c\u5c11\u3057\u9577\u304f\u306a\u3063\u3066\u3057\u307e\u3063\u3066\u3044\u307e\u3059\u3002\n\u30dd\u30a4\u30f3\u30bf\u306econst\u4fee\u98fe\u306f\u5c11\u3057\u308f\u304b\u308a\u3065\u3089\u3044\u3067\u3059\u306e\u3067\u7c21\u5358\u306b\u307e\u3068\u3081\u3066\u307f\u307e\u3057\u305f\u3002\n\n\n\nraw pointer\nsmart pointer\n\u305b\u3064\u3081\u3044\n\n\n\n\nint* rp;\nstd::unique_ptr < int > sp;\nconst\u4fee\u98fe\u306a\u3057\n\n\nint* const rp;\nconst std::unique_ptr < int > sp;\nconst\u30dd\u30a4\u30f3\u30bf\n\n\nconst int* rp;\nstd::unique_ptr < const int > sp;\nconst\u4fee\u98fe\u3055\u308c\u305f\u5024\u3092\u6307\u3059\u30dd\u30a4\u30f3\u30bf\n\n\nint const* rp;\n\u540c\u4e0a\n\u540c\u4e0a\n\n\nconst int* const rp;\nconst std::unique_ptr < const int > sp;\nconst\u4fee\u98fe\u3055\u308c\u305f\u5024\u3092\u6307\u3059const\u30dd\u30a4\u30f3\u30bf\n\n\nint const* const rp;\n\u540c\u4e0a\n\u540c\u4e0a\n\n\n\n\u30b9\u30de\u30fc\u30c8\u30dd\u30a4\u30f3\u30bf\u306e\u307b\u3046\u304c\u5206\u304b\u308a\u3084\u3059\u3044\u3067\u3059\u306d\u3002\n\u623b\u308a\u5024\u306bconst\u4fee\u98fe\u3092\u3064\u3051\u308b\u306e\u306fconst\u4fee\u98fe\u3055\u308c\u305f\u5024\u3092\u6307\u3059\u30dd\u30a4\u30f3\u30bf\u4e0b\uff14\u3064\u3068\u3044\u3046\u308f\u3051\u3067\u3059\u306d\u3002\n\u3082\u3046\u3072\u3068\u3064\u3001\u30e1\u30f3\u30d0\u304cconst\u4fee\u98fe\u3055\u308c\u3066\u3044\u308c\u3070\u623b\u308a\u5024\u306bconst\u4fee\u98fe\u3092\u3064\u3051\u306a\u3051\u308c\u3070\u306a\u308a\u307e\u305b\u3093\u3002\nstruct foo\n{\n  const int bar;\n}; \n\n\u3053\u3046\u3044\u3046\u5834\u5408\u3067\u3059\u3002\u5f53\u7136\u3067\u3059\u306d\u3002\u3088\u3063\u3066\u3001\u53c2\u7167\u5148\u306bconst\u4fee\u98fe\u304c\u304b\u304b\u308b\u5834\u5408\u3001\u307e\u305f\u306f\u3001\u30e1\u30f3\u30d0\u304cconst\u4fee\u98fe\u3055\u308c\u3066\u3044\u308b\u5834\u5408\u306b\u623b\u308a\u5024\u306bconst\u4fee\u98fe\u3092\u3059\u308c\u3070\u3044\u3044\u308f\u3051\u3067\u3059\u3002\u3053\u308c\u3092\u5b9f\u73fe\u3059\u308b\u30e1\u30bf\u95a2\u6570\u304c\u3061\u3087\u3063\u3068\u9577\u3044\u623b\u308a\u5024\u3068\u3044\u3046\u308f\u3051\u3067\u3059\u3002\n\u3055\u3066\u3001\u3053\u308c\u3092\u5b9f\u969b\u306b\u4f7f\u3046\u30b3\u30fc\u30c9\u306f\u4ee5\u4e0b\u306b\u306a\u308a\u307e\u3059\u3002\ntemplate < class Ty, class Deleter = std::default_delete < Ty > >\nusing unique_ptr = ex_smart_ptr < std::unique_ptr < Ty, Deleter > >;\n\ntemplate < class Ty >\nusing shared_ptr = ex_smart_ptr < std::shared_ptr < Ty > >;\n\ntemplate < class Ty >\nusing weak_ptr = ex_smart_ptr < std::weak_ptr < Ty > >;\n\n\u6c4e\u7528\u7684\u306a\u8a18\u8ff0\u304c\u53ef\u80fd\u306b\u306a\u308a\u307e\u3057\u305f\u3002\nstd::unique_ptr\u3068\u4ed6\uff12\u3064\u3067\u306f\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u5f15\u6570\u304c\u7570\u306a\u308b\u306e\u3067\u305d\u306e\u5dee\u3092\u5438\u53ce\u3059\u308b\u306e\u304c\u3053\u306e\u90e8\u5206\u306b\u306a\u308a\u307e\u3059\u3002\n\u6a19\u6e96\u3067\u306a\u3044\u30b9\u30de\u30fc\u30c8\u30dd\u30a4\u30f3\u30bf\u306b\u5bfe\u5fdc\u3055\u305b\u3088\u3046\u3068\u601d\u3046\u306e\u306a\u3089\u3001element_type\u3068get()\u95a2\u6570\u3092\u305d\u308c\u305e\u308c\u6a4b\u6e21\u3057\u3059\u308b\u3082\u306e\u3092\u4f5c\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\u6216\u3044\u306ftraits\u3092\u524d\u63d0\u306b\u3057\u3066ex_smart_ptr\u3092\u66f8\u304d\u76f4\u3057\u305f\u65b9\u304c\u697d\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u3002\n\u3053\u3053\u307e\u3067\u3084\u3063\u3066\u306a\u3093\u3067\u3059\u304c\u3001->*\u6f14\u7b97\u5b50\u3092\u4f7f\u3046\u6a5f\u4f1a\u3063\u3066\u3042\u307e\u308a\u306a\u3044\u3093\u3067\u3059\u3088\u306d\u3002\n\u306a\u306b\u304b\u306e\u53c2\u8003\u306b\u306a\u308c\u3070\u5e78\u3044\u3067\u3059\u3002\n\u524d\u56de\u306e\u8a18\u4e8b[std::unique_ptr\u306b\u306f ->* \u6f14\u7b97\u5b50\u304c\u306a\u3044\uff01](http://qiita.com/rinse_/items/2873fa75e63153dd6f85)\u306b\u3066\u4f5c\u3063\u305f\u3082\u306e\u3092\u6539\u826f\u3057\u3066\u3001\u8272\u3005\u306a\u30b9\u30de\u30fc\u30c8\u30dd\u30a4\u30f3\u30bf\u306b->*\u6f14\u7b97\u5b50\u3092\u8ffd\u52a0\u3059\u308b\u30af\u30e9\u30b9\u3092\u4f5c\u308a\u307e\u3057\u305f\u3002\u307e\u305f\u3001\u4eca\u56de\u3001\u4e0a\u306e\u8a18\u4e8b\u3092\u8aad\u307e\u306a\u304f\u3066\u3082\u5927\u4e08\u592b\u306a\u5185\u5bb9\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u3002\n\n\u3042\u307e\u308a\u4f7f\u3063\u305f\u3053\u3068\u304c\u306a\u3044\u3068\u3044\u3046\u65b9\u304c\u5927\u591a\u6570\u3060\u3068\u601d\u3044\u307e\u3059\u306e\u3067(\u308f\u305f\u3057\u3082\u3067\u3059\u304c)\u3001\u5fd8\u308c\u3066\u305f\u65b9\u3082\u3042\u3042\u305d\u3093\u306a\u3082\u3093\u3082\u3042\u3063\u305f\u306a\u3068\u601d\u3044\u51fa\u305b\u308b\u7a0b\u5ea6\u306b\u7d39\u4ecb\u3044\u305f\u3057\u307e\u3059\u3002\n\n* ->\\*\u6f14\u7b97\u5b50\u3068\u306f\n\n\u9593\u63a5\u30e1\u30f3\u30d0\u30dd\u30a4\u30f3\u30bf\u6f14\u7b97\u5b50\u3068\u3044\u3046\u3082\u306e\u3067\u3001\u30e1\u30f3\u30d0\u5909\u6570 / \u30e1\u30f3\u30d0\u95a2\u6570\u3078\u306e\u30dd\u30a4\u30f3\u30bf\u3092\u53d7\u3051\u53d6\u3063\u3066\u305d\u308c\u3092\u89e3\u6c7a\u3057\u3066\u304f\u308c\u308b\u6f14\u7b97\u5b50\u3067\u3059\u3002\u30e1\u30f3\u30d0\u5909\u6570 / \u30e1\u30f3\u30d0\u95a2\u6570\u3078\u306e\u30dd\u30a4\u30f3\u30bf\u3068\u3044\u3046\u306e\u306f\u3001\u30af\u30e9\u30b9\u306e\u982d\u304b\u3089\u305d\u306e\u30e1\u30f3\u30d0\u5909\u6570\u3084\u30e1\u30f3\u30d0\u95a2\u6570\u307e\u3067\u306e\u30aa\u30d5\u30bb\u30c3\u30c8\u307f\u305f\u3044\u306a\u3082\u306e\u3067\u3059\u3002this\u30dd\u30a4\u30f3\u30bf\u306b\u30aa\u30d5\u30bb\u30c3\u30c8\u3092\u52a0\u7b97\u3057\u3066\u304f\u308c\u308b\u6f14\u7b97\u5b50\u307f\u305f\u3044\u306a\u611f\u3058\u3067\u3059\u306d\u3002\n\n```\nfoo* f = new foo();\n\nint foo::* foobar = &foo::bar;\nf->*foobar= 10; // \u30e1\u30f3\u30d0\u5909\u6570\u3078\u306e\u9593\u63a5\u53c2\u7167\n\nvoid ( foo::* foobaz)() = &foo::baz;\n( f->* barbaz )(); // \u30e1\u30f3\u30d0\u95a2\u6570\u3092\u9593\u63a5\u53c2\u7167\u3057\u3066\u547c\u3073\u51fa\u3057\n\nvoid ( foo::* fooqux )() const = &foo::qux;\n( f->* fooqux )(); // const\u30e1\u30f3\u30d0\u95a2\u6570\u3092\u9593\u63a5\u53c2\u7167\u3057\u3066\u547c\u3073\u51fa\u3057\n\nvoid ( foo::* const fooquux )() const = &foo::quux; // const\u30dd\u30a4\u30f3\u30bf\n( f->* fooqux )();\nfooquux = fooqux; // oops! quux is qualified as cosntant type\n```\n\n\u69cb\u6587\u3068\u3057\u3066\u306f\u3053\u3093\u306a\u611f\u3058\u3067\u3059\u3002\u5909\u614b\u7684\u306a\u6587\u6cd5\u306e\u591a\u3044C++\u3067\u3082\u6c17\u6301\u3061\u60aa\u3044\u90e8\u985e\u3067\u3059\u3002\u30e1\u30f3\u30d0\u95a2\u6570\u304c\u30aa\u30fc\u30d0\u30fc\u30ed\u30fc\u30c9\u3055\u308c\u3066\u3044\u3066\u304b\u3064\u5bfe\u8c61\u304c\u63a8\u8ad6\u3067\u304d\u306a\u3044\u3068\u304d\u306f\u3001\u76ee\u7684\u306e\u578b\u306b\u30ad\u30e3\u30b9\u30c8\u3057\u3066\u3042\u3052\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\n\n\u3055\u3066\u3001\u305d\u308d\u305d\u308d\u5f71\u306e\u8584\u3044\u6f14\u7b97\u5b50\u3082\u6398\u308a\u8d77\u3053\u3055\u308c\u3066\u304d\u305f\u9803\u5408\u3044\u3060\u3068\u601d\u3046\u306e\u3067\u672c\u984c\u306b\u5165\u308a\u307e\u3059\u3002\n\u3055\u304d\u306b\u3001\u5b9f\u969b\u306e\u30b3\u30fc\u30c9\u3067\u4f7f\u308f\u308c\u308b\u30e1\u30bf\u95a2\u6570\u3092\u8f09\u305b\u307e\u3059\u3002\n\n```\n// std::conditional\u306e\u9ad8\u968e\u30e1\u30bf\u95a2\u6570\ntemplate < class _Test, class _Ty1, class _Ty2 >\nusing conditional_t = typename std::conditional< _Test::value, _Ty1, _Ty2 >::type;\n\n// std::true_type\u304bstd::false_type\u3092\u53d7\u3051\u53d6\u3063\u3066\u8ad6\u7406\u548c\u3092\u53d6\u308b\ntemplate < class A, class... Args >\nstruct meta_or\n  : conditional_t < A, std::true_type, meta_or < Args... > >\n{\n};\ntemplate < class A >\nstruct meta_or < A > : A\n{\n};\n```\n\n\u4ee5\u4e0b\u304c\u305d\u306e\u30b3\u30fc\u30c9\u3067\u3059\u3002ptr\u306b\u57fa\u3068\u306a\u308b\u30b9\u30de\u30fc\u30c8\u30dd\u30a4\u30f3\u30bf\u3092\u6307\u5b9a\u3057\u307e\u3059\u3002\n\n```\n#include <memory>\n#include <type_traits>\n\ntemplate < class ptr >\nclass ex_smart_ptr \n  : public ptr\n{\n  using elem_t = typename ptr::element_type;\npublic:\n  using ptr::ptr;\n\n  // const\u30e1\u30f3\u30d0\u95a2\u6570\u30d0\u30fc\u30b8\u30e7\u30f3\n  template < class Ret, class... Args >\n  auto operator ->* ( Ret( elem_t::* mem_ptr ) ( Args... ) ) const\n  {\n    return [this, mem_ptr] ( Args&&... args )\n    {\n      return ( ptr::get()->*mem_ptr )( std::forward < Args >( args )... );\n    };\n  }\n\n  // \u975econst\u30e1\u30f3\u30d0\u95a2\u6570\u30d0\u30fc\u30b8\u30e7\u30f3\n  template < class Ret, class... Args >\n  auto operator ->* ( Ret( elem_t::* mem_ptr ) ( Args... ) const ) const\n  {\n    return [this, mem_ptr] ( Args&&... args )\n    {\n      return ( ptr::get()->*mem_ptr )( std::forward < Args >( args )... );\n    };\n  }\n\n  // \u30e1\u30f3\u30d0\u5909\u6570\u30d0\u30fc\u30b8\u30e7\u30f3\n  template < class Uz >\n  auto operator ->* ( Uz elem_t::* mem_ptr ) const\n    -> conditional_t < meta_or < std::is_const < elem_t >, std::is_const < Uz > >, const Uz, Uz >&\n  {\n    return ptr::get()->*mem_ptr;\n  }\n};\n```\n\n\u95a2\u6570\u7528\u306e->\\*\u3067\u306f\u3001\u30e9\u30e0\u30c0\u5f0f\u304c\u8fd4\u308b\u3088\u3046\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u3002\u5f15\u6570\u306e\u30e1\u30f3\u30d0\u95a2\u6570\u30dd\u30a4\u30f3\u30bf\u304cconst\u4fee\u98fe\u3055\u308c\u3066\u3044\u308b\u304b\u3069\u3046\u304b\u3067\u30aa\u30fc\u30d0\u30fc\u30ed\u30fc\u30c9\u3057\u306a\u3051\u308c\u3070\u306a\u308a\u307e\u305b\u3093\u3002\n\u5909\u6570\u7528\u306e->\\*\u3067\u306f\u3001\u5909\u6570\u3078\u306e\u53c2\u7167\u304c\u8fd4\u308a\u307e\u3059\u3002const\u4fee\u98fe\u306e\u305b\u3044\u3067\u623b\u308a\u5024\u304c\u5c11\u3057\u9577\u304f\u306a\u3063\u3066\u3057\u307e\u3063\u3066\u3044\u307e\u3059\u3002\n\n\u30dd\u30a4\u30f3\u30bf\u306econst\u4fee\u98fe\u306f\u5c11\u3057\u308f\u304b\u308a\u3065\u3089\u3044\u3067\u3059\u306e\u3067\u7c21\u5358\u306b\u307e\u3068\u3081\u3066\u307f\u307e\u3057\u305f\u3002\n\n|raw pointer|smart pointer|\u305b\u3064\u3081\u3044|\n|:-:|:-:|:--|\n|int* rp;|std::unique_ptr < int > sp;|const\u4fee\u98fe\u306a\u3057|\n|int* const rp;|const std::unique_ptr < int > sp;|const\u30dd\u30a4\u30f3\u30bf|\n|const int* rp;|std::unique_ptr < const int > sp;|const\u4fee\u98fe\u3055\u308c\u305f\u5024\u3092\u6307\u3059\u30dd\u30a4\u30f3\u30bf|\n| int const* rp;|\u540c\u4e0a|\u540c\u4e0a|\n|const int* const rp;|const std::unique_ptr < const int > sp;|const\u4fee\u98fe\u3055\u308c\u305f\u5024\u3092\u6307\u3059const\u30dd\u30a4\u30f3\u30bf|\n|int const* const rp;|\u540c\u4e0a|\u540c\u4e0a|\n\u30b9\u30de\u30fc\u30c8\u30dd\u30a4\u30f3\u30bf\u306e\u307b\u3046\u304c\u5206\u304b\u308a\u3084\u3059\u3044\u3067\u3059\u306d\u3002\n\u623b\u308a\u5024\u306bconst\u4fee\u98fe\u3092\u3064\u3051\u308b\u306e\u306fconst\u4fee\u98fe\u3055\u308c\u305f\u5024\u3092\u6307\u3059\u30dd\u30a4\u30f3\u30bf\u4e0b\uff14\u3064\u3068\u3044\u3046\u308f\u3051\u3067\u3059\u306d\u3002\n\u3082\u3046\u3072\u3068\u3064\u3001\u30e1\u30f3\u30d0\u304cconst\u4fee\u98fe\u3055\u308c\u3066\u3044\u308c\u3070\u623b\u308a\u5024\u306bconst\u4fee\u98fe\u3092\u3064\u3051\u306a\u3051\u308c\u3070\u306a\u308a\u307e\u305b\u3093\u3002\n\n```\nstruct foo\n{\n  const int bar;\n}; \n```\n\n\u3053\u3046\u3044\u3046\u5834\u5408\u3067\u3059\u3002\u5f53\u7136\u3067\u3059\u306d\u3002\u3088\u3063\u3066\u3001\u53c2\u7167\u5148\u306bconst\u4fee\u98fe\u304c\u304b\u304b\u308b\u5834\u5408\u3001\u307e\u305f\u306f\u3001\u30e1\u30f3\u30d0\u304cconst\u4fee\u98fe\u3055\u308c\u3066\u3044\u308b\u5834\u5408\u306b\u623b\u308a\u5024\u306bconst\u4fee\u98fe\u3092\u3059\u308c\u3070\u3044\u3044\u308f\u3051\u3067\u3059\u3002\u3053\u308c\u3092\u5b9f\u73fe\u3059\u308b\u30e1\u30bf\u95a2\u6570\u304c\u3061\u3087\u3063\u3068\u9577\u3044\u623b\u308a\u5024\u3068\u3044\u3046\u308f\u3051\u3067\u3059\u3002\n\u3055\u3066\u3001\u3053\u308c\u3092\u5b9f\u969b\u306b\u4f7f\u3046\u30b3\u30fc\u30c9\u306f\u4ee5\u4e0b\u306b\u306a\u308a\u307e\u3059\u3002\n\n```\ntemplate < class Ty, class Deleter = std::default_delete < Ty > >\nusing unique_ptr = ex_smart_ptr < std::unique_ptr < Ty, Deleter > >;\n\ntemplate < class Ty >\nusing shared_ptr = ex_smart_ptr < std::shared_ptr < Ty > >;\n\ntemplate < class Ty >\nusing weak_ptr = ex_smart_ptr < std::weak_ptr < Ty > >;\n```\n\n\u6c4e\u7528\u7684\u306a\u8a18\u8ff0\u304c\u53ef\u80fd\u306b\u306a\u308a\u307e\u3057\u305f\u3002\nstd::unique_ptr\u3068\u4ed6\uff12\u3064\u3067\u306f\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u5f15\u6570\u304c\u7570\u306a\u308b\u306e\u3067\u305d\u306e\u5dee\u3092\u5438\u53ce\u3059\u308b\u306e\u304c\u3053\u306e\u90e8\u5206\u306b\u306a\u308a\u307e\u3059\u3002\n\u6a19\u6e96\u3067\u306a\u3044\u30b9\u30de\u30fc\u30c8\u30dd\u30a4\u30f3\u30bf\u306b\u5bfe\u5fdc\u3055\u305b\u3088\u3046\u3068\u601d\u3046\u306e\u306a\u3089\u3001element_type\u3068get()\u95a2\u6570\u3092\u305d\u308c\u305e\u308c\u6a4b\u6e21\u3057\u3059\u308b\u3082\u306e\u3092\u4f5c\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\u6216\u3044\u306ftraits\u3092\u524d\u63d0\u306b\u3057\u3066ex_smart_ptr\u3092\u66f8\u304d\u76f4\u3057\u305f\u65b9\u304c\u697d\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u3002\n\n\u3053\u3053\u307e\u3067\u3084\u3063\u3066\u306a\u3093\u3067\u3059\u304c\u3001->\\*\u6f14\u7b97\u5b50\u3092\u4f7f\u3046\u6a5f\u4f1a\u3063\u3066\u3042\u307e\u308a\u306a\u3044\u3093\u3067\u3059\u3088\u306d\u3002\n\u306a\u306b\u304b\u306e\u53c2\u8003\u306b\u306a\u308c\u3070\u5e78\u3044\u3067\u3059\u3002\n", "tags": ["C++11", "C++"]}