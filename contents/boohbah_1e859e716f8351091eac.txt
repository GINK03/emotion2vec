{"context": "\u6211\u3005Sansan\u793e\u3067\u306f\u5e74\u3005\u793e\u54e1\u304c\u5897\u52a0\u3057\u3001\u305d\u308c\u306b\u4f34\u3044\u30c8\u30a4\u30ec\u306e\u30ea\u30bd\u30fc\u30b9\u554f\u984c\u304c\u9855\u8457\u306b\u306a\u3063\u3066\u304d\u307e\u3057\u305f\u3002\u305d\u3053\u3067\u30c8\u30a4\u30ec\u306e\u7a7a\u304d\u72b6\u6cc1\u304c\u30ea\u30a2\u30eb\u30bf\u30a4\u30e0\u306b\u308f\u304b\u308b\u3068\u5b09\u3057\u3044\uff01\u3068\u3044\u3046\u58f0\u304c\u3042\u304c\u308a\u30c8\u30a4\u30ec\u306e\u7a7a\u304d\u72b6\u6cc1\u3092\u76e3\u8996\u3059\u308b\u30b7\u30b9\u30c6\u30e0\u3092\u4f5c\u3063\u3066\u307f\u307e\u3057\u305f\u3002\n\n\u6982\u8981\n\u4f5c\u308b\u30b7\u30b9\u30c6\u30e0\u306f\u4ee5\u4e0b\u306e\u56f3\u306e\u3088\u3046\u306a\u611f\u3058\u3067\u3059\u3002\n\n\u30c9\u30a2\u958b\u9589\u30bb\u30f3\u30b5\u30fc (\u30ea\u30fc\u30c9\u30b9\u30a4\u30c3\u30c1 + TWE-Lite\u306b\u3088\u308b\u30ef\u30a4\u30e4\u30ec\u30b9\u30fb\u30b7\u30b9\u30c6\u30e0\uff09\nRaspberry Pi \u3067\u30bb\u30f3\u30b5\u30fc\u306e\u4fe1\u53f7\u3092\u53d7\u53d6\u30b5\u30fc\u30d0\u306b\u9001\u4fe1\nFirebase database\u3067\u72b6\u614b\u3092\u7ba1\u7406\nweb\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u3067\u30ea\u30a2\u30eb\u30bf\u30a4\u30e0\u306b\u60c5\u5831\u3092\u66f4\u65b0\n\n\n\n\u30c9\u30a2\u958b\u9589\u30bb\u30f3\u30b5\u30fc\n\u3053\u3061\u3089\u306e\u8a18\u4e8b\u3092\u53c2\u8003\u306b\u4f5c\u308a\u307e\u3057\u305f\u3002\n\u7121\u7dda\u30c9\u30a2\u958b\u9589\u30bb\u30f3\u30b5\u3092\u4f5c\u308b\nhttp://qiita.com/ksasao/items/1a221843894fdb57677b\n\u90e8\u54c1\u3084\u56de\u8def\u306a\u3069\u306f\u5168\u304f\u3053\u306e\u8a18\u4e8b\u306b\u3042\u308b\u901a\u308a\u306b\u3057\u3066\u3042\u308a\u307e\u3059\u3002\n\nTWE-Lite\u3078\u306e\u30d5\u30a1\u30fc\u30e0\u30a6\u30a7\u30a2\u306e\u713c\u304d\u8fbc\u307f\u306b\u82e6\u52b4\u3057\u305f\u306e\u3067\u3001\u4ee5\u4e0b\u8a18\u9332\u3067\u3059\u3002\n\nTWE-Lite\u3078\u306e\u30d5\u30a1\u30fc\u30e0\u30a6\u30a7\u30a2\u306e\u713c\u304d\u8fbc\u307f\nhttp://mono-wireless.com/jp/tech/misc/jenprog/index.html\n\u304b\u3089pyserial\u3092\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3057\u3066\u5c55\u958b\u3057\nsudo python setup.py install\n\n\u3092\u5b9f\u884c\u3057\u3066pyserial\u3092\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\nhttp://mono-wireless.com/jp/products/TWE-NET/TWESDK.html\n\u304b\u3089 2014/08\u6708\u53f7 SDK \u30d5\u30a1\u30a4\u30eb \u3092\u30c0\u30f3\u30ed\u30fc\u30c9\u3057\u3066\u5c55\u958b\ncd TWESDK/Tools/jenprog\nchmod +x jenprog\nchmod +x tweusb\n\nhttp://www.ftdichip.com/Drivers/VCP.htm\n\u304b\u3089 Mac OS X 10.9 and above    2015-04-15 2.3 \u3092\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\nFTDI USB Serial Driver \u3092\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\nTWI-LITE-R\u3092USB\u306b\u5dee\u3057\u8fbc\u3093\u3067\u78ba\u8a8d\n $ls /dev/tty.usbserial*\n> /dev/tty.usbserial-MW7LR3T\n\njenprog\u306e\u4f7f\u3044\u65b9\nUsage: jenprog.py [options]\n\nOptions:\n  -h, --help            show this help message and exit\n  -a ADDR, --address=ADDR\n                        start reading at address\n  -l LEN, --len=LEN     number of bytes to read\n  -m MAC, --mac=MAC     reset the mac addr (e.g. -m 01234567ABCDABCD)\n  -k KEY, --key=KEY     reset the license key\n  -v, --verify          also verify after writing\n  -z, --compare         compare between flash content and specified file\n  -s, --show            show mac address and license key\n  -e, --erase           erasing the flash after reading mac and license key\n  -b BAUD, --baud=BAUD  baud rate for serial connection.\n  -t TARGET, --target=TARGET\n                        target for connection\n  -F, --force           skip firmware compatibility\n  -C, --list-com-ports  skip firmware compatibility\n  -D CDIR, --current_dir=CDIR\n                        current directory\n\n\u3053\u308c\u3067\u30bf\u30fc\u30b2\u30c3\u30c8\u306e\u60c5\u5831\u3092\u53d6\u5f97\u3059\u308b\njenprog -t /dev/tty.usbserial-MW7LR3T -s\n\n\u2191\u3053\u306e\u64cd\u4f5c\u306f\u30bf\u30fc\u30b2\u30c3\u30c8\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u30dc\u30bf\u30f3\u3092\u62bc\u3057\u306a\u304c\u3089\u3001\u30ea\u30bb\u30c3\u30c8\u3057\u3066\u30d7\u30ed\u30b0\u30e9\u30e0\u30e2\u30fc\u30c9\u306b\u3059\u308b\u5fc5\u8981\u304c\u3042\u308b\u3002\n  flash   : JN516x Internal Flash\n  chip id : 0x10408686\n  mac addr: 0x001bc501210e016b\n\n\u3053\u3093\u306a\u611f\u3058\u3067\u60c5\u5831\u304c\u3068\u308c\u307e\u3059\u3002\n\u6b21\u306b\u30d5\u30a1\u30fc\u30e0\u30a6\u30a7\u30a2\u3092\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3002\nhttp://mono-wireless.com/jp/products/Software_download/index.html\nver 1.7.1 \u30bd\u30d5\u30c8\u30a6\u30a7\u30a2(\u30bd\u30fc\u30b9\u542b) \n\u203b \u5b9f\u9a13\u7684\u306a\u5b9f\u88c5\u3002\uff08\u6700\u65b0\u7248\u3067\u306f\u3042\u308a\u307e\u305b\u3093\u3002v1.6.6 \u4ee5\u964d\u306f\u53cd\u6620\u3055\u308c\u3066\u3044\u307e\u305b\u3093\uff09\n\u203b \u30aa\u30d7\u30b7\u30e7\u30f3\u30d3\u30c3\u30c8\uff12\u306e\u8ffd\u52a0\uff08bit0:3\u21d2DI1-4, bit4:7\u21d2DO1-4 \u306e\u30d7\u30eb\u30a2\u30c3\u30d7\u505c\u6b62\uff09\n\u203b \u30d0\u30a4\u30ca\u30ea\u306f Master/Build \u4ee5\u4e0b\u306b\u683c\u7d0d (*_JN5164*.bin \u21d2 TWE-Lite \u7528)\n\n\u3061\u3087\u3063\u3068\u6016\u3044\u3051\u3069\u3053\u308c\u3092\u713c\u304d\u8fbc\u3080\n\u713c\u304d\u3053\u3080\u30d5\u30a1\u30a4\u30eb\nApp_TweLite_1_7_1_unoff\\App_TweLite\\Master\\Build\\App_TweLite_Master_JN5164_1_7_1.bin\n\n\u4ee5\u4e0b\u306e\u30b3\u30de\u30f3\u30c9\u3067\u66f8\u304d\u8fbc\u307f\njenprog -t /dev/tty.usbserial-MW7LR3T ./App_TweLite/Master/Build/App_TweLite_Master_JN5164_1_7_1.bin\n\n\u3080\u30fc\u3001\u66f8\u304d\u8fbc\u307f\u306b\u5931\u6557\u3059\u308b\u306a\u3042\n$ jenprog -t /dev/tty.usbserial-MW7LR3T ./App_TweLite/Master/Build/App_TweLite_Master_JN5164_1_7_1.bin\n*** jenprog ver 1.3 ***\n file info: 04 03 0008\nwriting...\n  0%..10%..\nERROR(2): communication with the target\n\n\u3080\u30fc 30%\u307e\u3067\u3044\u3063\u3066\u5931\u6557\u3002\u3002\u3002\nwriting...\n  0%..10%..20%..30%..\nERROR(2): communication with the target\n\n\u3069\u3046\u3082\u3053\u308c\u3068\u540c\u3058\u554f\u984c\u307f\u305f\u3044\u3002\nTWE-Lite-R\u3067twe-lite\u306e\u30d5\u30a1\u30fc\u30e0\u30a6\u30a7\u30a2\u66f8\u304d\u8fbc\u307f\u3057\u305f\u3089\u30a8\u30e9\u30fc\u304c\u51fa\u305f\nhttp://qiita.com/tittea/items/56e3aa5cd5f64b8328e9\n$ jenprog -t /dev/tty.usbserial-MW7LR3T App_TweLite_Master_JN5164_1_7_1.bin -b 38400\n*** jenprog ver 1.3 ***\n file info: 04 03 0008\nwriting...\n  0%..10%..20%..30%..40%..50%..60%..70%..80%..90%..done - 2.66 kb/s\ndone\n\nOK: firmware is successfully programmed.\n\n\u30b1\u30fc\u30d6\u30eb\u3092\u4f55\u672c\u304b\u305f\u3081\u3057\u3066\u307f\u3066\u3001\u30dc\u30fc\u30ec\u30fc\u30c8 38400\u3067\u6210\u529f\uff01\n\n\u3067\u304d\u3042\u304c\u308a\n\n\u3053\u3093\u306a\u611f\u3058\u3067\u3059\u3002\nSansan\u3089\u3057\u304f\u540d\u523a\u30b1\u30fc\u30b9\u306b\u5165\u308c\u3066\u307f\u307e\u3057\u305f\u3002\n\nRaspberry Pi\nRspberry Pi\u306b\u306fMono stick\u3092\u633f\u3057\u3066\u3001TWE-Lite\u304b\u3089\u306e\u4fe1\u53f7\u3092\u53d7\u53d6\u308a\u3001\nHuawei\u306e\u30e2\u30d0\u30a4\u30eb\u30eb\u30fc\u30bfE8231\u3092\u633f\u3057\u3066\u3001Freetel\u306eSIM\u3067\u904b\u7528\u3057\u3066\u3044\u307e\u3059\u3002\n\n\u30b3\u30fc\u30c9\u306fpython\u3067\u8a18\u8ff0\u3057\u3066\u3044\u307e\u3059\u3002\n\npython\u306e\u30b3\u30fc\u30c9\n\n\u30e1\u30a4\u30f3\u95a2\u6570\n\u30e1\u30a4\u30f3\u30eb\u30fc\u30d7\u3067\u30b7\u30ea\u30a2\u30eb\u304b\u3089\u30c7\u30fc\u30bf\u3092\u53d7\u3051\u53d6\u308a\u3001\u5fc5\u8981\u306b\u5fdc\u3058\u3066\u5404\u30bb\u30f3\u30b5\u30fc\u30c7\u30d0\u30a4\u30b9\u306b\u5bfe\u5fdc\u3059\u308b\u30cf\u30f3\u30c9\u30e9\u3067\u60c5\u5831\u3092\u51e6\u7406\u3057\u3066\u3044\u307e\u3059\u3002\n\nmain.py\nimport device_state\n\nimport serial_reader\n\nimport server_api\n\n\nif __name__ == \"__main__\":\n    print(\"start\")\n    reader = serial_reader.SerialReader()\n\n    api = server_api.ServerApi()\n    state_11f_gentlemen_a = device_state.DeviceState(1, \"11f_gentlemen_a\", api)\n    state_11f_gentlemen_b = device_state.DeviceState(2, \"11f_gentlemen_b\", api)\n\n    while True:\n        try:\n            state_11f_gentlemen_a.health_check()\n            state_11f_gentlemen_b.health_check()\n            line = reader.read()\n            state_11f_gentlemen_a.handle_serial(line)\n            state_11f_gentlemen_b.handle_serial(line)\n        except KeyboardInterrupt:\n            break\n        except:\n            continue\n\n    reader.close()\n\n\n\nMono stick\u304b\u3089\u306e\u4fe1\u53f7\u306e\u3046\u3051\u3068\u308a\n\u30b7\u30ea\u30a2\u30eb\u30dd\u30fc\u30c8\u304b\u3089\u8aad\u307f\u51fa\u3057\u307e\u3059\u3002\n\nserial_reader.py\nimport serial\n\n\nclass SerialReader:\n\n    def __init__(self, port=\"/dev/ttyUSB0\", borate=115200, timeout=0.5):\n        self.ser = serial.Serial(port, borate, timeout=timeout)\n\n    def read(self):\n        return self.ser.readline().decode(\"utf-8\")\n\n    def close(self):\n        self.ser.close()\n\n\n\n\n\u30c7\u30d0\u30a4\u30b9\u306e\u72b6\u614b\u306e\u7ba1\u7406\n\u30c7\u30d0\u30a4\u30b9\u3054\u3068\u306b\u30b7\u30ea\u30a2\u30eb\u901a\u4fe1\u3067\u53d6\u5f97\u3057\u305f\u30c7\u30fc\u30bf\u3092\u53d7\u53d6\u308a\u3001\u5fc5\u8981\u306b\u5fdc\u3058\u3066\u30b5\u30fc\u30d0\u306b\u72b6\u614b\u3092\u9001\u4fe1\u3057\u307e\u3059\u3002\n\u307e\u305f\u3001\u30c7\u30d0\u30a4\u30b9\u304b\u308960\u79d2\u9593\u4f55\u306e\u30c7\u30fc\u30bf\u3082\u9001\u3089\u308c\u3066\u6765\u306a\u3044\u5834\u5408\u306bhealth check\u306b\u30c7\u30fc\u30bf\u3092\u6295\u3052\u307e\u3059\u3002\n\ndevice_state.py\nfrom datetime import datetime, timedelta\n\n\nclass DeviceState:\n    def __init__(self, device_id, device_name, server_api):\n        self.server_api = server_api\n        self.device_id = device_id\n        self.device_name = device_name\n        self.is_open = True\n        self.last_call = datetime.now()\n        self.health = \"initial\"\n\n    def open(self):\n        if self.is_open:\n            return\n        self.time_delta = (datetime.now() - self.start_time)\n        self.is_open = True\n        self.server_api.set_vacant(self.device_name)\n        self.server_api.set_log(\n            self.device_name, self.start_time, datetime.now())\n\n    def close(self):\n        if not self.is_open:\n            return\n        self.start_time = datetime.now()\n        self.is_open = False\n        self.server_api.set_occupied(self.device_name)\n\n    def handle_serial(self, line):\n        if not int(line[2]) == self.device_id:\n            return False\n\n        self.last_call = datetime.now()\n        self.set_health(\"good\")\n        if int(line[34]) == 1:\n            print(\"device:{0} call close\".format(self.device_id))\n            self.close()\n        else:\n            print(\"device:{0} call open\".format(self.device_id))\n            self.open()\n        return True\n\n    def set_health(self, health):\n        print(\"device:{0} health:{1}\".format(self.device_id, health))\n        if not self.health == health or health == \"good\":\n            self.health = health\n            print(\"device:{0} send_health:{1}\".format(self.device_id, health))\n            self.server_api.send_health(self.device_name, health, datetime.now())\n\n    def health_check(self):\n        delta = datetime.now() - self.last_call\n        if delta > timedelta(seconds=60):\n            self.set_health(\"bad\")\n\n\n\nFirebase\u30b5\u30fc\u30d0\u3078\u306e\u30c7\u30fc\u30bf\u306e\u9001\u4fe1\n\n\u7a7a\u304d/\u4f7f\u7528\u4e2d\u306e\u72b6\u614b\u306e\u901a\u77e5\nhealth check\n\u30c8\u30a4\u30ec\u306e\u4f7f\u7528\u6642\u9593\u306e\u30ed\u30b0\n\u3092\u9001\u4fe1\u3057\u3066\u3044\u307e\u3059\u3002\n\n\nserver_api.py\nimport requests\nimport json\nfrom datetime import timezone, timedelta, datetime\n\n\nclass ServerApi:\n\n    def __init__(self):\n        self.jst = timezone(timedelta(hours=+9), 'JST')\n\n    def set_occupied(self, device_name):\n        url = \"https://xxxxxx.firebaseio.com/{0}/status.json\".format(\n            device_name)\n        print(url)\n        requests.put(url, \"\\\"occupied\\\"\")\n        return\n\n    def set_vacant(self, device_name):\n        url = \"https://xxxxxx.firebaseio.com/{0}/status.json\".format(\n            device_name)\n        print(url)\n        requests.put(url, \"\\\"vacant\\\"\")\n        return\n\n    def send_health(self, device_name, health, last_update):\n        url = \"https://xxxxxx.firebaseio.com/{0}/health.json\".format(\n            device_name)\n        print(url)\n        str = json.dumps(\n            {\"status\": health,\n             \"last_update\": last_update.replace(tzinfo=self.jst).isoformat()\n             })\n        requests.put(url, str)\n\n    def set_log(self, device_name, start_time, end_time):\n        start_time = start_time.replace(tzinfo=self.jst)\n        end_time = end_time.replace(tzinfo=self.jst)\n        path = start_time.strftime('%Y/%m/%d/%H')\n        url = \"https://xxxxxx.firebaseio.com/{0}/log/{1}.json\".format(\n            device_name, path)\n        print(url)\n        str = json.dumps(\n            {\"start_time\": start_time.isoformat(),\n             \"end_time\": end_time.isoformat()})\n        print(str)\n        requests.post(url, str)\n\n\n\n\nRaspberry Pi\u306e\u8d77\u52d5\u6642\u306b\u30b9\u30af\u30ea\u30d7\u30c8\u3092\u5b9f\u884c\u3059\u308b\n/etc/local.rc\n\n\u306b\u4ee5\u4e0b\u306e\u901a\u308a\u5b9f\u884c\u51e6\u7406\u3092\u8ffd\u52a0\npython3 /home/pi/main.py &\n\n\nRaspberry Pi\u3078\u306e\u30d5\u30a1\u30a4\u30eb\u306e\u8ee2\u9001\u65b9\u6cd5\nHuawei\u306e\u30e2\u30d0\u30a4\u30eb\u30eb\u30fc\u30bfE8231\u306f\u3001Wifi\u30eb\u30fc\u30bf\u3067\u3082\u3042\u308b\u306e\u3067\u3001\u3053\u306e\u30eb\u30fc\u30bf\u306bmac\u304b\u3089wifi\u3067\u63a5\u7d9a\u3059\u308b\u3053\u3068\u3067Raspberry Pi\u3068\u306f\u540c\u3058\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u4e0a\u306b\u5165\u308c\u308b\u306e\u3067\u3001\u305d\u3053\u3067ssh\u63a5\u7d9a\u3059\u308b\u3053\u3068\u304c\u51fa\u6765\u307e\u3059\u3002\n\u30e9\u30ba\u30d1\u30a4\u306bE8321\u304c\u523a\u3055\u3063\u3066\u3044\u308b\u72b6\u614b\u3067\u96fb\u6e90\u3092\u5165\u308c\u308b \u4ee5\u4e0b\u306bWifi\u63a5\u7d9a\nSSID: HUAWEI-E8231-ddo2\nKey: XXXXXXXXXXX\n(Key\u306fE8321\u672c\u4f53\u306b\u8a18\u8f09)\n\nSSH\u3067\u63a5\u7d9a\n$ ssh pi@192.168.8.100\npassword: raspberry\n\n\u3068\u3066\u3082\u7c21\u5358\uff01\n\u4ee5\u4e0b\u306e\u30b3\u30de\u30f3\u30c9\u3067\u30d5\u30a1\u30a4\u30eb\u3092\u8ee2\u9001\n$ scp -C ./*py pi@192.168.8.100:/home/pi/sansan-wc\npassword: raspberry\n\nssh\u30ed\u30b0\u30a4\u30f3\u3057\u4ee5\u4e0b\u306e\u30b3\u30de\u30f3\u30c9\u3092\u5b9f\u884c\nsudo reboot\n\n\nFirebase\nFirebase database\u306e\u30c7\u30fc\u30bf\u69cb\u9020\u306f\u4ee5\u4e0b\u306e\u901a\u308a\u3067\u3059\u3002\n\n\nWeb\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\nWeb\u306e\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u306fFirebase\u306ejavascript\u30af\u30e9\u30a2\u30f3\u30c8\u3092\u4f7f\u3044\u3001\u30ea\u30a2\u30eb\u30bf\u30a4\u30e0\u3067\u60c5\u5831\u3092\u53d6\u5f97\u3059\u308b\u3088\u3046\u306b\u3057\u3066\u3044\u307e\u3059\u3002\n$(function() {\n    listen('11f_gentlemen_a')\n    listen('11f_gentlemen_b')\n\n    function listen(device){\n        firebase.database().ref(device + '/status').on('value', function(data) {\n            updateStatus(device, data.val())\n        });\n        firebase.database().ref(device + '/health').on('value', function(data) {\n            updateHealth(device, data)\n        });\n    }\n\n    function updateStatus(device, value){\n        var node = $('#' + device + '_status')\n        switch(value){\n            case \"vacant\": {\n                node.text(\"\u7a7a\u304d\")\n                break;\n            }\n            case \"occupied\": {\n                node.text(\"\u4f7f\u7528\u4e2d\")\n                break;\n            }\n        }\n    }\n    function updateHealth(device, data){\n        var healthNode = $('#' + device + '_health')\n        switch(data.val().status){\n            case \"good\":{\n                healthNode.text(\"\u7a3c\u50cd\u4e2d\")\n                break;\n            }\n            case \"bad\":{\n                healthNode.text(\"\u505c\u6b62\u4e2d\")\n                break;\n            }\n        }\n        var lastUpdateNode = $('#' + device + '_last_update')\n        var date = new Date(data.val().last_update)\n        lastUpdateNode.text(date)\n    }\n});\n\n\n\u307e\u3068\u3081\n\u88fd\u4f5c\u671f\u9593\u306f\u30c8\u30fc\u30bf\u30eb\u3067\uff15\u65e5\u304f\u3089\u3044\u3002\n\u307f\u308b\u304b\u3089\u306b\u602a\u3057\u3044\u306e\u3067\u554f\u3044\u5408\u308f\u305b\u304c\u76f8\u6b21\u304e\u307e\u3057\u305f\u3002\n\n\u6211\u3005Sansan\u793e\u3067\u306f\u5e74\u3005\u793e\u54e1\u304c\u5897\u52a0\u3057\u3001\u305d\u308c\u306b\u4f34\u3044\u30c8\u30a4\u30ec\u306e\u30ea\u30bd\u30fc\u30b9\u554f\u984c\u304c\u9855\u8457\u306b\u306a\u3063\u3066\u304d\u307e\u3057\u305f\u3002\u305d\u3053\u3067\u30c8\u30a4\u30ec\u306e\u7a7a\u304d\u72b6\u6cc1\u304c\u30ea\u30a2\u30eb\u30bf\u30a4\u30e0\u306b\u308f\u304b\u308b\u3068\u5b09\u3057\u3044\uff01\u3068\u3044\u3046\u58f0\u304c\u3042\u304c\u308a\u30c8\u30a4\u30ec\u306e\u7a7a\u304d\u72b6\u6cc1\u3092\u76e3\u8996\u3059\u308b\u30b7\u30b9\u30c6\u30e0\u3092\u4f5c\u3063\u3066\u307f\u307e\u3057\u305f\u3002\n\n# \u6982\u8981\n\n\u4f5c\u308b\u30b7\u30b9\u30c6\u30e0\u306f\u4ee5\u4e0b\u306e\u56f3\u306e\u3088\u3046\u306a\u611f\u3058\u3067\u3059\u3002\n\n- \u30c9\u30a2\u958b\u9589\u30bb\u30f3\u30b5\u30fc (\u30ea\u30fc\u30c9\u30b9\u30a4\u30c3\u30c1 + TWE-Lite\u306b\u3088\u308b\u30ef\u30a4\u30e4\u30ec\u30b9\u30fb\u30b7\u30b9\u30c6\u30e0\uff09\n- Raspberry Pi \u3067\u30bb\u30f3\u30b5\u30fc\u306e\u4fe1\u53f7\u3092\u53d7\u53d6\u30b5\u30fc\u30d0\u306b\u9001\u4fe1\n- Firebase database\u3067\u72b6\u614b\u3092\u7ba1\u7406\n- web\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u3067\u30ea\u30a2\u30eb\u30bf\u30a4\u30e0\u306b\u60c5\u5831\u3092\u66f4\u65b0\n\n\n![\u30c8\u30a4\u30ec\u7ba1\u7406\u30b7\u30b9\u30c6\u30e0.png](https://qiita-image-store.s3.amazonaws.com/0/8308/1eb23ec7-60ba-df39-7b24-46a12a9e16af.png \"\u30c8\u30a4\u30ec\u7ba1\u7406\u30b7\u30b9\u30c6\u30e0.png\")\n\n\n\n# \u30c9\u30a2\u958b\u9589\u30bb\u30f3\u30b5\u30fc\n\n\u3053\u3061\u3089\u306e\u8a18\u4e8b\u3092\u53c2\u8003\u306b\u4f5c\u308a\u307e\u3057\u305f\u3002\n\n\u7121\u7dda\u30c9\u30a2\u958b\u9589\u30bb\u30f3\u30b5\u3092\u4f5c\u308b\nhttp://qiita.com/ksasao/items/1a221843894fdb57677b\n\n\u90e8\u54c1\u3084\u56de\u8def\u306a\u3069\u306f\u5168\u304f\u3053\u306e\u8a18\u4e8b\u306b\u3042\u308b\u901a\u308a\u306b\u3057\u3066\u3042\u308a\u307e\u3059\u3002\n\n![\u30c8\u30a4\u30ec\u7ba1\u7406\u30b7\u30b9\u30c6\u30e0.png](https://qiita-image-store.s3.amazonaws.com/0/8308/a6251dc0-0cd4-2985-0d12-2e45ea124ebe.png \"\u30c8\u30a4\u30ec\u7ba1\u7406\u30b7\u30b9\u30c6\u30e0.png\")\n\n\n\n\nTWE-Lite\u3078\u306e\u30d5\u30a1\u30fc\u30e0\u30a6\u30a7\u30a2\u306e\u713c\u304d\u8fbc\u307f\u306b\u82e6\u52b4\u3057\u305f\u306e\u3067\u3001\u4ee5\u4e0b\u8a18\u9332\u3067\u3059\u3002\n\n## TWE-Lite\u3078\u306e\u30d5\u30a1\u30fc\u30e0\u30a6\u30a7\u30a2\u306e\u713c\u304d\u8fbc\u307f\n\nhttp://mono-wireless.com/jp/tech/misc/jenprog/index.html\n\u304b\u3089pyserial\u3092\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3057\u3066\u5c55\u958b\u3057\n\n```\nsudo python setup.py install\n```\n\u3092\u5b9f\u884c\u3057\u3066pyserial\u3092\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\n\nhttp://mono-wireless.com/jp/products/TWE-NET/TWESDK.html\n\u304b\u3089 `2014/08\u6708\u53f7 SDK \u30d5\u30a1\u30a4\u30eb ` \u3092\u30c0\u30f3\u30ed\u30fc\u30c9\u3057\u3066\u5c55\u958b\n\n```\ncd TWESDK/Tools/jenprog\nchmod +x jenprog\nchmod +x tweusb\n```\n\nhttp://www.ftdichip.com/Drivers/VCP.htm\n\u304b\u3089 `Mac OS X 10.9 and above    2015-04-15 2.3` \u3092\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\n`FTDI USB Serial Driver` \u3092\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\n\nTWI-LITE-R\u3092USB\u306b\u5dee\u3057\u8fbc\u3093\u3067\u78ba\u8a8d\n\n```\n $ls /dev/tty.usbserial*\n> /dev/tty.usbserial-MW7LR3T\n```\n\n\n\n\njenprog\u306e\u4f7f\u3044\u65b9\n\n```\nUsage: jenprog.py [options]\n\nOptions:\n  -h, --help            show this help message and exit\n  -a ADDR, --address=ADDR\n                        start reading at address\n  -l LEN, --len=LEN     number of bytes to read\n  -m MAC, --mac=MAC     reset the mac addr (e.g. -m 01234567ABCDABCD)\n  -k KEY, --key=KEY     reset the license key\n  -v, --verify          also verify after writing\n  -z, --compare         compare between flash content and specified file\n  -s, --show            show mac address and license key\n  -e, --erase           erasing the flash after reading mac and license key\n  -b BAUD, --baud=BAUD  baud rate for serial connection.\n  -t TARGET, --target=TARGET\n                        target for connection\n  -F, --force           skip firmware compatibility\n  -C, --list-com-ports  skip firmware compatibility\n  -D CDIR, --current_dir=CDIR\n                        current directory\n```\n\n\u3053\u308c\u3067\u30bf\u30fc\u30b2\u30c3\u30c8\u306e\u60c5\u5831\u3092\u53d6\u5f97\u3059\u308b\n\n```\njenprog -t /dev/tty.usbserial-MW7LR3T -s\n```\n\n\u2191\u3053\u306e\u64cd\u4f5c\u306f\u30bf\u30fc\u30b2\u30c3\u30c8\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u30dc\u30bf\u30f3\u3092\u62bc\u3057\u306a\u304c\u3089\u3001\u30ea\u30bb\u30c3\u30c8\u3057\u3066\u30d7\u30ed\u30b0\u30e9\u30e0\u30e2\u30fc\u30c9\u306b\u3059\u308b\u5fc5\u8981\u304c\u3042\u308b\u3002\n\n\n```\n  flash   : JN516x Internal Flash\n  chip id : 0x10408686\n  mac addr: 0x001bc501210e016b\n```\n\n\u3053\u3093\u306a\u611f\u3058\u3067\u60c5\u5831\u304c\u3068\u308c\u307e\u3059\u3002\n\n\n\u6b21\u306b\u30d5\u30a1\u30fc\u30e0\u30a6\u30a7\u30a2\u3092\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3002\nhttp://mono-wireless.com/jp/products/Software_download/index.html\n\n```\nver 1.7.1 \u30bd\u30d5\u30c8\u30a6\u30a7\u30a2(\u30bd\u30fc\u30b9\u542b) \n\u203b \u5b9f\u9a13\u7684\u306a\u5b9f\u88c5\u3002\uff08\u6700\u65b0\u7248\u3067\u306f\u3042\u308a\u307e\u305b\u3093\u3002v1.6.6 \u4ee5\u964d\u306f\u53cd\u6620\u3055\u308c\u3066\u3044\u307e\u305b\u3093\uff09\n\u203b \u30aa\u30d7\u30b7\u30e7\u30f3\u30d3\u30c3\u30c8\uff12\u306e\u8ffd\u52a0\uff08bit0:3\u21d2DI1-4, bit4:7\u21d2DO1-4 \u306e\u30d7\u30eb\u30a2\u30c3\u30d7\u505c\u6b62\uff09\n\u203b \u30d0\u30a4\u30ca\u30ea\u306f Master/Build \u4ee5\u4e0b\u306b\u683c\u7d0d (*_JN5164*.bin \u21d2 TWE-Lite \u7528)\n```\n\n\u3061\u3087\u3063\u3068\u6016\u3044\u3051\u3069\u3053\u308c\u3092\u713c\u304d\u8fbc\u3080\n\n\u713c\u304d\u3053\u3080\u30d5\u30a1\u30a4\u30eb\n\n```\nApp_TweLite_1_7_1_unoff\\App_TweLite\\Master\\Build\\App_TweLite_Master_JN5164_1_7_1.bin\n```\n\n\u4ee5\u4e0b\u306e\u30b3\u30de\u30f3\u30c9\u3067\u66f8\u304d\u8fbc\u307f\n\n```\njenprog -t /dev/tty.usbserial-MW7LR3T ./App_TweLite/Master/Build/App_TweLite_Master_JN5164_1_7_1.bin\n```\n\n\u3080\u30fc\u3001\u66f8\u304d\u8fbc\u307f\u306b\u5931\u6557\u3059\u308b\u306a\u3042\n\n```\n$ jenprog -t /dev/tty.usbserial-MW7LR3T ./App_TweLite/Master/Build/App_TweLite_Master_JN5164_1_7_1.bin\n*** jenprog ver 1.3 ***\n file info: 04 03 0008\nwriting...\n  0%..10%..\nERROR(2): communication with the target\n```\n\n\u3080\u30fc 30%\u307e\u3067\u3044\u3063\u3066\u5931\u6557\u3002\u3002\u3002\n\n```\nwriting...\n  0%..10%..20%..30%..\nERROR(2): communication with the target\n```\n\n\u3069\u3046\u3082\u3053\u308c\u3068\u540c\u3058\u554f\u984c\u307f\u305f\u3044\u3002\n\nTWE-Lite-R\u3067twe-lite\u306e\u30d5\u30a1\u30fc\u30e0\u30a6\u30a7\u30a2\u66f8\u304d\u8fbc\u307f\u3057\u305f\u3089\u30a8\u30e9\u30fc\u304c\u51fa\u305f\nhttp://qiita.com/tittea/items/56e3aa5cd5f64b8328e9\n\n\n```\n$ jenprog -t /dev/tty.usbserial-MW7LR3T App_TweLite_Master_JN5164_1_7_1.bin -b 38400\n*** jenprog ver 1.3 ***\n file info: 04 03 0008\nwriting...\n  0%..10%..20%..30%..40%..50%..60%..70%..80%..90%..done - 2.66 kb/s\ndone\n\nOK: firmware is successfully programmed.\n```\n\n\u30b1\u30fc\u30d6\u30eb\u3092\u4f55\u672c\u304b\u305f\u3081\u3057\u3066\u307f\u3066\u3001\u30dc\u30fc\u30ec\u30fc\u30c8 38400\u3067\u6210\u529f\uff01\n\n## \u3067\u304d\u3042\u304c\u308a\n\n![IMG_2507.jpg](https://qiita-image-store.s3.amazonaws.com/0/8308/2c154a51-8029-0e5c-d036-b48f14ac661d.jpeg \"IMG_2507.jpg\")\n\n\u3053\u3093\u306a\u611f\u3058\u3067\u3059\u3002\nSansan\u3089\u3057\u304f\u540d\u523a\u30b1\u30fc\u30b9\u306b\u5165\u308c\u3066\u307f\u307e\u3057\u305f\u3002\n\n\n# Raspberry Pi\n\nRspberry Pi\u306b\u306fMono stick\u3092\u633f\u3057\u3066\u3001TWE-Lite\u304b\u3089\u306e\u4fe1\u53f7\u3092\u53d7\u53d6\u308a\u3001\nHuawei\u306e\u30e2\u30d0\u30a4\u30eb\u30eb\u30fc\u30bfE8231\u3092\u633f\u3057\u3066\u3001Freetel\u306eSIM\u3067\u904b\u7528\u3057\u3066\u3044\u307e\u3059\u3002\n\n![14890445_192909701154810_6364703619249552546_o.jpg](https://qiita-image-store.s3.amazonaws.com/0/8308/571cf5ce-b7ba-ca11-fccf-53f5a0929c8d.jpeg \"14890445_192909701154810_6364703619249552546_o.jpg\")\n\n\n\u30b3\u30fc\u30c9\u306fpython\u3067\u8a18\u8ff0\u3057\u3066\u3044\u307e\u3059\u3002\n\n## python\u306e\u30b3\u30fc\u30c9\n\n### \u30e1\u30a4\u30f3\u95a2\u6570\n\n\u30e1\u30a4\u30f3\u30eb\u30fc\u30d7\u3067\u30b7\u30ea\u30a2\u30eb\u304b\u3089\u30c7\u30fc\u30bf\u3092\u53d7\u3051\u53d6\u308a\u3001\u5fc5\u8981\u306b\u5fdc\u3058\u3066\u5404\u30bb\u30f3\u30b5\u30fc\u30c7\u30d0\u30a4\u30b9\u306b\u5bfe\u5fdc\u3059\u308b\u30cf\u30f3\u30c9\u30e9\u3067\u60c5\u5831\u3092\u51e6\u7406\u3057\u3066\u3044\u307e\u3059\u3002\n\n```python:main.py\nimport device_state\n\nimport serial_reader\n\nimport server_api\n\n\nif __name__ == \"__main__\":\n    print(\"start\")\n    reader = serial_reader.SerialReader()\n\n    api = server_api.ServerApi()\n    state_11f_gentlemen_a = device_state.DeviceState(1, \"11f_gentlemen_a\", api)\n    state_11f_gentlemen_b = device_state.DeviceState(2, \"11f_gentlemen_b\", api)\n\n    while True:\n        try:\n            state_11f_gentlemen_a.health_check()\n            state_11f_gentlemen_b.health_check()\n            line = reader.read()\n            state_11f_gentlemen_a.handle_serial(line)\n            state_11f_gentlemen_b.handle_serial(line)\n        except KeyboardInterrupt:\n            break\n        except:\n            continue\n\n    reader.close()\n```\n\n### Mono stick\u304b\u3089\u306e\u4fe1\u53f7\u306e\u3046\u3051\u3068\u308a\n\n\u30b7\u30ea\u30a2\u30eb\u30dd\u30fc\u30c8\u304b\u3089\u8aad\u307f\u51fa\u3057\u307e\u3059\u3002\n\n```python:serial_reader.py\nimport serial\n\n\nclass SerialReader:\n\n    def __init__(self, port=\"/dev/ttyUSB0\", borate=115200, timeout=0.5):\n        self.ser = serial.Serial(port, borate, timeout=timeout)\n\n    def read(self):\n        return self.ser.readline().decode(\"utf-8\")\n\n    def close(self):\n        self.ser.close()\n\n```\n\n### \u30c7\u30d0\u30a4\u30b9\u306e\u72b6\u614b\u306e\u7ba1\u7406\n\n\u30c7\u30d0\u30a4\u30b9\u3054\u3068\u306b\u30b7\u30ea\u30a2\u30eb\u901a\u4fe1\u3067\u53d6\u5f97\u3057\u305f\u30c7\u30fc\u30bf\u3092\u53d7\u53d6\u308a\u3001\u5fc5\u8981\u306b\u5fdc\u3058\u3066\u30b5\u30fc\u30d0\u306b\u72b6\u614b\u3092\u9001\u4fe1\u3057\u307e\u3059\u3002\n\u307e\u305f\u3001\u30c7\u30d0\u30a4\u30b9\u304b\u308960\u79d2\u9593\u4f55\u306e\u30c7\u30fc\u30bf\u3082\u9001\u3089\u308c\u3066\u6765\u306a\u3044\u5834\u5408\u306bhealth check\u306b\u30c7\u30fc\u30bf\u3092\u6295\u3052\u307e\u3059\u3002\n\n\n```python:device_state.py\nfrom datetime import datetime, timedelta\n\n\nclass DeviceState:\n    def __init__(self, device_id, device_name, server_api):\n        self.server_api = server_api\n        self.device_id = device_id\n        self.device_name = device_name\n        self.is_open = True\n        self.last_call = datetime.now()\n        self.health = \"initial\"\n\n    def open(self):\n        if self.is_open:\n            return\n        self.time_delta = (datetime.now() - self.start_time)\n        self.is_open = True\n        self.server_api.set_vacant(self.device_name)\n        self.server_api.set_log(\n            self.device_name, self.start_time, datetime.now())\n\n    def close(self):\n        if not self.is_open:\n            return\n        self.start_time = datetime.now()\n        self.is_open = False\n        self.server_api.set_occupied(self.device_name)\n\n    def handle_serial(self, line):\n        if not int(line[2]) == self.device_id:\n            return False\n\n        self.last_call = datetime.now()\n        self.set_health(\"good\")\n        if int(line[34]) == 1:\n            print(\"device:{0} call close\".format(self.device_id))\n            self.close()\n        else:\n            print(\"device:{0} call open\".format(self.device_id))\n            self.open()\n        return True\n\n    def set_health(self, health):\n        print(\"device:{0} health:{1}\".format(self.device_id, health))\n        if not self.health == health or health == \"good\":\n            self.health = health\n            print(\"device:{0} send_health:{1}\".format(self.device_id, health))\n            self.server_api.send_health(self.device_name, health, datetime.now())\n\n    def health_check(self):\n        delta = datetime.now() - self.last_call\n        if delta > timedelta(seconds=60):\n            self.set_health(\"bad\")\n```\n\n\n### Firebase\u30b5\u30fc\u30d0\u3078\u306e\u30c7\u30fc\u30bf\u306e\u9001\u4fe1\n\n- \u7a7a\u304d/\u4f7f\u7528\u4e2d\u306e\u72b6\u614b\u306e\u901a\u77e5\n- health check\n- \u30c8\u30a4\u30ec\u306e\u4f7f\u7528\u6642\u9593\u306e\u30ed\u30b0\n\u3092\u9001\u4fe1\u3057\u3066\u3044\u307e\u3059\u3002\n\n```python:server_api.py\nimport requests\nimport json\nfrom datetime import timezone, timedelta, datetime\n\n\nclass ServerApi:\n\n    def __init__(self):\n        self.jst = timezone(timedelta(hours=+9), 'JST')\n\n    def set_occupied(self, device_name):\n        url = \"https://xxxxxx.firebaseio.com/{0}/status.json\".format(\n            device_name)\n        print(url)\n        requests.put(url, \"\\\"occupied\\\"\")\n        return\n\n    def set_vacant(self, device_name):\n        url = \"https://xxxxxx.firebaseio.com/{0}/status.json\".format(\n            device_name)\n        print(url)\n        requests.put(url, \"\\\"vacant\\\"\")\n        return\n\n    def send_health(self, device_name, health, last_update):\n        url = \"https://xxxxxx.firebaseio.com/{0}/health.json\".format(\n            device_name)\n        print(url)\n        str = json.dumps(\n            {\"status\": health,\n             \"last_update\": last_update.replace(tzinfo=self.jst).isoformat()\n             })\n        requests.put(url, str)\n\n    def set_log(self, device_name, start_time, end_time):\n        start_time = start_time.replace(tzinfo=self.jst)\n        end_time = end_time.replace(tzinfo=self.jst)\n        path = start_time.strftime('%Y/%m/%d/%H')\n        url = \"https://xxxxxx.firebaseio.com/{0}/log/{1}.json\".format(\n            device_name, path)\n        print(url)\n        str = json.dumps(\n            {\"start_time\": start_time.isoformat(),\n             \"end_time\": end_time.isoformat()})\n        print(str)\n        requests.post(url, str)\n\n```\n\n## Raspberry Pi\u306e\u8d77\u52d5\u6642\u306b\u30b9\u30af\u30ea\u30d7\u30c8\u3092\u5b9f\u884c\u3059\u308b\n\n```\n/etc/local.rc\n```\n\n\u306b\u4ee5\u4e0b\u306e\u901a\u308a\u5b9f\u884c\u51e6\u7406\u3092\u8ffd\u52a0\n\n```\npython3 /home/pi/main.py &\n```\n\n## Raspberry Pi\u3078\u306e\u30d5\u30a1\u30a4\u30eb\u306e\u8ee2\u9001\u65b9\u6cd5\n\nHuawei\u306e\u30e2\u30d0\u30a4\u30eb\u30eb\u30fc\u30bfE8231\u306f\u3001Wifi\u30eb\u30fc\u30bf\u3067\u3082\u3042\u308b\u306e\u3067\u3001\u3053\u306e\u30eb\u30fc\u30bf\u306bmac\u304b\u3089wifi\u3067\u63a5\u7d9a\u3059\u308b\u3053\u3068\u3067Raspberry Pi\u3068\u306f\u540c\u3058\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u4e0a\u306b\u5165\u308c\u308b\u306e\u3067\u3001\u305d\u3053\u3067ssh\u63a5\u7d9a\u3059\u308b\u3053\u3068\u304c\u51fa\u6765\u307e\u3059\u3002\n\n\u30e9\u30ba\u30d1\u30a4\u306bE8321\u304c\u523a\u3055\u3063\u3066\u3044\u308b\u72b6\u614b\u3067\u96fb\u6e90\u3092\u5165\u308c\u308b \u4ee5\u4e0b\u306bWifi\u63a5\u7d9a\n\n```\nSSID: HUAWEI-E8231-ddo2\nKey: XXXXXXXXXXX\n(Key\u306fE8321\u672c\u4f53\u306b\u8a18\u8f09)\n```\n\nSSH\u3067\u63a5\u7d9a\n\n```\n$ ssh pi@192.168.8.100\npassword: raspberry\n```\n\n\u3068\u3066\u3082\u7c21\u5358\uff01\n\u4ee5\u4e0b\u306e\u30b3\u30de\u30f3\u30c9\u3067\u30d5\u30a1\u30a4\u30eb\u3092\u8ee2\u9001\n\n```\n$ scp -C ./*py pi@192.168.8.100:/home/pi/sansan-wc\npassword: raspberry\n```\n\nssh\u30ed\u30b0\u30a4\u30f3\u3057\u4ee5\u4e0b\u306e\u30b3\u30de\u30f3\u30c9\u3092\u5b9f\u884c\n\n```\nsudo reboot\n```\n\n# Firebase\n\nFirebase database\u306e\u30c7\u30fc\u30bf\u69cb\u9020\u306f\u4ee5\u4e0b\u306e\u901a\u308a\u3067\u3059\u3002\n\n![Firebase_Console.png](https://qiita-image-store.s3.amazonaws.com/0/8308/1ab74307-a878-eb4d-3e64-a3de2b71e6e0.png \"Firebase_Console.png\")\n\n\n# Web\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\n\nWeb\u306e\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u306fFirebase\u306ejavascript\u30af\u30e9\u30a2\u30f3\u30c8\u3092\u4f7f\u3044\u3001\u30ea\u30a2\u30eb\u30bf\u30a4\u30e0\u3067\u60c5\u5831\u3092\u53d6\u5f97\u3059\u308b\u3088\u3046\u306b\u3057\u3066\u3044\u307e\u3059\u3002\n\n\n```\n$(function() {\n\tlisten('11f_gentlemen_a')\n\tlisten('11f_gentlemen_b')\n\n\tfunction listen(device){\n\t\tfirebase.database().ref(device + '/status').on('value', function(data) {\n\t\t\tupdateStatus(device, data.val())\n\t\t});\n\t\tfirebase.database().ref(device + '/health').on('value', function(data) {\n\t\t\tupdateHealth(device, data)\n\t\t});\n\t}\n\n\tfunction updateStatus(device, value){\n\t\tvar node = $('#' + device + '_status')\n\t\tswitch(value){\n\t\t\tcase \"vacant\": {\n\t\t\t\tnode.text(\"\u7a7a\u304d\")\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tcase \"occupied\": {\n\t\t\t\tnode.text(\"\u4f7f\u7528\u4e2d\")\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\tfunction updateHealth(device, data){\n\t\tvar healthNode = $('#' + device + '_health')\n\t\tswitch(data.val().status){\n\t\t\tcase \"good\":{\n\t\t\t\thealthNode.text(\"\u7a3c\u50cd\u4e2d\")\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tcase \"bad\":{\n\t\t\t\thealthNode.text(\"\u505c\u6b62\u4e2d\")\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tvar lastUpdateNode = $('#' + device + '_last_update')\n\t\tvar date = new Date(data.val().last_update)\n\t\tlastUpdateNode.text(date)\n\t}\n});\n```\n\n# \u307e\u3068\u3081\n\n\u88fd\u4f5c\u671f\u9593\u306f\u30c8\u30fc\u30bf\u30eb\u3067\uff15\u65e5\u304f\u3089\u3044\u3002\n\u307f\u308b\u304b\u3089\u306b\u602a\u3057\u3044\u306e\u3067\u554f\u3044\u5408\u308f\u305b\u304c\u76f8\u6b21\u304e\u307e\u3057\u305f\u3002\n\n\n\n\n", "tags": ["Firebase", "RaspberryPi", "TWE-Lite", "\u304a\u3046\u3061\u30cf\u30c3\u30af", "\u96fb\u5b50\u5de5\u4f5c"]}