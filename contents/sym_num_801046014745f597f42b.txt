{"context": "\n\n\u306f\u3058\u3081\u306b\nISLisp\u51e6\u7406\u7cfb\u3092\u81ea\u4f5c\u3057\u305f\u3068\u304d\u306bISLisp\u898f\u683c\u306b\u9069\u5408\u3057\u3066\u3044\u308b\u304b\u3069\u3046\u304b\u306e\u691c\u67fb\u306b\u304a\u4f7f\u3044\u304f\u3060\u3055\u3044\u3002\n\n\u5229\u7528\u65b9\u6cd5\n\u30b3\u30fc\u30c9\u3092\u30d5\u30a1\u30a4\u30eb\u306b\u30bb\u30fc\u30d6\u3057\u3001\u51e6\u7406\u7cfb\u304b\u3089\u30ed\u30fc\u30c9\u3057\u3066\u304f\u3060\u3055\u3044\u3002\u7d50\u679c\u304c\u753b\u9762\u8868\u793a\u3055\u308c\u307e\u3059\u3002\n\n\u7bc4\u56f2\n\u30ea\u30b9\u30c8\u306e\u90e8\u5206\u3092\u30c6\u30b9\u30c8\u3057\u3066\u3044\u307e\u3059\u3002\n\n\u51fa\u5178\nISLisp\u691c\u8a3c\u30b7\u30b9\u30c6\u30e0\nhttp://islisp.org/jp/verification-jp.html\n\n\u30b3\u30fc\u30c9\n\n(defmacro test(form1 form2 :rest pred)\n  (if (null pred)\n      `(if (equal ,form1 ',form2)\n           (format (standard-output) \"~S is ok~%\" ',form1)\n           (format (standard-output) \"~S is bad~%\" ',form1))\n      `(if (,@pred ,form1 ',form2)\n           (format (standard-output) \"~S is ok~%\" ',form1)\n           (format (standard-output) \"~S is bad~%\" ',form1))))\n\n\n;;; \u95a2\u6570 (CONSP obj) --> boolean\n;;;\n(test (consp '(a . b)) t)\n(test (consp '(a b c)) t)\n(test (consp '()) nil)\n(test (consp #(a b)) nil)\n\n(test (consp (create-list 1000 'a)) t)\n\n;;;\n;;; \u95a2\u6570 (CONS obj1 obj2) --> <cons>\n;;;\n\n(test (cons 'a '()) (a) equal)\n(test (cons '(a) '(b c d)) ((a) b c d) equal)\n(test (cons \"a\" '(b c)) (\"a\" b c) equal)\n(test (cons 'a 3) (a . 3) equal)\n(test (cons '(a b) 'c) ((a b) . c) equal)\n;;;\n\n\n;;;\n(test (length (cons (create-list 1000 'a) (create-list 1000 'b))) 1001 eql)\n\n;;;\n;;; \u95a2\u6570 (CAR cons) --> <object>\n;;;\n\n(test (car '(a b c)) a)\n(test (car '((a) b c d)) (a) equal)\n(test (car '(1 . 2)) 1 eql)\n;;;\n\n;;;\n(test (car (create-list 1000 'a)) a)\n\n;;;\n;;; \u95a2\u6570 (CDR cons) --> <object>\n;;;\n(test (cdr '((a) b c d)) (b c d) equal)\n(test (cdr '(1 . 2)) 2 eql)\n;;;\n\n;;;\n(test (length (cdr (create-list 1000 'a))) 999 eql)\n\n;;;\n;;; \u95a2\u6570 (SET-CAR obj cons) --> <object>\n;;;\n(test (let ((x (list 'apple 'orange)))\n   (list x (car x) (setf (car x) 'banana) x (car x)))\n ((banana orange) apple banana (banana orange) banana)\n equal)\n(test (let ((x (list 'apple 'orange)))\n   (list x (car x) (set-car 'banana x) x (car x)))\n ((banana orange) apple banana (banana orange) banana)\n equal)\n;;;\n;;;\n(test (let ((x (create-list 1000 'a))) (list (setf (car x) 'b) (car x))) \n (b b) equal)\n(test (let ((x (create-list 1000 'a))) (list (set-car 'b x) (car x))) \n (b b) equal)\n\n;;;\n;;; \u95a2\u6570 (SET-CDR obj cons) --> <object>\n;;;\n(test (let ((x (list 'apple 'orange)))\n   (list x (cdr x) (setf (cdr x) 'banana) x (cdr x)))\n ((apple . banana) (orange) banana (apple . banana) banana)\n equal)\n(test (let ((x (list 'apple 'orange)))\n   (list x (cdr x) (set-cdr 'banana x) x (cdr x)))\n ((apple . banana) (orange) banana (apple . banana) banana)\n equal)\n;;;\n\n(test (let ((x (create-list 1000 'a))) (list (setf (cdr x) 'b) x)) \n (b (a . b)) equal)\n(test (let ((x (create-list 1000 'a))) (list (set-cdr 'b x) x)) \n (b (a . b)) equal)\n\n;;;\n;;; \u95a2\u6570 (NULL obj) --> boolean\n;;;\n\n(test (null '(a b c)) nil)\n(test (null '()) t)\n(test (null (list)) t)\n;;;\n\n;;;\n(test (null (create-list 1000 'a)) nil)\n\n;;;\n;;; \u95a2\u6570 (LISTP obj) --> boolean\n;;;\n(test (listp '(a b c)) t)\n(test (listp '()) t)\n(test (listp '(a . b)) t)\n;;\u6ce8\u610f\n;(test (let ((x (list 'a))) (setf (cdr x) x) (listp x)) t)\n(test (listp \"abc\") nil)\n(test (listp #(1 2)) nil)\n(test (listp 'jerome) nil)\n;;;\n(test (listp (create-list 1000 'a)) t)\n;;;\n;;; \u95a2\u6570 (CREATE-LIST i [initial-element]) --> <list>\n;;;\n\n(test (create-list 3 17) (17 17 17) equal)\n(test (create-list 2 #\\a) (#\\a #\\a) equal)\n;;;\n;;;\n(test (create-list 0) ())\n(test (create-list 0 1) ())\n(test (length (create-list 1000)) 1000 eql)\n(test (length (create-list 1000 'a)) 1000 eql)\n;;;\n;;; \u95a2\u6570 (LIST obj*) --> <list>\n;;;\n(test (list 'a (+ 3 4) 'c) (a 7 c) equal)\n(test (list) nil)\n;;;\n;;;\n(test (list 1 2 3 4 5 6 7 8 9 10) (1 2 3 4 5 6 7 8 9 10) equal)\n;;;\n;;; \u95a2\u6570 (REVERSE list) --> <list>\n;;;\n(test (reverse '(a b c d e)) (e d c b a) equal)\n(test (reverse '(a)) (a) equal)\n(test (reverse '()) ())\n;;;\n;;;\n(test (length (reverse (create-list 1000 'a))) 1000 eql)\n\n;;;\n;;; \u95a2\u6570 (NREVERSE list) --> <list>\n;;;\n;;((let* ((x (list 'a 'b)) (y (nreverse x))) (equal x y)) nil)  ; IDEF\n;;;\n;;;\n(test (length (nreverse (create-list 1000 'a))) 1000 eql)\n;;;\n;;; \u95a2\u6570 (APPEND list*) --> <list>\n;;;\n(test (append '(a b c) '(d e f)) (a b c d e f) equal)\n;;;\n;;; 0 \u5f15\u6570\n(test (append) ())\n;;; 1 \u5f15\u6570\n(test (append ()) ())\n(test (append '(a b c)) (a b c) equal)\n(test (length (append (create-list 1000 'a))) 1000 eql)\n;;; 2 \u5f15\u6570\n(test (append () ()) ())\n(test (append () '(a b c)) (a b c) equal)\n(test (append '(a b c) ()) (a b c) equal)\n(test (length (append (create-list 1000 'a) (create-list 1000 'b))) 2000 eql)\n;;; 3 \u5f15\u6570\n(test (append () () ()) ())\n(test (append () () '(a b c)) (a b c) equal)\n(test (append () '(a b c) ()) (a b c) equal)\n(test (append '(a b c) () ()) (a b c) equal)\n(test (append '(a b c) '(d e f) ()) (a b c d e f) equal)\n(test (append '(a b c) () '(d e f)) (a b c d e f) equal)\n(test (append () '(a b c) '(d e f)) (a b c d e f) equal)\n(test (length \n  (append (create-list 1000 'a) (create-list 1000 'b) (create-list 1000 'c)))\n 3000 eql)\n;;; \u6700\u5f8c\u306e\u30ea\u30b9\u30c8\u3060\u3051\u5171\u6709\u3059\u308b\n(test (let* ((x (list 'a 'b 'c))\n    (y (append x)))\n   (eq y x))\n t)\n(test (let* ((x (list 'a 'b 'c))\n    (y (append '(1 2) x)))\n   (eq (cdr (cdr y)) x))\n t)\n(test (let* ((x (list 'a 'b 'c))\n    (y (append '(1 2) '(3 4) x)))\n   (eq (cdr (cdr (cdr (cdr y)))) x))\n t)\n(test (let* ((x (list 'a 'b 'c))\n    (y (append '(1 2) x '(3 4))))\n   (eq (cdr (cdr y)) x))\n  nil)\n\n;;;\n;;; \u95a2\u6570 (MEMBER obj list) --> <list>\n;;;\n(test (member 'c '(a b c d e f)) (c d e f) equal)\n(test (member 'g '(a b c d e f)) nil)\n(test (member 'c '(a b c a b c)) (c a b c) equal)\n;;;\n;;;\n(test (member #\\b '(#\\a #\\b #\\c)) (#\\b #\\c) equal)\n(test (member 2 '(1 2 3)) (2 3) equal)\n(test (member -2 '(1 -2 3)) (-2 3) equal)\n(test (member 2.0 '(1 2.0 3)) (2.0 3) equal)\n(test (member -2.0 '(1 -2.0 3)) (-2.0 3) equal)\n(test (member 1234567890 '(1 1234567890 3)) (1234567890 3) equal)\n(test (member -1234567890 '(1 -1234567890 3)) (-1234567890 3) equal)\n(test (member 'a ()) nil)\n(test (length (member 'a (create-list 1000 'a))) 1000 eql)\n(test (member 'b (create-list 1000 'a)) nil)\n\n;;;\n;;; \u95a2\u6570 (MAPCAR function list+) --> <list>\n;;;\n(test (mapcar #'car '((1 a) (2 b) (3 c))) (1 2 3) equal)\n(test (mapcar #'abs '(3 -4 2 -5 -6)) (3 4 2 5 6) equal)\n(test (mapcar #'cons '(a b c) '(1 2 3)) ((a . 1) (b . 2) (c . 3)) equal)\n;;;\n;;; 1 \u5f15\u6570\u95a2\u6570\n(test (mapcar #'car ()) ())\n(test (mapcar (lambda (x) (car 1)) ()) ())\n(test (mapcar (lambda (x) (+ x 1)) '(1 2 3 4 5)) (2 3 4 5 6) equal)\n;;; 2 \u5f15\u6570\u95a2\u6570\n\n(test (mapcar #'cons () ()) ())\n(test (mapcar #'cons () '(a b c)) ())\n(test (mapcar #'cons '(a b c) ()) ())\n(test (mapcar (lambda (x y) (+ x y)) '(1 2 3 4 5) '(6 7 8 9 10)) \n (7 9 11 13 15) equal)\n;;; rest \u5f15\u6570\u95a2\u6570\n(test (mapcar #'list () () () () ()) ())\n(test (mapcar #'list '(a b c) '(d e f) '(g h i) '(j k l) '(m n o))\n ((a d g j m) (b e h k n) (c f i l o))\n equal)\n(test (mapcar #'list '(a b c) '(d e f) '(g) '(j k l) '(m n o))\n ((a d g j m))\n equal)\n(test (mapcar (lambda (&rest x) x) '(1 2 3) '(4 5 6) '(7 8 9)) \n ((1 4 7) (2 5 8) (3 6 9)) equal)\n\n;;;\n;;; \u95a2\u6570 (MAPC function list+) --> <list>\n;;;\n(test (let ((x 0)) (mapc (lambda (v) (setq x (+ x v))) '(3 5)) x) 8 eql)\n;;;\n\n;;; 1 \u5f15\u6570\u95a2\u6570\n(test (mapc #'car ()) ())\n(test (mapc (lambda (x) (car 1)) ()) ())\n(test (let ((x 0)) (list (mapc (lambda (v) (setq x (+ x v))) '(3 5)) x)) \n ((3 5) 8) equal)\n;;; 2 \u5f15\u6570\u95a2\u6570\n(test (mapc #'cons () ()) ())\n(test (mapc #'cons () '(a b c)) ())\n(test (mapc #'cons '(a b c) ()) (a b c) equal)\n(test(let ((ret 0)) \n   (list (mapc (lambda (x y) (setq ret (+ ret x y))) '(1 2 3) '(4 5 6)) ret))\n ((1 2 3) 21)\n equal)\n;;; rest \u5f15\u6570\u95a2\u6570\n(test (mapc #'list () () () () ()) ())\n(test (mapc #'list '(a b c) '(d e f) '(g h i) '(j k l) '(m n o)) (a b c) equal)\n(test (mapc #'list '(a b c) '(d e f) '(g) '(j k l) '(m n o)) (a b c) equal)\n(test (let ((ret ()))\n   (list (mapc (lambda (&rest x) (setq ret (cons x ret))) '(1 2 3) '(4 5 6) '(7 8 9))\n         ret))\n ((1 2 3) ((3 6 9) (2 5 8) (1 4 7)))\n equal)\n\n;;;\n;;; \u95a2\u6570 (MAPCAN function list+) --> <list>\n;;;\n(test (mapcan (lambda (x) (if (> x 0) (list x))) '(-3 4 0 5 -2 7)) (4 5 7) equal)\n\n;;;\n\n;;; 1 \u5f15\u6570\u95a2\u6570\n(test (mapcan #'car ()) ())\n(test (mapcan (lambda (x) (car 1)) ()) ())\n(test (mapcan (lambda (x) (list (+ x 1))) '(1 2 3 4 5)) (2 3 4 5 6) equal)\n;;; 2 \u5f15\u6570\u95a2\u6570\n(test (mapcan #'cons () ()) ())\n(test (mapcan #'cons () '(a b c)) ())\n(test (mapcan #'cons '(a b c) ()) ())\n(test (mapcan (lambda (x y) (list (+ x y))) '(1 2 3 4 5) '(6 7 8 9 10)) (7 9 11 13 15) equal)\n;;; rest \u5f15\u6570\u95a2\u6570\n(test (mapcan #'list () () () () ()) ())\n(test (mapcan #'list '(a b c) '(d e f) '(g h i) '(j k l) '(m n o))\n (a d g j m b e h k n c f i l o)\n equal)\n(test (mapcan #'list '(a b c) '(d e f) '(g) '(j k l) '(m n o))\n (a d g j m)\n equal)\n(test (mapcan (lambda (&rest x) x) '(1 2 3) '(4 5 6) '(7 8 9)) (1 4 7 2 5 8 3 6 9) equal)\n\n\n;;;\n;;; \u95a2\u6570 (MAPLIST function list+) --> <list>\n;;;\n(test (maplist #'append '(1 2 3 4) '(1 2) '(1 2 3)) ((1 2 3 4 1 2 1 2 3) (2 3 4 2 2 3)) equal)\n(test (maplist (lambda (x) (cons 'foo x))\n '(a b c d)) ((foo a b c d ) (foo b c d) (foo c d) (foo d))\n equal)\n(test (maplist (lambda (x) (if (member (car x) (cdr x)) 0 1)) '(a b a c d b c))\n (0 0 1 0 1 1 1 )\n equal)\n\n\n;;; 1 \u5f15\u6570\u95a2\u6570\n(test (maplist #'car ()) ())\n(test (maplist (lambda (x) (car 1)) ()) ())\n(test (maplist (lambda (x) x) '(1 2 3 4 5)) ((1 2 3 4 5) (2 3 4 5) (3 4 5) (4 5) (5)) equal)\n;;; 2 \u5f15\u6570\u95a2\u6570\n(test (maplist #'cons () ()) ())\n(test (maplist #'cons () '(a b c)) ())\n(test (maplist #'cons '(a b c) ()) ())\n(test (maplist (lambda (x y) (list x y)) '(1 2 3) '(4 5 6))\n (((1 2 3) (4 5 6)) ((2 3) (5 6)) ((3) (6)))\n equal)\n\n\n;;; rest \u5f15\u6570\u95a2\u6570\n(test (maplist #'list () () () () ()) ())\n(test (maplist #'list '(a b c) '(d e f) '(g h i) '(j k l) '(m n o))\n (((a b c) (d e f) (g h i) (j k l) (m n o))\n  ((b c) (e f) (h i) (k l) (n o))\n  ((c) (f) (i) (l) (o)))\n equal)\n\n(test (maplist #'list '(a b c) '(d e f) '(g) '(j k l) '(m n o))\n (((a b c) (d e f) (g) (j k l) (m n o)))\n equal)\n(test (maplist (lambda (&rest x) x) '(1 2 3) '(4 5 6) '(7 8 9))\n (((1 2 3) (4 5 6) (7 8 9))\n  ((2 3) (5 6) (8 9))\n  ((3) (6) (9)))\n equal)\n\n;;;\n;;; \u95a2\u6570 (MAPL function list+) --> <list>\n;;;\n(test (let ((k 0))\n   (mapl (lambda (x) (setq k (+ k (if (member (car x) (cdr x)) 0 1))))\n         '(a b a c d b c))\n   k)\n 4\n eql)\n;;;\n;;; 1 \u5f15\u6570\u95a2\u6570\n(test (mapl #'car ()) ())\n(test (mapl (lambda (x) (car 1)) ()) ())\n(test (let ((ret ()))\n   (list (mapl (lambda (x) (setq ret (cons x ret))) '(1 2 3 4 5))\n         (nreverse ret)))\n ((1 2 3 4 5) ((1 2 3 4 5) (2 3 4 5) (3 4 5) (4 5) (5))) equal)\n;;; 2 \u5f15\u6570\u95a2\u6570\n(test (mapl #'cons () ()) ())\n(test (mapl #'cons () '(a b c)) ())\n(test (mapl #'cons '(a b c) ()) (a b c) equal)\n(test (let ((ret ()))\n   (list (mapl (lambda (x y) (setq ret (cons (list x y) ret))) '(1 2 3) '(4 5 6))\n         (nreverse ret)))\n ((1 2 3) (((1 2 3) (4 5 6)) ((2 3) (5 6)) ((3) (6))))\n equal)\n;;; rest \u5f15\u6570\u95a2\u6570\n(test (mapl #'list () () () () ()) ())\n(test (let ((ret ()))\n   (list (mapl (lambda (&rest x) (setq ret (cons x ret))) '(1 2 3) '(4 5 6) '(7 8 9))\n         (nreverse ret)))\n ((1 2 3)\n  (((1 2 3) (4 5 6) (7 8 9))\n   ((2 3) (5 6) (8 9))\n   ((3) (6) (9))))\n equal)\n\n;;;\n;;; \u95a2\u6570 (MAPCON function list+) --> <list>\n;;;\n\n(test (mapcon (lambda (x) (if (member (car x) (cdr x)) (list (car x)))) '(a b a c d b c b c))\n (a b c b c)\n equal)\n(test (mapcon #'list '(1 2 3 4)) ((1 2 3 4) (2 3 4) (3 4) (4)) equal)\n\n;;;\n\n;;; 1 \u5f15\u6570\u95a2\u6570\n(test (mapcon #'car ()) ())\n(test (mapcon (lambda (x) (car 1)) ()) ())\n(test (mapcon (lambda (x) (list x)) '(1 2 3 4 5)) ((1 2 3 4 5) (2 3 4 5) (3 4 5) (4 5) (5)) equal)\n\n;;; 2 \u5f15\u6570\u95a2\u6570\n(test (mapcon #'cons () ()) ())\n(test (mapcon #'cons () '(a b c)) ())\n(test (mapcon #'cons '(a b c) ()) ())\n(test (mapcon (lambda (x y) (list (list x y))) '(1 2 3) '(4 5 6))\n (((1 2 3) (4 5 6)) ((2 3) (5 6)) ((3) (6)))\n equal)\n;;; rest \u5f15\u6570\u95a2\u6570\n(test (mapcon #'list () () () () ()) ())\n(test (mapcon #'list '(a b c) '(d e f) '(g h i) '(j k l) '(m n o))\n ((a b c) (d e f) (g h i) (j k l) (m n o)\n  (b c) (e f) (h i) (k l) (n o)\n  (c) (f) (i) (l) (o))\n equal)\n(test (mapcon #'list '(a b c) '(d e f) '(g) '(j k l) '(m n o))\n ((a b c) (d e f) (g) (j k l) (m n o))\n equal)\n(test (mapcon (lambda (&rest x) (list x)) '(1 2 3) '(4 5 6) '(7 8 9))\n (((1 2 3) (4 5 6) (7 8 9))\n  ((2 3) (5 6) (8 9))\n  ((3) (6) (9)))\n equal)\n\n;;;\n;;; \u95a2\u6570 (ASSOC obj association-list) --> <cons>\n;;;\n\n(test (assoc 'a '((a . 1) (b . 2))) (a . 1) equal)\n(test (assoc 'a '((a . 1) (a . 2))) (a . 1) equal)\n(test (assoc 'c '((a . 1) (b . 2))) nil)\n;;;\n;;;\n(test (assoc 'a ()) nil)\n(test (assoc 'b '((a) (b) (c))) (b) equal)\n(test (assoc 'b '((a 1) (b 2) (c 3))) (b 2) equal)\n(test (assoc #\\b '((#\\a . 1) (#\\b . 2) (#\\c . 3))) (#\\b . 2) equal)\n(test (assoc 2 '((1 . 1) (2 . 2) (3 . 3))) (2 . 2) equal)\n(test (assoc -2 '((1 . 1) (-2 . 2) (3 . 3))) (-2 . 2) equal)\n(test (assoc 2.0 '((1 . 1) (2.0 . 2) (3 . 3))) (2.0 . 2) equal)\n(test (assoc -2.0 '((1 . 1) (-2.0 . 2) (3 . 3))) (-2.0 . 2) equal)\n(test (assoc 1234567890 '((1 . 1) (1234567890 . 2) (3 . 3))) (1234567890 . 2) equal)\n(test (assoc -1234567890 '((1 . 1) (-1234567890 . 2) (3 . 3))) (-1234567890 . 2) equal)\n\n(test (assoc 'a '((a . b) ())) (a . b) equal)\n(test (assoc 'a (create-list 1000 '(a . b))) (a . b) equal)\n(test (assoc 'b (create-list 1000 '(a . b))) nil)\n\n\n#\u306f\u3058\u3081\u306b\nISLisp\u51e6\u7406\u7cfb\u3092\u81ea\u4f5c\u3057\u305f\u3068\u304d\u306bISLisp\u898f\u683c\u306b\u9069\u5408\u3057\u3066\u3044\u308b\u304b\u3069\u3046\u304b\u306e\u691c\u67fb\u306b\u304a\u4f7f\u3044\u304f\u3060\u3055\u3044\u3002\n\n\n#\u5229\u7528\u65b9\u6cd5\n\u30b3\u30fc\u30c9\u3092\u30d5\u30a1\u30a4\u30eb\u306b\u30bb\u30fc\u30d6\u3057\u3001\u51e6\u7406\u7cfb\u304b\u3089\u30ed\u30fc\u30c9\u3057\u3066\u304f\u3060\u3055\u3044\u3002\u7d50\u679c\u304c\u753b\u9762\u8868\u793a\u3055\u308c\u307e\u3059\u3002\n\n#\u7bc4\u56f2\n\u30ea\u30b9\u30c8\u306e\u90e8\u5206\u3092\u30c6\u30b9\u30c8\u3057\u3066\u3044\u307e\u3059\u3002\n\n#\u51fa\u5178\nISLisp\u691c\u8a3c\u30b7\u30b9\u30c6\u30e0\nhttp://islisp.org/jp/verification-jp.html\n\n#\u30b3\u30fc\u30c9\n\n```\n\n(defmacro test(form1 form2 :rest pred)\n  (if (null pred)\n      `(if (equal ,form1 ',form2)\n           (format (standard-output) \"~S is ok~%\" ',form1)\n           (format (standard-output) \"~S is bad~%\" ',form1))\n      `(if (,@pred ,form1 ',form2)\n           (format (standard-output) \"~S is ok~%\" ',form1)\n           (format (standard-output) \"~S is bad~%\" ',form1))))\n\n\n;;; \u95a2\u6570 (CONSP obj) --> boolean\n;;;\n(test (consp '(a . b)) t)\n(test (consp '(a b c)) t)\n(test (consp '()) nil)\n(test (consp #(a b)) nil)\n\n(test (consp (create-list 1000 'a)) t)\n\n;;;\n;;; \u95a2\u6570 (CONS obj1 obj2) --> <cons>\n;;;\n\n(test (cons 'a '()) (a) equal)\n(test (cons '(a) '(b c d)) ((a) b c d) equal)\n(test (cons \"a\" '(b c)) (\"a\" b c) equal)\n(test (cons 'a 3) (a . 3) equal)\n(test (cons '(a b) 'c) ((a b) . c) equal)\n;;;\n\n\n;;;\n(test (length (cons (create-list 1000 'a) (create-list 1000 'b))) 1001 eql)\n\n;;;\n;;; \u95a2\u6570 (CAR cons) --> <object>\n;;;\n\n(test (car '(a b c)) a)\n(test (car '((a) b c d)) (a) equal)\n(test (car '(1 . 2)) 1 eql)\n;;;\n\n;;;\n(test (car (create-list 1000 'a)) a)\n\n;;;\n;;; \u95a2\u6570 (CDR cons) --> <object>\n;;;\n(test (cdr '((a) b c d)) (b c d) equal)\n(test (cdr '(1 . 2)) 2 eql)\n;;;\n\n;;;\n(test (length (cdr (create-list 1000 'a))) 999 eql)\n\n;;;\n;;; \u95a2\u6570 (SET-CAR obj cons) --> <object>\n;;;\n(test (let ((x (list 'apple 'orange)))\n   (list x (car x) (setf (car x) 'banana) x (car x)))\n ((banana orange) apple banana (banana orange) banana)\n equal)\n(test (let ((x (list 'apple 'orange)))\n   (list x (car x) (set-car 'banana x) x (car x)))\n ((banana orange) apple banana (banana orange) banana)\n equal)\n;;;\n;;;\n(test (let ((x (create-list 1000 'a))) (list (setf (car x) 'b) (car x))) \n (b b) equal)\n(test (let ((x (create-list 1000 'a))) (list (set-car 'b x) (car x))) \n (b b) equal)\n\n;;;\n;;; \u95a2\u6570 (SET-CDR obj cons) --> <object>\n;;;\n(test (let ((x (list 'apple 'orange)))\n   (list x (cdr x) (setf (cdr x) 'banana) x (cdr x)))\n ((apple . banana) (orange) banana (apple . banana) banana)\n equal)\n(test (let ((x (list 'apple 'orange)))\n   (list x (cdr x) (set-cdr 'banana x) x (cdr x)))\n ((apple . banana) (orange) banana (apple . banana) banana)\n equal)\n;;;\n\n(test (let ((x (create-list 1000 'a))) (list (setf (cdr x) 'b) x)) \n (b (a . b)) equal)\n(test (let ((x (create-list 1000 'a))) (list (set-cdr 'b x) x)) \n (b (a . b)) equal)\n\n;;;\n;;; \u95a2\u6570 (NULL obj) --> boolean\n;;;\n\n(test (null '(a b c)) nil)\n(test (null '()) t)\n(test (null (list)) t)\n;;;\n\n;;;\n(test (null (create-list 1000 'a)) nil)\n\n;;;\n;;; \u95a2\u6570 (LISTP obj) --> boolean\n;;;\n(test (listp '(a b c)) t)\n(test (listp '()) t)\n(test (listp '(a . b)) t)\n;;\u6ce8\u610f\n;(test (let ((x (list 'a))) (setf (cdr x) x) (listp x)) t)\n(test (listp \"abc\") nil)\n(test (listp #(1 2)) nil)\n(test (listp 'jerome) nil)\n;;;\n(test (listp (create-list 1000 'a)) t)\n;;;\n;;; \u95a2\u6570 (CREATE-LIST i [initial-element]) --> <list>\n;;;\n\n(test (create-list 3 17) (17 17 17) equal)\n(test (create-list 2 #\\a) (#\\a #\\a) equal)\n;;;\n;;;\n(test (create-list 0) ())\n(test (create-list 0 1) ())\n(test (length (create-list 1000)) 1000 eql)\n(test (length (create-list 1000 'a)) 1000 eql)\n;;;\n;;; \u95a2\u6570 (LIST obj*) --> <list>\n;;;\n(test (list 'a (+ 3 4) 'c) (a 7 c) equal)\n(test (list) nil)\n;;;\n;;;\n(test (list 1 2 3 4 5 6 7 8 9 10) (1 2 3 4 5 6 7 8 9 10) equal)\n;;;\n;;; \u95a2\u6570 (REVERSE list) --> <list>\n;;;\n(test (reverse '(a b c d e)) (e d c b a) equal)\n(test (reverse '(a)) (a) equal)\n(test (reverse '()) ())\n;;;\n;;;\n(test (length (reverse (create-list 1000 'a))) 1000 eql)\n\n;;;\n;;; \u95a2\u6570 (NREVERSE list) --> <list>\n;;;\n;;((let* ((x (list 'a 'b)) (y (nreverse x))) (equal x y)) nil)\t; IDEF\n;;;\n;;;\n(test (length (nreverse (create-list 1000 'a))) 1000 eql)\n;;;\n;;; \u95a2\u6570 (APPEND list*) --> <list>\n;;;\n(test (append '(a b c) '(d e f)) (a b c d e f) equal)\n;;;\n;;; 0 \u5f15\u6570\n(test (append) ())\n;;; 1 \u5f15\u6570\n(test (append ()) ())\n(test (append '(a b c)) (a b c) equal)\n(test (length (append (create-list 1000 'a))) 1000 eql)\n;;; 2 \u5f15\u6570\n(test (append () ()) ())\n(test (append () '(a b c)) (a b c) equal)\n(test (append '(a b c) ()) (a b c) equal)\n(test (length (append (create-list 1000 'a) (create-list 1000 'b))) 2000 eql)\n;;; 3 \u5f15\u6570\n(test (append () () ()) ())\n(test (append () () '(a b c)) (a b c) equal)\n(test (append () '(a b c) ()) (a b c) equal)\n(test (append '(a b c) () ()) (a b c) equal)\n(test (append '(a b c) '(d e f) ()) (a b c d e f) equal)\n(test (append '(a b c) () '(d e f)) (a b c d e f) equal)\n(test (append () '(a b c) '(d e f)) (a b c d e f) equal)\n(test (length \n  (append (create-list 1000 'a) (create-list 1000 'b) (create-list 1000 'c)))\n 3000 eql)\n;;; \u6700\u5f8c\u306e\u30ea\u30b9\u30c8\u3060\u3051\u5171\u6709\u3059\u308b\n(test (let* ((x (list 'a 'b 'c))\n\t(y (append x)))\n   (eq y x))\n t)\n(test (let* ((x (list 'a 'b 'c))\n\t(y (append '(1 2) x)))\n   (eq (cdr (cdr y)) x))\n t)\n(test (let* ((x (list 'a 'b 'c))\n\t(y (append '(1 2) '(3 4) x)))\n   (eq (cdr (cdr (cdr (cdr y)))) x))\n t)\n(test (let* ((x (list 'a 'b 'c))\n\t(y (append '(1 2) x '(3 4))))\n   (eq (cdr (cdr y)) x))\n  nil)\n\n;;;\n;;; \u95a2\u6570 (MEMBER obj list) --> <list>\n;;;\n(test (member 'c '(a b c d e f)) (c d e f) equal)\n(test (member 'g '(a b c d e f)) nil)\n(test (member 'c '(a b c a b c)) (c a b c) equal)\n;;;\n;;;\n(test (member #\\b '(#\\a #\\b #\\c)) (#\\b #\\c) equal)\n(test (member 2 '(1 2 3)) (2 3) equal)\n(test (member -2 '(1 -2 3)) (-2 3) equal)\n(test (member 2.0 '(1 2.0 3)) (2.0 3) equal)\n(test (member -2.0 '(1 -2.0 3)) (-2.0 3) equal)\n(test (member 1234567890 '(1 1234567890 3)) (1234567890 3) equal)\n(test (member -1234567890 '(1 -1234567890 3)) (-1234567890 3) equal)\n(test (member 'a ()) nil)\n(test (length (member 'a (create-list 1000 'a))) 1000 eql)\n(test (member 'b (create-list 1000 'a)) nil)\n\n;;;\n;;; \u95a2\u6570 (MAPCAR function list+) --> <list>\n;;;\n(test (mapcar #'car '((1 a) (2 b) (3 c))) (1 2 3) equal)\n(test (mapcar #'abs '(3 -4 2 -5 -6)) (3 4 2 5 6) equal)\n(test (mapcar #'cons '(a b c) '(1 2 3)) ((a . 1) (b . 2) (c . 3)) equal)\n;;;\n;;; 1 \u5f15\u6570\u95a2\u6570\n(test (mapcar #'car ()) ())\n(test (mapcar (lambda (x) (car 1)) ()) ())\n(test (mapcar (lambda (x) (+ x 1)) '(1 2 3 4 5)) (2 3 4 5 6) equal)\n;;; 2 \u5f15\u6570\u95a2\u6570\n\n(test (mapcar #'cons () ()) ())\n(test (mapcar #'cons () '(a b c)) ())\n(test (mapcar #'cons '(a b c) ()) ())\n(test (mapcar (lambda (x y) (+ x y)) '(1 2 3 4 5) '(6 7 8 9 10)) \n (7 9 11 13 15) equal)\n;;; rest \u5f15\u6570\u95a2\u6570\n(test (mapcar #'list () () () () ()) ())\n(test (mapcar #'list '(a b c) '(d e f) '(g h i) '(j k l) '(m n o))\n ((a d g j m) (b e h k n) (c f i l o))\n equal)\n(test (mapcar #'list '(a b c) '(d e f) '(g) '(j k l) '(m n o))\n ((a d g j m))\n equal)\n(test (mapcar (lambda (&rest x) x) '(1 2 3) '(4 5 6) '(7 8 9)) \n ((1 4 7) (2 5 8) (3 6 9)) equal)\n\n;;;\n;;; \u95a2\u6570 (MAPC function list+) --> <list>\n;;;\n(test (let ((x 0)) (mapc (lambda (v) (setq x (+ x v))) '(3 5)) x) 8 eql)\n;;;\n\n;;; 1 \u5f15\u6570\u95a2\u6570\n(test (mapc #'car ()) ())\n(test (mapc (lambda (x) (car 1)) ()) ())\n(test (let ((x 0)) (list (mapc (lambda (v) (setq x (+ x v))) '(3 5)) x)) \n ((3 5) 8) equal)\n;;; 2 \u5f15\u6570\u95a2\u6570\n(test (mapc #'cons () ()) ())\n(test (mapc #'cons () '(a b c)) ())\n(test (mapc #'cons '(a b c) ()) (a b c) equal)\n(test(let ((ret 0)) \n   (list (mapc (lambda (x y) (setq ret (+ ret x y))) '(1 2 3) '(4 5 6)) ret))\n ((1 2 3) 21)\n equal)\n;;; rest \u5f15\u6570\u95a2\u6570\n(test (mapc #'list () () () () ()) ())\n(test (mapc #'list '(a b c) '(d e f) '(g h i) '(j k l) '(m n o)) (a b c) equal)\n(test (mapc #'list '(a b c) '(d e f) '(g) '(j k l) '(m n o)) (a b c) equal)\n(test (let ((ret ()))\n   (list (mapc (lambda (&rest x) (setq ret (cons x ret))) '(1 2 3) '(4 5 6) '(7 8 9))\n         ret))\n ((1 2 3) ((3 6 9) (2 5 8) (1 4 7)))\n equal)\n\n;;;\n;;; \u95a2\u6570 (MAPCAN function list+) --> <list>\n;;;\n(test (mapcan (lambda (x) (if (> x 0) (list x))) '(-3 4 0 5 -2 7)) (4 5 7) equal)\n\n;;;\n\n;;; 1 \u5f15\u6570\u95a2\u6570\n(test (mapcan #'car ()) ())\n(test (mapcan (lambda (x) (car 1)) ()) ())\n(test (mapcan (lambda (x) (list (+ x 1))) '(1 2 3 4 5)) (2 3 4 5 6) equal)\n;;; 2 \u5f15\u6570\u95a2\u6570\n(test (mapcan #'cons () ()) ())\n(test (mapcan #'cons () '(a b c)) ())\n(test (mapcan #'cons '(a b c) ()) ())\n(test (mapcan (lambda (x y) (list (+ x y))) '(1 2 3 4 5) '(6 7 8 9 10)) (7 9 11 13 15) equal)\n;;; rest \u5f15\u6570\u95a2\u6570\n(test (mapcan #'list () () () () ()) ())\n(test (mapcan #'list '(a b c) '(d e f) '(g h i) '(j k l) '(m n o))\n (a d g j m b e h k n c f i l o)\n equal)\n(test (mapcan #'list '(a b c) '(d e f) '(g) '(j k l) '(m n o))\n (a d g j m)\n equal)\n(test (mapcan (lambda (&rest x) x) '(1 2 3) '(4 5 6) '(7 8 9)) (1 4 7 2 5 8 3 6 9) equal)\n\n\n;;;\n;;; \u95a2\u6570 (MAPLIST function list+) --> <list>\n;;;\n(test (maplist #'append '(1 2 3 4) '(1 2) '(1 2 3)) ((1 2 3 4 1 2 1 2 3) (2 3 4 2 2 3)) equal)\n(test (maplist (lambda (x) (cons 'foo x))\n '(a b c d)) ((foo a b c d ) (foo b c d) (foo c d) (foo d))\n equal)\n(test (maplist (lambda (x) (if (member (car x) (cdr x)) 0 1)) '(a b a c d b c))\n (0 0 1 0 1 1 1 )\n equal)\n\n\n;;; 1 \u5f15\u6570\u95a2\u6570\n(test (maplist #'car ()) ())\n(test (maplist (lambda (x) (car 1)) ()) ())\n(test (maplist (lambda (x) x) '(1 2 3 4 5)) ((1 2 3 4 5) (2 3 4 5) (3 4 5) (4 5) (5)) equal)\n;;; 2 \u5f15\u6570\u95a2\u6570\n(test (maplist #'cons () ()) ())\n(test (maplist #'cons () '(a b c)) ())\n(test (maplist #'cons '(a b c) ()) ())\n(test (maplist (lambda (x y) (list x y)) '(1 2 3) '(4 5 6))\n (((1 2 3) (4 5 6)) ((2 3) (5 6)) ((3) (6)))\n equal)\n\n\n;;; rest \u5f15\u6570\u95a2\u6570\n(test (maplist #'list () () () () ()) ())\n(test (maplist #'list '(a b c) '(d e f) '(g h i) '(j k l) '(m n o))\n (((a b c) (d e f) (g h i) (j k l) (m n o))\n  ((b c) (e f) (h i) (k l) (n o))\n  ((c) (f) (i) (l) (o)))\n equal)\n\n(test (maplist #'list '(a b c) '(d e f) '(g) '(j k l) '(m n o))\n (((a b c) (d e f) (g) (j k l) (m n o)))\n equal)\n(test (maplist (lambda (&rest x) x) '(1 2 3) '(4 5 6) '(7 8 9))\n (((1 2 3) (4 5 6) (7 8 9))\n  ((2 3) (5 6) (8 9))\n  ((3) (6) (9)))\n equal)\n\n;;;\n;;; \u95a2\u6570 (MAPL function list+) --> <list>\n;;;\n(test (let ((k 0))\n   (mapl (lambda (x) (setq k (+ k (if (member (car x) (cdr x)) 0 1))))\n         '(a b a c d b c))\n   k)\n 4\n eql)\n;;;\n;;; 1 \u5f15\u6570\u95a2\u6570\n(test (mapl #'car ()) ())\n(test (mapl (lambda (x) (car 1)) ()) ())\n(test (let ((ret ()))\n   (list (mapl (lambda (x) (setq ret (cons x ret))) '(1 2 3 4 5))\n         (nreverse ret)))\n ((1 2 3 4 5) ((1 2 3 4 5) (2 3 4 5) (3 4 5) (4 5) (5))) equal)\n;;; 2 \u5f15\u6570\u95a2\u6570\n(test (mapl #'cons () ()) ())\n(test (mapl #'cons () '(a b c)) ())\n(test (mapl #'cons '(a b c) ()) (a b c) equal)\n(test (let ((ret ()))\n   (list (mapl (lambda (x y) (setq ret (cons (list x y) ret))) '(1 2 3) '(4 5 6))\n         (nreverse ret)))\n ((1 2 3) (((1 2 3) (4 5 6)) ((2 3) (5 6)) ((3) (6))))\n equal)\n;;; rest \u5f15\u6570\u95a2\u6570\n(test (mapl #'list () () () () ()) ())\n(test (let ((ret ()))\n   (list (mapl (lambda (&rest x) (setq ret (cons x ret))) '(1 2 3) '(4 5 6) '(7 8 9))\n         (nreverse ret)))\n ((1 2 3)\n  (((1 2 3) (4 5 6) (7 8 9))\n   ((2 3) (5 6) (8 9))\n   ((3) (6) (9))))\n equal)\n\n;;;\n;;; \u95a2\u6570 (MAPCON function list+) --> <list>\n;;;\n\n(test (mapcon (lambda (x) (if (member (car x) (cdr x)) (list (car x)))) '(a b a c d b c b c))\n (a b c b c)\n equal)\n(test (mapcon #'list '(1 2 3 4)) ((1 2 3 4) (2 3 4) (3 4) (4)) equal)\n\n;;;\n\n;;; 1 \u5f15\u6570\u95a2\u6570\n(test (mapcon #'car ()) ())\n(test (mapcon (lambda (x) (car 1)) ()) ())\n(test (mapcon (lambda (x) (list x)) '(1 2 3 4 5)) ((1 2 3 4 5) (2 3 4 5) (3 4 5) (4 5) (5)) equal)\n\n;;; 2 \u5f15\u6570\u95a2\u6570\n(test (mapcon #'cons () ()) ())\n(test (mapcon #'cons () '(a b c)) ())\n(test (mapcon #'cons '(a b c) ()) ())\n(test (mapcon (lambda (x y) (list (list x y))) '(1 2 3) '(4 5 6))\n (((1 2 3) (4 5 6)) ((2 3) (5 6)) ((3) (6)))\n equal)\n;;; rest \u5f15\u6570\u95a2\u6570\n(test (mapcon #'list () () () () ()) ())\n(test (mapcon #'list '(a b c) '(d e f) '(g h i) '(j k l) '(m n o))\n ((a b c) (d e f) (g h i) (j k l) (m n o)\n  (b c) (e f) (h i) (k l) (n o)\n  (c) (f) (i) (l) (o))\n equal)\n(test (mapcon #'list '(a b c) '(d e f) '(g) '(j k l) '(m n o))\n ((a b c) (d e f) (g) (j k l) (m n o))\n equal)\n(test (mapcon (lambda (&rest x) (list x)) '(1 2 3) '(4 5 6) '(7 8 9))\n (((1 2 3) (4 5 6) (7 8 9))\n  ((2 3) (5 6) (8 9))\n  ((3) (6) (9)))\n equal)\n\n;;;\n;;; \u95a2\u6570 (ASSOC obj association-list) --> <cons>\n;;;\n\n(test (assoc 'a '((a . 1) (b . 2))) (a . 1) equal)\n(test (assoc 'a '((a . 1) (a . 2))) (a . 1) equal)\n(test (assoc 'c '((a . 1) (b . 2))) nil)\n;;;\n;;;\n(test (assoc 'a ()) nil)\n(test (assoc 'b '((a) (b) (c))) (b) equal)\n(test (assoc 'b '((a 1) (b 2) (c 3))) (b 2) equal)\n(test (assoc #\\b '((#\\a . 1) (#\\b . 2) (#\\c . 3))) (#\\b . 2) equal)\n(test (assoc 2 '((1 . 1) (2 . 2) (3 . 3))) (2 . 2) equal)\n(test (assoc -2 '((1 . 1) (-2 . 2) (3 . 3))) (-2 . 2) equal)\n(test (assoc 2.0 '((1 . 1) (2.0 . 2) (3 . 3))) (2.0 . 2) equal)\n(test (assoc -2.0 '((1 . 1) (-2.0 . 2) (3 . 3))) (-2.0 . 2) equal)\n(test (assoc 1234567890 '((1 . 1) (1234567890 . 2) (3 . 3))) (1234567890 . 2) equal)\n(test (assoc -1234567890 '((1 . 1) (-1234567890 . 2) (3 . 3))) (-1234567890 . 2) equal)\n\n(test (assoc 'a '((a . b) ())) (a . b) equal)\n(test (assoc 'a (create-list 1000 '(a . b))) (a . b) equal)\n(test (assoc 'b (create-list 1000 '(a . b))) nil)\n\n```\n", "tags": ["ISLisp", "lisp"]}