{"tags": ["Scala2.10.1", "Cassandra1.2.3", "gradle1.5.0", "TestNG6.8"], "context": " More than 1 year has passed since last update.\n\n\u4e8b\u524d\u6e96\u5099\n\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u306f\u3001Cassandra Wiki \u3092\u53c2\u7167\n\u203b Cassandra \u306e\u30d0\u30fc\u30b8\u30e7\u30f3\u306f1.2.3\u3092\u4f7f\u7528\n\nkeyspace\u306e\u4f5c\u6210\ncassandra-cli\u3067Cassandra\u306b\u63a5\u7d9a\u3057\u3066\u3044\u308b\u3053\u3068\u304c\u524d\u63d0\u3002\n\u307e\u305f\u3001keyspace\u540d\u306f\u3001\u4eee\u306bKeyspace1\u3068\u3057\u3066\u8a18\u8ff0\u3059\u308b\u3002\n\n\u4f5c\u6210\ncreate keyspace Keyspace1;\u3092\u5b9f\u884c\u3059\u308b\u3002\n\nColumnFamily\u306e\u4f5c\u6210\n\u3053\u3053\u3067\u306f\u3001\u4f5c\u6210\u3059\u308bColumnFamily\u540d\u306fStandard1\u3068\u3057\u3066\u8a18\u8ff0\u3059\u308b\u3002\n\nkeyspace\u306e\u9078\u629e\nuse Keyspace1\u3092\u5b9f\u884c\u3059\u308b\u3002\n\n\u4f5c\u6210\ncreate column family Standard1;\u3092\u5b9f\u884c\u3059\u308b\u3002\n\u203b \u30aa\u30d7\u30b7\u30e7\u30f3\u306f\u8abf\u3079\u3066\u304a\u3089\u305a\u3001\u672a\u6307\u5b9a\u3067\u52d5\u4f5c\u3057\u305f\u305f\u3081\u3001\u7279\u306b\u6307\u5b9a\u3057\u3066\u3044\u306a\u3044\u3002\n\n\u30a2\u30d7\u30ea\u304b\u3089\u306e\u63a5\u7d9a\n\u3053\u3053\u3067\u306f\u3001Cassandra Wiki\u306eThriftExamples\u306eJava\u9805\u3092\u53c2\u8003\u306b(\u8a00\u8a9e\u81ea\u4f53\u306e\u52c9\u5f37\u306e\u305f\u3081)Scala\u3068Gradle\u3001TestNG\u3092\u4f7f\u3063\u3066\u3001\u7c21\u5358\u306aClient\u3092\u4f5c\u3063\u3066\u307f\u308b\u3002\n\u203b Scala\u306e\u69cb\u6587\u3068Gradle\u306e\u4f7f\u3044\u65b9\u3001TestNG\u306e\u4f7f\u3044\u65b9\u304a\u3088\u3073\u3001\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u306e\u4f5c\u6210\u306e\u8aac\u660e\u306f\u5272\u611b\u3059\u308b\n\nbuild.gradle\n\u4f7f\u7528\u3057\u305fbuild.gradle\u306f\u4ee5\u4e0b\u306e\u3068\u304a\u308a\u3002\n```build.gradle\napply plugin: 'java'\napply plugin: 'eclipse'\napply plugin: 'scala'\nsourceCompatibility = 1.7\nversion = '1.0'\njar {\n    manifest {\n        attributes 'Implementation-Title': 'Gradle Quickstart', 'Implementation-Version': version\n    }\n}\nrepositories {\n    mavenCentral()\n}\ndependencies {\n    compile 'org.apache.thrift:libthrift:0.9.0'\n    compile 'org.apache.cassandra:cassandra-thrift:1.2.3'\n    testCompile 'org.testng:testng:6.8'\n}\ntest {\n    systemProperties 'property': 'value'\n}\nuploadArchives {\n    repositories {\n       flatDir {\n           dirs 'repos'\n       }\n    }\n}\n```\n\n\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u30b3\u30fc\u30c9\n?(\u8a73\u7d30\u672a\u8abf\u67fb)\u3068\u8a18\u8ff0\u3055\u308c\u3066\u3044\u308b\u90e8\u5206\u306b\u95a2\u3057\u3066\u306f\u3001\u8a73\u7d30\u3092\u8abf\u3079\u3066\u304a\u3089\u305a\u3001\u3088\u304f\u5206\u304b\u3089\u306a\u3044\u305f\u3081\u3001\u30b3\u30e1\u30f3\u30c8\u5185\u5bb9\u306f\u7121\u8996\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n\nCassandraClient.scala\npackage learning.client.cassandra\n\nimport org.apache.cassandra.thrift.Cassandra\nimport org.apache.cassandra.thrift.Column\nimport org.apache.cassandra.thrift.ColumnParent\nimport org.apache.cassandra.thrift.ConsistencyLevel\nimport org.apache.thrift.protocol.TBinaryProtocol\nimport org.apache.thrift.transport.TFramedTransport\nimport org.apache.thrift.transport.TSocket\nimport java.nio.ByteBuffer\nimport java.io.Closeable\nimport org.apache.cassandra.thrift.ColumnOrSuperColumn\nimport org.apache.cassandra.thrift.ColumnPath\nimport org.apache.cassandra.thrift.SliceRange\nimport org.apache.cassandra.thrift.SlicePredicate\n\n/**\n * @author PoaD\n *\n */\nclass CassandraClient(hostname : String, port : Int, keyspace : String) extends Closeable {\n    // \u304a\u307e\u3058\u306a\u3044\uff08\u63a5\u7d9a\u3059\u308b\u305f\u3081\u306e\u8a2d\u5b9a\uff09\n    private val transport = new TFramedTransport(new TSocket(hostname, port))\n    private val protocol = new TBinaryProtocol(transport)\n    // \u63a5\u7d9a\n    transport.open()\n    // Client\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u751f\u6210\n    private val client = new Cassandra.Client(protocol)\n    // \u4f7f\u7528\u3059\u308bkeyspace\u306e\u8a2d\u5b9a\n    client.set_keyspace(keyspace)\n\n    /**\n     * value\u3067\u6307\u5b9a\u3055\u308c\u305f\u5024\u3092key\u304a\u3088\u3073\u3001parent\u306b\u8a72\u5f53\u3059\u308bcolumn\u3068\u3057\u3066\u66f8\u304d\u8fbc\u307f\u307e\u3059\u3002\n     *\n     * @param key insert\u3059\u308b\u30c7\u30fc\u30bf\u306e\u30ad\u30fc\n     * @param parent insert\u3059\u308b\u5148\u306eColumnFamily\n     * @param value insert\u3059\u308b\u5024\n     * @param level \u30c7\u30fc\u30bf\u4fdd\u6301\u62c5\u5f53Node\u3092\u6c7a\u5b9a\u3059\u308b\u305f\u3081\u306e\u5024{@link http://lunarium.info/arc/index.php/Cassandra%E3%81%AE%E6%A7%8B%E9%80%A0#Data.E6.93.8D.E4.BD.9C.E3.81.AEAlgorithm} \u3092\u53c2\u7167\n     */\n    def insert(key : String, parent : ColumnParent, name : ByteBuffer, value : ByteBuffer, level : ConsistencyLevel) : Unit = {\n        val timestamp = System.currentTimeMillis()\n        val column = new Column()\n        column.setName(name)\n        column.setValue(value)\n        column.setTimestamp(timestamp)\n        client.insert(ByteBuffer.wrap(key.getBytes(\"UTF-8\")), parent, column, level)\n    }\n\n    /**\n     * key\u304a\u3088\u3073\u3001parent\u306b\u8a72\u5f53\u3059\u308bcolumn\u306e\u4e00\u89a7\u3092\u8fd4\u3057\u307e\u3059\u3002\n     *\n     * @param key \u53d6\u5f97\u3059\u308b\u30c7\u30fc\u30bf\u306e\u30ad\u30fc\n     * @param parent \u53d6\u5f97\u3059\u308b\u5143\u306eColumnFamily\n     * @param start \u53d6\u5f97\u3059\u308b\u30c7\u30fc\u30bf\u306e\u7bc4\u56f2\u306e\u958b\u59cb\u4f4d\u7f6e?(\u8a73\u7d30\u672a\u8abf\u67fb)\n     * @param end \u53d6\u5f97\u3059\u308b\u30c7\u30fc\u30bf\u306e\u7bc4\u56f2\u306e\u7d42\u4e86\u4f4d\u7f6e?(\u8a73\u7d30\u672a\u8abf\u67fb)\n     * @param reversed \u4e26\u3073\u9806\u3092\u53cd\u8ee2?(\u8a73\u7d30\u672a\u8abf\u67fb)\n     * @param count \u53d6\u5f97\u3059\u308b\u30c7\u30fc\u30bf\u306e\u6700\u5927\u6570?(\u8a73\u7d30\u672a\u8abf\u67fb)\n     * @param level \u30c7\u30fc\u30bf\u4fdd\u6301\u62c5\u5f53Node\u3092\u6c7a\u5b9a\u3059\u308b\u305f\u3081\u306e\u5024{@link http://lunarium.info/arc/index.php/Cassandra%E3%81%AE%E6%A7%8B%E9%80%A0#Data.E6.93.8D.E4.BD.9C.E3.81.AEAlgorithm} \u3092\u53c2\u7167\n     * @return key\u304a\u3088\u3073\u3001parent\u306b\u8a72\u5f53\u3059\u308bcolumn\u306e\u4e00\u89a7\n     */\n    def getClumns(key : String, parent : ColumnParent, start : ByteBuffer, end : ByteBuffer, reversed : Boolean, count : Int, level : ConsistencyLevel) : java.util.List[ColumnOrSuperColumn] = {\n        val predicate = new SlicePredicate()\n        predicate.setSlice_range(new SliceRange(start, end, reversed, count))\n        client.get_slice(ByteBuffer.wrap(key.getBytes(\"UTF-8\")), parent, predicate, level)\n    }\n\n    /**\n     * \u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u3092\u7d42\u4e86\u3057\u307e\u3059\u3002\n     */\n    def close = {\n        transport.flush()\n        transport.close()\n    }\n}\n\n\n\n\u30c6\u30b9\u30c8\u30b3\u30fc\u30c9\n\u3056\u3063\u3068\u3053\u3093\u306a\u611f\u3058\u3002\u66f8\u3044\u3066\u8aad\u307f\u8fbc\u3093\u3067\u3001\u5185\u5bb9\u304c\u540c\u3058\u304b\u30c1\u30a7\u30c3\u30af\u3057\u3066\u7d42\u308f\u308a\u3002\n\nCassandraClientTest.scala\npackage learning.client.cassandra\n\nimport org.testng.annotations.Test\nimport org.testng.annotations.BeforeClass\nimport org.apache.cassandra.thrift.ColumnPath\nimport org.apache.cassandra.thrift.ColumnParent\nimport org.apache.cassandra.thrift.ConsistencyLevel\nimport java.nio.ByteBuffer\nimport org.apache.cassandra.thrift.SlicePredicate\nimport org.apache.cassandra.thrift.SliceRange\nimport org.apache.cassandra.thrift.ColumnOrSuperColumn\nimport org.testng.Assert\n\nimport scala.collection.convert.DecorateAsJava\n\n/**\n * @author PoaD\n *\n */\nclass CassandraClientTest {\n\n    @Test\n    def test() = {\n        // \u30c6\u30b9\u30c8\u5bfe\u8c61\n        val target = new CassandraClient(\"localhost\", 9160, \"Keyspace1\")\n\n        val key = \"1\"\n        val name = \"name\"\n        val value = \"test value\"\n        val parent = new ColumnParent(\"Standard1\") // Column Family\u306e\u6307\u5b9a\n        // \u66f8\u304d\u8fbc\u307f\n        target.insert(\n            key,\n            parent,\n            ByteBuffer.wrap(name.getBytes(\"UTF-8\")),\n            ByteBuffer.wrap(value.getBytes(\"UTF-8\")),\n            ConsistencyLevel.ALL)\n\n        // \u66f8\u304d\u8fbc\u3093\u3060\u7d50\u679c\u306e\u53d6\u5f97\n        val columns : java.util.List[ColumnOrSuperColumn] = target.getClumns(\n            key,\n            parent,\n            ByteBuffer.wrap(new Array[Byte](0)),\n            ByteBuffer.wrap(new Array[Byte](0)),\n            false,\n            100,\n            ConsistencyLevel.ALL)\n        // \u53d6\u5f97\u5185\u5bb9\u306e\u691c\u8a3c\n        Assert.assertEquals(columns.size(), 1)\n        Assert.assertEquals(columns.get(0).getColumn().getName(), name.getBytes(\"UTF-8\"))\n        Assert.assertEquals(columns.get(0).getColumn().getValue(), value.getBytes(\"UTF-8\"))\n        target.close // client\u306e\u7d42\u4e86\n    }\n}\n\n\n# \u4e8b\u524d\u6e96\u5099\n\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u306f\u3001[Cassandra Wiki](http://wiki.apache.org/cassandra/GettingStarted \"Cassandra Wiki\"\n) \u3092\u53c2\u7167\n\u203b Cassandra \u306e\u30d0\u30fc\u30b8\u30e7\u30f3\u306f1.2.3\u3092\u4f7f\u7528\n\n# keyspace\u306e\u4f5c\u6210\ncassandra-cli\u3067Cassandra\u306b\u63a5\u7d9a\u3057\u3066\u3044\u308b\u3053\u3068\u304c\u524d\u63d0\u3002\n\u307e\u305f\u3001keyspace\u540d\u306f\u3001\u4eee\u306b**Keyspace1**\u3068\u3057\u3066\u8a18\u8ff0\u3059\u308b\u3002\n## \u4f5c\u6210\n`create keyspace Keyspace1;`\u3092\u5b9f\u884c\u3059\u308b\u3002\n\n# ColumnFamily\u306e\u4f5c\u6210\n\u3053\u3053\u3067\u306f\u3001\u4f5c\u6210\u3059\u308bColumnFamily\u540d\u306f**Standard1**\u3068\u3057\u3066\u8a18\u8ff0\u3059\u308b\u3002\n## keyspace\u306e\u9078\u629e\n`use Keyspace1`\u3092\u5b9f\u884c\u3059\u308b\u3002\n\n## \u4f5c\u6210\n`create column family Standard1;`\u3092\u5b9f\u884c\u3059\u308b\u3002\n\u203b \u30aa\u30d7\u30b7\u30e7\u30f3\u306f\u8abf\u3079\u3066\u304a\u3089\u305a\u3001\u672a\u6307\u5b9a\u3067\u52d5\u4f5c\u3057\u305f\u305f\u3081\u3001\u7279\u306b\u6307\u5b9a\u3057\u3066\u3044\u306a\u3044\u3002\n\n# \u30a2\u30d7\u30ea\u304b\u3089\u306e\u63a5\u7d9a\n\u3053\u3053\u3067\u306f\u3001[Cassandra Wiki\u306eThriftExamples\u306eJava\u9805](http://wiki.apache.org/cassandra/ThriftExamples#Java)\u3092\u53c2\u8003\u306b(\u8a00\u8a9e\u81ea\u4f53\u306e\u52c9\u5f37\u306e\u305f\u3081)Scala\u3068Gradle\u3001TestNG\u3092\u4f7f\u3063\u3066\u3001\u7c21\u5358\u306aClient\u3092\u4f5c\u3063\u3066\u307f\u308b\u3002\n\u203b Scala\u306e\u69cb\u6587\u3068Gradle\u306e\u4f7f\u3044\u65b9\u3001TestNG\u306e\u4f7f\u3044\u65b9\u304a\u3088\u3073\u3001\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u306e\u4f5c\u6210\u306e\u8aac\u660e\u306f\u5272\u611b\u3059\u308b\n\n## build.gradle\n\u4f7f\u7528\u3057\u305fbuild.gradle\u306f\u4ee5\u4e0b\u306e\u3068\u304a\u308a\u3002\n```build.gradle\napply plugin: 'java'\napply plugin: 'eclipse'\napply plugin: 'scala'\n\nsourceCompatibility = 1.7\nversion = '1.0'\njar {\n    manifest {\n        attributes 'Implementation-Title': 'Gradle Quickstart', 'Implementation-Version': version\n    }\n}\n\nrepositories {\n    mavenCentral()\n}\n\ndependencies {\n    compile 'org.apache.thrift:libthrift:0.9.0'\n    compile 'org.apache.cassandra:cassandra-thrift:1.2.3'\n    testCompile 'org.testng:testng:6.8'\n}\n\ntest {\n    systemProperties 'property': 'value'\n}\n\nuploadArchives {\n    repositories {\n       flatDir {\n           dirs 'repos'\n       }\n    }\n}\n```\n\n## \u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u30b3\u30fc\u30c9\n?(\u8a73\u7d30\u672a\u8abf\u67fb)\u3068\u8a18\u8ff0\u3055\u308c\u3066\u3044\u308b\u90e8\u5206\u306b\u95a2\u3057\u3066\u306f\u3001\u8a73\u7d30\u3092\u8abf\u3079\u3066\u304a\u3089\u305a\u3001\u3088\u304f\u5206\u304b\u3089\u306a\u3044\u305f\u3081\u3001\u30b3\u30e1\u30f3\u30c8\u5185\u5bb9\u306f\u7121\u8996\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n\n```CassandraClient.scala\npackage learning.client.cassandra\n\nimport org.apache.cassandra.thrift.Cassandra\nimport org.apache.cassandra.thrift.Column\nimport org.apache.cassandra.thrift.ColumnParent\nimport org.apache.cassandra.thrift.ConsistencyLevel\nimport org.apache.thrift.protocol.TBinaryProtocol\nimport org.apache.thrift.transport.TFramedTransport\nimport org.apache.thrift.transport.TSocket\nimport java.nio.ByteBuffer\nimport java.io.Closeable\nimport org.apache.cassandra.thrift.ColumnOrSuperColumn\nimport org.apache.cassandra.thrift.ColumnPath\nimport org.apache.cassandra.thrift.SliceRange\nimport org.apache.cassandra.thrift.SlicePredicate\n\n/**\n * @author PoaD\n *\n */\nclass CassandraClient(hostname : String, port : Int, keyspace : String) extends Closeable {\n\t// \u304a\u307e\u3058\u306a\u3044\uff08\u63a5\u7d9a\u3059\u308b\u305f\u3081\u306e\u8a2d\u5b9a\uff09\n\tprivate val transport = new TFramedTransport(new TSocket(hostname, port))\n\tprivate val protocol = new TBinaryProtocol(transport)\n\t// \u63a5\u7d9a\n\ttransport.open()\n\t// Client\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u751f\u6210\n\tprivate val client = new Cassandra.Client(protocol)\n\t// \u4f7f\u7528\u3059\u308bkeyspace\u306e\u8a2d\u5b9a\n\tclient.set_keyspace(keyspace)\n\n\t/**\n\t * value\u3067\u6307\u5b9a\u3055\u308c\u305f\u5024\u3092key\u304a\u3088\u3073\u3001parent\u306b\u8a72\u5f53\u3059\u308bcolumn\u3068\u3057\u3066\u66f8\u304d\u8fbc\u307f\u307e\u3059\u3002\n\t *\n\t * @param key insert\u3059\u308b\u30c7\u30fc\u30bf\u306e\u30ad\u30fc\n\t * @param parent insert\u3059\u308b\u5148\u306eColumnFamily\n\t * @param value insert\u3059\u308b\u5024\n\t * @param level \u30c7\u30fc\u30bf\u4fdd\u6301\u62c5\u5f53Node\u3092\u6c7a\u5b9a\u3059\u308b\u305f\u3081\u306e\u5024{@link http://lunarium.info/arc/index.php/Cassandra%E3%81%AE%E6%A7%8B%E9%80%A0#Data.E6.93.8D.E4.BD.9C.E3.81.AEAlgorithm} \u3092\u53c2\u7167\n\t */\n\tdef insert(key : String, parent : ColumnParent, name : ByteBuffer, value : ByteBuffer, level : ConsistencyLevel) : Unit = {\n\t\tval timestamp = System.currentTimeMillis()\n\t\tval column = new Column()\n\t\tcolumn.setName(name)\n\t\tcolumn.setValue(value)\n\t\tcolumn.setTimestamp(timestamp)\n\t\tclient.insert(ByteBuffer.wrap(key.getBytes(\"UTF-8\")), parent, column, level)\n\t}\n\n\t/**\n\t * key\u304a\u3088\u3073\u3001parent\u306b\u8a72\u5f53\u3059\u308bcolumn\u306e\u4e00\u89a7\u3092\u8fd4\u3057\u307e\u3059\u3002\n\t *\n\t * @param key \u53d6\u5f97\u3059\u308b\u30c7\u30fc\u30bf\u306e\u30ad\u30fc\n\t * @param parent \u53d6\u5f97\u3059\u308b\u5143\u306eColumnFamily\n\t * @param start \u53d6\u5f97\u3059\u308b\u30c7\u30fc\u30bf\u306e\u7bc4\u56f2\u306e\u958b\u59cb\u4f4d\u7f6e?(\u8a73\u7d30\u672a\u8abf\u67fb)\n\t * @param end \u53d6\u5f97\u3059\u308b\u30c7\u30fc\u30bf\u306e\u7bc4\u56f2\u306e\u7d42\u4e86\u4f4d\u7f6e?(\u8a73\u7d30\u672a\u8abf\u67fb)\n\t * @param reversed \u4e26\u3073\u9806\u3092\u53cd\u8ee2?(\u8a73\u7d30\u672a\u8abf\u67fb)\n\t * @param count \u53d6\u5f97\u3059\u308b\u30c7\u30fc\u30bf\u306e\u6700\u5927\u6570?(\u8a73\u7d30\u672a\u8abf\u67fb)\n\t * @param level \u30c7\u30fc\u30bf\u4fdd\u6301\u62c5\u5f53Node\u3092\u6c7a\u5b9a\u3059\u308b\u305f\u3081\u306e\u5024{@link http://lunarium.info/arc/index.php/Cassandra%E3%81%AE%E6%A7%8B%E9%80%A0#Data.E6.93.8D.E4.BD.9C.E3.81.AEAlgorithm} \u3092\u53c2\u7167\n\t * @return key\u304a\u3088\u3073\u3001parent\u306b\u8a72\u5f53\u3059\u308bcolumn\u306e\u4e00\u89a7\n\t */\n\tdef getClumns(key : String, parent : ColumnParent, start : ByteBuffer, end : ByteBuffer, reversed : Boolean, count : Int, level : ConsistencyLevel) : java.util.List[ColumnOrSuperColumn] = {\n\t\tval predicate = new SlicePredicate()\n\t\tpredicate.setSlice_range(new SliceRange(start, end, reversed, count))\n\t\tclient.get_slice(ByteBuffer.wrap(key.getBytes(\"UTF-8\")), parent, predicate, level)\n\t}\n\n\t/**\n\t * \u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u3092\u7d42\u4e86\u3057\u307e\u3059\u3002\n\t */\n\tdef close = {\n\t\ttransport.flush()\n\t\ttransport.close()\n\t}\n}\n```\n\n## \u30c6\u30b9\u30c8\u30b3\u30fc\u30c9\n\u3056\u3063\u3068\u3053\u3093\u306a\u611f\u3058\u3002\u66f8\u3044\u3066\u8aad\u307f\u8fbc\u3093\u3067\u3001\u5185\u5bb9\u304c\u540c\u3058\u304b\u30c1\u30a7\u30c3\u30af\u3057\u3066\u7d42\u308f\u308a\u3002\n\n```CassandraClientTest.scala\npackage learning.client.cassandra\n\nimport org.testng.annotations.Test\nimport org.testng.annotations.BeforeClass\nimport org.apache.cassandra.thrift.ColumnPath\nimport org.apache.cassandra.thrift.ColumnParent\nimport org.apache.cassandra.thrift.ConsistencyLevel\nimport java.nio.ByteBuffer\nimport org.apache.cassandra.thrift.SlicePredicate\nimport org.apache.cassandra.thrift.SliceRange\nimport org.apache.cassandra.thrift.ColumnOrSuperColumn\nimport org.testng.Assert\n\nimport scala.collection.convert.DecorateAsJava\n\n/**\n * @author PoaD\n *\n */\nclass CassandraClientTest {\n\n\t@Test\n\tdef test() = {\n\t\t// \u30c6\u30b9\u30c8\u5bfe\u8c61\n\t\tval target = new CassandraClient(\"localhost\", 9160, \"Keyspace1\")\n\n\t\tval key = \"1\"\n\t\tval name = \"name\"\n\t\tval value = \"test value\"\n\t\tval parent = new ColumnParent(\"Standard1\") // Column Family\u306e\u6307\u5b9a\n\t\t// \u66f8\u304d\u8fbc\u307f\n\t\ttarget.insert(\n\t\t\tkey,\n\t\t\tparent,\n\t\t\tByteBuffer.wrap(name.getBytes(\"UTF-8\")),\n\t\t\tByteBuffer.wrap(value.getBytes(\"UTF-8\")),\n\t\t\tConsistencyLevel.ALL)\n\n\t\t// \u66f8\u304d\u8fbc\u3093\u3060\u7d50\u679c\u306e\u53d6\u5f97\n\t\tval columns : java.util.List[ColumnOrSuperColumn] = target.getClumns(\n\t\t\tkey,\n\t\t\tparent,\n\t\t\tByteBuffer.wrap(new Array[Byte](0)),\n\t\t\tByteBuffer.wrap(new Array[Byte](0)),\n\t\t\tfalse,\n\t\t\t100,\n\t\t\tConsistencyLevel.ALL)\n\t\t// \u53d6\u5f97\u5185\u5bb9\u306e\u691c\u8a3c\n\t\tAssert.assertEquals(columns.size(), 1)\n\t\tAssert.assertEquals(columns.get(0).getColumn().getName(), name.getBytes(\"UTF-8\"))\n\t\tAssert.assertEquals(columns.get(0).getColumn().getValue(), value.getBytes(\"UTF-8\"))\n\t\ttarget.close // client\u306e\u7d42\u4e86\n\t}\n}\n```\n"}