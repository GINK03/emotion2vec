{"tags": ["Spark1.2.1", "sbt0.13.7", "Scala", "MLlib"], "context": " More than 1 year has passed since last update.Apache Spark 1.2.0\u3067\u3001MLlib\u306bRandomForest\u304c\u5b9f\u88c5\u3055\u308c\u3066\u3044\u307e\u3057\u3066\u3001\u5206\u985e(classification)\u3082\u56de\u5e30(regression)\u3082\u51fa\u6765\u308b\u3088\u3046\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u3002\nSBT\u3092\u4f7f\u3046\u3068\u3001\u6bd4\u8f03\u7684\u7c21\u5358\u306b\u30ed\u30fc\u30ab\u30eb\u74b0\u5883\u3067\u8a66\u305b\u305f\u306e\u3067\u3001\u30e1\u30e2\u3057\u3066\u304a\u304d\u307e\u3059\u3002\n\n\u74b0\u5883\n\u5fc5\u8981\u306a\u306e\u306f\u3001JDK\u3068SBT\u306e2\u3064\u3002\nOS\u306f\u300cWindows 8.1 64bit\u7248\u300d\u306e\u7121\u5370(not Pro)\u3067\u3084\u3063\u3066\u307e\u3059\u304c\u3001\u7279\u5225\u306a\u3053\u3068\u306f\u3057\u3066\u3044\u306a\u3044\u306e\u3067\u3001\u4ed6\u306eOS\u3067\u3082\u52d5\u304f\u3093\u3058\u3083\u306a\u3044\u304b\u306a\u3068\u3002\nJDK8\n> javac -version\njavac 1.8.0_25\n\nSBT\n> sbt about\n[info] This is sbt 0.13.7\n\nSBT\u306f\u3001msi\u3092\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3057\u3066\u666e\u901a\u306b\u30a4\u30f3\u30b9\u30c8\u30fc\u30e9\u30fc\u304b\u3089\u5165\u308c\u305f\u306e\u3067\u3059\u304c (\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u5148\u306fc:\\scala\\sbt\u306b\u5909\u66f4)\u3001\u74b0\u5883\u5909\u6570PATH\u307e\u3067\u901a\u3057\u3066\u304f\u308c\u3066\u4fbf\u5229\u3067\u3057\u305f\u3002\nSBT Download\n\nSteps\n\n\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u30d5\u30a9\u30eb\u30c0\u3092\u4f5c\u308b\ncd\u3057\u3084\u3059\u3044\u5834\u6240\u306b\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u306e\u30d5\u30a9\u30eb\u30c0\u3092\u4f5c\u308a\u307e\u3059\u3002\u79c1\u306e\u5834\u5408\u306f\u3053\u3093\u306a\u611f\u3058\u3067\u3002\n> mkdir c:\\scala\\hello-rf\n\n\nbuild.sbt\u3092\u4f5c\u308b\n\u300cbuild.sbt\u300d\u3068\u3044\u3046\u30d5\u30a1\u30a4\u30eb\u540d\u306e\u30c6\u30ad\u30b9\u30c8\u30d5\u30a1\u30a4\u30eb\u3092\u4f5c\u3063\u3066\u3001\u305d\u3053\u306b\u4ee5\u4e0b\u306e\u5185\u5bb9\u3092\u8a18\u8ff0\u3057\u307e\u30591\u3002\n\nbuild.sbt\nname := \"Hello RandomForest\"\n\nversion := \"0.0.1\"\n\nscalaVersion := \"2.10.4\"\n\nscalacOptions ++= Seq(\"-Xlint\", \"-deprecation\", \"-unchecked\", \"-feature\", \"-Xelide-below\", \"ALL\")\n\nlibraryDependencies ++= Seq(\n  \"org.apache.spark\" %% \"spark-core\" % \"1.2.1\",\n  \"org.apache.spark\" %% \"spark-mllib\" % \"1.2.1\"\n)\n\n\n\nspark\u306e\u30d0\u30fc\u30b8\u30e7\u30f3\u306f1.2.1\u304cMaven\u306erepo\u306b\u51fa\u3066\u308b\u306e\u3067\u3001\u305d\u308c\u3092\u5229\u7528\u3057\u3066\u3044\u307e\u3059\u3002\nMaven Repository: org.apache.spark\n\nRandomForest\u3092\u547c\u3073\u51fa\u3059\u30b3\u30fc\u30c9\u3092Scala\u3067\u4f5c\u308b\n\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u304cMLlib\u306e\u30da\u30fc\u30b8\u306b\u3042\u308b\u306e\u3067\u3059\u304c\u3001\nEmsambles - MLlib\niris\u30c7\u30fc\u30bf\u306e\u307b\u3046\u304cR\u3068\u306e\u6bd4\u8f03\u3068\u304b\u3084\u308a\u3084\u3059\u3044\u3067\u3057\u3087(\u3042\u3068\u3053\u306e\u30b5\u30f3\u30d7\u30eb\u3001\u79c1\u306f\u51fa\u529b\u304c\u5206\u304b\u308a\u306b\u304f\u304b\u3063\u305f)\u3001\u3063\u3066\u3053\u3068\u3067\u3001\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u5909\u3048\u3066\u307f\u307e\u3057\u305f\u3002\n\u3053\u308c\u3092HelloRf.scala\u3068\u3044\u3046\u540d\u524d\u3067\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u30d5\u30a9\u30eb\u30c0\u76f4\u4e0b\u306b\u7f6e\u304d\u307e\u3059\u3002\n\nHelloRf.scala\nimport org.apache.spark.SparkContext\nimport org.apache.spark.mllib.tree.RandomForest\nimport org.apache.spark.mllib.util.MLUtils\n\nobject HelloRf\n{\n  val sc = new SparkContext(\"local\", \"HelloRf\")\n\n  // Load and parse the data file.\n  // libsvm style iris Data - http://www.csie.ntu.edu.tw/~cjlin/libsvmtools/datasets/multiclass/iris.scale\n  val data = MLUtils.loadLibSVMFile(sc, \"iris.scale\")\n\n  // Split the data into training and test sets (30% held out for testing)\n  val splits = data.randomSplit(Array(0.7, 0.3))\n  val (trainingData, testData) = (splits(0), splits(1))\n\n  def main(args: Array[String]): Unit =\n  {\n    trainClassifier()\n    trainRegressor()\n  }\n\n  def trainClassifier() =\n  {\n    val startTime = System.currentTimeMillis\n\n    // Train a RandomForest model.\n    // Empty categoricalFeaturesInfo indicates all features are continuous.\n    val numClasses = 4 // Iris data: 3 labels, (label + 1) value seems to be needed.\n    val categoricalFeaturesInfo = Map[Int, Int]()\n    val numTrees = 3 // Use more in practice.\n    val featureSubsetStrategy = \"auto\" // Let the algorithm choose.\n    val impurity = \"gini\"\n    val maxDepth = 4 // <= 30\n    val maxBins = 32\n\n    val model = RandomForest.trainClassifier(\n      trainingData, numClasses, categoricalFeaturesInfo,\n      numTrees, featureSubsetStrategy, impurity, maxDepth, maxBins)\n\n    // Evaluate model on test instances and compute test error\n    val labelAndPreds = testData.zipWithIndex.map\n    {\n      case(current, index) =>\n        val predictionResult = model.predict(current.features)\n        (index, current.label, predictionResult, current.label == predictionResult) // Tuple\n    }\n\n    val execTime = System.currentTimeMillis - startTime\n\n    val testDataCount = testData.count()\n    val testErrCount = labelAndPreds.filter(r => !r._4).count // r._4 = 4th element of tuple (current.label == predictionResult)\n    val testSuccessRate = 100 - (testErrCount.toDouble / testDataCount * 100)\n\n    println(\"RfClassifier Results: \" + testSuccessRate + \"% numTrees: \" + numTrees + \" maxDepth: \" + maxDepth + \" execTime(msec): \" + execTime)\n    println(\"Test Data Count = \" + testDataCount)\n    println(\"Test Error Count = \" + testErrCount)\n    println(\"Test Success Rate (%) = \" + testSuccessRate)\n    println(\"Learned classification forest model:\\n\" + model.toDebugString)\n    labelAndPreds.foreach(x => println(x))\n  }\n\n  def trainRegressor()\n  {\n    val startTime = System.currentTimeMillis\n\n    // Train a RandomForest model.\n    // Empty categoricalFeaturesInfo indicates all features are continuous.\n    val numClasses = 0 // not used for regression\n    val categoricalFeaturesInfo = Map[Int, Int]()\n    val numTrees = 3 // Use more in practice.\n    val featureSubsetStrategy = \"auto\" // Let the algorithm choose.\n    val impurity = \"variance\"\n    val maxDepth = 4\n    val maxBins = 32\n\n    val model = RandomForest.trainRegressor(\n      trainingData, categoricalFeaturesInfo,\n      numTrees, featureSubsetStrategy, impurity, maxDepth, maxBins)\n\n    // Evaluate model on test instances and compute test error\n    val labelsAndPredictions = testData.zipWithIndex.map\n    {\n      case(current, index) =>\n        val predictionResult = model.predict(current.features)\n        (index, current.label, predictionResult) // Tuple\n    }\n\n    val execTime = System.currentTimeMillis - startTime\n\n    println(\"RfRegressor Results: execTime(msec): \" + execTime)\n    println(\"Learned regression forest model:\\n\" + model.toDebugString)\n    labelsAndPredictions.foreach(x => println(x))\n  }\n}\n\n\n\u307e\u3042\u3001\u30d5\u30a1\u30a4\u30eb\u540d\u306f\u62e1\u5f35\u5b50.scala\u3067\u3042\u308c\u3070\u4f55\u3067\u3082\u3044\u3044\u3067\u3059\u3002\u30d5\u30a1\u30a4\u30eb\u3092\u7f6e\u304f\u5834\u6240\u3082\u3001\u7dba\u9e97\u597d\u304d\u306a\u65b9\u306f\u3001\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u30d5\u30a9\u30eb\u30c0\u76f4\u4e0b\u3067\u306f\u306a\u304f\u3066maven\u30b9\u30bf\u30a4\u30eb\u306a\u300csrc\\main\\scala\u300d\u30d5\u30a9\u30eb\u30c0\u3092\u4f5c\u3063\u3066\u3001\u305d\u3053\u306b\u5165\u308c\u305f\u3089\u3044\u3044\u3068\u601d\u3044\u307e\u3059\u3002\n\nIris\u30c7\u30fc\u30bf\u3092\u5165\u624b\u3059\u308b\n\u30c7\u30fc\u30bf\u306fRDD<LabeledPoint>\u3068\u3057\u3066\u8aad\u307f\u8fbc\u3093\u3067\u3084\u308c\u3070\u3044\u3044\u3068\u3044\u3046\u3053\u3068\u306a\u3093\u3067\u3059\u304c\u3001libsvm\u5f62\u5f0f\u306eiris\u30c7\u30fc\u30bf\u304c\u3042\u3063\u305f\u306e\u3067\u3001\u3053\u308c\u3092\u30b5\u30f3\u30d7\u30eb\u901a\u308aMLUtils.loadLibSVMFile\u3067\u8aad\u307f\u8fbc\u3080\u3068\u3044\u3046\u65b9\u91dd\u3067\u3002\n\u4ee5\u4e0b\u304b\u3089\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3057\u3066\u3001\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u30d5\u30a9\u30eb\u30c0\u76f4\u4e0b\u306b\u7f6e\u304d\u307e\u3059\u3002\nLIBSVM Data - iris.scale\n\n\u5b9f\u884c\u3059\u308b\n\u30b3\u30de\u30f3\u30c9\u30d7\u30ed\u30f3\u30d7\u30c8\u3067\u3001\n> cd [your project folder]\n> sbt compile\n> sbt run > sysout.txt\n\n\u30ea\u30c0\u30a4\u30ec\u30af\u30c8\u3067txt\u3092\u5410\u3044\u3066\u304a\u304f\u3068\u3001println\u306e\u3068\u3053\u308d\u3060\u3051\u53d6\u308c\u308b\u3093\u3067\u308f\u304b\u308a\u3084\u3059\u3044\u304b\u306a\u3068\u3002\n\u5b9f\u969b\u306b\u3084\u3063\u3066\u307f\u305f\u7d50\u679c\u304c\u3053\u3061\u3089\u3002iris\u30c7\u30fc\u30bf\u306b\u5bfe\u3057\u3066Classifier\u306e\u6b63\u89e3\u738794.0%\u306f\u3001\u307e\u3042\u666e\u901a\u3068\u3044\u3063\u305f\u3068\u3053\u308d\u3067\u3057\u3087\u3046\u304b\u3002Tree\u306e\u6570\u3001if-else\u306e\u6570\u3068\u6df1\u3055\u306f\u3001numTrees, numDepth, maxBins\u3092\u5f04\u308b\u3068\u5909\u308f\u308b\u3093\u3067\u3001\u304a\u8a66\u3057\u3042\u308c\u3063\u3066\u3068\u3053\u308d\u3067\u3059\u306d\u3002\nRfClassifier Results: 94.0% numTrees: 3 maxDepth: 4 execTime(msec): 11237\nTest Data Count = 50\nTest Error Count = 3\nTest Success Rate (%) = 94.0\nLearned classification forest model:\nTreeEnsembleModel classifier with 3 trees\n\n  Tree 0:\n    If (feature 2 <= -0.694915)\n     Predict: 1.0\n    Else (feature 2 > -0.694915)\n     If (feature 3 <= 0.25)\n     ...\n  Tree 1:\n    If (feature 0 <= -0.388889)\n     If (feature 2 <= -0.762712)\n      Predict: 1.0\n     Else (feature 2 > -0.762712)\n      If (feature 2 <= -0.152542)\n       Predict: 2.0\n      ...\n  Tree 2:\n    If (feature 2 <= -0.694915)\n     Predict: 1.0\n    Else (feature 2 > -0.694915)\n     If (feature 3 <= 0.166667)\n     ...\n\n(0,1.0,1.0,true)\n(1,1.0,1.0,true)\n(2,1.0,1.0,true)\n...\n(8,1.0,1.0,true)\n...\n(36,3.0,2.0,false)\n...\n(43,3.0,2.0,false)\n(44,3.0,2.0,false)\n...\n(48,3.0,3.0,true)\n(49,3.0,3.0,true)\n\nRfRegressor Results: execTime(msec): 5796\nLearned regression forest model:\nTreeEnsembleModel regressor with 3 trees\n\n  Tree 0:\n    If (feature 3 <= -0.583333)\n     Predict: 1.0\n    Else (feature 3 > -0.583333)\n     If (feature 3 <= 0.25)\n      If (feature 1 <= -0.5)\n       If (feature 3 <= -4.03573E-8)\n        Predict: 2.0\n       ...\n  Tree 1:\n    If (feature 2 <= -0.762712)\n     Predict: 1.0\n    Else (feature 2 > -0.762712)\n     If (feature 2 <= 0.254237)\n      Predict: 2.0\n     ...\n  Tree 2:\n    If (feature 2 <= -0.694915)\n     Predict: 1.0\n    Else (feature 2 > -0.694915)\n     If (feature 2 <= 0.288136)\n      If (feature 2 <= 0.152542)\n       Predict: 2.0\n      ...\n\n(0,1.0,1.0)\n(1,1.0,1.0)\n(2,1.0,1.0)\n...\n(8,1.0,1.3333333333333333)\n...\n(36,3.0,2.6666666666666665)\n...\n(43,3.0,2.3333333333333335)\n(44,3.0,2.6944444444444446)\n...\n(48,3.0,3.0)\n(49,3.0,3.0)\n\n\nNext Step\nnumTrees, numDepth, maxBins\u306e\u8abf\u6574\u3092\u3057\u3066\u3001\u7cbe\u5ea6\u3068\u5b9f\u884c\u6642\u9593\u306e\u517c\u306d\u5408\u3044\u3092\u898b\u308b\u306a\u3069\u3002\u3063\u3066\u3082150\u4ef6\u3057\u304b\u306a\u3044iris\u30c7\u30fc\u30bf\u306a\u3093\u3067\u3001\u9069\u5f53\u3067\u3044\u3044\u304b\u306a\u611f\u306f\u3042\u308a\u307e\u3059\u304c\u3002\n\n\n\n\nbuild.sbt\u306b\u3064\u3044\u3066\u306f\u3001 \u300cSpark MLlib\u3067\u76f8\u95a2\u4fc2\u6570\u3092\u7b97\u51fa\u3057\u3066\u307f\u308b\u3002\u300d\u3092\u53c2\u8003\u306b\u3055\u305b\u3066\u9802\u304d\u307e\u3057\u305f\u00a0\u21a9\n\n\n\n[Apache Spark 1.2.0](http://spark.apache.org/releases/spark-release-1-2-0.html)\u3067\u3001MLlib\u306bRandomForest\u304c\u5b9f\u88c5\u3055\u308c\u3066\u3044\u307e\u3057\u3066\u3001\u5206\u985e(classification)\u3082\u56de\u5e30(regression)\u3082\u51fa\u6765\u308b\u3088\u3046\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u3002\n\nSBT\u3092\u4f7f\u3046\u3068\u3001\u6bd4\u8f03\u7684\u7c21\u5358\u306b\u30ed\u30fc\u30ab\u30eb\u74b0\u5883\u3067\u8a66\u305b\u305f\u306e\u3067\u3001\u30e1\u30e2\u3057\u3066\u304a\u304d\u307e\u3059\u3002\n\n# \u74b0\u5883\n\u5fc5\u8981\u306a\u306e\u306f\u3001JDK\u3068SBT\u306e2\u3064\u3002\n\nOS\u306f\u300cWindows 8.1 64bit\u7248\u300d\u306e\u7121\u5370(not Pro)\u3067\u3084\u3063\u3066\u307e\u3059\u304c\u3001\u7279\u5225\u306a\u3053\u3068\u306f\u3057\u3066\u3044\u306a\u3044\u306e\u3067\u3001\u4ed6\u306eOS\u3067\u3082\u52d5\u304f\u3093\u3058\u3083\u306a\u3044\u304b\u306a\u3068\u3002\n\n**JDK8**\n\n```console\n> javac -version\njavac 1.8.0_25\n```\n\n**SBT**\n\n```console\n> sbt about\n[info] This is sbt 0.13.7\n```\n\nSBT\u306f\u3001msi\u3092\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3057\u3066\u666e\u901a\u306b\u30a4\u30f3\u30b9\u30c8\u30fc\u30e9\u30fc\u304b\u3089\u5165\u308c\u305f\u306e\u3067\u3059\u304c (\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u5148\u306fc:\\scala\\sbt\u306b\u5909\u66f4)\u3001\u74b0\u5883\u5909\u6570PATH\u307e\u3067\u901a\u3057\u3066\u304f\u308c\u3066\u4fbf\u5229\u3067\u3057\u305f\u3002\n\n[SBT Download](http://www.scala-sbt.org/download.html)\n\n\n# Steps\n\n## \u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u30d5\u30a9\u30eb\u30c0\u3092\u4f5c\u308b\ncd\u3057\u3084\u3059\u3044\u5834\u6240\u306b\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u306e\u30d5\u30a9\u30eb\u30c0\u3092\u4f5c\u308a\u307e\u3059\u3002\u79c1\u306e\u5834\u5408\u306f\u3053\u3093\u306a\u611f\u3058\u3067\u3002\n\n```console\n> mkdir c:\\scala\\hello-rf\n```\n\n## build.sbt\u3092\u4f5c\u308b\n\n\u300cbuild.sbt\u300d\u3068\u3044\u3046\u30d5\u30a1\u30a4\u30eb\u540d\u306e\u30c6\u30ad\u30b9\u30c8\u30d5\u30a1\u30a4\u30eb\u3092\u4f5c\u3063\u3066\u3001\u305d\u3053\u306b\u4ee5\u4e0b\u306e\u5185\u5bb9\u3092\u8a18\u8ff0\u3057\u307e\u3059[^1]\u3002\n\n[^1]: build.sbt\u306b\u3064\u3044\u3066\u306f\u3001 \u300c[Spark MLlib\u3067\u76f8\u95a2\u4fc2\u6570\u3092\u7b97\u51fa\u3057\u3066\u307f\u308b\u3002](http://qiita.com/TomoyaIgarashi/items/e0e71a5d72062d5334e4)\u300d\u3092\u53c2\u8003\u306b\u3055\u305b\u3066\u9802\u304d\u307e\u3057\u305f\n\n```scala:build.sbt\nname := \"Hello RandomForest\"\n\nversion := \"0.0.1\"\n\nscalaVersion := \"2.10.4\"\n\nscalacOptions ++= Seq(\"-Xlint\", \"-deprecation\", \"-unchecked\", \"-feature\", \"-Xelide-below\", \"ALL\")\n\nlibraryDependencies ++= Seq(\n  \"org.apache.spark\" %% \"spark-core\" % \"1.2.1\",\n  \"org.apache.spark\" %% \"spark-mllib\" % \"1.2.1\"\n)\n\n```\n\nspark\u306e\u30d0\u30fc\u30b8\u30e7\u30f3\u306f1.2.1\u304cMaven\u306erepo\u306b\u51fa\u3066\u308b\u306e\u3067\u3001\u305d\u308c\u3092\u5229\u7528\u3057\u3066\u3044\u307e\u3059\u3002\n\n[Maven Repository: org.apache.spark](http://mvnrepository.com/artifact/org.apache.spark)\n\n## RandomForest\u3092\u547c\u3073\u51fa\u3059\u30b3\u30fc\u30c9\u3092Scala\u3067\u4f5c\u308b\n\n\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u304cMLlib\u306e\u30da\u30fc\u30b8\u306b\u3042\u308b\u306e\u3067\u3059\u304c\u3001\n\n[Emsambles - MLlib](https://spark.apache.org/docs/1.2.0/mllib-ensembles.html)\n\niris\u30c7\u30fc\u30bf\u306e\u307b\u3046\u304cR\u3068\u306e\u6bd4\u8f03\u3068\u304b\u3084\u308a\u3084\u3059\u3044\u3067\u3057\u3087(\u3042\u3068\u3053\u306e\u30b5\u30f3\u30d7\u30eb\u3001\u79c1\u306f\u51fa\u529b\u304c\u5206\u304b\u308a\u306b\u304f\u304b\u3063\u305f)\u3001\u3063\u3066\u3053\u3068\u3067\u3001\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u5909\u3048\u3066\u307f\u307e\u3057\u305f\u3002\n\n\u3053\u308c\u3092HelloRf.scala\u3068\u3044\u3046\u540d\u524d\u3067\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u30d5\u30a9\u30eb\u30c0\u76f4\u4e0b\u306b\u7f6e\u304d\u307e\u3059\u3002\n\n```scala:HelloRf.scala\nimport org.apache.spark.SparkContext\nimport org.apache.spark.mllib.tree.RandomForest\nimport org.apache.spark.mllib.util.MLUtils\n\nobject HelloRf\n{\n  val sc = new SparkContext(\"local\", \"HelloRf\")\n\n  // Load and parse the data file.\n  // libsvm style iris Data - http://www.csie.ntu.edu.tw/~cjlin/libsvmtools/datasets/multiclass/iris.scale\n  val data = MLUtils.loadLibSVMFile(sc, \"iris.scale\")\n\n  // Split the data into training and test sets (30% held out for testing)\n  val splits = data.randomSplit(Array(0.7, 0.3))\n  val (trainingData, testData) = (splits(0), splits(1))\n\n  def main(args: Array[String]): Unit =\n  {\n    trainClassifier()\n    trainRegressor()\n  }\n\n  def trainClassifier() =\n  {\n    val startTime = System.currentTimeMillis\n    \n    // Train a RandomForest model.\n    // Empty categoricalFeaturesInfo indicates all features are continuous.\n    val numClasses = 4 // Iris data: 3 labels, (label + 1) value seems to be needed.\n    val categoricalFeaturesInfo = Map[Int, Int]()\n    val numTrees = 3 // Use more in practice.\n    val featureSubsetStrategy = \"auto\" // Let the algorithm choose.\n    val impurity = \"gini\"\n    val maxDepth = 4 // <= 30\n    val maxBins = 32\n\n    val model = RandomForest.trainClassifier(\n      trainingData, numClasses, categoricalFeaturesInfo,\n      numTrees, featureSubsetStrategy, impurity, maxDepth, maxBins)\n\n    // Evaluate model on test instances and compute test error\n    val labelAndPreds = testData.zipWithIndex.map\n    {\n      case(current, index) =>\n        val predictionResult = model.predict(current.features)\n        (index, current.label, predictionResult, current.label == predictionResult) // Tuple\n    }\n    \n    val execTime = System.currentTimeMillis - startTime\n    \n    val testDataCount = testData.count()\n    val testErrCount = labelAndPreds.filter(r => !r._4).count // r._4 = 4th element of tuple (current.label == predictionResult)\n    val testSuccessRate = 100 - (testErrCount.toDouble / testDataCount * 100)\n\n    println(\"RfClassifier Results: \" + testSuccessRate + \"% numTrees: \" + numTrees + \" maxDepth: \" + maxDepth + \" execTime(msec): \" + execTime)\n    println(\"Test Data Count = \" + testDataCount)\n    println(\"Test Error Count = \" + testErrCount)\n    println(\"Test Success Rate (%) = \" + testSuccessRate)\n    println(\"Learned classification forest model:\\n\" + model.toDebugString)\n    labelAndPreds.foreach(x => println(x))\n  }\n\n  def trainRegressor()\n  {\n    val startTime = System.currentTimeMillis\n    \n    // Train a RandomForest model.\n    // Empty categoricalFeaturesInfo indicates all features are continuous.\n    val numClasses = 0 // not used for regression\n    val categoricalFeaturesInfo = Map[Int, Int]()\n    val numTrees = 3 // Use more in practice.\n    val featureSubsetStrategy = \"auto\" // Let the algorithm choose.\n    val impurity = \"variance\"\n    val maxDepth = 4\n    val maxBins = 32\n\n    val model = RandomForest.trainRegressor(\n      trainingData, categoricalFeaturesInfo,\n      numTrees, featureSubsetStrategy, impurity, maxDepth, maxBins)\n\n    // Evaluate model on test instances and compute test error\n    val labelsAndPredictions = testData.zipWithIndex.map\n    {\n      case(current, index) =>\n        val predictionResult = model.predict(current.features)\n        (index, current.label, predictionResult) // Tuple\n    }\n    \n    val execTime = System.currentTimeMillis - startTime\n    \n    println(\"RfRegressor Results: execTime(msec): \" + execTime)\n    println(\"Learned regression forest model:\\n\" + model.toDebugString)\n    labelsAndPredictions.foreach(x => println(x))\n  }\n}\n```\n\n\u307e\u3042\u3001\u30d5\u30a1\u30a4\u30eb\u540d\u306f\u62e1\u5f35\u5b50.scala\u3067\u3042\u308c\u3070\u4f55\u3067\u3082\u3044\u3044\u3067\u3059\u3002\u30d5\u30a1\u30a4\u30eb\u3092\u7f6e\u304f\u5834\u6240\u3082\u3001\u7dba\u9e97\u597d\u304d\u306a\u65b9\u306f\u3001\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u30d5\u30a9\u30eb\u30c0\u76f4\u4e0b\u3067\u306f\u306a\u304f\u3066maven\u30b9\u30bf\u30a4\u30eb\u306a\u300csrc\\main\\scala\u300d\u30d5\u30a9\u30eb\u30c0\u3092\u4f5c\u3063\u3066\u3001\u305d\u3053\u306b\u5165\u308c\u305f\u3089\u3044\u3044\u3068\u601d\u3044\u307e\u3059\u3002\n\n## Iris\u30c7\u30fc\u30bf\u3092\u5165\u624b\u3059\u308b\n\n\u30c7\u30fc\u30bf\u306f`RDD<LabeledPoint>`\u3068\u3057\u3066\u8aad\u307f\u8fbc\u3093\u3067\u3084\u308c\u3070\u3044\u3044\u3068\u3044\u3046\u3053\u3068\u306a\u3093\u3067\u3059\u304c\u3001libsvm\u5f62\u5f0f\u306eiris\u30c7\u30fc\u30bf\u304c\u3042\u3063\u305f\u306e\u3067\u3001\u3053\u308c\u3092\u30b5\u30f3\u30d7\u30eb\u901a\u308a`MLUtils.loadLibSVMFile`\u3067\u8aad\u307f\u8fbc\u3080\u3068\u3044\u3046\u65b9\u91dd\u3067\u3002\n\n\u4ee5\u4e0b\u304b\u3089\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3057\u3066\u3001\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u30d5\u30a9\u30eb\u30c0\u76f4\u4e0b\u306b\u7f6e\u304d\u307e\u3059\u3002\n\n[LIBSVM Data - iris.scale](http://www.csie.ntu.edu.tw/~cjlin/libsvmtools/datasets/multiclass/iris.scale)\n\n\n## \u5b9f\u884c\u3059\u308b\n\n\u30b3\u30de\u30f3\u30c9\u30d7\u30ed\u30f3\u30d7\u30c8\u3067\u3001\n\n```console\n> cd [your project folder]\n> sbt compile\n> sbt run > sysout.txt\n```\n\n\u30ea\u30c0\u30a4\u30ec\u30af\u30c8\u3067txt\u3092\u5410\u3044\u3066\u304a\u304f\u3068\u3001println\u306e\u3068\u3053\u308d\u3060\u3051\u53d6\u308c\u308b\u3093\u3067\u308f\u304b\u308a\u3084\u3059\u3044\u304b\u306a\u3068\u3002\n\n\u5b9f\u969b\u306b\u3084\u3063\u3066\u307f\u305f\u7d50\u679c\u304c\u3053\u3061\u3089\u3002iris\u30c7\u30fc\u30bf\u306b\u5bfe\u3057\u3066Classifier\u306e\u6b63\u89e3\u738794.0%\u306f\u3001\u307e\u3042\u666e\u901a\u3068\u3044\u3063\u305f\u3068\u3053\u308d\u3067\u3057\u3087\u3046\u304b\u3002Tree\u306e\u6570\u3001if-else\u306e\u6570\u3068\u6df1\u3055\u306f\u3001numTrees, numDepth, maxBins\u3092\u5f04\u308b\u3068\u5909\u308f\u308b\u3093\u3067\u3001\u304a\u8a66\u3057\u3042\u308c\u3063\u3066\u3068\u3053\u308d\u3067\u3059\u306d\u3002\n\n```text\nRfClassifier Results: 94.0% numTrees: 3 maxDepth: 4 execTime(msec): 11237\nTest Data Count = 50\nTest Error Count = 3\nTest Success Rate (%) = 94.0\nLearned classification forest model:\nTreeEnsembleModel classifier with 3 trees\n\n  Tree 0:\n    If (feature 2 <= -0.694915)\n     Predict: 1.0\n    Else (feature 2 > -0.694915)\n     If (feature 3 <= 0.25)\n     ...\n  Tree 1:\n    If (feature 0 <= -0.388889)\n     If (feature 2 <= -0.762712)\n      Predict: 1.0\n     Else (feature 2 > -0.762712)\n      If (feature 2 <= -0.152542)\n       Predict: 2.0\n      ...\n  Tree 2:\n    If (feature 2 <= -0.694915)\n     Predict: 1.0\n    Else (feature 2 > -0.694915)\n     If (feature 3 <= 0.166667)\n     ...\n\n(0,1.0,1.0,true)\n(1,1.0,1.0,true)\n(2,1.0,1.0,true)\n...\n(8,1.0,1.0,true)\n...\n(36,3.0,2.0,false)\n...\n(43,3.0,2.0,false)\n(44,3.0,2.0,false)\n...\n(48,3.0,3.0,true)\n(49,3.0,3.0,true)\n\nRfRegressor Results: execTime(msec): 5796\nLearned regression forest model:\nTreeEnsembleModel regressor with 3 trees\n\n  Tree 0:\n    If (feature 3 <= -0.583333)\n     Predict: 1.0\n    Else (feature 3 > -0.583333)\n     If (feature 3 <= 0.25)\n      If (feature 1 <= -0.5)\n       If (feature 3 <= -4.03573E-8)\n        Predict: 2.0\n       ...\n  Tree 1:\n    If (feature 2 <= -0.762712)\n     Predict: 1.0\n    Else (feature 2 > -0.762712)\n     If (feature 2 <= 0.254237)\n      Predict: 2.0\n     ...\n  Tree 2:\n    If (feature 2 <= -0.694915)\n     Predict: 1.0\n    Else (feature 2 > -0.694915)\n     If (feature 2 <= 0.288136)\n      If (feature 2 <= 0.152542)\n       Predict: 2.0\n      ...\n\n(0,1.0,1.0)\n(1,1.0,1.0)\n(2,1.0,1.0)\n...\n(8,1.0,1.3333333333333333)\n...\n(36,3.0,2.6666666666666665)\n...\n(43,3.0,2.3333333333333335)\n(44,3.0,2.6944444444444446)\n...\n(48,3.0,3.0)\n(49,3.0,3.0)\n```\n\n# Next Step\n\nnumTrees, numDepth, maxBins\u306e\u8abf\u6574\u3092\u3057\u3066\u3001\u7cbe\u5ea6\u3068\u5b9f\u884c\u6642\u9593\u306e\u517c\u306d\u5408\u3044\u3092\u898b\u308b\u306a\u3069\u3002\u3063\u3066\u3082150\u4ef6\u3057\u304b\u306a\u3044iris\u30c7\u30fc\u30bf\u306a\u3093\u3067\u3001\u9069\u5f53\u3067\u3044\u3044\u304b\u306a\u611f\u306f\u3042\u308a\u307e\u3059\u304c\u3002\n"}