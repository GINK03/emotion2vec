{"context": " More than 1 year has passed since last update.\n\n\u4fbf\u5229\u30b3\u30fc\u30c9\npublic void GetProgramInfo(int _param){\n    int[] ok = new int[1];\n    GLES20.glGetProgramiv(mProgram,_param, ok,0);\n    if(ok[0]==0){\n        Log.e(TAG,\"error \");\n        Log.e(TAG,GLES20.glGetProgramInfoLog(mProgram));\n    }\n\n}\n\n\nglGetShaderiv\nglGetShaderiv(GLuint shader,GLenum pname,GLint *params);\n\n\u4f8b\nglGetShaderiv(shader,GL_SHADER_TYPE...);\n\n\u623b\u308a\u5024\u306fGL_VERTEX_SHADER,\u304b GL_FRAGMENT_SHADER\n\nGL_SHADER_TYPE\nGL_DELETE_STATUS\nGL_COMPILE_STATUS....\u3061\u3083\u3093\u3068\u30b7\u30a7\u30fc\u30c0\u304c\u30b3\u30f3\u30d1\u30a4\u30eb\u3067\u304d\u305f\u3089params\u306b\u306fGL_TRUE\u304c\u8fd4\u308b\u3002\u5931\u6557\u3057\u305f\u3089GL_FALSE\u304c\u8fd4\u308b\u3002\nGL_INFO_LOG_LENGTH\nGL_SHADER_SOURCE_LENGTH\n\n\nglGetProgramiv\n\nGL_DELETE_STATUS\nGL_LINK_STATUS\nGL_VALIDATE_STATUS\nGL_INFO_LOG_LENGTH\nGL_ATTACHED_SHADERS\nGL_ACTIVE_ATTRIBUTES\nGL_ACTIVE_ATTRIBUTE_MAX_LENGTH\nGL_ACTIVE_UNIFORMS\n: GL_ACTIVE_UNIFORM_MAX_LENGTH : \u73fe\u5728\u30a2\u30af\u30c6\u30a3\u30d6\u306a\u30e6\u30cb\u30d5\u30a9\u30fc\u30e0\u5909\u6570\u306e\u540d\u524d\u306e\u6700\u5927\u6587\u5b57\u6570\u3002\u306a\u3093\u3067\u3053\u308c\u3092\u77e5\u308b\u5fc5\u8981\u304c\uff1f\uff1f\uff1f\n\n\nglGetShaderSource\n\nglGetShaderInfoLog\n\n\u30b7\u30a7\u30fc\u30c0\u304c\u3061\u3083\u3093\u3068\u30b3\u30f3\u30d1\u30a4\u30eb\u3067\u304d\u305f\u304b\u78ba\u8a8d\u3059\u308b\nvoid GetShaderInfoLog(GLuint shader)\n{\n    GLsizei bufSize;\n\n    /* \u30b7\u30a7\u30fc\u30c0\u306e\u30b3\u30f3\u30d1\u30a4\u30eb\u6642\u306e\u30ed\u30b0\u306e\u9577\u3055\u3092\u53d6\u5f97\u3059\u308b */\n    glGetShaderiv(shader, GL_INFO_LOG_LENGTH , &bufSize);\n\n    if (bufSize > 1) {\n        GLchar *infoLog = (GLchar *)malloc(bufSize);\n\n        if (infoLog != NULL) {\n            GLsizei length;\n\n            /* \u30b7\u30a7\u30fc\u30c0\u306e\u30b3\u30f3\u30d1\u30a4\u30eb\u6642\u306e\u30ed\u30b0\u306e\u5185\u5bb9\u3092\u53d6\u5f97\u3059\u308b */\n            glGetShaderInfoLog(shader, bufSize, &length, infoLog);\n            TRACE(\"InfoLog:\\n%s\\n\\n\", infoLog);\n            free(infoLog);\n        }\n        else\n            TRACE(\"Could not allocate InfoLog buffer.\\n\");\n    }\n}\n\n private int loadShader(int type, String shaderCode){\n       int[] compiled=new int[1];\n       int shader=GLES20.glCreateShader(type);\n       GLES20.glShaderSource(shader, shaderCode);\n       GLES20.glCompileShader(shader);\n       int[] compiled=new int[1];\n           GLES20.glGetShaderiv(shader,GLES20.GL_COMPILE_STATUS,compiled,0);\n           if(compiled[0]==0){//\u3082\u3057\u30b3\u30f3\u30d1\u30a4\u30eb\u306b\u5931\u6557\u3057\u3066\u3044\u305f\u3089\n               Log.e(TAG,GLES20.glGetShaderInfoLog(shader));//\u4f55\u884c\u76ee\u304c\u3069\u3093\u306a\u3075\u3046\u306b\u9593\u9055\u3063\u3066\u308b\u304b\u5410\u304d\u51fa\u3059\u3002\n               GLES20.glDeleteShader(shader);\n               return 0;\n           }\n       return shader;\n   }\n}\n\n\u3053\u308c\u3092\u66f8\u304f\u3068\u3001\u3053\u306e\u3088\u3046\u306b\n\n\"warning C7502: OpenGL does not allow type suffix 'f' on constant literals\n0(8) : warning C7503: OpenGL does not allow C-style casts\n0(8) : warning C7503: OpenGL does not allow C-style casts\n0(8) : warning C7503: OpenGL does not allow C-style casts\n0(12) : warning C7011: implicit cast from \"float\" to \"vec4\"\n0(13) : error C0000: syntax error, unexpected '}', expecting ',' or ';' at token \"}\"\n0(4) : error C1068: too much data in type constructor\"\n\n\u4f55\u884c\u76ee\u304c\u30a8\u30e9\u30fc\u306a\u306e\u304b\u6559\u3048\u3066\u304f\u308c\u308b\u3002\n# \u4fbf\u5229\u30b3\u30fc\u30c9\n\n```java:\npublic void GetProgramInfo(int _param){\n\tint[] ok = new int[1];\n\tGLES20.glGetProgramiv(mProgram,_param, ok,0);\n    if(ok[0]==0){\n    \tLog.e(TAG,\"error \");\n    \tLog.e(TAG,GLES20.glGetProgramInfoLog(mProgram));\n    }\n    \n}\n```\n\n# glGetShaderiv\n\n```cpp:\nglGetShaderiv(GLuint shader,GLenum pname,GLint *params);\n```\n\n\u4f8b\n\n```cpp:\nglGetShaderiv(shader,GL_SHADER_TYPE...);\n```\n\n\u623b\u308a\u5024\u306fGL_VERTEX_SHADER,\u304b GL_FRAGMENT_SHADER\n\n* GL_SHADER_TYPE\n* GL_DELETE_STATUS\n* GL_COMPILE_STATUS....\u3061\u3083\u3093\u3068\u30b7\u30a7\u30fc\u30c0\u304c\u30b3\u30f3\u30d1\u30a4\u30eb\u3067\u304d\u305f\u3089params\u306b\u306fGL_TRUE\u304c\u8fd4\u308b\u3002\u5931\u6557\u3057\u305f\u3089GL_FALSE\u304c\u8fd4\u308b\u3002\n* GL_INFO_LOG_LENGTH\n* GL_SHADER_SOURCE_LENGTH\n\n# glGetProgramiv\n* GL_DELETE_STATUS\n* GL_LINK_STATUS\n* GL_VALIDATE_STATUS\n* GL_INFO_LOG_LENGTH\n* GL_ATTACHED_SHADERS\n* GL_ACTIVE_ATTRIBUTES\n* GL_ACTIVE_ATTRIBUTE_MAX_LENGTH\n* GL_ACTIVE_UNIFORMS\n: GL_ACTIVE_UNIFORM_MAX_LENGTH : \u73fe\u5728\u30a2\u30af\u30c6\u30a3\u30d6\u306a\u30e6\u30cb\u30d5\u30a9\u30fc\u30e0\u5909\u6570\u306e\u540d\u524d\u306e\u6700\u5927\u6587\u5b57\u6570\u3002\u306a\u3093\u3067\u3053\u308c\u3092\u77e5\u308b\u5fc5\u8981\u304c\uff1f\uff1f\uff1f\n\n# glGetShaderSource\n# glGetShaderInfoLog\n## \u30b7\u30a7\u30fc\u30c0\u304c\u3061\u3083\u3093\u3068\u30b3\u30f3\u30d1\u30a4\u30eb\u3067\u304d\u305f\u304b\u78ba\u8a8d\u3059\u308b\n\n\n```cpp:\nvoid GetShaderInfoLog(GLuint shader)\n{\n\tGLsizei bufSize;\n\n\t/* \u30b7\u30a7\u30fc\u30c0\u306e\u30b3\u30f3\u30d1\u30a4\u30eb\u6642\u306e\u30ed\u30b0\u306e\u9577\u3055\u3092\u53d6\u5f97\u3059\u308b */\n\tglGetShaderiv(shader, GL_INFO_LOG_LENGTH , &bufSize);\n\n\tif (bufSize > 1) {\n\t\tGLchar *infoLog = (GLchar *)malloc(bufSize);\n\n\t\tif (infoLog != NULL) {\n\t\t\tGLsizei length;\n\n\t\t\t/* \u30b7\u30a7\u30fc\u30c0\u306e\u30b3\u30f3\u30d1\u30a4\u30eb\u6642\u306e\u30ed\u30b0\u306e\u5185\u5bb9\u3092\u53d6\u5f97\u3059\u308b */\n\t\t\tglGetShaderInfoLog(shader, bufSize, &length, infoLog);\n\t\t\tTRACE(\"InfoLog:\\n%s\\n\\n\", infoLog);\n\t\t\tfree(infoLog);\n\t\t}\n\t\telse\n\t\t\tTRACE(\"Could not allocate InfoLog buffer.\\n\");\n\t}\n}\n```\n\n```java:\n private int loadShader(int type, String shaderCode){\n\t   int[] compiled=new int[1];\n\t   int shader=GLES20.glCreateShader(type);\n\t   GLES20.glShaderSource(shader, shaderCode);\n\t   GLES20.glCompileShader(shader);\n\t   int[] compiled=new int[1];\n\t\t   GLES20.glGetShaderiv(shader,GLES20.GL_COMPILE_STATUS,compiled,0);\n\t\t   if(compiled[0]==0){//\u3082\u3057\u30b3\u30f3\u30d1\u30a4\u30eb\u306b\u5931\u6557\u3057\u3066\u3044\u305f\u3089\n\t\t\t   Log.e(TAG,GLES20.glGetShaderInfoLog(shader));//\u4f55\u884c\u76ee\u304c\u3069\u3093\u306a\u3075\u3046\u306b\u9593\u9055\u3063\u3066\u308b\u304b\u5410\u304d\u51fa\u3059\u3002\n\t\t\t   GLES20.glDeleteShader(shader);\n\t\t\t   return 0;\n\t\t   }\n\t   return shader;\n   }\n}\n```\n\n\n\u3053\u308c\u3092\u66f8\u304f\u3068\u3001\u3053\u306e\u3088\u3046\u306b\n\n> \"warning C7502: OpenGL does not allow type suffix 'f' on constant literals\n0(8) : warning C7503: OpenGL does not allow C-style casts\n0(8) : warning C7503: OpenGL does not allow C-style casts\n0(8) : warning C7503: OpenGL does not allow C-style casts\n0(12) : warning C7011: implicit cast from \"float\" to \"vec4\"\n0(13) : error C0000: syntax error, unexpected '}', expecting ',' or ';' at token \"}\"\n0(4) : error C1068: too much data in type constructor\"\n\n\u4f55\u884c\u76ee\u304c\u30a8\u30e9\u30fc\u306a\u306e\u304b\u6559\u3048\u3066\u304f\u308c\u308b\u3002\n", "tags": ["OpenGL", "GLSL", "C++"]}