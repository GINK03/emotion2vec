{"context": " More than 1 year has passed since last update.\n\n\u3084\u308a\u305f\u3044\u3053\u3068\nAWS API Gateway\u3067Content-Type:application/x-www-form-urlencoded \u306ePOST\u30c7\u30fc\u30bf\u3092\u53d7\u3051\u53d6\u308a JSON\u306b\u5909\u63db\u3059\u308b\n\n\u306a\u3093\u3067\u3084\u308a\u305f\u3044\u306e\uff1f\nAWS\u306eAPI Gateway \u3092\u4f7f\u7528\u3059\u308b\u5834\u5408\u3001POST \u306e Content-Type\u306f application/json \u304c\u6a19\u6e96\u3068\u306a\u3063\u3066\u3044\u307e\u3059\u3002\n\u307e\u305f\u3001Lambda \u306e\u5165\u529b\u3082 json\u5f62\u5f0f\u3060\u3068\u3044\u308d\u3044\u308d\u3068\u6271\u3044\u3084\u3059\u304f\u3067\u304d\u3066\u3044\u307e\u3059\u3002\n\u305d\u306e\u305f\u3081\u3001Lambda\u9023\u643a\u3092\u3059\u308b\u5834\u5408\u306f\u7279\u306b\u3001application/x-www-form-urlencoded \u306e\u30c7\u30fc\u30bf\u3092\u53d7\u3051\u53d6\u308b\u5834\u5408\u306b\u306f API Gateway \u3067JSON\u306b\u30de\u30c3\u30d4\u30f3\u30b0\u3059\u308b\u3068\u4fbf\u5229\u3067\u3059\u3002\n\nLambda\u306e\u8a2d\u5b9a\n[\u524d\u63d0] NodeJS\u3092\u4f7f\u7528\u3002Configuration\u306f\u516c\u5f0f\u306e\u30b5\u30f3\u30d7\u30eb\u3068\u540c\u69d8\nCode\u306f\u4ee5\u4e0b\u3092\u5165\u529b\u3057\u3066\u304f\u3060\u3055\u3044\nexports.handler = function(event, context) {\n    console.log(JSON.stringify({event: event, context: context}, null, 2));\n    context.succeed({event: event});\n};\n\n\nAPI Gateway\u306e\u8a2d\u5b9a\n[\u524d\u63d0] API Gateway \u3068 Lambda \u306e\u9023\u643a\u306f\u3067\u304d\u3066\u3044\u308b\u3082\u306e\u3068\u3057\u307e\u3059\n\nIntegration Request \u3092\u30af\u30ea\u30c3\u30af\nMapping Templates \u3092\u30af\u30ea\u30c3\u30af\n+ Add mapping template \u3092\u30af\u30ea\u30c3\u30af\nContent-Type \u306b application/x-www-form-urlencoded \u3092\u5165\u529b\napplication/x-www-form-urlencoded \u3092\u30af\u30ea\u30c3\u30af\nInput passthrough \u306e\u53f3\u5074\u306e\u925b\u7b46\u30a2\u30a4\u30b3\u30f3\u3092\u30af\u30ea\u30c3\u30af\n\u9078\u629e\u30dc\u30c3\u30af\u30b9\u304b\u3089 Mapping template\u3092\u9078\u629e\u3057\u4ee5\u4e0b\u306e\u30b3\u30fc\u30c9\u3092\u30c6\u30ad\u30b9\u30c8\u30a8\u30ea\u30a2\u306b\u30da\u30fc\u30b9\u30c8\u3057\u3001\u30c1\u30a7\u30c3\u30af\u30de\u30fc\u30af\u3092\u30af\u30ea\u30c3\u30af\u3057\u3066Save.\n\n## convert HTML POST data or HTTP GET query string to JSON\n\n## get the raw post data from the AWS built-in variable and give it a nicer name\n#if ($context.httpMethod == \"POST\")\n #set($rawAPIData = $input.path('$'))\n ## escape any quotes\n #set($rawAPIData = $rawAPIData.replace('\"', '\\\"'))\n#elseif ($context.httpMethod == \"GET\")\n #set($rawAPIData = $input.params().querystring)\n #set($rawAPIData = $rawAPIData.toString())\n #set($rawAPIDataLength = $rawAPIData.length() - 1)\n #set($rawAPIData = $rawAPIData.substring(1, $rawAPIDataLength))\n #set($rawAPIData = $rawAPIData.replace(\", \", \"&\"))\n#else\n #set($rawAPIData = \"\")\n#end\n\n## first we get the number of \"&\" in the string, this tells us if there is more than one key value pair\n#set($countAmpersands = $rawAPIData.length() - $rawAPIData.replace(\"&\", \"\").length())\n\n## if there are no \"&\" at all then we have only one key value pair.\n## we append an ampersand to the string so that we can tokenise it the same way as multiple kv pairs.\n## the \"empty\" kv pair to the right of the ampersand will be ignored anyway.\n#if ($countAmpersands == 0)\n #set($rawPostData = $rawAPIData + \"&\")\n#end\n\n## now we tokenise using the ampersand(s)\n#set($tokenisedAmpersand = $rawAPIData.split(\"&\"))\n\n## we set up a variable to hold the valid key value pairs\n#set($tokenisedEquals = [])\n\n## now we set up a loop to find the valid key value pairs, which must contain only one \"=\"\n#foreach( $kvPair in $tokenisedAmpersand )\n #set($countEquals = $kvPair.length() - $kvPair.replace(\"=\", \"\").length())\n #if ($countEquals == 1)\n  #set($kvTokenised = $kvPair.split(\"=\"))\n  #if ($kvTokenised[0].length() > 0)\n   ## we found a valid key value pair. add it to the list.\n   #set($devNull = $tokenisedEquals.add($kvPair))\n  #end\n #end\n#end\n\n## next we set up our loop inside the output structure \"{\" and \"}\"\n{\n#foreach( $kvPair in $tokenisedEquals )\n  ## finally we output the JSON for this pair and append a comma if this isn't the last pair\n  #set($kvTokenised = $kvPair.split(\"=\"))\n  #if($kvTokenised.size() == 2 && $kvTokenised[1].length() > 0)\n    #set($kvValue = $kvTokenised[1])\n  #else\n    #set($kvValue = \"\")\n  #end\n  #if( $foreach.hasNext )\n    #set($itemDelimiter = \",\")\n  #else\n    #set($itemDelimiter = \"\")\n  #end\n \"$kvTokenised[0]\" : \"$kvValue\"$itemDelimiter\n#end\n}\n\n\n\u78ba\u8a8d\n\nAPI\u3092Deploy\n\u30bf\u30fc\u30df\u30ca\u30eb\u7b49\u304b\u3089Curl\u3067Request\u3092\u6295\u3052\u308b\n\ncurl -H \"Content-Type: application/x-www-form-urlencoded\" -X POST -d \"abc=xyz&def[0]=zzz&def[1]=xxx%0ayyy\" [API Gateway\u306eInvoke URL]\n\n\u4ee5\u4e0b\u306e Response\u304c\u8fd4\u3063\u3066\u304d\u305f\u3089\u6210\u529f\n{\"event\":{\"abc\":\"xyz\",\"def[0]\":\"zzz\",\"def[1]\":\"xxx%0ayyy\"}}\n\n\u3082\u3057\u3001\u4ee5\u4e0b\u306e Response\u304c\u8fd4\u3063\u3066\u304d\u305f\u5834\u5408\u306f URL\u304c\u9055\u3046\u3053\u3068\u304c\u591a\u3044\u306e\u3067\u898b\u76f4\u3059\u3053\u3068\n{\"message\":\"Missing Authentication Token\"}\n\nContent-Type\u7b49\u304c\u9055\u3046\u5834\u5408\u306f\u4ee5\u4e0b\u306e Response\u304c\u8fd4\u3063\u3066\u304f\u308b\n{\"message\": \"Could not parse request body into json: Unrecognized token \\'abc\\': was expecting (\\'true\\', \\'false\\' or \\'null\\')\\n at [Source: [<<some>>; line: 1, column: 5]\"}\n\n\n\u53c2\u8003\n\nHOWTO: Mapping Template v3.0 to convert form POST data or GET query to JSON\nHTML\u30d5\u30a9\u30fc\u30e0\u304b\u3089APIGateway\u3092\u4f7f\u3063\u3066AWS Lambda\u306bPOST\u3059\u308b\nAPI Gateway\u3078\u306e\u5165\u529b\u5024\u306bLambda\u304b\u3089\u30a2\u30af\u30bb\u30b9\u3059\u308b\n\n\n## \u3084\u308a\u305f\u3044\u3053\u3068\n AWS API Gateway\u3067Content-Type:application/x-www-form-urlencoded \u306ePOST\u30c7\u30fc\u30bf\u3092\u53d7\u3051\u53d6\u308a JSON\u306b\u5909\u63db\u3059\u308b\n\n\n\n## \u306a\u3093\u3067\u3084\u308a\u305f\u3044\u306e\uff1f\nAWS\u306eAPI Gateway \u3092\u4f7f\u7528\u3059\u308b\u5834\u5408\u3001POST \u306e Content-Type\u306f application/json \u304c\u6a19\u6e96\u3068\u306a\u3063\u3066\u3044\u307e\u3059\u3002\n\n\u307e\u305f\u3001Lambda \u306e\u5165\u529b\u3082 json\u5f62\u5f0f\u3060\u3068\u3044\u308d\u3044\u308d\u3068\u6271\u3044\u3084\u3059\u304f\u3067\u304d\u3066\u3044\u307e\u3059\u3002\n\n\u305d\u306e\u305f\u3081\u3001Lambda\u9023\u643a\u3092\u3059\u308b\u5834\u5408\u306f\u7279\u306b\u3001application/x-www-form-urlencoded \u306e\u30c7\u30fc\u30bf\u3092\u53d7\u3051\u53d6\u308b\u5834\u5408\u306b\u306f API Gateway \u3067JSON\u306b\u30de\u30c3\u30d4\u30f3\u30b0\u3059\u308b\u3068\u4fbf\u5229\u3067\u3059\u3002\n\n\n\n## Lambda\u306e\u8a2d\u5b9a\n\n[\u524d\u63d0] NodeJS\u3092\u4f7f\u7528\u3002Configuration\u306f\u516c\u5f0f\u306e\u30b5\u30f3\u30d7\u30eb\u3068\u540c\u69d8\n\nCode\u306f\u4ee5\u4e0b\u3092\u5165\u529b\u3057\u3066\u304f\u3060\u3055\u3044\n\n```\nexports.handler = function(event, context) {\n    console.log(JSON.stringify({event: event, context: context}, null, 2));\n    context.succeed({event: event});\n};\n```\n\n\n\n## API Gateway\u306e\u8a2d\u5b9a\n\n[\u524d\u63d0] API Gateway \u3068 Lambda \u306e\u9023\u643a\u306f\u3067\u304d\u3066\u3044\u308b\u3082\u306e\u3068\u3057\u307e\u3059\n\n1. Integration Request \u3092\u30af\u30ea\u30c3\u30af\n2. Mapping Templates \u3092\u30af\u30ea\u30c3\u30af\n3. + Add mapping template \u3092\u30af\u30ea\u30c3\u30af\n4. Content-Type \u306b application/x-www-form-urlencoded \u3092\u5165\u529b\n5. application/x-www-form-urlencoded \u3092\u30af\u30ea\u30c3\u30af\n6. Input passthrough \u306e\u53f3\u5074\u306e\u925b\u7b46\u30a2\u30a4\u30b3\u30f3\u3092\u30af\u30ea\u30c3\u30af\n7. \u9078\u629e\u30dc\u30c3\u30af\u30b9\u304b\u3089 Mapping template\u3092\u9078\u629e\u3057\u4ee5\u4e0b\u306e\u30b3\u30fc\u30c9\u3092\u30c6\u30ad\u30b9\u30c8\u30a8\u30ea\u30a2\u306b\u30da\u30fc\u30b9\u30c8\u3057\u3001\u30c1\u30a7\u30c3\u30af\u30de\u30fc\u30af\u3092\u30af\u30ea\u30c3\u30af\u3057\u3066Save.\n\n```\n## convert HTML POST data or HTTP GET query string to JSON\n\n## get the raw post data from the AWS built-in variable and give it a nicer name\n#if ($context.httpMethod == \"POST\")\n #set($rawAPIData = $input.path('$'))\n ## escape any quotes\n #set($rawAPIData = $rawAPIData.replace('\"', '\\\"'))\n#elseif ($context.httpMethod == \"GET\")\n #set($rawAPIData = $input.params().querystring)\n #set($rawAPIData = $rawAPIData.toString())\n #set($rawAPIDataLength = $rawAPIData.length() - 1)\n #set($rawAPIData = $rawAPIData.substring(1, $rawAPIDataLength))\n #set($rawAPIData = $rawAPIData.replace(\", \", \"&\"))\n#else\n #set($rawAPIData = \"\")\n#end\n\n## first we get the number of \"&\" in the string, this tells us if there is more than one key value pair\n#set($countAmpersands = $rawAPIData.length() - $rawAPIData.replace(\"&\", \"\").length())\n\n## if there are no \"&\" at all then we have only one key value pair.\n## we append an ampersand to the string so that we can tokenise it the same way as multiple kv pairs.\n## the \"empty\" kv pair to the right of the ampersand will be ignored anyway.\n#if ($countAmpersands == 0)\n #set($rawPostData = $rawAPIData + \"&\")\n#end\n\n## now we tokenise using the ampersand(s)\n#set($tokenisedAmpersand = $rawAPIData.split(\"&\"))\n\n## we set up a variable to hold the valid key value pairs\n#set($tokenisedEquals = [])\n\n## now we set up a loop to find the valid key value pairs, which must contain only one \"=\"\n#foreach( $kvPair in $tokenisedAmpersand )\n #set($countEquals = $kvPair.length() - $kvPair.replace(\"=\", \"\").length())\n #if ($countEquals == 1)\n  #set($kvTokenised = $kvPair.split(\"=\"))\n  #if ($kvTokenised[0].length() > 0)\n   ## we found a valid key value pair. add it to the list.\n   #set($devNull = $tokenisedEquals.add($kvPair))\n  #end\n #end\n#end\n\n## next we set up our loop inside the output structure \"{\" and \"}\"\n{\n#foreach( $kvPair in $tokenisedEquals )\n  ## finally we output the JSON for this pair and append a comma if this isn't the last pair\n  #set($kvTokenised = $kvPair.split(\"=\"))\n  #if($kvTokenised.size() == 2 && $kvTokenised[1].length() > 0)\n    #set($kvValue = $kvTokenised[1])\n  #else\n    #set($kvValue = \"\")\n  #end\n  #if( $foreach.hasNext )\n    #set($itemDelimiter = \",\")\n  #else\n    #set($itemDelimiter = \"\")\n  #end\n \"$kvTokenised[0]\" : \"$kvValue\"$itemDelimiter\n#end\n}\n```\n\n\n\n## \u78ba\u8a8d\n\n1. API\u3092Deploy\n2. \u30bf\u30fc\u30df\u30ca\u30eb\u7b49\u304b\u3089Curl\u3067Request\u3092\u6295\u3052\u308b\n\n```\ncurl -H \"Content-Type: application/x-www-form-urlencoded\" -X POST -d \"abc=xyz&def[0]=zzz&def[1]=xxx%0ayyy\" [API Gateway\u306eInvoke URL]\n```\n\n\u4ee5\u4e0b\u306e Response\u304c\u8fd4\u3063\u3066\u304d\u305f\u3089\u6210\u529f\n\n```\n{\"event\":{\"abc\":\"xyz\",\"def[0]\":\"zzz\",\"def[1]\":\"xxx%0ayyy\"}}\n```\n\n\u3082\u3057\u3001\u4ee5\u4e0b\u306e Response\u304c\u8fd4\u3063\u3066\u304d\u305f\u5834\u5408\u306f URL\u304c\u9055\u3046\u3053\u3068\u304c\u591a\u3044\u306e\u3067\u898b\u76f4\u3059\u3053\u3068\n\n```\n{\"message\":\"Missing Authentication Token\"}\n```\n\nContent-Type\u7b49\u304c\u9055\u3046\u5834\u5408\u306f\u4ee5\u4e0b\u306e Response\u304c\u8fd4\u3063\u3066\u304f\u308b\n\n```\n{\"message\": \"Could not parse request body into json: Unrecognized token \\'abc\\': was expecting (\\'true\\', \\'false\\' or \\'null\\')\\n at [Source: [<<some>>; line: 1, column: 5]\"}\n```\n\n\n\n## \u53c2\u8003\n\n* [HOWTO: Mapping Template v3.0 to convert form POST data or GET query to JSON](https://forums.aws.amazon.com/thread.jspa?messageID=673012&tstart=0#673012)\n* [HTML\u30d5\u30a9\u30fc\u30e0\u304b\u3089APIGateway\u3092\u4f7f\u3063\u3066AWS Lambda\u306bPOST\u3059\u308b](http://qiita.com/satetsu888/items/40fc387735192b794da8)\n* [API Gateway\u3078\u306e\u5165\u529b\u5024\u306bLambda\u304b\u3089\u30a2\u30af\u30bb\u30b9\u3059\u308b](http://qiita.com/r7kamura/items/6420538789da95cd2f47)\n", "tags": ["AWS", "APIGateway"]}