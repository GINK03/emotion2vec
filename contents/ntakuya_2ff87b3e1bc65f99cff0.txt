{"context": " More than 1 year has passed since last update.\n\n\u306f\u3058\u3081\u306b\n\u3000\u524d\u56de\u6295\u7a3f\u3057\u305f\u300clet\u3068let*\u306e\u62ec\u5f27\u306e\u6570\u3092\u6e1b\u3089\u3059\u300d\u3068\u3044\u3046\u6295\u7a3f\u306e\u4e2d\u3067\u4e0b\u306e\u3088\u3046\u306a\u95a2\u6570\u304c\u51fa\u3066\u304d\u307e\u3057\u305f\u3002\n\nbefore.lisp\n(defun create-param (list)\n  (labels ((rec (list result)\n             (if (null list)\n                 (nreverse result)\n                 (rec (nthcdr 2 list)\n                          (push (list (first list) (second list)) result)))))\n    (if (evenp (length list))\n        (rec list nil)\n        (error \"wrong number of parameters\"))))\n\n(create-param '(a 1 b 2 c 3))\n;=> ((A 1) (B 2) (C 3))\n\n\n\u3000\u4eca\u56de\u306f\u3053\u306e\u30b3\u30fc\u30c9\u3092\u984c\u6750\u306b\u5c11\u3057\u62bd\u8c61\u5ea6\u3092\u4e0a\u3052\u305f\u5b9f\u88c5\u3092\u3057\u3066\u307f\u305f\u3044\u3068\u601d\u3044\u307e\u3059\u3002\n\n\u5c11\u3057\u62bd\u8c61\u5ea6\u3092\u4e0a\u3052\u308b\n\u3000create-param\u95a2\u6570\u306e\u3001\u51e6\u7406\u306e\u5185\u5bb9\u306f\u30ea\u30b9\u30c8\u306e\u7b2c0\u8981\u7d20\u3068\u7b2c1\u8981\u7d20\u306b\u5bfe\u3057\u3066\u3001list\u95a2\u6570\u3092\u9069\u7528\u3057\u3001\u305d\u306e\u7d50\u679c\u3092result\u3068\u3044\u3046\u30ea\u30b9\u30c8\u306b\u8ffd\u52a0\u3057\u3066\u3044\u3063\u3066\u307e\u3059\u3002\u3064\u307e\u308a\u30ea\u30b9\u30c8\u306e\u7b2c0\u8981\u7d20\u3068\u7b2c1\u8981\u7d20\u306b\u5bfe\u3057\u3066\u3001\u95a2\u6570\u3092\u9069\u7528\u3059\u308b\u3068\u3044\u3046\u3053\u3068\u304c\u30e1\u30a4\u30f3\u306e\u51e6\u7406\u3067\u3059\u3002\n\u3000\u6a19\u6e96\u95a2\u6570\u3092\u4f7f\u3046\u3068\u3001\u30ea\u30b9\u30c8\u306e\u8981\u7d20\u30922\u3064\u305a\u3064\u4f7f\u7528\u3059\u308bmapcar\u95a2\u6570\u3068\u8868\u73fe\u3067\u304d\u308b\u3068\u601d\u3044\u307e\u3059\u3002\n\n\u5b9f\u88c5\n\u3000\u5148\u7a0b\u306emap\u95a2\u6570\u306e\u540d\u524d\u306fmappair\u3068\u3057\u307e\u3059\u3002\n\u3000\u30b3\u30fc\u30c9\u306e\u5185\u5bb9\u306fcreate-param\u95a2\u6570\u306e\u5185\u5bb9\u3068\u307b\u307c\u540c\u3058\u3067\u3059\u3002\n\nmappair.lisp\n(defun mappair (fn list)\n  (labels ((rec (fn list acc)\n             (if (null list)\n                 (nreverse acc)\n                 (rec fn\n                      (nthcdr 2 list)\n                      (push (funcall fn (first list) (second list)) acc)))))\n    (if (evenp (length list))\n        (rec fn list nil)\n        (error \"wrong number of parameters.\"))))\n\n\n\u3000\u6b21\u306bcreate-param\u306e\u4e2d\u3092mappair\u3067\u7f6e\u304d\u63db\u3048\u307e\u3059\u3002\n\nafter.lisp\n(defun create-param (list)\n  (mappair #'list list))\n\n(create-param '(a 1 b 2 c 3))\n;=> ((A 1) (B 2) (C 3))\n\n\n\u3000\u3053\u306emappair\u3092\u4f7f\u3046\u3068\u30ea\u30b9\u30c8\u304b\u3089\u9023\u60f3\u30ea\u30b9\u30c8\u3078\u306e\u5909\u63db\u95a2\u6570\u3082\u7c21\u5358\u306b\u66f8\u3051\u307e\u3059\u3002\n\nmake_alist.lisp\n(defun list->alist (list)\n  (mappair #'cons list))\n\n(list->alist '(a 1 b 2 c 3))\n;=> ((A . 1) (B . 2) (C . 3))\n\n\n\n\u3082\u3046\u5c11\u3057\u62bd\u8c61\u5ea6\u3092\u4e0a\u3052\u308b\n\u3000\u3053\u3053\u307e\u3067\u6765\u308b\u3068\u30ea\u30b9\u30c8\u306e\u4efb\u610f\u306e\u6570\u306b\u95a2\u6570\u3092\u9069\u7528\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u308bmap\u95a2\u6570\u304c\u6b32\u3057\u304f\u306a\u308a\u307e\u3059\u3002\n\u3000\u3068\u3044\u3046\u3053\u3068\u3067\u5b9f\u88c5\u3057\u3066\u307f\u307e\u3057\u305f\u3002\u540d\u524d\u306fmapn\u3068\u3057\u307e\u3059\u3002\n\nmapn.lisp\n(defun mapn (n fn list)\n  (labels ((rec (n fn list acc)\n             (if (null list)\n                 (nreverse acc)\n                 (let ((input nil))\n                   (dotimes (i n)\n                     (push (pop list) input))\n                   (rec n fn list\n                        (push (apply fn (nreverse input)) acc))))))\n    (rec n fn (copy-list list) nil)))\n\n(mapn 2 #'list '(1 2 3 4 5 6))\n;=> ((1 2) (3 4) (5 6))\n(mapn 2 #'cons '(a 1 b 2 c 3))\n;=> ((A . 1) (B . 2) (C . 3))\n(mapn 3 #'append '((1 2) (3 4) (5 6) (7 8) (9 10) (11 12)))\n;=> ((1 2 3 4 5 6) (7 8 9 10 11 12))\n\n\n\n\u304a\u308f\u308a\u306b\n\u3000\u5c11\u3057\u62bd\u8c61\u5316\u3059\u308b\u3068\u69d8\u3005\u306a\u5834\u9762\u3067\u4f7f\u3048\u308b\u6c4e\u7528\u95a2\u6570\u3092\u5b9a\u7fa9\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\u3000\u307e\u305f\u7c21\u5358\u306a\u62bd\u8c61\u5316\u3092\u884c\u3046\u3053\u3068\u3067\u57fa\u790e\u4f53\u529b\u3092\u3064\u3051\u308b\u3053\u3068\u3082\u5927\u4e8b\u3060\u3068\u601d\u3044\u307e\u3059\u3002\n\u3000\u4ed6\u306e\u4eba\u304c\u66f8\u3044\u305f\u9ad8\u5ea6\u306b\u62bd\u8c61\u5316\u3055\u308c\u305f\u30b3\u30fc\u30c9\u3092\u8aad\u307f\u89e3\u304f\u305f\u3081\u306b\u3082\u3001\u62bd\u8c61\u7684\u306b\u8003\u3048\u308b\u601d\u8003\u529b\u3092\u990a\u3063\u3066\u3044\u304d\u305f\u3044\u3068\u601d\u3044\u307e\u3059\u3002\n# \u306f\u3058\u3081\u306b\n\n\u3000\u524d\u56de\u6295\u7a3f\u3057\u305f\u300clet\u3068let*\u306e\u62ec\u5f27\u306e\u6570\u3092\u6e1b\u3089\u3059\u300d\u3068\u3044\u3046\u6295\u7a3f\u306e\u4e2d\u3067\u4e0b\u306e\u3088\u3046\u306a\u95a2\u6570\u304c\u51fa\u3066\u304d\u307e\u3057\u305f\u3002\n\n```cl:before.lisp\n(defun create-param (list)\n  (labels ((rec (list result)\n             (if (null list)\n                 (nreverse result)\n                 (rec (nthcdr 2 list)\n                          (push (list (first list) (second list)) result)))))\n    (if (evenp (length list))\n        (rec list nil)\n        (error \"wrong number of parameters\"))))\n\n(create-param '(a 1 b 2 c 3))\n;=> ((A 1) (B 2) (C 3))\n```\n\n\u3000\u4eca\u56de\u306f\u3053\u306e\u30b3\u30fc\u30c9\u3092\u984c\u6750\u306b\u5c11\u3057\u62bd\u8c61\u5ea6\u3092\u4e0a\u3052\u305f\u5b9f\u88c5\u3092\u3057\u3066\u307f\u305f\u3044\u3068\u601d\u3044\u307e\u3059\u3002\n\n# \u5c11\u3057\u62bd\u8c61\u5ea6\u3092\u4e0a\u3052\u308b\n\n\u3000create-param\u95a2\u6570\u306e\u3001\u51e6\u7406\u306e\u5185\u5bb9\u306f\u30ea\u30b9\u30c8\u306e\u7b2c0\u8981\u7d20\u3068\u7b2c1\u8981\u7d20\u306b\u5bfe\u3057\u3066\u3001list\u95a2\u6570\u3092\u9069\u7528\u3057\u3001\u305d\u306e\u7d50\u679c\u3092result\u3068\u3044\u3046\u30ea\u30b9\u30c8\u306b\u8ffd\u52a0\u3057\u3066\u3044\u3063\u3066\u307e\u3059\u3002\u3064\u307e\u308a\u30ea\u30b9\u30c8\u306e\u7b2c0\u8981\u7d20\u3068\u7b2c1\u8981\u7d20\u306b\u5bfe\u3057\u3066\u3001\u95a2\u6570\u3092\u9069\u7528\u3059\u308b\u3068\u3044\u3046\u3053\u3068\u304c\u30e1\u30a4\u30f3\u306e\u51e6\u7406\u3067\u3059\u3002\n\u3000\u6a19\u6e96\u95a2\u6570\u3092\u4f7f\u3046\u3068\u3001\u30ea\u30b9\u30c8\u306e\u8981\u7d20\u30922\u3064\u305a\u3064\u4f7f\u7528\u3059\u308bmapcar\u95a2\u6570\u3068\u8868\u73fe\u3067\u304d\u308b\u3068\u601d\u3044\u307e\u3059\u3002\n\n# \u5b9f\u88c5\n\n\u3000\u5148\u7a0b\u306emap\u95a2\u6570\u306e\u540d\u524d\u306fmappair\u3068\u3057\u307e\u3059\u3002\n\u3000\u30b3\u30fc\u30c9\u306e\u5185\u5bb9\u306fcreate-param\u95a2\u6570\u306e\u5185\u5bb9\u3068\u307b\u307c\u540c\u3058\u3067\u3059\u3002\n\n```cl:mappair.lisp\n(defun mappair (fn list)\n  (labels ((rec (fn list acc)\n\t\t\t (if (null list)\n\t\t\t\t (nreverse acc)\n\t\t\t\t (rec fn\n\t\t\t\t\t  (nthcdr 2 list)\n\t\t\t\t\t  (push (funcall fn (first list) (second list)) acc)))))\n\t(if (evenp (length list))\n\t\t(rec fn list nil)\n\t\t(error \"wrong number of parameters.\"))))\n```\n\n\u3000\u6b21\u306bcreate-param\u306e\u4e2d\u3092mappair\u3067\u7f6e\u304d\u63db\u3048\u307e\u3059\u3002\n\n```cl:after.lisp\n(defun create-param (list)\n  (mappair #'list list))\n\n(create-param '(a 1 b 2 c 3))\n;=> ((A 1) (B 2) (C 3))\n```\n\n\u3000\u3053\u306emappair\u3092\u4f7f\u3046\u3068\u30ea\u30b9\u30c8\u304b\u3089\u9023\u60f3\u30ea\u30b9\u30c8\u3078\u306e\u5909\u63db\u95a2\u6570\u3082\u7c21\u5358\u306b\u66f8\u3051\u307e\u3059\u3002\n\n```cl:make_alist.lisp\n(defun list->alist (list)\n  (mappair #'cons list))\n\n(list->alist '(a 1 b 2 c 3))\n;=> ((A . 1) (B . 2) (C . 3))\n```\n\n# \u3082\u3046\u5c11\u3057\u62bd\u8c61\u5ea6\u3092\u4e0a\u3052\u308b\n\n\u3000\u3053\u3053\u307e\u3067\u6765\u308b\u3068\u30ea\u30b9\u30c8\u306e\u4efb\u610f\u306e\u6570\u306b\u95a2\u6570\u3092\u9069\u7528\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u308bmap\u95a2\u6570\u304c\u6b32\u3057\u304f\u306a\u308a\u307e\u3059\u3002\n\u3000\u3068\u3044\u3046\u3053\u3068\u3067\u5b9f\u88c5\u3057\u3066\u307f\u307e\u3057\u305f\u3002\u540d\u524d\u306fmapn\u3068\u3057\u307e\u3059\u3002\n\n```cl:mapn.lisp\n(defun mapn (n fn list)\n  (labels ((rec (n fn list acc)\n\t\t\t (if (null list)\n\t\t\t\t (nreverse acc)\n\t\t\t\t (let ((input nil))\n\t\t\t\t   (dotimes (i n)\n\t\t\t\t\t (push (pop list) input))\n\t\t\t\t   (rec n fn list\n\t\t\t\t\t\t(push (apply fn (nreverse input)) acc))))))\n\t(rec n fn (copy-list list) nil)))\n\n(mapn 2 #'list '(1 2 3 4 5 6))\n;=> ((1 2) (3 4) (5 6))\n(mapn 2 #'cons '(a 1 b 2 c 3))\n;=> ((A . 1) (B . 2) (C . 3))\n(mapn 3 #'append '((1 2) (3 4) (5 6) (7 8) (9 10) (11 12)))\n;=> ((1 2 3 4 5 6) (7 8 9 10 11 12))\n```\n\n# \u304a\u308f\u308a\u306b\n\u3000\u5c11\u3057\u62bd\u8c61\u5316\u3059\u308b\u3068\u69d8\u3005\u306a\u5834\u9762\u3067\u4f7f\u3048\u308b\u6c4e\u7528\u95a2\u6570\u3092\u5b9a\u7fa9\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\u3000\u307e\u305f\u7c21\u5358\u306a\u62bd\u8c61\u5316\u3092\u884c\u3046\u3053\u3068\u3067\u57fa\u790e\u4f53\u529b\u3092\u3064\u3051\u308b\u3053\u3068\u3082\u5927\u4e8b\u3060\u3068\u601d\u3044\u307e\u3059\u3002\n\u3000\u4ed6\u306e\u4eba\u304c\u66f8\u3044\u305f\u9ad8\u5ea6\u306b\u62bd\u8c61\u5316\u3055\u308c\u305f\u30b3\u30fc\u30c9\u3092\u8aad\u307f\u89e3\u304f\u305f\u3081\u306b\u3082\u3001\u62bd\u8c61\u7684\u306b\u8003\u3048\u308b\u601d\u8003\u529b\u3092\u990a\u3063\u3066\u3044\u304d\u305f\u3044\u3068\u601d\u3044\u307e\u3059\u3002\n", "tags": ["common-lisp"]}