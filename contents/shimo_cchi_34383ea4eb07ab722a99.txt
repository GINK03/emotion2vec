{"context": "RECAIUS\u306b\u7e4b\u3052\u3088\u3046\u3068\u3057\u305f\u3089API\u304cSSL\u306e\u305f\u3081\u3001GR-CITRUS\uff0bWA-MIKAN\u3067\u306f\u7c21\u5358\u306b\u306fSSL\u63a5\u7d9a\u3067\u304d\u307e\u305b\u3093\u3067\u3057\u305f\u3002\n\u306a\u305c\u304b\u3068\u3044\u3046\u3068GR-CITRUS\u306b\u7528\u610f\u3055\u308c\u3066\u3044\u308bWiFi\u30af\u30e9\u30b9\u306eWiFi.httpGet\u3068WiFi.httpPost\u304cSSL\u306b\u5bfe\u5fdc\u3057\u3066\u3044\u306a\u3044\u304b\u3089\u3067\u3059\u3002\n\u4ee5\u4e0b\u306f\u4ed6\u306e\u65b9\u6cd5\u3067SSL\u63a5\u7d9a\u3092\u8a66\u307f\u305f\u3068\u304d\u306e\u30e1\u30e2\u3067\u3059\u3002\n\n(\uff11) AT\u30b3\u30de\u30f3\u30c9\u3092\u76f4\u63a5\u305f\u305f\u304f\nWiFi.at\u3092\u4f7f\u3063\u3066ESP8266\u306eAT\u30b3\u30de\u30f3\u30c9\u3092\u76f4\u63a5\u305f\u305f\u304f\u65b9\u6cd5\u3067\u3059\u3002\u305f\u3060\u63a5\u7d9a\u3057\u305f\u3044\u3060\u3051\u306a\u3089\u3053\u306e\u65b9\u6cd5\u3067\u554f\u984c\u3042\u308a\u307e\u305b\u3093\u3002\u3057\u304b\u3057\u3053\u306e\u65b9\u6cd5\u3067\u306f\u623b\u308a\u5024\u304c\u30b3\u30f3\u30bd\u30fc\u30eb\u306b\u51fa\u308b\u3060\u3051\u3067\u5024\u304c\u4fdd\u5b58\u3067\u304d\u307e\u305b\u3093\u3002\u30c7\u30fc\u30bf\u3092\u53d6\u5f97\u3057\u305f\u3044\u5834\u5408\u306f\u3053\u306e\u65b9\u6cd5\u3067\u306f\u4e0d\u5341\u5206\u3067\u3059\u3002\n#GR-CITRUS Version 2.28\n\n#ESP8266\u3092\u4e00\u5ea6\u505c\u6b62\u3055\u305b\u308b(\u30ea\u30bb\u30c3\u30c8\u3068\u540c\u3058)\npinMode(5,1)\ndigitalWrite(5,0)   # LOW:Disable\ndelay 500\ndigitalWrite(5,1)   # LOW:Disable\ndelay 500\n\nUsb = Serial.new(0,115200)\n\nif( System.useWiFi() == 0)then\n    Usb.println \"WiFi Card can't use.\"\n   System.exit() \nend\nUsb.println \"WiFi Ready\"\n\nUsb.println \"WiFi disconnect\"\nUsb.println WiFi.disconnect\n\nUsb.println \"WiFi Mode Setting\"\nUsb.println WiFi.setMode 1  #Station-Mode\n\nUsb.println \"WiFi connecting\"\nUsb.println WiFi.connect(\"SSID\",\"PASSWARD\")\n\nUsb.println \"WiFi ipconfig\"\nUsb.println WiFi.ipconfig\n\nUsb.println \"WiFi multiConnect Set\"\nUsb.println WiFi.multiConnect 1\n\nUsb.println WiFi.at('AT+GMR',1)\n\nUsb.println  WiFi.at('CIFSR',0).to_s\n\n#####\n\nhost = \"try-api.recaius.jp\"\nurl = \"/auth/v2/tokens\"\n\nUsb.println WiFi.at('AT+CIPMUX=0',1).to_s\nUsb.println WiFi.at('AT+CIPSSLSIZE=4096',1).to_s\nUsb.println WiFi.at('AT+CIPSTART=\"SSL\",\"' + host + '\",443',1).to_s\n\n#Body\u90e8\u5206\u4f5c\u6210\nspeechsynthesis_id=\"xxxxxx\"\nspeechsynthesis_password=\"xxxxxx\"\nbody ='{\"speech_synthesis\":{\"service_id\":\"' + speechsynthesis_id + '\",\"password\":\"'   + speechsynthesis_password + '\"}}'\n\n#\u30d8\u30c3\u30c0\u30fc\u90e8\u5206\u4f5c\u6210\ns  = \"POST #{url} HTTP/1.1\"\ns += \"\\r\\n\"\ns += \"User-Agent: GR-CITRUS/2.28\"\ns += \"\\r\\n\"\ns += \"Host: #{host}\"\ns += \"\\r\\n\"\ns += \"Accept: */*\"\ns += \"\\r\\n\"\ns += \"Content-Type: application/json\"\ns += \"\\r\\n\"\ns += \"Content-Length: #{body.length.to_s}\"\ns += \"\\r\\n\"\ns += \"\\r\\n\"\ns += body\ns += \"\\r\\n\"\n\nUsb.println s\n\nUsb.println WiFi.at('AT+CIPSEND='+s.bytesize.to_s,1).to_s\ndelay(100)\nUsb.println WiFi.at(s,1).to_s\n\ndelay(500)\n\nUsb.println \"WiFi CLOSE\"\nUsb.println WiFi.at('AT+CIPCLOSE',1).to_s\n\n\n\n(\uff12) GR-CITRUS\u306emruby\u306e\u30bd\u30fc\u30b9\u3092\u4fee\u6b63\u3059\u308b\u30d1\u30bf\u30fc\u30f3\nSSL\u3067\u63a5\u7d9a\u3057\u53d6\u5f97\u3057\u305f\u30c7\u30fc\u30bf\u3092SD\u30ab\u30fc\u30c9\u306b\u4fdd\u5b58\u3059\u308b\u65b9\u6cd5\u3067\u3059\u3002\u3053\u306e\u65b9\u6cd5\u3067\u306fGR-CITRS\u306e\u30d5\u30a1\u30fc\u30e0\u30a6\u30a7\u30a2\u3092\u518d\u69cb\u7bc9\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002sWiFi.cpp\u306b\u4ee5\u4e0b\u306e\u30d5\u30a1\u30f3\u30af\u30b7\u30e7\u30f3\u3092\u8ffd\u52a0\u3057\u3066\u30b3\u30f3\u30d1\u30a4\u30eb\u3057\u307e\u3057\u305f\u3002\n\uff08\u203b\u3068\u308a\u3042\u3048\u305a\u52d5\u304f\u306e\u7b2c\u4e00\u512a\u5148\u3067\u3001\u52d5\u4f5c\u306f\u78ba\u8a8d\u3057\u307e\u3057\u305f\u304c\u30e1\u30e2\u30ea\u3042\u3075\u308c\u3068\u304b\u5168\u7136\u8003\u3048\u3066\u3044\u307e\u305b\u3093(^^;\uff09\n\uff08\u203b\u30d5\u30a1\u30fc\u30e0\u30a6\u30a7\u30a2\u306e\u30b3\u30f3\u30d1\u30a4\u30eb\u306b\u3064\u3044\u3066\u306f\u3053\u3061\u3089\u3092\u53c2\u8003\u306b\u3057\u3066\u304f\u3060\u3055\u3044\uff09\n\nwrbb-v2lib-firm-master\\firmware\\wrbb_mruby\\sWiFi.cpp\n//**************************************************\n// https POST\u3092SD\u30ab\u30fc\u30c9\u306b\u4fdd\u5b58\u3057\u307e\u3059: WiFi.httpsPostToSD\n//  WiFi.httpsPostToSD( Filename,URL, Headers, data )\n//  Filename: \u4fdd\u5b58\u3059\u308b\u30d5\u30a1\u30a4\u30eb\u540d\n//  URL: URL\n//  Headers: \u30d8\u30c3\u30c0\u306b\u8ffd\u8a18\u3059\u308b\u6587\u5b57\u5217\u306e\u914d\u5217\n//    data: \u9001\u4fe1\u3059\u308b\u30c7\u30fc\u30bf\n//  \u623b\u308a\u5024\u306f\u4ee5\u4e0b\u306e\u3068\u304a\u308a\n//      0: \u5931\u6557\n//      1: \u6210\u529f\n//      2: SD\u30ab\u30fc\u30c9\u304c\u4f7f\u3048\u306a\u3044\n//      ... \u5404\u7a2e\u30a8\u30e9\u30fc\n//**************************************************\nvoid at(char *atcmd)\n{\n    char *s = atcmd;\n    int len = strlen(s);\n\n    for(int i=0; i<254; i++){\n        if( i >= len){ break; }\n        WiFiData[i] = s[i];\n    }\n    WiFiData[len] = 0;\n\n    RbSerial[WIFI_SERIAL]->println((const char*)WiFiData);\n\n    //OK 0d0a \u304b ERROR 0d0a\u304c\u6765\u308b\u307e\u3067 WiFiData[]\u306b\u8aad\u3080\u304b\u3001\u6307\u5b9a\u3055\u308c\u305f\u30b7\u30ea\u30a2\u30eb\u30dd\u30fc\u30c8\u306b\u51fa\u529b\u3057\u307e\u3059\n    getData(WIFI_WAIT_MSEC);\n}\n\nmrb_value mrb_wifi_postSSLtoSD(mrb_state *mrb, mrb_value self)\n{\nmrb_value vFname, vURL, vHeaders, vData;\nconst char *tmpFilename = \"wifitmp.tmp\";\nchar    *strData, *strFname, *strURL;\nchar buf[256]    = {'\\0'};\nchar sData[1024] = {'\\0'};\nFile fp;\nint len   = 0;\nint sla   = 0;\nint koron = 0;\nint sHeader = 0;\nint sBody = 0;\nint cnt   = 0 ;\n\n    //SD\u30ab\u30fc\u30c9\u304c\u5229\u7528\u53ef\u80fd\u304b\u78ba\u304b\u3081\u307e\u3059\n    if (!sdcard_Init(mrb)){\n        return mrb_fixnum_value(2);\n    }\n\n    //\u65e2\u306b\u30d5\u30a1\u30a4\u30eb\u304c\u3042\u308c\u3070\u6d88\u3059\n    if (SD.exists(tmpFilename)){\n        SD.remove(tmpFilename);\n    }\n\n    int n = mrb_get_args(mrb, \"SSAS\", &vFname, &vURL, &vHeaders, &vData);\n\n    strFname = RSTRING_PTR(vFname);\n    strURL = RSTRING_PTR(vURL);\n    strData = RSTRING_PTR(vData);\n    sBody = strlen(strData);\n\n\n    //1\u884c\u76ee\u3092\u751f\u6210\n    {\n        strcpy(sData, \"POST /\");\n\n        //URL\u304b\u3089\u30c9\u30e1\u30a4\u30f3\u3092\u5206\u5272\u3059\u308b\n        len = strlen(strURL);\n        sla = len;\n        koron = 0;\n        for(int i=0; i<len; i++){\n            if(strURL[i] == '/'){\n                sla = i;\n                break;\n            }\n            if(strURL[i] == ':'){\n                koron = i;\n            }\n        }\n\n        if(koron == 0){\n            koron = sla;\n        }\n\n        cnt = 6;\n        for(int i=sla + 1; i<len; i++){\n            sData[cnt] = strURL[i];\n            cnt++;\n        }\n\n        sData[cnt] = 0;\n        strcat(sData, \" HTTP/1.1\\r\\n\");\n    }\n\n    //Host\u30d8\u30c3\u30c0\u3092\u751f\u6210\n    {\n        strcat(sData, \"Host: \");\n\n        cnt = strlen(sData);\n        for(int i=0; i<koron; i++){\n            sData[cnt] = strURL[i];\n            cnt++;\n        }\n        sData[cnt] = 0;\n        strcat(sData, \"\\r\\n\");\n    }\n\n    //Content-Length\u3092\u4ed8\u3051\u307e\u3059\n    {\n        strcat(sData, \"Content-Length: \");\n\n        sprintf((char*)WiFiData,\"%d\", sBody);\n        strcat(sData, (char*)WiFiData);\n        strcat(sData, \"\\r\\n\");\n    }\n\n    //\u30d8\u30c3\u30c0\u60c5\u5831\u3092\u4ed8\u3051\u307e\u3059\n    {\n        int n = RARRAY_LEN( vHeaders );\n        mrb_value hes;\n        for (int i=0; i<n; i++) {\n            hes = mrb_ary_ref(mrb, vHeaders, i);\n\n            //\u30d8\u30c3\u30c0\u306e\u8ffd\u8a18\n            strcat(sData, RSTRING_PTR(hes));\n            strcat(sData, \"\\r\\n\");\n        }\n    }\n\n    //\u6539\u884c\u306e\u307f\u306e\u884c\u3092\u8ffd\u52a0\u3059\u308b\n    strcat(sData, \"\\r\\n\");\n\n    //\u9001\u4fe1\u30c7\u30fc\u30bf\u30b5\u30a4\u30ba\u53d6\u5f97\n    sHeader = strlen(sData);\n    len = sHeader + sBody;\n\n    Serial.print(\"Save Temp hppts Header and Body: \");\n    Serial.println((const char*)WiFiData);\n\n    //****** AT+CIPSTART\u30b3\u30de\u30f3\u30c9 ******\n\n\n    //\u30c7\u30d0\u30c3\u30af\u7528\n    buf[0] = '\\0';\n    strcat(buf, \"AT+CIPMUX=1\\r\\n\");\n    strcat(buf, \"AT+CIPSSLSIZE=4096\\r\\n\");\n    Serial.print(buf);\n    at(\"AT+CIPMUX=1\");\n    at(\"AT+CIPSSLSIZE=4096\");\n\n    //WiFiData[]\u306b\u3001\u30c9\u30e1\u30a4\u30f3\u3068\u30dd\u30fc\u30c8\u756a\u53f7\u3092\u53d6\u5f97\n    for(int i=0; i<sla; i++){\n        WiFiData[i] = strURL[i];\n        if(i == koron){\n            WiFiData[i] = 0;\n        }\n    }\n    WiFiData[sla] = 0;\n    buf[0] = '\\0';\n    strcat(buf, \"AT+CIPSTART=4,\\\"SSL\\\",\\\"\");\n    strcat(buf, (const char*)WiFiData);\n    strcat(buf, \"\\\",\");\n\n    if( koron < sla){\n        strcat(buf, (const char*)&WiFiData[koron + 1]);\n    }\n    else{\n        strcat(buf, \"443\");\n    }\n\n    Serial.println(buf);\n    at(buf);\n\n    //****** AT+CIPSEND \u30b3\u30de\u30f3\u30c9 ******\n\n    buf[0] = '\\0';\n    strcat(buf, \"AT+CIPSEND=4,\");\n    sprintf((char*)WiFiData,\"%d\", len);\n    strcat(buf, (const char*)WiFiData);\n\n    Serial.println(buf);\n    at(buf);\n\n\n    //****** \u9001\u4fe1\u30c7\u30fc\u30bf\u53d7\u4ed8\u30e2\u30fc\u30c9\u306b\u306a\u3063\u305f\u306e\u3067\u3001\u30c7\u30fc\u30bf\u3092\u9001\u4fe1\u3059\u308b ******\n    {\n        //\u30d8\u30c3\u30c0\u3092\u9001\u4fe1\u3059\u308b\n        RbSerial[WIFI_SERIAL]->print((const char*)sData);\n        //Serial.print(sData);\n\n        //\u30dc\u30c7\u30a3\u3092\u9001\u4fe1\u3059\u308b\n        RbSerial[WIFI_SERIAL]->print((const char*)strData);\n        //Serial.print(strData);\n\n        //OK 0d0a \u304b ERROR 0d0a\u304c\u6765\u308b\u307e\u3067 WiFiData[]\u306b\u8aad\u3080\u304b\u3001\u6307\u5b9a\u3055\u308c\u305f\u30b7\u30ea\u30a2\u30eb\u30dd\u30fc\u30c8\u306b\u51fa\u529b\u3057\u307e\u3059\n        getData(WIFI_WAIT_MSEC);\n\n        if( !(WiFiData[strlen((const char*)WiFiData)-2] == 'K' || WiFiData[strlen((const char*)WiFiData)-3] == 'K')){\n            return mrb_fixnum_value( 0 );\n        }\n        Serial.print(\"Send Finish: \");\n        Serial.print((const char*)WiFiData);\n    }\n    //****** \u9001\u4fe1\u7d42\u4e86 ******\n\n    //****** \u53d7\u4fe1\u958b\u59cb ******\n\n    if( !(fp = SD.open(tmpFilename, FILE_WRITE)) ){\n        return mrb_fixnum_value( 6 );\n    }\n\n    unsigned long times;\n    unsigned int wait_msec = WIFI_WAIT_MSEC;\n    unsigned char recv[2];\n    times = millis();\n\n#if BOARD == BOARD_GR\n    int led = digitalRead(PIN_LED0) | ( digitalRead(PIN_LED1)<<1) | (digitalRead(PIN_LED2)<<2)| (digitalRead(PIN_LED3)<<3);\n#else\n    int led = digitalRead(RB_LED);\n#endif\n\n    while(true){\n        //wait_msec \u5f85\u3064\n        if(millis() - times > wait_msec){\n            break;\n        }\n\n        while(len = RbSerial[WIFI_SERIAL]->available())\n        {\n            //LED\u3092\u70b9\u706f\u3059\u308b\n#if BOARD == BOARD_GR\n            digitalWrite(PIN_LED0, HIGH);\n            digitalWrite(PIN_LED1, HIGH);\n            digitalWrite(PIN_LED2, HIGH);\n            digitalWrite(PIN_LED3, HIGH);\n#else\n            digitalWrite(RB_LED, HIGH);\n#endif\n            for(int i=0; i<len; i++){\n                recv[0] = (unsigned char)RbSerial[WIFI_SERIAL]->read();\n                fp.write( (unsigned char*)recv, 1);\n            }\n            times = millis();\n            wait_msec = 1000;   //\u30c7\u30fc\u30bf\u304c\u5c4a\u304d\u59cb\u3081\u305f\u3089\u30011sec\u5f85\u3061\u306b\u5909\u66f4\u3059\u308b\n\n            //LED\u3092\u6d88\u706f\u3059\u308b\n#if BOARD == BOARD_GR\n            digitalWrite(PIN_LED0, LOW);\n            digitalWrite(PIN_LED1, LOW);\n            digitalWrite(PIN_LED2, LOW);\n            digitalWrite(PIN_LED3, LOW);\n#else\n            digitalWrite(RB_LED, LOW);\n#endif\n        }\n    }\n    fp.flush();\n    fp.close();\n\n    //****** \u53d7\u4fe1\u7d42\u4e86 ******\n    Serial.println(\"Recv Finish\");\n\n    //\u53d7\u4fe1\u30c7\u30fc\u30bf\u306b '\\r\\n+\\r\\n+IPD,4,****:'\u3068\u3044\u3046\u30c7\u30fc\u30bf\u304c\u3042\u308b\u306e\u3067\u524a\u9664\u3057\u307e\u3059\n    int ret = CutGarbageData(\"\\r\\n+IPD,4,\", tmpFilename, strFname);\n    if(ret != 1){\n        return mrb_fixnum_value( 7 );\n    }\n\n    //****** AT+CIPCLOSE \u30b3\u30de\u30f3\u30c9 ******\n    at(\"AT+CIPCLOSE=4\");\n    Serial.println((const char*)WiFiData);\n\n#if BOARD == BOARD_GR\n    digitalWrite(PIN_LED0, led & 1);\n    digitalWrite(PIN_LED1, (led >> 1) & 1);\n    digitalWrite(PIN_LED2, (led >> 2) & 1);\n    digitalWrite(PIN_LED3, (led >> 3) & 1);\n#else\n    digitalWrite(RB_LED, led);\n#endif\n\n    return mrb_fixnum_value( 1 );\n}\n\n\n\u6700\u5f8c\u306bhttpsPostToSD\u3092mruby\u7528\u306emofule_function\u306e\u884c\u3092\u8ffd\u52a0\u3057\u3066\u304a\u304f\u3002\n    mrb_define_module_function(mrb, wifiModule, \"httpPostSD\", mrb_wifi_postSD, MRB_ARGS_REQ(3));\n    mrb_define_module_function(mrb, wifiModule, \"httpsPostToSD\", mrb_wifi_postSSLtoSD, MRB_ARGS_REQ(4)); //\u2190\u8ffd\u52a0\n\n\u4f7f\u3044\u65b9\n#!mruby\n#GR-CITRUS Version 2.28\n\n#ESP8266\u3092\u4e00\u5ea6\u505c\u6b62\u3055\u305b\u308b(\u30ea\u30bb\u30c3\u30c8\u3068\u540c\u3058)\npinMode(5,1)\ndigitalWrite(5,0)   # LOW:Disable\ndelay 500\ndigitalWrite(5,1)   # LOW:Disable\ndelay 500\n\nUsb = Serial.new(0,115200)\n\nif( System.useWiFi() == 0)then\n    Usb.println \"WiFi Card can't use.\"\n   System.exit() \nend\nUsb.println \"WiFi Ready\"\n\nUsb.println \"WiFi Get Version\"\nUsb.println WiFi.version\n\nUsb.println \"WiFi disconnect\"\nUsb.println WiFi.disconnect\n\nUsb.println \"WiFi Mode Setting\"\nUsb.println WiFi.setMode 1  #Station-Mode\n\nUsb.println \"WiFi ipconfig\"\nUsb.println WiFi.ipconfig\n\nUsb.println \"WiFi connecting\"\nUsb.println WiFi.connect(\"SSID\",\"PASSWARD\")\n\nUsb.println \"WiFi ipconfig\"\nUsb.println WiFi.ipconfig\n\nheds=[\"User-Agent: grcitrus\",\"Content-Type: application/json\",\"Accept: */*\"]\ndata='{\"speech_synthesis\":{\"service_id\":\"xxxxxx\",\"password\":\"xxxxxxx\"}}'\nUsb.println WiFi.httpsPostToSD(\"recaius.htm\",\"try-api.recaius.jp/auth/v2/tokens\", heds,data).to_s\n\nUsb.println \"WiFi disconnect\"\nUsb.println WiFi.disconnect\n\n\u7d50\u679c\n-------- \u30b3\u30f3\u30bd\u30fc\u30eb\u306b\u63a5\u7d9a\u3057\u307e\u3057\u305f --------\n\nSave Temp hppts Header and Body: 79\nAT+CIPMUX=1\nAT+CIPSSLSIZE=4096\nAT+CIPSTART=4,\"SSL\",\"try-api.recaius.jp\",443\npre httpsServer Connect: \nAT+CIPSEND=4,227\nSend Finish: > \nRecv 227 bytes\n\nSEND OK\nRecv Finish\n4,CLOSED\n\nOK\n\n1\nWiFi disconnect\n\nOK\n\n\n-------- \u30b3\u30f3\u30bd\u30fc\u30eb\u304b\u3089\u5207\u65ad\u3055\u308c\u307e\u3057\u305f --------\n\nRECAIUS.HTM\u304c\u4ee5\u4e0b\u3067\u4fdd\u5b58\u3055\u308c\u308b\u3002\nHTTP/1.1 201 Created\nDate: Mon, 23 Jan 2017 03:34:23 GMT\nContent-Type: application/json\nContent-Length: 65\nConnection: keep-alive\nServer: \nX-Frame-Options: DENY\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Methods: GET, POST, PUT, OPTIONS, DELETE\nAccess-Control-Allow-Headers: content-type, X-TOKEN\n\n{\"expiry_sec\":600,\"token\":\"xxxxxxxxxx\"}\n\n\n(\uff13) Serial\u7d4c\u7531\u3067\u76f4\u63a5AT\u30b3\u30de\u30f3\u30c9\u3092\u305f\u305f\u304f\n(1)\u3068\u307b\u3068\u3093\u3069\u540c\u3058\u3067\u3059\u304c\u3001\u3053\u308c\u306a\u3089\u30c7\u30fc\u30bf\u3082\u53d7\u3051\u53d6\u308c\u307e\u3059\u3002\n\u305f\u3060\u3057\u3001\u30ec\u30b9\u30dd\u30f3\u30b9\u306e\u30bf\u30a4\u30df\u30f3\u30b0\u306e\u8abf\u6574\u3092\u3069\u3046\u3057\u3088\u3046\u304b\u3068\u60a9\u307f\u4e2d\n#!mruby\n#GR-CITRUS Version 2.28\n\nclass MIKAN\n    def initialize(params)\n        @bps          = params[:bps] || 115200\n        @txrxnum      = params[:txrxnum] || 3\n        @esp          = Serial.new(@txrxnum.to_i,@bps.to_i)\n        delay(1000)\n    end\n    def bps\n        @bps\n    end\n    def txrxnum\n        @txrxnum\n    end    \n    def cmd(command)\n        resultstr=\"\"\n        @esp.println command\n        delay(100)\n        while(@esp.available() > 0) do\n            resultstr += @esp.read()\n            delay(100)\n        end\n        resultstr\n    end\n    def read\n        resultstr=\"\"\n        while(@esp.available() > 0) do\n            resultstr += @esp.read()\n            delay(100)\n        end\n        resultstr\n    end    \nend \n\n#ESP8266\u3092\u4e00\u5ea6\u505c\u6b62\u3055\u305b\u308b(\u30ea\u30bb\u30c3\u30c8\u3068\u540c\u3058)\npinMode(5,1)\ndigitalWrite(5,0)   # LOW:Disable\ndelay 500\ndigitalWrite(5,1)   # LOW:Disable\ndelay 500\n\nUsb = Serial.new(0,115200)\nmikan = MIKAN.new(txrxnum:3,bps:115200)\n\nUsb.println \"GR-CITRUS & WA-MIKAN\"\n\nUsb.println (mikan.cmd \"AT\")\n\n#Usb.println (mikan.cmd \"AT+RST\")\nUsb.println (mikan.cmd \"AT+CIFSR\")\nUsb.println (mikan.cmd \"AT+GMR\")\nUsb.println (mikan.cmd \"AT+CWMODE=1\")\nUsb.println (mikan.cmd 'AT+CWJAP=\"SSID\",\"PASSWARD\"')\ndelay(10000)\n\nhost = \"try-api.recaius.jp\"\nurl = \"/auth/v2/tokens\"\n\nUsb.println (mikan.cmd \"AT+CIPSSLSIZE=4096\")\nUsb.println (mikan.cmd 'AT+CIPSTART=\"SSL\",\"' + host + '\",443')\n\nbody='{\"speech_synthesis\":{\"service_id\":\"xxxxx\",\"password\":\"xxxxxx\"}}'\n\n#\u30d8\u30c3\u30c0\u30fc\u90e8\u5206\u4f5c\u6210\ns  = \"POST #{url} HTTP/1.1\"\ns += \"\\r\\n\"\ns += \"User-Agent: GR-CITRUS/2.28\"\ns += \"\\r\\n\"\ns += \"Host: #{host}\"\ns += \"\\r\\n\"\ns += \"Accept: */*\"\ns += \"\\r\\n\"\ns += \"Content-Type: application/json\"\ns += \"\\r\\n\"\ns += \"Content-Length: #{body.length.to_s}\"\ns += \"\\r\\n\"\ns += \"\\r\\n\"\ns += body\ns += \"\\r\\n\"\n\nUsb.println s \n\nUsb.println (mikan.cmd \"AT+CIPSEND=#{s.length}\")\ndelay(500)\nUsb.println (mikan.cmd s)\n\n[RECAIUS](https://developer.recaius.io/jp/top.html)\u306b\u7e4b\u3052\u3088\u3046\u3068\u3057\u305f\u3089API\u304cSSL\u306e\u305f\u3081\u3001GR-CITRUS\uff0bWA-MIKAN\u3067\u306f\u7c21\u5358\u306b\u306fSSL\u63a5\u7d9a\u3067\u304d\u307e\u305b\u3093\u3067\u3057\u305f\u3002\n\n\u306a\u305c\u304b\u3068\u3044\u3046\u3068GR-CITRUS\u306b\u7528\u610f\u3055\u308c\u3066\u3044\u308bWiFi\u30af\u30e9\u30b9\u306eWiFi.httpGet\u3068WiFi.httpPost\u304cSSL\u306b\u5bfe\u5fdc\u3057\u3066\u3044\u306a\u3044\u304b\u3089\u3067\u3059\u3002\n\n\u4ee5\u4e0b\u306f\u4ed6\u306e\u65b9\u6cd5\u3067SSL\u63a5\u7d9a\u3092\u8a66\u307f\u305f\u3068\u304d\u306e\u30e1\u30e2\u3067\u3059\u3002\n\n# (\uff11) AT\u30b3\u30de\u30f3\u30c9\u3092\u76f4\u63a5\u305f\u305f\u304f\nWiFi.at\u3092\u4f7f\u3063\u3066[ESP8266\u306eAT\u30b3\u30de\u30f3\u30c9](https://espressif.com/sites/default/files/documentation/4a-esp8266_at_instruction_set_en.pdf)\u3092\u76f4\u63a5\u305f\u305f\u304f\u65b9\u6cd5\u3067\u3059\u3002\u305f\u3060\u63a5\u7d9a\u3057\u305f\u3044\u3060\u3051\u306a\u3089\u3053\u306e\u65b9\u6cd5\u3067\u554f\u984c\u3042\u308a\u307e\u305b\u3093\u3002\u3057\u304b\u3057\u3053\u306e\u65b9\u6cd5\u3067\u306f\u623b\u308a\u5024\u304c\u30b3\u30f3\u30bd\u30fc\u30eb\u306b\u51fa\u308b\u3060\u3051\u3067\u5024\u304c\u4fdd\u5b58\u3067\u304d\u307e\u305b\u3093\u3002\u30c7\u30fc\u30bf\u3092\u53d6\u5f97\u3057\u305f\u3044\u5834\u5408\u306f\u3053\u306e\u65b9\u6cd5\u3067\u306f\u4e0d\u5341\u5206\u3067\u3059\u3002\n\n```rb\n#GR-CITRUS Version 2.28\n\n#ESP8266\u3092\u4e00\u5ea6\u505c\u6b62\u3055\u305b\u308b(\u30ea\u30bb\u30c3\u30c8\u3068\u540c\u3058)\npinMode(5,1)\ndigitalWrite(5,0)   # LOW:Disable\ndelay 500\ndigitalWrite(5,1)   # LOW:Disable\ndelay 500\n\nUsb = Serial.new(0,115200)\n\nif( System.useWiFi() == 0)then\n    Usb.println \"WiFi Card can't use.\"\n   System.exit() \nend\nUsb.println \"WiFi Ready\"\n\nUsb.println \"WiFi disconnect\"\nUsb.println WiFi.disconnect\n\nUsb.println \"WiFi Mode Setting\"\nUsb.println WiFi.setMode 1  #Station-Mode\n\nUsb.println \"WiFi connecting\"\nUsb.println WiFi.connect(\"SSID\",\"PASSWARD\")\n\nUsb.println \"WiFi ipconfig\"\nUsb.println WiFi.ipconfig\n\nUsb.println \"WiFi multiConnect Set\"\nUsb.println WiFi.multiConnect 1\n\nUsb.println WiFi.at('AT+GMR',1)\n\nUsb.println  WiFi.at('CIFSR',0).to_s\n\n#####\n\nhost = \"try-api.recaius.jp\"\nurl = \"/auth/v2/tokens\"\n\nUsb.println WiFi.at('AT+CIPMUX=0',1).to_s\nUsb.println WiFi.at('AT+CIPSSLSIZE=4096',1).to_s\nUsb.println WiFi.at('AT+CIPSTART=\"SSL\",\"' + host + '\",443',1).to_s\n\n#Body\u90e8\u5206\u4f5c\u6210\nspeechsynthesis_id=\"xxxxxx\"\nspeechsynthesis_password=\"xxxxxx\"\nbody ='{\"speech_synthesis\":{\"service_id\":\"' + speechsynthesis_id + '\",\"password\":\"'   + speechsynthesis_password + '\"}}'\n\n#\u30d8\u30c3\u30c0\u30fc\u90e8\u5206\u4f5c\u6210\ns  = \"POST #{url} HTTP/1.1\"\ns += \"\\r\\n\"\ns += \"User-Agent: GR-CITRUS/2.28\"\ns += \"\\r\\n\"\ns += \"Host: #{host}\"\ns += \"\\r\\n\"\ns += \"Accept: */*\"\ns += \"\\r\\n\"\ns += \"Content-Type: application/json\"\ns += \"\\r\\n\"\ns += \"Content-Length: #{body.length.to_s}\"\ns += \"\\r\\n\"\ns += \"\\r\\n\"\ns += body\ns += \"\\r\\n\"\n\nUsb.println s\n\nUsb.println WiFi.at('AT+CIPSEND='+s.bytesize.to_s,1).to_s\ndelay(100)\nUsb.println WiFi.at(s,1).to_s\n\ndelay(500)\n\nUsb.println \"WiFi CLOSE\"\nUsb.println WiFi.at('AT+CIPCLOSE',1).to_s\n\n```\n\n# (\uff12) GR-CITRUS\u306emruby\u306e\u30bd\u30fc\u30b9\u3092\u4fee\u6b63\u3059\u308b\u30d1\u30bf\u30fc\u30f3\n\nSSL\u3067\u63a5\u7d9a\u3057\u53d6\u5f97\u3057\u305f\u30c7\u30fc\u30bf\u3092SD\u30ab\u30fc\u30c9\u306b\u4fdd\u5b58\u3059\u308b\u65b9\u6cd5\u3067\u3059\u3002\u3053\u306e\u65b9\u6cd5\u3067\u306fGR-CITRS\u306e\u30d5\u30a1\u30fc\u30e0\u30a6\u30a7\u30a2\u3092\u518d\u69cb\u7bc9\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002sWiFi.cpp\u306b\u4ee5\u4e0b\u306e\u30d5\u30a1\u30f3\u30af\u30b7\u30e7\u30f3\u3092\u8ffd\u52a0\u3057\u3066\u30b3\u30f3\u30d1\u30a4\u30eb\u3057\u307e\u3057\u305f\u3002\n\n\uff08\u203b\u3068\u308a\u3042\u3048\u305a\u52d5\u304f\u306e\u7b2c\u4e00\u512a\u5148\u3067\u3001\u52d5\u4f5c\u306f\u78ba\u8a8d\u3057\u307e\u3057\u305f\u304c\u30e1\u30e2\u30ea\u3042\u3075\u308c\u3068\u304b\u5168\u7136\u8003\u3048\u3066\u3044\u307e\u305b\u3093(^^;\uff09\n\uff08\u203b\u30d5\u30a1\u30fc\u30e0\u30a6\u30a7\u30a2\u306e\u30b3\u30f3\u30d1\u30a4\u30eb\u306b\u3064\u3044\u3066\u306f[\u3053\u3061\u3089](http://qiita.com/shimo_cchi/items/645d814995c1902a2563)\u3092\u53c2\u8003\u306b\u3057\u3066\u304f\u3060\u3055\u3044\uff09\n\n```cpp:wrbb-v2lib-firm-master\\firmware\\wrbb_mruby\\sWiFi.cpp\n//**************************************************\n// https POST\u3092SD\u30ab\u30fc\u30c9\u306b\u4fdd\u5b58\u3057\u307e\u3059: WiFi.httpsPostToSD\n//  WiFi.httpsPostToSD( Filename,URL, Headers, data )\n//\tFilename: \u4fdd\u5b58\u3059\u308b\u30d5\u30a1\u30a4\u30eb\u540d\n//\tURL: URL\n//\tHeaders: \u30d8\u30c3\u30c0\u306b\u8ffd\u8a18\u3059\u308b\u6587\u5b57\u5217\u306e\u914d\u5217\n//    data: \u9001\u4fe1\u3059\u308b\u30c7\u30fc\u30bf\n//  \u623b\u308a\u5024\u306f\u4ee5\u4e0b\u306e\u3068\u304a\u308a\n//\t\t0: \u5931\u6557\n//\t\t1: \u6210\u529f\n//\t\t2: SD\u30ab\u30fc\u30c9\u304c\u4f7f\u3048\u306a\u3044\n//\t\t... \u5404\u7a2e\u30a8\u30e9\u30fc\n//**************************************************\nvoid at(char *atcmd)\n{\n\tchar *s = atcmd;\n\tint len = strlen(s);\n\n\tfor(int i=0; i<254; i++){\n\t\tif( i >= len){ break; }\n\t\tWiFiData[i] = s[i];\n\t}\n\tWiFiData[len] = 0;\n\n\tRbSerial[WIFI_SERIAL]->println((const char*)WiFiData);\n\n\t//OK 0d0a \u304b ERROR 0d0a\u304c\u6765\u308b\u307e\u3067 WiFiData[]\u306b\u8aad\u3080\u304b\u3001\u6307\u5b9a\u3055\u308c\u305f\u30b7\u30ea\u30a2\u30eb\u30dd\u30fc\u30c8\u306b\u51fa\u529b\u3057\u307e\u3059\n\tgetData(WIFI_WAIT_MSEC);\n}\n\nmrb_value mrb_wifi_postSSLtoSD(mrb_state *mrb, mrb_value self)\n{\nmrb_value vFname, vURL, vHeaders, vData;\nconst char *tmpFilename = \"wifitmp.tmp\";\nchar\t*strData, *strFname, *strURL;\nchar buf[256]    = {'\\0'};\nchar sData[1024] = {'\\0'};\nFile fp;\nint len   = 0;\nint sla   = 0;\nint koron = 0;\nint sHeader = 0;\nint sBody = 0;\nint cnt   = 0 ;\n\n\t//SD\u30ab\u30fc\u30c9\u304c\u5229\u7528\u53ef\u80fd\u304b\u78ba\u304b\u3081\u307e\u3059\n\tif (!sdcard_Init(mrb)){\n\t\treturn mrb_fixnum_value(2);\n\t}\n\n\t//\u65e2\u306b\u30d5\u30a1\u30a4\u30eb\u304c\u3042\u308c\u3070\u6d88\u3059\n\tif (SD.exists(tmpFilename)){\n\t\tSD.remove(tmpFilename);\n\t}\n\n\tint n = mrb_get_args(mrb, \"SSAS\", &vFname, &vURL, &vHeaders, &vData);\n\n\tstrFname = RSTRING_PTR(vFname);\n\tstrURL = RSTRING_PTR(vURL);\n\tstrData = RSTRING_PTR(vData);\n\tsBody = strlen(strData);\n\n\n\t//1\u884c\u76ee\u3092\u751f\u6210\n\t{\n\t\tstrcpy(sData, \"POST /\");\n\n\t\t//URL\u304b\u3089\u30c9\u30e1\u30a4\u30f3\u3092\u5206\u5272\u3059\u308b\n\t\tlen = strlen(strURL);\n\t\tsla = len;\n\t\tkoron = 0;\n\t\tfor(int i=0; i<len; i++){\n\t\t\tif(strURL[i] == '/'){\n\t\t\t\tsla = i;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif(strURL[i] == ':'){\n\t\t\t\tkoron = i;\n\t\t\t}\n\t\t}\n\n\t\tif(koron == 0){\n\t\t\tkoron = sla;\n\t\t}\n\n\t\tcnt = 6;\n\t\tfor(int i=sla + 1; i<len; i++){\n\t\t\tsData[cnt] = strURL[i];\n\t\t\tcnt++;\n\t\t}\n\n\t\tsData[cnt] = 0;\n\t\tstrcat(sData, \" HTTP/1.1\\r\\n\");\n\t}\n\n\t//Host\u30d8\u30c3\u30c0\u3092\u751f\u6210\n\t{\n\t\tstrcat(sData, \"Host: \");\n\t\n\t\tcnt = strlen(sData);\n\t\tfor(int i=0; i<koron; i++){\n\t\t\tsData[cnt] = strURL[i];\n\t\t\tcnt++;\n\t\t}\n\t\tsData[cnt] = 0;\n\t\tstrcat(sData, \"\\r\\n\");\n\t}\n\n\t//Content-Length\u3092\u4ed8\u3051\u307e\u3059\n\t{\n\t\tstrcat(sData, \"Content-Length: \");\n\n\t\tsprintf((char*)WiFiData,\"%d\", sBody);\n\t\tstrcat(sData, (char*)WiFiData);\n\t\tstrcat(sData, \"\\r\\n\");\n\t}\n\n\t//\u30d8\u30c3\u30c0\u60c5\u5831\u3092\u4ed8\u3051\u307e\u3059\n\t{\n\t\tint n = RARRAY_LEN( vHeaders );\n\t\tmrb_value hes;\n\t\tfor (int i=0; i<n; i++) {\n\t\t\thes = mrb_ary_ref(mrb, vHeaders, i);\n\t\t\t\n\t\t\t//\u30d8\u30c3\u30c0\u306e\u8ffd\u8a18\n\t\t\tstrcat(sData, RSTRING_PTR(hes));\n\t\t\tstrcat(sData, \"\\r\\n\");\n\t\t}\n\t}\n\n\t//\u6539\u884c\u306e\u307f\u306e\u884c\u3092\u8ffd\u52a0\u3059\u308b\n\tstrcat(sData, \"\\r\\n\");\n\n\t//\u9001\u4fe1\u30c7\u30fc\u30bf\u30b5\u30a4\u30ba\u53d6\u5f97\n\tsHeader = strlen(sData);\n\tlen = sHeader + sBody;\n\n\tSerial.print(\"Save Temp hppts Header and Body: \");\n\tSerial.println((const char*)WiFiData);\n\n\t//****** AT+CIPSTART\u30b3\u30de\u30f3\u30c9 ******\n\n\n\t//\u30c7\u30d0\u30c3\u30af\u7528\n\tbuf[0] = '\\0';\n\tstrcat(buf, \"AT+CIPMUX=1\\r\\n\");\n\tstrcat(buf, \"AT+CIPSSLSIZE=4096\\r\\n\");\n\tSerial.print(buf);\n\tat(\"AT+CIPMUX=1\");\n\tat(\"AT+CIPSSLSIZE=4096\");\n\n\t//WiFiData[]\u306b\u3001\u30c9\u30e1\u30a4\u30f3\u3068\u30dd\u30fc\u30c8\u756a\u53f7\u3092\u53d6\u5f97\n\tfor(int i=0; i<sla; i++){\n\t\tWiFiData[i] = strURL[i];\n\t\tif(i == koron){\n\t\t\tWiFiData[i] = 0;\n\t\t}\n\t}\n\tWiFiData[sla] = 0;\n\tbuf[0] = '\\0';\n\tstrcat(buf, \"AT+CIPSTART=4,\\\"SSL\\\",\\\"\");\n\tstrcat(buf, (const char*)WiFiData);\n\tstrcat(buf, \"\\\",\");\n\n\tif( koron < sla){\n\t\tstrcat(buf, (const char*)&WiFiData[koron + 1]);\n\t}\n\telse{\n\t\tstrcat(buf, \"443\");\n\t}\n\n\tSerial.println(buf);\n\tat(buf);\n\n\t//****** AT+CIPSEND \u30b3\u30de\u30f3\u30c9 ******\n\n\tbuf[0] = '\\0';\n\tstrcat(buf, \"AT+CIPSEND=4,\");\n\tsprintf((char*)WiFiData,\"%d\", len);\n\tstrcat(buf, (const char*)WiFiData);\n\n\tSerial.println(buf);\n\tat(buf);\n\n\n\t//****** \u9001\u4fe1\u30c7\u30fc\u30bf\u53d7\u4ed8\u30e2\u30fc\u30c9\u306b\u306a\u3063\u305f\u306e\u3067\u3001\u30c7\u30fc\u30bf\u3092\u9001\u4fe1\u3059\u308b ******\n\t{\n\t\t//\u30d8\u30c3\u30c0\u3092\u9001\u4fe1\u3059\u308b\n\t\tRbSerial[WIFI_SERIAL]->print((const char*)sData);\n\t\t//Serial.print(sData);\n\n\t\t//\u30dc\u30c7\u30a3\u3092\u9001\u4fe1\u3059\u308b\n\t\tRbSerial[WIFI_SERIAL]->print((const char*)strData);\n\t\t//Serial.print(strData);\n\n\t\t//OK 0d0a \u304b ERROR 0d0a\u304c\u6765\u308b\u307e\u3067 WiFiData[]\u306b\u8aad\u3080\u304b\u3001\u6307\u5b9a\u3055\u308c\u305f\u30b7\u30ea\u30a2\u30eb\u30dd\u30fc\u30c8\u306b\u51fa\u529b\u3057\u307e\u3059\n\t\tgetData(WIFI_WAIT_MSEC);\n\n\t\tif( !(WiFiData[strlen((const char*)WiFiData)-2] == 'K' || WiFiData[strlen((const char*)WiFiData)-3] == 'K')){\n\t\t\treturn mrb_fixnum_value( 0 );\n\t\t}\n\t\tSerial.print(\"Send Finish: \");\n\t\tSerial.print((const char*)WiFiData);\n\t}\n\t//****** \u9001\u4fe1\u7d42\u4e86 ******\n\n\t//****** \u53d7\u4fe1\u958b\u59cb ******\n\n\tif( !(fp = SD.open(tmpFilename, FILE_WRITE)) ){\n\t\treturn mrb_fixnum_value( 6 );\n\t}\n\n\tunsigned long times;\n\tunsigned int wait_msec = WIFI_WAIT_MSEC;\n\tunsigned char recv[2];\n\ttimes = millis();\n\n#if BOARD == BOARD_GR\n\tint led = digitalRead(PIN_LED0) | ( digitalRead(PIN_LED1)<<1) | (digitalRead(PIN_LED2)<<2)| (digitalRead(PIN_LED3)<<3);\n#else\n\tint led = digitalRead(RB_LED);\n#endif\n\n\twhile(true){\n\t\t//wait_msec \u5f85\u3064\n\t\tif(millis() - times > wait_msec){\n\t\t\tbreak;\n\t\t}\n\n\t\twhile(len = RbSerial[WIFI_SERIAL]->available())\n\t\t{\n\t\t\t//LED\u3092\u70b9\u706f\u3059\u308b\n#if BOARD == BOARD_GR\n\t\t\tdigitalWrite(PIN_LED0, HIGH);\n\t\t\tdigitalWrite(PIN_LED1, HIGH);\n\t\t\tdigitalWrite(PIN_LED2, HIGH);\n\t\t\tdigitalWrite(PIN_LED3, HIGH);\n#else\n\t\t\tdigitalWrite(RB_LED, HIGH);\n#endif\n\t\t\tfor(int i=0; i<len; i++){\n\t\t\t\trecv[0] = (unsigned char)RbSerial[WIFI_SERIAL]->read();\n\t\t\t\tfp.write( (unsigned char*)recv, 1);\n\t\t\t}\n\t\t\ttimes = millis();\n\t\t\twait_msec = 1000;\t//\u30c7\u30fc\u30bf\u304c\u5c4a\u304d\u59cb\u3081\u305f\u3089\u30011sec\u5f85\u3061\u306b\u5909\u66f4\u3059\u308b\n\n\t\t\t//LED\u3092\u6d88\u706f\u3059\u308b\n#if BOARD == BOARD_GR\n\t\t\tdigitalWrite(PIN_LED0, LOW);\n\t\t\tdigitalWrite(PIN_LED1, LOW);\n\t\t\tdigitalWrite(PIN_LED2, LOW);\n\t\t\tdigitalWrite(PIN_LED3, LOW);\n#else\n\t\t\tdigitalWrite(RB_LED, LOW);\n#endif\n\t\t}\n\t}\n\tfp.flush();\n\tfp.close();\n\n\t//****** \u53d7\u4fe1\u7d42\u4e86 ******\n\tSerial.println(\"Recv Finish\");\n\n\t//\u53d7\u4fe1\u30c7\u30fc\u30bf\u306b '\\r\\n+\\r\\n+IPD,4,****:'\u3068\u3044\u3046\u30c7\u30fc\u30bf\u304c\u3042\u308b\u306e\u3067\u524a\u9664\u3057\u307e\u3059\n\tint ret = CutGarbageData(\"\\r\\n+IPD,4,\", tmpFilename, strFname);\n\tif(ret != 1){\n\t\treturn mrb_fixnum_value( 7 );\n\t}\n\n\t//****** AT+CIPCLOSE \u30b3\u30de\u30f3\u30c9 ******\n\tat(\"AT+CIPCLOSE=4\");\n\tSerial.println((const char*)WiFiData);\n\n#if BOARD == BOARD_GR\n\tdigitalWrite(PIN_LED0, led & 1);\n\tdigitalWrite(PIN_LED1, (led >> 1) & 1);\n\tdigitalWrite(PIN_LED2, (led >> 2) & 1);\n\tdigitalWrite(PIN_LED3, (led >> 3) & 1);\n#else\n\tdigitalWrite(RB_LED, led);\n#endif\n\n\treturn mrb_fixnum_value( 1 );\n}\n```\n\n\u6700\u5f8c\u306bhttpsPostToSD\u3092mruby\u7528\u306emofule_function\u306e\u884c\u3092\u8ffd\u52a0\u3057\u3066\u304a\u304f\u3002\n\n```cpp\n\tmrb_define_module_function(mrb, wifiModule, \"httpPostSD\", mrb_wifi_postSD, MRB_ARGS_REQ(3));\n    mrb_define_module_function(mrb, wifiModule, \"httpsPostToSD\", mrb_wifi_postSSLtoSD, MRB_ARGS_REQ(4)); //\u2190\u8ffd\u52a0\n```\n\n\u4f7f\u3044\u65b9\n\n```rb\n#!mruby\n#GR-CITRUS Version 2.28\n\n#ESP8266\u3092\u4e00\u5ea6\u505c\u6b62\u3055\u305b\u308b(\u30ea\u30bb\u30c3\u30c8\u3068\u540c\u3058)\npinMode(5,1)\ndigitalWrite(5,0)   # LOW:Disable\ndelay 500\ndigitalWrite(5,1)   # LOW:Disable\ndelay 500\n\nUsb = Serial.new(0,115200)\n\nif( System.useWiFi() == 0)then\n    Usb.println \"WiFi Card can't use.\"\n   System.exit() \nend\nUsb.println \"WiFi Ready\"\n\nUsb.println \"WiFi Get Version\"\nUsb.println WiFi.version\n\nUsb.println \"WiFi disconnect\"\nUsb.println WiFi.disconnect\n\nUsb.println \"WiFi Mode Setting\"\nUsb.println WiFi.setMode 1  #Station-Mode\n\nUsb.println \"WiFi ipconfig\"\nUsb.println WiFi.ipconfig\n\nUsb.println \"WiFi connecting\"\nUsb.println WiFi.connect(\"SSID\",\"PASSWARD\")\n\nUsb.println \"WiFi ipconfig\"\nUsb.println WiFi.ipconfig\n\nheds=[\"User-Agent: grcitrus\",\"Content-Type: application/json\",\"Accept: */*\"]\ndata='{\"speech_synthesis\":{\"service_id\":\"xxxxxx\",\"password\":\"xxxxxxx\"}}'\nUsb.println WiFi.httpsPostToSD(\"recaius.htm\",\"try-api.recaius.jp/auth/v2/tokens\", heds,data).to_s\n\nUsb.println \"WiFi disconnect\"\nUsb.println WiFi.disconnect\n```\n\n\u7d50\u679c\n\n```\n-------- \u30b3\u30f3\u30bd\u30fc\u30eb\u306b\u63a5\u7d9a\u3057\u307e\u3057\u305f --------\n\nSave Temp hppts Header and Body: 79\nAT+CIPMUX=1\nAT+CIPSSLSIZE=4096\nAT+CIPSTART=4,\"SSL\",\"try-api.recaius.jp\",443\npre httpsServer Connect: \nAT+CIPSEND=4,227\nSend Finish: > \nRecv 227 bytes\n\nSEND OK\nRecv Finish\n4,CLOSED\n\nOK\n\n1\nWiFi disconnect\n\nOK\n\n\n-------- \u30b3\u30f3\u30bd\u30fc\u30eb\u304b\u3089\u5207\u65ad\u3055\u308c\u307e\u3057\u305f --------\n```\n\nRECAIUS.HTM\u304c\u4ee5\u4e0b\u3067\u4fdd\u5b58\u3055\u308c\u308b\u3002\n\n```\nHTTP/1.1 201 Created\nDate: Mon, 23 Jan 2017 03:34:23 GMT\nContent-Type: application/json\nContent-Length: 65\nConnection: keep-alive\nServer: \nX-Frame-Options: DENY\nAccess-Control-Allow-Origin: *\nAccess-Control-Allow-Methods: GET, POST, PUT, OPTIONS, DELETE\nAccess-Control-Allow-Headers: content-type, X-TOKEN\n\n{\"expiry_sec\":600,\"token\":\"xxxxxxxxxx\"}\n```\n\n# (\uff13) Serial\u7d4c\u7531\u3067\u76f4\u63a5AT\u30b3\u30de\u30f3\u30c9\u3092\u305f\u305f\u304f\n\n(1)\u3068\u307b\u3068\u3093\u3069\u540c\u3058\u3067\u3059\u304c\u3001\u3053\u308c\u306a\u3089\u30c7\u30fc\u30bf\u3082\u53d7\u3051\u53d6\u308c\u307e\u3059\u3002\n\u305f\u3060\u3057\u3001\u30ec\u30b9\u30dd\u30f3\u30b9\u306e\u30bf\u30a4\u30df\u30f3\u30b0\u306e\u8abf\u6574\u3092\u3069\u3046\u3057\u3088\u3046\u304b\u3068\u60a9\u307f\u4e2d\n\n```rb\n#!mruby\n#GR-CITRUS Version 2.28\n\nclass MIKAN\n    def initialize(params)\n        @bps          = params[:bps] || 115200\n        @txrxnum      = params[:txrxnum] || 3\n        @esp          = Serial.new(@txrxnum.to_i,@bps.to_i)\n        delay(1000)\n    end\n    def bps\n        @bps\n    end\n    def txrxnum\n        @txrxnum\n    end    \n    def cmd(command)\n        resultstr=\"\"\n        @esp.println command\n        delay(100)\n        while(@esp.available() > 0) do\n            resultstr += @esp.read()\n            delay(100)\n        end\n        resultstr\n    end\n    def read\n        resultstr=\"\"\n        while(@esp.available() > 0) do\n            resultstr += @esp.read()\n            delay(100)\n        end\n        resultstr\n    end    \nend \n\n#ESP8266\u3092\u4e00\u5ea6\u505c\u6b62\u3055\u305b\u308b(\u30ea\u30bb\u30c3\u30c8\u3068\u540c\u3058)\npinMode(5,1)\ndigitalWrite(5,0)   # LOW:Disable\ndelay 500\ndigitalWrite(5,1)   # LOW:Disable\ndelay 500\n\nUsb = Serial.new(0,115200)\nmikan = MIKAN.new(txrxnum:3,bps:115200)\n\nUsb.println \"GR-CITRUS & WA-MIKAN\"\n\nUsb.println (mikan.cmd \"AT\")\n\n#Usb.println (mikan.cmd \"AT+RST\")\nUsb.println (mikan.cmd \"AT+CIFSR\")\nUsb.println (mikan.cmd \"AT+GMR\")\nUsb.println (mikan.cmd \"AT+CWMODE=1\")\nUsb.println (mikan.cmd 'AT+CWJAP=\"SSID\",\"PASSWARD\"')\ndelay(10000)\n\nhost = \"try-api.recaius.jp\"\nurl = \"/auth/v2/tokens\"\n\nUsb.println (mikan.cmd \"AT+CIPSSLSIZE=4096\")\nUsb.println (mikan.cmd 'AT+CIPSTART=\"SSL\",\"' + host + '\",443')\n\nbody='{\"speech_synthesis\":{\"service_id\":\"xxxxx\",\"password\":\"xxxxxx\"}}'\n\n#\u30d8\u30c3\u30c0\u30fc\u90e8\u5206\u4f5c\u6210\ns  = \"POST #{url} HTTP/1.1\"\ns += \"\\r\\n\"\ns += \"User-Agent: GR-CITRUS/2.28\"\ns += \"\\r\\n\"\ns += \"Host: #{host}\"\ns += \"\\r\\n\"\ns += \"Accept: */*\"\ns += \"\\r\\n\"\ns += \"Content-Type: application/json\"\ns += \"\\r\\n\"\ns += \"Content-Length: #{body.length.to_s}\"\ns += \"\\r\\n\"\ns += \"\\r\\n\"\ns += body\ns += \"\\r\\n\"\n\nUsb.println s \n\nUsb.println (mikan.cmd \"AT+CIPSEND=#{s.length}\")\ndelay(500)\nUsb.println (mikan.cmd s)\n```\n", "tags": ["GR-CITRUS", "WA-MIKAN", "mruby"]}