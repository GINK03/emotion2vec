{"context": "\u3053\u306e\u8a18\u4e8b\u306f Origami Advent Calendar 11\u65e5\u76ee\u306e\u8a18\u4e8b\u306b\u306a\u308a\u307e\u3059\u3002\n\u6700\u8fd1\u5b66\u7fd2\u3057\u3066\u3044\u308b\u30c7\u30b8\u30bf\u30eb\u7f72\u540d\u306b\u3064\u3044\u3066\u3001\u308f\u304b\u3089\u306a\u3044\u4eba\u3067\u3082\u308f\u304b\u308b\u57fa\u790e\u7684\u306a\u3068\u3053\u308d\u304b\u3089\u3001\u7c21\u5358\u306a\u30b5\u30f3\u30d7\u30eb\u30d7\u30ed\u30b0\u30e9\u30e0\u306e\u5b9f\u88c5\u307e\u3067\u307e\u3068\u3081\u3066\u307f\u307e\u3057\u305f\u3002\u6700\u5f8c\u306e\u30b5\u30f3\u30d7\u30eb\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u7d44\u3080\u3068\u3053\u308d\u307e\u3067\u5b9f\u65bd\u3059\u308c\u3070\u3001\u30c7\u30b8\u30bf\u30eb\u7f72\u540d\u306e\u30e1\u30ea\u30c3\u30c8\u3084\u4ed5\u7d44\u307f\u306a\u3069\u306e\u57fa\u672c\u7684\u306a\u90e8\u5206\u306f\u7406\u89e3\u3067\u304d\u308b\u304b\u3068\u601d\u3044\u307e\u3059\u3002\u30d7\u30ed\u30b0\u30e9\u30e0\u306fGo\u3067\u66f8\u3044\u3066\u307e\u3059\u3002\n\n\u30c7\u30b8\u30bf\u30eb\u7f72\u540d\u306b\u3064\u3044\u3066\n\u30c7\u30b8\u30bf\u30eb\u7f72\u540d\u306f\u516c\u958b\u9375\u6697\u53f7\u65b9\u5f0f\u306e\u4e00\u7a2e\u3067\u3001\u4e00\u822c\u7684\u306b\u306f3\u3064\u306e\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u304b\u3089\u6210\u308b\u3002\n\n\u9375\u751f\u6210\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0G\n\u7f72\u540d\u8005\u306e\"\u9375\u30da\u30a2\"\uff08PK, SK\uff09\u3092\u751f\u6210\u3059\u308b\u3002PK\u306f\u516c\u958b\u3059\u308b\u691c\u8a3c\u9375\uff08\u516c\u958b\u9375\uff09\u3001\u305d\u3057\u3066SK\u306f\u79d8\u5bc6\u306b\u3059\u308b\u7f72\u540d\u9375\uff08\u79d8\u5bc6\u9375\uff09\u3067\u3042\u308b\u3002\n\u7f72\u540d\u751f\u6210\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0S\n\u30e1\u30c3\u30bb\u30fc\u30b8m\u3068\u7f72\u540d\u9375SK\u3092\u5165\u529b\u3068\u3057\u3001\u7f72\u540d\u03c3\u3092\u751f\u6210\u3059\u308b\u3002\n\u7f72\u540d\u691c\u8a3c\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0V\n\u30e1\u30c3\u30bb\u30fc\u30b8m\u3001\u691c\u8a3c\u9375PK\u3001\u7f72\u540d\u03c3\u3092\u5165\u529b\u3068\u3057\u3001\u627f\u8a8d\u307e\u305f\u306f\u62d2\u5426\u3092\u51fa\u529b\u3059\u308b\u3002\n\n\u4eca\u56de\u3001\u9375\u751f\u6210 -> \u7f72\u540d\u751f\u6210 -> \u7f72\u540d\u691c\u8a3c\u3068\u3044\u3046\u4e00\u9023\u306e\u6d41\u308c\u3092\u3001\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u3067\u5b9f\u88c5\u3057\u307e\u3057\u305f\u3002\u89e3\u8aac\u306f\u30b3\u30fc\u30c9\u5185\u306e\u30b3\u30e1\u30f3\u30c8\u306b\u66f8\u3044\u3066\u307e\u3059\u3002\u3053\u308c\u3089\u306e\u4ed5\u7d44\u307f\u3067\u4f55\u304c\u3067\u304d\u308b\u304b\u3068\u3044\u3046\u3068\u3001\u300c\u9001\u4fe1\u8005\u304c\u6b63\u3057\u3044\u300d\u300c\u4f1d\u9001\u306e\u904e\u7a0b\u306b\u304a\u3044\u3066\u30c7\u30fc\u30bf\u304c\u6539\u3056\u3093\u3055\u308c\u3066\u3044\u306a\u3044\u300d\u3068\u3044\u3046\u4fe1\u983c\u6027\u3092\u62c5\u4fdd\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\u53c2\u8003\nWikipedia \u30c7\u30b8\u30bf\u30eb\u7f72\u540d\nWikipedia \u516c\u958b\u9375\u6697\u53f7\n\n1. \u9375\u751f\u6210\uff08RSA\u6697\u53f7\u5316\u57fa\u6e96\u306e\u79d8\u5bc6\u9375\u3068\u516c\u958b\u9375\u306e\u767a\u884c\uff09\nopenssl\u30b3\u30de\u30f3\u30c9\u3092\u4f7f\u7528\u3057\u3066\u9375\u3092\u767a\u884c\u3067\u304d\u308b\u3002\u30c7\u30d5\u30a9\u30eb\u30c8\u3067PEM\u5f62\u5f0f\u306e\u30d5\u30a1\u30a4\u30eb\u304c\u4f5c\u3089\u308c\u307e\u3059\u3002\n\nRSA\u6697\u53f7\u5316\u57fa\u6e96\u306e\u79d8\u5bc6\u9375\u306e\u767a\u884c\n$ openssl genrsa 2048 > private.key\n\u30c7\u30d5\u30a9\u30eb\u30c8\u3060\u30681024bit\u3001\u4e0a\u8a18\u306e\u4f8b\u306f2048bit\u3067\u4f5c\u6210\n\n\u516c\u958b\u9375\u306e\u767a\u884c\n$ openssl rsa -pubout < private.key > public.key\n\u516c\u958b\u9375\u306f\u79d8\u5bc6\u9375\u3092\u5143\u306b\u4f5c\u3089\u308c\u307e\u3059\u3002\n\u79d8\u5bc6\u9375\u3068\u516c\u958b\u9375\u306f\u9001\u4fe1\u8005\u304c\u4f5c\u6210\u3057\u3001\u9001\u4fe1\u8005\u306f\u53d7\u4fe1\u8005\u306b\u516c\u958b\u9375\u3092\u6e21\u3057\u307e\u3059\u3002\n\n2. \u7f72\u540d\u751f\u6210\n\u9001\u4fe1\u8005\u306f\u3001\u30e1\u30c3\u30bb\u30fc\u30b8\uff08\u9001\u4fe1\u30c7\u30fc\u30bf\uff09\u3068\u79d8\u5bc6\u9375\u3092\u5165\u529b\u3068\u3057\u3001\u7f72\u540d\u3092\u751f\u6210\u3057\u307e\u3059\u3002\n\n\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\n\u5b9f\u884c\u624b\u9806\n$ go run main.go\n\nmain.go\npackage main\n\nimport (\n    \"bufio\"\n    \"crypto\"\n    \"crypto/rand\"\n    \"crypto/rsa\"\n    \"crypto/x509\"\n    \"encoding/base64\"\n    \"fmt\"\n    \"log\"\n    \"os\"\n)\n\nfunc main() {\n    // \u79d8\u5bc6\u9375\u306e\u8aad\u8fbc\u307f\u3001\u3053\u3053\u306b\u306f\u4e0a\u8a18\u3067\u767a\u884c\u3057\u305f\u79d8\u5bc6\u9375\u306e\u30d5\u30a1\u30a4\u30eb\u30d1\u30b9\u3092\u6307\u5b9a\u3059\u308b\n    privateKeyStr, err := readPrivateKey(\"private.key\")\n    if err != nil {\n        log.Fatal(err)\n    }\n\n    // \u4f8b\u3048\u3070\u9001\u4fe1\u30c7\u30fc\u30bf\uff08\u7f72\u540d\u5bfe\u8c61\u306e\u30e1\u30c3\u30bb\u30fc\u30b8\uff09\u3092\u300cHello World\u300d\u3068\u3057\u3066\u307f\u308b\n    message := \"Hello World\"\n\n    // \u9001\u4fe1\u30c7\u30fc\u30bf\uff08\u30e1\u30c3\u30bb\u30fc\u30b8\uff09\u3068\u79d8\u5bc6\u9375\u3092\u5165\u529b\u3068\u3057\u3001\u7f72\u540d\u3092\u751f\u6210\u3059\u308b\n    signature, err := createSignature(message, privateKeyStr)\n    if err != nil {\n        log.Fatal(err)\n    }\n    fmt.Println(\"signature: \", signature)\n}\n\nfunc readPrivateKey(filepath string) (string, error) {\n    s := \"\"\n    fp, err := os.Open(filepath)\n    if err != nil {\n        return \"\", err\n    }\n    defer fp.Close()\n    scanner := bufio.NewScanner(fp)\n    for scanner.Scan() {\n        text := scanner.Text()\n        if text == \"-----BEGIN RSA PRIVATE KEY-----\" || text == \"-----END RSA PRIVATE KEY-----\" {\n            continue\n        }\n        s = s + scanner.Text()\n    }\n    if err := scanner.Err(); err != nil {\n        return \"\", err\n    }\n\n    return s, nil\n}\n\nfunc createSignature(message, keystr string) (string, error) {\n    // PEM\u306e\u4e2d\u8eab\u306fDER\u3068\u540c\u3058ASN.1\u306e\u30d0\u30a4\u30ca\u30ea\u30c7\u30fc\u30bf\u3092Base64\u306b\u3088\u3063\u3066\u30a8\u30f3\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0\u3055\u308c\u305f\u30c6\u30ad\u30b9\u30c8\u306a\u306e\u3067Base64\u3067\u30c7\u30b3\u30fc\u30c9\u3059\u308b\n    // \u3086\u3048\u306bDER\u30a8\u30f3\u30b3\u30fc\u30c9\u5f62\u5f0f\u306b\u5909\u63db\n    keyBytes, err := base64.StdEncoding.DecodeString(keystr)\n    if err != nil {\n        return \"\", err\n    }\n\n    // ASN.1 PKCS\uff031 DER\u30a8\u30f3\u30b3\u30fc\u30c9\u5f62\u5f0f\u304b\u3089RSA\u79d8\u5bc6\u9375\u3092\u8fd4\u3059\n    private, err := x509.ParsePKCS1PrivateKey(keyBytes)\n    if err != nil {\n        return \"\", err\n    }\n\n    // SHA-256\u306e\u30cf\u30c3\u30b7\u30e5\u95a2\u6570\u3092\u4f7f\u3063\u3066\u9001\u4fe1\u30c7\u30fc\u30bf\u306e\u30cf\u30c3\u30b7\u30e5\u5024\u3092\u7b97\u51fa\u3059\u308b\n    h := crypto.Hash.New(crypto.SHA256)\n    h.Write(([]byte)(message))\n    hashed := h.Sum(nil)\n\n    // \u30cf\u30c3\u30b7\u30e5\u5024\u3092RSA\u79d8\u5bc6\u9375\u3092\u4f7f\u3063\u3066\u6697\u53f7\u5316\u3059\u308b\n    signedData, err := rsa.SignPKCS1v15(rand.Reader, private, crypto.SHA256, hashed)\n    if err != nil {\n        return \"\", err\n    }\n\n    // \u6697\u53f7\u5316\u3057\u305f\u30d0\u30a4\u30c8\u5217\u306e\u30c7\u30fc\u30bf\u3092Base64\u3067\u30a8\u30f3\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0\u3057\u3001\u7f72\u540d\u6587\u5b57\u5217\u3092\u751f\u6210\n    signature := base64.StdEncoding.EncodeToString(signedData)\n    return signature, nil\n}\n\n\n\n3. \u7f72\u540d\u691c\u8a3c\n\u53d7\u4fe1\u8005\u306f\u3001\u30e1\u30c3\u30bb\u30fc\u30b8\uff08\u53d7\u4fe1\u30c7\u30fc\u30bf\uff09\u3001\u9001\u4fe1\u8005\u304b\u3089\u3082\u3089\u3063\u305f\u516c\u958b\u9375\u3001\u7f72\u540d\u3092\u5165\u529b\u3068\u3057\u3001\u691c\u8a3c\u7d50\u679c\u306e\u627f\u8a8d\u307e\u305f\u306f\u62d2\u5426\u3092\u51fa\u529b\u3057\u307e\u3059\u3002\u627f\u8a8d\u306e\u5834\u5408\u3001\u300c\u9001\u4fe1\u8005\u304c\u6b63\u3057\u3044\u300d\u300c\u9001\u4fe1\u30c7\u30fc\u30bf\u304c\u6539\u3056\u3093\u3055\u308c\u3066\u3044\u306a\u3044\u300d\u3068\u3044\u3046\u3053\u3068\u306b\u306a\u308a\u307e\u3059\u3002\n\n\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\n\u5b9f\u884c\u65b9\u6cd5\n$ go run main.go\n\nmain.go\npackage main\n\nimport (\n    \"bufio\"\n    \"crypto\"\n    \"crypto/rsa\"\n    \"crypto/x509\"\n    \"encoding/base64\"\n    \"fmt\"\n    \"log\"\n    \"os\"\n)\n\nfunc main() {\n    // \u516c\u958b\u9375\u306e\u8aad\u8fbc\u307f\u3001\u3053\u3053\u306b\u306f\u4e0a\u8a18\u3067\u767a\u884c\u3057\u305f\u516c\u958b\u9375\u306e\u30d5\u30a1\u30a4\u30eb\u30d1\u30b9\u3092\u6307\u5b9a\u3059\u308b\n    publicKeyStr, err := readPublicKey(\"public.key\")\n    if err != nil {\n        log.Fatal(err)\n    }\n\n    // \u7f72\u540d\u6587\u5b57\u5217\n    signature := \"\u4f5c\u6210\u3055\u308c\u305f\u7f72\u540d\u6587\u5b57\u5217\u3092\u3053\u3053\u306b\u5165\u529b\u3059\u308b\"\n\n    // \u53d7\u4fe1\u30c7\u30fc\u30bf\n    message := \"Hello World\"\n\n    // \u53d7\u4fe1\u30c7\u30fc\u30bf\uff08\u30e1\u30c3\u30bb\u30fc\u30b8\uff09\u3001\u516c\u958b\u9375\u3001\u7f72\u540d\u3092\u5165\u529b\u3068\u3057\u3001\u691c\u8a3c\u7d50\u679c\u306e\u627f\u8a8d\u307e\u305f\u306f\u62d2\u5426\u3092\u51fa\u529b\u3059\u308b\n    if err := verifySignature(message, publicKeyStr, signature); err != nil {\n        fmt.Println(\"err: \", err)\n        fmt.Println(\"\u62d2\u5426\")\n    } else {\n        fmt.Println(\"\u627f\u8a8d\")\n    }\n}\n\nfunc readPublicKey(filepath string) (string, error) {\n    s := \"\"\n    fp, err := os.Open(filepath)\n    if err != nil {\n        return \"\", err\n    }\n    defer fp.Close()\n    scanner := bufio.NewScanner(fp)\n    for scanner.Scan() {\n        text := scanner.Text()\n        if text == \"-----BEGIN PUBLIC KEY-----\" || text == \"-----END PUBLIC KEY-----\" {\n            continue\n        }\n        s = s + text\n    }\n    if err := scanner.Err(); err != nil {\n        return \"\", err\n    }\n    return s, nil\n}\n\nfunc verifySignature(message string, keystr string, signature string) error {\n    // PEM\u306e\u4e2d\u8eab\u306fDER\u3068\u540c\u3058ASN.1\u306e\u30d0\u30a4\u30ca\u30ea\u30c7\u30fc\u30bf\u3092Base64\u306b\u3088\u3063\u3066\u30a8\u30f3\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0\u3055\u308c\u305f\u30c6\u30ad\u30b9\u30c8\u306a\u306e\u3067Base64\u3067\u30c7\u30b3\u30fc\u30c9\u3059\u308b\n    // \u3086\u3048\u306bDER\u30a8\u30f3\u30b3\u30fc\u30c9\u5f62\u5f0f\u306b\u5909\u63db\n    keyBytes, err := base64.StdEncoding.DecodeString(keystr)\n    if err != nil {\n        return err\n    }\n\n    // DER\u3067\u30a8\u30f3\u30b3\u30fc\u30c9\u3055\u308c\u305f\u516c\u958b\u9375\u3092\u89e3\u6790\u3059\u308b\n    // \u6210\u529f\u3059\u308b\u3068\u3001pub\u306f* rsa.PublicKey\u3001* dsa.PublicKey\u3001\u307e\u305f\u306f* ecdsa.PublicKey\u578b\u306b\u306a\u308b\n    pub, err := x509.ParsePKIXPublicKey(keyBytes)\n    if err != nil {\n        return err\n    }\n\n    // \u7f72\u540d\u6587\u5b57\u5217\u306fBase64\u3067\u30a8\u30f3\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0\u3055\u308c\u305f\u30c6\u30ad\u30b9\u30c8\u306a\u306e\u3067Base64\u3067\u30c7\u30b3\u30fc\u30c9\u3059\u308b\n    signDataByte, err := base64.StdEncoding.DecodeString(signature)\n    if err != nil {\n        return err\n    }\n\n    // SHA-256\u306e\u30cf\u30c3\u30b7\u30e5\u95a2\u6570\u3092\u4f7f\u3063\u3066\u53d7\u4fe1\u30c7\u30fc\u30bf\u306e\u30cf\u30c3\u30b7\u30e5\u5024\u3092\u7b97\u51fa\u3059\u308b\n    h := crypto.Hash.New(crypto.SHA256)\n    h.Write([]byte(message))\n    hashed := h.Sum(nil)\n\n    // \u7f72\u540d\u306e\u691c\u8a3c\u3001\u6709\u52b9\u306a\u7f72\u540d\u306fnil\u3092\u8fd4\u3059\u3053\u3068\u306b\u3088\u3063\u3066\u793a\u3055\u308c\u308b\n    // \u3053\u3053\u3067\u4f55\u3092\u3057\u3066\u3044\u308b\u304b\u3068\u3044\u3046\u3068\u3001\u3001\n    // \u2460\u9001\u4fe1\u8005\u306e\u30c7\u30fc\u30bf\uff08\u7f72\u540d\u30c7\u30fc\u30bf\uff09\u3092\u516c\u958b\u9375\u3067\u5fa9\u53f7\u3057\u30cf\u30c3\u30b7\u30e5\u5024\u3092\u7b97\u51fa\n    // \u2461\u53d7\u4fe1\u5074\u3067\u7b97\u51fa\u3057\u305f\u30cf\u30c3\u30b7\u30e5\u5024\u3068\u3001\u2460\u306e\u30cf\u30c3\u30b7\u30e5\u5024\u3092\u6bd4\u8f03\u3057\u3001\u4e00\u81f4\u3059\u308c\u3070\u3001\u300c\u9001\u4fe1\u8005\u304c\u6b63\u3057\u3044\u300d\u300c\u30c7\u30fc\u30bf\u304c\u6539\u3056\u3093\u3055\u308c\u3066\u3044\u306a\u3044\u300d\u3068\u3044\u3046\u3053\u3068\u3092\u78ba\u8a8d\u3067\u304d\u308b\n    err = rsa.VerifyPKCS1v15(pub.(*rsa.PublicKey), crypto.SHA256, hashed, signDataByte)\n    if err != nil {\n        return err\n    }\n\n    return nil\n}\n\n\n\n\u5c11\u3057\u5fdc\u7528\u3057\u305f\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u3092\u66f8\u3044\u3066\u307f\u308b\n\u53d7\u4fe1\u5074\u3092\u5b9f\u884c\u3057localhost\u306b\u30b5\u30fc\u30d0\u30fc\u3092\u7acb\u3066\u3066\u304b\u3089\u3001\u9001\u4fe1\u5074\u3092\u5b9f\u884c\u3057\u3001\u304a\u4e92\u3044\u306e\u5b9f\u884c\u7d50\u679c\u3092\u78ba\u8a8d\u3057\u3066\u307f\u3066\u304f\u3060\u3055\u3044\u3002\n\n\u30ea\u30af\u30a8\u30b9\u30c8\u53d7\u4fe1\u5074\n\nmain.go\npackage main\n\nimport (\n    \"bufio\"\n    \"crypto\"\n    \"crypto/rsa\"\n    \"crypto/x509\"\n    \"encoding/base64\"\n    \"fmt\"\n    \"io/ioutil\"\n    \"log\"\n    \"net/http\"\n    \"os\"\n\n    \"github.com/unrolled/render\"\n)\n\nfunc main() {\n    http.HandleFunc(\"/foo\", handler)\n    http.ListenAndServe(\"localhost:8080\", nil)\n}\n\nfunc handler(w http.ResponseWriter, r *http.Request) {\n    render := render.New()\n\n    // \u516c\u958b\u9375\u306e\u8aad\u8fbc\u307f\n    publicKeyStr, err := readPublicKey(\"public.key\")\n    if err != nil {\n        log.Fatal(err)\n    }\n\n    // \u7f72\u540d\u6587\u5b57\u5217\u306e\u53d6\u5f97\n    signature := r.Header.Get(\"Signature\")\n\n    // \u7f72\u540d\u5bfe\u8c61\u306e\u53d7\u4fe1\u30c7\u30fc\u30bf\n    body, _ := ioutil.ReadAll(r.Body)\n\n    // \u7f72\u540d\u306e\u691c\u8a3c\n    if err := verifySignature(string(body), publicKeyStr, signature); err != nil {\n        fmt.Println(\"err: \", err)\n        fmt.Println(\"\u62d2\u5426\")\n        render.JSON(w, http.StatusForbidden, nil)\n        return\n    } else {\n        fmt.Println(\"\u627f\u8a8d\")\n    }\n    render.JSON(w, http.StatusOK, nil)\n    return\n}\n\nfunc readPublicKey(filepath string) (string, error) {\n    s := \"\"\n    fp, err := os.Open(filepath)\n    if err != nil {\n        return \"\", err\n    }\n    defer fp.Close()\n    scanner := bufio.NewScanner(fp)\n    for scanner.Scan() {\n        text := scanner.Text()\n        if text == \"-----BEGIN PUBLIC KEY-----\" || text == \"-----END PUBLIC KEY-----\" {\n            continue\n        }\n        s = s + text\n    }\n    if err := scanner.Err(); err != nil {\n        return \"\", err\n    }\n    return s, nil\n}\n\nfunc verifySignature(message string, keystr string, signature string) error {\n    keyBytes, err := base64.StdEncoding.DecodeString(keystr)\n    if err != nil {\n        return err\n    }\n\n    pub, err := x509.ParsePKIXPublicKey(keyBytes)\n    if err != nil {\n        return err\n    }\n\n    signDataByte, err := base64.StdEncoding.DecodeString(signature)\n    if err != nil {\n        return err\n    }\n\n    h := crypto.Hash.New(crypto.SHA256)\n    h.Write([]byte(message))\n    hashed := h.Sum(nil)\n\n    err = rsa.VerifyPKCS1v15(pub.(*rsa.PublicKey), crypto.SHA256, hashed, signDataByte)\n    if err != nil {\n        return err\n    }\n    return nil\n}\n\n\n\n\u30ea\u30af\u30a8\u30b9\u30c8\u9001\u4fe1\u5074\n\nmain.go\npackage main\n\nimport (\n    \"bufio\"\n    \"bytes\"\n    \"crypto\"\n    \"crypto/rand\"\n    \"crypto/rsa\"\n    \"crypto/x509\"\n    \"encoding/base64\"\n    \"fmt\"\n    \"log\"\n    \"net/http\"\n    \"os\"\n    \"strconv\"\n    \"time\"\n)\n\nfunc main() {\n    // \u79d8\u5bc6\u9375\u306e\u8aad\u8fbc\u307f\n    privateKeyStr, err := readPrivateKey(\"private.key\")\n    if err != nil {\n        log.Fatal(err)\n    }\n\n    // \u7f72\u540d\u5bfe\u8c61\u306e\u9001\u4fe1\u30c7\u30fc\u30bf\u3092Json\u5f62\u5f0f\u306b\u3057\u3066\u307f\u308b\u3000\u4f8b\uff09-> {\"message\":\"Hello World\",\"timestamp\":1481610623}\n    message := `{\"message\":\"Hello World\",\"timestamp\":` + strconv.FormatInt(time.Now().Unix(), 10) + `}`\n\n    // \u9001\u4fe1\u30c7\u30fc\u30bf\uff08\u30e1\u30c3\u30bb\u30fc\u30b8\uff09\u3068\u79d8\u5bc6\u9375\u3092\u5165\u529b\u3068\u3057\u3001\u7f72\u540d\u3092\u751f\u6210\u3059\u308b\n    signature, err := createSignature(message, privateKeyStr)\n    if err != nil {\n        log.Fatal(err)\n    }\n\n    // \u30ea\u30af\u30a8\u30b9\u30c8\u3092\u9001\u308b\u969b\u306b\u3001\u7f72\u540d\u306f\u30d8\u30c3\u30c0\u306b\u8a2d\u5b9a\u3059\u308b\n    req, err := http.NewRequest(\"POST\", \"http://localhost:8080/foo\", bytes.NewBuffer(([]byte)(message)))\n    defer req.Body.Close()\n    req.Header.Set(\"Content-Type\", \"application/json\")\n    req.Header.Set(\"Signature\", signature)\n\n    client := http.Client{}\n    res, err := client.Do(req)\n    if err != nil {\n        log.Fatal(err)\n    }\n    fmt.Println(res.StatusCode)\n}\n\nfunc readPrivateKey(filepath string) (string, error) {\n    s := \"\"\n    fp, err := os.Open(filepath)\n    if err != nil {\n        return \"\", err\n    }\n    defer fp.Close()\n    scanner := bufio.NewScanner(fp)\n    for scanner.Scan() {\n        text := scanner.Text()\n        if text == \"-----BEGIN RSA PRIVATE KEY-----\" || text == \"-----END RSA PRIVATE KEY-----\" {\n            continue\n        }\n        s = s + scanner.Text()\n    }\n    if err := scanner.Err(); err != nil {\n        return \"\", err\n    }\n\n    return s, nil\n}\n\nfunc createSignature(message, keystr string) (string, error) {\n    keyBytes, err := base64.StdEncoding.DecodeString(keystr)\n    if err != nil {\n        return \"\", err\n    }\n\n    private, err := x509.ParsePKCS1PrivateKey(keyBytes)\n    if err != nil {\n        return \"\", err\n    }\n\n    h := crypto.Hash.New(crypto.SHA256)\n    h.Write(([]byte)(message))\n    hashed := h.Sum(nil)\n\n    signedData, err := rsa.SignPKCS1v15(rand.Reader, private, crypto.SHA256, hashed)\n    if err != nil {\n        return \"\", err\n    }\n\n    signature := base64.StdEncoding.EncodeToString(signedData)\n    return signature, nil\n}\n\n\n\nWe're hiring!\nOrigami\u3067\u306f\u3044\u308d\u3093\u306a\u30dd\u30b8\u30b7\u30e7\u30f3\u306e\u30a8\u30f3\u30b8\u30cb\u30a2\u3092\u52df\u96c6\u3057\u3066\u307e\u3059\u3002\nhttps://origami.com/jobs\n\u3053\u306e\u8a18\u4e8b\u306f [Origami Advent Calendar](http://qiita.com/advent-calendar/2016/origami) 11\u65e5\u76ee\u306e\u8a18\u4e8b\u306b\u306a\u308a\u307e\u3059\u3002\n\n\u6700\u8fd1\u5b66\u7fd2\u3057\u3066\u3044\u308b\u30c7\u30b8\u30bf\u30eb\u7f72\u540d\u306b\u3064\u3044\u3066\u3001\u308f\u304b\u3089\u306a\u3044\u4eba\u3067\u3082\u308f\u304b\u308b\u57fa\u790e\u7684\u306a\u3068\u3053\u308d\u304b\u3089\u3001\u7c21\u5358\u306a\u30b5\u30f3\u30d7\u30eb\u30d7\u30ed\u30b0\u30e9\u30e0\u306e\u5b9f\u88c5\u307e\u3067\u307e\u3068\u3081\u3066\u307f\u307e\u3057\u305f\u3002\u6700\u5f8c\u306e\u30b5\u30f3\u30d7\u30eb\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u7d44\u3080\u3068\u3053\u308d\u307e\u3067\u5b9f\u65bd\u3059\u308c\u3070\u3001\u30c7\u30b8\u30bf\u30eb\u7f72\u540d\u306e\u30e1\u30ea\u30c3\u30c8\u3084\u4ed5\u7d44\u307f\u306a\u3069\u306e\u57fa\u672c\u7684\u306a\u90e8\u5206\u306f\u7406\u89e3\u3067\u304d\u308b\u304b\u3068\u601d\u3044\u307e\u3059\u3002\u30d7\u30ed\u30b0\u30e9\u30e0\u306fGo\u3067\u66f8\u3044\u3066\u307e\u3059\u3002\n\n# \u30c7\u30b8\u30bf\u30eb\u7f72\u540d\u306b\u3064\u3044\u3066\n\u30c7\u30b8\u30bf\u30eb\u7f72\u540d\u306f\u516c\u958b\u9375\u6697\u53f7\u65b9\u5f0f\u306e\u4e00\u7a2e\u3067\u3001\u4e00\u822c\u7684\u306b\u306f3\u3064\u306e\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u304b\u3089\u6210\u308b\u3002\n\n- **\u9375\u751f\u6210\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0G**\n\u7f72\u540d\u8005\u306e\"\u9375\u30da\u30a2\"\uff08PK, SK\uff09\u3092\u751f\u6210\u3059\u308b\u3002PK\u306f\u516c\u958b\u3059\u308b\u691c\u8a3c\u9375\uff08\u516c\u958b\u9375\uff09\u3001\u305d\u3057\u3066SK\u306f\u79d8\u5bc6\u306b\u3059\u308b\u7f72\u540d\u9375\uff08\u79d8\u5bc6\u9375\uff09\u3067\u3042\u308b\u3002\n\n- **\u7f72\u540d\u751f\u6210\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0S**\n\u30e1\u30c3\u30bb\u30fc\u30b8m\u3068\u7f72\u540d\u9375SK\u3092\u5165\u529b\u3068\u3057\u3001\u7f72\u540d\u03c3\u3092\u751f\u6210\u3059\u308b\u3002\n\n- **\u7f72\u540d\u691c\u8a3c\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0V**\n\u30e1\u30c3\u30bb\u30fc\u30b8m\u3001\u691c\u8a3c\u9375PK\u3001\u7f72\u540d\u03c3\u3092\u5165\u529b\u3068\u3057\u3001\u627f\u8a8d\u307e\u305f\u306f\u62d2\u5426\u3092\u51fa\u529b\u3059\u308b\u3002\n\n\u4eca\u56de\u3001\u9375\u751f\u6210 -> \u7f72\u540d\u751f\u6210 -> \u7f72\u540d\u691c\u8a3c\u3068\u3044\u3046\u4e00\u9023\u306e\u6d41\u308c\u3092\u3001\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u3067\u5b9f\u88c5\u3057\u307e\u3057\u305f\u3002\u89e3\u8aac\u306f\u30b3\u30fc\u30c9\u5185\u306e\u30b3\u30e1\u30f3\u30c8\u306b\u66f8\u3044\u3066\u307e\u3059\u3002\u3053\u308c\u3089\u306e\u4ed5\u7d44\u307f\u3067\u4f55\u304c\u3067\u304d\u308b\u304b\u3068\u3044\u3046\u3068\u3001\u300c\u9001\u4fe1\u8005\u304c\u6b63\u3057\u3044\u300d\u300c\u4f1d\u9001\u306e\u904e\u7a0b\u306b\u304a\u3044\u3066\u30c7\u30fc\u30bf\u304c\u6539\u3056\u3093\u3055\u308c\u3066\u3044\u306a\u3044\u300d\u3068\u3044\u3046\u4fe1\u983c\u6027\u3092\u62c5\u4fdd\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\n\u53c2\u8003\n[Wikipedia \u30c7\u30b8\u30bf\u30eb\u7f72\u540d](https://ja.wikipedia.org/wiki/%E3%83%87%E3%82%B8%E3%82%BF%E3%83%AB%E7%BD%B2%E5%90%8D)\n[Wikipedia \u516c\u958b\u9375\u6697\u53f7](https://ja.wikipedia.org/wiki/%E5%85%AC%E9%96%8B%E9%8D%B5%E6%9A%97%E5%8F%B7)\n\n\n# 1. \u9375\u751f\u6210\uff08RSA\u6697\u53f7\u5316\u57fa\u6e96\u306e\u79d8\u5bc6\u9375\u3068\u516c\u958b\u9375\u306e\u767a\u884c\uff09\nopenssl\u30b3\u30de\u30f3\u30c9\u3092\u4f7f\u7528\u3057\u3066\u9375\u3092\u767a\u884c\u3067\u304d\u308b\u3002\u30c7\u30d5\u30a9\u30eb\u30c8\u3067PEM\u5f62\u5f0f\u306e\u30d5\u30a1\u30a4\u30eb\u304c\u4f5c\u3089\u308c\u307e\u3059\u3002\n\n### RSA\u6697\u53f7\u5316\u57fa\u6e96\u306e\u79d8\u5bc6\u9375\u306e\u767a\u884c\n$ openssl genrsa 2048 > private.key\n\n\u30c7\u30d5\u30a9\u30eb\u30c8\u3060\u30681024bit\u3001\u4e0a\u8a18\u306e\u4f8b\u306f2048bit\u3067\u4f5c\u6210\n\n### \u516c\u958b\u9375\u306e\u767a\u884c\n$ openssl rsa -pubout < private.key > public.key\n\n\u516c\u958b\u9375\u306f\u79d8\u5bc6\u9375\u3092\u5143\u306b\u4f5c\u3089\u308c\u307e\u3059\u3002\n\u79d8\u5bc6\u9375\u3068\u516c\u958b\u9375\u306f\u9001\u4fe1\u8005\u304c\u4f5c\u6210\u3057\u3001\u9001\u4fe1\u8005\u306f\u53d7\u4fe1\u8005\u306b\u516c\u958b\u9375\u3092\u6e21\u3057\u307e\u3059\u3002\n\n# 2. \u7f72\u540d\u751f\u6210\n\u9001\u4fe1\u8005\u306f\u3001\u30e1\u30c3\u30bb\u30fc\u30b8\uff08\u9001\u4fe1\u30c7\u30fc\u30bf\uff09\u3068\u79d8\u5bc6\u9375\u3092\u5165\u529b\u3068\u3057\u3001\u7f72\u540d\u3092\u751f\u6210\u3057\u307e\u3059\u3002\n\n## \u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\n\n\u5b9f\u884c\u624b\u9806\n$ go run main.go\n\n```main.go\npackage main\n\nimport (\n\t\"bufio\"\n\t\"crypto\"\n\t\"crypto/rand\"\n\t\"crypto/rsa\"\n\t\"crypto/x509\"\n\t\"encoding/base64\"\n\t\"fmt\"\n\t\"log\"\n\t\"os\"\n)\n\nfunc main() {\n\t// \u79d8\u5bc6\u9375\u306e\u8aad\u8fbc\u307f\u3001\u3053\u3053\u306b\u306f\u4e0a\u8a18\u3067\u767a\u884c\u3057\u305f\u79d8\u5bc6\u9375\u306e\u30d5\u30a1\u30a4\u30eb\u30d1\u30b9\u3092\u6307\u5b9a\u3059\u308b\n\tprivateKeyStr, err := readPrivateKey(\"private.key\")\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\n\t// \u4f8b\u3048\u3070\u9001\u4fe1\u30c7\u30fc\u30bf\uff08\u7f72\u540d\u5bfe\u8c61\u306e\u30e1\u30c3\u30bb\u30fc\u30b8\uff09\u3092\u300cHello World\u300d\u3068\u3057\u3066\u307f\u308b\n\tmessage := \"Hello World\"\n\n\t// \u9001\u4fe1\u30c7\u30fc\u30bf\uff08\u30e1\u30c3\u30bb\u30fc\u30b8\uff09\u3068\u79d8\u5bc6\u9375\u3092\u5165\u529b\u3068\u3057\u3001\u7f72\u540d\u3092\u751f\u6210\u3059\u308b\n\tsignature, err := createSignature(message, privateKeyStr)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tfmt.Println(\"signature: \", signature)\n}\n\nfunc readPrivateKey(filepath string) (string, error) {\n\ts := \"\"\n\tfp, err := os.Open(filepath)\n\tif err != nil {\n\t\treturn \"\", err\n\t}\n\tdefer fp.Close()\n\tscanner := bufio.NewScanner(fp)\n\tfor scanner.Scan() {\n\t\ttext := scanner.Text()\n\t\tif text == \"-----BEGIN RSA PRIVATE KEY-----\" || text == \"-----END RSA PRIVATE KEY-----\" {\n\t\t\tcontinue\n\t\t}\n\t\ts = s + scanner.Text()\n\t}\n\tif err := scanner.Err(); err != nil {\n\t\treturn \"\", err\n\t}\n\n\treturn s, nil\n}\n\nfunc createSignature(message, keystr string) (string, error) {\n\t// PEM\u306e\u4e2d\u8eab\u306fDER\u3068\u540c\u3058ASN.1\u306e\u30d0\u30a4\u30ca\u30ea\u30c7\u30fc\u30bf\u3092Base64\u306b\u3088\u3063\u3066\u30a8\u30f3\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0\u3055\u308c\u305f\u30c6\u30ad\u30b9\u30c8\u306a\u306e\u3067Base64\u3067\u30c7\u30b3\u30fc\u30c9\u3059\u308b\n\t// \u3086\u3048\u306bDER\u30a8\u30f3\u30b3\u30fc\u30c9\u5f62\u5f0f\u306b\u5909\u63db\n\tkeyBytes, err := base64.StdEncoding.DecodeString(keystr)\n\tif err != nil {\n\t\treturn \"\", err\n\t}\n\n\t// ASN.1 PKCS\uff031 DER\u30a8\u30f3\u30b3\u30fc\u30c9\u5f62\u5f0f\u304b\u3089RSA\u79d8\u5bc6\u9375\u3092\u8fd4\u3059\n\tprivate, err := x509.ParsePKCS1PrivateKey(keyBytes)\n\tif err != nil {\n\t\treturn \"\", err\n\t}\n\n\t// SHA-256\u306e\u30cf\u30c3\u30b7\u30e5\u95a2\u6570\u3092\u4f7f\u3063\u3066\u9001\u4fe1\u30c7\u30fc\u30bf\u306e\u30cf\u30c3\u30b7\u30e5\u5024\u3092\u7b97\u51fa\u3059\u308b\n\th := crypto.Hash.New(crypto.SHA256)\n\th.Write(([]byte)(message))\n\thashed := h.Sum(nil)\n\n\t// \u30cf\u30c3\u30b7\u30e5\u5024\u3092RSA\u79d8\u5bc6\u9375\u3092\u4f7f\u3063\u3066\u6697\u53f7\u5316\u3059\u308b\n\tsignedData, err := rsa.SignPKCS1v15(rand.Reader, private, crypto.SHA256, hashed)\n\tif err != nil {\n\t\treturn \"\", err\n\t}\n\n\t// \u6697\u53f7\u5316\u3057\u305f\u30d0\u30a4\u30c8\u5217\u306e\u30c7\u30fc\u30bf\u3092Base64\u3067\u30a8\u30f3\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0\u3057\u3001\u7f72\u540d\u6587\u5b57\u5217\u3092\u751f\u6210\n\tsignature := base64.StdEncoding.EncodeToString(signedData)\n\treturn signature, nil\n}\n```\n\n# 3. \u7f72\u540d\u691c\u8a3c\n\u53d7\u4fe1\u8005\u306f\u3001\u30e1\u30c3\u30bb\u30fc\u30b8\uff08\u53d7\u4fe1\u30c7\u30fc\u30bf\uff09\u3001\u9001\u4fe1\u8005\u304b\u3089\u3082\u3089\u3063\u305f\u516c\u958b\u9375\u3001\u7f72\u540d\u3092\u5165\u529b\u3068\u3057\u3001\u691c\u8a3c\u7d50\u679c\u306e\u627f\u8a8d\u307e\u305f\u306f\u62d2\u5426\u3092\u51fa\u529b\u3057\u307e\u3059\u3002\u627f\u8a8d\u306e\u5834\u5408\u3001\u300c\u9001\u4fe1\u8005\u304c\u6b63\u3057\u3044\u300d\u300c\u9001\u4fe1\u30c7\u30fc\u30bf\u304c\u6539\u3056\u3093\u3055\u308c\u3066\u3044\u306a\u3044\u300d\u3068\u3044\u3046\u3053\u3068\u306b\u306a\u308a\u307e\u3059\u3002\n\n## \u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\n\n\u5b9f\u884c\u65b9\u6cd5\n\n$ go run main.go\n\n```main.go\npackage main\n\nimport (\n\t\"bufio\"\n\t\"crypto\"\n\t\"crypto/rsa\"\n\t\"crypto/x509\"\n\t\"encoding/base64\"\n\t\"fmt\"\n\t\"log\"\n\t\"os\"\n)\n\nfunc main() {\n\t// \u516c\u958b\u9375\u306e\u8aad\u8fbc\u307f\u3001\u3053\u3053\u306b\u306f\u4e0a\u8a18\u3067\u767a\u884c\u3057\u305f\u516c\u958b\u9375\u306e\u30d5\u30a1\u30a4\u30eb\u30d1\u30b9\u3092\u6307\u5b9a\u3059\u308b\n\tpublicKeyStr, err := readPublicKey(\"public.key\")\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\n\t// \u7f72\u540d\u6587\u5b57\u5217\n\tsignature := \"\u4f5c\u6210\u3055\u308c\u305f\u7f72\u540d\u6587\u5b57\u5217\u3092\u3053\u3053\u306b\u5165\u529b\u3059\u308b\"\n\n\t// \u53d7\u4fe1\u30c7\u30fc\u30bf\n\tmessage := \"Hello World\"\n\n\t// \u53d7\u4fe1\u30c7\u30fc\u30bf\uff08\u30e1\u30c3\u30bb\u30fc\u30b8\uff09\u3001\u516c\u958b\u9375\u3001\u7f72\u540d\u3092\u5165\u529b\u3068\u3057\u3001\u691c\u8a3c\u7d50\u679c\u306e\u627f\u8a8d\u307e\u305f\u306f\u62d2\u5426\u3092\u51fa\u529b\u3059\u308b\n\tif err := verifySignature(message, publicKeyStr, signature); err != nil {\n\t\tfmt.Println(\"err: \", err)\n\t\tfmt.Println(\"\u62d2\u5426\")\n\t} else {\n\t\tfmt.Println(\"\u627f\u8a8d\")\n\t}\n}\n\nfunc readPublicKey(filepath string) (string, error) {\n\ts := \"\"\n\tfp, err := os.Open(filepath)\n\tif err != nil {\n\t\treturn \"\", err\n\t}\n\tdefer fp.Close()\n\tscanner := bufio.NewScanner(fp)\n\tfor scanner.Scan() {\n\t\ttext := scanner.Text()\n\t\tif text == \"-----BEGIN PUBLIC KEY-----\" || text == \"-----END PUBLIC KEY-----\" {\n\t\t\tcontinue\n\t\t}\n\t\ts = s + text\n\t}\n\tif err := scanner.Err(); err != nil {\n\t\treturn \"\", err\n\t}\n\treturn s, nil\n}\n\nfunc verifySignature(message string, keystr string, signature string) error {\n\t// PEM\u306e\u4e2d\u8eab\u306fDER\u3068\u540c\u3058ASN.1\u306e\u30d0\u30a4\u30ca\u30ea\u30c7\u30fc\u30bf\u3092Base64\u306b\u3088\u3063\u3066\u30a8\u30f3\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0\u3055\u308c\u305f\u30c6\u30ad\u30b9\u30c8\u306a\u306e\u3067Base64\u3067\u30c7\u30b3\u30fc\u30c9\u3059\u308b\n\t// \u3086\u3048\u306bDER\u30a8\u30f3\u30b3\u30fc\u30c9\u5f62\u5f0f\u306b\u5909\u63db\n\tkeyBytes, err := base64.StdEncoding.DecodeString(keystr)\n\tif err != nil {\n\t\treturn err\n\t}\n\n\t// DER\u3067\u30a8\u30f3\u30b3\u30fc\u30c9\u3055\u308c\u305f\u516c\u958b\u9375\u3092\u89e3\u6790\u3059\u308b\n\t// \u6210\u529f\u3059\u308b\u3068\u3001pub\u306f* rsa.PublicKey\u3001* dsa.PublicKey\u3001\u307e\u305f\u306f* ecdsa.PublicKey\u578b\u306b\u306a\u308b\n\tpub, err := x509.ParsePKIXPublicKey(keyBytes)\n\tif err != nil {\n\t\treturn err\n\t}\n\n\t// \u7f72\u540d\u6587\u5b57\u5217\u306fBase64\u3067\u30a8\u30f3\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0\u3055\u308c\u305f\u30c6\u30ad\u30b9\u30c8\u306a\u306e\u3067Base64\u3067\u30c7\u30b3\u30fc\u30c9\u3059\u308b\n\tsignDataByte, err := base64.StdEncoding.DecodeString(signature)\n\tif err != nil {\n\t\treturn err\n\t}\n\n\t// SHA-256\u306e\u30cf\u30c3\u30b7\u30e5\u95a2\u6570\u3092\u4f7f\u3063\u3066\u53d7\u4fe1\u30c7\u30fc\u30bf\u306e\u30cf\u30c3\u30b7\u30e5\u5024\u3092\u7b97\u51fa\u3059\u308b\n\th := crypto.Hash.New(crypto.SHA256)\n\th.Write([]byte(message))\n\thashed := h.Sum(nil)\n\n\t// \u7f72\u540d\u306e\u691c\u8a3c\u3001\u6709\u52b9\u306a\u7f72\u540d\u306fnil\u3092\u8fd4\u3059\u3053\u3068\u306b\u3088\u3063\u3066\u793a\u3055\u308c\u308b\n\t// \u3053\u3053\u3067\u4f55\u3092\u3057\u3066\u3044\u308b\u304b\u3068\u3044\u3046\u3068\u3001\u3001\n\t// \u2460\u9001\u4fe1\u8005\u306e\u30c7\u30fc\u30bf\uff08\u7f72\u540d\u30c7\u30fc\u30bf\uff09\u3092\u516c\u958b\u9375\u3067\u5fa9\u53f7\u3057\u30cf\u30c3\u30b7\u30e5\u5024\u3092\u7b97\u51fa\n\t// \u2461\u53d7\u4fe1\u5074\u3067\u7b97\u51fa\u3057\u305f\u30cf\u30c3\u30b7\u30e5\u5024\u3068\u3001\u2460\u306e\u30cf\u30c3\u30b7\u30e5\u5024\u3092\u6bd4\u8f03\u3057\u3001\u4e00\u81f4\u3059\u308c\u3070\u3001\u300c\u9001\u4fe1\u8005\u304c\u6b63\u3057\u3044\u300d\u300c\u30c7\u30fc\u30bf\u304c\u6539\u3056\u3093\u3055\u308c\u3066\u3044\u306a\u3044\u300d\u3068\u3044\u3046\u3053\u3068\u3092\u78ba\u8a8d\u3067\u304d\u308b\n\terr = rsa.VerifyPKCS1v15(pub.(*rsa.PublicKey), crypto.SHA256, hashed, signDataByte)\n\tif err != nil {\n\t\treturn err\n\t}\n\n\treturn nil\n}\n```\n\n# \u5c11\u3057\u5fdc\u7528\u3057\u305f\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u3092\u66f8\u3044\u3066\u307f\u308b\n\n\u53d7\u4fe1\u5074\u3092\u5b9f\u884c\u3057localhost\u306b\u30b5\u30fc\u30d0\u30fc\u3092\u7acb\u3066\u3066\u304b\u3089\u3001\u9001\u4fe1\u5074\u3092\u5b9f\u884c\u3057\u3001\u304a\u4e92\u3044\u306e\u5b9f\u884c\u7d50\u679c\u3092\u78ba\u8a8d\u3057\u3066\u307f\u3066\u304f\u3060\u3055\u3044\u3002\n\n## \u30ea\u30af\u30a8\u30b9\u30c8\u53d7\u4fe1\u5074\n\n```main.go\npackage main\n\nimport (\n\t\"bufio\"\n\t\"crypto\"\n\t\"crypto/rsa\"\n\t\"crypto/x509\"\n\t\"encoding/base64\"\n\t\"fmt\"\n\t\"io/ioutil\"\n\t\"log\"\n\t\"net/http\"\n\t\"os\"\n\n\t\"github.com/unrolled/render\"\n)\n\nfunc main() {\n\thttp.HandleFunc(\"/foo\", handler)\n\thttp.ListenAndServe(\"localhost:8080\", nil)\n}\n\nfunc handler(w http.ResponseWriter, r *http.Request) {\n\trender := render.New()\n\n\t// \u516c\u958b\u9375\u306e\u8aad\u8fbc\u307f\n\tpublicKeyStr, err := readPublicKey(\"public.key\")\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\n\t// \u7f72\u540d\u6587\u5b57\u5217\u306e\u53d6\u5f97\n\tsignature := r.Header.Get(\"Signature\")\n\n\t// \u7f72\u540d\u5bfe\u8c61\u306e\u53d7\u4fe1\u30c7\u30fc\u30bf\n\tbody, _ := ioutil.ReadAll(r.Body)\n\n\t// \u7f72\u540d\u306e\u691c\u8a3c\n\tif err := verifySignature(string(body), publicKeyStr, signature); err != nil {\n\t\tfmt.Println(\"err: \", err)\n\t\tfmt.Println(\"\u62d2\u5426\")\n\t\trender.JSON(w, http.StatusForbidden, nil)\n\t\treturn\n\t} else {\n\t\tfmt.Println(\"\u627f\u8a8d\")\n\t}\n\trender.JSON(w, http.StatusOK, nil)\n\treturn\n}\n\nfunc readPublicKey(filepath string) (string, error) {\n\ts := \"\"\n\tfp, err := os.Open(filepath)\n\tif err != nil {\n\t\treturn \"\", err\n\t}\n\tdefer fp.Close()\n\tscanner := bufio.NewScanner(fp)\n\tfor scanner.Scan() {\n\t\ttext := scanner.Text()\n\t\tif text == \"-----BEGIN PUBLIC KEY-----\" || text == \"-----END PUBLIC KEY-----\" {\n\t\t\tcontinue\n\t\t}\n\t\ts = s + text\n\t}\n\tif err := scanner.Err(); err != nil {\n\t\treturn \"\", err\n\t}\n\treturn s, nil\n}\n\nfunc verifySignature(message string, keystr string, signature string) error {\n\tkeyBytes, err := base64.StdEncoding.DecodeString(keystr)\n\tif err != nil {\n\t\treturn err\n\t}\n\n\tpub, err := x509.ParsePKIXPublicKey(keyBytes)\n\tif err != nil {\n\t\treturn err\n\t}\n\n\tsignDataByte, err := base64.StdEncoding.DecodeString(signature)\n\tif err != nil {\n\t\treturn err\n\t}\n\n\th := crypto.Hash.New(crypto.SHA256)\n\th.Write([]byte(message))\n\thashed := h.Sum(nil)\n\n\terr = rsa.VerifyPKCS1v15(pub.(*rsa.PublicKey), crypto.SHA256, hashed, signDataByte)\n\tif err != nil {\n\t\treturn err\n\t}\n\treturn nil\n}\n```\n\n## \u30ea\u30af\u30a8\u30b9\u30c8\u9001\u4fe1\u5074\n\n```main.go\npackage main\n\nimport (\n\t\"bufio\"\n\t\"bytes\"\n\t\"crypto\"\n\t\"crypto/rand\"\n\t\"crypto/rsa\"\n\t\"crypto/x509\"\n\t\"encoding/base64\"\n\t\"fmt\"\n\t\"log\"\n\t\"net/http\"\n\t\"os\"\n\t\"strconv\"\n\t\"time\"\n)\n\nfunc main() {\n\t// \u79d8\u5bc6\u9375\u306e\u8aad\u8fbc\u307f\n\tprivateKeyStr, err := readPrivateKey(\"private.key\")\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\n\t// \u7f72\u540d\u5bfe\u8c61\u306e\u9001\u4fe1\u30c7\u30fc\u30bf\u3092Json\u5f62\u5f0f\u306b\u3057\u3066\u307f\u308b\u3000\u4f8b\uff09-> {\"message\":\"Hello World\",\"timestamp\":1481610623}\n\tmessage := `{\"message\":\"Hello World\",\"timestamp\":` + strconv.FormatInt(time.Now().Unix(), 10) + `}`\n\n\t// \u9001\u4fe1\u30c7\u30fc\u30bf\uff08\u30e1\u30c3\u30bb\u30fc\u30b8\uff09\u3068\u79d8\u5bc6\u9375\u3092\u5165\u529b\u3068\u3057\u3001\u7f72\u540d\u3092\u751f\u6210\u3059\u308b\n\tsignature, err := createSignature(message, privateKeyStr)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\n\t// \u30ea\u30af\u30a8\u30b9\u30c8\u3092\u9001\u308b\u969b\u306b\u3001\u7f72\u540d\u306f\u30d8\u30c3\u30c0\u306b\u8a2d\u5b9a\u3059\u308b\n\treq, err := http.NewRequest(\"POST\", \"http://localhost:8080/foo\", bytes.NewBuffer(([]byte)(message)))\n\tdefer req.Body.Close()\n\treq.Header.Set(\"Content-Type\", \"application/json\")\n\treq.Header.Set(\"Signature\", signature)\n\n\tclient := http.Client{}\n\tres, err := client.Do(req)\n\tif err != nil {\n\t\tlog.Fatal(err)\n\t}\n\tfmt.Println(res.StatusCode)\n}\n\nfunc readPrivateKey(filepath string) (string, error) {\n\ts := \"\"\n\tfp, err := os.Open(filepath)\n\tif err != nil {\n\t\treturn \"\", err\n\t}\n\tdefer fp.Close()\n\tscanner := bufio.NewScanner(fp)\n\tfor scanner.Scan() {\n\t\ttext := scanner.Text()\n\t\tif text == \"-----BEGIN RSA PRIVATE KEY-----\" || text == \"-----END RSA PRIVATE KEY-----\" {\n\t\t\tcontinue\n\t\t}\n\t\ts = s + scanner.Text()\n\t}\n\tif err := scanner.Err(); err != nil {\n\t\treturn \"\", err\n\t}\n\n\treturn s, nil\n}\n\nfunc createSignature(message, keystr string) (string, error) {\n\tkeyBytes, err := base64.StdEncoding.DecodeString(keystr)\n\tif err != nil {\n\t\treturn \"\", err\n\t}\n\n\tprivate, err := x509.ParsePKCS1PrivateKey(keyBytes)\n\tif err != nil {\n\t\treturn \"\", err\n\t}\n\n\th := crypto.Hash.New(crypto.SHA256)\n\th.Write(([]byte)(message))\n\thashed := h.Sum(nil)\n\n\tsignedData, err := rsa.SignPKCS1v15(rand.Reader, private, crypto.SHA256, hashed)\n\tif err != nil {\n\t\treturn \"\", err\n\t}\n\n\tsignature := base64.StdEncoding.EncodeToString(signedData)\n\treturn signature, nil\n}\n```\n\n# We're hiring!\nOrigami\u3067\u306f\u3044\u308d\u3093\u306a\u30dd\u30b8\u30b7\u30e7\u30f3\u306e\u30a8\u30f3\u30b8\u30cb\u30a2\u3092\u52df\u96c6\u3057\u3066\u307e\u3059\u3002\nhttps://origami.com/jobs\n", "tags": ["Go", "golang", "\u30bb\u30ad\u30e5\u30ea\u30c6\u30a3", "\u7f72\u540d", "RSA"]}