{"context": "\n\ntemplate_list()\u3068\u306f\uff1f\n\n\n\u30b5\u30f3\u30d7\u30eb\n\ntest_template_list.py\n# ##### BEGIN GPL LICENSE BLOCK #####\n#\n#  This program is free software; you can redistribute it and/or\n#  modify it under the terms of the GNU General Public License\n#  as published by the Free Software Foundation; either version 2\n#  of the License, or (at your option) any later version.\n#\n#  This program is distributed in the hope that it will be useful,\n#  but WITHOUT ANY WARRANTY; without even the implied warranty of\n#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n#  GNU General Public License for more details.\n#\n#  You should have received a copy of the GNU General Public License\n#  along with this program; if not, write to the Free Software Foundation,\n#  Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.\n#\n# ##### END GPL LICENSE BLOCK #####\n\n# Blender2.77a\n\nimport bpy\n\n\ndef creat_not_jyuufuku_name(name, name_set, num):\n    new_name = \"\"\n    if '.' in name:\n        split_name = name.split('.')\n        if split_name[-1].isdigit():\n            new_name = \".\".join(split_name[0:-1]) + \".{:03d}\".format(num)\n        else:\n            if split_name[-1] == \"\":\n                new_name = name + \"{:03d}\".format(num)\n            else:\n                new_name = \".\".join(split_name) + \".{:03d}\".format(num)\n    else:\n        new_name = name + \".{:03d}\".format(num)\n\n    if new_name in name_set:\n        return creat_not_jyuufuku_name(new_name, name_set, num+1)\n\n    return new_name\n\n\ndef get_my_string(self):\n    return self[\"name\"]\n\ndef set_my_string(self, value):\n    self[\"name\"] = value\n\n    tl = bpy.context.window_manager.test_ui_list.test_list\n    if len(tl) > 1:\n        s = set()\n        result = [x.name for x in tl if x.name in s or s.add(x.name)]\n        if len(result):\n            number = 1\n            self[\"name\"] = creat_not_jyuufuku_name(value, s, 1)\n\n\n\nclass MyTestGroup(bpy.types.PropertyGroup):\n    name = bpy.props.StringProperty(get=get_my_string, set=set_my_string)\n    int_val = bpy.props.IntProperty()\n\nbpy.utils.register_class(MyTestGroup)\n\nclass MyCollectionProperty(bpy.types.PropertyGroup):\n    active_index = bpy.props.IntProperty()\n    test_list = bpy.props.CollectionProperty(type=bpy.types.MyTestGroup)\n\n    def add(self):\n        item = self.test_list.add()\n        item.name = \"name\"\n        item.int_val = 10\n        self.active_index = len(self.test_list)-1\n\n    def remove(self):\n        if len(self.test_list):\n            self.test_list.remove(self.active_index)\n            if len(self.test_list)-1 < self.active_index:\n                self.active_index = len(self.test_list)-1\n                if self.active_index < 0:\n                    self.active_index = 0\n\n    def move(self, index1, index2):\n        if len(self.test_list) < 2:\n            return\n        if 0 <= index1 < len(self.test_list):\n            if 0 <= index2 < len(self.test_list):\n                self.test_list.move(index1, index2)\n                self.active_index = index2\n\n    def clear(self):\n        self.test_list.clear()\n\n\nclass MyUIListAddItemOperator(bpy.types.Operator):\n    bl_idname = \"view3d.my_uilist_add_item\"\n    bl_label = \"Add Item\"\n\n    def execute(self, context):\n        context.window_manager.test_ui_list.add()\n        return {'FINISHED'}\n\n\nclass MyUIListRemoveItemOperator(bpy.types.Operator):\n    bl_idname = \"view3d.my_uilist_remove_item\"\n    bl_label = \"Remove Item\"\n\n    def execute(self, context):\n        context.window_manager.test_ui_list.remove()\n        return {'FINISHED'}\n\n\nclass MyUIListMoveItemOperator(bpy.types.Operator):\n    bl_idname = \"view3d.my_uilist_move_item\"\n    bl_label = \"Move Item\"\n\n    type = bpy.props.StringProperty(default='UP')\n\n    def execute(self, context):\n        ui_list = context.window_manager.test_ui_list\n        if self.type == 'UP':\n            ui_list.move(ui_list.active_index, ui_list.active_index-1)\n        elif self.type == 'DOWN':\n            ui_list.move(ui_list.active_index, ui_list.active_index+1)\n        return {'FINISHED'}\n\n\nclass MyUIListClearItemOperator(bpy.types.Operator):\n    bl_idname = \"view3d.my_uilist_clear_item\"\n    bl_label = \"Clear Item\"\n\n    def execute(self, context):\n        context.window_manager.test_ui_list.clear()\n        return {'FINISHED'}\n\n\nclass MY_UL_test_group_list(bpy.types.UIList):\n    def draw_item(self, context, layout, data, item, icon, active_data, active_propname, index):\n        if self.layout_type in {'DEFAULT', 'COMPACT'}:\n            layout.prop(item, \"name\", text=\"\", emboss=False, icon_value=icon)\n        elif self.layout_type == 'GRID':\n            layout.alignment = 'CENTER'\n            layout.label(text=\"\", icon_value=icon)\n\n\nclass UIListTestPanel(bpy.types.Panel):\n    bl_label = \"UIList Test Panel\"\n    bl_idname = \"VIEW3D_PT_ui_list_test\"\n    bl_space_type = \"VIEW_3D\"\n    bl_region_type = \"UI\"\n\n    def draw(self, context):\n        layout = self.layout\n\n        ui_list = context.window_manager.test_ui_list\n\n        row = layout.row()\n        col = row.column()\n        col.template_list(\"MY_UL_test_group_list\", \"\", ui_list, \"test_list\", ui_list, \"active_index\", rows=1)\n\n        col = row.column(align=True)\n        col.operator(\"view3d.my_uilist_add_item\", icon='ZOOMIN', text=\"\")\n        col.operator(\"view3d.my_uilist_remove_item\", icon='ZOOMOUT', text=\"\")\n        col.operator(\"view3d.my_uilist_move_item\", icon='TRIA_UP', text=\"\").type = 'UP'\n        col.operator(\"view3d.my_uilist_move_item\", icon='TRIA_DOWN', text=\"\").type = 'DOWN'\n        layout.operator(\"view3d.my_uilist_clear_item\", text=\"All Clear\")\n\n        if len(ui_list.test_list):\n            row = layout.row()\n            row.prop(ui_list.test_list[ui_list.active_index], \"name\")\n            row = layout.row()\n            row.prop(ui_list.test_list[ui_list.active_index], \"int_val\")\n\n\ndef register():\n    bpy.utils.register_class(MyCollectionProperty)\n\n    bpy.utils.register_class(MyUIListAddItemOperator)\n    bpy.utils.register_class(MyUIListRemoveItemOperator)\n    bpy.utils.register_class(MyUIListMoveItemOperator)\n    bpy.utils.register_class(MyUIListClearItemOperator)\n\n    bpy.utils.register_class(MY_UL_test_group_list)\n    bpy.utils.register_class(UIListTestPanel)\n\n    bpy.types.WindowManager.test_ui_list = bpy.props.PointerProperty(type=MyCollectionProperty)\n\n\ndef unregister():\n    del bpy.types.WindowManager.test_ui_list\n\n    bpy.utils.unregister_class(UIListTestPanel)\n    bpy.utils.unregister_class(MY_UL_test_group_list)\n\n    bpy.utils.unregister_class(MyUIListAddItemOperator)\n    bpy.utils.unregister_class(MyUIListRemoveItemOperator)\n    bpy.utils.unregister_class(MyUIListMoveItemOperator)\n    bpy.utils.unregister_class(MyUIListClearItemOperator)\n\n    bpy.utils.unregister_class(MyCollectionProperty)\n    #bpy.utils.unregister_class(MyTestGroup)\n\n\nif __name__ == \"__main__\":\n    register()\n\n\nBlender\u5185\u306e\u30c6\u30ad\u30b9\u30c8\u30a8\u30c7\u30a3\u30bf\u306b\u30b3\u30d4\u30da\u3057\u3066\u5b9f\u884c\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n\n\u5b9f\u884c\u7d50\u679c\n\n+\u3068-\u30dc\u30bf\u30f3\u304b\u3089\u30c7\u30fc\u30bf\u306e\u8ffd\u52a0\u3068\u524a\u9664\u304c\u51fa\u6765\u307e\u3059\u3002\n\u4e0a\u4e0b\u30dc\u30bf\u30f3\u3067\u9078\u629e\u4e2d\u306e\u30a2\u30a4\u30c6\u30e0\u3092\u79fb\u52d5\u3002\nAllClear\u30dc\u30bf\u30f3\u3067\u5168\u3066\u524a\u9664\u3067\u304d\u307e\u3059\u3002\n\n\u89e3\u8aac\n\u30c7\u30fc\u30bf\u306e\u8ffd\u52a0\u3084\u524a\u9664\u306e\u70ba\u306b\u5225\u9014\u30aa\u30da\u30ec\u30fc\u30bf\u30fc\u3092\u7528\u610f\u3001\u4ed6\u306e\u30d1\u30cd\u30eb\u3068\u898b\u305f\u76ee\u304c\u540c\u3058\u306b\u306a\u308b\u3088\u3046\u306b\u96a3\u306b\u914d\u7f6e\u3002\n\u5b9f\u969b\u306b\u4f7f\u3046\u5834\u5408\u306fremove\u30dc\u30bf\u30f3\u306f\u96e2\u308c\u305f\u6240\u306b\u7f6e\u3044\u305f\u65b9\u304c\u826f\u3044\u3067\u3059\u306d\u3002\n\u540d\u524d\u306e\u91cd\u8907\u56de\u907f\u306f\u81ea\u5206\u3067\u3059\u308b\u5fc5\u8981\u3042\u308a\u3002\nMY_UL_test_group_list\u30af\u30e9\u30b9\u306edraw_item()\u306e\u3068\u3053\u308d\u3067\u30ea\u30b9\u30c8\u306e\u4e2d\u8eab\u3092\u8868\u793a\u3057\u3066\u3044\u308b\u3088\u3046\u3067\u3059\u3002\n\"name\"\u306e\u6240\u3092\"int_val\"\u306b\u5909\u66f4\u3059\u308c\u3070\u305d\u3063\u3061\u3092\u8868\u793a\u3067\u304d\u307e\u3059\u3002\n\u30c0\u30d6\u30eb\u30af\u30ea\u30c3\u30af\u3067\u76f4\u63a5\u5909\u66f4\u51fa\u6765\u308b\u6240\u306f\u540c\u3058\u3067\u3059\u306d\u3002\n\n\u6700\u5f8c\u306b\ntemplate_list()\u306f\u3042\u307e\u308a\u4f7f\u3046\u6a5f\u4f1a\u306f\u7121\u3055\u305d\u3046\u3067\u3059\u304c\u3001\u3061\u3087\u3063\u3068\u5fc5\u8981\u306b\u306a\u3063\u305f\u306e\u3067\u4f7f\u3044\u65b9\u3092\u8abf\u3079\u3066\u307f\u307e\u3057\u305f\u3002\n\u203b\u8ffd\u8a18\n\u30b5\u30f3\u30d7\u30eb\u306b\u5c11\u3057\u554f\u984c\u304c\u3042\u3063\u305f\u306e\u3067\u4fee\u6b63\u3057\u307e\u3057\u305f\u3002\n\u3064\u3044\u3067\u306b\u3001CollectionProperty\u306emove()\u3068clear()\u3092\u30dc\u30bf\u30f3\u3068\u3057\u3066\u914d\u7f6e\u3057\u307e\u3057\u305f\u3002\n# template_list()\u3068\u306f\uff1f\n![2016-05-01_20h40_39.png](https://qiita-image-store.s3.amazonaws.com/0/122429/57631a94-ad35-a988-ee7f-7b495cfe4df5.png)\n\n# \u30b5\u30f3\u30d7\u30eb\n```py:test_template_list.py\n# ##### BEGIN GPL LICENSE BLOCK #####\n#\n#  This program is free software; you can redistribute it and/or\n#  modify it under the terms of the GNU General Public License\n#  as published by the Free Software Foundation; either version 2\n#  of the License, or (at your option) any later version.\n#\n#  This program is distributed in the hope that it will be useful,\n#  but WITHOUT ANY WARRANTY; without even the implied warranty of\n#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n#  GNU General Public License for more details.\n#\n#  You should have received a copy of the GNU General Public License\n#  along with this program; if not, write to the Free Software Foundation,\n#  Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.\n#\n# ##### END GPL LICENSE BLOCK #####\n\n# Blender2.77a\n\nimport bpy\n\n\ndef creat_not_jyuufuku_name(name, name_set, num):\n    new_name = \"\"\n    if '.' in name:\n        split_name = name.split('.')\n        if split_name[-1].isdigit():\n            new_name = \".\".join(split_name[0:-1]) + \".{:03d}\".format(num)\n        else:\n            if split_name[-1] == \"\":\n                new_name = name + \"{:03d}\".format(num)\n            else:\n                new_name = \".\".join(split_name) + \".{:03d}\".format(num)\n    else:\n        new_name = name + \".{:03d}\".format(num)\n    \n    if new_name in name_set:\n        return creat_not_jyuufuku_name(new_name, name_set, num+1)\n    \n    return new_name\n\n\ndef get_my_string(self):\n    return self[\"name\"]\n\ndef set_my_string(self, value):\n    self[\"name\"] = value\n    \n    tl = bpy.context.window_manager.test_ui_list.test_list\n    if len(tl) > 1:\n        s = set()\n        result = [x.name for x in tl if x.name in s or s.add(x.name)]\n        if len(result):\n            number = 1\n            self[\"name\"] = creat_not_jyuufuku_name(value, s, 1)\n            \n        \n\nclass MyTestGroup(bpy.types.PropertyGroup):\n    name = bpy.props.StringProperty(get=get_my_string, set=set_my_string)\n    int_val = bpy.props.IntProperty()\n\nbpy.utils.register_class(MyTestGroup)\n\nclass MyCollectionProperty(bpy.types.PropertyGroup):\n    active_index = bpy.props.IntProperty()\n    test_list = bpy.props.CollectionProperty(type=bpy.types.MyTestGroup)\n    \n    def add(self):\n        item = self.test_list.add()\n        item.name = \"name\"\n        item.int_val = 10\n        self.active_index = len(self.test_list)-1\n    \n    def remove(self):\n        if len(self.test_list):\n            self.test_list.remove(self.active_index)\n            if len(self.test_list)-1 < self.active_index:\n                self.active_index = len(self.test_list)-1\n                if self.active_index < 0:\n                    self.active_index = 0\n    \n    def move(self, index1, index2):\n        if len(self.test_list) < 2:\n            return\n        if 0 <= index1 < len(self.test_list):\n            if 0 <= index2 < len(self.test_list):\n                self.test_list.move(index1, index2)\n                self.active_index = index2\n    \n    def clear(self):\n        self.test_list.clear()\n\n\nclass MyUIListAddItemOperator(bpy.types.Operator):\n    bl_idname = \"view3d.my_uilist_add_item\"\n    bl_label = \"Add Item\"\n    \n    def execute(self, context):\n        context.window_manager.test_ui_list.add()\n        return {'FINISHED'}\n\n\nclass MyUIListRemoveItemOperator(bpy.types.Operator):\n    bl_idname = \"view3d.my_uilist_remove_item\"\n    bl_label = \"Remove Item\"\n    \n    def execute(self, context):\n        context.window_manager.test_ui_list.remove()\n        return {'FINISHED'}\n\n\nclass MyUIListMoveItemOperator(bpy.types.Operator):\n    bl_idname = \"view3d.my_uilist_move_item\"\n    bl_label = \"Move Item\"\n    \n    type = bpy.props.StringProperty(default='UP')\n    \n    def execute(self, context):\n        ui_list = context.window_manager.test_ui_list\n        if self.type == 'UP':\n            ui_list.move(ui_list.active_index, ui_list.active_index-1)\n        elif self.type == 'DOWN':\n            ui_list.move(ui_list.active_index, ui_list.active_index+1)\n        return {'FINISHED'}\n\n\nclass MyUIListClearItemOperator(bpy.types.Operator):\n    bl_idname = \"view3d.my_uilist_clear_item\"\n    bl_label = \"Clear Item\"\n    \n    def execute(self, context):\n        context.window_manager.test_ui_list.clear()\n        return {'FINISHED'}\n\n\nclass MY_UL_test_group_list(bpy.types.UIList):\n    def draw_item(self, context, layout, data, item, icon, active_data, active_propname, index):\n        if self.layout_type in {'DEFAULT', 'COMPACT'}:\n            layout.prop(item, \"name\", text=\"\", emboss=False, icon_value=icon)\n        elif self.layout_type == 'GRID':\n            layout.alignment = 'CENTER'\n            layout.label(text=\"\", icon_value=icon)\n\n\nclass UIListTestPanel(bpy.types.Panel):\n    bl_label = \"UIList Test Panel\"\n    bl_idname = \"VIEW3D_PT_ui_list_test\"\n    bl_space_type = \"VIEW_3D\"\n    bl_region_type = \"UI\"\n    \n    def draw(self, context):\n        layout = self.layout\n        \n        ui_list = context.window_manager.test_ui_list\n        \n        row = layout.row()\n        col = row.column()\n        col.template_list(\"MY_UL_test_group_list\", \"\", ui_list, \"test_list\", ui_list, \"active_index\", rows=1)\n        \n        col = row.column(align=True)\n        col.operator(\"view3d.my_uilist_add_item\", icon='ZOOMIN', text=\"\")\n        col.operator(\"view3d.my_uilist_remove_item\", icon='ZOOMOUT', text=\"\")\n        col.operator(\"view3d.my_uilist_move_item\", icon='TRIA_UP', text=\"\").type = 'UP'\n        col.operator(\"view3d.my_uilist_move_item\", icon='TRIA_DOWN', text=\"\").type = 'DOWN'\n        layout.operator(\"view3d.my_uilist_clear_item\", text=\"All Clear\")\n        \n        if len(ui_list.test_list):\n            row = layout.row()\n            row.prop(ui_list.test_list[ui_list.active_index], \"name\")\n            row = layout.row()\n            row.prop(ui_list.test_list[ui_list.active_index], \"int_val\")\n        \n\ndef register():\n    bpy.utils.register_class(MyCollectionProperty)\n    \n    bpy.utils.register_class(MyUIListAddItemOperator)\n    bpy.utils.register_class(MyUIListRemoveItemOperator)\n    bpy.utils.register_class(MyUIListMoveItemOperator)\n    bpy.utils.register_class(MyUIListClearItemOperator)\n    \n    bpy.utils.register_class(MY_UL_test_group_list)\n    bpy.utils.register_class(UIListTestPanel)\n    \n    bpy.types.WindowManager.test_ui_list = bpy.props.PointerProperty(type=MyCollectionProperty)\n    \n\ndef unregister():\n    del bpy.types.WindowManager.test_ui_list\n    \n    bpy.utils.unregister_class(UIListTestPanel)\n    bpy.utils.unregister_class(MY_UL_test_group_list)\n    \n    bpy.utils.unregister_class(MyUIListAddItemOperator)\n    bpy.utils.unregister_class(MyUIListRemoveItemOperator)\n    bpy.utils.unregister_class(MyUIListMoveItemOperator)\n    bpy.utils.unregister_class(MyUIListClearItemOperator)\n    \n    bpy.utils.unregister_class(MyCollectionProperty)\n    #bpy.utils.unregister_class(MyTestGroup)\n\n\nif __name__ == \"__main__\":\n    register()\n```\nBlender\u5185\u306e\u30c6\u30ad\u30b9\u30c8\u30a8\u30c7\u30a3\u30bf\u306b\u30b3\u30d4\u30da\u3057\u3066\u5b9f\u884c\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n\n# \u5b9f\u884c\u7d50\u679c\n![2016-05-08_13h43_27.png](https://qiita-image-store.s3.amazonaws.com/0/122429/bbb1b1ea-06a8-a2e9-8767-7745ef9191c8.png)\n+\u3068-\u30dc\u30bf\u30f3\u304b\u3089\u30c7\u30fc\u30bf\u306e\u8ffd\u52a0\u3068\u524a\u9664\u304c\u51fa\u6765\u307e\u3059\u3002\n\u4e0a\u4e0b\u30dc\u30bf\u30f3\u3067\u9078\u629e\u4e2d\u306e\u30a2\u30a4\u30c6\u30e0\u3092\u79fb\u52d5\u3002\nAllClear\u30dc\u30bf\u30f3\u3067\u5168\u3066\u524a\u9664\u3067\u304d\u307e\u3059\u3002\n\n# \u89e3\u8aac\n\u30c7\u30fc\u30bf\u306e\u8ffd\u52a0\u3084\u524a\u9664\u306e\u70ba\u306b\u5225\u9014\u30aa\u30da\u30ec\u30fc\u30bf\u30fc\u3092\u7528\u610f\u3001\u4ed6\u306e\u30d1\u30cd\u30eb\u3068\u898b\u305f\u76ee\u304c\u540c\u3058\u306b\u306a\u308b\u3088\u3046\u306b\u96a3\u306b\u914d\u7f6e\u3002\n\u5b9f\u969b\u306b\u4f7f\u3046\u5834\u5408\u306fremove\u30dc\u30bf\u30f3\u306f\u96e2\u308c\u305f\u6240\u306b\u7f6e\u3044\u305f\u65b9\u304c\u826f\u3044\u3067\u3059\u306d\u3002\n\n\u540d\u524d\u306e\u91cd\u8907\u56de\u907f\u306f\u81ea\u5206\u3067\u3059\u308b\u5fc5\u8981\u3042\u308a\u3002\n\nMY_UL_test_group_list\u30af\u30e9\u30b9\u306edraw_item()\u306e\u3068\u3053\u308d\u3067\u30ea\u30b9\u30c8\u306e\u4e2d\u8eab\u3092\u8868\u793a\u3057\u3066\u3044\u308b\u3088\u3046\u3067\u3059\u3002\n\"name\"\u306e\u6240\u3092\"int_val\"\u306b\u5909\u66f4\u3059\u308c\u3070\u305d\u3063\u3061\u3092\u8868\u793a\u3067\u304d\u307e\u3059\u3002\n\n\u30c0\u30d6\u30eb\u30af\u30ea\u30c3\u30af\u3067\u76f4\u63a5\u5909\u66f4\u51fa\u6765\u308b\u6240\u306f\u540c\u3058\u3067\u3059\u306d\u3002\n\n#\u6700\u5f8c\u306b\ntemplate_list()\u306f\u3042\u307e\u308a\u4f7f\u3046\u6a5f\u4f1a\u306f\u7121\u3055\u305d\u3046\u3067\u3059\u304c\u3001\u3061\u3087\u3063\u3068\u5fc5\u8981\u306b\u306a\u3063\u305f\u306e\u3067\u4f7f\u3044\u65b9\u3092\u8abf\u3079\u3066\u307f\u307e\u3057\u305f\u3002\n\n\u203b\u8ffd\u8a18\n\u30b5\u30f3\u30d7\u30eb\u306b\u5c11\u3057\u554f\u984c\u304c\u3042\u3063\u305f\u306e\u3067\u4fee\u6b63\u3057\u307e\u3057\u305f\u3002\n\u3064\u3044\u3067\u306b\u3001`CollectionProperty`\u306e`move()`\u3068`clear()`\u3092\u30dc\u30bf\u30f3\u3068\u3057\u3066\u914d\u7f6e\u3057\u307e\u3057\u305f\u3002\n", "tags": ["Blender", "Python"]}