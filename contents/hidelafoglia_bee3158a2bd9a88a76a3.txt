{"context": "\nID\u7ba1\u7406\u304c\u9762\u5012\u304f\u3055\u3044\u306e\u3067Django User\u306e\u30af\u30ec\u30c7\u30f3\u30b7\u30e3\u30eb\u3092\u4f7f\u3046\nnginx\u3067PAM\u8a8d\u8a3c\u304b\u3051\u3066libpam-python \u304b\u3089\u30b9\u30af\u30ea\u30d7\u30c8\u3092\u547c\u3076\n\u30b9\u30af\u30ea\u30d7\u30c8\u306e\u306a\u304b\u3067 django.contrib.auth.authenticate\u3092\u691c\u8a3c\u3059\u308b\n\n\nUbuntu\u306b\u30d1\u30c3\u30b1\u30fc\u30b8\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\n$ sudo apt-get install -y libpam-python python-pip libmysqlclient-dev\n\n$ dpkg -L libpam-python | grep so\n/lib/x86_64-linux-gnu/security/pam_python.so\n\n$ sudo which pip\n/usr/bin/pip\n\n$ sudo pip install django MySQL-python\n\n\nnginx\n$ sudo nginx -V  2>&1 |  sed 's/--/\\n--/g' | grep pam | wc\n      0       0       0\n\n$ sudo apt-get install nginx-full\n\n$ sudo nginx -V  2>&1 |  sed 's/--/\\n--/g' | grep pam\n--add-module=/build/nginx-pzhfc2/nginx-1.10.0/debian/modules/nginx-auth-pam\n\n\n\u8a8d\u8a3c\u30b9\u30af\u30ea\u30d7\u30c8\n/home/admin/projects/mysite/web/app/pamauth.py:\n# settings.py \u3088\u308a SECRET_KEY, DATABASES\u3092\u30b3\u30d4\u30fc\nSECRET_KEY = '{{ \u30b7\u30fc\u30af\u30ec\u30c3\u30c8}}'\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.mysql',\n        'HOST': 'localhost',\n        'NAME': 'apps_alpha',\n        'USER': 'apps_alpha',\n        'PASSWORD': 'apps_alpha',\n        'OPTIONS': {\n            'init_command': \"SET sql_mode='STRICT_TRANS_TABLES'\",\n        },\n    },\n}\nINSTALLED_APPS = [\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n]\n####\n\n# pip install django MySQL-python\n\nimport syslog\nimport sys\nimport traceback\n#\n\nNAME = 'pamauth'\n\nsyslog.openlog(ident=NAME,\n               logoption=syslog.LOG_PID, facility=syslog.LOG_LOCAL0)\n\ndef configure():\n    from django import setup\n    from django.conf import settings\n\n    settings.configure(\n        SECRET_KEY=SECRET_KEY,\n        DATABASES=DATABASES,\n        INSTALLED_APPS=INSTALLED_APPS,\n    )\n    setup()\n\ntry:\n    configure()\nexcept:\n    print traceback.format_exc()\n    pass\n\n\ndef pam_sm_authenticate(pamh, flags, argv):\n    syslog.syslog(\"%s: flag = %s\" % (NAME, str(flags)))\n    syslog.syslog(\"%s: argv= %s\" % (NAME, str(argv)))\n\n    if pamh.authtok is None:\n        passmsg = pamh.Message(pamh.PAM_PROMPT_ECHO_OFF,\n                               \"Authenticate: password?\")\n        res = pamh.conversation(passmsg)\n        syslog.syslog(\"%s:response is %s\" % (NAME, res.resp))\n        pamh.authtok = res.resp\n\n    auth_class = argv[1] if len(argv) > 1 else None\n\n    username = pamh.user\n    password = pamh.authtok\n\n    # syslog.syslog(\"%s: user= %s\" % (NAME, username))\n    # syslog.syslog(\"%s: service= %s\" % (NAME, pamh.service))\n    # syslog.syslog(\"%s: password = %s\" % (NAME, password))\n    # syslog.syslog(\"%s: rhost = %s\" % (NAME, pamh.rhost))\n\n    try:\n        if authenticate(username, password,\n                        pamh and pamh.service, auth_class):\n            syslog.syslog(\"%s: Authenticated !!! \" % NAME)\n            return pamh.PAM_SUCCESS\n    except:\n        for err in traceback.format_exc().split('\\n'):\n            syslog.syslog(\"%s: %s\" % (NAME, err))\n\n    return pamh.PAM_AUTH_ERR\n\n\ndef authenticate(username, password, service=None, auth_class=None):\n    ''' Django \u3067\u8a8d\u8a3c\u3055\u305b\u308b '''\n    from django.contrib.auth import authenticate\n    user = authenticate(username=username, password=password)\n\n    return True if user else False\n\n\ndef pam_sm_setcred(pamh, flags, argv):\n    syslog.syslog(\"ANY_AUTH:pam_sm_setcred\")\n    return pamh.PAM_CRED_ERR\n\n\ndef pam_sm_acct_mgmt(pamh, flags, argv):\n    syslog.syslog(\"ANY_AUTH:pam_sm_acct_mgmt\")\n    return pamh.PAM_SUCCESS\n\n\ndef pam_sm_open_session(pamh, flags, argv):\n    syslog.syslog(\"ANY_AUTH:pam_sm_open_session\")\n    return pamh.PAM_SUCCESS\n\n\ndef pam_sm_close_session(pamh, flags, argv):\n    syslog.syslog(\"ANY_AUTH:pam_sm_close_session\")\n    return pamh.PAM_SUCCESS\n\n\ndef pam_sm_chauthtok(pamh, flags, argv):\n    syslog.syslog(\"ANY_AUTH:pam_sm_chauthtok\")\n    return pamh.PAM_SUCCESS\n\n\nif __name__ == '__main__':\n    if len(sys.argv) > 2:\n        print \"Authcatiion for %s %s\" % (sys.argv[1], sys.argv[2]),\n        print \":\", authenticate(*sys.argv[1:])\n\n\nPAM \u8a2d\u5b9a\n$ sudo vi /etc/pam.d/nginx-basicauth\n\nauth    sufficient      pam_python.so   /home/admin/projects/mysite/web/app/pamauth.py\naccount required        pam_permit.so\n\n\nnginx \u8a2d\u5b9a\n/etc/nginx/sites-available/basicauth.conf :\nauth_pam \"Django User Auth\";                  # RELM\u306e\u8a2d\u5b9a\nauth_pam_service_name \"nginx-basicauth\";      # PAM\u306e\u8a2d\u5b9a\n\n/etc/nginx/sites-available/default:\nlocation / {\n    include /etc/nginx/sites-available/basicauth.conf ;\n    include /etc/nginx/sites-available/app.conf ;\n}\n\n\n- ID\u7ba1\u7406\u304c\u9762\u5012\u304f\u3055\u3044\u306e\u3067Django User\u306e\u30af\u30ec\u30c7\u30f3\u30b7\u30e3\u30eb\u3092\u4f7f\u3046\n- nginx\u3067PAM\u8a8d\u8a3c\u304b\u3051\u3066libpam-python \u304b\u3089\u30b9\u30af\u30ea\u30d7\u30c8\u3092\u547c\u3076\n- \u30b9\u30af\u30ea\u30d7\u30c8\u306e\u306a\u304b\u3067 `django.contrib.auth.authenticate`\u3092\u691c\u8a3c\u3059\u308b\n\n## Ubuntu\u306b\u30d1\u30c3\u30b1\u30fc\u30b8\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\n\n~~~bash\n$ sudo apt-get install -y libpam-python python-pip libmysqlclient-dev\n~~~\n\n~~~bash\n$ dpkg -L libpam-python | grep so\n/lib/x86_64-linux-gnu/security/pam_python.so\n\n$ sudo which pip\n/usr/bin/pip\n~~~\n\n~~~bash\n$ sudo pip install django MySQL-python\n~~~\n\n\n## nginx\n\n~~~bash\n$ sudo nginx -V  2>&1 |  sed 's/--/\\n--/g' | grep pam | wc\n      0       0       0\n~~~\n\n~~~bash\n$ sudo apt-get install nginx-full\n~~~\n~~~bash\n$ sudo nginx -V  2>&1 |  sed 's/--/\\n--/g' | grep pam\n--add-module=/build/nginx-pzhfc2/nginx-1.10.0/debian/modules/nginx-auth-pam\n~~~\n\n## \u8a8d\u8a3c\u30b9\u30af\u30ea\u30d7\u30c8\n\n/home/admin/projects/mysite/web/app/pamauth.py:\n\n~~~py\n# settings.py \u3088\u308a SECRET_KEY, DATABASES\u3092\u30b3\u30d4\u30fc\nSECRET_KEY = '{{ \u30b7\u30fc\u30af\u30ec\u30c3\u30c8}}'\nDATABASES = {\n    'default': {\n        'ENGINE': 'django.db.backends.mysql',\n        'HOST': 'localhost',\n        'NAME': 'apps_alpha',\n        'USER': 'apps_alpha',\n        'PASSWORD': 'apps_alpha',\n        'OPTIONS': {\n            'init_command': \"SET sql_mode='STRICT_TRANS_TABLES'\",\n        },\n    },\n}\nINSTALLED_APPS = [\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n]\n####\n\n# pip install django MySQL-python\n\nimport syslog\nimport sys\nimport traceback\n#\n\nNAME = 'pamauth'\n\nsyslog.openlog(ident=NAME,\n               logoption=syslog.LOG_PID, facility=syslog.LOG_LOCAL0)\n\ndef configure():\n    from django import setup\n    from django.conf import settings\n\n    settings.configure(\n        SECRET_KEY=SECRET_KEY,\n        DATABASES=DATABASES,\n        INSTALLED_APPS=INSTALLED_APPS,\n    )\n    setup()\n\ntry:\n    configure()\nexcept:\n    print traceback.format_exc()\n    pass\n\n\ndef pam_sm_authenticate(pamh, flags, argv):\n    syslog.syslog(\"%s: flag = %s\" % (NAME, str(flags)))\n    syslog.syslog(\"%s: argv= %s\" % (NAME, str(argv)))\n\n    if pamh.authtok is None:\n        passmsg = pamh.Message(pamh.PAM_PROMPT_ECHO_OFF,\n                               \"Authenticate: password?\")\n        res = pamh.conversation(passmsg)\n        syslog.syslog(\"%s:response is %s\" % (NAME, res.resp))\n        pamh.authtok = res.resp\n\n    auth_class = argv[1] if len(argv) > 1 else None\n\n    username = pamh.user\n    password = pamh.authtok\n\n    # syslog.syslog(\"%s: user= %s\" % (NAME, username))\n    # syslog.syslog(\"%s: service= %s\" % (NAME, pamh.service))\n    # syslog.syslog(\"%s: password = %s\" % (NAME, password))\n    # syslog.syslog(\"%s: rhost = %s\" % (NAME, pamh.rhost))\n\n    try:\n        if authenticate(username, password,\n                        pamh and pamh.service, auth_class):\n            syslog.syslog(\"%s: Authenticated !!! \" % NAME)\n            return pamh.PAM_SUCCESS\n    except:\n        for err in traceback.format_exc().split('\\n'):\n            syslog.syslog(\"%s: %s\" % (NAME, err))\n\n    return pamh.PAM_AUTH_ERR\n\n\ndef authenticate(username, password, service=None, auth_class=None):\n    ''' Django \u3067\u8a8d\u8a3c\u3055\u305b\u308b '''\n    from django.contrib.auth import authenticate\n    user = authenticate(username=username, password=password)\n\n    return True if user else False\n\n\ndef pam_sm_setcred(pamh, flags, argv):\n    syslog.syslog(\"ANY_AUTH:pam_sm_setcred\")\n    return pamh.PAM_CRED_ERR\n\n\ndef pam_sm_acct_mgmt(pamh, flags, argv):\n    syslog.syslog(\"ANY_AUTH:pam_sm_acct_mgmt\")\n    return pamh.PAM_SUCCESS\n\n\ndef pam_sm_open_session(pamh, flags, argv):\n    syslog.syslog(\"ANY_AUTH:pam_sm_open_session\")\n    return pamh.PAM_SUCCESS\n\n\ndef pam_sm_close_session(pamh, flags, argv):\n    syslog.syslog(\"ANY_AUTH:pam_sm_close_session\")\n    return pamh.PAM_SUCCESS\n\n\ndef pam_sm_chauthtok(pamh, flags, argv):\n    syslog.syslog(\"ANY_AUTH:pam_sm_chauthtok\")\n    return pamh.PAM_SUCCESS\n\n\nif __name__ == '__main__':\n    if len(sys.argv) > 2:\n        print \"Authcatiion for %s %s\" % (sys.argv[1], sys.argv[2]),\n        print \":\", authenticate(*sys.argv[1:])\n~~~        \n\n## PAM \u8a2d\u5b9a\n\n~~~bash\n$ sudo vi /etc/pam.d/nginx-basicauth\n~~~\n\n~~~\nauth    sufficient      pam_python.so   /home/admin/projects/mysite/web/app/pamauth.py\naccount required        pam_permit.so\n~~~\n\n## nginx \u8a2d\u5b9a\n\n/etc/nginx/sites-available/basicauth.conf :\n\n~~~\nauth_pam \"Django User Auth\";                  # RELM\u306e\u8a2d\u5b9a\nauth_pam_service_name \"nginx-basicauth\";      # PAM\u306e\u8a2d\u5b9a\n~~~\n\n/etc/nginx/sites-available/default:\n\n~~~\nlocation / {\n    include /etc/nginx/sites-available/basicauth.conf ;\n    include /etc/nginx/sites-available/app.conf ;\n}\n~~~\n", "tags": ["PAM", "nginx", "Django"]}