{"context": "\n\n\u3053\u306e\u8a18\u4e8b\u306b\u3064\u3044\u3066\n\u30bf\u30fc\u30df\u30ca\u30eb\u3067Swift\u3092\u5b9f\u884c\u3059\u308b\u74b0\u5883\u3067\u306e\u30b3\u30de\u30f3\u30c9\u4e00\u89a7\u3092\u3001\u4f55\u306e\u5f79\u306b\u7acb\u3064\u304b\u306f\u77e5\u308a\u307e\u305b\u3093\u304c\u307e\u3068\u3081\u3066\u307f\u307e\u3057\u305f\u3002\n\u81ea\u5206\u306e\u305f\u3081\u306e\u899a\u3048\u66f8\u304d\u306b\u3067\u3082\u3057\u305f\u3044\u3068\u601d\u3044\u307e\u3059\u3002\n\u7ffb\u8a33\u306f\u3001\u4f7f\u3063\u305f\u30b3\u30de\u30f3\u30c9\u304c\u51fa\u305f\u6642\u306b\u8ffd\u8a18\u3057\u3066\u3044\u304d\u305f\u3044\u6240\u5b58\u3067\u3059\u3002\n\n\u30b3\u30de\u30f3\u30c9\u4e00\u89a7\n\napropos : List debugger commands related to a word or subject.\nbreakpoint : Commands for operating on breakpoints (see 'help b' forshorthand.)\nbugreport : Commands for creating domain-specific bug reports.\ncommand : Commands for managing custom LLDB commands.\ndisassemble : Disassemble specified instructions in the current target.  Defaults to the current function for the current thread and stack frame.\nexpression : Evaluate an expression on the current thread.  Displays any returned value with LLDB's default formatting.\nframe : Commands for selecting and examing the current thread's stack frames.\ngdb-remote : Connect to a process via remote GDB server.  If no host is specifed, localhost is assumed.\ngui : Switch into the curses based GUI mode.\nhelp : Show a list of all debugger commands, or give details about a specific command.\nkdp-remote : Connect to a process via remote KDP server.  If no UDP port is specified, port 41139 is assumed.\nlanguage : Commands specific to a source language.\nlog : Commands controlling LLDB internal logging.\nmemory : Commands for operating on memory in the current target process.\nplatform : Commands to manage and create platforms.\nplugin : Commands for managing LLDB plugins.\nprocess : Commands for interacting with processes on the current platform.\nquit : Quit the LLDB debugger.\nregister : Commands to access registers for the current thread and stack frame.\nscript : Invoke the script interpreter with provided code and display any results.  Start the interactive interpreter if no code is supplied.\nsettings : Commands for managing LLDB settings.\nsource : Commands for examining source code described by debug information for the current target process.\ntarget : Commands for operating on debugger targets.\nthread : Commands for operating on one or more threads in the current process.\ntype : Commands for operating on the type system.\nversion : Show the LLDB debugger version.\nwatchpoint : Commands for operating on watchpoints. \n\n\nCurrent command abbreviations (type ':help command alias' for more info):\n\nadd-dsym : ('target symbols add')  Add a debug symbol file to one of the target's current modules by specifying a path to a debug symbols file, or using the options to specify a module to download symbols for.\nattach : ('_regexp-attach')  Attach to process by ID or name.\nb : ('_regexp-break')  Set a breakpoint using one of several shorthand formats.\nbt : ('_regexp-bt')  Show the current thread's call stack.  Any numeric argument displays at most that many frames.  The argument 'all' displays all threads.\nc : ('process continue')  Continue execution of all threads in the current process.\ncall : ('expression --')  Evaluate an expression on the current thread. Displays any returned value with LLDB's default formatting.\ncontinue : ('process continue')  Continue execution of all threads in the current process.\ndetach : ('process detach')  Detach from the current target process.\ndi : ('disassemble')  Disassemble specified instructions in the current target.  Defaults to the current function for the current thread and stack frame.\ndis : ('disassemble')  Disassemble specified instructions in the current target.  Defaults to the current function for the current thread and stack frame.\ndisplay : ('_regexp-display')  Evaluate an expression at every stop (see 'help target stop-hook'.)\ndown : ('_regexp-down')  Select a newer stack frame.  Defaults to moving one frame, a numeric argument can specify an arbitrary number.\nenv : ('_regexp-env')  Shorthand for viewing and setting environment variables.\nexit : ('quit')  Quit the LLDB debugger.\nf : ('frame select')  Select the current stack frame by index from within the current thread (see 'thread backtrace'.)\nfile : ('target create')  Create a target using the argument as the main executable.\nfinish : ('thread step-out')  Finish executing the current stack frame and stop after returning.  Defaults to current thread unless specified.\nimage : ('target modules')  Commands for accessing information for one or more target modules.\nj : ('_regexp-jump')  Set the program counter to a new address.\njump : ('_regexp-jump')  Set the program counter to a new address.\nkill : ('process kill')  Terminate the current target process.\nl : ('_regexp-list')  List relevant source code using one of several shorthand formats.\nlist : ('_regexp-list')  List relevant source code using one of several shorthand formats.\nn : ('thread step-over')  Source level single step, stepping over calls.  Defaults to current thread unless specified.\nnext : ('thread step-over')  Source level single step, stepping over calls.  Defaults to current thread unless specified.\nnexti : ('thread step-inst-over')  Instruction level single step, stepping over calls.  Defaults to current thread unless specified.\nni : ('thread step-inst-over')  Instruction level single step, stepping over calls.  Defaults to current thread unless specified.\np : ('expression --')  Evaluate an expression on the current thread. Displays any returned value with LLDB's default formatting.\nparray : ('expression -Z %1   --')  Evaluate an expression on the current thread.  Displays any returned value with LLDB's default formatting.\npo : Evaluate an expression on the current thread.  Displays any returned value with formatting controlled by the type's author.\npoarray : ('expression -O -Z %1    --')  Evaluate an expression on the current thread.  Displays any returned value with LLDB's default formatting.\nprint : ('expression --')  Evaluate an expression on the current thread. Displays any returned value with LLDB's default formatting.\nq : ('quit')  Quit the LLDB debugger.\nr : ('process launch -X true --')  Launch the executable in the debugger.\nrbreak : ('breakpoint set -r %1')  Sets a breakpoint or set of breakpoints in the executable.\nrepl : ('expression -r  -- ')  Evaluate an expression on the current thread.  Displays any returned value with LLDB's default formatting.\nrun : ('process launch -X true --')  Launch the executable in the debugger.\ns : ('thread step-in')  Source level single step, stepping into calls.  Defaults to current thread unless specified.\nsi : ('thread step-inst')  Instruction level single step, stepping into calls.  Defaults to current thread unless specified.\nsif : Step through the current block, stopping if you step directly into a function whose name matches the TargetFunctionName.\nstep : ('thread step-in')  Source level single step, stepping into calls.  Defaults to current thread unless specified.\nstepi : ('thread step-inst')  Instruction level single step, stepping into calls.  Defaults to current thread unless specified.\nt : ('thread select')  Change the currently selected thread.\ntbreak : ('_regexp-tbreak')  Set a one-shot breakpoint using one of several shorthand formats.\nundisplay : ('_regexp-undisplay')  Stop displaying expression at every stop (specified by stop-hook index.)\nup : ('_regexp-up')  Select an older stack frame.  Defaults to moving one frame, a numeric argument can specify an arbitrary number.\nx : ('memory read')  Read from the memory of the current target process.\n\n\n\u6700\u5f8c\u306b\nhelp\u30b3\u30de\u30f3\u30c9\u3067\u8868\u793a\u3055\u308c\u308b\u5185\u5bb9\u3092\u8ee2\u8a18\u3057\u305f\u3060\u3051\u3067\u3059\u304c\u3001\u3044\u3064\u304b\u5f79\u7acb\u3064\u65e5\u304c\u6765\u308b\u3053\u3068\u3092\u7948\u3063\u3066\u3002\n#\u3053\u306e\u8a18\u4e8b\u306b\u3064\u3044\u3066\n\u30bf\u30fc\u30df\u30ca\u30eb\u3067Swift\u3092\u5b9f\u884c\u3059\u308b\u74b0\u5883\u3067\u306e\u30b3\u30de\u30f3\u30c9\u4e00\u89a7\u3092\u3001\u4f55\u306e\u5f79\u306b\u7acb\u3064\u304b\u306f\u77e5\u308a\u307e\u305b\u3093\u304c\u307e\u3068\u3081\u3066\u307f\u307e\u3057\u305f\u3002\n\u81ea\u5206\u306e\u305f\u3081\u306e\u899a\u3048\u66f8\u304d\u306b\u3067\u3082\u3057\u305f\u3044\u3068\u601d\u3044\u307e\u3059\u3002\n\u7ffb\u8a33\u306f\u3001\u4f7f\u3063\u305f\u30b3\u30de\u30f3\u30c9\u304c\u51fa\u305f\u6642\u306b\u8ffd\u8a18\u3057\u3066\u3044\u304d\u305f\u3044\u6240\u5b58\u3067\u3059\u3002\n\n#\u30b3\u30de\u30f3\u30c9\u4e00\u89a7\n- **apropos** : List debugger commands related to a word or subject.\n\n- **breakpoint** : Commands for operating on breakpoints (see 'help b' forshorthand.)\n\n- **bugreport** : Commands for creating domain-specific bug reports.\n\n- **command** : Commands for managing custom LLDB commands.\n\n- **disassemble** : Disassemble specified instructions in the current target.  Defaults to the current function for the current thread and stack frame.\n\n- **expression** : Evaluate an expression on the current thread.  Displays any returned value with LLDB's default formatting.\n\n- **frame** : Commands for selecting and examing the current thread's stack frames.\n\n- **gdb-remote** : Connect to a process via remote GDB server.  If no host is specifed, localhost is assumed.\n\n- **gui** : Switch into the curses based GUI mode.\n\n- **help** : Show a list of all debugger commands, or give details about a specific command.\n\n- **kdp-remote** : Connect to a process via remote KDP server.  If no UDP port is specified, port 41139 is assumed.\n\n- **language** : Commands specific to a source language.\n\n- **log** : Commands controlling LLDB internal logging.\n\n- **memory** : Commands for operating on memory in the current target process.\n\n- **platform** : Commands to manage and create platforms.\n\n- **plugin** : Commands for managing LLDB plugins.\n\n- **process** : Commands for interacting with processes on the current platform.\n\n- **quit** : Quit the LLDB debugger.\n\n- **register** : Commands to access registers for the current thread and stack frame.\n\n- **script** : Invoke the script interpreter with provided code and display any results.  Start the interactive interpreter if no code is supplied.\n\n- **settings** : Commands for managing LLDB settings.\n\n- **source** : Commands for examining source code described by debug information for the current target process.\n\n- **target** : Commands for operating on debugger targets.\n\n- **thread** : Commands for operating on one or more threads in the current process.\n\n- **type** : Commands for operating on the type system.\n\n- **version** : Show the LLDB debugger version.\n\n- **watchpoint** : Commands for operating on watchpoints. \n\n##Current command abbreviations (type ':help command alias' for more info):\n\n- **add-dsym** : ('target symbols add')  Add a debug symbol file to one of the target's current modules by specifying a path to a debug symbols file, or using the options to specify a module to download symbols for.\n\n- **attach** : ('_regexp-attach')  Attach to process by ID or name.\n\n- **b** : ('_regexp-break')  Set a breakpoint using one of several shorthand formats.\n\n- **bt** : ('_regexp-bt')  Show the current thread's call stack.  Any numeric argument displays at most that many frames.  The argument 'all' displays all threads.\n\n- **c** : ('process continue')  Continue execution of all threads in the current process.\n\n- **call** : ('expression --')  Evaluate an expression on the current thread. Displays any returned value with LLDB's default formatting.\n\n- **continue** : ('process continue')  Continue execution of all threads in the current process.\n\n- **detach** : ('process detach')  Detach from the current target process.\n\n- **di** : ('disassemble')  Disassemble specified instructions in the current target.  Defaults to the current function for the current thread and stack frame.\n\n- **dis** : ('disassemble')  Disassemble specified instructions in the current target.  Defaults to the current function for the current thread and stack frame.\n\n- **display** : ('_regexp-display')  Evaluate an expression at every stop (see 'help target stop-hook'.)\n\n- **down** : ('_regexp-down')  Select a newer stack frame.  Defaults to moving one frame, a numeric argument can specify an arbitrary number.\n\n- **env** : ('_regexp-env')  Shorthand for viewing and setting environment variables.\n\n- **exit** : ('quit')  Quit the LLDB debugger.\n\n- **f** : ('frame select')  Select the current stack frame by index from within the current thread (see 'thread backtrace'.)\n\n- **file** : ('target create')  Create a target using the argument as the main executable.\n\n- **finish** : ('thread step-out')  Finish executing the current stack frame and stop after returning.  Defaults to current thread unless specified.\n\n- **image** : ('target modules')  Commands for accessing information for one or more target modules.\n\n- **j** : ('_regexp-jump')  Set the program counter to a new address.\n\n- **jump** : ('_regexp-jump')  Set the program counter to a new address.\n\n- **kill** : ('process kill')  Terminate the current target process.\n\n- **l** : ('_regexp-list')  List relevant source code using one of several shorthand formats.\n\n- **list** : ('_regexp-list')  List relevant source code using one of several shorthand formats.\n\n- **n** : ('thread step-over')  Source level single step, stepping over calls.  Defaults to current thread unless specified.\n\n- **next** : ('thread step-over')  Source level single step, stepping over calls.  Defaults to current thread unless specified.\n\n- **nexti** : ('thread step-inst-over')  Instruction level single step, stepping over calls.  Defaults to current thread unless specified.\n\n- **ni** : ('thread step-inst-over')  Instruction level single step, stepping over calls.  Defaults to current thread unless specified.\n\n- **p** : ('expression --')  Evaluate an expression on the current thread. Displays any returned value with LLDB's default formatting.\n\n- **parray** : ('expression -Z %1   --')  Evaluate an expression on the current thread.  Displays any returned value with LLDB's default formatting.\n\n- **po** : Evaluate an expression on the current thread.  Displays any returned value with formatting controlled by the type's author.\n\n- **poarray** : ('expression -O -Z %1    --')  Evaluate an expression on the current thread.  Displays any returned value with LLDB's default formatting.\n\n- **print** : ('expression --')  Evaluate an expression on the current thread. Displays any returned value with LLDB's default formatting.\n\n- **q** : ('quit')  Quit the LLDB debugger.\n\n- **r** : ('process launch -X true --')  Launch the executable in the debugger.\n\n- **rbreak** : ('breakpoint set -r %1')  Sets a breakpoint or set of breakpoints in the executable.\n\n- **repl** : ('expression -r  -- ')  Evaluate an expression on the current thread.  Displays any returned value with LLDB's default formatting.\n\n- **run** : ('process launch -X true --')  Launch the executable in the debugger.\n\n- **s** : ('thread step-in')  Source level single step, stepping into calls.  Defaults to current thread unless specified.\n\n- **si** : ('thread step-inst')  Instruction level single step, stepping into calls.  Defaults to current thread unless specified.\n\n- **sif** : Step through the current block, stopping if you step directly into a function whose name matches the TargetFunctionName.\n\n- **step** : ('thread step-in')  Source level single step, stepping into calls.  Defaults to current thread unless specified.\n\n- **stepi** : ('thread step-inst')  Instruction level single step, stepping into calls.  Defaults to current thread unless specified.\n\n- **t** : ('thread select')  Change the currently selected thread.\n\n- **tbreak** : ('_regexp-tbreak')  Set a one-shot breakpoint using one of several shorthand formats.\n\n- **undisplay** : ('_regexp-undisplay')  Stop displaying expression at every stop (specified by stop-hook index.)\n\n- **up** : ('_regexp-up')  Select an older stack frame.  Defaults to moving one frame, a numeric argument can specify an arbitrary number.\n\n- **x** : ('memory read')  Read from the memory of the current target process.\n\n#\u6700\u5f8c\u306b\nhelp\u30b3\u30de\u30f3\u30c9\u3067\u8868\u793a\u3055\u308c\u308b\u5185\u5bb9\u3092\u8ee2\u8a18\u3057\u305f\u3060\u3051\u3067\u3059\u304c\u3001\u3044\u3064\u304b\u5f79\u7acb\u3064\u65e5\u304c\u6765\u308b\u3053\u3068\u3092\u7948\u3063\u3066\u3002\n", "tags": ["Swift", "\u30bf\u30fc\u30df\u30ca\u30eb", "macos"]}