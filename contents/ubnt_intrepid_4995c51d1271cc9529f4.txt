{"context": "\u53c2\u8003: How can I print the type of a variable? - help - The Rust Programming Language Forum\nRust \u3067\u30b3\u30fc\u30c9\u3092\u66f8\u3044\u3066\u3044\u308b\u3068\u304d\u306b\u5909\u6570\u306e\u578b\u540d\u304c\u6b32\u3057\u3044\u3068\u601d\u3046\u3053\u3068\u304c\u591a\u3005\u3042\u308b1\uff0e\nlet hoge = foo().bar().map(|x| foobar(x)).hogehoge();  // hoge \u306e\u578b\u540d\u306f?\n\n\u3057\u304b\u3057\uff0c\u771f\u9762\u76ee\u306b\u30e1\u30bd\u30c3\u30c9\u306e\u5b9a\u7fa9\u3092\u8ffd\u3046\u306e\u306f\u975e\u73fe\u5b9f\u7684\u3067\u3042\u308b\u305f\u3081\u3067\u304d\u308c\u3070\u907f\u3051\u305f\u30442\uff0e\u672c\u8a18\u4e8b\u3067\u306f\uff0c\u3053\u306e\u3088\u3046\u306a\u5834\u5408\u306b\u5909\u6570\u306e\u578b\u540d\u3092\u53d6\u5f97\u3059\u308b\u65b9\u6cd5\u3092\u7d39\u4ecb\u3059\u308b\uff0e\n\n\u65b9\u6cd51\n\u307e\u305a\u611a\u76f4\u306a\u65b9\u6cd5\u3068\u3057\u3066\uff0c\u5909\u6570\u306b\u9069\u5f53\u306a\u578b\u3092\u4ed8\u3051\u3066\u30b3\u30f3\u30d1\u30a4\u30eb\u30a8\u30e9\u30fc\u306b\u3059\u308b\u3053\u3068\u3067\u30a8\u30e9\u30fc\u30e1\u30c3\u30bb\u30fc\u30b8\u304b\u3089\u578b\u540d\u3092\u5f97\u308b\u3053\u3068\u304c\u6319\u3052\u3089\u308c\u308b\uff0e\n\u4f8b\u3048\u3070\u3053\u3093\u306a\u611f\u3058\uff0e\nfn the_answer_of_everything() -> i32 { 42 }\n\nfn main() {\n  let _ :() = the_answer_of_everything();\n}\n\n\noutput\nerror: mismatched types [--explain E0308]\n --> <anon>:4:15\n  |>\n4 |>   let _ :() = the_answer_of_everything();\n  |>               ^^^^^^^^^^^^^^^^^^^^^^^^^^ expected (), found i32\nnote: expected type `()`\nnote:    found type `i32`\n\nerror: aborting due to previous error\n\n\n\u5e78\u3044 Rust \u306f\u30b3\u30f3\u30d1\u30a4\u30eb\u30a8\u30e9\u30fc\u30e1\u30c3\u30bb\u30fc\u30b8\u306e\u53ef\u8aad\u6027\u304c\u5341\u5206\u9ad8\u3044\u306e\u3067\uff0c\u578b\u540d\u4ee5\u5916\u306b\u3082\u6709\u7528\u306a\u60c5\u5831\u3092\u5f97\u305f\u3044\u3068\u601d\u3063\u305f\u3089\u3068\u308a\u3042\u3048\u305a\u30b3\u30f3\u30d1\u30a4\u30eb\u3057\u3066\u307f\u308b\u306e\u304c\u826f\u3044\u306e\u3067\u306f\u306a\u3044\u3060\u308d\u3046\u304b\uff0e\n\n\u65b9\u6cd52\n[\u8ffd\u8a18: 2016-11-12T16:51, @sinkuu \u3055\u3093\u60c5\u5831\u63d0\u4f9b\u3042\u308a\u304c\u3068\u3046\u3054\u3056\u3044\u307e\u3059]\n\u3082\u3046\u4e00\u3064\u306e\u65b9\u6cd5\u306f\u3001rustc \u306e\u30c7\u30d0\u30c3\u30b0\u7528\u306e\u51fa\u529b\u304b\u3089\u5f97\u3089\u308c\u308b\u89e3\u6790\u7d50\u679c\u304b\u3089\u578b\u540d\u3092\u53d6\u5f97\u3059\u308b\u65b9\u6cd5\u3067\u3042\u308b\u3002\n\ntest.rs\nfn main() {\n    let hoge = (1..30).rev().map(|x| x * x).filter(|x| x % 2 == 0);\n    let funga = hoge.collect::<Vec<_>>();\n}\n\n\n\u4f8b\u3048\u3070\u3001\u4e0a\u306e\u3088\u3046\u306a\u30bd\u30fc\u30b9\u306b\u5bfe\u3057 rustc -Z save-analysis test.rs \u3068\u5b9f\u884c\u3059\u308b\u3068 save-analysis-temp/ \u4e0b\u306b\u89e3\u6790\u7d50\u679c\u3067\u3042\u308b test.json \u304c\u751f\u6210\u3055\u308c\u308b\u3002\n\nsave-analysis-temp/test.json(\u8981\u7d04)\n$ cat save-analysis-temp/test.json | jq '.defs[] | { name: .name, value: .value, span: .span }'\n\n{\n  \"name\": \"hoge\",\n  \"value\": \"std::iter::Filter<std::iter::Map<std::iter::Rev<std::ops::Range<i32>>, [closure@test.rs:2:34: 2:43]>, [closure@test.rs:2:52: 2:66]>\",\n  \"span\": {\n    \"file_name\": \"test.rs\",\n    \"byte_start\": 20,\n    \"byte_end\": 24,\n    \"line_start\": 2,\n    \"line_end\": 2,\n    \"column_start\": 9,\n    \"column_end\": 13\n  }\n}\n{\n  \"name\": \"funga\",\n  \"value\": \"std::vec::Vec<i32>\",\n  \"span\": {\n    \"file_name\": \"test.rs\",\n    \"byte_start\": 88,\n    \"byte_end\": 93,\n    \"line_start\": 3,\n    \"line_end\": 3,\n    \"column_start\": 9,\n    \"column_end\": 14\n  }\n}\n...\n\n\n\u3042\u3068\u306f\u3053\u306e JSON \u30d5\u30a1\u30a4\u30eb\u3092\u716e\u308b\u306a\u308a\u713c\u304f\u306a\u308a\u3059\u308b\u3053\u3068\u3067\u578b\u540d\u3092\u53d6\u5f97\u3067\u304d\u308b\u3002\n\u203b\u3053\u306e\u30aa\u30d7\u30b7\u30e7\u30f3\u306f\u672c\u6765\u30b3\u30f3\u30d1\u30a4\u30e9\u306e\u30c7\u30d0\u30c3\u30b0\u7528\u306b\u7528\u610f\u3055\u308c\u3066\u3044\u308b\u3082\u306e\u3067\u3042\u308a\u3001\u5c06\u6765\u7684\u306b\u306fstable/beta\u30c1\u30e3\u30f3\u30cd\u30eb\u3067\u4f7f\u7528\u3067\u304d\u306a\u304f\u306a\u308b\u3089\u3057\u3044\u306e\u3067\u6ce8\u610f\u3055\u308c\u305f\u30443\u3002\n\n\u304a\u308f\u308a\u306b\nRust Language Server \u304c\u5b89\u5b9a\u3057\u3066\u4f7f\u3048\u308b\u3088\u3046\u306b\u306a\u308c\u3070\u3082\u3046\u5c11\u3057\u4fbf\u5229\u306b\u306a\u308b\u3068\u601d\u308f\u308c\u308b\u306e\u3067\u3001\u6c17\u9577\u306b\u5f85\u3061\u305f\u3044\u3068\u601d\u3044\u307e\u3059\u3002\n\n\u88dc\u8db3: std::any::TypeId \u306b\u3064\u3044\u3066\nstd::any \u30e2\u30b8\u30e5\u30fc\u30eb\u306e TypeId \u3092\u7528\u3044\u308b\u3053\u3068\u3067\u578b\u3054\u3068\u306b\u5272\u308a\u5f53\u3066\u3089\u3048\u305f\u8b58\u5225\u5b50\u3092\u53d6\u5f97\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u308b\u304c\uff0c\u3068\u3066\u3082\u8aad\u3081\u305f\u3082\u306e\u3067\u306f\u306a\u3044\u306e\u3067\u4e0a\u8a18\u7528\u9014\u306b\u306f\u4f7f\u7528\u3067\u304d\u306a\u3044\uff0e\nuse std::any::TypeId;\n\nfn main() {\n  println!(\"{:?}\", TypeId::of::<i32>());\n}\n\n\noutput\nTypeId { t: 10645063183773766558 }\n\n\n\u57fa\u672c\u578b\u3067\u3042\u308c\u3070 https://github.com/aldanor/typeinfo \u3092\u7528\u3044\u308b\u3053\u3068\u3067\u578b\u306e\u60c5\u5831\u3092\u5f97\u308b\u3053\u3068\u304c\u3067\u304d\u308b\u3089\u3057\u3044\uff0e\n\n\n\n\n\u7279\u306b VSCode + RustyCode \u3067\u30b3\u30fc\u30c9\u66f8\u3044\u3066\u308b\u3068\u3088\u304f\u3042\u308b\u00a0\u21a9\n\n\nimpl Trait \u3068\u304b\u5165\u3063\u3066\u304f\u308b\u3068\u306d...\u00a0\u21a9\n\n\nhttps://github.com/rust-lang/rust/issues/31847\u00a0\u21a9\n\n\n\n\u53c2\u8003: [How can I print the type of a variable? - help - The Rust Programming Language Forum](https://users.rust-lang.org/t/how-can-i-print-the-type-of-a-variable/4183)\n\n\nRust \u3067\u30b3\u30fc\u30c9\u3092\u66f8\u3044\u3066\u3044\u308b\u3068\u304d\u306b\u5909\u6570\u306e\u578b\u540d\u304c\u6b32\u3057\u3044\u3068\u601d\u3046\u3053\u3068\u304c\u591a\u3005\u3042\u308b[^1]\uff0e\n\n```rust\nlet hoge = foo().bar().map(|x| foobar(x)).hogehoge();  // hoge \u306e\u578b\u540d\u306f?\n```\n\n\u3057\u304b\u3057\uff0c\u771f\u9762\u76ee\u306b\u30e1\u30bd\u30c3\u30c9\u306e\u5b9a\u7fa9\u3092\u8ffd\u3046\u306e\u306f\u975e\u73fe\u5b9f\u7684\u3067\u3042\u308b\u305f\u3081\u3067\u304d\u308c\u3070\u907f\u3051\u305f\u3044[^2]\uff0e\u672c\u8a18\u4e8b\u3067\u306f\uff0c\u3053\u306e\u3088\u3046\u306a\u5834\u5408\u306b\u5909\u6570\u306e\u578b\u540d\u3092\u53d6\u5f97\u3059\u308b\u65b9\u6cd5\u3092\u7d39\u4ecb\u3059\u308b\uff0e\n\n## \u65b9\u6cd51\n\u307e\u305a\u611a\u76f4\u306a\u65b9\u6cd5\u3068\u3057\u3066\uff0c\u5909\u6570\u306b\u9069\u5f53\u306a\u578b\u3092\u4ed8\u3051\u3066\u30b3\u30f3\u30d1\u30a4\u30eb\u30a8\u30e9\u30fc\u306b\u3059\u308b\u3053\u3068\u3067\u30a8\u30e9\u30fc\u30e1\u30c3\u30bb\u30fc\u30b8\u304b\u3089\u578b\u540d\u3092\u5f97\u308b\u3053\u3068\u304c\u6319\u3052\u3089\u308c\u308b\uff0e\n\u4f8b\u3048\u3070\u3053\u3093\u306a\u611f\u3058\uff0e\n\n```rust\nfn the_answer_of_everything() -> i32 { 42 }\n\nfn main() {\n  let _ :() = the_answer_of_everything();\n}\n```\n\n```txt:output\nerror: mismatched types [--explain E0308]\n --> <anon>:4:15\n  |>\n4 |>   let _ :() = the_answer_of_everything();\n  |>               ^^^^^^^^^^^^^^^^^^^^^^^^^^ expected (), found i32\nnote: expected type `()`\nnote:    found type `i32`\n\nerror: aborting due to previous error\n```\n\n\u5e78\u3044 Rust \u306f\u30b3\u30f3\u30d1\u30a4\u30eb\u30a8\u30e9\u30fc\u30e1\u30c3\u30bb\u30fc\u30b8\u306e\u53ef\u8aad\u6027\u304c\u5341\u5206\u9ad8\u3044\u306e\u3067\uff0c\u578b\u540d\u4ee5\u5916\u306b\u3082\u6709\u7528\u306a\u60c5\u5831\u3092\u5f97\u305f\u3044\u3068\u601d\u3063\u305f\u3089\u3068\u308a\u3042\u3048\u305a\u30b3\u30f3\u30d1\u30a4\u30eb\u3057\u3066\u307f\u308b\u306e\u304c\u826f\u3044\u306e\u3067\u306f\u306a\u3044\u3060\u308d\u3046\u304b\uff0e\n\n[^1]: \u7279\u306b VSCode + RustyCode \u3067\u30b3\u30fc\u30c9\u66f8\u3044\u3066\u308b\u3068\u3088\u304f\u3042\u308b\n[^2]: impl Trait \u3068\u304b\u5165\u3063\u3066\u304f\u308b\u3068\u306d...\n\n## \u65b9\u6cd52\n[\u8ffd\u8a18: 2016-11-12T16:51, @sinkuu \u3055\u3093\u60c5\u5831\u63d0\u4f9b\u3042\u308a\u304c\u3068\u3046\u3054\u3056\u3044\u307e\u3059]\n\n\u3082\u3046\u4e00\u3064\u306e\u65b9\u6cd5\u306f\u3001`rustc` \u306e\u30c7\u30d0\u30c3\u30b0\u7528\u306e\u51fa\u529b\u304b\u3089\u5f97\u3089\u308c\u308b\u89e3\u6790\u7d50\u679c\u304b\u3089\u578b\u540d\u3092\u53d6\u5f97\u3059\u308b\u65b9\u6cd5\u3067\u3042\u308b\u3002\n\n```rust:test.rs\nfn main() {\n    let hoge = (1..30).rev().map(|x| x * x).filter(|x| x % 2 == 0);\n    let funga = hoge.collect::<Vec<_>>();\n}\n```\n\n\u4f8b\u3048\u3070\u3001\u4e0a\u306e\u3088\u3046\u306a\u30bd\u30fc\u30b9\u306b\u5bfe\u3057 `rustc -Z save-analysis test.rs` \u3068\u5b9f\u884c\u3059\u308b\u3068 `save-analysis-temp/` \u4e0b\u306b\u89e3\u6790\u7d50\u679c\u3067\u3042\u308b `test.json` \u304c\u751f\u6210\u3055\u308c\u308b\u3002\n\n```txt:save-analysis-temp/test.json(\u8981\u7d04)\n$ cat save-analysis-temp/test.json | jq '.defs[] | { name: .name, value: .value, span: .span }'\n\n{\n  \"name\": \"hoge\",\n  \"value\": \"std::iter::Filter<std::iter::Map<std::iter::Rev<std::ops::Range<i32>>, [closure@test.rs:2:34: 2:43]>, [closure@test.rs:2:52: 2:66]>\",\n  \"span\": {\n    \"file_name\": \"test.rs\",\n    \"byte_start\": 20,\n    \"byte_end\": 24,\n    \"line_start\": 2,\n    \"line_end\": 2,\n    \"column_start\": 9,\n    \"column_end\": 13\n  }\n}\n{\n  \"name\": \"funga\",\n  \"value\": \"std::vec::Vec<i32>\",\n  \"span\": {\n    \"file_name\": \"test.rs\",\n    \"byte_start\": 88,\n    \"byte_end\": 93,\n    \"line_start\": 3,\n    \"line_end\": 3,\n    \"column_start\": 9,\n    \"column_end\": 14\n  }\n}\n...\n```\n\n\u3042\u3068\u306f\u3053\u306e JSON \u30d5\u30a1\u30a4\u30eb\u3092\u716e\u308b\u306a\u308a\u713c\u304f\u306a\u308a\u3059\u308b\u3053\u3068\u3067\u578b\u540d\u3092\u53d6\u5f97\u3067\u304d\u308b\u3002\n\n\u203b\u3053\u306e\u30aa\u30d7\u30b7\u30e7\u30f3\u306f\u672c\u6765\u30b3\u30f3\u30d1\u30a4\u30e9\u306e\u30c7\u30d0\u30c3\u30b0\u7528\u306b\u7528\u610f\u3055\u308c\u3066\u3044\u308b\u3082\u306e\u3067\u3042\u308a\u3001\u5c06\u6765\u7684\u306b\u306f~~stable/beta\u30c1\u30e3\u30f3\u30cd\u30eb\u3067\u4f7f\u7528\u3067\u304d\u306a\u304f\u306a\u308b\u3089\u3057\u3044\u306e\u3067\u6ce8\u610f\u3055\u308c\u305f\u3044~~[^3]\u3002\n\n## \u304a\u308f\u308a\u306b\nRust Language Server \u304c\u5b89\u5b9a\u3057\u3066\u4f7f\u3048\u308b\u3088\u3046\u306b\u306a\u308c\u3070\u3082\u3046\u5c11\u3057\u4fbf\u5229\u306b\u306a\u308b\u3068\u601d\u308f\u308c\u308b\u306e\u3067\u3001\u6c17\u9577\u306b\u5f85\u3061\u305f\u3044\u3068\u601d\u3044\u307e\u3059\u3002\n\n[^3]: https://github.com/rust-lang/rust/issues/31847\n\n## \u88dc\u8db3: `std::any::TypeId` \u306b\u3064\u3044\u3066\n`std::any` \u30e2\u30b8\u30e5\u30fc\u30eb\u306e `TypeId` \u3092\u7528\u3044\u308b\u3053\u3068\u3067\u578b\u3054\u3068\u306b\u5272\u308a\u5f53\u3066\u3089\u3048\u305f\u8b58\u5225\u5b50\u3092\u53d6\u5f97\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u308b\u304c\uff0c~~\u3068\u3066\u3082\u8aad\u3081\u305f\u3082\u306e\u3067\u306f\u306a\u3044\u306e\u3067~~\u4e0a\u8a18\u7528\u9014\u306b\u306f\u4f7f\u7528\u3067\u304d\u306a\u3044\uff0e\n\n```rust\nuse std::any::TypeId;\n\nfn main() {\n  println!(\"{:?}\", TypeId::of::<i32>());\n}\n```\n\n```txt:output\nTypeId { t: 10645063183773766558 }\n```\n\n\u57fa\u672c\u578b\u3067\u3042\u308c\u3070 https://github.com/aldanor/typeinfo \u3092\u7528\u3044\u308b\u3053\u3068\u3067\u578b\u306e\u60c5\u5831\u3092\u5f97\u308b\u3053\u3068\u304c\u3067\u304d\u308b\u3089\u3057\u3044\uff0e\n", "tags": ["rust"]}