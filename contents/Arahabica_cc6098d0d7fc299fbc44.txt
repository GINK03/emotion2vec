{"tags": ["RubyOnRails", "PayPal"], "context": "Paypal\u3067\u6c7a\u6e08\u304c\u5b8c\u4e86\u3057\u305f\u3068\u304d\u306b\u3001Paypal\u304b\u3089IPN(Instant Payment Notification)\u3092\u53d7\u4fe1\u3057\u3001Rails\u3067\u9069\u5207\u306b\u51e6\u7406\u3059\u308b\u65b9\u6cd5\u3092\u307e\u3068\u3081\u307e\u3057\u305f\u3002\n\nPaypal\u304b\u3089\u30b3\u30fc\u30eb\u3055\u308c\u308b\u30c7\u30fc\u30bf\u3092UTF-8\u306b\u7d71\u4e00\n\u3053\u308c\u3092\u3057\u3066\u304a\u304b\u306a\u3044\u3068\u8b0e\u306e\u30a8\u30e9\u30fc\u306b\u82e6\u3057\u3081\u3089\u308c\u308b\u306e\u3067\u3001\u521d\u3081\u306b\u8a2d\u5b9a\u3057\u3066\u304a\u304d\u307e\u3059\u3002\n\u30c7\u30d5\u30a9\u30eb\u30c8\u3067\u306fShift-JIS\u3067\u30b3\u30fc\u30eb\u3055\u308c\u307e\u3059\u3002\n\n\u300c\u30de\u30a4\u30a2\u30ab\u30a6\u30f3\u30c8\u300d\u2192\u300c\u30d7\u30ed\u30d5\u30a1\u30a4\u30eb\u8a2d\u5b9a\u300d\u2192\u300c\u8a00\u8a9e\u306e\u30a8\u30f3\u30b3\u30fc\u30c9\u300d\u2192\u300c\u8a73\u7d30\u30aa\u30d7\u30b7\u30e7\u30f3\u300d\n\u300c\u30a8\u30f3\u30b3\u30fc\u30c9\u65b9\u5f0f\u300d\u3092UTF-8\u306b\n\u300cPayPal\u304b\u3089\u9001\u4fe1\u3055\u308c\u305f\u30c7\u30fc\u30bf\u3068\u540c\u3058\u30a8\u30f3\u30b3\u30fc\u30c9\u65b9\u5f0f\u3092\u4f7f\u7528\u3057\u307e\u3059\u304b?\u300d\u3092UTF-8\u306b\n\n\u53c2\u8003) http://blog.katsuma.tv/2007/06/paypal_pdt_ipn_code.html\n\nPaypal\u30dc\u30bf\u30f3\u306b\u5404\u7a2eURL\u3092\u8a2d\u5b9a\nPaypal\u306b\u30dd\u30b9\u30c8\u3059\u308bhidden\u30bf\u30b0\u306b\u5404\u7a2eURL\u3092\u8ffd\u52a0\u3002\n\nnotify_url\u3000IPN\u306e\u901a\u77e5\u5148URL\nreturn \u30e6\u30fc\u30b6\u304c\u8cfc\u5165\u51e6\u7406\u5f8c\u306b\u623b\u3063\u3066\u304f\u308bURL\ncancel_return \u30e6\u30fc\u30b6\u304c\u8cfc\u5165\u3092\u30ad\u30e3\u30f3\u30bb\u30eb\u3057\u305f\u3068\u304d\u306b\u623b\u3063\u3066\u304f\u308bURL\n\n\nexample_form.html.erb\n<% base_url =request.protocol + request.host_with_port %>\n<% is_sandbox = true # \u672c\u756a\u74b0\u5883\u306e\u5834\u5408\u306ffalse %>\n<% if is_sandbox %>\n  <% paypal_url = \"https://www.sandbox.paypal.com/cgi-bin/webscr\" %>\n<% else %>\n  <% paypal_url = \"https://www.paypal.com/cgi-bin/webscr\" %>\n<% end %>\n<form action=\"<%= paypal_url %>\" method=\"post\" target=\"_top\">\n  <%= hidden_field_tag 'notify_url', \"#{base_url}/paypal/ipn\" %>\n  <%= hidden_field_tag 'return', \"#{base_url}/paypal/success\" %>\n  <%= hidden_field_tag 'cancel_return', \"#{base_url}/paypal/cancel\" %>\n  <%= hidden_field_tag 'cmd', \"_s-xclick\" %>\n  <%= hidden_field_tag 'hosted_button_id', YOUR_BUTTON_ID %>\n  <input type=\"submit\" value=\"\u8cfc\u5165\" />\n</form>\n\n\n\nroutes.rb\n\nRAILS_ROOT/config/routes.rb\n  post '/paypal/purchase' => 'my_paypal#ipn'\n  post '/paypal/success' => 'my_paypal#success'\n  get '/paypal/success' => 'my_paypal#success'\n  post '/paypal/cancel' => 'my_paypal#cancel'\n  get '/paypal/cancel' => 'my_paypal#cancel'\n\n\n\nController\nPaypal\u95a2\u9023\u306e\u51e6\u7406\u306e\u307f\u306b\u7d5e\u3063\u305fPaypalController\u3092\u4f5c\u6210\u3057\u3001\u305d\u308c\u3092\u7d99\u627f\u3057\u305fMyPaypalController\u3067\u30a2\u30d7\u30ea\u306b\u5fdc\u3058\u305f\u51e6\u7406\u3092\u8a18\u8ff0\u3059\u308b\u3002\n\u3053\u3046\u3059\u308b\u3053\u3068\u3067\u3001PaypalController\u306f\u4f7f\u3044\u307e\u308f\u3059\u3053\u3068\u304c\u3067\u304d\u3001\u7d99\u627f\u3057\u305f\u30b3\u30f3\u30c8\u30ed\u30fc\u30e9\u3067\u306f\u30a2\u30d7\u30ea\u306b\u5fdc\u3058\u305f\u51e6\u7406\u3092\u96c6\u4e2d\u7684\u306b\u8a18\u8ff0\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\nPaypalController\u306e\u51e6\u7406\nPaypal\u306e\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u306b\u5f93\u3044\u3001IPN\u3092\u9069\u5207\u306b\u51e6\u7406\u3059\u308b\u3002\n\nIPN\u3092\u53d7\u3051\u4ed8\u3051\u308b\nIPN\u306e\u30b9\u30c6\u30fc\u30bf\u30b9\u306b\u5fdc\u3058\u305f\u51e6\u7406\u3092\u884c\u3046\nIPN\u304cPaypal\u304b\u3089\u9001\u4fe1\u3055\u308c\u305f\u3082\u306e\u304b\u3092\u30c1\u30a7\u30c3\u30af\u3059\u308b\n\u540c\u3058\u8cfc\u5165ID\u306e\u51e6\u7406\u304c\u91cd\u8907\u3057\u3066\u3044\u306a\u3044\u304b\u3092\u30c1\u30a7\u30c3\u30af\u3059\u308b\n\u53d7\u53d6\u4eba\u306e\u30e1\u30fc\u30eb\u30a2\u30c9\u30ec\u30b9\u304c\u4e8b\u696d\u8005\u306ePayPal\u30a2\u30ab\u30a6\u30f3\u30c8\u3068\u4e00\u81f4\u3059\u308b\u304b\u3092\u30c1\u30a7\u30c3\u30af\u3059\u308b\n\u5546\u54c1\u306e\u60c5\u5831\u304c\u6b63\u3057\u3044\u304b\u3092\u30c1\u30a7\u30c3\u30af\u3059\u308b\n\n\u305f\u3060\u3057\u3001\u5177\u4f53\u7684\u306a\u51e6\u7406\u306f\u9069\u5b9c\u3001\u7d99\u627f\u5148\u306e\u30e1\u30bd\u30c3\u30c9\u306b\u59d4\u306d\u3066\u3044\u308b\u3002\n\u53c2\u8003) http://stackoverflow.com/questions/14316426/is-there-a-paypal-ipn-code-sample-for-ruby-on-rails\n\nRAILS_ROOT/app/controllers/paypal_controller.rb\nclass PaypalController < ApplicationController\n  # Paypal\u306e\u30b5\u30fc\u30d0\u304b\u3089\u306eIPN\u306e\u9001\u4fe1\u3092\u53d7\u3051\u4ed8\u3051\u308b\u305f\u3081\u3001CSRF\u5bfe\u7b56\u3092\u7121\u52b9\u306b\u3059\u308b\n  protect_from_forgery with: :null_session\n\n  # ipn\u306e\u9001\u4fe1\u3092\u53d7\u3051\u4ed8\u3051\u308b\u30e1\u30bd\u30c3\u30c9\n  def ipn\n    is_sandbox = params[:test_ipn] ? true : false\n    logger.info ({is_sandbox: is_sandbox}) if ipn_log_level > 0\n    if skip_validate?\n      response = \"VERIFIED\"\n    else\n      response = validate_ipn_notification(request.raw_post, is_sandbox)\n    end\n    case response\n      when \"VERIFIED\"\n        status = params[:payment_status]\n        if status == \"Completed\"\n          if ipn_overlap?(params, is_sandbox)\n            ipn_overlap(params, is_sandbox)\n          else\n            ipn_completed(params, is_sandbox)\n          end\n        elsif status == \"Pending\"\n          ipn_pending(params, is_sandbox)\n        elsif status == \"Failed\"\n          ipn_failed(params, is_sandbox)\n        end\n        if ipn_log_level == 1 && status == \"Completed\"\n          logger.info ({status: status})\n        elsif ipn_log_level > 0\n          logger.info ({status: status, params: params})\n        end\n      when \"INVALID\"\n        logger.info ({status: 'invalid', params: params}) if ipn_log_level > 0\n        ipn_invalid(params, is_sandbox)\n      else\n        logger.info ({status: 'validate_error', params: params }) if ipn_log_level > 0\n        ipn_validate_error(params, is_sandbox)\n    end\n    render :nothing => true, status: :ok # paypal\u306b200(OK)\u3092\u8fd4\u3059\u3002\n  rescue => e\n    logger.info(e) if ipn_log_level == 1\n    logger.info({ message: e.to_s, backtrace: e.backtrace }) if ipn_log_level == 2\n    render json: {message: e.to_s}, status: :internal_server_error\n  end\n  protected\n  # \u8cfc\u5165\u304c\u6b63\u5e38\u306b\u5b8c\u4e86\u3057\u305f\u6642\u306e\u51e6\u7406\n  # \u30aa\u30fc\u30d0\u30fc\u30e9\u30a4\u30c9\u3092\u5f37\u5236\n  def ipn_completed(params, is_sandbox)\n    # override this\n    raise NotImplementedError, \"You must implement #{self.class}##{__method__}\"\n  end\n\n  # \u8cfc\u5165\u304c\u91cd\u8907\u3057\u305f\u5834\u5408\u306e\u51e6\u7406\n  def ipn_overlap(params, is_sandbox)\n    # override this\n  end\n\n  # \u8cfc\u5165\u304cPending(\u672a\u6c7a\u6e08)\u306e\u5834\u5408\u306e\u51e6\u7406\n  def ipn_pending(params, is_sandbox)\n    # override this\n  end\n\n  # \u8cfc\u5165\u304cFailed(\u5931\u6557)\u306e\u5834\u5408\u306e\u51e6\u7406\n  def ipn_failed(params, is_sandbox)\n    # override this\n  end\n  # \u8cfc\u5165\u304c\u4e0d\u6b63\u306e\u5834\u5408\u306e\u51e6\u7406\n  def ipn_invalid(params, is_sandbox)\n    # override this\n  end\n  # \u901a\u77e5\u306e\u78ba\u8a8d\u81ea\u4f53\u304c\u5931\u6557\u3057\u305f\u6642\u306e\u51e6\u7406\n  def ipn_validate_error(params, is_sandbox)\n    # override this\n  end\n\n  # \u5224\u5b9a\u95a2\u4fc2\n  # \u540c\u3058\u8cfc\u5165ID\u306e\u51e6\u7406\u304c\u91cd\u8907\u3057\u3066\u3044\u308b\u304b\u306e\u5224\u5b9a\n  def ipn_overlap?(params, is_sandbox)\n    # params[:txn_id] \u306e\u6bd4\u8f03\n    # override this\n    false\n  end\n  # receiver_email\u304c\u4e8b\u696d\u8005\u306ePayPal\u30a2\u30ab\u30a6\u30f3\u30c8\u3068\u4e00\u81f4\u3059\u308b\u304b\u3092\u5224\u5b9a\n  def ipn_receiver_email_correct?(email, is_sandbox)\n    # override this\n    true\n  end\n  # \u5546\u54c1\u306e\u60c5\u5831\u306b\u8aa4\u308a\u304c\u306a\u3044\u304b\u3092\u78ba\u8a8d\n  def ipn_item_correct?(params, is_sandbox)\n    # override this\n    true\n  end\n  # \u30ed\u30b0\u306e\u8a18\u9332\n  # 0: \u8a18\u9332\u3057\u306a\u3044\n  # 1: \u4e0d\u6b63\u306a\u30a2\u30af\u30bb\u30b9\u306f\u8a18\u9332\n  # 2: \u8a18\u9332\n  def ipn_log_level\n    2\n  end\n  # \u901a\u77e5\u306e\u78ba\u8a8d\u3092\u30b9\u30ad\u30c3\u30d7\u3059\u308b\u304b(\u30c6\u30b9\u30c8\u7528)\n  # true\u306b\u3057\u305f\u5834\u5408\u3001Paypal\u304b\u3089\u306eIPN\u3092\u507d\u88c5\u3057\u305f\u30a2\u30af\u30bb\u30b9\u304c\u53ef\u80fd\u306b\u306a\u308b\u3002\n  # \u672c\u756a\u74b0\u5883\u3067\u306f\u5fc5\u305afalse\n  def skip_validate?\n    false\n  end\n\n  private\n  # \u53d7\u4fe1\u3057\u305fIPN\u304c\u672c\u5f53\u306bPaypal\u304b\u3089\u9001\u4fe1\u3055\u308c\u305f\u3082\u306e\u304b\u3092\u78ba\u8a8d\u3059\u308b\u3002\n  def validate_ipn_notification(raw, is_sandbox = false)\n    uri = URI.parse(\"https://www.#{is_sandbox ? 'sandbox.' : ''}paypal.com/cgi-bin/webscr?cmd=_notify-validate\")\n    http = Net::HTTP.new(uri.host, uri.port)\n    http.open_timeout = 60\n    http.read_timeout = 60\n    http.verify_mode = OpenSSL::SSL::VERIFY_NONE\n    http.use_ssl = true\n    response = http.post(uri.request_uri, raw,\n                         'Content-Length' => \"#{raw.size}\",\n                         'User-Agent' => \"My custom user agent\"\n    ).body\n  end\nend\n\n\n\nMyPaypalController\u306e\u51e6\u7406\nPaypalController\u306e\u30e1\u30bd\u30c3\u30c9\u3092\u30aa\u30fc\u30d0\u30fc\u30e9\u30a4\u30c9\u3057\u3001\u5404\u7a2e\u306e\u5177\u4f53\u7684\u51e6\u7406\u3092\u884c\u3046\u3002\n\u4e0b\u8a18\u306e\u30e1\u30bd\u30c3\u30c9\u5185\u306e\u51e6\u7406\u306f\u3042\u304f\u307e\u3067\u3082\u4e00\u4f8b\u3067\u3042\u308b\u3002\n\nRAILS_ROOT/app/controllers/my_paypal_controller.rb\nclass MyPaypalController < PaypalController\n  def success\n    flash[:success] = '\u8cfc\u5165\u304c\u51e6\u7406\u3055\u308c\u307e\u3057\u305f\u3002'\n    redirect_to '/hoge'\n  end\n  def cancel\n    flash[:danger] = '\u8cfc\u5165\u304c\u30ad\u30e3\u30f3\u30bb\u30eb\u3055\u308c\u307e\u3057\u305f\u3002'\n    redirect_to '/hoge/cancel'\n  end\n  protected\n  # \u8cfc\u5165\u304c\u6b63\u5e38\u306b\u5b8c\u4e86\u3057\u305f\u6642\u306e\u51e6\u7406\n  def ipn_completed(params, is_sandbox)\n    status = params[:payment_status]\n    email = params[:payer_email]\n    price = params[:mc_gross].to_i\n    btn_id = params[:btn_id]\n    txn_id = params[:txn_id]\n    item_number = params[:item_number]\n    item_name = params[:item_name]\n    # \u30d1\u30e9\u30e1\u30fc\u30bf\u306b\u57fa\u3065\u3044\u3066DB\u306b\u60c5\u5831\u3092\u767b\u9332\u3059\u308b\u306a\u3069\u306e\u51e6\u7406\n  end\n\n  def ipn_overlap(params, is_sandbox)\n    # \u8cfc\u5165\u304c\u91cd\u8907\u3057\u305f\u5834\u5408\u306e\u51e6\u7406\n  end\n\n  def ipn_pending(params, is_sandbox)\n    # \u8cfc\u5165\u304cPending(\u672a\u6c7a\u6e08)\u306e\u5834\u5408\u306e\u51e6\u7406\n  end\n\n  def ipn_failed(params, is_sandbox)\n    # \u8cfc\u5165\u304cFailed(\u5931\u6557)\u306e\u5834\u5408\u306e\u51e6\u7406\n  end\n\n  def ipn_invalid(params, is_sandbox)\n    # \u8cfc\u5165\u304c\u4e0d\u6b63\u306e\u5834\u5408\u306e\u51e6\u7406\n  end\n\n  def ipn_validate_error(params, is_sandbox)\n    # \u901a\u77e5\u306e\u78ba\u8a8d\u81ea\u4f53\u304c\u5931\u6557\u3057\u305f\u6642\u306e\u51e6\u7406\n  end\n\n  # \u5224\u5b9a\u95a2\u4fc2\n  # \u540c\u3058\u8cfc\u5165ID\u306e\u51e6\u7406\u304c\u91cd\u8907\u3057\u3066\u3044\u308b\u304b\u306e\u5224\u5b9a\n  def ipn_overlap?(params, is_sandbox)\n    txn_id = params[:txn_id]\n    YourModel.find_by_txn_id(txn_id)\n  end\n\n  # receiver_email\u304c\u4e8b\u696d\u8005\u306ePayPal\u30a2\u30ab\u30a6\u30f3\u30c8\u3068\u4e00\u81f4\u3059\u308b\u304b\u3092\u5224\u5b9a\n  def ipn_receiver_email_correct?(email, is_sandbox)\n    email == ENV['PAYPAL_EMAIL']\n  end\n\n  # \u5546\u54c1\u306e\u60c5\u5831\u306b\u8aa4\u308a\u304c\u306a\u3044\u304b\u3092\u78ba\u8a8d\n  def ipn_item_correct?(params, is_sandbox)\n    item_number = params[:item_number]\n    price = params[:mc_gross].to_i\n    btn_id = params[:btn_id]\n\n    item = ItemModel.find__by_item_number(item_number)\n    unless item\n      return false\n    end\n    (item.price == price && item.btn_id == btn_id)\n  end\n\n  # \u30ed\u30b0\u306e\u8a18\u9332\n  # 0: \u8a18\u9332\u3057\u306a\u3044\n  # 1: \u4e0d\u6b63\u306a\u30a2\u30af\u30bb\u30b9\u306f\u8a18\u9332\n  # 2: \u8a18\u9332\n  def ipn_log_level\n    2\n  end\n\n  # \u901a\u77e5\u306e\u78ba\u8a8d\u3092\u30b9\u30ad\u30c3\u30d7\u3059\u308b\u304b(\u30c6\u30b9\u30c8\u7528)\n  def skip_validate?\n    false\n  end\nend\n\n\n\nPaypal\u3067\u6c7a\u6e08\u304c\u5b8c\u4e86\u3057\u305f\u3068\u304d\u306b\u3001Paypal\u304b\u3089IPN(Instant Payment Notification)\u3092\u53d7\u4fe1\u3057\u3001Rails\u3067\u9069\u5207\u306b\u51e6\u7406\u3059\u308b\u65b9\u6cd5\u3092\u307e\u3068\u3081\u307e\u3057\u305f\u3002\n\n# Paypal\u304b\u3089\u30b3\u30fc\u30eb\u3055\u308c\u308b\u30c7\u30fc\u30bf\u3092UTF-8\u306b\u7d71\u4e00\n\n\u3053\u308c\u3092\u3057\u3066\u304a\u304b\u306a\u3044\u3068\u8b0e\u306e\u30a8\u30e9\u30fc\u306b\u82e6\u3057\u3081\u3089\u308c\u308b\u306e\u3067\u3001\u521d\u3081\u306b\u8a2d\u5b9a\u3057\u3066\u304a\u304d\u307e\u3059\u3002\n\u30c7\u30d5\u30a9\u30eb\u30c8\u3067\u306fShift-JIS\u3067\u30b3\u30fc\u30eb\u3055\u308c\u307e\u3059\u3002\n\n* \u300c\u30de\u30a4\u30a2\u30ab\u30a6\u30f3\u30c8\u300d\u2192\u300c\u30d7\u30ed\u30d5\u30a1\u30a4\u30eb\u8a2d\u5b9a\u300d\u2192\u300c\u8a00\u8a9e\u306e\u30a8\u30f3\u30b3\u30fc\u30c9\u300d\u2192\u300c\u8a73\u7d30\u30aa\u30d7\u30b7\u30e7\u30f3\u300d\n* \u300c\u30a8\u30f3\u30b3\u30fc\u30c9\u65b9\u5f0f\u300d\u3092UTF-8\u306b\n* \u300cPayPal\u304b\u3089\u9001\u4fe1\u3055\u308c\u305f\u30c7\u30fc\u30bf\u3068\u540c\u3058\u30a8\u30f3\u30b3\u30fc\u30c9\u65b9\u5f0f\u3092\u4f7f\u7528\u3057\u307e\u3059\u304b?\u300d\u3092UTF-8\u306b\n\n\u53c2\u8003) http://blog.katsuma.tv/2007/06/paypal_pdt_ipn_code.html\n\n# Paypal\u30dc\u30bf\u30f3\u306b\u5404\u7a2eURL\u3092\u8a2d\u5b9a\n\nPaypal\u306b\u30dd\u30b9\u30c8\u3059\u308bhidden\u30bf\u30b0\u306b\u5404\u7a2eURL\u3092\u8ffd\u52a0\u3002\n\n* notify_url\u3000IPN\u306e\u901a\u77e5\u5148URL\n* return \u30e6\u30fc\u30b6\u304c\u8cfc\u5165\u51e6\u7406\u5f8c\u306b\u623b\u3063\u3066\u304f\u308bURL\n* cancel_return \u30e6\u30fc\u30b6\u304c\u8cfc\u5165\u3092\u30ad\u30e3\u30f3\u30bb\u30eb\u3057\u305f\u3068\u304d\u306b\u623b\u3063\u3066\u304f\u308bURL\n\n```erb:example_form.html.erb\n<% base_url =request.protocol + request.host_with_port %>\n<% is_sandbox = true # \u672c\u756a\u74b0\u5883\u306e\u5834\u5408\u306ffalse %>\n<% if is_sandbox %>\n  <% paypal_url = \"https://www.sandbox.paypal.com/cgi-bin/webscr\" %>\n<% else %>\n  <% paypal_url = \"https://www.paypal.com/cgi-bin/webscr\" %>\n<% end %>\n<form action=\"<%= paypal_url %>\" method=\"post\" target=\"_top\">\n  <%= hidden_field_tag 'notify_url', \"#{base_url}/paypal/ipn\" %>\n  <%= hidden_field_tag 'return', \"#{base_url}/paypal/success\" %>\n  <%= hidden_field_tag 'cancel_return', \"#{base_url}/paypal/cancel\" %>\n  <%= hidden_field_tag 'cmd', \"_s-xclick\" %>\n  <%= hidden_field_tag 'hosted_button_id', YOUR_BUTTON_ID %>\n  <input type=\"submit\" value=\"\u8cfc\u5165\" />\n</form>\n```\n\n# routes.rb\n\n```rb:RAILS_ROOT/config/routes.rb\n  post '/paypal/purchase' => 'my_paypal#ipn'\n  post '/paypal/success' => 'my_paypal#success'\n  get '/paypal/success' => 'my_paypal#success'\n  post '/paypal/cancel' => 'my_paypal#cancel'\n  get '/paypal/cancel' => 'my_paypal#cancel'\n```\n\n# Controller\n\nPaypal\u95a2\u9023\u306e\u51e6\u7406\u306e\u307f\u306b\u7d5e\u3063\u305fPaypalController\u3092\u4f5c\u6210\u3057\u3001\u305d\u308c\u3092\u7d99\u627f\u3057\u305fMyPaypalController\u3067\u30a2\u30d7\u30ea\u306b\u5fdc\u3058\u305f\u51e6\u7406\u3092\u8a18\u8ff0\u3059\u308b\u3002\n\n\u3053\u3046\u3059\u308b\u3053\u3068\u3067\u3001PaypalController\u306f\u4f7f\u3044\u307e\u308f\u3059\u3053\u3068\u304c\u3067\u304d\u3001\u7d99\u627f\u3057\u305f\u30b3\u30f3\u30c8\u30ed\u30fc\u30e9\u3067\u306f\u30a2\u30d7\u30ea\u306b\u5fdc\u3058\u305f\u51e6\u7406\u3092\u96c6\u4e2d\u7684\u306b\u8a18\u8ff0\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\n## PaypalController\u306e\u51e6\u7406\n[Paypal\u306e\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8](https://developer.paypal.com/docs/classic/ipn/ht_ipn/)\u306b\u5f93\u3044\u3001IPN\u3092\u9069\u5207\u306b\u51e6\u7406\u3059\u308b\u3002\n\n* IPN\u3092\u53d7\u3051\u4ed8\u3051\u308b\n* IPN\u306e\u30b9\u30c6\u30fc\u30bf\u30b9\u306b\u5fdc\u3058\u305f\u51e6\u7406\u3092\u884c\u3046\n* IPN\u304cPaypal\u304b\u3089\u9001\u4fe1\u3055\u308c\u305f\u3082\u306e\u304b\u3092\u30c1\u30a7\u30c3\u30af\u3059\u308b\n* \u540c\u3058\u8cfc\u5165ID\u306e\u51e6\u7406\u304c\u91cd\u8907\u3057\u3066\u3044\u306a\u3044\u304b\u3092\u30c1\u30a7\u30c3\u30af\u3059\u308b\n* \u53d7\u53d6\u4eba\u306e\u30e1\u30fc\u30eb\u30a2\u30c9\u30ec\u30b9\u304c\u4e8b\u696d\u8005\u306ePayPal\u30a2\u30ab\u30a6\u30f3\u30c8\u3068\u4e00\u81f4\u3059\u308b\u304b\u3092\u30c1\u30a7\u30c3\u30af\u3059\u308b\n* \u5546\u54c1\u306e\u60c5\u5831\u304c\u6b63\u3057\u3044\u304b\u3092\u30c1\u30a7\u30c3\u30af\u3059\u308b\n\n\u305f\u3060\u3057\u3001\u5177\u4f53\u7684\u306a\u51e6\u7406\u306f\u9069\u5b9c\u3001\u7d99\u627f\u5148\u306e\u30e1\u30bd\u30c3\u30c9\u306b\u59d4\u306d\u3066\u3044\u308b\u3002\n\n\u53c2\u8003) http://stackoverflow.com/questions/14316426/is-there-a-paypal-ipn-code-sample-for-ruby-on-rails\n\n```rb:RAILS_ROOT/app/controllers/paypal_controller.rb\nclass PaypalController < ApplicationController\n  # Paypal\u306e\u30b5\u30fc\u30d0\u304b\u3089\u306eIPN\u306e\u9001\u4fe1\u3092\u53d7\u3051\u4ed8\u3051\u308b\u305f\u3081\u3001CSRF\u5bfe\u7b56\u3092\u7121\u52b9\u306b\u3059\u308b\n  protect_from_forgery with: :null_session\n\n  # ipn\u306e\u9001\u4fe1\u3092\u53d7\u3051\u4ed8\u3051\u308b\u30e1\u30bd\u30c3\u30c9\n  def ipn\n    is_sandbox = params[:test_ipn] ? true : false\n    logger.info ({is_sandbox: is_sandbox}) if ipn_log_level > 0\n    if skip_validate?\n      response = \"VERIFIED\"\n    else\n      response = validate_ipn_notification(request.raw_post, is_sandbox)\n    end\n    case response\n      when \"VERIFIED\"\n        status = params[:payment_status]\n        if status == \"Completed\"\n          if ipn_overlap?(params, is_sandbox)\n            ipn_overlap(params, is_sandbox)\n          else\n            ipn_completed(params, is_sandbox)\n          end\n        elsif status == \"Pending\"\n          ipn_pending(params, is_sandbox)\n        elsif status == \"Failed\"\n          ipn_failed(params, is_sandbox)\n        end\n        if ipn_log_level == 1 && status == \"Completed\"\n          logger.info ({status: status})\n        elsif ipn_log_level > 0\n          logger.info ({status: status, params: params})\n        end\n      when \"INVALID\"\n        logger.info ({status: 'invalid', params: params}) if ipn_log_level > 0\n        ipn_invalid(params, is_sandbox)\n      else\n        logger.info ({status: 'validate_error', params: params }) if ipn_log_level > 0\n        ipn_validate_error(params, is_sandbox)\n    end\n    render :nothing => true, status: :ok # paypal\u306b200(OK)\u3092\u8fd4\u3059\u3002\n  rescue => e\n    logger.info(e) if ipn_log_level == 1\n    logger.info({ message: e.to_s, backtrace: e.backtrace }) if\tipn_log_level == 2\n    render json: {message: e.to_s}, status: :internal_server_error\n  end\n  protected\n  # \u8cfc\u5165\u304c\u6b63\u5e38\u306b\u5b8c\u4e86\u3057\u305f\u6642\u306e\u51e6\u7406\n  # \u30aa\u30fc\u30d0\u30fc\u30e9\u30a4\u30c9\u3092\u5f37\u5236\n  def ipn_completed(params, is_sandbox)\n    # override this\n    raise NotImplementedError, \"You must implement #{self.class}##{__method__}\"\n  end\n\n  # \u8cfc\u5165\u304c\u91cd\u8907\u3057\u305f\u5834\u5408\u306e\u51e6\u7406\n  def ipn_overlap(params, is_sandbox)\n    # override this\n  end\n\n  # \u8cfc\u5165\u304cPending(\u672a\u6c7a\u6e08)\u306e\u5834\u5408\u306e\u51e6\u7406\n  def ipn_pending(params, is_sandbox)\n    # override this\n  end\n\n  # \u8cfc\u5165\u304cFailed(\u5931\u6557)\u306e\u5834\u5408\u306e\u51e6\u7406\n  def ipn_failed(params, is_sandbox)\n    # override this\n  end\n  # \u8cfc\u5165\u304c\u4e0d\u6b63\u306e\u5834\u5408\u306e\u51e6\u7406\n  def ipn_invalid(params, is_sandbox)\n    # override this\n  end\n  # \u901a\u77e5\u306e\u78ba\u8a8d\u81ea\u4f53\u304c\u5931\u6557\u3057\u305f\u6642\u306e\u51e6\u7406\n  def ipn_validate_error(params, is_sandbox)\n    # override this\n  end\n\n  # \u5224\u5b9a\u95a2\u4fc2\n  # \u540c\u3058\u8cfc\u5165ID\u306e\u51e6\u7406\u304c\u91cd\u8907\u3057\u3066\u3044\u308b\u304b\u306e\u5224\u5b9a\n  def ipn_overlap?(params, is_sandbox)\n    # params[:txn_id] \u306e\u6bd4\u8f03\n    # override this\n    false\n  end\n  # receiver_email\u304c\u4e8b\u696d\u8005\u306ePayPal\u30a2\u30ab\u30a6\u30f3\u30c8\u3068\u4e00\u81f4\u3059\u308b\u304b\u3092\u5224\u5b9a\n  def ipn_receiver_email_correct?(email, is_sandbox)\n    # override this\n    true\n  end\n  # \u5546\u54c1\u306e\u60c5\u5831\u306b\u8aa4\u308a\u304c\u306a\u3044\u304b\u3092\u78ba\u8a8d\n  def ipn_item_correct?(params, is_sandbox)\n    # override this\n    true\n  end\n  # \u30ed\u30b0\u306e\u8a18\u9332\n  # 0: \u8a18\u9332\u3057\u306a\u3044\n  # 1: \u4e0d\u6b63\u306a\u30a2\u30af\u30bb\u30b9\u306f\u8a18\u9332\n  # 2: \u8a18\u9332\n  def ipn_log_level\n    2\n  end\n  # \u901a\u77e5\u306e\u78ba\u8a8d\u3092\u30b9\u30ad\u30c3\u30d7\u3059\u308b\u304b(\u30c6\u30b9\u30c8\u7528)\n  # true\u306b\u3057\u305f\u5834\u5408\u3001Paypal\u304b\u3089\u306eIPN\u3092\u507d\u88c5\u3057\u305f\u30a2\u30af\u30bb\u30b9\u304c\u53ef\u80fd\u306b\u306a\u308b\u3002\n  # \u672c\u756a\u74b0\u5883\u3067\u306f\u5fc5\u305afalse\n  def skip_validate?\n    false\n  end\n\n  private\n  # \u53d7\u4fe1\u3057\u305fIPN\u304c\u672c\u5f53\u306bPaypal\u304b\u3089\u9001\u4fe1\u3055\u308c\u305f\u3082\u306e\u304b\u3092\u78ba\u8a8d\u3059\u308b\u3002\n  def validate_ipn_notification(raw, is_sandbox = false)\n    uri = URI.parse(\"https://www.#{is_sandbox ? 'sandbox.' : ''}paypal.com/cgi-bin/webscr?cmd=_notify-validate\")\n    http = Net::HTTP.new(uri.host, uri.port)\n    http.open_timeout = 60\n    http.read_timeout = 60\n    http.verify_mode = OpenSSL::SSL::VERIFY_NONE\n    http.use_ssl = true\n    response = http.post(uri.request_uri, raw,\n                         'Content-Length' => \"#{raw.size}\",\n                         'User-Agent' => \"My custom user agent\"\n    ).body\n  end\nend\n```\n\n## MyPaypalController\u306e\u51e6\u7406\n\nPaypalController\u306e\u30e1\u30bd\u30c3\u30c9\u3092\u30aa\u30fc\u30d0\u30fc\u30e9\u30a4\u30c9\u3057\u3001\u5404\u7a2e\u306e\u5177\u4f53\u7684\u51e6\u7406\u3092\u884c\u3046\u3002\n\u4e0b\u8a18\u306e\u30e1\u30bd\u30c3\u30c9\u5185\u306e\u51e6\u7406\u306f\u3042\u304f\u307e\u3067\u3082\u4e00\u4f8b\u3067\u3042\u308b\u3002\n\n```rb:RAILS_ROOT/app/controllers/my_paypal_controller.rb\nclass MyPaypalController < PaypalController\n  def success\n    flash[:success] = '\u8cfc\u5165\u304c\u51e6\u7406\u3055\u308c\u307e\u3057\u305f\u3002'\n    redirect_to '/hoge'\n  end\n  def cancel\n    flash[:danger] = '\u8cfc\u5165\u304c\u30ad\u30e3\u30f3\u30bb\u30eb\u3055\u308c\u307e\u3057\u305f\u3002'\n    redirect_to '/hoge/cancel'\n  end\n  protected\n  # \u8cfc\u5165\u304c\u6b63\u5e38\u306b\u5b8c\u4e86\u3057\u305f\u6642\u306e\u51e6\u7406\n  def ipn_completed(params, is_sandbox)\n    status = params[:payment_status]\n    email = params[:payer_email]\n    price = params[:mc_gross].to_i\n    btn_id = params[:btn_id]\n    txn_id = params[:txn_id]\n    item_number = params[:item_number]\n    item_name = params[:item_name]\n    # \u30d1\u30e9\u30e1\u30fc\u30bf\u306b\u57fa\u3065\u3044\u3066DB\u306b\u60c5\u5831\u3092\u767b\u9332\u3059\u308b\u306a\u3069\u306e\u51e6\u7406\n  end\n\n  def ipn_overlap(params, is_sandbox)\n    # \u8cfc\u5165\u304c\u91cd\u8907\u3057\u305f\u5834\u5408\u306e\u51e6\u7406\n  end\n\n  def ipn_pending(params, is_sandbox)\n    # \u8cfc\u5165\u304cPending(\u672a\u6c7a\u6e08)\u306e\u5834\u5408\u306e\u51e6\u7406\n  end\n\n  def ipn_failed(params, is_sandbox)\n    # \u8cfc\u5165\u304cFailed(\u5931\u6557)\u306e\u5834\u5408\u306e\u51e6\u7406\n  end\n\n  def ipn_invalid(params, is_sandbox)\n    # \u8cfc\u5165\u304c\u4e0d\u6b63\u306e\u5834\u5408\u306e\u51e6\u7406\n  end\n\n  def ipn_validate_error(params, is_sandbox)\n    # \u901a\u77e5\u306e\u78ba\u8a8d\u81ea\u4f53\u304c\u5931\u6557\u3057\u305f\u6642\u306e\u51e6\u7406\n  end\n\n  # \u5224\u5b9a\u95a2\u4fc2\n  # \u540c\u3058\u8cfc\u5165ID\u306e\u51e6\u7406\u304c\u91cd\u8907\u3057\u3066\u3044\u308b\u304b\u306e\u5224\u5b9a\n  def ipn_overlap?(params, is_sandbox)\n    txn_id = params[:txn_id]\n    YourModel.find_by_txn_id(txn_id)\n  end\n\n  # receiver_email\u304c\u4e8b\u696d\u8005\u306ePayPal\u30a2\u30ab\u30a6\u30f3\u30c8\u3068\u4e00\u81f4\u3059\u308b\u304b\u3092\u5224\u5b9a\n  def ipn_receiver_email_correct?(email, is_sandbox)\n    email == ENV['PAYPAL_EMAIL']\n  end\n\n  # \u5546\u54c1\u306e\u60c5\u5831\u306b\u8aa4\u308a\u304c\u306a\u3044\u304b\u3092\u78ba\u8a8d\n  def ipn_item_correct?(params, is_sandbox)\n    item_number = params[:item_number]\n    price = params[:mc_gross].to_i\n    btn_id = params[:btn_id]\n\n    item = ItemModel.find__by_item_number(item_number)\n    unless item\n      return false\n    end\n    (item.price == price && item.btn_id == btn_id)\n  end\n\n  # \u30ed\u30b0\u306e\u8a18\u9332\n  # 0: \u8a18\u9332\u3057\u306a\u3044\n  # 1: \u4e0d\u6b63\u306a\u30a2\u30af\u30bb\u30b9\u306f\u8a18\u9332\n  # 2: \u8a18\u9332\n  def ipn_log_level\n    2\n  end\n\n  # \u901a\u77e5\u306e\u78ba\u8a8d\u3092\u30b9\u30ad\u30c3\u30d7\u3059\u308b\u304b(\u30c6\u30b9\u30c8\u7528)\n  def skip_validate?\n    false\n  end\nend\n\n```\n"}