{"context": " More than 1 year has passed since last update.\n\nWordCount\nSpark\u306e\u30d1\u30c3\u30b1\u30fc\u30b8\u306b\u542b\u307e\u308c\u3066\u3044\u308b\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u3092\u57fa\u306b\u4f55\u3092\u884c\u3063\u3066\u3044\u308b\u304b\u78ba\u8a8d\u3059\u308b\u3002\n\nspark-1.5.2-bin-hadoop2.6/examples/src/main/python/wordcount.py\nfrom __future__ import print_function\n\nimport sys\nfrom operator import add\n\nfrom pyspark import SparkContext\n\nif __name__ == \"__main__\":\n    if len(sys.argv) != 2:\n        print(\"Usage: wordcount <file>\", file=sys.stderr)\n        exit(-1)\n    sc = SparkContext(appName=\"PythonWordCount\")\n    lines = sc.textFile(sys.argv[1], 1)\n    counts = lines.flatMap(lambda x: x.split(' ')).map(lambda x: (x, 1).reduceByKey(add)\n    output = counts.collect()\n    for (word, count) in output:\n        print(\"%s: %i\" % (word, count))\n\n    sc.stop()\n\n\n\u30a2\u30d7\u30ea\u3092\u958b\u767a\u3059\u308b\u969b\u3001\u30c7\u30fc\u30bf\u304c\u3069\u306e\u3088\u3046\u306b\u683c\u7d0d\u30fb\u51e6\u7406\u3055\u308c\u3066\u3044\u308b\u304b\u78ba\u8a8d\u3057\u306a\u304c\u3089\u9032\u3081\u3066\u3044\u3063\u305f\u65b9\u304c\u3088\u3044\u306e\u3067\u3001PySpark\u3092\u4f7f\u3063\u3066\u4e0a\u8a18\u306e\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u3092\u78ba\u8a8d\u3057\u3066\u3044\u304f\u3002\n-SparkContext\u306e\u751f\u6210\nsc = SparkContext(appName=\"PythonWordCount\")\n\nSparkContext\u306f\u3001Spark\u306e\u30a2\u30d7\u30ea\u5168\u4f53\u306e\u5b9f\u884c\u95a2\u3059\u308b\u60c5\u5831\u3092\u96c6\u7d04\u3057\u305f\u3082\u306e\u3002Spar\u30af\u30e9\u30b9\u30bf\u3078\u306e\u63a5\u7d9a\u3092\u884c\u3063\u305f\u308a\u3001RDD\u3092\u4f5c\u6210\u3059\u308b\u305f\u3081\u306b\u4f7f\u7528\u3055\u308c\u305f\u308a\u3001\u30a2\u30ad\u30e5\u30e0\u30ec\u30fc\u30c8\u3084\u30d6\u30ed\u30fc\u30c9\u30ad\u30e3\u30b9\u30c8\u306a\u3069\u306e\u5171\u7528\u5909\u6570\u3092\u63d0\u4f9b\u3059\u308b\u3002\n\n\u30c6\u30ad\u30b9\u30c8\u30d5\u30a1\u30a4\u30eb\u304b\u3089RDD\u3092\u751f\u6210\n\ntextRDD = sc.textFile(\"/opt/spark/README.md\")\n\ntextFile\u30e1\u30bd\u30c3\u30c9\u3092\u4f7f\u7528\u3057\u3001\u30c6\u30ad\u30b9\u30c8\u30d5\u30a1\u30a4\u30eb\u304b\u3089RDD\u3092\u751f\u6210\u3059\u308b\u3002\n\u203bRDD\u306e\u30d1\u30fc\u30c6\u30a3\u30b7\u30e7\u30f3\u30b5\u30a4\u30ba\u306f\u30d5\u30a1\u30a4\u30eb\u30b5\u30a4\u30ba\u3092128MB\u3067\u5272\u3063\u305f\u6570\u8fd1\u304f\u306b\u306a\u308b\u3002\n\u203bRDD\u306e\u8981\u7d20\u3092\u30d5\u30a3\u30eb\u30bf\u30ea\u30f3\u30b0\u3057\u305f\u3044\u5834\u5408\u306f\u3001filter\u30e1\u30bd\u30c3\u30c9\u3092\u4f7f\u7528\u3059\u308b\u3002filter\u30e1\u30bd\u30c3\u30c9\u306f\u3001RDD\u306b\u542b\u307e\u308c\u308b\u8981\u7d20\u306b\u305f\u3044\u3057\u3066\u30d5\u30a3\u30eb\u30bf\u30ea\u30f3\u30b0\u6761\u4ef6\u306b\u30de\u30c3\u30c1\u3059\u308b\u8981\u7d20\u306e\u307f\u3092\u6b8b\u3057\u305fRDD\u3092\u751f\u6210\u3059\u308b\u3002\nex) wordRDD = textRDD.filter(labda x: x.isalnum()) //\u82f1\u6570\u5b57\u3060\u3051\u3092\u53d6\u5f97\n\nRDD\u306e\u8981\u7d20\u3092\u52a0\u5de5\n\nlines.flatMap(lambda x: x.split(' ')).map(lambda x: (x, 1)\n\nx.split\u3067word\u306b\u5206\u89e3\u3057\u3001flatMap\u3067\u5404\u884c\u306eword\u3092flatten\u5316\u3057\u3066\u4e00\u3064\u306e\u5927\u304d\u306a\u914d\u5217\u306b\u3059\u308b\u3002map\u30e1\u30bd\u30c3\u30c9\u306b\u3088\u308a\u3001\u5404\u8981\u7d20\u3092\u5909\u63db\u3059\u308b\u3002\u3053\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u3067\u306f\u30bf\u30d7\u30eb(x,1)\u306b\u5909\u63db\u3002\n\nRDD\u306e\u8981\u7d20\u3092\u30ad\u30fc\u6bce\u306b\u96c6\u7d04\n\ncounts = lines.flatMap(lambda x: x.split(' ')).map(lambda x: (x, 1).reduceByKey(add)\n\nreduceByKey\u30e1\u30bd\u30c3\u30c9\u306b\u3088\u308a\u3001RDD\u306b\u542b\u307e\u308c\u308b\u8981\u7d20\u3092\u3001\u540c\u3058\u30ad\u30fc\u3092\u6301\u3064\u3082\u306e\u306b\u30b0\u30eb\u30fc\u30d7\u5206\u3051\u3057\u3001\u30b0\u30eb\u30fc\u30d7\u6bce\u306b\u5024\u3092\u96c6\u7d04\u3059\u308b\u3002\nreduceByKey\u30e1\u30bd\u30c3\u30c9\u304c\u5bfe\u8c61\u3068\u3057\u3066\u3044\u308b\u8981\u7d20\u306e\u30c7\u30fc\u30bf\u578b\u306f\uff08Key,Value\uff09\u3002\nreduceByKey\u30e1\u30bd\u30c3\u30c9\u3067\u306f\u30ad\u30fc\u6bce\u306e\u96c6\u7d04\u51e6\u7406\u306b\u30b7\u30e3\u30c3\u30d5\u30eb\u3092\u884c\u3063\u3066\u3044\u308b\u306e\u3067\u3001\u30a8\u30b0\u30bc\u30ad\u30e5\u30fc\u30bf\u9593\u306e\u591a\u5bfe\u591a\u306e\u901a\u4fe1\u304c\u767a\u751f\u3059\u308b\u3002\n\nRDD\u306e\u8981\u7d20\u3092\u30ad\u30fc\u6bce\u306b\u96c6\u7d04\n\noutput = counts.collect()\n    for (word, count) in output:\n        print(\"%s: %i\" % (word, count))\n\ncollect\u30e1\u30bd\u30c3\u30c9\u3067RDD\u306e\u8981\u7d20\u3092\u53d6\u308a\u51fa\u3057\u3001print\u3067\u51fa\u529b\u3059\u308b\u3002\n\n\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u306e\u505c\u6b62\n\nsc.stop()\n\nstop\u30e1\u30bd\u30c3\u30c9\u3092\u547c\u3073\u51fa\u3057\u30a2\u30d7\u30ea\u3092\u505c\u6b62\u3059\u308b\u3002\n\nAppendix) WordCount ranking\n\u3069\u306eword\u304c\u591a\u304f\u51fa\u73fe\u3057\u3066\u3044\u308b\u306e\u304b\u30c8\u30c3\u30d710\u30e9\u30f3\u30ad\u30f3\u30b0\u3092\u8868\u793a\u3059\u308b\u3002\nsortByKey\u30e1\u30bd\u30c3\u30c9\u3092\u5229\u7528\u3059\u308b\u3053\u3068\u306b\u3088\u308aRDD\u306b\u542b\u307e\u308c\u308b\u8981\u7d20\u3092\u30bd\u30fc\u30c8\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u308b\u3002\n(Key,Value)\u3092\u8981\u7d20\u306b\u6301\u3064RDD\u304c\u5bfe\u8c61\u3067\u3001Key\u306b\u3088\u308b\u5927\u5c0f\u306b\u57fa\u3065\u3044\u3066sort\u3059\u308b\u3002\n\u305d\u306e\u305f\u3081Key\u304c\u6587\u5b57\u306e\u307e\u307e\u3060\u3068sort\u304c\u30a2\u30eb\u30d5\u30a1\u30d9\u30c3\u30c8\u9806\u306b\u306a\u308b\u306e\u3067\u3001(word,count)\u304b\u3089(count,word)\u306b\u5909\u66f4\u3059\u308b\u5fc5\u8981\u304c\u3042\u308b\u3002\n\u5b9f\u969b\u306b\u30e9\u30f3\u30ad\u30f3\u30b0\u3092\u8868\u793a\u3057\u3066\u307f\u305f\u3068\u3053\u308d\u8a18\u53f7\u3068\u304b\u3082\u5165\u3063\u3066\u305f\u306e\u3067\u8a18\u53f7\u306a\u3069\u306f\u9664\u5916\u3059\u308b\u3088\u3046\u306b\u3057\u305f\u3002\n\nwordcountranking.py\nfrom __future__ import print_function\n\nimport sys\nfrom operator import add\n\nfrom pyspark import SparkContext\n\nif __name__ == \"__main__\":\n    if len(sys.argv) != 2:\n        print(\"Usage: wordcount <file>\", file=sys.stderr)\n        exit(-1)\n    sc = SparkContext(appName=\"PythonWordCount\")\n    lines = sc.textFile(sys.argv[1], 1)\n    counts = lines.flatMap(lambda x: x.split(' '))\\\n                  .filter(lambda x: x.isalnum())\\\n                  .map(lambda x: (x, 1))\\\n                  .reduceByKey(add)\n    wordrankingRDD = counts.map(lambda (x,y): (y,x))\n    sortedwordrankingRDD = wordrankingRDD.sortByKey(ascending=False)\n    output = sortedwordrankingRDD.take(10) #\u8981\u7d20\u3092\u5148\u982d\u304b\u308910\u500b\u53d6\u308a\u51fa\u3059\n    for (count, word) in output:\n        print(\"%s: %i\" % (word, count))\n\n    sc.stop()\n\n\n$ ./bin/spark-submit --master=local examples/src/main/python/wordranking.py /tmp/README.md\nthe: 21\nto: 14\nSpark: 14\nfor: 12\nand: 10\na: 10\nrun: 7\non: 6\ncan: 6\nis: 6\n\n\n# WordCount\nSpark\u306e\u30d1\u30c3\u30b1\u30fc\u30b8\u306b\u542b\u307e\u308c\u3066\u3044\u308b\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u3092\u57fa\u306b\u4f55\u3092\u884c\u3063\u3066\u3044\u308b\u304b\u78ba\u8a8d\u3059\u308b\u3002\n\n```spark-1.5.2-bin-hadoop2.6/examples/src/main/python/wordcount.py\nfrom __future__ import print_function\n\nimport sys\nfrom operator import add\n\nfrom pyspark import SparkContext\n\nif __name__ == \"__main__\":\n    if len(sys.argv) != 2:\n        print(\"Usage: wordcount <file>\", file=sys.stderr)\n        exit(-1)\n    sc = SparkContext(appName=\"PythonWordCount\")\n    lines = sc.textFile(sys.argv[1], 1)\n    counts = lines.flatMap(lambda x: x.split(' ')).map(lambda x: (x, 1).reduceByKey(add)\n    output = counts.collect()\n    for (word, count) in output:\n        print(\"%s: %i\" % (word, count))\n\n    sc.stop()\n```\n\n\u30a2\u30d7\u30ea\u3092\u958b\u767a\u3059\u308b\u969b\u3001\u30c7\u30fc\u30bf\u304c\u3069\u306e\u3088\u3046\u306b\u683c\u7d0d\u30fb\u51e6\u7406\u3055\u308c\u3066\u3044\u308b\u304b\u78ba\u8a8d\u3057\u306a\u304c\u3089\u9032\u3081\u3066\u3044\u3063\u305f\u65b9\u304c\u3088\u3044\u306e\u3067\u3001PySpark\u3092\u4f7f\u3063\u3066\u4e0a\u8a18\u306e\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u3092\u78ba\u8a8d\u3057\u3066\u3044\u304f\u3002\n\n-SparkContext\u306e\u751f\u6210\n\n```\nsc = SparkContext(appName=\"PythonWordCount\")\n```\nSparkContext\u306f\u3001Spark\u306e\u30a2\u30d7\u30ea\u5168\u4f53\u306e\u5b9f\u884c\u95a2\u3059\u308b\u60c5\u5831\u3092\u96c6\u7d04\u3057\u305f\u3082\u306e\u3002Spar\u30af\u30e9\u30b9\u30bf\u3078\u306e\u63a5\u7d9a\u3092\u884c\u3063\u305f\u308a\u3001RDD\u3092\u4f5c\u6210\u3059\u308b\u305f\u3081\u306b\u4f7f\u7528\u3055\u308c\u305f\u308a\u3001\u30a2\u30ad\u30e5\u30e0\u30ec\u30fc\u30c8\u3084\u30d6\u30ed\u30fc\u30c9\u30ad\u30e3\u30b9\u30c8\u306a\u3069\u306e\u5171\u7528\u5909\u6570\u3092\u63d0\u4f9b\u3059\u308b\u3002\n\n- \u30c6\u30ad\u30b9\u30c8\u30d5\u30a1\u30a4\u30eb\u304b\u3089RDD\u3092\u751f\u6210\n\n```\ntextRDD = sc.textFile(\"/opt/spark/README.md\")\n```\ntextFile\u30e1\u30bd\u30c3\u30c9\u3092\u4f7f\u7528\u3057\u3001\u30c6\u30ad\u30b9\u30c8\u30d5\u30a1\u30a4\u30eb\u304b\u3089RDD\u3092\u751f\u6210\u3059\u308b\u3002\n\u203bRDD\u306e\u30d1\u30fc\u30c6\u30a3\u30b7\u30e7\u30f3\u30b5\u30a4\u30ba\u306f\u30d5\u30a1\u30a4\u30eb\u30b5\u30a4\u30ba\u3092128MB\u3067\u5272\u3063\u305f\u6570\u8fd1\u304f\u306b\u306a\u308b\u3002\n\n\u203bRDD\u306e\u8981\u7d20\u3092\u30d5\u30a3\u30eb\u30bf\u30ea\u30f3\u30b0\u3057\u305f\u3044\u5834\u5408\u306f\u3001filter\u30e1\u30bd\u30c3\u30c9\u3092\u4f7f\u7528\u3059\u308b\u3002filter\u30e1\u30bd\u30c3\u30c9\u306f\u3001RDD\u306b\u542b\u307e\u308c\u308b\u8981\u7d20\u306b\u305f\u3044\u3057\u3066\u30d5\u30a3\u30eb\u30bf\u30ea\u30f3\u30b0\u6761\u4ef6\u306b\u30de\u30c3\u30c1\u3059\u308b\u8981\u7d20\u306e\u307f\u3092\u6b8b\u3057\u305fRDD\u3092\u751f\u6210\u3059\u308b\u3002\nex) wordRDD = textRDD.filter(labda x: x.isalnum()) //\u82f1\u6570\u5b57\u3060\u3051\u3092\u53d6\u5f97\n\n- RDD\u306e\u8981\u7d20\u3092\u52a0\u5de5\n\n```\nlines.flatMap(lambda x: x.split(' ')).map(lambda x: (x, 1)\n```\nx.split\u3067word\u306b\u5206\u89e3\u3057\u3001flatMap\u3067\u5404\u884c\u306eword\u3092flatten\u5316\u3057\u3066\u4e00\u3064\u306e\u5927\u304d\u306a\u914d\u5217\u306b\u3059\u308b\u3002map\u30e1\u30bd\u30c3\u30c9\u306b\u3088\u308a\u3001\u5404\u8981\u7d20\u3092\u5909\u63db\u3059\u308b\u3002\u3053\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u3067\u306f\u30bf\u30d7\u30eb(x,1)\u306b\u5909\u63db\u3002\n\n- RDD\u306e\u8981\u7d20\u3092\u30ad\u30fc\u6bce\u306b\u96c6\u7d04\n\n```\ncounts = lines.flatMap(lambda x: x.split(' ')).map(lambda x: (x, 1).reduceByKey(add)\n```\nreduceByKey\u30e1\u30bd\u30c3\u30c9\u306b\u3088\u308a\u3001RDD\u306b\u542b\u307e\u308c\u308b\u8981\u7d20\u3092\u3001\u540c\u3058\u30ad\u30fc\u3092\u6301\u3064\u3082\u306e\u306b\u30b0\u30eb\u30fc\u30d7\u5206\u3051\u3057\u3001\u30b0\u30eb\u30fc\u30d7\u6bce\u306b\u5024\u3092\u96c6\u7d04\u3059\u308b\u3002\nreduceByKey\u30e1\u30bd\u30c3\u30c9\u304c\u5bfe\u8c61\u3068\u3057\u3066\u3044\u308b\u8981\u7d20\u306e\u30c7\u30fc\u30bf\u578b\u306f\uff08Key,Value\uff09\u3002\nreduceByKey\u30e1\u30bd\u30c3\u30c9\u3067\u306f\u30ad\u30fc\u6bce\u306e\u96c6\u7d04\u51e6\u7406\u306b\u30b7\u30e3\u30c3\u30d5\u30eb\u3092\u884c\u3063\u3066\u3044\u308b\u306e\u3067\u3001\u30a8\u30b0\u30bc\u30ad\u30e5\u30fc\u30bf\u9593\u306e\u591a\u5bfe\u591a\u306e\u901a\u4fe1\u304c\u767a\u751f\u3059\u308b\u3002\n\n- RDD\u306e\u8981\u7d20\u3092\u30ad\u30fc\u6bce\u306b\u96c6\u7d04\n\n```\noutput = counts.collect()\n    for (word, count) in output:\n        print(\"%s: %i\" % (word, count))\n```\ncollect\u30e1\u30bd\u30c3\u30c9\u3067RDD\u306e\u8981\u7d20\u3092\u53d6\u308a\u51fa\u3057\u3001print\u3067\u51fa\u529b\u3059\u308b\u3002\n\n- \u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u306e\u505c\u6b62\n\n```\nsc.stop()\n```\nstop\u30e1\u30bd\u30c3\u30c9\u3092\u547c\u3073\u51fa\u3057\u30a2\u30d7\u30ea\u3092\u505c\u6b62\u3059\u308b\u3002\n\n# Appendix) WordCount ranking\n\u3069\u306eword\u304c\u591a\u304f\u51fa\u73fe\u3057\u3066\u3044\u308b\u306e\u304b\u30c8\u30c3\u30d710\u30e9\u30f3\u30ad\u30f3\u30b0\u3092\u8868\u793a\u3059\u308b\u3002\nsortByKey\u30e1\u30bd\u30c3\u30c9\u3092\u5229\u7528\u3059\u308b\u3053\u3068\u306b\u3088\u308aRDD\u306b\u542b\u307e\u308c\u308b\u8981\u7d20\u3092\u30bd\u30fc\u30c8\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u308b\u3002\n(Key,Value)\u3092\u8981\u7d20\u306b\u6301\u3064RDD\u304c\u5bfe\u8c61\u3067\u3001Key\u306b\u3088\u308b\u5927\u5c0f\u306b\u57fa\u3065\u3044\u3066sort\u3059\u308b\u3002\n\u305d\u306e\u305f\u3081Key\u304c\u6587\u5b57\u306e\u307e\u307e\u3060\u3068sort\u304c\u30a2\u30eb\u30d5\u30a1\u30d9\u30c3\u30c8\u9806\u306b\u306a\u308b\u306e\u3067\u3001(word,count)\u304b\u3089(count,word)\u306b\u5909\u66f4\u3059\u308b\u5fc5\u8981\u304c\u3042\u308b\u3002\n\u5b9f\u969b\u306b\u30e9\u30f3\u30ad\u30f3\u30b0\u3092\u8868\u793a\u3057\u3066\u307f\u305f\u3068\u3053\u308d\u8a18\u53f7\u3068\u304b\u3082\u5165\u3063\u3066\u305f\u306e\u3067\u8a18\u53f7\u306a\u3069\u306f\u9664\u5916\u3059\u308b\u3088\u3046\u306b\u3057\u305f\u3002\n\n```wordcountranking.py\nfrom __future__ import print_function\n\nimport sys\nfrom operator import add\n\nfrom pyspark import SparkContext\n\nif __name__ == \"__main__\":\n    if len(sys.argv) != 2:\n        print(\"Usage: wordcount <file>\", file=sys.stderr)\n        exit(-1)\n    sc = SparkContext(appName=\"PythonWordCount\")\n    lines = sc.textFile(sys.argv[1], 1)\n    counts = lines.flatMap(lambda x: x.split(' '))\\\n                  .filter(lambda x: x.isalnum())\\\n                  .map(lambda x: (x, 1))\\\n                  .reduceByKey(add)\n    wordrankingRDD = counts.map(lambda (x,y): (y,x))\n    sortedwordrankingRDD = wordrankingRDD.sortByKey(ascending=False)\n    output = sortedwordrankingRDD.take(10) #\u8981\u7d20\u3092\u5148\u982d\u304b\u308910\u500b\u53d6\u308a\u51fa\u3059\n    for (count, word) in output:\n        print(\"%s: %i\" % (word, count))\n\n    sc.stop()\n```\n\n```\n$ ./bin/spark-submit --master=local examples/src/main/python/wordranking.py /tmp/README.md\nthe: 21\nto: 14\nSpark: 14\nfor: 12\nand: 10\na: 10\nrun: 7\non: 6\ncan: 6\nis: 6\n```\n", "tags": ["Spark"]}