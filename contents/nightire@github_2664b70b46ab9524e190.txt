{"tags": ["angular"], "context": " More than 1 year has passed since last update.\n\nOverview\n\nInjector is a service locator. There's a single injector per Angular application.\nInjector looks up an object by its name, and keeps an internal caches of all objects. Repeated calls to get the same object name result in the same instance.\nIf the object does not exit, injector will asks the instance factory to create a new one.\nSo, a module is the way to configure the injector's instance factory, known as a provider.\n\nDocuments\n\nInjector\n$injector is used to retrive object instances as defined by provider, instantiate types, invoke methods, and load modules.\nvar $injector = angular.injector();\n\nexpect($injector.get('$injector')).toBe($injector);\n\nexpect($injector.invoke(function($injector){\n    return $injector;\n}).toBe($injector);\n\n\nAnnotation Strategy\nJavascript does not have annotations, annotations are needed for dependency injection. But some minified/obfuscated tool will change the name of arguments, so we need some ways to make valid annotations.\n// inferred (only works is code not minified/obfuscated)\n$inject.invoke(function(serviceA){});\n\n// annotated\nfunction explicit(serviceA){};\nexplicit.$inject = ['serviceA'];\n$inject.invoke(explicit);\n\n// inline\n$inject.invoke(['serviceA', function(serviceA){}]);\n\n\nModule\nThe angular.module is a global place for creating and registering Angular modules.\nAll Modules (angular core or 3rd party) that should be available to an application must be registered using this mechanism.\n\n## Overview\n\n- Injector is a service locator. There's a single injector per Angular application.\n\n- Injector looks up an object by its name, and keeps an internal caches of all objects. Repeated calls to get the same object name result in the same instance.\n\n- If the object does not exit, injector will asks the instance factory to create a new one.\n\n- So, a module is the way to configure the injector's instance factory, known as a provider.\n\n[Documents](http://docs.angularjs.org/guide/concepts#module)\n\n## Injector\n\n`$injector` is used to retrive object instances as defined by provider, instantiate types, invoke methods, and load modules.\n\n```js\nvar $injector = angular.injector();\n\nexpect($injector.get('$injector')).toBe($injector);\n\nexpect($injector.invoke(function($injector){\n\treturn $injector;\n}).toBe($injector);\n```\n\n### Annotation Strategy\n\nJavascript does not have annotations, annotations are needed for dependency injection. But some minified/obfuscated tool will change the name of arguments, so we need some ways to make valid annotations.\n\n```js\n// inferred (only works is code not minified/obfuscated)\n$inject.invoke(function(serviceA){});\n\n// annotated\nfunction explicit(serviceA){};\nexplicit.$inject = ['serviceA'];\n$inject.invoke(explicit);\n\n// inline\n$inject.invoke(['serviceA', function(serviceA){}]);\n```\n\n## Module\n\nThe `angular.module` is a global place for creating and registering Angular modules.\n\nAll Modules (angular core or 3rd party) that should be available to an application must be registered using this mechanism.\n"}