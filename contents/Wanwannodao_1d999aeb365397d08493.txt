{"context": "\n\nVRAM\u306b\u76f4\u66f8\u304d\u3059\u308b\n\u81ea\u5206\u306e\u524d\u56de\u306e\u6295\u7a3f\uff08\u81ea\u4f5cOS\uff081\uff09: \u30d6\u30fc\u30c8\u30ed\u30fc\u30c0\uff09\u3067\u306f\u3001BIOS\u306e\u5272\u308a\u8fbc\u307f0x10\u306e\u30c6\u30ec\u30bf\u30a4\u30d7\u30e2\u30fc\u30c9\u3067\u30c6\u30ad\u30b9\u30c8\u3092\u8868\u793a\u3057\u305f\u304c\u4eca\u56de\u306fBIOS\u3092\u4f7f\u7528\u305b\u305a\u306bVRAM\u306b\u76f4\u63a5\u66f8\u304d\u8fbc\u3080\u3053\u3068\u3067\u30c6\u30ad\u30b9\u30c8\u3092\u8868\u793a\u3055\u305b\u308b\n\u203b\u3068\u308a\u3042\u3048\u305a\u4eca\u56de\u306f\u30ea\u30a2\u30eb\u30e2\u30fc\u30c9\u3067\u306e\u8a71\nNASM\u3092\u4f7f\u7528\u3057\u307e\u3059\n\nVRAM\u306e\u9818\u57df\u306f0xb800:0x0000\n\n2byte\u304c\u8272\u3092\u542b\u3081\u305f1\u6587\u5b57\u5206\u306b\u76f8\u5f53\u3059\u308b\n\u5177\u4f53\u7684\u306b\u306f\u3001\n\n1byte\u76ee: \u30ad\u30e3\u30e9\u30af\u30bf\u30b3\u30fc\u30c9\n2byte\u76ee: 0-3bit \u6587\u5b57\u8272, 4-8bit \u80cc\u666f\u8272\n\n\u3068\u3044\u3063\u305f\u5177\u5408\n\u307e\u305f\u300180\u6587\u5b57x25\u884c\u306a\u306e\u3067\u30011\u884c\u306f160byte\u3068\u306a\u308b\n\u57fa\u672c\u7684\u306b\u77e5\u3063\u3066\u304a\u304f\u3053\u3068\u306f\u3053\u308c\u3060\u3051\u3067\u3001\u9069\u5207\u306a\u30aa\u30d5\u30bb\u30c3\u30c8\u3092\u8a08\u7b97\u3057\u30662byte\u3092\u66f8\u304d\u8fbc\u3080\u3068\u3044\u3046\u3053\u3068\u3092\u7e70\u308a\u8fd4\u3059\u64cd\u4f5c\u3068\u306a\u308b\n\n\u30b3\u30fc\u30c9\n\n\u5404\u7a2e\u521d\u671f\u5316\n\u307e\u305a\u3001stosw\u547d\u4ee4\u306f\u30a2\u30ad\u30e5\u30e0\u30ec\u30fc\u30bf\u30ec\u30b8\u30b9\u30bf(AX)\u3092\u30a8\u30af\u30b9\u30c8\u30e9\u30bb\u30b0\u30e1\u30f3\u30c8(ES)\u306e\u30c7\u30a3\u30b9\u30c6\u30a3\u30cd\u30fc\u30b7\u30e7\u30f3\u30a4\u30f3\u30c7\u30c3\u30af\u30b9(DI)\u306b\u66f8\u304d\u8fbc\u3080\u306e\u3067\u3001ES\u306b\u306fVRAM\u306e\u30bb\u30b0\u30e1\u30f3\u30c8\u30a2\u30c9\u30ec\u30b90xb800\u3092\u5165\u308c\u3066\u304a\u304f\n\u30bd\u30fc\u30b9\u30a4\u30f3\u30c7\u30c3\u30af\u30b9(SI)\u306b\u306f\u76ee\u7684\u306e\u30c6\u30ad\u30b9\u30c8\u306e\u30a2\u30c9\u30ec\u30b9\u3092\u5165\u308c\u3066\u304a\u304f\n[bits 16]\n[org 0x7c00]\n\nstart:\n        ;; initialize segment registers                                                                                                      \n        xor     ax, ax\n        mov     ds, ax\n        mov     ss, ax\n        ;; initialize stack                                                                                                                  \n        mov     sp, 0x7c00\n\n        mov     ax, 0xb800      ; VRAM segment                                                                                               \n        mov     es, ax          ; segment reg for stosw  \n        mov     si, msg\n\n        jmp     println\n\n\n\u30e1\u30a4\u30f3\u306e\u51e6\u7406\n\u6c4e\u7528\u30ec\u30b8\u30b9\u30bf\u306e\u4f7f\u3044\u65b9\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u611f\u3058\n\n\u30a2\u30ad\u30e5\u30e0\u30ec\u30fc\u30bf\u30ec\u30b8\u30b9\u30bf(AX): AL\u306f\u6587\u5b57\u3001AH\u306f\u8272\u60c5\u5831\n\u30ab\u30a6\u30f3\u30bf\u30fc\u30ec\u30b8\u30b9\u30bf(CX): \u884c\u5185\u30aa\u30d5\u30bb\u30c3\u30c8 \n\u30d9\u30fc\u30b9\u30ec\u30b8\u30b9\u30bf(BX): \u884c\u30aa\u30d5\u30bb\u30c3\u30c8 (160 byte/line), 25\u884c\u3042\u308b\u306e\u30672byte\u4f7f\u3044\u307e\u3057\u305f\n\n\u5927\u307e\u304b\u306a\u51e6\u7406\u306e\u6d41\u308c\n\nSI\u30ec\u30b8\u30b9\u30bf\u304b\u3089lodsb\u3067AL\u306b\u6b21\u306e\u6587\u5b57\u3092\u683c\u7d0d\n\u7d42\u7aef\u306a\u3089\uff11\u884c\u5206\u30a4\u30f3\u30af\u30ea\u30e1\u30f3\u30c8\u3057\u3066\u3001\u3068\u308a\u3042\u3048\u305ahang\u30d8\nAH\u306b\u6587\u5b57\u8272\u3068\u80cc\u666f\u8272\u306e\u60c5\u5831\u3092\u683c\u7d0d\nBX\u306b\u30aa\u30d5\u30bb\u30c3\u30c8\u5024\u3092\u4e57\u305b\u308b\n\u30aa\u30d5\u30bb\u30c3\u30c8\u30a2\u30c9\u30ec\u30b9 DI = CX + BX\nES:DI\u306bAX\u306e\u5185\u5bb9\u3092\u66f8\u304d\u8fbc\u3080\nCX\u30921\u6587\u5b57\u5206(2byte)\u30a4\u30f3\u30af\u30ea\u30e1\u30f3\u30c8\u3057\u3066\u6b21\u306e\u6587\u5b57\u3078\n\nprintln:\n        xor     cx, cx          ; cx = 0                                                                                                     \nprint_char:\n        lodsb                   ; load a char to AL                                                                                          \n        or      al, al          ; if \\0                                                                                                      \n\n        jnz     print\n        add     word [line], 160 ; 1 line = 80 chars x 2 bytes                                                                               \n        jmp     hang\nprint:\n        mov     ah, 0x0f        ; char:white, back:black                                                                                     \n\n        ;; set offset                                                                                                                        \n        mov     bx, word [line]\n        xor     di, di          ; di = 0 (beginning of VRAM)                                                                                 \n        add     di, cx          ; x-offset                                                                                                   \n        add     di, bx          ; y-offset                                                                                                   \n        ;; write                                                                                                                             \n        stosw                   ; stor ax to ES:DI, and di -= 2                                                                              \n\n        add     cx, 2           ; char/attr = 2byte                                                                                          \n        jmp     print_char\n\nhang:\n        hlt\n        jmp     hang\n\nline    dw      0               ; = line num x ( 80 x 2 )                                                                                    \nmsg     db      \"Hello World\", 0\n        times   510-($-$$) db 0\n        dw      0xaa55\n\n\n\u53c2\u8003\nOSDev\nOS Wiki\n# VRAM\u306b\u76f4\u66f8\u304d\u3059\u308b\n\u81ea\u5206\u306e\u524d\u56de\u306e\u6295\u7a3f\uff08[\u81ea\u4f5cOS\uff081\uff09: \u30d6\u30fc\u30c8\u30ed\u30fc\u30c0](http://qiita.com/Wanwannodao/items/19830459606eedc46812)\uff09\u3067\u306f\u3001BIOS\u306e\u5272\u308a\u8fbc\u307f```0x10```\u306e\u30c6\u30ec\u30bf\u30a4\u30d7\u30e2\u30fc\u30c9\u3067\u30c6\u30ad\u30b9\u30c8\u3092\u8868\u793a\u3057\u305f\u304c\u4eca\u56de\u306fBIOS\u3092\u4f7f\u7528\u305b\u305a\u306bVRAM\u306b\u76f4\u63a5\u66f8\u304d\u8fbc\u3080\u3053\u3068\u3067\u30c6\u30ad\u30b9\u30c8\u3092\u8868\u793a\u3055\u305b\u308b\n\u203b\u3068\u308a\u3042\u3048\u305a\u4eca\u56de\u306f\u30ea\u30a2\u30eb\u30e2\u30fc\u30c9\u3067\u306e\u8a71\n\nNASM\u3092\u4f7f\u7528\u3057\u307e\u3059\n\n### VRAM\u306e\u9818\u57df\u306f```0xb800:0x0000```\n2byte\u304c\u8272\u3092\u542b\u3081\u305f1\u6587\u5b57\u5206\u306b\u76f8\u5f53\u3059\u308b\n\u5177\u4f53\u7684\u306b\u306f\u3001\n\n* 1byte\u76ee: \u30ad\u30e3\u30e9\u30af\u30bf\u30b3\u30fc\u30c9\n* 2byte\u76ee: 0-3bit \u6587\u5b57\u8272, 4-8bit \u80cc\u666f\u8272\n\n\u3068\u3044\u3063\u305f\u5177\u5408\n\u307e\u305f\u300180\u6587\u5b57x25\u884c\u306a\u306e\u3067\u30011\u884c\u306f**160byte**\u3068\u306a\u308b\n\n\u57fa\u672c\u7684\u306b\u77e5\u3063\u3066\u304a\u304f\u3053\u3068\u306f\u3053\u308c\u3060\u3051\u3067\u3001\u9069\u5207\u306a\u30aa\u30d5\u30bb\u30c3\u30c8\u3092\u8a08\u7b97\u3057\u30662byte\u3092\u66f8\u304d\u8fbc\u3080\u3068\u3044\u3046\u3053\u3068\u3092\u7e70\u308a\u8fd4\u3059\u64cd\u4f5c\u3068\u306a\u308b\n\n## \u30b3\u30fc\u30c9\n### \u5404\u7a2e\u521d\u671f\u5316\n\n\u307e\u305a\u3001```stosw```\u547d\u4ee4\u306f\u30a2\u30ad\u30e5\u30e0\u30ec\u30fc\u30bf\u30ec\u30b8\u30b9\u30bf(AX)\u3092\u30a8\u30af\u30b9\u30c8\u30e9\u30bb\u30b0\u30e1\u30f3\u30c8(ES)\u306e\u30c7\u30a3\u30b9\u30c6\u30a3\u30cd\u30fc\u30b7\u30e7\u30f3\u30a4\u30f3\u30c7\u30c3\u30af\u30b9(DI)\u306b\u66f8\u304d\u8fbc\u3080\u306e\u3067\u3001ES\u306b\u306fVRAM\u306e\u30bb\u30b0\u30e1\u30f3\u30c8\u30a2\u30c9\u30ec\u30b9```0xb800```\u3092\u5165\u308c\u3066\u304a\u304f\n\n\u30bd\u30fc\u30b9\u30a4\u30f3\u30c7\u30c3\u30af\u30b9(SI)\u306b\u306f\u76ee\u7684\u306e\u30c6\u30ad\u30b9\u30c8\u306e\u30a2\u30c9\u30ec\u30b9\u3092\u5165\u308c\u3066\u304a\u304f\n\n```nasm\n[bits 16]\n[org 0x7c00]\n\nstart:\n        ;; initialize segment registers                                                                                                      \n        xor     ax, ax\n        mov     ds, ax\n        mov     ss, ax\n        ;; initialize stack                                                                                                                  \n        mov     sp, 0x7c00\n\n        mov     ax, 0xb800      ; VRAM segment                                                                                               \n        mov     es, ax          ; segment reg for stosw  \n        mov     si, msg\n\n        jmp     println\n```\n\n### \u30e1\u30a4\u30f3\u306e\u51e6\u7406\n\u6c4e\u7528\u30ec\u30b8\u30b9\u30bf\u306e\u4f7f\u3044\u65b9\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u611f\u3058\n\n* \u30a2\u30ad\u30e5\u30e0\u30ec\u30fc\u30bf\u30ec\u30b8\u30b9\u30bf(AX): AL\u306f\u6587\u5b57\u3001AH\u306f\u8272\u60c5\u5831\n* \u30ab\u30a6\u30f3\u30bf\u30fc\u30ec\u30b8\u30b9\u30bf(CX): \u884c\u5185\u30aa\u30d5\u30bb\u30c3\u30c8 \n* \u30d9\u30fc\u30b9\u30ec\u30b8\u30b9\u30bf(BX): \b\u884c\u30aa\u30d5\u30bb\u30c3\u30c8 (160 byte/line), 25\u884c\u3042\u308b\u306e\u30672byte\u4f7f\u3044\u307e\u3057\u305f\n\n\u5927\u307e\u304b\u306a\u51e6\u7406\u306e\u6d41\u308c\n\n1. SI\u30ec\u30b8\u30b9\u30bf\u304b\u3089```lodsb```\u3067AL\u306b\u6b21\u306e\u6587\u5b57\u3092\u683c\u7d0d\n2. \u7d42\u7aef\u306a\u3089\uff11\u884c\u5206\u30a4\u30f3\u30af\u30ea\u30e1\u30f3\u30c8\u3057\u3066\u3001\u3068\u308a\u3042\u3048\u305a```hang```\u30d8\n3. AH\u306b\u6587\u5b57\u8272\u3068\u80cc\u666f\u8272\u306e\u60c5\u5831\u3092\u683c\u7d0d\n4. BX\u306b\u30aa\u30d5\u30bb\u30c3\u30c8\u5024\u3092\u4e57\u305b\u308b\n5. \u30aa\u30d5\u30bb\u30c3\u30c8\u30a2\u30c9\u30ec\u30b9 DI = CX + BX\n6. ES:DI\u306bAX\u306e\u5185\u5bb9\u3092\u66f8\u304d\u8fbc\u3080\n7. CX\u30921\u6587\u5b57\u5206(2byte)\u30a4\u30f3\u30af\u30ea\u30e1\u30f3\u30c8\u3057\u3066\u6b21\u306e\u6587\u5b57\u3078\n\n```nasm\nprintln:\n        xor     cx, cx          ; cx = 0                                                                                                     \nprint_char:\n        lodsb                   ; load a char to AL                                                                                          \n        or      al, al          ; if \\0                                                                                                      \n\n        jnz     print\n        add     word [line], 160 ; 1 line = 80 chars x 2 bytes                                                                               \n        jmp     hang\nprint:\n        mov     ah, 0x0f        ; char:white, back:black                                                                                     \n\n        ;; set offset                                                                                                                        \n        mov     bx, word [line]\n        xor     di, di          ; di = 0 (beginning of VRAM)                                                                                 \n        add     di, cx          ; x-offset                                                                                                   \n        add     di, bx          ; y-offset                                                                                                   \n        ;; write                                                                                                                             \n        stosw                   ; stor ax to ES:DI, and di -= 2                                                                              \n\n        add     cx, 2           ; char/attr = 2byte                                                                                          \n        jmp     print_char\n\nhang:\n        hlt\n        jmp     hang\n\nline    dw      0               ; = line num x ( 80 x 2 )                                                                                    \nmsg     db      \"Hello World\", 0\n        times   510-($-$$) db 0\n        dw      0xaa55\n```\n\n## \u53c2\u8003\n[OSDev](http://wiki.osdev.org/Babystep4)\n[OS Wiki](http://community.osdev.info/index.php?VGA%2Ftext)\n\n", "tags": ["nasm", "assembly", "OS", "x86"]}