{"tags": ["C++11", "C++11", "\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u30e1\u30bf\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0"], "context": " More than 1 year has passed since last update.\u3069\u3046\u3082\u3002\n\u95c7\u306e\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u306e\u6642\u9593\u3067\u3059\u3002\n\u8a18\u4e8b\u3092\u6295\u7a3f\u3059\u308b\u3054\u3068\u306b\u4f55\u6642\u4f7f\u3046\u3093\u3060\u3053\u308c\u3063\u3066\u8a00\u3044\u305f\u304f\u306a\u308b\u3088\u3046\u306a\u30cd\u30bf\u3070\u304b\u308a\u66f8\u3044\u3066\u3044\u308b\u6c17\u304c\u3057\u307e\u3059\u304c\u3001\u79c1\u306f\u3052\u3093\u304d\u3067\u3059\u3002\n\u3055\u3066\u3001\u305a\u3044\u3076\u3093\u65e5\u304c\u958b\u3044\u3066\u3057\u307e\u3044\u307e\u3057\u305f\u304c\u3001\u524d\u56de\u306e\u7d9a\u304d\u3067\u3059\u3002\n\u524d\u56de\u306f\u3001std::integer_sequence\u30e9\u30a4\u30af\u306a\u5b9a\u6570\u914d\u5217\u30af\u30e9\u30b9\u3092\u6271\u3044\u307e\u3057\u305f\u3002\n\u4eca\u56de\u306f\u305d\u308c\u306e\u578b\u30d0\u30fc\u30b8\u30e7\u30f3\u306e\u8a71\u306b\u306a\u308a\u307e\u3059\u3002\n\u578b\u306e\u914d\u5217\u306b\u95a2\u3057\u3066\u306f\u3001\u524d\u56de\u306e\u8a18\u4e8b\u3067\u3082\u4e00\u90e8\u51fa\u73fe\u3059\u308b\u7b87\u6240\u304c\u3042\u3063\u305f\u306e\u3067\u3001\u524d\u65b9\u5ba3\u8a00\u3060\u3051\u306f\u66f8\u3044\u3066\u3042\u3063\u305f\u3068\u601d\u3044\u307e\u3059\u3002\n\nc++\nnamespace geranium {\n\ntemplate<typename ...Args>\nclass type_sequence;\n\n}\n\n\n\u5b9f\u88c5\u3059\u308b\u5185\u5bb9\u306f\u524d\u56de\u3068\u540c\u3058\u3088\u3046\u306a\u611f\u3058\u3067\u3059\u3002\u305f\u3060\u3057\u3001\u578b\u3068\u5024\u3067\u306f\u540c\u3058\u3088\u3046\u306b\u306f\u884c\u304b\u306a\u3044\u90e8\u5206\u3082\u591a\u3044\u306e\u3067\u3001\u540c\u3058\u540d\u524d\u3067\u3082\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u30a8\u30a4\u30ea\u30a2\u30b9\u306b\u306a\u3063\u3066\u3044\u305f\u308a\u3001\u6d88\u3048\u3066\u3044\u308b\u30e1\u30f3\u30d0\u304c\u3042\u3063\u305f\u308a\u3057\u307e\u3059\u3002\n\nmake_type_sequence\n\n\u5148\u306b\u4fbf\u5229\u306a\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u30a8\u30a4\u30ea\u30a2\u30b9\u3092\u4f5c\u3063\u3066\u304a\u304d\u307e\u3059\u3002\n\u524d\u56de\u306emake_integer_sequence\u304c1\u305a\u3064\u5897\u52a0\u3059\u308b\u6570\u5217\u3092\u4f5c\u6210\u3059\u308b\u3082\u306e\u3067\u3042\u3063\u305f\u306e\u306b\u5bfe\u3057\u3001\u4eca\u56de\u306emake_type_sequence\u306f\u540c\u3058\u578b\u3092n\u500b\u4e26\u3079\u305ftype_sequence\u3092\u4f5c\u308b\u3082\u306e\u3067\u3059\u3002\n\nc++\nnamespace geranium {\n\ntemplate<typename ...Args>\nclass type_sequence;\n\n// T\u304c\u578btype_sequence\u304b\u3069\u3046\u304b\u8abf\u3079\u308b\ntemplate<typename T>\nstruct is_type_sequence: std::false_type {};\n\ntemplate<typename ...Args>\nstruct is_type_sequence<type_sequence<Args...>>: std::true_type {};\n\nnamespace _detail {\n\ntemplate<typename T, std::size_t n>\nstruct _make_type_sequence\n{\n    using type =\n        typename _make_type_sequence<T, n/2>::type::\n        template join<typename _make_type_sequence<T, (n+1)/2>::type>;\n};\n\ntemplate<typename T>\nstruct _make_type_sequence<T, 1>\n{\n    using type = type_sequence<T>;\n};\n\ntemplate<typename T>\nstruct _make_type_sequence<T, 0>\n{\n    using type = type_sequence<>;\n};\n\n}\n\ntemplate<typename T, std::size_t n>\nusing make_type_sequence =\n    typename _detail::_make_type_sequence<T, n>::type;\n\n}\n\n\n\n\u3084\u308a\u65b9\u306f\u524d\u56de\u3068\u4f3c\u305f\u3088\u3046\u306a\u611f\u3058\u3067\u3059\u30022\u5206\u5272\u3057\u305f\u3082\u306e\u3092\u7d50\u5408\u3059\u308b\u3088\u3046\u306b\u3057\u3066\u4f5c\u6210\u3057\u3066\u3044\u308b\u306e\u3067\u3001log(n)\u306e\u518d\u5e30\u3067\u4f5c\u6210\u3067\u304d\u307e\u3059\u3002\u7406\u8ad6\u7684\u306b\u306ftype_sequence<int, int, ...(int\u304c10000\u500b)>\u307f\u305f\u3044\u306a\u306e\u3082\u4f5c\u308c\u308b\u306f\u305a\u3002\u305f\u3060\u3057\u3001\u30b3\u30f3\u30d1\u30a4\u30eb\u306b\u306f\u3080\u3061\u3083\u304f\u3061\u3083\u6642\u9593\u304c\u304b\u304b\u308b\u3053\u3068\u304c\u4e88\u60f3\u3055\u308c\u307e\u3059\u3002\n\ntype_sequence<>\n\n\u6b21\u306b\u3001\u7a7a\u306etype_sequence\u306b\u5bfe\u3059\u308b\u7279\u6b8a\u5316\u3092\u4f5c\u308a\u307e\u3059\u3002\n\u7279\u6b8a\u5316\u306a\u3057\u3067\u3084\u308d\u3046\u3068\u3057\u305f\u3093\u3067\u3059\u304c\u7121\u7406\u3067\u3057\u305f\u3002\u7279\u6b8a\u5316\u3059\u308b\u3068\u62e1\u5f35\u3057\u305f\u6642\u306b\u4e8c\u56de\u66f8\u304b\u306a\u3044\u3068\u3044\u3051\u306a\u3044\u3082\u306e\u304c\u3042\u3063\u305f\u308a\u3057\u3066\u9762\u5012\u306a\u306e\u3067\u3059\u304c\u3001\u4ed5\u65b9\u3042\u308a\u307e\u305b\u3093\u3002\n\nc++\nnamespace geranium {\n\ntemplate<>\nclass type_sequence<> {\npublic:\n    using size_type = std::size_t;\n\n    static constexpr size_type npos = static_cast<size_type>(-1);\n    static inline constexpr size_type size() noexcept { return 0; }\n\n    // \u30c6\u30f3\u30d7\u30ec\u30fc\u30c8U\u3092\u7279\u6b8a\u5316\u3057\u305f\u30af\u30e9\u30b9\u3092\u8fd4\u3059\n    template<template<class ...> class U>\n    using unpack = U<>;\n\n    // \u30c6\u30f3\u30d7\u30ec\u30fc\u30c8U\u3092\u5229\u7528\u3057\u3066\u3001Args...\u305d\u308c\u305e\u308c\u304b\u3089\u751f\u6210\u3057\u305f\u578b\u3092\u4e26\u3079\u305ftype_sequence\u3092\u8fd4\u3059\n    template<template<class> class U>\n    using type_map = type_sequence<>;\n\n    // Args... \u3092\u672b\u5c3e\u306b\u8ffd\u52a0\u3057\u3066\u4f5c\u6210\u3057\u305ftype_sequence\u3092\u8fd4\u3059\n    template<typename ...Args2>\n    using append = type_sequence<Args2...>;\n\n    // Args... \u3092\u5148\u982d\u306b\u8ffd\u52a0\u3057\u3066\u4f5c\u6210\u3057\u305ftype_sequence\u3092\u8fd4\u3059\n    template<typename ...Args2>\n    using prepend = type_sequence<Args2...>;\n\n    // \u4ed6\u306einteger_sequence\u3068\u7d50\u5408\u3057\u3066\u4f5c\u6210\u3057\u305ftype_sequence\u3092\u8fd4\u3059\n    template<typename U, GERANIUM_ENABLE_WHEN(is_type_sequence<U>())>\n    using join = U;\n\n    // n\u756a\u76ee\u304b\u3089m-1\u756a\u3081\u3092\u5207\u308a\u53d6\u3063\u3066\u4f5c\u6210\u3057\u305ftype_sequence\u3092\u8fd4\u3059\n    template<std::size_t n = 0, std::size_t m = 0,\n        GERANIUM_ENABLE_WHEN(n==0&&m==0)>\n    using slice = type_sequence<>;\n\n    // \u5148\u982d\u304b\u3089n\u500b\u3092\u5207\u308a\u53d6\u3063\u3066\u4f5c\u6210\u3057\u305ftype_sequence\u3092\u8fd4\u3059\n    template<std::size_t n = 1>\n    using head = slice<0, n>;\n\n    // \u672b\u5c3e\u304b\u3089n\u500b\u3092\u5207\u308a\u53d6\u3063\u3066\u4f5c\u6210\u3057\u305ftype_sequence\u3092\u8fd4\u3059\n    template<size_type n = 1>\n    using tail = slice<size()-n>;\n\n    // n\u756a\u76ee\u306bargs2...\u3092\u633f\u5165\u3057\u3066\u4f5c\u6210\u3057\u305ftype_sequence\u3092\u8fd4\u3059\n    template<size_type n, typename ...Args2>\n    using insert = typename head<n>::template append<Args2...>::\n        template join<tail<size()-n>>;\n\n    // n\u756a\u76ee\u304b\u3089c\u500b\u3092\u524a\u9664\u3057\u305f\u6b8b\u308a\u3067\u4f5c\u6210\u3057\u305ftype_sequence\u3092\u8fd4\u3059\n    template<size_type n, size_type c = 1>\n    using erase = typename head<n>::template join<tail<size()-n-c>>;\n\n    // args...\u3092\u9006\u8ee2\u3057\u3066\u4f5c\u6210\u3057\u305ftype_sequence\u3092\u8fd4\u3059\n    using reverse = type_sequence<>;\n\n    // \u6700\u521d\u306bvalue\u304c\u898b\u3064\u304b\u308b\u4f4d\u7f6e\u3092\u63a2\u3059\n    template<typename T>\n    static inline constexpr std::size_t find() { return 0; }  \n\n};\n\n}\n\n\n\nwrapper<T>\n\n\u53ef\u5909\u9577\u5f15\u6570\u30ea\u30b9\u30c8\u304b\u3089n\u756a\u76ee\u306e\u578b\u3092\u518d\u5e30\u306b\u3088\u3089\u305a\u306b\u53d6\u308a\u51fa\u3059\u305f\u3081\u306b\u7528\u610f\u3057\u307e\u3059\u3002\n\nc++\nnamespace geranium {\nnamespace _detail {\n\nstruct wrapper_base {};\n\ntemplate<typename T>\nstruct wrapper: wrapper_base {};\n\ntemplate<typename ...Args2>\nstruct types_at {\n    template<typename T>\n    static T call(Args2..., _detail::wrapper<T>, ...);\n};\n\n}\n}\n\n\n\ntype_sequence<Args...>\n\n\u305d\u3057\u3066\u672c\u4f53\u3067\u3059\u3002\n\nc++\nnamespace geranium {\n\ntemplate<typename T, typename ...Args>\nstruct type_find;\n\ntemplate<typename ...Args>\nclass type_sequence {\npublic:\n    using size_type = std::size_t;\n\n    static constexpr size_type npos = static_cast<size_type>(-1);\n    static inline constexpr size_type size() noexcept { return sizeof...(Args); }\n\n    // \u30c6\u30f3\u30d7\u30ec\u30fc\u30c8U\u3092\u7279\u6b8a\u5316\u3057\u305f\u30af\u30e9\u30b9\u3092\u8fd4\u3059\n    template<template<class ...> class U>\n    using unpack = U<Args...>;\n\n    // \u30c6\u30f3\u30d7\u30ec\u30fc\u30c8U\u3092\u5229\u7528\u3057\u3066\u3001Args...\u305d\u308c\u305e\u308c\u304b\u3089\u751f\u6210\u3057\u305f\u578b\u3092\u4e26\u3079\u305ftype_sequence\u3092\u8fd4\u3059\n    template<template<class> class U>\n    using type_map = type_sequence<typename U<Args>::type ...>;\n\n    // Args... \u3092\u672b\u5c3e\u306b\u8ffd\u52a0\u3057\u3066\u4f5c\u6210\u3057\u305ftype_sequence\u3092\u8fd4\u3059\n    template<typename ...Args2>\n    using append = type_sequence<Args..., Args2...>;\n\n    // Args... \u3092\u5148\u982d\u306b\u8ffd\u52a0\u3057\u3066\u4f5c\u6210\u3057\u305ftype_sequence\u3092\u8fd4\u3059\n    template<typename ...Args2>\n    using prepend = type_sequence<Args2..., Args...>;\n\n    // \u4ed6\u306einteger_sequence\u3068\u7d50\u5408\u3057\u3066\u4f5c\u6210\u3057\u305finteger_sequence\u3092\u8fd4\u3059\n    template<typename U, GERANIUM_ENABLE_WHEN(is_type_sequence<U>())>\n    using join = typename U::template prepend<Args...>;\n\n    // Args...\u306en\u756a\u76ee\u306e\u578b\u3092\u8fd4\u3059\u3002\n    template<size_type n>\n    using at = decltype(make_type_sequence<_detail::wrapper_base, n>::\n        template unpack<_detail::types_at>::call(_detail::wrapper<Args>{}...));\n\n    // \u5148\u982d\u3092\u8fd4\u3059\n    using front = at<0>;\n\n    // \u672b\u5c3e\u3092\u8fd4\u3059\n    using back = at<size()-1>;\n\n    template<size_type  ...indices>\n    struct _slice\n    {\n        using type = type_sequence<at<indices>...>;\n    };\n\n    // n\u756a\u76ee\u304b\u3089m-1\u756a\u3081\u3092\u5207\u308a\u53d6\u3063\u3066\u4f5c\u6210\u3057\u305ftype_sequence\u3092\u8fd4\u3059\n    template<std::size_t n = 0, std::size_t m = size(),\n        GERANIUM_ENABLE_WHEN(n<=m&&m<=size())>\n    using slice = typename make_integer_sequence<std::size_t, n, m-n>::\n        template unpack<_slice>::type;\n\n    // \u5148\u982d\u304b\u3089n\u500b\u3092\u5207\u308a\u53d6\u3063\u3066\u4f5c\u6210\u3057\u305ftype_sequence\u3092\u8fd4\u3059\n    template<std::size_t n = 1>\n    using head = slice<0, n>;\n\n    // \u672b\u5c3e\u304b\u3089n\u500b\u3092\u5207\u308a\u53d6\u3063\u3066\u4f5c\u6210\u3057\u305ftype_sequence\u3092\u8fd4\u3059\n    template<size_type n = 1>\n    using tail = slice<size()-n>;\n\n    // n\u756a\u76ee\u306bargs2...\u3092\u633f\u5165\u3057\u3066\u4f5c\u6210\u3057\u305ftype_sequence\u3092\u8fd4\u3059\n    template<size_type n, typename ...Args2>\n    using insert = typename head<n>::template append<Args2...>::\n        template join<tail<size()-n>>;\n\n    // n\u756a\u76ee\u304b\u3089c\u500b\u3092\u524a\u9664\u3057\u305f\u6b8b\u308a\u3067\u4f5c\u6210\u3057\u305ftype_sequence\u3092\u8fd4\u3059\n    template<size_type n, size_type c = 1>\n    using erase = typename head<n>::template join<tail<size()-n-c>>;\n\n    // Args...\u3092\u9006\u8ee2\u3057\u3066\u4f5c\u6210\u3057\u305ftype_sequence\u3092\u8fd4\u3059\n    template<size_type n>\n    struct _reverse {\n        using type = at<size()-n-1>;\n    };\n    using reverse = \n        typename make_index_sequence<size()>::\n            template type_map<_reverse>;\n\n    // \u6700\u521d\u306bT\u304c\u898b\u3064\u304b\u308b\u4f4d\u7f6e\u3092\u63a2\u3059\n    template<typename T>\n    static constexpr inline size_type find() noexcept {\n        return type_find<T, Args...>::value;\n    }\n\n};\n\nnamespace _detail {\n\ntemplate<typename T, typename ...Args>\nstruct type_find;\n\ntemplate<typename T>\nstruct type_find<T> {\n    static constexpr std::size_t length = 0;\n    static constexpr std::size_t npos = static_cast<std::size_t>(-1);\n    static constexpr std::size_t value = npos;\n};\n\ntemplate<typename T1, typename T2>\nstruct type_find<T1, T2> {\n    static constexpr std::size_t length = 1;\n    static constexpr std::size_t npos = static_cast<std::size_t>(-1);\n    static constexpr std::size_t value = npos;\n};\n\ntemplate<typename T>\nstruct type_find<T, T> {\n    static constexpr std::size_t length = 1;\n    static constexpr std::size_t npos = static_cast<std::size_t>(-1);\n    static constexpr std::size_t value = 0;\n};\n\n\ntemplate<typename T, typename ...Args>\nstruct type_find {\n    template<typename ...Args2>\n    using self_template = type_find<Args2...>;\n    static constexpr std::size_t length = sizeof...(Args);\n    static constexpr std::size_t npos = static_cast<std::size_t>(-1);\n    using pre_half = typename type_sequence<Args...>::\n        template slice<0, length/2>::template prepend<T>::\n        template unpack<self_template>;\n    using post_half = typename type_sequence<Args...>::\n        template slice<length/2>::template prepend<T>::\n        template unpack<self_template>;\n    static constexpr std::size_t value =\n        pre_half::value != npos ?\n            pre_half::value:\n            (post_half::value != npos ?\n                (pre_half::length + post_half::value):\n                npos);\n};\n\n}\n\ntemplate<typename T, typename ...Args>\nstruct type_find :\n    std::integral_constant<std::size_t, _detail::type_find<T, Args...>::value>\n{};\n}\n\n\n\u524d\u56de\u306e\u8a18\u4e8b\u3068\u898b\u6bd4\u3079\u3066\u3044\u305f\u3060\u3051\u3070\u3001\u7d50\u69cb\u4f3c\u901a\u3063\u3066\u3044\u308b\u3068\u3053\u308d\u3082\u3042\u308b\u3068\u601d\u3044\u307e\u3059\u3002\n\u3042\u3068find\u306f\u518d\u5e30\u306e\u6df1\u3055\u306e\u30aa\u30fc\u30c0\u30fc\u304clog(n)\u306b\u306a\u308b\u3088\u3046\u306b\u3057\u3066\u307f\u307e\u3057\u305f\u3002\n\n\u7d42\u308f\u308a\u306b\n\u306a\u3093\u3060\u304b\u3059\u3054\u3044\u75b2\u308c\u307e\u3057\u305f\u3002\u9014\u4e2d\u304b\u3089\u89e3\u8aac\u304c\u304a\u3056\u306a\u308a\u306b\u306a\u3063\u3066\u3044\u308b\u306e\u3067\u3001\u5206\u304b\u3089\u306a\u3044\u3053\u3068\u304c\u3042\u308c\u3070\u30b3\u30e1\u30f3\u30c8\u3057\u3066\u3044\u3063\u3066\u304f\u3060\u3055\u3044\u3002\n\u305d\u308c\u3067\u306f\u4eca\u65e5\u306f\u3053\u306e\u8fba\u3067\u3002\n\u3069\u3046\u3082\u3002\n\u95c7\u306e\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u306e\u6642\u9593\u3067\u3059\u3002\n\u8a18\u4e8b\u3092\u6295\u7a3f\u3059\u308b\u3054\u3068\u306b\u4f55\u6642\u4f7f\u3046\u3093\u3060\u3053\u308c\u3063\u3066\u8a00\u3044\u305f\u304f\u306a\u308b\u3088\u3046\u306a\u30cd\u30bf\u3070\u304b\u308a\u66f8\u3044\u3066\u3044\u308b\u6c17\u304c\u3057\u307e\u3059\u304c\u3001\u79c1\u306f\u3052\u3093\u304d\u3067\u3059\u3002\n\n\u3055\u3066\u3001\u305a\u3044\u3076\u3093\u65e5\u304c\u958b\u3044\u3066\u3057\u307e\u3044\u307e\u3057\u305f\u304c\u3001[\u524d\u56de](/kazatsuyu/items/c06f934c53dc6e7528c4)\u306e\u7d9a\u304d\u3067\u3059\u3002\n\u524d\u56de\u306f\u3001`std::integer_sequence`\u30e9\u30a4\u30af\u306a\u5b9a\u6570\u914d\u5217\u30af\u30e9\u30b9\u3092\u6271\u3044\u307e\u3057\u305f\u3002\n\u4eca\u56de\u306f\u305d\u308c\u306e\u578b\u30d0\u30fc\u30b8\u30e7\u30f3\u306e\u8a71\u306b\u306a\u308a\u307e\u3059\u3002\n\n\u578b\u306e\u914d\u5217\u306b\u95a2\u3057\u3066\u306f\u3001\u524d\u56de\u306e\u8a18\u4e8b\u3067\u3082\u4e00\u90e8\u51fa\u73fe\u3059\u308b\u7b87\u6240\u304c\u3042\u3063\u305f\u306e\u3067\u3001\u524d\u65b9\u5ba3\u8a00\u3060\u3051\u306f\u66f8\u3044\u3066\u3042\u3063\u305f\u3068\u601d\u3044\u307e\u3059\u3002\n\n```cpp:c++\nnamespace geranium {\n\ntemplate<typename ...Args>\nclass type_sequence;\n\n}\n```\n\n\u5b9f\u88c5\u3059\u308b\u5185\u5bb9\u306f\u524d\u56de\u3068\u540c\u3058\u3088\u3046\u306a\u611f\u3058\u3067\u3059\u3002\u305f\u3060\u3057\u3001\u578b\u3068\u5024\u3067\u306f\u540c\u3058\u3088\u3046\u306b\u306f\u884c\u304b\u306a\u3044\u90e8\u5206\u3082\u591a\u3044\u306e\u3067\u3001\u540c\u3058\u540d\u524d\u3067\u3082\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u30a8\u30a4\u30ea\u30a2\u30b9\u306b\u306a\u3063\u3066\u3044\u305f\u308a\u3001\u6d88\u3048\u3066\u3044\u308b\u30e1\u30f3\u30d0\u304c\u3042\u3063\u305f\u308a\u3057\u307e\u3059\u3002\n\n# `make_type_sequence`\n\n\u5148\u306b\u4fbf\u5229\u306a\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u30a8\u30a4\u30ea\u30a2\u30b9\u3092\u4f5c\u3063\u3066\u304a\u304d\u307e\u3059\u3002\n\u524d\u56de\u306e`make_integer_sequence`\u304c1\u305a\u3064\u5897\u52a0\u3059\u308b\u6570\u5217\u3092\u4f5c\u6210\u3059\u308b\u3082\u306e\u3067\u3042\u3063\u305f\u306e\u306b\u5bfe\u3057\u3001\u4eca\u56de\u306e`make_type_sequence`\u306f\u540c\u3058\u578b\u3092n\u500b\u4e26\u3079\u305ftype_sequence\u3092\u4f5c\u308b\u3082\u306e\u3067\u3059\u3002\n\n```cpp:c++\nnamespace geranium {\n\ntemplate<typename ...Args>\nclass type_sequence;\n\n// T\u304c\u578btype_sequence\u304b\u3069\u3046\u304b\u8abf\u3079\u308b\ntemplate<typename T>\nstruct is_type_sequence: std::false_type {};\n\ntemplate<typename ...Args>\nstruct is_type_sequence<type_sequence<Args...>>: std::true_type {};\n\nnamespace _detail {\n\ntemplate<typename T, std::size_t n>\nstruct _make_type_sequence\n{\n    using type =\n        typename _make_type_sequence<T, n/2>::type::\n        template join<typename _make_type_sequence<T, (n+1)/2>::type>;\n};\n\ntemplate<typename T>\nstruct _make_type_sequence<T, 1>\n{\n    using type = type_sequence<T>;\n};\n\ntemplate<typename T>\nstruct _make_type_sequence<T, 0>\n{\n    using type = type_sequence<>;\n};\n\n}\n\ntemplate<typename T, std::size_t n>\nusing make_type_sequence =\n    typename _detail::_make_type_sequence<T, n>::type;\n\n}\n\n```\n\n\u3084\u308a\u65b9\u306f\u524d\u56de\u3068\u4f3c\u305f\u3088\u3046\u306a\u611f\u3058\u3067\u3059\u30022\u5206\u5272\u3057\u305f\u3082\u306e\u3092\u7d50\u5408\u3059\u308b\u3088\u3046\u306b\u3057\u3066\u4f5c\u6210\u3057\u3066\u3044\u308b\u306e\u3067\u3001log(n)\u306e\u518d\u5e30\u3067\u4f5c\u6210\u3067\u304d\u307e\u3059\u3002\u7406\u8ad6\u7684\u306b\u306f`type_sequence<int, int, ...(int\u304c10000\u500b)>`\u307f\u305f\u3044\u306a\u306e\u3082\u4f5c\u308c\u308b\u306f\u305a\u3002\u305f\u3060\u3057\u3001\u30b3\u30f3\u30d1\u30a4\u30eb\u306b\u306f\u3080\u3061\u3083\u304f\u3061\u3083\u6642\u9593\u304c\u304b\u304b\u308b\u3053\u3068\u304c\u4e88\u60f3\u3055\u308c\u307e\u3059\u3002\n\n#`type_sequence<>`\n\n\u6b21\u306b\u3001\u7a7a\u306etype_sequence\u306b\u5bfe\u3059\u308b\u7279\u6b8a\u5316\u3092\u4f5c\u308a\u307e\u3059\u3002\n\u7279\u6b8a\u5316\u306a\u3057\u3067\u3084\u308d\u3046\u3068\u3057\u305f\u3093\u3067\u3059\u304c\u7121\u7406\u3067\u3057\u305f\u3002\u7279\u6b8a\u5316\u3059\u308b\u3068\u62e1\u5f35\u3057\u305f\u6642\u306b\u4e8c\u56de\u66f8\u304b\u306a\u3044\u3068\u3044\u3051\u306a\u3044\u3082\u306e\u304c\u3042\u3063\u305f\u308a\u3057\u3066\u9762\u5012\u306a\u306e\u3067\u3059\u304c\u3001\u4ed5\u65b9\u3042\u308a\u307e\u305b\u3093\u3002\n\n```cpp:c++\nnamespace geranium {\n\ntemplate<>\nclass type_sequence<> {\npublic:\n    using size_type = std::size_t;\n\n    static constexpr size_type npos = static_cast<size_type>(-1);\n    static inline constexpr size_type size() noexcept { return 0; }\n\n    // \u30c6\u30f3\u30d7\u30ec\u30fc\u30c8U\u3092\u7279\u6b8a\u5316\u3057\u305f\u30af\u30e9\u30b9\u3092\u8fd4\u3059\n    template<template<class ...> class U>\n    using unpack = U<>;\n\n    // \u30c6\u30f3\u30d7\u30ec\u30fc\u30c8U\u3092\u5229\u7528\u3057\u3066\u3001Args...\u305d\u308c\u305e\u308c\u304b\u3089\u751f\u6210\u3057\u305f\u578b\u3092\u4e26\u3079\u305ftype_sequence\u3092\u8fd4\u3059\n    template<template<class> class U>\n    using type_map = type_sequence<>;\n\n    // Args... \u3092\u672b\u5c3e\u306b\u8ffd\u52a0\u3057\u3066\u4f5c\u6210\u3057\u305ftype_sequence\u3092\u8fd4\u3059\n    template<typename ...Args2>\n    using append = type_sequence<Args2...>;\n\n    // Args... \u3092\u5148\u982d\u306b\u8ffd\u52a0\u3057\u3066\u4f5c\u6210\u3057\u305ftype_sequence\u3092\u8fd4\u3059\n    template<typename ...Args2>\n    using prepend = type_sequence<Args2...>;\n\n    // \u4ed6\u306einteger_sequence\u3068\u7d50\u5408\u3057\u3066\u4f5c\u6210\u3057\u305ftype_sequence\u3092\u8fd4\u3059\n    template<typename U, GERANIUM_ENABLE_WHEN(is_type_sequence<U>())>\n    using join = U;\n\n    // n\u756a\u76ee\u304b\u3089m-1\u756a\u3081\u3092\u5207\u308a\u53d6\u3063\u3066\u4f5c\u6210\u3057\u305ftype_sequence\u3092\u8fd4\u3059\n    template<std::size_t n = 0, std::size_t m = 0,\n        GERANIUM_ENABLE_WHEN(n==0&&m==0)>\n    using slice = type_sequence<>;\n\n    // \u5148\u982d\u304b\u3089n\u500b\u3092\u5207\u308a\u53d6\u3063\u3066\u4f5c\u6210\u3057\u305ftype_sequence\u3092\u8fd4\u3059\n    template<std::size_t n = 1>\n    using head = slice<0, n>;\n\n    // \u672b\u5c3e\u304b\u3089n\u500b\u3092\u5207\u308a\u53d6\u3063\u3066\u4f5c\u6210\u3057\u305ftype_sequence\u3092\u8fd4\u3059\n    template<size_type n = 1>\n    using tail = slice<size()-n>;\n\n    // n\u756a\u76ee\u306bargs2...\u3092\u633f\u5165\u3057\u3066\u4f5c\u6210\u3057\u305ftype_sequence\u3092\u8fd4\u3059\n    template<size_type n, typename ...Args2>\n    using insert = typename head<n>::template append<Args2...>::\n        template join<tail<size()-n>>;\n\n    // n\u756a\u76ee\u304b\u3089c\u500b\u3092\u524a\u9664\u3057\u305f\u6b8b\u308a\u3067\u4f5c\u6210\u3057\u305ftype_sequence\u3092\u8fd4\u3059\n    template<size_type n, size_type c = 1>\n    using erase = typename head<n>::template join<tail<size()-n-c>>;\n\n    // args...\u3092\u9006\u8ee2\u3057\u3066\u4f5c\u6210\u3057\u305ftype_sequence\u3092\u8fd4\u3059\n    using reverse = type_sequence<>;\n\n    // \u6700\u521d\u306bvalue\u304c\u898b\u3064\u304b\u308b\u4f4d\u7f6e\u3092\u63a2\u3059\n    template<typename T>\n    static inline constexpr std::size_t find() { return 0; }  \n\n};\n\n}\n```\n\n# `wrapper<T>`\n\u53ef\u5909\u9577\u5f15\u6570\u30ea\u30b9\u30c8\u304b\u3089n\u756a\u76ee\u306e\u578b\u3092\u518d\u5e30\u306b\u3088\u3089\u305a\u306b\u53d6\u308a\u51fa\u3059\u305f\u3081\u306b\u7528\u610f\u3057\u307e\u3059\u3002\n\n```cpp:c++\nnamespace geranium {\nnamespace _detail {\n\nstruct wrapper_base {};\n\ntemplate<typename T>\nstruct wrapper: wrapper_base {};\n\ntemplate<typename ...Args2>\nstruct types_at {\n    template<typename T>\n    static T call(Args2..., _detail::wrapper<T>, ...);\n};\n\n}\n}\n```\n\n# `type_sequence<Args...>`\n\n\u305d\u3057\u3066\u672c\u4f53\u3067\u3059\u3002\n\n```cpp:c++\nnamespace geranium {\n\ntemplate<typename T, typename ...Args>\nstruct type_find;\n\ntemplate<typename ...Args>\nclass type_sequence {\npublic:\n    using size_type = std::size_t;\n\n    static constexpr size_type npos = static_cast<size_type>(-1);\n    static inline constexpr size_type size() noexcept { return sizeof...(Args); }\n\n    // \u30c6\u30f3\u30d7\u30ec\u30fc\u30c8U\u3092\u7279\u6b8a\u5316\u3057\u305f\u30af\u30e9\u30b9\u3092\u8fd4\u3059\n    template<template<class ...> class U>\n    using unpack = U<Args...>;\n\n    // \u30c6\u30f3\u30d7\u30ec\u30fc\u30c8U\u3092\u5229\u7528\u3057\u3066\u3001Args...\u305d\u308c\u305e\u308c\u304b\u3089\u751f\u6210\u3057\u305f\u578b\u3092\u4e26\u3079\u305ftype_sequence\u3092\u8fd4\u3059\n    template<template<class> class U>\n    using type_map = type_sequence<typename U<Args>::type ...>;\n\n    // Args... \u3092\u672b\u5c3e\u306b\u8ffd\u52a0\u3057\u3066\u4f5c\u6210\u3057\u305ftype_sequence\u3092\u8fd4\u3059\n    template<typename ...Args2>\n    using append = type_sequence<Args..., Args2...>;\n\n    // Args... \u3092\u5148\u982d\u306b\u8ffd\u52a0\u3057\u3066\u4f5c\u6210\u3057\u305ftype_sequence\u3092\u8fd4\u3059\n    template<typename ...Args2>\n    using prepend = type_sequence<Args2..., Args...>;\n\n    // \u4ed6\u306einteger_sequence\u3068\u7d50\u5408\u3057\u3066\u4f5c\u6210\u3057\u305finteger_sequence\u3092\u8fd4\u3059\n    template<typename U, GERANIUM_ENABLE_WHEN(is_type_sequence<U>())>\n    using join = typename U::template prepend<Args...>;\n\n    // Args...\u306en\u756a\u76ee\u306e\u578b\u3092\u8fd4\u3059\u3002\n    template<size_type n>\n    using at = decltype(make_type_sequence<_detail::wrapper_base, n>::\n        template unpack<_detail::types_at>::call(_detail::wrapper<Args>{}...));\n\n    // \u5148\u982d\u3092\u8fd4\u3059\n    using front = at<0>;\n\n    // \u672b\u5c3e\u3092\u8fd4\u3059\n    using back = at<size()-1>;\n\n    template<size_type  ...indices>\n    struct _slice\n    {\n        using type = type_sequence<at<indices>...>;\n    };\n\n    // n\u756a\u76ee\u304b\u3089m-1\u756a\u3081\u3092\u5207\u308a\u53d6\u3063\u3066\u4f5c\u6210\u3057\u305ftype_sequence\u3092\u8fd4\u3059\n    template<std::size_t n = 0, std::size_t m = size(),\n        GERANIUM_ENABLE_WHEN(n<=m&&m<=size())>\n    using slice = typename make_integer_sequence<std::size_t, n, m-n>::\n        template unpack<_slice>::type;\n\n    // \u5148\u982d\u304b\u3089n\u500b\u3092\u5207\u308a\u53d6\u3063\u3066\u4f5c\u6210\u3057\u305ftype_sequence\u3092\u8fd4\u3059\n    template<std::size_t n = 1>\n    using head = slice<0, n>;\n\n    // \u672b\u5c3e\u304b\u3089n\u500b\u3092\u5207\u308a\u53d6\u3063\u3066\u4f5c\u6210\u3057\u305ftype_sequence\u3092\u8fd4\u3059\n    template<size_type n = 1>\n    using tail = slice<size()-n>;\n\n    // n\u756a\u76ee\u306bargs2...\u3092\u633f\u5165\u3057\u3066\u4f5c\u6210\u3057\u305ftype_sequence\u3092\u8fd4\u3059\n    template<size_type n, typename ...Args2>\n    using insert = typename head<n>::template append<Args2...>::\n        template join<tail<size()-n>>;\n\n    // n\u756a\u76ee\u304b\u3089c\u500b\u3092\u524a\u9664\u3057\u305f\u6b8b\u308a\u3067\u4f5c\u6210\u3057\u305ftype_sequence\u3092\u8fd4\u3059\n    template<size_type n, size_type c = 1>\n    using erase = typename head<n>::template join<tail<size()-n-c>>;\n\n    // Args...\u3092\u9006\u8ee2\u3057\u3066\u4f5c\u6210\u3057\u305ftype_sequence\u3092\u8fd4\u3059\n    template<size_type n>\n    struct _reverse {\n        using type = at<size()-n-1>;\n    };\n    using reverse = \n        typename make_index_sequence<size()>::\n            template type_map<_reverse>;\n\n    // \u6700\u521d\u306bT\u304c\u898b\u3064\u304b\u308b\u4f4d\u7f6e\u3092\u63a2\u3059\n    template<typename T>\n    static constexpr inline size_type find() noexcept {\n        return type_find<T, Args...>::value;\n    }\n    \n};\n\nnamespace _detail {\n\ntemplate<typename T, typename ...Args>\nstruct type_find;\n\ntemplate<typename T>\nstruct type_find<T> {\n    static constexpr std::size_t length = 0;\n    static constexpr std::size_t npos = static_cast<std::size_t>(-1);\n    static constexpr std::size_t value = npos;\n};\n\ntemplate<typename T1, typename T2>\nstruct type_find<T1, T2> {\n    static constexpr std::size_t length = 1;\n    static constexpr std::size_t npos = static_cast<std::size_t>(-1);\n    static constexpr std::size_t value = npos;\n};\n\ntemplate<typename T>\nstruct type_find<T, T> {\n    static constexpr std::size_t length = 1;\n    static constexpr std::size_t npos = static_cast<std::size_t>(-1);\n    static constexpr std::size_t value = 0;\n};\n\n\ntemplate<typename T, typename ...Args>\nstruct type_find {\n    template<typename ...Args2>\n    using self_template = type_find<Args2...>;\n    static constexpr std::size_t length = sizeof...(Args);\n    static constexpr std::size_t npos = static_cast<std::size_t>(-1);\n    using pre_half = typename type_sequence<Args...>::\n        template slice<0, length/2>::template prepend<T>::\n        template unpack<self_template>;\n    using post_half = typename type_sequence<Args...>::\n        template slice<length/2>::template prepend<T>::\n        template unpack<self_template>;\n    static constexpr std::size_t value =\n        pre_half::value != npos ?\n            pre_half::value:\n            (post_half::value != npos ?\n                (pre_half::length + post_half::value):\n                npos);\n};\n\n}\n\ntemplate<typename T, typename ...Args>\nstruct type_find :\n    std::integral_constant<std::size_t, _detail::type_find<T, Args...>::value>\n{};\n}\n```\n\n\u524d\u56de\u306e\u8a18\u4e8b\u3068\u898b\u6bd4\u3079\u3066\u3044\u305f\u3060\u3051\u3070\u3001\u7d50\u69cb\u4f3c\u901a\u3063\u3066\u3044\u308b\u3068\u3053\u308d\u3082\u3042\u308b\u3068\u601d\u3044\u307e\u3059\u3002\n\u3042\u3068find\u306f\u518d\u5e30\u306e\u6df1\u3055\u306e\u30aa\u30fc\u30c0\u30fc\u304clog(n)\u306b\u306a\u308b\u3088\u3046\u306b\u3057\u3066\u307f\u307e\u3057\u305f\u3002\n\n\n# \u7d42\u308f\u308a\u306b\n\n\u306a\u3093\u3060\u304b\u3059\u3054\u3044\u75b2\u308c\u307e\u3057\u305f\u3002\u9014\u4e2d\u304b\u3089\u89e3\u8aac\u304c\u304a\u3056\u306a\u308a\u306b\u306a\u3063\u3066\u3044\u308b\u306e\u3067\u3001\u5206\u304b\u3089\u306a\u3044\u3053\u3068\u304c\u3042\u308c\u3070\u30b3\u30e1\u30f3\u30c8\u3057\u3066\u3044\u3063\u3066\u304f\u3060\u3055\u3044\u3002\n\u305d\u308c\u3067\u306f\u4eca\u65e5\u306f\u3053\u306e\u8fba\u3067\u3002\n"}