{"context": "\u6587\u5b57\u30b3\u30fc\u30c9\u306e\u5fa9\u7fd2\u3092\u3061\u3087\u3063\u3068\u3057\u3066\u305f\u3089\u3001Unicode\u306e\u30b5\u30ed\u30b2\u30fc\u30c8\u30da\u30a2\u3063\u3066\u4eca\u307e\u3067\u6c17\u306b\u3057\u305f\u3053\u3068\u7121\u304b\u3063\u305f\u3053\u3068\u306b\u6c17\u304c\u4ed8\u304d\u307e\u3057\u305f\u3002\n\u3068\u3044\u3046\u3053\u3068\u3067\u3001\u304a\u4ed5\u4e8b\u3067\u3082\u6271\u3046Java\u3067\u3001\u30b5\u30ed\u30b2\u30fc\u30c8\u30da\u30a2\u306e\u6587\u5b57\u5217\u3092\u7d44\u307f\u7acb\u3066\u305f\u308a\u3001\u6587\u5b57\u6570\u3092\u30ab\u30a6\u30f3\u30c8\u3057\u305f\u308a\u3059\u308b\u7df4\u7fd2\u3092\u3057\u307e\u3057\u305f\u3002\n\nhttps://github.com/msakamoto-sf/javasnack/blob/master/src/test/java/javasnack/langspecs/TestUnicodeSurrogatePairs.java\n\nJava 1.4\u307e\u3067\u306f\u30b5\u30ed\u30b2\u30fc\u30c8\u30da\u30a2\u306f\u8003\u616e\u3055\u308c\u3066\u307e\u305b\u3093\u3067\u3057\u305f\u304c\u30011.5\u306b\u306a\u308a\u3001\u30b5\u30ed\u30b2\u30fc\u30c8\u30da\u30a2\u3092\u8003\u616e\u3057\u305fAPI\u304c\u8ffd\u52a0\u3055\u308c\u307e\u3057\u305f\u3002\u305d\u3053\u3067\u3001\u4e0a\u8a18\u30c6\u30b9\u30c8\u30b3\u30fc\u30c9\u3067\u306f1.4\u7cfb\u307e\u3067\u306eAPI\u3068\u30011.5\u3067\u8ffd\u52a0\u3055\u308c\u305fAPI\u3092\u547c\u3073\u51fa\u3057\u3066\u307f\u3066\u3001\u6319\u52d5\u3092\u6bd4\u3079\u3066\u307e\u3059\u3002\n\u307e\u305a char \u578b\u3067\u30b5\u30ed\u30b2\u30fc\u30c8\u30da\u30a2\u3092\u8868\u73fe\u3057\u3066\u307f\u307e\u3059\u3002\u4e0a\u4f4d\u30b5\u30ed\u30b2\u30fc\u30c8\u3001\u4e0b\u4f4d\u30b5\u30ed\u30b2\u30fc\u30c8\u3092\u305d\u308c\u305e\u308c\u5225\u306echar\u578b\u5909\u6570\u3068\u3057\u3066\u5206\u3051\u3001\u914d\u5217\u306b\u7d44\u307f\u8fbc\u3093\u3067\u307e\u3059\u3002\nchar c1 = '\\u3042'; // HIRAGANA LETTER A, cp=12354\nchar c2 = '\\uD842'; // tuchi-yoshi (high), cp=134071\nchar c3 = '\\uDFB7'; // tuchi-yoshi (low), cp=134071\nchar c4 = '\\u30D5'; // katakana fu, cp=12501\nchar c5 = '\\u309A'; // handakuten, cp=12442\nchar c6 = '\\uD842'; // kuchi + shichi (high), cp=134047\nchar c7 = '\\uDF9F'; // kuchi + shichi (low), cp=134047\nString s = new String(new char[] { c1, c2, c3, c4, c5, c6, c7 });\nassertEquals(s, \"\\u3042\\uD842\\uDFB7\\u30D5\\u309A\\uD842\\uDF9F\");\n\n\u7d9a\u3044\u3066\u30b5\u30ed\u30b2\u30fc\u30c8\u30da\u30a2\u3092\u8003\u616e\u3057\u306a\u3044 String.length() \u3084 String.charAt() \u3092\u4f7f\u3063\u3066\u6587\u5b57\u5217\u3092\u30b3\u30d4\u30fc\u3057\u3066\u307f\u307e\u3059\u3002\u6700\u5f8c\u306e assertEquals() \u3092\u898b\u308b\u3068\u3001\u30b5\u30ed\u30b2\u30fc\u30c8\u30da\u30a2\u304c\u5206\u5272\u3055\u308c\u305f\u72b6\u614b\u306e int[] \u304b\u3089\u751f\u6210\u3057\u305f\u6587\u5b57\u5217\u3068\u4e00\u81f4\u3057\u3066\u3044\u307e\u3059\u3002\u4e0a\u4f4d\u30b5\u30ed\u30b2\u30fc\u30c8\u30fb\u4e0b\u4f4d\u30b5\u30ed\u30b2\u30fc\u30c8\u3092\u305d\u308c\u305e\u308c\u72ec\u7acb\u3057\u305f\u4e00\u6587\u5b57\u3068\u3057\u3066\u6271\u3044\u3001\u30b3\u30d4\u30fc\u3057\u3066\u3044\u308b\u69d8\u5b50\u304c\u78ba\u8a8d\u3067\u304d\u307e\u3059\u3002\nint len = s.length();\nassertEquals(len, 7); // ignores surrogate pair :P\nint[] actualCps = new int[len];\nfor (int i = 0; i < len; i++) {\n    char c = s.charAt(i);\n    actualCps[i] = (int) c;\n}\n// Ignores surrogate pairs... :(\n// BUT JavaScript unicode escape in browser accepts this format...:(\nassertEquals(actualCps, new int[] { 0x3042, 0xD842, 0xDFB7, 0x30D5, 0x309A, 0xD842, 0xDF9F });\n\n\u4eca\u5ea6\u306f\u30b5\u30ed\u30b2\u30fc\u30c8\u30da\u30a2\u3092\u8003\u616e\u3059\u308b String.codePointCount() \u3084 String.codePointAt() \u3092\u4f7f\u3063\u3066\u307f\u307e\u3059\u3002\u6700\u5f8c\u306e assertEquals() \u3092\u898b\u308b\u3068\u3001\u30b5\u30ed\u30b2\u30fc\u30c8\u30da\u30a2\u5bfe\u8c61\u6587\u5b57\u3092Unicode\u30b3\u30fc\u30c9\u30dd\u30a4\u30f3\u30c8\u306e16\u9032\u6570\u3067\u8868\u73fe\u3057\u305f\u6587\u5b57\u5217\u3068\u540c\u3058\u306b\u306a\u308a\u307e\u3059\u3002\u30b5\u30ed\u30b2\u30fc\u30c8\u30da\u30a2\u30921\u6587\u5b57\u3068\u3057\u3066\u30ab\u30a6\u30f3\u30c8\u3057\u3001\u6271\u3048\u3066\u3044\u308b\u69d8\u5b50\u304c\u78ba\u8a8d\u3067\u304d\u307e\u3059\u3002\nint countOfCp = s.codePointCount(0, len);\nassertEquals(countOfCp, 5); // GOOD.\n\nactualCps = new int[countOfCp];\nfor (int i = 0, j = 0, cp; i < len; i += Character.charCount(cp)) {\n    cp = s.codePointAt(i);\n    actualCps[j++] = cp;\n}\n// GOOD.\nassertEquals(actualCps, new int[] { 0x3042, 0x20BB7, 0x30D5, 0x309A, 0x20B9F });\n\n\u53c2\u8003\uff1a\n\nJava \u306b\u3088\u308b Unicode \u30b5\u30ed\u30b2\u30fc\u30c8\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\n\n\nhttps://www.ibm.com/developerworks/jp/ysl/library/java/j-unicode_surrogate/\n\u3053\u308c\u304cJava\u3067\u306eUnicode\u306e\u6271\u3044\u3084\u8ffd\u52a0\u3055\u308c\u305fAPI\u306b\u3064\u3044\u3066\u975e\u5e38\u306b\u8a73\u3057\u3044\u3002\u5b9f\u884c\u901f\u5ea6\u3078\u306e\u691c\u8a0e\u3082\u3055\u308c\u3066\u3044\u308b\u3002\n\n\n\u30b5\u30ed\u30b2\u30fc\u30c8\u30da\u30a2\u5165\u9580\uff1aCodeZine\n\n\nhttp://codezine.jp/article/detail/1592\n\n\nJIS2004\u306b\u542b\u307e\u308c\u308b\u30b5\u30ed\u30b2\u30fc\u30c8\u30da\u30a2\u3002Java\u3067\u306e\u6587\u5b57\u5217\u64cd\u4f5c\u3092\u691c\u8a3c\u3057\u3066\u307f\u305f | \u682a\u5f0f\u4f1a\u793e\u30e1\u30a4\u30d7\u30eb\u30b7\u30b9\u30c6\u30e0\u30ba\n\n\nhttp://maplesystems.co.jp/blog/all/programming/4709.html\n\n\n\n\u6587\u5b57\u30b3\u30fc\u30c9\u306e\u5fa9\u7fd2\u3092\u3061\u3087\u3063\u3068\u3057\u3066\u305f\u3089\u3001Unicode\u306e\u30b5\u30ed\u30b2\u30fc\u30c8\u30da\u30a2\u3063\u3066\u4eca\u307e\u3067\u6c17\u306b\u3057\u305f\u3053\u3068\u7121\u304b\u3063\u305f\u3053\u3068\u306b\u6c17\u304c\u4ed8\u304d\u307e\u3057\u305f\u3002\n\u3068\u3044\u3046\u3053\u3068\u3067\u3001\u304a\u4ed5\u4e8b\u3067\u3082\u6271\u3046Java\u3067\u3001\u30b5\u30ed\u30b2\u30fc\u30c8\u30da\u30a2\u306e\u6587\u5b57\u5217\u3092\u7d44\u307f\u7acb\u3066\u305f\u308a\u3001\u6587\u5b57\u6570\u3092\u30ab\u30a6\u30f3\u30c8\u3057\u305f\u308a\u3059\u308b\u7df4\u7fd2\u3092\u3057\u307e\u3057\u305f\u3002\n\n* https://github.com/msakamoto-sf/javasnack/blob/master/src/test/java/javasnack/langspecs/TestUnicodeSurrogatePairs.java\n\nJava 1.4\u307e\u3067\u306f\u30b5\u30ed\u30b2\u30fc\u30c8\u30da\u30a2\u306f\u8003\u616e\u3055\u308c\u3066\u307e\u305b\u3093\u3067\u3057\u305f\u304c\u30011.5\u306b\u306a\u308a\u3001\u30b5\u30ed\u30b2\u30fc\u30c8\u30da\u30a2\u3092\u8003\u616e\u3057\u305fAPI\u304c\u8ffd\u52a0\u3055\u308c\u307e\u3057\u305f\u3002\u305d\u3053\u3067\u3001\u4e0a\u8a18\u30c6\u30b9\u30c8\u30b3\u30fc\u30c9\u3067\u306f1.4\u7cfb\u307e\u3067\u306eAPI\u3068\u30011.5\u3067\u8ffd\u52a0\u3055\u308c\u305fAPI\u3092\u547c\u3073\u51fa\u3057\u3066\u307f\u3066\u3001\u6319\u52d5\u3092\u6bd4\u3079\u3066\u307e\u3059\u3002\n\n\u307e\u305a char \u578b\u3067\u30b5\u30ed\u30b2\u30fc\u30c8\u30da\u30a2\u3092\u8868\u73fe\u3057\u3066\u307f\u307e\u3059\u3002\u4e0a\u4f4d\u30b5\u30ed\u30b2\u30fc\u30c8\u3001\u4e0b\u4f4d\u30b5\u30ed\u30b2\u30fc\u30c8\u3092\u305d\u308c\u305e\u308c\u5225\u306echar\u578b\u5909\u6570\u3068\u3057\u3066\u5206\u3051\u3001\u914d\u5217\u306b\u7d44\u307f\u8fbc\u3093\u3067\u307e\u3059\u3002\n\n```java\nchar c1 = '\\u3042'; // HIRAGANA LETTER A, cp=12354\nchar c2 = '\\uD842'; // tuchi-yoshi (high), cp=134071\nchar c3 = '\\uDFB7'; // tuchi-yoshi (low), cp=134071\nchar c4 = '\\u30D5'; // katakana fu, cp=12501\nchar c5 = '\\u309A'; // handakuten, cp=12442\nchar c6 = '\\uD842'; // kuchi + shichi (high), cp=134047\nchar c7 = '\\uDF9F'; // kuchi + shichi (low), cp=134047\nString s = new String(new char[] { c1, c2, c3, c4, c5, c6, c7 });\nassertEquals(s, \"\\u3042\\uD842\\uDFB7\\u30D5\\u309A\\uD842\\uDF9F\");\n```\n\n\u7d9a\u3044\u3066\u30b5\u30ed\u30b2\u30fc\u30c8\u30da\u30a2\u3092\u8003\u616e\u3057\u306a\u3044 `String.length()` \u3084 `String.charAt()` \u3092\u4f7f\u3063\u3066\u6587\u5b57\u5217\u3092\u30b3\u30d4\u30fc\u3057\u3066\u307f\u307e\u3059\u3002\u6700\u5f8c\u306e `assertEquals()` \u3092\u898b\u308b\u3068\u3001\u30b5\u30ed\u30b2\u30fc\u30c8\u30da\u30a2\u304c\u5206\u5272\u3055\u308c\u305f\u72b6\u614b\u306e `int[]` \u304b\u3089\u751f\u6210\u3057\u305f\u6587\u5b57\u5217\u3068\u4e00\u81f4\u3057\u3066\u3044\u307e\u3059\u3002\u4e0a\u4f4d\u30b5\u30ed\u30b2\u30fc\u30c8\u30fb\u4e0b\u4f4d\u30b5\u30ed\u30b2\u30fc\u30c8\u3092\u305d\u308c\u305e\u308c\u72ec\u7acb\u3057\u305f\u4e00\u6587\u5b57\u3068\u3057\u3066\u6271\u3044\u3001\u30b3\u30d4\u30fc\u3057\u3066\u3044\u308b\u69d8\u5b50\u304c\u78ba\u8a8d\u3067\u304d\u307e\u3059\u3002\n\n```java\nint len = s.length();\nassertEquals(len, 7); // ignores surrogate pair :P\nint[] actualCps = new int[len];\nfor (int i = 0; i < len; i++) {\n    char c = s.charAt(i);\n    actualCps[i] = (int) c;\n}\n// Ignores surrogate pairs... :(\n// BUT JavaScript unicode escape in browser accepts this format...:(\nassertEquals(actualCps, new int[] { 0x3042, 0xD842, 0xDFB7, 0x30D5, 0x309A, 0xD842, 0xDF9F });\n```\n\n\u4eca\u5ea6\u306f\u30b5\u30ed\u30b2\u30fc\u30c8\u30da\u30a2\u3092\u8003\u616e\u3059\u308b `String.codePointCount()` \u3084 `String.codePointAt()` \u3092\u4f7f\u3063\u3066\u307f\u307e\u3059\u3002\u6700\u5f8c\u306e `assertEquals()` \u3092\u898b\u308b\u3068\u3001\u30b5\u30ed\u30b2\u30fc\u30c8\u30da\u30a2\u5bfe\u8c61\u6587\u5b57\u3092Unicode\u30b3\u30fc\u30c9\u30dd\u30a4\u30f3\u30c8\u306e16\u9032\u6570\u3067\u8868\u73fe\u3057\u305f\u6587\u5b57\u5217\u3068\u540c\u3058\u306b\u306a\u308a\u307e\u3059\u3002\u30b5\u30ed\u30b2\u30fc\u30c8\u30da\u30a2\u30921\u6587\u5b57\u3068\u3057\u3066\u30ab\u30a6\u30f3\u30c8\u3057\u3001\u6271\u3048\u3066\u3044\u308b\u69d8\u5b50\u304c\u78ba\u8a8d\u3067\u304d\u307e\u3059\u3002\n\n```java\nint countOfCp = s.codePointCount(0, len);\nassertEquals(countOfCp, 5); // GOOD.\n\nactualCps = new int[countOfCp];\nfor (int i = 0, j = 0, cp; i < len; i += Character.charCount(cp)) {\n    cp = s.codePointAt(i);\n    actualCps[j++] = cp;\n}\n// GOOD.\nassertEquals(actualCps, new int[] { 0x3042, 0x20BB7, 0x30D5, 0x309A, 0x20B9F });\n```\n\n\u53c2\u8003\uff1a\n\n* Java \u306b\u3088\u308b Unicode \u30b5\u30ed\u30b2\u30fc\u30c8\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\n    * https://www.ibm.com/developerworks/jp/ysl/library/java/j-unicode_surrogate/\n    * \u3053\u308c\u304cJava\u3067\u306eUnicode\u306e\u6271\u3044\u3084\u8ffd\u52a0\u3055\u308c\u305fAPI\u306b\u3064\u3044\u3066\u975e\u5e38\u306b\u8a73\u3057\u3044\u3002\u5b9f\u884c\u901f\u5ea6\u3078\u306e\u691c\u8a0e\u3082\u3055\u308c\u3066\u3044\u308b\u3002\n* \u30b5\u30ed\u30b2\u30fc\u30c8\u30da\u30a2\u5165\u9580\uff1aCodeZine\n    * http://codezine.jp/article/detail/1592\n* JIS2004\u306b\u542b\u307e\u308c\u308b\u30b5\u30ed\u30b2\u30fc\u30c8\u30da\u30a2\u3002Java\u3067\u306e\u6587\u5b57\u5217\u64cd\u4f5c\u3092\u691c\u8a3c\u3057\u3066\u307f\u305f | \u682a\u5f0f\u4f1a\u793e\u30e1\u30a4\u30d7\u30eb\u30b7\u30b9\u30c6\u30e0\u30ba\n    * http://maplesystems.co.jp/blog/all/programming/4709.html\n", "tags": ["Java", "unicode", "\u30b5\u30ed\u30b2\u30fc\u30c8\u30da\u30a2", "\u6587\u5b57\u5316\u3051"]}