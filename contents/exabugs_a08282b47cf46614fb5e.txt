{"context": " More than 1 year has passed since last update.\u672c\u8a18\u4e8b\u306f\u7a3c\u50cd\u30c6\u30b9\u30c8\u304c\u6210\u529f\u3057\u3066\u3044\u307e\u305b\u3093\n\n\u6982\u8981\nDTMF(\u30c8\u30fc\u30f3\u4fe1\u53f7)\u3092\u751f\u6210\u3057\u3066\u3001\u96fb\u8a71\u3092\u304b\u3051\u308b\u3002\n\n\u306f\u3058\u3081\u306b\n\u79c1\u306f\u3001\u96fb\u5b50\u5de5\u4f5c\u3067\u3069\u3046\u3057\u3066\u3082\u8a66\u3057\u3066\u307f\u305f\u3044\u3053\u3068\u304c\u3042\u308a\u307e\u3057\u305f\u3002\u305d\u308c\u304c\u3053\u306eDTMF\u3067\u3059\u3002\n\u6620\u753b\u300e\u540d\u63a2\u5075\u30b3\u30ca\u30f3 \u6226\u6144\u306e\u697d\u8b5c\u300f(2008\u5e74) \u3067\u306f\u3001\u30b3\u30ca\u30f3\u3068\u3082\u3046\u4e00\u4eba\u306e\u751f\u58f0\u306b\u3088\u3063\u3066\u3001110\u756a\u306b\u96fb\u8a71\u3092\u304b\u3051\u308b\u30b7\u30fc\u30f3\u304c\u51fa\u3066\u304d\u307e\u3059\u3002\u300c\u97f3\u75f4\u3067\u6709\u540d\u306a\u30b3\u30ca\u30f3\u304c\u7279\u5b9a\u5468\u6ce2\u6570\u306e\u58f0\u3092\u51fa\u305b\u308b\u306e\u304b\uff01\uff1f\u300d\u3068\u7591\u554f\u306b\u601d\u3044\u307e\u3057\u305f\u304c\u3001\u300c\u307e\u3041\u3001\u6620\u753b\u3060\u3057\u306d\u3002\u300d\u3068\u6d41\u3057\u3066\u3044\u307e\u3057\u305f\u3002\u305d\u3082\u305d\u3082\u3001\u58f0\u3067\u305d\u3093\u306a\u3053\u3068\u51fa\u6765\u306a\u3044\u3060\u308d\u3046\u3057\u3002\n\u3068\u3053\u308d\u304c\u3001\u305d\u306e\u5f8c\u3001\u671d\u65e5\u653e\u9001\u300e\u63a2\u5075!\u30ca\u30a4\u30c8\u30b9\u30af\u30fc\u30d7\u300f(2009\u5e74) \u3067\u306f\u3001\u30b3\u30ca\u30f3\u3092\u691c\u8a3c\u3059\u308b\u5f62\u3067\u3001\u97f3\u5927\u751f\u4e8c\u4eba\u306e\u751f\u58f0\u306b\u3088\u3063\u3066\u6642\u5831\u30b5\u30fc\u30d3\u30b9\u306b\u96fb\u8a71\u3092\u304b\u3051\u308b\u3053\u3068\u306b\u6210\u529f\u3057\u307e\u3057\u305f\u3002\u3053\u306e\u77ac\u9593\u3001\u9ce5\u808c\u304c\u7acb\u3061\u307e\u3057\u305f\u306d\u3002\u3082\u3046\u3001\u4f55\u5e74\u3082\u524d\u306e\u8a71\u3067\u3059\u304c\u3001\u9bae\u660e\u306b\u899a\u3048\u3066\u3044\u307e\u3059\u3002\n\u300cWROOM02 \u3067\u3001\u662f\u975e\u3001\u3084\u3063\u3066\u3084\u308d\u3046\uff01\u300d\u3068\u3044\u3046\u306e\u304c\u4eca\u56de\u306e\u4f01\u753b\u3067\u3059\u3002\n\u300c\u3053\u306e\u3054\u6642\u4e16\u3001Twilio \u7b49\u3001\u5c02\u7528\u306e\u96fb\u8a71API\u304c\u3042\u308b\u3058\u3083\u306a\u3044\u300d\u306f\u3001\u8a00\u308f\u306a\u3044\u3067\u3002\u305f\u3060\u3001\u3084\u3063\u3066\u307f\u305f\u3044\u3060\u3051\u3067\u3059\u304b\u3089\u3002\n\n\u4ed5\u69d8\n\nDTMF\n\nDTMF\uff08\u82f1: Dual-Tone Multi-Frequency\uff09\u306f\u30010\u304b\u30899\u307e\u3067\u306e\u6570\u5b57\u3068\u3001*\u3001#\u3001A\u3001B\u3001C\u3001D\u306e\u8a18\u53f7\u306e\u8a0816\u7a2e\u985e\u306e\u7b26\u53f7\u3092\u3001\u4f4e\u7fa4\u30fb\u9ad8\u7fa4\u306e2\u3064\u306e\u97f3\u58f0\u5468\u6ce2\u6570\u5e2f\u57df\u306e\u5408\u6210\u4fe1\u53f7\u97f3\u3067\u9001\u4fe1\u3059\u308b\u65b9\u6cd5\u3067\u3042\u308b\u3002\u5225\u540d\u300c\u30c8\u30fc\u30f3\u4fe1\u53f7\u300d\u300c\u30d7\u30c3\u30b7\u30e5\u4fe1\u53f7\u300d\u3068\u3082\u547c\u3070\u308c\u3001\u305d\u306e\u4fe1\u53f7\u97f3\u306f\u4eba\u9593\u306e\u53ef\u8074\u57df\u306b\u3042\u308b\u305f\u3081\u65e5\u672c\u8a9e\u3067\u306f\u300c\u30d4\u3001\u30dd\u3001\u30d1\u300d\u3068\u3082\u64ec\u97f3\u8a9e\u8868\u8a18\u3055\u308c\u308b\u3002\n\n\nhttps://ja.wikipedia.org/wiki/DTMF\nDTMF\u30de\u30c8\u30ea\u30c3\u30af\u30b9\n\n\n\n\n1209\n1336\n1477\n1633\n\n\n\n\n697\n1\n2\n3\nA\n\n\n770\n4\n5\n6\nB\n\n\n852\n7\n8\n9\nC\n\n\n941\n*\n0\n#\nD\n\n\n\n\n\u56de\u8def\u56f3\n\u30b9\u30b1\u30c3\u30c1\u3067\u6307\u5b9a\u3059\u308b\u3001IO5 / IO4 \u756a\u30d4\u30f3\u306b\u3001\u5727\u96fb\u30d6\u30b6\u30fc\u3092\u3064\u306a\u3052\u3066\u4e0b\u3055\u3044\u3002\n(\u3072\u3068\u3064\u306b\u307e\u3068\u3081\u3066\u3082\u5927\u4e08\u592b\u3060\u3068\u601d\u3046\u306e\u3067\u3059\u304c\u3001\u306a\u306b\u3076\u3093\u3001\u5b9f\u9a13\u304c\u6210\u529f\u3057\u3066\u3044\u306a\u3044\u306e\u3067\u308f\u304b\u308a\u307e\u305b\u3093)\nconst int OUT_HIGH = 5;\nconst int OUT_LOW  = 4;\n\n\n\u30b9\u30b1\u30c3\u30c1\n\u30b7\u30f3\u30b0\u30eb\u30b9\u30ec\u30c3\u30c9\u3067\u3001\u5468\u671f\u7684\u306a\u4e8c\u3064\u306e\u4fe1\u53f7\u306e HIGH / LOW \u3092\u5207\u308a\u66ff\u3048\u308b\u90e8\u5206\u304c\u9762\u5012\u3067\u3057\u305f\u3002\nconst int freqL[4] = { 697,  770,  852,  941};\nconst int freqH[4] = {1209, 1336, 1477, 1633};\nint freq[] = {\n  freqL[3], freqH[1], // 0\n  freqL[0], freqH[0], // 1\n  freqL[0], freqH[1], // 2\n  freqL[0], freqH[2], // 3\n  freqL[1], freqH[0], // 4\n  freqL[1], freqH[1], // 5\n  freqL[1], freqH[2], // 6\n  freqL[2], freqH[0], // 7\n  freqL[2], freqH[1], // 8\n  freqL[2], freqH[2], // 9\n  freqL[3], freqH[0], // *\n  freqL[3], freqH[2], // #\n  1, 2                // LED \u30c6\u30b9\u30c8\u7528 (1Hz/2Hz)\n};\n\nconst int OUT_HIGH = 5;\nconst int OUT_LOW  = 4;\n\nstruct Status {\n  bool highlow;\n  long delay;\n};\n\nconst int Pin[2] = {OUT_LOW, OUT_HIGH};\n\nStatus x[2];\n\nint tel[40] = {0};\n\n\nvoid setup() {\n  Serial.begin(115200);\n  Serial.println();\n\n  pinMode(Pin[0], OUTPUT);\n  pinMode(Pin[1], OUTPUT);\n\n  int N = sizeof(freq) / sizeof(freq[0]);\n  for (int i = 0; i < N; i++) {\n    freq[i] = 1000000 / freq[i] / 2; // micro sec\n  }\n\n  Serial.println(\"Input Telephone Number :\");\n}\n\nvoid loop() {\n//const int LP =  2; // 100 msec x  2\u56de\nconst int LP = 40; // 100 msec x 40\u56de (LED)\n\n  static int lp = 0;\n  static int c = 0;\n\n  static int telsize = 0;\n\n  for (int i = 0; 0 < Serial.available(); ) {\n    char ch = Serial.read();\n    if (ch == '\\n') {\n      c = 0;\n      break;\n    } else if ('0' <= ch && ch <= '9') {\n      tel[i++] = ch - '0';\n      telsize = i;\n    } else if ('X' == ch) {\n      // LED\u30c6\u30b9\u30c8\u7528\n      tel[i++] = 12;\n      telsize = i;\n    }\n  }\n\n\n  int telnum = tel[c];\n  int* numfreq = freq + telnum * 2;\n\n  // \u521d\u671f\u5316\n  if (lp == 0) {\n    for (int i = 0; i < 2; i++) {\n      digitalWrite(Pin[i], LOW);\n      x[i].highlow = false;\n      x[i].delay = 0;\n    }\n    Serial.print(c);\n    Serial.print(\" \");\n    Serial.println(telnum);\n  }\n\n  if (telsize <= c) {\n    delay(400);\n    return;\n  }\n\n    Serial.print(\"period : \");\n    Serial.print(numfreq[0]);\n    Serial.print(\" \");\n    Serial.print(numfreq[1]);\n    Serial.println(\" usec\");\n\n  if (LP < lp++) {\n    lp = 0;\n    c++;\n  }\n\n  // \u30eb\u30fc\u30d71\u56de\u306f100msec\u306b\u304a\u3055\u3081\u308b\n  long start = millis();\n  while ((millis() - start) < 100) {\n\n    // \u6b21\u306b\u53cd\u8ee2\u3059\u308b\u306e\u306f\u4f55\u79d2\u5f8c\u304b\u3092\u6c42\u3081\u308b\n    long min = 10000;\n    for (int i = 0; i < 2; i++) {\n      long d = numfreq[i] - x[i].delay;\n      if (d < min) {\n        min = d;\n      }\n    }\n\n    // \u6c42\u3081\u305f\u79d2\u6570\u5f85\u3064\n    delayMicroseconds(min);\n\n    // \u534a\u5468\u671f\u306b\u9054\u3057\u3066\u3044\u308c\u3070\u53cd\u8ee2\u3059\u308b\n    for (int i = 0; i < 2; i++) {\n      x[i].delay += min;\n      if (x[i].delay == numfreq[i]) {\n        digitalWrite(Pin[i], x[i].highlow ? HIGH : LOW);\n        x[i].delay = 0;\n        x[i].highlow = !x[i].highlow;\n      }\n    }\n\n  }\n}\n\n\n\u7a3c\u50cd\u30c6\u30b9\u30c8\n\u30b7\u30ea\u30a2\u30eb\u30e2\u30cb\u30bf\u304b\u3089\u3001\u96fb\u8a71\u756a\u53f7\u3092\u5165\u529b\u3057\u3066\u4e0b\u3055\u3044\u30021\u6570\u5b57\u3042\u305f\u308a 200msec \u306e\u9593\u3001\u97f3\u304c\u51fa\u307e\u3059\u3002\n\u96fb\u8a71\u306e\u767a\u8a71\u53e3\u306b\u5727\u96fb\u30d6\u30b6\u30fc\u3092\u8fd1\u3065\u3051\u308c\u3070\u3001\u96fb\u8a71\u304c\u304b\u304b\u308b\u306f\u305a\u3067\u3059\u3002(\u3068\u601d\u3063\u3066\u3044\u308b\u3002)\n1Hz / 2Hz \u3067 LED\u70b9\u706f \u3092\u8a66\u3059\u5834\u5408\u306f\u3001\u30b9\u30b1\u30c3\u30c1\u306e\u4ee5\u4e0b\u306e\u90e8\u5206\u3092\u5165\u308c\u66ff\u3048\u3066\u3001\u30b7\u30ea\u30a2\u30eb\u30e2\u30cb\u30bf\u304b\u3089\u300cXXX\u300d\u3092\u5165\u529b\u3057\u3066\u4e0b\u3055\u3044\u3002\n  const int LP =  2; // 100 msec x  2\u56de\n//const int LP = 40; // 100 msec x 40\u56de (LED)\n\n\n\u307e\u3068\u3081\n\u5b9f\u9a13\u304c\u6210\u529f\u3057\u306a\u304f\u3066\u3001\u3068\u3066\u3082\u3001\u6b8b\u5ff5\u3067\u3059\u3002\n\u81ea\u5b85\u306e\u96fb\u8a71\u304c\u3001\u5916\u90e8\u304b\u3089\u306e\u30c8\u30fc\u30f3\u4fe1\u53f7\u3092\u53d7\u3051\u4ed8\u3051\u306a\u3044\u306e\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u3002\n**\u672c\u8a18\u4e8b\u306f\u7a3c\u50cd\u30c6\u30b9\u30c8\u304c\u6210\u529f\u3057\u3066\u3044\u307e\u305b\u3093**\n\n## \u6982\u8981\nDTMF(**\u30c8\u30fc\u30f3\u4fe1\u53f7**)\u3092\u751f\u6210\u3057\u3066\u3001\u96fb\u8a71\u3092\u304b\u3051\u308b\u3002\n\n## \u306f\u3058\u3081\u306b\n\n\u79c1\u306f\u3001\u96fb\u5b50\u5de5\u4f5c\u3067\u3069\u3046\u3057\u3066\u3082\u8a66\u3057\u3066\u307f\u305f\u3044\u3053\u3068\u304c\u3042\u308a\u307e\u3057\u305f\u3002\u305d\u308c\u304c\u3053\u306eDTMF\u3067\u3059\u3002\n\n\u6620\u753b\u300e\u540d\u63a2\u5075\u30b3\u30ca\u30f3 \u6226\u6144\u306e\u697d\u8b5c\u300f(2008\u5e74) \u3067\u306f\u3001\u30b3\u30ca\u30f3\u3068\u3082\u3046\u4e00\u4eba\u306e\u751f\u58f0\u306b\u3088\u3063\u3066\u3001110\u756a\u306b\u96fb\u8a71\u3092\u304b\u3051\u308b\u30b7\u30fc\u30f3\u304c\u51fa\u3066\u304d\u307e\u3059\u3002\u300c\u97f3\u75f4\u3067\u6709\u540d\u306a\u30b3\u30ca\u30f3\u304c\u7279\u5b9a\u5468\u6ce2\u6570\u306e\u58f0\u3092\u51fa\u305b\u308b\u306e\u304b\uff01\uff1f\u300d\u3068\u7591\u554f\u306b\u601d\u3044\u307e\u3057\u305f\u304c\u3001\u300c\u307e\u3041\u3001\u6620\u753b\u3060\u3057\u306d\u3002\u300d\u3068\u6d41\u3057\u3066\u3044\u307e\u3057\u305f\u3002\u305d\u3082\u305d\u3082\u3001\u58f0\u3067\u305d\u3093\u306a\u3053\u3068\u51fa\u6765\u306a\u3044\u3060\u308d\u3046\u3057\u3002\n\n\u3068\u3053\u308d\u304c\u3001\u305d\u306e\u5f8c\u3001\u671d\u65e5\u653e\u9001\u300e\u63a2\u5075!\u30ca\u30a4\u30c8\u30b9\u30af\u30fc\u30d7\u300f(2009\u5e74) \u3067\u306f\u3001\u30b3\u30ca\u30f3\u3092\u691c\u8a3c\u3059\u308b\u5f62\u3067\u3001\u97f3\u5927\u751f\u4e8c\u4eba\u306e\u751f\u58f0\u306b\u3088\u3063\u3066\u6642\u5831\u30b5\u30fc\u30d3\u30b9\u306b\u96fb\u8a71\u3092\u304b\u3051\u308b\u3053\u3068\u306b\u6210\u529f\u3057\u307e\u3057\u305f\u3002\u3053\u306e\u77ac\u9593\u3001\u9ce5\u808c\u304c\u7acb\u3061\u307e\u3057\u305f\u306d\u3002\u3082\u3046\u3001\u4f55\u5e74\u3082\u524d\u306e\u8a71\u3067\u3059\u304c\u3001\u9bae\u660e\u306b\u899a\u3048\u3066\u3044\u307e\u3059\u3002\n\n\u300cWROOM02 \u3067\u3001\u662f\u975e\u3001\u3084\u3063\u3066\u3084\u308d\u3046\uff01\u300d\u3068\u3044\u3046\u306e\u304c\u4eca\u56de\u306e\u4f01\u753b\u3067\u3059\u3002\n\n\u300c\u3053\u306e\u3054\u6642\u4e16\u3001Twilio \u7b49\u3001\u5c02\u7528\u306e\u96fb\u8a71API\u304c\u3042\u308b\u3058\u3083\u306a\u3044\u300d\u306f\u3001\u8a00\u308f\u306a\u3044\u3067\u3002\u305f\u3060\u3001\u3084\u3063\u3066\u307f\u305f\u3044\u3060\u3051\u3067\u3059\u304b\u3089\u3002\n\n## \u4ed5\u69d8\n\n<dl>\n<dt>DTMF</dt>\n<dd>\nDTMF\uff08\u82f1: Dual-Tone Multi-Frequency\uff09\u306f\u30010\u304b\u30899\u307e\u3067\u306e\u6570\u5b57\u3068\u3001*\u3001#\u3001A\u3001B\u3001C\u3001D\u306e\u8a18\u53f7\u306e\u8a0816\u7a2e\u985e\u306e\u7b26\u53f7\u3092\u3001\u4f4e\u7fa4\u30fb\u9ad8\u7fa4\u306e2\u3064\u306e\u97f3\u58f0\u5468\u6ce2\u6570\u5e2f\u57df\u306e\u5408\u6210\u4fe1\u53f7\u97f3\u3067\u9001\u4fe1\u3059\u308b\u65b9\u6cd5\u3067\u3042\u308b\u3002\u5225\u540d\u300c\u30c8\u30fc\u30f3\u4fe1\u53f7\u300d\u300c\u30d7\u30c3\u30b7\u30e5\u4fe1\u53f7\u300d\u3068\u3082\u547c\u3070\u308c\u3001\u305d\u306e\u4fe1\u53f7\u97f3\u306f\u4eba\u9593\u306e\u53ef\u8074\u57df\u306b\u3042\u308b\u305f\u3081\u65e5\u672c\u8a9e\u3067\u306f\u300c\u30d4\u3001\u30dd\u3001\u30d1\u300d\u3068\u3082\u64ec\u97f3\u8a9e\u8868\u8a18\u3055\u308c\u308b\u3002\n</dd>\n</dl>\nhttps://ja.wikipedia.org/wiki/DTMF\n\nDTMF\u30de\u30c8\u30ea\u30c3\u30af\u30b9\n\n| |**1209**|**1336**|**1477**|**1633**|\n|---|:---:|:---:|:---:|:---:|\n|**697**|1|2|3|A|\n|**770**|4|5|6|B|\n|**852**|7|8|9|C|\n|**941**|*|0|#|D|\n\n\n## \u56de\u8def\u56f3\n\u30b9\u30b1\u30c3\u30c1\u3067\u6307\u5b9a\u3059\u308b\u3001IO5 / IO4 \u756a\u30d4\u30f3\u306b\u3001\u5727\u96fb\u30d6\u30b6\u30fc\u3092\u3064\u306a\u3052\u3066\u4e0b\u3055\u3044\u3002\n(\u3072\u3068\u3064\u306b\u307e\u3068\u3081\u3066\u3082\u5927\u4e08\u592b\u3060\u3068\u601d\u3046\u306e\u3067\u3059\u304c\u3001\u306a\u306b\u3076\u3093\u3001\u5b9f\u9a13\u304c\u6210\u529f\u3057\u3066\u3044\u306a\u3044\u306e\u3067\u308f\u304b\u308a\u307e\u305b\u3093)\n\n```\nconst int OUT_HIGH = 5;\nconst int OUT_LOW  = 4;\n```\n\n\n## \u30b9\u30b1\u30c3\u30c1\n\n\u30b7\u30f3\u30b0\u30eb\u30b9\u30ec\u30c3\u30c9\u3067\u3001\u5468\u671f\u7684\u306a\u4e8c\u3064\u306e\u4fe1\u53f7\u306e HIGH / LOW \u3092\u5207\u308a\u66ff\u3048\u308b\u90e8\u5206\u304c\u9762\u5012\u3067\u3057\u305f\u3002\n\n```cpp\nconst int freqL[4] = { 697,  770,  852,  941};\nconst int freqH[4] = {1209, 1336, 1477, 1633};\nint freq[] = {\n  freqL[3], freqH[1], // 0\n  freqL[0], freqH[0], // 1\n  freqL[0], freqH[1], // 2\n  freqL[0], freqH[2], // 3\n  freqL[1], freqH[0], // 4\n  freqL[1], freqH[1], // 5\n  freqL[1], freqH[2], // 6\n  freqL[2], freqH[0], // 7\n  freqL[2], freqH[1], // 8\n  freqL[2], freqH[2], // 9\n  freqL[3], freqH[0], // *\n  freqL[3], freqH[2], // #\n  1, 2                // LED \u30c6\u30b9\u30c8\u7528 (1Hz/2Hz)\n};\n\nconst int OUT_HIGH = 5;\nconst int OUT_LOW  = 4;\n\nstruct Status {\n  bool highlow;\n  long delay;\n};\n\nconst int Pin[2] = {OUT_LOW, OUT_HIGH};\n\nStatus x[2];\n\nint tel[40] = {0};\n\n\nvoid setup() {\n  Serial.begin(115200);\n  Serial.println();\n\n  pinMode(Pin[0], OUTPUT);\n  pinMode(Pin[1], OUTPUT);\n\n  int N = sizeof(freq) / sizeof(freq[0]);\n  for (int i = 0; i < N; i++) {\n    freq[i] = 1000000 / freq[i] / 2; // micro sec\n  }\n\n  Serial.println(\"Input Telephone Number :\");\n}\n\nvoid loop() {\n//const int LP =  2; // 100 msec x  2\u56de\nconst int LP = 40; // 100 msec x 40\u56de (LED)\n\n  static int lp = 0;\n  static int c = 0;\n\n  static int telsize = 0;\n\n  for (int i = 0; 0 < Serial.available(); ) {\n    char ch = Serial.read();\n    if (ch == '\\n') {\n      c = 0;\n      break;\n    } else if ('0' <= ch && ch <= '9') {\n      tel[i++] = ch - '0';\n      telsize = i;\n    } else if ('X' == ch) {\n      // LED\u30c6\u30b9\u30c8\u7528\n      tel[i++] = 12;\n      telsize = i;\n    }\n  }\n\n\n  int telnum = tel[c];\n  int* numfreq = freq + telnum * 2;\n\n  // \u521d\u671f\u5316\n  if (lp == 0) {\n    for (int i = 0; i < 2; i++) {\n      digitalWrite(Pin[i], LOW);\n      x[i].highlow = false;\n      x[i].delay = 0;\n    }\n    Serial.print(c);\n    Serial.print(\" \");\n    Serial.println(telnum);\n  }\n\n  if (telsize <= c) {\n    delay(400);\n    return;\n  }\n\n    Serial.print(\"period : \");\n    Serial.print(numfreq[0]);\n    Serial.print(\" \");\n    Serial.print(numfreq[1]);\n    Serial.println(\" usec\");\n\n  if (LP < lp++) {\n    lp = 0;\n    c++;\n  }\n\n  // \u30eb\u30fc\u30d71\u56de\u306f100msec\u306b\u304a\u3055\u3081\u308b\n  long start = millis();\n  while ((millis() - start) < 100) {\n\n    // \u6b21\u306b\u53cd\u8ee2\u3059\u308b\u306e\u306f\u4f55\u79d2\u5f8c\u304b\u3092\u6c42\u3081\u308b\n    long min = 10000;\n    for (int i = 0; i < 2; i++) {\n      long d = numfreq[i] - x[i].delay;\n      if (d < min) {\n        min = d;\n      }\n    }\n\n    // \u6c42\u3081\u305f\u79d2\u6570\u5f85\u3064\n    delayMicroseconds(min);\n\n    // \u534a\u5468\u671f\u306b\u9054\u3057\u3066\u3044\u308c\u3070\u53cd\u8ee2\u3059\u308b\n    for (int i = 0; i < 2; i++) {\n      x[i].delay += min;\n      if (x[i].delay == numfreq[i]) {\n        digitalWrite(Pin[i], x[i].highlow ? HIGH : LOW);\n        x[i].delay = 0;\n        x[i].highlow = !x[i].highlow;\n      }\n    }\n\n  }\n}\n```\n\n## \u7a3c\u50cd\u30c6\u30b9\u30c8\n\u30b7\u30ea\u30a2\u30eb\u30e2\u30cb\u30bf\u304b\u3089\u3001\u96fb\u8a71\u756a\u53f7\u3092\u5165\u529b\u3057\u3066\u4e0b\u3055\u3044\u30021\u6570\u5b57\u3042\u305f\u308a 200msec \u306e\u9593\u3001\u97f3\u304c\u51fa\u307e\u3059\u3002\n\u96fb\u8a71\u306e\u767a\u8a71\u53e3\u306b\u5727\u96fb\u30d6\u30b6\u30fc\u3092\u8fd1\u3065\u3051\u308c\u3070\u3001\u96fb\u8a71\u304c\u304b\u304b\u308b\u306f\u305a\u3067\u3059\u3002(\u3068\u601d\u3063\u3066\u3044\u308b\u3002)\n\n1Hz / 2Hz \u3067 LED\u70b9\u706f \u3092\u8a66\u3059\u5834\u5408\u306f\u3001\u30b9\u30b1\u30c3\u30c1\u306e\u4ee5\u4e0b\u306e\u90e8\u5206\u3092\u5165\u308c\u66ff\u3048\u3066\u3001\u30b7\u30ea\u30a2\u30eb\u30e2\u30cb\u30bf\u304b\u3089\u300cXXX\u300d\u3092\u5165\u529b\u3057\u3066\u4e0b\u3055\u3044\u3002\n\n```\n  const int LP =  2; // 100 msec x  2\u56de\n//const int LP = 40; // 100 msec x 40\u56de (LED)\n```\n\n## \u307e\u3068\u3081\n\n\u5b9f\u9a13\u304c\u6210\u529f\u3057\u306a\u304f\u3066\u3001\u3068\u3066\u3082\u3001\u6b8b\u5ff5\u3067\u3059\u3002\n\u81ea\u5b85\u306e\u96fb\u8a71\u304c\u3001\u5916\u90e8\u304b\u3089\u306e\u30c8\u30fc\u30f3\u4fe1\u53f7\u3092\u53d7\u3051\u4ed8\u3051\u306a\u3044\u306e\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u3002\n", "tags": ["ESP8266", "Arduino", "ArduinoIDE", "ESP-WROOM-02", "IoT"]}