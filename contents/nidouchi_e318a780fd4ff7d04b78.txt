{"context": "\u554f\u984c\u306f\u3053\u3061\u3089\nhttp://nabetani.sakura.ne.jp/hena/ordf01_twicel/\n\uff12\u30de\u30b9\u306b\u306a\u308b\u30d1\u30bf\u30fc\u30f3\u3092\u6d17\u3044\u51fa\u3057\u3066bit\u6f14\u7b97\u3067\u30de\u30c3\u30c1\u30f3\u30b0\u3059\u308b\u65b9\u91dd\u3002\n\u4ee5\u5916\u306b\u30d1\u30bf\u30fc\u30f3\u304c\u591a\u304b\u3063\u305f\u30fb\u30fb\u3002\ndef to_a(p)\n  pw = p.to_s(2)\n  fill = 64 - pw.size\n  pw = \"0\" * fill + pw if fill > 0\n  pw.scan(/\\d{8}/).to_a\nend\n\ndef rotate(p)\n  to_a(p).map{|e| e.split('')}.transpose.map{|e| e.join}.join.to_i(2)\nend\n\ndef rev_h(p)\n  to_a(p).map{|e| e.split('').reverse.join}.join.to_i(2)\nend\n\ndef rev_v(p)\n  to_a(p).reverse.join.to_i(2)\nend\n\ndef make_masks\n  masks = []\n  p0=(\"01100000\" +\n      \"10010000\" +\n      \"01100000\" +\n      \"00000000\" * 5).to_i(2)\n  m0=(\"01100000\" +\n      \"11110000\" +\n      \"01100000\" +\n      \"00000000\" * 5).to_i(2)\n  p = p0\n  m = m0\n  6.times{\n    5.times{\n      masks.push [p,m]\n      p >>= 1\n      m >>= 1\n    }\n    p >>= 3\n    m >>= 3\n  }\n  p = rotate(p0)\n  m = rotate(m0)\n  5.times{\n    6.times{\n      masks.push [p,m]\n      p >>= 1\n      m >>= 1\n    }\n    p >>= 2\n    m >>= 2\n  }\n  p = (\"00100000\" +\n       \"11000000\" +\n       \"00000000\" * 6).to_i(2)\n  m = (\"11100000\" +\n       \"11000000\" +\n       \"00000000\" * 6).to_i(2)\n  masks.push [p,m]\n  masks.push [rev_v(p),rev_v(m)]\n  masks.push [rev_h(p),rev_h(m)]\n  masks.push [rev_v(rev_h(p)),rev_v(rev_h(m))]\n  p = rotate(p)\n  m = rotate(m)\n  masks.push [p,m]\n  masks.push [rev_v(p),rev_v(m)]\n  masks.push [rev_h(p),rev_h(m)]\n  masks.push [rev_v(rev_h(p)),rev_v(rev_h(m))]\n\n  p0= (\"00100100\" +\n       \"00011000\" +\n       \"00000000\" * 6).to_i(2)\n  m0= (\"00111100\" +\n       \"00011000\" +\n       \"00000000\" * 6).to_i(2)\n  p = p0\n  m = m0\n  masks.push [p,m]\n  masks.push [rev_v(p),rev_v(m)]\n  p = rotate(p)\n  m = rotate(m)\n  masks.push [p,m]\n  masks.push [rev_h(p),rev_h(m)]\n\n  p = p0 << 1\n  m = m0 << 1\n  masks.push [p,m]\n  masks.push [rev_v(p),rev_v(m)]\n  masks.push [rev_h(p),rev_h(m)]\n  masks.push [rev_v(rev_h(p)),rev_v(rev_h(m))]\n  p = rotate(p)\n  m = rotate(m)\n  masks.push [p,m]\n  masks.push [rev_v(p),rev_v(m)]\n  masks.push [rev_h(p),rev_h(m)]\n  masks.push [rev_v(rev_h(p)),rev_v(rev_h(m))]\n\n  p = p0 << 2\n  m = m0 << 2\n  masks.push [p,m]\n  masks.push [rev_v(p),rev_v(m)]\n  masks.push [rev_h(p),rev_h(m)]\n  masks.push [rev_v(rev_h(p)),rev_v(rev_h(m))]\n  p = rotate(p)\n  m = rotate(m)\n  masks.push [p,m]\n  masks.push [rev_v(p),rev_v(m)]\n  masks.push [rev_h(p),rev_h(m)]\n  masks.push [rev_v(rev_h(p)),rev_v(rev_h(m))]\n\n  p0= (\"00101000\" +\n       \"00101000\" +\n       \"00010000\" +\n       \"00000000\" * 5).to_i(2)\n  m0= (\"00111000\" +\n       \"00111000\" +\n       \"00010000\" +\n       \"00000000\" * 5).to_i(2)\n  p = p0\n  m = m0\n  masks.push [p,m]\n  masks.push [rev_v(p),rev_v(m)]\n  masks.push [rev_h(p),rev_h(m)]\n  masks.push [rev_v(rev_h(p)),rev_v(rev_h(m))]\n  p = rotate(p)\n  m = rotate(m)\n  masks.push [p,m]\n  masks.push [rev_v(p),rev_v(m)]\n  masks.push [rev_h(p),rev_h(m)]\n  masks.push [rev_v(rev_h(p)),rev_v(rev_h(m))]\n\n  p = p0 << 1\n  m = m0 << 1\n  masks.push [p,m]\n  masks.push [rev_v(p),rev_v(m)]\n  masks.push [rev_h(p),rev_h(m)]\n  masks.push [rev_v(rev_h(p)),rev_v(rev_h(m))]\n  p = rotate(p)\n  m = rotate(m)\n  masks.push [p,m]\n  masks.push [rev_v(p),rev_v(m)]\n  masks.push [rev_h(p),rev_h(m)]\n  masks.push [rev_v(rev_h(p)),rev_v(rev_h(m))]\n\n  p = p0 << 2\n  m = m0 << 2\n  masks.push [p,m]\n  masks.push [rev_v(p),rev_v(m)]\n  masks.push [rev_h(p),rev_h(m)]\n  masks.push [rev_v(rev_h(p)),rev_v(rev_h(m))]\n  p = rotate(p)\n  m = rotate(m)\n  masks.push [p,m]\n  masks.push [rev_v(p),rev_v(m)]\n  masks.push [rev_h(p),rev_h(m)]\n  masks.push [rev_v(rev_h(p)),rev_v(rev_h(m))]\n  masks\nend\n\ndef solve(q)\n  bd = q.gsub('/','').to_i(16)\n  masks = make_masks\n  c = [0,0]\n  2.times{|i|\n    masks.each{|pat,mask|\n      c[i]+=1 if (bd & mask) == pat\n    }\n    bd = ~bd\n  }\n  c.join(',')\nend\n\nDATA.readlines.each do |line|\n  no,q,a = line.strip.split(/\\s+/)\n  ans = solve(q)\n  print no + \"\\t\" + ans\n  puts ans == a ? ' o' : ' x'\nend\n__END__\n6   db/00/db/00/db/00/aa/aa 0,13    \n0   dc/bc/a7/59/03/d5/d4/ea 2,3 \n1   ff/ff/ff/ff/ff/ff/ff/ff 0,0 \n2   00/00/00/00/00/00/00/00 0,0 \n3   cc/33/cc/33/cc/33/cc/33 16,16   \n4   aa/aa/55/55/aa/aa/55/55 16,16   \n5   ac/a3/5c/53/ca/3a/c5/35 8,8 \n6   db/00/db/00/db/00/aa/aa 0,13    \n7   24/24/db/24/24/db/24/24 0,12    \n8   d7/d7/e9/f1/f7/de/60/56 3,2 \n9   17/7d/64/9b/a5/39/53/a6 2,2 \n10  bb/8f/18/fb/89/c2/c7/35 1,2 \n11  6d/63/20/08/54/cd/32/4f 2,2 \n12  a9/ca/cd/46/99/e6/f0/30 2,2 \n13  5b/70/fd/45/e2/a1/ab/9a 1,2 \n14  24/e4/a8/12/e1/a6/3f/f3 2,1 \n15  79/32/2e/07/d5/10/e7/9d 2,2 \n16  60/bc/ab/ec/1f/eb/63/2c 4,2 \n17  a5/dd/92/4e/67/c6/dc/34 6,1 \n18  aa/96/6d/67/d2/a8/ac/90 3,2 \n19  95/72/7d/5c/47/dc/ef/99 4,0 \n20  17/d6/6a/27/1f/25/26/b8 2,1 \n21  f0/f3/76/c5/31/ca/6b/ae 1,2 \n22  01/59/26/fa/8c/70/12/cd 1,4 \n23  1a/c3/1f/0b/83/b6/81/0d 0,5 \n24  4c/49/05/cf/54/bb/1f/da 1,2 \n25  eb/7c/d5/09/2a/c2/14/6b 0,7 \n26  b4/d3/4c/c4/ed/19/e8/63 1,3 \n27  bd/bc/6d/60/9b/00/9a/32 2,4 \n28  94/97/3f/e3/c7/06/15/c0 2,2 \n29  5f/1d/67/16/b8/f7/0a/2a 2,2 \n30  df/e6/f9/4f/59/e9/1f/ee 3,0 \n31  5a/53/9a/9a/73/b4/37/07 3,2 \n32  bd/87/7c/e7/c0/37/82/da 2,3 \n33  3d/c0/13/ac/57/3d/15/78 2,2 \n34  63/64/54/3a/40/28/4e/4e 0,3 \n35  f6/81/c9/15/00/4c/a0/a8 1,4 \n36  19/41/df/f8/e3/74/6b/9b 4,2 \n37  d5/0b/dd/35/3b/d2/0b/6b 1,5 \n38  08/b7/91/f3/6e/3c/74/a0 0,0 \n39  b8/a8/b4/a6/93/2c/94/3f 0,0 \n40  88/22/21/ee/dc/19/43/01 0,0 \n41  e1/ee/35/bc/fc/00/8e/fe 0,0 \n42  3c/42/63/5f/27/47/07/90 0,0 \n\n\u554f\u984c\u306f\u3053\u3061\u3089\nhttp://nabetani.sakura.ne.jp/hena/ordf01_twicel/\n\uff12\u30de\u30b9\u306b\u306a\u308b\u30d1\u30bf\u30fc\u30f3\u3092\u6d17\u3044\u51fa\u3057\u3066bit\u6f14\u7b97\u3067\u30de\u30c3\u30c1\u30f3\u30b0\u3059\u308b\u65b9\u91dd\u3002\n\u4ee5\u5916\u306b\u30d1\u30bf\u30fc\u30f3\u304c\u591a\u304b\u3063\u305f\u30fb\u30fb\u3002\n\n```Ruby\ndef to_a(p)\n  pw = p.to_s(2)\n  fill = 64 - pw.size\n  pw = \"0\" * fill + pw if fill > 0\n  pw.scan(/\\d{8}/).to_a\nend\n\ndef rotate(p)\n  to_a(p).map{|e| e.split('')}.transpose.map{|e| e.join}.join.to_i(2)\nend\n\ndef rev_h(p)\n  to_a(p).map{|e| e.split('').reverse.join}.join.to_i(2)\nend\n\ndef rev_v(p)\n  to_a(p).reverse.join.to_i(2)\nend\n\ndef make_masks\n  masks = []\n  p0=(\"01100000\" +\n      \"10010000\" +\n      \"01100000\" +\n      \"00000000\" * 5).to_i(2)\n  m0=(\"01100000\" +\n      \"11110000\" +\n      \"01100000\" +\n      \"00000000\" * 5).to_i(2)\n  p = p0\n  m = m0\n  6.times{\n    5.times{\n      masks.push [p,m]\n      p >>= 1\n      m >>= 1\n    }\n    p >>= 3\n    m >>= 3\n  }\n  p = rotate(p0)\n  m = rotate(m0)\n  5.times{\n    6.times{\n      masks.push [p,m]\n      p >>= 1\n      m >>= 1\n    }\n    p >>= 2\n    m >>= 2\n  }\n  p = (\"00100000\" +\n       \"11000000\" +\n       \"00000000\" * 6).to_i(2)\n  m = (\"11100000\" +\n       \"11000000\" +\n       \"00000000\" * 6).to_i(2)\n  masks.push [p,m]\n  masks.push [rev_v(p),rev_v(m)]\n  masks.push [rev_h(p),rev_h(m)]\n  masks.push [rev_v(rev_h(p)),rev_v(rev_h(m))]\n  p = rotate(p)\n  m = rotate(m)\n  masks.push [p,m]\n  masks.push [rev_v(p),rev_v(m)]\n  masks.push [rev_h(p),rev_h(m)]\n  masks.push [rev_v(rev_h(p)),rev_v(rev_h(m))]\n\n  p0= (\"00100100\" +\n       \"00011000\" +\n       \"00000000\" * 6).to_i(2)\n  m0= (\"00111100\" +\n       \"00011000\" +\n       \"00000000\" * 6).to_i(2)\n  p = p0\n  m = m0\n  masks.push [p,m]\n  masks.push [rev_v(p),rev_v(m)]\n  p = rotate(p)\n  m = rotate(m)\n  masks.push [p,m]\n  masks.push [rev_h(p),rev_h(m)]\n\n  p = p0 << 1\n  m = m0 << 1\n  masks.push [p,m]\n  masks.push [rev_v(p),rev_v(m)]\n  masks.push [rev_h(p),rev_h(m)]\n  masks.push [rev_v(rev_h(p)),rev_v(rev_h(m))]\n  p = rotate(p)\n  m = rotate(m)\n  masks.push [p,m]\n  masks.push [rev_v(p),rev_v(m)]\n  masks.push [rev_h(p),rev_h(m)]\n  masks.push [rev_v(rev_h(p)),rev_v(rev_h(m))]\n\n  p = p0 << 2\n  m = m0 << 2\n  masks.push [p,m]\n  masks.push [rev_v(p),rev_v(m)]\n  masks.push [rev_h(p),rev_h(m)]\n  masks.push [rev_v(rev_h(p)),rev_v(rev_h(m))]\n  p = rotate(p)\n  m = rotate(m)\n  masks.push [p,m]\n  masks.push [rev_v(p),rev_v(m)]\n  masks.push [rev_h(p),rev_h(m)]\n  masks.push [rev_v(rev_h(p)),rev_v(rev_h(m))]\n\n  p0= (\"00101000\" +\n       \"00101000\" +\n       \"00010000\" +\n       \"00000000\" * 5).to_i(2)\n  m0= (\"00111000\" +\n       \"00111000\" +\n       \"00010000\" +\n       \"00000000\" * 5).to_i(2)\n  p = p0\n  m = m0\n  masks.push [p,m]\n  masks.push [rev_v(p),rev_v(m)]\n  masks.push [rev_h(p),rev_h(m)]\n  masks.push [rev_v(rev_h(p)),rev_v(rev_h(m))]\n  p = rotate(p)\n  m = rotate(m)\n  masks.push [p,m]\n  masks.push [rev_v(p),rev_v(m)]\n  masks.push [rev_h(p),rev_h(m)]\n  masks.push [rev_v(rev_h(p)),rev_v(rev_h(m))]\n\n  p = p0 << 1\n  m = m0 << 1\n  masks.push [p,m]\n  masks.push [rev_v(p),rev_v(m)]\n  masks.push [rev_h(p),rev_h(m)]\n  masks.push [rev_v(rev_h(p)),rev_v(rev_h(m))]\n  p = rotate(p)\n  m = rotate(m)\n  masks.push [p,m]\n  masks.push [rev_v(p),rev_v(m)]\n  masks.push [rev_h(p),rev_h(m)]\n  masks.push [rev_v(rev_h(p)),rev_v(rev_h(m))]\n\n  p = p0 << 2\n  m = m0 << 2\n  masks.push [p,m]\n  masks.push [rev_v(p),rev_v(m)]\n  masks.push [rev_h(p),rev_h(m)]\n  masks.push [rev_v(rev_h(p)),rev_v(rev_h(m))]\n  p = rotate(p)\n  m = rotate(m)\n  masks.push [p,m]\n  masks.push [rev_v(p),rev_v(m)]\n  masks.push [rev_h(p),rev_h(m)]\n  masks.push [rev_v(rev_h(p)),rev_v(rev_h(m))]\n  masks\nend\n\ndef solve(q)\n  bd = q.gsub('/','').to_i(16)\n  masks = make_masks\n  c = [0,0]\n  2.times{|i|\n    masks.each{|pat,mask|\n      c[i]+=1 if (bd & mask) == pat\n    }\n    bd = ~bd\n  }\n  c.join(',')\nend\n\nDATA.readlines.each do |line|\n  no,q,a = line.strip.split(/\\s+/)\n  ans = solve(q)\n  print no + \"\\t\" + ans\n  puts ans == a ? ' o' : ' x'\nend\n__END__\n6\tdb/00/db/00/db/00/aa/aa\t0,13\t\n0\tdc/bc/a7/59/03/d5/d4/ea\t2,3\t\n1\tff/ff/ff/ff/ff/ff/ff/ff\t0,0\t\n2\t00/00/00/00/00/00/00/00\t0,0\t\n3\tcc/33/cc/33/cc/33/cc/33\t16,16\t\n4\taa/aa/55/55/aa/aa/55/55\t16,16\t\n5\tac/a3/5c/53/ca/3a/c5/35\t8,8\t\n6\tdb/00/db/00/db/00/aa/aa\t0,13\t\n7\t24/24/db/24/24/db/24/24\t0,12\t\n8\td7/d7/e9/f1/f7/de/60/56\t3,2\t\n9\t17/7d/64/9b/a5/39/53/a6\t2,2\t\n10\tbb/8f/18/fb/89/c2/c7/35\t1,2\t\n11\t6d/63/20/08/54/cd/32/4f\t2,2\t\n12\ta9/ca/cd/46/99/e6/f0/30\t2,2\t\n13\t5b/70/fd/45/e2/a1/ab/9a\t1,2\t\n14\t24/e4/a8/12/e1/a6/3f/f3\t2,1\t\n15\t79/32/2e/07/d5/10/e7/9d\t2,2\t\n16\t60/bc/ab/ec/1f/eb/63/2c\t4,2\t\n17\ta5/dd/92/4e/67/c6/dc/34\t6,1\t\n18\taa/96/6d/67/d2/a8/ac/90\t3,2\t\n19\t95/72/7d/5c/47/dc/ef/99\t4,0\t\n20\t17/d6/6a/27/1f/25/26/b8\t2,1\t\n21\tf0/f3/76/c5/31/ca/6b/ae\t1,2\t\n22\t01/59/26/fa/8c/70/12/cd\t1,4\t\n23\t1a/c3/1f/0b/83/b6/81/0d\t0,5\t\n24\t4c/49/05/cf/54/bb/1f/da\t1,2\t\n25\teb/7c/d5/09/2a/c2/14/6b\t0,7\t\n26\tb4/d3/4c/c4/ed/19/e8/63\t1,3\t\n27\tbd/bc/6d/60/9b/00/9a/32\t2,4\t\n28\t94/97/3f/e3/c7/06/15/c0\t2,2\t\n29\t5f/1d/67/16/b8/f7/0a/2a\t2,2\t\n30\tdf/e6/f9/4f/59/e9/1f/ee\t3,0\t\n31\t5a/53/9a/9a/73/b4/37/07\t3,2\t\n32\tbd/87/7c/e7/c0/37/82/da\t2,3\t\n33\t3d/c0/13/ac/57/3d/15/78\t2,2\t\n34\t63/64/54/3a/40/28/4e/4e\t0,3\t\n35\tf6/81/c9/15/00/4c/a0/a8\t1,4\t\n36\t19/41/df/f8/e3/74/6b/9b\t4,2\t\n37\td5/0b/dd/35/3b/d2/0b/6b\t1,5\t\n38\t08/b7/91/f3/6e/3c/74/a0\t0,0\t\n39\tb8/a8/b4/a6/93/2c/94/3f\t0,0\t\n40\t88/22/21/ee/dc/19/43/01\t0,0\t\n41\te1/ee/35/bc/fc/00/8e/fe\t0,0\t\n42\t3c/42/63/5f/27/47/07/90\t0,0\t\n```\n", "tags": ["yhpg", "Ruby", "\u3069\u3046\u66f8\u304f"]}