{"context": " More than 1 year has passed since last update.\n\n\u306f\u3058\u3081\u306b\n\u30d1\u30b9\u30ef\u30fc\u30c9\u3092\u6697\u53f7\u5316\u3057\u3066YAML\u30d5\u30a1\u30a4\u30eb\u306b\u6301\u305f\u305b\u3066\u3001java\u3084ruby\u304a\u3088\u3073C#\u3067\u4f5c\u3063\u305f\u30c4\u30fc\u30eb\u3067\u5229\u7528\u3057\u305f\u3044\u3068\u3044\u3046\u3053\u3068\u3067\u305e\u308c\u305e\u308c\u306e\u8a00\u8a9e\u3067\u5b9f\u88c5\u65b9\u6cd5\u3092\u8abf\u3079\u305f\u6642\u306e\u30e1\u30e2\u306e\u4e2d\u304b\u3089\u3001\u4eca\u56de\u306fC#\u7248\u306b\u3064\u3044\u3066\u8a18\u8f09\u3057\u307e\u3059\u3002\n\n\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\nDLL\u3092\u4f5c\u6210\u3059\u308b\u5834\u5408\u306f\u3001\u300c\u30af\u30e9\u30b9\u30e9\u30a4\u30d6\u30e9\u30ea\u300d\u3068\u3057\u3066\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u3092\u4f5c\u6210\u3057\u307e\u3059\u3002\n\u307e\u305f\u3001VBScript\u3067\u4f7f\u7528\u3059\u308b\u5834\u5408\u306f\u3001\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u306e\u30d7\u30ed\u30d1\u30c6\u30a3\u3092\u958b\u304d\u3001\u30a2\u30bb\u30f3\u30d6\u30ea\u60c5\u5831\u306e\u7b87\u6240\u3067\u300c\u30a2\u30bb\u30f3\u30d6\u30ea\u3092 COM\u53c2\u7167\u53ef\u80fd\u306b\u3059\u308b(M)\u300d\u306b\u30c1\u30a7\u30c3\u30af\u3057\u3066\u304a\u304f\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\n\u203b\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u306e\u30d7\u30ed\u30d1\u30c6\u30a3\u3092\u958b\u304f\u3068\u30d3\u30eb\u30c9\u306e\u7b87\u6240\u306b\u300cCOM\u76f8\u4e92\u904b\u7528\u6a5f\u80fd\u306e\u767b\u9332(C)\u300d\u3068\u3044\u3063\u305f\u30c1\u30a7\u30c3\u30af\u30dc\u30c3\u30af\u30b9\u304c\u5b58\u5728\u3057\u307e\u3059\u304c\u3053\u3053\u306f\u30c1\u30a7\u30c3\u30af\u305b\u305a\u306b\u624b\u52d5\u3067\u300cregasm.exe\u300d\u3092\u4f7f\u3063\u3066\u30a2\u30bb\u30f3\u30d6\u30ea\u767b\u9332\u3059\u308b\u624b\u9806\u3068\u3057\u307e\u3059\u3002\n\nProjects\\CryptAesLib\\CryptAesLib\\CryptAesLib.cs\nusing System;\nusing System.Text;\nusing System.IO;\nusing System.Security.Cryptography;\nusing System.Runtime.InteropServices;\n\nnamespace CryptAesLib\n{\n  [ComVisible(true)]\n  [ClassInterface(ClassInterfaceType.AutoDual)]\n  public class ClsCrypt\n  {\n    private String _strErrMsg = \"\";\n    private String _strErrDmp = \"\";\n    private String _strResult = \"\";\n    private int _intKeySize = 128;\n    private int _intBlockSize = 128;\n    private Boolean _blnIsVerbose = false;\n    private byte[] _baKey;\n    private byte[] _baIv;\n    private static Random _objRndm = new Random();\n\n    public ClsCrypt()\n    {\n    }\n\n    [ComVisible(true)]\n    public String strDefKey { get { return \"default_secret_key#!!\"; } }\n    [ComVisible(true)]\n    public String strErrMsg { get { return _strErrMsg; } }\n    [ComVisible(true)]\n    public String strErrDmp { get { return _strErrDmp; } }\n    [ComVisible(true)]\n    public String strResult { get { return _strResult; } }\n    [ComVisible(true)]\n    public int intKeySize { get { return _intKeySize; } set { _intKeySize = value; } }\n    [ComVisible(true)]\n    public int intBlockSize { get { return _intBlockSize; } set { _intBlockSize = value; } }\n    [ComVisible(true)]\n    public Boolean blnIsVerbose { get { return _blnIsVerbose; } set { _blnIsVerbose = value; } }\n\n    [ComVisible(true)]\n    public Boolean encrypt(String strKey, String strPlain)\n    {\n      Boolean blnIsOk = true;\n      byte[] baEnc;\n      String strSalt = null;\n      try\n      {\n        strSalt = this.getRandomString(8);\n        byte[] baKey = Encoding.UTF8.GetBytes(strKey);\n        byte[] baPlain = Encoding.UTF8.GetBytes(strPlain);\n        byte[] baPrefix = Encoding.ASCII.GetBytes(\"Salted__\" + strSalt);\n        byte[] baSalt = Encoding.ASCII.GetBytes(strSalt);\n        if (!getOpenSSLKey(baKey, baSalt)) return false;\n        Rijndael objAes = Rijndael.Create();\n        objAes.Mode = CipherMode.CBC;\n        objAes.Padding = PaddingMode.PKCS7;\n        objAes.KeySize = _intKeySize;\n        objAes.BlockSize = _intBlockSize;\n        objAes.Key = _baKey;\n        objAes.IV = _baIv;\n        using (MemoryStream objMemStrm = new MemoryStream())\n        using (CryptoStream objCptStrm = new CryptoStream(objMemStrm, objAes.CreateEncryptor(), CryptoStreamMode.Write))\n        {\n          objCptStrm.Write(baPlain, 0, baPlain.Length);\n          objCptStrm.FlushFinalBlock();\n          baEnc = objMemStrm.ToArray();\n        }\n        byte[] baEncWithSalt = new byte[baPrefix.Length + baEnc.Length];\n        Buffer.BlockCopy(baPrefix, 0, baEncWithSalt, 0, baPrefix.Length);\n        Buffer.BlockCopy(baEnc, 0, baEncWithSalt, baPrefix.Length, baEnc.Length);\n        _strResult = Convert.ToBase64String(baEncWithSalt);\n      }\n      catch (Exception objExcptn)\n      {\n        blnIsOk = false;\n        _strErrMsg = objExcptn.Message;\n        _strErrDmp = objExcptn.StackTrace;\n      }\n      return blnIsOk;\n    }\n\n    [ComVisible(true)]\n    public Boolean decrypt(String strKey, String strBase64Enc)\n    {\n      Boolean blnIsOk = true;\n      byte[] baSalt = new byte[8];\n      byte[] baPlain;\n      try\n      {\n        byte[] baKey = Encoding.UTF8.GetBytes(strKey);\n        byte[] baEncWithSalt = Convert.FromBase64String(strBase64Enc);\n        for (int i = 0; i < 8; i++)\n        {\n          baSalt[i] = baEncWithSalt[(8) + i];\n        }\n        byte[] baEnc = new byte[baEncWithSalt.Length - 16];\n        for (int i = 0; i < baEncWithSalt.Length - 16; i++)\n        {\n          baEnc[i] = baEncWithSalt[16 + i];\n        }\n        if (!getOpenSSLKey(baKey, baSalt)) return false;\n        Rijndael objAes = Rijndael.Create();\n        objAes.Mode = CipherMode.CBC;\n        objAes.Padding = PaddingMode.PKCS7;\n        objAes.KeySize = _intKeySize;\n        objAes.BlockSize = _intBlockSize;\n        objAes.Key = _baKey;\n        objAes.IV = _baIv;\n        using (MemoryStream objMemStrm = new MemoryStream())\n        using (CryptoStream objCptStrm = new CryptoStream(objMemStrm, objAes.CreateDecryptor(), CryptoStreamMode.Write))\n        {\n          objCptStrm.Write(baEnc, 0, baEnc.Length);\n          objCptStrm.FlushFinalBlock();\n          baPlain = objMemStrm.ToArray();\n        }\n        _strResult = Encoding.UTF8.GetString(baPlain);\n      }\n      catch (Exception objExcptn)\n      {\n        blnIsOk = false;\n        _strErrMsg = objExcptn.Message;\n        _strErrDmp = objExcptn.StackTrace;\n      }\n      return blnIsOk;\n    }\n\n    private Boolean getOpenSSLKey(byte[] baKey, byte[] baSalt)\n    {\n      Boolean blnIsOk = true;\n      MD5 objMd5 = MD5.Create();\n      byte[] baHash1 = new byte[16];\n      byte[] baHash2 = new byte[16];\n      byte[] baPreKey = new byte[baKey.Length + baSalt.Length];\n      byte[] baPreIV = new byte[16 + baPreKey.Length];\n      byte[] baPreHash2 = new byte[16 + baPreKey.Length];\n      // 128\n      //   Key   = MD5(\u6697\u53f7\u30ad\u30fc + SALT)\n      //   IV    = MD5(Key + \u6697\u53f7\u30ad\u30fc + SALT)\n      // 192,256\n      //   Hash0 = ''\n      //   Hash1 = MD5(Hash0 + \u6697\u53f7\u30ad\u30fc + SALT)\n      //   Hash2 = MD5(Hash1 + \u6697\u53f7\u30ad\u30fc + SALT)\n      //   Hash3 = MD5(Hash2 + \u6697\u53f7\u30ad\u30fc + SALT)\n      //   Key   = Hash1 + Hash2\n      //   IV    = Hash3\n      try\n      {\n        Buffer.BlockCopy(baKey, 0, baPreKey, 0, baKey.Length);\n        Buffer.BlockCopy(baSalt, 0, baPreKey, baKey.Length, baSalt.Length);\n        if (128 == intKeySize)\n        {\n          _baKey = objMd5.ComputeHash(baPreKey);\n        }\n        else\n        {\n          baHash1 = objMd5.ComputeHash(baPreKey);\n          Buffer.BlockCopy(baHash1, 0, baPreHash2, 0, baHash1.Length);\n          Buffer.BlockCopy(baPreKey, 0, baPreHash2, baHash1.Length, baPreKey.Length);\n          baHash2 = objMd5.ComputeHash(baPreHash2);\n          _baKey = new byte[32];\n          Buffer.BlockCopy(baHash1, 0, _baKey, 0, baHash1.Length);\n          Buffer.BlockCopy(baHash2, 0, _baKey, baHash1.Length, baHash2.Length);\n        }\n        if (128 == intKeySize)\n        {\n          Buffer.BlockCopy(_baKey, 0, baPreIV, 0, _baKey.Length);\n          Buffer.BlockCopy(baPreKey, 0, baPreIV, _baKey.Length, baPreKey.Length);\n        }\n        else\n        {\n          Buffer.BlockCopy(baHash2, 0, baPreIV, 0, baHash2.Length);\n          Buffer.BlockCopy(baPreKey, 0, baPreIV, baHash2.Length, baPreKey.Length);\n        }\n        _baIv = objMd5.ComputeHash(baPreIV);\n      }\n      catch (Exception objExcptn)\n      {\n        blnIsOk = false;\n        _strErrMsg = objExcptn.Message;\n        _strErrDmp = objExcptn.StackTrace;\n      }\n      finally\n      {\n        objMd5.Clear();\n        objMd5 = null;\n      }\n      return blnIsOk;\n    }\n\n    private string getRandomString(int intLength)\n    {\n      byte[] baCharList = new byte[] {\n        0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6a,\n        0x6b, 0x6c, 0x6d, 0x6e, 0x6f, 0x70, 0x71, 0x72, 0x73, 0x74,\n        0x75, 0x76, 0x77, 0x78, 0x79, 0x7a\n      };\n      byte[] baRandom = new byte[intLength];\n      for (int i = 0; i < baRandom.Length; i++)\n      {\n        baRandom[i] = baCharList[_objRndm.Next(26)];\n      }\n      return Encoding.UTF8.GetString(baRandom);\n    }\n  }\n}\n\n\n\u5358\u4f53\u30c6\u30b9\u30c8\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\n\u9375\u9577\u304c128/192/256\u30d3\u30c3\u30c8\u305d\u308c\u305e\u308c\u3067\u554f\u984c\u306a\u304f\u6697\u53f7\u5316\u21d2\u5fa9\u53f7\u5316\u3067\u304d\u308b\u3053\u3068\u3092\u78ba\u8a8d\u3057\u3066\u304a\u304d\u307e\u3059\u3002\n\nProjects\\CryptAesLib\\UnitTestProject1\\UnitTest_CryptAesLib.cs\nusing System;\nusing Microsoft.VisualStudio.TestTools.UnitTesting;\nusing CryptAesLib;\n\nnamespace UnitTestProject1\n{\n  [TestClass]\n  public class UnitTest_CryptAesLib\n  {\n    private ClsCrypt _ClsCrypt = null;\n\n    [TestInitialize]\n    public void TestInitialize()\n    {\n      _ClsCrypt = new ClsCrypt();\n    }\n\n    [TestMethod]\n    public void encrypt_decrypt_128bit\u3067\u6697\u53f7\u5316\u304a\u3088\u3073\u5fa9\u53f7\u5316\u304c\u6b63\u5e38\u5b9f\u884c\u3055\u308c\u308b\u3053\u3068()\n    {\n      String strKey = \"secret_key_is_here!!!\";\n      String strExpect = \"\u30d1\u30b9\u30ef\u30fc\u30c9\u3092\u3053\u3053\u306b\u8a18\u8f09\";\n      _ClsCrypt.encrypt(strKey, strExpect);\n      _ClsCrypt.decrypt(strKey, _ClsCrypt.strResult);\n      Assert.AreEqual(_ClsCrypt.strResult, strExpect);\n    }\n\n    [TestMethod]\n    public void encrypt_decrypt_192it\u3067\u6697\u53f7\u5316\u304a\u3088\u3073\u5fa9\u53f7\u5316\u304c\u6b63\u5e38\u5b9f\u884c\u3055\u308c\u308b\u3053\u3068()\n    {\n      String strKey = \"secret_key_is_here!!!\";\n      String strExpect = \"\u30d1\u30b9\u30ef\u30fc\u30c9\u3092\u3053\u3053\u306b\u8a18\u8f09\";\n      _ClsCrypt.intKeySize = 192;\n      _ClsCrypt.encrypt(strKey, strExpect);\n      _ClsCrypt.decrypt(strKey, _ClsCrypt.strResult);\n      Assert.AreEqual(_ClsCrypt.strResult, strExpect);\n    }\n\n    [TestMethod]\n    public void encrypt_decrypt_256bit\u3067\u6697\u53f7\u5316\u304a\u3088\u3073\u5fa9\u53f7\u5316\u304c\u6b63\u5e38\u5b9f\u884c\u3055\u308c\u308b\u3053\u3068()\n    {\n      String strKey = \"secret_key_is_here!!!\";\n      String strExpect = \"\u30d1\u30b9\u30ef\u30fc\u30c9\u3092\u3053\u3053\u306b\u8a18\u8f09\";\n      _ClsCrypt.intKeySize = 256;\n      _ClsCrypt.encrypt(strKey, strExpect);\n      _ClsCrypt.decrypt(strKey, _ClsCrypt.strResult);\n      Assert.AreEqual(_ClsCrypt.strResult, strExpect);\n    }\n  }\n}\n\n\n\nVBScript\u306e\u5834\u5408\nVBScript\u3067\u4f7f\u7528\u3059\u308b\u306b\u306f\u524d\u3082\u3063\u3066\u300cregasm.exe\u300d\u3092\u4f7f\u3063\u3066\u30a2\u30bb\u30f3\u30d6\u30ea\u767b\u9332\u304c\u5fc5\u8981\u3067\u3059\u3002\n\u3053\u306e\u3068\u304d64bit OS\u3067\u3042\u308c\u3070cscript.exe\u304c64bit\u306832bit\u3067\u5225\u3005\u306b\u5b58\u5728\u3059\u308b\u3088\u3046\u306bregasm.exe\u308264bit\u306832bit\u7528\u306e\u3082\u306e\u304c\u305d\u308c\u305e\u308c\u5b58\u5728\u3057\u307e\u3059\u3002\n\n\u25a064bit cscript.exe\u3092\u4f7f\u7528\u3059\u308b\u5834\u5408\n\u3000C:\\Windows\\Microsoft.NET\\Framework64\\v4.0.30319\\regasm.exe\n\n\u25a032bit cscript.exe\u3092\u4f7f\u7528\u3059\u308b\u5834\u5408\n\u3000C:\\Windows\\Microsoft.NET\\Framework\\v4.0.30319\\regasm.exe\n\n\u30a2\u30bb\u30f3\u30d6\u30ea\u767b\u9332\uff08\u7ba1\u7406\u8005\u3068\u3057\u3066\u5b9f\u884c\uff09\nC:\\> C:\\Windows\\Microsoft.NET\\Framework64\\v4.0.30319\\regasm.exe /codebase C:\\Tool\\Infra\\dll\\CryptAesLib.dll\nMicrosoft .NET Framework Assembly Registration Utility 4.6.1038.0\nfor Microsoft .NET Framework Version 4.6.1038.0\nCopyright (C) Microsoft Corporation.  All rights reserved.\n\nRegAsm : warning RA0000 : \u7f72\u540d\u3055\u308c\u3066\u3044\u306a\u3044\u30a2\u30bb\u30f3\u30d6\u30ea\u3092 /codebase \u3092\u4f7f\u7528\u3057\u3066\u767b\u9332\u3059\u308b\u3068\u3001\u540c\u3058\u30b3\u30f3\u30d4\u30e5\u30fc\u30bf\u30fc\u306b\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3055\u308c\u308b\u305d\u306e\u4ed6\u306e\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u3068\u306e\u7af6\u5408\u304c\u751f\u3058\u308b\u53ef\u80fd\u6027\u304c\u3042\u308a\u307e\u3059\u3002/codeb\nase \u30b9\u30a4\u30c3\u30c1\u306f\u7f72\u540d\u3055\u308c\u305f\u30a2\u30bb\u30f3\u30d6\u30ea\u306e\u307f\u306b\u4f7f\u7528\u3067\u304d\u307e\u3059\u3002\u30a2\u30bb\u30f3\u30d6\u30ea\u306b\u53b3\u5bc6\u306a\u540d\u524d\u3092\u4ed8\u3051\u3066\u3001\u518d\u767b\u9332\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n\u578b\u306f\u6b63\u5e38\u306b\u767b\u9332\u3055\u308c\u307e\u3057\u305f\u3002\nC:\\>\n\n\n\u30a2\u30bb\u30f3\u30d6\u30ea\u767b\u9332\u89e3\u9664\uff08\u7ba1\u7406\u8005\u3068\u3057\u3066\u5b9f\u884c\uff09\nC:\\> C:\\Windows\\Microsoft.NET\\Framework64\\v4.0.30319\\regasm.exe /u C:\\Tool\\Infra\\dll\\CryptAesLib.dll\nMicrosoft .NET Framework Assembly Registration Utility 4.6.1038.0\nfor Microsoft .NET Framework Version 4.6.1038.0\nCopyright (C) Microsoft Corporation.  All rights reserved.\n\n\u578b\u306f\u6b63\u5e38\u306b\u767b\u9332\u304c\u89e3\u9664\u3055\u308c\u307e\u3057\u305f\u3002\nC:\\>\n\n\nVBScript\u30d5\u30a1\u30a4\u30eb\u306e\u4f5c\u6210\n\u6697\u53f7\u5316\u21d2\u5fa9\u53f7\u5316\u306e\u4f8b\u3067\u3059\u3002\nDim myObj\nWScript.StdOut.WriteLine \"01.\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u751f\u6210\u3057\u307e\u3059\"\nSet myObj = CreateObject(\"CryptAesLib.ClsCrypt\")\n\nstrSecretKey = \"secret_key_123###\"\nstrPassword = \"\u5065\u5eb7\u8a3a\u65ad\u3067\u30e1\u30bf\u30dc\u4e88\u5099\u8ecd\u306b\u5224\u5b9a\u3055\u308c\u30c0\u30a4\u30a8\u30c3\u30c8\u4e2d\"\n\nWScript.StdOut.WriteLine \"\u9375 = \" & strSecretKey\nWScript.StdOut.WriteLine \"\u30d1\u30b9\u30ef\u30fc\u30c9 = \" & strPassword\n\nWScript.StdOut.WriteLine \"10.\u6697\u53f7\u5316\"\nIf myObj.encrypt(strSecretKey, strPassword) Then\n  WScript.StdOut.WriteLine \"11.OK\"\n  WScript.StdOut.WriteLine myObj.strResult\nElse\n  WScript.StdOut.WriteLine \"12.NG\"\n  WScript.StdOut.WriteLine myObj.strErrMsg\n  WScript.Quit 20\nEnd If\n\nWScript.StdOut.WriteLine \"20.\u5fa9\u53f7\u5316\"\nIf myObj.decrypt(strSecretKey, myObj.strResult) Then\n  WScript.StdOut.WriteLine \"21.OK\"\n  WScript.StdOut.WriteLine myObj.strResult\nElse\n  WScript.StdOut.WriteLine \"22.NG\"\n  WScript.StdOut.WriteLine myObj.strErrMsg\n  WScript.Quit 20\nEnd If\nWScript.Quit 0\n\n\n\u5b9f\u884c\u78ba\u8a8d\n\u5b9f\u884c\u3057\u3066\u307f\u307e\u3059\u3002\nC:\\> cscript  C:\\sample\\test.vbs\nMicrosoft (R) Windows Script Host Version 5.812\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n01.\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u751f\u6210\u3057\u307e\u3059\n\u9375 = secret_key_123###\n\u30d1\u30b9\u30ef\u30fc\u30c9 = \u5065\u5eb7\u8a3a\u65ad\u3067\u30e1\u30bf\u30dc\u4e88\u5099\u8ecd\u306b\u5224\u5b9a\u3055\u308c\u30c0\u30a4\u30a8\u30c3\u30c8\u4e2d\n10.\u6697\u53f7\u5316\n11.OK\nU2FsdGVkX19vcXJuYnh4dOMFDf3ZINHqymTGBdBjAb9dUekWwxraFdCZIhVr7nkOBtftlhSLPKeefKKvsmfy5VNp2YzfImeGwHJaCUQmg/iZ/PQ8FIbR5ubDW5g4Atns\n20.\u5fa9\u53f7\u5316\n21.OK\n\u5065\u5eb7\u8a3a\u65ad\u3067\u30e1\u30bf\u30dc\u4e88\u5099\u8ecd\u306b\u5224\u5b9a\u3055\u308c\u30c0\u30a4\u30a8\u30c3\u30c8\u4e2d\nC:\\>\n\n\u554f\u984c\u306a\u304f\u3001\u6697\u53f7\u5316\u21d2\u5fa9\u53f7\u5316\u304c\u3067\u304d\u307e\u3057\u305f\u3002\n\nPowershell\u306e\u5834\u5408\n\u3053\u3053\u3067\u306f\u30b3\u30de\u30f3\u30c9\u30e9\u30a4\u30f3\u304b\u3089\u5b9f\u884c\u3057\u3066\u307f\u307e\u3059\u3002\nPS C:\\> $strPathFDll = \"C:\\Tool\\Infra\\dll\\CryptAesLib.dll\"\nPS C:\\> [Reflection.Assembly]::LoadFile($strPathFDll) | out-null\nPS C:\\> $objCrypt= New-Object CryptAesLib.ClsCrypt\nPS C:\\> $strSecretKey = \"secret_key_123###\"\nPS C:\\> $strPassword = \"\u5065\u5eb7\u8a3a\u65ad\u3067\u30e1\u30bf\u30dc\u4e88\u5099\u8ecd\u306b\u5224\u5b9a\u3055\u308c\u30c0\u30a4\u30a8\u30c3\u30c8\u4e2d\"\n\n\u307e\u305a\u306f128bit\u306e\u9375\u9577\u3067\u6697\u53f7\u5316\u3092\u5b9f\u884c\u3057\u307e\u3059\u3002\nPS C:\\> $objCrypt.encrypt($strSecretKey, $strPassword)\nTrue\nPS C:\\> Write-Output $objCrypt.strResult\nU2FsdGVkX19rdWxsZGNoaee4GUf/W8a5p2JmP6LfI6lKgMRD6HzRp1P7DumcCVyTGl5rZqIQtW6TM5XNZ/sK7P2Reo377q7E73yEm6ScPjr15smIs9u3WsiKBreh5ham\nPS C:\\>\n\n\u5fa9\u53f7\u5316\u3092\u5b9f\u884c\u3057\u307e\u3059\u3002\nPS C:\\> $objCrypt.decrypt($strSecretKey, $objCrypt.strResult)\nTrue\nPS C:\\> Write-Output $objCrypt.strResult\n\u5065\u5eb7\u8a3a\u65ad\u3067\u30e1\u30bf\u30dc\u4e88\u5099\u8ecd\u306b\u5224\u5b9a\u3055\u308c\u30c0\u30a4\u30a8\u30c3\u30c8\u4e2d\nPS C:\\>\n\n192bit\u3067\u306e\u6697\u53f7\u5316\u3068\u5fa9\u53f7\u5316\nPS C:\\> $objCrypt.intKeySize = 192\nPS C:\\> $objCrypt.encrypt($strSecretKey, $strPassword)\nTrue\nPS C:\\> Write-Output $objCrypt.strResult\nU2FsdGVkX19waW9nbmxndMEalkVlBITJTQkXlttHfAjFcDqf06qPZxAsLA4a2bZSV1ULKoZ3niExGIby+PDEI6EAhZ105fcHtaOtN9E4DZ6tH4/Vcssn4IQyx5JL5zbZ\nPS C:\\> $objCrypt.decrypt($strSecretKey, $objCrypt.strResult)\nTrue\nPS C:\\> Write-Output $objCrypt.strResult\n\u5065\u5eb7\u8a3a\u65ad\u3067\u30e1\u30bf\u30dc\u4e88\u5099\u8ecd\u306b\u5224\u5b9a\u3055\u308c\u30c0\u30a4\u30a8\u30c3\u30c8\u4e2d\nPS C:\\>\n\n256bit\u3067\u306e\u6697\u53f7\u5316\u3068\u5fa9\u53f7\u5316\nPS C:\\> $objCrypt.intKeySize = 256\nPS C:\\> $objCrypt.encrypt($strSecretKey, $strPassword)\nTrue\nPS C:\\> Write-Output $objCrypt.strResult\nU2FsdGVkX190eHJoZm15Z1S93tOEPJXYXxAM5jbcbZ7Bpvve/qPgodyzGmbloz7yxflZRD+OV5exXPhioBJ43RlpNYStTlcAQg/cN9a7lzzEK3hrXdaltFxtopAzIKlk\nPS C:\\> $objCrypt.decrypt($strSecretKey, $objCrypt.strResult)\nTrue\nPS C:\\> Write-Output $objCrypt.strResult\n\u5065\u5eb7\u8a3a\u65ad\u3067\u30e1\u30bf\u30dc\u4e88\u5099\u8ecd\u306b\u5224\u5b9a\u3055\u308c\u30c0\u30a4\u30a8\u30c3\u30c8\u4e2d\nPS C:\\>\n\n\nOpenSSL\u30b3\u30de\u30f3\u30c9\u3068\u4e92\u63db\u6027\u306e\u78ba\u8a8d\nOpenSSL\u3067\u6697\u53f7\u5316\u3057\u305f\u6587\u5b57\u5217\u3092Powershell(C#\u30af\u30e9\u30b9\u30e9\u30a4\u30d6\u30e9\u30ea)\u3067\u5fa9\u53f7\u5316\u3057\u3066\u307f\u307e\u3059\u3002\n[hostname ~]$ echo \"\u5065\u5eb7\u8a3a\u65ad\u3067\u30e1\u30bf\u30dc\u4e88\u5099\u8ecd\u306b\u5224\u5b9a\u3055\u308c\u30c0\u30a4\u30a8\u30c3\u30c8\u4e2d\" | openssl enc -aes-256-cbc -e -base64 -pass pass:secret_key_123### | tr -d '\\n'\nU2FsdGVkX193KTPnMxTdIWRd7YPX03jS+iysqTDabM5GL5I0iZY8rwLdct2wKcgcH5rMZPf3gyRATgPqoa2ExSituxr3TpGZNKqLMOggeba/qBdSIQl5DmpC1BusjE0h[hostname ~]$\n\nPS C:\\> $strPathFDll = \"C:\\Tool\\Infra\\dll\\CryptAesLib.dll\"\nPS C:\\> [Reflection.Assembly]::LoadFile($strPathFDll) | out-null\nPS C:\\> $objCrypt= New-Object CryptAesLib.ClsCrypt\nPS C:\\> $strSecretKey = \"secret_key_123###\"\nPS C:\\> $objCrypt.intKeySize = 256\nPS C:\\> $strPassword = \"U2FsdGVkX193KTPnMxTdIWRd7YPX03jS+iysqTDabM5GL5I0iZY8rwLdct2wKcgcH5rMZPf3gyRATgPqoa2ExSituxr3TpGZNKqLMOggeba/qBdSIQl5DmpC1BusjE0h\"\nPS C:\\> $objCrypt.decrypt($strSecretKey, $strPassword)\nTrue\nPS C:\\> Write-Output $objCrypt.strResult\n\u5065\u5eb7\u8a3a\u65ad\u3067\u30e1\u30bf\u30dc\u4e88\u5099\u8ecd\u306b\u5224\u5b9a\u3055\u308c\u30c0\u30a4\u30a8\u30c3\u30c8\u4e2d\n\nPS C:\\>\n\n\u7121\u4e8b\u306b\u5fa9\u53f7\u5316\u3067\u304d\u307e\u3057\u305f\u3002\n\u6b21\u306b\u3001\u4e0a\u3067Powershell(C#\u30af\u30e9\u30b9\u30e9\u30a4\u30d6\u30e9\u30ea)\u3067\u6697\u53f7\u5316\u3057\u305f\u6587\u5b57\u5217\u3092OpenSSL\u3067\u5fa9\u53f7\u5316\u3057\u3066\u307f\u307e\u3059\u3002\n\u6700\u521d\u306b64bit\u6bce\u306b\u6539\u884c\u3092\u4ed8\u4e0e\u3057\u307e\u3059\u3002\n[hostname ~]$ cat enc.txt\nU2FsdGVkX190eHJoZm15Z1S93tOEPJXYXxAM5jbcbZ7Bpvve/qPgodyzGmbloz7y\nxflZRD+OV5exXPhioBJ43RlpNYStTlcAQg/cN9a7lzzEK3hrXdaltFxtopAzIKlk\n[hostname ~]$\n\n\u5fa9\u53f7\u5316\u3057\u3066\u307f\u307e\u3059\u3002\n[hostname ~]$ cat enc.txt | openssl enc -aes-256-cbc -d -base64 -pass pass:secret_key_123###\n\u5065\u5eb7\u8a3a\u65ad\u3067\u30e1\u30bf\u30dc\u4e88\u5099\u8ecd\u306b\u5224\u5b9a\u3055\u308c\u30c0\u30a4\u30a8\u30c3\u30c8\u4e2d[hostname ~]$\n\n\u7121\u4e8b\u306b\u5fa9\u53f7\u5316\u3067\u304d\u307e\u3057\u305f\u3002\n# \u306f\u3058\u3081\u306b\n\n\u30d1\u30b9\u30ef\u30fc\u30c9\u3092\u6697\u53f7\u5316\u3057\u3066YAML\u30d5\u30a1\u30a4\u30eb\u306b\u6301\u305f\u305b\u3066\u3001java\u3084ruby\u304a\u3088\u3073C#\u3067\u4f5c\u3063\u305f\u30c4\u30fc\u30eb\u3067\u5229\u7528\u3057\u305f\u3044\u3068\u3044\u3046\u3053\u3068\u3067\u305e\u308c\u305e\u308c\u306e\u8a00\u8a9e\u3067\u5b9f\u88c5\u65b9\u6cd5\u3092\u8abf\u3079\u305f\u6642\u306e\u30e1\u30e2\u306e\u4e2d\u304b\u3089\u3001\u4eca\u56de\u306fC#\u7248\u306b\u3064\u3044\u3066\u8a18\u8f09\u3057\u307e\u3059\u3002\n\n# \u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\n\nDLL\u3092\u4f5c\u6210\u3059\u308b\u5834\u5408\u306f\u3001\u300c\u30af\u30e9\u30b9\u30e9\u30a4\u30d6\u30e9\u30ea\u300d\u3068\u3057\u3066\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u3092\u4f5c\u6210\u3057\u307e\u3059\u3002\n\n\u307e\u305f\u3001VBScript\u3067\u4f7f\u7528\u3059\u308b\u5834\u5408\u306f\u3001\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u306e\u30d7\u30ed\u30d1\u30c6\u30a3\u3092\u958b\u304d\u3001\u30a2\u30bb\u30f3\u30d6\u30ea\u60c5\u5831\u306e\u7b87\u6240\u3067\u300c\u30a2\u30bb\u30f3\u30d6\u30ea\u3092 COM\u53c2\u7167\u53ef\u80fd\u306b\u3059\u308b(M)\u300d\u306b\u30c1\u30a7\u30c3\u30af\u3057\u3066\u304a\u304f\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\n\u203b\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u306e\u30d7\u30ed\u30d1\u30c6\u30a3\u3092\u958b\u304f\u3068\u30d3\u30eb\u30c9\u306e\u7b87\u6240\u306b\u300cCOM\u76f8\u4e92\u904b\u7528\u6a5f\u80fd\u306e\u767b\u9332(C)\u300d\u3068\u3044\u3063\u305f\u30c1\u30a7\u30c3\u30af\u30dc\u30c3\u30af\u30b9\u304c\u5b58\u5728\u3057\u307e\u3059\u304c\u3053\u3053\u306f\u30c1\u30a7\u30c3\u30af\u305b\u305a\u306b\u624b\u52d5\u3067\u300cregasm.exe\u300d\u3092\u4f7f\u3063\u3066\u30a2\u30bb\u30f3\u30d6\u30ea\u767b\u9332\u3059\u308b\u624b\u9806\u3068\u3057\u307e\u3059\u3002\n\n```csharp:Projects\\CryptAesLib\\CryptAesLib\\CryptAesLib.cs\nusing System;\nusing System.Text;\nusing System.IO;\nusing System.Security.Cryptography;\nusing System.Runtime.InteropServices;\n\nnamespace CryptAesLib\n{\n  [ComVisible(true)]\n  [ClassInterface(ClassInterfaceType.AutoDual)]\n  public class ClsCrypt\n  {\n    private String _strErrMsg = \"\";\n    private String _strErrDmp = \"\";\n    private String _strResult = \"\";\n    private int _intKeySize = 128;\n    private int _intBlockSize = 128;\n    private Boolean _blnIsVerbose = false;\n    private byte[] _baKey;\n    private byte[] _baIv;\n    private static Random _objRndm = new Random();\n\n    public ClsCrypt()\n    {\n    }\n\n    [ComVisible(true)]\n    public String strDefKey { get { return \"default_secret_key#!!\"; } }\n    [ComVisible(true)]\n    public String strErrMsg { get { return _strErrMsg; } }\n    [ComVisible(true)]\n    public String strErrDmp { get { return _strErrDmp; } }\n    [ComVisible(true)]\n    public String strResult { get { return _strResult; } }\n    [ComVisible(true)]\n    public int intKeySize { get { return _intKeySize; } set { _intKeySize = value; } }\n    [ComVisible(true)]\n    public int intBlockSize { get { return _intBlockSize; } set { _intBlockSize = value; } }\n    [ComVisible(true)]\n    public Boolean blnIsVerbose { get { return _blnIsVerbose; } set { _blnIsVerbose = value; } }\n\n    [ComVisible(true)]\n    public Boolean encrypt(String strKey, String strPlain)\n    {\n      Boolean blnIsOk = true;\n      byte[] baEnc;\n      String strSalt = null;\n      try\n      {\n        strSalt = this.getRandomString(8);\n        byte[] baKey = Encoding.UTF8.GetBytes(strKey);\n        byte[] baPlain = Encoding.UTF8.GetBytes(strPlain);\n        byte[] baPrefix = Encoding.ASCII.GetBytes(\"Salted__\" + strSalt);\n        byte[] baSalt = Encoding.ASCII.GetBytes(strSalt);\n        if (!getOpenSSLKey(baKey, baSalt)) return false;\n        Rijndael objAes = Rijndael.Create();\n        objAes.Mode = CipherMode.CBC;\n        objAes.Padding = PaddingMode.PKCS7;\n        objAes.KeySize = _intKeySize;\n        objAes.BlockSize = _intBlockSize;\n        objAes.Key = _baKey;\n        objAes.IV = _baIv;\n        using (MemoryStream objMemStrm = new MemoryStream())\n        using (CryptoStream objCptStrm = new CryptoStream(objMemStrm, objAes.CreateEncryptor(), CryptoStreamMode.Write))\n        {\n          objCptStrm.Write(baPlain, 0, baPlain.Length);\n          objCptStrm.FlushFinalBlock();\n          baEnc = objMemStrm.ToArray();\n        }\n        byte[] baEncWithSalt = new byte[baPrefix.Length + baEnc.Length];\n        Buffer.BlockCopy(baPrefix, 0, baEncWithSalt, 0, baPrefix.Length);\n        Buffer.BlockCopy(baEnc, 0, baEncWithSalt, baPrefix.Length, baEnc.Length);\n        _strResult = Convert.ToBase64String(baEncWithSalt);\n      }\n      catch (Exception objExcptn)\n      {\n        blnIsOk = false;\n        _strErrMsg = objExcptn.Message;\n        _strErrDmp = objExcptn.StackTrace;\n      }\n      return blnIsOk;\n    }\n\n    [ComVisible(true)]\n    public Boolean decrypt(String strKey, String strBase64Enc)\n    {\n      Boolean blnIsOk = true;\n      byte[] baSalt = new byte[8];\n      byte[] baPlain;\n      try\n      {\n        byte[] baKey = Encoding.UTF8.GetBytes(strKey);\n        byte[] baEncWithSalt = Convert.FromBase64String(strBase64Enc);\n        for (int i = 0; i < 8; i++)\n        {\n          baSalt[i] = baEncWithSalt[(8) + i];\n        }\n        byte[] baEnc = new byte[baEncWithSalt.Length - 16];\n        for (int i = 0; i < baEncWithSalt.Length - 16; i++)\n        {\n          baEnc[i] = baEncWithSalt[16 + i];\n        }\n        if (!getOpenSSLKey(baKey, baSalt)) return false;\n        Rijndael objAes = Rijndael.Create();\n        objAes.Mode = CipherMode.CBC;\n        objAes.Padding = PaddingMode.PKCS7;\n        objAes.KeySize = _intKeySize;\n        objAes.BlockSize = _intBlockSize;\n        objAes.Key = _baKey;\n        objAes.IV = _baIv;\n        using (MemoryStream objMemStrm = new MemoryStream())\n        using (CryptoStream objCptStrm = new CryptoStream(objMemStrm, objAes.CreateDecryptor(), CryptoStreamMode.Write))\n        {\n          objCptStrm.Write(baEnc, 0, baEnc.Length);\n          objCptStrm.FlushFinalBlock();\n          baPlain = objMemStrm.ToArray();\n        }\n        _strResult = Encoding.UTF8.GetString(baPlain);\n      }\n      catch (Exception objExcptn)\n      {\n        blnIsOk = false;\n        _strErrMsg = objExcptn.Message;\n        _strErrDmp = objExcptn.StackTrace;\n      }\n      return blnIsOk;\n    }\n\n    private Boolean getOpenSSLKey(byte[] baKey, byte[] baSalt)\n    {\n      Boolean blnIsOk = true;\n      MD5 objMd5 = MD5.Create();\n      byte[] baHash1 = new byte[16];\n      byte[] baHash2 = new byte[16];\n      byte[] baPreKey = new byte[baKey.Length + baSalt.Length];\n      byte[] baPreIV = new byte[16 + baPreKey.Length];\n      byte[] baPreHash2 = new byte[16 + baPreKey.Length];\n      // 128\n      //   Key   = MD5(\u6697\u53f7\u30ad\u30fc + SALT)\n      //   IV    = MD5(Key + \u6697\u53f7\u30ad\u30fc + SALT)\n      // 192,256\n      //   Hash0 = ''\n      //   Hash1 = MD5(Hash0 + \u6697\u53f7\u30ad\u30fc + SALT)\n      //   Hash2 = MD5(Hash1 + \u6697\u53f7\u30ad\u30fc + SALT)\n      //   Hash3 = MD5(Hash2 + \u6697\u53f7\u30ad\u30fc + SALT)\n      //   Key   = Hash1 + Hash2\n      //   IV    = Hash3\n      try\n      {\n        Buffer.BlockCopy(baKey, 0, baPreKey, 0, baKey.Length);\n        Buffer.BlockCopy(baSalt, 0, baPreKey, baKey.Length, baSalt.Length);\n        if (128 == intKeySize)\n        {\n          _baKey = objMd5.ComputeHash(baPreKey);\n        }\n        else\n        {\n          baHash1 = objMd5.ComputeHash(baPreKey);\n          Buffer.BlockCopy(baHash1, 0, baPreHash2, 0, baHash1.Length);\n          Buffer.BlockCopy(baPreKey, 0, baPreHash2, baHash1.Length, baPreKey.Length);\n          baHash2 = objMd5.ComputeHash(baPreHash2);\n          _baKey = new byte[32];\n          Buffer.BlockCopy(baHash1, 0, _baKey, 0, baHash1.Length);\n          Buffer.BlockCopy(baHash2, 0, _baKey, baHash1.Length, baHash2.Length);\n        }\n        if (128 == intKeySize)\n        {\n          Buffer.BlockCopy(_baKey, 0, baPreIV, 0, _baKey.Length);\n          Buffer.BlockCopy(baPreKey, 0, baPreIV, _baKey.Length, baPreKey.Length);\n        }\n        else\n        {\n          Buffer.BlockCopy(baHash2, 0, baPreIV, 0, baHash2.Length);\n          Buffer.BlockCopy(baPreKey, 0, baPreIV, baHash2.Length, baPreKey.Length);\n        }\n        _baIv = objMd5.ComputeHash(baPreIV);\n      }\n      catch (Exception objExcptn)\n      {\n        blnIsOk = false;\n        _strErrMsg = objExcptn.Message;\n        _strErrDmp = objExcptn.StackTrace;\n      }\n      finally\n      {\n        objMd5.Clear();\n        objMd5 = null;\n      }\n      return blnIsOk;\n    }\n\n    private string getRandomString(int intLength)\n    {\n      byte[] baCharList = new byte[] {\n        0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6a,\n        0x6b, 0x6c, 0x6d, 0x6e, 0x6f, 0x70, 0x71, 0x72, 0x73, 0x74,\n        0x75, 0x76, 0x77, 0x78, 0x79, 0x7a\n      };\n      byte[] baRandom = new byte[intLength];\n      for (int i = 0; i < baRandom.Length; i++)\n      {\n        baRandom[i] = baCharList[_objRndm.Next(26)];\n      }\n      return Encoding.UTF8.GetString(baRandom);\n    }\n  }\n}\n```\n\n\u5358\u4f53\u30c6\u30b9\u30c8\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\n\n\u9375\u9577\u304c128/192/256\u30d3\u30c3\u30c8\u305d\u308c\u305e\u308c\u3067\u554f\u984c\u306a\u304f\u6697\u53f7\u5316\u21d2\u5fa9\u53f7\u5316\u3067\u304d\u308b\u3053\u3068\u3092\u78ba\u8a8d\u3057\u3066\u304a\u304d\u307e\u3059\u3002\n\n```csharp:Projects\\CryptAesLib\\UnitTestProject1\\UnitTest_CryptAesLib.cs\nusing System;\nusing Microsoft.VisualStudio.TestTools.UnitTesting;\nusing CryptAesLib;\n\nnamespace UnitTestProject1\n{\n  [TestClass]\n  public class UnitTest_CryptAesLib\n  {\n    private ClsCrypt _ClsCrypt = null;\n\n    [TestInitialize]\n    public void TestInitialize()\n    {\n      _ClsCrypt = new ClsCrypt();\n    }\n\n    [TestMethod]\n    public void encrypt_decrypt_128bit\u3067\u6697\u53f7\u5316\u304a\u3088\u3073\u5fa9\u53f7\u5316\u304c\u6b63\u5e38\u5b9f\u884c\u3055\u308c\u308b\u3053\u3068()\n    {\n      String strKey = \"secret_key_is_here!!!\";\n      String strExpect = \"\u30d1\u30b9\u30ef\u30fc\u30c9\u3092\u3053\u3053\u306b\u8a18\u8f09\";\n      _ClsCrypt.encrypt(strKey, strExpect);\n      _ClsCrypt.decrypt(strKey, _ClsCrypt.strResult);\n      Assert.AreEqual(_ClsCrypt.strResult, strExpect);\n    }\n\n    [TestMethod]\n    public void encrypt_decrypt_192it\u3067\u6697\u53f7\u5316\u304a\u3088\u3073\u5fa9\u53f7\u5316\u304c\u6b63\u5e38\u5b9f\u884c\u3055\u308c\u308b\u3053\u3068()\n    {\n      String strKey = \"secret_key_is_here!!!\";\n      String strExpect = \"\u30d1\u30b9\u30ef\u30fc\u30c9\u3092\u3053\u3053\u306b\u8a18\u8f09\";\n      _ClsCrypt.intKeySize = 192;\n      _ClsCrypt.encrypt(strKey, strExpect);\n      _ClsCrypt.decrypt(strKey, _ClsCrypt.strResult);\n      Assert.AreEqual(_ClsCrypt.strResult, strExpect);\n    }\n\n    [TestMethod]\n    public void encrypt_decrypt_256bit\u3067\u6697\u53f7\u5316\u304a\u3088\u3073\u5fa9\u53f7\u5316\u304c\u6b63\u5e38\u5b9f\u884c\u3055\u308c\u308b\u3053\u3068()\n    {\n      String strKey = \"secret_key_is_here!!!\";\n      String strExpect = \"\u30d1\u30b9\u30ef\u30fc\u30c9\u3092\u3053\u3053\u306b\u8a18\u8f09\";\n      _ClsCrypt.intKeySize = 256;\n      _ClsCrypt.encrypt(strKey, strExpect);\n      _ClsCrypt.decrypt(strKey, _ClsCrypt.strResult);\n      Assert.AreEqual(_ClsCrypt.strResult, strExpect);\n    }\n  }\n}\n```\n\n# VBScript\u306e\u5834\u5408\n\nVBScript\u3067\u4f7f\u7528\u3059\u308b\u306b\u306f\u524d\u3082\u3063\u3066\u300cregasm.exe\u300d\u3092\u4f7f\u3063\u3066\u30a2\u30bb\u30f3\u30d6\u30ea\u767b\u9332\u304c\u5fc5\u8981\u3067\u3059\u3002\n\u3053\u306e\u3068\u304d64bit OS\u3067\u3042\u308c\u3070cscript.exe\u304c64bit\u306832bit\u3067\u5225\u3005\u306b\u5b58\u5728\u3059\u308b\u3088\u3046\u306bregasm.exe\u308264bit\u306832bit\u7528\u306e\u3082\u306e\u304c\u305d\u308c\u305e\u308c\u5b58\u5728\u3057\u307e\u3059\u3002\n\n#### \u25a064bit cscript.exe\u3092\u4f7f\u7528\u3059\u308b\u5834\u5408\n\u3000C:\\Windows\\Microsoft.NET\\Framework64\\v4.0.30319\\regasm.exe\n#### \u25a032bit cscript.exe\u3092\u4f7f\u7528\u3059\u308b\u5834\u5408\n\u3000C:\\Windows\\Microsoft.NET\\Framework\\v4.0.30319\\regasm.exe\n\n### \u30a2\u30bb\u30f3\u30d6\u30ea\u767b\u9332\uff08\u7ba1\u7406\u8005\u3068\u3057\u3066\u5b9f\u884c\uff09\n\n```bat\nC:\\> C:\\Windows\\Microsoft.NET\\Framework64\\v4.0.30319\\regasm.exe /codebase C:\\Tool\\Infra\\dll\\CryptAesLib.dll\nMicrosoft .NET Framework Assembly Registration Utility 4.6.1038.0\nfor Microsoft .NET Framework Version 4.6.1038.0\nCopyright (C) Microsoft Corporation.  All rights reserved.\n\nRegAsm : warning RA0000 : \u7f72\u540d\u3055\u308c\u3066\u3044\u306a\u3044\u30a2\u30bb\u30f3\u30d6\u30ea\u3092 /codebase \u3092\u4f7f\u7528\u3057\u3066\u767b\u9332\u3059\u308b\u3068\u3001\u540c\u3058\u30b3\u30f3\u30d4\u30e5\u30fc\u30bf\u30fc\u306b\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3055\u308c\u308b\u305d\u306e\u4ed6\u306e\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u3068\u306e\u7af6\u5408\u304c\u751f\u3058\u308b\u53ef\u80fd\u6027\u304c\u3042\u308a\u307e\u3059\u3002/codeb\nase \u30b9\u30a4\u30c3\u30c1\u306f\u7f72\u540d\u3055\u308c\u305f\u30a2\u30bb\u30f3\u30d6\u30ea\u306e\u307f\u306b\u4f7f\u7528\u3067\u304d\u307e\u3059\u3002\u30a2\u30bb\u30f3\u30d6\u30ea\u306b\u53b3\u5bc6\u306a\u540d\u524d\u3092\u4ed8\u3051\u3066\u3001\u518d\u767b\u9332\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n\u578b\u306f\u6b63\u5e38\u306b\u767b\u9332\u3055\u308c\u307e\u3057\u305f\u3002\nC:\\>\n```\n\n### \u30a2\u30bb\u30f3\u30d6\u30ea\u767b\u9332\u89e3\u9664\uff08\u7ba1\u7406\u8005\u3068\u3057\u3066\u5b9f\u884c\uff09\n\n```bat\nC:\\> C:\\Windows\\Microsoft.NET\\Framework64\\v4.0.30319\\regasm.exe /u C:\\Tool\\Infra\\dll\\CryptAesLib.dll\nMicrosoft .NET Framework Assembly Registration Utility 4.6.1038.0\nfor Microsoft .NET Framework Version 4.6.1038.0\nCopyright (C) Microsoft Corporation.  All rights reserved.\n\n\u578b\u306f\u6b63\u5e38\u306b\u767b\u9332\u304c\u89e3\u9664\u3055\u308c\u307e\u3057\u305f\u3002\nC:\\>\n```\n\n### VBScript\u30d5\u30a1\u30a4\u30eb\u306e\u4f5c\u6210\n\n\u6697\u53f7\u5316\u21d2\u5fa9\u53f7\u5316\u306e\u4f8b\u3067\u3059\u3002\n\n```\nDim myObj\nWScript.StdOut.WriteLine \"01.\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u751f\u6210\u3057\u307e\u3059\"\nSet myObj = CreateObject(\"CryptAesLib.ClsCrypt\")\n\nstrSecretKey = \"secret_key_123###\"\nstrPassword = \"\u5065\u5eb7\u8a3a\u65ad\u3067\u30e1\u30bf\u30dc\u4e88\u5099\u8ecd\u306b\u5224\u5b9a\u3055\u308c\u30c0\u30a4\u30a8\u30c3\u30c8\u4e2d\"\n\nWScript.StdOut.WriteLine \"\u9375 = \" & strSecretKey\nWScript.StdOut.WriteLine \"\u30d1\u30b9\u30ef\u30fc\u30c9 = \" & strPassword\n\nWScript.StdOut.WriteLine \"10.\u6697\u53f7\u5316\"\nIf myObj.encrypt(strSecretKey, strPassword) Then\n  WScript.StdOut.WriteLine \"11.OK\"\n  WScript.StdOut.WriteLine myObj.strResult\nElse\n  WScript.StdOut.WriteLine \"12.NG\"\n  WScript.StdOut.WriteLine myObj.strErrMsg\n  WScript.Quit 20\nEnd If\n\nWScript.StdOut.WriteLine \"20.\u5fa9\u53f7\u5316\"\nIf myObj.decrypt(strSecretKey, myObj.strResult) Then\n  WScript.StdOut.WriteLine \"21.OK\"\n  WScript.StdOut.WriteLine myObj.strResult\nElse\n  WScript.StdOut.WriteLine \"22.NG\"\n  WScript.StdOut.WriteLine myObj.strErrMsg\n  WScript.Quit 20\nEnd If\nWScript.Quit 0\n```\n\n### \u5b9f\u884c\u78ba\u8a8d\n\n\u5b9f\u884c\u3057\u3066\u307f\u307e\u3059\u3002\n\n```bat\nC:\\> cscript  C:\\sample\\test.vbs\nMicrosoft (R) Windows Script Host Version 5.812\nCopyright (C) Microsoft Corporation. All rights reserved.\n\n01.\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u751f\u6210\u3057\u307e\u3059\n\u9375 = secret_key_123###\n\u30d1\u30b9\u30ef\u30fc\u30c9 = \u5065\u5eb7\u8a3a\u65ad\u3067\u30e1\u30bf\u30dc\u4e88\u5099\u8ecd\u306b\u5224\u5b9a\u3055\u308c\u30c0\u30a4\u30a8\u30c3\u30c8\u4e2d\n10.\u6697\u53f7\u5316\n11.OK\nU2FsdGVkX19vcXJuYnh4dOMFDf3ZINHqymTGBdBjAb9dUekWwxraFdCZIhVr7nkOBtftlhSLPKeefKKvsmfy5VNp2YzfImeGwHJaCUQmg/iZ/PQ8FIbR5ubDW5g4Atns\n20.\u5fa9\u53f7\u5316\n21.OK\n\u5065\u5eb7\u8a3a\u65ad\u3067\u30e1\u30bf\u30dc\u4e88\u5099\u8ecd\u306b\u5224\u5b9a\u3055\u308c\u30c0\u30a4\u30a8\u30c3\u30c8\u4e2d\nC:\\>\n```\n\n\u554f\u984c\u306a\u304f\u3001\u6697\u53f7\u5316\u21d2\u5fa9\u53f7\u5316\u304c\u3067\u304d\u307e\u3057\u305f\u3002\n\n# Powershell\u306e\u5834\u5408\n\n\u3053\u3053\u3067\u306f\u30b3\u30de\u30f3\u30c9\u30e9\u30a4\u30f3\u304b\u3089\u5b9f\u884c\u3057\u3066\u307f\u307e\u3059\u3002\n\n```bat\nPS C:\\> $strPathFDll = \"C:\\Tool\\Infra\\dll\\CryptAesLib.dll\"\nPS C:\\> [Reflection.Assembly]::LoadFile($strPathFDll) | out-null\nPS C:\\> $objCrypt= New-Object CryptAesLib.ClsCrypt\nPS C:\\> $strSecretKey = \"secret_key_123###\"\nPS C:\\> $strPassword = \"\u5065\u5eb7\u8a3a\u65ad\u3067\u30e1\u30bf\u30dc\u4e88\u5099\u8ecd\u306b\u5224\u5b9a\u3055\u308c\u30c0\u30a4\u30a8\u30c3\u30c8\u4e2d\"\n```\n\n\u307e\u305a\u306f128bit\u306e\u9375\u9577\u3067\u6697\u53f7\u5316\u3092\u5b9f\u884c\u3057\u307e\u3059\u3002\n\n```bat\nPS C:\\> $objCrypt.encrypt($strSecretKey, $strPassword)\nTrue\nPS C:\\> Write-Output $objCrypt.strResult\nU2FsdGVkX19rdWxsZGNoaee4GUf/W8a5p2JmP6LfI6lKgMRD6HzRp1P7DumcCVyTGl5rZqIQtW6TM5XNZ/sK7P2Reo377q7E73yEm6ScPjr15smIs9u3WsiKBreh5ham\nPS C:\\>\n```\n\n\u5fa9\u53f7\u5316\u3092\u5b9f\u884c\u3057\u307e\u3059\u3002\n\n```bat\nPS C:\\> $objCrypt.decrypt($strSecretKey, $objCrypt.strResult)\nTrue\nPS C:\\> Write-Output $objCrypt.strResult\n\u5065\u5eb7\u8a3a\u65ad\u3067\u30e1\u30bf\u30dc\u4e88\u5099\u8ecd\u306b\u5224\u5b9a\u3055\u308c\u30c0\u30a4\u30a8\u30c3\u30c8\u4e2d\nPS C:\\>\n```\n\n192bit\u3067\u306e\u6697\u53f7\u5316\u3068\u5fa9\u53f7\u5316\n\n```bat\nPS C:\\> $objCrypt.intKeySize = 192\nPS C:\\> $objCrypt.encrypt($strSecretKey, $strPassword)\nTrue\nPS C:\\> Write-Output $objCrypt.strResult\nU2FsdGVkX19waW9nbmxndMEalkVlBITJTQkXlttHfAjFcDqf06qPZxAsLA4a2bZSV1ULKoZ3niExGIby+PDEI6EAhZ105fcHtaOtN9E4DZ6tH4/Vcssn4IQyx5JL5zbZ\nPS C:\\> $objCrypt.decrypt($strSecretKey, $objCrypt.strResult)\nTrue\nPS C:\\> Write-Output $objCrypt.strResult\n\u5065\u5eb7\u8a3a\u65ad\u3067\u30e1\u30bf\u30dc\u4e88\u5099\u8ecd\u306b\u5224\u5b9a\u3055\u308c\u30c0\u30a4\u30a8\u30c3\u30c8\u4e2d\nPS C:\\>\n```\n\n256bit\u3067\u306e\u6697\u53f7\u5316\u3068\u5fa9\u53f7\u5316\n\n```bat\nPS C:\\> $objCrypt.intKeySize = 256\nPS C:\\> $objCrypt.encrypt($strSecretKey, $strPassword)\nTrue\nPS C:\\> Write-Output $objCrypt.strResult\nU2FsdGVkX190eHJoZm15Z1S93tOEPJXYXxAM5jbcbZ7Bpvve/qPgodyzGmbloz7yxflZRD+OV5exXPhioBJ43RlpNYStTlcAQg/cN9a7lzzEK3hrXdaltFxtopAzIKlk\nPS C:\\> $objCrypt.decrypt($strSecretKey, $objCrypt.strResult)\nTrue\nPS C:\\> Write-Output $objCrypt.strResult\n\u5065\u5eb7\u8a3a\u65ad\u3067\u30e1\u30bf\u30dc\u4e88\u5099\u8ecd\u306b\u5224\u5b9a\u3055\u308c\u30c0\u30a4\u30a8\u30c3\u30c8\u4e2d\nPS C:\\>\n```\n\n# OpenSSL\u30b3\u30de\u30f3\u30c9\u3068\u4e92\u63db\u6027\u306e\u78ba\u8a8d\n\nOpenSSL\u3067\u6697\u53f7\u5316\u3057\u305f\u6587\u5b57\u5217\u3092Powershell(C#\u30af\u30e9\u30b9\u30e9\u30a4\u30d6\u30e9\u30ea)\u3067\u5fa9\u53f7\u5316\u3057\u3066\u307f\u307e\u3059\u3002\n\n```\n[hostname ~]$ echo \"\u5065\u5eb7\u8a3a\u65ad\u3067\u30e1\u30bf\u30dc\u4e88\u5099\u8ecd\u306b\u5224\u5b9a\u3055\u308c\u30c0\u30a4\u30a8\u30c3\u30c8\u4e2d\" | openssl enc -aes-256-cbc -e -base64 -pass pass:secret_key_123### | tr -d '\\n'\nU2FsdGVkX193KTPnMxTdIWRd7YPX03jS+iysqTDabM5GL5I0iZY8rwLdct2wKcgcH5rMZPf3gyRATgPqoa2ExSituxr3TpGZNKqLMOggeba/qBdSIQl5DmpC1BusjE0h[hostname ~]$\n```\n\n```bat\nPS C:\\> $strPathFDll = \"C:\\Tool\\Infra\\dll\\CryptAesLib.dll\"\nPS C:\\> [Reflection.Assembly]::LoadFile($strPathFDll) | out-null\nPS C:\\> $objCrypt= New-Object CryptAesLib.ClsCrypt\nPS C:\\> $strSecretKey = \"secret_key_123###\"\nPS C:\\> $objCrypt.intKeySize = 256\nPS C:\\> $strPassword = \"U2FsdGVkX193KTPnMxTdIWRd7YPX03jS+iysqTDabM5GL5I0iZY8rwLdct2wKcgcH5rMZPf3gyRATgPqoa2ExSituxr3TpGZNKqLMOggeba/qBdSIQl5DmpC1BusjE0h\"\nPS C:\\> $objCrypt.decrypt($strSecretKey, $strPassword)\nTrue\nPS C:\\> Write-Output $objCrypt.strResult\n\u5065\u5eb7\u8a3a\u65ad\u3067\u30e1\u30bf\u30dc\u4e88\u5099\u8ecd\u306b\u5224\u5b9a\u3055\u308c\u30c0\u30a4\u30a8\u30c3\u30c8\u4e2d\n\nPS C:\\>\n```\n\n\u7121\u4e8b\u306b\u5fa9\u53f7\u5316\u3067\u304d\u307e\u3057\u305f\u3002\n\n\u6b21\u306b\u3001\u4e0a\u3067Powershell(C#\u30af\u30e9\u30b9\u30e9\u30a4\u30d6\u30e9\u30ea)\u3067\u6697\u53f7\u5316\u3057\u305f\u6587\u5b57\u5217\u3092OpenSSL\u3067\u5fa9\u53f7\u5316\u3057\u3066\u307f\u307e\u3059\u3002\n\u6700\u521d\u306b64bit\u6bce\u306b\u6539\u884c\u3092\u4ed8\u4e0e\u3057\u307e\u3059\u3002\n\n```\n[hostname ~]$ cat enc.txt\nU2FsdGVkX190eHJoZm15Z1S93tOEPJXYXxAM5jbcbZ7Bpvve/qPgodyzGmbloz7y\nxflZRD+OV5exXPhioBJ43RlpNYStTlcAQg/cN9a7lzzEK3hrXdaltFxtopAzIKlk\n[hostname ~]$\n```\n\n\u5fa9\u53f7\u5316\u3057\u3066\u307f\u307e\u3059\u3002\n\n```\n[hostname ~]$ cat enc.txt | openssl enc -aes-256-cbc -d -base64 -pass pass:secret_key_123###\n\u5065\u5eb7\u8a3a\u65ad\u3067\u30e1\u30bf\u30dc\u4e88\u5099\u8ecd\u306b\u5224\u5b9a\u3055\u308c\u30c0\u30a4\u30a8\u30c3\u30c8\u4e2d[hostname ~]$\n```\n\n\u7121\u4e8b\u306b\u5fa9\u53f7\u5316\u3067\u304d\u307e\u3057\u305f\u3002\n", "tags": ["Windows", "C#", "PowerShell", "VBScript"]}