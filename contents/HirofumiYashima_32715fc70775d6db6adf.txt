{"context": " More than 1 year has passed since last update.\n\n\u4ee5\u4e0b\u306e\u6559\u79d1\u66f8\u306e pp.98\uff5e100 \u6240\u53ce\u306e Java\u30b9\u30af\u30ea\u30d7\u30c8\u3092Python\u306b\u7f6e\u304d\u63db\u3048\u3066\u5b9f\u884c\u3057\u3066\u3001\uff08\u9006\u884c\u5217\u3092\u6c42\u3081\u305f\u3044\u884c\u5217\u3092\u3001\u4fc2\u6570\u884c\u5217\u90e8\u5206\u306b\u6301\u3064\uff09\u9023\u7acb\u65b9\u7a0b\u5f0f\u3092\u300c\u6383\u304d\u51fa\u3057\u6cd5\u300d\u3067\u89e3\u304f\u3053\u3068\u3067\u3001\u9006\u884c\u5217\u3092\u6c42\u3081\u308b\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u3092Python\u3067\u5b9f\u88c5\u3057\u3066\u307f\u307e\u3059\u3002\n\n\n\u8d64\u9593\u4e16\u7d00\uff08\u8457\uff09\u300eJava2\u306b\u3088\u308b\u6570\u5024\u8a08\u7b97\u300f\uff08\u6280\u5831\u5802\u51fa\u7248\uff09\n\n\n\n\nPython \u30b9\u30af\u30ea\u30d7\u30c8\n\n\ninverse_matrix_by_sweep.py\n#!/Usr/bin/env python\n# -*- coding: utf-8 -*- \n\nimport math\nimport numpy as np\n\nmessage_1 = \"\"\"                                                                                                                                    \n\n\u6383\u304d\u51fa\u3057\u6cd5\u3092\u4f7f\u3063\u3066\u3001\u5165\u529b\u3057\u305f\u884c\u5217\u306e\u9006\u884c\u5217\u3092\u51fa\u529b\u3057\u307e\u3059\u3002                                                                              \n\u9006\u884c\u5217\u3092\u6c42\u3081\u305f\u3044\u884c\u5217\u306e\u884c\u6570\u3092\u5165\u529b\u3057\u3066\u304f\u3060\u3055\u3044\u3002\"\"\"\n\nmessage_2 = \"\"\"                                                                                                                                    \n\n\u9006\u884c\u5217\u3092\u6c42\u3081\u305f\u3044\u884c\u5217\u306e\u8981\u7d20\u3092\u3001\uff11\u3064\u305a\u3064\u9806\u756a\u306b\u5165\u529b\u3057\u3066\u304f\u3060\u3055\u3044\u3002\"\"\"\n\nmessage_3 = \"\"\"\n\n\u884c\u5217\u306e\u5bfe\u89d2\u8981\u7d20\u304c 0 \u306e\u5834\u5408\u3001\u6383\u304d\u51fa\u3057\u6cd5\u3092\u4f7f\u3063\u3066\u3001\u53d7\u3051\u53d6\u3063\u305f\u884c\u5217\u3092\u4fc2\u6570\u884c\u5217\u306b\u3082\u3064\u9023\u7acb\u65b9\u7a0b\u5f0f\u306e\u89e3\u3092\u6c42\u3081\u308b\u3053\u3068\u3067\u3001\u9006\u884c\u5217\u3092\u5f97\u308b\u3053\u3068\u304c\u3067\u304d\u306a\u3044\n\u305f\u3081\u3001\u30d4\u30dc\u30c3\u30c8\u64cd\u4f5c\uff08\u90e8\u5206\u9078\u629e\uff09\u3092\u884c\u3044\u3001\u5fc5\u8981\u306b\u5fdc\u3058\u3066\u3001\u884c\u5217\u306e\u884c\u3092\u5165\u308c\u66ff\u3048\u307e\u3059\u3002\"\"\"\n\n\n### main()\u30e1\u30bd\u30c3\u30c9\ndef main():\n    print(message_1)\n    n = int(raw_input())\n\n    # \u30e6\u30fc\u30b6\u304c\u5165\u529b\u3057\u305f\u6570\u5024 n \u3092\u3082\u3068\u306b\u3001\u884c\u5217\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u521d\u671f\u5316\u5ba3\u8a00\n    matrix = [[0 for col in range(2*n)] for row in range(n)]\n\n    #\u30e6\u30fc\u30b6\u304b\u3089\u53d7\u3051\u53d6\u3063\u305f\u6570\u5024\u3092\uff11\u3064\u3065\u3064\u3001\u884c\u5217matrix \u306e\u8981\u7d20\u306b\u4ee3\u5165\u3057\u3066\u3044\u304f\u51e6\u7406\n    print(message_2)\n\n    for i in range(n):\n        for j in range(n):\n            print(\"\\n\u884c\u5217({i}, {j})\u8981\u7d20\u306e\u5024\u3092\u5165\u529b\u3057\u3066\u304f\u3060\u3055\u3044\u3002\".format(i=i, j=j))\n            float_num = float(raw_input())\n            matrix[i][j] = float_num\n\n    print(\"\\n\u5165\u529b\u304c\u5b8c\u4e86\u3057\u307e\u3057\u305f\u3002\")\n    print(\"\\n\u3053\u308c\u304b\u3089\u89e3\u3092\u6c42\u3081\u308b\u9023\u7acb\u65b9\u7a0b\u5f0f\u306e\u4fc2\u6570\u884c\u5217\u306b\u3001\u53f3\u8fba\u306e\u5024\u306e\u5217\u3092\u52a0\u3048\u305f\u884c\u5217\u306f\u3001\u4ee5\u4e0b\u306b\u306a\u308a\u307e\u3059\u3002\\n\\n {matrix}\".format(matrix=np.array(matrix)))\n\n    #\u884c\u5217matrix \u306b\u5bfe\u3059\u308b\u30e6\u30fc\u30b6\u6307\u5b9a\u6570\u5024\u306e\u4ee3\u5165\u7d42\u4e86\n\n    print(message_3)\n\n\n    for i in range(n):\n        for j in range(2*n):\n            matrix[i][j] == float(0.0)\n            if((j-n) == i):\n                matrix[i][j] = float(1.0)\n\n\n    for k in range(n):  # \u30d4\u30dc\u30c3\u30c8\u64cd\u4f5c\uff08\u90e8\u5206\u9078\u629e\uff09\u3092\u884c\u3046 pivot()\u30e1\u30bd\u30c3\u30c9\u306b\u30eb\u30fc\u30d7\u3067k\u306e\u5024\u3092\u305a\u3089\u3057\u306a\u304c\u3089\u9806\u6b21\u5b9f\u884c\n        pivot(k, n, matrix)\n        if matrix[k][k] == float(0.0): # \u89e3\u306e\u5b58\u5728\u5224\u5b9a\u3092\u5b9f\u65bd \n            print(\"\u9006\u884c\u5217\u306f\u5b58\u5728\u3057\u307e\u305b\u3093\u3002\")\n        sweep(k, n, matrix) #\u6383\u304d\u51fa\u3057\u64cd\u4f5c\u3092\u884c\u3046 sweep()\u30e1\u30bd\u30c3\u30c9\u3092\u5b9f\u884c\n\n    print(\"\\n\u5165\u529b\u3057\u305f\u884c\u5217\u3092\u4fc2\u6570\u884c\u5217\u306b\u3082\u3064\u9023\u7acb\u65b9\u7a0b\u5f0f\u3092\u89e3\u3044\u305f\u7d50\u679c\u3001\u9023\u7acb\u65b9\u7a0b\u5f0f\u306e\u62e1\u5927\u4fc2\u6570\u884c\u5217\u306f\u4ee5\u4e0b\u306b\u306a\u308a\u307e\u3057\u305f\u3002\\n\\n{matrix}\".format(matrix=np.array(matrix)))\n\n    print(\"\\n\\n\u9006\u884c\u5217\u3092\u8a08\u7b97\u3057\u3066\u6c42\u3081\u305f\u7d50\u679c\u306f\u3001\u4e0b\u8a18\u306e\u3068\u304a\u308a\u3067\u3059\uff08\u5c0f\u6570\u70b9\u7b2c3\u4f4d\u306b\u307e\u308b\u3081\u3066\u3044\u307e\u3059\uff09\u3002\\n\")\n\n    for i in range(n):\n        output = \"\"\n        j = n\n        while(j < 2*n):\n            output +=\"{element}  \".format(element=matrix[i][j])\n            j += 1\n\n        print(output) #matrix \u306e\u5404\u884c\u3092\uff11\u884c\u3054\u3068\u306b\u51fa\u529b\u3002\n\n    print(\"\\n\u30d7\u30ed\u30b0\u30e9\u30e0\u306e\u51e6\u7406\u304c\u6b63\u5e38\u306b\u7d42\u308f\u308a\u307e\u3057\u305f\u3002\")\n\n##### main()\u30e1\u30bd\u30c3\u30c9\u4ee5\u4e0a\n\n##### pivot\u64cd\u4f5c\uff08\u90e8\u5206\u9078\u629e\uff09\uff1d\uff1d\u884c\u5217eq \u306e\u5bfe\u89d2\u8981\u7d20\u304c\uff10\u306e\u5834\u5408\u3001\u884c\u3092\u5165\u308c\u66ff\u3048\u3066\u3001\n##### \u6383\u304d\u51fa\u3057\u6cd5\u3067\u9023\u7acb\u65b9\u7a0b\u5f0f\u306e\u89e3\u3092\u6c42\u3081\u3089\u308c\u308b\u3088\u3046\u306b\u3059\u308b\u30e1\u30bd\u30c3\u30c9\u3092\u5b9a\u7fa9\ndef pivot(k, n, matrix):\n    max = math.fabs(matrix[k][k])\n    c = k\n    a = (k+1)\n    while(a < n):\n        if(math.fabs(matrix[a][k]) > max):\n            max = math.fabs(matrix[a][k])\n            c = a\n        a += 1\n\n    if(c != k):\n        for b in range(2*n):\n            temp = matrix[c][b]\n            eq[c][b] = matrix[k][b]\n            eq[k][b] = temp\n            b += 1\n\n##### \u6383\u304d\u51fa\u3057\u6cd5\u3092\u884c\u3046\u30e1\u30bd\u30c3\u30c9\u3092\u5b9a\u7fa9\ndef sweep(k, n, matrix):\n    f = matrix[k][k]\n\n    b = k\n    while(b < 2*n):\n        matrix[k][b] = float(matrix[k][b])/float(f)\n        b += 1\n\n    for a in range(n):\n        g = matrix[a][k]\n        if(a != k):\n            b = k\n            while(b < 2*n):\n                matrix[a][b] = matrix[a][b] - g*matrix[k][b]\n                b += 1\n\n##### \u3053\u306e\u30b9\u30af\u30ea\u30d7\u30c8\u30d5\u30a1\u30a4\u30eb\u3092\u5b9f\u884c\u3057\u305f\u3068\u304d\u306b\u3001main()\u30e1\u30bd\u30c3\u30c9\u5b9f\u884c\nif __name__ == '__main__':\n    main()\n\n\n\n\u5b9f\u884c\n\n\u4ee5\u4e0b\u306e\u884c\u5217\u306b\u3064\u3044\u3066\u3001\u9006\u884c\u5217\u3092\u6c42\u3081\u307e\u3059\u3002\n\\left(\n\\begin{array}{l} 2 & -1 & 0\\\\\n                 -1 & 2 & -1\\\\\n                 0 & -1 & 2\\\\\n\\end{array}\n\\right)\n$${\\left(\n\\begin{array}{l} 2 & -1 & 0\\\\\n                 -1 & 2 & -1\\\\\n                 0 & -1 & 2\\\\\n\\end{array}\n\\right)\n}$$\n\n\n\n\n\u5b9f\u884c\u7d50\u679c\n\nPython\u30d7\u30ed\u30b0\u30e9\u30e0\u304c\u8fd4\u3057\u305f\u6f14\u7b97\u7d50\u679c\u306f\u3001\u4ee5\u4e0b\u3067\u3059\u3002\n\n\u203b \u884c\u5217\u306e\u5404\u8981\u7d20\u306e\u5024\u306f\u3001\u5c0f\u6570\u70b9\u7b2c\uff12\u4f4d\u306b\u4e38\u3081\u3066\u3044\u307e\u3059\u3002\n\n\\left(\n\\begin{array}{l} 0.75 & 0.5 & 0.25\\\\\n                 0.5  & 1.0 & 0.5\\\\\n                 0.25 & 0.5 & 0.75\\\\\n\\end{array}\n\\right)\n$${\\left(\n\\begin{array}{l} 0.75 & 0.5 & 0.25\\\\\n                 0.5  & 1.0 & 0.5\\\\\n                 0.25 & 0.5 & 0.75\\\\\n\\end{array}\n\\right)\n}$$\n\n\n\u7d50\u679c\u306e\u691c\u8a3c\n\n\nnumpy \u53ca\u3073 scipy \u30e2\u30b8\u30e5\u30fc\u30eb \u3092\u4f7f\u3063\u3066\u6c42\u3081\u305f\u9006\u884c\u5217\u306e\u7d50\u679c\u3068\u3064\u304d\u5408\u308f\u305b\u3066\u307f\u307e\u3059\u3002\n\n\nnumpy.linalg.inv()\n\n\nPython 2.7\nimport numpy as np\n\nmatrix = np.array([[2, -1, 0], [-1, 2, -1], [0, -1, 2]])\n\nprint(matrix)\n\ninverse_matrix = np.linalg.inv(matrix)\nprint(inverse_matrix)\n\n\n\n\n\u8a08\u7b97\u7d50\u679c\n\n\\left(\n\\begin{array}{l} 0.75 & 0.5 & 0.25\\\\\n                 0.5  & 1 & 0.5\\\\\n                 0.25 & 0.5 & 0.75\\\\\n\\end{array}\n\\right)\n$${\\left(\n\\begin{array}{l} 0.75 & 0.5 & 0.25\\\\\n                 0.5  & 1 & 0.5\\\\\n                 0.25 & 0.5 & 0.75\\\\\n\\end{array}\n\\right)\n}$$\n\nscipy.I\n\n\nPython 2.7\nfrom scipy import *\n\nmatrix = [[2, -1, 0], [-1, 2, -1], [0, -1, 2]]\nprint(matrix)\n\nmatrix = mat(matrix)\nprint(matrix)\n\ninverse_matrix = matrix.I\nprint(inverse_matrix)\n\n\n\n\n\u8a08\u7b97\u7d50\u679c\n\n\\left(\n\\begin{array}{l} 0.75 & 0.5 & 0.25\\\\\n                 0.5  & 1 & 0.5\\\\\n                 0.25 & 0.5 & 0.75\\\\\n\\end{array}\n\\right)\n$${\\left(\n\\begin{array}{l} 0.75 & 0.5 & 0.25\\\\\n                 0.5  & 1 & 0.5\\\\\n                 0.25 & 0.5 & 0.75\\\\\n\\end{array}\n\\right)\n}$$\n\n\u7d50\u679c\u306f\u4e00\u81f4\u3057\u307e\u3057\u305f\uff01\n\n#### **\u4ee5\u4e0b\u306e\u6559\u79d1\u66f8\u306e _pp.98\uff5e100_ \u6240\u53ce\u306e Java\u30b9\u30af\u30ea\u30d7\u30c8\u3092Python\u306b\u7f6e\u304d\u63db\u3048\u3066\u5b9f\u884c\u3057\u3066\u3001\uff08\u9006\u884c\u5217\u3092\u6c42\u3081\u305f\u3044\u884c\u5217\u3092\u3001\u4fc2\u6570\u884c\u5217\u90e8\u5206\u306b\u6301\u3064\uff09\u9023\u7acb\u65b9\u7a0b\u5f0f\u3092\u300c\u6383\u304d\u51fa\u3057\u6cd5\u300d\u3067\u89e3\u304f\u3053\u3068\u3067\u3001\u9006\u884c\u5217\u3092\u6c42\u3081\u308b\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u3092_Python_\u3067\u5b9f\u88c5\u3057\u3066\u307f\u307e\u3059\u3002**\n\n* __[\u8d64\u9593\u4e16\u7d00\uff08\u8457\uff09\u300eJava2\u306b\u3088\u308b\u6570\u5024\u8a08\u7b97\u300f\uff08\u6280\u5831\u5802\u51fa\u7248\uff09](http://gihodobooks.jp/book/3321-2.html)__\n\n![3321-2.jpg](https://qiita-image-store.s3.amazonaws.com/0/43487/56aee095-829e-0988-30ca-30d9eb669eda.jpeg)\n\n\n___\n\n#### **_Python_ \u30b9\u30af\u30ea\u30d7\u30c8**\n\n```{Python:inverse_matrix_by_sweep.py}\n#!/Usr/bin/env python\n# -*- coding: utf-8 -*- \n\nimport math\nimport numpy as np\n\nmessage_1 = \"\"\"                                                                                                                                    \n\n\u6383\u304d\u51fa\u3057\u6cd5\u3092\u4f7f\u3063\u3066\u3001\u5165\u529b\u3057\u305f\u884c\u5217\u306e\u9006\u884c\u5217\u3092\u51fa\u529b\u3057\u307e\u3059\u3002                                                                              \n\u9006\u884c\u5217\u3092\u6c42\u3081\u305f\u3044\u884c\u5217\u306e\u884c\u6570\u3092\u5165\u529b\u3057\u3066\u304f\u3060\u3055\u3044\u3002\"\"\"\n\nmessage_2 = \"\"\"                                                                                                                                    \n\n\u9006\u884c\u5217\u3092\u6c42\u3081\u305f\u3044\u884c\u5217\u306e\u8981\u7d20\u3092\u3001\uff11\u3064\u305a\u3064\u9806\u756a\u306b\u5165\u529b\u3057\u3066\u304f\u3060\u3055\u3044\u3002\"\"\"\n\nmessage_3 = \"\"\"\n\n\u884c\u5217\u306e\u5bfe\u89d2\u8981\u7d20\u304c 0 \u306e\u5834\u5408\u3001\u6383\u304d\u51fa\u3057\u6cd5\u3092\u4f7f\u3063\u3066\u3001\u53d7\u3051\u53d6\u3063\u305f\u884c\u5217\u3092\u4fc2\u6570\u884c\u5217\u306b\u3082\u3064\u9023\u7acb\u65b9\u7a0b\u5f0f\u306e\u89e3\u3092\u6c42\u3081\u308b\u3053\u3068\u3067\u3001\u9006\u884c\u5217\u3092\u5f97\u308b\u3053\u3068\u304c\u3067\u304d\u306a\u3044\n\u305f\u3081\u3001\u30d4\u30dc\u30c3\u30c8\u64cd\u4f5c\uff08\u90e8\u5206\u9078\u629e\uff09\u3092\u884c\u3044\u3001\u5fc5\u8981\u306b\u5fdc\u3058\u3066\u3001\u884c\u5217\u306e\u884c\u3092\u5165\u308c\u66ff\u3048\u307e\u3059\u3002\"\"\"\n\n\n### main()\u30e1\u30bd\u30c3\u30c9\ndef main():\n    print(message_1)\n    n = int(raw_input())\n\n    # \u30e6\u30fc\u30b6\u304c\u5165\u529b\u3057\u305f\u6570\u5024 n \u3092\u3082\u3068\u306b\u3001\u884c\u5217\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u521d\u671f\u5316\u5ba3\u8a00\n    matrix = [[0 for col in range(2*n)] for row in range(n)]\n    \n    #\u30e6\u30fc\u30b6\u304b\u3089\u53d7\u3051\u53d6\u3063\u305f\u6570\u5024\u3092\uff11\u3064\u3065\u3064\u3001\u884c\u5217matrix \u306e\u8981\u7d20\u306b\u4ee3\u5165\u3057\u3066\u3044\u304f\u51e6\u7406\n    print(message_2)\n\n    for i in range(n):\n        for j in range(n):\n            print(\"\\n\u884c\u5217({i}, {j})\u8981\u7d20\u306e\u5024\u3092\u5165\u529b\u3057\u3066\u304f\u3060\u3055\u3044\u3002\".format(i=i, j=j))\n            float_num = float(raw_input())\n            matrix[i][j] = float_num\n\n    print(\"\\n\u5165\u529b\u304c\u5b8c\u4e86\u3057\u307e\u3057\u305f\u3002\")\n    print(\"\\n\u3053\u308c\u304b\u3089\u89e3\u3092\u6c42\u3081\u308b\u9023\u7acb\u65b9\u7a0b\u5f0f\u306e\u4fc2\u6570\u884c\u5217\u306b\u3001\u53f3\u8fba\u306e\u5024\u306e\u5217\u3092\u52a0\u3048\u305f\u884c\u5217\u306f\u3001\u4ee5\u4e0b\u306b\u306a\u308a\u307e\u3059\u3002\\n\\n {matrix}\".format(matrix=np.array(matrix)))\n\n    #\u884c\u5217matrix \u306b\u5bfe\u3059\u308b\u30e6\u30fc\u30b6\u6307\u5b9a\u6570\u5024\u306e\u4ee3\u5165\u7d42\u4e86\n\n    print(message_3)\n\n\n    for i in range(n):\n        for j in range(2*n):\n            matrix[i][j] == float(0.0)\n            if((j-n) == i):\n                matrix[i][j] = float(1.0)\n\n\n    for k in range(n):  # \u30d4\u30dc\u30c3\u30c8\u64cd\u4f5c\uff08\u90e8\u5206\u9078\u629e\uff09\u3092\u884c\u3046 pivot()\u30e1\u30bd\u30c3\u30c9\u306b\u30eb\u30fc\u30d7\u3067k\u306e\u5024\u3092\u305a\u3089\u3057\u306a\u304c\u3089\u9806\u6b21\u5b9f\u884c\n        pivot(k, n, matrix)\n        if matrix[k][k] == float(0.0): # \u89e3\u306e\u5b58\u5728\u5224\u5b9a\u3092\u5b9f\u65bd \n            print(\"\u9006\u884c\u5217\u306f\u5b58\u5728\u3057\u307e\u305b\u3093\u3002\")\n        sweep(k, n, matrix) #\u6383\u304d\u51fa\u3057\u64cd\u4f5c\u3092\u884c\u3046 sweep()\u30e1\u30bd\u30c3\u30c9\u3092\u5b9f\u884c\n\n    print(\"\\n\u5165\u529b\u3057\u305f\u884c\u5217\u3092\u4fc2\u6570\u884c\u5217\u306b\u3082\u3064\u9023\u7acb\u65b9\u7a0b\u5f0f\u3092\u89e3\u3044\u305f\u7d50\u679c\u3001\u9023\u7acb\u65b9\u7a0b\u5f0f\u306e\u62e1\u5927\u4fc2\u6570\u884c\u5217\u306f\u4ee5\u4e0b\u306b\u306a\u308a\u307e\u3057\u305f\u3002\\n\\n{matrix}\".format(matrix=np.array(matrix)))\n\n    print(\"\\n\\n\u9006\u884c\u5217\u3092\u8a08\u7b97\u3057\u3066\u6c42\u3081\u305f\u7d50\u679c\u306f\u3001\u4e0b\u8a18\u306e\u3068\u304a\u308a\u3067\u3059\uff08\u5c0f\u6570\u70b9\u7b2c3\u4f4d\u306b\u307e\u308b\u3081\u3066\u3044\u307e\u3059\uff09\u3002\\n\")\n\n    for i in range(n):\n        output = \"\"\n        j = n\n        while(j < 2*n):\n            output +=\"{element}  \".format(element=matrix[i][j])\n            j += 1\n\n        print(output) #matrix \u306e\u5404\u884c\u3092\uff11\u884c\u3054\u3068\u306b\u51fa\u529b\u3002\n\n    print(\"\\n\u30d7\u30ed\u30b0\u30e9\u30e0\u306e\u51e6\u7406\u304c\u6b63\u5e38\u306b\u7d42\u308f\u308a\u307e\u3057\u305f\u3002\")\n\n##### main()\u30e1\u30bd\u30c3\u30c9\u4ee5\u4e0a\n\n##### pivot\u64cd\u4f5c\uff08\u90e8\u5206\u9078\u629e\uff09\uff1d\uff1d\u884c\u5217eq \u306e\u5bfe\u89d2\u8981\u7d20\u304c\uff10\u306e\u5834\u5408\u3001\u884c\u3092\u5165\u308c\u66ff\u3048\u3066\u3001\n##### \u6383\u304d\u51fa\u3057\u6cd5\u3067\u9023\u7acb\u65b9\u7a0b\u5f0f\u306e\u89e3\u3092\u6c42\u3081\u3089\u308c\u308b\u3088\u3046\u306b\u3059\u308b\u30e1\u30bd\u30c3\u30c9\u3092\u5b9a\u7fa9\ndef pivot(k, n, matrix):\n    max = math.fabs(matrix[k][k])\n    c = k\n    a = (k+1)\n    while(a < n):\n        if(math.fabs(matrix[a][k]) > max):\n            max = math.fabs(matrix[a][k])\n            c = a\n        a += 1\n\n    if(c != k):\n        for b in range(2*n):\n            temp = matrix[c][b]\n            eq[c][b] = matrix[k][b]\n            eq[k][b] = temp\n            b += 1\n\n##### \u6383\u304d\u51fa\u3057\u6cd5\u3092\u884c\u3046\u30e1\u30bd\u30c3\u30c9\u3092\u5b9a\u7fa9\ndef sweep(k, n, matrix):\n    f = matrix[k][k]\n\n    b = k\n    while(b < 2*n):\n        matrix[k][b] = float(matrix[k][b])/float(f)\n        b += 1\n    \n    for a in range(n):\n        g = matrix[a][k]\n        if(a != k):\n            b = k\n            while(b < 2*n):\n                matrix[a][b] = matrix[a][b] - g*matrix[k][b]\n                b += 1\n\n##### \u3053\u306e\u30b9\u30af\u30ea\u30d7\u30c8\u30d5\u30a1\u30a4\u30eb\u3092\u5b9f\u884c\u3057\u305f\u3068\u304d\u306b\u3001main()\u30e1\u30bd\u30c3\u30c9\u5b9f\u884c\nif __name__ == '__main__':\n    main()\n```\n\n#### **\u5b9f\u884c**\n\n**\u4ee5\u4e0b\u306e\u884c\u5217\u306b\u3064\u3044\u3066\u3001\u9006\u884c\u5217\u3092\u6c42\u3081\u307e\u3059\u3002**\n\n```{math}\n\\left(\n\\begin{array}{l} 2 & -1 & 0\\\\\n                 -1 & 2 & -1\\\\\n                 0 & -1 & 2\\\\\n\\end{array}\n\\right)\n```\n\n![pic_1.png](https://qiita-image-store.s3.amazonaws.com/0/43487/4f827138-3476-20e4-001f-083451c9c700.png)\n![pic_2.png](https://qiita-image-store.s3.amazonaws.com/0/43487/d1a941eb-f60d-5cba-056e-6f68edf40aaa.png)\n\n\n___\n\n\n#### **\u5b9f\u884c\u7d50\u679c**\n\n**_Python_\u30d7\u30ed\u30b0\u30e9\u30e0\u304c\u8fd4\u3057\u305f\u6f14\u7b97\u7d50\u679c\u306f\u3001\u4ee5\u4e0b\u3067\u3059\u3002**\n##### **\u203b \u884c\u5217\u306e\u5404\u8981\u7d20\u306e\u5024\u306f\u3001\u5c0f\u6570\u70b9\u7b2c\uff12\u4f4d\u306b\u4e38\u3081\u3066\u3044\u307e\u3059\u3002**\n\n```{math}\n\\left(\n\\begin{array}{l} 0.75 & 0.5 & 0.25\\\\\n                 0.5  & 1.0 & 0.5\\\\\n                 0.25 & 0.5 & 0.75\\\\\n\\end{array}\n\\right)\n```\n\n___\n\n#### **\u7d50\u679c\u306e\u691c\u8a3c**\n\n##### **_numpy_ \u53ca\u3073 _scipy_ \u30e2\u30b8\u30e5\u30fc\u30eb \u3092\u4f7f\u3063\u3066\u6c42\u3081\u305f\u9006\u884c\u5217\u306e\u7d50\u679c\u3068\u3064\u304d\u5408\u308f\u305b\u3066\u307f\u307e\u3059\u3002**\n\n* _numpy.linalg.inv()_\n\n```{python:Python 2.7}\nimport numpy as np\n\nmatrix = np.array([[2, -1, 0], [-1, 2, -1], [0, -1, 2]])\n\nprint(matrix)\n\ninverse_matrix = np.linalg.inv(matrix)\nprint(inverse_matrix)\n```\n\n![add_1.png](https://qiita-image-store.s3.amazonaws.com/0/43487/6d48b67e-c586-ca33-aa4e-4a483acac805.png)\n\n* _\u8a08\u7b97\u7d50\u679c_\n\n```{math}\n\\left(\n\\begin{array}{l} 0.75 & 0.5 & 0.25\\\\\n                 0.5  & 1 & 0.5\\\\\n                 0.25 & 0.5 & 0.75\\\\\n\\end{array}\n\\right)\n```\n\n* _scipy.I_\n\n```{python:Python 2.7}\nfrom scipy import *\n\nmatrix = [[2, -1, 0], [-1, 2, -1], [0, -1, 2]]\nprint(matrix)\n\nmatrix = mat(matrix)\nprint(matrix)\n\ninverse_matrix = matrix.I\nprint(inverse_matrix)\n```\n\n![add_2.png](https://qiita-image-store.s3.amazonaws.com/0/43487/3feca208-ce2c-1c77-fb76-702346394962.png)\n\n* _\u8a08\u7b97\u7d50\u679c_\n\n```{math}\n\\left(\n\\begin{array}{l} 0.75 & 0.5 & 0.25\\\\\n                 0.5  & 1 & 0.5\\\\\n                 0.25 & 0.5 & 0.75\\\\\n\\end{array}\n\\right)\n```\n\n#### __\u7d50\u679c\u306f\u4e00\u81f4\u3057\u307e\u3057\u305f\uff01__\n", "tags": ["Python", "statistics", "\u6570\u5b66", "\u6570\u5024\u8a08\u7b97", "\u7d71\u8a08\u5b66"]}