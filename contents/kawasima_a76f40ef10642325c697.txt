{"context": " More than 1 year has passed since last update.Clojure on Linux\u3067\u3001CPU\u306e\u4f7f\u7528\u7387\u3092\u6c42\u3081\u3088\u3046\u3068\u3001slurp\u3067/proc/stat\u3092\u8aad\u307f\u8fbc\u3082\u3046\u3068\u3057\u305f\u3068\u3053\u308d\u3001\nuser=> (slurp \"/proc/stat\")\nIOException Invalid argument  java.io.FileInputStream.available (FileInputStream.java:-2)\n\n\u306eException\u304c\u767a\u751f\u3057\u307e\u3059\u3002\u540c\u69d8\u306e\u73fe\u8c61\u304cML\u306b\u3042\u308a\u307e\u3057\u305f\u304c\u3001\u30ce\u30fc\u30ec\u30b9\u3067\u3059\u3002\nhttps://groups.google.com/forum/#!topic/clojure/3465V9GtkGE\n\u306e\u3067\u3001\u8abf\u3079\u3066\u307f\u307e\u3057\u305f\u3002\n\nslurp\u3067IOE\uff58ception\u304c\u767a\u751f\u3059\u308b\u306e\u306f\u306a\u305c?\n\u307e\u305a\u3001FileInputStream.available\u3092/proc\u4e0b\u306e\u30d5\u30a1\u30a4\u30eb\u306b\u5bfe\u3057\u3066\u547c\u3076\u3068IOException\u304c\u767a\u751f\u3059\u308b\u308f\u3051\u3067\u3059\u304c\u3001\u3053\u308c\u304c\u306a\u305cslurp\u95a2\u6570\u3067\u767a\u751f\u3059\u308b\u304b\u3068\u3044\u3046\u70b9\u306b\u3064\u3044\u3066\u3067\u3059\u3002\nslurp\u3067\u306f\u5185\u90e8\u3067clojure.java.io/reader\u3067\u30d5\u30a1\u30a4\u30eb\u3092\u30aa\u30fc\u30d7\u30f3\u3057\u3066\u3044\u307e\u3059\u3002\nuser=> (source slurp)\n(defn slurp\n  \"Opens a reader on f and reads all its contents, returning a string.\n  See clojure.java.io/reader for a complete list of supported arguments.\"\n  {:added \"1.0\"}\n  ([f & opts]\n     (let [opts (normalize-slurp-opts opts)\n           sb (StringBuilder.)]\n       (with-open [#^java.io.Reader r (apply jio/reader f opts)]\n         (loop [c (.read r)]\n           (if (neg? c)\n             (str sb)\n             (do\n               (.append sb (char c))\n               (recur (.read r)))))))))\n\n\u3053\u306ereader\u3067BufferedReader\u3092\u4f5c\u308b\u306e\u3067\u3059\u304c\u3001\n  FileInputStream \u2192 BufferedInputStream \u2192 InputStreamReader \u2192 BufferedReader\n\u306e\u9806\u3067\u30c7\u30b3\u30ec\u30a4\u30c8\u3055\u308c\u307e\u3059\u3002BufferedInputStream\u304c\u4f59\u5206\u306b\u611f\u3058\u307e\u3059\u306d\uff01\n\u305d\u3057\u3066\u3001\u3053\u306eBufferedInputStream\u304c\u3053\u306e\u5834\u5408\u60aa\u3055\u3092\u3057\u307e\u3059\u3002BufferedInputStream\u306f\u3001Socket\u304b\u3089\u306e\u8aad\u307f\u8fbc\u307f\u306e\u3088\u3046\u306a\u65ad\u7d9a\u7684\u306b\u30c7\u30fc\u30bf\u304c\u8aad\u307f\u8fbc\u307f\u53ef\u80fd\u3068\u306a\u308b\u3088\u3046\u306a\u30b9\u30c8\u30ea\u30fc\u30e0\u3092\u6271\u3046\u306e\u3067\u3001read\u30e1\u30bd\u30c3\u30c9\u306e\u4e2d\u3067available()\u3092\u547c\u3073\u307e\u3059\u3002\u305d\u306e\u305f\u3081\u3001\u4eca\u56de\u306eIOE\uff58eption\u304c\u767a\u751f\u3057\u3066\u3057\u307e\u3046\u306e\u3067\u3059\u3002\n\nBufferedInputStream.java\n    public synchronized int read(byte b[], int off, int len)\n        throws IOException\n    {\n        getBufIfOpen(); // Check for closed stream\n        if ((off | len | (off + len) | (b.length - (off + len))) < 0) {\n            throw new IndexOutOfBoundsException();\n        } else if (len == 0) {\n            return 0;\n        }\n\n        int n = 0;\n        for (;;) {\n            int nread = read1(b, off + n, len - n);\n            if (nread <= 0)\n                return (n == 0) ? nread : n;\n            n += nread;\n            if (n >= len)\n                return n;\n            // if not closed but no bytes available, return\n            InputStream input = in;\n            if (input != null && input.available() <= 0)\n                return n;\n        }\n    }\n\n\n\n/proc/stat\u3067FileInputStream.available\u3092\u547c\u3076\u3068IOException\u304c\u767a\u751f\u3059\u308b\u306e\u306f\u306a\u305c?\nFileInputStream.available\u306e\u30bd\u30fc\u30b9\u3092\u898b\u3066\u307f\u307e\u3059\u3002\u304c\u3001\u3053\u306e\u30e1\u30bd\u30c3\u30c9\u306fnative\u306a\u306e\u3067\u3001\u5b9f\u969b\u306fOS\u3054\u3068\u306b\u51e6\u7406\u304c\u3053\u3068\u306a\u308a\u307e\u3059\u3002Linux\u7528\u306e\u30b3\u30fc\u30c9\u306f\u4ee5\u4e0b\u306e\u3068\u3053\u308d\u306b\u3042\u308a\u307e\u3059\u3002\n\nhotspot/src/os/linux/vm/os_linux.cpp\nint os::available(int fd, jlong *bytes) {\n  jlong cur, end;\n  int mode;\n  struct stat64 buf64;\n\n  if (::fstat64(fd, &buf64) >= 0) {\n    mode = buf64.st_mode;\n    if (S_ISCHR(mode) || S_ISFIFO(mode) || S_ISSOCK(mode)) {\n      /*\n      * XXX: is the following call interruptible? If so, this might\n      * need to go through the INTERRUPT_IO() wrapper as for other\n      * blocking, interruptible calls in this file.\n      */\n      int n;\n      if (::ioctl(fd, FIONREAD, &n) >= 0) {\n        *bytes = n;\n        return 1;\n      }\n    }\n  }\n  if ((cur = ::lseek64(fd, 0L, SEEK_CUR)) == -1) {\n    return 0;\n  } else if ((end = ::lseek64(fd, 0L, SEEK_END)) == -1) {\n    return 0;\n  } else if (::lseek64(fd, cur, SEEK_SET) == -1) {\n    return 0;\n  }\n  *bytes = end - cur;\n  return 1;\n}\n\n\n\u3053\u3053\u30670\u304c\u8fd4\u308b\u3068\u3001IOException\u306b\u306a\u308a\u307e\u3059\u3002\u3067\u3001\u8abf\u3079\u308b\u3068\n  } else if ((end = ::lseek64(fd, 0L, SEEK_END)) == -1) {\n\n\u3053\u3053\u3067lseek64\u304c-1\u3092\u8fd4\u3057\u3066\u3044\u308b\u3088\u3046\u3067\u3059\u3002/proc\u306fprocfs\u3067\u5b9f\u969b\u306e\u30d5\u30a1\u30a4\u30eb\u30b7\u30b9\u30c6\u30e0\u3067\u306f\u306a\u3044\u306e\u3067\u3001\u30d5\u30a1\u30a4\u30eb\u306e\u7d42\u4e86\u4f4d\u7f6e\u306bseek\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u306a\u3044\u3001\u3068\u3044\u3046\u4e8b\u60c5\u306e\u3088\u3046\u3067\u3059\u3002\n\n\u307e\u3068\u3081\nslurp\u3084clojure.java.io\u306e\u95a2\u6570\u3092\u3064\u304b\u3046\u3068\u3001\u3069\u3046\u3057\u3066\u3082BufferedInputStream\u3067\u30e9\u30c3\u30d4\u30f3\u30b0\u3055\u308c\u3066\u3057\u307e\u3046\u306e\u3067\u3001/proc\u306e\u30d5\u30a1\u30a4\u30eb\u3092\u8aad\u3080\u5834\u5408\u306f\u3001\u81ea\u524d\u3067FileReader\u304a\u3088\u3073BufferedReader\u3057\u307e\u3057\u3087\u3046\u3002\nuser=> (with-open [rdr (-> (java.io.FileReader. \"/proc/stat\") java.io.BufferedReader.)] (.readLine rdr))\n\"cpu  1496745 1567 428721 5810283 13961 68 6011 0 0 0\"\n\nClojure on Linux\u3067\u3001CPU\u306e\u4f7f\u7528\u7387\u3092\u6c42\u3081\u3088\u3046\u3068\u3001slurp\u3067/proc/stat\u3092\u8aad\u307f\u8fbc\u3082\u3046\u3068\u3057\u305f\u3068\u3053\u308d\u3001\n\n```clj\nuser=> (slurp \"/proc/stat\")\nIOException Invalid argument  java.io.FileInputStream.available (FileInputStream.java:-2)\n```\n\n\u306eException\u304c\u767a\u751f\u3057\u307e\u3059\u3002\u540c\u69d8\u306e\u73fe\u8c61\u304cML\u306b\u3042\u308a\u307e\u3057\u305f\u304c\u3001\u30ce\u30fc\u30ec\u30b9\u3067\u3059\u3002\nhttps://groups.google.com/forum/#!topic/clojure/3465V9GtkGE\n\n\u306e\u3067\u3001\u8abf\u3079\u3066\u307f\u307e\u3057\u305f\u3002\n\n## slurp\u3067IOE\uff58ception\u304c\u767a\u751f\u3059\u308b\u306e\u306f\u306a\u305c?\n\n\u307e\u305a\u3001FileInputStream.available\u3092/proc\u4e0b\u306e\u30d5\u30a1\u30a4\u30eb\u306b\u5bfe\u3057\u3066\u547c\u3076\u3068IOException\u304c\u767a\u751f\u3059\u308b\u308f\u3051\u3067\u3059\u304c\u3001\u3053\u308c\u304c\u306a\u305cslurp\u95a2\u6570\u3067\u767a\u751f\u3059\u308b\u304b\u3068\u3044\u3046\u70b9\u306b\u3064\u3044\u3066\u3067\u3059\u3002\n\nslurp\u3067\u306f\u5185\u90e8\u3067clojure.java.io/reader\u3067\u30d5\u30a1\u30a4\u30eb\u3092\u30aa\u30fc\u30d7\u30f3\u3057\u3066\u3044\u307e\u3059\u3002\n\n```clj\nuser=> (source slurp)\n(defn slurp\n  \"Opens a reader on f and reads all its contents, returning a string.\n  See clojure.java.io/reader for a complete list of supported arguments.\"\n  {:added \"1.0\"}\n  ([f & opts]\n     (let [opts (normalize-slurp-opts opts)\n           sb (StringBuilder.)]\n       (with-open [#^java.io.Reader r (apply jio/reader f opts)]\n         (loop [c (.read r)]\n           (if (neg? c)\n             (str sb)\n             (do\n               (.append sb (char c))\n               (recur (.read r)))))))))\n```\n\n\u3053\u306ereader\u3067BufferedReader\u3092\u4f5c\u308b\u306e\u3067\u3059\u304c\u3001\n  FileInputStream \u2192 BufferedInputStream \u2192 InputStreamReader \u2192 BufferedReader\n\u306e\u9806\u3067\u30c7\u30b3\u30ec\u30a4\u30c8\u3055\u308c\u307e\u3059\u3002BufferedInputStream\u304c\u4f59\u5206\u306b\u611f\u3058\u307e\u3059\u306d\uff01\n\n\u305d\u3057\u3066\u3001\u3053\u306eBufferedInputStream\u304c\u3053\u306e\u5834\u5408\u60aa\u3055\u3092\u3057\u307e\u3059\u3002BufferedInputStream\u306f\u3001Socket\u304b\u3089\u306e\u8aad\u307f\u8fbc\u307f\u306e\u3088\u3046\u306a\u65ad\u7d9a\u7684\u306b\u30c7\u30fc\u30bf\u304c\u8aad\u307f\u8fbc\u307f\u53ef\u80fd\u3068\u306a\u308b\u3088\u3046\u306a\u30b9\u30c8\u30ea\u30fc\u30e0\u3092\u6271\u3046\u306e\u3067\u3001read\u30e1\u30bd\u30c3\u30c9\u306e\u4e2d\u3067available()\u3092\u547c\u3073\u307e\u3059\u3002\u305d\u306e\u305f\u3081\u3001\u4eca\u56de\u306eIOE\uff58eption\u304c\u767a\u751f\u3057\u3066\u3057\u307e\u3046\u306e\u3067\u3059\u3002\n\n```java:BufferedInputStream.java\n    public synchronized int read(byte b[], int off, int len)\n        throws IOException\n    {\n        getBufIfOpen(); // Check for closed stream\n        if ((off | len | (off + len) | (b.length - (off + len))) < 0) {\n            throw new IndexOutOfBoundsException();\n        } else if (len == 0) {\n            return 0;\n        }\n\n        int n = 0;\n        for (;;) {\n            int nread = read1(b, off + n, len - n);\n            if (nread <= 0)\n                return (n == 0) ? nread : n;\n            n += nread;\n            if (n >= len)\n                return n;\n            // if not closed but no bytes available, return\n            InputStream input = in;\n            if (input != null && input.available() <= 0)\n                return n;\n        }\n    }\n```\n\n## /proc/stat\u3067FileInputStream.available\u3092\u547c\u3076\u3068IOException\u304c\u767a\u751f\u3059\u308b\u306e\u306f\u306a\u305c?\n\nFileInputStream.available\u306e\u30bd\u30fc\u30b9\u3092\u898b\u3066\u307f\u307e\u3059\u3002\u304c\u3001\u3053\u306e\u30e1\u30bd\u30c3\u30c9\u306fnative\u306a\u306e\u3067\u3001\u5b9f\u969b\u306fOS\u3054\u3068\u306b\u51e6\u7406\u304c\u3053\u3068\u306a\u308a\u307e\u3059\u3002Linux\u7528\u306e\u30b3\u30fc\u30c9\u306f\u4ee5\u4e0b\u306e\u3068\u3053\u308d\u306b\u3042\u308a\u307e\u3059\u3002\n\n```cpp:hotspot/src/os/linux/vm/os_linux.cpp\nint os::available(int fd, jlong *bytes) {\n  jlong cur, end;\n  int mode;\n  struct stat64 buf64;\n\n  if (::fstat64(fd, &buf64) >= 0) {\n    mode = buf64.st_mode;\n    if (S_ISCHR(mode) || S_ISFIFO(mode) || S_ISSOCK(mode)) {\n      /*\n      * XXX: is the following call interruptible? If so, this might\n      * need to go through the INTERRUPT_IO() wrapper as for other\n      * blocking, interruptible calls in this file.\n      */\n      int n;\n      if (::ioctl(fd, FIONREAD, &n) >= 0) {\n        *bytes = n;\n        return 1;\n      }\n    }\n  }\n  if ((cur = ::lseek64(fd, 0L, SEEK_CUR)) == -1) {\n    return 0;\n  } else if ((end = ::lseek64(fd, 0L, SEEK_END)) == -1) {\n    return 0;\n  } else if (::lseek64(fd, cur, SEEK_SET) == -1) {\n    return 0;\n  }\n  *bytes = end - cur;\n  return 1;\n}\n```\n\n\u3053\u3053\u30670\u304c\u8fd4\u308b\u3068\u3001IOException\u306b\u306a\u308a\u307e\u3059\u3002\u3067\u3001\u8abf\u3079\u308b\u3068\n\n```cpp\n  } else if ((end = ::lseek64(fd, 0L, SEEK_END)) == -1) {\n```\n\n\u3053\u3053\u3067lseek64\u304c-1\u3092\u8fd4\u3057\u3066\u3044\u308b\u3088\u3046\u3067\u3059\u3002/proc\u306f[procfs](http://ja.wikipedia.org/wiki/Procfs)\u3067\u5b9f\u969b\u306e\u30d5\u30a1\u30a4\u30eb\u30b7\u30b9\u30c6\u30e0\u3067\u306f\u306a\u3044\u306e\u3067\u3001\u30d5\u30a1\u30a4\u30eb\u306e\u7d42\u4e86\u4f4d\u7f6e\u306bseek\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u306a\u3044\u3001\u3068\u3044\u3046\u4e8b\u60c5\u306e\u3088\u3046\u3067\u3059\u3002\n\n## \u307e\u3068\u3081\n\nslurp\u3084clojure.java.io\u306e\u95a2\u6570\u3092\u3064\u304b\u3046\u3068\u3001\u3069\u3046\u3057\u3066\u3082BufferedInputStream\u3067\u30e9\u30c3\u30d4\u30f3\u30b0\u3055\u308c\u3066\u3057\u307e\u3046\u306e\u3067\u3001/proc\u306e\u30d5\u30a1\u30a4\u30eb\u3092\u8aad\u3080\u5834\u5408\u306f\u3001\u81ea\u524d\u3067`FileReader`\u304a\u3088\u3073`BufferedReader`\u3057\u307e\u3057\u3087\u3046\u3002\n\n```clj\nuser=> (with-open [rdr (-> (java.io.FileReader. \"/proc/stat\") java.io.BufferedReader.)] (.readLine rdr))\n\"cpu  1496745 1567 428721 5810283 13961 68 6011 0 0 0\"\n```\n\n", "tags": ["Clojure1.5.1", "Java1.7", "OpenJDK7u40"]}