{"context": " More than 1 year has passed since last update.\u524d\u56de \u306f\u3001Hadoop\u306e\u53ef\u5909\u9577\u6574\u6570\u3092\u4f7f\u3063\u3066\u6574\u6570\u3092\u52b9\u7387\u7684\u306b\u30b7\u30ea\u30a2\u30e9\u30a4\u30ba\u3059\u308b\u65b9\u6cd5\u3092\u7d39\u4ecb\u3057\u305f\u304c\u3001\u4eca\u56de\u306fHadoop\u306e\u5b9f\u88c5\u3067\u306f\u52b9\u7387\u304c\u60aa\u3044\u5834\u5408\u306b\u3001\u72ec\u81ea\u30ed\u30b8\u30c3\u30af\u3067\u53ef\u5909\u9577\u6574\u6570\u3092\u30b7\u30ea\u30a2\u30e9\u30a4\u30ba\u3059\u308b\u4f8b\u3092\u7d39\u4ecb\u3059\u308b\u3002\n\nHadoop\u53ef\u5909\u9577\u6574\u6570\u306e\u7279\u5fb4\u3068\u82e6\u624b\u306a\u90e8\u5206\nHadoop\u53ef\u5909\u9577\u6574\u6570\u306e\u7279\u5fb4\u3092\u628a\u63e1\u3059\u308b\u70ba\u306b\u3001\u5404\u30b5\u30a4\u30ba\u306b\u304a\u3051\u308b\u683c\u7d0d\u53ef\u80fd\u306a\u5024\u306e\u7bc4\u56f2\u3092\u56fa\u5b9a\u9577\u6574\u6570\u3068\u6bd4\u8f03\u3057\u3066\u307f\u305f\u3002\n\n\n\n\u30b5\u30a4\u30ba\nHadoop\u53ef\u5909\u9577\u6574\u6570\u306e\u7bc4\u56f2\n\u56fa\u5b9a\u9577\u7b26\u53f7\u4ed8\u6574\u6570\u306e\u7bc4\u56f2\n\u56fa\u5b9a\u9577\u7b26\u53f7\u306a\u3057\u6574\u6570\u306e\u7bc4\u56f2\n\n\n\n\n1\n-112~127\n-128~127\n0~255\n\n\n2\n-256~255\n-32,768~32,767\n65,535\n\n\n3\n-65,536~65,535\n-8,388,608~8,388,607\n16,777,215\n\n\n4\n-16,777,216~16,777,215\n-2,147,483,648~2,147,483,647\n4,294,967,295\n\n\n\n\u3053\u308c\u3092\u898b\u308b\u3068\u3001Hadoop\u53ef\u5909\u9577\u6574\u6570\u304c\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u7279\u5fb4\u3092\u6301\u3064\u4e8b\u304c\u308f\u304b\u308b\u3002\n\n1\u30d0\u30a4\u30c8\u306e\u5834\u5408\u306f\u56fa\u5b9a\u9577\u7b26\u53f7\u4ed8\u6574\u6570\u3068\u307b\u307c\u540c\u3058\u7bc4\u56f2\u3092\u683c\u7d0d\u3067\u304d\u308b\u306e\u3067\u52b9\u7387\u304c\u826f\u3044\u3002\n2\u30d0\u30a4\u30c8\u4ee5\u4e0a\u306b\u306a\u308b\u5834\u5408\u306b\u306f\u3001\u56fa\u5b9a\u9577\u3088\u308a1\u30d0\u30a4\u30c8\u4f59\u8a08\u306b\u6d88\u8cbb\u3059\u308b\u3002\n\nHadoop\u53ef\u5909\u9577\u6574\u6570\u306f1\u30d0\u30a4\u30c8\u307e\u3067\u306e\u6574\u6570\u306b\u6700\u9069\u5316\u3057\u305f\u53ef\u5909\u9577\u6574\u6570\u3068\u3044\u3048\u308b\u3002\n\nHadoop\u53ef\u5909\u9577\u6574\u6570\u304c\u82e6\u624b\u306a\u30b5\u30f3\u30d7\u30eb\u30c7\u30fc\u30bf\u3092\u4f5c\u3063\u3066\u307f\u308b\n\u4ee5\u4e0a\u3092\u8e0f\u307e\u3048\u305f\u4e0a\u3067\u3001Hadoop\u304c\u82e6\u624b\u305d\u3046\u306a\u30b5\u30f3\u30d7\u30eb\u30c7\u30fc\u30bf\u3068\u3057\u3066\u30010~20,000\u306e\u7bc4\u56f2\u3067\u30b5\u30a4\u30ba50\u306eint\u914d\u5217\u3092\u4f5c\u3063\u3066\u307f\u305f\u3002\n\nIntArrayTest.java\nimport static org.hamcrest.CoreMatchers.*;\nimport static org.junit.Assert.*;\n\nimport java.io.ByteArrayInputStream;\nimport java.io.ByteArrayOutputStream;\nimport java.io.DataInputStream;\nimport java.io.DataOutputStream;\nimport java.io.IOException;\n\nimport org.junit.Test;\n\npublic class IntArrayTest {\n    @Test\n    public void test() throws IOException {\n        int[] data = {\n                10567, 16701,  8734, 11490, 19112,  1785, 12334,  7669, 10196, 12499,\n                 9714,  3499, 13229,   982,  6779, 10034,  9888, 11378,  5541, 13914,\n                17164,  9100, 13049, 10947, 17655,  3678, 12998,  6788,   119, 11245,\n                11644, 14490,  8813, 14991,  5981, 15110, 10347,  9204,  5999, 19204,\n                10004, 87992, 10742, 19047,  3489, 10477,  4779,  9880,  1077, 14779,\n        };\n\n        //\u30b7\u30ea\u30a2\u30e9\u30a4\u30ba\n        IntArray intArray = new IntArray();\n        intArray.setData(data);\n        ByteArrayOutputStream bout = new ByteArrayOutputStream();\n        DataOutputStream dout = new DataOutputStream(bout);\n        intArray.write(dout);\n\n        byte[] bytes = bout.toByteArray();\n        System.out.println(\"size=\" + bytes.length);\n\n        //\u30c7\u30b7\u30ea\u30a2\u30e9\u30a4\u30ba\n        ByteArrayInputStream bin = new ByteArrayInputStream(bytes);\n        DataInputStream din = new DataInputStream(bin);\n        intArray = new IntArray();\n        intArray.readFields(din);\n\n        //\u30b7\u30ea\u30a2\u30e9\u30a4\u30ba\u21d2\u30c7\u30b7\u30ea\u30a2\u30e9\u30a4\u30ba\u5f8c\u306e\u30c7\u30fc\u30bf\u304c\u5143\u306e\u5024\u3068\u540c\u3058\u3067\u3042\u308b\u3053\u3068\u3092\u78ba\u8a8d\n        assertThat(intArray.getData(), is(data));\n    }\n}\n\n\n\n\u56fa\u5b9a\u9577\u6574\u6570\u3067\u30b7\u30ea\u30a2\u30e9\u30a4\u30ba\u3057\u3066\u307f\u308b\n\nIntArray.java\nimport java.io.DataInput;\nimport java.io.DataOutput;\nimport java.io.IOException;\n\nimport org.apache.hadoop.io.Writable;\n\npublic class IntArray implements Writable {\n    private int[] data;\n    public void setData(int[] data) {\n        this.data = data;\n    }\n    public int[] getData() {\n        return data;\n    }\n    @Override\n    public void readFields(DataInput in) throws IOException {\n        int len = in.readInt();\n        data = new int[len];\n        for (int i = 0; i < len; i++) {\n            data[i] = in.readInt();\n        }\n    }\n    @Override\n    public void write(DataOutput out) throws IOException {\n        out.writeInt(data.length);\n        for (int v : data) {\n            out.writeInt(v);\n        }\n    }\n}\n\n\n\n\u7d50\u679c\nsize=204\n\n\n\nHadoop\u306e\u53ef\u5909\u9577\u6574\u6570\u3067\u30b7\u30ea\u30a2\u30e9\u30a4\u30ba\n\nIntArray.java\n    @Override\n    public void readFields(DataInput in) throws IOException {\n        int len = WritableUtils.readVInt(in);\n        data = new int[len];\n        for (int i = 0; i < len; i++) {\n            data[i] = WritableUtils.readVInt(in);\n        }\n    }\n    @Override\n    public void write(DataOutput out) throws IOException {\n       WritableUtils.writeVInt(out, data.length);\n        for (int v : data) {\n            WritableUtils.writeVInt(out, v);\n        }\n    }\n\n\n\n\u7d50\u679c\nsize=150\n\n\n\n\u7b26\u53f7\u306a\u30572\u30d0\u30a4\u30c8\u307e\u3067\u306e\u6574\u6570\u306b\u6700\u9069\u5316\u3057\u305f\u53ef\u5909\u9577\u6574\u6570\u3092\u4f5c\u3063\u3066\u307f\u305f\nHdoop\u306e\u5b9f\u88c5\u3092\u53c2\u8003\u306b\u30010~65,534\u306e\u7bc4\u56f2\u30922\u30d0\u30a4\u30c8\u3067\u51fa\u529b\u3067\u304d\u308b\u53ef\u5909\u9577\u6574\u6570\u306e\u30b7\u30ea\u30a2\u30e9\u30a4\u30ba\u3092\u4f5c\u3063\u3066\u307f\u305f\u3002\n\n\u5024\u304c0~65,534(0xfffe)\u306e\u5834\u5408\u306f\u30012\u30d0\u30a4\u30c8\u3067\u51fa\u529b\u3002\n65,535(0xffff)\u4ee5\u4e0a\u306e\u5834\u5408\u306f\u3001\u5148\u982d2\u30d0\u30a4\u30c8\u306b0xffff\u30013\u30d0\u30a4\u30c8\u76ee\u4ee5\u964d\u306bint\u5024\u3092\u51fa\u529b(\u5408\u8a086\u30d0\u30a4\u30c8)\u3002\n\n\nIntArray.java\n    @Override\n    public void readFields(DataInput in) throws IOException {\n        int len = readSpecialVInt(in);\n        data = new int[len];\n        for (int i = 0; i < len; i++) {\n            data[i] = readSpecialVInt(in);\n        }\n    }\n    @Override\n    public void write(DataOutput out) throws IOException {\n       writeSpecialVInt(out, data.length);\n        for (int v : data) {\n            writeSpecialVInt(out, v);\n        }\n    }\n    private int readSpecialVInt(DataInput in) throws IOException {\n        int v = ((in.readByte() & 0xff) << 8) | (in.readByte() & 0xff);\n        v = (0 <= v && v <= 0xfffe) ? v : in.readInt();\n        return v;\n    }\n    private void writeSpecialVInt(DataOutput out, int v) throws IOException {\n        System.out.println(Long.toHexString(v) + \"->\");\n        if (0 <= v && v <= 0xfffe) {\n            System.out.println(\"  2bytes\");\n            out.writeByte((byte) (0xff & (v >> 8)));\n            out.writeByte((byte) (0xff & (v)));\n        }\n        else {\n            System.out.println(\"  6bytes\");\n            out.writeByte(0xff);\n            out.writeByte(0xff);\n            out.writeInt(v);\n        }\n    }\n\n\n\n\u7d50\u679c\nsize=106\n\n\n\n\u7d50\u679c\u307e\u3068\u3081\n\n\n\n\u30b7\u30ea\u30a2\u30e9\u30a4\u30ba\u65b9\u6cd5\n\u30b5\u30a4\u30ba\n\n\n\n\n\u56fa\u5b9a\u9577\u6574\u6570\n204\n\n\nHadoop\u306e\u53ef\u5909\u9577\u6574\u6570\n150\n\n\n2\u30d0\u30a4\u30c8\u306b\u6700\u9069\u5316\u3057\u305f\u53ef\u5909\u9577\u6574\u6570\n106\n\n\n\n\n\u8a18\u4e8b\u4e00\u89a7\n(1) Writable\u3067\u53ef\u5909\u9577\u6574\u6570\u3092\u4f7f\u3046\n(2) \u30c7\u30fc\u30bf\u3092\u52a0\u5de5\u3057\u3066\u53ef\u5909\u9577\u6574\u6570\u306e\u52b9\u679c\u3092\u9ad8\u3081\u308b\n(3) \u72ec\u81ea\u30ed\u30b8\u30c3\u30af\u3067\u6574\u6570\u3092\u30b7\u30ea\u30a2\u30e9\u30a4\u30ba\u3059\u308b\n[\u524d\u56de][link-2] \u306f\u3001Hadoop\u306e\u53ef\u5909\u9577\u6574\u6570\u3092\u4f7f\u3063\u3066\u6574\u6570\u3092\u52b9\u7387\u7684\u306b\u30b7\u30ea\u30a2\u30e9\u30a4\u30ba\u3059\u308b\u65b9\u6cd5\u3092\u7d39\u4ecb\u3057\u305f\u304c\u3001\u4eca\u56de\u306fHadoop\u306e\u5b9f\u88c5\u3067\u306f\u52b9\u7387\u304c\u60aa\u3044\u5834\u5408\u306b\u3001\u72ec\u81ea\u30ed\u30b8\u30c3\u30af\u3067\u53ef\u5909\u9577\u6574\u6570\u3092\u30b7\u30ea\u30a2\u30e9\u30a4\u30ba\u3059\u308b\u4f8b\u3092\u7d39\u4ecb\u3059\u308b\u3002\n\n# Hadoop\u53ef\u5909\u9577\u6574\u6570\u306e\u7279\u5fb4\u3068\u82e6\u624b\u306a\u90e8\u5206\n\nHadoop\u53ef\u5909\u9577\u6574\u6570\u306e\u7279\u5fb4\u3092\u628a\u63e1\u3059\u308b\u70ba\u306b\u3001\u5404\u30b5\u30a4\u30ba\u306b\u304a\u3051\u308b\u683c\u7d0d\u53ef\u80fd\u306a\u5024\u306e\u7bc4\u56f2\u3092\u56fa\u5b9a\u9577\u6574\u6570\u3068\u6bd4\u8f03\u3057\u3066\u307f\u305f\u3002\n\n|\u30b5\u30a4\u30ba|Hadoop<br/>\u53ef\u5909\u9577\u6574\u6570\u306e\u7bc4\u56f2|\u56fa\u5b9a\u9577<br/>\u7b26\u53f7\u4ed8\u6574\u6570\u306e\u7bc4\u56f2|\u56fa\u5b9a\u9577<br/>\u7b26\u53f7\u306a\u3057\u6574\u6570\u306e\u7bc4\u56f2|\n|---:|:---:|:----:|:----:|\n|   1|-112<br/>~127|-128<br/>~127|0~255|\n|   2|-256<br/>~255|-32,768<br/>~32,767|65,535|\n|   3|-65,536<br/>~65,535|-8,388,608<br/>~8,388,607|16,777,215|\n|   4|-16,777,216<br/>~16,777,215|-2,147,483,648<br/>~2,147,483,647|4,294,967,295|\n\n\u3053\u308c\u3092\u898b\u308b\u3068\u3001Hadoop\u53ef\u5909\u9577\u6574\u6570\u304c\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u7279\u5fb4\u3092\u6301\u3064\u4e8b\u304c\u308f\u304b\u308b\u3002\n\n* 1\u30d0\u30a4\u30c8\u306e\u5834\u5408\u306f\u56fa\u5b9a\u9577\u7b26\u53f7\u4ed8\u6574\u6570\u3068\u307b\u307c\u540c\u3058\u7bc4\u56f2\u3092\u683c\u7d0d\u3067\u304d\u308b\u306e\u3067\u52b9\u7387\u304c\u826f\u3044\u3002\n* 2\u30d0\u30a4\u30c8\u4ee5\u4e0a\u306b\u306a\u308b\u5834\u5408\u306b\u306f\u3001\u56fa\u5b9a\u9577\u3088\u308a1\u30d0\u30a4\u30c8\u4f59\u8a08\u306b\u6d88\u8cbb\u3059\u308b\u3002\n\nHadoop\u53ef\u5909\u9577\u6574\u6570\u306f1\u30d0\u30a4\u30c8\u307e\u3067\u306e\u6574\u6570\u306b\u6700\u9069\u5316\u3057\u305f\u53ef\u5909\u9577\u6574\u6570\u3068\u3044\u3048\u308b\u3002\n\n# Hadoop\u53ef\u5909\u9577\u6574\u6570\u304c\u82e6\u624b\u306a\u30b5\u30f3\u30d7\u30eb\u30c7\u30fc\u30bf\u3092\u4f5c\u3063\u3066\u307f\u308b\n\n\u4ee5\u4e0a\u3092\u8e0f\u307e\u3048\u305f\u4e0a\u3067\u3001Hadoop\u304c\u82e6\u624b\u305d\u3046\u306a\u30b5\u30f3\u30d7\u30eb\u30c7\u30fc\u30bf\u3068\u3057\u3066\u30010~20,000\u306e\u7bc4\u56f2\u3067\u30b5\u30a4\u30ba50\u306eint\u914d\u5217\u3092\u4f5c\u3063\u3066\u307f\u305f\u3002\n\n```java:IntArrayTest.java\nimport static org.hamcrest.CoreMatchers.*;\nimport static org.junit.Assert.*;\n\nimport java.io.ByteArrayInputStream;\nimport java.io.ByteArrayOutputStream;\nimport java.io.DataInputStream;\nimport java.io.DataOutputStream;\nimport java.io.IOException;\n\nimport org.junit.Test;\n\npublic class IntArrayTest {\n    @Test\n    public void test() throws IOException {\n        int[] data = {\n                10567, 16701,  8734, 11490, 19112,  1785, 12334,  7669, 10196, 12499,\n                 9714,  3499, 13229,   982,  6779, 10034,  9888, 11378,  5541, 13914,\n                17164,  9100, 13049, 10947, 17655,  3678, 12998,  6788,   119, 11245,\n                11644, 14490,  8813, 14991,  5981, 15110, 10347,  9204,  5999, 19204,\n                10004, 87992, 10742, 19047,  3489, 10477,  4779,  9880,  1077, 14779,\n        };\n\n        //\u30b7\u30ea\u30a2\u30e9\u30a4\u30ba\n        IntArray intArray = new IntArray();\n        intArray.setData(data);\n        ByteArrayOutputStream bout = new ByteArrayOutputStream();\n        DataOutputStream dout = new DataOutputStream(bout);\n        intArray.write(dout);\n\n        byte[] bytes = bout.toByteArray();\n        System.out.println(\"size=\" + bytes.length);\n\n        //\u30c7\u30b7\u30ea\u30a2\u30e9\u30a4\u30ba\n        ByteArrayInputStream bin = new ByteArrayInputStream(bytes);\n        DataInputStream din = new DataInputStream(bin);\n        intArray = new IntArray();\n        intArray.readFields(din);\n\n        //\u30b7\u30ea\u30a2\u30e9\u30a4\u30ba\u21d2\u30c7\u30b7\u30ea\u30a2\u30e9\u30a4\u30ba\u5f8c\u306e\u30c7\u30fc\u30bf\u304c\u5143\u306e\u5024\u3068\u540c\u3058\u3067\u3042\u308b\u3053\u3068\u3092\u78ba\u8a8d\n        assertThat(intArray.getData(), is(data));\n    }\n}\n```\n\n# \u56fa\u5b9a\u9577\u6574\u6570\u3067\u30b7\u30ea\u30a2\u30e9\u30a4\u30ba\u3057\u3066\u307f\u308b\n\n```java:IntArray.java\nimport java.io.DataInput;\nimport java.io.DataOutput;\nimport java.io.IOException;\n\nimport org.apache.hadoop.io.Writable;\n\npublic class IntArray implements Writable {\n    private int[] data;\n    public void setData(int[] data) {\n        this.data = data;\n    }\n    public int[] getData() {\n        return data;\n    }\n    @Override\n    public void readFields(DataInput in) throws IOException {\n        int len = in.readInt();\n        data = new int[len];\n        for (int i = 0; i < len; i++) {\n            data[i] = in.readInt();\n        }\n    }\n    @Override\n    public void write(DataOutput out) throws IOException {\n        out.writeInt(data.length);\n        for (int v : data) {\n            out.writeInt(v);\n        }\n    }\n}\n```\n```:\u7d50\u679c\nsize=204\n```\n\n# Hadoop\u306e\u53ef\u5909\u9577\u6574\u6570\u3067\u30b7\u30ea\u30a2\u30e9\u30a4\u30ba\n\n```java:IntArray.java\n    @Override\n    public void readFields(DataInput in) throws IOException {\n        int len = WritableUtils.readVInt(in);\n        data = new int[len];\n        for (int i = 0; i < len; i++) {\n            data[i] = WritableUtils.readVInt(in);\n        }\n    }\n    @Override\n    public void write(DataOutput out) throws IOException {\n       WritableUtils.writeVInt(out, data.length);\n        for (int v : data) {\n            WritableUtils.writeVInt(out, v);\n        }\n    }\n```\n```:\u7d50\u679c\nsize=150\n```\n\n# \u7b26\u53f7\u306a\u30572\u30d0\u30a4\u30c8\u307e\u3067\u306e\u6574\u6570\u306b\u6700\u9069\u5316\u3057\u305f\u53ef\u5909\u9577\u6574\u6570\u3092\u4f5c\u3063\u3066\u307f\u305f\n\nHdoop\u306e\u5b9f\u88c5\u3092\u53c2\u8003\u306b\u30010~65,534\u306e\u7bc4\u56f2\u30922\u30d0\u30a4\u30c8\u3067\u51fa\u529b\u3067\u304d\u308b\u53ef\u5909\u9577\u6574\u6570\u306e\u30b7\u30ea\u30a2\u30e9\u30a4\u30ba\u3092\u4f5c\u3063\u3066\u307f\u305f\u3002\n\n* \u5024\u304c0~65,534(0xfffe)\u306e\u5834\u5408\u306f\u30012\u30d0\u30a4\u30c8\u3067\u51fa\u529b\u3002\n* 65,535(0xffff)\u4ee5\u4e0a\u306e\u5834\u5408\u306f\u3001\u5148\u982d2\u30d0\u30a4\u30c8\u306b0xffff\u30013\u30d0\u30a4\u30c8\u76ee\u4ee5\u964d\u306bint\u5024\u3092\u51fa\u529b(\u5408\u8a086\u30d0\u30a4\u30c8)\u3002\n\n```java:IntArray.java\n    @Override\n    public void readFields(DataInput in) throws IOException {\n        int len = readSpecialVInt(in);\n        data = new int[len];\n        for (int i = 0; i < len; i++) {\n            data[i] = readSpecialVInt(in);\n        }\n    }\n    @Override\n    public void write(DataOutput out) throws IOException {\n       writeSpecialVInt(out, data.length);\n        for (int v : data) {\n            writeSpecialVInt(out, v);\n        }\n    }\n    private int readSpecialVInt(DataInput in) throws IOException {\n        int v = ((in.readByte() & 0xff) << 8) | (in.readByte() & 0xff);\n        v = (0 <= v && v <= 0xfffe) ? v : in.readInt();\n        return v;\n    }\n    private void writeSpecialVInt(DataOutput out, int v) throws IOException {\n        System.out.println(Long.toHexString(v) + \"->\");\n        if (0 <= v && v <= 0xfffe) {\n            System.out.println(\"  2bytes\");\n            out.writeByte((byte) (0xff & (v >> 8)));\n            out.writeByte((byte) (0xff & (v)));\n        }\n        else {\n            System.out.println(\"  6bytes\");\n            out.writeByte(0xff);\n            out.writeByte(0xff);\n            out.writeInt(v);\n        }\n    }\n```\n```:\u7d50\u679c\nsize=106\n```\n\n# \u7d50\u679c\u307e\u3068\u3081\n\n|\u30b7\u30ea\u30a2\u30e9\u30a4\u30ba\u65b9\u6cd5|\u30b5\u30a4\u30ba|\n|----|----:|\n|\u56fa\u5b9a\u9577\u6574\u6570|204|\n|Hadoop\u306e\u53ef\u5909\u9577\u6574\u6570|150|\n|2\u30d0\u30a4\u30c8\u306b\u6700\u9069\u5316\u3057\u305f<br/>\u53ef\u5909\u9577\u6574\u6570|106|\n\n-------------------\n\n\u8a18\u4e8b\u4e00\u89a7\n\n[(1) Writable\u3067\u53ef\u5909\u9577\u6574\u6570\u3092\u4f7f\u3046][link-1]\n[(2) \u30c7\u30fc\u30bf\u3092\u52a0\u5de5\u3057\u3066\u53ef\u5909\u9577\u6574\u6570\u306e\u52b9\u679c\u3092\u9ad8\u3081\u308b][link-2]\n(3) \u72ec\u81ea\u30ed\u30b8\u30c3\u30af\u3067\u6574\u6570\u3092\u30b7\u30ea\u30a2\u30e9\u30a4\u30ba\u3059\u308b\n\n[link-1]:http://qiita.com/tag1216/items/4c5349bfe612484d3ce5 \"(1) Writable\u3067\u53ef\u5909\u9577\u6574\u6570\u3092\u4f7f\u3046\"\n[link-2]:http://qiita.com/tag1216/items/43beccf2e4771b7990b7 \"(2) \u30c7\u30fc\u30bf\u3092\u52a0\u5de5\u3057\u3066\u53ef\u5909\u9577\u6574\u6570\u306e\u52b9\u679c\u3092\u9ad8\u3081\u308b\"\n", "tags": ["hadoop", "Java"]}