{"context": " More than 1 year has passed since last update.\n\n\u767a\u7aef\n\n\n\u7d4c\u7def\n\n\u7de8\u96c6\u30ea\u30af\u30a8\u30b9\u30c8 (\u6539\u7ac4)\nhttp://t.co/A7u4QRgMiV\u2014 \u9032\u6357 (@mpyw) 2015, 8\u6708 27\n\n\n\nstr_replace\u3060\u3051\u89e6\u308c\u3066strtr\u3092\u8aac\u660e\u3057\u3066\u3044\u306a\u3044\u8a18\u4e8b\u3063\u3066\u8150\u308b\u307b\u3069\u3042\u308b\u3051\u3069\u305d\u308c\u3092\u898b\u308b\u305f\u3073strtr\u304c\u6c17\u306e\u6bd2\u306b\u306a\u308b\u2014 \u9032\u6357 (@mpyw) 2015, 8\u6708 27\n\n\n\n@tadsan PHP\u306e\u95a2\u6570\u4f7f\u3063\u3066\u308b\u306e\u3067\u307e\u3060\u30e9\u30af\u3067\u3059\u3051\u3069\u3053\u308cC\u3067\u3044\u3061\u304b\u3089\u5b9f\u88c5\u3059\u308b\u306e\u304b\u306a\u308a\u30a8\u30b0\u3044\u3067\u3059\uff57\uff57\u2014 \u9032\u6357 (@mpyw) 2015, 8\u6708 27\n\n\nC\u3067strtr\u5b9f\u88c5\u3057\u3066\u307f\u305f\u3055\u3042\u308b\u305e\u2014 \u9032\u6357 (@mpyw) 2015, 8\u6708 27\n\n\n\n\u5168\u3066\u306e\u5143\u51f6\nhttps://t.co/Y43lyhmxj8\u2014 \u9032\u6357 (@mpyw) 2015, 8\u6708 27\n\n\n\u5bdd\u308c\u306a\u3044\ud83d\udca2\u2014 \u9032\u6357 (@mpyw) 2015, 8\u6708 27\n\n\n\u30b3\u30fc\u30c9\n`strtr_strings`\u306e\u65b9\u306b\u4e0d\u5177\u5408\u304c\u3042\u308a\u307e\u3059\u3002C\u8a00\u8a9e\u8a73\u3057\u3044\u4eba\u304a\u3057\u3048\u3066\u304f\u3060\u3055\u3044\u3002\n\n\nmalloc\u3057\u3066\u308b\u306f\u305a\u306a\u306e\u306bfree\u51fa\u6765\u306a\u3044\u3063\u3066\u8a00\u308f\u308c\u308b \u4fee\u6b63\u5b8c\u4e86\n\n\u6587\u5b57\u5217\u306e\u672b\u5c3e\u4ed8\u8fd1\u306e\u7f6e\u63db\u7d50\u679c\u304c\u304a\u304b\u3057\u3044 \u4fee\u6b63\u5b8c\u4e86\n\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\ntypedef struct memo_t {\n    size_t pos;\n    size_t len;\n} Memo;\n\nint compare_memo(const void *a, const void *b) {\n    return (ssize_t)((const Memo*)b)->len - (ssize_t)((const Memo*)a)->len;\n}\n\nchar *strtr_chars(char *str, const char *from, const char *to) {\n    char *s = str;\n    while (*s) {\n        const char *f = from;\n        const char *t = to;\n        while (*f && *t) {\n            if (*s == *f) {\n                *s = *t;\n                break;\n            }\n            ++f;\n            ++t;\n        }\n        ++s;\n    }\n    return str;\n}\n\nchar *strtr_strings(const char *str, size_t size, const char *from[size], const char *to[size], char **buffer) {\n    Memo memo[size];\n    for (size_t i = 0; i < size; ++i) {\n        memo[i].pos = i;\n        memo[i].len = strlen(from[i]);\n    }\n    qsort(memo, size, sizeof(Memo), compare_memo);\n    size_t capacity = strlen(str) + 1;\n    size_t filled = 0;\n    if (!(*buffer = (char *)malloc(capacity))) {\n        perror(\"malloc\");\n        exit(EXIT_FAILURE);\n    }\n    char *ptr = *buffer;\n    while (*str) {\n        for (size_t i = 0; i < size; ++i) {\n            size_t pos = memo[i].pos;\n            const char *haystack = str;\n            const char *needle = from[pos];\n            while (*haystack && *needle && *haystack == *needle) {\n                ++haystack;\n                ++needle;\n            }\n            if (!*needle) {\n                needle = from[pos];\n                const char *replace = to[pos];\n                while (*needle++) {\n                    ++str;\n                }\n                while (*replace) {\n                    if (capacity - filled < 1) {\n                        size_t pos = ptr - *buffer;\n                        *buffer = realloc(*buffer, capacity += 1024);\n                        if (!*buffer) {\n                            perror(\"realloc\");\n                            exit(EXIT_FAILURE);\n                        }\n                        ptr = *buffer + pos;\n                    }\n                    ++filled; \n                    *ptr++ = *replace++;\n                }\n                break;\n            } else if (i == size - 1) {\n                if (capacity - filled < 1) {\n                    size_t pos = ptr - *buffer;\n                    *buffer = realloc(*buffer, capacity += 1024);\n                    if (!*buffer) {\n                        perror(\"realloc\");\n                        exit(EXIT_FAILURE);\n                    }\n                    ptr = *buffer + pos;\n                }\n                ++filled; \n                *ptr++ = *str++;\n            }\n        }\n    }\n    *ptr = '\\0';\n    return *buffer;\n}\n\nint main(void) {\n    char str[] = \"abaabbabcababcabbabc\";\n    char *ptr;\n    const char *from_strings[] = {\"a\", \"ab\", \"abc\"};\n    const char *to_strings[] = {\"<a>\", \"<ab>\", \"<abc>\"};\n    printf(\"%s\\n\", strtr_strings(\n        str, sizeof(from_strings) / sizeof(char *), from_strings, to_strings, &ptr\n    ));\n    printf(\"%s\\n\", strtr_chars(str, \"abc\", \"cab\"));\n    free(ptr);\n    return 0;\n}\n\n# \u767a\u7aef\n\n<blockquote class=\"twitter-tweet\" lang=\"ja\"><p lang=\"und\" dir=\"ltr\"><a href=\"https://twitter.com/hashtag/%E8%B5%B7%E3%81%8D%E3%81%9F%E3%82%89%E3%81%BE%E3%81%A3%E3%81%B4%E3%83%BC%E5%B8%AB%E3%81%8Cstrtr%E3%81%AEC%E5%AE%9F%E8%A3%85%E3%82%92%E5%AE%8C%E6%88%90%E3%81%95%E3%81%9B%E3%81%A6%E3%82%8B?src=hash\">#\u8d77\u304d\u305f\u3089\u307e\u3063\u3074\u30fc\u5e2b\u304cstrtr\u306eC\u5b9f\u88c5\u3092\u5b8c\u6210\u3055\u305b\u3066\u308b</a></p>&mdash; \u53c8\u6a2a\u9854 (@tadsan) <a href=\"https://twitter.com/tadsan/status/636957867350716421\">2015, 8\u6708 27</a></blockquote>\n<script async src=\"//platform.twitter.com/widgets.js\" charset=\"utf-8\"></script>\n\n# \u7d4c\u7def\n\n<blockquote class=\"twitter-tweet\" lang=\"ja\"><p lang=\"ja\" dir=\"ltr\">\u7de8\u96c6\u30ea\u30af\u30a8\u30b9\u30c8 (\u6539\u7ac4)&#10;<a href=\"http://t.co/A7u4QRgMiV\">http://t.co/A7u4QRgMiV</a></p>&mdash; \u9032\u6357 (@mpyw) <a href=\"https://twitter.com/mpyw/status/636953494893694977\">2015, 8\u6708 27</a></blockquote>\n<script async src=\"//platform.twitter.com/widgets.js\" charset=\"utf-8\"></script>\n\n<blockquote class=\"twitter-tweet\" lang=\"ja\"><p lang=\"ja\" dir=\"ltr\">\u539f\u5f62\u304c\u306a\u3044\u2026</p>&mdash; \u53c8\u6a2a\u9854 (@tadsan) <a href=\"https://twitter.com/tadsan/status/636954333158899712\">2015, 8\u6708 27</a></blockquote>\n<script async src=\"//platform.twitter.com/widgets.js\" charset=\"utf-8\"></script>\n\n<blockquote class=\"twitter-tweet\" lang=\"ja\"><p lang=\"ja\" dir=\"ltr\">str_replace\u3060\u3051\u89e6\u308c\u3066strtr\u3092\u8aac\u660e\u3057\u3066\u3044\u306a\u3044\u8a18\u4e8b\u3063\u3066\u8150\u308b\u307b\u3069\u3042\u308b\u3051\u3069\u305d\u308c\u3092\u898b\u308b\u305f\u3073strtr\u304c\u6c17\u306e\u6bd2\u306b\u306a\u308b</p>&mdash; \u9032\u6357 (@mpyw) <a href=\"https://twitter.com/mpyw/status/636955479726403584\">2015, 8\u6708 27</a></blockquote>\n<script async src=\"//platform.twitter.com/widgets.js\" charset=\"utf-8\"></script>\n\n<blockquote class=\"twitter-tweet\" lang=\"ja\"><p lang=\"ja\" dir=\"ltr\">\u201c\u4e00\u5ea6\u7f6e\u63db\u3057\u305f\u6587\u5b57\u5217\u306f\u3082\u3046\u7f6e\u63db\u306e\u5bfe\u8c61\u306b\u306a\u3089\u306a\u3044\u3053\u3068\u3092\u78ba\u8a8d\u3057\u307e\u3057\u3087\u3046\u201d\u306e\u3042\u305f\u308a\u304c\u5b9f\u88c5\u3081\u3093\u3069\u304f\u3055\u305d\u3046 (\u307e\u3063\u3074\u30fc\u6c0f\u306e\u5b9f\u88c5\u307e\u3060\u3061\u3083\u3093\u3068\u8aad\u3093\u3067\u306a\u3044)</p>&mdash; \u53c8\u6a2a\u9854 (@tadsan) <a href=\"https://twitter.com/tadsan/status/636956271665504256\">2015, 8\u6708 27</a></blockquote>\n<script async src=\"//platform.twitter.com/widgets.js\" charset=\"utf-8\"></script>\n\n<blockquote class=\"twitter-tweet\" lang=\"ja\"><p lang=\"ja\" dir=\"ltr\"><a href=\"https://twitter.com/tadsan\">@tadsan</a> PHP\u306e\u95a2\u6570\u4f7f\u3063\u3066\u308b\u306e\u3067\u307e\u3060\u30e9\u30af\u3067\u3059\u3051\u3069\u3053\u308cC\u3067\u3044\u3061\u304b\u3089\u5b9f\u88c5\u3059\u308b\u306e\u304b\u306a\u308a\u30a8\u30b0\u3044\u3067\u3059\uff57\uff57</p>&mdash; \u9032\u6357 (@mpyw) <a href=\"https://twitter.com/mpyw/status/636956711635390464\">2015, 8\u6708 27</a></blockquote>\n<script async src=\"//platform.twitter.com/widgets.js\" charset=\"utf-8\"></script>\n\n<blockquote class=\"twitter-tweet\" lang=\"ja\"><p lang=\"ja\" dir=\"ltr\">C\u3067strtr\u5b9f\u88c5\u3057\u3066\u307f\u305f\u3055\u3042\u308b\u305e</p>&mdash; \u9032\u6357 (@mpyw) <a href=\"https://twitter.com/mpyw/status/636957453171601408\">2015, 8\u6708 27</a></blockquote>\n<script async src=\"//platform.twitter.com/widgets.js\" charset=\"utf-8\"></script>\n\n<blockquote class=\"twitter-tweet\" lang=\"ja\"><p lang=\"und\" dir=\"ltr\"><a href=\"https://twitter.com/hashtag/%E8%B5%B7%E3%81%8D%E3%81%9F%E3%82%89%E3%81%BE%E3%81%A3%E3%81%B4%E3%83%BC%E5%B8%AB%E3%81%8Cstrtr%E3%81%AEC%E5%AE%9F%E8%A3%85%E3%82%92%E5%AE%8C%E6%88%90%E3%81%95%E3%81%9B%E3%81%A6%E3%82%8B?src=hash\">#\u8d77\u304d\u305f\u3089\u307e\u3063\u3074\u30fc\u5e2b\u304cstrtr\u306eC\u5b9f\u88c5\u3092\u5b8c\u6210\u3055\u305b\u3066\u308b</a></p>&mdash; \u53c8\u6a2a\u9854 (@tadsan) <a href=\"https://twitter.com/tadsan/status/636957867350716421\">2015, 8\u6708 27</a></blockquote>\n<script async src=\"//platform.twitter.com/widgets.js\" charset=\"utf-8\"></script>\n\n<blockquote class=\"twitter-tweet\" lang=\"ja\"><p lang=\"ja\" dir=\"ltr\">\u5168\u3066\u306e\u5143\u51f6&#10;<a href=\"https://t.co/Y43lyhmxj8\">https://t.co/Y43lyhmxj8</a></p>&mdash; \u9032\u6357 (@mpyw) <a href=\"https://twitter.com/mpyw/status/636975473042452482\">2015, 8\u6708 27</a></blockquote>\n<script async src=\"//platform.twitter.com/widgets.js\" charset=\"utf-8\"></script>\n\n<blockquote class=\"twitter-tweet\" lang=\"ja\"><p lang=\"ja\" dir=\"ltr\">\u5bdd\u308c\u306a\u3044\ud83d\udca2</p>&mdash; \u9032\u6357 (@mpyw) <a href=\"https://twitter.com/mpyw/status/636975522984030208\">2015, 8\u6708 27</a></blockquote>\n<script async src=\"//platform.twitter.com/widgets.js\" charset=\"utf-8\"></script>\n\n# \u30b3\u30fc\u30c9\n\n<del>`strtr_strings`\u306e\u65b9\u306b\u4e0d\u5177\u5408\u304c\u3042\u308a\u307e\u3059\u3002C\u8a00\u8a9e\u8a73\u3057\u3044\u4eba\u304a\u3057\u3048\u3066\u304f\u3060\u3055\u3044\u3002</del>\n\n- <del>`malloc`\u3057\u3066\u308b\u306f\u305a\u306a\u306e\u306b`free`\u51fa\u6765\u306a\u3044\u3063\u3066\u8a00\u308f\u308c\u308b</del> \u4fee\u6b63\u5b8c\u4e86\n- <del>\u6587\u5b57\u5217\u306e\u672b\u5c3e\u4ed8\u8fd1\u306e\u7f6e\u63db\u7d50\u679c\u304c\u304a\u304b\u3057\u3044</del> \u4fee\u6b63\u5b8c\u4e86\n\n```c\n#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\ntypedef struct memo_t {\n    size_t pos;\n    size_t len;\n} Memo;\n\nint compare_memo(const void *a, const void *b) {\n    return (ssize_t)((const Memo*)b)->len - (ssize_t)((const Memo*)a)->len;\n}\n\nchar *strtr_chars(char *str, const char *from, const char *to) {\n    char *s = str;\n    while (*s) {\n        const char *f = from;\n        const char *t = to;\n        while (*f && *t) {\n            if (*s == *f) {\n                *s = *t;\n                break;\n            }\n            ++f;\n            ++t;\n        }\n        ++s;\n    }\n    return str;\n}\n\nchar *strtr_strings(const char *str, size_t size, const char *from[size], const char *to[size], char **buffer) {\n    Memo memo[size];\n    for (size_t i = 0; i < size; ++i) {\n        memo[i].pos = i;\n        memo[i].len = strlen(from[i]);\n    }\n    qsort(memo, size, sizeof(Memo), compare_memo);\n    size_t capacity = strlen(str) + 1;\n    size_t filled = 0;\n    if (!(*buffer = (char *)malloc(capacity))) {\n        perror(\"malloc\");\n        exit(EXIT_FAILURE);\n    }\n    char *ptr = *buffer;\n    while (*str) {\n        for (size_t i = 0; i < size; ++i) {\n            size_t pos = memo[i].pos;\n            const char *haystack = str;\n            const char *needle = from[pos];\n            while (*haystack && *needle && *haystack == *needle) {\n                ++haystack;\n                ++needle;\n            }\n            if (!*needle) {\n                needle = from[pos];\n                const char *replace = to[pos];\n                while (*needle++) {\n                    ++str;\n                }\n                while (*replace) {\n                    if (capacity - filled < 1) {\n                        size_t pos = ptr - *buffer;\n                        *buffer = realloc(*buffer, capacity += 1024);\n                        if (!*buffer) {\n                            perror(\"realloc\");\n                            exit(EXIT_FAILURE);\n                        }\n                        ptr = *buffer + pos;\n                    }\n                    ++filled; \n                    *ptr++ = *replace++;\n                }\n                break;\n            } else if (i == size - 1) {\n                if (capacity - filled < 1) {\n                    size_t pos = ptr - *buffer;\n                    *buffer = realloc(*buffer, capacity += 1024);\n                    if (!*buffer) {\n                        perror(\"realloc\");\n                        exit(EXIT_FAILURE);\n                    }\n                    ptr = *buffer + pos;\n                }\n                ++filled; \n                *ptr++ = *str++;\n            }\n        }\n    }\n    *ptr = '\\0';\n    return *buffer;\n}\n\nint main(void) {\n    char str[] = \"abaabbabcababcabbabc\";\n    char *ptr;\n    const char *from_strings[] = {\"a\", \"ab\", \"abc\"};\n    const char *to_strings[] = {\"<a>\", \"<ab>\", \"<abc>\"};\n    printf(\"%s\\n\", strtr_strings(\n        str, sizeof(from_strings) / sizeof(char *), from_strings, to_strings, &ptr\n    ));\n    printf(\"%s\\n\", strtr_chars(str, \"abc\", \"cab\"));\n    free(ptr);\n    return 0;\n}\n```\n\n", "tags": ["C", "PHP", "\u8cea\u554f"]}