{"context": "Realtek Ameba\u306eSPI\u3092\u4f7f\u3063\u3066\u307f\u307e\u3057\u305f\u3002\n\n\u307e\u3068\u3081\n\nRealtek Ameba\u306eSPI\u306eAPI\u306fmebd HAL\u6e96\u62e0\u306eAPI\u3068\u3057\u3066\u63d0\u4f9b\u3055\u308c\u308b\u3002\nSPI\u30de\u30b9\u30bf\u3068SPI\u30b9\u30ec\u30fc\u30d6\u306e\u4e21\u65b9\u3092\u30b5\u30dd\u30fc\u30c8\n\n\n\u6e96\u5099\n\n\u30b3\u30f3\u30d1\u30a4\u30e9\u306flaunchpad\u304b\u3089arm-none-eabi-gcc\u3092\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3057\u3066\u304f\u3060\u3055\u3044\u3002\nSDK\u306fgithub\u306b\u3042\u308b https://github.com/eggman/rtl_ameba_gcc_sample \u3092\u4f7f\u3044\u307e\u3059\u3002\n\n\nSPI\u306eAPI\n\nROM\u5185\u8535HAL\u306eAPI\u3068mbed hal\u306eAPI\u3068mbed \u62e1\u5f35hal\u306eAPI\u304c\u3042\u308a\u307e\u3059\u3002\nROM\u5185\u8535HAL\u306f\u60c5\u5831\u304c\u4e0d\u8db3\u3057\u3066\u3044\u308b\u306e\u3067\u3088\u304f\u308f\u304b\u308a\u307e\u305b\u3093\u3002\nmbed\u62e1\u5f35HAL\u306f\u4eca\u56de\u306eSDK\u74b0\u5883\u306b\u5165\u3063\u3066\u3044\u306a\u3044\u306e\u3067\u3001\u307e\u305f\u5225\u306e\u6a5f\u4f1a\u306b\u8aac\u660e\u3057\u307e\u3059\u3002\nmbed hal\u306eSPI\u306b\u3064\u3044\u3066\u8aac\u660e\u3057\u3066\u3044\u304d\u307e\u3059\u3002\n\n\nmbed HAL SPI\n\nsdk/src/sw/lib/sw_lib/mbed/hal/spi_api.h \u304cAPI\u306e\u30d8\u30c3\u30c0\u30d5\u30a1\u30a4\u30eb\u3067\u3059\u3002\n\u3053\u306eAPI\u306e\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u306f https://github.com/neojou/arm-gcc-blink-example/blob/master/src/sw/lib/sw_lib/mbed/targets/hal/rtl8195a/spi_api.c \u306b\u3042\u308a\u307e\u3059\u3002\n\nvoid spi_init         (spi_t *obj, PinName mosi, PinName miso, PinName sclk, PinName ssel);\nvoid spi_free         (spi_t *obj);\nvoid spi_format       (spi_t *obj, int bits, int mode, int slave);\nvoid spi_frequency    (spi_t *obj, int hz);\nint  spi_master_write (spi_t *obj, int value);\nint  spi_slave_receive(spi_t *obj);\nint  spi_slave_read   (spi_t *obj);\nvoid spi_slave_write  (spi_t *obj, int value);\nint  spi_busy         (spi_t *obj);\n\n\nspi_init()\n\nSPI\u306e\u521d\u671f\u5316\u3001\uff14\u3064\u306e\u7aef\u5b50 MOSI MISO SCLK CS\u3092\u8a2d\u5b9a\u3059\u308b\u3002\n\n\nspi_free()\n\nSPI\u306e\u89e3\u653e\u3002 \u7aef\u5b50\u5272\u308a\u5f53\u3066\u304c\u89e3\u653e\u3055\u308c\u308b\u3063\u307d\u3044\u3002\n\n\nspi_format()\n\nbits \uff11\u8ee2\u9001\u5358\u4f4d\u306ebit\u5e45\u3092\u6307\u5b9a\u3001\u901a\u5e38\u306f8\nmode 0-3\u306eSPI\u30e2\u30fc\u30c9\u3092\u8a2d\u5b9a\nslave 0\u306a\u3089\u30de\u30b9\u30bf\u30fc\u30011\u306a\u3089slave\n\n\nspi_frequency()\n\nSPI\u30de\u30b9\u30bf\u30fc\u306e\u5834\u5408\u306b\u3001SPICLK\u306e\u5468\u6ce2\u6570\u3092\u8a2d\u5b9a\u3059\u308b\u3002 SPI\u30d6\u30ed\u30c3\u30af\u306b\u4f9b\u7d66\u3055\u308c\u3066\u3044\u308b\u30af\u30ed\u30c3\u30af\u306e\u5206\u5468\u5668\u306e\u8a2d\u5b9a\u3002\n\n\nspi_master_write()\n\nSPI\u30de\u30b9\u30bf\u30fc\u52d5\u4f5c\u6642\u306b\u4f7f\u3046 value\u3092SPI\u30b9\u30ec\u30fc\u30d6\u306b\u66f8\u304d\u8fbc\u307f\u3001\u8aad\u307f\u8fbc\u3093\u3060\u5024\u3092\u623b\u308a\u5024\u3068\u3057\u3066\u8fd4\u3059\u3002\n\uff11\u8ee2\u9001\u5358\u4f4d\u3054\u3068\u306b\u3001\u81ea\u52d5\u7684\u306bCS\u304c\u7121\u52b9\u2192\u6709\u52b9\u2192\u7121\u52b9\u3068\u306a\u308a\u307e\u3059\u3002 \u30de\u30eb\u30c1\u8ee2\u9001\u3057\u305f\u3044\u5834\u5408\u306f\u3001CS\u3092\u5225\u9014GPIO\u3067\u5236\u5fa1\u304c\u5fc5\u8981\u3002\n\n\nspi_slave_reeive()\n\nSPI\u30b9\u30ec\u30fc\u30d6\u52d5\u4f5c\u6642\u306b\u4f7f\u3046 \u53d7\u4fe1\u30d0\u30c3\u30d5\u30a1\u306b\u30c7\u30fc\u30bf\u304c\u3042\u308b\u304b\u78ba\u8a8d\u3059\u308b 0\uff1a\u30c7\u30fc\u30bf\u306a\u3057\u30010\u4ee5\u5916\uff1a\u30c7\u30fc\u30bf\u3042\u308a\n\n\nspi_slave_read()\n\nSPI\u30b9\u30ec\u30fc\u30d6\u52d5\u4f5c\u6642\u306b\u4f7f\u3046 \u53d7\u4fe1\u30d0\u30c3\u30d5\u30a1\u3092\u8aad\u307f\u3060\u3057\u3001\u5024\u3092\u623b\u308a\u5024\u3068\u3057\u3066\u8fd4\u3059\u3002\n\n\nspi_slave_write()\n\nSPI\u30b9\u30ec\u30fc\u30d6\u52d5\u4f5c\u6642\u306b\u4f7f\u3046 \u9001\u4fe1\u30d0\u30c3\u30d5\u30a1\u306bvalue\u3092\u8a2d\u5b9a\u3059\u308b\u3002\n\n\nspi_busy()\n\nSPI\u3092\u4f7f\u7528\u4e2d\u304b\u3069\u3046\u304b\u78ba\u8a8d\u3059\u308b\u30020:\u7a7a\u3044\u3066\u308b 0\u4ee5\u5916:\u4f7f\u7528\u4e2d\n\n\n\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\n\nSPI\u30de\u30b9\u30bf\u306e\u52d5\u4f5c\u3092\u78ba\u8a8d\u3057\u3066\u307f\u305f\u3068\u304d\u306e\u30b3\u30fc\u30c9\u3067\u3059\u3002\nCS\u304cLow\u306b\u306a\u308a\u3001SPI\u30af\u30ed\u30c3\u30af\u304c\u9001\u4fe1\u3055\u308c\u30018\u30d0\u30a4\u30c8\u306e\u30c7\u30fc\u30bf\u304c\u9001\u4fe1\u3055\u308c\u308b\u3053\u3068\u3092\u78ba\u8a8d\u3057\u307e\u3057\u305f\u3002\n\n#define SPI0_MOSI  PC_2\n#define SPI0_MISO  PC_3\n#define SPI0_SCLK  PC_1\n#define SPI0_CS    PC_0\n\n    spi_t spi_master;\n\n    spi_init(&spi_master, SPI0_MOSI, SPI0_MISO, SPI0_SCLK, SPI0_CS);\n    spi_format(&spi_master, 8, 0 , 0);\n    spi_frequency(&spi_master, 20*1000*1000);\n\n    spi_master_write(&spi_master, c);\n\n\nAmeba \u306e SPI \u306e HW\u306b\u3064\u3044\u3066\n\nAmeba\u306eSPI\u306e\u4e2d\u8eab\u306fSynopsys Design Ware SSI\u3067\u3059\u3002\nSynopsys Design Ware SSI \u306f Altera \u306e FPGA Cyclone V\u306b\u8f09\u3063\u3066\u3044\u3066\u3001Altera\u304b\u3089\u8a73\u3057\u3044\u30de\u30cb\u30e5\u30a2\u30eb\u304c\u5165\u624b\u3067\u304d\u307e\u3059\u3002\nhttps://www.altera.com/en_US/pdfs/literature/hb/cyclone-v/cv_5v4.pdf\n\n\n\u305d\u306e\u4ed6\n\nspi_frequency(20000000)\u306820MHz\u3092\u8a2d\u5b9a\u3057\u305f\u5834\u5408\u306e\u5b9f\u969b\u306e\u30af\u30ed\u30c3\u30af\u3092\u30ed\u30b8\u30a2\u30ca\u3067\u6e2c\u5b9a\u3057\u305f\u3068\u3053\u308d5MHz\u3067\u3057\u305f\u3002\n\n\n\u5185\u90e8\u306e\u30d0\u30b9\u30af\u30ed\u30c3\u30af\u3092\u5206\u5468\u3057\u3066\u3044\u308b\u306e\u3067\u3001\u5143\u306e\u30d0\u30b9\u30af\u30ed\u30c3\u30af\u304c\u4f4e\u3044\u306e\u304b\u3001SPI\u306e\u5206\u5468\u3092\u8a2d\u5b9a\u3057\u3066\u3044\u308b\u30ec\u30b8\u30b9\u30bf baudr\u306esckdv\u306e\u8a2d\u5b9a\u304c\u6b63\u3057\u304f\u306a\u3044\u306e\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u3002\n\u8abf\u3079\u3066\u307f\u305f\u3068\u3053\u308d\u3001baudr\u306esckdv\u304c8\u306b\u8a2d\u5b9a\u3055\u308c\u3066\u304a\u308a\u300140/8 = 5MHz\u306b\u306a\u3063\u3066\u3044\u307e\u3057\u305f\u3002\n\n\n\n    DiagPrintf(\"SSI0 SCKDV %x\\r\\n\", HAL_READ16(SSI0_REG_BASE, REG_DW_SSI_BAUDR));\n\n\u3092\u5b9f\u884c\u3059\u308b\u3068\nSSI0 SCKDV 8\n\n\u3068\u8868\u793a\u3055\u308c\u307e\u3057\u305f\u3002\n*\u3000\u4e0b\u8a18\u306e\u30b3\u30fc\u30c9\u3092\u3057\u305f\u3089baudr\u306esckdv\u304c2\u3068\u306a\u308a 20MHz\u3067\u52d5\u304f\u3088\u3046\u306b\u306a\u308a\u307e\u3057\u305f\u3002SDK\u306elib_platform.a\u306b\u542b\u307e\u308c\u3066\u3044\u308bspi_freq()\u306b\u554f\u984c\u304c\u3042\u308b\u3088\u3046\u3067\u3059\u3002\n    PHAL_SSI_ADAPTOR pHalSsiAdaptor;\n    PHAL_SSI_OP pHalSsiOp;\n\n    pHalSsiAdaptor = &pspi->spi_adp;\n    pHalSsiOp = &pspi->spi_op;\n\n    pHalSsiAdaptor->ClockDivider = 2;\n    pHalSsiOp->HalSsiInit(pHalSsiAdaptor);\n\n\n\u4e0a\u8a18\u3067\u8aac\u660e\u3057\u305fAPI\u306f\u30dd\u30fc\u30ea\u30f3\u30b0\u52d5\u4f5c\u306e\u3088\u3046\u3067\u3059\u3002\n\n\n\u5272\u308a\u8fbc\u307f\u3084DMA\u3092\u4f7f\u3063\u305fAPI\u304cmed\u62e1\u5f35API\u3067\u5b9a\u7fa9\u3055\u308c\u3044\u307e\u3059\u3002\n\n\n\nRealtek Ameba\u306eSPI\u3092\u4f7f\u3063\u3066\u307f\u307e\u3057\u305f\u3002\n\n# \u307e\u3068\u3081\n* Realtek Ameba\u306eSPI\u306eAPI\u306fmebd HAL\u6e96\u62e0\u306eAPI\u3068\u3057\u3066\u63d0\u4f9b\u3055\u308c\u308b\u3002\n* SPI\u30de\u30b9\u30bf\u3068SPI\u30b9\u30ec\u30fc\u30d6\u306e\u4e21\u65b9\u3092\u30b5\u30dd\u30fc\u30c8\n\n\n# \u6e96\u5099\n* \u30b3\u30f3\u30d1\u30a4\u30e9\u306flaunchpad\u304b\u3089arm-none-eabi-gcc\u3092\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n* SDK\u306fgithub\u306b\u3042\u308b https://github.com/eggman/rtl_ameba_gcc_sample \u3092\u4f7f\u3044\u307e\u3059\u3002\n\n# SPI\u306eAPI \n* ROM\u5185\u8535HAL\u306eAPI\u3068mbed hal\u306eAPI\u3068mbed \u62e1\u5f35hal\u306eAPI\u304c\u3042\u308a\u307e\u3059\u3002\n* ROM\u5185\u8535HAL\u306f\u60c5\u5831\u304c\u4e0d\u8db3\u3057\u3066\u3044\u308b\u306e\u3067\u3088\u304f\u308f\u304b\u308a\u307e\u305b\u3093\u3002\n* mbed\u62e1\u5f35HAL\u306f\u4eca\u56de\u306eSDK\u74b0\u5883\u306b\u5165\u3063\u3066\u3044\u306a\u3044\u306e\u3067\u3001\u307e\u305f\u5225\u306e\u6a5f\u4f1a\u306b\u8aac\u660e\u3057\u307e\u3059\u3002\n* mbed hal\u306eSPI\u306b\u3064\u3044\u3066\u8aac\u660e\u3057\u3066\u3044\u304d\u307e\u3059\u3002\n\n# mbed HAL SPI\n* sdk/src/sw/lib/sw_lib/mbed/hal/spi_api.h \u304cAPI\u306e\u30d8\u30c3\u30c0\u30d5\u30a1\u30a4\u30eb\u3067\u3059\u3002\n* \u3053\u306eAPI\u306e\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u306f https://github.com/neojou/arm-gcc-blink-example/blob/master/src/sw/lib/sw_lib/mbed/targets/hal/rtl8195a/spi_api.c \u306b\u3042\u308a\u307e\u3059\u3002\n\n```c\nvoid spi_init         (spi_t *obj, PinName mosi, PinName miso, PinName sclk, PinName ssel);\nvoid spi_free         (spi_t *obj);\nvoid spi_format       (spi_t *obj, int bits, int mode, int slave);\nvoid spi_frequency    (spi_t *obj, int hz);\nint  spi_master_write (spi_t *obj, int value);\nint  spi_slave_receive(spi_t *obj);\nint  spi_slave_read   (spi_t *obj);\nvoid spi_slave_write  (spi_t *obj, int value);\nint  spi_busy         (spi_t *obj);\n```\n## spi_init()\n* SPI\u306e\u521d\u671f\u5316\u3001\uff14\u3064\u306e\u7aef\u5b50 MOSI MISO SCLK CS\u3092\u8a2d\u5b9a\u3059\u308b\u3002\n\n## spi_free()\n* SPI\u306e\u89e3\u653e\u3002 \u7aef\u5b50\u5272\u308a\u5f53\u3066\u304c\u89e3\u653e\u3055\u308c\u308b\u3063\u307d\u3044\u3002\n\n## spi_format()\n* bits \uff11\u8ee2\u9001\u5358\u4f4d\u306ebit\u5e45\u3092\u6307\u5b9a\u3001\u901a\u5e38\u306f8\n* mode 0-3\u306eSPI\u30e2\u30fc\u30c9\u3092\u8a2d\u5b9a\n* slave 0\u306a\u3089\u30de\u30b9\u30bf\u30fc\u30011\u306a\u3089slave\n\n## spi_frequency()\n* SPI\u30de\u30b9\u30bf\u30fc\u306e\u5834\u5408\u306b\u3001SPICLK\u306e\u5468\u6ce2\u6570\u3092\u8a2d\u5b9a\u3059\u308b\u3002 SPI\u30d6\u30ed\u30c3\u30af\u306b\u4f9b\u7d66\u3055\u308c\u3066\u3044\u308b\u30af\u30ed\u30c3\u30af\u306e\u5206\u5468\b\u5668\u306e\u8a2d\u5b9a\u3002\n\n## spi_master_write()\n* SPI\u30de\u30b9\u30bf\u30fc\u52d5\u4f5c\u6642\u306b\u4f7f\u3046 value\u3092SPI\u30b9\u30ec\u30fc\u30d6\u306b\u66f8\u304d\u8fbc\u307f\u3001\u8aad\u307f\u8fbc\u3093\u3060\u5024\u3092\u623b\u308a\u5024\u3068\u3057\u3066\u8fd4\u3059\u3002\n* \uff11\u8ee2\u9001\u5358\u4f4d\u3054\u3068\u306b\u3001\u81ea\u52d5\u7684\u306bCS\u304c\u7121\u52b9\u2192\u6709\u52b9\u2192\u7121\u52b9\u3068\u306a\u308a\u307e\u3059\u3002 \u30de\u30eb\u30c1\u8ee2\u9001\u3057\u305f\u3044\u5834\u5408\u306f\u3001CS\u3092\u5225\u9014GPIO\u3067\u5236\u5fa1\u304c\u5fc5\u8981\u3002\n\n## spi_slave_reeive()\n* SPI\u30b9\u30ec\u30fc\u30d6\u52d5\u4f5c\u6642\u306b\u4f7f\u3046 \u53d7\u4fe1\u30d0\u30c3\u30d5\u30a1\u306b\u30c7\u30fc\u30bf\u304c\u3042\u308b\u304b\u78ba\u8a8d\u3059\u308b 0\uff1a\u30c7\u30fc\u30bf\u306a\u3057\u30010\u4ee5\u5916\uff1a\u30c7\u30fc\u30bf\u3042\u308a\n\n## spi_slave_read()\n* SPI\u30b9\u30ec\u30fc\u30d6\u52d5\u4f5c\u6642\u306b\u4f7f\u3046 \u53d7\u4fe1\u30d0\u30c3\u30d5\u30a1\u3092\u8aad\u307f\u3060\u3057\u3001\u5024\u3092\u623b\u308a\u5024\u3068\u3057\u3066\u8fd4\u3059\u3002\n\n## spi_slave_write()\n* SPI\u30b9\u30ec\u30fc\u30d6\u52d5\u4f5c\u6642\u306b\u4f7f\u3046 \u9001\u4fe1\u30d0\u30c3\u30d5\u30a1\u306bvalue\u3092\u8a2d\u5b9a\u3059\u308b\u3002\n\n## spi_busy()\n* SPI\u3092\u4f7f\u7528\u4e2d\u304b\u3069\u3046\u304b\u78ba\u8a8d\u3059\u308b\u30020:\u7a7a\u3044\u3066\u308b 0\u4ee5\u5916:\u4f7f\u7528\u4e2d\n\n\n# \u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\n* SPI\u30de\u30b9\u30bf\u306e\u52d5\u4f5c\u3092\u78ba\u8a8d\u3057\u3066\u307f\u305f\u3068\u304d\u306e\u30b3\u30fc\u30c9\u3067\u3059\u3002\n* CS\u304cLow\u306b\u306a\u308a\u3001SPI\u30af\u30ed\u30c3\u30af\u304c\u9001\u4fe1\u3055\u308c\u30018\u30d0\u30a4\u30c8\u306e\u30c7\u30fc\u30bf\u304c\u9001\u4fe1\u3055\u308c\u308b\u3053\u3068\u3092\u78ba\u8a8d\u3057\u307e\u3057\u305f\u3002\n\n```c\n#define SPI0_MOSI  PC_2\n#define SPI0_MISO  PC_3\n#define SPI0_SCLK  PC_1\n#define SPI0_CS    PC_0\n\n    spi_t spi_master;\n\n    spi_init(&spi_master, SPI0_MOSI, SPI0_MISO, SPI0_SCLK, SPI0_CS);\n    spi_format(&spi_master, 8, 0 , 0);\n    spi_frequency(&spi_master, 20*1000*1000);\n\n    spi_master_write(&spi_master, c);\n```\n\n\n# Ameba \u306e SPI \u306e HW\u306b\u3064\u3044\u3066\n* Ameba\u306eSPI\u306e\u4e2d\u8eab\u306fSynopsys Design Ware SSI\u3067\u3059\u3002\n* Synopsys Design Ware SSI \u306f Altera \u306e FPGA Cyclone V\u306b\u8f09\u3063\u3066\u3044\u3066\u3001Altera\u304b\u3089\u8a73\u3057\u3044\u30de\u30cb\u30e5\u30a2\u30eb\u304c\u5165\u624b\u3067\u304d\u307e\u3059\u3002\n* https://www.altera.com/en_US/pdfs/literature/hb/cyclone-v/cv_5v4.pdf\n\n# \u305d\u306e\u4ed6\n* spi_frequency(20000000)\u306820MHz\u3092\u8a2d\u5b9a\u3057\u305f\u5834\u5408\u306e\u5b9f\u969b\u306e\u30af\u30ed\u30c3\u30af\u3092\u30ed\u30b8\u30a2\u30ca\u3067\u6e2c\u5b9a\u3057\u305f\u3068\u3053\u308d5MHz\u3067\u3057\u305f\u3002\n * \u5185\u90e8\u306e\u30d0\u30b9\u30af\u30ed\u30c3\u30af\u3092\u5206\u5468\u3057\u3066\u3044\u308b\u306e\u3067\u3001\u5143\u306e\u30d0\u30b9\u30af\u30ed\u30c3\u30af\u304c\u4f4e\u3044\u306e\u304b\u3001SPI\u306e\u5206\u5468\u3092\u8a2d\u5b9a\u3057\u3066\u3044\u308b\u30ec\u30b8\u30b9\u30bf baudr\u306esckdv\u306e\u8a2d\u5b9a\u304c\u6b63\u3057\u304f\u306a\u3044\u306e\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u3002\n * \u8abf\u3079\u3066\u307f\u305f\u3068\u3053\u308d\u3001baudr\u306esckdv\u304c8\u306b\u8a2d\u5b9a\u3055\u308c\u3066\u304a\u308a\u300140/8 = 5MHz\u306b\u306a\u3063\u3066\u3044\u307e\u3057\u305f\u3002\n\n```c\n    DiagPrintf(\"SSI0 SCKDV %x\\r\\n\", HAL_READ16(SSI0_REG_BASE, REG_DW_SSI_BAUDR));\n```\n\u3092\u5b9f\u884c\u3059\u308b\u3068\n\n```\nSSI0 SCKDV 8\n```\n\u3068\u8868\u793a\u3055\u308c\u307e\u3057\u305f\u3002\n\n *\u3000\u4e0b\u8a18\u306e\u30b3\u30fc\u30c9\u3092\u3057\u305f\u3089baudr\u306esckdv\u304c2\u3068\u306a\u308a 20MHz\u3067\u52d5\u304f\u3088\u3046\u306b\u306a\u308a\u307e\u3057\u305f\u3002SDK\u306elib_platform.a\u306b\u542b\u307e\u308c\u3066\u3044\u308bspi_freq()\u306b\u554f\u984c\u304c\u3042\u308b\u3088\u3046\u3067\u3059\u3002\n\n```c\n    PHAL_SSI_ADAPTOR pHalSsiAdaptor;\n    PHAL_SSI_OP pHalSsiOp;\n\n    pHalSsiAdaptor = &pspi->spi_adp;\n    pHalSsiOp = &pspi->spi_op;\n\n    pHalSsiAdaptor->ClockDivider = 2;\n    pHalSsiOp->HalSsiInit(pHalSsiAdaptor);\n```\n\n* \u4e0a\u8a18\u3067\u8aac\u660e\u3057\u305fAPI\u306f\u30dd\u30fc\u30ea\u30f3\u30b0\u52d5\u4f5c\u306e\u3088\u3046\u3067\u3059\u3002\n * \u5272\u308a\u8fbc\u307f\u3084DMA\u3092\u4f7f\u3063\u305fAPI\u304cmed\u62e1\u5f35API\u3067\u5b9a\u7fa9\u3055\u308c\u3044\u307e\u3059\u3002\n", "tags": ["RTL8710", "ARM", "SPI"]}