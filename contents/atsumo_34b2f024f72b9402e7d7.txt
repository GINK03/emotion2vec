{"context": "\u305d\u3082\u305d\u3082\u305d\u3093\u306a\u8907\u96d1\u306a\u3053\u3068\u3057\u306a\u3044\u307b\u3046\u304c...\n\u307e\u3042\u305d\u3046\u3067\u3059\u306d\u2026\n\u4eca\u56de\u306e\u30bf\u30a4\u30df\u30f3\u30b0\u3067\u6539\u3081\u3066Promise\u3084Array\u307e\u308f\u308a\u3068\u5411\u304d\u5408\u3063\u305f\u306e\u3067\u30e1\u30e2\n\n\u76f4\u5217\u51e6\u7406\nconst task = (label, timeout) => {\n    return () => {\n        return new Promise((resolve, reject) => {\n            console.log(`${label} start`);\n\n            setTimeout(() => {\n                console.log(`${label} done`);\n                //timeout\u79d2\u7d4c\u3063\u305f\u3089\u6b21\u3078\n                resolve();\n            }, timeout);\n        });\n    }\n};\n\nconsole.log('promise start');\nPromise.resolve()\n    .then(task('task1', 100))\n    .then(task('task2', 200));\n\n\u3053\u3093\u306a\u51e6\u7406\u304c3\u56de\u3068\u304b\u3060\u3063\u305f\u3089\u307e\u3060\u3044\u3044\u304b\u3082\u3057\u308c\u306a\u3044\u304c\u3001\u3053\u308c\u304c\u591a\u6570\u3068\u306a\u3063\u305f\u3089\u3053\u306e\u307e\u307ethen\u3067\u7d9a\u3051\u308b\u3088\u3046\u306a\u8a18\u8ff0\u3092\u3059\u308b\u306e\u306f\u3064\u3089\u3059\u304e\u308b\u2026\n\u305d\u3053\u3067Array#reduce\u3092\u4f7f\u3063\u3066\u8a18\u8ff0\u3057\u3066\u307f\u308b\nArray.prototype.reduce() - JavaScript | MDN\n\nArray#reduce\u3092\u4f7f\u3063\u3066\u76f4\u5217\u7e4b\u304e\n\npromise-reduce.js\nconst task = (label, timeout) => {\n    return () => {\n        return new Promise((resolve, reject) => {\n            console.log(`${label} start time: ${timeout}`);\n\n            setTimeout(() => {\n                console.log(`${label} done`);\n                //timeout\u79d2\u7d4c\u3063\u305f\u3089\u6b21\u3078\n                resolve();\n            }, timeout);\n        });\n    }\n};\n\nconst REPEAT = 10;\n[...Array(REPEAT).keys()].reduce((promise, current) => {\n    let label = `task${current}`;\n  let timeout = Math.floor((Math.random() * 500));\n    return promise.then(task(label, timeout));\n}, Promise.resolve());\n\n\n\n\n\u7d50\u679c\n$node promise-reduce.js\ntask0 start time: 69\ntask0 done\ntask1 start time: 5\ntask1 done\ntask2 start time: 191\ntask2 done\ntask3 start time: 89\ntask3 done\ntask4 start time: 458\ntask4 done\ntask5 start time: 112\ntask5 done\ntask6 start time: 107\ntask6 done\ntask7 start time: 14\ntask7 done\ntask8 start time: 284\ntask8 done\ntask9 start time: 183\ntask9 done\n\n\n\u4e26\u5217\u00d7\u76f4\u5217\u51e6\u7406\n\u3053\u306e\u500b\u6570\u304c\u66f4\u306b\u5897\u3048\u305f\u3089\u3001\u3061\u3087\u3063\u3068\u3060\u3051\u4e26\u5217\u306b\u3082\u52d5\u304b\u3057\u305f\u3044\u3002\n\u3067\u3082\u7d50\u679c\u306f\u540c\u6642\u306b\u307b\u3057\u3044\n\npromise-parallel-serial.js\nconst task = (label, timeout) => {\n  return () => {\n    return new Promise((resolve, reject) => {\n      console.log(`start: ${label}  time: ${timeout}`);\n\n      setTimeout(() => {\n        console.log(`done:  ${label}  time: ${timeout}`);\n        //timeout\u79d2\u7d4c\u3063\u305f\u3089\u6b21\u3078\n        resolve();\n      }, timeout);\n    });\n  }\n};\n\n//\u76f4\u5217\u51e6\u7406\u306f3\u3064\nconst REPEAT = 3;\n//\u4e26\u5217\u306f4\u3064\nconst PARALLEL = 4;\n\nconst parallels = [...Array(PARALLEL).keys()].map(index => {\n  let lastpromise = [...Array(REPEAT).keys()].reduce((promise, current) => {\n    let label = `task ${index+1}-${current+1}`;\n    let timeout = Math.floor((Math.random() * 500));\n    return promise.then(task(label, timeout));\n  }, Promise.resolve());\n\n  return lastpromise;\n});\n\n\nPromise.all(parallels).then(() => {\n    //\u4e26\u5217\u5b9f\u884c\u3057\u305f\u3059\u3079\u3066\u304c\u5b8c\u4e86\u3057\u305f\u3068\u304d\n  console.log('all done');\n});\n\n\n\n\u7d50\u679c\nstart: task 1-1  time: 179\nstart: task 2-1  time: 26\nstart: task 3-1  time: 199\nstart: task 4-1  time: 303\ndone:  task 2-1  time: 26\nstart: task 2-2  time: 469\ndone:  task 1-1  time: 179\nstart: task 1-2  time: 365\ndone:  task 3-1  time: 199\nstart: task 3-2  time: 36\ndone:  task 3-2  time: 36\nstart: task 3-3  time: 360\ndone:  task 4-1  time: 303\nstart: task 4-2  time: 474\ndone:  task 2-2  time: 469\nstart: task 2-3  time: 331\ndone:  task 1-2  time: 365\nstart: task 1-3  time: 82\ndone:  task 3-3  time: 360\ndone:  task 1-3  time: 82\ndone:  task 4-2  time: 474\nstart: task 4-3  time: 47\ndone:  task 4-3  time: 47\ndone:  task 2-3  time: 331\n\n\n\u30e1\u30e2\n\nPromise.all\u306fthen\u3092\u307e\u3068\u3081\u3066\u308b\u3060\u3051\u3002\nasync/await\u306e\u307b\u3046\u304c\u308f\u304b\u308a\u3084\u3059\u3044\u3060\u308d\u3046\u306a\n\n\n\u53c2\u8003\n\nArray.prototype.reduce() - JavaScript | MDN\npromise-book\nArray Number Ranges in JavaScript ES6\n\n\n\u305d\u3082\u305d\u3082\u305d\u3093\u306a\u8907\u96d1\u306a\u3053\u3068\u3057\u306a\u3044\u307b\u3046\u304c...\n\u307e\u3042\u305d\u3046\u3067\u3059\u306d\u2026\n\n\n\n\u4eca\u56de\u306e\u30bf\u30a4\u30df\u30f3\u30b0\u3067\u6539\u3081\u3066Promise\u3084Array\u307e\u308f\u308a\u3068\u5411\u304d\u5408\u3063\u305f\u306e\u3067\u30e1\u30e2\n\n\n#\u76f4\u5217\u51e6\u7406\n```\nconst task = (label, timeout) => {\n\treturn () => {\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tconsole.log(`${label} start`);\n\t\t\t\n\t\t\tsetTimeout(() => {\n\t\t\t\tconsole.log(`${label} done`);\n\t\t\t\t//timeout\u79d2\u7d4c\u3063\u305f\u3089\u6b21\u3078\n\t\t\t\tresolve();\n\t\t\t}, timeout);\n\t\t});\n\t}\n};\n\nconsole.log('promise start');\nPromise.resolve()\n\t.then(task('task1', 100))\n\t.then(task('task2', 200));\n```\n\n\u3053\u3093\u306a\u51e6\u7406\u304c3\u56de\u3068\u304b\u3060\u3063\u305f\u3089\u307e\u3060\u3044\u3044\u304b\u3082\u3057\u308c\u306a\u3044\u304c\u3001\u3053\u308c\u304c\u591a\u6570\u3068\u306a\u3063\u305f\u3089\u3053\u306e\u307e\u307ethen\u3067\u7d9a\u3051\u308b\u3088\u3046\u306a\u8a18\u8ff0\u3092\u3059\u308b\u306e\u306f\u3064\u3089\u3059\u304e\u308b\u2026\n\n\n\u305d\u3053\u3067Array#reduce\u3092\u4f7f\u3063\u3066\u8a18\u8ff0\u3057\u3066\u307f\u308b\n[Array.prototype.reduce() - JavaScript | MDN](https://developer.mozilla.org/ja/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce)\n\n#Array#reduce\u3092\u4f7f\u3063\u3066\u76f4\u5217\u7e4b\u304e\n```promise-reduce.js\nconst task = (label, timeout) => {\n\treturn () => {\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tconsole.log(`${label} start time: ${timeout}`);\n\t\t\t\n\t\t\tsetTimeout(() => {\n\t\t\t\tconsole.log(`${label} done`);\n\t\t\t\t//timeout\u79d2\u7d4c\u3063\u305f\u3089\u6b21\u3078\n\t\t\t\tresolve();\n\t\t\t}, timeout);\n\t\t});\n\t}\n};\n\nconst REPEAT = 10;\n[...Array(REPEAT).keys()].reduce((promise, current) => {\n\tlet label = `task${current}`;\n  let timeout = Math.floor((Math.random() * 500));\n\treturn promise.then(task(label, timeout));\n}, Promise.resolve());\n\n```\n\n## \u7d50\u679c\n\n```$node promise-reduce.js```\n\n```shell\ntask0 start time: 69\ntask0 done\ntask1 start time: 5\ntask1 done\ntask2 start time: 191\ntask2 done\ntask3 start time: 89\ntask3 done\ntask4 start time: 458\ntask4 done\ntask5 start time: 112\ntask5 done\ntask6 start time: 107\ntask6 done\ntask7 start time: 14\ntask7 done\ntask8 start time: 284\ntask8 done\ntask9 start time: 183\ntask9 done\n```\n\n# \u4e26\u5217\u00d7\u76f4\u5217\u51e6\u7406\n\u3053\u306e\u500b\u6570\u304c\u66f4\u306b\u5897\u3048\u305f\u3089\u3001\u3061\u3087\u3063\u3068\u3060\u3051\u4e26\u5217\u306b\u3082\u52d5\u304b\u3057\u305f\u3044\u3002\n\u3067\u3082\u7d50\u679c\u306f\u540c\u6642\u306b\u307b\u3057\u3044\n\n```promise-parallel-serial.js\nconst task = (label, timeout) => {\n  return () => {\n    return new Promise((resolve, reject) => {\n      console.log(`start: ${label}  time: ${timeout}`);\n      \n      setTimeout(() => {\n        console.log(`done:  ${label}  time: ${timeout}`);\n        //timeout\u79d2\u7d4c\u3063\u305f\u3089\u6b21\u3078\n        resolve();\n      }, timeout);\n    });\n  }\n};\n\n//\u76f4\u5217\u51e6\u7406\u306f3\u3064\nconst REPEAT = 3;\n//\u4e26\u5217\u306f4\u3064\nconst PARALLEL = 4;\n\nconst parallels = [...Array(PARALLEL).keys()].map(index => {\n  let lastpromise = [...Array(REPEAT).keys()].reduce((promise, current) => {\n    let label = `task ${index+1}-${current+1}`;\n    let timeout = Math.floor((Math.random() * 500));\n    return promise.then(task(label, timeout));\n  }, Promise.resolve());\n\n  return lastpromise;\n});\n\n\nPromise.all(parallels).then(() => {\n\t//\u4e26\u5217\u5b9f\u884c\u3057\u305f\u3059\u3079\u3066\u304c\u5b8c\u4e86\u3057\u305f\u3068\u304d\n  console.log('all done');\n});\n```\n\n## \u7d50\u679c\n```\nstart: task 1-1  time: 179\nstart: task 2-1  time: 26\nstart: task 3-1  time: 199\nstart: task 4-1  time: 303\ndone:  task 2-1  time: 26\nstart: task 2-2  time: 469\ndone:  task 1-1  time: 179\nstart: task 1-2  time: 365\ndone:  task 3-1  time: 199\nstart: task 3-2  time: 36\ndone:  task 3-2  time: 36\nstart: task 3-3  time: 360\ndone:  task 4-1  time: 303\nstart: task 4-2  time: 474\ndone:  task 2-2  time: 469\nstart: task 2-3  time: 331\ndone:  task 1-2  time: 365\nstart: task 1-3  time: 82\ndone:  task 3-3  time: 360\ndone:  task 1-3  time: 82\ndone:  task 4-2  time: 474\nstart: task 4-3  time: 47\ndone:  task 4-3  time: 47\ndone:  task 2-3  time: 331\n```\n\n# \u30e1\u30e2\n- Promise.all\u306fthen\u3092\u307e\u3068\u3081\u3066\u308b\u3060\u3051\u3002\n- async/await\u306e\u307b\u3046\u304c\u308f\u304b\u308a\u3084\u3059\u3044\u3060\u308d\u3046\u306a\n\n# \u53c2\u8003\n- [Array.prototype.reduce() - JavaScript | MDN](https://developer.mozilla.org/ja/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce)\n- [promise-book](http://azu.github.io/promises-book/)\n- [Array Number Ranges in JavaScript ES6](http://davidarvelo.com/blog/array-number-range-sequences-in-javascript-es6/)\n", "tags": ["promise", "es6", "JavaScript"]}