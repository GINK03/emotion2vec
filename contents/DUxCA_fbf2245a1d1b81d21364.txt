{"context": "Scheme\u3067\u30b8\u30a7\u30cd\u30ec\u30fc\u30bf\u30fc - Qiita\u3092\u62dd\u898b\u3057\u305f\u3068\u3053\u308d\u3001\u30b8\u30a7\u30cd\u30ec\u30fc\u30bf\u95a2\u6570\u306e\u5185\u90e8\u3067yield\u304c\u547c\u3070\u308c\u306a\u304b\u3063\u305f\u3068\u304d\u306b\u7121\u9650\u30eb\u30fc\u30d7\u306b\u5165\u308b\u30d0\u30b0\u3092\u898b\u3064\u3051\u305f\u306e\u3067\u4fee\u6b63\u3057\u305f\u3002\n;; make-generator: ((a \u2192 \u22a5) \u2192 a) \u2192 (() \u2192 a|undefined)\n(define (make-generator proc)\n\n  ;; nop: () \u2192 undefined\n  (define (nop) (if #f 0))\n\n  ;; return: a \u2192 \u22a5\n  (define (return val) ()) ;; \u4e00\u56de\u76ee\u306e\u30ea\u30bf\u30fc\u30f3\u30dd\u30a4\u30f3\u30c8\u306f\u672a\u5b9a\u7fa9\n\n  ;; next: () \u2192 a|undefined\n  (define (next) (proc yield));; \u4e00\u56de\u76ee\u306e\u30b8\u30a7\u30cd\u30ec\u30fc\u30bf\u95a2\u6570\u5185\u90e8\u306e\u30bb\u30fc\u30d6\u30dd\u30a4\u30f3\u30c8\u306fproc\u6700\u521d\u304b\u3089\u3001\u30b8\u30a7\u30cd\u30ec\u30fc\u30bf\u95a2\u6570\u306e\u6700\u5f8c\u307e\u3067\u5230\u9054\u3057\u305f\u3089undefined\u3092\u8fd4\u3059\n\n  ;; yield a \u2192 \u22a5\n  (define (yield value)\n    (call/cc (lambda (next*)\n      (set! next next*)\n      (return value) )) )\n\n  ;; generator*: () \u2192 a\n  (define (generator*)\n    (call/cc (lambda (return*);; generator\u304c\u547c\u3070\u308c\u305f\u6642\u306e\u30ea\u30bf\u30fc\u30f3\u30dd\u30a4\u30f3\u30c8\u3001gen=make_generator(fn);gen()\u306e\u3068\u304d\n      (set! return return*) \n      (let ((val (next)))\n        ;; \u3053\u3053\u306b\u5230\u9054\u3057\u305f -> next\u3067yield\u306f\u4f7f\u308f\u308c\u306a\u304b\u3063\u305f -> return \u306f\u4f7f\u308f\u308c\u306a\u304b\u3063\u305f\n        (set! generator* nop) ;; \u4ee5\u5f8cnop\n        (return val) ) )) )\n\n  ;; generator: () \u2192 a|undefined\n  (define (generator) (generator*))\n\n  generator)\n\n;; gen-n: () \u2192 a|undefined\n(define (gen-n)\n  (make-generator\n   (lambda (yield)\n     (yield 1) ;;\u3053\u3053\u306e\u5404\u884c\u306e\u7d99\u7d9a\u304cnext\u306b\u4fdd\u6301\u3055\u308c\u308b\u30bb\u30fc\u30d6\u30dd\u30a4\u30f3\u30c8\n     (yield 2)\n     (yield 3)\n     -1 )) )\n\n(let ((an (gen-n)))\n  (print (an));; 1 \u3053\u3053\u306e\u5404\u884c\u306e\u7d99\u7d9a\u304creturn\u306b\u4fdd\u6301\u3055\u308c\u308b\u30ea\u30bf\u30fc\u30f3\u30dd\u30a4\u30f3\u30c8\n  (print (an));; 2\n  (print (an));; 3\n  (print (an));; -1\n  (print (an)));; #<undef>\n\n\n\u611f\u60f3\n\u4eba\u985e\u306b\u306f\u7b2c\u4e00\u7d1a\u7d99\u7d9a\u306f\u65e9\u3059\u304e\u308b\u3057\u578b\u306e\u306a\u3044\u8a00\u8a9e\u306f\u3064\u3089\u3044\n[Scheme\u3067\u30b8\u30a7\u30cd\u30ec\u30fc\u30bf\u30fc - Qiita](http://qiita.com/hotoku/items/a36974d2ecfec9ace930)\u3092\u62dd\u898b\u3057\u305f\u3068\u3053\u308d\u3001\u30b8\u30a7\u30cd\u30ec\u30fc\u30bf\u95a2\u6570\u306e\u5185\u90e8\u3067yield\u304c\u547c\u3070\u308c\u306a\u304b\u3063\u305f\u3068\u304d\u306b\u7121\u9650\u30eb\u30fc\u30d7\u306b\u5165\u308b\u30d0\u30b0\u3092\u898b\u3064\u3051\u305f\u306e\u3067\u4fee\u6b63\u3057\u305f\u3002\n\n\n```scm\n;; make-generator: ((a \u2192 \u22a5) \u2192 a) \u2192 (() \u2192 a|undefined)\n(define (make-generator proc)\n\n  ;; nop: () \u2192 undefined\n  (define (nop) (if #f 0))\n\n  ;; return: a \u2192 \u22a5\n  (define (return val) ()) ;; \u4e00\u56de\u76ee\u306e\u30ea\u30bf\u30fc\u30f3\u30dd\u30a4\u30f3\u30c8\u306f\u672a\u5b9a\u7fa9\n\n  ;; next: () \u2192 a|undefined\n  (define (next) (proc yield));; \u4e00\u56de\u76ee\u306e\u30b8\u30a7\u30cd\u30ec\u30fc\u30bf\u95a2\u6570\u5185\u90e8\u306e\u30bb\u30fc\u30d6\u30dd\u30a4\u30f3\u30c8\u306fproc\u6700\u521d\u304b\u3089\u3001\u30b8\u30a7\u30cd\u30ec\u30fc\u30bf\u95a2\u6570\u306e\u6700\u5f8c\u307e\u3067\u5230\u9054\u3057\u305f\u3089undefined\u3092\u8fd4\u3059\n\n  ;; yield a \u2192 \u22a5\n  (define (yield value)\n    (call/cc (lambda (next*)\n      (set! next next*)\n      (return value) )) )\n\n  ;; generator*: () \u2192 a\n  (define (generator*)\n    (call/cc (lambda (return*);; generator\u304c\u547c\u3070\u308c\u305f\u6642\u306e\u30ea\u30bf\u30fc\u30f3\u30dd\u30a4\u30f3\u30c8\u3001gen=make_generator(fn);gen()\u306e\u3068\u304d\n      (set! return return*) \n      (let ((val (next)))\n        ;; \u3053\u3053\u306b\u5230\u9054\u3057\u305f -> next\u3067yield\u306f\u4f7f\u308f\u308c\u306a\u304b\u3063\u305f -> return \u306f\u4f7f\u308f\u308c\u306a\u304b\u3063\u305f\n        (set! generator* nop) ;; \u4ee5\u5f8cnop\n        (return val) ) )) )\n\n  ;; generator: () \u2192 a|undefined\n  (define (generator) (generator*))\n\n  generator)\n\n;; gen-n: () \u2192 a|undefined\n(define (gen-n)\n  (make-generator\n   (lambda (yield)\n     (yield 1) ;;\u3053\u3053\u306e\u5404\u884c\u306e\u7d99\u7d9a\u304cnext\u306b\u4fdd\u6301\u3055\u308c\u308b\u30bb\u30fc\u30d6\u30dd\u30a4\u30f3\u30c8\n     (yield 2)\n     (yield 3)\n     -1 )) )\n\n(let ((an (gen-n)))\n  (print (an));; 1 \u3053\u3053\u306e\u5404\u884c\u306e\u7d99\u7d9a\u304creturn\u306b\u4fdd\u6301\u3055\u308c\u308b\u30ea\u30bf\u30fc\u30f3\u30dd\u30a4\u30f3\u30c8\n  (print (an));; 2\n  (print (an));; 3\n  (print (an));; -1\n  (print (an)));; #<undef>\n```\n\n## \u611f\u60f3\n\n\u4eba\u985e\u306b\u306f\u7b2c\u4e00\u7d1a\u7d99\u7d9a\u306f\u65e9\u3059\u304e\u308b\u3057\u578b\u306e\u306a\u3044\u8a00\u8a9e\u306f\u3064\u3089\u3044\n", "tags": ["Scheme"]}