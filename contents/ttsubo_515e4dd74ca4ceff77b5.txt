{"context": "\u4eca\u56de\u3001\u6642\u7cfb\u5217\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u201dInfluxDB\u201d\u306e\u57fa\u672c\u52d5\u4f5c\u3092\u8a66\u3057\u3066\u307f\u307e\u3057\u305f\u3002\n\n\u2b1b\ufe0e InfluxDB\u74b0\u5883\u69cb\u7bc9\n\u5b9f\u969b\u306e\u69cb\u7bc9\u306b\u3042\u305f\u3063\u3066\u3001\u3053\u3061\u3089\u306eInstallation\u30da\u30fc\u30b8\u3092\u53c2\u8003\u306b\u3057\u307e\u3057\u305f\u3002\n\n(1) Linux\u74b0\u5883\u6e96\u5099\n\nUbunts\u74b0\u5883\u3092\u78ba\u8a8d\u3059\u308b\n\n$ cat /etc/lsb-release\nDISTRIB_ID=Ubuntu\nDISTRIB_RELEASE=16.04\nDISTRIB_CODENAME=xenial\nDISTRIB_DESCRIPTION=\"Ubuntu 16.04 LTS\"\n\n\ngolang\u3092\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3059\u308b\n\n$ vi $HOME/.profile\n\n...(snip)\nexport GOPATH=$HOME/golang\nexport PATH=$GOPATH/bin:/usr/local/go/bin:$PATH\n\n$ wget --no-check-certificate https://storage.googleapis.com/golang/go1.6.2.linux-amd64.tar.gz\n$ sudo tar -C /usr/local -xzf go1.6.2.linux-amd64.tar.gz\n$ mkdir $HOME/golang\n$ source .profile\n\n$ go version\ngo version go1.6.2 linux/amd64\n\n\n(2) InfluxDB\u74b0\u5883\u69cb\u7bc9\n\nInfluxDB\u3092\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3059\u308b\n\n$ sudo apt-get update\n$ curl -sL https://repos.influxdata.com/influxdb.key | sudo apt-key add -\n$ echo \"deb https://repos.influxdata.com/${DISTRIB_ID,,} ${DISTRIB_CODENAME} stable\" | sudo tee /etc/apt/sources.list.d/influxdb.list\n\n$ sudo apt-get update && sudo apt-get install influxdb\n\n\nInfluxDB\u3092\u8d77\u52d5\u3059\u308b\n\n$ sudo service influxdb start\n$ sudo service influxdb status\n\u25cf influxdb.service - InfluxDB is an open-source, distributed, time series database\n   Loaded: loaded (/lib/systemd/system/influxdb.service; enabled; vendor preset: enabled)\n   Active: active (running) since Sun 2016-07-17 17:29:40 JST; 17s ago\n     Docs: https://docs.influxdata.com/influxdb/\n Main PID: 1932 (sh)\n    Tasks: 8 (limit: 512)\n   Memory: 7.8M\n      CPU: 53ms\n   CGroup: /system.slice/influxdb.service\n           \u251c\u25001932 /bin/sh -c /usr/bin/influxd -config /etc/influxdb/influxdb.conf  >>/dev/null 2>>/var/log/influxdb/influxd.log\n           \u2514\u25001934 /usr/bin/influxd -config /etc/influxdb/influxdb.conf\n\nJul 17 17:29:40 influxdb systemd[1]: Started InfluxDB is an open-source, distributed, time series database.\n\n\nInfluxDB\u306e\u52d5\u4f5c\u3092\u78ba\u8a8d\u3059\u308b\n\n$ influxd\n\n 8888888           .d888 888                   8888888b.  888888b.\n   888            d88P\"  888                   888  \"Y88b 888  \"88b\n   888            888    888                   888    888 888  .88P\n   888   88888b.  888888 888 888  888 888  888 888    888 8888888K.\n   888   888 \"88b 888    888 888  888  Y8bd8P' 888    888 888  \"Y88b\n   888   888  888 888    888 888  888   X88K   888    888 888    888\n   888   888  888 888    888 Y88b 888 .d8\"\"8b. 888  .d88P 888   d88P\n 8888888 888  888 888    888  \"Y88888 888  888 8888888P\"  8888888P\"\n\n[run] 2016/07/17 17:32:11 InfluxDB starting, version 0.13.0, branch 0.13, commit e57fb88a051ee40fd9277094345fbd47bb4783ce\n[run] 2016/07/17 17:32:11 Go version go1.6.2, GOMAXPROCS set to 1\n[run] 2016/07/17 17:32:11 Using configuration at: /etc/influxdb/influxdb.conf\nrun: open server: listen: listen tcp :8088: bind: address already in use\n\n\nInfluxDB Client\u3092\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3059\u308b\n\n$ github.com/influxdata/influxdb/client/v2\n\n\n\u2b1b\ufe0e \u307e\u305a\u306f\u3001CLI\u3067\u57fa\u672c\u52d5\u4f5c\u3092\u8a66\u3057\u3066\u307f\u308b\n\u5b9f\u969b\u306e\u57fa\u672c\u52d5\u4f5c\u306e\u78ba\u8a8d\u306f\u3001\u3053\u3061\u3089\u306eGetting Started\u30da\u30fc\u30b8\u3092\u53c2\u8003\u306b\u3057\u307e\u3057\u305f\u3002\n\n\u307e\u305a\u306f\u3001CLI\u30b3\u30de\u30f3\u30c9\u30aa\u30d7\u30b7\u30e7\u30f3\u3092\u78ba\u8a8d\u3057\u3066\u307f\u308b\n\n$ influx --help\nUsage of influx:\n  -version\n       Display the version and exit.\n  -host 'host name'\n       Host to connect to.\n  -port 'port #'\n       Port to connect to.\n  -database 'database name'\n       Database to connect to the server.\n  -password 'password'\n      Password to connect to the server.  Leaving blank will prompt for password (--password '').\n  -username 'username'\n       Username to connect to the server.\n  -ssl\n        Use https for requests.\n  -unsafeSsl\n        Set this when connecting to the cluster using https and not use SSL verification.\n  -execute 'command'\n       Execute command and quit.\n  -format 'json|csv|column'\n       Format specifies the format of the server responses:  json, csv, or column.\n  -precision 'rfc3339|h|m|s|ms|u|ns'\n       Precision specifies the format of the timestamp:  rfc3339, h, m, s, ms, u or ns.\n  -consistency 'any|one|quorum|all'\n       Set write consistency level: any, one, quorum, or all\n  -pretty\n       Turns on pretty print for the json format.\n  -import\n       Import a previous database export from file\n  -pps\n       How many points per second the import will allow.  By default it is zero and will not throttle importing.\n  -path\n       Path to file to import\n  -compressed\n       Set to true if the import file is compressed\n\nExamples:\n\n    # Use influx in a non-interactive mode to query the database \"metrics\" and pretty print json:\n    $ influx -database 'metrics' -execute 'select * from cpu' -format 'json' -pretty\n\n    # Connect to a specific database on startup and set database context:\n    $ influx -database 'metrics' -host 'localhost' -port '8086'\n\n\n\u65e9\u901f\u3001DB\u3092\u4f5c\u6210\u3059\u308b\n\n$ influx\nVisit https://enterprise.influxdata.com to register for updates, InfluxDB server management, and monitoring.\nConnected to http://localhost:8086 version 0.13.0\nInfluxDB shell version: 0.13.0\n> CREATE DATABASE mydb\n> SHOW DATABASES\nname: databases\n---------------\nname\n_internal\nmydb\n\n\nmydb\u3092\u4f7f\u7528\u53ef\u80fd\u306a\u72b6\u614b\u306b\u3059\u308b\n\n> USE mydb\nUsing database mydb\n\n\nCLI\u3067\u4f7f\u7528\u53ef\u80fd\u306a\u30b3\u30de\u30f3\u30c9\u3092\u78ba\u8a8d\u3057\u3066\u304a\u304f\n\n> help\nUsage:\n        connect <host:port>   connects to another node specified by host:port\n        auth                  prompts for username and password\n        pretty                toggles pretty print for the json format\n        use <db_name>         sets current database\n        format <format>       specifies the format of the server responses: json, csv, or column\n        precision <format>    specifies the format of the timestamp: rfc3339, h, m, s, ms, u or ns\n        consistency <level>   sets write consistency level: any, one, quorum, or all\n        history               displays command history\n        settings              outputs the current settings for the shell\n        exit/quit/ctrl+d      quits the influx shell\n\n        show databases        show database names\n        show series           show series information\n        show measurements     show measurement information\n        show tag keys         show tag key information\n        show field keys       show field key information\n\n        A full list of influxql commands can be found at:\n        https://docs.influxdata.com/influxdb/latest/query_language/spec/\n\n\n\u30c7\u30fc\u30bf\u3092\u767b\u9332\u3057\u3066\u307f\u308b\n\n> INSERT cpu,host=serverA,region=us_west value=0.64\n\n\n\u767b\u9332\u3057\u305f\u30c7\u30fc\u30bf\u5c5e\u6027\u3092\u78ba\u8a8d\u3057\u3066\u307f\u308b\n\n> SHOW SERIES\nkey\ncpu,host=serverA,region=us_west\n\n\n\u767b\u9332\u3057\u305f\u30c7\u30fc\u30bf\u3092\u53c2\u7167\u3057\u3066\u307f\u308b\n\n> SELECT * FROM cpu\nname: cpu\n---------\ntime            host    region  value\n1468794703195136385 serverA us_west 0.64\n\n\n\u3061\u306a\u307f\u306b\u3001InfluxDB\u306eWeb-ui\u4e0a\u304b\u3089\u3067\u3082\u3001CLI\u64cd\u4f5c\u3068\u540c\u7b49\u306a\u3053\u3068\u304c\u884c\u3048\u308b\u3088\u3046\u3067\u3059\u3002\n\n\n\n\u2b1b\ufe0e golang\u304b\u3089\u3001\u6642\u7cfb\u5217\u30c7\u30fc\u30bf\u3092\u4f5c\u6210\u3057\u3066\u307f\u308b\n\u5b9f\u969b\u306e\u57fa\u672c\u52d5\u4f5c\u306e\u78ba\u8a8d\u306f\u3001\u3053\u3061\u3089\u306eREADME.md\u30da\u30fc\u30b8\u3092\u53c2\u8003\u306b\u3057\u307e\u3057\u305f\u3002\n\n(1)\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u3092\u6e96\u5099\u3059\u308b\u3002\n\u30b5\u30f3\u30d7\u30ea\u30b3\u30fc\u30c9\u306f\u3001\u6b21\u306e\u3088\u3046\u306a\u52d5\u4f5c\u306b\u306a\u308a\u307e\u3059\u3002\n\nCreate database --> DB\"systemstats\"\u3092\u4f5c\u6210\u3059\u308b\nInserting Data --> \uff12\uff10\u4ef6\u306e\u6642\u7cfb\u5217\u30c7\u30fc\u30bf\u3092\u4f5c\u6210\u3059\u308b\nQuerying Data -->  \u6700\u521d\u306e\uff11\uff10\u4ef6\u3060\u3051\u3092\u8868\u793a\u3059\u308b\n\n\nsample_influxDB_client.go\npackage main \n\nimport (\n    \"log\"\n    \"time\"\n    \"fmt\"\n    \"math/rand\"\n    \"github.com/influxdata/influxdb/client/v2\"\n)\n\nconst (\n    MyDB = \"systemstats\"\n    username = \"bubba\"\n    password = \"bumblebeetuna\"\n    MyMeasurement = \"cpu_usage\"\n)\n\n// queryDB convenience function to query the database\nfunc queryDB(clnt client.Client, cmd string) (res []client.Result, err error) {\n    q := client.Query{\n        Command:  cmd,\n        Database: MyDB,\n    }\n    if response, err := clnt.Query(q); err == nil {\n        if response.Error() != nil {\n            return res, response.Error()\n        }\n        res = response.Results\n    } else {\n        return res, err\n    }\n    return res, nil\n}\n\nfunc writePoints(clnt client.Client) {\n    sampleSize := 20\n    rand.Seed(42)\n\n    bp, _ := client.NewBatchPoints(client.BatchPointsConfig{\n        Database:  MyDB,\n        Precision: \"s\",\n    })\n\n    for i := 0; i < sampleSize; i++ {\n        time.Sleep(time.Second)\n        regions := []string{\"us-west1\", \"us-west2\", \"us-west3\", \"us-east1\"}\n        tags := map[string]string{\n            \"cpu\":    \"cpu-total\",\n            \"host\":   fmt.Sprintf(\"host%d\", rand.Intn(1000)),\n            \"region\": regions[rand.Intn(len(regions))],\n        }\n\n        idle := rand.Float64() * 100.0\n        fields := map[string]interface{}{\n            \"idle\": idle,\n            \"busy\": 100.0 - idle,\n        }\n\n        pt, err := client.NewPoint(MyMeasurement, tags, fields, time.Now())\n        if err != nil {\n            log.Fatalln(\"Error: \", err)\n        }\n        bp.AddPoint(pt)\n    }\n\n    err := clnt.Write(bp)\n    if err != nil {\n        log.Fatal(err)\n    }\n}\n\nfunc main() {\n    // Make client\n    clnt, err := client.NewHTTPClient(client.HTTPConfig{\n        Addr: \"http://localhost:8086\",\n        Username: username,\n        Password: password,\n    })\n\n    if err != nil {\n        log.Fatalln(\"Error: \", err)\n    }\n\n    // Create database\n    _, err = queryDB(clnt, fmt.Sprintf(\"CREATE DATABASE %s\", MyDB))\n    if err != nil {\n        log.Fatal(err)\n    }\n\n    // Inserting Data\n    writePoints(clnt)\n\n    // Querying Data\n    q := fmt.Sprintf(\"SELECT * FROM %s LIMIT %d\", MyMeasurement, 10)\n    res, err := queryDB(clnt, q)\n    if err != nil {\n        log.Fatal(err)\n    }\n\n    for i, row := range res[0].Series[0].Values {\n        t, err := time.Parse(time.RFC3339, row[0].(string))\n        if err != nil {\n            log.Fatal(err)\n        }\n        val := row[1]\n        log.Printf(\"[%2d] %s: %s\\n\", i, t.Format(time.Stamp), val)\n    }\n\n}\n\n\n\n(2)\u5b9f\u969b\u306b\u3001\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u3092\u52d5\u4f5c\u3055\u305b\u3066\u307f\u308b\u3002\n\n\u307e\u305a\u3001DB\u30a2\u30ab\u30a6\u30f3\u30c8\u3092\u4f5c\u6210\u3057\u3066\u304a\u304f\n\n> create user bubba with password 'bumblebeetuna'\n> grant all privileges to bubba\n\n\n\u6642\u7cfb\u5217\u30c7\u30fc\u30bf\u4f5c\u6210\u7528\u306e\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u3092\u5b9f\u884c\u3059\u308b\n\n$ go run sample_influxDB_client.go \n2016/07/18 08:59:59 [ 0] Jul 17 23:59:40: 39.5906148441358\n2016/07/18 08:59:59 [ 1] Jul 17 23:59:41: 61.680670007761435\n2016/07/18 08:59:59 [ 2] Jul 17 23:59:42: 61.69553469502837\n2016/07/18 08:59:59 [ 3] Jul 17 23:59:43: 78.20584254243772\n2016/07/18 08:59:59 [ 4] Jul 17 23:59:44: 33.5989052315491\n2016/07/18 08:59:59 [ 5] Jul 17 23:59:45: 28.40939195202982\n2016/07/18 08:59:59 [ 6] Jul 17 23:59:46: 88.0668203236267\n2016/07/18 08:59:59 [ 7] Jul 17 23:59:47: 77.28777698759987\n2016/07/18 08:59:59 [ 8] Jul 17 23:59:48: 7.321156839368697\n2016/07/18 08:59:59 [ 9] Jul 17 23:59:49: 78.89023835915611\n\n\nCLI\u304b\u3089\u3001\u767b\u9332\u3057\u6642\u7cfb\u5217\u30c7\u30fc\u30bf\u3092\u53c2\u7167\u3057\u3066\u307f\u308b\n\n$ influx\nVisit https://enterprise.influxdata.com to register for updates, InfluxDB server management, and monitoring.\nConnected to http://localhost:8086 version 0.13.0\nInfluxDB shell version: 0.13.0\n\n> USE systemstats\nUsing database systemstats\n\n> SELECT * FROM cpu_usage;\nname: cpu_usage\n---------------\ntime            busy            cpu     host    idle            region\n1468799980000000000 39.5906148441358    cpu-total   host305 60.4093851558642    us-east1\n1468799981000000000 61.680670007761435  cpu-total   host750 38.319329992238565  us-east1\n1468799982000000000 61.69553469502837   cpu-total   host357 38.30446530497163   us-west1\n1468799983000000000 78.20584254243772   cpu-total   host643 21.794157457562278  us-west2\n1468799984000000000 33.5989052315491    cpu-total   host815 66.4010947684509    us-west1\n1468799985000000000 28.40939195202982   cpu-total   host653 71.59060804797018   us-west1\n1468799986000000000 88.0668203236267    cpu-total   host535 11.933179676373298  us-west1\n1468799987000000000 77.28777698759987   cpu-total   host934 22.71222301240013   us-west1\n1468799988000000000 7.321156839368697   cpu-total   host544 92.6788431606313    us-west2\n1468799989000000000 78.89023835915611   cpu-total   host919 21.10976164084389   us-east1\n1468799990000000000 10.738313757378009  cpu-total   host982 89.26168624262199   us-west3\n1468799991000000000 2.6520038604342773  cpu-total   host610 97.34799613956572   us-west2\n1468799992000000000 84.84195338561217   cpu-total   host974 15.15804661438783   us-east1\n1468799993000000000 24.40410949424208   cpu-total   host507 75.59589050575792   us-east1\n1468799994000000000 29.552453743568435  cpu-total   host824 70.44754625643156   us-west1\n1468799995000000000 45.641703299549896  cpu-total   host512 54.358296700450104  us-west3\n1468799996000000000 81.30658739342343   cpu-total   host429 18.693412606576576  us-east1\n1468799997000000000 20.662632620528527  cpu-total   host392 79.33736737947147   us-west2\n1468799998000000000 54.67951809721495   cpu-total   host72  45.32048190278505   us-west1\n1468799999000000000 74.10616428036468   cpu-total   host401 25.893835719635323  us-west3\n\n\n\u6642\u7cfb\u5217\u30c7\u30fc\u30bf\u306etime\u5024\u304c\u3001\u308f\u304b\u308a\u306b\u304f\u3044\u306e\u3067\u3001timestamp\u306e\u30d5\u30a9\u30fc\u30de\u30c3\u30c8\u3092\u5909\u66f4\u3057\u3066\u307f\u308b\n\n> precision rfc3339\n> SELECT * FROM cpu_usage;\nname: cpu_usage\n---------------\ntime            busy            cpu     host    idle            region\n2016-07-17T23:59:40Z    39.5906148441358    cpu-total   host305 60.4093851558642    us-east1\n2016-07-17T23:59:41Z    61.680670007761435  cpu-total   host750 38.319329992238565  us-east1\n2016-07-17T23:59:42Z    61.69553469502837   cpu-total   host357 38.30446530497163   us-west1\n2016-07-17T23:59:43Z    78.20584254243772   cpu-total   host643 21.794157457562278  us-west2\n2016-07-17T23:59:44Z    33.5989052315491    cpu-total   host815 66.4010947684509    us-west1\n2016-07-17T23:59:45Z    28.40939195202982   cpu-total   host653 71.59060804797018   us-west1\n2016-07-17T23:59:46Z    88.0668203236267    cpu-total   host535 11.933179676373298  us-west1\n2016-07-17T23:59:47Z    77.28777698759987   cpu-total   host934 22.71222301240013   us-west1\n2016-07-17T23:59:48Z    7.321156839368697   cpu-total   host544 92.6788431606313    us-west2\n2016-07-17T23:59:49Z    78.89023835915611   cpu-total   host919 21.10976164084389   us-east1\n2016-07-17T23:59:50Z    10.738313757378009  cpu-total   host982 89.26168624262199   us-west3\n2016-07-17T23:59:51Z    2.6520038604342773  cpu-total   host610 97.34799613956572   us-west2\n2016-07-17T23:59:52Z    84.84195338561217   cpu-total   host974 15.15804661438783   us-east1\n2016-07-17T23:59:53Z    24.40410949424208   cpu-total   host507 75.59589050575792   us-east1\n2016-07-17T23:59:54Z    29.552453743568435  cpu-total   host824 70.44754625643156   us-west1\n2016-07-17T23:59:55Z    45.641703299549896  cpu-total   host512 54.358296700450104  us-west3\n2016-07-17T23:59:56Z    81.30658739342343   cpu-total   host429 18.693412606576576  us-east1\n2016-07-17T23:59:57Z    20.662632620528527  cpu-total   host392 79.33736737947147   us-west2\n2016-07-17T23:59:58Z    54.67951809721495   cpu-total   host72  45.32048190278505   us-west1\n2016-07-17T23:59:59Z    74.10616428036468   cpu-total   host401 25.893835719635323  us-west3\n\n\nInfluxDB\u306eWeb-ui\u4e0a\u304b\u3089\u3001\u6642\u7cfb\u5217\u30c7\u30fc\u30bf\u3092\u78ba\u8a8d\u3057\u3066\u307f\u308b\n\n\n\n\u2b1b\ufe0e \u6700\u5f8c\u306b..\n\u4eca\u56de\u3001InfluxDB\u306e\u57fa\u672c\u52d5\u4f5c\u3092\u8a66\u3057\u3066\u307f\u307e\u3057\u305f\u3002\n\u4e8b\u524d\u306b\u3001\u30b9\u30ad\u30fc\u30de\u5b9a\u7fa9\u3092\u884c\u3046\u3053\u3068\u306a\u304f\u3001\u3044\u304d\u306a\u308a\u3001\u6642\u7cfb\u5217\u30c7\u30fc\u30bf\u3092\u767b\u9332\u3067\u304d\u3066\u3057\u307e\u3046\u624b\u8efd\u3055\u306f\u3001\u3068\u3066\u3082\u826f\u3044\u611f\u3058\u3067\u3059\u3002\n\u3042\u3068\u3001CLI\u306e\u64cd\u4f5c\u611f\u3082\u3001\u3068\u3066\u3082\u308f\u304b\u308a\u3084\u3059\u304b\u3063\u305f\u3067\u3059\u306d\u3002\n\u3055\u3089\u306b\u3001Influxdb\u306f\u3001golang\u3067\u66f8\u304b\u308c\u3066\u3044\u307e\u3059\u306e\u3067\u3001golang\u30d9\u30fc\u30b9\u306e\u5916\u90e8\u30a2\u30d7\u30ea\u3068\u306e\u89aa\u548c\u6027\u304c\u3068\u3066\u3082\u9ad8\u3044\u3068\u611f\u3058\u307e\u3057\u305f\u3002\n\u4eca\u56de\u3001\u6642\u7cfb\u5217\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9[\u201dInfluxDB\u201d](https://influxdata.com/time-series-platform/influxdb/)\u306e\u57fa\u672c\u52d5\u4f5c\u3092\u8a66\u3057\u3066\u307f\u307e\u3057\u305f\u3002\n\n#\u2b1b\ufe0e InfluxDB\u74b0\u5883\u69cb\u7bc9\n\u5b9f\u969b\u306e\u69cb\u7bc9\u306b\u3042\u305f\u3063\u3066\u3001\u3053\u3061\u3089\u306e[Installation\u30da\u30fc\u30b8](https://docs.influxdata.com/influxdb/v0.13/introduction/installation)\u3092\u53c2\u8003\u306b\u3057\u307e\u3057\u305f\u3002\n\n##(1) Linux\u74b0\u5883\u6e96\u5099\n\n- Ubunts\u74b0\u5883\u3092\u78ba\u8a8d\u3059\u308b\n\n```\n$ cat /etc/lsb-release\nDISTRIB_ID=Ubuntu\nDISTRIB_RELEASE=16.04\nDISTRIB_CODENAME=xenial\nDISTRIB_DESCRIPTION=\"Ubuntu 16.04 LTS\"\n```\n\n- golang\u3092\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3059\u308b\n\n```\n$ vi $HOME/.profile\n\n...(snip)\nexport GOPATH=$HOME/golang\nexport PATH=$GOPATH/bin:/usr/local/go/bin:$PATH\n\n$ wget --no-check-certificate https://storage.googleapis.com/golang/go1.6.2.linux-amd64.tar.gz\n$ sudo tar -C /usr/local -xzf go1.6.2.linux-amd64.tar.gz\n$ mkdir $HOME/golang\n$ source .profile\n\n$ go version\ngo version go1.6.2 linux/amd64\n```\n\n##(2) InfluxDB\u74b0\u5883\u69cb\u7bc9\n\n- InfluxDB\u3092\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3059\u308b\n\n```\n$ sudo apt-get update\n$ curl -sL https://repos.influxdata.com/influxdb.key | sudo apt-key add -\n$ echo \"deb https://repos.influxdata.com/${DISTRIB_ID,,} ${DISTRIB_CODENAME} stable\" | sudo tee /etc/apt/sources.list.d/influxdb.list\n\n$ sudo apt-get update && sudo apt-get install influxdb\n```\n\n- InfluxDB\u3092\u8d77\u52d5\u3059\u308b\n\n```\n$ sudo service influxdb start\n$ sudo service influxdb status\n\u25cf influxdb.service - InfluxDB is an open-source, distributed, time series database\n   Loaded: loaded (/lib/systemd/system/influxdb.service; enabled; vendor preset: enabled)\n   Active: active (running) since Sun 2016-07-17 17:29:40 JST; 17s ago\n     Docs: https://docs.influxdata.com/influxdb/\n Main PID: 1932 (sh)\n    Tasks: 8 (limit: 512)\n   Memory: 7.8M\n      CPU: 53ms\n   CGroup: /system.slice/influxdb.service\n           \u251c\u25001932 /bin/sh -c /usr/bin/influxd -config /etc/influxdb/influxdb.conf  >>/dev/null 2>>/var/log/influxdb/influxd.log\n           \u2514\u25001934 /usr/bin/influxd -config /etc/influxdb/influxdb.conf\n\nJul 17 17:29:40 influxdb systemd[1]: Started InfluxDB is an open-source, distributed, time series database.\n```\n\n- InfluxDB\u306e\u52d5\u4f5c\u3092\u78ba\u8a8d\u3059\u308b\n\n```\n$ influxd\n\n 8888888           .d888 888                   8888888b.  888888b.\n   888            d88P\"  888                   888  \"Y88b 888  \"88b\n   888            888    888                   888    888 888  .88P\n   888   88888b.  888888 888 888  888 888  888 888    888 8888888K.\n   888   888 \"88b 888    888 888  888  Y8bd8P' 888    888 888  \"Y88b\n   888   888  888 888    888 888  888   X88K   888    888 888    888\n   888   888  888 888    888 Y88b 888 .d8\"\"8b. 888  .d88P 888   d88P\n 8888888 888  888 888    888  \"Y88888 888  888 8888888P\"  8888888P\"\n\n[run] 2016/07/17 17:32:11 InfluxDB starting, version 0.13.0, branch 0.13, commit e57fb88a051ee40fd9277094345fbd47bb4783ce\n[run] 2016/07/17 17:32:11 Go version go1.6.2, GOMAXPROCS set to 1\n[run] 2016/07/17 17:32:11 Using configuration at: /etc/influxdb/influxdb.conf\nrun: open server: listen: listen tcp :8088: bind: address already in use\n```\n\n- InfluxDB Client\u3092\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3059\u308b\n\n```\n$ github.com/influxdata/influxdb/client/v2\n```\n\n#\u2b1b\ufe0e \u307e\u305a\u306f\u3001CLI\u3067\u57fa\u672c\u52d5\u4f5c\u3092\u8a66\u3057\u3066\u307f\u308b\n\u5b9f\u969b\u306e\u57fa\u672c\u52d5\u4f5c\u306e\u78ba\u8a8d\u306f\u3001\u3053\u3061\u3089\u306e[Getting Started\u30da\u30fc\u30b8](https://docs.influxdata.com/influxdb/v0.13/introduction/getting_started)\u3092\u53c2\u8003\u306b\u3057\u307e\u3057\u305f\u3002\n\n\n- \u307e\u305a\u306f\u3001CLI\u30b3\u30de\u30f3\u30c9\u30aa\u30d7\u30b7\u30e7\u30f3\u3092\u78ba\u8a8d\u3057\u3066\u307f\u308b\n\n```\n$ influx --help\nUsage of influx:\n  -version\n       Display the version and exit.\n  -host 'host name'\n       Host to connect to.\n  -port 'port #'\n       Port to connect to.\n  -database 'database name'\n       Database to connect to the server.\n  -password 'password'\n      Password to connect to the server.  Leaving blank will prompt for password (--password '').\n  -username 'username'\n       Username to connect to the server.\n  -ssl\n        Use https for requests.\n  -unsafeSsl\n        Set this when connecting to the cluster using https and not use SSL verification.\n  -execute 'command'\n       Execute command and quit.\n  -format 'json|csv|column'\n       Format specifies the format of the server responses:  json, csv, or column.\n  -precision 'rfc3339|h|m|s|ms|u|ns'\n       Precision specifies the format of the timestamp:  rfc3339, h, m, s, ms, u or ns.\n  -consistency 'any|one|quorum|all'\n       Set write consistency level: any, one, quorum, or all\n  -pretty\n       Turns on pretty print for the json format.\n  -import\n       Import a previous database export from file\n  -pps\n       How many points per second the import will allow.  By default it is zero and will not throttle importing.\n  -path\n       Path to file to import\n  -compressed\n       Set to true if the import file is compressed\n\nExamples:\n\n    # Use influx in a non-interactive mode to query the database \"metrics\" and pretty print json:\n    $ influx -database 'metrics' -execute 'select * from cpu' -format 'json' -pretty\n\n    # Connect to a specific database on startup and set database context:\n    $ influx -database 'metrics' -host 'localhost' -port '8086'\n```\n\n\n- \u65e9\u901f\u3001DB\u3092\u4f5c\u6210\u3059\u308b\n\n```\n$ influx\nVisit https://enterprise.influxdata.com to register for updates, InfluxDB server management, and monitoring.\nConnected to http://localhost:8086 version 0.13.0\nInfluxDB shell version: 0.13.0\n> CREATE DATABASE mydb\n> SHOW DATABASES\nname: databases\n---------------\nname\n_internal\nmydb\n```\n\n- mydb\u3092\u4f7f\u7528\u53ef\u80fd\u306a\u72b6\u614b\u306b\u3059\u308b\n\n```\n> USE mydb\nUsing database mydb\n```\n\n- CLI\u3067\u4f7f\u7528\u53ef\u80fd\u306a\u30b3\u30de\u30f3\u30c9\u3092\u78ba\u8a8d\u3057\u3066\u304a\u304f\n\n```\n> help\nUsage:\n        connect <host:port>   connects to another node specified by host:port\n        auth                  prompts for username and password\n        pretty                toggles pretty print for the json format\n        use <db_name>         sets current database\n        format <format>       specifies the format of the server responses: json, csv, or column\n        precision <format>    specifies the format of the timestamp: rfc3339, h, m, s, ms, u or ns\n        consistency <level>   sets write consistency level: any, one, quorum, or all\n        history               displays command history\n        settings              outputs the current settings for the shell\n        exit/quit/ctrl+d      quits the influx shell\n\n        show databases        show database names\n        show series           show series information\n        show measurements     show measurement information\n        show tag keys         show tag key information\n        show field keys       show field key information\n\n        A full list of influxql commands can be found at:\n        https://docs.influxdata.com/influxdb/latest/query_language/spec/\n```\n\n- \u30c7\u30fc\u30bf\u3092\u767b\u9332\u3057\u3066\u307f\u308b\n\n```\n> INSERT cpu,host=serverA,region=us_west value=0.64\n```\n\n- \u767b\u9332\u3057\u305f\u30c7\u30fc\u30bf\u5c5e\u6027\u3092\u78ba\u8a8d\u3057\u3066\u307f\u308b\n\n```\n> SHOW SERIES\nkey\ncpu,host=serverA,region=us_west\n```\n\n- \u767b\u9332\u3057\u305f\u30c7\u30fc\u30bf\u3092\u53c2\u7167\u3057\u3066\u307f\u308b\n\n```\n> SELECT * FROM cpu\nname: cpu\n---------\ntime\t\t\thost\tregion\tvalue\n1468794703195136385\tserverA\tus_west\t0.64\n```\n\n- \u3061\u306a\u307f\u306b\u3001InfluxDB\u306eWeb-ui\u4e0a\u304b\u3089\u3067\u3082\u3001CLI\u64cd\u4f5c\u3068\u540c\u7b49\u306a\u3053\u3068\u304c\u884c\u3048\u308b\u3088\u3046\u3067\u3059\u3002\n\n![Influxdb.png](https://qiita-image-store.s3.amazonaws.com/0/103595/daece62c-5499-194a-78aa-0513ce663de4.png)\n\n#\u2b1b\ufe0e golang\u304b\u3089\u3001\u6642\u7cfb\u5217\u30c7\u30fc\u30bf\u3092\u4f5c\u6210\u3057\u3066\u307f\u308b\n\u5b9f\u969b\u306e\u57fa\u672c\u52d5\u4f5c\u306e\u78ba\u8a8d\u306f\u3001\u3053\u3061\u3089\u306e[README.md\u30da\u30fc\u30b8](https://github.com/influxdata/influxdb/tree/master/client)\u3092\u53c2\u8003\u306b\u3057\u307e\u3057\u305f\u3002\n\n##(1)\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u3092\u6e96\u5099\u3059\u308b\u3002\n\u30b5\u30f3\u30d7\u30ea\u30b3\u30fc\u30c9\u306f\u3001\u6b21\u306e\u3088\u3046\u306a\u52d5\u4f5c\u306b\u306a\u308a\u307e\u3059\u3002\n\n- Create database --> DB\"systemstats\"\u3092\u4f5c\u6210\u3059\u308b\n- Inserting Data --> \uff12\uff10\u4ef6\u306e\u6642\u7cfb\u5217\u30c7\u30fc\u30bf\u3092\u4f5c\u6210\u3059\u308b\n- Querying Data -->  \u6700\u521d\u306e\uff11\uff10\u4ef6\u3060\u3051\u3092\u8868\u793a\u3059\u308b\n\n```text:sample_influxDB_client.go\npackage main \n\nimport (\n    \"log\"\n    \"time\"\n    \"fmt\"\n    \"math/rand\"\n    \"github.com/influxdata/influxdb/client/v2\"\n)\n\nconst (\n    MyDB = \"systemstats\"\n    username = \"bubba\"\n    password = \"bumblebeetuna\"\n    MyMeasurement = \"cpu_usage\"\n)\n\n// queryDB convenience function to query the database\nfunc queryDB(clnt client.Client, cmd string) (res []client.Result, err error) {\n    q := client.Query{\n        Command:  cmd,\n        Database: MyDB,\n    }\n    if response, err := clnt.Query(q); err == nil {\n        if response.Error() != nil {\n            return res, response.Error()\n        }\n        res = response.Results\n    } else {\n        return res, err\n    }\n    return res, nil\n}\n\nfunc writePoints(clnt client.Client) {\n    sampleSize := 20\n    rand.Seed(42)\n\n    bp, _ := client.NewBatchPoints(client.BatchPointsConfig{\n        Database:  MyDB,\n        Precision: \"s\",\n    })\n\n    for i := 0; i < sampleSize; i++ {\n        time.Sleep(time.Second)\n        regions := []string{\"us-west1\", \"us-west2\", \"us-west3\", \"us-east1\"}\n        tags := map[string]string{\n            \"cpu\":    \"cpu-total\",\n            \"host\":   fmt.Sprintf(\"host%d\", rand.Intn(1000)),\n            \"region\": regions[rand.Intn(len(regions))],\n        }\n\n        idle := rand.Float64() * 100.0\n        fields := map[string]interface{}{\n            \"idle\": idle,\n            \"busy\": 100.0 - idle,\n        }\n\n        pt, err := client.NewPoint(MyMeasurement, tags, fields, time.Now())\n        if err != nil {\n            log.Fatalln(\"Error: \", err)\n        }\n        bp.AddPoint(pt)\n    }\n\n    err := clnt.Write(bp)\n    if err != nil {\n        log.Fatal(err)\n    }\n}\n\nfunc main() {\n    // Make client\n    clnt, err := client.NewHTTPClient(client.HTTPConfig{\n        Addr: \"http://localhost:8086\",\n        Username: username,\n        Password: password,\n    })\n\n    if err != nil {\n        log.Fatalln(\"Error: \", err)\n    }\n\n    // Create database\n    _, err = queryDB(clnt, fmt.Sprintf(\"CREATE DATABASE %s\", MyDB))\n    if err != nil {\n        log.Fatal(err)\n    }\n\n    // Inserting Data\n    writePoints(clnt)\n\n    // Querying Data\n    q := fmt.Sprintf(\"SELECT * FROM %s LIMIT %d\", MyMeasurement, 10)\n    res, err := queryDB(clnt, q)\n    if err != nil {\n        log.Fatal(err)\n    }\n\n    for i, row := range res[0].Series[0].Values {\n        t, err := time.Parse(time.RFC3339, row[0].(string))\n        if err != nil {\n            log.Fatal(err)\n        }\n        val := row[1]\n        log.Printf(\"[%2d] %s: %s\\n\", i, t.Format(time.Stamp), val)\n    }\n\n}\n```\n\n##(2)\u5b9f\u969b\u306b\u3001\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u3092\u52d5\u4f5c\u3055\u305b\u3066\u307f\u308b\u3002\n\n- \u307e\u305a\u3001DB\u30a2\u30ab\u30a6\u30f3\u30c8\u3092\u4f5c\u6210\u3057\u3066\u304a\u304f\n\n```\n> create user bubba with password 'bumblebeetuna'\n> grant all privileges to bubba\n```\n\n\n- \u6642\u7cfb\u5217\u30c7\u30fc\u30bf\u4f5c\u6210\u7528\u306e\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u3092\u5b9f\u884c\u3059\u308b\n\n```\n$ go run sample_influxDB_client.go \n2016/07/18 08:59:59 [ 0] Jul 17 23:59:40: 39.5906148441358\n2016/07/18 08:59:59 [ 1] Jul 17 23:59:41: 61.680670007761435\n2016/07/18 08:59:59 [ 2] Jul 17 23:59:42: 61.69553469502837\n2016/07/18 08:59:59 [ 3] Jul 17 23:59:43: 78.20584254243772\n2016/07/18 08:59:59 [ 4] Jul 17 23:59:44: 33.5989052315491\n2016/07/18 08:59:59 [ 5] Jul 17 23:59:45: 28.40939195202982\n2016/07/18 08:59:59 [ 6] Jul 17 23:59:46: 88.0668203236267\n2016/07/18 08:59:59 [ 7] Jul 17 23:59:47: 77.28777698759987\n2016/07/18 08:59:59 [ 8] Jul 17 23:59:48: 7.321156839368697\n2016/07/18 08:59:59 [ 9] Jul 17 23:59:49: 78.89023835915611\n```\n\n- CLI\u304b\u3089\u3001\u767b\u9332\u3057\u6642\u7cfb\u5217\u30c7\u30fc\u30bf\u3092\u53c2\u7167\u3057\u3066\u307f\u308b\n\n```\n$ influx\nVisit https://enterprise.influxdata.com to register for updates, InfluxDB server management, and monitoring.\nConnected to http://localhost:8086 version 0.13.0\nInfluxDB shell version: 0.13.0\n\n> USE systemstats\nUsing database systemstats\n\n> SELECT * FROM cpu_usage;\nname: cpu_usage\n---------------\ntime\t\t\tbusy\t\t\tcpu\t\thost\tidle\t\t\tregion\n1468799980000000000\t39.5906148441358\tcpu-total\thost305\t60.4093851558642\tus-east1\n1468799981000000000\t61.680670007761435\tcpu-total\thost750\t38.319329992238565\tus-east1\n1468799982000000000\t61.69553469502837\tcpu-total\thost357\t38.30446530497163\tus-west1\n1468799983000000000\t78.20584254243772\tcpu-total\thost643\t21.794157457562278\tus-west2\n1468799984000000000\t33.5989052315491\tcpu-total\thost815\t66.4010947684509\tus-west1\n1468799985000000000\t28.40939195202982\tcpu-total\thost653\t71.59060804797018\tus-west1\n1468799986000000000\t88.0668203236267\tcpu-total\thost535\t11.933179676373298\tus-west1\n1468799987000000000\t77.28777698759987\tcpu-total\thost934\t22.71222301240013\tus-west1\n1468799988000000000\t7.321156839368697\tcpu-total\thost544\t92.6788431606313\tus-west2\n1468799989000000000\t78.89023835915611\tcpu-total\thost919\t21.10976164084389\tus-east1\n1468799990000000000\t10.738313757378009\tcpu-total\thost982\t89.26168624262199\tus-west3\n1468799991000000000\t2.6520038604342773\tcpu-total\thost610\t97.34799613956572\tus-west2\n1468799992000000000\t84.84195338561217\tcpu-total\thost974\t15.15804661438783\tus-east1\n1468799993000000000\t24.40410949424208\tcpu-total\thost507\t75.59589050575792\tus-east1\n1468799994000000000\t29.552453743568435\tcpu-total\thost824\t70.44754625643156\tus-west1\n1468799995000000000\t45.641703299549896\tcpu-total\thost512\t54.358296700450104\tus-west3\n1468799996000000000\t81.30658739342343\tcpu-total\thost429\t18.693412606576576\tus-east1\n1468799997000000000\t20.662632620528527\tcpu-total\thost392\t79.33736737947147\tus-west2\n1468799998000000000\t54.67951809721495\tcpu-total\thost72\t45.32048190278505\tus-west1\n1468799999000000000\t74.10616428036468\tcpu-total\thost401\t25.893835719635323\tus-west3\n```\n\n- \u6642\u7cfb\u5217\u30c7\u30fc\u30bf\u306etime\u5024\u304c\u3001\u308f\u304b\u308a\u306b\u304f\u3044\u306e\u3067\u3001timestamp\u306e\u30d5\u30a9\u30fc\u30de\u30c3\u30c8\u3092\u5909\u66f4\u3057\u3066\u307f\u308b\n\n```\n> precision rfc3339\n> SELECT * FROM cpu_usage;\nname: cpu_usage\n---------------\ntime\t\t\tbusy\t\t\tcpu\t\thost\tidle\t\t\tregion\n2016-07-17T23:59:40Z\t39.5906148441358\tcpu-total\thost305\t60.4093851558642\tus-east1\n2016-07-17T23:59:41Z\t61.680670007761435\tcpu-total\thost750\t38.319329992238565\tus-east1\n2016-07-17T23:59:42Z\t61.69553469502837\tcpu-total\thost357\t38.30446530497163\tus-west1\n2016-07-17T23:59:43Z\t78.20584254243772\tcpu-total\thost643\t21.794157457562278\tus-west2\n2016-07-17T23:59:44Z\t33.5989052315491\tcpu-total\thost815\t66.4010947684509\tus-west1\n2016-07-17T23:59:45Z\t28.40939195202982\tcpu-total\thost653\t71.59060804797018\tus-west1\n2016-07-17T23:59:46Z\t88.0668203236267\tcpu-total\thost535\t11.933179676373298\tus-west1\n2016-07-17T23:59:47Z\t77.28777698759987\tcpu-total\thost934\t22.71222301240013\tus-west1\n2016-07-17T23:59:48Z\t7.321156839368697\tcpu-total\thost544\t92.6788431606313\tus-west2\n2016-07-17T23:59:49Z\t78.89023835915611\tcpu-total\thost919\t21.10976164084389\tus-east1\n2016-07-17T23:59:50Z\t10.738313757378009\tcpu-total\thost982\t89.26168624262199\tus-west3\n2016-07-17T23:59:51Z\t2.6520038604342773\tcpu-total\thost610\t97.34799613956572\tus-west2\n2016-07-17T23:59:52Z\t84.84195338561217\tcpu-total\thost974\t15.15804661438783\tus-east1\n2016-07-17T23:59:53Z\t24.40410949424208\tcpu-total\thost507\t75.59589050575792\tus-east1\n2016-07-17T23:59:54Z\t29.552453743568435\tcpu-total\thost824\t70.44754625643156\tus-west1\n2016-07-17T23:59:55Z\t45.641703299549896\tcpu-total\thost512\t54.358296700450104\tus-west3\n2016-07-17T23:59:56Z\t81.30658739342343\tcpu-total\thost429\t18.693412606576576\tus-east1\n2016-07-17T23:59:57Z\t20.662632620528527\tcpu-total\thost392\t79.33736737947147\tus-west2\n2016-07-17T23:59:58Z\t54.67951809721495\tcpu-total\thost72\t45.32048190278505\tus-west1\n2016-07-17T23:59:59Z\t74.10616428036468\tcpu-total\thost401\t25.893835719635323\tus-west3\n```\n\n- InfluxDB\u306eWeb-ui\u4e0a\u304b\u3089\u3001\u6642\u7cfb\u5217\u30c7\u30fc\u30bf\u3092\u78ba\u8a8d\u3057\u3066\u307f\u308b\n\n![influxdb.png](https://qiita-image-store.s3.amazonaws.com/0/103595/5a69e8b1-d720-edeb-7f70-05ac0090aa0b.png)\n\n#\u2b1b\ufe0e \u6700\u5f8c\u306b..\n\u4eca\u56de\u3001InfluxDB\u306e\u57fa\u672c\u52d5\u4f5c\u3092\u8a66\u3057\u3066\u307f\u307e\u3057\u305f\u3002\n\u4e8b\u524d\u306b\u3001\u30b9\u30ad\u30fc\u30de\u5b9a\u7fa9\u3092\u884c\u3046\u3053\u3068\u306a\u304f\u3001\u3044\u304d\u306a\u308a\u3001\u6642\u7cfb\u5217\u30c7\u30fc\u30bf\u3092\u767b\u9332\u3067\u304d\u3066\u3057\u307e\u3046\u624b\u8efd\u3055\u306f\u3001\u3068\u3066\u3082\u826f\u3044\u611f\u3058\u3067\u3059\u3002\n\u3042\u3068\u3001CLI\u306e\u64cd\u4f5c\u611f\u3082\u3001\u3068\u3066\u3082\u308f\u304b\u308a\u3084\u3059\u304b\u3063\u305f\u3067\u3059\u306d\u3002\n\u3055\u3089\u306b\u3001Influxdb\u306f\u3001golang\u3067\u66f8\u304b\u308c\u3066\u3044\u307e\u3059\u306e\u3067\u3001golang\u30d9\u30fc\u30b9\u306e\u5916\u90e8\u30a2\u30d7\u30ea\u3068\u306e\u89aa\u548c\u6027\u304c\u3068\u3066\u3082\u9ad8\u3044\u3068\u611f\u3058\u307e\u3057\u305f\u3002\n", "tags": ["bigdata", "influxdb"]}