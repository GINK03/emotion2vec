{"context": "\u554f\u984c : http://nabetani.sakura.ne.jp/hena/ordf01_twicel/\n\u5b9f\u88c5\u30ea\u30f3\u30af\u96c6 : http://qiita.com/Nabetani/items/8e02ede04315b4eadd6d\nJava \u306e\u3053\u3068\u3092\u3088\u304f\u77e5\u3089\u306a\u3044\u306e\u3067\u5909\u306a\u3053\u3068\u3092\u66f8\u3044\u3066\u3044\u308b\u304b\u3082\u3057\u308c\u306a\u3044\u3093\u3060\u3051\u3069\u3001\u6c17\u306b\u305b\u305a\u6295\u7a3f\u3002\nimport org.junit.Assert;\nimport org.junit.jupiter.api.Test;\n\npublic class TwinCell {\n    private static class Solver {\n        private class Searcher\n        {\n            int c=0;\n            int col;\n            Searcher( int x, int y)\n            {\n                col = color(x,y);\n                search( x, y );\n            }\n            void search( int x, int y )\n            {\n                if ( col != color(x,y) || ( attended[y] & (1<<x)) != 0 ){\n                    return;\n                }\n                c+=1;\n                attended[y] |= 1<<x;\n                search( x+1, y );\n                search( x-1, y );\n                search( x, y+1 );\n                search( x, y-1 );\n            }\n            int size()\n            {\n                return c;\n            }\n        }\n        int[] bits;\n        int[] attended = new int[8];\n        static final int WX = 8;\n        static final int WY = 8;\n        public Solver(int[] _bits)\n        {\n            bits = _bits;\n        }\n        boolean onField( int x, int y)\n        {\n            return !( x<0 || WX<=x || y<0 || WY<=y );\n        }\n        private int color( int x, int y ){\n            if ( !onField( x, y )){\n                return -1;\n            }\n            return (bits[y] & (1<<x) )==0 ? 0 : 1;\n        }\n        public int[] solve() {\n            int[] r = new int[2];\n            for( int y=0 ; y<WY ; ++y ){\n                for( int x=0 ; x<WX ; ++x ){\n                    if ( new Searcher( x, y ).size()==2 ){\n                        ++r[color(x,y)];\n                    }\n                }\n            }\n            return r;\n        }\n    }\n    public String solve( String src )\n    {\n        String[] lines = src.split(\"\\\\/\");\n        int[] bits = new int[lines.length];\n        for( int i =0 ; i<lines.length ; ++i ){\n            bits[i]=Integer.parseInt(lines[i], 16);\n        }\n        int[] wb = new Solver( bits ).solve();\n        return String.format( \"%d,%d\", wb[0], wb[1] );\n    }\n\n    void test( String src, String expected )\n    {\n        Assert.assertEquals( expected, solve( src ));\n    }\n    @Test\n    void runAllTests()\n    {\n        /*0*/ test( \"dc/bc/a7/59/03/d5/d4/ea\", \"2,3\" );\n        /*1*/ test( \"ff/ff/ff/ff/ff/ff/ff/ff\", \"0,0\" );\n        /*2*/ test( \"00/00/00/00/00/00/00/00\", \"0,0\" );\n    }\n}\n\nruby\u3068C99 \u306e\u3068\u304d( http://qiita.com/Nabetani/items/7814edd97911a80946f1 )\u3068\u306f\u7570\u306a\u308a\u3001\u6df1\u3055\u512a\u5148\u63a2\u7d22\u3067\u30de\u30b9\u76ee\u306e\u6570\u3092\u6570\u3048\u308b\u3053\u3068\u306b\u3057\u305f\u3002\n\u751f\u307e\u308c\u3066\u521d\u3081\u3066\u30af\u30e9\u30b9\u5185\u30af\u30e9\u30b9\u5185\u30af\u30e9\u30b9\u3092\u4f7f\u3063\u3066\u307f\u305f\u3002\n\u3042\u3068\u3001static \u3058\u3083\u306a\u3044 inner class \u3068\u3044\u3046\u73cd\u3057\u3044\u3082\u306e\u3082\u4f7f\u3063\u3066\u307f\u305f\u3002\n\n\u554f\u984c : http://nabetani.sakura.ne.jp/hena/ordf01_twicel/\n\u5b9f\u88c5\u30ea\u30f3\u30af\u96c6 : http://qiita.com/Nabetani/items/8e02ede04315b4eadd6d\n\nJava \u306e\u3053\u3068\u3092\u3088\u304f\u77e5\u3089\u306a\u3044\u306e\u3067\u5909\u306a\u3053\u3068\u3092\u66f8\u3044\u3066\u3044\u308b\u304b\u3082\u3057\u308c\u306a\u3044\u3093\u3060\u3051\u3069\u3001\u6c17\u306b\u305b\u305a\u6295\u7a3f\u3002\n\n```java\nimport org.junit.Assert;\nimport org.junit.jupiter.api.Test;\n\npublic class TwinCell {\n    private static class Solver {\n        private class Searcher\n        {\n            int c=0;\n            int col;\n            Searcher( int x, int y)\n            {\n                col = color(x,y);\n                search( x, y );\n            }\n            void search( int x, int y )\n            {\n                if ( col != color(x,y) || ( attended[y] & (1<<x)) != 0 ){\n                    return;\n                }\n                c+=1;\n                attended[y] |= 1<<x;\n                search( x+1, y );\n                search( x-1, y );\n                search( x, y+1 );\n                search( x, y-1 );\n            }\n            int size()\n            {\n                return c;\n            }\n        }\n        int[] bits;\n        int[] attended = new int[8];\n        static final int WX = 8;\n        static final int WY = 8;\n        public Solver(int[] _bits)\n        {\n            bits = _bits;\n        }\n        boolean onField( int x, int y)\n        {\n            return !( x<0 || WX<=x || y<0 || WY<=y );\n        }\n        private int color( int x, int y ){\n            if ( !onField( x, y )){\n                return -1;\n            }\n            return (bits[y] & (1<<x) )==0 ? 0 : 1;\n        }\n        public int[] solve() {\n            int[] r = new int[2];\n            for( int y=0 ; y<WY ; ++y ){\n                for( int x=0 ; x<WX ; ++x ){\n                    if ( new Searcher( x, y ).size()==2 ){\n                        ++r[color(x,y)];\n                    }\n                }\n            }\n            return r;\n        }\n    }\n    public String solve( String src )\n    {\n        String[] lines = src.split(\"\\\\/\");\n        int[] bits = new int[lines.length];\n        for( int i =0 ; i<lines.length ; ++i ){\n            bits[i]=Integer.parseInt(lines[i], 16);\n        }\n        int[] wb = new Solver( bits ).solve();\n        return String.format( \"%d,%d\", wb[0], wb[1] );\n    }\n\n    void test( String src, String expected )\n    {\n        Assert.assertEquals( expected, solve( src ));\n    }\n    @Test\n    void runAllTests()\n    {\n        /*0*/ test( \"dc/bc/a7/59/03/d5/d4/ea\", \"2,3\" );\n        /*1*/ test( \"ff/ff/ff/ff/ff/ff/ff/ff\", \"0,0\" );\n        /*2*/ test( \"00/00/00/00/00/00/00/00\", \"0,0\" );\n    }\n}\n```\n\nruby\u3068C99 \u306e\u3068\u304d( http://qiita.com/Nabetani/items/7814edd97911a80946f1 )\u3068\u306f\u7570\u306a\u308a\u3001\u6df1\u3055\u512a\u5148\u63a2\u7d22\u3067\u30de\u30b9\u76ee\u306e\u6570\u3092\u6570\u3048\u308b\u3053\u3068\u306b\u3057\u305f\u3002\n\n\u751f\u307e\u308c\u3066\u521d\u3081\u3066\u30af\u30e9\u30b9\u5185\u30af\u30e9\u30b9\u5185\u30af\u30e9\u30b9\u3092\u4f7f\u3063\u3066\u307f\u305f\u3002\n\u3042\u3068\u3001static \u3058\u3083\u306a\u3044 inner class \u3068\u3044\u3046\u73cd\u3057\u3044\u3082\u306e\u3082\u4f7f\u3063\u3066\u307f\u305f\u3002\n", "tags": ["yhpg", "\u3069\u3046\u66f8\u304f", "Java"]}