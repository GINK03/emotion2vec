{"tags": ["Python", "Julia"], "context": "Python+Numpy\u3092\u4f7f\u3063\u3066\u3044\u308b\u3068\u304d\u3068\uff0cJulia\u3092\u4f7f\u3063\u3066\u3044\u308b\u3068\u304d\u3067\uff0c\u9593\u9055\u3063\u3066\u3084\u3070\u3044\u30b3\u30fc\u30c9\u306b\u306a\u308b\u3053\u3068\u304c\u591a\u304f\uff08\u3068\u3044\u3046\u304b\u52d5\u304b\u306a\u3044\uff09\u6700\u8fd1\u60a9\u3093\u3067\u3044\u308b\u4ef6\u3092\u66f8\u304d\u307e\u3057\u305f\uff0e\u8ab0\u304b\u3044\u3044\u30a2\u30a4\u30c7\u30a2\u3092\u6559\u3048\u3066\u304f\u3060\u3055\u3044\uff0e\n\nPython + numpy\u306e\u5834\u5408\n\nAnaconda 4.3.0 (64-bit), Python 3.6.0, IPython 5.1.0\u3067\u8a66\u3057\u307e\u3057\u305f\n\nimport numpy as np\nX = np.array([[1, 2, 3], [4, 5, 6]])\n# X = np.matrix([[1, 2, 3], [4, 5, 6]]) \u3067\u3082\u3060\u3044\u305f\u3044\u540c\u3058\n\nfor elem in X: print(elem)\n# \u51fa\u529b\n# [1 2 3] (matrix\u306e\u5834\u5408\u306f [[1 2 3]])\n# [4 5 6] (matrix\u306e\u5834\u5408\u306f [[4 5 6]])\n\n\n\u6163\u308c\u3066\u3044\u308b\u306e\u3067\u3053\u3046\u306a\u3063\u3066\u307b\u3057\u3044\uff0e\n\n\nJulia\u306e\u5834\u5408\n\nJulia 0.5.0\u3067\u8a66\u3057\u307e\u3057\u305f\n\nX = [1 2 3; 4 5 6]\n# \u51fa\u529b\n# 2x3 Array{Int64, 2}:\n#  1 2 3\n#  4 5 6\n\nfor elem in X; println(elem); end\n# \u51fa\u529b\n# 1\n# 4\n# 2\n# 5\n# 3\n# 6\n\n\n\u500b\u4eba\u7684\u306b\u306f\u3053\u306eiteration\u304c\u3042\u307e\u308a\u76f4\u611f\u306b\u5408\u308f\u306a\u3044\uff08Python/Numpy\u8133\u3068\u3082\u8a00\u3048\u308b\uff09\u306e\u3067\u306a\u3093\u3068\u304b\u3057\u305f\u3044\uff0e\n\u5143\u3005Julia\u306fRow\u304bColumn\u306e\u3069\u3063\u3061\u304b\u306e\u30a4\u30c6\u30ec\u30fc\u30b7\u30e7\u30f3\u304c\u9045\u3044\u3068\u304b\u306a\u3093\u3068\u304b\uff08\u8a73\u7d30\u306f\u77e5\u3089\u306a\u3044\uff09\n\u6b7b\u306b\u305d\u3046\u306a\u6c17\u5206\u3067\u6b21\u306e\u3088\u3046\u306a\u30b3\u30fc\u30c9\u3092\u91cf\u7523\u3057\u305f\n\nX = [1 2 3; 4 5 6]\nm, n = size(X)\nfor i=1:m; println(X[i, :]); end\n# \u51fa\u529b\n\n\n\u4e00\u5fdc\u52d5\u304f\n\u5acc\u306a\u7406\u7531: \u6c17\u5206\n\n\n\u8abf\u3079\u305f\u3053\u3068\n\u4e00\u5fdc\u3044\u308d\u3093\u306a\u8b70\u8ad6\u3055\u308c\u3066\u3044\u308b\uff08\u30a4\u30de\u30a4\u30c1\u53e4\u3044\u3051\u3069\uff09\uff0e\n\n\nhttp://stackoverflow.com/questions/21778374/what-is-the-recommended-way-to-iterate-a-matrix-over-rows\n\n\u4e0a\u306e\u89e3\u6c7a\u6cd5\u3068\u540c\u3058\n\n\n\nhttps://github.com/JuliaLang/julia/issues/14491\n\niterator\u3092\u81ea\u5206\u3067\u5b9a\u7fa9\u3059\u308b\uff08\u826f\u3055\u305d\u3046\uff0c\u3067\u3082\u9762\u5012\uff09\n\n\n\nhttps://github.com/gasagna/ArraySlices.jl\n\n\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3057\u305f\u3089\u4f7f\u3048\u308b\u304b\u3082\uff08\u672a\u691c\u8a3c\uff09\n\n\n\nhttp://pkg.julialang.org/\n\n\u4e00\u5fdc\u516c\u5f0f\u30d1\u30c3\u30b1\u30fc\u30b8\u773a\u3081\u3066\u307f\u305f\u3051\u3069\uff0c\u7279\u306b\u516c\u5f0f\u306b\u306f\u306a\u3055\u305d\u3046\uff1f \n\n\n\nPython+Numpy\u3092\u4f7f\u3063\u3066\u3044\u308b\u3068\u304d\u3068\uff0cJulia\u3092\u4f7f\u3063\u3066\u3044\u308b\u3068\u304d\u3067\uff0c\u9593\u9055\u3063\u3066\u3084\u3070\u3044\u30b3\u30fc\u30c9\u306b\u306a\u308b\u3053\u3068\u304c\u591a\u304f\uff08\u3068\u3044\u3046\u304b\u52d5\u304b\u306a\u3044\uff09\u6700\u8fd1\u60a9\u3093\u3067\u3044\u308b\u4ef6\u3092\u66f8\u304d\u307e\u3057\u305f\uff0e\u8ab0\u304b\u3044\u3044\u30a2\u30a4\u30c7\u30a2\u3092\u6559\u3048\u3066\u304f\u3060\u3055\u3044\uff0e\n\n# Python + numpy\u306e\u5834\u5408\n- Anaconda 4.3.0 (64-bit), Python 3.6.0, IPython 5.1.0\u3067\u8a66\u3057\u307e\u3057\u305f\n\n```python\nimport numpy as np\nX = np.array([[1, 2, 3], [4, 5, 6]])\n# X = np.matrix([[1, 2, 3], [4, 5, 6]]) \u3067\u3082\u3060\u3044\u305f\u3044\u540c\u3058\n\nfor elem in X: print(elem)\n# \u51fa\u529b\n# [1 2 3] (matrix\u306e\u5834\u5408\u306f [[1 2 3]])\n# [4 5 6] (matrix\u306e\u5834\u5408\u306f [[4 5 6]])\n```\n- \u6163\u308c\u3066\u3044\u308b\u306e\u3067\u3053\u3046\u306a\u3063\u3066\u307b\u3057\u3044\uff0e\n\n# Julia\u306e\u5834\u5408\n- Julia 0.5.0\u3067\u8a66\u3057\u307e\u3057\u305f\n\n```julia\nX = [1 2 3; 4 5 6]\n# \u51fa\u529b\n# 2x3 Array{Int64, 2}:\n#  1 2 3\n#  4 5 6\n\nfor elem in X; println(elem); end\n# \u51fa\u529b\n# 1\n# 4\n# 2\n# 5\n# 3\n# 6\n```\n\n- \u500b\u4eba\u7684\u306b\u306f\u3053\u306eiteration\u304c\u3042\u307e\u308a\u76f4\u611f\u306b\u5408\u308f\u306a\u3044\uff08Python/Numpy\u8133\u3068\u3082\u8a00\u3048\u308b\uff09\u306e\u3067\u306a\u3093\u3068\u304b\u3057\u305f\u3044\uff0e\n- \u5143\u3005Julia\u306fRow\u304bColumn\u306e\u3069\u3063\u3061\u304b\u306e\u30a4\u30c6\u30ec\u30fc\u30b7\u30e7\u30f3\u304c\u9045\u3044\u3068\u304b\u306a\u3093\u3068\u304b\uff08\u8a73\u7d30\u306f\u77e5\u3089\u306a\u3044\uff09\n- \u6b7b\u306b\u305d\u3046\u306a\u6c17\u5206\u3067\u6b21\u306e\u3088\u3046\u306a\u30b3\u30fc\u30c9\u3092\u91cf\u7523\u3057\u305f\n\n```julia\nX = [1 2 3; 4 5 6]\nm, n = size(X)\nfor i=1:m; println(X[i, :]); end\n# \u51fa\u529b\n```\n\n- \u4e00\u5fdc\u52d5\u304f\n- \u5acc\u306a\u7406\u7531: \u6c17\u5206\n\n\n## \u8abf\u3079\u305f\u3053\u3068\n\u4e00\u5fdc\u3044\u308d\u3093\u306a\u8b70\u8ad6\u3055\u308c\u3066\u3044\u308b\uff08\u30a4\u30de\u30a4\u30c1\u53e4\u3044\u3051\u3069\uff09\uff0e\n\n- http://stackoverflow.com/questions/21778374/what-is-the-recommended-way-to-iterate-a-matrix-over-rows\n  - \u4e0a\u306e\u89e3\u6c7a\u6cd5\u3068\u540c\u3058\n- https://github.com/JuliaLang/julia/issues/14491\n  - iterator\u3092\u81ea\u5206\u3067\u5b9a\u7fa9\u3059\u308b\uff08\u826f\u3055\u305d\u3046\uff0c\u3067\u3082\u9762\u5012\uff09\n- https://github.com/gasagna/ArraySlices.jl\n  - \u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3057\u305f\u3089\u4f7f\u3048\u308b\u304b\u3082\uff08\u672a\u691c\u8a3c\uff09\n- http://pkg.julialang.org/\n  - \u4e00\u5fdc\u516c\u5f0f\u30d1\u30c3\u30b1\u30fc\u30b8\u773a\u3081\u3066\u307f\u305f\u3051\u3069\uff0c\u7279\u306b\u516c\u5f0f\u306b\u306f\u306a\u3055\u305d\u3046\uff1f \n"}