{"context": "\n\n\u5272\u8fbc\u307f\n\u5272\u8fbc\u307f\u3092\u4f7f\u3063\u305fTimer\u51e6\u7406\u3092\u8a66\u7528\u3057\u305f\u3002\n\u4ee5\u4e0b\u306e\u52d5\u753b\u3067\u624b\u9806\u304c\u7d39\u4ecb\u3055\u308c\u3066\u3044\u308b\u3002\nhttps://www.youtube.com/watch?v=gaZ1kRJzCok&list=PL_MJualihC5CAtnZHphK-hli8aSL3PRRz&index=39\n\nVivado\u3067\u306e\u51e6\u7406\n\nIP\u30ea\u30b9\u30c8\u304b\u3089Zynq\u3092\u8ffd\u52a0\nIP\u30ea\u30b9\u30c8\u304b\u3089GPIO\u3092\u8ffd\u52a0\nRun Connection Automation\u304b\u3089axi_gpio_0 > S_AXI\u3092\u9078\u629e\n\n\nClock: Auto\n\n\nRun Connection Automation\u304b\u3089axi_gpio_0 > GPIO\u3092\u9078\u629e\n\n\nSelect Board Part Interface: leds_4bits\u3092\u9078\u629e\n\n\nIP\u30ea\u30b9\u30c8\u304b\u3089AXI Timer\u3092\u8ffd\u52a0\nRun Connection Automation\u304b\u3089axi_timer_0 > S_AXI\u3092\u9078\u629e\n\n\nClock: Auto\n\n\nZynq\u306eIP\u3092\u30c0\u30d6\u30eb\u30af\u30ea\u30c3\u30af > Interrupts\u306e\u30da\u30fc\u30b8\u306b\u79fb\u52d5\nFabric Interrupts\u3092\u30c1\u30a7\u30c3\u30af\n\n\nIRQ_F2P[15:0]\u3092\u30c1\u30a7\u30c3\u30af\n\n\naxi_timer_0\u306einterrupt\u3068ZYNQ\u306eIRQ_F2P\u3092\u63a5\u7d9a\nValidate Design\u3067\u30a8\u30e9\u30fc\u304c\u306a\u3044\u304b\u78ba\u8a8d\nSources > Design Sources > design_XXX\u306b\u3066\u53f3\u30af\u30ea\u30c3\u30af\u3057\u3066Create HDL Wrapper\u3092\u9078\u629e\n\n\nLet Vivado manage wrapper and auto-update\n\n\nGenerate Bitstream\n\n\u4f5c\u6210\u3057\u305f\u3082\u306e\u3092XSDK\u306bExport\u3057\u3066\u3001XSDK\u3092\u8d77\u52d5\u3059\u308b\u3002\n\nXSDK\u3067\u306e\u51e6\u7406\n\nNew -> Application Project\n\n\nProject name: Timer_LED\nHello World\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u3067\u4f5c\u6210\n\n\nhelloworld.c\u3092\u7de8\u96c6 (\u5f8c\u8ff0)\nProgram FPGA\u5b9f\u884c\nhelloworld\u3092\u5b9f\u884c\n\n\u57fa\u677f\u4e0a\u306eLED(\u5199\u771f\u5de6\u4e0b\u306e\u30b9\u30a4\u30c3\u30c1\u306e\u4e0a\u306b\u3042\u308b4\u3064\u306eLED)\u304c\u70b9\u706f\u3057\u3066\u3044\u304f\u52d5\u4f5c\u304c\u78ba\u8a8d\u3067\u304d\u305f\u3002\n\n\ncode\n\u4e0a\u8a18\u306e\u30ea\u30f3\u30af\u306e\u30d3\u30c7\u30aa\u3092\u898b\u306a\u304c\u3089\u5199\u7d4c\u3057\u305f\u3002\n\nhelloworld.c\n#include <stdio.h>\n#include \"platform.h\"\n\n#include \"xparameters.h\"\n#include \"xgpio.h\"\n#include \"xtmrctr.h\"\n#include \"xscugic.h\"\n#include \"xil_exception.h\"\n#include \"xil_printf.h\"\n\n// Parameter definitions\n#define INTC_DEVICE_ID  XPAR_PS7_SCUGIC_0_DEVICE_ID\n#define TMR_DEVICE_ID   XPAR_TMRCTR_0_DEVICE_ID\n#define LEDS_DEVICE_ID  XPAR_AXI_GPIO_0_DEVICE_ID\n#define INTC_TMR_INTERRUPT_ID   XPAR_FABRIC_AXI_TIMER_0_INTERRUPT_INTR\n\n#define TMR_LOAD    0xF8000000\n\nXGpio LEDInst;\nXScuGic INTCInst;\nXTmrCtr TMRInst;\n\nstatic int led_data;\nstatic int tmr_count;\n\n// -------- function prototypes\nstatic void TMR_Intr_Handler(void *baseaddr_p);\nstatic int IntcInitFunction(u16 DeviceId, XTmrCtr *TmrInstancePtr);\n\n\nvoid TMR_Intr_Handler(void *data)\n{\n    if (XTmrCtr_IsExpired(&TMRInst, 0)) {\n        if (tmr_count == 3) {\n            XTmrCtr_Stop(&TMRInst, 0);\n            tmr_count = 0;\n            led_data++;\n            XGpio_DiscreteWrite(&LEDInst, 1, led_data);\n            XTmrCtr_Reset(&TMRInst, 0);\n            XTmrCtr_Start(&TMRInst, 0);\n        } else {\n            tmr_count++;\n        }\n    }\n}\n\nint InterruptSystemSetup(XScuGic *XScuGicInstancePtr)\n{\n    Xil_ExceptionRegisterHandler(XIL_EXCEPTION_ID_INT,\n            (Xil_ExceptionHandler) XScuGic_InterruptHandler,\n            XScuGicInstancePtr);\n    Xil_ExceptionEnable();\n\n    return XST_SUCCESS;\n}\n\nint IntcInitFunction(u16 DeviceId, XTmrCtr *TmrInstancePtr)\n{\n    XScuGic_Config *IntcConfig;\n    int status;\n\n    // Interrupt controller initialization\n    IntcConfig = XScuGic_LookupConfig(DeviceId);\n    status = XScuGic_CfgInitialize(&INTCInst, IntcConfig,\n            IntcConfig->CpuBaseAddress);\n    if (status != XST_SUCCESS) {\n        return XST_FAILURE;\n    }\n\n    // Call to interupt setup\n    status = InterruptSystemSetup(&INTCInst);\n    if (status != XST_SUCCESS) {\n        return XST_FAILURE;\n    }\n\n    // Connect timer interrupt to handler\n    status = XScuGic_Connect(&INTCInst, INTC_TMR_INTERRUPT_ID,\n            (Xil_ExceptionHandler) TMR_Intr_Handler, (void *) TmrInstancePtr);\n    if (status != XST_SUCCESS) {\n        return XST_FAILURE;\n    }\n\n    // Enable timer interrupt in the controller\n    XScuGic_Enable(&INTCInst, INTC_TMR_INTERRUPT_ID);\n\n    return XST_SUCCESS;\n}\n\nint main()\n{\n    init_platform();\n\n    led_data = 0;\n\n    int status;\n\n    // Init GPIO\n    status = XGpio_Initialize(&LEDInst, LEDS_DEVICE_ID);\n    if (status != XST_SUCCESS) {\n        return XST_FAILURE;\n    }\n\n    XGpio_SetDataDirection(&LEDInst, 1, 0x00);\n\n    // Init GIC\n    status = IntcInitFunction(INTC_DEVICE_ID, &TMRInst);\n    if (status != XST_SUCCESS) {\n        return XST_FAILURE;\n    }\n\n    // Setup Timer\n    status = XTmrCtr_Initialize(&TMRInst, TMR_DEVICE_ID);\n    if (status != XST_SUCCESS) {\n        return XST_FAILURE;\n    }\n\n    XTmrCtr_SetHandler(&TMRInst, (XTmrCtr_Handler) TMR_Intr_Handler, &TMRInst);\n    XTmrCtr_SetResetValue(&TMRInst, 0, TMR_LOAD);\n    XTmrCtr_SetOptions(&TMRInst, 0,\n            XTC_INT_MODE_OPTION | XTC_AUTO_RELOAD_OPTION);\n    XTmrCtr_Start(&TMRInst, 0);\n\n    while(1)\n        ;\n}\n\n\n\n\n## \u5272\u8fbc\u307f\n\n\u5272\u8fbc\u307f\u3092\u4f7f\u3063\u305fTimer\u51e6\u7406\u3092\u8a66\u7528\u3057\u305f\u3002\n\n\u4ee5\u4e0b\u306e\u52d5\u753b\u3067\u624b\u9806\u304c\u7d39\u4ecb\u3055\u308c\u3066\u3044\u308b\u3002\nhttps://www.youtube.com/watch?v=gaZ1kRJzCok&list=PL_MJualihC5CAtnZHphK-hli8aSL3PRRz&index=39\n\n## Vivado\u3067\u306e\u51e6\u7406\n\n1. IP\u30ea\u30b9\u30c8\u304b\u3089Zynq\u3092\u8ffd\u52a0\n2. IP\u30ea\u30b9\u30c8\u304b\u3089GPIO\u3092\u8ffd\u52a0\n3. Run Connection Automation\u304b\u3089axi_gpio_0 > S_AXI\u3092\u9078\u629e\n  - Clock: Auto\n4. Run Connection Automation\u304b\u3089axi_gpio_0 > GPIO\u3092\u9078\u629e\n  - Select Board Part Interface: leds_4bits\u3092\u9078\u629e\n5. IP\u30ea\u30b9\u30c8\u304b\u3089AXI Timer\u3092\u8ffd\u52a0\n6. Run Connection Automation\u304b\u3089axi_timer_0 > S_AXI\u3092\u9078\u629e\n  - Clock: Auto\n7. Zynq\u306eIP\u3092\u30c0\u30d6\u30eb\u30af\u30ea\u30c3\u30af > Interrupts\u306e\u30da\u30fc\u30b8\u306b\u79fb\u52d5\n8. Fabric Interrupts\u3092\u30c1\u30a7\u30c3\u30af\n  - IRQ_F2P[15:0]\u3092\u30c1\u30a7\u30c3\u30af\n9. axi_timer_0\u306einterrupt\u3068ZYNQ\u306eIRQ_F2P\u3092\u63a5\u7d9a\n10. Validate Design\u3067\u30a8\u30e9\u30fc\u304c\u306a\u3044\u304b\u78ba\u8a8d\n11. Sources > Design Sources > design_XXX\u306b\u3066\u53f3\u30af\u30ea\u30c3\u30af\u3057\u3066Create HDL Wrapper\u3092\u9078\u629e\n  - Let Vivado manage wrapper and auto-update\n12. Generate Bitstream\n\n\u4f5c\u6210\u3057\u305f\u3082\u306e\u3092XSDK\u306bExport\u3057\u3066\u3001XSDK\u3092\u8d77\u52d5\u3059\u308b\u3002\n\n\n## XSDK\u3067\u306e\u51e6\u7406\n\n1. New -> Application Project\n   - Project name: Timer_LED\n   - Hello World\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u3067\u4f5c\u6210\n2. helloworld.c\u3092\u7de8\u96c6 (\u5f8c\u8ff0)\n3. Program FPGA\u5b9f\u884c\n4. helloworld\u3092\u5b9f\u884c\n\n\u57fa\u677f\u4e0a\u306eLED(\u5199\u771f\u5de6\u4e0b\u306e\u30b9\u30a4\u30c3\u30c1\u306e\u4e0a\u306b\u3042\u308b4\u3064\u306eLED)\u304c\u70b9\u706f\u3057\u3066\u3044\u304f\u52d5\u4f5c\u304c\u78ba\u8a8d\u3067\u304d\u305f\u3002\n\n![DSC_0169.JPG](https://qiita-image-store.s3.amazonaws.com/0/32870/70ab10d6-da11-bde4-c398-d0c94f40a6c3.jpeg)\n\n\n## code \n\n\u4e0a\u8a18\u306e\u30ea\u30f3\u30af\u306e\u30d3\u30c7\u30aa\u3092\u898b\u306a\u304c\u3089\u5199\u7d4c\u3057\u305f\u3002\n\n```helloworld.c\n#include <stdio.h>\n#include \"platform.h\"\n\n#include \"xparameters.h\"\n#include \"xgpio.h\"\n#include \"xtmrctr.h\"\n#include \"xscugic.h\"\n#include \"xil_exception.h\"\n#include \"xil_printf.h\"\n\n// Parameter definitions\n#define INTC_DEVICE_ID\tXPAR_PS7_SCUGIC_0_DEVICE_ID\n#define TMR_DEVICE_ID\tXPAR_TMRCTR_0_DEVICE_ID\n#define LEDS_DEVICE_ID\tXPAR_AXI_GPIO_0_DEVICE_ID\n#define INTC_TMR_INTERRUPT_ID\tXPAR_FABRIC_AXI_TIMER_0_INTERRUPT_INTR\n\n#define TMR_LOAD\t0xF8000000\n\nXGpio LEDInst;\nXScuGic INTCInst;\nXTmrCtr TMRInst;\n\nstatic int led_data;\nstatic int tmr_count;\n\n// -------- function prototypes\nstatic void TMR_Intr_Handler(void *baseaddr_p);\nstatic int IntcInitFunction(u16 DeviceId, XTmrCtr *TmrInstancePtr);\n\n\nvoid TMR_Intr_Handler(void *data)\n{\n\tif (XTmrCtr_IsExpired(&TMRInst, 0)) {\n\t\tif (tmr_count == 3) {\n\t\t\tXTmrCtr_Stop(&TMRInst, 0);\n\t\t\ttmr_count = 0;\n\t\t\tled_data++;\n\t\t\tXGpio_DiscreteWrite(&LEDInst, 1, led_data);\n\t\t\tXTmrCtr_Reset(&TMRInst, 0);\n\t\t\tXTmrCtr_Start(&TMRInst, 0);\n\t\t} else {\n\t\t\ttmr_count++;\n\t\t}\n\t}\n}\n\nint InterruptSystemSetup(XScuGic *XScuGicInstancePtr)\n{\n\tXil_ExceptionRegisterHandler(XIL_EXCEPTION_ID_INT,\n\t\t\t(Xil_ExceptionHandler) XScuGic_InterruptHandler,\n\t\t\tXScuGicInstancePtr);\n\tXil_ExceptionEnable();\n\n\treturn XST_SUCCESS;\n}\n\nint IntcInitFunction(u16 DeviceId, XTmrCtr *TmrInstancePtr)\n{\n\tXScuGic_Config *IntcConfig;\n\tint status;\n\n\t// Interrupt controller initialization\n\tIntcConfig = XScuGic_LookupConfig(DeviceId);\n\tstatus = XScuGic_CfgInitialize(&INTCInst, IntcConfig,\n\t\t\tIntcConfig->CpuBaseAddress);\n\tif (status != XST_SUCCESS) {\n\t\treturn XST_FAILURE;\n\t}\n\n\t// Call to interupt setup\n\tstatus = InterruptSystemSetup(&INTCInst);\n\tif (status != XST_SUCCESS) {\n\t\treturn XST_FAILURE;\n\t}\n\n\t// Connect timer interrupt to handler\n\tstatus = XScuGic_Connect(&INTCInst, INTC_TMR_INTERRUPT_ID,\n\t\t\t(Xil_ExceptionHandler) TMR_Intr_Handler, (void *) TmrInstancePtr);\n\tif (status != XST_SUCCESS) {\n\t\treturn XST_FAILURE;\n\t}\n\n\t// Enable timer interrupt in the controller\n\tXScuGic_Enable(&INTCInst, INTC_TMR_INTERRUPT_ID);\n\n\treturn XST_SUCCESS;\n}\n\nint main()\n{\n    init_platform();\n\n    led_data = 0;\n\n    int status;\n\n    // Init GPIO\n    status = XGpio_Initialize(&LEDInst, LEDS_DEVICE_ID);\n    if (status != XST_SUCCESS) {\n    \treturn XST_FAILURE;\n    }\n\n    XGpio_SetDataDirection(&LEDInst, 1, 0x00);\n\n    // Init GIC\n    status = IntcInitFunction(INTC_DEVICE_ID, &TMRInst);\n    if (status != XST_SUCCESS) {\n    \treturn XST_FAILURE;\n    }\n\n    // Setup Timer\n    status = XTmrCtr_Initialize(&TMRInst, TMR_DEVICE_ID);\n    if (status != XST_SUCCESS) {\n    \treturn XST_FAILURE;\n    }\n\n    XTmrCtr_SetHandler(&TMRInst, (XTmrCtr_Handler) TMR_Intr_Handler, &TMRInst);\n    XTmrCtr_SetResetValue(&TMRInst, 0, TMR_LOAD);\n    XTmrCtr_SetOptions(&TMRInst, 0,\n    \t\tXTC_INT_MODE_OPTION | XTC_AUTO_RELOAD_OPTION);\n    XTmrCtr_Start(&TMRInst, 0);\n\n    while(1)\n    \t;\n}\n```\n", "tags": ["zybo", "gpio", "interrupt"]}