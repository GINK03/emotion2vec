{"context": "\u30d1\u30fc\u30c8\uff12\u3067\u3059\u3002\nAmazon.com\u306eID\u3068\u79d8\u5bc6\u9375\u304c\u5fc5\u8981\u3067\u3059\u3002\n\u3055\u3089\u306b\u3001Amazon.com\u306e\u30a2\u30bd\u30b7\u30a8\u30a4\u30c8\u30bf\u30b0\u3068Amazon.co.jp\u306e\u30a2\u30bd\u30b7\u30a8\u30a4\u30c8\u30bf\u30b0\u304c\u5fc5\u8981\u3067\u3059\u3002\n\uff08Amazon\u6d77\u5916\u8f38\u51fa\u306a\u3069\u306e\u672c\u3092\u53c2\u8003\u306b\u3057\u3066\u3001\u30a2\u30bd\u30b7\u30a8\u30a4\u30c8\u30bf\u30b0\u3092\u5165\u624b\u3057\u3066\u4e0b\u3055\u3044\u3002\uff09\nAmazon.com\u3078\u306e\u30a2\u30af\u30bb\u30b9\u306f\uff11\u79d2\u306b\uff11\u56de\u306b\u3057\u3066\u3044\u307e\u3059\u3002\u3068\u304d\u3069\u304d\u6012\u3089\u308c\u308b\u3068\u304d\u304c\u3042\u308b\u306e\u3067\u3001\u305d\u306e\u5834\u5408\u306f\u3001\uff12\u500d\u306e\u6642\u9593Sleep\u3055\u305b\u3066\u304b\u3089\u518d\u5ea6\u30a2\u30af\u30bb\u30b9\u3057\u307e\u3059\u3002\nAmazon.co.jp\u3078\u306e\u30a2\u30af\u30bb\u30b9\u306f\uff15\u79d2\u306b\uff11\u56de\u306b\u3057\u3066\u3044\u307e\u3059\u3002\u3053\u3061\u3089\u3082\u6012\u3089\u308c\u305f\u3089\u3001\uff12\u500d\u306e\u6642\u9593Sleep\u3055\u305b\u3066\u304b\u3089\u518d\u5ea6\u30a2\u30af\u30bb\u30b9\u3057\u307e\u3059\u3002\n\u51fa\u529b\u7d50\u679c\u306f\u3001STDOUT\u306b\u3067\u3066\u304d\u307e\u3059\u3002\n\u3042\u3068\u3001wget\u3092\u4f7f\u3063\u3066\u3044\u307e\u3059\u3002\uff08\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0\u304c\u4e0b\u624b\u3067\u3059\u307f\u307e\u305b\u3093\u3002\uff09\n\u30d1\u30fc\u30c8\uff12\u306f\u4ee5\u4e0a\u3067\u3059\u3002\n\ncomp_us_jp.pl\n#!/usr/bin/perl -w\n\nuse strict;\nuse warnings;\n\nuse Data::Dumper;\n\nuse RequestSignatureHelper;\nuse LWP::UserAgent;\nuse XML::Simple;\n\nuse constant myAWSId        => ''; //AWS\u306eID\u3092\u5165\u308c\u3066\u4e0b\u3055\u3044\nuse constant myAWSSecret    => ''; //AWS\u306e\u79d8\u5bc6\u9375\u3092\u5165\u308c\u3066\u4e0b\u3055\u3044\nuse constant myEndPoint     => 'ecs.amazonaws.com';\nuse constant jmyEndPoint        => 'webservices.amazon.co.jp';\n\n# see if user provided ItemId on command-line\nmy $itemId = shift @ARGV || 'B00006JNN7';\n\n# Set up the helper\nmy $helper = new RequestSignatureHelper (\n    +RequestSignatureHelper::kAWSAccessKeyId => myAWSId,\n    +RequestSignatureHelper::kAWSSecretKey => myAWSSecret,\n    +RequestSignatureHelper::kEndPoint => myEndPoint,\n);\n\nmy %asin_hash=();\nmy %line_hash=();\n\n#\n# input data\n#\nwhile(my $line = <STDIN> )\n{\n    chomp( $line );\n        (my $asin ) = ($line =~ /([A-Z0-9]{10}).*/);\n    $line_hash{ $asin } = $line;\n    $asin_hash{ $asin } = $asin;\n}\n\n#\n# make query lines\n#\nmy %query_lines_hash=();\nmy $asin_counter_per_line = 0;\nmy $query_line = \"\";\n\nforeach my $key (keys(%asin_hash))\n{\n    $query_line = $query_line . \",\" . $key ;\n    $asin_counter_per_line ++ ;\n    if($asin_counter_per_line eq 10)\n    {\n        $query_lines_hash{ $query_line } = $query_line ;\n        $query_line = \"\";\n        $asin_counter_per_line = 0 ;\n    }\n}\nif( $asin_counter_per_line ne 0 ) \n{\n    $query_lines_hash{ $query_line } = $query_line ;\n    $query_line = \"\";\n    $asin_counter_per_line = 0 ;\n}\n\nmy %rank_hash=();\nmy %price_hash=();\nmy %type_hash=();\nmy %weight_hash=();\nmy %url_hash=();\nmy %offers_url_hash=();\nmy %sutable_price_hash=();\n\nmy $base_sleep_time = 1;\n\nforeach my $key (keys(%query_lines_hash)){\n    my $sleep_time = $base_sleep_time ;\n    my $error_count = 0;\n\nRETURN_POINT:\n    my $request = {\n        Service => 'AWSECommerceService',\n        Operation => 'ItemLookup',\n        AssociateTag  => '', //amazon.com\u306e\u30a2\u30bd\u30b7\u30a8\u30a4\u30c8\u30bf\u30b0\u3092\u5165\u308c\u3066\u4e0b\u3055\u3044\n        ResponseGroup => 'SalesRank,OfferSummary,OfferFull,ItemAttributes',\n        ItemId => $key,\n    };\n\n    # Sign the request\n    my $signedRequest = $helper->sign($request);\n\n    # We can use the helper's canonicalize() function to construct the query string too.\n    my $queryString = $helper->canonicalize($signedRequest);\n    my $url = \"http://\" . myEndPoint . \"/onca/xml?\" . $queryString;\n\n    my $ua = new LWP::UserAgent();\n    my $response = $ua->get($url);\n    my $content = $response->content();\n\n    my $xmlParser = new XML::Simple();\n    my $xml = $xmlParser->XMLin($content,ForceArray=>['Item']);\n\n    if( exists $xml->{Items}{Item} && @{ $xml->{Items}{Item} } ) {\n        foreach ( @{ $xml->{Items}{Item} } )\n        {\n            #print \"A=\" . $_->{ASIN} . \"\\n\" ;\n\n            $rank_hash{ $_->{ASIN} } = $_->{SalesRank} ;\n            $price_hash{ $_->{ASIN} } = $_->{OfferSummary}{LowestNewPrice}{Amount};\n            $type_hash{ $_->{ASIN} } = $_->{ItemAttributes}{ProductGroup};\n\n            if( exists $_->{DetailPageURL} ) {\n                $url_hash{ $_->{ASIN} } = $_->{DetailPageURL} ;\n            }\n\n            if( exists $_->{ItemAttributes} ) {\n                if( exists $_->{ItemAttributes}{PackageDimensions}{Weight}{content}) {\n                    $weight_hash{ $_->{ASIN} } = $_->{ItemAttributes}{PackageDimensions}{Weight}{content} ;\n                }\n            }\n            if( exists $_->{Offers}{MoreOffersUrl} ) {\n                $offers_url_hash{ $_->{ASIN} } = $_->{Offers}{MoreOffersUrl} ;\n                $offers_url_hash{ $_->{ASIN} } =~ s/^http/https/ ;\n                #print $_->{ASIN} .\"---\". $offers_url_hash{ $_->{ASIN} }.\"\\n\" ;\n            }\n        }\n    }\n\n    if ($response->is_success()) {\n    } else {\n            my $error = findError($xml);\n            if (defined $error) {\n            print STDERR \"Error: \" . $error->{Code} . \": \" . $error->{Message} . \"\\n\";\n            if( $error_count > 2 ){ if($error_count eq 3) {print \"DATA_LOST\\n\";} }else\n            { \n                $error_count++; \n                print STDERR \"ERROR_COUNT=$error_count\\n\"; \n                $sleep_time = $sleep_time * 2; \n                print STDERR \"SLEEP_TIME=$sleep_time\\n\";\n                sleep $sleep_time;\n                goto RETURN_POINT ;\n            }\n            } else {\n            print \"Unknown Error!\\n\";\n            }\n    }\n    sleep $sleep_time;\n}\n\n#\n# sutable_price\n#\n\nmy $usd_head = 0;\nmy $usd_tail = 0;\n\nforeach my $key (keys(%offers_url_hash)){\n    #print $offers_url_hash{ $key } . \"\\n\";\n    my $command = \"/usr/local/bin/wget -q -O - \".$offers_url_hash{ $key }.\" | grep 'a-color-price' > aoutwget.html\" ;\n    system($command);\n    $command = \"/usr/bin/head -n 1 < aoutwget.html > aoutwget_head.html\" ;\n    system($command);\n    $command = \"/usr/bin/tail -n 1 < aoutwget.html > aoutwget_tail.html\" ;\n    system($command);\n\n    open(my $fh, \"<\", \"aoutwget_head.html\") or die \"Cannot open aoutwget_head.html\";\n    while(my $line = <$fh>){ \n        chomp $line;\n            (my $usd_tmp) = ($line =~ /(\\$[\\.0-9]*)/);\n        $usd_tmp =~ s/^.// ;\n        $usd_tmp =~ s/\\.// ;\n        $usd_head = $usd_tmp + 0;\n    }\n    close($fh);\n    open(   $fh, \"<\", \"aoutwget_tail.html\") or die \"Cannot open aoutwget_tail.html\";\n    while(my $line = <$fh>){ \n        chomp $line;\n            (my $usd_tmp) = ($line =~ /(\\$[\\.0-9]*)/);\n        $usd_tmp =~ s/^.// ;\n        $usd_tmp =~ s/\\.// ;\n        $usd_tail = $usd_tmp + 0;\n    }\n    close($fh);\n    $sutable_price_hash{ $key } =int(($usd_head+$usd_tail)/2+0.5);\n}\n\nmy %jrank_hash=();\nmy %jprice_hash=();\nmy %jurl_hash=();\nmy %prime_hash=();\nmy %totalnew_hash=();\n\n\n# Set up the helper\n$helper = new RequestSignatureHelper (\n    +RequestSignatureHelper::kAWSAccessKeyId => myAWSId,\n    +RequestSignatureHelper::kAWSSecretKey => myAWSSecret,\n    +RequestSignatureHelper::kEndPoint => jmyEndPoint,\n);\n\n$base_sleep_time = 5;\n\nforeach my $key (keys(%query_lines_hash)){\n    my $sleep_time = $base_sleep_time ;\n    my $error_count = 0;\n\nRETURN_POINT2:\n\n    my $request = {\n        Service => 'AWSECommerceService',\n        Operation => 'ItemLookup',\n        AssociateTag  => '', //amazon.co.jp\u306e\u30a2\u30bd\u30b7\u30a8\u30a4\u30c8\u30bf\u30b0\u3092\u5165\u308c\u3066\u4e0b\u3055\u3044\n        ItemId => $key,\n        ResponseGroup => 'ItemIds,SalesRank,Offers,OfferSummary,ItemAttributes,Large',\n    };\n\n    # Sign the request\n    my $signedRequest = $helper->sign($request);\n\n    # We can use the helper's canonicalize() function to construct the query string too.\n    my $queryString = $helper->canonicalize($signedRequest);\n    my $url = \"http://\" . jmyEndPoint . \"/onca/xml?\" . $queryString;\n\n    my $ua = new LWP::UserAgent();\n    my $response = $ua->get($url);\n    my $content = $response->content();\n\n    my $xmlParser = new XML::Simple();\n    my $xml = $xmlParser->XMLin($content,ForceArray=>['Item']);\n\n    if( exists $xml->{Items}{Item} && @{ $xml->{Items}{Item} } ) {\n        foreach ( @{ $xml->{Items}{Item} } )\n        {\n            if( exists $_->{SalesRank} ) {\n                $jrank_hash{ $_->{ASIN} } = $_->{SalesRank} ;\n            }\n\n            if( exists $_->{OfferSummary}{LowestNewPrice}{Amount}  )\n            {\n                    $jprice_hash{ $_->{ASIN} } = $_->{OfferSummary}{LowestNewPrice}{Amount} ;\n            }\n            if( exists $_->{DetailPageURL} ) {\n                $jurl_hash{ $_->{ASIN} } = $_->{DetailPageURL} ;\n            }\n            if( exists $_->{Offers}{Offer}  && exists $_->{Offers}{Offer}{OfferListing}{IsEligibleForPrime}  )\n            {\n                $prime_hash{ $_->{ASIN} } = $_->{Offers}{Offer}{OfferListing}{IsEligibleForPrime};\n            }\n            if( exists $_->{OfferSummary}{TotalNew}  )\n            {\n                    $totalnew_hash{ $_->{ASIN} } = $_->{OfferSummary}{TotalNew} ;\n            }\n        }\n    }\n\n    if ($response->is_success()) {\n    } else {\n            my $error = findError($xml);\n            if (defined $error) {\n            print STDERR \"Error: \" . $error->{Code} . \": \" . $error->{Message} . \"\\n\";\n            if( $error_count > 2 ){ if($error_count eq 3) {print \"DATA_LOST\\n\";} }else\n            { \n                $error_count++; \n                print STDERR \"ERROR_COUNT=$error_count\\n\"; \n                $sleep_time = $sleep_time * 2; \n                print STDERR \"SLEEP_TIME=$sleep_time\\n\";\n                sleep $sleep_time;\n                goto RETURN_POINT2 ;\n            }\n            } else {\n            print \"Unknown Error!\\n\";\n            }\n    }\n    sleep $sleep_time;\n}\n\nmy %diff_hash=();\n\nforeach my $key (keys(%asin_hash)){\n    if( exists $price_hash{$key} )\n    {\n        $diff_hash{$key}=$price_hash{$key}-$jprice_hash{$key};\n    }\n    else\n    {\n        $diff_hash{$key}=0-$jprice_hash{$key};\n    }\n    print \"$key\\t$jrank_hash{$key}\\t$jprice_hash{$key}\\t\";\n    if( exists $rank_hash{$key} ) { print $rank_hash{$key} ; }\n    print \"\\t\";\n    if( exists $price_hash{$key} ) { print $price_hash{$key} ; }\n    print \"\\t$jurl_hash{$key}\\t$url_hash{$key}\\t$weight_hash{$key}\\t$diff_hash{$key}\\t$prime_hash{$key}\\t$sutable_price_hash{$key}\\t$totalnew_hash{$key}\\n\";\n}\n\nsub findError {\n    my $xml = shift;\n\n    return undef unless ref($xml) eq 'HASH';\n\n    if (exists $xml->{Error}) { return $xml->{Error}; };\n\n    for (keys %$xml) {\n    my $error = findError($xml->{$_});\n    return $error if defined $error;\n    }\n\n    return undef;\n}\n\n\nPerl\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u7d42\u308f\u308a\n\u30d1\u30fc\u30c8\uff12\u3067\u3059\u3002\n\nAmazon.com\u306eID\u3068\u79d8\u5bc6\u9375\u304c\u5fc5\u8981\u3067\u3059\u3002\n\u3055\u3089\u306b\u3001Amazon.com\u306e\u30a2\u30bd\u30b7\u30a8\u30a4\u30c8\u30bf\u30b0\u3068Amazon.co.jp\u306e\u30a2\u30bd\u30b7\u30a8\u30a4\u30c8\u30bf\u30b0\u304c\u5fc5\u8981\u3067\u3059\u3002\n\uff08Amazon\u6d77\u5916\u8f38\u51fa\u306a\u3069\u306e\u672c\u3092\u53c2\u8003\u306b\u3057\u3066\u3001\u30a2\u30bd\u30b7\u30a8\u30a4\u30c8\u30bf\u30b0\u3092\u5165\u624b\u3057\u3066\u4e0b\u3055\u3044\u3002\uff09\n\nAmazon.com\u3078\u306e\u30a2\u30af\u30bb\u30b9\u306f\uff11\u79d2\u306b\uff11\u56de\u306b\u3057\u3066\u3044\u307e\u3059\u3002\u3068\u304d\u3069\u304d\u6012\u3089\u308c\u308b\u3068\u304d\u304c\u3042\u308b\u306e\u3067\u3001\u305d\u306e\u5834\u5408\u306f\u3001\uff12\u500d\u306e\u6642\u9593Sleep\u3055\u305b\u3066\u304b\u3089\u518d\u5ea6\u30a2\u30af\u30bb\u30b9\u3057\u307e\u3059\u3002\nAmazon.co.jp\u3078\u306e\u30a2\u30af\u30bb\u30b9\u306f\uff15\u79d2\u306b\uff11\u56de\u306b\u3057\u3066\u3044\u307e\u3059\u3002\u3053\u3061\u3089\u3082\u6012\u3089\u308c\u305f\u3089\u3001\uff12\u500d\u306e\u6642\u9593Sleep\u3055\u305b\u3066\u304b\u3089\u518d\u5ea6\u30a2\u30af\u30bb\u30b9\u3057\u307e\u3059\u3002\n\u51fa\u529b\u7d50\u679c\u306f\u3001STDOUT\u306b\u3067\u3066\u304d\u307e\u3059\u3002\n\n\u3042\u3068\u3001wget\u3092\u4f7f\u3063\u3066\u3044\u307e\u3059\u3002\uff08\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0\u304c\u4e0b\u624b\u3067\u3059\u307f\u307e\u305b\u3093\u3002\uff09\n\n\u30d1\u30fc\u30c8\uff12\u306f\u4ee5\u4e0a\u3067\u3059\u3002\n\n```perl:comp_us_jp.pl\n#!/usr/bin/perl -w\n\nuse strict;\nuse warnings;\n\nuse Data::Dumper;\n\nuse RequestSignatureHelper;\nuse LWP::UserAgent;\nuse XML::Simple;\n\nuse constant myAWSId\t    => ''; //AWS\u306eID\u3092\u5165\u308c\u3066\u4e0b\u3055\u3044\nuse constant myAWSSecret    => ''; //AWS\u306e\u79d8\u5bc6\u9375\u3092\u5165\u308c\u3066\u4e0b\u3055\u3044\nuse constant myEndPoint\t    => 'ecs.amazonaws.com';\nuse constant jmyEndPoint\t    => 'webservices.amazon.co.jp';\n\n# see if user provided ItemId on command-line\nmy $itemId = shift @ARGV || 'B00006JNN7';\n\n# Set up the helper\nmy $helper = new RequestSignatureHelper (\n    +RequestSignatureHelper::kAWSAccessKeyId => myAWSId,\n    +RequestSignatureHelper::kAWSSecretKey => myAWSSecret,\n    +RequestSignatureHelper::kEndPoint => myEndPoint,\n);\n\nmy %asin_hash=();\nmy %line_hash=();\n\n#\n# input data\n#\nwhile(my $line = <STDIN> )\n{\n\tchomp( $line );\n       \t(my $asin ) = ($line =~ /([A-Z0-9]{10}).*/);\n\t$line_hash{ $asin } = $line;\n\t$asin_hash{ $asin } = $asin;\n}\n\n#\n# make query lines\n#\nmy %query_lines_hash=();\nmy $asin_counter_per_line = 0;\nmy $query_line = \"\";\n\t\nforeach my $key (keys(%asin_hash))\n{\n\t$query_line = $query_line . \",\" . $key ;\n\t$asin_counter_per_line ++ ;\n\tif($asin_counter_per_line eq 10)\n\t{\n\t\t$query_lines_hash{ $query_line } = $query_line ;\n\t\t$query_line = \"\";\n\t\t$asin_counter_per_line = 0 ;\n\t}\n}\nif( $asin_counter_per_line ne 0 ) \n{\n\t$query_lines_hash{ $query_line } = $query_line ;\n\t$query_line = \"\";\n\t$asin_counter_per_line = 0 ;\n}\n\nmy %rank_hash=();\nmy %price_hash=();\nmy %type_hash=();\nmy %weight_hash=();\nmy %url_hash=();\nmy %offers_url_hash=();\nmy %sutable_price_hash=();\n\nmy $base_sleep_time = 1;\n\nforeach my $key (keys(%query_lines_hash)){\n\tmy $sleep_time = $base_sleep_time ;\n\tmy $error_count = 0;\n\nRETURN_POINT:\n\tmy $request = {\n\t\tService => 'AWSECommerceService',\n\t\tOperation => 'ItemLookup',\n\t\tAssociateTag  => '', //amazon.com\u306e\u30a2\u30bd\u30b7\u30a8\u30a4\u30c8\u30bf\u30b0\u3092\u5165\u308c\u3066\u4e0b\u3055\u3044\n\t\tResponseGroup => 'SalesRank,OfferSummary,OfferFull,ItemAttributes',\n\t\tItemId => $key,\n\t};\n\t\t\n\t# Sign the request\n\tmy $signedRequest = $helper->sign($request);\n\t\n\t# We can use the helper's canonicalize() function to construct the query string too.\n\tmy $queryString = $helper->canonicalize($signedRequest);\n\tmy $url = \"http://\" . myEndPoint . \"/onca/xml?\" . $queryString;\n\t\t\n\tmy $ua = new LWP::UserAgent();\n\tmy $response = $ua->get($url);\n\tmy $content = $response->content();\n\t\t\n\tmy $xmlParser = new XML::Simple();\n\tmy $xml = $xmlParser->XMLin($content,ForceArray=>['Item']);\n\t\t\n\tif( exists $xml->{Items}{Item} && @{ $xml->{Items}{Item} } ) {\n\t\tforeach ( @{ $xml->{Items}{Item} } )\n\t\t{\n\t\t\t#print \"A=\" . $_->{ASIN} . \"\\n\" ;\n\n\t\t\t$rank_hash{ $_->{ASIN} } = $_->{SalesRank} ;\n\t\t\t$price_hash{ $_->{ASIN} } = $_->{OfferSummary}{LowestNewPrice}{Amount};\n\t\t\t$type_hash{ $_->{ASIN} } = $_->{ItemAttributes}{ProductGroup};\n\n\t\t\tif( exists $_->{DetailPageURL} ) {\n\t\t\t\t$url_hash{ $_->{ASIN} } = $_->{DetailPageURL} ;\n\t\t\t}\n\n\t\t\tif( exists $_->{ItemAttributes} ) {\n\t\t\t\tif( exists $_->{ItemAttributes}{PackageDimensions}{Weight}{content}) {\n\t\t\t\t\t$weight_hash{ $_->{ASIN} } = $_->{ItemAttributes}{PackageDimensions}{Weight}{content} ;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif( exists $_->{Offers}{MoreOffersUrl} ) {\n\t\t\t\t$offers_url_hash{ $_->{ASIN} } = $_->{Offers}{MoreOffersUrl} ;\n\t\t\t\t$offers_url_hash{ $_->{ASIN} } =~ s/^http/https/ ;\n\t\t\t\t#print $_->{ASIN} .\"---\". $offers_url_hash{ $_->{ASIN} }.\"\\n\" ;\n\t\t\t}\n\t\t}\n\t}\n\t\t\n\tif ($response->is_success()) {\n\t} else {\n    \t\tmy $error = findError($xml);\n    \t\tif (defined $error) {\n\t\t\tprint STDERR \"Error: \" . $error->{Code} . \": \" . $error->{Message} . \"\\n\";\n\t\t\tif( $error_count > 2 ){ if($error_count eq 3) {print \"DATA_LOST\\n\";} }else\n\t\t\t{ \n\t\t\t\t$error_count++; \n\t\t\t\tprint STDERR \"ERROR_COUNT=$error_count\\n\"; \n\t\t\t\t$sleep_time = $sleep_time * 2; \n\t\t\t\tprint STDERR \"SLEEP_TIME=$sleep_time\\n\";\n\t\t\t\tsleep $sleep_time;\n\t\t\t\tgoto RETURN_POINT ;\n\t\t\t}\n    \t\t} else {\n\t\t\tprint \"Unknown Error!\\n\";\n    \t\t}\n\t}\n\tsleep $sleep_time;\n}\n\n#\n# sutable_price\n#\n\nmy $usd_head = 0;\nmy $usd_tail = 0;\n\nforeach my $key (keys(%offers_url_hash)){\n\t#print $offers_url_hash{ $key } . \"\\n\";\n\tmy $command = \"/usr/local/bin/wget -q -O - \".$offers_url_hash{ $key }.\" | grep 'a-color-price' > aoutwget.html\" ;\n\tsystem($command);\n\t$command = \"/usr/bin/head -n 1 < aoutwget.html > aoutwget_head.html\" ;\n\tsystem($command);\n\t$command = \"/usr/bin/tail -n 1 < aoutwget.html > aoutwget_tail.html\" ;\n\tsystem($command);\n\n\topen(my $fh, \"<\", \"aoutwget_head.html\") or die \"Cannot open aoutwget_head.html\";\n   \twhile(my $line = <$fh>){ \n\t\tchomp $line;\n       \t\t(my $usd_tmp) = ($line =~ /(\\$[\\.0-9]*)/);\n\t\t$usd_tmp =~ s/^.// ;\n\t\t$usd_tmp =~ s/\\.// ;\n\t\t$usd_head = $usd_tmp + 0;\n\t}\n\tclose($fh);\n\topen(   $fh, \"<\", \"aoutwget_tail.html\") or die \"Cannot open aoutwget_tail.html\";\n   \twhile(my $line = <$fh>){ \n\t\tchomp $line;\n       \t\t(my $usd_tmp) = ($line =~ /(\\$[\\.0-9]*)/);\n\t\t$usd_tmp =~ s/^.// ;\n\t\t$usd_tmp =~ s/\\.// ;\n\t\t$usd_tail = $usd_tmp + 0;\n\t}\n\tclose($fh);\n\t$sutable_price_hash{ $key } =int(($usd_head+$usd_tail)/2+0.5);\n}\n\nmy %jrank_hash=();\nmy %jprice_hash=();\nmy %jurl_hash=();\nmy %prime_hash=();\nmy %totalnew_hash=();\n\n\n# Set up the helper\n$helper = new RequestSignatureHelper (\n    +RequestSignatureHelper::kAWSAccessKeyId => myAWSId,\n    +RequestSignatureHelper::kAWSSecretKey => myAWSSecret,\n    +RequestSignatureHelper::kEndPoint => jmyEndPoint,\n);\n\n$base_sleep_time = 5;\n\nforeach my $key (keys(%query_lines_hash)){\n\tmy $sleep_time = $base_sleep_time ;\n\tmy $error_count = 0;\n\nRETURN_POINT2:\n\n\tmy $request = {\n\t\tService => 'AWSECommerceService',\n\t\tOperation => 'ItemLookup',\n\t\tAssociateTag  => '', //amazon.co.jp\u306e\u30a2\u30bd\u30b7\u30a8\u30a4\u30c8\u30bf\u30b0\u3092\u5165\u308c\u3066\u4e0b\u3055\u3044\n\t\tItemId => $key,\n\t\tResponseGroup => 'ItemIds,SalesRank,Offers,OfferSummary,ItemAttributes,Large',\n\t};\n\t\t\n\t# Sign the request\n\tmy $signedRequest = $helper->sign($request);\n\t\n\t# We can use the helper's canonicalize() function to construct the query string too.\n\tmy $queryString = $helper->canonicalize($signedRequest);\n\tmy $url = \"http://\" . jmyEndPoint . \"/onca/xml?\" . $queryString;\n\t\n\tmy $ua = new LWP::UserAgent();\n\tmy $response = $ua->get($url);\n\tmy $content = $response->content();\n\t\n\tmy $xmlParser = new XML::Simple();\n\tmy $xml = $xmlParser->XMLin($content,ForceArray=>['Item']);\n\t\n\tif( exists $xml->{Items}{Item} && @{ $xml->{Items}{Item} } ) {\n\t\tforeach ( @{ $xml->{Items}{Item} } )\n\t\t{\n\t\t\tif( exists $_->{SalesRank} ) {\n\t\t\t\t$jrank_hash{ $_->{ASIN} } = $_->{SalesRank} ;\n\t\t\t}\n\n\t\t\tif( exists $_->{OfferSummary}{LowestNewPrice}{Amount}  )\n\t\t\t{\n\t\t    \t\t$jprice_hash{ $_->{ASIN} } = $_->{OfferSummary}{LowestNewPrice}{Amount} ;\n\t\t\t}\n\t\t\tif( exists $_->{DetailPageURL} ) {\n\t\t\t\t$jurl_hash{ $_->{ASIN} } = $_->{DetailPageURL} ;\n\t\t\t}\n\t\t\tif( exists $_->{Offers}{Offer}  && exists $_->{Offers}{Offer}{OfferListing}{IsEligibleForPrime}  )\n\t\t\t{\n\t\t\t\t$prime_hash{ $_->{ASIN} } = $_->{Offers}{Offer}{OfferListing}{IsEligibleForPrime};\n\t\t\t}\n\t\t\tif( exists $_->{OfferSummary}{TotalNew}  )\n\t\t\t{\n\t\t    \t\t$totalnew_hash{ $_->{ASIN} } = $_->{OfferSummary}{TotalNew} ;\n\t\t\t}\n\t\t}\n\t}\n\t\n\tif ($response->is_success()) {\n\t} else {\n    \t\tmy $error = findError($xml);\n    \t\tif (defined $error) {\n\t\t\tprint STDERR \"Error: \" . $error->{Code} . \": \" . $error->{Message} . \"\\n\";\n\t\t\tif( $error_count > 2 ){ if($error_count eq 3) {print \"DATA_LOST\\n\";} }else\n\t\t\t{ \n\t\t\t\t$error_count++; \n\t\t\t\tprint STDERR \"ERROR_COUNT=$error_count\\n\"; \n\t\t\t\t$sleep_time = $sleep_time * 2; \n\t\t\t\tprint STDERR \"SLEEP_TIME=$sleep_time\\n\";\n\t\t\t\tsleep $sleep_time;\n\t\t\t\tgoto RETURN_POINT2 ;\n\t\t\t}\n    \t\t} else {\n\t\t\tprint \"Unknown Error!\\n\";\n    \t\t}\n\t}\n\tsleep $sleep_time;\n}\n\nmy %diff_hash=();\n\nforeach my $key (keys(%asin_hash)){\n\tif( exists $price_hash{$key} )\n\t{\n\t\t$diff_hash{$key}=$price_hash{$key}-$jprice_hash{$key};\n\t}\n\telse\n\t{\n\t\t$diff_hash{$key}=0-$jprice_hash{$key};\n\t}\n\tprint \"$key\\t$jrank_hash{$key}\\t$jprice_hash{$key}\\t\";\n\tif( exists $rank_hash{$key} ) { print $rank_hash{$key} ; }\n\tprint \"\\t\";\n\tif( exists $price_hash{$key} ) { print $price_hash{$key} ; }\n\tprint \"\\t$jurl_hash{$key}\\t$url_hash{$key}\\t$weight_hash{$key}\\t$diff_hash{$key}\\t$prime_hash{$key}\\t$sutable_price_hash{$key}\\t$totalnew_hash{$key}\\n\";\n}\n\nsub findError {\n    my $xml = shift;\n    \n    return undef unless ref($xml) eq 'HASH';\n\n    if (exists $xml->{Error}) { return $xml->{Error}; };\n\n    for (keys %$xml) {\n\tmy $error = findError($xml->{$_});\n\treturn $error if defined $error;\n    }\n\n    return undef;\n}\n```\n\nPerl\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u7d42\u308f\u308a\n", "tags": ["Perl", "AWS", "Amazon", "XML"]}