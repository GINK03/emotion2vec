{"context": " More than 1 year has passed since last update.\n\nslick\u306e\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb\n\u3053\u3053\u304b\u3089\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\n\n\u3068\u308a\u3042\u3048\u305abuild\nIntelliJ\u3067\u3044\u3058\u308a\u305f\u304b\u3063\u305f\u304b\u3089project/plugins.sbt\u306b\u8a18\u8ff0\u3092\u8ffd\u52a0\n\nplugins.sbt\naddSbtPlugin(\"com.github.mpeltonen\" % \"sbt-idea\" % \"1.6.0\")\n\n\n\u305d\u306e\u5f8c\uff0csbt gen-idea\u3067build\u7d42\u308f\u308a\n\n\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb\nSlick \u306e Documentation\u3092\u7ffb\u8a33\u3057\u305f\u306e\u30ea\u30f3\u30af\u306b\u3042\u3063\u305fSlick3.0.0\u306e\u7ffb\u8a33\u3055\u308c\u305f\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u3092\u898b\u3066\u9032\u3081\u305f\uff0e\n\n\u69cb\u6210\n\n\nDatabase Configration\n\napplication.conf\nh2mem1 = {\n    //url\u3067\u6307\u5b9a\u3057\u305f\u3068\u3053\u306bdb\u306e\u30d5\u30a1\u30a4\u30eb\u304c\u3067\u304d\u308b\n  url = \"jdbc:h2:file:~/Documents/workspace/scalatra/hello-slick-3.0/data\"\n  driver = org.h2.Driver\n  connectionPool = disabled\n  keepAliveConnection = true\n}\n\n\nDB\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u5229\u7528\u3059\u308b\u3068\u304d\u306f\n\nmain/scala/CaseClassMapping.scala\nval db = Database.forConfig(\"h2mem1\")\n  try {\n    Await.result(db.run(DBIO.seq(\n      // create the schema\n      users.schema.create,\n\n      // insert two User instances\n      users += User(\"John Doe\"),\n      users += User(\"Fred Smith\"),\n\n      // print the users (select * from USERS)\n      users.result.map(println)\n    )), Duration.Inf)\n  } finally db.close\n\n\n\u3053\u3093\u306a\u611f\u3058\u3067\u5229\u7528\n\nSchema\n\u30b9\u30ad\u30fc\u30de\u3092\u5b9a\u7fa9\u3059\u308b\uff0e\n\nmain/scala/Tables.scala\nimport slick.driver.H2Driver.api._\nimport slick.lifted.{ProvenShape, ForeignKeyQuery}\n\n// SUPPLIER\u30c6\u30fc\u30d6\u30eb\u306e\u5b9a\u7fa9\nclass Suppliers(tag: Tag)\n  extends Table[(Int, String, String, String, String, String)](tag, \"SUPPLIERS\") {\n\n  // PK\n  def id: Rep[Int] = column[Int](\"SUP_ID\", O.PrimaryKey)\n  def name: Rep[String] = column[String](\"SUP_NAME\")\n  def street: Rep[String] = column[String](\"STREET\")\n  def city: Rep[String] = column[String](\"CITY\")\n  def state: Rep[String] = column[String](\"STATE\")\n  def zip: Rep[String] = column[String](\"ZIP\")\n\n  // \u5168\u3066\u306e\u30c6\u30fc\u30d6\u30eb\u3067\uff0c* \u5c04\u5f71\u3092\u30c6\u30fc\u30d6\u30eb\u306e\u578b\u30d1\u30e9\u30e1\u30fc\u30bf\u306b\u5408\u3046\u3088\u3046\u5b9a\u7fa9\n  def * : ProvenShape[(Int, String, String, String, String, String)] =\n    (id, name, street, city, state, zip)\n}\n\n// COFFEES\u30c6\u30fc\u30d6\u30eb\u306e\u5b9a\u7fa9\nclass Coffees(tag: Tag)\n  extends Table[(String, Int, Double, Int, Int)](tag, \"COFFEES\") {\n\n  def name: Rep[String] = column[String](\"COF_NAME\", O.PrimaryKey)\n  def supID: Rep[Int] = column[Int](\"SUP_ID\")\n  def price: Rep[Double] = column[Double](\"PRICE\")\n  def sales: Rep[Int] = column[Int](\"SALES\")\n  def total: Rep[Int] = column[Int](\"TOTAL\")\n\n  def * : ProvenShape[(String, Int, Double, Int, Int)] =\n    (name, supID, price, sales, total)\n\n  // join\u306a\u3069\u3092\u767a\u884c\u3059\u308b\u969b\u306b\u7528\u3044\u3089\u308c\u308b\u5916\u90e8\u30ad\u30fc\n  def supplier: ForeignKeyQuery[Suppliers, (Int, String, String, String, String, String)] = \n    foreignKey(\"SUP_FK\", supID, TableQuery[Suppliers])(_.id)\n}\n\n\n\u540d\u524d\u306f\u4e00\u822c\u7684\u306bSQL\u5074\u3067\u306f\u5927\u6587\u5b57\u3068\u30a2\u30f3\u30c0\u30fc\u30b9\u30b3\u30a2\u3067\uff0cScala\u5074\u3067\u306f\u30ad\u30e3\u30e1\u30eb\u30b1\u30fc\u30b9\u3067\u8a18\u8ff0\u3055\u308c\u308b\uff0e\n\nDB\u306e\u64cd\u4f5c\n\nmain/scala/HelloSlick.scala\nimport scala.concurrent.{Future, Await}\nimport scala.concurrent.ExecutionContext.Implicits.global\nimport scala.concurrent.duration.Duration\nimport slick.backend.DatabasePublisher\nimport slick.driver.H2Driver.api._\n\n// The main application\nobject HelloSlick extends App {\n  val db = Database.forConfig(\"h2mem1\")\n  try {\n\n    // SUPPLIERS\u30c6\u30fc\u30d6\u30eb\u306b\u5bfe\u3059\u308b\u30af\u30a8\u30ea\u30a4\u30f3\u30bf\u30d5\u30a7\u30fc\u30b9\n    val suppliers: TableQuery[Suppliers] = TableQuery[Suppliers]\n\n    // COFFEES\u30c6\u30fc\u30d6\u30eb\u306b\u5bfe\u3059\u308b\u30af\u30a8\u30ea\u30a4\u30f3\u30bf\u30d5\u30a7\u30fc\u30b9\n    val coffees: TableQuery[Coffees] = TableQuery[Coffees]\n\n    val setupAction: DBIO[Unit] = DBIO.seq(\n      //\u4e3b\u30ad\u30fc\u3084\u5916\u90e8\u30ad\u30fc\u3092\u542b\u3080\u30c6\u30fc\u30d6\u30eb\u3092\u4f5c\u6210\n      (suppliers.schema ++ coffees.schema).create,\n\n      // Insert some suppliers\n      // insert into SUPPLIERS(SUP_ID, SUP_NAME, STREET, CITY, STATE, ZIP) values (?,?,?,?,?,?)\n      suppliers += (101, \"Acme, Inc.\", \"99 Market Street\", \"Groundsville\", \"CA\", \"95199\"),\n      suppliers += ( 49, \"Superior Coffee\", \"1 Party Place\", \"Mendocino\", \"CA\", \"95460\"),\n      suppliers += (150, \"The High Ground\", \"100 Coffee Lane\", \"Meadows\", \"CA\", \"93966\")\n\n\n    )\n\n    val setupFuture: Future[Unit] = db.run(setupAction)\n    val f = setupFuture.flatMap { _ =>\n\n      // Insert some coffees (using JDBC's batch insert feature)\n      val insertAction: DBIO[Option[Int]] = coffees ++= Seq (\n        (\"Colombian\",         101, 7.99, 0, 0),\n        (\"French_Roast\",       49, 8.99, 0, 0),\n        (\"Espresso\",          150, 9.99, 0, 0),\n        (\"Colombian_Decaf\",   101, 8.99, 0, 0),\n        (\"French_Roast_Decaf\", 49, 9.99, 0, 0)\n      )\n     \u30fb\n     \u30fb\n     val setupFuture = db.run(setup)\n\n\n\u9577\u304f\u306a\u308b\u304b\u3089\u5272\u611b\u3057\u305f\u304c\uff0c\u672c\u6765\u306ehello-slick\u306b\u306f\u3053\u306e\u307b\u304b\u306b\u3082update\u6587\u3084\uff0cdelete\u6587\u306a\u3069\u306esample\u304c\u8a18\u8ff0\u3057\u3066\u3042\u308b\uff0e\n\u3082\u3046\u4e00\u5ea6url\u3092\u8f09\u3063\u3051\u308b\u3068\uff0chello-slick-3.0\u3067\u3059\uff0e\n\n\u78ba\u8a8d\n\u672c\u5f53\u306bDB\u306b\u767b\u9332\u3055\u308c\u305f\u306e\u304b\u78ba\u8a8d\u3057\u3066\u307f\u308b\uff0e\nh2\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u3092\u8d77\u52d5\n\u81ea\u5206\u306e\u5834\u5408\u306f/Applications/h2\u306bh2\u3092\u7f6e\u3044\u3066\u3044\u308b\uff0e\ncd /Applications/h2/bin\njava -jar h2*.jar\n\u3067h2DB\u306e\u8d77\u52d5\nMac\u3067H2\u4f7f\u3046\u306e\u8a18\u4e8b\u3092\u53c2\u8003\u306b\uff0c\u8d77\u52d5\u3057\u305f\u5f8c\u306eurl\u3092ip\u30a2\u30c9\u30ec\u30b9\u3067\u306f\u306a\u304f\uff0clocalhost\u3068\u5909\u66f4\u3057\u305f\u3089\u7121\u4e8b\u52d5\u3044\u305f\uff0e\n\u8d77\u52d5\u5f8c\uff0c\u8272\u3005\u805e\u304b\u308c\u308b\u304b\u3089\u5165\u529b\n\n\n\n\u805e\u304b\u308c\u308b\u3053\u3068\n\u8a18\u8ff0(\u8f09\u3063\u3051\u3066\u308b\u30b3\u30fc\u30c9\u306e\u5834\u5408)\n\n\n\n\n\u30c9\u30e9\u30a4\u30d0\u30af\u30e9\u30b9\norg.h2.Driver\n\n\nJDBC URL\njdbc:h2:file:~/Documents/workspace/scalatra/hello-slick-3.0/data\n\n\n\u30e6\u30fc\u30b6\u540d\n\u7a7a\u6b04\u3067ok\n\n\n\u30d1\u30b9\u30ef\u30fc\u30c9\n\u7a7a\u6b04\u3067ok\n\n\n\n\u7121\u4e8b\u30ed\u30b0\u30a4\u30f3\u3067\u304d\u308b\u306f\u305a\uff0e\n\n\u7121\u4e8b\u4e2d\u8eab\u304c\u5165\u3063\u3066\u308b\u3053\u3068\u3092\u78ba\u8a8d\u3067\u304d\u305f\uff0e\n\n## slick\u306e\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb\n[\u3053\u3053](https://www.typesafe.com/activator/template/hello-slick-3.0)\u304b\u3089\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\n\n## \u3068\u308a\u3042\u3048\u305abuild\nIntelliJ\u3067\u3044\u3058\u308a\u305f\u304b\u3063\u305f\u304b\u3089```project/plugins.sbt```\u306b\u8a18\u8ff0\u3092\u8ffd\u52a0\n\n```scala:plugins.sbt\naddSbtPlugin(\"com.github.mpeltonen\" % \"sbt-idea\" % \"1.6.0\")\n```\n\n\u305d\u306e\u5f8c\uff0c```sbt gen-idea```\u3067build\u7d42\u308f\u308a\n\n## \u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb\n[Slick \u306e Documentation\u3092\u7ffb\u8a33\u3057\u305f](http://qiita.com/krrrr38/items/488ffc49a01cca8425f8)\u306e\u30ea\u30f3\u30af\u306b\u3042\u3063\u305fSlick3.0.0\u306e\u7ffb\u8a33\u3055\u308c\u305f\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u3092\u898b\u3066\u9032\u3081\u305f\uff0e\n\n### \u69cb\u6210\n\n![\u30b9\u30af\u30ea\u30fc\u30f3\u30b7\u30e7\u30c3\u30c8 2015-08-26 15.36.24.png](https://qiita-image-store.s3.amazonaws.com/0/84299/89518fe2-cf2f-ccbc-f6d4-c1b8b4e8350d.png \"\u30b9\u30af\u30ea\u30fc\u30f3\u30b7\u30e7\u30c3\u30c8 2015-08-26 15.36.24.png\")\n\n### Database Configration\n\n```scala:application.conf\nh2mem1 = {\n\t//url\u3067\u6307\u5b9a\u3057\u305f\u3068\u3053\u306bdb\u306e\u30d5\u30a1\u30a4\u30eb\u304c\u3067\u304d\u308b\n  url = \"jdbc:h2:file:~/Documents/workspace/scalatra/hello-slick-3.0/data\"\n  driver = org.h2.Driver\n  connectionPool = disabled\n  keepAliveConnection = true\n}\n```\n\nDB\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u5229\u7528\u3059\u308b\u3068\u304d\u306f\n\n```scala:main/scala/CaseClassMapping.scala\nval db = Database.forConfig(\"h2mem1\")\n  try {\n    Await.result(db.run(DBIO.seq(\n      // create the schema\n      users.schema.create,\n\n      // insert two User instances\n      users += User(\"John Doe\"),\n      users += User(\"Fred Smith\"),\n\n      // print the users (select * from USERS)\n      users.result.map(println)\n    )), Duration.Inf)\n  } finally db.close\n```\n\n\u3053\u3093\u306a\u611f\u3058\u3067\u5229\u7528\n\n### Schema\n\u30b9\u30ad\u30fc\u30de\u3092\u5b9a\u7fa9\u3059\u308b\uff0e\n\n```scala:main/scala/Tables.scala\nimport slick.driver.H2Driver.api._\nimport slick.lifted.{ProvenShape, ForeignKeyQuery}\n\n// SUPPLIER\u30c6\u30fc\u30d6\u30eb\u306e\u5b9a\u7fa9\nclass Suppliers(tag: Tag)\n  extends Table[(Int, String, String, String, String, String)](tag, \"SUPPLIERS\") {\n\n  // PK\n  def id: Rep[Int] = column[Int](\"SUP_ID\", O.PrimaryKey)\n  def name: Rep[String] = column[String](\"SUP_NAME\")\n  def street: Rep[String] = column[String](\"STREET\")\n  def city: Rep[String] = column[String](\"CITY\")\n  def state: Rep[String] = column[String](\"STATE\")\n  def zip: Rep[String] = column[String](\"ZIP\")\n  \n  // \u5168\u3066\u306e\u30c6\u30fc\u30d6\u30eb\u3067\uff0c* \u5c04\u5f71\u3092\u30c6\u30fc\u30d6\u30eb\u306e\u578b\u30d1\u30e9\u30e1\u30fc\u30bf\u306b\u5408\u3046\u3088\u3046\u5b9a\u7fa9\n  def * : ProvenShape[(Int, String, String, String, String, String)] =\n    (id, name, street, city, state, zip)\n}\n\n// COFFEES\u30c6\u30fc\u30d6\u30eb\u306e\u5b9a\u7fa9\nclass Coffees(tag: Tag)\n  extends Table[(String, Int, Double, Int, Int)](tag, \"COFFEES\") {\n\n  def name: Rep[String] = column[String](\"COF_NAME\", O.PrimaryKey)\n  def supID: Rep[Int] = column[Int](\"SUP_ID\")\n  def price: Rep[Double] = column[Double](\"PRICE\")\n  def sales: Rep[Int] = column[Int](\"SALES\")\n  def total: Rep[Int] = column[Int](\"TOTAL\")\n  \n  def * : ProvenShape[(String, Int, Double, Int, Int)] =\n    (name, supID, price, sales, total)\n  \n  // join\u306a\u3069\u3092\u767a\u884c\u3059\u308b\u969b\u306b\u7528\u3044\u3089\u308c\u308b\u5916\u90e8\u30ad\u30fc\n  def supplier: ForeignKeyQuery[Suppliers, (Int, String, String, String, String, String)] = \n    foreignKey(\"SUP_FK\", supID, TableQuery[Suppliers])(_.id)\n}\n```\n\n\u540d\u524d\u306f\u4e00\u822c\u7684\u306bSQL\u5074\u3067\u306f\u5927\u6587\u5b57\u3068\u30a2\u30f3\u30c0\u30fc\u30b9\u30b3\u30a2\u3067\uff0cScala\u5074\u3067\u306f\u30ad\u30e3\u30e1\u30eb\u30b1\u30fc\u30b9\u3067\u8a18\u8ff0\u3055\u308c\u308b\uff0e\n\n###DB\u306e\u64cd\u4f5c\n\n```main/scala/HelloSlick.scala\nimport scala.concurrent.{Future, Await}\nimport scala.concurrent.ExecutionContext.Implicits.global\nimport scala.concurrent.duration.Duration\nimport slick.backend.DatabasePublisher\nimport slick.driver.H2Driver.api._\n\n// The main application\nobject HelloSlick extends App {\n  val db = Database.forConfig(\"h2mem1\")\n  try {\n\n    // SUPPLIERS\u30c6\u30fc\u30d6\u30eb\u306b\u5bfe\u3059\u308b\u30af\u30a8\u30ea\u30a4\u30f3\u30bf\u30d5\u30a7\u30fc\u30b9\n    val suppliers: TableQuery[Suppliers] = TableQuery[Suppliers]\n\n    // COFFEES\u30c6\u30fc\u30d6\u30eb\u306b\u5bfe\u3059\u308b\u30af\u30a8\u30ea\u30a4\u30f3\u30bf\u30d5\u30a7\u30fc\u30b9\n    val coffees: TableQuery[Coffees] = TableQuery[Coffees]\n\n    val setupAction: DBIO[Unit] = DBIO.seq(\n      //\u4e3b\u30ad\u30fc\u3084\u5916\u90e8\u30ad\u30fc\u3092\u542b\u3080\u30c6\u30fc\u30d6\u30eb\u3092\u4f5c\u6210\n      (suppliers.schema ++ coffees.schema).create,\n\n      // Insert some suppliers\n      // insert into SUPPLIERS(SUP_ID, SUP_NAME, STREET, CITY, STATE, ZIP) values (?,?,?,?,?,?)\n      suppliers += (101, \"Acme, Inc.\", \"99 Market Street\", \"Groundsville\", \"CA\", \"95199\"),\n      suppliers += ( 49, \"Superior Coffee\", \"1 Party Place\", \"Mendocino\", \"CA\", \"95460\"),\n      suppliers += (150, \"The High Ground\", \"100 Coffee Lane\", \"Meadows\", \"CA\", \"93966\")\n\n\n    )\n\n    val setupFuture: Future[Unit] = db.run(setupAction)\n    val f = setupFuture.flatMap { _ =>\n\n      // Insert some coffees (using JDBC's batch insert feature)\n      val insertAction: DBIO[Option[Int]] = coffees ++= Seq (\n        (\"Colombian\",         101, 7.99, 0, 0),\n        (\"French_Roast\",       49, 8.99, 0, 0),\n        (\"Espresso\",          150, 9.99, 0, 0),\n        (\"Colombian_Decaf\",   101, 8.99, 0, 0),\n        (\"French_Roast_Decaf\", 49, 9.99, 0, 0)\n      )\n     \u30fb\n     \u30fb\n     val setupFuture = db.run(setup)\n```\n\n\u9577\u304f\u306a\u308b\u304b\u3089\u5272\u611b\u3057\u305f\u304c\uff0c\u672c\u6765\u306ehello-slick\u306b\u306f\u3053\u306e\u307b\u304b\u306b\u3082update\u6587\u3084\uff0cdelete\u6587\u306a\u3069\u306esample\u304c\u8a18\u8ff0\u3057\u3066\u3042\u308b\uff0e\n\n\u3082\u3046\u4e00\u5ea6url\u3092\u8f09\u3063\u3051\u308b\u3068\uff0c[hello-slick-3.0](https://www.typesafe.com/activator/template/hello-slick-3.0)\u3067\u3059\uff0e\n\n### \u78ba\u8a8d\n\u672c\u5f53\u306bDB\u306b\u767b\u9332\u3055\u308c\u305f\u306e\u304b\u78ba\u8a8d\u3057\u3066\u307f\u308b\uff0e\n\nh2\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u3092\u8d77\u52d5\n\n\u81ea\u5206\u306e\u5834\u5408\u306f```/Applications/h2```\u306bh2\u3092\u7f6e\u3044\u3066\u3044\u308b\uff0e\n\n```cd /Applications/h2/bin```\n```java -jar h2*.jar```\n\n\u3067h2DB\u306e\u8d77\u52d5\n\n[Mac\u3067H2\u4f7f\u3046](http://qiita.com/kijitoraneko/items/eb525f673c54abbb505e)\u306e\u8a18\u4e8b\u3092\u53c2\u8003\u306b\uff0c\u8d77\u52d5\u3057\u305f\u5f8c\u306eurl\u3092ip\u30a2\u30c9\u30ec\u30b9\u3067\u306f\u306a\u304f\uff0clocalhost\u3068\u5909\u66f4\u3057\u305f\u3089\u7121\u4e8b\u52d5\u3044\u305f\uff0e\n\n\u8d77\u52d5\u5f8c\uff0c\u8272\u3005\u805e\u304b\u308c\u308b\u304b\u3089\u5165\u529b\n\n|\u805e\u304b\u308c\u308b\u3053\u3068|\u8a18\u8ff0(\u8f09\u3063\u3051\u3066\u308b\u30b3\u30fc\u30c9\u306e\u5834\u5408)|\n|:---:|:---:|\n|\u30c9\u30e9\u30a4\u30d0\u30af\u30e9\u30b9|org.h2.Driver|\n|JDBC URL|jdbc:h2:file:~/Documents/workspace/scalatra/hello-slick-3.0/data|\n|\u30e6\u30fc\u30b6\u540d|\u7a7a\u6b04\u3067ok|\n|\u30d1\u30b9\u30ef\u30fc\u30c9|\u7a7a\u6b04\u3067ok|\n\n\u7121\u4e8b\u30ed\u30b0\u30a4\u30f3\u3067\u304d\u308b\u306f\u305a\uff0e\n\n\n![\u30b9\u30af\u30ea\u30fc\u30f3\u30b7\u30e7\u30c3\u30c8 2015-08-26 18.43.17.png](https://qiita-image-store.s3.amazonaws.com/0/84299/946a6439-2fa6-6f08-207f-c6d725e79e2d.png \"\u30b9\u30af\u30ea\u30fc\u30f3\u30b7\u30e7\u30c3\u30c8 2015-08-26 18.43.17.png\")\n\n\u7121\u4e8b\u4e2d\u8eab\u304c\u5165\u3063\u3066\u308b\u3053\u3068\u3092\u78ba\u8a8d\u3067\u304d\u305f\uff0e\n\n", "tags": ["h2", "Scala", "slick"]}