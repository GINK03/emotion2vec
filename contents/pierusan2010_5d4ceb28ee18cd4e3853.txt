{"context": " More than 1 year has passed since last update.\n\nPasswordBox \u30b3\u30f3\u30c8\u30ed\u30fc\u30eb\u306ePassword\u30d7\u30ed\u30d1\u30c6\u30a3\u306b\u30d0\u30a4\u30f3\u30c9\u3067\u304d\u306a\u3044\n\u2015\u306e\u306f\u3001\u4ed5\u69d8\u3067\u3059\u3002\n\nPassword\u30d7\u30ed\u30d1\u30c6\u30a3\u306b\u306f\u30bb\u30ad\u30e5\u30ea\u30c6\u30a3\u30ea\u30b9\u30af\u304c\u3042\u308b\u306e\u3067SecurePassword\u30d7\u30ed\u30d1\u30c6\u30a3\u3092\u4f7f\u3044\u307e\u3057\u3087\u3046(MSDN\u3088\u308aSecurePassword\u30d7\u30ed\u30d1\u30c6\u30a3\u3001SecureString )\nPassword\u30d7\u30ed\u30d1\u30c6\u30a3\u304c\u30d1\u30a4\u30f3\u30c9\u3067\u304d\u306a\u3044\u306e\u306f\u3001\u3053\u306e\u8fba\u308a\u306b\u7406\u7531\u304c\u3042\u308a\u305d\u3046\u3067\u3059\u304c\u3001\u3061\u3087\u3063\u3068\u4e0d\u4fbf\u3067\u3059\u3002\nMVVM\u30e9\u30a4\u30d6\u30e9\u30ea\u306eLivet \u3092\u4f7f\u3048\u3070\u30d0\u30a4\u30f3\u30c9\u3067\u304d\u307e\u3059\u3057(PasswordBoxBindingSupportBehavior)\u3001\u4ed6\u306b\u3082\u300cPasswordBox Password \u30d0\u30a4\u30f3\u30c9\u300d\u7b49\u3067\u30b0\u30b0\u308c\u3070\u30d0\u30a4\u30f3\u30c9\u3059\u308b\u65b9\u6cd5\u306f\u3059\u3050\u306b\u8abf\u3079\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\n\n\u3067\u3082\u3001\u305b\u3063\u304b\u304f\u3060\u304b\u3089SecurePassword\u3092\u30bb\u30ad\u30e5\u30a2\u306e\u307e\u307e\u30d0\u30a4\u30f3\u30c9\u3057\u305f\u3044\n\u3068\u3044\u3046\u3053\u3068\u3067\u3001SecurePassword\u3092\u30d0\u30a4\u30f3\u30c9\u53ef\u80fd\u306a\u30d3\u30d8\u30a4\u30d3\u30a2\u3092\u4f5c\u3063\u3066\u307f\u307e\u3057\u305f\u3002\n\nSecureString\u306e\u6271\u3044\n\u307e\u305a\u3001\u6e96\u5099\u6bb5\u968e\u3068\u3057\u3066\u6271\u3044\u306e\u9762\u5012\u306aSecureString\u3092\u64cd\u4f5c\u3059\u308b\u62e1\u5f35\u30e1\u30bd\u30c3\u30c9\u3092\u4f5c\u308a\u307e\u3059\u3002 \nSecureString\u306e\u89e3\u8aac \u306b\u3042\u308b\u3088\u3046\u306b\u3001SecureStrng\u306f\u3001System.Runtime.InteropServices.Marshal\u30af\u30e9\u30b9\u306e\u30e1\u30bd\u30c3\u30c9\u3092\u4f7f\u3063\u3066\u6587\u5b57\u5217\u3092\u30a2\u30f3\u30de\u30cd\u30fc\u30b8\u30c9\u30e1\u30e2\u30ea\u306b\u5c55\u958b\u3057\u3066\u6271\u3046\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002  \n\nSecureString\u306e\u6bd4\u8f03\npublic static class SecureStringEx\n{\n    public static bool Equals(this SecureString a, SecureString b)\n    {\n        if (a == null && b == null)\n         { return true; }\n\n        if (a == null || b == null)\n        { return false; }\n\n        if (a.Length != b.Length)\n        { return false; }\n\n        var aPtr = Marshal.SecureStringToBSTR(a);\n        var bPtr = Marshal.SecureStringToBSTR(b);\n        try\n        {\n            return Enumerable.Range(0, a.Length)\n              .All(i => Marshal.ReadInt16(aPtr, i) == Marshal.ReadInt16(bPtr, i));\n        }\n        finally\n        {\n            Marshal.ZeroFreeBSTR(aPtr);\n            Marshal.ZeroFreeBSTR(bPtr);\n        }\n    }\n}\n\n\n\u6bd4\u8f03\u3059\u308bSecureString\u306e\u6587\u5b57\u5217\u3092\u30a2\u30f3\u30de\u30cd\u30fc\u30b8\u30c9\u306a\u9818\u57df\u306bBSTR\u3068\u3057\u3066\u30b3\u30d4\u30fc\u3057\u307e\u3059\u3002\nSecureString\u304b\u3089\u6587\u5b57\u5217\u3092\u53d6\u5f97\u3059\u308b\u306b\u306fMarshal.SecureStringToBSTR()\u30e1\u30bd\u30c3\u30c9\u3092\u4f7f\u7528\u3057\u307e\u3059\u3002\u3053\u306e\u30e1\u30bd\u30c3\u30c9\u306e\u623b\u308a\u5024\u306f\u3001\u30a2\u30f3\u30de\u30cd\u30fc\u30b8\u9818\u57df\u306b\u30b3\u30d4\u30fc\u3057\u305fBSTR\u306e\u5148\u982d\u6587\u5b57\u3092\u6307\u3059\u30dd\u30a4\u30f3\u30bf\u3067\u3059\u3002\n\u6b21\u306b\u3001Marshal.ReadInt16()\u30e1\u30bd\u30c3\u30c9\u3092\u4f7f\u3063\u3066BSTR\u304b\u30892Byte(Char\u30aa\u30d6\u30b8\u30a7\u30af\u30c81\u3064\u5206\u306b\u76f8\u5f53)\u305a\u3064\u8aad\u307f\u3060\u3057\u3066\u6bd4\u8f03\u3057\u307e\u3059\u3002\n\u6587\u5b57\u6570\u306fSecureString.Length\u3067\u53d6\u5f97\u3057\u307e\u3059(Length=Char\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u6570)\nBSTR\u306f\u7528\u304c\u6e08\u3093\u3060\u3089Marshal.ZeroFreeBSTR\u3092\u4f7f\u3063\u30660\u3067\u4e0a\u66f8\u304d\u3057\u305f\u3046\u3048\u3067\u30a2\u30f3\u30de\u30cd\u30fc\u30b8\u30c9\u30e1\u30e2\u30ea\u3092\u89e3\u653e\u3057\u307e\u3059\n\n\nBSTR\u306e\u6587\u5b57\u5217\u3092SecureString\u306b\u30b3\u30d4\u30fc\npublic static class SecureStringEx\n{\n    public static void CopyFromBSTR(this SecureString self, IntPtr bstr, int count)\n    {\n        self.Clear();\n        var chars = Enumerable.Range(0, count)\n            .Select(i => (char)Marshal.ReadInt16(bstr, i * 2));\n        foreach (var c in chars)\n        {\n            self.AppendChar(c);\n        }\n    }\n}\n\n\n\u30b3\u30d4\u30fc\u5143\u306eSecureString\u304b\u3089Marshal.SecureStringToBSTR()\u3067\u53d6\u5f97\u3057\u305fBSTR\u3092\u30d1\u30e9\u30e1\u30fc\u30bf\u3068\u3057\u3066\u6e21\u3057\u307e\u3059\u3002\n\u30b3\u30d4\u30fc\u5148\u306eSecureString\u3078\u306f\u4e00\u65e6Clear\u3067\u7a7a\u306b\u3057\u305f\u5f8c\u3001AppendChar()\u30e1\u30bd\u30c3\u30c9\u30671\u6587\u5b57\u305a\u3064\u8ffd\u52a0\u3057\u3066\u3044\u304d\u307e\u3059\u3002\n\u8ffd\u52a0\u3059\u308b\u6587\u5b57\u306f\u30b3\u30d4\u30fc\u5143BSTR\u304b\u3089Marshal.ReadInt16()\u30672Byte\u305a\u3064\u53d6\u308a\u51fa\u3057\u305fChar\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3067\u3059\u3002\n\u5f15\u6570\u306b\u6e21\u3057\u305fBSTR\u306f\u3001\u7528\u304c\u6e08\u3093\u3060\u3089Marshal.ZeroFreeBSTR()\u3067\u304d\u308c\u3044\u306b\u3057\u3066\u304a\u304d\u307e\u3057\u3087\u3046\u3002\n\n\nSecurePassword\u3092\u30d0\u30a4\u30f3\u30c9\u53ef\u80fd\u306b\u3059\u308bBehavior\nusing System.Runtime.InteropServices;\nusing System.Security;\nusing System.Windows;\nusing System.Windows.Controls;\nusing System.Windows.Interactivity;\n\npublic class SecurePasswordBindingBehavior : Behavior<PasswordBox>\n{\n    public SecureString SecurePassword\n    {\n        get { return (SecureString)GetValue(SecurePasswordProperty); }\n        set { SetValue(SecurePasswordProperty, value); }\n    }\n\n    public static readonly DependencyProperty SecurePasswordProperty =\n        DependencyProperty.Register(\"SecurePassword\", \n        typeof(SecureString), \n        typeof(SecurePasswordBindingBehavior), \n        new PropertyMetadata(new SecureString(), SecurePasswordPropertyChanged));\n\n    private static void SecurePasswordPropertyChanged(DependencyObject d, \n        DependencyPropertyChangedEventArgs e)\n    {\n        var behavior = d as SecurePasswordBindingBehavior;\n        if (d == null)\n        { return; }\n\n        var passwordBox = behavior.AssociatedObject as PasswordBox;\n        if (passwordBox == null)\n        { return; }\n\n        var newPassword = e.NewValue as SecureString;\n        if (newPassword == null)\n        { return; }\n\n        var oldPassword = e.OldValue as SecureString;\n        if (newPassword.Equals(oldPassword))\n        { return; }\n\n        var bstr = Marshal.SecureStringToBSTR(newPassword);\n        try\n        {\n            passwordBox.SecurePassword.CopyFromBSTR(bstr, newPassword.Length);\n        }\n        finally\n        {\n            Marshal.ZeroFreeBSTR(bstr);\n        }\n    }\n\n    protected override void OnAttached()\n    {\n        base.OnAttached();\n        AssociatedObject.PasswordChanged += PasswordBox_PasswordChanged;\n    }\n\n    protected override void OnDetaching()\n    {\n        AssociatedObject.PasswordChanged -= PasswordBox_PasswordChanged;\n        base.OnDetaching();\n    }\n\n    private void PasswordBox_PasswordChanged(object sender, RoutedEventArgs e)\n    {\n        SecurePassword = AssociatedObject.SecurePassword.Copy();\n    }\n}\n\n\nBehavior<PasswordBox>\u3092\u7d99\u627f\u3057\u305f\u30af\u30e9\u30b9\u3092\u4f5c\u308a\u307e\u3059\u3002\n\u3053\u306e\u30af\u30e9\u30b9\u306b\u3001\u30d0\u30a4\u30f3\u30c9\u5bfe\u8c61\u3068\u306a\u308bSecurePassword\u30d7\u30ed\u30d1\u30c6\u30a3\u3092\u4f9d\u5b58\u95a2\u4fc2\u30d7\u30ed\u30d1\u30c6\u30a3\u3068\u3057\u3066\u8ffd\u52a0\u3057\u307e\u3059\u3002\nBehavior\u306b\u95a2\u9023\u4ed8\u3051\u305fPasswordBox\u306ePasswordChanged\u30a4\u30d9\u30f3\u30c8\u306b\u30cf\u30f3\u30c9\u30e9\u3092\u8ffd\u52a0\u3057\u307e\u3059\u3002\nPasswordBox_PasswordChanged()\u30cf\u30f3\u30c9\u30e9\u3067\u306f\u3001\u4f9d\u5b58\u95a2\u4fc2\u30d7\u30ed\u30d1\u30c6\u30a3\u306bPawordBox\u306eSecurePassword\u306e\u5024\u3092\u30b3\u30d4\u30fc\u3057\u307e\u3059\u3002\u3053\u3053\u3067\u306fCopy()\u30e1\u30bd\u30c3\u30c9\u306e\u7d50\u679c\u3092\u305d\u306e\u307e\u307e\u4ee3\u5165\u3057\u3066\u3044\u307e\u3059\u3002\nSecurePasswordPropertyChanged()\u30e1\u30bd\u30c3\u30c9\u306f\u3001\u4f9d\u5b58\u95a2\u4fc2\u30d7\u30ed\u30d1\u30c6\u30a3(\u30d0\u30a4\u30f3\u30c7\u30a3\u30f3\u30b0\u30bd\u30fc\u30b9\u5074)\u306e\u66f4\u65b0\u6642\u306b\u547c\u3070\u308c\u307e\u3059\u3002\n\u3053\u3053\u3067\u3001\u6e96\u5099\u3057\u3066\u304a\u3044\u305f\u62e1\u5f35\u30e1\u30bd\u30c3\u30c9\u3092\u4f7f\u3063\u3066PasswordBox\u5074\u306eSecurePassword\u30d7\u30ed\u30d1\u30c6\u30a3\u3092\u66f4\u65b0\u3057\u307e\u3059\u3002\n\u66f4\u65b0\u524d\u306e\u5024\u3068\u6bd4\u8f03\u3057\u3066(SecureStringEx.Equals())\u5909\u5316\u304c\u3042\u3063\u305f\u5834\u5408\u306e\u307f\u3001PasswordBox\u306eSecurePassword\u30d7\u30ed\u30d1\u30c6\u30a3\u306b\u66f4\u65b0\u5f8c\u306e\u5024\u3092\u30b3\u30d4\u30fc\u3057\u307e\u3059(SecureStringEx.CopyFromBSTR())\u3002\n\n\nXAML\u3067\u306e\u4f7f\u7528\u4f8b\n<Window\n        xmlns=\"http://schemas.microsoft.com/winfx/2006/xaml/presentation\"\n        xmlns:x=\"http://schemas.microsoft.com/winfx/2006/xaml\"\n        xmlns:i=\"http://schemas.microsoft.com/expression/2010/interactivity\"\n        Title=\"Input Password\" Height=\"420\" Width=\"800\">\n    <Grid>\n        <PasswordBox Width=\"120\" PasswordChar=\"*\">\n            <i:Interaction.Behaviors>\n                <my:SecurePasswordBindingBehavior \n                   SecurePassword=\"{Binding SecurePassword, Mode=TwoWay}\"/>\n             </i:Interaction.Behaviors>\n        </PasswordBox>\n    </Grid>\n</Window>\n\n\n\u3055\u3044\u3054\u306b\nPasswoerdBox\u306b\u5165\u529b\u3055\u308c\u305f\u30d1\u30b9\u30ef\u30fc\u30c9\u3068\u30a2\u30d7\u30ea\u5074\u3067\u4fdd\u7ba1\u3057\u3066\u3044\u308b\u30d1\u30b9\u30ef\u30fc\u30c9\u3068\u306e\u6bd4\u8f03\u306b\u3082\u3001\u4eca\u56de\u4f5c\u6210\u3057\u305f\u6bd4\u8f03\u306e\u62e1\u5f35\u30e1\u30bd\u30c3\u30c9\u304c\u4f7f\u3048\u308b\u3068\u601d\u3044\u307e\u3059\u3002\n\u305f\u3060\u3001\u30a2\u30d7\u30ea\u5074\u3067\u4fdd\u7ba1\u3057\u3066\u3044\u308b\u30d1\u30b9\u30ef\u30fc\u30c9\u3092\u4fdd\u7ba1\u5148\u304b\u3089\u53d6\u308a\u51fa\u3057\u3066\u5e73\u6587\u3067\u6271\u3046\u969b\u306b\u3001\u30de\u30cd\u30fc\u30b8\u30c9\u306a\u9818\u57df\u306b\u4fdd\u6301\u3057\u3066\u3057\u307e\u3046\u3068\u610f\u5473\u304c\u7121\u3044\u306e\u3067\u3001\u3053\u3061\u3089\u306e\u51e6\u7406\u306b\u3082\u6c17\u3092\u9063\u3046\u5fc5\u8981\u304c\u3042\u308a\u305d\u3046\u3067\u3059\u3002\n### PasswordBox \u30b3\u30f3\u30c8\u30ed\u30fc\u30eb\u306ePassword\u30d7\u30ed\u30d1\u30c6\u30a3\u306b\u30d0\u30a4\u30f3\u30c9\u3067\u304d\u306a\u3044 ###\n\u2015\u306e\u306f\u3001\u4ed5\u69d8\u3067\u3059\u3002\n\n- Password\u30d7\u30ed\u30d1\u30c6\u30a3\u306b\u306f\u30bb\u30ad\u30e5\u30ea\u30c6\u30a3\u30ea\u30b9\u30af\u304c\u3042\u308b\u306e\u3067SecurePassword\u30d7\u30ed\u30d1\u30c6\u30a3\u3092\u4f7f\u3044\u307e\u3057\u3087\u3046(MSDN\u3088\u308a[SecurePassword\u30d7\u30ed\u30d1\u30c6\u30a3](http://msdn.microsoft.com/ja-jp/library/system.windows.controls.passwordbox.securepassword.aspx)\u3001[SecureString](http://msdn.microsoft.com/ja-jp/library/system.security.securestring.aspx) )\n- Password\u30d7\u30ed\u30d1\u30c6\u30a3\u304c\u30d1\u30a4\u30f3\u30c9\u3067\u304d\u306a\u3044\u306e\u306f\u3001\u3053\u306e\u8fba\u308a\u306b\u7406\u7531\u304c\u3042\u308a\u305d\u3046\u3067\u3059\u304c\u3001\u3061\u3087\u3063\u3068\u4e0d\u4fbf\u3067\u3059\u3002\n- MVVM\u30e9\u30a4\u30d6\u30e9\u30ea\u306e[Livet](http://ugaya40.net/livet) \u3092\u4f7f\u3048\u3070\u30d0\u30a4\u30f3\u30c9\u3067\u304d\u307e\u3059\u3057(PasswordBoxBindingSupportBehavior)\u3001\u4ed6\u306b\u3082\u300cPasswordBox Password \u30d0\u30a4\u30f3\u30c9\u300d\u7b49\u3067\u30b0\u30b0\u308c\u3070\u30d0\u30a4\u30f3\u30c9\u3059\u308b\u65b9\u6cd5\u306f\u3059\u3050\u306b\u8abf\u3079\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\n### \u3067\u3082\u3001\u305b\u3063\u304b\u304f\u3060\u304b\u3089SecurePassword\u3092\u30bb\u30ad\u30e5\u30a2\u306e\u307e\u307e\u30d0\u30a4\u30f3\u30c9\u3057\u305f\u3044 ###\n\u3068\u3044\u3046\u3053\u3068\u3067\u3001SecurePassword\u3092\u30d0\u30a4\u30f3\u30c9\u53ef\u80fd\u306a\u30d3\u30d8\u30a4\u30d3\u30a2\u3092\u4f5c\u3063\u3066\u307f\u307e\u3057\u305f\u3002\n\n#### SecureString\u306e\u6271\u3044####\n\u307e\u305a\u3001\u6e96\u5099\u6bb5\u968e\u3068\u3057\u3066\u6271\u3044\u306e\u9762\u5012\u306aSecureString\u3092\u64cd\u4f5c\u3059\u308b\u62e1\u5f35\u30e1\u30bd\u30c3\u30c9\u3092\u4f5c\u308a\u307e\u3059\u3002 \n\n[SecureString\u306e\u89e3\u8aac](http://msdn.microsoft.com/ja-jp/library/system.security.securestring.aspx) \u306b\u3042\u308b\u3088\u3046\u306b\u3001SecureStrng\u306f\u3001[System.Runtime.InteropServices.Marshal]()\u30af\u30e9\u30b9\u306e\u30e1\u30bd\u30c3\u30c9\u3092\u4f7f\u3063\u3066\u6587\u5b57\u5217\u3092\u30a2\u30f3\u30de\u30cd\u30fc\u30b8\u30c9\u30e1\u30e2\u30ea\u306b\u5c55\u958b\u3057\u3066\u6271\u3046\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002  \n  \n##### SecureString\u306e\u6bd4\u8f03 #####\n\n```csharp\npublic static class SecureStringEx\n{\n    public static bool Equals(this SecureString a, SecureString b)\n    {\n        if (a == null && b == null)\n         { return true; }\n\n        if (a == null || b == null)\n        { return false; }\n\n        if (a.Length != b.Length)\n        { return false; }\n\n        var aPtr = Marshal.SecureStringToBSTR(a);\n        var bPtr = Marshal.SecureStringToBSTR(b);\n        try\n        {\n            return Enumerable.Range(0, a.Length)\n              .All(i => Marshal.ReadInt16(aPtr, i) == Marshal.ReadInt16(bPtr, i));\n        }\n        finally\n        {\n            Marshal.ZeroFreeBSTR(aPtr);\n            Marshal.ZeroFreeBSTR(bPtr);\n        }\n    }\n}\n```\n\n- \u6bd4\u8f03\u3059\u308bSecureString\u306e\u6587\u5b57\u5217\u3092\u30a2\u30f3\u30de\u30cd\u30fc\u30b8\u30c9\u306a\u9818\u57df\u306bBSTR\u3068\u3057\u3066\u30b3\u30d4\u30fc\u3057\u307e\u3059\u3002\n- SecureString\u304b\u3089\u6587\u5b57\u5217\u3092\u53d6\u5f97\u3059\u308b\u306b\u306fMarshal.SecureStringToBSTR()\u30e1\u30bd\u30c3\u30c9\u3092\u4f7f\u7528\u3057\u307e\u3059\u3002\u3053\u306e\u30e1\u30bd\u30c3\u30c9\u306e\u623b\u308a\u5024\u306f\u3001\u30a2\u30f3\u30de\u30cd\u30fc\u30b8\u9818\u57df\u306b\u30b3\u30d4\u30fc\u3057\u305fBSTR\u306e\u5148\u982d\u6587\u5b57\u3092\u6307\u3059\u30dd\u30a4\u30f3\u30bf\u3067\u3059\u3002\n- \u6b21\u306b\u3001Marshal.ReadInt16()\u30e1\u30bd\u30c3\u30c9\u3092\u4f7f\u3063\u3066BSTR\u304b\u30892Byte(Char\u30aa\u30d6\u30b8\u30a7\u30af\u30c81\u3064\u5206\u306b\u76f8\u5f53)\u305a\u3064\u8aad\u307f\u3060\u3057\u3066\u6bd4\u8f03\u3057\u307e\u3059\u3002\n- \u6587\u5b57\u6570\u306fSecureString.Length\u3067\u53d6\u5f97\u3057\u307e\u3059(Length=Char\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u6570)\n- BSTR\u306f\u7528\u304c\u6e08\u3093\u3060\u3089Marshal.ZeroFreeBSTR\u3092\u4f7f\u3063\u30660\u3067\u4e0a\u66f8\u304d\u3057\u305f\u3046\u3048\u3067\u30a2\u30f3\u30de\u30cd\u30fc\u30b8\u30c9\u30e1\u30e2\u30ea\u3092\u89e3\u653e\u3057\u307e\u3059\n\n##### BSTR\u306e\u6587\u5b57\u5217\u3092SecureString\u306b\u30b3\u30d4\u30fc #####\n\n```csharp\npublic static class SecureStringEx\n{\n    public static void CopyFromBSTR(this SecureString self, IntPtr bstr, int count)\n    {\n        self.Clear();\n        var chars = Enumerable.Range(0, count)\n            .Select(i => (char)Marshal.ReadInt16(bstr, i * 2));\n        foreach (var c in chars)\n        {\n            self.AppendChar(c);\n        }\n    }\n}\n```\n- \u30b3\u30d4\u30fc\u5143\u306eSecureString\u304b\u3089Marshal.SecureStringToBSTR()\u3067\u53d6\u5f97\u3057\u305fBSTR\u3092\u30d1\u30e9\u30e1\u30fc\u30bf\u3068\u3057\u3066\u6e21\u3057\u307e\u3059\u3002\n- \u30b3\u30d4\u30fc\u5148\u306eSecureString\u3078\u306f\u4e00\u65e6Clear\u3067\u7a7a\u306b\u3057\u305f\u5f8c\u3001AppendChar()\u30e1\u30bd\u30c3\u30c9\u30671\u6587\u5b57\u305a\u3064\u8ffd\u52a0\u3057\u3066\u3044\u304d\u307e\u3059\u3002\n- \u8ffd\u52a0\u3059\u308b\u6587\u5b57\u306f\u30b3\u30d4\u30fc\u5143BSTR\u304b\u3089Marshal.ReadInt16()\u30672Byte\u305a\u3064\u53d6\u308a\u51fa\u3057\u305fChar\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3067\u3059\u3002\n- \u5f15\u6570\u306b\u6e21\u3057\u305fBSTR\u306f\u3001\u7528\u304c\u6e08\u3093\u3060\u3089Marshal.ZeroFreeBSTR()\u3067\u304d\u308c\u3044\u306b\u3057\u3066\u304a\u304d\u307e\u3057\u3087\u3046\u3002\n\n##### SecurePassword\u3092\u30d0\u30a4\u30f3\u30c9\u53ef\u80fd\u306b\u3059\u308bBehavior #####\n\n```csharp\nusing System.Runtime.InteropServices;\nusing System.Security;\nusing System.Windows;\nusing System.Windows.Controls;\nusing System.Windows.Interactivity;\n\npublic class SecurePasswordBindingBehavior : Behavior<PasswordBox>\n{\n    public SecureString SecurePassword\n    {\n        get { return (SecureString)GetValue(SecurePasswordProperty); }\n        set { SetValue(SecurePasswordProperty, value); }\n    }\n    \n    public static readonly DependencyProperty SecurePasswordProperty =\n        DependencyProperty.Register(\"SecurePassword\", \n        typeof(SecureString), \n        typeof(SecurePasswordBindingBehavior), \n        new PropertyMetadata(new SecureString(), SecurePasswordPropertyChanged));\n       \n    private static void SecurePasswordPropertyChanged(DependencyObject d, \n        DependencyPropertyChangedEventArgs e)\n    {\n        var behavior = d as SecurePasswordBindingBehavior;\n        if (d == null)\n        { return; }\n\n        var passwordBox = behavior.AssociatedObject as PasswordBox;\n        if (passwordBox == null)\n        { return; }\n\n        var newPassword = e.NewValue as SecureString;\n        if (newPassword == null)\n        { return; }\n\n        var oldPassword = e.OldValue as SecureString;\n        if (newPassword.Equals(oldPassword))\n        { return; }\n\n        var bstr = Marshal.SecureStringToBSTR(newPassword);\n        try\n        {\n            passwordBox.SecurePassword.CopyFromBSTR(bstr, newPassword.Length);\n        }\n        finally\n        {\n            Marshal.ZeroFreeBSTR(bstr);\n        }\n    }\n\n    protected override void OnAttached()\n    {\n        base.OnAttached();\n        AssociatedObject.PasswordChanged += PasswordBox_PasswordChanged;\n    }\n\n    protected override void OnDetaching()\n    {\n        AssociatedObject.PasswordChanged -= PasswordBox_PasswordChanged;\n        base.OnDetaching();\n    }\n\n    private void PasswordBox_PasswordChanged(object sender, RoutedEventArgs e)\n    {\n        SecurePassword = AssociatedObject.SecurePassword.Copy();\n    }\n}\n```\n- Behavior\\<PasswordBox\\>\u3092\u7d99\u627f\u3057\u305f\u30af\u30e9\u30b9\u3092\u4f5c\u308a\u307e\u3059\u3002\n- \u3053\u306e\u30af\u30e9\u30b9\u306b\u3001\u30d0\u30a4\u30f3\u30c9\u5bfe\u8c61\u3068\u306a\u308bSecurePassword\u30d7\u30ed\u30d1\u30c6\u30a3\u3092\u4f9d\u5b58\u95a2\u4fc2\u30d7\u30ed\u30d1\u30c6\u30a3\u3068\u3057\u3066\u8ffd\u52a0\u3057\u307e\u3059\u3002\n- Behavior\u306b\u95a2\u9023\u4ed8\u3051\u305fPasswordBox\u306ePasswordChanged\u30a4\u30d9\u30f3\u30c8\u306b\u30cf\u30f3\u30c9\u30e9\u3092\u8ffd\u52a0\u3057\u307e\u3059\u3002\n- PasswordBox_PasswordChanged()\u30cf\u30f3\u30c9\u30e9\u3067\u306f\u3001\u4f9d\u5b58\u95a2\u4fc2\u30d7\u30ed\u30d1\u30c6\u30a3\u306bPawordBox\u306eSecurePassword\u306e\u5024\u3092\u30b3\u30d4\u30fc\u3057\u307e\u3059\u3002\u3053\u3053\u3067\u306fCopy()\u30e1\u30bd\u30c3\u30c9\u306e\u7d50\u679c\u3092\u305d\u306e\u307e\u307e\u4ee3\u5165\u3057\u3066\u3044\u307e\u3059\u3002\n- SecurePasswordPropertyChanged()\u30e1\u30bd\u30c3\u30c9\u306f\u3001\u4f9d\u5b58\u95a2\u4fc2\u30d7\u30ed\u30d1\u30c6\u30a3(\u30d0\u30a4\u30f3\u30c7\u30a3\u30f3\u30b0\u30bd\u30fc\u30b9\u5074)\u306e\u66f4\u65b0\u6642\u306b\u547c\u3070\u308c\u307e\u3059\u3002\n- \u3053\u3053\u3067\u3001\u6e96\u5099\u3057\u3066\u304a\u3044\u305f\u62e1\u5f35\u30e1\u30bd\u30c3\u30c9\u3092\u4f7f\u3063\u3066PasswordBox\u5074\u306eSecurePassword\u30d7\u30ed\u30d1\u30c6\u30a3\u3092\u66f4\u65b0\u3057\u307e\u3059\u3002\n- \u66f4\u65b0\u524d\u306e\u5024\u3068\u6bd4\u8f03\u3057\u3066(SecureStringEx.Equals())\u5909\u5316\u304c\u3042\u3063\u305f\u5834\u5408\u306e\u307f\u3001PasswordBox\u306eSecurePassword\u30d7\u30ed\u30d1\u30c6\u30a3\u306b\u66f4\u65b0\u5f8c\u306e\u5024\u3092\u30b3\u30d4\u30fc\u3057\u307e\u3059(SecureStringEx.CopyFromBSTR())\u3002\n\n##### XAML\u3067\u306e\u4f7f\u7528\u4f8b #####\n\n```xml\n<Window\n        xmlns=\"http://schemas.microsoft.com/winfx/2006/xaml/presentation\"\n        xmlns:x=\"http://schemas.microsoft.com/winfx/2006/xaml\"\n        xmlns:i=\"http://schemas.microsoft.com/expression/2010/interactivity\"\n        Title=\"Input Password\" Height=\"420\" Width=\"800\">\n    <Grid>\n        <PasswordBox Width=\"120\" PasswordChar=\"*\">\n            <i:Interaction.Behaviors>\n                <my:SecurePasswordBindingBehavior \n                   SecurePassword=\"{Binding SecurePassword, Mode=TwoWay}\"/>\n             </i:Interaction.Behaviors>\n        </PasswordBox>\n    </Grid>\n</Window>\n```\n### \u3055\u3044\u3054\u306b ###\nPasswoerdBox\u306b\u5165\u529b\u3055\u308c\u305f\u30d1\u30b9\u30ef\u30fc\u30c9\u3068\u30a2\u30d7\u30ea\u5074\u3067\u4fdd\u7ba1\u3057\u3066\u3044\u308b\u30d1\u30b9\u30ef\u30fc\u30c9\u3068\u306e\u6bd4\u8f03\u306b\u3082\u3001\u4eca\u56de\u4f5c\u6210\u3057\u305f\u6bd4\u8f03\u306e\u62e1\u5f35\u30e1\u30bd\u30c3\u30c9\u304c\u4f7f\u3048\u308b\u3068\u601d\u3044\u307e\u3059\u3002\n\u305f\u3060\u3001\u30a2\u30d7\u30ea\u5074\u3067\u4fdd\u7ba1\u3057\u3066\u3044\u308b\u30d1\u30b9\u30ef\u30fc\u30c9\u3092\u4fdd\u7ba1\u5148\u304b\u3089\u53d6\u308a\u51fa\u3057\u3066\u5e73\u6587\u3067\u6271\u3046\u969b\u306b\u3001\u30de\u30cd\u30fc\u30b8\u30c9\u306a\u9818\u57df\u306b\u4fdd\u6301\u3057\u3066\u3057\u307e\u3046\u3068\u610f\u5473\u304c\u7121\u3044\u306e\u3067\u3001\u3053\u3061\u3089\u306e\u51e6\u7406\u306b\u3082\u6c17\u3092\u9063\u3046\u5fc5\u8981\u304c\u3042\u308a\u305d\u3046\u3067\u3059\u3002\n", "tags": ["C#", "WPF"]}