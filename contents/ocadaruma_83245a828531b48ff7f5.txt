{"context": "DynamoDB\u306f\u9ad8\u6a5f\u80fd\u306a\u30d5\u30eb\u30de\u30cd\u30fc\u30b8\u30c9KVS\u3067\u3001\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\n\u30cf\u30c3\u30b7\u30e5\u30ad\u30fc\u3092\u30d7\u30e9\u30a4\u30de\u30ea\u30ad\u30fc\u3068\u3057\u305fItem\u306e\u53d6\u5f97\n\n\n\u666e\u901a\u306eKVS\u7684\u306a\u4f7f\u3044\u65b9\n\n\n\u30cf\u30c3\u30b7\u30e5\u30ad\u30fc, \u30ec\u30f3\u30b8\u30ad\u30fc\u3092\u30d7\u30e9\u30a4\u30de\u30ea\u30ad\u30fc\u3068\u3057\u305f\u9ad8\u901f\u306a\u30af\u30a8\u30ea\n\n\n\u30ec\u30f3\u30b8\u30ad\u30fc\u3092timestamp\u306a\u3069\u306b\u3059\u308b\u3053\u3068\u3067\u3001\u6642\u7cfb\u5217\u30af\u30a8\u30ea\u304c\u53ef\u80fd\n\n\n\nDynamoDB\u3092\u6642\u7cfb\u5217\u30c6\u30fc\u30d6\u30eb\u3068\u3057\u3066\u6271\u3046\u5834\u5408\u3001\u300c\u4e00\u5b9a\u671f\u9593\u5185\u3067\u6700\u521d\uff08or \u6700\u5f8c\uff09\u306e1\u9805\u76ee\u3060\u3051\u3092\u53d6\u5f97\u300d\u3068\u3044\u3063\u305f\u3053\u3068\u3092\u3057\u305f\u3044\u30b1\u30fc\u30b9\u306f\u3042\u308b\u304b\u3068\u601d\u3044\u307e\u3059\u3002\n\u3053\u3053\u3067\u6c17\u306b\u306a\u308b\u306e\u306f\u6d88\u8cbb\u30ad\u30e3\u30d1\u30b7\u30c6\u30a3\u3067\u3059\u3002\n\u7d50\u8ad6\u304b\u3089\u8a00\u3046\u3068\u3001query\u306b\u304a\u3044\u3066Limit\u3092\u6307\u5b9a\u3057\u305f\u5834\u5408\u3001\u6d88\u8cbb\u3055\u308c\u308b\u306e\u306f\u305d\u306eLimit\u3067\u8fd4\u3055\u308c\u308b\u5206\u306e\u307f\u3068\u306a\u308a\u307e\u3059\u3002\n\n\u691c\u8a3c\nDynamoDB\u306e\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u306b\u306f\u3001\u6b21\u306e\u3088\u3046\u306a\u8a18\u8ff0\u304c\u3042\u308a\u307e\u3059\u3002\n\n\u30ea\u30af\u30a8\u30b9\u30c8\u3067\u306f\u3001Limit \u30d1\u30e9\u30e1\u30fc\u30bf\u306b\u3001DynamoDB \u304c\u7d50\u679c\u3092\u8fd4\u3059\u524d\u306b\u51e6\u7406\u3059\u308b\u9805\u76ee\u6570\u3092\u8a2d\u5b9a\u3057\u307e\u3059\u3002\n\n\u304c\u3001\u6d88\u8cbb\u30ad\u30e3\u30d1\u30b7\u30c6\u30a3\u304c\u3069\u3046\u306a\u308b\u306e\u304b\u8aad\u307f\u53d6\u308a\u3065\u3089\u3044\u305f\u3081\u3001\u5ff5\u306e\u305f\u3081\u691c\u8a3c\u3057\u3066\u307f\u307e\u3059\u3002\n\u3053\u3061\u3089\u306eScala\u30a2\u30d7\u30ea( https://github.com/ocadaruma/dynamodb-query-example )\u3092\u4f7f\u3063\u3066\u3001\n\nDynamoDB\u30c6\u30fc\u30d6\u30eb\u3092\u4f5c\u6210\u3057\u3001RCU\u30925\u306b\u8a2d\u5b9a\nDynamoDB\u30c6\u30fc\u30d6\u30eb\u306b\u30011KB\u304f\u3089\u3044\u306eItem\u30921000\u500bput\n2\u3064\u306e\u30d1\u30bf\u30fc\u30f3\u306equery\u3092\u5b9f\u884c\u3057\u3001\u6d88\u8cbb\u30ad\u30e3\u30d1\u30b7\u30c6\u30a3\u306e\u89b3\u5bdf\n\n\n1000\u500b\u3092\u53d6\u5f97\u3059\u308b\u30af\u30a8\u30ea\u3092100\u56de\u5b9f\u884c\uff08Limit = 1000\uff09\n1\u500b\u3092\u53d6\u5f97\u3059\u308b\u30af\u30a8\u30ea\u3092100\u56de\u5b9f\u884c (Limit = 1, \u30ec\u30f3\u30b8\u30ad\u30fc\u306e\u7bc4\u56f2\u306f\u2191\u3068\u540c\u3058)\n\n\n\n\u3092\u884c\u3044\u307e\u3059\u3002\n$ export AWS_ACCESS_KEY_ID=your_key\n$ export AWS_SECRET_ACCESS_KEY=your_secret\n$ sbt\n\n\u307e\u305a\u3001Limit = 1000\u306e\u30d1\u30bf\u30fc\u30f3\u3092\u5b9f\u884c\u3059\u308b\u3068\u3001\u9014\u4e2d\u3067\u30ad\u30e3\u30d1\u30aa\u30fc\u30d0\u30fc\u3068\u306a\u308a\u307e\u3059\u306d\u3002\n\u30d0\u30fc\u30b9\u30c8\u304c\u3042\u308b\u306e\u3067\u6b63\u78ba\u306b\u898b\u7a4d\u3082\u308c\u306a\u304b\u3063\u305f\u308a\u3057\u307e\u3059\u304c\u3001RCU = 5\u3060\u30681\u79d2\u3042\u305f\u308a40\u9805\u76ee\u7a0b\u5ea6\u306e\uff08\u7d50\u679c\u6574\u5408\u6027\u306e\u3042\u308b\uff09\u8aad\u307f\u8fbc\u307f\u3057\u304b\u3067\u304d\u306a\u3044\u306e\u3067\u3001\u5f53\u7136\u3067\u3059\u3002\n> run query 1000 100\n[info] Running com.example.Main query 1000 100\nquery items.\n************** returned 1000 items. **************\n************** returned 1000 items. **************\n************** returned 1000 items. **************\n************** returned 1000 items. **************\n************** returned 1000 items. **************\n************** returned 1000 items. **************\n************** returned 1000 items. **************\n************** returned 1000 items. **************\n************** returned 1000 items. **************\n************** returned 1000 items. **************\n************** returned 1000 items. **************\n************** returned 1000 items. **************\n[error] (run-main-59) com.amazonaws.services.dynamodbv2.model.ProvisionedThroughputExceededException: The level of configured provisioned throughput for the table was exceeded. Consider increasing your provisioning level with the UpdateTable API (Service: AmazonDynamoDBv2; Status Code: 400; Error Code: ProvisionedThroughputExceededException \u301c\uff08\u7701\u7565\uff09\u301c\n    at com.amazonaws.http.AmazonHttpClient.handleErrorResponse(AmazonHttpClient.java:1343)\n    at com.amazonaws.http.AmazonHttpClient.executeOneRequest(AmazonHttpClient.java:961)\n    at com.amazonaws.http.AmazonHttpClient.executeHelper(AmazonHttpClient.java:738)\n    at com.amazonaws.http.AmazonHttpClient.doExecute(AmazonHttpClient.java:489)\n    at com.amazonaws.http.AmazonHttpClient.executeWithTimer(AmazonHttpClient.java:448)\n    at com.amazonaws.http.AmazonHttpClient.execute(AmazonHttpClient.java:397)\n    at com.amazonaws.http.AmazonHttpClient.execute(AmazonHttpClient.java:378)\n\u301c\u301c\n\n\u6b21\u306b\u3001Limit = 1\u306b\u5236\u9650\u3057\u3066query\u3057\u3066\u307f\u307e\u3057\u3087\u3046\u3002\n> run query 1 100\n[info] Running com.example.Main query 1 100\nquery items.\n************** returned 1 items. **************\n************** returned 1 items. **************\n************** returned 1 items. **************\n************** returned 1 items. **************\n\u301c\uff08\u7701\u7565\uff09\u301c\n************** returned 1 items. **************\n************** returned 1 items. **************\n************** returned 1 items. **************\n[success]\n\n\u30ad\u30e3\u30d1\u30aa\u30fc\u30d0\u30fc\u306b\u306a\u3089\u305a\u306b\u8aad\u307f\u8fbc\u3081\u307e\u3057\u305f\u3002\nAWS Console\u3067\u78ba\u8a8d\u3057\u3066\u3082\u3001\u6d88\u8cbb\u30ad\u30e3\u30d1\u30b7\u30c6\u30a3\u304c\u6291\u3048\u3089\u308c\u3066\u3044\u308b\u3053\u3068\u304c\u78ba\u8a8d\u3067\u304d\u307e\u3059\u3002\uff0817:52\u3054\u308d\u306e\u304c\u30d1\u30bf\u30fc\u30f31, 18:01\u3054\u308d\u306e\u304c\u30d1\u30bf\u30fc\u30f32\u3067\u3059\uff09\n\nDynamoDB\u306f\u9ad8\u6a5f\u80fd\u306a\u30d5\u30eb\u30de\u30cd\u30fc\u30b8\u30c9KVS\u3067\u3001\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\n- \u30cf\u30c3\u30b7\u30e5\u30ad\u30fc\u3092\u30d7\u30e9\u30a4\u30de\u30ea\u30ad\u30fc\u3068\u3057\u305fItem\u306e\u53d6\u5f97\n  - \u666e\u901a\u306eKVS\u7684\u306a\u4f7f\u3044\u65b9\n- \u30cf\u30c3\u30b7\u30e5\u30ad\u30fc, \u30ec\u30f3\u30b8\u30ad\u30fc\u3092\u30d7\u30e9\u30a4\u30de\u30ea\u30ad\u30fc\u3068\u3057\u305f\u9ad8\u901f\u306a\u30af\u30a8\u30ea\n  - \u30ec\u30f3\u30b8\u30ad\u30fc\u3092timestamp\u306a\u3069\u306b\u3059\u308b\u3053\u3068\u3067\u3001\u6642\u7cfb\u5217\u30af\u30a8\u30ea\u304c\u53ef\u80fd\n\nDynamoDB\u3092\u6642\u7cfb\u5217\u30c6\u30fc\u30d6\u30eb\u3068\u3057\u3066\u6271\u3046\u5834\u5408\u3001\u300c\u4e00\u5b9a\u671f\u9593\u5185\u3067\u6700\u521d\uff08or \u6700\u5f8c\uff09\u306e1\u9805\u76ee\u3060\u3051\u3092\u53d6\u5f97\u300d\u3068\u3044\u3063\u305f\u3053\u3068\u3092\u3057\u305f\u3044\u30b1\u30fc\u30b9\u306f\u3042\u308b\u304b\u3068\u601d\u3044\u307e\u3059\u3002\n\u3053\u3053\u3067\u6c17\u306b\u306a\u308b\u306e\u306f\u6d88\u8cbb\u30ad\u30e3\u30d1\u30b7\u30c6\u30a3\u3067\u3059\u3002\n\n\u7d50\u8ad6\u304b\u3089\u8a00\u3046\u3068\u3001query\u306b\u304a\u3044\u3066Limit\u3092\u6307\u5b9a\u3057\u305f\u5834\u5408\u3001\u6d88\u8cbb\u3055\u308c\u308b\u306e\u306f\u305d\u306eLimit\u3067\u8fd4\u3055\u308c\u308b\u5206\u306e\u307f\u3068\u306a\u308a\u307e\u3059\u3002\n\n## \u691c\u8a3c\n\n[DynamoDB\u306e\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8](http://docs.aws.amazon.com/ja_jp/amazondynamodb/latest/developerguide/QueryAndScan.html#ScanQueryLimit)\u306b\u306f\u3001\u6b21\u306e\u3088\u3046\u306a\u8a18\u8ff0\u304c\u3042\u308a\u307e\u3059\u3002\n\n> \u30ea\u30af\u30a8\u30b9\u30c8\u3067\u306f\u3001Limit \u30d1\u30e9\u30e1\u30fc\u30bf\u306b\u3001DynamoDB \u304c\u7d50\u679c\u3092\u8fd4\u3059\u524d\u306b\u51e6\u7406\u3059\u308b\u9805\u76ee\u6570\u3092\u8a2d\u5b9a\u3057\u307e\u3059\u3002\n\n\u304c\u3001\u6d88\u8cbb\u30ad\u30e3\u30d1\u30b7\u30c6\u30a3\u304c\u3069\u3046\u306a\u308b\u306e\u304b\u8aad\u307f\u53d6\u308a\u3065\u3089\u3044\u305f\u3081\u3001\u5ff5\u306e\u305f\u3081\u691c\u8a3c\u3057\u3066\u307f\u307e\u3059\u3002\n\n\u3053\u3061\u3089\u306eScala\u30a2\u30d7\u30ea( https://github.com/ocadaruma/dynamodb-query-example )\u3092\u4f7f\u3063\u3066\u3001\n\n1. DynamoDB\u30c6\u30fc\u30d6\u30eb\u3092\u4f5c\u6210\u3057\u3001RCU\u3092`5`\u306b\u8a2d\u5b9a\n2. DynamoDB\u30c6\u30fc\u30d6\u30eb\u306b\u30011KB\u304f\u3089\u3044\u306eItem\u30921000\u500bput\n3. 2\u3064\u306e\u30d1\u30bf\u30fc\u30f3\u306equery\u3092\u5b9f\u884c\u3057\u3001\u6d88\u8cbb\u30ad\u30e3\u30d1\u30b7\u30c6\u30a3\u306e\u89b3\u5bdf\n  - 1000\u500b\u3092\u53d6\u5f97\u3059\u308b\u30af\u30a8\u30ea\u3092100\u56de\u5b9f\u884c\uff08Limit = 1000\uff09\n  - 1\u500b\u3092\u53d6\u5f97\u3059\u308b\u30af\u30a8\u30ea\u3092100\u56de\u5b9f\u884c (Limit = 1, \u30ec\u30f3\u30b8\u30ad\u30fc\u306e\u7bc4\u56f2\u306f\u2191\u3068\u540c\u3058)\n\n\u3092\u884c\u3044\u307e\u3059\u3002\n\n```bash\n$ export AWS_ACCESS_KEY_ID=your_key\n$ export AWS_SECRET_ACCESS_KEY=your_secret\n$ sbt\n```\n\n\u307e\u305a\u3001Limit = 1000\u306e\u30d1\u30bf\u30fc\u30f3\u3092\u5b9f\u884c\u3059\u308b\u3068\u3001\u9014\u4e2d\u3067\u30ad\u30e3\u30d1\u30aa\u30fc\u30d0\u30fc\u3068\u306a\u308a\u307e\u3059\u306d\u3002\n\u30d0\u30fc\u30b9\u30c8\u304c\u3042\u308b\u306e\u3067\u6b63\u78ba\u306b\u898b\u7a4d\u3082\u308c\u306a\u304b\u3063\u305f\u308a\u3057\u307e\u3059\u304c\u3001RCU = 5\u3060\u30681\u79d2\u3042\u305f\u308a40\u9805\u76ee\u7a0b\u5ea6\u306e\uff08\u7d50\u679c\u6574\u5408\u6027\u306e\u3042\u308b\uff09\u8aad\u307f\u8fbc\u307f\u3057\u304b\u3067\u304d\u306a\u3044\u306e\u3067\u3001\u5f53\u7136\u3067\u3059\u3002\n\n```bash\n> run query 1000 100\n[info] Running com.example.Main query 1000 100\nquery items.\n************** returned 1000 items. **************\n************** returned 1000 items. **************\n************** returned 1000 items. **************\n************** returned 1000 items. **************\n************** returned 1000 items. **************\n************** returned 1000 items. **************\n************** returned 1000 items. **************\n************** returned 1000 items. **************\n************** returned 1000 items. **************\n************** returned 1000 items. **************\n************** returned 1000 items. **************\n************** returned 1000 items. **************\n[error] (run-main-59) com.amazonaws.services.dynamodbv2.model.ProvisionedThroughputExceededException: The level of configured provisioned throughput for the table was exceeded. Consider increasing your provisioning level with the UpdateTable API (Service: AmazonDynamoDBv2; Status Code: 400; Error Code: ProvisionedThroughputExceededException \u301c\uff08\u7701\u7565\uff09\u301c\n\tat com.amazonaws.http.AmazonHttpClient.handleErrorResponse(AmazonHttpClient.java:1343)\n\tat com.amazonaws.http.AmazonHttpClient.executeOneRequest(AmazonHttpClient.java:961)\n\tat com.amazonaws.http.AmazonHttpClient.executeHelper(AmazonHttpClient.java:738)\n\tat com.amazonaws.http.AmazonHttpClient.doExecute(AmazonHttpClient.java:489)\n\tat com.amazonaws.http.AmazonHttpClient.executeWithTimer(AmazonHttpClient.java:448)\n\tat com.amazonaws.http.AmazonHttpClient.execute(AmazonHttpClient.java:397)\n\tat com.amazonaws.http.AmazonHttpClient.execute(AmazonHttpClient.java:378)\n\u301c\u301c\n```\n\n\u6b21\u306b\u3001Limit = 1\u306b\u5236\u9650\u3057\u3066query\u3057\u3066\u307f\u307e\u3057\u3087\u3046\u3002\n\n```bash\n> run query 1 100\n[info] Running com.example.Main query 1 100\nquery items.\n************** returned 1 items. **************\n************** returned 1 items. **************\n************** returned 1 items. **************\n************** returned 1 items. **************\n\u301c\uff08\u7701\u7565\uff09\u301c\n************** returned 1 items. **************\n************** returned 1 items. **************\n************** returned 1 items. **************\n[success]\n```\n\n\u30ad\u30e3\u30d1\u30aa\u30fc\u30d0\u30fc\u306b\u306a\u3089\u305a\u306b\u8aad\u307f\u8fbc\u3081\u307e\u3057\u305f\u3002\n\nAWS Console\u3067\u78ba\u8a8d\u3057\u3066\u3082\u3001\u6d88\u8cbb\u30ad\u30e3\u30d1\u30b7\u30c6\u30a3\u304c\u6291\u3048\u3089\u308c\u3066\u3044\u308b\u3053\u3068\u304c\u78ba\u8a8d\u3067\u304d\u307e\u3059\u3002\uff0817:52\u3054\u308d\u306e\u304c\u30d1\u30bf\u30fc\u30f31, 18:01\u3054\u308d\u306e\u304c\u30d1\u30bf\u30fc\u30f32\u3067\u3059\uff09\n\n![image](https://qiita-image-store.s3.amazonaws.com/0/38151/53cf796c-8d30-60ce-10a2-5613ebec10c9.png)\n", "tags": ["AWS", "DynamoDB"]}