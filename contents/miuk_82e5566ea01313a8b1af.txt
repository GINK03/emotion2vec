{"tags": ["Lua"], "context": " More than 1 year has passed since last update.\n\n\u521d\u671f\u5316\n\ninit.cpp\nlua_State* l = luaL_newstate(); // lua context \u53d6\u5f97\nluaL_openlibs(l);               // \u57fa\u672c\u7684\u30e9\u30a4\u30d6\u30e9\u30ea\u8aad\u307f\u8fbc\u307f\n\n\n\nC \u304b\u3089 lua script \u306e\u8aad\u307f\u8fbc\u307f\u3068\u5b9f\u884c\n\ninit.cpp\nlua_State* l = luaL_newstate(); // lua context \u53d6\u5f97\nluaL_openlibs(l);               // \u57fa\u672c\u7684\u30e9\u30a4\u30d6\u30e9\u30ea\u8aad\u307f\u8fbc\u307f\n\n// \u6587\u5b57\u5217\u3092 lua script \u3068\u3057\u3066\u5b9f\u884c\nluaL_dostring(l, \"print('hello lua script!!')\");\n\n// lua script file \u8aad\u307f\u8fbc\u307f\nif (luaL_loadfile(l, fname)) {\n  fprintf(stderr, \"cannot open %s\\n\", fname);\n  return;\n}\nif (lua_pcall(l\n              , 0     // \u5f15\u304d\u6570\u306e\u6570\n              , 0     // \u623b\u308a\u5024\u306e\u6570\n              , 0)) { // error message handler \u306e stack index\n  fprintf(stderr, \"cannot exec %s\\n\", fname);\n  return;\n}\n\n\n\nC \u304b\u3089 lua \u306e\u95a2\u6570\u547c\u3073\u51fa\u3057\n\u4e0b\u8a18\u306e lua \u95a2\u6570\u3092 C \u304b\u3089\u547c\u3073\u51fa\u3059.\n\nfunc.lua\nfunction func(arg1, arg2)\n  print(arg1)\n  print(arg2)\n  return arg1+1, arg2+2\nend\n\n\n\u4e0a\u8a18\u3092\u547c\u3073\u51fa\u3059 C \u306e\u30b3\u30fc\u30c9.\n\ncall.cpp\nlua_State* l = luaL_newstate();\nluaL_openlibs(l);\nluaL_loadfile(l, \"func.lua\");\nlua_pcall(l, 0, 0, 0); // script \u3092\u5b9f\u884c\u3057\u3066\u304a\u304b\u306a\u3044\u3068\u95a2\u6570\u3092\u547c\u3073\u51fa\u305b\u306a\u3044\nlua_getglobal(l, \"func\");   // \u547c\u3073\u51fa\u3059\u95a2\u6570\nlua_pushnumber(l, 4);   // \u7b2c\u4e00\u5f15\u6570\nlua_pushnumber(l, 5);   // \u7b2c\u30cb\u5f15\u6570\nif (lua_pcall(l, 2, 2, 0)) {    // \u5f15\u6570 2 \u500b, \u623b\u308a\u5024 2 \u500b\n  fprintf(stderr, \"cannot exec add. %s\\n\", lua_tostring(l, -1));\n  return;\n}\nif (lua_isnumber(l, -1)) {\n  int ret = lua_tointeger(l, -1); // \u623b\u308a\u5024\u305d\u306e 1\n  printf(\"ret=%d\\n\", ret);\n}\nlua_pop(l, 1);      // \u623b\u308a\u5024\u3092 pop\nif (lua_isnumber(l, -1)) {\n  int ret = lua_tointeger(l, -1); // \u623b\u308a\u5024\u305d\u306e 2\n  printf(\"ret=%d\\n\", ret);\n}\nlua_pop(l, 1);      // \u623b\u308a\u5024\u3092 pop\n\n\n\nlua \u304b\u3089 C \u306e\u95a2\u6570\u547c\u3073\u51fa\u3057\n\u4e0b\u8a18\u306e\u3088\u3046\u306b lua \u304b\u3089 C \u306e\u95a2\u6570 c_func() \u3092\u547c\u3073\u51fa\u3059.\n\nfunc.lua\narg1, arg2 = 3, 4\nret1, ret2 = c_func(arg1, arg2)\n\n\n\u4e0a\u8a18\u304b\u3089\u547c\u3073\u51fa\u3055\u308c\u308b C \u306e\u30b3\u30fc\u30c9.\n\ncall.cpp\n// lua \u304b\u3089\u547c\u3070\u308c\u308b\u95a2\u6570\nstatic int\nc_func(lua_State* l)\n{\n  int arg1 = luaL_checkint(l, -2);  // \u7b2c\u4e00\u5f15\u6570\u53d6\u5f97\n  int arg2 = luaL_checkint(l, -1);  // \u7b2c\u4e8c\u5f15\u6570\u53d6\u5f97\n  // pop \u306f lua library \u304c\u3084\u3063\u3066\u304f\u308c\u308b\u306e\u3067\u4e0d\u8981\n  int ret1 = arg1 + 1;\n  int ret2 = arg2 + 2;\n  lua_pushnumber(l, ret1);  // \u623b\u308a\u5024 1 \u3092 push\n  lua_pushnumber(l, ret2);  // \u623b\u308a\u5024 2 \u3092 push\n  return 2;         // \u623b\u308a\u5024\u306e\u6570\u3092\u8fd4\u3059\n}\n\n// lua script \u3092\u5b9f\u884c\u3059\u308b\u30b3\u30fc\u30c9\nint main(int ac, char* av[])\n{\n  lua_State* l = luaL_newstate();\n  luaL_openlibs(l);\n  luaL_loadfile(l, \"func.lua\");\n  lua_register(l, \"c_func\", c_func); // lua \u306b\u95a2\u6570\u3092\u767b\u9332\n  lua_pcall(l, 0, 0, 0); // script \u5b9f\u884c\n  lua_close(l);\n}\n\n\n\nC \u304b\u3089 lua \u3078 table \u3092\u6e21\u3059\nC \u304b\u3089\u4e0b\u8a18 lua \u95a2\u6570 pass_table() \u3092\u547c\u3073\u51fa\u3059.\n\u307e\u305f\u3001\u3053\u306e\u95a2\u6570\u304b\u3089 table \u3092\u623b\u308a\u5024\u3068\u3057\u3066 C \u306b\u8fd4\u3059.\n\nfunc.lua\nfunction pass_table(t)\n  for key, val in pairs(t) do\n    print(key, val)\n  end\n  return t\nend\n\n\nlua script \u306b table \u3092\u5f15\u304d\u6570\u3068\u3057\u3066\u6e21\u3057, \u623b\u308a\u5024\u3068\u3057\u3066 table \u3092\u53d7\u3051\u53d6\u308b.\n\ncall.cpp\nlua_State* l = luaL_newstate();\nluaL_openlibs(l);\nluaL_loadfile(l, \"func.lua\");\nlua_pcall(l, 0, 0, 0); // script \u3092\u5b9f\u884c\u3057\u3066\u304a\u304b\u306a\u3044\u3068\u95a2\u6570\u3092\u547c\u3073\u51fa\u305b\u306a\u3044\nlua_getglobal(l, \"pass_table\"); // \u547c\u3073\u51fa\u3059\u95a2\u6570\nlua_newtable(l); // table \u3092\u65b0\u898f\u4f5c\u6210\u3057, stack \u306b\u7a4d\u3080\nlua_pushstring(l, \"key1\");\nlua_pushstring(l, \"val1\");\nlua_settable(l, -3); // stack \u306b\u7a4d\u3093\u3060 table \u306b key, value \u3092\u8a2d\u5b9a\nlua_pushstring(l, \"key2\");\nlua_pushstring(l, \"val2\");\nlua_settable(l, -3); // stack \u306b\u7a4d\u3093\u3060 table \u306b key, value \u3092\u8a2d\u5b9a\nlua_pushstring(l, \"key3\");\nlua_pushstring(l, \"val3\");\nlua_settable(l, -3); // stack \u306b\u7a4d\u3093\u3060 table \u306b key, value \u3092\u8a2d\u5b9a\nif (lua_pcall(l, 1, 1, 0)) {    // \u5f15\u6570 1 \u500b, \u623b\u308a\u5024 1 \u500b\n  fprintf(stderr, \"cannot exec add. %s\\n\", lua_tostring(l, -1));\n  return;\n}\nshow_table(l);      // \u623b\u3063\u3066\u304d\u305f table \u306e\u5185\u5bb9\u8868\u793a\nlua_pop(l, 1);      // \u623b\u308a\u5024\u3092 pop\n\n\n\nstack \u306b\u7a4d\u307e\u308c\u3066\u3044\u308b table \u3078\u306e\u30a2\u30af\u30bb\u30b9\n\nshow_table.cpp\n// stack \u306b\u7a4d\u307e\u308c\u3066\u3044\u308b table \u306e\u5185\u5bb9\u306b\u3072\u3068\u901a\u308a\u30a2\u30af\u30bb\u30b9\nvoid show_table(lua_State* l)\n{\n  lua_pushnil(l);\n  while (lua_next(l, -2)) {\n    switch (lua_type(l, -2)) {  // key \u3092\u8868\u793a\n    case LUA_TNUMBER :\n      printf(\"key=%td, \", lua_tointeger(l, -2));\n      break;\n    case LUA_TSTRING :\n      printf(\"key=%s, \", lua_tostring(l, -2));\n      break;\n    }\n    switch (lua_type(l, -1)) {  // value \u3092\u8868\u793a\n    case LUA_TNUMBER :\n      printf(\"value=%td\\n\", lua_tointeger(l, -1));\n      break;\n    case LUA_TSTRING :\n      printf(\"value=%s\\n\", lua_tostring(l, -1));\n      break;\n    case LUA_TBOOLEAN :\n      printf(\"value=%d\\n\", lua_toboolean(l, -1));\n      break;\n    default :\n      printf(\"value=%s\\n\", lua_typename(l, lua_type(l, -1)));\n    }\n    lua_pop(l, 1);      // \u5024\u3092\u53d6\u308a\u9664\u304f\n  }\n}\n\n// \u7279\u5b9a key \u3078\u306e\u30a2\u30af\u30bb\u30b9\nvoid show_table_item(lua_State* l, const char* key)\n{\n  lua_pushstring(l, key);   // key \u5024\u3092\u7a4d\u3080\n  lua_rawget(l, 1);     // table \u306e\u3042\u308b stack index \u306f 1 \u756a\u76ee\n  if (lua_isstring(l, -1)) {\n    const char* val = lua_tostring(l, -1);\n    printf(\"key=%s, value=%s\\n\", key, val);\n  }\n}\n\n\n\nlua \u304b\u3089 C \u3078 table \u3092\u6e21\u3059\nC \u306e\u95a2\u6570 c_func() \u306b\u5f15\u304d\u6570\u3068\u3057\u3066 table \u3092\u6e21\u3057, \u623b\u308a\u5024\u3068\u3057\u3066 table \u3092\u53d7\u3051\u53d6\u308b.\n\nfunc.lua\nt = {}\nt[\"key1\"] = \"val1\"\nt[\"key2\"] = \"val2\"\nt[\"key3\"] = \"val3\"\nrt = c_func(t)\nfor key, val in pair(rt) do\n  print(key, val)\nend\n\n\n\ncall.cpp\n// lua \u304b\u3089\u547c\u3070\u308c\u308b\u95a2\u6570\nstatic int\nc_func(lua_State* l)\n{\n  show_table(l);      // \u5f15\u304d\u6570\u3068\u3057\u3066\u6e21\u3055\u308c\u305f table \u306e\u5185\u5bb9\u8868\u793a\n  // table \u3092\u623b\u308a\u5024\u3068\u3057\u3066\u8fd4\u3059\n  lua_newtable(l);\n  lua_pushstring(l, \"retkey1\");\n  lua_pushstring(l, \"retval1\");\n  lua_settable(l, -3);\n  lua_pushstring(l, \"retkey2\");\n  lua_pushstring(l, \"retval2\");\n  lua_settable(l, -3);\n  return 1;          // \u623b\u308a\u5024\u306e\u6570\n}\n\n// lua script \u3092\u5b9f\u884c\u3059\u308b\u30b3\u30fc\u30c9\nint main(int ac, char* av[])\n{\n  lua_State* l = luaL_newstate();\n  luaL_openlibs(l);\n  luaL_loadfile(l, \"func.lua\");\n  lua_register(l, \"c_func\", c_func); // lua \u306b\u95a2\u6570\u3092\u767b\u9332\n  lua_pcall(l, 0, 0, 0); // script \u5b9f\u884c\n  lua_close(l);\n}\n\n\n\n\u95a2\u6570\u7fa4\u3092\u30e2\u30b8\u30e5\u30fc\u30eb\u3068\u3057\u3066\u307e\u3068\u3081\u308b\nlua \u304b\u3089 C \u306e\u95a2\u6570\u3092 myLib \u30e2\u30b8\u30e5\u30fc\u30eb\u306e\u95a2\u6570\u3068\u3057\u3066\u547c\u3073\u51fa\u305b\u308b\u3088\u3046\u306b\u3059\u308b.\n\nfunc.lua\nval1 = myLib.add(5, 6)\nval2 = myLib.mul(5, 6)\n\n\n\ncall.cpp\n// lua \u304b\u3089\u547c\u3070\u308c\u308b\u95a2\u6570\nstatic int\nl_add(lua_State* l)\n{\n  int x = luaL_checkint(l, -2); // \u7b2c\u4e00\u5f15\u6570\n  int y = luaL_checkint(l, -1); // \u7b2c\u4e8c\u5f15\u6570\n  // pop \u306f lua library \u304c\u3084\u3063\u3066\u304f\u308c\u308b\u306e\u3067\u4e0d\u8981\n  int ret = x + y;\n  lua_pushnumber(l, ret);   // \u623b\u308a\u5024\u3092 push\n  return 1;         // \u623b\u308a\u5024\u306e\u6570\u3092\u8fd4\u3059\n}\n\nstatic int\nl_mul(lua_State* l)\n{\n  int x = luaL_checkint(l, -2); // \u7b2c\u4e00\u5f15\u6570\n  int y = luaL_checkint(l, -1); // \u7b2c\u4e8c\u5f15\u6570\n  // pop \u306f lua library \u304c\u3084\u3063\u3066\u304f\u308c\u308b\u306e\u3067\u4e0d\u8981\n  int ret = x * y;\n  lua_pushnumber(l, ret);   // \u623b\u308a\u5024\u3092 push\n  return 1;         // \u623b\u308a\u5024\u306e\u6570\u3092\u8fd4\u3059\n}\n\n// \u30e2\u30b8\u30e5\u30fc\u30eb\u3092\u767b\u9332\u3059\u308b\u95a2\u6570\nstatic int luaopen_myLib(lua_State* l)\n{\n  static const struct luaL_Reg myLib[] = {\n    {\"add\", l_add},\n    {\"mul\", l_mul},\n    {NULL, NULL}\n  };\n  // \u30e2\u30b8\u30e5\u30fc\u30eb\u3092\u767b\u9332. lua v5.2, 5.1 \u3067\u306f\u65b9\u6cd5\u304c\u9055\u3046\n#if LUA_VERSION_NUM >= 502\n  luaL_newlib(l, myMathLib);\n#else\n  luaL_register(l, \"myMath\", myMathLib);\n#endif\n  return 1;\n}\n\nint main(int ac, char* av[])\n{\n  lua_State* l = luaL_newstate();\n  luaL_openlibs(l);\n  // myLib = require('myLib') \u3068\u540c\u7b49\n  luaL_requiref(l, \"myLib\", luaopen_myLib, 1);\n  luaL_loadfile(l, fname);\n  if (lua_pcall(l, 0, 0, 0)) {\n    fprintf(stderr, \"cannot exec %s\\n\", fname);\n    fprintf(stderr, \"cannot exec add. %s\\n\", lua_tostring(l, -1));\n    return;\n  }\n  lua_close(l);\n}\n\n\n\nC \u304b\u3089 lua \u306e coroutine \u3092\u5236\u5fa1\u3059\u308b\n\u4e0b\u8a18, C \u306e\u95a2\u6570 c_func() \u306e\u547c\u3073\u51fa\u3057\u306b\u3088\u308a\u5b9f\u884c\u304c\u4e2d\u65ad\u3055\u308c,\nC \u8a00\u8a9e\u5074\u3067 lua_resume() \u3059\u308b\u3053\u3068\u306b\u3088\u308a\u4e2d\u65ad\u7b87\u6240\u304b\u3089\u518d\u958b\u3055\u308c\u308b\u3088\u3046\u306b\u3059\u308b.\n\u518d\u958b\u6642\u306b c_func() \u304b\u3089\u623b\u308a\u5024\u4ed8\u304d\u3067\u5236\u5fa1\u304c\u623b\u308b\u3088\u3046\u306b\u3059\u308b.\n\nfunc.lua\narg1 = \"arg1\"\nret1 = c_func(arg1)\nprint(\"ret1=\" .. ret1)\narg2 = \"arg2\"\nret2= c_func(arg2)\nprint(\"ret2=\" .. ret2)\narg3 = \"arg3\"\nret3= c_func(arg3)\nprint(\"ret3=\" .. ret3)\n\n\n\ncall.cpp\n// \u547c\u3073\u51fa\u3055\u308c\u308b\u3068 coroutine \u3092\u4e2d\u65ad\u3059\u308b\nstatic int\nl_func(lua_State* l)\n{\n  const char* arg = luaL_checkstring(l, -1);\n  printf(\"l_call, arg=%s\\n\", arg);\n  return lua_yield(l, 0);\n}\n\nint main(int ac, char* av[])\n{\n  lua_State* l = luaL_newstate();\n  luaL_openlibs(l);\n  lua_register(l, \"c_func\", c_func); // lua \u306b\u95a2\u6570\u3092\u767b\u9332\n  lua_State* co = lua_newthread(l); // co-routine \u7528\u306e thread\n  luaL_loadfile(co, \"func.lua\");\n  lua_resume(co, NULL, 0);  // \u5b9f\u884c\u958b\u59cb\n  for (;;) {\n    sleep(1);\n    lua_pushstring(co, \"reval\"); // \u623b\u308a\u5024\u3092\u7a4d\u3080\n    int ret = lua_resume(co, NULL, 1); // \u5b9f\u884c\u518d\u958b\n    printf(\"lua_resume returns %d\\n\", ret);\n    if (ret == LUA_OK)      // co-routine \u7d42\u4e86\n      break;\n  }\n  // co-routine's thread \u306e\u7247\u4ed8\u3051\u306f GC \u306b\u4efb\u305b\u308b\u4ee5\u5916\u65b9\u6cd5\u306a\u3057\n  lua_close(l);\n}\n\n\n# \u521d\u671f\u5316\n\n```c++:init.cpp\nlua_State* l = luaL_newstate(); // lua context \u53d6\u5f97\nluaL_openlibs(l);               // \u57fa\u672c\u7684\u30e9\u30a4\u30d6\u30e9\u30ea\u8aad\u307f\u8fbc\u307f\n```\n\n# C \u304b\u3089 lua script \u306e\u8aad\u307f\u8fbc\u307f\u3068\u5b9f\u884c\n\n```c++:init.cpp\nlua_State* l = luaL_newstate(); // lua context \u53d6\u5f97\nluaL_openlibs(l);               // \u57fa\u672c\u7684\u30e9\u30a4\u30d6\u30e9\u30ea\u8aad\u307f\u8fbc\u307f\n\n// \u6587\u5b57\u5217\u3092 lua script \u3068\u3057\u3066\u5b9f\u884c\nluaL_dostring(l, \"print('hello lua script!!')\");\n\n// lua script file \u8aad\u307f\u8fbc\u307f\nif (luaL_loadfile(l, fname)) {\n  fprintf(stderr, \"cannot open %s\\n\", fname);\n  return;\n}\nif (lua_pcall(l\n              , 0     // \u5f15\u304d\u6570\u306e\u6570\n              , 0     // \u623b\u308a\u5024\u306e\u6570\n\t\t\t  , 0)) { // error message handler \u306e stack index\n  fprintf(stderr, \"cannot exec %s\\n\", fname);\n  return;\n}\n```\n\n# C \u304b\u3089 lua \u306e\u95a2\u6570\u547c\u3073\u51fa\u3057\n\n\u4e0b\u8a18\u306e lua \u95a2\u6570\u3092 C \u304b\u3089\u547c\u3073\u51fa\u3059.\n\n```lua:func.lua\nfunction func(arg1, arg2)\n  print(arg1)\n  print(arg2)\n  return arg1+1, arg2+2\nend\n```\n\n\u4e0a\u8a18\u3092\u547c\u3073\u51fa\u3059 C \u306e\u30b3\u30fc\u30c9.\n\n```c++:call.cpp\nlua_State* l = luaL_newstate();\nluaL_openlibs(l);\nluaL_loadfile(l, \"func.lua\");\nlua_pcall(l, 0, 0, 0); // script \u3092\u5b9f\u884c\u3057\u3066\u304a\u304b\u306a\u3044\u3068\u95a2\u6570\u3092\u547c\u3073\u51fa\u305b\u306a\u3044\nlua_getglobal(l, \"func\");\t// \u547c\u3073\u51fa\u3059\u95a2\u6570\nlua_pushnumber(l, 4);\t// \u7b2c\u4e00\u5f15\u6570\nlua_pushnumber(l, 5);\t// \u7b2c\u30cb\u5f15\u6570\nif (lua_pcall(l, 2, 2, 0)) {\t// \u5f15\u6570 2 \u500b, \u623b\u308a\u5024 2 \u500b\n  fprintf(stderr, \"cannot exec add. %s\\n\", lua_tostring(l, -1));\n  return;\n}\nif (lua_isnumber(l, -1)) {\n  int ret = lua_tointeger(l, -1); // \u623b\u308a\u5024\u305d\u306e 1\n  printf(\"ret=%d\\n\", ret);\n}\nlua_pop(l, 1);\t\t// \u623b\u308a\u5024\u3092 pop\nif (lua_isnumber(l, -1)) {\n  int ret = lua_tointeger(l, -1); // \u623b\u308a\u5024\u305d\u306e 2\n  printf(\"ret=%d\\n\", ret);\n}\nlua_pop(l, 1);\t\t// \u623b\u308a\u5024\u3092 pop\n```\n\n# lua \u304b\u3089 C \u306e\u95a2\u6570\u547c\u3073\u51fa\u3057\n\n\u4e0b\u8a18\u306e\u3088\u3046\u306b lua \u304b\u3089 C \u306e\u95a2\u6570 `c_func()` \u3092\u547c\u3073\u51fa\u3059.\n\n```lua:func.lua\narg1, arg2 = 3, 4\nret1, ret2 = c_func(arg1, arg2)\n```\n\u4e0a\u8a18\u304b\u3089\u547c\u3073\u51fa\u3055\u308c\u308b C \u306e\u30b3\u30fc\u30c9.\n\n```c++:call.cpp\n// lua \u304b\u3089\u547c\u3070\u308c\u308b\u95a2\u6570\nstatic int\nc_func(lua_State* l)\n{\n  int arg1 = luaL_checkint(l, -2);\t// \u7b2c\u4e00\u5f15\u6570\u53d6\u5f97\n  int arg2 = luaL_checkint(l, -1);\t// \u7b2c\u4e8c\u5f15\u6570\u53d6\u5f97\n  // pop \u306f lua library \u304c\u3084\u3063\u3066\u304f\u308c\u308b\u306e\u3067\u4e0d\u8981\n  int ret1 = arg1 + 1;\n  int ret2 = arg2 + 2;\n  lua_pushnumber(l, ret1);\t// \u623b\u308a\u5024 1 \u3092 push\n  lua_pushnumber(l, ret2);\t// \u623b\u308a\u5024 2 \u3092 push\n  return 2;\t\t\t// \u623b\u308a\u5024\u306e\u6570\u3092\u8fd4\u3059\n}\n\n// lua script \u3092\u5b9f\u884c\u3059\u308b\u30b3\u30fc\u30c9\nint main(int ac, char* av[])\n{\n  lua_State* l = luaL_newstate();\n  luaL_openlibs(l);\n  luaL_loadfile(l, \"func.lua\");\n  lua_register(l, \"c_func\", c_func); // lua \u306b\u95a2\u6570\u3092\u767b\u9332\n  lua_pcall(l, 0, 0, 0); // script \u5b9f\u884c\n  lua_close(l);\n}\n```\n\n# C \u304b\u3089 lua \u3078 table \u3092\u6e21\u3059\n\nC \u304b\u3089\u4e0b\u8a18 lua \u95a2\u6570 pass_table() \u3092\u547c\u3073\u51fa\u3059.\n\u307e\u305f\u3001\u3053\u306e\u95a2\u6570\u304b\u3089 table \u3092\u623b\u308a\u5024\u3068\u3057\u3066 C \u306b\u8fd4\u3059.\n\n```lua:func.lua\nfunction pass_table(t)\n  for key, val in pairs(t) do\n    print(key, val)\n  end\n  return t\nend\n```\n\nlua script \u306b table \u3092\u5f15\u304d\u6570\u3068\u3057\u3066\u6e21\u3057, \u623b\u308a\u5024\u3068\u3057\u3066 table \u3092\u53d7\u3051\u53d6\u308b.\n\n```c++:call.cpp\nlua_State* l = luaL_newstate();\nluaL_openlibs(l);\nluaL_loadfile(l, \"func.lua\");\nlua_pcall(l, 0, 0, 0); // script \u3092\u5b9f\u884c\u3057\u3066\u304a\u304b\u306a\u3044\u3068\u95a2\u6570\u3092\u547c\u3073\u51fa\u305b\u306a\u3044\nlua_getglobal(l, \"pass_table\");\t// \u547c\u3073\u51fa\u3059\u95a2\u6570\nlua_newtable(l); // table \u3092\u65b0\u898f\u4f5c\u6210\u3057, stack \u306b\u7a4d\u3080\nlua_pushstring(l, \"key1\");\nlua_pushstring(l, \"val1\");\nlua_settable(l, -3); // stack \u306b\u7a4d\u3093\u3060 table \u306b key, value \u3092\u8a2d\u5b9a\nlua_pushstring(l, \"key2\");\nlua_pushstring(l, \"val2\");\nlua_settable(l, -3); // stack \u306b\u7a4d\u3093\u3060 table \u306b key, value \u3092\u8a2d\u5b9a\nlua_pushstring(l, \"key3\");\nlua_pushstring(l, \"val3\");\nlua_settable(l, -3); // stack \u306b\u7a4d\u3093\u3060 table \u306b key, value \u3092\u8a2d\u5b9a\nif (lua_pcall(l, 1, 1, 0)) {\t// \u5f15\u6570 1 \u500b, \u623b\u308a\u5024 1 \u500b\n  fprintf(stderr, \"cannot exec add. %s\\n\", lua_tostring(l, -1));\n  return;\n}\nshow_table(l);      // \u623b\u3063\u3066\u304d\u305f table \u306e\u5185\u5bb9\u8868\u793a\nlua_pop(l, 1);\t\t// \u623b\u308a\u5024\u3092 pop\n```\n\n# stack \u306b\u7a4d\u307e\u308c\u3066\u3044\u308b table \u3078\u306e\u30a2\u30af\u30bb\u30b9\n\n```c++:show_table.cpp\n// stack \u306b\u7a4d\u307e\u308c\u3066\u3044\u308b table \u306e\u5185\u5bb9\u306b\u3072\u3068\u901a\u308a\u30a2\u30af\u30bb\u30b9\nvoid show_table(lua_State* l)\n{\n  lua_pushnil(l);\n  while (lua_next(l, -2)) {\n    switch (lua_type(l, -2)) {\t// key \u3092\u8868\u793a\n    case LUA_TNUMBER :\n      printf(\"key=%td, \", lua_tointeger(l, -2));\n      break;\n    case LUA_TSTRING :\n      printf(\"key=%s, \", lua_tostring(l, -2));\n      break;\n    }\n    switch (lua_type(l, -1)) {\t// value \u3092\u8868\u793a\n    case LUA_TNUMBER :\n      printf(\"value=%td\\n\", lua_tointeger(l, -1));\n      break;\n    case LUA_TSTRING :\n      printf(\"value=%s\\n\", lua_tostring(l, -1));\n      break;\n    case LUA_TBOOLEAN :\n      printf(\"value=%d\\n\", lua_toboolean(l, -1));\n      break;\n    default :\n      printf(\"value=%s\\n\", lua_typename(l, lua_type(l, -1)));\n    }\n    lua_pop(l, 1);\t\t// \u5024\u3092\u53d6\u308a\u9664\u304f\n  }\n}\n\n// \u7279\u5b9a key \u3078\u306e\u30a2\u30af\u30bb\u30b9\nvoid show_table_item(lua_State* l, const char* key)\n{\n  lua_pushstring(l, key);\t// key \u5024\u3092\u7a4d\u3080\n  lua_rawget(l, 1);\t\t// table \u306e\u3042\u308b stack index \u306f 1 \u756a\u76ee\n  if (lua_isstring(l, -1)) {\n    const char* val = lua_tostring(l, -1);\n    printf(\"key=%s, value=%s\\n\", key, val);\n  }\n}\n```\n\n# lua \u304b\u3089 C \u3078 table \u3092\u6e21\u3059\n\nC \u306e\u95a2\u6570 `c_func()` \u306b\u5f15\u304d\u6570\u3068\u3057\u3066 table \u3092\u6e21\u3057, \u623b\u308a\u5024\u3068\u3057\u3066 table \u3092\u53d7\u3051\u53d6\u308b.\n\n```lua:func.lua\nt = {}\nt[\"key1\"] = \"val1\"\nt[\"key2\"] = \"val2\"\nt[\"key3\"] = \"val3\"\nrt = c_func(t)\nfor key, val in pair(rt) do\n  print(key, val)\nend\n```\n\n```c++:call.cpp\n// lua \u304b\u3089\u547c\u3070\u308c\u308b\u95a2\u6570\nstatic int\nc_func(lua_State* l)\n{\n  show_table(l);      // \u5f15\u304d\u6570\u3068\u3057\u3066\u6e21\u3055\u308c\u305f table \u306e\u5185\u5bb9\u8868\u793a\n  // table \u3092\u623b\u308a\u5024\u3068\u3057\u3066\u8fd4\u3059\n  lua_newtable(l);\n  lua_pushstring(l, \"retkey1\");\n  lua_pushstring(l, \"retval1\");\n  lua_settable(l, -3);\n  lua_pushstring(l, \"retkey2\");\n  lua_pushstring(l, \"retval2\");\n  lua_settable(l, -3);\n  return 1;          // \u623b\u308a\u5024\u306e\u6570\n}\n\n// lua script \u3092\u5b9f\u884c\u3059\u308b\u30b3\u30fc\u30c9\nint main(int ac, char* av[])\n{\n  lua_State* l = luaL_newstate();\n  luaL_openlibs(l);\n  luaL_loadfile(l, \"func.lua\");\n  lua_register(l, \"c_func\", c_func); // lua \u306b\u95a2\u6570\u3092\u767b\u9332\n  lua_pcall(l, 0, 0, 0); // script \u5b9f\u884c\n  lua_close(l);\n}\n```\n\n# \u95a2\u6570\u7fa4\u3092\u30e2\u30b8\u30e5\u30fc\u30eb\u3068\u3057\u3066\u307e\u3068\u3081\u308b\n\nlua \u304b\u3089 C \u306e\u95a2\u6570\u3092 myLib \u30e2\u30b8\u30e5\u30fc\u30eb\u306e\u95a2\u6570\u3068\u3057\u3066\u547c\u3073\u51fa\u305b\u308b\u3088\u3046\u306b\u3059\u308b.\n\n```lua:func.lua\nval1 = myLib.add(5, 6)\nval2 = myLib.mul(5, 6)\n```\n\n```c++:call.cpp\n// lua \u304b\u3089\u547c\u3070\u308c\u308b\u95a2\u6570\nstatic int\nl_add(lua_State* l)\n{\n  int x = luaL_checkint(l, -2);\t// \u7b2c\u4e00\u5f15\u6570\n  int y = luaL_checkint(l, -1);\t// \u7b2c\u4e8c\u5f15\u6570\n  // pop \u306f lua library \u304c\u3084\u3063\u3066\u304f\u308c\u308b\u306e\u3067\u4e0d\u8981\n  int ret = x + y;\n  lua_pushnumber(l, ret);\t// \u623b\u308a\u5024\u3092 push\n  return 1;\t\t\t// \u623b\u308a\u5024\u306e\u6570\u3092\u8fd4\u3059\n}\n\nstatic int\nl_mul(lua_State* l)\n{\n  int x = luaL_checkint(l, -2);\t// \u7b2c\u4e00\u5f15\u6570\n  int y = luaL_checkint(l, -1);\t// \u7b2c\u4e8c\u5f15\u6570\n  // pop \u306f lua library \u304c\u3084\u3063\u3066\u304f\u308c\u308b\u306e\u3067\u4e0d\u8981\n  int ret = x * y;\n  lua_pushnumber(l, ret);\t// \u623b\u308a\u5024\u3092 push\n  return 1;\t\t\t// \u623b\u308a\u5024\u306e\u6570\u3092\u8fd4\u3059\n}\n\n// \u30e2\u30b8\u30e5\u30fc\u30eb\u3092\u767b\u9332\u3059\u308b\u95a2\u6570\nstatic int luaopen_myLib(lua_State* l)\n{\n  static const struct luaL_Reg myLib[] = {\n    {\"add\", l_add},\n    {\"mul\", l_mul},\n    {NULL, NULL}\n  };\n  // \u30e2\u30b8\u30e5\u30fc\u30eb\u3092\u767b\u9332. lua v5.2, 5.1 \u3067\u306f\u65b9\u6cd5\u304c\u9055\u3046\n#if LUA_VERSION_NUM >= 502\n  luaL_newlib(l, myMathLib);\n#else\n  luaL_register(l, \"myMath\", myMathLib);\n#endif\n  return 1;\n}\n\nint main(int ac, char* av[])\n{\n  lua_State* l = luaL_newstate();\n  luaL_openlibs(l);\n  // myLib = require('myLib') \u3068\u540c\u7b49\n  luaL_requiref(l, \"myLib\", luaopen_myLib, 1);\n  luaL_loadfile(l, fname);\n  if (lua_pcall(l, 0, 0, 0)) {\n    fprintf(stderr, \"cannot exec %s\\n\", fname);\n    fprintf(stderr, \"cannot exec add. %s\\n\", lua_tostring(l, -1));\n    return;\n  }\n  lua_close(l);\n}\n```\n\n# C \u304b\u3089 lua \u306e coroutine \u3092\u5236\u5fa1\u3059\u308b\n\n\u4e0b\u8a18, C \u306e\u95a2\u6570 `c_func()` \u306e\u547c\u3073\u51fa\u3057\u306b\u3088\u308a\u5b9f\u884c\u304c\u4e2d\u65ad\u3055\u308c,\nC \u8a00\u8a9e\u5074\u3067 `lua_resume()` \u3059\u308b\u3053\u3068\u306b\u3088\u308a\u4e2d\u65ad\u7b87\u6240\u304b\u3089\u518d\u958b\u3055\u308c\u308b\u3088\u3046\u306b\u3059\u308b.\n\u518d\u958b\u6642\u306b `c_func()` \u304b\u3089\u623b\u308a\u5024\u4ed8\u304d\u3067\u5236\u5fa1\u304c\u623b\u308b\u3088\u3046\u306b\u3059\u308b.\n\n```lua:func.lua\narg1 = \"arg1\"\nret1 = c_func(arg1)\nprint(\"ret1=\" .. ret1)\narg2 = \"arg2\"\nret2= c_func(arg2)\nprint(\"ret2=\" .. ret2)\narg3 = \"arg3\"\nret3= c_func(arg3)\nprint(\"ret3=\" .. ret3)\n```\n\n```c++:call.cpp\n// \u547c\u3073\u51fa\u3055\u308c\u308b\u3068 coroutine \u3092\u4e2d\u65ad\u3059\u308b\nstatic int\nl_func(lua_State* l)\n{\n  const char* arg = luaL_checkstring(l, -1);\n  printf(\"l_call, arg=%s\\n\", arg);\n  return lua_yield(l, 0);\n}\n\nint main(int ac, char* av[])\n{\n  lua_State* l = luaL_newstate();\n  luaL_openlibs(l);\n  lua_register(l, \"c_func\", c_func); // lua \u306b\u95a2\u6570\u3092\u767b\u9332\n  lua_State* co = lua_newthread(l); // co-routine \u7528\u306e thread\n  luaL_loadfile(co, \"func.lua\");\n  lua_resume(co, NULL, 0);\t// \u5b9f\u884c\u958b\u59cb\n  for (;;) {\n    sleep(1);\n    lua_pushstring(co, \"reval\"); // \u623b\u308a\u5024\u3092\u7a4d\u3080\n    int ret = lua_resume(co, NULL, 1); // \u5b9f\u884c\u518d\u958b\n    printf(\"lua_resume returns %d\\n\", ret);\n    if (ret == LUA_OK)\t\t// co-routine \u7d42\u4e86\n      break;\n  }\n  // co-routine's thread \u306e\u7247\u4ed8\u3051\u306f GC \u306b\u4efb\u305b\u308b\u4ee5\u5916\u65b9\u6cd5\u306a\u3057\n  lua_close(l);\n}\n```\n"}