{"context": "2010/3/17\u306e\u904e\u53bb\u30d6\u30ed\u30b0\u306e\u8ee2\u8f09\u3067\u3059\u3002\u5185\u5bb9\u304c\u53e4\u3044\u53ef\u80fd\u6027\u304c\u3042\u308a\u307e\u3059\u306e\u3067\u3054\u6ce8\u610f\u304f\u3060\u3055\u3044\u3002\n\u3061\u3068\u5fc5\u8981\u306b\u306a\u3063\u305f\u306e\u3067AES\u306b\u3064\u3044\u3066\u8abf\u3079\u3066\u307f\u307e\u3057\u305f\u3002\n\u307e\u305a\u6982\u7565\u3002DES\u306b\u4ee3\u308f\u3063\u3066\u898f\u683c\u5316\u3055\u308c\u305f\u5171\u901a\u9375\u6697\u53f7\u3002\u30d6\u30ed\u30c3\u30af\u9577\u306f128\u30d3\u30c3\u30c8\u56fa\u5b9a\u3002\u9375\u9577\u306f128\u30d3\u30c3\u30c8\u3001192\u30d3\u30c3\u30c8\u3001256\u30d3\u30c3\u30c8\u304c\u9078\u629e\u53ef\u80fd\u3002\nAES\u306e\u30bd\u30fc\u30b9\u306fBrian Gladman\u6c0f\u306e\u30b5\u30a4\u30c8\u3067\u516c\u958b\u3055\u308c\u3066\u3044\u307e\u3059\u3002URL\u306fhttp://fp.gladman.plus.com/\u3068\u3057\u3066\u7d39\u4ecb\u3055\u308c\u3066\u3044\u308b\u3053\u3068\u304c\u591a\u3044\u306e\u3067\u3059\u304c\u3001\u3053\u3061\u3089\u306f\u30ea\u30f3\u30af\u5207\u308c\u3067\u3057\u3066\u73fe\u5728\u306f http://www.gladman.me.uk/ \u3068\u306a\u3063\u3066\u3044\u308b\u3088\u3046\u3067\u3059\u3002\u3053\u3061\u3089\u306b\u306f\u30a2\u30bb\u30f3\u30d6\u30e9\u3092\u4f7f\u7528\u3057\u305f\u9ad8\u901f\u7248\u3068\u3001C\u8a00\u8a9e\u306e\u307f\u306e\u901a\u5e38\u7248\u304c\u516c\u958b\u3055\u308c\u3066\u3044\u307e\u3059\u3002\u4eca\u56de\u306f\u305d\u3053\u307e\u3067\u901f\u5ea6\u306b\u3053\u3060\u308f\u3063\u3066\u3044\u306a\u3044\u306e\u3068\u3001\u30a2\u30bb\u30f3\u30d6\u30e9\u306e\u74b0\u5883\u3092\u69cb\u7bc9\u3059\u308b\u306e\u304c\u9762\u5012\u306a\u306e\u3067\u3001C\u8a00\u8a9e\u7248\u306b\u3057\u307e\u3057\u305f\u3002\n\u3053\u306e\u30bd\u30fc\u30b9\u3092\u30b3\u30f3\u30d1\u30a4\u30eb\u3059\u308b\u3068\u3001\u6b21\u306e\u3088\u3046\u306a\u30a8\u30e9\u30fc\u304c\u51fa\u307e\u3057\u305f\u3002\ncc -c aes.c\naes.c: In function 'copy_block_nn':\naes.c:335: error: lvalue required as increment operand\naes.c:335: error: lvalue required as increment operand\naes.c: In function 'aes_set_key':\naes.c:513: warning: case label value exceeds maximum value for type\n*** Error code 1\n\n\u554f\u984c\u306b\u306a\u3063\u3066\u3044\u308b\u306e\u306f\u6b21\u306e\u90e8\u5206\u3067\u3059\u3002\nstatic void copy_block_nn( void * d, const void *s, uint_8t nn )\n{\n    while( nn-- ) {\n        *((uint_8t*)d)++ = *((uint_8t*)s)++;\n    }\n}\n\n\u30a8\u30e9\u30fc\u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u3050\u3050\u3063\u3066\u307f\u305f\u3068\u3053\u308d\u3001gcc4\u304b\u3089\u5f37\u5316\u3055\u308c\u305f\u30a8\u30e9\u30fc\u30c1\u30a7\u30c3\u30af\u306e\u3088\u3046\u3067\u3059\u3002\u3068\u308a\u3042\u3048\u305a\u6b21\u306e\u3088\u3046\u306a\u30b3\u30fc\u30c9\u306b\u4fee\u6b63\u3057\u3066\u30b3\u30f3\u30d1\u30a4\u30eb\u3092\u901a\u308b\u3088\u3046\u306b\u3057\u307e\u3057\u305f\u3002\nstatic void copy_block_nn( void * d, const void *s, uint_8t nn )\n{\n    while( nn-- ) {\n        //*((uint_8t*)d)++ = *((uint_8t*)s)++;\n        *((uint_8t*)d) = *((uint_8t*)s);\n        d += sizeof(uint_8t*);\n        s += sizeof(uint_8t*);\n    }\n}\n\n\u3082\u3046\u4e00\u3064\u306e513\u884c\u76ee\u306e\u8b66\u544a\u306f\u6b21\u306e\u3088\u3046\u306a\u30b3\u30fc\u30c9\u3067\u3059\u3002\nreturn_type aes_set_key( const unsigned char key[], length_type keylen, aes_cont\next ctx[1] )\n{\n    uint_8t cc, rc, hi;\n\n    switch( keylen )\n    {\n    case 16:\n    case 128:\n        keylen = 16;\n        break;\n    case 24:\n    case 192:\n        keylen = 24;\n        break;\n    case 32:\n    case 256:\n        keylen = 32;\n        break;\n    default:\n        ctx->rnd = 0;\n        return -1;\n    }\n\nunsigned char\u3067\u3042\u308bkeylen\u306b\u5bfe\u3057\u3066256\u3067\u6bd4\u8f03\u3057\u3066\u3044\u308b\u306e\u304c\u8b66\u544a\u306b\u306a\u3063\u3066\u3044\u308b\u308f\u3051\u3067\u3059\u306d\u3002\u30b3\u30fc\u30c9\u3092\u898b\u308b\u9650\u308a\u52d5\u4f5c\u306b\u554f\u984c\u306f\u306a\u3055\u305d\u3046\u306a\u306e\u3067\u653e\u7f6e\u3057\u307e\u3059\u3002\n\u307e\u305a\u306f\u3001\u3053\u3093\u306a\u611f\u3058\u306e\u30c6\u30b9\u30c8\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u66f8\u3044\u3066\u52d5\u4f5c\u3092\u78ba\u8a8d\u3057\u3066\u307f\u307e\u3059\u3002\n#include <stdio.h>\n#include <string.h>\n\n#include \"aes.h\"\n\nvoid dump( char *label, unsigned char *block )\n{\n    int i;\n\n    printf( \"%s: \", label );\n    for( i = 0; i < 16; i++ )\n        printf( \"%02x\", block[i] );\n    printf( \"\\n\" );\n}\n\nint main()\n{\n    unsigned char key[] = \"0123456789ABCDEF\";\n    unsigned char data[] = \"abcdefghijklmnop\";\n    aes_context ctx[1];\n    unsigned char encrypted[N_BLOCK], decrypted[N_BLOCK];\n\n    aes_set_key( key, 16, ctx );\n    dump( \"DATA\", data );\n\n    aes_encrypt( data, encrypted, ctx );\n    dump( \"ENCRYPTED\", encrypted );\n\n    aes_decrypt( encrypted, decrypted, ctx );\n    dump( \"DECRYPTED\", decrypted );\n\n    return( 0 );\n}\n\n\u5b9f\u884c\u7d50\u679c\u306f\u6b21\u306e\u901a\u308a\u3067\u3059\u3002\n$ ./test\nDATA: 6162636465666768696a6b6c6d6e6f70\nENCRYPTED: b4f487a200158388e17ec6bbcc231d65\nDECRYPTED: 6162636465666768696a6b6c6d6e6f70\n\n\u7121\u4e8b\u3001\u5143\u901a\u308a\u306b\u5fa9\u53f7\u3067\u304d\u3066\u3044\u308b\u3053\u3068\u304c\u78ba\u8a8d\u3067\u304d\u307e\u3057\u305f\u3002\n\u6b21\u306b\u3001perl\u3067\u3082\u8a66\u3057\u3066\u307f\u307e\u3059\u3002\n#!/usr/bin/perl\n\nuse strict;\nuse warnings;\n\nuse Crypt::OpenSSL::AES;\n\nsub dump {\n    my( $label, $block ) = @_;\n\n    printf( \"%s: \", $label );\n    printf( \"%s\\n\", unpack( \"H*\", $block ) );\n}\n\n\nmy $key = '0123456789ABCDEF';\nmy $data = 'abcdefghijklmnop';\nmy( $encrypted, $decrypted );\n\nmy $cipher = new Crypt::OpenSSL::AES( $key );\n\n&amp;dump( \"DATA\", $data );\n$encrypted = $cipher->encrypt( $data );\n&amp;dump( \"ENCRYPTED\", $encrypted );\n$decrypted = $cipher->decrypt( $encrypted );\n&amp;dump( \"DECRYPTED\", $decrypted );\n\n\u5b9f\u884c\u3057\u307e\u3059\u3002\n$ ./aes.pl\nDATA: 6162636465666768696a6b6c6d6e6f70\nENCRYPTED: b4f487a200158388e17ec6bbcc231d65\nDECRYPTED: 6162636465666768696a6b6c6d6e6f70\n\n\u5f53\u7136\u3067\u3059\u304c\u3001C\u8a00\u8a9e\u7248\u3068\u540c\u3058\u7d50\u679c\u3067\u3059\u306d\u3002\n\u3053\u308c\u307e\u3067\u306f\u6697\u53f7\u5316\u3059\u308b\u30c7\u30fc\u30bf\u3092128\u30d3\u30c3\u30c8=16\u30d0\u30a4\u30c8\u306b\u9650\u3063\u3066\u304d\u307e\u3057\u305f\u3002\u3057\u304b\u3057\u3001\u5b9f\u969b\u306b\u4f7f\u7528\u3059\u308b\u5834\u5408\u306b\u306f\u3082\u3063\u3068\u5927\u91cf\u306e\u30c7\u30fc\u30bf\u3092\u6271\u3046\u308f\u3051\u3067\u3059\u304b\u3089\u3001\u3053\u308c\u3060\u3051\u3067\u306f\u4e0d\u5341\u5206\u3067\u3059\u3002\u305d\u3053\u3067\u3001\u30d6\u30ed\u30c3\u30af\u6697\u53f7\u5316\u30e2\u30fc\u30c9\u3068\u3044\u3046\u3082\u306e\u304c\u767b\u5834\u3057\u307e\u3059\u3002\u30d6\u30ed\u30c3\u30af\u6697\u53f7\u5316\u30e2\u30fc\u30c9\u306a\u3069\u304c\u53c2\u8003\u306b\u306a\u308a\u307e\u3059\u3002\n\u30d6\u30ed\u30c3\u30af\u6697\u53f7\u5316\u30e2\u30fc\u30c9\u306b\u306f\n* CBC - \u6697\u53f7\u6587\u30d6\u30ed\u30c3\u30af\u9023\u9396\u30e2\u30fc\u30c9(Cipher Block Chaining)\n* OFB - \u51fa\u529b\u30d5\u30a3\u30fc\u30c9\u30d0\u30c3\u30af\u30e2\u30fc\u30c9(Oftput Feed Back)\n* CFB - \u6697\u53f7\u30d5\u30a3\u30fc\u30c9\u30d0\u30c3\u30af\u30e2\u30fc\u30c9(Cipher Feed Back)\n* ECB - \u6697\u53f7\u30d6\u30c3\u30af\u30e2\u30fc\u30c9(Electric Code Book)\n\u306a\u3069\u304c\u3042\u308a\u307e\u3059\u3002\u4e00\u756a\u5358\u7d14\u306a\u306e\u304cECB\u3067\u3001\u3053\u308c\u306f\u5165\u529b\u30c7\u30fc\u30bf\u309216\u30d0\u30a4\u30c8\u3054\u3068\u306b\u533a\u5207\u3063\u3066\u6697\u53f7\u5316\u3059\u308b\u3082\u306e\u3067\u3059\u3002\u3057\u304b\u3057\u3001\u3053\u306e\u3088\u3046\u306a\u5229\u7528\u306e\u4ed5\u65b9\u3067\u306fBirthday Attack\u306b\u5f31\u3044\u3068\u3044\u3046\u6b20\u70b9\u304c\u3042\u308a\u307e\u3059\u306e\u3067\u3001\u3042\u307e\u308a\u4f7f\u7528\u3059\u308b\u3079\u304d\u3067\u306f\u3042\u308a\u307e\u305b\u3093\u3002\n\u3068\u3044\u3046\u3053\u3068\u3067\u3001CBC\u30e2\u30fc\u30c9\u3092\u7528\u3044\u3066\u6697\u53f7\u5316\u3068\u5fa9\u53f7\u3092\u8a66\u3057\u3066\u307f\u307e\u3059\u3002\n#!/usr/bin/perl\n\nuse strict;\nuse warnings;\n\nuse Crypt::CBC;\n\nsub dump {\n    my( $label, $block ) = @_;\n\n    printf( \"%s: \", $label );\n    printf( \"%s\\n\", unpack( \"H*\", $block ) );\n}\n\n\nmy $key = '0123456789ABCDEF';\nmy $data = 'abcdefghijklmnop';\nmy( $encrypted, $decrypted );\n\nmy $cipher = new Crypt::CBC( -key=>$key, -cipher=>'Crypt::Rijndael' );\n\n&dump( \"DATA\", $data );\n$encrypted = $cipher->encrypt( $data );\n&dump( \"ENCRYPTED\", $encrypted );\n$decrypted = $cipher->decrypt( $encrypted );\n&dump( \"DECRYPTED\", $decrypted );\n\n\u5b9f\u884c\u7d50\u679c\u306f\u6b21\u306e\u901a\u308a\u3067\u3059\u3002\n$ ./aes2.pl\nDATA: 6162636465666768696a6b6c6d6e6f70\nENCRYPTED: 53616c7465645f5fbab6ccd1ce672cfd3a323d2b7a2b1c1013b6653fa6eb33886f85c52582f6d33ba57dab83bd0a906f\nDECRYPTED: 6162636465666768696a6b6c6d6e6f70\n\nPHP\u3067\u3082\u8a66\u3057\u3066\u307f\u307e\u3057\u305f\u3002\nfunction dump( $label, $data ) {\n    print \"$label: \" . bin2hex( $data ) . \"\\n\";\n}\n\n$key = '0123456789ABCDEF';\n$data = 'abcdefghijklmnop';\n\ndump( 'DATA', $data );\n\nsrand();\n$size = mcrypt_get_iv_size(MCRYPT_RIJNDAEL_128, MCRYPT_MODE_CBC);\n$iv = mcrypt_create_iv($size, MCRYPT_RAND);\n\n$encrypted = mcrypt_encrypt(MCRYPT_RIJNDAEL_128, $key, $data, MCRYPT_MODE_CBC, $\niv);\ndump( 'ENCRYPTED', $encrypted );\n\n$decrypted = mcrypt_decrypt(MCRYPT_RIJNDAEL_128, $key, $encrypted, MCRYPT_MODE_C\nBC, $iv);\ndump( 'DECRYPTED', $decrypted );\n\n\u5b9f\u884c\u7d50\u679c\u306f\u6b21\u306e\u901a\u308a\u3067\u3059\u3002\n$ php test.php\nDATA: 6162636465666768696a6b6c6d6e6f70\nENCRYPTED: c051918bf93d8fffd09379c0c6f4db75\nDECRYPTED: 6162636465666768696a6b6c6d6e6f70\n\n**2010/3/17\u306e\u904e\u53bb\u30d6\u30ed\u30b0\u306e\u8ee2\u8f09\u3067\u3059\u3002\u5185\u5bb9\u304c\u53e4\u3044\u53ef\u80fd\u6027\u304c\u3042\u308a\u307e\u3059\u306e\u3067\u3054\u6ce8\u610f\u304f\u3060\u3055\u3044\u3002**\n\n\u3061\u3068\u5fc5\u8981\u306b\u306a\u3063\u305f\u306e\u3067AES\u306b\u3064\u3044\u3066\u8abf\u3079\u3066\u307f\u307e\u3057\u305f\u3002\n\n\u307e\u305a\u6982\u7565\u3002DES\u306b\u4ee3\u308f\u3063\u3066\u898f\u683c\u5316\u3055\u308c\u305f\u5171\u901a\u9375\u6697\u53f7\u3002\u30d6\u30ed\u30c3\u30af\u9577\u306f128\u30d3\u30c3\u30c8\u56fa\u5b9a\u3002\u9375\u9577\u306f128\u30d3\u30c3\u30c8\u3001192\u30d3\u30c3\u30c8\u3001256\u30d3\u30c3\u30c8\u304c\u9078\u629e\u53ef\u80fd\u3002\n\nAES\u306e\u30bd\u30fc\u30b9\u306fBrian Gladman\u6c0f\u306e\u30b5\u30a4\u30c8\u3067\u516c\u958b\u3055\u308c\u3066\u3044\u307e\u3059\u3002URL\u306f`http://fp.gladman.plus.com/`\u3068\u3057\u3066\u7d39\u4ecb\u3055\u308c\u3066\u3044\u308b\u3053\u3068\u304c\u591a\u3044\u306e\u3067\u3059\u304c\u3001\u3053\u3061\u3089\u306f\u30ea\u30f3\u30af\u5207\u308c\u3067\u3057\u3066\u73fe\u5728\u306f http://www.gladman.me.uk/ \u3068\u306a\u3063\u3066\u3044\u308b\u3088\u3046\u3067\u3059\u3002\u3053\u3061\u3089\u306b\u306f\u30a2\u30bb\u30f3\u30d6\u30e9\u3092\u4f7f\u7528\u3057\u305f\u9ad8\u901f\u7248\u3068\u3001C\u8a00\u8a9e\u306e\u307f\u306e\u901a\u5e38\u7248\u304c\u516c\u958b\u3055\u308c\u3066\u3044\u307e\u3059\u3002\u4eca\u56de\u306f\u305d\u3053\u307e\u3067\u901f\u5ea6\u306b\u3053\u3060\u308f\u3063\u3066\u3044\u306a\u3044\u306e\u3068\u3001\u30a2\u30bb\u30f3\u30d6\u30e9\u306e\u74b0\u5883\u3092\u69cb\u7bc9\u3059\u308b\u306e\u304c\u9762\u5012\u306a\u306e\u3067\u3001C\u8a00\u8a9e\u7248\u306b\u3057\u307e\u3057\u305f\u3002\n\n\u3053\u306e\u30bd\u30fc\u30b9\u3092\u30b3\u30f3\u30d1\u30a4\u30eb\u3059\u308b\u3068\u3001\u6b21\u306e\u3088\u3046\u306a\u30a8\u30e9\u30fc\u304c\u51fa\u307e\u3057\u305f\u3002\n\n```\ncc -c aes.c\naes.c: In function 'copy_block_nn':\naes.c:335: error: lvalue required as increment operand\naes.c:335: error: lvalue required as increment operand\naes.c: In function 'aes_set_key':\naes.c:513: warning: case label value exceeds maximum value for type\n*** Error code 1\n```\n\n\u554f\u984c\u306b\u306a\u3063\u3066\u3044\u308b\u306e\u306f\u6b21\u306e\u90e8\u5206\u3067\u3059\u3002\n\n```\nstatic void copy_block_nn( void * d, const void *s, uint_8t nn )\n{\n    while( nn-- ) {\n        *((uint_8t*)d)++ = *((uint_8t*)s)++;\n    }\n}\n```\n\n\u30a8\u30e9\u30fc\u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u3050\u3050\u3063\u3066\u307f\u305f\u3068\u3053\u308d\u3001gcc4\u304b\u3089\u5f37\u5316\u3055\u308c\u305f\u30a8\u30e9\u30fc\u30c1\u30a7\u30c3\u30af\u306e\u3088\u3046\u3067\u3059\u3002\u3068\u308a\u3042\u3048\u305a\u6b21\u306e\u3088\u3046\u306a\u30b3\u30fc\u30c9\u306b\u4fee\u6b63\u3057\u3066\u30b3\u30f3\u30d1\u30a4\u30eb\u3092\u901a\u308b\u3088\u3046\u306b\u3057\u307e\u3057\u305f\u3002\n\n```\nstatic void copy_block_nn( void * d, const void *s, uint_8t nn )\n{\n    while( nn-- ) {\n        //*((uint_8t*)d)++ = *((uint_8t*)s)++;\n        *((uint_8t*)d) = *((uint_8t*)s);\n        d += sizeof(uint_8t*);\n        s += sizeof(uint_8t*);\n    }\n}\n```\n\n\u3082\u3046\u4e00\u3064\u306e513\u884c\u76ee\u306e\u8b66\u544a\u306f\u6b21\u306e\u3088\u3046\u306a\u30b3\u30fc\u30c9\u3067\u3059\u3002\n\n```\nreturn_type aes_set_key( const unsigned char key[], length_type keylen, aes_cont\next ctx[1] )\n{\n    uint_8t cc, rc, hi;\n\n    switch( keylen )\n    {\n    case 16:\n    case 128:\n        keylen = 16;\n        break;\n    case 24:\n    case 192:\n        keylen = 24;\n        break;\n    case 32:\n    case 256:\n        keylen = 32;\n        break;\n    default:\n        ctx->rnd = 0;\n        return -1;\n    }\n```\n\nunsigned char\u3067\u3042\u308bkeylen\u306b\u5bfe\u3057\u3066256\u3067\u6bd4\u8f03\u3057\u3066\u3044\u308b\u306e\u304c\u8b66\u544a\u306b\u306a\u3063\u3066\u3044\u308b\u308f\u3051\u3067\u3059\u306d\u3002\u30b3\u30fc\u30c9\u3092\u898b\u308b\u9650\u308a\u52d5\u4f5c\u306b\u554f\u984c\u306f\u306a\u3055\u305d\u3046\u306a\u306e\u3067\u653e\u7f6e\u3057\u307e\u3059\u3002\n\n\u307e\u305a\u306f\u3001\u3053\u3093\u306a\u611f\u3058\u306e\u30c6\u30b9\u30c8\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u66f8\u3044\u3066\u52d5\u4f5c\u3092\u78ba\u8a8d\u3057\u3066\u307f\u307e\u3059\u3002\n\n```\n#include <stdio.h>\n#include <string.h>\n\n#include \"aes.h\"\n\nvoid dump( char *label, unsigned char *block )\n{\n    int i;\n\n    printf( \"%s: \", label );\n    for( i = 0; i < 16; i++ )\n        printf( \"%02x\", block[i] );\n    printf( \"\\n\" );\n}\n\nint main()\n{\n    unsigned char key[] = \"0123456789ABCDEF\";\n    unsigned char data[] = \"abcdefghijklmnop\";\n    aes_context ctx[1];\n    unsigned char encrypted[N_BLOCK], decrypted[N_BLOCK];\n\n    aes_set_key( key, 16, ctx );\n    dump( \"DATA\", data );\n\n    aes_encrypt( data, encrypted, ctx );\n    dump( \"ENCRYPTED\", encrypted );\n\n    aes_decrypt( encrypted, decrypted, ctx );\n    dump( \"DECRYPTED\", decrypted );\n\n    return( 0 );\n}\n```\n\n\u5b9f\u884c\u7d50\u679c\u306f\u6b21\u306e\u901a\u308a\u3067\u3059\u3002\n\n```\n$ ./test\nDATA: 6162636465666768696a6b6c6d6e6f70\nENCRYPTED: b4f487a200158388e17ec6bbcc231d65\nDECRYPTED: 6162636465666768696a6b6c6d6e6f70\n```\n\n\u7121\u4e8b\u3001\u5143\u901a\u308a\u306b\u5fa9\u53f7\u3067\u304d\u3066\u3044\u308b\u3053\u3068\u304c\u78ba\u8a8d\u3067\u304d\u307e\u3057\u305f\u3002\n\n\u6b21\u306b\u3001perl\u3067\u3082\u8a66\u3057\u3066\u307f\u307e\u3059\u3002\n\n```\n#!/usr/bin/perl\n\nuse strict;\nuse warnings;\n\nuse Crypt::OpenSSL::AES;\n\nsub dump {\n    my( $label, $block ) = @_;\n\n    printf( \"%s: \", $label );\n    printf( \"%s\\n\", unpack( \"H*\", $block ) );\n}\n\n\nmy $key = '0123456789ABCDEF';\nmy $data = 'abcdefghijklmnop';\nmy( $encrypted, $decrypted );\n\nmy $cipher = new Crypt::OpenSSL::AES( $key );\n\n&amp;dump( \"DATA\", $data );\n$encrypted = $cipher->encrypt( $data );\n&amp;dump( \"ENCRYPTED\", $encrypted );\n$decrypted = $cipher->decrypt( $encrypted );\n&amp;dump( \"DECRYPTED\", $decrypted );\n```\n\n\u5b9f\u884c\u3057\u307e\u3059\u3002\n\n```\n$ ./aes.pl\nDATA: 6162636465666768696a6b6c6d6e6f70\nENCRYPTED: b4f487a200158388e17ec6bbcc231d65\nDECRYPTED: 6162636465666768696a6b6c6d6e6f70\n```\n\n\u5f53\u7136\u3067\u3059\u304c\u3001C\u8a00\u8a9e\u7248\u3068\u540c\u3058\u7d50\u679c\u3067\u3059\u306d\u3002\n\n\u3053\u308c\u307e\u3067\u306f\u6697\u53f7\u5316\u3059\u308b\u30c7\u30fc\u30bf\u3092128\u30d3\u30c3\u30c8=16\u30d0\u30a4\u30c8\u306b\u9650\u3063\u3066\u304d\u307e\u3057\u305f\u3002\u3057\u304b\u3057\u3001\u5b9f\u969b\u306b\u4f7f\u7528\u3059\u308b\u5834\u5408\u306b\u306f\u3082\u3063\u3068\u5927\u91cf\u306e\u30c7\u30fc\u30bf\u3092\u6271\u3046\u308f\u3051\u3067\u3059\u304b\u3089\u3001\u3053\u308c\u3060\u3051\u3067\u306f\u4e0d\u5341\u5206\u3067\u3059\u3002\u305d\u3053\u3067\u3001\u30d6\u30ed\u30c3\u30af\u6697\u53f7\u5316\u30e2\u30fc\u30c9\u3068\u3044\u3046\u3082\u306e\u304c\u767b\u5834\u3057\u307e\u3059\u3002[\u30d6\u30ed\u30c3\u30af\u6697\u53f7\u5316\u30e2\u30fc\u30c9](http://www.triplefalcon.com/Lexicon/Encryption-Block-Mode-1.htm)\u306a\u3069\u304c\u53c2\u8003\u306b\u306a\u308a\u307e\u3059\u3002\n\n\u30d6\u30ed\u30c3\u30af\u6697\u53f7\u5316\u30e2\u30fc\u30c9\u306b\u306f\n* CBC - \u6697\u53f7\u6587\u30d6\u30ed\u30c3\u30af\u9023\u9396\u30e2\u30fc\u30c9(Cipher Block Chaining)\n* OFB - \u51fa\u529b\u30d5\u30a3\u30fc\u30c9\u30d0\u30c3\u30af\u30e2\u30fc\u30c9(Oftput Feed Back)\n* CFB - \u6697\u53f7\u30d5\u30a3\u30fc\u30c9\u30d0\u30c3\u30af\u30e2\u30fc\u30c9(Cipher Feed Back)\n* ECB - \u6697\u53f7\u30d6\u30c3\u30af\u30e2\u30fc\u30c9(Electric Code Book)\n\u306a\u3069\u304c\u3042\u308a\u307e\u3059\u3002\u4e00\u756a\u5358\u7d14\u306a\u306e\u304cECB\u3067\u3001\u3053\u308c\u306f\u5165\u529b\u30c7\u30fc\u30bf\u309216\u30d0\u30a4\u30c8\u3054\u3068\u306b\u533a\u5207\u3063\u3066\u6697\u53f7\u5316\u3059\u308b\u3082\u306e\u3067\u3059\u3002\u3057\u304b\u3057\u3001\u3053\u306e\u3088\u3046\u306a\u5229\u7528\u306e\u4ed5\u65b9\u3067\u306fBirthday Attack\u306b\u5f31\u3044\u3068\u3044\u3046\u6b20\u70b9\u304c\u3042\u308a\u307e\u3059\u306e\u3067\u3001\u3042\u307e\u308a\u4f7f\u7528\u3059\u308b\u3079\u304d\u3067\u306f\u3042\u308a\u307e\u305b\u3093\u3002\n\n\u3068\u3044\u3046\u3053\u3068\u3067\u3001CBC\u30e2\u30fc\u30c9\u3092\u7528\u3044\u3066\u6697\u53f7\u5316\u3068\u5fa9\u53f7\u3092\u8a66\u3057\u3066\u307f\u307e\u3059\u3002\n\n```\n#!/usr/bin/perl\n\nuse strict;\nuse warnings;\n\nuse Crypt::CBC;\n\nsub dump {\n    my( $label, $block ) = @_;\n\n    printf( \"%s: \", $label );\n    printf( \"%s\\n\", unpack( \"H*\", $block ) );\n}\n\n\nmy $key = '0123456789ABCDEF';\nmy $data = 'abcdefghijklmnop';\nmy( $encrypted, $decrypted );\n\nmy $cipher = new Crypt::CBC( -key=>$key, -cipher=>'Crypt::Rijndael' );\n\n&dump( \"DATA\", $data );\n$encrypted = $cipher->encrypt( $data );\n&dump( \"ENCRYPTED\", $encrypted );\n$decrypted = $cipher->decrypt( $encrypted );\n&dump( \"DECRYPTED\", $decrypted );\n```\n\n\u5b9f\u884c\u7d50\u679c\u306f\u6b21\u306e\u901a\u308a\u3067\u3059\u3002\n\n```\n$ ./aes2.pl\nDATA: 6162636465666768696a6b6c6d6e6f70\nENCRYPTED: 53616c7465645f5fbab6ccd1ce672cfd3a323d2b7a2b1c1013b6653fa6eb33886f85c52582f6d33ba57dab83bd0a906f\nDECRYPTED: 6162636465666768696a6b6c6d6e6f70\n```\n\nPHP\u3067\u3082\u8a66\u3057\u3066\u307f\u307e\u3057\u305f\u3002\n\n```\nfunction dump( $label, $data ) {\n    print \"$label: \" . bin2hex( $data ) . \"\\n\";\n}\n\n$key = '0123456789ABCDEF';\n$data = 'abcdefghijklmnop';\n\ndump( 'DATA', $data );\n\nsrand();\n$size = mcrypt_get_iv_size(MCRYPT_RIJNDAEL_128, MCRYPT_MODE_CBC);\n$iv = mcrypt_create_iv($size, MCRYPT_RAND);\n\n$encrypted = mcrypt_encrypt(MCRYPT_RIJNDAEL_128, $key, $data, MCRYPT_MODE_CBC, $\niv);\ndump( 'ENCRYPTED', $encrypted );\n\n$decrypted = mcrypt_decrypt(MCRYPT_RIJNDAEL_128, $key, $encrypted, MCRYPT_MODE_C\nBC, $iv);\ndump( 'DECRYPTED', $decrypted );\n```\n\n\u5b9f\u884c\u7d50\u679c\u306f\u6b21\u306e\u901a\u308a\u3067\u3059\u3002\n\n```\n$ php test.php\nDATA: 6162636465666768696a6b6c6d6e6f70\nENCRYPTED: c051918bf93d8fffd09379c0c6f4db75\nDECRYPTED: 6162636465666768696a6b6c6d6e6f70\n```\n", "tags": ["aes", "C\u8a00\u8a9e"]}