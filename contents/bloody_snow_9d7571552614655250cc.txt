{"context": " More than 1 year has passed since last update.\n\nmap\u306e\u623b\u308a\u5024\u306e\u8b66\u544a\nmap\u3092for\u6587\u4ee3\u308f\u308a\u306b\u4f7f\u3063\u3066\u3044\u308b\u6642\u306e\u623b\u308a\u5024\u3092\u53d7\u3051\u53d6\u3089\u306a\u3044\u3068\u8b66\u544a\u3092\u53d7\u3051\u308b\u3002\n\u306a\u304a\u3001for\u6587\u3067\u66f8\u304b\u306a\u3044\u7406\u7531\u306ffilter\u3067\u30d2\u30c3\u30c8\u3057\u305f\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306b\u5bfe\u3057\u3066\u306e\u307f\u5b9f\u884c\u3057\u305f\u3044\u7b49\u306e\u7406\u7531\u304b\u3089\n\n1.2\nlet views:[UIView]\nviews.filter { $0.tag > 9 }.map { $0.hidden = true }\n\n\n\n2.0\nlet views:[UIView]\n_ = views.filter { $0.tag > 9 }.map { $0.hidden = ture }\n\n\nmap\u3092apply\u4ee3\u308f\u308a\u306b\u4f7f\u3046\u306e\u306f\u3088\u308d\u3057\u304f\u306a\u3044\u306e\u3067\u3001\u4e0b\u8a18\u306e\u3088\u3046\u306b\u66f8\u304f\u306e\u304c\u7d20\u76f4\u306a\u3088\u3046\u3067\u3059\u3002(\u30b3\u30e1\u30f3\u30c8\u6307\u6458\u53cd\u6620)\n\nfix?\nlet views:[UIView]\nviews.filter { $.tag > 9 }.forEach { $0.hidden = true }\n\n\n\n\u30d5\u30a1\u30af\u30c8\u30ea\u30e1\u30bd\u30c3\u30c9\u3067\u306eself()\u306e\u4f7f\u7528\u7981\u6b62\n\n1.2\nclass func create() -> Self {\n    return self()\n}\n\n\n\n2.0\nclass func create() -> Self {\n    return self.init()\n}\n\n\n\n\u5024\u306e\u518d\u4ee3\u5165\u3092\u3057\u306a\u3044var\u306e\u8b66\u544a\nswift1.2\u306e\u9803\u306f\u30d7\u30ed\u30d1\u30c6\u30a3\u3092\u5909\u66f4\u3059\u308b\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306fvar\u3067\u5ba3\u8a00\u3057\u3001\u30bb\u30c3\u30bf\u30fc\u7b49\u3092\u7528\u3044\u3066\u5909\u66f4\u3057\u3066\u3044\u305f\u304c\u3001swift2.0\u304b\u3089\u306flet\u3067\u5ba3\u8a00\u3057\u3066\u3057\u307e\u3063\u305f\u65b9\u304c\u3044\u3044\u3088\u3046\u3060\n\n1.2\nvar attributedStr = NSMutableAttributedString()\nattributedStr.appendAttributedString(NSAttributedString(string: \"hoge\"))\n\n\n\n2.0\nlet attributedStr = NSMutableAttributedString()\nattributedStr.appendAttributedString(NSAttributedString(string: \"hoge\"))\n\n\n\nNSErrorPointer\u3092\u8981\u6c42\u3057\u3066\u3044\u305fAPI\u306e\u691c\u67fb\u4f8b\u5916\u5316\nNSError\u306e\u30c1\u30a7\u30c3\u30af\u304c\u4e0d\u8981\u306a\u5834\u5408\u3001try?\u3067\u6210\u529f\u3059\u308c\u3070\u7d50\u679c\u304c\u3001\u5931\u6557\u3057\u305f\u5834\u5408\u306fnil\u304c\u5165\u3063\u3066\u304f\u308c\u308b\u306e\u3067\u3001\u7d50\u69cb\u4fbf\u5229\u305d\u3046\u3002\u5fc5\u8981\u306a\u5834\u5408\u306fdo { try hoge() } catch { }\u3068\u66f8\u3051\u3070\u3044\u3044\n\n1.2\nextension String {\n    func decodeSanitization() -> String? {\n        let encodedData = dataUsingEncoding(NSUTF8StringEncoding)\n        let attributedOptions : [String: AnyObject] = [NSDocumentTypeDocumentAttribute: NSHTMLTextDocumentType, NSCharacterEncodingDocumentAttribute: NSUTF8StringEncoding]\n        let attributedString = encodedData != nil ? NSAttributedString(data: encodedData!, options: attributedOptions, documentAttributes: nil, error: nil) : nil\n        return attributedString?.string\n    }\n}\n\n\n\n2.0\nextension String {\n    func decodeSanitization() -> String? {\n        guard let encodedData = dataUsingEncoding(NSUTF8StringEncoding) else { return nil }\n        let attributedOptions : [String: AnyObject] = [NSDocumentTypeDocumentAttribute: NSHTMLTextDocumentType, NSCharacterEncodingDocumentAttribute: NSUTF8StringEncoding]\n        let attributedString = try? NSAttributedString(data: encodedData, options: attributedOptions, documentAttributes: nil)\n        return attributedString?.string\n    }\n}\n\n\n\n\u4e00\u90e8\u306e\u30e1\u30bd\u30c3\u30c9\u306e\u30d7\u30ed\u30d1\u30c6\u30a3\u5316\n\n1.2\nlet tableView: UITableView\nlet indexPath = tableView.indexPathForSelectedRow()\n\n\n\n2.0\nlet tableView: UITableView\nlet indexPath = tableView.indexPathForSelectedRow\n\n\n\n1.2\nlet view: UIView\nview.setTranslatesAutoresizingMaskIntoConstraints(false)\n\n\n\n2.0\nlet view: UIView\nview.translatesAutoresizingMaskIntoConstraints = false\n\n\n\nguard\u306e\u5c0e\u5165(\u9014\u4e2d\u3067\u51e6\u7406\u3092\u5207\u308a\u4e0a\u3052\u308b\u5834\u5408\u306eif)\nguard\u3067\u610f\u8b58\u7684\u306b\u51e6\u7406\u3092\u629c\u3051\u3066\u3044\u304f\u66f8\u304d\u65b9\u3092\u3057\u305f\u65b9\u304c\u3001if\u306e\u30cd\u30b9\u30c8\u304c\u6df1\u304f\u306a\u3089\u306a\u3044\u306e\u3067\u3088\u3044\u304b\u3082\u3002\n\n1.2\nlet hoge: String?\nif let fuga = hoge {\n    // do something\n    piyo(fuga)\n} else { return }\n\n\n\n2.0\nlet hoge: String?\nguard let fuga = hoge else { return }\n// do something\npiyo(fuga)\n\n\n\nfunc\u306e\u7701\u7565\u547c\u3073\u51fa\u3057\u306e\u7981\u6b62\uff1f\n\u305d\u3082\u305d\u30821.2\u306e\u6642\u306b\u53ef\u80fd\u3060\u3063\u305f\u306e\u304b\u3088\u304f\u77e5\u3089\u306a\u3044\u306e\u3067\u3059\u304c\u3001\u30e9\u30d9\u30eb\u3092\u7701\u7565\u3057\u3066\u3044\u308b\u547c\u3073\u65b9\u304c\u30b3\u30f3\u30d1\u30a4\u30eb\u901a\u3063\u3066\u3044\u305f\u306e\u304c\u3001\u901a\u3089\u306a\u304f\u306a\u3063\u3066\u3044\u305f\u306e\u3067\u4fee\u6b63\n\n1.2\nfunc newTopics(topics: [Topic], range: NSRange) -> [Topic] { // do something }\nlet topics: [Topic]\nlet range: NSRange\nlet newTopics = newTopics(topics, range)\n\n\n\n2.0\nfunc newTopics(topics: [Topic], range: NSRange) -> [Topic] { // do something }\nlet topics: [Topic]\nlet range: NSRange\nlet newTopics = newTopics(topics, range: range)\n\n\n\nnil\u30c1\u30a7\u30c3\u30af\u4ee3\u308f\u308a\u306e\u675f\u7e1b\u69cb\u6587\u306e\u8b66\u544a\n\n1.2\nlet error: NSError?\nif let e = error { // do something }\n\n\n\n2.0\nlet error: NSError?\nif let _ = error { // do something }\n\n\n\ncount\u95a2\u6570\u304cCollectionType\u306eextension\u3068\u3057\u3066\u5b9f\u88c5\n\n1.2\nlet str: String = \"hoge\"\nlet length = count(str.utf16)\n\n\n\n2.0\nlet str: String = \"hoge\"\nlet length = str.characters.count\n\n\n\n\u30af\u30e9\u30b9\u5ba3\u8a00\u306b@objc\u3092\u4ed8\u4e0e\u3059\u308b\u5834\u5408\u306fNSObject\u3092\u7d99\u627f\u3059\u308b\u5fc5\u8981\u304c\u3042\u308b\n\n1.2\n@objc class Hoge {\n}\n@objc(Fuga) class Fuga {\n}\n\n\n\n2.0\n@objc class Hoge : NSObject {\n}\n@objc(Fuga) class Fuga : NSObject {\n}\n\n\n\n\u4e00\u90e8\u306e\u30d7\u30ed\u30d1\u30c6\u30a3\u306e\u975eOptional\u5316\n\nNSURL\u306eabsoluteString\u306e\u975eOptional\u5316\nNSURL\u306escheme\u306e\u975eOptional\u5316\n\n\n1.2\nlet url: NSURL\nlet str: String = url.absoluteString ?? \"\"\n\n\n\n2.0\nlet url: NSURL\nlet str: String = url.absoluteString\n\n\n\nString\u306estringByReplacingOccurrencesOfString\u306bdefault\u5f15\u6570\u5c0e\u5165\n\n1.2\nlet orig: String\nlet converted = orig.stringByReplacingOccurrencesOfString(\"\\r\\n\", withString: \"\\n\", options: nil, range: nil)\n\n\n\n2.0\nlet orig: String\nlet converted = orig.stringByReplacingOccurrencesOfString(\"\\r\\n\", withString: \"\\n\")\n\n\n\njoin\u95a2\u6570\u304cSequenceType\u306eextension\u3068\u3057\u3066\u5b9f\u88c5\n\n1.2\nlet strs = [\"hoge\", \"fuga\", \"piyo\"]\nlet result = join(\",\", strs)\n\n\n\n2.0\nlet strs = [\"hoge\", \"fuga\", \"piyo\"]\nlet result = strs.joinWithSeparator(\",\")\n\n\n\nsorted\u95a2\u6570\u304csort\u306b\n\n1.2\nclass Hoge {\n    var order: Int\n}\nlet hoges: [Hoge]\nlet sorted = hoges.sorted { (lhs, rhs) in return lhs.order < rhs.order }\n\n\n\n2.0\nclass Hoge {\n    var order: Int\n}\nlet hoges: [Hoge]\nlet sorted = hoges.sort { (lhs, rhs) in return lhs.order < rhs.order }\n\n\n\nenumerate\u95a2\u6570/map\u95a2\u6570\u304cSequenceType\u306eextension\u3068\u3057\u3066\u5b9f\u88c5\n\n1.2\nlet strs: [String]\nmap(enumerate(strs)) { (index, str) in // do something }\n\n\n\n2.0\nlet strs: [String]\nstrs.enumerate().map { (index, str) in // do something }\n\n\n\nfind\u95a2\u6570\u304cCollectionType\u306eextension\u306eindexOf\u3068\u3057\u3066\u5b9f\u88c5\n\n1.2\nlet strs: [String]\nlet target: Strng\nlet index = find(strs, target)\n\n\n\n2.0\nlet strs: [String]\nlet target: Strng\nlet index = strs.indexOf(target)\n\n\n\ndistance\u95a2\u6570\u304cForwardIndexType\u306eexteinsion\u306edistanceTo\u3068\u3057\u3066\u5b9f\u88c5\n\n1.2\nlet startIndex: Index\nlet endIndex: Index\nlet distance = distance(startIndex, endIndex)\n\n\n\n2.0\nlet startIndex: Index\nlet endIndex: Index\nlet distance = startIndex.distanceTo(endIndex)\n\n\n\nadvance\u95a2\u6570\u304cBidirectionalIndexType\u306eextension\u306eadvanceBy\u3068\u3057\u3066\u5b9f\u88c5\n\n1.2\nlet startIndex: Index\nlet targetIndex = advance(startIndex, 20)\n\n\n\n2.0\nlet startIndex: Index\nlet targetIndex = startIndex.advanceBy(20)\n\n\n\nString\u306etoInt\u95a2\u6570\u304c\u306a\u304f\u306a\u3063\u305f><\n\u4ee3\u308f\u308a\u306bInt\u306einit\u3092\u4f7f\u3046\n\n1.2\nlet idStr: String = \"1234\"\nlet id = idStr.toInt()\n\n\n\n2.0\nlet idStr: String = \"1234\"\nlet id = Int(idStr)\n\n\n\n#available\u306e\u5c0e\u5165\nWKWebView\u3092\u4f7f\u3046\u5834\u5408\u306bWKWebView\u306eclass\u304c\u5b58\u5728\u3059\u308b\u304b\u3069\u3046\u304b\u3057\u3066\u5206\u5c90\u3059\u308b\u30b3\u30fc\u30c9\u304c\u4e00\u822c\u7684\u3067\u3057\u305f\u304c\u3001#available(iOS 8.0, *)\u304c\u4f7f\u3048\u308b\u3088\u3046\u306b\u306a\u3063\u3066\u3044\u307e\u3059\n\n1.2\nif (NSFoundationVersionNumber > NSFoundationVersionNumber_iOS_7_1) {\n    // WKWebView\u3092\u4f7f\u3046\n}\n\n\n\n2.0\nif #available(iOS 8.0, *) {\n    // WKWebView\u3092\u4f7f\u3046\n}\n\n\n\nrequired init(coder: NSCoder) -> required init?(coder: NSCoder)\nNSCoding\u3092\u7d99\u627f\u3057\u3066\u3044\u308b\u30af\u30e9\u30b9\u306einit(coder:)\u3092\u5b9f\u88c5\u3059\u308b\u6642\u306bsuper\u304cinit?\u306b\u306a\u3063\u3066\u3044\u308b\u305f\u3081\u306b\u3001init?\u3067\u5b9f\u88c5\u3059\u308b\u5fc5\u8981\u304c\u3042\u308b\u3088\u3046\u3067\u3059\n\n1.2\nrequired init(coder: NSCoder) {\n    super.init(coder: coder)\n    // do something\n}\n\n\n\n2.0\nrequired init?(coder: NSCoder) {\n    super.init(coder: coder)\n    // do something\n}\n\n\n\nLazyMapCollection\u306earray\u95a2\u6570\u304c\u306a\u304f\u306a\u3063\u305f><\n\u4ee3\u308f\u308a\u306bArray\u306einit\u3092\u4f7f\u3046\n\n1.2\nlet dict: [Int:Int]\nlet values: [Int] = dict.values.array\n\n\n\n2.0\nlet dict: [Int:Int]\nlet values: [Int] = Array(dict.values)\n\n\n\nNSError()\u3067\u9069\u5f53\u306b\u30a8\u30e9\u30fc\u8a2d\u5b9a\u3057\u3068\u304f\u306e\u304c\u3067\u304d\u306a\u304f\u306a\u3063\u305f\n\n1.2\nlet error = NSError()\n\n\n\n2.0\nlet errorDomain = \"domain\"\nlet errorCode = 1\nlet localizedDescription = \"\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u30a8\u30e9\u30fc\u3060\u3088\"\nlet localizedRecoverySuggestion = \"\u56de\u7dda\u78ba\u304b\u3081\u3066\u30fc\"\nlet error = NSError(domain: errorDomain, code: errorCode, userInfo: [NSLocalizedDescriptionKey:localizedDescription, NSLocalizedRecoverySuggestionErrorKey:localizedRecoverySuggestion])\n\n\n\nObjective-C\u3067weak\u3067\u5ba3\u8a00\u3057\u3066\u3044\u308bproperty\u306foptional\u3068\u3057\u3066\u6271\u3046\n@interface Hoge : NSObject\n@property (weak, nonatomic) id delegate;\n@end\n\nswift1.2\u3067\u306fHoge\u30af\u30e9\u30b9\u306edelegate\u306fAnyObject\u578b\u306b\u306a\u308b\u304c\u3001swift2.0\u3067\u306fAnyObject?\u578b\u3068\u306a\u308b\n\n#\u3092\u7528\u3044\u305f\u95a2\u6570\u306e\u5185\u90e8\u30d1\u30e9\u30e1\u30fc\u30bf\u3068\u5916\u90e8\u30d1\u30e9\u30e1\u30fc\u30bf\u306e\u5171\u901a\u5316\u304c\u3067\u304d\u306a\u304f\u306a\u3063\u3066\u308b\uff1f\n\n1.2\nfunc hoge(#fuga:Int) {\n}\nfunc hoge(#piyo:Int) {\n}\n\n\n\n2.0\nfunc hoge(fuga fuga:Int) {\n}\nfunc hoge(piyo piyo:Int) {\n}\n\n\n\nApp Transport Security \u5bfe\u7b56\niOS9\u304b\u3089App Transport Security\u304c\u5c0e\u5165\u3055\u308c\u305f\u305f\u3081\u306b\u3001http\u901a\u4fe1\u304c\u3067\u304d\u306a\u304f\u306a\u3063\u3066\u3044\u307e\u3059\u3002\n\nInfo.plist\nInformation Property List\n- NSAppTransportSecurity <- Dictionary\u3068\u3057\u3066\u8ffd\u52a0\n- - NSAllowsArbitraryLoads <- Boolean\u3068\u3057\u3066\u8ffd\u52a0\u3057\u3001YES\u3092\u6307\u5b9a\n- - NSExceptionDomains <- Dictionary\u3068\u3057\u3066\u8ffd\u52a0\n- - - \u81ea\u5206\u306e\u30c9\u30e1\u30a4\u30f3(ex. example.com) <- Dictionary\u3068\u3057\u3066\u8ffd\u52a0\n- - - - NSExceptionAllowsInsecureHTTPLoads <- Boolean\u3068\u3057\u3066\u8ffd\u52a0\u3057\u3001YES\u3092\u6307\u5b9a\n- - - - NSExceptionMinimumTLSVersion <- String\u3068\u3057\u3066\u8ffd\u52a0\u3057\u3001TLSv1.0\u3092\u6307\u5b9a\n- - - - NSExceptionRequiresForwardSecrecy <- Boolean\u3068\u3057\u3066\u8ffd\u52a0\u3057\u3001NO\u3092\u6307\u5b9a\n- - - - NSIncludesSubdomains <- Boolean\u3068\u3057\u3066\u8ffd\u52a0\u3057\u3001YES\u3092\u6307\u5b9a\n- - - - NSTemporaryExceptionAllowsInsecureHTTPLoads <- Boolean\u3068\u3057\u3066\u8ffd\u52a0\u3057\u3001YES\u3092\u6307\u5b9a\n\n\n\u3053\u308c\u3060\u3051\u306e\u8a2d\u5b9a\u3092\u3059\u308c\u3070\u3001iOS8\u306e\u9803\u3068\u540c\u3058\u7a0b\u5ea6\u306b\u901a\u4fe1\u306f\u3067\u304d\u308b\u306f\u305a\u3067\u3059\u3002\u305f\u3060\u3001\u305b\u3063\u304b\u304fApple\u69d8\u304c\u5c0e\u5165\u3057\u3066\u304f\u308c\u305f\u3089\u30bb\u30ad\u30e5\u30ea\u30c6\u30a3\u6a5f\u69cb\u306a\u306e\u3067\u3001\u4e0d\u8981\u3067\u3042\u308c\u3070\u30aa\u30d7\u30b7\u30e7\u30f3\u306f\u524a\u9664\u3057\u3066\u3044\u304d\u307e\u3057\u3087\u3046\u266a\n\n\u305d\u306e\u4ed6\n\nNSKeyValueCoding\u306edictionaryWithValuesForKeys\u306e\u5f15\u6570\nNSKeyValueCoding\u306esetValuesForKeysWithDictionary\u306e\u5f15\u6570\nUIWebView\u306eloadHTMLString\nUIWebViewDelegate\u306ewebView:didFailLoadWithError\u306e\u5f15\u6570\nUICollectionView\u306escrollToItemAtIndexPath\u306e\u5f15\u6570\nUIVNavigationController\u306esetViewControllers\u306e\u5f15\u6570\n\n# map\u306e\u623b\u308a\u5024\u306e\u8b66\u544a\nmap\u3092for\u6587\u4ee3\u308f\u308a\u306b\u4f7f\u3063\u3066\u3044\u308b\u6642\u306e\u623b\u308a\u5024\u3092\u53d7\u3051\u53d6\u3089\u306a\u3044\u3068\u8b66\u544a\u3092\u53d7\u3051\u308b\u3002\n\u306a\u304a\u3001for\u6587\u3067\u66f8\u304b\u306a\u3044\u7406\u7531\u306ffilter\u3067\u30d2\u30c3\u30c8\u3057\u305f\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306b\u5bfe\u3057\u3066\u306e\u307f\u5b9f\u884c\u3057\u305f\u3044\u7b49\u306e\u7406\u7531\u304b\u3089\n\n```swift:1.2\nlet views:[UIView]\nviews.filter { $0.tag > 9 }.map { $0.hidden = true }\n```\n\n```swift:2.0\nlet views:[UIView]\n_ = views.filter { $0.tag > 9 }.map { $0.hidden = ture }\n```\n\nmap\u3092apply\u4ee3\u308f\u308a\u306b\u4f7f\u3046\u306e\u306f\u3088\u308d\u3057\u304f\u306a\u3044\u306e\u3067\u3001\u4e0b\u8a18\u306e\u3088\u3046\u306b\u66f8\u304f\u306e\u304c\u7d20\u76f4\u306a\u3088\u3046\u3067\u3059\u3002(\u30b3\u30e1\u30f3\u30c8\u6307\u6458\u53cd\u6620)\n\n```swift:fix?\nlet views:[UIView]\nviews.filter { $.tag > 9 }.forEach { $0.hidden = true }\n```\n\n# \u30d5\u30a1\u30af\u30c8\u30ea\u30e1\u30bd\u30c3\u30c9\u3067\u306eself()\u306e\u4f7f\u7528\u7981\u6b62\n\n```swift:1.2\nclass func create() -> Self {\n    return self()\n}\n```\n\n```swift:2.0\nclass func create() -> Self {\n    return self.init()\n}\n```\n\n# \u5024\u306e\u518d\u4ee3\u5165\u3092\u3057\u306a\u3044var\u306e\u8b66\u544a\nswift1.2\u306e\u9803\u306f\u30d7\u30ed\u30d1\u30c6\u30a3\u3092\u5909\u66f4\u3059\u308b\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306fvar\u3067\u5ba3\u8a00\u3057\u3001\u30bb\u30c3\u30bf\u30fc\u7b49\u3092\u7528\u3044\u3066\u5909\u66f4\u3057\u3066\u3044\u305f\u304c\u3001swift2.0\u304b\u3089\u306flet\u3067\u5ba3\u8a00\u3057\u3066\u3057\u307e\u3063\u305f\u65b9\u304c\u3044\u3044\u3088\u3046\u3060\n\n```swift:1.2\nvar attributedStr = NSMutableAttributedString()\nattributedStr.appendAttributedString(NSAttributedString(string: \"hoge\"))\n```\n\n```swift:2.0\nlet attributedStr = NSMutableAttributedString()\nattributedStr.appendAttributedString(NSAttributedString(string: \"hoge\"))\n```\n\n# NSErrorPointer\u3092\u8981\u6c42\u3057\u3066\u3044\u305fAPI\u306e\u691c\u67fb\u4f8b\u5916\u5316\nNSError\u306e\u30c1\u30a7\u30c3\u30af\u304c\u4e0d\u8981\u306a\u5834\u5408\u3001try?\u3067\u6210\u529f\u3059\u308c\u3070\u7d50\u679c\u304c\u3001\u5931\u6557\u3057\u305f\u5834\u5408\u306fnil\u304c\u5165\u3063\u3066\u304f\u308c\u308b\u306e\u3067\u3001\u7d50\u69cb\u4fbf\u5229\u305d\u3046\u3002\u5fc5\u8981\u306a\u5834\u5408\u306fdo { try hoge() } catch { }\u3068\u66f8\u3051\u3070\u3044\u3044\n\n```swift:1.2\nextension String {\n    func decodeSanitization() -> String? {\n        let encodedData = dataUsingEncoding(NSUTF8StringEncoding)\n        let attributedOptions : [String: AnyObject] = [NSDocumentTypeDocumentAttribute: NSHTMLTextDocumentType, NSCharacterEncodingDocumentAttribute: NSUTF8StringEncoding]\n        let attributedString = encodedData != nil ? NSAttributedString(data: encodedData!, options: attributedOptions, documentAttributes: nil, error: nil) : nil\n        return attributedString?.string\n    }\n}\n```\n\n```swift:2.0\nextension String {\n    func decodeSanitization() -> String? {\n        guard let encodedData = dataUsingEncoding(NSUTF8StringEncoding) else { return nil }\n        let attributedOptions : [String: AnyObject] = [NSDocumentTypeDocumentAttribute: NSHTMLTextDocumentType, NSCharacterEncodingDocumentAttribute: NSUTF8StringEncoding]\n        let attributedString = try? NSAttributedString(data: encodedData, options: attributedOptions, documentAttributes: nil)\n        return attributedString?.string\n    }\n}\n```\n\n# \u4e00\u90e8\u306e\u30e1\u30bd\u30c3\u30c9\u306e\u30d7\u30ed\u30d1\u30c6\u30a3\u5316\n```swift:1.2\nlet tableView: UITableView\nlet indexPath = tableView.indexPathForSelectedRow()\n```\n\n```swift:2.0\nlet tableView: UITableView\nlet indexPath = tableView.indexPathForSelectedRow\n```\n\n```swift:1.2\nlet view: UIView\nview.setTranslatesAutoresizingMaskIntoConstraints(false)\n```\n\n```swift:2.0\nlet view: UIView\nview.translatesAutoresizingMaskIntoConstraints = false\n```\n\n# guard\u306e\u5c0e\u5165(\u9014\u4e2d\u3067\u51e6\u7406\u3092\u5207\u308a\u4e0a\u3052\u308b\u5834\u5408\u306eif)\nguard\u3067\u610f\u8b58\u7684\u306b\u51e6\u7406\u3092\u629c\u3051\u3066\u3044\u304f\u66f8\u304d\u65b9\u3092\u3057\u305f\u65b9\u304c\u3001if\u306e\u30cd\u30b9\u30c8\u304c\u6df1\u304f\u306a\u3089\u306a\u3044\u306e\u3067\u3088\u3044\u304b\u3082\u3002\n\n```swift:1.2\nlet hoge: String?\nif let fuga = hoge {\n    // do something\n    piyo(fuga)\n} else { return }\n```\n\n```swift:2.0\nlet hoge: String?\nguard let fuga = hoge else { return }\n// do something\npiyo(fuga)\n```\n\n# func\u306e\u7701\u7565\u547c\u3073\u51fa\u3057\u306e\u7981\u6b62\uff1f\n\u305d\u3082\u305d\u30821.2\u306e\u6642\u306b\u53ef\u80fd\u3060\u3063\u305f\u306e\u304b\u3088\u304f\u77e5\u3089\u306a\u3044\u306e\u3067\u3059\u304c\u3001\u30e9\u30d9\u30eb\u3092\u7701\u7565\u3057\u3066\u3044\u308b\u547c\u3073\u65b9\u304c\u30b3\u30f3\u30d1\u30a4\u30eb\u901a\u3063\u3066\u3044\u305f\u306e\u304c\u3001\u901a\u3089\u306a\u304f\u306a\u3063\u3066\u3044\u305f\u306e\u3067\u4fee\u6b63\n\n```swift:1.2\nfunc newTopics(topics: [Topic], range: NSRange) -> [Topic] { // do something }\nlet topics: [Topic]\nlet range: NSRange\nlet newTopics = newTopics(topics, range)\n```\n\n```swift:2.0\nfunc newTopics(topics: [Topic], range: NSRange) -> [Topic] { // do something }\nlet topics: [Topic]\nlet range: NSRange\nlet newTopics = newTopics(topics, range: range)\n```\n\n# nil\u30c1\u30a7\u30c3\u30af\u4ee3\u308f\u308a\u306e\u675f\u7e1b\u69cb\u6587\u306e\u8b66\u544a\n```swift:1.2\nlet error: NSError?\nif let e = error { // do something }\n```\n\n```swift:2.0\nlet error: NSError?\nif let _ = error { // do something }\n```\n\n# count\u95a2\u6570\u304cCollectionType\u306eextension\u3068\u3057\u3066\u5b9f\u88c5\n```swift:1.2\nlet str: String = \"hoge\"\nlet length = count(str.utf16)\n```\n\n```swift:2.0\nlet str: String = \"hoge\"\nlet length = str.characters.count\n```\n\n# \u30af\u30e9\u30b9\u5ba3\u8a00\u306b@objc\u3092\u4ed8\u4e0e\u3059\u308b\u5834\u5408\u306fNSObject\u3092\u7d99\u627f\u3059\u308b\u5fc5\u8981\u304c\u3042\u308b\n```swift:1.2\n@objc class Hoge {\n}\n@objc(Fuga) class Fuga {\n}\n```\n\n```swift:2.0\n@objc class Hoge : NSObject {\n}\n@objc(Fuga) class Fuga : NSObject {\n}\n```\n\n# \u4e00\u90e8\u306e\u30d7\u30ed\u30d1\u30c6\u30a3\u306e\u975eOptional\u5316\n- NSURL\u306eabsoluteString\u306e\u975eOptional\u5316\n- NSURL\u306escheme\u306e\u975eOptional\u5316\n\n```swift:1.2\nlet url: NSURL\nlet str: String = url.absoluteString ?? \"\"\n```\n\n```swift:2.0\nlet url: NSURL\nlet str: String = url.absoluteString\n```\n\n# String\u306estringByReplacingOccurrencesOfString\u306bdefault\u5f15\u6570\u5c0e\u5165\n```swift:1.2\nlet orig: String\nlet converted = orig.stringByReplacingOccurrencesOfString(\"\\r\\n\", withString: \"\\n\", options: nil, range: nil)\n```\n\n```swift:2.0\nlet orig: String\nlet converted = orig.stringByReplacingOccurrencesOfString(\"\\r\\n\", withString: \"\\n\")\n```\n\n# join\u95a2\u6570\u304cSequenceType\u306eextension\u3068\u3057\u3066\u5b9f\u88c5\n```swift:1.2\nlet strs = [\"hoge\", \"fuga\", \"piyo\"]\nlet result = join(\",\", strs)\n```\n\n```swift:2.0\nlet strs = [\"hoge\", \"fuga\", \"piyo\"]\nlet result = strs.joinWithSeparator(\",\")\n```\n\n# sorted\u95a2\u6570\u304csort\u306b\n```swift:1.2\nclass Hoge {\n    var order: Int\n}\nlet hoges: [Hoge]\nlet sorted = hoges.sorted { (lhs, rhs) in return lhs.order < rhs.order }\n```\n\n```swift:2.0\nclass Hoge {\n    var order: Int\n}\nlet hoges: [Hoge]\nlet sorted = hoges.sort { (lhs, rhs) in return lhs.order < rhs.order }\n```\n\n# enumerate\u95a2\u6570/map\u95a2\u6570\u304cSequenceType\u306eextension\u3068\u3057\u3066\u5b9f\u88c5\n```swift:1.2\nlet strs: [String]\nmap(enumerate(strs)) { (index, str) in // do something }\n```\n\n```swift:2.0\nlet strs: [String]\nstrs.enumerate().map { (index, str) in // do something }\n```\n\n# find\u95a2\u6570\u304cCollectionType\u306eextension\u306eindexOf\u3068\u3057\u3066\u5b9f\u88c5\n```swift:1.2\nlet strs: [String]\nlet target: Strng\nlet index = find(strs, target)\n```\n\n```swift:2.0\nlet strs: [String]\nlet target: Strng\nlet index = strs.indexOf(target)\n```\n\n# distance\u95a2\u6570\u304cForwardIndexType\u306eexteinsion\u306edistanceTo\u3068\u3057\u3066\u5b9f\u88c5\n```swift:1.2\nlet startIndex: Index\nlet endIndex: Index\nlet distance = distance(startIndex, endIndex)\n```\n\n```swift:2.0\nlet startIndex: Index\nlet endIndex: Index\nlet distance = startIndex.distanceTo(endIndex)\n```\n\n# advance\u95a2\u6570\u304cBidirectionalIndexType\u306eextension\u306eadvanceBy\u3068\u3057\u3066\u5b9f\u88c5\n```swift:1.2\nlet startIndex: Index\nlet targetIndex = advance(startIndex, 20)\n```\n\n```swift:2.0\nlet startIndex: Index\nlet targetIndex = startIndex.advanceBy(20)\n```\n\n# String\u306etoInt\u95a2\u6570\u304c\u306a\u304f\u306a\u3063\u305f><\n\u4ee3\u308f\u308a\u306bInt\u306einit\u3092\u4f7f\u3046\n\n```swift:1.2\nlet idStr: String = \"1234\"\nlet id = idStr.toInt()\n```\n\n```swift:2.0\nlet idStr: String = \"1234\"\nlet id = Int(idStr)\n```\n\n# #available\u306e\u5c0e\u5165\nWKWebView\u3092\u4f7f\u3046\u5834\u5408\u306bWKWebView\u306eclass\u304c\u5b58\u5728\u3059\u308b\u304b\u3069\u3046\u304b\u3057\u3066\u5206\u5c90\u3059\u308b\u30b3\u30fc\u30c9\u304c\u4e00\u822c\u7684\u3067\u3057\u305f\u304c\u3001#available(iOS 8.0, *)\u304c\u4f7f\u3048\u308b\u3088\u3046\u306b\u306a\u3063\u3066\u3044\u307e\u3059\n\n```swift:1.2\nif (NSFoundationVersionNumber > NSFoundationVersionNumber_iOS_7_1) {\n    // WKWebView\u3092\u4f7f\u3046\n}\n```\n\n```swift:2.0\nif #available(iOS 8.0, *) {\n    // WKWebView\u3092\u4f7f\u3046\n}\n```\n\n# required init(coder: NSCoder) -> required init?(coder: NSCoder)\nNSCoding\u3092\u7d99\u627f\u3057\u3066\u3044\u308b\u30af\u30e9\u30b9\u306einit(coder:)\u3092\u5b9f\u88c5\u3059\u308b\u6642\u306bsuper\u304cinit?\u306b\u306a\u3063\u3066\u3044\u308b\u305f\u3081\u306b\u3001init?\u3067\u5b9f\u88c5\u3059\u308b\u5fc5\u8981\u304c\u3042\u308b\u3088\u3046\u3067\u3059\n\n```swift:1.2\nrequired init(coder: NSCoder) {\n    super.init(coder: coder)\n    // do something\n}\n```\n\n```swift:2.0\nrequired init?(coder: NSCoder) {\n    super.init(coder: coder)\n    // do something\n}\n```\n\n# LazyMapCollection\u306earray\u95a2\u6570\u304c\u306a\u304f\u306a\u3063\u305f><\n\u4ee3\u308f\u308a\u306bArray\u306einit\u3092\u4f7f\u3046\n\n```swift:1.2\nlet dict: [Int:Int]\nlet values: [Int] = dict.values.array\n```\n\n```swift:2.0\nlet dict: [Int:Int]\nlet values: [Int] = Array(dict.values)\n```\n\n# NSError()\u3067\u9069\u5f53\u306b\u30a8\u30e9\u30fc\u8a2d\u5b9a\u3057\u3068\u304f\u306e\u304c\u3067\u304d\u306a\u304f\u306a\u3063\u305f\n```swift:1.2\nlet error = NSError()\n```\n\n```swift:2.0\nlet errorDomain = \"domain\"\nlet errorCode = 1\nlet localizedDescription = \"\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u30a8\u30e9\u30fc\u3060\u3088\"\nlet localizedRecoverySuggestion = \"\u56de\u7dda\u78ba\u304b\u3081\u3066\u30fc\"\nlet error = NSError(domain: errorDomain, code: errorCode, userInfo: [NSLocalizedDescriptionKey:localizedDescription, NSLocalizedRecoverySuggestionErrorKey:localizedRecoverySuggestion])\n```\n\n# Objective-C\u3067weak\u3067\u5ba3\u8a00\u3057\u3066\u3044\u308bproperty\u306foptional\u3068\u3057\u3066\u6271\u3046\n```objc\n@interface Hoge : NSObject\n@property (weak, nonatomic) id delegate;\n@end\n```\n\nswift1.2\u3067\u306fHoge\u30af\u30e9\u30b9\u306edelegate\u306fAnyObject\u578b\u306b\u306a\u308b\u304c\u3001swift2.0\u3067\u306fAnyObject?\u578b\u3068\u306a\u308b\n\n# #\u3092\u7528\u3044\u305f\u95a2\u6570\u306e\u5185\u90e8\u30d1\u30e9\u30e1\u30fc\u30bf\u3068\u5916\u90e8\u30d1\u30e9\u30e1\u30fc\u30bf\u306e\u5171\u901a\u5316\u304c\u3067\u304d\u306a\u304f\u306a\u3063\u3066\u308b\uff1f\n```swift:1.2\nfunc hoge(#fuga:Int) {\n}\nfunc hoge(#piyo:Int) {\n}\n```\n\n```swift:2.0\nfunc hoge(fuga fuga:Int) {\n}\nfunc hoge(piyo piyo:Int) {\n}\n```\n\n# App Transport Security \u5bfe\u7b56\niOS9\u304b\u3089App Transport Security\u304c\u5c0e\u5165\u3055\u308c\u305f\u305f\u3081\u306b\u3001http\u901a\u4fe1\u304c\u3067\u304d\u306a\u304f\u306a\u3063\u3066\u3044\u307e\u3059\u3002\n\n```:Info.plist\nInformation Property List\n- NSAppTransportSecurity <- Dictionary\u3068\u3057\u3066\u8ffd\u52a0\n- - NSAllowsArbitraryLoads <- Boolean\u3068\u3057\u3066\u8ffd\u52a0\u3057\u3001YES\u3092\u6307\u5b9a\n- - NSExceptionDomains <- Dictionary\u3068\u3057\u3066\u8ffd\u52a0\n- - - \u81ea\u5206\u306e\u30c9\u30e1\u30a4\u30f3(ex. example.com) <- Dictionary\u3068\u3057\u3066\u8ffd\u52a0\n- - - - NSExceptionAllowsInsecureHTTPLoads <- Boolean\u3068\u3057\u3066\u8ffd\u52a0\u3057\u3001YES\u3092\u6307\u5b9a\n- - - - NSExceptionMinimumTLSVersion <- String\u3068\u3057\u3066\u8ffd\u52a0\u3057\u3001TLSv1.0\u3092\u6307\u5b9a\n- - - - NSExceptionRequiresForwardSecrecy <- Boolean\u3068\u3057\u3066\u8ffd\u52a0\u3057\u3001NO\u3092\u6307\u5b9a\n- - - - NSIncludesSubdomains <- Boolean\u3068\u3057\u3066\u8ffd\u52a0\u3057\u3001YES\u3092\u6307\u5b9a\n- - - - NSTemporaryExceptionAllowsInsecureHTTPLoads <- Boolean\u3068\u3057\u3066\u8ffd\u52a0\u3057\u3001YES\u3092\u6307\u5b9a\n```\n\n\u3053\u308c\u3060\u3051\u306e\u8a2d\u5b9a\u3092\u3059\u308c\u3070\u3001iOS8\u306e\u9803\u3068\u540c\u3058\u7a0b\u5ea6\u306b\u901a\u4fe1\u306f\u3067\u304d\u308b\u306f\u305a\u3067\u3059\u3002\u305f\u3060\u3001\u305b\u3063\u304b\u304fApple\u69d8\u304c\u5c0e\u5165\u3057\u3066\u304f\u308c\u305f\u3089\u30bb\u30ad\u30e5\u30ea\u30c6\u30a3\u6a5f\u69cb\u306a\u306e\u3067\u3001\u4e0d\u8981\u3067\u3042\u308c\u3070\u30aa\u30d7\u30b7\u30e7\u30f3\u306f\u524a\u9664\u3057\u3066\u3044\u304d\u307e\u3057\u3087\u3046\u266a\n\n# \u305d\u306e\u4ed6\n- NSKeyValueCoding\u306edictionaryWithValuesForKeys\u306e\u5f15\u6570\n- NSKeyValueCoding\u306esetValuesForKeysWithDictionary\u306e\u5f15\u6570\n- UIWebView\u306eloadHTMLString\n- UIWebViewDelegate\u306ewebView:didFailLoadWithError\u306e\u5f15\u6570\n- UICollectionView\u306escrollToItemAtIndexPath\u306e\u5f15\u6570\n- UIVNavigationController\u306esetViewControllers\u306e\u5f15\u6570\n", "tags": ["Swift", "Swift2.0", "iOS", "iOS9"]}