{"context": "SpringBoot\u3067Web\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u3092\u4f5c\u308b\u969b\u3001\nSpringSecurity\u3092\u4f7f\u3063\u3066\u3042\u308c\u3053\u308c\u30ab\u30b9\u30bf\u30de\u30a4\u30ba\u3057\u306a\u304c\u3089\u30e6\u30fc\u30b6\u30fc\u8a8d\u8a3c\u306e\u4ed5\u7d44\u307f\u3092\u4f5c\u3063\u305f\u306e\u3067\u307e\u3068\u3081\u307e\u3059\n\nSpringConfig\u30af\u30e9\u30b9\u3092\u4f5c\u308b\n\nSpringConfig.java\u306e\u4f8b\n\n@Configuration\n@EnableWebMvcSecurity\npublic class SecurityConfig extends WebSecurityConfigurerAdapter {\n\n    @Autowired\n    private DataSource dataSource;\n\n    // \u30dd\u30a4\u30f3\u30c81\n    @Override\n    public void configure(WebSecurity web) throws Exception {\n        web.ignoring().antMatchers(\"/css/**\", \"/image/**\", \"/js/**\");\n    }\n\n    // \u30dd\u30a4\u30f3\u30c82\n    @Override\n    protected void configure(HttpSecurity http) throws Exception {\n        http.authorizeRequests().antMatchers(\"/signin\").permitAll()\n                                .antMatchers(\"/admin/**\").hasRole(\"ADMIN\")\n                                .anyRequest().authenticated();\n        http.formLogin().loginProcessingUrl(\"/login\").loginPage(\"/signin\")\n                        .failureUrl(\"?error\").defaultSuccessUrl(\"/\", false)\n                        .usernameParameter(\"loginId\").passwordParameter(\"password\")\n                        .and().logout().logoutRequestMatcher(new AntPathRequestMatcher(\"signout\"))\n                        .logoutSuccessUrl(\"/signin\")\n                        .deleteCookies(\"JSESSIONID\")\n                        .invalidateHttpSession(true).permitAll();\n        http.sessionManagement().invalidSessionUrl(\"/signin\");\n    }\n\n    // \u30dd\u30a4\u30f3\u30c83\n    @Autowired\n    public void configAuthentication(AuthenticationManagerBuilder auth) throws Exception {\n        auth.jdbcAuthentication()\n                .dataSource(dataSource)\n                .usersByUsernameQuery(\n                        \"select mail_address as username, password, enabled from accounts where mail_address = ?\")\n                .authoritiesByUsernameQuery(\n                        \"select mail_address, role from accounts where mail_address = ?\")\n                .passwordEncoder(new ShaPasswordEncoder(256));\n    }\n}\n\n\n\n\u30dd\u30a4\u30f3\u30c81 \u306e\u90e8\u5206\n\n\u3053\u3053\u3067\u306fSpringSecurity\u306e\u5236\u9650\u3092\u7121\u8996\u3057\u3066\u307b\u3057\u3044\u5834\u6240\u306e\u6307\u5b9a\u3092\u3057\u307e\u3059\n\n\n\u4f8b\uff1a \u9759\u7684\u30d5\u30a1\u30a4\u30eb\u306a\u3069\u3092\u7f6e\u3044\u3066\u3044\u308b\u5834\u6240\n\n\n\u4f8b\u3048\u3070\u30ed\u30b4\u306a\u3069\u3092\u30b5\u30a4\u30c8\u306e\u30d8\u30c3\u30c0\u30fc\u306b\u7f6e\u3044\u3066\u3044\u308b\u6642\u306a\u3069\u3001\u3053\u308c\u304c\u306a\u3044\u3068\u30ed\u30b4\u304c\u51fa\u306a\u304f\u306a\u3063\u3066\u3057\u307e\u3044\u307e\u3059\uff01\n\n\n\u30dd\u30a4\u30f3\u30c82\u306e\u90e8\u5206\n\n\u3053\u3053\u3067\u306f\u8a8d\u8a3c\u306e\u305f\u3081\u306e\u8a2d\u5b9a\u3092\u3057\u3066\u3044\u307e\u3059\n\u307e\u305a\u4e0a\u304b\u3089\u9806\u756a\u306b\u4ee5\u4e0b\u306e\u90e8\u5206\u3067\u3059\n\nhttp.authorizeRequests().antMatchers(\"/signin\").permitAll()\n                        .antMatchers(\"/admin/**\").hasRole(\"ADMIN\")\n                        .anyRequest().authenticated(); \n\n\n\n\u3053\u3053\u3067\u306f\u30e6\u30fc\u30b6\u30fc\u306e\u6301\u3063\u3066\u3044\u308b\u6a29\u9650\u306b\u3088\u3063\u3066\u307f\u308c\u308b\u30da\u30fc\u30b8\u3092\u5236\u9650\u3057\u3066\u3044\u307e\u3059\n\nantMatchers(\"/signin\") \u2190 \u30ed\u30b0\u30a4\u30f3\u753b\u9762\n\n\n\u3053\u3053\u306b\u306f\u5168\u3066\u306e\u30e6\u30fc\u30b6\u30fc\u304c\u30a2\u30af\u30bb\u30b9\u53ef\n\n\nantMatchers(\"/admin/**\") \u2190 \u7ba1\u7406\u753b\u9762\n\n\n\u3053\u3053\u306b\u306f\"ADMIN\"\u6a29\u9650\u304c\u306a\u3044\u3068\u30a2\u30af\u30bb\u30b9\u3067\u304d\u306a\u3044\nUser\u30c6\u30fc\u30d6\u30eb\u306erole\u306e\u30ab\u30e9\u30e0\u306b\u5165\u3063\u3066\u3044\u308b\"ROLE_ADMIN\uff02\u306e\"ROLE_\"\u90e8\u5206\u3092\u53d6\u308a\u9664\u3044\u305f\u3082\u306e\u3067\u8a8d\u8a3c\u3055\u308c\u307e\u3059\n\n\n.anyRequest().authenticated()\n\n\n\u5168\u3066\u306eURL\u30ea\u30af\u30a8\u30b9\u30c8\u306f\u8a8d\u8a3c\u3055\u308c\u3066\u3044\u308b\u30e6\u30fc\u30b6\u30fc\u3057\u304b\u30a2\u30af\u30bb\u30b9\u3067\u304d\u306a\u3044\u3068\u3044\u3046\u8a18\u8ff0\u3067\u3059\n\n\n\n\n\u6b21\u306b\u4ee5\u4e0b\u306e\u90e8\u5206\u3067\u3059\n\nhttp.formLogin().loginProcessingUrl(\"/login\").loginPage(\"/signin\")\n                .failureUrl(\"?error\").defaultSuccessUrl(\"/\", false)\n                .usernameParameter(\"loginId\").passwordParameter(\"password\")\n                .and().logout().logoutRequestMatcher(new AntPathRequestMatcher(\"signout\"))\n                .logoutSuccessUrl(\"/signin\")\n                .deleteCookies(\"JSESSIONID\")\n                .invalidateHttpSession(true).permitAll();\n\n\n\u3053\u3053\u3067\u306f\u8a8d\u8a3c\u306b\u95a2\u308f\u308b\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u6307\u5b9a\u3057\u3066\u307e\u3059\n\n\n.loginProcessingUrl(\"/login\")\n\n\n\u30ed\u30b0\u30a4\u30f3\u306e\u51e6\u7406\u3092\u3059\u308bURL\n\n\n.loginPage(\"/signin\")\n\n\n\u30ed\u30b0\u30a4\u30f3\u753b\u9762\u306eURL\n\n\n.failureUrl(\"?error\")\n\n\n\u30ed\u30b0\u30a4\u30f3\u306b\u5931\u6557\u3057\u305f\u6642\u306eURL\n?error\u3068\u3064\u3051\u3066\u304a\u304f\u3068thymeleaf\u306e\u65b9\u3067\u30a8\u30e9\u30fc\u306e\u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u51fa\u3059\u3068\u304d\u306b\u4fbf\u5229\u3067\u3059\n\n\n.defaultSuccessUrl(\"/\", false)\n\n\n\u30ed\u30b0\u30a4\u30f3\u304c\u6210\u529f\u3057\u305f\u6642\u306eURL(\u3053\u3053\u3067\u306findex.html\u306a\u306e\u3067\"/\"\u306e\u307f\u3067\u6307\u5b9a\u53ef)\n\u7b2c2\u5f15\u6570\u306eboolean\n\n\ntrue : \u30ed\u30b0\u30a4\u30f3\u753b\u9762\u3057\u305f\u5f8c\u5fc5\u305atop\u306b\u3068\u3070\u3055\u308c\u308b\nfalse : (\u8a8d\u8a3c\u3055\u308c\u3066\u306a\u304f\u3066\u4e00\u5ea6\u30ed\u30b0\u30a4\u30f3\u753b\u9762\u306b\u98db\u3070\u3055\u308c\u3066\u3082)\u30ed\u30b0\u30a4\u30f3\u3057\u305f\u3089\u6307\u5b9a\u3057\u305fURL\u306b\u98db\u3093\u3067\u304f\u308c\u308b\n\n\n\n\n.usernameParameter(\"loginId\").passwordParameter(\"password\")\n\n\n\u30ed\u30b0\u30a4\u30f3\u753b\u9762\u306ehtml\u306einput\u306ename\u5c5e\u6027\u3092\u898b\u306b\u884c\u3063\u3066\u3044\u308b\n\n\n.logoutRequestMatcher(new AntPathRequestMatcher(\"signout\"))\n\n\n\u30ed\u30b0\u30a2\u30a6\u30c8\u306eURL\n\n\n.logoutSuccessUrl(\"/signin\")\n\n\n\u30ed\u30b0\u30a2\u30a6\u30c8\u6210\u529f\u3057\u305f\u3042\u3068\u306eURL\n\n\n.deleteCookies(\"JSESSIONID\")\n\n\n\u30ed\u30b0\u30a2\u30a6\u30c8\u3057\u305f\u3089 cookie\u306e\u3000JSESSIONID \u3092\u524a\u9664\n\n\n.invalidateHttpSession(true)\n\n\n\u30ed\u30b0\u30a2\u30a6\u30c8\u3057\u305f\u3089\u30bb\u30c3\u30b7\u30e7\u30f3\u3092\u7121\u52b9\u306b\u3059\u308b\n\n\n\n\n\n\n\u30dd\u30a4\u30f3\u30c83\u306e\u90e8\u5206\n\n\u3053\u3053\u3067\u306f\u8a8d\u8a3c\u306e\u305f\u3081\u306e\u30af\u30a8\u30ea\u3092\u66f8\u3044\u3066\u3044\u307e\u3059\n\u30ed\u30b0\u30a4\u30f3\u3092\u3059\u308b\u3060\u3051\u3067\u3042\u308c\u3070\u3053\u3053\u306b\u66f8\u3044\u3066\u304a\u3051\u3070\u4ed6\u306b\u30af\u30e9\u30b9\u3092\u4f5c\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u305b\u3093\uff01\n\n    @Autowired\n    public void configAuthentication(AuthenticationManagerBuilder auth) throws Exception {\n        auth.jdbcAuthentication()\n                .dataSource(dataSource)\n                .usersByUsernameQuery(\n                        \"select mail_address as username, password, enabled from accounts where mail_address = ?\")\n                .authoritiesByUsernameQuery(\n                        \"select mail_address, role from accounts where mail_address = ?\")\n                .passwordEncoder(new ShaPasswordEncoder(256));\n    }\n\n\n\n\n\"select mail_address as username, password, enabled from accounts where mail_address = ?\"\n\n\u3053\u306e\u30af\u30a8\u30ea\u306b\u3088\u3063\u3066\u3001\u5165\u529b\u3055\u308c\u305f\u30e6\u30fc\u30b6\u30fc\u540d\u3001\u30d1\u30b9\u30ef\u30fc\u30c9\u304cDB\u306e\u5024\u3068\u4e00\u81f4\u3057\u3066\u3044\u308b\u304b\u3092\u898b\u3066\u3044\u308b\n\n\n(\u3053\u306e\u5834\u5408\u306f\u30e1\u30fc\u30eb\u30a2\u30c9\u30ec\u30b9\u3092\u30e6\u30fc\u30b6\u30fc\u540d\u3068\u3057\u3066\u3044\u307e\u3059)\n\u30e1\u30fc\u30eb\u30a2\u30c9\u30ec\u30b9\u3092\u8a8d\u8a3c\u306eID\u3068\u3057\u305f\u3053\u3068\u3067\u56f0\u3063\u305f\u3053\u3068\u304c\u3042\u3063\u305f\u306e\u3067\u6ce8\u610f\u3067\u3059(\u5f8c\u65e5\u8ffd\u8a18\u3057\u307e\u3059)\n\n\nUser\u30c6\u30fc\u30d6\u30eb\u306b\u306fenabled\u3068\u3044\u3046\u30ab\u30e9\u30e0\u304c\u5fc5\u9808\u306b\u306a\u3063\u3066\u3044\u307e\u3059\uff01\n\n\n\u3053\u3053\u3067bool\u5024\u3067\u6709\u52b9\u306a\u30a2\u30ab\u30a6\u30f3\u30c8\u304b\u7121\u52b9\u306a\u30a2\u30ab\u30a6\u30f3\u30c8\u304b\u3092\u307f\u308c\u308b\u3088\u3046\u306b\u306a\u3063\u3066\u3044\u307e\u3059\n\n\n\n\n\n\"select mail_address, role from accounts where mail_address = ?\"\n\n\u30e6\u30fc\u30b6\u30fc\u306e\u6301\u3064\u6a29\u9650\u306e\u53d6\u5f97\n\n\n\n\n\u307e\u3068\u3081\n\nSpringSecurity\u306f\u3053\u3053\u306e\u30af\u30e9\u30b9\u306e\u8a2d\u5b9a1\u3064\u3067\u30ed\u30b0\u30a4\u30f3\u6a5f\u80fd\u304c\u7c21\u5358\u306b\u4f5c\u308c\u3066\u3057\u307e\u3046\u306e\u3067\u4fbf\u5229\u3067\u3057\u305f\uff01\n\u305f\u3060\u3001\u7d30\u304b\u3044\u8a2d\u5b9a\u306e\u4ed5\u65b9\u3001\u30d1\u30e9\u30e1\u30fc\u30bf\u30fc\u306e\u6307\u5b9a\u306e\u4ed5\u65b9\u3092\u4e00\u3064\u4e00\u3064\u63a2\u3059\u306e\u304c\u3068\u3066\u3082\u5927\u5909\u3060\u3063\u305f\u306e\u3067\u3001\u307e\u3068\u3081\u307e\u3057\u305f\n\u6b21\u306f\u3053\u308c\u3092\u5b9f\u88c5\u3057\u3066\u3044\u3066\u56f0\u3063\u305f\u3053\u3068\u304c\u3044\u304f\u3064\u304b\u3042\u3063\u305f\u306e\u3067\u305d\u306e\u5185\u5bb9\u3092\u307e\u3068\u3081\u305f\u3044\u3068\u601d\u3044\u307e\u3059\n\nSpringBoot\u3067Web\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u3092\u4f5c\u308b\u969b\u3001\nSpringSecurity\u3092\u4f7f\u3063\u3066\u3042\u308c\u3053\u308c\u30ab\u30b9\u30bf\u30de\u30a4\u30ba\u3057\u306a\u304c\u3089\u30e6\u30fc\u30b6\u30fc\u8a8d\u8a3c\u306e\u4ed5\u7d44\u307f\u3092\u4f5c\u3063\u305f\u306e\u3067\u307e\u3068\u3081\u307e\u3059\n\n# SpringConfig\u30af\u30e9\u30b9\u3092\u4f5c\u308b\n\n```spring:SpringConfig.java\u306e\u4f8b\n\n@Configuration\n@EnableWebMvcSecurity\npublic class SecurityConfig extends WebSecurityConfigurerAdapter {\n\n    @Autowired\n    private DataSource dataSource;\n\n    // \u30dd\u30a4\u30f3\u30c81\n    @Override\n    public void configure(WebSecurity web) throws Exception {\n        web.ignoring().antMatchers(\"/css/**\", \"/image/**\", \"/js/**\");\n    }\n\n    // \u30dd\u30a4\u30f3\u30c82\n    @Override\n    protected void configure(HttpSecurity http) throws Exception {\n        http.authorizeRequests().antMatchers(\"/signin\").permitAll()\n                                .antMatchers(\"/admin/**\").hasRole(\"ADMIN\")\n                                .anyRequest().authenticated();\n        http.formLogin().loginProcessingUrl(\"/login\").loginPage(\"/signin\")\n                        .failureUrl(\"?error\").defaultSuccessUrl(\"/\", false)\n                        .usernameParameter(\"loginId\").passwordParameter(\"password\")\n                        .and().logout().logoutRequestMatcher(new AntPathRequestMatcher(\"signout\"))\n                        .logoutSuccessUrl(\"/signin\")\n                        .deleteCookies(\"JSESSIONID\")\n                        .invalidateHttpSession(true).permitAll();\n        http.sessionManagement().invalidSessionUrl(\"/signin\");\n    }\n\n    // \u30dd\u30a4\u30f3\u30c83\n    @Autowired\n    public void configAuthentication(AuthenticationManagerBuilder auth) throws Exception {\n        auth.jdbcAuthentication()\n                .dataSource(dataSource)\n                .usersByUsernameQuery(\n                        \"select mail_address as username, password, enabled from accounts where mail_address = ?\")\n                .authoritiesByUsernameQuery(\n                        \"select mail_address, role from accounts where mail_address = ?\")\n                .passwordEncoder(new ShaPasswordEncoder(256));\n    }\n}\n```\n\n# \u30dd\u30a4\u30f3\u30c81 \u306e\u90e8\u5206\n* \u3053\u3053\u3067\u306fSpringSecurity\u306e\u5236\u9650\u3092\u7121\u8996\u3057\u3066\u307b\u3057\u3044\u5834\u6240\u306e\u6307\u5b9a\u3092\u3057\u307e\u3059\n    * \u4f8b\uff1a \u9759\u7684\u30d5\u30a1\u30a4\u30eb\u306a\u3069\u3092\u7f6e\u3044\u3066\u3044\u308b\u5834\u6240\n* \u4f8b\u3048\u3070\u30ed\u30b4\u306a\u3069\u3092\u30b5\u30a4\u30c8\u306e\u30d8\u30c3\u30c0\u30fc\u306b\u7f6e\u3044\u3066\u3044\u308b\u6642\u306a\u3069\u3001\u3053\u308c\u304c\u306a\u3044\u3068\u30ed\u30b4\u304c\u51fa\u306a\u304f\u306a\u3063\u3066\u3057\u307e\u3044\u307e\u3059\uff01\n\n\n# \u30dd\u30a4\u30f3\u30c82\u306e\u90e8\u5206\n* \u3053\u3053\u3067\u306f\u8a8d\u8a3c\u306e\u305f\u3081\u306e\u8a2d\u5b9a\u3092\u3057\u3066\u3044\u307e\u3059\n* \u307e\u305a\u4e0a\u304b\u3089\u9806\u756a\u306b\u4ee5\u4e0b\u306e\u90e8\u5206\u3067\u3059\n\n```\nhttp.authorizeRequests().antMatchers(\"/signin\").permitAll()\n                        .antMatchers(\"/admin/**\").hasRole(\"ADMIN\")\n                        .anyRequest().authenticated(); \n```\n* \u3053\u3053\u3067\u306f\u30e6\u30fc\u30b6\u30fc\u306e\u6301\u3063\u3066\u3044\u308b\u6a29\u9650\u306b\u3088\u3063\u3066\u307f\u308c\u308b\u30da\u30fc\u30b8\u3092\u5236\u9650\u3057\u3066\u3044\u307e\u3059\n    * antMatchers(\"/signin\") \u2190 \u30ed\u30b0\u30a4\u30f3\u753b\u9762\n        * \u3053\u3053\u306b\u306f\u5168\u3066\u306e\u30e6\u30fc\u30b6\u30fc\u304c\u30a2\u30af\u30bb\u30b9\u53ef\n\n    * antMatchers(\"/admin/**\") \u2190 \u7ba1\u7406\u753b\u9762\n        * \u3053\u3053\u306b\u306f\"ADMIN\"\u6a29\u9650\u304c\u306a\u3044\u3068\u30a2\u30af\u30bb\u30b9\u3067\u304d\u306a\u3044\n        * User\u30c6\u30fc\u30d6\u30eb\u306erole\u306e\u30ab\u30e9\u30e0\u306b\u5165\u3063\u3066\u3044\u308b\"ROLE_ADMIN\uff02\u306e\"ROLE_\"\u90e8\u5206\u3092\u53d6\u308a\u9664\u3044\u305f\u3082\u306e\u3067\u8a8d\u8a3c\u3055\u308c\u307e\u3059\n\n    * .anyRequest().authenticated()\n        * \u5168\u3066\u306eURL\u30ea\u30af\u30a8\u30b9\u30c8\u306f\u8a8d\u8a3c\u3055\u308c\u3066\u3044\u308b\u30e6\u30fc\u30b6\u30fc\u3057\u304b\u30a2\u30af\u30bb\u30b9\u3067\u304d\u306a\u3044\u3068\u3044\u3046\u8a18\u8ff0\u3067\u3059\n\n\n* \u6b21\u306b\u4ee5\u4e0b\u306e\u90e8\u5206\u3067\u3059\n\n```\nhttp.formLogin().loginProcessingUrl(\"/login\").loginPage(\"/signin\")\n                .failureUrl(\"?error\").defaultSuccessUrl(\"/\", false)\n                .usernameParameter(\"loginId\").passwordParameter(\"password\")\n                .and().logout().logoutRequestMatcher(new AntPathRequestMatcher(\"signout\"))\n                .logoutSuccessUrl(\"/signin\")\n                .deleteCookies(\"JSESSIONID\")\n                .invalidateHttpSession(true).permitAll();\n```\n\n* \u3053\u3053\u3067\u306f\u8a8d\u8a3c\u306b\u95a2\u308f\u308b\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u6307\u5b9a\u3057\u3066\u307e\u3059\n    * .loginProcessingUrl(\"/login\")\n        * \u30ed\u30b0\u30a4\u30f3\u306e\u51e6\u7406\u3092\u3059\u308bURL\n    * .loginPage(\"/signin\")\n        * \u30ed\u30b0\u30a4\u30f3\u753b\u9762\u306eURL\n    * .failureUrl(\"?error\")\n        * \u30ed\u30b0\u30a4\u30f3\u306b\u5931\u6557\u3057\u305f\u6642\u306eURL\n        * ?error\u3068\u3064\u3051\u3066\u304a\u304f\u3068thymeleaf\u306e\u65b9\u3067\u30a8\u30e9\u30fc\u306e\u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u51fa\u3059\u3068\u304d\u306b\u4fbf\u5229\u3067\u3059\n    * .defaultSuccessUrl(\"/\", false)\n        * \u30ed\u30b0\u30a4\u30f3\u304c\u6210\u529f\u3057\u305f\u6642\u306eURL(\u3053\u3053\u3067\u306findex.html\u306a\u306e\u3067\"/\"\u306e\u307f\u3067\u6307\u5b9a\u53ef)\n        * \u7b2c2\u5f15\u6570\u306eboolean\n            * true : \u30ed\u30b0\u30a4\u30f3\u753b\u9762\u3057\u305f\u5f8c\u5fc5\u305atop\u306b\u3068\u3070\u3055\u308c\u308b\n            * false : (\u8a8d\u8a3c\u3055\u308c\u3066\u306a\u304f\u3066\u4e00\u5ea6\u30ed\u30b0\u30a4\u30f3\u753b\u9762\u306b\u98db\u3070\u3055\u308c\u3066\u3082)\u30ed\u30b0\u30a4\u30f3\u3057\u305f\u3089\u6307\u5b9a\u3057\u305fURL\u306b\u98db\u3093\u3067\u304f\u308c\u308b\n    * .usernameParameter(\"loginId\").passwordParameter(\"password\")\n        * \u30ed\u30b0\u30a4\u30f3\u753b\u9762\u306ehtml\u306einput\u306ename\u5c5e\u6027\u3092\u898b\u306b\u884c\u3063\u3066\u3044\u308b\n    * .logoutRequestMatcher(new AntPathRequestMatcher(\"signout\"))\n        * \u30ed\u30b0\u30a2\u30a6\u30c8\u306eURL\n    * .logoutSuccessUrl(\"/signin\")\n        * \u30ed\u30b0\u30a2\u30a6\u30c8\u6210\u529f\u3057\u305f\u3042\u3068\u306eURL\n    * .deleteCookies(\"JSESSIONID\")\n        * \u30ed\u30b0\u30a2\u30a6\u30c8\u3057\u305f\u3089 cookie\u306e\u3000JSESSIONID \u3092\u524a\u9664\n    * .invalidateHttpSession(true)\n        * \u30ed\u30b0\u30a2\u30a6\u30c8\u3057\u305f\u3089\u30bb\u30c3\u30b7\u30e7\u30f3\u3092\u7121\u52b9\u306b\u3059\u308b\n\n# \u30dd\u30a4\u30f3\u30c83\u306e\u90e8\u5206\n* \u3053\u3053\u3067\u306f\u8a8d\u8a3c\u306e\u305f\u3081\u306e\u30af\u30a8\u30ea\u3092\u66f8\u3044\u3066\u3044\u307e\u3059\n* \u30ed\u30b0\u30a4\u30f3\u3092\u3059\u308b\u3060\u3051\u3067\u3042\u308c\u3070\u3053\u3053\u306b\u66f8\u3044\u3066\u304a\u3051\u3070\u4ed6\u306b\u30af\u30e9\u30b9\u3092\u4f5c\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u305b\u3093\uff01\n\n```\n    @Autowired\n    public void configAuthentication(AuthenticationManagerBuilder auth) throws Exception {\n        auth.jdbcAuthentication()\n                .dataSource(dataSource)\n                .usersByUsernameQuery(\n                        \"select mail_address as username, password, enabled from accounts where mail_address = ?\")\n                .authoritiesByUsernameQuery(\n                        \"select mail_address, role from accounts where mail_address = ?\")\n                .passwordEncoder(new ShaPasswordEncoder(256));\n    }\n\n```\n\n* \"select mail_address as username, password, enabled from accounts where mail_address = ?\"\n    * \u3053\u306e\u30af\u30a8\u30ea\u306b\u3088\u3063\u3066\u3001\u5165\u529b\u3055\u308c\u305f\u30e6\u30fc\u30b6\u30fc\u540d\u3001\u30d1\u30b9\u30ef\u30fc\u30c9\u304cDB\u306e\u5024\u3068\u4e00\u81f4\u3057\u3066\u3044\u308b\u304b\u3092\u898b\u3066\u3044\u308b\n        * (\u3053\u306e\u5834\u5408\u306f\u30e1\u30fc\u30eb\u30a2\u30c9\u30ec\u30b9\u3092\u30e6\u30fc\u30b6\u30fc\u540d\u3068\u3057\u3066\u3044\u307e\u3059)\n        * \u30e1\u30fc\u30eb\u30a2\u30c9\u30ec\u30b9\u3092\u8a8d\u8a3c\u306eID\u3068\u3057\u305f\u3053\u3068\u3067\u56f0\u3063\u305f\u3053\u3068\u304c\u3042\u3063\u305f\u306e\u3067\u6ce8\u610f\u3067\u3059(\u5f8c\u65e5\u8ffd\u8a18\u3057\u307e\u3059)\n    * User\u30c6\u30fc\u30d6\u30eb\u306b\u306fenabled\u3068\u3044\u3046\u30ab\u30e9\u30e0\u304c\u5fc5\u9808\u306b\u306a\u3063\u3066\u3044\u307e\u3059\uff01\n        * \u3053\u3053\u3067bool\u5024\u3067\u6709\u52b9\u306a\u30a2\u30ab\u30a6\u30f3\u30c8\u304b\u7121\u52b9\u306a\u30a2\u30ab\u30a6\u30f3\u30c8\u304b\u3092\u307f\u308c\u308b\u3088\u3046\u306b\u306a\u3063\u3066\u3044\u307e\u3059\n\n* \"select mail_address, role from accounts where mail_address = ?\"\n    * \u30e6\u30fc\u30b6\u30fc\u306e\u6301\u3064\u6a29\u9650\u306e\u53d6\u5f97\n\n\n# \u307e\u3068\u3081\n* SpringSecurity\u306f\u3053\u3053\u306e\u30af\u30e9\u30b9\u306e\u8a2d\u5b9a1\u3064\u3067\u30ed\u30b0\u30a4\u30f3\u6a5f\u80fd\u304c\u7c21\u5358\u306b\u4f5c\u308c\u3066\u3057\u307e\u3046\u306e\u3067\u4fbf\u5229\u3067\u3057\u305f\uff01\n* \u305f\u3060\u3001\u7d30\u304b\u3044\u8a2d\u5b9a\u306e\u4ed5\u65b9\u3001\u30d1\u30e9\u30e1\u30fc\u30bf\u30fc\u306e\u6307\u5b9a\u306e\u4ed5\u65b9\u3092\u4e00\u3064\u4e00\u3064\u63a2\u3059\u306e\u304c\u3068\u3066\u3082\u5927\u5909\u3060\u3063\u305f\u306e\u3067\u3001\u307e\u3068\u3081\u307e\u3057\u305f\n* \u6b21\u306f\u3053\u308c\u3092\u5b9f\u88c5\u3057\u3066\u3044\u3066\u56f0\u3063\u305f\u3053\u3068\u304c\u3044\u304f\u3064\u304b\u3042\u3063\u305f\u306e\u3067\u305d\u306e\u5185\u5bb9\u3092\u307e\u3068\u3081\u305f\u3044\u3068\u601d\u3044\u307e\u3059\n\n \n\n\n\n\n\n\n\n\n\n", "tags": ["Java", "spring", "spring-boot", "spring-security", "Web"]}