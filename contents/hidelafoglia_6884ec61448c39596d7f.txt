{"context": " More than 1 year has passed since last update.\n\n\u30c7\u30ea\u30b2\u30fc\u30c8\u30bf\u30b9\u30af\n\n\npydoc.locate \u3067\u30e2\u30b8\u30e5\u30fc\u30eb\u3092\u307f\u3064\u3051\u3066\u3001 \u95a2\u6570\u540d\u3067\u547c\u3073\u51fa\u3059\u30bf\u30b9\u30af\u3092\u5b9a\u7fa9\n\u30e2\u30c7\u30eb\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u30b7\u30ea\u30a2\u30e9\u30a4\u30ba\u3067\u304d\u306a\u3044\u306e\u3067 id \u3067\u6e21\u3057\u3066\u3082\u3089\u3046\u304b\u3089\u305d\u308c\u3067\u5fa9\u5143\u3059\u308b\n\u95a2\u6570\u3092\u547c\u3076\u969b\u306b delayed=True \u306e\u5f15\u6570\u3092\u4ed8\u4e0e\u3059\u308b\n\nfrom celery.task import task\nimport pydoc\n\n@task\ndef async_delegate(modname, funcname, instance_id=None, sender=None,\n               *args, **kwargs):\n    if sender and instance_id:\n        instance = sender.objects.get(id=instance_id)\n        mod = pydoc.locate(modname)\n        getattr(mod, funcname)(instance=instance, delayed=True,\n                               *args, **kwargs)\n\n\n\u30c7\u30b3\u30ec\u30fc\u30bf\n\n\u30b7\u30b0\u30ca\u30eb\u304b\u3089\u306e\u547c\u3073\u51fa\u3057\u3092\u30a4\u30f3\u30bf\u30fc\u30bb\u30d7\u30c8\u3059\u308b\n\nsignal \u5f15\u6570\u306f\u7121\u8996\u3057\u3066\u3001 \u547c\u3073\u51fa\u3057\u3092async_call \u306b\u30c7\u30ea\u30b2\u30fc\u30c8\u3059\u308b\n\ninstance \u306e\u4ee3\u308f\u308a\u306b instnace_id \u3092\u6e21\u3059\n\nasync_delegate \u304b\u3089\u4ee3\u7406\u547c\u3073\u51fa\u3057\u3055\u308c\u308b\u3068delayed=True \u306b\u306a\u3063\u3066\u3044\u308b\u306e\u3067\u3001\u5b9f\u969b\u306e\u30b7\u30b0\u30ca\u30eb\u30ec\u30b7\u30fc\u30d0\u30fc\u3092\u547c\u3076\n\nfrom functools import wraps\n\ndef async_signal(*args, **kwargs):\n    def _wrapper(decorated, *wargs, **wkwargs):\n        def _decorator(instance,\n                       delayed=False, signal=None, *dargs, **dkwargs):\n            if delayed:\n                return decorated(instance, *dargs, **dkwargs)\n            else:\n                async_delegate.delay(\n                    decorated.__module__, decorated.func_name,\n                    instance_id=instance.id,\n                    *dargs, **dkwargs)\n\n        return wraps(decorated)(_decorator)\n\n    return _wrapper\n\n\n\u30b7\u30b0\u30ca\u30eb\u30ec\u30b7\u30fc\u30d0\n\n @async_signal \u30c7\u30b3\u30ec\u30fc\u30c8\u3057\u305f\u95a2\u6570\u3092 @recevier \u3067\u767b\u9332\u3059\u308b\n\nfrom django.dispatch import receiver\nfrom django.db.models.signals import post_save\nfrom django.contrib.auth.models import User\n\n\n@receiver(post_save, sender=User)\n@async_signal()\ndef on_user_saved(instance, **kwargs):\n    print instance, \"is saved.\"\n\n\n## \u30c7\u30ea\u30b2\u30fc\u30c8\u30bf\u30b9\u30af\n\n- `pydoc.locate` \u3067\u30e2\u30b8\u30e5\u30fc\u30eb\u3092\u307f\u3064\u3051\u3066\u3001 \u95a2\u6570\u540d\u3067\u547c\u3073\u51fa\u3059\u30bf\u30b9\u30af\u3092\u5b9a\u7fa9\n- \u30e2\u30c7\u30eb\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u30b7\u30ea\u30a2\u30e9\u30a4\u30ba\u3067\u304d\u306a\u3044\u306e\u3067 id \u3067\u6e21\u3057\u3066\u3082\u3089\u3046\u304b\u3089\u305d\u308c\u3067\u5fa9\u5143\u3059\u308b\n- \u95a2\u6570\u3092\u547c\u3076\u969b\u306b `delayed=True` \u306e\u5f15\u6570\u3092\u4ed8\u4e0e\u3059\u308b\n\n~~~py\nfrom celery.task import task\nimport pydoc\n\n@task\ndef async_delegate(modname, funcname, instance_id=None, sender=None,\n               *args, **kwargs):\n    if sender and instance_id:\n        instance = sender.objects.get(id=instance_id)\n        mod = pydoc.locate(modname)\n        getattr(mod, funcname)(instance=instance, delayed=True,\n                               *args, **kwargs)\n~~~\n\n\n## \u30c7\u30b3\u30ec\u30fc\u30bf\n\n- \u30b7\u30b0\u30ca\u30eb\u304b\u3089\u306e\u547c\u3073\u51fa\u3057\u3092\u30a4\u30f3\u30bf\u30fc\u30bb\u30d7\u30c8\u3059\u308b\n- `signal` \u5f15\u6570\u306f\u7121\u8996\u3057\u3066\u3001 \u547c\u3073\u51fa\u3057\u3092`async_call` \u306b\u30c7\u30ea\u30b2\u30fc\u30c8\u3059\u308b\n- `instance` \u306e\u4ee3\u308f\u308a\u306b `instnace_id` \u3092\u6e21\u3059\n- `async_delegate` \u304b\u3089\u4ee3\u7406\u547c\u3073\u51fa\u3057\u3055\u308c\u308b\u3068`delayed=True` \u306b\u306a\u3063\u3066\u3044\u308b\u306e\u3067\u3001\u5b9f\u969b\u306e\u30b7\u30b0\u30ca\u30eb\u30ec\u30b7\u30fc\u30d0\u30fc\u3092\u547c\u3076\n\n~~~py\nfrom functools import wraps\n\ndef async_signal(*args, **kwargs):\n    def _wrapper(decorated, *wargs, **wkwargs):\n        def _decorator(instance,\n                       delayed=False, signal=None, *dargs, **dkwargs):\n            if delayed:\n                return decorated(instance, *dargs, **dkwargs)\n            else:\n                async_delegate.delay(\n                    decorated.__module__, decorated.func_name,\n                    instance_id=instance.id,\n                    *dargs, **dkwargs)\n\n        return wraps(decorated)(_decorator)\n\n    return _wrapper\n~~~    \n\n## \u30b7\u30b0\u30ca\u30eb\u30ec\u30b7\u30fc\u30d0\n\n-  `@async_signal` \u30c7\u30b3\u30ec\u30fc\u30c8\u3057\u305f\u95a2\u6570\u3092 `@recevier` \u3067\u767b\u9332\u3059\u308b\n\n~~~py\nfrom django.dispatch import receiver\nfrom django.db.models.signals import post_save\nfrom django.contrib.auth.models import User\n\n\n@receiver(post_save, sender=User)\n@async_signal()\ndef on_user_saved(instance, **kwargs):\n    print instance, \"is saved.\"\n~~~\n", "tags": ["Celery", "Django"]}