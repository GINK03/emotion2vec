{"context": " More than 1 year has passed since last update.package dom;\n\nimport java.io.*;\nimport javax.xml.parsers.*;\nimport org.w3c.dom.*;\nimport java.util.ArrayList;\n\n\nclass Dom {\n    protected Document doc;\n    protected int tab;\n    private String[] xml = new String[1];\n    private File dir;\n    private String dirPathR;\n    private Element root;\n    private PrintWriter pw;\n\n    //\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\n    public Dom(String dirPath) {\n        try {\n            DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();\n            DocumentBuilder db = dbf.newDocumentBuilder();\n            /* XML\u6587\u66f8\u3092\u8aad\u307f\u8fbc\u3080. */\n            dirPathR = dirPath;\n            dir = new File(dirPath);\n            xml = dir.list(new XMLFilter());\n\n            doc = db.parse(new FileInputStream(dirPath+xml[0]));\n            //\u51fa\u767a\u70b9\n            root = doc.getDocumentElement();\n            //\u51fa\u529b\u7528\n\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n        tab = 0;\n    }\n\n    public void getNodeName(Node node) {\n        tabbing();\n        /* \u30ce\u30fc\u30c9\u540d\u3092\u51fa\u529b */\n        System.out.println(\"Node name= \" + node.getNodeName());\n    }\n    protected void tabbing() {\n        for (int i = 0; i < tab; i++) {\n            System.out.print(\"\\t\");\n        }\n    }\n\n    private void Walk(Node node) {\n        /*\n         * \u3053\u308c\u306f,XML\u6587\u66f8\u306e\u30a4\u30f3\u30c7\u30f3\u30c8\u306a\u3069\u306e\u7a7a\u767d\u306e\u30ce\u30fc\u30c9\u3092\u8aad\u307f\u98db\u3070\u3059\u305f\u3081\u306e\u51e6\u7406. Node.TEXT_NODE\n         * \u30ce\u30fc\u30c9\u304c\u30c6\u30ad\u30b9\u30c8\u3067,\u30ce\u30fc\u30c9\u306e\u5024\u306e\u7a7a\u767d\u3092\u9664\u3044\u305f\u6587\u5b57\u5217\u306e\u9577\u3055\u304c0\u306e\u5834\u5408\u306f\u8aad\u307f\u98db\u3070\u3059.\n         */\n\n        if (node.getNodeType() == Node.TEXT_NODE && node.getNodeValue().trim().length() == 0) {\n            return;\n        }\n        getNodeName(node);\n        tab++;\n\n        //\u89aa\u8996\u70b9/\u89aa\u51e6\u7406\n\n        /* node.getFirstChild : node\u306e\u6700\u521d\u306e\u5b50\u3092\u5f97\u308b */\n        /* child.getNextSibling : child\u306e\u5144\u5f1f\u30ce\u30fc\u30c9\u3092\u5f97\u308b */\n\n        for (Node child = node.getFirstChild(); child != null; child = child.getNextSibling()) {\n            //\u89aa\u8996\u70b9/\u5b50\u51e6\u7406\n            if(child.getNodeType() == Node.ELEMENT_NODE){\n                if(child.getNodeName().equals(\"binaryRelation\")){\n                    String parentFname = child.getParentNode().getAttributes().getNamedItem(\"name\").getNodeValue();\n\n                    NodeList cnl = child.getChildNodes();\n                    String max_value=\"\";\n                    String min_value=\"\";\n                    String currentFname=\"\";\n                    for(int i=0; i<cnl.getLength(); i++){\n                        Node n = cnl.item(i);\n                        //System.out.println(n.getNodeName());\n                        if(n.getNodeName().equals(\"cardinality\")){\n                            max_value = n.getAttributes().getNamedItem(\"max\").getNodeValue();\n                            min_value = n.getAttributes().getNamedItem(\"min\").getNodeValue();\n                        }else if(n.getNodeName().equals(\"solitaryFeature\")){\n                            currentFname = n.getAttributes().getNamedItem(\"name\").getNodeValue();\n                        }\n                    }\n                    if(max_value.equals(min_value)){\n                        //mandatory\n                        System.out.println(\"======mandatory=====\");\n                        System.out.println(currentFname);\n                        pw.println(\"(int \"+currentFname+\" 0 1)\");\n                        pw.println(\"(imp (= \"+parentFname+\" 0) (= \"+currentFname+\" 0))\");\n                        pw.println(\"(imp (= \"+parentFname+\" 1) (= \"+currentFname+\" 1))\");\n                    }else{\n                        //optional\n                        System.out.println(\"=====optional=====\");\n                        System.out.println(currentFname);\n                        pw.println(\"(int \"+currentFname+\" 0 1)\");\n                        pw.println(\"(imp (= \"+parentFname+\" 0) (= \"+currentFname+\" 0))\");\n                        pw.println(\"(imp (= \"+parentFname+\" 1) (|| (= \"+currentFname+\" 1) 1))\");\n                    }\n                }else if(child.getNodeName().equals(\"setRelation\")){\n                    String parentFname = child.getParentNode().getAttributes().getNamedItem(\"name\").getNodeValue();\n\n                    NodeList cnl = child.getChildNodes();\n                    String max_value=\"\";\n                    String min_value=\"\";\n\n                    ArrayList<String> GFname = new ArrayList<String>();\n                    String currentFname = \"\";\n                    String currentFlist=\"\";\n                    for(int i=0; i<cnl.getLength(); i++){\n                        Node n = cnl.item(i);\n\n                        if(n.getNodeName().equals(\"cardinality\")){\n                            max_value = n.getAttributes().getNamedItem(\"max\").getNodeValue();\n                            min_value = n.getAttributes().getNamedItem(\"min\").getNodeValue(); \n                        }else if(n.getNodeName().equals(\"groupedFeature\")){\n                            currentFname = n.getAttributes().getNamedItem(\"name\").getNodeValue();\n                            GFname.add(currentFname);\n                            currentFlist += \" \"+currentFname;\n                        }\n                    }\n\n                    if(max_value.equals(min_value)){\n                        //alternative\n                        System.out.println(\"=====alternative=====\");\n                        System.out.println(currentFlist);\n                        for(int i=0; i<GFname.size(); i++){\n                            pw.println(\"(int \"+GFname.get(i)+\" 0 1)\");\n                        }\n                        pw.println(\"(imp (= \"+parentFname+\" 0) (= (+\"+currentFlist+\") 0))\");\n                        pw.println(\"(imp (= \"+parentFname+\" 1) (= (+\"+currentFlist+\") 1))\");\n                    }else{\n                        //or_relation\n                        System.out.println(\"=====or_relation=====\");\n                        System.out.println(currentFlist);\n                        for(int i=0; i<GFname.size(); i++){\n                            pw.println(\"(int \"+GFname.get(i)+\" 0 1)\");\n                        }\n                        pw.println(\"(imp (= \"+parentFname+\" 0) (= (+\"+currentFlist+\") 0))\");\n                        pw.println(\"(imp (= \"+parentFname+\" 1) (>= (+\"+currentFlist+\") \"+min_value+\"))\");\n                        pw.println(\"(imp (= \"+parentFname+\" 1) (<= (+\"+currentFlist+\") \"+max_value+\"))\");\n                    }\n                }else if(child.getNodeName().equals(\"requires\")){\n                    //requires\n                    String mainF = child.getAttributes().getNamedItem(\"feature\").getNodeValue();\n                    String requiresF = child.getAttributes().getNamedItem(\"requires\").getNodeValue();\n                    System.out.println(\"=====requires=====\");\n                    System.out.println(mainF+\", \"+requiresF);\n                    pw.println(\"(imp (= \"+mainF+\" 1) (= \"+requiresF+\" 1))\");\n                }else if(child.getNodeName().equals(\"excludes\")){\n                    //excludes\n                    String excludesF1 = child.getAttributes().getNamedItem(\"feature\").getNodeValue();\n                    String excludesF2 = child.getAttributes().getNamedItem(\"excludes\").getNodeValue();\n                    System.out.println(\"=====excludes=====\");\n                    System.out.println(excludesF1+\", \"+excludesF2);\n                    pw.println(\"(imp (= \"+excludesF1+\" 1) (= \"+excludesF2+\" 0))\");\n                    pw.println(\"(imp (= \"+excludesF2+\" 1) (= \"+excludesF1+\" 0))\");\n                }\n            }\n            Walk(child); //\u518d\u5e30\n        }\n        tab--;\n    }\n\n\n\n    void WriteCSP(String outFileName) {\n        try{\n            File outFile = new File(dirPathR + outFileName);\n            pw = new PrintWriter(new BufferedWriter(new FileWriter(outFile)));\n            //\u30e9\u30b9\u30c8\u4e00\u884c\u3092\u6d88\u3057\u3066\u304b\u3089\u3001\n            pw.println(\"; Product\");\n            pw.println(\"(int root 1)\");\n            pw.println(\"(= root 1)\");\n            Walk(root);\n\n            pw.println(\"; END\");\n            pw.close();\n\n        }catch(Exception e){\n            e.printStackTrace();\n        }\n\n    }\n}\n\n\u4ee5\u4e0b\u3067\u5b9f\u884c\npackage dom;\n\npublic class Run {\n    public static void main(String[] args){\n        String dirPath = \"/Users/Korefumi/Desktop/FM1/\";\n        String outFileName = \"outFM.csp\";\n\n        Dom dm = new Dom(dirPath);\n        dm.WriteCSP(outFileName);\n\n    }\n}\n\n\n\n\n```\npackage dom;\n\nimport java.io.*;\nimport javax.xml.parsers.*;\nimport org.w3c.dom.*;\nimport java.util.ArrayList;\n\n\nclass Dom {\n\tprotected Document doc;\n\tprotected int tab;\n\tprivate String[] xml = new String[1];\n\tprivate File dir;\n\tprivate String dirPathR;\n\tprivate Element root;\n\tprivate PrintWriter pw;\n\n\t//\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\n\tpublic Dom(String dirPath) {\n\t\ttry {\n\t\t\tDocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();\n\t\t\tDocumentBuilder db = dbf.newDocumentBuilder();\n\t\t\t/* XML\u6587\u66f8\u3092\u8aad\u307f\u8fbc\u3080. */\n\t\t\tdirPathR = dirPath;\n\t\t\tdir = new File(dirPath);\n\t\t\txml = dir.list(new XMLFilter());\n\t\t\t\n\t\t\tdoc = db.parse(new FileInputStream(dirPath+xml[0]));\n\t\t\t//\u51fa\u767a\u70b9\n\t\t\troot = doc.getDocumentElement();\n\t\t\t//\u51fa\u529b\u7528\n\t\t\t\n\t\t} catch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t\ttab = 0;\n\t}\n\n\tpublic void getNodeName(Node node) {\n\t\ttabbing();\n\t\t/* \u30ce\u30fc\u30c9\u540d\u3092\u51fa\u529b */\n\t\tSystem.out.println(\"Node name= \" + node.getNodeName());\n\t}\n\tprotected void tabbing() {\n\t\tfor (int i = 0; i < tab; i++) {\n\t\t\tSystem.out.print(\"\\t\");\n\t\t}\n\t}\n\n\tprivate void Walk(Node node) {\n\t\t/*\n\t\t * \u3053\u308c\u306f,XML\u6587\u66f8\u306e\u30a4\u30f3\u30c7\u30f3\u30c8\u306a\u3069\u306e\u7a7a\u767d\u306e\u30ce\u30fc\u30c9\u3092\u8aad\u307f\u98db\u3070\u3059\u305f\u3081\u306e\u51e6\u7406. Node.TEXT_NODE\n\t\t * \u30ce\u30fc\u30c9\u304c\u30c6\u30ad\u30b9\u30c8\u3067,\u30ce\u30fc\u30c9\u306e\u5024\u306e\u7a7a\u767d\u3092\u9664\u3044\u305f\u6587\u5b57\u5217\u306e\u9577\u3055\u304c0\u306e\u5834\u5408\u306f\u8aad\u307f\u98db\u3070\u3059.\n\t\t */\n\n\t\tif (node.getNodeType() == Node.TEXT_NODE && node.getNodeValue().trim().length() == 0) {\n\t\t\treturn;\n\t\t}\n\t\tgetNodeName(node);\n\t\ttab++;\n\t\t\n\t\t//\u89aa\u8996\u70b9/\u89aa\u51e6\u7406\n\t\t\n\t\t/* node.getFirstChild : node\u306e\u6700\u521d\u306e\u5b50\u3092\u5f97\u308b */\n\t\t/* child.getNextSibling : child\u306e\u5144\u5f1f\u30ce\u30fc\u30c9\u3092\u5f97\u308b */\n\t\t\n\t\tfor (Node child = node.getFirstChild(); child != null; child = child.getNextSibling()) {\n\t\t\t//\u89aa\u8996\u70b9/\u5b50\u51e6\u7406\n\t\t\tif(child.getNodeType() == Node.ELEMENT_NODE){\n\t\t\t\tif(child.getNodeName().equals(\"binaryRelation\")){\n\t\t\t\t\tString parentFname = child.getParentNode().getAttributes().getNamedItem(\"name\").getNodeValue();\n\t\t\t\t\t\n\t\t\t\t\tNodeList cnl = child.getChildNodes();\n\t\t\t\t\tString max_value=\"\";\n\t\t\t\t\tString min_value=\"\";\n\t\t\t\t\tString currentFname=\"\";\n\t\t\t\t\tfor(int i=0; i<cnl.getLength(); i++){\n\t\t\t\t\t\tNode n = cnl.item(i);\n\t\t\t\t\t\t//System.out.println(n.getNodeName());\n\t\t\t\t\t\tif(n.getNodeName().equals(\"cardinality\")){\n\t\t\t\t\t\t\tmax_value = n.getAttributes().getNamedItem(\"max\").getNodeValue();\n\t\t\t\t\t\t\tmin_value = n.getAttributes().getNamedItem(\"min\").getNodeValue();\n\t\t\t\t\t\t}else if(n.getNodeName().equals(\"solitaryFeature\")){\n\t\t\t\t\t\t\tcurrentFname = n.getAttributes().getNamedItem(\"name\").getNodeValue();\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif(max_value.equals(min_value)){\n\t\t\t\t\t\t//mandatory\n\t\t\t\t\t\tSystem.out.println(\"======mandatory=====\");\n\t\t\t\t\t\tSystem.out.println(currentFname);\n\t\t\t\t\t\tpw.println(\"(int \"+currentFname+\" 0 1)\");\n\t\t\t\t\t\tpw.println(\"(imp (= \"+parentFname+\" 0) (= \"+currentFname+\" 0))\");\n\t\t\t\t\t\tpw.println(\"(imp (= \"+parentFname+\" 1) (= \"+currentFname+\" 1))\");\n\t\t\t\t\t}else{\n\t\t\t\t\t\t//optional\n\t\t\t\t\t\tSystem.out.println(\"=====optional=====\");\n\t\t\t\t\t\tSystem.out.println(currentFname);\n\t\t\t\t\t\tpw.println(\"(int \"+currentFname+\" 0 1)\");\n\t\t\t\t\t\tpw.println(\"(imp (= \"+parentFname+\" 0) (= \"+currentFname+\" 0))\");\n\t\t\t\t\t\tpw.println(\"(imp (= \"+parentFname+\" 1) (|| (= \"+currentFname+\" 1) 1))\");\n\t\t\t\t\t}\n\t\t\t\t}else if(child.getNodeName().equals(\"setRelation\")){\n\t\t\t\t\tString parentFname = child.getParentNode().getAttributes().getNamedItem(\"name\").getNodeValue();\n\t\t\t\t\t\n\t\t\t\t\tNodeList cnl = child.getChildNodes();\n\t\t\t\t\tString max_value=\"\";\n\t\t\t\t\tString min_value=\"\";\n\t\t\t\t\t\n\t\t\t\t\tArrayList<String> GFname = new ArrayList<String>();\n\t\t\t\t\tString currentFname = \"\";\n\t\t\t\t\tString currentFlist=\"\";\n\t\t\t\t\tfor(int i=0; i<cnl.getLength(); i++){\n\t\t\t\t\t\tNode n = cnl.item(i);\n\t\t\t\t\t\t\n\t\t\t\t\t\tif(n.getNodeName().equals(\"cardinality\")){\n\t\t\t\t\t\t\tmax_value = n.getAttributes().getNamedItem(\"max\").getNodeValue();\n\t\t\t\t\t\t\tmin_value = n.getAttributes().getNamedItem(\"min\").getNodeValue(); \n\t\t\t\t\t\t}else if(n.getNodeName().equals(\"groupedFeature\")){\n\t\t\t\t\t\t\tcurrentFname = n.getAttributes().getNamedItem(\"name\").getNodeValue();\n\t\t\t\t\t\t\tGFname.add(currentFname);\n\t\t\t\t\t\t\tcurrentFlist += \" \"+currentFname;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tif(max_value.equals(min_value)){\n\t\t\t\t\t\t//alternative\n\t\t\t\t\t\tSystem.out.println(\"=====alternative=====\");\n\t\t\t\t\t\tSystem.out.println(currentFlist);\n\t\t\t\t\t\tfor(int i=0; i<GFname.size(); i++){\n\t\t\t\t\t\t\tpw.println(\"(int \"+GFname.get(i)+\" 0 1)\");\n\t\t\t\t\t\t}\n\t\t\t\t\t\tpw.println(\"(imp (= \"+parentFname+\" 0) (= (+\"+currentFlist+\") 0))\");\n\t\t\t\t\t\tpw.println(\"(imp (= \"+parentFname+\" 1) (= (+\"+currentFlist+\") 1))\");\n\t\t\t\t\t}else{\n\t\t\t\t\t\t//or_relation\n\t\t\t\t\t\tSystem.out.println(\"=====or_relation=====\");\n\t\t\t\t\t\tSystem.out.println(currentFlist);\n\t\t\t\t\t\tfor(int i=0; i<GFname.size(); i++){\n\t\t\t\t\t\t\tpw.println(\"(int \"+GFname.get(i)+\" 0 1)\");\n\t\t\t\t\t\t}\n\t\t\t\t\t\tpw.println(\"(imp (= \"+parentFname+\" 0) (= (+\"+currentFlist+\") 0))\");\n\t\t\t\t\t\tpw.println(\"(imp (= \"+parentFname+\" 1) (>= (+\"+currentFlist+\") \"+min_value+\"))\");\n\t\t\t\t\t\tpw.println(\"(imp (= \"+parentFname+\" 1) (<= (+\"+currentFlist+\") \"+max_value+\"))\");\n\t\t\t\t\t}\n\t\t\t\t}else if(child.getNodeName().equals(\"requires\")){\n\t\t\t\t\t//requires\n\t\t\t\t\tString mainF = child.getAttributes().getNamedItem(\"feature\").getNodeValue();\n\t\t\t\t\tString requiresF = child.getAttributes().getNamedItem(\"requires\").getNodeValue();\n\t\t\t\t\tSystem.out.println(\"=====requires=====\");\n\t\t\t\t\tSystem.out.println(mainF+\", \"+requiresF);\n\t\t\t\t\tpw.println(\"(imp (= \"+mainF+\" 1) (= \"+requiresF+\" 1))\");\n\t\t\t\t}else if(child.getNodeName().equals(\"excludes\")){\n\t\t\t\t\t//excludes\n\t\t\t\t\tString excludesF1 = child.getAttributes().getNamedItem(\"feature\").getNodeValue();\n\t\t\t\t\tString excludesF2 = child.getAttributes().getNamedItem(\"excludes\").getNodeValue();\n\t\t\t\t\tSystem.out.println(\"=====excludes=====\");\n\t\t\t\t\tSystem.out.println(excludesF1+\", \"+excludesF2);\n\t\t\t\t\tpw.println(\"(imp (= \"+excludesF1+\" 1) (= \"+excludesF2+\" 0))\");\n\t\t\t\t\tpw.println(\"(imp (= \"+excludesF2+\" 1) (= \"+excludesF1+\" 0))\");\n\t\t\t\t}\n\t\t\t}\n\t\t\tWalk(child); //\u518d\u5e30\n\t\t}\n\t\ttab--;\n\t}\n\n\n\t\n\tvoid WriteCSP(String outFileName) {\n\t\ttry{\n\t\t\tFile outFile = new File(dirPathR + outFileName);\n\t\t\tpw = new PrintWriter(new BufferedWriter(new FileWriter(outFile)));\n\t\t\t//\u30e9\u30b9\u30c8\u4e00\u884c\u3092\u6d88\u3057\u3066\u304b\u3089\u3001\n\t\t\tpw.println(\"; Product\");\n\t\t\tpw.println(\"(int root 1)\");\n\t\t\tpw.println(\"(= root 1)\");\n\t\t\tWalk(root);\n\t\t\t\n\t\t\tpw.println(\"; END\");\n\t\t\tpw.close();\n\t\t\t\n\t\t}catch(Exception e){\n\t\t\te.printStackTrace();\n\t\t}\n\n\t}\n}\n```\n\n\u4ee5\u4e0b\u3067\u5b9f\u884c\n\n```\npackage dom;\n\npublic class Run {\n\tpublic static void main(String[] args){\n\t\tString dirPath = \"/Users/Korefumi/Desktop/FM1/\";\n\t\tString outFileName = \"outFM.csp\";\n\t\t\n\t\tDom dm = new Dom(dirPath);\n\t\tdm.WriteCSP(outFileName);\n\t\t\n\t}\n}\n\n```\n", "tags": ["Java", "dom", "XML", "CSP"]}