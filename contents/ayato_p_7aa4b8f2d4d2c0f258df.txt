{"tags": ["Clojure"], "context": "\u6700\u8fd1\u3001\u6307\u5148\u30ce\u30cf\u30af\u304c\u597d\u304d\u3067\u305a\u3063\u3068\u8074\u3044\u3066\u307e\u3059\u3002\u3042\u3084\u3074\u30fc\u3067\u3059\u3002\n\u6307\u5148\u30ce\u30cf\u30af-\u5c64\uff08MV\uff09/ YouTube\n\u3068\u3044\u3046\u3053\u3068\u3067 clojure.test \u306e\u5b9f\u7528\u7684\u306a\u8a71\u3067\u3059\u3002\"\u5b9f\u7528\u7684\"\u3068\u3044\u3046\u3068\u3084\u306f\u308a\"\u5b9f\u52d9\u3067\u3082\u5229\u7528\u3067\u304d\u308b\u3088\u3046\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u306b\u30d5\u30a3\u30c3\u30c8\u3059\u308b\u3088\u3046\u306b\u6539\u9020\u3057\u3066\u3044\u304f\"\u3068\u3044\u3046\u610f\u5473\u3060\u3068\u601d\u3046\u306e\u3067\u3001\u4eca\u56de\u306f clojure.test \u306e\u62e1\u5f35\u65b9\u6cd5\u306b\u3064\u3044\u3066\u66f8\u3044\u3066\u3044\u304d\u307e\u3059\u3002\n\nclojure.test \u3068\u306f\n\u307e\u305a\u3001\u6700\u521d\u306b clojure.test \u3068\u306f\u306a\u3093\u3067\u3057\u305f\u3063\u3051\u3068\u3044\u3046\u8a71\u3067\u3059\u304c\u3001\u7686\u3055\u3093\u3082\u3054\u5b58\u77e5\u306e\u901a\u308a Clojure \u306b\u30d0\u30f3\u30c9\u30eb\u3055\u308c\u3066\u3044\u308b\u30e6\u30cb\u30c3\u30c8\u30c6\u30b9\u30c8\u7528\u30d5\u30ec\u30fc\u30e0\u30ef\u30fc\u30af\u3067\u3059\u3002\n\u4e00\u822c\u7684\u306b\u826f\u304f\u4f7f\u308f\u308c\u3066\u3044\u308b\u30de\u30af\u30ed\u306f deftest, testing, is, are \u3042\u305f\u308a\u3067\u3057\u3087\u3046\u304b?\n\u7c21\u5358\u306b\u6539\u3081\u3066\u4f7f\u3044\u65b9\u3092\u898b\u3066\u304a\u304f\u3068\n(deftest my-first-test\n  (is (= 1 (inc 0))))\n\n(deftest my-second-test\n  (are [x y] (= x (inc y))\n    1 0\n    2 1\n    3 2))\n\n(deftest my-failure-test\n  (is (thrown?\n       clojure.lang.ExceptionInfo\n       (throw (ex-info \"WTF!!\" {:foo 1})))))\n\n\u3053\u3093\u306a\u3068\u3053\u308d\u3067\u3057\u3087\u3046\u304b?\u3060\u3044\u305f\u3044\u826f\u3044\u3068\u601d\u3046\u306e\u3067\u62e1\u5f35\u65b9\u6cd5\u306b\u3064\u3044\u3066\u8a71\u3057\u3066\u3044\u304d\u307e\u3057\u3087\u3046\u3002\n\nclojure.test \u306e\u62e1\u5f35\u3068\u306f?\nclojure.test \u304c\u62e1\u5f35\u3067\u304d\u308b\u3053\u3068\u306f\u62e1\u5f35\u6027\u306e\u9ad8\u3044 Clojure \u306b\u304a\u3044\u3066\u306f\u4f55\u306e\u4e0d\u601d\u8b70\u3082\u306a\u3044\u3053\u3068\u3067\u3059\u304c\u3001\u4e00\u4f53\u4f55\u3092\u62e1\u5f35\u3059\u308b\u3068\u3044\u3046\u306e\u3067\u3057\u3087\u3046\u304b\u3002\nclojure.test \u306e ns doc \u3092\u53c2\u7167\u3059\u308c\u3070\u3001\u6b21\u306e\u3088\u3046\u306a\u6587\u7ae0\u304c\u898b\u3064\u304b\u308a\u307e\u3059\u3002\n\nEXTENDING TEST-IS (ADVANCED)\nYou can extend the behavior of the \u00efs\" macro by defining new methods for the \u00e4ssert-expr\" multimethod. These methods are called during expansion of the \u00efs\" macro, so they should return quoted forms to be evaluated.\nYou can plug in your own test-reporting framework by rebinding the report\" function: (report event)\nThe 'event' argument is a map. It will always have a :type key, whose value will be a keyword signaling the type of event being reported. Standard events with :type value of :pass, :fail, and :error are called when an assertion passes, fails, and throws an exception, respectively. In that case, the event will also have the following keys:\n:expected The form that was expected to be true :actual A form representing what actually occurred :message The string message given as an argument to 'is'\nThe testing\" strings will be a list in testing-contexts*, and the vars being tested will be a list in testing-vars*.\nYour report\" function should wrap any printing calls in the with-test-out\" macro, which rebinds out to the current value of test-out.\nFor additional event types, see the examples in the code.\n\n\u3064\u307e\u308a\u3001\u50d5\u3089\u306f is \u30de\u30af\u30ed\u306e\u632f\u821e\u3044\u3092\u5909\u66f4\u3059\u308b\u6a5f\u4f1a\u3068 report \u95a2\u6570\u3092\u81ea\u5206\u304c\u4f7f\u3044\u305f\u3044\u3082\u306e\u306b\u5909\u66f4\u3059\u308b\u6a5f\u4f1a\u304c\u6b8b\u3055\u308c\u3066\u3044\u308b\u308f\u3051\u3067\u3059 (\u6975\u7aef\u306a\u8a71\u3092\u3059\u308c\u3070\u3001\u62e1\u5f35\u3059\u308b\u6a5f\u4f1a\u304c\u306a\u304f\u3066\u3082\u62e1\u5f35\u3057\u3066\u3057\u307e\u3046\u3053\u3068\u304c\u53ef\u80fd\u3060\u3063\u305f\u308a\u3059\u308b\u308f\u3051\u3067\u3059\u3051\u3069)\u3002\n\nis \u30de\u30af\u30ed\u306e\u632f\u821e\u3044\u3092\u62e1\u5f35\u3059\u308b\n\u666e\u6bb5 (is (thrown? clojure.lang.ExceptionInfo (throw (ex-info \"WTF!!\" {:foo 1})))) \u306e\u3088\u3046\u306a\u30b3\u30fc\u30c9\u3092\u66f8\u3044\u3066\u3044\u307e\u3059\u304c\u3001 \u3053\u308c\u306f\u65e2\u306b is \u30de\u30af\u30ed\u306e\u62e1\u5f35\u3055\u308c\u305f\u632f\u821e\u3044\u3067\u3059\u3002\n\u3061\u3087\u3063\u3068\u610f\u5473\u304c\u5206\u304b\u3089\u306a\u3044\u3067\u3059\u3088\u306d\u3002\u5b9f\u969b\u306e clojure.test \u306e\u30b3\u30fc\u30c9\u3092\u53c2\u7167\u3057\u3066\u307f\u307e\u3059\u3002\n(defmulti assert-expr\n  (fn [msg form]\n    (cond\n      (nil? form) :always-fail\n      (seq? form) (first form)\n      :else :default)))\n\n;;; \u4e2d\u7565...\n\n(defmethod assert-expr 'thrown? [msg form]\n  ;; (is (thrown? c expr))\n  ;; Asserts that evaluating expr throws an exception of class c.\n  ;; Returns the exception thrown.\n  (let [klass (second form)\n        body (nthnext form 2)]\n    `(try ~@body\n          (do-report {:type :fail, :message ~msg,\n                   :expected '~form, :actual nil})\n          (catch ~klass e#\n            (do-report {:type :pass, :message ~msg,\n                     :expected '~form, :actual e#})\n            e#))))\n\nis \u30de\u30af\u30ed\u3092\u8fbf\u3063\u3066\u3044\u304f\u3068 assert-expr \u3068\u3044\u3046\u30de\u30eb\u30c1\u30e1\u30bd\u30c3\u30c9\u304c\u5b9a\u7fa9\u3057\u3066\u3042\u308a\u3001 form \u304c\u30b7\u30fc\u30b1\u30f3\u30b9\u3067\u3042\u308c\u3070\u305d\u308c\u306e\u5148\u982d\u306e\u5024\u3067\u30c7\u30a3\u30b9\u30d1\u30c3\u30c1 \u3057\u3066\u3044\u307e\u3059\u3002\u4f8b\u5916\u3092\u30c6\u30b9\u30c8\u3059\u308b\u3068\u304d\u306b\u5229\u7528\u3059\u308b thrown? \u3068\u3044\u3046\u30b7\u30f3\u30dc\u30eb\u306f\u3053\u306e\u3088\u3046\u306b\u5b9f\u88c5\u3055\u308c\u3066\u3044\u308b\u3068\u3044\u3046\u308f\u3051\u3067\u3059\u306d(\u4f8b\u5916\u306e\u30c6\u30b9\u30c8\u306a\u306e\u3067 \u3061\u3083\u3093\u3068 try \u3057\u3066 catch \u3055\u308c\u308c\u3070\u30c6\u30b9\u30c8\u304c\u30d1\u30b9\u3059\u308b\u3068\u3044\u3046\u98a8\u306b\u66f8\u304b\u308c\u3066\u3044\u307e\u3059)\u3002\n\u3053\u308c\u306b\u5023\u3063\u3066\u3061\u3087\u3063\u3068\u3057\u305f\u632f\u821e\u3044\u3092\u8ffd\u52a0\u3057\u3066\u307f\u307e\u3057\u3087\u3046\u3002\n(require '[clojure.test :as t])\n\n(defmethod t/assert-expr 'fix-in-the-future [msg form]\n  `(t/do-report {:type :pass :message ~(or msg \"Fix in the future\")}))\n\n\u3053\u308c\u306f\u307e\u3060\u30c6\u30b9\u30c8\u304c\u901a\u3089\u306a\u3044\u3051\u3069\u3001\u3068\u308a\u3042\u3048\u305a\u5c06\u6765\u7684\u306b\u30c6\u30b9\u30c8\u3092\u901a\u3059\u4e88\u5b9a\u306e\u3082\u306e\u3092\u66f8\u3044\u3066\u304a\u304f\u305f\u3081\u306e\u3082\u306e\u3068\u3044\u3046\u611f\u3058\u3067\u3059\u3002\u30c6\u30b9\u30c8\u306f\u5e38\u306b\u30d1\u30b9\u3057\u307e\u3059\u3002\n\u6b21\u306e\u3088\u3046\u306b\u4f7f\u3044\u307e\u3059\u3002\n(deftest my-fix-in-the-future-test\n  (is (fix-in-the-future (= 1 2))))\n\n\u3053\u308c\u3067 is \u30de\u30af\u30ed\u306e\u632f\u821e\u3044\u3092\u62e1\u5f35\u3059\u308b\u3053\u3068\u304c\u51fa\u6765\u307e\u3057\u305f\u3002\u3053\u306e\u3088\u3046\u306b assert-expr \u3092\u62e1\u5f35\u3057\u3066\u3044\u308b\u30e9\u30a4\u30d6\u30e9\u30ea\u3068\u3057\u3066\u306f fudje \u304c\u3042\u308a\u307e\u3059\u3002\n\nis \u30de\u30af\u30ed\u3092\u30e9\u30c3\u30d7\u3057\u305f DSL \u3092\u69cb\u7bc9\u3059\u308b\n\u3053\u308c\u306f\u4e0a\u8ff0\u306e\u65b9\u6cd5\u3068\u306f\u3084\u3084\u9055\u3063\u3066\u3044\u3066\u3001 is \u30de\u30af\u30ed\u3092\u66f4\u306b\u30de\u30af\u30ed\u3067\u30e9\u30c3\u30d7\u3057\u3066\u72ec\u81ea\u306e DSL \u3092\u69cb\u7bc9\u3057\u3066\u3057\u307e\u3046\u3068\u3044\u3046\u8a66\u307f\u3067\u3059\u3002 \u3053\u306e\u624b\u6cd5\u306e\u4ee3\u8868\u683c\u306f are \u30de\u30af\u30ed\u3067\u3059\u3002\n\u3055\u3066\u3001\u4f8b\u3048\u3070 JUnit4 \u304f\u3089\u3044\u306e\u6642\u4ee3\u306b Java \u3092\u3084\u3063\u3066\u304d\u305f\u65b9\u3067\u3057\u305f\u3089 assertEquals \u3068\u3044\u3046\u30e1\u30bd\u30c3\u30c9\u3092\u3054\u5b58\u77e5\u3060\u3068\u601d\u3044\u307e\u3059\u304c\u3001 (assert-equals expected actual) \u3068\u3044\u3046\u98a8\u306b\u8868\u73fe\u51fa\u6765\u308b\u30de\u30af\u30ed\u3092\u66f8\u3044\u3066\u307f\u307e\u3059\u3002\n(require '[clojure.test :as t])\n\n(defmacro assert-equals [expected actual]\n  `(t/is (~'= ~expected ~actual)))\n\n\u7c21\u5358\u3067\u3059\u306d\u3002\u3053\u308c\u306f\u5b9f\u969b\u6b21\u306e\u3088\u3046\u306b\u4f7f\u3048\u3066\u3061\u3083\u3093\u3068\u52d5\u4f5c\u3057\u307e\u3059\u3002\n(deftest my-assert-fn\n  (assert-equals 1 (inc 1)))\n\n;; Fail in my-assert-fn\n;; expected: (= 1 (inc 1))\n;;   actual: (not (= 1 2))\n\n\u3061\u306a\u307f\u306b are \u30de\u30af\u30ed\u306f\u3082\u3046\u3061\u3087\u3063\u3068\u3060\u3051\u8907\u96d1\u3067\u3001 clojure.template \u306e\u30de\u30af\u30ed\u3092\u547c\u3073\u51fa\u3057\u3066 is \u30de\u30af\u30ed\u3078\u3068\u5c55\u958b\u3057\u3066\u3044\u307e\u3059\u3002 \u3053\u306e\u3088\u3046\u306b DSL \u3092\u69cb\u7bc9\u3057\u3066\u3044\u308b\u30e9\u30a4\u30d6\u30e9\u30ea\u306f\u4f8b\u3048\u3070 iota \u3084 kerodon \u306a\u3069\u304c\u3042\u308a\u307e\u3059\u3002\n\nreport \u95a2\u6570\u306e\u632f\u821e\u3044\u3092\u62e1\u5f35\u3059\u308b\n\u4e0a\u8ff0\u3057\u305f assert-expr \u306e\u62e1\u5f35\u3067 fix-in-the-future \u3092\u8ffd\u52a0\u3057\u307e\u3057\u305f\u304c\u3001 do-report \u306b\u6e21\u3057\u3066\u3044\u305f\u30de\u30c3\u30d7\u306e :type \u306f :pass \u3067\u3057\u305f\u3002\n(defmethod t/assert-expr 'fix-in-the-future [msg form]\n  `(t/do-report {:type :pass :message ~(or msg \"Fix in the future\")}))\n\n\u3053\u306e\u307e\u307e\u3067\u306f\u30c6\u30b9\u30c8\u304c 1 \u4ef6\u6210\u529f\u3057\u3066\u3044\u308b\u3068\u898b\u505a\u3055\u308c\u308b\u305f\u3081\u3001 fix-in-the-future \u3068\u3044\u3046\u3088\u308a\u306f always-pass \u306b\u306a\u3063\u3066\u3057\u307e\u3044\u307e\u3059\u3002\n\u3053\u308c\u3092\u3069\u3046\u306b\u304b\u3059\u308b\u305f\u3081\u306b report \u306e\u632f\u821e\u3044\u3092\u5897\u3084\u3057\u307e\u3057\u3087\u3046\u3002\u6b21\u306e\u3088\u3046\u306b\u5897\u3084\u3057\u307e\u3059\u3002\n(require '[clojure.test :as t])\n\n(defmethod t/report :fixme [m]\n  (t/with-test-out\n    (t/inc-report-counter :fixme)\n    (println \"\\nFIXME in\" (t/testing-vars-str m))\n    (when (seq *testing-contexts*) (println (testing-contexts-str)))\n    (when-let [message (:message m)] (println message))))\n\n\u305d\u308c\u304b\u3089\u3001 fix-in-the-future \u306e\u65b9\u3082\u4fee\u6b63\u3057\u3066\u304a\u304d\u307e\u3059\u3002\n(defmethod t/assert-expr 'fix-in-the-future [msg form]\n  `(t/do-report {:type :fixme :message ~(or msg \"Fix in the future\")}))\n\n\u3053\u3046\u3057\u305f\u3053\u3068\u3067\u30c6\u30b9\u30c8\u306e\u7d50\u679c\u306b\u3001\u5c06\u6765\u4fee\u6b63\u3057\u306a\u3044\u3068\u3044\u3051\u306a\u3044\u3082\u306e\u304c\u53cd\u6620\u3055\u308c\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3057\u305f\u3002\n\u3053\u308c\u3092\u5b9f\u969b\u306b\u4f7f\u3063\u305f\u3082\u306e\u3092\u30c6\u30b9\u30c8\u3068\u3057\u3066\u5b9f\u884c\u3059\u308b\u3068\u6b21\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002\n(t/run-tests 'demo.core-test)\n;; {:test 11, :pass 6, :fail 5, :error 0, :fixme 2, :type :summary}\n\n\u3053\u306e\u3088\u3046\u306b report \u3092\u62e1\u5f35\u3057\u3066\u3044\u308b\u30e9\u30a4\u30d6\u30e9\u30ea\u3068\u3057\u3066\u306f clojure.test.check \u3084 bolth \u306a\u3069\u304c\u3042\u308a\u307e\u3059\u3002\n\n\u81ea\u5206\u3067\u30c6\u30b9\u30c8\u30e9\u30f3\u30ca\u30fc\u3092\u5b9f\u88c5\u3059\u308b\n\u2026\u306b\u306f\u6d41\u77f3\u306b\u7d19\u9762\u3068\u6642\u9593\u304c\u8db3\u308a\u306a\u3044\u3067\u3084\u3081\u3066\u304a\u304d\u307e\u3057\u3087\u3046\u3002 clojure.test \u305d\u308c\u81ea\u8eab\u306e\u30c6\u30b9\u30c8\u30e9\u30f3\u30ca\u30fc\u3092\u8aad\u3081\u3070\u306a\u3093\u3068\u306a\u304f\u5b9f\u88c5\u3067\u304d\u305d\u3046\u3060\u3068\u601d\u3046\u306f\u305a\u3067\u3059\u3002\n\u72ec\u81ea\u306e\u30c6\u30b9\u30c8\u30e9\u30f3\u30ca\u30fc\u3092\u5b8c\u5168\u306b\u5b9f\u88c5\u3057\u3066\u3044\u308b\u306e\u306f bolth \u304b eftest \u3060\u3051\u3060\u3068\u601d\u3044\u307e\u3059( Midje \u3084 speclj \u306f\u305d\u3082\u305d\u3082\u306e\u65b9\u5411\u6027\u304c\u9055\u3046\u6c17\u304c\u3057\u3066\u3044\u308b\u306e\u3067\u9664\u5916)\u3002\n\n\u6700\u5f8c\u306b\n\u4eca\u56de\u3001\u4f55\u6545 clojure.test \u306e\u62e1\u5f35\u306b\u30d5\u30a9\u30fc\u30ab\u30b9\u3057\u305f\u304b\u3068\u3044\u3046\u3068\u3001 Midje \u3092\u4f7f\u3046\u306e\u3092\u3084\u3081\u305f\u3044\u306a\u30fc\u3068\u601d\u3063\u3066\u3044\u308b\u304b\u3089\u3067\u3059(\u73fe\u5728\u3001\u5f0a\u793e\u306e\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u3067\u306f Midje \u3067\u591a\u304f\u306e\u30c6\u30b9\u30c8\u304c\u66f8\u304b\u308c\u3066\u3044\u307e\u3059)\u3002 \u4ed6\u306b\u3082 clojure.test \u306e\u5b9f\u88c5\u3092\u8aad\u307e\u306a\u3051\u308c\u3070\u306a\u3089\u306a\u3044\u4e8b\u60c5\u304c\u3042\u3063\u305f\u308a\u3057\u3066\u4e01\u5ea6\u826f\u304b\u3063\u305f\u3068\u3044\u3046\u306e\u3082\u3042\u308a\u307e\u3059\u304c\u3002\n\u3053\u3053\u6700\u8fd1\u306e Clojure \u30b3\u30df\u30e5\u30cb\u30c6\u30a3\u3092\u898b\u3066\u3044\u308b\u3068 clojure.test.check \u3092\u4f7f\u3063\u3066\u3044\u3053\u3046\u3068\u3044\u3046\u6a5f\u904b\u304c\u719f\u3057\u3066\u304d\u3066\u3044\u308b\u3088\u3046\u306b\u601d\u3044\u307e\u3059\u3002 \u305d\u306e\u80cc\u666f\u306b\u306f clojure.spec \u306a\u3069\u306e\u767b\u5834\u304c\u3042\u308a\u307e\u3059\u304c\u3001\u3053\u306e\u3088\u3046\u306a clojure.test \u3068\u4e92\u63db\u306e\u3042\u308b\u5358\u6a5f\u80fd\u306e\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u4f7f\u3044\u305f\u304f\u3066\u3082 Midje \u3084 speclj \u306e\u3088\u3046\u306a \u72ec\u7acb\u3057\u305f\u30c6\u30b9\u30c8\u30d5\u30ec\u30fc\u30e0\u30ef\u30fc\u30af\u3092\u4f7f\u3063\u3066\u3044\u308b\u3068\u5229\u7528\u3059\u308b\u3053\u3068\u304c\u51fa\u6765\u307e\u305b\u3093(\u3042\u308b\u3044\u306f\u96e3\u3057\u3044)\u3002 (\u3053\u308c\u306f\u5b8c\u5168\u306b\u4f59\u8ac7\u306b\u306a\u308b\u3051\u3069\u3001 Midje \u306e\u30c6\u30b9\u30c8\u30e9\u30f3\u30ca\u30fc\u306f clojure.test \u306e deftest \u306a\u3069\u3092\u4f7f\u3063\u3066\u3044\u3066\u3082\u3001\u305d\u308c\u306f\u305d\u308c\u3068\u3057\u3066\u5225\u3067\u5b9f\u884c\u3057\u3066\u304f\u308c\u308b\u306e\u3067 \u73fe\u5b9f\u7684\u306b\u306f\u4e21\u65b9\u4f7f\u3044\u7d9a\u3051\u308b\u3053\u3068\u3082\u3067\u304d\u307e\u3059 / speclj \u306f deftest \u3092\u62fe\u3063\u3066\u306f\u304f\u308c\u306a\u3044\u3088\u3046\u3067\u3059)\n\u306a\u306e\u3067\u3001\u72ec\u7acb\u3057\u305f\u30aa\u30ec\u30aa\u30ec\u30c6\u30b9\u30c8\u30d5\u30ec\u30fc\u30e0\u30ef\u30fc\u30af\u3092\u4f7f\u3046\u3088\u308a\u306f\u3001 clojure.test \u3068\u4e92\u63db\u306e\u3042\u308b\u3088\u3046\u306a\u3082\u306e\u3092\u4f5c\u3063\u305f\u308a\u3001\u62e1\u5f35\u3067\u304d\u308b\u3068\u3053\u308d\u3092\u62e1\u5f35\u3057\u3066\u3044\u304f\u65b9\u304c \u826f\u3044\u306e\u3067\u306f\u306a\u3044\u304b\u3068\u601d\u3063\u3066\u4eca\u56de\u306e\u8a18\u4e8b\u3092\u66f8\u304d\u307e\u3057\u305f\u3002\u3053\u308c\u3092\u8aad\u3093\u3067\u3044\u308b\u7686\u3055\u3093\u304c\u826f\u3044\u611f\u3058\u306e clojure.test \u3068\u4e92\u63db\u6027\u306e\u3042\u308b\u30c6\u30b9\u30c8\u7528\u306e\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u66f8\u3044\u3066\u304f\u308c\u308b\u3068\u50d5\u306f\u5b09\u3057\u3044\u3067\u3059\u3002\n\u3061\u306a\u307f\u306b\u3001\u5b8c\u5168\u306b clojure.test \u3068\u4e92\u63db\u6027\u306e\u3042\u308b\u72ec\u81ea\u306e\u30ec\u30dd\u30fc\u30bf\u30fc\u3092\u4f5c\u6210\u3059\u308b\u306e\u306f\u5730\u5473\u306b\u9762\u5012\u3067\u3001\u6709\u540d\u306a\u30c6\u30b9\u30c8\u30e9\u30f3\u30ca\u30fc\u3067\u3059\u3089\u307e\u3068\u3082\u306b\u5b9f\u88c5\u3067\u304d\u3066\u3044\u306a\u304b\u3063\u305f\u308a\u3057\u307e\u3059( \u5358\u306a\u308b\u4f5c\u696d\u6f0f\u308c\u306a\u306e\u304b\u8003\u616e\u6f0f\u308c\u306a\u306e\u304b\u306f\u77e5\u308a\u307e\u305b\u3093\u304c\u3001\u307e\u3060\u50d5\u3082 issue \u7acb\u3066\u3066\u306a\u3044\u306e\u3067\u8208\u5473\u3042\u308b\u65b9\u306f\u63a2\u3057\u3066\u307f\u308b\u3068\u6848\u5916\u7c21\u5358\u306b\u898b\u3064\u3051\u308b\u3053\u3068\u304c\u3067\u304d\u308b\u304b\u3082\u3057\u308c\u307e\u305b\u3093)\u3002\n\u3068\u3044\u3046\u308f\u3051\u3067 clojure.test \u306e\u62e1\u5f35\u306b\u3064\u3044\u3066\u3001\u3067\u3057\u305f\u3002\n\u6700\u8fd1\u3001\u6307\u5148\u30ce\u30cf\u30af\u304c\u597d\u304d\u3067\u305a\u3063\u3068\u8074\u3044\u3066\u307e\u3059\u3002\u3042\u3084\u3074\u30fc\u3067\u3059\u3002\n\n[\u6307\u5148\u30ce\u30cf\u30af-\u5c64\uff08MV\uff09/ YouTube](https://www.youtube.com/watch?v=xuB_oNeRdKE)\n\n\u3068\u3044\u3046\u3053\u3068\u3067 clojure.test \u306e\u5b9f\u7528\u7684\u306a\u8a71\u3067\u3059\u3002\"\u5b9f\u7528\u7684\"\u3068\u3044\u3046\u3068\u3084\u306f\u308a\"\u5b9f\u52d9\u3067\u3082\u5229\u7528\u3067\u304d\u308b\u3088\u3046\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u306b\u30d5\u30a3\u30c3\u30c8\u3059\u308b\u3088\u3046\u306b\u6539\u9020\u3057\u3066\u3044\u304f\"\u3068\u3044\u3046\u610f\u5473\u3060\u3068\u601d\u3046\u306e\u3067\u3001\u4eca\u56de\u306f clojure.test \u306e\u62e1\u5f35\u65b9\u6cd5\u306b\u3064\u3044\u3066\u66f8\u3044\u3066\u3044\u304d\u307e\u3059\u3002\n\nclojure.test \u3068\u306f\n-----------------\n\n\u307e\u305a\u3001\u6700\u521d\u306b clojure.test \u3068\u306f\u306a\u3093\u3067\u3057\u305f\u3063\u3051\u3068\u3044\u3046\u8a71\u3067\u3059\u304c\u3001\u7686\u3055\u3093\u3082\u3054\u5b58\u77e5\u306e\u901a\u308a Clojure \u306b\u30d0\u30f3\u30c9\u30eb\u3055\u308c\u3066\u3044\u308b\u30e6\u30cb\u30c3\u30c8\u30c6\u30b9\u30c8\u7528\u30d5\u30ec\u30fc\u30e0\u30ef\u30fc\u30af\u3067\u3059\u3002\n\n\u4e00\u822c\u7684\u306b\u826f\u304f\u4f7f\u308f\u308c\u3066\u3044\u308b\u30de\u30af\u30ed\u306f `deftest`, `testing`, `is`, `are` \u3042\u305f\u308a\u3067\u3057\u3087\u3046\u304b?\n\n\u7c21\u5358\u306b\u6539\u3081\u3066\u4f7f\u3044\u65b9\u3092\u898b\u3066\u304a\u304f\u3068\n\n``` clojure\n(deftest my-first-test\n  (is (= 1 (inc 0))))\n\n(deftest my-second-test\n  (are [x y] (= x (inc y))\n    1 0\n    2 1\n    3 2))\n\n(deftest my-failure-test\n  (is (thrown?\n       clojure.lang.ExceptionInfo\n       (throw (ex-info \"WTF!!\" {:foo 1})))))\n```\n\n\u3053\u3093\u306a\u3068\u3053\u308d\u3067\u3057\u3087\u3046\u304b?\u3060\u3044\u305f\u3044\u826f\u3044\u3068\u601d\u3046\u306e\u3067\u62e1\u5f35\u65b9\u6cd5\u306b\u3064\u3044\u3066\u8a71\u3057\u3066\u3044\u304d\u307e\u3057\u3087\u3046\u3002\n\nclojure.test \u306e\u62e1\u5f35\u3068\u306f?\n------------------------\n\nclojure.test \u304c\u62e1\u5f35\u3067\u304d\u308b\u3053\u3068\u306f\u62e1\u5f35\u6027\u306e\u9ad8\u3044 Clojure \u306b\u304a\u3044\u3066\u306f\u4f55\u306e\u4e0d\u601d\u8b70\u3082\u306a\u3044\u3053\u3068\u3067\u3059\u304c\u3001\u4e00\u4f53\u4f55\u3092\u62e1\u5f35\u3059\u308b\u3068\u3044\u3046\u306e\u3067\u3057\u3087\u3046\u304b\u3002\n\nclojure.test \u306e ns doc \u3092\u53c2\u7167\u3059\u308c\u3070\u3001\u6b21\u306e\u3088\u3046\u306a\u6587\u7ae0\u304c\u898b\u3064\u304b\u308a\u307e\u3059\u3002\n\n> EXTENDING TEST-IS (ADVANCED)\n>\n> You can extend the behavior of the \u00efs\" macro by defining new methods for the \u00e4ssert-expr\" multimethod. These methods are called during expansion of the \u00efs\" macro, so they should return quoted forms to be evaluated.\n>\n> You can plug in your own test-reporting framework by rebinding the report\" function: (report event)\n>\n> The 'event' argument is a map. It will always have a :type key, whose value will be a keyword signaling the type of event being reported. Standard events with :type value of :pass, :fail, and :error are called when an assertion passes, fails, and throws an exception, respectively. In that case, the event will also have the following keys:\n>\n> :expected The form that was expected to be true :actual A form representing what actually occurred :message The string message given as an argument to 'is'\n>\n> The testing\" strings will be a list in testing-contexts\\*, and the vars being tested will be a list in testing-vars\\*.\n>\n> Your report\" function should wrap any printing calls in the with-test-out\" macro, which rebinds **out** to the current value of **test-out**.\n>\n> For additional event types, see the examples in the code.\n\n\u3064\u307e\u308a\u3001\u50d5\u3089\u306f `is` \u30de\u30af\u30ed\u306e\u632f\u821e\u3044\u3092\u5909\u66f4\u3059\u308b\u6a5f\u4f1a\u3068 `report` \u95a2\u6570\u3092\u81ea\u5206\u304c\u4f7f\u3044\u305f\u3044\u3082\u306e\u306b\u5909\u66f4\u3059\u308b\u6a5f\u4f1a\u304c\u6b8b\u3055\u308c\u3066\u3044\u308b\u308f\u3051\u3067\u3059 (\u6975\u7aef\u306a\u8a71\u3092\u3059\u308c\u3070\u3001\u62e1\u5f35\u3059\u308b\u6a5f\u4f1a\u304c\u306a\u304f\u3066\u3082\u62e1\u5f35\u3057\u3066\u3057\u307e\u3046\u3053\u3068\u304c\u53ef\u80fd\u3060\u3063\u305f\u308a\u3059\u308b\u308f\u3051\u3067\u3059\u3051\u3069)\u3002\n\nis \u30de\u30af\u30ed\u306e\u632f\u821e\u3044\u3092\u62e1\u5f35\u3059\u308b\n---------------------------\n\n\u666e\u6bb5 `(is (thrown? clojure.lang.ExceptionInfo (throw (ex-info \"WTF!!\" {:foo 1}))))` \u306e\u3088\u3046\u306a\u30b3\u30fc\u30c9\u3092\u66f8\u3044\u3066\u3044\u307e\u3059\u304c\u3001 \u3053\u308c\u306f\u65e2\u306b `is` \u30de\u30af\u30ed\u306e\u62e1\u5f35\u3055\u308c\u305f\u632f\u821e\u3044\u3067\u3059\u3002\n\n\u3061\u3087\u3063\u3068\u610f\u5473\u304c\u5206\u304b\u3089\u306a\u3044\u3067\u3059\u3088\u306d\u3002\u5b9f\u969b\u306e clojure.test \u306e\u30b3\u30fc\u30c9\u3092\u53c2\u7167\u3057\u3066\u307f\u307e\u3059\u3002\n\n``` clojure\n(defmulti assert-expr\n  (fn [msg form]\n    (cond\n      (nil? form) :always-fail\n      (seq? form) (first form)\n      :else :default)))\n\n;;; \u4e2d\u7565...\n\n(defmethod assert-expr 'thrown? [msg form]\n  ;; (is (thrown? c expr))\n  ;; Asserts that evaluating expr throws an exception of class c.\n  ;; Returns the exception thrown.\n  (let [klass (second form)\n        body (nthnext form 2)]\n    `(try ~@body\n          (do-report {:type :fail, :message ~msg,\n                   :expected '~form, :actual nil})\n          (catch ~klass e#\n            (do-report {:type :pass, :message ~msg,\n                     :expected '~form, :actual e#})\n            e#))))\n```\n\n`is` \u30de\u30af\u30ed\u3092\u8fbf\u3063\u3066\u3044\u304f\u3068 `assert-expr` \u3068\u3044\u3046\u30de\u30eb\u30c1\u30e1\u30bd\u30c3\u30c9\u304c\u5b9a\u7fa9\u3057\u3066\u3042\u308a\u3001 `form` \u304c\u30b7\u30fc\u30b1\u30f3\u30b9\u3067\u3042\u308c\u3070\u305d\u308c\u306e\u5148\u982d\u306e\u5024\u3067\u30c7\u30a3\u30b9\u30d1\u30c3\u30c1 \u3057\u3066\u3044\u307e\u3059\u3002\u4f8b\u5916\u3092\u30c6\u30b9\u30c8\u3059\u308b\u3068\u304d\u306b\u5229\u7528\u3059\u308b `thrown?` \u3068\u3044\u3046\u30b7\u30f3\u30dc\u30eb\u306f\u3053\u306e\u3088\u3046\u306b\u5b9f\u88c5\u3055\u308c\u3066\u3044\u308b\u3068\u3044\u3046\u308f\u3051\u3067\u3059\u306d(\u4f8b\u5916\u306e\u30c6\u30b9\u30c8\u306a\u306e\u3067 \u3061\u3083\u3093\u3068 `try` \u3057\u3066 `catch` \u3055\u308c\u308c\u3070\u30c6\u30b9\u30c8\u304c\u30d1\u30b9\u3059\u308b\u3068\u3044\u3046\u98a8\u306b\u66f8\u304b\u308c\u3066\u3044\u307e\u3059)\u3002\n\n\u3053\u308c\u306b\u5023\u3063\u3066\u3061\u3087\u3063\u3068\u3057\u305f\u632f\u821e\u3044\u3092\u8ffd\u52a0\u3057\u3066\u307f\u307e\u3057\u3087\u3046\u3002\n\n``` clojure\n(require '[clojure.test :as t])\n\n(defmethod t/assert-expr 'fix-in-the-future [msg form]\n  `(t/do-report {:type :pass :message ~(or msg \"Fix in the future\")}))\n```\n\n\u3053\u308c\u306f\u307e\u3060\u30c6\u30b9\u30c8\u304c\u901a\u3089\u306a\u3044\u3051\u3069\u3001\u3068\u308a\u3042\u3048\u305a\u5c06\u6765\u7684\u306b\u30c6\u30b9\u30c8\u3092\u901a\u3059\u4e88\u5b9a\u306e\u3082\u306e\u3092\u66f8\u3044\u3066\u304a\u304f\u305f\u3081\u306e\u3082\u306e\u3068\u3044\u3046\u611f\u3058\u3067\u3059\u3002\u30c6\u30b9\u30c8\u306f\u5e38\u306b\u30d1\u30b9\u3057\u307e\u3059\u3002\n\n\u6b21\u306e\u3088\u3046\u306b\u4f7f\u3044\u307e\u3059\u3002\n\n``` clojure\n(deftest my-fix-in-the-future-test\n  (is (fix-in-the-future (= 1 2))))\n```\n\n\u3053\u308c\u3067 `is` \u30de\u30af\u30ed\u306e\u632f\u821e\u3044\u3092\u62e1\u5f35\u3059\u308b\u3053\u3068\u304c\u51fa\u6765\u307e\u3057\u305f\u3002\u3053\u306e\u3088\u3046\u306b `assert-expr` \u3092\u62e1\u5f35\u3057\u3066\u3044\u308b\u30e9\u30a4\u30d6\u30e9\u30ea\u3068\u3057\u3066\u306f [fudje](https://github.com/jimpil/fudje) \u304c\u3042\u308a\u307e\u3059\u3002\n\nis \u30de\u30af\u30ed\u3092\u30e9\u30c3\u30d7\u3057\u305f DSL \u3092\u69cb\u7bc9\u3059\u308b\n------------------------------------\n\n\u3053\u308c\u306f\u4e0a\u8ff0\u306e\u65b9\u6cd5\u3068\u306f\u3084\u3084\u9055\u3063\u3066\u3044\u3066\u3001 `is` \u30de\u30af\u30ed\u3092\u66f4\u306b\u30de\u30af\u30ed\u3067\u30e9\u30c3\u30d7\u3057\u3066\u72ec\u81ea\u306e DSL \u3092\u69cb\u7bc9\u3057\u3066\u3057\u307e\u3046\u3068\u3044\u3046\u8a66\u307f\u3067\u3059\u3002 \u3053\u306e\u624b\u6cd5\u306e\u4ee3\u8868\u683c\u306f `are` \u30de\u30af\u30ed\u3067\u3059\u3002\n\n\u3055\u3066\u3001\u4f8b\u3048\u3070 JUnit4 \u304f\u3089\u3044\u306e\u6642\u4ee3\u306b Java \u3092\u3084\u3063\u3066\u304d\u305f\u65b9\u3067\u3057\u305f\u3089 `assertEquals` \u3068\u3044\u3046\u30e1\u30bd\u30c3\u30c9\u3092\u3054\u5b58\u77e5\u3060\u3068\u601d\u3044\u307e\u3059\u304c\u3001 `(assert-equals expected actual)` \u3068\u3044\u3046\u98a8\u306b\u8868\u73fe\u51fa\u6765\u308b\u30de\u30af\u30ed\u3092\u66f8\u3044\u3066\u307f\u307e\u3059\u3002\n\n``` clojure\n(require '[clojure.test :as t])\n\n(defmacro assert-equals [expected actual]\n  `(t/is (~'= ~expected ~actual)))\n```\n\n\u7c21\u5358\u3067\u3059\u306d\u3002\u3053\u308c\u306f\u5b9f\u969b\u6b21\u306e\u3088\u3046\u306b\u4f7f\u3048\u3066\u3061\u3083\u3093\u3068\u52d5\u4f5c\u3057\u307e\u3059\u3002\n\n``` clojure\n(deftest my-assert-fn\n  (assert-equals 1 (inc 1)))\n\n;; Fail in my-assert-fn\n;; expected: (= 1 (inc 1))\n;;   actual: (not (= 1 2))\n```\n\n\u3061\u306a\u307f\u306b `are` \u30de\u30af\u30ed\u306f\u3082\u3046\u3061\u3087\u3063\u3068\u3060\u3051\u8907\u96d1\u3067\u3001 clojure.template \u306e\u30de\u30af\u30ed\u3092\u547c\u3073\u51fa\u3057\u3066 `is` \u30de\u30af\u30ed\u3078\u3068\u5c55\u958b\u3057\u3066\u3044\u307e\u3059\u3002 \u3053\u306e\u3088\u3046\u306b DSL \u3092\u69cb\u7bc9\u3057\u3066\u3044\u308b\u30e9\u30a4\u30d6\u30e9\u30ea\u306f\u4f8b\u3048\u3070 [iota](https://github.com/juxt/iota) \u3084 [kerodon](https://github.com/xeqi/kerodon) \u306a\u3069\u304c\u3042\u308a\u307e\u3059\u3002\n\nreport \u95a2\u6570\u306e\u632f\u821e\u3044\u3092\u62e1\u5f35\u3059\u308b\n-----------------------------\n\n\u4e0a\u8ff0\u3057\u305f `assert-expr` \u306e\u62e1\u5f35\u3067 `fix-in-the-future` \u3092\u8ffd\u52a0\u3057\u307e\u3057\u305f\u304c\u3001 `do-report` \u306b\u6e21\u3057\u3066\u3044\u305f\u30de\u30c3\u30d7\u306e `:type` \u306f `:pass` \u3067\u3057\u305f\u3002\n\n``` clojure\n(defmethod t/assert-expr 'fix-in-the-future [msg form]\n  `(t/do-report {:type :pass :message ~(or msg \"Fix in the future\")}))\n```\n\n\u3053\u306e\u307e\u307e\u3067\u306f\u30c6\u30b9\u30c8\u304c 1 \u4ef6\u6210\u529f\u3057\u3066\u3044\u308b\u3068\u898b\u505a\u3055\u308c\u308b\u305f\u3081\u3001 `fix-in-the-future` \u3068\u3044\u3046\u3088\u308a\u306f `always-pass` \u306b\u306a\u3063\u3066\u3057\u307e\u3044\u307e\u3059\u3002\n\n\u3053\u308c\u3092\u3069\u3046\u306b\u304b\u3059\u308b\u305f\u3081\u306b `report` \u306e\u632f\u821e\u3044\u3092\u5897\u3084\u3057\u307e\u3057\u3087\u3046\u3002\u6b21\u306e\u3088\u3046\u306b\u5897\u3084\u3057\u307e\u3059\u3002\n\n``` clojure\n(require '[clojure.test :as t])\n\n(defmethod t/report :fixme [m]\n  (t/with-test-out\n    (t/inc-report-counter :fixme)\n    (println \"\\nFIXME in\" (t/testing-vars-str m))\n    (when (seq *testing-contexts*) (println (testing-contexts-str)))\n    (when-let [message (:message m)] (println message))))\n```\n\n\u305d\u308c\u304b\u3089\u3001 `fix-in-the-future` \u306e\u65b9\u3082\u4fee\u6b63\u3057\u3066\u304a\u304d\u307e\u3059\u3002\n\n``` clojure\n(defmethod t/assert-expr 'fix-in-the-future [msg form]\n  `(t/do-report {:type :fixme :message ~(or msg \"Fix in the future\")}))\n```\n\n\u3053\u3046\u3057\u305f\u3053\u3068\u3067\u30c6\u30b9\u30c8\u306e\u7d50\u679c\u306b\u3001\u5c06\u6765\u4fee\u6b63\u3057\u306a\u3044\u3068\u3044\u3051\u306a\u3044\u3082\u306e\u304c\u53cd\u6620\u3055\u308c\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3057\u305f\u3002\n\n\u3053\u308c\u3092\u5b9f\u969b\u306b\u4f7f\u3063\u305f\u3082\u306e\u3092\u30c6\u30b9\u30c8\u3068\u3057\u3066\u5b9f\u884c\u3059\u308b\u3068\u6b21\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002\n\n``` clojure\n(t/run-tests 'demo.core-test)\n;; {:test 11, :pass 6, :fail 5, :error 0, :fixme 2, :type :summary}\n```\n\n\u3053\u306e\u3088\u3046\u306b `report` \u3092\u62e1\u5f35\u3057\u3066\u3044\u308b\u30e9\u30a4\u30d6\u30e9\u30ea\u3068\u3057\u3066\u306f [clojure.test.check](https://github.com/clojure/test.check) \u3084 [bolth](https://github.com/yeller/bolth) \u306a\u3069\u304c\u3042\u308a\u307e\u3059\u3002\n\n\u81ea\u5206\u3067\u30c6\u30b9\u30c8\u30e9\u30f3\u30ca\u30fc\u3092\u5b9f\u88c5\u3059\u308b\n------------------------------\n\n\u2026\u306b\u306f\u6d41\u77f3\u306b\u7d19\u9762\u3068\u6642\u9593\u304c\u8db3\u308a\u306a\u3044\u3067\u3084\u3081\u3066\u304a\u304d\u307e\u3057\u3087\u3046\u3002 clojure.test \u305d\u308c\u81ea\u8eab\u306e\u30c6\u30b9\u30c8\u30e9\u30f3\u30ca\u30fc\u3092\u8aad\u3081\u3070\u306a\u3093\u3068\u306a\u304f\u5b9f\u88c5\u3067\u304d\u305d\u3046\u3060\u3068\u601d\u3046\u306f\u305a\u3067\u3059\u3002\n\n\u72ec\u81ea\u306e\u30c6\u30b9\u30c8\u30e9\u30f3\u30ca\u30fc\u3092\u5b8c\u5168\u306b\u5b9f\u88c5\u3057\u3066\u3044\u308b\u306e\u306f bolth \u304b [eftest](https://github.com/weavejester/eftest) \u3060\u3051\u3060\u3068\u601d\u3044\u307e\u3059( Midje \u3084 speclj \u306f\u305d\u3082\u305d\u3082\u306e\u65b9\u5411\u6027\u304c\u9055\u3046\u6c17\u304c\u3057\u3066\u3044\u308b\u306e\u3067\u9664\u5916)\u3002\n\n\u6700\u5f8c\u306b\n------\n\n\u4eca\u56de\u3001\u4f55\u6545 clojure.test \u306e\u62e1\u5f35\u306b\u30d5\u30a9\u30fc\u30ab\u30b9\u3057\u305f\u304b\u3068\u3044\u3046\u3068\u3001 Midje \u3092\u4f7f\u3046\u306e\u3092\u3084\u3081\u305f\u3044\u306a\u30fc\u3068\u601d\u3063\u3066\u3044\u308b\u304b\u3089\u3067\u3059(\u73fe\u5728\u3001\u5f0a\u793e\u306e\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u3067\u306f Midje \u3067\u591a\u304f\u306e\u30c6\u30b9\u30c8\u304c\u66f8\u304b\u308c\u3066\u3044\u307e\u3059)\u3002 \u4ed6\u306b\u3082 clojure.test \u306e\u5b9f\u88c5\u3092\u8aad\u307e\u306a\u3051\u308c\u3070\u306a\u3089\u306a\u3044\u4e8b\u60c5\u304c\u3042\u3063\u305f\u308a\u3057\u3066\u4e01\u5ea6\u826f\u304b\u3063\u305f\u3068\u3044\u3046\u306e\u3082\u3042\u308a\u307e\u3059\u304c\u3002\n\n\u3053\u3053\u6700\u8fd1\u306e Clojure \u30b3\u30df\u30e5\u30cb\u30c6\u30a3\u3092\u898b\u3066\u3044\u308b\u3068 clojure.test.check \u3092\u4f7f\u3063\u3066\u3044\u3053\u3046\u3068\u3044\u3046\u6a5f\u904b\u304c\u719f\u3057\u3066\u304d\u3066\u3044\u308b\u3088\u3046\u306b\u601d\u3044\u307e\u3059\u3002 \u305d\u306e\u80cc\u666f\u306b\u306f clojure.spec \u306a\u3069\u306e\u767b\u5834\u304c\u3042\u308a\u307e\u3059\u304c\u3001\u3053\u306e\u3088\u3046\u306a clojure.test \u3068\u4e92\u63db\u306e\u3042\u308b\u5358\u6a5f\u80fd\u306e\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u4f7f\u3044\u305f\u304f\u3066\u3082 Midje \u3084 speclj \u306e\u3088\u3046\u306a \u72ec\u7acb\u3057\u305f\u30c6\u30b9\u30c8\u30d5\u30ec\u30fc\u30e0\u30ef\u30fc\u30af\u3092\u4f7f\u3063\u3066\u3044\u308b\u3068\u5229\u7528\u3059\u308b\u3053\u3068\u304c\u51fa\u6765\u307e\u305b\u3093(\u3042\u308b\u3044\u306f\u96e3\u3057\u3044)\u3002 (\u3053\u308c\u306f\u5b8c\u5168\u306b\u4f59\u8ac7\u306b\u306a\u308b\u3051\u3069\u3001 Midje \u306e\u30c6\u30b9\u30c8\u30e9\u30f3\u30ca\u30fc\u306f clojure.test \u306e `deftest` \u306a\u3069\u3092\u4f7f\u3063\u3066\u3044\u3066\u3082\u3001\u305d\u308c\u306f\u305d\u308c\u3068\u3057\u3066\u5225\u3067\u5b9f\u884c\u3057\u3066\u304f\u308c\u308b\u306e\u3067 \u73fe\u5b9f\u7684\u306b\u306f\u4e21\u65b9\u4f7f\u3044\u7d9a\u3051\u308b\u3053\u3068\u3082\u3067\u304d\u307e\u3059 / speclj \u306f `deftest` \u3092\u62fe\u3063\u3066\u306f\u304f\u308c\u306a\u3044\u3088\u3046\u3067\u3059)\n\n\u306a\u306e\u3067\u3001\u72ec\u7acb\u3057\u305f\u30aa\u30ec\u30aa\u30ec\u30c6\u30b9\u30c8\u30d5\u30ec\u30fc\u30e0\u30ef\u30fc\u30af\u3092\u4f7f\u3046\u3088\u308a\u306f\u3001 clojure.test \u3068\u4e92\u63db\u306e\u3042\u308b\u3088\u3046\u306a\u3082\u306e\u3092\u4f5c\u3063\u305f\u308a\u3001\u62e1\u5f35\u3067\u304d\u308b\u3068\u3053\u308d\u3092\u62e1\u5f35\u3057\u3066\u3044\u304f\u65b9\u304c \u826f\u3044\u306e\u3067\u306f\u306a\u3044\u304b\u3068\u601d\u3063\u3066\u4eca\u56de\u306e\u8a18\u4e8b\u3092\u66f8\u304d\u307e\u3057\u305f\u3002\u3053\u308c\u3092\u8aad\u3093\u3067\u3044\u308b\u7686\u3055\u3093\u304c\u826f\u3044\u611f\u3058\u306e clojure.test \u3068\u4e92\u63db\u6027\u306e\u3042\u308b\u30c6\u30b9\u30c8\u7528\u306e\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u66f8\u3044\u3066\u304f\u308c\u308b\u3068\u50d5\u306f\u5b09\u3057\u3044\u3067\u3059\u3002\n\n\u3061\u306a\u307f\u306b\u3001\u5b8c\u5168\u306b clojure.test \u3068\u4e92\u63db\u6027\u306e\u3042\u308b\u72ec\u81ea\u306e\u30ec\u30dd\u30fc\u30bf\u30fc\u3092\u4f5c\u6210\u3059\u308b\u306e\u306f\u5730\u5473\u306b\u9762\u5012\u3067\u3001\u6709\u540d\u306a\u30c6\u30b9\u30c8\u30e9\u30f3\u30ca\u30fc\u3067\u3059\u3089\u307e\u3068\u3082\u306b\u5b9f\u88c5\u3067\u304d\u3066\u3044\u306a\u304b\u3063\u305f\u308a\u3057\u307e\u3059( \u5358\u306a\u308b\u4f5c\u696d\u6f0f\u308c\u306a\u306e\u304b\u8003\u616e\u6f0f\u308c\u306a\u306e\u304b\u306f\u77e5\u308a\u307e\u305b\u3093\u304c\u3001\u307e\u3060\u50d5\u3082 issue \u7acb\u3066\u3066\u306a\u3044\u306e\u3067\u8208\u5473\u3042\u308b\u65b9\u306f\u63a2\u3057\u3066\u307f\u308b\u3068\u6848\u5916\u7c21\u5358\u306b\u898b\u3064\u3051\u308b\u3053\u3068\u304c\u3067\u304d\u308b\u304b\u3082\u3057\u308c\u307e\u305b\u3093)\u3002\n\n\u3068\u3044\u3046\u308f\u3051\u3067 clojure.test \u306e\u62e1\u5f35\u306b\u3064\u3044\u3066\u3001\u3067\u3057\u305f\u3002\n"}