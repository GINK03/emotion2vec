{"context": "iOS\u3067WebSocket\u901a\u4fe1\u3092\u3059\u308b\u305f\u3081\u306bSocket.IO\u306eSwift\u7528\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u3092\u5229\u7528\u3057\u307e\u3057\u305f\u304c\u3001\n\u3061\u3087\u3063\u3068Option\u306e\u8a2d\u5b9a\u3084\u53d7\u4fe1\u3057\u305f\u60c5\u5831\u306e\u5909\u63db\u3067\u624b\u9593\u53d6\u3063\u3066\u305f\u306e\u3067\u899a\u3048\u3066\u308b\u3046\u3061\u306b\u30e1\u30e2\u30e1\u30e2\u3002\n\u30e1\u30e2\u306a\u306e\u3067\u3001\u500b\u4eba\u7684\u306b\u5fc5\u8981\u3060\u3063\u305f\u90e8\u5206\u307e\u3067\u3067\u7d42\u4e86\u3057\u3066\u307e\u3059\u3002\n\nSocket.IO-Client-Swift\nhttps://github.com/socketio/socket.io-client-swift\n\u8a18\u8ff0\u6642\u70b9\u306e\u30d0\u30fc\u30b8\u30e7\u30f3\u306f\u3001v6.1.4\n\n\u4ee5\u524d\u306e\u8a18\u4e8b\nSwift\u3067WebSocket\u901a\u4fe1\u306e\u30c6\u30b9\u30c8\nhttp://qiita.com/Takumi_Mori/items/390c5dae9e2a9d4290bd\n\u5b9f\u969b\u4f7f\u3063\u3066\u307f\u308b\u65b9\u6cd5\u306b\u95a2\u3057\u3066\u306f\u3053\u3063\u3061\u3067\u66f8\u3044\u3066\u307e\u3059\u3002\n\nOptions\nSocketIOClient\u306eConstructors\u3067\u6307\u5b9a\u3059\u308bSocketIOClientOption\u3067\u3059\u304c\u3001\n\u305d\u308c\u305e\u308c\u6307\u5b9a\u3057\u305f\u3089\u3069\u3046\u306a\u308b\u306e\u304b\u5168\u7136\u77e5\u3089\u306a\u3044\u306e\u3067\u516c\u5f0f\u306e\u89e3\u8aac\u3092\u7ffb\u8a33\u3057\u3064\u3064...\n\nConnectParams([String: AnyObject])\n// Dictionary whose contents will be passed with the connection.\n\n\u30b5\u30fc\u30d0\u30fc\u3068\u306e\u63a5\u7d9a\u304c\u5b8c\u4e86\u3057\u305f\u3068\u304d\u306b\u3001\u3053\u3053\u3067\u6307\u5b9a\u3057\u305fDictionary<String, AnyObject>\u304c\u6e21\u3055\u308c\u307e\u3059\u3002\n\ncase Cookies([NSHTTPCookie])\n// An array of NSHTTPCookies. Passed during the handshake. Default is nil.\n\nhandshake\u306e\u969b\u306b\u53d7\u3051\u6e21\u3055\u308c\u308bNSHTTPCookes\u306e\u914d\u5217\u3002\n\u30c7\u30d5\u30a9\u30eb\u30c8\u306fnil\nWikipedia:\u30cf\u30f3\u30c9\u30b7\u30a7\u30a4\u30af\n\nDoubleEncodeUTF8(Bool)\n// Whether or not to double encode utf8. \nIf using the node based server this should be true. Default is true.\n\nUTF8\u3092\u30a8\u30f3\u30b3\u30fc\u30c9\u3059\u308b\u969b\u306b\u3001\uff12\u500d\u306b\u3059\u308b\u304b\u3069\u3046\u304b\u3002\u30ce\u30fc\u30c9\u30d9\u30fc\u30b9\u306e\u30b5\u30fc\u30d0\u30fc\u3092\u4f7f\u7528\u3059\u308b\u5834\u5408\u3001\u3053\u308c\u3092true\u306b\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\n\u30c7\u30d5\u30a9\u30eb\u30c8\u306ftrue\n\nExtraHeaders([String: String])\n// Adds custom headers to the initial request. Default is nil.\n\n\u6700\u521d\u306e\u30ea\u30af\u30a8\u30b9\u30c8\u306b\u30ab\u30b9\u30bf\u30e0\u30d8\u30c3\u30c0\u30fc\u3092\u8ffd\u52a0\u3057\u307e\u3059\u3002\n\u30c7\u30d5\u30a9\u30eb\u30c8\u306fnil\n\nForcePolling(Bool)\n// `true` forces the client to use xhr-polling. Default is `false`\n\ntrue\u306b\u3057\u305f\u5834\u5408\u3001xhr-polling\u3092\u884c\u3046\u3088\u3046\u306b\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u306b\u5f37\u5236\u3057\u307e\u3059\u3002\n\u30c7\u30d5\u30a9\u30eb\u30c8\u306ffalse\n\uff08XHR polling\u3063\u3066\u3001XMLHttpRequest\u3067\u306e\u30dd\u30fc\u30ea\u30f3\u30b0\u3063\u3066\u610f\u5473\u306a\u306e\u304b\u306a\u30fb\u30fb\u30fb\u3002\u306a\u3093\u304btrue\u306b\u3059\u308b\u3068\u518d\u63a5\u7d9a\u306e\u30ed\u30b0\u304c\u591a\u3044\u5370\u8c61\uff09\n\nForceNew(Bool)\n// Will a create a new engine for each connect. \nUseful if you find a bug in the engine related to reconnects\n\n\u305d\u308c\u305e\u308c\u306e\u63a5\u7d9a\u306e\u305f\u3081\u306b\u65b0\u3057\u3044\u30a8\u30f3\u30b8\u30f3\u3092\u4f5c\u6210\u3057\u307e\u3059\u3002\u518d\u63a5\u7d9a\u306b\u95a2\u9023\u3059\u308b\u4e0d\u5177\u5408\u3092\u898b\u3064\u3051\u305f\u5834\u5408\u3001\u4fbf\u5229\u306b\u5229\u7528\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\nForceWebsockets(Bool)\n// `true` forces the client to use WebSockets. Default is `false`\n\ntrue\u306b\u3057\u305f\u5834\u5408\u3001WebSockets\u3092\u5229\u7528\u3059\u308b\u3053\u3068\u3092\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u306b\u5f37\u5236\u3057\u307e\u3059\u3002\n\u30c7\u30d5\u30a9\u30eb\u30c8\u306ffalse\npolling\u306b\u3088\u308b\u63a5\u7d9a\u306f\u8a31\u53ef\u3057\u3066\u3044\u306a\u304f\u3066\u3001WebSocket\u3067\u901a\u4fe1\u3092\u884c\u3046\u4ed5\u69d8\u306b\u306a\u3063\u3066\u3044\u305f\u3089\n\u3053\u308c\u3092true\u306b\u3057\u3066\u3044\u306a\u3044\u3068\u3046\u307e\u304f\u52d5\u304d\u307e\u305b\u3093\u3002\u305d\u306e\u305b\u3044\u3067\u3046\u307e\u304f\u52d5\u3044\u3066\u307e\u305b\u3093\u3067\u3057\u305f\u3002\u3002\u3002\n\nHandleQueue(dispatch_queue_t)\n// The dispatch queue that handlers are run on. Default is the main queue.\n\n\u30cf\u30f3\u30c9\u30e9\u3092\u5b9f\u884c\u3059\u308b\u3068\u304d\u306b\u5229\u7528\u3059\u308bdispatch queue\u3092\u6307\u5b9a\u3057\u307e\u3059\u3002\n\u30c7\u30d5\u30a9\u30eb\u30c8\u306fmain queue\u304c\u6307\u5b9a\u3055\u308c\u307e\u3059\u3002\n\nLog(Bool)\n// If `true` socket will log debug messages. Default is false.\n\ntrue\u306b\u3057\u305f\u5834\u5408\u3001socket\u306f\u30ed\u30b0\u30a6\u30a3\u30f3\u30c9\u30a6\u306b\u30c7\u30d0\u30c3\u30b0\u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u8868\u793a\u3057\u307e\u3059\u3002\n\u30c7\u30d5\u30a9\u30eb\u30c8\u306ffalse\n\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u30ed\u30b0\u304c\u8868\u793a\u3055\u308c\u307e\u3059\u3002\n2016-07-04 17:16:19.184 MyApp[9743:2389930] LOG SocketEngine: Starting engine. Server: http://localhost:8080\n2016-07-04 17:16:19.184 MyApp[9743:2389930] LOG SocketEngine: Handshaking\n2016-07-04 17:16:19.185 MyApp[9743:2389930] LOG SocketEnginePolling: Doing polling request\n2016-07-04 17:16:19.167 MyApp[9743:2389791] LOG SocketEnginePolling: Doing polling request\n2016-07-04 17:16:19.269 MyApp[9743:2389791] LOG SocketEnginePolling: Got polling response\n2016-07-04 17:16:19.270 MyApp[9743:2389930] LOG SocketEnginePolling: Got polling response\n\n\nLogger(SocketLogger)\n// Custom logger that conforms to SocketLogger. Will use the default logging otherwise.\nSocketLogger\u306b\u6e96\u62e0\u3057\u305f\u30ab\u30b9\u30bf\u30e0\u30ed\u30b0\u51fa\u529b\u3092\u5229\u7528\u3059\u308b\u5834\u5408\u3002\n\u305d\u308c\u4ee5\u5916\u306e\u5834\u5408\u306f\u3001\u30c7\u30d5\u30a9\u30eb\u30c8\u306e\u30ed\u30b0\u51fa\u529b\u3092\u5229\u7528\u3059\u308b\u3002\n\nNsp(String)\n// The namespace to connect to. Must begin with /. Default is `/`\n\n\u63a5\u7d9a\u3059\u308b\u305f\u3081\u306e\u30cd\u30fc\u30e0\u30b9\u30da\u30fc\u30b9\u3092\u6307\u5b9a\u3057\u307e\u3059\u3002\n\u5fc5\u305a/.\u304b\u3089\u59cb\u3081\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\n\u30c7\u30d5\u30a9\u30eb\u30c8\u306f/\n\nPath(String)\n// If the server uses a custom path. ex: `\"/swift/\"`. Default is `\"\"`\n\n\u30b5\u30fc\u30d0\u30fc\u304c\u30ab\u30b9\u30bf\u30e0\u30d1\u30b9\u3092\u4f7f\u7528\u3057\u3066\u3044\u308b\u5834\u5408\u306b\u6307\u5b9a\u3002\n\u4f8b\u3048\u3070\"/swift/\"\u306a\u3069\u3002\n\u30c7\u30d5\u30a9\u30eb\u30c8\u306f\"\"\n\nReconnects(Bool)\n// Whether to reconnect on server lose. Default is `true`\n\n\u30b5\u30fc\u30d0\u30fc\u3068\u306e\u63a5\u7d9a\u304c\u5207\u308c\u305f\u5834\u5408\u306b\u3001\u518d\u63a5\u7d9a\u3059\u308b\u304b\u3069\u3046\u304b\u3002\n\u30c7\u30d5\u30a9\u30eb\u30c8\u306ftrue\n\nReconnectAttempts(Int)\n// How many times to reconnect. Default is `-1` (infinite tries)\n\n\u4f55\u56de\u307e\u3067\u518d\u63a5\u7d9a\u3092\u8a66\u307f\u308b\u304b\u3002\n\u30c7\u30d5\u30a9\u30eb\u30c8\u306f-1\u3067\u3001\u3053\u308c\u306f\u7121\u9650\u56de\u65bd\u884c\u3059\u308b\u3053\u3068\u306b\u306a\u308b\n\nReconnectWait(Int)\n// Amount of time to wait between reconnects. Default is `10`\n\n\u518d\u63a5\u7d9a\u306e\u9593\u306b\u5f85\u6a5f\u3059\u308b\u6642\u9593\u3002\n\u30c7\u30d5\u30a9\u30eb\u30c8\u306f10\u79d2\n\nSessionDelegate(NSURLSessionDelegate)\n// Sets an NSURLSessionDelegate for the underlying engine. \nUseful if you need to handle self-signed certs. Default is nil.\n\n\u57fa\u672c\u3068\u306a\u308b\u30a8\u30f3\u30b8\u30f3\u306eNSURLSessionDelegate\u3092\u30bb\u30c3\u30c8\u3057\u307e\u3059\u3002\n\u81ea\u5df1\u7f72\u540d\u8a3c\u660e\u66f8\u3092\u5229\u7528\u3059\u308b\u5fc5\u8981\u304c\u3042\u308b\u5834\u5408\u306a\u3069\u306b\u5229\u7528\u3067\u304d\u307e\u3059\u3002\n\u30c7\u30d5\u30a9\u30eb\u30c8\u306fnil\n\nSecure(Bool)\n// If the connection should use TLS. Default is false.\n\n\u63a5\u7d9a\u306bTLS\u3092\u5229\u7528\u3059\u308b\u5fc5\u8981\u304c\u3042\u308b\u3068\u304d\u3002\n\u30c7\u30d5\u30a9\u30eb\u30c8\u306ffalse\n\nSecurity(SSLSecurity)\n// Allows you to set which certs are valid. Useful for SSL pinning.\n\n\u6709\u52b9\u306a\u8a3c\u660e\u66f8\u3092\u8a2d\u5b9a\u3067\u304d\u307e\u3059\u3002\nSSL pinning\u3067\u5229\u7528\u3067\u304d\u307e\u3059\u3002\n\nSelfSigned(Bool)\n// Sets WebSocket.selfSignedSSL. Use this if you're using self-signed certs.\n\nWebSocket.selfSignedSSL\u3092\u8a2d\u5b9a\u3057\u307e\u3059\u3002\n\u81ea\u5df1\u7f72\u540d\u8a3c\u660e\u66f8\u3092\u5229\u7528\u3057\u3066\u3044\u308b\u3068\u304d\u306b\u4f7f\u3044\u307e\u3059\u3002\n\nVoipEnabled(Bool)\n// Only use this option if you're using the client with VoIP services. \nChanges the way the WebSocket is created. Default is false\n\nVoIP\u30b5\u30fc\u30d3\u30b9\u3092\u5229\u7528\u3057\u305f\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u3092\u4f7f\u7528\u3057\u3066\u3044\u308b\u5834\u5408\u306b\u306e\u307f\u3001\n\u3053\u306e\u30aa\u30d7\u30b7\u30e7\u30f3\u3092\u4f7f\u7528\u3057\u307e\u3059\u3002WebSocket\u304c\u4f5c\u6210\u3055\u308c\u308b\u65b9\u6cd5\u3092\u5909\u66f4\u3057\u307e\u3059\u3002\n\u30c7\u30d5\u30a9\u30eb\u30c8\u306ffalse\n\nMethods\n\u9014\u4e2d\u3067\u529b\u5c3d\u304d\u305f...\n\n\non(event: String, callback: NormalCallback) -> NSUUID\n\n\u30a4\u30d9\u30f3\u30c8\u304c\u767a\u751f\u3057\u305f\u3068\u304d\u306e\u30cf\u30f3\u30c9\u30e9\u3092\u8ffd\u52a0\u3057\u307e\u3059\u3002\n\u30b3\u30fc\u30eb\u30d0\u30c3\u30af\u306e\u30a2\u30a4\u30c6\u30e0\u306f\u3001\u914d\u5217\uff08Array\uff09\u306e\u5f62\u3067\u6e21\u3055\u308c\u307e\u3059\u3002 \n\nack can be used to send an ack when one is requested. \nSee example. Returns a unique id for the handler.\n\n\n\nonce(event: String, callback: NormalCallback) -> NSUUID\n\nAdds a handler that will only be executed once. \nReturns a unique id for the handler.\n\n\n\nonAny(callback:((event: String, items: AnyObject?)) -> Void)\n\nAdds a handler for all events. \nIt will be called on any received event.\n\n\n\nemit(event: String, _ items: AnyObject...)\n\nSends a message. Can send multiple items.\n\n\n\nemit(event: String, withItems items: [AnyObject])\n\n\nemit for Objective-C\n\n\n\nemitWithAck(event: String, _ items: AnyObject...) -> (timeoutAfter: UInt64, callback: (NSArray?) -> Void) -> Void\n\nSends a message that requests an acknowledgement from the server. \nReturns a function which you can use to add a handler. \nSee example. Note: The message is not sent until you call the returned function.\n\n\n\nemitWithAck(event: String, withItems items: [AnyObject]) -> (UInt64, (NSArray?) -> Void) -> Void\n\n\nemitWithAck for Objective-C. \nNote: The message is not sent until you call the returned function.\n\n\n\nconnect()\n\nEstablishes a connection to the server.\n A \"connect\" event is fired upon successful connection.\n\n\n\nconnect(timeoutAfter timeoutAfter: Int, withTimeoutHandler handler: (() -> Void)?)\n\nConnect to the server. \nIf it isn't connected after timeoutAfter seconds, the handler is called.\n\n\n\ndisconnect()\n\nCloses the socket. \nReopening a disconnected socket is not fully tested.\n\n\n\nreconnect()\n\nCauses the client to reconnect to the server.\n\n\n\njoinNamespace(namespace: String)\n\nCauses the client to join namespace. \nShouldn't need to be called unless you change namespaces manually.\n\n\n\nleaveNamespace()\n\nCauses the client to leave the nsp and go back to /\n\n\n\noff(event: String)\n\nRemoves all event handlers for event.\n\n\n\noff(id id: NSUUID)\n\nRemoves the event that corresponds to id.\n\n\n\nremoveAllHandlers()\n\n\u3059\u3079\u3066\u306e\u30cf\u30f3\u30c9\u30e9\u3092\u524a\u9664\u3057\u307e\u3059\u3002\n\n\n\n\nClient Events\n\n\nconnect\n\nEmitted when on a successful connection.\n\n\n\ndisconnect\n\nEmitted when the connection is closed.\n\n\n\nerror\n\nEmitted on an error.\n\n\n\nreconnect\n\nEmitted when the connection is starting to reconnect.\n\n\n\nreconnectAttempt\n\nEmitted when attempting to reconnect.\n\n\n\niOS\u3067WebSocket\u901a\u4fe1\u3092\u3059\u308b\u305f\u3081\u306bSocket.IO\u306eSwift\u7528\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u3092\u5229\u7528\u3057\u307e\u3057\u305f\u304c\u3001\n\u3061\u3087\u3063\u3068Option\u306e\u8a2d\u5b9a\u3084\u53d7\u4fe1\u3057\u305f\u60c5\u5831\u306e\u5909\u63db\u3067\u624b\u9593\u53d6\u3063\u3066\u305f\u306e\u3067\u899a\u3048\u3066\u308b\u3046\u3061\u306b\u30e1\u30e2\u30e1\u30e2\u3002\n\u30e1\u30e2\u306a\u306e\u3067\u3001\u500b\u4eba\u7684\u306b\u5fc5\u8981\u3060\u3063\u305f\u90e8\u5206\u307e\u3067\u3067\u7d42\u4e86\u3057\u3066\u307e\u3059\u3002\n\n\n## Socket.IO-Client-Swift\nhttps://github.com/socketio/socket.io-client-swift\n\u8a18\u8ff0\u6642\u70b9\u306e\u30d0\u30fc\u30b8\u30e7\u30f3\u306f\u3001v6.1.4\n\n## \u4ee5\u524d\u306e\u8a18\u4e8b\nSwift\u3067WebSocket\u901a\u4fe1\u306e\u30c6\u30b9\u30c8\nhttp://qiita.com/Takumi_Mori/items/390c5dae9e2a9d4290bd\n\u5b9f\u969b\u4f7f\u3063\u3066\u307f\u308b\u65b9\u6cd5\u306b\u95a2\u3057\u3066\u306f\u3053\u3063\u3061\u3067\u66f8\u3044\u3066\u307e\u3059\u3002\n\n\n## Options\nSocketIOClient\u306eConstructors\u3067\u6307\u5b9a\u3059\u308bSocketIOClientOption\u3067\u3059\u304c\u3001\n\u305d\u308c\u305e\u308c\u6307\u5b9a\u3057\u305f\u3089\u3069\u3046\u306a\u308b\u306e\u304b\u5168\u7136\u77e5\u3089\u306a\u3044\u306e\u3067\u516c\u5f0f\u306e\u89e3\u8aac\u3092\u7ffb\u8a33\u3057\u3064\u3064...\n\n### ConnectParams([String: AnyObject]) \n```\n// Dictionary whose contents will be passed with the connection.\n```\n\n\u30b5\u30fc\u30d0\u30fc\u3068\u306e\u63a5\u7d9a\u304c\u5b8c\u4e86\u3057\u305f\u3068\u304d\u306b\u3001\u3053\u3053\u3067\u6307\u5b9a\u3057\u305f`Dictionary<String, AnyObject>`\u304c\u6e21\u3055\u308c\u307e\u3059\u3002\n\n### case Cookies([NSHTTPCookie]) \n```\n// An array of NSHTTPCookies. Passed during the handshake. Default is nil.\n```\n\nhandshake\u306e\u969b\u306b\u53d7\u3051\u6e21\u3055\u308c\u308bNSHTTPCookes\u306e\u914d\u5217\u3002\n\u30c7\u30d5\u30a9\u30eb\u30c8\u306fnil\n[Wikipedia:\u30cf\u30f3\u30c9\u30b7\u30a7\u30a4\u30af](https://ja.wikipedia.org/wiki/%E3%83%8F%E3%83%B3%E3%83%89%E3%82%B7%E3%82%A7%E3%82%A4%E3%82%AF)\n\n### DoubleEncodeUTF8(Bool) \n```\n// Whether or not to double encode utf8. \nIf using the node based server this should be true. Default is true.\n```\n\nUTF8\u3092\u30a8\u30f3\u30b3\u30fc\u30c9\u3059\u308b\u969b\u306b\u3001\uff12\u500d\u306b\u3059\u308b\u304b\u3069\u3046\u304b\u3002\u30ce\u30fc\u30c9\u30d9\u30fc\u30b9\u306e\u30b5\u30fc\u30d0\u30fc\u3092\u4f7f\u7528\u3059\u308b\u5834\u5408\u3001\u3053\u308c\u3092true\u306b\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\n\u30c7\u30d5\u30a9\u30eb\u30c8\u306ftrue\n\n### ExtraHeaders([String: String]) \n```\n// Adds custom headers to the initial request. Default is nil.\n```\n\n\u6700\u521d\u306e\u30ea\u30af\u30a8\u30b9\u30c8\u306b\u30ab\u30b9\u30bf\u30e0\u30d8\u30c3\u30c0\u30fc\u3092\u8ffd\u52a0\u3057\u307e\u3059\u3002\n\u30c7\u30d5\u30a9\u30eb\u30c8\u306fnil\n\n### ForcePolling(Bool) \n```\n// `true` forces the client to use xhr-polling. Default is `false`\n```\n\ntrue\u306b\u3057\u305f\u5834\u5408\u3001xhr-polling\u3092\u884c\u3046\u3088\u3046\u306b\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u306b\u5f37\u5236\u3057\u307e\u3059\u3002\n\u30c7\u30d5\u30a9\u30eb\u30c8\u306ffalse\n\uff08XHR polling\u3063\u3066\u3001XMLHttpRequest\u3067\u306e\u30dd\u30fc\u30ea\u30f3\u30b0\u3063\u3066\u610f\u5473\u306a\u306e\u304b\u306a\u30fb\u30fb\u30fb\u3002\u306a\u3093\u304btrue\u306b\u3059\u308b\u3068\u518d\u63a5\u7d9a\u306e\u30ed\u30b0\u304c\u591a\u3044\u5370\u8c61\uff09\n\n### ForceNew(Bool) \n```\n// Will a create a new engine for each connect. \nUseful if you find a bug in the engine related to reconnects\n```\n\n\u305d\u308c\u305e\u308c\u306e\u63a5\u7d9a\u306e\u305f\u3081\u306b\u65b0\u3057\u3044\u30a8\u30f3\u30b8\u30f3\u3092\u4f5c\u6210\u3057\u307e\u3059\u3002\u518d\u63a5\u7d9a\u306b\u95a2\u9023\u3059\u308b\u4e0d\u5177\u5408\u3092\u898b\u3064\u3051\u305f\u5834\u5408\u3001\u4fbf\u5229\u306b\u5229\u7528\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\n### ForceWebsockets(Bool) \n```\n// `true` forces the client to use WebSockets. Default is `false`\n```\n\ntrue\u306b\u3057\u305f\u5834\u5408\u3001WebSockets\u3092\u5229\u7528\u3059\u308b\u3053\u3068\u3092\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u306b\u5f37\u5236\u3057\u307e\u3059\u3002\n\u30c7\u30d5\u30a9\u30eb\u30c8\u306ffalse\n\npolling\u306b\u3088\u308b\u63a5\u7d9a\u306f\u8a31\u53ef\u3057\u3066\u3044\u306a\u304f\u3066\u3001WebSocket\u3067\u901a\u4fe1\u3092\u884c\u3046\u4ed5\u69d8\u306b\u306a\u3063\u3066\u3044\u305f\u3089\n\u3053\u308c\u3092true\u306b\u3057\u3066\u3044\u306a\u3044\u3068\u3046\u307e\u304f\u52d5\u304d\u307e\u305b\u3093\u3002\u305d\u306e\u305b\u3044\u3067\u3046\u307e\u304f\u52d5\u3044\u3066\u307e\u305b\u3093\u3067\u3057\u305f\u3002\u3002\u3002\n\n\n### HandleQueue(dispatch_queue_t) \n```\n// The dispatch queue that handlers are run on. Default is the main queue.\n```\n\n\u30cf\u30f3\u30c9\u30e9\u3092\u5b9f\u884c\u3059\u308b\u3068\u304d\u306b\u5229\u7528\u3059\u308bdispatch queue\u3092\u6307\u5b9a\u3057\u307e\u3059\u3002\n\u30c7\u30d5\u30a9\u30eb\u30c8\u306fmain queue\u304c\u6307\u5b9a\u3055\u308c\u307e\u3059\u3002\n\n### Log(Bool) \n\n```\n// If `true` socket will log debug messages. Default is false.\n```\n\ntrue\u306b\u3057\u305f\u5834\u5408\u3001socket\u306f\u30ed\u30b0\u30a6\u30a3\u30f3\u30c9\u30a6\u306b\u30c7\u30d0\u30c3\u30b0\u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u8868\u793a\u3057\u307e\u3059\u3002\n\u30c7\u30d5\u30a9\u30eb\u30c8\u306ffalse\n\n\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u30ed\u30b0\u304c\u8868\u793a\u3055\u308c\u307e\u3059\u3002\n\n```\n2016-07-04 17:16:19.184 MyApp[9743:2389930] LOG SocketEngine: Starting engine. Server: http://localhost:8080\n2016-07-04 17:16:19.184 MyApp[9743:2389930] LOG SocketEngine: Handshaking\n2016-07-04 17:16:19.185 MyApp[9743:2389930] LOG SocketEnginePolling: Doing polling request\n2016-07-04 17:16:19.167 MyApp[9743:2389791] LOG SocketEnginePolling: Doing polling request\n2016-07-04 17:16:19.269 MyApp[9743:2389791] LOG SocketEnginePolling: Got polling response\n2016-07-04 17:16:19.270 MyApp[9743:2389930] LOG SocketEnginePolling: Got polling response\n```\n\n### Logger(SocketLogger) \n// Custom logger that conforms to SocketLogger. Will use the default logging otherwise.\nSocketLogger\u306b\u6e96\u62e0\u3057\u305f\u30ab\u30b9\u30bf\u30e0\u30ed\u30b0\u51fa\u529b\u3092\u5229\u7528\u3059\u308b\u5834\u5408\u3002\n\u305d\u308c\u4ee5\u5916\u306e\u5834\u5408\u306f\u3001\u30c7\u30d5\u30a9\u30eb\u30c8\u306e\u30ed\u30b0\u51fa\u529b\u3092\u5229\u7528\u3059\u308b\u3002\n\n\n### Nsp(String) \n```\n// The namespace to connect to. Must begin with /. Default is `/`\n```\n\u63a5\u7d9a\u3059\u308b\u305f\u3081\u306e\u30cd\u30fc\u30e0\u30b9\u30da\u30fc\u30b9\u3092\u6307\u5b9a\u3057\u307e\u3059\u3002\n\u5fc5\u305a`/.`\u304b\u3089\u59cb\u3081\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\n\u30c7\u30d5\u30a9\u30eb\u30c8\u306f`/`\n\n### Path(String) \n```\n// If the server uses a custom path. ex: `\"/swift/\"`. Default is `\"\"`\n```\n\u30b5\u30fc\u30d0\u30fc\u304c\u30ab\u30b9\u30bf\u30e0\u30d1\u30b9\u3092\u4f7f\u7528\u3057\u3066\u3044\u308b\u5834\u5408\u306b\u6307\u5b9a\u3002\n\u4f8b\u3048\u3070`\"/swift/\"`\u306a\u3069\u3002\n\u30c7\u30d5\u30a9\u30eb\u30c8\u306f`\"\"`\n\n### Reconnects(Bool) \n```\n// Whether to reconnect on server lose. Default is `true`\n```\n\n\u30b5\u30fc\u30d0\u30fc\u3068\u306e\u63a5\u7d9a\u304c\u5207\u308c\u305f\u5834\u5408\u306b\u3001\u518d\u63a5\u7d9a\u3059\u308b\u304b\u3069\u3046\u304b\u3002\n\u30c7\u30d5\u30a9\u30eb\u30c8\u306ftrue\n\n### ReconnectAttempts(Int) \n```\n// How many times to reconnect. Default is `-1` (infinite tries)\n```\n\n\u4f55\u56de\u307e\u3067\u518d\u63a5\u7d9a\u3092\u8a66\u307f\u308b\u304b\u3002\n\u30c7\u30d5\u30a9\u30eb\u30c8\u306f-1\u3067\u3001\u3053\u308c\u306f\u7121\u9650\u56de\u65bd\u884c\u3059\u308b\u3053\u3068\u306b\u306a\u308b\n\n### ReconnectWait(Int) \n```\n// Amount of time to wait between reconnects. Default is `10`\n```\n\n\u518d\u63a5\u7d9a\u306e\u9593\u306b\u5f85\u6a5f\u3059\u308b\u6642\u9593\u3002\n\u30c7\u30d5\u30a9\u30eb\u30c8\u306f10\u79d2\n\n### SessionDelegate(NSURLSessionDelegate) \n```\n// Sets an NSURLSessionDelegate for the underlying engine. \nUseful if you need to handle self-signed certs. Default is nil.\n```\n\n\u57fa\u672c\u3068\u306a\u308b\u30a8\u30f3\u30b8\u30f3\u306eNSURLSessionDelegate\u3092\u30bb\u30c3\u30c8\u3057\u307e\u3059\u3002\n\u81ea\u5df1\u7f72\u540d\u8a3c\u660e\u66f8\u3092\u5229\u7528\u3059\u308b\u5fc5\u8981\u304c\u3042\u308b\u5834\u5408\u306a\u3069\u306b\u5229\u7528\u3067\u304d\u307e\u3059\u3002\n\u30c7\u30d5\u30a9\u30eb\u30c8\u306fnil\n\n### Secure(Bool) \n```\n// If the connection should use TLS. Default is false.\n```\n\n\u63a5\u7d9a\u306bTLS\u3092\u5229\u7528\u3059\u308b\u5fc5\u8981\u304c\u3042\u308b\u3068\u304d\u3002\n\u30c7\u30d5\u30a9\u30eb\u30c8\u306ffalse\n\n### Security(SSLSecurity) \n```\n// Allows you to set which certs are valid. Useful for SSL pinning.\n```\n\n\u6709\u52b9\u306a\u8a3c\u660e\u66f8\u3092\u8a2d\u5b9a\u3067\u304d\u307e\u3059\u3002\nSSL pinning\u3067\u5229\u7528\u3067\u304d\u307e\u3059\u3002\n\n### SelfSigned(Bool) \n```\n// Sets WebSocket.selfSignedSSL. Use this if you're using self-signed certs.\n```\n\nWebSocket.selfSignedSSL\u3092\u8a2d\u5b9a\u3057\u307e\u3059\u3002\n\u81ea\u5df1\u7f72\u540d\u8a3c\u660e\u66f8\u3092\u5229\u7528\u3057\u3066\u3044\u308b\u3068\u304d\u306b\u4f7f\u3044\u307e\u3059\u3002\n\n### VoipEnabled(Bool) \n```\n// Only use this option if you're using the client with VoIP services. \nChanges the way the WebSocket is created. Default is false\n```\n\nVoIP\u30b5\u30fc\u30d3\u30b9\u3092\u5229\u7528\u3057\u305f\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u3092\u4f7f\u7528\u3057\u3066\u3044\u308b\u5834\u5408\u306b\u306e\u307f\u3001\n\u3053\u306e\u30aa\u30d7\u30b7\u30e7\u30f3\u3092\u4f7f\u7528\u3057\u307e\u3059\u3002WebSocket\u304c\u4f5c\u6210\u3055\u308c\u308b\u65b9\u6cd5\u3092\u5909\u66f4\u3057\u307e\u3059\u3002\n\u30c7\u30d5\u30a9\u30eb\u30c8\u306ffalse\n\n\n## Methods\n\u9014\u4e2d\u3067\u529b\u5c3d\u304d\u305f...\n\n1. `on(event: String, callback: NormalCallback) -> NSUUID` \n    - \u30a4\u30d9\u30f3\u30c8\u304c\u767a\u751f\u3057\u305f\u3068\u304d\u306e\u30cf\u30f3\u30c9\u30e9\u3092\u8ffd\u52a0\u3057\u307e\u3059\u3002\n    - \u30b3\u30fc\u30eb\u30d0\u30c3\u30af\u306e\u30a2\u30a4\u30c6\u30e0\u306f\u3001\u914d\u5217\uff08Array\uff09\u306e\u5f62\u3067\u6e21\u3055\u308c\u307e\u3059\u3002 \n    - `ack` can be used to send an ack when one is requested. \n    - See example. Returns a unique id for the handler.\n2. `once(event: String, callback: NormalCallback) -> NSUUID`\n    - Adds a handler that will only be executed once. \n    - Returns a unique id for the handler.\n3. `onAny(callback:((event: String, items: AnyObject?)) -> Void)`\n    - Adds a handler for all events. \n    - It will be called on any received event.\n4. `emit(event: String, _ items: AnyObject...)`\n    - Sends a message. Can send multiple items.\n5. `emit(event: String, withItems items: [AnyObject])`\n    - `emit` for Objective-C\n6. `emitWithAck(event: String, _ items: AnyObject...) -> (timeoutAfter: UInt64, callback: (NSArray?) -> Void) -> Void`\n    - Sends a message that requests an acknowledgement from the server. \n    - Returns a function which you can use to add a handler. \n    - See example. Note: The message is not sent until you call the returned function.\n7. `emitWithAck(event: String, withItems items: [AnyObject]) -> (UInt64, (NSArray?) -> Void) -> Void`\n    - `emitWithAck` for Objective-C. \n    - Note: The message is not sent until you call the returned function.\n8. `connect()`\n    - Establishes a connection to the server.\n    -  A \"connect\" event is fired upon successful connection.\n9. `connect(timeoutAfter timeoutAfter: Int, withTimeoutHandler handler: (() -> Void)?)` \n    - Connect to the server. \n    - If it isn't connected after timeoutAfter seconds, the handler is called.\n10. `disconnect()` \n    - Closes the socket. \n    - Reopening a disconnected socket is not fully tested.\n11. `reconnect()` \n    - Causes the client to reconnect to the server.\n12. `joinNamespace(namespace: String)` \n    - Causes the client to join namespace. \n    - Shouldn't need to be called unless you change namespaces manually.\n13. `leaveNamespace()` \n    - Causes the client to leave the nsp and go back to /\n14. `off(event: String)` \n    - Removes all event handlers for event.\n15. `off(id id: NSUUID)`\n    - Removes the event that corresponds to id.\n16. `removeAllHandlers()`\n    - \u3059\u3079\u3066\u306e\u30cf\u30f3\u30c9\u30e9\u3092\u524a\u9664\u3057\u307e\u3059\u3002\n\nClient Events\n------\n1. `connect`\n    - Emitted when on a successful connection.\n2. `disconnect`\n    - Emitted when the connection is closed.\n3. `error`\n    - Emitted on an error.\n4. `reconnect`\n    - Emitted when the connection is starting to reconnect.\n5. `reconnectAttempt`\n    - Emitted when attempting to reconnect.\n", "tags": ["Swift", "Socket.io", "iOS"]}