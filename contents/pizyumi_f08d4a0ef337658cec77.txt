{"context": " More than 1 year has passed since last update.\u4eca\u65e5\u306fScala\u3067\u518d\u5e30\u95a2\u6570\u3092\u66f8\u3044\u3066\u307f\u307e\u3059\u3002\n@bleis\u6c0f\u306e\u4ee5\u4e0b\u306e\u8a18\u4e8b\u306e\u6d41\u308c\u306b\u6cbf\u3063\u3066\u3084\u3063\u3066\u3044\u304d\u307e\u3059\u3002\n\n\u518d\u5e30\u3067\u8003\u3048\u308b\n\n\u307e\u305a\u306f\u3001\u5217\u306e\u8981\u7d20\u306e\u7dcf\u548c\u3092\u8fd4\u3059sum\u95a2\u6570\u3002\ndef sum(xs: List[Int]): Int = xs match {\n    case Nil => 0\n    case x :: xs => x + sum(xs)\n}\n\n\u7c21\u5358\u3067\u3059\u3002\n\u4f7f\u7528\u4f8b\u3002\nscala> sum(Nil)\nres0: Int = 0\n\nscala> sum(1 :: Nil)\nres1: Int = 1\n\nscala> sum(2 :: 1 :: Nil)\nres2: Int = 3\n\nscala> sum(3 :: 2 :: 1 :: Nil)\nres3: Int = 6\n\nscala> sum(4 :: 3 :: 2 :: 1 :: Nil)\nres4: Int = 10\n\n\u3061\u306a\u307f\u306b\u3001Scala\u306b\u306f\u5217\u306e\u8981\u7d20\u306e\u7dcf\u548c\u3092\u8fd4\u3059\u95a2\u6570\u304c\u6700\u521d\u304b\u3089\u7528\u610f\u3055\u308c\u3066\u3044\u307e\u3059\u3002\u540d\u79f0\u3082\u540c\u4e00\u3067sum\u95a2\u6570\u3067\u3059\u3002\nscala> (Nil: List[Int]).sum\nres5: Int = 0\n\nscala> (1 :: Nil).sum\nres6: Int = 1\n\nscala> (2 :: 1 :: Nil).sum\nres7: Int = 3\n\nscala> (3 :: 2 :: 1 :: Nil).sum\nres8: Int = 6\n\nscala> (4 :: 3 :: 2 :: 1 :: Nil).sum\nres9: Int = 10\n\n\u6b21\u306f\u3001\u5217\u306e\u8981\u7d20\u306e\u6570\u3092\u8fd4\u3059length\u95a2\u6570\u3002\ndef length[T](xs: List[T]): Int = xs match {\n    case Nil => 0\n    case x :: xs => 1 + length(xs)\n}\n\n\u7c21\u5358\u3067\u3059\u3002\n\u4f7f\u7528\u4f8b\u3002\nscala> length(Nil)\nres10: Int = 0\n\nscala> length(1 :: Nil)\nres11: Int = 1\n\nscala> length(2 :: 1 :: Nil)\nres12: Int = 2\n\nscala> length(3 :: 2 :: 1 :: Nil)\nres13: Int = 3\n\nscala> length(4 :: 3 :: 2 :: 1 :: Nil)\nres14: Int = 4\n\n\u3061\u306a\u307f\u306b\u3001Scala\u306b\u306f\u5217\u306e\u8981\u7d20\u306e\u6570\u3092\u8fd4\u3059\u95a2\u6570\u304c\u6700\u521d\u304b\u3089\u7528\u610f\u3055\u308c\u3066\u3044\u307e\u3059\u3002\u540d\u79f0\u3082\u540c\u4e00\u3067length\u95a2\u6570\u3067\u3059\u3002size\u95a2\u6570\u3082\u5168\u304f\u540c\u4e00\u306e\u52d5\u4f5c\u3092\u3057\u307e\u3059\u3002\nscala> (Nil: List[Int]).length\nres15: Int = 0\n\nscala> (Nil: List[Int]).size\nres16: Int = 0\n\nscala> (1 :: Nil).length\nres17: Int = 1\n\nscala> (1 :: Nil).size\nres18: Int = 1\n\nscala> (2 :: 1 :: Nil).length\nres19: Int = 2\n\nscala> (2 :: 1 :: Nil).size\nres20: Int = 2\n\nscala> (3 :: 2 :: 1 :: Nil).length\nres21: Int = 3\n\nscala> (3 :: 2 :: 1 :: Nil).size\nres22: Int = 3\n\nscala> (4 :: 3 :: 2 :: 1 :: Nil).length\nres23: Int = 4\n\nscala> (4 :: 3 :: 2 :: 1 :: Nil).size\nres24: Int = 4\n\n\u6b21\u306f\u3001\u5217\u306e\u6700\u5927\u306e\u8981\u7d20\u3092\u8fd4\u3059max\u95a2\u6570\u3002\ndef max(xs: List[Int]): Int = xs match {\n    case List(x) => x\n    case x :: xs => { val m = max(xs); if (m > x) m else x }\n}\n\n\u7c21\u5358\u3067\u3059\u3002\n\u4f7f\u7528\u4f8b\u3002\nscala> max(1 :: Nil)\nres25: Int = 1\n\nscala> max(2 :: 1 :: Nil)\nres26: Int = 2\n\nscala> max(3 :: 2 :: 1 :: Nil)\nres27: Int = 3\n\nscala> max(4 :: 3 :: 2 :: 1 :: Nil)\nres28: Int = 4\n\n\u3053\u306e\u95a2\u6570\u3092Nil\u306b\u5bfe\u3057\u3066\u4f7f\u7528\u3059\u308b\u3068\u3069\u3046\u306a\u308b\u3067\u3057\u3087\u3046\u304b\uff1f\nscala> max(Nil)\nscala.MatchError: List() (of class scala.collection.immutable.Nil$)\n  at .max(<console>:10)\n  ... 33 elided\n\nMatchError\u304c\u767a\u751f\u3057\u307e\u3059\u3002\u7a7a\u306e\u5217\u304c\u4e0e\u3048\u3089\u308c\u305f\u5834\u5408\u306e\u52d5\u4f5c\u3092\u898f\u5b9a\u3057\u3066\u3044\u306a\u3044\u304b\u3089\u3067\u3059\u3002\u7a7a\u306e\u5217\u306b\u5bfe\u5fdc\u3059\u308b\u306b\u306f\u8fd4\u308a\u5024\u306e\u578b\u3092Option[Int]\u306b\u3059\u3079\u304d\u3067\u3057\u3087\u3046\u304b\u3002\ndef max(xs: List[Int]): Option[Int] = xs match {\n    case Nil => None\n    case List(x) => Some(x)\n    case x :: xs => { val m = max(xs); if (m.get > x) m else Some(x) }\n}\n\n\u7c21\u5358\u3067\u3059\u3002\nscala> max(Nil)\nres29: Option[Int] = None\n\nscala> max(1 :: Nil)\nres30: Option[Int] = Some(1)\n\nscala> max(2 :: 1 :: Nil)\nres31: Option[Int] = Some(2)\n\nscala> max(3 :: 2 :: 1 :: Nil)\nres32: Option[Int] = Some(3)\n\nscala> max(4 :: 3 :: 2 :: 1 :: Nil)\nres33: Option[Int] = Some(4)\n\n\u540c\u69d8\u306b\u5217\u306e\u6700\u5c0f\u306e\u8981\u7d20\u3092\u8fd4\u3059min\u95a2\u6570\u3082\u5b9f\u88c5\u3067\u304d\u307e\u3059\u3002\ndef min(xs: List[Int]): Option[Int] = xs match {\n    case Nil => None\n    case List(x) => Some(x)\n    case x :: xs => { val m = min(xs); if (m.get < x) m else Some(x) }\n}\n\n\u7c21\u5358\u3067\u3059\u3002\n\u4f7f\u7528\u4f8b\u3002\nscala> min(Nil)\nres34: Option[Int] = None\n\nscala> min(1 :: Nil)\nres35: Option[Int] = Some(1)\n\nscala> min(2 :: 1 :: Nil)\nres36: Option[Int] = Some(1)\n\nscala> min(3 :: 2 :: 1 :: Nil)\nres37: Option[Int] = Some(1)\n\nscala> min(4 :: 3 :: 2 :: 1 :: Nil)\nres38: Option[Int] = Some(1)\n\n\u3061\u306a\u307f\u306b\u3001Scala\u306b\u306f\u5217\u306e\u6700\u5927\u306e\u8981\u7d20\u3092\u8fd4\u3059\u95a2\u6570\u3068\u6700\u5c0f\u306e\u8981\u7d20\u3092\u8fd4\u3059\u95a2\u6570\u304c\u6700\u521d\u304b\u3089\u7528\u610f\u3055\u308c\u3066\u3044\u307e\u3059\u3002\u540d\u79f0\u3082\u540c\u4e00\u3067\u305d\u308c\u305e\u308cmax\u95a2\u6570\u3068min\u95a2\u6570\u3067\u3059\u3002\nscala> (Nil: List[Int]).max\njava.lang.UnsupportedOperationException: empty.max\n  at scala.collection.TraversableOnce$class.max(TraversableOnce.scala:227)\n  at scala.collection.AbstractTraversable.max(Traversable.scala:104)\n  ... 33 elided\n\nscala> (Nil: List[Int]).min\njava.lang.UnsupportedOperationException: empty.min\n  at scala.collection.TraversableOnce$class.min(TraversableOnce.scala:220)\n  at scala.collection.AbstractTraversable.min(Traversable.scala:104)\n  ... 33 elided\n\nscala> (1 :: Nil).max\nres39: Int = 1\n\nscala> (1 :: Nil).min\nres40: Int = 1\n\nscala> (2 :: 1 :: Nil).max\nres41: Int = 2\n\nscala> (2 :: 1 :: Nil).min\nres42: Int = 1\n\nscala> (3 :: 2 :: 1 :: Nil).max\nres43: Int = 3\n\nscala> (3 :: 2 :: 1 :: Nil).min\nres44: Int = 1\n\nscala> (4 :: 3 :: 2 :: 1 :: Nil).max\nres45: Int = 4\n\nscala> (4 :: 3 :: 2 :: 1 :: Nil).min\nres46: Int = 1\n\n\u3057\u304b\u3057\u3001\u3053\u308c\u3089\u306e\u95a2\u6570\u3092Nil\u306b\u5bfe\u3057\u3066\u4f7f\u7528\u3059\u308b\u3068UnsupportedOperationException\u304c\u767a\u751f\u3057\u307e\u3059\u3002\n\u6b21\u306f\u3001\u5217\u306e\u5168\u3066\u306e\u8981\u7d20\u304c\u8ff0\u8a9e\u3092\u5145\u8db3\u3059\u308b\u304b\u3092\u8fd4\u3059forall\u95a2\u6570\u3002\ndef forall[T](pred: Function[T, Boolean])(xs: List[T]): Boolean = xs match {\n    case Nil => true\n    case x :: xs => pred(x) && forall(pred)(xs)\n}\n\n\u7c21\u5358\u3067\u3059\u3002\u3057\u304b\u3057\u3001\u3053\u308c\u3060\u3068\u5fc5\u305a\u5217\u306e\u5168\u3066\u306e\u8981\u7d20\u3092\u306a\u3081\u306a\u3081\u3059\u308b\u3053\u3068\u306b\u306a\u308b\u306e\u304c\u7121\u99c4\u306b\u601d\u3048\u308b\u306e\u3067\u3001\u3061\u3087\u3063\u3068\u6539\u826f\u3057\u307e\u3057\u3087\u3046\u3002\ndef forall[T](pred: Function[T, Boolean])(xs: List[T]): Boolean = xs match {\n    case Nil => true\n    case x :: xs => if (!pred(x)) false else forall(pred)(xs)\n}\n\n\u4f7f\u7528\u4f8b\u3002\nscala> val isOdd = forall((x: Int) => x % 2 == 1)(_)\nisOdd: List[Int] => Boolean = <function1>\n\nscala> isOdd(Nil)\nres47: Boolean = true\n\nscala> isOdd(1 :: Nil)\nres48: Boolean = true\n\nscala> isOdd(2 :: 1 :: Nil)\nres49: Boolean = false\n\nscala> isOdd(3 :: 2 :: 1 :: Nil)\nres50: Boolean = false\n\nscala> isOdd(4 :: 3 :: 2 :: 1 :: Nil)\nres51: Boolean = false\n\n\u540c\u69d8\u306b\u5217\u306e\u3042\u308b\u8981\u7d20\u304c\u8ff0\u8a9e\u3092\u5145\u8db3\u3059\u308b\u304b\u3092\u8fd4\u3059exists\u95a2\u6570\u3082\u5b9f\u88c5\u3067\u304d\u307e\u3059\u3002\ndef exists[T](pred: Function[T, Boolean])(xs: List[T]): Boolean = xs match {\n    case Nil => false\n    case x :: xs => pred(x) || exists(pred)(xs)\n}\n\n\u7c21\u5358\u3067\u3059\u3002\u3057\u304b\u3057\u3001\u3053\u308c\u3060\u3068\u5fc5\u305a\u5217\u306e\u5168\u3066\u306e\u8981\u7d20\u3092\u306a\u3081\u306a\u3081\u3059\u308b\u3053\u3068\u306b\u306a\u308b\u306e\u304c\u7121\u99c4\u306b\u601d\u3048\u308b\u306e\u3067\u3001\u3061\u3087\u3063\u3068\u6539\u826f\u3057\u307e\u3057\u3087\u3046\u3002\ndef exists[T](pred: Function[T, Boolean])(xs: List[T]): Boolean = xs match {\n    case Nil => false\n    case x :: xs => if (pred(x)) true else exists(pred)(xs)\n}\n\n\u4f7f\u7528\u4f8b\u3002\nscala> val isEven = exists((x: Int) => x % 2 == 0)(_)\nisEven: List[Int] => Boolean = <function1>\n\nscala> isEven(Nil)\nres52: Boolean = false\n\nscala> isEven(1 :: Nil)\nres53: Boolean = false\n\nscala> isEven(2 :: 1 :: Nil)\nres54: Boolean = true\n\nscala> isEven(3 :: 2 :: 1 :: Nil)\nres55: Boolean = true\n\nscala> isEven(4 :: 3 :: 2 :: 1 :: Nil)\nres56: Boolean = true\n\n\u3061\u306a\u307f\u306b\u3001Scala\u306b\u306f\u5217\u306e\u5168\u3066\u306e\u8981\u7d20\u304c\u8ff0\u8a9e\u3092\u5145\u8db3\u3059\u308b\u304b\u3092\u8fd4\u3059\u95a2\u6570\u3068\u3042\u308b\u8981\u7d20\u304c\u8ff0\u8a9e\u3092\u5145\u8db3\u3059\u308b\u304b\u3092\u8fd4\u3059\u95a2\u6570\u304c\u6700\u521d\u304b\u3089\u7528\u610f\u3055\u308c\u3066\u3044\u307e\u3059\u3002\u540d\u79f0\u3082\u540c\u4e00\u3067\u305d\u308c\u305e\u308cforall\u95a2\u6570\u3068exists\u95a2\u6570\u3067\u3059\u3002\nscala> (Nil: List[Int]).forall((x) => x % 2 == 1)\nres57: Boolean = true\n\nscala> (1 :: Nil).forall((x) => x % 2 == 1)\nres58: Boolean = true\n\nscala> (2 :: 1 :: Nil).forall((x) => x % 2 == 1)\nres59: Boolean = false\n\nscala> (3 :: 2 :: 1 :: Nil).forall((x) => x % 2 == 1)\nres60: Boolean = false\n\nscala> (4 :: 3 :: 2 :: 1 :: Nil).forall((x) => x % 2 == 1)\nres61: Boolean = false\n\nscala> (Nil: List[Int]).exists((x) => x % 2 == 0)\nres62: Boolean = false\n\nscala> (1 :: Nil).exists((x) => x % 2 == 0)\nres63: Boolean = false\n\nscala> (2 :: 1 :: Nil).exists((x) => x % 2 == 0)\nres64: Boolean = true\n\nscala> (3 :: 2 :: 1 :: Nil).exists((x) => x % 2 == 0)\nres65: Boolean = true\n\nscala> (4 :: 3 :: 2 :: 1 :: Nil).exists((x) => x % 2 == 0)\nres66: Boolean = true\n\n\u6b21\u306f\u3001\u5217\u306e\u4e2d\u3067\u8ff0\u8a9e\u3092\u5145\u8db3\u3059\u308b\u6700\u521d\u306e\u8981\u7d20\u3092\u8fd4\u3059find\u95a2\u6570\u3002\ndef find[T](pred: Function[T, Boolean])(xs: List[T]): Option[T] = xs match {\n    case Nil => None\n    case x :: xs => if (pred(x)) Some(x) else find(pred)(xs)\n}\n\n\u7c21\u5358\u3067\u3059\u3002\n\u4f7f\u7528\u4f8b\u3002\nscala> val isOdd = find((x: Int) => x % 2 == 1)(_)\nisOdd: List[Int] => Option[Int] = <function1>\n\nscala> isOdd(Nil)\nres67: Option[Int] = None\n\nscala> isOdd(1 :: Nil)\nres68: Option[Int] = Some(1)\n\nscala> isOdd(2 :: 1 :: Nil)\nres69: Option[Int] = Some(1)\n\nscala> isOdd(3 :: 2 :: 1 :: Nil)\nres70: Option[Int] = Some(3)\n\nscala> isOdd(4 :: 3 :: 2 :: 1 :: Nil)\nres71: Option[Int] = Some(3)\n\n\u3061\u306a\u307f\u306b\u3001Scala\u306b\u306f\u5217\u306e\u4e2d\u3067\u8ff0\u8a9e\u3092\u5145\u8db3\u3059\u308b\u6700\u521d\u306e\u8981\u7d20\u3092\u8fd4\u3059\u95a2\u6570\u304c\u6700\u521d\u304b\u3089\u7528\u610f\u3055\u308c\u3066\u3044\u307e\u3059\u3002\u540d\u79f0\u3082\u540c\u4e00\u3067find\u95a2\u6570\u3067\u3059\u3002\nscala> (Nil: List[Int]).find((x) => x % 2 == 1)\nres72: Option[Int] = None\n\nscala> (1 :: Nil).find((x) => x % 2 == 1)\nres73: Option[Int] = Some(1)\n\nscala> (2 :: 1 :: Nil).find((x) => x % 2 == 1)\nres74: Option[Int] = Some(1)\n\nscala> (3 :: 2 :: 1 :: Nil).find((x) => x % 2 == 1)\nres75: Option[Int] = Some(3)\n\nscala> (4 :: 3 :: 2 :: 1 :: Nil).find((x) => x % 2 == 1)\nres76: Option[Int] = Some(3)\n\n\u4eca\u65e5\u306fScala\u3067\u518d\u5e30\u95a2\u6570\u3092\u66f8\u3044\u3066\u307f\u307e\u3059\u3002\n\n@bleis\u6c0f\u306e\u4ee5\u4e0b\u306e\u8a18\u4e8b\u306e\u6d41\u308c\u306b\u6cbf\u3063\u3066\u3084\u3063\u3066\u3044\u304d\u307e\u3059\u3002\n\n* [\u518d\u5e30\u3067\u8003\u3048\u308b](http://bleis-tift.hatenablog.com/entry/20120119/1326944722)\n\n\u307e\u305a\u306f\u3001\u5217\u306e\u8981\u7d20\u306e\u7dcf\u548c\u3092\u8fd4\u3059sum\u95a2\u6570\u3002\n\n```scala\ndef sum(xs: List[Int]): Int = xs match {\n    case Nil => 0\n    case x :: xs => x + sum(xs)\n}\n```\n\n\u7c21\u5358\u3067\u3059\u3002\n\n\u4f7f\u7528\u4f8b\u3002\n\n```scala\nscala> sum(Nil)\nres0: Int = 0\n\nscala> sum(1 :: Nil)\nres1: Int = 1\n\nscala> sum(2 :: 1 :: Nil)\nres2: Int = 3\n\nscala> sum(3 :: 2 :: 1 :: Nil)\nres3: Int = 6\n\nscala> sum(4 :: 3 :: 2 :: 1 :: Nil)\nres4: Int = 10\n```\n\n\u3061\u306a\u307f\u306b\u3001Scala\u306b\u306f\u5217\u306e\u8981\u7d20\u306e\u7dcf\u548c\u3092\u8fd4\u3059\u95a2\u6570\u304c\u6700\u521d\u304b\u3089\u7528\u610f\u3055\u308c\u3066\u3044\u307e\u3059\u3002\u540d\u79f0\u3082\u540c\u4e00\u3067sum\u95a2\u6570\u3067\u3059\u3002\n\n```scala\nscala> (Nil: List[Int]).sum\nres5: Int = 0\n\nscala> (1 :: Nil).sum\nres6: Int = 1\n\nscala> (2 :: 1 :: Nil).sum\nres7: Int = 3\n\nscala> (3 :: 2 :: 1 :: Nil).sum\nres8: Int = 6\n\nscala> (4 :: 3 :: 2 :: 1 :: Nil).sum\nres9: Int = 10\n```\n\n\u6b21\u306f\u3001\u5217\u306e\u8981\u7d20\u306e\u6570\u3092\u8fd4\u3059length\u95a2\u6570\u3002\n\n```scala\ndef length[T](xs: List[T]): Int = xs match {\n    case Nil => 0\n    case x :: xs => 1 + length(xs)\n}\n```\n\n\u7c21\u5358\u3067\u3059\u3002\n\n\u4f7f\u7528\u4f8b\u3002\n\n```scala\nscala> length(Nil)\nres10: Int = 0\n\nscala> length(1 :: Nil)\nres11: Int = 1\n\nscala> length(2 :: 1 :: Nil)\nres12: Int = 2\n\nscala> length(3 :: 2 :: 1 :: Nil)\nres13: Int = 3\n\nscala> length(4 :: 3 :: 2 :: 1 :: Nil)\nres14: Int = 4\n```\n\n\u3061\u306a\u307f\u306b\u3001Scala\u306b\u306f\u5217\u306e\u8981\u7d20\u306e\u6570\u3092\u8fd4\u3059\u95a2\u6570\u304c\u6700\u521d\u304b\u3089\u7528\u610f\u3055\u308c\u3066\u3044\u307e\u3059\u3002\u540d\u79f0\u3082\u540c\u4e00\u3067length\u95a2\u6570\u3067\u3059\u3002size\u95a2\u6570\u3082\u5168\u304f\u540c\u4e00\u306e\u52d5\u4f5c\u3092\u3057\u307e\u3059\u3002\n\n```scala\nscala> (Nil: List[Int]).length\nres15: Int = 0\n\nscala> (Nil: List[Int]).size\nres16: Int = 0\n\nscala> (1 :: Nil).length\nres17: Int = 1\n\nscala> (1 :: Nil).size\nres18: Int = 1\n\nscala> (2 :: 1 :: Nil).length\nres19: Int = 2\n\nscala> (2 :: 1 :: Nil).size\nres20: Int = 2\n\nscala> (3 :: 2 :: 1 :: Nil).length\nres21: Int = 3\n\nscala> (3 :: 2 :: 1 :: Nil).size\nres22: Int = 3\n\nscala> (4 :: 3 :: 2 :: 1 :: Nil).length\nres23: Int = 4\n\nscala> (4 :: 3 :: 2 :: 1 :: Nil).size\nres24: Int = 4\n```\n\n\u6b21\u306f\u3001\u5217\u306e\u6700\u5927\u306e\u8981\u7d20\u3092\u8fd4\u3059max\u95a2\u6570\u3002\n\n```scala\ndef max(xs: List[Int]): Int = xs match {\n    case List(x) => x\n    case x :: xs => { val m = max(xs); if (m > x) m else x }\n}\n```\n\n\u7c21\u5358\u3067\u3059\u3002\n\n\u4f7f\u7528\u4f8b\u3002\n\n```scala\nscala> max(1 :: Nil)\nres25: Int = 1\n\nscala> max(2 :: 1 :: Nil)\nres26: Int = 2\n\nscala> max(3 :: 2 :: 1 :: Nil)\nres27: Int = 3\n\nscala> max(4 :: 3 :: 2 :: 1 :: Nil)\nres28: Int = 4\n```\n\n\u3053\u306e\u95a2\u6570\u3092Nil\u306b\u5bfe\u3057\u3066\u4f7f\u7528\u3059\u308b\u3068\u3069\u3046\u306a\u308b\u3067\u3057\u3087\u3046\u304b\uff1f\n\n```scala\nscala> max(Nil)\nscala.MatchError: List() (of class scala.collection.immutable.Nil$)\n  at .max(<console>:10)\n  ... 33 elided\n```\n\nMatchError\u304c\u767a\u751f\u3057\u307e\u3059\u3002\u7a7a\u306e\u5217\u304c\u4e0e\u3048\u3089\u308c\u305f\u5834\u5408\u306e\u52d5\u4f5c\u3092\u898f\u5b9a\u3057\u3066\u3044\u306a\u3044\u304b\u3089\u3067\u3059\u3002\u7a7a\u306e\u5217\u306b\u5bfe\u5fdc\u3059\u308b\u306b\u306f\u8fd4\u308a\u5024\u306e\u578b\u3092Option[Int]\u306b\u3059\u3079\u304d\u3067\u3057\u3087\u3046\u304b\u3002\n\n```scala\ndef max(xs: List[Int]): Option[Int] = xs match {\n    case Nil => None\n    case List(x) => Some(x)\n    case x :: xs => { val m = max(xs); if (m.get > x) m else Some(x) }\n}\n```\n\n\u7c21\u5358\u3067\u3059\u3002\n\n```scala\nscala> max(Nil)\nres29: Option[Int] = None\n\nscala> max(1 :: Nil)\nres30: Option[Int] = Some(1)\n\nscala> max(2 :: 1 :: Nil)\nres31: Option[Int] = Some(2)\n\nscala> max(3 :: 2 :: 1 :: Nil)\nres32: Option[Int] = Some(3)\n\nscala> max(4 :: 3 :: 2 :: 1 :: Nil)\nres33: Option[Int] = Some(4)\n```\n\n\u540c\u69d8\u306b\u5217\u306e\u6700\u5c0f\u306e\u8981\u7d20\u3092\u8fd4\u3059min\u95a2\u6570\u3082\u5b9f\u88c5\u3067\u304d\u307e\u3059\u3002\n\n```scala\ndef min(xs: List[Int]): Option[Int] = xs match {\n    case Nil => None\n    case List(x) => Some(x)\n    case x :: xs => { val m = min(xs); if (m.get < x) m else Some(x) }\n}\n```\n\n\u7c21\u5358\u3067\u3059\u3002\n\n\u4f7f\u7528\u4f8b\u3002\n\n```scala\nscala> min(Nil)\nres34: Option[Int] = None\n\nscala> min(1 :: Nil)\nres35: Option[Int] = Some(1)\n\nscala> min(2 :: 1 :: Nil)\nres36: Option[Int] = Some(1)\n\nscala> min(3 :: 2 :: 1 :: Nil)\nres37: Option[Int] = Some(1)\n\nscala> min(4 :: 3 :: 2 :: 1 :: Nil)\nres38: Option[Int] = Some(1)\n```\n\n\u3061\u306a\u307f\u306b\u3001Scala\u306b\u306f\u5217\u306e\u6700\u5927\u306e\u8981\u7d20\u3092\u8fd4\u3059\u95a2\u6570\u3068\u6700\u5c0f\u306e\u8981\u7d20\u3092\u8fd4\u3059\u95a2\u6570\u304c\u6700\u521d\u304b\u3089\u7528\u610f\u3055\u308c\u3066\u3044\u307e\u3059\u3002\u540d\u79f0\u3082\u540c\u4e00\u3067\u305d\u308c\u305e\u308cmax\u95a2\u6570\u3068min\u95a2\u6570\u3067\u3059\u3002\n\n```scala\nscala> (Nil: List[Int]).max\njava.lang.UnsupportedOperationException: empty.max\n  at scala.collection.TraversableOnce$class.max(TraversableOnce.scala:227)\n  at scala.collection.AbstractTraversable.max(Traversable.scala:104)\n  ... 33 elided\n\nscala> (Nil: List[Int]).min\njava.lang.UnsupportedOperationException: empty.min\n  at scala.collection.TraversableOnce$class.min(TraversableOnce.scala:220)\n  at scala.collection.AbstractTraversable.min(Traversable.scala:104)\n  ... 33 elided\n\nscala> (1 :: Nil).max\nres39: Int = 1\n\nscala> (1 :: Nil).min\nres40: Int = 1\n\nscala> (2 :: 1 :: Nil).max\nres41: Int = 2\n\nscala> (2 :: 1 :: Nil).min\nres42: Int = 1\n\nscala> (3 :: 2 :: 1 :: Nil).max\nres43: Int = 3\n\nscala> (3 :: 2 :: 1 :: Nil).min\nres44: Int = 1\n\nscala> (4 :: 3 :: 2 :: 1 :: Nil).max\nres45: Int = 4\n\nscala> (4 :: 3 :: 2 :: 1 :: Nil).min\nres46: Int = 1\n```\n\n\u3057\u304b\u3057\u3001\u3053\u308c\u3089\u306e\u95a2\u6570\u3092Nil\u306b\u5bfe\u3057\u3066\u4f7f\u7528\u3059\u308b\u3068UnsupportedOperationException\u304c\u767a\u751f\u3057\u307e\u3059\u3002\n\n\u6b21\u306f\u3001\u5217\u306e\u5168\u3066\u306e\u8981\u7d20\u304c\u8ff0\u8a9e\u3092\u5145\u8db3\u3059\u308b\u304b\u3092\u8fd4\u3059forall\u95a2\u6570\u3002\n\n```scala\ndef forall[T](pred: Function[T, Boolean])(xs: List[T]): Boolean = xs match {\n    case Nil => true\n    case x :: xs => pred(x) && forall(pred)(xs)\n}\n```\n\n\u7c21\u5358\u3067\u3059\u3002\u3057\u304b\u3057\u3001\u3053\u308c\u3060\u3068\u5fc5\u305a\u5217\u306e\u5168\u3066\u306e\u8981\u7d20\u3092\u306a\u3081\u306a\u3081\u3059\u308b\u3053\u3068\u306b\u306a\u308b\u306e\u304c\u7121\u99c4\u306b\u601d\u3048\u308b\u306e\u3067\u3001\u3061\u3087\u3063\u3068\u6539\u826f\u3057\u307e\u3057\u3087\u3046\u3002\n\n```scala\ndef forall[T](pred: Function[T, Boolean])(xs: List[T]): Boolean = xs match {\n    case Nil => true\n    case x :: xs => if (!pred(x)) false else forall(pred)(xs)\n}\n```\n\n\u4f7f\u7528\u4f8b\u3002\n\n```scala\nscala> val isOdd = forall((x: Int) => x % 2 == 1)(_)\nisOdd: List[Int] => Boolean = <function1>\n\nscala> isOdd(Nil)\nres47: Boolean = true\n\nscala> isOdd(1 :: Nil)\nres48: Boolean = true\n\nscala> isOdd(2 :: 1 :: Nil)\nres49: Boolean = false\n\nscala> isOdd(3 :: 2 :: 1 :: Nil)\nres50: Boolean = false\n\nscala> isOdd(4 :: 3 :: 2 :: 1 :: Nil)\nres51: Boolean = false\n```\n\n\u540c\u69d8\u306b\u5217\u306e\u3042\u308b\u8981\u7d20\u304c\u8ff0\u8a9e\u3092\u5145\u8db3\u3059\u308b\u304b\u3092\u8fd4\u3059exists\u95a2\u6570\u3082\u5b9f\u88c5\u3067\u304d\u307e\u3059\u3002\n\n```scala\ndef exists[T](pred: Function[T, Boolean])(xs: List[T]): Boolean = xs match {\n    case Nil => false\n    case x :: xs => pred(x) || exists(pred)(xs)\n}\n```\n\n\u7c21\u5358\u3067\u3059\u3002\u3057\u304b\u3057\u3001\u3053\u308c\u3060\u3068\u5fc5\u305a\u5217\u306e\u5168\u3066\u306e\u8981\u7d20\u3092\u306a\u3081\u306a\u3081\u3059\u308b\u3053\u3068\u306b\u306a\u308b\u306e\u304c\u7121\u99c4\u306b\u601d\u3048\u308b\u306e\u3067\u3001\u3061\u3087\u3063\u3068\u6539\u826f\u3057\u307e\u3057\u3087\u3046\u3002\n\n```scala\ndef exists[T](pred: Function[T, Boolean])(xs: List[T]): Boolean = xs match {\n    case Nil => false\n    case x :: xs => if (pred(x)) true else exists(pred)(xs)\n}\n```\n\n\u4f7f\u7528\u4f8b\u3002\n\n```scala\nscala> val isEven = exists((x: Int) => x % 2 == 0)(_)\nisEven: List[Int] => Boolean = <function1>\n\nscala> isEven(Nil)\nres52: Boolean = false\n\nscala> isEven(1 :: Nil)\nres53: Boolean = false\n\nscala> isEven(2 :: 1 :: Nil)\nres54: Boolean = true\n\nscala> isEven(3 :: 2 :: 1 :: Nil)\nres55: Boolean = true\n\nscala> isEven(4 :: 3 :: 2 :: 1 :: Nil)\nres56: Boolean = true\n```\n\n\u3061\u306a\u307f\u306b\u3001Scala\u306b\u306f\u5217\u306e\u5168\u3066\u306e\u8981\u7d20\u304c\u8ff0\u8a9e\u3092\u5145\u8db3\u3059\u308b\u304b\u3092\u8fd4\u3059\u95a2\u6570\u3068\u3042\u308b\u8981\u7d20\u304c\u8ff0\u8a9e\u3092\u5145\u8db3\u3059\u308b\u304b\u3092\u8fd4\u3059\u95a2\u6570\u304c\u6700\u521d\u304b\u3089\u7528\u610f\u3055\u308c\u3066\u3044\u307e\u3059\u3002\u540d\u79f0\u3082\u540c\u4e00\u3067\u305d\u308c\u305e\u308cforall\u95a2\u6570\u3068exists\u95a2\u6570\u3067\u3059\u3002\n\n```scala\nscala> (Nil: List[Int]).forall((x) => x % 2 == 1)\nres57: Boolean = true\n\nscala> (1 :: Nil).forall((x) => x % 2 == 1)\nres58: Boolean = true\n\nscala> (2 :: 1 :: Nil).forall((x) => x % 2 == 1)\nres59: Boolean = false\n\nscala> (3 :: 2 :: 1 :: Nil).forall((x) => x % 2 == 1)\nres60: Boolean = false\n\nscala> (4 :: 3 :: 2 :: 1 :: Nil).forall((x) => x % 2 == 1)\nres61: Boolean = false\n\nscala> (Nil: List[Int]).exists((x) => x % 2 == 0)\nres62: Boolean = false\n\nscala> (1 :: Nil).exists((x) => x % 2 == 0)\nres63: Boolean = false\n\nscala> (2 :: 1 :: Nil).exists((x) => x % 2 == 0)\nres64: Boolean = true\n\nscala> (3 :: 2 :: 1 :: Nil).exists((x) => x % 2 == 0)\nres65: Boolean = true\n\nscala> (4 :: 3 :: 2 :: 1 :: Nil).exists((x) => x % 2 == 0)\nres66: Boolean = true\n```\n\n\u6b21\u306f\u3001\u5217\u306e\u4e2d\u3067\u8ff0\u8a9e\u3092\u5145\u8db3\u3059\u308b\u6700\u521d\u306e\u8981\u7d20\u3092\u8fd4\u3059find\u95a2\u6570\u3002\n\n```scala\ndef find[T](pred: Function[T, Boolean])(xs: List[T]): Option[T] = xs match {\n    case Nil => None\n    case x :: xs => if (pred(x)) Some(x) else find(pred)(xs)\n}\n```\n\n\u7c21\u5358\u3067\u3059\u3002\n\n\u4f7f\u7528\u4f8b\u3002\n\n```scala\nscala> val isOdd = find((x: Int) => x % 2 == 1)(_)\nisOdd: List[Int] => Option[Int] = <function1>\n\nscala> isOdd(Nil)\nres67: Option[Int] = None\n\nscala> isOdd(1 :: Nil)\nres68: Option[Int] = Some(1)\n\nscala> isOdd(2 :: 1 :: Nil)\nres69: Option[Int] = Some(1)\n\nscala> isOdd(3 :: 2 :: 1 :: Nil)\nres70: Option[Int] = Some(3)\n\nscala> isOdd(4 :: 3 :: 2 :: 1 :: Nil)\nres71: Option[Int] = Some(3)\n```\n\n\u3061\u306a\u307f\u306b\u3001Scala\u306b\u306f\u5217\u306e\u4e2d\u3067\u8ff0\u8a9e\u3092\u5145\u8db3\u3059\u308b\u6700\u521d\u306e\u8981\u7d20\u3092\u8fd4\u3059\u95a2\u6570\u304c\u6700\u521d\u304b\u3089\u7528\u610f\u3055\u308c\u3066\u3044\u307e\u3059\u3002\u540d\u79f0\u3082\u540c\u4e00\u3067find\u95a2\u6570\u3067\u3059\u3002\n\n```scala\nscala> (Nil: List[Int]).find((x) => x % 2 == 1)\nres72: Option[Int] = None\n\nscala> (1 :: Nil).find((x) => x % 2 == 1)\nres73: Option[Int] = Some(1)\n\nscala> (2 :: 1 :: Nil).find((x) => x % 2 == 1)\nres74: Option[Int] = Some(1)\n\nscala> (3 :: 2 :: 1 :: Nil).find((x) => x % 2 == 1)\nres75: Option[Int] = Some(3)\n\nscala> (4 :: 3 :: 2 :: 1 :: Nil).find((x) => x % 2 == 1)\nres76: Option[Int] = Some(3)\n```\n", "tags": ["Scala", "\u518d\u5e30"]}