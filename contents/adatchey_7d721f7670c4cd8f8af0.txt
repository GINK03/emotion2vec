{"context": " More than 1 year has passed since last update.\u3053\u306e\u8a18\u4e8b\u306f C++ Advent Calendar 2015 \u306e 2\u65e5\u76ee\u306e\u8a18\u4e8b\u3067\u3059.\n\u524d\u306e\u65e5\u306f ignis_fatuus \u3055\u3093\u306e Metashell\u3092\u4f7f\u3063\u305fC++\u30e1\u30bf\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u306e\u5165\u9580\u3068\u30c7\u30d0\u30c3\u30b0 \u3067\u3059.\n\u6b21\u306e\u65e5\u306f Riyaaaaa \u3055\u3093\u306e C++ AMP\u306b\u3088\u308bGPGPU\u5165\u9580 \u3067\u3059.\n\n\u3053\u306e\u8a18\u4e8b\u3067\u8ff0\u3079\u308b\u3053\u3068\n\u3042\u308a\u304c\u3061\u306a\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u95a2\u6570\u3092\u547c\u3073\u5206\u3051\u308b\u30c0\u30b5\u3044\u51e6\u7406\nswitch (type) {\ncase Enum::INT: return DoSomething<int>();\ncase Enum::DOUBLE: return DoSomething<double>();\n// \u4ed6\u306e\u69d8\u3005\u306a\u578b\u304c\u7d9a\u304f...\n}\n\n\u3092, boost::apply_visitor \u3092\u4e00\u822c\u5316\u3059\u308b\u611f\u3058\u3067,\ntype_list::apply(DoSomething(), type);\n\n\u3068\u66f8\u3051\u308b\u3088\u3046\u306b\u3057\u3066\u307f\u307e\u3057\u305f.\n\n\u80cc\u666f\nC++ \u3067\u52d5\u7684\u30c7\u30a3\u30b9\u30d1\u30c3\u30c1\u304c\u5fc5\u8981\u306a\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u66f8\u3044\u3066\u3044\u308b\u4eba\u306f, \u3057\u3070\u3057\u3070\u4e0a\u8a18\u306e\u3088\u3046\u306a switch \u6587\u7b49\u306b\u3088\u308b\u547c\u3073\u5206\u3051\u304c\u5fc5\u8981\u306b\u306a\u308b\u3053\u3068\u304c\u3042\u308b\u3068\u601d\u3044\u307e\u3059.\n\u5c0f\u3055\u306a\u30d7\u30ed\u30b0\u30e9\u30e0\u306a\u3089\u307e\u3060\u8010\u3048\u3089\u308c\u307e\u3059\u304c, \u898f\u6a21\u304c\u5927\u304d\u304f\u306a\u3063\u3066\u304d\u3066, switch \u304c\u305d\u3053\u304b\u3057\u3053\u306b\u6563\u3089\u3070\u3063\u3066\u3044\u308b\u72b6\u614b\u306b\u306a\u308b\u3068\u304b\u306a\u308a\u3064\u3089\u3044\u3067\u3059.\n\u4f8b\u3048\u3070 DSL \u3092\u5b9f\u88c5\u3057\u3066\u3044\u3066, \u30c7\u30fc\u30bf\u578b\u304c\u3044\u308d\u3044\u308d\u3042\u3063\u3066, \u51e6\u7406\u304c\u3044\u308d\u3044\u308d\u3042\u3063\u3066, \u3068\u3044\u3063\u305f\u72b6\u614b\u306b\u306a\u308b\u3068, \u4ed5\u69d8\u5909\u66f4\u3067\u578b\u3092\u8ffd\u52a0\u3059\u308b\u3060\u3051\u3067\u3082\u304b\u306a\u308a\u5f71\u97ff\u7bc4\u56f2\u306e\u5927\u304d\u3044\u4ed5\u4e8b\u306b\u306a\u308a\u307e\u3059.\n\n\u30b5\u30f3\u30d7\u30eb\n\u672c\u7a3f\u3067\u306f, \u6574\u6570\u306e\u56db\u5247\u6f14\u7b97\u3092\u89e3\u304f\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u8003\u3048\u3066\u3044\u304d\u305f\u3044\u3068\u601d\u3044\u307e\u3059. \u66f8\u304b\u308c\u305f\u30b3\u30fc\u30c9\u3092\u8a66\u3059\u306b\u306f C++14 \u5bfe\u5fdc\u30b3\u30f3\u30d1\u30a4\u30e9\u3092\u3054\u7528\u610f\u304f\u3060\u3055\u3044. Coliru \u3067\u52d5\u4f5c\u78ba\u8a8d\u6e08\u307f\u3067\u3059. \u3053\u306e\u8a18\u4e8b\u306b\u66f8\u304b\u308c\u305f\u30b3\u30fc\u30c9\u306e\u4e00\u90e8\u307e\u305f\u306f\u5168\u3066\u3092\u7528\u3044\u3066\u4f55\u304b\u640d\u5bb3\u304c\u3067\u3066\u3082\u5f53\u65b9\u306f\u306a\u3093\u306e\u8cac\u4efb\u3082\u8ca0\u3044\u307e\u305b\u3093.\n\n\u3068\u308a\u3042\u3048\u305a\u521d\u671f\u5b9f\u88c5\nstatic int calculate(char op, int lhs, int rhs)\n{\n    switch (op) {\n    case '+':\n        return lhs + rhs;\n    case '-':\n        return lhs - rhs;\n    case '*':\n        return lhs * rhs;\n    case '/':\n        return (rhs != 0) ? lhs / rhs : throw std::invalid_argument(\"zero division\");\n    default:\n        break;\n    }\n    throw std::invalid_argument(\"invalid operator\");\n}\n\n\u6f14\u7b97\u5b50\u3068\u30aa\u30da\u30e9\u30f3\u30c9\u3092\u53d7\u3051\u53d6\u3063\u3066\u8a08\u7b97\u7d50\u679c\u3092\u8fd4\u3057\u307e\u3059. \u7c21\u5358\u3067\u3059\u306d. \u3053\u308c\u306b\u6f14\u7b97\u5b50\u3092\u8ffd\u52a0\u3057\u3066\u3044\u304d\u307e\u3059.\ncase \u306e\u4e2d\u304c\u3069\u306e\u5206\u5c90\u3067\u3082\u307b\u3068\u3093\u3069\u4e00\u7dd2\u306a\u306e\u3067, \u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u3092\u4f7f\u3044\u305f\u304f\u306a\u308a\u307e\u3059\u306d.\n     switch (op) {\n     case '+':\n-        return lhs + rhs;\n+        return std::plus<int>()(lhs, rhs);\n     case '-':\n-        return lhs - rhs;\n+        return std::minus<int>()(lhs, rhs);\n     case '*':\n-        return lhs * rhs;\n+        return std::multiplies<int>()(lhs, rhs);\n     case '/':\n-        return (rhs != 0) ? lhs / rhs : throw std::invalid_argument(\"zero division\");\n+        return (rhs != 0) ? std::divides<int>()(lhs, rhs)\n+                          : throw std::invalid_argument(\"zero division\");\n     default:\n         break;\n     }\n\n\u3053\u3053\u306b\u5270\u4f59\u7b97\u306e\u51e6\u7406\u3092\u8ffd\u52a0\u3057\u3088\u3046\u3068\u3057\u305f\u6642\u306b, \u666e\u901a\u306a\u3089 case '%' \u3092\u8ffd\u52a0\u3059\u308b\u3068\u3053\u308d\u3067\u3059\u304c, \u3059\u3067\u306b\u4f7f\u308f\u308c\u3066\u3044\u308b\u95a2\u6570\u3092\u5909\u66f4\u3059\u308b\u306e\u306f\u306a\u3093\u304b\u5acc\u3067\u3059. \u65e2\u5b58\u306e\u30b3\u30fc\u30c9\u3092\u5909\u66f4\u305b\u305a\u306b\u6a5f\u80fd\u3092\u62e1\u5f35\u3057\u3066\u3044\u304d\u307e\u3057\u3087\u3046.\n\nSwitch \u6587\u3092\u9664\u53bb\n\u3057\u307e\u3059. \n#include <cstdint>\n#include <functional>\n#include <iostream>\n#include <sstream>\n#include <stdexcept>\n#include <string>\n#include <type_traits>\n#include <unordered_map>\n#include <utility>\n#include <vector>\n\n// T \u304b\u3089 const/volatile/reference \u3092\u9664\u3044\u305f\u578b\ntemplate <typename T>\nusing remove_cv_reference_t =\n    typename std::remove_cv<typename std::remove_reference<T>::type>::type;\n// T0,...,Ts \u306e\u4e2d\u3067 T \u304c\u51fa\u73fe\u3059\u308b\u6700\u521d\u306e\u4f4d\u7f6e\ntemplate <size_t I, typename T, typename T0, typename... Ts>\nstruct index_of_impl {\n    static const size_t value = (std::is_same<T, T0>::value)\n                                    ? I\n                                    : index_of_impl<I + 1, T, Ts...>::value;\n};\n// T0,...,Ts \u306e\u4e2d\u3067 T \u304c\u51fa\u73fe\u3059\u308b\u6700\u521d\u306e\u4f4d\u7f6e\ntemplate <size_t I, typename T, typename T0>\nstruct index_of_impl<I, T, T0> {\n    static const size_t value =\n        (std::is_same<T, T0>::value) ? I : static_cast<size_t>(-1);\n};\n// T0,...,Ts \u306e\u4e2d\u3067 I \u756a\u76ee\u306e\u578b\ntemplate <size_t I, typename T0, typename... Ts>\nstruct at_impl {\n    using type =\n        typename std::conditional<I == 0,\n                                  T0,\n                                  typename at_impl<I - 1, Ts...>::type>::type;\n};\n// T0,...,Ts \u306e\u4e2d\u3067 I \u756a\u76ee\u306e\u578b\ntemplate <size_t I, typename T0>\nstruct at_impl<I, T0> {\n    using type = typename std::conditional<I == 0, T0, void>::type;\n};\n// \u578b\u306e\u30ea\u30b9\u30c8\ntemplate <typename... Ts>\nstruct type_list_t {\n    // \u578b\u6570\n    static constexpr size_t size() { return sizeof...(Ts); };\n    // T \u304c\u6700\u521d\u306b\u73fe\u308c\u308b\u4f4d\u7f6e\n    template <typename T>\n    static constexpr size_t index_of()\n    {\n        return index_of_impl<0,\n                             remove_cv_reference_t<T>,\n                             remove_cv_reference_t<Ts>...>::value;\n    }\n    // I \u756a\u76ee\u306e\u578b\n    template <size_t I>\n    using at_t = typename at_impl<I, Ts...>::type;\n    // idx \u756a\u76ee\u306e\u578b T \u306b\u3064\u3044\u3066, f.operator()<T>() \u3092\u5b9f\u884c\u3059\u308b\n    template <typename F, typename Index>\n    static auto apply(F&& f, Index idx) -> decltype(auto)\n    {\n        using R = decltype(f.template operator()<at_t<0>>());  // \u623b\u308a\u5024\u306e\u578b\n        static std::make_index_sequence<size()> seq;  // \u6574\u6570\u30b7\u30fc\u30b1\u30f3\u30b9\n        return apply<R>(seq, std::forward<F>(f), static_cast<int>(idx));\n    }\n\nprivate:\n    // idx \u756a\u76ee\u306e\u578b T \u306b\u3064\u3044\u3066, f.operator()<T>() \u3092\u5b9f\u884c\u3059\u308b\n    template <typename R, typename F, size_t... Is>\n    static R apply(std::index_sequence<Is...>, F&& f, int idx)\n    {\n        using func_t = decltype(&apply<R, F, at_t<0>>);  // \u95a2\u6570\u30dd\u30a4\u30f3\u30bf\u306e\u578b\n        // \u95a2\u6570\u30dd\u30a4\u30f3\u30bf\u30c6\u30fc\u30d6\u30eb\u3092\u751f\u6210\n        // idx \u756a\u76ee\u306e\u95a2\u6570\u30dd\u30a4\u30f3\u30bf\u306f apply<R, F, at_t<idx>> \u3067\u3042\u308b\n        static func_t func_table[] = {&apply<R, F, at_t<Is>>...};\n        return func_table[idx](std::forward<F>(f));\n    }\n    // \u578b T \u306b\u3064\u3044\u3066, f.operator()<T>() \u3092\u5b9f\u884c\u3059\u308b\n    template <typename R, typename F, typename T>\n    static R apply(F&& f)\n    {\n        return f.template operator()<T>();\n    }\n};\n\n// \u52a0\u7b97\nstruct plus_t {\n    template <typename T1, typename T2>\n    auto operator()(T1&& lhs, T2&& rhs) const -> decltype(auto)\n    {\n        return std::forward<T1>(lhs) + std::forward<T2>(rhs);\n    }\n};\n// \u6e1b\u7b97\nstruct minus_t {\n    template <typename T1, typename T2>\n    auto operator()(T1&& lhs, T2&& rhs) const -> decltype(auto)\n    {\n        return std::forward<T1>(lhs) - std::forward<T2>(rhs);\n    }\n};\n// \u4e57\u7b97\nstruct multiply_t {\n    template <typename T1, typename T2>\n    auto operator()(T1&& lhs, T2&& rhs) const -> decltype(auto)\n    {\n        return std::forward<T1>(lhs) * std::forward<T2>(rhs);\n    }\n};\n// \u9664\u7b97(\u30bc\u30ed\u5272\u30c1\u30a7\u30c3\u30af\u4ed8\u304d)\nstruct divide_t {\n    template <typename T1, typename T2>\n    auto operator()(T1&& lhs, T2&& rhs) const -> decltype(auto)\n    {\n        if (rhs == static_cast<remove_cv_reference_t<T2>>(0)) {\n            throw std::invalid_argument(\"zero division\");\n        }\n        return std::forward<T1>(lhs) / std::forward<T2>(rhs);\n    }\n};\n// \u6f14\u7b97\u5b50\u30d5\u30a1\u30f3\u30af\u30bf\u30ea\u30b9\u30c8\nusing op_type_list_t = type_list_t<plus_t, minus_t, multiply_t, divide_t>;\n// \u6f14\u7b97\u5b50\u3092\u8868\u3059 Enum\nenum class op_type_e : int8_t {\n    PLUS = op_type_list_t::index_of<plus_t>(),\n    MINUS = op_type_list_t::index_of<minus_t>(),\n    MULTIPLY = op_type_list_t::index_of<multiply_t>(),\n    DIVIDE = op_type_list_t::index_of<divide_t>()\n};\n// \u6f14\u7b97\u5b50\u6587\u5b57\u304b\u3089Enum\nstatic const std::unordered_map<std::string, op_type_e> g_char_to_enum{\n    {\"+\", op_type_e::PLUS},\n    {\"-\", op_type_e::MINUS},\n    {\"*\", op_type_e::MULTIPLY},\n    {\"/\", op_type_e::DIVIDE}};\n// op_type_list_t::apply \u306b\u6e21\u3059\u8a08\u7b97\u30d5\u30a1\u30f3\u30af\u30bf\nstruct calculator_t {\n    int lhs{0};\n    int rhs{0};\n    template <typename Op>\n    int operator()() const\n    {\n        return Op()(lhs, rhs);\n    }\n};\n\nstatic int calculate(const std::string& op, int lhs, int rhs)\n{\n    op_type_e op_type = [op]() {\n        auto iter = g_char_to_enum.find(op);\n        if (iter == g_char_to_enum.end()) {\n            throw std::invalid_argument(\"invalid operator\");\n        }\n        return iter->second;\n    }();\n    return op_type_list_t::apply(calculator_t{lhs, rhs}, op_type);\n}\n\n\u3053\u306e Advent Calendar \u306f !(\u521d\u5fc3\u8005) \u5411\u3051\u306a\u306e\u3067\u307f\u306a\u3055\u3093\u4f59\u88d5\u3060\u3068\u601d\u3044\u307e\u3059\u304c, \u3068\u308a\u3042\u3048\u305a\u4e0b\u306e\u65b9\u304b\u3089\u898b\u3066\u3044\u304d\u307e\u3057\u3087\u3046.\ncalculate \u95a2\u6570\u3067\u306f, \u6f14\u7b97\u5b50\u6587\u5b57\u304b\u3089 enum \u5024\u306b\u5909\u63db\u3057\u3066, op_type_list_t::apply \u3092\u547c\u3073\u307e\u3059. \u3053\u308c\u3067 enum \u5024\u304b\u3089\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u95a2\u6570 calculator_t::operator()<T> \u304c\u547c\u3073\u51fa\u3055\u308c\u307e\u3059. T \u306b\u306f op_type_list_t \u306b\u767b\u9332\u3055\u308c\u305f\u578b\u304c\u5165\u3063\u3066\u304d\u307e\u3059.\ntype_list_t \u306f, \u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u5f15\u6570\u306b\u6307\u5b9a\u3055\u308c\u305f\u578b\u306e\u30ea\u30b9\u30c8\u3092\u4fdd\u6301\u3057\u307e\u3059.\n\u30b3\u30f3\u30d1\u30a4\u30eb\u6642\u95a2\u6570 size(), index_of<T>(), at_t<I> \u306f boost::mpl::vector \u3092\u4f7f\u3048\u3070\u7c21\u5358\u306b\u540c\u3058\u52b9\u679c\u3092\u5f97\u3089\u308c\u307e\u3059\u304c, \u4eca\u56de\u306f\u30b3\u30d4\u30da\u4e00\u767a\u3067\u5b9f\u884c\u3067\u304d\u308b\u3053\u3068\u3092\u512a\u5148\u3057\u3066\u624b\u66f8\u304d\u3057\u307e\u3057\u305f.\n\u3067, apply \u304c 3\u6bb5\u968e\u3042\u308a\u307e\u3059. \u307e\u305a\u578b\u6570\u304b\u3089\u30b3\u30f3\u30d1\u30a4\u30eb\u6642\u6574\u6570\u30b7\u30fc\u30b1\u30f3\u30b9\u3092\u5f97\u307e\u3059. \u305d\u306e\u30b7\u30fc\u30b1\u30f3\u30b9\u3092\u5143\u306b\u95a2\u6570\u30dd\u30a4\u30f3\u30bf\u306e\u914d\u5217\u3092\u751f\u6210\u3057\u307e\u3059. type_list_t<int, long, double> \u3060\u3063\u305f\u3089 {&apply<int>, &apply<long>, &apply<double>} \u3068\u306a\u308b\u308f\u3051\u3067\u3059. \u6307\u5b9a\u3057\u305f enum \u5024\u3092\u914d\u5217\u306e\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u3068\u3057\u3066, 3\u6bb5\u76ee\u306e apply \u304c\u547c\u3070\u308c\u307e\u3059. \u6700\u5f8c\u306b\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u5f15\u6570\u3092\u6307\u5b9a\u3057\u3066\u30d5\u30a1\u30f3\u30af\u30bf\u306e operator()<T> \u304c\u547c\u3070\u308c\u307e\u3059. \u5358\u7d14\u3067\u3059\u306d.\n\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u95a2\u6570\u306e\u30dd\u30a4\u30f3\u30bf\u914d\u5217\u306f StackOverflow \u306e\u8a18\u4e8b \u3067\u7d39\u4ecb\u3055\u308c\u3066\u3044\u307e\u3059.\n\n\u5270\u4f59\u7b97\u306e\u5b9f\u88c5\n\u3053\u3053\u307e\u3067\u3060\u3068\u305f\u3060\u3081\u3093\u3069\u304f\u3055\u304f\u306a\u3063\u305f\u3060\u3051\u306a\u306e\u3067, \u6a5f\u80fd\u3092\u62e1\u5f35\u3057\u3066 switch \u9664\u53bb\u306e\u826f\u3055\u3092\u78ba\u8a8d\u3057\u307e\u3057\u3087\u3046.\n\u6f14\u7b97\u5b50\u306b\u5270\u4f59\u3092\u8ffd\u52a0\u3057\u307e\u3059. \u3084\u308b\u3053\u3068\u306f,\n1. \u30d5\u30a1\u30f3\u30af\u30bf\u3092\u4f5c\u6210\n2. enum \u5024\u3092\u8ffd\u52a0\n3. \u6587\u5b57\u5217->enum \u30de\u30c3\u30d7\u306b\u8ffd\u52a0\n\u3053\u308c\u3060\u3051\u3067\u3059.\nstruct divide_t {\n         return std::forward<T1>(lhs) / std::forward<T2>(rhs);\n     }\n };\n+// \u5270\u4f59\u7b97(\u30bc\u30ed\u5272\u30c1\u30a7\u30c3\u30af\u4ed8\u304d)\n+struct modulo_t {\n+    template <typename T1, typename T2>\n+    auto operator()(T1&& lhs, T2&& rhs) const -> decltype(lhs % rhs)\n+    {\n+        if (rhs == static_cast<remove_cv_reference_t<T2>>(0)) {\n+            throw std::invalid_argument(\"zero division\");\n+        }\n+        return std::forward<T1>(lhs) % std::forward<T2>(rhs);\n+    }\n+};\n // \u6f14\u7b97\u5b50\u30d5\u30a1\u30f3\u30af\u30bf\u30ea\u30b9\u30c8\n-using op_type_list_t = type_list_t<plus_t, minus_t, multiply_t, divide_t>;\n+using op_type_list_t =\n+    type_list_t<plus_t, minus_t, multiply_t, divide_t, modulo_t>;\n // \u6f14\u7b97\u5b50\u3092\u8868\u3059 Enum\n enum class op_type_e : int8_t {\n     PLUS = op_type_list_t::index_of<plus_t>(),\n     MINUS = op_type_list_t::index_of<minus_t>(),\n     MULTIPLY = op_type_list_t::index_of<multiply_t>(),\n-    DIVIDE = op_type_list_t::index_of<divide_t>()\n+    DIVIDE = op_type_list_t::index_of<divide_t>(),\n+    MODULO = op_type_list_t::index_of<modulo_t>()\n };\n // \u6f14\u7b97\u5b50\u6587\u5b57\u304b\u3089Enum\n static const std::unordered_map<std::string, op_type_e> g_char_to_enum{\n     {\"+\", op_type_e::PLUS},\n     {\"-\", op_type_e::MINUS},\n     {\"*\", op_type_e::MULTIPLY},\n-    {\"/\", op_type_e::DIVIDE}};\n+    {\"/\", op_type_e::DIVIDE},\n+    {\"%\", op_type_e::MODULO}};\n // op_type_list_t::apply \u306b\u6e21\u3059\u8a08\u7b97\u30d5\u30a1\u30f3\u30af\u30bf\n struct calculator_t {\n     int lhs{0};\n\n\u3053\u308c\u3060\u3051\u3067\u3059. calculate \u95a2\u6570\u306f\u4f55\u3082\u5909\u66f4\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u305b\u3093.\n\n\u30aa\u30da\u30e9\u30f3\u30c9\u306e\u578b\u306b double \u3092\u8ffd\u52a0\n\u6f14\u7b97\u5b50\u3092\u8ffd\u52a0\u3059\u308b\u3060\u3051\u3060\u3068\u3084\u3063\u3071\u308a switch \u3067\u5341\u5206\u3058\u3083\u3093, \u3068\u601d\u308f\u308c\u308b\u304b\u3082\u3057\u308c\u306a\u3044\u306e\u3067, double \u578b\u3082\u4f7f\u3048\u308b\u3088\u3046\u306b\u62e1\u5f35\u3057\u307e\u3059.\n\u307e\u305a int \u304b double \u3092\u6301\u3066\u308b\u578b value_t \u3092\u7528\u610f\u3057\u307e\u3059.\n// \u30aa\u30da\u30e9\u30f3\u30c9\u306e\u578b\u30ea\u30b9\u30c8\nusing value_type_list_t = type_list_t<int, double>;\nenum class value_type_e : int8_t {\n    INT = value_type_list_t::index_of<int>(),\n    DOUBLE = value_type_list_t::index_of<double>()\n};\n// int\u304bdouble\u3092\u6301\u3064\u578b\nusing value_t = boost::variant<int, double>;\n\ncalculate \u306e\u5f15\u6570\u306b value_t \u3092\u4f7f\u3046\u3088\u3046\u306b\u5909\u66f4\u3057\u307e\u3059.\n-static int calculate(const std::string& func, int lhs, int rhs)\n+static value_t calculate(const std::string& func, value_t lhs, value_t rhs)\n\ncalculator_t \u3082\u4fee\u6b63\u3057\u307e\u3059.\n // op_type_list_t::apply \u306b\u6e21\u3059\u8a08\u7b97\u30d5\u30a1\u30f3\u30af\u30bf\n struct calculator_t {\n-    int lhs{0};\n-    int rhs{0};\n+    value_t lhs{0};\n+    value_t rhs{0};\n+\n     template <typename Op>\n-    int operator()() const\n+    value_t operator()() const\n+    {\n+        switch (lhs.which()) {\n+        case value_type_e::INT:\n+            return operator()<Op, int>();\n+        case value_type_e::DOUBLE:\n+            return operator()<Op, double>();\n+        }\n+    }\n+    template <typename Op, typename TL>\n+    value_t operator()() const\n+    {\n+        switch (rhs.which()) {\n+        case value_type_e::INT:\n+            return operator()<Op, TL, int>();\n+        case value_type_e::DOUBLE:\n+            return operator()<Op, TL, double>();\n+        }\n+    }\n+    template <typename Op, typename TL, typename TR>\n+    value_t operator()() const\n     {\n-        return Op()(lhs, rhs);\n+        return Op()(boost::get<TL>(lhs), boost::get<TR>(rhs));\n     }\n };\n\n\u666e\u901a\u306b boost::apply_visitor \u4f7f\u3048\u3070\u3044\u3044\u3093\u3058\u3083, \u3068\u3044\u3046\u7591\u554f\u306f......\u307e\u3041\u3053\u306e\u8a18\u4e8b\u306f\u30b5\u30f3\u30d7\u30eb\u3068\u3044\u3046\u3053\u3068\u3067.\n\u3053\u306e\u307e\u307e\u3060\u3068 double \u306b\u6f14\u7b97\u5b50 % \u304c\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u306a\u3044\u305f\u3081\u30b3\u30f3\u30d1\u30a4\u30eb\u30a8\u30e9\u30fc\u3068\u306a\u308a\u307e\u3059. SFINAE \u3067\u51e6\u7406\u3092\u5206\u5c90\u3055\u305b\u307e\u3059.\n+// nullptr_t \u3092\u4f7f\u3063\u305f enabler_if\n+// http://qiita.com/kazatsuyu/items/203584ef4cb8b9e52462\n+template <bool pred>\n+using enabler_if_t = typename std::enable_if<pred, std::nullptr_t>::type;\n\n struct modulo_t {\n-    template <typename T1, typename T2>\n-    auto operator()(T1&& lhs, T2&& rhs) const -> decltype(lhs % rhs)\n+    // \u4e21\u65b9\u3068\u3082\u6574\u6570\u306a\u3089\u3053\u3061\u3089\n+    template <typename T1,\n+              typename T2,\n+              enabler_if_t<std::is_integral<T1>{} && std::is_integral<T2>{}> =\n+                  nullptr>\n+    auto operator()(T1&& lhs, T2&& rhs) const -> decltype(auto)\n     {\n         if (rhs == static_cast<remove_cv_reference_t<T2>>(0)) {\n             throw std::invalid_argument(\"zero division\");\n         }\n         return std::forward<T1>(lhs) % std::forward<T2>(rhs);\n     }\n+    // \u3069\u3061\u3089\u304b\u304c\u6574\u6570\u3067\u306a\u3044\u5834\u5408\u306f\u3053\u3061\u3089\n+    template <typename T1,\n+              typename T2,\n+              enabler_if_t<!(std::is_integral<T1>{} &&\n+                             std::is_integral<T2>{})> = nullptr>\n+    auto operator()(T1&& lhs, T2&& rhs) const -> decltype(auto)\n+    {\n+        if (rhs == static_cast<remove_cv_reference_t<T2>>(0)) {\n+            throw std::invalid_argument(\"zero division\");\n+        }\n+        return std::fmod(std::forward<T1>(lhs), std::forward<T2>(rhs));\n+    }\n };\n\n\u3053\u308c\u3067 double \u3067\u3082 calculate \u3092\u4f7f\u3048\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3057\u305f.\n\nSwitch \u6587\u3092\u9664\u53bb, \u518d\u3073\ncalculator_t \u306e\u4e2d\u306b\u307e\u305f\u618e\u304d switch \u304c\u73fe\u308c\u307e\u3057\u305f. \u3053\u3093\u306a\u306e\u304c\u3042\u3063\u305f\u3089\u6c17\u8efd\u306b\u4ed6\u306e\u578b\u3092\u8ffd\u52a0\u3067\u304d\u306a\u3044\u3058\u3083\u306a\u3044\u304b! \n\u6ec5\u3073\u3088\n struct calculator_t {\n     value_t lhs{0};\n     value_t rhs{0};\n-\n+    // \u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u5f15\u6570\u3092\u90e8\u5206\u9069\u7528\n+    template <typename T0, typename... Ts>\n+    struct curried_t {\n+        const calculator_t* self{nullptr};\n+        template <typename T>\n+        value_t operator()() const\n+        {\n+            assert(self);\n+            return self->operator()<T0, Ts..., T>();\n+        }\n+    };\n     template <typename Op>\n     value_t operator()() const\n     {\n-        switch (lhs.which()) {\n-        case value_type_e::INT:\n-            return operator()<Op, int>();\n-        case value_type_e::DOUBLE:\n-            return operator()<Op, double>();\n-        }\n+        return value_type_list_t::apply(curried_t<Op>{this}, lhs.which());\n     }\n     template <typename Op, typename TL>\n     value_t operator()() const\n     {\n-        switch (rhs.which()) {\n-        case value_type_e::INT:\n-            return operator()<Op, TL, int>();\n-        case value_type_e::DOUBLE:\n-            return operator()<Op, TL, double>();\n-        }\n+        return value_type_list_t::apply(curried_t<Op, TL>{this}, rhs.which());\n     }\n     template <typename Op, typename TL, typename TR>\n     value_t operator()() const\n\n\u3053\u308c\u3067\u3088\u3057. \u3053\u308c\u3067\u5fc3\u7f6e\u304d\u306a\u304f std::string \u3084 std::complex \u306a\u3069\u3092\u8ffd\u52a0\u3067\u304d\u307e\u3059.\n\n\u307e\u3068\u3081\nvariadic template \u3092\u4f7f\u3063\u3066\u95a2\u6570\u30dd\u30a4\u30f3\u30bf\u30c6\u30fc\u30d6\u30eb\u3092\u81ea\u52d5\u751f\u6210\u3057, switch \u6587\u3092\u9664\u53bb\u3057\u3066\u307f\u307e\u3057\u305f. type_list_t \u3092\u4f7f\u3046\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u30b3\u30fc\u30c9\u304c\u3084\u308b\u3053\u3068\u306f,\n1. type_list_t \u306b\u632f\u308a\u5206\u3051\u308b\u30d5\u30a1\u30f3\u30af\u30bf\u306e\u578b\u3092\u767b\u9332\n2. type_list_t::apply \u306b\u30ed\u30b8\u30c3\u30af\u306e\u30d5\u30a1\u30f3\u30af\u30bf\u3068\u578bID\u3092\u6307\u5b9a\n\u306e\u307f\u3067\u3059.\n\n\u53c2\u8003\u306b\u3057\u305f\u3082\u306e\nStackOverflow \u306e\u8a18\u4e8b\nnullptr_t \u3092\u4f7f\u3063\u305f enabler_if\n\u3053\u306e\u8a18\u4e8b\u306f [C++ Advent Calendar 2015](http://www.adventar.org/calendars/926) \u306e 2\u65e5\u76ee\u306e\u8a18\u4e8b\u3067\u3059.\n\u524d\u306e\u65e5\u306f ignis_fatuus \u3055\u3093\u306e [Metashell\u3092\u4f7f\u3063\u305fC++\u30e1\u30bf\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u306e\u5165\u9580\u3068\u30c7\u30d0\u30c3\u30b0](http://ig.hateblo.jp/entry/2015/12/01/204303) \u3067\u3059.\n\u6b21\u306e\u65e5\u306f Riyaaaaa \u3055\u3093\u306e [C++ AMP\u306b\u3088\u308bGPGPU\u5165\u9580](http://qiita.com/Riyaaaa_a/items/40054b893e70b54f5a26) \u3067\u3059.\n# \u3053\u306e\u8a18\u4e8b\u3067\u8ff0\u3079\u308b\u3053\u3068\n\u3042\u308a\u304c\u3061\u306a\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u95a2\u6570\u3092\u547c\u3073\u5206\u3051\u308b\u30c0\u30b5\u3044\u51e6\u7406\n\n```cpp\nswitch (type) {\ncase Enum::INT: return DoSomething<int>();\ncase Enum::DOUBLE: return DoSomething<double>();\n// \u4ed6\u306e\u69d8\u3005\u306a\u578b\u304c\u7d9a\u304f...\n}\n```\n\u3092, boost::apply_visitor \u3092\u4e00\u822c\u5316\u3059\u308b\u611f\u3058\u3067,\n\n```cpp\ntype_list::apply(DoSomething(), type);\n```\n\u3068\u66f8\u3051\u308b\u3088\u3046\u306b\u3057\u3066\u307f\u307e\u3057\u305f.\n\n# \u80cc\u666f\nC++ \u3067\u52d5\u7684\u30c7\u30a3\u30b9\u30d1\u30c3\u30c1\u304c\u5fc5\u8981\u306a\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u66f8\u3044\u3066\u3044\u308b\u4eba\u306f, \u3057\u3070\u3057\u3070\u4e0a\u8a18\u306e\u3088\u3046\u306a switch \u6587\u7b49\u306b\u3088\u308b\u547c\u3073\u5206\u3051\u304c\u5fc5\u8981\u306b\u306a\u308b\u3053\u3068\u304c\u3042\u308b\u3068\u601d\u3044\u307e\u3059.\n\u5c0f\u3055\u306a\u30d7\u30ed\u30b0\u30e9\u30e0\u306a\u3089\u307e\u3060\u8010\u3048\u3089\u308c\u307e\u3059\u304c, \u898f\u6a21\u304c\u5927\u304d\u304f\u306a\u3063\u3066\u304d\u3066, switch \u304c\u305d\u3053\u304b\u3057\u3053\u306b\u6563\u3089\u3070\u3063\u3066\u3044\u308b\u72b6\u614b\u306b\u306a\u308b\u3068\u304b\u306a\u308a\u3064\u3089\u3044\u3067\u3059.\n\u4f8b\u3048\u3070 DSL \u3092\u5b9f\u88c5\u3057\u3066\u3044\u3066, \u30c7\u30fc\u30bf\u578b\u304c\u3044\u308d\u3044\u308d\u3042\u3063\u3066, \u51e6\u7406\u304c\u3044\u308d\u3044\u308d\u3042\u3063\u3066, \u3068\u3044\u3063\u305f\u72b6\u614b\u306b\u306a\u308b\u3068, \u4ed5\u69d8\u5909\u66f4\u3067\u578b\u3092\u8ffd\u52a0\u3059\u308b\u3060\u3051\u3067\u3082\u304b\u306a\u308a\u5f71\u97ff\u7bc4\u56f2\u306e\u5927\u304d\u3044\u4ed5\u4e8b\u306b\u306a\u308a\u307e\u3059.\n\n# \u30b5\u30f3\u30d7\u30eb\n\u672c\u7a3f\u3067\u306f, \u6574\u6570\u306e\u56db\u5247\u6f14\u7b97\u3092\u89e3\u304f\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u8003\u3048\u3066\u3044\u304d\u305f\u3044\u3068\u601d\u3044\u307e\u3059. \u66f8\u304b\u308c\u305f\u30b3\u30fc\u30c9\u3092\u8a66\u3059\u306b\u306f C++14 \u5bfe\u5fdc\u30b3\u30f3\u30d1\u30a4\u30e9\u3092\u3054\u7528\u610f\u304f\u3060\u3055\u3044. [Coliru](http://coliru.stacked-crooked.com) \u3067\u52d5\u4f5c\u78ba\u8a8d\u6e08\u307f\u3067\u3059. \u3053\u306e\u8a18\u4e8b\u306b\u66f8\u304b\u308c\u305f\u30b3\u30fc\u30c9\u306e\u4e00\u90e8\u307e\u305f\u306f\u5168\u3066\u3092\u7528\u3044\u3066\u4f55\u304b\u640d\u5bb3\u304c\u3067\u3066\u3082\u5f53\u65b9\u306f\u306a\u3093\u306e\u8cac\u4efb\u3082\u8ca0\u3044\u307e\u305b\u3093.\n\n## \u3068\u308a\u3042\u3048\u305a\u521d\u671f\u5b9f\u88c5\n\n```cpp\nstatic int calculate(char op, int lhs, int rhs)\n{\n    switch (op) {\n    case '+':\n        return lhs + rhs;\n    case '-':\n        return lhs - rhs;\n    case '*':\n        return lhs * rhs;\n    case '/':\n        return (rhs != 0) ? lhs / rhs : throw std::invalid_argument(\"zero division\");\n    default:\n        break;\n    }\n    throw std::invalid_argument(\"invalid operator\");\n}\n```\n\u6f14\u7b97\u5b50\u3068\u30aa\u30da\u30e9\u30f3\u30c9\u3092\u53d7\u3051\u53d6\u3063\u3066\u8a08\u7b97\u7d50\u679c\u3092\u8fd4\u3057\u307e\u3059. \u7c21\u5358\u3067\u3059\u306d. \u3053\u308c\u306b\u6f14\u7b97\u5b50\u3092\u8ffd\u52a0\u3057\u3066\u3044\u304d\u307e\u3059.\ncase \u306e\u4e2d\u304c\u3069\u306e\u5206\u5c90\u3067\u3082\u307b\u3068\u3093\u3069\u4e00\u7dd2\u306a\u306e\u3067, \u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u3092\u4f7f\u3044\u305f\u304f\u306a\u308a\u307e\u3059\u306d.\n\n```diff\n     switch (op) {\n     case '+':\n-        return lhs + rhs;\n+        return std::plus<int>()(lhs, rhs);\n     case '-':\n-        return lhs - rhs;\n+        return std::minus<int>()(lhs, rhs);\n     case '*':\n-        return lhs * rhs;\n+        return std::multiplies<int>()(lhs, rhs);\n     case '/':\n-        return (rhs != 0) ? lhs / rhs : throw std::invalid_argument(\"zero division\");\n+        return (rhs != 0) ? std::divides<int>()(lhs, rhs)\n+                          : throw std::invalid_argument(\"zero division\");\n     default:\n         break;\n     }\n```\n\u3053\u3053\u306b\u5270\u4f59\u7b97\u306e\u51e6\u7406\u3092\u8ffd\u52a0\u3057\u3088\u3046\u3068\u3057\u305f\u6642\u306b, \u666e\u901a\u306a\u3089 ```case '%'``` \u3092\u8ffd\u52a0\u3059\u308b\u3068\u3053\u308d\u3067\u3059\u304c, \u3059\u3067\u306b\u4f7f\u308f\u308c\u3066\u3044\u308b\u95a2\u6570\u3092\u5909\u66f4\u3059\u308b\u306e\u306f\u306a\u3093\u304b\u5acc\u3067\u3059. \u65e2\u5b58\u306e\u30b3\u30fc\u30c9\u3092\u5909\u66f4\u305b\u305a\u306b\u6a5f\u80fd\u3092\u62e1\u5f35\u3057\u3066\u3044\u304d\u307e\u3057\u3087\u3046.\n\n## Switch \u6587\u3092\u9664\u53bb\n\u3057\u307e\u3059. \n\n```cpp\n#include <cstdint>\n#include <functional>\n#include <iostream>\n#include <sstream>\n#include <stdexcept>\n#include <string>\n#include <type_traits>\n#include <unordered_map>\n#include <utility>\n#include <vector>\n\n// T \u304b\u3089 const/volatile/reference \u3092\u9664\u3044\u305f\u578b\ntemplate <typename T>\nusing remove_cv_reference_t =\n    typename std::remove_cv<typename std::remove_reference<T>::type>::type;\n// T0,...,Ts \u306e\u4e2d\u3067 T \u304c\u51fa\u73fe\u3059\u308b\u6700\u521d\u306e\u4f4d\u7f6e\ntemplate <size_t I, typename T, typename T0, typename... Ts>\nstruct index_of_impl {\n    static const size_t value = (std::is_same<T, T0>::value)\n                                    ? I\n                                    : index_of_impl<I + 1, T, Ts...>::value;\n};\n// T0,...,Ts \u306e\u4e2d\u3067 T \u304c\u51fa\u73fe\u3059\u308b\u6700\u521d\u306e\u4f4d\u7f6e\ntemplate <size_t I, typename T, typename T0>\nstruct index_of_impl<I, T, T0> {\n    static const size_t value =\n        (std::is_same<T, T0>::value) ? I : static_cast<size_t>(-1);\n};\n// T0,...,Ts \u306e\u4e2d\u3067 I \u756a\u76ee\u306e\u578b\ntemplate <size_t I, typename T0, typename... Ts>\nstruct at_impl {\n    using type =\n        typename std::conditional<I == 0,\n                                  T0,\n                                  typename at_impl<I - 1, Ts...>::type>::type;\n};\n// T0,...,Ts \u306e\u4e2d\u3067 I \u756a\u76ee\u306e\u578b\ntemplate <size_t I, typename T0>\nstruct at_impl<I, T0> {\n    using type = typename std::conditional<I == 0, T0, void>::type;\n};\n// \u578b\u306e\u30ea\u30b9\u30c8\ntemplate <typename... Ts>\nstruct type_list_t {\n    // \u578b\u6570\n    static constexpr size_t size() { return sizeof...(Ts); };\n    // T \u304c\u6700\u521d\u306b\u73fe\u308c\u308b\u4f4d\u7f6e\n    template <typename T>\n    static constexpr size_t index_of()\n    {\n        return index_of_impl<0,\n                             remove_cv_reference_t<T>,\n                             remove_cv_reference_t<Ts>...>::value;\n    }\n    // I \u756a\u76ee\u306e\u578b\n    template <size_t I>\n    using at_t = typename at_impl<I, Ts...>::type;\n    // idx \u756a\u76ee\u306e\u578b T \u306b\u3064\u3044\u3066, f.operator()<T>() \u3092\u5b9f\u884c\u3059\u308b\n    template <typename F, typename Index>\n    static auto apply(F&& f, Index idx) -> decltype(auto)\n    {\n        using R = decltype(f.template operator()<at_t<0>>());  // \u623b\u308a\u5024\u306e\u578b\n        static std::make_index_sequence<size()> seq;  // \u6574\u6570\u30b7\u30fc\u30b1\u30f3\u30b9\n        return apply<R>(seq, std::forward<F>(f), static_cast<int>(idx));\n    }\n\nprivate:\n    // idx \u756a\u76ee\u306e\u578b T \u306b\u3064\u3044\u3066, f.operator()<T>() \u3092\u5b9f\u884c\u3059\u308b\n    template <typename R, typename F, size_t... Is>\n    static R apply(std::index_sequence<Is...>, F&& f, int idx)\n    {\n        using func_t = decltype(&apply<R, F, at_t<0>>);  // \u95a2\u6570\u30dd\u30a4\u30f3\u30bf\u306e\u578b\n        // \u95a2\u6570\u30dd\u30a4\u30f3\u30bf\u30c6\u30fc\u30d6\u30eb\u3092\u751f\u6210\n        // idx \u756a\u76ee\u306e\u95a2\u6570\u30dd\u30a4\u30f3\u30bf\u306f apply<R, F, at_t<idx>> \u3067\u3042\u308b\n        static func_t func_table[] = {&apply<R, F, at_t<Is>>...};\n        return func_table[idx](std::forward<F>(f));\n    }\n    // \u578b T \u306b\u3064\u3044\u3066, f.operator()<T>() \u3092\u5b9f\u884c\u3059\u308b\n    template <typename R, typename F, typename T>\n    static R apply(F&& f)\n    {\n        return f.template operator()<T>();\n    }\n};\n\n// \u52a0\u7b97\nstruct plus_t {\n    template <typename T1, typename T2>\n    auto operator()(T1&& lhs, T2&& rhs) const -> decltype(auto)\n    {\n        return std::forward<T1>(lhs) + std::forward<T2>(rhs);\n    }\n};\n// \u6e1b\u7b97\nstruct minus_t {\n    template <typename T1, typename T2>\n    auto operator()(T1&& lhs, T2&& rhs) const -> decltype(auto)\n    {\n        return std::forward<T1>(lhs) - std::forward<T2>(rhs);\n    }\n};\n// \u4e57\u7b97\nstruct multiply_t {\n    template <typename T1, typename T2>\n    auto operator()(T1&& lhs, T2&& rhs) const -> decltype(auto)\n    {\n        return std::forward<T1>(lhs) * std::forward<T2>(rhs);\n    }\n};\n// \u9664\u7b97(\u30bc\u30ed\u5272\u30c1\u30a7\u30c3\u30af\u4ed8\u304d)\nstruct divide_t {\n    template <typename T1, typename T2>\n    auto operator()(T1&& lhs, T2&& rhs) const -> decltype(auto)\n    {\n        if (rhs == static_cast<remove_cv_reference_t<T2>>(0)) {\n            throw std::invalid_argument(\"zero division\");\n        }\n        return std::forward<T1>(lhs) / std::forward<T2>(rhs);\n    }\n};\n// \u6f14\u7b97\u5b50\u30d5\u30a1\u30f3\u30af\u30bf\u30ea\u30b9\u30c8\nusing op_type_list_t = type_list_t<plus_t, minus_t, multiply_t, divide_t>;\n// \u6f14\u7b97\u5b50\u3092\u8868\u3059 Enum\nenum class op_type_e : int8_t {\n    PLUS = op_type_list_t::index_of<plus_t>(),\n    MINUS = op_type_list_t::index_of<minus_t>(),\n    MULTIPLY = op_type_list_t::index_of<multiply_t>(),\n    DIVIDE = op_type_list_t::index_of<divide_t>()\n};\n// \u6f14\u7b97\u5b50\u6587\u5b57\u304b\u3089Enum\nstatic const std::unordered_map<std::string, op_type_e> g_char_to_enum{\n    {\"+\", op_type_e::PLUS},\n    {\"-\", op_type_e::MINUS},\n    {\"*\", op_type_e::MULTIPLY},\n    {\"/\", op_type_e::DIVIDE}};\n// op_type_list_t::apply \u306b\u6e21\u3059\u8a08\u7b97\u30d5\u30a1\u30f3\u30af\u30bf\nstruct calculator_t {\n    int lhs{0};\n    int rhs{0};\n    template <typename Op>\n    int operator()() const\n    {\n        return Op()(lhs, rhs);\n    }\n};\n\nstatic int calculate(const std::string& op, int lhs, int rhs)\n{\n    op_type_e op_type = [op]() {\n        auto iter = g_char_to_enum.find(op);\n        if (iter == g_char_to_enum.end()) {\n            throw std::invalid_argument(\"invalid operator\");\n        }\n        return iter->second;\n    }();\n    return op_type_list_t::apply(calculator_t{lhs, rhs}, op_type);\n}\n```\n\u3053\u306e Advent Calendar \u306f !(\u521d\u5fc3\u8005) \u5411\u3051\u306a\u306e\u3067\u307f\u306a\u3055\u3093\u4f59\u88d5\u3060\u3068\u601d\u3044\u307e\u3059\u304c, \u3068\u308a\u3042\u3048\u305a\u4e0b\u306e\u65b9\u304b\u3089\u898b\u3066\u3044\u304d\u307e\u3057\u3087\u3046.\n\n```calculate``` \u95a2\u6570\u3067\u306f, \u6f14\u7b97\u5b50\u6587\u5b57\u304b\u3089 enum \u5024\u306b\u5909\u63db\u3057\u3066, ```op_type_list_t::apply``` \u3092\u547c\u3073\u307e\u3059. \u3053\u308c\u3067 enum \u5024\u304b\u3089\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u95a2\u6570 ```calculator_t::operator()<T>``` \u304c\u547c\u3073\u51fa\u3055\u308c\u307e\u3059. T \u306b\u306f ```op_type_list_t``` \u306b\u767b\u9332\u3055\u308c\u305f\u578b\u304c\u5165\u3063\u3066\u304d\u307e\u3059.\n\n```type_list_t``` \u306f, \u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u5f15\u6570\u306b\u6307\u5b9a\u3055\u308c\u305f\u578b\u306e\u30ea\u30b9\u30c8\u3092\u4fdd\u6301\u3057\u307e\u3059.\n\u30b3\u30f3\u30d1\u30a4\u30eb\u6642\u95a2\u6570 ```size(), index_of<T>(), at_t<I>``` \u306f ```boost::mpl::vector``` \u3092\u4f7f\u3048\u3070\u7c21\u5358\u306b\u540c\u3058\u52b9\u679c\u3092\u5f97\u3089\u308c\u307e\u3059\u304c, \u4eca\u56de\u306f\u30b3\u30d4\u30da\u4e00\u767a\u3067\u5b9f\u884c\u3067\u304d\u308b\u3053\u3068\u3092\u512a\u5148\u3057\u3066\u624b\u66f8\u304d\u3057\u307e\u3057\u305f.\n\u3067, apply \u304c 3\u6bb5\u968e\u3042\u308a\u307e\u3059. \u307e\u305a\u578b\u6570\u304b\u3089\u30b3\u30f3\u30d1\u30a4\u30eb\u6642\u6574\u6570\u30b7\u30fc\u30b1\u30f3\u30b9\u3092\u5f97\u307e\u3059. \u305d\u306e\u30b7\u30fc\u30b1\u30f3\u30b9\u3092\u5143\u306b\u95a2\u6570\u30dd\u30a4\u30f3\u30bf\u306e\u914d\u5217\u3092\u751f\u6210\u3057\u307e\u3059. ```type_list_t<int, long, double>``` \u3060\u3063\u305f\u3089 ```{&apply<int>, &apply<long>, &apply<double>}``` \u3068\u306a\u308b\u308f\u3051\u3067\u3059. \u6307\u5b9a\u3057\u305f enum \u5024\u3092\u914d\u5217\u306e\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u3068\u3057\u3066, 3\u6bb5\u76ee\u306e ```apply``` \u304c\u547c\u3070\u308c\u307e\u3059. \u6700\u5f8c\u306b\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u5f15\u6570\u3092\u6307\u5b9a\u3057\u3066\u30d5\u30a1\u30f3\u30af\u30bf\u306e ```operator()<T>``` \u304c\u547c\u3070\u308c\u307e\u3059. \u5358\u7d14\u3067\u3059\u306d.\n\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u95a2\u6570\u306e\u30dd\u30a4\u30f3\u30bf\u914d\u5217\u306f [StackOverflow \u306e\u8a18\u4e8b](http://stackoverflow.com/questions/7381805/c-c11-switch-statement-for-variadic-templates) \u3067\u7d39\u4ecb\u3055\u308c\u3066\u3044\u307e\u3059.\n\n## \u5270\u4f59\u7b97\u306e\u5b9f\u88c5\n\u3053\u3053\u307e\u3067\u3060\u3068\u305f\u3060\u3081\u3093\u3069\u304f\u3055\u304f\u306a\u3063\u305f\u3060\u3051\u306a\u306e\u3067, \u6a5f\u80fd\u3092\u62e1\u5f35\u3057\u3066 switch \u9664\u53bb\u306e\u826f\u3055\u3092\u78ba\u8a8d\u3057\u307e\u3057\u3087\u3046.\n\u6f14\u7b97\u5b50\u306b\u5270\u4f59\u3092\u8ffd\u52a0\u3057\u307e\u3059. \u3084\u308b\u3053\u3068\u306f,\n1. \u30d5\u30a1\u30f3\u30af\u30bf\u3092\u4f5c\u6210\n2. enum \u5024\u3092\u8ffd\u52a0\n3. \u6587\u5b57\u5217->enum \u30de\u30c3\u30d7\u306b\u8ffd\u52a0\n\u3053\u308c\u3060\u3051\u3067\u3059.\n\n```diff\nstruct divide_t {\n         return std::forward<T1>(lhs) / std::forward<T2>(rhs);\n     }\n };\n+// \u5270\u4f59\u7b97(\u30bc\u30ed\u5272\u30c1\u30a7\u30c3\u30af\u4ed8\u304d)\n+struct modulo_t {\n+    template <typename T1, typename T2>\n+    auto operator()(T1&& lhs, T2&& rhs) const -> decltype(lhs % rhs)\n+    {\n+        if (rhs == static_cast<remove_cv_reference_t<T2>>(0)) {\n+            throw std::invalid_argument(\"zero division\");\n+        }\n+        return std::forward<T1>(lhs) % std::forward<T2>(rhs);\n+    }\n+};\n // \u6f14\u7b97\u5b50\u30d5\u30a1\u30f3\u30af\u30bf\u30ea\u30b9\u30c8\n-using op_type_list_t = type_list_t<plus_t, minus_t, multiply_t, divide_t>;\n+using op_type_list_t =\n+    type_list_t<plus_t, minus_t, multiply_t, divide_t, modulo_t>;\n // \u6f14\u7b97\u5b50\u3092\u8868\u3059 Enum\n enum class op_type_e : int8_t {\n     PLUS = op_type_list_t::index_of<plus_t>(),\n     MINUS = op_type_list_t::index_of<minus_t>(),\n     MULTIPLY = op_type_list_t::index_of<multiply_t>(),\n-    DIVIDE = op_type_list_t::index_of<divide_t>()\n+    DIVIDE = op_type_list_t::index_of<divide_t>(),\n+    MODULO = op_type_list_t::index_of<modulo_t>()\n };\n // \u6f14\u7b97\u5b50\u6587\u5b57\u304b\u3089Enum\n static const std::unordered_map<std::string, op_type_e> g_char_to_enum{\n     {\"+\", op_type_e::PLUS},\n     {\"-\", op_type_e::MINUS},\n     {\"*\", op_type_e::MULTIPLY},\n-    {\"/\", op_type_e::DIVIDE}};\n+    {\"/\", op_type_e::DIVIDE},\n+    {\"%\", op_type_e::MODULO}};\n // op_type_list_t::apply \u306b\u6e21\u3059\u8a08\u7b97\u30d5\u30a1\u30f3\u30af\u30bf\n struct calculator_t {\n     int lhs{0};\n```\n\u3053\u308c\u3060\u3051\u3067\u3059. ```calculate``` \u95a2\u6570\u306f**\u4f55\u3082\u5909\u66f4\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u305b\u3093.**\n\n## \u30aa\u30da\u30e9\u30f3\u30c9\u306e\u578b\u306b double \u3092\u8ffd\u52a0\n\u6f14\u7b97\u5b50\u3092\u8ffd\u52a0\u3059\u308b\u3060\u3051\u3060\u3068\u3084\u3063\u3071\u308a switch \u3067\u5341\u5206\u3058\u3083\u3093, \u3068\u601d\u308f\u308c\u308b\u304b\u3082\u3057\u308c\u306a\u3044\u306e\u3067, double \u578b\u3082\u4f7f\u3048\u308b\u3088\u3046\u306b\u62e1\u5f35\u3057\u307e\u3059.\n\u307e\u305a int \u304b double \u3092\u6301\u3066\u308b\u578b value_t \u3092\u7528\u610f\u3057\u307e\u3059.\n\n```cpp\n// \u30aa\u30da\u30e9\u30f3\u30c9\u306e\u578b\u30ea\u30b9\u30c8\nusing value_type_list_t = type_list_t<int, double>;\nenum class value_type_e : int8_t {\n    INT = value_type_list_t::index_of<int>(),\n    DOUBLE = value_type_list_t::index_of<double>()\n};\n// int\u304bdouble\u3092\u6301\u3064\u578b\nusing value_t = boost::variant<int, double>;\n```\n\n```calculate``` \u306e\u5f15\u6570\u306b ```value_t``` \u3092\u4f7f\u3046\u3088\u3046\u306b\u5909\u66f4\u3057\u307e\u3059.\n\n```diff\n-static int calculate(const std::string& func, int lhs, int rhs)\n+static value_t calculate(const std::string& func, value_t lhs, value_t rhs)\n```\n\n```calculator_t``` \u3082\u4fee\u6b63\u3057\u307e\u3059.\n\n```diff\n // op_type_list_t::apply \u306b\u6e21\u3059\u8a08\u7b97\u30d5\u30a1\u30f3\u30af\u30bf\n struct calculator_t {\n-    int lhs{0};\n-    int rhs{0};\n+    value_t lhs{0};\n+    value_t rhs{0};\n+\n     template <typename Op>\n-    int operator()() const\n+    value_t operator()() const\n+    {\n+        switch (lhs.which()) {\n+        case value_type_e::INT:\n+            return operator()<Op, int>();\n+        case value_type_e::DOUBLE:\n+            return operator()<Op, double>();\n+        }\n+    }\n+    template <typename Op, typename TL>\n+    value_t operator()() const\n+    {\n+        switch (rhs.which()) {\n+        case value_type_e::INT:\n+            return operator()<Op, TL, int>();\n+        case value_type_e::DOUBLE:\n+            return operator()<Op, TL, double>();\n+        }\n+    }\n+    template <typename Op, typename TL, typename TR>\n+    value_t operator()() const\n     {\n-        return Op()(lhs, rhs);\n+        return Op()(boost::get<TL>(lhs), boost::get<TR>(rhs));\n     }\n };\n```\n\n\u666e\u901a\u306b boost::apply_visitor \u4f7f\u3048\u3070\u3044\u3044\u3093\u3058\u3083, \u3068\u3044\u3046\u7591\u554f\u306f......\u307e\u3041\u3053\u306e\u8a18\u4e8b\u306f\u30b5\u30f3\u30d7\u30eb\u3068\u3044\u3046\u3053\u3068\u3067.\n\n\u3053\u306e\u307e\u307e\u3060\u3068 double \u306b\u6f14\u7b97\u5b50 % \u304c\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u306a\u3044\u305f\u3081\u30b3\u30f3\u30d1\u30a4\u30eb\u30a8\u30e9\u30fc\u3068\u306a\u308a\u307e\u3059. SFINAE \u3067\u51e6\u7406\u3092\u5206\u5c90\u3055\u305b\u307e\u3059.\n\n```diff\n+// nullptr_t \u3092\u4f7f\u3063\u305f enabler_if\n+// http://qiita.com/kazatsuyu/items/203584ef4cb8b9e52462\n+template <bool pred>\n+using enabler_if_t = typename std::enable_if<pred, std::nullptr_t>::type;\n\n struct modulo_t {\n-    template <typename T1, typename T2>\n-    auto operator()(T1&& lhs, T2&& rhs) const -> decltype(lhs % rhs)\n+    // \u4e21\u65b9\u3068\u3082\u6574\u6570\u306a\u3089\u3053\u3061\u3089\n+    template <typename T1,\n+              typename T2,\n+              enabler_if_t<std::is_integral<T1>{} && std::is_integral<T2>{}> =\n+                  nullptr>\n+    auto operator()(T1&& lhs, T2&& rhs) const -> decltype(auto)\n     {\n         if (rhs == static_cast<remove_cv_reference_t<T2>>(0)) {\n             throw std::invalid_argument(\"zero division\");\n         }\n         return std::forward<T1>(lhs) % std::forward<T2>(rhs);\n     }\n+    // \u3069\u3061\u3089\u304b\u304c\u6574\u6570\u3067\u306a\u3044\u5834\u5408\u306f\u3053\u3061\u3089\n+    template <typename T1,\n+              typename T2,\n+              enabler_if_t<!(std::is_integral<T1>{} &&\n+                             std::is_integral<T2>{})> = nullptr>\n+    auto operator()(T1&& lhs, T2&& rhs) const -> decltype(auto)\n+    {\n+        if (rhs == static_cast<remove_cv_reference_t<T2>>(0)) {\n+            throw std::invalid_argument(\"zero division\");\n+        }\n+        return std::fmod(std::forward<T1>(lhs), std::forward<T2>(rhs));\n+    }\n };\n```\n\n\u3053\u308c\u3067 double \u3067\u3082 calculate \u3092\u4f7f\u3048\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3057\u305f.\n\n## Switch \u6587\u3092\u9664\u53bb, \u518d\u3073\ncalculator_t \u306e\u4e2d\u306b\u307e\u305f\u618e\u304d switch \u304c\u73fe\u308c\u307e\u3057\u305f. \u3053\u3093\u306a\u306e\u304c\u3042\u3063\u305f\u3089\u6c17\u8efd\u306b\u4ed6\u306e\u578b\u3092\u8ffd\u52a0\u3067\u304d\u306a\u3044\u3058\u3083\u306a\u3044\u304b! \n\n\u6ec5\u3073\u3088\n\n```diff\n struct calculator_t {\n     value_t lhs{0};\n     value_t rhs{0};\n-\n+    // \u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u5f15\u6570\u3092\u90e8\u5206\u9069\u7528\n+    template <typename T0, typename... Ts>\n+    struct curried_t {\n+        const calculator_t* self{nullptr};\n+        template <typename T>\n+        value_t operator()() const\n+        {\n+            assert(self);\n+            return self->operator()<T0, Ts..., T>();\n+        }\n+    };\n     template <typename Op>\n     value_t operator()() const\n     {\n-        switch (lhs.which()) {\n-        case value_type_e::INT:\n-            return operator()<Op, int>();\n-        case value_type_e::DOUBLE:\n-            return operator()<Op, double>();\n-        }\n+        return value_type_list_t::apply(curried_t<Op>{this}, lhs.which());\n     }\n     template <typename Op, typename TL>\n     value_t operator()() const\n     {\n-        switch (rhs.which()) {\n-        case value_type_e::INT:\n-            return operator()<Op, TL, int>();\n-        case value_type_e::DOUBLE:\n-            return operator()<Op, TL, double>();\n-        }\n+        return value_type_list_t::apply(curried_t<Op, TL>{this}, rhs.which());\n     }\n     template <typename Op, typename TL, typename TR>\n     value_t operator()() const\n```\n\n\u3053\u308c\u3067\u3088\u3057. \u3053\u308c\u3067\u5fc3\u7f6e\u304d\u306a\u304f std::string \u3084 std::complex \u306a\u3069\u3092\u8ffd\u52a0\u3067\u304d\u307e\u3059.\n\n# \u307e\u3068\u3081\nvariadic template \u3092\u4f7f\u3063\u3066\u95a2\u6570\u30dd\u30a4\u30f3\u30bf\u30c6\u30fc\u30d6\u30eb\u3092\u81ea\u52d5\u751f\u6210\u3057, switch \u6587\u3092\u9664\u53bb\u3057\u3066\u307f\u307e\u3057\u305f. type_list_t \u3092\u4f7f\u3046\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u30b3\u30fc\u30c9\u304c\u3084\u308b\u3053\u3068\u306f,\n1. type_list_t \u306b\u632f\u308a\u5206\u3051\u308b\u30d5\u30a1\u30f3\u30af\u30bf\u306e\u578b\u3092\u767b\u9332\n2. type_list_t::apply \u306b\u30ed\u30b8\u30c3\u30af\u306e\u30d5\u30a1\u30f3\u30af\u30bf\u3068\u578bID\u3092\u6307\u5b9a\n\u306e\u307f\u3067\u3059.\n\n# \u53c2\u8003\u306b\u3057\u305f\u3082\u306e\n[StackOverflow \u306e\u8a18\u4e8b](http://stackoverflow.com/questions/7381805/c-c11-switch-statement-for-variadic-templates)\n[nullptr_t \u3092\u4f7f\u3063\u305f enabler_if](http://qiita.com/kazatsuyu/items/203584ef4cb8b9e52462)\n", "tags": ["C++", "C++11", "C++14"]}