{"context": " More than 1 year has passed since last update.\n\n\u30a8\u30e9\u30c8\u30b9\u30c6\u30cd\u30b9\u306e\u7be9\n\nhello.rb\ndef eratosthenes(n)\n  numbers = (0..n).to_a\n  numbers[0],numbers[1] = nil\n  numbers.each do |d|\n    next if d == nil\n    break if (Math.sqrt(n) < d)\n    (2*d..n).step(d){|e| numbers[e] = nil}\n  end\n  numbers.compact!\n  return numbers\nend\n\np eratosthenes(100)\n\n=> [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n\n\n\n\n\uff11\u304b\u3089\uff19\u307e\u3067\u306e\u4e5d\u4e5d\u3092\u8a08\u7b97\u3059\u308b\n\nhello.rb\n\n[*1..9].each do |abc|\n  [*1..9].each do |f|\n    printf(\"%3d\", abc * f)\n  end\n  print \"\\n\"\nend\n =>\n  1  2  3  4  5  6  7  8  9\n  2  4  6  8 10 12 14 16 18\n  3  6  9 12 15 18 21 24 27\n  4  8 12 16 20 24 28 32 36\n  5 10 15 20 25 30 35 40 45\n  6 12 18 24 30 36 42 48 54\n  7 14 21 28 35 42 49 56 63\n  8 16 24 32 40 48 56 64 72\n  9 18 27 36 45 54 63 72 81\n\n\n\n\u30b8\u30e3\u30f3\u30b1\u30f3\u3092\u5b9f\u88c5\u3059\u308b\n\nhello.rb\ndef jankenn\n  janken = { \u30b0\u30fc: 0, \u30d1\u30fc: 1, \u30c1\u30e7\u30ad: 2 }\n  puts(\"\u30b8\u30e3\u30f3\u30b1\u30f3\uff01\uff01\uff01\")\n  n = gets.chomp\n  puts \"\u308f\u305f\u3057\uff1a #{n}\uff01\uff01\uff01\"\n  m = janken.key(rand(3)).to_s\n  puts \"\u76f8\u624b\uff1a #{m}\uff01\uff01\uff01\"\n\n  if %w(\u30b0\u30fc \u30c1\u30e7\u30ad \u30d1\u30fc).any?{ |abc| abc == n }\n    if n == m\n      puts \"\u5f15\u304d\u5206\u3051\"\n    elsif n == \"\u30b0\u30fc\" && m == \"\u30c1\u30e7\u30ad\"\n      puts \"\u3042\u306a\u305f\u306e\u52dd\u3061\"\n    elsif n == \"\u30c1\u30e7\u30ad\" && m == \"\u30d1\u30fc\"\n      puts \"\u3042\u306a\u305f\u306e\u52dd\u3061\"\n    elsif n == \"\u30d1\u30fc\" && m == \"\u30b0\u30fc\"\n      puts \"\u3042\u306a\u305f\u306e\u52dd\u3061\"\n    else\n      puts \"\u3042\u306a\u305f\u306e\u8ca0\u3051\"\n    end\n  else\n    \"\u30b0\u30fc\u30fb\u30c1\u30e7\u30ad\u30fb\u30d1\u30fc\u306e\u3044\u305a\u308c\u304b\u3092\u5165\u529b\u3057\u3066\u4e0b\u3055\u3044\uff01\"\n  end\nend\n\n\n\n\n\u597d\u304d\u306a\u500d\u6570\u3092\u4f5c\u308b\n\nhello.rb\n\ndef input_of_multiple\n    puts \"\u6570\u5024\u306f\uff11\u304b\u3089\u59cb\u307e\u308a\u307e\u3059\"\n    puts \"\u6570\u5024\u306e\u7d42\u308f\u308a\u306e\u7bc4\u56f2\u3092\u5165\u529b\u3057\u3066\u4e0b\u3055\u3044\"\n    range = gets.chomp.to_i\n    if range == 0\n      raise \"\u6b63\u306e\u6574\u6570\u3092\u5165\u529b\u3057\u3066\u304f\u3060\u3055\u3044\"\n    end\n    puts \"\u500d\u6570\u3092\u5165\u529b\u3057\u4e0b\u3055\u3044\"\n    x = gets.chomp.to_i\n    if x == 0\n      raise \"\u6b63\u306e\u6574\u6570\u3092\u5165\u529b\u3057\u3066\u304f\u3060\u3055\u3044\"\n    end\n\n  arr = []\n  ->(range, x){\n    (1..range).each do |abc|\n      arr << abc if abc % x == 0\n    end\n  }.call(range, x)\n  print arr\nend\n\n\n\n\n\u7d20\u56e0\u6570\u5206\u89e3\n\nhello.rb\nclass Integer\n  def prime_factors(n=self)\n    list = []\n    k = 2\n    while n != 1\n      if n % k == 0\n        list.push(k)\n        n = n / k\n      else\n        k = k + 1\n      end\n    end\n    return list\n  end\nend\n\np 100.prime_factors\n=> [2, 2, 5, 5]\n\n\n##\u30a8\u30e9\u30c8\u30b9\u30c6\u30cd\u30b9\u306e\u7be9\n\n```hello.rb\ndef eratosthenes(n)\n  numbers = (0..n).to_a\n  numbers[0],numbers[1] = nil\n  numbers.each do |d|\n    next if d == nil\n    break if (Math.sqrt(n) < d)\n    (2*d..n).step(d){|e| numbers[e] = nil}\n  end\n  numbers.compact!\n  return numbers\nend\n\np eratosthenes(100)\n\n=> [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n\n```\n\n##\uff11\u304b\u3089\uff19\u307e\u3067\u306e\u4e5d\u4e5d\u3092\u8a08\u7b97\u3059\u308b\n\n```hello.rb\n\n[*1..9].each do |abc|\n  [*1..9].each do |f|\n    printf(\"%3d\", abc * f)\n  end\n  print \"\\n\"\nend\n =>\n  1  2  3  4  5  6  7  8  9\n  2  4  6  8 10 12 14 16 18\n  3  6  9 12 15 18 21 24 27\n  4  8 12 16 20 24 28 32 36\n  5 10 15 20 25 30 35 40 45\n  6 12 18 24 30 36 42 48 54\n  7 14 21 28 35 42 49 56 63\n  8 16 24 32 40 48 56 64 72\n  9 18 27 36 45 54 63 72 81\n```\n\n##\u30b8\u30e3\u30f3\u30b1\u30f3\u3092\u5b9f\u88c5\u3059\u308b\n\n```hello.rb\ndef jankenn\n  janken = { \u30b0\u30fc: 0, \u30d1\u30fc: 1, \u30c1\u30e7\u30ad: 2 }\n  puts(\"\u30b8\u30e3\u30f3\u30b1\u30f3\uff01\uff01\uff01\")\n  n = gets.chomp\n  puts \"\u308f\u305f\u3057\uff1a #{n}\uff01\uff01\uff01\"\n  m = janken.key(rand(3)).to_s\n  puts \"\u76f8\u624b\uff1a #{m}\uff01\uff01\uff01\"\n\n  if %w(\u30b0\u30fc \u30c1\u30e7\u30ad \u30d1\u30fc).any?{ |abc| abc == n }\n    if n == m\n      puts \"\u5f15\u304d\u5206\u3051\"\n    elsif n == \"\u30b0\u30fc\" && m == \"\u30c1\u30e7\u30ad\"\n      puts \"\u3042\u306a\u305f\u306e\u52dd\u3061\"\n    elsif n == \"\u30c1\u30e7\u30ad\" && m == \"\u30d1\u30fc\"\n      puts \"\u3042\u306a\u305f\u306e\u52dd\u3061\"\n    elsif n == \"\u30d1\u30fc\" && m == \"\u30b0\u30fc\"\n      puts \"\u3042\u306a\u305f\u306e\u52dd\u3061\"\n    else\n      puts \"\u3042\u306a\u305f\u306e\u8ca0\u3051\"\n    end\n  else\n    \"\u30b0\u30fc\u30fb\u30c1\u30e7\u30ad\u30fb\u30d1\u30fc\u306e\u3044\u305a\u308c\u304b\u3092\u5165\u529b\u3057\u3066\u4e0b\u3055\u3044\uff01\"\n  end\nend\n\n```\n\n##\u597d\u304d\u306a\u500d\u6570\u3092\u4f5c\u308b\n\n```hello.rb\n\ndef input_of_multiple\n    puts \"\u6570\u5024\u306f\uff11\u304b\u3089\u59cb\u307e\u308a\u307e\u3059\"\n    puts \"\u6570\u5024\u306e\u7d42\u308f\u308a\u306e\u7bc4\u56f2\u3092\u5165\u529b\u3057\u3066\u4e0b\u3055\u3044\"\n    range = gets.chomp.to_i\n    if range == 0\n      raise \"\u6b63\u306e\u6574\u6570\u3092\u5165\u529b\u3057\u3066\u304f\u3060\u3055\u3044\"\n    end\n    puts \"\u500d\u6570\u3092\u5165\u529b\u3057\u4e0b\u3055\u3044\"\n    x = gets.chomp.to_i\n    if x == 0\n      raise \"\u6b63\u306e\u6574\u6570\u3092\u5165\u529b\u3057\u3066\u304f\u3060\u3055\u3044\"\n    end\n\n  arr = []\n  ->(range, x){\n    (1..range).each do |abc|\n      arr << abc if abc % x == 0\n    end\n  }.call(range, x)\n  print arr\nend\n\n```\n\n##\u7d20\u56e0\u6570\u5206\u89e3\n\n```hello.rb\nclass Integer\n  def prime_factors(n=self)\n    list = []\n    k = 2\n    while n != 1\n      if n % k == 0\n        list.push(k)\n        n = n / k\n      else\n        k = k + 1\n      end\n    end\n    return list\n  end\nend\n\np 100.prime_factors\n=> [2, 2, 5, 5]\n```\n", "tags": ["Ruby", "\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0", "ruby2.1"]}