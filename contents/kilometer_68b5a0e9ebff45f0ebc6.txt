{"context": "\n\n\u30b5\u30f3\u30d7\u30eb\u30c7\u30fc\u30bf\n\u9069\u5f53\u306a\u30b5\u30f3\u30d7\u30eb\u30c7\u30fc\u30bf\u3092\u7528\u610f\u3057\u307e\u3059\u3002\n\n\u30e9\u30f3\u30c0\u30e0\u306b\u30c7\u30fc\u30bf\u306e\u534a\u5206\u3092\u30d6\u30c3\u30b3\u30cc\u30ad\u307e\u3059\u3002\n\n\n\u30e2\u30c7\u30eb\n\u795e\u69d8\u306e\u65b9\u6cd5\u3092\u771f\u4f3c\u3057\u3066\u30012\u968e\u5dee\u5206\u3092\u4eee\u5b9a\u3057\u307e\u3059\u3002\n\u2194\u03bct\u2212\u03bct\u22121\u03bct\u223c\u223cnormal(\u03bct\u22121\u2212\u03bct\u22122,\u00a0smu)normal(2\u2217\u03bct\u22121\u2212\u03bct\u22122,\u00a0smu)\u03bct\u2212\u03bct\u22121\u223cnormal(\u03bct\u22121\u2212\u03bct\u22122,\u00a0smu)\u2194\u03bct\u223cnormal(2\u2217\u03bct\u22121\u2212\u03bct\u22122,\u00a0smu){\\begin{eqnarray}\n&\\mu_t - \\mu_{t-1} &\\sim& normal(\\mu_{t-1} - \\mu_{t-2},\\ s_{mu})\\\\\n\\leftrightarrow &\\mu_t &\\sim& normal(2*\\mu_{t-1} - \\mu_{t-2},\\ s_{mu})\n\\end{eqnarray}\n}\n\nstan code\n\u3048\u30fc\u3068\u3001\u65b9\u6cd5\u306f2\u3064\u3042\u308a\u307e\u3059\u3002\n\u30fb\u500b\u3005\u306eID\u3054\u3068\u306e\u88dc\u5b8c\u3092\u884c\u3044\u305f\u3044\u5834\u5408\n\u3000\u3000\u2192 \u3000\u795e\u306e\u66f8\u306e9.5.2 \u6b20\u6e2c\u5024\u3092\u53c2\u7167\u3002\n\u30fb\u5168\u4f53\u306e\u50be\u5411\u3092\u62bd\u51fa\u3057\u305f\u3044\u5834\u5408\n\u3000\u3000\u2192 \u5927\u5143\u306e\u30de\u30cb\u30e5\u30a2\u30eb\u306eChapter 15\u3092\u53c2\u7167\u3002\n\u3053\u3053\u3067\u306f\u5f8c\u8005\u3002\n\u307e\u3093\u307e\u306a\u306e\u3067\u3001\u30b3\u30fc\u30c9\u3092\u8f09\u305b\u3066\u7d42\u308f\u3089\u305b\u307e\u3059\u304c\u3001segmentsegmentsegment\u3092\u4f7f\u3046\u306e\u304c\u30dd\u30a4\u30f3\u30c8\u3067\u3059\u3002\n\u7cfb\u5217id\u3054\u3068\u306etime\u304c\u63c3\u3063\u3066\u3044\u306a\u3044\u3068\u3044\u3046\u56f0\u96e3\u3092\u56de\u907f\u3059\u308b\u70ba\u306e\u7d30\u5de5\u3067\u3059\u3002\n\u3053\u308c\u306f\u3001\u3044\u308f\u3086\u308b\u300c\u7e26\u9577\u30c7\u30fc\u30bf\u300d(R\u696d\u754c\u3067\u306ftidy\u306a\u30c7\u30fc\u30bf\u3068\u547c\u3073\u307e\u3059\u304c)\u3092\u4f5c\u3063\u3066\u304a\u3044\u3066\u3001\u30b0\u30eb\u30fc\u30d7\u3054\u3068\u306e\u30b5\u30f3\u30d7\u30eb\u30b5\u30a4\u30ba(\u5909\u6570S\u306b\u683c\u7d0d)\u3068\u5171\u306b\u51e6\u7406\u3059\u308b\u3082\u306e\u3067\u3059\u3002\n\u30c7\u30fc\u30bfY\u306f\u30d9\u30af\u30c8\u30eb\u3067\u4e0e\u3048\u3089\u308c\u3001S\u306b\u5f93\u3063\u30661:N_time\u306b\u5206\u89e3\u3055\u308c\u308b\u3068\u3044\u3046\u7406\u5c48\u3067\u3059\u3002\n  data{\n    int N_sample;\n    int N_time;\n\n    vector[N_sample] Y;\n    int S[N_time];\n  }\n\n  parameters{\n    real<lower = 0> s;\n    real<lower = 0> s_mu;\n    real mu[N_time];\n  }\n\n  model{\n    int pos;\n    pos = 1;\n    for(k in 1:N_time){\n      segment(Y, pos, S[k]) ~ normal(mu[k], s);\n      pos = pos + S[k];\n    }\n\n    for(k in 3:N_time){\n      mu[k] ~ normal(2 * mu[k-1] - mu[k-2], s_mu);\n    }\n  }\n\n\n\u7d50\u679c\n\n\n\nAppendix\n\n\u30b5\u30f3\u30d7\u30eb\u30c7\u30fc\u30bf\nset.seed(111)\n\nN_time <- 24\nN_id <- 10\nSD <- 0.3\n\nx <- 1:N_time\ny <- sin(x/N_time * 2 * pi)\n\ndat <- data.frame(time = x, id = factor(rep(1:N_id, each = N_time)),\n                  value = rnorm(N_time * N_id, y, SD))\n\n# \u4e00\u69d8\u4e71\u6570\u3092\u4f7f\u3063\u3066\u30c7\u30fc\u30bf\u3092\u534a\u5206\u306b\u3057\u3066\u3044\u307e\u3059\u3002\ndat1 <- dat %>% \n  dplyr::mutate(index = runif(N_time * N_id, 0, 1)) %>% \n  dplyr::filter(index > 0.5)\n\n\nstan \u30ad\u30c3\u30af\u30b3\u30fc\u30c9\ndatastan <- list(N_sample = nrow(dat1), N_time = N_time,\n                 Y = dat1$value[order(dat1$time)], \n                 S = as.numeric(table(dat1$time)))\n\n# stan\u30b3\u30fc\u30c9\u306f\u30c6\u30ad\u30b9\u30c8\u306b\u3057\u3066stanmodel\u3068\u3044\u3046\u5909\u6570\u306b\u683c\u7d0d\u3057\u3066\u304a\u304d\u307e\u3059\u3002\nfit <- stan(model_code = stanmodel, data = datastan, seed = 123)\n\n\n\u304a\u7d75\u304b\u304d\n\n\u30b5\u30f3\u30d7\u30eb\u30c7\u30fc\u30bf\u306e\u56f3\nggplot(dat, aes(time, value))+\n  theme_classic()+\n  geom_path(aes(color = id), alpha = 0.5)+\n  geom_point(aes(color = id))\n\n\nstan \u306e\u7d50\u679c\u306e\u56f3\n\u8272\u3005\u306a\u63cf\u304d\u65b9\u304c\u3042\u308b\u306e\u3067\u3001\u304a\u597d\u307f\u3067\u3002\ndat_g <- tidy(summary(fit)$summary) %>% \n  filter(.rownames %in% paste(\"mu[\", 1:N_time, \"]\", sep = \"\")) %>% \n  mutate(time = as.numeric(str_sub(.rownames, start = 4, end = -2)))\n\n\nggplot(dat_g, aes(x = time, y = mean))+\n  theme_classic()+\n  geom_ribbon(aes(ymax = X97.5., ymin = X2.5.), fill = \"lightgrey\", alpha =0.5)+\n  geom_ribbon(aes(ymax = X75., ymin = X25.), fill = \"darkgrey\", alpha =0.5)+\n  geom_line()\n\n\n\u74b0\u5883\n> sessionInfo()\nR version 3.3.1 (2016-06-21)\nPlatform: x86_64-apple-darwin13.4.0 (64-bit)\nRunning under: OS X 10.10.5 (Yosemite)\n\nattached base packages:\n[1] stats     graphics  grDevices utils     datasets  methods   base     \n\nother attached packages:\n[1] stringr_1.2.0        broom_0.4.1          ggmcmc_1.1          \n[4] tidyr_0.6.0          rstan_2.14.1         StanHeaders_2.14.0-1\n[7] ggplot2_2.2.1        dplyr_0.5.0         \n\n# \u30b5\u30f3\u30d7\u30eb\u30c7\u30fc\u30bf\n\n\u9069\u5f53\u306a\u30b5\u30f3\u30d7\u30eb\u30c7\u30fc\u30bf\u3092\u7528\u610f\u3057\u307e\u3059\u3002\n<img width = 350, src=https://qiita-image-store.s3.amazonaws.com/0/92401/d5312e27-1e0d-c9ff-fa47-cf157c1cfc0f.png>\n\n\u30e9\u30f3\u30c0\u30e0\u306b\u30c7\u30fc\u30bf\u306e\u534a\u5206\u3092\u30d6\u30c3\u30b3\u30cc\u30ad\u307e\u3059\u3002\n<img width = 350, src = https://qiita-image-store.s3.amazonaws.com/0/92401/37ebbdde-0217-eb32-2a91-e529d9cdd2df.png>\n\n# \u30e2\u30c7\u30eb\n\n[\u795e\u69d8\u306e\u65b9\u6cd5](http://statmodeling.hatenablog.com/entry/difference-between-time-courses)\u3092\u771f\u4f3c\u3057\u3066\u30012\u968e\u5dee\u5206\u3092\u4eee\u5b9a\u3057\u307e\u3059\u3002\n\n```math\n\\begin{eqnarray}\n&\\mu_t - \\mu_{t-1} &\\sim& normal(\\mu_{t-1} - \\mu_{t-2},\\ s_{mu})\\\\\n\\leftrightarrow &\\mu_t &\\sim& normal(2*\\mu_{t-1} - \\mu_{t-2},\\ s_{mu})\n\\end{eqnarray}\n```\n# stan code\n\u3048\u30fc\u3068\u3001\u65b9\u6cd5\u306f2\u3064\u3042\u308a\u307e\u3059\u3002\n\n\u30fb\u500b\u3005\u306eID\u3054\u3068\u306e\u88dc\u5b8c\u3092\u884c\u3044\u305f\u3044\u5834\u5408\n\u3000\u3000\u2192 \u3000[\u795e\u306e\u66f8](http://www.kyoritsu-pub.co.jp/bookdetail/9784320112421)\u306e9.5.2 \u6b20\u6e2c\u5024\u3092\u53c2\u7167\u3002\n\u30fb\u5168\u4f53\u306e\u50be\u5411\u3092\u62bd\u51fa\u3057\u305f\u3044\u5834\u5408\n\u3000\u3000\u2192 [\u5927\u5143\u306e\u30de\u30cb\u30e5\u30a2\u30eb](http://mc-stan.org/documentation/)\u306eChapter 15\u3092\u53c2\u7167\u3002\n\n\u3053\u3053\u3067\u306f\u5f8c\u8005\u3002\n\u307e\u3093\u307e\u306a\u306e\u3067\u3001\u30b3\u30fc\u30c9\u3092\u8f09\u305b\u3066\u7d42\u308f\u3089\u305b\u307e\u3059\u304c\u3001$segment$\u3092\u4f7f\u3046\u306e\u304c\u30dd\u30a4\u30f3\u30c8\u3067\u3059\u3002\n\n\u7cfb\u5217id\u3054\u3068\u306etime\u304c\u63c3\u3063\u3066\u3044\u306a\u3044\u3068\u3044\u3046\u56f0\u96e3\u3092\u56de\u907f\u3059\u308b\u70ba\u306e\u7d30\u5de5\u3067\u3059\u3002\n\u3053\u308c\u306f\u3001\u3044\u308f\u3086\u308b\u300c\u7e26\u9577\u30c7\u30fc\u30bf\u300d(R\u696d\u754c\u3067\u306f[tidy\u306a\u30c7\u30fc\u30bf](http://uribo.hatenablog.com/entry/2015/12/01/055000)\u3068\u547c\u3073\u307e\u3059\u304c)\u3092\u4f5c\u3063\u3066\u304a\u3044\u3066\u3001\u30b0\u30eb\u30fc\u30d7\u3054\u3068\u306e\u30b5\u30f3\u30d7\u30eb\u30b5\u30a4\u30ba(\u5909\u6570S\u306b\u683c\u7d0d)\u3068\u5171\u306b\u51e6\u7406\u3059\u308b\u3082\u306e\u3067\u3059\u3002\n\n\u30c7\u30fc\u30bfY\u306f\u30d9\u30af\u30c8\u30eb\u3067\u4e0e\u3048\u3089\u308c\u3001S\u306b\u5f93\u3063\u30661:N_time\u306b\u5206\u89e3\u3055\u308c\u308b\u3068\u3044\u3046\u7406\u5c48\u3067\u3059\u3002\n\n```stan\n  data{\n    int N_sample;\n    int N_time;\n\n    vector[N_sample] Y;\n    int S[N_time];\n  }\n\n  parameters{\n    real<lower = 0> s;\n    real<lower = 0> s_mu;\n    real mu[N_time];\n  }\n\n  model{\n    int pos;\n    pos = 1;\n    for(k in 1:N_time){\n      segment(Y, pos, S[k]) ~ normal(mu[k], s);\n      pos = pos + S[k];\n    }\n    \n    for(k in 3:N_time){\n      mu[k] ~ normal(2 * mu[k-1] - mu[k-2], s_mu);\n    }\n  }\n```\n\n# \u7d50\u679c\n<img width=\"450\" alt=\"\u30b9\u30af\u30ea\u30fc\u30f3\u30b7\u30e7\u30c3\u30c8 2017-03-02 18.14.53.png\" src=\"https://qiita-image-store.s3.amazonaws.com/0/92401/d9e8a4ab-84d8-437e-b293-9328005d3844.png\">\n\n<img width = 350, src = https://qiita-image-store.s3.amazonaws.com/0/92401/ddf19343-450e-06b7-5177-9b86d5b7f472.png>\n\n\n\n# Appendix\n## \u30b5\u30f3\u30d7\u30eb\u30c7\u30fc\u30bf\n```r\nset.seed(111)\n\nN_time <- 24\nN_id <- 10\nSD <- 0.3\n\nx <- 1:N_time\ny <- sin(x/N_time * 2 * pi)\n\ndat <- data.frame(time = x, id = factor(rep(1:N_id, each = N_time)),\n                  value = rnorm(N_time * N_id, y, SD))\n\n# \u4e00\u69d8\u4e71\u6570\u3092\u4f7f\u3063\u3066\u30c7\u30fc\u30bf\u3092\u534a\u5206\u306b\u3057\u3066\u3044\u307e\u3059\u3002\ndat1 <- dat %>% \n  dplyr::mutate(index = runif(N_time * N_id, 0, 1)) %>% \n  dplyr::filter(index > 0.5)\n```\n\n## stan \u30ad\u30c3\u30af\u30b3\u30fc\u30c9\n\n```r\ndatastan <- list(N_sample = nrow(dat1), N_time = N_time,\n                 Y = dat1$value[order(dat1$time)], \n                 S = as.numeric(table(dat1$time)))\n\n# stan\u30b3\u30fc\u30c9\u306f\u30c6\u30ad\u30b9\u30c8\u306b\u3057\u3066stanmodel\u3068\u3044\u3046\u5909\u6570\u306b\u683c\u7d0d\u3057\u3066\u304a\u304d\u307e\u3059\u3002\nfit <- stan(model_code = stanmodel, data = datastan, seed = 123)\n```\n\n## \u304a\u7d75\u304b\u304d\n### \u30b5\u30f3\u30d7\u30eb\u30c7\u30fc\u30bf\u306e\u56f3\n```r\nggplot(dat, aes(time, value))+\n  theme_classic()+\n  geom_path(aes(color = id), alpha = 0.5)+\n  geom_point(aes(color = id))\n```\n\n### stan \u306e\u7d50\u679c\u306e\u56f3\n\u8272\u3005\u306a\u63cf\u304d\u65b9\u304c\u3042\u308b\u306e\u3067\u3001\u304a\u597d\u307f\u3067\u3002\n\n```r\ndat_g <- tidy(summary(fit)$summary) %>% \n  filter(.rownames %in% paste(\"mu[\", 1:N_time, \"]\", sep = \"\")) %>% \n  mutate(time = as.numeric(str_sub(.rownames, start = 4, end = -2)))\n\n\nggplot(dat_g, aes(x = time, y = mean))+\n  theme_classic()+\n  geom_ribbon(aes(ymax = X97.5., ymin = X2.5.), fill = \"lightgrey\", alpha =0.5)+\n  geom_ribbon(aes(ymax = X75., ymin = X25.), fill = \"darkgrey\", alpha =0.5)+\n  geom_line()\n```\n\n## \u74b0\u5883\n\n```\n> sessionInfo()\nR version 3.3.1 (2016-06-21)\nPlatform: x86_64-apple-darwin13.4.0 (64-bit)\nRunning under: OS X 10.10.5 (Yosemite)\n\nattached base packages:\n[1] stats     graphics  grDevices utils     datasets  methods   base     \n\nother attached packages:\n[1] stringr_1.2.0        broom_0.4.1          ggmcmc_1.1          \n[4] tidyr_0.6.0          rstan_2.14.1         StanHeaders_2.14.0-1\n[7] ggplot2_2.2.1        dplyr_0.5.0         \n```\n", "tags": ["R", "RStan", "\u6642\u7cfb\u5217\u89e3\u6790"]}