{"context": "\u5c0f\u578b Wi-Fi \u958b\u767a\u30dc\u30fc\u30c9 Wio Node \u3068 MQTT \u3067 Publish/Subscribe \u3057\u3066\u307f\u307e\u3057\u305f\u3002\n\u524d\u56de\u306e\u300c\u306f\u3058\u3081\u3066\u306e Wio Node - \u8a2d\u5b9a\u304b\u3089Node-RED\u3067\u5236\u5fa1\u307e\u3067\u300d\u3067 Wio Node \u3092\u8a66\u3057\u307e\u3057\u305f\u304c\u3001\n\u4eca\u56de\u306f\u305d\u306e\u7d9a\u304d\u3067\u3059\u3002\nWio Node \u306f\u3001\u63a5\u7d9a\u3059\u308bGrove\u30e2\u30b8\u30e5\u30fc\u30eb\u3092\u30e2\u30d0\u30a4\u30eb\u30a2\u30d7\u30ea\u3067\u8a2d\u5b9a\u3057\u307e\u3059\u304c\u3001\n\u305d\u308c\u3060\u3068 MQTT \u4f7f\u3048\u306a\u3044\u3057\u3001\u63a5\u7d9a\u3067\u304d\u308b Grove \u30e2\u30b8\u30e5\u30fc\u30eb\u3082\u9650\u3089\u308c\u3066\u3057\u307e\u3044\u307e\u3059\u3002\n\u306a\u306e\u3067\u3001\u4eca\u56de\u306f Wio Node \u3092 Arduino \u5316\u3057\u3066 MQTT \u3057\u307e\u3059\u3002\n\n\u69cb\u6210\nWio Node \u2192 MQTT Broker \u2192 Node-RED \u2192 Browser\n\n\u3068\u308a\u3042\u3048\u305a MQTT Broker \u3068 Node-RED \u306f Mac \u3067\u52d5\u304b\u3057\u307e\u3059\u3002\n\u4f7f\u7528\u3057\u305f\u30bb\u30f3\u30b5\u306f VL6180X \u8d64\u5916\u7dda\u8fd1\u63a5\u8ddd\u96e2\u30bb\u30f3\u30b5\u30e2\u30b8\u30e5\u30fc\u30eb \u3067\u3059\u3002\n\nMQTT Broker\nMQTT Broker \u306f\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u304c\u7c21\u5358\u306a Mosquitto \u3092\u4f7f\u3044\u307e\u3059\u3002\nMac \u3067\u306f Homebrew \u3067\u3001\u3042\u3063\u3068\u3044\u3046\u9593\u306b\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3067\u304d\u307e\u3059\u3002\n$ brew install mosquitto\n\n\nMQTT \u306e\u52d5\u4f5c\u78ba\u8a8d\n\u4e00\u7dd2\u306b\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3055\u308c\u305f MQTT \u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u3092\u4f7f\u3063\u3066\u52d5\u4f5c\u78ba\u8a8d\u3057\u3066\u307f\u307e\u3059\u3002\n\uff11\uff0eMQTT Broker \u306e\u8d77\u52d5 \uff08\u30bf\u30fc\u30df\u30ca\u30eb #1\uff09\n$ /usr/local/sbin/mosquitto \n1487245872: mosquitto version 1.4.10 (build date 2016-12-24 19:38:46-0800) starting\n1487245872: Using default config.\n1487245872: Opening ipv4 listen socket on port 1883.\n1487245872: Opening ipv6 listen socket on port 1883.\n\n\uff12\uff0eSubscriber \uff08\u30bf\u30fc\u30df\u30ca\u30eb #2\uff09\n\u30c8\u30d4\u30c3\u30af topic/test  \u3092\u8cfc\u8aad\n$ mosquitto_sub -t \"topic/test\"\n\n\uff13\uff0ePublisher \uff08\u30bf\u30fc\u30df\u30ca\u30eb #3\uff09\n\u30c8\u30d4\u30c3\u30af topic/test  \u306b\u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u767a\u884c\n$ mosquitto_pub -t \"topic/test\" -m \"Hello mosquitto\"\n\n\uff14\uff0eSubscriber \uff08\u30bf\u30fc\u30df\u30ca\u30eb #2\uff09\nPublisher \u304c\u767a\u884c\u3057\u305f\u30e1\u30c3\u30bb\u30fc\u30b8\uff08Hello mosquitto\uff09\u304c\u3001Subscriber\uff08\u30bf\u30fc\u30df\u30ca\u30eb #2\uff09 \u306b\u8868\u793a\u3055\u308c\u308c\u3070\u6210\u529f\u3067\u3059\u3002\n$ mosquitto_sub -t \"topic/test\"\nHello mosquitto\n\n\nNode-RED\nNode-RED \u306e\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3082\u3068\u3066\u3082\u7c21\u5358\u3067\u3059\u3002\n$ sudo npm install -g --unsafe-perm node-red\n\n\u4eca\u56de\u306e\u30d5\u30ed\u30fc\u306f\u3068\u3066\u3082\u30b7\u30f3\u30d7\u30eb\u3067\u3059\u3002\n\u30c7\u30fc\u30bf\u3092 MQTT Broker \u304b\u3089\u53d7\u4fe1\u3057\u3066\u3001Websocket \u3067\u9001\u4fe1\u3059\u308b\u3060\u3051\u3067\u3059\u3002\n\n\u4eca\u56de\u306f Function \u3067\u4f55\u3082\u884c\u3063\u3066\u3044\u307e\u305b\u3093\u304c\u3001\u30c7\u30fc\u30bf\u306e\u52a0\u5de5\u3084\u30d5\u30a3\u30eb\u30bf\u30ea\u30f3\u30b0\u306a\u3069\u3092\u3059\u308b\u3064\u3082\u308a\u3067\u3059\u3002\n\nWio Node\n\nArduino \u5316\nWio Node \u3092 Arduino \u5316\u3059\u308b\u306b\u306f USB\u30b7\u30ea\u30a2\u30eb\u5909\u63db\u30a2\u30c0\u30d7\u30bf\u30fc\u304c\u5fc5\u8981\u3067\u3059\u3002\n\u79c1\u306f FTDI USB\u30b7\u30ea\u30a2\u30eb\u5909\u63db\u30a2\u30c0\u30d7\u30bf\u30fc Rev.2 \u3092\u4f7f\u7528\u3057\u307e\u3057\u305f\u3002\nArduino \u5316\u3059\u308b\u65b9\u6cd5\u306f\u3053\u3061\u3089\u306e\u30d6\u30ed\u30b0\u3067\u8a73\u3057\u304f\u8aac\u660e\u3055\u308c\u3066\u3044\u307e\u3059\u306e\u3067\u52a9\u304b\u308a\u307e\u3057\u305f\u3002\n\nMQTT \u30e9\u30a4\u30d6\u30e9\u30ea\nWio Node \u306f ESP8266 \u3092\u642d\u8f09\u3057\u3066\u3044\u308b\u306e\u3067\u3001\u3053\u308c\u306b\u5bfe\u5fdc\u3057\u3066\u3044\u3066\u7c21\u5358\u306b\u5229\u7528\u3067\u304d\u308b Adafruit MQTT Library \u3092Arduino IDE \u306b\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3057\u307e\u3059\u3002\n\u300c\u30b9\u30b1\u30c3\u30c1\u300d\uff1e\u300c\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u30a4\u30f3\u30af\u30eb\u30fc\u30c9\u300d\uff1e\u300c\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u7ba1\u7406\u2026\u300d\u3067 Adafruit MQTT Library \u3092\u691c\u7d22\u3057\u3066\u6700\u65b0\u7248\uff080.17.0\uff09\u3092\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3057\u307e\u3057\u305f\u3002\n\n\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\nAdafruit MQTT Library \u306e\u30b5\u30f3\u30d7\u30eb\u30b9\u30b1\u30c3\u30c1(mqtt_esp8266)\u3092\u30d9\u30fc\u30b9\u306b\u3057\u307e\u3057\u305f\u3002\n\u30b3\u30fc\u30c9\u3092\u8f09\u305b\u3061\u3083\u3044\u307e\u3059\u3002\n#include <ESP8266WiFi.h>\n#include <Wire.h>\n#include <VL6180X.h>\n#include \"Adafruit_MQTT.h\"\n#include \"Adafruit_MQTT_Client.h\"\n\n/************************* WiFi Access Point *********************************/\n\n#define WLAN_SSID       \"...your SSID...\"\n#define WLAN_PASS       \"...your password...\"\n\n/************************* Adafruit.io Setup *********************************/\n\n#define MQTT_SERVER      \"xxx.xxx.xxx.xxx\"\n#define MQTT_SERVERPORT  1883                   // use 8883 for SSL\n#define DEVICE_ID        1\n\n/************ Global State (you don't need to change this!) ******************/\n\n// Create an ESP8266 WiFiClient class to connect to the MQTT server.\nWiFiClient client;\n// or... use WiFiFlientSecure for SSL\n//WiFiClientSecure client;\n\n// Setup the MQTT client class by passing in the WiFi client and MQTT server.\nAdafruit_MQTT_Client mqtt(&client, MQTT_SERVER, MQTT_SERVERPORT);\n\n/****************************** topic ***************************************/\n\n// \u30bb\u30f3\u30b5\u306e\u5024\u3092\u767a\u884c\u3059\u308b\u305f\u3081\u306e\u30c8\u30d4\u30c3\u30af\u3092\u8a2d\u5b9a\nAdafruit_MQTT_Publish sensor = Adafruit_MQTT_Publish(&mqtt, \"topic/sensor\");\n\n/*************************** Sketch Code ************************************/\n\nvoid MQTT_connect();\n\n// Sensor\nVL6180X vl6180x;\n\nvoid setup() {\n  Serial.begin(115200);\n\n  // 15 pin \u3092 HIGH \u306b\u3059\u308b\uff08Wio Node \u3092 Arduino \u5316\u3057\u305f\u6642\u306f\u5fc5\u305a\u5fc5\u8981\uff09\n  pinMode(15, OUTPUT);\n  digitalWrite(15,HIGH);\n\n  delay(10);\n\n  // Connect to WiFi access point.\n  Serial.println(); Serial.println();\n  Serial.print(\"Connecting to \");\n  Serial.println(WLAN_SSID);\n\n  WiFi.begin(WLAN_SSID, WLAN_PASS);\n  while (WiFi.status() != WL_CONNECTED) {\n    delay(500);\n    Serial.print(\".\");\n  }\n  Serial.println();\n\n  Serial.println(\"WiFi connected\");\n  Serial.println(\"IP address: \"); Serial.println(WiFi.localIP());\n\n  /* \n   * Sensor \u521d\u671f\u5316 \n   */\n  Wire.begin();\n  vl6180x.init();\n  vl6180x.configureDefault();\n\n  // Reduce range max convergence time and ALS integration\n  // time to 30 ms and 50 ms, respectively, to allow 10 Hz\n  // operation (as suggested by Table 6 (\"Interleaved mode\n  // limits (10 Hz operation)\") in the datasheet).\n  vl6180x.writeReg(VL6180X::SYSRANGE__MAX_CONVERGENCE_TIME, 30);\n  vl6180x.writeReg16Bit(VL6180X::SYSALS__INTEGRATION_PERIOD, 50);\n  vl6180x.setTimeout(500);\n\n   // stop continuous mode if already active\n  vl6180x.stopContinuous();\n  // in case stopContinuous() triggered a single-shot\n  // measurement, wait for it to complete\n  delay(300);\n  // start interleaved continuous mode with period of 100 ms\n  vl6180x.startInterleavedContinuous(100);\n}\n\nvoid loop() {\n  // MQTT \u30b5\u30fc\u30d0\u3078\u63a5\u7d9a\n  MQTT_connect();\n\n  /* \n   * \u30bb\u30f3\u30b5\u304b\u3089\u5024\u3092\u53d6\u5f97 \n   */\n  // ambient light measurement\n  uint16_t ambient = vl6180x.readAmbientContinuous();\n  bool ambientTimeout = vl6180x.timeoutOccurred();\n\n  // distance\n  uint16_t distance = vl6180x.readRangeContinuousMillimeters();\n  bool diatanceTimeout = vl6180x.timeoutOccurred();\n\n  /* \n   * \u30e1\u30c3\u30bb\u30fc\u30b8\u751f\u6210 \n   * {\n   *   id: \u30c7\u30d0\u30a4\u30b9ID,\n   *   sensor: {\n   *     ambient:  \u74b0\u5883\u5149,\n   *     distance: \u8ddd\u96e2 mm\n   *   }\n   * }\n   */\n  String json = \"{\";\n  json += \"\\\"id\\\":\" + String(DEVICE_ID) + \",\";\n  json += \"\\\"sensor\\\": {\";\n\n  // ambient light measurement\n  json += \"\\\"ambient\\\":\";\n  if (!ambientTimeout) {\n    json += ambient;\n  }\n  else {\n    json += -1;\n  }\n  json += \",\";\n\n  // distance  \n  json += \"\\\"distance\\\":\";\n  if (!diatanceTimeout) {\n    json += distance;\n  }\n  else {\n    json += -1;\n  }\n\n  json += \"}}\";\n\n  Serial.print(json);\n\n  // publish!\n  if (! sensor.publish(const_cast<char*>(json.c_str()))) {\n    Serial.print(F(\"    Failed\"));\n  }\n  Serial.println();\n\n  delay(200);\n}\n\n// Function to connect and reconnect as necessary to the MQTT server.\n// Should be called in the loop function and it will take care if connecting.\nvoid MQTT_connect() {\n  int8_t ret;\n\n  // Stop if already connected.\n  if (mqtt.connected()) {\n    return;\n  }\n\n  Serial.print(\"Connecting to MQTT... \");\n\n  uint8_t retries = 3;\n  while ((ret = mqtt.connect()) != 0) { // connect will return 0 for connected\n       Serial.println(mqtt.connectErrorString(ret));\n       Serial.println(\"Retrying MQTT connection in 5 seconds...\");\n       mqtt.disconnect();\n       delay(5000);  // wait 5 seconds\n       retries--;\n       if (retries == 0) {\n         // basically die and wait for WDT to reset me\n         while (1);\n       }\n  }\n  Serial.println(\"MQTT Connected!\");\n}\n\n\uff11\u70b9\u3060\u3051 Wio Node \u3092 Arduino \u5316\u3057\u305f\u3068\u304d\u306b\u6ce8\u610f\u70b9\u304c\u3042\u308a\u307e\u3059\u3002\n15 Pin \u3092 HIGH \u306b\u3057\u306a\u3044\u3068\u63a5\u7d9a\u3057\u305f\u30bb\u30f3\u30b5\u304c\u4f7f\u7528\u3067\u304d\u307e\u305b\u3093\u3067\u3057\u305f\u3002\n// 15 pin \u3092 HIGH \u306b\u3059\u308b\uff08Wio Node \u3092 Arduino \u5316\u3057\u305f\u6642\u306f\u5fc5\u305a\u5fc5\u8981\uff09\npinMode(15, OUTPUT);\ndigitalWrite(15, HIGH);\n\n\n\u52d5\u4f5c\u78ba\u8a8d\n\u30bb\u30f3\u30b5\u304b\u3089\u306f \u74b0\u5883\u5149 \u3068 \u8ddd\u96e2 \u3092\u9001\u4fe1\u3057\u307e\u3057\u305f\u304c\u3001\u753b\u9762\u306b\u306f\u8ddd\u96e2\u306e\u307f\u3092\u8868\u793a\u3057\u307e\u3057\u305f\u3002\n\u7bb1\u3068\u30bb\u30f3\u30b5\u306e\u8ddd\u96e2\u304c\u8fd1\u3044\u3068\u5186\u304c\u5927\u304d\u304f\u306a\u308a\u307e\u3059\u3002\nWebsocket \u3092\u4f7f\u7528\u3057\u305f\u306e\u3067\u3001\u307b\u307c\u540c\u6642\u306b\u5024\u304c\u66f4\u65b0\u3055\u308c\u308b\u306f\u305a\u3067\u3059\u304c\u3002\u3002\u3002\n\n\u30b9\u30de\u30fc\u30c8\u30d5\u30a9\u30f3\u304c\u3061\u3087\u3063\u3068\u9045\u3044\u3067\u3059\u306d\u3047\u3002\n\u901a\u5e38\u306f \u5909\u5316\u304c\u3042\u3063\u305f\u3068\u304d \u3068\u304b\u3001\u95be\u5024\u3092\u8d85\u3048\u305f\u3068\u304d \u3060\u3051\u901a\u77e5\u3084\u753b\u9762\u66f4\u65b0\u3059\u308b\u3068\u601d\u3046\u306e\u3067\u3001\n\u307e\u3063\u305f\u304f\u554f\u984c\u306a\u3044\u3068\u601d\u3044\u307e\u3059\u3002\n\n\u307e\u3068\u3081\nWio Node \u3082 Arduino \u5316\u3057\u3066\u3057\u307e\u3048\u3070\u8272\u3005\u3067\u304d\u307e\u3059\u306d\u3002\n\u5024\u6bb5\u3082\u5b89\u3044\u3057\u3001ESP8266 \u3092\u642d\u8f09\u3057\u3066\u3044\u308b\u306e\u3067\u624b\u8efd\u306b\u958b\u767a\u3067\u304d\u307e\u3059\u3002\nMQTT \u3067\u306e Pub/Sub \u3082\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u4f7f\u3048\u3070\u7c21\u5358\u3067\u3059\u3002\n\u305f\u3060\u3001\u30bb\u30ad\u30e5\u30ea\u30c6\u30a3\u9762\u3084\u30b5\u30fc\u30d3\u30b9\u54c1\u8cea\u306a\u3069\u3092\u3061\u3083\u3093\u3068\u3084\u308d\u3046\u3068\u601d\u3063\u305f\u3089\u3001\n\u3082\u3063\u3068\u8abf\u3079\u306a\u3044\u3068\u30c0\u30e1\u3060\u306a\u3068\u601d\u3044\u307e\u3057\u305f\u3002\uff08\u4ed6\u306e\u30e9\u30a4\u30d6\u30e9\u30ea\u306e\u65b9\u304c\u3044\u3044\u304b\u3082\uff09\n\u3067\u3082 MQTT + Node-RED \u306f\u7d50\u69cb\u4f7f\u3044\u3084\u3059\u3044\u306a\u3041\u3068\u601d\u3063\u305f\u306e\u3067\u3001\u4eca\u5f8c\u3082\u4f7f\u3063\u3066\u307f\u308b\u3068\u601d\u3044\u307e\u3059\u3002\n\u5c0f\u578b Wi-Fi \u958b\u767a\u30dc\u30fc\u30c9 Wio Node \u3068 MQTT \u3067 Publish/Subscribe \u3057\u3066\u307f\u307e\u3057\u305f\u3002\n\n\u524d\u56de\u306e[\u300c\u306f\u3058\u3081\u3066\u306e Wio Node - \u8a2d\u5b9a\u304b\u3089Node-RED\u3067\u5236\u5fa1\u307e\u3067\u300d](http://qiita.com/hira3/items/8d34335479380dd313d9)\u3067 Wio Node \u3092\u8a66\u3057\u307e\u3057\u305f\u304c\u3001\n\u4eca\u56de\u306f\u305d\u306e\u7d9a\u304d\u3067\u3059\u3002\n\nWio Node \u306f\u3001\u63a5\u7d9a\u3059\u308bGrove\u30e2\u30b8\u30e5\u30fc\u30eb\u3092\u30e2\u30d0\u30a4\u30eb\u30a2\u30d7\u30ea\u3067\u8a2d\u5b9a\u3057\u307e\u3059\u304c\u3001\n\u305d\u308c\u3060\u3068 MQTT \u4f7f\u3048\u306a\u3044\u3057\u3001\u63a5\u7d9a\u3067\u304d\u308b Grove \u30e2\u30b8\u30e5\u30fc\u30eb\u3082\u9650\u3089\u308c\u3066\u3057\u307e\u3044\u307e\u3059\u3002\n\u306a\u306e\u3067\u3001\u4eca\u56de\u306f Wio Node \u3092 Arduino \u5316\u3057\u3066 MQTT \u3057\u307e\u3059\u3002\n\n# \u69cb\u6210\nWio Node \u2192 MQTT Broker \u2192 Node-RED \u2192 Browser\n![system.png](https://qiita-image-store.s3.amazonaws.com/0/134613/7e113f61-83e8-19a5-70a1-c9ff8aeb699e.png)\n\n\n\u3068\u308a\u3042\u3048\u305a MQTT Broker \u3068 Node-RED \u306f Mac \u3067\u52d5\u304b\u3057\u307e\u3059\u3002\n\u4f7f\u7528\u3057\u305f\u30bb\u30f3\u30b5\u306f [VL6180X \u8d64\u5916\u7dda\u8fd1\u63a5\u8ddd\u96e2\u30bb\u30f3\u30b5\u30e2\u30b8\u30e5\u30fc\u30eb](http://ssci.to/2518) \u3067\u3059\u3002\n\n# MQTT Broker\nMQTT Broker \u306f\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u304c\u7c21\u5358\u306a [Mosquitto](https://mosquitto.org) \u3092\u4f7f\u3044\u307e\u3059\u3002\nMac \u3067\u306f Homebrew \u3067\u3001\u3042\u3063\u3068\u3044\u3046\u9593\u306b\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3067\u304d\u307e\u3059\u3002\n\n```bash\n$ brew install mosquitto\n```\n\n## MQTT \u306e\u52d5\u4f5c\u78ba\u8a8d\n\u4e00\u7dd2\u306b\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3055\u308c\u305f MQTT \u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u3092\u4f7f\u3063\u3066\u52d5\u4f5c\u78ba\u8a8d\u3057\u3066\u307f\u307e\u3059\u3002\n\n\uff11\uff0eMQTT Broker \u306e\u8d77\u52d5 \uff08\u30bf\u30fc\u30df\u30ca\u30eb #1\uff09\n\n```bash\n$ /usr/local/sbin/mosquitto \n1487245872: mosquitto version 1.4.10 (build date 2016-12-24 19:38:46-0800) starting\n1487245872: Using default config.\n1487245872: Opening ipv4 listen socket on port 1883.\n1487245872: Opening ipv6 listen socket on port 1883.\n```\n\n\uff12\uff0eSubscriber \uff08\u30bf\u30fc\u30df\u30ca\u30eb #2\uff09\n\u30c8\u30d4\u30c3\u30af **topic/test**  \u3092\u8cfc\u8aad\n\n```bash\n$ mosquitto_sub -t \"topic/test\"\n```\n\n\uff13\uff0ePublisher \uff08\u30bf\u30fc\u30df\u30ca\u30eb #3\uff09\n\u30c8\u30d4\u30c3\u30af **topic/test**  \u306b\u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u767a\u884c\n\n```bash\n$ mosquitto_pub -t \"topic/test\" -m \"Hello mosquitto\"\n```\n\n\uff14\uff0eSubscriber \uff08\u30bf\u30fc\u30df\u30ca\u30eb #2\uff09\nPublisher \u304c\u767a\u884c\u3057\u305f\u30e1\u30c3\u30bb\u30fc\u30b8\uff08**Hello mosquitto**\uff09\u304c\u3001Subscriber\uff08\u30bf\u30fc\u30df\u30ca\u30eb #2\uff09 \u306b\u8868\u793a\u3055\u308c\u308c\u3070\u6210\u529f\u3067\u3059\u3002\n\n```bash\n$ mosquitto_sub -t \"topic/test\"\nHello mosquitto\n```\n\n# Node-RED\n[Node-RED \u306e\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb](https://nodered.jp/docs/getting-started/installation)\u3082\u3068\u3066\u3082\u7c21\u5358\u3067\u3059\u3002\n\n```bash\n$ sudo npm install -g --unsafe-perm node-red\n```\n\n\u4eca\u56de\u306e\u30d5\u30ed\u30fc\u306f\u3068\u3066\u3082\u30b7\u30f3\u30d7\u30eb\u3067\u3059\u3002\n\u30c7\u30fc\u30bf\u3092 MQTT Broker \u304b\u3089\u53d7\u4fe1\u3057\u3066\u3001Websocket \u3067\u9001\u4fe1\u3059\u308b\u3060\u3051\u3067\u3059\u3002\n\n![nodered.png](https://qiita-image-store.s3.amazonaws.com/0/134613/3e74bfc2-473a-b541-8ff1-5b2e6f604868.png)\n\n\u4eca\u56de\u306f Function \u3067\u4f55\u3082\u884c\u3063\u3066\u3044\u307e\u305b\u3093\u304c\u3001\u30c7\u30fc\u30bf\u306e\u52a0\u5de5\u3084\u30d5\u30a3\u30eb\u30bf\u30ea\u30f3\u30b0\u306a\u3069\u3092\u3059\u308b\u3064\u3082\u308a\u3067\u3059\u3002\n\n# Wio Node\n## Arduino \u5316\nWio Node \u3092 Arduino \u5316\u3059\u308b\u306b\u306f USB\u30b7\u30ea\u30a2\u30eb\u5909\u63db\u30a2\u30c0\u30d7\u30bf\u30fc\u304c\u5fc5\u8981\u3067\u3059\u3002\n\u79c1\u306f [FTDI USB\u30b7\u30ea\u30a2\u30eb\u5909\u63db\u30a2\u30c0\u30d7\u30bf\u30fc Rev.2](http://ssci.to/2782) \u3092\u4f7f\u7528\u3057\u307e\u3057\u305f\u3002\n\nArduino \u5316\u3059\u308b\u65b9\u6cd5\u306f[\u3053\u3061\u3089\u306e\u30d6\u30ed\u30b0](http://dev-moyashi.hatenablog.com/entry/2016/09/08/185933)\u3067\u8a73\u3057\u304f\u8aac\u660e\u3055\u308c\u3066\u3044\u307e\u3059\u306e\u3067\u52a9\u304b\u308a\u307e\u3057\u305f\u3002\n\n## MQTT \u30e9\u30a4\u30d6\u30e9\u30ea\nWio Node \u306f ESP8266 \u3092\u642d\u8f09\u3057\u3066\u3044\u308b\u306e\u3067\u3001\u3053\u308c\u306b\u5bfe\u5fdc\u3057\u3066\u3044\u3066\u7c21\u5358\u306b\u5229\u7528\u3067\u304d\u308b [Adafruit MQTT Library](https://github.com/adafruit/Adafruit_MQTT_Library) \u3092Arduino IDE \u306b\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3057\u307e\u3059\u3002\n\n\u300c\u30b9\u30b1\u30c3\u30c1\u300d\uff1e\u300c\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u30a4\u30f3\u30af\u30eb\u30fc\u30c9\u300d\uff1e\u300c\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u7ba1\u7406\u2026\u300d\u3067 **Adafruit MQTT Library** \u3092\u691c\u7d22\u3057\u3066\u6700\u65b0\u7248\uff080.17.0\uff09\u3092\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3057\u307e\u3057\u305f\u3002\n\n## \u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\nAdafruit MQTT Library \u306e\u30b5\u30f3\u30d7\u30eb\u30b9\u30b1\u30c3\u30c1(mqtt_esp8266)\u3092\u30d9\u30fc\u30b9\u306b\u3057\u307e\u3057\u305f\u3002\n\u30b3\u30fc\u30c9\u3092\u8f09\u305b\u3061\u3083\u3044\u307e\u3059\u3002\n\n```c\n#include <ESP8266WiFi.h>\n#include <Wire.h>\n#include <VL6180X.h>\n#include \"Adafruit_MQTT.h\"\n#include \"Adafruit_MQTT_Client.h\"\n\n/************************* WiFi Access Point *********************************/\n\n#define WLAN_SSID       \"...your SSID...\"\n#define WLAN_PASS       \"...your password...\"\n\n/************************* Adafruit.io Setup *********************************/\n\n#define MQTT_SERVER      \"xxx.xxx.xxx.xxx\"\n#define MQTT_SERVERPORT  1883                   // use 8883 for SSL\n#define DEVICE_ID        1\n\n/************ Global State (you don't need to change this!) ******************/\n\n// Create an ESP8266 WiFiClient class to connect to the MQTT server.\nWiFiClient client;\n// or... use WiFiFlientSecure for SSL\n//WiFiClientSecure client;\n\n// Setup the MQTT client class by passing in the WiFi client and MQTT server.\nAdafruit_MQTT_Client mqtt(&client, MQTT_SERVER, MQTT_SERVERPORT);\n\n/****************************** topic ***************************************/\n\n// \u30bb\u30f3\u30b5\u306e\u5024\u3092\u767a\u884c\u3059\u308b\u305f\u3081\u306e\u30c8\u30d4\u30c3\u30af\u3092\u8a2d\u5b9a\nAdafruit_MQTT_Publish sensor = Adafruit_MQTT_Publish(&mqtt, \"topic/sensor\");\n\n/*************************** Sketch Code ************************************/\n\nvoid MQTT_connect();\n\n// Sensor\nVL6180X vl6180x;\n\nvoid setup() {\n  Serial.begin(115200);\n\n  // 15 pin \u3092 HIGH \u306b\u3059\u308b\uff08Wio Node \u3092 Arduino \u5316\u3057\u305f\u6642\u306f\u5fc5\u305a\u5fc5\u8981\uff09\n  pinMode(15, OUTPUT);\n  digitalWrite(15,HIGH);\n  \n  delay(10);\n\n  // Connect to WiFi access point.\n  Serial.println(); Serial.println();\n  Serial.print(\"Connecting to \");\n  Serial.println(WLAN_SSID);\n\n  WiFi.begin(WLAN_SSID, WLAN_PASS);\n  while (WiFi.status() != WL_CONNECTED) {\n    delay(500);\n    Serial.print(\".\");\n  }\n  Serial.println();\n\n  Serial.println(\"WiFi connected\");\n  Serial.println(\"IP address: \"); Serial.println(WiFi.localIP());\n\n  /* \n   * Sensor \u521d\u671f\u5316 \n   */\n  Wire.begin();\n  vl6180x.init();\n  vl6180x.configureDefault();\n\n  // Reduce range max convergence time and ALS integration\n  // time to 30 ms and 50 ms, respectively, to allow 10 Hz\n  // operation (as suggested by Table 6 (\"Interleaved mode\n  // limits (10 Hz operation)\") in the datasheet).\n  vl6180x.writeReg(VL6180X::SYSRANGE__MAX_CONVERGENCE_TIME, 30);\n  vl6180x.writeReg16Bit(VL6180X::SYSALS__INTEGRATION_PERIOD, 50);\n  vl6180x.setTimeout(500);\n\n   // stop continuous mode if already active\n  vl6180x.stopContinuous();\n  // in case stopContinuous() triggered a single-shot\n  // measurement, wait for it to complete\n  delay(300);\n  // start interleaved continuous mode with period of 100 ms\n  vl6180x.startInterleavedContinuous(100);\n}\n\nvoid loop() {\n  // MQTT \u30b5\u30fc\u30d0\u3078\u63a5\u7d9a\n  MQTT_connect();\n  \n  /* \n   * \u30bb\u30f3\u30b5\u304b\u3089\u5024\u3092\u53d6\u5f97 \n   */\n  // ambient light measurement\n  uint16_t ambient = vl6180x.readAmbientContinuous();\n  bool ambientTimeout = vl6180x.timeoutOccurred();\n\n  // distance\n  uint16_t distance = vl6180x.readRangeContinuousMillimeters();\n  bool diatanceTimeout = vl6180x.timeoutOccurred();\n\n  /* \n   * \u30e1\u30c3\u30bb\u30fc\u30b8\u751f\u6210 \n   * {\n   *   id: \u30c7\u30d0\u30a4\u30b9ID,\n   *   sensor: {\n   *     ambient:  \u74b0\u5883\u5149,\n   *     distance: \u8ddd\u96e2 mm\n   *   }\n   * }\n   */\n  String json = \"{\";\n  json += \"\\\"id\\\":\" + String(DEVICE_ID) + \",\";\n  json += \"\\\"sensor\\\": {\";\n\n  // ambient light measurement\n  json += \"\\\"ambient\\\":\";\n  if (!ambientTimeout) {\n    json += ambient;\n  }\n  else {\n    json += -1;\n  }\n  json += \",\";\n\n  // distance  \n  json += \"\\\"distance\\\":\";\n  if (!diatanceTimeout) {\n    json += distance;\n  }\n  else {\n    json += -1;\n  }\n\n  json += \"}}\";\n\n  Serial.print(json);\n\n  // publish!\n  if (! sensor.publish(const_cast<char*>(json.c_str()))) {\n    Serial.print(F(\"    Failed\"));\n  }\n  Serial.println();\n\n  delay(200);\n}\n\n// Function to connect and reconnect as necessary to the MQTT server.\n// Should be called in the loop function and it will take care if connecting.\nvoid MQTT_connect() {\n  int8_t ret;\n\n  // Stop if already connected.\n  if (mqtt.connected()) {\n    return;\n  }\n\n  Serial.print(\"Connecting to MQTT... \");\n\n  uint8_t retries = 3;\n  while ((ret = mqtt.connect()) != 0) { // connect will return 0 for connected\n       Serial.println(mqtt.connectErrorString(ret));\n       Serial.println(\"Retrying MQTT connection in 5 seconds...\");\n       mqtt.disconnect();\n       delay(5000);  // wait 5 seconds\n       retries--;\n       if (retries == 0) {\n         // basically die and wait for WDT to reset me\n         while (1);\n       }\n  }\n  Serial.println(\"MQTT Connected!\");\n}\n```\n\n**\uff11\u70b9\u3060\u3051 Wio Node \u3092 Arduino \u5316\u3057\u305f\u3068\u304d\u306b\u6ce8\u610f\u70b9\u304c\u3042\u308a\u307e\u3059\u3002\n15 Pin \u3092 HIGH \u306b\u3057\u306a\u3044\u3068\u63a5\u7d9a\u3057\u305f\u30bb\u30f3\u30b5\u304c\u4f7f\u7528\u3067\u304d\u307e\u305b\u3093\u3067\u3057\u305f\u3002**\n\n```c\n// 15 pin \u3092 HIGH \u306b\u3059\u308b\uff08Wio Node \u3092 Arduino \u5316\u3057\u305f\u6642\u306f\u5fc5\u305a\u5fc5\u8981\uff09\npinMode(15, OUTPUT);\ndigitalWrite(15, HIGH);\n```\n\n# \u52d5\u4f5c\u78ba\u8a8d\n\u30bb\u30f3\u30b5\u304b\u3089\u306f **\u74b0\u5883\u5149** \u3068 **\u8ddd\u96e2** \u3092\u9001\u4fe1\u3057\u307e\u3057\u305f\u304c\u3001\u753b\u9762\u306b\u306f\u8ddd\u96e2\u306e\u307f\u3092\u8868\u793a\u3057\u307e\u3057\u305f\u3002\n\u7bb1\u3068\u30bb\u30f3\u30b5\u306e\u8ddd\u96e2\u304c\u8fd1\u3044\u3068\u5186\u304c\u5927\u304d\u304f\u306a\u308a\u307e\u3059\u3002\nWebsocket \u3092\u4f7f\u7528\u3057\u305f\u306e\u3067\u3001\u307b\u307c\u540c\u6642\u306b\u5024\u304c\u66f4\u65b0\u3055\u308c\u308b\u306f\u305a\u3067\u3059\u304c\u3002\u3002\u3002\n\n![08.gif](https://qiita-image-store.s3.amazonaws.com/0/134613/c0435c7d-77a8-f26c-a098-10b9934272f2.gif)\n\n\u30b9\u30de\u30fc\u30c8\u30d5\u30a9\u30f3\u304c\u3061\u3087\u3063\u3068\u9045\u3044\u3067\u3059\u306d\u3047\u3002\n\u901a\u5e38\u306f **\u5909\u5316\u304c\u3042\u3063\u305f\u3068\u304d** \u3068\u304b\u3001**\u95be\u5024\u3092\u8d85\u3048\u305f\u3068\u304d** \u3060\u3051\u901a\u77e5\u3084\u753b\u9762\u66f4\u65b0\u3059\u308b\u3068\u601d\u3046\u306e\u3067\u3001\n\u307e\u3063\u305f\u304f\u554f\u984c\u306a\u3044\u3068\u601d\u3044\u307e\u3059\u3002\n\n# \u307e\u3068\u3081\nWio Node \u3082 Arduino \u5316\u3057\u3066\u3057\u307e\u3048\u3070\u8272\u3005\u3067\u304d\u307e\u3059\u306d\u3002\n\u5024\u6bb5\u3082\u5b89\u3044\u3057\u3001ESP8266 \u3092\u642d\u8f09\u3057\u3066\u3044\u308b\u306e\u3067\u624b\u8efd\u306b\u958b\u767a\u3067\u304d\u307e\u3059\u3002\nMQTT \u3067\u306e Pub/Sub \u3082\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u4f7f\u3048\u3070\u7c21\u5358\u3067\u3059\u3002\n\u305f\u3060\u3001\u30bb\u30ad\u30e5\u30ea\u30c6\u30a3\u9762\u3084\u30b5\u30fc\u30d3\u30b9\u54c1\u8cea\u306a\u3069\u3092\u3061\u3083\u3093\u3068\u3084\u308d\u3046\u3068\u601d\u3063\u305f\u3089\u3001\n\u3082\u3063\u3068\u8abf\u3079\u306a\u3044\u3068\u30c0\u30e1\u3060\u306a\u3068\u601d\u3044\u307e\u3057\u305f\u3002\uff08\u4ed6\u306e\u30e9\u30a4\u30d6\u30e9\u30ea\u306e\u65b9\u304c\u3044\u3044\u304b\u3082\uff09\n\n\u3067\u3082 MQTT + Node-RED \u306f\u7d50\u69cb\u4f7f\u3044\u3084\u3059\u3044\u306a\u3041\u3068\u601d\u3063\u305f\u306e\u3067\u3001\u4eca\u5f8c\u3082\u4f7f\u3063\u3066\u307f\u308b\u3068\u601d\u3044\u307e\u3059\u3002\n", "tags": ["IoT", "WioNode", "mqtt", "node-red", "websocket"]}