{"context": " More than 1 year has passed since last update.\n\n\u6982\u8981\nRubyKaigi2015\u3067\u3001John Lin\u3055\u3093\u3068\u3044\u3046\u65b9\u304c\u3001ErRuby\u3068\u3044\u3046ErlangVM\u4e0a\u3067\u52d5\u304fRuby\u5b9f\u88c5\u306eLT\u767a\u8868\u3092\u3055\u308c\u3066\u307e\u3057\u305f\u3002\u8208\u5473\u6df1\u3044\u5185\u5bb9\u3067\u3057\u305f\u306e\u3067\u305d\u306e\u7d39\u4ecb\u3092\u3057\u307e\u3059\u3002\n\n\u57fa\u672c\u60c5\u5831\n\u3056\u3063\u304f\u308a\u3068\u8a00\u3046\u3068\u3001ErlangVM\u4e0a\u3067\u52d5\u4f5c\u3059\u308bErRuby\u3068\u3044\u3046Ruby\u5b9f\u88c5\u3092\u4f5c\u3063\u305f(\u4f5c\u3063\u3066\u3044\u308b\u3088)\u3068\u3044\u3046\u5185\u5bb9\u3067\u3059\u3002\nLT\u306e\u30b9\u30e9\u30a4\u30c9\u306f\u4ee5\u4e0b\u306e\u30ea\u30f3\u30af\u304b\u3089\u3069\u3046\u305e\u3002\nWhat I learned by implementing a Ruby VM in Erlang\nGithub\u306e\u30ea\u30dd\u30b8\u30c8\u30ea\u306f\u4ee5\u4e0b\u3067\u3059\u3002\nerruby\n\u76ee\u6a19\u306fRubySpec\u3092\u901a\u3059\u4e8b\u3060\u305d\u3046\u3067\u3059\u3002\n\n\u30a2\u30a4\u30c7\u30a2\n\u300cErlang\u306eProcess\u3092Ruby\u306eObject\u3068\u3057\u3066\u6271\u3048\u3070\u826f\u3044\u3093\u3058\u3083\u306d?\u300d\u3068\u306e\u4e8b\u3002\n\n\n\n\nErlang Process\nRuby Object\n\n\n\n\n\u30b3\u30b9\u30c8\n\u4f4e\u3044,max=134,217,727\n\u4f4e\u3044,\u5168\u3066\u304cObject\n\n\n\u901a\u4fe1\u65b9\u5f0f\n\u975e\u540c\u671f\u901a\u4fe1\n\u540c\u671f\u901a\u4fe1\n\n\n\n\nexample\n\u7c21\u5358\u3067\u3059\u304cRuby\u3068Erlang\u306e\u95a2\u6570\u547c\u3073\u51fa\u3057\u306e\u6bd4\u8f03\u306b\u306a\u308a\u307e\u3059\u3002\nRuby\u304c how_is_sushi? \u3092\u540c\u671f\u547c\u3073\u51fa\u3057\u3057\u3066\u3044\u308b\u306e\u306b\u5bfe\u3057\u3066\u3001Erlang\u306f\u975e\u540c\u671f\u3067\u547c\u3073\u51fa\u3057\u3066\u3044\u307e\u3059\u3002\n\nruby_example\nclass Alice\n  def chat_with_bob\n    res = bob.how_is_sushi? # 1.invoke\u3057\u3066\u7d50\u679c\u3092\u5f85\u3064 3.\u7d50\u679c\u3092\u53d7\u3051\u53d6\u308b\n  end\nend\n\nclass Bob\n  def how_is_sushi? # 2.Idle\u3067\u5f85\u6a5f\u3001message\u3092\u53d7\u3051\u305f\u3089\u3059\u3057\u3092\u8fd4\u3059\u3001\u8fd4\u3057\u305f\u3089Idle\n    \"\u3059\u3057\u308f\u3046\u307e\u3044\"\n  end\nend\n\n\n\nerlang_example\nchat_with_bob(Bob) ->\n  BoB ! {self(), 'how_is_sushi?'}, % 1.BoB\u306bmessage\u3092\u9001\u4fe1\n  receive % 2.\u8fd4\u4fe1\u3092\u5f85\u3064\n    {ok, Message} -> Message % 6.\u8fd4\u4fe1\u3092\u53d7\u3051\u53d6\u308b\n  end.\n\nbob_loop(State) ->\n  receive\n    {Sender, 'how_is_sushi?'} -> % 3.message\u3092\u53d7\u3051\u53d6\u308b\n      Sender ! {ok, \"\u3059\u3057\u308f\u3046\u307e\u3044\"} % 4.\u8fd4\u4fe1\u3059\u308b\n  end,\n  bob_loop(State). %5.\u5f85\u6a5f\n\n\n\nRuby Object in Erlang\nObject\u306b\u5bfe\u3059\u308b\u30e1\u30bd\u30c3\u30c9\u547c\u3073\u51fa\u3057\u306f {send, <\u81ea\u8eab\u306eprocess id>, ...} \u306e\u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u9001\u4fe1\u3057\u3001\u305d\u306e\u8fd4\u5374\u306f {method_result, <\u81ea\u5206\u306eprocess id>, ...} \u306e\u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u9001\u4fe1\u3059\u308b\u4e8b\u3068\u3059\u308b\u3068\u3001\u4ee5\u4e0b\u306e\u69d8\u306b\u306a\u308a\u307e\u3059\u3002\n\nalice\u304b\u3089bob\u3078\u306e\u547c\u3073\u51fa\u3057\nalice -> {send, , 'how_is_sushi?', []} -> bob\n\nbob\u304b\u3089alice\u3078\u306e\u8fd4\u5374\nalice <- {method_result, , \"\u3059\u3057\u308f\u3046\u307e\u3044\"} <- bob\n\nself call method \u306e\u554f\u984c\n\u4e00\u898b\u4e0a\u624b\u304f\u3044\u3063\u305f\u69d8\u306b\u898b\u3048\u307e\u3059\u304c\u3001\u81ea\u8eab\u306b\u5bfe\u3059\u308b\u30e1\u30bd\u30c3\u30c9\u547c\u3073\u51fa\u3057\u3000bob.sushi_score \u306e\u5834\u5408\u306b\u554f\u984c\u3068\u306a\u308a\u307e\u3059\u3002\n\nruby_example\nclass Alice\n  def chat_with_bob\n    res = bob.is_sushi_good?\n  end\nend\n\nclass Bob\n  def is_sushi_good?\n    sushi_score > 90\n  end\n\n  def sushi_score\n    9001\n  end\nend\n\n\n\nerlang_example\nchat_with_bob(Bob) ->\n  Bob ! {self(), 'is_sushi_good?'}, % 1.Bob\u306b\u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u9001\u4fe1\n  receive % 2.Bob\u304b\u3089\u306e\u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u5f85\u3064\n    {ok, Message} -> Message\n  end.\n\nbob_loop(State) ->\n  receive\n    {Sender, 'is_sushi_good?'} -> % 3.\u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u53d7\u3051\u308b\n      (self() ! ({self(), sushi_score}), % 4.\u81ea\u5206\u81ea\u8eab(self)\u306b\u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u9001\u4fe1\n      receive {ok, Score} -> % 5.Bob\u304b\u3089\u306e\u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u5f85\u3061\u7d9a\u3051\u308b!!!\n        Sender ! {ok, Score > 90}\n      end;\n    {Sender, sushi_score} ->\n      Sender ! {ok, 9001}\n  end,\n  bob_loop(State).\n\n\n\u4e0a\u8a18\u306e sushi_score \u306e\u69d8\u306b\u3001\u81ea\u5206\u81ea\u8eab\u306b\u5bfe\u3057\u3066\u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u9001\u4fe1\u3057\u305f\u5834\u5408\u3001 %5 \u306e\u69d8\u306b\u81ea\u5206\u81ea\u8eab\u306e\u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u5f85\u3064\u4e8b\u306b\u306a\u308b\u306e\u3067\u3001\u3053\u306e\u5b9f\u88c5\u3067\u306f\u30c0\u30e1\u306a\u308f\u3051\u3067\u3059\u3002\n\nRuby Method in Erlang\n\u305d\u3053\u3067\u3069\u3046\u3059\u308b\u304b\u3068\u3044\u3046\u3068\u3001\u300cRuby\u306eMethodCall\u3082Erlang\u306eProcess\u306b\u3059\u308c\u3070\u826f\u3044\u300d\u3067\u3059\u3002\n\n\u547c\u3073\u51fa\u3057\u30a4\u30e1\u30fc\u30b8\nalice -> (spawn new process) -> {receiver, 'is_sushi_good?', arg, env, sender} -> (spawn new process) -> {receiver, sushi_score, arg, env, sender} -> ...\n\n\u5b9f\u88c5\u72b6\u6cc1\nErRuby\u306e\u5b9f\u88c5\u72b6\u6cc1\u3068\u3057\u3066\u306f\u3001\n- \u30af\u30e9\u30b9\u5b9a\u7fa9\n- \u30d6\u30ed\u30c3\u30af\u30fb\u30ed\u30fc\u30ab\u30eb\u5909\u6570\u3067\u306e\u30e1\u30bd\u30c3\u30c9\u306eeval\n\u3042\u305f\u308a\u307e\u3067\u3068\u306e\u4e8b\u3067\u3059\u3002\u591a\u5206\u306b\u5b9f\u9a13\u7684\u3067\u306f\u3042\u308a\u307e\u3059\u304c\u3001\u5b9f\u88c5\u7684\u306b\u306f\u306a\u304b\u306a\u304b\u9762\u767d\u305d\u3046\u3067\u3059\u3002\u8208\u5473\u306e\u3042\u308b\u65b9\u306f\u30b3\u30fc\u30c9\u3092\u8ffd\u3063\u3066\u307f\u3066\u306f\u3044\u304b\u304c\u3067\u3057\u3087\u3046\u304b\u3002\n\n\u305d\u306e\u4ed6\u306e\u5b9f\u88c5\u306b\u95a2\u3059\u308b\u60c5\u5831\nErlPort\u3092\u4f7f\u3063\u3066\u3001Erlang\u3068Ruby\u306e\u30d6\u30ea\u30c3\u30b8\u30f3\u30b0\u3092\u3057\u3066\u3044\u307e\u3059\u3002\n\u3053\u306eErlPort\u3092\u30e9\u30c3\u30d7\u3057\u305fgem\u304c erlport-ast_mapping \u3068\u306a\u308a\u307e\u3059\u3002\n\n\u307e\u3068\u3081\n\u4eca\u56de\u306eRubyKaigi\u3067\u306fErlang,Elixir,\u30a2\u30af\u30bf\u30fc\u30e2\u30c7\u30eb\u306a\u3069\u3001\u4e26\u884c\u6027\u306b\u95a2\u3059\u308b\u8a00\u53ca\u304c\u591a\u304f\u3042\u308a\u307e\u3057\u305f\u3002\n\u305d\u306e\u4e2d\u3067\u3082\u7279\u306b\u5370\u8c61\u306b\u6b8b\u3063\u305fErRuby\u306b\u3064\u3044\u3066\u7d39\u4ecb\u3057\u307e\u3057\u305f\u3002\n\u30b9\u30e9\u30a4\u30c9\u306b\u3082\u3042\u308a\u307e\u3059\u304c\u3001\u307e\u3060\u307e\u3060\u5b9f\u9a13\u6bb5\u968e\u306e\u3082\u306e\u306a\u306e\u3067\u5b9f\u7528\u306b\u306f\u7a0b\u9060\u3044\u3067\u3059\u304c\u3001\u9762\u767d\u3044\u30a2\u30a4\u30c7\u30a2\u306e\u30d7\u30ed\u30c0\u30af\u30c8\u306a\u306e\u3067\u3001\u4eca\u5f8c\u3082watch\u3057\u3066\u3044\u304d\u305f\u3044\u3068\u601d\u3044\u307e\u3059\u3002\n# \u6982\u8981\nRubyKaigi2015\u3067\u3001John Lin\u3055\u3093\u3068\u3044\u3046\u65b9\u304c\u3001ErRuby\u3068\u3044\u3046ErlangVM\u4e0a\u3067\u52d5\u304fRuby\u5b9f\u88c5\u306eLT\u767a\u8868\u3092\u3055\u308c\u3066\u307e\u3057\u305f\u3002\u8208\u5473\u6df1\u3044\u5185\u5bb9\u3067\u3057\u305f\u306e\u3067\u305d\u306e\u7d39\u4ecb\u3092\u3057\u307e\u3059\u3002\n\n# \u57fa\u672c\u60c5\u5831\n\u3056\u3063\u304f\u308a\u3068\u8a00\u3046\u3068\u3001ErlangVM\u4e0a\u3067\u52d5\u4f5c\u3059\u308bErRuby\u3068\u3044\u3046Ruby\u5b9f\u88c5\u3092\u4f5c\u3063\u305f(\u4f5c\u3063\u3066\u3044\u308b\u3088)\u3068\u3044\u3046\u5185\u5bb9\u3067\u3059\u3002\n\nLT\u306e\u30b9\u30e9\u30a4\u30c9\u306f\u4ee5\u4e0b\u306e\u30ea\u30f3\u30af\u304b\u3089\u3069\u3046\u305e\u3002\n[What I learned by implementing a Ruby VM in Erlang](https://speakerdeck.com/johnlinvc/what-i-learned-by-implementing-a-ruby-vm-in-erlang)\n\nGithub\u306e\u30ea\u30dd\u30b8\u30c8\u30ea\u306f\u4ee5\u4e0b\u3067\u3059\u3002\n[erruby](https://github.com/johnlinvc/erruby)\n\n\u76ee\u6a19\u306fRubySpec\u3092\u901a\u3059\u4e8b\u3060\u305d\u3046\u3067\u3059\u3002\n\n# \u30a2\u30a4\u30c7\u30a2\n\u300cErlang\u306eProcess\u3092Ruby\u306eObject\u3068\u3057\u3066\u6271\u3048\u3070\u826f\u3044\u3093\u3058\u3083\u306d?\u300d\u3068\u306e\u4e8b\u3002\n\n|       | Erlang Process    | Ruby Object    |\n|:-----:|:-----------------:|:--------------:|\n|\u30b3\u30b9\u30c8  |\u4f4e\u3044,max=134,217,727|\u4f4e\u3044,\u5168\u3066\u304cObject|\n|\u901a\u4fe1\u65b9\u5f0f|\u975e\u540c\u671f\u901a\u4fe1          |\u540c\u671f\u901a\u4fe1         |\n\n# example\n\u7c21\u5358\u3067\u3059\u304cRuby\u3068Erlang\u306e\u95a2\u6570\u547c\u3073\u51fa\u3057\u306e\u6bd4\u8f03\u306b\u306a\u308a\u307e\u3059\u3002\nRuby\u304c ``how_is_sushi?`` \u3092\u540c\u671f\u547c\u3073\u51fa\u3057\u3057\u3066\u3044\u308b\u306e\u306b\u5bfe\u3057\u3066\u3001Erlang\u306f\u975e\u540c\u671f\u3067\u547c\u3073\u51fa\u3057\u3066\u3044\u307e\u3059\u3002\n\n```rb:ruby_example\nclass Alice\n  def chat_with_bob\n    res = bob.how_is_sushi? # 1.invoke\u3057\u3066\u7d50\u679c\u3092\u5f85\u3064 3.\u7d50\u679c\u3092\u53d7\u3051\u53d6\u308b\n  end\nend\n\nclass Bob\n  def how_is_sushi? # 2.Idle\u3067\u5f85\u6a5f\u3001message\u3092\u53d7\u3051\u305f\u3089\u3059\u3057\u3092\u8fd4\u3059\u3001\u8fd4\u3057\u305f\u3089Idle\n    \"\u3059\u3057\u308f\u3046\u307e\u3044\"\n  end\nend\n```\n\n```erlang:erlang_example\nchat_with_bob(Bob) ->\n  BoB ! {self(), 'how_is_sushi?'}, % 1.BoB\u306bmessage\u3092\u9001\u4fe1\n  receive % 2.\u8fd4\u4fe1\u3092\u5f85\u3064\n    {ok, Message} -> Message % 6.\u8fd4\u4fe1\u3092\u53d7\u3051\u53d6\u308b\n  end.\n\nbob_loop(State) ->\n  receive\n    {Sender, 'how_is_sushi?'} -> % 3.message\u3092\u53d7\u3051\u53d6\u308b\n      Sender ! {ok, \"\u3059\u3057\u308f\u3046\u307e\u3044\"} % 4.\u8fd4\u4fe1\u3059\u308b\n  end,\n  bob_loop(State). %5.\u5f85\u6a5f\n```\n\n# Ruby Object in Erlang\nObject\u306b\u5bfe\u3059\u308b\u30e1\u30bd\u30c3\u30c9\u547c\u3073\u51fa\u3057\u306f ```{send, <\u81ea\u8eab\u306eprocess id>, ...}``` \u306e\u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u9001\u4fe1\u3057\u3001\u305d\u306e\u8fd4\u5374\u306f ```{method_result, <\u81ea\u5206\u306eprocess id>, ...}``` \u306e\u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u9001\u4fe1\u3059\u308b\u4e8b\u3068\u3059\u308b\u3068\u3001\u4ee5\u4e0b\u306e\u69d8\u306b\u306a\u308a\u307e\u3059\u3002\n\n### alice\u304b\u3089bob\u3078\u306e\u547c\u3073\u51fa\u3057\nalice -> {send, <alice's process id>, 'how_is_sushi?', []} -> bob\n\n### bob\u304b\u3089alice\u3078\u306e\u8fd4\u5374\nalice <- {method_result, <bob's process id>, \"\u3059\u3057\u308f\u3046\u307e\u3044\"} <- bob\n\n# self call method \u306e\u554f\u984c\n\u4e00\u898b\u4e0a\u624b\u304f\u3044\u3063\u305f\u69d8\u306b\u898b\u3048\u307e\u3059\u304c\u3001\u81ea\u8eab\u306b\u5bfe\u3059\u308b\u30e1\u30bd\u30c3\u30c9\u547c\u3073\u51fa\u3057\u3000```bob.sushi_score``` \u306e\u5834\u5408\u306b\u554f\u984c\u3068\u306a\u308a\u307e\u3059\u3002\n\n```rb:ruby_example\nclass Alice\n  def chat_with_bob\n    res = bob.is_sushi_good?\n  end\nend\n\nclass Bob\n  def is_sushi_good?\n    sushi_score > 90\n  end\n\n  def sushi_score\n    9001\n  end\nend\n```\n\n```erlang:erlang_example\nchat_with_bob(Bob) ->\n  Bob ! {self(), 'is_sushi_good?'}, % 1.Bob\u306b\u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u9001\u4fe1\n  receive % 2.Bob\u304b\u3089\u306e\u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u5f85\u3064\n    {ok, Message} -> Message\n  end.\n\nbob_loop(State) ->\n  receive\n    {Sender, 'is_sushi_good?'} -> % 3.\u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u53d7\u3051\u308b\n      (self() ! ({self(), sushi_score}), % 4.\u81ea\u5206\u81ea\u8eab(self)\u306b\u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u9001\u4fe1\n      receive {ok, Score} -> % 5.Bob\u304b\u3089\u306e\u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u5f85\u3061\u7d9a\u3051\u308b!!!\n        Sender ! {ok, Score > 90}\n      end;\n    {Sender, sushi_score} ->\n      Sender ! {ok, 9001}\n  end,\n  bob_loop(State).\n```\n\n\u4e0a\u8a18\u306e ```sushi_score``` \u306e\u69d8\u306b\u3001\u81ea\u5206\u81ea\u8eab\u306b\u5bfe\u3057\u3066\u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u9001\u4fe1\u3057\u305f\u5834\u5408\u3001 ```%5``` \u306e\u69d8\u306b\u81ea\u5206\u81ea\u8eab\u306e\u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u5f85\u3064\u4e8b\u306b\u306a\u308b\u306e\u3067\u3001\u3053\u306e\u5b9f\u88c5\u3067\u306f\u30c0\u30e1\u306a\u308f\u3051\u3067\u3059\u3002\n\n# Ruby Method in Erlang\n\u305d\u3053\u3067\u3069\u3046\u3059\u308b\u304b\u3068\u3044\u3046\u3068\u3001\u300cRuby\u306eMethodCall\u3082Erlang\u306eProcess\u306b\u3059\u308c\u3070\u826f\u3044\u300d\u3067\u3059\u3002\n\n### \u547c\u3073\u51fa\u3057\u30a4\u30e1\u30fc\u30b8\n\nalice -> (spawn new process) -> {receiver, 'is_sushi_good?', arg, env, sender} -> (spawn new process) -> {receiver, sushi_score, arg, env, sender} -> ...\n\n# \u5b9f\u88c5\u72b6\u6cc1\nErRuby\u306e\u5b9f\u88c5\u72b6\u6cc1\u3068\u3057\u3066\u306f\u3001\n- \u30af\u30e9\u30b9\u5b9a\u7fa9\n- \u30d6\u30ed\u30c3\u30af\u30fb\u30ed\u30fc\u30ab\u30eb\u5909\u6570\u3067\u306e\u30e1\u30bd\u30c3\u30c9\u306eeval\n\u3042\u305f\u308a\u307e\u3067\u3068\u306e\u4e8b\u3067\u3059\u3002\u591a\u5206\u306b\u5b9f\u9a13\u7684\u3067\u306f\u3042\u308a\u307e\u3059\u304c\u3001\u5b9f\u88c5\u7684\u306b\u306f\u306a\u304b\u306a\u304b\u9762\u767d\u305d\u3046\u3067\u3059\u3002\u8208\u5473\u306e\u3042\u308b\u65b9\u306f\u30b3\u30fc\u30c9\u3092\u8ffd\u3063\u3066\u307f\u3066\u306f\u3044\u304b\u304c\u3067\u3057\u3087\u3046\u304b\u3002\n\n# \u305d\u306e\u4ed6\u306e\u5b9f\u88c5\u306b\u95a2\u3059\u308b\u60c5\u5831\n[ErlPort](http://erlport.org)\u3092\u4f7f\u3063\u3066\u3001Erlang\u3068Ruby\u306e\u30d6\u30ea\u30c3\u30b8\u30f3\u30b0\u3092\u3057\u3066\u3044\u307e\u3059\u3002\n\u3053\u306eErlPort\u3092\u30e9\u30c3\u30d7\u3057\u305fgem\u304c [erlport-ast_mapping](https://github.com/johnlinvc/erlport-ast_mapping) \u3068\u306a\u308a\u307e\u3059\u3002\n\n# \u307e\u3068\u3081\n\u4eca\u56de\u306eRubyKaigi\u3067\u306fErlang,Elixir,\u30a2\u30af\u30bf\u30fc\u30e2\u30c7\u30eb\u306a\u3069\u3001\u4e26\u884c\u6027\u306b\u95a2\u3059\u308b\u8a00\u53ca\u304c\u591a\u304f\u3042\u308a\u307e\u3057\u305f\u3002\n\u305d\u306e\u4e2d\u3067\u3082\u7279\u306b\u5370\u8c61\u306b\u6b8b\u3063\u305fErRuby\u306b\u3064\u3044\u3066\u7d39\u4ecb\u3057\u307e\u3057\u305f\u3002\n\u30b9\u30e9\u30a4\u30c9\u306b\u3082\u3042\u308a\u307e\u3059\u304c\u3001\u307e\u3060\u307e\u3060\u5b9f\u9a13\u6bb5\u968e\u306e\u3082\u306e\u306a\u306e\u3067\u5b9f\u7528\u306b\u306f\u7a0b\u9060\u3044\u3067\u3059\u304c\u3001\u9762\u767d\u3044\u30a2\u30a4\u30c7\u30a2\u306e\u30d7\u30ed\u30c0\u30af\u30c8\u306a\u306e\u3067\u3001\u4eca\u5f8c\u3082watch\u3057\u3066\u3044\u304d\u305f\u3044\u3068\u601d\u3044\u307e\u3059\u3002\n", "tags": ["AdventCalendar2015", "Erlang", "Ruby"]}