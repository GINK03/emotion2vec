{"context": "\n\n\u306f\u3058\u3081\u306b\nBSD\u3084Linux\u306eglibc\u306b\u306ffts\u3068\u3044\u3046\u95a2\u6570\u7fa4\u304c\u3042\u308a\u307e\u3059\u3002\u3053\u308c\u306f\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u5185\u306e\u518d\u5e30\u7684\u306a\u30d5\u30a1\u30a4\u30eb\u5217\u6319\u3092\u9ad8\u901f\u306b\u884c\u3046\u95a2\u6570\u3067\u3001ls\u3084find\u306a\u3069\u306e\u5b9f\u88c5\u306b\u4f7f\u308f\u308c\u3066\u3044\u307e\u3059\u3002\nRust\u3067\u3053\u306e\u3088\u3046\u306a\u30d5\u30a1\u30a4\u30eb\u5217\u6319\u3092\u884c\u3046\u5834\u5408\u3001std::fs::readdir\u3067\u5b9f\u88c5\u3059\u308b\u304b\u3001\u65e2\u5b58\u306ewalkdir(\u3053\u308c\u3082\u5185\u90e8\u7684\u306b\u306freaddir\u3092\u4f7f\u3063\u3066\u3044\u308b\u3088\u3046\u3067\u3059)\u3092\u4f7f\u3046\u3053\u3068\u306b\u306a\u308a\u307e\u3059\u304c\u3001fts\u304c\u901f\u3044\u3089\u3057\u3044\u3068\u3044\u3046\u3053\u3068\u3067\u3001FFI\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u4f5c\u3063\u3066\u305d\u308c\u3092\u4f7f\u3063\u305fwalkdir\u76f8\u5f53\u306e\u5b9f\u88c5\u3092\u884c\u3044\u307e\u3057\u305f\u3002\n\u3061\u306a\u307f\u306bglibc\u306b\u4f9d\u5b58\u3059\u308b\u306e\u3067\u304a\u305d\u3089\u304fBSD(OSX\u542b\u3080)\u3068Linux\u9650\u5b9a\u3067\u3059\u3002Windows\u5bfe\u5fdc\u304c\u5fc5\u8981\u306a\u3089\u7d20\u76f4\u306bwalkdir\u3092\u4f7f\u3044\u307e\u3057\u3087\u3046\u3002\n\n\u30ea\u30f3\u30af\n\ncrates.io\n\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\n\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\n\n\n\u4f7f\u3044\u65b9\n\nCargo.toml\n[dependencies]\nfts = \"*\"\n\n\nwalkdir\u3068\u540c\u69d8\u306b\u30a4\u30c6\u30ec\u30fc\u30bf\u5b9f\u88c5\u3057\u3066\u3044\u308b\u306e\u3067for\u3067\u56de\u305b\u307e\u3059\u3002\nuse std::path::Path;\nuse fts::walkdir::{WalkDir, WalkDirConf}\n\nlet path = Path::new( \".\" );\nfor p in WalkDir::new( WalkDirConf::new( path ) ) {\n    println!( \"{:?}\", p.unwrap() );\n}\n\n\u30d5\u30a3\u30eb\u30bf\u3082\u51fa\u6765\u307e\u3059\u3002\nuse std::path::Path;\nuse fts::walkdir::{WalkDir, WalkDirConf}\n\nlet path = Path::new( \".\" );\nlet iter = WalkDir::new( WalkDirConf::new( path ) ).into_iter().filter_map( |x| x.ok() );\nfor p in iter.filter( |x| x.file_type().is_file() ) {\n    println!( \"{:?}\", p );\n}\n\nWalkDirConf\u306fBuilder\u306b\u306a\u3063\u3066\u3044\u3066\u3001\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u8a2d\u5b9a\u3067\u304d\u307e\u3059\u3002\u4ee5\u4e0b\u306econf1\u306e\u5834\u5408\u3001\u30b7\u30f3\u30dc\u30ea\u30c3\u30af\u30ea\u30f3\u30af\u3092\u8fbf\u308a\u3001\u304b\u3064\u30ea\u30f3\u30af\u5148\u304c\u5225\u30c7\u30d0\u30a4\u30b9\u3067\u3042\u3063\u3066\u3082\u8fbf\u308b\u8a2d\u5b9a\u306b\u306a\u308a\u307e\u3059\u3002conf2\u306fmetadata\u3092\u53d6\u5f97\u3057\u306a\u3044\u30aa\u30d7\u30b7\u30e7\u30f3\u3067\u3001\u305d\u306e\u5206\u9ad8\u901f\u306b\u306a\u308a\u307e\u3059\u3002\nse std::path::Path;\nuse fts::walkdir::{WalkDir, WalkDirConf}\n\nlet path = Path::new( \".\" );\nlet conf1 = WalkDirConf::new( path ).follow_symlink().cross_device();\nlet conf2 = WalkDirConf::new( path ).no_metadata();\n\nfor p in WalkDir::new( conf1 ) {\n    println!( \"{:?}\", p.unwrap() );\n}\nfor p in WalkDir::new( conf2 ) {\n    println!( \"{:?}\", p.unwrap() );\n}\n\n\n\n\u30d9\u30f3\u30c1\u30de\u30fc\u30af\ncargo bench\u306e\u7d50\u679c\u3067\u3059\u3002test fts_walkdir\u304c\u4eca\u56de\u5b9f\u88c5\u3057\u305f\u3082\u306e\u3001test readdir\u304creaddir\u3092\u518d\u5e30\u3067\u547c\u3076\u3060\u3051\u306e\u9069\u5f53\u306a\u5b9f\u88c5\u3001test walkdir\u304cwalkdir\u3092\u4f7f\u3063\u305f\u3082\u306e\u306b\u306a\u308a\u307e\u3059\u3002\u307e\u305f\u3001_metadata\u3068\u4ed8\u3044\u3066\u3044\u308b\u3082\u306e\u306f\u5404\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u30a8\u30f3\u30c8\u30ea\u306b\u5bfe\u3057\u3001DirEntry::metadata()\u3092\u547c\u3093\u3067\u3044\u308b\u30d0\u30fc\u30b8\u30e7\u30f3\u306b\u306a\u308a\u307e\u3059\u3002\nwalkdir\u6bd4\u3067\u3060\u3044\u305f\u3044\uff12\u500d\u304f\u3089\u3044\u901f\u304f\u306a\u3063\u3066\u3044\u307e\u3059\u3002\ntest fts_walkdir          ... bench: 315,114,126 ns/iter (+/- 8,478,709)\ntest fts_walkdir_metadata ... bench: 480,089,245 ns/iter (+/- 11,478,335)\ntest readdir              ... bench: 575,856,224 ns/iter (+/- 15,021,486)\ntest readdir_metadata     ... bench: 790,838,218 ns/iter (+/- 12,780,010)\ntest walkdir              ... bench: 688,884,058 ns/iter (+/- 8,023,838)\ntest walkdir_metadata     ... bench: 904,379,691 ns/iter (+/- 10,212,776)\n\n\n\u89e3\u8aac\nFFI\u95a2\u9023\u306e\u5b9f\u88c5\u8a73\u7d30\u3092\u591a\u5c11\u89e3\u8aac\u3057\u307e\u3059\u3002\n\u57fa\u672c\u306f\u3053\u3053\u306b\u66f8\u3044\u3066\u3042\u308b\u306e\u3067\u3001\u305d\u308c\u4ee5\u5916\u306e\u7d30\u304b\u3044\u3068\u3053\u308d\u3092\u3002\n\n\u5024\u578b\nint\u306a\u3069\u57fa\u672c\u7684\u306a\u3082\u306e\u4ee5\u5916\u3067\u3082libc\u30af\u30ec\u30fc\u30c8\u306b\u5927\u62b5\u3042\u308b\u306e\u3067\u3053\u3053\u3067\u8abf\u3079\u308b\u3068\u3088\u3044\u3068\u601d\u3044\u307e\u3059\u3002ino_t\u3068\u304bdev_t\u3082\u3042\u308a\u307e\u3059\u3002vold*\u306fc_void\u3067\u3059\u3002\n\u3068\u306f\u3044\u3048\u3001\u307e\u308c\u306blibc\u306e\u578b\u5b9a\u7fa9\u3067\u3046\u307e\u304f\u3044\u304b\u306a\u3044\u3053\u3068\u304c\u3042\u308a\u307e\u3059\u3002\u4f8b\u3048\u3070OSX\u306b\u304a\u3051\u308bino_t\u306flibc\u7684\u306b\u306f64bit\u306a\u306e\u3067\u3059\u304c\u3001fts\u304c\u671f\u5f85\u3059\u308bino_t\u306f32bit\u306e\u3088\u3046\u3067\u3057\u305f\u3002\uff08\u3053\u306e\u3042\u305f\u308a\u8a73\u3057\u3044\u4e8b\u60c5\u306f\u5206\u304b\u308a\u307e\u305b\u3093\u3057\u3001\u305d\u3082\u305d\u3082OSX\u74b0\u5883\u304c\u624b\u5143\u306b\u306a\u3044\u306e\u3067\u3001Travis-CI\u306eOSX\u30d3\u30eb\u30c9\u3067\u306f\u305d\u3046\u3060\u3063\u305f\u3001\u3068\u3044\u3046\u3060\u3051\u3067\u3059\u304c\u2026\uff09\n\n2016/3/19\u8ffd\u8a18\nOSX\u306eino_t\u3067\u3059\u304c\u3001\u4ee5\u4e0b\u306e\u3088\u3046\u306blink_name\u3092\u6307\u5b9a\u3059\u308b\u3053\u3068\u3067\u3001libc\u5b9a\u7fa9\u901a\u308a64bit\u306eino_t\u3092\u5f97\u308b\u3053\u3068\u304c\u51fa\u6765\u307e\u3057\u305f\u3002\n\uff08rust\u306elibstd\u5b9f\u88c5\u898b\u3066\u6c17\u3065\u304d\u307e\u3057\u305f\u3002\u3088\u304f\u898b\u308b\u3068Apple\u306e\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u306b\u3082$INODE64\u4ed8\u304d\u306e\u30b7\u30f3\u30dc\u30eb\u540d\u306764bit\u7248\u306b\u306a\u308b\u3068\u66f8\u3044\u3066\u3042\u308a\u307e\u3059\uff09\n#[cfg_attr(target_os = \"macos\", link_name = \"fts_read$INODE64\")]\npub fn fts_read( ftsp: *mut FTS ) -> *const FTSENT;\n\n\nnull\u30dd\u30a4\u30f3\u30bf\nnull\u30dd\u30a4\u30f3\u30bf\u305d\u306e\u3082\u306e\u306fstd::ptr::null()\u3067\u5f97\u3089\u308c\u307e\u3059\u3002\u4f8b\u3048\u3070fts_open\u306f\u5f15\u6570\u306b\u300cnull\u30dd\u30a4\u30f3\u30bf\u3067\u7d42\u7aef\u3055\u308c\u305f\u6587\u5b57\u5217\u30dd\u30a4\u30f3\u30bf\u914d\u5217\u3078\u306e\u30dd\u30a4\u30f3\u30bf\u300d\u3092\u6e21\u3059\u306e\u3067\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002\u307e\u305f\u3001null\u30dd\u30a4\u30f3\u30bf\u30c1\u30a7\u30c3\u30af\u306fis_null()\u304c\u4f7f\u3048\u307e\u3059\u3002\nlet path_ptr = std::ffi::CString::new( \".\" ).unwrap().as_ptr();\nlet path_ptrs = vec![path_ptr, std::ptr::null()];\nlet fts = fts_open( path_ptrs.as_ptr(), 0, None );\nassert!( !fts.is_null() );\n\n\n\u5b9a\u6570\u5b9a\u7fa9\nC\u3067#define\u3055\u308c\u3066\u3044\u308b\u3088\u3046\u306a\u5b9a\u6570\u306b\u3064\u3044\u3066\u3067\u3059\u3002\n\u30d3\u30c3\u30c8\u30d5\u30e9\u30b0\u306e\u5834\u5408\u306fbitflags\u304c\u4f7f\u3048\u307e\u3059\u3002\u3061\u3083\u3093\u3068\u578b\u6307\u5b9a\u3067\u304d\u3066\u3001\u30d3\u30c3\u30c8\u6f14\u7b97\u3082\u666e\u901a\u306b\u51fa\u6765\u307e\u3059\u3002C\u306b\u6e21\u3059\u3068\u304d\u306fbits()\u3067\u6574\u6570\u578b\u306b\u5909\u63db\u3057\u3066\u6e21\u3057\u307e\u3059\u3002\u4e0b\u306e\u4f8b\u3060\u3068\u30d5\u30e9\u30b0\u306e\u578b\u306fFlags\u3067\u3059\u304c\u3001\u5b9a\u7fa9\u3057\u305f\u5024\u306fFlags::A\u3068\u306f\u306a\u3089\u305a\u5358\u306bA\u306b\u306a\u3063\u3066\u3057\u307e\u3046\u306e\u3067mod\u3067\u304f\u308b\u3093\u3067option::A\u306b\u306a\u308b\u3088\u3046\u306b\u3057\u3066\u3044\u307e\u3059\u3002\npub mod option {\n    bitflags! {\n        pub flags Flags: u32 {\n            const A = 0x0001,\n            const B = 0x0002,\n            const C = 0x0004,\n        }\n    }\n}\n\nlet opt = option::A | option::B;\nassert_eq!( opt.bits(), 0x3 );\n\n\u30d3\u30c3\u30c8\u30d5\u30e9\u30b0\u3067\u306a\u3044\u5834\u5408\u3001\u57fa\u672c\u7684\u306b\u306fenum\u3067\u826f\u3044\u306e\u3067\u3059\u304c\u3001C\u304b\u3089\u306e\u623b\u308a\u5024\u3092enum\u306b\u5909\u63db\u3059\u308b\u306e\u304c\u9762\u5012\u3067\u3059\u3002enum_primitive\u3092\u4f7f\u3048\u3070\u5404\u7a2efrom_\u3092\u81ea\u52d5\u5b9f\u88c5\u3057\u3066\u304f\u308c\u307e\u3059\u3002\nenum_from_primitive! {\n    #[derive(Clone,Debug,PartialEq)]\n    pub enum Info {\n        A = 0,\n        B = 1,\n        C = 2,\n    }\n}\n\nassert_rq!( Info::A, Info::from_isize( 0 ) );\nassert_rq!( Info::B, Info::from_isize( 1 ) );\n\n\nerrno\n\n\u30a8\u30e9\u30fc\u304c\u3044\u308f\u3086\u308berrno\u3067\u8fd4\u3063\u3066\u304f\u308b\u5834\u5408\u3001\u81ea\u5206\u3067\u30c7\u30b3\u30fc\u30c9\u3059\u308b\u5fc5\u8981\u306f\u306a\u304f\u3066\u3001std::io::Error::from_raw_os_error()\u3067\u5909\u63db\u51fa\u6765\u307e\u3059\u3002\nlet errno = 13;\nlet err = std::io::Error::from_raw_os_error( errno );\nassert_eq!( err.kind(), std::io::ErrorKind::PermissionDenied );\n\n\ntransmute\n\nstd::mem::transmute()\u3067\u7121\u7406\u77e2\u7406\u30ad\u30e3\u30b9\u30c8\u3057\u305f\u3044\u5834\u5408\u304c\u3042\u308a\u307e\u3059\u3002\n\u4eca\u56de\u306f2\u30f6\u6240\u3067\u4f7f\u3063\u3066\u3044\u3066\u30011\u3064\u76ee\u306fmetadata\u3067\u3059\u3002C\u304b\u3089\u8fd4\u3063\u3066\u304f\u308blibc::stat\u3068Rust\u3067\u4f7f\u3044\u305f\u3044std::fs::Metadata\u306fUnix\u3067\u306f\u304a\u305d\u3089\u304f\u540c\u4e00\u306e\u30e1\u30e2\u30ea\u30ec\u30a4\u30a2\u30a6\u30c8\u306a\u306e\u3067transmute\u3067\u5909\u63db\u3057\u3066\u3044\u307e\u3059\u3002\u3053\u306e\u8fba\u308a\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u306b\u8a18\u8f09\u3055\u308c\u3066\u3044\u308b\u308f\u3051\u3067\u306f\u306a\u3044\u306e\u3067\u3001\u30d7\u30e9\u30c3\u30c8\u30db\u30fc\u30e0\u3084\u30d0\u30fc\u30b8\u30e7\u30f3\u3067\u5909\u308f\u308b\u53ef\u80fd\u6027\u306f\u3042\u308a\u307e\u3059\u3002\n(\u3068\u306f\u3044\u3048MetadataExt::as_raw_stat()\u3067libc::stat\u30dd\u30a4\u30f3\u30bf\u304c\u8fd4\u3063\u3066\u304f\u308b\u4ee5\u4e0a\u3001\u30e1\u30e2\u30ea\u30ec\u30a4\u30a2\u30a6\u30c8\u304c\u7570\u306a\u308b\u3068\u3044\u3046\u306e\u3082\u8003\u3048\u306b\u304f\u3044\u3067\u3059\u3002\u672c\u5f53\u306ffrom_raw_stat()\u304c\u3042\u3063\u3066\u304f\u308c\u308c\u3070\u3044\u3044\u306e\u3067\u3059\u304c)\nlet stat = ...\nlet metadata = std::mem::transmute::<*const libc::stat, *const std::fs::Metadata>( stat );\n\n2\u3064\u76ee\u306fC\u5074\u304c\u5c11\u3057\u4e0d\u601d\u8b70\u306a\u3053\u3068\u306b\u306a\u3063\u3066\u3044\u3066\u3001fts_open()\u306e\u623b\u308a\u5024\u3067\u3042\u308b\u69cb\u9020\u4f53\u5b9a\u7fa9\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u3002\ntypedef struct _ftsent {\n    ....\n    char fts_name[1];\n} FTSENT;\n\n\u3053\u3053\u3067\u6700\u5f8c\u306e\u8981\u7d20\u306efts_name\u306fchar\u306e\u8981\u7d20\u6570\uff11\u306e\u914d\u5217\u3068\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u307e\u3059\u304c\u3001\u5b9f\u969b\u306b\u306f\u305d\u306e\u3042\u3068\u3082\u6587\u5b57\u5217\u306f\u7d9a\u3044\u3066\u3044\u307e\u3059\u3002\u3064\u307e\u308astruct\u306e\u5b9a\u7fa9\u304b\u3089\u5b9f\u4f53\u304c\u306f\u307f\u51fa\u3057\u3066\u3044\u308b\u72b6\u614b\u3067\u3059\u3002(glibc\u81ea\u4f53\u306e\u5b9f\u88c5\u3092\u898b\u308b\u3068\u3001struct\u306ealloc\u6642\u306bMAX_PATH_LEN\u3060\u3051\u4f59\u8a08\u306b\u30e1\u30e2\u30ea\u78ba\u4fdd\u3057\u3066\u3044\u308b\u3088\u3046\u3067\u3059)\n\u3053\u306e\u72b6\u614b\u3092\u9069\u5207\u306b\u8868\u305b\u308b\u578b\u304c\u3042\u308c\u3070\u3044\u3044\u306e\u3067\u3059\u304c\u3001\u591a\u5206\u306a\u3055\u305d\u3046\u306a\u306e\u3067Rust\u5074\u3082\u8981\u7d20\u65701\u306e\u914d\u5217\u3068\u3057\u3066\u5ba3\u8a00\u3057\u3066\u3001\u30a2\u30af\u30bb\u30b9\u3059\u308b\u3068\u304d\u306btransmute\u3067\u30ad\u30e3\u30b9\u30c8\u3057\u3066\u3044\u307e\u3059\u3002\n#[repr(C)]\n#[derive(Debug)]\npub struct FTSENT {\n    ...\n    pub fts_name   : [c_char;1]   ,\n}\n\nlet ent: *const FTSENT = ...\nlet ptr  = unsafe { mem::transmute::<&[c_char;1], *mut u8>( &(*ent).fts_name ) };\n\n# \u306f\u3058\u3081\u306b\nBSD\u3084Linux\u306eglibc\u306b\u306ffts\u3068\u3044\u3046\u95a2\u6570\u7fa4\u304c\u3042\u308a\u307e\u3059\u3002\u3053\u308c\u306f\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u5185\u306e\u518d\u5e30\u7684\u306a\u30d5\u30a1\u30a4\u30eb\u5217\u6319\u3092\u9ad8\u901f\u306b\u884c\u3046\u95a2\u6570\u3067\u3001`ls`\u3084`find`\u306a\u3069\u306e\u5b9f\u88c5\u306b\u4f7f\u308f\u308c\u3066\u3044\u307e\u3059\u3002\nRust\u3067\u3053\u306e\u3088\u3046\u306a\u30d5\u30a1\u30a4\u30eb\u5217\u6319\u3092\u884c\u3046\u5834\u5408\u3001`std::fs::readdir`\u3067\u5b9f\u88c5\u3059\u308b\u304b\u3001\u65e2\u5b58\u306e[`walkdir`](https://crates.io/crates/walkdir)(\u3053\u308c\u3082\u5185\u90e8\u7684\u306b\u306f`readdir`\u3092\u4f7f\u3063\u3066\u3044\u308b\u3088\u3046\u3067\u3059)\u3092\u4f7f\u3046\u3053\u3068\u306b\u306a\u308a\u307e\u3059\u304c\u3001fts\u304c\u901f\u3044\u3089\u3057\u3044\u3068\u3044\u3046\u3053\u3068\u3067\u3001FFI\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u4f5c\u3063\u3066\u305d\u308c\u3092\u4f7f\u3063\u305f`walkdir`\u76f8\u5f53\u306e\u5b9f\u88c5\u3092\u884c\u3044\u307e\u3057\u305f\u3002\n\u3061\u306a\u307f\u306bglibc\u306b\u4f9d\u5b58\u3059\u308b\u306e\u3067\u304a\u305d\u3089\u304fBSD(OSX\u542b\u3080)\u3068Linux\u9650\u5b9a\u3067\u3059\u3002Windows\u5bfe\u5fdc\u304c\u5fc5\u8981\u306a\u3089\u7d20\u76f4\u306b`walkdir`\u3092\u4f7f\u3044\u307e\u3057\u3087\u3046\u3002\n\n# \u30ea\u30f3\u30af\n- [crates.io](https://crates.io/crates/fts)\n- [\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9](https://github.com/dalance/fts-rs)\n- [\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8](http://dalance.github.io/fts-rs/fts/)\n\n# \u4f7f\u3044\u65b9\n\n```Cargo.toml\n[dependencies]\nfts = \"*\"\n```\n\n`walkdir`\u3068\u540c\u69d8\u306b\u30a4\u30c6\u30ec\u30fc\u30bf\u5b9f\u88c5\u3057\u3066\u3044\u308b\u306e\u3067`for`\u3067\u56de\u305b\u307e\u3059\u3002\n\n```rust\nuse std::path::Path;\nuse fts::walkdir::{WalkDir, WalkDirConf}\n\nlet path = Path::new( \".\" );\nfor p in WalkDir::new( WalkDirConf::new( path ) ) {\n    println!( \"{:?}\", p.unwrap() );\n}\n```\n\n\u30d5\u30a3\u30eb\u30bf\u3082\u51fa\u6765\u307e\u3059\u3002\n\n```rust\nuse std::path::Path;\nuse fts::walkdir::{WalkDir, WalkDirConf}\n\nlet path = Path::new( \".\" );\nlet iter = WalkDir::new( WalkDirConf::new( path ) ).into_iter().filter_map( |x| x.ok() );\nfor p in iter.filter( |x| x.file_type().is_file() ) {\n    println!( \"{:?}\", p );\n}\n```\n\n`WalkDirConf`\u306fBuilder\u306b\u306a\u3063\u3066\u3044\u3066\u3001\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u8a2d\u5b9a\u3067\u304d\u307e\u3059\u3002\u4ee5\u4e0b\u306e`conf1`\u306e\u5834\u5408\u3001\u30b7\u30f3\u30dc\u30ea\u30c3\u30af\u30ea\u30f3\u30af\u3092\u8fbf\u308a\u3001\u304b\u3064\u30ea\u30f3\u30af\u5148\u304c\u5225\u30c7\u30d0\u30a4\u30b9\u3067\u3042\u3063\u3066\u3082\u8fbf\u308b\u8a2d\u5b9a\u306b\u306a\u308a\u307e\u3059\u3002`conf2`\u306f`metadata`\u3092\u53d6\u5f97\u3057\u306a\u3044\u30aa\u30d7\u30b7\u30e7\u30f3\u3067\u3001\u305d\u306e\u5206\u9ad8\u901f\u306b\u306a\u308a\u307e\u3059\u3002\n\n```rust\nse std::path::Path;\nuse fts::walkdir::{WalkDir, WalkDirConf}\n\nlet path = Path::new( \".\" );\nlet conf1 = WalkDirConf::new( path ).follow_symlink().cross_device();\nlet conf2 = WalkDirConf::new( path ).no_metadata();\n\nfor p in WalkDir::new( conf1 ) {\n    println!( \"{:?}\", p.unwrap() );\n}\nfor p in WalkDir::new( conf2 ) {\n    println!( \"{:?}\", p.unwrap() );\n}\n\n```\n\n\n# \u30d9\u30f3\u30c1\u30de\u30fc\u30af\n`cargo bench`\u306e\u7d50\u679c\u3067\u3059\u3002`test fts_walkdir`\u304c\u4eca\u56de\u5b9f\u88c5\u3057\u305f\u3082\u306e\u3001`test readdir`\u304c`readdir`\u3092\u518d\u5e30\u3067\u547c\u3076\u3060\u3051\u306e\u9069\u5f53\u306a\u5b9f\u88c5\u3001`test walkdir`\u304c`walkdir`\u3092\u4f7f\u3063\u305f\u3082\u306e\u306b\u306a\u308a\u307e\u3059\u3002\u307e\u305f\u3001`_metadata`\u3068\u4ed8\u3044\u3066\u3044\u308b\u3082\u306e\u306f\u5404\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u30a8\u30f3\u30c8\u30ea\u306b\u5bfe\u3057\u3001`DirEntry::metadata()`\u3092\u547c\u3093\u3067\u3044\u308b\u30d0\u30fc\u30b8\u30e7\u30f3\u306b\u306a\u308a\u307e\u3059\u3002\n`walkdir`\u6bd4\u3067\u3060\u3044\u305f\u3044\uff12\u500d\u304f\u3089\u3044\u901f\u304f\u306a\u3063\u3066\u3044\u307e\u3059\u3002\n\n```\ntest fts_walkdir          ... bench: 315,114,126 ns/iter (+/- 8,478,709)\ntest fts_walkdir_metadata ... bench: 480,089,245 ns/iter (+/- 11,478,335)\ntest readdir              ... bench: 575,856,224 ns/iter (+/- 15,021,486)\ntest readdir_metadata     ... bench: 790,838,218 ns/iter (+/- 12,780,010)\ntest walkdir              ... bench: 688,884,058 ns/iter (+/- 8,023,838)\ntest walkdir_metadata     ... bench: 904,379,691 ns/iter (+/- 10,212,776)\n```\n\n# \u89e3\u8aac\nFFI\u95a2\u9023\u306e\u5b9f\u88c5\u8a73\u7d30\u3092\u591a\u5c11\u89e3\u8aac\u3057\u307e\u3059\u3002\n\u57fa\u672c\u306f[\u3053\u3053](http://rust-lang-ja.github.io/the-rust-programming-language-ja/1.6/book/ffi.html)\u306b\u66f8\u3044\u3066\u3042\u308b\u306e\u3067\u3001\u305d\u308c\u4ee5\u5916\u306e\u7d30\u304b\u3044\u3068\u3053\u308d\u3092\u3002\n\n## \u5024\u578b\n`int`\u306a\u3069\u57fa\u672c\u7684\u306a\u3082\u306e\u4ee5\u5916\u3067\u3082libc\u30af\u30ec\u30fc\u30c8\u306b\u5927\u62b5\u3042\u308b\u306e\u3067[\u3053\u3053](https://doc.rust-lang.org/libc/x86_64-unknown-linux-gnu/libc/#types)\u3067\u8abf\u3079\u308b\u3068\u3088\u3044\u3068\u601d\u3044\u307e\u3059\u3002`ino_t`\u3068\u304b`dev_t`\u3082\u3042\u308a\u307e\u3059\u3002`vold*`\u306f`c_void`\u3067\u3059\u3002\n\n\u3068\u306f\u3044\u3048\u3001\u307e\u308c\u306blibc\u306e\u578b\u5b9a\u7fa9\u3067\u3046\u307e\u304f\u3044\u304b\u306a\u3044\u3053\u3068\u304c\u3042\u308a\u307e\u3059\u3002\u4f8b\u3048\u3070OSX\u306b\u304a\u3051\u308b`ino_t`\u306flibc\u7684\u306b\u306f64bit\u306a\u306e\u3067\u3059\u304c\u3001fts\u304c\u671f\u5f85\u3059\u308b`ino_t`\u306f32bit\u306e\u3088\u3046\u3067\u3057\u305f\u3002\uff08\u3053\u306e\u3042\u305f\u308a\u8a73\u3057\u3044\u4e8b\u60c5\u306f\u5206\u304b\u308a\u307e\u305b\u3093\u3057\u3001\u305d\u3082\u305d\u3082OSX\u74b0\u5883\u304c\u624b\u5143\u306b\u306a\u3044\u306e\u3067\u3001Travis-CI\u306eOSX\u30d3\u30eb\u30c9\u3067\u306f\u305d\u3046\u3060\u3063\u305f\u3001\u3068\u3044\u3046\u3060\u3051\u3067\u3059\u304c\u2026\uff09\n\n### 2016/3/19\u8ffd\u8a18\nOSX\u306e`ino_t`\u3067\u3059\u304c\u3001\u4ee5\u4e0b\u306e\u3088\u3046\u306b`link_name`\u3092\u6307\u5b9a\u3059\u308b\u3053\u3068\u3067\u3001libc\u5b9a\u7fa9\u901a\u308a64bit\u306e`ino_t`\u3092\u5f97\u308b\u3053\u3068\u304c\u51fa\u6765\u307e\u3057\u305f\u3002\n\uff08rust\u306elibstd\u5b9f\u88c5\u898b\u3066\u6c17\u3065\u304d\u307e\u3057\u305f\u3002\u3088\u304f\u898b\u308b\u3068[Apple\u306e\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8](https://developer.apple.com/library/mac/documentation/Darwin/Reference/ManPages/man2/stat.2.html)\u306b\u3082`$INODE64`\u4ed8\u304d\u306e\u30b7\u30f3\u30dc\u30eb\u540d\u306764bit\u7248\u306b\u306a\u308b\u3068\u66f8\u3044\u3066\u3042\u308a\u307e\u3059\uff09\n\n```rust\n#[cfg_attr(target_os = \"macos\", link_name = \"fts_read$INODE64\")]\npub fn fts_read( ftsp: *mut FTS ) -> *const FTSENT;\n```\n\n## `null`\u30dd\u30a4\u30f3\u30bf\n`null`\u30dd\u30a4\u30f3\u30bf\u305d\u306e\u3082\u306e\u306f`std::ptr::null()`\u3067\u5f97\u3089\u308c\u307e\u3059\u3002\u4f8b\u3048\u3070`fts_open`\u306f\u5f15\u6570\u306b\u300c`null`\u30dd\u30a4\u30f3\u30bf\u3067\u7d42\u7aef\u3055\u308c\u305f\u6587\u5b57\u5217\u30dd\u30a4\u30f3\u30bf\u914d\u5217\u3078\u306e\u30dd\u30a4\u30f3\u30bf\u300d\u3092\u6e21\u3059\u306e\u3067\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002\u307e\u305f\u3001`null`\u30dd\u30a4\u30f3\u30bf\u30c1\u30a7\u30c3\u30af\u306f`is_null()`\u304c\u4f7f\u3048\u307e\u3059\u3002\n\n```rust\nlet path_ptr = std::ffi::CString::new( \".\" ).unwrap().as_ptr();\nlet path_ptrs = vec![path_ptr, std::ptr::null()];\nlet fts = fts_open( path_ptrs.as_ptr(), 0, None );\nassert!( !fts.is_null() );\n```\n\n## \u5b9a\u6570\u5b9a\u7fa9\nC\u3067`#define`\u3055\u308c\u3066\u3044\u308b\u3088\u3046\u306a\u5b9a\u6570\u306b\u3064\u3044\u3066\u3067\u3059\u3002\n\n\u30d3\u30c3\u30c8\u30d5\u30e9\u30b0\u306e\u5834\u5408\u306f[`bitflags`](https://crates.io/crates/bitflags)\u304c\u4f7f\u3048\u307e\u3059\u3002\u3061\u3083\u3093\u3068\u578b\u6307\u5b9a\u3067\u304d\u3066\u3001\u30d3\u30c3\u30c8\u6f14\u7b97\u3082\u666e\u901a\u306b\u51fa\u6765\u307e\u3059\u3002C\u306b\u6e21\u3059\u3068\u304d\u306f`bits()`\u3067\u6574\u6570\u578b\u306b\u5909\u63db\u3057\u3066\u6e21\u3057\u307e\u3059\u3002\u4e0b\u306e\u4f8b\u3060\u3068\u30d5\u30e9\u30b0\u306e\u578b\u306f`Flags`\u3067\u3059\u304c\u3001\u5b9a\u7fa9\u3057\u305f\u5024\u306f`Flags::A`\u3068\u306f\u306a\u3089\u305a\u5358\u306b`A`\u306b\u306a\u3063\u3066\u3057\u307e\u3046\u306e\u3067`mod`\u3067\u304f\u308b\u3093\u3067`option::A`\u306b\u306a\u308b\u3088\u3046\u306b\u3057\u3066\u3044\u307e\u3059\u3002\n\n```rust\npub mod option {\n    bitflags! {\n        pub flags Flags: u32 {\n            const A = 0x0001,\n            const B = 0x0002,\n            const C = 0x0004,\n        }\n    }\n}\n\nlet opt = option::A | option::B;\nassert_eq!( opt.bits(), 0x3 );\n```\n\n\u30d3\u30c3\u30c8\u30d5\u30e9\u30b0\u3067\u306a\u3044\u5834\u5408\u3001\u57fa\u672c\u7684\u306b\u306f`enum`\u3067\u826f\u3044\u306e\u3067\u3059\u304c\u3001C\u304b\u3089\u306e\u623b\u308a\u5024\u3092`enum`\u306b\u5909\u63db\u3059\u308b\u306e\u304c\u9762\u5012\u3067\u3059\u3002[`enum_primitive`](https://crates.io/crates/enum_primitive)\u3092\u4f7f\u3048\u3070\u5404\u7a2e`from_`\u3092\u81ea\u52d5\u5b9f\u88c5\u3057\u3066\u304f\u308c\u307e\u3059\u3002\n\n```rust\nenum_from_primitive! {\n    #[derive(Clone,Debug,PartialEq)]\n    pub enum Info {\n        A = 0,\n        B = 1,\n        C = 2,\n    }\n}\n\nassert_rq!( Info::A, Info::from_isize( 0 ) );\nassert_rq!( Info::B, Info::from_isize( 1 ) );\n```\n\n\n## `errno`\n\u30a8\u30e9\u30fc\u304c\u3044\u308f\u3086\u308b`errno`\u3067\u8fd4\u3063\u3066\u304f\u308b\u5834\u5408\u3001\u81ea\u5206\u3067\u30c7\u30b3\u30fc\u30c9\u3059\u308b\u5fc5\u8981\u306f\u306a\u304f\u3066\u3001`std::io::Error::from_raw_os_error()`\u3067\u5909\u63db\u51fa\u6765\u307e\u3059\u3002\n\n```rust\nlet errno = 13;\nlet err = std::io::Error::from_raw_os_error( errno );\nassert_eq!( err.kind(), std::io::ErrorKind::PermissionDenied );\n```\n\n## `transmute`\n`std::mem::transmute()`\u3067\u7121\u7406\u77e2\u7406\u30ad\u30e3\u30b9\u30c8\u3057\u305f\u3044\u5834\u5408\u304c\u3042\u308a\u307e\u3059\u3002\n\u4eca\u56de\u306f2\u30f6\u6240\u3067\u4f7f\u3063\u3066\u3044\u3066\u30011\u3064\u76ee\u306f`metadata`\u3067\u3059\u3002C\u304b\u3089\u8fd4\u3063\u3066\u304f\u308b`libc::stat`\u3068Rust\u3067\u4f7f\u3044\u305f\u3044`std::fs::Metadata`\u306fUnix\u3067\u306f\u304a\u305d\u3089\u304f\u540c\u4e00\u306e\u30e1\u30e2\u30ea\u30ec\u30a4\u30a2\u30a6\u30c8\u306a\u306e\u3067`transmute`\u3067\u5909\u63db\u3057\u3066\u3044\u307e\u3059\u3002\u3053\u306e\u8fba\u308a\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u306b\u8a18\u8f09\u3055\u308c\u3066\u3044\u308b\u308f\u3051\u3067\u306f\u306a\u3044\u306e\u3067\u3001\u30d7\u30e9\u30c3\u30c8\u30db\u30fc\u30e0\u3084\u30d0\u30fc\u30b8\u30e7\u30f3\u3067\u5909\u308f\u308b\u53ef\u80fd\u6027\u306f\u3042\u308a\u307e\u3059\u3002\n(\u3068\u306f\u3044\u3048`MetadataExt::as_raw_stat()`\u3067`libc::stat`\u30dd\u30a4\u30f3\u30bf\u304c\u8fd4\u3063\u3066\u304f\u308b\u4ee5\u4e0a\u3001\u30e1\u30e2\u30ea\u30ec\u30a4\u30a2\u30a6\u30c8\u304c\u7570\u306a\u308b\u3068\u3044\u3046\u306e\u3082\u8003\u3048\u306b\u304f\u3044\u3067\u3059\u3002\u672c\u5f53\u306f`from_raw_stat()`\u304c\u3042\u3063\u3066\u304f\u308c\u308c\u3070\u3044\u3044\u306e\u3067\u3059\u304c)\n\n```rust\nlet stat = ...\nlet metadata = std::mem::transmute::<*const libc::stat, *const std::fs::Metadata>( stat );\n```\n\n2\u3064\u76ee\u306fC\u5074\u304c\u5c11\u3057\u4e0d\u601d\u8b70\u306a\u3053\u3068\u306b\u306a\u3063\u3066\u3044\u3066\u3001`fts_open()`\u306e\u623b\u308a\u5024\u3067\u3042\u308b\u69cb\u9020\u4f53\u5b9a\u7fa9\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u3002\n\n```c\ntypedef struct _ftsent {\n    ....\n    char fts_name[1];\n} FTSENT;\n```\n\n\u3053\u3053\u3067\u6700\u5f8c\u306e\u8981\u7d20\u306e`fts_name`\u306f`char`\u306e\u8981\u7d20\u6570\uff11\u306e\u914d\u5217\u3068\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u307e\u3059\u304c\u3001\u5b9f\u969b\u306b\u306f\u305d\u306e\u3042\u3068\u3082\u6587\u5b57\u5217\u306f\u7d9a\u3044\u3066\u3044\u307e\u3059\u3002\u3064\u307e\u308a`struct`\u306e\u5b9a\u7fa9\u304b\u3089\u5b9f\u4f53\u304c\u306f\u307f\u51fa\u3057\u3066\u3044\u308b\u72b6\u614b\u3067\u3059\u3002(glibc\u81ea\u4f53\u306e\u5b9f\u88c5\u3092\u898b\u308b\u3068\u3001`struct`\u306e`alloc`\u6642\u306b`MAX_PATH_LEN`\u3060\u3051\u4f59\u8a08\u306b\u30e1\u30e2\u30ea\u78ba\u4fdd\u3057\u3066\u3044\u308b\u3088\u3046\u3067\u3059)\n\u3053\u306e\u72b6\u614b\u3092\u9069\u5207\u306b\u8868\u305b\u308b\u578b\u304c\u3042\u308c\u3070\u3044\u3044\u306e\u3067\u3059\u304c\u3001\u591a\u5206\u306a\u3055\u305d\u3046\u306a\u306e\u3067Rust\u5074\u3082\u8981\u7d20\u65701\u306e\u914d\u5217\u3068\u3057\u3066\u5ba3\u8a00\u3057\u3066\u3001\u30a2\u30af\u30bb\u30b9\u3059\u308b\u3068\u304d\u306b`transmute`\u3067\u30ad\u30e3\u30b9\u30c8\u3057\u3066\u3044\u307e\u3059\u3002\n\n```\n#[repr(C)]\n#[derive(Debug)]\npub struct FTSENT {\n    ...\n    pub fts_name   : [c_char;1]   ,\n}\n\nlet ent: *const FTSENT = ...\nlet ptr  = unsafe { mem::transmute::<&[c_char;1], *mut u8>( &(*ent).fts_name ) };\n```\n", "tags": ["rust", "ffi"]}