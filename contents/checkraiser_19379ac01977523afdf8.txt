{"context": " More than 1 year has passed since last update.This component allows you to render isomorphically!.\nThe trick is in defaultProps and componentDidMount methods.\n\nOn the server, it fetches initial data as default props.\nOn client, it does nothing, but in componentDidMount method, it fetches the same data as the server side.\n\nAnd you get isomorphic React component for free here!.\nimport React from 'react';\nimport AppState from '../stores/app-state'\nclass PostsList extends React.Component {\n  constructor(props){\n    super(props)\n    this.state = {data: props.data}\n  }\n  componentDidMount(){\n    AppState(\"/lists\", (data) => {\n      this.setState({data: data})\n    })\n  }\n  render(){\n    let y = this.state.data.map((x) => <div>{x.title}</div>)\n    return (\n      <div>\n        <p>Posts List </p>\n        {y}\n      </div>\n    )\n  }\n}\n\nPostsList.contextTypes = {\n  router: React.PropTypes.func.isRequired\n}\nPostsList.propTypes = {\n  data: React.PropTypes.array.isRequired\n}\nif (typeof window === 'undefined'){\n  AppState(\"/lists\", (data) => {\n      PostsList.defaultProps = {data: data}\n  })\n} else {\n  PostsList.defaultProps = {data: []}\n}\n\n\nexport default PostsList;\n\nYou can checkout full book here\nThis component allows you to render isomorphically!.\nThe trick is in `defaultProps` and `componentDidMount` methods.\n\n- On the server, it fetches initial data as default props.\n- On client, it does nothing, but in `componentDidMount` method, it fetches the same data as the server side.\n\nAnd you get isomorphic React component for free here!.\n\n\n```\nimport React from 'react';\nimport AppState from '../stores/app-state'\nclass PostsList extends React.Component {\n  constructor(props){\n    super(props)\n    this.state = {data: props.data}\n  }\n  componentDidMount(){\n    AppState(\"/lists\", (data) => {\n      this.setState({data: data})\n    })\n  }\n  render(){\n    let y = this.state.data.map((x) => <div>{x.title}</div>)\n    return (\n      <div>\n        <p>Posts List </p>\n        {y}\n      </div>\n    )\n  }\n}\n \nPostsList.contextTypes = {\n  router: React.PropTypes.func.isRequired\n}\nPostsList.propTypes = {\n  data: React.PropTypes.array.isRequired\n}\nif (typeof window === 'undefined'){\n  AppState(\"/lists\", (data) => {\n      PostsList.defaultProps = {data: data}\n  })\n} else {\n  PostsList.defaultProps = {data: []}\n}\n \n \nexport default PostsList;\n```\n\nYou can checkout full book [here](https://www.gitbook.com/book/checkraiser/frp-on-node-js/details)\n", "tags": ["reactjs", "nodejs", "isomorphic"]}