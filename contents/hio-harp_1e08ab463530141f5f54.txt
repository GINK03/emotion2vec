{"context": "\u30aa\u30f3\u30e9\u30a4\u30f3SICP\u8aad\u66f8\u5973\u5b50\u4f1a #26 (2.3.2)\n\u7df4\u7fd2\u554f\u984c 2.56 - 2.58\n\u3046\u3061\u306e\u30b3\u30fc\u30c9\u3060\u3093\u3060\u3093\u7121\u99c4\u306b\u3084\u3084\u3053\u3057\u3055\u307e\u3057\u307e\u3057\u3067\u3061\u3087\u3063\u3068\u30a2\u30ec\uff08\uff09\n\u30b7\u30f3\u30d7\u30eb\u3055\u3092\u3082\u3063\u3068\u5fc3\u304c\u3051\u306a\u304d\u3083\u2026\uff1e\u03c9\uff1c;\n\n2.3.2. \u4f8b: \u8a18\u53f7\u5fae\u5206\n\n\u62bd\u8c61\u30c7\u30fc\u30bf\u306b\u3088\u308b\u5fae\u5206\u30d7\u30ed\u30b0\u30e9\u30e0\n\u4eca\u56de\u4f7f\u3046\u30c7\u30fc\u30bf\u69cb\u9020.\n\u8ff0\u8a9e\u95a2\u6570\u3068\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u3068\u30bb\u30ec\u30af\u30bf\u3068. \u3044\u3063\u3071\u3044.\n\n\n(variable? e) e \u306f\u5909\u6570\u304b?\n\n(same-variable? v1 v2) v1 \u3068 v2 \u306f\u540c\u3058\u5909\u6570\u304b?\n\n(sum? e) e \u306f\u548c\u304b?\n\n(addend e)              \u548c e \u306e\u52a0\u6570 \n\n(augend e)              \u548c e \u306e\u88ab\u52a0\u6570 \n\n(make-sum a1 a2) a1 \u3068 a2 \u306e\u548c\u3092\u69cb\u7bc9\u3059\u308b\n\n(product? e) e \u306f\u7a4d\u304b?\n\n(multiplier e)          \u7a4d e \u306e\u5b9a\u6570\n\n(multiplicand e)        \u7a4d e \u306e\u88ab\u4e57\u6570\n\n(make-product m1 m2) m1 \u3068 m2 \u306e\u7a4d\u3092\u69cb\u7bc9\u3059\u308b\n\n\u30e1\u30a4\u30f3\u306e\u8a18\u53f7\u5fae\u5206\u306e\u5b9f\u88c5\u95a2\u6570\u301c.\nexpression \u306f exp \u3088\u308a expr \u306e\u307b\u3046\u304c\u306a\u3093\u3068\u306a\u304f\u597d\u307f.\n(define (deriv exp var)\n    (cond\n        ((number? exp) 0)\n        ((variable? exp)\n            (if (same-variable? exp var) 1 0))\n        ((sum? exp)\n            (make-sum\n                (deriv (addend exp) var)\n                (deriv (augend exp) var)))\n        ((product? exp)\n            (make-sum\n                (make-product\n                    (multiplier exp)\n                    (deriv (multiplicand exp) var))\n                (make-product\n                    (deriv (multiplier exp) var)\n                    (multiplicand exp))))\n        (else\n            (error \"unknown expression type: DERIV\" exp))))\n\n\nwhile a, b, and c are addends in a+b+c, a is the augend\naugend - Wolfram|Alpha\nin the expression a+b+c, a, b, and c are all addends\naddend - Wolfram|Alpha\n\n\u3080\u3057\u308d augend (\u88ab\u52a0\u6570) \u304c\u5de6\u8fba\u3067 addend (\u52a0\u6570) \u304c\u53f3\u8fba\u306a\u306e\u3067\u306f?\u30fb\u03c9\u30fb;\n\u5f53\u65e5\u306e\u4f1a\u8a71\u3067 a + b \u3092 (+ b a) \u3063\u3066\u8868\u73fe\u3057\u3066\u308b\u306e\u306a\u3089\u6210\u7acb\u3059\u308b!?\u3063\u3066\u601d\u3063\u305f\u3051\u3069, \u554f\u984c\u6587\u3067\u300c ax + b \u306f (+ (* a x) b)\u3068\u8868\u73fe\u3059\u308b\u3053\u3068\u306b\u306a\u308a\u307e\u3059\u300d\u3063\u3066\u3042\u3063\u305f\u3057\u305d\u3046\u3044\u3046\u308f\u3051\u3067\u3082\u306a\u3055\u305d\u3046\uff1d\u03c9\uff1d;\n\u591a\u9805\u5f0f\u306e\u639b\u3051\u7b97\u306e\u5fae\u5206\u3063\u3066\u3053\u3093\u306a\u98a8\u306b\u3067\u304d\u308b\u306e\u306d\u3002\u3082\u306f\u3084\u304b\u3051\u3089\u3082\u8a18\u61b6\u306b\u6b8b\u3063\u3066\u306a\u3044\uff08\uff09\n\n\u4ee3\u6570\u5f0f\u3092\u8868\u73fe\u3059\u308b\n\u30c7\u30fc\u30bf\u69cb\u9020\u7528\u306e\u95a2\u6570\u306e\u5b9f\u88c5.\ncadr \u3068\u304b caddr \u3068\u304b\u3044\u307e\u3044\u3061\u5834\u6240\u628a\u63e1\u3057\u3065\u3089\u3044\u306e\u3067 (list-ref list index) \u306e\u307b\u3046\u4f7f\u3044\u305f\u3044\uff1d\u03c9\uff1d;\n; [sec-2.3.2-a.scm]\n;\n(define (sec-2.3.2-a)\n    (print \"(deriv '(+ x 3) 'x)\")\n    (print \";==> \" (deriv '(+ x 3) 'x))\n    (print \"(deriv '(* x y) 'x)\")\n    (print \";==> \" (deriv '(* x y) 'x))\n    (print \"(deriv '(* (* x y) (+ x 3)) 'x)\")\n    (print \";==> \" (deriv '(* (* x y) (+ x 3)) 'x))\n    #t)\n\n\n; exp=expression\n(define (deriv exp var)\n    (cond\n        ((number? exp) 0)\n        ((variable? exp)\n            (if (same-variable? exp var) 1 0))\n        ((sum? exp)\n            (make-sum\n                (deriv (addend exp) var)\n                (deriv (augend exp) var)))\n        ((product? exp)\n            (make-sum\n                (make-product\n                    (multiplier exp)\n                    (deriv (multiplicand exp) var))\n                (make-product\n                    (deriv (multiplier exp) var)\n                    (multiplicand exp))))\n        (else\n            (error \"unknown expression type: DERIV\" exp))))\n\n\n(define (variable? x) (symbol? x))\n\n\n(define (same-variable? v1 v2)\n    (and\n        (variable? v1)\n        (variable? v2)\n        (eq? v1 v2)))\n\n\n(define (make-sum a1 a2)\n    (list '+ a1 a2))\n\n\n(define (make-product m1 m2)\n    (list '* m1 m2))\n\n\n(define (sum? x)\n    (and (pair? x) (eq? (car x) '+)))\n\n\n(define (addend s)\n    (cadr s))\n\n\n(define (augend s)\n    (caddr s))\n\n\n(define (product? x)\n    (and\n        (pair? x)\n        (eq? (car x) '*)))\n\n\n(define (multiplier p)\n    (cadr p))\n\n\n(define (multiplicand p)\n    (caddr p))\n\n\u5b9f\u884c\u7d50\u679c:\ngosh> (sec-2.3.2-a)\n(deriv '(+ x 3) 'x)\n;==> (+ 1 0)\n(deriv '(* x y) 'x)\n;==> (+ (* x 0) (* 1 y))\n(deriv '(* (* x y) (+ x 3)) 'x)\n;==> (+ (* (* x y) (+ 1 0)) (* (+ (* x 0) (* 1 y)) (+ x 3)))\n#t\n\n\n\u5373\u5024\u90e8\u5206\u3078\u306e\u6f14\u7b97\u5b9f\u884c\n\u524d\u4f5c\u3063\u305f\u95a2\u6570\u3092\u4e0a\u66f8\u304d\u3057\u3066\u308b\u90e8\u5206\u306b\u306a\u3093\u3068\u306a\u304f ; @override \u3068\u304b\u30de\u30fc\u30ab\u30fc\u30b3\u30e1\u30f3\u30c8\u3044\u308c\u3066\u307f\u305f\u308a.\n; [sec-2.3.2-b.scm]\n;\n(define (sec-2.3.2-b)\n    (print \"(deriv '(+ x 3) 'x)\")\n    (print \";==> \" (deriv '(+ x 3) 'x))\n    (print \"(deriv '(* x y) 'x)\")\n    (print \";==> \" (deriv '(* x y) 'x))\n    (print \"(deriv '(* (* x y) (+ x 3)) 'x)\")\n    (print \";==> \" (deriv '(* (* x y) (+ x 3)) 'x))\n    #t)\n\n\n(load \"./sec-2.3.2-a\")\n\n\n; @override\n(define (make-sum a1 a2)\n    (cond\n        ((=number? a1 0) a2)\n        ((=number? a2 0) a1)\n        ((and (number? a1) (number? a2))\n            (+ a1 a2))\n        (else (list '+ a1 a2))))\n\n\n(define (=number? exp num)\n    (and\n        (number? exp)\n        (= exp num)))\n\n\n; @override\n(define (make-product m1 m2)\n    (cond\n        ((or (=number? m1 0) (=number? m2 0)) 0)\n        ((=number? m1 1) m2)\n        ((=number? m2 1) m1)\n        ((and (number? m1) (number? m2))\n            (* m1 m2))\n        (else\n            (list '* m1 m2))))\n\n\u5b9f\u884c\u7d50\u679c:\ngosh> (sec-2.3.2-b)\n(deriv '(+ x 3) 'x)\n;==> 1\n(deriv '(* x y) 'x)\n;==> y\n(deriv '(* (* x y) (+ x 3)) 'x)\n;==> (+ (* x y) (* y (+ x 3)))\n\n\u6700\u521d (+ 1 0) \u306b\u306a\u3063\u3066\u305f\u3068\u3053\u308d\u304c\u5358\u306b 1 \u306b\u306a\u3063\u305f\u308a (* x 0) \u3068\u304b\u6b8b\u3063\u3066\u305f\u306e\u304c\u6d88\u3048\u305f\u308a\u301c.\n(+ (* x y) (* y (+ x 3))) \u306f (x * y) + (y * (x + 3)) \u306a\u306e\u3067 x \u306b\u3064\u3044\u3066\u89e3\u3044\u305f\u3089 2xy + 3y \u306b\u306a\u308b\u3051\u308c\u3069, \u4eca\u56de\u306f\u305d\u3044\u3046\u306e\u306f\u3057\u306a\u3044\u3063\u307d\u3044.\n\nex-2.56. \u7d2f\u4e57\u306e\u5fae\u5206\n\u7d2f\u4e57\u304c expt \u306a\u306e\u5730\u5473\u306b\u3044\u3064\u3082\u5fd8\u308c\u3066\u308b\uff1d\u03c9\uff1d;\n\n\u5b9f\u88c5\n; [ex-2.56.scm]\n;\n(define (ex-2.56)\n    (print \"(deriv '(* a (** x 3)) 'x)\")\n    (print \";==> \" (deriv '(* a (** x 3)) 'x))\n    (print \"(deriv '(* a (** x (** x 5))) 'x)\")\n    (print \";==> \" (deriv '(* a (** x (** x 5))) 'x))\n    #t)\n\n\n(load \"./sec-2.3.2-b\")\n\n\n(define (exponentiation? x)\n    (and (pair? x) (eq? (car x) '**)))\n\n\n(define (base x)\n    (cadr x))\n\n\n(define (exponent x)\n    (caddr x))\n\n\n(define (make-exponent x y)\n    (cond\n        ((=number? y 0) 1)\n        ((=number? y 1) x)\n        ((and (number? x) (number? y)) (expt x y))\n        (else (list '** x y))))\n\n\n; @override\n(define (deriv exp var)\n    (cond\n        ((number? exp) 0)\n        ((variable? exp)\n            (if (same-variable? exp var) 1 0))\n        ((sum? exp)\n            (make-sum\n                (deriv (addend exp) var)\n                (deriv (augend exp) var)))\n        ((product? exp)\n            (make-sum\n                (make-product\n                    (multiplier exp)\n                    (deriv (multiplicand exp) var))\n                (make-product\n                    (deriv (multiplier exp) var)\n                    (multiplicand exp))))\n        ((exponentiation? exp)\n            (make-product\n                (exponent exp)\n                (make-product\n                    (make-exponent (base exp) (make-sum (exponent exp) -1))\n                    (deriv (base exp) var))))\n        (else\n            (error \"unknown expression type: DERIV\" exp))))\n\n\n\u5b9f\u884c\u7d50\u679c\ngosh> (ex-2.56)\n(deriv '(* a (** x 3)) 'x)\n;==> (* a (* 3 (** x 2)))\n(deriv '(* a (** x (** x 5))) 'x)\n;==> (* a (* (** x 5) (** x (+ (** x 5) -1))))\n\n\nex-2.57. \u88ab\u6f14\u7b97\u5b50\u3092\u53ef\u5909\u9577\u5f15\u6570\u306b\nhandle sums and products of arbitrary numbers of terms \u3068\u3044\u3046\u306e\u306d.\n\n\u4f8b\u3048\u3070\u3001\u548c\u306e addend (\u52a0\u6570) \u306f\u6700\u521d\u306e\u9805\u3067\u3001 augend (\u88ab\u52a0\u6570) \u306f\u6b8b\u308a\u306e\u9805\u306e\u548c\u3068\u3044\u3046\u3088\u3046\u306b\u3059\u308b\u3002\n\n\u3068\u3042\u308b\u3051\u308c\u3069, augend \u306e\u65b9\u306f\u5f0f\u304c\u3061\u3087\u3046\u30692\u9805\u3060\u3063\u305f\u5834\u5408\u306f\u53f3\u8fba\u5024\u3092\u305d\u306e\u307e\u307e,\n3\u9805\u4ee5\u4e0a\u306e\u5834\u5408\u306f2\u9805\u76ee\u4ee5\u964d\u306e\u90e8\u5206\u306e\u5f0f\u3068\u3044\u3046\u98a8\u306b\u5b9f\u88c5\u3057\u3066\u307f\u305f.\n\u3053\u3093\u306a\u611f\u3058:\n(addend '(+ a b)   ;==> a\n(augend '(+ a b)   ;==> b\n(augend '(+ a b c) ;==> (+ b c)\n\n\u4e57\u7b97\u3068, \u554f\u984c\u6587\u306b\u306f\u306a\u304b\u3063\u305f\u3051\u308c\u3069\u7d2f\u4e57\u3082\u3064\u3044\u3067\u306b.\n\n\u5b9f\u88c5\n; [ex-2.57.scm]\n;\n(define (ex-2.57)\n    (print \"(addend '(+ a b)\")\n    (print \";==> \" (addend '(+ a b)))\n    (print \"(augend '(+ a b)\")\n    (print \";==> \" (augend '(+ a b)))\n    (print \"(augend '(+ a b c)\")\n    (print \";==> \" (augend '(+ a b c)))\n\n    (newline)\n    (print \"(multiplier '(* a b)\")\n    (print \";==> \" (multiplier '(* a b)))\n    (print \"(multiplicand '(* a b)\")\n    (print \";==> \" (multiplicand '(* a b)))\n    (print \"(multiplicand '(* a b c)\")\n    (print \";==> \" (multiplicand '(* a b c)))\n\n    (newline)\n    (print \"(base '(** a b)\")\n    (print \";==> \" (base '(** a b)))\n    (print \"(exponent '(** a b)\")\n    (print \";==> \" (exponent '(** a b)))\n    (print \"(exponent '(** a b c)\")\n    (print \";==> \" (exponent '(** a b c)))\n\n    (newline)\n    (print \"(deriv '(* x y (+ x 3)) 'x)\")\n    (print \";==> \" (deriv '(* x y (+ x 3)) 'x))\n\n    (newline)\n    (print \"(deriv '(* a (** x 3)) 'x)\")\n    (print \";==> \" (deriv '(* a (** x 3)) 'x))\n    (print \"(deriv '(* a (** x x 5)) 'x)\")\n    (print \";==> \" (deriv '(* a (** x x 5)) 'x))\n    #t)\n\n\n(load \"./ex-2.56\")\n\n\n; @override\n(define (addend s)\n    (cadr s))\n\n\n; @override\n(define (augend s)\n    (if\n        (null? (cdddr s))\n        ; 2\u9805\u306e\u307f.\n        (caddr s)\n        ; 3\u9805\u4ee5\u4e0a.\n        (cons '+ (cddr s))))\n\n\n; @override\n(define (make-sum a1 a2)\n    (cond\n        ((=number? a1 0) a2)\n        ((=number? a2 0) a1)\n        ((and (number? a1) (number? a2))\n            (+ a1 a2))\n\n        ((sum? a1)\n            (if\n                (sum? a2)\n                ; both a1 and a2 are sum.\n                (append '(+) (cdr a1) (cdr a2))\n                ; a1 is a sum, but a2 is not a sum.\n                (append '(+) (cdr a1) (list a2))))\n        ((sum? a2)\n            ; a1 is not a sum, but a2 is a sum.\n            (append '(+) (list a1) (cdr a2)))\n        (else\n            ; both a1 and a2 are not sum.\n            (list '+ a1 a2))))\n\n\n; @override\n(define (multiplier p)\n    (cadr p))\n\n\n; @override\n(define (multiplicand p)\n    (if\n        (null? (cdddr p))\n        ; 2\u9805\u306e\u307f.\n        (caddr p)\n        ; 3\u9805\u4ee5\u4e0a.\n        (cons '* (cddr p))))\n\n\n; @override\n(define (make-product m1 m2)\n    (cond\n        ((or (=number? m1 0) (=number? m2 0)) 0)\n        ((=number? m1 1) m2)\n        ((=number? m2 1) m1)\n        ((and (number? m1) (number? m2))\n            (* m1 m2))\n\n        ((product? m1)\n            (if\n                (product? m2)\n                ; both m1 and m2 are product.\n                (append '(*) (cdr m1) (cdr m2))\n                ; m1 is a product, but m2 is not a product.\n                (append '(*) (cdr m1) (list m2))))\n        ((product? m2)\n            ; m1 is not a product, but m2 is a product.\n            (append '(*) (list m1) (cdr m2)))\n        (else\n            ; both m1 and m2 are not product.\n            (list '* m1 m2))))\n\n\n; @override\n(define (base x)\n    (cadr x))\n\n\n; @override\n(define (exponent x)\n    (if\n        (null? (cdddr x))\n        ; 2\u9805\u306e\u307f.\n        (caddr x)\n        ; 3\u9805\u4ee5\u4e0a.\n        (cons '** (cddr x))))\n\n\n; @override\n(define (make-exponent x y)\n    (cond\n        ((=number? y 0) 1)\n        ((=number? y 1) x)\n        ((and (number? x) (number? y)) (expt x y))\n\n        ((exponentiation? x)\n            (if\n                (exponentiation? y)\n                ; both x and y are product.\n                (append '(**) (cdr x) (cdr y))\n                ; x is a product, but y is not a product.\n                (append '(**) (cdr x) (list y))))\n        ((exponentiation? y)\n            ; x is not a product, but y is a product.\n            (append '(**) (list x) (cdr y)))\n        (else\n            ; both x and y are not product.\n            (list '** x y))))\n\n\n\u5b9f\u884c\u7d50\u679c\ngosh> (ex-2.57)\n(addend '(+ a b)\n;==> a\n(augend '(+ a b)\n;==> b\n(augend '(+ a b c)\n;==> (+ b c)\n\n(multiplier '(* a b)\n;==> a\n(multiplicand '(* a b)\n;==> b\n(multiplicand '(* a b c)\n;==> (* b c)\n\n(base '(** a b)\n;==> a\n(exponent '(** a b)\n;==> b\n(exponent '(** a b c)\n;==> (** b c)\n\n(deriv '(* x y (+ x 3)) 'x)\n;==> (+ (* x y) (* y (+ x 3)))\n\n(deriv '(* a (** x 3)) 'x)\n;==> (* a 3 (** x 2))\n(deriv '(* a (** x x 5)) 'x)\n;==> (* a (** x 5) (** x (+ (** x 5) -1)))\n\n\nex-2.57. \u304a\u307e\u3051. \u91cd\u8907\u90e8\u5206\u306e\u5171\u901a\u5316.\n\u52a0\u7b97\u30fb\u4e57\u7b97\u30fb\u7d2f\u4e57\u3067\u540c\u3058\u3088\u3046\u306a\u3053\u3068\u3057\u3066\u308b\u3068\u3053\u304c\u3061\u3089\u307b\u3089\u3042\u308b\u306e\u3067\u5171\u901a\u5316\u3057\u3066\u307f\u305f.\n\u3055\u3044\u3057\u3087\u3044\u3058\u3063\u3066\u3066\u3046\u307e\u304f\u52d5\u304b\u306a\u304f\u3066\u3059\u3063\u3054\u304f\u306a\u3084\u3093\u3060\u3051\u308c\u3069,\n(define (make-sum a1 a2)\n    (cond\n        ((=number? a1 0) a2)\n        ((=number? a2 0) a1)\n        ((and (number? a1) (number? a2))\n            (+ a1 a2))\n\n        (bin-expr-append '+ a1 a2)))\n\n\u3053\u3093\u306a\u306a\u3063\u3066\u305f\u3051\u3069\u3046\u3054\u304f\u306e\u306d\u3053\u308c\u2026\uff1e\uff1c\uff1b\n\n\nbin-expr-append \u304c else \u3058\u3083\u306a\u3044\u304b\u3089\u4ed6\u306e\u6761\u4ef6\u53e5\u3068\u540c\u3058\u3088\u3046\u306b\u666e\u901a\u306b\u8a55\u4fa1\n\u8a55\u4fa1\u7d50\u679c: #<closure bin-expr-append>\n\n\n#f \u3058\u3083\u306a\u3044\u306e\u3067\u771f\u306e\u6271\u3044\n\n((...) expr1 expr2 expr3 ...) \u306a cond \u30d1\u30e9\u30e1\u30fc\u30bf\u306b\u30de\u30c3\u30c1\u3057\u305f\u3064\u3082\u308a\u3067\u3053\u3053\u306b\u5206\u5c90\n\n'+, a1, a2 \u3092\u9806\u306b\u8a55\u4fa1\n\n'+, a1 \u306f\u526f\u4f5c\u7528\u6301\u305f\u306a\u3044\u306e\u3067\u5b9f\u884c\u7d50\u679c\u306b\u306f\u3067\u3066\u3053\u306a\u3044\u3067\u307b\u307c\u7121\u8996\u72b6\u614b\n\u6700\u5f8c\u306e\u8a55\u4fa1\u7d50\u679c\u3067\u3042\u308b a2 \u304c\u305d\u306e\u307e\u307e\u95a2\u6570\u306e\u5b9f\u884c\u7d50\u679c\u3068\u3057\u3066\u8fd4\u308b\n\n\u305d\u3057\u3066\u3070\u3050\u30fc\uff1d\u03c9\uff1d;\nLisp \u3055\u3093\u578b\u3082\u69cb\u6587\u3082\u3086\u308b\u3075\u308f\u2026\n\n\u5b9f\u88c5\n; [ex-2.57-bin-expr]\n;\n(define (ex-2.57-bin-expr)\n    (print \"(addend '(+ a b)\")\n    (print \";==> \" (addend '(+ a b)))\n    (print \"(augend '(+ a b)\")\n    (print \";==> \" (augend '(+ a b)))\n    (print \"(augend '(+ a b c)\")\n    (print \";==> \" (augend '(+ a b c)))\n\n    (newline)\n    (print \"(multiplier '(* a b)\")\n    (print \";==> \" (multiplier '(* a b)))\n    (print \"(multiplicand '(* a b)\")\n    (print \";==> \" (multiplicand '(* a b)))\n    (print \"(multiplicand '(* a b c)\")\n    (print \";==> \" (multiplicand '(* a b c)))\n\n    (newline)\n    (print \"(base '(** a b)\")\n    (print \";==> \" (base '(** a b)))\n    (print \"(exponent '(** a b)\")\n    (print \";==> \" (exponent '(** a b)))\n    (print \"(exponent '(** a b c)\")\n    (print \";==> \" (exponent '(** a b c)))\n\n    (newline)\n    (print \"(deriv '(* x y (+ x 3)) 'x)\")\n    (print \";==> \" (deriv '(* x y (+ x 3)) 'x))\n\n    (newline)\n    (print \"(deriv '(* a (** x 3)) 'x)\")\n    (print \";==> \" (deriv '(* a (** x 3)) 'x))\n    (print \"(deriv '(* a (** x x 5)) 'x)\")\n    (print \";==> \" (deriv '(* a (** x x 5)) 'x))\n    #t)\n\n\n(load \"./ex-2.56\")\n\n\n(define (bin-expr-of? op expr)\n    (and (pair? expr) (eq? (car expr) op)))\n\n\n(define (bin-expr-op expr)\n    (car expr))\n\n\n(define (bin-expr-lhs expr)\n    (cadr expr))\n\n\n(define (bin-expr-rhs expr)\n    (if\n        (null? (cdddr expr))\n        ; 2\u9805\u306e\u307f.\n        (caddr expr)\n        ; 3\u9805\u4ee5\u4e0a.\n        (cons (bin-expr-op expr) (cddr expr))))\n\n\n(define (bin-expr-append op expr1 expr2)\n    (cond\n        ((bin-expr-of? op expr1)\n            (if\n                (bin-expr-of? op expr2)\n                ; both expr1 and expr2 are bin-expr of 'op'.\n                (append (list op) (cdr expr1) (cdr expr2))\n                ; expr1 is a bin-expr of 'op', but expr2 is not a bin-expr of 'op'.\n                (append (list op) (cdr expr1) (list expr2))))\n        ((bin-expr-of? op expr2)\n            ; expr1 is not a bin-expr of 'op', but expr2 is a bin-expr of 'op'.\n            (append (list op) (list expr1) (cdr expr2)))\n        (else\n            ; both expr1 and expr2 are not bin-expr of 'op'.\n            (list op expr1 expr2))))\n\n\n; @override\n(define (addend s)\n    (bin-expr-lhs s))\n\n\n; @override\n(define (augend s)\n    (bin-expr-rhs s))\n\n\n; @override\n(define (make-sum a1 a2)\n    (cond\n        ((=number? a1 0) a2)\n        ((=number? a2 0) a1)\n        ((and (number? a1) (number? a2))\n            (+ a1 a2))\n\n        (else (bin-expr-append '+ a1 a2))))\n\n\n; @override\n(define (multiplier p)\n    (bin-expr-lhs p))\n\n\n; @override\n(define (multiplicand p)\n    (bin-expr-rhs p))\n\n\n; @override\n(define (make-product m1 m2)\n    (cond\n        ((or (=number? m1 0) (=number? m2 0)) 0)\n        ((=number? m1 1) m2)\n        ((=number? m2 1) m1)\n        ((and (number? m1) (number? m2))\n            (* m1 m2))\n\n        (else (bin-expr-append '* m1 m2))))\n\n\n; @override\n(define (base x)\n    (bin-expr-lhs x))\n\n\n; @override\n(define (exponent x)\n    (bin-expr-rhs x))\n\n\n; @override\n(define (make-exponent x y)\n    (cond\n        ((=number? y 0) 1)\n        ((=number? y 1) x)\n        ((and (number? x) (number? y)) (expt x y))\n\n        (else (bin-expr-append '** x y))))\n\n\n\u5b9f\u884c\u7d50\u679c\n\u7d50\u679c\u306f\u5909\u308f\u3089\u306a\u3044\u3051\u308c\u3069\uff1e\u03c9\uff1c\ngosh> (ex-2.57-bin-expr)\n(addend '(+ a b)\n;==> a\n(augend '(+ a b)\n;==> b\n(augend '(+ a b c)\n;==> (+ b c)\n\n(multiplier '(* a b)\n;==> a\n(multiplicand '(* a b)\n;==> b\n(multiplicand '(* a b c)\n;==> (* b c)\n\n(base '(** a b)\n;==> a\n(exponent '(** a b)\n;==> b\n(exponent '(** a b c)\n;==> (** b c)\n\n(deriv '(* x y (+ x 3)) 'x)\n;==> (+ (* x y) (* y (+ x 3)))\n\n(deriv '(* a (** x 3)) 'x)\n;==> (* a 3 (** x 2))\n(deriv '(* a (** x x 5)) 'x)\n;==> (* a (** x 5) (** x (+ (** x 5) -1)))\n\n\nex-2.58. (a) \u4e2d\u7f6e\u8a18\u6cd5\nLisp \u7684\u306a (+ 'a 'b) \u304b\u3089\u666e\u901a\u306e\u6570\u5f0f\u7684\u306a ('a + 'b) \u306b.\n\u3072\u3068\u307e\u305a\u306f\u540c\u3058\u62ec\u5f27\u306e\u30ec\u30d9\u30eb\u306a\u304b\u306f1\u3064\u306e\u6f14\u7b97\u5b50\u3060\u3051\u306a\u5236\u7d04\u3067. Lisp \u306e\u6642\u3068\u540c\u3058\u3088\u3046\u306b.\n\n\u5b9f\u88c5\n; [ex-2.58-a.scm]\n;\n(define (ex-2.58-a)\n    (print \"(addend '(a + b))\")\n    (print \";==> \" (addend '(a + b)))\n    (print \"(augend '(a + b))\")\n    (print \";==> \" (augend '(a + b)))\n    (print \"(augend '(a + b + c))\")\n    (print \";==> \" (augend '(a + b + c)))\n\n    (newline)\n    (print \"(multiplier '(a * b))\")\n    (print \";==> \" (multiplier '(a * b)))\n    (print \"(multiplicand '(a * b))\")\n    (print \";==> \" (multiplicand '(a * b)))\n    (print \"(multiplicand '(a * b * c))\")\n    (print \";==> \" (multiplicand '(a * b * c)))\n\n    (newline)\n    (print \"(base '(a ** b))\")\n    (print \";==> \" (base '(a ** b)))\n    (print \"(exponent '(a ** b))\")\n    (print \";==> \" (exponent '(a ** b)))\n    (print \"(exponent '(a ** b ** c))\")\n    (print \";==> \" (exponent '(a ** b ** c)))\n\n    (newline)\n    (print \"(deriv '(x * y * (x + 3)) 'x)\")\n    (print \";==> \" (deriv '(x * y * (x + 3)) 'x))\n\n    (newline)\n    (print \"(deriv '(a * (x ** 3)) 'x)\")\n    (print \";==> \" (deriv '(a * (x ** 3)) 'x))\n    (print \"(deriv '(a * (x ** x ** 5)) 'x)\")\n    (print \";==> \" (deriv '(a * (x ** x ** 5)) 'x))\n    #t)\n\n\n(load \"./ex-2.56\")\n\n\n(define (bin-expr-of? op expr)\n    (and (pair? expr) (pair? (cdr expr)) (eq? (cadr expr) op)))\n\n\n(define (bin-expr-op expr)\n    (cadr expr))\n\n\n(define (bin-expr-lhs expr)\n    (car expr))\n\n\n(define (bin-expr-rhs expr)\n    (if\n        (null? (cdddr expr))\n        ; 2\u9805\u306e\u307f.\n        (caddr expr)\n        ; 3\u9805\u4ee5\u4e0a.\n        (cddr expr)))\n\n\n(define (bin-expr-append op expr1 expr2)\n    (cond\n        ((bin-expr-of? op expr1)\n            (if\n                (bin-expr-of? op expr2)\n                ; both expr1 and expr2 are bin-expr of 'op'.\n                (append (cdr expr1) (list op) (cdr expr2))\n                ; expr1 is a bin-expr of 'op', but expr2 is not a bin-expr of 'op'.\n                (append (cdr expr1) (list op) (list expr2))))\n        ((bin-expr-of? op expr2)\n            ; expr1 is not a bin-expr of 'op', but expr2 is a bin-expr of 'op'.\n            (append (list expr1) (list op) (cdr expr2)))\n        (else\n            ; both expr1 and expr2 are not bin-expr of 'op'.\n            (list expr1 op expr2))))\n\n\n; @override\n(define (sum? s)\n    (bin-expr-of? '+ s))\n\n\n; @override\n(define (addend s)\n    (bin-expr-lhs s))\n\n\n; @override\n(define (augend s)\n    (bin-expr-rhs s))\n\n\n; @override\n(define (make-sum a1 a2)\n    (cond\n        ((=number? a1 0) a2)\n        ((=number? a2 0) a1)\n        ((and (number? a1) (number? a2))\n            (+ a1 a2))\n\n        (else (bin-expr-append '+ a1 a2))))\n\n\n; @override\n(define (product? p)\n    (bin-expr-of? '* p))\n\n\n; @override\n(define (multiplier p)\n    (bin-expr-lhs p))\n\n\n; @override\n(define (multiplicand p)\n    (bin-expr-rhs p))\n\n\n; @override\n(define (make-product m1 m2)\n    (cond\n        ((or (=number? m1 0) (=number? m2 0)) 0)\n        ((=number? m1 1) m2)\n        ((=number? m2 1) m1)\n        ((and (number? m1) (number? m2))\n            (* m1 m2))\n\n        (else (bin-expr-append '* m1 m2))))\n\n\n; @override\n(define (exponentiation? x)\n    (bin-expr-of? '** x))\n\n\n; @override\n(define (base x)\n    (bin-expr-lhs x))\n\n\n; @override\n(define (exponent x)\n    (bin-expr-rhs x))\n\n\n; @override\n(define (make-exponent x y)\n    (cond\n        ((=number? y 0) 1)\n        ((=number? y 1) x)\n        ((and (number? x) (number? y)) (expt x y))\n\n        (else (bin-expr-append '** x y))))\n\n\n\u5b9f\u884c\u7d50\u679c\ngosh> (ex-2.58-a)\n(addend '(a + b))\n;==> a\n(augend '(a + b))\n;==> b\n(augend '(a + b + c))\n;==> (b + c)\n\n(multiplier '(a * b))\n;==> a\n(multiplicand '(a * b))\n;==> b\n(multiplicand '(a * b * c))\n;==> (b * c)\n\n(base '(a ** b))\n;==> a\n(exponent '(a ** b))\n;==> b\n(exponent '(a ** b ** c))\n;==> (b ** c)\n\n(deriv '(x * y * (x + 3)) 'x)\n;==> ((x * y) + (y * (x + 3)))\n\n(deriv '(a * (x ** 3)) 'x)\n;==> (a * * (x ** 2))\n(deriv '(a * (x ** x ** 5)) 'x)\n;==> (a * * (x ** ((x ** 5) + -1)))\n\n\nex-2.58. (b) \u6f14\u7b97\u5b50\u306e\u6df7\u5408\u914d\u7f6e\n\u540c\u3058\u62ec\u5f27\u5185\u3067\u3082\u512a\u5148\u9806\u4f4d\u7684\u306b\u554f\u984c\u7121\u3044\u5834\u5408\u306f\u7570\u306a\u308b\u6f14\u7b97\u5b50\u306e\u5834\u5408\u3067\u3082\u62ec\u5f27\u3092\u7701\u7565\u3059\u308b\u3088\u3046\u306a\u5bfe\u5fdc.\n\u3053\u3093\u306a\u306e:\n(make-product (make-sum 'a 'b) (make-sum 'c 'd))\n;==> ((a + b) * (c + d))\n(make-sum (make-product 'a 'b) (make-product 'c 'd))\n;==> (a * b + c * d)\n\n\u3053\u306e\u554f\u984c\u3063\u3066\u3057\u308c\u3063\u3068\u512a\u5148\u9806\u4f4d\u306e\u5bfe\u5fdc\u4ee5\u5916\u306b, (a + b) \u306e2\u9805\u5f0f\u306e\u307f\u3060\u3063\u305f\u306e\u3092 (a + b + c) \u307f\u305f\u3044\u306a3\u9805\u4ee5\u4e0a\u306e\u5f0f\u306b\u5bfe\u5fdc\u3059\u308b\u306e\u304c\u4e00\u7dd2\u306b\u5165\u3063\u3066\u308b\u306e\u306d\u30fb\u03c9\u30fb;\n\u8907\u6570\u306e\u6f14\u7b97\u5b50\u304c1\u3064\u306e\u62ec\u5f27\u5185\u306b\u6df7\u5728\u3057\u3066\u3044\u308b\u306e\u3067, \u512a\u5148\u5ea6\u306e\u4f4e\u3044\u6f14\u7b97\u5b50\u304c\u3042\u3063\u305f\u3089\u5148\u306b\u305d\u3053\u3067\u5206\u5272\u3059\u308b\u3053\u3068\u3067, \u512a\u5148\u5ea6\u306e\u9ad8\u3044\u6f14\u7b97\u5b50\u304c\u5148\u306b\u9805\u5185\u3067\u6f14\u7b97\u3055\u308c\u305f\u5f8c\u306b, \u512a\u5148\u5ea6\u306e\u4f4e\u3044\u6f14\u7b97\u5b50\u3067\u51e6\u7406\u3055\u308c\u308b\u3088\u3046\u306b\u306a\u308b.\n\u512a\u5148\u9806\u4f4d\u306b\u5fdc\u3058\u305f\u51e6\u7406\u9806\u306f\u6700\u521d\u304b\u3089\u3061\u3087\u3046\u3069\u3044\u3044\u9806\u756a\u306b\u306a\u3063\u3066\u308b\u3063\u307d\u3044.\n\u4f8b. a * b + c \u306e\u5834\u5408:\n\n\u512a\u5148\u5ea6\u306e\u4f4e\u3044 + \u304c\u3042\u308b\n\nsum? \u304c\u771f\n\u52a0\u7b97\u3068\u3057\u3066\u306e\u51e6\u7406\u306b\u5206\u5c90\n(addend expr) ==> lhs ==> a * b\n(augend expr) ==> rhs ==> c\nlhs \u53ca\u3073 rhs \u3067\u306f\u5206\u5272\u5bfe\u8c61\u3068\u3059\u308b\u6f14\u7b97\u5b50\u304c\u5fc5\u305a\u542b\u307e\u308c\u3066\u3044\u308b\u4e8b\u524d\u6761\u4ef6\u3092\u6e80\u305f\u3059\u3068\u3059\u308b.\n\u9006\u306b, \u52a0\u7b97\u3067\u306a\u3044\u5834\u5408 (sum? \u304c\u507d\u306e\u5834\u5408) \u306b\u306f addend, augend \u306f\u547c\u3070\u308c\u308b\u3053\u3068\u306f\u306a\u3044\n\u52a0\u7b97\u3067\u306a\u3044\u5834\u5408\u306f, \u6b21\u306b\u512a\u5148\u5ea6\u306e\u4f4e\u3044\u4e57\u7b97 (product?) \u306b\u3066\u540c\u69d8\u306b.\n\u3055\u3089\u306b\u540c\u69d8\u306b\u7d2f\u4e57 (exponentiation?) \u306b\u3066\u540c\u69d8\u306b.\n\n\u305d\u3093\u306a\u304b\u3093\u3058.\n\u7279\u5b9a\u306e\u6f14\u7b97\u5b50\u90e8\u5206\u3067 lhs op rhs \u306b\u5206\u5272\u3059\u308b\u51e6\u7406\u3092 expr op expr op ... op expr \u306a\u69cb\u9020\u306e op \u90e8\u5206\u306e\u4e00\u81f4\u3092\u3057\u3089\u3079\u3066\u3044\u3063\u305f\u3051\u3069, expr \u90e8\u5206\u306b\u6f14\u7b97\u5b50\u304c\u51fa\u3066\u304f\u308b\u3053\u3068\u306f\u306a\u3044\u304b\u3089\u7247\u3063\u7aef\u304b\u3089 expr \u304b op \u304b\u3082\u6c17\u306b\u305b\u305a\u306b\u5224\u5b9a\u3057\u3066\u3044\u3063\u3066\u3082\u554f\u984c\u306a\u304b\u3063\u305f\u307d\u3044. \u306a\u308b\u307b\u3069\u301c\u30fb\u03c9\u30fb*\n\n\u5b9f\u88c5\n; [ex-2.58-b.scm]\n;\n(define (ex-2.58-b)\n    (print \"(make-product (make-sum 'a 'b) (make-sum 'c 'd))\")\n    (print \";==> \" (make-product (make-sum 'a 'b) (make-sum 'c 'd)))\n    (print \"(make-sum (make-product 'a 'b) (make-product 'c 'd))\")\n    (print \";==> \" (make-sum (make-product 'a 'b) (make-product 'c 'd)))\n\n    (newline)\n    (print \"(deriv '(x * y * (x + 3)) 'x)\")\n    (print \";==> \" (deriv '(x * y * (x + 3)) 'x))\n\n    (newline)\n    (print \"(deriv '(a * (x ** 3)) 'x)\")\n    (print \";==> \" (deriv '(a * (x ** 3)) 'x))\n    (print \"(deriv '(a * (x ** x ** 5)) 'x)\")\n    (print \";==> \" (deriv '(a * (x ** x ** 5)) 'x))\n    #t)\n\n\n(load \"./ex-2.56\")\n\n\n(define (bin-expr-of? op expr)\n    (and\n        (pair? expr)       ; (lhs . _)\n        (pair? (cdr expr)) ; (lhs . op . _)\n        (or\n            (eq? (cadr expr) op)             ; op match?\n            (bin-expr-of? op (cddr expr))))) ; recursion.\n\n\n(define (bin-expr-lhs op expr)\n    (define (iter op rest left)\n        (cond\n            ((null? rest) ; never seen the op.\n                (error \"operator not found: \" op \" in \" (reverse left)))\n            ((eq? (car rest) op) ; same op?\n                ; split at here.\n                (if\n                    (null? (cdr left)) ; lhs is a singleton?\n                    (car left)         ; singleton.\n                    (reverse left)))   ; compound.\n            (else\n                (iter op (cddr rest) (append (list (cadr rest) (car rest)) left)))))\n\n    (iter op (cdr expr) (list (car expr))))\n\n\n(define (bin-expr-rhs op expr)\n    (define (iter op rest)\n        (if\n            (eq? (car rest) op)\n            (if  ; the op found. split at here.\n                (null? (cddr rest)) ; rhs is a singleton?\n                (cadr rest)         ; singleton.\n                (cdr rest))         ; compound.\n            (iter op (cddr rest))))\n\n    (iter op (cdr expr)))\n\n\n(define (bin-expr-append paren-if? op expr1 expr2)\n    (define (inner op expr1 expr2)\n        (cond\n            ((and (pair? expr1) (pair? expr2))\n                (append expr1 (list op) expr2))\n            ((and (pair? expr1) (not (pair? expr2)))\n                (append expr1 (list op) (list expr2)))\n            ((and (not (pair? expr1)) (pair? expr2))\n                (append (list expr1) (list op) expr2))\n            ((and (not (pair? expr1)) (not (pair? expr2)))\n                (list expr1 op expr2))\n            (else\n                (error \"NEVER REACH HERE:\" op expr1 expr2))))\n\n    (define (do-paren-if expr)\n        (cond\n            ((not (paren-if? expr))\n                expr)\n            ((not (list? expr))\n                expr)\n            (else\n                (list expr)))) ; enparen.\n\n    (inner op (do-paren-if expr1) (do-paren-if expr2)))\n\n\n; @override\n(define (sum? s)\n    (bin-expr-of? '+ s))\n\n\n; @override\n(define (addend s)\n    (bin-expr-lhs '+ s))\n\n\n; @override\n(define (augend s)\n    (bin-expr-rhs '+ s))\n\n\n; @override\n(define (make-sum a1 a2)\n    ; parens are never required.\n    (define (never e) #f)\n\n    (cond\n        ((=number? a1 0) a2)\n        ((=number? a2 0) a1)\n        ((and (number? a1) (number? a2))\n            (+ a1 a2))\n\n        (else (bin-expr-append never '+ a1 a2))))\n\n\n; @override\n(define (product? p)\n    (bin-expr-of? '* p))\n\n\n; @override\n(define (multiplier p)\n    (bin-expr-lhs '* p))\n\n\n; @override\n(define (multiplicand p)\n    (bin-expr-rhs '* p))\n\n\n; @override\n(define (make-product m1 m2)\n    (cond\n        ((or (=number? m1 0) (=number? m2 0)) 0)\n        ((=number? m1 1) m2)\n        ((=number? m2 1) m1)\n        ((and (number? m1) (number? m2))\n            (* m1 m2))\n\n        (else (bin-expr-append sum? '* m1 m2))))\n\n\n; @override\n(define (exponentiation? x)\n    (bin-expr-of? '** x))\n\n\n; @override\n(define (base x)\n    (bin-expr-lhs '** x))\n\n\n; @override\n(define (exponent x)\n    (bin-expr-rhs '** x))\n\n\n; @override\n(define (make-exponent x y)\n    (define (sum-or-product? x)\n        (or (sum? x) (product? x)))\n\n    (cond\n        ((=number? y 0) 1)\n        ((=number? y 1) x)\n        ((and (number? x) (number? y)) (expt x y))\n\n        (else (bin-expr-append sum-or-product? '** x y))))\n\n\n\u5b9f\u884c\u7d50\u679c\ngosh> (ex-2.58-b)\n(make-product (make-sum 'a 'b) (make-sum 'c 'd))\n;==> ((a + b) * (c + d))\n(make-sum (make-product 'a 'b) (make-product 'c 'd))\n;==> (a * b + c * d)\n\n(deriv '(x * y * (x + 3)) 'x)\n;==> (x * y + y * (x + 3))\n\n(deriv '(a * (x ** 3)) 'x)\n;==> (a * 3 * x ** 2)\n(deriv '(a * (x ** x ** 5)) 'x)\n;==> (a * x ** 5 * x ** (x ** 5 + -1))\n\n\n\u304a\u307e\u3051: \u6bd4\u8f03\u7528\u306b\u5171\u901a\u5316\u3057\u305f\u51e6\u7406\u3092\u5c55\u958b\u3057\u305f\u30b3\u30fc\u30c9\n\u3084\u3063\u3064\u3051\u3067\u52a0\u7b97\u306e\u3068\u3053\u3060\u3051\u3056\u304f\u3063\u3068\u624b\u3067\u5c55\u958b\u3057\u3066\u307f\u305f. \u3042\u3063\u3066\u308b\u304b\u306f\u77e5\u3089\u306a\u3044\uff1e\u03c9\uff1c\n; @override\n(define (sum? expr)\n    ; (bin-expr-of? '+ expr))\n    (and\n        (pair? expr)       ; expr=(lhs . _)      = (car . cdr)\n        (pair? (cdr expr)) ; expr=(lhs . op . _) = (car . cadr . cddr )\n        (or\n            (eq? (cadr expr) '+)  ; op match?\n            (sum? (cddr expr))))) ; recursion.\n\n\n; @override\n(define (addend expr)\n    ; (bin-expr-lhs '+ expr))\n    (define (iter rest left)\n        (cond\n            ((null? rest) ; never seen the op.\n                (error \"operator not found: '+' in \" (reverse left)))\n            ((eq? (car rest) '+) ; same op?\n                ; split at here.\n                (if\n                    (null? (cdr left)) ; lhs is a singleton?\n                    (car left)         ; singleton.\n                    (reverse left)))   ; compound.\n            (else\n                (iter (cddr rest) (append (list (cadr rest) (car rest)) left)))))\n\n    (iter (cdr expr) (list (car expr))))\n\n\n; @override\n(define (augend expr)\n    ; (bin-expr-rhs '+ expr))\n    (define (iter rest)\n        (if\n            (eq? (car rest) '+)\n            (if  ; the op found. split at here.\n                (null? (cddr rest)) ; rhs is a singleton?\n                (cadr rest)         ; singleton.\n                (cdr rest))         ; compound.\n            (iter (cddr rest))))\n\n    (iter (cdr expr)))\n\n\n; @override\n(define (make-sum a1 a2)\n    (cond\n        ((=number? a1 0) a2)\n        ((=number? a2 0) a1)\n        ((and (number? a1) (number? a2))\n            (+ a1 a2))\n\n        (else\n            ; (bin-expr-append never '+ a1 a2)\n            (cond\n                ((and (pair? a1) (pair? a2))\n                    (append a1 (list '+) a2))\n                ((and (pair? a1) (not (pair? a2)))\n                    (append a1 (list '+) (list a2)))\n                ((and (not (pair? a1)) (pair? a2))\n                    (append (list a1) (list '+) a2))\n                ((and (not (pair? a1)) (not (pair? a2)))\n                    (list a1 '+ a2))\n                (else\n                    (error \"NEVER REACH HERE:\" '+ a1 a2))))))\n\n\n\u304a\u307e\u3051 (2): \u6f14\u7b97\u5b50\u306e\u512a\u5148\u9806\u306e\u78ba\u8a8d\n; \u62ec\u5f27\u306a\u3057\u3067\u5b9f\u884c.\ngosh> (deriv '(x * x + x) 'x)\n(x + x + 1)\ngosh> (deriv '(x + x * x) 'x)\n(1 + x + x)\n\n; * \u3092\u660e\u793a\u7684\u306b\u512a\u5148 (\u901a\u5e38\u306e\u512a\u5148\u9806\u3067\u306e\u51e6\u7406\u3068\u540c\u7b49).\ngosh> (deriv '(x + (x * x)) 'x)\n(1 + x + x)\ngosh> (deriv '((x * x) + x) 'x)\n(x + x + 1)\n\n; + \u3092\u660e\u793a\u7684\u306b\u512a\u5148 (\u660e\u793a\u7684\u306b\u51e6\u7406\u9806\u3092\u9006\u8ee2\u3055\u305b\u305f\u5834\u5408).\ngosh> (deriv '(x * (x + x)) 'x)\n(x * 2 + x + x)\ngosh> (deriv '((x + x) * x) 'x)\n(x + x + 2 * x)\n\n\u62ec\u5f27\u306a\u3057\u306e\u5834\u5408\u3067\u3082 * \u90e8\u5206\u306b\u62ec\u5f27\u3092\u3064\u3051\u3066\u660e\u793a\u7684\u306b\u512a\u5148\u51e6\u7406\u3055\u305b\u305f\u5834\u5408\u3068\u540c\u3058\u7d50\u679c\u304c\u5f97\u3089\u308c\u3066\u3044\u308b.\n\u8a66\u3057\u306b deriv \u3067 sum? \u90e8\u5206\u3068 product? \u90e8\u5206\u306e\u9806\u756a\u3092\u5165\u308c\u66ff\u3048\u308b\u3068\u8aa4\u3063\u305f\u7d50\u679c\u306b\u306a\u308b\u306f\u305a. \u3068\u3044\u3046\u308f\u3051\u3067\u8a66\u3057\u3066\u307f\u305f:\n(define (deriv exp var)\n    (cond\n        ((number? exp) 0)\n        ((variable? exp)\n            (if (same-variable? exp var) 1 0))\n        ; \u308f\u3056\u3068 product? \u3092\u5148\u306b\u5224\u5b9a.\n        ((product? exp)\n            ...)\n        ((sum? exp)\n            ...)\n        ((exponentiation? exp)\n\n; \u308f\u3056\u3068\u8aa4\u3063\u305f\u51e6\u7406\u9806\u306b\u5909\u3048\u3066\u5b9f\u884c\u3057\u305f\u7d50\u679c.\ngosh> (deriv '(x * x + x) 'x)\n(x * 2 + x + x)\ngosh> (deriv '(x + x * x) 'x)\n(x + x + 2 * x)\n\n; * \u3092\u660e\u793a\u7684\u306b\u512a\u5148 (\u901a\u5e38\u306e\u512a\u5148\u9806\u3067\u306e\u51e6\u7406\u3068\u540c\u7b49).\ngosh> (deriv '(x + (x * x)) 'x)\n(1 + x + x)\ngosh> (deriv '((x * x) + x) 'x)\n(x + x + 1)\n\n; + \u3092\u660e\u793a\u7684\u306b\u512a\u5148 (\u660e\u793a\u7684\u306b\u51e6\u7406\u9806\u3092\u9006\u8ee2\u3055\u305b\u305f\u5834\u5408).\ngosh> (deriv '(x * (x + x)) 'x)\n(x * 2 + x + x)\ngosh> (deriv '((x + x) * x) 'x)\n(x + x + 2 * x)\n\n\u60f3\u50cf\u901a\u308a, + \u3092\u512a\u5148\u3057\u3066\u7d50\u5408\u3055\u305b\u305f\u5834\u5408\u306e\u7d50\u679c\u304c\u8aa4\u3063\u3066\u5f97\u3089\u308c\u308b\u3088\u3046\u306b\u306a\u3063\u305f.\n\n\u304a\u307e\u3051 (3): \u6f14\u7b97\u306e\u7d50\u5408\u65b9\u5411\n\u7d50\u5408\u65b9\u5411\u306f\u53f3\u7d50\u5408\u306b\u306a\u3063\u3066\u308b\u6a21\u69d8.\n\u306a\u306e\u3067\u53f3\u7d50\u5408\u306a\u7d2f\u4e57\u306b\u5bfe\u3057\u3066\u9069\u5207\u306b\u52d5\u4f5c\u3059\u308b.\n\u52a0\u7b97\u53ca\u3073\u4e57\u7b97\u306f\u672c\u6765\u306f\u5de6\u7d50\u5408\u3060\u3051\u3069, \u4eca\u56de\u306e\u3067\u306f\u5bfe\u79f0\u5f8b\u3092\u6301\u3064\u306e\u3067\u53f3\u7d50\u5408\u3067\u51e6\u7406\u3057\u3066\u3082\u7d50\u679c\u306f\u540c\u5024\u3067\u3042\u308a\u554f\u984c\u306f\u751f\u3058\u306a\u3044.\n\u7d2f\u4e57 (\u53f3\u7d50\u5408) \u306e\u5834\u5408:\n; \u666e\u901a\u306b\u5b9f\u884c.\ngosh> (deriv '(x ** x ** x) 'x)\n(x ** x * x ** (x ** x + -1))\n\n; \u53f3\u7d50\u5408\u306e\u5834\u5408\u306e\u7d50\u679c.\ngosh> (deriv '(x ** (x ** x)) 'x)\n(x ** x * x ** (x ** x + -1))\n\n; \u5de6\u7d50\u5408\u306e\u5834\u5408\u306e\u7d50\u679c.\ngosh> (deriv '((x ** x) ** x) 'x)\n(x * x ** x ** (x + -1) * x * x ** (x + -1))\n\n\u6b63\u3057\u304f\u53f3\u7d50\u5408\u3067\u51e6\u7406\u3055\u308c\u3066\u3044\u308b.\n\u4e57\u7b97 (\u5de6\u7d50\u5408) \u306e\u5834\u5408:\n; \u666e\u901a\u306b\u5b9f\u884c.\ngosh> (deriv '(x * x * x) 'x)\n(x * (x + x) + x * x)\n\n; \u53f3\u7d50\u5408\u306e\u5834\u5408\u306e\u7d50\u679c.\ngosh> (deriv '(x * (x * x)) 'x)\n(x * (x + x) + x * x)\n\n; \u5de6\u7d50\u5408\u306e\u5834\u5408\u306e\u7d50\u679c.\ngosh> (deriv '((x * x) * x) 'x)\n(x * x + (x + x) * x)\n\n\u53f3\u7d50\u5408\u3067\u51e6\u7406\u3055\u308c\u3066\u3057\u307e\u3063\u3066\u3044\u308b.\n\u3057\u304b\u3057\u3053\u3053\u3067\u306f\u5bfe\u79f0\u5f8b\u3092\u6301\u3064\u306e\u3067\u7d50\u679c\u7684\u306b\u554f\u984c\u306f\u306a\u3044.\n\u52a0\u7b97 (\u5de6\u7d50\u5408) \u306e\u5834\u5408:\n; \u666e\u901a\u306b\u5b9f\u884c.\ngosh> (deriv '(x + x + x) 'x)\n3\n\n; \u53f3\u7d50\u5408\u306e\u5834\u5408\u306e\u7d50\u679c.\ngosh> (deriv '((x + x) + x) 'x)\n3\n\n; \u5de6\u7d50\u5408\u306e\u5834\u5408\u306e\u7d50\u679c.\ngosh> (deriv '(x + (x + x)) 'x)\n3\n\n\u9055\u3044\u304c\u898b\u3048\u306a\u3044\u3051\u308c\u3069\u4e57\u7b97\u306e\u5834\u5408\u3068\u540c\u3058\u306e\u306f\u305a\uff1e\u03c9\uff1c;\n[\u30aa\u30f3\u30e9\u30a4\u30f3SICP\u8aad\u66f8\u5973\u5b50\u4f1a #26 (2.3.2)](http://ladiespp.connpass.com/event/44875/)\n\n\u7df4\u7fd2\u554f\u984c 2.56 - 2.58\n\n\u3046\u3061\u306e\u30b3\u30fc\u30c9\u3060\u3093\u3060\u3093\u7121\u99c4\u306b\u3084\u3084\u3053\u3057\u3055\u307e\u3057\u307e\u3057\u3067\u3061\u3087\u3063\u3068\u30a2\u30ec\uff08\uff09\n\u30b7\u30f3\u30d7\u30eb\u3055\u3092\u3082\u3063\u3068\u5fc3\u304c\u3051\u306a\u304d\u3083\u2026\uff1e\u03c9\uff1c;\n\n## 2.3.2. \u4f8b: \u8a18\u53f7\u5fae\u5206\n\n### \u62bd\u8c61\u30c7\u30fc\u30bf\u306b\u3088\u308b\u5fae\u5206\u30d7\u30ed\u30b0\u30e9\u30e0\n\n\u4eca\u56de\u4f7f\u3046\u30c7\u30fc\u30bf\u69cb\u9020.\n\u8ff0\u8a9e\u95a2\u6570\u3068\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u3068\u30bb\u30ec\u30af\u30bf\u3068. \u3044\u3063\u3071\u3044.\n\n1. `(variable? e)`           `e` \u306f\u5909\u6570\u304b?\n2. `(same-variable? v1 v2)`  `v1` \u3068 `v2` \u306f\u540c\u3058\u5909\u6570\u304b?\n3. `(sum? e)`                `e` \u306f\u548c\u304b?\n4. `(addend e)`              \u548c `e` \u306e\u52a0\u6570 \n5. `(augend e)`              \u548c `e` \u306e\u88ab\u52a0\u6570 \n6. `(make-sum a1 a2)`        `a1` \u3068 `a2` \u306e\u548c\u3092\u69cb\u7bc9\u3059\u308b\n7. `(product? e)`            `e` \u306f\u7a4d\u304b?\n8. `(multiplier e)`          \u7a4d `e` \u306e\u5b9a\u6570\n9. `(multiplicand e)`        \u7a4d `e` \u306e\u88ab\u4e57\u6570\n10. `(make-product m1 m2)`    `m1` \u3068 `m2` \u306e\u7a4d\u3092\u69cb\u7bc9\u3059\u308b\n\n\n\u30e1\u30a4\u30f3\u306e\u8a18\u53f7\u5fae\u5206\u306e\u5b9f\u88c5\u95a2\u6570\u301c.\nexpression \u306f `exp` \u3088\u308a `expr` \u306e\u307b\u3046\u304c\u306a\u3093\u3068\u306a\u304f\u597d\u307f.\n\n```scm\n(define (deriv exp var)\n\t(cond\n\t\t((number? exp) 0)\n\t\t((variable? exp)\n\t\t\t(if (same-variable? exp var) 1 0))\n\t\t((sum? exp)\n\t\t\t(make-sum\n\t\t\t\t(deriv (addend exp) var)\n\t\t\t\t(deriv (augend exp) var)))\n\t\t((product? exp)\n\t\t\t(make-sum\n\t\t\t\t(make-product\n\t\t\t\t\t(multiplier exp)\n\t\t\t\t\t(deriv (multiplicand exp) var))\n\t\t\t\t(make-product\n\t\t\t\t\t(deriv (multiplier exp) var)\n\t\t\t\t\t(multiplicand exp))))\n\t\t(else\n\t\t\t(error \"unknown expression type: DERIV\" exp))))\n```\n\n> while a, b, and c are addends in a+b+c, a is the augend\n> [augend - Wolfram|Alpha](http://www.wolframalpha.com/input/?i=augend)\n\n> in the expression a+b+c, a, b, and c are all addends\n> [addend - Wolfram|Alpha](http://www.wolframalpha.com/input/?i=addend)\n\n\u3080\u3057\u308d augend (\u88ab\u52a0\u6570) \u304c\u5de6\u8fba\u3067 addend (\u52a0\u6570) \u304c\u53f3\u8fba\u306a\u306e\u3067\u306f?\u30fb\u03c9\u30fb;\n\n\u5f53\u65e5\u306e\u4f1a\u8a71\u3067 `a + b` \u3092 `(+ b a)` \u3063\u3066\u8868\u73fe\u3057\u3066\u308b\u306e\u306a\u3089\u6210\u7acb\u3059\u308b!?\u3063\u3066\u601d\u3063\u305f\u3051\u3069, \u554f\u984c\u6587\u3067\u300c `ax + b` \u306f `(+ (* a x) b)`\u3068\u8868\u73fe\u3059\u308b\u3053\u3068\u306b\u306a\u308a\u307e\u3059\u300d\u3063\u3066\u3042\u3063\u305f\u3057\u305d\u3046\u3044\u3046\u308f\u3051\u3067\u3082\u306a\u3055\u305d\u3046\uff1d\u03c9\uff1d;\n\n\u591a\u9805\u5f0f\u306e\u639b\u3051\u7b97\u306e\u5fae\u5206\u3063\u3066\u3053\u3093\u306a\u98a8\u306b\u3067\u304d\u308b\u306e\u306d\u3002\u3082\u306f\u3084\u304b\u3051\u3089\u3082\u8a18\u61b6\u306b\u6b8b\u3063\u3066\u306a\u3044\uff08\uff09\n\n### \u4ee3\u6570\u5f0f\u3092\u8868\u73fe\u3059\u308b\n\n\u30c7\u30fc\u30bf\u69cb\u9020\u7528\u306e\u95a2\u6570\u306e\u5b9f\u88c5.\n`cadr` \u3068\u304b `caddr` \u3068\u304b\u3044\u307e\u3044\u3061\u5834\u6240\u628a\u63e1\u3057\u3065\u3089\u3044\u306e\u3067 `(list-ref list index)` \u306e\u307b\u3046\u4f7f\u3044\u305f\u3044\uff1d\u03c9\uff1d;\n\n```scm\n; [sec-2.3.2-a.scm]\n;\n(define (sec-2.3.2-a)\n\t(print \"(deriv '(+ x 3) 'x)\")\n\t(print \";==> \" (deriv '(+ x 3) 'x))\n\t(print \"(deriv '(* x y) 'x)\")\n\t(print \";==> \" (deriv '(* x y) 'x))\n\t(print \"(deriv '(* (* x y) (+ x 3)) 'x)\")\n\t(print \";==> \" (deriv '(* (* x y) (+ x 3)) 'x))\n\t#t)\n\n\n; exp=expression\n(define (deriv exp var)\n\t(cond\n\t\t((number? exp) 0)\n\t\t((variable? exp)\n\t\t\t(if (same-variable? exp var) 1 0))\n\t\t((sum? exp)\n\t\t\t(make-sum\n\t\t\t\t(deriv (addend exp) var)\n\t\t\t\t(deriv (augend exp) var)))\n\t\t((product? exp)\n\t\t\t(make-sum\n\t\t\t\t(make-product\n\t\t\t\t\t(multiplier exp)\n\t\t\t\t\t(deriv (multiplicand exp) var))\n\t\t\t\t(make-product\n\t\t\t\t\t(deriv (multiplier exp) var)\n\t\t\t\t\t(multiplicand exp))))\n\t\t(else\n\t\t\t(error \"unknown expression type: DERIV\" exp))))\n\n\n(define (variable? x) (symbol? x))\n\n\n(define (same-variable? v1 v2)\n\t(and\n\t\t(variable? v1)\n\t\t(variable? v2)\n\t\t(eq? v1 v2)))\n\n\n(define (make-sum a1 a2)\n\t(list '+ a1 a2))\n\n\n(define (make-product m1 m2)\n\t(list '* m1 m2))\n\n\n(define (sum? x)\n\t(and (pair? x) (eq? (car x) '+)))\n\n\n(define (addend s)\n\t(cadr s))\n\n\n(define (augend s)\n\t(caddr s))\n\n\n(define (product? x)\n\t(and\n\t\t(pair? x)\n\t\t(eq? (car x) '*)))\n\n\n(define (multiplier p)\n\t(cadr p))\n\n\n(define (multiplicand p)\n\t(caddr p))\n```\n\n\u5b9f\u884c\u7d50\u679c:\n\n```scm\ngosh> (sec-2.3.2-a)\n(deriv '(+ x 3) 'x)\n;==> (+ 1 0)\n(deriv '(* x y) 'x)\n;==> (+ (* x 0) (* 1 y))\n(deriv '(* (* x y) (+ x 3)) 'x)\n;==> (+ (* (* x y) (+ 1 0)) (* (+ (* x 0) (* 1 y)) (+ x 3)))\n#t\n```\n\n### \u5373\u5024\u90e8\u5206\u3078\u306e\u6f14\u7b97\u5b9f\u884c\n\n\u524d\u4f5c\u3063\u305f\u95a2\u6570\u3092\u4e0a\u66f8\u304d\u3057\u3066\u308b\u90e8\u5206\u306b\u306a\u3093\u3068\u306a\u304f `; @override` \u3068\u304b\u30de\u30fc\u30ab\u30fc\u30b3\u30e1\u30f3\u30c8\u3044\u308c\u3066\u307f\u305f\u308a.\n\n```scm\n; [sec-2.3.2-b.scm]\n;\n(define (sec-2.3.2-b)\n\t(print \"(deriv '(+ x 3) 'x)\")\n\t(print \";==> \" (deriv '(+ x 3) 'x))\n\t(print \"(deriv '(* x y) 'x)\")\n\t(print \";==> \" (deriv '(* x y) 'x))\n\t(print \"(deriv '(* (* x y) (+ x 3)) 'x)\")\n\t(print \";==> \" (deriv '(* (* x y) (+ x 3)) 'x))\n\t#t)\n\n\n(load \"./sec-2.3.2-a\")\n\n\n; @override\n(define (make-sum a1 a2)\n\t(cond\n\t\t((=number? a1 0) a2)\n\t\t((=number? a2 0) a1)\n\t\t((and (number? a1) (number? a2))\n\t\t\t(+ a1 a2))\n\t\t(else (list '+ a1 a2))))\n\n\n(define (=number? exp num)\n\t(and\n\t\t(number? exp)\n\t\t(= exp num)))\n\n\n; @override\n(define (make-product m1 m2)\n\t(cond\n\t\t((or (=number? m1 0) (=number? m2 0)) 0)\n\t\t((=number? m1 1) m2)\n\t\t((=number? m2 1) m1)\n\t\t((and (number? m1) (number? m2))\n\t\t\t(* m1 m2))\n\t\t(else\n\t\t\t(list '* m1 m2))))\n```\n\n\u5b9f\u884c\u7d50\u679c:\n\n```scm\ngosh> (sec-2.3.2-b)\n(deriv '(+ x 3) 'x)\n;==> 1\n(deriv '(* x y) 'x)\n;==> y\n(deriv '(* (* x y) (+ x 3)) 'x)\n;==> (+ (* x y) (* y (+ x 3)))\n```\n\n\u6700\u521d `(+ 1 0)` \u306b\u306a\u3063\u3066\u305f\u3068\u3053\u308d\u304c\u5358\u306b `1` \u306b\u306a\u3063\u305f\u308a `(* x 0)` \u3068\u304b\u6b8b\u3063\u3066\u305f\u306e\u304c\u6d88\u3048\u305f\u308a\u301c.\n\n`(+ (* x y) (* y (+ x 3)))` \u306f `(x * y) + (y * (x + 3))` \u306a\u306e\u3067 `x` \u306b\u3064\u3044\u3066\u89e3\u3044\u305f\u3089 `2xy + 3y` \u306b\u306a\u308b\u3051\u308c\u3069, \u4eca\u56de\u306f\u305d\u3044\u3046\u306e\u306f\u3057\u306a\u3044\u3063\u307d\u3044.\n\n## ex-2.56. \u7d2f\u4e57\u306e\u5fae\u5206\n\n\u7d2f\u4e57\u304c `expt` \u306a\u306e\u5730\u5473\u306b\u3044\u3064\u3082\u5fd8\u308c\u3066\u308b\uff1d\u03c9\uff1d;\n\n### \u5b9f\u88c5\n\n```scm\n; [ex-2.56.scm]\n;\n(define (ex-2.56)\n\t(print \"(deriv '(* a (** x 3)) 'x)\")\n\t(print \";==> \" (deriv '(* a (** x 3)) 'x))\n\t(print \"(deriv '(* a (** x (** x 5))) 'x)\")\n\t(print \";==> \" (deriv '(* a (** x (** x 5))) 'x))\n\t#t)\n\n\n(load \"./sec-2.3.2-b\")\n\n\n(define (exponentiation? x)\n\t(and (pair? x) (eq? (car x) '**)))\n\n\n(define (base x)\n\t(cadr x))\n\n\n(define (exponent x)\n\t(caddr x))\n\n\n(define (make-exponent x y)\n\t(cond\n\t\t((=number? y 0) 1)\n\t\t((=number? y 1) x)\n\t\t((and (number? x) (number? y)) (expt x y))\n\t\t(else (list '** x y))))\n\n\n; @override\n(define (deriv exp var)\n\t(cond\n\t\t((number? exp) 0)\n\t\t((variable? exp)\n\t\t\t(if (same-variable? exp var) 1 0))\n\t\t((sum? exp)\n\t\t\t(make-sum\n\t\t\t\t(deriv (addend exp) var)\n\t\t\t\t(deriv (augend exp) var)))\n\t\t((product? exp)\n\t\t\t(make-sum\n\t\t\t\t(make-product\n\t\t\t\t\t(multiplier exp)\n\t\t\t\t\t(deriv (multiplicand exp) var))\n\t\t\t\t(make-product\n\t\t\t\t\t(deriv (multiplier exp) var)\n\t\t\t\t\t(multiplicand exp))))\n\t\t((exponentiation? exp)\n\t\t\t(make-product\n\t\t\t\t(exponent exp)\n\t\t\t\t(make-product\n\t\t\t\t\t(make-exponent (base exp) (make-sum (exponent exp) -1))\n\t\t\t\t\t(deriv (base exp) var))))\n\t\t(else\n\t\t\t(error \"unknown expression type: DERIV\" exp))))\n```\n\n### \u5b9f\u884c\u7d50\u679c\n\n```scm\ngosh> (ex-2.56)\n(deriv '(* a (** x 3)) 'x)\n;==> (* a (* 3 (** x 2)))\n(deriv '(* a (** x (** x 5))) 'x)\n;==> (* a (* (** x 5) (** x (+ (** x 5) -1))))\n```\n\n\n## ex-2.57. \u88ab\u6f14\u7b97\u5b50\u3092\u53ef\u5909\u9577\u5f15\u6570\u306b\n\nhandle sums and products of arbitrary numbers of terms \u3068\u3044\u3046\u306e\u306d.\n\n> \u4f8b\u3048\u3070\u3001\u548c\u306e `addend` (\u52a0\u6570) \u306f\u6700\u521d\u306e\u9805\u3067\u3001 `augend` (\u88ab\u52a0\u6570) \u306f\u6b8b\u308a\u306e\u9805\u306e\u548c\u3068\u3044\u3046\u3088\u3046\u306b\u3059\u308b\u3002\n\n\u3068\u3042\u308b\u3051\u308c\u3069, `augend` \u306e\u65b9\u306f\u5f0f\u304c\u3061\u3087\u3046\u30692\u9805\u3060\u3063\u305f\u5834\u5408\u306f\u53f3\u8fba\u5024\u3092\u305d\u306e\u307e\u307e,\n3\u9805\u4ee5\u4e0a\u306e\u5834\u5408\u306f2\u9805\u76ee\u4ee5\u964d\u306e\u90e8\u5206\u306e\u5f0f\u3068\u3044\u3046\u98a8\u306b\u5b9f\u88c5\u3057\u3066\u307f\u305f.\n\n\u3053\u3093\u306a\u611f\u3058:\n\n```scm\n(addend '(+ a b)   ;==> a\n(augend '(+ a b)   ;==> b\n(augend '(+ a b c) ;==> (+ b c)\n```\n\n\u4e57\u7b97\u3068, \u554f\u984c\u6587\u306b\u306f\u306a\u304b\u3063\u305f\u3051\u308c\u3069\u7d2f\u4e57\u3082\u3064\u3044\u3067\u306b.\n\n### \u5b9f\u88c5\n\n```scm\n; [ex-2.57.scm]\n;\n(define (ex-2.57)\n\t(print \"(addend '(+ a b)\")\n\t(print \";==> \" (addend '(+ a b)))\n\t(print \"(augend '(+ a b)\")\n\t(print \";==> \" (augend '(+ a b)))\n\t(print \"(augend '(+ a b c)\")\n\t(print \";==> \" (augend '(+ a b c)))\n\n\t(newline)\n\t(print \"(multiplier '(* a b)\")\n\t(print \";==> \" (multiplier '(* a b)))\n\t(print \"(multiplicand '(* a b)\")\n\t(print \";==> \" (multiplicand '(* a b)))\n\t(print \"(multiplicand '(* a b c)\")\n\t(print \";==> \" (multiplicand '(* a b c)))\n\n\t(newline)\n\t(print \"(base '(** a b)\")\n\t(print \";==> \" (base '(** a b)))\n\t(print \"(exponent '(** a b)\")\n\t(print \";==> \" (exponent '(** a b)))\n\t(print \"(exponent '(** a b c)\")\n\t(print \";==> \" (exponent '(** a b c)))\n\n\t(newline)\n\t(print \"(deriv '(* x y (+ x 3)) 'x)\")\n\t(print \";==> \" (deriv '(* x y (+ x 3)) 'x))\n\n\t(newline)\n\t(print \"(deriv '(* a (** x 3)) 'x)\")\n\t(print \";==> \" (deriv '(* a (** x 3)) 'x))\n\t(print \"(deriv '(* a (** x x 5)) 'x)\")\n\t(print \";==> \" (deriv '(* a (** x x 5)) 'x))\n\t#t)\n\n\n(load \"./ex-2.56\")\n\n\n; @override\n(define (addend s)\n\t(cadr s))\n\n\n; @override\n(define (augend s)\n\t(if\n\t\t(null? (cdddr s))\n\t\t; 2\u9805\u306e\u307f.\n\t\t(caddr s)\n\t\t; 3\u9805\u4ee5\u4e0a.\n\t\t(cons '+ (cddr s))))\n\n\n; @override\n(define (make-sum a1 a2)\n\t(cond\n\t\t((=number? a1 0) a2)\n\t\t((=number? a2 0) a1)\n\t\t((and (number? a1) (number? a2))\n\t\t\t(+ a1 a2))\n\n\t\t((sum? a1)\n\t\t\t(if\n\t\t\t\t(sum? a2)\n\t\t\t\t; both a1 and a2 are sum.\n\t\t\t\t(append '(+) (cdr a1) (cdr a2))\n\t\t\t\t; a1 is a sum, but a2 is not a sum.\n\t\t\t\t(append '(+) (cdr a1) (list a2))))\n\t\t((sum? a2)\n\t\t\t; a1 is not a sum, but a2 is a sum.\n\t\t\t(append '(+) (list a1) (cdr a2)))\n\t\t(else\n\t\t\t; both a1 and a2 are not sum.\n\t\t\t(list '+ a1 a2))))\n\n\n; @override\n(define (multiplier p)\n\t(cadr p))\n\n\n; @override\n(define (multiplicand p)\n\t(if\n\t\t(null? (cdddr p))\n\t\t; 2\u9805\u306e\u307f.\n\t\t(caddr p)\n\t\t; 3\u9805\u4ee5\u4e0a.\n\t\t(cons '* (cddr p))))\n\n\n; @override\n(define (make-product m1 m2)\n\t(cond\n\t\t((or (=number? m1 0) (=number? m2 0)) 0)\n\t\t((=number? m1 1) m2)\n\t\t((=number? m2 1) m1)\n\t\t((and (number? m1) (number? m2))\n\t\t\t(* m1 m2))\n\n\t\t((product? m1)\n\t\t\t(if\n\t\t\t\t(product? m2)\n\t\t\t\t; both m1 and m2 are product.\n\t\t\t\t(append '(*) (cdr m1) (cdr m2))\n\t\t\t\t; m1 is a product, but m2 is not a product.\n\t\t\t\t(append '(*) (cdr m1) (list m2))))\n\t\t((product? m2)\n\t\t\t; m1 is not a product, but m2 is a product.\n\t\t\t(append '(*) (list m1) (cdr m2)))\n\t\t(else\n\t\t\t; both m1 and m2 are not product.\n\t\t\t(list '* m1 m2))))\n\n\n; @override\n(define (base x)\n\t(cadr x))\n\n\n; @override\n(define (exponent x)\n\t(if\n\t\t(null? (cdddr x))\n\t\t; 2\u9805\u306e\u307f.\n\t\t(caddr x)\n\t\t; 3\u9805\u4ee5\u4e0a.\n\t\t(cons '** (cddr x))))\n\n\n; @override\n(define (make-exponent x y)\n\t(cond\n\t\t((=number? y 0) 1)\n\t\t((=number? y 1) x)\n\t\t((and (number? x) (number? y)) (expt x y))\n\n\t\t((exponentiation? x)\n\t\t\t(if\n\t\t\t\t(exponentiation? y)\n\t\t\t\t; both x and y are product.\n\t\t\t\t(append '(**) (cdr x) (cdr y))\n\t\t\t\t; x is a product, but y is not a product.\n\t\t\t\t(append '(**) (cdr x) (list y))))\n\t\t((exponentiation? y)\n\t\t\t; x is not a product, but y is a product.\n\t\t\t(append '(**) (list x) (cdr y)))\n\t\t(else\n\t\t\t; both x and y are not product.\n\t\t\t(list '** x y))))\n```\n\n### \u5b9f\u884c\u7d50\u679c\n\n```scm\ngosh> (ex-2.57)\n(addend '(+ a b)\n;==> a\n(augend '(+ a b)\n;==> b\n(augend '(+ a b c)\n;==> (+ b c)\n\n(multiplier '(* a b)\n;==> a\n(multiplicand '(* a b)\n;==> b\n(multiplicand '(* a b c)\n;==> (* b c)\n\n(base '(** a b)\n;==> a\n(exponent '(** a b)\n;==> b\n(exponent '(** a b c)\n;==> (** b c)\n\n(deriv '(* x y (+ x 3)) 'x)\n;==> (+ (* x y) (* y (+ x 3)))\n\n(deriv '(* a (** x 3)) 'x)\n;==> (* a 3 (** x 2))\n(deriv '(* a (** x x 5)) 'x)\n;==> (* a (** x 5) (** x (+ (** x 5) -1)))\n```\n\n\n## ex-2.57. \u304a\u307e\u3051. \u91cd\u8907\u90e8\u5206\u306e\u5171\u901a\u5316.\n\n\u52a0\u7b97\u30fb\u4e57\u7b97\u30fb\u7d2f\u4e57\u3067\u540c\u3058\u3088\u3046\u306a\u3053\u3068\u3057\u3066\u308b\u3068\u3053\u304c\u3061\u3089\u307b\u3089\u3042\u308b\u306e\u3067\u5171\u901a\u5316\u3057\u3066\u307f\u305f.\n\n\u3055\u3044\u3057\u3087\u3044\u3058\u3063\u3066\u3066\u3046\u307e\u304f\u52d5\u304b\u306a\u304f\u3066\u3059\u3063\u3054\u304f\u306a\u3084\u3093\u3060\u3051\u308c\u3069,\n\n```scm\n(define (make-sum a1 a2)\n\t(cond\n\t\t((=number? a1 0) a2)\n\t\t((=number? a2 0) a1)\n\t\t((and (number? a1) (number? a2))\n\t\t\t(+ a1 a2))\n\n\t\t(bin-expr-append '+ a1 a2)))\n```\n\n\u3053\u3093\u306a\u306a\u3063\u3066\u305f\u3051\u3069\u3046\u3054\u304f\u306e\u306d\u3053\u308c\u2026\uff1e\uff1c\uff1b\n\n* `bin-expr-append` \u304c `else` \u3058\u3083\u306a\u3044\u304b\u3089\u4ed6\u306e\u6761\u4ef6\u53e5\u3068\u540c\u3058\u3088\u3046\u306b\u666e\u901a\u306b\u8a55\u4fa1\n* \u8a55\u4fa1\u7d50\u679c: `#<closure bin-expr-append>`\n* `#f` \u3058\u3083\u306a\u3044\u306e\u3067\u771f\u306e\u6271\u3044\n* `((...) expr1 expr2 expr3 ...)` \u306a `cond` \u30d1\u30e9\u30e1\u30fc\u30bf\u306b\u30de\u30c3\u30c1\u3057\u305f\u3064\u3082\u308a\u3067\u3053\u3053\u306b\u5206\u5c90\n* `'+`, `a1`, `a2` \u3092\u9806\u306b\u8a55\u4fa1\n* `'+`, `a1` \u306f\u526f\u4f5c\u7528\u6301\u305f\u306a\u3044\u306e\u3067\u5b9f\u884c\u7d50\u679c\u306b\u306f\u3067\u3066\u3053\u306a\u3044\u3067\u307b\u307c\u7121\u8996\u72b6\u614b\n* \u6700\u5f8c\u306e\u8a55\u4fa1\u7d50\u679c\u3067\u3042\u308b `a2` \u304c\u305d\u306e\u307e\u307e\u95a2\u6570\u306e\u5b9f\u884c\u7d50\u679c\u3068\u3057\u3066\u8fd4\u308b\n\n\u305d\u3057\u3066\u3070\u3050\u30fc\uff1d\u03c9\uff1d;\nLisp \u3055\u3093\u578b\u3082\u69cb\u6587\u3082\u3086\u308b\u3075\u308f\u2026\n\n\n### \u5b9f\u88c5\n\n```scm\n; [ex-2.57-bin-expr]\n;\n(define (ex-2.57-bin-expr)\n\t(print \"(addend '(+ a b)\")\n\t(print \";==> \" (addend '(+ a b)))\n\t(print \"(augend '(+ a b)\")\n\t(print \";==> \" (augend '(+ a b)))\n\t(print \"(augend '(+ a b c)\")\n\t(print \";==> \" (augend '(+ a b c)))\n\n\t(newline)\n\t(print \"(multiplier '(* a b)\")\n\t(print \";==> \" (multiplier '(* a b)))\n\t(print \"(multiplicand '(* a b)\")\n\t(print \";==> \" (multiplicand '(* a b)))\n\t(print \"(multiplicand '(* a b c)\")\n\t(print \";==> \" (multiplicand '(* a b c)))\n\n\t(newline)\n\t(print \"(base '(** a b)\")\n\t(print \";==> \" (base '(** a b)))\n\t(print \"(exponent '(** a b)\")\n\t(print \";==> \" (exponent '(** a b)))\n\t(print \"(exponent '(** a b c)\")\n\t(print \";==> \" (exponent '(** a b c)))\n\n\t(newline)\n\t(print \"(deriv '(* x y (+ x 3)) 'x)\")\n\t(print \";==> \" (deriv '(* x y (+ x 3)) 'x))\n\n\t(newline)\n\t(print \"(deriv '(* a (** x 3)) 'x)\")\n\t(print \";==> \" (deriv '(* a (** x 3)) 'x))\n\t(print \"(deriv '(* a (** x x 5)) 'x)\")\n\t(print \";==> \" (deriv '(* a (** x x 5)) 'x))\n\t#t)\n\n\n(load \"./ex-2.56\")\n\n\n(define (bin-expr-of? op expr)\n\t(and (pair? expr) (eq? (car expr) op)))\n\n\n(define (bin-expr-op expr)\n\t(car expr))\n\n\n(define (bin-expr-lhs expr)\n\t(cadr expr))\n\n\n(define (bin-expr-rhs expr)\n\t(if\n\t\t(null? (cdddr expr))\n\t\t; 2\u9805\u306e\u307f.\n\t\t(caddr expr)\n\t\t; 3\u9805\u4ee5\u4e0a.\n\t\t(cons (bin-expr-op expr) (cddr expr))))\n\n\n(define (bin-expr-append op expr1 expr2)\n\t(cond\n\t\t((bin-expr-of? op expr1)\n\t\t\t(if\n\t\t\t\t(bin-expr-of? op expr2)\n\t\t\t\t; both expr1 and expr2 are bin-expr of 'op'.\n\t\t\t\t(append (list op) (cdr expr1) (cdr expr2))\n\t\t\t\t; expr1 is a bin-expr of 'op', but expr2 is not a bin-expr of 'op'.\n\t\t\t\t(append (list op) (cdr expr1) (list expr2))))\n\t\t((bin-expr-of? op expr2)\n\t\t\t; expr1 is not a bin-expr of 'op', but expr2 is a bin-expr of 'op'.\n\t\t\t(append (list op) (list expr1) (cdr expr2)))\n\t\t(else\n\t\t\t; both expr1 and expr2 are not bin-expr of 'op'.\n\t\t\t(list op expr1 expr2))))\n\n\n; @override\n(define (addend s)\n\t(bin-expr-lhs s))\n\n\n; @override\n(define (augend s)\n\t(bin-expr-rhs s))\n\n\n; @override\n(define (make-sum a1 a2)\n\t(cond\n\t\t((=number? a1 0) a2)\n\t\t((=number? a2 0) a1)\n\t\t((and (number? a1) (number? a2))\n\t\t\t(+ a1 a2))\n\n\t\t(else (bin-expr-append '+ a1 a2))))\n\n\n; @override\n(define (multiplier p)\n\t(bin-expr-lhs p))\n\n\n; @override\n(define (multiplicand p)\n\t(bin-expr-rhs p))\n\n\n; @override\n(define (make-product m1 m2)\n\t(cond\n\t\t((or (=number? m1 0) (=number? m2 0)) 0)\n\t\t((=number? m1 1) m2)\n\t\t((=number? m2 1) m1)\n\t\t((and (number? m1) (number? m2))\n\t\t\t(* m1 m2))\n\n\t\t(else (bin-expr-append '* m1 m2))))\n\n\n; @override\n(define (base x)\n\t(bin-expr-lhs x))\n\n\n; @override\n(define (exponent x)\n\t(bin-expr-rhs x))\n\n\n; @override\n(define (make-exponent x y)\n\t(cond\n\t\t((=number? y 0) 1)\n\t\t((=number? y 1) x)\n\t\t((and (number? x) (number? y)) (expt x y))\n\n\t\t(else (bin-expr-append '** x y))))\n```\n\n### \u5b9f\u884c\u7d50\u679c\n\n\u7d50\u679c\u306f\u5909\u308f\u3089\u306a\u3044\u3051\u308c\u3069\uff1e\u03c9\uff1c\n\n```scm\ngosh> (ex-2.57-bin-expr)\n(addend '(+ a b)\n;==> a\n(augend '(+ a b)\n;==> b\n(augend '(+ a b c)\n;==> (+ b c)\n\n(multiplier '(* a b)\n;==> a\n(multiplicand '(* a b)\n;==> b\n(multiplicand '(* a b c)\n;==> (* b c)\n\n(base '(** a b)\n;==> a\n(exponent '(** a b)\n;==> b\n(exponent '(** a b c)\n;==> (** b c)\n\n(deriv '(* x y (+ x 3)) 'x)\n;==> (+ (* x y) (* y (+ x 3)))\n\n(deriv '(* a (** x 3)) 'x)\n;==> (* a 3 (** x 2))\n(deriv '(* a (** x x 5)) 'x)\n;==> (* a (** x 5) (** x (+ (** x 5) -1)))\n```\n\n\n## ex-2.58. (a) \u4e2d\u7f6e\u8a18\u6cd5\n\nLisp \u7684\u306a `(+ 'a 'b)` \u304b\u3089\u666e\u901a\u306e\u6570\u5f0f\u7684\u306a `('a + 'b)` \u306b.\n\n\u3072\u3068\u307e\u305a\u306f\u540c\u3058\u62ec\u5f27\u306e\u30ec\u30d9\u30eb\u306a\u304b\u306f1\u3064\u306e\u6f14\u7b97\u5b50\u3060\u3051\u306a\u5236\u7d04\u3067. Lisp \u306e\u6642\u3068\u540c\u3058\u3088\u3046\u306b.\n\n### \u5b9f\u88c5\n\n```scm\n; [ex-2.58-a.scm]\n;\n(define (ex-2.58-a)\n\t(print \"(addend '(a + b))\")\n\t(print \";==> \" (addend '(a + b)))\n\t(print \"(augend '(a + b))\")\n\t(print \";==> \" (augend '(a + b)))\n\t(print \"(augend '(a + b + c))\")\n\t(print \";==> \" (augend '(a + b + c)))\n\n\t(newline)\n\t(print \"(multiplier '(a * b))\")\n\t(print \";==> \" (multiplier '(a * b)))\n\t(print \"(multiplicand '(a * b))\")\n\t(print \";==> \" (multiplicand '(a * b)))\n\t(print \"(multiplicand '(a * b * c))\")\n\t(print \";==> \" (multiplicand '(a * b * c)))\n\n\t(newline)\n\t(print \"(base '(a ** b))\")\n\t(print \";==> \" (base '(a ** b)))\n\t(print \"(exponent '(a ** b))\")\n\t(print \";==> \" (exponent '(a ** b)))\n\t(print \"(exponent '(a ** b ** c))\")\n\t(print \";==> \" (exponent '(a ** b ** c)))\n\n\t(newline)\n\t(print \"(deriv '(x * y * (x + 3)) 'x)\")\n\t(print \";==> \" (deriv '(x * y * (x + 3)) 'x))\n\n\t(newline)\n\t(print \"(deriv '(a * (x ** 3)) 'x)\")\n\t(print \";==> \" (deriv '(a * (x ** 3)) 'x))\n\t(print \"(deriv '(a * (x ** x ** 5)) 'x)\")\n\t(print \";==> \" (deriv '(a * (x ** x ** 5)) 'x))\n\t#t)\n\n\n(load \"./ex-2.56\")\n\n\n(define (bin-expr-of? op expr)\n\t(and (pair? expr) (pair? (cdr expr)) (eq? (cadr expr) op)))\n\n\n(define (bin-expr-op expr)\n\t(cadr expr))\n\n\n(define (bin-expr-lhs expr)\n\t(car expr))\n\n\n(define (bin-expr-rhs expr)\n\t(if\n\t\t(null? (cdddr expr))\n\t\t; 2\u9805\u306e\u307f.\n\t\t(caddr expr)\n\t\t; 3\u9805\u4ee5\u4e0a.\n\t\t(cddr expr)))\n\n\n(define (bin-expr-append op expr1 expr2)\n\t(cond\n\t\t((bin-expr-of? op expr1)\n\t\t\t(if\n\t\t\t\t(bin-expr-of? op expr2)\n\t\t\t\t; both expr1 and expr2 are bin-expr of 'op'.\n\t\t\t\t(append (cdr expr1) (list op) (cdr expr2))\n\t\t\t\t; expr1 is a bin-expr of 'op', but expr2 is not a bin-expr of 'op'.\n\t\t\t\t(append (cdr expr1) (list op) (list expr2))))\n\t\t((bin-expr-of? op expr2)\n\t\t\t; expr1 is not a bin-expr of 'op', but expr2 is a bin-expr of 'op'.\n\t\t\t(append (list expr1) (list op) (cdr expr2)))\n\t\t(else\n\t\t\t; both expr1 and expr2 are not bin-expr of 'op'.\n\t\t\t(list expr1 op expr2))))\n\n\n; @override\n(define (sum? s)\n\t(bin-expr-of? '+ s))\n\n\n; @override\n(define (addend s)\n\t(bin-expr-lhs s))\n\n\n; @override\n(define (augend s)\n\t(bin-expr-rhs s))\n\n\n; @override\n(define (make-sum a1 a2)\n\t(cond\n\t\t((=number? a1 0) a2)\n\t\t((=number? a2 0) a1)\n\t\t((and (number? a1) (number? a2))\n\t\t\t(+ a1 a2))\n\n\t\t(else (bin-expr-append '+ a1 a2))))\n\n\n; @override\n(define (product? p)\n\t(bin-expr-of? '* p))\n\n\n; @override\n(define (multiplier p)\n\t(bin-expr-lhs p))\n\n\n; @override\n(define (multiplicand p)\n\t(bin-expr-rhs p))\n\n\n; @override\n(define (make-product m1 m2)\n\t(cond\n\t\t((or (=number? m1 0) (=number? m2 0)) 0)\n\t\t((=number? m1 1) m2)\n\t\t((=number? m2 1) m1)\n\t\t((and (number? m1) (number? m2))\n\t\t\t(* m1 m2))\n\n\t\t(else (bin-expr-append '* m1 m2))))\n\n\n; @override\n(define (exponentiation? x)\n\t(bin-expr-of? '** x))\n\n\n; @override\n(define (base x)\n\t(bin-expr-lhs x))\n\n\n; @override\n(define (exponent x)\n\t(bin-expr-rhs x))\n\n\n; @override\n(define (make-exponent x y)\n\t(cond\n\t\t((=number? y 0) 1)\n\t\t((=number? y 1) x)\n\t\t((and (number? x) (number? y)) (expt x y))\n\n\t\t(else (bin-expr-append '** x y))))\n```\n\n### \u5b9f\u884c\u7d50\u679c\n\n```scm\ngosh> (ex-2.58-a)\n(addend '(a + b))\n;==> a\n(augend '(a + b))\n;==> b\n(augend '(a + b + c))\n;==> (b + c)\n\n(multiplier '(a * b))\n;==> a\n(multiplicand '(a * b))\n;==> b\n(multiplicand '(a * b * c))\n;==> (b * c)\n\n(base '(a ** b))\n;==> a\n(exponent '(a ** b))\n;==> b\n(exponent '(a ** b ** c))\n;==> (b ** c)\n\n(deriv '(x * y * (x + 3)) 'x)\n;==> ((x * y) + (y * (x + 3)))\n\n(deriv '(a * (x ** 3)) 'x)\n;==> (a * * (x ** 2))\n(deriv '(a * (x ** x ** 5)) 'x)\n;==> (a * * (x ** ((x ** 5) + -1)))\n```\n\n\n## ex-2.58. (b) \u6f14\u7b97\u5b50\u306e\u6df7\u5408\u914d\u7f6e\n\n\u540c\u3058\u62ec\u5f27\u5185\u3067\u3082\u512a\u5148\u9806\u4f4d\u7684\u306b\u554f\u984c\u7121\u3044\u5834\u5408\u306f\u7570\u306a\u308b\u6f14\u7b97\u5b50\u306e\u5834\u5408\u3067\u3082\u62ec\u5f27\u3092\u7701\u7565\u3059\u308b\u3088\u3046\u306a\u5bfe\u5fdc.\n\n\u3053\u3093\u306a\u306e:\n\n```scm\n(make-product (make-sum 'a 'b) (make-sum 'c 'd))\n;==> ((a + b) * (c + d))\n(make-sum (make-product 'a 'b) (make-product 'c 'd))\n;==> (a * b + c * d)\n```\n\n\u3053\u306e\u554f\u984c\u3063\u3066\u3057\u308c\u3063\u3068\u512a\u5148\u9806\u4f4d\u306e\u5bfe\u5fdc\u4ee5\u5916\u306b, `(a + b)` \u306e2\u9805\u5f0f\u306e\u307f\u3060\u3063\u305f\u306e\u3092 `(a + b + c)` \u307f\u305f\u3044\u306a3\u9805\u4ee5\u4e0a\u306e\u5f0f\u306b\u5bfe\u5fdc\u3059\u308b\u306e\u304c\u4e00\u7dd2\u306b\u5165\u3063\u3066\u308b\u306e\u306d\u30fb\u03c9\u30fb;\n\n\n\u8907\u6570\u306e\u6f14\u7b97\u5b50\u304c1\u3064\u306e\u62ec\u5f27\u5185\u306b\u6df7\u5728\u3057\u3066\u3044\u308b\u306e\u3067, \u512a\u5148\u5ea6\u306e\u4f4e\u3044\u6f14\u7b97\u5b50\u304c\u3042\u3063\u305f\u3089\u5148\u306b\u305d\u3053\u3067\u5206\u5272\u3059\u308b\u3053\u3068\u3067, \u512a\u5148\u5ea6\u306e\u9ad8\u3044\u6f14\u7b97\u5b50\u304c\u5148\u306b\u9805\u5185\u3067\u6f14\u7b97\u3055\u308c\u305f\u5f8c\u306b, \u512a\u5148\u5ea6\u306e\u4f4e\u3044\u6f14\u7b97\u5b50\u3067\u51e6\u7406\u3055\u308c\u308b\u3088\u3046\u306b\u306a\u308b.\n\n\u512a\u5148\u9806\u4f4d\u306b\u5fdc\u3058\u305f\u51e6\u7406\u9806\u306f\u6700\u521d\u304b\u3089\u3061\u3087\u3046\u3069\u3044\u3044\u9806\u756a\u306b\u306a\u3063\u3066\u308b\u3063\u307d\u3044.\n\n\u4f8b. `a * b + c` \u306e\u5834\u5408:\n\n1. \u512a\u5148\u5ea6\u306e\u4f4e\u3044 `+` \u304c\u3042\u308b\n2. `sum?` \u304c\u771f\n3. \u52a0\u7b97\u3068\u3057\u3066\u306e\u51e6\u7406\u306b\u5206\u5c90\n4. `(addend expr) ==> lhs ==> a * b`\n5. `(augend expr) ==> rhs ==> c`\n6. lhs \u53ca\u3073 rhs \u3067\u306f\u5206\u5272\u5bfe\u8c61\u3068\u3059\u308b\u6f14\u7b97\u5b50\u304c\u5fc5\u305a\u542b\u307e\u308c\u3066\u3044\u308b\u4e8b\u524d\u6761\u4ef6\u3092\u6e80\u305f\u3059\u3068\u3059\u308b.\n7. \u9006\u306b, \u52a0\u7b97\u3067\u306a\u3044\u5834\u5408 (`sum?` \u304c\u507d\u306e\u5834\u5408) \u306b\u306f `addend`, `augend` \u306f\u547c\u3070\u308c\u308b\u3053\u3068\u306f\u306a\u3044\n8. \u52a0\u7b97\u3067\u306a\u3044\u5834\u5408\u306f, \u6b21\u306b\u512a\u5148\u5ea6\u306e\u4f4e\u3044\u4e57\u7b97 (`product?`) \u306b\u3066\u540c\u69d8\u306b.\n9. \u3055\u3089\u306b\u540c\u69d8\u306b\u7d2f\u4e57 (`exponentiation?`) \u306b\u3066\u540c\u69d8\u306b.\n\n\u305d\u3093\u306a\u304b\u3093\u3058.\n\n\u7279\u5b9a\u306e\u6f14\u7b97\u5b50\u90e8\u5206\u3067 `lhs op rhs` \u306b\u5206\u5272\u3059\u308b\u51e6\u7406\u3092 `expr op expr op ... op expr` \u306a\u69cb\u9020\u306e `op` \u90e8\u5206\u306e\u4e00\u81f4\u3092\u3057\u3089\u3079\u3066\u3044\u3063\u305f\u3051\u3069, `expr` \u90e8\u5206\u306b\u6f14\u7b97\u5b50\u304c\u51fa\u3066\u304f\u308b\u3053\u3068\u306f\u306a\u3044\u304b\u3089\u7247\u3063\u7aef\u304b\u3089 `expr` \u304b `op` \u304b\u3082\u6c17\u306b\u305b\u305a\u306b\u5224\u5b9a\u3057\u3066\u3044\u3063\u3066\u3082\u554f\u984c\u306a\u304b\u3063\u305f\u307d\u3044. \u306a\u308b\u307b\u3069\u301c\u30fb\u03c9\u30fb*\n\n### \u5b9f\u88c5\n\n```scm\n; [ex-2.58-b.scm]\n;\n(define (ex-2.58-b)\n\t(print \"(make-product (make-sum 'a 'b) (make-sum 'c 'd))\")\n\t(print \";==> \" (make-product (make-sum 'a 'b) (make-sum 'c 'd)))\n\t(print \"(make-sum (make-product 'a 'b) (make-product 'c 'd))\")\n\t(print \";==> \" (make-sum (make-product 'a 'b) (make-product 'c 'd)))\n\n\t(newline)\n\t(print \"(deriv '(x * y * (x + 3)) 'x)\")\n\t(print \";==> \" (deriv '(x * y * (x + 3)) 'x))\n\n\t(newline)\n\t(print \"(deriv '(a * (x ** 3)) 'x)\")\n\t(print \";==> \" (deriv '(a * (x ** 3)) 'x))\n\t(print \"(deriv '(a * (x ** x ** 5)) 'x)\")\n\t(print \";==> \" (deriv '(a * (x ** x ** 5)) 'x))\n\t#t)\n\n\n(load \"./ex-2.56\")\n\n\n(define (bin-expr-of? op expr)\n\t(and\n\t\t(pair? expr)       ; (lhs . _)\n\t\t(pair? (cdr expr)) ; (lhs . op . _)\n\t\t(or\n\t\t\t(eq? (cadr expr) op)             ; op match?\n\t\t\t(bin-expr-of? op (cddr expr))))) ; recursion.\n\n\n(define (bin-expr-lhs op expr)\n\t(define (iter op rest left)\n\t\t(cond\n\t\t\t((null? rest) ; never seen the op.\n\t\t\t\t(error \"operator not found: \" op \" in \" (reverse left)))\n\t\t\t((eq? (car rest) op) ; same op?\n\t\t\t\t; split at here.\n\t\t\t\t(if\n\t\t\t\t\t(null? (cdr left)) ; lhs is a singleton?\n\t\t\t\t\t(car left)         ; singleton.\n\t\t\t\t\t(reverse left)))   ; compound.\n\t\t\t(else\n\t\t\t\t(iter op (cddr rest) (append (list (cadr rest) (car rest)) left)))))\n\n\t(iter op (cdr expr) (list (car expr))))\n\n\n(define (bin-expr-rhs op expr)\n\t(define (iter op rest)\n\t\t(if\n\t\t\t(eq? (car rest) op)\n\t\t\t(if  ; the op found. split at here.\n\t\t\t\t(null? (cddr rest)) ; rhs is a singleton?\n\t\t\t\t(cadr rest)         ; singleton.\n\t\t\t\t(cdr rest))         ; compound.\n\t\t\t(iter op (cddr rest))))\n\n\t(iter op (cdr expr)))\n\n\n(define (bin-expr-append paren-if? op expr1 expr2)\n\t(define (inner op expr1 expr2)\n\t\t(cond\n\t\t\t((and (pair? expr1) (pair? expr2))\n\t\t\t\t(append expr1 (list op) expr2))\n\t\t\t((and (pair? expr1) (not (pair? expr2)))\n\t\t\t\t(append expr1 (list op) (list expr2)))\n\t\t\t((and (not (pair? expr1)) (pair? expr2))\n\t\t\t\t(append (list expr1) (list op) expr2))\n\t\t\t((and (not (pair? expr1)) (not (pair? expr2)))\n\t\t\t\t(list expr1 op expr2))\n\t\t\t(else\n\t\t\t\t(error \"NEVER REACH HERE:\" op expr1 expr2))))\n\n\t(define (do-paren-if expr)\n\t\t(cond\n\t\t\t((not (paren-if? expr))\n\t\t\t\texpr)\n\t\t\t((not (list? expr))\n\t\t\t\texpr)\n\t\t\t(else\n\t\t\t\t(list expr)))) ; enparen.\n\n\t(inner op (do-paren-if expr1) (do-paren-if expr2)))\n\n\n; @override\n(define (sum? s)\n\t(bin-expr-of? '+ s))\n\n\n; @override\n(define (addend s)\n\t(bin-expr-lhs '+ s))\n\n\n; @override\n(define (augend s)\n\t(bin-expr-rhs '+ s))\n\n\n; @override\n(define (make-sum a1 a2)\n\t; parens are never required.\n\t(define (never e) #f)\n\n\t(cond\n\t\t((=number? a1 0) a2)\n\t\t((=number? a2 0) a1)\n\t\t((and (number? a1) (number? a2))\n\t\t\t(+ a1 a2))\n\n\t\t(else (bin-expr-append never '+ a1 a2))))\n\n\n; @override\n(define (product? p)\n\t(bin-expr-of? '* p))\n\n\n; @override\n(define (multiplier p)\n\t(bin-expr-lhs '* p))\n\n\n; @override\n(define (multiplicand p)\n\t(bin-expr-rhs '* p))\n\n\n; @override\n(define (make-product m1 m2)\n\t(cond\n\t\t((or (=number? m1 0) (=number? m2 0)) 0)\n\t\t((=number? m1 1) m2)\n\t\t((=number? m2 1) m1)\n\t\t((and (number? m1) (number? m2))\n\t\t\t(* m1 m2))\n\n\t\t(else (bin-expr-append sum? '* m1 m2))))\n\n\n; @override\n(define (exponentiation? x)\n\t(bin-expr-of? '** x))\n\n\n; @override\n(define (base x)\n\t(bin-expr-lhs '** x))\n\n\n; @override\n(define (exponent x)\n\t(bin-expr-rhs '** x))\n\n\n; @override\n(define (make-exponent x y)\n\t(define (sum-or-product? x)\n\t\t(or (sum? x) (product? x)))\n\n\t(cond\n\t\t((=number? y 0) 1)\n\t\t((=number? y 1) x)\n\t\t((and (number? x) (number? y)) (expt x y))\n\n\t\t(else (bin-expr-append sum-or-product? '** x y))))\n```\n\n### \u5b9f\u884c\u7d50\u679c\n\n```scm\ngosh> (ex-2.58-b)\n(make-product (make-sum 'a 'b) (make-sum 'c 'd))\n;==> ((a + b) * (c + d))\n(make-sum (make-product 'a 'b) (make-product 'c 'd))\n;==> (a * b + c * d)\n\n(deriv '(x * y * (x + 3)) 'x)\n;==> (x * y + y * (x + 3))\n\n(deriv '(a * (x ** 3)) 'x)\n;==> (a * 3 * x ** 2)\n(deriv '(a * (x ** x ** 5)) 'x)\n;==> (a * x ** 5 * x ** (x ** 5 + -1))\n```\n\n### \u304a\u307e\u3051: \u6bd4\u8f03\u7528\u306b\u5171\u901a\u5316\u3057\u305f\u51e6\u7406\u3092\u5c55\u958b\u3057\u305f\u30b3\u30fc\u30c9\n\n\u3084\u3063\u3064\u3051\u3067\u52a0\u7b97\u306e\u3068\u3053\u3060\u3051\u3056\u304f\u3063\u3068\u624b\u3067\u5c55\u958b\u3057\u3066\u307f\u305f. \u3042\u3063\u3066\u308b\u304b\u306f\u77e5\u3089\u306a\u3044\uff1e\u03c9\uff1c\n\n```scm\n; @override\n(define (sum? expr)\n\t; (bin-expr-of? '+ expr))\n\t(and\n\t\t(pair? expr)       ; expr=(lhs . _)      = (car . cdr)\n\t\t(pair? (cdr expr)) ; expr=(lhs . op . _) = (car . cadr . cddr )\n\t\t(or\n\t\t\t(eq? (cadr expr) '+)  ; op match?\n\t\t\t(sum? (cddr expr))))) ; recursion.\n\n\n; @override\n(define (addend expr)\n\t; (bin-expr-lhs '+ expr))\n\t(define (iter rest left)\n\t\t(cond\n\t\t\t((null? rest) ; never seen the op.\n\t\t\t\t(error \"operator not found: '+' in \" (reverse left)))\n\t\t\t((eq? (car rest) '+) ; same op?\n\t\t\t\t; split at here.\n\t\t\t\t(if\n\t\t\t\t\t(null? (cdr left)) ; lhs is a singleton?\n\t\t\t\t\t(car left)         ; singleton.\n\t\t\t\t\t(reverse left)))   ; compound.\n\t\t\t(else\n\t\t\t\t(iter (cddr rest) (append (list (cadr rest) (car rest)) left)))))\n\n\t(iter (cdr expr) (list (car expr))))\n\n\n; @override\n(define (augend expr)\n\t; (bin-expr-rhs '+ expr))\n\t(define (iter rest)\n\t\t(if\n\t\t\t(eq? (car rest) '+)\n\t\t\t(if  ; the op found. split at here.\n\t\t\t\t(null? (cddr rest)) ; rhs is a singleton?\n\t\t\t\t(cadr rest)         ; singleton.\n\t\t\t\t(cdr rest))         ; compound.\n\t\t\t(iter (cddr rest))))\n\n\t(iter (cdr expr)))\n\n\n; @override\n(define (make-sum a1 a2)\n\t(cond\n\t\t((=number? a1 0) a2)\n\t\t((=number? a2 0) a1)\n\t\t((and (number? a1) (number? a2))\n\t\t\t(+ a1 a2))\n\n\t\t(else\n\t\t\t; (bin-expr-append never '+ a1 a2)\n\t\t\t(cond\n\t\t\t\t((and (pair? a1) (pair? a2))\n\t\t\t\t\t(append a1 (list '+) a2))\n\t\t\t\t((and (pair? a1) (not (pair? a2)))\n\t\t\t\t\t(append a1 (list '+) (list a2)))\n\t\t\t\t((and (not (pair? a1)) (pair? a2))\n\t\t\t\t\t(append (list a1) (list '+) a2))\n\t\t\t\t((and (not (pair? a1)) (not (pair? a2)))\n\t\t\t\t\t(list a1 '+ a2))\n\t\t\t\t(else\n\t\t\t\t\t(error \"NEVER REACH HERE:\" '+ a1 a2))))))\n```\n\n\n### \u304a\u307e\u3051 (2): \u6f14\u7b97\u5b50\u306e\u512a\u5148\u9806\u306e\u78ba\u8a8d\n\n```scm\n; \u62ec\u5f27\u306a\u3057\u3067\u5b9f\u884c.\ngosh> (deriv '(x * x + x) 'x)\n(x + x + 1)\ngosh> (deriv '(x + x * x) 'x)\n(1 + x + x)\n\n; * \u3092\u660e\u793a\u7684\u306b\u512a\u5148 (\u901a\u5e38\u306e\u512a\u5148\u9806\u3067\u306e\u51e6\u7406\u3068\u540c\u7b49).\ngosh> (deriv '(x + (x * x)) 'x)\n(1 + x + x)\ngosh> (deriv '((x * x) + x) 'x)\n(x + x + 1)\n\n; + \u3092\u660e\u793a\u7684\u306b\u512a\u5148 (\u660e\u793a\u7684\u306b\u51e6\u7406\u9806\u3092\u9006\u8ee2\u3055\u305b\u305f\u5834\u5408).\ngosh> (deriv '(x * (x + x)) 'x)\n(x * 2 + x + x)\ngosh> (deriv '((x + x) * x) 'x)\n(x + x + 2 * x)\n```\n\n\u62ec\u5f27\u306a\u3057\u306e\u5834\u5408\u3067\u3082 `*` \u90e8\u5206\u306b\u62ec\u5f27\u3092\u3064\u3051\u3066\u660e\u793a\u7684\u306b\u512a\u5148\u51e6\u7406\u3055\u305b\u305f\u5834\u5408\u3068\u540c\u3058\u7d50\u679c\u304c\u5f97\u3089\u308c\u3066\u3044\u308b.\n\n\u8a66\u3057\u306b `deriv` \u3067 `sum?` \u90e8\u5206\u3068 `product?` \u90e8\u5206\u306e\u9806\u756a\u3092\u5165\u308c\u66ff\u3048\u308b\u3068\u8aa4\u3063\u305f\u7d50\u679c\u306b\u306a\u308b\u306f\u305a. \u3068\u3044\u3046\u308f\u3051\u3067\u8a66\u3057\u3066\u307f\u305f:\n\n```scm\n(define (deriv exp var)\n\t(cond\n\t\t((number? exp) 0)\n\t\t((variable? exp)\n\t\t\t(if (same-variable? exp var) 1 0))\n\t\t; \u308f\u3056\u3068 product? \u3092\u5148\u306b\u5224\u5b9a.\n\t\t((product? exp)\n\t\t\t...)\n\t\t((sum? exp)\n\t\t\t...)\n\t\t((exponentiation? exp)\n\n; \u308f\u3056\u3068\u8aa4\u3063\u305f\u51e6\u7406\u9806\u306b\u5909\u3048\u3066\u5b9f\u884c\u3057\u305f\u7d50\u679c.\ngosh> (deriv '(x * x + x) 'x)\n(x * 2 + x + x)\ngosh> (deriv '(x + x * x) 'x)\n(x + x + 2 * x)\n\n; * \u3092\u660e\u793a\u7684\u306b\u512a\u5148 (\u901a\u5e38\u306e\u512a\u5148\u9806\u3067\u306e\u51e6\u7406\u3068\u540c\u7b49).\ngosh> (deriv '(x + (x * x)) 'x)\n(1 + x + x)\ngosh> (deriv '((x * x) + x) 'x)\n(x + x + 1)\n\n; + \u3092\u660e\u793a\u7684\u306b\u512a\u5148 (\u660e\u793a\u7684\u306b\u51e6\u7406\u9806\u3092\u9006\u8ee2\u3055\u305b\u305f\u5834\u5408).\ngosh> (deriv '(x * (x + x)) 'x)\n(x * 2 + x + x)\ngosh> (deriv '((x + x) * x) 'x)\n(x + x + 2 * x)\n```\n\n\u60f3\u50cf\u901a\u308a, `+` \u3092\u512a\u5148\u3057\u3066\u7d50\u5408\u3055\u305b\u305f\u5834\u5408\u306e\u7d50\u679c\u304c\u8aa4\u3063\u3066\u5f97\u3089\u308c\u308b\u3088\u3046\u306b\u306a\u3063\u305f.\n\n### \u304a\u307e\u3051 (3): \u6f14\u7b97\u306e\u7d50\u5408\u65b9\u5411\n\n\u7d50\u5408\u65b9\u5411\u306f\u53f3\u7d50\u5408\u306b\u306a\u3063\u3066\u308b\u6a21\u69d8.\n\u306a\u306e\u3067\u53f3\u7d50\u5408\u306a\u7d2f\u4e57\u306b\u5bfe\u3057\u3066\u9069\u5207\u306b\u52d5\u4f5c\u3059\u308b.\n\u52a0\u7b97\u53ca\u3073\u4e57\u7b97\u306f\u672c\u6765\u306f\u5de6\u7d50\u5408\u3060\u3051\u3069, \u4eca\u56de\u306e\u3067\u306f\u5bfe\u79f0\u5f8b\u3092\u6301\u3064\u306e\u3067\u53f3\u7d50\u5408\u3067\u51e6\u7406\u3057\u3066\u3082\u7d50\u679c\u306f\u540c\u5024\u3067\u3042\u308a\u554f\u984c\u306f\u751f\u3058\u306a\u3044.\n\n\u7d2f\u4e57 (\u53f3\u7d50\u5408) \u306e\u5834\u5408:\n\n```scm\n; \u666e\u901a\u306b\u5b9f\u884c.\ngosh> (deriv '(x ** x ** x) 'x)\n(x ** x * x ** (x ** x + -1))\n\n; \u53f3\u7d50\u5408\u306e\u5834\u5408\u306e\u7d50\u679c.\ngosh> (deriv '(x ** (x ** x)) 'x)\n(x ** x * x ** (x ** x + -1))\n\n; \u5de6\u7d50\u5408\u306e\u5834\u5408\u306e\u7d50\u679c.\ngosh> (deriv '((x ** x) ** x) 'x)\n(x * x ** x ** (x + -1) * x * x ** (x + -1))\n```\n\n\u6b63\u3057\u304f\u53f3\u7d50\u5408\u3067\u51e6\u7406\u3055\u308c\u3066\u3044\u308b.\n\n\u4e57\u7b97 (\u5de6\u7d50\u5408) \u306e\u5834\u5408:\n\n```scm\n; \u666e\u901a\u306b\u5b9f\u884c.\ngosh> (deriv '(x * x * x) 'x)\n(x * (x + x) + x * x)\n\n; \u53f3\u7d50\u5408\u306e\u5834\u5408\u306e\u7d50\u679c.\ngosh> (deriv '(x * (x * x)) 'x)\n(x * (x + x) + x * x)\n\n; \u5de6\u7d50\u5408\u306e\u5834\u5408\u306e\u7d50\u679c.\ngosh> (deriv '((x * x) * x) 'x)\n(x * x + (x + x) * x)\n```\n\n\u53f3\u7d50\u5408\u3067\u51e6\u7406\u3055\u308c\u3066\u3057\u307e\u3063\u3066\u3044\u308b.\n\u3057\u304b\u3057\u3053\u3053\u3067\u306f\u5bfe\u79f0\u5f8b\u3092\u6301\u3064\u306e\u3067\u7d50\u679c\u7684\u306b\u554f\u984c\u306f\u306a\u3044.\n\n\u52a0\u7b97 (\u5de6\u7d50\u5408) \u306e\u5834\u5408:\n\n```scm\n; \u666e\u901a\u306b\u5b9f\u884c.\ngosh> (deriv '(x + x + x) 'x)\n3\n\n; \u53f3\u7d50\u5408\u306e\u5834\u5408\u306e\u7d50\u679c.\ngosh> (deriv '((x + x) + x) 'x)\n3\n\n; \u5de6\u7d50\u5408\u306e\u5834\u5408\u306e\u7d50\u679c.\ngosh> (deriv '(x + (x + x)) 'x)\n3\n```\n\n\u9055\u3044\u304c\u898b\u3048\u306a\u3044\u3051\u308c\u3069\u4e57\u7b97\u306e\u5834\u5408\u3068\u540c\u3058\u306e\u306f\u305a\uff1e\u03c9\uff1c;\n", "tags": ["SICP"]}