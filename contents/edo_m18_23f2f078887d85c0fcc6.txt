{"context": " More than 1 year has passed since last update.\u4e00\u89a7\u306fApple\u306e\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u306b\u307e\u3068\u307e\u3063\u3066\u307e\u3059\u3002\n\u3067\u3059\u304c\u3001\u3088\u304f\u4f7f\u3046\u306e\u3067\u30e1\u30e2\u3068\u3057\u3066\u629c\u304d\u51fa\u3057\u3066\u304a\u304d\u307e\u3059\u3002\n\n\n\nSpecifier\nDescription\n\n\n\n\n%@\nObjective-C object, printed as the string returned by descriptionWithLocale: if available, or description otherwise. Also works with CFTypeRef objects, returning the result of the CFCopyDescription function.\n\n\n%%\n'%' character.\n\n\n%d, %D\nSigned 32-bit integer (int).\n\n\n%u, %U\nUnsigned 32-bit integer (unsigned int).\n\n\n%x\nUnsigned 32-bit integer (unsigned int), printed in hexadecimal using the digits 0\u20139 and lowercase a\u2013f.\n\n\n%X\nUnsigned 32-bit integer (unsigned int), printed in hexadecimal using the digits 0\u20139 and uppercase A\u2013F.\n\n\n%o, %O\nUnsigned 32-bit integer (unsigned int), printed in octal.\n\n\n%f\n64-bit floating-point number (double).\n\n\n%e\n64-bit floating-point number (double), printed in scientific notation using a lowercase e to introduce the exponent.\n\n\n%E\n64-bit floating-point number (double), printed in scientific notation using an uppercase E to introduce the exponent.\n\n\n%g\n64-bit floating-point number (double), printed in the style of %e if the exponent is less than \u20134 or greater than or equal to the precision, in the style of %f otherwise.\n\n\n%G\n64-bit floating-point number (double), printed in the style of %E if the exponent is less than \u20134 or greater than or equal to the precision, in the style of %f otherwise.\n\n\n%c\n8-bit unsigned character (unsigned char), printed by NSLog() as an ASCII character, or, if not an ASCII character, in the octal format \\ddd or the Unicode hexadecimal format \\udddd, where d is a digit.\n\n\n%C\n16-bit Unicode character (unichar), printed by NSLog() as an ASCII character, or, if not an ASCII character, in the octal format \\ddd or the Unicode hexadecimal format \\udddd, where d is a digit.\n\n\n%s\nNull-terminated array of 8-bit unsigned characters. Because the %s specifier causes the characters to be interpreted in the system default encoding, the results can be variable, especially with right-to-left languages. For example, with RTL,\n\n\n%s\ninserts direction markers when the characters are not strongly directional. For this reason, it\u2019s best to avoid %s and specify encodings explicitly.\n\n\n%S\nNull-terminated array of 16-bit Unicode characters.\n\n\n%p\nVoid pointer (void *), printed in hexadecimal with the digits 0\u20139 and lowercase a\u2013f, with a leading 0x.\n\n\n%a\n64-bit floating-point number (double), printed in scientific notation with a leading 0x and one hexadecimal digit before the decimal point using a lowercase p to introduce the exponent.\n\n\n%A\n64-bit floating-point number (double), printed in scientific notation with a leading 0X and one hexadecimal digit before the decimal point using a uppercase P to introduce the exponent.\n\n\n%F\n64-bit floating-point number (double), printed in decimal notation.\n\n\n\n\n\u4e00\u89a7\u306f[Apple\u306e\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8](https://developer.apple.com/library/mac/documentation/Cocoa/Conceptual/Strings/Articles/formatSpecifiers.html#//apple_ref/doc/uid/TP40004265-SW1)\u306b\u307e\u3068\u307e\u3063\u3066\u307e\u3059\u3002\n\n\u3067\u3059\u304c\u3001\u3088\u304f\u4f7f\u3046\u306e\u3067\u30e1\u30e2\u3068\u3057\u3066\u629c\u304d\u51fa\u3057\u3066\u304a\u304d\u307e\u3059\u3002\n\n| Specifier | Description |\n|-----------|-------------|\n| %@ | Objective-C object, printed as the string returned by descriptionWithLocale: if available, or description otherwise. Also works with CFTypeRef objects, returning the result of the CFCopyDescription function. |\n| %% | '%' character. |\n| %d, %D | Signed 32-bit integer (int). |\n| %u, %U | Unsigned 32-bit integer (unsigned int). |\n| %x | Unsigned 32-bit integer (unsigned int), printed in hexadecimal using the digits 0\u20139 and lowercase a\u2013f. |\n| %X | Unsigned 32-bit integer (unsigned int), printed in hexadecimal using the digits 0\u20139 and uppercase A\u2013F. |\n| %o, %O | Unsigned 32-bit integer (unsigned int), printed in octal. |\n| %f | 64-bit floating-point number (double). |\n| %e | 64-bit floating-point number (double), printed in scientific notation using a lowercase e to introduce the exponent. |\n| %E | 64-bit floating-point number (double), printed in scientific notation using an uppercase E to introduce the exponent. |\n| %g | 64-bit floating-point number (double), printed in the style of %e if the exponent is less than \u20134 or greater than or equal to the precision, in the style of %f otherwise. |\n| %G | 64-bit floating-point number (double), printed in the style of %E if the exponent is less than \u20134 or greater than or equal to the precision, in the style of %f otherwise. |\n| %c | 8-bit unsigned character (unsigned char), printed by NSLog() as an ASCII character, or, if not an ASCII character, in the octal format \\\\ddd or the Unicode hexadecimal format \\\\udddd, where d is a digit. |\n| %C | 16-bit Unicode character (unichar), printed by NSLog() as an ASCII character, or, if not an ASCII character, in the octal format \\\\ddd or the Unicode hexadecimal format \\\\udddd, where d is a digit. |\n| %s | Null-terminated array of 8-bit unsigned characters. Because the %s specifier causes the characters to be interpreted in the system default encoding, the results can be variable, especially with right-to-left languages. For example, with RTL, |\n| %s | inserts direction markers when the characters are not strongly directional. For this reason, it\u2019s best to avoid %s and specify encodings explicitly. |\n| %S | Null-terminated array of 16-bit Unicode characters. |\n| %p | Void pointer (void *), printed in hexadecimal with the digits 0\u20139 and lowercase a\u2013f, with a leading 0x. |\n| %a | 64-bit floating-point number (double), printed in scientific notation with a leading 0x and one hexadecimal digit before the decimal point using a lowercase p to introduce the exponent. |\n| %A | 64-bit floating-point number (double), printed in scientific notation with a leading 0X and one hexadecimal digit before the decimal point using a uppercase P to introduce the exponent. |\n| %F | 64-bit floating-point number (double), printed in decimal notation. |\n\n", "tags": ["Objective-C", "NSLog", "\u30ed\u30b0", "iOS"]}