{"context": " More than 1 year has passed since last update.\u4e00\u5f0f\u3092 https://github.com/ken200/OwinAuthWithNancy \u306b\u914d\u7f6e\u3057\u3066\u3044\u307e\u3059\u3002\n\u672c\u4ef6\u306b\u95a2\u9023\u3059\u308b\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u306f LoginMiddleware.cs \u3068 startup.cs \u306b\u8a18\u8f09\u3057\u3066\u3044\u307e\u3059\u3002\n\n\u5fc5\u8981\u30d1\u30c3\u30b1\u30fc\u30b8\n\nMicrosoft.Owin\nMicrosoft.Owin.Security\nMicrosoft.Owin.Security.Cookies\nOwin\n\n\n\u69cb\u6210\u7269\n\n\u30df\u30c9\u30eb\u30a6\u30a7\u30a2\nMicrosoft.Owin.OwinMiddleware\u30af\u30e9\u30b9\u3092\u7d99\u627f\u3057\u3066\u4f5c\u6210\u3059\u308b\u306e\u304c\u7121\u96e3\u304b\u3068\u601d\u308f\u308c\u307e\u3059\u3002\nKatanaProject\u306b\u4f9d\u5b58\u3059\u308b\u3053\u3068\u306b\u306a\u308b\u3051\u3069\u3001MS\u88fd\u306a\u306e\u3067\u3055\u307b\u3069\u554f\u984c\u306b\u306f\u306a\u3089\u306a\u3044\u3068\u8003\u3048\u3066\u3044\u307e\u3059\u3002\n\u30df\u30c9\u30eb\u30a6\u30a7\u30a2\u3067\u306e\u8a8d\u8a3c\u95a2\u4fc2\u306b\u3064\u3044\u3066\u3001\u8907\u96d1\u306a\u3053\u3068\u306f\u884c\u3063\u3066\u3044\u307e\u305b\u3093\u3002\u8aad\u3093\u3067\u3082\u3089\u3048\u308c\u3070\u308f\u304b\u308b\u3051\u3069\u3001SignIn\u30e1\u30bd\u30c3\u30c9\u306e\u300ccontext.Authentication.SignIn(userIdentity);\u300d\u3067\u8a8d\u8a3c\u767b\u9332\u3057\u3001\u305d\u306e\u5f8c\u30ea\u30c0\u30a4\u30ec\u30af\u30c8\u3057\u3066\u3044\u307e\u3059\u3002\n\n//\u30df\u30c9\u30eb\u30a6\u30a7\u30a2\u30b3\u30fc\u30c9\u3092\u4e00\u90e8\u629c\u7c8b\n\npublic class LoginMiddleware : OwinMiddleware\n{\n    public LoginMiddleware(...)\n        : base(...)\n    {\n        ...\n    }\n\n    public async override Task Invoke(IOwinContext context)\n    {\n        if(!IsAuthenticated(context))\n        {\n            await SignIn(context);\n            return;\n        }\n\n        await Next.Invoke(context);\n    }\n\n    ...\n\n    private async Task SignIn(IOwinContext context)\n    {\n        //\u30ed\u30b0\u30a4\u30f3\u30e6\u30fc\u30b6\u30fc\u540d\u306e\u53d6\u5f97\n        var userName = await _loginOption.UserNameGetter(context);\n\n        if (string.IsNullOrEmpty(userName))\n        {\n            //\u30ec\u30b9\u30dd\u30f3\u30b9\u306b\u66f8\u304d\u8fbc\u307f\u3002\u6b21\u30df\u30c9\u30eb\u30a6\u30a7\u30a2\u3078\u306e\u4f1d\u756a\u306f\u884c\u308f\u306a\u3044\u3002\n            await WriteResponse(context.Response, 401, \"invalid parameter.\");\n            return;\n        }\n\n        //\u30e6\u30fc\u30b6\u30fc\u30b9\u30c8\u30a2\u306b\u5bfe\u8c61\u30e6\u30fc\u30b6\u30fc\u304c\u5b58\u5728\u3059\u308b\u304b\u78ba\u8a8d\n        var uMng = new MyUserManager();\n        var userIdentity = await uMng.CreateAsync(userName);\n        if (userIdentity == null)\n        {\n            await WriteResponse(context.Response, 401, \"invalid user.\");\n            return;\n        }\n\n        //\u8a8d\u8a3c\u767b\u9332\n        context.Authentication.SignIn(userIdentity);\n\n        //\u30ea\u30c0\u30a4\u30ec\u30af\u30c8\n        var q = context.Request.Query[_loginOption.RedirectUrlQueryName];\n        var redirectPath = !string.IsNullOrEmpty(q) ? q : _loginOption.DefaultRedirectUrl;\n        context.Response.Redirect(redirectPath);\n    }\n\n    ...\n}\n\n\n\u30e6\u30fc\u30c6\u30a3\u30ea\u30c6\u30a3\u30fc\u30af\u30e9\u30b9\nUseXXXX()\u306a\u62e1\u5f35\u30e1\u30bd\u30c3\u30c9\u3092\u5b9a\u7fa9\u3059\u308b\u3002\u3053\u308c\u7d4c\u7531\u3067\u30df\u30c9\u30eb\u30a6\u30a7\u30a2\u3092\u767b\u9332\u3059\u308b\u6163\u308f\u3057\uff1f\npublic static class LoginExtentions\n{\n    public static IAppBuilder UseLogin(this IAppBuilder app, LoginOptions loginOption, LogoutOptions logoutOption)\n    {\n        return app.Use<LoginMiddleware>(loginOption, logoutOption);\n    }\n}\n\nStartup\u30af\u30e9\u30b9\u3067\u306e\u767b\u9332\npublic class Startup\n{\n    public void Configuration(IAppBuilder app)\n    {\n        //\u30af\u30c3\u30ad\u30fc\u30d9\u30fc\u30b9\u306e\u8a8d\u8a3c\u3059\u308b\u969b\u306b\u5fc5\u8981\u306a\u30df\u30c9\u30eb\u30a6\u30a7\u30a2\n        app.UseCookieAuthentication(new CookieAuthenticationOptions() {\n            AuthenticationType = DefaultAuthenticationTypes.ApplicationCookie\n        });\n\n        //\u72ec\u81ea\u8a8d\u8a3c\u30df\u30c9\u30eb\u30a6\u30a7\u30a2\n        app.UseLogin(\n            new LoginOptions() { \n                LoginUrl = \"/login\", \n                LoginMethod = \"POST\", \n                UserNameGetter = async (ctx) => {\n                    var form = await ctx.Request.ReadFormAsync();\n                    return form.Get(\"userName\");\n                },\n                DefaultRedirectUrl = \"/secure\"},\n            new LogoutOptions() { \n                LogoutUrl = \"/logout\", \n                DefaultRedirectUrl = \"/\" });\n\n        app.UseNancy();\n    }\n}\n\n\u4e00\u5f0f\u3092 https://github.com/ken200/OwinAuthWithNancy \u306b\u914d\u7f6e\u3057\u3066\u3044\u307e\u3059\u3002\n\n\u672c\u4ef6\u306b\u95a2\u9023\u3059\u308b\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u306f LoginMiddleware.cs \u3068 startup.cs \u306b\u8a18\u8f09\u3057\u3066\u3044\u307e\u3059\u3002\n\n\n## \u5fc5\u8981\u30d1\u30c3\u30b1\u30fc\u30b8\n\n+ Microsoft.Owin\n\n+ Microsoft.Owin.Security\n\n+ Microsoft.Owin.Security.Cookies\n\n+ Owin\n\n\n## \u69cb\u6210\u7269\n\n## \u30df\u30c9\u30eb\u30a6\u30a7\u30a2\n\nMicrosoft.Owin.OwinMiddleware\u30af\u30e9\u30b9\u3092\u7d99\u627f\u3057\u3066\u4f5c\u6210\u3059\u308b\u306e\u304c\u7121\u96e3\u304b\u3068\u601d\u308f\u308c\u307e\u3059\u3002\n\nKatanaProject\u306b\u4f9d\u5b58\u3059\u308b\u3053\u3068\u306b\u306a\u308b\u3051\u3069\u3001MS\u88fd\u306a\u306e\u3067\u3055\u307b\u3069\u554f\u984c\u306b\u306f\u306a\u3089\u306a\u3044\u3068\u8003\u3048\u3066\u3044\u307e\u3059\u3002\n\n\u30df\u30c9\u30eb\u30a6\u30a7\u30a2\u3067\u306e\u8a8d\u8a3c\u95a2\u4fc2\u306b\u3064\u3044\u3066\u3001\u8907\u96d1\u306a\u3053\u3068\u306f\u884c\u3063\u3066\u3044\u307e\u305b\u3093\u3002\u8aad\u3093\u3067\u3082\u3089\u3048\u308c\u3070\u308f\u304b\u308b\u3051\u3069\u3001SignIn\u30e1\u30bd\u30c3\u30c9\u306e\u300ccontext.Authentication.SignIn(userIdentity);\u300d\u3067\u8a8d\u8a3c\u767b\u9332\u3057\u3001\u305d\u306e\u5f8c\u30ea\u30c0\u30a4\u30ec\u30af\u30c8\u3057\u3066\u3044\u307e\u3059\u3002\n\n```csharp\n\n//\u30df\u30c9\u30eb\u30a6\u30a7\u30a2\u30b3\u30fc\u30c9\u3092\u4e00\u90e8\u629c\u7c8b\n\npublic class LoginMiddleware : OwinMiddleware\n{\n    public LoginMiddleware(...)\n        : base(...)\n    {\n        ...\n    }\n\n    public async override Task Invoke(IOwinContext context)\n    {\n        if(!IsAuthenticated(context))\n        {\n            await SignIn(context);\n            return;\n        }\n\n        await Next.Invoke(context);\n    }\n\n    ...\n\n    private async Task SignIn(IOwinContext context)\n    {\n    \t//\u30ed\u30b0\u30a4\u30f3\u30e6\u30fc\u30b6\u30fc\u540d\u306e\u53d6\u5f97\n        var userName = await _loginOption.UserNameGetter(context);\n\n        if (string.IsNullOrEmpty(userName))\n        {\n            //\u30ec\u30b9\u30dd\u30f3\u30b9\u306b\u66f8\u304d\u8fbc\u307f\u3002\u6b21\u30df\u30c9\u30eb\u30a6\u30a7\u30a2\u3078\u306e\u4f1d\u756a\u306f\u884c\u308f\u306a\u3044\u3002\n            await WriteResponse(context.Response, 401, \"invalid parameter.\");\n            return;\n        }\n\n        //\u30e6\u30fc\u30b6\u30fc\u30b9\u30c8\u30a2\u306b\u5bfe\u8c61\u30e6\u30fc\u30b6\u30fc\u304c\u5b58\u5728\u3059\u308b\u304b\u78ba\u8a8d\n        var uMng = new MyUserManager();\n        var userIdentity = await uMng.CreateAsync(userName);\n        if (userIdentity == null)\n        {\n            await WriteResponse(context.Response, 401, \"invalid user.\");\n            return;\n        }\n\n        //\u8a8d\u8a3c\u767b\u9332\n        context.Authentication.SignIn(userIdentity);\n        \n        //\u30ea\u30c0\u30a4\u30ec\u30af\u30c8\n        var q = context.Request.Query[_loginOption.RedirectUrlQueryName];\n        var redirectPath = !string.IsNullOrEmpty(q) ? q : _loginOption.DefaultRedirectUrl;\n        context.Response.Redirect(redirectPath);\n    }\n    \n    ...\n}\n```\n\n## \u30e6\u30fc\u30c6\u30a3\u30ea\u30c6\u30a3\u30fc\u30af\u30e9\u30b9\n\nUseXXXX()\u306a\u62e1\u5f35\u30e1\u30bd\u30c3\u30c9\u3092\u5b9a\u7fa9\u3059\u308b\u3002\u3053\u308c\u7d4c\u7531\u3067\u30df\u30c9\u30eb\u30a6\u30a7\u30a2\u3092\u767b\u9332\u3059\u308b\u6163\u308f\u3057\uff1f\n\n```csharp\npublic static class LoginExtentions\n{\n    public static IAppBuilder UseLogin(this IAppBuilder app, LoginOptions loginOption, LogoutOptions logoutOption)\n    {\n        return app.Use<LoginMiddleware>(loginOption, logoutOption);\n    }\n}\n```\n\nStartup\u30af\u30e9\u30b9\u3067\u306e\u767b\u9332\n\n```csharp\npublic class Startup\n{\n    public void Configuration(IAppBuilder app)\n    {\n        //\u30af\u30c3\u30ad\u30fc\u30d9\u30fc\u30b9\u306e\u8a8d\u8a3c\u3059\u308b\u969b\u306b\u5fc5\u8981\u306a\u30df\u30c9\u30eb\u30a6\u30a7\u30a2\n        app.UseCookieAuthentication(new CookieAuthenticationOptions() {\n            AuthenticationType = DefaultAuthenticationTypes.ApplicationCookie\n        });\n\n        //\u72ec\u81ea\u8a8d\u8a3c\u30df\u30c9\u30eb\u30a6\u30a7\u30a2\n        app.UseLogin(\n            new LoginOptions() { \n                LoginUrl = \"/login\", \n                LoginMethod = \"POST\", \n                UserNameGetter = async (ctx) => {\n                    var form = await ctx.Request.ReadFormAsync();\n                    return form.Get(\"userName\");\n                },\n                DefaultRedirectUrl = \"/secure\"},\n            new LogoutOptions() { \n                LogoutUrl = \"/logout\", \n                DefaultRedirectUrl = \"/\" });\n\n        app.UseNancy();\n    }\n}\n```\n", "tags": ["ASP.NET", "OWIN"]}