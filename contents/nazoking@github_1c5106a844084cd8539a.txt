{"tags": ["Python", "\u6a5f\u68b0\u5b66\u7fd2", "MachineLearning", "scikit-learn"], "context": "http://scikit-learn.org/stable/tutorial/statistical_inference/model_selection.html \u3092 google\u7ffb\u8a33\u3057\u305f\nscikit-learn 0.18 \u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb \u76ee\u6b21\n\u79d1\u5b66\u7684\u30c7\u30fc\u30bf\u51e6\u7406\u306e\u305f\u3081\u306e\u7d71\u8a08\u5b66\u7fd2\u306e\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb \u76ee\u6b21\n\u524d\u306e\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb\u30da\u30fc\u30b8\n\n\u30e2\u30c7\u30eb\u9078\u629e\uff1a\u63a8\u5b9a\u5668\u3068\u305d\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u306e\u9078\u629e\n\n\u30b9\u30b3\u30a2\u3001\u30af\u30ed\u30b9\u30d0\u30ea\u30c7\u30fc\u30b7\u30e7\u30f3\u3055\u308c\u305f\u30b9\u30b3\u30a2\n\u3053\u308c\u307e\u3067\u898b\u3066\u304d\u305f\u3088\u3046\u306b\u3001\u3059\u3079\u3066\u306e\u63a8\u5b9a\u5668\u306f\u3001\u65b0\u3057\u3044\u30c7\u30fc\u30bf\u306e\u30d5\u30a3\u30c3\u30c8\uff08\u307e\u305f\u306f\u4e88\u6e2c\uff09\u306e\u54c1\u8cea\u3092\u5224\u65ad\u3067\u304d\u308b score \u30e1\u30bd\u30c3\u30c9\u3092\u516c\u958b\u3057\u3066\u3044\u307e\u3059\u3002\u5927\u304d\u3044\u65b9\u304c\u826f\u3044\u3002\n>>> from sklearn import datasets, svm\n>>> digits = datasets.load_digits()\n>>> X_digits = digits.data\n>>> y_digits = digits.target\n>>> svc = svm.SVC(C=1, kernel='linear')\n>>> svc.fit(X_digits[:-100], y_digits[:-100]).score(X_digits[-100:], y_digits[-100:])\n0.97999999999999998\n\n\u4e88\u6e2c\u7cbe\u5ea6\uff08\u30e2\u30c7\u30eb\u306e\u9069\u5408\u5ea6\u306e\u30d7\u30ed\u30ad\u30b7\u3068\u3057\u3066\u4f7f\u7528\u3067\u304d\u308b\uff09\u306e\u3088\u308a\u826f\u3044\u5c3a\u5ea6\u3092\u5f97\u308b\u305f\u3081\u306b\u3001\u6211\u3005\u306f\u8a13\u7df4\u3068\u30c6\u30b9\u30c8\u306b\u4f7f\u7528\u3059\u308b\u30d5\u30a9\u30fc\u30eb\u30c9\u3067\u30c7\u30fc\u30bf\u3092\u9023\u7d9a\u7684\u306b\u5206\u5272\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n>>> import numpy as np\n>>> X_folds = np.array_split(X_digits, 3)\n>>> y_folds = np.array_split(y_digits, 3)\n>>> scores = list()\n>>> for k in range(3):\n...     # We use 'list' to copy, in order to 'pop' later on\n...     X_train = list(X_folds)\n...     X_test  = X_train.pop(k)\n...     X_train = np.concatenate(X_train)\n...     y_train = list(y_folds)\n...     y_test  = y_train.pop(k)\n...     y_train = np.concatenate(y_train)\n...     scores.append(svc.fit(X_train, y_train).score(X_test, y_test))\n>>> print(scores)\n[0.93489148580968284, 0.95659432387312182, 0.93989983305509184]\n\n\u3053\u308c\u306fKFold\u306e\u30af\u30ed\u30b9\u30d0\u30ea\u30c7\u30fc\u30b7\u30e7\u30f3\u3068\u547c\u3070\u308c\u307e\u3059\u3002\n\n\u30af\u30ed\u30b9\u30d0\u30ea\u30c7\u30fc\u30b7\u30e7\u30f3\u30b8\u30a7\u30cd\u30ec\u30fc\u30bf\nscikit-learn\u306b\u306f\u3001\u4e00\u822c\u7684\u306a\u30af\u30ed\u30b9\u30d0\u30ea\u30c7\u30fc\u30b7\u30e7\u30f3\u6226\u7565\u306e\u8a13\u7df4/\u30c6\u30b9\u30c8\u306e\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u306e\u30ea\u30b9\u30c8\u3092\u751f\u6210\u3059\u308b\u305f\u3081\u306b\u4f7f\u7528\u3067\u304d\u308b\u30af\u30e9\u30b9\u306e\u30b3\u30ec\u30af\u30b7\u30e7\u30f3\u304c\u3042\u308a\u307e\u3059\u3002\n\u5f7c\u3089\u306f\u5206\u5272\u3055\u308c\u308b\u5165\u529b\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u3092\u53d7\u3051\u5165\u308c\u3001\u9078\u629e\u3055\u308c\u305f\u76f8\u4e92\u691c\u8a3c\u6226\u7565\u306e\u53cd\u5fa9\u3054\u3068\u306b\u30c8\u30ec\u30a4\u30f3/\u30c6\u30b9\u30c8\u30bb\u30c3\u30c8\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u3092\u751f\u6210\u3059\u308b split \u30e1\u30bd\u30c3\u30c9\u3092\u516c\u958b\u3059\u308b\u3002\n\u3053\u306e\u4f8b\u306f\u3001split\u30e1\u30bd\u30c3\u30c9\u306e\u4f7f\u7528\u4f8b\u3092\u793a\u3057\u3066\u3044\u307e\u3059\u3002\n>>> from sklearn.model_selection import KFold, cross_val_score\n>>> X = [\"a\", \"a\", \"b\", \"c\", \"c\", \"c\"]\n>>> k_fold = KFold(n_splits=3)\n>>> for train_indices, test_indices in k_fold.split(X):\n...      print('Train: %s | test: %s' % (train_indices, test_indices))\nTrain: [2 3 4 5] | test: [0 1]\nTrain: [0 1 4 5] | test: [2 3]\nTrain: [0 1 2 3] | test: [4 5]\n\n\u30af\u30ed\u30b9\u30d0\u30ea\u30c7\u30fc\u30b7\u30e7\u30f3\u306f\u7c21\u5358\u306b\u5b9f\u884c\u3067\u304d\u307e\u3059\u3002\n>>> kfold = KFold(n_splits=3)\n>>> [svc.fit(X_digits[train], y_digits[train]).score(X_digits[test], y_digits[test])\n...          for train, test in k_fold.split(X_digits)]\n[0.93489148580968284, 0.95659432387312182, 0.93989983305509184]\n\n\u30af\u30ed\u30b9\u30d0\u30ea\u30c7\u30fc\u30b7\u30e7\u30f3\u30b9\u30b3\u30a2\u306f\u3001 cross_val_score \u30d8\u30eb\u30d1\u30fc\u3092\u4f7f\u7528\u3057\u3066\u76f4\u63a5\u8a08\u7b97\u3067\u304d\u307e\u3059\u3002\u30af\u30ed\u30b9\u30d0\u30ea\u30c7\u30fc\u30b7\u30e7\u30f3\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3068\u5165\u529b\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u306e\u898b\u7a4d\u3082\u308a\u304c\u4e0e\u3048\u3089\u308c\u308b\u3068\u3001 cross_val_score \u306f\u30c7\u30fc\u30bf\u3092\u30c8\u30ec\u30fc\u30cb\u30f3\u30b0\u30bb\u30c3\u30c8\u3068\u30c6\u30b9\u30c8\u30bb\u30c3\u30c8\u306b\u7e70\u308a\u8fd4\u3057\u5206\u5272\u3057\u3001\u30c8\u30ec\u30fc\u30cb\u30f3\u30b0\u30bb\u30c3\u30c8\u3092\u4f7f\u7528\u3057\u3066\u898b\u7a4d\u3082\u308a\u3092\u8a13\u7df4\u3057\u3001\u30af\u30ed\u30b9\u30d0\u30ea\u30c7\u30fc\u30b7\u30e7\u30f3\u96c6\u8a08\u306e\u7e70\u308a\u8fd4\u3057\u3054\u3068\u306b\u30c6\u30b9\u30c8\u30bb\u30c3\u30c8\u306b\u57fa\u3065\u3044\u3066\u30b9\u30b3\u30a2\u3092\u8a08\u7b97\u3057\u307e\u3059\u3002\n\u30c7\u30d5\u30a9\u30eb\u30c8\u3067\u306f\u3001\u63a8\u5b9a\u5668\u306e score \u30e1\u30bd\u30c3\u30c9\u304c\u500b\u3005\u306e\u30b9\u30b3\u30a2\u3092\u8a08\u7b97\u3059\u308b\u305f\u3081\u306b\u4f7f\u7528\u3055\u308c\u307e\u3059\u3002\n\u4f7f\u7528\u53ef\u80fd\u306a\u30b9\u30b3\u30a2\u30ea\u30f3\u30b0\u65b9\u6cd5\u306e\u8a73\u7d30\u306b\u3064\u3044\u3066\u306f\u3001\u30e1\u30c8\u30ea\u30c3\u30af\u30e2\u30b8\u30e5\u30fc\u30eb \u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n>>> cross_val_score(svc, X_digits, y_digits, cv=k_fold, n_jobs=-1)\narray([ 0.93489149,  0.95659432,  0.93989983])\n\nn_jobs = -1 \u306f\u3001\u30b3\u30f3\u30d4\u30e5\u30fc\u30bf\u306e\u3059\u3079\u3066\u306eCPU\u4e0a\u3067\u8a08\u7b97\u304c\u30c7\u30a3\u30b9\u30d1\u30c3\u30c1\u3055\u308c\u308b\u3053\u3068\u3092\u610f\u5473\u3057\u307e\u3059\u3002\n\u3042\u308b\u3044\u306f\u3001scoring \u5f15\u6570\u3092\u63d0\u4f9b\u3057\u3066\u3001\u5225\u306e\u30b9\u30b3\u30a2\u30ea\u30f3\u30b0\u65b9\u6cd5\u3092\u6307\u5b9a\u3059\u308b\u3053\u3068\u3082\u3067\u304d\u307e\u3059\u3002\n>>> cross_val_score(svc, X_digits, y_digits, cv=k_fold,\n...                 scoring='precision_macro')\narray([ 0.93969761,  0.95911415,  0.94041254])\n\n\n\u76f8\u4e92\u691c\u8a3c\u30b8\u30a7\u30cd\u30ec\u30fc\u30bf\n\nKFold (n_splits, shuffle, random_state)\n\n\nK\u5206\u5272\u3057\u3001K-1\u3067\u8a13\u7df4\u3057\u3001\u6b8b\u308a\u3067\u30c6\u30b9\u30c8\u3057\u307e\u3059\u3002\n\n\nStratifiedKFold (n_iter, test_size, train_size, random_state)\n\n\nK-Fold\u3068\u540c\u3058\u3067\u3059\u304c\u3001\u5206\u5272(fold)\u5185\u306e\u30af\u30e9\u30b9\u5206\u5e03\u3092\u4fdd\u6301\u3057\u307e\u3059\u3002\n\n\nGroupKFold (n_splits, shuffle, random_state)\n\n\n\u540c\u3058\u30b0\u30eb\u30fc\u30d7\u304c\u30c6\u30b9\u30c8\u30bb\u30c3\u30c8\u3068\u30c8\u30ec\u30fc\u30cb\u30f3\u30b0\u30bb\u30c3\u30c8\u306e\u4e21\u65b9\u306b\u306a\u3044\u3053\u3068\u3092\u4fdd\u8a3c\u3057\u307e\u3059\u3002\n\n\nShuffleSplit (n_iter, test_size, train_size, random_state)\n\n\n\u30e9\u30f3\u30c0\u30e0\u7f6e\u63db\u306b\u57fa\u3065\u3044\u3066\u8a13\u7df4/\u30c6\u30b9\u30c8\u6307\u6570\u3092\u751f\u6210\u3059\u308b\u3002\n\n\nStratifiedShuffleSplit\n\n\n\u30b7\u30e3\u30c3\u30d5\u30eb\u5206\u5272\u3068\u540c\u3058\u3067\u3059\u304c\u3001\u5404\u53cd\u5fa9\u5185\u3067\u30af\u30e9\u30b9\u306e\u5206\u5e03\u3092\u4fdd\u6301\u3057\u307e\u3059\u3002\n\n\nGroupShuffleSplit\n\n\n\u540c\u3058\u30b0\u30eb\u30fc\u30d7\u304c\u30c6\u30b9\u30c8\u30bb\u30c3\u30c8\u3068\u30c8\u30ec\u30fc\u30cb\u30f3\u30b0\u30bb\u30c3\u30c8\u306e\u4e21\u65b9\u306b\u306a\u3044\u3053\u3068\u3092\u4fdd\u8a3c\u3057\u307e\u3059\u3002\n\n\nLeaveOneGroupOut ()\n\n\n\u89b3\u6e2c\u5024\u3092\u30b0\u30eb\u30fc\u30d7\u5316\u3059\u308b\u30b0\u30eb\u30fc\u30d7\u914d\u5217\u3092\u3068\u308a\u307e\u3059\u3002\n\n\nLeavePGroupsOut (p)\n\n\nP\u30b0\u30eb\u30fc\u30d7\u306f\u305d\u306e\u307e\u307e\u306b\u3057\u3066\u304a\u304d\u307e\u3059\u3002\n\n\nLeaveOneOut ()\n\n\n\u4e00\u3064\u306e\u89b3\u5bdf\u3092\u6b8b\u3057\u3066\u304a\u304d\u306a\u3055\u3044\u3002\n\n\nLeavePOut(p)\n\n\nP\u306e\u89b3\u6e2c\u5024\u3092\u305d\u306e\u307e\u307e\u6b8b\u3059\u3002\n\n\nPredefinedSplit\n\n\n\u4e8b\u524d\u306b\u5b9a\u7fa9\u3055\u308c\u305f\u5206\u5272\u306b\u57fa\u3065\u3044\u3066\u8a13\u7df4/\u30c6\u30b9\u30c8\u3092\u751f\u6210\u3057\u307e\u3059\u3002\n\n\n\n\n\u30a8\u30af\u30bb\u30b5\u30a4\u30ba\n\ndigit \u306e\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u3067\u3001\u30d1\u30e9\u30e1\u30fc\u30bf C \u306e\u95a2\u6570\u3068\u3057\u3066\u7dda\u5f62\u30ab\u30fc\u30cd\u30eb\u3092\u4f7f\u7528\u3057\u305fSVC\u63a8\u5b9a\u5024\u306e\u30af\u30ed\u30b9\u30d0\u30ea\u30c7\u30fc\u30b7\u30e7\u30f3\u30b9\u30b3\u30a2\u3092\u30d7\u30ed\u30c3\u30c8\u3057\u307e\u3059\uff08\u30dd\u30a4\u30f3\u30c8\u306e\u5bfe\u6570\u30b0\u30ea\u30c3\u30c9\u30921\u304b\u308910\u307e\u3067\u4f7f\u7528\u3057\u307e\u3059\uff09\u3002\nimport numpy as np\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn import datasets, svm\n\ndigits = datasets.load_digits()\nX = digits.data\ny = digits.target\n\nsvc = svm.SVC(kernel='linear')\nC_s = np.logspace(-10, 0, 10)\n\n\u7b54\u3048\u306f\u3053\u3061\u3089\uff1aDigits Dataset Exercise\u3067\u306e\u30af\u30ed\u30b9\u30d0\u30ea\u30c7\u30fc\u30b7\u30e7\u30f3\n\n\u30b0\u30ea\u30c3\u30c9\u691c\u7d22\u3068\u30af\u30ed\u30b9\u30d0\u30ea\u30c7\u30fc\u30b7\u30e7\u30f3\u3055\u308c\u305f\u63a8\u5b9a\u5668\n\n\u30b0\u30ea\u30c3\u30c9\u691c\u7d22\nscikit-learn\u306f\u3001\u4e0e\u3048\u3089\u308c\u305f\u30c7\u30fc\u30bf\u304c\u3001\u30d1\u30e9\u30e1\u30fc\u30bf\u30b0\u30ea\u30c3\u30c9\u4e0a\u306e\u63a8\u5b9a\u5668\u306e fit \u4e2d\u306b\u30b9\u30b3\u30a2\u3092\u8a08\u7b97\u3057\u3001\u30af\u30ed\u30b9\u30d0\u30ea\u30c7\u30fc\u30b7\u30e7\u30f3\u30b9\u30b3\u30a2\u3092\u6700\u5927\u306b\u3059\u308b\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u9078\u629e\u3059\u308b\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u63d0\u4f9b\u3057\u307e\u3059\u3002\u3053\u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306f\u3001\u69cb\u7bc9\u4e2d\u306b\u63a8\u5b9a\u3092\u884c\u3044\u3001\u63a8\u5b9a\u5668\u306eAPI\u3092\u516c\u958b\u3057\u307e\u3059\u3002\n>>> from sklearn.model_selection import GridSearchCV, cross_val_score\n>>> Cs = np.logspace(-6, -1, 10)\n>>> clf = GridSearchCV(estimator=svc, param_grid=dict(C=Cs),\n...                    n_jobs=-1)\n>>> clf.fit(X_digits[:1000], y_digits[:1000])        \nGridSearchCV(cv=None,...\n>>> clf.best_score_                                  \n0.925...\n>>> clf.best_estimator_.C                            \n0.0077...\n\n>>> # \u30c6\u30b9\u30c8\u30bb\u30c3\u30c8\u306e\u4e88\u6e2c\u6027\u80fd\u306f\u8a13\u7df4\u30bb\u30c3\u30c8\u307b\u3069\u826f\u304f\u306a\u3044\n>>> clf.score(X_digits[1000:], y_digits[1000:])      \n0.943...\n\n\u30c7\u30d5\u30a9\u30eb\u30c8\u3067\u306f\u3001 GridSearchCV \u306f3\u500d\u306e\u76f8\u4e92\u691c\u8a3c\u3092\u4f7f\u7528\u3057\u307e\u3059\u3002\u3057\u304b\u3057\u3001\u56de\u5e30\u5206\u6790\u3067\u306f\u306a\u304f\u3001\u5206\u985e\u304c\u6e21\u3055\u308c\u305f\u3053\u3068\u304c\u691c\u51fa\u3055\u308c\u305f\u5834\u5408\u306f\u3001\u5c64\u52253\u500d\u3092\u4f7f\u7528\u3057\u307e\u3059\u3002\n\n\u30cd\u30b9\u30c8\u3055\u308c\u305f\u76f8\u4e92\u691c\u8a3c\n>>> cross_val_score(clf, X_digits, y_digits)\n...                                               \narray([ 0.938...,  0.963...,  0.944...])\n\n2\u3064\u306e\u76f8\u4e92\u691c\u8a3c\u30eb\u30fc\u30d7\u304c\u4e26\u884c\u3057\u3066\u5b9f\u884c\u3055\u308c\u307e\u3059.1\u3064\u306fGridSearchCV\u30a8\u30b9\u30c6\u30a3\u30e1\u30fc\u30bf\u3067\u30ac\u30f3\u30de\u3092\u8a2d\u5b9a\u3057\u3001\u3082\u30461\u3064\u306fcross_val_score\u3067\u8a55\u4fa1\u5668\u306e\u4e88\u6e2c\u30d1\u30d5\u30a9\u30fc\u30de\u30f3\u30b9\u3092\u6e2c\u5b9a\u3057\u307e\u3059\u3002\u5f97\u3089\u308c\u305f\u30b9\u30b3\u30a2\u306f\u3001\u65b0\u3057\u3044\u30c7\u30fc\u30bf\u306b\u5bfe\u3059\u308b\u4e88\u6e2c\u30b9\u30b3\u30a2\u306e\u4e0d\u504f\u63a8\u5b9a\u5024\u3067\u3042\u308b\u3002\n\n\u8b66\u544a\n\u4e26\u5217\u8a08\u7b97\uff08n_jobs \u304c1\u4ee5\u5916\uff09\u3067\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u30cd\u30b9\u30c8\u3059\u308b\u3053\u3068\u306f\u3067\u304d\u307e\u305b\u3093\u3002\n\n\u30af\u30ed\u30b9\u30d0\u30ea\u30c7\u30fc\u30b7\u30e7\u30f3\u3055\u308c\u305f\u63a8\u5b9a\u5668\n\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u8a2d\u5b9a\u3059\u308b\u305f\u3081\u306e\u76f8\u4e92\u691c\u8a3c\u306f\u3001\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u3054\u3068\u306b\u52b9\u7387\u7684\u306b\u884c\u3046\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\u3053\u308c\u306f\u3001\u7279\u5b9a\u306e\u63a8\u5b9a\u5668\u3067\u306f\u3001scikit-learn\u306f\u3001\u30af\u30ed\u30b9\u30d0\u30ea\u30c7\u30fc\u30b7\u30e7\u30f3\u306b\u3088\u3063\u3066\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u81ea\u52d5\u7684\u306b\u8a2d\u5b9a\u3059\u308b\u300c\u30af\u30ed\u30b9\u691c\u8a3c\uff1a\u63a8\u5b9a\u5668\u306e\u30d1\u30d5\u30a9\u30fc\u30de\u30f3\u30b9\u306e\u8a55\u4fa1\u300d\u63a8\u5b9a\u5668\u3092\u516c\u958b\u3057\u307e\u3059\u3002\n>>> from sklearn import linear_model, datasets\n>>> lasso = linear_model.LassoCV()\n>>> diabetes = datasets.load_diabetes()\n>>> X_diabetes = diabetes.data\n>>> y_diabetes = diabetes.target\n>>> lasso.fit(X_diabetes, y_diabetes)\nLassoCV(alphas=None, copy_X=True, cv=None, eps=0.001, fit_intercept=True,\n    max_iter=1000, n_alphas=100, n_jobs=1, normalize=False, positive=False,\n    precompute='auto', random_state=None, selection='cyclic', tol=0.0001,\n    verbose=False)\n>>> # The estimator chose automatically its lambda:\n>>> lasso.alpha_ \n0.01229...\n\n\u3053\u308c\u3089\u306e\u898b\u7a4d\u3082\u308a\u8005\u306f\u3001\u305d\u306e\u540d\u524d\u306b\u300cCV\u300d\u304c\u4ed8\u52a0\u3055\u308c\u305f\u3082\u306e\u3068\u540c\u69d8\u306b\u547c\u3073\u51fa\u3055\u308c\u307e\u3059\u3002\n\n\u30a8\u30af\u30bb\u30b5\u30a4\u30ba\n\u7cd6\u5c3f\u75c5\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u3067\u306f\u3001\u6700\u9069\u306a\u6b63\u5247\u5316\u30d1\u30e9\u30e1\u30fc\u30bf alpha \u3092\u898b\u3064\u3051\u308b\u3002\n\u30dc\u30fc\u30ca\u30b9\uff1a \u3042\u306a\u305f\u306f alpha \u306e\u9078\u629e\u3092\u3069\u308c\u304f\u3089\u3044\u4fe1\u7528\u3067\u304d\u307e\u3059\u304b\uff1f\nfrom sklearn import datasets\nfrom sklearn.linear_model import LassoCV\nfrom sklearn.linear_model import Lasso\nfrom sklearn.model_selection import KFold\nfrom sklearn.model_selection import cross_val_score\n\ndiabetes = datasets.load_diabetes()\n\n\u56de\u7b54\u306f\u3053\u3061\u3089\uff1a\u7cd6\u5c3f\u75c5\u306e\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u904b\u52d5\u306e\u76f8\u4e92\u8a8d\u8a3c\n\n\u6b21\u306e\u30da\u30fc\u30b8\n\u00a92010 - 2016\u3001scikit-learn developers\uff08BSD\u30e9\u30a4\u30bb\u30f3\u30b9\uff09\nhttp://scikit-learn.org/stable/tutorial/statistical_inference/model_selection.html \u3092 google\u7ffb\u8a33\u3057\u305f\n[scikit-learn 0.18 \u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb \u76ee\u6b21](http://qiita.com/nazoking@github/items/5160c11d1a5b3fe8f34c)\n[\u79d1\u5b66\u7684\u30c7\u30fc\u30bf\u51e6\u7406\u306e\u305f\u3081\u306e\u7d71\u8a08\u5b66\u7fd2\u306e\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb \u76ee\u6b21](http://qiita.com/nazoking@github/items/051911b0062a0bf48dc3)\n[\u524d\u306e\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb\u30da\u30fc\u30b8](http://qiita.com/nazoking@github/items/062e7f9149ed23c0e096)\n\n# \u30e2\u30c7\u30eb\u9078\u629e\uff1a\u63a8\u5b9a\u5668\u3068\u305d\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\u306e\u9078\u629e\n\n## \u30b9\u30b3\u30a2\u3001\u30af\u30ed\u30b9\u30d0\u30ea\u30c7\u30fc\u30b7\u30e7\u30f3\u3055\u308c\u305f\u30b9\u30b3\u30a2\n\n\u3053\u308c\u307e\u3067\u898b\u3066\u304d\u305f\u3088\u3046\u306b\u3001\u3059\u3079\u3066\u306e\u63a8\u5b9a\u5668\u306f\u3001\u65b0\u3057\u3044\u30c7\u30fc\u30bf\u306e\u30d5\u30a3\u30c3\u30c8\uff08\u307e\u305f\u306f\u4e88\u6e2c\uff09\u306e\u54c1\u8cea\u3092\u5224\u65ad\u3067\u304d\u308b `score` \u30e1\u30bd\u30c3\u30c9\u3092\u516c\u958b\u3057\u3066\u3044\u307e\u3059\u3002\u5927\u304d\u3044\u65b9\u304c\u826f\u3044\u3002\n\n```python\n>>> from sklearn import datasets, svm\n>>> digits = datasets.load_digits()\n>>> X_digits = digits.data\n>>> y_digits = digits.target\n>>> svc = svm.SVC(C=1, kernel='linear')\n>>> svc.fit(X_digits[:-100], y_digits[:-100]).score(X_digits[-100:], y_digits[-100:])\n0.97999999999999998\n```\n\n\u4e88\u6e2c\u7cbe\u5ea6\uff08\u30e2\u30c7\u30eb\u306e\u9069\u5408\u5ea6\u306e\u30d7\u30ed\u30ad\u30b7\u3068\u3057\u3066\u4f7f\u7528\u3067\u304d\u308b\uff09\u306e\u3088\u308a\u826f\u3044\u5c3a\u5ea6\u3092\u5f97\u308b\u305f\u3081\u306b\u3001\u6211\u3005\u306f\u8a13\u7df4\u3068\u30c6\u30b9\u30c8\u306b\u4f7f\u7528\u3059\u308b\u30d5\u30a9\u30fc\u30eb\u30c9\u3067\u30c7\u30fc\u30bf\u3092\u9023\u7d9a\u7684\u306b\u5206\u5272\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\n```python\n>>> import numpy as np\n>>> X_folds = np.array_split(X_digits, 3)\n>>> y_folds = np.array_split(y_digits, 3)\n>>> scores = list()\n>>> for k in range(3):\n...     # We use 'list' to copy, in order to 'pop' later on\n...     X_train = list(X_folds)\n...     X_test  = X_train.pop(k)\n...     X_train = np.concatenate(X_train)\n...     y_train = list(y_folds)\n...     y_test  = y_train.pop(k)\n...     y_train = np.concatenate(y_train)\n...     scores.append(svc.fit(X_train, y_train).score(X_test, y_test))\n>>> print(scores)\n[0.93489148580968284, 0.95659432387312182, 0.93989983305509184]\n```\n\n\u3053\u308c\u306f[KFold](http://scikit-learn.org/stable/modules/generated/sklearn.model_selection.KFold.html#sklearn.model_selection.KFold)\u306e\u30af\u30ed\u30b9\u30d0\u30ea\u30c7\u30fc\u30b7\u30e7\u30f3\u3068\u547c\u3070\u308c\u307e\u3059\u3002\n\n## \u30af\u30ed\u30b9\u30d0\u30ea\u30c7\u30fc\u30b7\u30e7\u30f3\u30b8\u30a7\u30cd\u30ec\u30fc\u30bf\n\nscikit-learn\u306b\u306f\u3001\u4e00\u822c\u7684\u306a\u30af\u30ed\u30b9\u30d0\u30ea\u30c7\u30fc\u30b7\u30e7\u30f3\u6226\u7565\u306e\u8a13\u7df4/\u30c6\u30b9\u30c8\u306e\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u306e\u30ea\u30b9\u30c8\u3092\u751f\u6210\u3059\u308b\u305f\u3081\u306b\u4f7f\u7528\u3067\u304d\u308b\u30af\u30e9\u30b9\u306e\u30b3\u30ec\u30af\u30b7\u30e7\u30f3\u304c\u3042\u308a\u307e\u3059\u3002\n\u5f7c\u3089\u306f\u5206\u5272\u3055\u308c\u308b\u5165\u529b\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u3092\u53d7\u3051\u5165\u308c\u3001\u9078\u629e\u3055\u308c\u305f\u76f8\u4e92\u691c\u8a3c\u6226\u7565\u306e\u53cd\u5fa9\u3054\u3068\u306b\u30c8\u30ec\u30a4\u30f3/\u30c6\u30b9\u30c8\u30bb\u30c3\u30c8\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u3092\u751f\u6210\u3059\u308b `split` \u30e1\u30bd\u30c3\u30c9\u3092\u516c\u958b\u3059\u308b\u3002\n\u3053\u306e\u4f8b\u306f\u3001`split`\u30e1\u30bd\u30c3\u30c9\u306e\u4f7f\u7528\u4f8b\u3092\u793a\u3057\u3066\u3044\u307e\u3059\u3002\n\n```python\n>>> from sklearn.model_selection import KFold, cross_val_score\n>>> X = [\"a\", \"a\", \"b\", \"c\", \"c\", \"c\"]\n>>> k_fold = KFold(n_splits=3)\n>>> for train_indices, test_indices in k_fold.split(X):\n...      print('Train: %s | test: %s' % (train_indices, test_indices))\nTrain: [2 3 4 5] | test: [0 1]\nTrain: [0 1 4 5] | test: [2 3]\nTrain: [0 1 2 3] | test: [4 5]\n```\n\n\u30af\u30ed\u30b9\u30d0\u30ea\u30c7\u30fc\u30b7\u30e7\u30f3\u306f\u7c21\u5358\u306b\u5b9f\u884c\u3067\u304d\u307e\u3059\u3002\n\n```python\n>>> kfold = KFold(n_splits=3)\n>>> [svc.fit(X_digits[train], y_digits[train]).score(X_digits[test], y_digits[test])\n...          for train, test in k_fold.split(X_digits)]\n[0.93489148580968284, 0.95659432387312182, 0.93989983305509184]\n```\n\n\u30af\u30ed\u30b9\u30d0\u30ea\u30c7\u30fc\u30b7\u30e7\u30f3\u30b9\u30b3\u30a2\u306f\u3001 [cross_val_score](http://scikit-learn.org/stable/modules/generated/sklearn.model_selection.cross_val_score.html#sklearn.model_selection.cross_val_score) \u30d8\u30eb\u30d1\u30fc\u3092\u4f7f\u7528\u3057\u3066\u76f4\u63a5\u8a08\u7b97\u3067\u304d\u307e\u3059\u3002\u30af\u30ed\u30b9\u30d0\u30ea\u30c7\u30fc\u30b7\u30e7\u30f3\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3068\u5165\u529b\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u306e\u898b\u7a4d\u3082\u308a\u304c\u4e0e\u3048\u3089\u308c\u308b\u3068\u3001 cross_val_score \u306f\u30c7\u30fc\u30bf\u3092\u30c8\u30ec\u30fc\u30cb\u30f3\u30b0\u30bb\u30c3\u30c8\u3068\u30c6\u30b9\u30c8\u30bb\u30c3\u30c8\u306b\u7e70\u308a\u8fd4\u3057\u5206\u5272\u3057\u3001\u30c8\u30ec\u30fc\u30cb\u30f3\u30b0\u30bb\u30c3\u30c8\u3092\u4f7f\u7528\u3057\u3066\u898b\u7a4d\u3082\u308a\u3092\u8a13\u7df4\u3057\u3001\u30af\u30ed\u30b9\u30d0\u30ea\u30c7\u30fc\u30b7\u30e7\u30f3\u96c6\u8a08\u306e\u7e70\u308a\u8fd4\u3057\u3054\u3068\u306b\u30c6\u30b9\u30c8\u30bb\u30c3\u30c8\u306b\u57fa\u3065\u3044\u3066\u30b9\u30b3\u30a2\u3092\u8a08\u7b97\u3057\u307e\u3059\u3002\n\u30c7\u30d5\u30a9\u30eb\u30c8\u3067\u306f\u3001\u63a8\u5b9a\u5668\u306e `score` \u30e1\u30bd\u30c3\u30c9\u304c\u500b\u3005\u306e\u30b9\u30b3\u30a2\u3092\u8a08\u7b97\u3059\u308b\u305f\u3081\u306b\u4f7f\u7528\u3055\u308c\u307e\u3059\u3002\n\u4f7f\u7528\u53ef\u80fd\u306a\u30b9\u30b3\u30a2\u30ea\u30f3\u30b0\u65b9\u6cd5\u306e\u8a73\u7d30\u306b\u3064\u3044\u3066\u306f\u3001[\u30e1\u30c8\u30ea\u30c3\u30af\u30e2\u30b8\u30e5\u30fc\u30eb](http://scikit-learn.org/stable/modules/metrics.html#metrics) \u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n\n```\n>>> cross_val_score(svc, X_digits, y_digits, cv=k_fold, n_jobs=-1)\narray([ 0.93489149,  0.95659432,  0.93989983])\n```\n\n`n_jobs = -1` \u306f\u3001\u30b3\u30f3\u30d4\u30e5\u30fc\u30bf\u306e\u3059\u3079\u3066\u306eCPU\u4e0a\u3067\u8a08\u7b97\u304c\u30c7\u30a3\u30b9\u30d1\u30c3\u30c1\u3055\u308c\u308b\u3053\u3068\u3092\u610f\u5473\u3057\u307e\u3059\u3002\n\u3042\u308b\u3044\u306f\u3001`scoring` \u5f15\u6570\u3092\u63d0\u4f9b\u3057\u3066\u3001\u5225\u306e\u30b9\u30b3\u30a2\u30ea\u30f3\u30b0\u65b9\u6cd5\u3092\u6307\u5b9a\u3059\u308b\u3053\u3068\u3082\u3067\u304d\u307e\u3059\u3002\n\n```\n>>> cross_val_score(svc, X_digits, y_digits, cv=k_fold,\n...                 scoring='precision_macro')\narray([ 0.93969761,  0.95911415,  0.94041254])\n```\n\n### \u76f8\u4e92\u691c\u8a3c\u30b8\u30a7\u30cd\u30ec\u30fc\u30bf\n\n  - KFold (n_splits, shuffle, random_state)\n    - K\u5206\u5272\u3057\u3001K-1\u3067\u8a13\u7df4\u3057\u3001\u6b8b\u308a\u3067\u30c6\u30b9\u30c8\u3057\u307e\u3059\u3002\n  - StratifiedKFold (n_iter, test_size, train_size, random_state)\n    - K-Fold\u3068\u540c\u3058\u3067\u3059\u304c\u3001\u5206\u5272(fold)\u5185\u306e\u30af\u30e9\u30b9\u5206\u5e03\u3092\u4fdd\u6301\u3057\u307e\u3059\u3002\n  - GroupKFold (n_splits, shuffle, random_state)\n    - \u540c\u3058\u30b0\u30eb\u30fc\u30d7\u304c\u30c6\u30b9\u30c8\u30bb\u30c3\u30c8\u3068\u30c8\u30ec\u30fc\u30cb\u30f3\u30b0\u30bb\u30c3\u30c8\u306e\u4e21\u65b9\u306b\u306a\u3044\u3053\u3068\u3092\u4fdd\u8a3c\u3057\u307e\u3059\u3002\n  - ShuffleSplit (n_iter, test_size, train_size, random_state)\n    - \u30e9\u30f3\u30c0\u30e0\u7f6e\u63db\u306b\u57fa\u3065\u3044\u3066\u8a13\u7df4/\u30c6\u30b9\u30c8\u6307\u6570\u3092\u751f\u6210\u3059\u308b\u3002\n  - StratifiedShuffleSplit\n    - \u30b7\u30e3\u30c3\u30d5\u30eb\u5206\u5272\u3068\u540c\u3058\u3067\u3059\u304c\u3001\u5404\u53cd\u5fa9\u5185\u3067\u30af\u30e9\u30b9\u306e\u5206\u5e03\u3092\u4fdd\u6301\u3057\u307e\u3059\u3002\n  - GroupShuffleSplit\n    - \u540c\u3058\u30b0\u30eb\u30fc\u30d7\u304c\u30c6\u30b9\u30c8\u30bb\u30c3\u30c8\u3068\u30c8\u30ec\u30fc\u30cb\u30f3\u30b0\u30bb\u30c3\u30c8\u306e\u4e21\u65b9\u306b\u306a\u3044\u3053\u3068\u3092\u4fdd\u8a3c\u3057\u307e\u3059\u3002\n  - LeaveOneGroupOut ()\n    - \u89b3\u6e2c\u5024\u3092\u30b0\u30eb\u30fc\u30d7\u5316\u3059\u308b\u30b0\u30eb\u30fc\u30d7\u914d\u5217\u3092\u3068\u308a\u307e\u3059\u3002\n  - LeavePGroupsOut (p)\n    - P\u30b0\u30eb\u30fc\u30d7\u306f\u305d\u306e\u307e\u307e\u306b\u3057\u3066\u304a\u304d\u307e\u3059\u3002\n  - LeaveOneOut ()\n    - \u4e00\u3064\u306e\u89b3\u5bdf\u3092\u6b8b\u3057\u3066\u304a\u304d\u306a\u3055\u3044\u3002\n  - LeavePOut(p)\n    - P\u306e\u89b3\u6e2c\u5024\u3092\u305d\u306e\u307e\u307e\u6b8b\u3059\u3002\n  - PredefinedSplit\n    - \u4e8b\u524d\u306b\u5b9a\u7fa9\u3055\u308c\u305f\u5206\u5272\u306b\u57fa\u3065\u3044\u3066\u8a13\u7df4/\u30c6\u30b9\u30c8\u3092\u751f\u6210\u3057\u307e\u3059\u3002\n\n### \u30a8\u30af\u30bb\u30b5\u30a4\u30ba\n\n![](http://scikit-learn.org/stable/_images/sphx_glr_plot_cv_digits_001.png)\n\ndigit \u306e\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u3067\u3001\u30d1\u30e9\u30e1\u30fc\u30bf `C` \u306e\u95a2\u6570\u3068\u3057\u3066\u7dda\u5f62\u30ab\u30fc\u30cd\u30eb\u3092\u4f7f\u7528\u3057\u305fSVC\u63a8\u5b9a\u5024\u306e\u30af\u30ed\u30b9\u30d0\u30ea\u30c7\u30fc\u30b7\u30e7\u30f3\u30b9\u30b3\u30a2\u3092\u30d7\u30ed\u30c3\u30c8\u3057\u307e\u3059\uff08\u30dd\u30a4\u30f3\u30c8\u306e\u5bfe\u6570\u30b0\u30ea\u30c3\u30c9\u30921\u304b\u308910\u307e\u3067\u4f7f\u7528\u3057\u307e\u3059\uff09\u3002\n\n```python\nimport numpy as np\nfrom sklearn.model_selection import cross_val_score\nfrom sklearn import datasets, svm\n\ndigits = datasets.load_digits()\nX = digits.data\ny = digits.target\n\nsvc = svm.SVC(kernel='linear')\nC_s = np.logspace(-10, 0, 10)\n```\n\n[\u7b54\u3048\u306f\u3053\u3061\u3089\uff1aDigits Dataset Exercise\u3067\u306e\u30af\u30ed\u30b9\u30d0\u30ea\u30c7\u30fc\u30b7\u30e7\u30f3](http://scikit-learn.org/stable/auto_examples/exercises/plot_cv_digits.html#sphx-glr-auto-examples-exercises-plot-cv-digits-py)\n\n## \u30b0\u30ea\u30c3\u30c9\u691c\u7d22\u3068\u30af\u30ed\u30b9\u30d0\u30ea\u30c7\u30fc\u30b7\u30e7\u30f3\u3055\u308c\u305f\u63a8\u5b9a\u5668\n\n### \u30b0\u30ea\u30c3\u30c9\u691c\u7d22\n\nscikit-learn\u306f\u3001\u4e0e\u3048\u3089\u308c\u305f\u30c7\u30fc\u30bf\u304c\u3001\u30d1\u30e9\u30e1\u30fc\u30bf\u30b0\u30ea\u30c3\u30c9\u4e0a\u306e\u63a8\u5b9a\u5668\u306e fit \u4e2d\u306b\u30b9\u30b3\u30a2\u3092\u8a08\u7b97\u3057\u3001\u30af\u30ed\u30b9\u30d0\u30ea\u30c7\u30fc\u30b7\u30e7\u30f3\u30b9\u30b3\u30a2\u3092\u6700\u5927\u306b\u3059\u308b\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u9078\u629e\u3059\u308b\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u63d0\u4f9b\u3057\u307e\u3059\u3002\u3053\u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306f\u3001\u69cb\u7bc9\u4e2d\u306b\u63a8\u5b9a\u3092\u884c\u3044\u3001\u63a8\u5b9a\u5668\u306eAPI\u3092\u516c\u958b\u3057\u307e\u3059\u3002\n\n```python\n>>> from sklearn.model_selection import GridSearchCV, cross_val_score\n>>> Cs = np.logspace(-6, -1, 10)\n>>> clf = GridSearchCV(estimator=svc, param_grid=dict(C=Cs),\n...                    n_jobs=-1)\n>>> clf.fit(X_digits[:1000], y_digits[:1000])        \nGridSearchCV(cv=None,...\n>>> clf.best_score_                                  \n0.925...\n>>> clf.best_estimator_.C                            \n0.0077...\n\n>>> # \u30c6\u30b9\u30c8\u30bb\u30c3\u30c8\u306e\u4e88\u6e2c\u6027\u80fd\u306f\u8a13\u7df4\u30bb\u30c3\u30c8\u307b\u3069\u826f\u304f\u306a\u3044\n>>> clf.score(X_digits[1000:], y_digits[1000:])      \n0.943...\n```\n\n\u30c7\u30d5\u30a9\u30eb\u30c8\u3067\u306f\u3001 [GridSearchCV](http://scikit-learn.org/stable/modules/generated/sklearn.model_selection.GridSearchCV.html#sklearn.model_selection.GridSearchCV) \u306f3\u500d\u306e\u76f8\u4e92\u691c\u8a3c\u3092\u4f7f\u7528\u3057\u307e\u3059\u3002\u3057\u304b\u3057\u3001\u56de\u5e30\u5206\u6790\u3067\u306f\u306a\u304f\u3001\u5206\u985e\u304c\u6e21\u3055\u308c\u305f\u3053\u3068\u304c\u691c\u51fa\u3055\u308c\u305f\u5834\u5408\u306f\u3001\u5c64\u52253\u500d\u3092\u4f7f\u7528\u3057\u307e\u3059\u3002\n\n#### \u30cd\u30b9\u30c8\u3055\u308c\u305f\u76f8\u4e92\u691c\u8a3c\n\n```python\n>>> cross_val_score(clf, X_digits, y_digits)\n...                                               \narray([ 0.938...,  0.963...,  0.944...])\n```\n\n2\u3064\u306e\u76f8\u4e92\u691c\u8a3c\u30eb\u30fc\u30d7\u304c\u4e26\u884c\u3057\u3066\u5b9f\u884c\u3055\u308c\u307e\u3059.1\u3064\u306fGridSearchCV\u30a8\u30b9\u30c6\u30a3\u30e1\u30fc\u30bf\u3067\u30ac\u30f3\u30de\u3092\u8a2d\u5b9a\u3057\u3001\u3082\u30461\u3064\u306fcross_val_score\u3067\u8a55\u4fa1\u5668\u306e\u4e88\u6e2c\u30d1\u30d5\u30a9\u30fc\u30de\u30f3\u30b9\u3092\u6e2c\u5b9a\u3057\u307e\u3059\u3002\u5f97\u3089\u308c\u305f\u30b9\u30b3\u30a2\u306f\u3001\u65b0\u3057\u3044\u30c7\u30fc\u30bf\u306b\u5bfe\u3059\u308b\u4e88\u6e2c\u30b9\u30b3\u30a2\u306e\u4e0d\u504f\u63a8\u5b9a\u5024\u3067\u3042\u308b\u3002\n\n#### \u8b66\u544a\n\n\u4e26\u5217\u8a08\u7b97\uff08`n_jobs` \u304c1\u4ee5\u5916\uff09\u3067\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u30cd\u30b9\u30c8\u3059\u308b\u3053\u3068\u306f\u3067\u304d\u307e\u305b\u3093\u3002\n\n### \u30af\u30ed\u30b9\u30d0\u30ea\u30c7\u30fc\u30b7\u30e7\u30f3\u3055\u308c\u305f\u63a8\u5b9a\u5668\n\n\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u8a2d\u5b9a\u3059\u308b\u305f\u3081\u306e\u76f8\u4e92\u691c\u8a3c\u306f\u3001\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u3054\u3068\u306b\u52b9\u7387\u7684\u306b\u884c\u3046\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\u3053\u308c\u306f\u3001\u7279\u5b9a\u306e\u63a8\u5b9a\u5668\u3067\u306f\u3001scikit-learn\u306f\u3001\u30af\u30ed\u30b9\u30d0\u30ea\u30c7\u30fc\u30b7\u30e7\u30f3\u306b\u3088\u3063\u3066\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u81ea\u52d5\u7684\u306b\u8a2d\u5b9a\u3059\u308b\u300c[\u30af\u30ed\u30b9\u691c\u8a3c\uff1a\u63a8\u5b9a\u5668\u306e\u30d1\u30d5\u30a9\u30fc\u30de\u30f3\u30b9\u306e\u8a55\u4fa1](http://scikit-learn.org/stable/modules/cross_validation.html#cross-validation)\u300d\u63a8\u5b9a\u5668\u3092\u516c\u958b\u3057\u307e\u3059\u3002\n\n```python\n>>> from sklearn import linear_model, datasets\n>>> lasso = linear_model.LassoCV()\n>>> diabetes = datasets.load_diabetes()\n>>> X_diabetes = diabetes.data\n>>> y_diabetes = diabetes.target\n>>> lasso.fit(X_diabetes, y_diabetes)\nLassoCV(alphas=None, copy_X=True, cv=None, eps=0.001, fit_intercept=True,\n    max_iter=1000, n_alphas=100, n_jobs=1, normalize=False, positive=False,\n    precompute='auto', random_state=None, selection='cyclic', tol=0.0001,\n    verbose=False)\n>>> # The estimator chose automatically its lambda:\n>>> lasso.alpha_ \n0.01229...\n```\n\n\u3053\u308c\u3089\u306e\u898b\u7a4d\u3082\u308a\u8005\u306f\u3001\u305d\u306e\u540d\u524d\u306b\u300cCV\u300d\u304c\u4ed8\u52a0\u3055\u308c\u305f\u3082\u306e\u3068\u540c\u69d8\u306b\u547c\u3073\u51fa\u3055\u308c\u307e\u3059\u3002\n\n\n#### \u30a8\u30af\u30bb\u30b5\u30a4\u30ba\n\n\u7cd6\u5c3f\u75c5\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u3067\u306f\u3001\u6700\u9069\u306a\u6b63\u5247\u5316\u30d1\u30e9\u30e1\u30fc\u30bf `alpha` \u3092\u898b\u3064\u3051\u308b\u3002\n\n**\u30dc\u30fc\u30ca\u30b9\uff1a** \u3042\u306a\u305f\u306f alpha \u306e\u9078\u629e\u3092\u3069\u308c\u304f\u3089\u3044\u4fe1\u7528\u3067\u304d\u307e\u3059\u304b\uff1f\n\n```python\nfrom sklearn import datasets\nfrom sklearn.linear_model import LassoCV\nfrom sklearn.linear_model import Lasso\nfrom sklearn.model_selection import KFold\nfrom sklearn.model_selection import cross_val_score\n\ndiabetes = datasets.load_diabetes()\n```\n\n[\u56de\u7b54\u306f\u3053\u3061\u3089\uff1a\u7cd6\u5c3f\u75c5\u306e\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u904b\u52d5\u306e\u76f8\u4e92\u8a8d\u8a3c](http://scikit-learn.org/stable/auto_examples/exercises/plot_cv_diabetes.html#sphx-glr-auto-examples-exercises-plot-cv-diabetes-py)\n\n----\n[\u6b21\u306e\u30da\u30fc\u30b8](http://qiita.com/nazoking@github/items/34c53758f79eae233b67)\n\n\u00a92010 - 2016\u3001scikit-learn developers\uff08BSD\u30e9\u30a4\u30bb\u30f3\u30b9\uff09\n"}