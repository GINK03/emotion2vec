{"context": " More than 1 year has passed since last update.\n\n\u306f\u3058\u3081\u306b\nSoftLayer\u3067\u306f\u3001Standard Hardware Firewall\u3084Dedicated Hardware Firewall\u306a\u3069\u3092\u8cfc\u5165\u3059\u308b\u3053\u3068\u3067\u3001\u30e6\u30fc\u30b6\u30fc\u306ePublic VLAN\u306b\u30d1\u30b1\u30c3\u30c8\u304c\u5c4a\u304f\u524d\u306b\u3001\u4e0d\u6b63\u306a\u30a2\u30af\u30bb\u30b9\u3092\u30d6\u30ed\u30c3\u30af\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u64cd\u4f5c\u3067Firewall\u306e\u30a2\u30af\u30bb\u30b9\u30ed\u30b0\u3092\u78ba\u8a8d\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u308b\u306e\u3067\u3059\u304c\u3001\u3001\u3001\u3053\u308c\u3092\uff11\u3064\uff11\u3064\u306eIP\u306b\u5bfe\u3057\u3066\u624b\u52d5\u3067\u5b9f\u65bd\u3057\u3066\u3044\u304f\u306e\u306f\u5927\u5909\u3067\u3059\u3002\u3002\u3002\u3002\n\n\n\u3068\u3044\u3046\u3053\u3068\u3067\u3001IP\u30a2\u30c9\u30ec\u30b9\u3092\u6307\u5b9a\u3059\u308c\u3070\u3001\u305d\u308c\u306b\u7d10\u3065\u3044\u3066\u3044\u308b\u30a2\u30af\u30bb\u30b9\u30ed\u30b0\u3092\u51fa\u529b\u3059\u308b\u30b5\u30f3\u30d7\u30eb\u30b9\u30af\u30ea\u30d7\u30c8\u3092\u4f5c\u3063\u3066\u307f\u307e\u3057\u305f\u306e\u3067\u3054\u7d39\u4ecb\u3057\u305f\u3044\u3068\u601d\u3044\u307e\u3059\u3002\n\n\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\n\ngetSyslogsByIP.py\nimport SoftLayer\nimport sys\nimport pprint\nfrom prettytable import PrettyTable\npp = pprint.PrettyPrinter(indent=4)\n\nargv=sys.argv\nif ( len(argv) != 2 ):\n    print(\"Usage: python %s <Your IP>.\" % argv[0])\n    exit(10)\n\ntargetip = argv[1]\nLIMITSIZE=500\n\n\nclient = SoftLayer.create_client_from_env()\nmyip = client['Network_Subnet_IpAddress'].getByIpAddress(targetip)\nif (myip is None) or (myip == \"\") :\n    print(\"You don't have  %s in your account.\" % (targetip))\n    exit(20)\n\n_offset=0\nalllists=[]\nwhile True:\n    lists = client['Network_Subnet_IpAddress'].getSyslogEventsSevenDays(id=myip['id'], limit=LIMITSIZE, offset=_offset)\n    alllists = alllists + lists\n    _offset = _offset + LIMITSIZE\n    if len(lists) < LIMITSIZE :\n        break\n\nif (alllists ==[]):\n    print(\"No records for this IP\")\n    exit(0)\n\nalllists = sorted(alllists, key= lambda x: x['createDate'], reverse=False)\ntable = PrettyTable(['createDate',\n                     'sourceIpAddress',\n                     'sourcePort',\n                     'destinationIpAddress',\n                     'destinationPort',\n                     'protocol',\n                     'eventType'])\n\nfor list in alllists:\n    table.add_row([\n                     list['createDate'],\n                     list['sourceIpAddress'],\n                     list['sourcePort'],\n                     list['destinationIpAddress'],\n                     list['destinationPort'],\n                     list['protocol'],\n                     list['eventType']\n    ])\n\nprint(table)\n\n\n\n\n\u4f7f\u3044\u65b9\u3068\u51fa\u529b\u7d50\u679c\n# python getSyslogsByIP.py <IP Address>\n\u306e\u3088\u3046\u306b\u4f7f\u3063\u3066\u304f\u3060\u3055\u3044\u3002\u3053\u306e\u30b9\u30af\u30ea\u30d7\u30c8\u3060\u3068\u3001getSyslogEventsSevenDays\u3092\u4f7f\u3063\u3066\u3044\u308b\u306e\u3067\u30017\u65e5\u5206\u306e\u30a2\u30af\u30bb\u30b9\u30ed\u30b0\u304c\u51fa\u529b\u3055\u308c\u307e\u3059\u3002\u3082\u30571\u65e5\u5206\u3060\u3051\u3067\u3088\u3044\u306e\u3067\u3042\u308c\u3070\u3001getSyslogEventsOneDay\u3092\u4f7f\u3048\u3070\u826f\u3044\u3067\u3057\u3087\u3046\u3002\nhttp://sldn.softlayer.com/reference/services/SoftLayer_Network_Subnet_IpAddress\n\n#\u306f\u3058\u3081\u306b\nSoftLayer\u3067\u306f\u3001Standard Hardware Firewall\u3084Dedicated Hardware Firewall\u306a\u3069\u3092\u8cfc\u5165\u3059\u308b\u3053\u3068\u3067\u3001\u30e6\u30fc\u30b6\u30fc\u306ePublic VLAN\u306b\u30d1\u30b1\u30c3\u30c8\u304c\u5c4a\u304f\u524d\u306b\u3001\u4e0d\u6b63\u306a\u30a2\u30af\u30bb\u30b9\u3092\u30d6\u30ed\u30c3\u30af\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u64cd\u4f5c\u3067Firewall\u306e\u30a2\u30af\u30bb\u30b9\u30ed\u30b0\u3092\u78ba\u8a8d\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u308b\u306e\u3067\u3059\u304c\u3001\u3001\u3001\u3053\u308c\u3092\uff11\u3064\uff11\u3064\u306eIP\u306b\u5bfe\u3057\u3066\u624b\u52d5\u3067\u5b9f\u65bd\u3057\u3066\u3044\u304f\u306e\u306f\u5927\u5909\u3067\u3059\u3002\u3002\u3002\u3002\n![firewall1.jpg](https://qiita-image-store.s3.amazonaws.com/0/62127/6a3103d6-0bf7-aa3f-80ae-ea1f0deb05b5.jpeg)\n![firewall2.jpg](https://qiita-image-store.s3.amazonaws.com/0/62127/9d4fdda7-daba-2539-9f8c-73d0a5c934ea.jpeg)\n\n\n\u3068\u3044\u3046\u3053\u3068\u3067\u3001IP\u30a2\u30c9\u30ec\u30b9\u3092\u6307\u5b9a\u3059\u308c\u3070\u3001\u305d\u308c\u306b\u7d10\u3065\u3044\u3066\u3044\u308b\u30a2\u30af\u30bb\u30b9\u30ed\u30b0\u3092\u51fa\u529b\u3059\u308b\u30b5\u30f3\u30d7\u30eb\u30b9\u30af\u30ea\u30d7\u30c8\u3092\u4f5c\u3063\u3066\u307f\u307e\u3057\u305f\u306e\u3067\u3054\u7d39\u4ecb\u3057\u305f\u3044\u3068\u601d\u3044\u307e\u3059\u3002\n\n#\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\n```py:getSyslogsByIP.py\nimport SoftLayer\nimport sys\nimport pprint\nfrom prettytable import PrettyTable\npp = pprint.PrettyPrinter(indent=4)\n\nargv=sys.argv\nif ( len(argv) != 2 ):\n    print(\"Usage: python %s <Your IP>.\" % argv[0])\n    exit(10)\n\ntargetip = argv[1]\nLIMITSIZE=500\n\n\nclient = SoftLayer.create_client_from_env()\nmyip = client['Network_Subnet_IpAddress'].getByIpAddress(targetip)\nif (myip is None) or (myip == \"\") :\n    print(\"You don't have  %s in your account.\" % (targetip))\n    exit(20)\n\n_offset=0\nalllists=[]\nwhile True:\n    lists = client['Network_Subnet_IpAddress'].getSyslogEventsSevenDays(id=myip['id'], limit=LIMITSIZE, offset=_offset)\n    alllists = alllists + lists\n    _offset = _offset + LIMITSIZE\n    if len(lists) < LIMITSIZE :\n        break\n\nif (alllists ==[]):\n    print(\"No records for this IP\")\n    exit(0)\n\nalllists = sorted(alllists, key= lambda x: x['createDate'], reverse=False)\ntable = PrettyTable(['createDate',\n                     'sourceIpAddress',\n                     'sourcePort',\n                     'destinationIpAddress',\n                     'destinationPort',\n                     'protocol',\n                     'eventType'])\n\nfor list in alllists:\n    table.add_row([\n                     list['createDate'],\n                     list['sourceIpAddress'],\n                     list['sourcePort'],\n                     list['destinationIpAddress'],\n                     list['destinationPort'],\n                     list['protocol'],\n                     list['eventType']\n    ])\n\nprint(table)\n\n```\n\n#\u4f7f\u3044\u65b9\u3068\u51fa\u529b\u7d50\u679c\n\n`# python getSyslogsByIP.py <IP Address>`\n\u306e\u3088\u3046\u306b\u4f7f\u3063\u3066\u304f\u3060\u3055\u3044\u3002\u3053\u306e\u30b9\u30af\u30ea\u30d7\u30c8\u3060\u3068\u3001`getSyslogEventsSevenDays`\u3092\u4f7f\u3063\u3066\u3044\u308b\u306e\u3067\u30017\u65e5\u5206\u306e\u30a2\u30af\u30bb\u30b9\u30ed\u30b0\u304c\u51fa\u529b\u3055\u308c\u307e\u3059\u3002\u3082\u30571\u65e5\u5206\u3060\u3051\u3067\u3088\u3044\u306e\u3067\u3042\u308c\u3070\u3001`getSyslogEventsOneDay`\u3092\u4f7f\u3048\u3070\u826f\u3044\u3067\u3057\u3087\u3046\u3002\nhttp://sldn.softlayer.com/reference/services/SoftLayer_Network_Subnet_IpAddress\n\n![getSyslogsResult.jpg](https://qiita-image-store.s3.amazonaws.com/0/62127/21e4453f-097d-83fe-26a1-4dc140bb10fb.jpeg)\n", "tags": ["SoftLayer", "ShinobiLayer"]}