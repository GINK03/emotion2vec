{"context": " More than 1 year has passed since last update.var util = require('util')\n  , sqlite3 = require('sqlite3').verbose()\n  , fs = require('fs')\n  , mkdirp = require('mkdirp')\n\nvar Kobito = function(path) {\n  this.db = new sqlite3.Database(path)\n}\nKobito.prototype = {\n  execAll: function(sql, callback) {\n    if (typeof callback !== \"function\") return\n    this.db.serialize((function() {\n      this.db.all(sql, function(err, rows) {\n        if (err) { return console.log(err) }\n        callback.apply(this, Array.prototype.slice.call(arguments, 0))\n      })\n    }).bind(this))\n  },\n  fetchAllArticles: function(callback) {\n    this.execAll(\"SELECT Z_PK AS id, ZTITLE AS title, ZRAW_BODY AS raw_body FROM ZITEM\", callback)\n  },\n  fetchOneArticle: function(id, callback) {\n    this.execAll(\"SELECT ZTITLE AS title, ZRAW_BODY AS raw_body FROM ZITEM WHERE Z_PK = \" + id, callback)\n  },\n  fetchTagsByArticle: function(id, callback) {\n    this.execAll(\"SELECT Z_1TAGS.Z_2TAGS AS id, ZTAG.ZNAME AS name FROM Z_1TAGS INNER JOIN ZTAG ON Z_1TAGS.Z_2TAGS = ZTAG.Z_PK WHERE Z_1TAGS.Z_1ITEMS = \" + id, callback)\n  },\n  fetchAllTags: function(callback) {\n    this.execAll(\"SELECT Z_PK AS id FROM ZTAG\", callback)\n  },\n  fetchOneTag: function(id, callback) {\n    this.execAll(\"SELECT Z_PK AS id, ZNAME AS name FROM ZTAG WHERE Z_PK = \" + id, callback)\n  },\n  fetchArticlesByTag: function(id, callback) {\n    this.execAll(\"SELECT Z_1TAGS.Z_1ITEMS AS id, ZITEM.ZTITLE AS title FROM Z_1TAGS INNER JOIN ZITEM ON Z_1TAGS.Z_1ITEMS = ZITEM.Z_PK WHERE Z_1TAGS.Z_2TAGS = \" + id, callback)\n  },\n  fetchArticle: function(id, callback) {\n    var self = this\n    this.fetchOneArticle(id, function(err, article) {\n      self.fetchTagsByArticle(id, function(err, tags) {\n        article[0].tags = (function() {\n          var ret = []\n          tags.forEach(function(tag) {\n            ret.push(tag.name)\n          })\n          return ret\n        })()\n        article[0].id = id\n        callback(err, article[0])\n      })\n    })\n  },\n  fetchTag: function(id, callback) {\n    var self = this\n    this.fetchOneTag(id, function(err, tag) {\n      self.fetchArticlesByTag(id, function(err, articles) {\n        tag[0].articles = articles\n        callback(err, tag)\n      })\n    })\n  }\n}\n\nvar kobito = new Kobito( util.format('%s/Library/Kobito/Kobito.db', process.env.HOME) )\n\nkobito.fetchAllArticles(function(err, articles) {\n  mkdirp.sync('src')\n  articles.forEach(function(article) {\n    kobito.fetchArticle(article.id, function(err, article) {\n\n      // export to yaml for metalsmith/jekyll\n      var content = '---\\n' +\n                    'title: ' + article.title.replace(':', '') + '\\n' +\n                    'tags: ' + article.tags.join(',') + '\\n' +\n                    'template: index.html\\n' +\n                    '---\\n\\n' +\n                    article.raw_body\n      fs.writeFile('src/' + article.id + '.md', content, function(err) {\n        if (err) { return console.log(err) }\n      })\n\n    })\n  })\n})\n\nrun npm install sqlite3, mkdirp first.\nhttps://gist.github.com/NdYAG/ecf73ff96cf125f0d72d\n```js\nvar util = require('util')\n  , sqlite3 = require('sqlite3').verbose()\n  , fs = require('fs')\n  , mkdirp = require('mkdirp')\n\nvar Kobito = function(path) {\n  this.db = new sqlite3.Database(path)\n}\nKobito.prototype = {\n  execAll: function(sql, callback) {\n    if (typeof callback !== \"function\") return\n    this.db.serialize((function() {\n      this.db.all(sql, function(err, rows) {\n        if (err) { return console.log(err) }\n        callback.apply(this, Array.prototype.slice.call(arguments, 0))\n      })\n    }).bind(this))\n  },\n  fetchAllArticles: function(callback) {\n    this.execAll(\"SELECT Z_PK AS id, ZTITLE AS title, ZRAW_BODY AS raw_body FROM ZITEM\", callback)\n  },\n  fetchOneArticle: function(id, callback) {\n    this.execAll(\"SELECT ZTITLE AS title, ZRAW_BODY AS raw_body FROM ZITEM WHERE Z_PK = \" + id, callback)\n  },\n  fetchTagsByArticle: function(id, callback) {\n    this.execAll(\"SELECT Z_1TAGS.Z_2TAGS AS id, ZTAG.ZNAME AS name FROM Z_1TAGS INNER JOIN ZTAG ON Z_1TAGS.Z_2TAGS = ZTAG.Z_PK WHERE Z_1TAGS.Z_1ITEMS = \" + id, callback)\n  },\n  fetchAllTags: function(callback) {\n    this.execAll(\"SELECT Z_PK AS id FROM ZTAG\", callback)\n  },\n  fetchOneTag: function(id, callback) {\n    this.execAll(\"SELECT Z_PK AS id, ZNAME AS name FROM ZTAG WHERE Z_PK = \" + id, callback)\n  },\n  fetchArticlesByTag: function(id, callback) {\n    this.execAll(\"SELECT Z_1TAGS.Z_1ITEMS AS id, ZITEM.ZTITLE AS title FROM Z_1TAGS INNER JOIN ZITEM ON Z_1TAGS.Z_1ITEMS = ZITEM.Z_PK WHERE Z_1TAGS.Z_2TAGS = \" + id, callback)\n  },\n  fetchArticle: function(id, callback) {\n    var self = this\n    this.fetchOneArticle(id, function(err, article) {\n      self.fetchTagsByArticle(id, function(err, tags) {\n        article[0].tags = (function() {\n          var ret = []\n          tags.forEach(function(tag) {\n            ret.push(tag.name)\n          })\n          return ret\n        })()\n        article[0].id = id\n        callback(err, article[0])\n      })\n    })\n  },\n  fetchTag: function(id, callback) {\n    var self = this\n    this.fetchOneTag(id, function(err, tag) {\n      self.fetchArticlesByTag(id, function(err, articles) {\n        tag[0].articles = articles\n        callback(err, tag)\n      })\n    })\n  }\n}\n\nvar kobito = new Kobito( util.format('%s/Library/Kobito/Kobito.db', process.env.HOME) )\n\nkobito.fetchAllArticles(function(err, articles) {\n  mkdirp.sync('src')\n  articles.forEach(function(article) {\n    kobito.fetchArticle(article.id, function(err, article) {\n\n      // export to yaml for metalsmith/jekyll\n      var content = '---\\n' +\n                    'title: ' + article.title.replace(':', '') + '\\n' +\n                    'tags: ' + article.tags.join(',') + '\\n' +\n                    'template: index.html\\n' +\n                    '---\\n\\n' +\n                    article.raw_body\n      fs.writeFile('src/' + article.id + '.md', content, function(err) {\n        if (err) { return console.log(err) }\n      })\n\n    })\n  })\n})\n```\n\nrun `npm install sqlite3, mkdirp` first.\n\n\n\nhttps://gist.github.com/NdYAG/ecf73ff96cf125f0d72d\n", "tags": ["Kobito", "Node.js"]}