{"context": " More than 1 year has passed since last update.\n\nJava\u958b\u767a\u8005\u304c\u4e00\u5ea6\u306f\u8aad\u3080\u3079\u304dStackOverflow\u3010\u65b0\u4eba\u7de8\u3011\n\n10. What is a serialVersionUID and why should I use it?\n\nhttp://stackoverflow.com/questions/285793/what-is-a-serialversionuid-and-why-should-i-use-it\n\n\u3053\u308c\u306f\u65b0\u4eba\u306e\u8ab0\u3082\u304c\u901a\u3063\u305f\u9053\u3067\u306f\u306a\u3044\u3067\u3057\u3087\u3046\u304b\u3002Eclipse\u3068\u304b\u3067\u300c\u306a\u3093\u304bserialVersionUID\u306a\u308b\u3082\u3093\u304c\u81ea\u52d5\u751f\u6210\u3055\u308c\u305f\u3093\u3060\u3051\u3069\u30fc\u3002\u3002\u3002\u300d\u3068\u3044\u3046\u4eba\u3001\u307e\u308f\u308a\u306b\u3082\u305f\u304f\u3055\u3093\u3044\u307e\u3057\u305f\n\n\nThe serialization runtime associates with each serializable class a version number, called a serialVersionUID, which is used during deserialization to verify that the sender and receiver of a serialized object have loaded classes for that object that are compatible with respect to serialization. \n\n\n9. \u201cimplements Runnable\u201d vs. \u201cextends Thread\u201d\n\n\n\u3053\u3061\u3089\u306f\u30bb\u30ab\u30f3\u30c9\u30a2\u30f3\u30b5\u30fc\u304b\u3089\u306e\u5f15\u7528\n\n\nIn general, I would recommend using something like Runnable rather than Thread because it allows you to keep your work only loosely coupled with your choice of concurrency. For example, if you use a Runnable and decide later on that this doesn't in fact require it's own Thread, you can just call threadA.run().\n\nhttp://stackoverflow.com/questions/541487/implements-runnable-vs-extends-thread\n\n8. What is reflection and why is it useful?\n\nhttp://stackoverflow.com/questions/37628/what-is-reflection-and-why-is-it-useful\n\n\u300c\u30ea\u30d5\u30ec\u30af\u30b7\u30e7\u30f3\u3068\u306f\u306a\u3093\u305e\u3084\uff1f\u300d\u3068\u3044\u3046\u4eba\u306e\u305f\u3081\u306b\nStackOverflow\u306e\u918d\u9190\u5473\u306e\u4e00\u3064\u306f\u3001\u30b3\u30e1\u30f3\u30c8\u3067\u3059\u3002UI\u4e0a\u306f\u5c0f\u3055\u304f\u3066\u3082\u3057\u304b\u3057\u305f\u3089\u3042\u307e\u308a\u898b\u308b\u4eba\u306f\u5c11\u3044\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u304c\u3001\u3088\u304f\u898b\u3066\u307f\u308b\u3068\u30b3\u30e1\u30f3\u30c8\u6b04\u3067\u306e\u8b70\u8ad6\u306f\u304b\u306a\u308a\u767d\u71b1\u3057\u3066\u3044\u307e\u3059\u3002\u53cd\u5bfe\u9663\u55b6\u3084\u9055\u3046\u898b\u65b9\u304b\u3089\u306e\u6838\u5fc3\u3092\u3064\u3044\u305f\u30b3\u30e1\u30f3\u30c8\u304c\u3057\u308c\u3063\u3068\u66f8\u3044\u3066\u3042\u308a\u3001\u305d\u308c\u306b\u30d9\u30b9\u30c8\u30a2\u30f3\u30b5\u30fc\u306b\u5339\u6575\u3059\u308b\u304f\u3089\u3044\u306eVote Ups\u304c\u3064\u3044\u3066\u3044\u305f\u308a\u3057\u307e\u3059\n\u3088\u304b\u3063\u305f\u3089\u30b3\u30e1\u30f3\u30c8\u6b04\u3082\u76ee\u3067\u8ffd\u3063\u3066\u307f\u3066\u304f\u3060\u3055\u3044\n\n\n7. Examples of GoF Design Patterns in Java's core libraries\n\nhttp://stackoverflow.com/questions/1673841/examples-of-gof-design-patterns-in-javas-core-libraries\n\n\u3053\u308c\u306f\u3001\u3082\u3046\u3081\u3061\u3083\u304f\u3061\u3083\u304a\u3059\u3059\u3081\u3067\u3059\u3002\u898b\u308c\u3070\u308f\u304b\u308a\u307e\u3059\n\u4eca\u308f\u304b\u3089\u306a\u304f\u3066\u3082\u3001\u304a\u6c17\u306b\u5165\u308a\u306b\u8ffd\u52a0\u3057\u3066\u304a\u3044\u3066\u6b32\u3057\u3044\u3067\u3059\uff08\u30af\u30a8\u30b9\u30c1\u30e7\u30f3\u306e\u304a\u6c17\u306b\u5165\u308a\u6570\u3082\u3053\u306e\u8a18\u4e8b\u3092\u66f8\u3044\u305f\u6642\u70b9\u30672200\u8d85\u3048\u3068\u5727\u5012\u7684\uff09\n\n\n6. StringBuilder and StringBuffer\n\nhttp://stackoverflow.com/questions/355089/stringbuilder-and-stringbuffer\n\n\u3053\u308c\u3082\u8ab0\u3082\u304c\u4e00\u5ea6\u306f\u901a\u308b\u3068\u601d\u308f\u308c\u308b\u7591\u554f\n\u3067\u3059\u304c\u3001\u5df7\u306e\u53c2\u8003\u66f8\u3068\u304b\u306b\u306f\u3057\u3087\u3063\u3071\u306a\u304b\u3089\u9055\u3044\u306b\u3064\u3044\u3066\u66f8\u304b\u308c\u3066\u3044\u305f\u308a\u3059\u308b\u306e\u3067\u3001\u3053\u3053\u306b\u8f09\u305b\u308b\u304b\u8ff7\u3063\u305f\u306e\u3067\u3059\u304c\u3001\u30a2\u30f3\u30b5\u30fc\u306e\u3044\u308d\u3044\u308d\u306a\u8996\u70b9\u304b\u3089\u66f8\u304b\u308c\u305f\u305d\u308c\u305e\u308c\u306e\u7b54\u3048\u304c\u52c9\u5f37\u306b\u306a\u308b\u306e\u3067\u8f09\u305b\u307e\u3057\u305f\n\n\n5. When to use LinkedList over ArrayList?\n\nhttp://stackoverflow.com/questions/322715/when-to-use-linkedlist-over-arraylist\n\n\u305f\u3076\u3093ArrayList\u306f\u3001\u65b0\u4eba\u6642\u4ee3\u304b\u3089\u4e00\u756a\u4f7f\u3046java.util\u30d1\u30c3\u30b1\u30fc\u30b8\u306e\u30af\u30e9\u30b9\u3060\u3068\u601d\u3044\u307e\u3059\n\u30d9\u30b9\u30c8\u30a2\u30f3\u30b5\u30fc\u306e\u8aac\u660e\u304c\u4e01\u5be7\u306a\u306e\u3067\u3001\u305c\u3072\u82f1\u8a9e\u304c\u82e6\u624b\u306a\u65b9\u3082\u6311\u6226\u3057\u3066\u6b32\u3057\u3044\u3067\u3059\n\n\nLinkedList allows for constant-time insertions or removals using iterators, but only sequential access of elements. In other words, you can walk the list forwards or backwards, but finding a position in the list takes time proportional to the size of the list.\nArrayList, on the other hand, allow fast random read access, so you can grab any element in constant time. But adding or removing from anywhere but the end requires shifting all the latter elements over, either to make an opening or fill the gap. Also, if you add more elements than the capacity of the underlying array, a new array (1.5 times the size) is allocated, and the old array is copied to the new one, so adding to an ArrayList is O(n) in the worst case but constant on average.\n\n\n4. Why is char[] preferred over String for passwords?\n\nhttp://stackoverflow.com/questions/8881291/why-is-char-preferred-over-string-for-passwords\n\n\u3053\u306e\u30dd\u30b9\u30c8\u306e\u4e2d\u3067\u306f\u3061\u3087\u3063\u3068\u3080\u305a\u304b\u3057\u3081\u306e\u8a18\u4e8b\n\n\nStrings are immutable. That means once you've created the string, if another process can dump memory, there's no way (aside from reflection) you can get rid of the data before GC kicks in.\nWith an array, you can explicitly wipe the data after you're done with it: you can overwrite the array with anything you like, and the password won't be present anywhere in the system, even before garbage collection.\nSo yes, this is a security concern - but even using char[] only reduces the window of opportunity for an attacker, and it's only for this specific type of attack.\n\n\n3. Differences between HashMap and Hashtable?\n\nhttp://stackoverflow.com/questions/40471/differences-between-hashmap-and-hashtable\n\nHashMap\u3082ArrayList\u306b\u3064\u3065\u3044\u3066\u3088\u304f\u4f7f\u3046\u30af\u30e9\u30b9\u306e\u3072\u3068\u3064\u3067\u306f\u306a\u3044\u3067\u3057\u3087\u3046\u304b\n\n\n2. Java += operator\n\nhttp://stackoverflow.com/questions/8710619/java-operator\n\n\u5927\u4e8b\u306aJava\u306e\u4ed5\u69d8\u3067\u3059\u304c\u3001Java Silver\u306e\u8cc7\u683c\u52c9\u5f37\u3068\u304b\u3092\u901a\u3057\u3066Java\u3092\u52c9\u5f37\u3057\u3066\u3044\u308b\u4eba\u306f\u3001\u3082\u3057\u304b\u3059\u308b\u3068\u5f53\u305f\u308a\u524d\u306e\u3088\u3046\u306b\u6700\u521d\u304b\u3089\u77e5\u3063\u3066\u3044\u308b\u3053\u3068\u304b\u3082\u3057\u308c\u307e\u305b\u3093\n\n\n1. Is Java \u201cpass-by-reference\u201d or \u201cpass-by-value\u201d?\n\nhttp://stackoverflow.com/questions/40480/is-java-pass-by-reference-or-pass-by-value\n\n\u300c\u53c2\u7167\u6e21\u3057\u300d\u304b\u300c\u5024\u6e21\u3057\u304b\u300d\u3068\u3044\u3046\u8b70\u8ad6\n\u3044\u308d\u3044\u308d\u306a\u8b70\u8ad6\u304c\u5674\u51fa\u3057\u3059\u304e\u3066\u3044\u3066\u3001\u9006\u306b\u6df7\u4e71\u3059\u308b\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u304c\u7b11\n\n# Java\u958b\u767a\u8005\u304c\u4e00\u5ea6\u306f\u8aad\u3080\u3079\u304dStackOverflow\u3010\u65b0\u4eba\u7de8\u3011\n\n## 10. [What is a serialVersionUID and why should I use it?](http://stackoverflow.com/questions/285793/what-is-a-serialversionuid-and-why-should-i-use-it)\n\nhttp://stackoverflow.com/questions/285793/what-is-a-serialversionuid-and-why-should-i-use-it\n\n- \u3053\u308c\u306f\u65b0\u4eba\u306e\u8ab0\u3082\u304c\u901a\u3063\u305f\u9053\u3067\u306f\u306a\u3044\u3067\u3057\u3087\u3046\u304b\u3002Eclipse\u3068\u304b\u3067\u300c\u306a\u3093\u304bserialVersionUID\u306a\u308b\u3082\u3093\u304c\u81ea\u52d5\u751f\u6210\u3055\u308c\u305f\u3093\u3060\u3051\u3069\u30fc\u3002\u3002\u3002\u300d\u3068\u3044\u3046\u4eba\u3001\u307e\u308f\u308a\u306b\u3082\u305f\u304f\u3055\u3093\u3044\u307e\u3057\u305f\n\n\n> The serialization runtime associates with each serializable class a version number, called a serialVersionUID, which is used during deserialization to verify that the sender and receiver of a serialized object have loaded classes for that object that are compatible with respect to serialization. \n\n\n## 9. [\u201cimplements Runnable\u201d vs. \u201cextends Thread\u201d](http://stackoverflow.com/questions/541487/implements-runnable-vs-extends-thread)\n\n- \u3053\u3061\u3089\u306f\u30bb\u30ab\u30f3\u30c9\u30a2\u30f3\u30b5\u30fc\u304b\u3089\u306e\u5f15\u7528\n\n> In general, I would recommend using something like Runnable rather than Thread because it allows you to keep your work only loosely coupled with your choice of concurrency. For example, if you use a Runnable and decide later on that this doesn't in fact require it's own Thread, you can just call threadA.run().\n\nhttp://stackoverflow.com/questions/541487/implements-runnable-vs-extends-thread\n\n## 8. [What is reflection and why is it useful?](http://stackoverflow.com/questions/37628/what-is-reflection-and-why-is-it-useful)\n\nhttp://stackoverflow.com/questions/37628/what-is-reflection-and-why-is-it-useful\n\n- \u300c\u30ea\u30d5\u30ec\u30af\u30b7\u30e7\u30f3\u3068\u306f\u306a\u3093\u305e\u3084\uff1f\u300d\u3068\u3044\u3046\u4eba\u306e\u305f\u3081\u306b\n- StackOverflow\u306e\u918d\u9190\u5473\u306e\u4e00\u3064\u306f\u3001\u30b3\u30e1\u30f3\u30c8\u3067\u3059\u3002UI\u4e0a\u306f\u5c0f\u3055\u304f\u3066\u3082\u3057\u304b\u3057\u305f\u3089\u3042\u307e\u308a\u898b\u308b\u4eba\u306f\u5c11\u3044\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u304c\u3001\u3088\u304f\u898b\u3066\u307f\u308b\u3068\u30b3\u30e1\u30f3\u30c8\u6b04\u3067\u306e\u8b70\u8ad6\u306f\u304b\u306a\u308a\u767d\u71b1\u3057\u3066\u3044\u307e\u3059\u3002\u53cd\u5bfe\u9663\u55b6\u3084\u9055\u3046\u898b\u65b9\u304b\u3089\u306e\u6838\u5fc3\u3092\u3064\u3044\u305f\u30b3\u30e1\u30f3\u30c8\u304c\u3057\u308c\u3063\u3068\u66f8\u3044\u3066\u3042\u308a\u3001\u305d\u308c\u306b\u30d9\u30b9\u30c8\u30a2\u30f3\u30b5\u30fc\u306b\u5339\u6575\u3059\u308b\u304f\u3089\u3044\u306eVote Ups\u304c\u3064\u3044\u3066\u3044\u305f\u308a\u3057\u307e\u3059\n- \u3088\u304b\u3063\u305f\u3089\u30b3\u30e1\u30f3\u30c8\u6b04\u3082\u76ee\u3067\u8ffd\u3063\u3066\u307f\u3066\u304f\u3060\u3055\u3044\n\n\n## 7. [Examples of GoF Design Patterns in Java's core libraries](http://stackoverflow.com/questions/1673841/examples-of-gof-design-patterns-in-javas-core-libraries)\n\nhttp://stackoverflow.com/questions/1673841/examples-of-gof-design-patterns-in-javas-core-libraries\n\n- \u3053\u308c\u306f\u3001\u3082\u3046\u3081\u3061\u3083\u304f\u3061\u3083\u304a\u3059\u3059\u3081\u3067\u3059\u3002\u898b\u308c\u3070\u308f\u304b\u308a\u307e\u3059\n- \u4eca\u308f\u304b\u3089\u306a\u304f\u3066\u3082\u3001\u304a\u6c17\u306b\u5165\u308a\u306b\u8ffd\u52a0\u3057\u3066\u304a\u3044\u3066\u6b32\u3057\u3044\u3067\u3059\uff08\u30af\u30a8\u30b9\u30c1\u30e7\u30f3\u306e\u304a\u6c17\u306b\u5165\u308a\u6570\u3082\u3053\u306e\u8a18\u4e8b\u3092\u66f8\u3044\u305f\u6642\u70b9\u30672200\u8d85\u3048\u3068\u5727\u5012\u7684\uff09\n\n## 6. [StringBuilder and StringBuffer](http://stackoverflow.com/questions/355089/stringbuilder-and-stringbuffer)\n\nhttp://stackoverflow.com/questions/355089/stringbuilder-and-stringbuffer\n\n- \u3053\u308c\u3082\u8ab0\u3082\u304c\u4e00\u5ea6\u306f\u901a\u308b\u3068\u601d\u308f\u308c\u308b\u7591\u554f\n- \u3067\u3059\u304c\u3001\u5df7\u306e\u53c2\u8003\u66f8\u3068\u304b\u306b\u306f\u3057\u3087\u3063\u3071\u306a\u304b\u3089\u9055\u3044\u306b\u3064\u3044\u3066\u66f8\u304b\u308c\u3066\u3044\u305f\u308a\u3059\u308b\u306e\u3067\u3001\u3053\u3053\u306b\u8f09\u305b\u308b\u304b\u8ff7\u3063\u305f\u306e\u3067\u3059\u304c\u3001\u30a2\u30f3\u30b5\u30fc\u306e\u3044\u308d\u3044\u308d\u306a\u8996\u70b9\u304b\u3089\u66f8\u304b\u308c\u305f\u305d\u308c\u305e\u308c\u306e\u7b54\u3048\u304c\u52c9\u5f37\u306b\u306a\u308b\u306e\u3067\u8f09\u305b\u307e\u3057\u305f\n\n## 5. [When to use LinkedList over ArrayList?](http://stackoverflow.com/questions/322715/when-to-use-linkedlist-over-arraylist)\n\nhttp://stackoverflow.com/questions/322715/when-to-use-linkedlist-over-arraylist\n\n- \u305f\u3076\u3093`ArrayList`\u306f\u3001\u65b0\u4eba\u6642\u4ee3\u304b\u3089\u4e00\u756a\u4f7f\u3046`java.util`\u30d1\u30c3\u30b1\u30fc\u30b8\u306e\u30af\u30e9\u30b9\u3060\u3068\u601d\u3044\u307e\u3059\n- \u30d9\u30b9\u30c8\u30a2\u30f3\u30b5\u30fc\u306e\u8aac\u660e\u304c\u4e01\u5be7\u306a\u306e\u3067\u3001\u305c\u3072\u82f1\u8a9e\u304c\u82e6\u624b\u306a\u65b9\u3082\u6311\u6226\u3057\u3066\u6b32\u3057\u3044\u3067\u3059\n\n> LinkedList<E> allows for constant-time insertions or removals using iterators, but only sequential access of elements. In other words, you can walk the list forwards or backwards, but finding a position in the list takes time proportional to the size of the list.\n\n> ArrayList<E>, on the other hand, allow fast random read access, so you can grab any element in constant time. But adding or removing from anywhere but the end requires shifting all the latter elements over, either to make an opening or fill the gap. Also, if you add more elements than the capacity of the underlying array, a new array (1.5 times the size) is allocated, and the old array is copied to the new one, so adding to an ArrayList is O(n) in the worst case but constant on average.\n\n## 4. [Why is char[] preferred over String for passwords?](http://stackoverflow.com/questions/8881291/why-is-char-preferred-over-string-for-passwords)\n\nhttp://stackoverflow.com/questions/8881291/why-is-char-preferred-over-string-for-passwords\n\n- \u3053\u306e\u30dd\u30b9\u30c8\u306e\u4e2d\u3067\u306f\u3061\u3087\u3063\u3068\u3080\u305a\u304b\u3057\u3081\u306e\u8a18\u4e8b\n\n> Strings are immutable. That means once you've created the string, if another process can dump memory, there's no way (aside from reflection) you can get rid of the data before GC kicks in.\n\n> With an array, you can explicitly wipe the data after you're done with it: you can overwrite the array with anything you like, and the password won't be present anywhere in the system, even before garbage collection.\n\n> So yes, this is a security concern - but even using char[] only reduces the window of opportunity for an attacker, and it's only for this specific type of attack.\n\n## 3. [Differences between HashMap and Hashtable?](http://stackoverflow.com/questions/40471/differences-between-hashmap-and-hashtable)\n\nhttp://stackoverflow.com/questions/40471/differences-between-hashmap-and-hashtable\n\n- HashMap\u3082ArrayList\u306b\u3064\u3065\u3044\u3066\u3088\u304f\u4f7f\u3046\u30af\u30e9\u30b9\u306e\u3072\u3068\u3064\u3067\u306f\u306a\u3044\u3067\u3057\u3087\u3046\u304b\n\n\n## 2. [Java += operator](http://stackoverflow.com/questions/8710619/java-operator)\n\nhttp://stackoverflow.com/questions/8710619/java-operator\n\n- \u5927\u4e8b\u306aJava\u306e\u4ed5\u69d8\u3067\u3059\u304c\u3001Java Silver\u306e\u8cc7\u683c\u52c9\u5f37\u3068\u304b\u3092\u901a\u3057\u3066Java\u3092\u52c9\u5f37\u3057\u3066\u3044\u308b\u4eba\u306f\u3001\u3082\u3057\u304b\u3059\u308b\u3068\u5f53\u305f\u308a\u524d\u306e\u3088\u3046\u306b\u6700\u521d\u304b\u3089\u77e5\u3063\u3066\u3044\u308b\u3053\u3068\u304b\u3082\u3057\u308c\u307e\u305b\u3093\n\n## 1. [Is Java \u201cpass-by-reference\u201d or \u201cpass-by-value\u201d?](http://stackoverflow.com/questions/40480/is-java-pass-by-reference-or-pass-by-value)\n\nhttp://stackoverflow.com/questions/40480/is-java-pass-by-reference-or-pass-by-value\n\n- \u300c\u53c2\u7167\u6e21\u3057\u300d\u304b\u300c\u5024\u6e21\u3057\u304b\u300d\u3068\u3044\u3046\u8b70\u8ad6\n- \u3044\u308d\u3044\u308d\u306a\u8b70\u8ad6\u304c\u5674\u51fa\u3057\u3059\u304e\u3066\u3044\u3066\u3001\u9006\u306b\u6df7\u4e71\u3059\u308b\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u304c\u7b11\n", "tags": ["Java", "StackOverflow"]}