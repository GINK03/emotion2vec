{"context": "\u884c\u5217\u30d7\u30ed\u30b0\u30e9\u30de\u306b\u767b\u5834\u3059\u308bPython\u3092\u3072\u305f\u3059\u3089Haskell\u3067\u304b\u3044\u3066\u304f\u3002\u5bfe\u5fdc\u3059\u308bPython\u30b3\u30fc\u30c9\u306f\u66f8\u7c4d\u306b\u3066\u78ba\u8a8d\u3044\u305f\u3060\u304d\u305f\u3044\u3002\n\n0.4.1 \u78ba\u7387\u5206\u5e03\n> import Data.Map\n> fromList [(\"heads\", 1/2), (\"tail\", 1/2)] \nfromList [(\"heads\", 1/2), (\"tail\", 1/2)]\n  :: Fractional a => Map [Char] a\n\nPython\u306e\u8f9e\u66f8\u578b\u306b\u76f8\u5f53\u3059\u308b\u3082\u306e\u306f Data.Map\u304b\u306a\u3002\n\u4ed6\u3060\u3044\u305f\u3044\u540c\u3058\u306a\u306e\u3067\u7701\u7565\u3002\n\n0.5.1 \u7c21\u5358\u306a\u5f0f\n> 44 + 11 * 4 - 6 / 11\n87.45454545454545\n\n\n\n\u8ab2\u984c 0.5.1: Python \u3092\u4f7f\u7528\u3057\u3066\u30011 \u9031\u9593\u304b\u3099\u4f55\u79d2\u304b\u3092\u6c42\u3081\u3088\n> 7 * 24 * 60 * 60\n604800\n\n\n\u8ab2\u984c 0.5.2: Python \u3092\u4f7f\u7528\u3057\u3066\u30012304811 \u3092 47 \u3066\u3099\u5272\u3063\u305f\u4f59\u308a\u3092\u6c42\u3081\u3088\u3002\u305f\u305f\u3099\u3057\u3001% \u3092\u4f7f\u7528\u3057\u306a\u3044\u3053 \u3068(\u30d2\u30f3\u30c8://\u3092\u7528\u3044\u308b)\u3002\n> (\\y x -> y - (y `div` x) * x) 2304811 47\n25\n\n% \u306e\u4ee3\u308f\u308a\u3068\u3057\u3066\u306f rem\u304c\u3042\u308b\n\n\u6587\u5b57\u5217\n> \"This sentence is false.\"\n\"This sentence is false.\"\n\n\n\u6bd4\u8f03\u3001\u6761\u4ef6\u3001\u30d5\u3099\u30fc\u30eb\u5024\n> 5 == 4\nFalse\n> 4 == 4\nTrue\n\nhaskell\u3060\u3068\u30d6\u30fc\u30eb\u6f14\u7b97\u306f && || not\n> True && False\nFalse\n> True && not (5 == 4)\nTrue\n\n\n\u8ab2\u984c 0.5.3: \u30d5\u3099\u30fc\u30eb\u5f0f\u3092\u5165\u529b\u3057\u3066\u3001673 \u3068 909 \u306e\u548c\u304b\u3099 3 \u3066\u3099\u5272\u308a\u5207\u308c\u308b\u304b\u3068\u3099\u3046\u304b\u3092\u8abf\u3078\u3099\u3088\u3002\n\u554f\u984c\u306e\u610f\u5473\u304c\u308f\u304b\u3089\u305a\u3002\u3002\u3002\u7701\u7565\nghci\u5185\u3067\u3042\u308c\u3070 :t \u3067\u5024\u306e\u65b9\u3092\u8abf\u3079\u3089\u308c\u308b\n> :t 4\n4 :: Num t => t\n> :t 4 == 4\n4 == 4 :: Bool\n> :t \n\"4\" :: [Char]\n> :t 4 :: Float\n4 :: Float\n\n4\u306e\u578b\u306f Int\u3084Float\u306a\u3069\u6570\u5b57\u3067\u6271\u3048\u308b\u578b\u306b\u306a\u308c\u308b\u3053\u3068\u3092\u51fa\u529b\u3057\u3066\u3044\u308b\u3002\n\uff14\u3092Float\u3068\u3057\u3066\u4f7f\u3044\u305f\u3044\u306a\u3089\u578b\u6ce8\u91c8\u3092\u3064\u3051\u308c\u3070\u3088\u3044\u3002\n\n0.5.2 \u4ee3\u5165\u6587\n> mynum = 4+1\n\n\nHaskell\u3067\u306f\u666e\u901a\u306f\u518d\u4ee3\u5165\u4e0d\u53ef\u80fd\u3060\u304cghci\u4e0a\u3060\u3068\u53ef\u80fd\n> mynum = \"Brow\"\n\n\n0.5.3 \u6761\u4ef6\u5f0f\nHaskell\u306eif\u306felse\u304c\u5fc5\u9808\u306b\u306a\u308b\u3002\n\n\u8ab2\u984c 0.5.4: \u22129 \u3092 x \u306b\u30011/2 \u3092 y \u306b\u4ee3\u5165\u3059\u308b\u3002\u4ee5\u4e0b\u306e\u5f0f\u306e\u5024\u3092\u4e88\u60f3\u3057\u3001\u5165\u529b\u3057\u3066\u4e88\u60f3\u3092\u78ba\u8a8d\u305b\u3088\u3002 2*(y+1/2) if x+10<0 else 2*(y-1/2)\n\u6761\u4ef6\u306f false 2 ** 0 \u3067 1\n> (\\x y -> if x + 10 < 0 then 2**(y+1/2) else 2**(y-1/2)) (-9  :: Int) (1/2)\n1.0\n\n\n0.5.4 \u96c6\u5408\n> import Data.Set\n> fromList [1+2, 3, 4]\nfromList [3,4]\n\n\u96c6\u5408\u3092\u8868\u73fe\u3059\u308b\u306a\u3089 Data.Set\n3\u304c\u91cd\u8907\u3059\u308b\u306e\u3067\u3072\u3068\u3064\u306b\u306a\u3063\u3066\u308b\u3002\"a\"\u306f\u578b\u304c\u9055\u3046\u306e\u3067\u3053\u306e\u307e\u307e\u3067\u306f\u4e00\u7dd2\u306e\u96c6\u5408\u306b\u306f\u3067\u304d\u306a\u3044\u3002\n> import Data.Set\n> length(fromList ['a','b','c','a','c'])\n3\n\n\u6fc3\u5ea6\u306flength\u3067\u53d6\u5f97\u3067\u304d\u308b\u3002\n\n\u96c6\u8a08\n> import Data.Set\n> sum(fromList [1,2,3])\n6\n\n\n\u96c6\u5408\u306e\u8981\u7d20\u306e\u30c6\u30b9\u30c8\n> import Data.Set\n> member 3 (fromList [1,2,3])\nTrue\n> member 4 (fromList [1,2,3])\nFalse\n> 4 `member` (fromList [1,2,3])\nFalse\nnot . 4 `member` $ (fromList [1, 2, 3])\n> True\n\n\n\u96c6\u5408\u306e\u548c\u96c6\u5408\u3001\u5171\u901a\u90e8\u5206\u3001\u5dee\u96c6\u5408\n> (fromList [1,2,3]) `union` (fromList [2,3,4])\nfromList [1,2,3,4]\n> (fromList [1,2,3]) `intersection` (fromList [2,3,4])\nfromList [2,3]\n> (fromList [1,2,3]) `difference` (fromList [2,3,4])\nfromList [1]\n\n\n\u96c6\u5408\u306e\u5909\u66f4\n> delete 2 . insert 4 . fromList $ [1,2,3]\n\nfromList [1,3,4]\n\n\u96c6\u5408\u306e\u5185\u5305\u8868\u8a18\nSet\u306f\u30e2\u30ca\u30c9\u3067\u306f\u306a\u306a\u305d\u3046\u306a\u306e\u3067\u5185\u5305\u8868\u8a18\u3067\u304d\u305d\u3046\u306b\u306a\u3044\u3002\n> fromList [2*x | x <- [1,2,3]]\nfromList [2,4,6]\n\n\n\u8ab2\u984c 0.5.5: \u96c6\u5408 {1, 2, 3, 4, 5} \u306b\u5bfe\u3059\u308b\u5185\u5305\u8868\u8a18\u3066\u3099\u3001\u305d\u308c\u305d\u3099\u308c\u306e\u6574\u6570\u306e 2 \u4e57\u3092\u8fd4\u3059\u3082\u306e\u3092\u66f8\u3051\u3002\n> fromList [x*x | x <- [1..5]]\nfromList [1,4,9,16,25]\n\n\u8ab2\u984c0.5.6: \u96c6\u5408{0,1,2,3,4}\u306b\u5bfe\u3059\u308b\u5185\u5305\u8868\u8a18\u3066\u3099\u3001\u305d\u308c\u305d\u3099\u308c\u306e\u6574\u6570\u30922\u306e\u6307\u6570\u306b\u6301\u3064\u5024\u3001\u5373\u3061\u300120\u3001 21\u300122 \u306a\u3068\u3099\u3092\u8fd4\u3059\u3082\u306e\u3092\u66f8\u3051\u3002\n> fromList [2 ^ x | x <- [0..4]]\nfromList [1,2,4,8,16]\n\n\n> fromList [x*x | x <- toList (fromList [1,3] `union` (fromList [5,7]))]\nfromList [1,9,25,49]\n\n> fromList [x*x | x <- toList (fromList [1,3] `union` (fromList [5,7])), x > 2]\nfromList [9,25,49]\n\n> fromList [x*y | x <- [1..3] , y <- [2..4]]\nfromList [2,3,4,6,8,9,12]\n\n\n\u8ab2\u984c 0.5.7\n> fromList [x*y | x <- [1..3] , y <- [5,7,11]]\nfromList [5,7,10,11,14,15,21,22,33]\n\n\n> fromList [x*y | x <- [1..3] , y <- [2..4], x /= y]\nfromList [2,3,4,6,8,12]\n\n\n\u8ab2\u984c 0.5.8\n> fromList [x*y | x <- [2,4,8] , y <- [3,6,12]]\nfromList [6,12,24,48,96]\n\n\n\u8ab2\u984c 0.5.9\n> [x | x <- [1,2,3,4] , y <- [3,4,5,6], x == y ]\n[3,4]\n\n\n0.5.5 \u30ea\u30b9\u30c8\n> [1,1+1,3,2,3]\n[1,2,3,2,3]\n\n\nHaskell\u306e\u30ea\u30b9\u30c8\u306e\u8981\u7d20\u306b\u306f\u5236\u9650\u304c\u3042\u308b\u306e\u3067Hlist\u3068\u304b\u4f7f\u3046\u304b\u3001\u578b\u3092\u7528\u610f\u3059\u308b\u304b\u3057\u306a\u3044\u3068\u3044\u3051\u306a\u3044\u3002\n\n> sum [1,1,0,1,0,1,0]\n4\n> foldl (+) (-9) [1,1,0,1,0,1,0]\n-5\n\nHaskell\u306esum\u306b\u7b2c2\u5f15\u6570\u306f\u306a\u3044\u306e\u3067foldl\u3067\u304b\u3044\u3066\u307f\u305f\n\n0.5.10 \u8a55\u4fa1\u3057\u305f\u5024\u304b\u3099\u30ea\u30b9\u30c8 [20,10,15,75] \u306e\u8981\u7d20\u306e\u5e73\u5747\u3068\u306a\u308b\u5f0f\u3092\u66f8\u3051\u3002\n> (\\xs -> sum xs / (fromIntegral . length $ xs)) [20,10,15,75]\n30.0\n\n\u6c42\u3081\u308b\u7d50\u679c\u304c\u6d6e\u52d5\u5c0f\u6570\u306b\u306a\u308b\u3088\u3046\u306b fromIntegral\u3092\u3064\u304b\u3063\u3066\u3044\u307e\u3059\u3002\n\n\u30ea\u30b9\u30c8\u306e\u7d50\u5408\n++ \u3067\u7d50\u5408\u53ef\u80fd\u3060\u3051\u3069\u3001\u52b9\u7387\u306f\u3044\u307e\u3044\u3061\n> [1,2,3] ++ [4,5]\n[1,2,3,4,5]\n> let mylist = [4,8,12]\n> mylist ++ [4,5]\n[4,8,12,4,5]\n> mylist\n[4,8,12]\n\n> [[1,2,3], [4,5,6],[7,8,9]]\n\n\u6587\u5b57\u5217\u3068\u6570\u5024\u304c\u6df7\u3056\u3063\u305f\u30ea\u30b9\u30c8\u306f\u3064\u304f\u308c\u306a\u3044\u306e\u3067\u6570\u5b57\u3060\u3051\u306b\u3057\u305f\u3002\n\n\u3059\u3079\u3066\u306e\u30ea\u30b9\u30c8\u3092\u7d50\u5408\u3059\u308b\u306e\u306fsum\u3067\u306f\u3067\u304d\u306a\u3044\u306e\u3067foldMap\u3092\u3064\u304b\u3063\u305f\u3002\n> foldMap id [[1,2,3], [4,5,6],[7,8,9]]\n[1,2,3,4,5,6,7,8,9]\n\n\n\u30ea\u30b9\u30c8\u306e\u5185\u5305\u8868\u8a18\n> [2*x | x <- [2,1,3,4,5]]\n[4,2,6,8,10]\n\n>  [x*y | x <- [1,2,3] ,y <- [10,20,30]]\n[10,20,30,20,40,60,30,60,90]\n\n\n\u8ab2\u984c 0.5.11: \u30ea\u30b9\u30c8 [\u2019A\u2019,\u2019B\u2019,\u2019C\u2019] \u53ca\u3072\u3099 [1,2,3] \u306b\u5bfe\u3059\u308b\u30ea\u30b9\u30c8\u5185\u5305\u8868\u8a18\u3066\u3099\u3001\u305d\u306e\u5024\u304b\u3099 [\u6587 \u5b57, \u6570\u5b57] \u306e\u5168\u3066\u306e\u53ef\u80fd\u306a\u7d44\u307f\u5408\u308f\u305b\u304b\u3089\u6210\u308b\u3082\u306e\u3092\u66f8\u3051\u3002\u5373\u3061\u3001\u305d\u306e\u5024\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u3082\u306e\u3066\u3099\u3042\u308b\u3002\n[[\u2019A\u2019, 1], [\u2019A\u2019, 2], [\u2019A\u2019, 3], [\u2019B\u2019, 1], [\u2019B\u2019, 2],[\u2019B\u2019, 3],\n  [\u2019C\u2019, 1], [\u2019C\u2019, 2], [\u2019C\u2019, 3]]\n> [(x,y) | x <- ['A', 'B', 'C'], y <- [1,2,3]]\n[('A',1),('A',2),('A',3),('B',1),('B',2),('B',3),('C',1),('C',2),('C',3)]\n\n\n\u8ab2\u984c 0.5.12: LofL \u306b\u6570\u5b57\u306e\u30ea\u30b9\u30c8\u3092\u8981\u7d20\u306b\u6301\u3064\u30ea\u30b9\u30c8\u3092\u4ee3\u5165\u3057\u305f\u3068\u3057\u3088\u3046\u3002\u3053\u306e\u3068\u304d\u3001\u305d\u306e\u30ea\u30b9 \u30c8\u5168\u3066\u306e\u6570\u5024\u5168\u90e8\u3092\u8db3\u3057\u305f\u5408\u8a08\u3092\u8a08\u7b97\u3059\u308b\u5f0f\u3092\u66f8\u3051\u3002\u3053\u306e\u5f0f\u306f\u6b21\u306e\u5f62\u3092\u6301\u3061\u3001\u5185\u5305\u8868\u8a18\u3092 1 \u3064\u6301\u3064\n> (\\lofl -> sum [sum x| x <- lofl]) [[0.25, 0.75, 0.1], [-1,0], [4,4,4,4]]\n16.1\n\n\n\u30a4\u30f3\u30c6\u3099\u30c3\u30af\u30b9\u6307\u5b9a\u306b\u3088\u308b\u30ea\u30b9\u30c8\u306e\u8981\u7d20\u306e\u53d6\u5f97\n> let mylist = [1..4]\n> mylist !! 0\n1\n> [\"in\", \"the\", \"CI\"] !! 1\n\"the\"\n\n> let l = [0,10..90]\n> take 5 l\n[0,10,20,30,40]\n> drop 5 l\n[50,60,70,80,90]\n> map fst . filter (even . snd) $ zip l [0..]\n[0,20,40,60,80]\n> map fst . filter (odd . snd) $ zip l [0..]\n[10,30,50,70,90]\n\n\u30b9\u30e9\u30a4\u30b9\u3059\u308b\u3044\u3044\u65b9\u6cd5\u304c\u304a\u3082\u3044\u3046\u304b\u3070\u305a\u3002\n\n\u30a2\u30f3\u30cf\u309a\u30c3\u30af\u306b\u3088\u308b\u30ea\u30b9\u30c8\u306e\u8981\u7d20\u306e\u53d6\u5f97\n\u30d1\u30bf\u30fc\u30f3\u30de\u30c3\u30c1\u3067\u4ee3\u7528\n>  case [4*1, 4*2, 4*3] of [a,b,c] -> print a >> print b >> print c\n4\n8\n12\n\n\n\u30ea\u30b9\u30c8\u306e\u5909\u66f4: =\u306e\u5de6\u8fba\u3066\u3099\u306e\u30a4\u30f3\u30c6\u3099\u30c3\u30af\u30b9\u6307\u5b9a\nHaskell\u3067\u306f\u539f\u5247\u30ea\u30b9\u30c8\u306e\u5909\u66f4\u306f\u3067\u304d\u306a\u3044\u3002\n\u518d\u751f\u6210\u3059\u308b\u3057\u304b\u306a\u3044\u304c\u52b9\u7387\u306f\u5fae\u5999\u306a\u306e\u3067\u3001\u3053\u3053\u3067\u306f\u304a\u3044\u3066\u304a\u304f\u3002\n\n0.5.6 \u30bf\u30d7\u30eb\n> (1, 1+1, 3)\n(1, 2, 3)\n\nTBD\n\n1.2 Python\u306b\u304a\u3051\u308b\u8907\u7d20\u6570\nHaskell\u3067\u8907\u7d20\u6570\u3092\u3064\u304b\u3046\u306b\u306f Data.Complex\u3092import\u3059\u308b\u3002\nhttps://hackage.haskell.org/package/base-4.9.0.0/docs/Data-Complex.html\n> import Data.Complex\n> 0 :+ 3      -- 3j\n> (0 :+ 3) * (0 :+ 3)\n(-9.0) :+ 0.0\n\n> import Data.Complex\n> 1 :+ 3\n\n> import Data.Complex\n> (1 :+ 3) + (10 :+ 20)\n11.0 :+ 23.0\n> x = 1 :+ 3\n> (x-1) ^ 2\n(-9.0) :+ 0.0\n\nHaskell\u306e\u7d2f\u4e57\u8a08\u7b97\u306e\u6f14\u7b97\u5b50\u306f ^ \u3068 ** \u304c\u3042\u308b\n^\u304c\u6574\u6570\u8981\u3067\u3001**\u304c\u6d6e\u52d5\u5c0f\u6570\u70b9\u8981\u3067\u3042\u308b\n\n:+\u3068+\u306e\u512a\u5148\u9806\u4f4d\u306f\u540c\u3058\u306a\u306e\u3067\u3001\u6ce8\u610f\n> 1 :+ 2 * 3\n1 :+ 6\n\n> 4*(0:+3)^^2\n(-36.0) :+ 0.0\n\n\n0:+\u3068\u304b\u304f\u306e\u304c\u3059\u3053\u3057\u3081\u3093\u3069\u304f\u3055\u3044\n\u5b9f\u90e8\u3068\u865a\u90e8\u306e\u3068\u308a\u3060\u3057\n> realPart (1 :+ 3)\n1\n> imagePart (1 :+ 3)\n3\n\n\n\u578b\u306e\u78ba\u8a8d\n> :t (1:+2)\n(1:+2) :: Num a => Complex a\n\n\n\n[\u884c\u5217\u30d7\u30ed\u30b0\u30e9\u30de](http://amzn.to/2gWImOH\n)\u306b\u767b\u5834\u3059\u308bPython\u3092\u3072\u305f\u3059\u3089Haskell\u3067\u304b\u3044\u3066\u304f\u3002\u5bfe\u5fdc\u3059\u308bPython\u30b3\u30fc\u30c9\u306f\u66f8\u7c4d\u306b\u3066\u78ba\u8a8d\u3044\u305f\u3060\u304d\u305f\u3044\u3002\n\n# 0.4.1 \u78ba\u7387\u5206\u5e03\n\n```haskell\n> import Data.Map\n> fromList [(\"heads\", 1/2), (\"tail\", 1/2)] \nfromList [(\"heads\", 1/2), (\"tail\", 1/2)]\n  :: Fractional a => Map [Char] a\n```\n\nPython\u306e\u8f9e\u66f8\u578b\u306b\u76f8\u5f53\u3059\u308b\u3082\u306e\u306f Data.Map\u304b\u306a\u3002\n\u4ed6\u3060\u3044\u305f\u3044\u540c\u3058\u306a\u306e\u3067\u7701\u7565\u3002\n\n# 0.5.1 \u7c21\u5358\u306a\u5f0f\n\n```haskell\n> 44 + 11 * 4 - 6 / 11\n87.45454545454545\n```\n\n---\n\n## \u8ab2\u984c 0.5.1: Python \u3092\u4f7f\u7528\u3057\u3066\u30011 \u9031\u9593\u304b\u3099\u4f55\u79d2\u304b\u3092\u6c42\u3081\u3088\n\n```haskell\n> 7 * 24 * 60 * 60\n604800\n```\n\n## \u8ab2\u984c 0.5.2: Python \u3092\u4f7f\u7528\u3057\u3066\u30012304811 \u3092 47 \u3066\u3099\u5272\u3063\u305f\u4f59\u308a\u3092\u6c42\u3081\u3088\u3002\u305f\u305f\u3099\u3057\u3001% \u3092\u4f7f\u7528\u3057\u306a\u3044\u3053 \u3068(\u30d2\u30f3\u30c8://\u3092\u7528\u3044\u308b)\u3002\n\n```haskell\n> (\\y x -> y - (y `div` x) * x) 2304811 47\n25\n```\n\n`%` \u306e\u4ee3\u308f\u308a\u3068\u3057\u3066\u306f `rem`\u304c\u3042\u308b\n\n## \u6587\u5b57\u5217\n\n```\n> \"This sentence is false.\"\n\"This sentence is false.\"\n```\n\n## \u6bd4\u8f03\u3001\u6761\u4ef6\u3001\u30d5\u3099\u30fc\u30eb\u5024\n\n```haskell\n> 5 == 4\nFalse\n> 4 == 4\nTrue\n```\n\nhaskell\u3060\u3068\u30d6\u30fc\u30eb\u6f14\u7b97\u306f `&&` `||` `not`\n\n```haskell\n> True && False\nFalse\n> True && not (5 == 4)\nTrue\n```\n\n\n### \u8ab2\u984c 0.5.3: \u30d5\u3099\u30fc\u30eb\u5f0f\u3092\u5165\u529b\u3057\u3066\u3001673 \u3068 909 \u306e\u548c\u304b\u3099 3 \u3066\u3099\u5272\u308a\u5207\u308c\u308b\u304b\u3068\u3099\u3046\u304b\u3092\u8abf\u3078\u3099\u3088\u3002\n\n\u554f\u984c\u306e\u610f\u5473\u304c\u308f\u304b\u3089\u305a\u3002\u3002\u3002\u7701\u7565\n\nghci\u5185\u3067\u3042\u308c\u3070 :t \u3067\u5024\u306e\u65b9\u3092\u8abf\u3079\u3089\u308c\u308b\n\n```haskell\n> :t 4\n4 :: Num t => t\n> :t 4 == 4\n4 == 4 :: Bool\n> :t \n\"4\" :: [Char]\n> :t 4 :: Float\n4 :: Float\n```\n\n4\u306e\u578b\u306f Int\u3084Float\u306a\u3069\u6570\u5b57\u3067\u6271\u3048\u308b\u578b\u306b\u306a\u308c\u308b\u3053\u3068\u3092\u51fa\u529b\u3057\u3066\u3044\u308b\u3002\n\uff14\u3092Float\u3068\u3057\u3066\u4f7f\u3044\u305f\u3044\u306a\u3089\u578b\u6ce8\u91c8\u3092\u3064\u3051\u308c\u3070\u3088\u3044\u3002\n\n# 0.5.2 \u4ee3\u5165\u6587\n\n```haskell\n> mynum = 4+1\n```\n---\n\nHaskell\u3067\u306f\u666e\u901a\u306f\u518d\u4ee3\u5165\u4e0d\u53ef\u80fd\u3060\u304cghci\u4e0a\u3060\u3068\u53ef\u80fd\n\n```haskell\n> mynum = \"Brow\"\n```\n\n# 0.5.3 \u6761\u4ef6\u5f0f\n\nHaskell\u306eif\u306felse\u304c\u5fc5\u9808\u306b\u306a\u308b\u3002\n\n##  \u8ab2\u984c 0.5.4: \u22129 \u3092 x \u306b\u30011/2 \u3092 y \u306b\u4ee3\u5165\u3059\u308b\u3002\u4ee5\u4e0b\u306e\u5f0f\u306e\u5024\u3092\u4e88\u60f3\u3057\u3001\u5165\u529b\u3057\u3066\u4e88\u60f3\u3092\u78ba\u8a8d\u305b\u3088\u3002 2**(y+1/2) if x+10<0 else 2**(y-1/2)\n\n\u6761\u4ef6\u306f false 2 ** 0 \u3067 1\n\n```haskell\n> (\\x y -> if x + 10 < 0 then 2**(y+1/2) else 2**(y-1/2)) (-9  :: Int) (1/2)\n1.0\n```\n\n# 0.5.4 \u96c6\u5408\n\n```haskell\n> import Data.Set\n> fromList [1+2, 3, 4]\nfromList [3,4]\n```\n\n\u96c6\u5408\u3092\u8868\u73fe\u3059\u308b\u306a\u3089 Data.Set\n\n3\u304c\u91cd\u8907\u3059\u308b\u306e\u3067\u3072\u3068\u3064\u306b\u306a\u3063\u3066\u308b\u3002\"a\"\u306f\u578b\u304c\u9055\u3046\u306e\u3067\u3053\u306e\u307e\u307e\u3067\u306f\u4e00\u7dd2\u306e\u96c6\u5408\u306b\u306f\u3067\u304d\u306a\u3044\u3002\n\n```haskell\n> import Data.Set\n> length(fromList ['a','b','c','a','c'])\n3\n```\n\n\u6fc3\u5ea6\u306flength\u3067\u53d6\u5f97\u3067\u304d\u308b\u3002\n\n## \u96c6\u8a08\n\n```haskell\n> import Data.Set\n> sum(fromList [1,2,3])\n6\n```\n\n## \u96c6\u5408\u306e\u8981\u7d20\u306e\u30c6\u30b9\u30c8\n\n```Haskell\n> import Data.Set\n> member 3 (fromList [1,2,3])\nTrue\n> member 4 (fromList [1,2,3])\nFalse\n> 4 `member` (fromList [1,2,3])\nFalse\nnot . 4 `member` $ (fromList [1, 2, 3])\n> True\n```\n\n## \u96c6\u5408\u306e\u548c\u96c6\u5408\u3001\u5171\u901a\u90e8\u5206\u3001\u5dee\u96c6\u5408\n\n```Haskell\n> (fromList [1,2,3]) `union` (fromList [2,3,4])\nfromList [1,2,3,4]\n> (fromList [1,2,3]) `intersection` (fromList [2,3,4])\nfromList [2,3]\n> (fromList [1,2,3]) `difference` (fromList [2,3,4])\nfromList [1]\n```\n\n## \u96c6\u5408\u306e\u5909\u66f4\n\n```\n> delete 2 . insert 4 . fromList $ [1,2,3]\n```\nfromList [1,3,4]\n\n## \u96c6\u5408\u306e\u5185\u5305\u8868\u8a18\n\nSet\u306f\u30e2\u30ca\u30c9\u3067\u306f\u306a\u306a\u305d\u3046\u306a\u306e\u3067\u5185\u5305\u8868\u8a18\u3067\u304d\u305d\u3046\u306b\u306a\u3044\u3002\n\n```Haskell\n> fromList [2*x | x <- [1,2,3]]\nfromList [2,4,6]\n```\n\n### \u8ab2\u984c 0.5.5: \u96c6\u5408 {1, 2, 3, 4, 5} \u306b\u5bfe\u3059\u308b\u5185\u5305\u8868\u8a18\u3066\u3099\u3001\u305d\u308c\u305d\u3099\u308c\u306e\u6574\u6570\u306e 2 \u4e57\u3092\u8fd4\u3059\u3082\u306e\u3092\u66f8\u3051\u3002\n\n```Haskell\n> fromList [x*x | x <- [1..5]]\nfromList [1,4,9,16,25]\n```\n\n \u8ab2\u984c0.5.6: \u96c6\u5408{0,1,2,3,4}\u306b\u5bfe\u3059\u308b\u5185\u5305\u8868\u8a18\u3066\u3099\u3001\u305d\u308c\u305d\u3099\u308c\u306e\u6574\u6570\u30922\u306e\u6307\u6570\u306b\u6301\u3064\u5024\u3001\u5373\u3061\u300120\u3001 21\u300122 \u306a\u3068\u3099\u3092\u8fd4\u3059\u3082\u306e\u3092\u66f8\u3051\u3002\n\n```Haskell\n> fromList [2 ^ x | x <- [0..4]]\nfromList [1,2,4,8,16]\n```\n\n---\n\n```Haskell\n> fromList [x*x | x <- toList (fromList [1,3] `union` (fromList [5,7]))]\nfromList [1,9,25,49]\n```\n\n```Haskell\n> fromList [x*x | x <- toList (fromList [1,3] `union` (fromList [5,7])), x > 2]\nfromList [9,25,49]\n```\n\n```Haskell\n> fromList [x*y | x <- [1..3] , y <- [2..4]]\nfromList [2,3,4,6,8,9,12]\n```\n\n### \u8ab2\u984c 0.5.7\n\n```Haskell\n> fromList [x*y | x <- [1..3] , y <- [5,7,11]]\nfromList [5,7,10,11,14,15,21,22,33]\n```\n\n---\n\n```Haskell\n> fromList [x*y | x <- [1..3] , y <- [2..4], x /= y]\nfromList [2,3,4,6,8,12]\n```\n\n### \u8ab2\u984c 0.5.8\n\n```Haskell\n> fromList [x*y | x <- [2,4,8] , y <- [3,6,12]]\nfromList [6,12,24,48,96]\n```\n\n### \u8ab2\u984c 0.5.9\n\n```Haskell\n> [x | x <- [1,2,3,4] , y <- [3,4,5,6], x == y ]\n[3,4]\n```\n\n# 0.5.5 \u30ea\u30b9\u30c8\n\n```haskell\n> [1,1+1,3,2,3]\n[1,2,3,2,3]\n```\n\n---\nHaskell\u306e\u30ea\u30b9\u30c8\u306e\u8981\u7d20\u306b\u306f\u5236\u9650\u304c\u3042\u308b\u306e\u3067Hlist\u3068\u304b\u4f7f\u3046\u304b\u3001\u578b\u3092\u7528\u610f\u3059\u308b\u304b\u3057\u306a\u3044\u3068\u3044\u3051\u306a\u3044\u3002\n\n---\n\n```Haskell\n> sum [1,1,0,1,0,1,0]\n4\n> foldl (+) (-9) [1,1,0,1,0,1,0]\n-5\n```\n\nHaskell\u306esum\u306b\u7b2c2\u5f15\u6570\u306f\u306a\u3044\u306e\u3067foldl\u3067\u304b\u3044\u3066\u307f\u305f\n\n# 0.5.10 \u8a55\u4fa1\u3057\u305f\u5024\u304b\u3099\u30ea\u30b9\u30c8 [20,10,15,75] \u306e\u8981\u7d20\u306e\u5e73\u5747\u3068\u306a\u308b\u5f0f\u3092\u66f8\u3051\u3002\n\n```haskell\n> (\\xs -> sum xs / (fromIntegral . length $ xs)) [20,10,15,75]\n30.0\n```\n\n\u6c42\u3081\u308b\u7d50\u679c\u304c\u6d6e\u52d5\u5c0f\u6570\u306b\u306a\u308b\u3088\u3046\u306b fromIntegral\u3092\u3064\u304b\u3063\u3066\u3044\u307e\u3059\u3002\n\n## \u30ea\u30b9\u30c8\u306e\u7d50\u5408\n\n`++` \u3067\u7d50\u5408\u53ef\u80fd\u3060\u3051\u3069\u3001\u52b9\u7387\u306f\u3044\u307e\u3044\u3061\n\n```\n> [1,2,3] ++ [4,5]\n[1,2,3,4,5]\n> let mylist = [4,8,12]\n> mylist ++ [4,5]\n[4,8,12,4,5]\n> mylist\n[4,8,12]\n```\n\n```\n> [[1,2,3], [4,5,6],[7,8,9]]\n```\n\n\u6587\u5b57\u5217\u3068\u6570\u5024\u304c\u6df7\u3056\u3063\u305f\u30ea\u30b9\u30c8\u306f\u3064\u304f\u308c\u306a\u3044\u306e\u3067\u6570\u5b57\u3060\u3051\u306b\u3057\u305f\u3002\n\n---\n\n\u3059\u3079\u3066\u306e\u30ea\u30b9\u30c8\u3092\u7d50\u5408\u3059\u308b\u306e\u306fsum\u3067\u306f\u3067\u304d\u306a\u3044\u306e\u3067foldMap\u3092\u3064\u304b\u3063\u305f\u3002\n\n```\n> foldMap id [[1,2,3], [4,5,6],[7,8,9]]\n[1,2,3,4,5,6,7,8,9]\n```\n## \u30ea\u30b9\u30c8\u306e\u5185\u5305\u8868\u8a18\n\n```\n> [2*x | x <- [2,1,3,4,5]]\n[4,2,6,8,10]\n```\n\n```\n>  [x*y | x <- [1,2,3] ,y <- [10,20,30]]\n[10,20,30,20,40,60,30,60,90]\n```\n\n### \u8ab2\u984c 0.5.11: \u30ea\u30b9\u30c8 [\u2019A\u2019,\u2019B\u2019,\u2019C\u2019] \u53ca\u3072\u3099 [1,2,3] \u306b\u5bfe\u3059\u308b\u30ea\u30b9\u30c8\u5185\u5305\u8868\u8a18\u3066\u3099\u3001\u305d\u306e\u5024\u304b\u3099 [\u6587 \u5b57, \u6570\u5b57] \u306e\u5168\u3066\u306e\u53ef\u80fd\u306a\u7d44\u307f\u5408\u308f\u305b\u304b\u3089\u6210\u308b\u3082\u306e\u3092\u66f8\u3051\u3002\u5373\u3061\u3001\u305d\u306e\u5024\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u3082\u306e\u3066\u3099\u3042\u308b\u3002\n\n[[\u2019A\u2019, 1], [\u2019A\u2019, 2], [\u2019A\u2019, 3], [\u2019B\u2019, 1], [\u2019B\u2019, 2],[\u2019B\u2019, 3],\n  [\u2019C\u2019, 1], [\u2019C\u2019, 2], [\u2019C\u2019, 3]]\n\n```\n> [(x,y) | x <- ['A', 'B', 'C'], y <- [1,2,3]]\n[('A',1),('A',2),('A',3),('B',1),('B',2),('B',3),('C',1),('C',2),('C',3)]\n```\n\n### \u8ab2\u984c 0.5.12: LofL \u306b\u6570\u5b57\u306e\u30ea\u30b9\u30c8\u3092\u8981\u7d20\u306b\u6301\u3064\u30ea\u30b9\u30c8\u3092\u4ee3\u5165\u3057\u305f\u3068\u3057\u3088\u3046\u3002\u3053\u306e\u3068\u304d\u3001\u305d\u306e\u30ea\u30b9 \u30c8\u5168\u3066\u306e\u6570\u5024\u5168\u90e8\u3092\u8db3\u3057\u305f\u5408\u8a08\u3092\u8a08\u7b97\u3059\u308b\u5f0f\u3092\u66f8\u3051\u3002\u3053\u306e\u5f0f\u306f\u6b21\u306e\u5f62\u3092\u6301\u3061\u3001\u5185\u5305\u8868\u8a18\u3092 1 \u3064\u6301\u3064\n\n```\n> (\\lofl -> sum [sum x| x <- lofl]) [[0.25, 0.75, 0.1], [-1,0], [4,4,4,4]]\n16.1\n```\n\n### \u30a4\u30f3\u30c6\u3099\u30c3\u30af\u30b9\u6307\u5b9a\u306b\u3088\u308b\u30ea\u30b9\u30c8\u306e\u8981\u7d20\u306e\u53d6\u5f97\n\n```\n> let mylist = [1..4]\n> mylist !! 0\n1\n> [\"in\", \"the\", \"CI\"] !! 1\n\"the\"\n```\n\n```\n> let l = [0,10..90]\n> take 5 l\n[0,10,20,30,40]\n> drop 5 l\n[50,60,70,80,90]\n> map fst . filter (even . snd) $ zip l [0..]\n[0,20,40,60,80]\n> map fst . filter (odd . snd) $ zip l [0..]\n[10,30,50,70,90]\n```\n\n\u30b9\u30e9\u30a4\u30b9\u3059\u308b\u3044\u3044\u65b9\u6cd5\u304c\u304a\u3082\u3044\u3046\u304b\u3070\u305a\u3002\n\n### \u30a2\u30f3\u30cf\u309a\u30c3\u30af\u306b\u3088\u308b\u30ea\u30b9\u30c8\u306e\u8981\u7d20\u306e\u53d6\u5f97\n\n\u30d1\u30bf\u30fc\u30f3\u30de\u30c3\u30c1\u3067\u4ee3\u7528\n\n```\n>  case [4*1, 4*2, 4*3] of [a,b,c] -> print a >> print b >> print c\n4\n8\n12\n```\n\n# \u30ea\u30b9\u30c8\u306e\u5909\u66f4: =\u306e\u5de6\u8fba\u3066\u3099\u306e\u30a4\u30f3\u30c6\u3099\u30c3\u30af\u30b9\u6307\u5b9a\n\nHaskell\u3067\u306f\u539f\u5247\u30ea\u30b9\u30c8\u306e\u5909\u66f4\u306f\u3067\u304d\u306a\u3044\u3002\n\u518d\u751f\u6210\u3059\u308b\u3057\u304b\u306a\u3044\u304c\u52b9\u7387\u306f\u5fae\u5999\u306a\u306e\u3067\u3001\u3053\u3053\u3067\u306f\u304a\u3044\u3066\u304a\u304f\u3002\n\n# 0.5.6 \u30bf\u30d7\u30eb\n\n```Haskell\n> (1, 1+1, 3)\n(1, 2, 3)\n```\n\nTBD\n\n\n# 1.2 Python\u306b\u304a\u3051\u308b\u8907\u7d20\u6570\n\nHaskell\u3067\u8907\u7d20\u6570\u3092\u3064\u304b\u3046\u306b\u306f Data.Complex\u3092import\u3059\u308b\u3002\nhttps://hackage.haskell.org/package/base-4.9.0.0/docs/Data-Complex.html\n\n```Haskell\n> import Data.Complex\n> 0 :+ 3      -- 3j\n> (0 :+ 3) * (0 :+ 3)\n(-9.0) :+ 0.0\n```\n\n```Haskell\n> import Data.Complex\n> 1 :+ 3\n```\n\n```Haskell\n> import Data.Complex\n> (1 :+ 3) + (10 :+ 20)\n11.0 :+ 23.0\n> x = 1 :+ 3\n> (x-1) ^ 2\n(-9.0) :+ 0.0\n```\n\nHaskell\u306e\u7d2f\u4e57\u8a08\u7b97\u306e\u6f14\u7b97\u5b50\u306f `^` \u3068 `**` \u304c\u3042\u308b\n`^`\u304c\u6574\u6570\u8981\u3067\u3001`**`\u304c\u6d6e\u52d5\u5c0f\u6570\u70b9\u8981\u3067\u3042\u308b\n\n`:+`\u3068`+`\u306e\u512a\u5148\u9806\u4f4d\u306f\u540c\u3058\u306a\u306e\u3067\u3001\u6ce8\u610f\n---\n\n```\n> 1 :+ 2 * 3\n1 :+ 6\n```\n\n```\n> 4*(0:+3)^^2\n(-36.0) :+ 0.0\n```\n\n`0:+`\u3068\u304b\u304f\u306e\u304c\u3059\u3053\u3057\u3081\u3093\u3069\u304f\u3055\u3044\n---\n\n\u5b9f\u90e8\u3068\u865a\u90e8\u306e\u3068\u308a\u3060\u3057\n\n```\n> realPart (1 :+ 3)\n1\n> imagePart (1 :+ 3)\n3\n```\n---\n\n\u578b\u306e\u78ba\u8a8d\n\n```\n> :t (1:+2)\n(1:+2) :: Num a => Complex a\n```\n", "tags": ["\u7dda\u5f62\u4ee3\u6570", "Haskell"]}