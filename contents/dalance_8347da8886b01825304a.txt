{"context": "\n\n\u306f\u3058\u3081\u306b\n\u3053\u306e\u8a18\u4e8b\u3067\u306f\u3001C\u306e\u69cb\u9020\u4f53\u306b\u304a\u3051\u308b\u3044\u308f\u3086\u308bZero-length Array / Flexible Array Member(\u3053\u306e\u30a4\u30c7\u30a3\u30aa\u30e0\u81ea\u4f53\u77e5\u3089\u306a\u304b\u3063\u305f\u308f\u3051\u3067\u3059\u304c)\u3092Rust\u306eFFI\u304b\u3089\u6271\u3046\u969b\u306bstd::mem::transmute\u3092\u4f7f\u3063\u3066\u5f37\u5f15\u306b\u30ad\u30e3\u30b9\u30c8\u3057\u3066\u3044\u307e\u3057\u305f\u3002\u305d\u306e\u5f8c\u3044\u308d\u3044\u308d\u8a66\u3057\u305f\u3068\u3053\u308d\u3001\u7279\u306btransmute\u304c\u5fc5\u9808\u3068\u3044\u3046\u308f\u3051\u3067\u3082\u306a\u304b\u3063\u305f\u3001\u3068\u3044\u3046\u3053\u3068\u304c\u5206\u304b\u308a\u307e\u3057\u305f\u306e\u3067\u3001\u73fe\u6642\u70b9\u3067\u59a5\u5f53\u3068\u601d\u3046\u3084\u308a\u65b9\u3092\u66f8\u3044\u3066\u304a\u304d\u307e\u3059\u3002\n\uff08\u3082\u3063\u3068\u3044\u3044\u3084\u308a\u65b9\u304c\u3042\u308a\u307e\u3057\u305f\u3089\u304a\u6559\u3048\u304f\u3060\u3055\u3044\uff09\n\nZero-length Array / Flexible Array Member\n\u3053\u306e\u8a18\u4e8b\u3067\u6271\u3046\u306e\u306f\u3001\u4ee5\u4e0b\u306e\u3088\u3046\u306aC\u306e\u69cb\u9020\u4f53\u3092Rust\u306eFFI\u3067\u3069\u3046\u6271\u3046\u304b\u3001\u3067\u3059\u3002\nstruct line {\n    int length;\n    char contents[0];\n};\n\n// \u4ee5\u4e0b\u306fC99\u306eFlexible Array Member\u3092\u4f7f\u3063\u305f\u5834\u5408\nstruct line {\n    int length;\n    char contents[];\n};\n\n\u69cb\u9020\u4f53\u4e2d\u3067\u53ef\u5909\u9577\u306e\u914d\u5217\u3092\u8868\u73fe\u3057\u305f\u3044\u5834\u5408\u3001\u666e\u901a\u306f\u914d\u5217\u3078\u306e\u30dd\u30a4\u30f3\u30bf\u306b\u3059\u308b\u3068\u601d\u3044\u307e\u3059\u304c\u3001\u69cb\u9020\u4f53\u306e\u672b\u5c3e\u306b\u53ef\u5909\u9577\u914d\u5217\u305d\u306e\u3082\u306e\u3092\u5165\u308c\u3066\u3057\u307e\u3046\u3068\u3044\u3046\u3053\u3068\u304c\u3001\u3088\u304f\u884c\u308f\u308c\u308b\u3088\u3046\u3067\u3059\u3002\u3053\u306e\u3068\u304d\u3001\u69cb\u9020\u4f53\u5b9a\u7fa9\u4e0a\u306f\u914d\u5217\u306e\u9577\u3055\u306f\u5206\u304b\u3089\u306a\u3044\u306e\u3067\u4f55\u3089\u304b\u306e\u56fa\u5b9a\u5024\u306b\u3057\u3066\u304a\u3044\u3066\u3001\u5b9f\u969b\u306e\u9577\u3055\u306f\u5225\u9014\u69cb\u9020\u4f53\u30e1\u30f3\u30d0\u3067\u6307\u5b9a\u3057\u307e\u3059\u3002\u3053\u306e\u4eee\u306e\u56fa\u5b9a\u5024\u306f0\u3067\u3082\u3088\u304f\u3066\u3001\u3053\u308c\u304cZero-length Array\u3068\u3044\u3046\u3053\u3068\u306e\u3088\u3046\u3067\u3059\u3002\n\u307e\u305f\u3001C99\u3067\u306fFlexible Array Member\u3068\u3057\u3066\u6a19\u6e96\u5316\u3055\u308c\u305f\u3088\u3046\u3067\u3059\u3002\n\nRust\u3067\u306estruct\u5b9a\u7fa9\nstruct\u306e\u5b9a\u7fa9\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u611f\u3058\u304c\u826f\u3055\u305d\u3046\u3067\u3059\u3002\u914d\u5217\u30b5\u30a4\u30ba\u30920\u3068\u3059\u308b\u5834\u5408\u306fZero Sized Types (ZSTs)\u3068\u3044\u3046\u3053\u3068\u306b\u306a\u3063\u3066\u554f\u984c\u306a\u3044\u3088\u3046\u3067\u3059\u3002\n#[repr(C)]\npub struct line {\n    pub length: c_int,\n    pub content: [c_char;0],\n}\n\n// \u3042\u308b\u3044\u306f\n#[repr(C)]\npub struct line {\n    pub length: c_int,\n    pub content: [u8;0],\n}\n\n\u610f\u5473\u7684\u306b\u306f\u7d20\u76f4\u306b\u53ef\u5909\u9577\u914d\u5217\u3068\u3057\u3066Dynamically Sized Types (DSTs)\u3092\u4f7f\u3044\u305f\u3044\u3068\u3053\u308d\u3067\u3059\u304c\u3001struct\u5168\u4f53\u304cUnsized\u306b\u306a\u3063\u3066\u3057\u307e\u3046\u3001DST\u306e\u30e1\u30e2\u30ea\u30ec\u30a4\u30a2\u30a6\u30c8\u3068Zero-length Array\u306e\u305d\u308c\u304c\u4e00\u81f4\u3059\u308b\u4fdd\u8a3c\u304c\u306a\u3055\u305d\u3046\u3001\u3068\u3044\u3046\u3053\u3068\u3067\u73fe\u6642\u70b9\u3067\u306f\u4f7f\u3048\u306a\u3055\u305d\u3046\u3067\u3059\u3002\u3053\u3061\u3089\u306b\u3082#[repr(C)]\u306b\u304a\u3051\u308bDST\u306f\u4f7f\u3048\u306a\u3055\u305d\u3046\u306b\u66f8\u3044\u3066\u3042\u308a\u307e\u3059\u3002\n\u307e\u305f\u3001C\u306echar\u306flibc\u30af\u30ec\u30fc\u30c8\u3067\u306fi8\u3068\u306a\u3063\u3066\u3044\u307e\u3059\u304c\u3001Rust\u306e\u6587\u5b57\u5217\u306fu8\u304c\u30d9\u30fc\u30b9\u306b\u306a\u3063\u3066\u3044\u308b\u306e\u3067pub content: [u8;0]\u3068\u3059\u308b\u3068\u3044\u3046\u3053\u3068\u3082\u3067\u304d\u307e\u3059\u3002\u82e5\u5e72\u6c17\u6301\u3061\u60aa\u3044\u3067\u3059\u304c\u3001\u3053\u3053\u3067c_char(\u3059\u306a\u308f\u3061i8)\u3068\u3057\u3066\u3057\u307e\u3046\u3068\u5f8c\u3067Rust\u306e\u6587\u5b57\u5217\u306b\u5909\u63db\u3059\u308b\u969b\u306btransmute\u304c\u5fc5\u8981\u306b\u306a\u3063\u3066\u3057\u307e\u3044\u307e\u3059\u3002\n\n\u69cb\u9020\u4f53\u30e1\u30f3\u30d0\u3078\u306e\u30a2\u30af\u30bb\u30b9\n\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u30b9\u30e9\u30a4\u30b9\u3092\u4f5c\u3063\u3066\u3084\u308c\u3070\u30a2\u30af\u30bb\u30b9\u51fa\u6765\u307e\u3059\u3002\nstruct\u5b9a\u7fa9\u3067pub content: [c_char;0]\u3068\u3057\u305f\u5834\u5408\u3001c_char\u304ci8\u306a\u306e\u3067\u5909\u63db\u306b\u306ftransmute\u304c\u5fc5\u8981\u306b\u306a\u308a\u307e\u3059\u3002\nlet line: *const line = ...\nlet len = unsafe { (*line).length as usize };\nlet ptr = unsafe { std::mem::transmute::<&[c_char;0], *const u8>( (*line).content ) };\nlet slice = unsafe { std::slice::from_raw_parts( ptr, len ) };\n\npub content: [u8;0]\u306e\u5834\u5408\u3001\u578b\u5909\u63db\u306f&[u8;0]\u304b\u3089*const u8\u3067\u3059\u304c\u3001\u3053\u308c\u306fas\u3067\u5909\u63db\u51fa\u6765\u307e\u3059\u3002\nlet line: *const line = ...\nlet len = unsafe { (*line).length as usize };\nlet ptr = unsafe { (*line).content as *const u8 };\nlet slice = unsafe { std::slice::from_raw_parts( ptr, len ) };\n\n\u3053\u306e2\u3064\u306e\u3069\u3061\u3089\u304c\u3044\u3044\u304b\u306f\u3088\u304f\u5206\u304b\u308a\u307e\u305b\u3093\u3002\u7d50\u5c40C\u306echar\u304c8bit\u3067\u306a\u304b\u3063\u305f\u6642\u70b9\u3067\u3001\u6700\u7d42\u7684\u306bslice::from_raw_parts(\u3042\u308b\u3044\u306f\u3053\u306e\u5f8c\u6587\u5b57\u5217\u306b\u5909\u63db\u3059\u308b\u90e8\u5206)\u3067\u306f\u304a\u304b\u3057\u304f\u306a\u308b\u308f\u3051\u3067\u3001\u500b\u4eba\u7684\u306b\u306f\u898b\u305f\u76ee\u91cd\u8996\u3067transmute\u304c\u306a\u3044\u5f8c\u8005\u304b\u306a\u3041\u3068\u601d\u3044\u307e\u3059\u3002\n# \u306f\u3058\u3081\u306b\n[\u3053\u306e\u8a18\u4e8b]()\u3067\u306f\u3001C\u306e\u69cb\u9020\u4f53\u306b\u304a\u3051\u308b\u3044\u308f\u3086\u308bZero-length Array / Flexible Array Member(\u3053\u306e\u30a4\u30c7\u30a3\u30aa\u30e0\u81ea\u4f53\u77e5\u3089\u306a\u304b\u3063\u305f\u308f\u3051\u3067\u3059\u304c)\u3092Rust\u306eFFI\u304b\u3089\u6271\u3046\u969b\u306b`std::mem::transmute`\u3092\u4f7f\u3063\u3066\u5f37\u5f15\u306b\u30ad\u30e3\u30b9\u30c8\u3057\u3066\u3044\u307e\u3057\u305f\u3002\u305d\u306e\u5f8c\u3044\u308d\u3044\u308d\u8a66\u3057\u305f\u3068\u3053\u308d\u3001\u7279\u306b`transmute`\u304c\u5fc5\u9808\u3068\u3044\u3046\u308f\u3051\u3067\u3082\u306a\u304b\u3063\u305f\u3001\u3068\u3044\u3046\u3053\u3068\u304c\u5206\u304b\u308a\u307e\u3057\u305f\u306e\u3067\u3001\u73fe\u6642\u70b9\u3067\u59a5\u5f53\u3068\u601d\u3046\u3084\u308a\u65b9\u3092\u66f8\u3044\u3066\u304a\u304d\u307e\u3059\u3002\n\uff08\u3082\u3063\u3068\u3044\u3044\u3084\u308a\u65b9\u304c\u3042\u308a\u307e\u3057\u305f\u3089\u304a\u6559\u3048\u304f\u3060\u3055\u3044\uff09\n\n# Zero-length Array / Flexible Array Member\n\u3053\u306e\u8a18\u4e8b\u3067\u6271\u3046\u306e\u306f\u3001\u4ee5\u4e0b\u306e\u3088\u3046\u306aC\u306e\u69cb\u9020\u4f53\u3092Rust\u306eFFI\u3067\u3069\u3046\u6271\u3046\u304b\u3001\u3067\u3059\u3002\n\n```c\nstruct line {\n    int length;\n    char contents[0];\n};\n\n// \u4ee5\u4e0b\u306fC99\u306eFlexible Array Member\u3092\u4f7f\u3063\u305f\u5834\u5408\nstruct line {\n    int length;\n    char contents[];\n};\n```\n\n\u69cb\u9020\u4f53\u4e2d\u3067\u53ef\u5909\u9577\u306e\u914d\u5217\u3092\u8868\u73fe\u3057\u305f\u3044\u5834\u5408\u3001\u666e\u901a\u306f\u914d\u5217\u3078\u306e\u30dd\u30a4\u30f3\u30bf\u306b\u3059\u308b\u3068\u601d\u3044\u307e\u3059\u304c\u3001\u69cb\u9020\u4f53\u306e\u672b\u5c3e\u306b\u53ef\u5909\u9577\u914d\u5217\u305d\u306e\u3082\u306e\u3092\u5165\u308c\u3066\u3057\u307e\u3046\u3068\u3044\u3046\u3053\u3068\u304c\u3001\u3088\u304f\u884c\u308f\u308c\u308b\u3088\u3046\u3067\u3059\u3002\u3053\u306e\u3068\u304d\u3001\u69cb\u9020\u4f53\u5b9a\u7fa9\u4e0a\u306f\u914d\u5217\u306e\u9577\u3055\u306f\u5206\u304b\u3089\u306a\u3044\u306e\u3067\u4f55\u3089\u304b\u306e\u56fa\u5b9a\u5024\u306b\u3057\u3066\u304a\u3044\u3066\u3001\u5b9f\u969b\u306e\u9577\u3055\u306f\u5225\u9014\u69cb\u9020\u4f53\u30e1\u30f3\u30d0\u3067\u6307\u5b9a\u3057\u307e\u3059\u3002\u3053\u306e\u4eee\u306e\u56fa\u5b9a\u5024\u306f0\u3067\u3082\u3088\u304f\u3066\u3001\u3053\u308c\u304cZero-length Array\u3068\u3044\u3046\u3053\u3068\u306e\u3088\u3046\u3067\u3059\u3002\n\u307e\u305f\u3001C99\u3067\u306fFlexible Array Member\u3068\u3057\u3066\u6a19\u6e96\u5316\u3055\u308c\u305f\u3088\u3046\u3067\u3059\u3002\n\n# Rust\u3067\u306e`struct`\u5b9a\u7fa9\n`struct`\u306e\u5b9a\u7fa9\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u611f\u3058\u304c\u826f\u3055\u305d\u3046\u3067\u3059\u3002\u914d\u5217\u30b5\u30a4\u30ba\u30920\u3068\u3059\u308b\u5834\u5408\u306f[Zero Sized Types (ZSTs)](https://doc.rust-lang.org/nomicon/exotic-sizes.html#zero-sized-types-zsts)\u3068\u3044\u3046\u3053\u3068\u306b\u306a\u3063\u3066\u554f\u984c\u306a\u3044\u3088\u3046\u3067\u3059\u3002\n\n```rust\n#[repr(C)]\npub struct line {\n    pub length: c_int,\n    pub content: [c_char;0],\n}\n\n// \u3042\u308b\u3044\u306f\n#[repr(C)]\npub struct line {\n    pub length: c_int,\n    pub content: [u8;0],\n}\n```\n\n\u610f\u5473\u7684\u306b\u306f\u7d20\u76f4\u306b\u53ef\u5909\u9577\u914d\u5217\u3068\u3057\u3066[Dynamically Sized Types (DSTs)](https://doc.rust-lang.org/nomicon/exotic-sizes.html#dynamically-sized-types-dsts)\u3092\u4f7f\u3044\u305f\u3044\u3068\u3053\u308d\u3067\u3059\u304c\u3001`struct`\u5168\u4f53\u304cUnsized\u306b\u306a\u3063\u3066\u3057\u307e\u3046\u3001DST\u306e\u30e1\u30e2\u30ea\u30ec\u30a4\u30a2\u30a6\u30c8\u3068Zero-length Array\u306e\u305d\u308c\u304c\u4e00\u81f4\u3059\u308b\u4fdd\u8a3c\u304c\u306a\u3055\u305d\u3046\u3001\u3068\u3044\u3046\u3053\u3068\u3067\u73fe\u6642\u70b9\u3067\u306f\u4f7f\u3048\u306a\u3055\u305d\u3046\u3067\u3059\u3002[\u3053\u3061\u3089](https://doc.rust-lang.org/nomicon/other-reprs.html#reprc)\u306b\u3082`#[repr(C)]`\u306b\u304a\u3051\u308bDST\u306f\u4f7f\u3048\u306a\u3055\u305d\u3046\u306b\u66f8\u3044\u3066\u3042\u308a\u307e\u3059\u3002\n\n\u307e\u305f\u3001C\u306e`char`\u306flibc\u30af\u30ec\u30fc\u30c8\u3067\u306f`i8`\u3068\u306a\u3063\u3066\u3044\u307e\u3059\u304c\u3001Rust\u306e\u6587\u5b57\u5217\u306f`u8`\u304c\u30d9\u30fc\u30b9\u306b\u306a\u3063\u3066\u3044\u308b\u306e\u3067`pub content: [u8;0]`\u3068\u3059\u308b\u3068\u3044\u3046\u3053\u3068\u3082\u3067\u304d\u307e\u3059\u3002\u82e5\u5e72\u6c17\u6301\u3061\u60aa\u3044\u3067\u3059\u304c\u3001\u3053\u3053\u3067`c_char`(\u3059\u306a\u308f\u3061`i8`)\u3068\u3057\u3066\u3057\u307e\u3046\u3068\u5f8c\u3067Rust\u306e\u6587\u5b57\u5217\u306b\u5909\u63db\u3059\u308b\u969b\u306b`transmute`\u304c\u5fc5\u8981\u306b\u306a\u3063\u3066\u3057\u307e\u3044\u307e\u3059\u3002\n\n# \u69cb\u9020\u4f53\u30e1\u30f3\u30d0\u3078\u306e\u30a2\u30af\u30bb\u30b9\n\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u30b9\u30e9\u30a4\u30b9\u3092\u4f5c\u3063\u3066\u3084\u308c\u3070\u30a2\u30af\u30bb\u30b9\u51fa\u6765\u307e\u3059\u3002\n\n`struct`\u5b9a\u7fa9\u3067`pub content: [c_char;0]`\u3068\u3057\u305f\u5834\u5408\u3001`c_char`\u304c`i8`\u306a\u306e\u3067\u5909\u63db\u306b\u306f`transmute`\u304c\u5fc5\u8981\u306b\u306a\u308a\u307e\u3059\u3002\n\n```rust\nlet line: *const line = ...\nlet len = unsafe { (*line).length as usize };\nlet ptr = unsafe { std::mem::transmute::<&[c_char;0], *const u8>( (*line).content ) };\nlet slice = unsafe { std::slice::from_raw_parts( ptr, len ) };\n```\n\n`pub content: [u8;0]`\u306e\u5834\u5408\u3001\u578b\u5909\u63db\u306f`&[u8;0]`\u304b\u3089`*const u8`\u3067\u3059\u304c\u3001\u3053\u308c\u306f`as`\u3067\u5909\u63db\u51fa\u6765\u307e\u3059\u3002\n\n```rust\nlet line: *const line = ...\nlet len = unsafe { (*line).length as usize };\nlet ptr = unsafe { (*line).content as *const u8 };\nlet slice = unsafe { std::slice::from_raw_parts( ptr, len ) };\n```\n\n\u3053\u306e2\u3064\u306e\u3069\u3061\u3089\u304c\u3044\u3044\u304b\u306f\u3088\u304f\u5206\u304b\u308a\u307e\u305b\u3093\u3002\u7d50\u5c40C\u306echar\u304c8bit\u3067\u306a\u304b\u3063\u305f\u6642\u70b9\u3067\u3001\u6700\u7d42\u7684\u306b`slice::from_raw_parts`(\u3042\u308b\u3044\u306f\u3053\u306e\u5f8c\u6587\u5b57\u5217\u306b\u5909\u63db\u3059\u308b\u90e8\u5206)\u3067\u306f\u304a\u304b\u3057\u304f\u306a\u308b\u308f\u3051\u3067\u3001\u500b\u4eba\u7684\u306b\u306f\u898b\u305f\u76ee\u91cd\u8996\u3067`transmute`\u304c\u306a\u3044\u5f8c\u8005\u304b\u306a\u3041\u3068\u601d\u3044\u307e\u3059\u3002\n", "tags": ["rust", "ffi"]}