{"context": " More than 1 year has passed since last update.\n\n\u76ee\u7684\n\n\u72ec\u81ea\u8a00\u8a9e\u3092\u4f5c\u308a\u305f\u3044\n\u5b9f\u884c\u53ef\u80fd\u30b3\u30fc\u30c9\u306e\u751f\u6210\u306fLLVM\u306b\u307e\u304b\u305b\u305f\u3044\nWindows\u3067\u958b\u767a\u3057\u305f\u3044(Visual Studio\u3092\u4f7f\u3044\u305f\u3044)\n\n\u72ec\u81ea\u30d5\u30ed\u30f3\u30c8\u30a8\u30f3\u30c9\u304b\u3089LLVM IR\u3092\u51fa\u529b\u3057\u3001\u3042\u3068\u306f\u3059\u3079\u3066LLVM\u306b\u4efb\u305b\u308b\u3002\n\n\u7528\u610f\u3059\u308b\u7269\n\nVisual Studio Express 2013\nPython(CMake\u304c\u5fc5\u8981\u3068\u3059\u308b)\nCMake\n\n\nllvm\u306e\u30d3\u30eb\u30c9\nllvm-x.x.x-src \u3092\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3057\u9069\u5f53\u306b\u5c55\u958b\u3059\u308b\u3002\nCMake GUI\u3092\u8d77\u52d5\n\u8a2d\u5b9a\u4f8b:\nSource path: D:/tmp/llvm-3.5.0.src\nBuild path: D:/tmp/llvm-3.5.0.build\nEntry\nCMAKE_INSTALL_PREFIX: D:/sdk/llvm-3.5.0\n\nCMAKE_INSTALL_PREFIX \u306b\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u5148\u3092\u8a2d\u5b9a\u3059\u308b\u3002\u30c7\u30d5\u30a9\u30eb\u30c8\u3067\u306f\"C:\\Program Files\uff5e\"\u304c\u9078\u3070\u308c\u308b\u306e\u3067\u3001\u5225\u306e\u5834\u6240\u306b\u3057\u305f\u307b\u3046\u304c\u3088\u3044\u3002\nConfigure\u3057\u3066\u554f\u984c\u306a\u3051\u308c\u3070\u3001Generate\u3057\u3001\"Visual Studio 12 2013\", \"Use default compilers\"\u3092\u9078\u629e\u3057\u3001Ok\u3002\nLLVM.sln \u304c\u3067\u304d\u3066\u3044\u308b\u306e\u3067\u3001CMakePredefinedTargets/INSTALL\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u3092\u30d3\u30eb\u30c9\u3059\u308b\u3002\n\u6210\u529f\u3057\u305f\u3089\u3001\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u5148\u306blib\u3084include\u306a\u3069\u304c\u3067\u304d\u3066\u3044\u308b\u3002\n\nlld\u306e\u30d3\u30eb\u30c9\n\u3055\u304f\u3063\u3068\u30d3\u30eb\u30c9\u3067\u304d\u306a\u3044\u306e\u3067\u3001Windows\u5411\u3051\u306eclang\u3092\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3057\u3066lld\u3060\u3051\u6301\u3063\u3066\u304d\u305f\u307b\u3046\u304c\u697d\nlld-x.x.x-src \u3092\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3057\u3066\u3001llvm\u3068\u540c\u3058\u3088\u3046\u306bCMake\u3059\u308b\u3002\n\u8a2d\u5b9a\u4f8b:\nSource path: D:/tmp/lld-3.5.0.src\nBuild path: D:/tmp/lld-3.5.0.build\nEntry\nCMAKE_INSTALL_PREFIX: D:/sdk/lld-3.5.0\nLLD_PATH_TO_LLVM_BUILD: D:/sdk/llvm-3.5.0\n\n\u3053\u308c\u3060\u3051\u3067\u5341\u5206\u306a\u69d8\u306a\u6c17\u304c\u3059\u308b\u304c\u3001\u8272\u3005\u554f\u984c\u304c\u767a\u751f\u3059\u308b\u3002\n(lld src)/lib/ReaderWriter/ELF/CMakeLists.txt \u3092\u4fee\u6b63\u3059\u308b\u3002\nforeach\u5185\u3067\u30b5\u30d6\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u3092\u8ffd\u52a0\u3057\u3066\u3044\u308b\u304c\u3001\u6a5f\u80fd\u3057\u3066\u3044\u306a\u3044\u3002\nif\u6587\u5185\u306b\u3042\u308b\n//CMakeLists.txt\n\u3068\u3044\u3046\u6587\u5b57\u5217\u3092\n/CMakeLists.txt\n\u306b\u76f4\u3059\u3002\u30b9\u30e9\u30c3\u30b7\u30e5\u304c\u591a\u3044\u3002\uff12\u30ab\u6240\u3042\u308b\u3002\nCMake Error at D:/sdk/llvm-3.5.0/share/llvm/cmake/TableGen.cmake:13 (message):\n  LLVM_MAIN_SRC_DIR not set\n\nLLVM_MAIN_SRC_DIR\u304c\u8a2d\u5b9a\u3055\u308c\u3066\u3044\u306a\u3044\u3068\u8a00\u308f\u308c\u308b\u3002Description\u304c\u8868\u793a\u3055\u308c\u306a\u3044\u305f\u3081\u8a73\u7d30\u4e0d\u660e\u3060\u304c\u3001\u3068\u308a\u3042\u3048\u305a\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3055\u308c\u305fLLVM\u306e\u30d1\u30b9\u3092\u8a2d\u5b9a\u3059\u308c\u3070\u3046\u307e\u304f\u3044\u3063\u305f\u3002\n\u4f8b:\nLLVM_MAIN_SRC_DIR: D:/sdk/llvm-3.5.0\nCMake Error at D:/sdk/llvm-3.5.0/share/llvm/cmake/AddLLVM.cmake:443 (set_output_directory):\n  set_output_directory Function invoked with incorrect arguments for function\n  named: set_output_directory\n\n\u95a2\u6570\u306e\u5f15\u6570\u304c\u4e0d\u6b63\u3067\u3059\u3068\u304b\u8a33\u308f\u304b\u3089\u3093\u72b6\u614b\u3067\u3059\u304c\u30fb\u30fb\u30fb\n\u3053\u3053\u306b\u3088\u308b\u3068\u4f55\u304b\u30d0\u30b0\u3063\u307d\u3044\u306e\u3067\n(llvm install)/share/llvm/cmake/AddLLVM.cmake\nLLVM_RUNTIME_OUTPUT_INTDIR\u3092\u4f7f\u3063\u3066\u3044\u308b\u3068\u3053\u308d\uff08\uff12\u30ab\u6240\uff09\u306e\u524d\u306b\nset(LLVM_RUNTIME_OUTPUT_INTDIR ${CMAKE_BINARY_DIR}/${CMAKE_CFG_INTDIR}/bin)\nset(LLVM_LIBRARY_OUTPUT_INTDIR ${CMAKE_BINARY_DIR}/${CMAKE_CFG_INTDIR}/lib)\n\n\u3092\u8ffd\u52a0\nCMake Error at D:/sdk/llvm-3.5.0/share/llvm/cmake/AddLLVM.cmake:623 (string):\n  string sub-command REPLACE requires at least four arguments.\n\n\u307e\u3063\u305f\u304f\u308f\u3051\u304c\u308f\u304b\u3089\u306a\u3044\u304c\u3001LLVM_LIBRARY_DIR\u304c\u672a\u5b9a\u7fa9\u306e\u3088\u3046\u306b\u898b\u3048\u308b\u3002\u8a66\u3057\u306bLLVM_BINARY_DIR\u306b\u7f6e\u304d\u63db\u3048\u3002\n  set(LLVM_SOURCE_DIR ${LLVM_MAIN_SRC_DIR})\n  set(LLVM_BINARY_DIR ${LLVM_BINARY_DIR})\n  string(REPLACE ${CMAKE_CFG_INTDIR} ${LLVM_BUILD_MODE} LLVM_TOOLS_DIR ${LLVM_TOOLS_BINARY_DIR})\n  string(REPLACE ${CMAKE_CFG_INTDIR} ${LLVM_BUILD_MODE} LLVM_LIBS_DIR  ${LLVM_LIBRARY_DIR}) <---\u3053\u3053\n\nGenerate\u304c\u6210\u529f\u3057\u305f\u3089\u3001lld.sln\u3092\u958b\u3044\u3066\u3001INSTALL\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u3092\u30d3\u30eb\u30c9\u3059\u308b\u3002\n\nHello World\n\n\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u306e\u8a2d\u5b9a\n\n\u30a4\u30f3\u30af\u30eb\u30fc\u30c9\u30d1\u30b9\u306e\u8ffd\u52a0\n(llvm\u306e\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u5148)/include\n\u30e9\u30a4\u30d6\u30e9\u30ea\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u306e\u8ffd\u52a0\n(llvm\u306e\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u5148)/lib\n\u8ffd\u52a0\u306e\u4f9d\u5b58\u30d5\u30a1\u30a4\u30eb\nLLVMCore.lib;LLVMSupport.lib;LLVMBitWriter.lib\n\u30d7\u30ea\u30d7\u30ed\u30bb\u30c3\u30b5\u3092\u8ffd\u52a0\n_SCL_SECURE_NO_WARNINGS\n\n\nIR\u306e\u51fa\u529b\nMessageBox() \u3092\u4f7f\u3063\u3066 \"Hello World\" \u3068\u8868\u793a\u3059\u308b\u3060\u3051\u306e\u30b3\u30fc\u30c9\u3002\n#include \"llvm/IR/LLVMContext.h\"\n#include \"llvm/IR/Module.h\"\n#include \"llvm/IR/IRBuilder.h\"\n#include \"llvm/Bitcode/ReaderWriter.h\"\n#include \"llvm/Support/FileSystem.h\"\n#include \"llvm/Support/raw_ostream.h\"\n\n\nstatic llvm::Value* create_global_ptr(llvm::IRBuilder<>& builder, llvm::Module* module, llvm::Constant* c)\n{\n    llvm::GlobalVariable* gv = new llvm::GlobalVariable(*module,\n        c->getType(), true, llvm::GlobalValue::PrivateLinkage, c);\n    gv->setUnnamedAddr(true);\n    llvm::Value* zero = builder.getInt32(0);\n    llvm::Value* args[] = {zero, zero};\n    llvm::Value* ptr = builder.CreateInBoundsGEP(gv, args, \"\");\n    return ptr;\n}\n\nvoid create_helloworld()\n{\n    llvm::LLVMContext& context = llvm::getGlobalContext();\n    llvm::IRBuilder<> builder(context);\n\n    // module\n    llvm::Module* module = new llvm::Module(\"top\", context);\n\n    // create main function\n    llvm::Function* mainfunc = llvm::Function::Create(\n        llvm::FunctionType::get(builder.getVoidTy(), false),\n        llvm::Function::ExternalLinkage, \"main\", module);\n    mainfunc->setCallingConv(llvm::CallingConv::X86_StdCall);\n\n    llvm::BasicBlock* entry = llvm::BasicBlock::Create(context, \"entrypoint\", mainfunc);\n    builder.SetInsertPoint(entry);\n\n    // declare MessageBox\n    llvm::Function* messagebox_func;\n    {\n        // int32 MessageBoxW(void*, const wchar_t*, const wchar_t*, uint32);\n        std::vector<llvm::Type*> args;\n        args.push_back(builder.getInt8PtrTy());\n        args.push_back(builder.getInt16Ty()->getPointerTo());\n        args.push_back(builder.getInt16Ty()->getPointerTo());\n        args.push_back(builder.getInt32Ty());\n        llvm::FunctionType* messagebox_type = llvm::FunctionType::get(builder.getInt32Ty(), args, false);\n        messagebox_func = llvm::Function::Create(\n            messagebox_type, llvm::Function::ExternalLinkage, \"MessageBoxW\", module);\n        messagebox_func->setCallingConv(llvm::CallingConv::X86_StdCall);\n    }\n\n    // call MessageBox(0, \"Hello World\", \"caption\", 0);\n    {\n        llvm::Constant* a1 = llvm::ConstantDataArray::get(context,\n            llvm::ArrayRef<uint16_t>((uint16_t*)L\"Hello World\\0\", 12));\n        llvm::Constant* a2 = llvm::ConstantDataArray::get(context,\n            llvm::ArrayRef<uint16_t>((uint16_t*)L\"caption\\0\", 8));\n\n        std::vector<llvm::Value*> args;\n        args.push_back(llvm::ConstantPointerNull::getNullValue(builder.getInt8PtrTy()));\n        args.push_back(create_global_ptr(builder, module, a1));\n        args.push_back(create_global_ptr(builder, module, a2));\n        args.push_back(builder.getInt32(0));// MB_OK\n        llvm::CallInst* inst = builder.CreateCall(messagebox_func, args);\n        inst->setCallingConv(llvm::CallingConv::X86_StdCall);\n    }\n\n    // declare ExitProcess\n    llvm::Function* exitprocess_func;\n    {\n        // void ExitProcess(uint32)\n        llvm::FunctionType* exitprocess_type = llvm::FunctionType::get(\n            builder.getVoidTy(), llvm::ArrayRef<llvm::Type*>{builder.getInt32Ty()}, false);\n        exitprocess_func = llvm::Function::Create(\n            exitprocess_type, llvm::Function::ExternalLinkage, \"ExitProcess\", module);\n        exitprocess_func->setCallingConv(llvm::CallingConv::X86_StdCall);\n    }\n    // call ExitProcess(0)\n    {\n        llvm::CallInst* inst = builder.CreateCall(exitprocess_func, builder.getInt32(0));\n        inst->setCallingConv(llvm::CallingConv::X86_StdCall);\n    }\n\n    // return;\n    builder.CreateRetVoid();\n\n    // dump IR code for debug\n    module->dump();\n\n    // write bitcode\n    std::string error_info;\n    llvm::raw_fd_ostream os(\"helloworld.bc\", error_info, llvm::sys::fs::OpenFlags::F_None);\n    llvm::WriteBitcodeToFile(module, os);\n    os.close();\n}\n\n\n\u30d3\u30eb\u30c9\n\u51fa\u529b\u3055\u308c\u305fIR\u3092llc\u3067\u30d3\u30eb\u30c9\u3001lld\u3067\u30ea\u30f3\u30af\u3002\nd:\\sdk\\llvm-3.5.0\\bin\\llc.exe -march=x86 -filetype=obj -o=helloworld.o helloworld.bc\n\nd:\\sdk\\lld-3.5.0\\bin\\lld.exe -flavor link /out:helloworld.exe /entry:main@0 /subsystem:windows helloworld.o /libpath:\"C:\\Program Files (x86)\\Windows Kits\\8.1\\Lib\\winv6.3\\um\\x86\" kernel32.lib user32.lib\n\nVisual Studio\u3067\u4f5c\u3063\u305fexe\u3088\u308a\u3082\u30b5\u30a4\u30ba\u304c\u5927\u304d\u3044\u306e\u304c\u304d\u306b\u306a\u308b\u304c\u3001\u307e\u3042\u6210\u529f\u3057\u305f\u3002\n\n\u30b3\u30f3\u30bd\u30fc\u30eb\u51fa\u529b\n\u30c7\u30d0\u30c3\u30b0\u306e\u305f\u3081\u306b\u30b3\u30f3\u30bd\u30fc\u30eb\u306b\u66f8\u5f0f\u4ed8\u304d\u3067\u51fa\u529b\u3067\u304d\u308b\u3068\u4fbf\u5229\u305d\u3046\u306a\u306e\u3067\u3002\nvoid writefln(const char* fmt, ...);\n\u306e\u3088\u3046\u306a\u611f\u3058\u3002\n#include \"llvm/IR/LLVMContext.h\"\n#include \"llvm/IR/Module.h\"\n#include \"llvm/IR/IRBuilder.h\"\n#include \"llvm/Bitcode/ReaderWriter.h\"\n#include \"llvm/Support/FileSystem.h\"\n#include \"llvm/Support/raw_ostream.h\"\n#include \"llvm/IR/Intrinsics.h\"\n\n\nvoid create_writefln()\n{\n    llvm::LLVMContext& context = llvm::getGlobalContext();\n    llvm::IRBuilder<> builder(context);\n\n    // module\n    llvm::Module* module = new llvm::Module(\"top\", context);\n\n    // create function\n    llvm::Function* func;\n    {\n        // void writefln(const char*, ...)\n        std::vector<llvm::Type*> args;\n        args.push_back(builder.getInt8PtrTy());\n        bool is_var_args = true;\n        func = llvm::Function::Create(\n            llvm::FunctionType::get(builder.getVoidTy(), args, is_var_args),\n            llvm::Function::ExternalLinkage, \"writefln\", module);\n        func->setCallingConv(llvm::CallingConv::C);\n    }\n    llvm::Argument* args_[1];\n    assert(func->arg_size() == 1);\n    int i = 0;\n    for(llvm::Function::arg_iterator itr = func->arg_begin(); itr != func->arg_end(); itr++){\n        args_[i++] = itr;\n    }\n\n    llvm::BasicBlock* entry = llvm::BasicBlock::Create(context, \"entrypoint\", func);\n    builder.SetInsertPoint(entry);\n\n    // declare wvsprintfA\n    llvm::Function* wvsprintf_func;\n    {\n        // int32 wvsprintfA(char*, const char*, va_list)\n        std::vector<llvm::Type*> args;\n        args.push_back(builder.getInt8PtrTy());\n        args.push_back(builder.getInt8PtrTy());\n        args.push_back(builder.getInt8PtrTy());\n        llvm::FunctionType* func_type = llvm::FunctionType::get(builder.getInt32Ty(), args, false);\n        wvsprintf_func = llvm::Function::Create(\n            func_type, llvm::Function::ExternalLinkage, \"wvsprintfA\", module);\n        wvsprintf_func->setCallingConv(llvm::CallingConv::X86_StdCall);\n    }\n\n    // declare GetStdHandle\n    llvm::Function* getstdhandle_func;\n    {\n        // void* GetStdHandle(uint32)\n        llvm::FunctionType* func_type = llvm::FunctionType::get(\n            builder.getInt8PtrTy(), llvm::ArrayRef<llvm::Type*>{builder.getInt32Ty()}, false);\n        getstdhandle_func = llvm::Function::Create(\n            func_type, llvm::Function::ExternalLinkage, \"GetStdHandle\", module);\n        getstdhandle_func->setCallingConv(llvm::CallingConv::X86_StdCall);\n    }\n\n    // declare WriteConsoleA\n    llvm::Function* writeconsolea_func;\n    {\n        // int32 WriteConsoleA(void*, const char*, uint32, uint32*, void*)\n        std::vector<llvm::Type*> args;\n        args.push_back(builder.getInt8PtrTy());\n        args.push_back(builder.getInt8PtrTy());\n        args.push_back(builder.getInt32Ty());\n        args.push_back(builder.getInt32Ty()->getPointerTo());\n        args.push_back(builder.getInt8PtrTy());\n        llvm::FunctionType* func_type = llvm::FunctionType::get(\n            builder.getInt32Ty(), args, false);\n        writeconsolea_func = llvm::Function::Create(\n            func_type, llvm::Function::ExternalLinkage, \"WriteConsoleA\", module);\n        writeconsolea_func->setCallingConv(llvm::CallingConv::X86_StdCall);\n    }\n\n    // char buf[256];\n    llvm::Value* buf = builder.CreateAlloca(builder.getInt8Ty(), builder.getInt32(256));\n    // int32 len_out[1];\n    llvm::Value* len_out = builder.CreateAlloca(builder.getInt32Ty());\n    // va_list ap[1];\n    llvm::Value* ap_ = builder.CreateAlloca(builder.getInt8PtrTy());\n    llvm::Value* ap = builder.CreateBitCast(ap_, builder.getInt8PtrTy());\n\n    // va_start(ap);\n    llvm::Function* vastart = llvm::Intrinsic::getDeclaration(module, llvm::Intrinsic::vastart);\n    builder.CreateCall(vastart, ap);\n\n    // len = wvsprintfA(buf, fmt, ap);\n    llvm::Value* len;\n    {\n        std::vector<llvm::Value*> args;\n        args.push_back(buf);\n        args.push_back(args_[0]);\n        args.push_back(builder.CreateLoad(ap_));\n        llvm::CallInst* inst = builder.CreateCall(wvsprintf_func, args);\n        inst->setCallingConv(llvm::CallingConv::X86_StdCall);\n        len = inst;\n    }\n\n    // va_end(ap);\n    llvm::Function* vaend = llvm::Intrinsic::getDeclaration(module, llvm::Intrinsic::vaend);\n    builder.CreateCall(vaend, ap);\n\n    // buf[len++] = '\\r';\n    // buf[len++] = '\\n';\n    builder.CreateStore(builder.getInt8('\\r'), builder.CreateGEP(buf, len));\n    len = builder.CreateAdd(len, builder.getInt32(1));\n    builder.CreateStore(builder.getInt8('\\n'), builder.CreateGEP(buf, len));\n    len = builder.CreateAdd(len, builder.getInt32(1));\n\n    // handle = GetStdHandle(-11);//stdout\n    llvm::Value* handle;\n    {\n        llvm::CallInst* inst = builder.CreateCall(getstdhandle_func, builder.getInt32(-11));\n        inst->setCallingConv(llvm::CallingConv::X86_StdCall);\n        handle = inst;\n    }\n\n    // WriteConsoleA(handle, buf, len, len_out, null);\n    {\n        std::vector<llvm::Value*> args;\n        args.push_back(handle);\n        args.push_back(buf);\n        args.push_back(len);\n        args.push_back(len_out);\n        args.push_back(llvm::ConstantPointerNull::getNullValue(builder.getInt8PtrTy()));\n        llvm::CallInst* inst = builder.CreateCall(writeconsolea_func, args);\n        inst->setCallingConv(llvm::CallingConv::X86_StdCall);\n    }\n\n    // return;\n    builder.CreateRetVoid();\n\n    // dump IR code for debug\n    module->dump();\n\n    // write bitcode\n    std::string error_info;\n    llvm::raw_fd_ostream os(\"writefln.bc\", error_info, llvm::sys::fs::OpenFlags::F_None);\n    llvm::WriteBitcodeToFile(module, os);\n    os.close();\n}\n\n\nvoid call_writefln(llvm::IRBuilder<> builder, llvm::ArrayRef<llvm::Value*> args)\n{\n    llvm::Module* module = builder.GetInsertBlock()->getParent()->getParent();\n    llvm::Function* func = module->getFunction(\"writefln\");\n    if(func == nullptr){\n        std::vector<llvm::Type*> args;\n        args.push_back(builder.getInt8PtrTy());\n        bool is_var_args = true;\n        func = llvm::Function::Create(\n            llvm::FunctionType::get(builder.getVoidTy(), args, is_var_args),\n            llvm::Function::ExternalLinkage, \"writefln\", module);\n        func->setCallingConv(llvm::CallingConv::C);\n    }\n\n    llvm::CallInst* inst = builder.CreateCall(func, args);\n    inst->setCallingConv(func->getCallingConv());\n}\n\nvoid create_helloworld_console()\n{\n    llvm::LLVMContext& context = llvm::getGlobalContext();\n    llvm::IRBuilder<> builder(context);\n\n    // module\n    llvm::Module* module = new llvm::Module(\"top\", context);\n\n    // create main function\n    llvm::Function* mainfunc = llvm::Function::Create(\n        llvm::FunctionType::get(builder.getVoidTy(), false),\n        llvm::Function::ExternalLinkage, \"main\", module);\n    mainfunc->setCallingConv(llvm::CallingConv::X86_StdCall);\n\n    llvm::BasicBlock* entry = llvm::BasicBlock::Create(context, \"entrypoint\", mainfunc);\n    builder.SetInsertPoint(entry);\n\n    // writefln(\"Hello World\");\n    {\n        std::vector<llvm::Value*> args;\n        args.push_back(builder.CreateGlobalStringPtr(\"Hello World\"));\n        call_writefln(builder, args);\n    }\n\n    // writefln(\"[%s]\", \"oops\");\n    {\n        std::vector<llvm::Value*> args;\n        args.push_back(builder.CreateGlobalStringPtr(\"[%s]\"));\n        args.push_back(builder.CreateGlobalStringPtr(\"oops\"));\n        call_writefln(builder, args);\n    }\n\n    // writefln(\"%s:%d\", \"foo\", 123);\n    {\n        std::vector<llvm::Value*> args;\n        args.push_back(builder.CreateGlobalStringPtr(\"%s:%d\"));\n        args.push_back(builder.CreateGlobalStringPtr(\"foo\"));\n        args.push_back(builder.getInt32(123));\n        call_writefln(builder, args);\n    }\n\n    // writefln(\"%d - %s - %s\", 456, \"bar\", \"hoge\");\n    {\n        std::vector<llvm::Value*> args;\n        args.push_back(builder.CreateGlobalStringPtr(\"%d - %s - %s\"));\n        args.push_back(builder.getInt32(456));\n        args.push_back(builder.CreateGlobalStringPtr(\"bar\"));\n        args.push_back(builder.CreateGlobalStringPtr(\"hoge\"));\n        call_writefln(builder, args);\n    }\n\n    // return;\n    builder.CreateRetVoid();\n\n    // dump IR code for debug\n    module->dump();\n\n    // write bitcode\n    std::string error_info;\n    llvm::raw_fd_ostream os(\"helloworld_console.bc\", error_info, llvm::sys::fs::OpenFlags::F_None);\n    llvm::WriteBitcodeToFile(module, os);\n    os.close();\n}\n\n\n\u30d3\u30eb\u30c9\nd:\\sdk\\llvm-3.5.0\\bin\\llc.exe -filetype=obj -o=writefln.o writefln.bc\nd:\\sdk\\llvm-3.5.0\\bin\\llc.exe -filetype=obj -o=helloworld_console.o helloworld_console.bc\nd:\\sdk\\lld-3.5.0\\bin\\lld.exe -flavor link /out:helloworld_console.exe /entry:main@0 /subsystem:console helloworld_console.o writefln.o /libpath:\"C:\\Program Files (x86)\\Windows Kits\\8.1\\Lib\\winv6.3\\um\\x86\" kernel32.lib user32.lib\n\nsubsystem\u3092console\u306b\u3057\u306a\u3044\u3068\u51fa\u306a\u3044\u3002\n\n\u53c2\u8003\nGetting Started with the LLVM System using Microsoft Visual Studio\nLLVM \u30d5\u30ec\u30fc\u30e0\u30ef\u30fc\u30af\u3067\u5b9f\u7528\u7684\u306a\u30b3\u30f3\u30d1\u30a4\u30e9\u30fc\u3092\u4f5c\u6210\u3059\u308b: \u7b2c 1 \u56de\n\u304d\u3064\u306d\u3055\u3093\u3067\u3082\u308f\u304b\u308bLLVM\n# \u76ee\u7684\n\n- \u72ec\u81ea\u8a00\u8a9e\u3092\u4f5c\u308a\u305f\u3044\n- \u5b9f\u884c\u53ef\u80fd\u30b3\u30fc\u30c9\u306e\u751f\u6210\u306fLLVM\u306b\u307e\u304b\u305b\u305f\u3044\n- Windows\u3067\u958b\u767a\u3057\u305f\u3044(Visual Studio\u3092\u4f7f\u3044\u305f\u3044)\n\n\u72ec\u81ea\u30d5\u30ed\u30f3\u30c8\u30a8\u30f3\u30c9\u304b\u3089LLVM IR\u3092\u51fa\u529b\u3057\u3001\u3042\u3068\u306f\u3059\u3079\u3066LLVM\u306b\u4efb\u305b\u308b\u3002\n\n\n# \u7528\u610f\u3059\u308b\u7269\n\n- Visual Studio Express 2013\n- Python(CMake\u304c\u5fc5\u8981\u3068\u3059\u308b)\n- CMake\n\n\n# llvm\u306e\u30d3\u30eb\u30c9\n\nllvm-x.x.x-src \u3092\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3057\u9069\u5f53\u306b\u5c55\u958b\u3059\u308b\u3002\nCMake GUI\u3092\u8d77\u52d5\n\u8a2d\u5b9a\u4f8b:\n\n```\nSource path: D:/tmp/llvm-3.5.0.src\nBuild path: D:/tmp/llvm-3.5.0.build\nEntry\nCMAKE_INSTALL_PREFIX: D:/sdk/llvm-3.5.0\n```\n\nCMAKE_INSTALL_PREFIX \u306b\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u5148\u3092\u8a2d\u5b9a\u3059\u308b\u3002\u30c7\u30d5\u30a9\u30eb\u30c8\u3067\u306f\"C:\\Program Files\uff5e\"\u304c\u9078\u3070\u308c\u308b\u306e\u3067\u3001\u5225\u306e\u5834\u6240\u306b\u3057\u305f\u307b\u3046\u304c\u3088\u3044\u3002\n\nConfigure\u3057\u3066\u554f\u984c\u306a\u3051\u308c\u3070\u3001Generate\u3057\u3001\"Visual Studio 12 2013\", \"Use default compilers\"\u3092\u9078\u629e\u3057\u3001Ok\u3002\n\nLLVM.sln \u304c\u3067\u304d\u3066\u3044\u308b\u306e\u3067\u3001CMakePredefinedTargets/INSTALL\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u3092\u30d3\u30eb\u30c9\u3059\u308b\u3002\n\n\u6210\u529f\u3057\u305f\u3089\u3001\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u5148\u306blib\u3084include\u306a\u3069\u304c\u3067\u304d\u3066\u3044\u308b\u3002\n\n\n# lld\u306e\u30d3\u30eb\u30c9\n\n*\u3055\u304f\u3063\u3068\u30d3\u30eb\u30c9\u3067\u304d\u306a\u3044\u306e\u3067\u3001Windows\u5411\u3051\u306eclang\u3092\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3057\u3066lld\u3060\u3051\u6301\u3063\u3066\u304d\u305f\u307b\u3046\u304c\u697d*\n\nlld-x.x.x-src \u3092\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3057\u3066\u3001llvm\u3068\u540c\u3058\u3088\u3046\u306bCMake\u3059\u308b\u3002\n\u8a2d\u5b9a\u4f8b:\n\n```\nSource path: D:/tmp/lld-3.5.0.src\nBuild path: D:/tmp/lld-3.5.0.build\nEntry\nCMAKE_INSTALL_PREFIX: D:/sdk/lld-3.5.0\nLLD_PATH_TO_LLVM_BUILD: D:/sdk/llvm-3.5.0\n```\n\n\u3053\u308c\u3060\u3051\u3067\u5341\u5206\u306a\u69d8\u306a\u6c17\u304c\u3059\u308b\u304c\u3001\u8272\u3005\u554f\u984c\u304c\u767a\u751f\u3059\u308b\u3002\n\n(lld src)/lib/ReaderWriter/ELF/CMakeLists.txt \u3092\u4fee\u6b63\u3059\u308b\u3002\n\nforeach\u5185\u3067\u30b5\u30d6\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u3092\u8ffd\u52a0\u3057\u3066\u3044\u308b\u304c\u3001\u6a5f\u80fd\u3057\u3066\u3044\u306a\u3044\u3002\nif\u6587\u5185\u306b\u3042\u308b\n`//CMakeLists.txt`\n\u3068\u3044\u3046\u6587\u5b57\u5217\u3092\n`/CMakeLists.txt`\n\u306b\u76f4\u3059\u3002\u30b9\u30e9\u30c3\u30b7\u30e5\u304c\u591a\u3044\u3002\uff12\u30ab\u6240\u3042\u308b\u3002\n\n```\nCMake Error at D:/sdk/llvm-3.5.0/share/llvm/cmake/TableGen.cmake:13 (message):\n  LLVM_MAIN_SRC_DIR not set\n```\n\nLLVM_MAIN_SRC_DIR\u304c\u8a2d\u5b9a\u3055\u308c\u3066\u3044\u306a\u3044\u3068\u8a00\u308f\u308c\u308b\u3002Description\u304c\u8868\u793a\u3055\u308c\u306a\u3044\u305f\u3081\u8a73\u7d30\u4e0d\u660e\u3060\u304c\u3001\u3068\u308a\u3042\u3048\u305a\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3055\u308c\u305fLLVM\u306e\u30d1\u30b9\u3092\u8a2d\u5b9a\u3059\u308c\u3070\u3046\u307e\u304f\u3044\u3063\u305f\u3002\n\u4f8b:\n`LLVM_MAIN_SRC_DIR: D:/sdk/llvm-3.5.0`\n\n```\nCMake Error at D:/sdk/llvm-3.5.0/share/llvm/cmake/AddLLVM.cmake:443 (set_output_directory):\n  set_output_directory Function invoked with incorrect arguments for function\n  named: set_output_directory\n```\n\n\u95a2\u6570\u306e\u5f15\u6570\u304c\u4e0d\u6b63\u3067\u3059\u3068\u304b\u8a33\u308f\u304b\u3089\u3093\u72b6\u614b\u3067\u3059\u304c\u30fb\u30fb\u30fb\n\n[\u3053\u3053](http://comments.gmane.org/gmane.comp.debugging.lldb.devel/5158)\u306b\u3088\u308b\u3068\u4f55\u304b\u30d0\u30b0\u3063\u307d\u3044\u306e\u3067\n\n(llvm install)/share/llvm/cmake/AddLLVM.cmake\nLLVM_RUNTIME_OUTPUT_INTDIR\u3092\u4f7f\u3063\u3066\u3044\u308b\u3068\u3053\u308d\uff08\uff12\u30ab\u6240\uff09\u306e\u524d\u306b\n\n```\nset(LLVM_RUNTIME_OUTPUT_INTDIR ${CMAKE_BINARY_DIR}/${CMAKE_CFG_INTDIR}/bin)\nset(LLVM_LIBRARY_OUTPUT_INTDIR ${CMAKE_BINARY_DIR}/${CMAKE_CFG_INTDIR}/lib)\n```\n\u3092\u8ffd\u52a0\n\n```\nCMake Error at D:/sdk/llvm-3.5.0/share/llvm/cmake/AddLLVM.cmake:623 (string):\n  string sub-command REPLACE requires at least four arguments.\n```\n\u307e\u3063\u305f\u304f\u308f\u3051\u304c\u308f\u304b\u3089\u306a\u3044\u304c\u3001LLVM_LIBRARY_DIR\u304c\u672a\u5b9a\u7fa9\u306e\u3088\u3046\u306b\u898b\u3048\u308b\u3002\u8a66\u3057\u306bLLVM_BINARY_DIR\u306b\u7f6e\u304d\u63db\u3048\u3002\n\n```\n  set(LLVM_SOURCE_DIR ${LLVM_MAIN_SRC_DIR})\n  set(LLVM_BINARY_DIR ${LLVM_BINARY_DIR})\n  string(REPLACE ${CMAKE_CFG_INTDIR} ${LLVM_BUILD_MODE} LLVM_TOOLS_DIR ${LLVM_TOOLS_BINARY_DIR})\n  string(REPLACE ${CMAKE_CFG_INTDIR} ${LLVM_BUILD_MODE} LLVM_LIBS_DIR  ${LLVM_LIBRARY_DIR}) <---\u3053\u3053\n```\n\nGenerate\u304c\u6210\u529f\u3057\u305f\u3089\u3001lld.sln\u3092\u958b\u3044\u3066\u3001INSTALL\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u3092\u30d3\u30eb\u30c9\u3059\u308b\u3002\n\n\n# Hello World\n\n## \u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u306e\u8a2d\u5b9a\n\n- \u30a4\u30f3\u30af\u30eb\u30fc\u30c9\u30d1\u30b9\u306e\u8ffd\u52a0\n  (llvm\u306e\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u5148)/include\n\n- \u30e9\u30a4\u30d6\u30e9\u30ea\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u306e\u8ffd\u52a0\n  (llvm\u306e\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u5148)/lib\n\n- \u8ffd\u52a0\u306e\u4f9d\u5b58\u30d5\u30a1\u30a4\u30eb\n  LLVMCore.lib;LLVMSupport.lib;LLVMBitWriter.lib\n\n- \u30d7\u30ea\u30d7\u30ed\u30bb\u30c3\u30b5\u3092\u8ffd\u52a0\n  \\_SCL_SECURE_NO_WARNINGS\n\n\n## IR\u306e\u51fa\u529b\n\nMessageBox() \u3092\u4f7f\u3063\u3066 \"Hello World\" \u3068\u8868\u793a\u3059\u308b\u3060\u3051\u306e\u30b3\u30fc\u30c9\u3002\n\n```c++\n#include \"llvm/IR/LLVMContext.h\"\n#include \"llvm/IR/Module.h\"\n#include \"llvm/IR/IRBuilder.h\"\n#include \"llvm/Bitcode/ReaderWriter.h\"\n#include \"llvm/Support/FileSystem.h\"\n#include \"llvm/Support/raw_ostream.h\"\n\n\nstatic llvm::Value* create_global_ptr(llvm::IRBuilder<>& builder, llvm::Module* module, llvm::Constant* c)\n{\n    llvm::GlobalVariable* gv = new llvm::GlobalVariable(*module,\n        c->getType(), true, llvm::GlobalValue::PrivateLinkage, c);\n    gv->setUnnamedAddr(true);\n    llvm::Value* zero = builder.getInt32(0);\n    llvm::Value* args[] = {zero, zero};\n    llvm::Value* ptr = builder.CreateInBoundsGEP(gv, args, \"\");\n    return ptr;\n}\n\nvoid create_helloworld()\n{\n    llvm::LLVMContext& context = llvm::getGlobalContext();\n    llvm::IRBuilder<> builder(context);\n\n    // module\n    llvm::Module* module = new llvm::Module(\"top\", context);\n\n    // create main function\n    llvm::Function* mainfunc = llvm::Function::Create(\n        llvm::FunctionType::get(builder.getVoidTy(), false),\n        llvm::Function::ExternalLinkage, \"main\", module);\n    mainfunc->setCallingConv(llvm::CallingConv::X86_StdCall);\n\n    llvm::BasicBlock* entry = llvm::BasicBlock::Create(context, \"entrypoint\", mainfunc);\n    builder.SetInsertPoint(entry);\n\n    // declare MessageBox\n    llvm::Function* messagebox_func;\n    {\n        // int32 MessageBoxW(void*, const wchar_t*, const wchar_t*, uint32);\n        std::vector<llvm::Type*> args;\n        args.push_back(builder.getInt8PtrTy());\n        args.push_back(builder.getInt16Ty()->getPointerTo());\n        args.push_back(builder.getInt16Ty()->getPointerTo());\n        args.push_back(builder.getInt32Ty());\n        llvm::FunctionType* messagebox_type = llvm::FunctionType::get(builder.getInt32Ty(), args, false);\n        messagebox_func = llvm::Function::Create(\n            messagebox_type, llvm::Function::ExternalLinkage, \"MessageBoxW\", module);\n        messagebox_func->setCallingConv(llvm::CallingConv::X86_StdCall);\n    }\n\n    // call MessageBox(0, \"Hello World\", \"caption\", 0);\n    {\n        llvm::Constant* a1 = llvm::ConstantDataArray::get(context,\n            llvm::ArrayRef<uint16_t>((uint16_t*)L\"Hello World\\0\", 12));\n        llvm::Constant* a2 = llvm::ConstantDataArray::get(context,\n            llvm::ArrayRef<uint16_t>((uint16_t*)L\"caption\\0\", 8));\n\n        std::vector<llvm::Value*> args;\n        args.push_back(llvm::ConstantPointerNull::getNullValue(builder.getInt8PtrTy()));\n        args.push_back(create_global_ptr(builder, module, a1));\n        args.push_back(create_global_ptr(builder, module, a2));\n        args.push_back(builder.getInt32(0));// MB_OK\n        llvm::CallInst* inst = builder.CreateCall(messagebox_func, args);\n        inst->setCallingConv(llvm::CallingConv::X86_StdCall);\n    }\n\n    // declare ExitProcess\n    llvm::Function* exitprocess_func;\n    {\n        // void ExitProcess(uint32)\n        llvm::FunctionType* exitprocess_type = llvm::FunctionType::get(\n            builder.getVoidTy(), llvm::ArrayRef<llvm::Type*>{builder.getInt32Ty()}, false);\n        exitprocess_func = llvm::Function::Create(\n            exitprocess_type, llvm::Function::ExternalLinkage, \"ExitProcess\", module);\n        exitprocess_func->setCallingConv(llvm::CallingConv::X86_StdCall);\n    }\n    // call ExitProcess(0)\n    {\n        llvm::CallInst* inst = builder.CreateCall(exitprocess_func, builder.getInt32(0));\n        inst->setCallingConv(llvm::CallingConv::X86_StdCall);\n    }\n\n    // return;\n    builder.CreateRetVoid();\n\n    // dump IR code for debug\n    module->dump();\n\n    // write bitcode\n    std::string error_info;\n    llvm::raw_fd_ostream os(\"helloworld.bc\", error_info, llvm::sys::fs::OpenFlags::F_None);\n    llvm::WriteBitcodeToFile(module, os);\n    os.close();\n}\n```\n\n## \u30d3\u30eb\u30c9\n\n\u51fa\u529b\u3055\u308c\u305fIR\u3092llc\u3067\u30d3\u30eb\u30c9\u3001lld\u3067\u30ea\u30f3\u30af\u3002\n\n```\nd:\\sdk\\llvm-3.5.0\\bin\\llc.exe -march=x86 -filetype=obj -o=helloworld.o helloworld.bc\n```\n```\nd:\\sdk\\lld-3.5.0\\bin\\lld.exe -flavor link /out:helloworld.exe /entry:main@0 /subsystem:windows helloworld.o /libpath:\"C:\\Program Files (x86)\\Windows Kits\\8.1\\Lib\\winv6.3\\um\\x86\" kernel32.lib user32.lib\n```\n\nVisual Studio\u3067\u4f5c\u3063\u305fexe\u3088\u308a\u3082\u30b5\u30a4\u30ba\u304c\u5927\u304d\u3044\u306e\u304c\u304d\u306b\u306a\u308b\u304c\u3001\u307e\u3042\u6210\u529f\u3057\u305f\u3002\n\n# \u30b3\u30f3\u30bd\u30fc\u30eb\u51fa\u529b\n\n\u30c7\u30d0\u30c3\u30b0\u306e\u305f\u3081\u306b\u30b3\u30f3\u30bd\u30fc\u30eb\u306b\u66f8\u5f0f\u4ed8\u304d\u3067\u51fa\u529b\u3067\u304d\u308b\u3068\u4fbf\u5229\u305d\u3046\u306a\u306e\u3067\u3002\n\n`void writefln(const char* fmt, ...);`\n\n\u306e\u3088\u3046\u306a\u611f\u3058\u3002\n\n```c++\n#include \"llvm/IR/LLVMContext.h\"\n#include \"llvm/IR/Module.h\"\n#include \"llvm/IR/IRBuilder.h\"\n#include \"llvm/Bitcode/ReaderWriter.h\"\n#include \"llvm/Support/FileSystem.h\"\n#include \"llvm/Support/raw_ostream.h\"\n#include \"llvm/IR/Intrinsics.h\"\n\n\nvoid create_writefln()\n{\n    llvm::LLVMContext& context = llvm::getGlobalContext();\n    llvm::IRBuilder<> builder(context);\n\n    // module\n    llvm::Module* module = new llvm::Module(\"top\", context);\n\n    // create function\n    llvm::Function* func;\n    {\n        // void writefln(const char*, ...)\n        std::vector<llvm::Type*> args;\n        args.push_back(builder.getInt8PtrTy());\n        bool is_var_args = true;\n        func = llvm::Function::Create(\n            llvm::FunctionType::get(builder.getVoidTy(), args, is_var_args),\n            llvm::Function::ExternalLinkage, \"writefln\", module);\n        func->setCallingConv(llvm::CallingConv::C);\n    }\n    llvm::Argument* args_[1];\n    assert(func->arg_size() == 1);\n    int i = 0;\n    for(llvm::Function::arg_iterator itr = func->arg_begin(); itr != func->arg_end(); itr++){\n        args_[i++] = itr;\n    }\n\n    llvm::BasicBlock* entry = llvm::BasicBlock::Create(context, \"entrypoint\", func);\n    builder.SetInsertPoint(entry);\n\n    // declare wvsprintfA\n    llvm::Function* wvsprintf_func;\n    {\n        // int32 wvsprintfA(char*, const char*, va_list)\n        std::vector<llvm::Type*> args;\n        args.push_back(builder.getInt8PtrTy());\n        args.push_back(builder.getInt8PtrTy());\n        args.push_back(builder.getInt8PtrTy());\n        llvm::FunctionType* func_type = llvm::FunctionType::get(builder.getInt32Ty(), args, false);\n        wvsprintf_func = llvm::Function::Create(\n            func_type, llvm::Function::ExternalLinkage, \"wvsprintfA\", module);\n        wvsprintf_func->setCallingConv(llvm::CallingConv::X86_StdCall);\n    }\n\n    // declare GetStdHandle\n    llvm::Function* getstdhandle_func;\n    {\n        // void* GetStdHandle(uint32)\n        llvm::FunctionType* func_type = llvm::FunctionType::get(\n            builder.getInt8PtrTy(), llvm::ArrayRef<llvm::Type*>{builder.getInt32Ty()}, false);\n        getstdhandle_func = llvm::Function::Create(\n            func_type, llvm::Function::ExternalLinkage, \"GetStdHandle\", module);\n        getstdhandle_func->setCallingConv(llvm::CallingConv::X86_StdCall);\n    }\n\n    // declare WriteConsoleA\n    llvm::Function* writeconsolea_func;\n    {\n        // int32 WriteConsoleA(void*, const char*, uint32, uint32*, void*)\n        std::vector<llvm::Type*> args;\n        args.push_back(builder.getInt8PtrTy());\n        args.push_back(builder.getInt8PtrTy());\n        args.push_back(builder.getInt32Ty());\n        args.push_back(builder.getInt32Ty()->getPointerTo());\n        args.push_back(builder.getInt8PtrTy());\n        llvm::FunctionType* func_type = llvm::FunctionType::get(\n            builder.getInt32Ty(), args, false);\n        writeconsolea_func = llvm::Function::Create(\n            func_type, llvm::Function::ExternalLinkage, \"WriteConsoleA\", module);\n        writeconsolea_func->setCallingConv(llvm::CallingConv::X86_StdCall);\n    }\n\n    // char buf[256];\n    llvm::Value* buf = builder.CreateAlloca(builder.getInt8Ty(), builder.getInt32(256));\n    // int32 len_out[1];\n    llvm::Value* len_out = builder.CreateAlloca(builder.getInt32Ty());\n    // va_list ap[1];\n    llvm::Value* ap_ = builder.CreateAlloca(builder.getInt8PtrTy());\n    llvm::Value* ap = builder.CreateBitCast(ap_, builder.getInt8PtrTy());\n\n    // va_start(ap);\n    llvm::Function* vastart = llvm::Intrinsic::getDeclaration(module, llvm::Intrinsic::vastart);\n    builder.CreateCall(vastart, ap);\n\n    // len = wvsprintfA(buf, fmt, ap);\n    llvm::Value* len;\n    {\n        std::vector<llvm::Value*> args;\n        args.push_back(buf);\n        args.push_back(args_[0]);\n        args.push_back(builder.CreateLoad(ap_));\n        llvm::CallInst* inst = builder.CreateCall(wvsprintf_func, args);\n        inst->setCallingConv(llvm::CallingConv::X86_StdCall);\n        len = inst;\n    }\n\n    // va_end(ap);\n    llvm::Function* vaend = llvm::Intrinsic::getDeclaration(module, llvm::Intrinsic::vaend);\n    builder.CreateCall(vaend, ap);\n    \n    // buf[len++] = '\\r';\n    // buf[len++] = '\\n';\n    builder.CreateStore(builder.getInt8('\\r'), builder.CreateGEP(buf, len));\n    len = builder.CreateAdd(len, builder.getInt32(1));\n    builder.CreateStore(builder.getInt8('\\n'), builder.CreateGEP(buf, len));\n    len = builder.CreateAdd(len, builder.getInt32(1));\n\n    // handle = GetStdHandle(-11);//stdout\n    llvm::Value* handle;\n    {\n        llvm::CallInst* inst = builder.CreateCall(getstdhandle_func, builder.getInt32(-11));\n        inst->setCallingConv(llvm::CallingConv::X86_StdCall);\n        handle = inst;\n    }\n\n    // WriteConsoleA(handle, buf, len, len_out, null);\n    {\n        std::vector<llvm::Value*> args;\n        args.push_back(handle);\n        args.push_back(buf);\n        args.push_back(len);\n        args.push_back(len_out);\n        args.push_back(llvm::ConstantPointerNull::getNullValue(builder.getInt8PtrTy()));\n        llvm::CallInst* inst = builder.CreateCall(writeconsolea_func, args);\n        inst->setCallingConv(llvm::CallingConv::X86_StdCall);\n    }\n\n    // return;\n    builder.CreateRetVoid();\n\n    // dump IR code for debug\n    module->dump();\n\n    // write bitcode\n    std::string error_info;\n    llvm::raw_fd_ostream os(\"writefln.bc\", error_info, llvm::sys::fs::OpenFlags::F_None);\n    llvm::WriteBitcodeToFile(module, os);\n    os.close();\n}\n\n\nvoid call_writefln(llvm::IRBuilder<> builder, llvm::ArrayRef<llvm::Value*> args)\n{\n    llvm::Module* module = builder.GetInsertBlock()->getParent()->getParent();\n    llvm::Function* func = module->getFunction(\"writefln\");\n    if(func == nullptr){\n        std::vector<llvm::Type*> args;\n        args.push_back(builder.getInt8PtrTy());\n        bool is_var_args = true;\n        func = llvm::Function::Create(\n            llvm::FunctionType::get(builder.getVoidTy(), args, is_var_args),\n            llvm::Function::ExternalLinkage, \"writefln\", module);\n        func->setCallingConv(llvm::CallingConv::C);\n    }\n\n    llvm::CallInst* inst = builder.CreateCall(func, args);\n    inst->setCallingConv(func->getCallingConv());\n}\n\nvoid create_helloworld_console()\n{\n    llvm::LLVMContext& context = llvm::getGlobalContext();\n    llvm::IRBuilder<> builder(context);\n\n    // module\n    llvm::Module* module = new llvm::Module(\"top\", context);\n\n    // create main function\n    llvm::Function* mainfunc = llvm::Function::Create(\n        llvm::FunctionType::get(builder.getVoidTy(), false),\n        llvm::Function::ExternalLinkage, \"main\", module);\n    mainfunc->setCallingConv(llvm::CallingConv::X86_StdCall);\n\n    llvm::BasicBlock* entry = llvm::BasicBlock::Create(context, \"entrypoint\", mainfunc);\n    builder.SetInsertPoint(entry);\n\n    // writefln(\"Hello World\");\n    {\n        std::vector<llvm::Value*> args;\n        args.push_back(builder.CreateGlobalStringPtr(\"Hello World\"));\n        call_writefln(builder, args);\n    }\n\n    // writefln(\"[%s]\", \"oops\");\n    {\n        std::vector<llvm::Value*> args;\n        args.push_back(builder.CreateGlobalStringPtr(\"[%s]\"));\n        args.push_back(builder.CreateGlobalStringPtr(\"oops\"));\n        call_writefln(builder, args);\n    }\n\n    // writefln(\"%s:%d\", \"foo\", 123);\n    {\n        std::vector<llvm::Value*> args;\n        args.push_back(builder.CreateGlobalStringPtr(\"%s:%d\"));\n        args.push_back(builder.CreateGlobalStringPtr(\"foo\"));\n        args.push_back(builder.getInt32(123));\n        call_writefln(builder, args);\n    }\n\n    // writefln(\"%d - %s - %s\", 456, \"bar\", \"hoge\");\n    {\n        std::vector<llvm::Value*> args;\n        args.push_back(builder.CreateGlobalStringPtr(\"%d - %s - %s\"));\n        args.push_back(builder.getInt32(456));\n        args.push_back(builder.CreateGlobalStringPtr(\"bar\"));\n        args.push_back(builder.CreateGlobalStringPtr(\"hoge\"));\n        call_writefln(builder, args);\n    }\n\n    // return;\n    builder.CreateRetVoid();\n\n    // dump IR code for debug\n    module->dump();\n\n    // write bitcode\n    std::string error_info;\n    llvm::raw_fd_ostream os(\"helloworld_console.bc\", error_info, llvm::sys::fs::OpenFlags::F_None);\n    llvm::WriteBitcodeToFile(module, os);\n    os.close();\n}\n```\n\n## \u30d3\u30eb\u30c9\n\n```\nd:\\sdk\\llvm-3.5.0\\bin\\llc.exe -filetype=obj -o=writefln.o writefln.bc\nd:\\sdk\\llvm-3.5.0\\bin\\llc.exe -filetype=obj -o=helloworld_console.o helloworld_console.bc\nd:\\sdk\\lld-3.5.0\\bin\\lld.exe -flavor link /out:helloworld_console.exe /entry:main@0 /subsystem:console helloworld_console.o writefln.o /libpath:\"C:\\Program Files (x86)\\Windows Kits\\8.1\\Lib\\winv6.3\\um\\x86\" kernel32.lib user32.lib\n```\n\nsubsystem\u3092console\u306b\u3057\u306a\u3044\u3068\u51fa\u306a\u3044\u3002\n\n\n# \u53c2\u8003\n\n[Getting Started with the LLVM System using Microsoft Visual Studio](http://llvm.org/docs/GettingStartedVS.html)\n\n[LLVM \u30d5\u30ec\u30fc\u30e0\u30ef\u30fc\u30af\u3067\u5b9f\u7528\u7684\u306a\u30b3\u30f3\u30d1\u30a4\u30e9\u30fc\u3092\u4f5c\u6210\u3059\u308b: \u7b2c 1 \u56de](http://www.ibm.com/developerworks/jp/opensource/library/os-createcompilerllvm1/index.html)\n\n[\u304d\u3064\u306d\u3055\u3093\u3067\u3082\u308f\u304b\u308bLLVM](http://tatsu-zine.com/books/llvm)\n", "tags": ["LLVM"]}