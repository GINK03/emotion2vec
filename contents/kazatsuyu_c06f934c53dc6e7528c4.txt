{"context": "\u4eca\u56de\u306f\u53ef\u5909\u9577\u5f15\u6570\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8(variadic template)\u306e\u8a71\u3067\u3059\u3002\n\nstd::integer_sequence\nC++14\u3067\u65b0\u3057\u304fstd::integer_sequence\u3068\u3044\u3046\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u30af\u30e9\u30b9\u304c\u8ffd\u52a0\u3055\u308c\u307e\u3057\u305f\u3002\n\nc++\nnamespace std {\n\ntemplate<typename T, T ...Ints>\nclass integer_sequence {\npublic:\n    using value_type = T;\n    static constexpr size_t size() noexcept { return sizeof...(Ints); }\n};\n\ntemplate<size_t ...Ints>\nusing index_sequence = integer_sequence<size_t, Ints...>;\n\ntemplate<typename T, T N>\nusing make_integer_sequence = std::integer_sequence<T, /* 0, 1, 2, 3, ..., N */ >;\n\ntemplate<size_t N>\nusing make_index_sequence = make_integer_sequence<size_t, N>;\n\ntemplate<class... T>\nusing index_sequence_for = std::make_index_sequence<sizeof...(T)>;\n\n}\n\n\n\u3053\u308c\u3092\u5229\u7528\u3059\u308c\u3070\u3001\u30bf\u30d7\u30eb\u3092\u5c55\u958b\u3057\u3066\u95a2\u6570\u306e\u5f15\u6570\u306b\u3059\u308b\u306a\u3093\u3066\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\nc++\n\ntemplate<typename F, typename Tuple, std::size_t ...Ints>\nvoid invoke_(F&& f, Tuple&& t, std::index_sequence<Ints...>) {\n    using std::get;\n    f(get<Ints>(t)...);\n}\n\ntemplate<typename F, typename Tuple>\nvoid invoke(F&& f, Tuple&& t) {\n    using std::tuple_size;\n    using indices = std::make_index_sequence<tuple_size<Tuple>::value>;\n    invoke_(std::forward<F>(f), std::forward<Tuple>(t), indices{});\n}\n\nvoid func(char, int, long long) {\n    // ...\n}\n\nint main() {\n    auto t = std::make_tuple('\\0', 0, 0ll);\n    invoke(func, t); // func('\\0', 0, 0ll) \u304c\u547c\u3070\u308c\u308b\n}\n\n\n\nC++14\u3067\u8ffd\u52a0\u3055\u308c\u305f\u3068\u306f\u8a00\u3048\u3001\u30b3\u30a2\u8a00\u8a9e\u306b\u4f55\u304b\u304c\u8ffd\u52a0\u3055\u308c\u305f\u8a33\u3067\u306f\u306a\u304f\u5358\u306b\u6a19\u6e96\u30e9\u30a4\u30d6\u30e9\u30ea\u5165\u308a\u3057\u305f\u3060\u3051\u306a\u306e\u3067\u3001C++11\u306e\u6a5f\u80fd\u3067\u3082\u4f5c\u6210\u53ef\u80fd\u3067\u3059\u3002\n\u4e0a\u8a18\u306e\u4f8b\u306b\u304a\u3051\u308binvoke\u306e\u3088\u3046\u306a\u4e8b\u3092\u3084\u308a\u305f\u3044\u6642\u306f\u3001C++11\u3067\u306f\u540c\u3058\u3088\u3046\u306a\u30af\u30e9\u30b9\u3092\u4f5c\u3089\u3056\u308b\u3092\u3048\u307e\u305b\u3093\u3002\n\u307e\u3042\u3001\u305d\u308d\u305d\u308dC++14\u4f7f\u304a\u3046\u305c\u3063\u3066\u8a71\u3067\u7d42\u308f\u308a\u305f\u3044\u3068\u3053\u308d\u3067\u3059\u304c\u3002\n\u8da3\u5473\u3067\u3084\u308b\u5206\u306b\u306f\u305d\u308c\u3067\u3082\u3044\u3044\u3093\u3067\u3059\u304c\u2026\u2026\u3001\u4ed5\u4e8b\u3067\u306f\u306a\u304b\u306a\u304b\u4f7f\u308f\u305b\u3066\u3082\u3089\u3048\u306a\u3044\u4eba\u3082\u591a\u3044\u3067\u3057\u3087\u3046\u3002\u4e3b\u306b\u3001RHEL6\u3068\u304b\u3001VC++\u3068\u304b\u306e\u305b\u3044\u3067\u3002\n\u79c1\u306a\u3093\u304bC++11\u3059\u3089\u4f7f\u308f\u305b\u3066\u3082\u3089\u3048\u307e\u305b\u3093\u3002\n\nvariadic template\u306e\u7a2e\u985e\nvariadic template\u306b\u306f\u4e8c\u7a2e\u985e\u3042\u308a\u307e\u3059\u3002\u4e00\u3064\u76ee\u306f\u3001\n\nA\ntemplate<\u578b\u540d ...\u4eee\u5f15\u6570\u540d>\n\n\n\u3068\u66f8\u304f\u3082\u306e\u3002\u3082\u3046\u4e00\u3064\u306f\u3001\n\nB\ntemplate<typename ...\u4eee\u5f15\u6570\u540d>\ntemplate<class ...\u4eee\u5f15\u6570\u540d>\n\n\n\u3068\u66f8\u304f\u3082\u306e\u3002\ntemplate<template<class ...> class ...\u4eee\u5f15\u6570\u540d>\ntemplate<template<template<class ...> class ...> class ...\u4eee\u5f15\u6570\u540d>\n\n\u306a\u3093\u3066\u3082\u306e\u3082\u4f5c\u308d\u3046\u3068\u601d\u3048\u3070\u4f5c\u308c\u308b\u306e\u3067\u30cd\u30b9\u30c8\u3092\u8003\u3048\u308c\u3070\u3044\u304f\u3089\u3067\u3082\u30d1\u30bf\u30fc\u30f3\u306f\u5897\u3084\u305b\u308b\u306e\u3067\u3059\u304c\u3001\u3055\u3059\u304c\u306b\u305d\u3093\u306a\u3053\u3068\u307e\u3067\u8003\u3048\u3066\u3082\u4ed5\u65b9\u3042\u308a\u307e\u305b\u3093\u3002\nA\u3068B\u306e\u9055\u3044\u306f\u3001\u30b3\u30f3\u30d1\u30a4\u30eb\u6642\u5b9a\u6570\u3092\u6e21\u3059\u304b\u3001\u578b\u3092\u6e21\u3059\u304b\u3001\u3068\u3044\u3046\u70b9\u3067\u3059\u3002\n\u4eca\u56de\u306f\u3068\u308a\u3042\u3048\u305a\u3001std::integer_sequence\u306e\u6a5f\u80fd\u62e1\u5f35\u7248\u306e\u3088\u3046\u306a\u3001\u5b9a\u6570\u30d0\u30fc\u30b8\u30e7\u30f3\u306e\u30af\u30e9\u30b9\u3092\u8003\u3048\u307e\u3059\u3002\n\n\u5b9a\u6570\u306e\u914d\u5217\u3092\u6271\u3046\u30af\u30e9\u30b9\nstd::integer_sequence\u306e\u6a5f\u80fd\u62e1\u5f35\u7248\u306a\u306e\u3067\u3001\u540d\u524d\u3082integer_sequence\u306b\u3057\u307e\u3057\u3087\u3046\u3002\u305f\u3060\u3057\u540d\u524d\u7a7a\u9593\u306f\u5206\u3051\u307e\u3059\u3002\n\u4e00\u65b9\u3001\u578b\u306e\u914d\u5217\u3092\u6271\u3046\u30af\u30e9\u30b9\u306f\u3001type_sequence\u306b\u3057\u307e\u3059\u3002\u3053\u3061\u3089\u306b\u95a2\u3057\u3066\u306f\u6b21\u56de\u306e\u8a18\u4e8b\u3067\u6271\u3044\u305f\u3044\u3068\u601d\u3044\u307e\u3059\u3002\n\u9577\u3005\u3068\u8aac\u660e\u3092\u3059\u308b\u3088\u308a\u898b\u305f\u65b9\u304c\u65e9\u305d\u3046\u306a\u306e\u3067\u3001\u65e9\u901f\u30b3\u30fc\u30c9\u3092\u898b\u3066\u307f\u307e\u3059\u3002\n\nc++\nnamespace geranium  {\n\n// C++14\u306estd::enable_if_t\u3068\u540c\u3058\ntemplate<bool cond, typename T = void>\nusing enable_if_t = typename std::enable_if<cond, T>::type;\n\ntemplate<bool cond>\nusing enable_when = enable_if_t<cond, std::nullptr_t>;\n\n// #define GERANIUM_ENABLE_WHEN(cond) ::geranium::enable_when<(cond)> = nullptr\n// \u307f\u305f\u3044\u306a\u30de\u30af\u30ed\u304c\u3042\u3063\u3066\u3082\u3044\u3044\u304b\u3082\u77e5\u308c\u306a\u3044\u3051\u3069\u3001\u30de\u30af\u30ed\u3060\u3057\u306a\u3042\u2026\u2026\n\n// \u524d\u65b9\u5ba3\u8a00\ntemplate<typename ...Args>\nclass type_sequence;\n\n// \u524d\u65b9\u5ba3\u8a00\ntemplate<typename T, T ...args>\nclass integer_sequence;\n\n// U\u304c\u578bT\u306einteger_sequence\u304b\u3069\u3046\u304b\u8abf\u3079\u308b\ntemplate<typename T, typename U>\nstruct is_integer_sequence: std::false_type {};\ntemplate<typename T, T ...args>\nstruct is_integer_sequence<T, integer_sequence<T, args...>>: std::true_type {};\ntemplate<typename T, typename U>\nusing is_integer_sequence_t = typename is_integer_sequence<T, U>::type;\n\n// std::index_sequence\u3068\u540c\u3058\ntemplate<std::size_t ...args>\nusing index_sequence = integer_sequence<std::size_t, args...>;\n\n// std::make_integer_sequence\u3068\u5c11\u3057\u7570\u306a\u308a\u3001n~n+c-1\u306e\u7bc4\u56f2\u3067\u4f5c\u6210\u3059\u308b\ntemplate<typename T, T n, std::size_t c>\nusing make_integer_sequence = std::integer_sequence<T, /* n, n+1, n+2, ..., n+c-1 */ >;\n\n// std::make_index_sequence\u3068\u540c\u3058\ntemplate<std::size_t n>\nusing make_index_sequence = make_integer_sequence<std::size_t, 0, n>;\n\n// std::index_sequence_for\u3068\u540c\u3058\ntemplate<class... Args>\nusing index_sequence_for = std::make_index_sequence<sizeof...(Args)>;\n\ntemplate<typename T, T ...args>\nclass integer_sequence {\npublic:\n    using value_type = T;\n    using size_type = std::size_t;\n\n    static constexpr size_type npos = static_cast<size_type>(-1);\n    static inline constexpr size_type size() noexcept { return sizeof...(args); }\n\n    // \u30c6\u30f3\u30d7\u30ec\u30fc\u30c8U\u3092\u7279\u6b8a\u5316\u3057\u305f\u30af\u30e9\u30b9\u3092\u8fd4\u3059\n    template<template<T ...> class U> using unpack = U<args...>;\n\n    // args...\u305d\u308c\u305e\u308c\u306bconstexpr\u95a2\u6570\u3092\u9069\u7528\u3057\u3066\u4f5c\u6210\u3057\u305finteger_sequence\u3092\u8fd4\u3059\n    template<typename U, U(f)(T)> using map = integer_sequence<U, f(args)...>;\n\n    // \u30c6\u30f3\u30d7\u30ec\u30fc\u30c8U\u3092\u5229\u7528\u3057\u3066\u3001args...\u305d\u308c\u305e\u308c\u304b\u3089\u751f\u6210\u3057\u305f\u5024\u3092\u4e26\u3079\u305finteger_sequence\u3092\u8fd4\u3059\n    template<template<T> class U>\n    using value_map = integer_sequence<decltype(U<T{}>::value), U<args>::value ...>;\n\n    // \u30c6\u30f3\u30d7\u30ec\u30fc\u30c8U\u3092\u5229\u7528\u3057\u3066\u3001args...\u305d\u308c\u305e\u308c\u304b\u3089\u751f\u6210\u3057\u305f\u578b\u3092\u4e26\u3079\u305ftype_sequence\u3092\u8fd4\u3059\n    template<template<T> class U>\n    using type_map = type_sequence<typename U<args>::type ...>;\n\n    // args...\u3092\u5f15\u6570\u306b\u53d6\u308b\u95a2\u6570\u3092\u5b9f\u884c\u3059\u308b\n    template<typename F>\n    static inline constexpr auto exec(F&& f) noexcept(noexcept(f(args...))) -> decltype(f(args...)) {\n        return f(args...);\n    }\n\n    // args...\u3092\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u306b\u6e21\u3057\u3066\u3001\u578bU\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u4f5c\u6210\u3059\u308b\n    template<typename U>\n    static inline constexpr U create_instance() noexcept(noexcept(U{args...})) { return U{args...}; }\n\n    // args2... \u3092\u672b\u5c3e\u306b\u8ffd\u52a0\u3057\u3066\u4f5c\u6210\u3057\u305finteger_sequence\u3092\u8fd4\u3059\n    template<T ...args2>\n    using append = integer_sequence<T, args..., args2...>;\n\n    // args2... \u3092\u5148\u982d\u306b\u8ffd\u52a0\u3057\u3066\u4f5c\u6210\u3057\u305finteger_sequence\u3092\u8fd4\u3059\n    template<T ...args2>\n    using prepend = integer_sequence<T, args2..., args...>;\n\n    // \u4ed6\u306einteger_sequence\u3068\u7d50\u5408\u3057\u3066\u4f5c\u6210\u3057\u305finteger_sequence\u3092\u8fd4\u3059\n    template<typename U, enable_when<is_integer_sequence_t<T, U>{}> = nullptr>\n    using join = typename U::template prepend<args...>;\n\n    // args...\u306en\u756a\u76ee\u306e\u5024\u3092\u8fd4\u3059\u3002\n    static inline constexpr T at(size_type n) noexcept {\n        return ((T[size()]){args...})[n];\n    }\n\n    // \u914d\u5217\u3063\u307d\u3044\u4f55\u304b\u306e\u3088\u3046\u306b\u6271\u3046\u305f\u3081\u306b\n    inline constexpr T operator[](size_type n) const noexcept { return at(n); }\n\n    // \u5148\u982d\u3092\u8fd4\u3059\n    static inline constexpr T front() noexcept { return at(0); }\n\n    // \u672b\u5c3e\u3092\u8fd4\u3059\n    static inline constexpr T back() noexcept { return at(size()-1); }\n\n    // n\u756a\u76ee\u304b\u3089m-1\u756a\u3081\u3092\u5207\u308a\u53d6\u3063\u3066\u4f5c\u6210\u3057\u305finteger_sequence\u3092\u8fd4\u3059\n    template<size_type n = 0, size_type m = size(), enable_when<(n<=m&&m<=size())> = nullptr>\n    using slice = integer_sequence<T, /*args...\u306en\u756a\u76ee\u304b\u3089m-n\u500b*/>;\n\n    // \u5148\u982d\u304b\u3089n\u500b\u3092\u5207\u308a\u53d6\u3063\u3066\u4f5c\u6210\u3057\u305finteger_sequence\u3092\u8fd4\u3059\n    template<std::size_t n = 1>\n    using head = slice<0, n>;\n\n    // \u672b\u5c3e\u304b\u3089n\u500b\u3092\u5207\u308a\u53d6\u3063\u3066\u4f5c\u6210\u3057\u305finteger_sequence\u3092\u8fd4\u3059\n    template<size_type n = 1>\n    using tail = slice<size()-n>;\n\n    // n\u756a\u76ee\u306bargs2...\u3092\u633f\u5165\u3057\u3066\u4f5c\u6210\u3057\u305finteger_sequence\u3092\u8fd4\u3059\n    template<size_type n, T ...args2>\n    using insert = typename head<n>::template append<args2...>::template join<tail<size()-n>>;\n\n    // n\u756a\u76ee\u304b\u3089c\u500b\u3092\u524a\u9664\u3057\u305f\u6b8b\u308a\u3067\u4f5c\u6210\u3057\u305finteger_sequence\u3092\u8fd4\u3059\n    template<size_type n, size_type c = 1>\n    using erase = head<n>::template join<tail<size()-n-c>>;\n\n    // args...\u3092\u9006\u8ee2\u3057\u3066\u4f5c\u6210\u3057\u305finteger_sequence\u3092\u8fd4\u3059\n    using reverse = integer_sequence<T, /*args...\u3092\u9006\u8ee2\u3057\u305f\u3082\u306e*/>;\n\n    // \u6700\u521d\u306bvalue\u304c\u898b\u3064\u304b\u308b\u4f4d\u7f6e\u3092\u63a2\u3059\n    static inline constexpr size_type find(T value, size_type pos = 0) noexcept {\n        return (pos>=size) ? npos: ((at(pos)==value) ? pos : find(value, pos+1));\n    }\n};\n\ntemplate<typename T>\nstruct for_each_;\n\ntemplate<typename T, T ...args>\nstruct for_each_<integer_sequence<T, args...>>\n{\n    struct ignore {\n        inline ignore(...) {}\n    };\n    template<typename F>\n    static inline void call(F&& f) noexcept(noexcept(f(T{}))) {\n        ignore{(f(args),0)...};\n    }\n};\n\n// integer_sequence\u578b\u306e\u4e2d\u8eab\u305d\u308c\u305e\u308c\u3092\u5f15\u6570\u306b\u3057\u3066\u95a2\u6570f\u3092\u5b9f\u884c\u3059\u308b\ntemplate<typename T, typename F>\ninline void for_each(F&& f) noexcept(noexcept(for_each_<T>::call(std::forward<F>(f)))) {\n     return for_each_<T>::call(std::forward<F>(f));\n}\n\n}\n\n\n\n\u307b\u3068\u3093\u3069\u306e\u30e1\u30f3\u30d0\u306b\u3064\u3044\u3066\u306f\u8aac\u660e\u306e\u5fc5\u8981\u306f\u306a\u3044\u304b\u3068\u601d\u3044\u307e\u3059\u304c\u3001\u4e00\u90e8\u3084\u3084\u8907\u96d1\u306a\u90e8\u5206\u3092\u7701\u7565\u3057\u3066\u3042\u308a\u307e\u3059\u3002\n\u8a73\u7d30\u306f\u4ee5\u4e0b\u3067\u8aac\u660e\u3057\u307e\u3059\u3002\n\nmake_integer_sequence\n\n\nc++\n\ntemplate<typename T, T n, std::size_t c>\nstruct make_integer_sequence_\n{\n    using front_half_ = typename make_integer_sequence_<T, n, c/2>::type;\n    using back_half_ = typename make_integer_sequence_<T, static_cast<T>(n+c/2), (c+1)/2>::type;\n    using type = typename front_half_::template join<back_half_>;\n};\n\ntemplate<typename T, T n>\nstruct make_integer_sequence_<T, n, 1>\n{\n    using type = integer_sequence<T, n>;\n};\n\ntemplate<typename T, T n>\nstruct make_integer_sequence_<T, n, 0>\n{\n    using type = integer_sequence<T>;\n};\n\ntemplate<typename T, T n, std::size_t c>\nusing make_integer_sequence = typename make_integer_sequence_<T, n, c>::type;\n\n\n\nstd::make_integer_sequence\u3068\u540c\u3058\u3088\u3046\u306a\u3082\u306e\u3067\u3059\u304c\u3001\u3053\u3093\u306a\u98a8\u306b\u5b9f\u88c5\u3057\u3066\u3044\u307e\u3059\u3002std::make_integer_sequence\u3068\u9055\u3044\u3001\u958b\u59cb\u70b9\u3068\u500b\u6570\u3092\u4e0e\u3048\u308b\u3088\u3046\u306b\u3057\u3066\u3042\u308b\u5206\u82e5\u5e72\u8907\u96d1\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u304c\u3001\u6050\u3089\u304f\u305d\u308c\u307b\u3069\u9055\u3044\u306f\u306a\u3044\u3068\u601d\u308f\u308c\u307e\u3059\u3002\nstd::make_integer_sequence\u306f\u518d\u5e30\u306e\u56de\u6570\u304cO(logn)\u3067\u5b9f\u88c5\u3055\u308c\u308b\u3053\u3068\u304c\u4ed5\u69d8\u3067\u660e\u8a18\u3055\u308c\u3066\u3044\u308b\u306e\u3067\u3001\u3053\u308c\u3082O(logn)\u3067\u5b9f\u88c5\u3059\u308b\u305f\u3081\u306b\u7dda\u5f62\u518d\u5e30\u3067\u306f\u306a\u304f2\u5206\u5272\u3057\u3066\u751f\u6210\u3057\u305f\u3082\u306e\u3092\u7d50\u5408\u3057\u3066\u3044\u307e\u3059\u3002\n\nslice\n\n\nc++\n    template<std::size_t ...indices>\n    struct slice_\n    {\n        using type = integer_sequence<T, at(indices)...>;\n    };\n\n    template<std::size_t n = 0, std::size_t m = size(), enable_when<(n<=m&&m<=size())> = nullptr>\n    using slice = typename make_integer_sequence<std::size_t, n, m-n>::template unpack<slice_>::type;\n\n\n\u307e\u305a\u521d\u3081\u306b\u3001n...m-1\u306einteger_sequence\u3092\u4f5c\u6210\u3057\u3066\u304b\u3089\u3001\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u30af\u30e9\u30b9slice_\u306b\u5bfe\u3057\u3066unpack\u3092\u9069\u7528\u3057\u3001slice_<n, n+1, ..., m-1>\u3092\u4f5c\u6210\u3057\u3066\u3044\u307e\u3059\u3002\nslice_\u306e\u53d7\u3051\u53d6\u3063\u305f\u30d1\u30e9\u30e1\u30fc\u30bf\u30d1\u30c3\u30af\u3092\u5229\u7528\u3059\u308b\u3068\u3001integer_sequence<T, at(n), at(n+1), ..., at(m-1)>\u3092\u5f97\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\u3061\u306a\u307f\u306b\u3001make_integer_sequence\u3067\u958b\u59cb\u5730\u70b9\u4ee5\u5916\u306e\u7bc4\u56f2\u3092\u751f\u6210\u3059\u308b\u3088\u3046\u306b\u3057\u305f\u306e\u306f\u3001\u3053\u3053\u3067\u4f7f\u3046\u305f\u3081\u3067\u3057\u305f\u3002\n\nreverse\n\n\nc++\n    static constexpr std::size_t reverse_(std::size_t n) noexcept { return size()-n-1; }\n    using reverse = typename make_index_sequence<size()>::template map<std::size_t, reverse_>::template unpack<slice_>::type;\n\n\nmake_index_sequence\u3067integer_sequence<std::size_t, 0, 1, 2, ..., size()-1>\u3092\u4f5c\u6210\u3057\u305f\u5f8c\u3001map\u3092\u5229\u7528\u3057\u3066integer_sequence<std::size_t, size()-1, size()-2, size()-3, ..., 1, 0>\u3092\u5f97\u3066\u3044\u307e\u3059\u3002\n\u5f8c\u306fslice\u306e\u5834\u5408\u3068\u540c\u3058\u3088\u3046\u306b\u3067\u304d\u308b\u306e\u3067\u3001slice_\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u30af\u30e9\u30b9\u3092\u518d\u5229\u7528\u3057\u3066\u3044\u307e\u3059\u3002\n\n\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\n\nc++\ninline constexpr int func(int x) noexcept { return x*x; }\n\nint main() {\n    using a = geranium::integer_sequence<int, 3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5>;\n    using b = a::map<int, func>; // geranium::integer_sequence<int, 9, 1, 16, 1, 25, 81, 4, 36, 25, 9, 25>\n    using c = b::slice<1, b::size()-1>; // geranium::integer_sequence<int, 1, 16, 1, 25, 81, 4, 36, 25, 9>\n\n    auto f = [](int x){ std::cout << x << \" \"; };\n    geranium::for_each<a>(f);\n    std::cout << std::endl;\n    geranium::for_each<b>(f);\n    std::cout << std::endl;\n    geranium::for_each<c>(f);\n    std::cout << std::endl;\n}\n\n\n\n\u51fa\u529b\n3 1 4 1 5 9 2 6 5 3 5 \n9 1 16 1 25 81 4 36 25 9 25 \n1 16 1 25 81 4 36 25 9 \n\n\n\n\u3067\u3001\u3053\u308c\u3001\u4f55\u306b\u4f7f\u3046\u306e\uff1f\n\u4f55\u306b\u4f7f\u3048\u3070\u826f\u3044\u306e\u3067\u3057\u3087\u3046\u304b\u3002\u79c1\u81ea\u8eab\u826f\u304f\u5206\u304b\u3063\u3066\u3044\u307e\u305b\u3093\u3002\n\u30bf\u30d7\u30eb\u3092\u5c55\u958b\u3059\u308b\u3068\u304b\u306a\u3089std::integer_sequence\u3055\u3048\u3042\u308c\u3070\u5927\u4f53\u4e8b\u8db3\u308a\u307e\u3059\u3057\u3001\u9759\u7684\u306a\u914d\u5217\u304c\u6b32\u3057\u3044\u306a\u3089constexpr\u3067\u7528\u610f\u3059\u308c\u3070\u3044\u3044\u3088\u3046\u306a\u3002\n\u3076\u3063\u3061\u3083\u3051\u3001\u300c\u3067\u304d\u308b\u304b\u3089\u3084\u3063\u3066\u307f\u305f\u304b\u3063\u305f\u300d\u3060\u3051\u3067\u3059\u3002\n\u3067\u3082\u3001\u3053\u3093\u306a\u3053\u3068\u304c\u51fa\u6765\u308b\u3068\u5206\u304b\u3063\u3066\u3044\u308b\u3068\u3001\u3082\u3057\u304b\u3057\u305f\u3089\u8ab0\u304b\u304c\u3001\u30d4\u30f3\u30dd\u30a4\u30f3\u30c8\u3067\u300c\u3042\u3042\u3001\u3053\u3046\u3044\u3046\u6a5f\u80fd\u304c\u3042\u3063\u305f\u3089\u300d\u3068\u601d\u3063\u305f\u6642\u306b\u4f7f\u3048\u308b\u304b\u3082\u77e5\u308c\u307e\u305b\u3093\u3002\n\u305d\u3093\u306a\u65e5\u306f\u6c38\u9060\u306b\u6765\u306a\u3044\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u304c\u3002\n\u6b21\u56de\u306f\u4eca\u56de\u3068\u540c\u3058\u3088\u3046\u306a\u30e1\u30bf\u914d\u5217\u306e\u3001\u578b\u30d0\u30fc\u30b8\u30e7\u30f3\u3067\u3082\u4f5c\u308d\u3046\u304b\u3068\u601d\u3044\u307e\u3059\u3002\n\u305d\u308c\u3067\u306f\u672c\u65e5\u306f\u3053\u306e\u8fba\u3067\n\u4eca\u56de\u306f\u53ef\u5909\u9577\u5f15\u6570\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8(variadic template)\u306e\u8a71\u3067\u3059\u3002\n\n#std::integer_sequence\n\nC++14\u3067\u65b0\u3057\u304f`std::integer_sequence`\u3068\u3044\u3046\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u30af\u30e9\u30b9\u304c\u8ffd\u52a0\u3055\u308c\u307e\u3057\u305f\u3002\n\n```cpp:c++\nnamespace std {\n\ntemplate<typename T, T ...Ints>\nclass integer_sequence {\npublic:\n    using value_type = T;\n    static constexpr size_t size() noexcept { return sizeof...(Ints); }\n};\n\ntemplate<size_t ...Ints>\nusing index_sequence = integer_sequence<size_t, Ints...>;\n\ntemplate<typename T, T N>\nusing make_integer_sequence = std::integer_sequence<T, /* 0, 1, 2, 3, ..., N */ >;\n\ntemplate<size_t N>\nusing make_index_sequence = make_integer_sequence<size_t, N>;\n\ntemplate<class... T>\nusing index_sequence_for = std::make_index_sequence<sizeof...(T)>;\n\n}\n```\n\n\u3053\u308c\u3092\u5229\u7528\u3059\u308c\u3070\u3001\u30bf\u30d7\u30eb\u3092\u5c55\u958b\u3057\u3066\u95a2\u6570\u306e\u5f15\u6570\u306b\u3059\u308b\u306a\u3093\u3066\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\n```cpp:c++\n\ntemplate<typename F, typename Tuple, std::size_t ...Ints>\nvoid invoke_(F&& f, Tuple&& t, std::index_sequence<Ints...>) {\n    using std::get;\n    f(get<Ints>(t)...);\n}\n\ntemplate<typename F, typename Tuple>\nvoid invoke(F&& f, Tuple&& t) {\n    using std::tuple_size;\n    using indices = std::make_index_sequence<tuple_size<Tuple>::value>;\n    invoke_(std::forward<F>(f), std::forward<Tuple>(t), indices{});\n}\n\nvoid func(char, int, long long) {\n    // ...\n}\n\nint main() {\n    auto t = std::make_tuple('\\0', 0, 0ll);\n    invoke(func, t); // func('\\0', 0, 0ll) \u304c\u547c\u3070\u308c\u308b\n}\n\n```\n\nC++14\u3067\u8ffd\u52a0\u3055\u308c\u305f\u3068\u306f\u8a00\u3048\u3001\u30b3\u30a2\u8a00\u8a9e\u306b\u4f55\u304b\u304c\u8ffd\u52a0\u3055\u308c\u305f\u8a33\u3067\u306f\u306a\u304f\u5358\u306b\u6a19\u6e96\u30e9\u30a4\u30d6\u30e9\u30ea\u5165\u308a\u3057\u305f\u3060\u3051\u306a\u306e\u3067\u3001C++11\u306e\u6a5f\u80fd\u3067\u3082\u4f5c\u6210\u53ef\u80fd\u3067\u3059\u3002\n\u4e0a\u8a18\u306e\u4f8b\u306b\u304a\u3051\u308b`invoke`\u306e\u3088\u3046\u306a\u4e8b\u3092\u3084\u308a\u305f\u3044\u6642\u306f\u3001C++11\u3067\u306f\u540c\u3058\u3088\u3046\u306a\u30af\u30e9\u30b9\u3092\u4f5c\u3089\u3056\u308b\u3092\u3048\u307e\u305b\u3093\u3002\n\n\u307e\u3042\u3001\u305d\u308d\u305d\u308dC++14\u4f7f\u304a\u3046\u305c\u3063\u3066\u8a71\u3067\u7d42\u308f\u308a\u305f\u3044\u3068\u3053\u308d\u3067\u3059\u304c\u3002\n\u8da3\u5473\u3067\u3084\u308b\u5206\u306b\u306f\u305d\u308c\u3067\u3082\u3044\u3044\u3093\u3067\u3059\u304c\u2026\u2026\u3001\u4ed5\u4e8b\u3067\u306f\u306a\u304b\u306a\u304b\u4f7f\u308f\u305b\u3066\u3082\u3089\u3048\u306a\u3044\u4eba\u3082\u591a\u3044\u3067\u3057\u3087\u3046\u3002\u4e3b\u306b\u3001RHEL6\u3068\u304b\u3001VC++\u3068\u304b\u306e\u305b\u3044\u3067\u3002\n\u79c1\u306a\u3093\u304bC++11\u3059\u3089\u4f7f\u308f\u305b\u3066\u3082\u3089\u3048\u307e\u305b\u3093\u3002\n\n#variadic template\u306e\u7a2e\u985e\nvariadic template\u306b\u306f\u4e8c\u7a2e\u985e\u3042\u308a\u307e\u3059\u3002\u4e00\u3064\u76ee\u306f\u3001\n\n```cpp:A\ntemplate<\u578b\u540d ...\u4eee\u5f15\u6570\u540d>\n```\n\u3068\u66f8\u304f\u3082\u306e\u3002\u3082\u3046\u4e00\u3064\u306f\u3001\n\n```cpp:B\ntemplate<typename ...\u4eee\u5f15\u6570\u540d>\ntemplate<class ...\u4eee\u5f15\u6570\u540d>\n```\n\u3068\u66f8\u304f\u3082\u306e\u3002\n\n```cpp\ntemplate<template<class ...> class ...\u4eee\u5f15\u6570\u540d>\ntemplate<template<template<class ...> class ...> class ...\u4eee\u5f15\u6570\u540d>\n```\n\u306a\u3093\u3066\u3082\u306e\u3082\u4f5c\u308d\u3046\u3068\u601d\u3048\u3070\u4f5c\u308c\u308b\u306e\u3067\u30cd\u30b9\u30c8\u3092\u8003\u3048\u308c\u3070\u3044\u304f\u3089\u3067\u3082\u30d1\u30bf\u30fc\u30f3\u306f\u5897\u3084\u305b\u308b\u306e\u3067\u3059\u304c\u3001\u3055\u3059\u304c\u306b\u305d\u3093\u306a\u3053\u3068\u307e\u3067\u8003\u3048\u3066\u3082\u4ed5\u65b9\u3042\u308a\u307e\u305b\u3093\u3002\nA\u3068B\u306e\u9055\u3044\u306f\u3001\u30b3\u30f3\u30d1\u30a4\u30eb\u6642\u5b9a\u6570\u3092\u6e21\u3059\u304b\u3001\u578b\u3092\u6e21\u3059\u304b\u3001\u3068\u3044\u3046\u70b9\u3067\u3059\u3002\n\u4eca\u56de\u306f\u3068\u308a\u3042\u3048\u305a\u3001`std::integer_sequence`\u306e\u6a5f\u80fd\u62e1\u5f35\u7248\u306e\u3088\u3046\u306a\u3001\u5b9a\u6570\u30d0\u30fc\u30b8\u30e7\u30f3\u306e\u30af\u30e9\u30b9\u3092\u8003\u3048\u307e\u3059\u3002\n\n#\u5b9a\u6570\u306e\u914d\u5217\u3092\u6271\u3046\u30af\u30e9\u30b9\n\n`std::integer_sequence`\u306e\u6a5f\u80fd\u62e1\u5f35\u7248\u306a\u306e\u3067\u3001\u540d\u524d\u3082`integer_sequence`\u306b\u3057\u307e\u3057\u3087\u3046\u3002\u305f\u3060\u3057\u540d\u524d\u7a7a\u9593\u306f\u5206\u3051\u307e\u3059\u3002\n\u4e00\u65b9\u3001\u578b\u306e\u914d\u5217\u3092\u6271\u3046\u30af\u30e9\u30b9\u306f\u3001`type_sequence`\u306b\u3057\u307e\u3059\u3002\u3053\u3061\u3089\u306b\u95a2\u3057\u3066\u306f\u6b21\u56de\u306e\u8a18\u4e8b\u3067\u6271\u3044\u305f\u3044\u3068\u601d\u3044\u307e\u3059\u3002\n\n\u9577\u3005\u3068\u8aac\u660e\u3092\u3059\u308b\u3088\u308a\u898b\u305f\u65b9\u304c\u65e9\u305d\u3046\u306a\u306e\u3067\u3001\u65e9\u901f\u30b3\u30fc\u30c9\u3092\u898b\u3066\u307f\u307e\u3059\u3002\n\n```cpp:c++\nnamespace geranium  {\n\n// C++14\u306estd::enable_if_t\u3068\u540c\u3058\ntemplate<bool cond, typename T = void>\nusing enable_if_t = typename std::enable_if<cond, T>::type;\n\ntemplate<bool cond>\nusing enable_when = enable_if_t<cond, std::nullptr_t>;\n\n// #define GERANIUM_ENABLE_WHEN(cond) ::geranium::enable_when<(cond)> = nullptr\n// \u307f\u305f\u3044\u306a\u30de\u30af\u30ed\u304c\u3042\u3063\u3066\u3082\u3044\u3044\u304b\u3082\u77e5\u308c\u306a\u3044\u3051\u3069\u3001\u30de\u30af\u30ed\u3060\u3057\u306a\u3042\u2026\u2026\n\n// \u524d\u65b9\u5ba3\u8a00\ntemplate<typename ...Args>\nclass type_sequence;\n\n// \u524d\u65b9\u5ba3\u8a00\ntemplate<typename T, T ...args>\nclass integer_sequence;\n\n// U\u304c\u578bT\u306einteger_sequence\u304b\u3069\u3046\u304b\u8abf\u3079\u308b\ntemplate<typename T, typename U>\nstruct is_integer_sequence: std::false_type {};\ntemplate<typename T, T ...args>\nstruct is_integer_sequence<T, integer_sequence<T, args...>>: std::true_type {};\ntemplate<typename T, typename U>\nusing is_integer_sequence_t = typename is_integer_sequence<T, U>::type;\n\n// std::index_sequence\u3068\u540c\u3058\ntemplate<std::size_t ...args>\nusing index_sequence = integer_sequence<std::size_t, args...>;\n\n// std::make_integer_sequence\u3068\u5c11\u3057\u7570\u306a\u308a\u3001n~n+c-1\u306e\u7bc4\u56f2\u3067\u4f5c\u6210\u3059\u308b\ntemplate<typename T, T n, std::size_t c>\nusing make_integer_sequence = std::integer_sequence<T, /* n, n+1, n+2, ..., n+c-1 */ >;\n\n// std::make_index_sequence\u3068\u540c\u3058\ntemplate<std::size_t n>\nusing make_index_sequence = make_integer_sequence<std::size_t, 0, n>;\n\n// std::index_sequence_for\u3068\u540c\u3058\ntemplate<class... Args>\nusing index_sequence_for = std::make_index_sequence<sizeof...(Args)>;\n\ntemplate<typename T, T ...args>\nclass integer_sequence {\npublic:\n    using value_type = T;\n    using size_type = std::size_t;\n\n    static constexpr size_type npos = static_cast<size_type>(-1);\n    static inline constexpr size_type size() noexcept { return sizeof...(args); }\n\n    // \u30c6\u30f3\u30d7\u30ec\u30fc\u30c8U\u3092\u7279\u6b8a\u5316\u3057\u305f\u30af\u30e9\u30b9\u3092\u8fd4\u3059\n    template<template<T ...> class U> using unpack = U<args...>;\n\n    // args...\u305d\u308c\u305e\u308c\u306bconstexpr\u95a2\u6570\u3092\u9069\u7528\u3057\u3066\u4f5c\u6210\u3057\u305finteger_sequence\u3092\u8fd4\u3059\n    template<typename U, U(f)(T)> using map = integer_sequence<U, f(args)...>;\n\n    // \u30c6\u30f3\u30d7\u30ec\u30fc\u30c8U\u3092\u5229\u7528\u3057\u3066\u3001args...\u305d\u308c\u305e\u308c\u304b\u3089\u751f\u6210\u3057\u305f\u5024\u3092\u4e26\u3079\u305finteger_sequence\u3092\u8fd4\u3059\n    template<template<T> class U>\n    using value_map = integer_sequence<decltype(U<T{}>::value), U<args>::value ...>;\n\n    // \u30c6\u30f3\u30d7\u30ec\u30fc\u30c8U\u3092\u5229\u7528\u3057\u3066\u3001args...\u305d\u308c\u305e\u308c\u304b\u3089\u751f\u6210\u3057\u305f\u578b\u3092\u4e26\u3079\u305ftype_sequence\u3092\u8fd4\u3059\n    template<template<T> class U>\n    using type_map = type_sequence<typename U<args>::type ...>;\n\n    // args...\u3092\u5f15\u6570\u306b\u53d6\u308b\u95a2\u6570\u3092\u5b9f\u884c\u3059\u308b\n    template<typename F>\n    static inline constexpr auto exec(F&& f) noexcept(noexcept(f(args...))) -> decltype(f(args...)) {\n        return f(args...);\n    }\n\n    // args...\u3092\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u306b\u6e21\u3057\u3066\u3001\u578bU\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u4f5c\u6210\u3059\u308b\n    template<typename U>\n    static inline constexpr U create_instance() noexcept(noexcept(U{args...})) { return U{args...}; }\n\n    // args2... \u3092\u672b\u5c3e\u306b\u8ffd\u52a0\u3057\u3066\u4f5c\u6210\u3057\u305finteger_sequence\u3092\u8fd4\u3059\n    template<T ...args2>\n    using append = integer_sequence<T, args..., args2...>;\n\n    // args2... \u3092\u5148\u982d\u306b\u8ffd\u52a0\u3057\u3066\u4f5c\u6210\u3057\u305finteger_sequence\u3092\u8fd4\u3059\n    template<T ...args2>\n    using prepend = integer_sequence<T, args2..., args...>;\n\n    // \u4ed6\u306einteger_sequence\u3068\u7d50\u5408\u3057\u3066\u4f5c\u6210\u3057\u305finteger_sequence\u3092\u8fd4\u3059\n    template<typename U, enable_when<is_integer_sequence_t<T, U>{}> = nullptr>\n    using join = typename U::template prepend<args...>;\n\n    // args...\u306en\u756a\u76ee\u306e\u5024\u3092\u8fd4\u3059\u3002\n    static inline constexpr T at(size_type n) noexcept {\n        return ((T[size()]){args...})[n];\n    }\n\n    // \u914d\u5217\u3063\u307d\u3044\u4f55\u304b\u306e\u3088\u3046\u306b\u6271\u3046\u305f\u3081\u306b\n    inline constexpr T operator[](size_type n) const noexcept { return at(n); }\n\n    // \u5148\u982d\u3092\u8fd4\u3059\n    static inline constexpr T front() noexcept { return at(0); }\n\n    // \u672b\u5c3e\u3092\u8fd4\u3059\n    static inline constexpr T back() noexcept { return at(size()-1); }\n\n    // n\u756a\u76ee\u304b\u3089m-1\u756a\u3081\u3092\u5207\u308a\u53d6\u3063\u3066\u4f5c\u6210\u3057\u305finteger_sequence\u3092\u8fd4\u3059\n    template<size_type n = 0, size_type m = size(), enable_when<(n<=m&&m<=size())> = nullptr>\n    using slice = integer_sequence<T, /*args...\u306en\u756a\u76ee\u304b\u3089m-n\u500b*/>;\n\n    // \u5148\u982d\u304b\u3089n\u500b\u3092\u5207\u308a\u53d6\u3063\u3066\u4f5c\u6210\u3057\u305finteger_sequence\u3092\u8fd4\u3059\n    template<std::size_t n = 1>\n    using head = slice<0, n>;\n\n    // \u672b\u5c3e\u304b\u3089n\u500b\u3092\u5207\u308a\u53d6\u3063\u3066\u4f5c\u6210\u3057\u305finteger_sequence\u3092\u8fd4\u3059\n    template<size_type n = 1>\n    using tail = slice<size()-n>;\n\n    // n\u756a\u76ee\u306bargs2...\u3092\u633f\u5165\u3057\u3066\u4f5c\u6210\u3057\u305finteger_sequence\u3092\u8fd4\u3059\n    template<size_type n, T ...args2>\n    using insert = typename head<n>::template append<args2...>::template join<tail<size()-n>>;\n\n    // n\u756a\u76ee\u304b\u3089c\u500b\u3092\u524a\u9664\u3057\u305f\u6b8b\u308a\u3067\u4f5c\u6210\u3057\u305finteger_sequence\u3092\u8fd4\u3059\n    template<size_type n, size_type c = 1>\n    using erase = head<n>::template join<tail<size()-n-c>>;\n\n    // args...\u3092\u9006\u8ee2\u3057\u3066\u4f5c\u6210\u3057\u305finteger_sequence\u3092\u8fd4\u3059\n    using reverse = integer_sequence<T, /*args...\u3092\u9006\u8ee2\u3057\u305f\u3082\u306e*/>;\n\n    // \u6700\u521d\u306bvalue\u304c\u898b\u3064\u304b\u308b\u4f4d\u7f6e\u3092\u63a2\u3059\n    static inline constexpr size_type find(T value, size_type pos = 0) noexcept {\n        return (pos>=size) ? npos: ((at(pos)==value) ? pos : find(value, pos+1));\n    }\n};\n\ntemplate<typename T>\nstruct for_each_;\n\ntemplate<typename T, T ...args>\nstruct for_each_<integer_sequence<T, args...>>\n{\n    struct ignore {\n        inline ignore(...) {}\n    };\n    template<typename F>\n    static inline void call(F&& f) noexcept(noexcept(f(T{}))) {\n        ignore{(f(args),0)...};\n    }\n};\n\n// integer_sequence\u578b\u306e\u4e2d\u8eab\u305d\u308c\u305e\u308c\u3092\u5f15\u6570\u306b\u3057\u3066\u95a2\u6570f\u3092\u5b9f\u884c\u3059\u308b\ntemplate<typename T, typename F>\ninline void for_each(F&& f) noexcept(noexcept(for_each_<T>::call(std::forward<F>(f)))) {\n     return for_each_<T>::call(std::forward<F>(f));\n}\n\n}\n\n```\n\n\u307b\u3068\u3093\u3069\u306e\u30e1\u30f3\u30d0\u306b\u3064\u3044\u3066\u306f\u8aac\u660e\u306e\u5fc5\u8981\u306f\u306a\u3044\u304b\u3068\u601d\u3044\u307e\u3059\u304c\u3001\u4e00\u90e8\u3084\u3084\u8907\u96d1\u306a\u90e8\u5206\u3092\u7701\u7565\u3057\u3066\u3042\u308a\u307e\u3059\u3002\n\u8a73\u7d30\u306f\u4ee5\u4e0b\u3067\u8aac\u660e\u3057\u307e\u3059\u3002\n\n\n##`make_integer_sequence`\n\n```cpp:c++\n\ntemplate<typename T, T n, std::size_t c>\nstruct make_integer_sequence_\n{\n    using front_half_ = typename make_integer_sequence_<T, n, c/2>::type;\n    using back_half_ = typename make_integer_sequence_<T, static_cast<T>(n+c/2), (c+1)/2>::type;\n    using type = typename front_half_::template join<back_half_>;\n};\n\ntemplate<typename T, T n>\nstruct make_integer_sequence_<T, n, 1>\n{\n    using type = integer_sequence<T, n>;\n};\n\ntemplate<typename T, T n>\nstruct make_integer_sequence_<T, n, 0>\n{\n    using type = integer_sequence<T>;\n};\n\ntemplate<typename T, T n, std::size_t c>\nusing make_integer_sequence = typename make_integer_sequence_<T, n, c>::type;\n\n```\n\n`std::make_integer_sequence`\u3068\u540c\u3058\u3088\u3046\u306a\u3082\u306e\u3067\u3059\u304c\u3001\u3053\u3093\u306a\u98a8\u306b\u5b9f\u88c5\u3057\u3066\u3044\u307e\u3059\u3002`std::make_integer_sequence`\u3068\u9055\u3044\u3001\u958b\u59cb\u70b9\u3068\u500b\u6570\u3092\u4e0e\u3048\u308b\u3088\u3046\u306b\u3057\u3066\u3042\u308b\u5206\u82e5\u5e72\u8907\u96d1\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u304c\u3001\u6050\u3089\u304f\u305d\u308c\u307b\u3069\u9055\u3044\u306f\u306a\u3044\u3068\u601d\u308f\u308c\u307e\u3059\u3002\n`std::make_integer_sequence`\u306f\u518d\u5e30\u306e\u56de\u6570\u304cO(logn)\u3067\u5b9f\u88c5\u3055\u308c\u308b\u3053\u3068\u304c\u4ed5\u69d8\u3067\u660e\u8a18\u3055\u308c\u3066\u3044\u308b\u306e\u3067\u3001\u3053\u308c\u3082O(logn)\u3067\u5b9f\u88c5\u3059\u308b\u305f\u3081\u306b\u7dda\u5f62\u518d\u5e30\u3067\u306f\u306a\u304f2\u5206\u5272\u3057\u3066\u751f\u6210\u3057\u305f\u3082\u306e\u3092\u7d50\u5408\u3057\u3066\u3044\u307e\u3059\u3002\n\n##`slice`\n\n```cpp:c++\n    template<std::size_t ...indices>\n    struct slice_\n    {\n        using type = integer_sequence<T, at(indices)...>;\n    };\n\n    template<std::size_t n = 0, std::size_t m = size(), enable_when<(n<=m&&m<=size())> = nullptr>\n    using slice = typename make_integer_sequence<std::size_t, n, m-n>::template unpack<slice_>::type;\n```\n\n\u307e\u305a\u521d\u3081\u306b\u3001n...m-1\u306e`integer_sequence`\u3092\u4f5c\u6210\u3057\u3066\u304b\u3089\u3001\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u30af\u30e9\u30b9`slice_`\u306b\u5bfe\u3057\u3066`unpack`\u3092\u9069\u7528\u3057\u3001`slice_<n, n+1, ..., m-1>`\u3092\u4f5c\u6210\u3057\u3066\u3044\u307e\u3059\u3002\n`slice_`\u306e\u53d7\u3051\u53d6\u3063\u305f\u30d1\u30e9\u30e1\u30fc\u30bf\u30d1\u30c3\u30af\u3092\u5229\u7528\u3059\u308b\u3068\u3001`integer_sequence<T, at(n), at(n+1), ..., at(m-1)>`\u3092\u5f97\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\u3061\u306a\u307f\u306b\u3001make_integer_sequence\u3067\u958b\u59cb\u5730\u70b9\u4ee5\u5916\u306e\u7bc4\u56f2\u3092\u751f\u6210\u3059\u308b\u3088\u3046\u306b\u3057\u305f\u306e\u306f\u3001\u3053\u3053\u3067\u4f7f\u3046\u305f\u3081\u3067\u3057\u305f\u3002\n\n##`reverse`\n\n\n```cpp:c++\n    static constexpr std::size_t reverse_(std::size_t n) noexcept { return size()-n-1; }\n    using reverse = typename make_index_sequence<size()>::template map<std::size_t, reverse_>::template unpack<slice_>::type;\n```\n\n`make_index_sequence`\u3067`integer_sequence<std::size_t, 0, 1, 2, ..., size()-1>`\u3092\u4f5c\u6210\u3057\u305f\u5f8c\u3001`map`\u3092\u5229\u7528\u3057\u3066`integer_sequence<std::size_t, size()-1, size()-2, size()-3, ..., 1, 0>`\u3092\u5f97\u3066\u3044\u307e\u3059\u3002\n\u5f8c\u306f`slice`\u306e\u5834\u5408\u3068\u540c\u3058\u3088\u3046\u306b\u3067\u304d\u308b\u306e\u3067\u3001`slice_`\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u30af\u30e9\u30b9\u3092\u518d\u5229\u7528\u3057\u3066\u3044\u307e\u3059\u3002\n\n#\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\n\n```cpp:c++\ninline constexpr int func(int x) noexcept { return x*x; }\n\nint main() {\n    using a = geranium::integer_sequence<int, 3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5>;\n    using b = a::map<int, func>; // geranium::integer_sequence<int, 9, 1, 16, 1, 25, 81, 4, 36, 25, 9, 25>\n    using c = b::slice<1, b::size()-1>; // geranium::integer_sequence<int, 1, 16, 1, 25, 81, 4, 36, 25, 9>\n\n    auto f = [](int x){ std::cout << x << \" \"; };\n    geranium::for_each<a>(f);\n    std::cout << std::endl;\n    geranium::for_each<b>(f);\n    std::cout << std::endl;\n    geranium::for_each<c>(f);\n    std::cout << std::endl;\n}\n```\n\n```text:\u51fa\u529b\n3 1 4 1 5 9 2 6 5 3 5 \n9 1 16 1 25 81 4 36 25 9 25 \n1 16 1 25 81 4 36 25 9 \n```\n\n#\u3067\u3001\u3053\u308c\u3001\u4f55\u306b\u4f7f\u3046\u306e\uff1f\n\n\u4f55\u306b\u4f7f\u3048\u3070\u826f\u3044\u306e\u3067\u3057\u3087\u3046\u304b\u3002\u79c1\u81ea\u8eab\u826f\u304f\u5206\u304b\u3063\u3066\u3044\u307e\u305b\u3093\u3002\n\u30bf\u30d7\u30eb\u3092\u5c55\u958b\u3059\u308b\u3068\u304b\u306a\u3089std::integer_sequence\u3055\u3048\u3042\u308c\u3070\u5927\u4f53\u4e8b\u8db3\u308a\u307e\u3059\u3057\u3001\u9759\u7684\u306a\u914d\u5217\u304c\u6b32\u3057\u3044\u306a\u3089constexpr\u3067\u7528\u610f\u3059\u308c\u3070\u3044\u3044\u3088\u3046\u306a\u3002\n\u3076\u3063\u3061\u3083\u3051\u3001\u300c\u3067\u304d\u308b\u304b\u3089\u3084\u3063\u3066\u307f\u305f\u304b\u3063\u305f\u300d\u3060\u3051\u3067\u3059\u3002\n\u3067\u3082\u3001\u3053\u3093\u306a\u3053\u3068\u304c\u51fa\u6765\u308b\u3068\u5206\u304b\u3063\u3066\u3044\u308b\u3068\u3001\u3082\u3057\u304b\u3057\u305f\u3089\u8ab0\u304b\u304c\u3001\u30d4\u30f3\u30dd\u30a4\u30f3\u30c8\u3067\u300c\u3042\u3042\u3001\u3053\u3046\u3044\u3046\u6a5f\u80fd\u304c\u3042\u3063\u305f\u3089\u300d\u3068\u601d\u3063\u305f\u6642\u306b\u4f7f\u3048\u308b\u304b\u3082\u77e5\u308c\u307e\u305b\u3093\u3002\n\u305d\u3093\u306a\u65e5\u306f\u6c38\u9060\u306b\u6765\u306a\u3044\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u304c\u3002\n\n\u6b21\u56de\u306f\u4eca\u56de\u3068\u540c\u3058\u3088\u3046\u306a\u30e1\u30bf\u914d\u5217\u306e\u3001\u578b\u30d0\u30fc\u30b8\u30e7\u30f3\u3067\u3082\u4f5c\u308d\u3046\u304b\u3068\u601d\u3044\u307e\u3059\u3002\n\u305d\u308c\u3067\u306f\u672c\u65e5\u306f\u3053\u306e\u8fba\u3067\n", "tags": ["C++14", "C++14", "C++11", "\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u30e1\u30bf\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0"]}