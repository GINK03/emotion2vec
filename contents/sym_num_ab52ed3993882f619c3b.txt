{"context": "\n\n\u306f\u3058\u3081\u306b\nISLisp\u306e\u7d44\u8fbc\u307f\u95a2\u6570\u3001\u7279\u6b8a\u5f62\u5f0f\u306b\u3064\u3044\u3066\u4e94\u6708\u96e8\u5f0f\u306b\u66f8\u304d\u8fbc\u3093\u3067\u3044\u304d\u307e\u3059\u3002\u5168\u90e8\u3092\u3044\u3063\u307a\u3093\u306b\u66f8\u304d\u4e0a\u3052\u308b\u306e\u306f\u305f\u3044\u3078\u3093\u305d\u3046\u3067\u3057\u305f\u3002\u6642\u9593\u306e\u3042\u308b\u6642\u306b\u7d30\u5207\u308c\u6642\u9593\u3092\u5229\u7528\u3057\u3066\u66f8\u3044\u3066\u3044\u3053\u3046\u3068\u601d\u3063\u3066\u3044\u307e\u3059\u3002\n\n\u7de8\u96c6\u30ea\u30af\u30a8\u30b9\u30c8\u3000\u6b53\u8fce\n\u7b46\u8005\u306f\u308f\u308a\u3068\u304a\u3063\u3061\u3087\u3053\u3061\u3087\u3044\u3067\u3059\u3002\u9593\u9055\u3063\u305f\u8a18\u8ff0\u3001\u30b9\u30da\u30eb\u30df\u30b9\u306a\u3069\u3042\u308a\u307e\u3057\u305f\u3089\u3001\u7de8\u96c6\u30ea\u30af\u30a8\u30b9\u30c8\u304a\u9001\u308a\u3044\u305f\u3060\u3051\u308c\u3070\u5e78\u3044\u3067\u3059\u3002\n\nFuntions\n\n(functionp obj) -> boolean\nobj\u304c\u666e\u901a\u306e\u95a2\u6570\u3042\u308b\u3044\u306f\u5305\u62ec\u95a2\u6570\u3067\u3042\u308b\u3068\u304d\u306bt\u3092\u8fd4\u3057\u3001\u305d\u3046\u3067\u306a\u3051\u308c\u3070nil\u3092\u8fd4\u3057\u307e\u3059\u3002\n\n\u4f8b\n> (functionp (function car))\nT\n> \n\n\n\n(function fn) -> function\nfn\u304c\u95a2\u6570\u540d\u3067\u3042\u308b\u3068\u304d\u3001\u305d\u306e\u5b9f\u4f53\u3092\u8fd4\u3057\u307e\u3059\u3002#'\u3068\u66f8\u304f\u7701\u7565\u8a18\u6cd5\u3082\u3042\u308a\u307e\u3059\u3002\n\n\u4f8b\n> (function -)\n<subr>\n> (funcall (function -) 3)\n-3\n> (apply #'- '(4 3))\n1\n> \n\n\nISLisp\u306fCommon Lisp\u3068\u540c\u69d8\u306bLISP-2\u3068\u8a00\u308f\u308c\u308b\u3082\u306e\u3067\u3059\u3002\u95a2\u6570\u540d\u3068\u5909\u6570\u540d\u3068\u304c\u9055\u3046\u540d\u524d\u7a7a\u9593\u3067\u7ba1\u7406\u3055\u308c\u3066\u3044\u307e\u3059\u3002\u5909\u6570\u540d\u306f\u305d\u306e\u307e\u307e\u3067\u4f7f\u3048\u308b\u306e\u3067\u3059\u304c\u3001\u95a2\u6570\u540d\u304b\u3089\u305d\u306e\u5b9f\u4f53\u3092\u547c\u3073\u51fa\u3059\u3068\u304d\u306b\u306ffunction\u3092\u4ed8\u3051\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\n\n(lambda lambda-list form) -> function\n\u30e9\u30e0\u30c0\u5f0f\u3067\u3059\u3002Scheme\u306b\u304a\u3051\u308b\u305d\u308c\u3068\u4f7f\u3044\u65b9\u306f\u540c\u3058\u3067\u3059\u3002\u95a2\u6570\u3067\u306f\u3042\u308a\u307e\u3059\u304cfunction\u3092\u4ed8\u52a0\u3059\u308b\u5fc5\u8981\u306f\u3042\u308a\u307e\u305b\u3093\u3002\u305d\u306e\u307e\u307e\u4f7f\u3048\u307e\u3059\u3002\n\n\u4f8b\n> ((lambda (x y) (+ x y)) 3 4)\n7\n> \n\n\n\n(labels ((fn lambda-list form) ...) body-form)\n\n\u5c40\u6240\u5b9a\u7fa9\u3092\u3059\u308b\u7279\u6b8a\u5f62\u5f0f\u3067\u3059\u3002\u518d\u5e30\u3059\u308b\u5c40\u6240\u95a2\u6570\u5b9a\u7fa9\u3092\u66f8\u304f\u3068\u304d\u306b\u4f7f\u3044\u307e\u3059\u3002\n\n\u4f8b\n(labels ((evenp (n)\n                (if (= n 0)\n                    t\n                    (oddp (- n 1))))\n         (oddp (n)\n               (if (= n 0)\n                   nil\n                   (evenp (- n 1)))))\n  (evenp 88))\n\n> T\n>\n\n\n\n(flet ((fn lambda-list form) ...) body-form)\n\nlabels\u3068\u540c\u69d8\u306b\u5c40\u6240\u7684\u95a2\u6570\u5b9a\u7fa9\u306b\u4f7f\u3048\u307e\u3059\u3002flet\u304c\u7570\u306a\u308b\u306e\u306f\u518d\u5e30\u7684\u306a\u5b9a\u7fa9\u306b\u306f\u4f7f\u3048\u306a\u3044\u3053\u3068\u3067\u3059\u3002\u5c40\u6240\u5b9a\u7fa9\u304c\u53c2\u7167\u3059\u308b\u306e\u306f\u76f4\u524d\u306e\u5b9a\u7fa9\u3067\u3059\u3002\u4f8b\u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n\n\u4f8b\n> (flet ((f (x) (+ x 3)))\n    (flet ((f (x) (+ x (f x))))\n      (f 7)))\n17\n>\n\n\n\n(apply function obj... list) ->  object\n\u95a2\u6570\u306b\u5f15\u6570\u3092\u9069\u7528\u3057\u3066\u305d\u306e\u7d50\u679c\u3092\u8fd4\u3057\u307e\u3059\u3002\u4e0e\u3048\u308b\u5f15\u6570\u306f\u6700\u521d\u306f\u500b\u3005\u306e\u5f15\u6570\u3067\u3001\u6700\u5f8c\u306f\u30ea\u30b9\u30c8\u306b\u307e\u3068\u3081\u305f\u5f15\u6570\u3067\u3059\u3002\u30ea\u30b9\u30c8\u3060\u3051\u3067\u3082\u69cb\u3044\u307e\u305b\u3093\u3002\n\n\u4f8b\n> (apply #'max '(1 2 3 4 5))\n5\n> (apply #'max 1 2 '(3 4 5))\n5\n> \n\n\n\n(funcall function obj ...) -> object\n\u95a2\u6570\u306b\u5f15\u6570\u3092\u9069\u7528\u3057\u3066\u305d\u306e\u7d50\u679c\u3092\u8fd4\u3057\u307e\u3059\u3002apply\u3068\u4f3c\u3066\u3044\u307e\u3059\u304cfuncall\u3067\u306f\u30ea\u30b9\u30c8\u306f\u4f7f\u3044\u307e\u305b\u3093\u3002funcall\u306fappy\u3092\u4f7f\u3063\u3066\u6b21\u306e\u3088\u3046\u306b\u5b9a\u7fa9\u3055\u308c\u307e\u3059\u3002\n\n\u5b9a\u7fa9\n(defun funcall (functioon :rest arguments)\n  (apply function arguments))\n\n\n\n\u4f8b\n> (funcall #'+ 1 2 3)\n6\n> \n\n\n\nDefining operators\n\n(defconstant name form) -> symbol\n\u5b9a\u6570\u3092\u5b9a\u7fa9\u3057\u307e\u3059\u3002\u305d\u306e\u5b9a\u6570\u306e\u5024\u3092\u5909\u66f4\u3057\u3088\u3046\u3068\u3059\u308b\u3068\u30a8\u30e9\u30fc\u306b\u306a\u308a\u307e\u3059\u3002\n\n\u4f8b\n> (defconstant e (exp 1))\nE\n> e\n2.718281828459045\n> (setq e 1)\nCan't modify at setq E\n> \n\n\n\n(defglobal name form) -> symbol\n\u5927\u57df\u5909\u6570\u3092\u5b9a\u7fa9\u3057\u307e\u3059\u3002\n\n\u4f8b\n> (defglobal today 'wednsday)\nTODAY\n> today\nWEDNSDAY\n> \n\n\n\n(defdynamic name form) -> symbol\nISLisp\u306e\u7279\u5fb4\u7684\u306a\u3068\u3053\u308d\u3067\u3059\u3002ISLisp\u306f\u57fa\u672c\u7684\u306b\u9759\u7684\u30b9\u30b3\u30fc\u30d7\u3067\u3059\u3002\u3057\u304b\u3057\u3001\u52d5\u7684\u30b9\u30b3\u30fc\u30d7\u304c\u3042\u3063\u305f\u65b9\u304c\u826f\u3044\u5834\u5408\u3082\u3042\u308a\u307e\u3059\u3002defdynamic\u306f\u52d5\u7684\u5909\u6570\u3092\u5b9a\u7fa9\u3057\u307e\u3059\u3002\u9759\u7684\u5909\u6570\u3068\u52d5\u7684\u5909\u6570\u306f\u540d\u524d\u7a7a\u9593\u304c\u5206\u304b\u308c\u3066\u3044\u307e\u3059\u3002\u9759\u7684\u5909\u6570\u306f\u5358\u306b\u30b7\u30f3\u30dc\u30eb\u3067\u3059\u304c\u3001\u52d5\u7684\u5909\u6570\u306f(dynamic x)\u306e\u3088\u3046\u306b\u3057\u3066\u5024\u3092\u5f97\u307e\u3059\u3002\n\n\u4f8b\n> (defdynamic *color* 'red)\n*COLOR*\n> (dynamic *color*)\nRED\n> (defun what-color () (dynamic *color*))\nWHAT-COLOR\n> (what-color)\nRED\n> *color*\nUnbound variable at eval *COLOR*\n> \n\n\n\n(defun fn lambda-list form) -> symbol\ndefun\u306f\u95a2\u6570\u5b9a\u7fa9\u306e\u305f\u3081\u306b\u4f7f\u3044\u307e\u3059\u3002Common Lisp \u3068\u540c\u3058\u3067\u3059\u3002\n\n\u4f8b\n> (defun caar (x) (car (car x)))\nCAAR\n> (caar '((a b) c))\nA\n> \n\n\n\nNumber class\n\n(numberp obj) -> booleal\n\u6570\u304b\u3068\u3046\u304b\u3092\u5224\u5b9a\u3057\u307e\u3059\u3002\n> (numberp 3)\nT\n> (numberp -0.3)\nT\n> (numberp '(a b c))\nNIL\n> (numberp \"17\")\nNIL\n> \n\n\n\n(parse-number string) -> number\n\u6587\u5b57\u5217\u3092\u6570\u306b\u5909\u63db\u3057\u307e\u3059\u3002\n> (parse-number \"123.34\")\n123.34\n> (parse-number \"#XFACE\")\n64206\n>\n\n\n(max x1 x2 ... xn) -> number\n\u6700\u5927\u5024\u3092\u8fd4\u3057\u307e\u3059\u3002\n> (max -5 3)\n3\n> \n\n\n(min x1 x2 ... xn) -> number\n\u6700\u5c0f\u5024\u3092\u8fd4\u3057\u307e\u3059\u3002\n> (min 1 5 2 4 3)\n1\n\n\n(abs x) -. number\n\u7d76\u5bfe\u5024\u3092\u8fd4\u3057\u307e\u3059\u3002\n> (abs -3)\n3\n\n\n(sin x) -> number\n\u6b63\u5f26\n\n(cos x) -> number\n\u4f59\u5f26\n\n(tan x) -> number\n\u6b63\u63a5\n\n(sinh x) -> number\n\u53cc\u66f2\u7dda\u6b63\u5f26\n\n(cosh x) -> number\n\u53cc\u66f2\u7dda\u4f59\u5f26\n\n(tanh x) -> number\n\u53cc\u66f2\u7dda\u6b63\u63a5\n\n(atanh x) -> number\n\u53cc\u66f2\u7dda\u6b63\u63a5\u306e\u9006\u95a2\u6570\n\nFloat\u3000class\n\n*most0positive-float* -> float\n\u51e6\u7406\u7cfb\u3067\u6271\u3048\u308b\u6700\u5927\u6b63\u306e\u6d6e\u52d5\u5c0f\u6570\u70b9\u6570\n\nmost-negative-float -> float\n\u51e6\u7406\u7cfb\u3067\u6271\u3048\u308b\u6700\u5927\u8ca0\u306e\u6d6e\u52d5\u5c0f\u6570\u70b9\u6570\n\n(floatp obj) -> boolean\nobj\u304c\u6d6e\u52d5\u5c0f\u6570\u70b9\u6570\u306e\u3068\u304d\u306bt\u3092\u8fd4\u3057\u3001\u305d\u3046\u3067\u306a\u3044\u3068\u304d\u306b\u306fnil\u3092\u8fd4\u3057\u307e\u3059\u3002\n\n(float x) -> float\n\u6570\uff58\u3092\u6d6e\u52d5\u5c0f\u6570\u70b9\u6570\u306b\u5909\u63db\u3057\u3066\u8fd4\u3057\u307e\u3059\u3002\n\nStream\n\n(create-string-input-stream string) -> stream\n\u5165\u529b\u7528\u306e\u6587\u5b57\u5217\u30b9\u30c8\u30ea\u30fc\u30e0\u3092\u751f\u6210\u3057\u307e\u3059\u3002\u6587\u5b57\u5217\u30b9\u30c8\u30ea\u30fc\u30e0\u306f\u3061\u3087\u3063\u3068\u3057\u305f\u30e1\u30e2\u306b\u4fbf\u5229\u3067\u3059\u3002\n> (let ((str (create-string-input-stream \"this is a string\")))\n    (list (read str) (read str) (read str)))\n(THIS IS A)\n> \n\n\n(create-string-output-stream) -> stream\n\u51fa\u529b\u7528\u306e\u6587\u5b57\u5217\u30b9\u30c8\u30ea\u30fc\u30e0\u3092\u751f\u6210\u3057\u307e\u3059\u3002\n> (let ((str (create-string-output-stream)))\n    (format str \"hello\")\n    (format str \"world\")\n(get-output-stream-string str))\n\"helloworld\"\n> \n\n\n(get-output-stream-string stream) -> string\n\u6587\u5b57\u5217\u30b9\u30c8\u30ea\u30fc\u30e0\u304b\u3089\u6587\u5b57\u5217\u3092\u53d6\u308a\u51fa\u3057\u307e\u3059\u3002\n> (let ((str (create-string-output-stream)))\n    (format str \"hello\")\n    (format str \"world\")\n(get-output-stream-string str))\n\"helloworld\"\n> \n\n# \u306f\u3058\u3081\u306b\n\nISLisp\u306e\u7d44\u8fbc\u307f\u95a2\u6570\u3001\u7279\u6b8a\u5f62\u5f0f\u306b\u3064\u3044\u3066\u4e94\u6708\u96e8\u5f0f\u306b\u66f8\u304d\u8fbc\u3093\u3067\u3044\u304d\u307e\u3059\u3002\u5168\u90e8\u3092\u3044\u3063\u307a\u3093\u306b\u66f8\u304d\u4e0a\u3052\u308b\u306e\u306f\u305f\u3044\u3078\u3093\u305d\u3046\u3067\u3057\u305f\u3002\u6642\u9593\u306e\u3042\u308b\u6642\u306b\u7d30\u5207\u308c\u6642\u9593\u3092\u5229\u7528\u3057\u3066\u66f8\u3044\u3066\u3044\u3053\u3046\u3068\u601d\u3063\u3066\u3044\u307e\u3059\u3002\n\n#\u7de8\u96c6\u30ea\u30af\u30a8\u30b9\u30c8\u3000\u6b53\u8fce\n\u7b46\u8005\u306f\u308f\u308a\u3068\u304a\u3063\u3061\u3087\u3053\u3061\u3087\u3044\u3067\u3059\u3002\u9593\u9055\u3063\u305f\u8a18\u8ff0\u3001\u30b9\u30da\u30eb\u30df\u30b9\u306a\u3069\u3042\u308a\u307e\u3057\u305f\u3089\u3001\u7de8\u96c6\u30ea\u30af\u30a8\u30b9\u30c8\u304a\u9001\u308a\u3044\u305f\u3060\u3051\u308c\u3070\u5e78\u3044\u3067\u3059\u3002\n\n# Funtions\n\n## `(functionp obj)` -> boolean\nobj\u304c\u666e\u901a\u306e\u95a2\u6570\u3042\u308b\u3044\u306f\u5305\u62ec\u95a2\u6570\u3067\u3042\u308b\u3068\u304d\u306bt\u3092\u8fd4\u3057\u3001\u305d\u3046\u3067\u306a\u3051\u308c\u3070nil\u3092\u8fd4\u3057\u307e\u3059\u3002\n\n```lisp:\u4f8b\n> (functionp (function car))\nT\n> \n```\n\n## `(function fn)` -> function\n\nfn\u304c\u95a2\u6570\u540d\u3067\u3042\u308b\u3068\u304d\u3001\u305d\u306e\u5b9f\u4f53\u3092\u8fd4\u3057\u307e\u3059\u3002#'\u3068\u66f8\u304f\u7701\u7565\u8a18\u6cd5\u3082\u3042\u308a\u307e\u3059\u3002\n\n```lisp:\u4f8b\n> (function -)\n<subr>\n> (funcall (function -) 3)\n-3\n> (apply #'- '(4 3))\n1\n> \n```\n\nISLisp\u306fCommon Lisp\u3068\u540c\u69d8\u306bLISP-2\u3068\u8a00\u308f\u308c\u308b\u3082\u306e\u3067\u3059\u3002\u95a2\u6570\u540d\u3068\u5909\u6570\u540d\u3068\u304c\u9055\u3046\u540d\u524d\u7a7a\u9593\u3067\u7ba1\u7406\u3055\u308c\u3066\u3044\u307e\u3059\u3002\u5909\u6570\u540d\u306f\u305d\u306e\u307e\u307e\u3067\u4f7f\u3048\u308b\u306e\u3067\u3059\u304c\u3001\u95a2\u6570\u540d\u304b\u3089\u305d\u306e\u5b9f\u4f53\u3092\u547c\u3073\u51fa\u3059\u3068\u304d\u306b\u306ffunction\u3092\u4ed8\u3051\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\n\n## `(lambda lambda-list form)` -> function\n\n\u30e9\u30e0\u30c0\u5f0f\u3067\u3059\u3002Scheme\u306b\u304a\u3051\u308b\u305d\u308c\u3068\u4f7f\u3044\u65b9\u306f\u540c\u3058\u3067\u3059\u3002\u95a2\u6570\u3067\u306f\u3042\u308a\u307e\u3059\u304cfunction\u3092\u4ed8\u52a0\u3059\u308b\u5fc5\u8981\u306f\u3042\u308a\u307e\u305b\u3093\u3002\u305d\u306e\u307e\u307e\u4f7f\u3048\u307e\u3059\u3002\n\n```lisp:\u4f8b\n> ((lambda (x y) (+ x y)) 3 4)\n7\n> \n```\n\n## `(labels ((fn lambda-list form) ...) body-form)`\n\n\u5c40\u6240\u5b9a\u7fa9\u3092\u3059\u308b\u7279\u6b8a\u5f62\u5f0f\u3067\u3059\u3002\u518d\u5e30\u3059\u308b\u5c40\u6240\u95a2\u6570\u5b9a\u7fa9\u3092\u66f8\u304f\u3068\u304d\u306b\u4f7f\u3044\u307e\u3059\u3002\n\n```lisp:\u4f8b\n(labels ((evenp (n)\n                (if (= n 0)\n                    t\n                    (oddp (- n 1))))\n         (oddp (n)\n               (if (= n 0)\n                   nil\n                   (evenp (- n 1)))))\n  (evenp 88))\n\n> T\n>\n```\n\n## `(flet ((fn lambda-list form) ...) body-form)`\n\nlabels\u3068\u540c\u69d8\u306b\u5c40\u6240\u7684\u95a2\u6570\u5b9a\u7fa9\u306b\u4f7f\u3048\u307e\u3059\u3002flet\u304c\u7570\u306a\u308b\u306e\u306f\u518d\u5e30\u7684\u306a\u5b9a\u7fa9\u306b\u306f\u4f7f\u3048\u306a\u3044\u3053\u3068\u3067\u3059\u3002\u5c40\u6240\u5b9a\u7fa9\u304c\u53c2\u7167\u3059\u308b\u306e\u306f\u76f4\u524d\u306e\u5b9a\u7fa9\u3067\u3059\u3002\u4f8b\u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n\n```lisp:\u4f8b\n> (flet ((f (x) (+ x 3)))\n    (flet ((f (x) (+ x (f x))))\n      (f 7)))\n17\n>\n```\n\n## `(apply function obj... list)` ->  object\n\u95a2\u6570\u306b\u5f15\u6570\u3092\u9069\u7528\u3057\u3066\u305d\u306e\u7d50\u679c\u3092\u8fd4\u3057\u307e\u3059\u3002\u4e0e\u3048\u308b\u5f15\u6570\u306f\u6700\u521d\u306f\u500b\u3005\u306e\u5f15\u6570\u3067\u3001\u6700\u5f8c\u306f\u30ea\u30b9\u30c8\u306b\u307e\u3068\u3081\u305f\u5f15\u6570\u3067\u3059\u3002\u30ea\u30b9\u30c8\u3060\u3051\u3067\u3082\u69cb\u3044\u307e\u305b\u3093\u3002\n\n```lisp:\u4f8b\n> (apply #'max '(1 2 3 4 5))\n5\n> (apply #'max 1 2 '(3 4 5))\n5\n> \n```\n\n## `(funcall function obj ...)` -> object\n\u95a2\u6570\u306b\u5f15\u6570\u3092\u9069\u7528\u3057\u3066\u305d\u306e\u7d50\u679c\u3092\u8fd4\u3057\u307e\u3059\u3002apply\u3068\u4f3c\u3066\u3044\u307e\u3059\u304cfuncall\u3067\u306f\u30ea\u30b9\u30c8\u306f\u4f7f\u3044\u307e\u305b\u3093\u3002funcall\u306fappy\u3092\u4f7f\u3063\u3066\u6b21\u306e\u3088\u3046\u306b\u5b9a\u7fa9\u3055\u308c\u307e\u3059\u3002\n\n```lisp:\u5b9a\u7fa9\n(defun funcall (functioon :rest arguments)\n  (apply function arguments))\n```\n\n```lisp:\u4f8b\n> (funcall #'+ 1 2 3)\n6\n> \n```\n\n#Defining operators\n\n## `(defconstant name form)` -> symbol\n\u5b9a\u6570\u3092\u5b9a\u7fa9\u3057\u307e\u3059\u3002\u305d\u306e\u5b9a\u6570\u306e\u5024\u3092\u5909\u66f4\u3057\u3088\u3046\u3068\u3059\u308b\u3068\u30a8\u30e9\u30fc\u306b\u306a\u308a\u307e\u3059\u3002\n\n```lisp:\u4f8b\n> (defconstant e (exp 1))\nE\n> e\n2.718281828459045\n> (setq e 1)\nCan't modify at setq E\n> \n```\n\n## `(defglobal name form)` -> symbol\n\u5927\u57df\u5909\u6570\u3092\u5b9a\u7fa9\u3057\u307e\u3059\u3002\n\n```lisp:\u4f8b\n> (defglobal today 'wednsday)\nTODAY\n> today\nWEDNSDAY\n> \n```\n\n## `(defdynamic name form)` -> symbol\nISLisp\u306e\u7279\u5fb4\u7684\u306a\u3068\u3053\u308d\u3067\u3059\u3002ISLisp\u306f\u57fa\u672c\u7684\u306b\u9759\u7684\u30b9\u30b3\u30fc\u30d7\u3067\u3059\u3002\u3057\u304b\u3057\u3001\u52d5\u7684\u30b9\u30b3\u30fc\u30d7\u304c\u3042\u3063\u305f\u65b9\u304c\u826f\u3044\u5834\u5408\u3082\u3042\u308a\u307e\u3059\u3002defdynamic\u306f\u52d5\u7684\u5909\u6570\u3092\u5b9a\u7fa9\u3057\u307e\u3059\u3002\u9759\u7684\u5909\u6570\u3068\u52d5\u7684\u5909\u6570\u306f\u540d\u524d\u7a7a\u9593\u304c\u5206\u304b\u308c\u3066\u3044\u307e\u3059\u3002\u9759\u7684\u5909\u6570\u306f\u5358\u306b\u30b7\u30f3\u30dc\u30eb\u3067\u3059\u304c\u3001\u52d5\u7684\u5909\u6570\u306f(dynamic x)\u306e\u3088\u3046\u306b\u3057\u3066\u5024\u3092\u5f97\u307e\u3059\u3002\n\n```lisp:\u4f8b\n> (defdynamic *color* 'red)\n*COLOR*\n> (dynamic *color*)\nRED\n> (defun what-color () (dynamic *color*))\nWHAT-COLOR\n> (what-color)\nRED\n> *color*\nUnbound variable at eval *COLOR*\n> \n```\n\n## `(defun fn lambda-list form)` -> symbol\ndefun\u306f\u95a2\u6570\u5b9a\u7fa9\u306e\u305f\u3081\u306b\u4f7f\u3044\u307e\u3059\u3002Common Lisp \u3068\u540c\u3058\u3067\u3059\u3002\n\n```lisp:\u4f8b\n> (defun caar (x) (car (car x)))\nCAAR\n> (caar '((a b) c))\nA\n> \n```\n\n#Number class\n\n##`(numberp obj)` -> booleal\n\u6570\u304b\u3068\u3046\u304b\u3092\u5224\u5b9a\u3057\u307e\u3059\u3002\n\n```\n> (numberp 3)\nT\n> (numberp -0.3)\nT\n> (numberp '(a b c))\nNIL\n> (numberp \"17\")\nNIL\n> \n\n```\n\n##`(parse-number string)` -> number\n\u6587\u5b57\u5217\u3092\u6570\u306b\u5909\u63db\u3057\u307e\u3059\u3002\n\n```\n> (parse-number \"123.34\")\n123.34\n> (parse-number \"#XFACE\")\n64206\n>\n```\n\n##`(max x1 x2 ... xn)` -> number\n\u6700\u5927\u5024\u3092\u8fd4\u3057\u307e\u3059\u3002\n\n```\n> (max -5 3)\n3\n> \n```\n\n##`(min x1 x2 ... xn)` -> number\n\u6700\u5c0f\u5024\u3092\u8fd4\u3057\u307e\u3059\u3002\n\n```\n> (min 1 5 2 4 3)\n1\n```\n\n##`(abs x)` -. number\n\u7d76\u5bfe\u5024\u3092\u8fd4\u3057\u307e\u3059\u3002\n\n```\n> (abs -3)\n3\n```\n\n##`(sin x)` -> number\n\u6b63\u5f26\n\n##`(cos x)` -> number\n\u4f59\u5f26\n\n##`(tan x)` -> number\n\u6b63\u63a5\n\n##`(sinh x)` -> number\n\u53cc\u66f2\u7dda\u6b63\u5f26\n\n##`(cosh x)` -> number\n\u53cc\u66f2\u7dda\u4f59\u5f26\n\n##`(tanh x)` -> number\n\u53cc\u66f2\u7dda\u6b63\u63a5\n\n##`(atanh x)` -> number\n\u53cc\u66f2\u7dda\u6b63\u63a5\u306e\u9006\u95a2\u6570\n\n#Float\u3000class\n\n##`*most0positive-float*` -> float\n\u51e6\u7406\u7cfb\u3067\u6271\u3048\u308b\u6700\u5927\u6b63\u306e\u6d6e\u52d5\u5c0f\u6570\u70b9\u6570\n\n##`most-negative-float` -> float\n\u51e6\u7406\u7cfb\u3067\u6271\u3048\u308b\u6700\u5927\u8ca0\u306e\u6d6e\u52d5\u5c0f\u6570\u70b9\u6570\n\n##`(floatp obj)` -> boolean\nobj\u304c\u6d6e\u52d5\u5c0f\u6570\u70b9\u6570\u306e\u3068\u304d\u306bt\u3092\u8fd4\u3057\u3001\u305d\u3046\u3067\u306a\u3044\u3068\u304d\u306b\u306fnil\u3092\u8fd4\u3057\u307e\u3059\u3002\n\n##`(float x)` -> float\n\u6570\uff58\u3092\u6d6e\u52d5\u5c0f\u6570\u70b9\u6570\u306b\u5909\u63db\u3057\u3066\u8fd4\u3057\u307e\u3059\u3002\n\n\n#Stream\n\n##`(create-string-input-stream string)` -> stream\n\u5165\u529b\u7528\u306e\u6587\u5b57\u5217\u30b9\u30c8\u30ea\u30fc\u30e0\u3092\u751f\u6210\u3057\u307e\u3059\u3002\u6587\u5b57\u5217\u30b9\u30c8\u30ea\u30fc\u30e0\u306f\u3061\u3087\u3063\u3068\u3057\u305f\u30e1\u30e2\u306b\u4fbf\u5229\u3067\u3059\u3002\n\n```\n> (let ((str (create-string-input-stream \"this is a string\")))\n    (list (read str) (read str) (read str)))\n(THIS IS A)\n> \n```\n\n##`(create-string-output-stream)` -> stream\n\u51fa\u529b\u7528\u306e\u6587\u5b57\u5217\u30b9\u30c8\u30ea\u30fc\u30e0\u3092\u751f\u6210\u3057\u307e\u3059\u3002\n\n```\n> (let ((str (create-string-output-stream)))\n    (format str \"hello\")\n    (format str \"world\")\n(get-output-stream-string str))\n\"helloworld\"\n> \n```\n\n##`(get-output-stream-string stream)` -> string\n\u6587\u5b57\u5217\u30b9\u30c8\u30ea\u30fc\u30e0\u304b\u3089\u6587\u5b57\u5217\u3092\u53d6\u308a\u51fa\u3057\u307e\u3059\u3002\n\n```\n> (let ((str (create-string-output-stream)))\n    (format str \"hello\")\n    (format str \"world\")\n(get-output-stream-string str))\n\"helloworld\"\n> \n```\n\n\n\n", "tags": ["ISLisp", "lisp"]}