{"tags": ["ESP8266", "AmazonDashButton", "ESP-WROOM-02"], "context": "\n\n\u6982\u8981\n\u30d7\u30ed\u30df\u30b9\u30ad\u30e3\u30b9\u30e2\u30fc\u30c9\u306eESP8266\u3092\u7528\u3044\u308b\u3053\u3068\u3067\u3001Amazon Dash Button (ADB)\u306e\u30a4\u30d9\u30f3\u30c8\u53d6\u5f97\u306b\u6210\u529f\u3057\u307e\u3057\u305f\u3002\n\u3053\u308c\u306b\u3088\u308aRaspberry Pi\u7b49\u3092\u5fc5\u8981\u3068\u305b\u305a\u306bESP8266\u5358\u72ec\u3067\u306e\u691c\u51fa\u304c\u53ef\u80fd\u3068\u306a\u308a\u307e\u3057\u305f\u3002\u4eca\u56de\u306fESP-WROOM-02, Arduino 1.6.13\u3092\u5229\u7528\u3057\u3066\u3044\u307e\u3059\u3002\n\nESP8266\u3068\u306f\n\u79cb\u6708\u96fb\u5b50\u7b49\u3067\u8cfc\u5165\u53ef\u80fd\u306aWiFi\u901a\u4fe1\u53ef\u80fd\u306a\u30e2\u30b8\u30e5\u30fc\u30eb(500~600\u5186\u7a0b\u5ea6)\u3002Arduino\u3067\u958b\u767a\u53ef\u80fd\u3002\nWi-Fi\u30e2\u30b8\u30e5\u30fc\u30eb ESP-WROOM-02 DIP\u5316\u30ad\u30c3\u30c8\u3000http://akizukidenshi.com/catalog/g/gK-09758/\n\nAmazon Dash Button\u3068\u306f\n\u30dc\u30bf\u30f3\u3092\u62bc\u3059\u3060\u3051\u3067\u3001\u81ea\u52d5\u6ce8\u6587\u306b\u3088\u308a\u5546\u54c1\u3092\u5c4a\u3051\u3066\u304f\u308c\u308bIoT\u30c7\u30d0\u30a4\u30b9\u3002\u4eca\u56de\u306e\u3088\u3046\u306b\u6ce8\u6587\u305b\u305a\u306b\u3001\u30dc\u30bf\u30f3\u62bc\u4e0b\u30a4\u30d9\u30f3\u30c8\u53d6\u5f97\u3060\u3051\u3092\u3057\u305f\u3044\u5834\u5408\u306f\u300c\u30dc\u30bf\u30f3\u304c\u62bc\u3055\u308c\u308b\u3068\u5c4a\u304f\u5546\u54c1\u306e\u8a2d\u5b9a\u300d\u3092\u30ad\u30e3\u30f3\u30bb\u30eb\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\n\n\u53c2\u8003\n\nAmazon Dash Button\u306e\u4ed5\u7d44\u307f\u3068\u30cf\u30c3\u30af: http://qiita.com/dkawashi/items/e6621c4b712b509c73ec\n\nAmazon Dash Button\u3092\u305f\u3060\u306eIoT\u30dc\u30bf\u30f3\u3068\u3057\u3066\u4f7f\u3046: http://qiita.com/jsoizo/items/3b8bba4160f41aef20f4\n\n\n\nWiFi\u30c1\u30e3\u30f3\u30cd\u30eb\u3068\u30dc\u30bf\u30f3\u306eMAC\u30a2\u30c9\u30ec\u30b9\u3092\u53d6\u5f97\n\u30d7\u30ed\u30df\u30b9\u30ad\u30e3\u30b9\u30e2\u30fc\u30c9\u3067\u306e\u52d5\u4f5c\u306b\u306fWiFi\u30c1\u30e3\u30f3\u30cd\u30eb\u304c\u3001\u307e\u305fAmazon Dash Button\u306e\u30a4\u30d9\u30f3\u30c8\u53d6\u5f97\u306b\u306fMAC\u30a2\u30c9\u30ec\u30b9\u304c\u5fc5\u8981\u3068\u306a\u308a\u307e\u3059\u3002\n\u305d\u308c\u3089\u3092\u53d6\u5f97\u3059\u308b\u305f\u3081\u306b\u3001\u307e\u305a\u4ee5\u4e0b\u306e\u30b9\u30b1\u30c3\u30c1\u3092ESP8266\u306b\u66f8\u304d\u8fbc\u307f\u3001\u5b9f\u884c\u3057\u307e\u3059\u3002\n\nESP_Promiscuous_getDashInfo.ino\n#include <ESP8266WiFi.h>\n#include \"ESP_Promiscuous.h\"\n\n//\u30d7\u30ed\u30df\u30b9\u30ad\u30e3\u30b9\u30e2\u30fc\u30c9\u306eAPI\u3092\u5229\u7528\u3059\u308b\u305f\u3081\u306b\u5fc5\u8981\nextern \"C\" {\n  #include <user_interface.h>\n}\n\n//WiFi\u63a5\u7d9a\u90e8 \u53c2\u8003:http://qiita.com/azusa9/items/7f78069cb09872cf6cbf\nchar toSSID[] = \"SSID\";\nchar ssidPASSWD[] = \"Password\";\n\n//\u30d7\u30ed\u30df\u30b9\u30ad\u30e3\u30b9\u30e2\u30fc\u30c9\u3067\u30d1\u30b1\u30c3\u30c8\u3092\u53d7\u3051\u53d6\u3063\u305f\u3068\u304d\u306ecallback\nstatic void ICACHE_FLASH_ATTR promisc_cb(uint8_t *buf, uint16_t len)\n{\n  if (len != 128) return; //In order to discard both unknown packets and data packets\n\n  struct sniffer_buf2 *sniffer = (struct sniffer_buf2*) buf;\n  struct MAC_header *mac = (struct MAC_header*) sniffer->buf;\n\n  int i;\n  boolean beaconFlag = true;\n\n  for (i=0; i<6; i++) if (mac->addr2[i] != mac->addr3[i]) beaconFlag = false;\n\n  if (beaconFlag) return; //In order to remove beacon Packet\n\n  Serial.print(\"Possible MAC Address: \");\n  for (i=0; i<6; i++){\n    Serial.print(mac->addr2[i], HEX);\n    Serial.print(\":\");\n  }\n  Serial.println(\"\");\n}\n\nvoid setup() {\n  byte channel;\n  Serial.begin(115200);\n\n  WiFi.mode(WIFI_STA);\n  WiFi.begin(toSSID, ssidPASSWD);\n\n  Serial.print(\"WiFi connecting.\");\n\n  while (WiFi.status() != WL_CONNECTED) {\n    delay(1000);\n    Serial.print(\".\");\n  }\n\n  Serial.println(\"\");\n\n  channel = wifi_get_channel();\n  Serial.print(\"Your WiFi Channel: \");\n  Serial.println(channel);\n  WiFi.disconnect();\n\n  Serial.println(\"\");\n\n  Serial.println(\"ESP8266 promiscuous mode started.\");\n  Serial.println(\"Please push Amazon Dash Button\");\n  Serial.println(\"\");\n\n  wifi_set_opmode(STATION_MODE);\n  wifi_set_channel(channel);\n  wifi_set_promiscuous_rx_cb(promisc_cb);\n\n  wifi_promiscuous_enable(1);\n}\n\nvoid loop() { }\n\n\n\nESP_Promiscuous.h\nstruct RxControl {\n    signed rssi:8;\n    unsigned rate:4;\n    unsigned is_group:1;\n    unsigned:1;\n    unsigned sig_mode:2;\n    unsigned legacy_length:12;\n    unsigned damatch0:1;\n    unsigned damatch1:1;\n    unsigned bssidmatch0:1;\n    unsigned bssidmatch1:1;\n    unsigned MCS:7;\n    unsigned CWB:1;\n    unsigned HT_length:16;\n    unsigned Smoothing:1;\n    unsigned Not_Sounding:1;\n    unsigned:1;\n    unsigned Aggregation:1;\n    unsigned STBC:2;\n    unsigned FEC_CODING:1;\n    unsigned SGI:1;\n    unsigned rxend_state:8;\n    unsigned ampdu_cnt:8;\n    unsigned channel:4;\n    unsigned:12;\n};\n\nstruct LenSeq {\n    uint16_t length;\n    uint16_t seq;\n    uint8_t  address3[6];\n};\n\nstruct sniffer_buf {\n    struct RxControl rx_ctrl;\n    uint8_t buf[36];\n    uint16_t cnt;\n    struct LenSeq lenseq[1];\n};\n\nstruct sniffer_buf2{\n    struct RxControl rx_ctrl;\n    uint8_t buf[112];\n    uint16_t cnt;\n    uint16_t len;\n};\n\nstruct MAC_header {\n    uint16_t frameControl;\n    uint16_t duration;\n    uint8_t addr1[6];\n    uint8_t addr2[6];\n    uint8_t addr3[6];\n    uint16_t sequenceControl;\n    uint8_t addr4[6]; \n};\n\n\n\u305d\u3057\u3066\u5b9f\u884c\u3057\u3001\u30dc\u30bf\u30f3\u3092\u62bc\u3059\u3068\u691c\u51fa\u3057\u3066\u304f\u308c\u307e\u3059\u3002\n2\u884c\u76ee\u306e5\u304cWiFi\u30c1\u30e3\u30cd\u30eb\u300112:34:56:78:9a:bc\u304cMAC\u30a2\u30c9\u30ec\u30b9\u3068\u306a\u308a\u307e\u3059\u3002\nAmazon Dash Button\u304c\u95a2\u9023\u3059\u308b\u901a\u4fe1\u304c10~15\u500b\u7a0b\u3001\u8868\u793a\u3055\u308c\u307e\u3059\u3002\nARP\u30d7\u30ed\u30fc\u30d6\u7b49\u304c\u9001\u53d7\u4fe1\u3055\u308c\u3066\u308b\u3068\u601d\u3044\u307e\u3059\u304c\u3001\u8a73\u7d30\u306f\u628a\u63e1\u3057\u3066\u304a\u308a\u307e\u305b\u3093\u3002\nWiFi connecting......\nYour WiFi Channel: 5\n\nESP8266 promiscuous mode started.\nPlease push Amazon Dash Button.\n\nPossible MAC Address: 12:34:56:78:9a:bc:\nPossible MAC Address: 12:34:56:78:9a:bc:\n(\u4ee5\u4e0b\u3001\u7d9a\u304f)\n\n\n\u30a4\u30d9\u30f3\u30c8\u53d6\u5f97\n\u7d9a\u3044\u3066\u3001\u5f97\u3089\u308c\u305fWiFi\u30c1\u30e3\u30f3\u30cd\u30eb\u3068MAC\u30a2\u30c9\u30ec\u30b9\u3092\u7528\u3044\u3066\u3001Amazon Dash Button\u306e\u901a\u4fe1\u3092\u691c\u77e5\u3057\u307e\u3059\u3002\n2017/01/02 21:55\u4fee\u6b63: \u3054\u6307\u6458\u9802\u304d\u307e\u3057\u305f\u65b9\u3005\u306b\u304a\u793c\u7533\u3057\u4e0a\u3052\u307e\u3059\u3002\u307e\u305f\u672c\u30bd\u30fc\u30b9\u3067\u306fESP8266WiFi.h\u306e\u95a2\u6570\u3092\u7528\u3044\u3066\u3044\u306a\u3044\u306e\u3067\u3001include\u7121\u3057\u3067\u3082\u30b3\u30f3\u30d1\u30a4\u30eb\u304c\u901a\u308b\u3068\u601d\u3044\u307e\u3059\u304c\u5982\u4f55\u3067\u3057\u3087\u3046\u304b\u3002\u4e0d\u5099\u7b49\u3054\u3056\u3044\u307e\u3057\u305f\u3089\u3001\u3054\u6307\u6458\u3044\u305f\u3060\u3051\u308b\u3068\u5e78\u3044\u3067\u3059\u3002\n\nESP_Promiscuous_DashCapt(ver.0.2).ino\n#include \"ESP_Promiscuous.h\"\n\nextern \"C\" {\n  #include <user_interface.h>\n}\n\nbyte channel = 5;  //WiFi channel (1-13)\nuint8_t targetMAC1[6] = { 0x12, 0x34, 0x56, 0x78, 0x9a, 0xbc};  //Amazon Dash Button MAC address\nint detectInterval = 8000; //msec\n\nunsigned long lastDetectedMillis = 0;\nboolean ADBdetectingNow = false;  //Amazon Dash Button\u30a4\u30d9\u30f3\u30c8\u691c\u51fa\u4e2d\u30d5\u30e9\u30b0\n\nstatic void ICACHE_FLASH_ATTR promisc_cb(uint8_t *buf, uint16_t len)\n{\n    if (ADBdetectingNow) return;  //Amazon Dash Button\u30a4\u30d9\u30f3\u30c8\u691c\u77e5\u4e2d(detectInterval\u6307\u5b9a\u30df\u30ea\u79d2\u9593)\u3067\u3042\u308c\u3070\u7121\u8996\n\n    if (len == 12){\n      //No accurate information about MAC address and length of the head of packet.\n      struct RxControl *sniffer = (struct RxControl*) buf;\n      return;\n    } else if (len == 128) {\n      //Management Packet\n      struct sniffer_buf2 *sniffer = (struct sniffer_buf2*) buf;\n      struct MAC_header *mac = (struct MAC_header*) sniffer->buf;\n\n      int i;\n      boolean MAC_Matching_Flag = true;\n\n      for (i=0; i<6; i++) if (mac->addr2[i] != targetMAC1[i]) MAC_Matching_Flag = false;\n\n      if (!MAC_Matching_Flag) return; //No hit\n\n      //Handle it.\n      Serial.println(\"ADB push detected.\");\n      ADBdetectingNow = true;\n      lastDetectedMillis = millis();\n\n      return;\n\n    } else {\n      //Data Packet\n      struct sniffer_buf *sniffer = (struct sniffer_buf*) buf;\n      struct MAC_header *mac = (struct MAC_header*) sniffer->buf;\n\n      return;\n    }\n}\n\nvoid setup() {  \n  Serial.begin(115200);\n  wifi_set_opmode(STATION_MODE);\n  wifi_set_channel(channel);\n  wifi_set_promiscuous_rx_cb(promisc_cb);\n\n  // Start!\n  wifi_promiscuous_enable(1);\n}\n\nvoid loop() {\n  unsigned long interval;\n  if (lastDetectedMillis > millis()) //\u7a3c\u50cd\u6642\u9593\u304c49.7\u65e5\u3092\u8d85\u3048millis()\u304c\u30aa\u30fc\u30d0\u30fc\u30d5\u30ed\u30fc\u3057\u305f\u5834\u5408\n    interval = (0xffffffff - lastDetectedMillis) + millis();\n  else\n    interval = millis() - lastDetectedMillis;\n\n  if (interval > detectInterval)\n    ADBdetectingNow = false;\n}\n\n\n\u4e0a\u8a18\u30b9\u30b1\u30c3\u30c1\u8d77\u52d5\u5f8c\u306bADB\u306e\u30dc\u30bf\u30f3\u3092\u62bc\u3059\u3068ADB push detected.\u3068\u8868\u793a\u3055\u308c\u308b\u306f\u305a\u3067\u3059\u3002\n\n\u7d50\u8ad6\nADB\u306e\u30a4\u30d9\u30f3\u30c8\u3092\u53d6\u5f97\u3057\u3001L\u30c1\u30ab\u7b49\u3078\u306e\u5c55\u958b\u304c\u3067\u304d\u305d\u3046\u3067\u3059\u3002\n\u6b20\u70b9\u3068\u3057\u3066ESP8266\u306f\u30d7\u30ed\u30df\u30b9\u30ad\u30e3\u30b9\u30e2\u30fc\u30c9\u3067\u306e\u52d5\u4f5c\u6642\u3001WiFi\u306e\u63a5\u7d9a\u304c\u3067\u304d\u306a\u304f\u306a\u3063\u3066\u3057\u307e\u3046\u70b9\u304c\u6319\u3052\u3089\u308c\u307e\u3059\u3002\n\u3057\u304b\u3057\u30d7\u30ed\u30df\u30b9\u30ad\u30e3\u30b9\u30e2\u30fc\u30c9\u3092\u89e3\u9664\u3059\u308c\u3070\u3001WiFi\u306e\u63a5\u7d9a\u304c\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u308b\u306e\u3067\u3001Milkcocoa\u7b49\u306e\u4ed6\u306e\u30b5\u30fc\u30d3\u30b9\u3068\u9023\u643a\u3082\u53ef\u80fd\u3067\u3059\u3002\n\u5f8c\u65e5\u3001\u305d\u306e\u8a73\u7d30\u3092\u66f8\u304d\u305f\u3044\u3068\u601d\u3044\u307e\u3059\u3002\n12/30 23:38\u8ffd\u8a18 ESP8266\u306b\u3088\u308bAmazon Dash Button\u3068Milkcocoa\u3068\u306e\u9023\u643a \u66f8\u304d\u307e\u3057\u305f\n\u307e\u305fAPI\u30ea\u30d5\u30a1\u30ec\u30f3\u30b9\u3092\u773a\u3081\u3066\u3044\u308b\u3068\u3001WPS\u3092\u5229\u7528\u3057\u3066WiFi\u63a5\u7d9a\u3067\u304d\u305d\u3046\u3060\u3063\u305f\u308a\u3001WiFi\u7d4c\u7531\u3067Sleep\u304b\u3089\u8d77\u3053\u305b\u305d\u3046\u3060\u3063\u305f\u308a\u3068\u8272\u3005\u3068\u9762\u767d\u305d\u3046\u306aAPI\u304c\u3042\u308a\u307e\u3057\u305f\u306e\u3067\u3001\u4eca\u5f8c\u305d\u3046\u3044\u3063\u305f\u3053\u3068\u3082\u8a18\u4e8b\u306b\u3057\u3066\u3044\u304d\u305f\u3044\u3068\u601d\u3044\u307e\u3059\u3002\n\n\u53c2\u8003\u6587\u732e\n\nWiFi\u63a5\u7d9a\n\n\nhttp://qiita.com/azusa9/items/7f78069cb09872cf6cbf\n\n\nAmazon Dash Button\n\n\nhttp://qiita.com/jsoizo/items/3b8bba4160f41aef20f4\nhttp://qiita.com/dkawashi/items/e6621c4b712b509c73ec\n\n\n\n#\u6982\u8981\n\u30d7\u30ed\u30df\u30b9\u30ad\u30e3\u30b9\u30e2\u30fc\u30c9\u306eESP8266\u3092\u7528\u3044\u308b\u3053\u3068\u3067\u3001Amazon Dash Button (ADB)\u306e\u30a4\u30d9\u30f3\u30c8\u53d6\u5f97\u306b\u6210\u529f\u3057\u307e\u3057\u305f\u3002\n\u3053\u308c\u306b\u3088\u308aRaspberry Pi\u7b49\u3092\u5fc5\u8981\u3068\u305b\u305a\u306bESP8266\u5358\u72ec\u3067\u306e\u691c\u51fa\u304c\u53ef\u80fd\u3068\u306a\u308a\u307e\u3057\u305f\u3002\u4eca\u56de\u306fESP-WROOM-02, Arduino 1.6.13\u3092\u5229\u7528\u3057\u3066\u3044\u307e\u3059\u3002\n\n## ESP8266\u3068\u306f\n\u79cb\u6708\u96fb\u5b50\u7b49\u3067\u8cfc\u5165\u53ef\u80fd\u306aWiFi\u901a\u4fe1\u53ef\u80fd\u306a\u30e2\u30b8\u30e5\u30fc\u30eb(500~600\u5186\u7a0b\u5ea6)\u3002Arduino\u3067\u958b\u767a\u53ef\u80fd\u3002\nWi-Fi\u30e2\u30b8\u30e5\u30fc\u30eb ESP-WROOM-02 DIP\u5316\u30ad\u30c3\u30c8\u3000http://akizukidenshi.com/catalog/g/gK-09758/\n\n## Amazon Dash Button\u3068\u306f\n\u30dc\u30bf\u30f3\u3092\u62bc\u3059\u3060\u3051\u3067\u3001\u81ea\u52d5\u6ce8\u6587\u306b\u3088\u308a\u5546\u54c1\u3092\u5c4a\u3051\u3066\u304f\u308c\u308bIoT\u30c7\u30d0\u30a4\u30b9\u3002\u4eca\u56de\u306e\u3088\u3046\u306b\u6ce8\u6587\u305b\u305a\u306b\u3001\u30dc\u30bf\u30f3\u62bc\u4e0b\u30a4\u30d9\u30f3\u30c8\u53d6\u5f97\u3060\u3051\u3092\u3057\u305f\u3044\u5834\u5408\u306f\u300c\u30dc\u30bf\u30f3\u304c\u62bc\u3055\u308c\u308b\u3068\u5c4a\u304f\u5546\u54c1\u306e\u8a2d\u5b9a\u300d\u3092\u30ad\u30e3\u30f3\u30bb\u30eb\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\n\n### \u53c2\u8003\n- Amazon Dash Button\u306e\u4ed5\u7d44\u307f\u3068\u30cf\u30c3\u30af: http://qiita.com/dkawashi/items/e6621c4b712b509c73ec\n- Amazon Dash Button\u3092\u305f\u3060\u306eIoT\u30dc\u30bf\u30f3\u3068\u3057\u3066\u4f7f\u3046: http://qiita.com/jsoizo/items/3b8bba4160f41aef20f4\n\n## WiFi\u30c1\u30e3\u30f3\u30cd\u30eb\u3068\u30dc\u30bf\u30f3\u306eMAC\u30a2\u30c9\u30ec\u30b9\u3092\u53d6\u5f97\n\u30d7\u30ed\u30df\u30b9\u30ad\u30e3\u30b9\u30e2\u30fc\u30c9\u3067\u306e\u52d5\u4f5c\u306b\u306fWiFi\u30c1\u30e3\u30f3\u30cd\u30eb\u304c\u3001\u307e\u305fAmazon Dash Button\u306e\u30a4\u30d9\u30f3\u30c8\u53d6\u5f97\u306b\u306fMAC\u30a2\u30c9\u30ec\u30b9\u304c\u5fc5\u8981\u3068\u306a\u308a\u307e\u3059\u3002\n\n\u305d\u308c\u3089\u3092\u53d6\u5f97\u3059\u308b\u305f\u3081\u306b\u3001\u307e\u305a\u4ee5\u4e0b\u306e\u30b9\u30b1\u30c3\u30c1\u3092ESP8266\u306b\u66f8\u304d\u8fbc\u307f\u3001\u5b9f\u884c\u3057\u307e\u3059\u3002\n\n```c:ESP_Promiscuous_getDashInfo.ino\n#include <ESP8266WiFi.h>\n#include \"ESP_Promiscuous.h\"\n\n//\u30d7\u30ed\u30df\u30b9\u30ad\u30e3\u30b9\u30e2\u30fc\u30c9\u306eAPI\u3092\u5229\u7528\u3059\u308b\u305f\u3081\u306b\u5fc5\u8981\nextern \"C\" {\n  #include <user_interface.h>\n}\n\n//WiFi\u63a5\u7d9a\u90e8 \u53c2\u8003:http://qiita.com/azusa9/items/7f78069cb09872cf6cbf\nchar toSSID[] = \"SSID\";\nchar ssidPASSWD[] = \"Password\";\n\n//\u30d7\u30ed\u30df\u30b9\u30ad\u30e3\u30b9\u30e2\u30fc\u30c9\u3067\u30d1\u30b1\u30c3\u30c8\u3092\u53d7\u3051\u53d6\u3063\u305f\u3068\u304d\u306ecallback\nstatic void ICACHE_FLASH_ATTR promisc_cb(uint8_t *buf, uint16_t len)\n{\n  if (len != 128) return; //In order to discard both unknown packets and data packets\n  \n  struct sniffer_buf2 *sniffer = (struct sniffer_buf2*) buf;\n  struct MAC_header *mac = (struct MAC_header*) sniffer->buf;\n\n  int i;\n  boolean beaconFlag = true;\n\n  for (i=0; i<6; i++) if (mac->addr2[i] != mac->addr3[i]) beaconFlag = false;\n\n  if (beaconFlag) return; //In order to remove beacon Packet\n\n  Serial.print(\"Possible MAC Address: \");\n  for (i=0; i<6; i++){\n    Serial.print(mac->addr2[i], HEX);\n    Serial.print(\":\");\n  }\n  Serial.println(\"\");\n}\n\nvoid setup() {\n  byte channel;\n  Serial.begin(115200);\n\n  WiFi.mode(WIFI_STA);\n  WiFi.begin(toSSID, ssidPASSWD);\n\n  Serial.print(\"WiFi connecting.\");\n\n  while (WiFi.status() != WL_CONNECTED) {\n    delay(1000);\n    Serial.print(\".\");\n  }\n\n  Serial.println(\"\");\n\n  channel = wifi_get_channel();\n  Serial.print(\"Your WiFi Channel: \");\n  Serial.println(channel);\n  WiFi.disconnect();\n\n  Serial.println(\"\");\n  \n  Serial.println(\"ESP8266 promiscuous mode started.\");\n  Serial.println(\"Please push Amazon Dash Button\");\n  Serial.println(\"\");\n\n  wifi_set_opmode(STATION_MODE);\n  wifi_set_channel(channel);\n  wifi_set_promiscuous_rx_cb(promisc_cb);\n\n  wifi_promiscuous_enable(1);\n}\n\nvoid loop() { }\n```\n\n```c:ESP_Promiscuous.h\nstruct RxControl {\n    signed rssi:8;\n    unsigned rate:4;\n    unsigned is_group:1;\n    unsigned:1;\n    unsigned sig_mode:2;\n    unsigned legacy_length:12;\n    unsigned damatch0:1;\n    unsigned damatch1:1;\n    unsigned bssidmatch0:1;\n    unsigned bssidmatch1:1;\n    unsigned MCS:7;\n    unsigned CWB:1;\n    unsigned HT_length:16;\n    unsigned Smoothing:1;\n    unsigned Not_Sounding:1;\n    unsigned:1;\n    unsigned Aggregation:1;\n    unsigned STBC:2;\n    unsigned FEC_CODING:1;\n    unsigned SGI:1;\n    unsigned rxend_state:8;\n    unsigned ampdu_cnt:8;\n    unsigned channel:4;\n    unsigned:12;\n};\n \nstruct LenSeq {\n    uint16_t length;\n    uint16_t seq;\n    uint8_t  address3[6];\n};\n\nstruct sniffer_buf {\n    struct RxControl rx_ctrl;\n    uint8_t buf[36];\n    uint16_t cnt;\n    struct LenSeq lenseq[1];\n};\n\nstruct sniffer_buf2{\n    struct RxControl rx_ctrl;\n    uint8_t buf[112];\n    uint16_t cnt;\n    uint16_t len;\n};\n\nstruct MAC_header {\n    uint16_t frameControl;\n    uint16_t duration;\n    uint8_t addr1[6];\n    uint8_t addr2[6];\n    uint8_t addr3[6];\n    uint16_t sequenceControl;\n    uint8_t addr4[6]; \n};\n```\n\n\u305d\u3057\u3066\u5b9f\u884c\u3057\u3001\u30dc\u30bf\u30f3\u3092\u62bc\u3059\u3068\u691c\u51fa\u3057\u3066\u304f\u308c\u307e\u3059\u3002\n2\u884c\u76ee\u306e`5`\u304cWiFi\u30c1\u30e3\u30cd\u30eb\u3001`12:34:56:78:9a:bc`\u304cMAC\u30a2\u30c9\u30ec\u30b9\u3068\u306a\u308a\u307e\u3059\u3002\nAmazon Dash Button\u304c\u95a2\u9023\u3059\u308b\u901a\u4fe1\u304c10~15\u500b\u7a0b\u3001\u8868\u793a\u3055\u308c\u307e\u3059\u3002\nARP\u30d7\u30ed\u30fc\u30d6\u7b49\u304c\u9001\u53d7\u4fe1\u3055\u308c\u3066\u308b\u3068\u601d\u3044\u307e\u3059\u304c\u3001\u8a73\u7d30\u306f\u628a\u63e1\u3057\u3066\u304a\u308a\u307e\u305b\u3093\u3002\n\n```\nWiFi connecting......\nYour WiFi Channel: 5\n\nESP8266 promiscuous mode started.\nPlease push Amazon Dash Button.\n\nPossible MAC Address: 12:34:56:78:9a:bc:\nPossible MAC Address: 12:34:56:78:9a:bc:\n(\u4ee5\u4e0b\u3001\u7d9a\u304f)\n```\n\n\n## \u30a4\u30d9\u30f3\u30c8\u53d6\u5f97\n\u7d9a\u3044\u3066\u3001\u5f97\u3089\u308c\u305fWiFi\u30c1\u30e3\u30f3\u30cd\u30eb\u3068MAC\u30a2\u30c9\u30ec\u30b9\u3092\u7528\u3044\u3066\u3001Amazon Dash Button\u306e\u901a\u4fe1\u3092\u691c\u77e5\u3057\u307e\u3059\u3002\n\n**2017/01/02 21:55\u4fee\u6b63**: \u3054\u6307\u6458\u9802\u304d\u307e\u3057\u305f\u65b9\u3005\u306b\u304a\u793c\u7533\u3057\u4e0a\u3052\u307e\u3059\u3002\u307e\u305f\u672c\u30bd\u30fc\u30b9\u3067\u306fESP8266WiFi.h\u306e\u95a2\u6570\u3092\u7528\u3044\u3066\u3044\u306a\u3044\u306e\u3067\u3001include\u7121\u3057\u3067\u3082\u30b3\u30f3\u30d1\u30a4\u30eb\u304c\u901a\u308b\u3068\u601d\u3044\u307e\u3059\u304c\u5982\u4f55\u3067\u3057\u3087\u3046\u304b\u3002\u4e0d\u5099\u7b49\u3054\u3056\u3044\u307e\u3057\u305f\u3089\u3001\u3054\u6307\u6458\u3044\u305f\u3060\u3051\u308b\u3068\u5e78\u3044\u3067\u3059\u3002\n\n```c:ESP_Promiscuous_DashCapt(ver.0.2).ino\n#include \"ESP_Promiscuous.h\"\n\nextern \"C\" {\n  #include <user_interface.h>\n}\n\nbyte channel = 5;  //WiFi channel (1-13)\nuint8_t targetMAC1[6] = { 0x12, 0x34, 0x56, 0x78, 0x9a, 0xbc};  //Amazon Dash Button MAC address\nint detectInterval = 8000; //msec\n\nunsigned long lastDetectedMillis = 0;\nboolean ADBdetectingNow = false;  //Amazon Dash Button\u30a4\u30d9\u30f3\u30c8\u691c\u51fa\u4e2d\u30d5\u30e9\u30b0\n\nstatic void ICACHE_FLASH_ATTR promisc_cb(uint8_t *buf, uint16_t len)\n{\n    if (ADBdetectingNow) return;  //Amazon Dash Button\u30a4\u30d9\u30f3\u30c8\u691c\u77e5\u4e2d(detectInterval\u6307\u5b9a\u30df\u30ea\u79d2\u9593)\u3067\u3042\u308c\u3070\u7121\u8996\n\n    if (len == 12){\n      //No accurate information about MAC address and length of the head of packet.\n      struct RxControl *sniffer = (struct RxControl*) buf;\n      return;\n    } else if (len == 128) {\n      //Management Packet\n      struct sniffer_buf2 *sniffer = (struct sniffer_buf2*) buf;\n      struct MAC_header *mac = (struct MAC_header*) sniffer->buf;\n\n      int i;\n      boolean MAC_Matching_Flag = true;\n        \n      for (i=0; i<6; i++) if (mac->addr2[i] != targetMAC1[i]) MAC_Matching_Flag = false;\n\n      if (!MAC_Matching_Flag) return; //No hit\n      \n      //Handle it.\n      Serial.println(\"ADB push detected.\");\n      ADBdetectingNow = true;\n      lastDetectedMillis = millis();\n\n      return;\n\n    } else {\n      //Data Packet\n      struct sniffer_buf *sniffer = (struct sniffer_buf*) buf;\n      struct MAC_header *mac = (struct MAC_header*) sniffer->buf;\n\n      return;\n    }\n}\n\nvoid setup() {  \n  Serial.begin(115200);\n  wifi_set_opmode(STATION_MODE);\n  wifi_set_channel(channel);\n  wifi_set_promiscuous_rx_cb(promisc_cb);\n\n  // Start!\n  wifi_promiscuous_enable(1);\n}\n\nvoid loop() {\n  unsigned long interval;\n  if (lastDetectedMillis > millis()) //\u7a3c\u50cd\u6642\u9593\u304c49.7\u65e5\u3092\u8d85\u3048millis()\u304c\u30aa\u30fc\u30d0\u30fc\u30d5\u30ed\u30fc\u3057\u305f\u5834\u5408\n    interval = (0xffffffff - lastDetectedMillis) + millis();\n  else\n    interval = millis() - lastDetectedMillis;\n    \n  if (interval > detectInterval)\n    ADBdetectingNow = false;\n}\n```\n\u4e0a\u8a18\u30b9\u30b1\u30c3\u30c1\u8d77\u52d5\u5f8c\u306bADB\u306e\u30dc\u30bf\u30f3\u3092\u62bc\u3059\u3068`ADB push detected.`\u3068\u8868\u793a\u3055\u308c\u308b\u306f\u305a\u3067\u3059\u3002\n\n#\u7d50\u8ad6\nADB\u306e\u30a4\u30d9\u30f3\u30c8\u3092\u53d6\u5f97\u3057\u3001L\u30c1\u30ab\u7b49\u3078\u306e\u5c55\u958b\u304c\u3067\u304d\u305d\u3046\u3067\u3059\u3002\n\u6b20\u70b9\u3068\u3057\u3066ESP8266\u306f\u30d7\u30ed\u30df\u30b9\u30ad\u30e3\u30b9\u30e2\u30fc\u30c9\u3067\u306e\u52d5\u4f5c\u6642\u3001WiFi\u306e\u63a5\u7d9a\u304c\u3067\u304d\u306a\u304f\u306a\u3063\u3066\u3057\u307e\u3046\u70b9\u304c\u6319\u3052\u3089\u308c\u307e\u3059\u3002\n\u3057\u304b\u3057\u30d7\u30ed\u30df\u30b9\u30ad\u30e3\u30b9\u30e2\u30fc\u30c9\u3092\u89e3\u9664\u3059\u308c\u3070\u3001WiFi\u306e\u63a5\u7d9a\u304c\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u308b\u306e\u3067\u3001Milkcocoa\u7b49\u306e\u4ed6\u306e\u30b5\u30fc\u30d3\u30b9\u3068\u9023\u643a\u3082\u53ef\u80fd\u3067\u3059\u3002\n\n\u5f8c\u65e5\u3001\u305d\u306e\u8a73\u7d30\u3092\u66f8\u304d\u305f\u3044\u3068\u601d\u3044\u307e\u3059\u3002\n12/30 23:38\u8ffd\u8a18 [ESP8266\u306b\u3088\u308bAmazon Dash Button\u3068Milkcocoa\u3068\u306e\u9023\u643a](http://qiita.com/kat-kai/items/c898a439bafe5e605dae) \u66f8\u304d\u307e\u3057\u305f\n\n\u307e\u305fAPI\u30ea\u30d5\u30a1\u30ec\u30f3\u30b9\u3092\u773a\u3081\u3066\u3044\u308b\u3068\u3001WPS\u3092\u5229\u7528\u3057\u3066WiFi\u63a5\u7d9a\u3067\u304d\u305d\u3046\u3060\u3063\u305f\u308a\u3001WiFi\u7d4c\u7531\u3067Sleep\u304b\u3089\u8d77\u3053\u305b\u305d\u3046\u3060\u3063\u305f\u308a\u3068\u8272\u3005\u3068\u9762\u767d\u305d\u3046\u306aAPI\u304c\u3042\u308a\u307e\u3057\u305f\u306e\u3067\u3001\u4eca\u5f8c\u305d\u3046\u3044\u3063\u305f\u3053\u3068\u3082\u8a18\u4e8b\u306b\u3057\u3066\u3044\u304d\u305f\u3044\u3068\u601d\u3044\u307e\u3059\u3002\n\n\n\n## \u53c2\u8003\u6587\u732e\n- WiFi\u63a5\u7d9a\n  - http://qiita.com/azusa9/items/7f78069cb09872cf6cbf\n- Amazon Dash Button\n  - http://qiita.com/jsoizo/items/3b8bba4160f41aef20f4\n  - http://qiita.com/dkawashi/items/e6621c4b712b509c73ec\n"}