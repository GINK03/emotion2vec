{"tags": ["Android", "AndroidStudio", "OpenCV", "Java"], "context": "\n\n\u306f\u3058\u3081\u306b\nAndroid\u3067OpenCV3.2\u3092\u5229\u7528\u3057\u3066\u30bd\u30fc\u30d9\u30eb\u30d5\u30a3\u30eb\u30bf\u3092\u5b9f\u88c5\u3057\u305f\u3002\nJava\u306eOpenCV\u3067\u306f\u601d\u3046\u3088\u3046\u306b\u3067\u304d\u306a\u3044\u90e8\u5206\u304c\u3044\u304f\u3064\u304b\u3042\u3063\u305f\u306e\u3067\u30e1\u30e2\n\n\u5b9f\u884c\u74b0\u5883\u306a\u3069\n\n\u30bd\u30d5\u30c8\u30a6\u30a7\u30a2\nWindows 10 Home 64bit\nAndroid Studio 2.2.3\nOpenCV 3.2\n\n\u30c7\u30d0\u30c3\u30b0\u7aef\u672b\nNexus 5x (Android 7.1.1)\n\nOpenCV\u306e\u6e96\u5099\n\u4ee5\u4e0b\u53c2\u7167\nOpenCV for Android\u3092Android Studio\u306b\u5c0e\u5165\u3059\u308b\u30e1\u30e2\n\n\u30dd\u30a4\u30f3\u30c8\n\u305f\u3060\u306e\u4e00\u65b9\u5411\u306e\u30bd\u30fc\u30d9\u30eb\u30d5\u30a3\u30eb\u30bf\u3060\u3068\u3064\u307e\u3089\u306a\u3044\u306e\u3067\u3001\u30b0\u30ec\u30fc\u30b9\u30b1\u30fc\u30eb\u306b\u5909\u63db\u3057\u3066\u304b\u3089\u30d5\u30a3\u30eb\u30bf\u51e6\u7406\u3092\u884c\u308f\u305a\u3042\u3048\u3066RGB\u6210\u5206\u306b\u5206\u5272\u3057\u3066\u305d\u308c\u305e\u308c\u306e\u8272\u3067X\u65b9\u5411\u3068y\u65b9\u5411\u306e\u30d5\u30a3\u30eb\u30bf\u51e6\u7406\u3092\u884c\u3044\u4e8c\u4e57\u5e73\u5747\u5e73\u65b9\u6839\u3092\u3068\u3063\u305f\u5f8c\u3067\u3001\u4e09\u3064\u306e\u6210\u5206\u306e\u5024\u306a\u304b\u3067\u306e\u6700\u5927\u5024\u3092\u6700\u7d42\u7684\u306a\u753b\u7d20\u5024\u3068\u3057\u305f\u3002\n\n\u30e1\u30e2\nC++\u306eOpenCV\u3060\u3068\n\nmatC = matA +matB;\n\n\u307f\u305f\u3044\u306a\u66f8\u304d\u65b9\u304c\u3067\u304d\u308b\u3051\u3069Java\u306eOpenCV\u3067\u306f\u3067\u304d\u306a\u3044\n\n\u30b3\u30fc\u30c9\n    private Bitmap sobel(Bitmap bitmap) {\n        bitmap = bitmap.copy(Bitmap.Config.ARGB_8888, true);\n        Mat mat = new Mat();\n        Mat matR = new Mat();\n        Mat matG = new Mat();\n        Mat matB = new Mat();\n        Utils.bitmapToMat(bitmap, mat);\n\n        Core.extractChannel(mat, matR, 0);\n        myFiltering(matR);\n\n        Core.extractChannel(mat, matG, 1);\n        myFiltering(matG);\n\n        Core.extractChannel(mat, matB, 2);\n        myFiltering(matB);\n\n        matMax3(matB, matG, matR, matB);\n\n        Utils.matToBitmap(matB, bitmap);\n        return bitmap;\n    }\n\n    private void myFiltering(Mat src){\n        Mat matX = new Mat();\n        Mat matY = new Mat();\n\n        Imgproc.GaussianBlur(src, src, new Size(3, 3), 0, 0);\n        Imgproc.Sobel(src, matX, src.depth(), 0, 1);\n        Imgproc.Sobel(src, matY, src.depth(), 1, 0);\n        matRMS(matX, matY, src);\n    }\n\n    private void matRMS(Mat src1, Mat src2, Mat dst) {\n\n        int size = (int) (src1.total() * src1.channels());\n        byte[] temp1 = new byte[size];\n        byte[] temp2 = new byte[size];\n        byte[] temp3 = new byte[size];\n        src1.get(0, 0, temp1);\n        src2.get(0, 0, temp2);\n\n        for (int i = 0; i < size; i++) {\n            temp3[i] = (byte)Math.sqrt((temp1[i] * temp1[i] + temp2[i] * temp2[i]) / 2);\n        }\n\n        dst.put(0, 0, temp3);\n    }\n\n    private void matMax3(Mat src1, Mat src2, Mat src3, Mat dst) {\n\n        int size = (int) (src1.total() * src1.channels());\n        byte[] temp1 = new byte[size];\n        byte[] temp2 = new byte[size];\n        byte[] temp3 = new byte[size];\n        byte[] temp4 = new byte[size];\n        src1.get(0, 0, temp1);\n        src2.get(0, 0, temp2);\n        src3.get(0, 0, temp3);\n\n        for (int i = 0; i < size; i++) {\n            temp4[i] = chooseBig(chooseBig(temp1[i], temp2[i]), temp3[i]);\n        }\n\n        dst.put(0, 0, temp4);\n    }\n\n    private byte chooseBig(byte a, byte b) {\n        if(b > a) {\n            return b;\n        }else {\n            return a;\n        }\n    }\n\n\n\u5b9f\u6a5f\u3067\u306e\u5b9f\u884c\u7d50\u679c\n\n\nGitHub\u306e\u30ea\u30f3\u30af\nGUI\u306e\u90fd\u5408\u4e0aAsyncTask\u3092\u7528\u3044\u3066\u5b9f\u88c5\u3057\u305f\u3002\n\u3053\u3061\u3089\n\napk\n\u30d3\u30eb\u30c9\u3057\u305fapk\u306e\u30ea\u30f3\u30af\n\u3053\u3061\u3089\n\u203bAndroid\u7aef\u672b\u306bOpenCV Manager\u306e\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u304c\u5fc5\u8981\u3067\u3059\u3002\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3055\u308c\u3066\u3044\u306a\u3044\u5834\u5408\u306fGoogle Play Store\u3078\u98db\u3070\u3055\u308c\u307e\u3059\n\u203b\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u306f\u81ea\u5df1\u8cac\u4efb\u3067\n\n\u53c2\u8003\nOpenCV\u3068Visual C++\u306b\u3088\u308b\u753b\u50cf\u51e6\u7406\u3068\u8a8d\u8b58\uff08\uff17\uff09----- \u3044\u308d\u3044\u308d\u306a\u30a8\u30c3\u30b8\u691c\u51fa\u30d5\u30a3\u30eb\u30bf\u3092\u4f7f\u7528\u3059\u308b ----- \n#\u306f\u3058\u3081\u306b\nAndroid\u3067OpenCV3.2\u3092\u5229\u7528\u3057\u3066\u30bd\u30fc\u30d9\u30eb\u30d5\u30a3\u30eb\u30bf\u3092\u5b9f\u88c5\u3057\u305f\u3002\nJava\u306eOpenCV\u3067\u306f\u601d\u3046\u3088\u3046\u306b\u3067\u304d\u306a\u3044\u90e8\u5206\u304c\u3044\u304f\u3064\u304b\u3042\u3063\u305f\u306e\u3067\u30e1\u30e2\n\n#\u5b9f\u884c\u74b0\u5883\u306a\u3069\n##\u30bd\u30d5\u30c8\u30a6\u30a7\u30a2\nWindows 10 Home 64bit\nAndroid Studio 2.2.3\nOpenCV 3.2\n##\u30c7\u30d0\u30c3\u30b0\u7aef\u672b\nNexus 5x (Android 7.1.1)\n\n#OpenCV\u306e\u6e96\u5099\n\u4ee5\u4e0b\u53c2\u7167\n[OpenCV for Android\u3092Android Studio\u306b\u5c0e\u5165\u3059\u308b\u30e1\u30e2](http://qiita.com/kodai100/items/6c9e8a34d0714913c017)\n\n#\u30dd\u30a4\u30f3\u30c8\n\u305f\u3060\u306e\u4e00\u65b9\u5411\u306e\u30bd\u30fc\u30d9\u30eb\u30d5\u30a3\u30eb\u30bf\u3060\u3068\u3064\u307e\u3089\u306a\u3044\u306e\u3067\u3001\u30b0\u30ec\u30fc\u30b9\u30b1\u30fc\u30eb\u306b\u5909\u63db\u3057\u3066\u304b\u3089\u30d5\u30a3\u30eb\u30bf\u51e6\u7406\u3092\u884c\u308f\u305a\u3042\u3048\u3066RGB\u6210\u5206\u306b\u5206\u5272\u3057\u3066\u305d\u308c\u305e\u308c\u306e\u8272\u3067X\u65b9\u5411\u3068y\u65b9\u5411\u306e\u30d5\u30a3\u30eb\u30bf\u51e6\u7406\u3092\u884c\u3044\u4e8c\u4e57\u5e73\u5747\u5e73\u65b9\u6839\u3092\u3068\u3063\u305f\u5f8c\u3067\u3001\u4e09\u3064\u306e\u6210\u5206\u306e\u5024\u306a\u304b\u3067\u306e\u6700\u5927\u5024\u3092\u6700\u7d42\u7684\u306a\u753b\u7d20\u5024\u3068\u3057\u305f\u3002\n\n#\u30e1\u30e2\nC++\u306eOpenCV\u3060\u3068\n```\nmatC = matA +matB;\n```\n\u307f\u305f\u3044\u306a\u66f8\u304d\u65b9\u304c\u3067\u304d\u308b\u3051\u3069Java\u306eOpenCV\u3067\u306f\u3067\u304d\u306a\u3044\n\n#\u30b3\u30fc\u30c9\n```\n    private Bitmap sobel(Bitmap bitmap) {\n        bitmap = bitmap.copy(Bitmap.Config.ARGB_8888, true);\n        Mat mat = new Mat();\n        Mat matR = new Mat();\n        Mat matG = new Mat();\n        Mat matB = new Mat();\n        Utils.bitmapToMat(bitmap, mat);\n\n        Core.extractChannel(mat, matR, 0);\n        myFiltering(matR);\n\n        Core.extractChannel(mat, matG, 1);\n        myFiltering(matG);\n\n        Core.extractChannel(mat, matB, 2);\n        myFiltering(matB);\n\n        matMax3(matB, matG, matR, matB);\n\n        Utils.matToBitmap(matB, bitmap);\n        return bitmap;\n    }\n\n    private void myFiltering(Mat src){\n        Mat matX = new Mat();\n        Mat matY = new Mat();\n\n        Imgproc.GaussianBlur(src, src, new Size(3, 3), 0, 0);\n        Imgproc.Sobel(src, matX, src.depth(), 0, 1);\n        Imgproc.Sobel(src, matY, src.depth(), 1, 0);\n        matRMS(matX, matY, src);\n    }\n\n    private void matRMS(Mat src1, Mat src2, Mat dst) {\n\n        int size = (int) (src1.total() * src1.channels());\n        byte[] temp1 = new byte[size];\n        byte[] temp2 = new byte[size];\n        byte[] temp3 = new byte[size];\n        src1.get(0, 0, temp1);\n        src2.get(0, 0, temp2);\n\n        for (int i = 0; i < size; i++) {\n            temp3[i] = (byte)Math.sqrt((temp1[i] * temp1[i] + temp2[i] * temp2[i]) / 2);\n        }\n\n        dst.put(0, 0, temp3);\n    }\n\n    private void matMax3(Mat src1, Mat src2, Mat src3, Mat dst) {\n\n        int size = (int) (src1.total() * src1.channels());\n        byte[] temp1 = new byte[size];\n        byte[] temp2 = new byte[size];\n        byte[] temp3 = new byte[size];\n        byte[] temp4 = new byte[size];\n        src1.get(0, 0, temp1);\n        src2.get(0, 0, temp2);\n        src3.get(0, 0, temp3);\n\n        for (int i = 0; i < size; i++) {\n            temp4[i] = chooseBig(chooseBig(temp1[i], temp2[i]), temp3[i]);\n        }\n\n        dst.put(0, 0, temp4);\n    }\n\n    private byte chooseBig(byte a, byte b) {\n        if(b > a) {\n            return b;\n        }else {\n            return a;\n        }\n    }\n```\n\n#\u5b9f\u6a5f\u3067\u306e\u5b9f\u884c\u7d50\u679c\n![Screenshot_20170216-223854-1.jpg](https://qiita-image-store.s3.amazonaws.com/0/165966/f78113be-4dd4-e3bb-15bd-73540ce52d16.jpeg)\n\n#GitHub\u306e\u30ea\u30f3\u30af\nGUI\u306e\u90fd\u5408\u4e0aAsyncTask\u3092\u7528\u3044\u3066\u5b9f\u88c5\u3057\u305f\u3002\n[\u3053\u3061\u3089](https://github.com/johejo/SobelFilter)\n\n#apk\n\u30d3\u30eb\u30c9\u3057\u305fapk\u306e\u30ea\u30f3\u30af\n[\u3053\u3061\u3089](https://drive.google.com/file/d/0B1W9yZQcxJ-ER3EzSDdoWkl2M2M/view?usp=sharing)\n\u203bAndroid\u7aef\u672b\u306bOpenCV Manager\u306e\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u304c\u5fc5\u8981\u3067\u3059\u3002\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3055\u308c\u3066\u3044\u306a\u3044\u5834\u5408\u306fGoogle Play Store\u3078\u98db\u3070\u3055\u308c\u307e\u3059\n\u203b\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u306f\u81ea\u5df1\u8cac\u4efb\u3067\n\n#\u53c2\u8003\n[OpenCV\u3068Visual C++\u306b\u3088\u308b\u753b\u50cf\u51e6\u7406\u3068\u8a8d\u8b58\uff08\uff17\uff09----- \u3044\u308d\u3044\u308d\u306a\u30a8\u30c3\u30b8\u691c\u51fa\u30d5\u30a3\u30eb\u30bf\u3092\u4f7f\u7528\u3059\u308b ----- ](http://ishidate.my.coocan.jp/opencv_7/opencv_7.htm)\n\n\n"}