{"context": " More than 1 year has passed since last update.\u305d\u306e2\n\u305d\u306e3\n\n\u6982\u8981\nActionCable\u306e\u30b3\u30fc\u30c9\u30ea\u30fc\u30c7\u30a3\u30f3\u30b0\u3092\u3057\u3064\u3064\u30e1\u30e2\u66f8\u304d\u3002\n\u4eca\u56de\u306f\u521d\u671f\u5316\u90e8\u5206\u3092\u898b\u3066\u3044\u304d\u307e\u3059\u3002\n\nActionCable::Server::Base#call\nActionCable\u306fRails::Engine\u3068\u3057\u3066\u5b9f\u88c5\u3055\u308c\u3066\u3044\u308b\u305f\u3081\u3001\u3053\u3053\u304c\u30a8\u30f3\u30c9\u30dd\u30a4\u30f3\u30c8\u306b\u306a\u308b\u3002\ndef call(env)\n  setup_heartbeat_timer\n  config.connection_class.new(self, env).process\nend\n\nsetup_heartbeat_timer\u306fActionCable::Server::Connection\u30e2\u30b8\u30e5\u30fc\u30eb\u306e\u30e1\u30bd\u30c3\u30c9\u3067\u3059\u3002\n# WebSocket connection implementations differ on when they'll mark a connection as stale. We basically never want a connection to go stale, as you\n# then can't rely on being able to receive and send to it. So there's a 3 second heartbeat running on all connections. If the beat fails, we automatically\n# disconnect.\ndef setup_heartbeat_timer\n  EM.next_tick do\n    @heartbeat_timer ||= EventMachine.add_periodic_timer(BEAT_INTERVAL) do\n      EM.next_tick { connections.map(&:beat) }\n    end\n  end\nend\n\n\u30b3\u30e1\u30f3\u30c8\u306b\u66f8\u3044\u3066\u3042\u308b\u901a\u308a\u30013\u79d2\u3054\u3068\u306b\u3059\u3079\u3066\u306e\u30b3\u30cd\u30af\u30b7\u30e7\u30f3\u306bheartbeat\u3092\u9001\u3063\u3066\u3001\u5931\u6557\u3057\u305f\u3089disconnect\u3059\u308b\u30e1\u30bd\u30c3\u30c9\u3067\u3059\u306d\u3002\n\nActionCable::Server::Configuration\nconfig\u306fActionCable::Server::Configuration\u3092\u898b\u3066\u3044\u307e\u3059\u3002\ncattr_accessor(:config, instance_accessor: true) { ActionCable::Server::Configuration.new }\n\nconnection_class\u306fAppllicatinCable::Connection\u306e\u3088\u3046\u3067\u3059\u3002\n# ActionCable::Server::Configuration\ndef initialize\n  @log_tags = []\n\n  @connection_class  = ApplicationCable::Connection\n  @worker_pool_size  = 100\n\n  @channels_path = Rails.root.join('app/channels')\n\n  @disable_request_forgery_protection = false\nend\n\n\nApplicationCable::Connection\nApplicationCable::Connection\u306fActionCable::Connection::Base\u3092\u7d99\u627f\u3057\u3066\u3044\u307e\u3059\u3002\nmodule ApplicationCable\n  class Connection < ActionCable::Connection::Base\n  end\nend\n\n\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u306f\u3053\u306e\u3088\u3046\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u3002\nserver\u306bActionCable::Server::Base\u304c\u3001\nenv\u306bActionCable::Server::Base#call\u306b\u6e21\u3055\u308c\u305fenv\u304c\u305d\u306e\u307e\u307e\u6e21\u3055\u308c\u307e\u3059\u3002\n\u3069\u3046\u3084\u3089websocket\u306e\u521d\u671f\u5316\u3082\u3053\u3053\u3067\u884c\u3063\u3066\u3044\u308b\u3088\u3046\u3067\u3059\u3002\ndef initialize(server, env)\n  @server, @env = server, env\n\n  @logger = new_tagged_logger\n\n  @websocket      = ActionCable::Connection::WebSocket.new(env)\n  @subscriptions  = ActionCable::Connection::Subscriptions.new(self)\n  @message_buffer = ActionCable::Connection::MessageBuffer.new(self)\n\n  @_internal_redis_subscriptions = nil\n  @started_at = Time.now\nend\n\n\nActionCable::Connection::Base#process\ninitialize\u306e\u5f8c\u306b\u547c\u3070\u308c\u308bprocess\u30e1\u30bd\u30c3\u30c9\u306f\u6b21\u306e\u3088\u3046\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u3002\ndef process\n  logger.info started_request_message\n\n  if websocket.possible? && allow_request_origin?\n    websocket.on(:open)    { |event| send_async :on_open   }\n    websocket.on(:message) { |event| on_message event.data }\n    websocket.on(:close)   { |event| send_async :on_close  }\n\n    respond_to_successful_request\n  else\n    respond_to_invalid_request\n  end\nend\n\nwebsocket\u304c\u53ef\u80fd\u304b\u3069\u3046\u304b\u30fbrequest_origin\u304c\u8a31\u53ef\u3055\u308c\u3066\u3044\u308b\u304b\u3069\u3046\u304b\u3092\u30c1\u30a7\u30c3\u30af\u3057\u3066\u3001\u6210\u529f\u30fb\u5931\u6557\u3092\u8fd4\u3059\u3088\u3046\u3067\u3059\u3002\n\u307e\u305f\u3001websocket\u3078 on/message/close \u306e\u30a4\u30d9\u30f3\u30c8\u30cf\u30f3\u30c9\u30e9\u306e\u767b\u9332\u3082\u3053\u3053\u3067\u884c\u308f\u308c\u3066\u3044\u307e\u3059\u3002\nrespond_to_successful_request\u306e\u4e2d\u8eab\u306frack\u306e\u30ec\u30b9\u30dd\u30f3\u30b9\u3092\u8fd4\u3059\u3060\u3051\u3067\u3059\u3002\ndef respond_to_successful_request\n  websocket.rack_response\nend\n\nrespond_to_invalid_request\u306e\u4e2d\u8eab\u306fwebsocket\u304c\u307e\u3060\u751f\u304d\u3066\u305f\u3089close\u3057\u3066404\u3092\u8fd4\u3059\u3088\u3046\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u3002\ndef respond_to_invalid_request\n  close if websocket.alive?\n\n  logger.info finished_request_message\n  [ 404, { 'Content-Type' => 'text/plain' }, [ 'Page not found' ] ]\nend\n\n\nActionCable::Connection::WebSocket\nActionCable\u306ewebsocket\u306e\u90e8\u5206\u306ffeya-websocket\u3068\u3044\u3046gem\u306e\u30e9\u30c3\u30d1\u30fc\u3068\u3057\u3066\u5b9f\u88c5\u3055\u308c\u3066\u3044\u307e\u3059\u3002\nrequire 'faye/websocket'\n\nmodule ActionCable\n  module Connection\n    # Decorate the Faye::WebSocket with helpers we need.\n    class WebSocket\n      delegate :rack_response, :close, :on, to: :websocket\n\n      def initialize(env)\n        @websocket = Faye::WebSocket.websocket?(env) ? Faye::WebSocket.new(env) : nil\n      end\n\n      def possible?\n        websocket\n      end\n\n      # ...\n\nfeya-websocket\u306ffeya\u3068\u3044\u3046\u30b7\u30f3\u30d7\u30eb\u306aPub/Sub\u30e1\u30c3\u30bb\u30fc\u30b8\u30f3\u30b0\u3092\u884c\u3046\u305f\u3081\u306egem\u306ewebsocket\u306e\u90e8\u5206\u3092\u5207\u308a\u51fa\u3057\u305fgem\u3060\u305d\u3046\u3067\u3059\u3002\n\u5358\u54c1\u3067\u4f7f\u3063\u305f\u3053\u3068\u304c\u3042\u308a\u307e\u3059\u304c\u3001\u7c21\u5358\u306bwebsocket\u3092\u5b9f\u88c5\u3067\u304d\u305f\u306e\u3067\u3001websocket\u30b5\u30fc\u30d0\u5358\u72ec\u3067\u52d5\u304b\u3059\u3068\u304d\u306f\u9078\u629e\u80a2\u306e1\u3064\u306b\u306a\u308b\u3068\u601d\u3044\u307e\u3059\u3002\n\u5148\u307b\u3069\u51fa\u3066\u304d\u305fpossible?\u30e1\u30bd\u30c3\u30c9\u306fwebsocket\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u304c\u3042\u308b\u304b\u3069\u3046\u304b\u5224\u5b9a\u3057\u3066\u308b\u3060\u3051\u3067\u3059\u306d\u3002\nRack\u304b\u3089\u6e21\u3055\u308c\u305fenv\u304cwebsocket\u306erequest\u304b\u3069\u3046\u304b\u5224\u5b9a\u3057\u3066\u3001websocket\u3067\u306a\u3051\u308c\u3070nil\u304c\u8a2d\u5b9a\u3055\u308c\u308b\u3088\u3046\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u3002\n\nActionCable::Connection::Subscriptions\n\u91cd\u8981\u305d\u3046\u306a\u540d\u524d\u306a\u306e\u3067\u3053\u3061\u3089\u3082\u8997\u304d\u898b\u3002\nmodule ActionCable\n  module Connection\n    # Collection class for all the channel subscriptions established on a given connection. Responsible for routing incoming commands that arrive on\n    # the connection to the proper channel. Should not be used directly by the user.\n    class Subscriptions\n      def initialize(connection)\n        @connection = connection\n        @subscriptions = {}\n      end\n\n\u30b3\u30e1\u30f3\u30c8\u306b\u66f8\u3044\u3066\u3042\u308b\u901a\u308a\u3001\u63a5\u7d9a\u304c\u78ba\u7acb\u3057\u3066\u3044\u308b\u3059\u3079\u3066\u306echannel subscriptions\u306e\u30b3\u30ec\u30af\u30b7\u30e7\u30f3\u30af\u30e9\u30b9\u306e\u3088\u3046\u3067\u3059\u3002\n\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u304b\u3089\u9001\u4fe1\u3055\u308c\u305f\u30b3\u30de\u30f3\u30c9\u306b\u3088\u3063\u3066\u9069\u5207\u306a\u30c1\u30e3\u30f3\u30cd\u30eb\u3078\u3068\u30eb\u30fc\u30c6\u30a3\u30f3\u30b0\u3059\u308b\u8cac\u52d9\u3092\u62c5\u3046\u307f\u305f\u3044\u3067\u3059\u3002\n\nActionCable::Connection::MessageBuffer\n\u3064\u3044\u3067\u306b\u3053\u3061\u3089\u3082\u3002\nmodule ActionCable\n  module Connection\n    # Allows us to buffer messages received from the WebSocket before the Connection has been fully initialized and is ready to receive them.\n    # Entirely internal operation and should not be used directly by the user.\n    class MessageBuffer\n      def initialize(connection)\n        @connection = connection\n        @buffered_messages = []\n      end\n\n\u5c11\u306a\u304f\u3068\u3082\u63a5\u7d9a\u304c\u521d\u671f\u5316\u3055\u308c\u308b\u524d\u306b\u306fwebsocket\u304b\u3089\u306e\u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u30d0\u30c3\u30d5\u30a1\u30ea\u30f3\u30b0\u30fb\u53d7\u4fe1\u3059\u308b\u6e96\u5099\u304c\u51fa\u6765\u3066\u3044\u308b\u3088\u3046\u306b\u3059\u308b\u305f\u3081\u306e\u30af\u30e9\u30b9\u2026\u2026\u3063\u3066\u3053\u3068\u3067\u3059\u304b\u306d\u3002\n\u4e2d\u8eab\u898b\u3066\u3082append\u3068\u304breceive\u3068\u304bprocess\u3068\u304b\u3001process_buffered_messages\u3068\u3044\u3063\u305f\u30e1\u30bd\u30c3\u30c9\u304c\u3042\u308b\u306e\u3067\u305d\u308c\u3063\u307d\u3044\u3067\u3059\u3002\n\n\u4eca\u56de\u306e\u307e\u3068\u3081\nActionCable\u304c\u30ea\u30af\u30a8\u30b9\u30c8\u3092\u53d7\u3051\u53d6\u308a\u3001WebSocket\u306econnection\u304c\u78ba\u7acb\u3055\u308c\u308b\u307e\u3067\u306e\u6d41\u308c\u3092\u898b\u308b\u3053\u3068\u304c\u51fa\u6765\u307e\u3057\u305f\u3002\n\u6b21\u306f\u30e1\u30c3\u30bb\u30fc\u30b8\u30f3\u30b0\u3084PubSub\u306e\u90e8\u5206\u3092\u898b\u3066\u3044\u3051\u305f\u3089\u3068\u601d\u3044\u307e\u3059\u3002\n\n[\u305d\u306e2](http://qiita.com/wakaba260/items/2f578b8e08ef6ac0c1c4)\n[\u305d\u306e3](http://qiita.com/wakaba260/items/bc03a306604f2f543a15)\n\n## \u6982\u8981\n\nActionCable\u306e\u30b3\u30fc\u30c9\u30ea\u30fc\u30c7\u30a3\u30f3\u30b0\u3092\u3057\u3064\u3064\u30e1\u30e2\u66f8\u304d\u3002\n\u4eca\u56de\u306f\u521d\u671f\u5316\u90e8\u5206\u3092\u898b\u3066\u3044\u304d\u307e\u3059\u3002\n\n## ActionCable::Server::Base#call\n\nActionCable\u306fRails::Engine\u3068\u3057\u3066\u5b9f\u88c5\u3055\u308c\u3066\u3044\u308b\u305f\u3081\u3001\u3053\u3053\u304c\u30a8\u30f3\u30c9\u30dd\u30a4\u30f3\u30c8\u306b\u306a\u308b\u3002\n\n```ruby\ndef call(env)\n  setup_heartbeat_timer\n  config.connection_class.new(self, env).process\nend\n```\n\nsetup_heartbeat_timer\u306fActionCable::Server::Connection\u30e2\u30b8\u30e5\u30fc\u30eb\u306e\u30e1\u30bd\u30c3\u30c9\u3067\u3059\u3002\n\n```ruby\n# WebSocket connection implementations differ on when they'll mark a connection as stale. We basically never want a connection to go stale, as you\n# then can't rely on being able to receive and send to it. So there's a 3 second heartbeat running on all connections. If the beat fails, we automatically\n# disconnect.\ndef setup_heartbeat_timer\n  EM.next_tick do\n    @heartbeat_timer ||= EventMachine.add_periodic_timer(BEAT_INTERVAL) do\n      EM.next_tick { connections.map(&:beat) }\n    end\n  end\nend\n```\n\n\u30b3\u30e1\u30f3\u30c8\u306b\u66f8\u3044\u3066\u3042\u308b\u901a\u308a\u30013\u79d2\u3054\u3068\u306b\u3059\u3079\u3066\u306e\u30b3\u30cd\u30af\u30b7\u30e7\u30f3\u306bheartbeat\u3092\u9001\u3063\u3066\u3001\u5931\u6557\u3057\u305f\u3089disconnect\u3059\u308b\u30e1\u30bd\u30c3\u30c9\u3067\u3059\u306d\u3002\n\n### ActionCable::Server::Configuration\n\nconfig\u306fActionCable::Server::Configuration\u3092\u898b\u3066\u3044\u307e\u3059\u3002\n\n```ruby\ncattr_accessor(:config, instance_accessor: true) { ActionCable::Server::Configuration.new }\n```\n\nconnection_class\u306fAppllicatinCable::Connection\u306e\u3088\u3046\u3067\u3059\u3002\n\n```ruby\n# ActionCable::Server::Configuration\ndef initialize\n  @log_tags = []\n\n  @connection_class  = ApplicationCable::Connection\n  @worker_pool_size  = 100\n\n  @channels_path = Rails.root.join('app/channels')\n\n  @disable_request_forgery_protection = false\nend\n```\n\n### ApplicationCable::Connection\n\nApplicationCable::Connection\u306fActionCable::Connection::Base\u3092\u7d99\u627f\u3057\u3066\u3044\u307e\u3059\u3002\n\n```ruby\nmodule ApplicationCable\n  class Connection < ActionCable::Connection::Base\n  end\nend\n```\n\n\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u306f\u3053\u306e\u3088\u3046\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u3002\nserver\u306bActionCable::Server::Base\u304c\u3001\nenv\u306bActionCable::Server::Base#call\u306b\u6e21\u3055\u308c\u305fenv\u304c\u305d\u306e\u307e\u307e\u6e21\u3055\u308c\u307e\u3059\u3002\n\u3069\u3046\u3084\u3089websocket\u306e\u521d\u671f\u5316\u3082\u3053\u3053\u3067\u884c\u3063\u3066\u3044\u308b\u3088\u3046\u3067\u3059\u3002\n\n```ruby\ndef initialize(server, env)\n  @server, @env = server, env\n\n  @logger = new_tagged_logger\n\n  @websocket      = ActionCable::Connection::WebSocket.new(env)\n  @subscriptions  = ActionCable::Connection::Subscriptions.new(self)\n  @message_buffer = ActionCable::Connection::MessageBuffer.new(self)\n\n  @_internal_redis_subscriptions = nil\n  @started_at = Time.now\nend\n```\n\n### ActionCable::Connection::Base#process\n\ninitialize\u306e\u5f8c\u306b\u547c\u3070\u308c\u308bprocess\u30e1\u30bd\u30c3\u30c9\u306f\u6b21\u306e\u3088\u3046\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u3002\n\n```ruby\ndef process\n  logger.info started_request_message\n\n  if websocket.possible? && allow_request_origin?\n    websocket.on(:open)    { |event| send_async :on_open   }\n    websocket.on(:message) { |event| on_message event.data }\n    websocket.on(:close)   { |event| send_async :on_close  }\n\n    respond_to_successful_request\n  else\n    respond_to_invalid_request\n  end\nend\n```\n\nwebsocket\u304c\u53ef\u80fd\u304b\u3069\u3046\u304b\u30fbrequest_origin\u304c\u8a31\u53ef\u3055\u308c\u3066\u3044\u308b\u304b\u3069\u3046\u304b\u3092\u30c1\u30a7\u30c3\u30af\u3057\u3066\u3001\u6210\u529f\u30fb\u5931\u6557\u3092\u8fd4\u3059\u3088\u3046\u3067\u3059\u3002\n\u307e\u305f\u3001websocket\u3078 on/message/close \u306e\u30a4\u30d9\u30f3\u30c8\u30cf\u30f3\u30c9\u30e9\u306e\u767b\u9332\u3082\u3053\u3053\u3067\u884c\u308f\u308c\u3066\u3044\u307e\u3059\u3002\n\nrespond_to_successful_request\u306e\u4e2d\u8eab\u306frack\u306e\u30ec\u30b9\u30dd\u30f3\u30b9\u3092\u8fd4\u3059\u3060\u3051\u3067\u3059\u3002\n\n```ruby\ndef respond_to_successful_request\n  websocket.rack_response\nend\n```\n\nrespond_to_invalid_request\u306e\u4e2d\u8eab\u306fwebsocket\u304c\u307e\u3060\u751f\u304d\u3066\u305f\u3089close\u3057\u3066404\u3092\u8fd4\u3059\u3088\u3046\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u3002\n\n```ruby\ndef respond_to_invalid_request\n  close if websocket.alive?\n\n  logger.info finished_request_message\n  [ 404, { 'Content-Type' => 'text/plain' }, [ 'Page not found' ] ]\nend\n```\n\n## ActionCable::Connection::WebSocket\n\nActionCable\u306ewebsocket\u306e\u90e8\u5206\u306ffeya-websocket\u3068\u3044\u3046gem\u306e\u30e9\u30c3\u30d1\u30fc\u3068\u3057\u3066\u5b9f\u88c5\u3055\u308c\u3066\u3044\u307e\u3059\u3002\n\n```ruby\nrequire 'faye/websocket'\n\nmodule ActionCable\n  module Connection\n    # Decorate the Faye::WebSocket with helpers we need.\n    class WebSocket\n      delegate :rack_response, :close, :on, to: :websocket\n\n      def initialize(env)\n        @websocket = Faye::WebSocket.websocket?(env) ? Faye::WebSocket.new(env) : nil\n      end\n\n      def possible?\n        websocket\n      end\n\n      # ...\n```\n\n[feya-websocket](https://github.com/faye/faye-websocket-ruby)\u306f[feya](https://github.com/faye/faye)\u3068\u3044\u3046\u30b7\u30f3\u30d7\u30eb\u306aPub/Sub\u30e1\u30c3\u30bb\u30fc\u30b8\u30f3\u30b0\u3092\u884c\u3046\u305f\u3081\u306egem\u306ewebsocket\u306e\u90e8\u5206\u3092\u5207\u308a\u51fa\u3057\u305fgem\u3060\u305d\u3046\u3067\u3059\u3002\n\u5358\u54c1\u3067\u4f7f\u3063\u305f\u3053\u3068\u304c\u3042\u308a\u307e\u3059\u304c\u3001\u7c21\u5358\u306bwebsocket\u3092\u5b9f\u88c5\u3067\u304d\u305f\u306e\u3067\u3001websocket\u30b5\u30fc\u30d0\u5358\u72ec\u3067\u52d5\u304b\u3059\u3068\u304d\u306f\u9078\u629e\u80a2\u306e1\u3064\u306b\u306a\u308b\u3068\u601d\u3044\u307e\u3059\u3002\n\n\u5148\u307b\u3069\u51fa\u3066\u304d\u305fpossible?\u30e1\u30bd\u30c3\u30c9\u306fwebsocket\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u304c\u3042\u308b\u304b\u3069\u3046\u304b\u5224\u5b9a\u3057\u3066\u308b\u3060\u3051\u3067\u3059\u306d\u3002\nRack\u304b\u3089\u6e21\u3055\u308c\u305fenv\u304cwebsocket\u306erequest\u304b\u3069\u3046\u304b\u5224\u5b9a\u3057\u3066\u3001websocket\u3067\u306a\u3051\u308c\u3070nil\u304c\u8a2d\u5b9a\u3055\u308c\u308b\u3088\u3046\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u3002\n\n\n### ActionCable::Connection::Subscriptions\n\n\u91cd\u8981\u305d\u3046\u306a\u540d\u524d\u306a\u306e\u3067\u3053\u3061\u3089\u3082\u8997\u304d\u898b\u3002\n\n```ruby\nmodule ActionCable\n  module Connection\n    # Collection class for all the channel subscriptions established on a given connection. Responsible for routing incoming commands that arrive on\n    # the connection to the proper channel. Should not be used directly by the user.\n    class Subscriptions\n      def initialize(connection)\n        @connection = connection\n        @subscriptions = {}\n      end\n```\n\n\u30b3\u30e1\u30f3\u30c8\u306b\u66f8\u3044\u3066\u3042\u308b\u901a\u308a\u3001\u63a5\u7d9a\u304c\u78ba\u7acb\u3057\u3066\u3044\u308b\u3059\u3079\u3066\u306echannel subscriptions\u306e\u30b3\u30ec\u30af\u30b7\u30e7\u30f3\u30af\u30e9\u30b9\u306e\u3088\u3046\u3067\u3059\u3002\n\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u304b\u3089\u9001\u4fe1\u3055\u308c\u305f\u30b3\u30de\u30f3\u30c9\u306b\u3088\u3063\u3066\u9069\u5207\u306a\u30c1\u30e3\u30f3\u30cd\u30eb\u3078\u3068\u30eb\u30fc\u30c6\u30a3\u30f3\u30b0\u3059\u308b\u8cac\u52d9\u3092\u62c5\u3046\u307f\u305f\u3044\u3067\u3059\u3002\n\n### ActionCable::Connection::MessageBuffer\n\n\u3064\u3044\u3067\u306b\u3053\u3061\u3089\u3082\u3002\n\n```ruby\nmodule ActionCable\n  module Connection\n    # Allows us to buffer messages received from the WebSocket before the Connection has been fully initialized and is ready to receive them.\n    # Entirely internal operation and should not be used directly by the user.\n    class MessageBuffer\n      def initialize(connection)\n        @connection = connection\n        @buffered_messages = []\n      end\n```\n\n\u5c11\u306a\u304f\u3068\u3082\u63a5\u7d9a\u304c\u521d\u671f\u5316\u3055\u308c\u308b\u524d\u306b\u306fwebsocket\u304b\u3089\u306e\u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u30d0\u30c3\u30d5\u30a1\u30ea\u30f3\u30b0\u30fb\u53d7\u4fe1\u3059\u308b\u6e96\u5099\u304c\u51fa\u6765\u3066\u3044\u308b\u3088\u3046\u306b\u3059\u308b\u305f\u3081\u306e\u30af\u30e9\u30b9\u2026\u2026\u3063\u3066\u3053\u3068\u3067\u3059\u304b\u306d\u3002\n\u4e2d\u8eab\u898b\u3066\u3082append\u3068\u304breceive\u3068\u304bprocess\u3068\u304b\u3001process_buffered_messages\u3068\u3044\u3063\u305f\u30e1\u30bd\u30c3\u30c9\u304c\u3042\u308b\u306e\u3067\u305d\u308c\u3063\u307d\u3044\u3067\u3059\u3002\n\n## \u4eca\u56de\u306e\u307e\u3068\u3081\n\nActionCable\u304c\u30ea\u30af\u30a8\u30b9\u30c8\u3092\u53d7\u3051\u53d6\u308a\u3001WebSocket\u306econnection\u304c\u78ba\u7acb\u3055\u308c\u308b\u307e\u3067\u306e\u6d41\u308c\u3092\u898b\u308b\u3053\u3068\u304c\u51fa\u6765\u307e\u3057\u305f\u3002\n\u6b21\u306f\u30e1\u30c3\u30bb\u30fc\u30b8\u30f3\u30b0\u3084PubSub\u306e\u90e8\u5206\u3092\u898b\u3066\u3044\u3051\u305f\u3089\u3068\u601d\u3044\u307e\u3059\u3002\n", "tags": ["Rails", "Ruby", "ActionCable"]}