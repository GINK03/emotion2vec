{"context": " More than 1 year has passed since last update.\u767a\u5149\u3057\u3066\u308b\u611f\u3058\u306ePImage\u3092\u8272\u5225\u306b\u3044\u304f\u3064\u304b\u751f\u6210\u3057\u3066\u3001\u305d\u308c\u3092\u8996\u70b9\u306b\u5bfe\u3057\u3066\u5e38\u306b\u5e73\u884c\u306b\u63cf\u753b\u3059\u308b\u3053\u3068\u30673D\u4e0a\u306b\u767a\u5149\u3059\u308b\u30d1\u30fc\u30c6\u30a3\u30af\u30eb\u304c\u305f\u304f\u3055\u3093\u3042\u308b\u3088\u3046\u306b\u898b\u305b\u308b\u3002\n\u30d1\u30fc\u30c6\u30a3\u30af\u30eb\u306f\u3001enum\u3067\u8272\u914d\u5206\u3092\u5b9a\u7fa9\u3057\u3066\u304a\u304f\u30021\u3064\u306e\u30d1\u30fc\u30c6\u30a3\u30af\u30eb\u306f\u3060\u3044\u305f\u3044\u7e26\u6a2a150px\u3050\u3089\u3044\u3067\u3001enum\u306ecalculate\u3067\u4e2d\u5fc3\u70b9\u304b\u3089\u306e\u8ddd\u96e2\u306b\u5fdc\u3058\u305fRGB\u5024\u3092\u8fd4\u3059\u3088\u3046\u306b\u3057\u3066\u308b\u3002\u305f\u3060\u3001enum\u306fProcessing 2.2.1\u3060\u3068\u4f7f\u3048\u306a\u3044\u307f\u305f\u3044\u3067\u3061\u3087\u3063\u3068\u56f0\u3063\u305f\u3002StackOverflow\u306b\u5225\u30bf\u30d6\u3067\u62e1\u5f35\u5b50\u3092java\u306b\u3059\u308b\u3068java\u3067\u66f8\u3051\u308b\u3088\u3063\u3066\u66f8\u3044\u3066\u3042\u3063\u305f\u306e\u3067\u3053\u308c\u3067\u3002\n\u8996\u70b9\u306e\u79fb\u52d5\u306fPeasycam\u3092\u521d\u3081\u3066\u4f7f\u3063\u3066\u307f\u305f\u3093\u3060\u3051\u3069\u3001\u4f55\u3082\u3057\u306a\u304f\u3066\u3082\u30de\u30a6\u30b9\u3067\u3044\u308d\u3044\u308d\u52d5\u304b\u305b\u308b\u3057\u3081\u3063\u3061\u3083\u4fbf\u5229\u3002PImage\u306fgetRotations\u306e\u7d50\u679c\u306efloat\u914d\u5217\u3092\u305d\u308c\u305e\u308crotateX, rotateY, rotateZ\u306e\u5f15\u6570\u306b\u4e0e\u3048\u3066\u304b\u3089image\u3067\u8cbc\u308a\u4ed8\u3051\u308c\u3070\u8996\u70b9\u3068\u5e73\u884c\u306b\u63cf\u753b\u3067\u304d\u308b\u3002\u70b9\u306e\u914d\u7f6e\u306b\u3064\u3044\u3066\u306f\u3001\u3053\u306e\u8cc7\u6599\u306b\u3042\u308b\u300c\u5358\u4f4d\u7403\u5185\u306b\u4e00\u69d8\u5206\u5e03\u3059\u308b\u70b9\u300d\u306e\u8a08\u7b97\u5f0f\u3092\u305d\u306e\u307e\u307e\u3002\nblendMode\u306f\u6700\u521d\u306fADD\u3092\u6307\u5b9a\u3057\u3066\u305f\u3051\u3069\u3001\u624b\u524d\u3068\u5965\u3067\u30d1\u30fc\u30c6\u30a3\u30af\u30eb\u304c\u91cd\u306a\u3063\u305f\u6642\u306b\u7121\u99c4\u306b\u5149\u3063\u3066\u3057\u307e\u3044\u6c17\u6301\u3061\u60aa\u304b\u3063\u305f\u3002\u3044\u308d\u3044\u308d\u8a66\u3057\u305f\u7d50\u679c\u3001SCREEN\u3060\u3068\u3044\u3044\u611f\u3058\u306b\u8868\u793a\u3055\u308c\u305f\u306e\u3067\u63a1\u7528\u3002\u3042\u3068hint(DISABLE_DEPTH_TEST) \u3092\u6307\u5b9a\u3057\u306a\u3044\u3068PImage\u304c\u900f\u904e\u3067\u304d\u306a\u3044\u307f\u305f\u3044\u3002\n\u3068\u3044\u3046\u308f\u3051\u3067\u3053\u3093\u306a\u611f\u3058\u306e\u30b3\u30fc\u30c9\u306b\u306a\u308a\u307e\u3057\u305f\u3002\n\nparticle3D.pde\n\nimport java.util.*;\nimport peasy.*;\n\nprivate PeasyCam cam;\nprivate Particle[] particles = new Particle[1000];\n\nprivate boolean record = false;\n\nvoid setup() {\n  size(960, 540, P3D);\n\n  hint(DISABLE_DEPTH_TEST);\n  blendMode(SCREEN);\n  imageMode(CENTER);\n  frameRate(30);\n\n  cam = new PeasyCam(this, width);\n  cam.setMaximumDistance(width * 2);\n\n  List<PImage> images = new ArrayList<PImage>();\n  for (Colors c : Colors.values ()) {\n    images.add(createLight(c));\n  }\n\n  for (int i = 0; i < particles.length; i++) {\n    PImage image = images.get(i % images.size());\n    particles[i] = new Particle(image);\n  }\n}\n\nprivate PImage createLight(Colors colors) {\n  int side = 150;\n  float center = side / 2.0;\n  PImage img = createImage(side, side, RGB);\n\n  for (int y = 0; y < side; y++) {\n    for (int x = 0; x < side; x++) {\n      float distance = (sq(center - x) + sq(center - y)) / 10;\n      int c = colors.calculate(distance);\n      img.pixels[x + y * side] = c;\n    }\n  }\n\n  return img;\n}\n\nvoid draw() {\n\n  background(0);\n  translate(width/2, height/2, 0);\n\n  cam.rotateX(radians(0.25));\n  cam.rotateY(radians(0.25));\n\n  float[] rotations = cam.getRotations();\n  for (Particle p : particles) {\n    p.render(rotations);\n  }\n\n  if (record) {\n    saveFrame(\"frame/frame-######.tif\");\n  }\n}\n\nvoid keyPressed() {\n  if (key == 's') {\n    record = true;\n  }\n}\n\nclass Particle {\n\n  private final PImage light;\n  private final float x, y, z;\n\n  Particle(PImage light) {\n    this.light = light;\n\n    float radP = radians(random(360));\n\n    float unitZ = random(-1, 1);\n    float sinT = sqrt(1 - sq(unitZ));\n\n    float unitR = pow(random(1), 1.0/3.0);\n    float r = width;\n\n    x = r * unitR * sinT * cos(radP);\n    y = r * unitR * sinT * sin(radP);\n    z = r * unitR * unitZ;\n  }\n\n  void render(float[] rotation) {\n    pushMatrix();\n    translate(x, y, z);\n    rotateX(rotation[0]);\n    rotateY(rotation[1]);\n    rotateZ(rotation[2]);\n    image(light, 0, 0);\n    popMatrix();\n  }\n}\n\n\n\nColors.java\npublic enum Colors {\n  RED(8, 4, 4), \n  ORANGE(8, 6, 4), \n  YELLOW(8, 8, 4), \n  LEAF(6, 8, 4), \n  GREEN(4, 8, 4), \n  EMERALD(4, 8, 6), \n  CYAN(4, 8, 8), \n  SKY(4, 6, 8), \n  BLUE(4, 4, 8), \n  PURPLE(6, 4, 8), \n  MAGENTA(8, 4, 8);\n\n  private static final float SUPPRESS = 3;\n  private float r, g, b;\n\n  private Colors(float r, float g, float b) {\n    this.r = r;\n    this.g = g;\n    this.b = b;\n  }\n\n  public int calculate(float d) {\n    return 0xff << 24 | color(r, d) << 16 | color(g, d) << 8 | color(b, d);\n  }\n\n  private static int color(float a, float distance) {\n    int color = (int)(256 * a / distance - SUPPRESS);\n    return Math.max(0, Math.min(color, 255));\n  }\n}\n\n\n\u5b9f\u884c\u3059\u308b\u3068\u3053\u3093\u306a\u611f\u3058\u3067\u8868\u793a\u3055\u308c\u308b\u3002\n\n\n\u767a\u5149\u3057\u3066\u308b\u611f\u3058\u306ePImage\u3092\u8272\u5225\u306b\u3044\u304f\u3064\u304b\u751f\u6210\u3057\u3066\u3001\u305d\u308c\u3092\u8996\u70b9\u306b\u5bfe\u3057\u3066\u5e38\u306b\u5e73\u884c\u306b\u63cf\u753b\u3059\u308b\u3053\u3068\u30673D\u4e0a\u306b\u767a\u5149\u3059\u308b\u30d1\u30fc\u30c6\u30a3\u30af\u30eb\u304c\u305f\u304f\u3055\u3093\u3042\u308b\u3088\u3046\u306b\u898b\u305b\u308b\u3002\n\n\u30d1\u30fc\u30c6\u30a3\u30af\u30eb\u306f\u3001enum\u3067\u8272\u914d\u5206\u3092\u5b9a\u7fa9\u3057\u3066\u304a\u304f\u30021\u3064\u306e\u30d1\u30fc\u30c6\u30a3\u30af\u30eb\u306f\u3060\u3044\u305f\u3044\u7e26\u6a2a150px\u3050\u3089\u3044\u3067\u3001enum\u306e```calculate```\u3067\u4e2d\u5fc3\u70b9\u304b\u3089\u306e\u8ddd\u96e2\u306b\u5fdc\u3058\u305fRGB\u5024\u3092\u8fd4\u3059\u3088\u3046\u306b\u3057\u3066\u308b\u3002\u305f\u3060\u3001enum\u306fProcessing 2.2.1\u3060\u3068\u4f7f\u3048\u306a\u3044\u307f\u305f\u3044\u3067\u3061\u3087\u3063\u3068\u56f0\u3063\u305f\u3002StackOverflow\u306b[\u5225\u30bf\u30d6\u3067\u62e1\u5f35\u5b50\u3092java\u306b\u3059\u308b\u3068java\u3067\u66f8\u3051\u308b\u3088](http://stackoverflow.com/questions/13370090/enums-in-processing-2-0)\u3063\u3066\u66f8\u3044\u3066\u3042\u3063\u305f\u306e\u3067\u3053\u308c\u3067\u3002\n\n\u8996\u70b9\u306e\u79fb\u52d5\u306fPeasycam\u3092\u521d\u3081\u3066\u4f7f\u3063\u3066\u307f\u305f\u3093\u3060\u3051\u3069\u3001\u4f55\u3082\u3057\u306a\u304f\u3066\u3082\u30de\u30a6\u30b9\u3067\u3044\u308d\u3044\u308d\u52d5\u304b\u305b\u308b\u3057\u3081\u3063\u3061\u3083\u4fbf\u5229\u3002PImage\u306f```getRotations```\u306e\u7d50\u679c\u306efloat\u914d\u5217\u3092\u305d\u308c\u305e\u308c```rotateX```, ```rotateY```, ```rotateZ```\u306e\u5f15\u6570\u306b\u4e0e\u3048\u3066\u304b\u3089```image```\u3067\u8cbc\u308a\u4ed8\u3051\u308c\u3070\u8996\u70b9\u3068\u5e73\u884c\u306b\u63cf\u753b\u3067\u304d\u308b\u3002\u70b9\u306e\u914d\u7f6e\u306b\u3064\u3044\u3066\u306f\u3001[\u3053\u306e\u8cc7\u6599](http://apollon.issp.u-tokyo.ac.jp/~watanabe/pdf/prob.pdf)\u306b\u3042\u308b\u300c\u5358\u4f4d\u7403\u5185\u306b\u4e00\u69d8\u5206\u5e03\u3059\u308b\u70b9\u300d\u306e\u8a08\u7b97\u5f0f\u3092\u305d\u306e\u307e\u307e\u3002\n\n```blendMode```\u306f\u6700\u521d\u306fADD\u3092\u6307\u5b9a\u3057\u3066\u305f\u3051\u3069\u3001\u624b\u524d\u3068\u5965\u3067\u30d1\u30fc\u30c6\u30a3\u30af\u30eb\u304c\u91cd\u306a\u3063\u305f\u6642\u306b\u7121\u99c4\u306b\u5149\u3063\u3066\u3057\u307e\u3044\u6c17\u6301\u3061\u60aa\u304b\u3063\u305f\u3002\u3044\u308d\u3044\u308d\u8a66\u3057\u305f\u7d50\u679c\u3001SCREEN\u3060\u3068\u3044\u3044\u611f\u3058\u306b\u8868\u793a\u3055\u308c\u305f\u306e\u3067\u63a1\u7528\u3002\u3042\u3068```hint(DISABLE_DEPTH_TEST)``` \u3092\u6307\u5b9a\u3057\u306a\u3044\u3068PImage\u304c\u900f\u904e\u3067\u304d\u306a\u3044\u307f\u305f\u3044\u3002\n\n\u3068\u3044\u3046\u308f\u3051\u3067\u3053\u3093\u306a\u611f\u3058\u306e\u30b3\u30fc\u30c9\u306b\u306a\u308a\u307e\u3057\u305f\u3002\n\n```java:particle3D.pde\n\nimport java.util.*;\nimport peasy.*;\n\nprivate PeasyCam cam;\nprivate Particle[] particles = new Particle[1000];\n\nprivate boolean record = false;\n\nvoid setup() {\n  size(960, 540, P3D);\n\n  hint(DISABLE_DEPTH_TEST);\n  blendMode(SCREEN);\n  imageMode(CENTER);\n  frameRate(30);\n\n  cam = new PeasyCam(this, width);\n  cam.setMaximumDistance(width * 2);\n\n  List<PImage> images = new ArrayList<PImage>();\n  for (Colors c : Colors.values ()) {\n    images.add(createLight(c));\n  }\n\n  for (int i = 0; i < particles.length; i++) {\n    PImage image = images.get(i % images.size());\n    particles[i] = new Particle(image);\n  }\n}\n\nprivate PImage createLight(Colors colors) {\n  int side = 150;\n  float center = side / 2.0;\n  PImage img = createImage(side, side, RGB);\n\n  for (int y = 0; y < side; y++) {\n    for (int x = 0; x < side; x++) {\n      float distance = (sq(center - x) + sq(center - y)) / 10;\n      int c = colors.calculate(distance);\n      img.pixels[x + y * side] = c;\n    }\n  }\n\n  return img;\n}\n\nvoid draw() {\n\n  background(0);\n  translate(width/2, height/2, 0);\n\n  cam.rotateX(radians(0.25));\n  cam.rotateY(radians(0.25));\n\n  float[] rotations = cam.getRotations();\n  for (Particle p : particles) {\n    p.render(rotations);\n  }\n\n  if (record) {\n    saveFrame(\"frame/frame-######.tif\");\n  }\n}\n\nvoid keyPressed() {\n  if (key == 's') {\n    record = true;\n  }\n}\n\nclass Particle {\n\n  private final PImage light;\n  private final float x, y, z;\n\n  Particle(PImage light) {\n    this.light = light;\n\n    float radP = radians(random(360));\n\n    float unitZ = random(-1, 1);\n    float sinT = sqrt(1 - sq(unitZ));\n\n    float unitR = pow(random(1), 1.0/3.0);\n    float r = width;\n\n    x = r * unitR * sinT * cos(radP);\n    y = r * unitR * sinT * sin(radP);\n    z = r * unitR * unitZ;\n  }\n\n  void render(float[] rotation) {\n    pushMatrix();\n    translate(x, y, z);\n    rotateX(rotation[0]);\n    rotateY(rotation[1]);\n    rotateZ(rotation[2]);\n    image(light, 0, 0);\n    popMatrix();\n  }\n}\n```\n\n```java:Colors.java\npublic enum Colors {\n  RED(8, 4, 4), \n  ORANGE(8, 6, 4), \n  YELLOW(8, 8, 4), \n  LEAF(6, 8, 4), \n  GREEN(4, 8, 4), \n  EMERALD(4, 8, 6), \n  CYAN(4, 8, 8), \n  SKY(4, 6, 8), \n  BLUE(4, 4, 8), \n  PURPLE(6, 4, 8), \n  MAGENTA(8, 4, 8);\n\n  private static final float SUPPRESS = 3;\n  private float r, g, b;\n\n  private Colors(float r, float g, float b) {\n    this.r = r;\n    this.g = g;\n    this.b = b;\n  }\n\n  public int calculate(float d) {\n    return 0xff << 24 | color(r, d) << 16 | color(g, d) << 8 | color(b, d);\n  }\n\n  private static int color(float a, float distance) {\n    int color = (int)(256 * a / distance - SUPPRESS);\n    return Math.max(0, Math.min(color, 255));\n  }\n}\n```\n\n\u5b9f\u884c\u3059\u308b\u3068\u3053\u3093\u306a\u611f\u3058\u3067\u8868\u793a\u3055\u308c\u308b\u3002\n\n![shot.png](https://qiita-image-store.s3.amazonaws.com/0/26489/6cc82572-da27-490a-58da-e32662b61078.png \"shot.png\")\n", "tags": ["processing"]}