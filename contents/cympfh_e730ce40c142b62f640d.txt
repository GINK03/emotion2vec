{"context": "\n\u3053\u308c\u306f chainer Advent Calendar 2016 \u3068\u306f\u95a2\u4fc2\u3042\u308a\u307e\u305b\u3093.\n\n\nFMs \u3068\u306f\u4f55\u304b\n\n\u5143\u8ad6\u6587\n\nSteffen Rendle: \"Factorization Machines\", 2010\nhttp://www.csie.ntu.edu.tw/~b97053/paper/Rendle2010FM.pdf\n\n\n\u624b\u6cd5\n\u5b9f\u88c5\u306b\u3042\u305f\u3063\u3066\u5fc5\u8981\u306a\u3053\u3068\u3060\u3051\u3055\u3089\u3063\u3068\u66f8\u304d\u307e\u3059. (\u5b9f\u306f\u3053\u3053\u3067\u7d39\u4ecb\u3059\u308b FMs \u306f 2-way FMs \u3068\u547c\u3070\u308c\u308b\u3082\u306e\u3067\u3001\u5143\u8ad6\u6587\u3067\u306f\u66f4\u306b\u3053\u308c\u3092\u4e00\u822c\u5316\u3057\u305f\u3082\u306e\u304c\u7d39\u4ecb\u3055\u308c\u3066\u3044\u307e\u3059\u304c\u7701\u304d\u307e\u3059.)\nFMs \u306f\u7dda\u5f62\u56de\u5e30\u3084\u7dda\u5f62\u5206\u985e\u5668\u306e\u62e1\u5f35\u3067\u3001\u30c7\u30fc\u30bf $x \\in \\mathbb{R}^n$ \u306b\u5bfe\u3057\u3066\n$$y = b + w \\cdot x + \\sum_{i,j~(i~<~j)} W_{ij} x_i x_j$$\n\u3068\u3044\u3046\u30e2\u30c7\u30eb\u3067 $y$ \u3092\u4e88\u6e2c\u3059\u308b\u3082\u306e\u3067\u3059.\n\u7b2c\u4e8c\u9805\u307e\u3067\u306f\u3044\u308f\u3086\u308b\u7dda\u5f62\u30e2\u30c7\u30eb\u305d\u306e\u3082\u306e\u3067\u3001$b$ \u304c\u30b9\u30ab\u30e9\u30fc\u3001 $w$ \u304c $x$ \u3068\u540c\u3058\u9577\u3055\u306e\u30d9\u30af\u30c8\u30eb\u3067\u3059. $\\cdot$ \u3067\u5185\u7a4d\u3092\u8868\u73fe\u3059\u308b\u3053\u3068\u306b\u3057\u307e\u3059.\n\u7b2c\u4e09\u9805\u304c FMs \u306e\u4e00\u3064\u7279\u5fb4\u7684\u306a\u3068\u3053\u308d\u3067\u3001\u30c7\u30fc\u30bf\u306e\u4e2d\u306e\u76f8\u4e92\u4f5c\u7528\u3092\u8868\u73fe\u3057\u3066\u3044\u307e\u3059. $x_i, x_j$ \u306f\u30d9\u30af\u30c8\u30eb $x$ \u306e\u7b2c $i,j$ \u6210\u5206 (\u30b9\u30ab\u30e9\u30fc) \u3067\u3001\u305d\u308c\u306b\u91cd\u307f $W_{ij}$ \u3092\u639b\u3051\u3066\u548c\u3092\u53d6\u308a\u307e\u3059. \u3053\u308c\u3092\u305d\u306e\u307e\u307e\u898b\u308b\u3068\u3001\u30d1\u30e9\u30e1\u30fc\u30bf\u306f $O(n^2)$ \u5fc5\u8981\u3060\u3057\u3001\u4e88\u6e2c\u306e\u8a08\u7b97\u306b\u3082 $O(n^2)$ \u3060\u3051\u6642\u9593\u304c\u639b\u304b\u308a\u305d\u3046\u3067\u3059.\n\u5143\u306e\u8ad6\u6587\u3067\u306f\u5148\u306e\u3088\u3046\u306a\u5f0f\u306f\u5b9f\u306f\u51fa\u3066\u3053\u305a\u3001\u4ee3\u308f\u308a\u306b\u6b21\u306e\u5f0f\u304c\u767b\u5834\u3057\u307e\u3059.\n$$y = b + w \\cdot x + \\sum_{i,j~(i~<~j)} (v_i \\cdot v_j) x_i x_j$$\n\u3053\u3053\u3067\u3001\u30d1\u30e9\u30e1\u30fc\u30bf $W_{ij}$ \u306e\u4ee3\u308f\u308a\u306b\u30012\u3064\u306e\u30d9\u30af\u30c8\u30eb $v_i, v_j$ \u306e\u5185\u7a4d\u306b\u3088\u3063\u3066\u8868\u73fe\u3057\u3066\u3044\u307e\u3059.\n\u3053\u3053\u3067\u30d9\u30af\u30c8\u30eb\u306e\u30b5\u30a4\u30ba\u306f\u9069\u5f53\u306a\u9577\u3055 $k$ \u306e\u30d9\u30af\u30c8\u30eb\u3060\u3068\u3057\u307e\u3059 ($v_i \\in \\mathbb{R}^k$).\n$k$ \u306f\u5b9f\u306e\u6240\u3001\u30e2\u30c7\u30eb\u306e\u8868\u73fe\u80fd\u529b\u306b\u76f8\u5f53\u3057\u3001\u5927\u304d\u304f\u306a\u308b\u307b\u3069\u8907\u96d1\u306a\u30e2\u30c7\u30eb\u304c\u8868\u73fe\u3067\u304d\u307e\u3059\u304c\u3001\u4ee3\u308f\u308a\u306b\u904e\u5b66\u7fd2\u3092\u8d77\u3053\u3057\u3084\u3059\u304f\u306a\u308a\u307e\u3059.\n$v_i$ \u3092\u7b2c $i$ \u5217\u30d9\u30af\u30c8\u30eb\u306b\u6301\u3064\u3088\u3046\u306a $k \\times n$ \u306e\u884c\u5217\u3092 $V$ \u3068\u66f8\u304f\u3053\u3068\u306b\u3059\u308b.\n\u30d1\u30e9\u30e1\u30fc\u30bf\u6570\u306f $O(nk)$ \u3067\u3059. \u305f\u3060\u3057\u4e0a\u306e\u5f0f\u3092\u8a08\u7b97\u3059\u308b\u6642\u9593\u306f\u307e\u3060 $O(n^2)$ \u3067\u3059.\n\u305d\u3053\u3067\u6b21\u306e\u3088\u3046\u306b\u3001\u5909\u5f62\u3057\u307e\u3059.\n$$y = b + w \\cdot x + \\frac{1}{2}\n\\sum_{j=1}^k\n\\left[\n\\left( \\sum_i V_{ij} x_i \\right)^2 - \\left( \\sum_i (V_{ij} x_i) ^2 \\right)\n\\right]$$\n\u3053\u308c\u3092\u76f4\u63a5\u8a08\u7b97\u3059\u308b\u3053\u3068\u306b\u3059\u308b\u3068\u3001\u8a08\u7b97\u6642\u9593\u306f $O(nk)$ \u306b\u306a\u308a\u307e\u3057\u305f.\n\nchainer \u306b\u3088\u308b\u5b9f\u88c5\n\u5148\u306e\u30e2\u30c7\u30eb\u3092\u7d50\u5c40\u3069\u3046\u3084\u3063\u3066\u5b66\u7fd2\u3059\u308b\u306e\u304b\u3068\u3044\u3046\u3068\u3001\u3088\u304f\u3042\u308bSGD\u3068\u304b\u3067\u3084\u308c\u3070\u3044\u3044\u3068\u3042\u3063\u305f\u306e\u3067\u3001\u6700\u9069\u5316\u30bd\u30eb\u30d0\u3092\u624b\u8efd\u306b\u4f7f\u3048\u308b\u3068\u601d\u3063\u3066 chainer \u3067\u5b9f\u88c5\u3059\u308b\u3053\u3068\u306b\u3057\u307e\u3057\u305f. \u30df\u30cb\u30d0\u30c3\u30c1\u306e\u3053\u3068\u3068\u304b\u3092\u8003\u3048\u308b\u3068\u3001\u3061\u3087\u3063\u3068\u9762\u5012\u304f\u3055\u304b\u3063\u305f.\n\u3042\u304f\u307e\u3067\u3082\u624b\u8efd\u306a\u5b9f\u88c5\u3092\u76ee\u7684\u3068\u3057\u3066\u308b\u306e\u3067\u3001\u7dda\u5f62\u30e2\u30c7\u30eb\u306e\u90e8\u5206\u306f\u3059\u3067\u306b\u3042\u308b\u3082\u306e\u3092\u4f7f\u3063\u3066\u3001\u3042\u3068\u306f $V$ \u306e\u90e8\u5206\u3092\u5f37\u5f15\u306b\u3064\u3051\u305f\u3057\u305f\u3060\u3051\u3067\u3059. for \u6587\u3068\u304b\u4f7f\u3063\u305f\u3089\u8ca0\u3051\u3068\u3044\u3046\u611f\u3058\u304c\u3059\u308b. \u8ca0\u3051\u305f.\nimport chainer\nfrom chainer import initializers\nimport chainer.functions as F\nimport chainer.links as L\nimport numpy\n\n\nclass FM(chainer.Chain):\n\n    def __init__(self, k, in_size):\n        super().__init__(lin=L.Linear(in_size, 1))\n        self.add_param('V', (k, in_size), initializer=initializers.Normal())\n        self.k = k\n        self.in_size = in_size\n\n    def __call__(self, x):\n        V = self['V']\n        bs = x.data.shape[0]\n\n        y = F.reshape(self.lin(x), (bs, ))\n\n        for i in range(self.k):\n            v = F.broadcast_to(V[i], (bs, self.in_size))\n            u = x * v\n            y += 0.5 * (F.sum(u, axis=1) ** 2 - F.sum(u ** 2, axis=1))\n\n        return y\n\n\n\u5b9f\u9a13\n$x$ \u306e\u5404\u6210\u5206 $x_i$ \u306e\u6b63\u8ca0\u306b\u95a2\u3059\u308b\u30d1\u30ea\u30c6\u30a3\u3092 $y$ \u3068\u3059\u308b (XOR). \u3053\u308c\u306f\u7dda\u5f62\u30e2\u30c7\u30eb\u3067\u306f\u5206\u96e2\u3067\u304d\u306a\u3044.\nFMs \u3067\u306f\u30012\u6210\u5206\u306e\u7a4d\u306e\u6b63\u8ca0\u3092\u8abf\u3079\u308b\u3053\u3068\u304c\u8a31\u3055\u308c\u3066\u3044\u308b\u306e\u3067\u3001\u30e2\u30c7\u30eb\u3068\u3057\u3066\u8868\u73fe\u3067\u304d\u3066\u3044\u3044.\n\u6b21\u306b\u793a\u3059\u5b9f\u9a13\u30b3\u30fc\u30c9\u306f\u304b\u306a\u308a\u554f\u984c\u3092\u7c21\u5358\u5316\u3057\u3066\u3044\u3066 $x \\in \\mathbb{R}^2$, $x_0~x_1 > 0$ \u306a\u3089\u3070 $y=1$ \u3055\u3082\u306a\u304f\u3070 $y=0$, $k=1$.\ndef make_xor(bs=30, n=2):\n    import random\n    x_data = []\n    y_data = []\n    for _ in range(bs):\n        x = [random.random() * 2 - 1 for __ in range(n)]\n        y = 1\n        for i in range(n):\n            if x[i] < 0:\n                y = 1 - y  # negate\n\n        x_data.append(x)\n        y_data.append(y)\n\n    x_arr = numpy.array(x_data).astype('f')\n    y_arr = numpy.array(y_data).astype('f')\n    return x_arr, y_arr\n\n\nif __name__ == '__main__':\n    import sys\n    import numpy\n    k = 1\n    n = 2\n    bs = 10\n\n    fm = FM(k, n)\n    opt = chainer.optimizers.SGD(lr=0.5)  # \u30c7\u30d5\u30a9\u30eb\u30c8\u306e lr \u3060\u3068\u304b\u306a\u308a\u9045\u3044\n    opt.setup(fm)\n\n    x, y = make_xor(bs, n)\n    print('x', x)\n    print('y', y)\n\n    loss = None\n    while loss is None or loss.data > 0.01:\n        predicted = F.sigmoid(fm(x))\n        loss = F.mean_squared_error(y, predicted)\n\n        sys.stdout.write(\"\\r loss={} \".format(loss.data))\n        sys.stdout.flush()\n\n        opt.target.zerograds()\n        loss.backward()\n        opt.update()\n\n    print()\n    print('y', y)\n    print('predicted', predicted.data)\n    print('V', fm.V.data)\n\n\n\u7d50\u679c\ny [ 0.  1.  0.  0.  0.  1.  1.  1.  1.  1.]\npredicted [ 0.19491634  0.84463191  0.00433615  0.05741775  0.01406023  0.83505988\n  0.98442441  0.99996483  0.95896196  0.93057561]\nV [[ 0.23343541 -0.22570352  0.71909285  0.30979463 -1.48376262  1.71114433]\n [ 0.27506906  0.0629499   2.07254863 -1.34820259 -0.61244988  2.29028845]]\npython test.py  1.25s user 0.04s system 98% cpu 1.313 total\n\n\u3088\u3055\u3052.\n\n\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\n\u3053\u3053\u306b2\u3064\u306b\u5206\u3051\u3066\u8cbc\u3063\u3064\u3051\u305f\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u305d\u306e\u3082\u306e\u304c https://gist.github.com/cympfh/70a8d8eaadfed8ffb431a2828e24e188 \u3067\u3059.\n\n\u88dc\u8db3\n\u4e0a\u306e\u5b9f\u88c5\u306fFM\uff53\u3092\u5fe0\u5b9f\u306b\u518d\u73fe\u3059\u308b\u305f\u3081\u306e\u3082\u306e\u3067\u3059. \u3059\u306a\u308f\u3061\u3001\u7dda\u5f62\u30e2\u30c7\u30eb\u90e8\u5206\u306b\u3001\ny += 0.5 * (F.sum(u, axis=1) ** 2 - F.sum(u ** 2, axis=1))\n\n\u3068\u3044\u3046\u8db3\u3057\u7b97\u3092\u3057\u3066\u3044\u307e\u3059\u304c\u3001\u660e\u3089\u304b\u306a\u3053\u3068\u3068\u3057\u3066\u3001\u4fc2\u6570\u306f\u30b9\u30b1\u30fc\u30eb\u3059\u308b\u306e\u3067\ny += F.sum(u, axis=1) ** 2 - F.sum(u ** 2, axis=1)\n\n\u3068\u3057\u3066\u3044\u3044\u306e\u306f\u5206\u304b\u308b\u3068\u601d\u3044\u307e\u3059.\n\u3082\u3063\u3068\u8a00\u3046\u3068\u3001\u3053\u306e\u5f15\u304d\u7b97\u306e\u90e8\u5206\u306f $W_{ii} (v_i x_i)^2$ \u306b\u76f8\u5f53\u3057\u307e\u3059. FMs \u3067\u306f\u305d\u306e\u3088\u3046\u306a\u9805\u306f\u8003\u3048\u306a\u3044\u3001\u3064\u307e\u308a $W_{ii}=0$ \u3068\u3057\u3066\u3044\u308b\u306e\u3067\u3059\u304c\u3001\u5225\u306b\u8003\u3048\u3066\u3082\u3044\u3044\u3067\u3059. \u3082\u3057\u304b\u3057\u305f\u3089\u305d\u306e\u3088\u3046\u306a\u76f8\u4e92\u4f5c\u7528\u304c\u5b9f\u969b\u306b\u3042\u308b\u304b\u3082\u3057\u308c\u307e\u305b\u3093. \u5f93\u3063\u3066\u3001\ny += F.sum(u, axis=1) ** 2\n\n\u3067\u3082\u554f\u984c\u306a\u3055\u305d\u3046\u3067\u3059.\n\u305f\u3060\u3053\u3053\u307e\u3067\u6765\u308b\u3068\u3001\u6700\u65e9\u3001\u7dda\u5f62\u56de\u5e30\u306b\u7dda\u5f62\u56de\u5e30\u306e\u81ea\u4e57\u3092 $k$ \u500b\u52a0\u3048\u305f\u3082\u306e\u3001\u306b\u3057\u304b\u898b\u3048\u306a\u304f\u306a\u3063\u3066\u304d\u307e\u3057\u305f. \u3064\u307e\u308a\u3001\u6b21\u306e\u3088\u3046\u306b\u3001\u3001\u3001\nclass FM(chainer.Chain):\n\n    def __init__(self, k, in_size):\n        super().__init__(lin=L.Linear(in_size, 1))  # \u3053\u308c\u306f\u305f\u3060\u306e\u7dda\u5f62\n        self.k = k\n        self.in_size = in_size\n        for i in range(self.k):\n            self.add_link(\"v{}\".format(i), L.Linear(in_size, 1))  # \u5225\u306e k \u500b\u306e\u7dda\u5f62\n\n    def __call__(self, x):\n        bs = x.data.shape[0]\n\n        y = F.reshape(self.lin(x), (bs, ))  # \u305f\u3060\u306e\u7dda\u5f62\n\n        for i in range(self.k):\n            y += F.reshape(self[\"v{}\".format(i)](x), (bs, )) ** 2  # \u3053\u3063\u3061\u306f\u6700\u5f8c\u306b\u81ea\u4e57\u3059\u308b\n\n\u5358\u306b\u8868\u73fe\u80fd\u529b\u3068\u3044\u3046\u610f\u5473\u3067\u306f\u3053\u308c\u306f FMs \u3068\u540c\u7b49.\n\u305f\u3060\u3001FMs \u3067\u306f\u30d1\u30e9\u30e1\u30fc\u30bf\u884c\u5217 $V$ \u306e\u7b2c $i$ \u5217\u30d9\u30af\u30c8\u30eb\u304c\u7b2c $i$ \u6210\u5206\u306b\u5bfe\u5fdc\u3059\u308b\u56e0\u5b50\u30d9\u30af\u30c8\u30eb\u3068\u547c\u3070\u308c\u307e\u3059\u304c\u3001\u7b2c $i$ \u6210\u5206\u306e\u4f55\u304b\u3057\u3089\u3092\u8868\u73fe\u3059\u308b\u3068\u8003\u3048\u308b\u3053\u3068\u304c\u51fa\u6765\u307e\u3059. \u4f8b\u3048\u3070 $i$ \u6210\u5206\u3068 $i+1$ \u6210\u5206\u306e\u8fd1\u3055\u3092\u56e0\u5b50\u30d9\u30af\u30c8\u30eb\u306e\u6bd4\u8f03\u3067\u5b9a\u91cf\u7684\u306b\u51fa\u6765\u305d\u3046\u3067\u3059. \u884c\u5217\u5206\u89e3\u306e\u8003\u3048\u65b9\u306b\u8fd1\u3044\u3067\u3059. \u305d\u3046\u3044\u3063\u305f\u89e3\u6790\u306b\u5f79\u7acb\u3064\u30d1\u30e9\u30e1\u30fc\u30bf $V$ \u304c\u4ed6\u306b\u5165\u308b\u3068\u3044\u3046\u610f\u5473\u3067\u3001FM\uff53\u306f\u6709\u7528\u305d\u3046\u3067\u3059.\n\u305d\u3046\u8a00\u3048\u3070 chainer \u306e Linear \u306b\u306f nobias \u30aa\u30d7\u30b7\u30e7\u30f3\u304c\u3042\u308a\u3001\u30d0\u30a4\u30a2\u30b9\u9805\u304c\u30bc\u30ed\u306a\u7dda\u5f62\u56de\u5e30\u3092\u4f5c\u308c\u307e\u3059.\n        for i in range(self.k):\n            self.add_link(\"v{}\".format(i), L.Linear(in_size, 1, nobias=True))\n\n\u3068\u3059\u308c\u3070\u3001\u672c\u5f53\u306bFM\uff53\u3068\u540c\u7b49\u3060\u3057\u3001\u305d\u308c\u305e\u308c\u306e\u30d1\u30e9\u30e1\u30fc\u30bf $W$ \u3092\u3064\u306a\u3052\u3066\u8aad\u3081\u3070FM\uff53 \u306e\u30d1\u30e9\u30e1\u30fc\u30bf $V$ \u3082\u624b\u306b\u5165\u308b. \u3042\u3001\u3053\u3063\u3061\u306e\u304c\u5b9f\u88c5\u697d\u3060\u306a.\n> \u3053\u308c\u306f chainer Advent Calendar 2016 \u3068\u306f\u95a2\u4fc2\u3042\u308a\u307e\u305b\u3093.\n\n# FMs \u3068\u306f\u4f55\u304b\n\n## \u5143\u8ad6\u6587\n\n- Steffen Rendle: \"Factorization Machines\", 2010\n- http://www.csie.ntu.edu.tw/~b97053/paper/Rendle2010FM.pdf\n\n## \u624b\u6cd5\n\n\u5b9f\u88c5\u306b\u3042\u305f\u3063\u3066\u5fc5\u8981\u306a\u3053\u3068\u3060\u3051\u3055\u3089\u3063\u3068\u66f8\u304d\u307e\u3059. (\u5b9f\u306f\u3053\u3053\u3067\u7d39\u4ecb\u3059\u308b FMs \u306f 2-way FMs \u3068\u547c\u3070\u308c\u308b\u3082\u306e\u3067\u3001\u5143\u8ad6\u6587\u3067\u306f\u66f4\u306b\u3053\u308c\u3092\u4e00\u822c\u5316\u3057\u305f\u3082\u306e\u304c\u7d39\u4ecb\u3055\u308c\u3066\u3044\u307e\u3059\u304c\u7701\u304d\u307e\u3059.)\nFMs \u306f\u7dda\u5f62\u56de\u5e30\u3084\u7dda\u5f62\u5206\u985e\u5668\u306e\u62e1\u5f35\u3067\u3001\u30c7\u30fc\u30bf $x \\in \\mathbb{R}^n$ \u306b\u5bfe\u3057\u3066\n\n$$y = b + w \\cdot x + \\sum_{i,j~(i~<~j)} W_{ij} x_i x_j$$\n\n\u3068\u3044\u3046\u30e2\u30c7\u30eb\u3067 $y$ \u3092\u4e88\u6e2c\u3059\u308b\u3082\u306e\u3067\u3059.\n\u7b2c\u4e8c\u9805\u307e\u3067\u306f\u3044\u308f\u3086\u308b\u7dda\u5f62\u30e2\u30c7\u30eb\u305d\u306e\u3082\u306e\u3067\u3001$b$ \u304c\u30b9\u30ab\u30e9\u30fc\u3001 $w$ \u304c $x$ \u3068\u540c\u3058\u9577\u3055\u306e\u30d9\u30af\u30c8\u30eb\u3067\u3059. $\\cdot$ \u3067\u5185\u7a4d\u3092\u8868\u73fe\u3059\u308b\u3053\u3068\u306b\u3057\u307e\u3059.\n\u7b2c\u4e09\u9805\u304c FMs \u306e\u4e00\u3064\u7279\u5fb4\u7684\u306a\u3068\u3053\u308d\u3067\u3001\u30c7\u30fc\u30bf\u306e\u4e2d\u306e\u76f8\u4e92\u4f5c\u7528\u3092\u8868\u73fe\u3057\u3066\u3044\u307e\u3059. $x_i, x_j$ \u306f\u30d9\u30af\u30c8\u30eb $x$ \u306e\u7b2c $i,j$ \u6210\u5206 (\u30b9\u30ab\u30e9\u30fc) \u3067\u3001\u305d\u308c\u306b\u91cd\u307f $W_{ij}$ \u3092\u639b\u3051\u3066\u548c\u3092\u53d6\u308a\u307e\u3059. \u3053\u308c\u3092\u305d\u306e\u307e\u307e\u898b\u308b\u3068\u3001\u30d1\u30e9\u30e1\u30fc\u30bf\u306f $O(n^2)$ \u5fc5\u8981\u3060\u3057\u3001\u4e88\u6e2c\u306e\u8a08\u7b97\u306b\u3082 $O(n^2)$ \u3060\u3051\u6642\u9593\u304c\u639b\u304b\u308a\u305d\u3046\u3067\u3059.\n\n\u5143\u306e\u8ad6\u6587\u3067\u306f\u5148\u306e\u3088\u3046\u306a\u5f0f\u306f\u5b9f\u306f\u51fa\u3066\u3053\u305a\u3001\u4ee3\u308f\u308a\u306b\u6b21\u306e\u5f0f\u304c\u767b\u5834\u3057\u307e\u3059.\n\n$$y = b + w \\cdot x + \\sum_{i,j~(i~<~j)} (v_i \\cdot v_j) x_i x_j$$\n\n\u3053\u3053\u3067\u3001\u30d1\u30e9\u30e1\u30fc\u30bf $W_{ij}$ \u306e\u4ee3\u308f\u308a\u306b\u30012\u3064\u306e\u30d9\u30af\u30c8\u30eb $v_i, v_j$ \u306e\u5185\u7a4d\u306b\u3088\u3063\u3066\u8868\u73fe\u3057\u3066\u3044\u307e\u3059.\n\u3053\u3053\u3067\u30d9\u30af\u30c8\u30eb\u306e\u30b5\u30a4\u30ba\u306f\u9069\u5f53\u306a\u9577\u3055 $k$ \u306e\u30d9\u30af\u30c8\u30eb\u3060\u3068\u3057\u307e\u3059 ($v_i \\in \\mathbb{R}^k$).\n$k$ \u306f\u5b9f\u306e\u6240\u3001\u30e2\u30c7\u30eb\u306e\u8868\u73fe\u80fd\u529b\u306b\u76f8\u5f53\u3057\u3001\u5927\u304d\u304f\u306a\u308b\u307b\u3069\u8907\u96d1\u306a\u30e2\u30c7\u30eb\u304c\u8868\u73fe\u3067\u304d\u307e\u3059\u304c\u3001\u4ee3\u308f\u308a\u306b\u904e\u5b66\u7fd2\u3092\u8d77\u3053\u3057\u3084\u3059\u304f\u306a\u308a\u307e\u3059.\n\n$v_i$ \u3092\u7b2c $i$ \u5217\u30d9\u30af\u30c8\u30eb\u306b\u6301\u3064\u3088\u3046\u306a $k \\times n$ \u306e\u884c\u5217\u3092 $V$ \u3068\u66f8\u304f\u3053\u3068\u306b\u3059\u308b.\n\u30d1\u30e9\u30e1\u30fc\u30bf\u6570\u306f $O(nk)$ \u3067\u3059. \u305f\u3060\u3057\u4e0a\u306e\u5f0f\u3092\u8a08\u7b97\u3059\u308b\u6642\u9593\u306f\u307e\u3060 $O(n^2)$ \u3067\u3059.\n\u305d\u3053\u3067\u6b21\u306e\u3088\u3046\u306b\u3001\u5909\u5f62\u3057\u307e\u3059.\n\n$$y = b + w \\cdot x + \\frac{1}{2}\n\\sum_{j=1}^k\n\\left[\n\\left( \\sum_i V_{ij} x_i \\right)^2 - \\left( \\sum_i (V_{ij} x_i) ^2 \\right)\n\\right]$$\n\n\u3053\u308c\u3092\u76f4\u63a5\u8a08\u7b97\u3059\u308b\u3053\u3068\u306b\u3059\u308b\u3068\u3001\u8a08\u7b97\u6642\u9593\u306f $O(nk)$ \u306b\u306a\u308a\u307e\u3057\u305f.\n\n# chainer \u306b\u3088\u308b\u5b9f\u88c5\n\n\u5148\u306e\u30e2\u30c7\u30eb\u3092\u7d50\u5c40\u3069\u3046\u3084\u3063\u3066\u5b66\u7fd2\u3059\u308b\u306e\u304b\u3068\u3044\u3046\u3068\u3001\u3088\u304f\u3042\u308bSGD\u3068\u304b\u3067\u3084\u308c\u3070\u3044\u3044\u3068\u3042\u3063\u305f\u306e\u3067\u3001\u6700\u9069\u5316\u30bd\u30eb\u30d0\u3092\u624b\u8efd\u306b\u4f7f\u3048\u308b\u3068\u601d\u3063\u3066 chainer \u3067\u5b9f\u88c5\u3059\u308b\u3053\u3068\u306b\u3057\u307e\u3057\u305f. \u30df\u30cb\u30d0\u30c3\u30c1\u306e\u3053\u3068\u3068\u304b\u3092\u8003\u3048\u308b\u3068\u3001\u3061\u3087\u3063\u3068\u9762\u5012\u304f\u3055\u304b\u3063\u305f.\n\n\u3042\u304f\u307e\u3067\u3082\u624b\u8efd\u306a\u5b9f\u88c5\u3092\u76ee\u7684\u3068\u3057\u3066\u308b\u306e\u3067\u3001\u7dda\u5f62\u30e2\u30c7\u30eb\u306e\u90e8\u5206\u306f\u3059\u3067\u306b\u3042\u308b\u3082\u306e\u3092\u4f7f\u3063\u3066\u3001\u3042\u3068\u306f $V$ \u306e\u90e8\u5206\u3092\u5f37\u5f15\u306b\u3064\u3051\u305f\u3057\u305f\u3060\u3051\u3067\u3059. `for` \u6587\u3068\u304b\u4f7f\u3063\u305f\u3089\u8ca0\u3051\u3068\u3044\u3046\u611f\u3058\u304c\u3059\u308b. \u8ca0\u3051\u305f.\n\n```python\nimport chainer\nfrom chainer import initializers\nimport chainer.functions as F\nimport chainer.links as L\nimport numpy\n\n\nclass FM(chainer.Chain):\n\n    def __init__(self, k, in_size):\n        super().__init__(lin=L.Linear(in_size, 1))\n        self.add_param('V', (k, in_size), initializer=initializers.Normal())\n        self.k = k\n        self.in_size = in_size\n\n    def __call__(self, x):\n        V = self['V']\n        bs = x.data.shape[0]\n\n        y = F.reshape(self.lin(x), (bs, ))\n\n        for i in range(self.k):\n            v = F.broadcast_to(V[i], (bs, self.in_size))\n            u = x * v\n            y += 0.5 * (F.sum(u, axis=1) ** 2 - F.sum(u ** 2, axis=1))\n\n        return y\n```\n\n## \u5b9f\u9a13\n\n$x$ \u306e\u5404\u6210\u5206 $x_i$ \u306e\u6b63\u8ca0\u306b\u95a2\u3059\u308b\u30d1\u30ea\u30c6\u30a3\u3092 $y$ \u3068\u3059\u308b (XOR). \u3053\u308c\u306f\u7dda\u5f62\u30e2\u30c7\u30eb\u3067\u306f\u5206\u96e2\u3067\u304d\u306a\u3044.\nFMs \u3067\u306f\u30012\u6210\u5206\u306e\u7a4d\u306e\u6b63\u8ca0\u3092\u8abf\u3079\u308b\u3053\u3068\u304c\u8a31\u3055\u308c\u3066\u3044\u308b\u306e\u3067\u3001\u30e2\u30c7\u30eb\u3068\u3057\u3066\u8868\u73fe\u3067\u304d\u3066\u3044\u3044.\n\n\u6b21\u306b\u793a\u3059\u5b9f\u9a13\u30b3\u30fc\u30c9\u306f\u304b\u306a\u308a\u554f\u984c\u3092\u7c21\u5358\u5316\u3057\u3066\u3044\u3066 $x \\in \\mathbb{R}^2$, $x_0~x_1 > 0$ \u306a\u3089\u3070 $y=1$ \u3055\u3082\u306a\u304f\u3070 $y=0$, $k=1$.\n\n```python\ndef make_xor(bs=30, n=2):\n    import random\n    x_data = []\n    y_data = []\n    for _ in range(bs):\n        x = [random.random() * 2 - 1 for __ in range(n)]\n        y = 1\n        for i in range(n):\n            if x[i] < 0:\n                y = 1 - y  # negate\n\n        x_data.append(x)\n        y_data.append(y)\n\n    x_arr = numpy.array(x_data).astype('f')\n    y_arr = numpy.array(y_data).astype('f')\n    return x_arr, y_arr\n\n\nif __name__ == '__main__':\n    import sys\n    import numpy\n    k = 1\n    n = 2\n    bs = 10\n\n    fm = FM(k, n)\n    opt = chainer.optimizers.SGD(lr=0.5)  # \u30c7\u30d5\u30a9\u30eb\u30c8\u306e lr \u3060\u3068\u304b\u306a\u308a\u9045\u3044\n    opt.setup(fm)\n\n    x, y = make_xor(bs, n)\n    print('x', x)\n    print('y', y)\n\n    loss = None\n    while loss is None or loss.data > 0.01:\n        predicted = F.sigmoid(fm(x))\n        loss = F.mean_squared_error(y, predicted)\n\n        sys.stdout.write(\"\\r loss={} \".format(loss.data))\n        sys.stdout.flush()\n\n        opt.target.zerograds()\n        loss.backward()\n        opt.update()\n\n    print()\n    print('y', y)\n    print('predicted', predicted.data)\n    print('V', fm.V.data)\n```\n\n### \u7d50\u679c\n\n```python\ny [ 0.  1.  0.  0.  0.  1.  1.  1.  1.  1.]\npredicted [ 0.19491634  0.84463191  0.00433615  0.05741775  0.01406023  0.83505988\n  0.98442441  0.99996483  0.95896196  0.93057561]\nV [[ 0.23343541 -0.22570352  0.71909285  0.30979463 -1.48376262  1.71114433]\n [ 0.27506906  0.0629499   2.07254863 -1.34820259 -0.61244988  2.29028845]]\npython test.py  1.25s user 0.04s system 98% cpu 1.313 total\n```\n\n\u3088\u3055\u3052.\n\n### \u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\n\n\u3053\u3053\u306b2\u3064\u306b\u5206\u3051\u3066\u8cbc\u3063\u3064\u3051\u305f\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u305d\u306e\u3082\u306e\u304c https://gist.github.com/cympfh/70a8d8eaadfed8ffb431a2828e24e188 \u3067\u3059.\n\n## \u88dc\u8db3\n\n\u4e0a\u306e\u5b9f\u88c5\u306fFM\uff53\u3092\u5fe0\u5b9f\u306b\u518d\u73fe\u3059\u308b\u305f\u3081\u306e\u3082\u306e\u3067\u3059. \u3059\u306a\u308f\u3061\u3001\u7dda\u5f62\u30e2\u30c7\u30eb\u90e8\u5206\u306b\u3001\n\n```python\ny += 0.5 * (F.sum(u, axis=1) ** 2 - F.sum(u ** 2, axis=1))\n```\n\n\u3068\u3044\u3046\u8db3\u3057\u7b97\u3092\u3057\u3066\u3044\u307e\u3059\u304c\u3001\u660e\u3089\u304b\u306a\u3053\u3068\u3068\u3057\u3066\u3001\u4fc2\u6570\u306f\u30b9\u30b1\u30fc\u30eb\u3059\u308b\u306e\u3067\n\n```python\ny += F.sum(u, axis=1) ** 2 - F.sum(u ** 2, axis=1)\n```\n\n\u3068\u3057\u3066\u3044\u3044\u306e\u306f\u5206\u304b\u308b\u3068\u601d\u3044\u307e\u3059.\n\u3082\u3063\u3068\u8a00\u3046\u3068\u3001\u3053\u306e\u5f15\u304d\u7b97\u306e\u90e8\u5206\u306f $W_{ii} (v_i x_i)^2$ \u306b\u76f8\u5f53\u3057\u307e\u3059. FMs \u3067\u306f\u305d\u306e\u3088\u3046\u306a\u9805\u306f\u8003\u3048\u306a\u3044\u3001\u3064\u307e\u308a $W_{ii}=0$ \u3068\u3057\u3066\u3044\u308b\u306e\u3067\u3059\u304c\u3001\u5225\u306b\u8003\u3048\u3066\u3082\u3044\u3044\u3067\u3059. \u3082\u3057\u304b\u3057\u305f\u3089\u305d\u306e\u3088\u3046\u306a\u76f8\u4e92\u4f5c\u7528\u304c\u5b9f\u969b\u306b\u3042\u308b\u304b\u3082\u3057\u308c\u307e\u305b\u3093. \u5f93\u3063\u3066\u3001\n\n```python\ny += F.sum(u, axis=1) ** 2\n```\n\n\u3067\u3082\u554f\u984c\u306a\u3055\u305d\u3046\u3067\u3059.\n\u305f\u3060\u3053\u3053\u307e\u3067\u6765\u308b\u3068\u3001\u6700\u65e9\u3001\u7dda\u5f62\u56de\u5e30\u306b\u7dda\u5f62\u56de\u5e30\u306e\u81ea\u4e57\u3092 $k$ \u500b\u52a0\u3048\u305f\u3082\u306e\u3001\u306b\u3057\u304b\u898b\u3048\u306a\u304f\u306a\u3063\u3066\u304d\u307e\u3057\u305f. \u3064\u307e\u308a\u3001\u6b21\u306e\u3088\u3046\u306b\u3001\u3001\u3001\n\n```python\nclass FM(chainer.Chain):\n\n    def __init__(self, k, in_size):\n        super().__init__(lin=L.Linear(in_size, 1))  # \u3053\u308c\u306f\u305f\u3060\u306e\u7dda\u5f62\n        self.k = k\n        self.in_size = in_size\n        for i in range(self.k):\n            self.add_link(\"v{}\".format(i), L.Linear(in_size, 1))  # \u5225\u306e k \u500b\u306e\u7dda\u5f62\n\n    def __call__(self, x):\n        bs = x.data.shape[0]\n\n        y = F.reshape(self.lin(x), (bs, ))  # \u305f\u3060\u306e\u7dda\u5f62\n\n        for i in range(self.k):\n            y += F.reshape(self[\"v{}\".format(i)](x), (bs, )) ** 2  # \u3053\u3063\u3061\u306f\u6700\u5f8c\u306b\u81ea\u4e57\u3059\u308b\n```\n\n\u5358\u306b\u8868\u73fe\u80fd\u529b\u3068\u3044\u3046\u610f\u5473\u3067\u306f\u3053\u308c\u306f FMs \u3068\u540c\u7b49.\n\n\u305f\u3060\u3001FMs \u3067\u306f\u30d1\u30e9\u30e1\u30fc\u30bf\u884c\u5217 $V$ \u306e\u7b2c $i$ \u5217\u30d9\u30af\u30c8\u30eb\u304c\u7b2c $i$ \u6210\u5206\u306b\u5bfe\u5fdc\u3059\u308b\u56e0\u5b50\u30d9\u30af\u30c8\u30eb\u3068\u547c\u3070\u308c\u307e\u3059\u304c\u3001\u7b2c $i$ \u6210\u5206\u306e\u4f55\u304b\u3057\u3089\u3092\u8868\u73fe\u3059\u308b\u3068\u8003\u3048\u308b\u3053\u3068\u304c\u51fa\u6765\u307e\u3059. \u4f8b\u3048\u3070 $i$ \u6210\u5206\u3068 $i+1$ \u6210\u5206\u306e\u8fd1\u3055\u3092\u56e0\u5b50\u30d9\u30af\u30c8\u30eb\u306e\u6bd4\u8f03\u3067\u5b9a\u91cf\u7684\u306b\u51fa\u6765\u305d\u3046\u3067\u3059. \u884c\u5217\u5206\u89e3\u306e\u8003\u3048\u65b9\u306b\u8fd1\u3044\u3067\u3059. \u305d\u3046\u3044\u3063\u305f\u89e3\u6790\u306b\u5f79\u7acb\u3064\u30d1\u30e9\u30e1\u30fc\u30bf $V$ \u304c\u4ed6\u306b\u5165\u308b\u3068\u3044\u3046\u610f\u5473\u3067\u3001FM\uff53\u306f\u6709\u7528\u305d\u3046\u3067\u3059.\n\n\u305d\u3046\u8a00\u3048\u3070 chainer \u306e Linear \u306b\u306f nobias \u30aa\u30d7\u30b7\u30e7\u30f3\u304c\u3042\u308a\u3001\u30d0\u30a4\u30a2\u30b9\u9805\u304c\u30bc\u30ed\u306a\u7dda\u5f62\u56de\u5e30\u3092\u4f5c\u308c\u307e\u3059.\n\n```python\n        for i in range(self.k):\n            self.add_link(\"v{}\".format(i), L.Linear(in_size, 1, nobias=True))\n```\n\n\u3068\u3059\u308c\u3070\u3001\u672c\u5f53\u306bFM\uff53\u3068\u540c\u7b49\u3060\u3057\u3001\u305d\u308c\u305e\u308c\u306e\u30d1\u30e9\u30e1\u30fc\u30bf $W$ \u3092\u3064\u306a\u3052\u3066\u8aad\u3081\u3070FM\uff53 \u306e\u30d1\u30e9\u30e1\u30fc\u30bf $V$ \u3082\u624b\u306b\u5165\u308b. \u3042\u3001\u3053\u3063\u3061\u306e\u304c\u5b9f\u88c5\u697d\u3060\u306a.\n", "tags": ["Chainer", "\u6a5f\u68b0\u5b66\u7fd2"]}