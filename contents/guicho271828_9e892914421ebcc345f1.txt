{"context": " More than 1 year has passed since last update.http://qiita.com/guicho271828/items/a095b106deec61477597 \u306e\u7d9a\u304d\u3002\n\u30a2\u30f3\u30ed\u30fc\u30ea\u30f3\u30b0\u3057\u3066\u3082\u3053\u3053\u304c\u9045\u3044\u3002\n; 780: L2:   498B5011         MOV RDX, [R8+17]\n; 784:       F30F10545A01     MOVSS XMM2, [RDX+RBX*2+1]\n; 78A:       F30F59D1         MULSS XMM2, XMM1\n; 78E:       488B5011         MOV RDX, [RAX+17]\n; 792:       F30F105C4A01     MOVSS XMM3, [RDX+RCX*2+1]\n; 798:       F30F58DA         ADDSS XMM3, XMM2\n; 79C:       488B5011         MOV RDX, [RAX+17]\n; 7A0:       F30F115C4A01     MOVSS [RDX+RCX*2+1], XMM3\n; 7A6:       488D5102         LEA RDX, [RCX+2]            <<<<\n; 7AA:       4C8D5302         LEA R10, [RBX+2]            <<<<\n; 7AE:       4D8B6811         MOV R13, [R8+17]\n; 7B2:       F3430F10545501   MOVSS XMM2, [R13+R10*2+1]   <<<<\n; 7B9:       F30F59D1         MULSS XMM2, XMM1\n; 7BD:       4C8B5011         MOV R10, [RAX+17]\n; 7C1:       F3410F105C5201   MOVSS XMM3, [R10+RDX*2+1]   <<<<\n; 7C8:       F30F58DA         ADDSS XMM3, XMM2\n; 7CC:       4C8B5011         MOV R10, [RAX+17]\n; 7D0:       F3410F115C5201   MOVSS [R10+RDX*2+1], XMM3\n; 7D7:       4883C704         ADD RDI, 4\n; 7DB:       4883C104         ADD RCX, 4\n; 7DF:       4883C304         ADD RBX, 4\n\n(row-major-aref array (+ i 2)) \u306e\u6642\u306b\u3001 \u5b9a\u65702 \u304c\u30aa\u30d5\u30bb\u30c3\u30c8\u3068\u3057\u3066\u30a2\u30bb\u30f3\u30d6\u30e9\u306b\u7573\u307f\u8fbc\u307e\u308c\u3066\u304a\u3089\u305a\u3001 LEA\u3067\u660e\u306b\u8a08\u7b97\u3055\u308c\u3066\u3057\u307e\u3063\u3066\u3044\u308b(7A6)\u3002\n7B2\u306f\u672c\u5f53\u306f\u3053\u3046\u306a\u3063\u3066\u307b\u3057\u3044:\n; 7B2:       F3430F10545501   MOVSS XMM2, [R13+R10*2+5]\n\n\u305d\u3053\u3067\u3001SBCL\u306e\u5185\u90e8\u306b\u30c0\u30a4\u30d6\u3057\u3066\u30a2\u30bb\u30f3\u30d6\u30e9\u3092\u30c1\u30e5\u30fc\u30cb\u30f3\u30b0\u3059\u308b\u3053\u3068\u306b\u3002SBCL\u306f\u597d\u307f\u306e\u95a2\u6570\u304c\u7279\u5b9a\u306e\u578b\u306b\u5f53\u3066\u306f\u307e\u308b\u6642\u3001\u624b\u3067\u66f8\u3044\u305f\u6700\u901f\u30a2\u30bb\u30f3\u30d6\u30e9\u306b\u5909\u63db\u3059\u308b\u6a5f\u80fd\u304c\u4ed8\u3044\u3066\u3044\u308b\u3002\u3053\u308c\u306f\u4f7f\u3046\u5074\u306e\u30b3\u30fc\u30c9\u5074\u3067\u6307\u5b9a\u3059\u308b\u306e\u3067\u306f\u306a\u304f\u3066\n;;;; \u5b9f\u969b\u3067\u306f\u306a\u3044\u4f8b : \u4f7f\u3044\u306b\u304f\u3044\n(...\n ;; \u666e\u901a\u30d0\u30fc\u30b8\u30e7\u30f3\u3092\n ;(my-function 0.1 0.2)\n ;; \u30a2\u30bb\u30f3\u30d6\u30ea\u30d0\u30fc\u30b8\u30e7\u30f3\u306b\u3044\u3061\u3044\u3061\u624b\u3067\u7f6e\u304d\u63db\u3048\u308b\n (my-function-in-super-fast-assembly/single-float/single-float 0.1 0.2)\n ...)\n\n\u578b\u304c\u30de\u30c3\u30c1\u3057\u305f\u6642\u306b\u306f\u81ea\u52d5\u3067\u7f6e\u304d\u63db\u308f\u308b\u3002\u30de\u30c3\u30c1\u3057\u306a\u3044\u6642\u306f\u5143\u306e\u5b9a\u7fa9\u304c\u4f7f\u308f\u308c\u308b\u3002\n(define-VOP (my-function-in-super-fast-assembly/single-float/single-float)\n  (:translate my-function)\n  (arg-types single-float single-float)\n  ...)\n\n(...\n (my-function 0.1 0.2) ; \u30b3\u30f3\u30d1\u30a4\u30e9\u304c\u81ea\u52d5\u3067VOP\u306e\u307b\u3046\u3092\u4f7f\u3046\n ...)\n\n\u3055\u3066\u3001\u5225\u306b\u81ea\u5206\u3067\u30a2\u30bb\u30f3\u30d6\u30ea\u3092\u66f8\u304d\u305f\u304f\u306f\u306a\u3044\u306e\u3067\u3001SBCL\u306b\u3059\u3067\u306b\u3042\u308b\u5185\u90e8\u95a2\u6570\u3092\u4f7f\u3044\u305f\u3044\u3002\u3069\u3046\u3084\u3089\u305d\u308c\u304c sb-kernel:data-vector-ref-with-offset \u3060\u3002\n(define-vop (data-vector-ref-with-offset/simple-array-single-float-c)\n  (:note \"inline array access\")\n  (:translate data-vector-ref-with-offset)\n  (:policy :fast-safe)\n  (:args (object :scs (descriptor-reg)))\n  (:info index offset)\n  (:arg-types simple-array-single-float (:constant low-index)\n              (:constant (constant-displacement other-pointer-lowtag\n                                                4 vector-data-offset)))\n  (:results (value :scs (single-reg)))\n  (:result-types single-float)\n  (:generator 4\n   (inst movss value (make-ea-for-float-ref object index offset 4))))\n\n\u3057\u304b\u3057\u4f7f\u3046\u3068\u30b3\u30f3\u30d1\u30a4\u30eb\u4e2d\u306b\u30a8\u30e9\u30fc\u306b\u306a\u308b\u3002\n(defun rm-gemm+static-size+unroll2-k (ma mb mc)\n  (declare (optimize (speed 3) (debug 0) (safety 0) (space 0)))\n  (declare (type (matrix 500 500) ma mb mc))\n    ...\n          (dotimes (col (/ cols 2))\n            (sb-kernel:data-vector-set-with-offset mc mc-index 0\n             (+ (sb-kernel:data-vector-ref-with-offset mc mc-index 0)\n                (* cell (sb-kernel:data-vector-ref-with-offset mb mb-index 0))))\n\n->\nfull call to SB-KERNEL:DATA-VECTOR-REF-WITH-OFFSET\nThis is probably a bug in SBCL itself. (Alternatively, SBCL ...\n   [Condition of type SB-INT:BUG]\n\nRestarts:\n 0: [ABORT] Abort compilation.\n 1: [*ABORT] Return to SLIME's top level.\n 2: [ABORT] abort thread (#<THREAD \"worker\" RUNNING {10051DE033}>)\n\nBacktrace:\n  0: (SB-INT:BUG \"full call to ~S\" SB-KERNEL:DATA-VECTOR-REF-WITH-OFFSET)\n  1: (SB-C::PONDER-FULL-CALL #<SB-C::COMBINATION :FUN #<SB-C::REF  :LEAF #<SB-C::GLOBAL-VAR :%SOURCE-NAME SB-KERNEL:DATA-VECTOR-REF-WITH-OFFSET :TYPE #1=#<SB-KERNEL:FUN-TYPE #> :DEFINED-TYPE #1# :WHERE-FRO..\n  2: (SB-C::IR2-CONVERT-FULL-CALL #<SB-C::COMBINATION :FUN #<SB-C::REF  :LEAF #<SB-C::GLOBAL-VAR :%SOURCE-NAME SB-KERNEL:DATA-VECTOR-REF-WITH-OFFSET :TYPE #1=#<SB-KERNEL:FUN-TYPE #> :DEFINED-TYPE #1# :WHER..\n  3: (SB-C::IR2-CONVERT-BLOCK #<SB-C::CBLOCK 11 :START c1 {1005211BF3}>)\n  4: (IR2-CONVERT #<COMPONENT :NAME RM-GEMM+STATIC-SIZE+UNROLL2-K {1005223F73}>)\n\n\u3053\u308c\u306f\u3001\u4ee5\u4e0b\u306e\u7406\u7531\u306b\u4f9d\u308b\u3002\n\n\u4f8b\u306eVOP\u306f \u591a\u6b21\u5143\u914d\u5217\u306b\u5bfe\u3057\u3066\u306f\u30de\u30c3\u30c1\u3057\u306a\u3044\u3002\n\nSB-KERNEL:DATA-VECTOR-REF-WITH-OFFSET \u306f always-transferrable \u3068\u3044\u3046 fun-info bit \u304c\u3064\u3044\u3066\u3044\u308b\u3002\u3053\u308c\u306f\u3001 VOP\u306b\u5909\u63db\u3055\u308c\u306a\u3044 full call \u3068\u3057\u3066\u30b3\u30f3\u30d1\u30a4\u30eb\u3055\u308c\u308b\u3068\u30a8\u30e9\u30fc\u306b\u306a\u308b\u3053\u3068\u3092\u793a\u3059\u30d3\u30c3\u30c8\u3067\u3042\u308b\u3002 IR2 \u30b3\u30f3\u30d1\u30a4\u30eb\u306e PONDER-FULL-CALL \u306f\u3053\u308c\u3092\u30c1\u30a7\u30c3\u30af\u3057\u3066\u3044\u308b\u3002\n\n\u89e3\u6c7a\u7b56\u3068\u3057\u3066\u306f\u3001 \u591a\u6b21\u5143\u914d\u5217\u30921\u6b21\u5143\u914d\u5217\u306b\u5909\u63db\u3059\u308b\u30e9\u30c3\u30d1\u95a2\u6570 (sb-kernel:%array-data-vector array) \u3092\u7528\u3044\u308b\u3002\u3053\u306e \"\u5909\u63db\" \u306f\u30b3\u30f3\u30d1\u30a4\u30eb\u6642\u306e\u30e1\u30bf\u60c5\u5831\u304c\u5909\u308f\u308b\u3060\u3051\u306a\u306e\u3067\u3001\u5b9f\u884c\u6642\u306e\u30aa\u30fc\u30d0\u30d8\u30c3\u30c9\u306f\u306a\u3044\u3002\u3069\u3063\u3061\u306b\u305b\u3088VOP\u306b\u30de\u30c3\u30c1\u3057\u3066\u5909\u63db\u3055\u308c\u308b\u3002\n\u7d50\u679c\u3001\u3067\u304d\u305f\u30a2\u30f3\u30ed\u30fc\u30ea\u30f3\u30b0\u306f\u4ee5\u4e0b\u3002\n(defun rm-gemm+static-size+unroll2-k (ma mb mc)\n  (declare (optimize (speed 3) (debug 0) (safety 0) (space 0)))\n  (declare (type (matrix 500 500) ma mb mc))\n  (let ((rows (array-dimension ma 0))\n        (cols (array-dimension mb 1)))\n    (declare (type fixnum rows cols))\n    (dotimes (row rows)\n      (dotimes (k cols)\n        (let ((cell (aref ma row k))\n              (mb-index (array-row-major-index mb k 0))\n              (mc-index (array-row-major-index mc row 0)))\n          (declare (fixnum mb-index mc-index))\n          (dotimes (col (/ cols 2))\n            (sb-kernel:data-vector-set-with-offset\n             (sb-kernel:%array-data-vector mc) mc-index 0\n             (+ (sb-kernel:data-vector-ref-with-offset\n                 (sb-kernel:%array-data-vector mc) mc-index 0)\n                (* cell (sb-kernel:data-vector-ref-with-offset\n                         (sb-kernel:%array-data-vector mb) mb-index 0))))\n            (sb-kernel:data-vector-set-with-offset\n             (sb-kernel:%array-data-vector mc) mc-index 1\n             (+ (sb-kernel:data-vector-ref-with-offset\n                 (sb-kernel:%array-data-vector mc) mc-index 1)\n                (* cell (sb-kernel:data-vector-ref-with-offset\n                         (sb-kernel:%array-data-vector mb) mb-index 1))))))))\n    mc))\n\n(benchmark (10 t)\n  ;; Evaluation took:\n  ;;   2.262 seconds of real time\n  ;;   2.260000 seconds of total run time (2.260000 user, 0.000000 system)\n  ;;   99.91% CPU\n  ;;   6,785,072,819 processor cycles\n  ;;   32,784 bytes consed\n  (rm-gemm+static-size+unroll2-k *ma* *mb* *mc*))\n(benchmark (10 t)\n  ;; Evaluation took:\n  ;;   2.696 seconds of real time\n  ;;   2.696000 seconds of total run time (2.696000 user, 0.000000 system)\n  ;;   100.00% CPU\n  ;;   8,088,876,210 processor cycles\n  ;;   33,056 bytes consed\n  (rm-gemm+static-size-k *ma* *mb* *mc*))\n\n\u7d50\u69cb\u65e9\u304f\u306a\u3063\u305f\u3002\u4ee5\u4e0b\u30c7\u30a3\u30b9\u30a2\u30bb\u30f3\u30d6\u30eb\u3002\n; disassembly for RM-GEMM+STATIC-SIZE+UNROLL2-K\n; Size: 208 bytes. Origin: #x1005962C88\n; C88:       31FF             XOR EDI, EDI                    ; no-arg-parsing entry point\n; C8A:       E9B3000000       JMP L5\n; C8F:       90               NOP\n; C90: L0:   31C9             XOR ECX, ECX\n; C92:       E99A000000       JMP L4\n; C97:       660F1F840000000000 NOP\n; CA0: L1:   4869C7F4010000   IMUL RAX, RDI, 500\n; CA7:       4801C8           ADD RAX, RCX\n; CAA:       498B5511         MOV RDX, [R13+17]\n; CAE:       F30F104C4201     MOVSS XMM1, [RDX+RAX*2+1]\n; CB4:       4C69C1F4010000   IMUL R8, RCX, 500\n; CBB:       4869C7F4010000   IMUL RAX, RDI, 500\n; CC2:       31F6             XOR ESI, ESI\n; CC4:       EB5E             JMP L3\n; CC6:       660F1F840000000000 NOP\n; CCF:       90               NOP\n; CD0: L2:   488B5311         MOV RDX, [RBX+17]\n; CD4:       4C8B5311         MOV R10, [RBX+17]\n; CD8:       F3410F105C4201   MOVSS XMM3, [R10+RAX*2+1]\n; CDF:       4D8B5111         MOV R10, [R9+17]\n; CE3:       F3430F10544201   MOVSS XMM2, [R10+R8*2+1]\n; CEA:       F30F59D1         MULSS XMM2, XMM1\n; CEE:       F30F58D3         ADDSS XMM2, XMM3\n; CF2:       F30F11544201     MOVSS [RDX+RAX*2+1], XMM2\n; CF8:       488B5311         MOV RDX, [RBX+17]\n; CFC:       4C8B5311         MOV R10, [RBX+17]\n; D00:       F3410F105C4205   MOVSS XMM3, [R10+RAX*2+5] <<< Good!\n; D07:       4D8B5111         MOV R10, [R9+17]\n; D0B:       F3430F10544205   MOVSS XMM2, [R10+R8*2+5] <<< Good!\n; D12:       F30F59D1         MULSS XMM2, XMM1\n; D16:       F30F58D3         ADDSS XMM2, XMM3\n; D1A:       F30F11544205     MOVSS [RDX+RAX*2+5], XMM2 <<< Good!\n; D20:       4883C602         ADD RSI, 2\n; D24: L3:   4881FEF4010000   CMP RSI, 500\n; D2B:       7CA3             JL L2\n; D2D:       4883C102         ADD RCX, 2\n; D31: L4:   4881F9E8030000   CMP RCX, 1000\n; D38:       0F8C62FFFFFF     JL L1\n; D3E:       4883C702         ADD RDI, 2\n; D42: L5:   4881FFE8030000   CMP RDI, 1000\n; D49:       0F8C41FFFFFF     JL L0\n; D4F:       488BD3           MOV RDX, RBX\n; D52:       488BE5           MOV RSP, RBP\n; D55:       F8               CLC\n; D56:       5D               POP RBP\n; D57:       C3               RET\n\n\u81ea\u52d5\u30a2\u30f3\u30ed\u30fc\u30ea\u30f3\u30b0\u306f\u6b21\u56de\u3002\nhttp://qiita.com/guicho271828/items/a095b106deec61477597 \u306e\u7d9a\u304d\u3002\n\n\u30a2\u30f3\u30ed\u30fc\u30ea\u30f3\u30b0\u3057\u3066\u3082\u3053\u3053\u304c\u9045\u3044\u3002\n\n```\n; 780: L2:   498B5011         MOV RDX, [R8+17]\n; 784:       F30F10545A01     MOVSS XMM2, [RDX+RBX*2+1]\n; 78A:       F30F59D1         MULSS XMM2, XMM1\n; 78E:       488B5011         MOV RDX, [RAX+17]\n; 792:       F30F105C4A01     MOVSS XMM3, [RDX+RCX*2+1]\n; 798:       F30F58DA         ADDSS XMM3, XMM2\n; 79C:       488B5011         MOV RDX, [RAX+17]\n; 7A0:       F30F115C4A01     MOVSS [RDX+RCX*2+1], XMM3\n; 7A6:       488D5102         LEA RDX, [RCX+2]            <<<<\n; 7AA:       4C8D5302         LEA R10, [RBX+2]            <<<<\n; 7AE:       4D8B6811         MOV R13, [R8+17]\n; 7B2:       F3430F10545501   MOVSS XMM2, [R13+R10*2+1]   <<<<\n; 7B9:       F30F59D1         MULSS XMM2, XMM1\n; 7BD:       4C8B5011         MOV R10, [RAX+17]\n; 7C1:       F3410F105C5201   MOVSS XMM3, [R10+RDX*2+1]   <<<<\n; 7C8:       F30F58DA         ADDSS XMM3, XMM2\n; 7CC:       4C8B5011         MOV R10, [RAX+17]\n; 7D0:       F3410F115C5201   MOVSS [R10+RDX*2+1], XMM3\n; 7D7:       4883C704         ADD RDI, 4\n; 7DB:       4883C104         ADD RCX, 4\n; 7DF:       4883C304         ADD RBX, 4\n```\n\n`(row-major-aref array (+ i 2))` \u306e\u6642\u306b\u3001 \u5b9a\u65702 \u304c\u30aa\u30d5\u30bb\u30c3\u30c8\u3068\u3057\u3066\u30a2\u30bb\u30f3\u30d6\u30e9\u306b\u7573\u307f\u8fbc\u307e\u308c\u3066\u304a\u3089\u305a\u3001 LEA\u3067\u660e\u306b\u8a08\u7b97\u3055\u308c\u3066\u3057\u307e\u3063\u3066\u3044\u308b(7A6)\u3002\n\n7B2\u306f\u672c\u5f53\u306f\u3053\u3046\u306a\u3063\u3066\u307b\u3057\u3044:\n\n```\n; 7B2:       F3430F10545501   MOVSS XMM2, [R13+R10*2+5]\n```\n\n\u305d\u3053\u3067\u3001SBCL\u306e\u5185\u90e8\u306b\u30c0\u30a4\u30d6\u3057\u3066\u30a2\u30bb\u30f3\u30d6\u30e9\u3092\u30c1\u30e5\u30fc\u30cb\u30f3\u30b0\u3059\u308b\u3053\u3068\u306b\u3002SBCL\u306f\u597d\u307f\u306e\u95a2\u6570\u304c\u7279\u5b9a\u306e\u578b\u306b\u5f53\u3066\u306f\u307e\u308b\u6642\u3001\u624b\u3067\u66f8\u3044\u305f\u6700\u901f\u30a2\u30bb\u30f3\u30d6\u30e9\u306b\u5909\u63db\u3059\u308b\u6a5f\u80fd\u304c\u4ed8\u3044\u3066\u3044\u308b\u3002\u3053\u308c\u306f\u4f7f\u3046\u5074\u306e\u30b3\u30fc\u30c9\u5074\u3067\u6307\u5b9a\u3059\u308b\u306e\u3067\u306f\u306a\u304f\u3066\n\n```cl\n;;;; \u5b9f\u969b\u3067\u306f\u306a\u3044\u4f8b : \u4f7f\u3044\u306b\u304f\u3044\n(...\n ;; \u666e\u901a\u30d0\u30fc\u30b8\u30e7\u30f3\u3092\n ;(my-function 0.1 0.2)\n ;; \u30a2\u30bb\u30f3\u30d6\u30ea\u30d0\u30fc\u30b8\u30e7\u30f3\u306b\u3044\u3061\u3044\u3061\u624b\u3067\u7f6e\u304d\u63db\u3048\u308b\n (my-function-in-super-fast-assembly/single-float/single-float 0.1 0.2)\n ...)\n```\n\n\u578b\u304c\u30de\u30c3\u30c1\u3057\u305f\u6642\u306b\u306f\u81ea\u52d5\u3067\u7f6e\u304d\u63db\u308f\u308b\u3002\u30de\u30c3\u30c1\u3057\u306a\u3044\u6642\u306f\u5143\u306e\u5b9a\u7fa9\u304c\u4f7f\u308f\u308c\u308b\u3002\n\n```cl\n(define-VOP (my-function-in-super-fast-assembly/single-float/single-float)\n  (:translate my-function)\n  (arg-types single-float single-float)\n  ...)\n\n(...\n (my-function 0.1 0.2) ; \u30b3\u30f3\u30d1\u30a4\u30e9\u304c\u81ea\u52d5\u3067VOP\u306e\u307b\u3046\u3092\u4f7f\u3046\n ...)\n```\n\n\u3055\u3066\u3001\u5225\u306b\u81ea\u5206\u3067\u30a2\u30bb\u30f3\u30d6\u30ea\u3092\u66f8\u304d\u305f\u304f\u306f\u306a\u3044\u306e\u3067\u3001SBCL\u306b\u3059\u3067\u306b\u3042\u308b\u5185\u90e8\u95a2\u6570\u3092\u4f7f\u3044\u305f\u3044\u3002\u3069\u3046\u3084\u3089\u305d\u308c\u304c `sb-kernel:data-vector-ref-with-offset` \u3060\u3002\n\n```cl\n(define-vop (data-vector-ref-with-offset/simple-array-single-float-c)\n  (:note \"inline array access\")\n  (:translate data-vector-ref-with-offset)\n  (:policy :fast-safe)\n  (:args (object :scs (descriptor-reg)))\n  (:info index offset)\n  (:arg-types simple-array-single-float (:constant low-index)\n              (:constant (constant-displacement other-pointer-lowtag\n                                                4 vector-data-offset)))\n  (:results (value :scs (single-reg)))\n  (:result-types single-float)\n  (:generator 4\n   (inst movss value (make-ea-for-float-ref object index offset 4))))\n```\n\n\u3057\u304b\u3057\u4f7f\u3046\u3068\u30b3\u30f3\u30d1\u30a4\u30eb\u4e2d\u306b\u30a8\u30e9\u30fc\u306b\u306a\u308b\u3002\n\n```cl\n(defun rm-gemm+static-size+unroll2-k (ma mb mc)\n  (declare (optimize (speed 3) (debug 0) (safety 0) (space 0)))\n  (declare (type (matrix 500 500) ma mb mc))\n    ...\n          (dotimes (col (/ cols 2))\n            (sb-kernel:data-vector-set-with-offset mc mc-index 0\n             (+ (sb-kernel:data-vector-ref-with-offset mc mc-index 0)\n                (* cell (sb-kernel:data-vector-ref-with-offset mb mb-index 0))))\n\n->\nfull call to SB-KERNEL:DATA-VECTOR-REF-WITH-OFFSET\nThis is probably a bug in SBCL itself. (Alternatively, SBCL ...\n   [Condition of type SB-INT:BUG]\n\nRestarts:\n 0: [ABORT] Abort compilation.\n 1: [*ABORT] Return to SLIME's top level.\n 2: [ABORT] abort thread (#<THREAD \"worker\" RUNNING {10051DE033}>)\n\nBacktrace:\n  0: (SB-INT:BUG \"full call to ~S\" SB-KERNEL:DATA-VECTOR-REF-WITH-OFFSET)\n  1: (SB-C::PONDER-FULL-CALL #<SB-C::COMBINATION :FUN #<SB-C::REF  :LEAF #<SB-C::GLOBAL-VAR :%SOURCE-NAME SB-KERNEL:DATA-VECTOR-REF-WITH-OFFSET :TYPE #1=#<SB-KERNEL:FUN-TYPE #> :DEFINED-TYPE #1# :WHERE-FRO..\n  2: (SB-C::IR2-CONVERT-FULL-CALL #<SB-C::COMBINATION :FUN #<SB-C::REF  :LEAF #<SB-C::GLOBAL-VAR :%SOURCE-NAME SB-KERNEL:DATA-VECTOR-REF-WITH-OFFSET :TYPE #1=#<SB-KERNEL:FUN-TYPE #> :DEFINED-TYPE #1# :WHER..\n  3: (SB-C::IR2-CONVERT-BLOCK #<SB-C::CBLOCK 11 :START c1 {1005211BF3}>)\n  4: (IR2-CONVERT #<COMPONENT :NAME RM-GEMM+STATIC-SIZE+UNROLL2-K {1005223F73}>)\n```\n\n\u3053\u308c\u306f\u3001\u4ee5\u4e0b\u306e\u7406\u7531\u306b\u4f9d\u308b\u3002\n\n1. \u4f8b\u306eVOP\u306f *\u591a\u6b21\u5143\u914d\u5217\u306b\u5bfe\u3057\u3066\u306f\u30de\u30c3\u30c1\u3057\u306a\u3044\u3002*\n2. SB-KERNEL:DATA-VECTOR-REF-WITH-OFFSET \u306f `always-transferrable` \u3068\u3044\u3046 fun-info bit \u304c\u3064\u3044\u3066\u3044\u308b\u3002\u3053\u308c\u306f\u3001 VOP\u306b\u5909\u63db\u3055\u308c\u306a\u3044 **full call** \u3068\u3057\u3066\u30b3\u30f3\u30d1\u30a4\u30eb\u3055\u308c\u308b\u3068\u30a8\u30e9\u30fc\u306b\u306a\u308b\u3053\u3068\u3092\u793a\u3059\u30d3\u30c3\u30c8\u3067\u3042\u308b\u3002 IR2 \u30b3\u30f3\u30d1\u30a4\u30eb\u306e PONDER-FULL-CALL \u306f\u3053\u308c\u3092\u30c1\u30a7\u30c3\u30af\u3057\u3066\u3044\u308b\u3002\n\n\u89e3\u6c7a\u7b56\u3068\u3057\u3066\u306f\u3001 \u591a\u6b21\u5143\u914d\u5217\u30921\u6b21\u5143\u914d\u5217\u306b\u5909\u63db\u3059\u308b\u30e9\u30c3\u30d1\u95a2\u6570 `(sb-kernel:%array-data-vector array)` \u3092\u7528\u3044\u308b\u3002\u3053\u306e \"\u5909\u63db\" \u306f\u30b3\u30f3\u30d1\u30a4\u30eb\u6642\u306e\u30e1\u30bf\u60c5\u5831\u304c\u5909\u308f\u308b\u3060\u3051\u306a\u306e\u3067\u3001\u5b9f\u884c\u6642\u306e\u30aa\u30fc\u30d0\u30d8\u30c3\u30c9\u306f\u306a\u3044\u3002\u3069\u3063\u3061\u306b\u305b\u3088VOP\u306b\u30de\u30c3\u30c1\u3057\u3066\u5909\u63db\u3055\u308c\u308b\u3002\n\n\u7d50\u679c\u3001\u3067\u304d\u305f\u30a2\u30f3\u30ed\u30fc\u30ea\u30f3\u30b0\u306f\u4ee5\u4e0b\u3002\n\n```cl\n(defun rm-gemm+static-size+unroll2-k (ma mb mc)\n  (declare (optimize (speed 3) (debug 0) (safety 0) (space 0)))\n  (declare (type (matrix 500 500) ma mb mc))\n  (let ((rows (array-dimension ma 0))\n        (cols (array-dimension mb 1)))\n    (declare (type fixnum rows cols))\n    (dotimes (row rows)\n      (dotimes (k cols)\n        (let ((cell (aref ma row k))\n              (mb-index (array-row-major-index mb k 0))\n              (mc-index (array-row-major-index mc row 0)))\n          (declare (fixnum mb-index mc-index))\n          (dotimes (col (/ cols 2))\n            (sb-kernel:data-vector-set-with-offset\n             (sb-kernel:%array-data-vector mc) mc-index 0\n             (+ (sb-kernel:data-vector-ref-with-offset\n                 (sb-kernel:%array-data-vector mc) mc-index 0)\n                (* cell (sb-kernel:data-vector-ref-with-offset\n                         (sb-kernel:%array-data-vector mb) mb-index 0))))\n            (sb-kernel:data-vector-set-with-offset\n             (sb-kernel:%array-data-vector mc) mc-index 1\n             (+ (sb-kernel:data-vector-ref-with-offset\n                 (sb-kernel:%array-data-vector mc) mc-index 1)\n                (* cell (sb-kernel:data-vector-ref-with-offset\n                         (sb-kernel:%array-data-vector mb) mb-index 1))))))))\n    mc))\n\n(benchmark (10 t)\n  ;; Evaluation took:\n  ;;   2.262 seconds of real time\n  ;;   2.260000 seconds of total run time (2.260000 user, 0.000000 system)\n  ;;   99.91% CPU\n  ;;   6,785,072,819 processor cycles\n  ;;   32,784 bytes consed\n  (rm-gemm+static-size+unroll2-k *ma* *mb* *mc*))\n(benchmark (10 t)\n  ;; Evaluation took:\n  ;;   2.696 seconds of real time\n  ;;   2.696000 seconds of total run time (2.696000 user, 0.000000 system)\n  ;;   100.00% CPU\n  ;;   8,088,876,210 processor cycles\n  ;;   33,056 bytes consed\n  (rm-gemm+static-size-k *ma* *mb* *mc*))\n```\n\n\u7d50\u69cb\u65e9\u304f\u306a\u3063\u305f\u3002\u4ee5\u4e0b\u30c7\u30a3\u30b9\u30a2\u30bb\u30f3\u30d6\u30eb\u3002\n\n```\n; disassembly for RM-GEMM+STATIC-SIZE+UNROLL2-K\n; Size: 208 bytes. Origin: #x1005962C88\n; C88:       31FF             XOR EDI, EDI                    ; no-arg-parsing entry point\n; C8A:       E9B3000000       JMP L5\n; C8F:       90               NOP\n; C90: L0:   31C9             XOR ECX, ECX\n; C92:       E99A000000       JMP L4\n; C97:       660F1F840000000000 NOP\n; CA0: L1:   4869C7F4010000   IMUL RAX, RDI, 500\n; CA7:       4801C8           ADD RAX, RCX\n; CAA:       498B5511         MOV RDX, [R13+17]\n; CAE:       F30F104C4201     MOVSS XMM1, [RDX+RAX*2+1]\n; CB4:       4C69C1F4010000   IMUL R8, RCX, 500\n; CBB:       4869C7F4010000   IMUL RAX, RDI, 500\n; CC2:       31F6             XOR ESI, ESI\n; CC4:       EB5E             JMP L3\n; CC6:       660F1F840000000000 NOP\n; CCF:       90               NOP\n; CD0: L2:   488B5311         MOV RDX, [RBX+17]\n; CD4:       4C8B5311         MOV R10, [RBX+17]\n; CD8:       F3410F105C4201   MOVSS XMM3, [R10+RAX*2+1]\n; CDF:       4D8B5111         MOV R10, [R9+17]\n; CE3:       F3430F10544201   MOVSS XMM2, [R10+R8*2+1]\n; CEA:       F30F59D1         MULSS XMM2, XMM1\n; CEE:       F30F58D3         ADDSS XMM2, XMM3\n; CF2:       F30F11544201     MOVSS [RDX+RAX*2+1], XMM2\n; CF8:       488B5311         MOV RDX, [RBX+17]\n; CFC:       4C8B5311         MOV R10, [RBX+17]\n; D00:       F3410F105C4205   MOVSS XMM3, [R10+RAX*2+5] <<< Good!\n; D07:       4D8B5111         MOV R10, [R9+17]\n; D0B:       F3430F10544205   MOVSS XMM2, [R10+R8*2+5] <<< Good!\n; D12:       F30F59D1         MULSS XMM2, XMM1\n; D16:       F30F58D3         ADDSS XMM2, XMM3\n; D1A:       F30F11544205     MOVSS [RDX+RAX*2+5], XMM2 <<< Good!\n; D20:       4883C602         ADD RSI, 2\n; D24: L3:   4881FEF4010000   CMP RSI, 500\n; D2B:       7CA3             JL L2\n; D2D:       4883C102         ADD RCX, 2\n; D31: L4:   4881F9E8030000   CMP RCX, 1000\n; D38:       0F8C62FFFFFF     JL L1\n; D3E:       4883C702         ADD RDI, 2\n; D42: L5:   4881FFE8030000   CMP RDI, 1000\n; D49:       0F8C41FFFFFF     JL L0\n; D4F:       488BD3           MOV RDX, RBX\n; D52:       488BE5           MOV RSP, RBP\n; D55:       F8               CLC\n; D56:       5D               POP RBP\n; D57:       C3               RET\n```\n\n\u81ea\u52d5\u30a2\u30f3\u30ed\u30fc\u30ea\u30f3\u30b0\u306f\u6b21\u56de\u3002\n", "tags": ["lisp", "\u884c\u5217", "\u30c1\u30e5\u30fc\u30cb\u30f3\u30b0"]}