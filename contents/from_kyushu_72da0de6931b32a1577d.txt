{"context": "\u6a2a\u6d5c\u3078\u306a\u3061\u3087\u3053\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u52c9\u5f37\u4f1a\u306b\u3066\u904e\u53bb\u306b\u51fa\u984c\u3055\u308c\u305f\u30cf\u30cb\u30ab\u30e0\u6b69\u304d\u3092\u89e3\u3044\u3066\u307f\u305f\u3002\n\u56de\u7b54\u306b\u304b\u304b\u3063\u305f\u6642\u9593\u306f40\u5206\u3002\n\u7d50\u5c40\u56de\u7b54\u3068\u3057\u305f\u5b9f\u88c5\u306f\u3059\u3050\u306b\u6d6e\u304b\u3093\u3060\u306e\u3060\u304c\u3001\u3053\u306e\u3088\u3046\u306a\u529b\u6280\u3067\u306f\u3084\u308a\u305f\u304f\u306a\u3044\u3068\u601d\u3044\u4ed6\u306e\u5b9f\u88c5\u3092\u6a21\u7d22\u3057\u3066\u3044\u305f\u3002\n\u7d50\u5c40\u3046\u307e\u304f\u5b9f\u88c5\u3067\u304d\u306a\u304b\u3063\u305f\u306e\u3067\u6642\u9593\u5185\u3067\u89e3\u304f\u305f\u3081\u306b\u529b\u6280\u306b\u983c\u3089\u3056\u308b\u3092\u5f97\u306a\u304f\u306a\u3063\u3066\u3057\u307e\u3063\u305f\u3002\n\u305d\u308c\u3063\u307d\u3044\u6226\u7565\u306f\u7acb\u3066\u3066\u3042\u308b\u306e\u3067\u3001\u5f8c\u307b\u3069\u518d\u30c1\u30e3\u30ec\u30f3\u30b8\u3057\u305f\u3044\u3002\nclass HoneyComb\n  MAP = {\n    \"A\" => \"BCDEFG\", \"B\" => \"HICAGS\", \"C\" => \"IJKDAB\", \"D\" => \"CKLMEA\", \"E\" => \"ADMNOF\", \"F\" => \"GAEOPQ\",\n    \"G\" => \"SBAFQR\", \"H\" => \"TUIBSk\", \"I\" => \"UVJCBH\", \"J\" => \"VWXKCI\", \"K\" => \"JXYLDC\", \"L\" => \"KYZaMD\",\n    \"M\" => \"DLabNE\", \"N\" => \"EMbcdO\", \"O\" => \"FENdeP\", \"P\" => \"QFOefg\", \"Q\" => \"RGFPgh\", \"R\" => \"jSGQhi\",\n    \"S\" => \"kHBGRj\", \"T\" => \"!!UHk!\", \"U\" => \"!!VIHT\", \"V\" => \"!!WJIU\", \"W\" => \"!!!XJV\", \"X\" => \"W!!YKJ\",\n    \"Y\" => \"X!!ZLK\", \"Z\" => \"Y!!!aL\", \"a\" => \"LZ!!bM\", \"b\" => \"Ma!!cN\", \"c\" => \"Nb!!!d\", \"d\" => \"ONc!!e\",\n    \"e\" => \"POd!!f\", \"f\" => \"gPe!!!\", \"g\" => \"hQPf!!\", \"h\" => \"iRQg!!\", \"i\" => \"!jRh!!\", \"j\" => \"!kSRi!\",\n    \"k\" => \"!THSj!\"\n  }\n\n  def route input\n    input.each_char.each_with_object([\"A\"]){|n, r|\n      r << MAP[r[r.rindex{|point| point != \"!\"}]][n.to_i]\n    }.join\n  end\nend\n\ntest = <<_TEST\n/*0*/ test( \"135004\", \"ACDABHS\" );\n/*1*/ test( \"1\", \"AC\" );\n/*2*/ test( \"33333120\", \"AENc!!b!M\" );\n/*3*/ test( \"0\", \"AB\" );\n/*4*/ test( \"2\", \"AD\" );\n/*5*/ test( \"3\", \"AE\" );\n/*6*/ test( \"4\", \"AF\" );\n/*7*/ test( \"5\", \"AG\" );\n/*8*/ test( \"4532120\", \"AFQPOEMD\" );\n/*9*/ test( \"051455\", \"ABSHSj!\" );\n/*10*/ test( \"23334551\", \"ADMb!cdeO\" );\n/*11*/ test( \"22033251\", \"ADLKLa!ML\" );\n/*12*/ test( \"50511302122\", \"AGSjkTHTU!VW\" );\n/*13*/ test( \"000051\", \"ABHT!!!\" );\n/*14*/ test( \"1310105\", \"ACDKJW!V\" );\n/*15*/ test( \"50002103140\", \"AGSk!HU!IVIU\" );\n/*16*/ test( \"3112045\", \"AEDKYXKC\" );\n/*17*/ test( \"02021245535\", \"ABCIJW!JIHBS\" );\n/*18*/ test( \"014204\", \"ABIBCIB\" );\n/*19*/ test( \"255230\", \"ADAGAEA\" );\n/*20*/ test( \"443501\", \"AFPefgQ\" );\n/*21*/ test( \"022321\", \"ABCKLZ!\" );\n/*22*/ test( \"554452\", \"AGRh!!Q\" );\n/*23*/ test( \"051024\", \"ABSHTUH\" );\n/*24*/ test( \"524002\", \"AGAFGSB\" );\n/*25*/ test( \"54002441132\", \"AGQRjSRhRSGA\" );\n/*26*/ test( \"11010554312\", \"ACJV!!UTkSHI\" );\n/*27*/ test( \"23405300554\", \"ADMNEFOFGRi!\" );\n/*28*/ test( \"555353201\", \"AGRih!gPQG\" );\n/*29*/ test( \"22424105\", \"ADLMabaLD\" );\n/*30*/ test( \"11340202125\", \"ACJKDCKJX!!J\" );\n/*31*/ test( \"4524451\", \"AFQFPf!P\" );\n/*32*/ test( \"44434234050\", \"AFPf!!e!!Pgh\" );\n/*33*/ test( \"00554040132\", \"ABHk!j!i!jRG\" );\n/*34*/ test( \"3440403\", \"AEOePfgf\" );\n/*35*/ test( \"111130\", \"ACJW!XW\" );\n/*36*/ test( \"21133343125\", \"ADKXYZ!a!Z!L\" );\n/*37*/ test( \"353511\", \"AEFOPFA\" );\n/*38*/ test( \"22204115220\", \"ADLZYLY!KY!X\" );\n/*39*/ test( \"03013541\", \"ABABICBGB\" );\n/*40*/ test( \"101344\", \"ACIVJCA\" );\n/*41*/ test( \"2432541\", \"ADENbNdN\" );\n/*42*/ test( \"45332242015\", \"AFQPedc!!NME\" );\n/*43*/ test( \"215453\", \"ADKCAGF\" );\n/*44*/ test( \"45540523454\", \"AFQh!i!RQg!!\" );\n/*45*/ test( \"42434302545\", \"AFEOd!!ONOef\" );\n_TEST\n\nrequire 'minitest/autorun'\n\ndescribe 'HoneyComb' do\n  test.split(\"\\n\").each do |line|\n    t, n, input, expect = line.match(/^\\/\\*(\\d+)\\*\\/\\s*test\\(\\s*\"([^\"]+)\",\\s*\"([^\"]+)\"\\s*\\);$/).to_a\n    hc = HoneyComb.new\n    it input do\n      assert_equal expect, hc.route(input)\n    end\n  end\nend\n\n\n[\u6a2a\u6d5c\u3078\u306a\u3061\u3087\u3053\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u52c9\u5f37\u4f1a](https://yhpg.doorkeeper.jp/)\u306b\u3066\u904e\u53bb\u306b\u51fa\u984c\u3055\u308c\u305f[\u30cf\u30cb\u30ab\u30e0\u6b69\u304d](http://nabetani.sakura.ne.jp/hena/ord10haniwa/)\u3092\u89e3\u3044\u3066\u307f\u305f\u3002\n\u56de\u7b54\u306b\u304b\u304b\u3063\u305f\u6642\u9593\u306f40\u5206\u3002\n\n\u7d50\u5c40\u56de\u7b54\u3068\u3057\u305f\u5b9f\u88c5\u306f\u3059\u3050\u306b\u6d6e\u304b\u3093\u3060\u306e\u3060\u304c\u3001\u3053\u306e\u3088\u3046\u306a\u529b\u6280\u3067\u306f\u3084\u308a\u305f\u304f\u306a\u3044\u3068\u601d\u3044\u4ed6\u306e\u5b9f\u88c5\u3092\u6a21\u7d22\u3057\u3066\u3044\u305f\u3002\n\u7d50\u5c40\u3046\u307e\u304f\u5b9f\u88c5\u3067\u304d\u306a\u304b\u3063\u305f\u306e\u3067\u6642\u9593\u5185\u3067\u89e3\u304f\u305f\u3081\u306b\u529b\u6280\u306b\u983c\u3089\u3056\u308b\u3092\u5f97\u306a\u304f\u306a\u3063\u3066\u3057\u307e\u3063\u305f\u3002\n\u305d\u308c\u3063\u307d\u3044\u6226\u7565\u306f\u7acb\u3066\u3066\u3042\u308b\u306e\u3067\u3001\u5f8c\u307b\u3069\u518d\u30c1\u30e3\u30ec\u30f3\u30b8\u3057\u305f\u3044\u3002\n\n```ruby\nclass HoneyComb\n  MAP = {\n    \"A\" => \"BCDEFG\", \"B\" => \"HICAGS\", \"C\" => \"IJKDAB\", \"D\" => \"CKLMEA\", \"E\" => \"ADMNOF\", \"F\" => \"GAEOPQ\",\n    \"G\" => \"SBAFQR\", \"H\" => \"TUIBSk\", \"I\" => \"UVJCBH\", \"J\" => \"VWXKCI\", \"K\" => \"JXYLDC\", \"L\" => \"KYZaMD\",\n    \"M\" => \"DLabNE\", \"N\" => \"EMbcdO\", \"O\" => \"FENdeP\", \"P\" => \"QFOefg\", \"Q\" => \"RGFPgh\", \"R\" => \"jSGQhi\",\n    \"S\" => \"kHBGRj\", \"T\" => \"!!UHk!\", \"U\" => \"!!VIHT\", \"V\" => \"!!WJIU\", \"W\" => \"!!!XJV\", \"X\" => \"W!!YKJ\",\n    \"Y\" => \"X!!ZLK\", \"Z\" => \"Y!!!aL\", \"a\" => \"LZ!!bM\", \"b\" => \"Ma!!cN\", \"c\" => \"Nb!!!d\", \"d\" => \"ONc!!e\",\n    \"e\" => \"POd!!f\", \"f\" => \"gPe!!!\", \"g\" => \"hQPf!!\", \"h\" => \"iRQg!!\", \"i\" => \"!jRh!!\", \"j\" => \"!kSRi!\",\n    \"k\" => \"!THSj!\"\n  }\n\n  def route input\n    input.each_char.each_with_object([\"A\"]){|n, r|\n      r << MAP[r[r.rindex{|point| point != \"!\"}]][n.to_i]\n    }.join\n  end\nend\n\ntest = <<_TEST\n/*0*/ test( \"135004\", \"ACDABHS\" );\n/*1*/ test( \"1\", \"AC\" );\n/*2*/ test( \"33333120\", \"AENc!!b!M\" );\n/*3*/ test( \"0\", \"AB\" );\n/*4*/ test( \"2\", \"AD\" );\n/*5*/ test( \"3\", \"AE\" );\n/*6*/ test( \"4\", \"AF\" );\n/*7*/ test( \"5\", \"AG\" );\n/*8*/ test( \"4532120\", \"AFQPOEMD\" );\n/*9*/ test( \"051455\", \"ABSHSj!\" );\n/*10*/ test( \"23334551\", \"ADMb!cdeO\" );\n/*11*/ test( \"22033251\", \"ADLKLa!ML\" );\n/*12*/ test( \"50511302122\", \"AGSjkTHTU!VW\" );\n/*13*/ test( \"000051\", \"ABHT!!!\" );\n/*14*/ test( \"1310105\", \"ACDKJW!V\" );\n/*15*/ test( \"50002103140\", \"AGSk!HU!IVIU\" );\n/*16*/ test( \"3112045\", \"AEDKYXKC\" );\n/*17*/ test( \"02021245535\", \"ABCIJW!JIHBS\" );\n/*18*/ test( \"014204\", \"ABIBCIB\" );\n/*19*/ test( \"255230\", \"ADAGAEA\" );\n/*20*/ test( \"443501\", \"AFPefgQ\" );\n/*21*/ test( \"022321\", \"ABCKLZ!\" );\n/*22*/ test( \"554452\", \"AGRh!!Q\" );\n/*23*/ test( \"051024\", \"ABSHTUH\" );\n/*24*/ test( \"524002\", \"AGAFGSB\" );\n/*25*/ test( \"54002441132\", \"AGQRjSRhRSGA\" );\n/*26*/ test( \"11010554312\", \"ACJV!!UTkSHI\" );\n/*27*/ test( \"23405300554\", \"ADMNEFOFGRi!\" );\n/*28*/ test( \"555353201\", \"AGRih!gPQG\" );\n/*29*/ test( \"22424105\", \"ADLMabaLD\" );\n/*30*/ test( \"11340202125\", \"ACJKDCKJX!!J\" );\n/*31*/ test( \"4524451\", \"AFQFPf!P\" );\n/*32*/ test( \"44434234050\", \"AFPf!!e!!Pgh\" );\n/*33*/ test( \"00554040132\", \"ABHk!j!i!jRG\" );\n/*34*/ test( \"3440403\", \"AEOePfgf\" );\n/*35*/ test( \"111130\", \"ACJW!XW\" );\n/*36*/ test( \"21133343125\", \"ADKXYZ!a!Z!L\" );\n/*37*/ test( \"353511\", \"AEFOPFA\" );\n/*38*/ test( \"22204115220\", \"ADLZYLY!KY!X\" );\n/*39*/ test( \"03013541\", \"ABABICBGB\" );\n/*40*/ test( \"101344\", \"ACIVJCA\" );\n/*41*/ test( \"2432541\", \"ADENbNdN\" );\n/*42*/ test( \"45332242015\", \"AFQPedc!!NME\" );\n/*43*/ test( \"215453\", \"ADKCAGF\" );\n/*44*/ test( \"45540523454\", \"AFQh!i!RQg!!\" );\n/*45*/ test( \"42434302545\", \"AFEOd!!ONOef\" );\n_TEST\n\nrequire 'minitest/autorun'\n\ndescribe 'HoneyComb' do\n  test.split(\"\\n\").each do |line|\n    t, n, input, expect = line.match(/^\\/\\*(\\d+)\\*\\/\\s*test\\(\\s*\"([^\"]+)\",\\s*\"([^\"]+)\"\\s*\\);$/).to_a\n    hc = HoneyComb.new\n    it input do\n      assert_equal expect, hc.route(input)\n    end\n  end\nend\n```\n", "tags": ["Ruby", "\u3069\u3046\u66f8\u304f", "yhpg"]}