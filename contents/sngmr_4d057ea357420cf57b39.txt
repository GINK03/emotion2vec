{"context": " More than 1 year has passed since last update.\u5f53\u7136\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u306f\u6e08\u3093\u3067\u3044\u308b\u524d\u63d0\u3002\n\nAndroid \u30a2\u30d7\u30ea\u4f5c\u6210\u6642\u306e\u7f72\u540d\u65b9\u6cd5\u5909\u66f4\n\u306a\u3093\u3067\u305d\u3093\u306a\u3053\u3068\u304c\u5fc5\u8981\u306a\u306e\uff1f\u306f\u3001\u3053\u3061\u3089\u306e\u30da\u30fc\u30b8\u3092\u53c2\u7167\u306e\u3053\u3068\u3002\n\nandroid/builder.py\ndef get_sigalg(self):\n    output = run.run([self.keytool,\n        '-v',\n        '-list',\n        '-keystore', self.keystore,\n        '-storepass', self.keystore_pass,\n        '-alias', self.keystore_alias\n    ], protect_arg_positions=(6,))\n\n    # If the keytool encounters an error, that means some of the provided\n    # keychain info is invalid and we should bail anyway\n    run.check_output_for_error(output, r'RuntimeException: (.*)', True)\n    run.check_output_for_error(output, r'^keytool: (.*)', True)\n\n    #\n    # \u3053\u3053\u3092\u5909\u66f4\n    # Edited by sngmr for Error installing apk\n    #\n    match = re.search(r'Signature algorithm name: (.*)', output)\n    if match is not None:\n        if match.group(1) == \"SHA256withRSA\":\n            return \"SHA1withRSA\"\n        else:\n            return match.group(1)\n\n    # Return the default:\n    return \"MD5withRSA\"\n\n\n\nandroid/cli/commands/_build.js\n// 320\u884c\u76ee\u4ed8\u8fd1\n    validate: function (value, callback) {\n        // if there's a value, then they entered something, otherwise let the cli prompt\n        if (value) {\n            var selectedAlias = value.toLowerCase(),\n                alias = _t.keystoreAlias = _t.keystoreAliases.filter(function (a) { return a.name && a.name.toLowerCase() == selectedAlias; }).shift();\n            if (!alias) {\n                return callback(new Error(__('Invalid \"--alias\" value \"%s\"', value)));\n            }\n            if (alias.sigalg && alias.sigalg.toLowerCase() == 'sha256withrsa') {\n                logger.warn(__('The selected alias %s uses the %s signature algorithm which will likely have issues with Android 4.3 and older.', ('\"' + value + '\"').cyan, ('\"' + alias.sigalg + '\"').cyan));\n                logger.warn(__('Certificates that use the %s or %s signature algorithm will provide better compatibility.', '\"SHA1withRSA\"'.cyan, '\"MD5withRSA\"'.cyan));\n\n                // \u3053\u3053\u3092\u8ffd\u52a0 for Java 7 \u3067 Keystore \u3092\u4f5c\u3063\u3066\u3057\u307e\u3063\u3066\u308b\u306e\u306e\u5bfe\u5fdc\n                logger.warn(__('Force change %s to %s', ('\"' + alias.sigalg + '\"').cyan, '\"SHA1withRSA\"'.cyan));\n                alias.sigalg = 'SHA1withRSA';\n            }\n        }\n        callback(null, value);\n    }\n\n\n\n\u4ee5\u4e0b\u306f\u3082\u3046\u4e0d\u8981\u3060\u3068\u601d\u3046\u3002Titanium\u304c\u516c\u5f0f\u306bGenymotion\u5bfe\u5fdc\u3057\u305f\u304b\u3089\u3002\n\nGenymotion\u5bfe\u5fdc\n\u5bfe\u5fdc\u306e\u8a73\u7d30\u306f\u3053\u3061\u3089\u3002\n\nandroid/androidsdk.py\ndef list_devices(self):\n    adb = self.get_adb()\n    (out, err) = subprocess.Popen([adb, 'devices'], stdout=subprocess.PIPE, stderr=subprocess.PIPE).communicate()\n    if type(err) != types.NoneType and len(err) > 0:\n        raise Exception(err)\n    devices = []\n    for line in out.splitlines():\n        line = line.strip()\n        if line.startswith(\"List of devices\"): continue\n        elif line.startswith(\"emulator-\"):\n            (name, status) = line.split()\n            port = int(name[name.index(\"-\")+1:])\n            offline = False\n            if status == \"offline\":\n                offline = True\n            devices.append(Device(name, port, True, offline))\n        # Added by sngmr\n        elif line.startswith(\"192.168.56.\"):\n            (name, status) = line.split()\n            port = int(name[name.index(\":\")+1:])\n            offline = False\n            if status == \"offline\":\n                offline = True\n            devices.append(Device(name, port, True, offline))\n        elif \"device\" in line:\n            name = line.split()[0]\n            devices.append(Device(name))\n    return devices\n\n\n\nandroid/cli/commands/_build.js\n// 448\u884c\u76ee\u4ed8\u8fd1\n// Changed by sngmr\nemulatorProcess = spawn('python', ['--version'], { detached: true, stdio: 'ignore' });\n// emulatorProcess = spawn('python', emulatorCmd, { detached: true, stdio: 'ignore' });\n\n///\n/// \u4e2d\u7565\n///\n\n// 465\u884c\u76ee\u4ed8\u8fd1\ndevicesProcess.on('exit', function (code, status) {\n    if (results.indexOf('emulator') != -1) {\n        logger.info(__('Emulator is running') + '\\n');\n    // Addedn by sngmr\n    } else if (results.indexOf('192.168.56.') != -1) {\n        logger.info(__('AndroVM Emulator is running') + '\\n');\n    } else {\n        emulatorRunning = false;\n        logger.info(__('Emulator process exited successfully') + '\\n');\n        logcatProcess && logcatProcess.kill('SIGKILL');\n        adbProcess && adbProcess.kill('SIGKILL');\n        buildProcess && buildProcess.kill('SIGKILL');\n        emulatorProcess = buildProcess = logcatProcess = adbProcess = null;\n    }\n});\n\n\n\u5f53\u7136\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u306f\u6e08\u3093\u3067\u3044\u308b\u524d\u63d0\u3002\n\n## Android \u30a2\u30d7\u30ea\u4f5c\u6210\u6642\u306e\u7f72\u540d\u65b9\u6cd5\u5909\u66f4\n\u306a\u3093\u3067\u305d\u3093\u306a\u3053\u3068\u304c\u5fc5\u8981\u306a\u306e\uff1f\u306f\u3001\u3053\u3061\u3089\u306e[\u30da\u30fc\u30b8](http://qiita.com/sngmr/items/b6ac523b98446e5e69fa)\u3092\u53c2\u7167\u306e\u3053\u3068\u3002\n\n```py:android/builder.py\ndef get_sigalg(self):\n\toutput = run.run([self.keytool,\n\t\t'-v',\n\t\t'-list',\n\t\t'-keystore', self.keystore,\n\t\t'-storepass', self.keystore_pass,\n\t\t'-alias', self.keystore_alias\n\t], protect_arg_positions=(6,))\n\n\t# If the keytool encounters an error, that means some of the provided\n\t# keychain info is invalid and we should bail anyway\n\trun.check_output_for_error(output, r'RuntimeException: (.*)', True)\n\trun.check_output_for_error(output, r'^keytool: (.*)', True)\n\t\n\t#\n\t# \u3053\u3053\u3092\u5909\u66f4\n\t# Edited by sngmr for Error installing apk\n\t#\n\tmatch = re.search(r'Signature algorithm name: (.*)', output)\n\tif match is not None:\n\t\tif match.group(1) == \"SHA256withRSA\":\n\t\t\treturn \"SHA1withRSA\"\n\t\telse:\n\t\t\treturn match.group(1)\n\n\t# Return the default:\n\treturn \"MD5withRSA\"\n```\n\n```js:android/cli/commands/_build.js\n// 320\u884c\u76ee\u4ed8\u8fd1\n\tvalidate: function (value, callback) {\n\t\t// if there's a value, then they entered something, otherwise let the cli prompt\n\t\tif (value) {\n\t\t\tvar selectedAlias = value.toLowerCase(),\n\t\t\t\talias = _t.keystoreAlias = _t.keystoreAliases.filter(function (a) { return a.name && a.name.toLowerCase() == selectedAlias; }).shift();\n\t\t\tif (!alias) {\n\t\t\t\treturn callback(new Error(__('Invalid \"--alias\" value \"%s\"', value)));\n\t\t\t}\n\t\t\tif (alias.sigalg && alias.sigalg.toLowerCase() == 'sha256withrsa') {\n\t\t\t\tlogger.warn(__('The selected alias %s uses the %s signature algorithm which will likely have issues with Android 4.3 and older.', ('\"' + value + '\"').cyan, ('\"' + alias.sigalg + '\"').cyan));\n\t\t\t\tlogger.warn(__('Certificates that use the %s or %s signature algorithm will provide better compatibility.', '\"SHA1withRSA\"'.cyan, '\"MD5withRSA\"'.cyan));\n\n\t\t\t\t// \u3053\u3053\u3092\u8ffd\u52a0 for Java 7 \u3067 Keystore \u3092\u4f5c\u3063\u3066\u3057\u307e\u3063\u3066\u308b\u306e\u306e\u5bfe\u5fdc\n\t\t\t\tlogger.warn(__('Force change %s to %s', ('\"' + alias.sigalg + '\"').cyan, '\"SHA1withRSA\"'.cyan));\n\t\t\t\talias.sigalg = 'SHA1withRSA';\n\t\t\t}\n\t\t}\n\t\tcallback(null, value);\n\t}\n```\n\n## \u4ee5\u4e0b\u306f\u3082\u3046\u4e0d\u8981\u3060\u3068\u601d\u3046\u3002Titanium\u304c\u516c\u5f0f\u306bGenymotion\u5bfe\u5fdc\u3057\u305f\u304b\u3089\u3002\n\n## Genymotion\u5bfe\u5fdc\n\u5bfe\u5fdc\u306e\u8a73\u7d30\u306f[\u3053\u3061\u3089](http://qiita.com/sngmr/items/d7c244114d7242c681c5)\u3002\n\n```py:android/androidsdk.py\ndef list_devices(self):\n\tadb = self.get_adb()\n\t(out, err) = subprocess.Popen([adb, 'devices'], stdout=subprocess.PIPE, stderr=subprocess.PIPE).communicate()\n\tif type(err) != types.NoneType and len(err) > 0:\n\t\traise Exception(err)\n\tdevices = []\n\tfor line in out.splitlines():\n\t\tline = line.strip()\n\t\tif line.startswith(\"List of devices\"): continue\n\t\telif line.startswith(\"emulator-\"):\n\t\t\t(name, status) = line.split()\n\t\t\tport = int(name[name.index(\"-\")+1:])\n\t\t\toffline = False\n\t\t\tif status == \"offline\":\n\t\t\t\toffline = True\n\t\t\tdevices.append(Device(name, port, True, offline))\n\t\t# Added by sngmr\n\t\telif line.startswith(\"192.168.56.\"):\n\t\t\t(name, status) = line.split()\n\t\t\tport = int(name[name.index(\":\")+1:])\n\t\t\toffline = False\n\t\t\tif status == \"offline\":\n\t\t\t\toffline = True\n\t\t\tdevices.append(Device(name, port, True, offline))\n\t\telif \"device\" in line:\n\t\t\tname = line.split()[0]\n\t\t\tdevices.append(Device(name))\n\treturn devices\n```\n\n```js:android/cli/commands/_build.js\n// 448\u884c\u76ee\u4ed8\u8fd1\n// Changed by sngmr\nemulatorProcess = spawn('python', ['--version'], { detached: true, stdio: 'ignore' });\n// emulatorProcess = spawn('python', emulatorCmd, { detached: true, stdio: 'ignore' });\n\n///\n/// \u4e2d\u7565\n///\n\n// 465\u884c\u76ee\u4ed8\u8fd1\ndevicesProcess.on('exit', function (code, status) {\n\tif (results.indexOf('emulator') != -1) {\n\t\tlogger.info(__('Emulator is running') + '\\n');\n\t// Addedn by sngmr\n\t} else if (results.indexOf('192.168.56.') != -1) {\n\t\tlogger.info(__('AndroVM Emulator is running') + '\\n');\n\t} else {\n\t\temulatorRunning = false;\n\t\tlogger.info(__('Emulator process exited successfully') + '\\n');\n\t\tlogcatProcess && logcatProcess.kill('SIGKILL');\n\t\tadbProcess && adbProcess.kill('SIGKILL');\n\t\tbuildProcess && buildProcess.kill('SIGKILL');\n\t\temulatorProcess = buildProcess = logcatProcess = adbProcess = null;\n\t}\n});\n```\n", "tags": ["Titanium"]}