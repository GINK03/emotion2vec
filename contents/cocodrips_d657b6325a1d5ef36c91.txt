{"tags": ["SICP"], "context": "\n\n2.2.3 \u96c6\u7a4d\nSICP/2.2.3.scm at master \u00b7 cocodrips/SICP\n(display \"*********2.2.3**********\")\n(newline)\n\n;; \u6a19\u6e96\u30a4\u30f3\u30bf\u30d5\u30a7\u30fc\u30b9\n;; \u5947\u6570\u306e\u8449\u306e\u4e8c\u4e57\u306e\u5408\u8a08\u3092\u8a08\u7b97\n(define (sum-odd-squares tree)\n    (cond \n        ((null? tree) 0)\n        ((not (pair? tree))\u3000(if (odd? tree) (square tree) 0))\n    (else \n        (+ (sum-odd-squares (car tree))\n    (sum-odd-squares (cdr tree))))))\n\n;;by @hio\u3055\u3093\n; p.40, 1.2.2 \u6728\u306e\u518d\u5e30\n(define (fib n)\n    (define (iter a b count)\n        (if\n            (= count 0)\n            b\n            (iter (+ a b) a (- count 1))))\n    (iter 1 0 n))\n\n;; \u30d5\u30a3\u30dc\u30ca\u30c3\u30c1\u6570\u306e\u3046\u3061\u3001\u5076\u6570\u306e\u3082\u306e\u3092\u304b\u3048\u3059\u30ea\u30b9\u30c8\u3092\u69cb\u7bc9\u3059\u308b\n(define (even-fibs n)\n    (define (next k)\n        (if (> k n)\n            ()\n            (let ((f (fib k)))\n                (if \n                    (even? f)\n                    (cons f (next (+ k 1)))\n                    (next (+ k 1))))))\n(next 0))\n(display (even-fibs 10))\n(newline)\n;(0 2 8 34)\n\n;; Filter\n(define (filter predicate sequence)\n    (cond \n        ((null? sequence) ())\n        ((predicate (car sequence)) \n            (cons (car sequence)\n            (filter predicate (cdr sequence))))\n    (else (filter predicate (cdr sequence)))))\n\n(display (filter odd? (list 1 2 3 4 5)))\n(newline)\n\n;; \u96c6\u7a4d\u3000accumulate\n(define (accumulate op initial sequence)\n    (if \n        (null? sequence)\n        initial\n        (op (car sequence) (accumulate op initial (cdr sequence)))))\n\n(display (accumulate + 0 (list 1 2 3 4 5)))(newline)\n;15\n(display (accumulate * 1 (list 1 2 3 4 5)))(newline)\n;120\n(display (accumulate cons () (list 1 2 3 4 5)))(newline)\n\n;(1 2 3 4 5)\n\n\u3088\u304f\u308f\u304b\u3089\u306a\u304f\u306a\u308b\u306e\u3067\u30e1\u30e2\uff1a\n\naccumulate\n(accumulate f(array[i], \u4eca\u307e\u3067\u306eaccumulate\u7d50\u679c) \u521d\u671f\u5024 array) \n-> \u521d\u671f\u5024\u306bmerge\u3055\u308c\u3066\u304f\n\n\nmap\n(map f(array[i]) array)\n-> \u914d\u5217\u304c\u8fd4\u308b\n\n\n2.33\n(display \"======Ex.2.33======\")\n(newline)\n;\u7df4\u7fd2\u554f\u984c 2.33: \u57fa\u672c\u7684\u306a\u30ea\u30b9\u30c8\u64cd\u4f5c\u306e\u3044\u304f\u3064\u304b\u3092\u96c6\u7a4d\u3068\u3057\u3066\u5b9a\u7fa9\n;\u3057\u305f\u3082\u306e\u3092\u4ee5\u4e0b\u306b\u793a\u3059\u3002\u6b20\u3051\u3066\u3044\u308b\u5f0f\u3092\u57cb\u3081\u3066\u3001\u5b8c\u6210\u3055\u305b\u3088\u3002\n\n(define (map p sequence)\n    (accumulate (lambda (x y) (cons (p x) y)) () sequence))\n\n(define (double x)\n   (* 2 x))\n(display (map double (list 1 2 3 4 5))) \n(newline)\n;(2 4 6 8 10)\n\n(define (append seq1 seq2)\n    (accumulate cons seq1 seq2))\n(display (append (list 1 2 3) (list 4 5 8))) \n(newline)\n;(4 5 8 1 2 3)\n(define (length sequence)\n    (accumulate (lambda (_ x) (+ x 1)) 0 sequence))\n(display (length (list 1 2 3)) )\n(newline)\n;3\n\n\n2.34\n(display \"======Ex.2.34======\")\n(newline)\n\n(define (horner-eval x coefficient-sequence)\n    (accumulate\n        (lambda (this-coeff higher-terms) (+ (* higher-terms x) this-coeff))\n        0\n        coefficient-sequence))\n\n(display (horner-eval 2 (list 1 3 0 5 0 1)))\n;; 79\n\n\nEx 2.35\n(display \"======Ex.2.35======\")\n(newline)\n\n(define (count-leaves t)\n    (accumulate + 0 (map (lambda (x) 1) (enumerate-tree t))))\n\n(define tree (cons (list 1 2) (list 3 4)))\n(display (count-leaves tree))\n(newline)\n; 4\n\n(define tree (cons (list 1 2) (list 3 4 5)))\n(display (count-leaves tree))\n(newline)\n;5\n\n@hio\u3055\u3093\u306e\u5b9f\u88c5\uff5c\u518d\u5e30\u7684\u306b\u8db3\u3057\u3066\u304f\u2028\n(define (count-leaves t)\n    (accumulate\n        +\n        0\n        (map\n            (lambda (x)\n                (if\n                    (pair? x)\n                    (count-leaves x)\n                    1))\n            t)))\n\n\nEx 2.36\n(display \"======Ex.2.36======\")\n(newline)\n\n(define (accumulate-n op init seqs)\n(if (null? (car seqs))\n    nil\n    (cons (accumulate op init (map car seqs)) (accumulate-n op init (map cdr seqs)))))\n\n\n(define s (list (list 1 2 3) (list 4 5 6) (list 7 8 9) (list 10 11 12)))\n(display (accumulate-n + 0 s))\n\n\nEx 2.37\n(display \"======Ex.2.37======\")\n(newline)\n\n;(define (map proc items)\n;    (if (null? items)\n;    nil\n;    (cons (proc (car items)) (map proc (cdr items)))))\n(define (dot-product v w)\n    (accumulate + 0 (_map * v w)))\n\n(define m1 (list (list 1 2 3 4) (list 4 5 6 7)))\n(define v1 (list 1 2))\n(define v2 (list 10 20))\n\n\n(display (dot-product v1 v2)) \n(newline)\n;50\n\n(define (matrix-*-vector m v)\n    (_map (lambda (m_i) (dot-product m_i v)) m)) ;; By @hio\u3055\u3093\n\n(display (matrix-*-vector m1 v2))\n(newline)\n;(50 140)\n\n\n(define (transpose mat)\n    (accumulate-n cons nil mat))\n(display (transpose m1))\n(newline)\n;((1 4) (2 5) (3 6) (4 7))\n\n\n;(define (matrix-*-matrix m n)\n;(let ((cols (transpose n)))\n;(map \u27e8??\u27e9 m)))\n;cols???\n\n\nEx 2.38\n(display \"======Ex.2.38======\")\n(newline)\n\n;\u7df4\u7fd2\u554f\u984c 2.38: accumulate \u624b\u7d9a\u304d\u306f\u3001\u5217\u306e\u6700\u521d\u306e\u8981\u7d20\u3068\u3001\u53f3\u306e\n;\u3059\u3079\u3066\u306e\u8981\u7d20\u3092\u7d44\u307f\u5408\u308f\u305b\u305f\u7d50\u679c\u3068\u3092\u7d44\u307f\u5408\u308f\u305b\u308b\u305f\u3081\u3001foldright\n;\u3068\u3057\u3066\u3082\u77e5\u3089\u308c\u3066\u3044\u308b\u3002fold-left \u3068\u3044\u3046\u3082\u306e\u3082\u3042\u308a\u3001\u3053\u308c\n;\u306f fold-right \u306b\u4f3c\u3066\u3044\u308b\u304c\u3001\u8981\u7d20\u306e\u7d44\u307f\u5408\u308f\u305b\u3092\u9006\u65b9\u5411\u306b\u884c\u3046\u3068\n;\u3044\u3046\u70b9\u304c\u9055\u3046\u3002\n(define (accumulate op initial sequence)\n    (if (null? sequence)\n        initial\n        (op (car sequence) (accumulate op initial (cdr sequence)))))\n\n(define fold-right accumulate)\n\n(define (fold-left op initial sequence)\n    (define (iter result rest)\n        (if (null? rest)\n            result\n        (iter (op result (car rest))\n            (cdr rest))))\n(iter initial sequence))\n\n(display (fold-right / 1 (list 1 2 3)))     (newline) \n; (/ 1 (/ 2 (/ 3 1)))\n; 2 / 3\n(display (fold-left / 1 (list 1 2 3)))      (newline)\n; (/ (/ (/ 1 2) 2 ) 3)\n\n(display (fold-right list nil (list 1 2 3)))(newline)\n;(1 (2 (3 ())))\n(display (fold-left list nil (list 1 2 3))) (newline)\n;(((() 1) 2) 3)\n\n;; \u53ef\u63db\u306a\u6f14\u7b97\u306a\u3089right/fold-left\u3067\u7d50\u679c\u304c\u304a\u306a\u3058\u306b\u306a\u308b\n\n\nEx 2.39\n(display \"======Ex.2.39======\")\n(newline)\n;\u7df4\u7fd2\u554f\u984c 2.39: \u4ee5\u4e0b\u306e reverse(\u7df4\u7fd2\u554f\u984c 2.18) \u624b\u7d9a\u304d\u306e\u5b9a\u7fa9\u3092\u3001\u7df4\n;\u7fd2\u554f\u984c 2.38\u306e fold-right \u3068 fold-left \u306b\u3088\u3063\u3066\u5b8c\u6210\u3055\u305b\u3088\u3002\n(define (reverse sequence)\n    (fold-right (lambda (x y) (append (list x) y)) (list) sequence))\n\n(define l (list 1 3 5))\n(display (reverse l))\n(newline)\n;(5 3 1)\n\n(define (reverse sequence)\n    (fold-left (lambda (x y) (cons y x)) nil sequence))\n(display (reverse l))\n(newline)\n;(5 3 1)\n\n\n\u30de\u30c3\u30d7\u306e\u30cd\u30b9\u30c8\n\n;; \u30de\u30c3\u30d7\u306e\u30cd\u30b9\u30c8\n(define (enumerate-interval low high)\n    (if \n        (> low high)\n        nil\n    (cons low (enumerate-interval (+ low 1) high))))\n(display (enumerate-interval 2 7))\n(newline)\n\n\n(define n 3)\n(display (accumulate\n    append nil (map (lambda (i)\n        (map (lambda (j) (list i j))\n            (enumerate-interval 1 (- i 1))))\n        (enumerate-interval 1 n))))\n(newline)\n;((3 1) (3 2) (2 1))\n(load \"../1.2/smallest-divisor.scm\")\n(define (prime-sum? pair)\n    (prime? (+ (car pair) (cadr pair))))\n\n(define (flatmap proc seq)\n    (accumulate append nil (map proc seq)))\n;; [proc(seq[0]), proc(seq[1]) .....] \u307f\u305f\u3044\u306a\u306e\u304c\u51fa\u6765\u308b\uff1f\n\n(define (make-pair-sum pair)\n    (list (car pair) (cadr pair) (+ (car pair) (cadr pair))))\n\n(define (prime-sum-pairs n)\n    (map make-pair-sum\n        (filter prime-sum? (flatmap\n            (lambda (i)\n            (map (lambda (j) (list i j))\n            (enumerate-interval 1 (- i 1))))\n        (enumerate-interval 1 n)))))\n\n(display (prime-sum-pairs 3))\n(newline)\n;((3 2 5) (2 1 3))\n\n\n\nEx 2.40\n(display \"======Ex.2.40======\")\n(newline)\n;\u6574\u6570 n \u306b\u5bfe\u3057\u30011 \u2264 j < i \u2264 n \u3068\u306a\u308b\u30da\u30a2 (i, j) \u306e\n;\u5217\u3092\u751f\u6210\u3059\u308b\u624b\u7d9a\u304d unique-pairs \u3092\u5b9a\u7fa9\u305b\u3088\u3002unique-pairs \u3092\n;\u4f7f\u3063\u3066\u4e0a\u306e prime-sum-pairs \u306e\u5b9a\u7fa9\u3092\u7c21\u5358\u306b\u305b\u3088\u3002\n\n;; \u81ea\u5206\u306e\n(define (unique-pairs n)\n    (define (itr base i stack)\n        ;(print base \":\" i \"\\n\")\n        (cond \n            ((>= base n) stack)\n            ((> i n) (itr (+ base 1) (+ base 2) stack))\n            (else (itr base (+ i 1) (cons (list base i) stack)))))\n(itr 1 2 nil))\n\n(display (unique-pairs 4))\n(newline)\n;((3 4) (2 4) (2 3) (1 4) (1 3) (1 2))\n\n;(define (accumulate op initial sequence)\n(define (prime-sum-pairs n)\n    (accumulate \n        (lambda (i acc) \n            (if (prime? (+ (car i) (car (cdr i))))\n                (cons i acc)\n            acc))\n        nil\n    (unique-pairs n)))\n\n(display (prime-sum-pairs 3))\n(newline)\n;((2 3) (1 2))\n\n;; hio\u3055\u3093\u306e\n;(define (unique-pairs n)\n;    (flatmap \n;        (lambda (i) \n;                (map (lambda (j) (list i j)) (enumerate-interval 1 (- i 1))))\n;        (enumerate-interval 1 n)\n;    )\n;)\n;(display (unique-pairs 4))\n;(newline)\n;((4 1) (4 2) (4 3) (3 1) (3 2) (2 1))\n;2.41\u304c\u5c0f\u3055\u3044\u9806\u306b\u306a\u3089\u3093\u3067\u3044\u308b\u3068\u3044\u3046\u306e\u304c\u6761\u4ef6\u3068\u3057\u3066\u6e80\u305f\u3055\u306a\u3044\u3068\n;\u6b63\u3057\u3044\u6319\u52d5\u3092\u3057\u306a\u3044\u5b9f\u88c5\u3092\u3057\u3066\u3057\u307e\u3063\u305f\u305f\u3081\u3001\u30b3\u30e1\u30f3\u30c8\u30a2\u30a6\u30c8\n\n\nEx 2.41\n(display \"======Ex.2.41======\")\n(newline)\n;\u3042\u308b\u6574\u6570 n \u4ee5\u4e0b\u306e\u7570\u306a\u308b\u6b63\u306e\u6574\u6570\u304c\u5927\u5c0f\u9806\u306b\u4e26\u3093\n;\u3060\u4e09\u3064\u7d44 i, j, k \u306e\u4e2d\u3067\u3001\u5408\u8a08\u304c\u3042\u308b\u6574\u6570 s \u3068\u306a\u308b\u3082\u306e\u3059\u3079\u3066\u3092\u898b\n;\u3064\u3051\u308b\u624b\u7d9a\u304d\u3092\u66f8\u3051\u3002\n\n\n(define (first p) (car p))\n(define (second p) (car (cdr p)))\n(define (unique-tri n s)\n    (define (add-pattern p stack)\n        (define (itr p i stack)\n            ;(print p i stack)\n            (cond \n                ((> i n) stack)\n                ((>= (second p) i) (itr p (+ i 1) stack))\n                ((> (second p) n) stack)\n                (else \n                    (if \n                        (= (+ (first p) (second p) i) s)\n                        (itr p (+ i 1) (cons (list (first p) (second p) i) stack))\n                        stack))\n            )\n        )\n        (itr p 1 stack)\n    )\n\n\n    (accumulate\n        add-pattern\n        nil\n        (unique-pairs n))\n\n)\n(display \"\u308f\u305f\u3057\u306e:\")\n(display (unique-tri 5 10))(newline)\n;\u308f\u305f\u3057\u306e:((1 4 5))\n;\u5168\u30da\u30a2((3 4 5) (2 4 5) (2 3 5) (2 3 4) (1 4 5) (1 3 5) (1 3 4) (1 2 5) (1 2 4) (1 2 3))\n\n(display \"hio\u3055\u3093\u306e:\")\n(define (unique-triples n)\n    (flatmap\n        (lambda (i)\n            (flatmap\n                (lambda (j)\n                    (map\n                        (lambda (k)\n                            (list i j k))\n                        (enumerate-interval 1 (- j 1))))\n                (enumerate-interval 1 (- i 1))))\n        (enumerate-interval 1 n)))\n(display (unique-triples 5))\n(newline)\n;hio\u3055\u3093\u306e:((5 4 1) (5 4 2) (5 4 3) (5 3 1) (5 3 2) (5 2 1) (4 3 1) (4 3 2) (4 2 1) (3 2 1))\n; \u306a\u308b\u307b\u3069\u3001\u3053\u3046\u3044\u3046\u3053\u3068\u306a\u306e\u306d\uff1b\uff1b \u7d0d\u5f97\uff1b\uff1b\n\n\nEx2.42\n8Queen\n(display \"======Ex.2.42======\")\n(newline)\n\n(define (make-position row col)\n   (cons row col))\n\n(define (position-row position)\n   (car position))\n\n(define (position-col position)\n   (cdr position))\n\n(define empty-board nil)\n\n(define (queens board-size)\n    (define (queen-cols col)\n        ;(print col)\n        (if (= col 0)\n            (list empty-board)\n            (filter\n                (lambda (positions) (safe? col positions))\n                (flatmap\n                    (lambda (rest-of-queens)\n                        (map \n                            (lambda (new-row) (adjoin-position new-row col rest-of-queens)) ;;k\u3060\u3051bit\u304b\u3051\u305f\u3084\u3064\u3092\u304b\u3048\u3059\u304b\u3093\u3058\uff1f\n                            (enumerate-interval 1 board-size) ; [1...k]\n                        ))\n                    (queen-cols (- col 1))))))\n(queen-cols board-size))\n\n(define (safe? col positions) \n    (let ((kth-queen (list-ref positions (- col 1)))\n     (other-queens (filter (lambda (q)\n                             (not (= col (position-col q))))\n                           positions)))\n    (define (valid-position? p1 p2)\n        ;(print \"valid-position:\" p1 p2)\n        (not (or \n            (= (position-row p1) (position-row p2))\n            (= (position-col p1) (position-col p2))\n            (= \n                (abs (- (position-row p1) (position-col p1)))\n                (abs (- (position-row p2) (position-col p2)))))))\n\n    (define (iter queen-position board)\n     (or (null? board)\n         (and (valid-position? queen-position (car board))\n              (iter queen-position (cdr board)))))\n   (iter kth-queen other-queens))\n)\n\n(define (adjoin-position row col positions)\n    (append (list (make-position row col)) positions))\n\n(display (queens 0))\n(newline)\n\n(display (queens 4))\n(newline)\n;(((4 . 1) (1 . 2) (3 . 3) (2 . 4)) ((4 . 1) (2 . 2) (1 . 3) (3 . 4)) ((3 . 1) (2 . 2) (4 . 3) (1 . 4)) ((2 . 1) (4 . 2) (3 . 3) (1 . 4)))\n\n(display (queens 5))\n(newline)\n;(((3 . 1) (5 . 2) (2 . 3) (4 . 4) (1 . 5)) ((4 . 1) (2 . 2) (5 . 3) (3 . 4) (1 . 5)) ((5 . 1) (3 . 2) (1 . 3) (4 . 4) (2 . 5)) ((5 . 1) (2 . 2) (4 . 3) (1 . 4) (3 . 5)))\n\n\nhttp://www.billthelizard.com/2011/06/sicp-242-243-n-queens-problem.html\u3092\u53c2\u8003\u306b\u3057\u3064\u3064\u30fb\u30fb\u30fb\u3002\n\n2.42 \u3084\u308a\u306a\u304a\u3057\nScheme\u3067\u8003\u3048\u308b\u3068\u96e3\u3057\u3044\u306e\u3067\u3068\u308a\u3042\u3048\u305a\u307e\u305aPython\u3067\u304b\u3044\u305f\n\nclass QueenN():\n    def __init__(self):\n        pass\n\n    def create(self, n):\n        boards = [[-1] * n]\n        for row in range(n):\n            boards = self.add_row(row, n, boards)\n\n        print n, \"Pattern:\", len(boards)\n        for board in boards:\n            for col in board:\n                for i in xrange(n):\n                    if i == col:\n                        print \"Q\",\n                    else: \n                        print \"_\",\n                print \n            print \n\n\n    def add_row(self, row, n, boards):\n        next_boards = []\n        for board in boards:\n            for col in range(n):\n                array = board[:]\n                if self.is_safe(board, row, col):\n                    array[row] = col\n                    next_boards.append(array)\n\n        return next_boards\n\n    def is_safe(self, board, row, col):\n        # cols\n        if col in board:\n            return False\n\n        # x\n        for i in range(row):\n            if (i - board[i]) == (row - col):\n                return False\n            if abs(board[i] + i) == (row + col):\n                return False\n        return True\n\nif __name__ == '__main__':\n    queen = QueenN()\n    for i in range(3, 9):\n        queen.create(i)\n\n\n\u4e0a\u3092\u3075\u307e\u3048\u3066\u66f8\u304d\u76f4\u3057\n;; 2016/10/19 #24\n(newline)\n(print \"===Ex 2.42 \u3082\u3046\u3044\u3063\u304b\u3044===\")\n(define (queens board-size)\n    (define (queen-cols k)\n        (if (= k 0)\n            (list empty-board)\n            (filter\n                (lambda (positions) (safe? k positions))    ;; \u6e21\u3063\u3066\u304d\u305fboard\u304c\u6b63\u3057\u3044\u914d\u7f6e\u304b\n                (flatmap                                    ;; \u5168\u5217\u6319\u3057\u3066\u3001\u2191\u3092\u6e80\u305f\u3059\u3082\u306e\u3060\u3051\u6b8b\u3059\n                    (lambda (rest-of-queens)\n                        (map \n                            (lambda (new-row)\n                                (adjoin-position\n                                    new-row k rest-of-queens))  ;; \u65b0\u3057\u3044\u5217\u306b[1..8]\u3092\u8ffd\u52a0\u3057\u3066\u3001\u307f\u308b\n                        (enumerate-interval 1 board-size)   ;; [1..8]\n                        )) ;; \n                    (queen-cols (- k 1))))))                ;;\u306f\u3058\u3081\u306f()\n(queen-cols board-size))\n\n(define empty-board nil)\n(define (safe? row positions)\n    ;(print \"safe?\" positions)\n    (and\n        (not (same-col? row positions))\n        (not (slash? row positions))\n    )\n)\n\n(define (adjoin-position new-row k rest-of-queens) (append (list new-row) rest-of-queens))\n\n; \u540c\u3058\u5217\u306b\u306a\u3044\u304b\n(define (same-col? row positions)\n    (accumulate \n        (lambda (i acc) (or acc (= (list-ref positions (- row 1)) (list-ref positions i))))\n        #f \n        (enumerate-interval 0 (- row 2))\n    ))\n\n(define (test-same-col?)\n    (print \"--test (same-col? 3 (list 1 3 3)) #t\")\n    (print (same-col? 3 (list 1 3 3)))\n    (print \"--test  (same-col? 3 (list 1 3 5)) #f\")\n    (print (same-col? 3 (list 1 3 5)))\n)\n(test-same-col?)\n\n;\u53f3\u659c\u306b\u306a\u3044\u304b\n(define (slash? row positions)\n    ;(print (- row 1) \",\" (list-ref positions (- row 1)))\n    (accumulate \n        (lambda \n            (i acc) \n            ;(print i acc)\n            ;(print i \" \" (list-ref positions i) \" \"\n            ;        \" \" acc \" \" (+ (- row 1) (list-ref positions (- row 1))) \"=\" (+ i (list-ref positions i))\n            ;        \",\" (- (- row 1) (list-ref positions (- row 1))) \"=\" (- i (list-ref positions i)))\n            (or\n                acc\n                (= \n                        (+ (- row 1) (list-ref positions (- row 1))) ;; <- list-ref\u4f7f\u3046\u3068\u9045\u3044 \u9806\u756a\u306bindex\u3054\u3068\u78ba\u8a8d\u3057\u3066\u304f\u307b\u3046\u304c\u65e9\u3044\n                        (+ i (list-ref positions i))\n                )\n                (= \n                        (- (- row 1) (list-ref positions (- row 1)))\n                        (- i (list-ref positions i))\n                )\n            )\n        )\n    #f\n    (enumerate-interval 0 (- row 2)))\n)\n\n(define (test-slash?)\n    (print \"--test (slash? 3 (list 3 2 1)) #t\")\n    (print (slash? 3 (list 3 2 1)))\n    (print \"--test (slash? 3 (list 5 3 1)) #f\")\n    (print (slash? 3 (list 5 3 1)))\n    (print \"--test (slash? 2 (list 1 2)) #t\")\n    (print (slash? 2 (list 1 2)))\n    (print \"--test (slash? 2 (list 1 3)) #f\")\n    (print (slash? 2 (list 1 3)))\n    (print \"--test (slash? 3 (list 2 4 3)) #t\")\n    (print (slash? 3 (list 2 4 3))) \n)\n(test-slash?)\n\n;--test (same-col? 3 (list 1 3 3)) #t\n;#t\n;--test  (same-col? 3 (list 1 3 5)) #f\n;#f\n;--test (slash? 3 (list 3 2 1)) #t\n;#t\n;--test (slash? 3 (list 5 3 1)) #f\n;#f\n;--test (slash? 2 (list 1 2)) #t\n;#t\n;--test (slash? 2 (list 1 3)) #f\n;#f\n;--test (slash? 3 (list 2 4 3)) #t\n;#t\n\n(define (test-nqueen?)\n    (print \"1-queens: \" (length (queens 1)))\n    (print \"4-queens: \" (length (queens 4)))\n    (print \"8-queens: \" (length (queens 8)))\n)\n(test-nqueen?)\n;1-queens: 1\n;4-queens: 2\n;8-queens: 92\n(time (length (queens 8)))\n(time (length (queens 9)))\n;(time (length (queens 8)))\n; real   0.777\n; user   1.030\n; sys    0.020\n;(time (length (queens 9)))\n; real  14.940\n; user  21.090\n; sys    0.470\n;; \u9045\u3044\u539f\u56e0\u306flist-ref?\n\n\nEx 2.43\n\u65b0\u3057\u304f\u8ffd\u52a0\u3055\u308c\u305f\u884c\u3060\u3051\u3067\u306a\u304f\u3001\u6bce\u56de\u5168\u3066\u306e\u30dc\u30fc\u30c9\u306e\u4e2d\u8eab\u3092\u30c1\u30a7\u30c3\u30af\u3057\u3066\u308b\u304b\u3089\u3002\n\n# 2.2.3 \u96c6\u7a4d\n[SICP/2.2.3.scm at master \u00b7 cocodrips/SICP](https://github.com/cocodrips/SICP/blob/master/2.2/2.2.3.scm)\n\n```lisp\n(display \"*********2.2.3**********\")\n(newline)\n\n;; \u6a19\u6e96\u30a4\u30f3\u30bf\u30d5\u30a7\u30fc\u30b9\n;; \u5947\u6570\u306e\u8449\u306e\u4e8c\u4e57\u306e\u5408\u8a08\u3092\u8a08\u7b97\n(define (sum-odd-squares tree)\n    (cond \n        ((null? tree) 0)\n        ((not (pair? tree))\u3000(if (odd? tree) (square tree) 0))\n    (else \n        (+ (sum-odd-squares (car tree))\n    (sum-odd-squares (cdr tree))))))\n\n;;by @hio\u3055\u3093\n; p.40, 1.2.2 \u6728\u306e\u518d\u5e30\n(define (fib n)\n    (define (iter a b count)\n        (if\n            (= count 0)\n            b\n            (iter (+ a b) a (- count 1))))\n    (iter 1 0 n))\n\n;; \u30d5\u30a3\u30dc\u30ca\u30c3\u30c1\u6570\u306e\u3046\u3061\u3001\u5076\u6570\u306e\u3082\u306e\u3092\u304b\u3048\u3059\u30ea\u30b9\u30c8\u3092\u69cb\u7bc9\u3059\u308b\n(define (even-fibs n)\n    (define (next k)\n        (if (> k n)\n            ()\n            (let ((f (fib k)))\n                (if \n                    (even? f)\n                    (cons f (next (+ k 1)))\n                    (next (+ k 1))))))\n(next 0))\n(display (even-fibs 10))\n(newline)\n;(0 2 8 34)\n\n;; Filter\n(define (filter predicate sequence)\n    (cond \n        ((null? sequence) ())\n        ((predicate (car sequence)) \n            (cons (car sequence)\n            (filter predicate (cdr sequence))))\n    (else (filter predicate (cdr sequence)))))\n\n(display (filter odd? (list 1 2 3 4 5)))\n(newline)\n\n;; \u96c6\u7a4d\u3000accumulate\n(define (accumulate op initial sequence)\n    (if \n        (null? sequence)\n        initial\n        (op (car sequence) (accumulate op initial (cdr sequence)))))\n\n(display (accumulate + 0 (list 1 2 3 4 5)))(newline)\n;15\n(display (accumulate * 1 (list 1 2 3 4 5)))(newline)\n;120\n(display (accumulate cons () (list 1 2 3 4 5)))(newline)\n\n;(1 2 3 4 5)\n```\n\n\u3088\u304f\u308f\u304b\u3089\u306a\u304f\u306a\u308b\u306e\u3067\u30e1\u30e2\uff1a\n## accumulate\n\n```\n(accumulate f(array[i], \u4eca\u307e\u3067\u306eaccumulate\u7d50\u679c) \u521d\u671f\u5024 array) \n-> \u521d\u671f\u5024\u306bmerge\u3055\u308c\u3066\u304f\n```\n\n## map\n\n```\n(map f(array[i]) array)\n-> \u914d\u5217\u304c\u8fd4\u308b\n```\n\n## 2.33\n\n```lisp\n(display \"======Ex.2.33======\")\n(newline)\n;\u7df4\u7fd2\u554f\u984c 2.33: \u57fa\u672c\u7684\u306a\u30ea\u30b9\u30c8\u64cd\u4f5c\u306e\u3044\u304f\u3064\u304b\u3092\u96c6\u7a4d\u3068\u3057\u3066\u5b9a\u7fa9\n;\u3057\u305f\u3082\u306e\u3092\u4ee5\u4e0b\u306b\u793a\u3059\u3002\u6b20\u3051\u3066\u3044\u308b\u5f0f\u3092\u57cb\u3081\u3066\u3001\u5b8c\u6210\u3055\u305b\u3088\u3002\n\n(define (map p sequence)\n    (accumulate (lambda (x y) (cons (p x) y)) () sequence))\n\n(define (double x)\n   (* 2 x))\n(display (map double (list 1 2 3 4 5))) \n(newline)\n;(2 4 6 8 10)\n\n(define (append seq1 seq2)\n    (accumulate cons seq1 seq2))\n(display (append (list 1 2 3) (list 4 5 8))) \n(newline)\n;(4 5 8 1 2 3)\n(define (length sequence)\n    (accumulate (lambda (_ x) (+ x 1)) 0 sequence))\n(display (length (list 1 2 3)) )\n(newline)\n;3\n```\n\n## 2.34\n\n```lisp\n(display \"======Ex.2.34======\")\n(newline)\n\n(define (horner-eval x coefficient-sequence)\n    (accumulate\n        (lambda (this-coeff higher-terms) (+ (* higher-terms x) this-coeff))\n        0\n        coefficient-sequence))\n\n(display (horner-eval 2 (list 1 3 0 5 0 1)))\n;; 79\n```\n\n\n## Ex 2.35\n```lisp\n(display \"======Ex.2.35======\")\n(newline)\n\n(define (count-leaves t)\n    (accumulate + 0 (map (lambda (x) 1) (enumerate-tree t))))\n\n(define tree (cons (list 1 2) (list 3 4)))\n(display (count-leaves tree))\n(newline)\n; 4\n\n(define tree (cons (list 1 2) (list 3 4 5)))\n(display (count-leaves tree))\n(newline)\n;5\n```\n\n@hio\u3055\u3093\u306e\u5b9f\u88c5\uff5c\u518d\u5e30\u7684\u306b\u8db3\u3057\u3066\u304f\u2028\n\n```lisp\n(define (count-leaves t)\n    (accumulate\n        +\n        0\n        (map\n            (lambda (x)\n                (if\n                    (pair? x)\n                    (count-leaves x)\n                    1))\n            t)))\n```\n\n\n## Ex 2.36\n\n```lisp\n(display \"======Ex.2.36======\")\n(newline)\n\n(define (accumulate-n op init seqs)\n(if (null? (car seqs))\n    nil\n    (cons (accumulate op init (map car seqs)) (accumulate-n op init (map cdr seqs)))))\n\n\n(define s (list (list 1 2 3) (list 4 5 6) (list 7 8 9) (list 10 11 12)))\n(display (accumulate-n + 0 s))\n```\n\n\n## Ex 2.37\n\n```lisp\n(display \"======Ex.2.37======\")\n(newline)\n\n;(define (map proc items)\n;    (if (null? items)\n;    nil\n;    (cons (proc (car items)) (map proc (cdr items)))))\n(define (dot-product v w)\n    (accumulate + 0 (_map * v w)))\n\n(define m1 (list (list 1 2 3 4) (list 4 5 6 7)))\n(define v1 (list 1 2))\n(define v2 (list 10 20))\n\n\n(display (dot-product v1 v2)) \n(newline)\n;50\n\n(define (matrix-*-vector m v)\n    (_map (lambda (m_i) (dot-product m_i v)) m)) ;; By @hio\u3055\u3093\n\n(display (matrix-*-vector m1 v2))\n(newline)\n;(50 140)\n\n\n(define (transpose mat)\n    (accumulate-n cons nil mat))\n(display (transpose m1))\n(newline)\n;((1 4) (2 5) (3 6) (4 7))\n\n\n;(define (matrix-*-matrix m n)\n;(let ((cols (transpose n)))\n;(map \u27e8??\u27e9 m)))\n;cols???\n```\n\n## Ex 2.38\n```lisp\n(display \"======Ex.2.38======\")\n(newline)\n\n;\u7df4\u7fd2\u554f\u984c 2.38: accumulate \u624b\u7d9a\u304d\u306f\u3001\u5217\u306e\u6700\u521d\u306e\u8981\u7d20\u3068\u3001\u53f3\u306e\n;\u3059\u3079\u3066\u306e\u8981\u7d20\u3092\u7d44\u307f\u5408\u308f\u305b\u305f\u7d50\u679c\u3068\u3092\u7d44\u307f\u5408\u308f\u305b\u308b\u305f\u3081\u3001foldright\n;\u3068\u3057\u3066\u3082\u77e5\u3089\u308c\u3066\u3044\u308b\u3002fold-left \u3068\u3044\u3046\u3082\u306e\u3082\u3042\u308a\u3001\u3053\u308c\n;\u306f fold-right \u306b\u4f3c\u3066\u3044\u308b\u304c\u3001\u8981\u7d20\u306e\u7d44\u307f\u5408\u308f\u305b\u3092\u9006\u65b9\u5411\u306b\u884c\u3046\u3068\n;\u3044\u3046\u70b9\u304c\u9055\u3046\u3002\n(define (accumulate op initial sequence)\n    (if (null? sequence)\n        initial\n        (op (car sequence) (accumulate op initial (cdr sequence)))))\n\n(define fold-right accumulate)\n\n(define (fold-left op initial sequence)\n    (define (iter result rest)\n        (if (null? rest)\n            result\n        (iter (op result (car rest))\n            (cdr rest))))\n(iter initial sequence))\n\n(display (fold-right / 1 (list 1 2 3)))     (newline) \n; (/ 1 (/ 2 (/ 3 1)))\n; 2 / 3\n(display (fold-left / 1 (list 1 2 3)))      (newline)\n; (/ (/ (/ 1 2) 2 ) 3)\n\n(display (fold-right list nil (list 1 2 3)))(newline)\n;(1 (2 (3 ())))\n(display (fold-left list nil (list 1 2 3))) (newline)\n;(((() 1) 2) 3)\n\n;; \u53ef\u63db\u306a\u6f14\u7b97\u306a\u3089right/fold-left\u3067\u7d50\u679c\u304c\u304a\u306a\u3058\u306b\u306a\u308b\n```\n\n## Ex 2.39\n```lisp\n(display \"======Ex.2.39======\")\n(newline)\n;\u7df4\u7fd2\u554f\u984c 2.39: \u4ee5\u4e0b\u306e reverse(\u7df4\u7fd2\u554f\u984c 2.18) \u624b\u7d9a\u304d\u306e\u5b9a\u7fa9\u3092\u3001\u7df4\n;\u7fd2\u554f\u984c 2.38\u306e fold-right \u3068 fold-left \u306b\u3088\u3063\u3066\u5b8c\u6210\u3055\u305b\u3088\u3002\n(define (reverse sequence)\n    (fold-right (lambda (x y) (append (list x) y)) (list) sequence))\n\n(define l (list 1 3 5))\n(display (reverse l))\n(newline)\n;(5 3 1)\n\n(define (reverse sequence)\n    (fold-left (lambda (x y) (cons y x)) nil sequence))\n(display (reverse l))\n(newline)\n;(5 3 1)\n```\n\n## \u30de\u30c3\u30d7\u306e\u30cd\u30b9\u30c8\n\n```lisp\n\n;; \u30de\u30c3\u30d7\u306e\u30cd\u30b9\u30c8\n(define (enumerate-interval low high)\n    (if \n        (> low high)\n        nil\n    (cons low (enumerate-interval (+ low 1) high))))\n(display (enumerate-interval 2 7))\n(newline)\n\n\n(define n 3)\n(display (accumulate\n    append nil (map (lambda (i)\n        (map (lambda (j) (list i j))\n            (enumerate-interval 1 (- i 1))))\n        (enumerate-interval 1 n))))\n(newline)\n;((3 1) (3 2) (2 1))\n(load \"../1.2/smallest-divisor.scm\")\n(define (prime-sum? pair)\n    (prime? (+ (car pair) (cadr pair))))\n\n(define (flatmap proc seq)\n    (accumulate append nil (map proc seq)))\n;; [proc(seq[0]), proc(seq[1]) .....] \u307f\u305f\u3044\u306a\u306e\u304c\u51fa\u6765\u308b\uff1f\n    \n(define (make-pair-sum pair)\n    (list (car pair) (cadr pair) (+ (car pair) (cadr pair))))\n\n(define (prime-sum-pairs n)\n    (map make-pair-sum\n        (filter prime-sum? (flatmap\n            (lambda (i)\n            (map (lambda (j) (list i j))\n            (enumerate-interval 1 (- i 1))))\n        (enumerate-interval 1 n)))))\n\n(display (prime-sum-pairs 3))\n(newline)\n;((3 2 5) (2 1 3))\n\n```\n\n## Ex 2.40\n\n```lisp\n(display \"======Ex.2.40======\")\n(newline)\n;\u6574\u6570 n \u306b\u5bfe\u3057\u30011 \u2264 j < i \u2264 n \u3068\u306a\u308b\u30da\u30a2 (i, j) \u306e\n;\u5217\u3092\u751f\u6210\u3059\u308b\u624b\u7d9a\u304d unique-pairs \u3092\u5b9a\u7fa9\u305b\u3088\u3002unique-pairs \u3092\n;\u4f7f\u3063\u3066\u4e0a\u306e prime-sum-pairs \u306e\u5b9a\u7fa9\u3092\u7c21\u5358\u306b\u305b\u3088\u3002\n\n;; \u81ea\u5206\u306e\n(define (unique-pairs n)\n    (define (itr base i stack)\n        ;(print base \":\" i \"\\n\")\n        (cond \n            ((>= base n) stack)\n            ((> i n) (itr (+ base 1) (+ base 2) stack))\n            (else (itr base (+ i 1) (cons (list base i) stack)))))\n(itr 1 2 nil))\n\n(display (unique-pairs 4))\n(newline)\n;((3 4) (2 4) (2 3) (1 4) (1 3) (1 2))\n\n;(define (accumulate op initial sequence)\n(define (prime-sum-pairs n)\n    (accumulate \n        (lambda (i acc) \n            (if (prime? (+ (car i) (car (cdr i))))\n                (cons i acc)\n            acc))\n        nil\n    (unique-pairs n)))\n\n(display (prime-sum-pairs 3))\n(newline)\n;((2 3) (1 2))\n\n;; hio\u3055\u3093\u306e\n;(define (unique-pairs n)\n;    (flatmap \n;        (lambda (i) \n;                (map (lambda (j) (list i j)) (enumerate-interval 1 (- i 1))))\n;        (enumerate-interval 1 n)\n;    )\n;)\n;(display (unique-pairs 4))\n;(newline)\n;((4 1) (4 2) (4 3) (3 1) (3 2) (2 1))\n;2.41\u304c\u5c0f\u3055\u3044\u9806\u306b\u306a\u3089\u3093\u3067\u3044\u308b\u3068\u3044\u3046\u306e\u304c\u6761\u4ef6\u3068\u3057\u3066\u6e80\u305f\u3055\u306a\u3044\u3068\n;\u6b63\u3057\u3044\u6319\u52d5\u3092\u3057\u306a\u3044\u5b9f\u88c5\u3092\u3057\u3066\u3057\u307e\u3063\u305f\u305f\u3081\u3001\u30b3\u30e1\u30f3\u30c8\u30a2\u30a6\u30c8\n```\n\n## Ex 2.41\n\n```lisp\n(display \"======Ex.2.41======\")\n(newline)\n;\u3042\u308b\u6574\u6570 n \u4ee5\u4e0b\u306e\u7570\u306a\u308b\u6b63\u306e\u6574\u6570\u304c\u5927\u5c0f\u9806\u306b\u4e26\u3093\n;\u3060\u4e09\u3064\u7d44 i, j, k \u306e\u4e2d\u3067\u3001\u5408\u8a08\u304c\u3042\u308b\u6574\u6570 s \u3068\u306a\u308b\u3082\u306e\u3059\u3079\u3066\u3092\u898b\n;\u3064\u3051\u308b\u624b\u7d9a\u304d\u3092\u66f8\u3051\u3002\n\n\n(define (first p) (car p))\n(define (second p) (car (cdr p)))\n(define (unique-tri n s)\n    (define (add-pattern p stack)\n        (define (itr p i stack)\n            ;(print p i stack)\n            (cond \n                ((> i n) stack)\n                ((>= (second p) i) (itr p (+ i 1) stack))\n                ((> (second p) n) stack)\n                (else \n                    (if \n                        (= (+ (first p) (second p) i) s)\n                        (itr p (+ i 1) (cons (list (first p) (second p) i) stack))\n                        stack))\n            )\n        )\n        (itr p 1 stack)\n    )\n\n\n    (accumulate\n        add-pattern\n        nil\n        (unique-pairs n))\n\n)\n(display \"\u308f\u305f\u3057\u306e:\")\n(display (unique-tri 5 10))(newline)\n;\u308f\u305f\u3057\u306e:((1 4 5))\n;\u5168\u30da\u30a2((3 4 5) (2 4 5) (2 3 5) (2 3 4) (1 4 5) (1 3 5) (1 3 4) (1 2 5) (1 2 4) (1 2 3))\n\n(display \"hio\u3055\u3093\u306e:\")\n(define (unique-triples n)\n    (flatmap\n        (lambda (i)\n            (flatmap\n                (lambda (j)\n                    (map\n                        (lambda (k)\n                            (list i j k))\n                        (enumerate-interval 1 (- j 1))))\n                (enumerate-interval 1 (- i 1))))\n        (enumerate-interval 1 n)))\n(display (unique-triples 5))\n(newline)\n;hio\u3055\u3093\u306e:((5 4 1) (5 4 2) (5 4 3) (5 3 1) (5 3 2) (5 2 1) (4 3 1) (4 3 2) (4 2 1) (3 2 1))\n; \u306a\u308b\u307b\u3069\u3001\u3053\u3046\u3044\u3046\u3053\u3068\u306a\u306e\u306d\uff1b\uff1b \u7d0d\u5f97\uff1b\uff1b\n```\n\n## Ex2.42\n8Queen\n\n```lisp\n(display \"======Ex.2.42======\")\n(newline)\n\n(define (make-position row col)\n   (cons row col))\n\n(define (position-row position)\n   (car position))\n\n(define (position-col position)\n   (cdr position))\n\n(define empty-board nil)\n\n(define (queens board-size)\n    (define (queen-cols col)\n        ;(print col)\n        (if (= col 0)\n            (list empty-board)\n            (filter\n                (lambda (positions) (safe? col positions))\n                (flatmap\n                    (lambda (rest-of-queens)\n                        (map \n                            (lambda (new-row) (adjoin-position new-row col rest-of-queens)) ;;k\u3060\u3051bit\u304b\u3051\u305f\u3084\u3064\u3092\u304b\u3048\u3059\u304b\u3093\u3058\uff1f\n                            (enumerate-interval 1 board-size) ; [1...k]\n                        ))\n                    (queen-cols (- col 1))))))\n(queen-cols board-size))\n\n(define (safe? col positions) \n    (let ((kth-queen (list-ref positions (- col 1)))\n     (other-queens (filter (lambda (q)\n                             (not (= col (position-col q))))\n                           positions)))\n    (define (valid-position? p1 p2)\n        ;(print \"valid-position:\" p1 p2)\n        (not (or \n            (= (position-row p1) (position-row p2))\n            (= (position-col p1) (position-col p2))\n            (= \n                (abs (- (position-row p1) (position-col p1)))\n                (abs (- (position-row p2) (position-col p2)))))))\n\n    (define (iter queen-position board)\n     (or (null? board)\n         (and (valid-position? queen-position (car board))\n              (iter queen-position (cdr board)))))\n   (iter kth-queen other-queens))\n)\n\n(define (adjoin-position row col positions)\n    (append (list (make-position row col)) positions))\n\n(display (queens 0))\n(newline)\n\n(display (queens 4))\n(newline)\n;(((4 . 1) (1 . 2) (3 . 3) (2 . 4)) ((4 . 1) (2 . 2) (1 . 3) (3 . 4)) ((3 . 1) (2 . 2) (4 . 3) (1 . 4)) ((2 . 1) (4 . 2) (3 . 3) (1 . 4)))\n\n(display (queens 5))\n(newline)\n;(((3 . 1) (5 . 2) (2 . 3) (4 . 4) (1 . 5)) ((4 . 1) (2 . 2) (5 . 3) (3 . 4) (1 . 5)) ((5 . 1) (3 . 2) (1 . 3) (4 . 4) (2 . 5)) ((5 . 1) (2 . 2) (4 . 3) (1 . 4) (3 . 5)))\n\n```\n\n[http://www.billthelizard.com/2011/06/sicp-242-243-n-queens-problem.html](http://www.billthelizard.com/2011/06/sicp-242-243-n-queens-problem.html)\u3092\u53c2\u8003\u306b\u3057\u3064\u3064\u30fb\u30fb\u30fb\u3002\n\n## 2.42 \u3084\u308a\u306a\u304a\u3057\n\nScheme\u3067\u8003\u3048\u308b\u3068\u96e3\u3057\u3044\u306e\u3067\u3068\u308a\u3042\u3048\u305a\u307e\u305aPython\u3067\u304b\u3044\u305f\n\n```python\n\nclass QueenN():\n    def __init__(self):\n        pass\n\n    def create(self, n):\n        boards = [[-1] * n]\n        for row in range(n):\n            boards = self.add_row(row, n, boards)\n\n        print n, \"Pattern:\", len(boards)\n        for board in boards:\n            for col in board:\n                for i in xrange(n):\n                    if i == col:\n                        print \"Q\",\n                    else: \n                        print \"_\",\n                print \n            print \n\n\n    def add_row(self, row, n, boards):\n        next_boards = []\n        for board in boards:\n            for col in range(n):\n                array = board[:]\n                if self.is_safe(board, row, col):\n                    array[row] = col\n                    next_boards.append(array)\n\n        return next_boards\n\n    def is_safe(self, board, row, col):\n        # cols\n        if col in board:\n            return False\n\n        # x\n        for i in range(row):\n            if (i - board[i]) == (row - col):\n                return False\n            if abs(board[i] + i) == (row + col):\n                return False\n        return True\n        \nif __name__ == '__main__':\n    queen = QueenN()\n    for i in range(3, 9):\n        queen.create(i)\n\n```\n\n\u4e0a\u3092\u3075\u307e\u3048\u3066\u66f8\u304d\u76f4\u3057\n\n```lisp\n;; 2016/10/19 #24\n(newline)\n(print \"===Ex 2.42 \u3082\u3046\u3044\u3063\u304b\u3044===\")\n(define (queens board-size)\n    (define (queen-cols k)\n        (if (= k 0)\n            (list empty-board)\n            (filter\n                (lambda (positions) (safe? k positions))    ;; \u6e21\u3063\u3066\u304d\u305fboard\u304c\u6b63\u3057\u3044\u914d\u7f6e\u304b\n                (flatmap                                    ;; \u5168\u5217\u6319\u3057\u3066\u3001\u2191\u3092\u6e80\u305f\u3059\u3082\u306e\u3060\u3051\u6b8b\u3059\n                    (lambda (rest-of-queens)\n                        (map \n                            (lambda (new-row)\n                                (adjoin-position\n                                    new-row k rest-of-queens))  ;; \u65b0\u3057\u3044\u5217\u306b[1..8]\u3092\u8ffd\u52a0\u3057\u3066\u3001\u307f\u308b\n                        (enumerate-interval 1 board-size)   ;; [1..8]\n                        )) ;; \n                    (queen-cols (- k 1))))))                ;;\u306f\u3058\u3081\u306f()\n(queen-cols board-size))\n\n(define empty-board nil)\n(define (safe? row positions)\n    ;(print \"safe?\" positions)\n    (and\n        (not (same-col? row positions))\n        (not (slash? row positions))\n    )\n)\n\n(define (adjoin-position new-row k rest-of-queens) (append (list new-row) rest-of-queens))\n\n; \u540c\u3058\u5217\u306b\u306a\u3044\u304b\n(define (same-col? row positions)\n    (accumulate \n        (lambda (i acc) (or acc (= (list-ref positions (- row 1)) (list-ref positions i))))\n        #f \n        (enumerate-interval 0 (- row 2))\n    ))\n\n(define (test-same-col?)\n    (print \"--test (same-col? 3 (list 1 3 3)) #t\")\n    (print (same-col? 3 (list 1 3 3)))\n    (print \"--test  (same-col? 3 (list 1 3 5)) #f\")\n    (print (same-col? 3 (list 1 3 5)))\n)\n(test-same-col?)\n\n;\u53f3\u659c\u306b\u306a\u3044\u304b\n(define (slash? row positions)\n    ;(print (- row 1) \",\" (list-ref positions (- row 1)))\n    (accumulate \n        (lambda \n            (i acc) \n            ;(print i acc)\n            ;(print i \" \" (list-ref positions i) \" \"\n            ;        \" \" acc \" \" (+ (- row 1) (list-ref positions (- row 1))) \"=\" (+ i (list-ref positions i))\n            ;        \",\" (- (- row 1) (list-ref positions (- row 1))) \"=\" (- i (list-ref positions i)))\n            (or\n                acc\n                (= \n                        (+ (- row 1) (list-ref positions (- row 1))) ;; <- list-ref\u4f7f\u3046\u3068\u9045\u3044 \u9806\u756a\u306bindex\u3054\u3068\u78ba\u8a8d\u3057\u3066\u304f\u307b\u3046\u304c\u65e9\u3044\n                        (+ i (list-ref positions i))\n                )\n                (= \n                        (- (- row 1) (list-ref positions (- row 1)))\n                        (- i (list-ref positions i))\n                )\n            )\n        )\n    #f\n    (enumerate-interval 0 (- row 2)))\n)\n\n(define (test-slash?)\n    (print \"--test (slash? 3 (list 3 2 1)) #t\")\n    (print (slash? 3 (list 3 2 1)))\n    (print \"--test (slash? 3 (list 5 3 1)) #f\")\n    (print (slash? 3 (list 5 3 1)))\n    (print \"--test (slash? 2 (list 1 2)) #t\")\n    (print (slash? 2 (list 1 2)))\n    (print \"--test (slash? 2 (list 1 3)) #f\")\n    (print (slash? 2 (list 1 3)))\n    (print \"--test (slash? 3 (list 2 4 3)) #t\")\n    (print (slash? 3 (list 2 4 3))) \n)\n(test-slash?)\n\n;--test (same-col? 3 (list 1 3 3)) #t\n;#t\n;--test  (same-col? 3 (list 1 3 5)) #f\n;#f\n;--test (slash? 3 (list 3 2 1)) #t\n;#t\n;--test (slash? 3 (list 5 3 1)) #f\n;#f\n;--test (slash? 2 (list 1 2)) #t\n;#t\n;--test (slash? 2 (list 1 3)) #f\n;#f\n;--test (slash? 3 (list 2 4 3)) #t\n;#t\n\n(define (test-nqueen?)\n    (print \"1-queens: \" (length (queens 1)))\n    (print \"4-queens: \" (length (queens 4)))\n    (print \"8-queens: \" (length (queens 8)))\n)\n(test-nqueen?)\n;1-queens: 1\n;4-queens: 2\n;8-queens: 92\n(time (length (queens 8)))\n(time (length (queens 9)))\n;(time (length (queens 8)))\n; real   0.777\n; user   1.030\n; sys    0.020\n;(time (length (queens 9)))\n; real  14.940\n; user  21.090\n; sys    0.470\n;; \u9045\u3044\u539f\u56e0\u306flist-ref?\n```\n\n## Ex 2.43\n\n\u65b0\u3057\u304f\u8ffd\u52a0\u3055\u308c\u305f\u884c\u3060\u3051\u3067\u306a\u304f\u3001\u6bce\u56de\u5168\u3066\u306e\u30dc\u30fc\u30c9\u306e\u4e2d\u8eab\u3092\u30c1\u30a7\u30c3\u30af\u3057\u3066\u308b\u304b\u3089\u3002\n"}