{"tags": ["FreeType", "OpenCV"], "context": "Advent Calendar \u306b\u3059\u308b\u307b\u3069\u3067\u3082\u306a\u3044\u306e\u3067\u3001FreeType\u3092OpenCV\u4e0a\u3067\u4f7f\u3046\u30b5\u30f3\u30d7\u30eb\u3092\u8f09\u305b\u3066\u304a\u304f\u3002\n\n\n\u6750\u6599\n\nTrueType Font\nOpenCV\nFreeType\n\n\u4eca\u56de\u306f\u3001http://mplus-fonts.osdn.jp/ \u69d8\u306e https://ja.osdn.net/projects/mplus-fonts/releases/62344 \u304b\u3089 mplus-TESTFLIGHT-062.tar.xz \u3092\u4f7f\u3044\u307e\u3057\u305f\u3002\n\n\n\u3057\u305f\u3054\u3057\u3089\u3048\n\uff08\u3084\u3089\u306a\u304f\u3066\u3082\u3044\u3044\uff09\n\u30d5\u30a9\u30f3\u30c8\u30c7\u30fc\u30bf\u3092\u6bce\u56de\u30ed\u30fc\u30c9\u3059\u308b\u30ed\u30b8\u30c3\u30af\u3092\u4f5c\u3063\u3066\u3082\u3044\u3044\u3002\n\u3060\u3051\u3069\u3001\u5c06\u6765\u7684\u306bOpenCV\u306e\u30e9\u30a4\u30d6\u30e9\u30ea\u306b\u7d44\u307f\u8fbc\u3080\u524d\u63d0\u3067\u30e9\u30a4\u30d6\u30e9\u30ea\u306b\u53d6\u308a\u8fbc\u3080\u3053\u3068\u3082\u8a66\u4f5c\u3057\u3066\u304a\u3053\u3046\u3068\u601d\u3046\u3002\n$ xxd -i mplus-1c-thin.ttf > fontdata.c\n\n\n\u5b9f\u884c\u7d50\u679c\n\uff1c\u4fee\u6b63\u5f8c\uff1e\n\n\uff1c\u4fee\u6b63\u524d\uff1e\n\n\n\n\u4fee\u6b63(2016/11/7)\n        gPos.y = gPos.y - ( mface->glyph->metrics.horiBearingY >> 6) ;\n+       gPos.x = gPos.x + ( mface->glyph->metrics.horiBearingX >> 6) ;\n\n-                      ptr[ org.x + col * 8 + (7 - bit) ][0] = color[0];\n-                      ptr[ org.x + col * 8 + (7 - bit) ][1] = color[1];\n-                      ptr[ org.x + col * 8 + (7 - bit) ][2] = color[2];\n+                      ptr[ gPos.x + col * 8 + (7 - bit) ][0] = color[0];\n+                      ptr[ gPos.x + col * 8 + (7 - bit) ][1] = color[1];\n+                      ptr[ gPos.x + col * 8 + (7 - bit) ][2] = color[2];\n\n-           c  = ( ((unsigned char)text[i  ] << 18 ) & 0x700C0 ) |\n+           c  = ( ((unsigned char)text[i  ] << 18 ) & 0x70000 ) |\n                 ( ((unsigned char)text[i+1] << 12 ) &  0xF000 ) |\n                 ( ((unsigned char)text[i+2] <<  6 ) &  0x0FC0 ) |\n                 ( ((unsigned char)text[i+3] <<  0 ) &  0x003F ) ;\n\n\n\n\u3053\u3093\u306a\u611f\u3058\nall : a.out\n\nfontdata.cpp.o : fontdata.h fontdata.cpp Makefile\n    g++ -c fontdata.cpp -o fontdata.cpp.o\n\nmain.cpp.o : fontdata.h main.cpp Makefile\n    g++ -g -c main.cpp -o main.cpp.o `pkg-config freetype2 opencv --cflags --libs`\n\na.out : fontdata.cpp.o main.cpp.o\n    g++ fontdata.cpp.o main.cpp.o -o a.out `pkg-config freetype2 opencv --cflags --libs`\n\n\nfontdata.h\n#ifndef FONTDATA_H\n#define FONTDATA\nextern unsigned int mplus_1c_thin_ttf_len;\nextern unsigned char mplus_1c_thin_ttf[];\n#endif\n\n\n\nmain.c\n#include <iostream>\n#include <fstream>\n#include <string>\n#include <cmath>\n#include \"fontdata.h\"\n#include <ft2build.h>\n#include <freetype/freetype.h>\n#include <freetype/ftoutln.h>\n\n#include <opencv2/opencv.hpp>\n#include <opencv2/imgproc.hpp>\n\nusing namespace cv;\n\nclass FreeTypeWrapper{\nprivate:\n    FT_Library mlibrary;\n    FT_Face    mface;\n\n    /** \n     *\n     */\n    void readNextCode(FT_Long &c, int &i, const String &text )\n    {\n        unsigned char t1 = (unsigned char) text[i];\n        if( t1 >= 0xF0) //4 bytes utf\n        {\n            c  = ( ((unsigned char)text[i  ] << 18 ) & 0x70000 ) |\n                 ( ((unsigned char)text[i+1] << 12 ) &  0xF000 ) |\n                 ( ((unsigned char)text[i+2] <<  6 ) &  0x0FC0 ) |\n                 ( ((unsigned char)text[i+3] <<  0 ) &  0x003F ) ;\n            i+=4;\n        }\n        else if( t1 >= 0xE0) //3 bytes utf\n        {\n            c  = ( ((unsigned char)text[i  ] << 12 ) & 0xF000 ) |\n                 ( ((unsigned char)text[i+1] <<  6 ) & 0x0FC0 ) |\n                 ( ((unsigned char)text[i+2] <<  0 ) & 0x003F ) ;\n            i+=3;\n        }\n        else if( t1 >= 0xC2) //2 bytes utf\n        {\n            c  = ( ((unsigned char)text[i  ] <<  6 ) & 0x0FC0 ) |\n                 ( ((unsigned char)text[i+1] <<  0 ) & 0x003F ) ;\n            i+=2;\n        }\n        else if(t1 > 0 )//1 bytes utf\n        {\n            c  = text[i];\n            i+=1;\n        }else{\n            c = '?';\n            i++;\n        }\n    }\n\npublic:\n    FreeTypeWrapper(){\n        FT_Init_FreeType(&mlibrary);\n    FT_New_Memory_Face(mlibrary, \n                       mplus_1c_thin_ttf, \n                       mplus_1c_thin_ttf_len, 0, &mface ); \n    }\n    ~FreeTypeWrapper(){\n    // \u5f8c\u51e6\u7406\n    FT_Done_FreeType(mlibrary);\n    }\n\npublic:\nvoid putText(InputOutputArray _img, const String& text, Point org,\n              double fontScale, Scalar color,\n              bool bottomLeftOrigin )\n{\n\n    if ( text.empty() )\n    {\n        return;\n    }\n\n    FT_Set_Pixel_Sizes( mface, fontScale, fontScale );\n\n    cv::Mat img = _img.getMat();\n\n    for( int i = 0 ; text[i] != '\\0' ; ){\n        FT_Long c;\n        readNextCode(c, i, text );\n        FT_Load_Char(mface, c, 0 ); \n        FT_Render_Glyph( mface->glyph, FT_RENDER_MODE_MONO );\n        FT_Bitmap    *bmp = &(mface->glyph->bitmap);\n\n        Point gPos = org;\n        gPos.y = gPos.y - ( mface->glyph->metrics.horiBearingY >> 6) ;\n        gPos.x = gPos.x + ( mface->glyph->metrics.horiBearingX >> 6) ;\n        int row, col, bit, cl;\n\n        for (row = 0; row < bmp->rows; row ++) {\n            if( gPos.y + row > img.rows ) { continue; }\n            cv::Vec3b* ptr = img.ptr<cv::Vec3b>( gPos.y + row );\n            for (col = 0; col < bmp->pitch; col ++) {\n                cl = bmp->buffer[ row * bmp->pitch + col ];\n                for(bit = 7; bit >= 0; bit -- ){\n                    if ( gPos.x + col * 8 + (7 - bit) > img.cols ) { continue; }\n                    if ( (cl >> bit) & 0x01 == 1 ) {\n                       ptr[ gPos.x + col * 8 + (7 - bit) ][0] = color[0];\n                       ptr[ gPos.x + col * 8 + (7 - bit) ][1] = color[1];\n                       ptr[ gPos.x + col * 8 + (7 - bit) ][2] = color[2];\n                    }\n                }\n            }\n        }\n        org.x += ( mface->glyph->advance.x ) >> 6;\n        org.y += ( mface->glyph->advance.y ) >> 6;\n    }\n\n}\n\n};\nint main()\n{\n    cv::Mat src = cv::Mat( 480, 640, CV_8UC3 );\n    FreeTypeWrapper ftw;\n    ftw.putText(src, \"ABCDEFGHIJKLMNOPRSTUVWXYZ\",  Point(0,16), 16, Scalar(255,255,255), false );\n    ftw.putText(src, \"ABCDEFGHIJKLMNOPRSTUVWXYZ\",  Point(0,40), 24, Scalar(255,255,255), false );\n    ftw.putText(src, \"ABCDEFGHIJKLMNOPRSTUVWXYZ,\", Point(0,64), 32, Scalar(255,255,255), false );\n    ftw.putText(src, \"\u3044\u308d\u306f\u306b\u307b\u3078\u3068\",             Point(0,120), 16, Scalar(255,255,255), false );\n    ftw.putText(src, \"Happy New Year !!!!!!!!!!\",  Point(0,150), 24, Scalar(255,255,255), false );\n    ftw.putText(src, \"\u30d1\u30d5\u30a9\u30fc\u30de\u30f3\u30b9\u3068\u304b\u306f\u4efb\u305b\u305f\", Point(0,210), 32, Scalar(255,255,255), false );\n    ftw.putText(src, \"\u3053\u3093\u306a\u611f\u3058\u3067\u4f7f\u3048\u307e\u3059\",       Point(0,250), 32, Scalar(255,255,255), false );\n    ftw.putText(src, \"\u8d64\",                         Point(0,300), 32, Scalar(  0,  0,255), false );\n    ftw.putText(src, \"\u9752\",                         Point(32,300), 32, Scalar(255,  0, 0), false );\n    ftw.putText(src, \"\u7dd1\",                         Point(64,300), 32, Scalar( 0, 255, 0), false );\n    cv::imwrite(\"a.png\", src);\n}\n\n\n\nfontdata.c\n#include \"fontdata.h\"\n\nunsigned char mplus_1c_thin_ttf[] = {\n  0x00, 0x01, 0x00, 0x00, 0x00, 0x15, 0x01, 0x00, 0x00, 0x04, 0x00, 0x50,\n...\n...\n...\n\n\n\u3042\u3001bottom\u306e\u30aa\u30d7\u30b7\u30e7\u30f3\u4f5c\u308b\u306e\u5fd8\u308c\u3066\u305f\u3001\u3066\u3078\u307a\u308d\u3002\nAdvent Calendar \u306b\u3059\u308b\u307b\u3069\u3067\u3082\u306a\u3044\u306e\u3067\u3001FreeType\u3092OpenCV\u4e0a\u3067\u4f7f\u3046\u30b5\u30f3\u30d7\u30eb\u3092\u8f09\u305b\u3066\u304a\u304f\u3002\n\n---\n# \u6750\u6599\n1. TrueType Font\n2. OpenCV\n3. FreeType\n\n\u4eca\u56de\u306f\u3001http://mplus-fonts.osdn.jp/ \u69d8\u306e https://ja.osdn.net/projects/mplus-fonts/releases/62344 \u304b\u3089 mplus-TESTFLIGHT-062.tar.xz \u3092\u4f7f\u3044\u307e\u3057\u305f\u3002\n\n---\n# \u3057\u305f\u3054\u3057\u3089\u3048\n\uff08\u3084\u3089\u306a\u304f\u3066\u3082\u3044\u3044\uff09\n\u30d5\u30a9\u30f3\u30c8\u30c7\u30fc\u30bf\u3092\u6bce\u56de\u30ed\u30fc\u30c9\u3059\u308b\u30ed\u30b8\u30c3\u30af\u3092\u4f5c\u3063\u3066\u3082\u3044\u3044\u3002\n\u3060\u3051\u3069\u3001\u5c06\u6765\u7684\u306bOpenCV\u306e\u30e9\u30a4\u30d6\u30e9\u30ea\u306b\u7d44\u307f\u8fbc\u3080\u524d\u63d0\u3067\u30e9\u30a4\u30d6\u30e9\u30ea\u306b\u53d6\u308a\u8fbc\u3080\u3053\u3068\u3082\u8a66\u4f5c\u3057\u3066\u304a\u3053\u3046\u3068\u601d\u3046\u3002\n\n` $ xxd -i mplus-1c-thin.ttf > fontdata.c `\n\n---\n# \u5b9f\u884c\u7d50\u679c\n\n\uff1c\u4fee\u6b63\u5f8c\uff1e\n![a.png](https://qiita-image-store.s3.amazonaws.com/0/89434/23fb1702-39d4-04a0-8b60-e9df0e1ab849.png)\n\n\uff1c\u4fee\u6b63\u524d\uff1e\n![a.png](https://qiita-image-store.s3.amazonaws.com/0/89434/dc9ae964-3b01-4e2e-2e6c-bf1207de898a.png)\n\n---\n# \u4fee\u6b63(2016/11/7)\n\n``` \u5909\u66f4\u5dee\u5206\n        gPos.y = gPos.y - ( mface->glyph->metrics.horiBearingY >> 6) ;\n+       gPos.x = gPos.x + ( mface->glyph->metrics.horiBearingX >> 6) ;\n\n-                      ptr[ org.x + col * 8 + (7 - bit) ][0] = color[0];\n-                      ptr[ org.x + col * 8 + (7 - bit) ][1] = color[1];\n-                      ptr[ org.x + col * 8 + (7 - bit) ][2] = color[2];\n+                      ptr[ gPos.x + col * 8 + (7 - bit) ][0] = color[0];\n+                      ptr[ gPos.x + col * 8 + (7 - bit) ][1] = color[1];\n+                      ptr[ gPos.x + col * 8 + (7 - bit) ][2] = color[2];\n\n-           c  = ( ((unsigned char)text[i  ] << 18 ) & 0x700C0 ) |\n+           c  = ( ((unsigned char)text[i  ] << 18 ) & 0x70000 ) |\n                 ( ((unsigned char)text[i+1] << 12 ) &  0xF000 ) |\n                 ( ((unsigned char)text[i+2] <<  6 ) &  0x0FC0 ) |\n                 ( ((unsigned char)text[i+3] <<  0 ) &  0x003F ) ;\n```\n\n---\n# \u3053\u3093\u306a\u611f\u3058\n``` Makefile\nall : a.out\n\nfontdata.cpp.o : fontdata.h fontdata.cpp Makefile\n\tg++ -c fontdata.cpp -o fontdata.cpp.o\n\nmain.cpp.o : fontdata.h main.cpp Makefile\n\tg++ -g -c main.cpp -o main.cpp.o `pkg-config freetype2 opencv --cflags --libs`\n\na.out : fontdata.cpp.o main.cpp.o\n\tg++ fontdata.cpp.o main.cpp.o -o a.out `pkg-config freetype2 opencv --cflags --libs`\n```\n\n``` fontdata.h\n#ifndef FONTDATA_H\n#define FONTDATA\nextern unsigned int mplus_1c_thin_ttf_len;\nextern unsigned char mplus_1c_thin_ttf[];\n#endif\n```\n\n``` main.c\n#include <iostream>\n#include <fstream>\n#include <string>\n#include <cmath>\n#include \"fontdata.h\"\n#include <ft2build.h>\n#include <freetype/freetype.h>\n#include <freetype/ftoutln.h>\n\n#include <opencv2/opencv.hpp>\n#include <opencv2/imgproc.hpp>\n\nusing namespace cv;\n\nclass FreeTypeWrapper{\nprivate:\n    FT_Library mlibrary;\n    FT_Face    mface;\n\n    /** \n     *\n     */\n    void readNextCode(FT_Long &c, int &i, const String &text )\n    {\n        unsigned char t1 = (unsigned char) text[i];\n        if( t1 >= 0xF0) //4 bytes utf\n        {\n            c  = ( ((unsigned char)text[i  ] << 18 ) & 0x70000 ) |\n                 ( ((unsigned char)text[i+1] << 12 ) &  0xF000 ) |\n                 ( ((unsigned char)text[i+2] <<  6 ) &  0x0FC0 ) |\n                 ( ((unsigned char)text[i+3] <<  0 ) &  0x003F ) ;\n            i+=4;\n        }\n        else if( t1 >= 0xE0) //3 bytes utf\n        {\n            c  = ( ((unsigned char)text[i  ] << 12 ) & 0xF000 ) |\n                 ( ((unsigned char)text[i+1] <<  6 ) & 0x0FC0 ) |\n                 ( ((unsigned char)text[i+2] <<  0 ) & 0x003F ) ;\n            i+=3;\n        }\n        else if( t1 >= 0xC2) //2 bytes utf\n        {\n            c  = ( ((unsigned char)text[i  ] <<  6 ) & 0x0FC0 ) |\n                 ( ((unsigned char)text[i+1] <<  0 ) & 0x003F ) ;\n            i+=2;\n        }\n        else if(t1 > 0 )//1 bytes utf\n        {\n            c  = text[i];\n            i+=1;\n        }else{\n            c = '?';\n            i++;\n        }\n    }\n\npublic:\n    FreeTypeWrapper(){\n        FT_Init_FreeType(&mlibrary);\n    FT_New_Memory_Face(mlibrary, \n                       mplus_1c_thin_ttf, \n                       mplus_1c_thin_ttf_len, 0, &mface ); \n    }\n    ~FreeTypeWrapper(){\n    // \u5f8c\u51e6\u7406\n    FT_Done_FreeType(mlibrary);\n    }\n\npublic:\nvoid putText(InputOutputArray _img, const String& text, Point org,\n              double fontScale, Scalar color,\n              bool bottomLeftOrigin )\n{\n\n    if ( text.empty() )\n    {\n        return;\n    }\n\n    FT_Set_Pixel_Sizes( mface, fontScale, fontScale );\n\n    cv::Mat img = _img.getMat();\n\n    for( int i = 0 ; text[i] != '\\0' ; ){\n        FT_Long c;\n        readNextCode(c, i, text );\n        FT_Load_Char(mface, c, 0 ); \n        FT_Render_Glyph( mface->glyph, FT_RENDER_MODE_MONO );\n        FT_Bitmap    *bmp = &(mface->glyph->bitmap);\n\n        Point gPos = org;\n        gPos.y = gPos.y - ( mface->glyph->metrics.horiBearingY >> 6) ;\n        gPos.x = gPos.x + ( mface->glyph->metrics.horiBearingX >> 6) ;\n        int row, col, bit, cl;\n\n        for (row = 0; row < bmp->rows; row ++) {\n            if( gPos.y + row > img.rows ) { continue; }\n            cv::Vec3b* ptr = img.ptr<cv::Vec3b>( gPos.y + row );\n            for (col = 0; col < bmp->pitch; col ++) {\n                cl = bmp->buffer[ row * bmp->pitch + col ];\n                for(bit = 7; bit >= 0; bit -- ){\n                    if ( gPos.x + col * 8 + (7 - bit) > img.cols ) { continue; }\n                    if ( (cl >> bit) & 0x01 == 1 ) {\n                       ptr[ gPos.x + col * 8 + (7 - bit) ][0] = color[0];\n                       ptr[ gPos.x + col * 8 + (7 - bit) ][1] = color[1];\n                       ptr[ gPos.x + col * 8 + (7 - bit) ][2] = color[2];\n                    }\n                }\n            }\n        }\n        org.x += ( mface->glyph->advance.x ) >> 6;\n        org.y += ( mface->glyph->advance.y ) >> 6;\n    }\n    \n}\n\n};\nint main()\n{\n    cv::Mat src = cv::Mat( 480, 640, CV_8UC3 );\n    FreeTypeWrapper ftw;\n    ftw.putText(src, \"ABCDEFGHIJKLMNOPRSTUVWXYZ\",  Point(0,16), 16, Scalar(255,255,255), false );\n    ftw.putText(src, \"ABCDEFGHIJKLMNOPRSTUVWXYZ\",  Point(0,40), 24, Scalar(255,255,255), false );\n    ftw.putText(src, \"ABCDEFGHIJKLMNOPRSTUVWXYZ,\", Point(0,64), 32, Scalar(255,255,255), false );\n    ftw.putText(src, \"\u3044\u308d\u306f\u306b\u307b\u3078\u3068\",             Point(0,120), 16, Scalar(255,255,255), false );\n    ftw.putText(src, \"Happy New Year !!!!!!!!!!\",  Point(0,150), 24, Scalar(255,255,255), false );\n    ftw.putText(src, \"\u30d1\u30d5\u30a9\u30fc\u30de\u30f3\u30b9\u3068\u304b\u306f\u4efb\u305b\u305f\", Point(0,210), 32, Scalar(255,255,255), false );\n    ftw.putText(src, \"\u3053\u3093\u306a\u611f\u3058\u3067\u4f7f\u3048\u307e\u3059\",       Point(0,250), 32, Scalar(255,255,255), false );\n    ftw.putText(src, \"\u8d64\",                         Point(0,300), 32, Scalar(  0,  0,255), false );\n    ftw.putText(src, \"\u9752\",                         Point(32,300), 32, Scalar(255,  0, 0), false );\n    ftw.putText(src, \"\u7dd1\",                         Point(64,300), 32, Scalar( 0, 255, 0), false );\n    cv::imwrite(\"a.png\", src);\n}\n```\n\n``` fontdata.c\n#include \"fontdata.h\"\n\nunsigned char mplus_1c_thin_ttf[] = {\n  0x00, 0x01, 0x00, 0x00, 0x00, 0x15, 0x01, 0x00, 0x00, 0x04, 0x00, 0x50,\n...\n...\n...\n```\n\n\u3042\u3001bottom\u306e\u30aa\u30d7\u30b7\u30e7\u30f3\u4f5c\u308b\u306e\u5fd8\u308c\u3066\u305f\u3001\u3066\u3078\u307a\u308d\u3002\n"}