{"context": "\u3084\u308a\u307e\u3059\u3002\n\u4eca\u56de\u3053\u3061\u3089\u306e\u30a2\u30d7\u30ea\u3067\u4ef6\u540d\u306e\u611f\u3058\u3067\u3001\u3042\u308c\u3092\u3053\u3046\u3057\u307e\u3057\u305f\u3002\n\u30dc\u30fc\u30eb\u3092\u30b4\u30fc\u30eb\u3078\u30c9\u30fc\u30f3 ios\n\u30dc\u30fc\u30eb\u3092\u30b4\u30fc\u30eb\u3078\u30c9\u30fc\u30f3 Android\n\u30b2\u30fc\u30e0\u306fCocos2d-x\u3067\u958b\u767a\u3092\u3057\u3066\u3044\u307e\u3059\u3002\n\u30b2\u30fc\u30e0\u5185\u3067\u3001\u30e6\u30fc\u30b6\u30fc\u554f\u984c\u4f5c\u6210\u6a5f\u80fd\u7684\u306a\u3082\u306e\u3092\u63d0\u4f9b\u3057\u3066\u305d\u3061\u3089\u3067\u4f7f\u3063\u3066\u3044\u307e\u3059\u3002\n\u307e\u305aServerless\u3092\u4f7f\u3048\u308b\u3088\u3046\u306b\u3057\u306a\u3044\u3068\u8a71\u306b\u306a\u308a\u307e\u305b\u3093\u3002\nServerless\u306e\u5c0e\u5165\u306f\u3053\u3061\u3089\u3092\u53c2\u8003\u306b\u3057\u3066\u307f\u3066\u306f\u3044\u304b\u304c\u3067\u3057\u3087\u3046\u304b\u3002\n\u3068\u3053\u3068\u3093\u30b5\u30fc\u30d0\u30fc\u30ec\u30b9\u2460\uff1aServerless Framework\u5165\u9580\u7de8\n\u3053\u3061\u3089\u3082\u8d85\u53c2\u8003\u306b\u3055\u305b\u3066\u3044\u305f\u3060\u304d\u307e\u3057\u305f\nServerless Framework \u3067 DynamoDB \u3092\u4f7f\u3046\nServerless\u306e\u5c0e\u5165\u304c\u3067\u304d\u305f\u3089\u3001\u307e\u305a\u306f\u5358\u7d14\u306aAPI\u3092\u4f5c\u6210\u3057\u3066\u3001deploy\u3057\u3066\u307f\u307e\u3057\u3087\u3046\u3002\n\ncommand-line\n$ sls create --template aws-nodejs --name test\n$ sls deploy -v\n\n\n\u81ea\u5206\u306fnodejs\u3092\u4f7f\u3046\u3053\u3068\u306b\u3057\u307e\u3057\u305f\u304c\u3001python\u3068\u304bC#\u3068\u304b\u4f7f\u3048\u3061\u3083\u3046\u3089\u3057\u3044\u3067\u3059\u306d\u3002\n\u30d9\u30ed\u30d9\u30ed\u3068\u306a\u3093\u304b\u52dd\u624b\u306b\u3064\u304f\u3089\u308c\u307e\u3059\u3002\n\n\u6700\u5c0f\u306e\u6bb5\u968e\u3060\u3068\u3001lambda\u304c\uff11\u500b\u4f5c\u3089\u308c\u308b\u3060\u3051\u306a\u306e\u3067\u3001AWS\u306e\u7ba1\u7406\u753b\u9762\u304b\u3089\u78ba\u8a8d\u3059\u308b\u3002\n\n\u306a\u3093\u304b\u3067\u304d\u3066\u3044\u308b\u3002\n\u3042\u3068\u306f\u3053\u308c\u306b\u4ed8\u3051\u305f\u3057\u4ed8\u3051\u8db3\u3057\u3057\u3066\u3044\u3053\u3046\u3002\n\u307e\u305a\u3001nodejs\u306e\u30d1\u30c3\u30b1\u30fc\u30b8\u3092\u8272\u3005\u4f7f\u3046\u306e\u3067\u3001npm\u306e\u30bb\u30c3\u30c8\u30a2\u30c3\u30d7\u3092\u3057\u305f\u3044\u3068\u601d\u3046\uff08\u610f\u5473\u308f\u304b\u3063\u3066\u306a\u3044\uff09\n\ncommand-line\n$ npm init\n(\u306a\u3093\u304b\u3044\u308d\u3044\u308d\u3067\u308b\u306e\u3067\u3001\u3044\u308d\u3044\u308d\u3059\u308b)\n\n\n\u3059\u308b\u3068\u3001package.json\u3068\u3044\u3046\u30d5\u30a1\u30a4\u30eb\u304c\u4f5c\u3089\u308c\u308b\u3002\n\n\u3053\u308c\u306b\n\n\u3053\u3093\u306a\u611f\u3058\u3067 dependencies\u3092\u8ffd\u52a0\u3057\u307e\u3059\u3002\n\u610f\u5473\uff1f\u3057\u308b\u304b\u3002\n\ncommand-line\n$ npm install\n\n\n\u3068\u304b\u3084\u308b\u3068\u3001npm\u304c\u95a2\u9023\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u8abf\u3079\u3066\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3057\u3066\u304f\u308c\u307e\u3059\u3002\n\u3053\u308c\u306f\u30ed\u30fc\u30ab\u30eb\u306b\u5c55\u958b\u3055\u308c\u308b\u3093\u3067\u3059\u306d\u3002\n\u6700\u7d42\u7684\u306bServerless\u3067deploy\u3057\u305f\u3068\u304d\u306b\u3001\u8af8\u3005\u306e\u95a2\u9023\u30d5\u30a1\u30a4\u30eb\u3092\u5168\u90e8zip\u3067\u56fa\u3081\u3066\u30a2\u30c3\u30d7\u3057\u3066\u304f\u308c\u308b\u6bb5\u53d6\u308a\u306b\u306a\u3063\u3066\u3044\u308b\u307f\u305f\u3044\u3067\u3059\u3002\n\u6b21\u306bserverless.yaml\u3092\u5909\u66f4\u3057\u307e\u3059\u3002\n\u3053\u3053\u306b\u5b9a\u7fa9\u3092\u66f8\u3044\u3066\u3044\u3063\u3066\u3001\u6700\u7d42\u7684\u306b\u306fCloudFormation\u3068\u304b\u3044\u3046\u6a5f\u80fd\u3092\u4f7f\u3046\u307f\u305f\u3044\u3067\u3059\u306d\u3002\n\u305d\u308c\u304c\u3001\u307e\u3068\u3081\u305f\u30b5\u30fc\u30d0\u30fc\u69cb\u6210\u306e\u30bb\u30c3\u30c8\u30a2\u30c3\u30d7\u624b\u9806\u3092\u5b9a\u7fa9\u3059\u308b\u4ed5\u7d44\u307f\u3067\u3001\n\u7c21\u5358\u306b\u69cb\u6210\u3092\u518d\u69cb\u7bc9\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u308b\u3084\u3064\u307f\u305f\u3044\u306a\u611f\u3058\u3063\u3066\u3044\u3046\u304b\u3093\u3058\u30fc\uff1f\n\nserverless.yaml\n\n....\n\nprovider:\n  name: aws\n  runtime: nodejs4.3\n  iamRoleStatements: # \u30ed\u30fc\u30eb\u3092\u65b0\u305f\u306b\u8ffd\u52a0\u3057\u307e\u3059\n    - Effect: Allow\n      Action:\n        - dynamodb:DescribeTable\n        - dynamodb:Query\n        - dynamodb:Scan\n        - dynamodb:GetItem\n        - dynamodb:PutItem\n        - dynamodb:UpdateItem\n        - dynamodb:DeleteItem\n      Resource: \"arn:aws:dynamodb:us-east-1:*:table/dev-test-*\" #us-east-1\u30ea\u30fc\u30b8\u30e7\u30f3\u306e dev-test-\u306a\u3093\u305f\u3089\u3063\u3066\u30c6\u30fc\u30d6\u30eb\u5168\u90e8\u306b\u6a29\u9650\u3042\u305f\u3048\u307e\u3059\u3088\u3063\u3066\u611f\u3058\n\n\nfunctions:\n  hello:\n    handler: handler.hello\n  userCreate: #\u3053\u308c\u304clambda\u30b3\u30de\u30f3\u30c9\u306b\u306a\u308b\n    handler: handler.userCreate #handler.js \u306e\u3069\u306e\u30e1\u30bd\u30c3\u30c9\u3092\u4f7f\u3046\u304b\n    events: #lambda\u3092\u4f55\u7d4c\u7531\u3067\u8d77\u52d5\u3055\u305b\u308b\u304b\n      - http: # API Gateway\u3092\u4f7f\u3046\n          path: user # https://aws\u306e\u3069\u3063\u304b.../user  \u3068\u3044\u3046URL\u306b\u306a\u308b\n          method: post #\u610f\u5473\u308f\u304b\u308b\u3084\u308d\n          cors: true\n  userRead: #\u3053\u3044\u3064\u306f\u8907\u6570\u4ef6\u3088\u3080\u3084\u3064\n      handler: handler.userRead\n      events:\n        - http:\n            path: user\n            method: get\n            cors: true\n  userGet: #\u3053\u3044\u3064\u306f\uff11\u4ef6\u3060\u3051\u8aad\u3080\u3084\u3064\n      handler: handler.userGet\n      events:\n        - http:\n            path: user/{id}\n            method: get\n            cors: true\n\n\nresources: #\u5fc5\u8981\u306a\u30ea\u30bd\u30fc\u30b9\u3092\u7528\u610f\u3059\u308b\u3088\uff01\n  Resources: #\u91cd\u8981\u306a\u306e\u3067\uff12\u56de\u66f8\u304d\u307e\u3057\u305f\n    UserDbTable: #\u30ea\u30bd\u30fc\u30b9\u8b58\u5225\u540d\u3067\u3059\u3002\u4f7f\u308f\u308c\u307e\u305b\u3093\n      Type: 'AWS::DynamoDB::Table' #DynamoDB \u30c6\u30fc\u30d6\u30eb\u3092\u3064\u304f\u308b\u3088\n      DeletionPolicy: \"Delete\" #\u30c6\u30fc\u30d6\u30eb\u3092\u5bb9\u8d66\u306a\u304f\u524a\u9664\u3057\u307e\u3059\u3002\u3057\u306a\u3044\u8a2d\u5b9a\u3082\u3042\u308b\u3002\u8abf\u3079\u308d\n      Properties: #\u7d30\u304b\u3044\u8a2d\u5b9a\u3084\u3067\n        AttributeDefinitions: #\u6700\u4f4e\u9650\u5fc5\u8981\u3068\u306a\u308b\u30ab\u30e9\u30e0\u7684\u306a\u3084\u3064\n          -\n            AttributeName: \"id\" #ID\u30ab\u30e9\u30e0\n            AttributeType: \"S\" #\u6587\u5b57\u5217\u578b\n          -\n            AttributeName: \"delfg\" #\u524a\u9664\u30d5\u30e9\u30b0\u3001\u4f7f\u308f\u306a\u3044\u3051\u3069\u4f7f\u3046\n            AttributeType: \"N\" #\n          -\n            AttributeName: \"updt\" #\u66f4\u65b0\u65e5\u6642\u3068\u304b\u3044\u308c\u308b\u3001\u5f8c\u306bIndex\u4f7f\u3046\u305f\u3081\u306e\u30ab\u30e9\u30e0\n            AttributeType: \"S\" #\n        KeySchema: #\u4e3b\u30ad\u30fc\u7684\u306a\u3084\u3064\u3060\u3088\n          -\n            AttributeName: \"id\" #\n            KeyType: \"HASH\" #HASH\u5f62\u5f0f\u306b\u3059\u308b \u4ed6\u4f55\u304c\u3042\u3063\u305f\u304b\u5fd8\u308c\u305f\n        ProvisionedThroughput: #\u3053\u308c\u304c\u30d7\u30ed\u30f4\u30a3\u30b8\u30e7\u30cb\u30f3\u30b0\u306e\u30ad\u30e3\u30d1\u30b7\u30c6\u30a3\u3060\uff01\n          ReadCapacityUnits: \"1\" #\u8aad\u307f\u8fbc\u307f\u30ad\u30e3\u30d1\n          WriteCapacityUnits: \"1\" #\u66f8\u8fbc\u30ad\u30e3\u30d1\u3000\u3068\u308a\u3042\u3048\u305a\uff11\u3067\u5f8c\u3067\u7ba1\u7406\u753b\u9762\u304b\u3089\u5909\u3048\u308c\u308b\n        GlobalSecondaryIndexes: #Index \u3053\u308c\u304c\u306a\u3044\u3068\u526f\u6b21\u30bd\u30fc\u30c8\u3067\u304d\u306a\u3044\u306e(T\u0434T)\n          -\n            IndexName: \"myUPDT\" #\u306a\u307e\u3048\n            KeySchema:\n              -\n                AttributeName: \"delfg\" #\u3053\u308c\u306f\u56fa\u5b9a\u5024\u3092\u3044\u308c\u308b\u305f\u3081\n                KeyType: \"HASH\" #\n              -\n                AttributeName: \"updt\" #\u4e26\u3073\u66ff\u3048\u3092\u3057\u305f\u3044\u30ab\u30e9\u30e0\n                KeyType: \"RANGE\" #\n            Projection: #\u6295\u5f71\u3059\u308b\u30ab\u30e9\u30e0\uff08\u4e00\u7dd2\u306b\u62bd\u51fa\u3057\u305f\u3044\u30ab\u30e9\u30e0\uff09\n              NonKeyAttributes:\n                - \"id\" #\n                - \"username\" #\n              ProjectionType: \"INCLUDE\"\n            ProvisionedThroughput:\n              ReadCapacityUnits: \"1\" #\u30ad\u30e3\u30d1\u3060\u3088\u30fc\n              WriteCapacityUnits: \"1\"\n        TableName: \"dev-test-users\" #\u4f5c\u6210\u3055\u308c\u308bDynamoDB\u30c6\u30fc\u30d6\u30eb\u540d\n\n\n\n\u3053\u3093\u306a\u611f\u3058\u3067\u3059\u304b\u306d\u3002\n\u9069\u5b9c\u30b3\u30e1\u30f3\u30c8\u3067\u6ce8\u91c8\u3044\u308c\u3066\u307e\u3059\u304c\u3001\u8a73\u3057\u304f\u306fCloudFormation\u306e\u30d8\u30eb\u30d7\u306b\u8a73\u3057\u304f\u66f8\u3044\u3066\u3042\u308a\u307e\u3059\u3002\nTable\u3092\u5897\u3084\u3057\u305f\u3044\u3068\u304d\u306f\u3001YAML\u306e\u8a18\u8ff0\u306b\u306e\u3063\u3068\u3063\u3066\u3001\nResources\u306e\u5f8c\u308d\u306b\u30d0\u30f3\u30d0\u30f3\u8ffd\u52a0\u3057\u3066\u3044\u304f\u3093\u3067\u3059\u306d\u3002\nS3\u306eBucket\u3068\u304b\u3082\u3064\u304f\u308c\u307e\u3059\u3002\n\u3053\u3053\u307e\u3067\u3067\u3001AWS\u306b\u3001lambda APIGateway DynamoDB\u3092\u4f5c\u3063\u3066\u3001\u3064\u306a\u3052\u308b\u3068\u3053\u308d\u307e\u3067\u3084\u3063\u3066\u304f\u308c\u307e\u3059\u3002\n\u3042\u3068\u306fhandler.js\u306e\u4e2d\u306b\u3001\u51e6\u7406\u3092\u66f8\u304f\u3060\u3051\u3067\u3059\u3002\n\nhandler.js\n'use strict';\n\nconst AWS = require('aws-sdk'),\n      dynamoDb = new AWS.DynamoDB.DocumentClient(),\n      uuid = require('uuid'),\n      moment = require('moment'),\n      userTableName = `dev-test-users`;\n\nconst createResponse = (statusCode, body) => (\n  {\n    statusCode,\n    headers: {\n      'Access-Control-Allow-Origin': '*',\n    },\n    body: JSON.stringify(body),\n  }\n);\n\nmodule.exports.hello = (event, context, callback) => {\n  const response = {\n    statusCode: 200,\n    body: JSON.stringify({\n      message: 'Go Serverless v1.0! Your function executed successfully!',\n      input: event,\n    }),\n  };\n\n  callback(null, response);\n\n  // Use this code if you don't use the http event with the LAMBDA-PROXY integration\n  // callback(null, { message: 'Go Serverless v1.0! Your function executed successfully!', event });\n};\n\nmodule.exports.userCreate = (event, context, callback) => {\n\n  const item = JSON.parse(event.body);\n  item.id = uuid.v1();\n  item.updt = moment().utc().toISOString();\n  item.delfg = 0;\n\n  const params = {\n    TableName: userTableName,\n    Item: item\n  };\n\n  dynamoDb.put(params, (err, data)=>{\n    if(err){\n      callback(null, createResponse(500, {Message: err.message}));\n    } else {\n      callback(null, createResponse(200, {id: item.id}));\n    }\n  });\n\n};\n\nmodule.exports.userRead = (event, context, callback) => {\n\n  let page = \"\";\n  let limit = 4;\n  let my_index = \"myUPDT\";\n  if(event.queryStringParameters != null)\n  {\n    if(event.queryStringParameters.page !== undefined ) {\n      page = event.queryStringParameters.page;\n    }\n    if(event.queryStringParameters.limit !== undefined ) {\n      limit = event.queryStringParameters.limit;\n    }\n  }\n\n  const params = {\n    TableName: userTableName,\n    IndexName: my_index,\n    KeyConditionExpression: \"#key1 = :val1\",\n    ExpressionAttributeNames: { \"#key1\": \"delfg\" },\n    ExpressionAttributeValues: {\":val1\": 0 },\n    ScanIndexForward: false,\n    Limit: limit\n  };\n\n  if(page != \"\" ) {\n    let js = JSON.parse(page);\n    params[\"ExclusiveStartKey\"] = js;\n  }\n\n  dynamoDb.query(params, (err,data) =>{\n    if(err){\n      callback(null, createResponse(500, { message: err.message }));\n    } else {\n      callback(null, createResponse(200, data));\n    }\n  });\n\n\n\n};\n\nmodule.exports.userGet = (event, context, callback) => {\n\n  const id = event.pathParameters.id;\n\n  const params = {\n    TableName: userTableName,\n    Key: {\n      id: id\n    }\n  };\n\n  dynamoDb.get(params, (err,data) =>{\n    if(err){\n      callback(null, createResponse(500, { message: err.message }));\n    } else {\n      callback(null, createResponse(200, data));\n    }\n  });\n\n};\n\n\n\n\n\u305f\u3076\u3093\u3053\u3093\u306a\u611f\u3058\u3002\n\u3053\u308c\u3067\u3001\u3082\u3063\u304b\u3044\n\ncommand-line\n$ sls deploy -v\n\n\ndeploy\u3057\u307e\u3059\u3068\n\u3079\u308d\u3079\u308d\u30fc\u3063\u3064\u3063\u3066\n\n\u3053\u3053\u306bEndpoint\u3064\u304f\u308a\u307e\u3057\u305f\u3088\u3063\u3066\u7d50\u679c\u304c\u3067\u3066\u304d\u307e\u3059\u3002\n\u3042\u3068\u306f\u3053\u306eAPI\u3092\u4f7f\u3063\u3066\u901a\u4fe1\u3059\u308c\u3070OK\u3067\u3059\u3002\n\u5b9f\u969b\u306bAWS\u7ba1\u7406\u753b\u9762\u3067\u307f\u3066\u307f\u308b\u3068\ndynamoDB\n\nAPI Gateway\n\nLambda\n\n\u305d\u308c\u305e\u308c\u4f5c\u6210\u3055\u308c\u3066\u3044\u308b\u306e\u304c\u308f\u304b\u308a\u307e\u3059\u3002\n\u305d\u308c\u3067\u306f\u3001\u8a66\u3057\u306b\u3001\u4f5c\u6210\u3059\u308bjson\u3092\u306a\u3052\u3066\u307f\u307e\u3059\u3002\n\ncommand-line\ncurl -v -H \"Accept: application/json\" -H \"Content-type: application/json\" -X POST -d '{\"username\":\"takaoka\"}' https://h86ribf3tj.execute-api.us-east-1.amazonaws.com/dev/user\n\n\n\u3053\u308c\u3067\u3001username=takaoka\u3068\u3044\u3046\u30c7\u30fc\u30bf\u3092\u3064\u304f\u3063\u3066\u304f\u308c\u308b\u306f\u305a\u3067\u3059\u3002\n\ndynamoDB\u3067\u30c7\u30fc\u30bf\u3092\u307f\u3066\u307f\u308b\u3068\u3001\u4f5c\u3089\u308c\u3066\u3044\u308b\u306e\u304c\u308f\u304b\u308a\u307e\u3059\u3002\n\u3053\u3053\u3067\u306f\u4ed6\u306e\u30c7\u30fc\u30bf\u3082\u6295\u5165\u3057\u305f\u7d50\u679c\u304c\u8868\u793a\u3055\u308c\u3066\u3044\u307e\u3059\u306d\u3002\n\u3067\u306f\u30c7\u30fc\u30bf\u53d6\u5f97\u306f\u3069\u3046\u3067\u3057\u3087\u3046\u304b\u3002\n\ncommand-line\ncurl https://h86ribf3tj.execute-api.us-east-1.amazonaws.com/dev/user\n\n\n\u3068\u3059\u308b\u3068\n\ncommand-line\n{\n  \"Items\":[\n  {\n    \"updt\":\"2017-01-25T15:35:43.408Z\",\n    \"username\":\"merukuma\",\n    \"id\":\"eef18bf0-e313-11e6-b508-c1acf2e4eaa5\",\n    \"delfg\":0\n  },\n  {\n    \"updt\":\"2017-01-25T15:35:16.039Z\",\n    \"username\":\"takaoka\",\n    \"id\":\"dea18570-e313-11e6-ba2a-9d6ebdcb394f\",\n    \"delfg\":0\n  }\n  ],\n  \"Count\":2,\n  \"ScannedCount\":2\n}\n\n\n\u3053\u306eJSON\u304c\u8fd4\u3063\u3066\u304d\u307e\u3059\u3002\n\u500b\u5225\u53d6\u5f97\u306eAPI\u306f\n\ncommand-line\ncurl https://h86ribf3tj.execute-api.us-east-1.amazonaws.com/dev/user/eef18bf0-e313-11e6-b508-c1acf2e4eaa5\n\n\n\u767a\u884c\u3055\u308c\u305fID\u3092\u4f7f\u3044\u307e\u3059\u3002\n\ncommand-line\n{\n  \"Item\":{\n    \"updt\":\"2017-01-25T15:35:43.408Z\",\n    \"username\":\"merukuma\",\n    \"id\":\"eef18bf0-e313-11e6-b508-c1acf2e4eaa5\",\n    \"delfg\":0\n  }\n}\n\n\n\u3068\u308c\u3066\u307e\u3059\u306d\u3002\n\u3042\u3068\u306f\u3001\u30a2\u30d7\u30ea\u304b\u3089\u3001http\u901a\u4fe1\u3092\u884c\u3063\u3066JSON\u306e\u3084\u308a\u3068\u308a\u3092\u3059\u308b\u3060\u3051\u3067\u3059\u3002\n\u305d\u306e\u3046\u3061\u3001\u5404\u30d7\u30e9\u30c3\u30c8\u30d5\u30a9\u30fc\u30e0\u3067\u306e\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u901a\u4fe1\u306e\u51e6\u7406\u3082\u304b\u304d\u305f\u3044\u3067\u3059\u30fc\u3057\u3087\u308a\u3057\u3087\u308a\u30fc\nCocos2d-x\u3067\u306e\u901a\u4fe1\u51e6\u7406\n\nnankatusin.cpp\n#include \"json11.hpp\"\n#include \"network/HttpClient.h\"\n\n\n\n....\n\n\n    cocos2d::network::HttpRequest *req = new cocos2d::network::HttpRequest();\n    std::string query = \"https://h86ribf3tj.execute-api.us-east-1.amazonaws.com/dev/user\";\n\n    req->setUrl(query.c_str());\n\n    json11::Json::object obj;\n    obj[\"user_name\"] = user_name;\n    std::string json_str = json11::Json(obj).dump();\n\n    req->setRequestType(cocos2d::network::HttpRequest::Type::POST);\n    std::string postdata = json_str;\n    req->setRequestData(postdata.c_str(), postdata.length());\n\n    req->setResponseCallback([=](cocos2d::network::HttpClient* sender, cocos2d::network::HttpResponse* respons){\n\n        if ( respons->isSucceed() && respons->getResponseCode() == 200 ) {\n\n# \u3044\u308d\u3044\u308d\u304c\u3093\u3070\u3063\u3066\u304f\u3060\u3055\u3044\n\n        }\n\n    }\n\n    cocos2d::network::HttpClient::getInstance()->send(req);\n\n\n\n\n\u306a\u3093\u3068\u306a\u304f\u308f\u304b\u308b\u3084\u308d\u3046\u3002\n\u3084\u308a\u307e\u3059\u3002\n\n\u4eca\u56de\u3053\u3061\u3089\u306e\u30a2\u30d7\u30ea\u3067\u4ef6\u540d\u306e\u611f\u3058\u3067\u3001\u3042\u308c\u3092\u3053\u3046\u3057\u307e\u3057\u305f\u3002\n[\u30dc\u30fc\u30eb\u3092\u30b4\u30fc\u30eb\u3078\u30c9\u30fc\u30f3 ios](https://itunes.apple.com/jp/app/da-renmohamaru-jian-dan-naotore/id1033716298?mt=8)\n[\u30dc\u30fc\u30eb\u3092\u30b4\u30fc\u30eb\u3078\u30c9\u30fc\u30f3 Android](https://play.google.com/store/apps/details?id=jp.mokosoft.ball&hl=ja)\n\u30b2\u30fc\u30e0\u306fCocos2d-x\u3067\u958b\u767a\u3092\u3057\u3066\u3044\u307e\u3059\u3002\n\u30b2\u30fc\u30e0\u5185\u3067\u3001\u30e6\u30fc\u30b6\u30fc\u554f\u984c\u4f5c\u6210\u6a5f\u80fd\u7684\u306a\u3082\u306e\u3092\u63d0\u4f9b\u3057\u3066\u305d\u3061\u3089\u3067\u4f7f\u3063\u3066\u3044\u307e\u3059\u3002\n\n\n\u307e\u305aServerless\u3092\u4f7f\u3048\u308b\u3088\u3046\u306b\u3057\u306a\u3044\u3068\u8a71\u306b\u306a\u308a\u307e\u305b\u3093\u3002\n\nServerless\u306e\u5c0e\u5165\u306f\u3053\u3061\u3089\u3092\u53c2\u8003\u306b\u3057\u3066\u307f\u3066\u306f\u3044\u304b\u304c\u3067\u3057\u3087\u3046\u304b\u3002\n[\u3068\u3053\u3068\u3093\u30b5\u30fc\u30d0\u30fc\u30ec\u30b9\u2460\uff1aServerless Framework\u5165\u9580\u7de8](http://qiita.com/hiroshik1985/items/6d979ff1afb56953b62e)\n\n\u3053\u3061\u3089\u3082\u8d85\u53c2\u8003\u306b\u3055\u305b\u3066\u3044\u305f\u3060\u304d\u307e\u3057\u305f\n[Serverless Framework \u3067 DynamoDB \u3092\u4f7f\u3046](http://qiita.com/katsuhiko/items/a2594e73108728a22410)\n\n\nServerless\u306e\u5c0e\u5165\u304c\u3067\u304d\u305f\u3089\u3001\u307e\u305a\u306f\u5358\u7d14\u306aAPI\u3092\u4f5c\u6210\u3057\u3066\u3001deploy\u3057\u3066\u307f\u307e\u3057\u3087\u3046\u3002\n\n\n```bash:command-line\n$ sls create --template aws-nodejs --name test\n$ sls deploy -v\n```\n\n\u81ea\u5206\u306fnodejs\u3092\u4f7f\u3046\u3053\u3068\u306b\u3057\u307e\u3057\u305f\u304c\u3001python\u3068\u304bC#\u3068\u304b\u4f7f\u3048\u3061\u3083\u3046\u3089\u3057\u3044\u3067\u3059\u306d\u3002\n\n\n\u30d9\u30ed\u30d9\u30ed\u3068\u306a\u3093\u304b\u52dd\u624b\u306b\u3064\u304f\u3089\u308c\u307e\u3059\u3002\n<img width=\"384\" alt=\"\u30b9\u30af\u30ea\u30fc\u30f3\u30b7\u30e7\u30c3\u30c8 2017-01-25 21.49.59.png\" src=\"https://qiita-image-store.s3.amazonaws.com/0/81327/d59fefee-9728-7222-ccf4-3e80030508db.png\">\n\n\n\u6700\u5c0f\u306e\u6bb5\u968e\u3060\u3068\u3001lambda\u304c\uff11\u500b\u4f5c\u3089\u308c\u308b\u3060\u3051\u306a\u306e\u3067\u3001AWS\u306e\u7ba1\u7406\u753b\u9762\u304b\u3089\u78ba\u8a8d\u3059\u308b\u3002\n<img width=\"455\" alt=\"\u30b9\u30af\u30ea\u30fc\u30f3\u30b7\u30e7\u30c3\u30c8 2017-01-25 21.48.17.png\" src=\"https://qiita-image-store.s3.amazonaws.com/0/81327/444ba203-dad1-27d6-008b-c3bc2d2c1af4.png\">\n\n\u306a\u3093\u304b\u3067\u304d\u3066\u3044\u308b\u3002\n\u3042\u3068\u306f\u3053\u308c\u306b\u4ed8\u3051\u305f\u3057\u4ed8\u3051\u8db3\u3057\u3057\u3066\u3044\u3053\u3046\u3002\n\n\u307e\u305a\u3001nodejs\u306e\u30d1\u30c3\u30b1\u30fc\u30b8\u3092\u8272\u3005\u4f7f\u3046\u306e\u3067\u3001npm\u306e\u30bb\u30c3\u30c8\u30a2\u30c3\u30d7\u3092\u3057\u305f\u3044\u3068\u601d\u3046\uff08\u610f\u5473\u308f\u304b\u3063\u3066\u306a\u3044\uff09\n\n```bash:command-line\n$ npm init\n(\u306a\u3093\u304b\u3044\u308d\u3044\u308d\u3067\u308b\u306e\u3067\u3001\u3044\u308d\u3044\u308d\u3059\u308b)\n```\n\n\u3059\u308b\u3068\u3001package.json\u3068\u3044\u3046\u30d5\u30a1\u30a4\u30eb\u304c\u4f5c\u3089\u308c\u308b\u3002\n<img width=\"595\" alt=\"\u30b9\u30af\u30ea\u30fc\u30f3\u30b7\u30e7\u30c3\u30c8 2017-01-25 22.08.21.png\" src=\"https://qiita-image-store.s3.amazonaws.com/0/81327/a78934fa-ee93-c0a0-c9c1-9cee87ad0ae2.png\">\n\n\u3053\u308c\u306b\n<img width=\"310\" alt=\"\u30b9\u30af\u30ea\u30fc\u30f3\u30b7\u30e7\u30c3\u30c8 2017-01-25 22.17.01.png\" src=\"https://qiita-image-store.s3.amazonaws.com/0/81327/685704dc-4389-28ef-6658-bb2ee7c16d18.png\">\n\n\u3053\u3093\u306a\u611f\u3058\u3067 dependencies\u3092\u8ffd\u52a0\u3057\u307e\u3059\u3002\n\u610f\u5473\uff1f\u3057\u308b\u304b\u3002\n\n```bash:command-line\n$ npm install\n```\n\u3068\u304b\u3084\u308b\u3068\u3001npm\u304c\u95a2\u9023\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u8abf\u3079\u3066\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3057\u3066\u304f\u308c\u307e\u3059\u3002\n\u3053\u308c\u306f\u30ed\u30fc\u30ab\u30eb\u306b\u5c55\u958b\u3055\u308c\u308b\u3093\u3067\u3059\u306d\u3002\n\u6700\u7d42\u7684\u306bServerless\u3067deploy\u3057\u305f\u3068\u304d\u306b\u3001\u8af8\u3005\u306e\u95a2\u9023\u30d5\u30a1\u30a4\u30eb\u3092\u5168\u90e8zip\u3067\u56fa\u3081\u3066\u30a2\u30c3\u30d7\u3057\u3066\u304f\u308c\u308b\u6bb5\u53d6\u308a\u306b\u306a\u3063\u3066\u3044\u308b\u307f\u305f\u3044\u3067\u3059\u3002\n\n\n\n\u6b21\u306bserverless.yaml\u3092\u5909\u66f4\u3057\u307e\u3059\u3002\n\u3053\u3053\u306b\u5b9a\u7fa9\u3092\u66f8\u3044\u3066\u3044\u3063\u3066\u3001\u6700\u7d42\u7684\u306b\u306fCloudFormation\u3068\u304b\u3044\u3046\u6a5f\u80fd\u3092\u4f7f\u3046\u307f\u305f\u3044\u3067\u3059\u306d\u3002\n\u305d\u308c\u304c\u3001\u307e\u3068\u3081\u305f\u30b5\u30fc\u30d0\u30fc\u69cb\u6210\u306e\u30bb\u30c3\u30c8\u30a2\u30c3\u30d7\u624b\u9806\u3092\u5b9a\u7fa9\u3059\u308b\u4ed5\u7d44\u307f\u3067\u3001\n\u7c21\u5358\u306b\u69cb\u6210\u3092\u518d\u69cb\u7bc9\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u308b\u3084\u3064\u307f\u305f\u3044\u306a\u611f\u3058\u3063\u3066\u3044\u3046\u304b\u3093\u3058\u30fc\uff1f\n\n\n```yaml:serverless.yaml\n\n....\n\nprovider:\n  name: aws\n  runtime: nodejs4.3\n  iamRoleStatements: # \u30ed\u30fc\u30eb\u3092\u65b0\u305f\u306b\u8ffd\u52a0\u3057\u307e\u3059\n    - Effect: Allow\n      Action:\n        - dynamodb:DescribeTable\n        - dynamodb:Query\n        - dynamodb:Scan\n        - dynamodb:GetItem\n        - dynamodb:PutItem\n        - dynamodb:UpdateItem\n        - dynamodb:DeleteItem\n      Resource: \"arn:aws:dynamodb:us-east-1:*:table/dev-test-*\" #us-east-1\u30ea\u30fc\u30b8\u30e7\u30f3\u306e dev-test-\u306a\u3093\u305f\u3089\u3063\u3066\u30c6\u30fc\u30d6\u30eb\u5168\u90e8\u306b\u6a29\u9650\u3042\u305f\u3048\u307e\u3059\u3088\u3063\u3066\u611f\u3058\n\n\nfunctions:\n  hello:\n    handler: handler.hello\n  userCreate: #\u3053\u308c\u304clambda\u30b3\u30de\u30f3\u30c9\u306b\u306a\u308b\n    handler: handler.userCreate #handler.js \u306e\u3069\u306e\u30e1\u30bd\u30c3\u30c9\u3092\u4f7f\u3046\u304b\n    events: #lambda\u3092\u4f55\u7d4c\u7531\u3067\u8d77\u52d5\u3055\u305b\u308b\u304b\n      - http: # API Gateway\u3092\u4f7f\u3046\n          path: user # https://aws\u306e\u3069\u3063\u304b.../user  \u3068\u3044\u3046URL\u306b\u306a\u308b\n          method: post #\u610f\u5473\u308f\u304b\u308b\u3084\u308d\n          cors: true\n  userRead: #\u3053\u3044\u3064\u306f\u8907\u6570\u4ef6\u3088\u3080\u3084\u3064\n      handler: handler.userRead\n      events:\n        - http:\n            path: user\n            method: get\n            cors: true\n  userGet: #\u3053\u3044\u3064\u306f\uff11\u4ef6\u3060\u3051\u8aad\u3080\u3084\u3064\n      handler: handler.userGet\n      events:\n        - http:\n            path: user/{id}\n            method: get\n            cors: true\n\n\nresources: #\u5fc5\u8981\u306a\u30ea\u30bd\u30fc\u30b9\u3092\u7528\u610f\u3059\u308b\u3088\uff01\n  Resources: #\u91cd\u8981\u306a\u306e\u3067\uff12\u56de\u66f8\u304d\u307e\u3057\u305f\n    UserDbTable: #\u30ea\u30bd\u30fc\u30b9\u8b58\u5225\u540d\u3067\u3059\u3002\u4f7f\u308f\u308c\u307e\u305b\u3093\n      Type: 'AWS::DynamoDB::Table' #DynamoDB \u30c6\u30fc\u30d6\u30eb\u3092\u3064\u304f\u308b\u3088\n      DeletionPolicy: \"Delete\" #\u30c6\u30fc\u30d6\u30eb\u3092\u5bb9\u8d66\u306a\u304f\u524a\u9664\u3057\u307e\u3059\u3002\u3057\u306a\u3044\u8a2d\u5b9a\u3082\u3042\u308b\u3002\u8abf\u3079\u308d\n      Properties: #\u7d30\u304b\u3044\u8a2d\u5b9a\u3084\u3067\n        AttributeDefinitions: #\u6700\u4f4e\u9650\u5fc5\u8981\u3068\u306a\u308b\u30ab\u30e9\u30e0\u7684\u306a\u3084\u3064\n          -\n            AttributeName: \"id\" #ID\u30ab\u30e9\u30e0\n            AttributeType: \"S\" #\u6587\u5b57\u5217\u578b\n          -\n            AttributeName: \"delfg\" #\u524a\u9664\u30d5\u30e9\u30b0\u3001\u4f7f\u308f\u306a\u3044\u3051\u3069\u4f7f\u3046\n            AttributeType: \"N\" #\n          -\n            AttributeName: \"updt\" #\u66f4\u65b0\u65e5\u6642\u3068\u304b\u3044\u308c\u308b\u3001\u5f8c\u306bIndex\u4f7f\u3046\u305f\u3081\u306e\u30ab\u30e9\u30e0\n            AttributeType: \"S\" #\n        KeySchema: #\u4e3b\u30ad\u30fc\u7684\u306a\u3084\u3064\u3060\u3088\n          -\n            AttributeName: \"id\" #\n            KeyType: \"HASH\" #HASH\u5f62\u5f0f\u306b\u3059\u308b \u4ed6\u4f55\u304c\u3042\u3063\u305f\u304b\u5fd8\u308c\u305f\n        ProvisionedThroughput: #\u3053\u308c\u304c\u30d7\u30ed\u30f4\u30a3\u30b8\u30e7\u30cb\u30f3\u30b0\u306e\u30ad\u30e3\u30d1\u30b7\u30c6\u30a3\u3060\uff01\n          ReadCapacityUnits: \"1\" #\u8aad\u307f\u8fbc\u307f\u30ad\u30e3\u30d1\n          WriteCapacityUnits: \"1\" #\u66f8\u8fbc\u30ad\u30e3\u30d1\u3000\u3068\u308a\u3042\u3048\u305a\uff11\u3067\u5f8c\u3067\u7ba1\u7406\u753b\u9762\u304b\u3089\u5909\u3048\u308c\u308b\n        GlobalSecondaryIndexes: #Index \u3053\u308c\u304c\u306a\u3044\u3068\u526f\u6b21\u30bd\u30fc\u30c8\u3067\u304d\u306a\u3044\u306e(T\u0434T)\n          -\n            IndexName: \"myUPDT\" #\u306a\u307e\u3048\n            KeySchema:\n              -\n                AttributeName: \"delfg\" #\u3053\u308c\u306f\u56fa\u5b9a\u5024\u3092\u3044\u308c\u308b\u305f\u3081\n                KeyType: \"HASH\" #\n              -\n                AttributeName: \"updt\" #\u4e26\u3073\u66ff\u3048\u3092\u3057\u305f\u3044\u30ab\u30e9\u30e0\n                KeyType: \"RANGE\" #\n            Projection: #\u6295\u5f71\u3059\u308b\u30ab\u30e9\u30e0\uff08\u4e00\u7dd2\u306b\u62bd\u51fa\u3057\u305f\u3044\u30ab\u30e9\u30e0\uff09\n              NonKeyAttributes:\n                - \"id\" #\n                - \"username\" #\n              ProjectionType: \"INCLUDE\"\n            ProvisionedThroughput:\n              ReadCapacityUnits: \"1\" #\u30ad\u30e3\u30d1\u3060\u3088\u30fc\n              WriteCapacityUnits: \"1\"\n        TableName: \"dev-test-users\" #\u4f5c\u6210\u3055\u308c\u308bDynamoDB\u30c6\u30fc\u30d6\u30eb\u540d\n\n```\n\n\u3053\u3093\u306a\u611f\u3058\u3067\u3059\u304b\u306d\u3002\n\u9069\u5b9c\u30b3\u30e1\u30f3\u30c8\u3067\u6ce8\u91c8\u3044\u308c\u3066\u307e\u3059\u304c\u3001\u8a73\u3057\u304f\u306fCloudFormation\u306e\u30d8\u30eb\u30d7\u306b\u8a73\u3057\u304f\u66f8\u3044\u3066\u3042\u308a\u307e\u3059\u3002\n\nTable\u3092\u5897\u3084\u3057\u305f\u3044\u3068\u304d\u306f\u3001YAML\u306e\u8a18\u8ff0\u306b\u306e\u3063\u3068\u3063\u3066\u3001\nResources\u306e\u5f8c\u308d\u306b\u30d0\u30f3\u30d0\u30f3\u8ffd\u52a0\u3057\u3066\u3044\u304f\u3093\u3067\u3059\u306d\u3002\nS3\u306eBucket\u3068\u304b\u3082\u3064\u304f\u308c\u307e\u3059\u3002\n\n\n\u3053\u3053\u307e\u3067\u3067\u3001AWS\u306b\u3001lambda APIGateway DynamoDB\u3092\u4f5c\u3063\u3066\u3001\u3064\u306a\u3052\u308b\u3068\u3053\u308d\u307e\u3067\u3084\u3063\u3066\u304f\u308c\u307e\u3059\u3002\n\u3042\u3068\u306fhandler.js\u306e\u4e2d\u306b\u3001\u51e6\u7406\u3092\u66f8\u304f\u3060\u3051\u3067\u3059\u3002\n\n```js:handler.js\n'use strict';\n\nconst AWS = require('aws-sdk'),\n      dynamoDb = new AWS.DynamoDB.DocumentClient(),\n      uuid = require('uuid'),\n      moment = require('moment'),\n      userTableName = `dev-test-users`;\n\nconst createResponse = (statusCode, body) => (\n  {\n    statusCode,\n    headers: {\n      'Access-Control-Allow-Origin': '*',\n    },\n    body: JSON.stringify(body),\n  }\n);\n\nmodule.exports.hello = (event, context, callback) => {\n  const response = {\n    statusCode: 200,\n    body: JSON.stringify({\n      message: 'Go Serverless v1.0! Your function executed successfully!',\n      input: event,\n    }),\n  };\n\n  callback(null, response);\n\n  // Use this code if you don't use the http event with the LAMBDA-PROXY integration\n  // callback(null, { message: 'Go Serverless v1.0! Your function executed successfully!', event });\n};\n\nmodule.exports.userCreate = (event, context, callback) => {\n\n  const item = JSON.parse(event.body);\n  item.id = uuid.v1();\n  item.updt = moment().utc().toISOString();\n  item.delfg = 0;\n\n  const params = {\n    TableName: userTableName,\n    Item: item\n  };\n\n  dynamoDb.put(params, (err, data)=>{\n    if(err){\n      callback(null, createResponse(500, {Message: err.message}));\n    } else {\n      callback(null, createResponse(200, {id: item.id}));\n    }\n  });\n\n};\n\nmodule.exports.userRead = (event, context, callback) => {\n\n  let page = \"\";\n  let limit = 4;\n  let my_index = \"myUPDT\";\n  if(event.queryStringParameters != null)\n  {\n    if(event.queryStringParameters.page !== undefined ) {\n      page = event.queryStringParameters.page;\n    }\n    if(event.queryStringParameters.limit !== undefined ) {\n      limit = event.queryStringParameters.limit;\n    }\n  }\n\n  const params = {\n    TableName: userTableName,\n    IndexName: my_index,\n    KeyConditionExpression: \"#key1 = :val1\",\n    ExpressionAttributeNames: { \"#key1\": \"delfg\" },\n    ExpressionAttributeValues: {\":val1\": 0 },\n    ScanIndexForward: false,\n    Limit: limit\n  };\n\n  if(page != \"\" ) {\n    let js = JSON.parse(page);\n    params[\"ExclusiveStartKey\"] = js;\n  }\n\n  dynamoDb.query(params, (err,data) =>{\n    if(err){\n      callback(null, createResponse(500, { message: err.message }));\n    } else {\n      callback(null, createResponse(200, data));\n    }\n  });\n\n\n\n};\n\nmodule.exports.userGet = (event, context, callback) => {\n\n  const id = event.pathParameters.id;\n  \n  const params = {\n    TableName: userTableName,\n    Key: {\n      id: id\n    }\n  };\n\n  dynamoDb.get(params, (err,data) =>{\n    if(err){\n      callback(null, createResponse(500, { message: err.message }));\n    } else {\n      callback(null, createResponse(200, data));\n    }\n  });\n\n};\n\n\n```\n\n\u305f\u3076\u3093\u3053\u3093\u306a\u611f\u3058\u3002\n\n\u3053\u308c\u3067\u3001\u3082\u3063\u304b\u3044\n\n\n```bash:command-line\n$ sls deploy -v\n```\n\ndeploy\u3057\u307e\u3059\u3068\n\u3079\u308d\u3079\u308d\u30fc\u3063\u3064\u3063\u3066\n<img width=\"855\" alt=\"\u30b9\u30af\u30ea\u30fc\u30f3\u30b7\u30e7\u30c3\u30c8 2017-01-26 0.18.20.png\" src=\"https://qiita-image-store.s3.amazonaws.com/0/81327/d9ada176-0b34-dc71-7ae0-de0f69d9ae75.png\">\n\n\u3053\u3053\u306bEndpoint\u3064\u304f\u308a\u307e\u3057\u305f\u3088\u3063\u3066\u7d50\u679c\u304c\u3067\u3066\u304d\u307e\u3059\u3002\n\u3042\u3068\u306f\u3053\u306eAPI\u3092\u4f7f\u3063\u3066\u901a\u4fe1\u3059\u308c\u3070OK\u3067\u3059\u3002\n\n\u5b9f\u969b\u306bAWS\u7ba1\u7406\u753b\u9762\u3067\u307f\u3066\u307f\u308b\u3068\n\ndynamoDB\n<img width=\"486\" alt=\"\u30b9\u30af\u30ea\u30fc\u30f3\u30b7\u30e7\u30c3\u30c8 2017-01-26 0.22.28.png\" src=\"https://qiita-image-store.s3.amazonaws.com/0/81327/a1ada9af-ae26-1699-93ee-6dc4e04a7355.png\">\n\nAPI Gateway\n<img width=\"296\" alt=\"\u30b9\u30af\u30ea\u30fc\u30f3\u30b7\u30e7\u30c3\u30c8 2017-01-26 0.22.41.png\" src=\"https://qiita-image-store.s3.amazonaws.com/0/81327/ba9a1283-290f-6943-e544-f194ed5c4838.png\">\n\nLambda\n<img width=\"446\" alt=\"\u30b9\u30af\u30ea\u30fc\u30f3\u30b7\u30e7\u30c3\u30c8 2017-01-26 0.22.51.png\" src=\"https://qiita-image-store.s3.amazonaws.com/0/81327/e76a06ab-661b-f0b7-6925-d96d187230d5.png\">\n\n\n\u305d\u308c\u305e\u308c\u4f5c\u6210\u3055\u308c\u3066\u3044\u308b\u306e\u304c\u308f\u304b\u308a\u307e\u3059\u3002\n\n\n\n\u305d\u308c\u3067\u306f\u3001\u8a66\u3057\u306b\u3001\u4f5c\u6210\u3059\u308bjson\u3092\u306a\u3052\u3066\u307f\u307e\u3059\u3002\n\n```bash:command-line\ncurl -v -H \"Accept: application/json\" -H \"Content-type: application/json\" -X POST -d '{\"username\":\"takaoka\"}' https://h86ribf3tj.execute-api.us-east-1.amazonaws.com/dev/user\n```\n\n\u3053\u308c\u3067\u3001username=takaoka\u3068\u3044\u3046\u30c7\u30fc\u30bf\u3092\u3064\u304f\u3063\u3066\u304f\u308c\u308b\u306f\u305a\u3067\u3059\u3002\n\n<img width=\"645\" alt=\"\u30b9\u30af\u30ea\u30fc\u30f3\u30b7\u30e7\u30c3\u30c8 2017-01-26 0.34.09.png\" src=\"https://qiita-image-store.s3.amazonaws.com/0/81327/6afe3a4c-f43c-41fe-2c15-a6aaaa8078a4.png\">\n\ndynamoDB\u3067\u30c7\u30fc\u30bf\u3092\u307f\u3066\u307f\u308b\u3068\u3001\u4f5c\u3089\u308c\u3066\u3044\u308b\u306e\u304c\u308f\u304b\u308a\u307e\u3059\u3002\n\u3053\u3053\u3067\u306f\u4ed6\u306e\u30c7\u30fc\u30bf\u3082\u6295\u5165\u3057\u305f\u7d50\u679c\u304c\u8868\u793a\u3055\u308c\u3066\u3044\u307e\u3059\u306d\u3002\n\n\n\u3067\u306f\u30c7\u30fc\u30bf\u53d6\u5f97\u306f\u3069\u3046\u3067\u3057\u3087\u3046\u304b\u3002\n\n```bash:command-line\ncurl https://h86ribf3tj.execute-api.us-east-1.amazonaws.com/dev/user\n```\n\n\u3068\u3059\u308b\u3068\n\n```bash:command-line\n{\n  \"Items\":[\n  {\n    \"updt\":\"2017-01-25T15:35:43.408Z\",\n    \"username\":\"merukuma\",\n    \"id\":\"eef18bf0-e313-11e6-b508-c1acf2e4eaa5\",\n    \"delfg\":0\n  },\n  {\n    \"updt\":\"2017-01-25T15:35:16.039Z\",\n    \"username\":\"takaoka\",\n    \"id\":\"dea18570-e313-11e6-ba2a-9d6ebdcb394f\",\n    \"delfg\":0\n  }\n  ],\n  \"Count\":2,\n  \"ScannedCount\":2\n}\n```\n\n\u3053\u306eJSON\u304c\u8fd4\u3063\u3066\u304d\u307e\u3059\u3002\n\n\u500b\u5225\u53d6\u5f97\u306eAPI\u306f\n\n```bash:command-line\ncurl https://h86ribf3tj.execute-api.us-east-1.amazonaws.com/dev/user/eef18bf0-e313-11e6-b508-c1acf2e4eaa5\n```\n\n\u767a\u884c\u3055\u308c\u305fID\u3092\u4f7f\u3044\u307e\u3059\u3002\n\n```bash:command-line\n{\n  \"Item\":{\n    \"updt\":\"2017-01-25T15:35:43.408Z\",\n    \"username\":\"merukuma\",\n    \"id\":\"eef18bf0-e313-11e6-b508-c1acf2e4eaa5\",\n    \"delfg\":0\n  }\n}\n```\n\n\u3068\u308c\u3066\u307e\u3059\u306d\u3002\n\u3042\u3068\u306f\u3001\u30a2\u30d7\u30ea\u304b\u3089\u3001http\u901a\u4fe1\u3092\u884c\u3063\u3066JSON\u306e\u3084\u308a\u3068\u308a\u3092\u3059\u308b\u3060\u3051\u3067\u3059\u3002\n\n\u305d\u306e\u3046\u3061\u3001\u5404\u30d7\u30e9\u30c3\u30c8\u30d5\u30a9\u30fc\u30e0\u3067\u306e\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u901a\u4fe1\u306e\u51e6\u7406\u3082\u304b\u304d\u305f\u3044\u3067\u3059\u30fc\u3057\u3087\u308a\u3057\u3087\u308a\u30fc\n\n\nCocos2d-x\u3067\u306e\u901a\u4fe1\u51e6\u7406\n\n\n```cpp:nankatusin.cpp\n#include \"json11.hpp\"\n#include \"network/HttpClient.h\"\n\n\n\n....\n\n\n    cocos2d::network::HttpRequest *req = new cocos2d::network::HttpRequest();\n    std::string query = \"https://h86ribf3tj.execute-api.us-east-1.amazonaws.com/dev/user\";\n\n    req->setUrl(query.c_str());\n\n    json11::Json::object obj;\n    obj[\"user_name\"] = user_name;\n    std::string json_str = json11::Json(obj).dump();\n\n    req->setRequestType(cocos2d::network::HttpRequest::Type::POST);\n    std::string postdata = json_str;\n    req->setRequestData(postdata.c_str(), postdata.length());\n\n    req->setResponseCallback([=](cocos2d::network::HttpClient* sender, cocos2d::network::HttpResponse* respons){\n        \n        if ( respons->isSucceed() && respons->getResponseCode() == 200 ) {\n\n# \u3044\u308d\u3044\u308d\u304c\u3093\u3070\u3063\u3066\u304f\u3060\u3055\u3044\n\n        }\n\n    }\n\n    cocos2d::network::HttpClient::getInstance()->send(req);\n\n\n```\n\n\n\n\u306a\u3093\u3068\u306a\u304f\u308f\u304b\u308b\u3084\u308d\u3046\u3002\n\n\n\n\n\n\n", "tags": ["serverless", "DynamoDB", "APIGateway", "lambda", "\u30a2\u30d7\u30ea\u958b\u767a"]}