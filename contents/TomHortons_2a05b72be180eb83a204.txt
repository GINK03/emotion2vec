{"context": "\n\n\u306f\u3058\u3081\u306b\n\u672c\u8a18\u4e8b\u306fPython2.7, numpy 1.11, scipy 0.17, scikit-learn 0.18, matplotlib 1.5, seaborn 0.7, pandas 0.17\u3092\u4f7f\u7528\u3057\u3066\u3044\u307e\u3059\uff0e\njupyter notebook\u4e0a\u3067\u52d5\u4f5c\u78ba\u8a8d\u6e08\u307f\u3067\u3059\uff0e\nKaggle\u3067\u5358\u7d14\u306a\u5206\u985e\u554f\u984c\u89e3\u304f\u3068\u304d\uff0cMLWave\u306eAnsembling-guide\u3092\u3088\u304f\u4f7f\u3063\u3066\u3044\u307e\u3059\uff0e\n\u65e5\u672c\u8a9e\u3067\u307e\u3068\u3081\u305f\u30b5\u30a4\u30c8\u304c\u3042\u307e\u308a\u306a\u304b\u3063\u305f\u306e\u3067\uff0c\u30b5\u30f3\u30d7\u30eb\u30d7\u30ed\u30b0\u30e9\u30e0\u3082\u6dfb\u3048\u3066\u66f8\u3044\u3066\u898b\u307e\u3057\u305f\uff0e\n\n\u76ee\u6b21\n\n\u30c7\u30fc\u30bf\u306e\u751f\u6210\n\u30a2\u30f3\u30b5\u30f3\u30d6\u30eb\u5b66\u7fd2\u3067\u4f7f\u7528\u3059\u308b\u5206\u985e\u5668\u306e\u6e96\u5099\n\u30a2\u30f3\u30b5\u30f3\u30d6\u30eb\u5b66\u7fd2\u306e\u5b9f\u88c5\n\u8a55\u4fa1\n\u53c2\u8003\n\n\n1. \u30c7\u30fc\u30bf\u306e\u751f\u6210\n\u81ea\u524d\u306e\u30c7\u30fc\u30bf\u304c\u3042\u308c\u3070\u3053\u3053\u306f\u7121\u8996\u3057\u3066\u304f\u3060\u3055\u3044\uff0e\n\u3053\u3061\u3089\u306emake_classification\u3092\u7528\u3044\u30663\u6b21\u51432\u30af\u30e9\u30b9\u306e\u30c7\u30fc\u30bf\u30922000\u30b5\u30f3\u30d7\u30eb\u4f5c\u6210\u3057\u307e\u3059\uff0e\n\u30e9\u30d9\u30eb\u30c7\u30fc\u30bf\u306e\u6bd4\u7387\u30921:1\u306b\u63c3\u3048\u308b\u305f\u3081\uff0cmake_classification(flip_y=0)\u3068\u3057\u3066\u3044\u307e\u3059\uff0e\n\u305d\u306e\u5f8c\uff0c\u751f\u6210\u3057\u305f\u30c7\u30fc\u30bf\u3092train\u3068test\u3078\u534a\u3005\u306b\u5206\u5272\u3057\u3066\u3044\u307e\u3059\uff0e\n\nmake_classification.py\nfrom sklearn.datasets import make_classification\nimport pandas as pd\nimport numpy as np\n\nn_features = 3\nn_samples = 2000\ndata = np.c_[make_classification(n_samples=n_samples, n_features=n_features, n_redundant=1, n_informative=2,n_clusters_per_class=2, n_classes=2, flip_y=0)]\n\ntrain = test = np.empty((0,n_features+1), float)\nfor d in [data[data[:, n_features]==0], data[data[:, n_features]==1]]:\n    np.random.shuffle(d)\n    train = np.append(train, d[:(n_samples/4)], axis=0)\n    test = np.append(test, d[(n_samples/4):], axis=0)\nmap(lambda x: np.random.shuffle(x), [train, test])\n\n\ntrain, test\u306e\u4e2d\u8eab\u306f\u3053\u3093\u306a\u611f\u3058\uff0e\narray([[-0.96155185, -0.49879683,  0.65487916,  1.        ],\n       [-0.95225926, -1.00853786, -0.97598077,  0.        ],\n       [-0.11578056,  2.51579129, -1.23724233,  0.        ],\n       ..., \n       [-0.93715662,  0.41894292, -1.56002152,  0.        ],\n       [-0.69759832, -0.20810317, -0.01283087,  0.        ],\n       [ 0.31519506, -1.75498218,  0.89115054,  1.        ]])\n\n\u3053\u308c\u3067\u6570\u5024\u30c7\u30fc\u30bf3\u3064\u3068\u30e9\u30d9\u30eb\u30c7\u30fc\u30bf\u304c\u6e96\u5099\u3067\u304d\u307e\u3057\u305f\uff0e\n\n2. \u30a2\u30f3\u30b5\u30f3\u30d6\u30eb\u5b66\u7fd2\u3067\u4f7f\u7528\u3059\u308b\u5206\u985e\u5668\u306e\u6e96\u5099\n\u6a5f\u68b0\u5b66\u7fd2\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u3092\u6e96\u5099\u3057\u307e\u3059\uff0e\n\u4eca\u56de\u4f7f\u7528\u3059\u308b\u306e\u306f\uff0cRandomForest, KNN, ExtraTree, GradientBoosting, NaiveBays, XGBoost\u306e6\u7a2e\u985e\u3067\u3059\uff0eXGBoost\u4ee5\u5916\u306fscikit-learn\u3092\u4f7f\u7528\u3057\u3066\u304a\u308a\uff0c\u5358\u7d14\u306b\u30a4\u30f3\u30dd\u30fc\u30c8\u3059\u308b\u3060\u3051\u3067\u6e08\u307f\u307e\u3059\uff0eXGBoost\u306fpip install\u304bgit\u3067\u30d3\u30eb\u30c9\u53ef\u80fd\u3067\u3059\uff0e\n\u30a2\u30f3\u30b5\u30f3\u30d6\u30eb\u5b66\u7fd2\u3067\u4f7f\u7528\u3059\u308b\u5206\u985e\u5668\u306e\u30ea\u30b9\u30c8\u3092\u4f5c\u6210\u3057\u307e\u3059\uff0e\n\nn_jobs=-1\u3068\u3057\u3066\u3044\u308b\u306e\u3067\uff0c\u4e26\u5217\u8a08\u7b97\u3068\u306a\u308a\u307e\u3059\uff0e\u5fc5\u8981\u306b\u5fdc\u3058\u3066\u4fee\u6b63\u3057\u3066\u304f\u3060\u3055\u3044\n\u4eca\u56de\u306f\u4f7f\u7528\u3057\u3066\u3044\u307e\u305b\u3093\u304c\uff0cXGBoost 0.6\u4ee5\u964d\u3067\u306feval_matrix\u30d1\u30e9\u30e1\u30fc\u30bf\u304c\u306a\u304f\u306a\u3063\u3066\u3044\u307e\u3059\n\n\nset_clfs.py\nfrom sklearn.ensemble import RandomForestClassifier, ExtraTreesClassifier\nfrom sklearn.ensemble import GradientBoostingClassifier\nfrom sklearn.naive_bayes import GaussianNB\nfrom xgboost import XGBClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\n\nclfs = [RandomForestClassifier(n_estimators=100, n_jobs=-1, criterion='gini'),\n        ExtraTreesClassifier(n_estimators=100, n_jobs=-1, criterion='gini'),\n        GradientBoostingClassifier(learning_rate=0.05, subsample=0.5, max_depth=6, n_estimators=50),\n        KNeighborsClassifier(n_neighbors=10, n_jobs=-1),\n        GaussianNB(),\n        XGBClassifier(learning_rate =0.1, n_estimators=1000, max_depth=5, min_child_weight=1,\n              gamma=0, subsample=0.8, colsample_bytree=0.5, objective= 'binary:logistic',\n              scale_pos_weight=1, seed=0\n             )\n       ]\n\n\n\u8a66\u3057\u306bKNN\u3067\u4e8c\u5024\u5206\u985e\u3092\u3057\u3066\u307f\u307e\u3059\uff0e\n\nknn.py\nfrom sklearn.metrics import accuracy_score\n\nnbrs = KNeighborsClassifier().fit(train[:, :-1], train[:, -1])\nprint \"Acc: \", accuracy_score(test[:, -1], nbrs.predict(test[:, :-1]))\n\n\nAcc:  0.90\n\n\u7cbe\u5ea6\u306f90%\u3068\u306a\u308a\u307e\u3057\u305f\uff0e\n\u30a2\u30f3\u30b5\u30f3\u30d6\u30eb\u5b66\u7fd2\u306e\u7d50\u679c\uff0c\u3053\u306e\u7cbe\u5ea6\u304c\u3069\u3046\u5909\u5316\u3059\u308b\u304b\u6bd4\u8f03\u3057\u3066\u3044\u304d\u307e\u3059\uff0e\n\n3. \u30a2\u30f3\u30b5\u30f3\u30d6\u30eb\u5b66\u7fd2\u306e\u5b9f\u88c5\nKaggle\u306a\u3069\u306e\u30b3\u30f3\u30da\u3067\u5358\u7d14\u306a(\u753b\u50cf\u3084\u9023\u7d9a\u5024\u3067\u306a\u3044)\u5206\u985e\u554f\u984c\u3092\u53d6\u308a\u6271\u3046\u5834\u5408\u306f\uff0c\u5358\u4e00\u306e\u5b66\u7fd2\u5668\u3092\u4f7f\u3046\u3053\u3068\u306f\u307b\u3068\u3093\u3069\u3042\u308a\u307e\u305b\u3093\uff0e\u8907\u6570\u306e\u6a5f\u68b0\u5b66\u7fd2\u3092\u7d44\u307f\u5408\u308f\u305b\u308b\u30a2\u30f3\u30b5\u30f3\u30d6\u30eb\u5b66\u7fd2\u304c\u7528\u3044\u3089\u308c\u307e\u3059\uff0e\n\u77e5\u3063\u3066\u3044\u308b\u9650\u308a\u30a2\u30f3\u30b5\u30f3\u30d6\u30eb\u5b66\u7fd2\u3092\u6700\u3082\u8a73\u3057\u304f\u89e3\u8aac\u3057\u3066\u3044\u308b\u30b5\u30a4\u30c8\u306f\uff0cMLWave\u306e\u3053\u3061\u3089\u306e\u8a18\u4e8b\u306b\u306a\u308a\u307e\u3059\uff0e\n\nVoting\nAveraging\nRank averaging\nStacked generalization & blending\n\n\u4e3b\u8981\u306a\u30a2\u30f3\u30b5\u30f3\u30d6\u30eb\u5b66\u7fd2\u306f\u3053\u308c\u3089\u306e4\u3064\u3067\u3059\uff0e\u30ea\u30f3\u30af\u5148\u306e\u8a18\u4e8b\u3067\u306f\uff0cKaggle\u3067\u306e\u5b9f\u969b\u306e\u4f7f\u7528\u4f8b\u304c\u8a73\u3057\u304f\u8aac\u660e\u3055\u308c\u3066\u3044\u307e\u3059\uff0e\u975e\u5e38\u306b\u89aa\u5207\u306a\u3053\u3068\u306b\uff0cgithub\u3067\u3053\u308c\u3089\u3092\u6d3b\u7528\u3059\u308b\u30d5\u30ec\u30fc\u30e0\u30ef\u30fc\u30af\u307e\u3067\u516c\u958b\u3057\u3066\u3044\u307e\u3059\uff0e\n\u4eca\u56de\u306fStacked generalization & blending\u306b\u3064\u3044\u3066\u7d39\u4ecb\u3057\u307e\u3059\uff0e\n(github\u3067\u306fblend_proba.py\u3068\u3044\u3046\u30d7\u30ed\u30b0\u30e9\u30e0\u3067\u3059)\n\n3.1 blend_proba()\u306e\u4f7f\u7528\u4f8b\n\u672c\u95a2\u6570\u306f\uff0c\u4e8c\u5024\u5206\u985e\u3092\u30a2\u30f3\u30b5\u30f3\u30d6\u30eb\u5b66\u7fd2\u3067\u89e3\u304f\u305f\u3081\u306e\u30d5\u30ec\u30fc\u30e0\u30ef\u30fc\u30af\u306b\u306a\u308a\u307e\u3059\uff0e\u4e2d\u8eab\u306f\u975e\u5e38\u306b\u30b7\u30f3\u30d7\u30eb\u306a\u306e\u3067\uff0c\u6642\u9593\u304c\u3042\u308b\u65b9\u306f\u30b3\u30fc\u30c9\u3092\u30c1\u30a7\u30c3\u30af\u3057\u3066\u307f\u3066\u304f\u3060\u3055\u3044\uff0e\n\u3053\u3053\u3067\u306f\u6b21\u306e\u3088\u3046\u306a\u65b9\u6cd5\u3067\u5b66\u7fd2\u3057\u3066\u3044\u304d\u307e\u3059\uff0e\n\n\nstep 1\n\n\u307e\u305a\u306f\u3058\u3081\u306b\uff0c\u751f\u6210\u3057\u305f\u30c7\u30fc\u30bf\u3092RandomForest, KNN, ExtraTree, NaiveBays, GradientBoosting, XGBoost\u3067\u305d\u308c\u305e\u308c\u5b66\u7fd2\u3055\u305b\u3066\u3044\u304d\u307e\u3059\uff0e\nTraining\u30c7\u30fc\u30bf\u3067\u5b66\u7fd2\u3057\u305f\u5206\u985e\u5668\u3092\u4f7f\u3063\u3066\uff0cTesting\u30c7\u30fc\u30bf\u306e\u8a55\u4fa1\u307e\u3067\u540c\u6642\u306b\u884c\u3044\u307e\u3059\uff0e\n\nblend_proba\u3092\u30a4\u30f3\u30dd\u30fc\u30c8\u3057\u305f\u5f8c\uff0c\u6b21\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u5b9f\u884c\u3057\u307e\u3059\uff0e\n\nstep1.py\nimport blend_proba as bp\n[bp.blend_proba(clf, X_train=train[:, :-1], y=train[:, -1], X_test=test[:, :-1], save_preds=\"1\", nfolds=3) for clf in clfs]\n\n\n\u5b9f\u884c\u5f8c\uff0c\u5b9f\u884c\u3057\u305f\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u306bnpy\u30d5\u30a1\u30a4\u30eb\u304c\u751f\u6210\u3055\u308c\u3066\u3044\u307e\u3059\uff0e\n1GB_0.303855837305_16482164617e7c9d188bc75bafc06a08_test.npy\n1GB_0.303855837305_16482164617e7c9d188bc75bafc06a08_train.npy\n1Ne_0.455167671362_cddd24af66706c9fa26f6601910c92c5_test.npy\n1Ne_0.455167671362_cddd24af66706c9fa26f6601910c92c5_train.npy\n1an_0.249015612417_825e1ad5956801c2225da656822caebb_test.npy\n1an_0.249015612417_825e1ad5956801c2225da656822caebb_train.npy\n1au_0.22545173232_4b57dac04bbc037494cb592143a1c09c_test.npy\n1au_0.22545173232_4b57dac04bbc037494cb592143a1c09c_train.npy\n1ra_0.207753858339_a0cb35c894f0ad378f6bb824e1019748_test.npy\n1ra_0.207753858339_a0cb35c894f0ad378f6bb824e1019748_train.npy\n1xt_0.270981174382_e130a295809821efc1db2f64c228169c_test.npy\n1xt_0.270981174382_e130a295809821efc1db2f64c228169c_train.npy\n\nsave_preds=\"?\"\u3068\u8a2d\u5b9a\u3059\u308b\u3053\u3068\u3067\uff0c\"?+\u5206\u985e\u5668\u540d\u306e2~3\u6587\u5b57\u76ee+\u30cf\u30c3\u30b7\u30e5\u5024+test(or train).npy\u3068\u3044\u3046\u540d\u524d\u306e\u4e88\u6e2c\u7d50\u679c\u304cprobability\u3067\u51fa\u529b\u3055\u308c\u307e\u3059\uff0e\n\u3053\u306e\u5834\u5408\uff0c\u5206\u985e\u5668\u306e\u6570\u304c6\u3064\u306a\u306e\u306712\u500b\u306enpy\u30d5\u30a1\u30a4\u30eb\u304c\u751f\u6210\u3055\u308c\u307e\u3059\uff0e\n\nstep 2\n\u307e\u305a\uff0cstep 1\u3067\u751f\u6210\u3057\u305f\u30d5\u30a1\u30a4\u30eb\u3092\u8aad\u307f\u8fbc\u3080\u95a2\u6570\u3092\u4f5c\u6210\u3057\u307e\u3059\uff0e\n\n\u3053\u3053\u3067\u306f\uff0cstep 1\u3067\u751f\u6210\u3057\u305fnpy\u30d5\u30a1\u30a4\u30eb\u306f\uff0c'./first/train/', './first/test/'\u306b\u5165\u3063\u3066\u3044\u308b\u3068\u3057\u307e\u3059\uff0e\nstep 1\u3067\u5f97\u305f\u4e8c\u5024\u5206\u985e\u306e\u4e88\u6e2c\u7d50\u679c(0\u304b\u30891\u306e\u9023\u7d9a\u5024)\u3092\u5165\u529b\u3068\u3059\u308b\n\n\nread_first_stage.py\nimport sys,os\n\ndef read_npy(tr_p, te_p):\n    train_file_names = map(lambda x: tr_p + x, os.listdir(tr_p))\n    test_file_names = map(lambda x: te_p + x, os.listdir(te_p))\n\n    list_train, list_test = [], []\n    for path_train, path_test in zip(train_file_names, test_file_names):\n        frame_train, frame_test = np.load(path_train), np.load(path_test)\n        list_train.append(frame_train)\n        list_test.append(frame_test)\n    l_train, l_test = list_train[0], list_test[0]\n    for train_, test_ in zip(list_train[1:], list_test[1:]):\n        l_train = np.concatenate([l_train, train_], axis=1)\n        l_test = np.concatenate([l_test, test_], axis=1)\n    return l_train, l_test\n\nfirst_train, first_test = read_npy('./first/train/', './first/test/')\nprint first_train\n\n\ntrain\u30c7\u30fc\u30bf\u306enpy\u30d5\u30a1\u30a4\u30eb\u3092\u8aad\u307f\u8fbc\u3093\u3067\u9023\u7d50\u3057\u305f\u7d50\u679c\u304c\u3053\u3061\u3089\u3067\u3059\uff0e\n\u4e8c\u5024\u5206\u985e\u306e\u4e88\u6e2c\u7d50\u679c\u304c\u5b66\u7fd2\u5668\u3054\u3068\u306b\u5165\u3063\u3066\u304a\u308a\uff0ctrain\u3068test\u306b\u306f12\u500b\u306e\u5909\u6570\u304c\u542b\u307e\u308c\u3066\u3044\u307e\u3059\uff0e\narray([[  1.07884407e-04,   9.99892116e-01,   0.00000000e+00, ...,\n          9.93333333e-01,   2.50875433e-04,   9.99749125e-01],\n       [  9.96784627e-01,   3.21540073e-03,   9.76666667e-01, ...,\n          2.00000000e-02,   9.53099981e-01,   4.69000190e-02],\n       [  5.11407852e-05,   9.99948859e-01,   5.33333333e-02, ...,\n          9.06666667e-01,   1.66652470e-06,   9.99998333e-01],\n       ..., \n       [  4.93575096e-01,   5.06424904e-01,   6.30000000e-01, ...,\n          4.03333333e-01,   9.49199952e-01,   5.08000478e-02],\n       [  3.96782160e-03,   9.96032178e-01,   2.66666667e-02, ...,\n          9.46666667e-01,   2.46422552e-06,   9.99997536e-01],\n       [  9.99466836e-01,   5.33185899e-04,   9.03333333e-01, ...,\n          8.00000000e-02,   9.54109081e-01,   4.58909185e-02]])\n\n\u3053\u306estep 1\u306e\u8a55\u4fa1\u7d50\u679c\u3092\u4f7f\u7528\u3057\u3066\uff0cstep 2\u306e\u5b66\u7fd2\u3092\u884c\u3044\u307e\u3059\uff0e\n\nstep2.py\n[bp.blend_proba(clf, X_train=first_train, y=train[:, -1], X_test=first_test, save_preds=\"2\", nfolds=3) for clf in clfs]\n\n\n\u5b9f\u884c\u5f8c\uff0c12\u500b\u306enpy\u30d5\u30a1\u30a4\u30eb\u304c\u751f\u6210\u3055\u308c\u307e\u3059\uff0e\n2GB_0.37311622448_16482164617e7c9d188bc75bafc06a08_test.npy\n2GB_0.37311622448_16482164617e7c9d188bc75bafc06a08_train.npy\n2Ne_0.784523345103_cddd24af66706c9fa26f6601910c92c5_test.npy\n2Ne_0.784523345103_cddd24af66706c9fa26f6601910c92c5_train.npy\n2an_0.421335902473_825e1ad5956801c2225da656822caebb_test.npy\n2an_0.421335902473_825e1ad5956801c2225da656822caebb_train.npy\n2au_1.9348828025_4b57dac04bbc037494cb592143a1c09c_test.npy\n2au_1.9348828025_4b57dac04bbc037494cb592143a1c09c_train.npy\n2ra_0.292331269114_a0cb35c894f0ad378f6bb824e1019748_test.npy\n2ra_0.292331269114_a0cb35c894f0ad378f6bb824e1019748_train.npy\n2xt_0.451990280749_e130a295809821efc1db2f64c228169c_test.npy\n2xt_0.451990280749_e130a295809821efc1db2f64c228169c_train.npy\n\n\nstep 3\nstep 2\u3067\u751f\u6210\u3057\u305f\u30c7\u30fc\u30bf\u3092read\u3057\uff0cXGBoost\u3067\u5b66\u7fd2\u3057\u307e\u3059\uff0e\n\n\u3053\u3053\u3067\u306f\uff0cstep 2\u3067\u751f\u6210\u3057\u305fnpy\u30d5\u30a1\u30a4\u30eb\u306f\uff0c'./second/train/', './second/test/'\u306b\u5165\u3063\u3066\u3044\u308b\u3068\u3057\u307e\u3059\uff0e\nsave_preds\u306e\u4ee3\u308f\u308a\u306b\uff0cblend_proba(save_test_only=\"3\")\u3068\u3059\u308b\u3053\u3068\u3067\uff0c\u78ba\u7387\u3067\u306f\u306a\u304f0, 1\u3067\u51fa\u529b\u3057\u305f\u30d5\u30a1\u30a4\u30eb\u3092\u751f\u6210\u3057\u307e\u3059\uff0e\n\n\nstep3.py\nsecond_train, second_test = read_data('./second/train/', './second/test/')\n\nclf = XGBClassifier(learning_rate =0.1, n_estimators=1000, max_depth=5, min_child_weight=1,\n                    gamma=0, subsample=0.8, colsample_bytree=0.5, objective= 'binary:logistic',\n                    scale_pos_weight=1, seed=0\n                   )\n\nbp.blend_proba(clf, X_train=second_train, y=second_train[:, -1], X_test=second_test, save_test_only=\"3\", nfolds=3)\n\n\n3+GB+\u30cf\u30c3\u30b7\u30e5\u5024+test.txt\u3068\u3044\u3046\u30d5\u30a1\u30a4\u30eb\u304c\u751f\u6210\u3055\u308c\u307e\u3057\u305f\uff0e\n3GB0.338917307945_16482164617e7c9d188bc75bafc06a08_test.txt\n\ncheck_ans.py\nans = np.loadtxt('./3GB_0.338917307945_16482164617e7c9d188bc75bafc06a08_test.txt')\nprint \"Acc: \", accuracy_score(test[:, -1], ans)\n\n\n\u7cbe\u5ea6\u306f\u6b21\u306e\u901a\u308a\uff0e\nAcc:  0.90\n\n\u7279\u306b\u7cbe\u5ea6\u304c\u4e0a\u304c\u3063\u305f\u308f\u3051\u3067\u306f\u306a\u3044\u3088\u3046\u3067\u3059\uff0e\n\n4. \u8a55\u4fa1\n\u4f55\u5ea6\u304b\u8a66\u3057\u305f\u7d50\u679c\uff0cKNN\u3068\u6bd4\u8f03\u3057\u3066\u7cbe\u5ea6\u304c\u5909\u308f\u3089\u306a\u3044(\u3082\u3057\u304f\u306f\u4f4e\u4e0b)\u7d50\u679c\u3068\u306a\u308a\u307e\u3057\u305f\uff0e\n\u305d\u3082\u305d\u3082\u751f\u6210\u3057\u305f\u30c7\u30fc\u30bf\u304c\u5c0f\u898f\u6a21\u3060\u3063\u305f\u306e\u3068\uff0c\u4eba\u5de5\u7684\u306b\u751f\u6210\u3057\u305f\u30c7\u30fc\u30bf\u81ea\u4f53\u306b\u554f\u984c\u304c\u3042\u3063\u305f\u53ef\u80fd\u6027\u304c\u3042\u308a\u307e\u3059\uff0e\nMLWave\u3067\u7d39\u4ecb\u3055\u308c\u3066\u3044\u308b\u3088\u3046\u306b\uff0cKaggle\u306e\u30c7\u30fc\u30bf\u3067\u5909\u6570\u304c\u5927\u91cf\u306b\u3042\u308b\u5834\u5408\u3067\u306f\uff0c\u7cbe\u5ea6\u306e\u304c\u6570%\u5411\u4e0a\u3059\u308b\u3053\u3068\u304c\u3088\u304f\u3042\u308a\u307e\u3059\uff0e\n\nKaggle-Ensemble-Guide/correlations.py\u306b\u3064\u3044\u3066\n\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u306e\u4e2d\u306b\uff0ccorrelations.py\u3068\u3044\u3046\u30d5\u30a1\u30a4\u30eb\u304c\u3042\u308a\u307e\u3059\uff0e\n\u4e2d\u3092\u898b\u3066\u307f\u308b\u3068\uff0c\u500b\u3005\u306e\u5206\u985e\u7d50\u679c\u304b\u3089\u4e88\u6e2c\u7d50\u679c\u306e\u76f8\u95a2\u4fc2\u6570\u3092\u7b97\u51fa\u3057\u3066\u3044\u307e\u3059\uff0e\nMLWave\u306e\u8a18\u4e8b\u306b\u3082\u3042\u308a\u307e\u3059\u304c\uff0c\u76f8\u95a2\u306e\u5c11\u306a\u3044\u5206\u985e\u5668\u3092\u7d44\u307f\u5408\u308f\u305b\u308b\u307b\u3069\uff0c\u4e88\u6e2c\u7cbe\u5ea6\u306e\u5411\u4e0a\u304c\u898b\u8fbc\u3081\u307e\u3059\uff0e\n(\u5f53\u305f\u308a\u524d\u306e\u8a71\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u304c)\n\u3053\u306e\u3088\u3046\u306b\u76f8\u95a2\u4fc2\u6570\u3092\u30c1\u30a7\u30c3\u30af\u3057\u306a\u304c\u3089\uff0c\n\n\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u306e\u7d44\u307f\u5408\u308f\u305b\n\u30aa\u30ea\u30b8\u30ca\u30eb\u30c7\u30fc\u30bf\u306e\u4e0b\u51e6\u7406\n\u5206\u985e\u5668\u306escore\u95a2\u6570\u306e\u8abf\u6574\n\n\u3092\u3044\u308d\u3044\u308d\u8a66\u3057\u3066\u7cbe\u5ea6\u3092\u4e0a\u3052\u3066\u3044\u304d\u307e\u3059\uff0e\n\n\u591a\u30af\u30e9\u30b9\u5206\u985e\u306b\u3064\u3044\u3066\nMLWave\u3067\u306f\uff0c\u30a2\u30f3\u30b5\u30f3\u30d6\u30eb\u5b66\u7fd2\u3092\u7528\u3044\u305f\u591a\u30af\u30e9\u30b9\u5206\u985e\u3082\u7d39\u4ecb\u3057\u3066\u3044\u307e\u3059\uff0e\n\u8a18\u4e8b\u306e\u4e2d\u3067\u306f\uff0c\u5404\u30af\u30e9\u30b9\u3054\u3068\u306b\u305d\u308c\u305e\u308c\u30a2\u30f3\u30b5\u30f3\u30d6\u30eb\u5b66\u7fd2\u3092\u5b9f\u88c5\u3057\uff0c\u305d\u308c\u305e\u308c\u306e\u4e88\u6e2c\u7d50\u679c\u3092\u307e\u3068\u3081\u308b\u3053\u3068\u3067\u591a\u30af\u30e9\u30b9\u5206\u985e\u3092\u5b9f\u88c5\u3057\u3066\u3044\u307e\u3059\uff0e\n(One-vs-the-rest)\n\n5. \u53c2\u8003\nKaggle Ensemble Guide\n# \u306f\u3058\u3081\u306b\n\u672c\u8a18\u4e8b\u306fPython2.7, numpy 1.11, scipy 0.17, scikit-learn 0.18, matplotlib 1.5, seaborn 0.7, pandas 0.17\u3092\u4f7f\u7528\u3057\u3066\u3044\u307e\u3059\uff0e\njupyter notebook\u4e0a\u3067\u52d5\u4f5c\u78ba\u8a8d\u6e08\u307f\u3067\u3059\uff0e\n\nKaggle\u3067\u5358\u7d14\u306a\u5206\u985e\u554f\u984c\u89e3\u304f\u3068\u304d\uff0cMLWave\u306eAnsembling-guide\u3092\u3088\u304f\u4f7f\u3063\u3066\u3044\u307e\u3059\uff0e\n\u65e5\u672c\u8a9e\u3067\u307e\u3068\u3081\u305f\u30b5\u30a4\u30c8\u304c\u3042\u307e\u308a\u306a\u304b\u3063\u305f\u306e\u3067\uff0c\u30b5\u30f3\u30d7\u30eb\u30d7\u30ed\u30b0\u30e9\u30e0\u3082\u6dfb\u3048\u3066\u66f8\u3044\u3066\u898b\u307e\u3057\u305f\uff0e\n\n# \u76ee\u6b21\n1. \u30c7\u30fc\u30bf\u306e\u751f\u6210\n2. \u30a2\u30f3\u30b5\u30f3\u30d6\u30eb\u5b66\u7fd2\u3067\u4f7f\u7528\u3059\u308b\u5206\u985e\u5668\u306e\u6e96\u5099\n3. \u30a2\u30f3\u30b5\u30f3\u30d6\u30eb\u5b66\u7fd2\u306e\u5b9f\u88c5\n4. \u8a55\u4fa1\n5. \u53c2\u8003\n\n# 1. \u30c7\u30fc\u30bf\u306e\u751f\u6210\n\u81ea\u524d\u306e\u30c7\u30fc\u30bf\u304c\u3042\u308c\u3070\u3053\u3053\u306f\u7121\u8996\u3057\u3066\u304f\u3060\u3055\u3044\uff0e\n\n[\u3053\u3061\u3089](http://qiita.com/TomHortons/items/683e6fc7e57f76472d68)\u306emake_classification\u3092\u7528\u3044\u30663\u6b21\u51432\u30af\u30e9\u30b9\u306e\u30c7\u30fc\u30bf\u30922000\u30b5\u30f3\u30d7\u30eb\u4f5c\u6210\u3057\u307e\u3059\uff0e\n\u30e9\u30d9\u30eb\u30c7\u30fc\u30bf\u306e\u6bd4\u7387\u30921:1\u306b\u63c3\u3048\u308b\u305f\u3081\uff0cmake_classification(flip_y=0)\u3068\u3057\u3066\u3044\u307e\u3059\uff0e\n\n\u305d\u306e\u5f8c\uff0c\u751f\u6210\u3057\u305f\u30c7\u30fc\u30bf\u3092train\u3068test\u3078\u534a\u3005\u306b\u5206\u5272\u3057\u3066\u3044\u307e\u3059\uff0e\n\n```make_classification.py\nfrom sklearn.datasets import make_classification\nimport pandas as pd\nimport numpy as np\n\nn_features = 3\nn_samples = 2000\ndata = np.c_[make_classification(n_samples=n_samples, n_features=n_features, n_redundant=1, n_informative=2,n_clusters_per_class=2, n_classes=2, flip_y=0)]\n\ntrain = test = np.empty((0,n_features+1), float)\nfor d in [data[data[:, n_features]==0], data[data[:, n_features]==1]]:\n    np.random.shuffle(d)\n    train = np.append(train, d[:(n_samples/4)], axis=0)\n    test = np.append(test, d[(n_samples/4):], axis=0)\nmap(lambda x: np.random.shuffle(x), [train, test])\n```\n\ntrain, test\u306e\u4e2d\u8eab\u306f\u3053\u3093\u306a\u611f\u3058\uff0e\n\n```\narray([[-0.96155185, -0.49879683,  0.65487916,  1.        ],\n       [-0.95225926, -1.00853786, -0.97598077,  0.        ],\n       [-0.11578056,  2.51579129, -1.23724233,  0.        ],\n       ..., \n       [-0.93715662,  0.41894292, -1.56002152,  0.        ],\n       [-0.69759832, -0.20810317, -0.01283087,  0.        ],\n       [ 0.31519506, -1.75498218,  0.89115054,  1.        ]])\n```\n\n\u3053\u308c\u3067\u6570\u5024\u30c7\u30fc\u30bf3\u3064\u3068\u30e9\u30d9\u30eb\u30c7\u30fc\u30bf\u304c\u6e96\u5099\u3067\u304d\u307e\u3057\u305f\uff0e\n\n# 2. \u30a2\u30f3\u30b5\u30f3\u30d6\u30eb\u5b66\u7fd2\u3067\u4f7f\u7528\u3059\u308b\u5206\u985e\u5668\u306e\u6e96\u5099\n\u6a5f\u68b0\u5b66\u7fd2\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u3092\u6e96\u5099\u3057\u307e\u3059\uff0e\n\u4eca\u56de\u4f7f\u7528\u3059\u308b\u306e\u306f\uff0cRandomForest, KNN, ExtraTree, GradientBoosting, NaiveBays, XGBoost\u306e6\u7a2e\u985e\u3067\u3059\uff0eXGBoost\u4ee5\u5916\u306fscikit-learn\u3092\u4f7f\u7528\u3057\u3066\u304a\u308a\uff0c\u5358\u7d14\u306b\u30a4\u30f3\u30dd\u30fc\u30c8\u3059\u308b\u3060\u3051\u3067\u6e08\u307f\u307e\u3059\uff0e[XGBoost](https://github.com/dmlc/xgboost)\u306fpip install\u304bgit\u3067\u30d3\u30eb\u30c9\u53ef\u80fd\u3067\u3059\uff0e\n\n\u30a2\u30f3\u30b5\u30f3\u30d6\u30eb\u5b66\u7fd2\u3067\u4f7f\u7528\u3059\u308b\u5206\u985e\u5668\u306e\u30ea\u30b9\u30c8\u3092\u4f5c\u6210\u3057\u307e\u3059\uff0e\n\n* n_jobs=-1\u3068\u3057\u3066\u3044\u308b\u306e\u3067\uff0c\u4e26\u5217\u8a08\u7b97\u3068\u306a\u308a\u307e\u3059\uff0e\u5fc5\u8981\u306b\u5fdc\u3058\u3066\u4fee\u6b63\u3057\u3066\u304f\u3060\u3055\u3044\n* \u4eca\u56de\u306f\u4f7f\u7528\u3057\u3066\u3044\u307e\u305b\u3093\u304c\uff0cXGBoost 0.6\u4ee5\u964d\u3067\u306feval_matrix\u30d1\u30e9\u30e1\u30fc\u30bf\u304c\u306a\u304f\u306a\u3063\u3066\u3044\u307e\u3059\n\n```set_clfs.py\nfrom sklearn.ensemble import RandomForestClassifier, ExtraTreesClassifier\nfrom sklearn.ensemble import GradientBoostingClassifier\nfrom sklearn.naive_bayes import GaussianNB\nfrom xgboost import XGBClassifier\nfrom sklearn.neighbors import KNeighborsClassifier\n\nclfs = [RandomForestClassifier(n_estimators=100, n_jobs=-1, criterion='gini'),\n        ExtraTreesClassifier(n_estimators=100, n_jobs=-1, criterion='gini'),\n        GradientBoostingClassifier(learning_rate=0.05, subsample=0.5, max_depth=6, n_estimators=50),\n        KNeighborsClassifier(n_neighbors=10, n_jobs=-1),\n        GaussianNB(),\n        XGBClassifier(learning_rate =0.1, n_estimators=1000, max_depth=5, min_child_weight=1,\n              gamma=0, subsample=0.8, colsample_bytree=0.5, objective= 'binary:logistic',\n              scale_pos_weight=1, seed=0\n             )\n       ]\n```\n\n\u8a66\u3057\u306bKNN\u3067\u4e8c\u5024\u5206\u985e\u3092\u3057\u3066\u307f\u307e\u3059\uff0e\n\n```knn.py\nfrom sklearn.metrics import accuracy_score\n\nnbrs = KNeighborsClassifier().fit(train[:, :-1], train[:, -1])\nprint \"Acc: \", accuracy_score(test[:, -1], nbrs.predict(test[:, :-1]))\n```\n\n```\nAcc:  0.90\n```\n\n\u7cbe\u5ea6\u306f90%\u3068\u306a\u308a\u307e\u3057\u305f\uff0e\n\u30a2\u30f3\u30b5\u30f3\u30d6\u30eb\u5b66\u7fd2\u306e\u7d50\u679c\uff0c\u3053\u306e\u7cbe\u5ea6\u304c\u3069\u3046\u5909\u5316\u3059\u308b\u304b\u6bd4\u8f03\u3057\u3066\u3044\u304d\u307e\u3059\uff0e\n\n# 3. \u30a2\u30f3\u30b5\u30f3\u30d6\u30eb\u5b66\u7fd2\u306e\u5b9f\u88c5\nKaggle\u306a\u3069\u306e\u30b3\u30f3\u30da\u3067\u5358\u7d14\u306a(\u753b\u50cf\u3084\u9023\u7d9a\u5024\u3067\u306a\u3044)\u5206\u985e\u554f\u984c\u3092\u53d6\u308a\u6271\u3046\u5834\u5408\u306f\uff0c\u5358\u4e00\u306e\u5b66\u7fd2\u5668\u3092\u4f7f\u3046\u3053\u3068\u306f\u307b\u3068\u3093\u3069\u3042\u308a\u307e\u305b\u3093\uff0e\u8907\u6570\u306e\u6a5f\u68b0\u5b66\u7fd2\u3092\u7d44\u307f\u5408\u308f\u305b\u308b\u30a2\u30f3\u30b5\u30f3\u30d6\u30eb\u5b66\u7fd2\u304c\u7528\u3044\u3089\u308c\u307e\u3059\uff0e\n\u77e5\u3063\u3066\u3044\u308b\u9650\u308a\u30a2\u30f3\u30b5\u30f3\u30d6\u30eb\u5b66\u7fd2\u3092\u6700\u3082\u8a73\u3057\u304f\u89e3\u8aac\u3057\u3066\u3044\u308b\u30b5\u30a4\u30c8\u306f\uff0cMLWave\u306e[\u3053\u3061\u3089\u306e\u8a18\u4e8b](http://mlwave.com/kaggle-ensembling-guide/)\u306b\u306a\u308a\u307e\u3059\uff0e\n\n* Voting\n* Averaging\n* Rank averaging\n* Stacked generalization & blending\n\n\u4e3b\u8981\u306a\u30a2\u30f3\u30b5\u30f3\u30d6\u30eb\u5b66\u7fd2\u306f\u3053\u308c\u3089\u306e4\u3064\u3067\u3059\uff0e\u30ea\u30f3\u30af\u5148\u306e\u8a18\u4e8b\u3067\u306f\uff0cKaggle\u3067\u306e\u5b9f\u969b\u306e\u4f7f\u7528\u4f8b\u304c\u8a73\u3057\u304f\u8aac\u660e\u3055\u308c\u3066\u3044\u307e\u3059\uff0e\u975e\u5e38\u306b\u89aa\u5207\u306a\u3053\u3068\u306b\uff0cgithub\u3067[\u3053\u308c\u3089\u3092\u6d3b\u7528\u3059\u308b\u30d5\u30ec\u30fc\u30e0\u30ef\u30fc\u30af](https://github.com/MLWave/Kaggle-Ensemble-Guide)\u307e\u3067\u516c\u958b\u3057\u3066\u3044\u307e\u3059\uff0e\n\u4eca\u56de\u306fStacked generalization & blending\u306b\u3064\u3044\u3066\u7d39\u4ecb\u3057\u307e\u3059\uff0e\n(github\u3067\u306fblend_proba.py\u3068\u3044\u3046\u30d7\u30ed\u30b0\u30e9\u30e0\u3067\u3059)\n\n## 3.1 blend_proba()\u306e\u4f7f\u7528\u4f8b\n\u672c\u95a2\u6570\u306f\uff0c\u4e8c\u5024\u5206\u985e\u3092\u30a2\u30f3\u30b5\u30f3\u30d6\u30eb\u5b66\u7fd2\u3067\u89e3\u304f\u305f\u3081\u306e\u30d5\u30ec\u30fc\u30e0\u30ef\u30fc\u30af\u306b\u306a\u308a\u307e\u3059\uff0e\u4e2d\u8eab\u306f\u975e\u5e38\u306b\u30b7\u30f3\u30d7\u30eb\u306a\u306e\u3067\uff0c\u6642\u9593\u304c\u3042\u308b\u65b9\u306f\u30b3\u30fc\u30c9\u3092\u30c1\u30a7\u30c3\u30af\u3057\u3066\u307f\u3066\u304f\u3060\u3055\u3044\uff0e\n\u3053\u3053\u3067\u306f\u6b21\u306e\u3088\u3046\u306a\u65b9\u6cd5\u3067\u5b66\u7fd2\u3057\u3066\u3044\u304d\u307e\u3059\uff0e\n\n![Picture1.png](https://qiita-image-store.s3.amazonaws.com/0/72093/8d405598-eb9e-d1cc-e75e-7bde0375a59f.png)\n\n### step 1\n* \u307e\u305a\u306f\u3058\u3081\u306b\uff0c\u751f\u6210\u3057\u305f\u30c7\u30fc\u30bf\u3092RandomForest, KNN, ExtraTree, NaiveBays, GradientBoosting, XGBoost\u3067\u305d\u308c\u305e\u308c\u5b66\u7fd2\u3055\u305b\u3066\u3044\u304d\u307e\u3059\uff0e\n* Training\u30c7\u30fc\u30bf\u3067\u5b66\u7fd2\u3057\u305f\u5206\u985e\u5668\u3092\u4f7f\u3063\u3066\uff0cTesting\u30c7\u30fc\u30bf\u306e\u8a55\u4fa1\u307e\u3067\u540c\u6642\u306b\u884c\u3044\u307e\u3059\uff0e\n\nblend_proba\u3092\u30a4\u30f3\u30dd\u30fc\u30c8\u3057\u305f\u5f8c\uff0c\u6b21\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u5b9f\u884c\u3057\u307e\u3059\uff0e\n\n```step1.py\nimport blend_proba as bp\n[bp.blend_proba(clf, X_train=train[:, :-1], y=train[:, -1], X_test=test[:, :-1], save_preds=\"1\", nfolds=3) for clf in clfs]\n```\n\n\u5b9f\u884c\u5f8c\uff0c\u5b9f\u884c\u3057\u305f\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u306bnpy\u30d5\u30a1\u30a4\u30eb\u304c\u751f\u6210\u3055\u308c\u3066\u3044\u307e\u3059\uff0e\n\n```\n1GB_0.303855837305_16482164617e7c9d188bc75bafc06a08_test.npy\n1GB_0.303855837305_16482164617e7c9d188bc75bafc06a08_train.npy\n1Ne_0.455167671362_cddd24af66706c9fa26f6601910c92c5_test.npy\n1Ne_0.455167671362_cddd24af66706c9fa26f6601910c92c5_train.npy\n1an_0.249015612417_825e1ad5956801c2225da656822caebb_test.npy\n1an_0.249015612417_825e1ad5956801c2225da656822caebb_train.npy\n1au_0.22545173232_4b57dac04bbc037494cb592143a1c09c_test.npy\n1au_0.22545173232_4b57dac04bbc037494cb592143a1c09c_train.npy\n1ra_0.207753858339_a0cb35c894f0ad378f6bb824e1019748_test.npy\n1ra_0.207753858339_a0cb35c894f0ad378f6bb824e1019748_train.npy\n1xt_0.270981174382_e130a295809821efc1db2f64c228169c_test.npy\n1xt_0.270981174382_e130a295809821efc1db2f64c228169c_train.npy\n```\n\nsave_preds=\"?\"\u3068\u8a2d\u5b9a\u3059\u308b\u3053\u3068\u3067\uff0c\"?+\u5206\u985e\u5668\u540d\u306e2~3\u6587\u5b57\u76ee+\u30cf\u30c3\u30b7\u30e5\u5024+test(or train).npy\u3068\u3044\u3046\u540d\u524d\u306e\u4e88\u6e2c\u7d50\u679c\u304cprobability\u3067\u51fa\u529b\u3055\u308c\u307e\u3059\uff0e\n\u3053\u306e\u5834\u5408\uff0c\u5206\u985e\u5668\u306e\u6570\u304c6\u3064\u306a\u306e\u306712\u500b\u306enpy\u30d5\u30a1\u30a4\u30eb\u304c\u751f\u6210\u3055\u308c\u307e\u3059\uff0e\n\n### step 2\n\u307e\u305a\uff0cstep 1\u3067\u751f\u6210\u3057\u305f\u30d5\u30a1\u30a4\u30eb\u3092\u8aad\u307f\u8fbc\u3080\u95a2\u6570\u3092\u4f5c\u6210\u3057\u307e\u3059\uff0e\n\n* __\u3053\u3053\u3067\u306f\uff0cstep 1\u3067\u751f\u6210\u3057\u305fnpy\u30d5\u30a1\u30a4\u30eb\u306f\uff0c'./first/train/', './first/test/'\u306b\u5165\u3063\u3066\u3044\u308b\u3068\u3057\u307e\u3059\uff0e__\n* step 1\u3067\u5f97\u305f\u4e8c\u5024\u5206\u985e\u306e\u4e88\u6e2c\u7d50\u679c(0\u304b\u30891\u306e\u9023\u7d9a\u5024)\u3092\u5165\u529b\u3068\u3059\u308b\n\n```read_first_stage.py\nimport sys,os\n\ndef read_npy(tr_p, te_p):\n    train_file_names = map(lambda x: tr_p + x, os.listdir(tr_p))\n    test_file_names = map(lambda x: te_p + x, os.listdir(te_p))\n\n    list_train, list_test = [], []\n    for path_train, path_test in zip(train_file_names, test_file_names):\n        frame_train, frame_test = np.load(path_train), np.load(path_test)\n        list_train.append(frame_train)\n        list_test.append(frame_test)\n    l_train, l_test = list_train[0], list_test[0]\n    for train_, test_ in zip(list_train[1:], list_test[1:]):\n        l_train = np.concatenate([l_train, train_], axis=1)\n        l_test = np.concatenate([l_test, test_], axis=1)\n    return l_train, l_test\n\nfirst_train, first_test = read_npy('./first/train/', './first/test/')\nprint first_train\n```\n\ntrain\u30c7\u30fc\u30bf\u306enpy\u30d5\u30a1\u30a4\u30eb\u3092\u8aad\u307f\u8fbc\u3093\u3067\u9023\u7d50\u3057\u305f\u7d50\u679c\u304c\u3053\u3061\u3089\u3067\u3059\uff0e\n\u4e8c\u5024\u5206\u985e\u306e\u4e88\u6e2c\u7d50\u679c\u304c\u5b66\u7fd2\u5668\u3054\u3068\u306b\u5165\u3063\u3066\u304a\u308a\uff0ctrain\u3068test\u306b\u306f12\u500b\u306e\u5909\u6570\u304c\u542b\u307e\u308c\u3066\u3044\u307e\u3059\uff0e\n\n```\narray([[  1.07884407e-04,   9.99892116e-01,   0.00000000e+00, ...,\n          9.93333333e-01,   2.50875433e-04,   9.99749125e-01],\n       [  9.96784627e-01,   3.21540073e-03,   9.76666667e-01, ...,\n          2.00000000e-02,   9.53099981e-01,   4.69000190e-02],\n       [  5.11407852e-05,   9.99948859e-01,   5.33333333e-02, ...,\n          9.06666667e-01,   1.66652470e-06,   9.99998333e-01],\n       ..., \n       [  4.93575096e-01,   5.06424904e-01,   6.30000000e-01, ...,\n          4.03333333e-01,   9.49199952e-01,   5.08000478e-02],\n       [  3.96782160e-03,   9.96032178e-01,   2.66666667e-02, ...,\n          9.46666667e-01,   2.46422552e-06,   9.99997536e-01],\n       [  9.99466836e-01,   5.33185899e-04,   9.03333333e-01, ...,\n          8.00000000e-02,   9.54109081e-01,   4.58909185e-02]])\n```\n\n\u3053\u306estep 1\u306e\u8a55\u4fa1\u7d50\u679c\u3092\u4f7f\u7528\u3057\u3066\uff0cstep 2\u306e\u5b66\u7fd2\u3092\u884c\u3044\u307e\u3059\uff0e\n\n```step2.py\n[bp.blend_proba(clf, X_train=first_train, y=train[:, -1], X_test=first_test, save_preds=\"2\", nfolds=3) for clf in clfs]\n```\n\n\u5b9f\u884c\u5f8c\uff0c12\u500b\u306enpy\u30d5\u30a1\u30a4\u30eb\u304c\u751f\u6210\u3055\u308c\u307e\u3059\uff0e\n\n```\n2GB_0.37311622448_16482164617e7c9d188bc75bafc06a08_test.npy\n2GB_0.37311622448_16482164617e7c9d188bc75bafc06a08_train.npy\n2Ne_0.784523345103_cddd24af66706c9fa26f6601910c92c5_test.npy\n2Ne_0.784523345103_cddd24af66706c9fa26f6601910c92c5_train.npy\n2an_0.421335902473_825e1ad5956801c2225da656822caebb_test.npy\n2an_0.421335902473_825e1ad5956801c2225da656822caebb_train.npy\n2au_1.9348828025_4b57dac04bbc037494cb592143a1c09c_test.npy\n2au_1.9348828025_4b57dac04bbc037494cb592143a1c09c_train.npy\n2ra_0.292331269114_a0cb35c894f0ad378f6bb824e1019748_test.npy\n2ra_0.292331269114_a0cb35c894f0ad378f6bb824e1019748_train.npy\n2xt_0.451990280749_e130a295809821efc1db2f64c228169c_test.npy\n2xt_0.451990280749_e130a295809821efc1db2f64c228169c_train.npy\n```\n\n### step 3\nstep 2\u3067\u751f\u6210\u3057\u305f\u30c7\u30fc\u30bf\u3092read\u3057\uff0cXGBoost\u3067\u5b66\u7fd2\u3057\u307e\u3059\uff0e\n\n* __\u3053\u3053\u3067\u306f\uff0cstep 2\u3067\u751f\u6210\u3057\u305fnpy\u30d5\u30a1\u30a4\u30eb\u306f\uff0c'./second/train/', './second/test/'\u306b\u5165\u3063\u3066\u3044\u308b\u3068\u3057\u307e\u3059\uff0e__\n* save_preds\u306e\u4ee3\u308f\u308a\u306b\uff0cblend_proba(save_test_only=\"3\")\u3068\u3059\u308b\u3053\u3068\u3067\uff0c\u78ba\u7387\u3067\u306f\u306a\u304f0, 1\u3067\u51fa\u529b\u3057\u305f\u30d5\u30a1\u30a4\u30eb\u3092\u751f\u6210\u3057\u307e\u3059\uff0e\n\n```step3.py\nsecond_train, second_test = read_data('./second/train/', './second/test/')\n\nclf = XGBClassifier(learning_rate =0.1, n_estimators=1000, max_depth=5, min_child_weight=1,\n                    gamma=0, subsample=0.8, colsample_bytree=0.5, objective= 'binary:logistic',\n                    scale_pos_weight=1, seed=0\n                   )\n\nbp.blend_proba(clf, X_train=second_train, y=second_train[:, -1], X_test=second_test, save_test_only=\"3\", nfolds=3)\n```\n\n3+GB+\u30cf\u30c3\u30b7\u30e5\u5024+_test.txt\u3068\u3044\u3046\u30d5\u30a1\u30a4\u30eb\u304c\u751f\u6210\u3055\u308c\u307e\u3057\u305f\uff0e\n3GB_0.338917307945_16482164617e7c9d188bc75bafc06a08_test.txt\n\n```check_ans.py\nans = np.loadtxt('./3GB_0.338917307945_16482164617e7c9d188bc75bafc06a08_test.txt')\nprint \"Acc: \", accuracy_score(test[:, -1], ans)\n```\n\n\u7cbe\u5ea6\u306f\u6b21\u306e\u901a\u308a\uff0e\n\n```\nAcc:  0.90\n```\n\n\u7279\u306b\u7cbe\u5ea6\u304c\u4e0a\u304c\u3063\u305f\u308f\u3051\u3067\u306f\u306a\u3044\u3088\u3046\u3067\u3059\uff0e\n\n# 4. \u8a55\u4fa1\n\n\u4f55\u5ea6\u304b\u8a66\u3057\u305f\u7d50\u679c\uff0cKNN\u3068\u6bd4\u8f03\u3057\u3066\u7cbe\u5ea6\u304c\u5909\u308f\u3089\u306a\u3044(\u3082\u3057\u304f\u306f\u4f4e\u4e0b)\u7d50\u679c\u3068\u306a\u308a\u307e\u3057\u305f\uff0e\n\u305d\u3082\u305d\u3082\u751f\u6210\u3057\u305f\u30c7\u30fc\u30bf\u304c\u5c0f\u898f\u6a21\u3060\u3063\u305f\u306e\u3068\uff0c\u4eba\u5de5\u7684\u306b\u751f\u6210\u3057\u305f\u30c7\u30fc\u30bf\u81ea\u4f53\u306b\u554f\u984c\u304c\u3042\u3063\u305f\u53ef\u80fd\u6027\u304c\u3042\u308a\u307e\u3059\uff0e\nMLWave\u3067\u7d39\u4ecb\u3055\u308c\u3066\u3044\u308b\u3088\u3046\u306b\uff0cKaggle\u306e\u30c7\u30fc\u30bf\u3067\u5909\u6570\u304c\u5927\u91cf\u306b\u3042\u308b\u5834\u5408\u3067\u306f\uff0c\u7cbe\u5ea6\u306e\u304c\u6570%\u5411\u4e0a\u3059\u308b\u3053\u3068\u304c\u3088\u304f\u3042\u308a\u307e\u3059\uff0e\n\n## Kaggle-Ensemble-Guide/correlations.py\u306b\u3064\u3044\u3066\n\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u306e\u4e2d\u306b\uff0ccorrelations.py\u3068\u3044\u3046\u30d5\u30a1\u30a4\u30eb\u304c\u3042\u308a\u307e\u3059\uff0e\n\u4e2d\u3092\u898b\u3066\u307f\u308b\u3068\uff0c\u500b\u3005\u306e\u5206\u985e\u7d50\u679c\u304b\u3089\u4e88\u6e2c\u7d50\u679c\u306e\u76f8\u95a2\u4fc2\u6570\u3092\u7b97\u51fa\u3057\u3066\u3044\u307e\u3059\uff0e\nMLWave\u306e\u8a18\u4e8b\u306b\u3082\u3042\u308a\u307e\u3059\u304c\uff0c\u76f8\u95a2\u306e\u5c11\u306a\u3044\u5206\u985e\u5668\u3092\u7d44\u307f\u5408\u308f\u305b\u308b\u307b\u3069\uff0c\u4e88\u6e2c\u7cbe\u5ea6\u306e\u5411\u4e0a\u304c\u898b\u8fbc\u3081\u307e\u3059\uff0e\n(\u5f53\u305f\u308a\u524d\u306e\u8a71\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u304c)\n\u3053\u306e\u3088\u3046\u306b\u76f8\u95a2\u4fc2\u6570\u3092\u30c1\u30a7\u30c3\u30af\u3057\u306a\u304c\u3089\uff0c\n\n* \u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u306e\u7d44\u307f\u5408\u308f\u305b\n* \u30aa\u30ea\u30b8\u30ca\u30eb\u30c7\u30fc\u30bf\u306e\u4e0b\u51e6\u7406\n* \u5206\u985e\u5668\u306escore\u95a2\u6570\u306e\u8abf\u6574\n\n\u3092\u3044\u308d\u3044\u308d\u8a66\u3057\u3066\u7cbe\u5ea6\u3092\u4e0a\u3052\u3066\u3044\u304d\u307e\u3059\uff0e\n\n## \u591a\u30af\u30e9\u30b9\u5206\u985e\u306b\u3064\u3044\u3066\nMLWave\u3067\u306f\uff0c\u30a2\u30f3\u30b5\u30f3\u30d6\u30eb\u5b66\u7fd2\u3092\u7528\u3044\u305f\u591a\u30af\u30e9\u30b9\u5206\u985e\u3082\u7d39\u4ecb\u3057\u3066\u3044\u307e\u3059\uff0e\n\u8a18\u4e8b\u306e\u4e2d\u3067\u306f\uff0c\u5404\u30af\u30e9\u30b9\u3054\u3068\u306b\u305d\u308c\u305e\u308c\u30a2\u30f3\u30b5\u30f3\u30d6\u30eb\u5b66\u7fd2\u3092\u5b9f\u88c5\u3057\uff0c\u305d\u308c\u305e\u308c\u306e\u4e88\u6e2c\u7d50\u679c\u3092\u307e\u3068\u3081\u308b\u3053\u3068\u3067\u591a\u30af\u30e9\u30b9\u5206\u985e\u3092\u5b9f\u88c5\u3057\u3066\u3044\u307e\u3059\uff0e\n(One-vs-the-rest)\n\n# 5. \u53c2\u8003\n[Kaggle Ensemble Guide](http://mlwave.com/kaggle-ensembling-guide/)\n", "tags": ["MachineLearning", "scikit-learn", "analytics", "Python", "\u6a5f\u68b0\u5b66\u7fd2"]}