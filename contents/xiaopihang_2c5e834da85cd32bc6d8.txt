{"tags": ["js"], "context": " \u3053\u306e\u8a18\u4e8b\u306f\u6700\u7d42\u66f4\u65b0\u65e5\u304b\u30891\u5e74\u4ee5\u4e0a\u304c\u7d4c\u904e\u3057\u3066\u3044\u307e\u3059\u3002\n\n\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u5b58\u5728\u30c1\u30a7\u30c3\u30af\n\nif-in\nvar hoge = {aa : 'good'};\nif ('aa' in hoge) {}\n\nvar myObj = {a: 1, b: 2, c: 3}, myKeys = [], i=0;\nfor (myKeys[i++] in myObj);\nconsole.log(myKeys);\n\n\u4e0a\u8a18\u306e\u3084\u308a\u65b9\u306f\u8ce2\u3044w\u3001\u4ee5\u4e0b\u306e\u30ea\u30f3\u30af\u3092\u3054\u53c2\u7167\nExploring JavaScript for-in loops\n\nhasOwnProperty()\nobj.hasOwnProperty();\n\n\u4e0a\u8a18\u306e\u9055\u3044\u306f\u4ee5\u4e0b\u306e\u30b9\u30c8\u30c3\u30af\u3092\u3054\u53c2\u7167\nin \u3068 hasOwnProperty() \u306e\u9055\u3044\n\n\u6ce8\u610f\u70b9\nfor .. in\u306e\u5834\u5408\u306fhasOwnProperty\u306e\u5224\u65ad\u3092\u5165\u308c\u305f\u65b9\u304c\u5b89\u5168\u3001\u539f\u56e0\u306f\n\nSome frameworks (e.g. Prototype.js and Mootools) add a lot of custom prototype augmentation and using for-in to iterate Arrays and Strings is generally considered a bad idea. Using a regular for loop is a good alternative for Array and String iteration. In addition, ES5 defines a bunch of custom Array iterators (forEach, map etc). Unfortunately non of these alternate iteration strategies work with regular Objects \u2013 which is why its considered very bad practice to augment Object.prototype.\n\n\u4f8b\uff1a\nvar arr = ['a','b','c'], indexes = [];\nArray.prototype.each = function() {/*blah*/};\n\nfor (var index in arr) {\n    indexes.push(index);\n}\n\nindexes; //[\"0\", \"1\", \"2\", \"each\"] whoops!\n\n\nif\nvar hoge = {aa : 'good'};\nif (hoge['aa'])\n\nif\u3082for .. in\u3068\u540c\u3058\u304fhasOwnProperty\u3067\u5224\u65ad\u5fc5\u8981\u3042\u308a\n\n\u7d50\u8ad6\n\nArray\u306e\u5834\u5408\u306ffor\u6587\u304bArray.forEach(every,some)\u3067\u4f7f\u3046\u30d9\u30ad\nObject\u306e\u5834\u5408\u306ffor .. in + hasOwnProperty\u3067\u3084\u308b\n\n##\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u5b58\u5728\u30c1\u30a7\u30c3\u30af##\n\n###if-in\n\n```js\nvar hoge = {aa : 'good'};\nif ('aa' in hoge) {}\n```\n\n```js\nvar myObj = {a: 1, b: 2, c: 3}, myKeys = [], i=0;\nfor (myKeys[i++] in myObj);\nconsole.log(myKeys);\n```\n\n\u4e0a\u8a18\u306e\u3084\u308a\u65b9\u306f\u8ce2\u3044w\u3001\u4ee5\u4e0b\u306e\u30ea\u30f3\u30af\u3092\u3054\u53c2\u7167\n[Exploring JavaScript for-in loops](http://javascriptweblog.wordpress.com/2011/01/04/exploring-javascript-for-in-loops/)\n\n\n###hasOwnProperty()\n\n```js\nobj.hasOwnProperty();\n```\n\n\u4e0a\u8a18\u306e\u9055\u3044\u306f\u4ee5\u4e0b\u306e\u30b9\u30c8\u30c3\u30af\u3092\u3054\u53c2\u7167\n[in \u3068 hasOwnProperty() \u306e\u9055\u3044](http://qiita.com/shuhei/items/dabf0ca097f05264baf9)\n\n###\u6ce8\u610f\u70b9###\n\nfor .. in\u306e\u5834\u5408\u306fhasOwnProperty\u306e\u5224\u65ad\u3092\u5165\u308c\u305f\u65b9\u304c\u5b89\u5168\u3001\u539f\u56e0\u306f\n>\nSome frameworks (e.g. Prototype.js and Mootools) add a lot of custom prototype augmentation and using for-in to iterate Arrays and Strings is generally considered a bad idea. Using a regular for loop is a good alternative for Array and String iteration. In addition, ES5 defines a bunch of custom Array iterators (forEach, map etc). Unfortunately non of these alternate iteration strategies work with regular Objects \u2013 which is why its considered very bad practice to augment Object.prototype.\n\n\u4f8b\uff1a\n\n```js\nvar arr = ['a','b','c'], indexes = [];\nArray.prototype.each = function() {/*blah*/};\n \nfor (var index in arr) {\n    indexes.push(index);\n}\n \nindexes; //[\"0\", \"1\", \"2\", \"each\"] whoops!\n```\n\n###if\n\n```js\nvar hoge = {aa : 'good'};\nif (hoge['aa'])\n```\n\nif\u3082for .. in\u3068\u540c\u3058\u304fhasOwnProperty\u3067\u5224\u65ad\u5fc5\u8981\u3042\u308a\n\n##\u7d50\u8ad6##\n\n>\nArray\u306e\u5834\u5408\u306ffor\u6587\u304bArray.forEach(every,some)\u3067\u4f7f\u3046\u30d9\u30ad\nObject\u306e\u5834\u5408\u306ffor .. in + hasOwnProperty\u3067\u3084\u308b\n"}