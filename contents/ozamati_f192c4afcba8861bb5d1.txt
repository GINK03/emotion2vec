{"tags": ["OpenCV", "\u753b\u50cf\u51e6\u7406"], "context": " More than 1 year has passed since last update.\u3000\u6b21\u5143\u524a\u6e1b\u3084\u7279\u5fb4\u62bd\u51fa\u3067\u4f55\u304b\u3068\u7528\u3044\u3089\u308c\u308b\u4e3b\u6210\u5206\u5206\u6790\u3067\u3059\u304c\u3001OpenCV\u3067\u7c21\u5358\u306b\u884c\u3046\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\u65e5\u672c\u8a9e\u306e\u66f8\u7c4d\u3067\u306f\u898b\u304b\u3051\u305f\u8a18\u61b6\u304c\u7121\u3044\u306e\u3067\u3001\u4eca\u66f4\u3067\u3059\u304c\u4f7f\u3044\u65b9\u3092\u30e1\u30e2\u3057\u3066\u304a\u304d\u307e\u3059\u3002\n\n\u4f7f\u7528\u3059\u308b\u753b\u50cf\nAT&T\u306e\u9854\u753b\u50cf\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u304b\u3089\u304a\u501f\u308a\u3057\u307e\u3059\u3002\n10\u4eba\u5206\u309210\u679a\u3001\u8a08100\u679a\u3092\u4f7f\u7528\u3057\u307e\u3057\u305f\u3002\nhttp://www.cl.cam.ac.uk/research/dtg/attarchive/facedatabase.html\n\ncv::PCA\u306e\u4f7f\u3044\u65b9\n\u3000\u753b\u50cf\u306b\u5bfe\u3057\u3066\u4e3b\u6210\u5206\u5206\u6790\u3092\u304b\u3051\u308b\u306a\u3089\u3070\u3001\u4e00\u679a\u4e00\u679a\u306e\u753b\u50cf\u3092\u6a2aor\u7e26\u306e\u30d9\u30af\u30c8\u30eb\u306b\u5909\u63db\u3057\u3001\u305d\u308c\u3089\u3092\u4e26\u3079\u305fcv::Mat\u578b\u306e\u884c\u5217\u3092\u4f5c\u308a\u307e\u3059\u3002\u5171\u5206\u6563\u884c\u5217\u306f\u81ea\u52d5\u7684\u306b\u4f5c\u3063\u3066\u304f\u308c\u308b\u306e\u3067\u3001\u884c\u5217\u3092\u4f5c\u3063\u3066\u5165\u529b\u3059\u308b\u3060\u3051\u3067OK\u3067\u3059\u3002\n2\u756a\u76ee\u306e\u5f15\u6570\u3092cv::Mat()\u306b\u3057\u3066\u304a\u3051\u3070\u3001\u81ea\u52d5\u3067\u5e73\u5747\u30d9\u30af\u30c8\u30eb\u3092\u7b97\u51fa\u3057\u3066\u304f\u308c\u307e\u3059\u3002\n3\u756a\u76ee\u306e\u5f15\u6570\u306f\u3001\u5404\u884c\u306b\u6a2a\u30d9\u30af\u30c8\u30eb\u306e\u5f62\u3067\u30c7\u30fc\u30bf\u304c\u3042\u308b\u306a\u3089\u3070CV_PCA_DATA_AS_ROW\u3092\u3001\u5404\u5217\u306b\u7e26\u30d9\u30af\u30c8\u30eb\u306e\u5f62\u306a\u3089CV_PCA_DATA_AS_COL\u3092\u6307\u5b9a\u3057\u307e\u3059\u3002\n\u6700\u5f8c\u306e\u5f15\u6570\u306f\u3001\u6b32\u3057\u3044\u56fa\u6709\u30d9\u30af\u30c8\u30eb\u306e\u6570\u3067\u3059\u3002\ncv::PCA pca(pixelMatrix, cv::Mat(), CV_PCA_DATA_AS_ROW, 3);\n\u51e6\u7406\u304c\u7d42\u308f\u308b\u3068\u3001\u5e73\u5747\u30d9\u30af\u30c8\u30eb\u30fb\u56fa\u6709\u30d9\u30af\u30c8\u30eb\u30fb\u56fa\u6709\u5024\u304ccv::PCA\u306e\u30af\u30e9\u30b9\u306b\u4fdd\u5b58\u3055\u308c\u307e\u3059\u3002\u56fa\u6709\u30d9\u30af\u30c8\u30eb\u306feigenvectors\u306e\u5404\u884c\u306b\u4fdd\u5b58\u3055\u308c\u3066\u3044\u308b\u306e\u3067\u3001row()\u306b\u3088\u3063\u3066\u53d6\u308a\u51fa\u305b\u307e\u3059\u3002\u5c04\u5f71\u3082project()\u306b\u3088\u3063\u3066\u884c\u3048\u308b\u306e\u3067\u3001\u5f8c\u306f\u8a8d\u8b58\u306a\u308a\u53ef\u8996\u5316\u306a\u308a\u3054\u81ea\u7531\u306b\u3002\ncv::Mat eigenVector = pca.eigenvectors.row(0);\n\n\u9854\u753b\u50cf\u306e\u56fa\u6709\u30d9\u30af\u30c8\u30eb(\u56fa\u6709\u9854)\n\u6c17\u304c\u5411\u3044\u305f\u3089\u53ef\u8996\u5316\u3084\u8a8d\u8b58\u306e\u65b9\u3082\u307e\u3068\u3081\u307e\u3059\u3002\n\n\n\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\n\u304a\u307e\u3051\u7a0b\u5ea6\n\nEigenFace.cpp\n#include <iostream>\n#include <fstream>\n#include <string>\n#include \"opencv2\\\\opencv.hpp\"\n\nconst int SAMPLES = 10;\nconst int CLASS = 10;\nconst int SIZE_X = 92;\nconst int SIZE_Y = 112;\nconst std::string INPUT_FILE_NAME = \"input.txt\";   // \u5165\u529b\u30d5\u30a1\u30a4\u30eb\u540d\n//const std::string OUTPUT_FILE_NAME = \"output.txt\"; // \u51fa\u529b\u30d5\u30a1\u30a4\u30eb\u540d\n\nint main(){\n    // \u753b\u50cf\u8aad\u307f\u8fbc\u307f\n    cv::Mat pixelMatrix(cv::Size(SIZE_X*SIZE_Y, SAMPLES*CLASS), CV_8UC1);\n    std::ifstream ifs(INPUT_FILE_NAME);\n    std::string fileName;\n    for (int j = 0; j < CLASS; j++){\n        for (int i = 0; i < SAMPLES; i++){\n            // \u6a2a\u30d9\u30af\u30c8\u30eb\u5316\u3057\u3066\u4fdd\u5b58\n            std::getline(ifs, fileName);\n            cv::imread(fileName, 0).reshape(0, 1).copyTo(pixelMatrix.row(j*SAMPLES + i));\n        }\n    }\n\n    // \u30d3\u30c3\u30c8\u6df1\u5ea6\u5909\u63db\u304a\u3088\u3073\u30b9\u30b1\u30fc\u30ea\u30f3\u30b0\n    pixelMatrix.convertTo(pixelMatrix, CV_32FC1, 1. / 255.);\n\n    // \u4e3b\u6210\u5206\u5206\u6790\n    cv::PCA pca(pixelMatrix, cv::Mat(), CV_PCA_DATA_AS_ROW, 3);\n\n    // \u56fa\u6709\u9854\n    cv::Mat eigenVector = pca.eigenvectors.row(0);\n    cv::normalize(eigenVector, eigenVector, 1.0, 0.0, cv::NORM_MINMAX);\n    cv::Mat eigenFace = cv::Mat(cv::Size(SIZE_X, SIZE_Y), CV_32FC1);\n    for (int j = 0; j < SIZE_Y; j++){\n        for (int i = 0; i < SIZE_X; i++){\n            eigenFace.at<float>(j, i) = eigenVector.at<float>(0, j*SIZE_X + i);\n        }\n    }\n\n    cv::imshow(\"eigan face\", eigenFace);\n    cv::waitKey();\n\n    return 0;\n}\n\n\n\u3000\u6b21\u5143\u524a\u6e1b\u3084\u7279\u5fb4\u62bd\u51fa\u3067\u4f55\u304b\u3068\u7528\u3044\u3089\u308c\u308b\u4e3b\u6210\u5206\u5206\u6790\u3067\u3059\u304c\u3001OpenCV\u3067\u7c21\u5358\u306b\u884c\u3046\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\u65e5\u672c\u8a9e\u306e\u66f8\u7c4d\u3067\u306f\u898b\u304b\u3051\u305f\u8a18\u61b6\u304c\u7121\u3044\u306e\u3067\u3001\u4eca\u66f4\u3067\u3059\u304c\u4f7f\u3044\u65b9\u3092\u30e1\u30e2\u3057\u3066\u304a\u304d\u307e\u3059\u3002\n\n#\u4f7f\u7528\u3059\u308b\u753b\u50cf\nAT&T\u306e\u9854\u753b\u50cf\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u304b\u3089\u304a\u501f\u308a\u3057\u307e\u3059\u3002\n10\u4eba\u5206\u309210\u679a\u3001\u8a08100\u679a\u3092\u4f7f\u7528\u3057\u307e\u3057\u305f\u3002\nhttp://www.cl.cam.ac.uk/research/dtg/attarchive/facedatabase.html\n\n#cv::PCA\u306e\u4f7f\u3044\u65b9\n\u3000\u753b\u50cf\u306b\u5bfe\u3057\u3066\u4e3b\u6210\u5206\u5206\u6790\u3092\u304b\u3051\u308b\u306a\u3089\u3070\u3001\u4e00\u679a\u4e00\u679a\u306e\u753b\u50cf\u3092\u6a2aor\u7e26\u306e\u30d9\u30af\u30c8\u30eb\u306b\u5909\u63db\u3057\u3001\u305d\u308c\u3089\u3092\u4e26\u3079\u305fcv::Mat\u578b\u306e\u884c\u5217\u3092\u4f5c\u308a\u307e\u3059\u3002\u5171\u5206\u6563\u884c\u5217\u306f\u81ea\u52d5\u7684\u306b\u4f5c\u3063\u3066\u304f\u308c\u308b\u306e\u3067\u3001\u884c\u5217\u3092\u4f5c\u3063\u3066\u5165\u529b\u3059\u308b\u3060\u3051\u3067OK\u3067\u3059\u3002\n\n2\u756a\u76ee\u306e\u5f15\u6570\u3092cv::Mat()\u306b\u3057\u3066\u304a\u3051\u3070\u3001\u81ea\u52d5\u3067\u5e73\u5747\u30d9\u30af\u30c8\u30eb\u3092\u7b97\u51fa\u3057\u3066\u304f\u308c\u307e\u3059\u3002\n3\u756a\u76ee\u306e\u5f15\u6570\u306f\u3001\u5404\u884c\u306b\u6a2a\u30d9\u30af\u30c8\u30eb\u306e\u5f62\u3067\u30c7\u30fc\u30bf\u304c\u3042\u308b\u306a\u3089\u3070CV_PCA_DATA_AS_ROW\u3092\u3001\u5404\u5217\u306b\u7e26\u30d9\u30af\u30c8\u30eb\u306e\u5f62\u306a\u3089CV_PCA_DATA_AS_COL\u3092\u6307\u5b9a\u3057\u307e\u3059\u3002\n\u6700\u5f8c\u306e\u5f15\u6570\u306f\u3001\u6b32\u3057\u3044\u56fa\u6709\u30d9\u30af\u30c8\u30eb\u306e\u6570\u3067\u3059\u3002\n`cv::PCA pca(pixelMatrix, cv::Mat(), CV_PCA_DATA_AS_ROW, 3);`\n\n\u51e6\u7406\u304c\u7d42\u308f\u308b\u3068\u3001\u5e73\u5747\u30d9\u30af\u30c8\u30eb\u30fb\u56fa\u6709\u30d9\u30af\u30c8\u30eb\u30fb\u56fa\u6709\u5024\u304ccv::PCA\u306e\u30af\u30e9\u30b9\u306b\u4fdd\u5b58\u3055\u308c\u307e\u3059\u3002\u56fa\u6709\u30d9\u30af\u30c8\u30eb\u306feigenvectors\u306e\u5404\u884c\u306b\u4fdd\u5b58\u3055\u308c\u3066\u3044\u308b\u306e\u3067\u3001row()\u306b\u3088\u3063\u3066\u53d6\u308a\u51fa\u305b\u307e\u3059\u3002\u5c04\u5f71\u3082project()\u306b\u3088\u3063\u3066\u884c\u3048\u308b\u306e\u3067\u3001\u5f8c\u306f\u8a8d\u8b58\u306a\u308a\u53ef\u8996\u5316\u306a\u308a\u3054\u81ea\u7531\u306b\u3002\n`cv::Mat eigenVector = pca.eigenvectors.row(0);`\n\n#\u9854\u753b\u50cf\u306e\u56fa\u6709\u30d9\u30af\u30c8\u30eb(\u56fa\u6709\u9854)\n\u6c17\u304c\u5411\u3044\u305f\u3089\u53ef\u8996\u5316\u3084\u8a8d\u8b58\u306e\u65b9\u3082\u307e\u3068\u3081\u307e\u3059\u3002\n![e1.png](https://qiita-image-store.s3.amazonaws.com/0/111593/0c26cfb5-6c17-7cda-42da-22cec779277c.png)\n\n\n#\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\n\u304a\u307e\u3051\u7a0b\u5ea6\n\n```cpp:EigenFace.cpp\n#include <iostream>\n#include <fstream>\n#include <string>\n#include \"opencv2\\\\opencv.hpp\"\n\nconst int SAMPLES = 10;\nconst int CLASS = 10;\nconst int SIZE_X = 92;\nconst int SIZE_Y = 112;\nconst std::string INPUT_FILE_NAME = \"input.txt\";   // \u5165\u529b\u30d5\u30a1\u30a4\u30eb\u540d\n//const std::string OUTPUT_FILE_NAME = \"output.txt\"; // \u51fa\u529b\u30d5\u30a1\u30a4\u30eb\u540d\n\nint main(){\n\t// \u753b\u50cf\u8aad\u307f\u8fbc\u307f\n\tcv::Mat pixelMatrix(cv::Size(SIZE_X*SIZE_Y, SAMPLES*CLASS), CV_8UC1);\n\tstd::ifstream ifs(INPUT_FILE_NAME);\n\tstd::string fileName;\n\tfor (int j = 0; j < CLASS; j++){\n\t\tfor (int i = 0; i < SAMPLES; i++){\n\t\t\t// \u6a2a\u30d9\u30af\u30c8\u30eb\u5316\u3057\u3066\u4fdd\u5b58\n\t\t\tstd::getline(ifs, fileName);\n\t\t\tcv::imread(fileName, 0).reshape(0, 1).copyTo(pixelMatrix.row(j*SAMPLES + i));\n\t\t}\n\t}\n\t\n\t// \u30d3\u30c3\u30c8\u6df1\u5ea6\u5909\u63db\u304a\u3088\u3073\u30b9\u30b1\u30fc\u30ea\u30f3\u30b0\n\tpixelMatrix.convertTo(pixelMatrix, CV_32FC1, 1. / 255.);\n\n\t// \u4e3b\u6210\u5206\u5206\u6790\n\tcv::PCA pca(pixelMatrix, cv::Mat(), CV_PCA_DATA_AS_ROW, 3);\n\n\t// \u56fa\u6709\u9854\n\tcv::Mat eigenVector = pca.eigenvectors.row(0);\n\tcv::normalize(eigenVector, eigenVector, 1.0, 0.0, cv::NORM_MINMAX);\n\tcv::Mat eigenFace = cv::Mat(cv::Size(SIZE_X, SIZE_Y), CV_32FC1);\n\tfor (int j = 0; j < SIZE_Y; j++){\n\t\tfor (int i = 0; i < SIZE_X; i++){\n\t\t\teigenFace.at<float>(j, i) = eigenVector.at<float>(0, j*SIZE_X + i);\n\t\t}\n\t}\n\n\tcv::imshow(\"eigan face\", eigenFace);\n\tcv::waitKey();\n\n\treturn 0;\n}\n```\n"}