{"context": " More than 1 year has passed since last update.OpenGM\u306epython\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30a4\u30b9\u3092\u4f7f\u3063\u3066HMM\u3067\u30e9\u30d9\u30eb\u7cfb\u5217\u306e\u4e8b\u5f8c\u78ba\u7387\u6700\u5927\u63a8\u5b9a\uff0e\n\n\u6e96\u5099\nimport numpy as np\nimport matplotlib.pyplot as plt\n%matplotlib inline\n\nimport opengm\n\n\n\u30c7\u30fc\u30bf\u306f\u4ee5\u4e0b\u306e\u3082\u306e\uff0e\u6642\u7cfb\u5217\u30c7\u30fc\u30bf\u306e\u6574\u6570\u5316\u30fb\u5e73\u6ed1\u5316\u3092\u8a66\u3059\uff0e\n\n\u30c7\u30fc\u30bf\nd = '17.2 19.7 21.6 21.3 22.1 20.5 16.3 18.4 21.0 16.1 17.5 18.5 18.4 18.3 16.0 21.2 18.8 24.3 23.3 20.5 16.9 22.4 20.1 24.5 24.2 22.7 19.6 23.6 23.3 24.6 25.0 24.3 22.2 22.7 19.5 20.5 17.3 17.2 22.0 20.9 21.5 22.3 24.0 22.4 20.2 15.7 20.4 16.3 17.7 14.3 18.4 16.6 13.9 15.2 14.8 15.0 11.5 13.4 13.5 17.0 15.0 17.5 12.3 11.8 14.5 12.4 12.9 15.8 13.8 11.4 6.5 5.9 7.2 5.6 4.6 7.5 8.9 6.6 3.9 5.7 7.3 6.1 6.8 3.1 2.6 7.9 5.2 2.0 4.0 3.4 5.7 8.1 4.7 5.4 5.9 3.6 2.9 5.7 2.1 1.6 2.3 2.4 1.2 4.2 4.2 2.4 5.6 2.5 3.0 6.1 4.9 7.1 5.0 7.2 5.2 5.1 10.4 8.3 6.9 6.8 7.8 4.2 8.0 3.2 7.9 5.9 9.5 6.4 9.2 11.7 11.6 15.5 16.7'\nd = np.array([ float(c) for c in d.split()])\n\n\n\u3067\u306fHMM\u30e2\u30c7\u30eb\u306e\u69cb\u7bc9\u3068\u63a8\u8ad6\u306e\u5b9f\u884c\uff0e\n\n\u5b9f\u884c!\nnNodes = d.shape[0] # \u30ce\u30fc\u30c9\u6570\uff0e\nnLabels = 20 # \u96e2\u6563\u30af\u30e9\u30b9\u306e\u6570\uff0e20\nvariableSpace = np.ones(nNodes)*nLabels # \u5404\u30ce\u30fc\u30c9\u306e\u30e9\u30d9\u30eb\u6570\uff0e\u3053\u3053\u3067\u306f\u5168\u90e8\u540c\u3058\ngm = opengm.gm(variableSpace)\n\n# unary\nfor i in range(nNodes):\n    u = np.array([ abs(d[i] - j) for j in range(nLabels) ]) # \u30c7\u30fc\u30bf\u9805\uff0e\u30e9\u30d9\u30eb\u3068\u306e\u5dee\u306e\u7d76\u5bfe\u5024\n    f = gm.addFunction(u)\n    gm.addFactor(f, i)\n\n# pairwise\np = 10 # \u96a3\u63a5\u3059\u308b\u30ce\u30fc\u30c9\u306e\u30af\u30e9\u30b9\u304c\u7570\u306a\u3063\u305f\u5834\u5408\u306e\u30b3\u30b9\u30c8\uff0e\uff08\u540c\u3058\u306a\u30890\uff09\npairwise = np.array((np.ma.ones((nLabels,nLabels)) - np.eye(nLabels)) * p) # \u30da\u30a2\u30ef\u30a4\u30ba\u9805\uff0e\u540c\u3058\u30e9\u30d9\u30eb\u306a\u30890\uff0c\u7570\u306a\u308b\u306a\u3089p\nf_pw = gm.addFunction(pairwise)\nfor i in range(nNodes-1):\n    gm.addFactor(f_pw, [i, i+1]) # \u30ce\u30fc\u30c9\u3092\u9023\u7d50\u3059\u308b\u30a8\u30c3\u30b8\u306e\u8a2d\u5b9a\uff0eHMM\u306a\u306e\u30671\u6b21\u5143\uff0e\n\ninf = opengm.inference.DynamicProgramming(gm=gm) # \u63a8\u8ad6\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\uff1a1\u6b21\u5143\u306a\u306e\u3067DP\u3067\u5341\u5206\ninf.infer() # \u63a8\u8ad6\u5b9f\u884c\nres = inf.arg() # \u7d50\u679c\u3092\u56de\u53ce\n\n# \u30d7\u30ed\u30c3\u30c8\uff0e\nplt.plot(d, label=\"data\")\nplt.plot(res, label=\"result\")\nplt.legend()\n\n\n\n\nOpenGM\u306epython\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30a4\u30b9\u3092\u4f7f\u3063\u3066HMM\u3067\u30e9\u30d9\u30eb\u7cfb\u5217\u306e\u4e8b\u5f8c\u78ba\u7387\u6700\u5927\u63a8\u5b9a\uff0e\n\n```py:\u6e96\u5099\nimport numpy as np\nimport matplotlib.pyplot as plt\n%matplotlib inline\n\nimport opengm\n```\n\n\u30c7\u30fc\u30bf\u306f\u4ee5\u4e0b\u306e\u3082\u306e\uff0e\u6642\u7cfb\u5217\u30c7\u30fc\u30bf\u306e\u6574\u6570\u5316\u30fb\u5e73\u6ed1\u5316\u3092\u8a66\u3059\uff0e\n\n```py:\u30c7\u30fc\u30bf\nd = '17.2 19.7 21.6 21.3 22.1 20.5 16.3 18.4 21.0 16.1 17.5 18.5 18.4 18.3 16.0 21.2 18.8 24.3 23.3 20.5 16.9 22.4 20.1 24.5 24.2 22.7 19.6 23.6 23.3 24.6 25.0 24.3 22.2 22.7 19.5 20.5 17.3 17.2 22.0 20.9 21.5 22.3 24.0 22.4 20.2 15.7 20.4 16.3 17.7 14.3 18.4 16.6 13.9 15.2 14.8 15.0 11.5 13.4 13.5 17.0 15.0 17.5 12.3 11.8 14.5 12.4 12.9 15.8 13.8 11.4 6.5 5.9 7.2 5.6 4.6 7.5 8.9 6.6 3.9 5.7 7.3 6.1 6.8 3.1 2.6 7.9 5.2 2.0 4.0 3.4 5.7 8.1 4.7 5.4 5.9 3.6 2.9 5.7 2.1 1.6 2.3 2.4 1.2 4.2 4.2 2.4 5.6 2.5 3.0 6.1 4.9 7.1 5.0 7.2 5.2 5.1 10.4 8.3 6.9 6.8 7.8 4.2 8.0 3.2 7.9 5.9 9.5 6.4 9.2 11.7 11.6 15.5 16.7'\nd = np.array([ float(c) for c in d.split()])\n```\n\n\u3067\u306fHMM\u30e2\u30c7\u30eb\u306e\u69cb\u7bc9\u3068\u63a8\u8ad6\u306e\u5b9f\u884c\uff0e\n\n```py:\u5b9f\u884c!\nnNodes = d.shape[0] # \u30ce\u30fc\u30c9\u6570\uff0e\nnLabels = 20 # \u96e2\u6563\u30af\u30e9\u30b9\u306e\u6570\uff0e20\nvariableSpace = np.ones(nNodes)*nLabels # \u5404\u30ce\u30fc\u30c9\u306e\u30e9\u30d9\u30eb\u6570\uff0e\u3053\u3053\u3067\u306f\u5168\u90e8\u540c\u3058\ngm = opengm.gm(variableSpace)\n\n# unary\nfor i in range(nNodes):\n    u = np.array([ abs(d[i] - j) for j in range(nLabels) ]) # \u30c7\u30fc\u30bf\u9805\uff0e\u30e9\u30d9\u30eb\u3068\u306e\u5dee\u306e\u7d76\u5bfe\u5024\n    f = gm.addFunction(u)\n    gm.addFactor(f, i)\n\n# pairwise\np = 10 # \u96a3\u63a5\u3059\u308b\u30ce\u30fc\u30c9\u306e\u30af\u30e9\u30b9\u304c\u7570\u306a\u3063\u305f\u5834\u5408\u306e\u30b3\u30b9\u30c8\uff0e\uff08\u540c\u3058\u306a\u30890\uff09\npairwise = np.array((np.ma.ones((nLabels,nLabels)) - np.eye(nLabels)) * p) # \u30da\u30a2\u30ef\u30a4\u30ba\u9805\uff0e\u540c\u3058\u30e9\u30d9\u30eb\u306a\u30890\uff0c\u7570\u306a\u308b\u306a\u3089p\nf_pw = gm.addFunction(pairwise)\nfor i in range(nNodes-1):\n    gm.addFactor(f_pw, [i, i+1]) # \u30ce\u30fc\u30c9\u3092\u9023\u7d50\u3059\u308b\u30a8\u30c3\u30b8\u306e\u8a2d\u5b9a\uff0eHMM\u306a\u306e\u30671\u6b21\u5143\uff0e\n\ninf = opengm.inference.DynamicProgramming(gm=gm) # \u63a8\u8ad6\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\uff1a1\u6b21\u5143\u306a\u306e\u3067DP\u3067\u5341\u5206\ninf.infer() # \u63a8\u8ad6\u5b9f\u884c\nres = inf.arg() # \u7d50\u679c\u3092\u56de\u53ce\n\n# \u30d7\u30ed\u30c3\u30c8\uff0e\nplt.plot(d, label=\"data\")\nplt.plot(res, label=\"result\")\nplt.legend()\n```\n\n![Unknown.png](https://qiita-image-store.s3.amazonaws.com/0/44835/3e062178-db89-a4fb-7484-6a721de44b41.png)\n\n", "tags": ["Python", "openGM", "HMM", "map"]}