{"context": " More than 1 year has passed since last update.Java\u30af\u30e9\u30b9\u30e9\u30a4\u30d6\u30e9\u30ea\u306bCopyOnWriteArrayList\u3068\u3044\u3046\u30af\u30e9\u30b9\u304c\u3042\u308b\u3002\nC++11\u3067\u4f7f\u3048\u308b\u4f3c\u305f\u3088\u3046\u306a\u6a5f\u80fd\u3092\u6301\u3064\u30af\u30e9\u30b9\u304c\u6b32\u3057\u304b\u3063\u305f\u306e\u3067\u3001\u305d\u308c\u3092\u4f5c\u6210\u3057\u3066\u307f\u305f\u3002\ncopy_on_write_vector.h\n\nCopyOnWriteArrayList\u3068\u306f\uff1f\n\u3053\u3093\u306a\u30af\u30e9\u30b9\nCopyOnWriteArrayList\n\n\u3084\u308a\u305f\u304b\u3063\u305f\u3053\u3068\n\nButton\u30af\u30e9\u30b9\u306b\u8907\u6570\u306e\u30ea\u30b9\u30ca\u30fc\u3092\u8a2d\u5b9a\u3057\u305f\u3044\u3002\n\u30ea\u30b9\u30ca\u30fc\u306e\u8d70\u67fb\u4e2d\u3067\u3082\u30ea\u30b9\u30ca\u30fc\u306e\u8ffd\u52a0/\u524a\u9664\u304c\u3057\u305f\u3044\u3002\n\u3068\u308a\u308f\u3051\u30a4\u30d9\u30f3\u30c8\u304c\u901a\u77e5\u3055\u308c\u305f\u6642\u306b\u305d\u306e\u30ea\u30b9\u30ca\u30fc\u81ea\u8eab\u3092\u524a\u9664\u3057\u305f\u3044\u3002\n\n\n\u4f8b\u3048\u3070\u3053\u3093\u306a\u611f\u3058\nclass Button;\n\nstruct OnClickListener {\n    using Ptr = std::shared_ptr<OnClickListener>;\n    std::function<void(Button *, Ptr listener)> onClick;\n};\n\nclass Button {\npublic:\n    void addListener(const OnClickListener::Ptr &listener) {\n        _listeners.push_back(listener);\n    }\n\n    void removeListener(const OnClickListener::Ptr &listener) {\n        _listeners.erase(std::remove(_listeners.begin(), _listeners.end(), listener), _listeners.end());\n    }\n\n    void notifyListeners() {\n        for (auto &&listener : _listeners) {\n            if (listener->onClick) {\n                listener->onClick(this, listener);\n            }\n        }\n    }\n\nprivate:\n    std::vector<OnClickListener::Ptr> _listeners;\n};\n\n\n\u554f\u984c\u70b9: \u30b3\u30f3\u30c6\u30ca\u306e\u8d70\u67fb\u4e2d\u306b\u8ffd\u52a0/\u524a\u9664\u304c\u3067\u304d\u306a\u3044\n\u30ea\u30b9\u30ca\u30fc\u306e\u683c\u7d0d\u306b\u4f7f\u3046\u30b3\u30f3\u30c6\u30ca\u306bstd::vector\u3084std::list\u3092\u4f7f\u3046\u3068\n\u8981\u7d20\u306e\u8ffd\u52a0/\u524a\u9664\u3067\u30a4\u30c6\u30ec\u30fc\u30bf\u304c\u7121\u52b9\u306b\u306a\u308b\u5834\u5408\u304c\u3042\u308b\u3002\nauto listener = std::make_shared<OnClickListener>();\nlistener->onClick = [](Button *button, OnClickListener::Ptr listener) {\n    // \u30dc\u30bf\u30f3\u304c\u30af\u30ea\u30c3\u30af\u3055\u308c\u305f\u6642\u306e\u51e6\u7406\n\n    // \u3053\u3053\u3067\u30ea\u30b9\u30ca\u30fc\u306e\u8ffd\u52a0\u3084\u524a\u9664\u3092\u3059\u308b\u3068\u30a4\u30c6\u30ec\u30fc\u30bf\u304c\u7121\u52b9\u306b\u306a\u308b\u5834\u5408\u304c\u3042\u308b\n    button->addListener(std::make_shared<OnClickListener>());\n\n    // \u81ea\u5206\u81ea\u8eab\u3092\u524a\u9664\u3057\u305f\u3044\n    button->removeListener(listener);\n};\n_button.addListener(listener);\n\n\nstd::vector\u3092fe::copy_on_write_vector\u306b\u7f6e\u304d\u63db\u3048\u308b\ncopy_on_write_vector.h\nclass Button {\npublic:\n    void addListener(const OnClickListener::Ptr &listener) {\n        _listeners.push_back(listener);\n    }\n\n    void removeListener(const OnClickListener::Ptr &listener) {\n        _listeners.erase_all(listener);\n    }\n\n    void notifyListeners() {\n        for (auto &&listener : _listeners.lock()) {\n            if (listener->onClick) {\n                listener->onClick(this, listener);\n            }\n        }\n    }\n\nprivate:\n    fe::copy_on_write_vector<OnClickListener::Ptr> _listeners;\n};\n\n\u3053\u308c\u306a\u3089\u30b3\u30f3\u30c6\u30ca\u304c\u8d70\u67fb\u4e2d\u304b\u3069\u3046\u304b\u3092\u6c17\u306b\u3057\u306a\u3044\u3067\u8ffd\u52a0/\u524a\u9664\u304c\u3067\u304d\u308b\u3002\n\nBoost.Signals2\u3067\u3082\u540c\u3058\u3088\u3046\u306a\u3053\u3068\u51fa\u6765\u305d\u3046\u3060\u3063\u305f\u306d\n#include <boost/signals2/signal.hpp>\nclass Button {\npublic:\n    boost::signals2::connection addListener(\n        std::function<void(const boost::signals2::connection &connection, Button *)> listener) {\n        return _signal.connect_extended(std::move(listener));\n    }\n\n    void removeListener(const boost::signals2::connection &connection) {\n        connection.disconnect();\n    }\n\n    void notifyListeners() {\n        _signal(this);\n    }\n\nprivate:\n    boost::signals2::signal<void(Button *)> _signal;\n};\n\nbutton.addListener([](const boost::signals2::connection &connection, Button*) {\n    // \u30dc\u30bf\u30f3\u304c\u30af\u30ea\u30c3\u30af\u3055\u308c\u305f\u6642\u306e\u51e6\u7406\n\n    // \u81ea\u5206\u81ea\u8eab\u3092\u524a\u9664\u3057\u305f\u3044 \n    connection.disconnect();\n});\n\n\u304a\u308f\u308a\n\nJava\u30af\u30e9\u30b9\u30e9\u30a4\u30d6\u30e9\u30ea\u306bCopyOnWriteArrayList\u3068\u3044\u3046\u30af\u30e9\u30b9\u304c\u3042\u308b\u3002\nC++11\u3067\u4f7f\u3048\u308b\u4f3c\u305f\u3088\u3046\u306a\u6a5f\u80fd\u3092\u6301\u3064\u30af\u30e9\u30b9\u304c\u6b32\u3057\u304b\u3063\u305f\u306e\u3067\u3001\u305d\u308c\u3092\u4f5c\u6210\u3057\u3066\u307f\u305f\u3002\n\n[copy_on_write_vector.h](https://github.com/idaisuke/ferrum/blob/master/include/ferrum/container/copy_on_write_vector.h)\n\n### CopyOnWriteArrayList\u3068\u306f\uff1f ###\n\n\u3053\u3093\u306a\u30af\u30e9\u30b9\n[CopyOnWriteArrayList](https://docs.oracle.com/javase/jp/8/api/java/util/concurrent/CopyOnWriteArrayList.html)\n\n### \u3084\u308a\u305f\u304b\u3063\u305f\u3053\u3068 ###\n\n+ Button\u30af\u30e9\u30b9\u306b\u8907\u6570\u306e\u30ea\u30b9\u30ca\u30fc\u3092\u8a2d\u5b9a\u3057\u305f\u3044\u3002\n+ \u30ea\u30b9\u30ca\u30fc\u306e\u8d70\u67fb\u4e2d\u3067\u3082\u30ea\u30b9\u30ca\u30fc\u306e\u8ffd\u52a0/\u524a\u9664\u304c\u3057\u305f\u3044\u3002\n+ \u3068\u308a\u308f\u3051\u30a4\u30d9\u30f3\u30c8\u304c\u901a\u77e5\u3055\u308c\u305f\u6642\u306b\u305d\u306e\u30ea\u30b9\u30ca\u30fc\u81ea\u8eab\u3092\u524a\u9664\u3057\u305f\u3044\u3002\n\n### \u4f8b\u3048\u3070\u3053\u3093\u306a\u611f\u3058 ###\n\n```cpp\nclass Button;\n\nstruct OnClickListener {\n    using Ptr = std::shared_ptr<OnClickListener>;\n    std::function<void(Button *, Ptr listener)> onClick;\n};\n\nclass Button {\npublic:\n    void addListener(const OnClickListener::Ptr &listener) {\n        _listeners.push_back(listener);\n    }\n    \n    void removeListener(const OnClickListener::Ptr &listener) {\n        _listeners.erase(std::remove(_listeners.begin(), _listeners.end(), listener), _listeners.end());\n    }\n    \n    void notifyListeners() {\n        for (auto &&listener : _listeners) {\n            if (listener->onClick) {\n                listener->onClick(this, listener);\n            }\n        }\n    }\n    \nprivate:\n    std::vector<OnClickListener::Ptr> _listeners;\n};\n```\n\n### \u554f\u984c\u70b9: \u30b3\u30f3\u30c6\u30ca\u306e\u8d70\u67fb\u4e2d\u306b\u8ffd\u52a0/\u524a\u9664\u304c\u3067\u304d\u306a\u3044 ###\n\u30ea\u30b9\u30ca\u30fc\u306e\u683c\u7d0d\u306b\u4f7f\u3046\u30b3\u30f3\u30c6\u30ca\u306bstd::vector\u3084std::list\u3092\u4f7f\u3046\u3068\n\u8981\u7d20\u306e\u8ffd\u52a0/\u524a\u9664\u3067\u30a4\u30c6\u30ec\u30fc\u30bf\u304c\u7121\u52b9\u306b\u306a\u308b\u5834\u5408\u304c\u3042\u308b\u3002\n\n```cpp\nauto listener = std::make_shared<OnClickListener>();\nlistener->onClick = [](Button *button, OnClickListener::Ptr listener) {\n    // \u30dc\u30bf\u30f3\u304c\u30af\u30ea\u30c3\u30af\u3055\u308c\u305f\u6642\u306e\u51e6\u7406\n    \n    // \u3053\u3053\u3067\u30ea\u30b9\u30ca\u30fc\u306e\u8ffd\u52a0\u3084\u524a\u9664\u3092\u3059\u308b\u3068\u30a4\u30c6\u30ec\u30fc\u30bf\u304c\u7121\u52b9\u306b\u306a\u308b\u5834\u5408\u304c\u3042\u308b\n    button->addListener(std::make_shared<OnClickListener>());\n    \n    // \u81ea\u5206\u81ea\u8eab\u3092\u524a\u9664\u3057\u305f\u3044\n    button->removeListener(listener);\n};\n_button.addListener(listener);\n```\n\n### std::vector\u3092fe::copy_on_write_vector\u306b\u7f6e\u304d\u63db\u3048\u308b ###\n\n[copy_on_write_vector.h](https://github.com/idaisuke/ferrum/blob/master/include/ferrum/container/copy_on_write_vector.h)\n\n```cpp\nclass Button {\npublic:\n    void addListener(const OnClickListener::Ptr &listener) {\n        _listeners.push_back(listener);\n    }\n\n    void removeListener(const OnClickListener::Ptr &listener) {\n        _listeners.erase_all(listener);\n    }\n\n    void notifyListeners() {\n        for (auto &&listener : _listeners.lock()) {\n            if (listener->onClick) {\n                listener->onClick(this, listener);\n            }\n        }\n    }\n\nprivate:\n    fe::copy_on_write_vector<OnClickListener::Ptr> _listeners;\n};\n```\n\u3053\u308c\u306a\u3089\u30b3\u30f3\u30c6\u30ca\u304c\u8d70\u67fb\u4e2d\u304b\u3069\u3046\u304b\u3092\u6c17\u306b\u3057\u306a\u3044\u3067\u8ffd\u52a0/\u524a\u9664\u304c\u3067\u304d\u308b\u3002\n\n### Boost.Signals2\u3067\u3082\u540c\u3058\u3088\u3046\u306a\u3053\u3068\u51fa\u6765\u305d\u3046\u3060\u3063\u305f\u306d ###\n\n```cpp\n#include <boost/signals2/signal.hpp>\nclass Button {\npublic:\n    boost::signals2::connection addListener(\n        std::function<void(const boost::signals2::connection &connection, Button *)> listener) {\n        return _signal.connect_extended(std::move(listener));\n    }\n\n    void removeListener(const boost::signals2::connection &connection) {\n        connection.disconnect();\n    }\n\n    void notifyListeners() {\n        _signal(this);\n    }\n\nprivate:\n    boost::signals2::signal<void(Button *)> _signal;\n};\n```\n\n```cpp\nbutton.addListener([](const boost::signals2::connection &connection, Button*) {\n    // \u30dc\u30bf\u30f3\u304c\u30af\u30ea\u30c3\u30af\u3055\u308c\u305f\u6642\u306e\u51e6\u7406\n    \n    // \u81ea\u5206\u81ea\u8eab\u3092\u524a\u9664\u3057\u305f\u3044 \n    connection.disconnect();\n});\n```\n\n\u304a\u308f\u308a\n", "tags": ["C++11", "C++"]}