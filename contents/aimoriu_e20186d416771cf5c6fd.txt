{"tags": ["MT4", "SQLite3", "MQL4"], "context": "MQL4\u3067\u7c21\u5358\u306bDB\u304c\u4f7f\u3048\u308b\u3068\u3044\u3044\u306a\u3068\u601d\u3044\u3001\u60c5\u5831\u3092\u53ce\u96c6\u3057\u3066\u307f\u307e\u3057\u305f\u3002\n\u6700\u7d42\u7684\u306b\u305f\u3069\u308a\u7740\u3044\u305f\u306e\u306fSQLite\u3092MQL4\u3067\u306e\u4f7f\u7528\u65b9\u6cd5\u3067\u3059\u3002\n\u203bSQLite\u306f\uff11\u3064\u306e\u30d5\u30a1\u30a4\u30eb\u3067DB\u306e\u6a5f\u80fd\u3092\u679c\u305f\u3059\u3053\u3068\u304c\u3067\u304d\u308b\u305f\u3081\u3001MQL4\u3067\u4f7f\u7528\u3059\u308b\u306e\u306b\u6700\u9ad8\u3067\u3059\u3002\n\n\n1.\u30e2\u30b8\u30e5\u30fc\u30eb\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u30b5\u30a4\u30c8\n\n1.1.sqlite3_wrapper.dll\u3068sqlite3.mqh\u3092\u4e0b\u8a18\u306e\u30b5\u30a4\u30c8\u304b\u3089\u5165\u624b\nhttps://github.com/Shmuma/sqlite3-mt4-wrapper\n\n1.2.sqlite3\u306e\u672c\u5bb6\u30b5\u30a4\u30c8(MQL4\u3067SQLite\u3092\u4f7f\u7528\u3059\u308b\u5834\u5408\u4e0a\u8a181.1\u3060\u3051\u3067\u826f\u3044\uff09\nhttp://www.sqlite.org/download.html\n\n\n2.\u3053\u3053\u3067\u306e\u60c5\u5831\u306f\u4e0b\u8a18\u306e\u30b5\u30a4\u30c8\u304b\u3089\u5165\u624b\u3057\u305f\u3082\u306e\u306b\u3088\u308a\u3001\u6574\u7406\u3057\u307e\u3057\u305f\u3002\n\nhttp://expertadviser-bighope.blogspot.jp/2011/03/mt4.html\nhttps://github.com/Shmuma/sqlite3-mt4-wrapper\n\n\n3.MQL4\u3067SQLite3\u3092\u4f7f\u7528\u3059\u308b\u6642\u306e\u30d5\u30a9\u30eb\u30c0\u69cb\u6210\u306f\u4e0b\u8a18\u306e\u901a\u308a\u3067\u3059\u3002\n\nC:\\Program Files\\XM\\MQL4\\Include\\sqlite3.mqh\n\u25b6\ufe0e\u4e0a\u8a18\uff11\uff0e\uff11\u3067\u5165\u624b\u3057\u305fsqlite3.mqh\u3092\u3053\u3053\u306b\u914d\u7f6e\u3059\u308b\nC:\\Program Files\\XM\\MQL4\\Libraries\\sqlite3_wrapper.dll\n\u25b6\ufe0e\u4e0a\u8a18\uff11\uff0e\uff11\u3067\u5165\u624b\u3057\u305fsqlite3_wrapper.dll\u3092\u3053\u3053\u306b\u914d\u7f6e\u3059\u308b\nC:\\Program Files\\XM\\MQL4\\Files\\SQLite\\XXXXX.db\n\u25b6\ufe0eSQLite\u306eDB\u306e\u4fdd\u5b58\u7b87\u6240\u3067\u3059\u3002\u4e0a\u8a18\uff11\uff0e\uff12\u306ehttp://expertadviser-bighope.blogspot.jp/2011/03/mt4.html\u304b\u3089\u5165\u624b\u3057\u305fEventDate.db\u3092\u3053\u3053\u306b\u914d\u7f6e\u3057\u3066\u307f\u308b\nC:\\Program Files\\XM\\MQL4\\Experts\\XXXX.mq4\n\u25b6\ufe0eEA\u306e\u4fdd\u5b58\u7b87\u6240\nC:\\Program Files\\XM\\MQL4\\Scripts\\XXXX.mq4\n\u25b6\ufe0eScript\u306e\u4fdd\u5b58\u7b87\u6240\n\n\n4.\u30b5\u30f3\u30d7\u30eb\u30bd\u30fc\u30b9\n\n\n4.1 EventHist.mq4\n\u3053\u306e\u90e8\u5206\u306e\u30bd\u30fc\u30b9\u306f\u4e0a\u8a18\u306e\u53c2\u8003\u30b5\u30a4\u30c8\u304b\u3089\u5165\u624b\u3057\u305f\u3082\u306e\u3067\u3059\u3002\u52d5\u304b\u306a\u3044\u3068\u3053\u308d\u3092\u4fee\u6b63\u3057\u305f\u308a\u3001\u30b3\u30e1\u30f3\u30c8\u3092\u81ea\u5206\u306a\u308a\u306b\u5165\u308c\u305f\u308a\u3092\u3057\u307e\u3057\u305f\u3002\n\nEventHist.mq4\n//+------------------------------------------------------------------+\n//|                                                   sqliteTest.mq4 |\n//|                        Copyright 2015, MetaQuotes Software Corp. |\n//|                                             https://www.mql5.com |\n//+------------------------------------------------------------------+\n#include <sqlite3.mqh>\n\n#property copyright \"Copyright 2015, MetaQuotes Software Corp.\"\n#property link      \"https://www.mql5.com\"\n#property version   \"1.00\"\n#property strict\n\nextern string contryname = \"US\";\nextern int    Lank       =   5;\n\nint init()\n  {\n    if (!sqlite_init()) {\n        return INIT_FAILED;\n    }\n\n   string dates;\n   string texts =\"\";\n   string falname = \"EventDate.db\";\n   string db = \"\";\n\n   //\u7d76\u5bfe\u30d1\u30b9\u3068\u30c7\u30d5\u30a9\u30eb\u30c8\u30d1\u30b9\u3092\u4f7f\u7528\u3059\u308b\u4f8b\n   if(false)\n   {\n      //1.\u7d76\u5bfe\u30d1\u30b9\u3092\u4f7f\u7528\u3059\u308b\u4f8b\n      db = \"C:\\\\Program Files\\\\XM\\\\MQL4\\\\Files\\\\SQLite\\\\EventDate.db\";\n   }\n   else\n   {\n      //2.\u30c7\u30d5\u30a9\u30eb\u30c8\u306e\u30d1\u30b9\u3092\u4f7f\u7528\u4f8b\u3001\u306a\u304a\u3053\u308c\u3092\u3057\u3088\u3046\u3059\u308b\u305f\u3081\u306bsqlite_init()\u3092\u3053\u306e\u524d\u306b\u547c\u3073\u51fa\u3059\u5fc5\u8981\u304c\u3042\u308b\n\n      db = sqlite_get_fname (falname);\n      Print (\"Dest DB path: \" + db);\n   }\n\n   //\u4f7f\u7528sqlite_table_exists(db, tablename)\u7684\u65b9\u6cd5\u5224\u65ad\u5bf9\u5e94db\u4e2d\u7684\u8868\u662f\u5426\u5b58\u5728\n   if (!sqlite_table_exists (db, \"HistoricalDate\"))\n   {\n        Print(\"files not found\");\n        Alert(\"sqlite_table_exists\");\n   }\n   else\n   {\n         Alert(\"OK!\");\n   }\n\n    //sqlite_query(db,sql,cols)\u3067DB\u304b\u3089\u6761\u4ef6\u306b\u5408\u3046\u30c7\u30fc\u30bf\u3092\u53d6\u308a\u51fa\u3059\n    int cols[1];\n    int handle = sqlite_query (db, \"select * from HistoricalDate where kuni = \\'\" + contryname + \"\\' and lank= \\'\" + Lank + \"\\'\", cols);\n\n    Comment(\"\");\n\n    //sqlite_next_row(handle) == 1 \u3067\u6b21\u306e\u30ec\u30b3\u30fc\u30c9\u304c\u3042\u308b\u304b\u3069\u3046\u304b\u3092\u5224\u65ad\n    //\u6b21\u306e\u30ec\u30b3\u30fc\u30c9\u304c\u3042\u308b\u5834\u5408\u3001sqlite_get_col(handle,N)\u3067\u8a72\u5f53\u5217\u306e\u30c7\u30fc\u30bf\u3092\u53d6\u5f97\u3059\u308b\n    //N\u306f\u5217\u756a\u53f7\u3067\u3042\u308b\n    while (sqlite_next_row (handle) == 1)\n    {\n         dates = \"\"    + sqlite_get_col (handle, 1);\n         dates = dates + sqlite_get_col (handle, 2);\n         dates = dates + sqlite_get_col (handle, 3);\n         dates = dates + sqlite_get_col (handle, 4);\n         dates = dates + sqlite_get_col (handle, 5);\n         dates = dates + sqlite_get_col (handle, 6);\n         dates = dates + sqlite_get_col (handle, 7);\n         dates = dates + sqlite_get_col (handle, 8);\n\n         texts = texts + dates + \"\\n\";\n    }\n    Comment(texts);\n\n    //sqlite_query(db,sql,cols),sqlite_next_row(handle)\u5b9f\u884c\u5f8c\n    //sqlite_free_query(handel)\u3092\u901a\u3057\u3066\u30ea\u30bd\u30fc\u30b9\u3092\u89e3\u653e\u3059\u308b\uff1f\n    sqlite_free_query (handle);\n\n    return(0);\n  }\n\n//OnDeinit\u3067sqlite_finalize()\u3092\u5b9f\u884c\u3059\u308b;\nvoid OnDeinit(const int reason)\n{\n   sqlite_finalize();\n}\n\n\n\n\n4.2 sqlite_test.mq4\n\u4e0b\u8a18\u306esqlite_test.mq4\u3067\u306f\u4e3b\u306b\u4e0b\u8a18\u306e\u30e1\u30bd\u30c3\u30c9\u306e\u4f7f\u7528\u4f8b\u304c\u767b\u5834\u3057\u3066\u3044\u307e\u3059\u3002\nsqlite_init\u3000\u3000\u3000\u3000\u3000//\u4e00\u756a\u6700\u521d\u3067\u547c\u3073\u51fa\u3059\nsqlite_table_exists//\u30c6\u30fc\u30d6\u30eb\u306e\u5b58\u5728\u30c1\u30a7\u30c3\u30af\u306b\u4f7f\u7528\u3059\u308b\nsqlite_exec        //\u30c6\u30fc\u30d6\u30eb\u4f5c\u6210\u3001\u30c7\u30fc\u30bf\u66f4\u65b0\u3001\u30c7\u30fc\u30bf\u524a\u9664\u3001\u30c7\u30fc\u30bf\u633f\u5165\u3067\u4f7f\u7528\u3057\u307e\u3059\u3002\nsqlite_query       //\u30c6\u30fc\u30d6\u30eb\u304b\u3089\u6761\u4ef6\u3092\u6e80\u305f\u3059\u30c7\u30fc\u30bf\u3092\u53d6\u5f97\u3059\u308b\u6642\u306b\u4f7f\u3046\nsqlite_next_row    //\u6b21\u306e\u30ec\u30b3\u30fc\u30c9\u304c\u3042\u308b\u304b\u306e\u5224\u65ad\u306b\u53ca\u3073SELECT\u6587\u306e\u5b9f\u884c\u6642\u306b\u4f7f\u3046\nsqlite_get_col     //\u30ec\u30b3\u30fc\u30c9\u304c\u3042\u308b\u6642\u306b\u3001\u5217\u756a\u53f7\u3067\u30c7\u30fc\u30bf\u3092\u53d6\u5f97\u3059\u308b(\u30c7\u30fc\u30bf\u306e\u578b\u306b\u3088\u308a\u4f7f\u7528\u3059\u308b\u30e1\u30bd\u30c3\u30c9\u304c\u9055\u3046)\nsqlite_free_query  //\u30c7\u30fc\u30bf\u53d6\u5f97\u5b8c\u4e86\u5f8c\u30ea\u30bd\u30fc\u30b9\u3092\u89e3\u653e\uff1f\nsqlite_finalize    //\u4e00\u756a\u6700\u5f8c\u3067\u547c\u3073\u51fa\u3059\uff08\u3053\u308c\u3082\u30ea\u30bd\u30fc\u30b9\u89e3\u653e\uff1f\uff09\n\n\nsqlite_test.mq4\n\n#property strict\n\n#include <sqlite3.mqh>\n\nbool do_check_table_exists (string db, string table)\n{\n    int res = sqlite_table_exists (db, table + \"\");\n\n    if (res < 0) {\n        PrintFormat (\"Check for table existence failed with code %d\", res);\n        return (false);\n    }\n\n    return (res > 0);\n}\n\nvoid do_exec (string db, string exp)\n{\n    int res = sqlite_exec (db, exp + \"\");\n\n    if (res != 0)\n        PrintFormat (\"Expression '%s' failed with code %d\", exp, res);\n}\n\nint OnInit()\n{\n    if (!sqlite_init()) {\n        return INIT_FAILED;\n    }\n\n    return INIT_SUCCEEDED;\n}\n\nvoid OnDeinit(const int reason)\n{\n    sqlite_finalize();\n}\n\nvoid OnStart ()\n{\n    string db = \"test.db\";\n\n    string path = sqlite_get_fname (db);\n    Print (\"Dest DB path: \" + path);\n\n    if (!do_check_table_exists (db, \"test\")) {\n        Print (\"DB not exists, create schema\");\n        do_exec (db, \"create table test (name text)\");\n        do_exec (db, \"insert into test (name) values ('test1')\");\n        do_exec (db, \"insert into test (name) values ('test2')\");\n        do_exec (db, \"insert into test (name) values ('test3')\");\n        do_exec (db, \"insert into test (name) values ('test4')\");\n    }\n\n    int cols[1];\n    int handle = sqlite_query (db, \"select * from test\", cols);\n\n    while (sqlite_next_row (handle) == 1) {\n        for (int i = 0; i < cols[0]; i++)\n            Print (sqlite_get_col (handle, i));\n    }\n\n    sqlite_free_query (handle);\n\n    return;\n}\n\n\n\n\n\n4.3 sqlite_test_binding.mq4\n\u4e0b\u8a18\u306esqlite_test_binding.mq4\u3067\u306f\u4e3b\u306b\u4e0b\u8a18\u306e\u30e1\u30bd\u30c3\u30c9\u306e\u4f7f\u7528\u4f8b\u304c\u767b\u5834\u3057\u3066\u3044\u307e\u3059\u3002\n\nsqlite_init\u3000\u3000\u3000\u3000\u3000   //\u4e00\u756a\u6700\u521d\u3067\u547c\u3073\u51fa\u3059\nsqlite_table_exists   //\u30c6\u30fc\u30d6\u30eb\u306e\u5b58\u5728\u30c1\u30a7\u30c3\u30af\u306b\u4f7f\u7528\u3059\u308b\nsqlite_exec           //\u30c6\u30fc\u30d6\u30eb\u4f5c\u6210\u3001\u30c7\u30fc\u30bf\u66f4\u65b0\u3001\u30c7\u30fc\u30bf\u524a\u9664\u3001\u30c7\u30fc\u30bf\u633f\u5165\u3067\u4f7f\u7528\u3057\u307e\u3059\u3002\n\nsqlite_query         //\u30c6\u30fc\u30d6\u30eb\u304b\u3089\u6761\u4ef6\u3092\u6e80\u305f\u3059\u30c7\u30fc\u30bf\u3092\u53d6\u5f97\u3059\u308b\u6642\u306b\u4f7f\u3046\u3060\u3051\u3067\u306f\u306a\u304f\u3001\u30c7\u30fc\u30bf\u633f\u5165\u3059\u308b\u6642\u3082\u3067\u304d\u308b\u3053\u3068\u3092\u3053\u306e\u4f8b\u3067\u6539\u3081\u3066\u5206\u304b\u308a\u307e\u3057\u305f\u3002\n**************************************************************************\nstring query = \"insert into quotes (date, symbol, open, high, low, close) values (?, ?, ?, ?, ?, ?)\";\nstring query = \"select * from quotes where symbol = ? order by date\";\n**************************************************************************\n\nsqlite_query\u3067\u30cf\u30f3\u30c9\u30eb\u3092\u4f5c\u3063\u3066\u304a\u3044\u3066\u3001\u4e0b\u8a18\u306e\u30e1\u30c3\u30bd\u30c9\u306e\u9806\u756a\u3067\u30c7\u30fc\u30bf\u3092\u30d0\u30a4\u30f3\u30c7\u30a3\u30f3\u30b0\u3057\u3001SQL\u3092\u5b9f\u884c\u3059\u308b\u3001\u7d42\u308f\u3063\u305f\u3089\u30ea\u30bd\u30fc\u30b9\u3092\u89e3\u653e\u3059\u308b\n**************************************************************************\nsqlite_reset          //\u30d0\u30a4\u30f3\u30c7\u30a3\u30f3\u30b0\u3092\u30ea\u30bb\u30c3\u30c8\u3059\u308b\uff1f\nsqlite_bind_int64     //integer\u578b\u306e\u5217\u306b\u30c7\u30fc\u30bf\u3092\u30d0\u30a4\u30f3\u30c7\u30a3\u30f3\u30b0\u3059\u308b\nsqlite_bind_text      //text\u578b\u306e\u5217\u306b\u30c7\u30fc\u30bf\u3092\u30d0\u30a4\u30f3\u30c7\u30a3\u30f3\u30b0\u3059\u308b\nsqlite_bind_double    //real\u578b\u306e\u5217\u306b\u30c7\u30fc\u30bf\u3092\u30d0\u30a4\u30f3\u30c7\u30a3\u30f3\u30b0\u3059\u308b\nsqlite_next_row       //Inset\u306e\u6642\u306e\u30d0\u30a4\u30f3\u30c7\u30a3\u30f3\u30b0\u53ca\u3073\u3082\u4f7f\u3046\u3068\u306f\u77e5\u3089\u306a\u304b\u3063\u305f\u3001\u6b21\u306e\u30ec\u30b3\u30fc\u30c9\u3092\u64cd\u4f5c\u3059\u308b\uff1f\u63a1\u756a\uff1f\n**************************************************************************\n\nsqlite_get_col        //\u30ec\u30b3\u30fc\u30c9\u304c\u3042\u308b\u6642\u306b\u3001\u5217\u756a\u53f7\u3067\u30c7\u30fc\u30bf\u3092\u53d6\u5f97\u3059\u308b(string\u578b\u306e\u5217)\nsqlite_get_col_double //\u30ec\u30b3\u30fc\u30c9\u304c\u3042\u308b\u6642\u306b\u3001\u5217\u756a\u53f7\u3067\u30c7\u30fc\u30bf\u3092\u53d6\u5f97\u3059\u308b(double\u578b\u306e\u5217)\nsqlite_next_row    \u3000\u3000//\u30c7\u30fc\u30bf\u3092\u53d6\u5f97\u3059\u308b(SELECT)\u6642\u306b\u6b21\u306e\u30ec\u30b3\u30fc\u30c9\u304c\u3042\u308b\u304b\u306e\u5224\u65ad\u306b\u4f7f\u3046\nsqlite_free_query     //\u30c7\u30fc\u30bf\u53d6\u5f97\u5b8c\u4e86\u5f8c\u30ea\u30bd\u30fc\u30b9\u3092\u89e3\u653e\uff1f\nsqlite_finalize       //\u4e00\u756a\u6700\u5f8c\u3067\u547c\u3073\u51fa\u3059\uff08\u3053\u308c\u3082\u30ea\u30bd\u30fc\u30b9\u89e3\u653e\uff1f\uff09\n\n\nsqlite_test_binding.mq4\n#property strict\n\n#include <sqlite3.mqh>\n\nbool do_check_table_exists (string db, string table)\n{\n    int res = sqlite_table_exists (db, table + \"\");\n\n    if (res < 0) {\n        PrintFormat (\"Check for table existence failed with code %d\", res);\n        return (false);\n    }\n\n    return (res > 0);\n}\n\nvoid do_exec (string db, string exp)\n{\n    int res = sqlite_exec (db, exp + \"\");\n\n    if (res != 0)\n        PrintFormat (\"Expression '%s' failed with code %d\", exp, res);\n}\n\nint OnInit()\n{\n    if (!sqlite_init()) {\n        return INIT_FAILED;\n    }\n\n    return INIT_SUCCEEDED;\n}\n\nvoid OnStart ()\n{\n    string db = \"test_binding.db\";\n\n    if (!do_check_table_exists (db, \"quotes\"))\n        do_exec (db,\n            \"create table quotes (\" +\n            \" date integer,\" +\n            \" symbol text,\" +\n            \" open real,\" +\n            \" high real,\" +\n            \" low real,\" +\n            \" close real)\");\n\n    int count = iBars (NULL, 0);\n    PrintFormat (\"Count = %d\", count);\n\n    string query = \"insert into quotes (date, symbol, open, high, low, close) values (?, ?, ?, ?, ?, ?)\";\n    int cols[1];\n\n    int handle = sqlite_query (db, query, cols);\n    if (handle < 0) {\n        Print (\"Preparing query failed; query=\", query, \", error=\", -handle);\n        return;\n    }\n\n    datetime start = TimeLocal ();\n    for (int i = 0; i < count; i++) {\n        sqlite_reset (handle);\n        sqlite_bind_int64 (handle, 1, iTime (NULL, 0, i));\n        sqlite_bind_text (handle, 2, Symbol ());\n        sqlite_bind_double (handle, 3, NormalizeDouble (iOpen (NULL, 0, i), Digits));\n        sqlite_bind_double (handle, 4, NormalizeDouble (iHigh (NULL, 0, i), Digits));\n        sqlite_bind_double (handle, 5, NormalizeDouble (iLow (NULL, 0, i), Digits));\n        sqlite_bind_double (handle, 6, NormalizeDouble (iClose (NULL, 0, i), Digits));\n        sqlite_next_row (handle);\n    }\n\n    sqlite_free_query (handle);\n\n    datetime end = TimeLocal ();\n    datetime elapsed = end - start;\n    PrintFormat (\"insert %d rows in %u sec\", IntegerToString(count), elapsed);\n}\n\nvoid OnDeinit (const int reason)\n{\n\n    string db = \"test_binding.db\";\n\n    Print (\"Fetching rows start\");\n\n    int cols[1];\n    string query = \"select * from quotes where symbol = ? order by date\";\n    int handle = sqlite_query (db, query, cols);\n    if (handle < 0) {\n        Print (\"Preparing query failed; query=\", query, \", error=\", -handle);\n        return;\n    }\n\n    sqlite_bind_text (handle, 1, Symbol ());\n\n    int count = 0;\n\n    // only print first 100 records\n    while (sqlite_next_row (handle) == 1 && count < 100) {\n        datetime date = (datetime) sqlite_get_col_int64 (handle, 0);\n        string symbol = sqlite_get_col (handle, 1);\n        double open = sqlite_get_col_double (handle, 2);\n        double high = sqlite_get_col_double (handle, 3);\n        double low = sqlite_get_col_double (handle, 4);\n        double close = sqlite_get_col_double (handle, 5);\n\n        PrintFormat (\"date=%s, symbol=%s, open/high/low/close=%s/%s/%s/%s\",\n            TimeToString (date), Symbol (),\n            DoubleToString (open, Digits),\n            DoubleToString (high, Digits),\n            DoubleToString (low, Digits),\n            DoubleToString (close, Digits));\n\n        count += 1;\n    }\n\n    Print (\"fetching rows done\");\n\n    sqlite_free_query (handle);\n\n    sqlite_finalize();\n}\n\n\n\n\n\n4.4 sqlite_test_extra.mq4\n\u4e0b\u8a18\u306esqlite_test_extra.mq4\u3067\u306f\u4e3b\u306b\u4e0b\u8a18\u306e\u30e1\u30bd\u30c3\u30c9\u306e\u4f7f\u7528\u4f8b\u304c\u767b\u5834\u3057\u3066\u3044\u307e\u3059\u3002\n\nsqlite_init           //\u4e00\u756a\u6700\u521d\u3067\u547c\u3073\u51fa\u3059\nsqlite_get_fname      //DB\u306e\u30d5\u30eb\u30d1\u30b9\u306e\u53d6\u5f97\u306b\u4f7f\u7528\u3059\u308b\nsqlite_table_exists   //\u30c6\u30fc\u30d6\u30eb\u306e\u5b58\u5728\u30c1\u30a7\u30c3\u30af\u306b\u4f7f\u7528\u3059\u308b\nsqlite_exec           //\u30c6\u30fc\u30d6\u30eb\u4f5c\u6210\u3001\u30c7\u30fc\u30bf\u66f4\u65b0\u3001\u30c7\u30fc\u30bf\u524a\u9664\u3001\u30c7\u30fc\u30bf\u633f\u5165\u3067\u4f7f\u7528\u3057\u307e\u3059\u3002\nsqlite_query          //\u30c6\u30fc\u30d6\u30eb\u304b\u3089\u6761\u4ef6\u3092\u6e80\u305f\u3059\u30c7\u30fc\u30bf\u3092\u53d6\u5f97\u3059\u308b\u6642\u306b\u4f7f\u3046\u3060\u3051\u3067\u306f\u306a\u304f\u3001\u30c7\u30fc\u30bf\u633f\u5165\u3059\u308b\u6642\u3082\u3067\u304d\u308b\nsqlite_get_col        //\u30ec\u30b3\u30fc\u30c9\u304c\u3042\u308b\u6642\u306b\u3001\u5217\u756a\u53f7\u3067\u30c7\u30fc\u30bf\u3092\u53d6\u5f97\u3059\u308b(string\u578b\u306e\u5217)\nsqlite_next_row       //\u30c7\u30fc\u30bf\u3092\u53d6\u5f97\u3059\u308b(SELECT)\u6642\u306b\u6b21\u306e\u30ec\u30b3\u30fc\u30c9\u304c\u3042\u308b\u304b\u306e\u5224\u65ad\u306b\u4f7f\u3046\nsqlite_free_query     //\u30c7\u30fc\u30bf\u53d6\u5f97\u5b8c\u4e86\u5f8c\u30ea\u30bd\u30fc\u30b9\u3092\u89e3\u653e\uff1f\nsqlite_finalize       //\u4e00\u756a\u6700\u5f8c\u3067\u547c\u3073\u51fa\u3059\uff08\u3053\u308c\u3082\u30ea\u30bd\u30fc\u30b9\u89e3\u653e\uff1f\uff09\n\n\nsqlite_test_extra.mq4\n#property strict\n#include <sqlite3.mqh>\n\nbool do_check_table_exists (string db, string table)\n{\n    int res = sqlite_table_exists (db, table + \"\");\n\n    if (res < 0) {\n        PrintFormat (\"Check for table existence failed with code %d\", res);\n        return (false);\n    }\n\n    return (res > 0);\n}\n\nvoid do_exec (string db, string exp)\n{\n    int res = sqlite_exec (db, exp + \"\");\n\n    if (res != 0)\n        PrintFormat (\"Expression '%s' failed with code %d\", exp, res);\n}\n\nint OnInit()\n{\n    if (!sqlite_init()) {\n        return INIT_FAILED;\n    }\n\n    return INIT_SUCCEEDED;\n}\n\nvoid OnDeinit(const int reason)\n{\n    sqlite_finalize();\n}\n\nvoid OnStart ()\n{\n    string db = \"test_extra.db\";\n\n    string path = sqlite_get_fname (db);\n    Print (\"Dest DB path: \" + path);\n\n    if (!do_check_table_exists (db, \"test\")) {\n        Print (\"DB not exists, create schema\");\n        do_exec (db, \"create table test (name text)\");\n        do_exec (db, \"insert into test (name) values ('test1')\");\n        do_exec (db, \"insert into test (name) values ('test2')\");\n        do_exec (db, \"insert into test (name) values ('test3')\");\n        do_exec (db, \"insert into test (name) values ('test4')\");\n    }\n\n    int cols[1];\n    int handle = sqlite_query (db, \"select cos(radians(45))\", cols);\n\n    PrintFormat (\"Handle value: %d\", handle);\n\n    while (sqlite_next_row (handle) == 1) {\n        for (int i = 0; i < cols[0]; i++)\n            Print (sqlite_get_col (handle, i));\n    }\n\n    sqlite_free_query (handle);\n}\n\n\n\n\n\n4.5 sqlite_test_insert_quotes.mq4\n\u4e0b\u8a18\u306esqlite_test_insert_quotes.mq4\u3067\u306f\u4e3b\u306b\u4e0b\u8a18\u306e\u30e1\u30bd\u30c3\u30c9\u306e\u4f7f\u7528\u4f8b\u304c\u767b\u5834\u3057\u3066\u3044\u307e\u3059\u3002\nsqlite_init           //\u4e00\u756a\u6700\u521d\u3067\u547c\u3073\u51fa\u3059\nsqlite_table_exists   //\u30c6\u30fc\u30d6\u30eb\u306e\u5b58\u5728\u30c1\u30a7\u30c3\u30af\u306b\u4f7f\u7528\u3059\u308b\nsqlite_exec           //\u30c6\u30fc\u30d6\u30eb\u4f5c\u6210\u3001\u30c7\u30fc\u30bf\u66f4\u65b0\u3001\u30c7\u30fc\u30bf\u524a\u9664\u3001\u30c7\u30fc\u30bf\u633f\u5165\u306a\u3069\u3067\u4f7f\u7528\u3057\u307e\u3059\u3002\nsqlite_finalize       //\u4e00\u756a\u6700\u5f8c\u3067\u547c\u3073\u51fa\u3059\uff08\u3053\u308c\u3082\u30ea\u30bd\u30fc\u30b9\u89e3\u653e\uff1f\uff09\n\n\nsqlite_test_insert_quotes.mq4\n#property strict\n\n#include <sqlite3.mqh>\n\nint OnInit()\n{\n    if (!sqlite_init()) {\n        return INIT_FAILED;\n    }\n\n    return INIT_SUCCEEDED;\n}\n\nvoid OnDeinit(const int reason)\n{\n    sqlite_finalize();\n}\n\nvoid OnStart ()\n{\n    string db = \"test_quotes.db\";\n\n    if (!sqlite_table_exists (db, \"quotes\"))\n        sqlite_exec (db, \"create table quotes (date, open, high, low, close)\");\n\n    int count = iBars (NULL, 0);\n    PrintFormat (\"Count = %d\", count);\n\n    datetime start = TimeLocal ();\n\n    for (int i = 0; i < count; i++) {\n        string query = \"insert into quotes (date, open, high, low, close) values ('\" + \n                     TimeToStr (iTime (NULL, 0, i)) + \"',\" + \n                     DoubleToString(iOpen (NULL, 0, i), Digits) + \",\" +\n                     DoubleToString(iHigh (NULL, 0, i), Digits) + \",\" +\n                     DoubleToString(iLow (NULL, 0, i), Digits) + \",\" +\n                     DoubleToString(iClose (NULL, 0, i), Digits) + \");\";\n\n        sqlite_exec (db, query);\n    }\n\n    datetime end = TimeLocal ();\n    datetime elapsed = end - start;\n    PrintFormat (\"inserted %d rows in %u sec\", count, elapsed);\n}\n\n\n\n\n\n4.5 sqlite_test_journal.mq4\n\u4e0b\u8a18\u306esqlite_test_journal.mq4\u3067\u306f\u4e3b\u306b\u4e0b\u8a18\u306e\u30e1\u30bd\u30c3\u30c9\u306e\u4f7f\u7528\u4f8b\u304c\u767b\u5834\u3057\u3066\u3044\u307e\u3059\u3002\nsqlite_init              //\u4e00\u756a\u6700\u521d\u3067\u547c\u3073\u51fa\u3059\nsqlite_get_fname         //DB\u306e\u30d5\u30eb\u30d1\u30b9\u306e\u53d6\u5f97\u306b\u4f7f\u7528\u3059\u308b\nsqlite_table_exists      //\u30c6\u30fc\u30d6\u30eb\u306e\u5b58\u5728\u30c1\u30a7\u30c3\u30af\u306b\u4f7f\u7528\u3059\u308b\nsqlite_set_journal_mode  //??\u5404\u30e2\u30fc\u30c9\nsqlite_exec              //\u30c6\u30fc\u30d6\u30eb\u4f5c\u6210\u3001\u30c7\u30fc\u30bf\u66f4\u65b0\u3001\u30c7\u30fc\u30bf\u524a\u9664\u3001\u30c7\u30fc\u30bf\u633f\u5165\u306a\u3069\u3067\u4f7f\u7528\u3057\u307e\u3059\u3002\nsqlite_finalize          //\u4e00\u756a\u6700\u5f8c\u3067\u547c\u3073\u51fa\u3059\uff08\u3053\u308c\u3082\u30ea\u30bd\u30fc\u30b9\u89e3\u653e\uff1f\uff09\n\n\nsqlite_test_journal.mq4\n#property strict\n#include <sqlite3.mqh>\n\nbool do_check_table_exists (string db, string table)\n{\n    int res = sqlite_table_exists (db, table + \"\");\n\n    if (res < 0) {\n        PrintFormat (\"Check for table existence failed with code %d\", res);\n        return (false);\n    }\n\n    return (res > 0);\n}\n\n\nvoid benchmark (string db, string mode)\n{\n    sqlite_set_journal_mode (mode);\n\n    datetime start = TimeLocal ();\n\n    sqlite_exec (db, \"delete from bench;\");\n\n    for (int i = 0; i < 100000; i++)\n        sqlite_exec (db, \"insert into bench (\" + IntegerToString (i) + \");\");\n\n    Alert (\"Benchmark for mode \" + mode + \" took \" + IntegerToString (TimeLocal() - start) + \" seconds\");\n}\n\nint OnInit()\n{\n    if (!sqlite_init()) {\n        return INIT_FAILED;\n    }\n\n    return INIT_SUCCEEDED;\n}\n\nvoid OnDeinit(const int reason)\n{\n    sqlite_finalize();\n}\n\nvoid OnStart ()\n{\n    string db = \"test_journal.db\", table = \"test\";\n\n    string path = sqlite_get_fname (db);\n    Print (\"Dest DB path: \" + path);\n\n    if (!do_check_table_exists (db, table)) {\n        Print (\"DB not exists, create schema\");\n        sqlite_exec (db, \"create table bench (id integer)\");\n    }\n\n    Print (\"Start benchmarks\");\n\n    benchmark (db, \"DELETE\");\n    benchmark (db, \"WAL\");\n    benchmark (db, \"MEMORY\");\n    benchmark (db, \"OFF\");\n}\n\n\n\n\n5.\\MQL4\\Include\\sqlite3.mqh\u306e\u4e2d\u8eab\n\u4e0b\u8a18\u306e\u30bd\u30fc\u30b9\u306f\\MQL4\\Include\\sqlite3.mqh\u306e\u5185\u5bb9\u3068\u306a\u308a\u3001\u3053\u308c\u3067\u3069\u308c\u3060\u3051\u95a2\u6570\u4f7f\u3048\u308b\u304b\u53ca\u3073\u5f15\u6570\u3068\u623b\u308a\u5024\u306e\u578b\u3092\u78ba\u8a8d\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\n1.\u95a2\u6570\u4e00\u89a7\n/*\n * SQLite interface for MT4\n */\n\n#import \"sqlite3_wrapper.dll\"\nint sqlite_initialize (string terminal_data_path);\nvoid sqlite_finalize ();\n\n// Warning: These two routines are affected by MT4 (build 610) bug,\n// which causes wrong argument order passed to DLL, when both arguments are from variables.\n// The simplest workaround of this, is to add empty string to SECOND argument on call.\n// See example sqlite_test.mq4.\nint sqlite_exec (string db_fname, string sql);\nint sqlite_table_exists (string db_fname, string table);\n\nint sqlite_query (string db_fname, string sql, int& cols[]);\nint sqlite_reset (int handle);\nint sqlite_bind_int (int handle, int col, int bind_value);\nint sqlite_bind_int64 (int handle, int col, long bind_value);\nint sqlite_bind_double (int handle, int col, double bind_value);\nint sqlite_bind_text (int handle, int col, string bind_value);\nint sqlite_bind_null (int handle, int col);\nint sqlite_next_row (int handle);\nstring sqlite_get_col (int handle, int col);\nint sqlite_get_col_int (int handle, int col);\nlong sqlite_get_col_int64 (int handle, int col);\ndouble sqlite_get_col_double (int handle, int col);\nint sqlite_free_query (int handle);\nstring sqlite_get_fname (string db_fname);\nvoid sqlite_set_busy_timeout (int ms);\nvoid sqlite_set_journal_mode (string mode);\n#import\n\nbool sqlite_init()\n{\n    int error = sqlite_initialize(TerminalInfoString(TERMINAL_DATA_PATH));\n    if (error == 0) {\n        Print(\"sqlite initialization succeeded\");\n        return true;\n    }\n    else {\n        Alert(\"ERROR: sqlite initialization failed, error=\" + IntegerToString(error));\n        return false;\n    }\n}\n\n\n\n\uff16.\u672c\u5f53\u306f\u4e0a\u8a18\u306e\u30b5\u30f3\u30d7\u30eb\u3055\u3048\u3042\u308c\u3070\u3001\u4f7f\u3048\u308b\u3068\u601d\u3044\u307e\u3059\u304c\u3002\n\u4eca\u5f8c\u4e0a\u8a18\u306e\u95a2\u6570\u4e00\u89a7\u306e\u4e2d\u306e\u95a2\u6570\u306e\u4f7f\u7528\u4f8b\u3092\uff11\u3064\uff11\u3064\u8ffd\u52a0\u3057\u3066\u3044\u304f\u3053\u3068\u3067\u4f7f\u3044\u5012\u3059\u3053\u3068\u3092\u76ee\u6307\u3059\n\n2.\u95a2\u6570\u306e\u4f7f\u7528\n//+------------------------------------------------------------------+\n//sqlite_init\u3068sqlite_finalize\u306e\u4f7f\u7528\u4f8b\n//\u6982\u8981\uff1aOnInit\u3068OnDeinit\u3067\u4f7f\u7528\u3059\u308b\n//\u6ce8\u610f\uff1asqlite_get_fname\u3067DB\u306e\u7d76\u5bfe\u30d1\u30b9\u3092\u53d6\u5f97\u3059\u308b\u524d\u306b\u3001sqlite_init\u3092\u547c\u3073\u51fa\u3059\u5fc5\u8981\u304c\u3042\u308b\n//+------------------------------------------------------------------+\nint OnInit(){\n    if (!sqlite_init()) {\n        return INIT_FAILED;\n    }\n\n    return INIT_SUCCEEDED;\n}\nvoid OnDeinit(const int reason){\n    sqlite_finalize();\n}\n\n\n//+------------------------------------------------------------------+\n//sqlite_get_fname\u306e\u4f7f\u7528\u4f8b\n//\u6982\u8981\uff1adb\u306e\u7d76\u5bfe\u30d1\u30b9\u3092\u53d6\u5f97\u3059\u308b(\u4f7f\u7528\u3059\u308b\u524d\u306bsqlite_init\u3092\u547c\u3073\u51fa\u3059\u5fc5\u8981\u304c\u3042\u308b\uff09\n//+------------------------------------------------------------------+\n{\n  extern bool absolutelyPath = false;\n  extern string db = \"C:\\\\Program Files\\\\XMMT4\\\\MQL4\\\\Files\\\\SQLite\\\\sqlite.db\";\n  string fname = \"sqlite.db\";\n\n  //1.\u7d76\u5bfe\u30d1\u30b9\u3092\u4f7f\u7528\u3059\u308b\n  if(absolutelyPath){\n    db = db;\n  }else{\n    //2.sqlite_init()\u3068DB\u306e\u540d\u524d\u3067DB\u3092\u7279\u5b9a\u3059\u308b\n    db = sqlite_get_fname (fname);\n    Print (\"Dest DB path: \" + db);\n  }\n}\n\n//+------------------------------------------------------------------+\n//sqlite_table_exists\u306e\u4f7f\u7528\u4f8b\n//\u6982\u8981\uff1a\u30c6\u30fc\u30d6\u30eb\u306e\u5b58\u5728\u30c1\u30a7\u30af\u3092\u3059\u308b\n//+------------------------------------------------------------------+\nbool do_check_table_exists (string db, string table)\n{\n    int res = sqlite_table_exists (db, table + \"\");\n\n    if (res < 0) {\n        PrintFormat (\"Check for table existence failed with code %d\", res);\n        return (false);\n    }\n\n    return (res > 0);\n}\n\n\n\n\u88dc\u8db3\uff1a\n\u4e0b\u8a18\u306e\u30b5\u30a4\u30c8\u3082\u95a2\u9023\u60c5\u5831\u304c\u3042\u308a\u307e\u3059\u306e\u3067\u3001\u3054\u78ba\u8a8d\u3057\u3066\u3088\u3044\u3068\u601d\u3044\u307e\u3059\u3002\nhttps://www.mql5.com/ja/articles/862\nhttps://github.com/Shmuma/sqlite3-mt4-wrapper\n\nMQL4\u3067\u7c21\u5358\u306bDB\u304c\u4f7f\u3048\u308b\u3068\u3044\u3044\u306a\u3068\u601d\u3044\u3001\u60c5\u5831\u3092\u53ce\u96c6\u3057\u3066\u307f\u307e\u3057\u305f\u3002\n\u6700\u7d42\u7684\u306b\u305f\u3069\u308a\u7740\u3044\u305f\u306e\u306fSQLite\u3092MQL4\u3067\u306e\u4f7f\u7528\u65b9\u6cd5\u3067\u3059\u3002\n\u203bSQLite\u306f\uff11\u3064\u306e\u30d5\u30a1\u30a4\u30eb\u3067DB\u306e\u6a5f\u80fd\u3092\u679c\u305f\u3059\u3053\u3068\u304c\u3067\u304d\u308b\u305f\u3081\u3001MQL4\u3067\u4f7f\u7528\u3059\u308b\u306e\u306b\u6700\u9ad8\u3067\u3059\u3002\n***\n\n#####1.\u30e2\u30b8\u30e5\u30fc\u30eb\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u30b5\u30a4\u30c8\n***\n```\n1.1.sqlite3_wrapper.dll\u3068sqlite3.mqh\u3092\u4e0b\u8a18\u306e\u30b5\u30a4\u30c8\u304b\u3089\u5165\u624b\nhttps://github.com/Shmuma/sqlite3-mt4-wrapper\n\n1.2.sqlite3\u306e\u672c\u5bb6\u30b5\u30a4\u30c8(MQL4\u3067SQLite\u3092\u4f7f\u7528\u3059\u308b\u5834\u5408\u4e0a\u8a181.1\u3060\u3051\u3067\u826f\u3044\uff09\nhttp://www.sqlite.org/download.html\n```\n#####2.\u3053\u3053\u3067\u306e\u60c5\u5831\u306f\u4e0b\u8a18\u306e\u30b5\u30a4\u30c8\u304b\u3089\u5165\u624b\u3057\u305f\u3082\u306e\u306b\u3088\u308a\u3001\u6574\u7406\u3057\u307e\u3057\u305f\u3002\n***\n```\nhttp://expertadviser-bighope.blogspot.jp/2011/03/mt4.html\nhttps://github.com/Shmuma/sqlite3-mt4-wrapper\n```\n#####3.MQL4\u3067SQLite3\u3092\u4f7f\u7528\u3059\u308b\u6642\u306e\u30d5\u30a9\u30eb\u30c0\u69cb\u6210\u306f\u4e0b\u8a18\u306e\u901a\u308a\u3067\u3059\u3002\n***\n````\nC:\\Program Files\\XM\\MQL4\\Include\\sqlite3.mqh\n\u25b6\ufe0e\u4e0a\u8a18\uff11\uff0e\uff11\u3067\u5165\u624b\u3057\u305fsqlite3.mqh\u3092\u3053\u3053\u306b\u914d\u7f6e\u3059\u308b\nC:\\Program Files\\XM\\MQL4\\Libraries\\sqlite3_wrapper.dll\n\u25b6\ufe0e\u4e0a\u8a18\uff11\uff0e\uff11\u3067\u5165\u624b\u3057\u305fsqlite3_wrapper.dll\u3092\u3053\u3053\u306b\u914d\u7f6e\u3059\u308b\nC:\\Program Files\\XM\\MQL4\\Files\\SQLite\\XXXXX.db\n\u25b6\ufe0eSQLite\u306eDB\u306e\u4fdd\u5b58\u7b87\u6240\u3067\u3059\u3002\u4e0a\u8a18\uff11\uff0e\uff12\u306ehttp://expertadviser-bighope.blogspot.jp/2011/03/mt4.html\u304b\u3089\u5165\u624b\u3057\u305fEventDate.db\u3092\u3053\u3053\u306b\u914d\u7f6e\u3057\u3066\u307f\u308b\nC:\\Program Files\\XM\\MQL4\\Experts\\XXXX.mq4\n\u25b6\ufe0eEA\u306e\u4fdd\u5b58\u7b87\u6240\nC:\\Program Files\\XM\\MQL4\\Scripts\\XXXX.mq4\n\u25b6\ufe0eScript\u306e\u4fdd\u5b58\u7b87\u6240\n```\n#####4.\u30b5\u30f3\u30d7\u30eb\u30bd\u30fc\u30b9\n***\n######4.1 EventHist.mq4\n\u3053\u306e\u90e8\u5206\u306e\u30bd\u30fc\u30b9\u306f\u4e0a\u8a18\u306e\u53c2\u8003\u30b5\u30a4\u30c8\u304b\u3089\u5165\u624b\u3057\u305f\u3082\u306e\u3067\u3059\u3002\u52d5\u304b\u306a\u3044\u3068\u3053\u308d\u3092\u4fee\u6b63\u3057\u305f\u308a\u3001\u30b3\u30e1\u30f3\u30c8\u3092\u81ea\u5206\u306a\u308a\u306b\u5165\u308c\u305f\u308a\u3092\u3057\u307e\u3057\u305f\u3002\n\n```c:EventHist.mq4\n//+------------------------------------------------------------------+\n//|                                                   sqliteTest.mq4 |\n//|                        Copyright 2015, MetaQuotes Software Corp. |\n//|                                             https://www.mql5.com |\n//+------------------------------------------------------------------+\n#include <sqlite3.mqh>\n\n#property copyright \"Copyright 2015, MetaQuotes Software Corp.\"\n#property link      \"https://www.mql5.com\"\n#property version   \"1.00\"\n#property strict\n\nextern string contryname = \"US\";\nextern int    Lank       =   5;\n\nint init()\n  {\n    if (!sqlite_init()) {\n        return INIT_FAILED;\n    }\n\n   string dates;\n   string texts =\"\";\n   string falname = \"EventDate.db\";\n   string db = \"\";\n   \n   //\u7d76\u5bfe\u30d1\u30b9\u3068\u30c7\u30d5\u30a9\u30eb\u30c8\u30d1\u30b9\u3092\u4f7f\u7528\u3059\u308b\u4f8b\n   if(false)\n   {\n      //1.\u7d76\u5bfe\u30d1\u30b9\u3092\u4f7f\u7528\u3059\u308b\u4f8b\n      db = \"C:\\\\Program Files\\\\XM\\\\MQL4\\\\Files\\\\SQLite\\\\EventDate.db\";\n   }\n   else\n   {\n      //2.\u30c7\u30d5\u30a9\u30eb\u30c8\u306e\u30d1\u30b9\u3092\u4f7f\u7528\u4f8b\u3001\u306a\u304a\u3053\u308c\u3092\u3057\u3088\u3046\u3059\u308b\u305f\u3081\u306bsqlite_init()\u3092\u3053\u306e\u524d\u306b\u547c\u3073\u51fa\u3059\u5fc5\u8981\u304c\u3042\u308b\n\n      db = sqlite_get_fname (falname);\n      Print (\"Dest DB path: \" + db);\n   }\n   \n   //\u4f7f\u7528sqlite_table_exists(db, tablename)\u7684\u65b9\u6cd5\u5224\u65ad\u5bf9\u5e94db\u4e2d\u7684\u8868\u662f\u5426\u5b58\u5728\n   if (!sqlite_table_exists (db, \"HistoricalDate\"))\n   {\n        Print(\"files not found\");\n        Alert(\"sqlite_table_exists\");\n   }\n   else\n   {\n         Alert(\"OK!\");\n   }\n    \n    //sqlite_query(db,sql,cols)\u3067DB\u304b\u3089\u6761\u4ef6\u306b\u5408\u3046\u30c7\u30fc\u30bf\u3092\u53d6\u308a\u51fa\u3059\n    int cols[1];\n    int handle = sqlite_query (db, \"select * from HistoricalDate where kuni = \\'\" + contryname + \"\\' and lank= \\'\" + Lank + \"\\'\", cols);\n    \n    Comment(\"\");\n  \n    //sqlite_next_row(handle) == 1 \u3067\u6b21\u306e\u30ec\u30b3\u30fc\u30c9\u304c\u3042\u308b\u304b\u3069\u3046\u304b\u3092\u5224\u65ad\n    //\u6b21\u306e\u30ec\u30b3\u30fc\u30c9\u304c\u3042\u308b\u5834\u5408\u3001sqlite_get_col(handle,N)\u3067\u8a72\u5f53\u5217\u306e\u30c7\u30fc\u30bf\u3092\u53d6\u5f97\u3059\u308b\n    //N\u306f\u5217\u756a\u53f7\u3067\u3042\u308b\n    while (sqlite_next_row (handle) == 1)\n    {\n         dates = \"\"    + sqlite_get_col (handle, 1);\n         dates = dates + sqlite_get_col (handle, 2);\n         dates = dates + sqlite_get_col (handle, 3);\n         dates = dates + sqlite_get_col (handle, 4);\n         dates = dates + sqlite_get_col (handle, 5);\n         dates = dates + sqlite_get_col (handle, 6);\n         dates = dates + sqlite_get_col (handle, 7);\n         dates = dates + sqlite_get_col (handle, 8);\n         \n         texts = texts + dates + \"\\n\";\n    }\n    Comment(texts);\n\n    //sqlite_query(db,sql,cols),sqlite_next_row(handle)\u5b9f\u884c\u5f8c\n    //sqlite_free_query(handel)\u3092\u901a\u3057\u3066\u30ea\u30bd\u30fc\u30b9\u3092\u89e3\u653e\u3059\u308b\uff1f\n    sqlite_free_query (handle);\n\n    return(0);\n  }\n\n//OnDeinit\u3067sqlite_finalize()\u3092\u5b9f\u884c\u3059\u308b;\nvoid OnDeinit(const int reason)\n{\n   sqlite_finalize();\n}\n```\n\n***\n######4.2 sqlite_test.mq4\n\n```\n\u4e0b\u8a18\u306esqlite_test.mq4\u3067\u306f\u4e3b\u306b\u4e0b\u8a18\u306e\u30e1\u30bd\u30c3\u30c9\u306e\u4f7f\u7528\u4f8b\u304c\u767b\u5834\u3057\u3066\u3044\u307e\u3059\u3002\nsqlite_init\u3000\u3000\u3000\u3000\u3000//\u4e00\u756a\u6700\u521d\u3067\u547c\u3073\u51fa\u3059\nsqlite_table_exists//\u30c6\u30fc\u30d6\u30eb\u306e\u5b58\u5728\u30c1\u30a7\u30c3\u30af\u306b\u4f7f\u7528\u3059\u308b\nsqlite_exec        //\u30c6\u30fc\u30d6\u30eb\u4f5c\u6210\u3001\u30c7\u30fc\u30bf\u66f4\u65b0\u3001\u30c7\u30fc\u30bf\u524a\u9664\u3001\u30c7\u30fc\u30bf\u633f\u5165\u3067\u4f7f\u7528\u3057\u307e\u3059\u3002\nsqlite_query       //\u30c6\u30fc\u30d6\u30eb\u304b\u3089\u6761\u4ef6\u3092\u6e80\u305f\u3059\u30c7\u30fc\u30bf\u3092\u53d6\u5f97\u3059\u308b\u6642\u306b\u4f7f\u3046\nsqlite_next_row    //\u6b21\u306e\u30ec\u30b3\u30fc\u30c9\u304c\u3042\u308b\u304b\u306e\u5224\u65ad\u306b\u53ca\u3073SELECT\u6587\u306e\u5b9f\u884c\u6642\u306b\u4f7f\u3046\nsqlite_get_col     //\u30ec\u30b3\u30fc\u30c9\u304c\u3042\u308b\u6642\u306b\u3001\u5217\u756a\u53f7\u3067\u30c7\u30fc\u30bf\u3092\u53d6\u5f97\u3059\u308b(\u30c7\u30fc\u30bf\u306e\u578b\u306b\u3088\u308a\u4f7f\u7528\u3059\u308b\u30e1\u30bd\u30c3\u30c9\u304c\u9055\u3046)\nsqlite_free_query  //\u30c7\u30fc\u30bf\u53d6\u5f97\u5b8c\u4e86\u5f8c\u30ea\u30bd\u30fc\u30b9\u3092\u89e3\u653e\uff1f\nsqlite_finalize    //\u4e00\u756a\u6700\u5f8c\u3067\u547c\u3073\u51fa\u3059\uff08\u3053\u308c\u3082\u30ea\u30bd\u30fc\u30b9\u89e3\u653e\uff1f\uff09\n```\n\n```c:sqlite_test.mq4\n\n#property strict\n\n#include <sqlite3.mqh>\n\nbool do_check_table_exists (string db, string table)\n{\n    int res = sqlite_table_exists (db, table + \"\");\n\n    if (res < 0) {\n        PrintFormat (\"Check for table existence failed with code %d\", res);\n        return (false);\n    }\n\n    return (res > 0);\n}\n\nvoid do_exec (string db, string exp)\n{\n    int res = sqlite_exec (db, exp + \"\");\n    \n    if (res != 0)\n        PrintFormat (\"Expression '%s' failed with code %d\", exp, res);\n}\n\nint OnInit()\n{\n    if (!sqlite_init()) {\n        return INIT_FAILED;\n    }\n\n    return INIT_SUCCEEDED;\n}\n\nvoid OnDeinit(const int reason)\n{\n    sqlite_finalize();\n}\n\nvoid OnStart ()\n{\n    string db = \"test.db\";\n\n    string path = sqlite_get_fname (db);\n    Print (\"Dest DB path: \" + path);\n\n    if (!do_check_table_exists (db, \"test\")) {\n        Print (\"DB not exists, create schema\");\n        do_exec (db, \"create table test (name text)\");\n        do_exec (db, \"insert into test (name) values ('test1')\");\n        do_exec (db, \"insert into test (name) values ('test2')\");\n        do_exec (db, \"insert into test (name) values ('test3')\");\n        do_exec (db, \"insert into test (name) values ('test4')\");\n    }\n\n    int cols[1];\n    int handle = sqlite_query (db, \"select * from test\", cols);\n\n    while (sqlite_next_row (handle) == 1) {\n        for (int i = 0; i < cols[0]; i++)\n            Print (sqlite_get_col (handle, i));\n    }\n\n    sqlite_free_query (handle);\n\n    return;\n}\n\n```\n\n***\n######4.3 sqlite_test_binding.mq4\n```\n\u4e0b\u8a18\u306esqlite_test_binding.mq4\u3067\u306f\u4e3b\u306b\u4e0b\u8a18\u306e\u30e1\u30bd\u30c3\u30c9\u306e\u4f7f\u7528\u4f8b\u304c\u767b\u5834\u3057\u3066\u3044\u307e\u3059\u3002\n\nsqlite_init\u3000\u3000\u3000\u3000\u3000   //\u4e00\u756a\u6700\u521d\u3067\u547c\u3073\u51fa\u3059\nsqlite_table_exists   //\u30c6\u30fc\u30d6\u30eb\u306e\u5b58\u5728\u30c1\u30a7\u30c3\u30af\u306b\u4f7f\u7528\u3059\u308b\nsqlite_exec           //\u30c6\u30fc\u30d6\u30eb\u4f5c\u6210\u3001\u30c7\u30fc\u30bf\u66f4\u65b0\u3001\u30c7\u30fc\u30bf\u524a\u9664\u3001\u30c7\u30fc\u30bf\u633f\u5165\u3067\u4f7f\u7528\u3057\u307e\u3059\u3002\n\nsqlite_query         //\u30c6\u30fc\u30d6\u30eb\u304b\u3089\u6761\u4ef6\u3092\u6e80\u305f\u3059\u30c7\u30fc\u30bf\u3092\u53d6\u5f97\u3059\u308b\u6642\u306b\u4f7f\u3046\u3060\u3051\u3067\u306f\u306a\u304f\u3001\u30c7\u30fc\u30bf\u633f\u5165\u3059\u308b\u6642\u3082\u3067\u304d\u308b\u3053\u3068\u3092\u3053\u306e\u4f8b\u3067\u6539\u3081\u3066\u5206\u304b\u308a\u307e\u3057\u305f\u3002\n**************************************************************************\nstring query = \"insert into quotes (date, symbol, open, high, low, close) values (?, ?, ?, ?, ?, ?)\";\nstring query = \"select * from quotes where symbol = ? order by date\";\n**************************************************************************\n\nsqlite_query\u3067\u30cf\u30f3\u30c9\u30eb\u3092\u4f5c\u3063\u3066\u304a\u3044\u3066\u3001\u4e0b\u8a18\u306e\u30e1\u30c3\u30bd\u30c9\u306e\u9806\u756a\u3067\u30c7\u30fc\u30bf\u3092\u30d0\u30a4\u30f3\u30c7\u30a3\u30f3\u30b0\u3057\u3001SQL\u3092\u5b9f\u884c\u3059\u308b\u3001\u7d42\u308f\u3063\u305f\u3089\u30ea\u30bd\u30fc\u30b9\u3092\u89e3\u653e\u3059\u308b\n**************************************************************************\nsqlite_reset          //\u30d0\u30a4\u30f3\u30c7\u30a3\u30f3\u30b0\u3092\u30ea\u30bb\u30c3\u30c8\u3059\u308b\uff1f\nsqlite_bind_int64     //integer\u578b\u306e\u5217\u306b\u30c7\u30fc\u30bf\u3092\u30d0\u30a4\u30f3\u30c7\u30a3\u30f3\u30b0\u3059\u308b\nsqlite_bind_text      //text\u578b\u306e\u5217\u306b\u30c7\u30fc\u30bf\u3092\u30d0\u30a4\u30f3\u30c7\u30a3\u30f3\u30b0\u3059\u308b\nsqlite_bind_double    //real\u578b\u306e\u5217\u306b\u30c7\u30fc\u30bf\u3092\u30d0\u30a4\u30f3\u30c7\u30a3\u30f3\u30b0\u3059\u308b\nsqlite_next_row       //Inset\u306e\u6642\u306e\u30d0\u30a4\u30f3\u30c7\u30a3\u30f3\u30b0\u53ca\u3073\u3082\u4f7f\u3046\u3068\u306f\u77e5\u3089\u306a\u304b\u3063\u305f\u3001\u6b21\u306e\u30ec\u30b3\u30fc\u30c9\u3092\u64cd\u4f5c\u3059\u308b\uff1f\u63a1\u756a\uff1f\n**************************************************************************\n\nsqlite_get_col        //\u30ec\u30b3\u30fc\u30c9\u304c\u3042\u308b\u6642\u306b\u3001\u5217\u756a\u53f7\u3067\u30c7\u30fc\u30bf\u3092\u53d6\u5f97\u3059\u308b(string\u578b\u306e\u5217)\nsqlite_get_col_double //\u30ec\u30b3\u30fc\u30c9\u304c\u3042\u308b\u6642\u306b\u3001\u5217\u756a\u53f7\u3067\u30c7\u30fc\u30bf\u3092\u53d6\u5f97\u3059\u308b(double\u578b\u306e\u5217)\nsqlite_next_row    \u3000\u3000//\u30c7\u30fc\u30bf\u3092\u53d6\u5f97\u3059\u308b(SELECT)\u6642\u306b\u6b21\u306e\u30ec\u30b3\u30fc\u30c9\u304c\u3042\u308b\u304b\u306e\u5224\u65ad\u306b\u4f7f\u3046\nsqlite_free_query     //\u30c7\u30fc\u30bf\u53d6\u5f97\u5b8c\u4e86\u5f8c\u30ea\u30bd\u30fc\u30b9\u3092\u89e3\u653e\uff1f\nsqlite_finalize       //\u4e00\u756a\u6700\u5f8c\u3067\u547c\u3073\u51fa\u3059\uff08\u3053\u308c\u3082\u30ea\u30bd\u30fc\u30b9\u89e3\u653e\uff1f\uff09\n```\n\n```c:sqlite_test_binding.mq4\n#property strict\n\n#include <sqlite3.mqh>\n\nbool do_check_table_exists (string db, string table)\n{\n    int res = sqlite_table_exists (db, table + \"\");\n\n    if (res < 0) {\n        PrintFormat (\"Check for table existence failed with code %d\", res);\n        return (false);\n    }\n\n    return (res > 0);\n}\n\nvoid do_exec (string db, string exp)\n{\n    int res = sqlite_exec (db, exp + \"\");\n\n    if (res != 0)\n        PrintFormat (\"Expression '%s' failed with code %d\", exp, res);\n}\n\nint OnInit()\n{\n    if (!sqlite_init()) {\n        return INIT_FAILED;\n    }\n\n    return INIT_SUCCEEDED;\n}\n\nvoid OnStart ()\n{\n    string db = \"test_binding.db\";\n\n    if (!do_check_table_exists (db, \"quotes\"))\n        do_exec (db,\n            \"create table quotes (\" +\n            \" date integer,\" +\n            \" symbol text,\" +\n            \" open real,\" +\n            \" high real,\" +\n            \" low real,\" +\n            \" close real)\");\n\n    int count = iBars (NULL, 0);\n    PrintFormat (\"Count = %d\", count);\n\n    string query = \"insert into quotes (date, symbol, open, high, low, close) values (?, ?, ?, ?, ?, ?)\";\n    int cols[1];\n\n    int handle = sqlite_query (db, query, cols);\n    if (handle < 0) {\n        Print (\"Preparing query failed; query=\", query, \", error=\", -handle);\n        return;\n    }\n\n    datetime start = TimeLocal ();\n    for (int i = 0; i < count; i++) {\n        sqlite_reset (handle);\n        sqlite_bind_int64 (handle, 1, iTime (NULL, 0, i));\n        sqlite_bind_text (handle, 2, Symbol ());\n        sqlite_bind_double (handle, 3, NormalizeDouble (iOpen (NULL, 0, i), Digits));\n        sqlite_bind_double (handle, 4, NormalizeDouble (iHigh (NULL, 0, i), Digits));\n        sqlite_bind_double (handle, 5, NormalizeDouble (iLow (NULL, 0, i), Digits));\n        sqlite_bind_double (handle, 6, NormalizeDouble (iClose (NULL, 0, i), Digits));\n        sqlite_next_row (handle);\n    }\n\n    sqlite_free_query (handle);\n\n    datetime end = TimeLocal ();\n    datetime elapsed = end - start;\n    PrintFormat (\"insert %d rows in %u sec\", IntegerToString(count), elapsed);\n}\n\nvoid OnDeinit (const int reason)\n{\n\n    string db = \"test_binding.db\";\n\n    Print (\"Fetching rows start\");\n\n    int cols[1];\n    string query = \"select * from quotes where symbol = ? order by date\";\n    int handle = sqlite_query (db, query, cols);\n    if (handle < 0) {\n        Print (\"Preparing query failed; query=\", query, \", error=\", -handle);\n        return;\n    }\n\n    sqlite_bind_text (handle, 1, Symbol ());\n\n    int count = 0;\n    \n    // only print first 100 records\n    while (sqlite_next_row (handle) == 1 && count < 100) {\n        datetime date = (datetime) sqlite_get_col_int64 (handle, 0);\n        string symbol = sqlite_get_col (handle, 1);\n        double open = sqlite_get_col_double (handle, 2);\n        double high = sqlite_get_col_double (handle, 3);\n        double low = sqlite_get_col_double (handle, 4);\n        double close = sqlite_get_col_double (handle, 5);\n\n        PrintFormat (\"date=%s, symbol=%s, open/high/low/close=%s/%s/%s/%s\",\n            TimeToString (date), Symbol (),\n            DoubleToString (open, Digits),\n            DoubleToString (high, Digits),\n            DoubleToString (low, Digits),\n            DoubleToString (close, Digits));\n\n        count += 1;\n    }\n    \n    Print (\"fetching rows done\");\n\n    sqlite_free_query (handle);\n\n    sqlite_finalize();\n}\n\n```\n\n\n***\n######4.4 sqlite_test_extra.mq4\n```\n\u4e0b\u8a18\u306esqlite_test_extra.mq4\u3067\u306f\u4e3b\u306b\u4e0b\u8a18\u306e\u30e1\u30bd\u30c3\u30c9\u306e\u4f7f\u7528\u4f8b\u304c\u767b\u5834\u3057\u3066\u3044\u307e\u3059\u3002\n\nsqlite_init           //\u4e00\u756a\u6700\u521d\u3067\u547c\u3073\u51fa\u3059\nsqlite_get_fname      //DB\u306e\u30d5\u30eb\u30d1\u30b9\u306e\u53d6\u5f97\u306b\u4f7f\u7528\u3059\u308b\nsqlite_table_exists   //\u30c6\u30fc\u30d6\u30eb\u306e\u5b58\u5728\u30c1\u30a7\u30c3\u30af\u306b\u4f7f\u7528\u3059\u308b\nsqlite_exec           //\u30c6\u30fc\u30d6\u30eb\u4f5c\u6210\u3001\u30c7\u30fc\u30bf\u66f4\u65b0\u3001\u30c7\u30fc\u30bf\u524a\u9664\u3001\u30c7\u30fc\u30bf\u633f\u5165\u3067\u4f7f\u7528\u3057\u307e\u3059\u3002\nsqlite_query          //\u30c6\u30fc\u30d6\u30eb\u304b\u3089\u6761\u4ef6\u3092\u6e80\u305f\u3059\u30c7\u30fc\u30bf\u3092\u53d6\u5f97\u3059\u308b\u6642\u306b\u4f7f\u3046\u3060\u3051\u3067\u306f\u306a\u304f\u3001\u30c7\u30fc\u30bf\u633f\u5165\u3059\u308b\u6642\u3082\u3067\u304d\u308b\nsqlite_get_col        //\u30ec\u30b3\u30fc\u30c9\u304c\u3042\u308b\u6642\u306b\u3001\u5217\u756a\u53f7\u3067\u30c7\u30fc\u30bf\u3092\u53d6\u5f97\u3059\u308b(string\u578b\u306e\u5217)\nsqlite_next_row       //\u30c7\u30fc\u30bf\u3092\u53d6\u5f97\u3059\u308b(SELECT)\u6642\u306b\u6b21\u306e\u30ec\u30b3\u30fc\u30c9\u304c\u3042\u308b\u304b\u306e\u5224\u65ad\u306b\u4f7f\u3046\nsqlite_free_query     //\u30c7\u30fc\u30bf\u53d6\u5f97\u5b8c\u4e86\u5f8c\u30ea\u30bd\u30fc\u30b9\u3092\u89e3\u653e\uff1f\nsqlite_finalize       //\u4e00\u756a\u6700\u5f8c\u3067\u547c\u3073\u51fa\u3059\uff08\u3053\u308c\u3082\u30ea\u30bd\u30fc\u30b9\u89e3\u653e\uff1f\uff09\n```\n\n```c:sqlite_test_extra.mq4\n#property strict\n#include <sqlite3.mqh>\n\nbool do_check_table_exists (string db, string table)\n{\n    int res = sqlite_table_exists (db, table + \"\");\n\n    if (res < 0) {\n        PrintFormat (\"Check for table existence failed with code %d\", res);\n        return (false);\n    }\n\n    return (res > 0);\n}\n\nvoid do_exec (string db, string exp)\n{\n    int res = sqlite_exec (db, exp + \"\");\n    \n    if (res != 0)\n        PrintFormat (\"Expression '%s' failed with code %d\", exp, res);\n}\n\nint OnInit()\n{\n    if (!sqlite_init()) {\n        return INIT_FAILED;\n    }\n\n    return INIT_SUCCEEDED;\n}\n\nvoid OnDeinit(const int reason)\n{\n    sqlite_finalize();\n}\n\nvoid OnStart ()\n{\n    string db = \"test_extra.db\";\n\n    string path = sqlite_get_fname (db);\n    Print (\"Dest DB path: \" + path);\n\n    if (!do_check_table_exists (db, \"test\")) {\n        Print (\"DB not exists, create schema\");\n        do_exec (db, \"create table test (name text)\");\n        do_exec (db, \"insert into test (name) values ('test1')\");\n        do_exec (db, \"insert into test (name) values ('test2')\");\n        do_exec (db, \"insert into test (name) values ('test3')\");\n        do_exec (db, \"insert into test (name) values ('test4')\");\n    }\n\n    int cols[1];\n    int handle = sqlite_query (db, \"select cos(radians(45))\", cols);\n\n    PrintFormat (\"Handle value: %d\", handle);\n\n    while (sqlite_next_row (handle) == 1) {\n        for (int i = 0; i < cols[0]; i++)\n            Print (sqlite_get_col (handle, i));\n    }\n\n    sqlite_free_query (handle);\n}\n\n```\n\n***\n######4.5 sqlite_test_insert_quotes.mq4\n```\n\u4e0b\u8a18\u306esqlite_test_insert_quotes.mq4\u3067\u306f\u4e3b\u306b\u4e0b\u8a18\u306e\u30e1\u30bd\u30c3\u30c9\u306e\u4f7f\u7528\u4f8b\u304c\u767b\u5834\u3057\u3066\u3044\u307e\u3059\u3002\nsqlite_init           //\u4e00\u756a\u6700\u521d\u3067\u547c\u3073\u51fa\u3059\nsqlite_table_exists   //\u30c6\u30fc\u30d6\u30eb\u306e\u5b58\u5728\u30c1\u30a7\u30c3\u30af\u306b\u4f7f\u7528\u3059\u308b\nsqlite_exec           //\u30c6\u30fc\u30d6\u30eb\u4f5c\u6210\u3001\u30c7\u30fc\u30bf\u66f4\u65b0\u3001\u30c7\u30fc\u30bf\u524a\u9664\u3001\u30c7\u30fc\u30bf\u633f\u5165\u306a\u3069\u3067\u4f7f\u7528\u3057\u307e\u3059\u3002\nsqlite_finalize       //\u4e00\u756a\u6700\u5f8c\u3067\u547c\u3073\u51fa\u3059\uff08\u3053\u308c\u3082\u30ea\u30bd\u30fc\u30b9\u89e3\u653e\uff1f\uff09\n```\n```c:sqlite_test_insert_quotes.mq4\n#property strict\n\n#include <sqlite3.mqh>\n\nint OnInit()\n{\n    if (!sqlite_init()) {\n        return INIT_FAILED;\n    }\n\n    return INIT_SUCCEEDED;\n}\n\nvoid OnDeinit(const int reason)\n{\n    sqlite_finalize();\n}\n\nvoid OnStart ()\n{\n    string db = \"test_quotes.db\";\n\n    if (!sqlite_table_exists (db, \"quotes\"))\n        sqlite_exec (db, \"create table quotes (date, open, high, low, close)\");\n\n    int count = iBars (NULL, 0);\n    PrintFormat (\"Count = %d\", count);\n\n    datetime start = TimeLocal ();\n\n    for (int i = 0; i < count; i++) {\n        string query = \"insert into quotes (date, open, high, low, close) values ('\" + \n                     TimeToStr (iTime (NULL, 0, i)) + \"',\" + \n                     DoubleToString(iOpen (NULL, 0, i), Digits) + \",\" +\n                     DoubleToString(iHigh (NULL, 0, i), Digits) + \",\" +\n                     DoubleToString(iLow (NULL, 0, i), Digits) + \",\" +\n                     DoubleToString(iClose (NULL, 0, i), Digits) + \");\";\n\n        sqlite_exec (db, query);\n    }\n\n    datetime end = TimeLocal ();\n    datetime elapsed = end - start;\n    PrintFormat (\"inserted %d rows in %u sec\", count, elapsed);\n}\n\n```\n\n***\n######4.5 sqlite_test_journal.mq4\n```\n\u4e0b\u8a18\u306esqlite_test_journal.mq4\u3067\u306f\u4e3b\u306b\u4e0b\u8a18\u306e\u30e1\u30bd\u30c3\u30c9\u306e\u4f7f\u7528\u4f8b\u304c\u767b\u5834\u3057\u3066\u3044\u307e\u3059\u3002\nsqlite_init              //\u4e00\u756a\u6700\u521d\u3067\u547c\u3073\u51fa\u3059\nsqlite_get_fname         //DB\u306e\u30d5\u30eb\u30d1\u30b9\u306e\u53d6\u5f97\u306b\u4f7f\u7528\u3059\u308b\nsqlite_table_exists      //\u30c6\u30fc\u30d6\u30eb\u306e\u5b58\u5728\u30c1\u30a7\u30c3\u30af\u306b\u4f7f\u7528\u3059\u308b\nsqlite_set_journal_mode  //??\u5404\u30e2\u30fc\u30c9\nsqlite_exec              //\u30c6\u30fc\u30d6\u30eb\u4f5c\u6210\u3001\u30c7\u30fc\u30bf\u66f4\u65b0\u3001\u30c7\u30fc\u30bf\u524a\u9664\u3001\u30c7\u30fc\u30bf\u633f\u5165\u306a\u3069\u3067\u4f7f\u7528\u3057\u307e\u3059\u3002\nsqlite_finalize          //\u4e00\u756a\u6700\u5f8c\u3067\u547c\u3073\u51fa\u3059\uff08\u3053\u308c\u3082\u30ea\u30bd\u30fc\u30b9\u89e3\u653e\uff1f\uff09\n```\n```c:sqlite_test_journal.mq4\n#property strict\n#include <sqlite3.mqh>\n\nbool do_check_table_exists (string db, string table)\n{\n    int res = sqlite_table_exists (db, table + \"\");\n\n    if (res < 0) {\n        PrintFormat (\"Check for table existence failed with code %d\", res);\n        return (false);\n    }\n\n    return (res > 0);\n}\n\n\nvoid benchmark (string db, string mode)\n{\n    sqlite_set_journal_mode (mode);\n\n    datetime start = TimeLocal ();\n\n    sqlite_exec (db, \"delete from bench;\");\n\n    for (int i = 0; i < 100000; i++)\n        sqlite_exec (db, \"insert into bench (\" + IntegerToString (i) + \");\");\n\n    Alert (\"Benchmark for mode \" + mode + \" took \" + IntegerToString (TimeLocal() - start) + \" seconds\");\n}\n\nint OnInit()\n{\n    if (!sqlite_init()) {\n        return INIT_FAILED;\n    }\n\n    return INIT_SUCCEEDED;\n}\n\nvoid OnDeinit(const int reason)\n{\n    sqlite_finalize();\n}\n\nvoid OnStart ()\n{\n    string db = \"test_journal.db\", table = \"test\";\n\n    string path = sqlite_get_fname (db);\n    Print (\"Dest DB path: \" + path);\n\n    if (!do_check_table_exists (db, table)) {\n        Print (\"DB not exists, create schema\");\n        sqlite_exec (db, \"create table bench (id integer)\");\n    }\n\n    Print (\"Start benchmarks\");\n\n    benchmark (db, \"DELETE\");\n    benchmark (db, \"WAL\");\n    benchmark (db, \"MEMORY\");\n    benchmark (db, \"OFF\");\n}\n\n```\n\n###5.\\MQL4\\Include\\sqlite3.mqh\u306e\u4e2d\u8eab\n\u4e0b\u8a18\u306e\u30bd\u30fc\u30b9\u306f\\MQL4\\Include\\sqlite3.mqh\u306e\u5185\u5bb9\u3068\u306a\u308a\u3001\u3053\u308c\u3067\u3069\u308c\u3060\u3051\u95a2\u6570\u4f7f\u3048\u308b\u304b\u53ca\u3073\u5f15\u6570\u3068\u623b\u308a\u5024\u306e\u578b\u3092\u78ba\u8a8d\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\n```c:1.\u95a2\u6570\u4e00\u89a7\n/*\n * SQLite interface for MT4\n */\n\n#import \"sqlite3_wrapper.dll\"\nint sqlite_initialize (string terminal_data_path);\nvoid sqlite_finalize ();\n\n// Warning: These two routines are affected by MT4 (build 610) bug,\n// which causes wrong argument order passed to DLL, when both arguments are from variables.\n// The simplest workaround of this, is to add empty string to SECOND argument on call.\n// See example sqlite_test.mq4.\nint sqlite_exec (string db_fname, string sql);\nint sqlite_table_exists (string db_fname, string table);\n\nint sqlite_query (string db_fname, string sql, int& cols[]);\nint sqlite_reset (int handle);\nint sqlite_bind_int (int handle, int col, int bind_value);\nint sqlite_bind_int64 (int handle, int col, long bind_value);\nint sqlite_bind_double (int handle, int col, double bind_value);\nint sqlite_bind_text (int handle, int col, string bind_value);\nint sqlite_bind_null (int handle, int col);\nint sqlite_next_row (int handle);\nstring sqlite_get_col (int handle, int col);\nint sqlite_get_col_int (int handle, int col);\nlong sqlite_get_col_int64 (int handle, int col);\ndouble sqlite_get_col_double (int handle, int col);\nint sqlite_free_query (int handle);\nstring sqlite_get_fname (string db_fname);\nvoid sqlite_set_busy_timeout (int ms);\nvoid sqlite_set_journal_mode (string mode);\n#import\n\nbool sqlite_init()\n{\n    int error = sqlite_initialize(TerminalInfoString(TERMINAL_DATA_PATH));\n    if (error == 0) {\n        Print(\"sqlite initialization succeeded\");\n        return true;\n    }\n    else {\n        Alert(\"ERROR: sqlite initialization failed, error=\" + IntegerToString(error));\n        return false;\n    }\n}\n\n```\n\n\uff16.\u672c\u5f53\u306f\u4e0a\u8a18\u306e\u30b5\u30f3\u30d7\u30eb\u3055\u3048\u3042\u308c\u3070\u3001\u4f7f\u3048\u308b\u3068\u601d\u3044\u307e\u3059\u304c\u3002\n\u4eca\u5f8c\u4e0a\u8a18\u306e\u95a2\u6570\u4e00\u89a7\u306e\u4e2d\u306e\u95a2\u6570\u306e\u4f7f\u7528\u4f8b\u3092\uff11\u3064\uff11\u3064\u8ffd\u52a0\u3057\u3066\u3044\u304f\u3053\u3068\u3067\u4f7f\u3044\u5012\u3059\u3053\u3068\u3092\u76ee\u6307\u3059\n\n```c:2.\u95a2\u6570\u306e\u4f7f\u7528\n//+------------------------------------------------------------------+\n//sqlite_init\u3068sqlite_finalize\u306e\u4f7f\u7528\u4f8b\n//\u6982\u8981\uff1aOnInit\u3068OnDeinit\u3067\u4f7f\u7528\u3059\u308b\n//\u0013\u6ce8\u610f\uff1asqlite_get_fname\u3067DB\u306e\u7d76\u5bfe\u30d1\u30b9\u3092\u53d6\u5f97\u3059\u308b\u524d\u306b\u3001sqlite_init\u3092\u547c\u3073\u51fa\u3059\u5fc5\u8981\u304c\u3042\u308b\n//+------------------------------------------------------------------+\nint OnInit(){\n    if (!sqlite_init()) {\n        return INIT_FAILED;\n    }\n\n    return INIT_SUCCEEDED;\n}\nvoid OnDeinit(const int reason){\n    sqlite_finalize();\n}\n\n\n//+------------------------------------------------------------------+\n//sqlite_get_fname\u306e\u4f7f\u7528\u4f8b\n//\u6982\u8981\uff1adb\u306e\u7d76\u5bfe\u30d1\u30b9\u3092\u53d6\u5f97\u3059\u308b(\u4f7f\u7528\u3059\u308b\u524d\u306bsqlite_init\u3092\u547c\u3073\u51fa\u3059\u5fc5\u8981\u304c\u3042\u308b\uff09\n//+------------------------------------------------------------------+\n{\n  extern bool absolutelyPath = false;\n  extern string db = \"C:\\\\Program Files\\\\XMMT4\\\\MQL4\\\\Files\\\\SQLite\\\\sqlite.db\";\n  string fname = \"sqlite.db\";\n   \n  //1.\u7d76\u5bfe\u30d1\u30b9\u3092\u4f7f\u7528\u3059\u308b\n  if(absolutelyPath){\n    db = db;\n  }else{\n    //2.sqlite_init()\u3068DB\u306e\u540d\u524d\u3067DB\u3092\u7279\u5b9a\u3059\u308b\n    db = sqlite_get_fname (fname);\n    Print (\"Dest DB path: \" + db);\n  }\n}\n\n//+------------------------------------------------------------------+\n//sqlite_table_exists\u306e\u4f7f\u7528\u4f8b\n//\u6982\u8981\uff1a\u30c6\u30fc\u30d6\u30eb\u306e\u5b58\u5728\u30c1\u30a7\u30af\u3092\u3059\u308b\n//+------------------------------------------------------------------+\nbool do_check_table_exists (string db, string table)\n{\n    int res = sqlite_table_exists (db, table + \"\");\n\n    if (res < 0) {\n        PrintFormat (\"Check for table existence failed with code %d\", res);\n        return (false);\n    }\n\n    return (res > 0);\n}\n\n```\n\n\u88dc\u8db3\uff1a\n\u4e0b\u8a18\u306e\u30b5\u30a4\u30c8\u3082\u95a2\u9023\u60c5\u5831\u304c\u3042\u308a\u307e\u3059\u306e\u3067\u3001\u3054\u78ba\u8a8d\u3057\u3066\u3088\u3044\u3068\u601d\u3044\u307e\u3059\u3002\nhttps://www.mql5.com/ja/articles/862\n\nhttps://github.com/Shmuma/sqlite3-mt4-wrapper\n"}