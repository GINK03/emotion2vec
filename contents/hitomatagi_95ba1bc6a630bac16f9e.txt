{"context": "\n\n\u306f\u3058\u3081\u306b\n\u3000\u30ec\u30ac\u30b7\u30fc\u30b3\u30fc\u30c9\u306e static, final, private, new \u3092\u30e2\u30c3\u30af\u306b\u3057\u305f\u3044\u3068\u304d\u3001\u6b21\u306e\u3088\u3046\u306a\u9078\u629e\u80a2\u304c\u8003\u3048\u3089\u308c\u307e\u3059\u3002\n(A) Mockito + \u81ea\u4f5c\u306e\u30e9\u30c3\u30d1\u30fc\u30af\u30e9\u30b9 or \u30ea\u30d5\u30a1\u30af\u30bf\u30ea\u30f3\u30b0\n(B) Mockito + PowerMockito\n(C) JMockit\n(A)\uff5e(C)\u306e\u3069\u308c\u306b\u3059\u308b\u306e\u304b\u306f\u3001\u30c6\u30b9\u30c8\u5bfe\u8c61\u3068\u306e\u517c\u306d\u5408\u3044\u306b\u306a\u308b\u304b\u3068\u601d\u3044\u307e\u3059\u3002\n\u4ee5\u524d\u3001\u300eJava \u30c6\u30b9\u30c8\u30c4\u30fc\u30eb\u306e\u30c8\u30ec\u30f3\u30c9 2014/1\uff5e2016/5\u300f\u3068\u3044\u3046\u8a18\u4e8b\u3092\u66f8\u304d\u307e\u3057\u305f\u304c\u3001\u672c\u8a18\u4e8b\u3067\u306f\u3001\u3053\u306e\u4e2d\u3067\u4e00\u756a\u60c5\u5831\u304c\u5c11\u306a\u3044JMockit\u3067\u30e2\u30c3\u30af\u3092\u4f5c\u308b\u65b9\u6cd5\u3092\u7d39\u4ecb\u3057\u307e\u3059\u3002\n\n\u30bb\u30c3\u30c8\u30a2\u30c3\u30d7\nEclipse\u3067JMockit\u3092\u4f7f\u3048\u308b\u3088\u3046\u306b\u30bb\u30c3\u30c8\u30a2\u30c3\u30d7\u3057\u3066\u307f\u307e\u3059\u3002  \n\n\n\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\n\u4eca\u56de\u306fjmockit-1.27.zip\u3092\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3057\u307e\u3057\u305f\u3002\nhttp://jmockit.org/index.html\n\u3000\n\n\n\u30af\u30e9\u30b9\u30d1\u30b9\njmockit.jar\u3092Eclipse\u306e\u300cJUnit 4\u300d\u30e9\u30a4\u30d6\u30e9\u30ea\u30fc\u3088\u308a\u3082\u524d\u306b\u8a2d\u5b9a\u3057\u307e\u3059\u3002\n\n\u30af\u30e9\u30b9\u30d1\u30b9\u306e\u6307\u5b9a\u9806\u3092\u9006\u306b\u3059\u308b\u3068IllegalStateException\u304c\u767a\u751f\u3057\u307e\u3059\u3002  \njava.lang.IllegalStateException: JMockit wasn't properly initialized; please ensure that jmockit precedes junit in the runtime classpath, or use @RunWith(JMockit.class)\n    at sample.FooTest$1.<init>(FooTest.java:19)\n    at sample.FooTest.testGetString(FooTest.java:19)\n    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n    at java.lang.reflect.Method.invoke(Method.java:498)\n    at org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReference.java:86)\n    at org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38)\n    at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:459)\n    at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:678)\n    at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:382)\n    at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:192)\n\n\u8a2d\u5b9a\u65b9\u6cd5\u306f\u3001\u30af\u30e9\u30b9\u30d1\u30b9\u306e\u6307\u5b9a\u9806\u3067\u306f\u306a\u304f\u3001JMockit\u3092\u4f7f\u3063\u3066\u3044\u308b\u30c6\u30b9\u30c8\u30af\u30e9\u30b9\u306b@RunWith(JMockit.class)\u306e\u30a2\u30ce\u30c6\u30fc\u30b7\u30e7\u30f3\u3092\u3064\u3051\u308b\u65b9\u6cd5\u3082\u3042\u308a\u307e\u3059\u3002\n\u3000  \n\n\n\u30b5\u30f3\u30d7\u30eb\n\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u3067\u52d5\u4f5c\u78ba\u8a8d\u3057\u3066\u307f\u307e\u3059\u3002final\u30af\u30e9\u30b9Foo\u306e\"Foo\"\u306e\u6587\u5b57\u5217\u3092\u5fdc\u7b54\u3059\u308bfinal\u30e1\u30bd\u30c3\u30c9getString()\u306b\"Mock\"\u3068\u5fdc\u7b54\u3055\u305b\u3066\u307f\u307e\u3059\u3002\n\u30d7\u30ed\u30c0\u30af\u30b7\u30e7\u30f3\u30b3\u30fc\u30c9 \n\nFoo.java\npackage sample;\n\nfinal class Foo {\n    public final String getString() {\n        return \"Foo\";\n    }\n}\n\n\n\u30c6\u30b9\u30c8\u30b3\u30fc\u30c9 \n\nFooTest_1.java\npackage sample;\n\nimport static org.hamcrest.CoreMatchers.*;\nimport static org.junit.Assert.*;\n\nimport org.junit.Test;\n\nimport mockit.Expectations;\nimport mockit.Mocked;\n\n//@RunWith(JMockit.class)\npublic class FooTest_1 {\n\n    @Mocked\n    private Foo foo;\n\n    @Test\n    public void testGetString() {\n        // Record\n        new Expectations() {{\n            foo.getString();\n            result = \"Mock\";\n        }};\n\n        // Replay\n        String actual = foo.getString();\n\n        // Verify\n        assertThat(actual, is(\"Mock\"));\n    }\n\n}\n\n\n\u30c6\u30b9\u30c8\u30af\u30e9\u30b9\u3067\u306f\u3001\uff20Mocked\u30a2\u30ce\u30c6\u30fc\u30b7\u30e7\u30f3\u3067Foo\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u30e2\u30c3\u30af\u306b\u3057\u3001\u30c6\u30b9\u30c8\u30e1\u30bd\u30c3\u30c9\u5185\u3067\u30e2\u30c3\u30af\u306e\u8a2d\u5b9a\u3092\u3057\u307e\u3059\uff08new Expectations(){...}\uff09\u3002JMockit\u306e\u5834\u5408\u3001final\u30af\u30e9\u30b9\u3084final\u30e1\u30bd\u30c3\u30c9\u306b\u3064\u3044\u3066\u610f\u8b58\u3057\u3066\u306a\u306b\u304b\u3059\u308b\u5fc5\u8981\u306f\u3042\u308a\u307e\u305b\u3093\u3002\n\u3053\u308c\u3067JUnit\u306e\u5b9f\u884c\u304c\u6210\u529f\u3059\u308c\u3070\u3001JMockit\u306e\u30bb\u30c3\u30c8\u30a2\u30c3\u30d7\u306f\u5b8c\u4e86\u3067\u3059\u3002\n\u3000  \n\n\n\n@Mocked\n\n\n\n@Mocked\u30a2\u30ce\u30c6\u30fc\u30b7\u30e7\u30f3\n\u3000@Mocked\u30a2\u30ce\u30c6\u30fc\u30b7\u30e7\u30f3\u3092\u6307\u5b9a\u3057\u3066\u751f\u6210\u3057\u305f\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u306f\u3001\u30e2\u30c3\u30af\u306e\u30e1\u30bd\u30c3\u30c9\u3084\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u306e\u5b9f\u88c5\u306f\u7a7a\u306b\u306a\u308a\u3001\u5229\u7528\u3059\u308b\u30e1\u30bd\u30c3\u30c9\u306b\u5bfe\u3057\u3066new Expectations() {...}\u3067\u52d5\u4f5c\u3092\u8a2d\u5b9a\u3057\u307e\u3059\u3002\n\u3000\n\n\u30c6\u30b9\u30c8\u30e1\u30bd\u30c3\u30c9\u6bce\u306b\u30e2\u30c3\u30af\u3092\u751f\u6210\u3059\u308b\n\u3000\u30bb\u30c3\u30c8\u30a2\u30c3\u30d7\u3067\u7d39\u4ecb\u3057\u305f\u65b9\u6cd5\u306e\u3088\u3046\u306b\u3001\u30c6\u30b9\u30c8\u30af\u30e9\u30b9\u306e\u30d5\u30a3\u30fc\u30eb\u30c9\u306b\u5bfe\u3057\u3066@Mocked\u3092\u5b9a\u7fa9\u3059\u308b\u3068\u3001\u5168\u3066\u306e\u30c6\u30b9\u30c8\u30e1\u30bd\u30c3\u30c9\u304c\u5b9f\u884c\u3055\u308c\u308b\u305f\u3073\u306b@Mocked\u3092\u6307\u5b9a\u3057\u305f\u30d5\u30a3\u30fc\u30eb\u30c9\u306b\u30e2\u30c3\u30af\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u304c\u751f\u6210\u3055\u308c\u307e\u3059\u3002\uff11\u3064\u306e\u30c6\u30b9\u30c8\u30af\u30e9\u30b9\u306b\u8907\u6570\u306e\u30c6\u30b9\u30c8\u30e1\u30bd\u30c3\u30c9\u304c\u3042\u308a\u3001\u30e2\u30c3\u30af\u3092\u4f7f\u3046\u306e\u304c\u305d\u306e\u4e00\u90e8\u306e\u30c6\u30b9\u30c8\u30e1\u30bd\u30c3\u30c9\u306e\u5834\u5408\u306f\u3001\u30e2\u30c3\u30af\u3092\u4f7f\u308f\u306a\u3044\u30c6\u30b9\u30c8\u306b\u5bfe\u3057\u3066\u30e2\u30c3\u30af\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u751f\u6210\u3059\u308b\u306e\u306f\u52b9\u7387\u304c\u3088\u304f\u3042\u308a\u307e\u305b\u3093\u3002\u30c6\u30b9\u30c8\u30e1\u30bd\u30c3\u30c9\u6bce\u306b\u30e2\u30c3\u30af\u3092\u751f\u6210\u3059\u308b\u5834\u5408\u306f\u3001\u30e1\u30bd\u30c3\u30c9\u306b\u5bfe\u3057\u3066\u30e2\u30c3\u30af\u3092\u6307\u5b9a\u3057\u307e\u3059\u3002\u30c6\u30b9\u30c8\u7d50\u679c\u306f\u540c\u3058\u306b\u306a\u308a\u307e\u3059\u3002\n\nFooTest_2.java\npackage sample;\n\nimport static org.hamcrest.CoreMatchers.*;\nimport static org.junit.Assert.*;\n\nimport org.junit.Test;\n\nimport mockit.Expectations;\nimport mockit.Mocked;\n\npublic class FooTest_2 {\n\n    @Test\n    public void testGetString(@Mocked final Foo foo) {\n        // Record\n        new Expectations() {{\n            foo.getString();\n            result = \"Mock\";\n        }};\n\n        // Replay\n        String actual = foo.getString();\n\n        // Verify\n        assertThat(actual, is(\"Mock\"));\n    }\n\n}\n\n\n\n\n\u540c\u3058\u30af\u30e9\u30b9\u306e\u30e2\u30c3\u30af\u3092\u8907\u6570\u4f5c\u308b\n\u540c\u3058\u30af\u30e9\u30b9\u306e\u30e2\u30c3\u30af\u3092\u8907\u6570\u4f5c\u308a\u305d\u308c\u305e\u308c\u7570\u306a\u308b\u52d5\u4f5c\u3092\u8a2d\u5b9a\u3057\u305f\u3044\u5834\u5408\u306f\u3001\u6b21\u306e\u3088\u3046\u306b\u3057\u307e\u3059\u3002\u30c6\u30b9\u30c8\u30e1\u30bd\u30c3\u30c9\u306b\u306f\u8907\u6570\u306e@Mocked\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u6307\u5b9a\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u3001\u305d\u308c\u305e\u308c\u306e\u30e2\u30c3\u30af\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u306b\u5bfe\u3057\u3066\u7570\u306a\u308b\u52d5\u4f5c\u3092\u8a2d\u5b9a\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\nFooTest_3.java\npackage sample;\n\nimport static org.hamcrest.CoreMatchers.*;\nimport static org.junit.Assert.*;\n\nimport org.junit.Test;\n\nimport mockit.Expectations;\nimport mockit.Mocked;\n\npublic class FooTest_3 {\n\n    @Test\n    public void testGetString(@Mocked final Foo foo1, @Mocked final Foo foo2) {\n        // Record\n        new Expectations() {{\n            foo1.getString(); result = \"Mock1\";\n            foo2.getString(); result = \"Mock2\";\n        }};\n\n        // Replay\n        String actual1 = foo1.getString();\n        String actual2 = foo2.getString();\n\n        // Verify\n        assertThat(actual1, is(\"Mock1\"));\n        assertThat(actual2, is(\"Mock2\"));\n    }\n\n}\n\n\n\n\n\n@Injectable\n\n\n\n@Injectable\u306b\u3064\u3044\u3066\n\u3000@Injectable\u3092\u6307\u5b9a\u3059\u308b\u3068\u3001\u6307\u5b9a\u3057\u305f\u30af\u30e9\u30b9\u306e\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u304c\u547c\u3070\u308c\u30d5\u30a3\u30fc\u30eb\u30c9\u306b\u633f\u5165\u3055\u308c\u307e\u3059\u3002\n\u3000@Injectable\u3092\u6307\u5b9a\u3057\u3066\u751f\u6210\u3057\u305f\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u306f\u57fa\u672c\u7684\u306b\u306f\u5b9f\u4f53\u3067\u3059\u3002\u52d5\u4f5c\u3092\u5909\u66f4\u3057\u305f\u3044\u30e1\u30bd\u30c3\u30c9\u3084\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u306b\u5bfe\u3057\u3066new Expectations() {...}\u3092\u4f7f\u3063\u3066\u8a2d\u5b9a\u3057\u3066\u3042\u3052\u307e\u3059\u3002\n\u3000@Injectable\u3068Expectations()\u306e\u7d44\u307f\u5408\u308f\u305b\u306f\u3001Mockito\u306eSpy\u3068\u4f3c\u305f\u52d5\u4f5c\u306b\u306a\u308a\u307e\u3059\u3002\n\u3000\n\n@Mocked\u3068@Injectable\u306e\u9055\u3044\n\u3000@Mocked\u3092\u6307\u5b9a\u3059\u308b\u3068\u3001\u305d\u306e\u30af\u30e9\u30b9\u306e\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u3084\u30e1\u30bd\u30c3\u30c9\u306f\u4e2d\u8eab\u304c\u7a7a\u306e\u30e2\u30c3\u30af\u306b\u306a\u3063\u3066\u3057\u307e\u3044\u307e\u3059\u3002\u4e00\u65b9\u3001@Injectable\u3092\u6307\u5b9a\u3059\u308b\u3068\u3001\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u3084\u30e1\u30bd\u30c3\u30c9\u306f\u5b9f\u4f53\u304c\u3068\u3082\u306a\u3063\u305f\u3082\u306e\u306b\u306a\u308a\u307e\u3059\u3002\n\u3000\n\n\u30b5\u30f3\u30d7\u30eb\u30d7\u30ed\u30b0\u30e9\u30e0\n\u3000\u4ee5\u4e0b\u3001@Mocked\u3092\u6307\u5b9a\u3059\u308b\u3068\u4e2d\u8eab\u304c\u7a7a\u306e\u30e2\u30c3\u30af\u304c\u751f\u6210\u3055\u308c\u3001@Injected\u3092\u6307\u5b9a\u3059\u308b\u3068\u5b9f\u4f53\u3092\u4f34\u3063\u305f\u30e2\u30c3\u30af\u304c\u751f\u6210\u3055\u308c\u308b\u69d8\u5b50\u3092\u30b3\u30fc\u30c9\u3067\u78ba\u304b\u3081\u3066\u307f\u307e\u3059\u3002\n\u30d7\u30ed\u30c0\u30af\u30b7\u30e7\u30f3\u30b3\u30fc\u30c9 \n\nMan.java\npackage sample;\n\nclass Man {\n    String name;\n    int age;\n\n    Man() {\n        name = \"Taro\";\n        age = 23;\n    }\n\n    Man(String p_name, int p_age) {\n        name = p_name;\n        age = p_age;\n    }\n\n    String getName() {\n        return name;\n    }\n\n    int getAge() {\n        return age;\n    }\n}\n\n\n\u30c6\u30b9\u30c8\u30b3\u30fc\u30c9\n\nManTest.java\npackage sample;\n\nimport static org.hamcrest.CoreMatchers.*;\nimport static org.junit.Assert.*;\n\nimport org.junit.Test;\n\nimport mockit.Expectations;\nimport mockit.Injectable;\nimport mockit.Mocked;\n\npublic class ManTest {\n\n    /**\n     * \u5f15\u6570\u306a\u3057\u306e\u30ea\u30a2\u30eb\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\n     */\n    @Test\n    public void testMan_Real() {\n        // Arrange\n\n        // Act\n        Man man = new Man();\n\n        // Assert\n        assertThat(man.getName(), is(\"Taro\"));\n        assertThat(man.getAge(), is(23));\n    }\n\n    /**\n     * \u691c\u8a3c\uff11 @Mocked\u3067\u30e2\u30c3\u30af\u5316\n     * \u203b \u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u306f\u30e2\u30c3\u30af\u5316\u3055\u308c\u308b\n     */\n    @Test\n    public void testMan_Mocked_NoSet1(@Mocked final Man anyMan) {\n        // Record\n\n        // Replay\n        Man actMan = new Man();\n\n        // Verify\n        assertThat(actMan.name, nullValue());\n        assertThat(actMan.age, is(0));\n    }\n\n    /**\n     * \u691c\u8a3c\uff12 @Mocked\u3067\u30e2\u30c3\u30af\u5316\n     * \u203b \u30e1\u30bd\u30c3\u30c9\u306f\u30e2\u30c3\u30af\u5316\u3055\u308c\u308b\n     */\n    @Test\n    public void testMan_Mocked_NoSet2(@Mocked final Man anyMan) {\n        // Record\n\n        // Replay\n        Man actMan = new Man();\n        actMan.name = \"Jiro\";\n        actMan.age = 18;\n\n        // Verify\n        assertThat(actMan.getName(), nullValue());\n        assertThat(actMan.getAge(), is(0));\n    }\n\n    /**\n     * \u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u3092@Mocked\u3067\u30e2\u30c3\u30af\u5316\n     * \u203b \u5404\u30e1\u30bd\u30c3\u30c9\u306e\u52d5\u4f5c\u3092\u8a2d\u5b9a\u3059\u308b\u5fc5\u8981\u304c\u3042\u308b\n     */\n    @Test\n    public void testMan_Mocked_Set(@Mocked final Man anyMan) {\n        // Record\n        new Expectations() {{\n            Man mock = new Man();\n            mock.getName(); result = \"Jiro\";\n            mock.getAge(); result = 18;\n        }};\n\n        // Replay\n        Man actMan = new Man();\n\n        // Verify\n        assertThat(actMan.getName(), is(\"Jiro\"));\n        assertThat(actMan.getAge(), is(18));\n    }\n\n    /**\n     * \u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u3092@Injectable\u3067\u90e8\u5206\u30e2\u30c3\u30af\u5316\n     * \u203b \u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u306f\u5b9f\u4f53\u304c\u547c\u3073\u51fa\u3055\u308c\u308b\n     */\n    @Test\n    public void testMan_Injected(@Injectable final Man anyMan) {\n        // Record\n\n        // Replay\n        Man actMan = new Man();\n\n        // Verify\n        assertThat(actMan.getName(), is(\"Taro\"));\n        assertThat(actMan.getAge(), is(23));\n    }\n\n    /**\n     * \u5f15\u6570\u3042\u308a\u306e\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u3092\u90e8\u5206\u30e2\u30c3\u30af\u5316\u3059\u308b\n     * \u203b Expectations\u3067\u52d5\u4f5c\u3092\u8a2d\u5b9a\u3057\u305f\u90e8\u5206\u3060\u3051\u304c\u30e2\u30c3\u30af\u5316\u3055\u308c\u308b\n     */\n    @Test\n    public void testManStringInt(@Injectable final Man spyMan) {\n        // Record\n        new Expectations() {{\n            spyMan.getAge(); returns(15, 10);\n        }};\n\n        // Replay\n        Man actMan = new Man(\"Jiro\", 18);\n\n        // Verify\n        assertThat(actMan.getName(), is(\"Jiro\"));\n        assertThat(actMan.getAge(), is(18));\n        assertThat(spyMan.getAge(), is(15));\n        assertThat(spyMan.getAge(), is(10));\n    }\n\n}\n\n\n\n\n\n@Mock\n\n\n\ninterface\u306e\u4e00\u90e8\u306e\u30e1\u30bd\u30c3\u30c9\u3060\u3051\u5b9f\u4f53\u5316\n\u591a\u6570\u306e\u30e1\u30bd\u30c3\u30c9\u3092\u3082\u3064interface\u306e\u4e00\u90e8\u306e\u30e1\u30bd\u30c3\u30c9\u3060\u3051\u5b9f\u4f53\u5316\u3057\u305f\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u5229\u7528\u3057\u305f\u3044\u5834\u5408\u306f\u3001new MockUp<T>(){...}\u304c\u4fbf\u5229\u3067\u3059\u3002MockUp\u306e\u5185\u90e8\u3067\u306f\u3001\u5b9f\u4f53\u5316\u3057\u305f\u3044\u30e1\u30bd\u30c3\u30c9\u306b\u5bfe\u3057\u3066@Mock\u30a2\u30ce\u30c6\u30fc\u30b7\u30e7\u30f3\u3092\u6307\u5b9a\u3057\u307e\u3059\u3002 \n\n\u30d7\u30ed\u30c0\u30af\u30b7\u30e7\u30f3\u30b3\u30fc\u30c9\n\nBoo.java\npackage sample;\n\ninterface Boo {\n    /**\n     * \u30c6\u30b9\u30c8\u5bfe\u8c61\u306e\u30e1\u30bd\u30c3\u30c9\n     *\n     * @return private\u30e1\u30bd\u30c3\u30c9\u304c\u5fdc\u7b54\u3057\u305f\u6587\u5b57\u5217\u3092\u5fdc\u7b54\u3059\u308b\n     */\n    String methodToTest();\n\n    /**\n     * \u30c6\u30b9\u30c8\u5bfe\u8c61\u5916\u306e\u30e1\u30bd\u30c3\u30c9\uff11\n     */\n    String mothodToNotTest1();\n\n    /**\n     * \u30c6\u30b9\u30c8\u5bfe\u8c61\u5916\u306e\u30e1\u30bd\u30c3\u30c9\uff12\n     */\n    String mothodToNotTest2();\n\n    /**\n     * \u30c6\u30b9\u30c8\u5bfe\u8c61\u5916\u306e\u30e1\u30bd\u30c3\u30c9\uff13\n     */\n    String mothodToNotTest3();\n}\n\n\n\u30c6\u30b9\u30c8\u30b3\u30fc\u30c9\n\nBooTest.java\npackage sample;\n\nimport static org.hamcrest.CoreMatchers.*;\nimport static org.junit.Assert.*;\n\nimport org.junit.Test;\n\nimport mockit.Mock;\nimport mockit.MockUp;\n\npublic class BooTest {\n\n    @Test\n    public void testMethodToTest_MockUp() {\n        // Record\n        Boo boo = new MockUp<Boo>() {\n            @Mock public String methodToTest() {\n                return \"Hoge\";\n            }\n        }.getMockInstance();\n\n        // Replay\n        String act = boo.methodToTest();\n\n        // Verify\n        assertThat(act, is(\"Hoge\"));\n    }\n\n}\n\n\n\n@Capturing\n\n\u25a0 \u57fa\u672c\u7de8\n\u3000\u5b9f\u88c5\u30af\u30e9\u30b9\u3092\u7279\u5b9a\u3057\u306a\u3044\u3067\u57fa\u5e95\u30af\u30e9\u30b9\u306e\u30e2\u30c3\u30af\u3092\u4f5c\u308a\u305f\u3044\u5834\u5408\u306f@Capturing\u30a2\u30ce\u30c6\u30fc\u30b7\u30e7\u30f3\u3092\u4f7f\u3044\u307e\u3059\u3002\u7570\u306a\u308b\u5b9f\u88c5\u30af\u30e9\u30b9\u306e\u540c\u4e00\u540d\u306e\u30e1\u30bd\u30c3\u30c9\u306b\u5bfe\u3057\u3066\u3001\u307e\u3068\u3081\u3066\u30e2\u30c3\u30af\u306e\u52d5\u4f5c\u3092\u8a2d\u5b9a\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\u30af\u30e9\u30b9\u56f3\n\u3000\n\u30d7\u30ed\u30c0\u30af\u30b7\u30e7\u30f3\u30b3\u30fc\u30c9\n\nService.java\npackage sample;\n\ninterface Service {\n    int doSomething();\n}\n\n\n\nServiceImpl.java\npackage sample;\n\nclass ServiceImpl implements sample.Service {\n    @Override\n    public int doSomething() {\n        return 1;\n    }\n}\n\n\n\nBusiness.java\npackage sample;\n\nclass Business {\n    private final Service service1 = new ServiceImpl();\n    private final Service service2 = new Service() {\n        public int doSomething() {\n            return 2;\n        }\n    };\n\n    int businessOperation() {\n        return service1.doSomething() + service2.doSomething();\n    }\n}\n\n\n\u30c6\u30b9\u30c8\u30b3\u30fc\u30c9\n\nBusinessTest.java\npackage sample;\n\nimport static org.junit.Assert.*;\nimport org.junit.Test;\nimport mockit.Capturing;\nimport mockit.Expectations;\n\npublic class BusinessTest {\n    @Capturing Service anyService;\n\n    @Test\n    public void mockingImplementationClassesFromAGivenBaseType() {\n        new Expectations() {{\n                anyService.doSomething();\n                returns(3, 4);\n            }};\n\n        int result = new Business().businessOperation();\n\n        assertEquals(7, result);\n    }\n}\n\n\n\u30c6\u30b9\u30c8\u3092\u5b9f\u884c\u3059\u308b\u3068\u3001ServiceImpl\u306edoSomething()\u304c3\u3092\u5fdc\u7b54\u3057\u3001Service\u306edoSomething()\u304c4\u3092\u5fdc\u7b54\u3057\u3001businessOperation()\u306e\u5fdc\u7b54\u304c7\u306b\u306a\u308a\u307e\u3059\u3002\n\u25a0 \u5fdc\u7528\u7de8\n\u3000@Capturing\u306bmaxInstances\u3092\u6307\u5b9a\u3059\u308b\u3053\u3068\u3067\u3001\u3053\u308c\u304b\u3089\u4f5c\u6210\u3055\u308c\u308b\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u306b\u5bfe\u3059\u308b\u52d5\u4f5c\u3092maxInstances\u500b\u76ee\u3092\u5883\u306b\u5909\u66f4\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\u3000java.nio.Buffer\u3092\u4f7f\u3063\u305f\u30b5\u30f3\u30d7\u30eb\u3067\u3059\u3002\n\nDifferentBehaviorTest.java\npackage sample;\n\nimport static org.junit.Assert.*;\n\nimport java.nio.Buffer;\nimport java.nio.ByteBuffer;\nimport java.nio.CharBuffer;\nimport java.nio.IntBuffer;\n\nimport org.junit.Test;\n\nimport mockit.Capturing;\nimport mockit.Expectations;\n\npublic class DifferentBehaviorTest {\n    @Test\n    public void differentBehaviorTest(\n            @Capturing(maxInstances = 1) final Buffer firstNewBuffer,\n            @Capturing final Buffer remainingNewBuffers) {\n\n        // Record\n        new Expectations() {{\n                firstNewBuffer.position(); result = 10;\n                remainingNewBuffers.position(); result = 20;\n            }};\n\n        // Replay\n        ByteBuffer buffer1 = ByteBuffer.allocate(100);\n        IntBuffer buffer2 = IntBuffer.wrap(new int[] { 1, 2, 3 });\n        CharBuffer buffer3 = CharBuffer.wrap(\"                \");\n\n        // Verify\n        assertEquals(10, buffer1.position());\n        assertEquals(20, buffer2.position());\n        assertEquals(20, buffer3.position());\n    }\n}\n\n\n\u3000maxInstances = 1\u3092\u6307\u5b9a\u3057\u305f\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9firstNewBuffer\u306e\u5fdc\u7b54\u306f\u300c10\u300d\u3002\u305d\u308c\u4ee5\u964d\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u306f\u300c20\u300d\u3092\u5fdc\u7b54\u3059\u308b\u3088\u3046\u306bExpectations\u3067\u6307\u5b9a\u3057\u3066\u3044\u307e\u3059\u3002\n\u3000\u3088\u3063\u3066\u3001\u6700\u521d\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3001ByteBuffer buffer1 = ByteBuffer.allocate(100);\u306eposition()\u306f\u300c10\u300d\u3092\u5fdc\u7b54\u3057\u3001\uff12\u500b\u76ee\u4ee5\u964d\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3001IntBuffer buffer2 = IntBuffer.wrap(new int[] { 1, 2, 3 });\u3068CharBuffer buffer3 = CharBuffer.wrap(\"                \");\u306eposition()\u306f\u300c20\u300d\u3092\u5fdc\u7b54\u3057\u307e\u3059\u3002\n\u25a0 \u5099\u8003\n\u3000@Mocked\u30a2\u30ce\u30c6\u30fc\u30b7\u30e7\u30f3\u306e\u6307\u5b9a\u304c\u540c\u4e00\u30b9\u30b3\u30fc\u30d7\u306b\u3042\u308b\u3068\u3001@Mocked\u30a2\u30ce\u30c6\u30fc\u30b7\u30e7\u30f3\u306e\u6307\u5b9a\u304c\u512a\u5148\u3055\u308c\u3001\u3059\u3079\u3066\u306e\u5b9f\u88c5\u30af\u30e9\u30b9\u306f\u30e2\u30c3\u30af\u5316\u3055\u308c\u307e\u3059\u3002maxInstances\u306e\u6307\u5b9a\u306f\u8003\u616e\u3055\u308c\u307e\u305b\u3093\u3002\n\n@Tested\n\n\u3000@Tested\u30a2\u30ce\u30c6\u30fc\u30b7\u30e7\u30f3\u3068@Injectable\u30a2\u30ce\u30c6\u30fc\u30b7\u30e7\u30f3\u3092\u7d44\u307f\u5408\u308f\u305b\u3066\u4f7f\u3046\u3068\u3001\u30c6\u30b9\u30c8\u958b\u59cb\u6642\u306b@Tested\u30a2\u30ce\u30c6\u30fc\u30b7\u30e7\u30f3\u3067\u6307\u5b9a\u3057\u305f\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u304c\u751f\u6210\u3055\u308c\u3001\u305d\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u306b@Injectable\u30a2\u30ce\u30c6\u30fc\u30b7\u30e7\u30f3\u3067\u6307\u5b9a\u3057\u305f\u30e2\u30c3\u30af\u304c\u5dee\u3057\u8fbc\u307e\u308c\u307e\u3059\u3002\n\nTestedSample.java\npublic class SomeTest\n{\n   @Tested CodeUnderTest tested;\n   @Injectable Dependency dep1;\n   @Injectable AnotherDependency dep2;\n   @Injectable int someIntegralProperty = 123;\n\n   @Test\n   public void someTestMethod(@Injectable(\"true\") boolean flag, @Injectable(\"Mary\") String name)\n   {\n      // Record expectations on mocked types, if needed.\n\n      tested.exerciseCodeUnderTest();\n\n      // Verify expectations on mocked types, if required.\n   }\n}\n\n\n\u3053\u306e\u4f8b\u3067\u306f\u3001\u30c6\u30b9\u30c8\u5bfe\u8c61\u30af\u30e9\u30b9CodeUnderTest\u306e\u5404\u30d5\u30a3\u30fc\u30eb\u30c9\u306b\u5bfe\u3057\u3066\u3001\u305d\u306e\u30d5\u30a3\u30fc\u30eb\u30c9\u306e\u578b\u306b\u5fdc\u3058\u3066\u4ee5\u4e0b\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u304c\u5dee\u3057\u8fbc\u307e\u308c\u307e\u3059\u3002\n\u305f\u3060\u3057\u3001CodeUnderTest\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u4f5c\u6210\u3059\u308b\u904e\u7a0b\u3067\u30d5\u30a3\u30fc\u30eb\u30c9\u306b\u306a\u3093\u3089\u304b\u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u304c\u30bb\u30c3\u30c8\u3055\u308c\u305f\u5834\u5408\u306f\u3001\u30e2\u30c3\u30af\u306f\u5dee\u3057\u8fbc\u307e\u308c\u307e\u305b\u3093\u3002\n\n\n\n\u578b\n\u30e2\u30c3\u30af\n\u5099\u8003\n\n\n\n\nDependency\nnew Dependency()\nnull\u3067\u306f\u306a\u3044\u5834\u5408\u306e\u307fnew\u3057\u3066\u30a4\u30f3\u30b8\u30a7\u30af\u30b7\u30e7\u30f3\n\n\nAnotherDependency\nnew AnotherDependency()\nnull\u3067\u306f\u306a\u3044\u5834\u5408\u306e\u307fnew\u3057\u3066\u30a4\u30f3\u30b8\u30a7\u30af\u30b7\u30e7\u30f3\n\n\nint\n123\n\n\n\nboolean\ntrue\n\n\n\nString\n\"Mary\"\nnull\u3067\u306f\u306a\u3044\u5834\u5408\u306e\u307f\"Mary\"\u3092\u30a4\u30f3\u30b8\u30a7\u30af\u30b7\u30e7\u30f3\n\n\n\nList\u3084Collection\u306b\u5bfe\u3057\u3066\u3082\u30a4\u30f3\u30b8\u30a7\u30af\u30b7\u30e7\u30f3\u304c\u53ef\u80fd\u3067\u3059\u3002\nTargetClass\u306enames\u3084collaborators\u306b\u30a4\u30f3\u30b8\u30a7\u30af\u30b7\u30e7\u30f3\u3057\u3066\u307f\u307e\u3059\u3002\n\nDITest.java\npackage sample;\n\nimport static org.hamcrest.CoreMatchers.*;\nimport static org.junit.Assert.*;\n\nimport java.util.Arrays;\nimport java.util.Collection;\nimport java.util.List;\n\nimport org.junit.Test;\n\nimport mockit.Injectable;\nimport mockit.Tested;\n\npublic final class DITest {\n\n    static class Collaborator {\n        final int value;\n\n        Collaborator() {\n            value = 0;\n        }\n\n        Collaborator(int value) {\n            this.value = value;\n        }\n    }\n\n    static final class TargetClass {\n        final List<String> names;\n        Collection<Collaborator> collaborators;\n\n        TargetClass(List<String> names) {\n            this.names = names;\n        }\n    }\n\n    @Tested\n    TargetClass target;\n    @Injectable\n    final List<String> nameList = Arrays.asList(\"One\", \"Two\");\n    @Injectable\n    final Collection<Collaborator> collaboratorList = Arrays.asList(new Collaborator(1), new Collaborator(2));\n\n    @Test\n    public void testMethod() {\n        // Record\n\n        // Replay\n\n        // Verify\n        assertThat(nameList, is(target.names));\n        assertThat(collaboratorList, is(target.collaborators));\n    }\n\n}\n\n\n\nDeencapsulation\nDeencapsulation\u30af\u30e9\u30b9\u306f\u3001\u30a2\u30af\u30bb\u30b9\u6a29\u306e\u306a\u3044\u30d5\u30a3\u30fc\u30eb\u30c9\u3001\u30e1\u30bd\u30c3\u30c9\u3001\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u306b\u30a2\u30af\u30bb\u30b9\u3059\u308b\u305f\u3081\u306e\u30e6\u30fc\u30c6\u30a3\u30ea\u30c6\u30a3\u30af\u30e9\u30b9\u3067\u3059\u3002\n\n\nstatic <T> T getField(Class<?> classWithStaticField, Class<T> fieldType)\n\u30af\u30e9\u30b9\u306e\u578b\u3068\u30d5\u30a3\u30fc\u30eb\u30c9\u306e\u578b\u3092\u6307\u5b9a\u3057\u3066\u3001\u30a2\u30af\u30bb\u30b9\u6a29\u306e\u306a\u3044static\u30d5\u30a3\u30fc\u30eb\u30c9\u306e\u5024\u3092\u53d6\u5f97\u3057\u307e\u3059\u3002\n\u5f15\u6570\u306b\u6307\u5b9a\u3057\u305f\u30d5\u30a3\u30fc\u30eb\u30c9\u306e\u578b\u306f\u3001\u5f15\u6570\u306b\u6307\u5b9a\u3057\u305f\u30af\u30e9\u30b9\u306b\uff11\u3064\u3057\u304b\u306a\u3044\u60f3\u5b9a\u3067\u3059\u3002\n\nstatic <T> T getField(Class<?> classWithStaticField, String fieldName)\n\u30af\u30e9\u30b9\u306e\u578b\u3068\u30d5\u30a3\u30fc\u30eb\u30c9\u540d\u3092\u6307\u5b9a\u3057\u3066\u3001\u30a2\u30af\u30bb\u30b9\u6a29\u306e\u306a\u3044static\u30d5\u30a3\u30fc\u30eb\u30c9\u306e\u5024\u3092\u53d6\u5f97\u3057\u307e\u3059\u3002\n\nstatic <T> T getField(Object objectWithField, Class<T> fieldType)\n\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3068\u30d5\u30a3\u30fc\u30eb\u30c9\u306e\u578b\u3092\u6307\u5b9a\u3057\u3066\u3001\u30a2\u30af\u30bb\u30b9\u6a29\u306e\u306a\u3044\u30d5\u30a3\u30fc\u30eb\u30c9\u306e\u5024\u3092\u53d6\u5f97\u3057\u307e\u3059\u3002\n\u5f15\u6570\u306b\u6307\u5b9a\u3057\u305f\u30d5\u30a3\u30fc\u30eb\u30c9\u306e\u578b\u306f\u3001\u5f15\u6570\u306b\u6307\u5b9a\u3057\u305f\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u578b\u306b\uff11\u3064\u3057\u304b\u306a\u3044\u60f3\u5b9a\u3067\u3059\u3002\n\nstatic <T> T getField(Object objectWithField, String fieldName)\n\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3068\u30d5\u30a3\u30fc\u30eb\u30c9\u540d\u3092\u6307\u5b9a\u3057\u3066\u3001\u30a2\u30af\u30bb\u30b9\u6a29\u306e\u306a\u3044\u30d5\u30a3\u30fc\u30eb\u30c9\u306e\u5024\u3092\u53d6\u5f97\u3057\u307e\u3059\u3002\n\n\nstatic <T> T invoke(Class<?> classWithStaticMethod, String methodName, Class<?>[] parameterTypes, Object... methodArgs)\n\u30a2\u30af\u30bb\u30b9\u6a29\u306e\u306a\u3044static\u30e1\u30bd\u30c3\u30c9\u3092\u547c\u3073\u51fa\u3057\u307e\u3059\u3002\u30e1\u30bd\u30c3\u30c9\u5f15\u6570\u306e\u578b\u3092\u6307\u5b9a\u3057\u307e\u3059\u3002\n\nstatic <T> T invoke(Class<?> classWithStaticMethod, String methodName, Object... nonNullArgs)\n\u30a2\u30af\u30bb\u30b9\u6a29\u306e\u306a\u3044static\u30e1\u30bd\u30c3\u30c9\u3092\u547c\u3073\u51fa\u3057\u307e\u3059\u3002\n\nstatic <T> T invoke(Object objectWithMethod, String methodName, Class<?>[] parameterTypes, Object... methodArgs)\n\u30a2\u30af\u30bb\u30b9\u6a29\u306e\u306a\u3044\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u30e1\u30bd\u30c3\u30c9\u3092\u547c\u3073\u51fa\u3057\u307e\u3059\u3002\u30e1\u30bd\u30c3\u30c9\u5f15\u6570\u306e\u578b\u3092\u6307\u5b9a\u3057\u307e\u3059\u3002\n\nstatic <T> T invoke(Object objectWithMethod, String methodName, Object... nonNullArgs)\n\u30a2\u30af\u30bb\u30b9\u6a29\u306e\u306a\u3044\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u30e1\u30bd\u30c3\u30c9\u3092\u547c\u3073\u51fa\u3057\u307e\u3059\u3002\n\nstatic <T> T newInnerInstance(Class<? extends T> innerClassToInstantiate, Object outerClassInstance, Object... nonNullArgs)\n\u30a4\u30f3\u30ca\u30fc\u30af\u30e9\u30b9\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u751f\u6210\u3057\u307e\u3059\u3002\u30a4\u30f3\u30ca\u30fc\u30af\u30e9\u30b9\u306e\u578b\u306f\u30af\u30e9\u30b9\u3067\u6307\u5b9a\u3057\u307e\u3059\u3002\n\nstatic <T> T newInnerInstance(String innerClassSimpleName, Object outerClassInstance, Object... nonNullArgs)\n\u30a4\u30f3\u30ca\u30fc\u30af\u30e9\u30b9\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u751f\u6210\u3057\u307e\u3059\u3002\u30a4\u30f3\u30ca\u30fc\u30af\u30e9\u30b9\u306e\u578b\u306f\u6587\u5b57\u5217\u3067\u6307\u5b9a\u3057\u307e\u3059\u3002\n\nstatic <T> T newInstance(Class<? extends T> classToInstantiate, Class<?>[] parameterTypes, Object... initArgs)\n\u30af\u30e9\u30b9\u3092\u6307\u5b9a\u3057\u3001\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u3092\u547c\u3093\u3067\u30af\u30e9\u30b9\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u751f\u6210\u3057\u307e\u3059\u3002\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u306e\u5f15\u6570\u306e\u578b\u3092\u6307\u5b9a\u3057\u307e\u3059\u3002\n\nstatic <T> T newInstance(Class<? extends T> classToInstantiate, Object... nonNullArgs)\n\u30af\u30e9\u30b9\u3092\u6307\u5b9a\u3057\u3001\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u3092\u547c\u3093\u3067\u30af\u30e9\u30b9\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u751f\u6210\u3057\u307e\u3059\u3002\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u306e\u5f15\u6570\u306e\u578b\u306fnonNullArgs\u304b\u3089\u63a8\u5b9a\u3057\u307e\u3059\u3002\n\nstatic <T> T newInstance(String className, Class<?>[] parameterTypes, Object... initArgs)\n\u30a2\u30af\u30bb\u30b9\u6a29\u306e\u306a\u3044\u30af\u30e9\u30b9\u306e\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u3092\u547c\u3093\u3067\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u751f\u6210\u3057\u307e\u3059\u3002\u30af\u30e9\u30b9\u540d\u3092\u6587\u5b57\u5217\u3067\u6307\u5b9a\u3057\u307e\u3059\u3002\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u306e\u5f15\u6570\u306e\u578b\u3092\u6307\u5b9a\u3057\u307e\u3059\u3002\n\nstatic <T> T newInstance(String className, Object... nonNullArgs)\n\u30a2\u30af\u30bb\u30b9\u6a29\u306e\u306a\u3044\u30af\u30e9\u30b9\u306e\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u3092\u547c\u3093\u3067\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u751f\u6210\u3057\u307e\u3059\u3002\u30af\u30e9\u30b9\u540d\u3092\u6587\u5b57\u5217\u3067\u6307\u5b9a\u3057\u307e\u3059\u3002\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u306e\u5f15\u6570\u306e\u578b\u306fnonNullArgs\u304b\u3089\u63a8\u5b9a\u3057\u307e\u3059\u3002\n\npublic static  T newUninitializedInstance(Class<? extends T> classToInstantiate)\n\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u3092\u547c\u3070\u305a\u306b\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u751f\u6210\u3057\u307e\u3059\u3002abstract\u30af\u30e9\u30b9\u3084interface\u306e\u5834\u5408\u3001abstract\u30e1\u30bd\u30c3\u30c9\u306f\u7a7a\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u751f\u6210\u3057\u307e\u3059\u3002\n\npublic static void setField(Class<?> classWithStaticField, Object fieldValue)\n\u30a2\u30af\u30bb\u30b9\u6a29\u306e\u306a\u3044static\u30d5\u30a3\u30fc\u30eb\u30c9\u306b\u5024\u3092\u30bb\u30c3\u30c8\u3057\u307e\u3059\u3002fieldValue\u306e\u578b\u3067\u30bb\u30c3\u30c8\u3059\u308b\u30d5\u30a3\u30fc\u30eb\u30c9\u3092\u63a2\u3057\u307e\u3059\u3002\n\npublic static void setField(Class<?> classWithStaticField, String fieldName, Object fieldValue)\n\u30a2\u30af\u30bb\u30b9\u6a29\u306e\u306a\u3044static\u30d5\u30a3\u30fc\u30eb\u30c9\u306b\u5024\u3092\u30bb\u30c3\u30c8\u3057\u307e\u3059\u3002\n\npublic static void setField(Object objectWithField, Object fieldValue)\n\u30a2\u30af\u30bb\u30b9\u6a29\u306e\u306a\u3044\u30d5\u30a3\u30fc\u30eb\u30c9\u306b\u5024\u3092\u30bb\u30c3\u30c8\u3057\u307e\u3059\u3002fieldValue\u306e\u578b\u3067\u30bb\u30c3\u30c8\u3059\u308b\u30d5\u30a3\u30fc\u30eb\u30c9\u3092\u63a2\u3057\u307e\u3059\u3002\n\npublic static void setField(Object objectWithField, String fieldName, Object fieldValue)\n\u30a2\u30af\u30bb\u30b9\u6a29\u306e\u306a\u3044\u30d5\u30a3\u30fc\u30eb\u30c9\u306b\u5024\u3092\u30bb\u30c3\u30c8\u3057\u307e\u3059\u3002\n\nstatic\u30d5\u30a3\u30fc\u30eb\u30c9\u306bsetField\u3067\u5024\u3092\u30bb\u30c3\u30c8\u3067\u304d\u306a\u3044\u30b1\u30fc\u30b9\u304c\u5b58\u5728\u3057\u307e\u3059\u3002\n\u4f8b\u3048\u3070\u3001\u4ee5\u4e0b\u3067\u3059\u3002\n\nprivate static final int\nprivate static final String\npublic static final int\npublic static final String\n\n\u3053\u308c\u306f\u3001\u3053\u308c\u3089\u306estatic\u30d5\u30a3\u30fc\u30eb\u30c9\u306f\u3001\u30b3\u30f3\u30d1\u30a4\u30eb\u6642\u306b\u30d0\u30a4\u30c8\u30d5\u30a1\u30a4\u30eb\u306b\u5024\u304c\u5c55\u958b\u3055\u308c\u3066\u3057\u307e\u3044\u3001JMockit\u304c\u30af\u30e9\u30b9\u30ed\u30fc\u30c0\u30fc\u7d4c\u7531\u3067\u30d0\u30a4\u30c8\u30b3\u30fc\u30c9\u3092\u30ed\u30fc\u30c9\u3057\u305f\u6642\u70b9\u3067\u3001static\u30d5\u30a3\u30fc\u30eb\u30c9\u304c\u306a\u304f\u306a\u3063\u3066\u3057\u307e\u3063\u3066\u3044\u308b\u305f\u3081\u3067\u3059\u3002\n\nany\u5f15\u6570\n\n\n\u4efb\u610f\u306e\u5f15\u6570\u306b\u30de\u30c3\u30c1\u3055\u305b\u308b\n\u3000\u30c6\u30b9\u30c8\u30b3\u30fc\u30c9\u306enew Expectations() {{...}}; \u5185\u3067\u30e2\u30c3\u30af\u30e1\u30bd\u30c3\u30c9\u3092\u5b9a\u7fa9\u3059\u308b\u3055\u3044\u306b\u3001\u4efb\u610f\u306e\u5f15\u6570\u306b\u30de\u30c3\u30c1\u3055\u305b\u305f\u3044\u5834\u5408\u306f\u3001mockit.Invocations\u30af\u30e9\u30b9\u306eanyXXX\u3092\u6307\u5b9a\u3057\u307e\u3059\u3002\n\n\n\nanyXXX\nType\n\n\n\n\nanyBoolean\nBoolean\n\n\nanyByte\nByte\n\n\nanyChar\nChar\n\n\nanyDouble\nDouble\n\n\nanyFloat\nFloat\n\n\nanyInt\nInt\n\n\nanyShort\nShort\n\n\nanyString\nString\n\n\nany\nObject\n\n\n\n\u30b5\u30f3\u30d7\u30eb\n\nHogeTest.java\n// Record\nnew Expectations() {{\n    mock.getName(anyString); result = \"Hoge\"\n}};\n\n\ngetName()\u306e\u5f15\u6570\u306b\"A\"\u3092\u6307\u5b9a\u3057\u3066\u3082\u3001\"B\"\u3092\u6307\u5b9a\u3057\u3066\u3082\u3001getName()\u306f\"Hoge\"\u3092\u5fdc\u7b54\u3057\u307e\u3059\u3002\n\n\n\nstatic\u30e1\u30bd\u30c3\u30c9\n\nstatic\u30e1\u30bd\u30c3\u30c9\u306e\u30e2\u30c3\u30af\u5316\n\u3000@Mocked\u30a2\u30ce\u30c6\u30fc\u30b7\u30e7\u30f3\u3067\u30af\u30e9\u30b9\u540d\u3092\u6307\u5b9a\u3057\u3001\u305d\u306e\u30af\u30e9\u30b9\u306e\u30e1\u30bd\u30c3\u30c9\u306b\u5bfe\u3057\u3066\u3001Expectations()\u5185\u3067\u30af\u30e9\u30b9\u540d.\u30e1\u30bd\u30c3\u30c9\u540d(); result = XXX;\u3092\u30bb\u30c3\u30c8\u3059\u308b\u3068\u3001static\u30e1\u30bd\u30c3\u30c9\u3092\u30e2\u30c3\u30af\u5316\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\u3000\n\u30b5\u30f3\u30d7\u30eb\u30d7\u30ed\u30b0\u30e9\u30e0\n\u30d7\u30ed\u30c0\u30af\u30b7\u30e7\u30f3\u30b3\u30fc\u30c9\n\n\nBar.java\npackage sample;\n\nclass Bar {\n    /**\n     * static\u30e1\u30bd\u30c3\u30c9\n     */\n    static String getName(String p_name) {\n        return null;\n    }\n}\n\n\n\u30c6\u30b9\u30c8\u30b3\u30fc\u30c9\n\nBarTest.java\npackage sample;\n\nimport static org.hamcrest.CoreMatchers.*;\nimport static org.junit.Assert.*;\n\nimport org.junit.Test;\n\nimport mockit.Expectations;\nimport mockit.Mocked;\n\npublic class BarTest {\n\n    /**\n     * static\u30e1\u30bd\u30c3\u30c9\u3092\u30e2\u30c3\u30af\u5316\u3059\u308b\n     */\n    @Test\n    public void testGetName(@Mocked final Bar mock) {\n        // Record\n        new Expectations() {{\n            Bar.getName(\"Taro\"); result = \"Taro\";\n            Bar.getName(\"Jiro\"); result = \"Jiro\";\n            Bar.getName(anyString); result = \"None\";\n        }};\n\n        // Replay\n        String act1 = Bar.getName(\"Taro\");\n        String act2 = Bar.getName(\"Jiro\");\n        String act3 = Bar.getName(\"Hanako\");\n\n        // Verify\n        assertThat(act1, is(\"Taro\"));\n        assertThat(act2, is(\"Jiro\"));\n        assertThat(act3, is(\"None\"));\n    }\n\n}\n\n\n\nprivate\u30e1\u30bd\u30c3\u30c9\n\u25cf private\u30e1\u30bd\u30c3\u30c9\u306e\u30e2\u30c3\u30af\u5316\u304c\u3046\u307e\u304f\u3044\u304b\u306a\u3044\n\u3000\u6700\u8fd1\u306eJMockit\uff08version 1.27\u3067\u691c\u8a3c\uff09\u306fprivate\u30e1\u30bd\u30c3\u30c9\u3092\u30e2\u30c3\u30af\u5316\u3059\u308b\u65b9\u6cd5\u304c\u4e0d\u660e\u3067\u3059\u3002\n\u3000\u4f8b\u3048\u3070\u3001StackOverflow\uff08\u30ea\u30f3\u30af\uff09\u306e\u56de\u7b54\u3092\u5b9f\u884c\u3057\u3066\u307f\u307e\u3059\u3002\n\nTestAClass.java\nimport org.junit.Test;\nimport static mockit.Deencapsulation.*;\nimport mockit.*;\n\npublic class TestAClass\n{\n    public static class ClassToTest \n    {\n        public void methodToTest()\n        {\n            boolean returnValue = methodToMock(0);\n            System.out.println(\"methodToMock returned \" + returnValue);\n        }\n\n        private boolean methodToMock(int value) { return true; }\n    }\n\n    @Tested ClassToTest classToTestInstance;\n\n    @Test\n    public void partiallyMockTestedClass() {\n        new Expectations(classToTestInstance) {{\n            invoke(classToTestInstance, \"methodToMock\", anyInt);\n            result = false;\n            times = 2;\n        }};\n\n        classToTestInstance.methodToTest();\n        classToTestInstance.methodToTest();\n        classToTestInstance.methodToTest();\n    }\n}\n\n\n\u7d50\u679c\u306f\u3001IllegalArgumentException\u3002\njava.lang.IllegalArgumentException: Invalid invocation from expectation block\n    at sample.TestAClass$1.<init>(TestAClass.java:28)\n    at sample.TestAClass.partiallyMockTestedClass(TestAClass.java:27)\n    at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n    at java.lang.reflect.Method.invoke(Method.java:498)\n    at org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReference.java:86)\n    at org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38)\n    at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:459)\n    at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:678)\n    at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:382)\n    at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:192)\n\n\u6b21\u7ae0\u300e\u5ec3\u6b62\u3055\u308c\u305f\u6a5f\u80fd\u300f\u306b\u3082\u8a18\u8f09\u3057\u307e\u3057\u305f\u304c\u3001Expectations\u30af\u30e9\u30b9\u5185\u3067private\u30e1\u30bd\u30c3\u30c9\u3092\u30e2\u30c3\u30af\u5316\u3059\u308b\u6a5f\u80fd\u306f\u5ec3\u6b62\u3055\u308c\u307e\u3057\u305f\u3002\n\u307e\u3042\u3001\u3053\u306e\u56de\u7b54\u306f\u3001\u5b9f\u884c\u3067\u304d\u305f\u3068\u3057\u3066\u3082\u3001\u4ee5\u4e0b\u306e\u90e8\u5206\u306e\u8abf\u6574\u304c\u3082\u3046\u5c11\u3057\u5fc5\u8981\u3067\u3059\u3002\n\n\u30d7\u30ed\u30c0\u30af\u30b7\u30e7\u30f3\u30b3\u30fc\u30c9\u3068\u30c6\u30b9\u30c8\u30b3\u30fc\u30c9\u304c\u4e00\u4f53\u306b\u306a\u3063\u3066\u3044\u308b\nstatic\u30af\u30e9\u30b9\u306e\u30e1\u30bd\u30c3\u30c9\u3092\u30e2\u30c3\u30af\u5316\u3057\u3066\u3044\u308b\n\n\u25cf private\u30e1\u30bd\u30c3\u30c9\u3092\u547c\u3073\u51fa\u3059\u30e9\u30c3\u30d1\u30fc\u30e1\u30bd\u30c3\u30c9\n\u30e2\u30c3\u30af\u3068\u306f\u95a2\u4fc2\u3042\u308a\u307e\u305b\u3093\u304c\u3001\u95a2\u9023\u9805\u76ee\u3068\u3057\u3066JMockit\u306b\u306fprivate\u30e1\u30bd\u30c3\u30c9\u3092\u547c\u3073\u51fa\u3059\u30e9\u30c3\u30d1\u30fc\u30e1\u30bd\u30c3\u30c9\u304c\u7528\u610f\u3055\u308c\u3066\u3044\u307e\u3059\u3002\n\u3053\u306e\u30e9\u30c3\u30d1\u30fc\u30e1\u30bd\u30c3\u30c9\u3092\u4f7f\u3063\u3066private\u30e1\u30bd\u30c3\u30c9\u306e\u30c6\u30b9\u30c8\u306f\u4e0b\u8a18\u306e\u3088\u3046\u306b\u66f8\u304f\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\u30d7\u30ed\u30c0\u30af\u30b7\u30e7\u30f3\u30b3\u30fc\u30c9\n\nBaz.java\npackage sample;\n\nclass Baz {\n    private String methodToMock(String p_str) {\n        return \"private\";\n    }\n}\n\n\n\u30c6\u30b9\u30c8\u30b3\u30fc\u30c9\n\nBazTest.java\npackage sample;\n\nimport static mockit.Deencapsulation.*;\nimport static org.hamcrest.CoreMatchers.*;\nimport static org.junit.Assert.*;\n\nimport org.junit.Test;\n\npublic class BazTest {\n\n    @Test\n    public void testMethodToTest_invoke_private_method() {\n        // Record\n        Baz baz = new Baz();\n\n        // Replay\n        String act = invoke(baz, \"methodToMock\", new String());\n\n        // Verify\n        assertThat(act, is(\"private\"));\n    }\n\n}\n\n\n\u3053\u3061\u3089\u306f\u554f\u984c\u306a\u304f\u52d5\u4f5c\u3057\u3001\u76f4\u63a5\u30ea\u30d5\u30ec\u30af\u30b7\u30e7\u30f3\u3092\u4f7f\u3046\u3088\u308a\u3082\u3001\u5c11\u3057\u3060\u3051\u7c21\u5358\u306b\u66f8\u304f\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\n\u5ec3\u6b62\u3055\u308c\u305f\u6a5f\u80fd\n\n\nprivate\u30e1\u30bd\u30c3\u30c9\u3001private\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\n\u3000Expectations\u30af\u30e9\u30b9\u5185\u3067private\u30e1\u30bd\u30c3\u30c9\u3001private\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u3092\u30e2\u30c3\u30af\u5316\u3059\u308b\u6a5f\u80fd\u304cVersion 1.23\u3067\u5ec3\u6b62\u3055\u308c\u3066\u3044\u307e\u3059\u3002MockUp<T>\u30af\u30e9\u30b9\u3092\u4f7f\u3046\u3053\u3068\u3067\u4ee3\u7528\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002Expectations\u30af\u30e9\u30b9\u5185\u3067private\u30e1\u30bd\u30c3\u30c9\u3084private\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u3092invoke()\u3057\u3066\u3044\u308b\u30b5\u30f3\u30d7\u30eb\u306f\u60c5\u5831\u304c\u53e4\u304f\u3001\u6700\u65b0\u74b0\u5883\u3067\u306f\u52d5\u4f5c\u3057\u307e\u305b\u3093\u3002\n\u3000\n\n\nNonStrictExpectations\u30af\u30e9\u30b9\n\u3000NonStrictExpectations\u30af\u30e9\u30b9\u306f\u3001Version 1.23\u3067\u975e\u63a8\u5968\u306b\u306a\u308a\u3001Version 1.25\u3067\u5ec3\u6b62\u3055\u308c\u3066\u3044\u307e\u3059\u3002NonStrictExpectations\u30af\u30e9\u30b9\u3092\u4f7f\u3063\u3066\u3044\u308b\u5834\u5408\u3001Expectations\u30af\u30e9\u30b9\u3092\u4f7f\u3046\u304b\u3001MockUp<T>\u30af\u30e9\u30b9\u3092\u4f7f\u3046\u3053\u3068\u3067\u4ee3\u7528\u3059\u308b\u3053\u3068\u304c\u53ef\u80fd\u3067\u3059\u3002\n\n\nJMockit\u3092\u5b9f\u884c\u3059\u308b\n\n\u5b9f\u884c\u74b0\u5883\n\nJDK 1.6+\n\n\nJRE\u3067\u306f\u52d5\u4f5c\u3057\u307e\u305b\u3093\u3002JDK\u3092\u4f7f\u3046\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\nEclipse\u306e\u30c7\u30d5\u30a9\u30eb\u30c8\u8a2d\u5b9a\u306f\u3001\u300cJRE\u30b7\u30b9\u30c6\u30e0\u30fb\u30e9\u30a4\u30d6\u30e9\u30ea\u30fc\u300d\u3067\u3059\u3002JDK\u306b\u5909\u66f4\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\n\n\nJUnit 4.5+\nJMockit\u306e\u30c6\u30b9\u30c8\u30e9\u30f3\u30ca\u30fc\u3092JUnit\u306e\u30c6\u30b9\u30c8\u30e9\u30f3\u30ca\u30fc\u306e\u524d\u306b\u6307\u5b9a\u3057\u307e\u3059\u3002\n\n\nclasspath\u3067jmockit.jar\u3092junit.jar\u3088\u308a\u3082\u524d\u306b\u6307\u5b9a\u3057\u307e\u3059\u3002Eclipse\u3067\u306f\u3001\u300cJava\u306e\u30d3\u30eb\u30c9\u30d1\u30b9\u300d \u2192 \u300c\u9806\u5e8f\u304a\u3088\u3073\u30a8\u30af\u30b9\u30dd\u30fc\u30c8(O)\u300d\u30bf\u30d6\u3067\u8a2d\u5b9a\u3057\u307e\u3059\u3002\n\u30c6\u30b9\u30c8\u30af\u30e9\u30b9\u306b@RunWith(JMockit.class)\u3092\u6307\u5b9a\u3057\u307e\u3059\u3002\n\n\nJUnit 5+\u3068TestNG 6.2+\u3067\u306f\u3001classpath\u306e\u3069\u3053\u306bjmockit.jar\u3092\u6307\u5b9a\u3057\u3066\u3082\u5927\u4e08\u592b\u3067\u3059\u3002\n\u4ee5\u4e0b\u306e\u5834\u5408\u306f\u3001JVM\u306e\u521d\u671f\u5316\u30d1\u30e9\u30e1\u30fc\u30bf\u306b -javaagent:/<proper path>/jmockit.jar \u3092\u6307\u5b9a\u3057\u307e\u3059\u3002\n\n\nOracle\u4ee5\u5916\u306eJDK\u5b9f\u88c5\u3092\u4f7f\u3046\u3068\u304d\nEclipse/IntelliJ IDEA\u3067\u5b9f\u884c/\u30c7\u30d0\u30c3\u30b0\u3059\u308b\u3068\u304d\nAnt/Maven\u306e\u30b9\u30af\u30ea\u30d7\u30c8\u3092\u5b9f\u884c\u3059\u308b\u3068\u304d\n\n\n\n\nAnt\nbuild.xml\u5185\u3067<junit>\u30bf\u30b0\u3092\u4f7f\u3046\u5834\u5408\u306f\u3001JVM\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u5206\u3051\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\n\nbuild.xml\n<junit fork=\"yes\" forkmode=\"once\" dir=\"directoryContainingJars\">\n   <classpath path=\"jmockit.jar\"/>\n\n   <!-- Additional classpath entries, including the appropriate junit.jar -->\n\n   <batchtest>\n      <!-- filesets specifying the desired test classes -->\n   </batchtest>\n</junit>\n\n\n\nMaven\nJUnit\u306e<dependency>\u30bf\u30b0\u306e\u5f8c\u306bJMockit\u306e<dependency>\u30bf\u30b0\u3092\u6307\u5b9a\u3057\u307e\u3059\u3002\n\npom.xml\n<dependencies>\n   <dependency>\n      <groupId>org.jmockit</groupId>\n      <artifactId>jmockit</artifactId>\n      <version>1.x</version>\n      <scope>test</scope>\n   </dependency>\n</dependencies>\n\n\n\n\u304a\u308f\u308a\u306b\n\u3000\u672c\u8a18\u4e8b\u306f\u300cJMockit\u300d\u306e\u8a18\u4e8b\u3067\u3059\u304c\u3001\u30e2\u30c3\u30af\u3092\u591a\u7528\u3057\u305f\u30c6\u30b9\u30c8\u30b3\u30fc\u30c9\u306f\u3001\u30c6\u30b9\u30c8\u30b3\u30fc\u30c9\u81ea\u4f53\u306b\u30d0\u30b0\u304c\u767a\u751f\u3057\u307e\u3059\u3057\u3001\u4ed6\u4eba\u304cJMockit\u3092\u99c6\u4f7f\u3057\u3066\u4f5c\u6210\u3057\u305f\u30c6\u30b9\u30c8\u306f\u30e1\u30f3\u30c6\u30ca\u30f3\u30b9\u306b\u9aa8\u304c\u6298\u308c\u307e\u3059\u3002\n\u3000\u30e2\u30c3\u30af\u30c4\u30fc\u30eb\u3092\u4f7f\u3046\u524d\u306b\u3001\u8a2d\u8a08\u306e\u6bb5\u968e\u3067\u3001\u30c6\u30b9\u30c8\u30b3\u30fc\u30c9\u306e\u30e1\u30f3\u30c6\u30ca\u30f3\u30b9\u6027\u306b\u3064\u3044\u3066\u3082\u8003\u616e\u3057\u3066\u8a2d\u8a08\u3059\u308b\u307b\u3046\u304c\u5148\u6c7a\u3067\u3057\u3087\u3046\u3002\n\u3000\u307e\u305f\u3001\u65b0\u898f\u958b\u767a\u306a\u3089Mockito\u3067\u30c6\u30b9\u30c8\u3067\u304d\u308b\u3088\u3046\u306b\u8a2d\u8a08\u3057\u3066\u3044\u304f\u306e\u304c\u304a\u3059\u3059\u3081\u3067\u3059\u3002\n\u3000Mockito\u5358\u4f53\u3067\u306f\u3067\u304d\u306a\u3044\u3068\u3055\u308c\u3066\u3044\u308b\u3053\u3068\u304c\u3042\u308a\u307e\u3059\u304c\u3001\u3053\u308c\u3089\u306fJava\u306e\u672c\u6765\u306e\u6a5f\u80fd\u3067\u5bfe\u5fdc\u53ef\u80fd\u3067\u3059\u3002\n\n\nprivate\n\u3000\u30ea\u30d5\u30ec\u30af\u30b7\u30e7\u30f3\u3092\u4f7f\u3063\u3066\u53ef\u8996\u6027\u3092\u5909\u66f4\u3059\u308b\u65b9\u6cd5\u304c\u3088\u304f\u77e5\u3089\u308c\u3066\u3044\u307e\u3059\u3002\n\nfinal\n\u3000\u30af\u30e9\u30b9\u30ed\u30fc\u30c0\u30fc\u3067\u30af\u30e9\u30b9\u3092\u30ed\u30fc\u30c9\u3059\u308b\u969b\u306bfinal\u3092\u53d6\u308a\u9664\u304f\u65b9\u6cd5\u304c\u3088\u304f\u77e5\u3089\u308c\u3066\u3044\u307e\u3059\u3002\uff08\u30ea\u30f3\u30af\uff09\n\n\u5f15\u6570\u3064\u304d\u306e\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\n\u3000\u30d7\u30ed\u30c0\u30af\u30b7\u30e7\u30f3\u30b3\u30fc\u30c9\u3092\u300c\u5f15\u6570\u306a\u3057\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\uff0b\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u521d\u671f\u5316\u30e1\u30bd\u30c3\u30c9\u300d\u306b\u30ea\u30d5\u30a1\u30af\u30bf\u30ea\u30f3\u30b0\u3059\u308b\u65b9\u6cd5\u304c\u3088\u304f\u77e5\u3089\u308c\u3066\u3044\u307e\u3059\u3002\n\n\u3000Mockit\u306e\u307b\u3046\u304c\u300eJUnit\u5b9f\u8df5\u5165\u9580\u300f\u306a\u3069\u3001Mockito\u3092\u53d6\u308a\u4e0a\u3052\u305f\u672c\u3084\u3001Web\u306e\u89e3\u8aac\u8a18\u4e8b\u3082\u591a\u304f\u5b66\u7fd2\u3057\u3084\u3059\u3044\u3067\u3059\u3002\n\u3000Pleiades Eclipse\u3092\u5229\u7528\u3055\u308c\u3066\u3044\u308b\u65b9\u306f\u3001\u4ee5\u4e0b\u306e\u624b\u9806\u3067Mockito\u3092\u76ee\u306b\u3059\u308b\u6a5f\u4f1a\u304c\u3042\u308b\u3068\u601d\u3044\u307e\u3059\u3002\n\u3000\u3000\u3000\n\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000Eclipse\u306e\u30e9\u30a4\u30d6\u30e9\u30ea\u30fc\u306e\u8ffd\u52a0\u753b\u9762\nPleiades Eclipse Neon\uff08version 4.6.0\uff09\u3067Mockito\u306e\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u8ffd\u52a0\u3059\u308b\u624b\u9806\uff1a\n\u3000\u3000\u30d1\u30c3\u30b1\u30fc\u30b8\u30fb\u30a8\u30af\u30b9\u30d7\u30ed\u30fc\u30e9 \u2192 \u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u3092\u53f3\u30af\u30ea\u30c3\u30af \u2192 \u30d3\u30eb\u30c9\u30fb\u30d1\u30b9(B) \u2192 \u30e9\u30a4\u30d6\u30e9\u30ea\u30fc\u306e\u8ffd\u52a0(L)... \u2192 Mockito \u2192 \u6b21\u3078(N)\uff1e \u2192 \u5b8c\u4e86(F)\n\u3000\u307e\u305f\u3001Mockito \uff0b PowerMockito \u3067\u306f\u554f\u984c\u306a\u304f\u52d5\u4f5c\u3059\u308b\u3001private\u30e1\u30bd\u30c3\u30c9\u306e\u30e2\u30c3\u30af\u3092\u52d5\u4f5c\u3055\u305b\u308b\u65b9\u6cd5\u304cJMockit\u3067\u306f\u4e0d\u660e\u3067\u3059\u3002\n\u3000\u3068\u306f\u3044\u3048\u3001JMockit\u3092\u5229\u7528\u3059\u308b\u5fc5\u8981\u304c\u3067\u3066\u304d\u305f\u65b9\u306f\u3001JMockit\u306e\u6a5f\u80fd\u3092\u3046\u307e\u304f\u4f7f\u3063\u3066Unit\u30c6\u30b9\u30c8\u306e\u5b9f\u88c5\u3092\u52b9\u7387\u7684\u306b\u304a\u3053\u306a\u3044\u307e\u3057\u3087\u3046\u3002\n## \u306f\u3058\u3081\u306b\n\u3000\u30ec\u30ac\u30b7\u30fc\u30b3\u30fc\u30c9\u306e static, final, private, new \u3092\u30e2\u30c3\u30af\u306b\u3057\u305f\u3044\u3068\u304d\u3001\u6b21\u306e\u3088\u3046\u306a\u9078\u629e\u80a2\u304c\u8003\u3048\u3089\u308c\u307e\u3059\u3002\n\n(A) Mockito + \u81ea\u4f5c\u306e\u30e9\u30c3\u30d1\u30fc\u30af\u30e9\u30b9 or \u30ea\u30d5\u30a1\u30af\u30bf\u30ea\u30f3\u30b0\n(B) Mockito + PowerMockito\n(C) JMockit\n\n(A)\uff5e(C)\u306e\u3069\u308c\u306b\u3059\u308b\u306e\u304b\u306f\u3001\u30c6\u30b9\u30c8\u5bfe\u8c61\u3068\u306e\u517c\u306d\u5408\u3044\u306b\u306a\u308b\u304b\u3068\u601d\u3044\u307e\u3059\u3002\n\u4ee5\u524d\u3001[\u300eJava \u30c6\u30b9\u30c8\u30c4\u30fc\u30eb\u306e\u30c8\u30ec\u30f3\u30c9 2014/1\uff5e2016/5\u300f](http://qiita.com/olympic2020/items/266d9d1b7a1c371ce15d)\u3068\u3044\u3046\u8a18\u4e8b\u3092\u66f8\u304d\u307e\u3057\u305f\u304c\u3001\u672c\u8a18\u4e8b\u3067\u306f\u3001\u3053\u306e\u4e2d\u3067\u4e00\u756a\u60c5\u5831\u304c\u5c11\u306a\u3044JMockit\u3067\u30e2\u30c3\u30af\u3092\u4f5c\u308b\u65b9\u6cd5\u3092\u7d39\u4ecb\u3057\u307e\u3059\u3002\n\n## \u30bb\u30c3\u30c8\u30a2\u30c3\u30d7\nEclipse\u3067JMockit\u3092\u4f7f\u3048\u308b\u3088\u3046\u306b\u30bb\u30c3\u30c8\u30a2\u30c3\u30d7\u3057\u3066\u307f\u307e\u3059\u3002  \n\n1. **\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9**  \n    \u4eca\u56de\u306f**jmockit-1.27.zip**\u3092\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3057\u307e\u3057\u305f\u3002  \n    http://jmockit.org/index.html  \n    \u3000  \n2. **\u30af\u30e9\u30b9\u30d1\u30b9**\n    <font color=\"red\">**jmockit.jar\u3092Eclipse\u306e\u300cJUnit 4\u300d\u30e9\u30a4\u30d6\u30e9\u30ea\u30fc\u3088\u308a\u3082\u524d\u306b\u8a2d\u5b9a**</font>\u3057\u307e\u3059\u3002  \n    ![JMockit_JUnit.png](https://qiita-image-store.s3.amazonaws.com/0/107056/1ef17eee-a694-9c0c-467a-42b57295e1be.png)\n \n    \n    \u30af\u30e9\u30b9\u30d1\u30b9\u306e\u6307\u5b9a\u9806\u3092\u9006\u306b\u3059\u308b\u3068IllegalStateException\u304c\u767a\u751f\u3057\u307e\u3059\u3002  \n    \n    ```\n    java.lang.IllegalStateException: JMockit wasn't properly initialized; please ensure that jmockit precedes junit in the runtime classpath, or use @RunWith(JMockit.class)\n        at sample.FooTest$1.<init>(FooTest.java:19)\n        at sample.FooTest.testGetString(FooTest.java:19)\n        at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n        at java.lang.reflect.Method.invoke(Method.java:498)\n        at org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReference.java:86)\n        at org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38)\n        at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:459)\n        at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:678)\n        at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:382)\n        at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:192)\n    ```  \n    \u8a2d\u5b9a\u65b9\u6cd5\u306f\u3001\u30af\u30e9\u30b9\u30d1\u30b9\u306e\u6307\u5b9a\u9806\u3067\u306f\u306a\u304f\u3001JMockit\u3092\u4f7f\u3063\u3066\u3044\u308b\u30c6\u30b9\u30c8\u30af\u30e9\u30b9\u306b`@RunWith(JMockit.class)`\u306e\u30a2\u30ce\u30c6\u30fc\u30b7\u30e7\u30f3\u3092\u3064\u3051\u308b\u65b9\u6cd5\u3082\u3042\u308a\u307e\u3059\u3002  \n    \u3000  \n3. **\u30b5\u30f3\u30d7\u30eb**  \n    \u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u3067\u52d5\u4f5c\u78ba\u8a8d\u3057\u3066\u307f\u307e\u3059\u3002final\u30af\u30e9\u30b9Foo\u306e\"Foo\"\u306e\u6587\u5b57\u5217\u3092\u5fdc\u7b54\u3059\u308bfinal\u30e1\u30bd\u30c3\u30c9getString()\u306b\"Mock\"\u3068\u5fdc\u7b54\u3055\u305b\u3066\u307f\u307e\u3059\u3002  \n    **\u30d7\u30ed\u30c0\u30af\u30b7\u30e7\u30f3\u30b3\u30fc\u30c9**  \n    \n    ```Foo.java\n    package sample;\n\n    final class Foo {\n        public final String getString() {\n            return \"Foo\";\n        }\n    }\n    ```\n    \n    **\u30c6\u30b9\u30c8\u30b3\u30fc\u30c9**  \n    \n    ```FooTest_1.java\n    package sample;\n\n    import static org.hamcrest.CoreMatchers.*;\n    import static org.junit.Assert.*;\n\n    import org.junit.Test;\n\n    import mockit.Expectations;\n    import mockit.Mocked;\n\n    //@RunWith(JMockit.class)\n    public class FooTest_1 {\n\n        @Mocked\n        private Foo foo;\n\n        @Test\n        public void testGetString() {\n            // Record\n            new Expectations() {{\n                foo.getString();\n                result = \"Mock\";\n            }};\n\n            // Replay\n            String actual = foo.getString();\n\n            // Verify\n            assertThat(actual, is(\"Mock\"));\n        }\n\n    }\n    ```\n    \u30c6\u30b9\u30c8\u30af\u30e9\u30b9\u3067\u306f\u3001\uff20Mocked\u30a2\u30ce\u30c6\u30fc\u30b7\u30e7\u30f3\u3067Foo\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u30e2\u30c3\u30af\u306b\u3057\u3001\u30c6\u30b9\u30c8\u30e1\u30bd\u30c3\u30c9\u5185\u3067\u30e2\u30c3\u30af\u306e\u8a2d\u5b9a\u3092\u3057\u307e\u3059\uff08new Expectations(){...}\uff09\u3002JMockit\u306e\u5834\u5408\u3001final\u30af\u30e9\u30b9\u3084final\u30e1\u30bd\u30c3\u30c9\u306b\u3064\u3044\u3066\u610f\u8b58\u3057\u3066\u306a\u306b\u304b\u3059\u308b\u5fc5\u8981\u306f\u3042\u308a\u307e\u305b\u3093\u3002\n    \n    \u3053\u308c\u3067JUnit\u306e\u5b9f\u884c\u304c\u6210\u529f\u3059\u308c\u3070\u3001JMockit\u306e\u30bb\u30c3\u30c8\u30a2\u30c3\u30d7\u306f\u5b8c\u4e86\u3067\u3059\u3002\n    \u3000  \n\n## @Mocked\n1. **@Mocked\u30a2\u30ce\u30c6\u30fc\u30b7\u30e7\u30f3**  \n    \u3000@Mocked\u30a2\u30ce\u30c6\u30fc\u30b7\u30e7\u30f3\u3092\u6307\u5b9a\u3057\u3066\u751f\u6210\u3057\u305f\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u306f\u3001\u30e2\u30c3\u30af\u306e\u30e1\u30bd\u30c3\u30c9\u3084\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u306e\u5b9f\u88c5\u306f\u7a7a\u306b\u306a\u308a\u3001\u5229\u7528\u3059\u308b\u30e1\u30bd\u30c3\u30c9\u306b\u5bfe\u3057\u3066new Expectations() {...}\u3067\u52d5\u4f5c\u3092\u8a2d\u5b9a\u3057\u307e\u3059\u3002  \n    \u3000\n2. **\u30c6\u30b9\u30c8\u30e1\u30bd\u30c3\u30c9\u6bce\u306b\u30e2\u30c3\u30af\u3092\u751f\u6210\u3059\u308b**\n    \u3000\u30bb\u30c3\u30c8\u30a2\u30c3\u30d7\u3067\u7d39\u4ecb\u3057\u305f\u65b9\u6cd5\u306e\u3088\u3046\u306b\u3001\u30c6\u30b9\u30c8\u30af\u30e9\u30b9\u306e\u30d5\u30a3\u30fc\u30eb\u30c9\u306b\u5bfe\u3057\u3066@Mocked\u3092\u5b9a\u7fa9\u3059\u308b\u3068\u3001\u5168\u3066\u306e\u30c6\u30b9\u30c8\u30e1\u30bd\u30c3\u30c9\u304c\u5b9f\u884c\u3055\u308c\u308b\u305f\u3073\u306b@Mocked\u3092\u6307\u5b9a\u3057\u305f\u30d5\u30a3\u30fc\u30eb\u30c9\u306b\u30e2\u30c3\u30af\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u304c\u751f\u6210\u3055\u308c\u307e\u3059\u3002\uff11\u3064\u306e\u30c6\u30b9\u30c8\u30af\u30e9\u30b9\u306b\u8907\u6570\u306e\u30c6\u30b9\u30c8\u30e1\u30bd\u30c3\u30c9\u304c\u3042\u308a\u3001\u30e2\u30c3\u30af\u3092\u4f7f\u3046\u306e\u304c\u305d\u306e\u4e00\u90e8\u306e\u30c6\u30b9\u30c8\u30e1\u30bd\u30c3\u30c9\u306e\u5834\u5408\u306f\u3001\u30e2\u30c3\u30af\u3092\u4f7f\u308f\u306a\u3044\u30c6\u30b9\u30c8\u306b\u5bfe\u3057\u3066\u30e2\u30c3\u30af\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u751f\u6210\u3059\u308b\u306e\u306f\u52b9\u7387\u304c\u3088\u304f\u3042\u308a\u307e\u305b\u3093\u3002\u30c6\u30b9\u30c8\u30e1\u30bd\u30c3\u30c9\u6bce\u306b\u30e2\u30c3\u30af\u3092\u751f\u6210\u3059\u308b\u5834\u5408\u306f\u3001\u30e1\u30bd\u30c3\u30c9\u306b\u5bfe\u3057\u3066\u30e2\u30c3\u30af\u3092\u6307\u5b9a\u3057\u307e\u3059\u3002\u30c6\u30b9\u30c8\u7d50\u679c\u306f\u540c\u3058\u306b\u306a\u308a\u307e\u3059\u3002\n    \n    ```FooTest_2.java\n    package sample;\n\n    import static org.hamcrest.CoreMatchers.*;\n    import static org.junit.Assert.*;\n\n    import org.junit.Test;\n\n    import mockit.Expectations;\n    import mockit.Mocked;\n\n    public class FooTest_2 {\n\n        @Test\n        public void testGetString(@Mocked final Foo foo) {\n            // Record\n            new Expectations() {{\n                foo.getString();\n                result = \"Mock\";\n            }};\n\n            // Replay\n            String actual = foo.getString();\n\n            // Verify\n            assertThat(actual, is(\"Mock\"));\n        }\n\n    }\n    ```\n\n3. **\u540c\u3058\u30af\u30e9\u30b9\u306e\u30e2\u30c3\u30af\u3092\u8907\u6570\u4f5c\u308b**\n    \u540c\u3058\u30af\u30e9\u30b9\u306e\u30e2\u30c3\u30af\u3092\u8907\u6570\u4f5c\u308a\u305d\u308c\u305e\u308c\u7570\u306a\u308b\u52d5\u4f5c\u3092\u8a2d\u5b9a\u3057\u305f\u3044\u5834\u5408\u306f\u3001\u6b21\u306e\u3088\u3046\u306b\u3057\u307e\u3059\u3002\u30c6\u30b9\u30c8\u30e1\u30bd\u30c3\u30c9\u306b\u306f\u8907\u6570\u306e@Mocked\u30d1\u30e9\u30e1\u30fc\u30bf\u3092\u6307\u5b9a\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u3001\u305d\u308c\u305e\u308c\u306e\u30e2\u30c3\u30af\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u306b\u5bfe\u3057\u3066\u7570\u306a\u308b\u52d5\u4f5c\u3092\u8a2d\u5b9a\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n    \n    ```FooTest_3.java\n    package sample;\n\n    import static org.hamcrest.CoreMatchers.*;\n    import static org.junit.Assert.*;\n\n    import org.junit.Test;\n\n    import mockit.Expectations;\n    import mockit.Mocked;\n\n    public class FooTest_3 {\n\n        @Test\n        public void testGetString(@Mocked final Foo foo1, @Mocked final Foo foo2) {\n            // Record\n            new Expectations() {{\n                foo1.getString(); result = \"Mock1\";\n                foo2.getString(); result = \"Mock2\";\n            }};\n\n            // Replay\n            String actual1 = foo1.getString();\n            String actual2 = foo2.getString();\n\n            // Verify\n            assertThat(actual1, is(\"Mock1\"));\n            assertThat(actual2, is(\"Mock2\"));\n        }\n\n    }\n    ```\n    \n## @Injectable  \n1. @Injectable\u306b\u3064\u3044\u3066  \n    \u3000@Injectable\u3092\u6307\u5b9a\u3059\u308b\u3068\u3001\u6307\u5b9a\u3057\u305f\u30af\u30e9\u30b9\u306e\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u304c\u547c\u3070\u308c\u30d5\u30a3\u30fc\u30eb\u30c9\u306b\u633f\u5165\u3055\u308c\u307e\u3059\u3002  \n    \u3000@Injectable\u3092\u6307\u5b9a\u3057\u3066\u751f\u6210\u3057\u305f\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u306f\u57fa\u672c\u7684\u306b\u306f\u5b9f\u4f53\u3067\u3059\u3002\u52d5\u4f5c\u3092\u5909\u66f4\u3057\u305f\u3044\u30e1\u30bd\u30c3\u30c9\u3084\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u306b\u5bfe\u3057\u3066new Expectations() {...}\u3092\u4f7f\u3063\u3066\u8a2d\u5b9a\u3057\u3066\u3042\u3052\u307e\u3059\u3002  \n    \u3000@Injectable\u3068Expectations()\u306e\u7d44\u307f\u5408\u308f\u305b\u306f\u3001Mockito\u306eSpy\u3068\u4f3c\u305f\u52d5\u4f5c\u306b\u306a\u308a\u307e\u3059\u3002  \n    \u3000\n2. @Mocked\u3068@Injectable\u306e\u9055\u3044  \n    \u3000@Mocked\u3092\u6307\u5b9a\u3059\u308b\u3068\u3001\u305d\u306e\u30af\u30e9\u30b9\u306e\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u3084\u30e1\u30bd\u30c3\u30c9\u306f\u4e2d\u8eab\u304c\u7a7a\u306e\u30e2\u30c3\u30af\u306b\u306a\u3063\u3066\u3057\u307e\u3044\u307e\u3059\u3002\u4e00\u65b9\u3001@Injectable\u3092\u6307\u5b9a\u3059\u308b\u3068\u3001\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u3084\u30e1\u30bd\u30c3\u30c9\u306f\u5b9f\u4f53\u304c\u3068\u3082\u306a\u3063\u305f\u3082\u306e\u306b\u306a\u308a\u307e\u3059\u3002   \n    \u3000\n3. \u30b5\u30f3\u30d7\u30eb\u30d7\u30ed\u30b0\u30e9\u30e0\n    \u3000\u4ee5\u4e0b\u3001@Mocked\u3092\u6307\u5b9a\u3059\u308b\u3068\u4e2d\u8eab\u304c\u7a7a\u306e\u30e2\u30c3\u30af\u304c\u751f\u6210\u3055\u308c\u3001@Injected\u3092\u6307\u5b9a\u3059\u308b\u3068\u5b9f\u4f53\u3092\u4f34\u3063\u305f\u30e2\u30c3\u30af\u304c\u751f\u6210\u3055\u308c\u308b\u69d8\u5b50\u3092\u30b3\u30fc\u30c9\u3067\u78ba\u304b\u3081\u3066\u307f\u307e\u3059\u3002\n    \n    **\u30d7\u30ed\u30c0\u30af\u30b7\u30e7\u30f3\u30b3\u30fc\u30c9**  \n    \n    ```Man.java  \n    package sample;\n\n    class Man {\n        String name;\n        int age;\n\n        Man() {\n            name = \"Taro\";\n            age = 23;\n        }\n\n        Man(String p_name, int p_age) {\n            name = p_name;\n            age = p_age;\n        }\n\n        String getName() {\n            return name;\n        }\n\n        int getAge() {\n            return age;\n        }\n    }\n    ```\n    **\u30c6\u30b9\u30c8\u30b3\u30fc\u30c9**\n    \n    ```ManTest.java\n    package sample;\n\n    import static org.hamcrest.CoreMatchers.*;\n    import static org.junit.Assert.*;\n\n    import org.junit.Test;\n\n    import mockit.Expectations;\n    import mockit.Injectable;\n    import mockit.Mocked;\n\n    public class ManTest {\n\n        /**\n         * \u5f15\u6570\u306a\u3057\u306e\u30ea\u30a2\u30eb\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\n         */\n        @Test\n        public void testMan_Real() {\n            // Arrange\n\n            // Act\n            Man man = new Man();\n\n            // Assert\n            assertThat(man.getName(), is(\"Taro\"));\n            assertThat(man.getAge(), is(23));\n        }\n\n        /**\n         * \u691c\u8a3c\uff11 @Mocked\u3067\u30e2\u30c3\u30af\u5316\n         * \u203b \u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u306f\u30e2\u30c3\u30af\u5316\u3055\u308c\u308b\n         */\n        @Test\n        public void testMan_Mocked_NoSet1(@Mocked final Man anyMan) {\n            // Record\n\n            // Replay\n            Man actMan = new Man();\n\n            // Verify\n            assertThat(actMan.name, nullValue());\n            assertThat(actMan.age, is(0));\n        }\n\n        /**\n         * \u691c\u8a3c\uff12 @Mocked\u3067\u30e2\u30c3\u30af\u5316\n         * \u203b \u30e1\u30bd\u30c3\u30c9\u306f\u30e2\u30c3\u30af\u5316\u3055\u308c\u308b\n         */\n        @Test\n        public void testMan_Mocked_NoSet2(@Mocked final Man anyMan) {\n            // Record\n\n            // Replay\n            Man actMan = new Man();\n            actMan.name = \"Jiro\";\n            actMan.age = 18;\n\n            // Verify\n            assertThat(actMan.getName(), nullValue());\n            assertThat(actMan.getAge(), is(0));\n        }\n\n        /**\n         * \u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u3092@Mocked\u3067\u30e2\u30c3\u30af\u5316\n         * \u203b \u5404\u30e1\u30bd\u30c3\u30c9\u306e\u52d5\u4f5c\u3092\u8a2d\u5b9a\u3059\u308b\u5fc5\u8981\u304c\u3042\u308b\n         */\n        @Test\n        public void testMan_Mocked_Set(@Mocked final Man anyMan) {\n            // Record\n            new Expectations() {{\n                Man mock = new Man();\n                mock.getName(); result = \"Jiro\";\n                mock.getAge(); result = 18;\n            }};\n\n            // Replay\n            Man actMan = new Man();\n\n            // Verify\n            assertThat(actMan.getName(), is(\"Jiro\"));\n            assertThat(actMan.getAge(), is(18));\n        }\n\n        /**\n         * \u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u3092@Injectable\u3067\u90e8\u5206\u30e2\u30c3\u30af\u5316\n         * \u203b \u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u306f\u5b9f\u4f53\u304c\u547c\u3073\u51fa\u3055\u308c\u308b\n         */\n        @Test\n        public void testMan_Injected(@Injectable final Man anyMan) {\n            // Record\n\n            // Replay\n            Man actMan = new Man();\n\n            // Verify\n            assertThat(actMan.getName(), is(\"Taro\"));\n            assertThat(actMan.getAge(), is(23));\n        }\n\n        /**\n         * \u5f15\u6570\u3042\u308a\u306e\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u3092\u90e8\u5206\u30e2\u30c3\u30af\u5316\u3059\u308b\n         * \u203b Expectations\u3067\u52d5\u4f5c\u3092\u8a2d\u5b9a\u3057\u305f\u90e8\u5206\u3060\u3051\u304c\u30e2\u30c3\u30af\u5316\u3055\u308c\u308b\n         */\n        @Test\n        public void testManStringInt(@Injectable final Man spyMan) {\n            // Record\n            new Expectations() {{\n                spyMan.getAge(); returns(15, 10);\n            }};\n\n            // Replay\n            Man actMan = new Man(\"Jiro\", 18);\n\n            // Verify\n            assertThat(actMan.getName(), is(\"Jiro\"));\n            assertThat(actMan.getAge(), is(18));\n            assertThat(spyMan.getAge(), is(15));\n            assertThat(spyMan.getAge(), is(10));\n        }\n\n    }\n    ```\n\n## @Mock\n1. **interface\u306e\u4e00\u90e8\u306e\u30e1\u30bd\u30c3\u30c9\u3060\u3051\u5b9f\u4f53\u5316**  \n    \u591a\u6570\u306e\u30e1\u30bd\u30c3\u30c9\u3092\u3082\u3064interface\u306e\u4e00\u90e8\u306e\u30e1\u30bd\u30c3\u30c9\u3060\u3051\u5b9f\u4f53\u5316\u3057\u305f\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u5229\u7528\u3057\u305f\u3044\u5834\u5408\u306f\u3001`new MockUp<T>(){...}`\u304c\u4fbf\u5229\u3067\u3059\u3002MockUp\u306e\u5185\u90e8\u3067\u306f\u3001\u5b9f\u4f53\u5316\u3057\u305f\u3044\u30e1\u30bd\u30c3\u30c9\u306b\u5bfe\u3057\u3066@Mock\u30a2\u30ce\u30c6\u30fc\u30b7\u30e7\u30f3\u3092\u6307\u5b9a\u3057\u307e\u3059\u3002 \n \n**\u30d7\u30ed\u30c0\u30af\u30b7\u30e7\u30f3\u30b3\u30fc\u30c9**\n\n```Boo.java\npackage sample;\n\ninterface Boo {\n\t/**\n\t * \u30c6\u30b9\u30c8\u5bfe\u8c61\u306e\u30e1\u30bd\u30c3\u30c9\n\t *\n\t * @return private\u30e1\u30bd\u30c3\u30c9\u304c\u5fdc\u7b54\u3057\u305f\u6587\u5b57\u5217\u3092\u5fdc\u7b54\u3059\u308b\n\t */\n\tString methodToTest();\n\n\t/**\n\t * \u30c6\u30b9\u30c8\u5bfe\u8c61\u5916\u306e\u30e1\u30bd\u30c3\u30c9\uff11\n\t */\n\tString mothodToNotTest1();\n\n\t/**\n\t * \u30c6\u30b9\u30c8\u5bfe\u8c61\u5916\u306e\u30e1\u30bd\u30c3\u30c9\uff12\n\t */\n\tString mothodToNotTest2();\n\n\t/**\n\t * \u30c6\u30b9\u30c8\u5bfe\u8c61\u5916\u306e\u30e1\u30bd\u30c3\u30c9\uff13\n\t */\n\tString mothodToNotTest3();\n}\n```\n\n**\u30c6\u30b9\u30c8\u30b3\u30fc\u30c9**\n\n```BooTest.java\npackage sample;\n\nimport static org.hamcrest.CoreMatchers.*;\nimport static org.junit.Assert.*;\n\nimport org.junit.Test;\n\nimport mockit.Mock;\nimport mockit.MockUp;\n\npublic class BooTest {\n\n\t@Test\n\tpublic void testMethodToTest_MockUp() {\n\t\t// Record\n\t\tBoo boo = new MockUp<Boo>() {\n\t\t\t@Mock public String methodToTest() {\n\t\t\t\treturn \"Hoge\";\n\t\t\t}\n\t\t}.getMockInstance();\n\n\t\t// Replay\n\t\tString act = boo.methodToTest();\n\n\t\t// Verify\n\t\tassertThat(act, is(\"Hoge\"));\n\t}\n\n}\n```\n\n## @Capturing  \n\u25a0 **\u57fa\u672c\u7de8**\n\u3000\u5b9f\u88c5\u30af\u30e9\u30b9\u3092\u7279\u5b9a\u3057\u306a\u3044\u3067\u57fa\u5e95\u30af\u30e9\u30b9\u306e\u30e2\u30c3\u30af\u3092\u4f5c\u308a\u305f\u3044\u5834\u5408\u306f@Capturing\u30a2\u30ce\u30c6\u30fc\u30b7\u30e7\u30f3\u3092\u4f7f\u3044\u307e\u3059\u3002\u7570\u306a\u308b\u5b9f\u88c5\u30af\u30e9\u30b9\u306e\u540c\u4e00\u540d\u306e\u30e1\u30bd\u30c3\u30c9\u306b\u5bfe\u3057\u3066\u3001\u307e\u3068\u3081\u3066\u30e2\u30c3\u30af\u306e\u52d5\u4f5c\u3092\u8a2d\u5b9a\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\n**\u30af\u30e9\u30b9\u56f3**\n\u3000![Business.png](https://qiita-image-store.s3.amazonaws.com/0/107056/9caf7f0e-8812-3088-87d0-c1b8063fbc29.png)\n\n**\u30d7\u30ed\u30c0\u30af\u30b7\u30e7\u30f3\u30b3\u30fc\u30c9**\n\n```Service.java\npackage sample;\n\ninterface Service {\n\tint doSomething();\n}\n```\n\n```ServiceImpl.java\npackage sample;\n\nclass ServiceImpl implements sample.Service {\n\t@Override\n\tpublic int doSomething() {\n\t\treturn 1;\n\t}\n}\n```\n\n```Business.java\npackage sample;\n\nclass Business {\n\tprivate final Service service1 = new ServiceImpl();\n\tprivate final Service service2 = new Service() {\n\t\tpublic int doSomething() {\n\t\t\treturn 2;\n\t\t}\n\t};\n\n\tint businessOperation() {\n\t\treturn service1.doSomething() + service2.doSomething();\n\t}\n}\n```\n\n**\u30c6\u30b9\u30c8\u30b3\u30fc\u30c9**\n\n```BusinessTest.java\npackage sample;\n\nimport static org.junit.Assert.*;\nimport org.junit.Test;\nimport mockit.Capturing;\nimport mockit.Expectations;\n\npublic class BusinessTest {\n\t@Capturing Service anyService;\n\n\t@Test\n\tpublic void mockingImplementationClassesFromAGivenBaseType() {\n\t\tnew Expectations() {{\n\t\t\t\tanyService.doSomething();\n\t\t\t\treturns(3, 4);\n\t\t\t}};\n\n\t\tint result = new Business().businessOperation();\n\n\t\tassertEquals(7, result);\n\t}\n}\n```\n\n\u30c6\u30b9\u30c8\u3092\u5b9f\u884c\u3059\u308b\u3068\u3001ServiceImpl\u306edoSomething()\u304c3\u3092\u5fdc\u7b54\u3057\u3001Service\u306edoSomething()\u304c4\u3092\u5fdc\u7b54\u3057\u3001businessOperation()\u306e\u5fdc\u7b54\u304c7\u306b\u306a\u308a\u307e\u3059\u3002\n\n\u25a0 **\u5fdc\u7528\u7de8**\n\u3000@Capturing\u306bmaxInstances\u3092\u6307\u5b9a\u3059\u308b\u3053\u3068\u3067\u3001\u3053\u308c\u304b\u3089\u4f5c\u6210\u3055\u308c\u308b\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u306b\u5bfe\u3059\u308b\u52d5\u4f5c\u3092maxInstances\u500b\u76ee\u3092\u5883\u306b\u5909\u66f4\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\n\u3000java.nio.Buffer\u3092\u4f7f\u3063\u305f\u30b5\u30f3\u30d7\u30eb\u3067\u3059\u3002\n\n```DifferentBehaviorTest.java\npackage sample;\n\nimport static org.junit.Assert.*;\n\nimport java.nio.Buffer;\nimport java.nio.ByteBuffer;\nimport java.nio.CharBuffer;\nimport java.nio.IntBuffer;\n\nimport org.junit.Test;\n\nimport mockit.Capturing;\nimport mockit.Expectations;\n\npublic class DifferentBehaviorTest {\n\t@Test\n\tpublic void differentBehaviorTest(\n\t\t\t@Capturing(maxInstances = 1) final Buffer firstNewBuffer,\n\t\t\t@Capturing final Buffer remainingNewBuffers) {\n\n\t\t// Record\n\t\tnew Expectations() {{\n\t\t\t\tfirstNewBuffer.position(); result = 10;\n\t\t\t\tremainingNewBuffers.position(); result = 20;\n\t\t\t}};\n\n\t\t// Replay\n\t\tByteBuffer buffer1 = ByteBuffer.allocate(100);\n\t\tIntBuffer buffer2 = IntBuffer.wrap(new int[] { 1, 2, 3 });\n\t\tCharBuffer buffer3 = CharBuffer.wrap(\"                \");\n\n\t\t// Verify\n\t\tassertEquals(10, buffer1.position());\n\t\tassertEquals(20, buffer2.position());\n\t\tassertEquals(20, buffer3.position());\n\t}\n}\n```\n\n\u3000`maxInstances = 1`\u3092\u6307\u5b9a\u3057\u305f\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9`firstNewBuffer`\u306e\u5fdc\u7b54\u306f\u300c10\u300d\u3002\u305d\u308c\u4ee5\u964d\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u306f\u300c20\u300d\u3092\u5fdc\u7b54\u3059\u308b\u3088\u3046\u306b`Expectations`\u3067\u6307\u5b9a\u3057\u3066\u3044\u307e\u3059\u3002\n\u3000\u3088\u3063\u3066\u3001\u6700\u521d\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3001`ByteBuffer buffer1 = ByteBuffer.allocate(100);`\u306e`position()`\u306f\u300c10\u300d\u3092\u5fdc\u7b54\u3057\u3001\uff12\u500b\u76ee\u4ee5\u964d\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3001`IntBuffer buffer2 = IntBuffer.wrap(new int[] { 1, 2, 3 });`\u3068`CharBuffer buffer3 = CharBuffer.wrap(\"                \");`\u306e`position()`\u306f\u300c20\u300d\u3092\u5fdc\u7b54\u3057\u307e\u3059\u3002\n\n\u25a0 **\u5099\u8003**\n\u3000@Mocked\u30a2\u30ce\u30c6\u30fc\u30b7\u30e7\u30f3\u306e\u6307\u5b9a\u304c\u540c\u4e00\u30b9\u30b3\u30fc\u30d7\u306b\u3042\u308b\u3068\u3001@Mocked\u30a2\u30ce\u30c6\u30fc\u30b7\u30e7\u30f3\u306e\u6307\u5b9a\u304c\u512a\u5148\u3055\u308c\u3001\u3059\u3079\u3066\u306e\u5b9f\u88c5\u30af\u30e9\u30b9\u306f\u30e2\u30c3\u30af\u5316\u3055\u308c\u307e\u3059\u3002maxInstances\u306e\u6307\u5b9a\u306f\u8003\u616e\u3055\u308c\u307e\u305b\u3093\u3002\n\n## @Tested\n\u3000@Tested\u30a2\u30ce\u30c6\u30fc\u30b7\u30e7\u30f3\u3068@Injectable\u30a2\u30ce\u30c6\u30fc\u30b7\u30e7\u30f3\u3092\u7d44\u307f\u5408\u308f\u305b\u3066\u4f7f\u3046\u3068\u3001\u30c6\u30b9\u30c8\u958b\u59cb\u6642\u306b@Tested\u30a2\u30ce\u30c6\u30fc\u30b7\u30e7\u30f3\u3067\u6307\u5b9a\u3057\u305f\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u304c\u751f\u6210\u3055\u308c\u3001\u305d\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u306b@Injectable\u30a2\u30ce\u30c6\u30fc\u30b7\u30e7\u30f3\u3067\u6307\u5b9a\u3057\u305f\u30e2\u30c3\u30af\u304c\u5dee\u3057\u8fbc\u307e\u308c\u307e\u3059\u3002\n\n```TestedSample.java\npublic class SomeTest\n{\n   @Tested CodeUnderTest tested;\n   @Injectable Dependency dep1;\n   @Injectable AnotherDependency dep2;\n   @Injectable int someIntegralProperty = 123;\n\n   @Test\n   public void someTestMethod(@Injectable(\"true\") boolean flag, @Injectable(\"Mary\") String name)\n   {\n      // Record expectations on mocked types, if needed.\n\n      tested.exerciseCodeUnderTest();\n\n      // Verify expectations on mocked types, if required.\n   }\n}\n```\n\n\u3053\u306e\u4f8b\u3067\u306f\u3001\u30c6\u30b9\u30c8\u5bfe\u8c61\u30af\u30e9\u30b9CodeUnderTest\u306e\u5404\u30d5\u30a3\u30fc\u30eb\u30c9\u306b\u5bfe\u3057\u3066\u3001\u305d\u306e\u30d5\u30a3\u30fc\u30eb\u30c9\u306e\u578b\u306b\u5fdc\u3058\u3066\u4ee5\u4e0b\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u304c\u5dee\u3057\u8fbc\u307e\u308c\u307e\u3059\u3002\n\u305f\u3060\u3057\u3001CodeUnderTest\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u4f5c\u6210\u3059\u308b\u904e\u7a0b\u3067\u30d5\u30a3\u30fc\u30eb\u30c9\u306b\u306a\u3093\u3089\u304b\u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u304c\u30bb\u30c3\u30c8\u3055\u308c\u305f\u5834\u5408\u306f\u3001\u30e2\u30c3\u30af\u306f\u5dee\u3057\u8fbc\u307e\u308c\u307e\u305b\u3093\u3002\n\n|\u578b|\u30e2\u30c3\u30af|\u5099\u8003|\n|:---|:---|:---|\n|Dependency|new Dependency()|null\u3067\u306f\u306a\u3044\u5834\u5408\u306e\u307fnew\u3057\u3066\u30a4\u30f3\u30b8\u30a7\u30af\u30b7\u30e7\u30f3|\n|AnotherDependency|new AnotherDependency()|null\u3067\u306f\u306a\u3044\u5834\u5408\u306e\u307fnew\u3057\u3066\u30a4\u30f3\u30b8\u30a7\u30af\u30b7\u30e7\u30f3|\n|int|123||\n|boolean|true||\n|String|\"Mary\"|null\u3067\u306f\u306a\u3044\u5834\u5408\u306e\u307f\"Mary\"\u3092\u30a4\u30f3\u30b8\u30a7\u30af\u30b7\u30e7\u30f3|\n\nList<T>\u3084Collection<T>\u306b\u5bfe\u3057\u3066\u3082\u30a4\u30f3\u30b8\u30a7\u30af\u30b7\u30e7\u30f3\u304c\u53ef\u80fd\u3067\u3059\u3002\nTargetClass\u306enames\u3084collaborators\u306b\u30a4\u30f3\u30b8\u30a7\u30af\u30b7\u30e7\u30f3\u3057\u3066\u307f\u307e\u3059\u3002\n\n```DITest.java\npackage sample;\n\nimport static org.hamcrest.CoreMatchers.*;\nimport static org.junit.Assert.*;\n\nimport java.util.Arrays;\nimport java.util.Collection;\nimport java.util.List;\n\nimport org.junit.Test;\n\nimport mockit.Injectable;\nimport mockit.Tested;\n\npublic final class DITest {\n\n\tstatic class Collaborator {\n\t\tfinal int value;\n\n\t\tCollaborator() {\n\t\t\tvalue = 0;\n\t\t}\n\n\t\tCollaborator(int value) {\n\t\t\tthis.value = value;\n\t\t}\n\t}\n\n\tstatic final class TargetClass {\n\t\tfinal List<String> names;\n\t\tCollection<Collaborator> collaborators;\n\n\t\tTargetClass(List<String> names) {\n\t\t\tthis.names = names;\n\t\t}\n\t}\n\n\t@Tested\n\tTargetClass target;\n\t@Injectable\n\tfinal List<String> nameList = Arrays.asList(\"One\", \"Two\");\n\t@Injectable\n\tfinal Collection<Collaborator> collaboratorList = Arrays.asList(new Collaborator(1), new Collaborator(2));\n\n\t@Test\n\tpublic void testMethod() {\n\t\t// Record\n\n\t\t// Replay\n\n\t\t// Verify\n\t\tassertThat(nameList, is(target.names));\n\t\tassertThat(collaboratorList, is(target.collaborators));\n\t}\n\n}\n```\n\n## Deencapsulation\nDeencapsulation\u30af\u30e9\u30b9\u306f\u3001\u30a2\u30af\u30bb\u30b9\u6a29\u306e\u306a\u3044\u30d5\u30a3\u30fc\u30eb\u30c9\u3001\u30e1\u30bd\u30c3\u30c9\u3001\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u306b\u30a2\u30af\u30bb\u30b9\u3059\u308b\u305f\u3081\u306e\u30e6\u30fc\u30c6\u30a3\u30ea\u30c6\u30a3\u30af\u30e9\u30b9\u3067\u3059\u3002\n\n+ **static \\<T> T getField(Class\\<?> classWithStaticField, Class\\<T> fieldType)**  \n    \u30af\u30e9\u30b9\u306e\u578b\u3068\u30d5\u30a3\u30fc\u30eb\u30c9\u306e\u578b\u3092\u6307\u5b9a\u3057\u3066\u3001\u30a2\u30af\u30bb\u30b9\u6a29\u306e\u306a\u3044static\u30d5\u30a3\u30fc\u30eb\u30c9\u306e\u5024\u3092\u53d6\u5f97\u3057\u307e\u3059\u3002  \n    \u5f15\u6570\u306b\u6307\u5b9a\u3057\u305f\u30d5\u30a3\u30fc\u30eb\u30c9\u306e\u578b\u306f\u3001\u5f15\u6570\u306b\u6307\u5b9a\u3057\u305f\u30af\u30e9\u30b9\u306b\uff11\u3064\u3057\u304b\u306a\u3044\u60f3\u5b9a\u3067\u3059\u3002\n+ **static \\<T> T getField(Class\\<?> classWithStaticField, String fieldName)**  \n    \u30af\u30e9\u30b9\u306e\u578b\u3068\u30d5\u30a3\u30fc\u30eb\u30c9\u540d\u3092\u6307\u5b9a\u3057\u3066\u3001\u30a2\u30af\u30bb\u30b9\u6a29\u306e\u306a\u3044static\u30d5\u30a3\u30fc\u30eb\u30c9\u306e\u5024\u3092\u53d6\u5f97\u3057\u307e\u3059\u3002\n+ **static \\<T> T getField(Object objectWithField, Class\\<T> fieldType)**  \n    \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3068\u30d5\u30a3\u30fc\u30eb\u30c9\u306e\u578b\u3092\u6307\u5b9a\u3057\u3066\u3001\u30a2\u30af\u30bb\u30b9\u6a29\u306e\u306a\u3044\u30d5\u30a3\u30fc\u30eb\u30c9\u306e\u5024\u3092\u53d6\u5f97\u3057\u307e\u3059\u3002  \n    \u5f15\u6570\u306b\u6307\u5b9a\u3057\u305f\u30d5\u30a3\u30fc\u30eb\u30c9\u306e\u578b\u306f\u3001\u5f15\u6570\u306b\u6307\u5b9a\u3057\u305f\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u578b\u306b\uff11\u3064\u3057\u304b\u306a\u3044\u60f3\u5b9a\u3067\u3059\u3002\n+ **static \\<T> T getField(Object objectWithField, String fieldName)**  \n    \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3068\u30d5\u30a3\u30fc\u30eb\u30c9\u540d\u3092\u6307\u5b9a\u3057\u3066\u3001\u30a2\u30af\u30bb\u30b9\u6a29\u306e\u306a\u3044\u30d5\u30a3\u30fc\u30eb\u30c9\u306e\u5024\u3092\u53d6\u5f97\u3057\u307e\u3059\u3002  \n+ **static \\<T> T invoke(Class\\<?> classWithStaticMethod, String methodName, Class\\<?>[] parameterTypes, Object... methodArgs)**  \n    \u30a2\u30af\u30bb\u30b9\u6a29\u306e\u306a\u3044static\u30e1\u30bd\u30c3\u30c9\u3092\u547c\u3073\u51fa\u3057\u307e\u3059\u3002\u30e1\u30bd\u30c3\u30c9\u5f15\u6570\u306e\u578b\u3092\u6307\u5b9a\u3057\u307e\u3059\u3002\n+ **static \\<T> T invoke(Class\\<?> classWithStaticMethod, String methodName, Object... nonNullArgs)**  \n    \u30a2\u30af\u30bb\u30b9\u6a29\u306e\u306a\u3044static\u30e1\u30bd\u30c3\u30c9\u3092\u547c\u3073\u51fa\u3057\u307e\u3059\u3002\n+ **static \\<T> T invoke(Object objectWithMethod, String methodName, Class\\<?>[] parameterTypes, Object... methodArgs)**  \n    \u30a2\u30af\u30bb\u30b9\u6a29\u306e\u306a\u3044\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u30e1\u30bd\u30c3\u30c9\u3092\u547c\u3073\u51fa\u3057\u307e\u3059\u3002\u30e1\u30bd\u30c3\u30c9\u5f15\u6570\u306e\u578b\u3092\u6307\u5b9a\u3057\u307e\u3059\u3002\n+ **static \\<T> T invoke(Object objectWithMethod, String methodName, Object... nonNullArgs)**  \n    \u30a2\u30af\u30bb\u30b9\u6a29\u306e\u306a\u3044\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u30e1\u30bd\u30c3\u30c9\u3092\u547c\u3073\u51fa\u3057\u307e\u3059\u3002\n+ **static \\<T> T newInnerInstance(Class\\<? extends T> innerClassToInstantiate, Object outerClassInstance, Object... nonNullArgs)**  \n    \u30a4\u30f3\u30ca\u30fc\u30af\u30e9\u30b9\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u751f\u6210\u3057\u307e\u3059\u3002\u30a4\u30f3\u30ca\u30fc\u30af\u30e9\u30b9\u306e\u578b\u306f\u30af\u30e9\u30b9\u3067\u6307\u5b9a\u3057\u307e\u3059\u3002\n+ **static \\<T> T newInnerInstance(String innerClassSimpleName, Object outerClassInstance, Object... nonNullArgs)**  \n    \u30a4\u30f3\u30ca\u30fc\u30af\u30e9\u30b9\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u751f\u6210\u3057\u307e\u3059\u3002\u30a4\u30f3\u30ca\u30fc\u30af\u30e9\u30b9\u306e\u578b\u306f\u6587\u5b57\u5217\u3067\u6307\u5b9a\u3057\u307e\u3059\u3002\n+ **static \\<T> T newInstance(Class\\<? extends T> classToInstantiate, Class\\<?>[] parameterTypes, Object... initArgs)**  \n    \u30af\u30e9\u30b9\u3092\u6307\u5b9a\u3057\u3001\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u3092\u547c\u3093\u3067\u30af\u30e9\u30b9\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u751f\u6210\u3057\u307e\u3059\u3002\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u306e\u5f15\u6570\u306e\u578b\u3092\u6307\u5b9a\u3057\u307e\u3059\u3002\n+ **static \\<T> T newInstance(Class\\<? extends T> classToInstantiate, Object... nonNullArgs)**  \n    \u30af\u30e9\u30b9\u3092\u6307\u5b9a\u3057\u3001\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u3092\u547c\u3093\u3067\u30af\u30e9\u30b9\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u751f\u6210\u3057\u307e\u3059\u3002\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u306e\u5f15\u6570\u306e\u578b\u306fnonNullArgs\u304b\u3089\u63a8\u5b9a\u3057\u307e\u3059\u3002\n+ **static \\<T> T newInstance(String className, Class\\<?>[] parameterTypes, Object... initArgs)**  \n    \u30a2\u30af\u30bb\u30b9\u6a29\u306e\u306a\u3044\u30af\u30e9\u30b9\u306e\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u3092\u547c\u3093\u3067\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u751f\u6210\u3057\u307e\u3059\u3002\u30af\u30e9\u30b9\u540d\u3092\u6587\u5b57\u5217\u3067\u6307\u5b9a\u3057\u307e\u3059\u3002\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u306e\u5f15\u6570\u306e\u578b\u3092\u6307\u5b9a\u3057\u307e\u3059\u3002\n+ **static \\<T> T newInstance(String className, Object... nonNullArgs)**  \n    \u30a2\u30af\u30bb\u30b9\u6a29\u306e\u306a\u3044\u30af\u30e9\u30b9\u306e\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u3092\u547c\u3093\u3067\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u751f\u6210\u3057\u307e\u3059\u3002\u30af\u30e9\u30b9\u540d\u3092\u6587\u5b57\u5217\u3067\u6307\u5b9a\u3057\u307e\u3059\u3002\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u306e\u5f15\u6570\u306e\u578b\u306fnonNullArgs\u304b\u3089\u63a8\u5b9a\u3057\u307e\u3059\u3002\n+ **public static <T> T newUninitializedInstance(Class<? extends T> classToInstantiate)**\n    \u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u3092\u547c\u3070\u305a\u306b\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u751f\u6210\u3057\u307e\u3059\u3002abstract\u30af\u30e9\u30b9\u3084interface\u306e\u5834\u5408\u3001abstract\u30e1\u30bd\u30c3\u30c9\u306f\u7a7a\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u751f\u6210\u3057\u307e\u3059\u3002\n+ **public static void setField(Class<?> classWithStaticField, Object fieldValue)**  \n    \u30a2\u30af\u30bb\u30b9\u6a29\u306e\u306a\u3044static\u30d5\u30a3\u30fc\u30eb\u30c9\u306b\u5024\u3092\u30bb\u30c3\u30c8\u3057\u307e\u3059\u3002fieldValue\u306e\u578b\u3067\u30bb\u30c3\u30c8\u3059\u308b\u30d5\u30a3\u30fc\u30eb\u30c9\u3092\u63a2\u3057\u307e\u3059\u3002\n+ **public static void setField(Class<?> classWithStaticField, String fieldName, Object fieldValue)**  \n    \u30a2\u30af\u30bb\u30b9\u6a29\u306e\u306a\u3044static\u30d5\u30a3\u30fc\u30eb\u30c9\u306b\u5024\u3092\u30bb\u30c3\u30c8\u3057\u307e\u3059\u3002\n+ **public static void setField(Object objectWithField, Object fieldValue)**  \n    \u30a2\u30af\u30bb\u30b9\u6a29\u306e\u306a\u3044\u30d5\u30a3\u30fc\u30eb\u30c9\u306b\u5024\u3092\u30bb\u30c3\u30c8\u3057\u307e\u3059\u3002fieldValue\u306e\u578b\u3067\u30bb\u30c3\u30c8\u3059\u308b\u30d5\u30a3\u30fc\u30eb\u30c9\u3092\u63a2\u3057\u307e\u3059\u3002\n+ **public static void setField(Object objectWithField, String fieldName, Object fieldValue)**  \n    \u30a2\u30af\u30bb\u30b9\u6a29\u306e\u306a\u3044\u30d5\u30a3\u30fc\u30eb\u30c9\u306b\u5024\u3092\u30bb\u30c3\u30c8\u3057\u307e\u3059\u3002\n\nstatic\u30d5\u30a3\u30fc\u30eb\u30c9\u306bsetField\u3067\u5024\u3092\u30bb\u30c3\u30c8\u3067\u304d\u306a\u3044\u30b1\u30fc\u30b9\u304c\u5b58\u5728\u3057\u307e\u3059\u3002\n\u4f8b\u3048\u3070\u3001\u4ee5\u4e0b\u3067\u3059\u3002\n\n+ private static final int\n+ private static final String\n+ public static final int\n+ public static final String\n\n\u3053\u308c\u306f\u3001\u3053\u308c\u3089\u306estatic\u30d5\u30a3\u30fc\u30eb\u30c9\u306f\u3001\u30b3\u30f3\u30d1\u30a4\u30eb\u6642\u306b\u30d0\u30a4\u30c8\u30d5\u30a1\u30a4\u30eb\u306b\u5024\u304c\u5c55\u958b\u3055\u308c\u3066\u3057\u307e\u3044\u3001JMockit\u304c\u30af\u30e9\u30b9\u30ed\u30fc\u30c0\u30fc\u7d4c\u7531\u3067\u30d0\u30a4\u30c8\u30b3\u30fc\u30c9\u3092\u30ed\u30fc\u30c9\u3057\u305f\u6642\u70b9\u3067\u3001static\u30d5\u30a3\u30fc\u30eb\u30c9\u304c\u306a\u304f\u306a\u3063\u3066\u3057\u307e\u3063\u3066\u3044\u308b\u305f\u3081\u3067\u3059\u3002\n\n## any\u5f15\u6570\n1. **\u4efb\u610f\u306e\u5f15\u6570\u306b\u30de\u30c3\u30c1\u3055\u305b\u308b**\n    \u3000\u30c6\u30b9\u30c8\u30b3\u30fc\u30c9\u306e`new Expectations() {{...}};` \u5185\u3067\u30e2\u30c3\u30af\u30e1\u30bd\u30c3\u30c9\u3092\u5b9a\u7fa9\u3059\u308b\u3055\u3044\u306b\u3001\u4efb\u610f\u306e\u5f15\u6570\u306b\u30de\u30c3\u30c1\u3055\u305b\u305f\u3044\u5834\u5408\u306f\u3001mockit.Invocations\u30af\u30e9\u30b9\u306eanyXXX\u3092\u6307\u5b9a\u3057\u307e\u3059\u3002\n\n    |anyXXX|Type|\n    |:---|:---|\n    |anyBoolean|Boolean|\n    |anyByte|Byte|\n    |anyChar|Char|\n    |anyDouble|Double|\n    |anyFloat|Float|\n    |anyInt|Int|\n    |anyShort|Short|\n    |anyString|String|\n    |any|Object|\n    \n    **\u30b5\u30f3\u30d7\u30eb**\n    \n    ```HogeTest.java\n    // Record\n    new Expectations() {{\n        mock.getName(anyString); result = \"Hoge\"\n    }};\n    ```\n    getName()\u306e\u5f15\u6570\u306b\"A\"\u3092\u6307\u5b9a\u3057\u3066\u3082\u3001\"B\"\u3092\u6307\u5b9a\u3057\u3066\u3082\u3001getName()\u306f\"Hoge\"\u3092\u5fdc\u7b54\u3057\u307e\u3059\u3002\n\n\n## static\u30e1\u30bd\u30c3\u30c9\n1. static\u30e1\u30bd\u30c3\u30c9\u306e\u30e2\u30c3\u30af\u5316\n\u3000@Mocked\u30a2\u30ce\u30c6\u30fc\u30b7\u30e7\u30f3\u3067\u30af\u30e9\u30b9\u540d\u3092\u6307\u5b9a\u3057\u3001\u305d\u306e\u30af\u30e9\u30b9\u306e\u30e1\u30bd\u30c3\u30c9\u306b\u5bfe\u3057\u3066\u3001`Expectations()`\u5185\u3067`\u30af\u30e9\u30b9\u540d.\u30e1\u30bd\u30c3\u30c9\u540d(); result = XXX;`\u3092\u30bb\u30c3\u30c8\u3059\u308b\u3068\u3001static\u30e1\u30bd\u30c3\u30c9\u3092\u30e2\u30c3\u30af\u5316\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\u3000\n\n2. \u30b5\u30f3\u30d7\u30eb\u30d7\u30ed\u30b0\u30e9\u30e0\n**\u30d7\u30ed\u30c0\u30af\u30b7\u30e7\u30f3\u30b3\u30fc\u30c9**\n\n```Bar.java\npackage sample;\n\nclass Bar {\n\t/**\n\t * static\u30e1\u30bd\u30c3\u30c9\n\t */\n\tstatic String getName(String p_name) {\n\t\treturn null;\n\t}\n}\n```\n\n**\u30c6\u30b9\u30c8\u30b3\u30fc\u30c9**\n\n```BarTest.java\npackage sample;\n\nimport static org.hamcrest.CoreMatchers.*;\nimport static org.junit.Assert.*;\n\nimport org.junit.Test;\n\nimport mockit.Expectations;\nimport mockit.Mocked;\n\npublic class BarTest {\n\n\t/**\n\t * static\u30e1\u30bd\u30c3\u30c9\u3092\u30e2\u30c3\u30af\u5316\u3059\u308b\n\t */\n\t@Test\n\tpublic void testGetName(@Mocked final Bar mock) {\n        // Record\n    \tnew Expectations() {{\n    \t\tBar.getName(\"Taro\"); result = \"Taro\";\n    \t\tBar.getName(\"Jiro\"); result = \"Jiro\";\n    \t\tBar.getName(anyString); result = \"None\";\n    \t}};\n\n        // Replay\n        String act1 = Bar.getName(\"Taro\");\n        String act2 = Bar.getName(\"Jiro\");\n        String act3 = Bar.getName(\"Hanako\");\n\n        // Verify\n        assertThat(act1, is(\"Taro\"));\n        assertThat(act2, is(\"Jiro\"));\n        assertThat(act3, is(\"None\"));\n\t}\n\n}\n```\n\n## private\u30e1\u30bd\u30c3\u30c9\n\u25cf **private\u30e1\u30bd\u30c3\u30c9\u306e\u30e2\u30c3\u30af\u5316\u304c\u3046\u307e\u304f\u3044\u304b\u306a\u3044**\n\u3000\u6700\u8fd1\u306eJMockit\uff08version 1.27\u3067\u691c\u8a3c\uff09\u306fprivate\u30e1\u30bd\u30c3\u30c9\u3092\u30e2\u30c3\u30af\u5316\u3059\u308b\u65b9\u6cd5\u304c\u4e0d\u660e\u3067\u3059\u3002\n\u3000\u4f8b\u3048\u3070\u3001StackOverflow\uff08[\u30ea\u30f3\u30af](http://stackoverflow.com/questions/24427685/mocking-private-method-of-class-under-test-using-jmockit)\uff09\u306e\u56de\u7b54\u3092\u5b9f\u884c\u3057\u3066\u307f\u307e\u3059\u3002\n\n```TestAClass.java\nimport org.junit.Test;\nimport static mockit.Deencapsulation.*;\nimport mockit.*;\n\npublic class TestAClass\n{\n    public static class ClassToTest \n    {\n        public void methodToTest()\n        {\n            boolean returnValue = methodToMock(0);\n            System.out.println(\"methodToMock returned \" + returnValue);\n        }\n\n        private boolean methodToMock(int value) { return true; }\n    }\n\n    @Tested ClassToTest classToTestInstance;\n\n    @Test\n    public void partiallyMockTestedClass() {\n        new Expectations(classToTestInstance) {{\n            invoke(classToTestInstance, \"methodToMock\", anyInt);\n            result = false;\n            times = 2;\n        }};\n\n        classToTestInstance.methodToTest();\n        classToTestInstance.methodToTest();\n        classToTestInstance.methodToTest();\n    }\n}\n```\n\n\u7d50\u679c\u306f\u3001IllegalArgumentException\u3002\n\n```\njava.lang.IllegalArgumentException: Invalid invocation from expectation block\n\tat sample.TestAClass$1.<init>(TestAClass.java:28)\n\tat sample.TestAClass.partiallyMockTestedClass(TestAClass.java:27)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReference.java:86)\n\tat org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:459)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:678)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:382)\n\tat org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:192)\n```\n\n\u6b21\u7ae0\u300e\u5ec3\u6b62\u3055\u308c\u305f\u6a5f\u80fd\u300f\u306b\u3082\u8a18\u8f09\u3057\u307e\u3057\u305f\u304c\u3001Expectations\u30af\u30e9\u30b9\u5185\u3067private\u30e1\u30bd\u30c3\u30c9\u3092\u30e2\u30c3\u30af\u5316\u3059\u308b\u6a5f\u80fd\u306f\u5ec3\u6b62\u3055\u308c\u307e\u3057\u305f\u3002  \n\u307e\u3042\u3001\u3053\u306e\u56de\u7b54\u306f\u3001\u5b9f\u884c\u3067\u304d\u305f\u3068\u3057\u3066\u3082\u3001\u4ee5\u4e0b\u306e\u90e8\u5206\u306e\u8abf\u6574\u304c\u3082\u3046\u5c11\u3057\u5fc5\u8981\u3067\u3059\u3002\n\n* \u30d7\u30ed\u30c0\u30af\u30b7\u30e7\u30f3\u30b3\u30fc\u30c9\u3068\u30c6\u30b9\u30c8\u30b3\u30fc\u30c9\u304c\u4e00\u4f53\u306b\u306a\u3063\u3066\u3044\u308b\n* static\u30af\u30e9\u30b9\u306e\u30e1\u30bd\u30c3\u30c9\u3092\u30e2\u30c3\u30af\u5316\u3057\u3066\u3044\u308b\n\n\u25cf **private\u30e1\u30bd\u30c3\u30c9\u3092\u547c\u3073\u51fa\u3059\u30e9\u30c3\u30d1\u30fc\u30e1\u30bd\u30c3\u30c9**\n\u30e2\u30c3\u30af\u3068\u306f\u95a2\u4fc2\u3042\u308a\u307e\u305b\u3093\u304c\u3001\u95a2\u9023\u9805\u76ee\u3068\u3057\u3066JMockit\u306b\u306fprivate\u30e1\u30bd\u30c3\u30c9\u3092\u547c\u3073\u51fa\u3059\u30e9\u30c3\u30d1\u30fc\u30e1\u30bd\u30c3\u30c9\u304c\u7528\u610f\u3055\u308c\u3066\u3044\u307e\u3059\u3002\n\u3053\u306e\u30e9\u30c3\u30d1\u30fc\u30e1\u30bd\u30c3\u30c9\u3092\u4f7f\u3063\u3066private\u30e1\u30bd\u30c3\u30c9\u306e\u30c6\u30b9\u30c8\u306f\u4e0b\u8a18\u306e\u3088\u3046\u306b\u66f8\u304f\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\n**\u30d7\u30ed\u30c0\u30af\u30b7\u30e7\u30f3\u30b3\u30fc\u30c9**\n\n```Baz.java\npackage sample;\n\nclass Baz {\n\tprivate String methodToMock(String p_str) {\n\t\treturn \"private\";\n\t}\n}\n```\n\n**\u30c6\u30b9\u30c8\u30b3\u30fc\u30c9**\n\n```BazTest.java\npackage sample;\n\nimport static mockit.Deencapsulation.*;\nimport static org.hamcrest.CoreMatchers.*;\nimport static org.junit.Assert.*;\n\nimport org.junit.Test;\n\npublic class BazTest {\n\n\t@Test\n\tpublic void testMethodToTest_invoke_private_method() {\n\t\t// Record\n\t\tBaz baz = new Baz();\n\n\t\t// Replay\n\t\tString act = invoke(baz, \"methodToMock\", new String());\n\n\t\t// Verify\n\t\tassertThat(act, is(\"private\"));\n\t}\n\n}\n```\n\n\u3053\u3061\u3089\u306f\u554f\u984c\u306a\u304f\u52d5\u4f5c\u3057\u3001\u76f4\u63a5\u30ea\u30d5\u30ec\u30af\u30b7\u30e7\u30f3\u3092\u4f7f\u3046\u3088\u308a\u3082\u3001\u5c11\u3057\u3060\u3051\u7c21\u5358\u306b\u66f8\u304f\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\n## \u5ec3\u6b62\u3055\u308c\u305f\u6a5f\u80fd  \n1. **private\u30e1\u30bd\u30c3\u30c9\u3001private\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf**  \n    \u3000Expectations\u30af\u30e9\u30b9\u5185\u3067private\u30e1\u30bd\u30c3\u30c9\u3001private\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u3092\u30e2\u30c3\u30af\u5316\u3059\u308b\u6a5f\u80fd\u304cVersion 1.23\u3067\u5ec3\u6b62\u3055\u308c\u3066\u3044\u307e\u3059\u3002`MockUp<T>`\u30af\u30e9\u30b9\u3092\u4f7f\u3046\u3053\u3068\u3067\u4ee3\u7528\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002Expectations\u30af\u30e9\u30b9\u5185\u3067private\u30e1\u30bd\u30c3\u30c9\u3084private\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u3092invoke()\u3057\u3066\u3044\u308b\u30b5\u30f3\u30d7\u30eb\u306f\u60c5\u5831\u304c\u53e4\u304f\u3001\u6700\u65b0\u74b0\u5883\u3067\u306f\u52d5\u4f5c\u3057\u307e\u305b\u3093\u3002  \n    \u3000  \n2. **NonStrictExpectations\u30af\u30e9\u30b9**  \n    \u3000NonStrictExpectations\u30af\u30e9\u30b9\u306f\u3001Version 1.23\u3067\u975e\u63a8\u5968\u306b\u306a\u308a\u3001Version 1.25\u3067\u5ec3\u6b62\u3055\u308c\u3066\u3044\u307e\u3059\u3002NonStrictExpectations\u30af\u30e9\u30b9\u3092\u4f7f\u3063\u3066\u3044\u308b\u5834\u5408\u3001`Expectations`\u30af\u30e9\u30b9\u3092\u4f7f\u3046\u304b\u3001`MockUp<T>`\u30af\u30e9\u30b9\u3092\u4f7f\u3046\u3053\u3068\u3067\u4ee3\u7528\u3059\u308b\u3053\u3068\u304c\u53ef\u80fd\u3067\u3059\u3002\n\n## JMockit\u3092\u5b9f\u884c\u3059\u308b\n#### \u5b9f\u884c\u74b0\u5883\n+ JDK 1.6+\n    - JRE\u3067\u306f\u52d5\u4f5c\u3057\u307e\u305b\u3093\u3002JDK\u3092\u4f7f\u3046\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\n    - Eclipse\u306e\u30c7\u30d5\u30a9\u30eb\u30c8\u8a2d\u5b9a\u306f\u3001\u300cJRE\u30b7\u30b9\u30c6\u30e0\u30fb\u30e9\u30a4\u30d6\u30e9\u30ea\u30fc\u300d\u3067\u3059\u3002JDK\u306b\u5909\u66f4\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\n+ JUnit 4.5+\n+ JMockit\u306e\u30c6\u30b9\u30c8\u30e9\u30f3\u30ca\u30fc\u3092JUnit\u306e\u30c6\u30b9\u30c8\u30e9\u30f3\u30ca\u30fc\u306e\u524d\u306b\u6307\u5b9a\u3057\u307e\u3059\u3002\n    1. classpath\u3067jmockit.jar\u3092junit.jar\u3088\u308a\u3082\u524d\u306b\u6307\u5b9a\u3057\u307e\u3059\u3002Eclipse\u3067\u306f\u3001\u300cJava\u306e\u30d3\u30eb\u30c9\u30d1\u30b9\u300d \u2192 \u300c\u9806\u5e8f\u304a\u3088\u3073\u30a8\u30af\u30b9\u30dd\u30fc\u30c8(O)\u300d\u30bf\u30d6\u3067\u8a2d\u5b9a\u3057\u307e\u3059\u3002\n    2. \u30c6\u30b9\u30c8\u30af\u30e9\u30b9\u306b@RunWith(JMockit.class)\u3092\u6307\u5b9a\u3057\u307e\u3059\u3002\n+ JUnit 5+\u3068TestNG 6.2+\u3067\u306f\u3001classpath\u306e\u3069\u3053\u306bjmockit.jar\u3092\u6307\u5b9a\u3057\u3066\u3082\u5927\u4e08\u592b\u3067\u3059\u3002\n+ \u4ee5\u4e0b\u306e\u5834\u5408\u306f\u3001JVM\u306e\u521d\u671f\u5316\u30d1\u30e9\u30e1\u30fc\u30bf\u306b `-javaagent:/<proper path>/jmockit.jar` \u3092\u6307\u5b9a\u3057\u307e\u3059\u3002\n    - Oracle\u4ee5\u5916\u306eJDK\u5b9f\u88c5\u3092\u4f7f\u3046\u3068\u304d\n    - Eclipse/IntelliJ IDEA\u3067\u5b9f\u884c/\u30c7\u30d0\u30c3\u30b0\u3059\u308b\u3068\u304d\n    - Ant/Maven\u306e\u30b9\u30af\u30ea\u30d7\u30c8\u3092\u5b9f\u884c\u3059\u308b\u3068\u304d\n\n#### Ant\nbuild.xml\u5185\u3067\\<junit>\u30bf\u30b0\u3092\u4f7f\u3046\u5834\u5408\u306f\u3001JVM\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u5206\u3051\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\n\n```build.xml\n<junit fork=\"yes\" forkmode=\"once\" dir=\"directoryContainingJars\">\n   <classpath path=\"jmockit.jar\"/>\n\n   <!-- Additional classpath entries, including the appropriate junit.jar -->\n\n   <batchtest>\n      <!-- filesets specifying the desired test classes -->\n   </batchtest>\n</junit>\n```\n\n#### Maven\nJUnit\u306e\\<dependency>\u30bf\u30b0\u306e\u5f8c\u306bJMockit\u306e\\<dependency>\u30bf\u30b0\u3092\u6307\u5b9a\u3057\u307e\u3059\u3002\n\n```pom.xml\n<dependencies>\n   <dependency>\n      <groupId>org.jmockit</groupId>\n      <artifactId>jmockit</artifactId>\n      <version>1.x</version>\n      <scope>test</scope>\n   </dependency>\n</dependencies>\n```\n\n## \u304a\u308f\u308a\u306b\n\u3000\u672c\u8a18\u4e8b\u306f\u300cJMockit\u300d\u306e\u8a18\u4e8b\u3067\u3059\u304c\u3001\u30e2\u30c3\u30af\u3092\u591a\u7528\u3057\u305f\u30c6\u30b9\u30c8\u30b3\u30fc\u30c9\u306f\u3001\u30c6\u30b9\u30c8\u30b3\u30fc\u30c9\u81ea\u4f53\u306b\u30d0\u30b0\u304c\u767a\u751f\u3057\u307e\u3059\u3057\u3001\u4ed6\u4eba\u304cJMockit\u3092\u99c6\u4f7f\u3057\u3066\u4f5c\u6210\u3057\u305f\u30c6\u30b9\u30c8\u306f\u30e1\u30f3\u30c6\u30ca\u30f3\u30b9\u306b\u9aa8\u304c\u6298\u308c\u307e\u3059\u3002\n\u3000\u30e2\u30c3\u30af\u30c4\u30fc\u30eb\u3092\u4f7f\u3046\u524d\u306b\u3001\u8a2d\u8a08\u306e\u6bb5\u968e\u3067\u3001\u30c6\u30b9\u30c8\u30b3\u30fc\u30c9\u306e\u30e1\u30f3\u30c6\u30ca\u30f3\u30b9\u6027\u306b\u3064\u3044\u3066\u3082\u8003\u616e\u3057\u3066\u8a2d\u8a08\u3059\u308b\u307b\u3046\u304c\u5148\u6c7a\u3067\u3057\u3087\u3046\u3002\n\u3000\u307e\u305f\u3001\u65b0\u898f\u958b\u767a\u306a\u3089Mockito\u3067\u30c6\u30b9\u30c8\u3067\u304d\u308b\u3088\u3046\u306b\u8a2d\u8a08\u3057\u3066\u3044\u304f\u306e\u304c\u304a\u3059\u3059\u3081\u3067\u3059\u3002\n\u3000Mockito\u5358\u4f53\u3067\u306f\u3067\u304d\u306a\u3044\u3068\u3055\u308c\u3066\u3044\u308b\u3053\u3068\u304c\u3042\u308a\u307e\u3059\u304c\u3001\u3053\u308c\u3089\u306fJava\u306e\u672c\u6765\u306e\u6a5f\u80fd\u3067\u5bfe\u5fdc\u53ef\u80fd\u3067\u3059\u3002\n\n* **private**  \n    \u3000\u30ea\u30d5\u30ec\u30af\u30b7\u30e7\u30f3\u3092\u4f7f\u3063\u3066\u53ef\u8996\u6027\u3092\u5909\u66f4\u3059\u308b\u65b9\u6cd5\u304c\u3088\u304f\u77e5\u3089\u308c\u3066\u3044\u307e\u3059\u3002\n* **final**  \n    \u3000\u30af\u30e9\u30b9\u30ed\u30fc\u30c0\u30fc\u3067\u30af\u30e9\u30b9\u3092\u30ed\u30fc\u30c9\u3059\u308b\u969b\u306bfinal\u3092\u53d6\u308a\u9664\u304f\u65b9\u6cd5\u304c\u3088\u304f\u77e5\u3089\u308c\u3066\u3044\u307e\u3059\u3002\uff08[\u30ea\u30f3\u30af](https://objectpartners.com/2012/03/15/how-to-mock-final-classes-in-unit-tests/)\uff09\n* **\u5f15\u6570\u3064\u304d\u306e\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf**  \n    \u3000\u30d7\u30ed\u30c0\u30af\u30b7\u30e7\u30f3\u30b3\u30fc\u30c9\u3092\u300c\u5f15\u6570\u306a\u3057\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\uff0b\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u521d\u671f\u5316\u30e1\u30bd\u30c3\u30c9\u300d\u306b\u30ea\u30d5\u30a1\u30af\u30bf\u30ea\u30f3\u30b0\u3059\u308b\u65b9\u6cd5\u304c\u3088\u304f\u77e5\u3089\u308c\u3066\u3044\u307e\u3059\u3002\n\n\u3000Mockit\u306e\u307b\u3046\u304c\u300eJUnit\u5b9f\u8df5\u5165\u9580\u300f\u306a\u3069\u3001Mockito\u3092\u53d6\u308a\u4e0a\u3052\u305f\u672c\u3084\u3001Web\u306e\u89e3\u8aac\u8a18\u4e8b\u3082\u591a\u304f\u5b66\u7fd2\u3057\u3084\u3059\u3044\u3067\u3059\u3002\n\u3000Pleiades Eclipse\u3092\u5229\u7528\u3055\u308c\u3066\u3044\u308b\u65b9\u306f\u3001\u4ee5\u4e0b\u306e\u624b\u9806\u3067Mockito\u3092\u76ee\u306b\u3059\u308b\u6a5f\u4f1a\u304c\u3042\u308b\u3068\u601d\u3044\u307e\u3059\u3002\n\u3000\u3000\u3000![Mockito-Eclipse.png](https://qiita-image-store.s3.amazonaws.com/0/107056/7febee3b-cbec-9342-f644-71d9b4e4953b.png)\n\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000\u3000**Eclipse\u306e\u30e9\u30a4\u30d6\u30e9\u30ea\u30fc\u306e\u8ffd\u52a0\u753b\u9762**  \nPleiades Eclipse Neon\uff08version 4.6.0\uff09\u3067Mockito\u306e\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u8ffd\u52a0\u3059\u308b\u624b\u9806\uff1a\n\u3000\u3000\u30d1\u30c3\u30b1\u30fc\u30b8\u30fb\u30a8\u30af\u30b9\u30d7\u30ed\u30fc\u30e9 \u2192 \u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u3092\u53f3\u30af\u30ea\u30c3\u30af \u2192 \u30d3\u30eb\u30c9\u30fb\u30d1\u30b9(B) \u2192 \u30e9\u30a4\u30d6\u30e9\u30ea\u30fc\u306e\u8ffd\u52a0(L)... \u2192 Mockito \u2192 \u6b21\u3078(N)\uff1e \u2192 \u5b8c\u4e86(F)\n\n\u3000\u307e\u305f\u3001Mockito \uff0b PowerMockito \u3067\u306f\u554f\u984c\u306a\u304f\u52d5\u4f5c\u3059\u308b\u3001private\u30e1\u30bd\u30c3\u30c9\u306e\u30e2\u30c3\u30af\u3092\u52d5\u4f5c\u3055\u305b\u308b\u65b9\u6cd5\u304cJMockit\u3067\u306f\u4e0d\u660e\u3067\u3059\u3002\n\n\u3000\u3068\u306f\u3044\u3048\u3001JMockit\u3092\u5229\u7528\u3059\u308b\u5fc5\u8981\u304c\u3067\u3066\u304d\u305f\u65b9\u306f\u3001JMockit\u306e\u6a5f\u80fd\u3092\u3046\u307e\u304f\u4f7f\u3063\u3066Unit\u30c6\u30b9\u30c8\u306e\u5b9f\u88c5\u3092\u52b9\u7387\u7684\u306b\u304a\u3053\u306a\u3044\u307e\u3057\u3087\u3046\u3002\n", "tags": ["jMockit", "Java", "JUnit"]}