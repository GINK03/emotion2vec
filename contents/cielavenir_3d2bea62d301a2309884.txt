{"tags": ["Ruby", "C++", "\u3069\u3046\u66f8\u304f", "yhpg"], "context": " \u3053\u306e\u8a18\u4e8b\u306f\u6700\u7d42\u66f4\u65b0\u65e5\u304b\u30891\u5e74\u4ee5\u4e0a\u304c\u7d4c\u904e\u3057\u3066\u3044\u307e\u3059\u3002\u554f\u984c:\nhttp://qiita.com/Nabetani/items/dabe8ec57e0313229552\nhttp://nabetani.sakura.ne.jp/hena/ord17scheherazade/\nhttp://qiita.com/shiracamus/items/20ae065c90007279c753 \u306e\u30a2\u30a4\u30c7\u30a2\u3092\u304a\u501f\u308a\u3057\u307e\u3057\u305f\u3002\nO(\u221an)\u3067\u3059\u3002\n\u300c\u3042\u308bN(N\u306f\u5358\u6570\u3067\u306a\u3044\u81ea\u7136\u6570(2\u4ee5\u4e0a\u306e\u6574\u6570))\u3092n\u9032\u6cd5(n\u306f\u5358\u6570\u3067\u306a\u3044\u81ea\u7136\u6570)\u3067\u8868\u3059\u3068\u3059\u308b\u3002\u305d\u308c\u304c2\u6841\u4ee5\u4e0a\u306e\u56de\u6587\u3068\u306a\u308b\u306a\u3089\u3070\u3001n\u306fsqrt(N-1)\u4ee5\u4e0b\u304b\u3001N-1\u3092\u6574\u6570\u9664\u7b97\u3057\u305f\u5546\u3067\u3042\u308b\u300d\u3068\u3044\u3046\u5b9a\u7406\u304c\u5c0e\u304b\u308c\u307e\u3059\u304c\u3001\u8a3c\u660e\u306f\u3067\u304d\u307e\u305b\u3093(\u6c57)\nMi_Sawa\u6c0f\u3088\u308a\u30b3\u30e1\u30f3\u30c8\u3092\u9802\u304d\u307e\u3057\u305f\u3002\n\nn\u304c\u5927\u4f53sqrt(N)\u4ee5\u4e0a\u304f\u3089\u3044\u306a\u3089\u307e\u3041n\u90322\u6841\u306a\u306e\u3067an+a=N\u306a\u308ba\u304c\u5404\u6841\u306b\u306a\u3063\u3066\u3044\u308b\u8a33\u3067, N=a(n+1)\u306b\u306a\u308b\u304b\u3089N\u306e\u7d04\u6570-1\u3092\u5168\u90e8\u8003\u3048\u308c\u3070\u3044\u3044\u3088\u306d\u3068\u3044\u3046\u611f\u3058\u304b\u306a.\n\n\u3042\u308a\u304c\u3068\u3046\u3054\u3056\u3044\u307e\u3057\u305f\u3002\n\nn<=sqrt(N-1)\u306e\u5834\u5408\u306f\u5168\u90e8\u8abf\u3079\u308b\n(sqrt(N)\u3092\u8d8a\u3048\u308b\u6700\u5c0f\u306e\u6574\u6570)<=n<=N-1\u306e\u5834\u5408\u3001N=an+a=a(n+1)<=>n=N/a-1\u3068\u3067\u304d\u308b\u306e\u3067\u3001 N\u306e\u7d04\u6570a\u3092\u5217\u6319\u30571\u3092\u5f15\u3051\u3070\u826f\u3044\n\n\u3068\u601d\u3063\u305f\u306e\u3067\u3059\u304c\u30012=6/2-1\u3092\u6355\u6349\u3057\u3066\u3057\u307e\u3046\u554f\u984c\u304c\u51fa\u305f\u306e\u3067\u4eca\u56de\u306f\u3053\u3061\u3089\u3082palindrome\u5224\u5b9a\u3057\u307e\u3059--;\n\n\n\n\nLanguage\nValidator C++(Text)\nValidator Ruby(HTTP)\n\n\n\n\nC++\n0.02s\n0.22s\n\n\nRuby\n0.06s\n0.26s\n\n\n\n0.2\u79d2\u306f\u934b\u8c37\u3055\u3093\u306e\u30b5\u30fc\u30d0\u30fc\u304b\u3089HTML\u3092\u62fe\u3063\u3066\u89e3\u6790\u3059\u308b\u6642\u9593\u3067\u3059\u3002\n\u304a\u305d\u3089\u304f0.02s\u306ffork/execl\u306b\u8981\u3059\u308b\u6642\u9593\u3068\u898b\u3066\u826f\u3044\u3068\u601d\u308f\u308c\u307e\u3059\u3002\n\nclang -O2 hena17pre.c;echo 999999999|time ./a.out # 4.83s\nclang++ -O2 hena17pre_fast.cpp;echo 999999999|time ./a.out # 0.00s\n\n\nhena17pre_fast.cpp\n//http://qiita.com/Nabetani/items/dabe8ec57e0313229552\n//http://nabetani.sakura.ne.jp/hena/ord17scheherazade/\n#include <deque>\n#include <cstdio>\n#include <cmath>\nbool palindrome(int n,int b){\n    int n0=n,n1=0;\n    for(;n0;n0/=b)n1=n1*b+n0%b;\n    return n1==n;\n}\nint main(){\n    int n,i;\n    for(;~scanf(\"%d\",&n);){\n        if(n<3)puts(\"-\");\n        else{\n            std::deque<int> result;\n            for(i=sqrt(n-1);i>1;i--){\n                if(palindrome(n,(n-1)/i))result.push_back((n-1)/i);\n                if((n-1)/i!=i&&palindrome(n,i))result.push_front(i); // n-1 might be a square number\n            }\n            for(i=0;i<result.size();i++)printf(\"%d,\",result[i]);\n            printf(\"%d\\n\",n-1);\n        }\n        fflush(stdout);\n    }\n}\n\n\n\nhena17pre_fast.rb\n#!/usr/bin/env ruby\n#http://qiita.com/Nabetani/items/dabe8ec57e0313229552\n#http://nabetani.sakura.ne.jp/hena/ord17scheherazade/\nSTDOUT.sync=true\nclass Integer\n    def palindrome?(b)\n        n0=self\n        n1=0\n        while n0>0\n            n1=n1*b+n0%b\n            n0/=b\n        end\n        n1==self\n    end\nend\nwhile gets\n    n=$_.to_i\n    if n<3 then puts '-';next end\n    result=[]\n    Math.sqrt(n-1).to_i.downto(2).each{|i|\n        result.push((n-1)/i) if n.palindrome?((n-1)/i)\n        result.unshift(i) if (n-1)/i!=i&&n.palindrome?(i) # n-1 might be a square number\n    }\n    puts (result+[n-1])*','\nend\n\n\n\u554f\u984c:\nhttp://qiita.com/Nabetani/items/dabe8ec57e0313229552\nhttp://nabetani.sakura.ne.jp/hena/ord17scheherazade/\n\nhttp://qiita.com/shiracamus/items/20ae065c90007279c753 \u306e\u30a2\u30a4\u30c7\u30a2\u3092\u304a\u501f\u308a\u3057\u307e\u3057\u305f\u3002\nO(\u221an)\u3067\u3059\u3002\n\u300c\u3042\u308bN(N\u306f\u5358\u6570\u3067\u306a\u3044\u81ea\u7136\u6570(2\u4ee5\u4e0a\u306e\u6574\u6570))\u3092n\u9032\u6cd5(n\u306f\u5358\u6570\u3067\u306a\u3044\u81ea\u7136\u6570)\u3067\u8868\u3059\u3068\u3059\u308b\u3002\u305d\u308c\u304c2\u6841\u4ee5\u4e0a\u306e\u56de\u6587\u3068\u306a\u308b\u306a\u3089\u3070\u3001n\u306fsqrt(N-1)\u4ee5\u4e0b\u304b\u3001N-1\u3092\u6574\u6570\u9664\u7b97\u3057\u305f\u5546\u3067\u3042\u308b\u300d\u3068\u3044\u3046\u5b9a\u7406\u304c\u5c0e\u304b\u308c\u307e\u3059<del>\u304c\u3001\u8a3c\u660e\u306f\u3067\u304d\u307e\u305b\u3093(\u6c57)</del>\nMi_Sawa\u6c0f\u3088\u308a\u30b3\u30e1\u30f3\u30c8\u3092\u9802\u304d\u307e\u3057\u305f\u3002\n\n>n\u304c\u5927\u4f53sqrt(N)\u4ee5\u4e0a\u304f\u3089\u3044\u306a\u3089\u307e\u3041n\u90322\u6841\u306a\u306e\u3067an+a=N\u306a\u308ba\u304c\u5404\u6841\u306b\u306a\u3063\u3066\u3044\u308b\u8a33\u3067, N=a(n+1)\u306b\u306a\u308b\u304b\u3089N\u306e\u7d04\u6570-1\u3092\u5168\u90e8\u8003\u3048\u308c\u3070\u3044\u3044\u3088\u306d\u3068\u3044\u3046\u611f\u3058\u304b\u306a.\n\n\u3042\u308a\u304c\u3068\u3046\u3054\u3056\u3044\u307e\u3057\u305f\u3002\n\n- n<=sqrt(N-1)\u306e\u5834\u5408\u306f\u5168\u90e8\u8abf\u3079\u308b\n- (sqrt(N)\u3092\u8d8a\u3048\u308b\u6700\u5c0f\u306e\u6574\u6570)<=n<=N-1\u306e\u5834\u5408\u3001N=an+a=a(n+1)<=>n=N/a-1\u3068\u3067\u304d\u308b\u306e\u3067\u3001 **N\u306e\u7d04\u6570a\u3092\u5217\u6319\u30571\u3092\u5f15\u3051\u3070\u826f\u3044**\n- \u3068\u601d\u3063\u305f\u306e\u3067\u3059\u304c\u30012=6/2-1\u3092\u6355\u6349\u3057\u3066\u3057\u307e\u3046\u554f\u984c\u304c\u51fa\u305f\u306e\u3067\u4eca\u56de\u306f\u3053\u3061\u3089\u3082palindrome\u5224\u5b9a\u3057\u307e\u3059--;\n\n|Language|Validator C++(Text)|Validator Ruby(HTTP)|\n|:--|:--|:--|\n|C++|0.02s|0.22s|\n|Ruby|**0.06s**|0.26s|\n\n0.2\u79d2\u306f\u934b\u8c37\u3055\u3093\u306e\u30b5\u30fc\u30d0\u30fc\u304b\u3089HTML\u3092\u62fe\u3063\u3066\u89e3\u6790\u3059\u308b\u6642\u9593\u3067\u3059\u3002\n\u304a\u305d\u3089\u304f0.02s\u306ffork/execl\u306b\u8981\u3059\u308b\u6642\u9593\u3068\u898b\u3066\u826f\u3044\u3068\u601d\u308f\u308c\u307e\u3059\u3002\n\n> clang -O2 hena17pre.c;echo 999999999|time ./a.out # 4.83s\n> clang++ -O2 hena17pre_fast.cpp;echo 999999999|time ./a.out # 0.00s\n\n```cpp:hena17pre_fast.cpp\n//http://qiita.com/Nabetani/items/dabe8ec57e0313229552\n//http://nabetani.sakura.ne.jp/hena/ord17scheherazade/\n#include <deque>\n#include <cstdio>\n#include <cmath>\nbool palindrome(int n,int b){\n\tint n0=n,n1=0;\n\tfor(;n0;n0/=b)n1=n1*b+n0%b;\n\treturn n1==n;\n}\nint main(){\n\tint n,i;\n\tfor(;~scanf(\"%d\",&n);){\n\t\tif(n<3)puts(\"-\");\n\t\telse{\n\t\t\tstd::deque<int> result;\n\t\t\tfor(i=sqrt(n-1);i>1;i--){\n\t\t\t\tif(palindrome(n,(n-1)/i))result.push_back((n-1)/i);\n\t\t\t\tif((n-1)/i!=i&&palindrome(n,i))result.push_front(i); // n-1 might be a square number\n\t\t\t}\n\t\t\tfor(i=0;i<result.size();i++)printf(\"%d,\",result[i]);\n\t\t\tprintf(\"%d\\n\",n-1);\n\t\t}\n\t\tfflush(stdout);\n\t}\n}\n```\n\n```rb:hena17pre_fast.rb\n#!/usr/bin/env ruby\n#http://qiita.com/Nabetani/items/dabe8ec57e0313229552\n#http://nabetani.sakura.ne.jp/hena/ord17scheherazade/\nSTDOUT.sync=true\nclass Integer\n\tdef palindrome?(b)\n\t\tn0=self\n\t\tn1=0\n\t\twhile n0>0\n\t\t\tn1=n1*b+n0%b\n\t\t\tn0/=b\n\t\tend\n\t\tn1==self\n\tend\nend\nwhile gets\n\tn=$_.to_i\n\tif n<3 then puts '-';next end\n\tresult=[]\n\tMath.sqrt(n-1).to_i.downto(2).each{|i|\n\t\tresult.push((n-1)/i) if n.palindrome?((n-1)/i)\n\t\tresult.unshift(i) if (n-1)/i!=i&&n.palindrome?(i) # n-1 might be a square number\n\t}\n\tputs (result+[n-1])*','\nend\n```\n"}