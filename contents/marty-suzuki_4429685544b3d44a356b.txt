{"context": " More than 1 year has passed since last update.\n\n\u307e\u305a\u59cb\u3081\u306b\nUITableView\u3067section\u306e\u6570\u304c\u53ef\u5909\u306a\u30ec\u30a4\u30a2\u30a6\u30c8\u3092\u884c\u3046\u5834\u5408\u306b\u3001DataSource\u306e\u5b9f\u88c5\u304cif\u6587\u3084switch-case\u6587\u306e\u5206\u5c90\u3067\u30b3\u30fc\u30c9\u304c\u898b\u306b\u304f\u304f\u306a\u308a\u304c\u3061\u306a\u3046\u3048\u306b\u3001section\u306e\u756a\u53f7\u3092\u610f\u8b58\u3057\u305f\u5b9f\u88c5\u3092\u3057\u306a\u3051\u308c\u3070\u306a\u3089\u306a\u304f\u306a\u3063\u3066\u3057\u307e\u3044\u307e\u3059\u3002\n\u305d\u306e\u554f\u984c\u70b9\u3092\u6539\u5584\u3067\u304d\u308b\u5b9f\u88c5\u65b9\u6cd5\u3092\u7d39\u4ecb\u3057\u305f\u3044\u3068\u601d\u3044\u307e\u3059\u3002\n\n\u30d7\u30ed\u30d5\u30a3\u30fc\u30eb\u753b\u9762\u306e\u30ec\u30a4\u30a2\u30a6\u30c8\n\u4ee5\u4e0b\u306e\u30b9\u30af\u30ea\u30fc\u30f3\u30b7\u30e7\u30c3\u30c8\u306e\u3088\u3046\u306a\u753b\u9762\u3092\u5b9f\u88c5\u3059\u308b\u3068\u3057\u307e\u3059\u3002\n\n\n\u30bb\u30af\u30b7\u30e7\u30f30... \u30e6\u30fc\u30b6\u30fc\u306e\u30d7\u30ed\u30d5\u30a3\u30fc\u30eb\u306eView\n\n\u30bb\u30af\u30b7\u30e7\u30f31... \u30d5\u30a9\u30ed\u30fc\u3057\u3066\u3044\u308b\u30e6\u30fc\u30b6\u30fc\u306e\u4e00\u89a7\n\u30bb\u30af\u30b7\u30e7\u30f32... \u30d5\u30a9\u30ed\u30ef\u30fc\u306e\u4e00\u89a7\n\n\u305f\u3060\u3057\u30d5\u30a9\u30ed\u30fc\u3057\u3066\u3044\u308b\u30e6\u30fc\u30b6\u30fc\u306e\u4eba\u6570\u304c0\u4eba\u306e\u3068\u304d\u3001\u307e\u305f\u306f\u30d5\u30a9\u30ed\u30ef\u30fc\u306e\u4eba\u6570\u304c0\u4eba\u306e\u3068\u304d\u306b\u306f\u305d\u308c\u305e\u308c\u306e\u30bb\u30af\u30b7\u30e7\u30f3\u304c\u8868\u793a\u3055\u308c\u306a\u3044\u3082\u306e\u3068\u3057\u307e\u3059\u3002\n\u305d\u306e\u305f\u3081\u306b\u30bb\u30af\u30b7\u30e7\u30f3\u306e\u756a\u53f7\u306f\u6570\u5024\u306b\u3088\u3063\u3066\u53ef\u5909\u3068\u306a\u308a\u307e\u3059\u3002\n\nLayoutManager\u306e\u5b9f\u88c5\n\u307e\u305a\u3001\u30ec\u30a4\u30a2\u30a6\u30c8\u306e\u8981\u7d20\u3092\u3042\u3052\u3066\u3044\u307e\u3059\u3002\n\n\u30d7\u30ed\u30d5\u30a3\u30fc\u30eb\n\u30d5\u30a9\u30ed\u30fc\u3057\u3066\u3044\u308b\u30e6\u30fc\u30b6\u30fc\u306e\u4e00\u89a7\n\u30d5\u30a9\u30ed\u30ef\u30fc\u306e\u4e00\u89a7\nUnknown\n\nUnknown\u306f\u60f3\u5b9a\u3057\u3066\u3044\u306a\u3044\u30bb\u30af\u30b7\u30e7\u30f3\u756a\u53f7\u304c\u304d\u305f\u3068\u304d\u7528\u306b\u6e96\u5099\u3057\u3066\u304a\u304d\u307e\u3059\u3002\n\u6b21\u306b\u3001\u60f3\u5b9a\u3055\u308c\u308b\u30bb\u30af\u30b7\u30e7\u30f3\u306e\u30ec\u30a4\u30a2\u30a6\u30c8\u3092\u3042\u3052\u3066\u3044\u304d\u307e\u3059\u3002\n\n\u30d7\u30ed\u30d5\u30a3\u30fc\u30eb\u306e\u307f\n\u30d7\u30ed\u30d5\u30a3\u30fc\u30eb\u3068\u30d5\u30a9\u30ed\u30fc\u3057\u3066\u3044\u308b\u30e6\u30fc\u30b6\u30fc\u306e\u4e00\u89a7\n\u30d7\u30ed\u30d5\u30a3\u30fc\u30eb\u3068\u30d5\u30a9\u30ed\u30ef\u30fc\u306e\u4e00\u89a7\n\u3059\u3079\u3066\u8868\u793a\n\n\u4e0a\u8a18\u3092enum\u3092\u4f7f\u3063\u3066\u5b9f\u88c5\u3057\u3066\u3044\u304d\u307e\u3059\u3002\nclass ProfileViewSectionLayoutManager {\n    //MARK: - Inner Enums\n    enum LayoutType {\n        case Profile\n        case ProfileFollowing\n        case ProfileFollower\n        case ProfileFollowingFollower\n\n        init(followingCount: Int, followerCount: Int) {\n            if followingCount > 0 && followerCount > 0 {\n                self = .ProfileFollowingFollower\n            } else if followingCount > 0 && followerCount < 1 {\n                self = .ProfileFollowing\n            } else if followerCount > 0 && followingCount < 1 {\n                self = .ProfileFollower\n            } else {\n                self = .Profile\n            }\n        }\n    }\n\n    enum SectionType {\n        case Profile\n        case Following\n        case Follower\n        case Unknown\n    }\n\n    //MARK: - Static constants\n    private static let ProfileLayout: [SectionType] = [\n        .Profile\n    ]\n\n    private static let ProfileFollowingLayout: [SectionType] = [\n        .Profile, .Following\n    ]\n\n    private static let ProfileFollowerLayout: [SectionType] = [\n        .Profile, .Follower\n    ]\n\n    private static let ProfileFollowingFollowerLayout: [SectionType] = [\n        .Profile, .Following, .Follower\n    ]\n\n    private static let SectionLayoutList: [LayoutType: [SectionType]] = [\n        .Profile : ProfileLayout,\n        .ProfileFollowing : ProfileFollowingLayout,\n        .ProfileFollower : ProfileFollowerLayout,\n        .ProfileFollowingFollower : ProfileFollowingFollowerLayout\n    ]\n\n    //MARK: - Properties\n    private var layoutType: LayoutType = .Profile\n    var numberOfSections: Int {\n        return self.dynamicType.SectionLayoutList[layoutType]?[index].count ?? 0\n    }\n\n    subscript(index: Int) -> SectionType {\n        return self.dynamicType.SectionLayoutList[layoutType]?[index] ?? .Unknown\n    }\n\n    func setup(followingCount followingCount: Int, followerCount: Int) {\n        layoutType = LayoutType(followingCount: followingCount, followerCount: followerCount)\n    }\n}\n\nLayoutType\u306eenum\u306eInitializer\u5185\u3067followingCount\u3068followerCount\u306e\u72b6\u614b\u306b\u5408\u3063\u305f\u30ec\u30a4\u30a2\u30a6\u30c8\u3092\u81ea\u8eab\u306b\u5272\u308a\u5f53\u3066\u307e\u3059\u3002\nSectionType\u306eenum\u306fSection\u306e\u8981\u7d20\u3092\u793a\u3059\u305f\u3081\u306b\u3057\u3088\u3046\u3057\u307e\u3059\u3002\nLayoutManager\u306bStatic\u306a\u5b9a\u6570\u3068\u3057\u3066LayoutType\u306b\u5408\u308f\u305b\u305fList\u3092\u4fdd\u6301\u3055\u305b\u3001\u305d\u308c\u3089\u306eList\u3092LayoutType\u3092\u30ad\u30fc\u306b\u3057\u305fDictionary\u306b\u4fdd\u6301\u3055\u305b\u3066\u3044\u307e\u3059\u3002\nLayoutManager\u3067\u306fsubscript\u3092\u4f7f\u3063\u3066index\u306b\u3042\u3063\u305fSectionType\u3092\u8fd4\u3059\u5b9f\u88c5\u306b\u3057\u307e\u3059\u3002\n\nUITableViewDataSource\u3068UITableViewDelegate\u306e\u5b9f\u88c5\n\u307e\u305aviewDidLoad\u306a\u3069\u3067LayoutManager\u306esetup\u3092\u884c\u3063\u305f\u72b6\u614b\u306b\u3057\u3066\u304a\u304d\u307e\u3059\u3002\nextension ProfileViewController: UITableViewDataSource {\n    func numberOfSectionsInTableView(tableView: UITableView) -> Int {\n        return layoutManager.numberOfSections\n    }\n\n    func tableView(tableView: UITableView, numberOfRowsInSection section: Int) -> Int {\n        switch layoutManager[section] {\n            case .Profile: return 1\n            case .Following: return followingCount\n            case .Follower: return followerCount\n            case .Unknown: return 0\n        }\n    }\n\n    func tableView(tableView: UITableView, cellForRowAtIndexPath indexPath: NSIndexPath) -> UITableViewCell {\n        let reuseIdentifier: String\n        switch layoutManager[indexPath.section] {\n            case .Profile: reuseIdentifier = ProfileViewMainCell.className\n            case .Following,\n                 .Follower: reuseIdentifier = ProfileViewUserCell.className\n            case .Unknown: reuseIdentifier = UITableViewCell.className\n        }\n        return tableView.dequeueReusableCellWithIdentifier(reuseIdentifier)!\n    }\n\n    func tableView(tableView: UITableView, viewForHeaderInSection section: Int) -> UIView? {\n        let headerView: ProfileViewHeaderView\n        switch layoutManager[section] {\n            case .Profile,\n                 .Unknown:\n                return nil\n            case .Following:\n                headerView = followingHeaderView\n                headerView.textLabel.text = \"Following \\(followingCount)\"\n            case .Follower:\n                headerView = followerHeaderView\n                headerView.textLabel.text = \"Follower \\(followerCount)\"\n        }\n        return headerView\n    }\n}\n\nextension ProfileViewController: UITableViewDelegate {\n    func tableView(tableView: UITableView, heightForHeaderInSection section: Int) -> CGFloat {\n        switch layoutManager[section] {\n            case .Profile,\n                 .Unknown: return 0.01\n            case .Following,\n                 .Follower: return 60\n        }\n    }\n\n    func tableView(tableView: UITableView, heightForFooterInSection section: Int) -> CGFloat {\n        return 0.01\n    }\n\n    func tableView(tableView: UITableView, heightForRowAtIndexPath indexPath: NSIndexPath) -> CGFloat {\n        switch layoutManager[indexPath.section] {\n            case .Profile: return 248\n            case .Following,\n                 .Follower: return 80\n            case .Unknown: return 0\n        }\n    }\n}\n\n\u672c\u6765\u3001section\u3084indexPath.section\u3067\u5206\u5c90\u3092\u66f8\u304b\u306a\u3051\u308c\u3070\u306a\u3089\u306a\u3044\u90e8\u5206\u304cLayoutManager\u306esubscript\u306b\u305d\u308c\u3089\u3092\u6e21\u3059\u3053\u3068\u3067\u3001\u72b6\u614b\u306b\u5408\u3063\u305fenum\u304c\u8fd4\u3055\u308c\u308b\u306e\u3067switch-case\u6587\u3067\u8981\u7d20\u306b\u3042\u3063\u305f\u51e6\u7406\u3092\u3059\u308b\u3060\u3051\u3067\u3088\u304f\u306a\u308a\u307e\u3059\u3002\n\n\u307e\u3068\u3081\n\n\nsection\u3092\u610f\u8b58\u3057\u305f\u5b9f\u88c5\u3067\u306f\u306a\u304f\u3001enum\u3092\u4f7f\u3063\u3066\u5fc5\u8981\u306a\u8981\u7d20\u306b\u5bfe\u3059\u308b\u30ec\u30a4\u30a2\u30a6\u30c8\u3068\u3044\u3046\u898b\u3048\u65b9\u306e\u5b9f\u88c5\u306b\u3059\u308b\n\nsection\u306b\u3088\u308b\u5206\u5c90\u306a\u3069\u306fLayoutManager\u306b\u5185\u5305\u3059\u308b\n\n\n\u6700\u5f8c\u306b\n\u8fd1\u65e5\u3001\u3053\u306e\u8a18\u4e8b\u306e\u30b5\u30f3\u30d7\u30eb\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u3092Github\u3067\u516c\u958b\u4e88\u5b9a\u3067\u3059\u3002\n\n\u8ffd\u8a18\uff082015/12/13\uff09\n\u4e0b\u8a18\u306eLayoutManager\u306f\u4ee5\u524d\u306e\u5b9f\u88c5\u306b\u306a\u308a\u307e\u3059\u3002\nSectionType\u306eInitializer\u5185\u3067index\u3068layoutType\u304b\u3089\u81ea\u8eab\u3092\u5272\u308a\u5f53\u3066\u308b\u3068\u3044\u3046\u5f62\u306b\u3057\u3066\u3044\u305f\u306e\u3067\u3059\u304c\u3001LayoutManager\u81ea\u8eab\u306bStatic\u306a\u5b9a\u6570\u3068\u3057\u3066layout\u3092\u6301\u305f\u305b\u3066\u3001subscript\u304b\u3089\u306f\u305d\u306elayout\u3092\u8fd4\u3059\u3068\u3044\u3046\u5f62\u306b\u5909\u66f4\u3057\u307e\u3057\u305f\u3002\n\u3053\u306e\u5b9f\u88c5\u306b\u3057\u305f\u3053\u3068\u306b\u3088\u3063\u3066\u3001sectionTypes: [SectionType]\u306eproperty\u306f\u4e0d\u8981\u3068\u306a\u308a\u307e\u3057\u305f\u3002\nclass ProfileViewSectionLayoutManager {\n    //MARK: - Inner Enums\n    enum LayoutType {\n        case Profile\n        case ProfileFollowing\n        case ProfileFollower\n        case ProfileFollowingFollower\n\n        var numberOfSection: Int {\n            switch self {\n                case .Profile: return 1\n                case .ProfileFollowing,\n                     .ProfileFollower: return 2\n                case .ProfileFollowingFollower: return 3\n            }\n        }\n\n        init(followingCount: Int, followerCount: Int) {\n            if followingCount > 0 && followerCount > 0 {\n                self = .ProfileFollowingFollower\n            } else if followingCount > 0 && followerCount < 1 {\n                self = .ProfileFollowing\n            } else if followerCount > 0 && followingCount < 1 {\n                self = .ProfileFollower\n            } else {\n                self = .Profile\n            }\n        }\n    }\n\n    enum SectionType {\n        case Profile\n        case Following\n        case Follower\n        case Unknown\n\n        init(index: Int, layoutType: LayoutType) {\n            switch layoutType {\n            case .Profile:\n                self = SectionType.profile(index)\n\n            case .ProfileFollowing:\n                self = SectionType.profileFollowing(index)\n\n            case .ProfileFollower:\n                self = SectionType.profileFollower(index)\n\n            case .ProfileFollowingFollower:\n                self = SectionType.profileFollowingFollower(index)\n            }\n        }\n\n        private static func profile(index: Int) -> SectionType {\n            switch index {\n                case 0: return .Profile\n                default: return .Unknown\n            }\n        }\n\n        private static func profileFollowing(index: Int) -> SectionType {\n            switch index {\n                case 0: return .Profile\n                case 1: return .Following\n                default: return .Unknown\n            }\n        }\n\n        private static func profileFollower(index: Int) -> SectionType {\n            switch index {\n                case 0: return .Profile\n                case 1: return .Follower\n                default: return .Unknown\n            }\n        }\n\n        private static func profileFollowingFollower(index: Int) -> SectionType {\n            switch index {\n                case 0: return .Profile\n                case 1: return .Following\n                case 2: return .Follower\n                default: return .Unknown\n            }\n        }\n    }\n\n    //MARK: - Properties\n    private var sectionTypes: [Int : SectionType] = [:]\n    private var layoutType: LayoutType = .Profile\n    var numberOfSections: Int {\n        return layoutType.numberOfSection\n    }\n\n    subscript(index: Int) -> SectionType {\n        guard let sectionType = sectionTypes[index] else {\n            let st = SectionType(index: index, layoutType: layoutType)\n            sectionTypes[index] = st\n            return st\n        }\n        return sectionType\n    }\n\n    func setup(followingCount followingCount: Int, followerCount: Int) {\n        layoutType = LayoutType(followingCount: followingCount, followerCount: followerCount)\n    }\n\n    func reset() {\n        sectionTypes.removeAll()\n        layoutType = .Profile\n    }\n}\n\n## \u307e\u305a\u59cb\u3081\u306b\n\n`UITableView`\u3067`section`\u306e\u6570\u304c\u53ef\u5909\u306a\u30ec\u30a4\u30a2\u30a6\u30c8\u3092\u884c\u3046\u5834\u5408\u306b\u3001`DataSource`\u306e\u5b9f\u88c5\u304c`if`\u6587\u3084`switch-case`\u6587\u306e\u5206\u5c90\u3067\u30b3\u30fc\u30c9\u304c\u898b\u306b\u304f\u304f\u306a\u308a\u304c\u3061\u306a\u3046\u3048\u306b\u3001`section`\u306e\u756a\u53f7\u3092\u610f\u8b58\u3057\u305f\u5b9f\u88c5\u3092\u3057\u306a\u3051\u308c\u3070\u306a\u3089\u306a\u304f\u306a\u3063\u3066\u3057\u307e\u3044\u307e\u3059\u3002\n\u305d\u306e\u554f\u984c\u70b9\u3092\u6539\u5584\u3067\u304d\u308b\u5b9f\u88c5\u65b9\u6cd5\u3092\u7d39\u4ecb\u3057\u305f\u3044\u3068\u601d\u3044\u307e\u3059\u3002\n\n## \u30d7\u30ed\u30d5\u30a3\u30fc\u30eb\u753b\u9762\u306e\u30ec\u30a4\u30a2\u30a6\u30c8\n\n\u4ee5\u4e0b\u306e\u30b9\u30af\u30ea\u30fc\u30f3\u30b7\u30e7\u30c3\u30c8\u306e\u3088\u3046\u306a\u753b\u9762\u3092\u5b9f\u88c5\u3059\u308b\u3068\u3057\u307e\u3059\u3002\n<img width=\"300\" alt=\"ProfileView.png\" src=\"https://qiita-image-store.s3.amazonaws.com/0/60325/6e5af86c-c565-e179-50f9-d78f5598f687.png\">\n\n- \u30bb\u30af\u30b7\u30e7\u30f30... \u30e6\u30fc\u30b6\u30fc\u306e\u30d7\u30ed\u30d5\u30a3\u30fc\u30eb\u306e`View`\n- \u30bb\u30af\u30b7\u30e7\u30f31... \u30d5\u30a9\u30ed\u30fc\u3057\u3066\u3044\u308b\u30e6\u30fc\u30b6\u30fc\u306e\u4e00\u89a7\n- \u30bb\u30af\u30b7\u30e7\u30f32... \u30d5\u30a9\u30ed\u30ef\u30fc\u306e\u4e00\u89a7\n\n\u305f\u3060\u3057\u30d5\u30a9\u30ed\u30fc\u3057\u3066\u3044\u308b\u30e6\u30fc\u30b6\u30fc\u306e\u4eba\u6570\u304c0\u4eba\u306e\u3068\u304d\u3001\u307e\u305f\u306f\u30d5\u30a9\u30ed\u30ef\u30fc\u306e\u4eba\u6570\u304c0\u4eba\u306e\u3068\u304d\u306b\u306f\u305d\u308c\u305e\u308c\u306e\u30bb\u30af\u30b7\u30e7\u30f3\u304c\u8868\u793a\u3055\u308c\u306a\u3044\u3082\u306e\u3068\u3057\u307e\u3059\u3002\n\u305d\u306e\u305f\u3081\u306b\u30bb\u30af\u30b7\u30e7\u30f3\u306e\u756a\u53f7\u306f\u6570\u5024\u306b\u3088\u3063\u3066\u53ef\u5909\u3068\u306a\u308a\u307e\u3059\u3002\n\n## LayoutManager\u306e\u5b9f\u88c5\n\n\u307e\u305a\u3001\u30ec\u30a4\u30a2\u30a6\u30c8\u306e\u8981\u7d20\u3092\u3042\u3052\u3066\u3044\u307e\u3059\u3002\n\n- \u30d7\u30ed\u30d5\u30a3\u30fc\u30eb\n- \u30d5\u30a9\u30ed\u30fc\u3057\u3066\u3044\u308b\u30e6\u30fc\u30b6\u30fc\u306e\u4e00\u89a7\n- \u30d5\u30a9\u30ed\u30ef\u30fc\u306e\u4e00\u89a7\n- Unknown\n\n`Unknown`\u306f\u60f3\u5b9a\u3057\u3066\u3044\u306a\u3044\u30bb\u30af\u30b7\u30e7\u30f3\u756a\u53f7\u304c\u304d\u305f\u3068\u304d\u7528\u306b\u6e96\u5099\u3057\u3066\u304a\u304d\u307e\u3059\u3002\n\n\u6b21\u306b\u3001\u60f3\u5b9a\u3055\u308c\u308b\u30bb\u30af\u30b7\u30e7\u30f3\u306e\u30ec\u30a4\u30a2\u30a6\u30c8\u3092\u3042\u3052\u3066\u3044\u304d\u307e\u3059\u3002\n\n- \u30d7\u30ed\u30d5\u30a3\u30fc\u30eb\u306e\u307f\n- \u30d7\u30ed\u30d5\u30a3\u30fc\u30eb\u3068\u30d5\u30a9\u30ed\u30fc\u3057\u3066\u3044\u308b\u30e6\u30fc\u30b6\u30fc\u306e\u4e00\u89a7\n- \u30d7\u30ed\u30d5\u30a3\u30fc\u30eb\u3068\u30d5\u30a9\u30ed\u30ef\u30fc\u306e\u4e00\u89a7\n- \u3059\u3079\u3066\u8868\u793a\n\n\u4e0a\u8a18\u3092`enum`\u3092\u4f7f\u3063\u3066\u5b9f\u88c5\u3057\u3066\u3044\u304d\u307e\u3059\u3002\n\n```swift\nclass ProfileViewSectionLayoutManager {\n    //MARK: - Inner Enums\n    enum LayoutType {\n        case Profile\n        case ProfileFollowing\n        case ProfileFollower\n        case ProfileFollowingFollower\n        \n        init(followingCount: Int, followerCount: Int) {\n            if followingCount > 0 && followerCount > 0 {\n                self = .ProfileFollowingFollower\n            } else if followingCount > 0 && followerCount < 1 {\n                self = .ProfileFollowing\n            } else if followerCount > 0 && followingCount < 1 {\n                self = .ProfileFollower\n            } else {\n                self = .Profile\n            }\n        }\n    }\n    \n    enum SectionType {\n        case Profile\n        case Following\n        case Follower\n        case Unknown\n    }\n    \n    //MARK: - Static constants\n    private static let ProfileLayout: [SectionType] = [\n        .Profile\n    ]\n    \n    private static let ProfileFollowingLayout: [SectionType] = [\n        .Profile, .Following\n    ]\n    \n    private static let ProfileFollowerLayout: [SectionType] = [\n        .Profile, .Follower\n    ]\n    \n    private static let ProfileFollowingFollowerLayout: [SectionType] = [\n        .Profile, .Following, .Follower\n    ]\n    \n    private static let SectionLayoutList: [LayoutType: [SectionType]] = [\n        .Profile : ProfileLayout,\n        .ProfileFollowing : ProfileFollowingLayout,\n        .ProfileFollower : ProfileFollowerLayout,\n        .ProfileFollowingFollower : ProfileFollowingFollowerLayout\n    ]\n    \n    //MARK: - Properties\n    private var layoutType: LayoutType = .Profile\n    var numberOfSections: Int {\n        return self.dynamicType.SectionLayoutList[layoutType]?[index].count ?? 0\n    }\n    \n    subscript(index: Int) -> SectionType {\n        return self.dynamicType.SectionLayoutList[layoutType]?[index] ?? .Unknown\n    }\n    \n    func setup(followingCount followingCount: Int, followerCount: Int) {\n        layoutType = LayoutType(followingCount: followingCount, followerCount: followerCount)\n    }\n}\n```\n\n`LayoutType`\u306e`enum`\u306e`Initializer`\u5185\u3067`followingCount`\u3068`followerCount`\u306e\u72b6\u614b\u306b\u5408\u3063\u305f\u30ec\u30a4\u30a2\u30a6\u30c8\u3092\u81ea\u8eab\u306b\u5272\u308a\u5f53\u3066\u307e\u3059\u3002\n`SectionType`\u306e`enum`\u306f`Section`\u306e\u8981\u7d20\u3092\u793a\u3059\u305f\u3081\u306b\u3057\u3088\u3046\u3057\u307e\u3059\u3002\n`LayoutManager`\u306b`Static`\u306a\u5b9a\u6570\u3068\u3057\u3066`LayoutType`\u306b\u5408\u308f\u305b\u305f`List`\u3092\u4fdd\u6301\u3055\u305b\u3001\u305d\u308c\u3089\u306e`List`\u3092`LayoutType`\u3092\u30ad\u30fc\u306b\u3057\u305f`Dictionary`\u306b\u4fdd\u6301\u3055\u305b\u3066\u3044\u307e\u3059\u3002\n`LayoutManager`\u3067\u306f`subscript`\u3092\u4f7f\u3063\u3066`index`\u306b\u3042\u3063\u305f`SectionType`\u3092\u8fd4\u3059\u5b9f\u88c5\u306b\u3057\u307e\u3059\u3002\n\n## UITableViewDataSource\u3068UITableViewDelegate\u306e\u5b9f\u88c5\n\n\u307e\u305a`viewDidLoad`\u306a\u3069\u3067`LayoutManager`\u306e`setup`\u3092\u884c\u3063\u305f\u72b6\u614b\u306b\u3057\u3066\u304a\u304d\u307e\u3059\u3002\n\n```swift\nextension ProfileViewController: UITableViewDataSource {\n    func numberOfSectionsInTableView(tableView: UITableView) -> Int {\n        return layoutManager.numberOfSections\n    }\n    \n    func tableView(tableView: UITableView, numberOfRowsInSection section: Int) -> Int {\n        switch layoutManager[section] {\n            case .Profile: return 1\n            case .Following: return followingCount\n            case .Follower: return followerCount\n            case .Unknown: return 0\n        }\n    }\n    \n    func tableView(tableView: UITableView, cellForRowAtIndexPath indexPath: NSIndexPath) -> UITableViewCell {\n        let reuseIdentifier: String\n        switch layoutManager[indexPath.section] {\n            case .Profile: reuseIdentifier = ProfileViewMainCell.className\n            case .Following,\n                 .Follower: reuseIdentifier = ProfileViewUserCell.className\n            case .Unknown: reuseIdentifier = UITableViewCell.className\n        }\n        return tableView.dequeueReusableCellWithIdentifier(reuseIdentifier)!\n    }\n    \n    func tableView(tableView: UITableView, viewForHeaderInSection section: Int) -> UIView? {\n        let headerView: ProfileViewHeaderView\n        switch layoutManager[section] {\n            case .Profile,\n                 .Unknown:\n                return nil\n            case .Following:\n                headerView = followingHeaderView\n                headerView.textLabel.text = \"Following \\(followingCount)\"\n            case .Follower:\n                headerView = followerHeaderView\n                headerView.textLabel.text = \"Follower \\(followerCount)\"\n        }\n        return headerView\n    }\n}\n\nextension ProfileViewController: UITableViewDelegate {\n    func tableView(tableView: UITableView, heightForHeaderInSection section: Int) -> CGFloat {\n        switch layoutManager[section] {\n            case .Profile,\n                 .Unknown: return 0.01\n            case .Following,\n                 .Follower: return 60\n        }\n    }\n    \n    func tableView(tableView: UITableView, heightForFooterInSection section: Int) -> CGFloat {\n        return 0.01\n    }\n    \n    func tableView(tableView: UITableView, heightForRowAtIndexPath indexPath: NSIndexPath) -> CGFloat {\n        switch layoutManager[indexPath.section] {\n            case .Profile: return 248\n            case .Following,\n                 .Follower: return 80\n            case .Unknown: return 0\n        }\n    }\n}\n```\n\n\u672c\u6765\u3001`section`\u3084`indexPath.section`\u3067\u5206\u5c90\u3092\u66f8\u304b\u306a\u3051\u308c\u3070\u306a\u3089\u306a\u3044\u90e8\u5206\u304c`LayoutManager`\u306e`subscript`\u306b\u305d\u308c\u3089\u3092\u6e21\u3059\u3053\u3068\u3067\u3001\u72b6\u614b\u306b\u5408\u3063\u305f`enum`\u304c\u8fd4\u3055\u308c\u308b\u306e\u3067`switch-case`\u6587\u3067\u8981\u7d20\u306b\u3042\u3063\u305f\u51e6\u7406\u3092\u3059\u308b\u3060\u3051\u3067\u3088\u304f\u306a\u308a\u307e\u3059\u3002\n\n## \u307e\u3068\u3081\n\n- `section`\u3092\u610f\u8b58\u3057\u305f\u5b9f\u88c5\u3067\u306f\u306a\u304f\u3001`enum`\u3092\u4f7f\u3063\u3066\u5fc5\u8981\u306a\u8981\u7d20\u306b\u5bfe\u3059\u308b\u30ec\u30a4\u30a2\u30a6\u30c8\u3068\u3044\u3046\u898b\u3048\u65b9\u306e\u5b9f\u88c5\u306b\u3059\u308b\n- `section`\u306b\u3088\u308b\u5206\u5c90\u306a\u3069\u306f`LayoutManager`\u306b\u5185\u5305\u3059\u308b\n\n##  \u6700\u5f8c\u306b\n\n\u8fd1\u65e5\u3001\u3053\u306e\u8a18\u4e8b\u306e\u30b5\u30f3\u30d7\u30eb\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u3092[Github](https://github.com/szk-atmosphere)\u3067\u516c\u958b\u4e88\u5b9a\u3067\u3059\u3002\n\n\n## \u8ffd\u8a18\uff082015/12/13\uff09\n\n\u4e0b\u8a18\u306e`LayoutManager`\u306f\u4ee5\u524d\u306e\u5b9f\u88c5\u306b\u306a\u308a\u307e\u3059\u3002\n`SectionType`\u306e`Initializer`\u5185\u3067`index`\u3068`layoutType`\u304b\u3089\u81ea\u8eab\u3092\u5272\u308a\u5f53\u3066\u308b\u3068\u3044\u3046\u5f62\u306b\u3057\u3066\u3044\u305f\u306e\u3067\u3059\u304c\u3001`LayoutManager`\u81ea\u8eab\u306b`Static`\u306a\u5b9a\u6570\u3068\u3057\u3066layout\u3092\u6301\u305f\u305b\u3066\u3001`subscript`\u304b\u3089\u306f\u305d\u306elayout\u3092\u8fd4\u3059\u3068\u3044\u3046\u5f62\u306b\u5909\u66f4\u3057\u307e\u3057\u305f\u3002\n\u3053\u306e\u5b9f\u88c5\u306b\u3057\u305f\u3053\u3068\u306b\u3088\u3063\u3066\u3001`sectionTypes: [SectionType]`\u306e`property`\u306f\u4e0d\u8981\u3068\u306a\u308a\u307e\u3057\u305f\u3002\n\n```swift\nclass ProfileViewSectionLayoutManager {\n    //MARK: - Inner Enums\n    enum LayoutType {\n        case Profile\n        case ProfileFollowing\n        case ProfileFollower\n        case ProfileFollowingFollower\n        \n        var numberOfSection: Int {\n            switch self {\n                case .Profile: return 1\n                case .ProfileFollowing,\n                     .ProfileFollower: return 2\n                case .ProfileFollowingFollower: return 3\n            }\n        }\n        \n        init(followingCount: Int, followerCount: Int) {\n            if followingCount > 0 && followerCount > 0 {\n                self = .ProfileFollowingFollower\n            } else if followingCount > 0 && followerCount < 1 {\n                self = .ProfileFollowing\n            } else if followerCount > 0 && followingCount < 1 {\n                self = .ProfileFollower\n            } else {\n                self = .Profile\n            }\n        }\n    }\n    \n    enum SectionType {\n        case Profile\n        case Following\n        case Follower\n        case Unknown\n        \n        init(index: Int, layoutType: LayoutType) {\n            switch layoutType {\n            case .Profile:\n                self = SectionType.profile(index)\n                \n            case .ProfileFollowing:\n                self = SectionType.profileFollowing(index)\n                \n            case .ProfileFollower:\n                self = SectionType.profileFollower(index)\n                \n            case .ProfileFollowingFollower:\n                self = SectionType.profileFollowingFollower(index)\n            }\n        }\n        \n        private static func profile(index: Int) -> SectionType {\n            switch index {\n                case 0: return .Profile\n                default: return .Unknown\n            }\n        }\n        \n        private static func profileFollowing(index: Int) -> SectionType {\n            switch index {\n                case 0: return .Profile\n                case 1: return .Following\n                default: return .Unknown\n            }\n        }\n        \n        private static func profileFollower(index: Int) -> SectionType {\n            switch index {\n                case 0: return .Profile\n                case 1: return .Follower\n                default: return .Unknown\n            }\n        }\n        \n        private static func profileFollowingFollower(index: Int) -> SectionType {\n            switch index {\n                case 0: return .Profile\n                case 1: return .Following\n                case 2: return .Follower\n                default: return .Unknown\n            }\n        }\n    }\n\n    //MARK: - Properties\n    private var sectionTypes: [Int : SectionType] = [:]\n    private var layoutType: LayoutType = .Profile\n    var numberOfSections: Int {\n        return layoutType.numberOfSection\n    }\n    \n    subscript(index: Int) -> SectionType {\n        guard let sectionType = sectionTypes[index] else {\n            let st = SectionType(index: index, layoutType: layoutType)\n            sectionTypes[index] = st\n            return st\n        }\n        return sectionType\n    }\n    \n    func setup(followingCount followingCount: Int, followerCount: Int) {\n        layoutType = LayoutType(followingCount: followingCount, followerCount: followerCount)\n    }\n\n    func reset() {\n        sectionTypes.removeAll()\n        layoutType = .Profile\n    }\n}\n```\n", "tags": ["iOS", "Swift", "UITableView", "\u30c7\u30b6\u30a4\u30f3\u30d1\u30bf\u30fc\u30f3"]}