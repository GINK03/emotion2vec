{"context": "\u305f\u3060\u306e\u5065\u5fd8\u9332\u3002\nbuild.sbt \u306b\u4ee5\u4e0b\u3092\u8ffd\u52a0\u3002\nscalacOptions in Global += \"-language:experimental.macros\"\n\nlibraryDependencies += \"org.scala-lang\" % \"scala-reflect\" % scalaVersion.value\n\n\u4ee5\u4e0b\u307f\u305f\u3044\u306a\u611f\u3058\u3067\u66f8\u304f\u3002\u6e96\u30af\u30aa\u30fc\u30c8\u3067\u66f8\u304fprintln\u30de\u30af\u30ed\u306f\u3053\u3093\u306a\u611f\u3058\u3002\nimport language.experimental.macros\nimport scala.reflect.macros.whitebox.Context\n\nobject PrintMacro {\n  def p(msg: String): Unit = macro impl\n\n  def impl(c: Context)(msg: c.Expr[String]) = {\n    import c.universe._\n    q\"\"\"\n        println(${msg})\n      \"\"\"\n  }\n}\n\n\u3068\u304b\u3001\u5909\u6570\u540d\u30c7\u30d0\u30c3\u30b0\u30de\u30af\u30ed\u3068\u304b\u4f5c\u308b\u3068\u304d\u306f\u3001\u69cb\u6587\u6728\u4f5c\u308c\u308breify/splice\u304c\u4fbf\u5229\u3002\nimport language.experimental.macros\nimport scala.reflect.macros.whitebox.Context\n\nobject DebugMacro {\n  def debug(param: Any): Unit = macro debug_impl\n\n  def debug_impl(c: Context)(param: c.Expr[Any]): c.Expr[Unit] = {\n    import c.universe._\n    val paramRep = show(param.tree)\n    val paramRepTree = Literal(Constant(paramRep))\n    val paramRepExpr = c.Expr[String](paramRepTree)\n    reify { println(paramRepExpr.splice + \" = \" + param.splice) }\n  }\n}\n\n\u6587\u5b57\u5217\u3067\u30d7\u30ed\u30d1\u30c6\u30a3\u30a2\u30af\u30bb\u30b9\u3059\u308b\u30de\u30af\u30ed\u3068\u304b\u306f\u3053\u3093\u306a\u611f\u3058\u3002\nimport language.experimental.macros\nimport scala.reflect.macros.whitebox.Context\n\nobject AccesserMacro {\n  def accesser(obj: Any, property: String): Any = macro impl\n\n  def impl(c: Context)(obj: c.Expr[Any], property: c.Expr[String]) = {\n    import c.universe._\n    val Expr(Literal(Constant(propString: String))) =  property\n    Select(obj.tree, TermName(propString))\n  }\n}\n\nDef Macro\u306e\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u306b\u3082\u66f8\u3044\u3066\u3042\u308b\u3051\u3069\u30b1\u30fc\u30b9\u30af\u30e9\u30b9\u306e\u69cb\u9020\u5316\u4ee3\u5165\u4f7f\u3046\u3068\u4fbf\u5229\u3002\n\u8a73\u3057\u3044\u30de\u30af\u30ed\u3084\u308a\u65b9\u306f\u3001\nhttp://docs.scala-lang.org/ja/overviews/macros/overview\n\u3092\u898b\u3064\u3064ScalaDoc\u30b3\u30e1\u30f3\u30c8\u8aad\u3080\u306e\u304c\u826f\u3055\u305d\u3046\u3002\nStackOverFlow\u306b\u30de\u30af\u30ed\u8077\u4eba\u304c\u6ca2\u5c71\u3044\u308b\u306e\u3067\u691c\u7d22\u3059\u308b\u3068\u52c9\u5f37\u306b\u306a\u308b\u3002\nhttp://stackoverflow.com/search?tab=votes&q=Scala%20macro\n2.11\u3067whitebox\u30de\u30af\u30ed\u3068blackbox\u30de\u30af\u30ed\u3068\u3044\u3046\u306e\u304c2.11\u3067\u5206\u304b\u308c\u3066\u3044\u305f\u306e\u3067\u6ce8\u610f\u3002\nhttp://docs.scala-lang.org/ja/overviews/macros/blackbox-whitebox\n\u305f\u3060\u306e\u5065\u5fd8\u9332\u3002\n\nbuild.sbt \u306b\u4ee5\u4e0b\u3092\u8ffd\u52a0\u3002\n\n```\nscalacOptions in Global += \"-language:experimental.macros\"\n\nlibraryDependencies += \"org.scala-lang\" % \"scala-reflect\" % scalaVersion.value\n```\n\n\u4ee5\u4e0b\u307f\u305f\u3044\u306a\u611f\u3058\u3067\u66f8\u304f\u3002\u6e96\u30af\u30aa\u30fc\u30c8\u3067\u66f8\u304fprintln\u30de\u30af\u30ed\u306f\u3053\u3093\u306a\u611f\u3058\u3002\n\n```scala\nimport language.experimental.macros\nimport scala.reflect.macros.whitebox.Context\n\nobject PrintMacro {\n  def p(msg: String): Unit = macro impl\n\n  def impl(c: Context)(msg: c.Expr[String]) = {\n    import c.universe._\n    q\"\"\"\n        println(${msg})\n      \"\"\"\n  }\n}\n```\n\n\u3068\u304b\u3001\u5909\u6570\u540d\u30c7\u30d0\u30c3\u30b0\u30de\u30af\u30ed\u3068\u304b\u4f5c\u308b\u3068\u304d\u306f\u3001\u69cb\u6587\u6728\u4f5c\u308c\u308breify/splice\u304c\u4fbf\u5229\u3002\n\n```scala\nimport language.experimental.macros\nimport scala.reflect.macros.whitebox.Context\n\nobject DebugMacro {\n  def debug(param: Any): Unit = macro debug_impl\n\n  def debug_impl(c: Context)(param: c.Expr[Any]): c.Expr[Unit] = {\n    import c.universe._\n    val paramRep = show(param.tree)\n    val paramRepTree = Literal(Constant(paramRep))\n    val paramRepExpr = c.Expr[String](paramRepTree)\n    reify { println(paramRepExpr.splice + \" = \" + param.splice) }\n  }\n}\n```\n\n\u6587\u5b57\u5217\u3067\u30d7\u30ed\u30d1\u30c6\u30a3\u30a2\u30af\u30bb\u30b9\u3059\u308b\u30de\u30af\u30ed\u3068\u304b\u306f\u3053\u3093\u306a\u611f\u3058\u3002\n\n```scala\nimport language.experimental.macros\nimport scala.reflect.macros.whitebox.Context\n\nobject AccesserMacro {\n  def accesser(obj: Any, property: String): Any = macro impl\n\n  def impl(c: Context)(obj: c.Expr[Any], property: c.Expr[String]) = {\n    import c.universe._\n    val Expr(Literal(Constant(propString: String))) =  property\n    Select(obj.tree, TermName(propString))\n  }\n}\n```\n\nDef Macro\u306e\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u306b\u3082\u66f8\u3044\u3066\u3042\u308b\u3051\u3069\u30b1\u30fc\u30b9\u30af\u30e9\u30b9\u306e\u69cb\u9020\u5316\u4ee3\u5165\u4f7f\u3046\u3068\u4fbf\u5229\u3002\n\n\u8a73\u3057\u3044\u30de\u30af\u30ed\u3084\u308a\u65b9\u306f\u3001\nhttp://docs.scala-lang.org/ja/overviews/macros/overview\n\u3092\u898b\u3064\u3064ScalaDoc\u30b3\u30e1\u30f3\u30c8\u8aad\u3080\u306e\u304c\u826f\u3055\u305d\u3046\u3002\n\nStackOverFlow\u306b\u30de\u30af\u30ed\u8077\u4eba\u304c\u6ca2\u5c71\u3044\u308b\u306e\u3067\u691c\u7d22\u3059\u308b\u3068\u52c9\u5f37\u306b\u306a\u308b\u3002\nhttp://stackoverflow.com/search?tab=votes&q=Scala%20macro\n\n2.11\u3067whitebox\u30de\u30af\u30ed\u3068blackbox\u30de\u30af\u30ed\u3068\u3044\u3046\u306e\u304c2.11\u3067\u5206\u304b\u308c\u3066\u3044\u305f\u306e\u3067\u6ce8\u610f\u3002\nhttp://docs.scala-lang.org/ja/overviews/macros/blackbox-whitebox\n", "tags": ["Scala", "macro"]}