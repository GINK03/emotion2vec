{"context": " More than 1 year has passed since last update.\u4eca\u56de\u306f\u3001\u7b46\u8005\u306e\u8da3\u5473\u306b\u504f\u3063\u3066\u3044\u307e\u3059\u3002\n\n\u305d\u3082\u305d\u3082\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u6307\u5411\u306f\u3053\u3046\u3060\u3063\u305f\n\u4ee5\u4e0b\u306f\u3001Smalltalk \u3067\u306e\u771f\u507d\u5024\u306e\u5b9f\u88c5\u306e\u4e00\u90e8\u3067\u3059\u3002\ntrueAlternativeBlock \u3084 falseAlternativeBlock \u306f Perl 6 \u306a\u3089\u305d\u308c\u305e\u308c &true-alternative-block\u3001&false-alternative-block \u3068\u8868\u73fe\u3055\u308c\u308b\u3082\u306e\u3067\u3059\u3002\u305d\u3057\u3066\u3001trueAlternativeBlock value \u3068\u3044\u3046\u5f0f\u306f\u3001Perl 6 \u306a\u3089 &true-alternative-block() \u306b\u5f53\u305f\u308a\u307e\u3059\u3002^ \u306f return \u3067\u3059\u3002\nSmalltalk \u306b\u306f\u6761\u4ef6\u5206\u5c90\u306e\u305f\u3081\u306e\u69cb\u6587\u306f\u3042\u308a\u307e\u305b\u3093\u3002Smalltalk \u3067\u771f\u507d\u5024\u3092\u5f97\u308b\u5f0f\u3092\u8a55\u4fa1\u3059\u308b\u3068\u3001True \u304b False \u306e\u30b7\u30f3\u30b0\u30eb\u30c8\u30f3\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u304c\u8fd4\u308a\u307e\u3059\u3002\u3053\u308c\u3089\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u306f\u3001\u4ee5\u4e0b\u306b\u5b9a\u7fa9\u3055\u308c\u305f\u3088\u3046\u306b\u632f\u308b\u821e\u3044\u3001\u7d50\u679c\u7684\u306b\u6761\u4ef6\u5206\u5c90\u304c\u5b9f\u73fe\u3055\u308c\u307e\u3059\u3002\nTrue>>ifFalse: alternativeBlock\n    ^nil\n\nTrue>>ifFalse: falseAlternativeBlock ifTrue: trueAlternativeBlock\n    ^trueAlternativeBlock value\n\nTrue>>ifTrue: alternativeBlock\n    ^alternativeBlock value\n\nTrue>>ifTrue: trueAlternativeBlock ifFalse: falseAlternativeBlock\n    ^trueAlternativeBlock value\n\nTrue>>not\n    ^false\n\nFalse>>ifFalse: alternativeBlock\n    ^alternativeBlock value\n\nFalse>>ifFalse: falseAlternativeBlock ifTrue: trueAlternativeBlock\n    ^falseAlternativeBlock value\n\nFalse>>ifTrue: alternativeBlock\n    ^nil\n\nFalse>>ifTrue: trueAlternativeBlock ifFalse: falseAlternativeBlock\n    ^falseAlternativeBlock value\n\nFalse>>not\n    ^true\n\n\nPerl \u3082\u8ca0\u3051\u3066\u3044\u306a\u3044\n\u540c\u3058\u3053\u3068\u306f Perl \u3067 (Perl 5 \u3067\u3082)\u5b9f\u73fe\u3067\u304d\u307e\u3059\u3002Perl \u306b\u306f\u30af\u30ed\u30fc\u30b8\u30e3\u30fc\u304c\u3042\u308b\u304b\u3089\u3067\u3059\u3002\n\n\u771f\u30af\u30e9\u30b9 (T)\u3001\u507d\u30af\u30e9\u30b9 (F)\u3001\u4e21\u8005\u306e\u5b9a\u7fa9 (B.pm6)\n\nB.pm6\nuse v6;\n\nclass T { ... }\nclass F { ... }\n\nmy ($t, $f) = (T.new(), F.new());\n\nclass T\n{\n    my $._ = $t;\n\n    method _if_(:&t = { self; }, :&f = { self; })\n    {\n        &t();\n    }\n\n    method not() { return $f; }\n}\n\nclass F\n{\n    my $._ = $f;\n\n    method _if_(:&t = { self; }, :&f = { self; })\n    {\n        &f();\n    }\n\n    method not() { return $t; }\n}\n\n\n\n\u771f\u507d\u5024\u30af\u30e9\u30b9\u306e\u30c6\u30b9\u30c8\n\na.basic.t6\n#!/usr/bin/env perl6\n\nuse v6;\nuse B;\nuse Test;\nplan *;\n\nis T._._if_, T._;\nis T._._if_(:f({ 'ng' })), T._;\nis T._._if_(:t({ 'ok' })), 'ok';\nis T._._if_(:t({ 'ok' }), :f({ 'ng' })), 'ok';\n\nis F._._if_, F._;\nis F._._if_(:t({ 'ng' })), F._;\nis F._._if_(:f({ 'ok' })), 'ok';\nis F._._if_(:f({ 'ok' }), :t({ 'ng' })), 'ok';\n\n\n$ perl6 -I. a.basic.t6\nok 1 - \nok 2 - \nok 3 - \nok 4 - \nok 5 - \nok 6 - \nok 7 - \nok 8 - \n\n\n\u6574\u6570\u30af\u30e9\u30b9\n\nI.pm6\nuse v6;\nuse B;\n\nclass I;\n\nhas Int $.Int;\n\nmy $._0 = I.new(0);\nmy $._1 = I.new(1);\n\nmethod new($native)\n{\n    self.bless(*, :Int($native));\n}\n\nmethod pred()\n{\n    self.WHAT.new($.Int.pred);\n}\n\nmethod add(I $with)\n{\n    self.WHAT.new($.Int + $with.Int);\n}\n\nmethod times(I $by)\n{\n    self.WHAT.new($.Int * $by.Int);\n}\n\nmulti method equals(I $cmp)\n{\n    self.equals($cmp.Int);\n}\n\nmulti method equals(Int $cmp)\n{\n    ($.Int == $cmp ?? T !! F)._;\n}\n\n\n\n\u4f8b\u306b\u3088\u3063\u3066\u968e\u4e57\n\u3053\u308c\u3089\u304c\u672c\u5f53\u306b\u6a5f\u80fd\u3059\u308b\u304b\u3001\u304a\u306a\u3058\u307f\u306e I.factorial \u3092\u5b9a\u7fa9\u3057\u3066\u8a66\u3057\u3066\u307f\u307e\u3057\u3087\u3046\u3002I \u30af\u30e9\u30b9\u306b\u6b21\u3092\u8ffd\u52a0\u3057\u307e\u3059\u3002\nmethod factorial()\n{\n    my $one = I._1; # \u30ec\u30ad\u30b7\u30ab\u30eb\u30b9\u30b3\u30fc\u30d7\u306e\u30c7\u30e2\u3002\n    self.equals(0)\\\n        ._if_(\n            :t({ $one; }),\n            :f({ self.times(self.pred.factorial); })\n        )\n    ;\n}\n\n\n\u30c6\u30b9\u30c8\n\nb.factorial.t6\n#!/usr/bin/env perl6\n\nuse v6;\nuse I;\nuse B;\nuse Test;\nplan *;\n\nis I._0.factorial.equals(1), T._;\nis I._1.factorial.equals(I._1), T._;\nis I.new(2).factorial.equals(I.new(2)), T._;\nis I.new(4).factorial.Int, 24;\n\n\n$ perl6 -I. b.factorial.t6\nok 1 - \nok 2 - \nok 3 - \nok 4 - \n\n\u6b21\u56de\u306f\u3001\u4ee5\u4e0a\u306e\u30d7\u30ea\u30df\u30c6\u30a3\u30d6\u3092\u4f7f\u3063\u3066\u30eb\u30fc\u30d7\u3092\u5b9a\u7fa9\u3057\u3066\u307f\u307e\u3059\u3002\nhttps://github.com/x19290/2012advent.p6/tree/master/d.st-if\n\u4eca\u56de\u306f\u3001\u7b46\u8005\u306e\u8da3\u5473\u306b\u504f\u3063\u3066\u3044\u307e\u3059\u3002\n\n# \u305d\u3082\u305d\u3082\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u6307\u5411\u306f\u3053\u3046\u3060\u3063\u305f\n\n\u4ee5\u4e0b\u306f\u3001Smalltalk \u3067\u306e\u771f\u507d\u5024\u306e\u5b9f\u88c5\u306e\u4e00\u90e8\u3067\u3059\u3002\n\n`trueAlternativeBlock` \u3084 `falseAlternativeBlock` \u306f Perl 6 \u306a\u3089\u305d\u308c\u305e\u308c `&true-alternative-block`\u3001`&false-alternative-block` \u3068\u8868\u73fe\u3055\u308c\u308b\u3082\u306e\u3067\u3059\u3002\u305d\u3057\u3066\u3001`trueAlternativeBlock value` \u3068\u3044\u3046\u5f0f\u306f\u3001Perl 6 \u306a\u3089 `&true-alternative-block()` \u306b\u5f53\u305f\u308a\u307e\u3059\u3002`^` \u306f `return` \u3067\u3059\u3002\n\nSmalltalk \u306b\u306f\u6761\u4ef6\u5206\u5c90\u306e\u305f\u3081\u306e\u69cb\u6587\u306f\u3042\u308a\u307e\u305b\u3093\u3002Smalltalk \u3067\u771f\u507d\u5024\u3092\u5f97\u308b\u5f0f\u3092\u8a55\u4fa1\u3059\u308b\u3068\u3001`True` \u304b `False` \u306e\u30b7\u30f3\u30b0\u30eb\u30c8\u30f3\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u304c\u8fd4\u308a\u307e\u3059\u3002\u3053\u308c\u3089\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u306f\u3001\u4ee5\u4e0b\u306b\u5b9a\u7fa9\u3055\u308c\u305f\u3088\u3046\u306b\u632f\u308b\u821e\u3044\u3001\u7d50\u679c\u7684\u306b\u6761\u4ef6\u5206\u5c90\u304c\u5b9f\u73fe\u3055\u308c\u307e\u3059\u3002\n\n```smalltalk\nTrue>>ifFalse: alternativeBlock\n\t^nil\n```\n```smalltalk\nTrue>>ifFalse: falseAlternativeBlock ifTrue: trueAlternativeBlock\n\t^trueAlternativeBlock value\n```\n```smalltalk\nTrue>>ifTrue: alternativeBlock\n\t^alternativeBlock value\n```\n```smalltalk\nTrue>>ifTrue: trueAlternativeBlock ifFalse: falseAlternativeBlock\n\t^trueAlternativeBlock value\n```\n```smalltalk\nTrue>>not\n\t^false\n```\n```smalltalk\nFalse>>ifFalse: alternativeBlock\n\t^alternativeBlock value\n```\n```smalltalk\nFalse>>ifFalse: falseAlternativeBlock ifTrue: trueAlternativeBlock\n\t^falseAlternativeBlock value\n```\n```smalltalk\nFalse>>ifTrue: alternativeBlock\n\t^nil\n```\n```smalltalk\nFalse>>ifTrue: trueAlternativeBlock ifFalse: falseAlternativeBlock\n\t^falseAlternativeBlock value\n```\n```smalltalk\nFalse>>not\n\t^true\n```\n\n# Perl \u3082\u8ca0\u3051\u3066\u3044\u306a\u3044\n\n\u540c\u3058\u3053\u3068\u306f Perl \u3067 (Perl 5 \u3067\u3082)\u5b9f\u73fe\u3067\u304d\u307e\u3059\u3002Perl \u306b\u306f\u30af\u30ed\u30fc\u30b8\u30e3\u30fc\u304c\u3042\u308b\u304b\u3089\u3067\u3059\u3002\n\n## \u771f\u30af\u30e9\u30b9 (T)\u3001\u507d\u30af\u30e9\u30b9 (F)\u3001\u4e21\u8005\u306e\u5b9a\u7fa9 (B.pm6)\n\n```perl6:B.pm6\nuse v6;\n\nclass T { ... }\nclass F { ... }\n\nmy ($t, $f) = (T.new(), F.new());\n\nclass T\n{\n\tmy $._ = $t;\n\n\tmethod _if_(:&t = { self; }, :&f = { self; })\n\t{\n\t\t&t();\n\t}\n\n\tmethod not() { return $f; }\n}\n\nclass F\n{\n\tmy $._ = $f;\n\n\tmethod _if_(:&t = { self; }, :&f = { self; })\n\t{\n\t\t&f();\n\t}\n\n\tmethod not() { return $t; }\n}\n```\n\n## \u771f\u507d\u5024\u30af\u30e9\u30b9\u306e\u30c6\u30b9\u30c8\n\n```perl6:a.basic.t6\n#!/usr/bin/env perl6\n\nuse v6;\nuse B;\nuse Test;\nplan *;\n\nis T._._if_, T._;\nis T._._if_(:f({ 'ng' })), T._;\nis T._._if_(:t({ 'ok' })), 'ok';\nis T._._if_(:t({ 'ok' }), :f({ 'ng' })), 'ok';\n\nis F._._if_, F._;\nis F._._if_(:t({ 'ng' })), F._;\nis F._._if_(:f({ 'ok' })), 'ok';\nis F._._if_(:f({ 'ok' }), :t({ 'ng' })), 'ok';\n```\n\n```\n$ perl6 -I. a.basic.t6\nok 1 - \nok 2 - \nok 3 - \nok 4 - \nok 5 - \nok 6 - \nok 7 - \nok 8 - \n```\n\n## \u6574\u6570\u30af\u30e9\u30b9\n\n```perl6:I.pm6\nuse v6;\nuse B;\n\nclass I;\n\nhas Int $.Int;\n\nmy $._0 = I.new(0);\nmy $._1 = I.new(1);\n\nmethod new($native)\n{\n\tself.bless(*, :Int($native));\n}\n\nmethod pred()\n{\n\tself.WHAT.new($.Int.pred);\n}\n\nmethod add(I $with)\n{\n\tself.WHAT.new($.Int + $with.Int);\n}\n\nmethod times(I $by)\n{\n\tself.WHAT.new($.Int * $by.Int);\n}\n\nmulti method equals(I $cmp)\n{\n\tself.equals($cmp.Int);\n}\n\nmulti method equals(Int $cmp)\n{\n\t($.Int == $cmp ?? T !! F)._;\n}\n```\n\n# \u4f8b\u306b\u3088\u3063\u3066\u968e\u4e57\n\n\u3053\u308c\u3089\u304c\u672c\u5f53\u306b\u6a5f\u80fd\u3059\u308b\u304b\u3001\u304a\u306a\u3058\u307f\u306e I.factorial \u3092\u5b9a\u7fa9\u3057\u3066\u8a66\u3057\u3066\u307f\u307e\u3057\u3087\u3046\u3002I \u30af\u30e9\u30b9\u306b\u6b21\u3092\u8ffd\u52a0\u3057\u307e\u3059\u3002\n\n```perl6\nmethod factorial()\n{\n\tmy $one = I._1; # \u30ec\u30ad\u30b7\u30ab\u30eb\u30b9\u30b3\u30fc\u30d7\u306e\u30c7\u30e2\u3002\n\tself.equals(0)\\\n\t\t._if_(\n\t\t\t:t({ $one; }),\n\t\t\t:f({ self.times(self.pred.factorial); })\n\t\t)\n\t;\n}\n```\n\n## \u30c6\u30b9\u30c8\n\n```perl6:b.factorial.t6\n#!/usr/bin/env perl6\n\nuse v6;\nuse I;\nuse B;\nuse Test;\nplan *;\n\nis I._0.factorial.equals(1), T._;\nis I._1.factorial.equals(I._1), T._;\nis I.new(2).factorial.equals(I.new(2)), T._;\nis I.new(4).factorial.Int, 24;\n```\n\n```\n$ perl6 -I. b.factorial.t6\nok 1 - \nok 2 - \nok 3 - \nok 4 - \n```\n\n\u6b21\u56de\u306f\u3001\u4ee5\u4e0a\u306e\u30d7\u30ea\u30df\u30c6\u30a3\u30d6\u3092\u4f7f\u3063\u3066\u30eb\u30fc\u30d7\u3092\u5b9a\u7fa9\u3057\u3066\u307f\u307e\u3059\u3002\n\nhttps://github.com/x19290/2012advent.p6/tree/master/d.st-if", "tags": ["Perl6"]}