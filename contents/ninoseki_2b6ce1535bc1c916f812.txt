{"context": " More than 1 year has passed since last update.\u30de\u30a4\u30ca\u30f3\u30d0\u30fc\u306e\u8981\u4ef6\u3092\u6e80\u305f\u3057\u3066\u3044\u308b12\u6841\u306e\u6570\u5217\u3068\u3001\u8981\u4ef6\u3092\u6e80\u305f\u3057\u3066\u3044\u306a\u3044(\u691c\u67fb\u7528\u6587\u5b57\u5217\u304c\u8aa4\u3063\u3066\u3044\u308b)\u6570\u5217\u3092\u4f5c\u6210\u3057\u307e\u3057\u305f\u3002\n\u305d\u308c\u305e\u308c100\u4ef6\u3067\u3059\u3002Gist\u306b\u8f09\u305b\u3066\u3044\u308b\u306e\u3067\u3001\u3054\u81ea\u7531\u306b\u3069\u3046\u305e\u3002\n\n\u30de\u30a4\u30ca\u30f3\u30d0\u30fc(\u500b\u4eba\u756a\u53f7)\u306e\u6761\u4ef6\u3092\u6e80\u305f\u3057\u305f12\u6841\u306e\u6570\u5217\n\u30de\u30a4\u30ca\u30f3\u30d0\u30fc(\u500b\u4eba\u756a\u53f7)\u306e\u6761\u4ef6\u3092\u6e80\u305f\u3057\u3066\u3044\u306a\u3044(\u691c\u67fb\u7528\u6570\u5b57\u304c\u8aa4\u3063\u3066\u3044\u308b)12\u6841\u306e\u6570\u5217\n\n\n\u305d\u306e\u4ed6\n\u751f\u6210\u7528\u306e\u30b3\u30fc\u30c9\u306f\u3053\u3061\u3089\u3002\n\u6bb4\u308a\u66f8\u304d\u306a\u306e\u3067\u3042\u3057\u304b\u3089\u305a\u3002\nrequire 'set'\n\nclass MyNumber\n  def self.generate_valid_individual_number(n = 1)\n    generator = ValidMyNumberGenerator.new\n    generate(n, generator)\n  end\n\n  def self.generate_invalid_individual_number(n = 1)\n    generator = InvalidMyNumberGenerator.new\n    generate(n, generator)\n  end\n\n  def self.generate(n, generator)\n    numbers = Set.new\n    numbers << generator.individual_number while numbers.length < n\n\n    numbers.map(&:join)\n  end\n\n  class MyNumberGenerator\n    def base_individual_number\n      [].tap do |arr|\n        11.times { arr << random_digit }\n      end\n    end\n\n    def check_digit(digits)\n      remainder = digits.map.with_index do |p, idx|\n        idx = 11 - idx\n        # 1<=n<=6\u306e\u3068\u304d n+1, 7<=\uff4e<=11\u306e\u3068\u304d n-5\n        q = (idx <= 6) ? idx + 1 : idx - 5\n        p * q\n      end.inject(0, :+) % 11\n\n      case remainder\n      when 0, 1\n        0\n      else\n        11 - remainder\n      end\n    end\n\n    def random_digit\n      (0..9).to_a.sample\n    end\n  end\n\n  class ValidMyNumberGenerator < MyNumberGenerator\n    def individual_number\n      number = base_individual_number\n      number << check_digit(number)\n    end\n  end\n\n  class InvalidMyNumberGenerator < MyNumberGenerator\n    def individual_number\n      number = base_individual_number\n      cd = check_digit(number)\n\n      number << (0..9).to_a.reject { |n| n == cd }.sample\n    end\n  end\nend\n\nMyNumber.generate_invalid_individual_number(100).each { |n| puts n }\nputs '---'\nMyNumber.generate_valid_individual_number(100).each { |n| puts n }\n\n\n\u53c2\u8003\n\n\u756a\u53f7\u5236\u5ea6\u306b\u95a2\u3059\u308b Q&A(PDF)\n\u30de\u30a4\u30ca\u30f3\u30d0\u30fc\u306e\u30c1\u30a7\u30c3\u30af\u30c7\u30b8\u30c3\u30c8\u3092\u8a08\u7b97\u3059\u308b\n\n\u30de\u30a4\u30ca\u30f3\u30d0\u30fc\u306e\u8981\u4ef6\u3092\u6e80\u305f\u3057\u3066\u3044\u308b12\u6841\u306e\u6570\u5217\u3068\u3001\u8981\u4ef6\u3092\u6e80\u305f\u3057\u3066\u3044\u306a\u3044(\u691c\u67fb\u7528\u6587\u5b57\u5217\u304c\u8aa4\u3063\u3066\u3044\u308b)\u6570\u5217\u3092\u4f5c\u6210\u3057\u307e\u3057\u305f\u3002\n\u305d\u308c\u305e\u308c100\u4ef6\u3067\u3059\u3002Gist\u306b\u8f09\u305b\u3066\u3044\u308b\u306e\u3067\u3001\u3054\u81ea\u7531\u306b\u3069\u3046\u305e\u3002\n\n* [\u30de\u30a4\u30ca\u30f3\u30d0\u30fc(\u500b\u4eba\u756a\u53f7)\u306e\u6761\u4ef6\u3092\u6e80\u305f\u3057\u305f12\u6841\u306e\u6570\u5217](https://gist.github.com/ninoseki/a7e59bb74202a5252baf)\n* [\u30de\u30a4\u30ca\u30f3\u30d0\u30fc(\u500b\u4eba\u756a\u53f7)\u306e\u6761\u4ef6\u3092\u6e80\u305f\u3057\u3066\u3044\u306a\u3044(\u691c\u67fb\u7528\u6570\u5b57\u304c\u8aa4\u3063\u3066\u3044\u308b)12\u6841\u306e\u6570\u5217](https://gist.github.com/ninoseki/b179215570d7605ce03f)\n\n## \u305d\u306e\u4ed6\n\n\u751f\u6210\u7528\u306e\u30b3\u30fc\u30c9\u306f\u3053\u3061\u3089\u3002\n\u6bb4\u308a\u66f8\u304d\u306a\u306e\u3067\u3042\u3057\u304b\u3089\u305a\u3002\n\n```rb\nrequire 'set'\n\nclass MyNumber\n  def self.generate_valid_individual_number(n = 1)\n    generator = ValidMyNumberGenerator.new\n    generate(n, generator)\n  end\n\n  def self.generate_invalid_individual_number(n = 1)\n    generator = InvalidMyNumberGenerator.new\n    generate(n, generator)\n  end\n\n  def self.generate(n, generator)\n    numbers = Set.new\n    numbers << generator.individual_number while numbers.length < n\n\n    numbers.map(&:join)\n  end\n\n  class MyNumberGenerator\n    def base_individual_number\n      [].tap do |arr|\n        11.times { arr << random_digit }\n      end\n    end\n\n    def check_digit(digits)\n      remainder = digits.map.with_index do |p, idx|\n        idx = 11 - idx\n        # 1<=n<=6\u306e\u3068\u304d n+1, 7<=\uff4e<=11\u306e\u3068\u304d n-5\n        q = (idx <= 6) ? idx + 1 : idx - 5\n        p * q\n      end.inject(0, :+) % 11\n\n      case remainder\n      when 0, 1\n        0\n      else\n        11 - remainder\n      end\n    end\n\n    def random_digit\n      (0..9).to_a.sample\n    end\n  end\n\n  class ValidMyNumberGenerator < MyNumberGenerator\n    def individual_number\n      number = base_individual_number\n      number << check_digit(number)\n    end\n  end\n\n  class InvalidMyNumberGenerator < MyNumberGenerator\n    def individual_number\n      number = base_individual_number\n      cd = check_digit(number)\n\n      number << (0..9).to_a.reject { |n| n == cd }.sample\n    end\n  end\nend\n\nMyNumber.generate_invalid_individual_number(100).each { |n| puts n }\nputs '---'\nMyNumber.generate_valid_individual_number(100).each { |n| puts n }\n```\n\n## \u53c2\u8003\n\n* [\u756a\u53f7\u5236\u5ea6\u306b\u95a2\u3059\u308b Q&A(PDF)](https://www.j-lis.go.jp/data/open/cnt/3/1282/1/H2707_qa.pdf)\n* [\u30de\u30a4\u30ca\u30f3\u30d0\u30fc\u306e\u30c1\u30a7\u30c3\u30af\u30c7\u30b8\u30c3\u30c8\u3092\u8a08\u7b97\u3059\u308b](http://qiita.com/qube81/items/fa6ef94d3c8615b0ce64)\n", "tags": ["memo"]}