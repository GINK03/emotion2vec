{"context": "ICP\u8aad\u66f8\u5973\u5b50\u4f1a 2.3.2 (#26)\n\n2.3.2\n(define (variable? x) (symbol? x)) ;; \u5909\u6570\u304b\u3069\u3046\u304b\n(define (same-variable? v1 v2)\n    (and (variable? v1) (variable? v2) (eq? v1 v2)))\n\n\n\n(define (make-sum a1 a2) (list '+ a1 a2))\n(define (make-product m1 m2) (list '* m1 m2))\n\n(print (make-sum 'a 'b))\n;(+ a b)\n\n;\u548c\u306f\u3001\u6700\u521d\u306e\u8981\u7d20\u304c\u8a18\u53f7 + \u3067\u3042\u308b\u30ea\u30b9\u30c8\n(define (sum? x) (and (pair? x) (eq? (car x) '+)))\n\n;\u52a0\u6570\u306f\u3001\u548c\u306e\u30ea\u30b9\u30c8\u306e\u4e8c\u3064\u76ee\u306e\u9805\n(define (addend s) (cadr s))\n\n;\u88ab\u52a0\u6570\u306f\u3001\u548c\u306e\u30ea\u30b9\u30c8\u306e\u4e09\u3064\u76ee\u306e\u9805\n(define (augend s) (caddr s)) ;; augent\u3063\u3066\u306f\u521d\u8033\n\n;\u7a4d\u306f\u3001\u6700\u521d\u306e\u8981\u7d20\u304c\u8a18\u53f7 * \u3067\u3042\u308b\u30ea\u30b9\u30c8\n(define (product? x) (and (pair? x) (eq? (car x) '*)))\n\n;\u4e57\u6570\u306f\u3001\u7a4d\u306e\u30ea\u30b9\u30c8\u306e\u4e8c\u3064\u76ee\u306e\u9805\n(define (multiplier p) (cadr p))\n\n;\u88ab\u4e57\u6570\u306f\u3001\u7a4d\u306e\u30ea\u30b9\u30c8\u306e\u4e09\u3064\u76ee\u306e\u9805\n(define (multiplicand p) (caddr p))\n\n(define (deriv exp var)\n    (cond \n        ((number? exp) 0)\n        ((variable? exp) (if (same-variable? exp var) 1 0))\n        ((sum? exp) \n            (make-sum (deriv (addend exp) var) (deriv (augend exp) var)))\n        ((product? exp)\n            (make-sum \n                (make-product (multiplier exp) (deriv (multiplicand exp) var))\n                (make-product (deriv (multiplier exp) var)\n            (multiplicand exp))))\n    (else (error \"unknown expression type: DERIV\" exp))))\n\n\u6c17\u306b\u306a\u3063\u305f\u3051\u3069\u666e\u901a\u88ab\u52a0\u6570\u3063\u3066 a + b \u306a\u3089 a\u306e\u307b\u3046\u3067\u3001\u52a0\u6570\u304cb\u3060\u3088\u306d\u3048\u3002\n\u3053\u3053\u3060\u3068\u9006\u306a\u3088\u3046\u3060\u30fb\u30fb\u30fb\u3002\n\n\n(print \"===\u5fae\u5206\u3057\u3066\u307f\u308b===\")\n;;\n(print (deriv '(+ x 3) 'x))\n(print (deriv '(* x y) 'x))\n(print (deriv '(* (* x y) (+ x 3)) 'x))\n;(+ 1 0)\n;(+ (* x 0) (* 1 y))\n;(+ (* (* x y) (+ 1 0)) (* (+ (* x 0) (* 1 y)) (+ x 3)))\n\n\n(print \"===+0\u3084 *1\u3092merge===\")\n(define (=number? exp num) \n    (and (number? exp) (= exp num)))\n\n(define (make-sum a1 a2)\n    (cond \n        ((=number? a1 0) a2)\n        ((=number? a2 0) a1)\n        ((and (number? a1) (number? a2)) (+ a1 a2))\n    (else (list '+ a1 a2))))\n\n(define (make-product m1 m2)\n    (cond \n        ((or (=number? m1 0) (=number? m2 0)) 0)\n        ((=number? m1 1) m2)\n        ((=number? m2 1) m1)\n        ((and (number? m1) (number? m2)) (* m1 m2))\n    (else (list '* m1 m2))))\n\n(print (deriv '(+ x 3) 'x))\n(print (deriv '(* x y) 'x))\n(print (deriv '(* (* x y) (+ x 3)) 'x))\n;1\n;y\n;(+ (* x y) (* y (+ x 3)))\n\n\nEx 2.56\n(print \"===Ex 2.56===\")\n(define (base v) (cadr v))\n(define (exponent v) (caddr v))\n\n(define (make-exponentiation base exponent)\n    (cond \n        ((=number? exponent 0) 1)\n        ((=number? exponent 1) base)\n        ((and (number? base) (number? exponent)) (expt base exponent))\n        (else (list '** base exponent))))\n\n(define (exponentiation? v)\n    (and (pair? v) (eq? '** (car v))))\n\n(print \"make-exponentiation\")\n(print (make-exponentiation 3 0));1\n(print (make-exponentiation 3 1));3\n(print (make-exponentiation 3 2));9\n(print (make-exponentiation 'x 2));(** x 2)\n\n(define (exponentiation? v)\n    (and (pair? v) (eq? '** (car v))))\n\n(print \"make-exponentiation\")\n(print (make-exponentiation 3 0))\n(print (make-exponentiation 3 1))\n(print (make-exponentiation 3 2))\n;1\n;3\n;(** 3 2)\n\n(print \"===deriv===\")\n(define (deriv exp var)\n    (cond \n        ((number? exp) 0)\n        ((variable? exp) (if (same-variable? exp var) 1 0))\n        ((sum? exp) \n            (make-sum (deriv (addend exp) var) (deriv (augend exp) var)))\n        ((product? exp)\n            (make-sum \n                (make-product (multiplier exp) (deriv (multiplicand exp) var))\n                (make-product (deriv (multiplier exp) var) (multiplicand exp))))\n        ((exponentiation? exp)\n            (make-product\n                (make-product \n                    (exponent exp) \n                    (make-exponentiation (base exp) (- (exponent exp) 1)))\n                (deriv (base exp) var)\n                ))\n    (else (error \"unknown expression type: DERIV\" exp))))\n\n(print \"(deriv '(** x 2) 'x)\")\n(print (deriv '(** x 2) 'x))\n;(* 2 x)\n\n(a * b)'\u304c((a * b') + (a' * b))\u3063\u3066\u8a08\u7b97\u3067\u304d\u308b\u3063\u3066\u77e5\u3089\u306a\u304b\u3063\u305f\u3088\u30fb\u30fb\u30fb\u3002\n\u8abf\u3079\u3066\u77e5\u3063\u305f\u3088\u3002\u5e38\u8b58\uff1f \u6570\u5b66\u306e\u6388\u696d\u3068\u304b\u3082\u3046\u899a\u3048\u3066\u306a\u3044\uff1b\uff1b\nmemo\n\n(x ** 2)' = (x * x)' = x' * x + x * x' = 1 * x + x * 1 = 2x\n\n\nEx 2.57\n\n(print \"===Ex 2.57===\")\n\n(print \"cddr\u3068\u304bcaddr\u306e\u5fa9\u7fd2\")\n(define sum3 '(+ 1 2 3))\n(print (cddr sum3)) ;(2 3)\n(print (cdddr sum3)) ;(3)\n\n(print (car sum3)) ;+\n(print (cadr sum3)) ;1\n(print (caddr sum3)) ;2\n\n(define (augend s)\n    (if (null? (cdddr s)) \n        (caddr s) ; \u9805\u304c1\u3064\u3057\u304b\u7121\u3044\u6642\n        (cons '+ (cddr s)))) ; \u9805\u304c\uff12\u3064\u4ee5\u4e0a\u306e\u3068\u304d\n\n(define (multiplicand p)\n  (if (null? (cdddr p))\n      (caddr p) ; \u9805\u304c1\u3064\u3057\u304b\u7121\u3044\u6642\n      (cons '* (cddr p)))) ; \u9805\u304c\uff12\u3064\u4ee5\u4e0a\u306e\u3068\u304d\n\n(define (augend-test)\n    (print \"(augend '(+ 1 2 x)) = \"\n     (augend '(+ 1 2 x)))\n\n    (print \"(multiplicand '(* 1 2 x)) = \"\n     (multiplicand '(* 1 2 x)))\n    #t\n)\n(augend-test)\n;(augend '(+ 1 2 x)) = (+ 2 x)\n;(multiplicand '(* 1 2 x)) = (* 2 x)\n\n\n(print (deriv '(* (* x y) (+ x 3)) 'x))\n; ((xy) * (x + 3))'\n; = (xy * 1) + (y * (x + 3))\n; = xy  + (y (x + 3))\n\n;Result: (+ (* x y) (* y (+ x 3)))\n\n\nEx 2.58a\n\n(print \"===2.58 - a===\")\n;(x + (3 * (x + (y + 2)))) \u306e\u3088\u3046\u306a\u4e2d\u7f6e\u8a18\u6cd5\u3067\u8868\u3055\u308c\u305f\u4ee3\n;\u6570\u5f0f\u3092\u5fae\u5206\u3059\u308b\u306b\u306f\u3069\u306e\u3088\u3046\u306b\u3059\u308b\u304b\u3092\u793a\u305b\u3002\u554f\u984c\u3092\u7c21\u5358\u306b\n;\u3059\u308b\u305f\u3081\u3001+ \u3068 * \u306f\u5e38\u306b\u4e8c\u3064\u306e\u5f15\u6570\u3092\u53d6\u308a\u3001\u5f0f\u306f\u5b8c\u5168\u306b\u62ec\u5f27\n;\u3067\u304f\u304f\u3089\u308c\u3066\u3044\u308b\u3068\u4eee\u5b9a\u305b\u3088\u3002\n\n\n\n;\u548c\u306f\u30012\u3064\u76ee\u306e\u8981\u7d20\u304c\u8a18\u53f7 + \u3067\u3042\u308b\u30ea\u30b9\u30c8\n(define (sum? x) (and (pair? x) (eq? (cadr x) '+)))\n\n;\u52a0\u6570\u306f\u3001\u548c\u306e\u30ea\u30b9\u30c8\u306e1\u3064\u76ee\u306e\u9805\n(define (addend s) (car s))\n\n;(define (augend s) (caddr s)) \u5909\u66f4\u306a\u3057\n\n;\u7a4d\u306f\u30012\u3064\u76ee\u306e\u8981\u7d20\u304c\u8a18\u53f7 * \u3067\u3042\u308b\u30ea\u30b9\u30c8\n(define (product? x) (and (pair? x) (eq? (cadr x) '*)))\n\n;\u4e57\u6570\u306f\u3001\u7a4d\u306e\u30ea\u30b9\u30c8\u306e1\u3064\u76ee\u306e\u9805\n(define (multiplier p) (car p))\n\n;\u88ab\u4e57\u6570\u306f\u3001\u7a4d\u306e\u30ea\u30b9\u30c8\u306e3\u3064\u76ee\u306e\u9805\n;(define (multiplicand p) (caddr p) \u5909\u66f4\u306a\u3057\n\n\n(define (make-sum a1 a2)\n    (cond \n        ((=number? a1 0) a2)\n        ((=number? a2 0) a1)\n        ((and (number? a1) (number? a2)) (+ a1 a2))\n    (else (list a1 '+ a2))))\n(define (make-product m1 m2)\n    (cond \n        ((or (=number? m1 0) (=number? m2 0)) 0)\n        ((=number? m1 1) m2)\n        ((=number? m2 1) m1)\n        ((and (number? m1) (number? m2)) (* m1 m2))\n    (else (list m1 '* m2))))\n\n(print \"\u4e2d\u7f6e\u6f14\u7b97\u5b50\")\n\n(define s (make-sum 3 'x))\n(print s)\n(print \"addend=\" (addend s))\n(print \"augend=\" (augend s))\n;(3 + x)\n;addend=3\n;augend=x\n\n\n(define p (make-product 3 'x))\n(print p)\n(print \"multiplier=\" (multiplier p))\n(print \"multiplicand=\" (multiplicand p))\n;(3 * x)\n;multiplier=3\n;multiplicand=x\n\n\n(print \"(deriv '(x + (3 * (x + (y + 2)))) 'x)=\" \n    (deriv '(x + (3 * (x + (y + 2)))) 'x))\n\n(print \"(deriv '((x * y) * (x + 3)) 'x)=\" (deriv '((x * y) * (x + 3)) 'x))\n;(deriv '(x + (3 * (x + (y + 2)))) 'x)=4\n;(deriv '((x * y) * (x + 3)) 'x)=((x * y) + (y * (x + 3)))\n\n\nEx 2.58 b\n(print \"===2.58 - b===\")\n;(x + 3 * (x + y + 2)) \u306e\u3088\u3046\u306a\u6a19\u6e96\u7684\u306a\u4ee3\u6570\u8a18\u6cd5\u3092\u8a8d\u3081\n;\u308b\u3068\u3001\u554f\u984c\u306f\u305a\u3063\u3068\u96e3\u3057\u304f\u306a\u308b\u3002\u3053\u306e\u8a18\u6cd5\u3067\u306f\u3001\u5fc5\u8981\u306e\u306a\u3044\n;\u62ec\u5f27\u306f\u7701\u7565\u3057\u3001\u4e57\u7b97\u306f\u52a0\u7b97\u3088\u308a\u5148\u306b\u884c\u308f\u308c\u308b\u3068\u4eee\u5b9a\u3057\u3066\u3044\u308b\u3002\n;\u3053\u3053\u3067\u306e\u5fae\u5206\u30d7\u30ed\u30b0\u30e9\u30e0\u304c\u305d\u306e\u3088\u3046\u306a\u8a18\u6cd5\u306b\u5bfe\u3057\u3066\u3082\u3046\u307e\u304f\n;\u52d5\u304f\u3088\u3046\u306b\u3001\u9069\u5207\u306a\u8ff0\u8a9e\u3001\u30bb\u30ec\u30af\u30bf\u3001\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u3092\u8a2d\u8a08\n;\u3067\u304d\u308b\u3060\u308d\u3046\u304b\u3002\n\n(define (make-sum . a)\n    (define (itr a formula num)\n        ;debug\n        ;(print a formula num) \n        (cond \n            ((null? a) \n                (cond \n                    ((null? formula) num)\n                    ((= num 0) formula)\n                    (else (append formula (list '+ num)))\n                ))\n            ((number? (car a)) (itr (cdr a) formula (+ num (car a))))\n            (else \n                (if \n                    (null? formula) \n                    (itr (cdr a) (list (car a)) num)\n                    (itr (cdr a) (append formula (list '+ (car a))) num))\n            )))\n    (itr a nil 0))\n\n(print (make-sum 1 3 4 'x 'y))\n;(x + y + 8)\n\n(define (make-product . a)\n    (define (itr a formula num)\n        ;debug\n        ;(print a formula num) \n        (cond \n            ((null? a) \n                (cond \n                    ((null? formula) num)\n                    ((= num 1) formula)\n                    (else (append formula (list '* num)))\n                ))\n            ((number? (car a)) \n                (if (= (car a) 0)\n                    0\n                    (itr (cdr a) formula (* num (car a)))))\n            (else \n                (if \n                    (null? formula) \n                    (itr (cdr a) (list (car a)) num)\n                    (itr (cdr a) (append formula (list '* (car a))) num))\n            )))\n    (itr a nil 1))\n\n(print (make-product 1 3 4 'x 'y))\n;(x * y * 12)\n(print (make-product 'x 'y 0))\n;0\n\n(print \"\u30bb\u30ec\u30af\u30bf\u306e\u8a2d\u5b9a\")\n;\u548c\u306f\u30012\u3064\u76ee\u306e\u8981\u7d20\u304c\u8a18\u53f7 + \u3067\u3042\u308b\u30ea\u30b9\u30c8\n(define (sum? x) (and (pair? x) (eq? (cadr x) '+)))\n\n;\u52a0\u6570\u306f\u3001\u548c\u306e\u30ea\u30b9\u30c8\u306e1\u3064\u76ee\u306e\u9805\n(define (addend s) (car s))\n\n(define (augend s) \n    (if \n        (null? (cdddr s))\n        (caddr s)\n        (cddr s)))\n\n;\u7a4d\u306f\u30012\u3064\u76ee\u306e\u8981\u7d20\u304c\u8a18\u53f7 * \u3067\u3042\u308b\u30ea\u30b9\u30c8\n(define (product? x) (and (pair? x) (eq? (cadr x) '*)))\n\n;\u4e57\u6570\u306f\u3001\u7a4d\u306e\u30ea\u30b9\u30c8\u306e1\u3064\u76ee\u306e\u9805\n(define (multiplier p) (car p))\n\n;\u88ab\u4e57\u6570\u306f\u3001\u7a4d\u306e\u30ea\u30b9\u30c8\u306e3\u3064\u76ee\u306e\u9805\n(define (multiplicand p) \n    (if \n        (null? (cdddr p))\n        (caddr p)\n        (cddr p)))\n\n\n(define s (make-sum 3 'x 'y))\n(print s)\n(print \"addend=\" (addend s))\n(print \"augend=\" (augend s))\n(print \"augend\u306eaugend=\" (augend (augend s)))\n;(x + y + 3)\n;addend=x\n;augend=(y + 3)\n;augend\u306eaugend=3\n(print \"(make-sum 1 3 5)=\" (make-sum 1 3 5))\n(print \"(make-sum 'x 'y)=\" (make-sum 'x 'y))\n;(make-sum 1 3 5)=9\n;(make-sum 'x 'y)=(x + y)\n\n(define p (make-product 3 'x 'y))\n(print p)\n(print \"multiplier=\" (multiplier p))\n(print \"multiplicand=\" (multiplicand p))\n(print \"multiplicand\u306emultiprcand=\" (multiplicand (multiplicand p)))\n;(x * y * 3)\n;multiplier=x\n;multiplicand=(y * 3)\n;multiplicand\u306emultiprcand=3\n(print \"(make-product 1 3 5)=\" (make-product 1 3 5))\n(print \"(make-product 'x 'y)=\" (make-product 'x 'y))\n;(make-product 1 3 5)=15\n;(make-product 'x 'y)=(x * y)\n\n\u7a4d\u306e\u307f\u3001\u548c\u306e\u307f\u306e\u5f0f\u306e\u5fae\u5206\n(print \"---deriv: sum---\")\n(print (deriv (make-sum 'x 'y 3) 'x)) \n;1\n(print (deriv (make-sum 'x 'x 'y 3) 'x)) \n;2\n\n(print \"---deriv: product---\")\n(print (deriv (make-product 'x 'y 3) 'x)) \n;(((y * 3)))\n\n(print (deriv (make-product 'x 'x 'y 3) 'x)) \n;((x * (((y * 3)))) + ((x * y * 3)))\n\n\u62ec\u5f27\u304c\u591a\u3044\uff01\uff01\uff01\uff01\n\u3042\u3068\u306f\u3001+\u3068*\u304c\u6df7\u5408\u3057\u305f\u5834\u5408\n(print \"---deriv: mix---\")\n(print (deriv '(x + y * 3 * x) 'x)) \n;(((y * 3)) + 1)\n\n\u512a\u5148\u5ea6\u3068\u304b\u306f\u8003\u3048\u3066\u306a\u3044\u3002\n\n\u512a\u5148\u5ea6\u3092\u8003\u3048\u308b\n(print \"=== \u512a\u5148\u9806\u5e8f\u3092\u8003\u616e\u3057\u3088\u3046\")\n;\u548c\u306f\u3001\u3069\u3053\u304b\u306b\uff0b\u304c\u3042\u308b\u3084\u3064\n\n(define test-mix '(a * b + c))\n(define test-mix2 '(a + b * c))\n(define test-sum '(a + b + c))\n(define test-prod '(a * b * c))\n(print test-mix)\n(print test-mix2)\n(print test-sum)\n(print test-prod)\n\n(define (sum? x) \n    (define (itr xx)\n        ;(print xx (car xx))\n        (cond \n            ((null? xx) #f)\n            ((not (pair? xx)) #f)\n            ((null? (cdr xx)) #f)\n            ((eq? (cadr xx) '+) #t)\n            (else (itr (cddr xx)))))\n    (itr x))\n(print \"-sum?\")\n(print (sum? test-mix))\n(print (sum? test-mix2))\n(print (sum? test-sum))\n(print (sum? test-prod))\n;#t\n;#t\n;#t\n;#f\n\n;\u52a0\u6570\u306f\u3001\u548c\u306e\u30ea\u30b9\u30c8\u306e1\u3064\u76ee\u306e\u9805\n(define (addend s) \n    (define (itr ss formula)\n        (cond\n            ((eq? (car ss) '+) formula)\n            (else \n                (itr (cdr ss) (append formula (list (car ss)))))\n        ))\n(let ((ans (itr s nil)))\n    (if \n        (null? (cdr ans))\n        (car ans)\n    ans)))\n\n\n(print \"-addend\")\n(print (addend test-mix))\n(print (addend test-mix2))\n(print (addend test-sum))\n;(a * b)\n;a\n;a\n\n(define (augend s)\n    (define (itr ss)\n        (cond\n            ((eq? (car ss) '+) (cdr ss))\n            (else \n                (itr (cdr ss))\n        )))\n(let ((ans (itr s)))\n    (if \n        (null? (cdr ans))\n        (car ans)\n    ans)))\n\n(print \"-augend\")\n(print (augend test-mix))\n(print (augend test-mix2))\n(print (augend test-sum))\n;c\n;(b * c)\n;(b + c)\n\n;\u7a4d\u306f\u30012\u3064\u76ee\u306e\u8981\u7d20\u304c\u8a18\u53f7 * \u3067\u3042\u308b\u30ea\u30b9\u30c8\n;(define (product? x) \n;    (define (itr xx)\n;        ;(print xx (car xx))\n;        (cond \n;            ((null? xx) #f)\n;            ((not (pair? xx)) #f)\n;            ((null? (cdr xx)) #f)\n;            ((eq? (cadr xx) '*) #t)\n;            (else (itr (cddr xx)))))\n;    (itr x))\n\n(print (product? test-mix))\n(print (product? test-mix2))\n(print (product? test-sum))\n(print (product? test-prod))\n;#t\n;#f\n;#f\n;#t\n\n\n(print \"===deriv===\")\n(define (deriv exp var)\n    ;(print exp \",\" var)\n    (cond \n        ((number? exp) 0)\n        ((variable? exp) (if (same-variable? exp var) 1 0))\n        ((sum? exp) \n            (make-sum (deriv (addend exp) var) (deriv (augend exp) var)))\n        ((product? exp)\n            (make-sum \n                (make-product (multiplier exp) (deriv (multiplicand exp) var))\n                (make-product (deriv (multiplier exp) var) (multiplicand exp))))\n        ((exponentiation? exp)\n            (make-product\n                (make-product \n                    (exponent exp) \n                    (make-exponentiation (base exp) (- (exponent exp) 1)))\n                (deriv (base exp) var)\n                ))\n    (else (error \"unknown expression type: DERIV\" exp))))\n\n(print \"---deriv: mix---\")\n(print (deriv '(x + y * 3 * x) 'x)) \n;(((y * 3)) + 1)\n\n;\u51aa\u4e57 \u306b\u306f\u305f\u3044\u304a\u3046\u3057\u3066\u306a\u3072\n\nICP\u8aad\u66f8\u5973\u5b50\u4f1a 2.3.2 (#26)\n\n# 2.3.2\n\n```lisp\n(define (variable? x) (symbol? x)) ;; \u5909\u6570\u304b\u3069\u3046\u304b\n(define (same-variable? v1 v2)\n    (and (variable? v1) (variable? v2) (eq? v1 v2)))\n\n\n\n(define (make-sum a1 a2) (list '+ a1 a2))\n(define (make-product m1 m2) (list '* m1 m2))\n\n(print (make-sum 'a 'b))\n;(+ a b)\n\n;\u548c\u306f\u3001\u6700\u521d\u306e\u8981\u7d20\u304c\u8a18\u53f7 + \u3067\u3042\u308b\u30ea\u30b9\u30c8\n(define (sum? x) (and (pair? x) (eq? (car x) '+)))\n\n;\u52a0\u6570\u306f\u3001\u548c\u306e\u30ea\u30b9\u30c8\u306e\u4e8c\u3064\u76ee\u306e\u9805\n(define (addend s) (cadr s))\n\n;\u88ab\u52a0\u6570\u306f\u3001\u548c\u306e\u30ea\u30b9\u30c8\u306e\u4e09\u3064\u76ee\u306e\u9805\n(define (augend s) (caddr s)) ;; augent\u3063\u3066\u306f\u521d\u8033\n\n;\u7a4d\u306f\u3001\u6700\u521d\u306e\u8981\u7d20\u304c\u8a18\u53f7 * \u3067\u3042\u308b\u30ea\u30b9\u30c8\n(define (product? x) (and (pair? x) (eq? (car x) '*)))\n\n;\u4e57\u6570\u306f\u3001\u7a4d\u306e\u30ea\u30b9\u30c8\u306e\u4e8c\u3064\u76ee\u306e\u9805\n(define (multiplier p) (cadr p))\n\n;\u88ab\u4e57\u6570\u306f\u3001\u7a4d\u306e\u30ea\u30b9\u30c8\u306e\u4e09\u3064\u76ee\u306e\u9805\n(define (multiplicand p) (caddr p))\n\n(define (deriv exp var)\n    (cond \n        ((number? exp) 0)\n        ((variable? exp) (if (same-variable? exp var) 1 0))\n        ((sum? exp) \n            (make-sum (deriv (addend exp) var) (deriv (augend exp) var)))\n        ((product? exp)\n            (make-sum \n                (make-product (multiplier exp) (deriv (multiplicand exp) var))\n                (make-product (deriv (multiplier exp) var)\n            (multiplicand exp))))\n    (else (error \"unknown expression type: DERIV\" exp))))\n```\n\n\u6c17\u306b\u306a\u3063\u305f\u3051\u3069\u666e\u901a\u88ab\u52a0\u6570\u3063\u3066 a + b \u306a\u3089 a\u306e\u307b\u3046\u3067\u3001\u52a0\u6570\u304cb\u3060\u3088\u306d\u3048\u3002\n\u3053\u3053\u3060\u3068\u9006\u306a\u3088\u3046\u3060\u30fb\u30fb\u30fb\u3002\n\n```lisp\n\n\n(print \"===\u5fae\u5206\u3057\u3066\u307f\u308b===\")\n;;\n(print (deriv '(+ x 3) 'x))\n(print (deriv '(* x y) 'x))\n(print (deriv '(* (* x y) (+ x 3)) 'x))\n;(+ 1 0)\n;(+ (* x 0) (* 1 y))\n;(+ (* (* x y) (+ 1 0)) (* (+ (* x 0) (* 1 y)) (+ x 3)))\n\n\n(print \"===+0\u3084 *1\u3092merge===\")\n(define (=number? exp num) \n    (and (number? exp) (= exp num)))\n\n(define (make-sum a1 a2)\n    (cond \n        ((=number? a1 0) a2)\n        ((=number? a2 0) a1)\n        ((and (number? a1) (number? a2)) (+ a1 a2))\n    (else (list '+ a1 a2))))\n\n(define (make-product m1 m2)\n    (cond \n        ((or (=number? m1 0) (=number? m2 0)) 0)\n        ((=number? m1 1) m2)\n        ((=number? m2 1) m1)\n        ((and (number? m1) (number? m2)) (* m1 m2))\n    (else (list '* m1 m2))))\n\n(print (deriv '(+ x 3) 'x))\n(print (deriv '(* x y) 'x))\n(print (deriv '(* (* x y) (+ x 3)) 'x))\n;1\n;y\n;(+ (* x y) (* y (+ x 3)))\n```\n\n\n## Ex 2.56\n\n```lisp\n(print \"===Ex 2.56===\")\n(define (base v) (cadr v))\n(define (exponent v) (caddr v))\n\n(define (make-exponentiation base exponent)\n    (cond \n        ((=number? exponent 0) 1)\n        ((=number? exponent 1) base)\n        ((and (number? base) (number? exponent)) (expt base exponent))\n        (else (list '** base exponent))))\n\n(define (exponentiation? v)\n    (and (pair? v) (eq? '** (car v))))\n\n(print \"make-exponentiation\")\n(print (make-exponentiation 3 0));1\n(print (make-exponentiation 3 1));3\n(print (make-exponentiation 3 2));9\n(print (make-exponentiation 'x 2));(** x 2)\n\n(define (exponentiation? v)\n    (and (pair? v) (eq? '** (car v))))\n\n(print \"make-exponentiation\")\n(print (make-exponentiation 3 0))\n(print (make-exponentiation 3 1))\n(print (make-exponentiation 3 2))\n;1\n;3\n;(** 3 2)\n\n(print \"===deriv===\")\n(define (deriv exp var)\n    (cond \n        ((number? exp) 0)\n        ((variable? exp) (if (same-variable? exp var) 1 0))\n        ((sum? exp) \n            (make-sum (deriv (addend exp) var) (deriv (augend exp) var)))\n        ((product? exp)\n            (make-sum \n                (make-product (multiplier exp) (deriv (multiplicand exp) var))\n                (make-product (deriv (multiplier exp) var) (multiplicand exp))))\n        ((exponentiation? exp)\n            (make-product\n                (make-product \n                    (exponent exp) \n                    (make-exponentiation (base exp) (- (exponent exp) 1)))\n                (deriv (base exp) var)\n                ))\n    (else (error \"unknown expression type: DERIV\" exp))))\n\n(print \"(deriv '(** x 2) 'x)\")\n(print (deriv '(** x 2) 'x))\n;(* 2 x)\n```\n\n`(a * b)'`\u304c`((a * b') + (a' * b))`\u3063\u3066\u8a08\u7b97\u3067\u304d\u308b\u3063\u3066\u77e5\u3089\u306a\u304b\u3063\u305f\u3088\u30fb\u30fb\u30fb\u3002\n\u8abf\u3079\u3066\u77e5\u3063\u305f\u3088\u3002\u5e38\u8b58\uff1f \u6570\u5b66\u306e\u6388\u696d\u3068\u304b\u3082\u3046\u899a\u3048\u3066\u306a\u3044\uff1b\uff1b\n\nmemo\n```\n(x ** 2)' = (x * x)' = x' * x + x * x' = 1 * x + x * 1 = 2x\n```\n\n## Ex 2.57\n\n```lisp\n\n(print \"===Ex 2.57===\")\n\n(print \"cddr\u3068\u304bcaddr\u306e\u5fa9\u7fd2\")\n(define sum3 '(+ 1 2 3))\n(print (cddr sum3)) ;(2 3)\n(print (cdddr sum3)) ;(3)\n\n(print (car sum3)) ;+\n(print (cadr sum3)) ;1\n(print (caddr sum3)) ;2\n \n(define (augend s)\n    (if (null? (cdddr s)) \n        (caddr s) ; \u9805\u304c1\u3064\u3057\u304b\u7121\u3044\u6642\n        (cons '+ (cddr s)))) ; \u9805\u304c\uff12\u3064\u4ee5\u4e0a\u306e\u3068\u304d\n\n(define (multiplicand p)\n  (if (null? (cdddr p))\n      (caddr p) ; \u9805\u304c1\u3064\u3057\u304b\u7121\u3044\u6642\n      (cons '* (cddr p)))) ; \u9805\u304c\uff12\u3064\u4ee5\u4e0a\u306e\u3068\u304d\n\n(define (augend-test)\n    (print \"(augend '(+ 1 2 x)) = \"\n     (augend '(+ 1 2 x)))\n\n    (print \"(multiplicand '(* 1 2 x)) = \"\n     (multiplicand '(* 1 2 x)))\n    #t\n)\n(augend-test)\n;(augend '(+ 1 2 x)) = (+ 2 x)\n;(multiplicand '(* 1 2 x)) = (* 2 x)\n\n\n(print (deriv '(* (* x y) (+ x 3)) 'x))\n; ((xy) * (x + 3))'\n; = (xy * 1) + (y * (x + 3))\n; = xy  + (y (x + 3))\n\n;Result: (+ (* x y) (* y (+ x 3)))\n```\n\n\n\n## Ex 2.58a\n\n```lisp\n\n(print \"===2.58 - a===\")\n;(x + (3 * (x + (y + 2)))) \u306e\u3088\u3046\u306a\u4e2d\u7f6e\u8a18\u6cd5\u3067\u8868\u3055\u308c\u305f\u4ee3\n;\u6570\u5f0f\u3092\u5fae\u5206\u3059\u308b\u306b\u306f\u3069\u306e\u3088\u3046\u306b\u3059\u308b\u304b\u3092\u793a\u305b\u3002\u554f\u984c\u3092\u7c21\u5358\u306b\n;\u3059\u308b\u305f\u3081\u3001+ \u3068 * \u306f\u5e38\u306b\u4e8c\u3064\u306e\u5f15\u6570\u3092\u53d6\u308a\u3001\u5f0f\u306f\u5b8c\u5168\u306b\u62ec\u5f27\n;\u3067\u304f\u304f\u3089\u308c\u3066\u3044\u308b\u3068\u4eee\u5b9a\u305b\u3088\u3002\n\n\n\n;\u548c\u306f\u30012\u3064\u76ee\u306e\u8981\u7d20\u304c\u8a18\u53f7 + \u3067\u3042\u308b\u30ea\u30b9\u30c8\n(define (sum? x) (and (pair? x) (eq? (cadr x) '+)))\n\n;\u52a0\u6570\u306f\u3001\u548c\u306e\u30ea\u30b9\u30c8\u306e1\u3064\u76ee\u306e\u9805\n(define (addend s) (car s))\n\n;(define (augend s) (caddr s)) \u5909\u66f4\u306a\u3057\n\n;\u7a4d\u306f\u30012\u3064\u76ee\u306e\u8981\u7d20\u304c\u8a18\u53f7 * \u3067\u3042\u308b\u30ea\u30b9\u30c8\n(define (product? x) (and (pair? x) (eq? (cadr x) '*)))\n\n;\u4e57\u6570\u306f\u3001\u7a4d\u306e\u30ea\u30b9\u30c8\u306e1\u3064\u76ee\u306e\u9805\n(define (multiplier p) (car p))\n\n;\u88ab\u4e57\u6570\u306f\u3001\u7a4d\u306e\u30ea\u30b9\u30c8\u306e3\u3064\u76ee\u306e\u9805\n;(define (multiplicand p) (caddr p) \u5909\u66f4\u306a\u3057\n\n\n(define (make-sum a1 a2)\n    (cond \n        ((=number? a1 0) a2)\n        ((=number? a2 0) a1)\n        ((and (number? a1) (number? a2)) (+ a1 a2))\n    (else (list a1 '+ a2))))\n(define (make-product m1 m2)\n    (cond \n        ((or (=number? m1 0) (=number? m2 0)) 0)\n        ((=number? m1 1) m2)\n        ((=number? m2 1) m1)\n        ((and (number? m1) (number? m2)) (* m1 m2))\n    (else (list m1 '* m2))))\n\n(print \"\u4e2d\u7f6e\u6f14\u7b97\u5b50\")\n\n(define s (make-sum 3 'x))\n(print s)\n(print \"addend=\" (addend s))\n(print \"augend=\" (augend s))\n;(3 + x)\n;addend=3\n;augend=x\n\n\n(define p (make-product 3 'x))\n(print p)\n(print \"multiplier=\" (multiplier p))\n(print \"multiplicand=\" (multiplicand p))\n;(3 * x)\n;multiplier=3\n;multiplicand=x\n\n\n(print \"(deriv '(x + (3 * (x + (y + 2)))) 'x)=\" \n    (deriv '(x + (3 * (x + (y + 2)))) 'x))\n\n(print \"(deriv '((x * y) * (x + 3)) 'x)=\" (deriv '((x * y) * (x + 3)) 'x))\n;(deriv '(x + (3 * (x + (y + 2)))) 'x)=4\n;(deriv '((x * y) * (x + 3)) 'x)=((x * y) + (y * (x + 3)))\n```\n\n\n## Ex 2.58 b\n\n\n```lisp\n(print \"===2.58 - b===\")\n;(x + 3 * (x + y + 2)) \u306e\u3088\u3046\u306a\u6a19\u6e96\u7684\u306a\u4ee3\u6570\u8a18\u6cd5\u3092\u8a8d\u3081\n;\u308b\u3068\u3001\u554f\u984c\u306f\u305a\u3063\u3068\u96e3\u3057\u304f\u306a\u308b\u3002\u3053\u306e\u8a18\u6cd5\u3067\u306f\u3001\u5fc5\u8981\u306e\u306a\u3044\n;\u62ec\u5f27\u306f\u7701\u7565\u3057\u3001\u4e57\u7b97\u306f\u52a0\u7b97\u3088\u308a\u5148\u306b\u884c\u308f\u308c\u308b\u3068\u4eee\u5b9a\u3057\u3066\u3044\u308b\u3002\n;\u3053\u3053\u3067\u306e\u5fae\u5206\u30d7\u30ed\u30b0\u30e9\u30e0\u304c\u305d\u306e\u3088\u3046\u306a\u8a18\u6cd5\u306b\u5bfe\u3057\u3066\u3082\u3046\u307e\u304f\n;\u52d5\u304f\u3088\u3046\u306b\u3001\u9069\u5207\u306a\u8ff0\u8a9e\u3001\u30bb\u30ec\u30af\u30bf\u3001\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u3092\u8a2d\u8a08\n;\u3067\u304d\u308b\u3060\u308d\u3046\u304b\u3002\n\n(define (make-sum . a)\n    (define (itr a formula num)\n        ;debug\n        ;(print a formula num) \n        (cond \n            ((null? a) \n                (cond \n                    ((null? formula) num)\n                    ((= num 0) formula)\n                    (else (append formula (list '+ num)))\n                ))\n            ((number? (car a)) (itr (cdr a) formula (+ num (car a))))\n            (else \n                (if \n                    (null? formula) \n                    (itr (cdr a) (list (car a)) num)\n                    (itr (cdr a) (append formula (list '+ (car a))) num))\n            )))\n    (itr a nil 0))\n\n(print (make-sum 1 3 4 'x 'y))\n;(x + y + 8)\n\n(define (make-product . a)\n    (define (itr a formula num)\n        ;debug\n        ;(print a formula num) \n        (cond \n            ((null? a) \n                (cond \n                    ((null? formula) num)\n                    ((= num 1) formula)\n                    (else (append formula (list '* num)))\n                ))\n            ((number? (car a)) \n                (if (= (car a) 0)\n                    0\n                    (itr (cdr a) formula (* num (car a)))))\n            (else \n                (if \n                    (null? formula) \n                    (itr (cdr a) (list (car a)) num)\n                    (itr (cdr a) (append formula (list '* (car a))) num))\n            )))\n    (itr a nil 1))\n\n(print (make-product 1 3 4 'x 'y))\n;(x * y * 12)\n(print (make-product 'x 'y 0))\n;0\n\n(print \"\u30bb\u30ec\u30af\u30bf\u306e\u8a2d\u5b9a\")\n;\u548c\u306f\u30012\u3064\u76ee\u306e\u8981\u7d20\u304c\u8a18\u53f7 + \u3067\u3042\u308b\u30ea\u30b9\u30c8\n(define (sum? x) (and (pair? x) (eq? (cadr x) '+)))\n\n;\u52a0\u6570\u306f\u3001\u548c\u306e\u30ea\u30b9\u30c8\u306e1\u3064\u76ee\u306e\u9805\n(define (addend s) (car s))\n\n(define (augend s) \n    (if \n        (null? (cdddr s))\n        (caddr s)\n        (cddr s)))\n\n;\u7a4d\u306f\u30012\u3064\u76ee\u306e\u8981\u7d20\u304c\u8a18\u53f7 * \u3067\u3042\u308b\u30ea\u30b9\u30c8\n(define (product? x) (and (pair? x) (eq? (cadr x) '*)))\n\n;\u4e57\u6570\u306f\u3001\u7a4d\u306e\u30ea\u30b9\u30c8\u306e1\u3064\u76ee\u306e\u9805\n(define (multiplier p) (car p))\n\n;\u88ab\u4e57\u6570\u306f\u3001\u7a4d\u306e\u30ea\u30b9\u30c8\u306e3\u3064\u76ee\u306e\u9805\n(define (multiplicand p) \n    (if \n        (null? (cdddr p))\n        (caddr p)\n        (cddr p)))\n\n\n(define s (make-sum 3 'x 'y))\n(print s)\n(print \"addend=\" (addend s))\n(print \"augend=\" (augend s))\n(print \"augend\u306eaugend=\" (augend (augend s)))\n;(x + y + 3)\n;addend=x\n;augend=(y + 3)\n;augend\u306eaugend=3\n(print \"(make-sum 1 3 5)=\" (make-sum 1 3 5))\n(print \"(make-sum 'x 'y)=\" (make-sum 'x 'y))\n;(make-sum 1 3 5)=9\n;(make-sum 'x 'y)=(x + y)\n\n(define p (make-product 3 'x 'y))\n(print p)\n(print \"multiplier=\" (multiplier p))\n(print \"multiplicand=\" (multiplicand p))\n(print \"multiplicand\u306emultiprcand=\" (multiplicand (multiplicand p)))\n;(x * y * 3)\n;multiplier=x\n;multiplicand=(y * 3)\n;multiplicand\u306emultiprcand=3\n(print \"(make-product 1 3 5)=\" (make-product 1 3 5))\n(print \"(make-product 'x 'y)=\" (make-product 'x 'y))\n;(make-product 1 3 5)=15\n;(make-product 'x 'y)=(x * y)\n```\n\n\u7a4d\u306e\u307f\u3001\u548c\u306e\u307f\u306e\u5f0f\u306e\u5fae\u5206\n\n```lisp\n(print \"---deriv: sum---\")\n(print (deriv (make-sum 'x 'y 3) 'x)) \n;1\n(print (deriv (make-sum 'x 'x 'y 3) 'x)) \n;2\n\n(print \"---deriv: product---\")\n(print (deriv (make-product 'x 'y 3) 'x)) \n;(((y * 3)))\n\n(print (deriv (make-product 'x 'x 'y 3) 'x)) \n;((x * (((y * 3)))) + ((x * y * 3)))\n```\n\n\u62ec\u5f27\u304c\u591a\u3044\uff01\uff01\uff01\uff01\n\n\u3042\u3068\u306f\u3001+\u3068*\u304c\u6df7\u5408\u3057\u305f\u5834\u5408\n\n```lisp\n(print \"---deriv: mix---\")\n(print (deriv '(x + y * 3 * x) 'x)) \n;(((y * 3)) + 1)\n```\n\n\u512a\u5148\u5ea6\u3068\u304b\u306f\u8003\u3048\u3066\u306a\u3044\u3002\n\n### \u512a\u5148\u5ea6\u3092\u8003\u3048\u308b\n\n```lisp\n(print \"=== \u512a\u5148\u9806\u5e8f\u3092\u8003\u616e\u3057\u3088\u3046\")\n;\u548c\u306f\u3001\u3069\u3053\u304b\u306b\uff0b\u304c\u3042\u308b\u3084\u3064\n\n(define test-mix '(a * b + c))\n(define test-mix2 '(a + b * c))\n(define test-sum '(a + b + c))\n(define test-prod '(a * b * c))\n(print test-mix)\n(print test-mix2)\n(print test-sum)\n(print test-prod)\n\n(define (sum? x) \n    (define (itr xx)\n        ;(print xx (car xx))\n        (cond \n            ((null? xx) #f)\n            ((not (pair? xx)) #f)\n            ((null? (cdr xx)) #f)\n            ((eq? (cadr xx) '+) #t)\n            (else (itr (cddr xx)))))\n    (itr x))\n(print \"-sum?\")\n(print (sum? test-mix))\n(print (sum? test-mix2))\n(print (sum? test-sum))\n(print (sum? test-prod))\n;#t\n;#t\n;#t\n;#f\n\n;\u52a0\u6570\u306f\u3001\u548c\u306e\u30ea\u30b9\u30c8\u306e1\u3064\u76ee\u306e\u9805\n(define (addend s) \n    (define (itr ss formula)\n        (cond\n            ((eq? (car ss) '+) formula)\n            (else \n                (itr (cdr ss) (append formula (list (car ss)))))\n        ))\n(let ((ans (itr s nil)))\n    (if \n        (null? (cdr ans))\n        (car ans)\n    ans)))\n\n\n(print \"-addend\")\n(print (addend test-mix))\n(print (addend test-mix2))\n(print (addend test-sum))\n;(a * b)\n;a\n;a\n\n(define (augend s)\n    (define (itr ss)\n        (cond\n            ((eq? (car ss) '+) (cdr ss))\n            (else \n                (itr (cdr ss))\n        )))\n(let ((ans (itr s)))\n    (if \n        (null? (cdr ans))\n        (car ans)\n    ans)))\n    \n(print \"-augend\")\n(print (augend test-mix))\n(print (augend test-mix2))\n(print (augend test-sum))\n;c\n;(b * c)\n;(b + c)\n\n;\u7a4d\u306f\u30012\u3064\u76ee\u306e\u8981\u7d20\u304c\u8a18\u53f7 * \u3067\u3042\u308b\u30ea\u30b9\u30c8\n;(define (product? x) \n;    (define (itr xx)\n;        ;(print xx (car xx))\n;        (cond \n;            ((null? xx) #f)\n;            ((not (pair? xx)) #f)\n;            ((null? (cdr xx)) #f)\n;            ((eq? (cadr xx) '*) #t)\n;            (else (itr (cddr xx)))))\n;    (itr x))\n\n(print (product? test-mix))\n(print (product? test-mix2))\n(print (product? test-sum))\n(print (product? test-prod))\n;#t\n;#f\n;#f\n;#t\n\n\n(print \"===deriv===\")\n(define (deriv exp var)\n    ;(print exp \",\" var)\n    (cond \n        ((number? exp) 0)\n        ((variable? exp) (if (same-variable? exp var) 1 0))\n        ((sum? exp) \n            (make-sum (deriv (addend exp) var) (deriv (augend exp) var)))\n        ((product? exp)\n            (make-sum \n                (make-product (multiplier exp) (deriv (multiplicand exp) var))\n                (make-product (deriv (multiplier exp) var) (multiplicand exp))))\n        ((exponentiation? exp)\n            (make-product\n                (make-product \n                    (exponent exp) \n                    (make-exponentiation (base exp) (- (exponent exp) 1)))\n                (deriv (base exp) var)\n                ))\n    (else (error \"unknown expression type: DERIV\" exp))))\n\n(print \"---deriv: mix---\")\n(print (deriv '(x + y * 3 * x) 'x)) \n;(((y * 3)) + 1)\n\n;\u51aa\u4e57 \u306b\u306f\u305f\u3044\u304a\u3046\u3057\u3066\u306a\u3072\n```\n", "tags": ["SICP"]}