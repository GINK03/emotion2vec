{"context": " More than 1 year has passed since last update.\u300c\u56de\u6587\u57fa\u6570\u300d\u3092Erlang\u3068Ruby\u3067\u3084\u3063\u3066\u307f\u307e\u3057\u305f\u3002\u4ed6\u306e\u7686\u69d8\u306b\u3088\u308b\u5b9f\u88c5\u306f \u7b2c17\u56de\u30aa\u30d5\u30e9\u30a4\u30f3\u30ea\u30a2\u30eb\u30bf\u30a4\u30e0\u3069\u3046\u66f8\u304f\u306e\u53c2\u8003\u554f\u984c \u304b\u3089\u8fbf\u308c\u307e\u3059\u3002\n\u30b3\u30f3\u30d1\u30af\u30c8\u306b\u66f8\u3051\u305f\u306e\u3067\u3001\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u306e\u8aac\u660e\u7528\u306bRuby\u3067\u66f8\u3044\u305f\u3082\u306e\u3092\u5148\u306b\u8f09\u305b\u307e\u3059\u3002\n\nsheh.rb\ndef solve(data)\n  x = data.to_i\n  x < 3 ? \"-\" : (2...x).select { |b| x == rev(x, b, 0) } * \",\"\nend\n\ndef rev(x, base, acc)\n  x == 0 ? acc : rev(x.div(base), base, acc * base + (x % base))\nend\n\n\n\nsheh.erl\n-module(sheh).\n-compile(export_all).\n\nsolve(Data) -> bases(list_to_integer(Data)).\n\nbases(1) -> \"-\";\nbases(X) -> to_s(lists:filter(fun(Base) ->\n  X =:= rev(X, Base, 0) end, lists:seq(2, X - 1))).\n\nto_s([]) -> \"-\";\nto_s(Bs) -> string:join([integer_to_list(X) || X <- Bs], \",\").\n\nrev(0, _, Acc) -> Acc;\nrev(X, Base, Acc) -> rev(X div Base, Base, Acc * Base + (X rem Base)).\n\ntest(Data, Expected) -> test(Data, solve(Data), Expected).\ntest(Data, Result, Expected) -> io:fwrite(\"~s: ~s -> ~s~n\",\n  [case Result =:= Expected of true -> ok; false -> ng end, Data, Result]).\n\ntests() ->\n  test(\"17301\", \"5,38,100,218,236,5766,17300\"), %0\n  test(\"2\", \"-\"), %1\n  test(\"1\", \"-\"), %2\n  test(\"3\", \"2\"), %3\n  test(\"4\", \"3\"), %4\n  test(\"5\", \"2,4\"), %5\n  test(\"6\", \"5\"), %6\n  test(\"10\", \"3,4,9\"), %7\n  test(\"101\", \"10,100\"), %8\n  test(\"1001\", \"10,25,76,90,142,1000\"), %9\n  test(\"10001\", \"10,24,30,42,80,100,136,10000\"), %10\n  test(\"1212\", \"22,100,201,302,403,605,1211\"), %11\n  test(\"123412\", \"62,100,205,215,30852,61705,123411\"), %12\n  test(\"5179\", \"5178\"), %13\n  test(\"4919\", \"4918\"), %14\n  test(\"5791\", \"5790\"), %15\n  test(\"5498\", \"2748,5497\"), %16\n  test(\"453\", \"150,452\"), %17\n  test(\"134\", \"66,133\"), %18\n  test(\"8489\", \"27,652,8488\"), %19\n  test(\"1234\", \"22,616,1233\"), %20\n  test(\"5497\", \"41,238,5496\"), %21\n  test(\"4763\", \"19,35,432,4762\"), %22\n  test(\"3974\", \"17,27,1986,3973\"), %23\n  test(\"3521\", \"44,55,502,3520\"), %24\n  test(\"5513\", \"20,38,53,148,5512\"), %25\n  test(\"8042\", \"23,29,60,4020,8041\"), %26\n  test(\"7442\", \"37,60,121,3720,7441\"), %27\n  test(\"4857\", \"25,1618,4856\"), %28\n  test(\"22843\", \"49,69,91,141,430,22842\"), %29\n  test(\"194823\", \"84,121,21646,64940,194822\"), %30\n  test(\"435697\", \"160,169,235,626,1822,435696\"), %31\n  test(\"142\", \"3,7,70,141\"), %32\n  test(\"886\", \"5,14,442,885\"), %33\n  test(\"3102\", \"7,65,93,140,281,516,1033,1550,3101\"), %34\n  test(\"17326\", \"11,28,99,105,8662,17325\"), %35\n  test(\"32982\", \"13,72,238,477,716,1433,5496,10993,16490,32981\"), %36\n  test(\"36\", \"5,8,11,17,35\"), %37\n  test(\"37\", \"6,36\"), %38\n  test(\"251\", \"8,250\"), %39\n  test(\"252\", \"5,10,17,20,27,35,41,62,83,125,251\"), %40\n  test(\"253\", \"12,14,22,252\"), %41\n  test(\"6643\", \"2,3,9,81,90,510,948,6642\"), %42\n  test(\"5040\", \"71,79,83,89,104,111,119,125,139,143,167,179,209,239,251,279,314,335,359,419,503,559,629,719,839,1007,1259,1679,2519,5039\"), %43\n  test(\"9240\", \"23,38,62,104,109,119,131,139,153,164,167,209,219,230,263,279,307,329,384,419,439,461,615,659,769,839,923,1154,1319,1539,1847,2309,3079,4619,9239\"). %44\n\n\nRuby\u306e\u65b9\u306f\u30c6\u30b9\u30c8\u30b1\u30fc\u30b9\u3092\u5272\u611b\u3057\u3066\u3044\u307e\u3059\u3002\u901f\u5ea6\u306b\u3064\u3044\u3066\u306f\u8003\u616e\u3057\u3066\u3044\u307e\u305b\u3093\u3002\nrev\u95a2\u6570\u306fbase\u9032\u6570\u306b\u3057\u305f\u6642\u306e\u6841\u3092\u9006\u8ee2\u3057\u305f\u5024\u3092\u8fd4\u3057\u307e\u3059\u30023\u9032\u6570\u3067112\u306b\u306a\u308b\u6570\u306a\u3089211 (\u309210\u9032\u6570\u306b\u623b\u3057\u305f\u6570) \u3092\u8fd4\u3057\u307e\u3059\u3002solve\u95a2\u6570\u306e\u4e2d\u3067\u5143\u306e\u5024\u3068rev\u3057\u305f\u3082\u306e\u3092\u6bd4\u8f03\u3057\u3001\u540c\u3058\u306a\u3089\u300cbase\u9032\u8868\u8a18\u3067\u56de\u6587\u306b\u306a\u3063\u3066\u3044\u308b\u300d\u3068\u5224\u5b9a\u3057\u3066\u3044\u307e\u3059\u3002\n\u666e\u6bb5\u304b\u3089Erlang\u3067\u66f8\u304d\u3059\u304e\u3066\u3044\u308b\u306e\u3067\u3001\u3064\u3044Ruby\u3067\u3082\u518d\u5e30\u3067\u66f8\u3044\u3066\u3057\u307e\u3044\u307e\u3059 (^^;)\n\u300c[\u56de\u6587\u57fa\u6570](http://nabetani.sakura.ne.jp/hena/ord17scheherazade/)\u300d\u3092Erlang\u3068Ruby\u3067\u3084\u3063\u3066\u307f\u307e\u3057\u305f\u3002\u4ed6\u306e\u7686\u69d8\u306b\u3088\u308b\u5b9f\u88c5\u306f [\u7b2c17\u56de\u30aa\u30d5\u30e9\u30a4\u30f3\u30ea\u30a2\u30eb\u30bf\u30a4\u30e0\u3069\u3046\u66f8\u304f\u306e\u53c2\u8003\u554f\u984c](http://qiita.com/Nabetani/items/dabe8ec57e0313229552) \u304b\u3089\u8fbf\u308c\u307e\u3059\u3002\n\n\u30b3\u30f3\u30d1\u30af\u30c8\u306b\u66f8\u3051\u305f\u306e\u3067\u3001\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u306e\u8aac\u660e\u7528\u306bRuby\u3067\u66f8\u3044\u305f\u3082\u306e\u3092\u5148\u306b\u8f09\u305b\u307e\u3059\u3002\n\n```rb:sheh.rb\ndef solve(data)\n  x = data.to_i\n  x < 3 ? \"-\" : (2...x).select { |b| x == rev(x, b, 0) } * \",\"\nend\n\ndef rev(x, base, acc)\n  x == 0 ? acc : rev(x.div(base), base, acc * base + (x % base))\nend\n```\n\n```erlang:sheh.erl\n-module(sheh).\n-compile(export_all).\n\nsolve(Data) -> bases(list_to_integer(Data)).\n\nbases(1) -> \"-\";\nbases(X) -> to_s(lists:filter(fun(Base) ->\n  X =:= rev(X, Base, 0) end, lists:seq(2, X - 1))).\n\nto_s([]) -> \"-\";\nto_s(Bs) -> string:join([integer_to_list(X) || X <- Bs], \",\").\n\nrev(0, _, Acc) -> Acc;\nrev(X, Base, Acc) -> rev(X div Base, Base, Acc * Base + (X rem Base)).\n\ntest(Data, Expected) -> test(Data, solve(Data), Expected).\ntest(Data, Result, Expected) -> io:fwrite(\"~s: ~s -> ~s~n\",\n  [case Result =:= Expected of true -> ok; false -> ng end, Data, Result]).\n\ntests() ->\n  test(\"17301\", \"5,38,100,218,236,5766,17300\"), %0\n  test(\"2\", \"-\"), %1\n  test(\"1\", \"-\"), %2\n  test(\"3\", \"2\"), %3\n  test(\"4\", \"3\"), %4\n  test(\"5\", \"2,4\"), %5\n  test(\"6\", \"5\"), %6\n  test(\"10\", \"3,4,9\"), %7\n  test(\"101\", \"10,100\"), %8\n  test(\"1001\", \"10,25,76,90,142,1000\"), %9\n  test(\"10001\", \"10,24,30,42,80,100,136,10000\"), %10\n  test(\"1212\", \"22,100,201,302,403,605,1211\"), %11\n  test(\"123412\", \"62,100,205,215,30852,61705,123411\"), %12\n  test(\"5179\", \"5178\"), %13\n  test(\"4919\", \"4918\"), %14\n  test(\"5791\", \"5790\"), %15\n  test(\"5498\", \"2748,5497\"), %16\n  test(\"453\", \"150,452\"), %17\n  test(\"134\", \"66,133\"), %18\n  test(\"8489\", \"27,652,8488\"), %19\n  test(\"1234\", \"22,616,1233\"), %20\n  test(\"5497\", \"41,238,5496\"), %21\n  test(\"4763\", \"19,35,432,4762\"), %22\n  test(\"3974\", \"17,27,1986,3973\"), %23\n  test(\"3521\", \"44,55,502,3520\"), %24\n  test(\"5513\", \"20,38,53,148,5512\"), %25\n  test(\"8042\", \"23,29,60,4020,8041\"), %26\n  test(\"7442\", \"37,60,121,3720,7441\"), %27\n  test(\"4857\", \"25,1618,4856\"), %28\n  test(\"22843\", \"49,69,91,141,430,22842\"), %29\n  test(\"194823\", \"84,121,21646,64940,194822\"), %30\n  test(\"435697\", \"160,169,235,626,1822,435696\"), %31\n  test(\"142\", \"3,7,70,141\"), %32\n  test(\"886\", \"5,14,442,885\"), %33\n  test(\"3102\", \"7,65,93,140,281,516,1033,1550,3101\"), %34\n  test(\"17326\", \"11,28,99,105,8662,17325\"), %35\n  test(\"32982\", \"13,72,238,477,716,1433,5496,10993,16490,32981\"), %36\n  test(\"36\", \"5,8,11,17,35\"), %37\n  test(\"37\", \"6,36\"), %38\n  test(\"251\", \"8,250\"), %39\n  test(\"252\", \"5,10,17,20,27,35,41,62,83,125,251\"), %40\n  test(\"253\", \"12,14,22,252\"), %41\n  test(\"6643\", \"2,3,9,81,90,510,948,6642\"), %42\n  test(\"5040\", \"71,79,83,89,104,111,119,125,139,143,167,179,209,239,251,279,314,335,359,419,503,559,629,719,839,1007,1259,1679,2519,5039\"), %43\n  test(\"9240\", \"23,38,62,104,109,119,131,139,153,164,167,209,219,230,263,279,307,329,384,419,439,461,615,659,769,839,923,1154,1319,1539,1847,2309,3079,4619,9239\"). %44\n```\n\nRuby\u306e\u65b9\u306f\u30c6\u30b9\u30c8\u30b1\u30fc\u30b9\u3092\u5272\u611b\u3057\u3066\u3044\u307e\u3059\u3002\u901f\u5ea6\u306b\u3064\u3044\u3066\u306f\u8003\u616e\u3057\u3066\u3044\u307e\u305b\u3093\u3002\n\nrev\u95a2\u6570\u306fbase\u9032\u6570\u306b\u3057\u305f\u6642\u306e\u6841\u3092\u9006\u8ee2\u3057\u305f\u5024\u3092\u8fd4\u3057\u307e\u3059\u30023\u9032\u6570\u3067112\u306b\u306a\u308b\u6570\u306a\u3089211 (\u309210\u9032\u6570\u306b\u623b\u3057\u305f\u6570) \u3092\u8fd4\u3057\u307e\u3059\u3002solve\u95a2\u6570\u306e\u4e2d\u3067\u5143\u306e\u5024\u3068rev\u3057\u305f\u3082\u306e\u3092\u6bd4\u8f03\u3057\u3001\u540c\u3058\u306a\u3089\u300cbase\u9032\u8868\u8a18\u3067\u56de\u6587\u306b\u306a\u3063\u3066\u3044\u308b\u300d\u3068\u5224\u5b9a\u3057\u3066\u3044\u307e\u3059\u3002\n\n\u666e\u6bb5\u304b\u3089Erlang\u3067\u66f8\u304d\u3059\u304e\u3066\u3044\u308b\u306e\u3067\u3001\u3064\u3044Ruby\u3067\u3082\u518d\u5e30\u3067\u66f8\u3044\u3066\u3057\u307e\u3044\u307e\u3059 (^^;)\n", "tags": ["\u3069\u3046\u66f8\u304f", "Erlang", "Ruby", "yhpg"]}