{"tags": ["Kaggle", "analytics", "Python", "\u6a5f\u68b0\u5b66\u7fd2", "\u30c7\u30fc\u30bf\u5206\u6790"], "context": "\n\n\u306f\u3058\u3081\u306b\n\u904e\u53bb\u306b\u53c2\u52a0\u3057\u305fKaggle\u306e\u60c5\u5831\u3092\u30a2\u30c3\u30d7\u3057\u3066\u3044\u304d\u307e\u3059\uff0e\n\u3053\u3053\u3067\u306f\uff0cPredicting Red Hat Business Value\u306e\u30c7\u30fc\u30bf\u7d39\u4ecb\u3068\u30d5\u30a9\u30fc\u30e9\u30e0\u3067\u306e\u76ee\u7acb\u3063\u305f\u8b70\u8ad6\u3092\u30d4\u30c3\u30af\u30a2\u30c3\u30d7\u3057\u307e\u3059\uff0e\n\u30b3\u30f3\u30da\u512a\u52dd\u8005\u306e\u30b3\u30fc\u30c9\u306b\u95a2\u3057\u3066\u306f\uff0cKaggle\u307e\u3068\u3081:RedHat(\u5f8c\u7de8)\u306b\u307e\u3068\u3081\u3066\u304a\u308a\uff0c\u3053\u3061\u3089\u306f\u6982\u8981\uff0c\u30c7\u30a3\u30b9\u30ab\u30c3\u30b7\u30e7\u30f3\uff0c\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u306e\u307e\u3068\u3081\u306b\u306a\u308a\u307e\u3059\uff0e\n(\u73fe\u5728\u4f5c\u6210\u4e2d)\n\u672c\u8a18\u4e8b\u306fPython2.7, numpy 1.11, scipy 0.17, scikit-learn 0.18, matplotlib 1.5, seaborn 0.7, pandas 0.17\u3092\u4f7f\u7528\u3057\u3066\u3044\u307e\u3059\uff0e\njupyter notebook\u4e0a\u3067\u52d5\u4f5c\u78ba\u8a8d\u6e08\u307f\u3067\u3059\uff0e(%matplotlib inline\u306f\u9069\u5f53\u306b\u4fee\u6b63\u3057\u3066\u304f\u3060\u3055\u3044)\n\u30b5\u30f3\u30d7\u30eb\u30b9\u30af\u30ea\u30d7\u30c8\u3092\u5b9f\u884c\u3057\u305f\u969b\u306b\u30a8\u30e9\u30fc\u7b49\u3042\u3063\u305f\u5834\u5408\u306f\uff0c\u30b3\u30e1\u30f3\u30c8\u3044\u305f\u3060\u3051\u308b\u3068\u52a9\u304b\u308a\u307e\u3059\uff0e\n\n\u76ee\u6b21\n\n\u6982\u8981\n\u8a55\u4fa1\u6307\u6a19\n\u30c7\u30fc\u30bf\u306e\u7d39\u4ecb\nkernels\n\n\n\u80cc\u666f\n\n\u591a\u304f\u306e\u4f01\u696d\u304c\u305d\u3046\u3067\u3042\u308b\u3088\u3046\u306b\uff0cRedHat\u306f\u81ea\u793e\u306b\u95a2\u9023\u3059\u308b\u9867\u5ba2\u60c5\u5831\u3092\u6642\u7cfb\u5217\u3067\u53ce\u96c6\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u3066\u3044\u307e\u3059\uff0e\u9867\u5ba2\u306e\u6319\u52d5\u306b\u5fdc\u3058\u305f\u4e88\u6e2c\u304b\u3089\uff0c\u3069\u306e\u500b\u4eba\u3078\u3069\u306e\u3088\u3046\u306b\u30a2\u30d7\u30ed\u30fc\u30c1\u3092\u304b\u3051\u308b\u3079\u304d\u304b\u4e88\u6e2c\u3059\u308b\u624b\u6cd5\u3092RedHat\u306f\u7814\u7a76\u3057\u3066\u3044\u307e\u3059\uff0e\u4eca\u56de\u306e\u30b3\u30f3\u30da\u3067\u306f\uff0cKaggler\u306f\u5206\u985e\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u3092\u4f5c\u6210\u3057\uff0cRedHat\u3078\u306e\u6f5c\u5728\u7684\u30d3\u30b8\u30cd\u30b9\u4fa1\u5024\u3092\u9867\u5ba2\u306e\u7279\u5fb4\u3084\u6d3b\u52d5\u304b\u3089\u4e88\u6e2c\u3059\u308b\u3053\u3068\u306b\u6311\u6226\u3057\u3066\u3044\u307e\u3059\uff0e\n\u4eca\u56de\u306e\u7279\u5fb4\u7684\u306a\u70b9\u3068\u3057\u3066\u306f\uff0c\u4ee5\u4e0b\u304c\u6319\u3052\u3089\u308c\u307e\u3059\uff0e\n\n\uff12\u5024\u5206\u985e\u3092ROC\u3067\u30b9\u30b3\u30a2\u30ea\u30f3\u30b0\u3059\u308b\u4ee3\u8868\u7684\u306a\u5206\u985e\u554f\u984c\n1\u7a2e\u985e\u3092\u9664\u3044\u305f\u5168\u3066\u306e\u5165\u529b\u304c\u30ab\u30c6\u30b4\u30ea\uff0c\u307e\u305f\u306f\u30d0\u30a4\u30ca\u30ea\u60c5\u5831\u304b\u3089\u306a\u308b\nmagic features\u3067\u307b\u307c\u5b8c\u5168\u306a\u5165\u529b\u304c\u5f97\u3089\u308c\u308b\nXGBoost\u3068Keras\u304c\u63a8\u5b9a\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u3068\u3057\u3066\u983b\u7e41\u306b\u4f7f\u7528\u3055\u308c\u308b\n\n\n2. \u8a55\u4fa1\u6307\u6a19\n\u4eca\u56de\u306e\u8a55\u4fa1\u6307\u6a19\u306fROC\u306b\u306a\u308a\u307e\u3059\uff0e(\u65e5\u672c\u8a9e\u7248wikipedia)\nROC\u306f\uff12\u5024\u5206\u985e\u554f\u984c\u3092\u8a55\u4fa1\u3059\u308b\u6307\u6a19\u3068\u3057\u3066\u6700\u3082\u6a19\u6e96\u7684\u306a\u6307\u6a19\u3067\u3059\uff0e\u69d8\u3005\u306a\u30b5\u30a4\u30c8\u3067\u8a73\u3057\u3044\u8aac\u660e\u304c\u3055\u308c\u3066\u3044\u308b\u306e\u3067\uff0c\u8a73\u7d30\u306f\u300cROC\u300d\u300cF-measure\u300d\u3067\u691c\u7d22\u3057\u3066\u304f\u3060\u3055\u3044\uff0e\n\u307e\u305f\uff0c\u63d0\u51fa\u30d5\u30a1\u30a4\u30eb\u306e\u5f62\u5f0f\u306f\uff0cactivity id\u3068\u7d50\u679c\u306e\u78ba\u7387\u306e\u5bfe\u5fdc\u3092CSV\u3067\u8868\u73fe\u3057\u307e\u3059\uff0e\nactivity_id,outcome\nact1_1,0\nact1_100006,0\nact1_100050,0\netc.\n\n\n3. \u30c7\u30fc\u30bf\u306e\u7d39\u4ecb\n\u4eca\u56de\u306e\u30c7\u30fc\u30bf\u306f\uff12\u3064\u306e\u7570\u306a\u308b\u30d5\u30a1\u30a4\u30eb\u304b\u3089\u306a\u308a\u307e\u3059(people\u30d5\u30a1\u30a4\u30eb\uff0cact_train\u30d5\u30a1\u30a4\u30eb)\uff0epeople\u30d5\u30a1\u30a4\u30eb\u306b\u306f\u9867\u5ba2id\u306b\u7d10\u4ed8\u3051\u3055\u308c\u305f\u500b\u4eba\u60c5\u5831\u304c\u542b\u307e\u308c\u3066\u3044\u307e\u3059\uff0eactivity\u30d5\u30a1\u30a4\u30eb\u306b\u306f\u9867\u5ba2id\u306b\u7d10\u4ed8\u3051\u3055\u308c\u305f\u9867\u5ba2\u306e\u884c\u52d5\u5c65\u6b74\uff0c\u305d\u3057\u3066\u305d\u306e\u884c\u52d5\u306e\u7d50\u679c(outcome)\u304c\u542b\u307e\u308c\u3066\u3044\u307e\u3059\uff0e\npeople\u30d5\u30a1\u30a4\u30eb\u306f\u9867\u5ba2\u306e\u6027\u8cea(char*)\u3092\u6240\u6301\u3057\u3066\u3044\u307e\u3059\uff0echar_38\u3092\u9664\u304f\u5168\u3066\u306e\u7279\u5fb4\u91cf(char*)\u306f\u533f\u540d\u5316\u3055\u308c\u305f\u30ab\u30c6\u30b4\u30ea\u60c5\u5831\u3067\u3059\uff0echar_38\u306f\u30ab\u30c6\u30b4\u30ea\u60c5\u5831\u3067\u306f\u306a\u304f\u9023\u7d9a\u5024\u3092\u542b\u3093\u3067\u3044\u307e\u3059\uff0e\nactivity\u30d5\u30a1\u30a4\u30eb\u306eoutcome\u306f\uff0c\u4e00\u5b9a\u306e\u6642\u9593\u5e45\u306b\u304a\u3044\u3066\u305d\u306e\u9867\u5ba2\u304c\u7279\u5b9a\u306e\u76ee\u6a19\u3092\u9054\u6210\u3057\u305f\u304b\u3092\u793a\u3057\u3066\u3044\u307e\u3059\uff0eactivity\u30d5\u30a1\u30a4\u30eb\u306b\u306f\uff0cactivity_category\u3068\u3044\u3046\u60c5\u5831\u3082\u542b\u307e\u308c\u3066\u3044\u307e\u3059\uff0e\u3053\u308c\u306f\uff0c\u5404\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u306e\u60c5\u5831\u304c\u6301\u3064\u7279\u5fb4\u91cf(char*)\u306e\u6240\u5c5e\u3059\u308b\u30ab\u30c6\u30b4\u30ea\u3092\u793a\u3057\u3066\u304a\u308a\uff0c\u4f8b\u3048\u3070type 1\u306e\u30c7\u30fc\u30bf(char*)\u3068type2-7\u306e\u30c7\u30fc\u30bf(char*)\u306f\u7570\u306a\u308b\u7279\u5fb4\u91cf\u3092\u793a\u3057\u3066\u3044\u307e\u3059\uff0e\n\u3053\u308c\u3089\uff12\u3064\u306e\u30c7\u30fc\u30bf\u30d5\u30a1\u30a4\u30eb\u3092person_id\u3067\u30de\u30fc\u30b8\u3059\u308b\u3053\u3068\u306b\u3088\u308a\uff0c\u30d3\u30b8\u30cd\u30b9\u4fa1\u5024\u3092\u751f\u307f\u51fa\u3059\u9867\u5ba2\u3092\u4e88\u6e2c\u3059\u308b\u3053\u3068\u304c\u4eca\u56de\u306e\u30b3\u30f3\u30da\u306e\u76ee\u7684\u306b\u306a\u308a\u307e\u3059\uff0e\n\nact_test.csv\nactivity_id date    activity_category   char_1  char_2  char_3  char_4  char_5  char_6  char_7  char_8  char_9  char_10\npeople_id                                                   \nppl_100004  act1_249281 2022-07-20  type 1  type 5  type 10 type 5  type 1  type 6  type 1  type 1  type 7  type 4  NaN\nppl_100004  act2_230855 2022-07-20  type 5  NaN NaN NaN NaN NaN NaN NaN NaN NaN type 682\nppl_10001   act1_240724 2022-10-14  type 1  type 12 type 1  type 5  type 4  type 6  type 1  type 1  type 13 type 10 NaN\n\n\n\npeople.csv\n    char_1  group_1 char_2  date    char_3  char_4  char_5  char_6  char_7  char_8  ... char_29 char_30 char_31 char_32 char_33 char_34 char_35 char_36 char_37 char_38\npeople_id                                                                                   \nppl_100 type 2  group 17304 type 2  2021-06-29  type 5  type 5  type 5  type 3  type 11 type 2  ... False   True    True    False   False   True    True    True    False   36\nppl_100002  type 2  group 8688  type 3  2021-01-06  type 28 type 9  type 5  type 3  type 11 type 2  ... False   True    True    True    True    True    True    True    False   76\nppl_100003  type 2  group 33592 type 3  2022-06-10  type 4  type 8  type 5  type 2  type 5  type 2  ... False   False   True    True    True    True    False   True    True    99\n\n\n\n4. Kernels\n\n4.1. Exploration of the date features\n\u307e\u305a\u306f\u30e9\u30a4\u30d6\u30e9\u30ea\u3068\u30c7\u30fc\u30bf\u306e\u30a4\u30f3\u30dd\u30fc\u30c8\u304b\u3089\uff0e\n\nimport_data.py\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\n%matplotlib inline\n\ntrain = pd.read_csv('../input/act_train.csv', parse_dates=['date'])\ntest = pd.read_csv('../input/act_test.csv', parse_dates=['date'])\nppl = pd.read_csv('../input/people.csv', parse_dates=['date'])\n\ndf_train = pd.merge(train, ppl, on='people_id')\ndf_test = pd.merge(test, ppl, on='people_id')\ndel train, test, ppl\n\n\n\u30c7\u30fc\u30bf\u306e\u4e2d\u8eab\u3092\u898b\u3066\u3044\u304d\u307e\u3059\uff0e\n\nshow_day.py\nfor d in ['date_x', 'date_y']:\n    print('Start of ' + d + ': ' + str(df_train[d].min().date()))\n    print('  End of ' + d + ': ' + str(df_train[d].max().date()))\n    print('Range of ' + d + ': ' + str(df_train[d].max() - df_train[d].min()) + '\\n')\n\n\n\u5b9f\u884c\u7d50\u679c\u306f\u3053\u3061\u3089\uff0e\nStart of date_x: 2022-07-17\n  End of date_x: 2023-08-31\nRange of date_x: 410 days 00:00:00\n\nStart of date_y: 2020-05-18\n  End of date_y: 2023-08-31\nRange of date_y: 1200 days 00:00:00\n\n\u6570\u5e74\u5206\u306e\u30c7\u30fc\u30bf\u3092\u898b\u3066\u3044\u308b\u3053\u3068\u304c\u308f\u304b\u308a\u307e\u3059\uff0e\u5b9f\u969b\u306f\u3053\u308c\u3089\u306e\u30c7\u30fc\u30bf\u306f\u533f\u540d\u5316\u3055\u308c\u3066\u3044\u307e\u3059\u304c\uff0c\u4eca\u56de\u306f\u6570\u5e74\u5206\u306e\u30c7\u30fc\u30bf\u3092\u6271\u3063\u3066\u3044\u308b\u3068\u4eee\u5b9a\u3057\u307e\u3059\uff0e\ndate_x\u306f\uff11\u5e74\u5206\uff0cdate_y\u306f3\u5e74\u5206\u306e\u30c7\u30fc\u30bf\u304c\u5165\u3063\u3066\u3044\u307e\u3059\uff0e\u7d42\u4e86\u6642\u671f\u306fdate_x, date_y\u5171\u306b\u540c\u3058\u3067\u3059\uff0e\n\n4.1.1. \u30c7\u30fc\u30bf\u69cb\u9020\ndate\u3067\u30b0\u30eb\u30fc\u30d4\u30f3\u30b0\u3092\u3057\u305f\u306e\u3061\uff0coutcome\u306e\u78ba\u7387\u3092\u53ef\u8996\u5316\u3057\u307e\u3059\uff0e\n\nfeature_structure.py\ndate_x = pd.DataFrame()\ndate_x['Class probability'] = df_train.groupby('date_x')['outcome'].mean()\ndate_x['Frequency'] = df_train.groupby('date_x')['outcome'].size()\ndate_x.plot(secondary_y='Frequency', figsize=(20, 10))\n\n\n\n\u30b0\u30e9\u30d5\u3092\u898b\u3066\u307f\u308b\u3068\uff0c\u9031\u672b\u306e\u30a4\u30d9\u30f3\u30c8\u304c\u5c11\u306a\u304f\uff0c\u304b\u3064outcome\u304c1\u306b\u306a\u308b\u78ba\u7387\u81ea\u4f53\u3082\u6e1b\u3063\u3066\u3044\u308b\u3053\u3068\u304c\u308f\u304b\u308a\u307e\u3059\uff0e\u307e\u305f\uff0c\u5e73\u65e5\u306foutcome\u306e\u5e73\u5747\u5024\u304c\u5b89\u5b9a\u3057\u3066\u3044\u307e\u3059\u304c\uff0c\u9031\u672b\u306b\u306a\u308b\u3068\u305d\u308c\u304c0.4~0.3\u307e\u3067\u4f4e\u4e0b\u3059\u308b\u3053\u3068\u304c\u898b\u3066\u53d6\u308c\u307e\u3059\uff0e\n\u540c\u69d8\u306bdate_y\u3082\u898b\u3066\u898b\u307e\u3057\u3087\u3046\uff0e\n\nshow_day_y.py\ndate_y = pd.DataFrame()\ndate_y['Class probability'] = df_train.groupby('date_y')['outcome'].mean()\ndate_y['Frequency'] = df_train.groupby('date_y')['outcome'].size()\n# We need to split it into multiple graphs since the time-scale is too long to show well on one graph\ni = int(len(date_y) / 3)\ndate_y[:i].plot(secondary_y='Frequency', figsize=(20, 5), title='date_y Year 1')\ndate_y[i:2*i].plot(secondary_y='Frequency', figsize=(20, 5), title='date_y Year 2')\ndate_y[2*i:].plot(secondary_y='Frequency', figsize=(20, 5), title='date_y Year 3')\n\n\n\u7d50\u679c\u304c\u3053\u3061\u3089\u3067\u3059\uff0e\n\n\n\ndate_x\u3068\u540c\u69d8\u306b\u5e73\u65e5\u4f11\u65e5\u3067\u9055\u3044\u304c\u898b\u3066\u53d6\u308c\u307e\u3059\uff0e\n\n4.1.2. test set\n\u5148\u7a0b\u307e\u3067\u306e\u89e3\u6790\u3067\uff0coutcome\u3068date\u306e\u95a2\u4fc2\u6027\u3092\u898b\u3066\u304d\u307e\u3057\u305f\uff0e\n\u3053\u306e\u95a2\u4fc2\u6027\u304ctest\u30c7\u30fc\u30bf\u3067\u3082\u898b\u308c\u308b\u304b\u3069\u3046\u304b\u78ba\u8a8d\u3057\u3066\u3044\u304d\u307e\u3059\uff0e\n\u5f53\u7136\u306a\u304c\u3089\uff0ctest\u30c7\u30fc\u30bf\u306eoutcome\u306f\u898b\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u305b\u3093\uff0e\u305d\u3053\u3067\u30b5\u30f3\u30d7\u30eb\u306e\u5206\u6563\u3060\u3051\u30c1\u30a7\u30c3\u30af\u3057\u3066\u3044\u304d\u307e\u3059\uff0e\n\nshow_test.py\ndate_x_freq = pd.DataFrame()\ndate_x_freq['Training set'] = df_train.groupby('date_x')['activity_id'].count()\ndate_x_freq['Testing set'] = df_test.groupby('date_x')['activity_id'].count()\ndate_x_freq.plot(secondary_y='Testing set', figsize=(20, 8), \n                 title='Comparison of date_x distribution between training/testing set')\ndate_y_freq = pd.DataFrame()\ndate_y_freq['Training set'] = df_train.groupby('date_y')['activity_id'].count()\ndate_y_freq['Testing set'] = df_test.groupby('date_y')['activity_id'].count()\ndate_y_freq[:i].plot(secondary_y='Testing set', figsize=(20, 8), \n                 title='Comparison of date_y distribution between training/testing set (first year)')\ndate_y_freq[2*i:].plot(secondary_y='Testing set', figsize=(20, 8), \n                 title='Comparison of date_y distribution between training/testing set (last year)\n\n\n\u7d50\u679c\u306f\u6b21\u306e\u901a\u308a\uff0e\n\n\n\n\u76f8\u95a2\u4fc2\u6570\u304b\u3089train\u30c7\u30fc\u30bf\u3068\u306e\u985e\u4f3c\u6027\u3092\u30c1\u30a7\u30c3\u30af\u3057\u307e\u3059\uff0e\n\ncorrelation.py\nprint('Correlation of date_x distribution in training/testing sets: ' + str(np.corrcoef(date_x_freq.T)[0,1]))\nprint('Correlation of date_y distribution in training/testing sets: ' + str(np.corrcoef(date_y_freq.fillna(0).T)[0,1]))\n\n\nCorrelation of date_x distribution in training/testing sets: 0.853430807691\nCorrelation of date_y distribution in training/testing sets: 0.709589035055\n\ndate_x\u306b\u304a\u3044\u3066\uff0ctraining, testing\u30c7\u30fc\u30bf\u3067\u985e\u4f3c\u3057\u305f\u69cb\u9020\u3092\u898b\u3064\u3051\u307e\u3057\u305f\uff0e\u3064\u307e\u308a\uff0ctrain, test\u30c7\u30fc\u30bf\u306fpeople\u306b\u57fa\u3065\u3044\u3066\u5206\u5272\u3055\u308c\u3066\u304a\u308a\uff0c\u6642\u9593\u3084\u4ed6\u306e\u8981\u56e0\u306b\u57fa\u3065\u3044\u305f\u5206\u5272\u3067\u306f\u306a\u3044\u3068\u3044\u3046\u3053\u3068\u3067\u3059\uff0e\n\u540c\u69d8\u306b9\u670810\u6708\u306b\u7279\u5fb4\u304c\u898b\u3066\u53d6\u308c\u307e\u3059\uff0e\ndate_y\u306b\u304a\u3044\u3066\u306f\u76f8\u95a2\u304c\u4f4e\u3044\u3053\u3068\u304c\u308f\u304b\u308a\u307e\u3059\uff0etest\u30c7\u30fc\u30bf\u306b\u306f\u521d\u3081\u306e\u5e74\u306b\u591a\u304f\u306e\u30b9\u30d1\u30a4\u30af\u304c\u542b\u307e\u308c\u3066\u304a\u308a\uff0c\u5e74\u3054\u3068\u306b\u30b9\u30d1\u30a4\u30af\u306e\u76f8\u95a2\u95a2\u4fc2\u304c\u5909\u5316\u3057\u3066\u3044\u305d\u3046\u3067\u3059\uff0e\n\u5e74\u5225\u3067\u5206\u3051\u3066\u76f8\u95a2\u3092\u898b\u3066\u898b\u307e\u3057\u3087\u3046\uff0e\n\ncorrelation_date_y.py\nprint('date_y correlation in year 1: ' + str(np.corrcoef(date_y_freq[:i].fillna(0).T)[0,1]))\nprint('date_y correlation in year 2: ' + str(np.corrcoef(date_y_freq[i:2*i].fillna(0).T)[0,1]))\nprint('date_y correlation in year 3: ' + str(np.corrcoef(date_y_freq[2*i:].fillna(0).T)[0,1]))\n\n\ndate_y correlation in year 1: 0.237056344324\ndate_y correlation in year 2: 0.682344221229\ndate_y correlation in year 3: 0.807207224857\n\n3\u5e74\u76ee\u306e\u76f8\u95a2\u304c\u6700\u3082\u9ad8\u3044\u3053\u3068\u304c\u308f\u304b\u308a\u307e\u3059\uff0e\n\n4.1.3. Probability features\ndate probability\u3092\u7279\u5fb4\u91cf\u3068\u3057\u3066\u751f\u6210\u3057\u3066\u898b\u307e\u3059\uff0e\n\nprobability_features.py\nfrom sklearn.metrics import roc_auc_score\nfeatures = pd.DataFrame()\nfeatures['date_x_prob'] = df_train.groupby('date_x')['outcome'].transform('mean')\nfeatures['date_y_prob'] = df_train.groupby('date_y')['outcome'].transform('mean')\nfeatures['date_x_count'] = df_train.groupby('date_x')['outcome'].transform('count')\nfeatures['date_y_count'] = df_train.groupby('date_y')['outcome'].transform('count')\n_=[print(f.ljust(12) + ' AUC: ' + str(round(roc_auc_score(df_train['outcome'], features[f]), 6))) for f in features.columns]\n\n\ndate_x_prob  AUC: 0.626182\ndate_y_prob  AUC: 0.720296\ndate_x_count AUC: 0.465697\ndate_y_count AUC: 0.475916\n\n\n4.2. Group_1 date trick\n\u4eca\u56de\u306e\u30b3\u30f3\u30da\u3067\u306f\uff0ckernels\u3067\u516c\u958b\u3055\u308c\u305fmagic features\u3092\u4f7f\u7528\u3059\u308b\u306890%\u3092\u8d85\u3048\u308bROC\u304c\u9054\u6210\u3067\u304d\u308b\u3068\u3044\u3046\u72b6\u6cc1\u3067\u3057\u305f\uff0e\n\u3053\u3053\u3067\u306f\u305d\u306emagic feature\u3092\u8aac\u660e\u3057\u305fkernel\u306b\u3064\u3044\u3066\u8aac\u660e\u3057\u307e\u3059\uff0e\n\u307e\u305a\u306f\u30e9\u30a4\u30d6\u30e9\u30ea\u306e\u30a4\u30f3\u30dd\u30fc\u30c8\u304b\u3089\uff0e\nimport pandas as pd\nimport numpy as np\nimport datetime\nfrom itertools import product\nfrom scipy import interpolate ## For other interpolation functions.\n\n\u6b21\u306b\u30c7\u30fc\u30bf\u306eread\u3068boolean\u309201\u3078\u30a8\u30f3\u30b3\u30fc\u30c9\u3059\u308b\u4f5c\u696d\uff0e\ndate\u3082datetime\u30bf\u30a4\u30d7\u3078\u5909\u66f4\u3057\u307e\u3059\uff0e\n# Load and transform people data. \nppl = pd.read_csv('../input/people.csv')\n\n# Convert booleans to integers.\np_logi = ppl.select_dtypes(include=['bool']).columns\nppl[p_logi] = ppl[p_logi].astype('int')\ndel p_logi\n\n# Transform date.\nppl['date'] = pd.to_datetime(ppl['date'])\n\n\u540c\u69d8\u306e\u4f5c\u696d\u3092act\u30d5\u30a1\u30a4\u30eb\u3067\u3082\u884c\u3044\u307e\u3059\uff0eoutcome\u30ab\u30e9\u30e0\u3092nan\u3067\u57cb\u3081\u3066\u4f5c\u6210\u3057\uff0ctrain\u3068test\u3092\u5408\u4f53\u3055\u305b\u307e\u3059\uff0e\n# Load activities.\n# Read and combine.\nactivs = pd.read_csv('../input/act_train.csv')\nTestActivs = pd.read_csv('../input/act_test.csv')\nTestActivs['outcome'] = np.nan ## Add the missing column to the test set.\nactivs = pd.concat([activs, TestActivs], axis=0) ## Append train and test sets.\ndel TestActivs\n\nact\u30d5\u30a1\u30a4\u30eb\u306b\u306f\u591a\u304f\u306e\u5909\u6570\u304c\u3042\u308a\u307e\u3059\u304c\uff0cpeople_id, outcome, activity_id, date\u306e\u307f\u306b\u30bf\u30fc\u30b2\u30c3\u30c8\u3092\u7d5e\u3063\u3066\u53d6\u308a\u51fa\u3057\u307e\u3059\uff0e\n\u53d6\u308a\u51fa\u3057\u305factivs\u3092people\u30d5\u30a1\u30a4\u30eb\u304b\u3089read\u3057\u305fppl\u3078\uff08people_id)\u3068\u7d10\u4ed8\u3051\u3057\u3066\u30de\u30fc\u30b8\u3057\u307e\u3059\uff0e\n# Extract only required variables.\nactivs = activs[['people_id', 'outcome', 'activity_id', 'date']] ## Let's look at these columns only.\n# Merge people data into activities.\n## This keeps all the rows from activities.\nd1 = pd.merge(activs, ppl, on='people_id', how='right')\n\n## These are the indices of the rows from the test set.\ntestset = ppl[ppl['people_id'].isin(d1[d1['outcome'].isnull()]['people_id'])].index\n\n    d1['activdate'] = pd.to_datetime(d1['date_x'])\n\n    del activs\n\n\n4.3. outcome\u3068group_1, char_38\u306e\u8a55\u4fa1\n\u307e\u305a\u306f\u30c7\u30fc\u30bf\u306e\u53ef\u8996\u5316\u304b\u3089\u884c\u3044\u307e\u3059\uff0e\n\u3053\u3061\u3089\u306e\u4f8b\u306f\u30b5\u30f3\u30d7\u30eb\u30b9\u30af\u30ea\u30d7\u30c8\u304c\u306e\u3063\u3066\u3044\u307e\u305b\u3093\u304c\uff0c\u89e3\u6790\u5185\u5bb9\u306f\u975e\u5e38\u306b\u30b7\u30f3\u30d7\u30eb\u3067\u3059\uff0e\n\u3053\u3053\u3067\u306e\u76ee\u7684\u306f\u6b21\u306e\uff13\u3064\u3067\u3059\uff0e\n\npeople data\u3092\u6d3b\u7528\u3057\u305f\u3088\u308a\u6d17\u7df4\u3057\u305f\u30e2\u30c7\u30eb\u3092\u8a73\u7d30\u306b\u8aac\u660e\u3059\u308b\n\u65e2\u5b58\u30e2\u30c7\u30eb\u3092activities data\u307e\u3067\u8003\u616e\u3067\u304d\u308b\u3088\u3046\u62e1\u5f35\u3057\uff0c\u9867\u5ba2\u306e\u884c\u52d5\u5909\u5316\u3092\u8003\u3048\u308b\n\u3053\u308c\u3089\uff12\u3064\u306e\u30e2\u30c7\u30eb\u3092\u4e88\u6e2c\u5236\u5ea6\u6539\u5584\u306b\u5f79\u7acb\u3066\u308b\n\n\n4.3.1. char_38\u306f\u4f55\u3092\u610f\u5473\u3059\u308b\u304b\n\u552f\u4e00\u9023\u7d9a\u5024\u3067\u4e0e\u3048\u3089\u308c\u305fchar_38\u3092\u898b\u3066\u3044\u304d\u307e\u3059\uff0e\ntrain\u306echar_38\u3092outcome\u3067\u5206\u5272\u3057\u305f\u7d50\u679c\u304c\u3053\u3061\u3089\u3067\u3059\uff0e\n\n\u304b\u306a\u308a\u7279\u5fb4\u7684\u306a\u5206\u5e03\u3092\u3057\u3066\u3044\u307e\u3059\uff0e\n\u6b21\u306btrain\u3068test\u3067char_38\u306e\u5206\u5e03\u3092\u6bd4\u8f03\u3057\u307e\u3059\uff0e\n\n\u307b\u307c\u540c\u3058\u5206\u5e03\u3092\u3057\u3066\u3044\u308b\u3053\u3068\u304c\u308f\u304b\u308a\u307e\u3059\uff0e\n\u6b21\u306bpeople data\u3068outcome\u306e\u95a2\u4fc2\u6027\u3092\u898b\u3066\u3044\u304d\u307e\u3059\uff0e\noutcome\u304c\u5168\u30660\uff0c1\u306e\u9867\u5ba2\u3068\uff0c0,1\u4e21\u65b9\u3092\u542b\u3093\u3060\u9867\u5ba2\u3092\u68d2\u30b0\u30e9\u30d5\u3067\u30d7\u30ed\u30c3\u30c8\u3057\u307e\u3059\uff0e\n\n\u307b\u307c\u5168\u3066\u306e\u9867\u5ba2\u306f0\u307e\u305f\u306f1\u306b\u504f\u3063\u3066\u3044\u308b\u3053\u3068\u304c\u308f\u304b\u308a\u307e\u3059\uff0e\n\u6700\u5f8c\u306bchar_38\u3068ROC\u306e\u95a2\u4fc2\u3092\u53ef\u8996\u5316\u3057\u307e\u3059\uff0e\u3053\u3053\u3067\uff0c\u5148\u307b\u3069\u306e0\u307e\u305f\u306f1\u306e\u307f\u306e\u9867\u5ba2\u30c7\u30fc\u30bf\u3060\u3051\u3092\u4f7f\u7528\u3057\u305f\u5834\u5408\u306e\u4e88\u6e2c\u7d50\u679c\u3068\uff0c\u3069\u3061\u3089\u3082\u542b\u3093\u3060\u9867\u5ba2\u30c7\u30fc\u30bf\u306e\u4e88\u6e2c\u7d50\u679c\u3092\u5206\u3051\u3066\u898b\u3066\u3044\u304d\u307e\u3059\uff0e\ndmi3kno\u306e\u8a18\u8ff0\u3067\u306f\u4f55\u306e\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u3092\u4f7f\u7528\u3057\u305f\u304b\u7279\u306b\u66f8\u3044\u3066\u3044\u307e\u305b\u3093\u304c\uff0c\u304a\u305d\u3089\u304fXGBoost\u3092\u4f7f\u7528\u3057\u3066\u3044\u308b\u306e\u3067\u306f\u3068\u601d\u3044\u307e\u3059\uff0e\n\n\u4ee5\u4e0a\u306e\u7d50\u679c\u304b\u3089\uff0cchar_38\u3092\u4f7f\u7528\u3059\u308b\u3060\u3051\u3067\uff0c\u307b\u307c\u5168\u3066\u306e\u9867\u5ba2\u306eoutcome\u3092\u304b\u306a\u308a\u9ad8\u7cbe\u5ea6\u3067\u4e88\u6e2c\u304c\u3067\u304d\u308b\u3053\u3068\u304c\u308f\u304b\u308a\u307e\u3057\u305f\uff0e\n\u4e00\u65b9\u3067\uff0c\u9014\u4e2d\u3067outcome\u3092\u5909\u66f4\u3057\u305f\u9867\u5ba2\u306b\u5bfe\u3059\u308b\u63a8\u5b9a\u306f\u5f31\u3044\u3053\u3068\u304c\u308f\u304b\u308a\u307e\u3059\uff0e\n\n4.3.2. magic features\u306e\u7279\u5fb4\n\u307e\u305a\u306f6\u4eba\u306e\uff0c\u9014\u4e2d\u3067outcome\u3092\u5909\u66f4\u3057\u305f\u9867\u5ba2\u72b6\u6cc1\u3092\u6642\u7cfb\u5217\u3067\u898b\u3066\u3044\u304d\u307e\u3059\uff0e\n\n\u591a\u304f\u306e\u9867\u5ba2\u306f\u89b3\u6e2c\u4e2d\uff11\u5ea6\u3060\u3051outcome\u3092\u5909\u66f4\u3057\u3066\u3044\u308b\u3053\u3068\u304c\u308f\u304b\u308a\u307e\u3059\uff0e\u4eca\u56de\u306e\u554f\u984c\u306f\uff0c\u3053\u306eoutcome\u306e\u5909\u5316\u3092\u4e88\u6e2c\u3059\u308b\u6642\u7cfb\u5217\u30c7\u30fc\u30bf\u306e\u5206\u6790\uff0c\u3068\u3044\u3046\u3053\u3068\u306b\u306a\u308a\u307e\u3059\uff0e\n\u6b21\u306b\u7279\u5b9a\u306e\u9867\u5ba2\u30af\u30e9\u30b9\u30bf\u304c\u3044\u3064outcome\u3092\u5909\u66f4\u3057\u305f\u306e\u304b\u898b\u3066\u3044\u304d\u307e\u3059\uff0e\n\u6b20\u640d\u5024\u3092\u542b\u3080\u90e8\u5206\u304c\u5c11\u306a\u3044\u5909\u6570\uff0c\u3053\u3053\u3067\u306f\u5909\u6570group_1\u3092\u898b\u3066\u3044\u304d\u307e\u3059\uff0e\n\u5148\u7a0b\u3068\u540c\u69d8\u306e\u30b0\u30e9\u30d5\u3092\uff0c6\u3064\u306e\u30e9\u30f3\u30c0\u30e0\u306b\u9078\u3093\u3060group_1\u3067\u898b\u3066\u898b\u307e\u3057\u3087\u3046\uff0e\n\npeople_id\u3067\u30b0\u30e9\u30d5\u5316\u3057\u305f\u5834\u5408\u3068\u5168\u304f\u540c\u3058\u5909\u5316\u3092\u3057\u3066\u3044\u308b\u3053\u3068\u304c\u308f\u304b\u308a\u307e\u3059\uff0e\u3064\u307e\u308a\u4eca\u56de\u306e\u30b3\u30f3\u30da\u306e\u76ee\u6a19\u306f\uff0cgroup_1\u6bce\u306e\u5909\u5316\u70b9\u3092\u4e88\u6e2c\u3059\u308b\u554f\u984c\u3078\u3068\u5e30\u7740\u3059\u308b\u3053\u3068\u3068\u306a\u308a\u307e\u3059\uff0e\n\n\u3053\u308c\u3089\u306e\u300c\u4e2d\u9593\u8981\u7d20\u300d\u304c\u305d\u308c\u305e\u308c\u306e\u30b0\u30eb\u30fc\u30d7(0\u307e\u305f\u306f1)\u3078\u6301\u3063\u3066\u3044\u304f\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\uff0e\n\n4.3.3. \u7591\u554f\u70b9\n\u3053\u3053\u307e\u3067\u306e\u89e3\u6790\u3067\u3044\u304f\u3064\u304b\u306e\u7591\u554f\u70b9\u304c\u751f\u3058\u307e\u3059\uff0e\n\n\u3044\u304f\u3064\u306e\u30b0\u30eb\u30fc\u30d7\u304c\u5358\u4e00\u306eoutcome\u3092\u6301\u3063\u3066\u3044\u308b\u306e\u304b\uff0etest\u306e\u60c5\u5831\u3092train\u306e\u6642\u9593\u60c5\u5831\u3078\u843d\u3068\u3057\u8fbc\u3080\u3053\u3068\u304c\u3067\u304d\u308c\u3070\uff0c\u591a\u304f\u306eoutcome\u3092\u5358\u7d14\u306a0, 1\u3067\u57cb\u3081\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\uff0e\n\u5e7e\u3064\u306e\u30b0\u30eb\u30fc\u30d7\u304c\u66d6\u6627\u306aoutcome\u3092\u6240\u6301\u3057\u3066\u3044\u308b\u304b\uff0e\n\u5e7e\u3064\u306e\u30b0\u30eb\u30fc\u30d7\u304ctran\u30c7\u30fc\u30bf\u306b\u51fa\u3066\u304d\u3066\u3044\u306a\u3044test\u30c7\u30fc\u30bf\u72ec\u81ea\u306e\u30b0\u30eb\u30fc\u30d7\u304b\n\n\u3053\u308c\u3089\u3092\u898b\u3066\u3044\u304f\u3068\u6b21\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3059\uff0e\n\n\u3053\u3053\u3067ambivalent\u306f0, 1\u3092\u4e21\u65b9\u542b\u3080\u30b0\u30eb\u30fc\u30d7\uff0cuniform\u306f\u5358\u4e00\u306e0, 1\u3057\u304b\u6301\u305f\u306a\u3044\u30b0\u30eb\u30fc\u30d7\uff0cunknown\u306ftest\u30b0\u30eb\u30fc\u30d7\u72ec\u81ea\u306e\u30b0\u30eb\u30fc\u30d7\u3067\u3059\uff0e\n\u6b21\u306b\u5404\u30b0\u30eb\u30fc\u30d7\u306f\u5e7e\u3064\u306eactivities\u3092\u542b\u3080\u306e\u304b\u898b\u3066\u3044\u304d\u307e\u3059\uff0e\u4f8b\u3048\u3070\uff0c(\u660e\u78ba\u306a\u6307\u6a19\u304c\u306a\u3044\u72b6\u614b\u3067)\u30e9\u30f3\u30c0\u30e0\u306b\u3053\u308c\u3089\u3092\u4e88\u6e2c\u3057\u305f\u5834\u5408\uff0c\u30a8\u30f3\u30c8\u30ed\u30d4\u30fc\u6700\u5927\u5316\u306e\u89b3\u70b9\u304b\u3089\u6700\u9ad8\u30b9\u30b3\u30a2\u306f\u5e7e\u3064\u306b\u306a\u308b\u304b\u304c\u308f\u304b\u308a\u307e\u3059\uff0eXGBoost\u3068char_38\u3092\u4f7f\u7528\u3059\u308b\u3053\u3068\u3067\uff0c\u3053\u308c\u3089\u306e\u7cf8\u53e3\u3068\u306a\u308a\u307e\u3059\uff0e\n\n\u3082\u3046\u4e00\u3064\uff0cambivalent\u30b0\u30eb\u30fc\u30d7\u3067\u306f\u4e00\u4f53\u4f55\u56deoutcome\u304c\u5909\u5316\u3057\u305f\u306e\u304b\u3092\u898b\u3066\u3044\u304d\u307e\u3059\uff0e\n\nbouncing\u306f0\u304b\u30891\uff0c1\u304b\u30890\u306e\u53cc\u65b9\u5411\u5909\u5316\u304c\u767a\u751f\u3057\u305f\u30b0\u30eb\u30fc\u30d7\u3067\u3059\uff0e\n\u3053\u308c\u3089bouncing\u306e\u4e2d\u3067\uff0c\uff12\u56de\u4ee5\u4e0a\u306e\u5909\u5316\u304c\u751f\u3058\u3066\u3044\u308b\u30b0\u30eb\u30fc\u30d7\u306f\u3044\u304f\u3064\u304b\u898b\u3066\u3044\u304d\u307e\u3059\uff0e\n## \n##     0     1     2     3 \n## 25646  3687   565     1\n\n\u6700\u5f8c\u306b\uff0c\u3053\u308c\u3089\u306e\u8907\u6570\u56deoutcome\u304c\u5909\u5316\u3057\u305f\u30b0\u30eb\u30fc\u30d7\u3092\u3044\u304f\u3064\u304b\u53ef\u8996\u5316\u3057\u307e\u3059\uff0e\n\n# \u306f\u3058\u3081\u306b\n\u904e\u53bb\u306b\u53c2\u52a0\u3057\u305fKaggle\u306e\u60c5\u5831\u3092\u30a2\u30c3\u30d7\u3057\u3066\u3044\u304d\u307e\u3059\uff0e\n\u3053\u3053\u3067\u306f\uff0c[Predicting Red Hat Business Value](https://www.kaggle.com/c/predicting-red-hat-business-value)\u306e\u30c7\u30fc\u30bf\u7d39\u4ecb\u3068\u30d5\u30a9\u30fc\u30e9\u30e0\u3067\u306e\u76ee\u7acb\u3063\u305f\u8b70\u8ad6\u3092\u30d4\u30c3\u30af\u30a2\u30c3\u30d7\u3057\u307e\u3059\uff0e\n\u30b3\u30f3\u30da\u512a\u52dd\u8005\u306e\u30b3\u30fc\u30c9\u306b\u95a2\u3057\u3066\u306f\uff0c[Kaggle\u307e\u3068\u3081:RedHat(\u5f8c\u7de8)]()\u306b\u307e\u3068\u3081\u3066\u304a\u308a\uff0c\u3053\u3061\u3089\u306f\u6982\u8981\uff0c\u30c7\u30a3\u30b9\u30ab\u30c3\u30b7\u30e7\u30f3\uff0c\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u306e\u307e\u3068\u3081\u306b\u306a\u308a\u307e\u3059\uff0e\n(\u73fe\u5728\u4f5c\u6210\u4e2d)\n\n\u672c\u8a18\u4e8b\u306fPython2.7, numpy 1.11, scipy 0.17, scikit-learn 0.18, matplotlib 1.5, seaborn 0.7, pandas 0.17\u3092\u4f7f\u7528\u3057\u3066\u3044\u307e\u3059\uff0e\njupyter notebook\u4e0a\u3067\u52d5\u4f5c\u78ba\u8a8d\u6e08\u307f\u3067\u3059\uff0e(%matplotlib inline\u306f\u9069\u5f53\u306b\u4fee\u6b63\u3057\u3066\u304f\u3060\u3055\u3044)\n\u30b5\u30f3\u30d7\u30eb\u30b9\u30af\u30ea\u30d7\u30c8\u3092\u5b9f\u884c\u3057\u305f\u969b\u306b\u30a8\u30e9\u30fc\u7b49\u3042\u3063\u305f\u5834\u5408\u306f\uff0c\u30b3\u30e1\u30f3\u30c8\u3044\u305f\u3060\u3051\u308b\u3068\u52a9\u304b\u308a\u307e\u3059\uff0e\n\n# \u76ee\u6b21\n1. \u6982\u8981\n2. \u8a55\u4fa1\u6307\u6a19\n3. \u30c7\u30fc\u30bf\u306e\u7d39\u4ecb\n4. kernels\n\n# \u80cc\u666f\n\n![front_page.png](https://kaggle2.blob.core.windows.net/competitions/kaggle/5261/media/Red_Hat_Kaggle_Co-brand_rgb_logo.png)\n\n\u591a\u304f\u306e\u4f01\u696d\u304c\u305d\u3046\u3067\u3042\u308b\u3088\u3046\u306b\uff0cRedHat\u306f\u81ea\u793e\u306b\u95a2\u9023\u3059\u308b\u9867\u5ba2\u60c5\u5831\u3092\u6642\u7cfb\u5217\u3067\u53ce\u96c6\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u3066\u3044\u307e\u3059\uff0e\u9867\u5ba2\u306e\u6319\u52d5\u306b\u5fdc\u3058\u305f\u4e88\u6e2c\u304b\u3089\uff0c\u3069\u306e\u500b\u4eba\u3078\u3069\u306e\u3088\u3046\u306b\u30a2\u30d7\u30ed\u30fc\u30c1\u3092\u304b\u3051\u308b\u3079\u304d\u304b\u4e88\u6e2c\u3059\u308b\u624b\u6cd5\u3092RedHat\u306f\u7814\u7a76\u3057\u3066\u3044\u307e\u3059\uff0e\u4eca\u56de\u306e\u30b3\u30f3\u30da\u3067\u306f\uff0cKaggler\u306f\u5206\u985e\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u3092\u4f5c\u6210\u3057\uff0cRedHat\u3078\u306e\u6f5c\u5728\u7684\u30d3\u30b8\u30cd\u30b9\u4fa1\u5024\u3092\u9867\u5ba2\u306e\u7279\u5fb4\u3084\u6d3b\u52d5\u304b\u3089\u4e88\u6e2c\u3059\u308b\u3053\u3068\u306b\u6311\u6226\u3057\u3066\u3044\u307e\u3059\uff0e\n\n\u4eca\u56de\u306e\u7279\u5fb4\u7684\u306a\u70b9\u3068\u3057\u3066\u306f\uff0c\u4ee5\u4e0b\u304c\u6319\u3052\u3089\u308c\u307e\u3059\uff0e\n\n* \uff12\u5024\u5206\u985e\u3092ROC\u3067\u30b9\u30b3\u30a2\u30ea\u30f3\u30b0\u3059\u308b\u4ee3\u8868\u7684\u306a\u5206\u985e\u554f\u984c\n* 1\u7a2e\u985e\u3092\u9664\u3044\u305f\u5168\u3066\u306e\u5165\u529b\u304c\u30ab\u30c6\u30b4\u30ea\uff0c\u307e\u305f\u306f\u30d0\u30a4\u30ca\u30ea\u60c5\u5831\u304b\u3089\u306a\u308b\n* magic features\u3067\u307b\u307c\u5b8c\u5168\u306a\u5165\u529b\u304c\u5f97\u3089\u308c\u308b\n* XGBoost\u3068[Keras](https://keras.io/ja/)\u304c\u63a8\u5b9a\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u3068\u3057\u3066\u983b\u7e41\u306b\u4f7f\u7528\u3055\u308c\u308b\n\n# 2. \u8a55\u4fa1\u6307\u6a19\n\u4eca\u56de\u306e\u8a55\u4fa1\u6307\u6a19\u306f[ROC](https://en.wikipedia.org/wiki/Receiver_operating_characteristic)\u306b\u306a\u308a\u307e\u3059\uff0e([\u65e5\u672c\u8a9e\u7248wikipedia](https://ja.wikipedia.org/wiki/%E5%8F%97%E4%BF%A1%E8%80%85%E6%93%8D%E4%BD%9C%E7%89%B9%E6%80%A7))\n\nROC\u306f\uff12\u5024\u5206\u985e\u554f\u984c\u3092\u8a55\u4fa1\u3059\u308b\u6307\u6a19\u3068\u3057\u3066\u6700\u3082\u6a19\u6e96\u7684\u306a\u6307\u6a19\u3067\u3059\uff0e\u69d8\u3005\u306a\u30b5\u30a4\u30c8\u3067\u8a73\u3057\u3044\u8aac\u660e\u304c\u3055\u308c\u3066\u3044\u308b\u306e\u3067\uff0c\u8a73\u7d30\u306f\u300cROC\u300d\u300cF-measure\u300d\u3067\u691c\u7d22\u3057\u3066\u304f\u3060\u3055\u3044\uff0e\n\n\u307e\u305f\uff0c\u63d0\u51fa\u30d5\u30a1\u30a4\u30eb\u306e\u5f62\u5f0f\u306f\uff0cactivity id\u3068\u7d50\u679c\u306e\u78ba\u7387\u306e\u5bfe\u5fdc\u3092CSV\u3067\u8868\u73fe\u3057\u307e\u3059\uff0e\n\n```\nactivity_id,outcome\nact1_1,0\nact1_100006,0\nact1_100050,0\netc.\n```\n\n# 3. \u30c7\u30fc\u30bf\u306e\u7d39\u4ecb\n[\u4eca\u56de\u306e\u30c7\u30fc\u30bf](https://www.kaggle.com/c/predicting-red-hat-business-value/data)\u306f\uff12\u3064\u306e\u7570\u306a\u308b\u30d5\u30a1\u30a4\u30eb\u304b\u3089\u306a\u308a\u307e\u3059(people\u30d5\u30a1\u30a4\u30eb\uff0cact_train\u30d5\u30a1\u30a4\u30eb)\uff0epeople\u30d5\u30a1\u30a4\u30eb\u306b\u306f\u9867\u5ba2id\u306b\u7d10\u4ed8\u3051\u3055\u308c\u305f\u500b\u4eba\u60c5\u5831\u304c\u542b\u307e\u308c\u3066\u3044\u307e\u3059\uff0eactivity\u30d5\u30a1\u30a4\u30eb\u306b\u306f\u9867\u5ba2id\u306b\u7d10\u4ed8\u3051\u3055\u308c\u305f\u9867\u5ba2\u306e\u884c\u52d5\u5c65\u6b74\uff0c\u305d\u3057\u3066\u305d\u306e\u884c\u52d5\u306e\u7d50\u679c(outcome)\u304c\u542b\u307e\u308c\u3066\u3044\u307e\u3059\uff0e\n\npeople\u30d5\u30a1\u30a4\u30eb\u306f\u9867\u5ba2\u306e\u6027\u8cea(char*)\u3092\u6240\u6301\u3057\u3066\u3044\u307e\u3059\uff0echar_38\u3092\u9664\u304f\u5168\u3066\u306e\u7279\u5fb4\u91cf(char*)\u306f\u533f\u540d\u5316\u3055\u308c\u305f\u30ab\u30c6\u30b4\u30ea\u60c5\u5831\u3067\u3059\uff0echar_38\u306f\u30ab\u30c6\u30b4\u30ea\u60c5\u5831\u3067\u306f\u306a\u304f\u9023\u7d9a\u5024\u3092\u542b\u3093\u3067\u3044\u307e\u3059\uff0e\n\nactivity\u30d5\u30a1\u30a4\u30eb\u306eoutcome\u306f\uff0c\u4e00\u5b9a\u306e\u6642\u9593\u5e45\u306b\u304a\u3044\u3066\u305d\u306e\u9867\u5ba2\u304c\u7279\u5b9a\u306e\u76ee\u6a19\u3092\u9054\u6210\u3057\u305f\u304b\u3092\u793a\u3057\u3066\u3044\u307e\u3059\uff0eactivity\u30d5\u30a1\u30a4\u30eb\u306b\u306f\uff0cactivity_category\u3068\u3044\u3046\u60c5\u5831\u3082\u542b\u307e\u308c\u3066\u3044\u307e\u3059\uff0e\u3053\u308c\u306f\uff0c\u5404\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u306e\u60c5\u5831\u304c\u6301\u3064\u7279\u5fb4\u91cf(char*)\u306e\u6240\u5c5e\u3059\u308b\u30ab\u30c6\u30b4\u30ea\u3092\u793a\u3057\u3066\u304a\u308a\uff0c\u4f8b\u3048\u3070type 1\u306e\u30c7\u30fc\u30bf(char*)\u3068type2-7\u306e\u30c7\u30fc\u30bf(char*)\u306f\u7570\u306a\u308b\u7279\u5fb4\u91cf\u3092\u793a\u3057\u3066\u3044\u307e\u3059\uff0e\n\n\u3053\u308c\u3089\uff12\u3064\u306e\u30c7\u30fc\u30bf\u30d5\u30a1\u30a4\u30eb\u3092person_id\u3067\u30de\u30fc\u30b8\u3059\u308b\u3053\u3068\u306b\u3088\u308a\uff0c\u30d3\u30b8\u30cd\u30b9\u4fa1\u5024\u3092\u751f\u307f\u51fa\u3059\u9867\u5ba2\u3092\u4e88\u6e2c\u3059\u308b\u3053\u3068\u304c\u4eca\u56de\u306e\u30b3\u30f3\u30da\u306e\u76ee\u7684\u306b\u306a\u308a\u307e\u3059\uff0e\n\n```act_test.csv\nactivity_id\tdate\tactivity_category\tchar_1\tchar_2\tchar_3\tchar_4\tchar_5\tchar_6\tchar_7\tchar_8\tchar_9\tchar_10\npeople_id\t\t\t\t\t\t\t\t\t\t\t\t\t\nppl_100004\tact1_249281\t2022-07-20\ttype 1\ttype 5\ttype 10\ttype 5\ttype 1\ttype 6\ttype 1\ttype 1\ttype 7\ttype 4\tNaN\nppl_100004\tact2_230855\t2022-07-20\ttype 5\tNaN\tNaN\tNaN\tNaN\tNaN\tNaN\tNaN\tNaN\tNaN\ttype 682\nppl_10001\tact1_240724\t2022-10-14\ttype 1\ttype 12\ttype 1\ttype 5\ttype 4\ttype 6\ttype 1\ttype 1\ttype 13\ttype 10\tNaN\n```\n\n```people.csv\n\tchar_1\tgroup_1\tchar_2\tdate\tchar_3\tchar_4\tchar_5\tchar_6\tchar_7\tchar_8\t...\tchar_29\tchar_30\tchar_31\tchar_32\tchar_33\tchar_34\tchar_35\tchar_36\tchar_37\tchar_38\npeople_id\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\nppl_100\ttype 2\tgroup 17304\ttype 2\t2021-06-29\ttype 5\ttype 5\ttype 5\ttype 3\ttype 11\ttype 2\t...\tFalse\tTrue\tTrue\tFalse\tFalse\tTrue\tTrue\tTrue\tFalse\t36\nppl_100002\ttype 2\tgroup 8688\ttype 3\t2021-01-06\ttype 28\ttype 9\ttype 5\ttype 3\ttype 11\ttype 2\t...\tFalse\tTrue\tTrue\tTrue\tTrue\tTrue\tTrue\tTrue\tFalse\t76\nppl_100003\ttype 2\tgroup 33592\ttype 3\t2022-06-10\ttype 4\ttype 8\ttype 5\ttype 2\ttype 5\ttype 2\t...\tFalse\tFalse\tTrue\tTrue\tTrue\tTrue\tFalse\tTrue\tTrue\t99\n```\n\n# 4. Kernels\n\n## 4.1. Exploration of the date features\n\u307e\u305a\u306f\u30e9\u30a4\u30d6\u30e9\u30ea\u3068\u30c7\u30fc\u30bf\u306e\u30a4\u30f3\u30dd\u30fc\u30c8\u304b\u3089\uff0e\n\n```import_data.py\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\nimport matplotlib.pyplot as plt\n%matplotlib inline\n\ntrain = pd.read_csv('../input/act_train.csv', parse_dates=['date'])\ntest = pd.read_csv('../input/act_test.csv', parse_dates=['date'])\nppl = pd.read_csv('../input/people.csv', parse_dates=['date'])\n\ndf_train = pd.merge(train, ppl, on='people_id')\ndf_test = pd.merge(test, ppl, on='people_id')\ndel train, test, ppl\n```\n\n\u30c7\u30fc\u30bf\u306e\u4e2d\u8eab\u3092\u898b\u3066\u3044\u304d\u307e\u3059\uff0e\n\n```show_day.py\nfor d in ['date_x', 'date_y']:\n    print('Start of ' + d + ': ' + str(df_train[d].min().date()))\n    print('  End of ' + d + ': ' + str(df_train[d].max().date()))\n    print('Range of ' + d + ': ' + str(df_train[d].max() - df_train[d].min()) + '\\n')\n```\n\n\u5b9f\u884c\u7d50\u679c\u306f\u3053\u3061\u3089\uff0e\n\n```\nStart of date_x: 2022-07-17\n  End of date_x: 2023-08-31\nRange of date_x: 410 days 00:00:00\n\nStart of date_y: 2020-05-18\n  End of date_y: 2023-08-31\nRange of date_y: 1200 days 00:00:00\n```\n\n\u6570\u5e74\u5206\u306e\u30c7\u30fc\u30bf\u3092\u898b\u3066\u3044\u308b\u3053\u3068\u304c\u308f\u304b\u308a\u307e\u3059\uff0e\u5b9f\u969b\u306f\u3053\u308c\u3089\u306e\u30c7\u30fc\u30bf\u306f\u533f\u540d\u5316\u3055\u308c\u3066\u3044\u307e\u3059\u304c\uff0c\u4eca\u56de\u306f\u6570\u5e74\u5206\u306e\u30c7\u30fc\u30bf\u3092\u6271\u3063\u3066\u3044\u308b\u3068\u4eee\u5b9a\u3057\u307e\u3059\uff0e\ndate_x\u306f\uff11\u5e74\u5206\uff0cdate_y\u306f3\u5e74\u5206\u306e\u30c7\u30fc\u30bf\u304c\u5165\u3063\u3066\u3044\u307e\u3059\uff0e\u7d42\u4e86\u6642\u671f\u306fdate_x, date_y\u5171\u306b\u540c\u3058\u3067\u3059\uff0e\n\n### 4.1.1. \u30c7\u30fc\u30bf\u69cb\u9020\n\ndate\u3067\u30b0\u30eb\u30fc\u30d4\u30f3\u30b0\u3092\u3057\u305f\u306e\u3061\uff0coutcome\u306e\u78ba\u7387\u3092\u53ef\u8996\u5316\u3057\u307e\u3059\uff0e\n\n```feature_structure.py\ndate_x = pd.DataFrame()\ndate_x['Class probability'] = df_train.groupby('date_x')['outcome'].mean()\ndate_x['Frequency'] = df_train.groupby('date_x')['outcome'].size()\ndate_x.plot(secondary_y='Frequency', figsize=(20, 10))\n```\n\n![__results___6_1.png](https://qiita-image-store.s3.amazonaws.com/0/72093/432986e6-5bda-5067-7f7a-eca2832c0dc9.png)\n\n\u30b0\u30e9\u30d5\u3092\u898b\u3066\u307f\u308b\u3068\uff0c\u9031\u672b\u306e\u30a4\u30d9\u30f3\u30c8\u304c\u5c11\u306a\u304f\uff0c\u304b\u3064outcome\u304c1\u306b\u306a\u308b\u78ba\u7387\u81ea\u4f53\u3082\u6e1b\u3063\u3066\u3044\u308b\u3053\u3068\u304c\u308f\u304b\u308a\u307e\u3059\uff0e\u307e\u305f\uff0c\u5e73\u65e5\u306foutcome\u306e\u5e73\u5747\u5024\u304c\u5b89\u5b9a\u3057\u3066\u3044\u307e\u3059\u304c\uff0c\u9031\u672b\u306b\u306a\u308b\u3068\u305d\u308c\u304c0.4~0.3\u307e\u3067\u4f4e\u4e0b\u3059\u308b\u3053\u3068\u304c\u898b\u3066\u53d6\u308c\u307e\u3059\uff0e\n\u540c\u69d8\u306bdate_y\u3082\u898b\u3066\u898b\u307e\u3057\u3087\u3046\uff0e\n\n```show_day_y.py\ndate_y = pd.DataFrame()\ndate_y['Class probability'] = df_train.groupby('date_y')['outcome'].mean()\ndate_y['Frequency'] = df_train.groupby('date_y')['outcome'].size()\n# We need to split it into multiple graphs since the time-scale is too long to show well on one graph\ni = int(len(date_y) / 3)\ndate_y[:i].plot(secondary_y='Frequency', figsize=(20, 5), title='date_y Year 1')\ndate_y[i:2*i].plot(secondary_y='Frequency', figsize=(20, 5), title='date_y Year 2')\ndate_y[2*i:].plot(secondary_y='Frequency', figsize=(20, 5), title='date_y Year 3')\n```\n\n\u7d50\u679c\u304c\u3053\u3061\u3089\u3067\u3059\uff0e\n\n![__results___8_1.png](https://qiita-image-store.s3.amazonaws.com/0/72093/854f4e6c-91e5-52dc-10ac-39996a286187.png)\n![__results___8_2.png](https://qiita-image-store.s3.amazonaws.com/0/72093/432b7500-baae-ee55-6c4e-cb71c620ff87.png)\n![__results___8_3.png](https://qiita-image-store.s3.amazonaws.com/0/72093/656e91c6-b699-635c-d3a0-5e397a7d914b.png)\n\ndate_x\u3068\u540c\u69d8\u306b\u5e73\u65e5\u4f11\u65e5\u3067\u9055\u3044\u304c\u898b\u3066\u53d6\u308c\u307e\u3059\uff0e\n\n### 4.1.2. test set\n\u5148\u7a0b\u307e\u3067\u306e\u89e3\u6790\u3067\uff0coutcome\u3068date\u306e\u95a2\u4fc2\u6027\u3092\u898b\u3066\u304d\u307e\u3057\u305f\uff0e\n\u3053\u306e\u95a2\u4fc2\u6027\u304ctest\u30c7\u30fc\u30bf\u3067\u3082\u898b\u308c\u308b\u304b\u3069\u3046\u304b\u78ba\u8a8d\u3057\u3066\u3044\u304d\u307e\u3059\uff0e\n\u5f53\u7136\u306a\u304c\u3089\uff0ctest\u30c7\u30fc\u30bf\u306eoutcome\u306f\u898b\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u305b\u3093\uff0e\u305d\u3053\u3067\u30b5\u30f3\u30d7\u30eb\u306e\u5206\u6563\u3060\u3051\u30c1\u30a7\u30c3\u30af\u3057\u3066\u3044\u304d\u307e\u3059\uff0e\n\n```show_test.py\ndate_x_freq = pd.DataFrame()\ndate_x_freq['Training set'] = df_train.groupby('date_x')['activity_id'].count()\ndate_x_freq['Testing set'] = df_test.groupby('date_x')['activity_id'].count()\ndate_x_freq.plot(secondary_y='Testing set', figsize=(20, 8), \n                 title='Comparison of date_x distribution between training/testing set')\ndate_y_freq = pd.DataFrame()\ndate_y_freq['Training set'] = df_train.groupby('date_y')['activity_id'].count()\ndate_y_freq['Testing set'] = df_test.groupby('date_y')['activity_id'].count()\ndate_y_freq[:i].plot(secondary_y='Testing set', figsize=(20, 8), \n                 title='Comparison of date_y distribution between training/testing set (first year)')\ndate_y_freq[2*i:].plot(secondary_y='Testing set', figsize=(20, 8), \n                 title='Comparison of date_y distribution between training/testing set (last year)\n```\n\n\u7d50\u679c\u306f\u6b21\u306e\u901a\u308a\uff0e\n\n![__results___10_1.png](https://qiita-image-store.s3.amazonaws.com/0/72093/451685d5-7e72-9dcd-571e-c560d440ba6b.png)\n![__results___10_2.png](https://qiita-image-store.s3.amazonaws.com/0/72093/753fd738-ac52-8ef8-6502-0f279896c0d0.png)\n![__results___10_3.png](https://qiita-image-store.s3.amazonaws.com/0/72093/70c72b30-06dd-7015-a994-3bfcf38f639e.png)\n\n\u76f8\u95a2\u4fc2\u6570\u304b\u3089train\u30c7\u30fc\u30bf\u3068\u306e\u985e\u4f3c\u6027\u3092\u30c1\u30a7\u30c3\u30af\u3057\u307e\u3059\uff0e\n\n```correlation.py\nprint('Correlation of date_x distribution in training/testing sets: ' + str(np.corrcoef(date_x_freq.T)[0,1]))\nprint('Correlation of date_y distribution in training/testing sets: ' + str(np.corrcoef(date_y_freq.fillna(0).T)[0,1]))\n```\n\n```\nCorrelation of date_x distribution in training/testing sets: 0.853430807691\nCorrelation of date_y distribution in training/testing sets: 0.709589035055\n```\n\ndate_x\u306b\u304a\u3044\u3066\uff0ctraining, testing\u30c7\u30fc\u30bf\u3067\u985e\u4f3c\u3057\u305f\u69cb\u9020\u3092\u898b\u3064\u3051\u307e\u3057\u305f\uff0e\u3064\u307e\u308a\uff0ctrain, test\u30c7\u30fc\u30bf\u306fpeople\u306b\u57fa\u3065\u3044\u3066\u5206\u5272\u3055\u308c\u3066\u304a\u308a\uff0c\u6642\u9593\u3084\u4ed6\u306e\u8981\u56e0\u306b\u57fa\u3065\u3044\u305f\u5206\u5272\u3067\u306f\u306a\u3044\u3068\u3044\u3046\u3053\u3068\u3067\u3059\uff0e\n\u540c\u69d8\u306b9\u670810\u6708\u306b\u7279\u5fb4\u304c\u898b\u3066\u53d6\u308c\u307e\u3059\uff0e\n\ndate_y\u306b\u304a\u3044\u3066\u306f\u76f8\u95a2\u304c\u4f4e\u3044\u3053\u3068\u304c\u308f\u304b\u308a\u307e\u3059\uff0etest\u30c7\u30fc\u30bf\u306b\u306f\u521d\u3081\u306e\u5e74\u306b\u591a\u304f\u306e\u30b9\u30d1\u30a4\u30af\u304c\u542b\u307e\u308c\u3066\u304a\u308a\uff0c\u5e74\u3054\u3068\u306b\u30b9\u30d1\u30a4\u30af\u306e\u76f8\u95a2\u95a2\u4fc2\u304c\u5909\u5316\u3057\u3066\u3044\u305d\u3046\u3067\u3059\uff0e\n\u5e74\u5225\u3067\u5206\u3051\u3066\u76f8\u95a2\u3092\u898b\u3066\u898b\u307e\u3057\u3087\u3046\uff0e\n\n```correlation_date_y.py\nprint('date_y correlation in year 1: ' + str(np.corrcoef(date_y_freq[:i].fillna(0).T)[0,1]))\nprint('date_y correlation in year 2: ' + str(np.corrcoef(date_y_freq[i:2*i].fillna(0).T)[0,1]))\nprint('date_y correlation in year 3: ' + str(np.corrcoef(date_y_freq[2*i:].fillna(0).T)[0,1]))\n```\n\n```\ndate_y correlation in year 1: 0.237056344324\ndate_y correlation in year 2: 0.682344221229\ndate_y correlation in year 3: 0.807207224857\n```\n\n3\u5e74\u76ee\u306e\u76f8\u95a2\u304c\u6700\u3082\u9ad8\u3044\u3053\u3068\u304c\u308f\u304b\u308a\u307e\u3059\uff0e\n\n### 4.1.3. Probability features\ndate probability\u3092\u7279\u5fb4\u91cf\u3068\u3057\u3066\u751f\u6210\u3057\u3066\u898b\u307e\u3059\uff0e\n\n```probability_features.py\nfrom sklearn.metrics import roc_auc_score\nfeatures = pd.DataFrame()\nfeatures['date_x_prob'] = df_train.groupby('date_x')['outcome'].transform('mean')\nfeatures['date_y_prob'] = df_train.groupby('date_y')['outcome'].transform('mean')\nfeatures['date_x_count'] = df_train.groupby('date_x')['outcome'].transform('count')\nfeatures['date_y_count'] = df_train.groupby('date_y')['outcome'].transform('count')\n_=[print(f.ljust(12) + ' AUC: ' + str(round(roc_auc_score(df_train['outcome'], features[f]), 6))) for f in features.columns]\n```\n\n```\ndate_x_prob  AUC: 0.626182\ndate_y_prob  AUC: 0.720296\ndate_x_count AUC: 0.465697\ndate_y_count AUC: 0.475916\n```\n\n\n\n## 4.2. Group_1 date trick\n\u4eca\u56de\u306e\u30b3\u30f3\u30da\u3067\u306f\uff0c[kernels\u3067\u516c\u958b\u3055\u308c\u305fmagic features](https://www.kaggle.com/ijkilchenko/predicting-red-hat-business-value/python-ver-of-group-1-and-date-trick/code\n)\u3092\u4f7f\u7528\u3059\u308b\u306890%\u3092\u8d85\u3048\u308bROC\u304c\u9054\u6210\u3067\u304d\u308b\u3068\u3044\u3046\u72b6\u6cc1\u3067\u3057\u305f\uff0e\n\u3053\u3053\u3067\u306f\u305d\u306emagic feature\u3092\u8aac\u660e\u3057\u305fkernel\u306b\u3064\u3044\u3066\u8aac\u660e\u3057\u307e\u3059\uff0e\n\n\u307e\u305a\u306f\u30e9\u30a4\u30d6\u30e9\u30ea\u306e\u30a4\u30f3\u30dd\u30fc\u30c8\u304b\u3089\uff0e\n\n```\nimport pandas as pd\nimport numpy as np\nimport datetime\nfrom itertools import product\nfrom scipy import interpolate ## For other interpolation functions.\n```\n\u6b21\u306b\u30c7\u30fc\u30bf\u306eread\u3068boolean\u309201\u3078\u30a8\u30f3\u30b3\u30fc\u30c9\u3059\u308b\u4f5c\u696d\uff0e\ndate\u3082datetime\u30bf\u30a4\u30d7\u3078\u5909\u66f4\u3057\u307e\u3059\uff0e\n\n```\n# Load and transform people data. \nppl = pd.read_csv('../input/people.csv')\n\n# Convert booleans to integers.\np_logi = ppl.select_dtypes(include=['bool']).columns\nppl[p_logi] = ppl[p_logi].astype('int')\ndel p_logi\n\n# Transform date.\nppl['date'] = pd.to_datetime(ppl['date'])\n```\n\u540c\u69d8\u306e\u4f5c\u696d\u3092act\u30d5\u30a1\u30a4\u30eb\u3067\u3082\u884c\u3044\u307e\u3059\uff0eoutcome\u30ab\u30e9\u30e0\u3092nan\u3067\u57cb\u3081\u3066\u4f5c\u6210\u3057\uff0ctrain\u3068test\u3092\u5408\u4f53\u3055\u305b\u307e\u3059\uff0e\n\n```\n# Load activities.\n# Read and combine.\nactivs = pd.read_csv('../input/act_train.csv')\nTestActivs = pd.read_csv('../input/act_test.csv')\nTestActivs['outcome'] = np.nan ## Add the missing column to the test set.\nactivs = pd.concat([activs, TestActivs], axis=0) ## Append train and test sets.\ndel TestActivs\n```\n\nact\u30d5\u30a1\u30a4\u30eb\u306b\u306f\u591a\u304f\u306e\u5909\u6570\u304c\u3042\u308a\u307e\u3059\u304c\uff0cpeople_id, outcome, activity_id, date\u306e\u307f\u306b\u30bf\u30fc\u30b2\u30c3\u30c8\u3092\u7d5e\u3063\u3066\u53d6\u308a\u51fa\u3057\u307e\u3059\uff0e\n\u53d6\u308a\u51fa\u3057\u305factivs\u3092people\u30d5\u30a1\u30a4\u30eb\u304b\u3089read\u3057\u305fppl\u3078\uff08people_id)\u3068\u7d10\u4ed8\u3051\u3057\u3066\u30de\u30fc\u30b8\u3057\u307e\u3059\uff0e\n\n```\n# Extract only required variables.\nactivs = activs[['people_id', 'outcome', 'activity_id', 'date']] ## Let's look at these columns only.\n# Merge people data into activities.\n## This keeps all the rows from activities.\nd1 = pd.merge(activs, ppl, on='people_id', how='right')\n```\n\n\n```\n## These are the indices of the rows from the test set.\ntestset = ppl[ppl['people_id'].isin(d1[d1['outcome'].isnull()]['people_id'])].index\n\n    d1['activdate'] = pd.to_datetime(d1['date_x'])\n\n    del activs\n```\n\n\n\n\n\n## 4.3. outcome\u3068group_1, char_38\u306e\u8a55\u4fa1\n\u307e\u305a\u306f\u30c7\u30fc\u30bf\u306e\u53ef\u8996\u5316\u304b\u3089\u884c\u3044\u307e\u3059\uff0e\n[\u3053\u3061\u3089\u306e\u4f8b](https://www.kaggle.com/dmi3kno/predicting-red-hat-business-value/redhat-hack-in-plain-english-eda/comments)\u306f\u30b5\u30f3\u30d7\u30eb\u30b9\u30af\u30ea\u30d7\u30c8\u304c\u306e\u3063\u3066\u3044\u307e\u305b\u3093\u304c\uff0c\u89e3\u6790\u5185\u5bb9\u306f\u975e\u5e38\u306b\u30b7\u30f3\u30d7\u30eb\u3067\u3059\uff0e\n\u3053\u3053\u3067\u306e\u76ee\u7684\u306f\u6b21\u306e\uff13\u3064\u3067\u3059\uff0e\n\n* people data\u3092\u6d3b\u7528\u3057\u305f\u3088\u308a\u6d17\u7df4\u3057\u305f\u30e2\u30c7\u30eb\u3092\u8a73\u7d30\u306b\u8aac\u660e\u3059\u308b\n* \u65e2\u5b58\u30e2\u30c7\u30eb\u3092activities data\u307e\u3067\u8003\u616e\u3067\u304d\u308b\u3088\u3046\u62e1\u5f35\u3057\uff0c\u9867\u5ba2\u306e\u884c\u52d5\u5909\u5316\u3092\u8003\u3048\u308b\n* \u3053\u308c\u3089\uff12\u3064\u306e\u30e2\u30c7\u30eb\u3092\u4e88\u6e2c\u5236\u5ea6\u6539\u5584\u306b\u5f79\u7acb\u3066\u308b\n\n\n### 4.3.1. char_38\u306f\u4f55\u3092\u610f\u5473\u3059\u308b\u304b\n\u552f\u4e00\u9023\u7d9a\u5024\u3067\u4e0e\u3048\u3089\u308c\u305fchar_38\u3092\u898b\u3066\u3044\u304d\u307e\u3059\uff0e\ntrain\u306echar_38\u3092outcome\u3067\u5206\u5272\u3057\u305f\u7d50\u679c\u304c\u3053\u3061\u3089\u3067\u3059\uff0e\n\n![unnamed-chunk-2-1.png](https://qiita-image-store.s3.amazonaws.com/0/72093/53e57d16-da81-b46d-e1bb-dd2a3ee459ba.png)\n\n\u304b\u306a\u308a\u7279\u5fb4\u7684\u306a\u5206\u5e03\u3092\u3057\u3066\u3044\u307e\u3059\uff0e\n\u6b21\u306btrain\u3068test\u3067char_38\u306e\u5206\u5e03\u3092\u6bd4\u8f03\u3057\u307e\u3059\uff0e\n\n![unnamed-chunk-3-1.png](https://qiita-image-store.s3.amazonaws.com/0/72093/bda91194-caa0-3733-a087-8451367182f6.png)\n\n\u307b\u307c\u540c\u3058\u5206\u5e03\u3092\u3057\u3066\u3044\u308b\u3053\u3068\u304c\u308f\u304b\u308a\u307e\u3059\uff0e\n\u6b21\u306bpeople data\u3068outcome\u306e\u95a2\u4fc2\u6027\u3092\u898b\u3066\u3044\u304d\u307e\u3059\uff0e\noutcome\u304c\u5168\u30660\uff0c1\u306e\u9867\u5ba2\u3068\uff0c0,1\u4e21\u65b9\u3092\u542b\u3093\u3060\u9867\u5ba2\u3092\u68d2\u30b0\u30e9\u30d5\u3067\u30d7\u30ed\u30c3\u30c8\u3057\u307e\u3059\uff0e\n\n![unnamed-chunk-4-1.png](https://qiita-image-store.s3.amazonaws.com/0/72093/6faa829f-2de5-0b46-fea5-2607c0ab807a.png)\n\n\u307b\u307c\u5168\u3066\u306e\u9867\u5ba2\u306f0\u307e\u305f\u306f1\u306b\u504f\u3063\u3066\u3044\u308b\u3053\u3068\u304c\u308f\u304b\u308a\u307e\u3059\uff0e\n\u6700\u5f8c\u306bchar_38\u3068ROC\u306e\u95a2\u4fc2\u3092\u53ef\u8996\u5316\u3057\u307e\u3059\uff0e\u3053\u3053\u3067\uff0c\u5148\u307b\u3069\u306e0\u307e\u305f\u306f1\u306e\u307f\u306e\u9867\u5ba2\u30c7\u30fc\u30bf\u3060\u3051\u3092\u4f7f\u7528\u3057\u305f\u5834\u5408\u306e\u4e88\u6e2c\u7d50\u679c\u3068\uff0c\u3069\u3061\u3089\u3082\u542b\u3093\u3060\u9867\u5ba2\u30c7\u30fc\u30bf\u306e\u4e88\u6e2c\u7d50\u679c\u3092\u5206\u3051\u3066\u898b\u3066\u3044\u304d\u307e\u3059\uff0e\ndmi3kno\u306e\u8a18\u8ff0\u3067\u306f\u4f55\u306e\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u3092\u4f7f\u7528\u3057\u305f\u304b\u7279\u306b\u66f8\u3044\u3066\u3044\u307e\u305b\u3093\u304c\uff0c\u304a\u305d\u3089\u304fXGBoost\u3092\u4f7f\u7528\u3057\u3066\u3044\u308b\u306e\u3067\u306f\u3068\u601d\u3044\u307e\u3059\uff0e\n\n![unnamed-chunk-5-1.png](https://qiita-image-store.s3.amazonaws.com/0/72093/459fec75-fea6-de60-762b-a3a310c1e869.png)\n\n\u4ee5\u4e0a\u306e\u7d50\u679c\u304b\u3089\uff0cchar_38\u3092\u4f7f\u7528\u3059\u308b\u3060\u3051\u3067\uff0c\u307b\u307c\u5168\u3066\u306e\u9867\u5ba2\u306eoutcome\u3092\u304b\u306a\u308a\u9ad8\u7cbe\u5ea6\u3067\u4e88\u6e2c\u304c\u3067\u304d\u308b\u3053\u3068\u304c\u308f\u304b\u308a\u307e\u3057\u305f\uff0e\n\u4e00\u65b9\u3067\uff0c\u9014\u4e2d\u3067outcome\u3092\u5909\u66f4\u3057\u305f\u9867\u5ba2\u306b\u5bfe\u3059\u308b\u63a8\u5b9a\u306f\u5f31\u3044\u3053\u3068\u304c\u308f\u304b\u308a\u307e\u3059\uff0e\n\n### 4.3.2. magic features\u306e\u7279\u5fb4\n\u307e\u305a\u306f6\u4eba\u306e\uff0c\u9014\u4e2d\u3067outcome\u3092\u5909\u66f4\u3057\u305f\u9867\u5ba2\u72b6\u6cc1\u3092\u6642\u7cfb\u5217\u3067\u898b\u3066\u3044\u304d\u307e\u3059\uff0e\n\n![unnamed-chunk-6-1.png](https://qiita-image-store.s3.amazonaws.com/0/72093/bfe43ada-331a-088d-8082-87f48869a788.png)\n\n\u591a\u304f\u306e\u9867\u5ba2\u306f\u89b3\u6e2c\u4e2d\uff11\u5ea6\u3060\u3051outcome\u3092\u5909\u66f4\u3057\u3066\u3044\u308b\u3053\u3068\u304c\u308f\u304b\u308a\u307e\u3059\uff0e\u4eca\u56de\u306e\u554f\u984c\u306f\uff0c\u3053\u306eoutcome\u306e\u5909\u5316\u3092\u4e88\u6e2c\u3059\u308b\u6642\u7cfb\u5217\u30c7\u30fc\u30bf\u306e\u5206\u6790\uff0c\u3068\u3044\u3046\u3053\u3068\u306b\u306a\u308a\u307e\u3059\uff0e\n\u6b21\u306b\u7279\u5b9a\u306e\u9867\u5ba2\u30af\u30e9\u30b9\u30bf\u304c\u3044\u3064outcome\u3092\u5909\u66f4\u3057\u305f\u306e\u304b\u898b\u3066\u3044\u304d\u307e\u3059\uff0e\n\u6b20\u640d\u5024\u3092\u542b\u3080\u90e8\u5206\u304c\u5c11\u306a\u3044\u5909\u6570\uff0c\u3053\u3053\u3067\u306f\u5909\u6570group_1\u3092\u898b\u3066\u3044\u304d\u307e\u3059\uff0e\n\u5148\u7a0b\u3068\u540c\u69d8\u306e\u30b0\u30e9\u30d5\u3092\uff0c6\u3064\u306e\u30e9\u30f3\u30c0\u30e0\u306b\u9078\u3093\u3060group_1\u3067\u898b\u3066\u898b\u307e\u3057\u3087\u3046\uff0e\n\n![unnamed-chunk-7-1.png](https://qiita-image-store.s3.amazonaws.com/0/72093/eb075e1b-2c73-225e-3b20-87d68de6b25c.png)\n\npeople_id\u3067\u30b0\u30e9\u30d5\u5316\u3057\u305f\u5834\u5408\u3068\u5168\u304f\u540c\u3058\u5909\u5316\u3092\u3057\u3066\u3044\u308b\u3053\u3068\u304c\u308f\u304b\u308a\u307e\u3059\uff0e\u3064\u307e\u308a\u4eca\u56de\u306e\u30b3\u30f3\u30da\u306e\u76ee\u6a19\u306f\uff0cgroup_1\u6bce\u306e\u5909\u5316\u70b9\u3092\u4e88\u6e2c\u3059\u308b\u554f\u984c\u3078\u3068\u5e30\u7740\u3059\u308b\u3053\u3068\u3068\u306a\u308a\u307e\u3059\uff0e\n\n![unnamed-chunk-8-1.png](https://qiita-image-store.s3.amazonaws.com/0/72093/84464c1a-b57a-2f81-75be-308402745935.png)\n\n\u3053\u308c\u3089\u306e\u300c\u4e2d\u9593\u8981\u7d20\u300d\u304c\u305d\u308c\u305e\u308c\u306e\u30b0\u30eb\u30fc\u30d7(0\u307e\u305f\u306f1)\u3078\u6301\u3063\u3066\u3044\u304f\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\uff0e\n\n### 4.3.3. \u7591\u554f\u70b9\n\u3053\u3053\u307e\u3067\u306e\u89e3\u6790\u3067\u3044\u304f\u3064\u304b\u306e\u7591\u554f\u70b9\u304c\u751f\u3058\u307e\u3059\uff0e\n\n* \u3044\u304f\u3064\u306e\u30b0\u30eb\u30fc\u30d7\u304c\u5358\u4e00\u306eoutcome\u3092\u6301\u3063\u3066\u3044\u308b\u306e\u304b\uff0etest\u306e\u60c5\u5831\u3092train\u306e\u6642\u9593\u60c5\u5831\u3078\u843d\u3068\u3057\u8fbc\u3080\u3053\u3068\u304c\u3067\u304d\u308c\u3070\uff0c\u591a\u304f\u306eoutcome\u3092\u5358\u7d14\u306a0, 1\u3067\u57cb\u3081\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\uff0e\n* \u5e7e\u3064\u306e\u30b0\u30eb\u30fc\u30d7\u304c\u66d6\u6627\u306aoutcome\u3092\u6240\u6301\u3057\u3066\u3044\u308b\u304b\uff0e\n* \u5e7e\u3064\u306e\u30b0\u30eb\u30fc\u30d7\u304ctran\u30c7\u30fc\u30bf\u306b\u51fa\u3066\u304d\u3066\u3044\u306a\u3044test\u30c7\u30fc\u30bf\u72ec\u81ea\u306e\u30b0\u30eb\u30fc\u30d7\u304b\n\n\u3053\u308c\u3089\u3092\u898b\u3066\u3044\u304f\u3068\u6b21\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3059\uff0e\n\n![unnamed-chunk-9-1.png](https://qiita-image-store.s3.amazonaws.com/0/72093/05a3d700-a72b-6d8a-2af9-56b621055989.png)\n\n\u3053\u3053\u3067ambivalent\u306f0, 1\u3092\u4e21\u65b9\u542b\u3080\u30b0\u30eb\u30fc\u30d7\uff0cuniform\u306f\u5358\u4e00\u306e0, 1\u3057\u304b\u6301\u305f\u306a\u3044\u30b0\u30eb\u30fc\u30d7\uff0cunknown\u306ftest\u30b0\u30eb\u30fc\u30d7\u72ec\u81ea\u306e\u30b0\u30eb\u30fc\u30d7\u3067\u3059\uff0e\n\u6b21\u306b\u5404\u30b0\u30eb\u30fc\u30d7\u306f\u5e7e\u3064\u306eactivities\u3092\u542b\u3080\u306e\u304b\u898b\u3066\u3044\u304d\u307e\u3059\uff0e\u4f8b\u3048\u3070\uff0c(\u660e\u78ba\u306a\u6307\u6a19\u304c\u306a\u3044\u72b6\u614b\u3067)\u30e9\u30f3\u30c0\u30e0\u306b\u3053\u308c\u3089\u3092\u4e88\u6e2c\u3057\u305f\u5834\u5408\uff0c\u30a8\u30f3\u30c8\u30ed\u30d4\u30fc\u6700\u5927\u5316\u306e\u89b3\u70b9\u304b\u3089\u6700\u9ad8\u30b9\u30b3\u30a2\u306f\u5e7e\u3064\u306b\u306a\u308b\u304b\u304c\u308f\u304b\u308a\u307e\u3059\uff0eXGBoost\u3068char_38\u3092\u4f7f\u7528\u3059\u308b\u3053\u3068\u3067\uff0c\u3053\u308c\u3089\u306e\u7cf8\u53e3\u3068\u306a\u308a\u307e\u3059\uff0e\n\n![unnamed-chunk-10-1.png](https://qiita-image-store.s3.amazonaws.com/0/72093/4eb916c0-8888-563e-18bc-ed7b636c9320.png)\n\n\u3082\u3046\u4e00\u3064\uff0cambivalent\u30b0\u30eb\u30fc\u30d7\u3067\u306f\u4e00\u4f53\u4f55\u56deoutcome\u304c\u5909\u5316\u3057\u305f\u306e\u304b\u3092\u898b\u3066\u3044\u304d\u307e\u3059\uff0e\n![unnamed-chunk-11-1.png](https://qiita-image-store.s3.amazonaws.com/0/72093/bedad8d2-98fe-4825-66bb-462c8a8f9bc6.png)\n\nbouncing\u306f0\u304b\u30891\uff0c1\u304b\u30890\u306e\u53cc\u65b9\u5411\u5909\u5316\u304c\u767a\u751f\u3057\u305f\u30b0\u30eb\u30fc\u30d7\u3067\u3059\uff0e\n\u3053\u308c\u3089bouncing\u306e\u4e2d\u3067\uff0c\uff12\u56de\u4ee5\u4e0a\u306e\u5909\u5316\u304c\u751f\u3058\u3066\u3044\u308b\u30b0\u30eb\u30fc\u30d7\u306f\u3044\u304f\u3064\u304b\u898b\u3066\u3044\u304d\u307e\u3059\uff0e\n\n```\n## \n##     0     1     2     3 \n## 25646  3687   565     1\n```\n\n\u6700\u5f8c\u306b\uff0c\u3053\u308c\u3089\u306e\u8907\u6570\u56deoutcome\u304c\u5909\u5316\u3057\u305f\u30b0\u30eb\u30fc\u30d7\u3092\u3044\u304f\u3064\u304b\u53ef\u8996\u5316\u3057\u307e\u3059\uff0e\n\n![unnamed-chunk-13-1.png](https://qiita-image-store.s3.amazonaws.com/0/72093/9b2aea7b-02ef-e3a7-f7a5-56af16f06c8b.png)\n\n\n"}