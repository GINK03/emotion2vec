{"context": "\u53c2\u8003\u3068\u3044\u3046\u304b\u5927\u5143\u3067\u3059\n\nNext lexicographical permutation algorithm\n\n\n\u3000HackerRank\u306e\u554f\u984c\u3092\u89e3\u3044\u3066\u3044\u305f\u3089\u3064\u307e\u3065\u3044\u305f\u554f\u984c\u3092\u89e3\u304f\u305f\u3081\u306b\u5fc5\u8981\u306a\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u3002\u4ee5\u524d\u3069\u3053\u304b\u3067\u898b\u77e5\u3063\u305f\u6c17\u3082\u3059\u308b\u304c\u3001\u899a\u3048\u3066\u3044\u306a\u3044\u306e\u3067\u3001\u4eca\u56de\u5b66\u3093\u3060\u3053\u3068\u3092\u6574\u7406\u3057\u3066\u304a\u304f\u3002\n\u3000\n\u3000Next lexicographical permutation algorithm\u306f\u3001\u300c\u8f9e\u66f8\u9806\u3067\u306e\u6b21\u306e\u9806\u5217\u3092\u6c42\u3081\u308b\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u300d\u3068\u3067\u3082\u8a33\u3057\u305f\u3089\u3044\u3044\u306e\u304b\u306a\u3002lexicographical\u3000order\u3068\u3044\u3063\u305f\u307b\u3046\u304c\u4e00\u822c\u7684\u304b\u3082\u3057\u308c\u306a\u3044\u3002\n\n\u554f\u984c\n\n\u521d\u3081\u306b\u6587\u5b57\u5217 S \u304c\u4e0e\u3048\u3089\u308b\u3002\n\u305d\u306e\u6587\u5b57\u5217 S \u306e\u6587\u5b57\u306e\u9806\u5e8f\u3092\u5165\u308c\u66ff\u3048\u3066 S\u2019 \u3092\u4f5c\u6210\u3059\u308b\u3002\n\u3053\u306eS'\u306f\u8f9e\u66f8\u9806\u3067 S \u3088\u308a\u3082\u5f8c\u306b\u6765\u308b\u3082\u306e\u3068\u3059\u308b\u3002\n\u8907\u6570\u30d1\u30fc\u30bf\u30f3\u3042\u308b\u5834\u5408\u306f\u300c\u8f9e\u66f8\u9806\u3067 S \u3088\u308a\u3082\u5f8c\u300d\u304b\u3064\u300c\u8f9e\u66f8\u9806\u3067\u6700\u5c0f\u306e\u3082\u306e\uff08\u6b21\u306b\u304f\u308b\u3082\u306e\uff09\u300d\u3092\u4f5c\u6210\u3059\u308b\u3002\n\n\u5177\u4f53\u7684\u306b\u306f\u3001\u6587\u5b57\u5217S\uff1dxyzikdcba\u3068\u3044\u3046\u304c\u4e0e\u3048\u3089\u308c\u305f\u3089\u3001\u3053\u306e\u6587\u5b57\u3092\u5165\u308c\u66ff\u3048\u3066\u8f9e\u66f8\u9806\u3067\u6b21\u306b\u6765\u308bS'\uff1dxyzkabcdi\u3092\u4f5c\u6210\u3059\u308b\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u3067\u3059\u3002\n\n\u8f9e\u66f8\u9806\u306b\u3064\u3044\u3066\n\u3000\u79c1\u3082\u8a73\u3057\u304f\u306a\u3044\u305f\u3081\u8a00\u8449\u3067\u8aac\u660e\u3059\u308b\u306e\u306f\u96e3\u3057\u3044\u306e\u3067\u3001\u5b9f\u969b\u306b\u30d7\u30ed\u30b0\u30e9\u30e0\u3067\u898b\u3066\u307f\u307e\u3057\u3087\u3046\u3002\nscala> \"abcd\".permutations.toList.sorted\nres1: List[String] = List(abcd, abdc, acbd, acdb, adbc, adcb, bacd, \n                          badc, bcad, bcda, bdac, bdca, cabd, cadb,\n                          cbad, cbda, cdab, cdba, dabc, dacb, dbac, \n                          dbca, dcab, dcba)\n\n\u3000\u3053\u308c\u304cabcd\u306e\uff14\u6587\u5b57\u3092\u7d44\u307f\u5408\u308f\u305b\u305f\u6642\u306e\u8f9e\u66f8\u9806\u306b\u306a\u308a\u307e\u3059\u3002\u305d\u3057\u3066\u3001\u4f8b\u3048\u3070badc\u304c\u4e0e\u3048\u3089\u308c\u305f\u3089\u3001bcad\u3092\u898b\u3064\u3051\u51fa\u3059\u306e\u304c\u3001\u3053\u306e\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u3067\u3059\u3002\n\u3000\u6587\u5b57\u6570\u304c\u6570\u6587\u5b57\u306a\u3089\u3070\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u306b\u306f\u983c\u3089\u305a\u3001\u30e9\u30a4\u30d6\u30e9\u30ea\u3067\u9806\u5217\u3092\u7b97\u51fa\u3057\u3001\u305d\u308c\u3092\u30bd\u30fc\u30c8\u3057\u3066\u3042\u3052\u308c\u3070\u7c21\u5358\u306b\u6c42\u307e\u308a\u307e\u3059\u3002\u3057\u304b\u3057\u6587\u5b57\u6570\u304c\u3001\u6570\u5341\u6587\u5b57\u3001\u6570\u767e\u6587\u5b57\u3068\u306a\u308b\u3068\u9806\u5217\u306e\u30d1\u30bf\u30fc\u30f3\u3082\u3069\u3093\u3069\u3093\u5897\u3048\u3066\u3044\u304f\u306e\u3067\u3001\u52b9\u7387\u7684\u306b\u89e3\u304f\u305f\u3081\u306b\u306f\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u304c\u5fc5\u8981\u306b\u306a\u308a\u307e\u3059\u3002\n\u3000\n\n\u89e3\u8aac\n\u6587\u5b57\u3060\u3068\u308f\u304b\u308a\u3065\u3089\u3044\u306e\u3067\u89e3\u8aac\u3067\u306f\u6570\u5b57\u306b\u7f6e\u304d\u63db\u3048\u3066\u8003\u3048\u308b\u3002\u30b3\u30f3\u30d4\u30e5\u30fc\u30bf\u30fc\u4e2d\u3067\u306f\u6587\u5b57\u3082\u6570\u5b57\u306a\u306e\u3067\u540c\u3058\u3053\u3068\u3067\u3059\u3002\n\nS  = 0 1 2 5 3 3 0 \nS' = 0 1 3 0 2 3 5\n\n\n\u51e6\u7406\u624b\u9806\nS\u306e\u672b\u5c3e\u304b\u3089\u9806\u306b\u63a2\u7d22\u3057\u3066\u3001\u6607\u9806\u304c\u7d42\u308f\u308b\u4f4d\u7f6e\u3092\u63a2\u3059\u3002\n    5\u306e\u6b21\u306b2\u304c\u6765\u308b\u306e\u3067\u6607\u9806\u7d42\u4e86\u3000  \n      \u2193 \u3000  \u2190 \u672b\u5c3e\u304b\u3089\u307f\u3066\u6607\u9806(0335)\n0  1  2  5  3  3  0\u3000\n\n\u6607\u9806\u3092\u7d42\u308f\u3089\u305b\u305f\u5024[ 2 ] \u3092pivot\u3068\u547c\u3073\u3001\u672b\u5c3e\u304b\u3089\u307f\u3066\u6607\u9806\u306b\u306a\u3063\u3066\u3044\u308b\u90e8\u5206\u3092Suffix[ 5 3 3 0 ]\u3068\u3088\u3073\u307e\u3059\n\u3000  pivot\n      \u2193  \u3000\n0  1  2 |5  3  3  0|\n        |  Suffix  |\n\nSuffix\u306e\u4e2d\u304b\u3089\u3001pivot\u3088\u308a\u3082\u5927\u304d\u304f\u3066\u3001Suffix\u306e\u4e2d\u3067\u6700\u5c0f\u3092\u5024[ 3 ]\u3092\u898b\u3064\u3051\u51fa\u3059\u3002\n\u3000     pivot\u3088\u308a\u5927\u304d\u304f\u3066\u3001suffix\u306e\u4e2d\u3067\u6700\u5c0f\n               \u2193  \u3000\n0  1  2 |5  3  3  0|\n      \u2191 |  Suffix  |\u3000\n    pivot\n\n\u305d\u3057\u3066\u3001pivot\u3068[ 3 ]\u3092\u5165\u308c\u66ff\u3048\u307e\u3059\u3002[ 0 1 3 5 3 2 0] \n\u3000        swap\n      \u2193\uffe3\uffe3\uffe3\uffe3\uffe3\u2193  \u3000\n0  1  3 |5  3  2  0|\n        |  Suffix  |\u3000\n\n\u6700\u5f8c\u306b\u3001\u5165\u308c\u66ff\u3048\u305fSuffix [ 5 3 2 0 ]\u3000\u306e\u90e8\u5206\u3060\u3051\u3092\u6607\u9806\u30bd\u30fc\u30c8\u3057\u3059\u308b\u3068\u5b8c\u6210\u3057\u307e\u3059\u3002\n0  1  3 |0  2  3  5|\n        | asc sort |\u3000    \n\n\nScala\u3067\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\njava\u3084c\u306a\u3069\u306f\u3001\u4e0a\u8a18\u3057\u305f\u30ea\u30f3\u30af\u5148\u306b\u3042\u308b\u306e\u3067\u3001\u305d\u3061\u3089\u3092\u53c2\u8003\u306b\u3057\u3066\u304f\u3060\u3055\u3044\u3002\nobject NextLexicographicalPermutation {\n  def main(args: Array[String]): Unit = {\n\n    val N = io.StdIn.readInt()\n    for (i <- 0 until N) {\n      val str: String = io.StdIn.readLine()\n\n      // S\u306e\u672b\u5c3e\u304b\u3089\u9806\u306b\u63a2\u7d22\u3057\u3066\u3001\u6607\u9806\u304c\u7d42\u308f\u308b\u4f4d\u7f6e\u3092\u63a2\u3059\u3002\n      var i = str.length - 1\n      while (i > 0 && str(i - 1) >= str(i)) {\n        i -= 1\n      }\n      // \u6607\u9806\u304c\u7d42\u308f\u3089\u305b\u305f\u5024\u306eindex\n      val pivotIndex = i - 1\n\n      if (pivotIndex < 0)\n        // pivot\u304c\u306a\u304b\u3063\u305f\u5834\u5408\n        println(\"nothing\")\n      else {\n        // pivot\u3068,Suffix\u5185\u306e\u5024\u3092\u5165\u308c\u66ff\u3048\u308b\n        var j = str.length - 1\n        while (str(j) <= str(pivotIndex)) {\n          j -= 1\n        }\n        val swapIndex = j\n        val strBuf = str.toBuffer\n        strBuf(pivotIndex) = str(swapIndex)\n        strBuf(swapIndex) = str(pivotIndex)\n\n        //\u5165\u308c\u66ff\u3048\u304aw\u305fSuffix\u3092\u30bd\u30fc\u30c8\u3057\u305f\u306e\u3061\u7d44\u307f\u5408\u308f\u305b\u3066\u5b8c\u6210\n        val newStr = strBuf.mkString\n        val prefix = newStr.substring(0, pivotIndex + 1)\n        val suffix = newStr.substring(pivotIndex + 1)\n        val sortedSuffix = suffix.sorted\n        println(prefix + sortedSuffix)\n      }\n    }\n  }\n}\n\n\n\u53c2\u8003\u3068\u3044\u3046\u304b\u5927\u5143\u3067\u3059\n\n* [Next lexicographical permutation algorithm\n](https://www.nayuki.io/page/next-lexicographical-permutation-algorithm)\n\n\u3000HackerRank\u306e\u554f\u984c\u3092\u89e3\u3044\u3066\u3044\u305f\u3089\u3064\u307e\u3065\u3044\u305f\u554f\u984c\u3092\u89e3\u304f\u305f\u3081\u306b\u5fc5\u8981\u306a\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u3002\u4ee5\u524d\u3069\u3053\u304b\u3067\u898b\u77e5\u3063\u305f\u6c17\u3082\u3059\u308b\u304c\u3001\u899a\u3048\u3066\u3044\u306a\u3044\u306e\u3067\u3001\u4eca\u56de\u5b66\u3093\u3060\u3053\u3068\u3092\u6574\u7406\u3057\u3066\u304a\u304f\u3002\n\u3000\n\u3000Next lexicographical permutation algorithm\u306f\u3001\u300c\u8f9e\u66f8\u9806\u3067\u306e\u6b21\u306e\u9806\u5217\u3092\u6c42\u3081\u308b\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u300d\u3068\u3067\u3082\u8a33\u3057\u305f\u3089\u3044\u3044\u306e\u304b\u306a\u3002lexicographical\u3000order\u3068\u3044\u3063\u305f\u307b\u3046\u304c\u4e00\u822c\u7684\u304b\u3082\u3057\u308c\u306a\u3044\u3002\n\n## \u554f\u984c\n* \u521d\u3081\u306b\u6587\u5b57\u5217 S \u304c\u4e0e\u3048\u3089\u308b\u3002\n* \u305d\u306e\u6587\u5b57\u5217 S \u306e\u6587\u5b57\u306e\u9806\u5e8f\u3092\u5165\u308c\u66ff\u3048\u3066 S\u2019 \u3092\u4f5c\u6210\u3059\u308b\u3002\n* \u3053\u306eS'\u306f\u8f9e\u66f8\u9806\u3067 S \u3088\u308a\u3082\u5f8c\u306b\u6765\u308b\u3082\u306e\u3068\u3059\u308b\u3002\n* \u8907\u6570\u30d1\u30fc\u30bf\u30f3\u3042\u308b\u5834\u5408\u306f\u300c\u8f9e\u66f8\u9806\u3067 S \u3088\u308a\u3082\u5f8c\u300d\u304b\u3064\u300c\u8f9e\u66f8\u9806\u3067\u6700\u5c0f\u306e\u3082\u306e\uff08\u6b21\u306b\u304f\u308b\u3082\u306e\uff09\u300d\u3092\u4f5c\u6210\u3059\u308b\u3002\n\n\u5177\u4f53\u7684\u306b\u306f\u3001\u6587\u5b57\u5217S\uff1d```xyzikdcba```\u3068\u3044\u3046\u304c\u4e0e\u3048\u3089\u308c\u305f\u3089\u3001\u3053\u306e\u6587\u5b57\u3092\u5165\u308c\u66ff\u3048\u3066\u8f9e\u66f8\u9806\u3067\u6b21\u306b\u6765\u308bS'\uff1d```xyzkabcdi```\u3092\u4f5c\u6210\u3059\u308b\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u3067\u3059\u3002\n\n### \u8f9e\u66f8\u9806\u306b\u3064\u3044\u3066\n\u3000\u79c1\u3082\u8a73\u3057\u304f\u306a\u3044\u305f\u3081\u8a00\u8449\u3067\u8aac\u660e\u3059\u308b\u306e\u306f\u96e3\u3057\u3044\u306e\u3067\u3001\u5b9f\u969b\u306b\u30d7\u30ed\u30b0\u30e9\u30e0\u3067\u898b\u3066\u307f\u307e\u3057\u3087\u3046\u3002\n\n```sh\nscala> \"abcd\".permutations.toList.sorted\nres1: List[String] = List(abcd, abdc, acbd, acdb, adbc, adcb, bacd, \n                          badc, bcad, bcda, bdac, bdca, cabd, cadb,\n                          cbad, cbda, cdab, cdba, dabc, dacb, dbac, \n                          dbca, dcab, dcba)\n```\n\n\u3000\u3053\u308c\u304c`a``b``c``d`\u306e\uff14\u6587\u5b57\u3092\u7d44\u307f\u5408\u308f\u305b\u305f\u6642\u306e\u8f9e\u66f8\u9806\u306b\u306a\u308a\u307e\u3059\u3002\u305d\u3057\u3066\u3001\u4f8b\u3048\u3070`badc`\u304c\u4e0e\u3048\u3089\u308c\u305f\u3089\u3001`bcad`\u3092\u898b\u3064\u3051\u51fa\u3059\u306e\u304c\u3001\u3053\u306e\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u3067\u3059\u3002\n\n\u3000\u6587\u5b57\u6570\u304c\u6570\u6587\u5b57\u306a\u3089\u3070\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u306b\u306f\u983c\u3089\u305a\u3001\u30e9\u30a4\u30d6\u30e9\u30ea\u3067\u9806\u5217\u3092\u7b97\u51fa\u3057\u3001\u305d\u308c\u3092\u30bd\u30fc\u30c8\u3057\u3066\u3042\u3052\u308c\u3070\u7c21\u5358\u306b\u6c42\u307e\u308a\u307e\u3059\u3002\u3057\u304b\u3057\u6587\u5b57\u6570\u304c\u3001\u6570\u5341\u6587\u5b57\u3001\u6570\u767e\u6587\u5b57\u3068\u306a\u308b\u3068\u9806\u5217\u306e\u30d1\u30bf\u30fc\u30f3\u3082\u3069\u3093\u3069\u3093\u5897\u3048\u3066\u3044\u304f\u306e\u3067\u3001\u52b9\u7387\u7684\u306b\u89e3\u304f\u305f\u3081\u306b\u306f\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u304c\u5fc5\u8981\u306b\u306a\u308a\u307e\u3059\u3002\n\u3000\n## \u89e3\u8aac\n\u6587\u5b57\u3060\u3068\u308f\u304b\u308a\u3065\u3089\u3044\u306e\u3067\u89e3\u8aac\u3067\u306f\u6570\u5b57\u306b\u7f6e\u304d\u63db\u3048\u3066\u8003\u3048\u308b\u3002\u30b3\u30f3\u30d4\u30e5\u30fc\u30bf\u30fc\u4e2d\u3067\u306f\u6587\u5b57\u3082\u6570\u5b57\u306a\u306e\u3067\u540c\u3058\u3053\u3068\u3067\u3059\u3002\n\n> S  = 0 1 2 5 3 3 0 \n> S' = 0 1 3 0 2 3 5\n\n### \u51e6\u7406\u624b\u9806\nS\u306e\u672b\u5c3e\u304b\u3089\u9806\u306b\u63a2\u7d22\u3057\u3066\u3001\u6607\u9806\u304c\u7d42\u308f\u308b\u4f4d\u7f6e\u3092\u63a2\u3059\u3002\n\n```\n    5\u306e\u6b21\u306b2\u304c\u6765\u308b\u306e\u3067\u6607\u9806\u7d42\u4e86\u3000  \n      \u2193 \u3000  \u2190 \u672b\u5c3e\u304b\u3089\u307f\u3066\u6607\u9806(0335)\n0  1  2  5  3  3  0\u3000\n```\n\n\u6607\u9806\u3092\u7d42\u308f\u3089\u305b\u305f\u5024[ 2 ] \u3092pivot\u3068\u547c\u3073\u3001\u672b\u5c3e\u304b\u3089\u307f\u3066\u6607\u9806\u306b\u306a\u3063\u3066\u3044\u308b\u90e8\u5206\u3092Suffix[ 5 3 3 0 ]\u3068\u3088\u3073\u307e\u3059\n\n```\n\u3000  pivot\n      \u2193  \u3000\n0  1  2 |5  3  3  0|\n        |  Suffix  |\n```\n\nSuffix\u306e\u4e2d\u304b\u3089\u3001pivot\u3088\u308a\u3082\u5927\u304d\u304f\u3066\u3001Suffix\u306e\u4e2d\u3067\u6700\u5c0f\u3092\u5024[ 3 ]\u3092\u898b\u3064\u3051\u51fa\u3059\u3002\n\n```\n\u3000  \tpivot\u3088\u308a\u5927\u304d\u304f\u3066\u3001suffix\u306e\u4e2d\u3067\u6700\u5c0f\n               \u2193  \u3000\n0  1  2 |5  3  3  0|\n      \u2191 |  Suffix  |\u3000\n    pivot\n```\n\n\u305d\u3057\u3066\u3001pivot\u3068[ 3 ]\u3092\u5165\u308c\u66ff\u3048\u307e\u3059\u3002[ 0 1 3 5 3 2 0] \n\n```\n\u3000        swap\n      \u2193\uffe3\uffe3\uffe3\uffe3\uffe3\u2193  \u3000\n0  1  3 |5  3  2  0|\n        |  Suffix  |\u3000\n```\n\n\u6700\u5f8c\u306b\u3001\u5165\u308c\u66ff\u3048\u305fSuffix [ 5 3 2 0 ]\u3000\u306e\u90e8\u5206\u3060\u3051\u3092\u6607\u9806\u30bd\u30fc\u30c8\u3057\u3059\u308b\u3068\u5b8c\u6210\u3057\u307e\u3059\u3002\n   \n```\n0  1  3 |0  2  3  5|\n        | asc sort |\u3000    \n```\n\n### Scala\u3067\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\n\njava\u3084c\u306a\u3069\u306f\u3001\u4e0a\u8a18\u3057\u305f\u30ea\u30f3\u30af\u5148\u306b\u3042\u308b\u306e\u3067\u3001\u305d\u3061\u3089\u3092\u53c2\u8003\u306b\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n\n```scala\nobject NextLexicographicalPermutation {\n  def main(args: Array[String]): Unit = {\n\n    val N = io.StdIn.readInt()\n    for (i <- 0 until N) {\n      val str: String = io.StdIn.readLine()\n\n      // S\u306e\u672b\u5c3e\u304b\u3089\u9806\u306b\u63a2\u7d22\u3057\u3066\u3001\u6607\u9806\u304c\u7d42\u308f\u308b\u4f4d\u7f6e\u3092\u63a2\u3059\u3002\n      var i = str.length - 1\n      while (i > 0 && str(i - 1) >= str(i)) {\n        i -= 1\n      }\n      // \u6607\u9806\u304c\u7d42\u308f\u3089\u305b\u305f\u5024\u306eindex\n      val pivotIndex = i - 1\n\n      if (pivotIndex < 0)\n        // pivot\u304c\u306a\u304b\u3063\u305f\u5834\u5408\n        println(\"nothing\")\n      else {\n        // pivot\u3068,Suffix\u5185\u306e\u5024\u3092\u5165\u308c\u66ff\u3048\u308b\n        var j = str.length - 1\n        while (str(j) <= str(pivotIndex)) {\n          j -= 1\n        }\n        val swapIndex = j\n        val strBuf = str.toBuffer\n        strBuf(pivotIndex) = str(swapIndex)\n        strBuf(swapIndex) = str(pivotIndex)\n\n        //\u5165\u308c\u66ff\u3048\u304aw\u305fSuffix\u3092\u30bd\u30fc\u30c8\u3057\u305f\u306e\u3061\u7d44\u307f\u5408\u308f\u305b\u3066\u5b8c\u6210\n        val newStr = strBuf.mkString\n        val prefix = newStr.substring(0, pivotIndex + 1)\n        val suffix = newStr.substring(pivotIndex + 1)\n        val sortedSuffix = suffix.sorted\n        println(prefix + sortedSuffix)\n      }\n    }\n  }\n}\n```\n", "tags": ["Scala", "algorithm"]}