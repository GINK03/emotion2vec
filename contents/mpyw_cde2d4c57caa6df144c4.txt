{"context": "\n\n\u8a00\u8449\u306e\u5b9a\u7fa9\n\n\u901a\u5e38\u95a2\u6570 \u2026 \u3054\u304f\u666e\u901a\u306e\u95a2\u6570\n\u30b8\u30a7\u30cd\u30ec\u30fc\u30bf\u95a2\u6570 \u2026 yield\u30ad\u30fc\u30ef\u30fc\u30c9\u3092\u542b\u3080\u95a2\u6570\n\u30b8\u30a7\u30cd\u30ec\u30fc\u30bf \u2026 \u30b8\u30a7\u30cd\u30ec\u30fc\u30bf\u95a2\u6570\u304c\u5b9f\u884c\u3055\u308c\u308b\u3068\u8fd4\u308a\u5024\u3068\u306a\u308b\u30a4\u30c6\u30ec\u30fc\u30bf\n\n\n\u4f46\u3057send throw getReturn\u306a\u3069\u7279\u6b8a\u306a\u30e1\u30bd\u30c3\u30c9\u3092\u6301\u3064\n\n\n\n\n\u8b58\u5225\u65b9\u6cd5\n\nClosure\u306e\u307f\u3092\u5bfe\u8c61\u306b\u3059\u308b\n\u300c\u5b9f\u884c\u305b\u305a\u306b\u300d\u3068\u3044\u3046\u306e\u304c\u306a\u304b\u306a\u304b\u96e3\u3057\u305d\u3046\u3067\u8ae6\u3081\u3066\u3044\u305f\u3093\u3067\u3059\u3051\u3069\uff0c\u30ea\u30d5\u30ec\u30af\u30b7\u30e7\u30f3\u4f7f\u3048\u3070\u3067\u304d\u308b\u307f\u305f\u3044\u3067\u3059\u3002\n\nStackOverflow - Is there a way to test if a closure is also a generator?\n\n<?php\n\nfunction is_generator_closure(\\Closure $closure)\n{\n    return (new \\ReflectionFunction($closure))->isGenerator();\n}\n\n$closures = [\n    'normal' => function () {\n        assert(false, 'This should not be invoked');\n    },\n    'generator' => function () {\n        assert(false, 'This should not be invoked');\n        yield;\n    },\n];\n\nvar_dump(array_map('is_generator_closure', $closures));\n\n/*\narray(2) {\n  [\"normal\"]=>\n  bool(false)\n  [\"generator\"]=>\n  bool(true)\n}\n*/\n\n\u3067\u306f\u300cPHP \u6587\u5b57\u5217\u30ea\u30c6\u30e9\u30eb\u306b\u304a\u3051\u308b\u5909\u6570\u5c55\u958b\u30ce\u5168\u30c6\u300d\u3067\u7d39\u4ecb\u3055\u308c\u3066\u3044\u308b\u3072\u306d\u304f\u308c\u305f\u30b8\u30a7\u30cd\u30ec\u30fc\u30bf\u95a2\u6570\u306f\u3069\u3046\u306a\u308b\u304b\uff1f\u30d0\u30b0\u3068\u304b\u3042\u308a\u305d\u3046\u2026\uff1f\n<?php\n\nfunction is_generator_closure(\\Closure $closure)\n{\n    return (new \\ReflectionFunction($closure))->isGenerator();\n}\n\nvar_dump(is_generator_closure(\n    function () {\n        assert(false, 'This should not be invoked');\n        \"${_[yield]}\";\n    }\n));\n\n/*\nbool(true)\n*/\n\n\u5927\u4e08\u592b\u3067\u3057\u305f\uff01\n\n\u5168\u3066\u306ecallable\u3092\u5bfe\u8c61\u306b\u3059\u308b\n<?php\n\nfunction is_generator_callable(callable $callable)\n{\n    if (is_string($callable) && strpos($callable, '::')) {\n        $callable = explode('::', $callable);\n    } elseif (!$callable instanceof \\Closure && is_object($callable)) {\n        $callable = [$callable, '__invoke'];\n    }\n    $reflector = $callable instanceof \\Closure || is_string($callable)\n        ? new \\ReflectionFunction($callable)\n        : new \\ReflectionMethod($callable[0], $callable[1]);\n    return $reflector->isGenerator();\n}\n\n\u306a\u3093\u3068\u6c5a\u3044\u6761\u4ef6\u5206\u5c90\u2026\n# \u8a00\u8449\u306e\u5b9a\u7fa9\n\n- \u901a\u5e38\u95a2\u6570 \u2026 \u3054\u304f\u666e\u901a\u306e\u95a2\u6570\n- \u30b8\u30a7\u30cd\u30ec\u30fc\u30bf\u95a2\u6570 \u2026 `yield`\u30ad\u30fc\u30ef\u30fc\u30c9\u3092\u542b\u3080\u95a2\u6570\n- \u30b8\u30a7\u30cd\u30ec\u30fc\u30bf \u2026 \u30b8\u30a7\u30cd\u30ec\u30fc\u30bf\u95a2\u6570\u304c\u5b9f\u884c\u3055\u308c\u308b\u3068\u8fd4\u308a\u5024\u3068\u306a\u308b\u30a4\u30c6\u30ec\u30fc\u30bf\n  - \u4f46\u3057`send` `throw` `getReturn`\u306a\u3069\u7279\u6b8a\u306a\u30e1\u30bd\u30c3\u30c9\u3092\u6301\u3064\n\n# \u8b58\u5225\u65b9\u6cd5\n\n## `Closure`\u306e\u307f\u3092\u5bfe\u8c61\u306b\u3059\u308b\n\n**\u300c\u5b9f\u884c\u305b\u305a\u306b\u300d**\u3068\u3044\u3046\u306e\u304c\u306a\u304b\u306a\u304b\u96e3\u3057\u305d\u3046\u3067\u8ae6\u3081\u3066\u3044\u305f\u3093\u3067\u3059\u3051\u3069\uff0c\u30ea\u30d5\u30ec\u30af\u30b7\u30e7\u30f3\u4f7f\u3048\u3070\u3067\u304d\u308b\u307f\u305f\u3044\u3067\u3059\u3002\n\n- [StackOverflow - Is there a way to test if a closure is also a generator?](http://stackoverflow.com/questions/25144939/is-there-a-way-to-test-if-a-closure-is-also-a-generator)\n\n```php\n<?php\n\nfunction is_generator_closure(\\Closure $closure)\n{\n    return (new \\ReflectionFunction($closure))->isGenerator();\n}\n\n$closures = [\n    'normal' => function () {\n        assert(false, 'This should not be invoked');\n    },\n    'generator' => function () {\n        assert(false, 'This should not be invoked');\n        yield;\n    },\n];\n\nvar_dump(array_map('is_generator_closure', $closures));\n\n/*\narray(2) {\n  [\"normal\"]=>\n  bool(false)\n  [\"generator\"]=>\n  bool(true)\n}\n*/\n```\n\n\u3067\u306f[\u300cPHP \u6587\u5b57\u5217\u30ea\u30c6\u30e9\u30eb\u306b\u304a\u3051\u308b\u5909\u6570\u5c55\u958b\u30ce\u5168\u30c6\u300d](http://d.hatena.ne.jp/do_aki/20131218/1387335279)\u3067\u7d39\u4ecb\u3055\u308c\u3066\u3044\u308b\u3072\u306d\u304f\u308c\u305f\u30b8\u30a7\u30cd\u30ec\u30fc\u30bf\u95a2\u6570\u306f\u3069\u3046\u306a\u308b\u304b\uff1f\u30d0\u30b0\u3068\u304b\u3042\u308a\u305d\u3046\u2026\uff1f\n\n```php\n<?php\n\nfunction is_generator_closure(\\Closure $closure)\n{\n    return (new \\ReflectionFunction($closure))->isGenerator();\n}\n\nvar_dump(is_generator_closure(\n    function () {\n        assert(false, 'This should not be invoked');\n        \"${_[yield]}\";\n    }\n));\n\n/*\nbool(true)\n*/\n```\n\n\u5927\u4e08\u592b\u3067\u3057\u305f\uff01\n\n## \u5168\u3066\u306e`callable`\u3092\u5bfe\u8c61\u306b\u3059\u308b\n\n```php\n<?php\n\nfunction is_generator_callable(callable $callable)\n{\n    if (is_string($callable) && strpos($callable, '::')) {\n        $callable = explode('::', $callable);\n    } elseif (!$callable instanceof \\Closure && is_object($callable)) {\n        $callable = [$callable, '__invoke'];\n    }\n    $reflector = $callable instanceof \\Closure || is_string($callable)\n        ? new \\ReflectionFunction($callable)\n        : new \\ReflectionMethod($callable[0], $callable[1]);\n    return $reflector->isGenerator();\n}\n```\n\n\u306a\u3093\u3068\u6c5a\u3044\u6761\u4ef6\u5206\u5c90\u2026\n", "tags": ["PHP", "generator"]}