{"tags": ["Lualove2d", "pcgvoronoi"], "context": " More than 1 year has passed since last update.Generating Simple Voronoi Diagrams with Lua and Love2d\n-- http://en.wikipedia.org/wiki/Manhattan_distance\nlocal manhattan = function(a, b)\n  return math.abs(a.x - b.x) + math.abs(a.y - b.y)\nend\n\nlocal voronoi = function(width, height, dst)\n  local random_points = {}\n\n  -- ideally a point per 25x25 pixels\n  local count  = (width * height) / (25 * 25)\n\n  -- generate random points\n  for i=1,count do\n    table.insert(random_points, {\n      x = tonumber(math.random() * width),\n      y = tonumber(math.random() * height),\n      pixels = {}\n    })\n  end\n\n  -- for every pixel available\n  for x=1,width do\n    for y=1,height do\n      -- find the closest random point to this pixel\n      local point = {x = x, y = y}\n      local closest_point = random_points[1]\n\n      for i=2,#random_points do\n        if dst(point, closest_point) > dst(point, random_points[i]) then\n          closest_point = random_points[i]\n        end\n      end\n\n      table.insert(closest_point.pixels, point)\n    end\n  end\n\n  return {\n    width = width,\n    height = height,\n    points = random_points\n  }\nend\n\n-- return a new rgb value with each call\nlocal nextColor = (function()\n  local i, colors = 0, {}\n  for r=0,255,32 do\n    for g=0,255,32 do table.insert(colors, {r, g, 82}) end\n    for b=0,255,32 do table.insert(colors, {r, 82, b}) end\n  end\n\n  return function()\n    i = i + 1\n    if i > #colors then i = 1 end\n    return unpack(colors[i])\n  end\nend)()\n\n-- draw voronoi on a love2d canvas\nlocal createCanvas = function(vrn)\n  local canvas = love.graphics.newCanvas(vrn.width, vrn.height)\n  love.graphics.setCanvas(canvas)\n  canvas:clear(255, 255, 255, 255)\n  -- love.graphics.setBlendMode('alpha')\n\n  for i,point in ipairs(vrn.points) do\n    -- with a new drawing color\n    love.graphics.setColor(nextColor())\n\n    -- draw every nearby pixel\n    -- love2d centers pixels, so offset them by 0.5 for crispness\n    for i,pixel in ipairs(point.pixels) do\n      love.graphics.point(pixel.x - 0.5, pixel.y - 0.5)\n    end\n\n    -- draw the center dot\n    love.graphics.setColor(0, 0, 0)\n    love.graphics.point(point.x - 0.5, point.y - 0.5)\n  end\n\n  love.graphics.setCanvas()\n  love.graphics.setColor(255, 255, 255)\n\n  return canvas\nend\n\nlocal canvas;\n\nfunction love.load()\n  -- reseed RNG\n  math.randomseed(os.time())\n\n  -- set a smaller window; drawing pixels 1-by-1 can be slow\n  local width, height = 400, 400\n  love.window.setMode(width, height)\n  love.window.setTitle(\"Voronoi\")\n\n  vrn    = voronoi(width, height, manhattan)\n  canvas = createCanvas(vrn)\nend\n\nfunction love.draw()\n  love.graphics.draw(canvas, 0, 0)\nend\n\n[Generating Simple Voronoi Diagrams with Lua and Love2d](http://lazythunk.com/posts/generating-simple-voronoi-diagrams-with-lua-and-love2d.html)\n\n```lua\n-- http://en.wikipedia.org/wiki/Manhattan_distance\nlocal manhattan = function(a, b)\n  return math.abs(a.x - b.x) + math.abs(a.y - b.y)\nend\n\nlocal voronoi = function(width, height, dst)\n  local random_points = {}\n\n  -- ideally a point per 25x25 pixels\n  local count  = (width * height) / (25 * 25)\n\n  -- generate random points\n  for i=1,count do\n    table.insert(random_points, {\n      x = tonumber(math.random() * width),\n      y = tonumber(math.random() * height),\n      pixels = {}\n    })\n  end\n\n  -- for every pixel available\n  for x=1,width do\n    for y=1,height do\n      -- find the closest random point to this pixel\n      local point = {x = x, y = y}\n      local closest_point = random_points[1]\n\n      for i=2,#random_points do\n        if dst(point, closest_point) > dst(point, random_points[i]) then\n          closest_point = random_points[i]\n        end\n      end\n\n      table.insert(closest_point.pixels, point)\n    end\n  end\n\n  return {\n    width = width,\n    height = height,\n    points = random_points\n  }\nend\n\n-- return a new rgb value with each call\nlocal nextColor = (function()\n  local i, colors = 0, {}\n  for r=0,255,32 do\n    for g=0,255,32 do table.insert(colors, {r, g, 82}) end\n    for b=0,255,32 do table.insert(colors, {r, 82, b}) end\n  end\n\n  return function()\n    i = i + 1\n    if i > #colors then i = 1 end\n    return unpack(colors[i])\n  end\nend)()\n\n-- draw voronoi on a love2d canvas\nlocal createCanvas = function(vrn)\n  local canvas = love.graphics.newCanvas(vrn.width, vrn.height)\n  love.graphics.setCanvas(canvas)\n  canvas:clear(255, 255, 255, 255)\n  -- love.graphics.setBlendMode('alpha')\n\n  for i,point in ipairs(vrn.points) do\n    -- with a new drawing color\n    love.graphics.setColor(nextColor())\n\n    -- draw every nearby pixel\n    -- love2d centers pixels, so offset them by 0.5 for crispness\n    for i,pixel in ipairs(point.pixels) do\n      love.graphics.point(pixel.x - 0.5, pixel.y - 0.5)\n    end\n\n    -- draw the center dot\n    love.graphics.setColor(0, 0, 0)\n    love.graphics.point(point.x - 0.5, point.y - 0.5)\n  end\n\n  love.graphics.setCanvas()\n  love.graphics.setColor(255, 255, 255)\n\n  return canvas\nend\n\nlocal canvas;\n\nfunction love.load()\n  -- reseed RNG\n  math.randomseed(os.time())\n\n  -- set a smaller window; drawing pixels 1-by-1 can be slow\n  local width, height = 400, 400\n  love.window.setMode(width, height)\n  love.window.setTitle(\"Voronoi\")\n\n  vrn    = voronoi(width, height, manhattan)\n  canvas = createCanvas(vrn)\nend\n\nfunction love.draw()\n  love.graphics.draw(canvas, 0, 0)\nend\n```"}