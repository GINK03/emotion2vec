{"context": "\n\n\u3084\u3063\u305f\u3053\u3068\nMattermost\u3092\u5c0e\u5165\u3057\u3066\u306a\u306b\u304b\u3084\u3063\u3066\u307f\u305f\u304b\u3063\u305f\u306e\u3067\u3001RSS\u30d5\u30a3\u30fc\u30c9\u3092\u6295\u7a3f\u3059\u308b\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u4f5c\u308a\u307e\u3057\u305f\u3002\uff08\u3042\u3068\u3067\u3001\u516c\u5f0f\u306e\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u304c\u3042\u3063\u305f\u3053\u3068\u306b\u6c17\u3065\u3044\u305f\u306e\u306f\u79d8\u5bc6\uff09\n\u3044\u308d\u3044\u308d\u3068\u5fdc\u7528\u304c\u5229\u304f\u304b\u306a\u3068\u601d\u3044\u3001\u53d6\u5f97\u3057\u305ffeed\u3092pandas\u3067\u51e6\u7406\u3057\u3066\nDB\u306b\u683c\u7d0d\u3059\u308b\u3053\u3068\u3068\u3057\u307e\u3057\u305f\u3002\n\u203bMattermost\u3063\u3066\u306a\u3093\u305e\u3084\u3063\u3066\u8a00\u3046\u4eba\u306f\u3053\u3061\u3089\n\n\u74b0\u5883\n\nCentOS7\nPython2.7\n\n\npandas\nfeedparser\nsqlalchemy \nrequests\n\n\nPostgreSQL9.5\nMatterMost\n\nPostgreSQL\u306b\u3064\u3044\u3066\u306f\u3001docker\u30a4\u30e1\u30fc\u30b8\u304b\u3089\u5c0e\u5165\u3057\u307e\u3057\u305f\u3002\ndocker pull postgres:9.5\ndocker run -p 5432:5432 --name postgres-server -v /var/lib/postgresql:/var/lib/postgresql:rw  postgres:9.5\nfirewall-cmd --permanent --add-port=5432/tcp\nfirewall-cmd --reload\n\n\u3053\u308c\u3067\u3068\u308a\u3042\u3048\u305a\u30ea\u30e2\u30fc\u30c8\u63a5\u7d9a\u53ef\u80fd\u306aPostgreSQL\u30b3\u30f3\u30c6\u30ca\u304c\u7acb\u3061\u3042\u304c\u308b\u306f\u305a\u3002\ndocker\u4fbf\u5229\u3060\u306a\u3041\u3002\u3002\u3002\n\u305d\u306e\u307b\u304b\u306e\u74b0\u5883\u69cb\u7bc9\u306f\u7701\u7565\u3001Python\u306fpyenv\u74b0\u5883\u3067\u5b9f\u65bd\u3057\u3066\u3044\u307e\u3059\u3002\n\n1. RSS\u30d5\u30a3\u30fc\u30c9\u3092\u53d6\u5f97\u3059\u308b\u3002\nfeedparser\u3068\u3044\u3046Python\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u4f7f\u3044\u307e\u3059\u3002\n\u3053\u3053\u3089\u8fba\u3092\u53c2\u8003\u306b\u3057\u3066\u3001pip\u3067\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3057\u307e\u3057\u305f\u3002\nhttp://qiita.com/shunsuke227ono/items/da52a290f78924c1f485\nimport feedparser\n\nRSS_URL = \"http://b.hatena.ne.jp/hotentry/it.rss\"\nprint(\"Start get feed from %s\" % (RSS_URL))\nfeed = feedparser.parse(RSS_URL)\n\n\u3053\u308c\u3067\u30d5\u30a3\u30fc\u30c9\u304c\u53d6\u5f97\u3067\u304d\u307e\u3059\u3002\n\uff08\u3061\u306a\u307f\u306b\u2191\u306f\u306f\u3066\u306a\u306e\u30c6\u30af\u30ce\u30ed\u30b8\u30fc\u30ab\u30c6\u30b4\u30ea\u306e\u30db\u30c3\u30c8\u30a8\u30f3\u30c8\u30ea\u3092\u53d6\u5f97\u3057\u3066\u3044\u307e\u3059\u3002\uff09\n\n2. \u53d6\u5f97\u3057\u305f\u30d5\u30a3\u30fc\u30c9\u3092pandas.DataFrame\u306b\u5c55\u958b\n\u4eca\u5f8c\u306e\u51e6\u7406\u306e\u3057\u3084\u3059\u3055\u306a\u3069\u3092\u8003\u3048\u3066\u3001pandas.DataFrame\u306b\u30de\u30c3\u30d4\u30f3\u30b0\u3057\u307e\u3059\u3002\nimport pandas as pd\nentries = pd.DataFrame(feed.entries)\n\n...\u7d42\u308f\u308a\u3002\npandas\u3055\u3093\u512a\u79c0\u3067\u3059\u306d\u3002\n\u306f\u3066\u306a\u306eRSS\u30d5\u30a3\u30fc\u30c9\u306e\u5834\u5408\u3001\u4ee5\u4e0b\u306e12\u5217\u306e\u8981\u7d20\u304c\u53d6\u5f97\u3055\u308c\u3066\u3044\u307e\u3057\u305f\u3002\n\ncontent\nhatena_bookmarkcount\nid\n\nlink\n\nlinks\n\nsummary\n\nsummary_detail\n\ntags\n\ntitle\n\ntitle_detail\n\nupdated\n\nupdated_parsed\n\n\n\u3053\u3053\u307e\u3067\u304f\u308c\u3070\u3001\u3042\u3068\u306fpandas\u306e\u6a5f\u80fd\u3067\u81ea\u7531\u306b\u30c7\u30fc\u30bf\u3092\u3044\u3058\u308c\u307e\u3059\u3002\n\n3. \u65b0\u7740\u30d5\u30a3\u30fc\u30c9\u306e\u30c1\u30a7\u30c3\u30af\nfeedparser\u306f\u3068\u3066\u3082\u4fbf\u5229\u3067\u3059\u304c\u3001\u30a2\u30af\u30bb\u30b9\u3057\u305f\u6642\u70b9\u306e\u30d5\u30a3\u30fc\u30c9\u3092\u53d6\u5f97\u3059\u308b\u306e\u3067\u904e\u53bb\u306b\u53d6\u5f97\u3057\u305f\u30d5\u30a3\u30fc\u30c9\u3068\u91cd\u8907\u304c\u3067\u307e\u3059\u3002\n\u3053\u3053\u3067DataFrame\u306b\u5c55\u958b\u3057\u305f\u610f\u5473\u304c\u51fa\u3066\u304f\u308b\u306e\u3067\u3059\uff01\n\u4ee5\u4e0b\u306fDataFrame\u306e\u64cd\u4f5c\u3067\u3001\u65b0\u7740\u306e\u30d5\u30a3\u30fc\u30c9\u306e\u307f\u3092\u53d6\u308a\u51fa\u3057\u3066\u8868\u793a\u3059\u308b\u4f8b\u3067\u3059\u3002\nalready_print_feeds = pd.Series()\n\nwhile True:\n        time.sleep(300)\n        feed = feedparser.parse(RSS_URL)\n        entries = pd.DataFrame(feed.entries)\n        new_entries = entries[~entries['id'].isin(already_print_feeds)]\n        if not new_entries.empty:\n            for key, row in new_entries.iterrows():\n                feedinfo = \"[**%s**](%s)\\n\\n>%s\" % (row['title'],  row['link'], tag_re.sub('', row['summary']))\n                print(feedinfo)\n        already_print_feeds = already_print_feeds.append(new_entries['id'])\n\n\n\u3061\u3087\u3063\u3068\u89e3\u8aac\nnew_entries = entries[~entries['id'].isin(already_print_feeds)]\n\n\u3053\u308c\u306f\u3001\u53d6\u5f97\u3057\u305fRSS\u30d5\u30a3\u30fc\u30c9\u304b\u3089\u65b0\u7740\u306e\u307f\u3092\u306c\u304d\u3060\u3057\u3066\u3044\u307e\u3059\u3002\nalready_print_feeds\u306b\u306f\u3053\u308c\u307e\u3067\u53d6\u5f97\u3057\u305fRSS\u30d5\u30a3\u30fc\u30c9\u306eid\u304c\u5165\u3063\u3066\u3044\u308b\u524d\u63d0\u3067\u3059\u3002\n\u305d\u3046\u3059\u308b\u3068\u3001entries\u306b\u683c\u7d0d\u3055\u308c\u305f\u30d5\u30a3\u30fc\u30c9\u306e\u3046\u3061\u3001\n\u65b0\u7740\u306e\u884c\u306e\u307f\u306bTrue\u304c\u8a2d\u5b9a\u3055\u308c\u305fSerires\u304c\u8fd4\u5374\u3055\u308c\u308b\u306e\u3067\u3001\n\u3053\u308c\u3092entries\u306e\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u306b\u6307\u5b9a\u3059\u308c\u3070\u65b0\u7740\u3060\u3051\u629c\u304d\u51fa\u305b\u307e\u3059\u3002\n~entries['id'].isin(already_print_feeds)\n# =>\n0     False\n1     True # => \u2605New!\n2     False\n3     False\n4     False\n5     False\n6     False\n7     False\n8     False\n9     False\n10    False\n11    False\n12    False\n13    False\n14    False\n15    False\n16    False\n17    False\n18    False\n19    True # => \u2605New!\n20    False\n21    False\n22    False\n23    False\n24    False\n25    False\n26    False\n27    False\n28    False\n29    False\nName: id, dtype: bool\n\nalready_print_feeds\u306b\u306f\u3053\u308c\u307e\u3067\u8868\u793a\u3057\u305f\u65b0\u7740\u30d5\u30a3\u30fc\u30c9\u306eID\u3092\u8ffd\u8a18\u3057\u3066\u3044\u3051\u3070\u3044\u3044\u3067\u3059\u3002\nalready_print_feeds = already_print_feeds.append(new_entries['id'])\n\n  \u305f\u3060\u3057\u4e0a\u8a18\u306e\u30b3\u30fc\u30c9\u3060\u3068already_print_feeds\u306b\u7121\u9650\u306b\u30c7\u30fc\u30bf\u304c\u8caf\u307e\u3063\u3066\u3044\u304f\u306e\u3067\u3001\u3044\u3064\u304b\u7834\u7dbb\u3057\u307e\u3059\uff08\u30e1\u30e2\u30ea\u304c\uff09\n1\u65e51\u56de\u30d5\u30e9\u30c3\u30b7\u30e5\u3057\u305f\u308a\u3001DB\u304b\u3089\u8aad\u307f\u53d6\u308b\u3088\u3046\u306b\u3057\u305f\u308a\u3057\u307e\u3057\u3087\u3046\n\n4. DB(PostgreSQL)\u306b\u4fdd\u5b58\n\u53d6\u5f97\u3057\u305f\u3001RSS\u30d5\u30a3\u30fc\u30c9\u3092PostgreSQL\u306b\u4fdd\u5b58\u3057\u307e\u3059\u3002\n\u305f\u3060\u3057\u3001\u5217\u306f\u4e0b\u8a18\u306b\u7d5e\u308a\u307e\u3057\u305f\u3002\n\nid \nlink\ntitle\nsummary\nupdated \n\n\u307e\u305aDB\u306b\u30c6\u30fc\u30d6\u30eb\u3092\u4f5c\u308a\u307e\u3059\u3002\ncreate table feed ( id text primary key , link text, title text, summary text, updated timestamp );\n\n\u4e00\u5fdc\u3001id\u306b\u306f\u4e3b\u30ad\u30fc\u5236\u7d04\u3092\u5165\u308c\u3066\u3001\u304b\u3064updated\u306ftimestamp\u578b\u3068\u3057\u3066\u304a\u304d\u307e\u3057\u305f\u3002\n\uff08\u306f\u3066\u306a\u306e\u30d5\u30a3\u30fc\u30c9\u306eupdated\u306f\u305d\u306e\u307e\u307etimestamp\u578b\u3068\u3057\u3066INSERT\u3067\u304d\u308b\u5f62\u5f0f\u306e\u3088\u3046\u3067\u3059\u3002\uff09\nfrom sqlalchemy import create_engine\n\nDATABASE_CONN = \"postgresql://xxxx:xxxx@xxxxx:xxx/xxxx\"\nDATABASE_TABLE = \"feed\"\n# connect database\nengine = create_engine(DATABASE_CONN)\n\n# Store database\nstored_entries = new_entries.ix[:, [\n                \"id\", \"link\", \"title\", \"summary\", \"updated\"]]\nstored_entries.to_sql(DATABASE_TABLE, engine, index=False, if_exists='append')\n\nDataFrame\u306eto_sql\u30e1\u30bd\u30c3\u30c9\u3092\u4f7f\u3044\u307e\u3059\u3002\n\nindex=False\n\n\u3068\u3059\u308b\u3053\u3068\u3067\u3001\u683c\u7d0d\u6642\u306b\u52dd\u624b\u306b\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u5217\u3092\u4ed8\u4e0e\u3057\u306a\u304f\u306a\u308a\u3001\n\nif_exists='append'\n\n\u3067\u3001\u3059\u3067\u306b\u5b58\u5728\u3059\u308b\u30c6\u30fc\u30d6\u30eb\u306b\u30c7\u30fc\u30bf\u3092\u8ffd\u8a18\u3059\u308b\u6319\u52d5\u3068\u306a\u308a\u307e\u3059\u3002\n\n5. MatterMost\u306b\u6295\u7a3f\u3059\u308b\nHTTP\u30ea\u30af\u30a8\u30b9\u30c8\u3092\u9001\u308brequest\u3068\u3044\u3046Python\u30e9\u30a4\u30d6\u30e9\u30ea\u3067\u975e\u5e38\u306b\u7c21\u5358\u306b\u6295\u7a3f\u3067\u304d\u307e\u3059\u3002\nimport requests\nimport json\n\nmattermosturl = \"MatterMost\u306eincomming webhook URL\"\nusername = \"\u597d\u304d\u306a\u540d\u524d\"\nheader = {'Content-Type': 'application/json'}\npayload = {\n        \"text\": feedinfo,\n        \"username\": username,\n        }\n\nresp = requests.post(mattermosturl,\n                     headers=header, data=json.dumps(payload))\n\n\n\u3068\u3044\u3046\u308f\u3051\u3067\n\u305b\u3063\u304b\u304fpandas\u306b\u30de\u30c3\u30d4\u30f3\u30b0\u3057\u305f\u306e\u3067\u3001\n\u6a5f\u68b0\u5b66\u7fd2\u7684\u306a\u3053\u3068\u3082\u3084\u3063\u3066\u3044\u304d\u305f\u3044\u3068\u601d\u3044\u307e\u3059\u3002\n## \u3084\u3063\u305f\u3053\u3068\n\nMattermost\u3092\u5c0e\u5165\u3057\u3066\u306a\u306b\u304b\u3084\u3063\u3066\u307f\u305f\u304b\u3063\u305f\u306e\u3067\u3001RSS\u30d5\u30a3\u30fc\u30c9\u3092\u6295\u7a3f\u3059\u308b\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u4f5c\u308a\u307e\u3057\u305f\u3002\uff08\u3042\u3068\u3067\u3001[\u516c\u5f0f\u306e\u30d7\u30ed\u30b8\u30a7\u30af\u30c8](https://github.com/bitbackofen/Rss-Atom-Feed-Integration-for-Mattermost)\u304c\u3042\u3063\u305f\u3053\u3068\u306b\u6c17\u3065\u3044\u305f\u306e\u306f\u79d8\u5bc6\uff09\n\n\u3044\u308d\u3044\u308d\u3068\u5fdc\u7528\u304c\u5229\u304f\u304b\u306a\u3068\u601d\u3044\u3001\u53d6\u5f97\u3057\u305ffeed\u3092pandas\u3067\u51e6\u7406\u3057\u3066\nDB\u306b\u683c\u7d0d\u3059\u308b\u3053\u3068\u3068\u3057\u307e\u3057\u305f\u3002\n\n\u203bMattermost\u3063\u3066\u306a\u3093\u305e\u3084\u3063\u3066\u8a00\u3046\u4eba\u306f[\u3053\u3061\u3089](http://qiita.com/terukizm/items/4a4016d8ec5a21856e4f)\n\n## \u74b0\u5883\n\n- CentOS7\n- Python2.7\n    - pandas\n    - feedparser\n    - sqlalchemy \n    - requests\n- PostgreSQL9.5\n- MatterMost\n\nPostgreSQL\u306b\u3064\u3044\u3066\u306f\u3001docker\u30a4\u30e1\u30fc\u30b8\u304b\u3089\u5c0e\u5165\u3057\u307e\u3057\u305f\u3002\n\n```bash\ndocker pull postgres:9.5\ndocker run -p 5432:5432 --name postgres-server -v /var/lib/postgresql:/var/lib/postgresql:rw  postgres:9.5\nfirewall-cmd --permanent --add-port=5432/tcp\nfirewall-cmd --reload\n```\n\n\u3053\u308c\u3067\u3068\u308a\u3042\u3048\u305a\u30ea\u30e2\u30fc\u30c8\u63a5\u7d9a\u53ef\u80fd\u306aPostgreSQL\u30b3\u30f3\u30c6\u30ca\u304c\u7acb\u3061\u3042\u304c\u308b\u306f\u305a\u3002\ndocker\u4fbf\u5229\u3060\u306a\u3041\u3002\u3002\u3002\n\n\u305d\u306e\u307b\u304b\u306e\u74b0\u5883\u69cb\u7bc9\u306f\u7701\u7565\u3001Python\u306fpyenv\u74b0\u5883\u3067\u5b9f\u65bd\u3057\u3066\u3044\u307e\u3059\u3002\n\n## 1. RSS\u30d5\u30a3\u30fc\u30c9\u3092\u53d6\u5f97\u3059\u308b\u3002\n\n`feedparser`\u3068\u3044\u3046Python\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u4f7f\u3044\u307e\u3059\u3002\n\u3053\u3053\u3089\u8fba\u3092\u53c2\u8003\u306b\u3057\u3066\u3001`pip`\u3067\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3057\u307e\u3057\u305f\u3002\n\nhttp://qiita.com/shunsuke227ono/items/da52a290f78924c1f485\n\n```py\nimport feedparser\n\nRSS_URL = \"http://b.hatena.ne.jp/hotentry/it.rss\"\nprint(\"Start get feed from %s\" % (RSS_URL))\nfeed = feedparser.parse(RSS_URL)\n```\n\n\u3053\u308c\u3067\u30d5\u30a3\u30fc\u30c9\u304c\u53d6\u5f97\u3067\u304d\u307e\u3059\u3002\n\uff08\u3061\u306a\u307f\u306b\u2191\u306f\u306f\u3066\u306a\u306e\u30c6\u30af\u30ce\u30ed\u30b8\u30fc\u30ab\u30c6\u30b4\u30ea\u306e\u30db\u30c3\u30c8\u30a8\u30f3\u30c8\u30ea\u3092\u53d6\u5f97\u3057\u3066\u3044\u307e\u3059\u3002\uff09\n\n## 2. \u53d6\u5f97\u3057\u305f\u30d5\u30a3\u30fc\u30c9\u3092pandas.DataFrame\u306b\u5c55\u958b\n\n\u4eca\u5f8c\u306e\u51e6\u7406\u306e\u3057\u3084\u3059\u3055\u306a\u3069\u3092\u8003\u3048\u3066\u3001pandas.DataFrame\u306b\u30de\u30c3\u30d4\u30f3\u30b0\u3057\u307e\u3059\u3002\n\n```py\nimport pandas as pd\nentries = pd.DataFrame(feed.entries)\n```\n\n...\u7d42\u308f\u308a\u3002\npandas\u3055\u3093\u512a\u79c0\u3067\u3059\u306d\u3002\n\n\u306f\u3066\u306a\u306eRSS\u30d5\u30a3\u30fc\u30c9\u306e\u5834\u5408\u3001\u4ee5\u4e0b\u306e12\u5217\u306e\u8981\u7d20\u304c\u53d6\u5f97\u3055\u308c\u3066\u3044\u307e\u3057\u305f\u3002\n\n- content\n- hatena_bookmarkcount\n- id                      \n- link                    \n- links                   \n- summary                 \n- summary_detail          \n- tags                    \n- title                   \n- title_detail            \n- updated                 \n- updated_parsed          \n\n\u3053\u3053\u307e\u3067\u304f\u308c\u3070\u3001\u3042\u3068\u306fpandas\u306e\u6a5f\u80fd\u3067\u81ea\u7531\u306b\u30c7\u30fc\u30bf\u3092\u3044\u3058\u308c\u307e\u3059\u3002\n\n## 3. \u65b0\u7740\u30d5\u30a3\u30fc\u30c9\u306e\u30c1\u30a7\u30c3\u30af\n\nfeedparser\u306f\u3068\u3066\u3082\u4fbf\u5229\u3067\u3059\u304c\u3001\u30a2\u30af\u30bb\u30b9\u3057\u305f\u6642\u70b9\u306e\u30d5\u30a3\u30fc\u30c9\u3092\u53d6\u5f97\u3059\u308b\u306e\u3067\u904e\u53bb\u306b\u53d6\u5f97\u3057\u305f\u30d5\u30a3\u30fc\u30c9\u3068\u91cd\u8907\u304c\u3067\u307e\u3059\u3002\n\n\u3053\u3053\u3067DataFrame\u306b\u5c55\u958b\u3057\u305f\u610f\u5473\u304c\u51fa\u3066\u304f\u308b\u306e\u3067\u3059\uff01\n\u4ee5\u4e0b\u306fDataFrame\u306e\u64cd\u4f5c\u3067\u3001\u65b0\u7740\u306e\u30d5\u30a3\u30fc\u30c9\u306e\u307f\u3092\u53d6\u308a\u51fa\u3057\u3066\u8868\u793a\u3059\u308b\u4f8b\u3067\u3059\u3002\n\n```py\nalready_print_feeds = pd.Series()\n\nwhile True:\n        time.sleep(300)\n        feed = feedparser.parse(RSS_URL)\n        entries = pd.DataFrame(feed.entries)\n        new_entries = entries[~entries['id'].isin(already_print_feeds)]\n        if not new_entries.empty:\n            for key, row in new_entries.iterrows():\n                feedinfo = \"[**%s**](%s)\\n\\n>%s\" % (row['title'],  row['link'], tag_re.sub('', row['summary']))\n                print(feedinfo)\n        already_print_feeds = already_print_feeds.append(new_entries['id'])\n```\n\n### \u3061\u3087\u3063\u3068\u89e3\u8aac\n\n```py\nnew_entries = entries[~entries['id'].isin(already_print_feeds)]\n```\n\n\u3053\u308c\u306f\u3001\u53d6\u5f97\u3057\u305fRSS\u30d5\u30a3\u30fc\u30c9\u304b\u3089\u65b0\u7740\u306e\u307f\u3092\u306c\u304d\u3060\u3057\u3066\u3044\u307e\u3059\u3002\n\n`already_print_feeds`\u306b\u306f\u3053\u308c\u307e\u3067\u53d6\u5f97\u3057\u305fRSS\u30d5\u30a3\u30fc\u30c9\u306e`id`\u304c\u5165\u3063\u3066\u3044\u308b\u524d\u63d0\u3067\u3059\u3002\n\n\u305d\u3046\u3059\u308b\u3068\u3001`entries`\u306b\u683c\u7d0d\u3055\u308c\u305f\u30d5\u30a3\u30fc\u30c9\u306e\u3046\u3061\u3001\n\u65b0\u7740\u306e\u884c\u306e\u307f\u306b`True`\u304c\u8a2d\u5b9a\u3055\u308c\u305fSerires\u304c\u8fd4\u5374\u3055\u308c\u308b\u306e\u3067\u3001\n\u3053\u308c\u3092`entries`\u306e\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u306b\u6307\u5b9a\u3059\u308c\u3070\u65b0\u7740\u3060\u3051\u629c\u304d\u51fa\u305b\u307e\u3059\u3002\n\n```py\n~entries['id'].isin(already_print_feeds)\n# =>\n0     False\n1     True # => \u2605New!\n2     False\n3     False\n4     False\n5     False\n6     False\n7     False\n8     False\n9     False\n10    False\n11    False\n12    False\n13    False\n14    False\n15    False\n16    False\n17    False\n18    False\n19    True # => \u2605New!\n20    False\n21    False\n22    False\n23    False\n24    False\n25    False\n26    False\n27    False\n28    False\n29    False\nName: id, dtype: bool\n```\n\n`already_print_feeds`\u306b\u306f\u3053\u308c\u307e\u3067\u8868\u793a\u3057\u305f\u65b0\u7740\u30d5\u30a3\u30fc\u30c9\u306eID\u3092\u8ffd\u8a18\u3057\u3066\u3044\u3051\u3070\u3044\u3044\u3067\u3059\u3002\n\n```py\nalready_print_feeds = already_print_feeds.append(new_entries['id'])\n```\n\n:warning:  \u305f\u3060\u3057\u4e0a\u8a18\u306e\u30b3\u30fc\u30c9\u3060\u3068`already_print_feeds`\u306b\u7121\u9650\u306b\u30c7\u30fc\u30bf\u304c\u8caf\u307e\u3063\u3066\u3044\u304f\u306e\u3067\u3001\u3044\u3064\u304b\u7834\u7dbb\u3057\u307e\u3059\uff08\u30e1\u30e2\u30ea\u304c\uff09\n1\u65e51\u56de\u30d5\u30e9\u30c3\u30b7\u30e5\u3057\u305f\u308a\u3001DB\u304b\u3089\u8aad\u307f\u53d6\u308b\u3088\u3046\u306b\u3057\u305f\u308a\u3057\u307e\u3057\u3087\u3046\n\n## 4. DB(PostgreSQL)\u306b\u4fdd\u5b58\n\n\u53d6\u5f97\u3057\u305f\u3001RSS\u30d5\u30a3\u30fc\u30c9\u3092PostgreSQL\u306b\u4fdd\u5b58\u3057\u307e\u3059\u3002\n\u305f\u3060\u3057\u3001\u5217\u306f\u4e0b\u8a18\u306b\u7d5e\u308a\u307e\u3057\u305f\u3002\n\n- id \n- link\n- title\n- summary\n- updated \n\n\u307e\u305aDB\u306b\u30c6\u30fc\u30d6\u30eb\u3092\u4f5c\u308a\u307e\u3059\u3002\n\n```sql\ncreate table feed ( id text primary key , link text, title text, summary text, updated timestamp );\n```\n\n\u4e00\u5fdc\u3001id\u306b\u306f\u4e3b\u30ad\u30fc\u5236\u7d04\u3092\u5165\u308c\u3066\u3001\u304b\u3064updated\u306ftimestamp\u578b\u3068\u3057\u3066\u304a\u304d\u307e\u3057\u305f\u3002\n\uff08\u306f\u3066\u306a\u306e\u30d5\u30a3\u30fc\u30c9\u306eupdated\u306f\u305d\u306e\u307e\u307etimestamp\u578b\u3068\u3057\u3066INSERT\u3067\u304d\u308b\u5f62\u5f0f\u306e\u3088\u3046\u3067\u3059\u3002\uff09\n\n\n```py\nfrom sqlalchemy import create_engine\n\nDATABASE_CONN = \"postgresql://xxxx:xxxx@xxxxx:xxx/xxxx\"\nDATABASE_TABLE = \"feed\"\n# connect database\nengine = create_engine(DATABASE_CONN)\n\n# Store database\nstored_entries = new_entries.ix[:, [\n                \"id\", \"link\", \"title\", \"summary\", \"updated\"]]\nstored_entries.to_sql(DATABASE_TABLE, engine, index=False, if_exists='append')\n```\n\nDataFrame\u306e`to_sql`\u30e1\u30bd\u30c3\u30c9\u3092\u4f7f\u3044\u307e\u3059\u3002\n\n- index=False\n\n\u3068\u3059\u308b\u3053\u3068\u3067\u3001\u683c\u7d0d\u6642\u306b\u52dd\u624b\u306b\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u5217\u3092\u4ed8\u4e0e\u3057\u306a\u304f\u306a\u308a\u3001\n\n- if_exists='append'\n\n\u3067\u3001\u3059\u3067\u306b\u5b58\u5728\u3059\u308b\u30c6\u30fc\u30d6\u30eb\u306b\u30c7\u30fc\u30bf\u3092\u8ffd\u8a18\u3059\u308b\u6319\u52d5\u3068\u306a\u308a\u307e\u3059\u3002\n\n## 5. MatterMost\u306b\u6295\u7a3f\u3059\u308b\n\nHTTP\u30ea\u30af\u30a8\u30b9\u30c8\u3092\u9001\u308b`request`\u3068\u3044\u3046Python\u30e9\u30a4\u30d6\u30e9\u30ea\u3067\u975e\u5e38\u306b\u7c21\u5358\u306b\u6295\u7a3f\u3067\u304d\u307e\u3059\u3002\n\n```\nimport requests\nimport json\n\nmattermosturl = \"MatterMost\u306eincomming webhook URL\"\nusername = \"\u597d\u304d\u306a\u540d\u524d\"\nheader = {'Content-Type': 'application/json'}\npayload = {\n        \"text\": feedinfo,\n        \"username\": username,\n        }\n\nresp = requests.post(mattermosturl,\n                     headers=header, data=json.dumps(payload))\n```\n\n\n\n\n## \u3068\u3044\u3046\u308f\u3051\u3067\n\n\u305b\u3063\u304b\u304fpandas\u306b\u30de\u30c3\u30d4\u30f3\u30b0\u3057\u305f\u306e\u3067\u3001\n\u6a5f\u68b0\u5b66\u7fd2\u7684\u306a\u3053\u3068\u3082\u3084\u3063\u3066\u3044\u304d\u305f\u3044\u3068\u601d\u3044\u307e\u3059\u3002\n\n", "tags": ["Python", "PostgreSQL", "pandas", "Mattermost", "feedparser"]}