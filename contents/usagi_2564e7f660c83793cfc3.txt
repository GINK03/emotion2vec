{"context": "\n\n\u6982\u8981\n\u5148\u65e5\u3001\u300c\u8aad\u307f\u8fbc\u307f\u300d\u306b\u3064\u3044\u3066\u306f \u300cpicojson::value \u306b\u5165\u3063\u305f picojson::object \u306e\u30cd\u30b9\u30c8\u69cb\u9020\u3092\u30c9\u30c3\u30c8\u533a\u5207\u308a\u306e\u30d1\u30b9\u6587\u5b57\u5217\u3067\u5f15\u3063\u5f35\u308a\u51fa\u3059\u30d8\u30eb\u30d1\u30fc\u300d \u20201 \u306b\u3064\u3044\u3066\u66f8\u3044\u305f\u3002\n\u4eca\u56de\u306f\u300c\u66f8\u304d\u51fa\u3057\u300d\u306b\u3064\u3044\u3066\u30b3\u30fc\u30c9\u306e\u5b9f\u88c5\u4f8b\u3092\u7d39\u4ecb\u3057\u305f\u3044\u3002\n\n\u5fc5\u8981\u306a\u6a5f\u80fd\n\n\u30c9\u30c3\u30c8\u533a\u5207\u308a\u306e\u30d1\u30b9\u6587\u5b57\u5217\u3092\u968e\u5c64\u3054\u3068\u306b\u5206\u96e2\u3059\u308b\u6a5f\u80fd: boost::split \uff08\u20201\u3068\u540c\u69d8\uff09\n\u5206\u96e2\u3055\u308c\u305f\u30d1\u30b9\u306e\u968e\u5c64\u69cb\u9020\u3092\u7d44\u307f\u7acb\u3066\u308b\u6a5f\u80fd\n\u30e6\u30fc\u30b6\u30fc\u306e\u671f\u5f85\u3059\u308b\u578b\u3067\u53d7\u3051\u5165\u308c\u308b\u6a5f\u80fd\n\n\n\u5b9f\u88c5\u8a73\u7d30\n\n\u57fa\u672c: \u5206\u96e2\u3055\u308c\u305f\u30d1\u30b9\u306e\u968e\u5c64\u69cb\u9020\u3092\u7d44\u307f\u7acb\u3066\u308b\u65b9\u6cd5\n    /// @brief object_type \u306b\u5bfe\u3057\u30c9\u30c3\u30c8\u533a\u5207\u308a\u306e\u30d1\u30b9\u3067 object_type \u306e\u968e\u5c64\u3092\u5fc5\u8981\u306a\u3089\u4f5c\u6210\u3057\u306a\u304c\u3089\u8fbf\u308a\u672b\u68a2\u306e\u8981\u7d20\u306e\u53c2\u7167\u3092\u8fd4\u3059\n    static inline decltype( auto ) make_object_path\n    ( object_type& root_object\n    , const std::string& dot_separated_path\n    )\n    {\n      // (1) \u30c9\u30c3\u30c8\u533a\u5207\u308a\u306e\u30d1\u30b9\u6587\u5b57\u5217\u3092\u968e\u5c64\u3054\u3068\u306b\u5206\u96e2\u3059\u308b\u6a5f\u80fd\n      std::vector< std::string > path;\n      boost::split( path, dot_separated_path, boost::is_any_of( \".\" ) );\n\n      // (2) \u5206\u96e2\u3055\u308c\u305f\u30d1\u30b9\u306e\u968e\u5c64\u69cb\u9020\u3092\u7d44\u307f\u7acb\u3066\u308b\u6a5f\u80fd\n      auto peripheral = &root_object;\n\n      // \u7d42\u7aef\u306e\u30d1\u30b9\u3092\u53d6\u308a\u51fa\u3057\u3066\u304a\u304f\n      const auto last_path = std::move( path.back() );\n      path.pop_back();\n\n      // \u7d42\u7aef\u306e\u624b\u524d\u306e\u30d1\u30b9\u307e\u3067 object \u3092\u6398\u308b\n      for ( const auto& path_part : path )\n      {\n        const auto i = peripheral->find( path_part );\n        // note: \u672b\u68a2\u306b\u5fc5\u8981\u306a\u30d1\u30b9\u304c\u7121\u3044\u304b object \u3067\u306f\u306a\u3044\u5834\u5408\u306b\u306e\u307f object \u3092\u4f5c\u6210\n        if ( i == peripheral->cend() or not i->second.is< object_type >() )\n          (*peripheral)[ path_part ] = value_type( object_type() );\n        // note: root_object \u304b\u3089\u672b\u68a2\u5074\u30781\u6bb5\u968e\u8fbf\u308b\n        peripheral = &(*peripheral)[ path_part ].get< object_type >();\n      }\n\n      // \u7d42\u7aef\u306e value& \u3092\u8fd4\u3059\n      return (*peripheral)[ last_path ];\n    }\n  }\n\n  /// @brief element_value \u304c rvalue \u306e\u5834\u5408\u5411\u3051\u306e set_value\n  static inline auto set_value\n  ( object_type& root_object\n  , const std::string& dot_separated_path\n  , value_type&& element_value\n  )\n  { detail::make_object_path( root_object, dot_separated_path ) = std::move( element_value ); }\n\n  /// @brief object_type \u306b\u5bfe\u3057\u30c9\u30c3\u30c8\u533a\u5207\u308a\u306e\u30d1\u30b9\u3067 object_type \u306e\u968e\u5c64\u3092\u8fbf\u308a value_type \u3092\u653e\u308a\u8fbc\u3080\n  static inline auto set_value\n  ( object_type& root_object\n  , const std::string& dot_separated_path\n  , const value_type& element_value\n  )\n  { detail::make_object_path( root_object, dot_separated_path ) = element_value; }\n\n\n\u304a\u307e\u3051: \u30e6\u30fc\u30b6\u30fc\u306e\u671f\u5f85\u3059\u308b\u578b\u3067\u53d7\u3051\u5165\u308c\u308b\u6a5f\u80fd\u306b\u5bfe\u5fdc\u3059\u308b\u65b9\u6cd5\npicojson::array, picojson::object, picojson::value, std::string, const char*, bool, double \u306b\u52a0\u3048\u3066 std::uint8_t, std::uint16_t, std::uint32_t, std::uint64_t, std::int8_t, std::int16_t, std::int32_t, std::int64_t \u3082 set_value \u3078\u305d\u306e\u307e\u307e\u653e\u308a\u6295\u3052\u3089\u308c\u308b\u3068\u4fbf\u5229\u304c\u826f\u3044\u3002\n\u307e\u305f\u3001 root_value \u304c picojson::object \u3092\u5185\u5305\u3057\u305f picojson::value \u306b\u3082\u5bfe\u5fdc\u3057\u305f set_value \u3082\u4f7f\u3048\u308b\u3068\u3057\u3070\u3057\u3070\u3053\u308c\u3082\u4fbf\u5229\u304c\u826f\u3044\u3002\n  /// @brief value_type \u3078\u53ef\u63db\u306a T \u578b\u306e\u5024\u306b\u5bfe\u5fdc\u3059\u308b set_value \u306e syntax sugar \u30e9\u30c3\u30d1\u30fc\n  template < typename T = null_type >\n  static inline auto set_value( object_type& root_object, const std::string& dot_separated_path, const T& element_value = T() )\n  { set_value( root_object, dot_separated_path, value_type( static_cast< double >( element_value ) ) ); }\n\n  template < >\n  inline auto set_value< null_type >( object_type& root_object, const std::string& dot_separated_path, const null_type& )\n  { set_value( root_object, dot_separated_path, value_type() ); }\n\n  template < >\n  inline auto set_value< array_type >( object_type& root_object, const std::string& dot_separated_path, const array_type& element_value )\n  { set_value( root_object, dot_separated_path, value_type( element_value ) ); }\n\n  template < >\n  inline auto set_value< object_type >( object_type& root_object, const std::string& dot_separated_path, const object_type& element_value )\n  { set_value( root_object, dot_separated_path, value_type( element_value ) ); }\n\n  template < >\n  inline auto set_value< value_type >( object_type& root_object, const std::string& dot_separated_path, const value_type& element_value )\n  { set_value( root_object, dot_separated_path, element_value ); }\n\n  template < >\n  inline auto set_value< std::string >( object_type& root_object, const std::string& dot_separated_path, const std::string& element_value )\n  { set_value( root_object, dot_separated_path, value_type( element_value ) ); }\n\n  static inline auto set_value( object_type& root_object, const std::string& dot_separated_path, const char* element_value )\n  { set_value( root_object, dot_separated_path, value_type( element_value ) ); }\n\n  static inline auto set_value( object_type& root_object, const std::string& dot_separated_path, const bool element_value )\n  { set_value( root_object, dot_separated_path, value_type( element_value ) ); }\n\n  /// root_value \u304c object_type \u3092\u5185\u5305\u3059\u308b value_type \u306e\u5834\u5408\u306b\u5bfe\u5fdc\u3059\u308b set_value \u306e syntax sugar \u30e9\u30c3\u30d1\u30fc\n  template < typename T = null_type >\n  static inline auto set_value( value_type& root_value, const std::string& dot_separated_path, T&& element_value = T() )\n  { set_value( root_value.get< object_type >(), dot_separated_path, std::move( element_value ) ); }\n\n\n\u30e9\u30a4\u30d6\u30e9\u30ea\u30fc\u5b9f\u88c5\u4f8b\n\nhttps://github.com/usagi/usagi/blob/master/include/usagi/json/picojson/set_value.hxx\n\n\n\u4f7f\u7528\u4f8b\n#include <usagi/json/picojson/set_value.hxx>\n#include <iostream>\n\nauto main() -> int\n{\n  using namespace std::literals::string_literals;\n  using namespace usagi::json::picojson;\n  object_type a, b;\n  a[\"hoge\"] = value_type( 1.0 );\n  a[\"fuga\"] = value_type( 2.0 );\n  value_type va( a );\n  set_value( va, \"aa.bb.xx\", 1.23 );\n  set_value( va, \"aa.bb.yy\", 1.23f );\n  set_value( va, \"aa.bb.zz\", 123ull );\n  set_value( va, \"aa.bb.ww\", true );\n  set_value( va, \"aa.cc.ss\", \"xyz123\" );\n  set_value( va, \"aa.cc.tt\", \"xyz456\"s );\n  set_value( va, \"uu.vv\" );\n  set_value( va, \"array\", array_type() );\n  set_value( va, \"object\", object_type() );\n  std::cout << va;\n}\n\n\n\u5b9f\u884c\u7d50\u679c\n{\"aa\":{\"bb\":{\"ww\":true,\"xx\":1.23,\"yy\":1.2300000190734863,\"zz\":123},\"cc\":{\"ss\":\"xyz123\",\"tt\":\"xyz456\"}},\"array\":[],\"fuga\":2,\"hoge\":1,\"object\":{},\"uu\":{\"vv\":null}}\n\njq \u306a\u3069\u901a\u3057\u3066\u6574\u5f62\u3059\u308b\u3068:\n{\n  \"aa\": {\n    \"bb\": {\n      \"ww\": true,\n      \"xx\": 1.23,\n      \"yy\": 1.2300000190734863,\n      \"zz\": 123\n    },\n    \"cc\": {\n      \"ss\": \"xyz123\",\n      \"tt\": \"xyz456\"\n    }\n  },\n  \"array\": [],\n  \"fuga\": 2,\n  \"hoge\": 1,\n  \"object\": {},\n  \"uu\": {\n    \"vv\": null\n  }\n}\n\n\nReferences\n\n\u20201 : Qiita - picojson::value \u306b\u5165\u3063\u305f picojson::object \u306e\u30cd\u30b9\u30c8\u69cb\u9020\u3092\u30c9\u30c3\u30c8\u533a\u5207\u308a\u306e\u30d1\u30b9\u6587\u5b57\u5217\u3067\u5f15\u3063\u5f35\u308a\u51fa\u3059\u30d8\u30eb\u30d1\u30fc\n\n\n# \u6982\u8981\n\n\u5148\u65e5\u3001\u300c\u8aad\u307f\u8fbc\u307f\u300d\u306b\u3064\u3044\u3066\u306f [\u300cpicojson::value \u306b\u5165\u3063\u305f picojson::object \u306e\u30cd\u30b9\u30c8\u69cb\u9020\u3092\u30c9\u30c3\u30c8\u533a\u5207\u308a\u306e\u30d1\u30b9\u6587\u5b57\u5217\u3067\u5f15\u3063\u5f35\u308a\u51fa\u3059\u30d8\u30eb\u30d1\u30fc\u300d](http://qiita.com/usagi/items/da3568d8fa61e4aafede) \u20201 \u306b\u3064\u3044\u3066\u66f8\u3044\u305f\u3002\n\n\u4eca\u56de\u306f\u300c\u66f8\u304d\u51fa\u3057\u300d\u306b\u3064\u3044\u3066\u30b3\u30fc\u30c9\u306e\u5b9f\u88c5\u4f8b\u3092\u7d39\u4ecb\u3057\u305f\u3044\u3002\n\n# \u5fc5\u8981\u306a\u6a5f\u80fd\n\n1. \u30c9\u30c3\u30c8\u533a\u5207\u308a\u306e\u30d1\u30b9\u6587\u5b57\u5217\u3092\u968e\u5c64\u3054\u3068\u306b\u5206\u96e2\u3059\u308b\u6a5f\u80fd: boost::split \uff08\u20201\u3068\u540c\u69d8\uff09\n2. \u5206\u96e2\u3055\u308c\u305f\u30d1\u30b9\u306e\u968e\u5c64\u69cb\u9020\u3092\u7d44\u307f\u7acb\u3066\u308b\u6a5f\u80fd\n3. \u30e6\u30fc\u30b6\u30fc\u306e\u671f\u5f85\u3059\u308b\u578b\u3067\u53d7\u3051\u5165\u308c\u308b\u6a5f\u80fd\n\n# \u5b9f\u88c5\u8a73\u7d30\n\n## \u57fa\u672c: \u5206\u96e2\u3055\u308c\u305f\u30d1\u30b9\u306e\u968e\u5c64\u69cb\u9020\u3092\u7d44\u307f\u7acb\u3066\u308b\u65b9\u6cd5\n\n```C++\n    /// @brief object_type \u306b\u5bfe\u3057\u30c9\u30c3\u30c8\u533a\u5207\u308a\u306e\u30d1\u30b9\u3067 object_type \u306e\u968e\u5c64\u3092\u5fc5\u8981\u306a\u3089\u4f5c\u6210\u3057\u306a\u304c\u3089\u8fbf\u308a\u672b\u68a2\u306e\u8981\u7d20\u306e\u53c2\u7167\u3092\u8fd4\u3059\n    static inline decltype( auto ) make_object_path\n    ( object_type& root_object\n    , const std::string& dot_separated_path\n    )\n    {\n      // (1) \u30c9\u30c3\u30c8\u533a\u5207\u308a\u306e\u30d1\u30b9\u6587\u5b57\u5217\u3092\u968e\u5c64\u3054\u3068\u306b\u5206\u96e2\u3059\u308b\u6a5f\u80fd\n      std::vector< std::string > path;\n      boost::split( path, dot_separated_path, boost::is_any_of( \".\" ) );\n      \n      // (2) \u5206\u96e2\u3055\u308c\u305f\u30d1\u30b9\u306e\u968e\u5c64\u69cb\u9020\u3092\u7d44\u307f\u7acb\u3066\u308b\u6a5f\u80fd\n      auto peripheral = &root_object;\n      \n      // \u7d42\u7aef\u306e\u30d1\u30b9\u3092\u53d6\u308a\u51fa\u3057\u3066\u304a\u304f\n      const auto last_path = std::move( path.back() );\n      path.pop_back();\n      \n      // \u7d42\u7aef\u306e\u624b\u524d\u306e\u30d1\u30b9\u307e\u3067 object \u3092\u6398\u308b\n      for ( const auto& path_part : path )\n      {\n        const auto i = peripheral->find( path_part );\n        // note: \u672b\u68a2\u306b\u5fc5\u8981\u306a\u30d1\u30b9\u304c\u7121\u3044\u304b object \u3067\u306f\u306a\u3044\u5834\u5408\u306b\u306e\u307f object \u3092\u4f5c\u6210\n        if ( i == peripheral->cend() or not i->second.is< object_type >() )\n          (*peripheral)[ path_part ] = value_type( object_type() );\n        // note: root_object \u304b\u3089\u672b\u68a2\u5074\u30781\u6bb5\u968e\u8fbf\u308b\n        peripheral = &(*peripheral)[ path_part ].get< object_type >();\n      }\n      \n      // \u7d42\u7aef\u306e value& \u3092\u8fd4\u3059\n      return (*peripheral)[ last_path ];\n    }\n  }\n  \n  /// @brief element_value \u304c rvalue \u306e\u5834\u5408\u5411\u3051\u306e set_value\n  static inline auto set_value\n  ( object_type& root_object\n  , const std::string& dot_separated_path\n  , value_type&& element_value\n  )\n  { detail::make_object_path( root_object, dot_separated_path ) = std::move( element_value ); }\n  \n  /// @brief object_type \u306b\u5bfe\u3057\u30c9\u30c3\u30c8\u533a\u5207\u308a\u306e\u30d1\u30b9\u3067 object_type \u306e\u968e\u5c64\u3092\u8fbf\u308a value_type \u3092\u653e\u308a\u8fbc\u3080\n  static inline auto set_value\n  ( object_type& root_object\n  , const std::string& dot_separated_path\n  , const value_type& element_value\n  )\n  { detail::make_object_path( root_object, dot_separated_path ) = element_value; }\n```\n\n## \u304a\u307e\u3051: \u30e6\u30fc\u30b6\u30fc\u306e\u671f\u5f85\u3059\u308b\u578b\u3067\u53d7\u3051\u5165\u308c\u308b\u6a5f\u80fd\u306b\u5bfe\u5fdc\u3059\u308b\u65b9\u6cd5\n\n`picojson::array`, `picojson::object`, `picojson::value`, `std::string`, `const char*`, `bool`, `double` \u306b\u52a0\u3048\u3066 `std::uint8_t`, `std::uint16_t`, `std::uint32_t`, `std::uint64_t`, `std::int8_t`, `std::int16_t`, `std::int32_t`, `std::int64_t` \u3082 `set_value` \u3078\u305d\u306e\u307e\u307e\u653e\u308a\u6295\u3052\u3089\u308c\u308b\u3068\u4fbf\u5229\u304c\u826f\u3044\u3002\n\n\u307e\u305f\u3001 `root_value` \u304c `picojson::object` \u3092\u5185\u5305\u3057\u305f `picojson::value` \u306b\u3082\u5bfe\u5fdc\u3057\u305f `set_value` \u3082\u4f7f\u3048\u308b\u3068\u3057\u3070\u3057\u3070\u3053\u308c\u3082\u4fbf\u5229\u304c\u826f\u3044\u3002\n\n```C++\n  /// @brief value_type \u3078\u53ef\u63db\u306a T \u578b\u306e\u5024\u306b\u5bfe\u5fdc\u3059\u308b set_value \u306e syntax sugar \u30e9\u30c3\u30d1\u30fc\n  template < typename T = null_type >\n  static inline auto set_value( object_type& root_object, const std::string& dot_separated_path, const T& element_value = T() )\n  { set_value( root_object, dot_separated_path, value_type( static_cast< double >( element_value ) ) ); }\n  \n  template < >\n  inline auto set_value< null_type >( object_type& root_object, const std::string& dot_separated_path, const null_type& )\n  { set_value( root_object, dot_separated_path, value_type() ); }\n  \n  template < >\n  inline auto set_value< array_type >( object_type& root_object, const std::string& dot_separated_path, const array_type& element_value )\n  { set_value( root_object, dot_separated_path, value_type( element_value ) ); }\n  \n  template < >\n  inline auto set_value< object_type >( object_type& root_object, const std::string& dot_separated_path, const object_type& element_value )\n  { set_value( root_object, dot_separated_path, value_type( element_value ) ); }\n  \n  template < >\n  inline auto set_value< value_type >( object_type& root_object, const std::string& dot_separated_path, const value_type& element_value )\n  { set_value( root_object, dot_separated_path, element_value ); }\n  \n  template < >\n  inline auto set_value< std::string >( object_type& root_object, const std::string& dot_separated_path, const std::string& element_value )\n  { set_value( root_object, dot_separated_path, value_type( element_value ) ); }\n  \n  static inline auto set_value( object_type& root_object, const std::string& dot_separated_path, const char* element_value )\n  { set_value( root_object, dot_separated_path, value_type( element_value ) ); }\n  \n  static inline auto set_value( object_type& root_object, const std::string& dot_separated_path, const bool element_value )\n  { set_value( root_object, dot_separated_path, value_type( element_value ) ); }\n  \n  /// root_value \u304c object_type \u3092\u5185\u5305\u3059\u308b value_type \u306e\u5834\u5408\u306b\u5bfe\u5fdc\u3059\u308b set_value \u306e syntax sugar \u30e9\u30c3\u30d1\u30fc\n  template < typename T = null_type >\n  static inline auto set_value( value_type& root_value, const std::string& dot_separated_path, T&& element_value = T() )\n  { set_value( root_value.get< object_type >(), dot_separated_path, std::move( element_value ) ); }\n```\n\n# \u30e9\u30a4\u30d6\u30e9\u30ea\u30fc\u5b9f\u88c5\u4f8b\n\n- https://github.com/usagi/usagi/blob/master/include/usagi/json/picojson/set_value.hxx\n\n## \u4f7f\u7528\u4f8b\n\n```c++\n#include <usagi/json/picojson/set_value.hxx>\n#include <iostream>\n\nauto main() -> int\n{\n  using namespace std::literals::string_literals;\n  using namespace usagi::json::picojson;\n  object_type a, b;\n  a[\"hoge\"] = value_type( 1.0 );\n  a[\"fuga\"] = value_type( 2.0 );\n  value_type va( a );\n  set_value( va, \"aa.bb.xx\", 1.23 );\n  set_value( va, \"aa.bb.yy\", 1.23f );\n  set_value( va, \"aa.bb.zz\", 123ull );\n  set_value( va, \"aa.bb.ww\", true );\n  set_value( va, \"aa.cc.ss\", \"xyz123\" );\n  set_value( va, \"aa.cc.tt\", \"xyz456\"s );\n  set_value( va, \"uu.vv\" );\n  set_value( va, \"array\", array_type() );\n  set_value( va, \"object\", object_type() );\n  std::cout << va;\n}\n```\n\n### \u5b9f\u884c\u7d50\u679c\n\n```json\n{\"aa\":{\"bb\":{\"ww\":true,\"xx\":1.23,\"yy\":1.2300000190734863,\"zz\":123},\"cc\":{\"ss\":\"xyz123\",\"tt\":\"xyz456\"}},\"array\":[],\"fuga\":2,\"hoge\":1,\"object\":{},\"uu\":{\"vv\":null}}\n```\n\n`jq` \u306a\u3069\u901a\u3057\u3066\u6574\u5f62\u3059\u308b\u3068:\n\n```json\n{\n  \"aa\": {\n    \"bb\": {\n      \"ww\": true,\n      \"xx\": 1.23,\n      \"yy\": 1.2300000190734863,\n      \"zz\": 123\n    },\n    \"cc\": {\n      \"ss\": \"xyz123\",\n      \"tt\": \"xyz456\"\n    }\n  },\n  \"array\": [],\n  \"fuga\": 2,\n  \"hoge\": 1,\n  \"object\": {},\n  \"uu\": {\n    \"vv\": null\n  }\n}\n```\n\n# References\n\n- \u20201 : [Qiita - picojson::value \u306b\u5165\u3063\u305f picojson::object \u306e\u30cd\u30b9\u30c8\u69cb\u9020\u3092\u30c9\u30c3\u30c8\u533a\u5207\u308a\u306e\u30d1\u30b9\u6587\u5b57\u5217\u3067\u5f15\u3063\u5f35\u308a\u51fa\u3059\u30d8\u30eb\u30d1\u30fc](http://qiita.com/usagi/items/da3568d8fa61e4aafede)\n\n", "tags": ["C++", "picojson", "path", "JSON", "library"]}