{"context": "\u6a19\u6e96\u306b\u306f\u3042\u308a\u305d\u3046\u3067\u306a\u304b\u3063\u305f\u3001getline\u306e\u7b2c\u4e09\u5f15\u6570\u304cstd::string\u306e\u30aa\u30fc\u30d0\u30fc\u30ed\u30fc\u30c9\u3092\u66f8\u3044\u305f\u306e\u3067\u8f09\u305b\u308b\u3060\u3051\u3002\u5b9f\u969b\u306b\u306fstd\u7a7a\u9593\u306b\u8ffd\u52a0\u3057\u3061\u3083\u3060\u3081\u3060\u3051\u3069\u2026\n\u81ea\u5206\u3067\u66f8\u3044\u3066\u308b\u4eba\u3082\u591a\u3044\u3068\u601d\u3046\u3051\u3069\u30b3\u30d4\u30da\u3059\u308c\u3070\u4f7f\u3048\u308b\u3088\u3002\n\u3053\u308c\u3092\u4f7f\u3048\u3070\u6587\u5b57\u5217\u3092\u533a\u5207\u308a\u6587\u5b57\u306b\u4f7f\u3048\u308b\u306e\u3067\u3001\u5358\u8a9e\u3092\u533a\u5207\u308a\u6587\u5b57\u306b\u3057\u305f\u308a\u3001\\r\\n\u3092\u533a\u5207\u308a\u6587\u5b57\u306b\u3057\u305f\u308a\u3068\u3044\u3046\u3053\u3068\u304c\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u308b\u3088\u3002\n// for example..\nstd::istringstream iss(\"world wide word\");\nstd::string delim = \" wo\";\n\nstd::string str;\ngetline(iss, str, delim);\nstd::cout << str << std::endl; // outputs \"world wide\"\n\n\u6ce8\u610f\u70b9\u306f\u5168\u3066\u6a19\u6e96\u306estd::getline\u3068\u540c\u3058\u3064\u3082\u308a\u3067\u3059\u304c\u3001\u601d\u3044\u9055\u3044\u304c\u3042\u3063\u305f\u308a\u4e0d\u8db3\u304c\u3042\u3063\u305f\u308a\u3059\u308b\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u3002\n\u3000\u30fb\u51fa\u529b\u3067\u3042\u308boutput\u306f\u95a2\u6570\u306e\u6700\u521d\u306b\u30af\u30ea\u30a2\u3055\u308c\u308b\u3002\n\u3000\u30fbeof, bad, fail\u306e\u3044\u305a\u308c\u304b\u306e\u30d5\u30e9\u30b0\u304c\u7acb\u3063\u3066\u3044\u308b\u3068\u95a2\u6570\u306f\u5931\u6557\u3059\u308b\u3002\u305d\u306e\u969b\u3001\u30b9\u30c8\u30ea\u30fc\u30e0\u306bfail\u30d5\u30e9\u30b0\u304c\u7acb\u3064\u3002\n\u3000\u30fb\u30b9\u30c8\u30ea\u30fc\u30e0\u306e\u4e2d\u306bstd::string::max_size()\u3068\u540c\u3058\u304b\u305d\u308c\u3088\u308a\u591a\u304f\u306e\u6587\u5b57\u304c\u5165\u3063\u3066\u3044\u308b\u3068\u95a2\u6570\u306f\u5931\u6557\u3059\u308b\u3002\u305d\u306e\u969b\u3001\u30b9\u30c8\u30ea\u30fc\u30e0\u306bfail\u30d5\u30e9\u30b0\u304c\u7acb\u3064\u3002\n\u3000\u30fb\u30b9\u30c8\u30ea\u30fc\u30e0\u306e\u5148\u982d\u304c\u30c7\u30ea\u30df\u30bf\u3067\u3042\u3063\u305f\u5834\u5408\u3092\u9664\u304d\u3001\u4e00\u6587\u5b57\u3082\u51fa\u529b\u304c\u306a\u304b\u3063\u305f\u3068\u304d\u95a2\u6570\u306f\u5931\u6557\u3057\u305f\u3068\u307f\u306a\u3055\u308c\u308b\u3002\u305d\u306e\u969b\u3001\u30b9\u30c8\u30ea\u30fc\u30e0\u306bfail\u30d5\u30e9\u30b0\u304c\u7acb\u3064\u3002\n\u3000\u30fb\u30c7\u30ea\u30df\u30bf\u304c\u898b\u3064\u304b\u3089\u306a\u304b\u3063\u305f\u5834\u5408\u3001\u30b9\u30c8\u30ea\u30fc\u30e0\u306beof\u30d5\u30e9\u30b0\u304c\u7acb\u3064\u3002\n\u3000\u30fb\u30c7\u30ea\u30df\u30bf\u306f\u51fa\u529b\u3055\u308c\u306a\u3044\u3002\n\u4ee5\u4e0b\u5b9f\u88c5\u3002\u672c\u5f53\u306fistream\u306e\u53f3\u8fba\u5024\u53c2\u7167\u7248\u306e\u30aa\u30fc\u30d0\u30fc\u30ed\u30fc\u30c9\u3082\u4f5c\u308b\u3079\u304d\u3067\u3059\u3002\n\u4e3b\u306a\u51e6\u7406\u306fdo-while\u6587\u306e\u4e2d\u8eab\u3060\u3051\u3067\u3001\u30e9\u30e0\u30c0\u5f0f\u306e\u4e2d\u3067\u30c7\u30ea\u30df\u30bf\u306e\u5224\u5b9a\u3092\u3057\u3066\u3044\u308b\u3060\u3051\u306a\u306e\u3067\u95a2\u6570\u306e\u9577\u3055\u307b\u3069\u3084\u3063\u3066\u308b\u3053\u3068\u306f\u591a\u304f\u306a\u3044\u3067\u3059\u3002\n#include <istream>\n#include <string>\n#include <exception>\n\ntemplate< class Char, class Traits, class Alloc >\nstd::basic_istream< Char, Traits >& getline(\n    std::basic_istream< Char, Traits >& is,\n    std::basic_string< Char, Traits, Alloc >& output,\n    const std::basic_string< Char, Traits, Alloc >& delim)\n{\n  if (!delim.size()) { return std::getline(is, output); }\n  output.erase();\n  is.peek();\n  using uint_enough =\n    typename std::basic_string< Char, Traits, Alloc >::size_type;\n  if (!is.good()\n      || static_cast< uint_enough >(is.rdbuf()->in_avail())\n          == output.max_size())\n  { // output.max_size() characters have been stored,\n    // in which case getline sets failbit and returns.\n    is.clear(std::ios::failbit | is.rdstate());\n    return (is);\n  }\n\n  auto is_to_continue = [&]\n  { // lambda\n    for (std::size_t i = 1; i < delim.size() && is.good(); ++i)\n    {\n      Char c = is.get();\n      output.push_back(c);\n      if (!Traits::eq(c, delim[i])) { return true; }\n    }\n    output.resize(output.size() - delim.size());\n    return false;\n  };\n\n  do\n  { // extracts the input\n    std::basic_string< Char, Traits, Alloc > buf;\n    std::getline(is, buf, delim.front());\n    output += buf;\n    if (!is.good()) { break; }  // no delim found or some errors occured.\n    output.push_back(delim.front());\n  } while (is_to_continue());\n  return (is);\n}\n\n\u6a19\u6e96\u306b\u306f\u3042\u308a\u305d\u3046\u3067\u306a\u304b\u3063\u305f\u3001getline\u306e\u7b2c\u4e09\u5f15\u6570\u304cstd::string\u306e\u30aa\u30fc\u30d0\u30fc\u30ed\u30fc\u30c9\u3092\u66f8\u3044\u305f\u306e\u3067\u8f09\u305b\u308b\u3060\u3051\u3002\u5b9f\u969b\u306b\u306fstd\u7a7a\u9593\u306b\u8ffd\u52a0\u3057\u3061\u3083\u3060\u3081\u3060\u3051\u3069\u2026\n\u81ea\u5206\u3067\u66f8\u3044\u3066\u308b\u4eba\u3082\u591a\u3044\u3068\u601d\u3046\u3051\u3069\u30b3\u30d4\u30da\u3059\u308c\u3070\u4f7f\u3048\u308b\u3088\u3002\n\u3053\u308c\u3092\u4f7f\u3048\u3070\u6587\u5b57\u5217\u3092\u533a\u5207\u308a\u6587\u5b57\u306b\u4f7f\u3048\u308b\u306e\u3067\u3001\u5358\u8a9e\u3092\u533a\u5207\u308a\u6587\u5b57\u306b\u3057\u305f\u308a\u3001`\\r\\n`\u3092\u533a\u5207\u308a\u6587\u5b57\u306b\u3057\u305f\u308a\u3068\u3044\u3046\u3053\u3068\u304c\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u308b\u3088\u3002\n\n```cpp\n// for example..\nstd::istringstream iss(\"world wide word\");\nstd::string delim = \" wo\";\n\nstd::string str;\ngetline(iss, str, delim);\nstd::cout << str << std::endl; // outputs \"world wide\"\n```\n\n\u6ce8\u610f\u70b9\u306f\u5168\u3066\u6a19\u6e96\u306estd::getline\u3068\u540c\u3058\u3064\u3082\u308a\u3067\u3059\u304c\u3001\u601d\u3044\u9055\u3044\u304c\u3042\u3063\u305f\u308a\u4e0d\u8db3\u304c\u3042\u3063\u305f\u308a\u3059\u308b\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u3002\n\u3000\u30fb\u51fa\u529b\u3067\u3042\u308boutput\u306f\u95a2\u6570\u306e\u6700\u521d\u306b\u30af\u30ea\u30a2\u3055\u308c\u308b\u3002\n\u3000\u30fbeof, bad, fail\u306e\u3044\u305a\u308c\u304b\u306e\u30d5\u30e9\u30b0\u304c\u7acb\u3063\u3066\u3044\u308b\u3068\u95a2\u6570\u306f\u5931\u6557\u3059\u308b\u3002\u305d\u306e\u969b\u3001\u30b9\u30c8\u30ea\u30fc\u30e0\u306bfail\u30d5\u30e9\u30b0\u304c\u7acb\u3064\u3002\n\u3000\u30fb\u30b9\u30c8\u30ea\u30fc\u30e0\u306e\u4e2d\u306b`std::string::max_size()`\u3068\u540c\u3058\u304b\u305d\u308c\u3088\u308a\u591a\u304f\u306e\u6587\u5b57\u304c\u5165\u3063\u3066\u3044\u308b\u3068\u95a2\u6570\u306f\u5931\u6557\u3059\u308b\u3002\u305d\u306e\u969b\u3001\u30b9\u30c8\u30ea\u30fc\u30e0\u306bfail\u30d5\u30e9\u30b0\u304c\u7acb\u3064\u3002\n\u3000\u30fb\u30b9\u30c8\u30ea\u30fc\u30e0\u306e\u5148\u982d\u304c\u30c7\u30ea\u30df\u30bf\u3067\u3042\u3063\u305f\u5834\u5408\u3092\u9664\u304d\u3001\u4e00\u6587\u5b57\u3082\u51fa\u529b\u304c\u306a\u304b\u3063\u305f\u3068\u304d\u95a2\u6570\u306f\u5931\u6557\u3057\u305f\u3068\u307f\u306a\u3055\u308c\u308b\u3002\u305d\u306e\u969b\u3001\u30b9\u30c8\u30ea\u30fc\u30e0\u306bfail\u30d5\u30e9\u30b0\u304c\u7acb\u3064\u3002\n\u3000\u30fb\u30c7\u30ea\u30df\u30bf\u304c\u898b\u3064\u304b\u3089\u306a\u304b\u3063\u305f\u5834\u5408\u3001\u30b9\u30c8\u30ea\u30fc\u30e0\u306beof\u30d5\u30e9\u30b0\u304c\u7acb\u3064\u3002\n\u3000\u30fb\u30c7\u30ea\u30df\u30bf\u306f\u51fa\u529b\u3055\u308c\u306a\u3044\u3002\n\n\u4ee5\u4e0b\u5b9f\u88c5\u3002\u672c\u5f53\u306fistream\u306e\u53f3\u8fba\u5024\u53c2\u7167\u7248\u306e\u30aa\u30fc\u30d0\u30fc\u30ed\u30fc\u30c9\u3082\u4f5c\u308b\u3079\u304d\u3067\u3059\u3002\n\u4e3b\u306a\u51e6\u7406\u306fdo-while\u6587\u306e\u4e2d\u8eab\u3060\u3051\u3067\u3001\u30e9\u30e0\u30c0\u5f0f\u306e\u4e2d\u3067\u30c7\u30ea\u30df\u30bf\u306e\u5224\u5b9a\u3092\u3057\u3066\u3044\u308b\u3060\u3051\u306a\u306e\u3067\u95a2\u6570\u306e\u9577\u3055\u307b\u3069\u3084\u3063\u3066\u308b\u3053\u3068\u306f\u591a\u304f\u306a\u3044\u3067\u3059\u3002\n\n```cpp\n#include <istream>\n#include <string>\n#include <exception>\n\ntemplate< class Char, class Traits, class Alloc >\nstd::basic_istream< Char, Traits >& getline(\n    std::basic_istream< Char, Traits >& is,\n    std::basic_string< Char, Traits, Alloc >& output,\n    const std::basic_string< Char, Traits, Alloc >& delim)\n{\n  if (!delim.size()) { return std::getline(is, output); }\n  output.erase();\n  is.peek();\n  using uint_enough =\n    typename std::basic_string< Char, Traits, Alloc >::size_type;\n  if (!is.good()\n      || static_cast< uint_enough >(is.rdbuf()->in_avail())\n          == output.max_size())\n  { // output.max_size() characters have been stored,\n    // in which case getline sets failbit and returns.\n    is.clear(std::ios::failbit | is.rdstate());\n    return (is);\n  }\n\n  auto is_to_continue = [&]\n  { // lambda\n    for (std::size_t i = 1; i < delim.size() && is.good(); ++i)\n    {\n      Char c = is.get();\n      output.push_back(c);\n      if (!Traits::eq(c, delim[i])) { return true; }\n    }\n    output.resize(output.size() - delim.size());\n    return false;\n  };\n\n  do\n  { // extracts the input\n    std::basic_string< Char, Traits, Alloc > buf;\n    std::getline(is, buf, delim.front());\n    output += buf;\n    if (!is.good()) { break; }  // no delim found or some errors occured.\n    output.push_back(delim.front());\n  } while (is_to_continue());\n  return (is);\n}\n```\n", "tags": ["C++", "C++11"]}