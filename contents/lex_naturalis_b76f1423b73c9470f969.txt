{"context": " More than 1 year has passed since last update.\uff08\u5143\u30cd\u30bf\u306f http://nabetani.sakura.ne.jp/hena/ord13blocktup/ \uff09\n\u4eca\u56de\u306f15\u5206\u4f4d\u3067\u66f8\u304d\u4e0a\u304c\u3063\u305f\u3002\u508d\u76ee\u306b\u306f\u4e00\u3064\u524d\u306e\u8a18\u4e8b\u306e\u3077\u3088\u3077\u3088\u306e\u9023\u9396\u3068\u540c\u3058\u3088\u3046\u306a\u3082\u306e\u306b\u898b\u3048\u308b\u306e\u304b\u3082\u3057\u308c\u306a\u3044\u304c\u3001\u624b\u6301\u3061\u306e\u9053\u5177\u304c\u30ea\u30b9\u30c8\u64cd\u4f5c\u3060\u3051\u3060\u3068\u304b\u306a\u308a\u96e3\u6613\u5ea6\u304c\u9055\u3046\u3002\n\nBricksWaters.hs\n\nmodule Main where\nimport Control.Applicative\nimport Data.List\nimport System.Environment (getArgs)\n\ndata Cell = B | W deriving Eq\ntype Pool = [[Cell]]\n\n-- \u30c7\u30fc\u30bf\u6587\u5b57\u5217\u3092\"0\"\u3067\u30b9\u30d7\u30ea\u30c3\u30c8\u3057\u306a\u304c\u3089\u6574\u6570\u30ea\u30b9\u30c8\u306e\u30ea\u30b9\u30c8\u306b\nsplitdata :: String->[[Int]]\nsplitdata str = split' str [] []\n  where\n    split' [] xs ys = xs:ys\n    split' ('0':ss) xs ys = split' ss [] (xs:ys)\n    split' (s:ss) xs ys = split' ss (read [s]:xs) ys\n\n-- \u30d6\u30ea\u30c3\u30af(B)\u3068\u6c34(W)\u306e\u30ea\u30b9\u30c8\uff06\u4e00\u756a\u9ad8\u3044\u30d6\u30ea\u30c3\u30af\u306e\u9ad8\u3055\u307e\u3067\u6c34\u3092\u6e80\u305f\u3059\nconstruct :: [Int]->Pool\nconstruct datalist = map pile datalist\n  where\n    pile n = take (maximum datalist) $ (take n $ repeat B)++(repeat W)\n\n-- \u4fdd\u6301\u3067\u304d\u306a\u3044\u6c34\u3092\u6392\u6c34\nflush :: Pool->Pool\nflush =  map (dropWhile (==W).reverse.dropWhile (==W)) . transpose\n\ncountWater :: [Int] -> Int\ncountWater =  length.filter (==W).concat.flush.construct\n\nsolve :: String -> Int\nsolve = sum.map countWater.splitdata\n\n-- \u30b3\u30de\u30f3\u30c9\u30e9\u30a4\u30f3\u3067\u30c7\u30fc\u30bf\u6587\u5b57\u5217\u3092\u53d7\u3051\u53d6\u3063\u3066\u89e3\u7b54\u3092\u5370\u5b57\nmain = solve<$>concat<$>getArgs >>= print\n\n\n\n\n\uff08\u5143\u30cd\u30bf\u306f http://nabetani.sakura.ne.jp/hena/ord13blocktup/ \uff09\n\u4eca\u56de\u306f15\u5206\u4f4d\u3067\u66f8\u304d\u4e0a\u304c\u3063\u305f\u3002\u508d\u76ee\u306b\u306f\u4e00\u3064\u524d\u306e\u8a18\u4e8b\u306e\u3077\u3088\u3077\u3088\u306e\u9023\u9396\u3068\u540c\u3058\u3088\u3046\u306a\u3082\u306e\u306b\u898b\u3048\u308b\u306e\u304b\u3082\u3057\u308c\u306a\u3044\u304c\u3001\u624b\u6301\u3061\u306e\u9053\u5177\u304c\u30ea\u30b9\u30c8\u64cd\u4f5c\u3060\u3051\u3060\u3068\u304b\u306a\u308a\u96e3\u6613\u5ea6\u304c\u9055\u3046\u3002\n\n```hs:BricksWaters.hs\n\nmodule Main where\nimport Control.Applicative\nimport Data.List\nimport System.Environment (getArgs)\n\ndata Cell = B | W deriving Eq\ntype Pool = [[Cell]]\n\n-- \u30c7\u30fc\u30bf\u6587\u5b57\u5217\u3092\"0\"\u3067\u30b9\u30d7\u30ea\u30c3\u30c8\u3057\u306a\u304c\u3089\u6574\u6570\u30ea\u30b9\u30c8\u306e\u30ea\u30b9\u30c8\u306b\nsplitdata :: String->[[Int]]\nsplitdata str = split' str [] []\n  where\n  \tsplit' [] xs ys = xs:ys\n  \tsplit' ('0':ss) xs ys = split' ss [] (xs:ys)\n  \tsplit' (s:ss) xs ys = split' ss (read [s]:xs) ys\n\n-- \u30d6\u30ea\u30c3\u30af(B)\u3068\u6c34(W)\u306e\u30ea\u30b9\u30c8\uff06\u4e00\u756a\u9ad8\u3044\u30d6\u30ea\u30c3\u30af\u306e\u9ad8\u3055\u307e\u3067\u6c34\u3092\u6e80\u305f\u3059\nconstruct :: [Int]->Pool\nconstruct datalist = map pile datalist\n  where\n  \tpile n = take (maximum datalist) $ (take n $ repeat B)++(repeat W)\n\n-- \u4fdd\u6301\u3067\u304d\u306a\u3044\u6c34\u3092\u6392\u6c34\nflush :: Pool->Pool\nflush =  map (dropWhile (==W).reverse.dropWhile (==W)) . transpose\n\ncountWater :: [Int] -> Int\ncountWater =  length.filter (==W).concat.flush.construct\n\nsolve :: String -> Int\nsolve = sum.map countWater.splitdata\n\n-- \u30b3\u30de\u30f3\u30c9\u30e9\u30a4\u30f3\u3067\u30c7\u30fc\u30bf\u6587\u5b57\u5217\u3092\u53d7\u3051\u53d6\u3063\u3066\u89e3\u7b54\u3092\u5370\u5b57\nmain = solve<$>concat<$>getArgs >>= print\n\n```\n", "tags": ["\u60c5\u5f31", "Haskell"]}