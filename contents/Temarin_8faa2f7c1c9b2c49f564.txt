{"context": " More than 1 year has passed since last update.Web\u30da\u30fc\u30b8\u3092\u5b9a\u671f\u7684\u306b\u30af\u30ed\u30fc\u30eb\u3059\u308b\u3088\u3046\u306a\u30a2\u30d7\u30ea\u306e\u5834\u5408\u3001\u8ca0\u8377\u5236\u5fa1\u304c\u5fc5\u9808\u3067\u3059\u3002\n\u305d\u3053\u3067\u3001\u6307\u5b9a\u3057\u305f\u6642\u9593\u3001\u4f11\u61a9\u3092\u5165\u308c\u306a\u304c\u3089\u30b9\u30b1\u30b8\u30e5\u30fc\u30eb\u3055\u308c\u305f\u30a2\u30af\u30b7\u30e7\u30f3\u3092\u5b9f\u884c\u3067\u304d\u308b\u30b9\u30b1\u30b8\u30e5\u30fc\u30e9\u3092\u5b9f\u88c5\u3057\u3066\u307f\u307e\u3057\u305f\u3002\n\u4e00\u5fdc\u52d5\u304f\u7a0b\u5ea6\u306e\u3082\u306e\n\nLocalScheduler\u306e\u5b9f\u88c5\nRx\u306e\u57fa\u672c\u7684\u306a\u30b9\u30b1\u30b8\u30e5\u30fc\u30e9\u306f\u3001System.Reactive.Concurrency.LocalScheduler\u30af\u30e9\u30b9\u304b\u3089\u6d3e\u751f\u3057\u3066\u3044\u307e\u3059\u306e\u3067\u3001\nLocalScheduler\u3092\u7d99\u627f\u3057\u305fWaitScheduler\u30af\u30e9\u30b9\u3092\u4f5c\u308a\u307e\u3059\u3002\nusing System;\nusing System.Reactive.Concurrency;\nusing System.Reactive.Disposables;\n\nnamespace PITA {\n    public sealed class WaitScheduler : LocalScheduler {\n        private readonly object syncLock = new object();\n        private readonly TimeSpan wait;\n        private DateTimeOffset nextPoint;\n        /// <see cref=\"WaitScheduler\"/>\u30af\u30e9\u30b9\u306e\u65b0\u3057\u3044\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u521d\u671f\u5316\u3057\u307e\u3059\u3002\n        /// </summary>\n        /// <param name=\"wait\">\u51e6\u7406\u9593\u9694</param>\n        public WaitScheduler( TimeSpan wait ) {\n            this.wait = wait;\n            this.nextPoint = this.Now;\n        }\n\n        public override IDisposable Schedule<TState>( TState state , TimeSpan dueTime , Func<IScheduler , TState , IDisposable> action ) {\n            if( action == null )\n                throw new ArgumentNullException( nameof( action ) );\n            return Scheduler.Default.Schedule( state , dueTime , action );\n        }\n\n        public override IDisposable Schedule<TState>( TState state , Func<IScheduler , TState , IDisposable> action ) {\n            if( action == null )\n                throw new ArgumentNullException( nameof( action ) );\n            if( state is Action ) {\n                var n = ( state as Action ).Target as ScheduledDisposable;\n                if( n != null && n.Scheduler == this )\n                    return Scheduler.Default.Schedule( state , action );\n            }\n\n            lock ( this.syncLock ) {\n                var tmp = this.nextPoint;\n                this.nextPoint += this.wait;\n                return Scheduler.Default.Schedule( state , tmp , action );\n            }\n        }\n    }\n}\n\nScheduler.Default\u306f\u3001\u65e2\u5b9a\u306e\u30b9\u30b1\u30b8\u30e5\u30fc\u30e9\u3092\u53c2\u7167\u3057\u307e\u3059\u3002\u901a\u5e38\u306f\u3001ThreadPoolScheduler\u3067\u3057\u3087\u3046\u3002\n\u3084\u3063\u3066\u3044\u308b\u3053\u3068\u306f\u3001\u30b9\u30b1\u30b8\u30e5\u30fc\u30eb\u3055\u308c\u305f\u3089\u3001\u5b9f\u884c\u6642\u9593\u3092\u6c7a\u3081\u3066Scheduler.Default\u306b\u6295\u3052\u3066\u3044\u308b\u3060\u3051\u3067\u3059\u3002\nvar n = ( state as Action ).Target as ScheduledDisposable;\n\u3053\u306e\u90e8\u5206\u306e\u5fc5\u8981\u6027\u3067\u3059\u304c\u3001Retry\u3001Repeat\u304c\u8d70\u3063\u305f\u3068\u304d\u3001\u5f85\u6a5f\u6642\u9593\u304c2\u500d\u306b\u306a\u308b\u305f\u3081\u3001\u305d\u306e\u5834\u5408\u306f\u3001\u5b9f\u884c\u6642\u9593\u3092\u6307\u5b9a\u305b\u305a\u306b\n\u30b9\u30b1\u30b8\u30e5\u30fc\u30eb\u3059\u308b\u3088\u3046\u306b\u5236\u5fa1\u3057\u3066\u3044\u307e\u3059\u3002\n\n\u4f7f\u3044\u65b9\nSubscribe\u3055\u308c\u308b\u3068\u3001\u73fe\u5728\u6642\u9593\u3092\u6d41\u3059Observable\u3067\u3059\u3002\nSubscribeOn\u3067\u30b9\u30b1\u30b8\u30e5\u30fc\u30e9\u3092\u6307\u5b9a\u3057\u3066\u304a\u304f\u3068\u3001\u6307\u5b9a\u3057\u305f\u30b9\u30b1\u30b8\u30e5\u30fc\u30e9\u4e0a\u3067Observable\u304c\u5b9f\u884c\u3055\u308c\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002\nvar scheduler = new WaitScheduler( TimeSpan.FromSeconds( 1 ) );\n\nvar test = Observable.Create<DateTime>( o => {\n    o.OnNext( DateTime.Now );\n    o.OnCompleted();\n    return System.Reactive.Disposables.Disposable.Empty;\n} )\n.SubscribeOn( scheduler );\n\ntest.Subscribe( x => Console.WriteLine( x ) );\ntest.Subscribe( x => Console.WriteLine( x ) );\ntest.Subscribe( x => Console.WriteLine( x ) );\ntest.Subscribe( x => Console.WriteLine( x ) );\ntest.Subscribe( x => Console.WriteLine( x ) );\n\n/*\n2015/05/25 17:40:25\n2015/05/25 17:40:26\n2015/05/25 17:40:27\n2015/05/25 17:40:28\n2015/05/25 17:40:29\n*/\n\nWeb\u30da\u30fc\u30b8\u3092\u5b9a\u671f\u7684\u306b\u30af\u30ed\u30fc\u30eb\u3059\u308b\u3088\u3046\u306a\u30a2\u30d7\u30ea\u306e\u5834\u5408\u3001\u8ca0\u8377\u5236\u5fa1\u304c\u5fc5\u9808\u3067\u3059\u3002\n\u305d\u3053\u3067\u3001\u6307\u5b9a\u3057\u305f\u6642\u9593\u3001\u4f11\u61a9\u3092\u5165\u308c\u306a\u304c\u3089\u30b9\u30b1\u30b8\u30e5\u30fc\u30eb\u3055\u308c\u305f\u30a2\u30af\u30b7\u30e7\u30f3\u3092\u5b9f\u884c\u3067\u304d\u308b\u30b9\u30b1\u30b8\u30e5\u30fc\u30e9\u3092\u5b9f\u88c5\u3057\u3066\u307f\u307e\u3057\u305f\u3002\n**\u4e00\u5fdc\u52d5\u304f\u7a0b\u5ea6\u306e\u3082\u306e**\n\n### LocalScheduler\u306e\u5b9f\u88c5\n\nRx\u306e\u57fa\u672c\u7684\u306a\u30b9\u30b1\u30b8\u30e5\u30fc\u30e9\u306f\u3001System.Reactive.Concurrency.LocalScheduler\u30af\u30e9\u30b9\u304b\u3089\u6d3e\u751f\u3057\u3066\u3044\u307e\u3059\u306e\u3067\u3001\nLocalScheduler\u3092\u7d99\u627f\u3057\u305fWaitScheduler\u30af\u30e9\u30b9\u3092\u4f5c\u308a\u307e\u3059\u3002\n\n```csharp\nusing System;\nusing System.Reactive.Concurrency;\nusing System.Reactive.Disposables;\n\nnamespace PITA {\n\tpublic sealed class WaitScheduler : LocalScheduler {\n\t\tprivate readonly object syncLock = new object();\n\t\tprivate readonly TimeSpan wait;\n\t\tprivate DateTimeOffset nextPoint;\n\t\t/// <see cref=\"WaitScheduler\"/>\u30af\u30e9\u30b9\u306e\u65b0\u3057\u3044\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u521d\u671f\u5316\u3057\u307e\u3059\u3002\n\t\t/// </summary>\n\t\t/// <param name=\"wait\">\u51e6\u7406\u9593\u9694</param>\n\t\tpublic WaitScheduler( TimeSpan wait ) {\n\t\t\tthis.wait = wait;\n\t\t\tthis.nextPoint = this.Now;\n\t\t}\n\n\t\tpublic override IDisposable Schedule<TState>( TState state , TimeSpan dueTime , Func<IScheduler , TState , IDisposable> action ) {\n\t\t\tif( action == null )\n\t\t\t\tthrow new ArgumentNullException( nameof( action ) );\n\t\t\treturn Scheduler.Default.Schedule( state , dueTime , action );\n\t\t}\n\n\t\tpublic override IDisposable Schedule<TState>( TState state , Func<IScheduler , TState , IDisposable> action ) {\n\t\t\tif( action == null )\n\t\t\t\tthrow new ArgumentNullException( nameof( action ) );\n\t\t\tif( state is Action ) {\n\t\t\t\tvar n = ( state as Action ).Target as ScheduledDisposable;\n\t\t\t\tif( n != null && n.Scheduler == this )\n\t\t\t\t\treturn Scheduler.Default.Schedule( state , action );\n\t\t\t}\n\n\t\t\tlock ( this.syncLock ) {\n\t\t\t\tvar tmp = this.nextPoint;\n\t\t\t\tthis.nextPoint += this.wait;\n\t\t\t\treturn Scheduler.Default.Schedule( state , tmp , action );\n\t\t\t}\n\t\t}\n\t}\n}\n```\n\nScheduler.Default\u306f\u3001\u65e2\u5b9a\u306e\u30b9\u30b1\u30b8\u30e5\u30fc\u30e9\u3092\u53c2\u7167\u3057\u307e\u3059\u3002\u901a\u5e38\u306f\u3001ThreadPoolScheduler\u3067\u3057\u3087\u3046\u3002\n\u3084\u3063\u3066\u3044\u308b\u3053\u3068\u306f\u3001\u30b9\u30b1\u30b8\u30e5\u30fc\u30eb\u3055\u308c\u305f\u3089\u3001\u5b9f\u884c\u6642\u9593\u3092\u6c7a\u3081\u3066Scheduler.Default\u306b\u6295\u3052\u3066\u3044\u308b\u3060\u3051\u3067\u3059\u3002\n\n**var n = ( state as Action ).Target as ScheduledDisposable;**\n\u3053\u306e\u90e8\u5206\u306e\u5fc5\u8981\u6027\u3067\u3059\u304c\u3001Retry\u3001Repeat\u304c\u8d70\u3063\u305f\u3068\u304d\u3001\u5f85\u6a5f\u6642\u9593\u304c2\u500d\u306b\u306a\u308b\u305f\u3081\u3001\u305d\u306e\u5834\u5408\u306f\u3001\u5b9f\u884c\u6642\u9593\u3092\u6307\u5b9a\u305b\u305a\u306b\n\u30b9\u30b1\u30b8\u30e5\u30fc\u30eb\u3059\u308b\u3088\u3046\u306b\u5236\u5fa1\u3057\u3066\u3044\u307e\u3059\u3002\n\n### \u4f7f\u3044\u65b9\n\nSubscribe\u3055\u308c\u308b\u3068\u3001\u73fe\u5728\u6642\u9593\u3092\u6d41\u3059Observable\u3067\u3059\u3002\nSubscribeOn\u3067\u30b9\u30b1\u30b8\u30e5\u30fc\u30e9\u3092\u6307\u5b9a\u3057\u3066\u304a\u304f\u3068\u3001\u6307\u5b9a\u3057\u305f\u30b9\u30b1\u30b8\u30e5\u30fc\u30e9\u4e0a\u3067Observable\u304c\u5b9f\u884c\u3055\u308c\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002\n\n```csharp\nvar scheduler = new WaitScheduler( TimeSpan.FromSeconds( 1 ) );\n\nvar test = Observable.Create<DateTime>( o => {\n\to.OnNext( DateTime.Now );\n\to.OnCompleted();\n\treturn System.Reactive.Disposables.Disposable.Empty;\n} )\n.SubscribeOn( scheduler );\n\ntest.Subscribe( x => Console.WriteLine( x ) );\ntest.Subscribe( x => Console.WriteLine( x ) );\ntest.Subscribe( x => Console.WriteLine( x ) );\ntest.Subscribe( x => Console.WriteLine( x ) );\ntest.Subscribe( x => Console.WriteLine( x ) );\n\n/*\n2015/05/25 17:40:25\n2015/05/25 17:40:26\n2015/05/25 17:40:27\n2015/05/25 17:40:28\n2015/05/25 17:40:29\n*/\n```\n\n\n", "tags": ["C#", "Rx"]}