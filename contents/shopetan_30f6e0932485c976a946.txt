{"context": " More than 1 year has passed since last update.\u3055\u3066\uff0c\u524d\u56de\u306e\u7406\u8ad6\u7de8\u306e\u7d9a\u304d\u3068\u3044\u3046\u3053\u3068\u3067\uff0c\u4eca\u56de\u306f\u5b9f\u969b\u306b\u30de\u30cf\u30e9\u30ce\u30d3\u30b9\u8ddd\u96e2\u3092python\u3067\u5b9f\u88c5\u3057\u3088\u3046\u3068\u601d\u3044\u307e\u3059\uff0e\n\u524d\u56de\u306e\u7406\u8ad6\u7de8\u306f\u3053\u3061\u3089\u304b\u3089\u3069\u3046\u305e\n\u6559\u5e2b\u306a\u3057\u5b66\u7fd2\u306b\u3088\u308b\u7570\u5e38\u5024\u691c\u77e5: \u30de\u30cf\u30e9\u30ce\u30d3\u30b9\u8ddd\u96e2 (\u7406\u8ad6\u7de8)\n\n\u306f\u3058\u3081\u306b\nPython\u306escikit-learn\u3068\u3044\u3046\u30e9\u30a4\u30d6\u30e9\u30ea\u3067\u306f\uff0c\u30de\u30cf\u30e9\u30ce\u30d3\u30b9\u8ddd\u96e2\u3092\u8a08\u7b97\u3059\u308b\u95a2\u6570\u304c\u5b9f\u88c5\u3055\u308c\u3066\u3044\u307e\u3059\uff0e\nRobust covariance estimation and Mahalanobis distances relevance\n\u305f\u3060\uff0c\u3053\u306e\u30b3\u30fc\u30c9\u3092\u5b9f\u884c\u3057\u307e\u3059! \u3068\u3044\u3046\u8a18\u4e8b\u3092\u66f8\u3044\u3066\u3082\u305f\u3060\u306e\u82f1\u8a33\u306b\u306a\u3063\u3066\u3057\u307e\u3046\u306e\u3067\uff0c\n\u4eca\u56de\u306f\u81ea\u5206\u3067\u5b9f\u88c5\u3057\uff0c\u8a08\u7b97\u904e\u7a0b\u304c\u30d7\u30ed\u30b0\u30e9\u30e0\u4e0a\u3067\u306f\u3069\u3046\u306a\u3063\u3066\u3044\u308b\u306e\u304b\u3092\u898b\u3066\u3044\u304d\u307e\u3059\uff0e\n\u6700\u7d42\u7684\u306b\u5168\u3066\u306e\u30b3\u30fc\u30c9\u3092\u3064\u306a\u304e\u5408\u308f\u305b\u305f\u3089\uff0c\u81ea\u5206\u3067\u8ddd\u96e2\u8a08\u7b97\u304c\u51fa\u6765\u308b\u3068\u3044\u3046\u3068\u3053\u308d\u307e\u3067\u3092\u76ee\u6a19\u306b\u3057\u307e\u3059\uff0e\n\n\u74b0\u5883\n\nMac OSX Mavericks\nPython3\u7cfb\u5217(3.4)\n\n\u307e\u305f\uff0c\u4eca\u56de\u306e\u5b9f\u9a13\u3067\u6271\u3046\u30d5\u30a1\u30a4\u30eb\u306f\u4ee5\u4e0b\u306e\u69d8\u306a\u5f62\u5f0f\u3060\u3068\u3057\u307e\u3059\uff0e\nColumn\u304c\u30de\u30b7\u30f3\u306e\u756a\u53f7\uff0cRow\u306f\u30de\u30b7\u30f3\u306e\u30b9\u30b3\u30a2\u3060\u3068\u3057\u307e\u3059\uff0e\n(\u9006\u3067\u3082\u826f\u3044\u3067\u3057\u3087 \u3068\u3044\u3046\u30a4\u30c1\u30e3\u30e2\u30f3\u304c\u98db\u3093\u3067\u304d\u305d\u3046\u3067\u3059\u304c\u3082\u3061\u308d\u3093\u9006\u3067\u3082\u554f\u984c\u306a\u3044\u3067\u3059\uff0e)\ntest.csv\n\n\n\n\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10\n\n\n\n\na\n0\n6\n7\n2\n3\n3\n1\n0\n0\n1\n\n\nb\n1\n1\n11\n6\n0\n2\n1\n4\n1\n2\n\n\nc\n2\n12\n32\n5\n0\n1\n3\n4\n1\n1\n\n\nd\n3\n3\n7\n3\n2\n2\n2\n1\n2\n5\n\n\ne\n4\n6\n6\n3\n5\n1\n1\n1\n1\n3\n\n\nf\n5\n7\n9\n5\n0\n2\n2\n1\n1\n2\n\n\n\n\u3053\u306e\u5f62\u5f0f\u3060\u3068\uff0c\u30de\u30b7\u30f3\u756a\u53f73\u756a\u76ee\u3060\u3051\uff0c\u3084\u305f\u3089\u3068\u30b9\u30b3\u30a2\u304c\u9ad8\u305d\u3046\u3067\u3059\u306d\uff0e\n\u30de\u30cf\u30e9\u30ce\u30d3\u30b9\u8ddd\u96e2\u3067\u306f\uff0c\u3042\u308b\u3057\u304d\u3044\u5024\u3092\u81ea\u5206\u81ea\u8eab\u3067\u8a2d\u5b9a\u3057\uff0c\u3057\u304d\u3044\u5024\u3092\u8d85\u3048\u305f\u5024\u306e\u3042\u308b\u30ec\u30b3\u30fc\u30c9\u3092\u7570\u5e38\u5024\u3068\u3057\u3066\u3092\u5224\u5b9a\u3059\u308b\u4e8b\u304c\u51fa\u6765\u307e\u3059\uff0e\n\u6ce8\u610f\u3067\u3059\u304c\uff0c\u3057\u304d\u3044\u5024\u306f\u305d\u306e\u90fd\u5ea6\u81ea\u5206\u81ea\u8eab\u3067\u8a2d\u5b9a\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\uff0e\n\u4eca\u56de\u306f\uff0c\u3053\u3061\u3089\u5074\u3067\u3057\u304d\u3044\u5024\u3092\u8a2d\u3051\u305a\u306b\u30b0\u30e9\u30d5\u3068\u3057\u3066\u56f3\u793a\u3059\u308b\u3053\u3068\u3067\u7570\u5e38\u306a\u30c7\u30fc\u30bf\u306e\u53ef\u8996\u5316\u3092\u884c\u3044\u307e\u3059\uff0e\n\n\u5b9f\u88c5\n\nimport\nimport\u3059\u308b\u95a2\u6570\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3059\uff0e\n\nnumpy\nscipy\npandas\nmatplotlib\npylab \n\n\u3053\u308c\u3089\u306e\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u624b\u9806\u306a\u3069\u306f\uff0c\u4eca\u56de\u306f\u5272\u611b\u3057\u307e\u3059\uff0e\n\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u306b\u3064\u3044\u3066\u306f\uff0c\u57fa\u672c\u7684\u306b\u306fpip\u3084easy_install\u306a\u3069\u3092\u7528\u3044\u308b\u306e\u304c\u826f\u3044\u3067\u3059\uff0e\n# -*- coding: utf-8 -*-\nimport numpy as np\nimport scipy as sc\nfrom scipy import linalg\nfrom scipy import spatial\nimport scipy.spatial.distance\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport matplotlib.font_manager\nimport pylab\n\n\n\u5909\u6570\u5b9a\u7fa9\n\u4eca\u56de\u306f\uff0cROW\u304c6\u884c\uff0cCOLUMN\u304c10\u884c\u3042\u308b\u306e\u3067\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u5b9a\u7fa9\u3057\u307e\u3059\uff0e\n\u307e\u305f\uff0c\u5148\u307b\u3069\u306etest.csv\u3092\u8aad\u307f\u8fbc\u3080\u306e\u3067\u3053\u3061\u3089\u3082\u8aad\u307f\u8fbc\u3093\u3067\u304a\u304d\u307e\u3059\uff0e\nROW = 10\nCOLUMN = 6\ncsv = pd.read_csv('test.csv')\n\n\u540c\u6642\u306b\u4eca\u5f8c\u6271\u3046\u5909\u6570\u3082\u5148\u306b\u3053\u3061\u3089\u3067\u5b9a\u7fa9\u3057\u3066\u304a\u304d\u307e\u3059\uff0e\n# row:\u884c,column:\u5217,ave:\u5e73\u5747,vcm:\u5206\u6563\u5171\u5206\u6563\u884c\u5217\nrow = []\ncolumn = []\nave = [0.0 for i in range(ROW)]\nvcm = np.zeros((COLUMN, ROW, ROW))\ndiff = np.zeros((1, ROW))\nmahal = np.zeros(COLUMN)\ntmp = np.zeros(ROW)\n\n\n\u6b20\u640d\u5024\u524a\u9664\n\u4e00\u822c\u7684\u306a\u30c7\u30fc\u30bf\u3067\u306f\uff0c\u3053\u306e\u3088\u3046\u306a test.csv\u306e\u3088\u3046\u306b\u5168\u3066\u306e\u30c7\u30fc\u30bf\u304c\u57cb\u3081\u5c3d\u304f\u3055\u308c\u3066\u3044\u308b\u30b1\u30fc\u30b9\u306f\u3042\u307e\u308a\u591a\u304f\u306a\u3044\u3067\u3059\uff0e\n\u79c1\u306f\uff0c\u3053\u306e\u3088\u3046\u306a\u6642\u306b\u306f\uff0c\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u3057\u3066\u6b20\u640d\u5024\u306e\u524a\u9664\u3092\u3057\u3066\u3057\u307e\u3044\u307e\u3059\uff0e\n# data\u6b20\u640d\u5024\u306e\u524a\u9664\n# axis = 1 \u3067\uff0c\u6b20\u640d\u5024\u306e\u3042\u308b\u5217\u3092\u524a\u9664\ntrans_data = csv.dropna(axis=1)\nprint(trans_data)\n\n\u3053\u308c\u3092print\u3059\u308b\u3068\uff0c\n  Unnamed: 0  1   2   3  4  5  6  7  8  9  10\n0          a  0   6   7  2  3  3  1  0  0   1\n1          b  1   1  11  6  0  2  1  4  1   2\n2          c  2  12  32  5  0  1  3  4  1   1\n3          d  3   3   7  3  2  2  2  1  2   5\n4          e  4   6   6  3  5  1  1  1  1   3\n5          f  5   7   9  5  0  2  2  1  1   2\n\n\u3053\u3093\u306a\u611f\u3058\u3067\u51fa\u529b\u3055\u308c\u307e\u3059\uff0e\n\u307e\u305f\uff0c\u3053\u306e\u3088\u3046\u306b\u3057\u3066\u6574\u5f62\u3057\u305f\u30c7\u30fc\u30bf\u3092list\u5f62\u5f0f\u306b\u3057\u3066\uff0c\u5148\u307b\u3069\u5ba3\u8a00\u3057\u305frow,column\u306b\u683c\u7d0d\u3057\u3066\u3044\u304d\u307e\u3059\uff0e\n# row\u306btrans_data\u306e\u8981\u7d20\u3092\u30ea\u30b9\u30c8\u306e\u5f62\u5f0f\u3067\u9023\u7d50\nfor i in range(ROW):\n    row.append(list(trans_data.ix[i]))\nprint(row)\n\n# \u5217\u3092\u9023\u7d50\nfor i in range(1, COLUMN+1):\n    column.append(list(trans_data.ix[:, i]))\nprint(column)\n\n#row\u306e\u8a08\u7b97\u7d50\u679c\n\n[['a', 0, 6, 7, 2, 3, 3, 1, 0, 0, 1], ['b', 1, 1, 11, 6, 0, 2, 1, 4, 1, 2], ['c', 2, 12, 32, 5, 0, 1, 3, 4, 1, 1], ['d', 3, 3, 7, 3, 2, 2, 2, 1, 2, 5], ['e', 4, 6, 6, 3, 5, 1, 1, 1, 1, 3], ['f', 5, 7, 9, 5, 0, 2, 2, 1, 1, 2]]\n\n#column\u306e\u8a08\u7b97\u7d50\u679c\n[[0, 1, 2, 3, 4, 5], [6, 1, 12, 3, 6, 7], [7, 11, 32, 7, 6, 9], [2, 6, 5, 3, 3, 5], [3, 0, 0, 2, 5, 0], [3, 2, 1, 2, 1, 2], [1, 1, 3, 2, 1, 2], [0, 4, 4, 1, 1, 1], [0, 1, 1, 2, 1, 1], [1, 2, 1, 5, 3, 2]]\n\n\u591a\u6b21\u5143\u914d\u5217\u3068\u3057\u30661\u884c\u305a\u3064\u683c\u7d0d\u3055\u308c\u3066\u3044\u308b\u4e8b\u304c\u308f\u304b\u308a\u307e\u3057\u305f\uff0e\n\n\u5e73\u5747\u5024\u30d9\u30af\u30c8\u30eb\u306e\u8a08\u7b97\n\u5e73\u5747\u5024\u30d9\u30af\u30c8\u30eb\u306f\uff0c\u4ee5\u4e0b\u306e\u6570\u5f0f\u3067\u8868\u305b\u308b\u4e8b\u3092\u8aac\u660e\u3057\u307e\u3057\u305f\uff0e\n{ \n  \u03bc = \\frac{1}{m} \\sum_{i=1}^m x_i\n}\n\u03bc=1mm\u2211i=1xi\u03bc=1m\u2211i=1mxi{{ \n  \u03bc = \\frac{1}{m} \\sum_{i=1}^m x_i\n}\n}\n\u3053\u308c\u3092\u5b9f\u969b\u306bpython\u3067\u8a18\u8ff0\u3059\u308b\u3068\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3059\uff0e\n# \u5e73\u5747\u5024\u306e\u8a08\u7b97\nfor i in range(ROW):\n    # \u30b9\u30e9\u30a4\u30b9\u3068\u3044\u3046\u6280\u6cd5\n    ave[i] = np.average(row[i][1:len(row[i])])\nprint(ave)\n\n  Unnamed: 0  1   2   3  4  5  6  7  8  9  10\n0          a  0   6   7  2  3  3  1  0  0   1\n1          b  1   1  11  6  0  2  1  4  1   2\n2          c  2  12  32  5  0  1  3  4  1   1\n3          d  3   3   7  3  2  2  2  1  2   5\n4          e  4   6   6  3  5  1  1  1  1   3\n5          f  5   7   9  5  0  2  2  1  1   2\n\n[2.2999999999999998, 2.8999999999999999, 6.0999999999999996, 3.0, 3.1000000000000001, 3.3999999999999999]\n\n\u3053\u308c\u306frow\u306b\u5bfe\u3057\u3066a\u884c\u76ee\u306e\u5024\u306e\u5e73\u5747,b\u884c\u76ee\u306e\u5024\u306e\u5e73\u5747\u3068\u3044\u3063\u305f\u3088\u3046\u306b\u6570\u5024\u304c\u8868\u793a\u3055\u308c\u3066\u3044\u307e\u3059\uff0e\n\n\u5206\u6563\u5171\u5206\u6563\u884c\u5217\u306e\u8a08\u7b97\n\u5206\u6563\u5171\u5206\u6563\u884c\u5217\u3082\u5148\u65e5\u306e\u8a18\u4e8b\u3067\u89e6\u308c\u305f\u3088\u3046\u306b\uff0c\n\\sum_{} = \\frac{1}{m}\\sum_{i=1}^m (x_i - \u03bc)(x_i - \u03bc)^{\\mathrm{T}}\n\u2211=1mm\u2211i=1(xi\u2212\u03bc)(xi\u2212\u03bc)T\u2211=1m\u2211i=1m(xi\u2212\u03bc)(xi\u2212\u03bc)T{\\sum_{} = \\frac{1}{m}\\sum_{i=1}^m (x_i - \u03bc)(x_i - \u03bc)^{\\mathrm{T}}\n}\n\u3053\u306e\u3088\u3046\u306a\u5f62\u3067\u8a08\u7b97\u3059\u308b\u4e8b\u304c\u3067\u304d\u307e\u3059\uff0e\n# Numpy\u306e\u30e1\u30bd\u30c3\u30c9\u3092\u4f7f\u3046\u306e\u3067\uff0carray()\u3067\u30ea\u30b9\u30c8\u3092\u5909\u63db\u3057\u305f\uff0e\ncolumn = np.array([column])\nave = np.array(ave)\n\n# \u5206\u6563\u5171\u5206\u6563\u884c\u5217\u3092\u6c42\u3081\u308b\n# np.swapaxes()\u3067\u8ef8\u3092\u5909\u63db\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u308b\uff0e\nfor i in range(COLUMN):\n    diff = (column[0][i] - ave)\n    diff = np.array([diff])\n    vcm[i] = (diff * np.swapaxes(diff, 0, 1)) / COLUMN\n\nprint(vcm)\n\ndiff\u306e\u90e8\u5206\u304c\u5dee\u5206\u3067\u3042\u308a\uff0c\u6570\u5f0f\u7684\u306b\u306f\uff0c\n {(x_i - \u03bc)}\n(xi\u2212\u03bc)(xi\u2212\u03bc){ {(x_i - \u03bc)}\n}\n\u3053\u306e\u90e8\u5206\u3092\u6307\u3057\u3066\u3044\u307e\u3059\uff0e\n\u5404Column\u306b\u5bfe\u3057\u3066\u3053\u306e\u5dee\u5206\u3092\u8a08\u7b97\u3057\uff0c\u5404\u5217\u3054\u3068\u306b\u884c\u5217\u3092\u6c42\u3081\u307e\u3059\uff0e\n  Unnamed: 0  1   2   3  4  5  6  7  8  9  10\n0          a  0   6   7  2  3  3  1  0  0   1\n1          b  1   1  11  6  0  2  1  4  1   2\n2          c  2  12  32  5  0  1  3  4  1   1\n3          d  3   3   7  3  2  2  2  1  2   5\n4          e  4   6   6  3  5  1  1  1  1   3\n5          f  5   7   9  5  0  2  2  1  1   2\n\n#vcm column1\u5217\u76ee\u306e\u884c\u5217\n[[[  5.29000000e-01   4.37000000e-01   9.43000000e-01  -0.00000000e+00\n    -2.07000000e-01  -3.68000000e-01]\n  [  4.37000000e-01   3.61000000e-01   7.79000000e-01  -0.00000000e+00\n    -1.71000000e-01  -3.04000000e-01]\n  [  9.43000000e-01   7.79000000e-01   1.68100000e+00  -0.00000000e+00\n    -3.69000000e-01  -6.56000000e-01]\n  [ -0.00000000e+00  -0.00000000e+00  -0.00000000e+00   0.00000000e+00\n     0.00000000e+00   0.00000000e+00]\n  [ -2.07000000e-01  -1.71000000e-01  -3.69000000e-01   0.00000000e+00\n     8.10000000e-02   1.44000000e-01]\n  [ -3.68000000e-01  -3.04000000e-01  -6.56000000e-01   0.00000000e+00\n     1.44000000e-01   2.56000000e-01]]\n\n#vcm 2\u5217\u76ee\n [[  1.36900000e+00  -7.03000000e-01   2.18300000e+00   0.00000000e+00\n     1.07300000e+00   1.33200000e+00]\n  [ -7.03000000e-01   3.61000000e-01  -1.12100000e+00  -0.00000000e+00\n    -5.51000000e-01  -6.84000000e-01]\n  [  2.18300000e+00  -1.12100000e+00   3.48100000e+00   0.00000000e+00\n     1.71100000e+00   2.12400000e+00]\n  [  0.00000000e+00  -0.00000000e+00   0.00000000e+00   0.00000000e+00\n     0.00000000e+00   0.00000000e+00]\n  [  1.07300000e+00  -5.51000000e-01   1.71100000e+00   0.00000000e+00\n     8.41000000e-01   1.04400000e+00]\n  [  1.33200000e+00  -6.84000000e-01   2.12400000e+00   0.00000000e+00\n     1.04400000e+00   1.29600000e+00]]\n\n\u2026\n\n#vcm 10\u5217\u76ee\n[[  1.69000000e-01   1.17000000e-01   6.63000000e-01  -2.60000000e-01\n     1.30000000e-02   1.82000000e-01]\n  [  1.17000000e-01   8.10000000e-02   4.59000000e-01  -1.80000000e-01\n     9.00000000e-03   1.26000000e-01]\n  [  6.63000000e-01   4.59000000e-01   2.60100000e+00  -1.02000000e+00\n     5.10000000e-02   7.14000000e-01]\n  [ -2.60000000e-01  -1.80000000e-01  -1.02000000e+00   4.00000000e-01\n    -2.00000000e-02  -2.80000000e-01]\n  [  1.30000000e-02   9.00000000e-03   5.10000000e-02  -2.00000000e-02\n     1.00000000e-03   1.40000000e-02]\n  [  1.82000000e-01   1.26000000e-01   7.14000000e-01  -2.80000000e-01\n     1.40000000e-02   1.96000000e-01]]]\n\n\n\u30de\u30cf\u30e9\u30ce\u30d3\u30b9\u8ddd\u96e2\u3092\u6c42\u3081\u308b\n\u30de\u30cf\u30e9\u30ce\u30d3\u30b9\u8ddd\u96e2\u306f\u4ee5\u4e0b\u306e\u6570\u5f0f\u3067\u8a08\u7b97\u304c\u3067\u304d\u307e\u3059\uff0e\n  \u03b8 < \\sqrt{(x_i - \u03bc) ^{\\mathrm{T}}\\sum{}^{-1} (x_i - \u03bc) }\n\u03b8<\u221a(xi\u2212\u03bc)T\u2211\u22121(xi\u2212\u03bc)\u03b8<(xi\u2212\u03bc)T\u2211\u22121(xi\u2212\u03bc)\u2212\u2212\u2212\u2212\u2212\u2212\u2212\u2212\u2212\u2212\u2212\u2212\u2212\u2212\u2212\u2212\u2212\u2212\u2212\u221a{  \u03b8 < \\sqrt{(x_i - \u03bc) ^{\\mathrm{T}}\\sum{}^{-1} (x_i - \u03bc) }\n}\n# mahalnobis distance\u3092\u6c42\u3081\u308b\nfor i in range(COLUMN):\n    # \u4e00\u822c\u9006\u884c\u5217\u3092\u751f\u6210\u3057\uff0c\u8a08\u7b97\u306e\u90fd\u5408\u4e0a\u8ee2\u5024\u3092\u304b\u3051\u308b\n    vcm[i] = sc.linalg.pinv(vcm[i])\n    vcm[i] = vcm[i].transpose()\n    vcm[i] = np.identity(ROW)\n    # \u5dee\u5206\u30d9\u30af\u30c8\u30eb\u306e\u751f\u6210\n    diff = (column[0][i] - ave)\n    for j in range(ROW):\n        tmp[j] = np.dot(diff, vcm[i][j])\n    mahal[i] = np.dot(tmp, diff)\n\n#\u30de\u30cf\u30e9\u30ce\u30d3\u30b9\u8ddd\u96e2\n[  5.39258751   8.5720476   28.53559181   3.67151195   7.89176786\n   5.88897275   4.72016949   5.00799361   6.7882251    5.8719673 ]\n\n\u3053\u308c\u3067\uff0c\u5404\u5217\u306e\u30ec\u30b3\u30fc\u30c9\u306b\u5bfe\u3057\u3066\uff0c\u8ddd\u96e2\u8a08\u7b97\u3092\u3059\u308b\u3053\u3068\u304c\u51fa\u6765\u307e\u3057\u305f!\n\n\u5b9f\u969b\u306b\u30d7\u30ed\u30c3\u30c8\u3057\u3066\u307f\u308b\n\u3053\u306e\u3088\u3046\u306b\u3057\u3066\u6c42\u3081\u305f\u30de\u30cf\u30e9\u30ce\u30d3\u30b9\u8ddd\u96e2\u3092\u30b0\u30e9\u30d5\u306b\u30d7\u30ed\u30c3\u30c8\u3057\u3066\u307f\u307e\u3059\uff0e\nplot = pylab.arange(0.0, ROW, 1.0)\nmahal = np.sqrt(mahal)\n\nprint(\"\u30de\u30cf\u30e9\u30ce\u30d3\u30b9\u8ddd\u96e2\")\nprint(mahal)\nplt.bar(range(COLUMN),mahal)\nplt.title(\"\")\nplt.xlabel(\"x\")\nplt.ylabel(\"y\")\nplt.savefig(\"plot1.png\")\n\n\n\n  Unnamed: 0  1   2   3  4  5  6  7  8  9  10\n0          a  0   6   7  2  3  3  1  0  0   1\n1          b  1   1  11  6  0  2  1  4  1   2\n2          c  2  12  32  5  0  1  3  4  1   1\n3          d  3   3   7  3  2  2  2  1  2   5\n4          e  4   6   6  3  5  1  1  1  1   3\n5          f  5   7   9  5  0  2  2  1  1   2\n\n#\u30de\u30cf\u30e9\u30ce\u30d3\u30b9\u8ddd\u96e2\n[  5.39258751   8.5720476   28.53559181   3.67151195   7.89176786\n   5.88897275   4.72016949   5.00799361   6.7882251    5.8719673 ]\n\n\u30d7\u30ed\u30c3\u30c8\u3092\u3057\u3066\u307f\u308b\u3068\uff0c\u4ed6\u306e\u8981\u7d20\u306b\u6bd4\u3079\u30663\u5217\u76ee\u306e\u30ec\u30b3\u30fc\u30c9\u306e\u8ddd\u96e2\u304c\u5927\u304d\u304f\u96e2\u308c\u3066\u3044\u308b\u3053\u3068\u304c\u5206\u304b\u308a\u307e\u3057\u305f\uff0e\n\u3053\u308c\u3067\u8996\u899a\u7684\u306b\u30c7\u30fc\u30bf\u304c\u7570\u5e38\u5024\u3068\u306a\u3063\u3066\u3044\u308b\u3053\u3068\u304c\u5206\u304b\u308a\u307e\u3057\u305f\u306d\uff0e\n\n\u304a\u308f\u308a\u306b\n\u3044\u304b\u304c\u3067\u3057\u305f\u3067\u3057\u3087\u3046\u304b\uff0e\n\u4eca\u56de\u306f\uff0c\u7406\u8ad6\u7de8\u3092\u8e0f\u307e\u3048\u3066\uff0c\u5b9f\u969b\u306bpython\u3092\u7528\u3044\u3066\u30de\u30cf\u30e9\u30ce\u30d3\u30b9\u8ddd\u96e2\u3092\u8a08\u7b97\u3057\u3066\u307f\u307e\u3057\u305f\uff0e\n\u4eca\u56de\u7528\u3044\u305f\u30d7\u30ed\u30b0\u30e9\u30e0\u3092GitHub\u306egist\u306b\u516c\u958b\u3057\u307e\u3057\u305f\uff0e\n\u30d5\u30eb\u30b9\u30af\u30e9\u30c3\u30c1\u3067\u5b9f\u88c5\u3057\u305f\u305f\u3081\uff0c\u30b3\u30fc\u30c9\u306b\u4e0d\u5099\u304c\u3042\u308b\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u306e\u3067\uff0c\u7cbe\u5bc6\u306a\u8a08\u7b97\u3092\u8981\u3059\u308b\u5834\u5408\u306a\u3069\u306f\uff0cRobust covariance estimation and Mahalanobis distances relevance\n\u3053\u306e\u6587\u732e\u3092\u53c2\u8003\u306b\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u7528\u3044\u308b\u4e8b\u3092\u5f37\u304f\u30aa\u30b9\u30b9\u30e1\u3057\u307e\u3059\uff0e\n\u4e0d\u5099\u3084\u9593\u9055\u3044\u7b49\u304c\u3042\u308a\u307e\u3057\u305f\u3089\u3054\u9023\u7d61\u3057\u3066\u304f\u3060\u3055\u308b\u3068\u5e78\u3044\u3067\u3059\uff0e\n\n\u3055\u3066\uff0c\u524d\u56de\u306e\u7406\u8ad6\u7de8\u306e\u7d9a\u304d\u3068\u3044\u3046\u3053\u3068\u3067\uff0c\u4eca\u56de\u306f\u5b9f\u969b\u306b\u30de\u30cf\u30e9\u30ce\u30d3\u30b9\u8ddd\u96e2\u3092python\u3067\u5b9f\u88c5\u3057\u3088\u3046\u3068\u601d\u3044\u307e\u3059\uff0e\n\u524d\u56de\u306e\u7406\u8ad6\u7de8\u306f\u3053\u3061\u3089\u304b\u3089\u3069\u3046\u305e\n[\u6559\u5e2b\u306a\u3057\u5b66\u7fd2\u306b\u3088\u308b\u7570\u5e38\u5024\u691c\u77e5: \u30de\u30cf\u30e9\u30ce\u30d3\u30b9\u8ddd\u96e2 (\u7406\u8ad6\u7de8)](http://qiita.com/shopetan/items/ceb7744facc21c3881d2)\n\n# \u306f\u3058\u3081\u306b\nPython\u306escikit-learn\u3068\u3044\u3046\u30e9\u30a4\u30d6\u30e9\u30ea\u3067\u306f\uff0c\u30de\u30cf\u30e9\u30ce\u30d3\u30b9\u8ddd\u96e2\u3092\u8a08\u7b97\u3059\u308b\u95a2\u6570\u304c\u5b9f\u88c5\u3055\u308c\u3066\u3044\u307e\u3059\uff0e\n[Robust covariance estimation and Mahalanobis distances relevance](http://scikit-learn.org/stable/auto_examples/covariance/plot_mahalanobis_distances.html)\n\n\u305f\u3060\uff0c\u3053\u306e\u30b3\u30fc\u30c9\u3092\u5b9f\u884c\u3057\u307e\u3059! \u3068\u3044\u3046\u8a18\u4e8b\u3092\u66f8\u3044\u3066\u3082\u305f\u3060\u306e\u82f1\u8a33\u306b\u306a\u3063\u3066\u3057\u307e\u3046\u306e\u3067\uff0c\n\u4eca\u56de\u306f\u81ea\u5206\u3067\u5b9f\u88c5\u3057\uff0c\u8a08\u7b97\u904e\u7a0b\u304c\u30d7\u30ed\u30b0\u30e9\u30e0\u4e0a\u3067\u306f\u3069\u3046\u306a\u3063\u3066\u3044\u308b\u306e\u304b\u3092\u898b\u3066\u3044\u304d\u307e\u3059\uff0e\n\n\u6700\u7d42\u7684\u306b\u5168\u3066\u306e\u30b3\u30fc\u30c9\u3092\u3064\u306a\u304e\u5408\u308f\u305b\u305f\u3089\uff0c\u81ea\u5206\u3067\u8ddd\u96e2\u8a08\u7b97\u304c\u51fa\u6765\u308b\u3068\u3044\u3046\u3068\u3053\u308d\u307e\u3067\u3092\u76ee\u6a19\u306b\u3057\u307e\u3059\uff0e\n\n# \u74b0\u5883\n* Mac OSX Mavericks\n* Python3\u7cfb\u5217(3.4)\n\n\u307e\u305f\uff0c\u4eca\u56de\u306e\u5b9f\u9a13\u3067\u6271\u3046\u30d5\u30a1\u30a4\u30eb\u306f\u4ee5\u4e0b\u306e\u69d8\u306a\u5f62\u5f0f\u3060\u3068\u3057\u307e\u3059\uff0e\nColumn\u304c\u30de\u30b7\u30f3\u306e\u756a\u53f7\uff0cRow\u306f\u30de\u30b7\u30f3\u306e\u30b9\u30b3\u30a2\u3060\u3068\u3057\u307e\u3059\uff0e\n(\u9006\u3067\u3082\u826f\u3044\u3067\u3057\u3087 \u3068\u3044\u3046\u30a4\u30c1\u30e3\u30e2\u30f3\u304c\u98db\u3093\u3067\u304d\u305d\u3046\u3067\u3059\u304c\u3082\u3061\u308d\u3093\u9006\u3067\u3082\u554f\u984c\u306a\u3044\u3067\u3059\uff0e)\n\n`test.csv`\n\n|| 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 |\n|:--|:--:|:--:|:--:|:--:|:--:|:--:|:--:|:--:|:--:|:--:|\n|a|0|6|7|2|3|3|1|0|0|1|\n|b|1|1|11|6|0|2|1|4|1|2|\n|c|2|12|32|5|0|1|3|4|1|1|\n|d|3|3|7|3|2|2|2|1|2|5|\n|e|4|6|6|3|5|1|1|1|1|3|\n|f|5|7|9|5|0|2|2|1|1|2|\n\n\u3053\u306e\u5f62\u5f0f\u3060\u3068\uff0c\u30de\u30b7\u30f3\u756a\u53f73\u756a\u76ee\u3060\u3051\uff0c\u3084\u305f\u3089\u3068\u30b9\u30b3\u30a2\u304c\u9ad8\u305d\u3046\u3067\u3059\u306d\uff0e\n\n\u30de\u30cf\u30e9\u30ce\u30d3\u30b9\u8ddd\u96e2\u3067\u306f\uff0c\u3042\u308b\u3057\u304d\u3044\u5024\u3092\u81ea\u5206\u81ea\u8eab\u3067\u8a2d\u5b9a\u3057\uff0c\u3057\u304d\u3044\u5024\u3092\u8d85\u3048\u305f\u5024\u306e\u3042\u308b\u30ec\u30b3\u30fc\u30c9\u3092\u7570\u5e38\u5024\u3068\u3057\u3066\u3092\u5224\u5b9a\u3059\u308b\u4e8b\u304c\u51fa\u6765\u307e\u3059\uff0e\n\u6ce8\u610f\u3067\u3059\u304c\uff0c<b>\u3057\u304d\u3044\u5024\u306f\u305d\u306e\u90fd\u5ea6\u81ea\u5206\u81ea\u8eab\u3067\u8a2d\u5b9a\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\uff0e</b>\n\u4eca\u56de\u306f\uff0c\u3053\u3061\u3089\u5074\u3067\u3057\u304d\u3044\u5024\u3092\u8a2d\u3051\u305a\u306b\u30b0\u30e9\u30d5\u3068\u3057\u3066\u56f3\u793a\u3059\u308b\u3053\u3068\u3067\u7570\u5e38\u306a<b>\u30c7\u30fc\u30bf\u306e\u53ef\u8996\u5316</b>\u3092\u884c\u3044\u307e\u3059\uff0e\n\n# \u5b9f\u88c5\n\n## import\nimport\u3059\u308b\u95a2\u6570\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3059\uff0e\n\n* numpy\n* scipy\n* pandas\n* matplotlib\n* pylab \n\n\u3053\u308c\u3089\u306e\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u624b\u9806\u306a\u3069\u306f\uff0c\u4eca\u56de\u306f\u5272\u611b\u3057\u307e\u3059\uff0e\n\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u306b\u3064\u3044\u3066\u306f\uff0c\u57fa\u672c\u7684\u306b\u306fpip\u3084easy_install\u306a\u3069\u3092\u7528\u3044\u308b\u306e\u304c\u826f\u3044\u3067\u3059\uff0e\n\n```py3\n# -*- coding: utf-8 -*-\nimport numpy as np\nimport scipy as sc\nfrom scipy import linalg\nfrom scipy import spatial\nimport scipy.spatial.distance\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport matplotlib.font_manager\nimport pylab\n```\n\n## \u5909\u6570\u5b9a\u7fa9\n\n\u4eca\u56de\u306f\uff0cROW\u304c6\u884c\uff0cCOLUMN\u304c10\u884c\u3042\u308b\u306e\u3067\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u5b9a\u7fa9\u3057\u307e\u3059\uff0e\n\u307e\u305f\uff0c\u5148\u307b\u3069\u306etest.csv\u3092\u8aad\u307f\u8fbc\u3080\u306e\u3067\u3053\u3061\u3089\u3082\u8aad\u307f\u8fbc\u3093\u3067\u304a\u304d\u307e\u3059\uff0e\n\n```py3\nROW = 10\nCOLUMN = 6\ncsv = pd.read_csv('test.csv')\n```\n\n\u540c\u6642\u306b\u4eca\u5f8c\u6271\u3046\u5909\u6570\u3082\u5148\u306b\u3053\u3061\u3089\u3067\u5b9a\u7fa9\u3057\u3066\u304a\u304d\u307e\u3059\uff0e\n\n```py3\n# row:\u884c,column:\u5217,ave:\u5e73\u5747,vcm:\u5206\u6563\u5171\u5206\u6563\u884c\u5217\nrow = []\ncolumn = []\nave = [0.0 for i in range(ROW)]\nvcm = np.zeros((COLUMN, ROW, ROW))\ndiff = np.zeros((1, ROW))\nmahal = np.zeros(COLUMN)\ntmp = np.zeros(ROW)\n```\n\n## \u6b20\u640d\u5024\u524a\u9664\n\u4e00\u822c\u7684\u306a\u30c7\u30fc\u30bf\u3067\u306f\uff0c\u3053\u306e\u3088\u3046\u306a `test.csv`\u306e\u3088\u3046\u306b\u5168\u3066\u306e\u30c7\u30fc\u30bf\u304c\u57cb\u3081\u5c3d\u304f\u3055\u308c\u3066\u3044\u308b\u30b1\u30fc\u30b9\u306f\u3042\u307e\u308a\u591a\u304f\u306a\u3044\u3067\u3059\uff0e\n\u79c1\u306f\uff0c\u3053\u306e\u3088\u3046\u306a\u6642\u306b\u306f\uff0c\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u3057\u3066\u6b20\u640d\u5024\u306e\u524a\u9664\u3092\u3057\u3066\u3057\u307e\u3044\u307e\u3059\uff0e\n\n```py3\n# data\u6b20\u640d\u5024\u306e\u524a\u9664\n# axis = 1 \u3067\uff0c\u6b20\u640d\u5024\u306e\u3042\u308b\u5217\u3092\u524a\u9664\ntrans_data = csv.dropna(axis=1)\nprint(trans_data)\n```\n\n\u3053\u308c\u3092print\u3059\u308b\u3068\uff0c\n\n```\n  Unnamed: 0  1   2   3  4  5  6  7  8  9  10\n0          a  0   6   7  2  3  3  1  0  0   1\n1          b  1   1  11  6  0  2  1  4  1   2\n2          c  2  12  32  5  0  1  3  4  1   1\n3          d  3   3   7  3  2  2  2  1  2   5\n4          e  4   6   6  3  5  1  1  1  1   3\n5          f  5   7   9  5  0  2  2  1  1   2\n```\n\u3053\u3093\u306a\u611f\u3058\u3067\u51fa\u529b\u3055\u308c\u307e\u3059\uff0e\n\n\u307e\u305f\uff0c\u3053\u306e\u3088\u3046\u306b\u3057\u3066\u6574\u5f62\u3057\u305f\u30c7\u30fc\u30bf\u3092list\u5f62\u5f0f\u306b\u3057\u3066\uff0c\u5148\u307b\u3069\u5ba3\u8a00\u3057\u305frow,column\u306b\u683c\u7d0d\u3057\u3066\u3044\u304d\u307e\u3059\uff0e\n\n```py3\n# row\u306btrans_data\u306e\u8981\u7d20\u3092\u30ea\u30b9\u30c8\u306e\u5f62\u5f0f\u3067\u9023\u7d50\nfor i in range(ROW):\n    row.append(list(trans_data.ix[i]))\nprint(row)\n\n# \u5217\u3092\u9023\u7d50\nfor i in range(1, COLUMN+1):\n    column.append(list(trans_data.ix[:, i]))\nprint(column)\n```\n\n```\n#row\u306e\u8a08\u7b97\u7d50\u679c\n\n[['a', 0, 6, 7, 2, 3, 3, 1, 0, 0, 1], ['b', 1, 1, 11, 6, 0, 2, 1, 4, 1, 2], ['c', 2, 12, 32, 5, 0, 1, 3, 4, 1, 1], ['d', 3, 3, 7, 3, 2, 2, 2, 1, 2, 5], ['e', 4, 6, 6, 3, 5, 1, 1, 1, 1, 3], ['f', 5, 7, 9, 5, 0, 2, 2, 1, 1, 2]]\n\n#column\u306e\u8a08\u7b97\u7d50\u679c\n[[0, 1, 2, 3, 4, 5], [6, 1, 12, 3, 6, 7], [7, 11, 32, 7, 6, 9], [2, 6, 5, 3, 3, 5], [3, 0, 0, 2, 5, 0], [3, 2, 1, 2, 1, 2], [1, 1, 3, 2, 1, 2], [0, 4, 4, 1, 1, 1], [0, 1, 1, 2, 1, 1], [1, 2, 1, 5, 3, 2]]\n```\n\n\n\u591a\u6b21\u5143\u914d\u5217\u3068\u3057\u30661\u884c\u305a\u3064\u683c\u7d0d\u3055\u308c\u3066\u3044\u308b\u4e8b\u304c\u308f\u304b\u308a\u307e\u3057\u305f\uff0e\n\n## \u5e73\u5747\u5024\u30d9\u30af\u30c8\u30eb\u306e\u8a08\u7b97\n\u5e73\u5747\u5024\u30d9\u30af\u30c8\u30eb\u306f\uff0c\u4ee5\u4e0b\u306e\u6570\u5f0f\u3067\u8868\u305b\u308b\u4e8b\u3092\u8aac\u660e\u3057\u307e\u3057\u305f\uff0e\n\n```math\n{ \n  \u03bc = \\frac{1}{m} \\sum_{i=1}^m x_i\n}\n```\n\n\u3053\u308c\u3092\u5b9f\u969b\u306bpython\u3067\u8a18\u8ff0\u3059\u308b\u3068\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3059\uff0e\n\n```py3\n# \u5e73\u5747\u5024\u306e\u8a08\u7b97\nfor i in range(ROW):\n    # \u30b9\u30e9\u30a4\u30b9\u3068\u3044\u3046\u6280\u6cd5\n    ave[i] = np.average(row[i][1:len(row[i])])\nprint(ave)\n```\n\n```\n  Unnamed: 0  1   2   3  4  5  6  7  8  9  10\n0          a  0   6   7  2  3  3  1  0  0   1\n1          b  1   1  11  6  0  2  1  4  1   2\n2          c  2  12  32  5  0  1  3  4  1   1\n3          d  3   3   7  3  2  2  2  1  2   5\n4          e  4   6   6  3  5  1  1  1  1   3\n5          f  5   7   9  5  0  2  2  1  1   2\n```\n\n```\n[2.2999999999999998, 2.8999999999999999, 6.0999999999999996, 3.0, 3.1000000000000001, 3.3999999999999999]\n```\n\u3053\u308c\u306frow\u306b\u5bfe\u3057\u3066a\u884c\u76ee\u306e\u5024\u306e\u5e73\u5747,b\u884c\u76ee\u306e\u5024\u306e\u5e73\u5747\u3068\u3044\u3063\u305f\u3088\u3046\u306b\u6570\u5024\u304c\u8868\u793a\u3055\u308c\u3066\u3044\u307e\u3059\uff0e\n\n## \u5206\u6563\u5171\u5206\u6563\u884c\u5217\u306e\u8a08\u7b97\n\u5206\u6563\u5171\u5206\u6563\u884c\u5217\u3082\u5148\u65e5\u306e\u8a18\u4e8b\u3067\u89e6\u308c\u305f\u3088\u3046\u306b\uff0c\n\n```math\n\\sum_{} = \\frac{1}{m}\\sum_{i=1}^m (x_i - \u03bc)(x_i - \u03bc)^{\\mathrm{T}}\n```\n\u3053\u306e\u3088\u3046\u306a\u5f62\u3067\u8a08\u7b97\u3059\u308b\u4e8b\u304c\u3067\u304d\u307e\u3059\uff0e\n\n```py3\n# Numpy\u306e\u30e1\u30bd\u30c3\u30c9\u3092\u4f7f\u3046\u306e\u3067\uff0carray()\u3067\u30ea\u30b9\u30c8\u3092\u5909\u63db\u3057\u305f\uff0e\ncolumn = np.array([column])\nave = np.array(ave)\n\n# \u5206\u6563\u5171\u5206\u6563\u884c\u5217\u3092\u6c42\u3081\u308b\n# np.swapaxes()\u3067\u8ef8\u3092\u5909\u63db\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u308b\uff0e\nfor i in range(COLUMN):\n    diff = (column[0][i] - ave)\n    diff = np.array([diff])\n    vcm[i] = (diff * np.swapaxes(diff, 0, 1)) / COLUMN\n\nprint(vcm)\n```\n\ndiff\u306e\u90e8\u5206\u304c\u5dee\u5206\u3067\u3042\u308a\uff0c\u6570\u5f0f\u7684\u306b\u306f\uff0c\n\n```math\n {(x_i - \u03bc)}\n```\n\u3053\u306e\u90e8\u5206\u3092\u6307\u3057\u3066\u3044\u307e\u3059\uff0e\n\u5404Column\u306b\u5bfe\u3057\u3066\u3053\u306e\u5dee\u5206\u3092\u8a08\u7b97\u3057\uff0c\u5404\u5217\u3054\u3068\u306b\u884c\u5217\u3092\u6c42\u3081\u307e\u3059\uff0e\n\n```\n  Unnamed: 0  1   2   3  4  5  6  7  8  9  10\n0          a  0   6   7  2  3  3  1  0  0   1\n1          b  1   1  11  6  0  2  1  4  1   2\n2          c  2  12  32  5  0  1  3  4  1   1\n3          d  3   3   7  3  2  2  2  1  2   5\n4          e  4   6   6  3  5  1  1  1  1   3\n5          f  5   7   9  5  0  2  2  1  1   2\n```\n\n```\n#vcm column1\u5217\u76ee\u306e\u884c\u5217\n[[[  5.29000000e-01   4.37000000e-01   9.43000000e-01  -0.00000000e+00\n    -2.07000000e-01  -3.68000000e-01]\n  [  4.37000000e-01   3.61000000e-01   7.79000000e-01  -0.00000000e+00\n    -1.71000000e-01  -3.04000000e-01]\n  [  9.43000000e-01   7.79000000e-01   1.68100000e+00  -0.00000000e+00\n    -3.69000000e-01  -6.56000000e-01]\n  [ -0.00000000e+00  -0.00000000e+00  -0.00000000e+00   0.00000000e+00\n     0.00000000e+00   0.00000000e+00]\n  [ -2.07000000e-01  -1.71000000e-01  -3.69000000e-01   0.00000000e+00\n     8.10000000e-02   1.44000000e-01]\n  [ -3.68000000e-01  -3.04000000e-01  -6.56000000e-01   0.00000000e+00\n     1.44000000e-01   2.56000000e-01]]\n\n#vcm 2\u5217\u76ee\n [[  1.36900000e+00  -7.03000000e-01   2.18300000e+00   0.00000000e+00\n     1.07300000e+00   1.33200000e+00]\n  [ -7.03000000e-01   3.61000000e-01  -1.12100000e+00  -0.00000000e+00\n    -5.51000000e-01  -6.84000000e-01]\n  [  2.18300000e+00  -1.12100000e+00   3.48100000e+00   0.00000000e+00\n     1.71100000e+00   2.12400000e+00]\n  [  0.00000000e+00  -0.00000000e+00   0.00000000e+00   0.00000000e+00\n     0.00000000e+00   0.00000000e+00]\n  [  1.07300000e+00  -5.51000000e-01   1.71100000e+00   0.00000000e+00\n     8.41000000e-01   1.04400000e+00]\n  [  1.33200000e+00  -6.84000000e-01   2.12400000e+00   0.00000000e+00\n     1.04400000e+00   1.29600000e+00]]\n\n\u2026\n\n#vcm 10\u5217\u76ee\n[[  1.69000000e-01   1.17000000e-01   6.63000000e-01  -2.60000000e-01\n     1.30000000e-02   1.82000000e-01]\n  [  1.17000000e-01   8.10000000e-02   4.59000000e-01  -1.80000000e-01\n     9.00000000e-03   1.26000000e-01]\n  [  6.63000000e-01   4.59000000e-01   2.60100000e+00  -1.02000000e+00\n     5.10000000e-02   7.14000000e-01]\n  [ -2.60000000e-01  -1.80000000e-01  -1.02000000e+00   4.00000000e-01\n    -2.00000000e-02  -2.80000000e-01]\n  [  1.30000000e-02   9.00000000e-03   5.10000000e-02  -2.00000000e-02\n     1.00000000e-03   1.40000000e-02]\n  [  1.82000000e-01   1.26000000e-01   7.14000000e-01  -2.80000000e-01\n     1.40000000e-02   1.96000000e-01]]]\n```\n\n## \u30de\u30cf\u30e9\u30ce\u30d3\u30b9\u8ddd\u96e2\u3092\u6c42\u3081\u308b\n\n\u30de\u30cf\u30e9\u30ce\u30d3\u30b9\u8ddd\u96e2\u306f\u4ee5\u4e0b\u306e\u6570\u5f0f\u3067\u8a08\u7b97\u304c\u3067\u304d\u307e\u3059\uff0e\n\n```math\n  \u03b8 < \\sqrt{(x_i - \u03bc) ^{\\mathrm{T}}\\sum{}^{-1} (x_i - \u03bc) }\n```\n\n```py3\n# mahalnobis distance\u3092\u6c42\u3081\u308b\nfor i in range(COLUMN):\n    # \u4e00\u822c\u9006\u884c\u5217\u3092\u751f\u6210\u3057\uff0c\u8a08\u7b97\u306e\u90fd\u5408\u4e0a\u8ee2\u5024\u3092\u304b\u3051\u308b\n    vcm[i] = sc.linalg.pinv(vcm[i])\n    vcm[i] = vcm[i].transpose()\n    vcm[i] = np.identity(ROW)\n    # \u5dee\u5206\u30d9\u30af\u30c8\u30eb\u306e\u751f\u6210\n    diff = (column[0][i] - ave)\n    for j in range(ROW):\n        tmp[j] = np.dot(diff, vcm[i][j])\n    mahal[i] = np.dot(tmp, diff)\n```\n\n```\n#\u30de\u30cf\u30e9\u30ce\u30d3\u30b9\u8ddd\u96e2\n[  5.39258751   8.5720476   28.53559181   3.67151195   7.89176786\n   5.88897275   4.72016949   5.00799361   6.7882251    5.8719673 ]\n```\n\u3053\u308c\u3067\uff0c\u5404\u5217\u306e\u30ec\u30b3\u30fc\u30c9\u306b\u5bfe\u3057\u3066\uff0c\u8ddd\u96e2\u8a08\u7b97\u3092\u3059\u308b\u3053\u3068\u304c\u51fa\u6765\u307e\u3057\u305f!\n\n\n## \u5b9f\u969b\u306b\u30d7\u30ed\u30c3\u30c8\u3057\u3066\u307f\u308b\n\n\u3053\u306e\u3088\u3046\u306b\u3057\u3066\u6c42\u3081\u305f\u30de\u30cf\u30e9\u30ce\u30d3\u30b9\u8ddd\u96e2\u3092\u30b0\u30e9\u30d5\u306b\u30d7\u30ed\u30c3\u30c8\u3057\u3066\u307f\u307e\u3059\uff0e\n\n```py3\nplot = pylab.arange(0.0, ROW, 1.0)\nmahal = np.sqrt(mahal)\n\nprint(\"\u30de\u30cf\u30e9\u30ce\u30d3\u30b9\u8ddd\u96e2\")\nprint(mahal)\nplt.bar(range(COLUMN),mahal)\nplt.title(\"\")\nplt.xlabel(\"x\")\nplt.ylabel(\"y\")\nplt.savefig(\"plot1.png\")\n\n```\n\n![plot1.png](https://qiita-image-store.s3.amazonaws.com/0/55673/e609eeb6-76a7-c738-a929-382b500edf59.png)\n\n```\n  Unnamed: 0  1   2   3  4  5  6  7  8  9  10\n0          a  0   6   7  2  3  3  1  0  0   1\n1          b  1   1  11  6  0  2  1  4  1   2\n2          c  2  12  32  5  0  1  3  4  1   1\n3          d  3   3   7  3  2  2  2  1  2   5\n4          e  4   6   6  3  5  1  1  1  1   3\n5          f  5   7   9  5  0  2  2  1  1   2\n```\n\n```\n#\u30de\u30cf\u30e9\u30ce\u30d3\u30b9\u8ddd\u96e2\n[  5.39258751   8.5720476   28.53559181   3.67151195   7.89176786\n   5.88897275   4.72016949   5.00799361   6.7882251    5.8719673 ]\n```\n\n\u30d7\u30ed\u30c3\u30c8\u3092\u3057\u3066\u307f\u308b\u3068\uff0c\u4ed6\u306e\u8981\u7d20\u306b\u6bd4\u3079\u30663\u5217\u76ee\u306e\u30ec\u30b3\u30fc\u30c9\u306e\u8ddd\u96e2\u304c\u5927\u304d\u304f\u96e2\u308c\u3066\u3044\u308b\u3053\u3068\u304c\u5206\u304b\u308a\u307e\u3057\u305f\uff0e\n\u3053\u308c\u3067\u8996\u899a\u7684\u306b\u30c7\u30fc\u30bf\u304c\u7570\u5e38\u5024\u3068\u306a\u3063\u3066\u3044\u308b\u3053\u3068\u304c\u5206\u304b\u308a\u307e\u3057\u305f\u306d\uff0e\n\n\n# \u304a\u308f\u308a\u306b\n\u3044\u304b\u304c\u3067\u3057\u305f\u3067\u3057\u3087\u3046\u304b\uff0e\n\u4eca\u56de\u306f\uff0c[\u7406\u8ad6\u7de8](http://qiita.com/shopetan/items/ceb7744facc21c3881d2)\u3092\u8e0f\u307e\u3048\u3066\uff0c\u5b9f\u969b\u306bpython\u3092\u7528\u3044\u3066\u30de\u30cf\u30e9\u30ce\u30d3\u30b9\u8ddd\u96e2\u3092\u8a08\u7b97\u3057\u3066\u307f\u307e\u3057\u305f\uff0e\n\u4eca\u56de\u7528\u3044\u305f\u30d7\u30ed\u30b0\u30e9\u30e0\u3092[GitHub\u306egist](https://gist.github.com/shopetan/59b9da2e0321bb6a74fb)\u306b\u516c\u958b\u3057\u307e\u3057\u305f\uff0e\n\n\u30d5\u30eb\u30b9\u30af\u30e9\u30c3\u30c1\u3067\u5b9f\u88c5\u3057\u305f\u305f\u3081\uff0c\u30b3\u30fc\u30c9\u306b\u4e0d\u5099\u304c\u3042\u308b\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u306e\u3067\uff0c\u7cbe\u5bc6\u306a\u8a08\u7b97\u3092\u8981\u3059\u308b\u5834\u5408\u306a\u3069\u306f\uff0c[Robust covariance estimation and Mahalanobis distances relevance](http://scikit-learn.org/stable/auto_examples/covariance/plot_mahalanobis_distances.html)\n\u3053\u306e\u6587\u732e\u3092\u53c2\u8003\u306b\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u7528\u3044\u308b\u4e8b\u3092\u5f37\u304f\u30aa\u30b9\u30b9\u30e1\u3057\u307e\u3059\uff0e\n\n\u4e0d\u5099\u3084\u9593\u9055\u3044\u7b49\u304c\u3042\u308a\u307e\u3057\u305f\u3089\u3054\u9023\u7d61\u3057\u3066\u304f\u3060\u3055\u308b\u3068\u5e78\u3044\u3067\u3059\uff0e\n", "tags": ["Python", "\u6a5f\u68b0\u5b66\u7fd2", "\u7570\u5e38\u691c\u77e5\u3068\u5909\u5316\u691c\u77e5", "\u30c7\u30fc\u30bf\u53ef\u8996\u5316", "\u30c7\u30fc\u30bf\u5206\u6790"]}