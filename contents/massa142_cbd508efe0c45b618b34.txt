{"tags": ["Django", "Python", "websocket"], "context": "\n\n \u306f\u3058\u3081\u306b\n\u3053\u306e\u8a18\u4e8b\u306f\u3001Django Advent Calendar 2016 17\u65e5\u76ee\u306e\u8a18\u4e8b\u3067\u3059\u3002\n\nDjango Channels\u3068\u306f\nDjango Channels \u2014 Channels 0.17.2 documentation\n\nChannels is a project to make Django able to handle more than just plain HTTP requests, including WebSockets and HTTP2, as well as the ability to run code after a response has been sent for things like thumbnailing or background calculation.\n\nChannels\u306f\u3001Django\u304cWebSocket\u3084HTTP2\u306a\u3069\u306e\u5358\u7d14\u306aHTTP\u30ea\u30af\u30a8\u30b9\u30c8\u3060\u3051\u3067\u306a\u304f\u3001\u30b5\u30e0\u30cd\u30a4\u30eb\u3084\u30d0\u30c3\u30af\u30b0\u30e9\u30a6\u30f3\u30c9\u8a08\u7b97\u306e\u3088\u3046\u306b\u30ec\u30b9\u30dd\u30f3\u30b9\u304c\u9001\u4fe1\u3055\u308c\u305f\u5f8c\u306b\u30b3\u30fc\u30c9\u3092\u5b9f\u884c\u3067\u304d\u308b\u3088\u3046\u306b\u3059\u308b\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u3067\u3042\u308b\u3002\n\n\u3000The core of the system is, unsurprisingly, a datastructure called a channel. What is a channel? It is an ordered, first-in first-out queue with message expiry and at-most-once delivery to only one listener at a time.\n\n\n\u30b7\u30b9\u30c6\u30e0\u306e\u6838\u5fc3\u306f\u30c1\u30e3\u30cd\u30eb\u3068\u547c\u3093\u3067\u3044\u308b\u30c7\u30fc\u30bf\u69cb\u9020\n\u30c1\u30e3\u30cd\u30eb\u3068\u306f\u9806\u5e8f\u4ed8\u3051\u3089\u308c\u305f\u5148\u5165\u308c\u5148\u51fa\u3057\u30ad\u30e5\u30fc\n\n\n\u6709\u52b9\u671f\u9650\u304c\u3042\u308b\n\u4e00\u5ea6\u306b\u4e00\u4eba\u306e\u30ea\u30b9\u30ca\u3078\u306e\u307fat-most-once\u9001\u4fe1\u3092\u884c\u3046(\u6700\u9ad81\u56de\uff06\u5c4a\u304f\u304b\u306f\u4fdd\u8a3c\u3057\u306a\u3044)\n\n\n\n\nIf you\u2019ve used channels in Go: Go channels are reasonably similar to Django ones. The key difference is that Django channels are network-transparent; the implementations of channels we provide are all accessible across a network to consumers and producers running in different processes or on different machines.\n\n\n\u8ad6\u7406\u7684\u306b\u306fGo\u306echannels\u3068\u4f3c\u3066\u3044\u308b\nDjango channels\u306f\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u30c8\u30e9\u30f3\u30b9\u30da\u30a2\u30ec\u30f3\u30c8\u3067\u3042\u308b\u3053\u3068\u304c\u4e3b\u306a\u9055\u3044\n\n\n\u7570\u306a\u308b\u30d7\u30ed\u30bb\u30b9\u3084\u7570\u306a\u308b\u30de\u30b7\u30f3\u4e0a\u3067\u52d5\u3044\u3066\u3044\u308b\u30b3\u30f3\u30b7\u30e5\u30fc\u30de\u3068\u30d7\u30ed\u30c7\u30e5\u30fc\u30b5\u306b\u30a2\u30af\u30bb\u30b9\u53ef\u80fd\n\n\n\n\u203b Slack\u3084Twitter\u306b\u901a\u77e5\u304c\u9001\u308c\u308b\u30e9\u30a4\u30d6\u30e9\u30ea\u3067\u3042\u308bdjango-channels\u3068\u306f\u5225\u7269\u306b\u306a\u308a\u307e\u3059\u3002\n\n\u30e2\u30c7\u30eb\u56f3\n\n\u4f1d\u7d71\u7684\u306a\u30ea\u30af\u30a8\u30b9\u30c8\u30fb\u30ec\u30b9\u30dd\u30f3\u30b9\u30e2\u30c7\u30eb\n\n\nChannels\u306b\u3088\u308b\u30ef\u30fc\u30ab\u30fc\u30e2\u30c7\u30eb\n\n\u203b \u51fa\u5178: Finally, Real-Time Django Is Here: Get Started with Django Channels\n\nASGI\u3068\u306f\nASGI (Asynchronous Server Gateway Interface) Draft Spec \u2014 Channels 0.17.2 documentation\n\nThis document proposes a standard interface between network protocol servers (particularly webservers) and Python applications, intended to allow handling of multiple common protocol styles (including HTTP, HTTP2, and WebSocket).\n\n\u8907\u6570\u306e\u4e00\u822c\u7684\u306a\u30d7\u30ed\u30c8\u30b3\u30eb\u30b9\u30bf\u30a4\u30eb\uff08HTTP\u3084HTTP2\u3001WebSocket\u3092\u542b\u3080\uff09\u306e\u53d6\u308a\u6271\u3044\u3092\u53ef\u80fd\u306b\u3059\u308b\u305f\u3081\u306e\u3001\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u30fb\u30d7\u30ed\u30c8\u30b3\u30eb\u30fb\u30b5\u30fc\u30d0\uff08\u7279\u306bWeb\u30b5\u30fc\u30d0\uff09\u3068Python\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u3068\u306e\u9593\u306e\u6a19\u6e96\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30fc\u30b9\n\u203b \u3042\u304f\u307e\u3067WSGI\u62e1\u5f35\u3067\u3042\u308b(supplement and expand on WSGI)\n\n\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\npip\u3067\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3057\u3066\u3001INSTALLED_APPS\u306b\u8ffd\u52a0\u3059\u308b\u3060\u3051\u3067OK\u3002\n$ pip install -U channels\n\nINSTALLED_APPS = (\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.sites',\n    ...\n    'channels',\n)\n\n\n\u306f\u3058\u3081\u3066\u307f\u308b\n\u3068\u308a\u3042\u3048\u305a\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u306b\u3042\u308bGetting Started with Channels\u3092\u898b\u3066\u3044\u304d\u307e\u3057\u3087\u3046\u3002\n$ pip install django channels\n$ django-admin startproject myapp\n$ tree\n.\n\u251c\u2500\u2500 db.sqlite3\n\u251c\u2500\u2500 manage.py\n\u2514\u2500\u2500 myapp\n    \u251c\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 settings.py\n    \u251c\u2500\u2500 urls.py\n    \u2514\u2500\u2500 wsgi.py\n\n\nFirst Consumers\n\u307e\u305a\u306f\u3001\u7d44\u307f\u8fbc\u307f\u306e\u30ea\u30af\u30a8\u30b9\u30c8\u30cf\u30f3\u30c9\u30ea\u30f3\u30b0\u3092\u30aa\u30fc\u30d0\u30fc\u30e9\u30a4\u30c9\u3057\u3066\u307f\u307e\u3059\u3002\n\nconsumers.py\nfrom django.http import HttpResponse\nfrom channels.handler import AsgiHandler\n\n\ndef http_consumer(message):\n    # Make standard HTTP response - access ASGI path attribute directly\n    response = HttpResponse(\"Hello world! You asked for %s\" % message.content['path'])\n    # Encode that response into message format (ASGI)\n    for chunk in AsgiHandler.encode_response(response):\n        message.reply_channel.send(chunk)\n\n\n\nsettings.py\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'myapp',\n    'channels',\n]\n...\nCHANNEL_LAYERS = {\n    \"default\": {\n        \"BACKEND\": \"asgiref.inmemory.ChannelLayer\",\n        \"ROUTING\": \"myproject.routing.channel_routing\",\n    },\n}\n\n\n\nrouting.py\nfrom channels.routing import route\n\nchannel_routing = [\n    route(\"http.request\", \"myapp.consumers.http_consumer\"),\n]\n\n\n\u8a2d\u5b9a\u306f\u3053\u308c\u3067\u5b8c\u4e86\u3002\n$ tree\n.\n\u251c\u2500\u2500 db.sqlite3\n\u251c\u2500\u2500 manage.py\n\u2514\u2500\u2500 myapp\n    \u251c\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 consumers.py\n    \u251c\u2500\u2500 routing.py\n    \u251c\u2500\u2500 settings.py\n    \u251c\u2500\u2500 urls.py\n    \u2514\u2500\u2500 wsgi.py\n$ python manage.py runserver\n\nhttp://127.0.0.1:8000/ \u3092\u78ba\u8a8d\u3057\u3066\u3001\u300cHello world! You asked for /\u300d\u3068\u3044\u3046\u30c6\u30ad\u30b9\u30c8\u304c\u8868\u793a\u3055\u308c\u3066\u3044\u308c\u3070OK\u3067\u3059\u3002\n\u305f\u3060\u3053\u308c\u3067\u306f\u9000\u5c48\u306a\u306e\u3067\u3001WebSockets\u3092\u4f7f\u3063\u3066\u57fa\u672c\u7684\u306a\u30c1\u30e3\u30c3\u30c8\u30b5\u30fc\u30d0\u3092\u4f5c\u308a\u307e\u3057\u3087\u3046\u3002\n\u5168\u304f\u5b9f\u7528\u7684\u3067\u306f\u306a\u3044\u3051\u3069\u3001\u307e\u305a\u306f\u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u9001\u3063\u3066\u304d\u305f\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u306b\u305d\u306e\u307e\u307e\u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u9001\u308a\u8fd4\u3059\u30b5\u30fc\u30d0\u3092\u4f5c\u3063\u3066\u307f\u307e\u3059\u3002\n\nconsumers.py\ndef ws_message(message):\n    # ASGI WebSocket packet-received and send-packet message types\n    # both have a \"text\" key for their textual data.\n    message.reply_channel.send({\n        \"text\": message.content['text'],\n    })\n\n\n\nrouting.py\nfrom channels.routing import route\nfrom myapp.consumers import ws_message\n\nchannel_routing = [\n    route(\"websocket.receive\", ws_message),\n]\n\n\n$ python manage.py runserver\n\nhttp://127.0.0.1:8000/ \u306b\u30a2\u30af\u30bb\u30b9\u3057\u3066\u3001js\u306e\u30b3\u30f3\u30bd\u30fc\u30eb\u306b\u4ee5\u4e0b\u306e\u901a\u308a\u306b\u6253\u3061\u8fbc\u3093\u3067\u304f\u3060\u3055\u3044\u3002\n// Note that the path doesn't matter for routing; any WebSocket\n// connection gets bumped over to WebSocket consumers\nsocket = new WebSocket(\"ws://\" + window.location.host + \"/chat/\");\nsocket.onmessage = function(e) {\n    alert(e.data);\n}\nsocket.onopen = function() {\n    socket.send(\"hello world\");\n}\n// Call onopen directly if socket is already open\nif (socket.readyState == WebSocket.OPEN) socket.onopen();\n\n\u300chello world\u300d\u3068\u3044\u3046\u30a2\u30e9\u30fc\u30c8\u304c\u8868\u793a\u3055\u308c\u308c\u3070OK\u3067\u3059\u3002\n\nGroups\n\u305d\u3057\u305f\u3089\u304a\u4e92\u3044\u306b\u4f1a\u8a71\u3067\u304d\u308b\u5b9f\u969b\u306e\u30c1\u30e3\u30c3\u30c8\u3092\u3001Groups\u3092\u4f7f\u3063\u3066\u5b9f\u88c5\u3057\u307e\u3057\u3087\u3046\u3002\n\ncousumers.py\nfrom channels import Group\n\n\n# Connected to websocket.connect\ndef ws_add(message):\n    message.reply_channel.send({\"accept\": True})\n    Group(\"chat\").add(message.reply_channel)\n\n\n# Connected to websocket.receive\ndef ws_message(message):\n    Group(\"chat\").send({\n        \"text\": \"[user] %s\" % message.content['text'],\n    })\n\n\n# Connected to websocket.disconnect\ndef ws_disconnect(message):\n    Group(\"chat\").discard(message.reply_channel)\n\n\n\nrouting.py\nfrom channels.routing import route\nfrom myapp.consumers import ws_add, ws_message, ws_disconnect\n\nchannel_routing = [\n    route(\"websocket.connect\", ws_add),\n    route(\"websocket.receive\", ws_message),\n    route(\"websocket.disconnect\", ws_disconnect),\n]\n\n\n$ python manage.py runserver\n\n\u8907\u6570\u306e\u30bf\u30d6\u3067http://127.0.0.1:8000/ \u3092\u958b\u3044\u3066\u3001\u30b3\u30f3\u30bd\u30fc\u30eb\u306b\u3055\u3063\u304d\u3068\u540c\u3058js\u30b3\u30fc\u30c9\u3092\u6253\u3061\u8fbc\u3093\u3067\u304f\u3060\u3055\u3044\u3002\n\u5404\u30bf\u30d6\u3067\u300c[user] hello world\u300d\u306e\u30a2\u30e9\u30fc\u30c8\u304c\u8868\u793a\u3055\u308c\u308c\u3070OK\u3067\u3059\u3002\n\nRunning with Channels\n\u6b21\u306fChannel layer\u3092\u5207\u308a\u66ff\u3048\u3066\u307f\u307e\u3059\u3002\n\u3053\u308c\u307e\u3067\u306fasgiref.inmemory.ChannelLayer\u3092\u5229\u7528\u3057\u3066\u307e\u3057\u305f\u304c\u3001\u3053\u308c\u3067\u306f\u540c\u3058\u30d7\u30ed\u30bb\u30b9\u306e\u3046\u3061\u3067\u3057\u304b\u52d5\u4f5c\u3057\u307e\u305b\u3093\u3002\u672c\u756a\u74b0\u5883\u3067\u306f\u3001asgi_redis\u306e\u3088\u3046\u306a\u30d0\u30c3\u30af\u30a8\u30f3\u30c9\u3092\u5229\u7528\u3057\u307e\u3059\u3002\n$ pip install asgi_redis\n\n\nsetting.py\nCHANNEL_LAYERS = {\n    \"default\": {\n        \"BACKEND\": \"asgi_redis.RedisChannelLayer\",\n        \"CONFIG\": {\n            \"hosts\": [(\"localhost\", 6379)],\n        },\n        \"ROUTING\": \"myapp.routing.channel_routing\",\n    },\n}\n\n\n$ python manage.py runserver --noworker\n$ python manage.py runworker\n\n\u65b0\u305f\u306brunworker\u30b3\u30de\u30f3\u30c9\u3092\u5b9f\u884c\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3057\u305f\u3002\n\nPersisting Data\n\u3053\u308c\u307e\u3067\u898b\u3066\u304d\u305freplay_channel\u5c5e\u6027\u306f\u3001\u7e4b\u304c\u3063\u3066\u3044\u308bWebSocket\u306b\u5bfe\u3059\u308b\u30e6\u30cb\u30fc\u30af\u306a\u30dd\u30a4\u30f3\u30c8\u3067\u3059\u3002\u3053\u308c\u3067\u3001\u30e1\u30c3\u30bb\u30fc\u30b8\u304c\u8ab0\u304b\u3089\u306e\u3082\u306e\u304b\u8fbf\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3057\u305f\u3002\n\u672c\u756a\u74b0\u5883\u3067\u306fHTTP\u901a\u4fe1\u306b\u304a\u3051\u308bcookie\u306e\u3088\u3046\u306b\u3001channel_session\u3092\u7528\u3044\u3066\u30bb\u30c3\u30b7\u30e7\u30f3\u6c38\u7d9a\u5316\u3057\u307e\u3057\u3087\u3046\u3002\n\nconsumers.py\nfrom channels import Group\nfrom channels.sessions import channel_session\n\n\n# Connected to websocket.connect\n@channel_session\ndef ws_connect(message):\n    # Accept connection\n    message.reply_channel.send({\"accept\": True})\n    # Work out room name from path (ignore slashes)\n    room = message.content['path'].strip(\"/\")\n    # Save room in session and add us to the group\n    message.channel_session['room'] = room\n    Group(\"chat-%s\" % room).add(message.reply_channel)\n\n\n# Connected to websocket.receive\n@channel_session\ndef ws_message(message):\n    Group(\"chat-%s\" % message.channel_session['room']).send({\n        \"text\": message['text'],\n    })\n\n\n# Connected to websocket.disconnect\n@channel_session\ndef ws_disconnect(message):\n    Group(\"chat-%s\" % message.channel_session['room']).discard(message.reply_channel)\n\n\n\nrouting.py\nfrom channels.routing import route\nfrom myapp.consumers import ws_connect, ws_message, ws_disconnect\n\nchannel_routing = [\n    route(\"websocket.connect\", ws_connect),\n    route(\"websocket.receive\", ws_message),\n    route(\"websocket.disconnect\", ws_disconnect),\n]\n\n\n\nAuthentication\nChannels\u306f\u4ee5\u4e0b\u306e\uff12\u901a\u308a\u306e\u65b9\u6cd5\u3067\u3001\u30e6\u30fc\u30b6\u8a8d\u8a3c\u306b\u5fc5\u8981\u306aDjango\u30bb\u30c3\u30b7\u30e7\u30f3\u3092\u53d6\u5f97\u3067\u304d\u307e\u3059\u3002\n\ncookie\nGet\u30d1\u30e9\u30e1\u30fc\u30bfsession_key\n\n\nDjango\u30bb\u30c3\u30b7\u30e7\u30f3\u3092\u7528\u3044\u305f\u8a8d\u8a3c\u306f\u30c7\u30b3\u30ec\u30fc\u30bf\u3092\u6307\u5b9a\u3057\u3066\u884c\u3044\u307e\u3059\u3002\n\nconsumers.py\nfrom channels import Channel, Group\nfrom channels.sessions import channel_session\nfrom channels.auth import http_session_user, channel_session_user, channel_session_user_from_http\n\n\n# Connected to websocket.connect\n@channel_session_user_from_http\ndef ws_add(message):\n    # Accept connection\n    message.reply_channel.send({\"accept\": True})\n    # Add them to the right group\n    Group(\"chat-%s\" % message.user.username[0]).add(message.reply_channel)\n\n\n# Connected to websocket.receive\n@channel_session_user\ndef ws_message(message):\n    Group(\"chat-%s\" % message.user.username[0]).send({\n        \"text\": message['text'],\n    })\n\n\n# Connected to websocket.disconnect\n@channel_session_user\ndef ws_disconnect(message):\n    Group(\"chat-%s\" % message.user.username[0]).discard(message.reply_channel)\n\n\n\nRouting\nDjango\u306eurls.py\u306e\u3088\u3046\u306b\u3001\u6b63\u898f\u8868\u73fe\u306a\u3069\u3092\u7528\u3044\u3066\u67d4\u8edf\u306brouting.py\u3092\u8a2d\u5b9a\u3067\u304d\u307e\u3059\u3002\n\nrouting.py\nhttp_routing = [\n    route(\"http.request\", poll_consumer, path=r\"^/poll/$\", method=r\"^POST$\"),\n]\n\nchat_routing = [\n    route(\"websocket.connect\", chat_connect, path=r\"^/(?P<room>[a-zA-Z0-9_]+)/$\"),\n    route(\"websocket.disconnect\", chat_disconnect),\n]\n\nrouting = [\n    # You can use a string import path as the first argument as well.\n    include(chat_routing, path=r\"^/chat\"),\n    include(http_routing),\n]\n\n\n\nModels\nDjango\u306eORM\u3092\u7528\u3044\u3066\u3001\u30e1\u30c3\u30bb\u30fc\u30b8\u306e\u6c38\u7d9a\u5316\u3092\u7c21\u5358\u306b\u7d44\u307f\u8fbc\u3081\u307e\u3059\u3002\n\nconsumers.py\nfrom channels import Channel\nfrom channels.sessions import channel_session\nfrom .models import ChatMessage\n\n\n# Connected to chat-messages\ndef msg_consumer(message):\n    # Save to model\n    room = message.content['room']\n    ChatMessage.objects.create(\n        room=room,\n        message=message.content['message'],\n    )\n    # Broadcast to listening sockets\n    Group(\"chat-%s\" % room).send({\n        \"text\": message.content['message'],\n    })\n\n\n# Connected to websocket.connect\n@channel_session\ndef ws_connect(message):\n    # Work out room name from path (ignore slashes)\n    room = message.content['path'].strip(\"/\")\n    # Save room in session and add us to the group\n    message.channel_session['room'] = room\n    Group(\"chat-%s\" % room).add(message.reply_channel)\n\n\n# Connected to websocket.receive\n@channel_session\ndef ws_message(message):\n    # Stick the message onto the processing queue\n    Channel(\"chat-messages\").send({\n        \"room\": message.channel_session['room'],\n        \"message\": message['text'],\n    })\n\n\n# Connected to websocket.disconnect\n@channel_session\ndef ws_disconnect(message):\n    Group(\"chat-%s\" % message.channel_session['room']).discard(message.reply_channel)\n\n\n\nEnforcing Ordering\n@enforce_ordering(slight=True)\u30c7\u30b3\u30ec\u30fc\u30bf\u3092\u4e0e\u3048\u308b\u3053\u3068\u3067\u3001\u30ad\u30e5\u30fc\u306b\u7a81\u3063\u8fbc\u307e\u308c\u305f\u9806\u756a\u3067\u306f\u306a\u304fwebsocket.connect\u304c\u6700\u521d\u306b\u884c\u308f\u308c\u305f\u3082\u306e\u304c\u307e\u305a\u5b9f\u884c\u3055\u308c\u308b\u3088\u3046\u306b\u5909\u66f4\u3067\u304d\u307e\u3059\u3002\n\nconsumers.py\nfrom channels import Channel, Group\nfrom channels.sessions import channel_session, enforce_ordering\nfrom channels.auth import http_session_user, channel_session_user, channel_session_user_from_http\n\n\n# Connected to websocket.connect\n@enforce_ordering(slight=True)\n@channel_session_user_from_http\ndef ws_add(message):\n    # Add them to the right group\n    Group(\"chat-%s\" % message.user.username[0]).add(message.reply_channel)\n\n\n# Connected to websocket.receive\n@enforce_ordering(slight=True)\n@channel_session_user\ndef ws_message(message):\n    Group(\"chat-%s\" % message.user.username[0]).send({\n        \"text\": message['text'],\n    })\n\n\n# Connected to websocket.disconnect\n@enforce_ordering(slight=True)\n@channel_session_user\ndef ws_disconnect(message):\n    Group(\"chat-%s\" % message.user.username[0]).discard(message.reply_channel\n\n\n\n\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb\n\u3053\u3053\u3067\u898b\u3066\u304d\u305f\u3088\u3046\u306a\u30c1\u30e3\u30c3\u30c8\u30a2\u30d7\u30ea\u306e\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb\u304cHeroku\u3067\u7528\u610f\u3055\u308c\u3066\u3044\u307e\u3059\u3002\nFinally, Real-Time Django Is Here: Get Started with Django Channels\n\u5b9f\u969b\u306bHeroku\u306b\u30c7\u30d7\u30ed\u30a4\u3059\u308b\u307e\u3067\u3084\u3063\u3066\u307f\u308b\u3068\u3001\u3088\u308a\u611f\u899a\u304c\u63b4\u3081\u308b\u3068\u601d\u3044\u307e\u3059\u3002\nDjango Channels Example\n\n\u53c2\u8003\u3057\u305f\u3082\u306e\n\nDjango \u3067 WebSocket \u306b\u3088\u308b\u30b5\u30fc\u30d0 Push\nFinally, Real-Time Django Is Here: Get Started with Django Channels\n\n\n\u304a\u308f\u308a\u306b\n\u300cDjango \u3067 WebSocket \u306b\u3088\u308b\u30b5\u30fc\u30d0 Push\u300d\u3067voluntas\u3055\u3093\u304c\u66f8\u3044\u3066\u3042\u308b\u901a\u308a\u3001\u30d1\u30d5\u30a9\u30fc\u30de\u30f3\u30b9\u3092\u6c42\u3081\u308b\u306e\u3067\u3042\u308c\u3070\u4ed6\u306e\u8a00\u8a9e\u3067\u884c\u3063\u305f\u307b\u3046\u304c\u826f\u3044\u3067\u3059\u3002\nSwampDragon\u3084Tornado\u306a\u3069\u3092\u5225\u9014\u7acb\u3061\u4e0a\u3052\u308b\u5fc5\u8981\u304c\u306a\u304f\u3001Django\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u306b\u7c21\u5358\u306b\u7d44\u307f\u8fbc\u3080\u3053\u3068\u304c\u3067\u304d\u308b\u306e\u304c\u6700\u5927\u306e\u9b45\u529b\u3067\u3059\u3002\n\u3053\u306eChannels\u306f\u6765\u5e74\u306e12\u6708\u306b\u30ea\u30ea\u30fc\u30b9\u4e88\u5b9a\u306eDjango2.0\u306b\u53d6\u308a\u8fbc\u307e\u308c\u308b\u3053\u3068\u3082\u691c\u8a0e\u3055\u308c\u3066\u3044\u307e\u3059\u3002\u7686\u3055\u3093\u3082\u305c\u3072\u4f7f\u3063\u3066\u307f\u3066\u3001Channels\u3092\u76db\u308a\u4e0a\u3052\u3066\u3044\u304d\u307e\u3057\u3087\u3046\uff01\n\n##\u0010 \u306f\u3058\u3081\u306b\n\n\u3053\u306e\u8a18\u4e8b\u306f\u3001[Django Advent Calendar 2016](http://qiita.com/advent-calendar/2016/django) 17\u65e5\u76ee\u306e\u8a18\u4e8b\u3067\u3059\u3002\n\n## Django Channels\u3068\u306f\n\n[Django Channels &mdash; Channels 0.17.2 documentation](https://channels.readthedocs.io/en/latest/index.html)\n\n> Channels is a project to make Django able to handle more than just plain HTTP requests, including WebSockets and HTTP2, as well as the ability to run code after a response has been sent for things like thumbnailing or background calculation.\n\n\nChannels\u306f\u3001Django\u304cWebSocket\u3084HTTP2\u306a\u3069\u306e\u5358\u7d14\u306aHTTP\u30ea\u30af\u30a8\u30b9\u30c8\u3060\u3051\u3067\u306a\u304f\u3001\u30b5\u30e0\u30cd\u30a4\u30eb\u3084\u30d0\u30c3\u30af\u30b0\u30e9\u30a6\u30f3\u30c9\u8a08\u7b97\u306e\u3088\u3046\u306b\u30ec\u30b9\u30dd\u30f3\u30b9\u304c\u9001\u4fe1\u3055\u308c\u305f\u5f8c\u306b\u30b3\u30fc\u30c9\u3092\u5b9f\u884c\u3067\u304d\u308b\u3088\u3046\u306b\u3059\u308b\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u3067\u3042\u308b\u3002\n\n>\u3000The core of the system is, unsurprisingly, a datastructure called a channel. What is a channel? It is an ordered, first-in first-out queue with message expiry and at-most-once delivery to only one listener at a time.\n\n+ \u30b7\u30b9\u30c6\u30e0\u306e\u6838\u5fc3\u306f\u30c1\u30e3\u30cd\u30eb\u3068\u547c\u3093\u3067\u3044\u308b\u30c7\u30fc\u30bf\u69cb\u9020\n+ \u30c1\u30e3\u30cd\u30eb\u3068\u306f\u9806\u5e8f\u4ed8\u3051\u3089\u308c\u305f\u5148\u5165\u308c\u5148\u51fa\u3057\u30ad\u30e5\u30fc\n\t+ \u6709\u52b9\u671f\u9650\u304c\u3042\u308b\n\t+ \u4e00\u5ea6\u306b\u4e00\u4eba\u306e\u30ea\u30b9\u30ca\u3078\u306e\u307fat-most-once\u9001\u4fe1\u3092\u884c\u3046(\u6700\u9ad81\u56de\uff06\u5c4a\u304f\u304b\u306f\u4fdd\u8a3c\u3057\u306a\u3044)\n\n> If you\u2019ve used channels in Go: Go channels are reasonably similar to Django ones. The key difference is that Django channels are network-transparent; the implementations of channels we provide are all accessible across a network to consumers and producers running in different processes or on different machines.\n\n+ \u8ad6\u7406\u7684\u306b\u306f[Go\u306echannels](https://tour.golang.org/concurrency/2)\u3068\u4f3c\u3066\u3044\u308b\n+ Django channels\u306f\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u30c8\u30e9\u30f3\u30b9\u30da\u30a2\u30ec\u30f3\u30c8\u3067\u3042\u308b\u3053\u3068\u304c\u4e3b\u306a\u9055\u3044\n\t+ \u7570\u306a\u308b\u30d7\u30ed\u30bb\u30b9\u3084\u7570\u306a\u308b\u30de\u30b7\u30f3\u4e0a\u3067\u52d5\u3044\u3066\u3044\u308b\u30b3\u30f3\u30b7\u30e5\u30fc\u30de\u3068\u30d7\u30ed\u30c7\u30e5\u30fc\u30b5\u306b\u30a2\u30af\u30bb\u30b9\u53ef\u80fd\n\n\u203b Slack\u3084Twitter\u306b\u901a\u77e5\u304c\u9001\u308c\u308b\u30e9\u30a4\u30d6\u30e9\u30ea\u3067\u3042\u308b[django-channels](https://github.com/ymyzk/django-channels)\u3068\u306f\u5225\u7269\u306b\u306a\u308a\u307e\u3059\u3002\n\n## \u30e2\u30c7\u30eb\u56f3\n\n### \u4f1d\u7d71\u7684\u306a\u30ea\u30af\u30a8\u30b9\u30c8\u30fb\u30ec\u30b9\u30dd\u30f3\u30b9\u30e2\u30c7\u30eb\n\n![1473343845-django-asgi-websockets.png](https://qiita-image-store.s3.amazonaws.com/0/19111/43bee5a5-8bba-6af7-ea51-85c226d4a790.png \"1473343845-django-asgi-websockets.png\")\n\n### Channels\u306b\u3088\u308b\u30ef\u30fc\u30ab\u30fc\u30e2\u30c7\u30eb\n\n![1473343845-django-wsgi.png](https://qiita-image-store.s3.amazonaws.com/0/19111/10d5081e-71de-fdff-d94f-d1470dc4fb31.png \"1473343845-django-wsgi.png\")\n\n\u203b \u51fa\u5178: [Finally, Real-Time Django Is Here: Get Started with Django Channels](https://blog.heroku.com/in_deep_with_django_channels_the_future_of_real_time_apps_in_django)\n\n## ASGI\u3068\u306f\n\n[ASGI (Asynchronous Server Gateway Interface) Draft Spec &mdash; Channels 0.17.2 documentation](https://channels.readthedocs.io/en/latest/asgi.html)\n\n> This document proposes a standard interface between network protocol servers (particularly webservers) and Python applications, intended to allow handling of multiple common protocol styles (including HTTP, HTTP2, and WebSocket).\n\n\u8907\u6570\u306e\u4e00\u822c\u7684\u306a\u30d7\u30ed\u30c8\u30b3\u30eb\u30b9\u30bf\u30a4\u30eb\uff08HTTP\u3084HTTP2\u3001WebSocket\u3092\u542b\u3080\uff09\u306e\u53d6\u308a\u6271\u3044\u3092\u53ef\u80fd\u306b\u3059\u308b\u305f\u3081\u306e\u3001\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u30fb\u30d7\u30ed\u30c8\u30b3\u30eb\u30fb\u30b5\u30fc\u30d0\uff08\u7279\u306bWeb\u30b5\u30fc\u30d0\uff09\u3068Python\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u3068\u306e\u9593\u306e\u6a19\u6e96\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30fc\u30b9\n\n\u203b \u3042\u304f\u307e\u3067WSGI\u62e1\u5f35\u3067\u3042\u308b(supplement and expand on WSGI)\n\n## \u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\n\npip\u3067\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3057\u3066\u3001`INSTALLED_APPS`\u306b\u8ffd\u52a0\u3059\u308b\u3060\u3051\u3067OK\u3002\n\n```\n$ pip install -U channels\n```\n\n```\nINSTALLED_APPS = (\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.sites',\n    ...\n    'channels',\n)\n```\n\n## \u306f\u3058\u3081\u3066\u307f\u308b\n\n\u3068\u308a\u3042\u3048\u305a\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u306b\u3042\u308b[Getting Started with Channels](https://channels.readthedocs.io/en/latest/getting-started.html)\u3092\u898b\u3066\u3044\u304d\u307e\u3057\u3087\u3046\u3002\n\n```\n$ pip install django channels\n$ django-admin startproject myapp\n$ tree\n.\n\u251c\u2500\u2500 db.sqlite3\n\u251c\u2500\u2500 manage.py\n\u2514\u2500\u2500 myapp\n    \u251c\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 settings.py\n    \u251c\u2500\u2500 urls.py\n    \u2514\u2500\u2500 wsgi.py\n```\n\n### First Consumers\n\n\u307e\u305a\u306f\u3001\u7d44\u307f\u8fbc\u307f\u306e\u30ea\u30af\u30a8\u30b9\u30c8\u30cf\u30f3\u30c9\u30ea\u30f3\u30b0\u3092\u30aa\u30fc\u30d0\u30fc\u30e9\u30a4\u30c9\u3057\u3066\u307f\u307e\u3059\u3002\n\n```consumers.py\nfrom django.http import HttpResponse\nfrom channels.handler import AsgiHandler\n\n\ndef http_consumer(message):\n    # Make standard HTTP response - access ASGI path attribute directly\n    response = HttpResponse(\"Hello world! You asked for %s\" % message.content['path'])\n    # Encode that response into message format (ASGI)\n    for chunk in AsgiHandler.encode_response(response):\n        message.reply_channel.send(chunk)\n```\n\n```settings.py\nINSTALLED_APPS = [\n    'django.contrib.admin',\n    'django.contrib.auth',\n    'django.contrib.contenttypes',\n    'django.contrib.sessions',\n    'django.contrib.messages',\n    'django.contrib.staticfiles',\n    'myapp',\n    'channels',\n]\n...\nCHANNEL_LAYERS = {\n    \"default\": {\n        \"BACKEND\": \"asgiref.inmemory.ChannelLayer\",\n        \"ROUTING\": \"myproject.routing.channel_routing\",\n    },\n}\n```\n\n```routing.py\nfrom channels.routing import route\n\nchannel_routing = [\n    route(\"http.request\", \"myapp.consumers.http_consumer\"),\n]\n```\n\n\u8a2d\u5b9a\u306f\u3053\u308c\u3067\u5b8c\u4e86\u3002\n\n```\n$ tree\n.\n\u251c\u2500\u2500 db.sqlite3\n\u251c\u2500\u2500 manage.py\n\u2514\u2500\u2500 myapp\n    \u251c\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 consumers.py\n    \u251c\u2500\u2500 routing.py\n    \u251c\u2500\u2500 settings.py\n    \u251c\u2500\u2500 urls.py\n    \u2514\u2500\u2500 wsgi.py\n$ python manage.py runserver\n```\n\nhttp://127.0.0.1:8000/ \u3092\u78ba\u8a8d\u3057\u3066\u3001\u300cHello world! You asked for /\u300d\u3068\u3044\u3046\u30c6\u30ad\u30b9\u30c8\u304c\u8868\u793a\u3055\u308c\u3066\u3044\u308c\u3070OK\u3067\u3059\u3002\n\u305f\u3060\u3053\u308c\u3067\u306f\u9000\u5c48\u306a\u306e\u3067\u3001WebSockets\u3092\u4f7f\u3063\u3066\u57fa\u672c\u7684\u306a\u30c1\u30e3\u30c3\u30c8\u30b5\u30fc\u30d0\u3092\u4f5c\u308a\u307e\u3057\u3087\u3046\u3002\n\n\u5168\u304f\u5b9f\u7528\u7684\u3067\u306f\u306a\u3044\u3051\u3069\u3001\u307e\u305a\u306f\u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u9001\u3063\u3066\u304d\u305f\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u306b\u305d\u306e\u307e\u307e\u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u9001\u308a\u8fd4\u3059\u30b5\u30fc\u30d0\u3092\u4f5c\u3063\u3066\u307f\u307e\u3059\u3002\n\n```consumers.py\ndef ws_message(message):\n    # ASGI WebSocket packet-received and send-packet message types\n    # both have a \"text\" key for their textual data.\n    message.reply_channel.send({\n        \"text\": message.content['text'],\n    })\n```\n\n```routing.py\nfrom channels.routing import route\nfrom myapp.consumers import ws_message\n\nchannel_routing = [\n    route(\"websocket.receive\", ws_message),\n]\n```\n\n```\n$ python manage.py runserver\n```\n\nhttp://127.0.0.1:8000/ \u306b\u30a2\u30af\u30bb\u30b9\u3057\u3066\u3001js\u306e\u30b3\u30f3\u30bd\u30fc\u30eb\u306b\u4ee5\u4e0b\u306e\u901a\u308a\u306b\u6253\u3061\u8fbc\u3093\u3067\u304f\u3060\u3055\u3044\u3002\n\n```\n// Note that the path doesn't matter for routing; any WebSocket\n// connection gets bumped over to WebSocket consumers\nsocket = new WebSocket(\"ws://\" + window.location.host + \"/chat/\");\nsocket.onmessage = function(e) {\n    alert(e.data);\n}\nsocket.onopen = function() {\n    socket.send(\"hello world\");\n}\n// Call onopen directly if socket is already open\nif (socket.readyState == WebSocket.OPEN) socket.onopen();\n```\n\n\u300chello world\u300d\u3068\u3044\u3046\u30a2\u30e9\u30fc\u30c8\u304c\u8868\u793a\u3055\u308c\u308c\u3070OK\u3067\u3059\u3002\n\n### Groups\n\n\u305d\u3057\u305f\u3089\u304a\u4e92\u3044\u306b\u4f1a\u8a71\u3067\u304d\u308b\u5b9f\u969b\u306e\u30c1\u30e3\u30c3\u30c8\u3092\u3001[Groups](https://channels.readthedocs.io/en/latest/concepts.html#groups)\u3092\u4f7f\u3063\u3066\u5b9f\u88c5\u3057\u307e\u3057\u3087\u3046\u3002\n\n```cousumers.py\nfrom channels import Group\n\n\n# Connected to websocket.connect\ndef ws_add(message):\n    message.reply_channel.send({\"accept\": True})\n    Group(\"chat\").add(message.reply_channel)\n\n\n# Connected to websocket.receive\ndef ws_message(message):\n    Group(\"chat\").send({\n        \"text\": \"[user] %s\" % message.content['text'],\n    })\n\n\n# Connected to websocket.disconnect\ndef ws_disconnect(message):\n    Group(\"chat\").discard(message.reply_channel)\n```\n\n```routing.py\nfrom channels.routing import route\nfrom myapp.consumers import ws_add, ws_message, ws_disconnect\n\nchannel_routing = [\n    route(\"websocket.connect\", ws_add),\n    route(\"websocket.receive\", ws_message),\n    route(\"websocket.disconnect\", ws_disconnect),\n]\n```\n\n```\n$ python manage.py runserver\n```\n\n\u8907\u6570\u306e\u30bf\u30d6\u3067http://127.0.0.1:8000/ \u3092\u958b\u3044\u3066\u3001\u30b3\u30f3\u30bd\u30fc\u30eb\u306b\u3055\u3063\u304d\u3068\u540c\u3058js\u30b3\u30fc\u30c9\u3092\u6253\u3061\u8fbc\u3093\u3067\u304f\u3060\u3055\u3044\u3002\n\u5404\u30bf\u30d6\u3067\u300c[user] hello world\u300d\u306e\u30a2\u30e9\u30fc\u30c8\u304c\u8868\u793a\u3055\u308c\u308c\u3070OK\u3067\u3059\u3002\n\n### Running with Channels\n\n\u6b21\u306fChannel layer\u3092\u5207\u308a\u66ff\u3048\u3066\u307f\u307e\u3059\u3002\n\u3053\u308c\u307e\u3067\u306f`asgiref.inmemory.ChannelLayer`\u3092\u5229\u7528\u3057\u3066\u307e\u3057\u305f\u304c\u3001\u3053\u308c\u3067\u306f\u540c\u3058\u30d7\u30ed\u30bb\u30b9\u306e\u3046\u3061\u3067\u3057\u304b\u52d5\u4f5c\u3057\u307e\u305b\u3093\u3002\u672c\u756a\u74b0\u5883\u3067\u306f\u3001`asgi_redis`\u306e\u3088\u3046\u306a\u30d0\u30c3\u30af\u30a8\u30f3\u30c9\u3092\u5229\u7528\u3057\u307e\u3059\u3002\n\n```\n$ pip install asgi_redis\n```\n\n```setting.py\nCHANNEL_LAYERS = {\n    \"default\": {\n        \"BACKEND\": \"asgi_redis.RedisChannelLayer\",\n        \"CONFIG\": {\n            \"hosts\": [(\"localhost\", 6379)],\n        },\n        \"ROUTING\": \"myapp.routing.channel_routing\",\n    },\n}\n```\n\n```\n$ python manage.py runserver --noworker\n$ python manage.py runworker\n```\n\n\u65b0\u305f\u306b`runworker`\u30b3\u30de\u30f3\u30c9\u3092\u5b9f\u884c\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3057\u305f\u3002\n\n### Persisting Data\n\n\u3053\u308c\u307e\u3067\u898b\u3066\u304d\u305f`replay_channel`\u5c5e\u6027\u306f\u3001\u7e4b\u304c\u3063\u3066\u3044\u308bWebSocket\u306b\u5bfe\u3059\u308b\u30e6\u30cb\u30fc\u30af\u306a\u30dd\u30a4\u30f3\u30c8\u3067\u3059\u3002\u3053\u308c\u3067\u3001\u30e1\u30c3\u30bb\u30fc\u30b8\u304c\u8ab0\u304b\u3089\u306e\u3082\u306e\u304b\u8fbf\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3057\u305f\u3002\n\n\u672c\u756a\u74b0\u5883\u3067\u306fHTTP\u901a\u4fe1\u306b\u304a\u3051\u308bcookie\u306e\u3088\u3046\u306b\u3001`channel_session`\u3092\u7528\u3044\u3066\u30bb\u30c3\u30b7\u30e7\u30f3\u6c38\u7d9a\u5316\u3057\u307e\u3057\u3087\u3046\u3002\n\n```consumers.py\nfrom channels import Group\nfrom channels.sessions import channel_session\n\n\n# Connected to websocket.connect\n@channel_session\ndef ws_connect(message):\n    # Accept connection\n    message.reply_channel.send({\"accept\": True})\n    # Work out room name from path (ignore slashes)\n    room = message.content['path'].strip(\"/\")\n    # Save room in session and add us to the group\n    message.channel_session['room'] = room\n    Group(\"chat-%s\" % room).add(message.reply_channel)\n\n\n# Connected to websocket.receive\n@channel_session\ndef ws_message(message):\n    Group(\"chat-%s\" % message.channel_session['room']).send({\n        \"text\": message['text'],\n    })\n\n\n# Connected to websocket.disconnect\n@channel_session\ndef ws_disconnect(message):\n    Group(\"chat-%s\" % message.channel_session['room']).discard(message.reply_channel)\n```\n\n```routing.py\nfrom channels.routing import route\nfrom myapp.consumers import ws_connect, ws_message, ws_disconnect\n\nchannel_routing = [\n    route(\"websocket.connect\", ws_connect),\n    route(\"websocket.receive\", ws_message),\n    route(\"websocket.disconnect\", ws_disconnect),\n]\n```\n\n### Authentication\n\n\nChannels\u306f\u4ee5\u4e0b\u306e\uff12\u901a\u308a\u306e\u65b9\u6cd5\u3067\u3001\u30e6\u30fc\u30b6\u8a8d\u8a3c\u306b\u5fc5\u8981\u306aDjango\u30bb\u30c3\u30b7\u30e7\u30f3\u3092\u53d6\u5f97\u3067\u304d\u307e\u3059\u3002\n\n+ cookie\n+ Get\u30d1\u30e9\u30e1\u30fc\u30bf`session_key`\n\nDjango\u30bb\u30c3\u30b7\u30e7\u30f3\u3092\u7528\u3044\u305f\u8a8d\u8a3c\u306f\u30c7\u30b3\u30ec\u30fc\u30bf\u3092\u6307\u5b9a\u3057\u3066\u884c\u3044\u307e\u3059\u3002\n\n```consumers.py\nfrom channels import Channel, Group\nfrom channels.sessions import channel_session\nfrom channels.auth import http_session_user, channel_session_user, channel_session_user_from_http\n\n\n# Connected to websocket.connect\n@channel_session_user_from_http\ndef ws_add(message):\n    # Accept connection\n    message.reply_channel.send({\"accept\": True})\n    # Add them to the right group\n    Group(\"chat-%s\" % message.user.username[0]).add(message.reply_channel)\n\n\n# Connected to websocket.receive\n@channel_session_user\ndef ws_message(message):\n    Group(\"chat-%s\" % message.user.username[0]).send({\n        \"text\": message['text'],\n    })\n\n\n# Connected to websocket.disconnect\n@channel_session_user\ndef ws_disconnect(message):\n    Group(\"chat-%s\" % message.user.username[0]).discard(message.reply_channel)\n```\n\n### Routing\n\nDjango\u306e`urls.py`\u306e\u3088\u3046\u306b\u3001\u6b63\u898f\u8868\u73fe\u306a\u3069\u3092\u7528\u3044\u3066\u67d4\u8edf\u306b`routing.py`\u3092\u8a2d\u5b9a\u3067\u304d\u307e\u3059\u3002\n\n```routing.py\nhttp_routing = [\n    route(\"http.request\", poll_consumer, path=r\"^/poll/$\", method=r\"^POST$\"),\n]\n\nchat_routing = [\n    route(\"websocket.connect\", chat_connect, path=r\"^/(?P<room>[a-zA-Z0-9_]+)/$\"),\n    route(\"websocket.disconnect\", chat_disconnect),\n]\n\nrouting = [\n    # You can use a string import path as the first argument as well.\n    include(chat_routing, path=r\"^/chat\"),\n    include(http_routing),\n]\n```\n\n### Models\n\nDjango\u306eORM\u3092\u7528\u3044\u3066\u3001\u30e1\u30c3\u30bb\u30fc\u30b8\u306e\u6c38\u7d9a\u5316\u3092\u7c21\u5358\u306b\u7d44\u307f\u8fbc\u3081\u307e\u3059\u3002\n\n```consumers.py\nfrom channels import Channel\nfrom channels.sessions import channel_session\nfrom .models import ChatMessage\n\n\n# Connected to chat-messages\ndef msg_consumer(message):\n    # Save to model\n    room = message.content['room']\n    ChatMessage.objects.create(\n        room=room,\n        message=message.content['message'],\n    )\n    # Broadcast to listening sockets\n    Group(\"chat-%s\" % room).send({\n        \"text\": message.content['message'],\n    })\n\n\n# Connected to websocket.connect\n@channel_session\ndef ws_connect(message):\n    # Work out room name from path (ignore slashes)\n    room = message.content['path'].strip(\"/\")\n    # Save room in session and add us to the group\n    message.channel_session['room'] = room\n    Group(\"chat-%s\" % room).add(message.reply_channel)\n\n\n# Connected to websocket.receive\n@channel_session\ndef ws_message(message):\n    # Stick the message onto the processing queue\n    Channel(\"chat-messages\").send({\n        \"room\": message.channel_session['room'],\n        \"message\": message['text'],\n    })\n\n\n# Connected to websocket.disconnect\n@channel_session\ndef ws_disconnect(message):\n    Group(\"chat-%s\" % message.channel_session['room']).discard(message.reply_channel)\n```\n\n### Enforcing Ordering\n\n`@enforce_ordering(slight=True)`\u30c7\u30b3\u30ec\u30fc\u30bf\u3092\u4e0e\u3048\u308b\u3053\u3068\u3067\u3001\u30ad\u30e5\u30fc\u306b\u7a81\u3063\u8fbc\u307e\u308c\u305f\u9806\u756a\u3067\u306f\u306a\u304f`websocket.connect`\u304c\u6700\u521d\u306b\u884c\u308f\u308c\u305f\u3082\u306e\u304c\u307e\u305a\u5b9f\u884c\u3055\u308c\u308b\u3088\u3046\u306b\u5909\u66f4\u3067\u304d\u307e\u3059\u3002\n\n```consumers.py\nfrom channels import Channel, Group\nfrom channels.sessions import channel_session, enforce_ordering\nfrom channels.auth import http_session_user, channel_session_user, channel_session_user_from_http\n\n\n# Connected to websocket.connect\n@enforce_ordering(slight=True)\n@channel_session_user_from_http\ndef ws_add(message):\n    # Add them to the right group\n    Group(\"chat-%s\" % message.user.username[0]).add(message.reply_channel)\n\n\n# Connected to websocket.receive\n@enforce_ordering(slight=True)\n@channel_session_user\ndef ws_message(message):\n    Group(\"chat-%s\" % message.user.username[0]).send({\n        \"text\": message['text'],\n    })\n\n\n# Connected to websocket.disconnect\n@enforce_ordering(slight=True)\n@channel_session_user\ndef ws_disconnect(message):\n    Group(\"chat-%s\" % message.user.username[0]).discard(message.reply_channel\n```\n\n## \u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb\n\n\u3053\u3053\u3067\u898b\u3066\u304d\u305f\u3088\u3046\u306a\u30c1\u30e3\u30c3\u30c8\u30a2\u30d7\u30ea\u306e\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb\u304cHeroku\u3067\u7528\u610f\u3055\u308c\u3066\u3044\u307e\u3059\u3002\n[Finally, Real-Time Django Is Here: Get Started with Django Channels](https://blog.heroku.com/in_deep_with_django_channels_the_future_of_real_time_apps_in_django)\n\n\u5b9f\u969b\u306bHeroku\u306b\u30c7\u30d7\u30ed\u30a4\u3059\u308b\u307e\u3067\u3084\u3063\u3066\u307f\u308b\u3068\u3001\u3088\u308a\u611f\u899a\u304c\u63b4\u3081\u308b\u3068\u601d\u3044\u307e\u3059\u3002\n\n[Django Channels Example](https://django-channels-example.herokuapp.com/)\n\n\n## \u53c2\u8003\u3057\u305f\u3082\u306e\n\n+ [Django \u3067 WebSocket \u306b\u3088\u308b\u30b5\u30fc\u30d0 Push](http://qiita.com/voluntas/items/f286f7671f744860293b)\n+ [Finally, Real-Time Django Is Here: Get Started with Django Channels](https://blog.heroku.com/in_deep_with_django_channels_the_future_of_real_time_apps_in_django)\n\n\n## \u304a\u308f\u308a\u306b\n\n\u300cDjango \u3067 WebSocket \u306b\u3088\u308b\u30b5\u30fc\u30d0 Push\u300d\u3067voluntas\u3055\u3093\u304c\u66f8\u3044\u3066\u3042\u308b\u901a\u308a\u3001\u30d1\u30d5\u30a9\u30fc\u30de\u30f3\u30b9\u3092\u6c42\u3081\u308b\u306e\u3067\u3042\u308c\u3070\u4ed6\u306e\u8a00\u8a9e\u3067\u884c\u3063\u305f\u307b\u3046\u304c\u826f\u3044\u3067\u3059\u3002\n\n[SwampDragon](https://github.com/jonashagstedt/swampdragon)\u3084[Tornado](http://www.tornadoweb.org/en/stable/)\u306a\u3069\u3092\u5225\u9014\u7acb\u3061\u4e0a\u3052\u308b\u5fc5\u8981\u304c\u306a\u304f\u3001Django\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u306b\u7c21\u5358\u306b\u7d44\u307f\u8fbc\u3080\u3053\u3068\u304c\u3067\u304d\u308b\u306e\u304c\u6700\u5927\u306e\u9b45\u529b\u3067\u3059\u3002\n\n\u3053\u306eChannels\u306f\u6765\u5e74\u306e12\u6708\u306b\u30ea\u30ea\u30fc\u30b9\u4e88\u5b9a\u306eDjango2.0\u306b\u53d6\u308a\u8fbc\u307e\u308c\u308b\u3053\u3068\u3082\u691c\u8a0e\u3055\u308c\u3066\u3044\u307e\u3059\u3002\u7686\u3055\u3093\u3082\u305c\u3072\u4f7f\u3063\u3066\u307f\u3066\u3001Channels\u3092\u76db\u308a\u4e0a\u3052\u3066\u3044\u304d\u307e\u3057\u3087\u3046\uff01\n"}