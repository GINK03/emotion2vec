{"tags": ["RaspberryPi", "Blynk", "IoT", "I2C"], "context": "\n\n\u6982\u8981\n\u6bce\u56de\u3005\u3005\u6982\u8981\u3068\u304b\u66f8\u3044\u3066\u308b\u3051\u3069\u610f\u5473\u306a\u3044\u3053\u3068\u3070\u3063\u304b\u308a\u3067\u3001\u4eca\u56de\u306fPhpstorm\u8cb7\u3063\u3061\u3083\u3063\u305f\u3050\u3089\u3044\u3057\u304b\u601d\u3044\u3064\u304b\u306a\u304b\u3063\u305f\u3093\u3067\u3059\u304c\u30fb\u30fb\u30fb\u3002\n\u305b\u3063\u304b\u304fRaspberry Pi\u304c\u3042\u308b\u306e\u3067\u3001IoT\u3089\u3057\u304f\u6d41\u884c\u308a\u306eBlynk\u3067\u904a\u3073\u307e\u3057\u305f\u3002\n\n\u3055\u3063\u305d\u304f\u5c0e\u5165 -> L\u30c1\u30ab\n\u3068\u3044\u3046\u3053\u3068\u3092\u66f8\u3053\u3046\u3068\u601d\u3044\u307e\u3057\u305f\u304c\u3001\u30b9\u30de\u30db\u306e\u30b9\u30af\u30b7\u30e7\u64ae\u3063\u305f\u308a\u5927\u5909\u306a\u306e\u3067\u3001L\u30c1\u30ab\u306fQiita\u3067\u516c\u958b\u6e08\u307f\u306e\u3044\u3044\u8a18\u4e8b\u304c\u3042\u3063\u305f\u306e\u3067\u305d\u3061\u3089\u3092\u53c2\u8003\u306b\u3057\u305f\u307b\u3046\u304c\u3044\u3044\u3068\u601d\u3044\u307e\u3059\u30fb\u30fb\u30fb\u3002\nQiita: [*Raspberry Pi*] Blynk\u3092\u4f7f\u3063\u3066\u30b9\u30de\u30db\u304b\u3089LED\u30c1\u30ab\u30c1\u30ab)\n\u306a\u306e\u3067\u3001\u3053\u3053\u3067\u306fRaspberry Pi\u3068I2C\u3067\u6c17\u6e29\u3092\u30b0\u30e9\u30d5\u3068\u304b\u3067\u8868\u793a\u3057\u305f\u3044\u3068\u601d\u3044\u307e\u3059\u3002\n\nI2C\u3067\u6c17\u6e29\u3092\u53d6\u5f97\u3057\u3066Blynk\u3067\u8868\u793a\n\u3068\u3001\u66f8\u3044\u3066\u304a\u304d\u306a\u304c\u3089\u307e\u305a\u306fLabel\u306b\u30c6\u30ad\u30b9\u30c8\u8868\u793a\u3057\u3066\u307f\u307e\u3057\u305f\u3002\n\u30b0\u30b0\u308b\u3068\u3069\u308c\u3082\u3053\u308c\u3082\u30de\u30a4\u30b3\u30f3\u4f7f\u3063\u3066\u305f\u308a\u3057\u3066Raspberry Pi\u306e\u3084\u308a\u65b9\u304c\u308f\u304b\u3089\u306a\u304b\u3063\u305f\u306e\u3067\u3001\u4ed5\u65b9\u306a\u304fBlank\u306e\u30ea\u30d5\u30a1\u30ec\u30f3\u30b9\u898b\u307e\u3057\u305f\u3088\u30fb\u30fb\u30fb\u3002\nBlynk Docs\n\u4e0a\u8a18\u306eL\u30c1\u30ab\u3092\u884c\u3063\u305f\u4eba\u306f\u3053\u3093\u306a\u611f\u3058\u3067Raspberry Pi\u3067Blynk Server\u304c\u7acb\u3061\u4e0a\u304c\u3063\u3066\u3044\u308b\u3068\u601d\u3044\u307e\u3059\u3002\n\n\u3053\u308c\u3067\u30b9\u30de\u30db\u306e\u30dc\u30bf\u30f3\u3092\u62bc\u3059\u3068L\u304c\u30c1\u30ab\u30c1\u30ab\u3057\u305f\u304b\u3068\u601d\u3044\u307e\u3059\u3002\n\u6b21\u306f\u30b9\u30de\u30db\u5074\u306e\u30a6\u30a3\u30b8\u30a7\u30c3\u30c8\u306b\u4f55\u304b\u30c7\u30fc\u30bf\u3092\u6e21\u3057\u307e\u3059\u3002\n\nVirtual Pins\n\u304a\u904a\u3073\u3067\u30b9\u30de\u30db\u5074\u304b\u3089\u30c7\u30fc\u30bf\u3092\u30ea\u30af\u30a8\u30b9\u30c8\u3057\u305f\u65e5\u6642\u3067\u3082\u8868\u793a\u3057\u3066\u307f\u307e\u3059\u3002\nBlynk Docs #Virtual Pins\u306b\u3088\u308b\u3068\u3001Virtual Pin\u3068\u3044\u3046\u3082\u306e\u306b\u30c6\u30ad\u30b9\u30c8\u3067\u3082\u98df\u3079\u3055\u305b\u308b\u3068\u3001\u305d\u306e\u901a\u308a\u306b\u9001\u3089\u308c\u308b\u3088\u3046\u3067\u3059\u3002\nBlynk.virtualWrite(pin, \"abc\");\nBlynk.virtualWrite(pin, 123);\nBlynk.virtualWrite(pin, 12.34);\nBlynk.virtualWrite(pin, \"hello\", 123, 12.34);\n\n\u3053\u308c\u3092\u3069\u3053\u306b\u66f8\u304f\u304b\u3068\u3044\u3046\u3068\u3001Blynk\u306egit\u306e\u30af\u30ed\u30fc\u30f3\u3092\u4f5c\u3063\u305f\u5834\u6240\u306b\u3042\u308bmain.cpp\u306b\u66f8\u304d\u307e\u3059\u3002\n\u8981\u306f\u30ab\u30b9\u30bf\u30de\u30a4\u30ba\u3059\u308b\u306a\u3089\u3001make\u3057\u76f4\u3057\u3066\u304f\u3060\u3055\u3044\u3068\u306e\u3053\u3068\u3002\n\nmain.cpp\n/**\n * @file       main.cpp\n * @author     Volodymyr Shymanskyy\n * @license    This project is released under the MIT License (MIT)\n * @copyright  Copyright (c) 2015 Volodymyr Shymanskyy\n * @date       Mar 2015\n * @brief\n */\n\n/* <--------------------------------------------------------------------- \u3053\u3053\u304b\u3089 */\n#include <stdio.h>\n#include <string.h>\n#include <time.h>\n/* <--------------------------------------------------------------------- \u3053\u3053\u307e\u3067\uff08\u591a\u5206\u3044\u3089\u306a\u3044\u30fb\u30fb\u30fb\uff09 */\n\n//#define BLYNK_DEBUG\n#define BLYNK_PRINT stdout\n#ifdef RASPBERRY\n #include <BlynkApiWiringPi.h>\n#else\n #include <BlynkApiLinux.h>\n#endif\n#include <BlynkSocket.h>\n#include <BlynkOptionsParser.h>\n\nstatic BlynkTransportSocket _blynkTransport;\nBlynkSocket Blynk(_blynkTransport);\n\n#include <BlynkWidgets.h>\n\nBLYNK_READ(V0) /* <--------------------------------------------------------------------- \u3053\u3053\u304b\u3089 */\n{\n  FILE *fp;\n  char str[256] = {0};\n\n  if ((fp = fopen(\"/tmp/blynktest.log\", \"a+\")) == NULL) { /* \u9069\u5f53\u306a\u3068\u3053\u308d\u306b\u30ed\u30b0\u30d5\u30a1\u30a4\u30eb\u4f5c\u308b\u611f\u3058 */\n    printf(\"file open error!!\\n\");\n    exit(EXIT_FAILURE);\n  }\n\n  /*\n  while (fgets(str, 256, fp) != NULL) {\n    printf(\"%s\", str);\n  }\n  */\n\n  time_t now;\n\n  now = time(NULL);\n  fprintf(fp, \"%s\", ctime(&now)); /* \u30ed\u30b0\u30d5\u30a1\u30a4\u30eb\u306e\u30b1\u30c4\u306b\u4eca\u306e\u65e5\u6642\u3092\u5165\u308c\u308b */\n  fclose(fp);\n\n  BLYNK_LOG(\"%s\", ctime(&now)); /* Blynk\u5f85\u53d7\u5074\u306b\u30ed\u30b0\u3092\u51fa\u529b */\n\n  Blynk.virtualWrite(V0, ctime(&now)); /* \u4eee\u60f3\u306e\u30d4\u30f3V0\u306b\u4eca\u306e\u65e5\u6642\u306e\u6587\u5b57\u5217\u3092\u4ee3\u5165 */\n} /* <--------------------------------------------------------------------- \u3053\u3053\u307e\u3067 */\n\nBLYNK_WRITE(V1)\n{\n  printf(\"Got a value: %s\\n\", param[0].asStr());\n}\n\nint main(int argc, char* argv[])\n{\n    const char *auth, *serv;\n    uint16_t port;\n    parse_options(argc, argv, auth, serv, port);\n\n    Blynk.begin(auth, serv, port);\n\n    while(true) {\n        Blynk.run();\n    }\n\n    return 0;\n}\n\n\n\u3053\u308c\u3092make\u3057\u3066\u3001./blynk --token=***\u3092\u884c\u3046\u3068\u3001L\u30c1\u30ab\u540c\u69d8\u306bBlynk Server\u304c\u8d77\u52d5\u3057\u3066\u5f85\u53d7\u72b6\u614b\u306b\u306a\u308a\u307e\u3059\u3002\n\u30b9\u30de\u30db\u306e\u65b9\u306fLabel\u3092\u4f5c\u3063\u3066\u3001Input\u3092virtual V0\u306b\u3001Label\u3092/pin/\u306b\u3057\u307e\u3059\u3002\n\n\u3042\u3068\u306f\u30b9\u30de\u30db\u5074\u306eBlynk\u53f3\u4e0a\u306e\u518d\u751f\u30dc\u30bf\u30f3\u3092\u62bc\u3059\u3068\u3001\u30b9\u30de\u30db\u5074\u30fbRaspberry Pi\u306eBlynk\u5f85\u53d7\u5074\u30fb/tmp/blynktest.log\u306b\u4eca\u306e\u65e5\u6642\u304c\u66f8\u304d\u8fbc\u307e\u308c\u3066\u3044\u304d\u307e\u3059\u3002\n\n\n\n\u3044\u3056I2C\u3078\n\u3082\u3046\u8a00\u3046\u3053\u3068\u306a\u3044\u3067\u3059\u306d\uff01\nBLYNK_READ(V0){}\u3088\u3046\u306f\u3053\u3053\u306e\u90e8\u5206\u306bI2C\u306e\u30ed\u30b8\u30c3\u30af\u66f8\u3051\u3070\u52d5\u304d\u307e\u3059\u3002\n\uff08\u4e0a\u306e\u30b9\u30de\u30db\u5074\u306e\u753b\u50cf\u3067\u3082\u30b0\u30e9\u30d5\u3067\u6c17\u6e29\u51fa\u3057\u3066\u308b\u3063\u307d\u3044\u3068\u3053\u308d\u3042\u308a\u307e\u3059\u304c\u3001\u307e\u3055\u306b\u305d\u308c\u304cI2C\u4f7f\u3063\u305f\u3084\u3064\u3067\u3059\uff09\n\nmain.cpp\n/**\n * @file       main.cpp\n * @author     Volodymyr Shymanskyy\n * @license    This project is released under the MIT License (MIT)\n * @copyright  Copyright (c) 2015 Volodymyr Shymanskyy\n * @date       Mar 2015\n * @brief\n */\n\n#include <stdio.h>\n#include <stdlib.h>\n#include <time.h>\n#include <unistd.h>\n\n#include <linux/i2c-dev.h> // I2C\u7528\u30a4\u30f3\u30af\u30eb\u30fc\u30c9\n#include <fcntl.h>\n#include <sys/ioctl.h>\n\n\n//#define BLYNK_DEBUG\n#define BLYNK_PRINT stdout\n#ifdef RASPBERRY\n #include <BlynkApiWiringPi.h>\n#else\n #include <BlynkApiLinux.h>\n#endif\n#include <BlynkSocket.h>\n#include <BlynkOptionsParser.h>\n\nstatic BlynkTransportSocket _blynkTransport;\nBlynkSocket Blynk(_blynkTransport);\n\n#include <BlynkWidgets.h>\n\nfloat tempval();\n\nBLYNK_READ(V0)\n{\n  double num = 0.00;\n  char str[128]={0};\n\n  num = tempval();\n  sprintf(str, \"%.2f\", tempval());\n  Blynk.virtualWrite(V0, str);\n}\n\nint main(int argc, char* argv[])\n{\n    const char *auth, *serv;\n    uint16_t port;\n    parse_options(argc, argv, auth, serv, port);\n\n    Blynk.begin(auth, serv, port);\n\n    while(true) {\n        Blynk.run();\n    }\n\n    return 0;\n}\n\nfloat tempval(){\n    char *i2cFileName = \"/dev/i2c-1\";\n    const unsigned char i2cAddress = 0x18;\n    const __u8 t_reg = 0x05;\n    int i2c_fd;\n\n    if((i2c_fd = open(i2cFileName,O_RDWR)) < 0){\n        fprintf(stderr,\"Faild to open i2c port\u00a5n\");\n        return 1;\n    }\n    if (ioctl(i2c_fd, I2C_SLAVE,i2cAddress) < 0) {\n        fprintf(stderr,\"Unable to get bus access to talk to slave\u00a5n\");\n        return 1;\n    }\n    __s32 res = i2c_smbus_read_word_data(i2c_fd,t_reg);\n    if(res < 0){\n        fprintf(stderr,\"Error i2c_smbus_read_word_data()\u00a5n\");\n        return 1;\n    }\n    float temp;\n    {\n        __u16 t = res << 8 | res >> 8;//byte swap\n        temp = t & 0x0FFF;      //mask\n        temp /= 16;\n        if(t & 0x1000){                 //sign or unsigned\n            temp -= 256;\n        }\n        }\n\n    time_t t;\n    time(&t);\n    struct tm *m;\n    m = localtime(&t);\n\n    // printf(\"%d/%d/%d-%d:%d:%d,%.2f\\n\",m->tm_year+1900,m->tm_mon+1,m->tm_mday,m->tm_hour,m->tm_                                                                                                                                                                                                                            min,m->tm_sec,temp);\n    // printf(\"%.2f\", temp);\n    return temp;\n}\n\n\n\u3061\u3087\u3063\u3068\u7720\u3044\u3067\u3059\u3002\n\u660e\u65e5\u3082\u51fa\u52e4\u3057\u306a\u3044\u3068\u3044\u3051\u306a\u3044\u306e\u3067\u3001\u3068\u308a\u3042\u3048\u305a\u3053\u308c\u3067\u3042\u3052\u307e\u3059\u3002\n\u3068\u3044\u3046\u304b\u3001\u30b9\u30de\u30db\u5074\u306eBlynk\u306f\u76f4\u611f\u64cd\u4f5c\u4f59\u88d5\u306a\u306e\u3067\u3001\u8aac\u660e\u3059\u308b\u3053\u3068\u3042\u308a\u307e\u305b\u3093\uff01\n\u30b0\u30e9\u30d5\u4f5c\u3063\u3066\u307f\u308c\u3070\u7d76\u5bfe\u308f\u304b\u308a\u307e\u3059\uff01\n\u3059\u3054\u3044\u306d\uff01\n\u554f\u984c\u306fC\u8a00\u8a9e\u304c\u4e45\u3005\u3059\u304e\u3066\u3046\u3093\u3053\u30fb\u30fb\u30fb\n#\u6982\u8981\n\n\u6bce\u56de\u3005\u3005\u6982\u8981\u3068\u304b\u66f8\u3044\u3066\u308b\u3051\u3069\u610f\u5473\u306a\u3044\u3053\u3068\u3070\u3063\u304b\u308a\u3067\u3001\u4eca\u56de\u306fPhpstorm\u8cb7\u3063\u3061\u3083\u3063\u305f\u3050\u3089\u3044\u3057\u304b\u601d\u3044\u3064\u304b\u306a\u304b\u3063\u305f\u3093\u3067\u3059\u304c\u30fb\u30fb\u30fb\u3002\n\n\u305b\u3063\u304b\u304fRaspberry Pi\u304c\u3042\u308b\u306e\u3067\u3001IoT\u3089\u3057\u304f\u6d41\u884c\u308a\u306e[Blynk](http://www.blynk.cc/)\u3067\u904a\u3073\u307e\u3057\u305f\u3002\n\n#\u3055\u3063\u305d\u304f\u5c0e\u5165 -> L\u30c1\u30ab\n\n\u3068\u3044\u3046\u3053\u3068\u3092\u66f8\u3053\u3046\u3068\u601d\u3044\u307e\u3057\u305f\u304c\u3001\u30b9\u30de\u30db\u306e\u30b9\u30af\u30b7\u30e7\u64ae\u3063\u305f\u308a\u5927\u5909\u306a\u306e\u3067\u3001L\u30c1\u30ab\u306fQiita\u3067\u516c\u958b\u6e08\u307f\u306e\u3044\u3044\u8a18\u4e8b\u304c\u3042\u3063\u305f\u306e\u3067\u305d\u3061\u3089\u3092\u53c2\u8003\u306b\u3057\u305f\u307b\u3046\u304c\u3044\u3044\u3068\u601d\u3044\u307e\u3059\u30fb\u30fb\u30fb\u3002\n\n[Qiita: \\[\\*Raspberry Pi\\*\\] Blynk\u3092\u4f7f\u3063\u3066\u30b9\u30de\u30db\u304b\u3089LED\u30c1\u30ab\u30c1\u30ab)](http://qiita.com/cigalecigales/items/e65ea7192c3e381657ed)\n\n\u306a\u306e\u3067\u3001\u3053\u3053\u3067\u306fRaspberry Pi\u3068I2C\u3067\u6c17\u6e29\u3092\u30b0\u30e9\u30d5\u3068\u304b\u3067\u8868\u793a\u3057\u305f\u3044\u3068\u601d\u3044\u307e\u3059\u3002\n\n#I2C\u3067\u6c17\u6e29\u3092\u53d6\u5f97\u3057\u3066Blynk\u3067\u8868\u793a\n\n\u3068\u3001\u66f8\u3044\u3066\u304a\u304d\u306a\u304c\u3089\u307e\u305a\u306fLabel\u306b\u30c6\u30ad\u30b9\u30c8\u8868\u793a\u3057\u3066\u307f\u307e\u3057\u305f\u3002\n\n\u30b0\u30b0\u308b\u3068\u3069\u308c\u3082\u3053\u308c\u3082\u30de\u30a4\u30b3\u30f3\u4f7f\u3063\u3066\u305f\u308a\u3057\u3066Raspberry Pi\u306e\u3084\u308a\u65b9\u304c\u308f\u304b\u3089\u306a\u304b\u3063\u305f\u306e\u3067\u3001\u4ed5\u65b9\u306a\u304fBlank\u306e\u30ea\u30d5\u30a1\u30ec\u30f3\u30b9\u898b\u307e\u3057\u305f\u3088\u30fb\u30fb\u30fb\u3002\n\n[Blynk Docs](http://docs.blynk.cc/)\n\n\u4e0a\u8a18\u306eL\u30c1\u30ab\u3092\u884c\u3063\u305f\u4eba\u306f\u3053\u3093\u306a\u611f\u3058\u3067Raspberry Pi\u3067Blynk Server\u304c\u7acb\u3061\u4e0a\u304c\u3063\u3066\u3044\u308b\u3068\u601d\u3044\u307e\u3059\u3002\n![a.PNG](https://qiita-image-store.s3.amazonaws.com/0/32577/c51d9019-ec03-08ae-5e4c-0a88e6b01f82.png)\n\n\u3053\u308c\u3067\u30b9\u30de\u30db\u306e\u30dc\u30bf\u30f3\u3092\u62bc\u3059\u3068L\u304c\u30c1\u30ab\u30c1\u30ab\u3057\u305f\u304b\u3068\u601d\u3044\u307e\u3059\u3002\n\n\u6b21\u306f\u30b9\u30de\u30db\u5074\u306e\u30a6\u30a3\u30b8\u30a7\u30c3\u30c8\u306b\u4f55\u304b\u30c7\u30fc\u30bf\u3092\u6e21\u3057\u307e\u3059\u3002\n\n##Virtual Pins\n\n\u304a\u904a\u3073\u3067\u30b9\u30de\u30db\u5074\u304b\u3089\u30c7\u30fc\u30bf\u3092\u30ea\u30af\u30a8\u30b9\u30c8\u3057\u305f\u65e5\u6642\u3067\u3082\u8868\u793a\u3057\u3066\u307f\u307e\u3059\u3002\n\n[Blynk Docs \\#Virtual Pins](http://docs.blynk.cc/#blynk-main-operations-virtual-pins)\u306b\u3088\u308b\u3068\u3001Virtual Pin\u3068\u3044\u3046\u3082\u306e\u306b\u30c6\u30ad\u30b9\u30c8\u3067\u3082\u98df\u3079\u3055\u305b\u308b\u3068\u3001\u305d\u306e\u901a\u308a\u306b\u9001\u3089\u308c\u308b\u3088\u3046\u3067\u3059\u3002\n\n```c\nBlynk.virtualWrite(pin, \"abc\");\nBlynk.virtualWrite(pin, 123);\nBlynk.virtualWrite(pin, 12.34);\nBlynk.virtualWrite(pin, \"hello\", 123, 12.34);\n```\n\n\u3053\u308c\u3092\u3069\u3053\u306b\u66f8\u304f\u304b\u3068\u3044\u3046\u3068\u3001Blynk\u306egit\u306e\u30af\u30ed\u30fc\u30f3\u3092\u4f5c\u3063\u305f\u5834\u6240\u306b\u3042\u308b[main.cpp](https://github.com/blynkkk/blynk-library/blob/master/linux/main.cpp)\u306b\u66f8\u304d\u307e\u3059\u3002\n\u8981\u306f\u30ab\u30b9\u30bf\u30de\u30a4\u30ba\u3059\u308b\u306a\u3089\u3001make\u3057\u76f4\u3057\u3066\u304f\u3060\u3055\u3044\u3068\u306e\u3053\u3068\u3002\n\n```c:main.cpp\n/**\n * @file       main.cpp\n * @author     Volodymyr Shymanskyy\n * @license    This project is released under the MIT License (MIT)\n * @copyright  Copyright (c) 2015 Volodymyr Shymanskyy\n * @date       Mar 2015\n * @brief\n */\n\n/* <--------------------------------------------------------------------- \u3053\u3053\u304b\u3089 */\n#include <stdio.h>\n#include <string.h>\n#include <time.h>\n/* <--------------------------------------------------------------------- \u3053\u3053\u307e\u3067\uff08\u591a\u5206\u3044\u3089\u306a\u3044\u30fb\u30fb\u30fb\uff09 */\n\n//#define BLYNK_DEBUG\n#define BLYNK_PRINT stdout\n#ifdef RASPBERRY\n #include <BlynkApiWiringPi.h>\n#else\n #include <BlynkApiLinux.h>\n#endif\n#include <BlynkSocket.h>\n#include <BlynkOptionsParser.h>\n\nstatic BlynkTransportSocket _blynkTransport;\nBlynkSocket Blynk(_blynkTransport);\n\n#include <BlynkWidgets.h>\n\nBLYNK_READ(V0) /* <--------------------------------------------------------------------- \u3053\u3053\u304b\u3089 */\n{\n  FILE *fp;\n  char str[256] = {0};\n\n  if ((fp = fopen(\"/tmp/blynktest.log\", \"a+\")) == NULL) { /* \u9069\u5f53\u306a\u3068\u3053\u308d\u306b\u30ed\u30b0\u30d5\u30a1\u30a4\u30eb\u4f5c\u308b\u611f\u3058 */\n    printf(\"file open error!!\\n\");\n    exit(EXIT_FAILURE);\n  }\n\n  /*\n  while (fgets(str, 256, fp) != NULL) {\n    printf(\"%s\", str);\n  }\n  */\n\n  time_t now;\n\n  now = time(NULL);\n  fprintf(fp, \"%s\", ctime(&now)); /* \u30ed\u30b0\u30d5\u30a1\u30a4\u30eb\u306e\u30b1\u30c4\u306b\u4eca\u306e\u65e5\u6642\u3092\u5165\u308c\u308b */\n  fclose(fp);\n\n  BLYNK_LOG(\"%s\", ctime(&now)); /* Blynk\u5f85\u53d7\u5074\u306b\u30ed\u30b0\u3092\u51fa\u529b */\n\n  Blynk.virtualWrite(V0, ctime(&now)); /* \u4eee\u60f3\u306e\u30d4\u30f3V0\u306b\u4eca\u306e\u65e5\u6642\u306e\u6587\u5b57\u5217\u3092\u4ee3\u5165 */\n} /* <--------------------------------------------------------------------- \u3053\u3053\u307e\u3067 */\n\nBLYNK_WRITE(V1)\n{\n  printf(\"Got a value: %s\\n\", param[0].asStr());\n}\n\nint main(int argc, char* argv[])\n{\n    const char *auth, *serv;\n    uint16_t port;\n    parse_options(argc, argv, auth, serv, port);\n\n    Blynk.begin(auth, serv, port);\n\n    while(true) {\n        Blynk.run();\n    }\n\n    return 0;\n}\n```\n\n\u3053\u308c\u3092make\u3057\u3066\u3001`./blynk --token=***`\u3092\u884c\u3046\u3068\u3001L\u30c1\u30ab\u540c\u69d8\u306bBlynk Server\u304c\u8d77\u52d5\u3057\u3066\u5f85\u53d7\u72b6\u614b\u306b\u306a\u308a\u307e\u3059\u3002\n\n\u30b9\u30de\u30db\u306e\u65b9\u306fLabel\u3092\u4f5c\u3063\u3066\u3001Input\u3092virtual V0\u306b\u3001Label\u3092`/pin/`\u306b\u3057\u307e\u3059\u3002\n![s_Screenshot_2016-11-30-00-46-31.png](https://qiita-image-store.s3.amazonaws.com/0/32577/278dfc3f-1da4-841a-416f-0635b67826f3.png)\n\n\u3042\u3068\u306f\u30b9\u30de\u30db\u5074\u306eBlynk\u53f3\u4e0a\u306e\u518d\u751f\u30dc\u30bf\u30f3\u3092\u62bc\u3059\u3068\u3001\u30b9\u30de\u30db\u5074\u30fbRaspberry Pi\u306eBlynk\u5f85\u53d7\u5074\u30fb/tmp/blynktest.log\u306b\u4eca\u306e\u65e5\u6642\u304c\u66f8\u304d\u8fbc\u307e\u308c\u3066\u3044\u304d\u307e\u3059\u3002\n![b.PNG](https://qiita-image-store.s3.amazonaws.com/0/32577/b6be404e-f1e0-0240-36fc-ce81fb448be0.png)\n\n![s_Screenshot_2016-11-30-00-34-17_Ink_LI.jpg](https://qiita-image-store.s3.amazonaws.com/0/32577/9f66dd43-9d23-3b2b-0255-445196ea5d19.jpeg)\n\n##\u3044\u3056I2C\u3078\n\n\u3082\u3046\u8a00\u3046\u3053\u3068\u306a\u3044\u3067\u3059\u306d\uff01\n`BLYNK_READ(V0){}`\u3088\u3046\u306f\u3053\u3053\u306e\u90e8\u5206\u306bI2C\u306e\u30ed\u30b8\u30c3\u30af\u66f8\u3051\u3070\u52d5\u304d\u307e\u3059\u3002\n\uff08\u4e0a\u306e\u30b9\u30de\u30db\u5074\u306e\u753b\u50cf\u3067\u3082\u30b0\u30e9\u30d5\u3067\u6c17\u6e29\u51fa\u3057\u3066\u308b\u3063\u307d\u3044\u3068\u3053\u308d\u3042\u308a\u307e\u3059\u304c\u3001\u307e\u3055\u306b\u305d\u308c\u304cI2C\u4f7f\u3063\u305f\u3084\u3064\u3067\u3059\uff09\n\n```c:main.cpp\n/**\n * @file       main.cpp\n * @author     Volodymyr Shymanskyy\n * @license    This project is released under the MIT License (MIT)\n * @copyright  Copyright (c) 2015 Volodymyr Shymanskyy\n * @date       Mar 2015\n * @brief\n */\n\n#include <stdio.h>\n#include <stdlib.h>\n#include <time.h>\n#include <unistd.h>\n\n#include <linux/i2c-dev.h> // I2C\u7528\u30a4\u30f3\u30af\u30eb\u30fc\u30c9\n#include <fcntl.h>\n#include <sys/ioctl.h>\n\n\n//#define BLYNK_DEBUG\n#define BLYNK_PRINT stdout\n#ifdef RASPBERRY\n #include <BlynkApiWiringPi.h>\n#else\n #include <BlynkApiLinux.h>\n#endif\n#include <BlynkSocket.h>\n#include <BlynkOptionsParser.h>\n\nstatic BlynkTransportSocket _blynkTransport;\nBlynkSocket Blynk(_blynkTransport);\n\n#include <BlynkWidgets.h>\n\nfloat tempval();\n\nBLYNK_READ(V0)\n{\n  double num = 0.00;\n  char str[128]={0};\n\n  num = tempval();\n  sprintf(str, \"%.2f\", tempval());\n  Blynk.virtualWrite(V0, str);\n}\n\nint main(int argc, char* argv[])\n{\n    const char *auth, *serv;\n    uint16_t port;\n    parse_options(argc, argv, auth, serv, port);\n\n    Blynk.begin(auth, serv, port);\n\n    while(true) {\n        Blynk.run();\n    }\n\n    return 0;\n}\n\nfloat tempval(){\n    char *i2cFileName = \"/dev/i2c-1\";\n    const unsigned char i2cAddress = 0x18;\n    const __u8 t_reg = 0x05;\n    int i2c_fd;\n\n    if((i2c_fd = open(i2cFileName,O_RDWR)) < 0){\n        fprintf(stderr,\"Faild to open i2c port\u00a5n\");\n        return 1;\n    }\n    if (ioctl(i2c_fd, I2C_SLAVE,i2cAddress) < 0) {\n        fprintf(stderr,\"Unable to get bus access to talk to slave\u00a5n\");\n        return 1;\n    }\n    __s32 res = i2c_smbus_read_word_data(i2c_fd,t_reg);\n    if(res < 0){\n        fprintf(stderr,\"Error i2c_smbus_read_word_data()\u00a5n\");\n        return 1;\n    }\n    float temp;\n    {\n        __u16 t = res << 8 | res >> 8;//byte swap\n        temp = t & 0x0FFF;      //mask\n        temp /= 16;\n        if(t & 0x1000){                 //sign or unsigned\n            temp -= 256;\n        }\n        }\n\n    time_t t;\n    time(&t);\n    struct tm *m;\n    m = localtime(&t);\n\n    // printf(\"%d/%d/%d-%d:%d:%d,%.2f\\n\",m->tm_year+1900,m->tm_mon+1,m->tm_mday,m->tm_hour,m->tm_                                                                                                                                                                                                                            min,m->tm_sec,temp);\n    // printf(\"%.2f\", temp);\n    return temp;\n}\n```\n\n\u3061\u3087\u3063\u3068\u7720\u3044\u3067\u3059\u3002\n\u660e\u65e5\u3082\u51fa\u52e4\u3057\u306a\u3044\u3068\u3044\u3051\u306a\u3044\u306e\u3067\u3001\u3068\u308a\u3042\u3048\u305a\u3053\u308c\u3067\u3042\u3052\u307e\u3059\u3002\n\n\u3068\u3044\u3046\u304b\u3001\u30b9\u30de\u30db\u5074\u306eBlynk\u306f\u76f4\u611f\u64cd\u4f5c\u4f59\u88d5\u306a\u306e\u3067\u3001\u8aac\u660e\u3059\u308b\u3053\u3068\u3042\u308a\u307e\u305b\u3093\uff01\n\u30b0\u30e9\u30d5\u4f5c\u3063\u3066\u307f\u308c\u3070\u7d76\u5bfe\u308f\u304b\u308a\u307e\u3059\uff01\n\n\u3059\u3054\u3044\u306d\uff01\n\n\n\n\n\u554f\u984c\u306fC\u8a00\u8a9e\u304c\u4e45\u3005\u3059\u304e\u3066\u3046\u3093\u3053\u30fb\u30fb\u30fb\n\n"}