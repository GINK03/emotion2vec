{"context": "\n\n\u306f\u3058\u3081\u306b\npython\u53ca\u3073numpy, pandas, seaborn \u3068\u3044\u3063\u305f\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u4f7f\u3063\u3066\u30c7\u30fc\u30bf\u3092\u6271\u3046\u7df4\u7fd2\u3092\u3057\u307e\u3059\u3002\n\u30c7\u30fc\u30bf\u306fkaggle\u306e\u30c7\u30fc\u30bf\u3092\u4f7f\u3044\u307e\u3059\u3002\n\u4eca\u56de\u306f2016 New Coder Survey\u306e\u30c7\u30fc\u30bf\u3092\u4f7f\u3044\u307e\u3059\u3002\n\u30c7\u30fc\u30bf\u306e\u5185\u5bb9\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u3082\u306e\u3067\u3059\u3002\u7c21\u5358\u306b\u3044\u3046\u3068\u3001\u3069\u3093\u306a\u4eba\u304c\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0\u306e\u5b66\u7fd2\u3057\u3066\u3044\u308b\u304b\u306e\u30c7\u30fc\u30bf\u3067\u3059\u3002\n\nFree Code Camp is an open source community where you learn to code and build projects for nonprofits.\nCodeNewbie.org is the most supportive community of people learning to code.\nTogether, we surveyed more than 15,000 people who are actively learning to code. We reached them through the twitter accounts and email lists of various organizations that help people learn to code.\nOur goal was to understand these people's motivations in learning to code, how they're learning to code, their demographics, and their socioeconomic background.\n\n\u307e\u305f\u3001\u524d\u63d0\u3068\u3057\u3066ipython notebook\u4e0a\u3067\u5b9f\u884c\u3092\u884c\u3063\u3066\u3044\u307e\u3059\u3002\n\u30d0\u30fc\u30b8\u30e7\u30f3\u306f\npyenv: anaconda3-2.4.0 (Python 3.5.2 :: Anaconda 2.4.0)\n\u3067\u3059\u3002\n\u3053\u306e\u5206\u91ce\u306b\u7cbe\u901a\u3057\u3066\u3044\u308b\u65b9\u306f\u5185\u5bb9\u306b\u3064\u3044\u3066\u6e29\u304b\u3044\u76ee\u3067\u898b\u3066\u9802\u304d\u4f55\u304b\u304a\u6c17\u3065\u304d\u306e\u70b9\u304c\u3042\u308a\u307e\u3057\u305f\u3089\u30a2\u30c9\u30d0\u30a4\u30b9\u9802\u3051\u307e\u3059\u3068\u5e78\u3044\u3067\u3059\u3002\n\u300c\u3053\u306e\u30c7\u30fc\u30bf\u3092\u4f7f\u3063\u3066\u81ea\u5206\u3060\u3063\u305f\u3089\u3053\u3093\u306a\u5206\u6790\u3092\u3059\u308b\u300d \u3068\u3044\u3063\u305f\u5185\u5bb9\u3092\u30b3\u30e1\u30f3\u30c8\u9802\u3044\u3066\u3082\u5b09\u3057\u3044\u3067\u3059\uff01\uff08\u30b3\u30fc\u30c9\u30d9\u30fc\u30b9\u3067\u9802\u3051\u307e\u3059\u3068\u53c2\u8003\u306b\u306a\u308a\u307e\u3059\uff01\uff09\n\n\u30e9\u30a4\u30d6\u30e9\u30ea\u306eimport\n\u4f7f\u3044\u305d\u3046\u306a\u3082\u306e\u306f\u4e00\u65e6\u8aad\u307f\u8fbc\u3093\u3067\u304a\u304d\u307e\u3059\u3002\nimport numpy as np\nfrom numpy.random import randn\nimport pandas as pd\nfrom pandas import Series, DataFrame\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline\n\n\n\u30c7\u30fc\u30bf\u306e\u8aad\u307f\u8fbc\u307f\n2016 New Coder Survey\u304b\u3089\u30c7\u30fc\u30bf\u3092\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3057\u3066\u300ccode_survey.csv\u300d\u3068\u3044\u3046\u540d\u524d\u3067\u540c\u3058\u30d5\u30a9\u30eb\u30c0\u306b\u5165\u308c\u307e\u3057\u305f\u3002\nsurvey_df = pd.read_csv('corder_survey.csv')\n\n\n\u30c7\u30fc\u30bf\u306e\u6982\u89b3\n\nshape\nsurvey_df.shape\n\n(15620, 113)\n\n\u306a\u308b\u307b\u3069\u3002\u7d50\u69cb\u9805\u76ee\u3042\u308a\u307e\u3059\u306d\u3002\u884c\u306e\u6570\u304c15620(\u30c7\u30fc\u30bf\u306e\u5bfe\u8c61\u4eba\u6570)\u3001\u5217\u306e\u6570(\u56de\u7b54\u9805\u76ee)\u304c113\u3002\n\ninfo\ninfo\u3082\u4f7f\u3046\u3068\u3044\u3044\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u3002\nsurvey_df.info()\n\n<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 15620 entries, 0 to 15619\nColumns: 113 entries, Age to StudentDebtOwe\ndtypes: float64(85), object(28)\nmemory usage: 13.5+ MB\n\n\ndescribe\nsurvey_df.describe()\n\n\u5404\u5217\u306e'count', 'mean', 'std', 'min', '25%', '50%', '75%', 'max'\u3068\u3044\u3063\u305f\u60c5\u5831\u304c\u5206\u304b\u308a\u307e\u3059\u3002\n\u30c7\u30fc\u30bf\u304c\u591a\u3059\u304e\u308b\u306e\u3067\u30c7\u30fc\u30bf\u306f\u7701\u7565\u3002\n\n\u30ab\u30e9\u30e0\u30c1\u30a7\u30c3\u30af\nfor col in survey_df.columns:\n    print(col)\n\n\u3053\u308c\u3067113\u9805\u76ee\u3092\u5168\u3066\u8868\u793a\u3057\u3066\u307f\u307e\u3057\u305f\u3002\u4eca\u56de\u306f\u7df4\u7fd2\u306a\u306e\u3067\u4f7f\u3046\u30ab\u30e9\u30e0\u3092\u306f\u3058\u3081\u306b\u30d4\u30c3\u30af\u30a2\u30c3\u30d7\u3057\u3066\u304a\u3053\u3046\u3068\u601d\u3044\u307e\u3059\u3002\nGender: \u6027\u5225\nHasChildren: \u5b50\u4f9b\u306e\u6709\u7121\nEmploymentStatus: \u73fe\u72b6\u306e\u96c7\u7528\u5f62\u614b\nAge: \u5e74\u9f62\nIncome: \u53ce\u5165\nHoursLearning: \u5b66\u7fd2\u6642\u9593\nSchoolMajor: \u5c02\u653b\n\n\n\u5404\u9805\u76ee\u306e\u6982\u89b3\n\nGender\n\ncountplot\n\u6027\u5225\u306e\u30c7\u30fc\u30bf\u304b\u3089\u898b\u3066\u307f\u307e\u3059\u3002\u30d2\u30b9\u30c8\u30b0\u30e9\u30e0\u3092\u4f5c\u3063\u3066\u307f\u307e\u3059\u3002\nseaborn\u306ecountplot\u304c\u4fbf\u5229\u3067\u3059\u3002\nsns.countplot('Gender', data=survey_df)\n\n\n\u65e5\u672c\u306a\u3089\u7537\u5973\u3067\u5206\u3051\u3066\u3057\u307e\u3044\u305d\u3046\u3067\u3059\u304c\u3001\u591a\u69d8\u6027\u304c\u3042\u308a\u6d77\u5916\u3063\u307d\u3044\u3067\u3059\u306d\u3002\nseaborn.countplot\n\u3061\u306a\u307f\u306b\u3001\u5358\u7d14\u306a\u30d2\u30b9\u30c8\u30b0\u30e9\u30e0\u306a\u3089matplotlib\u3067plt.hist\u3068\u304b\u3042\u308a\u307e\u3059\u3002\n\uff08\u68d2\u30b0\u30e9\u30d5\u3092\u4f5c\u308bplt.bar\u3082\u3042\u308a\u307e\u3059\u304c\u3001\u30c7\u30fc\u30bf\u306e\u983b\u5ea6\u5206\u5e03\u304b\u3089\u30d2\u30b9\u30c8\u30b0\u30e9\u30e0\u3092\u4f5c\u308b\u3068\u304d\u306fplt.hist\u304c\u697d\u3067\u3059\u3002\ndataset = randn(100)\nplt.hist(dataset)\n\n\uff08randn\u306f\u6b63\u898f\u5206\u5e03\u306b\u5f93\u3063\u305f\u4e71\u6570\u3092\u751f\u6210\u3057\u3066\u304f\u308c\u307e\u3059\uff09\n\n\u8272\u3005\u306a\u30aa\u30d7\u30b7\u30e7\u30f3\u3082\u3042\u308a\u307e\u3059\u3002\n# normed: \u6b63\u898f\u5316, alpha: \u900f\u660e\u5ea6, color: \u8272, bins: \u30d3\u30f3\u6570\nplt.hist(dataset, normed=True, alpha=0.8, color='indianred', bins=15)\n\nmatplotlib.pyplot.hist\n\nHasChildren\n\u540c\u69d8\u306b\u5b50\u4f9b\u306e\u6709\u7121\u3082countplot\u3092\u4f7f\u3063\u3066\u63cf\u753b\u3057\u3066\u307f\u307e\u3059\u3002\nsns.countplot('HasChildren', data=survey_df)\n\n\n0\u304b1\u3060\u3068\u5206\u304b\u308a\u306b\u304f\u3044\u306e\u3067\u5b50\u4f9b\u306a\u3057\u3092No\u3001\u5b50\u4f9b\u3042\u308a\u3092Yes\u3068\u3057\u3066\u307f\u307e\u3059\u3002\nsurvey_df['HasChildren'].loc[survey_df['HasChildren'] == 0] = 'No'\nsurvey_df['HasChildren'].loc[survey_df['HasChildren'] == 1] = 'Yes'\n\npandas.DataFrame.loc\n\u3053\u308c\u3067\u5909\u63db\u51fa\u6765\u307e\u3057\u305f\u3002\n\ndf.map\nmap\u3092\u4f7f\u3063\u305f\u5909\u63db\u3067\u3082\u826f\u3055\u305d\u3046\u3067\u3059\u3002\nsurvey_df['HasChildren'] = survey_df['HasChildren'].map({0: 'No', 1: 'Yes'})\nsns.countplot('HasChildren', data=survey_df)\n\nsns.countplot('HasChildren', data=survey_df)\n\n\n\u5c11\u3057\u5206\u304b\u308a\u3084\u3059\u3044\u3067\u3059\u306d\uff01\n\nEmploymentStatus\n\u73fe\u72b6\u306e\u96c7\u7528\u5f62\u614b\u3082countplot\u3067\u8868\u3057\u3066\u307f\u307e\u3059\u3002\nsns.countplot('EmploymentStatus', data=survey_df)\n\n\n\u306a\u3093\u304b\u3054\u3061\u3083\u3063\u3068\u3057\u3066\u5206\u304b\u308a\u306b\u304f\u3044\u3002\u3002\n\u3068\u3044\u3046\u308f\u3051\u3067\u8ef8\u3092\u5909\u3048\u3066\u307f\u307e\u3059\u3002\n\ncountplot \u8ef8\u306e\u5909\u66f4\nsns.countplot(y='EmploymentStatus', data=survey_df)\n\n\n\u898b\u3084\u3059\u3044\uff01\n\nAge\n\u3053\u308c\u3082countplot\u3092\u4f7f\u3063\u3066\u307f\u307e\u3059\u3002\nsns.countplot('Age', data=survey_df)\n\n\n\u30ab\u30e9\u30d5\u30eb\u3067\u7dba\u9e97\u3067\u3059\u3051\u3069\u3001\u30b0\u30e9\u30d5\u3068\u3057\u3066\u306f\u898b\u306b\u304f\u3044\u3067\u3059\u306d\u3002\n\u3068\u3044\u3046\u308f\u3051\u3067\u30b0\u30e9\u30d5\u3092\u6ed1\u3089\u304b\u306b\u3057\u3066\u307f\u307e\u3059\u3002\n\nkde plot\n\u30ab\u30fc\u30cd\u30eb\u5bc6\u5ea6\u63a8\u5b9a ( kde: kernel density plot ) \u3092\u4f7f\u3044\u307e\u3059\u3002\u3084\u308a\u65b9\u81ea\u4f53\u306f\u7c21\u5358\u3067\u3059\u3002\nsns.kdeplot(survey_df['Age'])\n\n\n20\u4ee3\u304b\u308930\u4ee3\u306e\u65b9\u304c\u591a\u3044\u3093\u3067\u3059\u306d\u3002\u60f3\u50cf\u901a\u308a\u3068\u3044\u3063\u305f\u3068\u3053\u308d\u3067\u3057\u3087\u3046\u304b\u3002\n\u305f\u3060\u3001\u3042\u308b\u7a0b\u5ea6\u5e74\u9f62\u304c\u4e0a\u304c\u3063\u3066\u3082\u88fe\u306f\u5e83\u304c\u3063\u3066\u3044\u307e\u3059\u306d\u3002\n\n\u30ab\u30fc\u30cd\u30eb\u5bc6\u5ea6\u63a8\u5b9a\n\u3053\u3053\u3067\u3001\u30ab\u30fc\u30cd\u30eb\u5bc6\u5ea6\u63a8\u5b9a\u3092\u5c11\u3057\u8003\u3048\u3066\u307f\u307e\u3059\u3002\uff08Wikipedia\u3084\u305d\u306e\u4ed6\u30b5\u30a4\u30c8\u3092\u898b\u308b\u3068\u3061\u3083\u3093\u3068\u3057\u305f\u89e3\u8aac\u304c\u898b\u308c\u308b\u304b\u3068\u601d\u3044\u307e\u3059\u3002\uff09\n\u30ab\u30fc\u30cd\u30eb\u5bc6\u5ea6\u63a8\u5b9a \ndataset = randn(30)\nplt.hist(dataset, alpha=0.5)\nsns.rugplot(dataset)\n\nrugplot\u306f\u5404\u6a19\u672c\u70b9\u3092\u68d2\u3067\u793a\u3057\u3066\u304f\u308c\u307e\u3059\u3002\n\n\u3053\u306e\u30b0\u30e9\u30d5\u306e\u5404\u6a19\u672c\u70b9\u305d\u308c\u305e\u308c\u306b\u5bfe\u3057\u3066\u3001\u30ab\u30fc\u30cd\u30eb\u95a2\u6570\uff08\u4e00\u4f8b\u3068\u3057\u3066\u6b63\u898f\u5206\u5e03\u3092\u8003\u3048\u308b\u3068\u5206\u304b\u308a\u3084\u3059\u3044\uff09\u3092\u4f5c\u3063\u3066\u305d\u308c\u3092\u8db3\u3057\u5408\u308f\u305b\u308b\u30a4\u30e1\u30fc\u30b8\u3067\u3059\u3002\nsns.kdeplot(dataset)\n\n\n\u30ab\u30fc\u30cd\u30eb\u5bc6\u5ea6\u63a8\u5b9a\u3092\u3059\u308b\u4e0a\u3067\n\n\u30ab\u30fc\u30cd\u30eb\u95a2\u6570: \u5404\u6a19\u672c\u70b9\u306e\u5f71\u97ff\u5ea6\u306e\u5e83\u304c\u308a\u65b9\n\u30d0\u30f3\u30c9\u5e45: \u30ab\u30fc\u30cd\u30eb\u95a2\u6570\u306e\u5e83\u304c\u308a\u306e\u5e45\n\n\u306e2\u3064\u3092\u6c7a\u5b9a\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\n\n\u30ab\u30fc\u30cd\u30eb\u95a2\u6570\n\u8272\u3005\u306a\u30ab\u30fc\u30cd\u30eb\u95a2\u6570\u3092\u7528\u3044\u308b\u3053\u3068\u3082\u51fa\u6765\u307e\u3059\u3002\n\u30c7\u30d5\u30a9\u30eb\u30c8\u306f gau \uff08\u30ac\u30a6\u30b9\u5206\u5e03\u3001\u6b63\u898f\u5206\u5e03\uff09\u3067\u3059\u3002\nkernel_options = [\"gau\", \"biw\", \"cos\", \"epa\", \"tri\", \"triw\"]\nfor kernel in kernel_options:\n    sns.kdeplot(dataset, kernel=kernel, label=kernel)\n\n\n\n\u30d0\u30f3\u30c9\u5e45\n\u30d0\u30f3\u30c9\u5e45\u3082\u4ee3\u3048\u3089\u308c\u307e\u3059\u3002\nfor bw in np.arange(0.5, 2, 0.25):\n  sns.kdeplot(dataset, bw=bw, label=bw)\n\n\n\u3053\u3053\u307e\u3067\u3067\u30ab\u30fc\u30cd\u30eb\u5bc6\u5ea6\u63a8\u5b9a\u306e\u8aac\u660e\u306f\u4e00\u65e6\u533a\u5207\u308a\u3001\u6b21\u306b\u3044\u304d\u307e\u3059\u3002\n\nIncome\n\u3053\u3053\u3067\u3082kdeplot\u3092\u4f7f\u3044\u307e\u3059\u3002\nsns.kdeplot(survey_df['Income'])\n\n\n\u5358\u4f4d\u306f\u30c9\u30eb\u3067\u3057\u3087\u3046\u304b\u3089\u5e74\u53ce\u3067\u3059\u306d\u3002\n\u30c7\u30fc\u30bf\u3092\u3082\u3046\u5c11\u3057\u898b\u3066\u307f\u307e\u3059\u3002\n\ndescribe\nsurvey_df['Income'].describe()\n\nRuntimeWarning: Invalid value encountered in median\ncount      7329.000000\nmean      44930.010506\nstd       35582.783216\nmin        6000.000000\n25%                NaN\n50%                NaN\n75%                NaN\nmax      200000.000000\nName: Income, dtype: float64\n\n\u56db\u5206\u4f4d\u70b9\u304cNaN\u306b\u306a\u308b\u554f\u984c\u306f\u8a18\u4e8b\u4f5c\u6210\u6642\u70b9\u3067\u65e2\u306b\u89e3\u6c7a\u6e08\u307f\u3067\u306f\u3042\u308b\u3088\u3046\u3067\u3059\u304c\u3001merge\u5f85\u3061\u307f\u305f\u3044\u3067\u3059\u3002\n\u6c17\u306b\u305b\u305a\u30d0\u30fc\u30b8\u30e7\u30f3\u30a2\u30c3\u30d7\u3092\u5f85\u3061\u307e\u3059\u3002\ndescribe() returns RuntimeWarning: Invalid value encountered in median RuntimeWarning #13146\n\nboxplot\nboxplot(boxplot)\u3092\u4f5c\u6210\u3057\u305f\u3044\u3068\u601d\u3044\u307e\u3059\u3002\nsns.boxplot(survey['Income'])\n\n\n\u5de6\u306e\u7e26\u7dda\u304b\u3089\u9806\u306b\u7bb1\u3072\u3052\u306e\u6700\u5c0f\u3001\u7b2c\u4e00\u56db\u5206\u4f4d\u70b9(Q1)\u3001\u4e2d\u592e\u5024\u3001\u7b2c\u4e09\u56db\u5206\u4f4d\u70b9\uff08Q3)\u3001\u7bb1\u3072\u3052\u306e\u6700\u5927\u3092\u8868\u3057\u307e\u3059\u3002IQR = Q3-Q1 \u3068\u3057\u3066 (\u6700\u5c0f\u5024 - IQR1.5) ~ (\u6700\u5927\u5024 + IQR1.5 ) \u304b\u3089\u5916\u308c\u305f\u3082\u306e\u3092\u7bb1\u3072\u3052\u304b\u3089\u5916\u308c\u305f\u5916\u308c\u5024\u3068\u3057\u3066\u9ed2\u306e\u70b9\u3067\u8868\u3055\u308c\u307e\u3059\u3002\n\u5916\u308c\u5024\u3092\u306a\u3057\u3067\u8868\u73fe\u3059\u308b\u3053\u3068\u3082\u51fa\u6765\u307e\u3059\u3002\nsns.boxplot(survey['Income'], whips=np.inf)\n\n\n\nviolinplot\nboxplot\u306bkde\u306e\u60c5\u5831\u3092\u6301\u305f\u305b\u305f\u30f4\u30a1\u30f4\u30a3\u30aa\u30ea\u30f3\u30d7\u30ed\u30c3\u30c8\u3068\u3044\u3046\u3082\u306e\u3082\u3042\u308a\u307e\u3059\u3002\nsns.violinplot(survey_df['Income'])\n\n\n\u5206\u5e03\u304c\u3088\u308a\u5206\u304b\u308a\u3084\u3059\u3044\u3067\u3059\u306d\uff01\n\nHoursLearning\n\u5b66\u7fd2\u6642\u9593\u3092\u898b\u3066\u307f\u307e\u3059\u3002\n\u307e\u305a\u306fkde\u30d7\u30ed\u30c3\u30c8\u3092\u3057\u3066\u307f\u307e\u3059\u3002\nsns.kdeplot(survey_df['HoursLearning'])\n\n\n\u6642\u9593\u7684\u306b1\u9031\u9593\u306e\u5b66\u7fd2\u91cf\u3067\u3059\u306d\u3002\n\u307e\u305f\u6975\u5024\u304c\u76ee\u7acb\u3061\u307e\u3059\u304c\u3001\u3053\u308c\u306f\u304d\u308a\u306e\u3088\u3044\u6570\u5b57\u3067\u8d77\u3053\u3063\u3066\u3044\u307e\u3059\u3002\u666e\u901a\u306f\u304d\u308a\u306e\u826f\u3044\u6570\u5b57\u3067\u30a2\u30f3\u30b1\u30fc\u30c8\u306b\u7b54\u3048\u308b\u306e\u3067\u3053\u3046\u306a\u3063\u3066\u3057\u307e\u3044\u307e\u3059\u306d\u3002\nviolinplot\u3082\u3057\u3066\u304a\u304d\u307e\u3059\u3002\nsns.violinplot(survey_df['HoursLearning'])\n\n\nkde\u30d7\u30ed\u30c3\u30c8\u306e\u7279\u5fb4\u304c\u53cd\u6620\u3055\u308c\u3066\u3044\u307e\u3059\u3002\n\u307e\u305f\u3001countplot\u3068kdeplot\u306e\u4e21\u65b9\u3092\u4e00\u7dd2\u306b\u751f\u6210\u51fa\u6765\u308bdistplot\u3068\u3044\u3046\u3082\u306e\u3082\u3042\u308a\u307e\u3059\u3002\nnan\u306f\u524a\u9664\u3057\u3066\u4f7f\u3063\u3066\u3044\u307e\u3059\u3002\nhours_learning = survey_df['HoursLearning']\nhours_learning = hours_learning.dropna()\nsns.distplot(hours_learning)\n\n\n\u30d2\u30b9\u30c8\u30b0\u30e9\u30e0\u3092\u30e9\u30b0\u30d7\u30ed\u30c3\u30c8\u306b\u5909\u3048\u305f\u308a\u3001\u30aa\u30d7\u30b7\u30e7\u30f3\u3082\u4ed8\u3051\u308b\u3053\u3068\u304c\u51fa\u6765\u307e\u3059\u3002\n\u4fbf\u5229\u3067\u3059\uff01\nsns.distplot(hours_learning, rug=True, hist=False, kde_kws={'color':'indianred'})\n\n\n\nSchoolMajor\n\u9023\u7d9a\u5024\u3067\u3059\u3068kdeplot\u304c\u6d3b\u8e8d\u3057\u307e\u3059\u304c\u3001\u3053\u308c\u306f\u30ab\u30c6\u30b4\u30ea\u5206\u3051\u306a\u306e\u3067countplot\u3092\u4f7f\u3044\u307e\u3059\u3002\nsns.countplot(y='SchoolMajor' , data=survey_df)\n\n\n\u898b\u306b\u304f\u3044\u3067\u3059\u3002\u3002\u30ab\u30c6\u30b4\u30ea\u6570\u304c\u591a\u3059\u304e\u308b\u306e\u3067\u3059\u306d\u3002\n\u4e0a\u4f4d10\u500b\u304f\u3089\u3044\u304c\u898b\u305f\u3044\u3067\u3059\u3002\n\ncollections.Counter\nfrom collections import Counter\nmajor_count = Counter(survey_df['SchoolMajor'])\nmajor_count.most_common(10)\n\n\u6a19\u6e96\u30e9\u30a4\u30d6\u30e9\u30ea\u306ecollections\u3092\u4f7f\u3046\u3053\u3068\u3067\u30ab\u30a6\u30f3\u30c8\u3057\u307e\u3059\u3002\n\u3055\u3089\u306bmost_common(10)\u3068\u3059\u308b\u3053\u3068\u3067\u305d\u306e\u4e2d\u306e\u4e0a\u4f4d10\u4ef6\u3092\u53d6\u5f97\u3059\u308b\u3053\u3068\u304c\u51fa\u6765\u307e\u3059\u3002\n[(nan, 7170),\n ('Computer Science', 1387),\n ('Information Technology', 408),\n ('Business Administration', 284),\n ('Economics', 252),\n ('Electrical Engineering', 220),\n ('English', 204),\n ('Psychology', 187),\n ('Electrical and Electronics Engineering', 164),\n ('Software Engineering', 159)]\n\n\u30b0\u30e9\u30d5\u306b\u8868\u793a\u3055\u305b\u307e\u3057\u3087\u3046\u3002\nX = []\nY = []\nmajor_count_top10 = major_count.most_common(10)\nfor record in major_count_top10:\n    X.append(record[0])\n    Y.append(record[1])\n\n# [nan, 'Computer Science', 'Information Technology', 'Business Administration', 'Economics', 'Electrical Engineering', 'English', 'Psychology', 'Electrical and Electronics Engineering', 'Software Engineering']\n# [7170, 1387, 408, 284, 252, 220, 204, 187, 164, 159]\n\nplt.barh(np.arange(10), Y)\nplt.yticks(np.arange(10), X)\n\n\n\u3053\u3061\u3089\u3092\u53c2\u8003\u306b\u3057\u307e\u3057\u305f\u3002\n\u68d2\u30b0\u30e9\u30d5 -matplotlib\u5165\u9580\nplt.barh\u3092\u4f7f\u3046\u3068plt.bar\u306e\u8ef8\u3092\u5909\u3048\u308b\u3053\u3068\u304c\u51fa\u6765\u307e\u3059\u3002yticks\u3092\u4f7f\u3063\u3066\u30e9\u30d9\u30eb\u3082\u3064\u3051\u307e\u3057\u305f\u3002\n\u3055\u3066\u3001nan\u306f\u8868\u793a\u3055\u305b\u305f\u304f\u306a\u3044\u3067\u3059\u3057\u3001\u9006\u9806\u306b\u4e26\u3073\u66ff\u3048\u305f\u3044\u3067\u3059\u3002\nX = []\nY = []\nmajor_count_top10 = major_count.most_common(10)\nmajor_count_top10.reverse()\nfor record in major_count_top10:\n    # record[0] == record[0]\u306b\u95a2\u3057\u3066\u306f\u4e0b\u306b\u88dc\u8db3\u3042\u308a\n    if record[0] == record[0]:\n        X.append(record[0])\n        Y.append(record[1])\n\n# ['Software Engineering', 'Electrical and Electronics Engineering', 'Psychology', 'English', 'Electrical Engineering', 'Economics', 'Business Administration', 'Information Technology', 'Computer Science']\n# [159, 164, 187, 204, 220, 252, 284, 408, 1387]\n\nplt.barh(np.arange(9), Y)\nplt.yticks(np.arange(9), X)\n\n\n\u8003\u3048\u3066\u3044\u305f\u30b0\u30e9\u30d5\u304c\u51fa\u6765\u307e\u3057\u305f\uff01\n\n[\u8ffd\u8a18] if record[0] == record[0]: \u306b\u3064\u3044\u3066\n\u3053\u3053\u306f\u3001NaN\u540c\u58eb\u306e\u6bd4\u8f03\u306e\u3068\u304d\u3060\u3051False\u304c\u8fd4\u3063\u3066\u304f\u308b\u3068\u3044\u3046\u3053\u3068\u3067\u3053\u3046\u3044\u3046\u5b9f\u88c5\u3092\u3057\u307e\u3057\u305f\u3002\uff08\u4ee5\u4e0b\u306eURL\u3082\u53c2\u7167\uff09\nPython, Nan\u306e\u5224\u5b9a\u306e\u4ed5\u65b9\u3002\n\u3057\u304b\u3057\u3001\u5206\u304b\u308a\u306b\u304f\u3055\u304c\u3042\u308b\u306e\u3067\n@shiracamus \u3055\u3093\u306b\u7d39\u4ecb\u9802\u304d\u307e\u3057\u305f\u5b9f\u88c5\u65b9\u6cd5\u306e\u307b\u3046\u304c\u5206\u304b\u308a\u3084\u3059\u3044\u3067\u3059\u3002\u79c1\u3082\u3053\u3061\u3089\u3092\u4eca\u5f8c\u4f7f\u304a\u3046\u3068\u601d\u3044\u307e\u3059\u3002\nif record[0] == record[0]:\n\n\u306e\u90e8\u5206\u3092\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u5909\u66f4\u3002\nif pd.notnull(record[0]):\n\n\n\u30c7\u30fc\u30bf\u306e\u95a2\u9023\n\nGender \u3068 HasChildren\n\u307e\u305a\u3001Gender\u306f\u7c21\u5358\u306e\u305f\u3081\u306b\u7537\u5973\u3060\u3051\u306b\u3057\u307e\u3059\u3002\nmale_female_df = survey_df.where((survey_df['Gender'] == 'male') + (survey_df['Gender'] == 'female') )\n\ncountplot\u306ehue\u3092\u4f7f\u3046\u3053\u3068\u3067\u5c64\u5225\u306b\u30ab\u30a6\u30f3\u30c8\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\ncountplot(hue)\nsns.countplot('Gender', data=male_female_df, hue='HasChildren')\n\n\n\u7537\u5973\u3068\u3082\u540c\u3058\u3088\u3046\u306a\u5b50\u6301\u3061\u306e\u5272\u5408\u307f\u305f\u3044\u3067\u3059\u306d\u3002\n\nGender \u3068 Age\ncountplot\u4ee5\u5916\u306e\u30b0\u30e9\u30d5\u3067\u3082\u5c64\u5225\u306b\u8868\u3059\u3053\u3068\u304c\u51fa\u6765\u307e\u3059\u3002FacetGrid\u3092\u4f7f\u3044\u307e\u3059\u3002\n\nsns.FacetGrid\nfig = sns.FacetGrid(male_female_df, hue='Gender', aspect=4)\nfig.map(sns.kdeplot, 'Age', shade=True)\noldest = male_female_df['Age'].max()\nfig.set(xlim=(0, oldest))\nfig.add_legend()\n\n\n\u82e5\u5e72\u7537\u6027\u306e\u307b\u3046\u304c\u82e5\u3044\u5074\u306b\u3042\u308a\u307e\u3059\u306d\u3002\n\nEmploymentStatus \u3068 Gender\nEmploymentStatus\u306f\u8907\u6570\u3042\u308b\u306e\u3067\u4e0a\u4f4d\u306e\u6570\u4ef6\u3060\u3051\u4f7f\u3044\u305f\u3044\u3068\u601d\u3044\u307e\u3059\u3002\n# male_female_df\u306f survey_df\u306eGender\u3092\u7537\u5973\u306b\u7d5e\u3063\u305f\u3082\u306e\n# EmploymentStatus\u306e\u4e0a\u4f4d5\u4ef6\u3092\u53d6\u5f97\nfrom collections import Counter\nemploy_count = Counter(male_female_df['EmploymentStatus'])\nemploy_count_top = employ_count.most_common(5)\nprint(employ_count_top)\nemploy_list =[]\n\nfor record in employ_count_top:\n     if record[0] == record[0]:\n        employ_list.append(record[0])\n\ndef top_employ(status):\n    return status in employ_list\n\n# apply\u3092\u4f7f\u3063\u3066employ_list\u306b\u5165\u3063\u305f\u9805\u76ee\u306e\u884c\u3060\u3051\u3092\u53d6\u5f97\nnew_survey_df = male_female_df.loc[male_female_df['EmploymentStatus'].apply(top_employ)]\n\nsns.countplot(y='EmploymentStatus', data=new_survey_df)\n\n\n\u3053\u308c\u3067\u4e0a\u4f4d3\u4ef6\u306e\u9805\u76ee\u3060\u3051\u306b\u306a\u308a\u307e\u3057\u305f\u3002\ncountplot\u306ehue\u3092\u4f7f\u3063\u3066\u7537\u5973\u306e\u5c64\u5225\u306b\u898b\u3066\u307f\u307e\u3059\u3002\nsns.countplot(y='EmploymentStatus', data=employ_df, hue='Gender')\n\n\n\nEmploymentStatus \u3068 HasChildren\n\u307e\u305a\u3001HasChildren\u3092No->0, Yes->1\u306b\u5909\u63db\u3057\u3066\u304a\u304d\u307e\u3059\u3002\nnew_survey_df['HasChildren'] = new_survey_df['HasChildren'].map({'No': 0, 'Yes': 1})\n\n\u3053\u3053\u3067factorplot\u3092\u4f7f\u3044\u307e\u3059\u3002EmploymentStatus\u304c\u5b50\u4f9b\u306e\u6709\u7121\u306b\u3069\u308c\u304f\u3089\u3044\u95a2\u308f\u3063\u3066\u3044\u308b\u304b\u898b\u3066\u307f\u307e\u3059\u3002\n\nfactorplot\nsns.factorplot('EmploymentStatus', 'HasChildren', data=new_survey_df, aspect=2)\n\n\nEmloyed for wages\u304c\u5c11\u3057\u5024\u304c\u9ad8\u3044\u3067\u3059\u306d\u3002\u3053\u308c\u306f\u7d0d\u5f97\u611f\u304c\u3042\u308a\u307e\u3059\u3002\n\u307e\u305f\u3001factorplot\u3082\u5c64\u5225\u306b\u898b\u308b\u3053\u3068\u304c\u51fa\u6765\u308b\u306e\u3067\u7537\u5973\u306b\u9055\u3044\u304c\u306a\u3044\u304b\u898b\u3066\u307f\u307e\u3059\u3002\nsns.factorplot('EmploymentStatus', 'HasChildren', data=new_survey_df, aspect=2, hue='Gender')\n\n\n\u3053\u308c\u306f\u306a\u304b\u306a\u304b\u9762\u767d\u3044\u3067\u3059\u306d\u3002\u7537\u5973\u3067\u898b\u308b\u3068\u5b9f\u306f\u5168\u7136\u9055\u3044\u307e\u3057\u305f\u3002\n\u96c7\u7528\u4e8b\u60c5\u3068\u7167\u3089\u3057\u5408\u308f\u305b\u308b\u3068\u8272\u3005\u3068\u8003\u3048\u3089\u308c\u308b\u3053\u3068\u304c\u3042\u308a\u305d\u3046\u3067\u3059\u3002\n\nAge \u3068 HasChildren\n\nlmplot\n\u56de\u5e30\u76f4\u7dda\u3067\u95a2\u4fc2\u3092\u898b\u3066\u307f\u305f\u3044\u3068\u601d\u3044\u307e\u3059\u3002\u56de\u5e30\u76f4\u7dda\u306b\u306f lmplot\u3092\u4f7f\u3044\u307e\u3059\u3002\nsns.lmplot('Age', 'HasChildren', data=new_survey_df)\n\n\n\u3055\u3066\u3001lmplot\u3082\u5c64\u5225\u306b\u898b\u308b\u3053\u3068\u304c\u51fa\u6765\u308b\u306e\u3067\u3084\u3063\u3066\u307f\u305f\u3044\u3068\u601d\u3044\u307e\u3059\u3002\n\u307e\u305a\u306fEmploymentStatus\u3067\u5c64\u5225\u306b\u3057\u307e\u3059\u3002\nsns.lmplot('Age', 'HasChildren', data=new_survey_df, hue='EmploymentStatus')\n\n\n\u4e00\u822c\u306b\u306f Employed for wages\u306e\u5024\u304c\u5c11\u3057\u9ad8\u3044\u3067\u3059\u304c\u3001\u524d\u9805\u3067\u898b\u305f\u3088\u3046\u306b\u7537\u5973\u3067\u5206\u3051\u308b\u3068\u3082\u3046\u5c11\u3057\u306f\u3063\u304d\u308a\u5206\u304b\u308c\u305d\u3046\u3067\u3059\u306d\u3002\n\u3064\u3044\u3067\u306b\u3001Gender\u3067\u3082\u5c64\u5225\u306b\u3057\u3066\u304a\u304d\u307e\u3059\u3002\nsns.lmplot('Age', 'HasChildren', data=new_survey_df, hue='Gender')\n\n\n\n\u8907\u6570\u306e\u30b0\u30e9\u30d5\u3092\u4e26\u3079\u3066\u8868\u793a\u3059\u308b\n\u8907\u6570\u306e\u30b0\u30e9\u30d5\u3092\u4e26\u3079\u3066\u8868\u793a\u3055\u305b\u308b\u65b9\u6cd5\u3082\u3042\u308a\u307e\u3059\u3002subplots\u3092\u4f7f\u3063\u30662\u3064\u306e\u30b0\u30e9\u30d5\u3092\u63cf\u753b\u3057\u307e\u3057\u305f\u3002\nfig, (axis1, axis2) = plt.subplots(1, 2, sharey=True)\nsns.regplot('HasChildren', 'Age', data=new_survey_df, ax=axis1)\nsns.violinplot(y='Age', x='HasChildren', data=new_survey_df, ax=axis2)\n\n\nregplot\u3068\u3044\u3046\u306e\u306flmplot\u306e\u4f4e\u30ec\u30d9\u30eb\u30d0\u30fc\u30b8\u30e7\u30f3\u3067\u3001\u5358\u7d14\u306a\u56de\u5e30\u3092\u4f5c\u308b\u4e0a\u3067\u306f\u540c\u3058\u3067\u3059\u3002\nregplots\u3092\u4f7f\u3063\u305f\u306e\u306fsubplots\u3067\u4f7f\u3048\u308b\u95a2\u6570\u306fmatplotlib Axes\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u8fd4\u3059\u3082\u306e\u306b\u9650\u3089\u308c\u308b\u3088\u3046\u3067lmplot\u304c\u4f7f\u3048\u306a\u304b\u3063\u305f\u304b\u3089\u3067\u3059\u3002\n\u8a73\u3057\u3044\u8aac\u660e\u306f\nPlotting with seaborn using the matplotlib object-oriented interface\n\u304c\u5206\u304b\u308a\u3084\u3059\u304b\u3063\u305f\u3067\u3059\u3002\n\u3053\u306e\u8a18\u4e8b\u3067\u3044\u3046 \"Axis-level\" function\u306f\u4f7f\u3048\u308b\u3088\u3046\u3067\u3059\u3002\n(regplot, boxplot, kdeplot, and many others)\n\u3053\u308c\u306b\u5bfe\u3057\u3066 \"Figure-level\" function\u3082\u7d39\u4ecb\u3055\u308c\u3066\u3044\u3066\u305d\u306e\u4e2d\u306blmplot\u3082\u3042\u308a\u307e\u3059\u3002\n(lmplot, factorplot, jointplot and one or two others)\n\u307b\u3068\u3093\u3069Axis\u3067\u4e00\u90e8Figure\u3063\u3066\u611f\u3058\u3067\u3059\u304b\u306d\u3002\n\u305d\u308c\u3067Figure\u306b\u95a2\u3057\u3066\u306fFacetGrid\u304c\u826f\u3044\u307f\u305f\u3044\u3067\u3059\u3002\nPlotting on data-aware grids\nFacetGrid\u3067\u3082\u8907\u6570\u306e\u30b0\u30e9\u30d5\u3092\u4e26\u3079\u3089\u308c\u307e\u3059\u3002\nAge \u306e\u5206\u5e03\u3092 EmploymentStatus\u3054\u3068\u306b\u4e26\u3079\u3066\u8868\u793a\u3057\u3066\u307f\u307e\u3057\u305f\u3002\nfig = sns.FacetGrid(new_survey_df, col='EmploymentStatus', aspect=1.5)\nfig.map(sns.distplot, 'Age')\noldest = new_survey_df['Age'].max()\nfig.set(xlim=(0, oldest))\nfig.add_legend()\n\n\n\n\u304a\u308f\u308a\u306b\n\n\u51fa\u3066\u304f\u308b\u3082\u306e\u306e\u6574\u7406\n\ndf.shape\ndf.info()\ndf.describe()\ndf.read_csv\nsns.countplot\nplt.hist\nplt.bar\nsns.kdeplot\ndf.loc\ndf.map\nsns.rugplot\nsns.boxplot\nsns.violinplot\nsns.distplot\ncollections.Counter\ncollections.Counter.most_common\nplt.barh\npd.where\nsns.countplot(hue)\nsns.FacetGrid\ndf.apply\nsns.lmplot\nsns.lmplot(hue)\nplt.subplots\n\n\npython\u306e\u4f7f\u3044\u65b9\u3067\u53c2\u8003\u306b\u3057\u305f\u3082\u306e\nPython\u3092\u59cb\u3081\u305f\u6642\u304b\u3089\u77e5\u3063\u3066\u3044\u305f\u304b\u3063\u305f\u30d9\u30bf\u30fc\u306a\u66f8\u304d\u65b9\nPython pandas \u30c7\u30fc\u30bf\u9078\u629e\u51e6\u7406\u3092\u3061\u3087\u3063\u3068\u8a73\u3057\u304f <\u5f8c\u7de8>\n\n\u53c2\u8003\n\u3010\u4e16\u754c\u30672\u4e07\u4eba\u304c\u53d7\u8b1b\u3011\u5b9f\u8df5 Python \u30c7\u30fc\u30bf\u30b5\u30a4\u30a8\u30f3\u30b9\n\u4e01\u5be7\u306a\u89e3\u8aac\u3067\u308f\u304b\u308a\u3084\u3059\u304f\u3066\u304a\u3059\u3059\u3081\u306e\u52d5\u753b\u8b1b\u5ea7\u3067\u3059\u3002\n\u8cea\u554f\u3057\u3066\u3082\u7fcc\u65e5\u306b\u306f\u56de\u7b54\u304c\u8fd4\u3063\u3066\u304f\u308b\u3068\u3053\u308d\u3082\u30dd\u30a4\u30f3\u30c8\u3067\u3059\u3002\nPython\u306b\u3088\u308b\u30c7\u30fc\u30bf\u5206\u6790\u5165\u9580 \u2015NumPy\u3001pandas\u3092\u4f7f\u3063\u305f\u30c7\u30fc\u30bf\u51e6\u7406\n\u30aa\u30e9\u30a4\u30ea\u30fc\u306e\u30c7\u30fc\u30bf\u5206\u6790\u306e\u66f8\u7c4d\u3067\u3059\u3002\u3088\u304f\u307e\u3068\u307e\u3063\u3066\u3044\u307e\u3059\u3002\nStart Python Club\nPython\u306e\u30b3\u30df\u30e5\u30cb\u30c6\u30a3\u3067\u3059\u3002\u30c7\u30fc\u30bf\u5206\u6790\u306b\u7279\u5316\u3057\u3066\u3044\u308b\u308f\u3051\u3067\u306f\u3042\u308a\u307e\u305b\u3093\u304c\u3001Python\u306b\u3064\u3044\u3066\u5e45\u5e83\u304f\u6d3b\u52d5\u3055\u308c\u3066\u3044\u308b\u306e\u3067Python\u3092\u4f7f\u3046\u306e\u3067\u3042\u308c\u3070\u884c\u3063\u3066\u307f\u308b\u3068\u697d\u3057\u3044\u3068\u601d\u3044\u307e\u3059\u3002\n# \u306f\u3058\u3081\u306b\n\npython\u53ca\u3073numpy, pandas, seaborn \u3068\u3044\u3063\u305f\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u4f7f\u3063\u3066\u30c7\u30fc\u30bf\u3092\u6271\u3046\u7df4\u7fd2\u3092\u3057\u307e\u3059\u3002\n\u30c7\u30fc\u30bf\u306f[kaggle](https://www.kaggle.com/)\u306e\u30c7\u30fc\u30bf\u3092\u4f7f\u3044\u307e\u3059\u3002\n\u4eca\u56de\u306f[2016 New Coder Survey](https://www.kaggle.com/freecodecamp/2016-new-coder-survey-)\u306e\u30c7\u30fc\u30bf\u3092\u4f7f\u3044\u307e\u3059\u3002\n\u30c7\u30fc\u30bf\u306e\u5185\u5bb9\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u3082\u306e\u3067\u3059\u3002\u7c21\u5358\u306b\u3044\u3046\u3068\u3001\u3069\u3093\u306a\u4eba\u304c\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0\u306e\u5b66\u7fd2\u3057\u3066\u3044\u308b\u304b\u306e\u30c7\u30fc\u30bf\u3067\u3059\u3002\n\n>\nFree Code Camp is an open source community where you learn to code and build projects for nonprofits.\n>\nCodeNewbie.org is the most supportive community of people learning to code.\n>\nTogether, we surveyed more than 15,000 people who are actively learning to code. We reached them through the twitter accounts and email lists of various organizations that help people learn to code.\n>\nOur goal was to understand these people's motivations in learning to code, how they're learning to code, their demographics, and their socioeconomic background.\n\n\n\u307e\u305f\u3001\u524d\u63d0\u3068\u3057\u3066ipython notebook\u4e0a\u3067\u5b9f\u884c\u3092\u884c\u3063\u3066\u3044\u307e\u3059\u3002\n\u30d0\u30fc\u30b8\u30e7\u30f3\u306f\npyenv: anaconda3-2.4.0 (Python 3.5.2 :: Anaconda 2.4.0)\n\u3067\u3059\u3002\n\n\u3053\u306e\u5206\u91ce\u306b\u7cbe\u901a\u3057\u3066\u3044\u308b\u65b9\u306f\u5185\u5bb9\u306b\u3064\u3044\u3066\u6e29\u304b\u3044\u76ee\u3067\u898b\u3066\u9802\u304d\u4f55\u304b\u304a\u6c17\u3065\u304d\u306e\u70b9\u304c\u3042\u308a\u307e\u3057\u305f\u3089\u30a2\u30c9\u30d0\u30a4\u30b9\u9802\u3051\u307e\u3059\u3068\u5e78\u3044\u3067\u3059\u3002\n\u300c\u3053\u306e\u30c7\u30fc\u30bf\u3092\u4f7f\u3063\u3066\u81ea\u5206\u3060\u3063\u305f\u3089\u3053\u3093\u306a\u5206\u6790\u3092\u3059\u308b\u300d \u3068\u3044\u3063\u305f\u5185\u5bb9\u3092\u30b3\u30e1\u30f3\u30c8\u9802\u3044\u3066\u3082\u5b09\u3057\u3044\u3067\u3059\uff01\uff08\u30b3\u30fc\u30c9\u30d9\u30fc\u30b9\u3067\u9802\u3051\u307e\u3059\u3068\u53c2\u8003\u306b\u306a\u308a\u307e\u3059\uff01\uff09\n\n\n# \u30e9\u30a4\u30d6\u30e9\u30ea\u306eimport\n\n\u4f7f\u3044\u305d\u3046\u306a\u3082\u306e\u306f\u4e00\u65e6\u8aad\u307f\u8fbc\u3093\u3067\u304a\u304d\u307e\u3059\u3002\n\n```py3\nimport numpy as np\nfrom numpy.random import randn\nimport pandas as pd\nfrom pandas import Series, DataFrame\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline\n```\n\n# \u30c7\u30fc\u30bf\u306e\u8aad\u307f\u8fbc\u307f\n\n[2016 New Coder Survey](https://www.kaggle.com/freecodecamp/2016-new-coder-survey-)\u304b\u3089\u30c7\u30fc\u30bf\u3092\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3057\u3066\u300ccode_survey.csv\u300d\u3068\u3044\u3046\u540d\u524d\u3067\u540c\u3058\u30d5\u30a9\u30eb\u30c0\u306b\u5165\u308c\u307e\u3057\u305f\u3002\n\n```py3\nsurvey_df = pd.read_csv('corder_survey.csv')\n```\n\n# \u30c7\u30fc\u30bf\u306e\u6982\u89b3\n\n## shape\n\n```py3\nsurvey_df.shape\n```\n\n```\n(15620, 113)\n```\n\n\u306a\u308b\u307b\u3069\u3002\u7d50\u69cb\u9805\u76ee\u3042\u308a\u307e\u3059\u306d\u3002\u884c\u306e\u6570\u304c15620(\u30c7\u30fc\u30bf\u306e\u5bfe\u8c61\u4eba\u6570)\u3001\u5217\u306e\u6570(\u56de\u7b54\u9805\u76ee)\u304c113\u3002\n\n## info\ninfo\u3082\u4f7f\u3046\u3068\u3044\u3044\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u3002\n\n```py3\nsurvey_df.info()\n```\n\n```\n<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 15620 entries, 0 to 15619\nColumns: 113 entries, Age to StudentDebtOwe\ndtypes: float64(85), object(28)\nmemory usage: 13.5+ MB\n```\n\n## describe\n\n```py3\nsurvey_df.describe()\n```\n\n\u5404\u5217\u306e'count', 'mean', 'std', 'min', '25%', '50%', '75%', 'max'\u3068\u3044\u3063\u305f\u60c5\u5831\u304c\u5206\u304b\u308a\u307e\u3059\u3002\n\u30c7\u30fc\u30bf\u304c\u591a\u3059\u304e\u308b\u306e\u3067\u30c7\u30fc\u30bf\u306f\u7701\u7565\u3002\n\n## \u30ab\u30e9\u30e0\u30c1\u30a7\u30c3\u30af\n\n```\nfor col in survey_df.columns:\n    print(col)\n```\n\n\u3053\u308c\u3067113\u9805\u76ee\u3092\u5168\u3066\u8868\u793a\u3057\u3066\u307f\u307e\u3057\u305f\u3002\u4eca\u56de\u306f\u7df4\u7fd2\u306a\u306e\u3067\u4f7f\u3046\u30ab\u30e9\u30e0\u3092\u306f\u3058\u3081\u306b\u30d4\u30c3\u30af\u30a2\u30c3\u30d7\u3057\u3066\u304a\u3053\u3046\u3068\u601d\u3044\u307e\u3059\u3002\n\n```\nGender: \u6027\u5225\nHasChildren: \u5b50\u4f9b\u306e\u6709\u7121\nEmploymentStatus: \u73fe\u72b6\u306e\u96c7\u7528\u5f62\u614b\nAge: \u5e74\u9f62\nIncome: \u53ce\u5165\nHoursLearning: \u5b66\u7fd2\u6642\u9593\nSchoolMajor: \u5c02\u653b\n```\n\n# \u5404\u9805\u76ee\u306e\u6982\u89b3\n\n## Gender\n\n### countplot\n\n\u6027\u5225\u306e\u30c7\u30fc\u30bf\u304b\u3089\u898b\u3066\u307f\u307e\u3059\u3002\u30d2\u30b9\u30c8\u30b0\u30e9\u30e0\u3092\u4f5c\u3063\u3066\u307f\u307e\u3059\u3002\nseaborn\u306ecountplot\u304c\u4fbf\u5229\u3067\u3059\u3002\n\n```py3\nsns.countplot('Gender', data=survey_df)\n```\n\n![gender.png](https://qiita-image-store.s3.amazonaws.com/0/40796/02cd8657-7d9c-b884-a537-a0acae9ff7d9.png)\n\n\u65e5\u672c\u306a\u3089\u7537\u5973\u3067\u5206\u3051\u3066\u3057\u307e\u3044\u305d\u3046\u3067\u3059\u304c\u3001\u591a\u69d8\u6027\u304c\u3042\u308a\u6d77\u5916\u3063\u307d\u3044\u3067\u3059\u306d\u3002\n\n[seaborn.countplot](https://stanford.edu/~mwaskom/software/seaborn/generated/seaborn.countplot.html)\n\n\n\n\u3061\u306a\u307f\u306b\u3001\u5358\u7d14\u306a\u30d2\u30b9\u30c8\u30b0\u30e9\u30e0\u306a\u3089matplotlib\u3067`plt.hist`\u3068\u304b\u3042\u308a\u307e\u3059\u3002\n\uff08\u68d2\u30b0\u30e9\u30d5\u3092\u4f5c\u308b`plt.bar`\u3082\u3042\u308a\u307e\u3059\u304c\u3001\u30c7\u30fc\u30bf\u306e\u983b\u5ea6\u5206\u5e03\u304b\u3089\u30d2\u30b9\u30c8\u30b0\u30e9\u30e0\u3092\u4f5c\u308b\u3068\u304d\u306f`plt.hist`\u304c\u697d\u3067\u3059\u3002\n\n```py3\ndataset = randn(100)\nplt.hist(dataset)\n```\n\n\uff08randn\u306f\u6b63\u898f\u5206\u5e03\u306b\u5f93\u3063\u305f\u4e71\u6570\u3092\u751f\u6210\u3057\u3066\u304f\u308c\u307e\u3059\uff09\n\n![plt.png](https://qiita-image-store.s3.amazonaws.com/0/40796/862aa0f1-e8a5-e4c7-ef48-6065eb678cb9.png)\n\n\n\u8272\u3005\u306a\u30aa\u30d7\u30b7\u30e7\u30f3\u3082\u3042\u308a\u307e\u3059\u3002\n\n```py3\n# normed: \u6b63\u898f\u5316, alpha: \u900f\u660e\u5ea6, color: \u8272, bins: \u30d3\u30f3\u6570\nplt.hist(dataset, normed=True, alpha=0.8, color='indianred', bins=15)\n```\n\n[matplotlib.pyplot.hist](http://matplotlib.org/api/pyplot_api.html#matplotlib.pyplot.hist)\n\n## HasChildren\n\n\u540c\u69d8\u306b\u5b50\u4f9b\u306e\u6709\u7121\u3082`countplot`\u3092\u4f7f\u3063\u3066\u63cf\u753b\u3057\u3066\u307f\u307e\u3059\u3002\n\n```py3\nsns.countplot('HasChildren', data=survey_df)\n```\n\n![has_children.png](https://qiita-image-store.s3.amazonaws.com/0/40796/0550f06c-622c-6dec-5f14-f8b11aeee19e.png)\n\n0\u304b1\u3060\u3068\u5206\u304b\u308a\u306b\u304f\u3044\u306e\u3067\u5b50\u4f9b\u306a\u3057\u3092`No`\u3001\u5b50\u4f9b\u3042\u308a\u3092`Yes`\u3068\u3057\u3066\u307f\u307e\u3059\u3002\n\n```py3\nsurvey_df['HasChildren'].loc[survey_df['HasChildren'] == 0] = 'No'\nsurvey_df['HasChildren'].loc[survey_df['HasChildren'] == 1] = 'Yes'\n```\n\n[pandas.DataFrame.loc](http://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.loc.html)\n\n\u3053\u308c\u3067\u5909\u63db\u51fa\u6765\u307e\u3057\u305f\u3002\n\n### df.map\n\nmap\u3092\u4f7f\u3063\u305f\u5909\u63db\u3067\u3082\u826f\u3055\u305d\u3046\u3067\u3059\u3002\n\n```py3\nsurvey_df['HasChildren'] = survey_df['HasChildren'].map({0: 'No', 1: 'Yes'})\nsns.countplot('HasChildren', data=survey_df)\n```\n\n```py3\nsns.countplot('HasChildren', data=survey_df)\n```\n\n![has_children_2.png](https://qiita-image-store.s3.amazonaws.com/0/40796/e8737a24-0521-f7b5-dc62-a5a3318357d7.png)\n\n\u5c11\u3057\u5206\u304b\u308a\u3084\u3059\u3044\u3067\u3059\u306d\uff01\n\n## EmploymentStatus\n\n\u73fe\u72b6\u306e\u96c7\u7528\u5f62\u614b\u3082`countplot`\u3067\u8868\u3057\u3066\u307f\u307e\u3059\u3002\n\n```py3\nsns.countplot('EmploymentStatus', data=survey_df)\n```\n\n![employment_status.png](https://qiita-image-store.s3.amazonaws.com/0/40796/e3ec44b3-32fe-05ba-e629-513c2188b058.png)\n\n\u306a\u3093\u304b\u3054\u3061\u3083\u3063\u3068\u3057\u3066\u5206\u304b\u308a\u306b\u304f\u3044\u3002\u3002\n\n\u3068\u3044\u3046\u308f\u3051\u3067\u8ef8\u3092\u5909\u3048\u3066\u307f\u307e\u3059\u3002\n\n### countplot \u8ef8\u306e\u5909\u66f4\n\n```py3\nsns.countplot(y='EmploymentStatus', data=survey_df)\n```\n\n![employment_status_2.png](https://qiita-image-store.s3.amazonaws.com/0/40796/da402440-8de3-bf11-4793-3ddb4d878329.png)\n\n\u898b\u3084\u3059\u3044\uff01\n\n## Age\n\n\u3053\u308c\u3082`countplot`\u3092\u4f7f\u3063\u3066\u307f\u307e\u3059\u3002\n\n```py3\nsns.countplot('Age', data=survey_df)\n```\n\n![age.png](https://qiita-image-store.s3.amazonaws.com/0/40796/a4793b83-489a-3785-38e0-358690479699.png)\n\n\u30ab\u30e9\u30d5\u30eb\u3067\u7dba\u9e97\u3067\u3059\u3051\u3069\u3001\u30b0\u30e9\u30d5\u3068\u3057\u3066\u306f\u898b\u306b\u304f\u3044\u3067\u3059\u306d\u3002\n\n\u3068\u3044\u3046\u308f\u3051\u3067\u30b0\u30e9\u30d5\u3092\u6ed1\u3089\u304b\u306b\u3057\u3066\u307f\u307e\u3059\u3002\n\n### kde plot\n\n\u30ab\u30fc\u30cd\u30eb\u5bc6\u5ea6\u63a8\u5b9a ( kde: kernel density plot ) \u3092\u4f7f\u3044\u307e\u3059\u3002\u3084\u308a\u65b9\u81ea\u4f53\u306f\u7c21\u5358\u3067\u3059\u3002\n\n```py3\nsns.kdeplot(survey_df['Age'])\n```\n\n![age_2.png](https://qiita-image-store.s3.amazonaws.com/0/40796/9fda85a8-c65d-ff1b-b1f6-bf8d3e3a0192.png)\n\n20\u4ee3\u304b\u308930\u4ee3\u306e\u65b9\u304c\u591a\u3044\u3093\u3067\u3059\u306d\u3002\u60f3\u50cf\u901a\u308a\u3068\u3044\u3063\u305f\u3068\u3053\u308d\u3067\u3057\u3087\u3046\u304b\u3002\n\u305f\u3060\u3001\u3042\u308b\u7a0b\u5ea6\u5e74\u9f62\u304c\u4e0a\u304c\u3063\u3066\u3082\u88fe\u306f\u5e83\u304c\u3063\u3066\u3044\u307e\u3059\u306d\u3002\n\n### \u30ab\u30fc\u30cd\u30eb\u5bc6\u5ea6\u63a8\u5b9a\n\n\u3053\u3053\u3067\u3001\u30ab\u30fc\u30cd\u30eb\u5bc6\u5ea6\u63a8\u5b9a\u3092\u5c11\u3057\u8003\u3048\u3066\u307f\u307e\u3059\u3002\uff08Wikipedia\u3084\u305d\u306e\u4ed6\u30b5\u30a4\u30c8\u3092\u898b\u308b\u3068\u3061\u3083\u3093\u3068\u3057\u305f\u89e3\u8aac\u304c\u898b\u308c\u308b\u304b\u3068\u601d\u3044\u307e\u3059\u3002\uff09\n[\u30ab\u30fc\u30cd\u30eb\u5bc6\u5ea6\u63a8\u5b9a](https://ja.wikipedia.org/wiki/%E3%82%AB%E3%83%BC%E3%83%8D%E3%83%AB%E5%AF%86%E5%BA%A6%E6%8E%A8%E5%AE%9A) \n\n```py3\ndataset = randn(30)\nplt.hist(dataset, alpha=0.5)\nsns.rugplot(dataset)\n```\n\nrugplot\u306f\u5404\u6a19\u672c\u70b9\u3092\u68d2\u3067\u793a\u3057\u3066\u304f\u308c\u307e\u3059\u3002\n\n![kernel.png](https://qiita-image-store.s3.amazonaws.com/0/40796/772fbe77-ea26-cf3e-e230-52eaeb62306d.png)\n\n\u3053\u306e\u30b0\u30e9\u30d5\u306e\u5404\u6a19\u672c\u70b9\u305d\u308c\u305e\u308c\u306b\u5bfe\u3057\u3066\u3001\u30ab\u30fc\u30cd\u30eb\u95a2\u6570\uff08\u4e00\u4f8b\u3068\u3057\u3066\u6b63\u898f\u5206\u5e03\u3092\u8003\u3048\u308b\u3068\u5206\u304b\u308a\u3084\u3059\u3044\uff09\u3092\u4f5c\u3063\u3066\u305d\u308c\u3092\u8db3\u3057\u5408\u308f\u305b\u308b\u30a4\u30e1\u30fc\u30b8\u3067\u3059\u3002\n\n```py3\nsns.kdeplot(dataset)\n```\n\n![kernel_2.png](https://qiita-image-store.s3.amazonaws.com/0/40796/9be82cfd-8421-5fd2-d38c-372677fb9754.png)\n\n\u30ab\u30fc\u30cd\u30eb\u5bc6\u5ea6\u63a8\u5b9a\u3092\u3059\u308b\u4e0a\u3067\n\n- \u30ab\u30fc\u30cd\u30eb\u95a2\u6570: \u5404\u6a19\u672c\u70b9\u306e\u5f71\u97ff\u5ea6\u306e\u5e83\u304c\u308a\u65b9\n- \u30d0\u30f3\u30c9\u5e45: \u30ab\u30fc\u30cd\u30eb\u95a2\u6570\u306e\u5e83\u304c\u308a\u306e\u5e45\n\n\u306e2\u3064\u3092\u6c7a\u5b9a\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\n\n#### \u30ab\u30fc\u30cd\u30eb\u95a2\u6570\n\n\u8272\u3005\u306a\u30ab\u30fc\u30cd\u30eb\u95a2\u6570\u3092\u7528\u3044\u308b\u3053\u3068\u3082\u51fa\u6765\u307e\u3059\u3002\n\u30c7\u30d5\u30a9\u30eb\u30c8\u306f gau \uff08\u30ac\u30a6\u30b9\u5206\u5e03\u3001\u6b63\u898f\u5206\u5e03\uff09\u3067\u3059\u3002\n\n```py3\nkernel_options = [\"gau\", \"biw\", \"cos\", \"epa\", \"tri\", \"triw\"]\nfor kernel in kernel_options:\n    sns.kdeplot(dataset, kernel=kernel, label=kernel)\n```\n\n![kernel_3.png](https://qiita-image-store.s3.amazonaws.com/0/40796/ebe43864-87a8-98a5-d2ec-b1f385e7ab26.png)\n\n\n\n#### \u30d0\u30f3\u30c9\u5e45\n\n\u30d0\u30f3\u30c9\u5e45\u3082\u4ee3\u3048\u3089\u308c\u307e\u3059\u3002\n\n```py3\nfor bw in np.arange(0.5, 2, 0.25):\n  sns.kdeplot(dataset, bw=bw, label=bw)\n```\n\n![kernel_4.png](https://qiita-image-store.s3.amazonaws.com/0/40796/d3252bae-f8ba-d15c-f1a8-e3acb8b6abf2.png)\n\n\u3053\u3053\u307e\u3067\u3067\u30ab\u30fc\u30cd\u30eb\u5bc6\u5ea6\u63a8\u5b9a\u306e\u8aac\u660e\u306f\u4e00\u65e6\u533a\u5207\u308a\u3001\u6b21\u306b\u3044\u304d\u307e\u3059\u3002\n\n## Income\n\n\u3053\u3053\u3067\u3082`kdeplot`\u3092\u4f7f\u3044\u307e\u3059\u3002\n\n```py3\nsns.kdeplot(survey_df['Income'])\n```\n\n![income.png](https://qiita-image-store.s3.amazonaws.com/0/40796/c4c278a3-4c86-96e7-2b32-71684ac849db.png)\n\n\u5358\u4f4d\u306f\u30c9\u30eb\u3067\u3057\u3087\u3046\u304b\u3089\u5e74\u53ce\u3067\u3059\u306d\u3002\n\n\u30c7\u30fc\u30bf\u3092\u3082\u3046\u5c11\u3057\u898b\u3066\u307f\u307e\u3059\u3002\n\n### describe\n\n```py3\nsurvey_df['Income'].describe()\n```\n\n```\nRuntimeWarning: Invalid value encountered in median\ncount      7329.000000\nmean      44930.010506\nstd       35582.783216\nmin        6000.000000\n25%                NaN\n50%                NaN\n75%                NaN\nmax      200000.000000\nName: Income, dtype: float64\n```\n\n\u56db\u5206\u4f4d\u70b9\u304cNaN\u306b\u306a\u308b\u554f\u984c\u306f\u8a18\u4e8b\u4f5c\u6210\u6642\u70b9\u3067\u65e2\u306b\u89e3\u6c7a\u6e08\u307f\u3067\u306f\u3042\u308b\u3088\u3046\u3067\u3059\u304c\u3001merge\u5f85\u3061\u307f\u305f\u3044\u3067\u3059\u3002\n\u6c17\u306b\u305b\u305a\u30d0\u30fc\u30b8\u30e7\u30f3\u30a2\u30c3\u30d7\u3092\u5f85\u3061\u307e\u3059\u3002\n[describe() returns RuntimeWarning: Invalid value encountered in median RuntimeWarning #13146](https://github.com/pydata/pandas/issues/13146)\n\n### boxplot\n\nboxplot(boxplot)\u3092\u4f5c\u6210\u3057\u305f\u3044\u3068\u601d\u3044\u307e\u3059\u3002\n\n```py3\nsns.boxplot(survey['Income'])\n```\n\n![boxplot.png](https://qiita-image-store.s3.amazonaws.com/0/40796/06e1e68f-8a0f-fbf7-e9ba-ebb2c48a6892.png)\n\n\u5de6\u306e\u7e26\u7dda\u304b\u3089\u9806\u306b\u7bb1\u3072\u3052\u306e\u6700\u5c0f\u3001\u7b2c\u4e00\u56db\u5206\u4f4d\u70b9(Q1)\u3001\u4e2d\u592e\u5024\u3001\u7b2c\u4e09\u56db\u5206\u4f4d\u70b9\uff08Q3)\u3001\u7bb1\u3072\u3052\u306e\u6700\u5927\u3092\u8868\u3057\u307e\u3059\u3002IQR = Q3-Q1 \u3068\u3057\u3066 (\u6700\u5c0f\u5024 - IQR1.5) ~ (\u6700\u5927\u5024 + IQR1.5 ) \u304b\u3089\u5916\u308c\u305f\u3082\u306e\u3092\u7bb1\u3072\u3052\u304b\u3089\u5916\u308c\u305f\u5916\u308c\u5024\u3068\u3057\u3066\u9ed2\u306e\u70b9\u3067\u8868\u3055\u308c\u307e\u3059\u3002\n\n\u5916\u308c\u5024\u3092\u306a\u3057\u3067\u8868\u73fe\u3059\u308b\u3053\u3068\u3082\u51fa\u6765\u307e\u3059\u3002\n\n```py3\nsns.boxplot(survey['Income'], whips=np.inf)\n```\n\n![boxplot_2.png](https://qiita-image-store.s3.amazonaws.com/0/40796/b1281b92-8bac-99f1-d769-ef8649951169.png)\n\n### violinplot\n\nboxplot\u306bkde\u306e\u60c5\u5831\u3092\u6301\u305f\u305b\u305f\u30f4\u30a1\u30f4\u30a3\u30aa\u30ea\u30f3\u30d7\u30ed\u30c3\u30c8\u3068\u3044\u3046\u3082\u306e\u3082\u3042\u308a\u307e\u3059\u3002\n\n```py3\nsns.violinplot(survey_df['Income'])\n```\n\n![violinplot.png](https://qiita-image-store.s3.amazonaws.com/0/40796/b3819ae9-a0c8-cddc-e2b1-c537ef7b2b18.png)\n\n\u5206\u5e03\u304c\u3088\u308a\u5206\u304b\u308a\u3084\u3059\u3044\u3067\u3059\u306d\uff01\n\n## HoursLearning\n\n\u5b66\u7fd2\u6642\u9593\u3092\u898b\u3066\u307f\u307e\u3059\u3002\n\u307e\u305a\u306fkde\u30d7\u30ed\u30c3\u30c8\u3092\u3057\u3066\u307f\u307e\u3059\u3002\n\n```py3\nsns.kdeplot(survey_df['HoursLearning'])\n```\n\n![hours_kde.png](https://qiita-image-store.s3.amazonaws.com/0/40796/d3d61a6f-8845-c62c-d400-d0b0f102f2b4.png)\n\n\u6642\u9593\u7684\u306b1\u9031\u9593\u306e\u5b66\u7fd2\u91cf\u3067\u3059\u306d\u3002\n\u307e\u305f\u6975\u5024\u304c\u76ee\u7acb\u3061\u307e\u3059\u304c\u3001\u3053\u308c\u306f\u304d\u308a\u306e\u3088\u3044\u6570\u5b57\u3067\u8d77\u3053\u3063\u3066\u3044\u307e\u3059\u3002\u666e\u901a\u306f\u304d\u308a\u306e\u826f\u3044\u6570\u5b57\u3067\u30a2\u30f3\u30b1\u30fc\u30c8\u306b\u7b54\u3048\u308b\u306e\u3067\u3053\u3046\u306a\u3063\u3066\u3057\u307e\u3044\u307e\u3059\u306d\u3002\n\nviolinplot\u3082\u3057\u3066\u304a\u304d\u307e\u3059\u3002\n\n```py3\nsns.violinplot(survey_df['HoursLearning'])\n```\n\n![hours_violinplot.png](https://qiita-image-store.s3.amazonaws.com/0/40796/400e4fdb-fee5-64aa-0738-911445344328.png)\n\nkde\u30d7\u30ed\u30c3\u30c8\u306e\u7279\u5fb4\u304c\u53cd\u6620\u3055\u308c\u3066\u3044\u307e\u3059\u3002\n\n\u307e\u305f\u3001`countplot`\u3068`kdeplot`\u306e\u4e21\u65b9\u3092\u4e00\u7dd2\u306b\u751f\u6210\u51fa\u6765\u308b`distplot`\u3068\u3044\u3046\u3082\u306e\u3082\u3042\u308a\u307e\u3059\u3002\n`nan`\u306f\u524a\u9664\u3057\u3066\u4f7f\u3063\u3066\u3044\u307e\u3059\u3002\n\n```py3\nhours_learning = survey_df['HoursLearning']\nhours_learning = hours_learning.dropna()\nsns.distplot(hours_learning)\n```\n\n![hours_dist.png](https://qiita-image-store.s3.amazonaws.com/0/40796/76e15f83-043c-8891-296f-9a8593a3e712.png)\n\n\u30d2\u30b9\u30c8\u30b0\u30e9\u30e0\u3092\u30e9\u30b0\u30d7\u30ed\u30c3\u30c8\u306b\u5909\u3048\u305f\u308a\u3001\u30aa\u30d7\u30b7\u30e7\u30f3\u3082\u4ed8\u3051\u308b\u3053\u3068\u304c\u51fa\u6765\u307e\u3059\u3002\n\u4fbf\u5229\u3067\u3059\uff01\n\n```py3\nsns.distplot(hours_learning, rug=True, hist=False, kde_kws={'color':'indianred'})\n```\n\n![hours_dist_2.png](https://qiita-image-store.s3.amazonaws.com/0/40796/8810d89f-272f-412b-5905-55084652ecdc.png)\n\n\n\n## SchoolMajor\n\n\u9023\u7d9a\u5024\u3067\u3059\u3068`kdeplot`\u304c\u6d3b\u8e8d\u3057\u307e\u3059\u304c\u3001\u3053\u308c\u306f\u30ab\u30c6\u30b4\u30ea\u5206\u3051\u306a\u306e\u3067`countplot`\u3092\u4f7f\u3044\u307e\u3059\u3002\n\n```py3\nsns.countplot(y='SchoolMajor' , data=survey_df)\n```\n\n![major_countplot.png](https://qiita-image-store.s3.amazonaws.com/0/40796/71f31c2a-1229-fe49-b267-4b6520c3414a.png)\n\n\u898b\u306b\u304f\u3044\u3067\u3059\u3002\u3002\u30ab\u30c6\u30b4\u30ea\u6570\u304c\u591a\u3059\u304e\u308b\u306e\u3067\u3059\u306d\u3002\n\u4e0a\u4f4d10\u500b\u304f\u3089\u3044\u304c\u898b\u305f\u3044\u3067\u3059\u3002\n\n### collections.Counter\n\n```py3\nfrom collections import Counter\nmajor_count = Counter(survey_df['SchoolMajor'])\nmajor_count.most_common(10)\n```\n\n\u6a19\u6e96\u30e9\u30a4\u30d6\u30e9\u30ea\u306e`collections`\u3092\u4f7f\u3046\u3053\u3068\u3067\u30ab\u30a6\u30f3\u30c8\u3057\u307e\u3059\u3002\n\u3055\u3089\u306b`most_common(10)`\u3068\u3059\u308b\u3053\u3068\u3067\u305d\u306e\u4e2d\u306e\u4e0a\u4f4d10\u4ef6\u3092\u53d6\u5f97\u3059\u308b\u3053\u3068\u304c\u51fa\u6765\u307e\u3059\u3002\n\n```\n[(nan, 7170),\n ('Computer Science', 1387),\n ('Information Technology', 408),\n ('Business Administration', 284),\n ('Economics', 252),\n ('Electrical Engineering', 220),\n ('English', 204),\n ('Psychology', 187),\n ('Electrical and Electronics Engineering', 164),\n ('Software Engineering', 159)]\n```\n\n\u30b0\u30e9\u30d5\u306b\u8868\u793a\u3055\u305b\u307e\u3057\u3087\u3046\u3002\n\n```py3\nX = []\nY = []\nmajor_count_top10 = major_count.most_common(10)\nfor record in major_count_top10:\n    X.append(record[0])\n    Y.append(record[1])\n\n# [nan, 'Computer Science', 'Information Technology', 'Business Administration', 'Economics', 'Electrical Engineering', 'English', 'Psychology', 'Electrical and Electronics Engineering', 'Software Engineering']\n# [7170, 1387, 408, 284, 252, 220, 204, 187, 164, 159]\n\nplt.barh(np.arange(10), Y)\nplt.yticks(np.arange(10), X)\n```\n\n![major_bar.png](https://qiita-image-store.s3.amazonaws.com/0/40796/64377968-6a14-293e-9571-4b36772d4690.png)\n\n\u3053\u3061\u3089\u3092\u53c2\u8003\u306b\u3057\u307e\u3057\u305f\u3002\n[\u68d2\u30b0\u30e9\u30d5 -matplotlib\u5165\u9580](http://yubais.net/doc/matplotlib/bar.html)\n\n`plt.barh`\u3092\u4f7f\u3046\u3068`plt.bar`\u306e\u8ef8\u3092\u5909\u3048\u308b\u3053\u3068\u304c\u51fa\u6765\u307e\u3059\u3002`yticks`\u3092\u4f7f\u3063\u3066\u30e9\u30d9\u30eb\u3082\u3064\u3051\u307e\u3057\u305f\u3002\n\u3055\u3066\u3001nan\u306f\u8868\u793a\u3055\u305b\u305f\u304f\u306a\u3044\u3067\u3059\u3057\u3001\u9006\u9806\u306b\u4e26\u3073\u66ff\u3048\u305f\u3044\u3067\u3059\u3002\n\n```py3\nX = []\nY = []\nmajor_count_top10 = major_count.most_common(10)\nmajor_count_top10.reverse()\nfor record in major_count_top10:\n    # record[0] == record[0]\u306b\u95a2\u3057\u3066\u306f\u4e0b\u306b\u88dc\u8db3\u3042\u308a\n    if record[0] == record[0]:\n        X.append(record[0])\n        Y.append(record[1])\n\n# ['Software Engineering', 'Electrical and Electronics Engineering', 'Psychology', 'English', 'Electrical Engineering', 'Economics', 'Business Administration', 'Information Technology', 'Computer Science']\n# [159, 164, 187, 204, 220, 252, 284, 408, 1387]\n\nplt.barh(np.arange(9), Y)\nplt.yticks(np.arange(9), X)\n```\n\n![major_barplot_2.png](https://qiita-image-store.s3.amazonaws.com/0/40796/a8df41a3-1938-9a95-9013-4452493c4702.png)\n\n\u8003\u3048\u3066\u3044\u305f\u30b0\u30e9\u30d5\u304c\u51fa\u6765\u307e\u3057\u305f\uff01\n\n\n### [\u8ffd\u8a18] if record[0] == record[0]: \u306b\u3064\u3044\u3066 \n\n\u3053\u3053\u306f\u3001`NaN`\u540c\u58eb\u306e\u6bd4\u8f03\u306e\u3068\u304d\u3060\u3051`False`\u304c\u8fd4\u3063\u3066\u304f\u308b\u3068\u3044\u3046\u3053\u3068\u3067\u3053\u3046\u3044\u3046\u5b9f\u88c5\u3092\u3057\u307e\u3057\u305f\u3002\uff08\u4ee5\u4e0b\u306eURL\u3082\u53c2\u7167\uff09\n\n[Python, Nan\u306e\u5224\u5b9a\u306e\u4ed5\u65b9\u3002](http://nekoyukimmm.hatenablog.com/entry/2015/03/26/095107)\n\n\u3057\u304b\u3057\u3001\u5206\u304b\u308a\u306b\u304f\u3055\u304c\u3042\u308b\u306e\u3067\n@shiracamus \u3055\u3093\u306b\u7d39\u4ecb\u9802\u304d\u307e\u3057\u305f\u5b9f\u88c5\u65b9\u6cd5\u306e\u307b\u3046\u304c\u5206\u304b\u308a\u3084\u3059\u3044\u3067\u3059\u3002\u79c1\u3082\u3053\u3061\u3089\u3092\u4eca\u5f8c\u4f7f\u304a\u3046\u3068\u601d\u3044\u307e\u3059\u3002\n\n```\nif record[0] == record[0]:\n```\n\n\u306e\u90e8\u5206\u3092\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u5909\u66f4\u3002\n\n```\nif pd.notnull(record[0]):\n```\n\n\n\n\n# \u30c7\u30fc\u30bf\u306e\u95a2\u9023\n\n## Gender \u3068 HasChildren\n\n\u307e\u305a\u3001Gender\u306f\u7c21\u5358\u306e\u305f\u3081\u306b\u7537\u5973\u3060\u3051\u306b\u3057\u307e\u3059\u3002\n\n```py3\nmale_female_df = survey_df.where((survey_df['Gender'] == 'male') + (survey_df['Gender'] == 'female') )\n```\n\n`countplot`\u306e`hue`\u3092\u4f7f\u3046\u3053\u3068\u3067\u5c64\u5225\u306b\u30ab\u30a6\u30f3\u30c8\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\n### countplot(hue)\n\n```py3\nsns.countplot('Gender', data=male_female_df, hue='HasChildren')\n```\n\n![gender_haschildren_countplot.png](https://qiita-image-store.s3.amazonaws.com/0/40796/2eed906f-479e-205a-ab8b-5f937fd8c90d.png)\n\n\u7537\u5973\u3068\u3082\u540c\u3058\u3088\u3046\u306a\u5b50\u6301\u3061\u306e\u5272\u5408\u307f\u305f\u3044\u3067\u3059\u306d\u3002\n\n## Gender \u3068 Age\n\n`countplot`\u4ee5\u5916\u306e\u30b0\u30e9\u30d5\u3067\u3082\u5c64\u5225\u306b\u8868\u3059\u3053\u3068\u304c\u51fa\u6765\u307e\u3059\u3002`FacetGrid`\u3092\u4f7f\u3044\u307e\u3059\u3002\n\n### sns.FacetGrid\n\n```py3\nfig = sns.FacetGrid(male_female_df, hue='Gender', aspect=4)\nfig.map(sns.kdeplot, 'Age', shade=True)\noldest = male_female_df['Age'].max()\nfig.set(xlim=(0, oldest))\nfig.add_legend()\n```\n\n![gender_age_facetgrid.png](https://qiita-image-store.s3.amazonaws.com/0/40796/21fb6033-dd86-8828-e882-a9bbd8315fc1.png)\n\n\u82e5\u5e72\u7537\u6027\u306e\u307b\u3046\u304c\u82e5\u3044\u5074\u306b\u3042\u308a\u307e\u3059\u306d\u3002\n\n## EmploymentStatus \u3068 Gender\n\nEmploymentStatus\u306f\u8907\u6570\u3042\u308b\u306e\u3067\u4e0a\u4f4d\u306e\u6570\u4ef6\u3060\u3051\u4f7f\u3044\u305f\u3044\u3068\u601d\u3044\u307e\u3059\u3002\n\n```py3\n# male_female_df\u306f survey_df\u306eGender\u3092\u7537\u5973\u306b\u7d5e\u3063\u305f\u3082\u306e\n# EmploymentStatus\u306e\u4e0a\u4f4d5\u4ef6\u3092\u53d6\u5f97\nfrom collections import Counter\nemploy_count = Counter(male_female_df['EmploymentStatus'])\nemploy_count_top = employ_count.most_common(5)\nprint(employ_count_top)\nemploy_list =[]\n\nfor record in employ_count_top:\n     if record[0] == record[0]:\n        employ_list.append(record[0])\n\ndef top_employ(status):\n    return status in employ_list\n\n# apply\u3092\u4f7f\u3063\u3066employ_list\u306b\u5165\u3063\u305f\u9805\u76ee\u306e\u884c\u3060\u3051\u3092\u53d6\u5f97\nnew_survey_df = male_female_df.loc[male_female_df['EmploymentStatus'].apply(top_employ)]\n\nsns.countplot(y='EmploymentStatus', data=new_survey_df)\n```\n\n![employment_status_only_3.png](https://qiita-image-store.s3.amazonaws.com/0/40796/d7638ca4-b917-14a3-2fc1-97659e03145b.png)\n\n\u3053\u308c\u3067\u4e0a\u4f4d3\u4ef6\u306e\u9805\u76ee\u3060\u3051\u306b\u306a\u308a\u307e\u3057\u305f\u3002\n\n`countplot`\u306ehue\u3092\u4f7f\u3063\u3066\u7537\u5973\u306e\u5c64\u5225\u306b\u898b\u3066\u307f\u307e\u3059\u3002\n\n```py3\nsns.countplot(y='EmploymentStatus', data=employ_df, hue='Gender')\n```\n\n![employment_status_hue_gender.png](https://qiita-image-store.s3.amazonaws.com/0/40796/0a6d4c0e-ef58-09fc-356e-b495f70c572d.png)\n\n## EmploymentStatus \u3068 HasChildren\n\n\u307e\u305a\u3001HasChildren\u3092`No->0, Yes->1`\u306b\u5909\u63db\u3057\u3066\u304a\u304d\u307e\u3059\u3002\n\n```py3\nnew_survey_df['HasChildren'] = new_survey_df['HasChildren'].map({'No': 0, 'Yes': 1})\n```\n\n\u3053\u3053\u3067`factorplot`\u3092\u4f7f\u3044\u307e\u3059\u3002`EmploymentStatus`\u304c\u5b50\u4f9b\u306e\u6709\u7121\u306b\u3069\u308c\u304f\u3089\u3044\u95a2\u308f\u3063\u3066\u3044\u308b\u304b\u898b\u3066\u307f\u307e\u3059\u3002\n\n### factorplot\n\n```py3\nsns.factorplot('EmploymentStatus', 'HasChildren', data=new_survey_df, aspect=2)\n```\n\n![factorplot_employment_haschildren.png](https://qiita-image-store.s3.amazonaws.com/0/40796/2d9f1cd3-d96b-376f-9cb9-8f4088cf9484.png)\n\n`Emloyed for wages`\u304c\u5c11\u3057\u5024\u304c\u9ad8\u3044\u3067\u3059\u306d\u3002\u3053\u308c\u306f\u7d0d\u5f97\u611f\u304c\u3042\u308a\u307e\u3059\u3002\n\n\u307e\u305f\u3001factorplot\u3082\u5c64\u5225\u306b\u898b\u308b\u3053\u3068\u304c\u51fa\u6765\u308b\u306e\u3067\u7537\u5973\u306b\u9055\u3044\u304c\u306a\u3044\u304b\u898b\u3066\u307f\u307e\u3059\u3002\n\n```py3\nsns.factorplot('EmploymentStatus', 'HasChildren', data=new_survey_df, aspect=2, hue='Gender')\n```\n\n![factorplot_employment_hue_gender.png](https://qiita-image-store.s3.amazonaws.com/0/40796/bb4cfb77-eb16-5291-dbfc-c6d1295e2b8d.png)\n\n\u3053\u308c\u306f\u306a\u304b\u306a\u304b\u9762\u767d\u3044\u3067\u3059\u306d\u3002\u7537\u5973\u3067\u898b\u308b\u3068\u5b9f\u306f\u5168\u7136\u9055\u3044\u307e\u3057\u305f\u3002\n\u96c7\u7528\u4e8b\u60c5\u3068\u7167\u3089\u3057\u5408\u308f\u305b\u308b\u3068\u8272\u3005\u3068\u8003\u3048\u3089\u308c\u308b\u3053\u3068\u304c\u3042\u308a\u305d\u3046\u3067\u3059\u3002\n\n## Age \u3068 HasChildren\n\n### lmplot \n\n\u56de\u5e30\u76f4\u7dda\u3067\u95a2\u4fc2\u3092\u898b\u3066\u307f\u305f\u3044\u3068\u601d\u3044\u307e\u3059\u3002\u56de\u5e30\u76f4\u7dda\u306b\u306f `lmplot`\u3092\u4f7f\u3044\u307e\u3059\u3002\n\n```py3\nsns.lmplot('Age', 'HasChildren', data=new_survey_df)\n```\n\n![lmplot_age_haschildren.png](https://qiita-image-store.s3.amazonaws.com/0/40796/e5c13432-7571-144f-195d-22796c0de4b6.png)\n\n\u3055\u3066\u3001`lmplot`\u3082\u5c64\u5225\u306b\u898b\u308b\u3053\u3068\u304c\u51fa\u6765\u308b\u306e\u3067\u3084\u3063\u3066\u307f\u305f\u3044\u3068\u601d\u3044\u307e\u3059\u3002\n\u307e\u305a\u306f`EmploymentStatus`\u3067\u5c64\u5225\u306b\u3057\u307e\u3059\u3002\n\n```py3\nsns.lmplot('Age', 'HasChildren', data=new_survey_df, hue='EmploymentStatus')\n```\n\n![lmplot_hue_employmentstatus.png](https://qiita-image-store.s3.amazonaws.com/0/40796/64461941-803b-a1f6-9205-21a333237925.png)\n\n\u4e00\u822c\u306b\u306f `Employed for wages`\u306e\u5024\u304c\u5c11\u3057\u9ad8\u3044\u3067\u3059\u304c\u3001\u524d\u9805\u3067\u898b\u305f\u3088\u3046\u306b\u7537\u5973\u3067\u5206\u3051\u308b\u3068\u3082\u3046\u5c11\u3057\u306f\u3063\u304d\u308a\u5206\u304b\u308c\u305d\u3046\u3067\u3059\u306d\u3002\n\n\n\u3064\u3044\u3067\u306b\u3001`Gender`\u3067\u3082\u5c64\u5225\u306b\u3057\u3066\u304a\u304d\u307e\u3059\u3002\n\n```py3\nsns.lmplot('Age', 'HasChildren', data=new_survey_df, hue='Gender')\n```\n\n![lmplot_hue_gender.png](https://qiita-image-store.s3.amazonaws.com/0/40796/42f25cbb-0cc4-e032-501b-d1f48a923b3e.png)\n\n### \u8907\u6570\u306e\u30b0\u30e9\u30d5\u3092\u4e26\u3079\u3066\u8868\u793a\u3059\u308b\n\n\u8907\u6570\u306e\u30b0\u30e9\u30d5\u3092\u4e26\u3079\u3066\u8868\u793a\u3055\u305b\u308b\u65b9\u6cd5\u3082\u3042\u308a\u307e\u3059\u3002`subplots`\u3092\u4f7f\u3063\u30662\u3064\u306e\u30b0\u30e9\u30d5\u3092\u63cf\u753b\u3057\u307e\u3057\u305f\u3002\n\n```py3\nfig, (axis1, axis2) = plt.subplots(1, 2, sharey=True)\nsns.regplot('HasChildren', 'Age', data=new_survey_df, ax=axis1)\nsns.violinplot(y='Age', x='HasChildren', data=new_survey_df, ax=axis2)\n```\n\n![subplots.png](https://qiita-image-store.s3.amazonaws.com/0/40796/01fa45fd-1efc-2baf-3c55-a1b1ed0970da.png)\n\n`regplot`\u3068\u3044\u3046\u306e\u306f`lmplot`\u306e\u4f4e\u30ec\u30d9\u30eb\u30d0\u30fc\u30b8\u30e7\u30f3\u3067\u3001\u5358\u7d14\u306a\u56de\u5e30\u3092\u4f5c\u308b\u4e0a\u3067\u306f\u540c\u3058\u3067\u3059\u3002\n`regplots`\u3092\u4f7f\u3063\u305f\u306e\u306f`subplots`\u3067\u4f7f\u3048\u308b\u95a2\u6570\u306f`matplotlib Axes`\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u8fd4\u3059\u3082\u306e\u306b\u9650\u3089\u308c\u308b\u3088\u3046\u3067`lmplot`\u304c\u4f7f\u3048\u306a\u304b\u3063\u305f\u304b\u3089\u3067\u3059\u3002\n\n\u8a73\u3057\u3044\u8aac\u660e\u306f\n[Plotting with seaborn using the matplotlib object-oriented interface](http://stackoverflow.com/questions/23969619/plotting-with-seaborn-using-the-matplotlib-object-oriented-interface)\n\u304c\u5206\u304b\u308a\u3084\u3059\u304b\u3063\u305f\u3067\u3059\u3002\n\n\u3053\u306e\u8a18\u4e8b\u3067\u3044\u3046 \"Axis-level\" function\u306f\u4f7f\u3048\u308b\u3088\u3046\u3067\u3059\u3002\n(regplot, boxplot, kdeplot, and many others)\n\n\u3053\u308c\u306b\u5bfe\u3057\u3066 \"Figure-level\" function\u3082\u7d39\u4ecb\u3055\u308c\u3066\u3044\u3066\u305d\u306e\u4e2d\u306b`lmplot`\u3082\u3042\u308a\u307e\u3059\u3002\n(lmplot, factorplot, jointplot and one or two others)\n\n\u307b\u3068\u3093\u3069`Axis`\u3067\u4e00\u90e8`Figure`\u3063\u3066\u611f\u3058\u3067\u3059\u304b\u306d\u3002\n\n\u305d\u308c\u3067Figure\u306b\u95a2\u3057\u3066\u306f`FacetGrid`\u304c\u826f\u3044\u307f\u305f\u3044\u3067\u3059\u3002\n[Plotting on data-aware grids](http://stanford.edu/~mwaskom/software/seaborn/tutorial/axis_grids.html)\n\n\n`FacetGrid`\u3067\u3082\u8907\u6570\u306e\u30b0\u30e9\u30d5\u3092\u4e26\u3079\u3089\u308c\u307e\u3059\u3002\nAge \u306e\u5206\u5e03\u3092 EmploymentStatus\u3054\u3068\u306b\u4e26\u3079\u3066\u8868\u793a\u3057\u3066\u307f\u307e\u3057\u305f\u3002\n\n```py3\nfig = sns.FacetGrid(new_survey_df, col='EmploymentStatus', aspect=1.5)\nfig.map(sns.distplot, 'Age')\noldest = new_survey_df['Age'].max()\nfig.set(xlim=(0, oldest))\nfig.add_legend()\n```\n\n![facetgrid_age_haschildren.png](https://qiita-image-store.s3.amazonaws.com/0/40796/39a2d638-5812-d144-1018-a926e38943ea.png)\n\n\n# \u304a\u308f\u308a\u306b\n\n## \u51fa\u3066\u304f\u308b\u3082\u306e\u306e\u6574\u7406\n\n- df.shape\n- df.info()\n- df.describe()\n- df.read_csv\n- sns.countplot\n- plt.hist\n- plt.bar\n- sns.kdeplot\n- df.loc\n- df.map\n- sns.rugplot\n- sns.boxplot\n- sns.violinplot\n- sns.distplot\n- collections.Counter\n- collections.Counter.most_common\n- plt.barh\n- pd.where\n- sns.countplot(hue)\n- sns.FacetGrid\n- df.apply\n- sns.lmplot\n- sns.lmplot(hue)\n- plt.subplots\n\n## python\u306e\u4f7f\u3044\u65b9\u3067\u53c2\u8003\u306b\u3057\u305f\u3082\u306e\n\n[Python\u3092\u59cb\u3081\u305f\u6642\u304b\u3089\u77e5\u3063\u3066\u3044\u305f\u304b\u3063\u305f\u30d9\u30bf\u30fc\u306a\u66f8\u304d\u65b9](http://dibtp.hateblo.jp/entry/2014/12/15/232829)\n[Python pandas \u30c7\u30fc\u30bf\u9078\u629e\u51e6\u7406\u3092\u3061\u3087\u3063\u3068\u8a73\u3057\u304f <\u5f8c\u7de8>](http://sinhrks.hatenablog.com/entry/2014/11/18/003204)\n\n## \u53c2\u8003\n\n[\u3010\u4e16\u754c\u30672\u4e07\u4eba\u304c\u53d7\u8b1b\u3011\u5b9f\u8df5 Python \u30c7\u30fc\u30bf\u30b5\u30a4\u30a8\u30f3\u30b9](https://www.udemy.com/python-jp/)\n\u4e01\u5be7\u306a\u89e3\u8aac\u3067\u308f\u304b\u308a\u3084\u3059\u304f\u3066\u304a\u3059\u3059\u3081\u306e\u52d5\u753b\u8b1b\u5ea7\u3067\u3059\u3002\n\u8cea\u554f\u3057\u3066\u3082\u7fcc\u65e5\u306b\u306f\u56de\u7b54\u304c\u8fd4\u3063\u3066\u304f\u308b\u3068\u3053\u308d\u3082\u30dd\u30a4\u30f3\u30c8\u3067\u3059\u3002\n\n[Python\u306b\u3088\u308b\u30c7\u30fc\u30bf\u5206\u6790\u5165\u9580 \u2015NumPy\u3001pandas\u3092\u4f7f\u3063\u305f\u30c7\u30fc\u30bf\u51e6\u7406](https://www.amazon.co.jp/Python%E3%81%AB%E3%82%88%E3%82%8B%E3%83%87%E3%83%BC%E3%82%BF%E5%88%86%E6%9E%90%E5%85%A5%E9%96%80-%E2%80%95NumPy%E3%80%81pandas%E3%82%92%E4%BD%BF%E3%81%A3%E3%81%9F%E3%83%87%E3%83%BC%E3%82%BF%E5%87%A6%E7%90%86-Wes-McKinney/dp/4873116554)\n\u30aa\u30e9\u30a4\u30ea\u30fc\u306e\u30c7\u30fc\u30bf\u5206\u6790\u306e\u66f8\u7c4d\u3067\u3059\u3002\u3088\u304f\u307e\u3068\u307e\u3063\u3066\u3044\u307e\u3059\u3002\n\n[Start Python Club](http://startpython.connpass.com/)\nPython\u306e\u30b3\u30df\u30e5\u30cb\u30c6\u30a3\u3067\u3059\u3002\u30c7\u30fc\u30bf\u5206\u6790\u306b\u7279\u5316\u3057\u3066\u3044\u308b\u308f\u3051\u3067\u306f\u3042\u308a\u307e\u305b\u3093\u304c\u3001Python\u306b\u3064\u3044\u3066\u5e45\u5e83\u304f\u6d3b\u52d5\u3055\u308c\u3066\u3044\u308b\u306e\u3067Python\u3092\u4f7f\u3046\u306e\u3067\u3042\u308c\u3070\u884c\u3063\u3066\u307f\u308b\u3068\u697d\u3057\u3044\u3068\u601d\u3044\u307e\u3059\u3002\n", "tags": ["Python", "numpy", "pandas", "seaborn", "\u30c7\u30fc\u30bf\u30b5\u30a4\u30a8\u30f3\u30b9"]}