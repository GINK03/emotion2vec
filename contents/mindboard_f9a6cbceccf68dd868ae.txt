{"context": "kotlin \u306e\u30b3\u30ec\u30af\u30b7\u30e7\u30f3\u304c\u7d20\u6575\u3002DTP\u95a2\u9023\u306e\u30bf\u30b9\u30af\u3067\u306f\u5165\u7a3f\u3057\u3066\u304d\u305f\u5927\u91cf\u306e\u30c7\u30fc\u30bf\u306e\u524d\u51e6\u7406\u3057\u3066\u3053\u3061\u3089\u306e\u90fd\u5408\u306e\u3088\u3044\u30d5\u30a1\u30a4\u30eb\u540d\u3084\u5f62\u5f0f\u306b\u76f4\u3059\u5fc5\u8981\u304c\u751f\u3058\u308b\u3053\u3068\u304c\u3042\u308b\u3002\u666e\u6bb5\u306f groovy \u3067\u51e6\u7406\u3057\u3066\u3044\u308b\u306e\u3060\u304c\u3001kotlin \u306e\u30b3\u30ec\u30af\u30b7\u30e7\u30f3\u304c\u7d20\u6575\u305d\u3046\u306a\u306e\u3067\u3001\u8a66\u3057\u3066\u307f\u307e\u3057\u305f\u3002\n\u74b0\u5883\u306f Mac OS X El Capitan,  Terminal / javavm \u306f java7 / kotlin \u306f 1.0.0 \u3092\u4f7f\u7528\u3057\u3066\u3044\u307e\u3059\u3002\nkotlinc \u306a\u3069\u306e\u30b3\u30de\u30f3\u30c9\u304c\u4f7f\u3048\u308b\u72b6\u614b\u306b\u306a\u3063\u3066\u3044\u308b\u524d\u63d0\u3067\u8a71\u3092\u9032\u3081\u307e\u3059\u3002\n\npng \u3068\u3057\u3066\u30c7\u30fc\u30bf\u5165\u7a3f\u3055\u308c\u305f\u304c jpg \u3068\u3057\u3066\u51e6\u7406\u3057\u306a\u3051\u308c\u3070\u3044\u3051\u306a\u304b\u3063\u305f...\n\u3068\u3044\u3046\u4eee\u306e\u8a71\u3092\u984c\u6750\u306b\u3057\u307e\u3059\u3002\n\u30d5\u30a1\u30a4\u30eb\u540d\u30ea\u30b9\u30c8\u304b\u3089 (png\u30d5\u30a1\u30a4\u30eb\u540d,jpg\u30d5\u30a1\u30a4\u30eb\u540d) \u306e\u30da\u30a2\u30ea\u30b9\u30c8\u3092\u751f\u6210\u3057\u3066\u304b\u3089\u3001png \u5f62\u5f0f\u306e\u753b\u50cf\u3092 jpg \u5f62\u5f0f\u306b\u76f4\u3057\u3066\u4fdd\u5b58\u3059\u308b\u3068\u3053\u308d\u307e\u3067\u3084\u3063\u3066\u307f\u307e\u3059\u3002 \n\nStep0 \u5165\u7a3f\u3057\u3066\u304d\u305f\u30c7\u30fc\u30bf\n\u4ee5\u4e0b\u306e\u3088\u3046\u306a png \u30d5\u30a1\u30a4\u30eb\u304c\u304d\u305f\u3053\u3068\u306b\u3057\u307e\u3059\u3002\n$ ls *.png\n001.png 002.png 003.png 004.png 005.png\n\n\nStep1 \u30ab\u30ec\u30f3\u30c8\u30c7\u30a3\u30ec\u30af\u30c8\u306b\u3042\u308b png \u30d5\u30a1\u30a4\u30eb\u306e\u62e1\u5f35\u5b50\u3092\u53d6\u308a\u9664\u3044\u305f\u30d5\u30a1\u30a4\u30eb\u540d\u306e\u30ea\u30b9\u30c8\u3092\u751f\u6210\n\nstep1.kts\nimport java.io.File\n\n// step1\nval basefilenameList = File(\".\").listFiles().filter{it.extension==\"png\"}.map{ it.nameWithoutExtension }\nprintln( basefilenameList )\n\n\n\u7d50\u679c\n$ kotlinc -script step1.kts\n[001, 002, 003, 004, 005]\n\n\nStep2 png\u30d5\u30a1\u30a4\u30eb\u540d\u30ea\u30b9\u30c8\u3001jpg\u30d5\u30a1\u30a4\u30eb\u540d\u30ea\u30b9\u30c8\u3092\u305d\u308c\u305e\u308c\u751f\u6210\n// step2\nval pngfilenameList = basefilenameList.map { \"$it.png\" }\nval jpgfilenameList = basefilenameList.map { \"$it.jpg\" }\nprintln( pngfilenameList )\nprintln( jpgfilenameList )\n\n\u751f\u6210\u7d50\u679c\n[001.png, 002.png, 003.png, 004.png, 005.png]\n[001.jpg, 002.jpg, 003.jpg, 004.jpg, 005.jpg]\n\n\nStep3 zip\u3067\uff08png\u30d5\u30a1\u30a4\u30eb\u540d\u3001jpg\u30d5\u30a1\u30a4\u30eb\u540d\uff09\u306e\u30da\u30a2\u30ea\u30b9\u30c8\u3092\u751f\u6210\n// step3\nval zippedList = pngfilenameList.zip( jpgfilenameList )\nprintln( zippedList )\n\n\u751f\u6210\u7d50\u679c\n[(001.png, 001.jpg), (002.png, 002.jpg), (003.png, 003.jpg), (004.png, 004.jpg), (005.png, 005.jpg)]\n\n\n\u3053\u3053\u307e\u3067\u306e\u6210\u679c\u306e\u307e\u3068\u3081\n\ntest1.kts\nimport java.io.File\n\nval basefilenameList = File(\".\").listFiles().filter{it.extension==\"png\"}.map{ it.nameWithoutExtension }\nval pngfilenameList = basefilenameList.map { \"$it.png\" }\nval jpgfilenameList = basefilenameList.map { \"$it.jpg\" }\nval zippedList = pngfilenameList.zip( jpgfilenameList )\nprintln( zippedList )\n\n\n$ kotlinc -script test1.kts\n[(001.png, 001.jpg), (002.png, 002.jpg), (003.png, 003.jpg), (004.png, 004.jpg), (005.png, 005.jpg)]\n\n\nStep4 png \u3092 jpg \u306b\u5909\u63db\u3059\u308b function \u3092\u8ffd\u52a0\nfun png2jpg( pngFile:File, jpgFile:File ){\n    val pngImg = ImageIO.read(pngFile)\n    val bImg = BufferedImage(pngImg.width,pngImg.height,BufferedImage.TYPE_3BYTE_BGR )\n    val g:Graphics2D = bImg.graphics as Graphics2D\n    g.drawImage(pngImg,0,0,null)\n    g.dispose()\n    ImageIO.write(bImg,\"JPEG\",jpgFile)\n}\n\n\nStep5 \u3059\u3079\u3066\u3092\u307e\u3068\u3081\u308b\n\npng2jpg.kts\nimport java.io.File\nimport java.awt.Graphics2D\nimport java.awt.image.BufferedImage\nimport javax.imageio.ImageIO\n\nfun png2jpg( pngFile:File, jpgFile:File ){\n    val pngImg = ImageIO.read(pngFile)\n    val bImg = BufferedImage(pngImg.width,pngImg.height,BufferedImage.TYPE_3BYTE_BGR )\n    val g:Graphics2D = bImg.graphics as Graphics2D\n    g.drawImage(pngImg,0,0,null)\n    g.dispose()\n    ImageIO.write(bImg,\"JPEG\",jpgFile)\n}\n\nval basefilenameList = File(\".\").listFiles().filter{it.extension==\"png\"}.map{ it.nameWithoutExtension }\nval pngfilenameList = basefilenameList.map { \"$it.png\" }\nval jpgfilenameList = basefilenameList.map { \"$it.jpg\" }\npngfilenameList.zip( jpgfilenameList ).forEach { png2jpg( File(it.first), File(it.second) ) }\n\n\n\u95a2\u6570\u540d\u304c\u76f4\u611f\u7684\u306a\u306e\u304c\u3084\u306f\u308a\u7d20\u6575\u3067\u3059\u3002\n\u4ee5\u4e0a\u3067\u3059\u3002\n\n\u304a\u307e\u3051\ngroovy \u3067\u3082\u5b9f\u88c5\u3057\u3066\u307f\u307e\u3057\u305f\u3002( groovy 2.4 \u3067\u4f5c\u52d5\u30c6\u30b9\u30c8 )\ngroovy \u3067\u306e zip \u65b9\u6cd5\u304c\u308f\u304b\u3089\u306a\u304b\u3063\u305f\u306e\u3067\u4ee5\u4e0b\u306e\u8a18\u4e8b\u3092\u53c2\u8003\u306b\u3057\u307e\u3057\u305f\u3002\nhttp://qiita.com/RyotaMurohoshi/items/85047559ac06e5abcf0a\n\npng2jpg.groovy\nimport java.io.File\nimport java.awt.Graphics2D\nimport java.awt.image.BufferedImage\nimport javax.imageio.ImageIO\n\ndef png2jpg = { File pngFile, File jpgFile->\n    def pngImg = ImageIO.read(pngFile)\n    def bImg = new BufferedImage(pngImg.width,pngImg.height,BufferedImage.TYPE_3BYTE_BGR )\n    def g = bImg.graphics\n    g.drawImage(pngImg,0,0,null)\n    g.dispose()\n    ImageIO.write(bImg,\"JPEG\",jpgFile)\n}\n\ndef basefilenameList = new File(\".\").listFiles().findAll{it.name.endsWith(\"png\")}.collect{it.name.replace(\".png\",\"\")}\ndef pngfilenameList = basefilenameList.collect { \"${it}.png\" }\ndef jpgfilenameList = basefilenameList.collect { \"${it}.jpg\" }\n\n[pngfilenameList, jpgfilenameList].transpose().each { pngfilename, jpgfilename->\n    png2jpg( new File(pngfilename), new File(jpgfilename) )\n}\n\n\nkotlin \u306e\u30b3\u30ec\u30af\u30b7\u30e7\u30f3\u304c\u7d20\u6575\u3002DTP\u95a2\u9023\u306e\u30bf\u30b9\u30af\u3067\u306f\u5165\u7a3f\u3057\u3066\u304d\u305f\u5927\u91cf\u306e\u30c7\u30fc\u30bf\u306e\u524d\u51e6\u7406\u3057\u3066\u3053\u3061\u3089\u306e\u90fd\u5408\u306e\u3088\u3044\u30d5\u30a1\u30a4\u30eb\u540d\u3084\u5f62\u5f0f\u306b\u76f4\u3059\u5fc5\u8981\u304c\u751f\u3058\u308b\u3053\u3068\u304c\u3042\u308b\u3002\u666e\u6bb5\u306f groovy \u3067\u51e6\u7406\u3057\u3066\u3044\u308b\u306e\u3060\u304c\u3001kotlin \u306e\u30b3\u30ec\u30af\u30b7\u30e7\u30f3\u304c\u7d20\u6575\u305d\u3046\u306a\u306e\u3067\u3001\u8a66\u3057\u3066\u307f\u307e\u3057\u305f\u3002\n\n\u74b0\u5883\u306f Mac OS X El Capitan,  Terminal / javavm \u306f java7 / kotlin \u306f 1.0.0 \u3092\u4f7f\u7528\u3057\u3066\u3044\u307e\u3059\u3002\nkotlinc \u306a\u3069\u306e\u30b3\u30de\u30f3\u30c9\u304c\u4f7f\u3048\u308b\u72b6\u614b\u306b\u306a\u3063\u3066\u3044\u308b\u524d\u63d0\u3067\u8a71\u3092\u9032\u3081\u307e\u3059\u3002\n\n# png \u3068\u3057\u3066\u30c7\u30fc\u30bf\u5165\u7a3f\u3055\u308c\u305f\u304c jpg \u3068\u3057\u3066\u51e6\u7406\u3057\u306a\u3051\u308c\u3070\u3044\u3051\u306a\u304b\u3063\u305f...\n\n\u3068\u3044\u3046\u4eee\u306e\u8a71\u3092\u984c\u6750\u306b\u3057\u307e\u3059\u3002\n\u30d5\u30a1\u30a4\u30eb\u540d\u30ea\u30b9\u30c8\u304b\u3089 (png\u30d5\u30a1\u30a4\u30eb\u540d,jpg\u30d5\u30a1\u30a4\u30eb\u540d) \u306e\u30da\u30a2\u30ea\u30b9\u30c8\u3092\u751f\u6210\u3057\u3066\u304b\u3089\u3001png \u5f62\u5f0f\u306e\u753b\u50cf\u3092 jpg \u5f62\u5f0f\u306b\u76f4\u3057\u3066\u4fdd\u5b58\u3059\u308b\u3068\u3053\u308d\u307e\u3067\u3084\u3063\u3066\u307f\u307e\u3059\u3002 \n\n## Step0 \u5165\u7a3f\u3057\u3066\u304d\u305f\u30c7\u30fc\u30bf\n\n\u4ee5\u4e0b\u306e\u3088\u3046\u306a png \u30d5\u30a1\u30a4\u30eb\u304c\u304d\u305f\u3053\u3068\u306b\u3057\u307e\u3059\u3002\n\n```bash\n$ ls *.png\n001.png\t002.png\t003.png\t004.png\t005.png\n```\n\n\n## Step1 \u30ab\u30ec\u30f3\u30c8\u30c7\u30a3\u30ec\u30af\u30c8\u306b\u3042\u308b png \u30d5\u30a1\u30a4\u30eb\u306e\u62e1\u5f35\u5b50\u3092\u53d6\u308a\u9664\u3044\u305f\u30d5\u30a1\u30a4\u30eb\u540d\u306e\u30ea\u30b9\u30c8\u3092\u751f\u6210\n\n```kotlin:step1.kts\nimport java.io.File\n\n// step1\nval basefilenameList = File(\".\").listFiles().filter{it.extension==\"png\"}.map{ it.nameWithoutExtension }\nprintln( basefilenameList )\n```\n\n\u7d50\u679c\n\n```bash\n$ kotlinc -script step1.kts\n[001, 002, 003, 004, 005]\n```\n\n\n## Step2 png\u30d5\u30a1\u30a4\u30eb\u540d\u30ea\u30b9\u30c8\u3001jpg\u30d5\u30a1\u30a4\u30eb\u540d\u30ea\u30b9\u30c8\u3092\u305d\u308c\u305e\u308c\u751f\u6210\n\n```kotlin\n// step2\nval pngfilenameList = basefilenameList.map { \"$it.png\" }\nval jpgfilenameList = basefilenameList.map { \"$it.jpg\" }\nprintln( pngfilenameList )\nprintln( jpgfilenameList )\n```\n\n\u751f\u6210\u7d50\u679c\n\n```\n[001.png, 002.png, 003.png, 004.png, 005.png]\n[001.jpg, 002.jpg, 003.jpg, 004.jpg, 005.jpg]\n```\n\n## Step3 zip\u3067\uff08png\u30d5\u30a1\u30a4\u30eb\u540d\u3001jpg\u30d5\u30a1\u30a4\u30eb\u540d\uff09\u306e\u30da\u30a2\u30ea\u30b9\u30c8\u3092\u751f\u6210\n\n```kotlin\n// step3\nval zippedList = pngfilenameList.zip( jpgfilenameList )\nprintln( zippedList )\n```\n\n\u751f\u6210\u7d50\u679c\n\n```\n[(001.png, 001.jpg), (002.png, 002.jpg), (003.png, 003.jpg), (004.png, 004.jpg), (005.png, 005.jpg)]\n```\n\n## \u3053\u3053\u307e\u3067\u306e\u6210\u679c\u306e\u307e\u3068\u3081\n\n```kotlin:test1.kts\nimport java.io.File\n\nval basefilenameList = File(\".\").listFiles().filter{it.extension==\"png\"}.map{ it.nameWithoutExtension }\nval pngfilenameList = basefilenameList.map { \"$it.png\" }\nval jpgfilenameList = basefilenameList.map { \"$it.jpg\" }\nval zippedList = pngfilenameList.zip( jpgfilenameList )\nprintln( zippedList )\n```\n\n```bash\n$ kotlinc -script test1.kts\n[(001.png, 001.jpg), (002.png, 002.jpg), (003.png, 003.jpg), (004.png, 004.jpg), (005.png, 005.jpg)]\n```\n\n\n## Step4 png \u3092 jpg \u306b\u5909\u63db\u3059\u308b function \u3092\u8ffd\u52a0\n\n```kotlin\nfun png2jpg( pngFile:File, jpgFile:File ){\n    val pngImg = ImageIO.read(pngFile)\n    val bImg = BufferedImage(pngImg.width,pngImg.height,BufferedImage.TYPE_3BYTE_BGR )\n    val g:Graphics2D = bImg.graphics as Graphics2D\n    g.drawImage(pngImg,0,0,null)\n    g.dispose()\n    ImageIO.write(bImg,\"JPEG\",jpgFile)\n}\n```\n\n## Step5 \u3059\u3079\u3066\u3092\u307e\u3068\u3081\u308b\n\n```png2jpg.kts\nimport java.io.File\nimport java.awt.Graphics2D\nimport java.awt.image.BufferedImage\nimport javax.imageio.ImageIO\n\nfun png2jpg( pngFile:File, jpgFile:File ){\n    val pngImg = ImageIO.read(pngFile)\n    val bImg = BufferedImage(pngImg.width,pngImg.height,BufferedImage.TYPE_3BYTE_BGR )\n    val g:Graphics2D = bImg.graphics as Graphics2D\n    g.drawImage(pngImg,0,0,null)\n\tg.dispose()\n    ImageIO.write(bImg,\"JPEG\",jpgFile)\n}\n\nval basefilenameList = File(\".\").listFiles().filter{it.extension==\"png\"}.map{ it.nameWithoutExtension }\nval pngfilenameList = basefilenameList.map { \"$it.png\" }\nval jpgfilenameList = basefilenameList.map { \"$it.jpg\" }\npngfilenameList.zip( jpgfilenameList ).forEach { png2jpg( File(it.first), File(it.second) ) }\n```\n\n\u95a2\u6570\u540d\u304c\u76f4\u611f\u7684\u306a\u306e\u304c\u3084\u306f\u308a\u7d20\u6575\u3067\u3059\u3002\n\u4ee5\u4e0a\u3067\u3059\u3002\n\n## \u304a\u307e\u3051\n\ngroovy \u3067\u3082\u5b9f\u88c5\u3057\u3066\u307f\u307e\u3057\u305f\u3002( groovy 2.4 \u3067\u4f5c\u52d5\u30c6\u30b9\u30c8 )\n\ngroovy \u3067\u306e zip \u65b9\u6cd5\u304c\u308f\u304b\u3089\u306a\u304b\u3063\u305f\u306e\u3067\u4ee5\u4e0b\u306e\u8a18\u4e8b\u3092\u53c2\u8003\u306b\u3057\u307e\u3057\u305f\u3002\nhttp://qiita.com/RyotaMurohoshi/items/85047559ac06e5abcf0a\n\n```groovy:png2jpg.groovy\nimport java.io.File\nimport java.awt.Graphics2D\nimport java.awt.image.BufferedImage\nimport javax.imageio.ImageIO\n\ndef png2jpg = { File pngFile, File jpgFile->\n    def pngImg = ImageIO.read(pngFile)\n    def bImg = new BufferedImage(pngImg.width,pngImg.height,BufferedImage.TYPE_3BYTE_BGR )\n    def g = bImg.graphics\n    g.drawImage(pngImg,0,0,null)\n    g.dispose()\n    ImageIO.write(bImg,\"JPEG\",jpgFile)\n}\n\ndef basefilenameList = new File(\".\").listFiles().findAll{it.name.endsWith(\"png\")}.collect{it.name.replace(\".png\",\"\")}\ndef pngfilenameList = basefilenameList.collect { \"${it}.png\" }\ndef jpgfilenameList = basefilenameList.collect { \"${it}.jpg\" }\n\n[pngfilenameList, jpgfilenameList].transpose().each { pngfilename, jpgfilename->\n    png2jpg( new File(pngfilename), new File(jpgfilename) )\n}\n```\n\n\n\n\n\n\n", "tags": ["Kotlin", "java2D"]}