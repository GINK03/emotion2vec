{"tags": ["Ruby", "\u3069\u3046\u66f8\u304f", "\u52c9\u5f37\u4f1a"], "context": " More than 1 year has passed since last update.\u73fe\u5834\u3067\u66f8\u3044\u305f\u30b3\u30fc\u30c9\u66f8\u304d\u76f4\u3057\u305f\u3044\u30fb\u30fb\u3002\n\u554f\u984c\u306f\u3000http://qiita.com/items/5c10c132e1f78131563f\nORD={'3'=>1,'4'=>2,'5'=>3,'6'=>4,'7'=>5,'8'=>6,'9'=>7,'T'=>8,'J'=>9,'Q'=>10,'K'=>11,'A'=>12,'2'=>13,'o'=>14}\n\ndef solve(q)\n  base,hand = q.split(',')\n  return '-' if hand.nil?\n  cards = hand.scan(/../)\n  base_num = base.size / 2\n  base_ord = base.scan(/../).map{|e| ORD[e[1]]}.min\n  ans = []\n  cards.permutation(base_num) do |cs|\n    joker = cs.delete('Jo')\n    if cs.empty?\n      cs << joker\n      next\n    end\n    if cs.map{|e| ORD[e[1]]}.min > base_ord and cs.map{|e| ORD[e[1]]}.min == cs.map{|e| ORD[e[1]]}.max\n      cs << joker if joker\n      ans << cs\n    end\n  end\n  return '-' if ans.empty? \n  ans.map{|e| e.sort}.uniq.map{|e| e.join}.join(',')\nend\n\nDATA.readlines.each do |line|\n  no,q,a = line.chop.split(/\\s+/)\n  ans = solve(q)\n  print no + \"\\t\"\n  print ans\n  puts ans.split(',').map{|e| e.scan(/../).sort.join}.sort.join(',') == a.split(',').map{|e| e.scan(/../).sort.join}.sort.join(',') ? 'o' : 'x'\nend\n__END__\n#1  DJ, -\n#2  H7,HK   HK\n#3  S3,D4D2 D4,D2\n\n\u73fe\u5834\u3067\u66f8\u3044\u305f\u30b3\u30fc\u30c9\u66f8\u304d\u76f4\u3057\u305f\u3044\u30fb\u30fb\u3002\n\u554f\u984c\u306f\u3000http://qiita.com/items/5c10c132e1f78131563f\n\n```ruby\nORD={'3'=>1,'4'=>2,'5'=>3,'6'=>4,'7'=>5,'8'=>6,'9'=>7,'T'=>8,'J'=>9,'Q'=>10,'K'=>11,'A'=>12,'2'=>13,'o'=>14}\n\ndef solve(q)\n  base,hand = q.split(',')\n  return '-' if hand.nil?\n  cards = hand.scan(/../)\n  base_num = base.size / 2\n  base_ord = base.scan(/../).map{|e| ORD[e[1]]}.min\n  ans = []\n  cards.permutation(base_num) do |cs|\n    joker = cs.delete('Jo')\n    if cs.empty?\n      cs << joker\n      next\n    end\n    if cs.map{|e| ORD[e[1]]}.min > base_ord and cs.map{|e| ORD[e[1]]}.min == cs.map{|e| ORD[e[1]]}.max\n      cs << joker if joker\n      ans << cs\n    end\n  end\n  return '-' if ans.empty? \n  ans.map{|e| e.sort}.uniq.map{|e| e.join}.join(',')\nend\n\nDATA.readlines.each do |line|\n  no,q,a = line.chop.split(/\\s+/)\n  ans = solve(q)\n  print no + \"\\t\"\n  print ans\n  puts ans.split(',').map{|e| e.scan(/../).sort.join}.sort.join(',') == a.split(',').map{|e| e.scan(/../).sort.join}.sort.join(',') ? 'o' : 'x'\nend\n__END__\n#1\tDJ,\t-\n#2\tH7,HK\tHK\n#3\tS3,D4D2\tD4,D2\n```"}