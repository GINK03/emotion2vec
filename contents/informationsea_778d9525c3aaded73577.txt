{"context": " More than 1 year has passed since last update.Android\u306eHTTP Client\u3068\u3057\u3066\u306forg.apache.http\u306b\u3042\u308b\u30e9\u30a4\u30d6\u30e9\u30ea\u7fa4\u3068java.net.HttpURLConnection\u304c\u3042\u308b\u304c\uff0corg.apache.http\u306f\u63a8\u5968\u3055\u308c\u3066\u3044\u306a\u3044\uff0e\u3055\u3089\u306bmultipart/form-data\u3092\u4f7f\u3063\u3066\u30d5\u30a1\u30a4\u30eb\u3092\u30a2\u30c3\u30d7\u30ed\u30fc\u30c9\u3059\u308b\u306b\u306f\u30af\u30e9\u30b9\u304c\u3044\u304f\u3064\u304b\u8db3\u3089\u306a\u3044\uff0e\u305d\u3053\u3067\uff0cjava.net.HttpURLConnection\u3092\u4f7f\u3063\u3066\u30d5\u30a1\u30a4\u30eb\u3092\u30a2\u30c3\u30d7\u30ed\u30fc\u30c9\u3059\u308b\u7c21\u5358\u306a\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u66f8\u3044\u3066\u307f\u305f\uff0e\u30b3\u30fc\u30c9\u306fAndroid snippets\u3092\u53c2\u8003\u306b\u5b9f\u88c5\u3057\u305f\uff0e\u79c1\u306e\u6539\u5909\u90e8\u5206\u306fMIT\u30e9\u30a4\u30bb\u30f3\u30b9\u3067\u3069\u3046\u305e\uff0e\u3082\u3068\u306eAndroid Snippets\u306e\u30b3\u30fc\u30c9\u306fPublic Domain\u3067\u3059\uff0e\npackage info.informationsea.apps;\n\nimport java.io.DataOutputStream;\nimport java.io.File;\nimport java.io.FileInputStream;\nimport java.io.IOException;\nimport java.net.HttpURLConnection;\nimport java.net.ProtocolException;\nimport java.util.Map;\nimport java.util.UUID;\n\n/**\n * Copyright (C) 2014 Yasunobu OKAMURA\n * MIT License\n */\npublic class HttpMultipartSender {\n    private HttpMultipartSender(){} // cannot make instance\n\n    // this function is implemented based on http://www.androidsnippets.com/multipart-http-requests\n    public static void sendMultipart(HttpURLConnection connection, String filefield, File filepath, Map<String, String> textdata) throws IOException {\n\n        final String twoHyphens = \"--\";\n        final String boundary =  \"*****\"+ UUID.randomUUID().toString()+\"*****\";\n        final String lineEnd = \"\\r\\n\";\n        final int maxBufferSize = 1024*1024*3;\n\n        DataOutputStream outputStream;\n\n        connection.setDoInput(true);\n        connection.setDoOutput(true);\n        connection.setUseCaches(false);\n\n        connection.setRequestMethod(\"POST\");\n        connection.setRequestProperty(\"Connection\", \"Keep-Alive\");\n        connection.setRequestProperty(\"Content-Type\", \"multipart/form-data; boundary=\"+boundary);\n\n        outputStream = new DataOutputStream(connection.getOutputStream());\n        outputStream.writeBytes(twoHyphens + boundary + lineEnd);\n        outputStream.writeBytes(\"Content-Disposition: form-data; name=\\\"\" + filefield + \"\\\"; filename=\\\"\" + filepath.getName() +\"\\\"\" + lineEnd);\n        outputStream.writeBytes(\"Content-Type: application/octet-stream\" + lineEnd);\n        outputStream.writeBytes(\"Content-Transfer-Encoding: binary\" + lineEnd);\n        outputStream.writeBytes(lineEnd);\n\n        FileInputStream fileInputStream = new FileInputStream(filepath);\n        int bytesAvailable = fileInputStream.available();\n        int bufferSize = Math.min(bytesAvailable, maxBufferSize);\n        byte[] buffer = new byte[bufferSize];\n\n        int bytesRead = fileInputStream.read(buffer, 0, bufferSize);\n        while(bytesRead > 0) {\n            outputStream.write(buffer, 0, bufferSize);\n            bytesAvailable = fileInputStream.available();\n            bufferSize = Math.min(bytesAvailable, maxBufferSize);\n            bytesRead = fileInputStream.read(buffer, 0, bufferSize);\n        }\n\n        outputStream.writeBytes(lineEnd);\n\n        for (Map.Entry<String, String> entry : textdata.entrySet()) {\n            outputStream.writeBytes(twoHyphens + boundary + lineEnd);\n            outputStream.writeBytes(\"Content-Disposition: form-data; name=\\\"\" + entry.getKey() + \"\\\"\" + lineEnd);\n            outputStream.writeBytes(\"Content-Type: text/plain\"+lineEnd);\n            outputStream.writeBytes(lineEnd);\n            outputStream.writeBytes(entry.getValue());\n            outputStream.writeBytes(lineEnd);\n        }\n\n        outputStream.writeBytes(twoHyphens + boundary + twoHyphens + lineEnd);\n\n        outputStream.close();\n    }\n}\n\n\nAndroid\u306eHTTP Client\u3068\u3057\u3066\u306f`org.apache.http`\u306b\u3042\u308b\u30e9\u30a4\u30d6\u30e9\u30ea\u7fa4\u3068`java.net.HttpURLConnection`\u304c\u3042\u308b\u304c\uff0c`org.apache.http`\u306f\u63a8\u5968\u3055\u308c\u3066\u3044\u306a\u3044\uff0e\u3055\u3089\u306b`multipart/form-data`\u3092\u4f7f\u3063\u3066\u30d5\u30a1\u30a4\u30eb\u3092\u30a2\u30c3\u30d7\u30ed\u30fc\u30c9\u3059\u308b\u306b\u306f\u30af\u30e9\u30b9\u304c\u3044\u304f\u3064\u304b\u8db3\u3089\u306a\u3044\uff0e\u305d\u3053\u3067\uff0c`java.net.HttpURLConnection`\u3092\u4f7f\u3063\u3066\u30d5\u30a1\u30a4\u30eb\u3092\u30a2\u30c3\u30d7\u30ed\u30fc\u30c9\u3059\u308b\u7c21\u5358\u306a\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u66f8\u3044\u3066\u307f\u305f\uff0e\u30b3\u30fc\u30c9\u306f[Android snippets](http://www.androidsnippets.com/multipart-http-requests)\u3092\u53c2\u8003\u306b\u5b9f\u88c5\u3057\u305f\uff0e\u79c1\u306e\u6539\u5909\u90e8\u5206\u306fMIT\u30e9\u30a4\u30bb\u30f3\u30b9\u3067\u3069\u3046\u305e\uff0e\u3082\u3068\u306eAndroid Snippets\u306e\u30b3\u30fc\u30c9\u306fPublic Domain\u3067\u3059\uff0e\n\n```java\npackage info.informationsea.apps;\n\nimport java.io.DataOutputStream;\nimport java.io.File;\nimport java.io.FileInputStream;\nimport java.io.IOException;\nimport java.net.HttpURLConnection;\nimport java.net.ProtocolException;\nimport java.util.Map;\nimport java.util.UUID;\n\n/**\n * Copyright (C) 2014 Yasunobu OKAMURA\n * MIT License\n */\npublic class HttpMultipartSender {\n    private HttpMultipartSender(){} // cannot make instance\n\n    // this function is implemented based on http://www.androidsnippets.com/multipart-http-requests\n    public static void sendMultipart(HttpURLConnection connection, String filefield, File filepath, Map<String, String> textdata) throws IOException {\n\n        final String twoHyphens = \"--\";\n        final String boundary =  \"*****\"+ UUID.randomUUID().toString()+\"*****\";\n        final String lineEnd = \"\\r\\n\";\n        final int maxBufferSize = 1024*1024*3;\n\n        DataOutputStream outputStream;\n\n        connection.setDoInput(true);\n        connection.setDoOutput(true);\n        connection.setUseCaches(false);\n\n        connection.setRequestMethod(\"POST\");\n        connection.setRequestProperty(\"Connection\", \"Keep-Alive\");\n        connection.setRequestProperty(\"Content-Type\", \"multipart/form-data; boundary=\"+boundary);\n\n        outputStream = new DataOutputStream(connection.getOutputStream());\n        outputStream.writeBytes(twoHyphens + boundary + lineEnd);\n        outputStream.writeBytes(\"Content-Disposition: form-data; name=\\\"\" + filefield + \"\\\"; filename=\\\"\" + filepath.getName() +\"\\\"\" + lineEnd);\n        outputStream.writeBytes(\"Content-Type: application/octet-stream\" + lineEnd);\n        outputStream.writeBytes(\"Content-Transfer-Encoding: binary\" + lineEnd);\n        outputStream.writeBytes(lineEnd);\n\n        FileInputStream fileInputStream = new FileInputStream(filepath);\n        int bytesAvailable = fileInputStream.available();\n        int bufferSize = Math.min(bytesAvailable, maxBufferSize);\n        byte[] buffer = new byte[bufferSize];\n\n        int bytesRead = fileInputStream.read(buffer, 0, bufferSize);\n        while(bytesRead > 0) {\n            outputStream.write(buffer, 0, bufferSize);\n            bytesAvailable = fileInputStream.available();\n            bufferSize = Math.min(bytesAvailable, maxBufferSize);\n            bytesRead = fileInputStream.read(buffer, 0, bufferSize);\n        }\n\n        outputStream.writeBytes(lineEnd);\n\n        for (Map.Entry<String, String> entry : textdata.entrySet()) {\n            outputStream.writeBytes(twoHyphens + boundary + lineEnd);\n            outputStream.writeBytes(\"Content-Disposition: form-data; name=\\\"\" + entry.getKey() + \"\\\"\" + lineEnd);\n            outputStream.writeBytes(\"Content-Type: text/plain\"+lineEnd);\n            outputStream.writeBytes(lineEnd);\n            outputStream.writeBytes(entry.getValue());\n            outputStream.writeBytes(lineEnd);\n        }\n\n        outputStream.writeBytes(twoHyphens + boundary + twoHyphens + lineEnd);\n\n        outputStream.close();\n    }\n}\n```\n", "tags": ["HTTP", "Java", "Android"]}