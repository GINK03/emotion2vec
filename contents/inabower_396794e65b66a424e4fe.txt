{"context": "\n\n\u4f7f\u7528\u74b0\u5883\n\nUbuntu 16.04\nOpenFOAM 3.0.1\nOpenFOAM 4.1\n\n\n\u6982\u8981\nOpenFOAM\u3067\u306fcontrolDict\u306efunctions\u6a5f\u80fd\u3092\u4f7f\u3046\u3053\u3068\u3067\u5e73\u5747\u5024\u30fb\u5408\u8a08\u5024\u306a\u3069\u3092\u4efb\u610f\u306e\u6642\u9593\u30b9\u30c6\u30c3\u30d7\u3067\u51fa\u529b\u3067\u304d\u308b\u3002\n\u3057\u304b\u3057\u30aa\u30ea\u30b8\u30ca\u30eb\u30bd\u30eb\u30d0\u30fc\u306e\u30c7\u30d0\u30c3\u30b0\u4e2d\u306a\u3069\u3067\u306f\u3001\u3088\u308a\u8a73\u7d30\u306b\u5024\u3092\u51fa\u529b\u3057\u305f\u3044\u5834\u5408\u3082\u3042\u308b\u3002\nOpenFOAM\u306e\u95a2\u6570\u3060\u3051\u3092\u7528\u3044\u3066\u4efb\u610f\u306e\u30d5\u30a1\u30a4\u30eb\u30fb\u5024\u30fb\u5f62\u5f0f\u3092\u51fa\u529b\u3059\u308b\u65b9\u6cd5\u3092\u307e\u3068\u3081\u305f\u3002\n\n\u4f5c\u6210\u3057\u305f\u30d8\u30c3\u30c0\u30d5\u30a1\u30a4\u30eb\uff08\u4e00\u4f8b\uff09\n\u4ee5\u4e0b\u306e\u4e8c\u3064\u306e\u30d8\u30c3\u30c0\u30d5\u30a1\u30a4\u30eb\u3092\u4f5c\u6210\u3057\u305f\u3002\n\noutputInitial.H\noutput.H\n\n\u30bf\u30a4\u30e0\u30eb\u30fc\u30d7\u524d\u306boutputInitial.H\u3067\u30d5\u30a1\u30a4\u30eb\u3092\u6e96\u5099\u3057\u3001\u30bf\u30a4\u30e0\u30eb\u30fc\u30d7\u6bce\u306boutput.H\u3092include\u3057\u3066\u30d5\u30a1\u30a4\u30eb\u306b\u66f8\u304d\u8fbc\u3080\n\n\u4f8b1\uff1alaplacianFoam\u3067\u6700\u5927/\u5e73\u5747/\u6700\u5c0f\u6e29\u5ea6\u3092txt\u30d5\u30a1\u30a4\u30eb\u306b\u51fa\u529b\u3059\u308b\n\u7c21\u5358\u306a\u4f8b\u3092\u4ea4\u3048\u3066\u8aac\u660e\u3059\u308b\u3002\n\u3053\u3053\u3067\u306f\u6e29\u5ea6\u306e\u6700\u5927\u5024\u30fb\u5e73\u5747\u5024\u30fb\u6700\u5c0f\u5024\u3092gnuplot\u5411\u3051\u306b\u51fa\u529b\u3057\u3066\u3044\u304f\u4f8b\u3092\u8003\u3048\u308b\u3002\n\u4e0b\u307f\u305f\u3044\u306b\u306a\u308b\u3053\u3068\u304c\u76ee\u6a19\u3002\n\ncase/postProcessing/temperature.txt\n#time     max     mean    min\n1         273     273     273\n2         273.21614       273.001560      272.816514\n3         273.41561       273.002146      272.745651\n4         273.64815       273.003184      272.647846\n...\n\n\n\n\u9805\u76ee\u9593\u304ctab\u533a\u5207\u308a\n1\u884c\u76ee\u306f#\u3067\u59cb\u307e\u308b\n\n\u3068\u3044\u3046\u5f62\u5f0f\u3060\u3068gnuplot\u3067\u30d7\u30ed\u30c3\u30c8\u3067\u304d\u308b\u3002\n\u4f5c\u6210\u3057\u305f\u30d5\u30a1\u30a4\u30eb\u306e\u4e2d\u8eab\u306f\u4ee5\u4e0b\u306e\u901a\u308a\u3002\n\noutputInitial.H\nconst fileName dPath = \"postProcessing\";  // postProcessing\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u3092\u6307\u5b9a\u3059\u308b\nif(!isDir(dPath)) mkDir(dPath);           // \u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u4f5c\u6210\u306e\u95a2\u6570\u3082OF\u306b\u5099\u308f\u3063\u3066\u3044\u308b\n\nconst fileName fPath = dPath / \"temperature.txt\";  // fileName\u578b\u306e\"/\"\u6f14\u7b97\u5b50\u3067\u6587\u5b57\u5217\"postProcessing/temperature.txt\"\u3092\u751f\u6210\nOFstream os(fPath);                                // \u3053\u3053\u306b\u51fa\u529b\u3057\u3066\u3044\u304f\n\nos << \"#time\" << tab << \"max\" << tab << \"mean\" << tab << \"min\" << endl;   // \u4e00\u884c\u76ee\u3092#\u3067\u59cb\u3081\u308b\u3068gnuplot\u3067\u8aad\u307f\u8fbc\u3081\u308b\n\n\n\noutput.H\n//volScalarField T                      // volScalarField\u578b\u306e\u6e29\u5ea6T\u306b\u3064\u3044\u3066\u8003\u3048\u308b\nconst word t = runTime.timeName();      // \u6642\u523b\u306f.timeName()\u3067word{aka string}\u578b\u3001.value()\u3067scalar{aka double}\u578b\n\nos << t << tab << gMax(T) << tab << gAverage(T) << tab << gMin(T) << endl;  // tab\u3067\u30bf\u30d6\u3001nl\u304bendl\u3067\u6539\u884c\u304c\u3067\u304d\u308b\n\n\n\u666e\u901a\u306e\u30d5\u30a1\u30a4\u30eb\u64cd\u4f5c\u3088\u308a\u3082\u7c21\u5358\u306b\u3067\u304d\u308b\u3002\n\u30b1\u30fc\u30b9\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u304c\u30ab\u30ec\u30f3\u30c8\u306b\u306a\u308b\u3002\n\u3053\u308c\u3092\u4f8b\u3048\u3070\u4ee5\u4e0b\u306e\u3088\u3046\u306binclude\u3059\u308c\u3070\u30d5\u30a1\u30a4\u30eb\u306b\u5024\u304c\u66f8\u304d\u8fbc\u307e\u308c\u3066\u3044\u304f\u3002\n\nlaplacianFoam.C\n...\nint main(int argc, char *argv[])\n{\n    ....\n    #include \"outputInitial.H\" // \u30bf\u30a4\u30e0\u30eb\u30fc\u30d7\u306e\u524d\u306b\u547c\u3073\u51fa\u3057\n\n    while (simple.loop())\n    {\n        ...\n        #include \"output.H\" // \u8a08\u7b97\u5f8c\u306b\u547c\u3073\u51fa\u3057\n    }\n    ...\n    return 0;\n}\n\n\n\n\u4f8b2\uff1apimpleFoam\u3067patch\u6bce\u306ecsv\u30d5\u30a1\u30a4\u30eb\u306b\u5e73\u5747\u5727\u529b\u3068\u8cea\u91cf\u6d41\u91cf\u3092\u305d\u308c\u305e\u308c\u51fa\u529b\u3059\u308b\n\u3053\u306e\u4f8b\u3067\u306f\u3042\u307e\u308a\u9700\u8981\u304c\u306a\u3044\u304b\u3082\u3057\u308c\u306a\u3044\u304c\u3001patch\u6bce\u3001phase\u6bce\u3001region\u6bce\u306a\u3069\u3067\u30d5\u30a1\u30a4\u30eb\u3092\u5206\u3051\u305f\u3044\u5834\u5408\u304c\u3042\u308b\u304b\u3082\u3057\u308c\u306a\u3044\u3002\n\u3053\u3046\u3044\u3046\u5834\u5408\u306fOFstream\u306ePtrList\u3092\u4f5c\u6210\u3059\u308b\u3068\u64cd\u4f5c\u3057\u3084\u3059\u3044\u3002\n\noutputInitial.H\n... // \u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u4f5c\u6210\n\nPtrList<OFstream> os(mesh.boundary().size());                // \u30d5\u30a1\u30a4\u30eb\u6570(patch\u306e\u6570)\u3092\u6307\u5b9a\u3059\u308b\n\nforAll(mesh.boundary(), patchI) {                            // \u3053\u3053\u306epatchI(int\u578b)\u304c\u30d5\u30a1\u30a4\u30eb\u756a\u53f7\u306b\u5bfe\u5fdc\u3059\u308b\n    const fvPatch& patch = mesh.boundary()[patchI];\n    const fileName fPath = dPath / patch.name() + \".csv\";    // patch\u540d\u3092\u30d5\u30a1\u30a4\u30eb\u540d\u306b\u3059\u308b\n\n    os.set(\n        patchI,                                              // patchI\u756a\u76ee\u306bOFstream\u3092\u751f\u6210\n        new OFstream(fPath)\n    );\n\n    os[patchI] << \"#time\" << tab << \"pressure(Pa)\" << tab << \"massFlow(kg/s)\" << endl;   // \u5358\u4f4d\u3082\u3064\u3051\u3066\u307f\u305f\n}\n\n\n\noutput.H\n//volScalarField p\u3000\u7d76\u5bfe\u5727[Pa]\n//surfaceScalarField phi\u3000\u8cea\u91cf\u6d41\u91cf[kg/s]\n\nconst word t = runTime.timeName();\n\nforAll(mesh.boundary(), patchI) {\n    const scalarField& pp = p.boundaryField()[patchI];      // patch\u6bce\u306e\u5024\u3092\u53d6\u308a\u51fa\u3059\u3002fvPatchScalarField\u3067\u3082\u53ef\u3002\n    const scalarField& pphi = phi.boundaryField()[patchI];  // patch\u6bce\u306e\u5024\u3092\u53d6\u308a\u51fa\u3059\u3002fvsPatchScalarField\u3067\u3082\u53ef\u3002\n\n    os[patchI] << t << tab << gAverage(pp) << tab << gSum(pphi) << endl;\n}\n\n\n\u3053\u308c\u3067\u4ee5\u4e0b\u306e\u3088\u3046\u306bwall.csv\u3001inlet.csv\u3001outlet.csv\u304c\u751f\u6210\u3055\u308c\u305f\u3002\n\ncase/postProcessing/wall.csv\n#time     pressure(Pa) massFlow(kg/s)\n0.001     100000       0\n0.002     100012.142            0\n0.003     100031.344            0\n0.004     100051.242            0\n...\n\n\n\ncase/postProcessing/inlet.csv\n#time     pressure(Pa) massFlow(kg/s)\n0.001     100000       0\n0.002     100034.161   0.221643\n0.003     100058.015   0.351941\n0.004     100075.169   0.461891\n...\n\n\n\ncase/postProcessing/outlet.csv\n#time     pressure(Pa) massFlow(kg/s)\n0.001     100000       0\n0.002     100000       -0.216546\n0.003     100000       -0.348641\n0.004     100000       -0.456116\n...\n\n\n# \u4f7f\u7528\u74b0\u5883\n- Ubuntu 16.04\n- OpenFOAM 3.0.1\n- OpenFOAM 4.1\n\n# \u6982\u8981\nOpenFOAM\u3067\u306fcontrolDict\u306efunctions\u6a5f\u80fd\u3092\u4f7f\u3046\u3053\u3068\u3067\u5e73\u5747\u5024\u30fb\u5408\u8a08\u5024\u306a\u3069\u3092\u4efb\u610f\u306e\u6642\u9593\u30b9\u30c6\u30c3\u30d7\u3067\u51fa\u529b\u3067\u304d\u308b\u3002\n\u3057\u304b\u3057\u30aa\u30ea\u30b8\u30ca\u30eb\u30bd\u30eb\u30d0\u30fc\u306e\u30c7\u30d0\u30c3\u30b0\u4e2d\u306a\u3069\u3067\u306f\u3001\u3088\u308a\u8a73\u7d30\u306b\u5024\u3092\u51fa\u529b\u3057\u305f\u3044\u5834\u5408\u3082\u3042\u308b\u3002\nOpenFOAM\u306e\u95a2\u6570\u3060\u3051\u3092\u7528\u3044\u3066\u4efb\u610f\u306e\u30d5\u30a1\u30a4\u30eb\u30fb\u5024\u30fb\u5f62\u5f0f\u3092\u51fa\u529b\u3059\u308b\u65b9\u6cd5\u3092\u307e\u3068\u3081\u305f\u3002\n\n## \u4f5c\u6210\u3057\u305f\u30d8\u30c3\u30c0\u30d5\u30a1\u30a4\u30eb\uff08\u4e00\u4f8b\uff09\n\u4ee5\u4e0b\u306e\u4e8c\u3064\u306e\u30d8\u30c3\u30c0\u30d5\u30a1\u30a4\u30eb\u3092\u4f5c\u6210\u3057\u305f\u3002\n\n- outputInitial.H\n- output.H\n\n\u30bf\u30a4\u30e0\u30eb\u30fc\u30d7\u524d\u306b`outputInitial.H`\u3067\u30d5\u30a1\u30a4\u30eb\u3092\u6e96\u5099\u3057\u3001\u30bf\u30a4\u30e0\u30eb\u30fc\u30d7\u6bce\u306b`output.H`\u3092include\u3057\u3066\u30d5\u30a1\u30a4\u30eb\u306b\u66f8\u304d\u8fbc\u3080\n\n# \u4f8b1\uff1alaplacianFoam\u3067\u6700\u5927/\u5e73\u5747/\u6700\u5c0f\u6e29\u5ea6\u3092txt\u30d5\u30a1\u30a4\u30eb\u306b\u51fa\u529b\u3059\u308b\n\u7c21\u5358\u306a\u4f8b\u3092\u4ea4\u3048\u3066\u8aac\u660e\u3059\u308b\u3002\n\u3053\u3053\u3067\u306f\u6e29\u5ea6\u306e\u6700\u5927\u5024\u30fb\u5e73\u5747\u5024\u30fb\u6700\u5c0f\u5024\u3092gnuplot\u5411\u3051\u306b\u51fa\u529b\u3057\u3066\u3044\u304f\u4f8b\u3092\u8003\u3048\u308b\u3002\n\n\u4e0b\u307f\u305f\u3044\u306b\u306a\u308b\u3053\u3068\u304c\u76ee\u6a19\u3002\n\n```csv:case/postProcessing/temperature.txt\n#time     max     mean    min\n1         273     273     273\n2         273.21614       273.001560      272.816514\n3         273.41561       273.002146      272.745651\n4         273.64815       273.003184      272.647846\n...\n```\n- \u9805\u76ee\u9593\u304ctab\u533a\u5207\u308a\n- 1\u884c\u76ee\u306f#\u3067\u59cb\u307e\u308b\n\n\u3068\u3044\u3046\u5f62\u5f0f\u3060\u3068gnuplot\u3067\u30d7\u30ed\u30c3\u30c8\u3067\u304d\u308b\u3002\n\n\u4f5c\u6210\u3057\u305f\u30d5\u30a1\u30a4\u30eb\u306e\u4e2d\u8eab\u306f\u4ee5\u4e0b\u306e\u901a\u308a\u3002\n\n```c++:outputInitial.H\nconst fileName dPath = \"postProcessing\";  // postProcessing\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u3092\u6307\u5b9a\u3059\u308b\nif(!isDir(dPath)) mkDir(dPath);           // \u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u4f5c\u6210\u306e\u95a2\u6570\u3082OF\u306b\u5099\u308f\u3063\u3066\u3044\u308b\n\nconst fileName fPath = dPath / \"temperature.txt\";  // fileName\u578b\u306e\"/\"\u6f14\u7b97\u5b50\u3067\u6587\u5b57\u5217\"postProcessing/temperature.txt\"\u3092\u751f\u6210\nOFstream os(fPath);                                // \u3053\u3053\u306b\u51fa\u529b\u3057\u3066\u3044\u304f\n\nos << \"#time\" << tab << \"max\" << tab << \"mean\" << tab << \"min\" << endl;   // \u4e00\u884c\u76ee\u3092#\u3067\u59cb\u3081\u308b\u3068gnuplot\u3067\u8aad\u307f\u8fbc\u3081\u308b\n```\n\n```c++:output.H\n//volScalarField T                      // volScalarField\u578b\u306e\u6e29\u5ea6T\u306b\u3064\u3044\u3066\u8003\u3048\u308b\nconst word t = runTime.timeName();      // \u6642\u523b\u306f.timeName()\u3067word{aka string}\u578b\u3001.value()\u3067scalar{aka double}\u578b\n\nos << t << tab << gMax(T) << tab << gAverage(T) << tab << gMin(T) << endl;  // tab\u3067\u30bf\u30d6\u3001nl\u304bendl\u3067\u6539\u884c\u304c\u3067\u304d\u308b\n```\n\n\u666e\u901a\u306e\u30d5\u30a1\u30a4\u30eb\u64cd\u4f5c\u3088\u308a\u3082\u7c21\u5358\u306b\u3067\u304d\u308b\u3002\n\u30b1\u30fc\u30b9\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u304c\u30ab\u30ec\u30f3\u30c8\u306b\u306a\u308b\u3002\n\n\u3053\u308c\u3092\u4f8b\u3048\u3070\u4ee5\u4e0b\u306e\u3088\u3046\u306binclude\u3059\u308c\u3070\u30d5\u30a1\u30a4\u30eb\u306b\u5024\u304c\u66f8\u304d\u8fbc\u307e\u308c\u3066\u3044\u304f\u3002\n\n```c++:laplacianFoam.C\n...\nint main(int argc, char *argv[])\n{\n    ....\n    #include \"outputInitial.H\" // \u30bf\u30a4\u30e0\u30eb\u30fc\u30d7\u306e\u524d\u306b\u547c\u3073\u51fa\u3057\n\n    while (simple.loop())\n    {\n        ...\n        #include \"output.H\" // \u8a08\u7b97\u5f8c\u306b\u547c\u3073\u51fa\u3057\n    }\n    ...\n    return 0;\n}\n```\n\n# \u4f8b2\uff1apimpleFoam\u3067patch\u6bce\u306ecsv\u30d5\u30a1\u30a4\u30eb\u306b\u5e73\u5747\u5727\u529b\u3068\u8cea\u91cf\u6d41\u91cf\u3092\u305d\u308c\u305e\u308c\u51fa\u529b\u3059\u308b\n\u3053\u306e\u4f8b\u3067\u306f\u3042\u307e\u308a\u9700\u8981\u304c\u306a\u3044\u304b\u3082\u3057\u308c\u306a\u3044\u304c\u3001patch\u6bce\u3001phase\u6bce\u3001region\u6bce\u306a\u3069\u3067\u30d5\u30a1\u30a4\u30eb\u3092\u5206\u3051\u305f\u3044\u5834\u5408\u304c\u3042\u308b\u304b\u3082\u3057\u308c\u306a\u3044\u3002\n\u3053\u3046\u3044\u3046\u5834\u5408\u306fOFstream\u306ePtrList\u3092\u4f5c\u6210\u3059\u308b\u3068\u64cd\u4f5c\u3057\u3084\u3059\u3044\u3002\n\n```c++:outputInitial.H\n... // \u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u4f5c\u6210\n\nPtrList<OFstream> os(mesh.boundary().size());                // \u30d5\u30a1\u30a4\u30eb\u6570(patch\u306e\u6570)\u3092\u6307\u5b9a\u3059\u308b\n\nforAll(mesh.boundary(), patchI) {                            // \u3053\u3053\u306epatchI(int\u578b)\u304c\u30d5\u30a1\u30a4\u30eb\u756a\u53f7\u306b\u5bfe\u5fdc\u3059\u308b\n    const fvPatch& patch = mesh.boundary()[patchI];\n    const fileName fPath = dPath / patch.name() + \".csv\";    // patch\u540d\u3092\u30d5\u30a1\u30a4\u30eb\u540d\u306b\u3059\u308b\n\n    os.set(\n        patchI,                                              // patchI\u756a\u76ee\u306bOFstream\u3092\u751f\u6210\n        new OFstream(fPath)\n    );\n\n    os[patchI] << \"#time\" << tab << \"pressure(Pa)\" << tab << \"massFlow(kg/s)\" << endl;   // \u5358\u4f4d\u3082\u3064\u3051\u3066\u307f\u305f\n}\n```\n\n```c++:output.H\n//volScalarField p\u3000\u7d76\u5bfe\u5727[Pa]\n//surfaceScalarField phi\u3000\u8cea\u91cf\u6d41\u91cf[kg/s]\n\nconst word t = runTime.timeName();\n\nforAll(mesh.boundary(), patchI) {\n    const scalarField& pp = p.boundaryField()[patchI];      // patch\u6bce\u306e\u5024\u3092\u53d6\u308a\u51fa\u3059\u3002fvPatchScalarField\u3067\u3082\u53ef\u3002\n    const scalarField& pphi = phi.boundaryField()[patchI];  // patch\u6bce\u306e\u5024\u3092\u53d6\u308a\u51fa\u3059\u3002fvsPatchScalarField\u3067\u3082\u53ef\u3002\n\n    os[patchI] << t << tab << gAverage(pp) << tab << gSum(pphi) << endl;\n}\n```\n\n\u3053\u308c\u3067\u4ee5\u4e0b\u306e\u3088\u3046\u306bwall.csv\u3001inlet.csv\u3001outlet.csv\u304c\u751f\u6210\u3055\u308c\u305f\u3002\n\n```csv:case/postProcessing/wall.csv\n#time     pressure(Pa) massFlow(kg/s)\n0.001     100000       0\n0.002     100012.142            0\n0.003     100031.344            0\n0.004     100051.242            0\n...\n```\n```csv:case/postProcessing/inlet.csv\n#time     pressure(Pa) massFlow(kg/s)\n0.001     100000       0\n0.002     100034.161   0.221643\n0.003     100058.015   0.351941\n0.004     100075.169   0.461891\n...\n```\n```csv:case/postProcessing/outlet.csv\n#time     pressure(Pa) massFlow(kg/s)\n0.001     100000       0\n0.002     100000       -0.216546\n0.003     100000       -0.348641\n0.004     100000       -0.456116\n...\n```\n", "tags": ["OpenFOAM", "C++"]}