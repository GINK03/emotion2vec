{"tags": ["Python", "Django"], "context": " More than 1 year has passed since last update.python 3.4 \u3067 \u5c0e\u5165\u4e88\u5b9a\u3001\u304b\u3064 python 2.4 \u306b\u30d0\u30c3\u30af\u30dd\u30fc\u30c8\u3055\u308c\u305f enum34 \u304c\u4fbf\u5229\u306a\u306e\u3067 CharField \u306e choices \u30aa\u30d7\u30b7\u30e7\u30f3\u306b\u6307\u5b9a\u3057\u3088\u3046\u3068\u3057\u305f\u3051\u3069\u3001\u305d\u306e\u307e\u307e\u3058\u3083\u4e0a\u624b\u304f\u4f7f\u3048\u306a\u304b\u3063\u305f\u306e\u3067\u4f5c\u3063\u3066\u307f\u305f\u3002\n\u53c2\u8003URL\n\nhttp://qiita.com/methane/items/8612bdefd8fa4238cc44\nhttp://docs.djangoproject.jp/en/latest/ref/models/fields.html\n\n\u52d5\u4f5c\u74b0\u5883\n\nPython 2.7.4\nDjango 1.6.2\n\n\nchoicefield.py\n# -*- encoding: utf-8 -*-\nfrom django.db import models\nfrom django.utils.functional import curry\nimport enum\n\n\nclass ChoiceField(models.CharField):\n    u\"\"\" choices \u306b enum.Enum \u306e\u30b5\u30d6\u30af\u30e9\u30b9\u3092\u6307\u5b9a\u3067\u304d\u308b\u30ab\u30b9\u30bf\u30e0\u30d5\u30a3\u30fc\u30eb\u30c9\u3067\u3059\u3002\n    \"\"\"\n    __metaclass__ = models.SubfieldBase\n\n    def __init__(self, *args, **kwargs):\n        self.enum = kwargs.get(\"choices\", None)\n        if self.enum and issubclass(self.enum, enum.Enum):\n            kwargs[\"choices\"] = self._from_enum()\n            kwargs[\"max_length\"] = self._calc_max_length()\n        super(ChoiceField, self).__init__(*args, **kwargs)\n\n    def _calc_max_length(self):\n        u\"\"\" DB\u306b\u4fdd\u5b58\u3059\u308b\u306e\u306b\u5fc5\u8981\u306a\u6587\u5b57\u5217\u9577\u3092\u6c42\u3081\u308b\u3002\n        \"\"\"\n        return max([len(unicode(item)) for item in self.enum])\n\n    def _from_enum(self):\n        u\"\"\" choices \u306b\u6307\u5b9a\u3067\u304d\u308b\u30bf\u30d7\u30eb\u306b\u5909\u63db\u3059\u308b\u3002\n        \"\"\"\n        return [(item, item.value) for item in self.enum]\n\n    @staticmethod\n    def _get_display(self, field):\n        u\"\"\" \u8868\u793a\u7528\u306b\u30e2\u30c7\u30eb\u306b\u5f8c\u4ed8\u3051\u3059\u308b\u30e1\u30bd\u30c3\u30c9\n        \"\"\"\n        return getattr(self, field.attname).value\n\n    def contribute_to_class(self, cls, name, virtual_only=False):\n        super(ChoiceField, self).contribute_to_class(cls, name, virtual_only)\n        setattr(cls, 'get_%s_display' % self.name, curry(self._get_display, field=self))\n        # MaxLengthValidator \u3067\u5fc5\u8981\u306b\u306a\u308b\u305f\u3081 Enum \u30af\u30e9\u30b9\u306b\u5f8c\u4ed8\u3051\u3059\u308b\n        setattr(self.enum, '__len__', lambda x: len(unicode(x)))\n\n    def get_prep_value(self, value):\n        if isinstance(value, basestring):\n            return value\n        return None if value is None else unicode(value)\n\n    def to_python(self, value):\n        if not value or not isinstance(value, basestring):\n            return value\n\n        try:\n            return self.enum[value]\n        except KeyError:\n            for m in self.enum:\n                if value == m:\n                    return value\n                if value == m.value:\n                    return m\n                if value == m.name:\n                    return m\n                if value.endswith(m.name):\n                    return m\n            raise Exception('%s is not a valid value for enum %s' % (value, self.enum))\n\n\n\u30c6\u30b9\u30c8\u306f\u3053\u3093\u306a\u611f\u3058\n\ntests/tests_choicefield.py\n# -*- encoding: utf-8 -*-\nfrom django import test\nfrom django.db import models\nimport enum\nimport os\n\n\nclass Gender(enum.Enum):\n    __order__ = \"Male Female\"\n    Male = u\"\u7537\u6027\"\n    Female = u\"\u5973\u6027\"\n\n\nclass Person(models.Model):\n    name = models.CharField(u\"\u540d\u524d\", max_length=255)\n    gender = choices.ChoiceField(u\"\u6027\u5225\", choices=Gender, max_length=255)\n\n    class Meta:\n        app_label = os.path.basename(os.path.abspath(os.path.join(os.path.split(__file__)[0], os.pardir)))\n\n\nclass PersonTest(test.TestCase):\n    def test_choices(self):\n        obj = Person.objects.create(name=\"John\", gender=Gender.Male)\n        self.assertEqual(Gender.Male, obj.gender)\n        self.assertEqual(u\"\u7537\u6027\", obj.get_gender_display())\n\n    def test_get(self):\n        obj1 = Person.objects.create(name=\"John\", gender=Gender.Male)\n        obj2 = Person.objects.get(name=\"John\", gender=Gender.Male)\n        self.assertEqual(obj1, obj2)\n\n    def test_filter_in(self):\n        obj1 = Person.objects.create(name=\"John\", gender=Gender.Male)\n        obj2 = Person.objects.create(name=\"Jane\", gender=Gender.Female)\n        actual = Person.objects.filter(gender__in=[Gender.Male, Gender.Female])\n        self.assertItemsEqual([obj1, obj2], actual)\n\n\npython 3.4 \u3067 \u5c0e\u5165\u4e88\u5b9a\u3001\u304b\u3064 python 2.4 \u306b\u30d0\u30c3\u30af\u30dd\u30fc\u30c8\u3055\u308c\u305f enum34 \u304c\u4fbf\u5229\u306a\u306e\u3067 CharField \u306e choices \u30aa\u30d7\u30b7\u30e7\u30f3\u306b\u6307\u5b9a\u3057\u3088\u3046\u3068\u3057\u305f\u3051\u3069\u3001\u305d\u306e\u307e\u307e\u3058\u3083\u4e0a\u624b\u304f\u4f7f\u3048\u306a\u304b\u3063\u305f\u306e\u3067\u4f5c\u3063\u3066\u307f\u305f\u3002\n\n\u53c2\u8003URL\n\n- http://qiita.com/methane/items/8612bdefd8fa4238cc44\n- http://docs.djangoproject.jp/en/latest/ref/models/fields.html\n\n\u52d5\u4f5c\u74b0\u5883\n\n- Python 2.7.4\n- Django 1.6.2\n\n```py:choicefield.py\n# -*- encoding: utf-8 -*-\nfrom django.db import models\nfrom django.utils.functional import curry\nimport enum\n\n\nclass ChoiceField(models.CharField):\n    u\"\"\" choices \u306b enum.Enum \u306e\u30b5\u30d6\u30af\u30e9\u30b9\u3092\u6307\u5b9a\u3067\u304d\u308b\u30ab\u30b9\u30bf\u30e0\u30d5\u30a3\u30fc\u30eb\u30c9\u3067\u3059\u3002\n    \"\"\"\n    __metaclass__ = models.SubfieldBase\n\n    def __init__(self, *args, **kwargs):\n        self.enum = kwargs.get(\"choices\", None)\n        if self.enum and issubclass(self.enum, enum.Enum):\n            kwargs[\"choices\"] = self._from_enum()\n            kwargs[\"max_length\"] = self._calc_max_length()\n        super(ChoiceField, self).__init__(*args, **kwargs)\n\n    def _calc_max_length(self):\n        u\"\"\" DB\u306b\u4fdd\u5b58\u3059\u308b\u306e\u306b\u5fc5\u8981\u306a\u6587\u5b57\u5217\u9577\u3092\u6c42\u3081\u308b\u3002\n        \"\"\"\n        return max([len(unicode(item)) for item in self.enum])\n\n    def _from_enum(self):\n        u\"\"\" choices \u306b\u6307\u5b9a\u3067\u304d\u308b\u30bf\u30d7\u30eb\u306b\u5909\u63db\u3059\u308b\u3002\n        \"\"\"\n        return [(item, item.value) for item in self.enum]\n\n    @staticmethod\n    def _get_display(self, field):\n        u\"\"\" \u8868\u793a\u7528\u306b\u30e2\u30c7\u30eb\u306b\u5f8c\u4ed8\u3051\u3059\u308b\u30e1\u30bd\u30c3\u30c9\n        \"\"\"\n        return getattr(self, field.attname).value\n\n    def contribute_to_class(self, cls, name, virtual_only=False):\n        super(ChoiceField, self).contribute_to_class(cls, name, virtual_only)\n        setattr(cls, 'get_%s_display' % self.name, curry(self._get_display, field=self))\n        # MaxLengthValidator \u3067\u5fc5\u8981\u306b\u306a\u308b\u305f\u3081 Enum \u30af\u30e9\u30b9\u306b\u5f8c\u4ed8\u3051\u3059\u308b\n        setattr(self.enum, '__len__', lambda x: len(unicode(x)))\n\n    def get_prep_value(self, value):\n        if isinstance(value, basestring):\n            return value\n        return None if value is None else unicode(value)\n\n    def to_python(self, value):\n        if not value or not isinstance(value, basestring):\n            return value\n\n        try:\n            return self.enum[value]\n        except KeyError:\n            for m in self.enum:\n                if value == m:\n                    return value\n                if value == m.value:\n                    return m\n                if value == m.name:\n                    return m\n                if value.endswith(m.name):\n                    return m\n            raise Exception('%s is not a valid value for enum %s' % (value, self.enum))\n```\n\n\u30c6\u30b9\u30c8\u306f\u3053\u3093\u306a\u611f\u3058\n\n```py:tests/tests_choicefield.py\n# -*- encoding: utf-8 -*-\nfrom django import test\nfrom django.db import models\nimport enum\nimport os\n\n\nclass Gender(enum.Enum):\n    __order__ = \"Male Female\"\n    Male = u\"\u7537\u6027\"\n    Female = u\"\u5973\u6027\"\n\n\nclass Person(models.Model):\n    name = models.CharField(u\"\u540d\u524d\", max_length=255)\n    gender = choices.ChoiceField(u\"\u6027\u5225\", choices=Gender, max_length=255)\n\n    class Meta:\n        app_label = os.path.basename(os.path.abspath(os.path.join(os.path.split(__file__)[0], os.pardir)))\n\n\nclass PersonTest(test.TestCase):\n    def test_choices(self):\n        obj = Person.objects.create(name=\"John\", gender=Gender.Male)\n        self.assertEqual(Gender.Male, obj.gender)\n        self.assertEqual(u\"\u7537\u6027\", obj.get_gender_display())\n\n    def test_get(self):\n        obj1 = Person.objects.create(name=\"John\", gender=Gender.Male)\n        obj2 = Person.objects.get(name=\"John\", gender=Gender.Male)\n        self.assertEqual(obj1, obj2)\n\n    def test_filter_in(self):\n        obj1 = Person.objects.create(name=\"John\", gender=Gender.Male)\n        obj2 = Person.objects.create(name=\"Jane\", gender=Gender.Female)\n        actual = Person.objects.filter(gender__in=[Gender.Male, Gender.Female])\n        self.assertItemsEqual([obj1, obj2], actual)\n```"}