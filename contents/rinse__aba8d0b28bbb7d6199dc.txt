{"tags": ["C++", "C++11", "C++14"], "context": " More than 1 year has passed since last update.\u5206\u304b\u308a\u3065\u3089\u3044\u30bf\u30a4\u30c8\u30eb\u3067\u7533\u3057\u8a33\u306a\u3044\u3067\u3059\u304c\u3002\nC++\u306e\u95a2\u6570\u5ba3\u8a00\u306f\u5c11\u3057\u6cb9\u65ad\u3059\u308b\u3068\u3059\u3050\u9577\u304f\u306a\u308a\u307e\u3059\u3002\n\u623b\u308a\u5024\u304c\u9577\u304f\u3001\u540d\u524d\u304c\u9577\u304f\u3001\u5f15\u6570\u306f\u5fae\u5999\u3060\u3051\u3069\u305d\u306e\u304a\u3057\u308a\u306b\u305f\u304f\u3055\u3093\u4fee\u98fe\u5b50\u304c\u3064\u304f\u3002\n// case: template class's member\ntemplate < class tchar, class traits, class alloc >\nmy_string < tchar, traits, alloc >& my_string < tchar, traits, alloc >::operator = ( my_string < tchar, traits, alloc >&& ) noexcept; // in some functions, const, override, final, etc...\n\n\n// case: noexcept expression\ntemplate < class Ty, class... Args >\nstatic inline decltype( auto ) func_wrapper( const Ty& function, Args&&... args ) noexcept( noexcept( function( std::forward < Args >( args )... ) ) );\n\n\n// case: meta programming\ntemplate < class Ty1, class Ty2, typename std::enable_if < std::is_same < Ty1, Ty2 >::value >::type* = nullptr >\nstatic inline bool bit_eq( Ty1, Ty2 ) noexcept;\n\n// etc...\n\n\u82e5\u5e72\u308f\u3056\u3068\u9577\u304f\u3057\u3066\u308b\u611f\u3082\u3042\u308a\u307e\u3059\u304c\u3001\u3053\u306e\u7a0b\u5ea6\u306f\u307e\u307e\u3042\u308b\u6c17\u304c\u3057\u307e\u3059\u3002\u305d\u3053\u3067\u3001\u4eca\u56de\u306f\u77ed\u304f\u3001\u7dba\u9e97\u306b\u308f\u304b\u308a\u3084\u3059\u304f\u3001\u3068\u3044\u3046\u8da3\u65e8\u3067\u3044\u304d\u305f\u3044\u3068\u601d\u3044\u307e\u3059\u3002\n\u304b\u306a\u308a\u5b97\u6559\u7684\u306a\u554f\u984c\u306a\u306e\u3067\u308f\u305f\u3057\u306f\u3053\u3046\u3057\u3066\u3044\u308b\u306a\u3069\u3054\u3056\u3044\u307e\u3057\u305f\u3089\u305c\u3072\u30b3\u30e1\u30f3\u30c8\u3057\u3066\u3044\u3063\u3066\u304f\u3060\u3055\u3044\u3002\n\u3068\u308a\u3042\u3048\u305a\u3001\u4e0a\u304b\u3089\u653b\u3081\u3066\u3044\u3053\u3046\u3068\u601d\u3044\u307e\u3059\u3002\n.\n\uff11\u3064\u3081\u3001\u9577\u3063\u305f\u3089\u3057\u3044\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u30af\u30e9\u30b9\u306e\u30e1\u30f3\u30d0\u95a2\u6570\u306b\u3064\u3044\u3066\u306f\u3001\u30af\u30e9\u30b9\u306e\u4e2d\u3067\u578b\u3092\u3042\u308b\u7a0b\u5ea6\u5ba3\u8a00\u3057\u3066\u304a\u304f\u306e\u304c\u666e\u901a\u3067\u3059\u3002\ntemplate < class tchar, class traits, class alloc >\nclass my_string\n{\n  using my_type = my_string < tchar, traits, alloc >;\n  // ...\n};\nauto my_string < tchar, traits, alloc >::operatpr = ( my_type&& ) noexcept -> my_type&;\n\n\u305d\u308c\u3067\u3082\u9577\u3063\u305f\u3089\u3057\u3044\u3067\u3059\u3002\n\u3057\u3087\u3046\u304c\u306a\u3044\u306e\u3067\u30a4\u30f3\u30c7\u30f3\u30c8\u306a\u3069\u3067\u898b\u3084\u3059\u3055\u3092\u76ee\u6307\u3059\u3068\u3057\u305f\u3089\u3001\u3069\u3053\u3067\u5207\u308a\u307e\u3057\u3087\u3046\u3002\n\u5f15\u6570\u3068\u95a2\u6570\u306e\u540d\u524d\u306f\u5206\u3051\u306a\u3044\u3068\u9577\u304f\u306a\u308b\u95a2\u6570\u304c\u591a\u305d\u3046\u3067\u3059\u3002\nauto my_string < tchar, traits, alloc >::operatpr = (\n  my_type&& ) noexcept -> my_type&;\n\nauto my_string < tchar, traits, alloc >::operatpr = (\n  my_type&& )\nnoexcept -> my_type&;\n\nauto my_string < tchar, traits, alloc >::operatpr =\n  ( my_type&& )\n  noexcept -> my_type&;\n\n\u3069\u3046\u306b\u3082\u7dba\u9e97\u306b\u307e\u3068\u307e\u308a\u307e\u305b\u3093\u3002\u305c\u3072\u3044\u3044\u611f\u3058\u306e\u3092\u6559\u3048\u3066\u4e0b\u3055\u3044\u3002\n.\n\uff12\u3064\u3081\u3001noexcept\u306f\u69cb\u6587\u304c\u975e\u5e38\u306b\u308f\u304b\u308a\u306b\u304f\u3044\u3067\u3059\u306d\u3002\u305d\u308c\u306f\u304a\u3044\u3068\u3044\u3066\u3002\nfunc_wrapper\u306f\u7b2c\u4e00\u5f15\u6570\u306e\u95a2\u6570\u306b\u7b2c\u4e8c\u5339\u6570\u4ee5\u964d\u306e\u5f15\u6570\u3092\u8ee2\u9001\u3059\u308b\u30e9\u30c3\u30d1\u3067\u3059\u3002\n\u305d\u3053\u3067\u3001\u6e21\u3055\u308c\u305f\u95a2\u6570\u306e\u30aa\u30fc\u30d0\u30fc\u30ed\u30fc\u30c9\u89e3\u6c7a\u3092\u3057\u305f\u3082\u306e\u306bnoexcept\u304c\u3064\u3044\u3066\u3044\u305f\u3089\u3053\u306e\u95a2\u6570\u306fnoexcept\u3001\u305d\u3046\u3067\u306a\u3051\u308c\u3070noexcept(false)\u3068\u306a\u308b\u3088\u3046\u306b\u3057\u307e\u3057\u305f\u3002\ntemplate < class Ty, class... Args >\nstatic inline decltype( auto ) func_wrapper( const Ty& function, Args&&... args ) noexcept( noexcept( function( std::forward < Args >( args )... ) ) );\n\n\u7d76\u5bfe\u306b\u4e00\u884c\u306b\u53ce\u307e\u308a\u307e\u305b\u3093\u3002\n\u3067\u3082\u3053\u308c\u306f\u3001noexcept\u3060\u3051\u4e0b\u306b\u6301\u3063\u3066\u304f\u308c\u3070\u3044\u3044\u304b\u3082\u3002\ntemplate < class Ty, class... Args >\nstatic inline decltype( auto ) func_wrapper( const Ty& function, Args&&... args )\n  noexcept( noexcept( function( std::forward < Args >( args )... ) ) );\n\n\u30a4\u30f3\u30c7\u30f3\u30c8\u3057\u305f\u307b\u3046\u304c\u3044\u3044\u304b\u306a\u3002\u3057\u306a\u3044\u307b\u3046\u304c\u3044\u3044\u304b\u306a\u3002\n.\n\uff13\u3064\u3081\u306f\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u30e1\u30bf\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u3067\u3059\u3002\ntemplate < class Ty1, class Ty2, typename std::enable_if < std::is_same < Ty1, Ty2 >::value >::type* = nullptr >\nstatic inline bool bit_eq( Ty1, Ty2 ) noexcept;\n\n\u3053\u308c\u3082\u3082\u3063\u3068\u8907\u96d1\u306b\u306a\u308b\u3068\u3068\u3093\u3067\u3082\u306a\u3044\u9577\u3055\u306b\u306a\u308a\u307e\u3059\u3002\ntemplate < class Ty1, class Ty2,\n  typename std::enable_if <\n    std::is_same < Ty1, Ty2 >::value >::type* = nullptr >\nstatic inline bool bit_eq( Ty1, Ty2 ) noexcept;\n\n\u3067\u3082\u3053\u308c\u306f\u9069\u5f53\u3067\u3082\u305d\u3093\u306a\u306b\u6c5a\u304f\u307f\u3048\u306a\u3044\u3002\n\u6700\u5f8c\u306e > \u306e\u4f4d\u7f6e\u304c\u3072\u3068\u306b\u3088\u3063\u3066\u5206\u304b\u308c\u307e\u3059\u3002\n.\n\u308f\u305f\u3057\u306f\u3053\u308c\u3089\u304c\u3044\u307e\u3044\u3061\u81ea\u5206\u3067\u3082\u5b9a\u307e\u3063\u3066\u306a\u304f\u3066\u3068\u3066\u3082\u6c5a\u3044\u306e\u3067\u3059\u304c\u3001\u307f\u306a\u3055\u3093\u306f\u3069\u306e\u3088\u3046\u306b\u66f8\u3044\u3066\u3044\u308b\u306e\u3067\u3057\u3087\u3046\u304b\u3002\n\u5206\u304b\u308a\u3065\u3089\u3044\u30bf\u30a4\u30c8\u30eb\u3067\u7533\u3057\u8a33\u306a\u3044\u3067\u3059\u304c\u3002\n\nC++\u306e\u95a2\u6570\u5ba3\u8a00\u306f\u5c11\u3057\u6cb9\u65ad\u3059\u308b\u3068\u3059\u3050\u9577\u304f\u306a\u308a\u307e\u3059\u3002\n\u623b\u308a\u5024\u304c\u9577\u304f\u3001\u540d\u524d\u304c\u9577\u304f\u3001\u5f15\u6570\u306f\u5fae\u5999\u3060\u3051\u3069\u305d\u306e\u304a\u3057\u308a\u306b\u305f\u304f\u3055\u3093\u4fee\u98fe\u5b50\u304c\u3064\u304f\u3002\n\n```\n// case: template class's member\ntemplate < class tchar, class traits, class alloc >\nmy_string < tchar, traits, alloc >& my_string < tchar, traits, alloc >::operator = ( my_string < tchar, traits, alloc >&& ) noexcept; // in some functions, const, override, final, etc...\n\n\n// case: noexcept expression\ntemplate < class Ty, class... Args >\nstatic inline decltype( auto ) func_wrapper( const Ty& function, Args&&... args ) noexcept( noexcept( function( std::forward < Args >( args )... ) ) );\n\n\n// case: meta programming\ntemplate < class Ty1, class Ty2, typename std::enable_if < std::is_same < Ty1, Ty2 >::value >::type* = nullptr >\nstatic inline bool bit_eq( Ty1, Ty2 ) noexcept;\n\n// etc...\n```\n\n~~\u82e5\u5e72\u308f\u3056\u3068\u9577\u304f\u3057\u3066\u308b\u611f\u3082\u3042\u308a\u307e\u3059\u304c\u3001~~\u3053\u306e\u7a0b\u5ea6\u306f\u307e\u307e\u3042\u308b\u6c17\u304c\u3057\u307e\u3059\u3002\u305d\u3053\u3067\u3001\u4eca\u56de\u306f\u77ed\u304f\u3001\u7dba\u9e97\u306b\u308f\u304b\u308a\u3084\u3059\u304f\u3001\u3068\u3044\u3046\u8da3\u65e8\u3067\u3044\u304d\u305f\u3044\u3068\u601d\u3044\u307e\u3059\u3002\n\u304b\u306a\u308a\u5b97\u6559\u7684\u306a\u554f\u984c\u306a\u306e\u3067\u308f\u305f\u3057\u306f\u3053\u3046\u3057\u3066\u3044\u308b\u306a\u3069\u3054\u3056\u3044\u307e\u3057\u305f\u3089\u305c\u3072\u30b3\u30e1\u30f3\u30c8\u3057\u3066\u3044\u3063\u3066\u304f\u3060\u3055\u3044\u3002\n\n\u3068\u308a\u3042\u3048\u305a\u3001\u4e0a\u304b\u3089\u653b\u3081\u3066\u3044\u3053\u3046\u3068\u601d\u3044\u307e\u3059\u3002\n\n.\n\n\uff11\u3064\u3081\u3001\u9577\u3063\u305f\u3089\u3057\u3044\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u30af\u30e9\u30b9\u306e\u30e1\u30f3\u30d0\u95a2\u6570\u306b\u3064\u3044\u3066\u306f\u3001\u30af\u30e9\u30b9\u306e\u4e2d\u3067\u578b\u3092\u3042\u308b\u7a0b\u5ea6\u5ba3\u8a00\u3057\u3066\u304a\u304f\u306e\u304c\u666e\u901a\u3067\u3059\u3002\n\n```\ntemplate < class tchar, class traits, class alloc >\nclass my_string\n{\n  using my_type = my_string < tchar, traits, alloc >;\n  // ...\n};\nauto my_string < tchar, traits, alloc >::operatpr = ( my_type&& ) noexcept -> my_type&;\n```\n\n\u305d\u308c\u3067\u3082\u9577\u3063\u305f\u3089\u3057\u3044\u3067\u3059\u3002\n\u3057\u3087\u3046\u304c\u306a\u3044\u306e\u3067\u30a4\u30f3\u30c7\u30f3\u30c8\u306a\u3069\u3067\u898b\u3084\u3059\u3055\u3092\u76ee\u6307\u3059\u3068\u3057\u305f\u3089\u3001\u3069\u3053\u3067\u5207\u308a\u307e\u3057\u3087\u3046\u3002\n\u5f15\u6570\u3068\u95a2\u6570\u306e\u540d\u524d\u306f\u5206\u3051\u306a\u3044\u3068\u9577\u304f\u306a\u308b\u95a2\u6570\u304c\u591a\u305d\u3046\u3067\u3059\u3002\n\n```\nauto my_string < tchar, traits, alloc >::operatpr = (\n  my_type&& ) noexcept -> my_type&;\n```\n\n```\nauto my_string < tchar, traits, alloc >::operatpr = (\n  my_type&& )\nnoexcept -> my_type&;\n```\n\n```\nauto my_string < tchar, traits, alloc >::operatpr =\n  ( my_type&& )\n  noexcept -> my_type&;\n```\n\n\u3069\u3046\u306b\u3082\u7dba\u9e97\u306b\u307e\u3068\u307e\u308a\u307e\u305b\u3093\u3002\u305c\u3072\u3044\u3044\u611f\u3058\u306e\u3092\u6559\u3048\u3066\u4e0b\u3055\u3044\u3002\n\n.\n\n\uff12\u3064\u3081\u3001noexcept\u306f\u69cb\u6587\u304c\u975e\u5e38\u306b\u308f\u304b\u308a\u306b\u304f\u3044\u3067\u3059\u306d\u3002\u305d\u308c\u306f\u304a\u3044\u3068\u3044\u3066\u3002\nfunc_wrapper\u306f\u7b2c\u4e00\u5f15\u6570\u306e\u95a2\u6570\u306b\u7b2c\u4e8c\u5339\u6570\u4ee5\u964d\u306e\u5f15\u6570\u3092\u8ee2\u9001\u3059\u308b\u30e9\u30c3\u30d1\u3067\u3059\u3002\n\u305d\u3053\u3067\u3001\u6e21\u3055\u308c\u305f\u95a2\u6570\u306e\u30aa\u30fc\u30d0\u30fc\u30ed\u30fc\u30c9\u89e3\u6c7a\u3092\u3057\u305f\u3082\u306e\u306bnoexcept\u304c\u3064\u3044\u3066\u3044\u305f\u3089\u3053\u306e\u95a2\u6570\u306fnoexcept\u3001\u305d\u3046\u3067\u306a\u3051\u308c\u3070noexcept(false)\u3068\u306a\u308b\u3088\u3046\u306b\u3057\u307e\u3057\u305f\u3002\n\n```\ntemplate < class Ty, class... Args >\nstatic inline decltype( auto ) func_wrapper( const Ty& function, Args&&... args ) noexcept( noexcept( function( std::forward < Args >( args )... ) ) );\n```\n\n\u7d76\u5bfe\u306b\u4e00\u884c\u306b\u53ce\u307e\u308a\u307e\u305b\u3093\u3002\n\u3067\u3082\u3053\u308c\u306f\u3001noexcept\u3060\u3051\u4e0b\u306b\u6301\u3063\u3066\u304f\u308c\u3070\u3044\u3044\u304b\u3082\u3002\n\n```\ntemplate < class Ty, class... Args >\nstatic inline decltype( auto ) func_wrapper( const Ty& function, Args&&... args )\n  noexcept( noexcept( function( std::forward < Args >( args )... ) ) );\n```\n\n\u30a4\u30f3\u30c7\u30f3\u30c8\u3057\u305f\u307b\u3046\u304c\u3044\u3044\u304b\u306a\u3002\u3057\u306a\u3044\u307b\u3046\u304c\u3044\u3044\u304b\u306a\u3002\n\n.\n\n\uff13\u3064\u3081\u306f\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u30e1\u30bf\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u3067\u3059\u3002\n\n```\ntemplate < class Ty1, class Ty2, typename std::enable_if < std::is_same < Ty1, Ty2 >::value >::type* = nullptr >\nstatic inline bool bit_eq( Ty1, Ty2 ) noexcept;\n```\n\n\u3053\u308c\u3082\u3082\u3063\u3068\u8907\u96d1\u306b\u306a\u308b\u3068\u3068\u3093\u3067\u3082\u306a\u3044\u9577\u3055\u306b\u306a\u308a\u307e\u3059\u3002\n\n```\ntemplate < class Ty1, class Ty2,\n  typename std::enable_if <\n    std::is_same < Ty1, Ty2 >::value >::type* = nullptr >\nstatic inline bool bit_eq( Ty1, Ty2 ) noexcept;\n```\n\n\u3067\u3082\u3053\u308c\u306f\u9069\u5f53\u3067\u3082\u305d\u3093\u306a\u306b\u6c5a\u304f\u307f\u3048\u306a\u3044\u3002\n\u6700\u5f8c\u306e > \u306e\u4f4d\u7f6e\u304c\u3072\u3068\u306b\u3088\u3063\u3066\u5206\u304b\u308c\u307e\u3059\u3002\n\n.\n\n\u308f\u305f\u3057\u306f\u3053\u308c\u3089\u304c\u3044\u307e\u3044\u3061\u81ea\u5206\u3067\u3082\u5b9a\u307e\u3063\u3066\u306a\u304f\u3066\u3068\u3066\u3082\u6c5a\u3044\u306e\u3067\u3059\u304c\u3001\u307f\u306a\u3055\u3093\u306f\u3069\u306e\u3088\u3046\u306b\u66f8\u3044\u3066\u3044\u308b\u306e\u3067\u3057\u3087\u3046\u304b\u3002\n"}