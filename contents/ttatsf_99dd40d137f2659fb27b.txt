{"context": "Arduino(?)\u306b\u7e4b\u3044\u3060\u53ef\u5909\u62b5\u6297\u3092\u672c\u5f53\u306b\u56de\u3057\u305f\u6642\u3060\u3051\u5024\u3092\u53d7\u3051\u3068\u308b\u306b\u306f\uff1f\u306b\u30a2\u30a4\u30c7\u30a3\u30a2\u3092\u3044\u305f\u3060\u3044\u3066analogRead()\u7528\u306e\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u4f5c\u3063\u3066\u307f\u305f\u306e\u3067\u3059\u304c\u3001\u305d\u306e\u7d9a\u304d\u3067\u3059\u3002\n\n\u3082\u3063\u3068\u826f\u3044\u3084\u308a\u65b9\u304c\u3042\u308b\u305d\u3046\u306a\n3 SIMPLE FILTERING TECHNIQUES TO ELIMINATE NOISE\u306b\u3067\u3066\u304f\u308b\"ExponentialFilter\"\u3068\u3044\u3046\u3084\u3064\u3067\u3059\u3002\n\u65e5\u672c\u8a9e\u3067\u306f\u6307\u6570\u79fb\u52d5\u5e73\u5747\u3068\u3044\u3046\u3089\u3057\u3044\u3002\n\n\u7c21\u5358\u306a\u518d\u5e30\u8a08\u7b97\u3067\u8efd\u304f\u3001\n\u914d\u5217\u3092\u4f7f\u308f\u306a\u3044\u306e\u3067\u3001\u30e1\u30e2\u30ea\u30fc\u3082\u3042\u307e\u308a\u4f7f\u308f\u305a\u3001\n\u53cd\u5fdc\u306e\u8abf\u6574\u7bc4\u56f2\u304c\u5e83\u3044\n\n\u3044\u3044\u3053\u3068\u305a\u304f\u3081\u3060\u305d\u3046\u306a\u3002\nSmoothFunc\u3082\u5168\u7136\u4f7f\u3048\u308b\u306e\u3067\u3059\u304c\u3001\u5358\u7d14\u79fb\u52d5\u5e73\u5747\u3092\u4f7f\u3063\u3066\u3044\u308b\u305f\u3081\u3001\n\n\u306a\u3081\u3089\u304b\u306a\u7d50\u679c\u3092\u5f97\u3088\u3046\u3068\u3059\u308d\u3068\u3001\u914d\u5217\u304c\u5927\u304d\u3081\u306b\u306a\u308b\n\u914d\u5217\u304c\u5927\u304d\u304f\u306a\u308b\u3068\u53cd\u5fdc\u304c\u9045\u304f\u306a\u308b\n\u7d50\u5c40\u3001\u4e00\u756a\u3042\u305f\u3089\u3057\u3044\u5024\u3068\u914d\u5217\u304b\u3089\u51fa\u3066\u3044\u304f\u4e00\u756a\u53e4\u3044\u5024\u306b\u5de6\u53f3\u3055\u308c\u304c\u3061\n\n\u306a\u3093\u3060\u304b\u306a...\u3068\u601d\u3063\u3066\u3044\u305f\u3068\u3053\u308d\u3067\u3057\u305f\u3002\n\u3053\u308c\u306f\u8a66\u3057\u3066\u307f\u306a\u3044\u3068\u3002\n\n\u30e9\u30a4\u30d6\u30e9\u30ea\u306b\u3057\u3066\u307f\u305f\n\u524d\u306b\u4f5c\u3063\u305f\u3084\u3064\u3092\u5143\u306b\u3057\u3066\u4f5c\u3063\u3066\u307f\u307e\u3057\u305f\u3002ttatsf/ExponentialSmoothFunc\n\nExponentialSmoothFunc.h\n#ifndef EXPONENTIAL_SMOOTH_FUNC_H\n#define EXPONENTIAL_SMOOTH_FUNC_H\n#include <Arduino.h>\n\nclass ExponentialSmooth{\n  private:\n    const long RATE;\n    long previousValueMul100;\n  public:\n    ExponentialSmooth(long reactRate);\n    long operator()(long currentValue);\n};\n\nclass IsCHANGED{\n  private:\n    long previousValue;\n  public:\n    IsCHANGED();\n    boolean operator()(long currentValue);\n};\n\nclass IsINCREASED{\n  private:\n    long previousValue;\n  public:\n    IsINCREASED();\n    boolean operator()(long currentValue);\n};\n\nclass IsDECREASED{\n  private:\n    long previousValue;\n  public:\n    IsDECREASED();\n    boolean operator()(long currentValue);\n};\n\n#endif\n\n\n\n\n\nExponentialSmoothFunc.cpp\n#include \"ExponentialSmoothFunc.h\"\n\nExponentialSmooth::ExponentialSmooth(long reactRate): RATE(reactRate)\n                                                    , previousValueMul100(0) {\n}\n\nlong ExponentialSmooth::operator()(long currentValue){\n  const long SMOOTHED_VALUE_MUL_100 = RATE * currentValue\n                                    + (100 - RATE) * previousValueMul100 / 100\n                                    + 1 ;\n  previousValueMul100 = SMOOTHED_VALUE_MUL_100;\n  return SMOOTHED_VALUE_MUL_100 / 100 ;\n}\n\nIsCHANGED::IsCHANGED(): previousValue(0) {\n}\n\nboolean IsCHANGED::operator()(long currentValue) {\n  const boolean ANSWER = currentValue != previousValue;\n  previousValue = currentValue;\n  return ANSWER;\n}\n\nIsINCREASED::IsINCREASED(): previousValue(0) {\n}\n\nboolean IsINCREASED::operator()(long currentValue) {\n  const boolean ANSWER = currentValue > previousValue;\n  previousValue = currentValue;\n  return ANSWER;\n}\n\nIsDECREASED::IsDECREASED(): previousValue(0) {\n}\n\nboolean IsDECREASED::operator()(long currentValue) {\n  const boolean ANSWER = currentValue < previousValue;\n  previousValue = currentValue;\n  return ANSWER;\n}\n\n\n\nArduino\u8a00\u8a9e\u7684\u306b\u306f\u3082\u3063\u3068\u77ed\u304b\u304f\u66f8\u3051\u308b\u306e\u3067\u3057\u3087\u3046\u304c\u3001\u4f55\u3068\u304b\u95a2\u6570\u578b\u306b\u5bc4\u305b\u3088\u3046\u3068\u3057\u3066\u5b9a\u6570\u306e\u521d\u671f\u5316\u3068\u5909\u6570\u306e\u7834\u58ca\u7684\u518d\u4ee3\u5165\u3068\u5206\u3051\u3066\u66f8\u3044\u3066\u3044\u307e\u3059\u3002\nExponentialSmooth\u306f\n\n\u5185\u90e8\u306b\u524d\u56de\u306e\u5024 $y_{t-1}$ \u3092\u6301\u3063\u3066\u3044\u3066\u3001\n\u5165\u529b\u3055\u308c\u305f\u751f\u306e\u5024 $x_t$ \u3068\u3001\u524d\u56de\u306e\u5024 $y_{t-1}$ \u3068\u3092\u3001\u6c7a\u3081\u3089\u308c\u305f\u5272\u5408 $\\alpha :  0 \\leq \\alpha  \\leq 1 $ \u3067\u52a0\u91cd\u5e73\u5747  $y_t = \\alpha x_t +  ( 1 - \\alpha ) y_{t-1} $ \u3057\u3066\n\u4eca\u56de\u306e\u5024 $y_t$ \u3068\u3057\u3066\u51fa\u529b\u3059\u308b\u3001\n\n\u3068\u3044\u3046\u3088\u3046\u306a\u4ed5\u7d44\u307f\u3067\u3059\u3002\n\u304a\u624b\u8efd\u306b\u6574\u6570\u306e\u307e\u307e\u3067\u8a08\u7b97\u3057\u305f\u3044\u3057\u3001\u7cbe\u5ea6\u3082\u5fc5\u8981\u3060\u3063\u305f\u306e\u3067\u3001\u5185\u90e8\u3067\u306f\u5024\u3092100\u500d\u3067\u6301\u3063\u3066\u3044\u3066\u3001\u30ea\u30bf\u30fc\u30f3\u3059\u308b\u3068\u304d\u306b1/100\u306b\u3059\u308b\u3088\u3046\u306b\u3057\u307e\u3057\u305f\u3002\n+1\u3057\u3066\u3044\u308b\u306e\u306f\u3001VR\u3092\u56de\u3057\u5207\u3063\u3066\u3082\u6700\u5927\u5024 1023 \u306b\u306a\u3089\u306a\u304b\u3063\u305f\u305f\u3081\u3067\u3059\u3002\u88dc\u6b63\u3068\u3057\u3066\u5165\u308c\u307e\u3057\u305f\u3002\n\u3088\u308d\u3057\u3051\u308c\u3070\u304a\u4f7f\u3044\u304f\u3060\u3055\u3044\u3002\n\u4f7f\u3044\u65b9\u306f\u524d\u306e\u3068\u307b\u307c\u540c\u3058\u3067\u3059\u3002\u305f\u3060\u3057\u3001\n\nExponentialSmooth \u306f\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u5316\u3059\u308b\u3068\u304d\u306b\u5fc5\u305a\u3001\u5f15\u6570\u3092\u3072\u3068\u3064\u53d6\u308a\u307e\u3059\u3002\u53cd\u5fdc\u901f\u5ea6\u306e\u5272\u5408\u3092\u6c7a\u3081\u308b\u5024\u3067\u3001\u7bc4\u56f2\u306f0(\u7121\u53cd\u5fdc)\u304b\u3089100(\u6700\u65b0\u30c7\u30fc\u30bf\u305d\u306e\u307e\u307e)\u307e\u3067\u3067\u3059\u3002\nIsCHANGED, IsINCEASED, IsDECREASED \u306f\u76f4\u524d\u306e\u5024\u3068\u306e\u307f\u6bd4\u8f03\u3057\u307e\u3059\u3002\u5185\u90e8\u306b\u5024\u306e\u5c65\u6b74\u306f\u6301\u3061\u307e\u305b\u3093\u3002(\u914d\u5217\u3092\u4f7f\u308f\u306a\u3044\u3068\u3044\u3046\u30dd\u30ea\u30b7\u30fc?\u3060\u3057\u3001\u305d\u308c\u3067\u3082\u304b\u306a\u308a\u5b89\u5b9a\u3057\u3066\u4f7f\u3048\u305d\u3046\u306a\u306e\u3067\u3002)\n\n\n\u4f7f\u7528\u4f8b\n\u524d\u306e\u3068\u540c\u3058\u3001\u8907\u6570\u306e\u30a2\u30ca\u30ed\u30b0\u5165\u529b\u3092\u53d7\u3051\u53d6\u3063\u3066MIDI\u30b3\u30f3\u30c8\u30ed\u30fc\u30eb\u30c1\u30a7\u30f3\u30b8\u3092\u8fd4\u3059\u30b9\u30b1\u30c3\u30c1\u3067\u3059\u3002\n\n#include <MIDIUSB.h>\n#include <ExponentialSmoothFunc.h>\n\nconst int ANAPIN[2] = {0, 1};\n\nconst byte CHANNEL = 0;\nconst byte CC[2] ={25, 26};\n\nconst long REACT_RATE = 20;\nExponentialSmooth expSmooth[2] = {REACT_RATE, REACT_RATE};\n\nIsCHANGED isCHANGED[2];\n\nvoid setup() {\n  Serial.begin(115200);\n}\n\nvoid loop() {\n\n  for(int i=0;i < 2; i++) {\n\n    const long SMOOTHED_DATA = expSmooth[i]( analogRead(ANAPIN[i]) >> 3 );\n\n    if( isCHANGED[i](SMOOTHED_DATA) ) {\n      controlChange(CHANNEL, CC[i], SMOOTHED_DATA);\n      MidiUSB.flush();\n    };\n\n    delay(10);\n  };\n}\n\n//controll value or velocity\n// First parameter is the event type (0x0B = control change).\n// Second parameter is the event type, combined with the channel.\n// Third parameter is the control number number (0-119).\n// Fourth parameter is the control value (0-127).\n\nvoid controlChange(byte channel, byte control, byte value) {\n  midiEventPacket_t event = {0x0B, 0xB0 | channel, control, value};\n  MidiUSB.sendMIDI(event);\n}}\n\n\n\u5b9a\u6570REACT_RATE\u3092\u5c0f\u3055\u304f\u3059\u308b\u3068\u30ce\u30a4\u30ba\u304c\u6e1b\u308a\u307e\u3059\u304c\u53cd\u5fdc\u306f\u60aa\u304f\u306a\u308a\u307e\u3059\u3002\nLeonardo\u306b20kB\u306eVR\u3092\u633f\u3057\u3066\u3056\u3063\u3068\u8a66\u3057\u305f\u611f\u3058\u3060\u3068\u3001\n\n\u30d3\u30c3\u30c8\u30b7\u30d5\u30c8\u3057\u3066 0 ~ 127 \u306e\u7bc4\u56f2\u3067\u4f7f\u3046\u306a\u3089 20 \u304f\u3089\u3044\n0 ~ 1023 \u3067\u4f7f\u3046\u306a\u3089 5 \u304f\u3089\u3044\n\n\u304c\u4f7f\u3044\u3084\u3059\u3044\u304b\u306a\u3042...\u3068\u3044\u3046\u611f\u3058\u3067\u3059\u3002\u3082\u3061\u308d\u3093\u74b0\u5883\u306b\u3088\u308a\u307e\u3059\u304c\u3002\n\n\n\u6bd4\u3079\u3066\u307f\u305f\n\u6307\u6570\u79fb\u52d5\u5e73\u5747\u3068\u5358\u7d14\u79fb\u52d5\u5e73\u5747\u3001\u6bd4\u3079\u3066\u307f\u307e\u3057\u305f\u3002\n\u4ee5\u4e0b\u306e\u30b9\u30b1\u30c3\u30c1\u3092Leonardo\u306b\u5165\u308c\u3066VR\u3092\u3050\u308a\u3050\u308a\u3057\u3066\u307f\u307e\u3057\u305f\u3002\n#include <ExponentialSmoothFunc.h>\n#include <SmoothFunc.h>\n\nconst int PIN = 0 ;\n\nconst long REACT_RATE = 12;\nExponentialSmooth expSmooth( REACT_RATE );\n\nconst int HISTORY_SIZE = 20;\nGetAverage getAverage( HISTORY_SIZE);\n\nvoid setup() {\n  Serial.begin(115200);\n  while(!Serial);\n  Serial.print(\"Start!!\\n\");\n}\n\nvoid loop() {\n  const long RAW_DATA = analogRead(PIN);\n  const long EXP_SMOOTHED_DATA = expSmooth( RAW_DATA);\n  const long SIMPLE_SMOOTHED_DATA = getAverage( RAW_DATA);\n\n  Serial.print(RAW_DATA);\n  Serial.print(\",\");\n  Serial.print(EXP_SMOOTHED_DATA);\n  Serial.print(\",\");\n  Serial.print(SIMPLE_SMOOTHED_DATA);\n  Serial.print(\",\");\n  Serial.println();\n\n  delay(100);\n}\n\n\u30b7\u30ea\u30a2\u30eb\u30d7\u30ed\u30c3\u30bf\u306e\u30b9\u30af\u30b7\u30e7\u3002\n\n\n\u9752:analogRead()\u3057\u305f\u751f\u306e\u5024\n\u30aa\u30ec\u30f3\u30b8:\u6307\u6570\u79fb\u52d5\u5e73\u5747\n\u8d64:\u5358\u7d14\u79fb\u52d5\u5e73\u5747\n\n\u3067\u3059\u3002\n\u307e\u305a\u4f55\u5ea6\u304b\u8a66\u3057\u3066\u3001\u30d1\u30eb\u30b9\u306e90%\u3042\u305f\u308a\u3067\u540c\u3058\u5024\u306b\u306a\u308b\u3088\u3046\u306b\u53cd\u5fdc\u901f\u5ea6\u3092\u5408\u305b\u307e\u3057\u305f\u3002\n\u6307\u6570\u79fb\u52d5\u5e73\u5747\u306e12%\u304c\u5358\u7d14\u79fb\u52d5\u5e73\u5747\u306e\u5c65\u6b7420\u500b\u306b\u76f8\u5f53\u3059\u308b\u3088\u3046\u3067\u3059\u3002\n\u3042\u3068\u306f\u898b\u305f\u901a\u308a\u3067\u3059\u3002\n\u5358\u7d14\u306a\u30d1\u30eb\u30b9\u3067\u306f\u826f\u3055\u3052\u306b\u898b\u3048\u308b\u5358\u7d14\u79fb\u52d5\u5e73\u5747\u3067\u3059\u304c\u3001\u3050\u308a\u3050\u308a\u3059\u308b\u3068\u3064\u3044\u3066\u3053\u308c\u306a\u3044\u611f\u304c\u3042\u308a\u3042\u308a\u3067\u3059\u3002\n\u5bfe\u3057\u3066\u6307\u6570\u79fb\u52d5\u5e73\u5747\u306e\u307b\u3046\u306f\u3001\u5358\u7d14\u306a\u30d1\u30eb\u30b9\u3067\u306f\u304b\u306a\u308a\u920d\u3063\u3066\u3044\u308b\u3088\u3046\u306b\u898b\u3048\u307e\u3059\u304c\u3001\u3050\u308a\u3050\u308a\u3057\u305f\u6642\u306b\u306f\u3061\u3083\u3093\u3068\u3064\u3044\u3066\u3053\u308c\u3066\u307e\u3059\u3002\n\u4f55\u3088\u308a\u30b0\u30e9\u30d5\u304c\u7dba\u9e97\u3002\u3053\u308c\u3067DAW\u306eMIDI\u30aa\u30fc\u30c8\u30e1\u30fc\u30b7\u30e7\u30f3\u3057\u305f\u3044!\n\u6700\u5f8c\u306f\u3082\u308d\u30b3\u30f3\u30c8\u30ed\u30fc\u30e9\u30fc\u5bc4\u308a\u306e\u8a71\u306b\u306a\u3063\u3066\u3057\u307e\u3044\u307e\u3057\u305f\u304c(\u305d\u3082\u305d\u3082\u52d5\u6a5f\u304c\u305d\u3063\u3061)\u3001\u30c7\u30fc\u30bf\u8a08\u6e2c\u7cfb\u306e\u7528\u9014\u306b\u3082\u4f7f\u3048\u308b\u3093\u3058\u3083\u306a\u3044\u304b\u3068\u601d\u3044\u307e\u3059\u3002\n\n[Arduino(?)\u306b\u7e4b\u3044\u3060\u53ef\u5909\u62b5\u6297\u3092\u672c\u5f53\u306b\u56de\u3057\u305f\u6642\u3060\u3051\u5024\u3092\u53d7\u3051\u3068\u308b\u306b\u306f\uff1f](http://qiita.com/tadfmac/items/0aa8b07385dc557ff387)\u306b\u30a2\u30a4\u30c7\u30a3\u30a2\u3092\u3044\u305f\u3060\u3044\u3066[analogRead()\u7528\u306e\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u4f5c\u3063\u3066\u307f\u305f](http://qiita.com/ttatsf/items/bc222163ad7b83a1c3d0)\u306e\u3067\u3059\u304c\u3001\u305d\u306e\u7d9a\u304d\u3067\u3059\u3002\n\n#\u3082\u3063\u3068\u826f\u3044\u3084\u308a\u65b9\u304c\u3042\u308b\u305d\u3046\u306a\n[3 SIMPLE FILTERING TECHNIQUES TO ELIMINATE NOISE](https://blog.arduino.cc/2016/09/05/3-simple-filtering-techniques-to-eliminate-noise/)\u306b\u3067\u3066\u304f\u308b\"ExponentialFilter\"\u3068\u3044\u3046\u3084\u3064\u3067\u3059\u3002\n\u65e5\u672c\u8a9e\u3067\u306f[\u6307\u6570\u79fb\u52d5\u5e73\u5747](https://ja.wikipedia.org/wiki/\u79fb\u52d5\u5e73\u5747#.E6.8C.87.E6.95.B0.E7.A7.BB.E5.8B.95.E5.B9.B3.E5.9D.87)\u3068\u3044\u3046\u3089\u3057\u3044\u3002\n\n+ \u7c21\u5358\u306a\u518d\u5e30\u8a08\u7b97\u3067\u8efd\u304f\u3001\n+ \u914d\u5217\u3092\u4f7f\u308f\u306a\u3044\u306e\u3067\u3001\u30e1\u30e2\u30ea\u30fc\u3082\u3042\u307e\u308a\u4f7f\u308f\u305a\u3001\n+ \u53cd\u5fdc\u306e\u8abf\u6574\u7bc4\u56f2\u304c\u5e83\u3044\n\n\u3044\u3044\u3053\u3068\u305a\u304f\u3081\u3060\u305d\u3046\u306a\u3002\n\n[SmoothFunc](https://github.com/ttatsf/SmoothFunc)\u3082\u5168\u7136\u4f7f\u3048\u308b\u306e\u3067\u3059\u304c\u3001[\u5358\u7d14\u79fb\u52d5\u5e73\u5747](https://ja.wikipedia.org/wiki/\u79fb\u52d5\u5e73\u5747#.E5.8D.98.E7.B4.94.E7.A7.BB.E5.8B.95.E5.B9.B3.E5.9D.87)\u3092\u4f7f\u3063\u3066\u3044\u308b\u305f\u3081\u3001\n\n+ \u306a\u3081\u3089\u304b\u306a\u7d50\u679c\u3092\u5f97\u3088\u3046\u3068\u3059\u308d\u3068\u3001\u914d\u5217\u304c\u5927\u304d\u3081\u306b\u306a\u308b\n+ \u914d\u5217\u304c\u5927\u304d\u304f\u306a\u308b\u3068\u53cd\u5fdc\u304c\u9045\u304f\u306a\u308b\n+ \u7d50\u5c40\u3001\u4e00\u756a\u3042\u305f\u3089\u3057\u3044\u5024\u3068\u914d\u5217\u304b\u3089\u51fa\u3066\u3044\u304f\u4e00\u756a\u53e4\u3044\u5024\u306b\u5de6\u53f3\u3055\u308c\u304c\u3061\n\n\u306a\u3093\u3060\u304b\u306a...\u3068\u601d\u3063\u3066\u3044\u305f\u3068\u3053\u308d\u3067\u3057\u305f\u3002\n\n\u3053\u308c\u306f\u8a66\u3057\u3066\u307f\u306a\u3044\u3068\u3002\n\n\n#\u30e9\u30a4\u30d6\u30e9\u30ea\u306b\u3057\u3066\u307f\u305f\n\u524d\u306b\u4f5c\u3063\u305f\u3084\u3064\u3092\u5143\u306b\u3057\u3066\u4f5c\u3063\u3066\u307f\u307e\u3057\u305f\u3002[ttatsf/ExponentialSmoothFunc](https://github.com/ttatsf/ExponentialSmoothFunc)\n\n\n```cpp:ExponentialSmoothFunc.h\n#ifndef EXPONENTIAL_SMOOTH_FUNC_H\n#define EXPONENTIAL_SMOOTH_FUNC_H\n#include <Arduino.h>\n\nclass ExponentialSmooth{\n  private:\n    const long RATE;\n    long previousValueMul100;\n  public:\n    ExponentialSmooth(long reactRate);\n    long operator()(long currentValue);\n};\n\nclass IsCHANGED{\n  private:\n    long previousValue;\n  public:\n    IsCHANGED();\n    boolean operator()(long currentValue);\n};\n\nclass IsINCREASED{\n  private:\n    long previousValue;\n  public:\n    IsINCREASED();\n    boolean operator()(long currentValue);\n};\n\nclass IsDECREASED{\n  private:\n    long previousValue;\n  public:\n    IsDECREASED();\n    boolean operator()(long currentValue);\n};\n\n#endif\n\n\n```\n\n```cpp:ExponentialSmoothFunc.cpp\n#include \"ExponentialSmoothFunc.h\"\n\nExponentialSmooth::ExponentialSmooth(long reactRate): RATE(reactRate)\n                                                    , previousValueMul100(0) {\n}\n\nlong ExponentialSmooth::operator()(long currentValue){\n  const long SMOOTHED_VALUE_MUL_100 = RATE * currentValue\n                                    + (100 - RATE) * previousValueMul100 / 100\n                                    + 1 ;\n  previousValueMul100 = SMOOTHED_VALUE_MUL_100;\n  return SMOOTHED_VALUE_MUL_100 / 100 ;\n}\n\nIsCHANGED::IsCHANGED(): previousValue(0) {\n}\n\nboolean IsCHANGED::operator()(long currentValue) {\n  const boolean ANSWER = currentValue != previousValue;\n  previousValue = currentValue;\n  return ANSWER;\n}\n\nIsINCREASED::IsINCREASED(): previousValue(0) {\n}\n\nboolean IsINCREASED::operator()(long currentValue) {\n  const boolean ANSWER = currentValue > previousValue;\n  previousValue = currentValue;\n  return ANSWER;\n}\n\nIsDECREASED::IsDECREASED(): previousValue(0) {\n}\n\nboolean IsDECREASED::operator()(long currentValue) {\n  const boolean ANSWER = currentValue < previousValue;\n  previousValue = currentValue;\n  return ANSWER;\n}\n\n```\nArduino\u8a00\u8a9e\u7684\u306b\u306f\u3082\u3063\u3068\u77ed\u304b\u304f\u66f8\u3051\u308b\u306e\u3067\u3057\u3087\u3046\u304c\u3001\u4f55\u3068\u304b\u95a2\u6570\u578b\u306b\u5bc4\u305b\u3088\u3046\u3068\u3057\u3066\u5b9a\u6570\u306e\u521d\u671f\u5316\u3068\u5909\u6570\u306e\u7834\u58ca\u7684\u518d\u4ee3\u5165\u3068\u5206\u3051\u3066\u66f8\u3044\u3066\u3044\u307e\u3059\u3002\n\nExponentialSmooth\u306f\n\n+ \u5185\u90e8\u306b\u524d\u56de\u306e\u5024 $y_{t-1}$ \u3092\u6301\u3063\u3066\u3044\u3066\u3001\n+ \u5165\u529b\u3055\u308c\u305f\u751f\u306e\u5024 $x_t$ \u3068\u3001\u524d\u56de\u306e\u5024 $y_{t-1}$ \u3068\u3092\u3001\u6c7a\u3081\u3089\u308c\u305f\u5272\u5408 $\\\\alpha :  0 \\leq \\\\alpha  \\leq 1 $ \u3067\u52a0\u91cd\u5e73\u5747  $y_t = \\\\alpha x_t +  \\( 1 - \\\\alpha \\) y_{t-1} $ \u3057\u3066\n+ \u4eca\u56de\u306e\u5024 $y_t$ \u3068\u3057\u3066\u51fa\u529b\u3059\u308b\u3001\n\n\u3068\u3044\u3046\u3088\u3046\u306a\u4ed5\u7d44\u307f\u3067\u3059\u3002\n\u304a\u624b\u8efd\u306b\u6574\u6570\u306e\u307e\u307e\u3067\u8a08\u7b97\u3057\u305f\u3044\u3057\u3001\u7cbe\u5ea6\u3082\u5fc5\u8981\u3060\u3063\u305f\u306e\u3067\u3001\u5185\u90e8\u3067\u306f\u5024\u3092100\u500d\u3067\u6301\u3063\u3066\u3044\u3066\u3001\u30ea\u30bf\u30fc\u30f3\u3059\u308b\u3068\u304d\u306b1/100\u306b\u3059\u308b\u3088\u3046\u306b\u3057\u307e\u3057\u305f\u3002\n+1\u3057\u3066\u3044\u308b\u306e\u306f\u3001VR\u3092\u56de\u3057\u5207\u3063\u3066\u3082\u6700\u5927\u5024 1023 \u306b\u306a\u3089\u306a\u304b\u3063\u305f\u305f\u3081\u3067\u3059\u3002\u88dc\u6b63\u3068\u3057\u3066\u5165\u308c\u307e\u3057\u305f\u3002\n\n\u3088\u308d\u3057\u3051\u308c\u3070\u304a\u4f7f\u3044\u304f\u3060\u3055\u3044\u3002\n\n\u4f7f\u3044\u65b9\u306f\u524d\u306e\u3068\u307b\u307c\u540c\u3058\u3067\u3059\u3002\u305f\u3060\u3057\u3001\n\n+ ExponentialSmooth \u306f\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u5316\u3059\u308b\u3068\u304d\u306b\u5fc5\u305a\u3001\u5f15\u6570\u3092\u3072\u3068\u3064\u53d6\u308a\u307e\u3059\u3002\u53cd\u5fdc\u901f\u5ea6\u306e\u5272\u5408\u3092\u6c7a\u3081\u308b\u5024\u3067\u3001\u7bc4\u56f2\u306f0(\u7121\u53cd\u5fdc)\u304b\u3089100(\u6700\u65b0\u30c7\u30fc\u30bf\u305d\u306e\u307e\u307e)\u307e\u3067\u3067\u3059\u3002\n+ IsCHANGED, IsINCEASED, IsDECREASED \u306f\u76f4\u524d\u306e\u5024\u3068\u306e\u307f\u6bd4\u8f03\u3057\u307e\u3059\u3002\u5185\u90e8\u306b\u5024\u306e\u5c65\u6b74\u306f\u6301\u3061\u307e\u305b\u3093\u3002(\u914d\u5217\u3092\u4f7f\u308f\u306a\u3044\u3068\u3044\u3046\u30dd\u30ea\u30b7\u30fc?\u3060\u3057\u3001\u305d\u308c\u3067\u3082\u304b\u306a\u308a\u5b89\u5b9a\u3057\u3066\u4f7f\u3048\u305d\u3046\u306a\u306e\u3067\u3002)\n\n#\u4f7f\u7528\u4f8b\n\u524d\u306e\u3068\u540c\u3058\u3001\u8907\u6570\u306e\u30a2\u30ca\u30ed\u30b0\u5165\u529b\u3092\u53d7\u3051\u53d6\u3063\u3066MIDI\u30b3\u30f3\u30c8\u30ed\u30fc\u30eb\u30c1\u30a7\u30f3\u30b8\u3092\u8fd4\u3059\u30b9\u30b1\u30c3\u30c1\u3067\u3059\u3002\n\n```cpp\n\n#include <MIDIUSB.h>\n#include <ExponentialSmoothFunc.h>\n\nconst int ANAPIN[2] = {0, 1};\n\nconst byte CHANNEL = 0;\nconst byte CC[2] ={25, 26};\n\nconst long REACT_RATE = 20;\nExponentialSmooth expSmooth[2] = {REACT_RATE, REACT_RATE};\n\nIsCHANGED isCHANGED[2];\n\nvoid setup() {\n  Serial.begin(115200);\n}\n\nvoid loop() {\n\n  for(int i=0;i < 2; i++) {\n  \n    const long SMOOTHED_DATA = expSmooth[i]( analogRead(ANAPIN[i]) >> 3 );\n    \n    if( isCHANGED[i](SMOOTHED_DATA) ) {\n      controlChange(CHANNEL, CC[i], SMOOTHED_DATA);\n      MidiUSB.flush();\n    };\n    \n    delay(10);\n  };\n}\n\n//controll value or velocity\n// First parameter is the event type (0x0B = control change).\n// Second parameter is the event type, combined with the channel.\n// Third parameter is the control number number (0-119).\n// Fourth parameter is the control value (0-127).\n\nvoid controlChange(byte channel, byte control, byte value) {\n  midiEventPacket_t event = {0x0B, 0xB0 | channel, control, value};\n  MidiUSB.sendMIDI(event);\n}}\n\n```\n\n\u5b9a\u6570``` REACT_RATE ```\u3092\u5c0f\u3055\u304f\u3059\u308b\u3068\u30ce\u30a4\u30ba\u304c\u6e1b\u308a\u307e\u3059\u304c\u53cd\u5fdc\u306f\u60aa\u304f\u306a\u308a\u307e\u3059\u3002\n\nLeonardo\u306b20kB\u306eVR\u3092\u633f\u3057\u3066\u3056\u3063\u3068\u8a66\u3057\u305f\u611f\u3058\u3060\u3068\u3001\n\n+ \u30d3\u30c3\u30c8\u30b7\u30d5\u30c8\u3057\u3066 0 ~ 127 \u306e\u7bc4\u56f2\u3067\u4f7f\u3046\u306a\u3089 20 \u304f\u3089\u3044\n+ 0 ~ 1023 \u3067\u4f7f\u3046\u306a\u3089 5 \u304f\u3089\u3044\n\n\u304c\u4f7f\u3044\u3084\u3059\u3044\u304b\u306a\u3042...\u3068\u3044\u3046\u611f\u3058\u3067\u3059\u3002\u3082\u3061\u308d\u3093\u74b0\u5883\u306b\u3088\u308a\u307e\u3059\u304c\u3002\n![P_20160913_192030.jpg](https://qiita-image-store.s3.amazonaws.com/0/61597/56411a78-e9e9-98e0-6c5b-3cbaa24f06de.jpeg \"P_20160913_192030.jpg\")\n\n#\u6bd4\u3079\u3066\u307f\u305f\n\u6307\u6570\u79fb\u52d5\u5e73\u5747\u3068\u5358\u7d14\u79fb\u52d5\u5e73\u5747\u3001\u6bd4\u3079\u3066\u307f\u307e\u3057\u305f\u3002\n\u4ee5\u4e0b\u306e\u30b9\u30b1\u30c3\u30c1\u3092Leonardo\u306b\u5165\u308c\u3066VR\u3092\u3050\u308a\u3050\u308a\u3057\u3066\u307f\u307e\u3057\u305f\u3002\n\n```cpp\n#include <ExponentialSmoothFunc.h>\n#include <SmoothFunc.h>\n\nconst int PIN = 0 ;\n\nconst long REACT_RATE = 12;\nExponentialSmooth expSmooth( REACT_RATE );\n\nconst int HISTORY_SIZE = 20;\nGetAverage getAverage( HISTORY_SIZE);\n\nvoid setup() {\n  Serial.begin(115200);\n  while(!Serial);\n  Serial.print(\"Start!!\\n\");\n}\n\nvoid loop() {\n  const long RAW_DATA = analogRead(PIN);\n  const long EXP_SMOOTHED_DATA = expSmooth( RAW_DATA);\n  const long SIMPLE_SMOOTHED_DATA = getAverage( RAW_DATA);\n  \n  Serial.print(RAW_DATA);\n  Serial.print(\",\");\n  Serial.print(EXP_SMOOTHED_DATA);\n  Serial.print(\",\");\n  Serial.print(SIMPLE_SMOOTHED_DATA);\n  Serial.print(\",\");\n  Serial.println();\n  \n  delay(100);\n}\n```\n\n\u30b7\u30ea\u30a2\u30eb\u30d7\u30ed\u30c3\u30bf\u306e\u30b9\u30af\u30b7\u30e7\u3002\n![\u30b9\u30af\u30ea\u30fc\u30f3\u30b7\u30e7\u30c3\u30c8 2016-09-13 17.33.39.png](https://qiita-image-store.s3.amazonaws.com/0/61597/0cacc691-bba8-7613-468b-2afdb3946661.png \"\u30b9\u30af\u30ea\u30fc\u30f3\u30b7\u30e7\u30c3\u30c8 2016-09-13 17.33.39.png\")\n\n+ \u9752:analogRead()\u3057\u305f\u751f\u306e\u5024\n+ \u30aa\u30ec\u30f3\u30b8:\u6307\u6570\u79fb\u52d5\u5e73\u5747\n+ \u8d64:\u5358\u7d14\u79fb\u52d5\u5e73\u5747\n\n\u3067\u3059\u3002\n\n\u307e\u305a\u4f55\u5ea6\u304b\u8a66\u3057\u3066\u3001\u30d1\u30eb\u30b9\u306e90%\u3042\u305f\u308a\u3067\u540c\u3058\u5024\u306b\u306a\u308b\u3088\u3046\u306b\u53cd\u5fdc\u901f\u5ea6\u3092\u5408\u305b\u307e\u3057\u305f\u3002\n\u6307\u6570\u79fb\u52d5\u5e73\u5747\u306e12%\u304c\u5358\u7d14\u79fb\u52d5\u5e73\u5747\u306e\u5c65\u6b7420\u500b\u306b\u76f8\u5f53\u3059\u308b\u3088\u3046\u3067\u3059\u3002\n\n\u3042\u3068\u306f\u898b\u305f\u901a\u308a\u3067\u3059\u3002\n\u5358\u7d14\u306a\u30d1\u30eb\u30b9\u3067\u306f\u826f\u3055\u3052\u306b\u898b\u3048\u308b\u5358\u7d14\u79fb\u52d5\u5e73\u5747\u3067\u3059\u304c\u3001\u3050\u308a\u3050\u308a\u3059\u308b\u3068\u3064\u3044\u3066\u3053\u308c\u306a\u3044\u611f\u304c\u3042\u308a\u3042\u308a\u3067\u3059\u3002\n\n\u5bfe\u3057\u3066\u6307\u6570\u79fb\u52d5\u5e73\u5747\u306e\u307b\u3046\u306f\u3001\u5358\u7d14\u306a\u30d1\u30eb\u30b9\u3067\u306f\u304b\u306a\u308a\u920d\u3063\u3066\u3044\u308b\u3088\u3046\u306b\u898b\u3048\u307e\u3059\u304c\u3001\u3050\u308a\u3050\u308a\u3057\u305f\u6642\u306b\u306f\u3061\u3083\u3093\u3068\u3064\u3044\u3066\u3053\u308c\u3066\u307e\u3059\u3002\n\n\u4f55\u3088\u308a\u30b0\u30e9\u30d5\u304c\u7dba\u9e97\u3002\u3053\u308c\u3067DAW\u306eMIDI\u30aa\u30fc\u30c8\u30e1\u30fc\u30b7\u30e7\u30f3\u3057\u305f\u3044!\n\n\u6700\u5f8c\u306f\u3082\u308d\u30b3\u30f3\u30c8\u30ed\u30fc\u30e9\u30fc\u5bc4\u308a\u306e\u8a71\u306b\u306a\u3063\u3066\u3057\u307e\u3044\u307e\u3057\u305f\u304c(\u305d\u3082\u305d\u3082\u52d5\u6a5f\u304c\u305d\u3063\u3061)\u3001\u30c7\u30fc\u30bf\u8a08\u6e2c\u7cfb\u306e\u7528\u9014\u306b\u3082\u4f7f\u3048\u308b\u3093\u3058\u3083\u306a\u3044\u304b\u3068\u601d\u3044\u307e\u3059\u3002\n\n", "tags": ["Arduino", "C++", "\u95a2\u6570\u578b\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0", "MIDI"]}