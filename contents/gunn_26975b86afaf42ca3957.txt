{"context": " More than 1 year has passed since last update.\u30c6\u30fc\u30e9\u30fc\u5c55\u958b\u3057\u3066\u3001\u9069\u5f53\u306b\u5b9f\u88c5\u3002\nfloat\u3067\u3002\u7cbe\u5ea6\u304c\u3044\u307e\u3044\u3061\u3002\u6c17\u306b\u3057\u306a\u3044\u3002\n\nsin.c\n#define N 15\nfloat my_sin(float x)\n{\n  float sum;\n  float f;\n  float x2;\n\n  x -= (int)(x / (2*PI)) * 2 * PI;\n  sum = x;\n  f = x;\n  x2  = x*x;\n  for (int n=1; n<=N; n++) {\n    f *= - x2 / ((2*n + 1) * (2*n));\n    sum += f;\n  }\n  return sum;\n}\n\n\nSIMD(AVX)\u3067\u4e26\u5217\u5316\u30028\u500b\u4e00\u6c17\u306b\u6c42\u3081\u308b\u3002\n\nsin8_simd.c\n#define N 11\nvoid my_sin8_simd(float *inp, float *out)\n{\n  const __m256 ymm_2pi  = _mm256_set1_ps(2*PI);\n  const __m256 ymm_zero = _mm256_setzero_ps();\n  __m256 ymm_x = _mm256_loadu_ps(inp);\n  __m256 ymm_div2pi = _mm256_div_ps(ymm_x, ymm_2pi);\n  __m256 ymm_floor = _mm256_round_ps(ymm_div2pi, _MM_FROUND_TO_ZERO);\n  ymm_x = _mm256_fnmadd_ps(ymm_floor, ymm_2pi, ymm_x);\n  __m256 ymm_sum = ymm_x;\n  __m256 ymm_f   = ymm_x;\n  __m256 ymm_x2  = _mm256_mul_ps(ymm_x, ymm_x);\n\n  for (int n=1; n<=N; n++) {\n    //denominator = 1.0 / ((2*n + 1) * (2*n)); \u4e8b\u524d\u306b\u8a08\u7b97\u3057\u3066\u304a\u304f\u3002\n    const __m256 ymm_denominator = _mm256_set1_ps(denominator[n]);\n    __m256 ymm_mul = _mm256_mul_ps(ymm_x2, ymm_denominator);\n    ymm_f = _mm256_mul_ps(\n        _mm256_sub_ps(ymm_zero, ymm_f),\n        _mm256_mul_ps(ymm_x2, ymm_denominator)\n    );\n    ymm_sum = _mm256_add_ps(ymm_sum, ymm_f);\n  }\n  _mm256_storeu_ps(&out[0], ymm_sum);\n  return;\n}\n\n\n\n\u30c6\u30fc\u30e9\u30fc\u5c55\u958b\u3057\u3066\u3001\u9069\u5f53\u306b\u5b9f\u88c5\u3002\nfloat\u3067\u3002\u7cbe\u5ea6\u304c\u3044\u307e\u3044\u3061\u3002\u6c17\u306b\u3057\u306a\u3044\u3002\n\n```c:sin.c\n#define N 15\nfloat my_sin(float x)\n{\n  float sum;\n  float f;\n  float x2;\n\n  x -= (int)(x / (2*PI)) * 2 * PI;\n  sum = x;\n  f = x;\n  x2  = x*x;\n  for (int n=1; n<=N; n++) {\n    f *= - x2 / ((2*n + 1) * (2*n));\n    sum += f;\n  }\n  return sum;\n}\n```\nSIMD(AVX)\u3067\u4e26\u5217\u5316\u30028\u500b\u4e00\u6c17\u306b\u6c42\u3081\u308b\u3002\n\n```c:sin8_simd.c\n#define N 11\nvoid my_sin8_simd(float *inp, float *out)\n{\n  const __m256 ymm_2pi  = _mm256_set1_ps(2*PI);\n  const __m256 ymm_zero = _mm256_setzero_ps();\n  __m256 ymm_x = _mm256_loadu_ps(inp);\n  __m256 ymm_div2pi = _mm256_div_ps(ymm_x, ymm_2pi);\n  __m256 ymm_floor = _mm256_round_ps(ymm_div2pi, _MM_FROUND_TO_ZERO);\n  ymm_x = _mm256_fnmadd_ps(ymm_floor, ymm_2pi, ymm_x);\n  __m256 ymm_sum = ymm_x;\n  __m256 ymm_f   = ymm_x;\n  __m256 ymm_x2  = _mm256_mul_ps(ymm_x, ymm_x);\n\n  for (int n=1; n<=N; n++) {\n    //denominator = 1.0 / ((2*n + 1) * (2*n)); \u4e8b\u524d\u306b\u8a08\u7b97\u3057\u3066\u304a\u304f\u3002\n    const __m256 ymm_denominator = _mm256_set1_ps(denominator[n]);\n    __m256 ymm_mul = _mm256_mul_ps(ymm_x2, ymm_denominator);\n    ymm_f = _mm256_mul_ps(\n        _mm256_sub_ps(ymm_zero, ymm_f),\n        _mm256_mul_ps(ymm_x2, ymm_denominator)\n    );\n    ymm_sum = _mm256_add_ps(ymm_sum, ymm_f);\n  }\n  _mm256_storeu_ps(&out[0], ymm_sum);\n  return;\n}\n", "tags": ["C", "SIMD", "AVX"]}