{"tags": ["RxSwift", "iOS", "Swift"], "context": "\n\nDriver\nRxSwift/Documentation/Units.md #Driver\u306b\u3082\u8a18\u8f09\u304c\u3042\u308b\u901a\u308a\u3001\nUI\u30ec\u30a4\u30e4\u30fc\u306e\u30ea\u30a2\u30af\u30c6\u30a3\u30d6\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u306e\u305f\u3081\u306b\u63d0\u4f9b\u3055\u308c\u3066\u3044\u308b\u90e8\u54c1\u3000\u3089\u3057\u3044\u3068\u6700\u8fd1\u8a8d\u8b58\u3057\u307e\u3057\u305f\n\u4ee5\u524d\u8a18\u4e8b\u306b\u3057\u305fRxSwift\u3092\u4f7f\u3063\u305fRSSFeed\u53d6\u5f97\u306e\u30b5\u30f3\u30d7\u30eb\u3067\u306f\nView\u306e\u66f4\u65b0\u306b\u3082\u4ee5\u4e0b\u306e\u3088\u3046\u306bVariable\u5909\u6570\u3092\u4f7f\u3063\u3066\u3044\u305f\u306e\u3067\u3059\u304c\u3001\n\n\u3053\u308c\u307e\u3067\n        // entries\u306fVariable\u5909\u6570\n        viewModel.entries.asObservable()\n            .subscribe(onNext: { [unowned self] x in\n                // \u66f4\u65b0\n                self.refresh.endRefreshing()\n                self.tableView.reloadData()\n                }, onError: { error in\n                    // \u30a8\u30e9\u30fc\n                    // FIXME: \u3044\u3064\u304b\u3084\u308b\u304b\u3082\n                }, onCompleted: { () in\n                    // \u5b8c\u4e86\n                }) { () in\n\n            }.addDisposableTo(disposeBag)\n\n\n\n\n\u3053\u308c\u3063\u3066Driver\u3092\u4f7f\u3046\u3079\u304d\u306a\u306e\u3067\u306f\u30fb\u30fb\u30fb\uff1f\n\u3068\u3044\u3046\u3053\u3068\u3067\u3001Swift\u30d3\u30ae\u30ca\u30fc\u306a\u81ea\u5206\u304c\u56db\u82e6\u516b\u82e6\u3057\u306a\u304c\u3089RxSwift\u3067UI\u306e\u66f4\u65b0\u306b\u306fDriver\u3092\u4f7f\u3063\u3066\u307f\u305f\u307e\u3068\u3081\u3067\u3059\n\n\u3069\u3093\u306a\u30a2\u30d7\u30ea\uff1f\n : \u4ee5\u524d\u4f5c\u3063\u305fRSSFeed\u30a2\u30d7\u30ea\u306e\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u3092\u30ea\u30d5\u30a1\u30af\u30bf\u30ea\u30f3\u30b0\u3057\u3066\u307f\u307e\u3057\u305f\n\n\u74b0\u5883\n\nXcode 7.3\nSwift 2.2\nRxSwift 2.3.1\niOS8\u4ee5\u4e0a\n\n\n\u30ea\u30dd\u30b8\u30c8\u30ea\nmafmoff/RxDriveRSSFeed\n\n\u6982\u8981\n\u904e\u53bb\u306e\u8a18\u4e8b\u306b\u3042\u308a\u307e\u3059\n\nDriver\u3092\u4f7f\u3046\n\n\u30a4\u30e1\u30fc\u30b8\u3067\u3059\n\n\nDriver\u306e\u4f7f\u3044\u6240\n\n1. Model : \uff08\u6e96\u5099\uff09 \u30ea\u30af\u30a8\u30b9\u30c8\u7d50\u679c\u3092Variable\u306b\u53cd\u6620\u3057\u3066ViewModel\u306b\u901a\u77e5\n\u3053\u3053\u3067\u306f\u3001\u30ea\u30af\u30a8\u30b9\u30c8\u3092\u5b9f\u884c\u3057\u7d50\u679c\u3092Subscribe\u3057\u3066\u5404Variable\u5024\u3092\u66f4\u65b0\u3057\u307e\u3059\n\u3053\u308c\u3067ViewModel\u5074\u306b\u5404\u5024\u306e\u5909\u66f4\u304c\u901a\u77e5\u3055\u308c\u307e\u3059\n\u3053\u306e\u6642API\u901a\u4fe1\u306f\u30d0\u30c3\u30af\u30b0\u30e9\u30f3\u30c9\u3067\u884c\u3046\u3088\u3046\u306b\u6307\u5b9a\u3057\u3066\u304a\u304d\u307e\u3059\n\nListModel\n\n    /// Load\n    final let isLoading = Variable(false)\n    /// Entries\n    final let entries = Variable([Entry]())\n    /// Error\n    final let error: Variable<ErrorType?> = Variable(nil)\n    /// Rx Dispose\n    final let disposeBag = DisposeBag()\n\n    final func request() {\n        if isLoading.value {\n            return\n        }\n        isLoading.value = true\n        error.value = nil\n\n        let request = FeedRequest()\n        request.connect()\n            // API\u63a5\u7d9a\u306fBackground\u3092\u6307\u5b9a\u3059\u308b\n            .subscribeOn(SerialDispatchQueueScheduler(globalConcurrentQueueQOS: .Background))\n            .subscribe(\n                onNext: { [weak self] in self?.entries.value = $0.feed.entries },\n                onError: { [weak self] in\n                    self?.error.value = $0\n                    self?.isLoading.value = false },\n                onCompleted: { [weak self] in self?.isLoading.value = false }\n            )\n        .addDisposableTo(disposeBag)\n    }\n\n\n\u305d\u308c\u305e\u308cView\u5074\u306eUI\u3068\u7d10\u4ed8\u304d\u307e\u3059\n\nisLoading\uff1aUIRefreshControl\u306e\u8868\u793a\u30fb\u975e\u8868\u793a\nentries\uff1aUITableView\u4e0a\u306b\u8868\u793a\u3059\u308b\u4e00\u89a7\u30c7\u30fc\u30bf\nerror\uff1a\u30a8\u30e9\u30fc\u6642\u7528\u306eUIView\u306e\u8868\u793a\u30fb\u975e\u8868\u793a\n\n\n2. ViewModel : \u30e2\u30c7\u30eb\u304b\u3089\u53d7\u3051\u53d6\u3063\u305f\u5024\u3092Driver\u306b\u5909\u63db\u3059\u308b\n\u30ea\u30af\u30a8\u30b9\u30c8\u3067\u53d7\u3051\u53d6\u3063\u305f\u7d50\u679c\u3092Driver\u306b\u5909\u63db\u3057\u307e\u3059\n TIPS: Driver.never()\u3057\u3066\u304a\u304f\u3068\u5024\u3092\u6301\u305f\u305aCompleted\u3059\u3089\u767a\u751f\u3057\u307e\u305b\u3093\n TIPS: Driver\u3092\u4f7f\u3046\u306b\u306fimport RxCocoa\u304c\u5fc5\u8981\u3067\u3057\u305f\n\nListViewModel\n\n    /// Request Model class\n    final private var model = ListModel()\n    /// Entries\n    final var entries = [Entry]()\n    // Rx\n    /// Data Updated\n    final private(set) var dataUpdated: Driver<[Entry]> = Driver.never()\n    /// Loading flg\n    final private(set) var isLoading: Driver<Bool> = Driver.never()\n    /// Error flg\n    final private(set) var isError: Driver<Bool> = Driver.never()\n\n    override init() {\n        super.init()\n\n        // ViewController\u5074\u3067TableView\u306e\u66f4\u65b0\u3068\u7d10\u4ed8\u3051\u307e\u3059\n        dataUpdated = Driver\n            // \u30a8\u30e9\u30fc\u306e\u3068\u304d\u3001\u4e00\u89a7\u306b\u8868\u793a\u3059\u308b\u30a8\u30f3\u30c8\u30ea\u30fc\u30920\u4ef6\u306b\u3059\u308b\u3088\u3046\u306b\u5909\u63db\u3057\u3066\u3044\u307e\u3059\n            .combineLatest(model.entries.asDriver(),\n                           model.error.asDriver().map { $0 != nil },\n                           resultSelector: { ($1) ? [] : $0 })\n        // ViewController\u5074\u3067RefreshControl\u306e\u30b9\u30c6\u30fc\u30bf\u30b9\u3068\u7d10\u4ed8\u3051\u307e\u3059\n        isLoading = model.isLoading.asDriver()\n        // ViewController\u5074\u3067\u30a8\u30e9\u30fc\u753b\u9762\u306e\u8868\u793a\u3068\u7d10\u4ed8\u3051\u307e\u3059\n        isError = model.error.asDriver().map { $0 != nil }\n    }\n\n\n\n1.\u306e\u30ea\u30af\u30a8\u30b9\u30c8\u3067Variable\u304c\u66f4\u65b0\u3055\u308c\u308b\u305f\u3073\u306b\u3001Driver\u304b\u3089\u306fobserver\u306b\u5bfe\u3057\u3066\u901a\u77e5\u304c\u884c\u308f\u308c\u307e\u3059\nViewController\u3067\u306f\u3053\u306e\u901a\u77e5\u3092\u30c8\u30ea\u30ac\u30fc\u306b\u3057\u3066\u3001\u30d0\u30a4\u30f3\u30c9\u3057\u3066\u3044\u308b\u5404UI\u306e\u66f4\u65b0\u3092\u884c\u3044\u307e\u3059\n\n3. ViewController : ViewModel\u306eDriver\u3092UI\u306b\u30d0\u30a4\u30f3\u30c9\u3059\u308b\nViewDidLoad()\u5185\u3067Driver\u3068\u5404UI\u3092\u7d10\u4ed8\u3051\u307e\u3059\n\nListController\n\n        // TableView Reload\n        viewModel.dataUpdated\n            .driveNext { [unowned self] in\n                self.viewModel.entries = $0\n                self.tableView.reloadData()\n            }\n            .addDisposableTo(disposeBag)\n\n        // Loading Status\n        viewModel.isLoading\n            .drive(refresh.rx_refreshing)\n            .addDisposableTo(disposeBag)\n\n        // Error View\n        viewModel.isError\n            .map { !$0 }\n            .drive(errorView.rx_hidden)\n            .addDisposableTo(disposeBag)\n\n        // Pull Refresh\n        refresh.rx_controlEvent(.ValueChanged)\n            .subscribeNext { [unowned self] _ in self.viewModel.reloadData()\n        }.addDisposableTo(disposeBag)\n\n\n\n\n\u3053\u308c\u3067\u3001\u30ea\u30af\u30a8\u30b9\u30c8\u3092\u3057\u3066\u7d50\u679c\u304c\u66f4\u65b0\u3055\u308c\u308b\u305f\u3073\u306bDriver\u304b\u3089\u306fobserver\u306b\u5bfe\u3057\u3066\u901a\u77e5\u304c\u884c\u308f\u308c\u3001\u30d0\u30a4\u30f3\u30c9\u3057\u3066\u3044\u308b\u5404UI\u306e\u66f4\u65b0\u304c\u50cd\u304d\u307e\u3057\u305f\n\n\u3067\u304d\u305f\u3082\u306e\n\n\n\u307e\u3068\u3081\n\n\nDriver\u306f\u30e1\u30a4\u30f3\u30b9\u30ec\u30c3\u30c9\u51e6\u7406\u306b\u9069\u3057\u3066\u3044\u308b\n\u30a8\u30e9\u30fc\u767a\u751f\u3057\u306a\u3044\n\n\u4ee5\u4e0a\u3067\u3059  \n\u82e6\u3057\u307f\u306a\u304c\u3089\u66f8\u304d\u307e\u3057\u305f\uff01RxSwift\u306f\u96e3\u3057\u3044\u3067\u3059\u30fb\u30fb\uff08\u52c9\u5f37\u4f1a\u53c2\u52a0\u3057\u305f\u304b\u3063\u305f\uff09\nModel\u30af\u30e9\u30b9\u306a\u3069\u3001\u3082\u3063\u3068\u304b\u3063\u3053\u3044\u3044\u8a2d\u8a08\u304c\u3042\u308a\u305d\u3046\u3067\u3059\u3002\n\u4eca\u5f8c\u3082\u3055\u3089\u306b\u3088\u3044\u5b9f\u88c5\u65b9\u6cd5\u3092\u52c9\u5f37\u3055\u305b\u3066\u9802\u304d\u307e\u3059\uff01\n\u8aad\u3093\u3067\u3044\u305f\u3060\u304d\u3001\u3042\u308a\u304c\u3068\u3046\u3054\u3056\u3044\u307e\u3057\u305f\n# Driver\n[RxSwift/Documentation/Units.md #Driver](https://github.com/ReactiveX/RxSwift/blob/master/Documentation/Units.md#driver)\u306b\u3082\u8a18\u8f09\u304c\u3042\u308b\u901a\u308a\u3001\n_UI\u30ec\u30a4\u30e4\u30fc\u306e\u30ea\u30a2\u30af\u30c6\u30a3\u30d6\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u306e\u305f\u3081\u306b\u63d0\u4f9b\u3055\u308c\u3066\u3044\u308b\u90e8\u54c1_\u3000\u3089\u3057\u3044\u3068\u6700\u8fd1\u8a8d\u8b58\u3057\u307e\u3057\u305f\n\n\n\u4ee5\u524d\u8a18\u4e8b\u306b\u3057\u305f[RxSwift\u3092\u4f7f\u3063\u305fRSSFeed\u53d6\u5f97\u306e\u30b5\u30f3\u30d7\u30eb](https://github.com/mafmoff/RxRSSFeed)\u3067\u306f\nView\u306e\u66f4\u65b0\u306b\u3082\u4ee5\u4e0b\u306e\u3088\u3046\u306b`Variable`\u5909\u6570\u3092\u4f7f\u3063\u3066\u3044\u305f\u306e\u3067\u3059\u304c\u3001\n\n```swift:\u3053\u308c\u307e\u3067\n        // entries\u306fVariable\u5909\u6570\n        viewModel.entries.asObservable()\n            .subscribe(onNext: { [unowned self] x in\n                // \u66f4\u65b0\n                self.refresh.endRefreshing()\n                self.tableView.reloadData()\n                }, onError: { error in\n                    // \u30a8\u30e9\u30fc\n                    // FIXME: \u3044\u3064\u304b\u3084\u308b\u304b\u3082\n                }, onCompleted: { () in\n                    // \u5b8c\u4e86\n                }) { () in\n                    \n            }.addDisposableTo(disposeBag)\n\n```\n\n### \u3053\u308c\u3063\u3066**Driver**\u3092\u4f7f\u3046\u3079\u304d\u306a\u306e\u3067\u306f\u30fb\u30fb\u30fb\uff1f \n\u3068\u3044\u3046\u3053\u3068\u3067\u3001Swift\u30d3\u30ae\u30ca\u30fc\u306a\u81ea\u5206\u304c\u56db\u82e6\u516b\u82e6\u3057\u306a\u304c\u3089**RxSwift\u3067UI\u306e\u66f4\u65b0\u306b\u306fDriver\u3092\u4f7f\u3063\u3066\u307f\u305f**\u307e\u3068\u3081\u3067\u3059\n\n# \u3069\u3093\u306a\u30a2\u30d7\u30ea\uff1f\n:tada: : \u4ee5\u524d\u4f5c\u3063\u305fRSSFeed\u30a2\u30d7\u30ea\u306e\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u3092\u30ea\u30d5\u30a1\u30af\u30bf\u30ea\u30f3\u30b0\u3057\u3066\u307f\u307e\u3057\u305f\n\n## \u74b0\u5883\n* Xcode 7.3\n* Swift 2.2\n* RxSwift 2.3.1\n* iOS8\u4ee5\u4e0a\n\n## \u30ea\u30dd\u30b8\u30c8\u30ea\n[mafmoff/RxDriveRSSFeed](https://github.com/mafmoff/RxDriveRSSFeed)\n\n##\u6982\u8981\n\u904e\u53bb\u306e[\u8a18\u4e8b](http://qiita.com/mafmoff/items/4818c113f203db54c258#%E6%A6%82%E8%A6%81)\u306b\u3042\u308a\u307e\u3059\n\n# Driver\u3092\u4f7f\u3046\n## \u30a4\u30e1\u30fc\u30b8\u3067\u3059\n<img width=\"1244\" alt=\"\u30b9\u30af\u30ea\u30fc\u30f3\u30b7\u30e7\u30c3\u30c8 2016-04-01 19.04.43.png\" src=\"https://qiita-image-store.s3.amazonaws.com/0/98613/8dd0028f-97c3-b160-ef63-7501ad8f0e84.png\">\n\n\n## Driver\u306e\u4f7f\u3044\u6240\n### 1. **Model** : \uff08\u6e96\u5099\uff09 \u30ea\u30af\u30a8\u30b9\u30c8\u7d50\u679c\u3092`Variable`\u306b\u53cd\u6620\u3057\u3066ViewModel\u306b\u901a\u77e5\n\n\u3053\u3053\u3067\u306f\u3001\u30ea\u30af\u30a8\u30b9\u30c8\u3092\u5b9f\u884c\u3057\u7d50\u679c\u3092`Subscribe`\u3057\u3066\u5404`Variable`\u5024\u3092\u66f4\u65b0\u3057\u307e\u3059\n\u3053\u308c\u3067ViewModel\u5074\u306b\u5404\u5024\u306e\u5909\u66f4\u304c\u901a\u77e5\u3055\u308c\u307e\u3059\n\u3053\u306e\u6642API\u901a\u4fe1\u306f\u30d0\u30c3\u30af\u30b0\u30e9\u30f3\u30c9\u3067\u884c\u3046\u3088\u3046\u306b\u6307\u5b9a\u3057\u3066\u304a\u304d\u307e\u3059\n\n```swift:ListModel\n\n    /// Load\n    final let isLoading = Variable(false)\n    /// Entries\n    final let entries = Variable([Entry]())\n    /// Error\n    final let error: Variable<ErrorType?> = Variable(nil)\n    /// Rx Dispose\n    final let disposeBag = DisposeBag()\n    \n    final func request() {\n        if isLoading.value {\n            return\n        }\n        isLoading.value = true\n        error.value = nil\n        \n        let request = FeedRequest()\n        request.connect()\n            // API\u63a5\u7d9a\u306fBackground\u3092\u6307\u5b9a\u3059\u308b\n            .subscribeOn(SerialDispatchQueueScheduler(globalConcurrentQueueQOS: .Background))\n            .subscribe(\n                onNext: { [weak self] in self?.entries.value = $0.feed.entries },\n                onError: { [weak self] in\n                    self?.error.value = $0\n                    self?.isLoading.value = false },\n                onCompleted: { [weak self] in self?.isLoading.value = false }\n            )\n        .addDisposableTo(disposeBag)\n    }\n```\n\n\u305d\u308c\u305e\u308cView\u5074\u306eUI\u3068\u7d10\u4ed8\u304d\u307e\u3059\n\n* isLoading\uff1aUIRefreshControl\u306e\u8868\u793a\u30fb\u975e\u8868\u793a\n* entries\uff1aUITableView\u4e0a\u306b\u8868\u793a\u3059\u308b\u4e00\u89a7\u30c7\u30fc\u30bf\n* error\uff1a\u30a8\u30e9\u30fc\b\u6642\u7528\u306eUIView\u306e\u8868\u793a\u30fb\u975e\u8868\u793a\n \n### 2. **ViewModel** : \u30e2\u30c7\u30eb\u304b\u3089\u53d7\u3051\u53d6\u3063\u305f\u5024\u3092`Driver`\u306b\u5909\u63db\u3059\u308b\n\u30ea\u30af\u30a8\u30b9\u30c8\u3067\u53d7\u3051\u53d6\u3063\u305f\u7d50\u679c\u3092`Driver`\u306b\u5909\u63db\u3057\u307e\u3059\n\n:tada: TIPS: `Driver.never()`\u3057\u3066\u304a\u304f\u3068\u5024\u3092\u6301\u305f\u305aCompleted\u3059\u3089\u767a\u751f\u3057\u307e\u305b\u3093\n:tada: TIPS: `Driver`\u3092\u4f7f\u3046\u306b\u306f``import RxCocoa``\u304c\u5fc5\u8981\u3067\u3057\u305f\n\n\n```swift:ListViewModel\n\n    /// Request Model class\n    final private var model = ListModel()\n    /// Entries\n    final var entries = [Entry]()\n    // Rx\n    /// Data Updated\n    final private(set) var dataUpdated: Driver<[Entry]> = Driver.never()\n    /// Loading flg\n    final private(set) var isLoading: Driver<Bool> = Driver.never()\n    /// Error flg\n    final private(set) var isError: Driver<Bool> = Driver.never()\n    \n    override init() {\n        super.init()\n        \n        // ViewController\u5074\u3067TableView\u306e\u66f4\u65b0\u3068\u7d10\u4ed8\u3051\u307e\u3059\n        dataUpdated = Driver\n            // \u30a8\u30e9\u30fc\u306e\u3068\u304d\u3001\u4e00\u89a7\u306b\u8868\u793a\u3059\u308b\u30a8\u30f3\u30c8\u30ea\u30fc\u30920\u4ef6\u306b\u3059\u308b\u3088\u3046\u306b\u5909\u63db\u3057\u3066\u3044\u307e\u3059\n            .combineLatest(model.entries.asDriver(),\n                           model.error.asDriver().map { $0 != nil },\n                           resultSelector: { ($1) ? [] : $0 })\n        // ViewController\u5074\u3067RefreshControl\u306e\u30b9\u30c6\u30fc\u30bf\u30b9\u3068\u7d10\u4ed8\u3051\u307e\u3059\n        isLoading = model.isLoading.asDriver()\n        // ViewController\u5074\u3067\u30a8\u30e9\u30fc\u753b\u9762\u306e\u8868\u793a\u3068\u7d10\u4ed8\u3051\u307e\u3059\n        isError = model.error.asDriver().map { $0 != nil }\n    }\n\n```\n\n1.\u306e\u30ea\u30af\u30a8\u30b9\u30c8\u3067`Variable`\u304c\u66f4\u65b0\u3055\u308c\u308b\u305f\u3073\u306b\u3001`Driver`\u304b\u3089\u306fobserver\u306b\u5bfe\u3057\u3066\u901a\u77e5\u304c\u884c\u308f\u308c\u307e\u3059\nViewController\u3067\u306f\u3053\u306e\u901a\u77e5\u3092\u30c8\u30ea\u30ac\u30fc\u306b\u3057\u3066\u3001\u30d0\u30a4\u30f3\u30c9\u3057\u3066\u3044\u308b\u5404UI\u306e\u66f4\u65b0\u3092\u884c\u3044\u307e\u3059\n\n### 3. **ViewController** : ViewModel\u306e`Driver`\u3092UI\u306b\u30d0\u30a4\u30f3\u30c9\u3059\u308b\n`ViewDidLoad()`\u5185\u3067`Driver`\u3068\u5404UI\u3092\u7d10\u4ed8\u3051\u307e\u3059\n\n```swift:ListController\n\n        // TableView Reload\n        viewModel.dataUpdated\n            .driveNext { [unowned self] in\n                self.viewModel.entries = $0\n                self.tableView.reloadData()\n            }\n            .addDisposableTo(disposeBag)\n\n        // Loading Status\n        viewModel.isLoading\n            .drive(refresh.rx_refreshing)\n            .addDisposableTo(disposeBag)\n        \n        // Error View\n        viewModel.isError\n            .map { !$0 }\n            .drive(errorView.rx_hidden)\n            .addDisposableTo(disposeBag)\n\n        // Pull Refresh\n        refresh.rx_controlEvent(.ValueChanged)\n            .subscribeNext { [unowned self] _ in self.viewModel.reloadData()\n        }.addDisposableTo(disposeBag)\n\n\n```\n\n\u3053\u308c\u3067\u3001\u30ea\u30af\u30a8\u30b9\u30c8\u3092\u3057\u3066\u7d50\u679c\u304c\u66f4\u65b0\u3055\u308c\u308b\u305f\u3073\u306b`Driver`\u304b\u3089\u306fobserver\u306b\u5bfe\u3057\u3066\u901a\u77e5\u304c\u884c\u308f\u308c\u3001\u30d0\u30a4\u30f3\u30c9\u3057\u3066\u3044\u308b\u5404UI\u306e\u66f4\u65b0\u304c\u50cd\u304d\u307e\u3057\u305f\n\n## \u3067\u304d\u305f\u3082\u306e\n<img width=\"867\" alt=\"\u30b9\u30af\u30ea\u30fc\u30f3\u30b7\u30e7\u30c3\u30c8 2016-04-02 14.46.48.png\" src=\"https://qiita-image-store.s3.amazonaws.com/0/98613/053c1fad-98d6-b547-1f4e-abc220f03099.png\">\n\n\n\n# \u307e\u3068\u3081\n* `Driver`\u306f\u30e1\u30a4\u30f3\u30b9\u30ec\u30c3\u30c9\u51e6\u7406\u306b\u9069\u3057\u3066\u3044\u308b\n* \u30a8\u30e9\u30fc\u767a\u751f\u3057\u306a\u3044\n\n\u4ee5\u4e0a\u3067\u3059 :tada: \n\u82e6\u3057\u307f\u306a\u304c\u3089\u66f8\u304d\u307e\u3057\u305f\uff01RxSwift\u306f\u96e3\u3057\u3044\u3067\u3059\u30fb\u30fb\uff08\u52c9\u5f37\u4f1a\u53c2\u52a0\u3057\u305f\u304b\u3063\u305f\uff09\n\nModel\u30af\u30e9\u30b9\u306a\u3069\u3001\u3082\u3063\u3068\u304b\u3063\u3053\u3044\u3044\u8a2d\u8a08\u304c\u3042\u308a\u305d\u3046\u3067\u3059\u3002\n\u4eca\u5f8c\u3082\u3055\u3089\u306b\u3088\u3044\u5b9f\u88c5\u65b9\u6cd5\u3092\u52c9\u5f37\u3055\u305b\u3066\u9802\u304d\u307e\u3059\uff01\n\u8aad\u3093\u3067\u3044\u305f\u3060\u304d\u3001\u3042\u308a\u304c\u3068\u3046\u3054\u3056\u3044\u307e\u3057\u305f\n"}