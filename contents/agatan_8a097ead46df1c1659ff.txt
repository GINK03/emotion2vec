{"context": " More than 1 year has passed since last update.Rust\u304c\u6700\u8fd1\u3068\u3066\u3082\u304a\u3082\u3057\u308d\u3044\u306e\u3067\u3001\u52c9\u5f37\u304c\u3066\u3089\u81ea\u4f5c\u30b7\u30a7\u30eb\u307f\u305f\u3044\u306a\u3082\u306e\u3092\u4f5c\u3063\u3066\u307f\u305f\u3044\u3068\u601d\u3044\u307e\u3059\u3002\n\u3068\u306f\u3044\u3048\u3001C\u8a00\u8a9e\u3067\u3055\u3048\u308d\u304f\u306b\u30b7\u30b9\u30c6\u30e0\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u66f8\u3044\u305f\u3053\u3068\u304c\u306a\u3044\u306e\u3067\u3001\u9053\u306f\u967a\u3057\u304f\u306a\u308a\u305d\u3046\u3067\u3059\u3002\n\n\u30d0\u30fc\u30b8\u30e7\u30f3\n0.13.0-nightly\u3092\u4f7f\u7528\u3057\u307e\u3057\u305f\u3002\n\u30b3\u30fc\u30c9\u5168\u6587\u306f\u3053\u3061\u3089\nagatan/rsh\n\n\u5b57\u53e5\u89e3\u6790\n\u3055\u3066\u3001\u30b7\u30a7\u30eb\u3068\u3044\u3063\u305f\u3089\u307e\u305a\u306f\u30e6\u30fc\u30b6\u306e\u5165\u529b\u3092\u53d7\u3051\u4ed8\u3051\u3066\u30d1\u30fc\u30b9\u3057\u3001\u30b3\u30de\u30f3\u30c9\u3092\u5b9f\u884c\u3057\u306a\u304f\u3066\u306f\u306a\u308a\u307e\u305b\u3093\u3002\n\u3068\u3044\u3046\u308f\u3051\u3067\u307e\u305a\u521d\u3081\u306b\u30d1\u30fc\u30b9\u90e8\u5206\u306b\u3064\u3044\u3066\u3084\u3063\u3066\u307f\u307e\u3059\u3002\n\u3055\u304f\u3063\u3068\u7d42\u308f\u3089\u305b\u305f\u304b\u3063\u305f\u306e\u3067\u3059\u304c\u3001\u3069\u3046\u3082\u307e\u3060String\u3068&str\u3068\u304b\u305d\u306e\u3078\u3093\u3067\u8a70\u307e\u3063\u3066\u3057\u307e\u3044\u307e\u3059...\n\nToken\u306e\u898f\u5b9a\nenum\u3092\u4f7f\u3063\u3066Token\u3092\u5217\u6319\u3057\u307e\u3059\u3002\n\u4e00\u5fdc\u6700\u7d42\u7684\u306b\u306f\u30d1\u30a4\u30d7\u3084\u3089\u30ea\u30c0\u30a4\u30ec\u30af\u30c8\u3084\u3089\u3082\u5b9f\u88c5\u3057\u305f\u3044\u306a\u30fc\u3068\u601d\u3063\u3066\u3044\u308b\u306e\u3067\u3001\u305d\u306e\u8fba\u3092\u8003\u616e\u306b\u5165\u308c\u305f\u5b9f\u88c5\u306b\u3057\u3066\u307f\u307e\u3057\u305f\u3002\nenum Token {\n    Str(String),\n    Pipe,\n    RedirectTo,\n    RedirectFrom,\n    Ampersand,\n}\n\nStr\u306f\u7279\u6b8a\u306a\u6587\u5b57\u4ee5\u5916\u306e\u6587\u5b57\u5217\u3067\u3059\u304b\u3089\u3001\u8981\u7d20\u3068\u3057\u3066String\u3092\u4fdd\u6301\u3055\u305b\u3066\u304a\u304d\u307e\u3057\u305f\u3002\n\nparser\n\u30d1\u30fc\u30b9\u306b\u306f(\u304a\u3082\u3057\u308d\u305d\u3046\u3060\u3063\u305f\u306e\u3067)iterator\u30c8\u30ec\u30a4\u30c8\u3092\u5b9f\u88c5\u3055\u305b\u308b\u3053\u3068\u306b\u3057\u307e\u3057\u305f\u3002\n\u5b9f\u969b\u3064\u304b\u3046\u3068\u304d\u306b\u306f\u3044\u3089\u306a\u3044\u6c17\u3082\u3057\u307e\u3059\u304c\u3001\u3061\u3087\u3063\u3068\u305f\u3081\u3057\u305f\u304b\u3063\u305f\u306e\u3067\u3002\n\u69cb\u9020\u4f53\u3068\u3057\u3066Parser\u3092\u4f5c\u308a\u307e\u3059\u3002\u30bd\u30fc\u30b9\u3068\u306a\u308b\u6587\u5b57\u5217\u3068\u3001\u73fe\u5728\u3069\u3053\u307e\u3067\u30d1\u30fc\u30b9\u6e08\u307f\u306a\u306e\u304b\u3092\u4fdd\u6301\u3059\u308bcurrent\u3092\u6301\u305f\u305b\u307e\u3057\u305f\u3002\npub struct Parser {\n    src: String,\n    pub current: uint,\n}\n\n\u3053\u306e\u69cb\u9020\u4f53\u306bIterator\u30c8\u30ec\u30a4\u30c8\u3092\u5b9f\u88c5\u3059\u308c\u3070\u3088\u3044\u306e\u3067\u3059\u304c\u3001\u88dc\u52a9\u95a2\u6570\u3068\u3057\u3066\u3044\u304f\u3064\u304b\u5b9f\u88c5\u3057\u3066\u304a\u304d\u307e\u3059\u3002\nimpl Parser {\n    pub fn new(src: String) -> Parser {\n        Parser { src: src, current: 0 }\n    }\n\n    pub fn current_char(&self) -> char {\n        self.src.char_at(self.current)\n    }\n\n    fn skip_whitespace(&mut self) {\n        while self.current_char().is_whitespace() {\n            self.current += 1;\n            if self.current >= self.src.char_len() {\n                return;\n            }\n        }\n    }\n\n    fn get_pipe(&mut self) -> Option<Token> {\n        if self.current_char() == '|' {\n            self.current += 1;\n            self.skip_whitespace();\n            Some(Token::Pipe)\n        } else {\n            None\n        }\n    }\n\n    fn get_ampersand(&mut self) -> Option<Token> {\n        if self.current_char() == '&' {\n            self.current += 1;\n            self.skip_whitespace();\n            Some(Token::Ampersand)\n        } else {\n            None\n        }\n    }\n\n    fn get_redirect_to(&mut self) -> Option<Token> {\n        if self.current_char() == '>' {\n            self.current += 1;\n            self.skip_whitespace();\n            Some(Token::RedirectTo)\n        } else {\n            None\n        }\n    }\n\n    fn get_redirect_from(&mut self) -> Option<Token> {\n        if self.current_char() == '<' {\n            self.current += 1;\n            self.skip_whitespace();\n            Some(Token::RedirectFrom)\n\n    fn get_str(&mut self) -> Option<Token> {\n        let mut i = self.current;\n        while !KEYWORDS.contains_char(self.src.char_at(i)) {\n            i += 1;\n        }\n        if i == self.current {\n            None\n        } else {\n            let result = Some(Token::Str(self.src.slice_chars(self.current, i).to_string()));\n            self.current = i;\n            self.skip_whitespace();\n            result\n        }\n    }\n}\n\n\nnew\u306f\u65b0\u3057\u3044\u30d1\u30fc\u30b5\u30fc\u3092\u751f\u6210\u3059\u308b\u305f\u3081\u306e\u95a2\u6570\u3067\u3059\u3002Parser\u306f\u6587\u5b57\u5217\u306e\u6240\u6709\u6a29\u3092\u8981\u6c42\u3057\u3066\u3044\u307e\u3059\u304c\u3001\u5165\u529b\u3055\u308c\u305f\u6587\u5b57\u5217\u306f\u30d1\u30fc\u30b9\u3059\u308b\u4ee5\u5916\u306b\u4f7f\u3044\u9053\u306f\u7121\u3044\u3068\u601d\u3063\u305f\u306e\u3067\u5927\u4e08\u592b\u3068\u5224\u65ad\u3057\u307e\u3057\u305f\u3002\ncurrent_char\u306f\u73fe\u5728\u6ce8\u76ee\u3057\u3066\u3044\u308b\u6587\u5b57\u3092\u8fd4\u3057\u307e\u3059\u3002\nskip_whitespace\u306f\u7a7a\u767d\u6587\u5b57\u3092\u98db\u3070\u3059\u3088\u3046\u306bself.current\u3092\u3044\u3058\u308a\u307e\u3059\u3002\u30d1\u30fc\u30b5\u30fc\u3067\u306f\u3001\u57fa\u672c\u7684\u306b1\u30c8\u30fc\u30af\u30f3\u3092\u8aad\u307f\u7d42\u3048\u305f\u3089\u7a7a\u767d\u3092\u98db\u3070\u3057\u3066\u6b21\u306e\u30c8\u30fc\u30af\u30f3\u306b\u306a\u308a\u3046\u308b\u6587\u5b57\u306e\u5148\u982d\u307e\u3067\u30b8\u30e3\u30f3\u30d7\u3059\u308b\u3079\u304d\u306a\u306e\u3067\u3001\u5fc5\u305a\u30c8\u30fc\u30af\u30f3\u3092\u8aad\u3093\u3060\u3089\u3053\u306e\u95a2\u6570\u3092\u547c\u3073\u51fa\u3057\u307e\u3059\u3002\n\u306e\u3053\u308a\u306e\u95a2\u6570\u306f\u3001\u305d\u308c\u305e\u308c\u306eToken\u3092\u53d6\u5f97\u3059\u308b\u3053\u3068\u3092\u8a66\u307f\u308b\u95a2\u6570\u3067\u3059\u3002\nOption<Token>\u304c\u5e30\u3063\u3066\u304f\u308b\u306e\u3067\u3001None\u304c\u5e30\u3063\u3066\u304d\u305f\u3089\u4eca\u307f\u3066\u3044\u308b\u30c8\u30fc\u30af\u30f3\u306f\u5225\u306e\u7a2e\u985e\u306e\u3082\u306e\u3067\u3042\u308b\u3068\u3044\u3048\u307e\u3059\u3002\n\u3053\u308c\u3089\u3092\u7528\u3044\u3066Iterator\u3092\u5b9f\u88c5\u3057\u307e\u3057\u305f\u3002\nimpl std::iter::Iterator<Token> for Parser {\n\n    fn next(&mut self) -> Option<Token> {\n        if self.current >= self.src.char_len() {\n            return None;\n        }\n        let mut result: Option<Token> = self.get_pipe();\n        if result.is_some() { return result; }\n        result = self.get_ampersand();\n        if result.is_some() { return result; }\n        result = self.get_redirect_to();\n        if result.is_some() { return result; }\n        result = self.get_redirect_from();\n        if result.is_some() { return result; }\n        result = self.get_str();\n        if result.is_some() { return result; }\n        None\n    }\n}\n\n\u304d\u308c\u3044\u3058\u3083\u306a\u3044\u30b3\u30fc\u30c9\u3067\u3059\u304c\u3001\u3046\u307e\u3044\u3084\u308a\u65b9\u304c\u4ed6\u306b\u601d\u3044\u3064\u304b\u306a\u304b\u3063\u305f\u306e\u3067...\n\u7d14\u7c8b\u306b\u3042\u308b\u7a2e\u985e\u306e\u30c8\u30fc\u30af\u30f3\u3092\u53d6\u5f97\u3057\u3088\u3046\u3068\u8a66\u307f\u3066None\u304c\u5e30\u3063\u3066\u304d\u305f\u3089\u5225\u306e\u7a2e\u985e\u3067\u8a66\u3059\u3001\u3068\u3044\u3046\u3053\u3068\u3092\u7e70\u308a\u8fd4\u3057\u3066\u3044\u307e\u3059\u3002\n\u5148\u982d\u3067\u672b\u5c3e\u307e\u3067\u8aad\u307f\u8fbc\u3093\u3060\u304b\u3092\u5224\u5b9a\u3057\u3066\u3044\u307e\u3059\u3002\n\u3059\u3079\u3066\u306e\u6761\u4ef6\u306b\u5f53\u3066\u306f\u307e\u3089\u306a\u304f\u306a\u3063\u305f\u3089\u30d1\u30fc\u30b9\u5931\u6557\u3067None\u3092\u8fd4\u3057\u3066\u3044\u307e\u3059\u3002\n\n\u8a66\u3059\nuse std::io;\nmod parse;\n\nfn main() {\n    loop {\n        let input = std::io::stdin().read_line().ok().expect(\"Failed to read.\");\n        let mut parser = parse::Parser::new(input);\n        for token in parser {\n            println!(\"{}\", token);\n        }\n    }\n}\n\n\u5b9f\u884c\u7d50\u679c\nls -a | grep foo\nStr(ls)\nStr(-a)\nPipe\nStr(grep)\nStr(foo)\nls -a| grep foo>result.txt &\nStr(ls)\nStr(-a)\nPipe\nStr(grep)\nStr(foo)\nRedirectTo\nStr(result.txt)\nAmpersand\n\n\u3053\u306e\u3088\u3046\u306a\u611f\u3058\u306b\u306a\u308a\u307e\u3057\u305f\u3002\nIterator\u3092\u5b9f\u88c5\u3057\u3066\u3044\u308b\u306e\u3067\u3001for .. in ..\u304c\u4f7f\u3048\u3066\u6c17\u6301\u3061\u826f\u3044\u3067\u3059\u3002\n\n\u53cd\u7701\u70b9\n\u30d1\u30fc\u30b9\u306f\u5931\u6557\u3057\u3046\u308b\u8a08\u7b97\u3060\u304b\u3089Option\u304b\u306a\u30fc\u3069\u3046\u305bOption\u304b\u3048\u3059\u306a\u3089Iterator\u5b9f\u88c5\u3057\u3061\u3083\u3048\u3070\u304a\u5f97\u304b\u306a\u30fc\u3068\u304a\u3082\u3063\u3066\u6f20\u7136\u3068\u5b9f\u88c5\u3057\u3066\u307f\u307e\u3057\u305f\u304c\u3001\u30d1\u30fc\u30b9\u306f\u5931\u6557\u3057\u305f\u7406\u7531\u304c\u307b\u3057\u3044\u3053\u3068\u304c\u307b\u3068\u3093\u3069\u306a\u306e\u3067\u3088\u304f\u8003\u3048\u305f\u3089Result\u3092\u4f7f\u3046\u3079\u304d\u3060\u3063\u305f\u6c17\u304c\u3057\u3066\u304d\u307e\u3057\u305f\u3002\n\u52b9\u7387\u3068\u304b\u306f\u6b63\u76f4Rust\u3067\u306e\u52b9\u7387\u306e\u3088\u3044\u66f8\u304d\u65b9\u304c\u3088\u304f\u308f\u304b\u3063\u3066\u3044\u306a\u3044\u306e\u3067\u3042\u307e\u308a\u6c17\u306b\u305b\u305a\u3001\u3068\u308a\u3042\u3048\u305a\u52d5\u304f\u3082\u306e\u3092\u3001\u3068\u4f5c\u3063\u3066\u307f\u307e\u3057\u305f\u3002\n\u3042\u3068\u306f\u30d1\u30fc\u30b5\u3092\u66f8\u3044\u305f\u3053\u3068\u304c\u6b86\u3069\u306a\u304b\u3063\u305f\u306e\u3067\u6210\u529f\u6cd5\u304c\u308f\u304b\u3089\u306a\u304b\u3063\u305f\u306e\u3067\u3001\u3082\u3063\u3068\u304d\u308c\u3044\u306a\u66f8\u304d\u65b9\u304c\u3042\u308b\u3093\u3058\u3083\u306a\u3044\u304b\u3068\u3044\u3046\u6c17\u3082...\n\n\u4eca\u5f8c\n\u3068\u308a\u3042\u3048\u305a\u52d5\u304f\u3082\u306e\u3092\u3001\u30b3\u30fc\u30c9\u3092\u305f\u304f\u3055\u3093\u66f8\u3053\u3046\u3001\u306e\u7cbe\u795e\u3067\u9032\u3081\u3066\u307f\u307e\u3059\u3002\n\u6b21\u306f\u5358\u7d14\u306a\u30b3\u30de\u30f3\u30c9\u5b9f\u884c\u3092\u5b9f\u88c5\u3057\u305f\u3044\u3067\u3059\u3002\n\u3068\u3044\u3063\u3066\u3082Rust\u306b\u306fCommand\u3068\u304bProcess\u3068\u304b\u304c\u3042\u3063\u3066\u3001\u3061\u3087\u3063\u3068\u8aad\u3093\u3067\u898b\u305f\u611f\u3058\u5272\u308a\u3068\u7d20\u76f4\u306bC\u8a00\u8a9e\u306eexecvp\u3068\u304b\u3092\u547c\u3073\u51fa\u3057\u3066\u3044\u308b\u3088\u3046\u306a\u306e\u3067\u3001\u305d\u308c\u3092\u4f7f\u3048\u3070\u305d\u3053\u307e\u3067\u96e3\u3057\u304f\u306f\u306a\u3044\u306e\u304b\u306a\uff1f\n\u30bd\u30fc\u30b9\u306e\u5168\u6587\u3092\u63b2\u8f09\u3057\u307e\u3059\u306e\u3067\u3001Rust\u56fa\u6709\u3067\u3042\u3063\u3066\u3082\u305d\u3046\u3067\u306a\u304f\u3066\u3082\u3001\u3088\u308a\u826f\u3044\u66f8\u304d\u65b9\u306a\u3069\u3042\u308a\u307e\u3057\u305f\u3089\u3054\u6559\u6388\u3044\u305f\u3060\u3051\u308b\u3068\u5e78\u3044\u3067\u3059\u3002\u3088\u308d\u3057\u304f\u304a\u9858\u3044\u3057\u307e\u3059\u3002\n\nparse.rs\nuse std;\n\nstatic KEYWORDS: &'static str = \"|&<> \\n\";\n\n#[deriving(Show)]\npub enum Token {\n    Str(String),\n    Pipe,\n    RedirectTo,\n    RedirectFrom,\n    Ampersand,\n}\n\npub struct Parser {\n    src: String,\n    pub current: uint,\n}\n\nimpl Parser {\n\n    pub fn new(src: String) -> Parser {\n        Parser { src: src, current: 0 }\n    }\n\n    pub fn current_char(&self) -> char {\n        self.src.char_at(self.current)\n    }\n\n    fn skip_whitespace(&mut self) {\n        while self.current_char().is_whitespace() {\n            self.current += 1;\n            if self.current >= self.src.char_len() {\n                return;\n            }\n        }\n    }\n\n    fn get_pipe(&mut self) -> Option<Token> {\n        if self.current_char() == '|' {\n            self.current += 1;\n            self.skip_whitespace();\n            Some(Token::Pipe)\n        } else {\n            None\n        }\n    }\n\n    fn get_ampersand(&mut self) -> Option<Token> {\n        if self.current_char() == '&' {\n            self.current += 1;\n            self.skip_whitespace();\n            Some(Token::Ampersand)\n        } else {\n            None\n        }\n    }\n\n    fn get_redirect_to(&mut self) -> Option<Token> {\n        if self.current_char() == '>' {\n            self.current += 1;\n            self.skip_whitespace();\n            Some(Token::RedirectTo)\n        } else {\n            None\n        }\n    }\n\n    fn get_redirect_from(&mut self) -> Option<Token> {\n        if self.current_char() == '<' {\n            self.current += 1;\n            self.skip_whitespace();\n            Some(Token::RedirectFrom)\n        } else {\n            None\n        }\n    }\n\n    fn get_str(&mut self) -> Option<Token> {\n        let mut i = self.current;\n        while !KEYWORDS.contains_char(self.src.char_at(i)) {\n            i += 1;\n        }\n        if i == self.current {\n            None\n        } else {\n            let result = Some(Token::Str(self.src.slice_chars(self.current, i).to_string()));\n            self.current = i;\n            self.skip_whitespace();\n            result\n        }\n    }\n}\n\nimpl std::iter::Iterator<Token> for Parser {\n\n    fn next(&mut self) -> Option<Token> {\n        if self.current >= self.src.char_len() {\n            return None;\n        }\n        let mut result: Option<Token> = self.get_pipe();\n        if result.is_some() { return result; }\n        result = self.get_ampersand();\n        if result.is_some() { return result; }\n        result = self.get_redirect_to();\n        if result.is_some() { return result; }\n        result = self.get_redirect_from();\n        if result.is_some() { return result; }\n        result = self.get_str();\n        if result.is_some() { return result; }\n        None\n    }\n}\n\n\n\nmain.rs\nuse std::io;\nmod parse;\n\nfn main() {\n    loop {\n        let input = std::io::stdin().read_line().ok().expect(\"Failed to read.\");\n        let mut parser = parse::Parser::new(input);\n        for token in parser {\n            println!(\"{}\", token);\n        }\n    }\n}\n\n\n\nRust\u304c\u6700\u8fd1\u3068\u3066\u3082\u304a\u3082\u3057\u308d\u3044\u306e\u3067\u3001\u52c9\u5f37\u304c\u3066\u3089\u81ea\u4f5c\u30b7\u30a7\u30eb\u307f\u305f\u3044\u306a\u3082\u306e\u3092\u4f5c\u3063\u3066\u307f\u305f\u3044\u3068\u601d\u3044\u307e\u3059\u3002  \n\u3068\u306f\u3044\u3048\u3001C\u8a00\u8a9e\u3067\u3055\u3048\u308d\u304f\u306b\u30b7\u30b9\u30c6\u30e0\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u66f8\u3044\u305f\u3053\u3068\u304c\u306a\u3044\u306e\u3067\u3001\u9053\u306f\u967a\u3057\u304f\u306a\u308a\u305d\u3046\u3067\u3059\u3002\n\n## \u30d0\u30fc\u30b8\u30e7\u30f3\n0.13.0-nightly\u3092\u4f7f\u7528\u3057\u307e\u3057\u305f\u3002\n\n\u30b3\u30fc\u30c9\u5168\u6587\u306f\u3053\u3061\u3089\n[agatan/rsh](https://github.com/agatan/rsh)\n\n## \u5b57\u53e5\u89e3\u6790\n\u3055\u3066\u3001\u30b7\u30a7\u30eb\u3068\u3044\u3063\u305f\u3089\u307e\u305a\u306f\u30e6\u30fc\u30b6\u306e\u5165\u529b\u3092\u53d7\u3051\u4ed8\u3051\u3066\u30d1\u30fc\u30b9\u3057\u3001\u30b3\u30de\u30f3\u30c9\u3092\u5b9f\u884c\u3057\u306a\u304f\u3066\u306f\u306a\u308a\u307e\u305b\u3093\u3002  \n\u3068\u3044\u3046\u308f\u3051\u3067\u307e\u305a\u521d\u3081\u306b\u30d1\u30fc\u30b9\u90e8\u5206\u306b\u3064\u3044\u3066\u3084\u3063\u3066\u307f\u307e\u3059\u3002  \n\u3055\u304f\u3063\u3068\u7d42\u308f\u3089\u305b\u305f\u304b\u3063\u305f\u306e\u3067\u3059\u304c\u3001\u3069\u3046\u3082\u307e\u3060`String`\u3068`&str`\u3068\u304b\u305d\u306e\u3078\u3093\u3067\u8a70\u307e\u3063\u3066\u3057\u307e\u3044\u307e\u3059...\n\n## Token\u306e\u898f\u5b9a\n`enum`\u3092\u4f7f\u3063\u3066`Token`\u3092\u5217\u6319\u3057\u307e\u3059\u3002  \n\u4e00\u5fdc\u6700\u7d42\u7684\u306b\u306f\u30d1\u30a4\u30d7\u3084\u3089\u30ea\u30c0\u30a4\u30ec\u30af\u30c8\u3084\u3089\u3082\u5b9f\u88c5\u3057\u305f\u3044\u306a\u30fc\u3068\u601d\u3063\u3066\u3044\u308b\u306e\u3067\u3001\u305d\u306e\u8fba\u3092\u8003\u616e\u306b\u5165\u308c\u305f\u5b9f\u88c5\u306b\u3057\u3066\u307f\u307e\u3057\u305f\u3002\n\n```rust\nenum Token {\n\tStr(String),\n\tPipe,\n\tRedirectTo,\n\tRedirectFrom,\n\tAmpersand,\n}\n```\n\n`Str`\u306f\u7279\u6b8a\u306a\u6587\u5b57\u4ee5\u5916\u306e\u6587\u5b57\u5217\u3067\u3059\u304b\u3089\u3001\u8981\u7d20\u3068\u3057\u3066`String`\u3092\u4fdd\u6301\u3055\u305b\u3066\u304a\u304d\u307e\u3057\u305f\u3002\n\n## parser\n\u30d1\u30fc\u30b9\u306b\u306f(\u304a\u3082\u3057\u308d\u305d\u3046\u3060\u3063\u305f\u306e\u3067)`iterator`\u30c8\u30ec\u30a4\u30c8\u3092\u5b9f\u88c5\u3055\u305b\u308b\u3053\u3068\u306b\u3057\u307e\u3057\u305f\u3002  \n\u5b9f\u969b\u3064\u304b\u3046\u3068\u304d\u306b\u306f\u3044\u3089\u306a\u3044\u6c17\u3082\u3057\u307e\u3059\u304c\u3001\u3061\u3087\u3063\u3068\u305f\u3081\u3057\u305f\u304b\u3063\u305f\u306e\u3067\u3002\n\n\u69cb\u9020\u4f53\u3068\u3057\u3066`Parser`\u3092\u4f5c\u308a\u307e\u3059\u3002\u30bd\u30fc\u30b9\u3068\u306a\u308b\u6587\u5b57\u5217\u3068\u3001\u73fe\u5728\u3069\u3053\u307e\u3067\u30d1\u30fc\u30b9\u6e08\u307f\u306a\u306e\u304b\u3092\u4fdd\u6301\u3059\u308b`current`\u3092\u6301\u305f\u305b\u307e\u3057\u305f\u3002\n\n```rust\npub struct Parser {\n    src: String,\n    pub current: uint,\n}\n```\n\n\u3053\u306e\u69cb\u9020\u4f53\u306b`Iterator`\u30c8\u30ec\u30a4\u30c8\u3092\u5b9f\u88c5\u3059\u308c\u3070\u3088\u3044\u306e\u3067\u3059\u304c\u3001\u88dc\u52a9\u95a2\u6570\u3068\u3057\u3066\u3044\u304f\u3064\u304b\u5b9f\u88c5\u3057\u3066\u304a\u304d\u307e\u3059\u3002\n\n```rust\nimpl Parser {\n    pub fn new(src: String) -> Parser {\n        Parser { src: src, current: 0 }\n    }\n\n    pub fn current_char(&self) -> char {\n        self.src.char_at(self.current)\n    }\n\n    fn skip_whitespace(&mut self) {\n        while self.current_char().is_whitespace() {\n            self.current += 1;\n            if self.current >= self.src.char_len() {\n                return;\n            }\n        }\n    }\n\n    fn get_pipe(&mut self) -> Option<Token> {\n        if self.current_char() == '|' {\n            self.current += 1;\n            self.skip_whitespace();\n            Some(Token::Pipe)\n        } else {\n            None\n        }\n    }\n\n    fn get_ampersand(&mut self) -> Option<Token> {\n        if self.current_char() == '&' {\n            self.current += 1;\n            self.skip_whitespace();\n            Some(Token::Ampersand)\n        } else {\n            None\n        }\n    }\n\n    fn get_redirect_to(&mut self) -> Option<Token> {\n        if self.current_char() == '>' {\n            self.current += 1;\n            self.skip_whitespace();\n            Some(Token::RedirectTo)\n        } else {\n            None\n        }\n    }\n\n    fn get_redirect_from(&mut self) -> Option<Token> {\n        if self.current_char() == '<' {\n            self.current += 1;\n            self.skip_whitespace();\n            Some(Token::RedirectFrom)\n\n    fn get_str(&mut self) -> Option<Token> {\n        let mut i = self.current;\n        while !KEYWORDS.contains_char(self.src.char_at(i)) {\n            i += 1;\n        }\n        if i == self.current {\n            None\n        } else {\n            let result = Some(Token::Str(self.src.slice_chars(self.current, i).to_string()));\n            self.current = i;\n            self.skip_whitespace();\n            result\n        }\n    }\n}\n\n```\n\n`new`\u306f\u65b0\u3057\u3044\u30d1\u30fc\u30b5\u30fc\u3092\u751f\u6210\u3059\u308b\u305f\u3081\u306e\u95a2\u6570\u3067\u3059\u3002`Parser`\u306f\u6587\u5b57\u5217\u306e\u6240\u6709\u6a29\u3092\u8981\u6c42\u3057\u3066\u3044\u307e\u3059\u304c\u3001\u5165\u529b\u3055\u308c\u305f\u6587\u5b57\u5217\u306f\u30d1\u30fc\u30b9\u3059\u308b\u4ee5\u5916\u306b\u4f7f\u3044\u9053\u306f\u7121\u3044\u3068\u601d\u3063\u305f\u306e\u3067\u5927\u4e08\u592b\u3068\u5224\u65ad\u3057\u307e\u3057\u305f\u3002\n\n`current_char`\u306f\u73fe\u5728\u6ce8\u76ee\u3057\u3066\u3044\u308b\u6587\u5b57\u3092\u8fd4\u3057\u307e\u3059\u3002\n`skip_whitespace`\u306f\u7a7a\u767d\u6587\u5b57\u3092\u98db\u3070\u3059\u3088\u3046\u306b`self.current`\u3092\u3044\u3058\u308a\u307e\u3059\u3002\u30d1\u30fc\u30b5\u30fc\u3067\u306f\u3001\u57fa\u672c\u7684\u306b1\u30c8\u30fc\u30af\u30f3\u3092\u8aad\u307f\u7d42\u3048\u305f\u3089\u7a7a\u767d\u3092\u98db\u3070\u3057\u3066\u6b21\u306e\u30c8\u30fc\u30af\u30f3\u306b\u306a\u308a\u3046\u308b\u6587\u5b57\u306e\u5148\u982d\u307e\u3067\u30b8\u30e3\u30f3\u30d7\u3059\u308b\u3079\u304d\u306a\u306e\u3067\u3001\u5fc5\u305a\u30c8\u30fc\u30af\u30f3\u3092\u8aad\u3093\u3060\u3089\u3053\u306e\u95a2\u6570\u3092\u547c\u3073\u51fa\u3057\u307e\u3059\u3002\n\n\u306e\u3053\u308a\u306e\u95a2\u6570\u306f\u3001\u305d\u308c\u305e\u308c\u306e`Token`\u3092\u53d6\u5f97\u3059\u308b\u3053\u3068\u3092\u8a66\u307f\u308b\u95a2\u6570\u3067\u3059\u3002  \n`Option<Token>`\u304c\u5e30\u3063\u3066\u304f\u308b\u306e\u3067\u3001`None`\u304c\u5e30\u3063\u3066\u304d\u305f\u3089\u4eca\u307f\u3066\u3044\u308b\u30c8\u30fc\u30af\u30f3\u306f\u5225\u306e\u7a2e\u985e\u306e\u3082\u306e\u3067\u3042\u308b\u3068\u3044\u3048\u307e\u3059\u3002\n\n\u3053\u308c\u3089\u3092\u7528\u3044\u3066`Iterator`\u3092\u5b9f\u88c5\u3057\u307e\u3057\u305f\u3002\n\n```rust\nimpl std::iter::Iterator<Token> for Parser {\n\n    fn next(&mut self) -> Option<Token> {\n        if self.current >= self.src.char_len() {\n            return None;\n        }\n        let mut result: Option<Token> = self.get_pipe();\n        if result.is_some() { return result; }\n        result = self.get_ampersand();\n        if result.is_some() { return result; }\n        result = self.get_redirect_to();\n        if result.is_some() { return result; }\n        result = self.get_redirect_from();\n        if result.is_some() { return result; }\n        result = self.get_str();\n        if result.is_some() { return result; }\n        None\n    }\n}\n```\n\n\u304d\u308c\u3044\u3058\u3083\u306a\u3044\u30b3\u30fc\u30c9\u3067\u3059\u304c\u3001\u3046\u307e\u3044\u3084\u308a\u65b9\u304c\u4ed6\u306b\u601d\u3044\u3064\u304b\u306a\u304b\u3063\u305f\u306e\u3067...  \n\u7d14\u7c8b\u306b\u3042\u308b\u7a2e\u985e\u306e\u30c8\u30fc\u30af\u30f3\u3092\u53d6\u5f97\u3057\u3088\u3046\u3068\u8a66\u307f\u3066`None`\u304c\u5e30\u3063\u3066\u304d\u305f\u3089\u5225\u306e\u7a2e\u985e\u3067\u8a66\u3059\u3001\u3068\u3044\u3046\u3053\u3068\u3092\u7e70\u308a\u8fd4\u3057\u3066\u3044\u307e\u3059\u3002\n\u5148\u982d\u3067\u672b\u5c3e\u307e\u3067\u8aad\u307f\u8fbc\u3093\u3060\u304b\u3092\u5224\u5b9a\u3057\u3066\u3044\u307e\u3059\u3002\n\u3059\u3079\u3066\u306e\u6761\u4ef6\u306b\u5f53\u3066\u306f\u307e\u3089\u306a\u304f\u306a\u3063\u305f\u3089\u30d1\u30fc\u30b9\u5931\u6557\u3067`None`\u3092\u8fd4\u3057\u3066\u3044\u307e\u3059\u3002\n\n## \u8a66\u3059\n\n```rust\nuse std::io;\nmod parse;\n\nfn main() {\n    loop {\n        let input = std::io::stdin().read_line().ok().expect(\"Failed to read.\");\n        let mut parser = parse::Parser::new(input);\n        for token in parser {\n            println!(\"{}\", token);\n        }\n    }\n}\n```\n\n\u5b9f\u884c\u7d50\u679c\n\n```\nls -a | grep foo\nStr(ls)\nStr(-a)\nPipe\nStr(grep)\nStr(foo)\nls -a| grep foo>result.txt &\nStr(ls)\nStr(-a)\nPipe\nStr(grep)\nStr(foo)\nRedirectTo\nStr(result.txt)\nAmpersand\n```\n\n\u3053\u306e\u3088\u3046\u306a\u611f\u3058\u306b\u306a\u308a\u307e\u3057\u305f\u3002\n`Iterator`\u3092\u5b9f\u88c5\u3057\u3066\u3044\u308b\u306e\u3067\u3001`for .. in ..`\u304c\u4f7f\u3048\u3066\u6c17\u6301\u3061\u826f\u3044\u3067\u3059\u3002\n\n## \u53cd\u7701\u70b9\n\u30d1\u30fc\u30b9\u306f\u5931\u6557\u3057\u3046\u308b\u8a08\u7b97\u3060\u304b\u3089`Option`\u304b\u306a\u30fc\u3069\u3046\u305b`Option`\u304b\u3048\u3059\u306a\u3089`Iterator`\u5b9f\u88c5\u3057\u3061\u3083\u3048\u3070\u304a\u5f97\u304b\u306a\u30fc\u3068\u304a\u3082\u3063\u3066\u6f20\u7136\u3068\u5b9f\u88c5\u3057\u3066\u307f\u307e\u3057\u305f\u304c\u3001\u30d1\u30fc\u30b9\u306f\u5931\u6557\u3057\u305f\u7406\u7531\u304c\u307b\u3057\u3044\u3053\u3068\u304c\u307b\u3068\u3093\u3069\u306a\u306e\u3067\u3088\u304f\u8003\u3048\u305f\u3089`Result`\u3092\u4f7f\u3046\u3079\u304d\u3060\u3063\u305f\u6c17\u304c\u3057\u3066\u304d\u307e\u3057\u305f\u3002\n\u52b9\u7387\u3068\u304b\u306f\u6b63\u76f4Rust\u3067\u306e\u52b9\u7387\u306e\u3088\u3044\u66f8\u304d\u65b9\u304c\u3088\u304f\u308f\u304b\u3063\u3066\u3044\u306a\u3044\u306e\u3067\u3042\u307e\u308a\u6c17\u306b\u305b\u305a\u3001\u3068\u308a\u3042\u3048\u305a\u52d5\u304f\u3082\u306e\u3092\u3001\u3068\u4f5c\u3063\u3066\u307f\u307e\u3057\u305f\u3002\n\u3042\u3068\u306f\u30d1\u30fc\u30b5\u3092\u66f8\u3044\u305f\u3053\u3068\u304c\u6b86\u3069\u306a\u304b\u3063\u305f\u306e\u3067\u6210\u529f\u6cd5\u304c\u308f\u304b\u3089\u306a\u304b\u3063\u305f\u306e\u3067\u3001\u3082\u3063\u3068\u304d\u308c\u3044\u306a\u66f8\u304d\u65b9\u304c\u3042\u308b\u3093\u3058\u3083\u306a\u3044\u304b\u3068\u3044\u3046\u6c17\u3082...\n\n## \u4eca\u5f8c\n\u3068\u308a\u3042\u3048\u305a\u52d5\u304f\u3082\u306e\u3092\u3001\u30b3\u30fc\u30c9\u3092\u305f\u304f\u3055\u3093\u66f8\u3053\u3046\u3001\u306e\u7cbe\u795e\u3067\u9032\u3081\u3066\u307f\u307e\u3059\u3002\n\u6b21\u306f\u5358\u7d14\u306a\u30b3\u30de\u30f3\u30c9\u5b9f\u884c\u3092\u5b9f\u88c5\u3057\u305f\u3044\u3067\u3059\u3002\n\u3068\u3044\u3063\u3066\u3082Rust\u306b\u306f`Command`\u3068\u304b`Process`\u3068\u304b\u304c\u3042\u3063\u3066\u3001\u3061\u3087\u3063\u3068\u8aad\u3093\u3067\u898b\u305f\u611f\u3058\u5272\u308a\u3068\u7d20\u76f4\u306bC\u8a00\u8a9e\u306e`execvp`\u3068\u304b\u3092\u547c\u3073\u51fa\u3057\u3066\u3044\u308b\u3088\u3046\u306a\u306e\u3067\u3001\u305d\u308c\u3092\u4f7f\u3048\u3070\u305d\u3053\u307e\u3067\u96e3\u3057\u304f\u306f\u306a\u3044\u306e\u304b\u306a\uff1f\n\n\u30bd\u30fc\u30b9\u306e\u5168\u6587\u3092\u63b2\u8f09\u3057\u307e\u3059\u306e\u3067\u3001Rust\u56fa\u6709\u3067\u3042\u3063\u3066\u3082\u305d\u3046\u3067\u306a\u304f\u3066\u3082\u3001\u3088\u308a\u826f\u3044\u66f8\u304d\u65b9\u306a\u3069\u3042\u308a\u307e\u3057\u305f\u3089\u3054\u6559\u6388\u3044\u305f\u3060\u3051\u308b\u3068\u5e78\u3044\u3067\u3059\u3002\u3088\u308d\u3057\u304f\u304a\u9858\u3044\u3057\u307e\u3059\u3002\n\n```rust:parse.rs\nuse std;\n\nstatic KEYWORDS: &'static str = \"|&<> \\n\";\n\n#[deriving(Show)]\npub enum Token {\n    Str(String),\n    Pipe,\n    RedirectTo,\n    RedirectFrom,\n    Ampersand,\n}\n\npub struct Parser {\n    src: String,\n    pub current: uint,\n}\n\nimpl Parser {\n\n    pub fn new(src: String) -> Parser {\n        Parser { src: src, current: 0 }\n    }\n\n    pub fn current_char(&self) -> char {\n        self.src.char_at(self.current)\n    }\n\n    fn skip_whitespace(&mut self) {\n        while self.current_char().is_whitespace() {\n            self.current += 1;\n            if self.current >= self.src.char_len() {\n                return;\n            }\n        }\n    }\n\n    fn get_pipe(&mut self) -> Option<Token> {\n        if self.current_char() == '|' {\n            self.current += 1;\n            self.skip_whitespace();\n            Some(Token::Pipe)\n        } else {\n            None\n        }\n    }\n\n    fn get_ampersand(&mut self) -> Option<Token> {\n        if self.current_char() == '&' {\n            self.current += 1;\n            self.skip_whitespace();\n            Some(Token::Ampersand)\n        } else {\n            None\n        }\n    }\n\n    fn get_redirect_to(&mut self) -> Option<Token> {\n        if self.current_char() == '>' {\n            self.current += 1;\n            self.skip_whitespace();\n            Some(Token::RedirectTo)\n        } else {\n            None\n        }\n    }\n\n    fn get_redirect_from(&mut self) -> Option<Token> {\n        if self.current_char() == '<' {\n            self.current += 1;\n            self.skip_whitespace();\n            Some(Token::RedirectFrom)\n        } else {\n            None\n        }\n    }\n\n    fn get_str(&mut self) -> Option<Token> {\n        let mut i = self.current;\n        while !KEYWORDS.contains_char(self.src.char_at(i)) {\n            i += 1;\n        }\n        if i == self.current {\n            None\n        } else {\n            let result = Some(Token::Str(self.src.slice_chars(self.current, i).to_string()));\n            self.current = i;\n            self.skip_whitespace();\n            result\n        }\n    }\n}\n\nimpl std::iter::Iterator<Token> for Parser {\n\n    fn next(&mut self) -> Option<Token> {\n        if self.current >= self.src.char_len() {\n            return None;\n        }\n        let mut result: Option<Token> = self.get_pipe();\n        if result.is_some() { return result; }\n        result = self.get_ampersand();\n        if result.is_some() { return result; }\n        result = self.get_redirect_to();\n        if result.is_some() { return result; }\n        result = self.get_redirect_from();\n        if result.is_some() { return result; }\n        result = self.get_str();\n        if result.is_some() { return result; }\n        None\n    }\n}\n```\n\n```rust:main.rs\nuse std::io;\nmod parse;\n\nfn main() {\n    loop {\n        let input = std::io::stdin().read_line().ok().expect(\"Failed to read.\");\n        let mut parser = parse::Parser::new(input);\n        for token in parser {\n            println!(\"{}\", token);\n        }\n    }\n}\n```\n", "tags": ["rust0.13.0-nightly"]}