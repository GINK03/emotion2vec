{"context": "Marwes/combine: A parser combinator library for Rust\nParsec\u306b\u5f71\u97ff\u3092\u53d7\u3051\u3066\u4f5c\u3089\u308c\u305f\u30d1\u30fc\u30b5\u30b3\u30f3\u30d3\u30cd\u30fc\u30bf\u3060\u305d\u3046\u3067\u3059\u3002\nRust\u3067\u30d1\u30fc\u30b5\u30b3\u30f3\u30d3\u30cd\u30fc\u30bf\u3068\u3044\u3048\u3070nom\u3068\u3044\u3063\u305f\u98a8\u6f6e\u3067\u3059\u304c\u3001combine\u306f\u30c8\u30ec\u30a4\u30c8\u3092\u4e2d\u5fc3\u306b\u3057\u305fRust\u3089\u3057\u3044\u5b9f\u88c5\u3067\u3042\u308a\u3001\u30de\u30af\u30ed\u3067\u30d1\u30fc\u30b5\u3092\u8a18\u8ff0\u3059\u308bnom\u3068\u9055\u3063\u3066Rust\u306e\u30b7\u30f3\u30bf\u30c3\u30af\u30b9\u3067\u66f8\u3051\u307e\u3059\u3002\n\u3053\u306e\u8a18\u4e8b\u3067\u306f\u8a2d\u5b9a\u30d5\u30a1\u30a4\u30eb\u8a18\u8ff0\u8a00\u8a9e\u3067\u3042\u308bTOML\u3067\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u308b\u30ea\u30c6\u30e9\u30eb\u6570\u5024\u30fb\u6587\u5b57\u5217\u306e\u6587\u6cd5\u3092\u4f8b\u306b\u30d1\u30fc\u30b5\u3092\u66f8\u3044\u3066\u307f\u307e\u3059\u3002\n\u306a\u304a\u3001\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u3082\u306e\u3092\u81ea\u529b\u3067\u5b9f\u88c5\u3059\u308b\u5fc5\u8981\u306f\u3042\u307e\u308a\u7121\u304f\u3066\u3001\u8a00\u8a9e\u5b9f\u88c5\u306b\u5fc5\u8981\u306a\u30d1\u30fc\u30b5\u306fcombine-language\u3068\u3044\u3046\u30af\u30ec\u30fc\u30c8\u3067\u3082\u3063\u3068\u7db2\u7f85\u7684\u306b\u63d0\u4f9b\u3055\u308c\u3066\u3044\u307e\u3059\u3002\n\nParser\u30c8\u30ec\u30a4\u30c8\ncombine\u3067\u306f\u3001\u30d1\u30fc\u30b5\u306fParser\u30c8\u30ec\u30a4\u30c8\u3092\u5b9f\u88c5\u3057\u305f\u578b\u3068\u3057\u3066\u8868\u3055\u308c\u3001\u30b3\u30f3\u30d3\u30cd\u30fc\u30bf\u3067Parser\u3092\u7d44\u307f\u5408\u308f\u305b\u3066\u3044\u304f\u3053\u3068\u3067\u5927\u304d\u306a\u30d1\u30fc\u30b5\u3092\u4f5c\u3063\u3066\u3044\u304f\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002Parser\u30c8\u30ec\u30a4\u30c8\u306f\u5165\u529b\u3001\u51fa\u529b\u306e\u578b\u3092\u95a2\u9023\u578b\u3068\u3057\u3066\u6301\u3063\u3066\u304a\u308a\u3001parse\u30e1\u30bd\u30c3\u30c9\u306b\u5165\u529b\u3092\u6e21\u3059\u3068Ok((\u51fa\u529b, \u5165\u529b\u306e\u6b8b\u308a))\u3042\u308b\u3044\u306fErr(\u30d1\u30fc\u30b9\u30a8\u30e9\u30fc)\u304c\u8fd4\u308b\u3088\u3046\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u3002\n\u4f8b\u3048\u3070\u6570\u5024\u306e\u30d1\u30fc\u30b5\u306a\u3089\u3001\"123\"\u3068\u3044\u3046\u6587\u5b57\u5217\u3092parse\u30e1\u30bd\u30c3\u30c9\u306b\u6e21\u3059\u3068Ok((123, \"\"))\u3092\u8fd4\u3059\u308f\u3051\u3067\u3059\u3002\npub trait Parser {\n    type Input: Stream;\n    type Output;\n\n    // fn (\u5165\u529b) -> Result<(\u51fa\u529b, \u5165\u529b\u306e\u6b8b\u308a), \u30d1\u30fc\u30b9\u30a8\u30e9\u30fc>\n    fn parse(&mut self, input: Self::Input)\n        -> Result<(Self::Output, Self::Input), ParseError<Self::Input>>;\n\n    // \u4ed6\u306eparse_*\u306f\u3053\u3053\u3067\u306f\u6c17\u306b\u3057\u306a\u3044\n\n    // \u30b3\u30f3\u30d3\u30cd\u30fc\u30bf\u3084\u30a8\u30e9\u30fc\u51e6\u7406\u306e\u305f\u3081\u306e\u30e1\u30bd\u30c3\u30c9\u304c\u7d9a\u304f\n    // and, or, map, with, skip, ...\n    // message, expected, ...\n    ...\n}\n\n\u3053\u306eParser\u30c8\u30ec\u30a4\u30c8\u3092\u4e2d\u5fc3\u306b\u3001\u51e6\u7406\u306e\u7d44\u307f\u5408\u308f\u305b\u3092Map And\u306a\u3069\u306e\u30a2\u30c0\u30d7\u30bf\u578b\u3067\u8868\u3059\u3001Iterator\u3084Future\u306a\u3069\u3068\u540c\u3058\u3088\u3046\u306a\u30c7\u30b6\u30a4\u30f3\u3067\u3059\u3002\n\u30d1\u30fc\u30b5\u306e\u5165\u529b\u578b\u3068\u3057\u3066\u4f7f\u3048\u308b\u3082\u306e\u306f\u6587\u5b57\u5217&str\u3084\u30b9\u30e9\u30a4\u30b9&[T]\u3001IteratorStream\u306a\u3069\u3067\u3059\u3002\u307e\u305f\u6587\u5b57\u5217(\u3042\u308b\u3044\u306f\u30d0\u30a4\u30c8\u5217&[u8])\u3092State\u3067\u30e9\u30c3\u30d7\u3057\u305f\u3082\u306e\u3082\u5165\u529b\u3068\u3057\u3066\u4f7f\u3048\u3001\u30aa\u30fc\u30d0\u30fc\u30d8\u30c3\u30c9\u304c\u5897\u3048\u308b\u4ee3\u308f\u308a\u306b\u30d1\u30fc\u30b5\u5185\u304b\u3089\u884c\u30fb\u6841(\u30d0\u30a4\u30c8\u5217\u306e\u5834\u5408\u306f\u30d0\u30a4\u30c8\u30aa\u30d5\u30bb\u30c3\u30c8)\u306e\u53d6\u5f97\u304c\u53ef\u80fd\u306b\u306a\u308a\u3001\u30a8\u30e9\u30fc\u767a\u751f\u6642\u306b\u306f\u30a8\u30e9\u30fc\u4f4d\u7f6e\u304c\u305d\u308c\u3067\u8868\u793a\u3055\u308c\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002\n\n\u6574\u6570\u30ea\u30c6\u30e9\u30eb\u3092\u30d1\u30fc\u30b9\u3057\u3066\u307f\u308b\nTOML\u306e\u6574\u6570\u30ea\u30c6\u30e9\u30eb\u306f\u7b26\u53f7\u4ed8\u304d64bit\u6574\u6570\u3060\u305d\u3046\u3067\u3059\u3002\u6587\u5b57\u5217\u3092\u5165\u529b\u3059\u308b\u3068i64\u3092\u51fa\u529b\u3059\u308b\u30d1\u30fc\u30b5\u3092\u4f5c\u308a\u307e\u3059\u3002\n\u3053\u3053\u3067\u306f\u5206\u304b\u308a\u3084\u3059\u3044\u3088\u3046\u306b\u500b\u5225\u306b\u30a4\u30f3\u30dd\u30fc\u30c8\u3057\u3066\u3044\u307e\u3059\u304c\u3001\u666e\u901a\u306buse combine::*;\u3057\u3066\u3057\u307e\u3048\u3070\u826f\u3044\u304b\u3068\u601d\u3044\u307e\u3059\u3002\n\n\u7b26\u53f7\n\u307e\u305a\u306f\u6570\u5b57\u306e\u524d\u306b\u4ed8\u304f\u7b26\u53f7\u306e\u30d1\u30fc\u30b5\u304b\u3089\u3002combine::token\u306f\u5f15\u6570\u3067\u4e0e\u3048\u3089\u308c\u305f1\u8981\u7d20\u306b\u30de\u30c3\u30c1\u3057\u3066\u3001\u305d\u308c\u3092\u305d\u306e\u307e\u307e\u51fa\u529b\u3059\u308b\u30d1\u30fc\u30b5\u3067\u3059\u3002\u6587\u5b57\u5217\u3092\u5165\u529b\u3068\u3059\u308b\u30d1\u30fc\u30b5\u3067\u306f1\u8981\u7d20=1\u6587\u5b57(char)\u3067\u3059\u3002\n\u307e\u305f\u3001+\u3068-\u306e2\u901a\u308a\u306e\u53ef\u80fd\u6027\u3092Parser::or\u3067\u632f\u308a\u5206\u3051\u307e\u3059\u3002or\u306f\u300c\u3053\u306e\u30d1\u30fc\u30b5\u304c\u5931\u6557\u3057\u305f\u3089\u5225\u306e\u30d1\u30fc\u30b5\u3092\u8a66\u3059\u300d\u3068\u3044\u3046\u30d1\u30fc\u30b5\u3092\u8fd4\u3057\u307e\u3059\u3002\n\u5f53\u7136\u3067\u3059\u304c\u3001\u4e21\u65b9\u306e\u30d1\u30fc\u30b5\u306e\u51fa\u529b\u304c\u540c\u3058\u578b\u3067\u3042\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\nuse combine::{Parser, token};\n\nlet sign = token('+').or(token('-'));\n// Output = char\n\n\u3053\u308c\u3067+\u304b-\u306b\u30de\u30c3\u30c1\u3057\u3001\u30de\u30c3\u30c1\u3057\u305f\u6587\u5b57\u3092\u8fd4\u3059\u3068\u3044\u3046\u30d1\u30fc\u30b5\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u3002\nor\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u611f\u3058\u3067\u7e4b\u3052\u3066\u3044\u3051\u3070\u30011\u304c\u5931\u6557\u3057\u305f\u30892\u30012\u3082\u5931\u6557\u3057\u305f\u30893\u3068\u3044\u3046\u30d1\u30fc\u30b5\u3092\u4f5c\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\nparser1.or(parser2).or(prser3)\n\n\u4efb\u610f\u306e\u6570\u306e\u30d1\u30fc\u30b5\u304b\u3089\u9078\u629e\u3057\u305f\u3044\u5834\u5408\u306f\u3001\u30d1\u30fc\u30b5\u306e\u914d\u5217\u3092\u53d7\u3051\u53d6\u308bcombine::choice\u304c\u4f7f\u3048\u307e\u3059\u3002\n\n\u6ce8\u610f\u70b9\n\u3053\u3053\u3067\u6ce8\u610f\u304c\u5fc5\u8981\u306a\u306e\u304c\u3001\u30d1\u30d5\u30a9\u30fc\u30de\u30f3\u30b9\u306e\u5411\u4e0a\u3092\u306f\u304b\u308b\u305f\u3081\u3001LL(1)\u3067\u306a\u3044\u3001\u3064\u307e\u308a1\u6587\u5b57\u4ee5\u4e0a\u306e\u5148\u8aad\u307f\u304c\u5fc5\u8981\u306a\u6587\u6cd5\u3092\u30d1\u30fc\u30b9\u3059\u308b\u306b\u306ftry\u30b3\u30f3\u30d3\u30cd\u30fc\u30bf1\u304c\u5fc5\u8981\u3068\u306a\u3063\u3066\u3044\u308b\u70b9\u3067\u3059\u3002a.or(b)\u306a\u3069\u3068\u3057\u3066\u3044\u3066a\u304c\u8907\u6570\u306e\u6587\u5b57\u3092\u8aad\u3093\u3067\u304b\u3089\u5931\u6557\u3059\u308b\u3068\u3001\u5931\u6557\u3057\u305f\u6642\u70b9\u3067\u6b8b\u3063\u3066\u3044\u308b\u5165\u529b\u304c\u5f8c\u7d9a\u306e\u30d1\u30fc\u30b5\u306b\u6e21\u3055\u308c\u308b\u3053\u3068\u306b\u306a\u308a\u307e\u3059\u3002try(a).or(b)\u306e\u3088\u3046\u306btry\u3067\u5305\u3081\u3070\u3088\u3057\u306a\u306b\u3057\u3066\u304f\u308c\u307e\u3059\u3002\n\n\u6570\u5b57\u5217\n\u6b21\u306b\u6570\u5b57\u5217\u306e\u30d1\u30fc\u30b5\u3002\nuse combine::{Parser, many1};\nuse combine::char::digit;\n\nlet number = many1::<Vec<char>, _>(digit())\n// Output = Vec<char>\n\nmany1\u306b\u578b\u5f15\u6570\u3092\u4e0e\u3048\u3066\u3044\u307e\u3059\u304c(\u4ed6\u306e\u7b87\u6240\u304b\u3089\u63a8\u8ad6\u3067\u304d\u308b\u306a\u3089\u4e0d\u8981)\u3001\u3053\u308c\u306fmany1\u306b\u6e21\u3057\u305f\u30d1\u30fc\u30b5\u3092\u8907\u6570\u56de\u9069\u7528\u3057\u305f\u7d50\u679c\u3092\u683c\u7d0d\u3059\u308b\u305f\u3081\u306e\u30b3\u30ec\u30af\u30b7\u30e7\u30f3\u578b\u3067\u3059\u3002FromIterator<char>\u3092\u5b9f\u88c5\u3057\u3066\u3044\u308c\u3070\u4f55\u3067\u3082\u69cb\u308f\u306a\u3044\u306e\u3067\u3001Vec<char>\u3001String\u3001HashSet<char>\u306a\u3069\u304c\u4f7f\u3048\u307e\u3059\u3002\u30a4\u30c6\u30ec\u30fc\u30bf\u306e.collect()\u3068\u540c\u3058\u3067\u3059\u306d\u3002\n\u6b21\u306b\u3001\u5404\u6841\u306e\u6570\u5b57\u304c\u5165\u3063\u305fVec<char>\u3092i64\u306b\u5909\u63db\u3059\u308b\u95a2\u6570\u3092map\u3057\u307e\u3059\u3002\u3053\u308c\u3067\u7b26\u53f7\u306e\u306a\u3044\u6574\u6570\u306e\u30d1\u30fc\u30b5\u304c\u3067\u304d\u307e\u3057\u305f\u3002\nlet number = many1::<Vec<char>, _>(digit())\n    .map(|ds| {\n        ds.into_iter()\n            .map(|c| c.to_digit(10).unwrap() as i64)\n            .fold(0, |acc, x| acc * 10 + x)\n    });\n// Output = i64\n\n\u3053\u306e2\u3064\u306e\u30d1\u30fc\u30b5\u3092\u5408\u4f53\u3057\u3066\u3001\u7b26\u53f7\u4ed8\u304d\u6574\u6570\u306e\u30d1\u30fc\u30b5\u3092\u4f5c\u308a\u307e\u3059\u3002\u7b26\u53f7\u306f\u7701\u7565\u3067\u304d\u308b\u306e\u3067\u3001optional\u3092\u9069\u7528\u3057\u3066\u304a\u304d\u307e\u3057\u3087\u3046\u3002\u30d1\u30fc\u30b5\u304c\u30d1\u30fc\u30b9\u306b\u5931\u6557\u3059\u308b\u5834\u5408\u3067\u3082\u3001optional\u3067\u5305\u3081\u3070\u5931\u6557\u3059\u308b\u4ee3\u308f\u308a\u306bNone\u304c\u51fa\u529b\u3055\u308c\u307e\u3059\u3002\nuse combine::optional;\n\n(optional(sign), number)\n// Output = (Option<char>, i64)\n\nParser\u30c8\u30ec\u30a4\u30c8\u306f\u30d1\u30fc\u30b5\u306e\u30bf\u30d7\u30eb\u306b\u5bfe\u3057\u3066\u3082\u5b9f\u88c5\u3055\u308c\u3066\u3044\u307e\u3059\u3002\u5404\u8981\u7d20\u306e\u30d1\u30fc\u30b5\u3092\u9806\u756a\u306b\u9069\u7528\u3057\u3001\u305d\u308c\u305e\u308c\u306e\u7d50\u679c\u3092\u307e\u305f\u30bf\u30d7\u30eb\u306b\u3057\u3066\u8fd4\u3059\u30d1\u30fc\u30b5\u306b\u306a\u308a\u307e\u3059\u3002\nParser::and\u3092\u4f7f\u3046\u3053\u3068\u3082\u3067\u304d\u307e\u3059(2\u8981\u7d20\u306e\u30bf\u30d7\u30eb\u3068\u540c\u3058\u3067\u3059)\u3002\noptional(sign).and(number)\n// Output = (Option<char>, i64)\n\n\u3042\u3068\u306f\u3001\u7b26\u53f7Option<char>\u3092\u898b\u3066i64\u306e\u7b26\u53f7\u3092\u53cd\u8ee2\u3055\u305b\u308b\u95a2\u6570\u3092map\u3059\u308c\u3070\u304a\u3057\u307e\u3044\u3002\nuse combine::optional;\n\nlet signed_number = (optional(sign), number)\n    .map(|(s, num)| {\n        match s {\n            None | Some('+') => num,\n            Some('-') => -num,\n            _ => unreachable!(),\n        }\n    });\n\n\n\u8a66\u3057\u3066\u307f\u308b\n\u3053\u3053\u307e\u3067\u3067\u4f5c\u3063\u305f\u7b26\u53f7\u4ed8\u304d\u6574\u6570\u30d1\u30fc\u30b5\u3092\u8a66\u3057\u3066\u307f\u307e\u3057\u3087\u3046\u3002\nextern crate combine;\n\nuse combine::{Parser, token, optional, many1};\nuse combine::char::digit;\n\nfn main() {  \n    let sign = optional(token('+').or(token('-')));\n\n    let number = many1::<Vec<char>, _>(digit())\n        .map(|ds| {\n            ds.into_iter()\n                .map(|c| c.to_digit(10).unwrap() as i64)\n                .fold(0, |acc, x| acc * 10 + x)\n        });\n\n    let mut signed_number = (sign, number)\n        .map(|(s, num)| {\n            match s {\n                None | Some('+') => num,\n                Some('-') => -num,\n                _ => unreachable!(),\n            }\n        });\n\n    println!(\"{:?}\", signed_number.parse(\"-1024\"));\n}\n\nParser::parse\u3092\u547c\u3076\u306b\u306fmut\u3067\u306a\u304f\u3066\u306f\u306a\u3089\u306a\u3044\u3053\u3068\u306b\u6ce8\u610f\u3057\u3066\u304f\u3060\u3055\u3044\u3002\u666e\u901a\u306f\u30d1\u30fc\u30b5\u306e\u72b6\u614b\u306f\u5909\u5316\u3057\u307e\u305b\u3093\u304c\u3001\u30a8\u30e9\u30fc\u51e6\u7406\u306b\u5fc5\u8981\u3060\u3063\u305f\u308a\u3001\u72b6\u614b\u3092\u6301\u3064\u30d1\u30fc\u30b5\u3092\u4f5c\u308a\u305f\u3044\u5834\u5408\u304c\u3042\u3063\u305f\u308a\u3059\u308b\u305f\u3081\u3067\u3059(\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u306bstring interining\u3092\u884c\u3046\u4f8b\u304c\u8f09\u3063\u3066\u3044\u307e\u3059)\u3002\n\n\u51fa\u529b\u7d50\u679c\nOk((-1024, \"\"))\n\n\n\u30d1\u30fc\u30b9\u306b\u6210\u529f\u3057\u3066\u3001\u7d50\u679c\u3068\u6b8b\u308a\u306e\u6587\u5b57\u5217\u304c\u51fa\u3066\u304d\u307e\u3057\u305f\u3002\u6b21\u306f\u3001\u308f\u3056\u3068\u30d1\u30fc\u30b9\u30a8\u30e9\u30fc\u3092\u767a\u751f\u3055\u305b\u3066\u307f\u307e\u3057\u3087\u3046\u3002ParseError\u306fDisplay\u3092\u5b9f\u88c5\u3057\u3066\u3044\u308b\u306e\u3067\u3001unwrap_err\u3067\u30a8\u30e9\u30fc\u3092\u53d6\u308a\u51fa\u3057\u3066\u8868\u793a\u3057\u3066\u307f\u307e\u3059\u3002\nprintln!(\"{}\", signed_number.parse(\"abc\").unwrap_err());\n\n\n\u51fa\u529b\u7d50\u679c\nParse error at 94543405371245\nUnexpected `a`\nExpected `digit`\n\n\n\u306a\u3093\u3068\u30dd\u30a4\u30f3\u30bf\u3067\u30a8\u30e9\u30fc\u767a\u751f\u4f4d\u7f6e\u304c\u8868\u793a\u3055\u308c\u307e\u3057\u305f\u3002\u524d\u8ff0\u3057\u305fState\u3092\u4f7f\u3048\u3070\u5b9f\u884c\u6642\u30b3\u30b9\u30c8\u3068\u5f15\u304d\u63db\u3048\u306b\u884c\u30fb\u6841\u3067\u30a8\u30e9\u30fc\u4f4d\u7f6e\u3092\u6559\u3048\u3066\u3082\u3089\u3046\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\nprintln!(\"{}\", signed_number.parse(State::new(\"abc\")).unwrap_err());\n\nParse error at line: 1, column: 1\nUnexpected `a`\nExpected `digit`\n\n\n1_234_567\nTOML\u3067\u306f\u3001\u9577\u3044\u6570\u5024\u30ea\u30c6\u30e9\u30eb\u3092\u308f\u304b\u308a\u3084\u3059\u304f\u3059\u308b\u305f\u3081\u6841\u306e\u9593\u306b_\u3092\u633f\u5165\u3059\u308b\u3053\u3068\u3092\u8a31\u3057\u3066\u3044\u307e\u3059\u3002\u305f\u3060\u3057_\u304c\u9023\u7d9a\u3057\u3066\u306f\u3044\u3051\u307e\u305b\u3093\u3002\u3053\u308c\u3092combine\u3067\u5b9f\u88c5\u3057\u3066\u307f\u307e\u3059\u3002\n\u6b63\u898f\u8868\u73fe\u3067\u8003\u3048\u308b\u3068\\d+(_\\d+)*\u3068\u3044\u3046\u611f\u3058\u3067\u3057\u3087\u3046\u304b\u3002\u3053\u308c\u3092combine\u306e\u30b3\u30f3\u30d3\u30cd\u30fc\u30bf\u3067\u8868\u73fe\u3059\u308c\u3070\nuse combine::{Parser, many1, many};\nuse combine::char::{char, digit};\nuse std::iter;\n\nmany1(digit())\n    .and(many(token('_').with(many1(digit()))))\n// Output = (Vec<char>, Vec<Vec<char>>)\n\n\u3068\u306a\u308a\u307e\u3059\u3002Parser::with\u30e1\u30bd\u30c3\u30c9\u306f\u305d\u306e\u30d1\u30fc\u30b5\u306e\u7d50\u679c\u3092\u6368\u3066\u3001\u5f15\u6570\u306b\u3068\u3063\u305f\u30d1\u30fc\u30b5\u306e\u51fa\u529b\u3092\u6700\u7d42\u7684\u306a\u51fa\u529b\u3068\u3059\u308b\u30d1\u30fc\u30b5\u3092\u8fd4\u3057\u307e\u3059\u3002\n\u3053\u306e\u7d50\u679c\u3092\u6570\u5024\u306b\u5909\u63db\u3059\u308b\u95a2\u6570\u3092map\u3057\u3066\u5b8c\u6210\u3067\u3059\u3002\nlet number = many1(digit())\n    .and(many(token('_').with(many1(digit()))))\n    .map(|(a, b): (Vec<_>, Vec<Vec<_>>)| {\n        a.into_iter()\n            .chain(b.into_iter().flat_map(|x| x))\n            .map(|x: char| x.to_digit(10).unwrap() as i64)\n            .fold(0, |acc, x| acc * 10 + x)\n    });\n\n.flat_map(|x| x)\u306fVec<Vec<char>>\u3068\u4e8c\u91cd\u306b\u306a\u3063\u305f\u3082\u306e\u304b\u3089\u30d5\u30e9\u30c3\u30c8\u306a\u30a4\u30c6\u30ec\u30fc\u30bf(Iterator<Item=char>)\u3092\u4f5c\u308b\u305f\u3081\u306b\u4f7f\u3063\u3066\u3044\u307e\u3059\u3002\n\u3088\u304f\u4f7f\u3046\u51e6\u7406\u306a\u306e\u3067\u3001\u308f\u3056\u308f\u3056id\u95a2\u6570\u3092\u6e21\u3059\u306e\u304c\u9762\u5012\u306a\u4eba\u306f\u3001itertools\u30af\u30ec\u30fc\u30c8\u304c\u8ffd\u52a0\u3059\u308bflatten\u30e1\u30bd\u30c3\u30c9\u3092\u4f7f\u3046\u3068\u3088\u3044\u3067\u3059\u3002\n\n\u6587\u5b57\u5217\u30ea\u30c6\u30e9\u30eb\u3092\u30d1\u30fc\u30b9\u3057\u3066\u307f\u308b\n\u6587\u5b57\u5217\u306e\u30d1\u30fc\u30b9\u306f\u7d50\u69cb\u8907\u96d1\u306b\u306a\u308a\u305d\u3046\u3067\u3059\u3002\n\u30d1\u30fc\u30b9\u3057\u305f\u3044\u3082\u306e\u304c\u4f55\u304b\u306e\u9593\u306b\u631f\u307e\u3063\u3066\u3044\u308b\u3053\u3068\u3092\u78ba\u8a8d\u3067\u304d\u308bbetween\u3001\n\u8981\u7d20\u3092\u30af\u30ed\u30fc\u30b8\u30e3\u53d7\u3051\u53d6\u3063\u3066\u30de\u30c3\u30c1\u3059\u308b\u304b\u5426\u304b\u3092\u6c7a\u3081\u3089\u308c\u308bsatisfy\u3092\u4f7f\u3048\u3070\u3001\n\u30c0\u30d6\u30eb\u30af\u30aa\u30fc\u30c6\u30fc\u30b7\u30e7\u30f3\u306e\u4e2d\u8eab\u3092\u53d6\u308a\u51fa\u3059\u30d1\u30fc\u30b5\u306fbetween(token('\"'), token('\"'), many::<String, _>(satisfy(|c| c != '\"'))\u3068\u66f8\u3051\u307e\u3059\u3002\n\u3057\u304b\u3057\u3001\u6587\u5b57\u5217\u30ea\u30c6\u30e9\u30eb\u306b\u304a\u3044\u3066\u306f\u30a8\u30b9\u30b1\u30fc\u30d7\u30b7\u30fc\u30b1\u30f3\u30b9\u306a\u3069\u3092\u8003\u616e\u3059\u308b\u5fc5\u8981\u304c\u3042\u308b\u305f\u3081\u3001\u3053\u308c\u3067\u306f\u4e0d\u5341\u5206\u3067\u3059\u3002\n\u307e\u305fTOML\u3067\u306f\u6587\u5b57\u5217\u30ea\u30c6\u30e9\u30eb\u304c\u6570\u7a2e\u985e\u3042\u308a\u3001\n\"he\\\"llo\"\n\n\"he\\\"\\\n llo\"\n\n\"\"\"\nh\\\n   e\"llo\"\"\"\n\n'he\"llo'\n\n'''\nhe\"llo'''\n\n\u4ee5\u4e0a\u306f\u5168\u3066he\"llo\u3068\u3044\u3046\u7b49\u3057\u3044\u6587\u5b57\u5217\u30ea\u30c6\u30e9\u30eb\u3068\u3057\u3066\u89e3\u91c8\u3057\u306a\u3051\u308c\u3070\u306a\u308a\u307e\u305b\u3093\u3002\n\n\u30a8\u30b9\u30b1\u30fc\u30d7\u30b7\u30fc\u30b1\u30f3\u30b9\u51e6\u7406\nbetween(token('\"'), token('\"'), *\u3053\u3053*)\u306b\u3001\\\u304c\u6765\u305f\u3089\u4f59\u5206\u306b1\u6587\u5b57\u8aad\u307f\u8fbc\u3093\u3067\u30a8\u30b9\u30b1\u30fc\u30d7\u30b7\u30fc\u30b1\u30f3\u30b9\u3092\u51e6\u7406\u3059\u308b\u3068\u3044\u3046\u30d1\u30fc\u30b5\u3092\u66f8\u3051\u3070\u3044\u3051\u305d\u3046\u3067\u3059\u3002\n\u6a19\u6e96\u306e\u30b3\u30f3\u30d3\u30cd\u30fc\u30bf\u3067\u306f\u51e6\u7406\u3057\u304d\u308c\u306a\u3044\u7d30\u304b\u3044\u52d5\u4f5c\u3067\u3059\u304c\u3001\nParser::then\u3092\u4f7f\u3046\u3068\u30d1\u30fc\u30b5\u51fa\u529b\u306b\u5fdc\u3058\u3066\u6b21\u306b\u884c\u3046\u52d5\u4f5c\u3092\u5909\u3048\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\nthen\u306b\u6e21\u3059\u30af\u30ed\u30fc\u30b8\u30e3\u306f\u30d1\u30fc\u30b5\u51fa\u529b\u3092\u53d7\u3051\u53d6\u308a\u30d1\u30fc\u30b5\u3092\u8fd4\u3059\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\n\u30ab\u30b9\u30bf\u30e0\u30d1\u30fc\u30b5\u3092\u4f5c\u308b\u624b\u3063\u53d6\u308a\u65e9\u3044\u65b9\u6cd5\u306fcombine::parser\u95a2\u6570\u3067\u3059\u3002\u3053\u308c\u306f\u5165\u529b\u3092\u53d7\u3051\u53d6\u308aParserResult\u3092\u8fd4\u3059\u95a2\u6570\u3092Parser\u306b\u5909\u63db\u3059\u308b\u95a2\u6570\u3067\u3059\u3002\n\u30a8\u30b9\u30b1\u30fc\u30d7\u30b7\u30fc\u30b1\u30f3\u30b9\u304c\u59cb\u307e\u3063\u305f\u3089\u3001\u3053\u308c\u306b\u6e21\u3059\u95a2\u6570\u306e\u306a\u304b\u3067\u3055\u3089\u306b\u30d1\u30fc\u30b9\u30921\u6587\u5b57\u9032\u3081\u307e\u3059\u3002\nuse combine::{Parser, any, satisfy, parser};\nuse combine::primitives::Consumed;\n\nsatisfy(|c| c != '\"')\n    .then(|c| {\n        parser(move |input| {\n            if c == '\\\\' {\n                any()\n                    .map(|d| match d {\n                        '\\\\' => '\\\\',\n                        '\"' => '\"',\n                        'n' => '\\n',\n                        _ => unimplemented!(),\n                    })\n                    .parse_stream(input)\n            } else {\n                Ok((c, Consumed::Empty(input)))\n            }\n        })\n    })\n\nParserResult\u3092\u8fd4\u3059\u306e\u306fParser::parse_stream\u306a\u306e\u3067\u3059\u304c\u3001\u4eca\u307e\u3067\u4f7f\u3063\u3066\u304d\u305fParser::parse\u306e\u8fd4\u308a\u5024\u3068\u7570\u306a\u3063\u3066\u300c\u30d1\u30fc\u30b5\u304c\u5165\u529b\u3092\u6d88\u8cbb\u3057\u305f\u304b\u300d\u3068\u3044\u3046\u60c5\u5831\u304c\u542b\u307e\u308c\u3066\u3044\u307e\u3059\u3002\u3053\u306e\u60c5\u5831\u304c\u5fc5\u8981\u3068\u306a\u308b\u30d1\u30fc\u30b9\u51e6\u7406\u306e\u9014\u4e2d\u306b\u4f7f\u308f\u308c\u308b\u3082\u306e\u3060\u3068\u601d\u308f\u308c\u307e\u3059(\u4eca\u3072\u3068\u3064\u3088\u304f\u5206\u304b\u3063\u3066\u307e\u305b\u3093)\u3002\n\u5b9f\u969b\u306b\u6587\u5b57\u5217\u30ea\u30c6\u30e9\u30eb\u3092\u30d1\u30fc\u30b9\u3057\u3066\u307f\u307e\u3059\u3002\nextern crate combine;\nuse combine::{Parser, any, token, between, many, satisfy, parser};\nuse combine::primitives::Consumed;\n\nfn main() {\n    let quoted = many::<String, _>(satisfy(|s| s != '\"').then(|c| {\n        parser(move |input| if c == '\\\\' {\n            any()\n                .map(|d| match d {\n                    '\\\\' => '\\\\',\n                    '\"' => '\"',\n                    'n' => '\\n',\n                    _ => unimplemented!(),\n                })\n                .parse_stream(input)\n        } else {\n            Ok((c, Consumed::Empty(input)))\n        })\n    }));\n\n    let mut string = between(token('\"'), token('\"'), quoted);\n\n    assert_eq!(string.parse(\"\\\"hello\\\"\").unwrap().0, \"hello\");\n    assert_eq!(string.parse(\"\\\"he\\\\\\\"llo\\\"\").unwrap().0, \"he\\\"llo\");\n}\n\ncombine\u306e\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u306b\u306f\u5225\u306e\u3084\u308a\u65b9\u3082\u66f8\u304b\u308c\u3066\u3044\u307e\u3059\u3002\n\u3053\u3061\u3089\u306f\u4f5c\u308b\u30d1\u30fc\u30b5\u306bsatisfy\u3092\u542b\u3081\u3066\u3044\u308b\u4f8b\u3067\u3059\u306d\u3002\n\u6570\u5024\u30ea\u30c6\u30e9\u30eb\u306b_\u304c\u542b\u307e\u308c\u3066\u3044\u308b\u5834\u5408\u306e\u30d1\u30fc\u30b9\u306f\u5358\u7d14\u306a\u306e\u3067\u65e2\u5b58\u306e\u30b3\u30f3\u30d3\u30cd\u30fc\u30bf\u3092\u4f7f\u3063\u3066\u5b9f\u88c5\u3057\u307e\u3057\u305f\u304c\u3001\u540c\u3058\u3088\u3046\u306bthen\u3092\u4f7f\u3063\u3066\u8aad\u307f\u98db\u3070\u3059\u5b9f\u88c5\u3067\u3082\u51fa\u6765\u305d\u3046\u3067\u3059\u3002\n\n\u8907\u6570\u884c\u6587\u5b57\u5217(\"\"\")\nTOML\u306b\u304a\u3051\u308b\u8907\u6570\u884c\u6587\u5b57\u5217\u306f\u3053\u3093\u306a\u611f\u3058\u3067\u3059\u3002\n\"\"\"\nhe\\\n    llo\"\"\"\n\n# => \"\\\"hello\\\"\"\n\n\n\n\\\u304a\u3088\u3073\u5236\u5fa1\u6587\u5b57\u306e\u307f\u30a8\u30b9\u30b1\u30fc\u30d7\u304c\u8981\u308b\u3001\"\u306f\u305d\u306e\u307e\u307e\u66f8\u3051\u308b(\"\"\"\u3068\u3044\u3046\u4e26\u3073\u304c\u51fa\u6765\u308b\u3068\u6587\u5b57\u5217\u304c\u9589\u3058\u3089\u308c\u308b\u306e\u3067\u3001\u305d\u306e\u5834\u5408\u306f\u30a8\u30b9\u30b1\u30fc\u30d7\u3059\u308b)\n\u958b\u59cb\u5074\"\"\"\u76f4\u5f8c\u306e\u6539\u884c\u306f\u7121\u8996\u3055\u308c\u308b\n\n\\+\u6539\u884c \u4ee5\u964d\u306e\u30db\u30ef\u30a4\u30c8\u30b9\u30da\u30fc\u30b9(\u6539\u884c\u542b\u3080)\u304c\u7121\u8996\u3055\u308c\u308b\n\n\u3068\u3044\u3046\u3082\u306e\u3067\u3059\u3002\n\u30a8\u30b9\u30b1\u30fc\u30d7\u51e6\u7406\u306f\u524d\u7bc0\u3068\u540c\u69d8\u3067\u3059\u3002\u30af\u30aa\u30fc\u30c6\u30fc\u30b7\u30e7\u30f3\u304c\"\"\"\u30683\u6587\u5b57\u3042\u308b\u305f\u3081\u5148\u8aad\u307f\u3092\u884c\u3046\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\nuse combine::{Parser, any, parser, not_followed_by, many};\nuse combine::char::string;\nuse combine::primitives::Consumed;\n\n// \u30af\u30aa\u30fc\u30c8\u5185\u306e\u5404\u6587\u5b57\u306e\u30d1\u30fc\u30b5\nlet maybe_escaped = any().then(|c| {\n    parser(move |input| if c == '\\\\' {\n        any()\n            .map(|d| match d {\n                '\\\\' => '\\\\',\n                '\"' => '\"',\n                _ => unimplemented!(),\n            })\n            .parse_stream(input)\n    } else {\n        Ok((c, Consumed::Empty(input)))\n    })\n});\n// Output = char\n\n// \u30af\u30aa\u30fc\u30c8\u5185\u306e\u30d1\u30fc\u30b5\nlet quoted = many::<String, _>(try(\n        not_followed_by(string(\"\\\"\\\"\\\"\")).with(maybe_escaped)\n    ));\n// Output = String\n\nnot_followed_by\u306f\u4e0e\u3048\u3089\u308c\u305f\u30d1\u30fc\u30b5\u304c\u30d1\u30fc\u30b9\u306b\u6210\u529f\u3057\u306a\u304b\u3063\u305f\u5834\u5408\u306b\u306e\u307f\u6210\u529f\u3059\u308b\u30d1\u30fc\u30b5\u3067\u3059\u3002try\u3068\u540c\u69d8\u3001\u4efb\u610f\u306e\u9577\u3055\u306e\u5148\u8aad\u307f\u304c\u53ef\u80fd\u3067\u3059\u3002\n\u3053\u3053\u306b\u3001\\\\+\u6539\u884c+\u7a7a\u767d\u3092\u7121\u8996\u3059\u308b(s/\\\\\\n\\s*//)\u3068\u3044\u3046\u51e6\u7406\u3092\u8ffd\u52a0\u3057\u307e\u3059\u3002\u307e\u305a\u3001\u3053\u306e\u30d1\u30bf\u30fc\u30f3\u306b\u30de\u30c3\u30c1\u3059\u308b\u30d1\u30fc\u30b5\u3092\u66f8\u304d\u307e\u3059\u3002\nuse combine::{Parser, token, skip_many, satisfy};\nuse combine::char::newline;\n\nlet space_skip = (token('\\\\'), newline(), skip_many(satisfy(|c| c == ' ' || c == '\\t' || c == '\\n' || c == '\\r')));\n\n\u3053\u306e\u30d1\u30fc\u30b5\u304c\u5931\u6557\u3057\u3066\u3082\u6587\u5b57\u5217\u306e\u30d1\u30fc\u30b9\u81ea\u4f53\u304c\u5931\u6557\u3059\u308b\u5fc5\u8981\u306f\u306a\u3044\u306e\u3067optional\u3067\u5305\u307f\u307e\u3059\u3002\u307e\u305f\u3001\u3053\u306e\u30d1\u30fc\u30b5\u306f\u5148\u8aad\u307f\u304c\u5fc5\u8981(\\\u306e\u6b21\u306b\u6539\u884c\u304c\u6765\u308b\u304b\u5426\u304b\u3092\u5224\u5b9a\u3059\u308b\u5fc5\u8981\u304c\u3042\u308b)\u305f\u3081try\u3092\u4f7f\u3044\u307e\u3059\u3002\u4ee5\u4e0a\u3067\u3067\u304d\u305f\u3082\u306e\u3092Parser::skip\u3067\u98db\u3070\u3057\u307e\u3059\u3002\nlet quoted = optional(newline()).with(many::<String, _>(try(not_followed_by(string(\"\\\"\\\"\\\"\"))\n    .skip(optional(try(space_skip)))\n    .with(maybe_escaped))));\n// Output = String\n\nlet mut multiline_string = between(string(r#\"\"\"\"\"#), string(r#\"\"\"\"\"#), inquote);\n// Output = String\n\nassert_eq!(string.parse(State::new(r#\"\"\"\"\nh\"\"e\\\\ll\\\n   o\"\"\"\"#)).unwrap().0,\n           r#\"h\"\"e\\llo\"#);\n\n\u8907\u6570\u884c\u6587\u5b57\u5217\u306e\u30d1\u30fc\u30b5\u304c\u51fa\u6765\u307e\u3057\u305f!\n\n\u30ea\u30c6\u30e9\u30eb\u6587\u5b57\u5217 (')\n\u30ea\u30c6\u30e9\u30eb\u6587\u5b57\u5217('\u3067\u56f2\u3063\u305f\u3082\u306e)\u306f\u30a8\u30b9\u30b1\u30fc\u30d7\u304c\u7121\u3044\u305f\u3081\u3001between(token('\\''), token('\\''), satisfy(|c| c != '\\''))\u3067\u6e08\u307f\u307e\u3059\u306d\u3002\u30ea\u30c6\u30e9\u30eb\u8907\u6570\u884c\u6587\u5b57\u5217\u3082\u30a8\u30b9\u30b1\u30fc\u30d7\u3068\u884c\u672b\\\u306b\u3088\u308b\u7a7a\u767d\u306e\u30b9\u30ad\u30c3\u30d7\u304c\u7121\u3044\u3060\u3051\u3067\u540c\u69d8\u3067\u3059\u3002\n\n\u30d1\u30fc\u30b5\u3092\u8fd4\u3059\u95a2\u6570\u3092\u4f5c\u308b\n\u3053\u3053\u307e\u3067\u306f\u30b3\u30f3\u30d3\u30cd\u30fc\u30bf\u3067\u4f5c\u3063\u305f\u30d1\u30fc\u30b5\u3092let\u3067\u5909\u6570\u306b\u675f\u7e1b\u3057\u3066\u3044\u307e\u3057\u305f\u304c\u3001\u5b9f\u969b\u306b\u4f7f\u3046\u3068\u304d\u306f\u30d1\u30fc\u30b5\u3092\u8fd4\u3059\u95a2\u6570\u3092\u7528\u610f\u3057\u3066\u304a\u304f(combine\u306e\u7d44\u307f\u8fbc\u307f\u30d1\u30fc\u30b5\u304c\u305d\u3046\u306a\u3063\u3066\u3044\u308b\u3088\u3046\u306b)\u3068\u4fbf\u5229\u305d\u3046\u3067\u3059\u306d\u3002\nstruct IntegerLiteral<I>(PhantomData<fn(I) -> I>);\n\nimpl<I: Stream<Item = char>> Parser for IntegerLiteral<I> {\n    type Input = I;\n    type Output = i64;\n\n    fn parse_stream(&mut self, input: I) -> ParseResult<i64, I> {\n        let sign = optional(token('+').or(token('-')));\n\n        let number = many1::<Vec<char>, _>(digit())\n            .map(|ds| {\n                ds.into_iter()\n                    .map(|c| c.to_digit(10).unwrap() as i64)\n                    .fold(0, |acc, x| acc * 10 + x)\n            });\n\n        let mut signed_number = (sign, number)\n            .map(|(s, num)| {\n                match s {\n                    None | Some('+') => num,\n                    Some('-') => -num,\n                    _ => unreachable!(),\n                }\n            });\n\n        signed_number.parse_stream(input)\n    }\n}\n\nfn integer_literal<I: Stream<Item=char>>() -> IntegerLiteral<I> {\n    IntegerLiteral(PhantomData)\n}\n\n\u30d1\u30fc\u30b5\u578b\u3092\u5b9a\u7fa9\u3057\u3066\u3001Parser\u3092\u5b9f\u88c5\u3057\u3066\u3044\u307e\u3059\u3002\u3044\u3061\u3044\u3061\u578b\u3092\u5b9a\u7fa9\u3059\u308b\u306e\u304c\u9762\u5012\u3060\u3068\u3044\u3046\u5834\u5408\u306f\u3001\u4f5c\u3063\u305f\u30d1\u30fc\u30b5\u3092\u305d\u306e\u307e\u307e\u8fd4\u3059\u95a2\u6570\u3092\u4f5c\u308b\u3053\u3068\u3082\u3067\u304d\u307e\u3059\u3002\nfn integer_literal<I: 'static + Stream<Item=char>>() -> Box<Parser<Input = I, Output = i64>> {\n    let sign = optional(token('+').or(token('-')));\n\n    let number = many1::<Vec<char>, _>(digit())\n        .map(|ds| {\n            ds.into_iter()\n                .map(|c| c.to_digit(10).unwrap() as i64)\n                .fold(0, |acc, x| acc * 10 + x)\n        });\n\n    let signed_number = (sign, number)\n        .map(|(s, num)| {\n            match s {\n                None | Some('+') => num,\n                Some('-') => -num,\n                _ => unreachable!(),\n            }\n        });\n\n    Box::new(signed_number)\n}\n\n\u30d1\u30fc\u30b5\u3092\u8fd4\u3059\u306b\u306f\u30a4\u30c6\u30ec\u30fc\u30bf\u3092\u8fd4\u3059\u969b\u3068\u540c\u7a2e\u306e\u554f\u984c\u304c\u3042\u308a\u307e\u3059\u3002\u30d1\u30fc\u30b5\u306e\u578b\u306f\u8907\u96d1\u30672\u3001\u578b\u3092\u66f8\u304f\u306e\u304c\u5927\u5909\u3067\u3059\u3002\u3057\u304b\u3082\u3053\u306e\u5834\u5408map\u306b\u3088\u308b\u30af\u30ed\u30fc\u30b8\u30e3\u3092\u542b\u3093\u3067\u3044\u308b\u305f\u3081\u8a18\u8ff0\u3067\u304d\u306a\u3044\u306e\u3067Box\u5316\u3059\u308b\u304bimpl Trait\u3092\u4f7f\u3046\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\nParser::parse_stream\u76f8\u5f53\u306e\u95a2\u6570\u3092\u5358\u4f53\u3067\u7528\u610f\u3059\u308b\u3053\u3068\u3067\u3082\u30d1\u30fc\u30b5\u3092\u8868\u73fe\u3059\u308b\u3053\u3068\u3082\u3067\u304d\u307e\u3059\u3002\u4f7f\u3046\u3068\u304d\u306f\u6587\u5b57\u5217\u306e\u30d1\u30fc\u30b9\u3067\u4f7f\u3063\u305fparser\u95a2\u6570\u3092\u901a\u3059\u3053\u3068\u3067Parser\u306b\u306a\u308a\u307e\u3059\u3002\nfn main() {\n    assert_eq!(parser(integer_literal).parse(\"1234\").unwrap(),\n               1234);\n}\n\nfn integer_literal<I: Stream<Item=char>>(input: I) -> ParseResult<i64, I> {\n    ...\n\n    (sign, number)\n        .map(|(s, num)| {\n            match s {\n                None | Some('+') => num,\n                Some('-') => -num,\n                _ => unreachable!(),\n            }\n    }).parse_stream(input)\n}\n\n\n\u304a\u308f\u308a\u306b\ncombine\u306f\u30c7\u30b6\u30a4\u30f3\u3082\u7dba\u9e97\u3067\u500b\u4eba\u7684\u306b\u306f\u3051\u3063\u3053\u3046\u597d\u304d\u306a\u30e9\u30a4\u30d6\u30e9\u30ea\u3067\u3059\u3002\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u304c\u5145\u5b9f\u3057\u3066\u3044\u308b\u306e\u3082\u6709\u308a\u96e3\u3044\u3067\u3059\u3002\n\n\n\n\n\u6a19\u6e96\u30e9\u30a4\u30d6\u30e9\u30ea\u306etry\u30de\u30af\u30ed\u3068\u306f\u5225\u7269\u3067\u3059\u3002\u30de\u30af\u30ed\u3068\u95a2\u6570\u306f\u540d\u524d\u7a7a\u9593\u304c\u5206\u304b\u308c\u3066\u3044\u308b\u306e\u3067\u885d\u7a81\u3059\u308b\u3053\u3068\u306f\u3042\u308a\u307e\u305b\u3093\u3002\u00a0\u21a9\n\n\nsigned_number\u306e\u578b\u306fcombine::combinator::Map<(combine::combinator::Optional<combine::combinator::Or<combine::combinator::Token<I>, combine::combinator::Token<I>>>, combine::combinator::Map<combine::combinator::Many1<std::vec::Vec<char>, combine::char::Digit<I>>, [closure@src/main.rs:41:14: 45:10]>), [closure@src/main.rs:48:14: 54:6]>\u3068\u306a\u3063\u3066\u3044\u307e\u3059\u3002\u00a0\u21a9\n\n\n\n[Marwes/combine](https://github.com/Marwes/combine): A parser combinator library for Rust\n\nParsec\u306b\u5f71\u97ff\u3092\u53d7\u3051\u3066\u4f5c\u3089\u308c\u305f\u30d1\u30fc\u30b5\u30b3\u30f3\u30d3\u30cd\u30fc\u30bf\u3060\u305d\u3046\u3067\u3059\u3002\nRust\u3067\u30d1\u30fc\u30b5\u30b3\u30f3\u30d3\u30cd\u30fc\u30bf\u3068\u3044\u3048\u3070nom\u3068\u3044\u3063\u305f\u98a8\u6f6e\u3067\u3059\u304c\u3001combine\u306f\u30c8\u30ec\u30a4\u30c8\u3092\u4e2d\u5fc3\u306b\u3057\u305fRust\u3089\u3057\u3044\u5b9f\u88c5\u3067\u3042\u308a\u3001\u30de\u30af\u30ed\u3067\u30d1\u30fc\u30b5\u3092\u8a18\u8ff0\u3059\u308bnom\u3068\u9055\u3063\u3066Rust\u306e\u30b7\u30f3\u30bf\u30c3\u30af\u30b9\u3067\u66f8\u3051\u307e\u3059\u3002\n\n\u3053\u306e\u8a18\u4e8b\u3067\u306f\u8a2d\u5b9a\u30d5\u30a1\u30a4\u30eb\u8a18\u8ff0\u8a00\u8a9e\u3067\u3042\u308b[TOML](https://github.com/toml-lang/toml)\u3067\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u308b\u30ea\u30c6\u30e9\u30eb\u6570\u5024\u30fb\u6587\u5b57\u5217\u306e\u6587\u6cd5\u3092\u4f8b\u306b\u30d1\u30fc\u30b5\u3092\u66f8\u3044\u3066\u307f\u307e\u3059\u3002\n\u306a\u304a\u3001\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u3082\u306e\u3092\u81ea\u529b\u3067\u5b9f\u88c5\u3059\u308b\u5fc5\u8981\u306f\u3042\u307e\u308a\u7121\u304f\u3066\u3001\u8a00\u8a9e\u5b9f\u88c5\u306b\u5fc5\u8981\u306a\u30d1\u30fc\u30b5\u306f[combine-language](https://github.com/Marwes/combine-language)\u3068\u3044\u3046\u30af\u30ec\u30fc\u30c8\u3067\u3082\u3063\u3068\u7db2\u7f85\u7684\u306b\u63d0\u4f9b\u3055\u308c\u3066\u3044\u307e\u3059\u3002\n\n# Parser\u30c8\u30ec\u30a4\u30c8\n\ncombine\u3067\u306f\u3001\u30d1\u30fc\u30b5\u306f[`Parser`](https://docs.rs/combine/*/combine/trait.Parser.html)\u30c8\u30ec\u30a4\u30c8\u3092\u5b9f\u88c5\u3057\u305f\u578b\u3068\u3057\u3066\u8868\u3055\u308c\u3001\u30b3\u30f3\u30d3\u30cd\u30fc\u30bf\u3067`Parser`\u3092\u7d44\u307f\u5408\u308f\u305b\u3066\u3044\u304f\u3053\u3068\u3067\u5927\u304d\u306a\u30d1\u30fc\u30b5\u3092\u4f5c\u3063\u3066\u3044\u304f\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002`Parser`\u30c8\u30ec\u30a4\u30c8\u306f\u5165\u529b\u3001\u51fa\u529b\u306e\u578b\u3092\u95a2\u9023\u578b\u3068\u3057\u3066\u6301\u3063\u3066\u304a\u308a\u3001`parse`\u30e1\u30bd\u30c3\u30c9\u306b\u5165\u529b\u3092\u6e21\u3059\u3068`Ok((\u51fa\u529b, \u5165\u529b\u306e\u6b8b\u308a))`\u3042\u308b\u3044\u306f`Err(\u30d1\u30fc\u30b9\u30a8\u30e9\u30fc)`\u304c\u8fd4\u308b\u3088\u3046\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u3002\n\n\u4f8b\u3048\u3070\u6570\u5024\u306e\u30d1\u30fc\u30b5\u306a\u3089\u3001`\"123\"`\u3068\u3044\u3046\u6587\u5b57\u5217\u3092`parse`\u30e1\u30bd\u30c3\u30c9\u306b\u6e21\u3059\u3068`Ok((123, \"\"))`\u3092\u8fd4\u3059\u308f\u3051\u3067\u3059\u3002\n\n```rust\npub trait Parser {\n    type Input: Stream;\n    type Output;\n\n    // fn (\u5165\u529b) -> Result<(\u51fa\u529b, \u5165\u529b\u306e\u6b8b\u308a), \u30d1\u30fc\u30b9\u30a8\u30e9\u30fc>\n    fn parse(&mut self, input: Self::Input)\n        -> Result<(Self::Output, Self::Input), ParseError<Self::Input>>;\n    \n    // \u4ed6\u306eparse_*\u306f\u3053\u3053\u3067\u306f\u6c17\u306b\u3057\u306a\u3044\n\n    // \u30b3\u30f3\u30d3\u30cd\u30fc\u30bf\u3084\u30a8\u30e9\u30fc\u51e6\u7406\u306e\u305f\u3081\u306e\u30e1\u30bd\u30c3\u30c9\u304c\u7d9a\u304f\n    // and, or, map, with, skip, ...\n    // message, expected, ...\n    ...\n}\n```\n\n\u3053\u306e`Parser`\u30c8\u30ec\u30a4\u30c8\u3092\u4e2d\u5fc3\u306b\u3001\u51e6\u7406\u306e\u7d44\u307f\u5408\u308f\u305b\u3092`Map` `And`\u306a\u3069\u306e\u30a2\u30c0\u30d7\u30bf\u578b\u3067\u8868\u3059\u3001[`Iterator`](https://doc.rust-lang.org/std/iter/trait.Iterator.html)\u3084[`Future`](https://docs.rs/futures/*/futures/future/trait.Future.html)\u306a\u3069\u3068\u540c\u3058\u3088\u3046\u306a\u30c7\u30b6\u30a4\u30f3\u3067\u3059\u3002\n\n\u30d1\u30fc\u30b5\u306e\u5165\u529b\u578b\u3068\u3057\u3066\u4f7f\u3048\u308b\u3082\u306e\u306f\u6587\u5b57\u5217`&str`\u3084\u30b9\u30e9\u30a4\u30b9`&[T]`\u3001[`IteratorStream`](https://docs.rs/combine/*/combine/primitives/struct.IteratorStream.html)\u306a\u3069\u3067\u3059\u3002\u307e\u305f\u6587\u5b57\u5217(\u3042\u308b\u3044\u306f\u30d0\u30a4\u30c8\u5217`&[u8]`)\u3092[`State`](https://docs.rs/combine/*/combine/struct.State.html)\u3067\u30e9\u30c3\u30d7\u3057\u305f\u3082\u306e\u3082\u5165\u529b\u3068\u3057\u3066\u4f7f\u3048\u3001\u30aa\u30fc\u30d0\u30fc\u30d8\u30c3\u30c9\u304c\u5897\u3048\u308b\u4ee3\u308f\u308a\u306b\u30d1\u30fc\u30b5\u5185\u304b\u3089\u884c\u30fb\u6841(\u30d0\u30a4\u30c8\u5217\u306e\u5834\u5408\u306f\u30d0\u30a4\u30c8\u30aa\u30d5\u30bb\u30c3\u30c8)\u306e\u53d6\u5f97\u304c\u53ef\u80fd\u306b\u306a\u308a\u3001\u30a8\u30e9\u30fc\u767a\u751f\u6642\u306b\u306f\u30a8\u30e9\u30fc\u4f4d\u7f6e\u304c\u305d\u308c\u3067\u8868\u793a\u3055\u308c\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002\n\n# \u6574\u6570\u30ea\u30c6\u30e9\u30eb\u3092\u30d1\u30fc\u30b9\u3057\u3066\u307f\u308b\n\nTOML\u306e\u6574\u6570\u30ea\u30c6\u30e9\u30eb\u306f\u7b26\u53f7\u4ed8\u304d64bit\u6574\u6570\u3060\u305d\u3046\u3067\u3059\u3002\u6587\u5b57\u5217\u3092\u5165\u529b\u3059\u308b\u3068`i64`\u3092\u51fa\u529b\u3059\u308b\u30d1\u30fc\u30b5\u3092\u4f5c\u308a\u307e\u3059\u3002\n\n\u3053\u3053\u3067\u306f\u5206\u304b\u308a\u3084\u3059\u3044\u3088\u3046\u306b\u500b\u5225\u306b\u30a4\u30f3\u30dd\u30fc\u30c8\u3057\u3066\u3044\u307e\u3059\u304c\u3001\u666e\u901a\u306b`use combine::*;`\u3057\u3066\u3057\u307e\u3048\u3070\u826f\u3044\u304b\u3068\u601d\u3044\u307e\u3059\u3002\n\n## \u7b26\u53f7\n\n\u307e\u305a\u306f\u6570\u5b57\u306e\u524d\u306b\u4ed8\u304f\u7b26\u53f7\u306e\u30d1\u30fc\u30b5\u304b\u3089\u3002`combine::token`\u306f\u5f15\u6570\u3067\u4e0e\u3048\u3089\u308c\u305f1\u8981\u7d20\u306b\u30de\u30c3\u30c1\u3057\u3066\u3001\u305d\u308c\u3092\u305d\u306e\u307e\u307e\u51fa\u529b\u3059\u308b\u30d1\u30fc\u30b5\u3067\u3059\u3002\u6587\u5b57\u5217\u3092\u5165\u529b\u3068\u3059\u308b\u30d1\u30fc\u30b5\u3067\u306f1\u8981\u7d20=1\u6587\u5b57(`char`)\u3067\u3059\u3002\n\n\u307e\u305f\u3001`+`\u3068`-`\u306e2\u901a\u308a\u306e\u53ef\u80fd\u6027\u3092`Parser::or`\u3067\u632f\u308a\u5206\u3051\u307e\u3059\u3002`or`\u306f\u300c\u3053\u306e\u30d1\u30fc\u30b5\u304c\u5931\u6557\u3057\u305f\u3089\u5225\u306e\u30d1\u30fc\u30b5\u3092\u8a66\u3059\u300d\u3068\u3044\u3046\u30d1\u30fc\u30b5\u3092\u8fd4\u3057\u307e\u3059\u3002\n\u5f53\u7136\u3067\u3059\u304c\u3001\u4e21\u65b9\u306e\u30d1\u30fc\u30b5\u306e\u51fa\u529b\u304c\u540c\u3058\u578b\u3067\u3042\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\n\n```rust\nuse combine::{Parser, token};\n\nlet sign = token('+').or(token('-'));\n// Output = char\n```\n\n\u3053\u308c\u3067`+`\u304b`-`\u306b\u30de\u30c3\u30c1\u3057\u3001\u30de\u30c3\u30c1\u3057\u305f\u6587\u5b57\u3092\u8fd4\u3059\u3068\u3044\u3046\u30d1\u30fc\u30b5\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u3002\n\n`or`\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u611f\u3058\u3067\u7e4b\u3052\u3066\u3044\u3051\u3070\u30011\u304c\u5931\u6557\u3057\u305f\u30892\u30012\u3082\u5931\u6557\u3057\u305f\u30893\u3068\u3044\u3046\u30d1\u30fc\u30b5\u3092\u4f5c\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\n```rust\nparser1.or(parser2).or(prser3)\n```\n\n\u4efb\u610f\u306e\u6570\u306e\u30d1\u30fc\u30b5\u304b\u3089\u9078\u629e\u3057\u305f\u3044\u5834\u5408\u306f\u3001\u30d1\u30fc\u30b5\u306e\u914d\u5217\u3092\u53d7\u3051\u53d6\u308b`combine::choice`\u304c\u4f7f\u3048\u307e\u3059\u3002\n\n### \u6ce8\u610f\u70b9\n\n\u3053\u3053\u3067\u6ce8\u610f\u304c\u5fc5\u8981\u306a\u306e\u304c\u3001\u30d1\u30d5\u30a9\u30fc\u30de\u30f3\u30b9\u306e\u5411\u4e0a\u3092\u306f\u304b\u308b\u305f\u3081\u3001`LL(1)`\u3067\u306a\u3044\u3001\u3064\u307e\u308a1\u6587\u5b57\u4ee5\u4e0a\u306e\u5148\u8aad\u307f\u304c\u5fc5\u8981\u306a\u6587\u6cd5\u3092\u30d1\u30fc\u30b9\u3059\u308b\u306b\u306f`try`\u30b3\u30f3\u30d3\u30cd\u30fc\u30bf[^try]\u304c\u5fc5\u8981\u3068\u306a\u3063\u3066\u3044\u308b\u70b9\u3067\u3059\u3002`a.or(b)`\u306a\u3069\u3068\u3057\u3066\u3044\u3066a\u304c\u8907\u6570\u306e\u6587\u5b57\u3092\u8aad\u3093\u3067\u304b\u3089\u5931\u6557\u3059\u308b\u3068\u3001\u5931\u6557\u3057\u305f\u6642\u70b9\u3067\u6b8b\u3063\u3066\u3044\u308b\u5165\u529b\u304c\u5f8c\u7d9a\u306e\u30d1\u30fc\u30b5\u306b\u6e21\u3055\u308c\u308b\u3053\u3068\u306b\u306a\u308a\u307e\u3059\u3002`try(a).or(b)`\u306e\u3088\u3046\u306b`try`\u3067\u5305\u3081\u3070\u3088\u3057\u306a\u306b\u3057\u3066\u304f\u308c\u307e\u3059\u3002\n\n[^try]: \u6a19\u6e96\u30e9\u30a4\u30d6\u30e9\u30ea\u306etry\u30de\u30af\u30ed\u3068\u306f\u5225\u7269\u3067\u3059\u3002\u30de\u30af\u30ed\u3068\u95a2\u6570\u306f\u540d\u524d\u7a7a\u9593\u304c\u5206\u304b\u308c\u3066\u3044\u308b\u306e\u3067\u885d\u7a81\u3059\u308b\u3053\u3068\u306f\u3042\u308a\u307e\u305b\u3093\u3002\n\n## \u6570\u5b57\u5217\n\n\u6b21\u306b\u6570\u5b57\u5217\u306e\u30d1\u30fc\u30b5\u3002\n\n```rust\nuse combine::{Parser, many1};\nuse combine::char::digit;\n\nlet number = many1::<Vec<char>, _>(digit())\n// Output = Vec<char>\n```\n\n`many1`\u306b\u578b\u5f15\u6570\u3092\u4e0e\u3048\u3066\u3044\u307e\u3059\u304c(\u4ed6\u306e\u7b87\u6240\u304b\u3089\u63a8\u8ad6\u3067\u304d\u308b\u306a\u3089\u4e0d\u8981)\u3001\u3053\u308c\u306f`many1`\u306b\u6e21\u3057\u305f\u30d1\u30fc\u30b5\u3092\u8907\u6570\u56de\u9069\u7528\u3057\u305f\u7d50\u679c\u3092\u683c\u7d0d\u3059\u308b\u305f\u3081\u306e\u30b3\u30ec\u30af\u30b7\u30e7\u30f3\u578b\u3067\u3059\u3002`FromIterator<char>`\u3092\u5b9f\u88c5\u3057\u3066\u3044\u308c\u3070\u4f55\u3067\u3082\u69cb\u308f\u306a\u3044\u306e\u3067\u3001`Vec<char>`\u3001`String`\u3001`HashSet<char>`\u306a\u3069\u304c\u4f7f\u3048\u307e\u3059\u3002\u30a4\u30c6\u30ec\u30fc\u30bf\u306e`.collect()`\u3068\u540c\u3058\u3067\u3059\u306d\u3002\n\n\u6b21\u306b\u3001\u5404\u6841\u306e\u6570\u5b57\u304c\u5165\u3063\u305f`Vec<char>`\u3092`i64`\u306b\u5909\u63db\u3059\u308b\u95a2\u6570\u3092`map`\u3057\u307e\u3059\u3002\u3053\u308c\u3067\u7b26\u53f7\u306e\u306a\u3044\u6574\u6570\u306e\u30d1\u30fc\u30b5\u304c\u3067\u304d\u307e\u3057\u305f\u3002\n\n```rust\nlet number = many1::<Vec<char>, _>(digit())\n    .map(|ds| {\n        ds.into_iter()\n            .map(|c| c.to_digit(10).unwrap() as i64)\n            .fold(0, |acc, x| acc * 10 + x)\n    });\n// Output = i64\n```\n\n\u3053\u306e2\u3064\u306e\u30d1\u30fc\u30b5\u3092\u5408\u4f53\u3057\u3066\u3001\u7b26\u53f7\u4ed8\u304d\u6574\u6570\u306e\u30d1\u30fc\u30b5\u3092\u4f5c\u308a\u307e\u3059\u3002\u7b26\u53f7\u306f\u7701\u7565\u3067\u304d\u308b\u306e\u3067\u3001`optional`\u3092\u9069\u7528\u3057\u3066\u304a\u304d\u307e\u3057\u3087\u3046\u3002\u30d1\u30fc\u30b5\u304c\u30d1\u30fc\u30b9\u306b\u5931\u6557\u3059\u308b\u5834\u5408\u3067\u3082\u3001`optional`\u3067\u5305\u3081\u3070\u5931\u6557\u3059\u308b\u4ee3\u308f\u308a\u306b`None`\u304c\u51fa\u529b\u3055\u308c\u307e\u3059\u3002\n\n```rust\nuse combine::optional;\n\n(optional(sign), number)\n// Output = (Option<char>, i64)\n```\n\n`Parser`\u30c8\u30ec\u30a4\u30c8\u306f\u30d1\u30fc\u30b5\u306e\u30bf\u30d7\u30eb\u306b\u5bfe\u3057\u3066\u3082\u5b9f\u88c5\u3055\u308c\u3066\u3044\u307e\u3059\u3002\u5404\u8981\u7d20\u306e\u30d1\u30fc\u30b5\u3092\u9806\u756a\u306b\u9069\u7528\u3057\u3001\u305d\u308c\u305e\u308c\u306e\u7d50\u679c\u3092\u307e\u305f\u30bf\u30d7\u30eb\u306b\u3057\u3066\u8fd4\u3059\u30d1\u30fc\u30b5\u306b\u306a\u308a\u307e\u3059\u3002\n\n`Parser::and`\u3092\u4f7f\u3046\u3053\u3068\u3082\u3067\u304d\u307e\u3059(2\u8981\u7d20\u306e\u30bf\u30d7\u30eb\u3068\u540c\u3058\u3067\u3059)\u3002\n\n```rust\noptional(sign).and(number)\n// Output = (Option<char>, i64)\n```\n\n\u3042\u3068\u306f\u3001\u7b26\u53f7`Option<char>`\u3092\u898b\u3066`i64`\u306e\u7b26\u53f7\u3092\u53cd\u8ee2\u3055\u305b\u308b\u95a2\u6570\u3092`map`\u3059\u308c\u3070\u304a\u3057\u307e\u3044\u3002\n\n```rust\nuse combine::optional;\n\nlet signed_number = (optional(sign), number)\n    .map(|(s, num)| {\n        match s {\n            None | Some('+') => num,\n            Some('-') => -num,\n            _ => unreachable!(),\n        }\n    });\n```\n\n## \u8a66\u3057\u3066\u307f\u308b\n\n\u3053\u3053\u307e\u3067\u3067\u4f5c\u3063\u305f\u7b26\u53f7\u4ed8\u304d\u6574\u6570\u30d1\u30fc\u30b5\u3092\u8a66\u3057\u3066\u307f\u307e\u3057\u3087\u3046\u3002\n\n```rust\nextern crate combine;\n\nuse combine::{Parser, token, optional, many1};\nuse combine::char::digit;\n\nfn main() {  \n    let sign = optional(token('+').or(token('-')));\n\n    let number = many1::<Vec<char>, _>(digit())\n        .map(|ds| {\n            ds.into_iter()\n                .map(|c| c.to_digit(10).unwrap() as i64)\n                .fold(0, |acc, x| acc * 10 + x)\n        });\n\n    let mut signed_number = (sign, number)\n        .map(|(s, num)| {\n            match s {\n                None | Some('+') => num,\n                Some('-') => -num,\n                _ => unreachable!(),\n            }\n        });\n\n    println!(\"{:?}\", signed_number.parse(\"-1024\"));\n}\n```\n\n`Parser::parse`\u3092\u547c\u3076\u306b\u306fmut\u3067\u306a\u304f\u3066\u306f\u306a\u3089\u306a\u3044\u3053\u3068\u306b\u6ce8\u610f\u3057\u3066\u304f\u3060\u3055\u3044\u3002\u666e\u901a\u306f\u30d1\u30fc\u30b5\u306e\u72b6\u614b\u306f\u5909\u5316\u3057\u307e\u305b\u3093\u304c\u3001\u30a8\u30e9\u30fc\u51e6\u7406\u306b\u5fc5\u8981\u3060\u3063\u305f\u308a\u3001\u72b6\u614b\u3092\u6301\u3064\u30d1\u30fc\u30b5\u3092\u4f5c\u308a\u305f\u3044\u5834\u5408\u304c\u3042\u3063\u305f\u308a\u3059\u308b\u305f\u3081\u3067\u3059(\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u306b[string interining\u3092\u884c\u3046\u4f8b](https://docs.rs/combine/2.1.0/combine/combinator/fn.env_parser.html)\u304c\u8f09\u3063\u3066\u3044\u307e\u3059)\u3002\n\n```:\u51fa\u529b\u7d50\u679c\nOk((-1024, \"\"))\n```\n\n\u30d1\u30fc\u30b9\u306b\u6210\u529f\u3057\u3066\u3001\u7d50\u679c\u3068\u6b8b\u308a\u306e\u6587\u5b57\u5217\u304c\u51fa\u3066\u304d\u307e\u3057\u305f\u3002\u6b21\u306f\u3001\u308f\u3056\u3068\u30d1\u30fc\u30b9\u30a8\u30e9\u30fc\u3092\u767a\u751f\u3055\u305b\u3066\u307f\u307e\u3057\u3087\u3046\u3002`ParseError`\u306f[`Display`](https://doc.rust-lang.org/nightly/std/fmt/trait.Display.html)\u3092\u5b9f\u88c5\u3057\u3066\u3044\u308b\u306e\u3067\u3001`unwrap_err`\u3067\u30a8\u30e9\u30fc\u3092\u53d6\u308a\u51fa\u3057\u3066\u8868\u793a\u3057\u3066\u307f\u307e\u3059\u3002\n\n```rust\nprintln!(\"{}\", signed_number.parse(\"abc\").unwrap_err());\n```\n\n```:\u51fa\u529b\u7d50\u679c\nParse error at 94543405371245\nUnexpected `a`\nExpected `digit`\n```\n\n\u306a\u3093\u3068\u30dd\u30a4\u30f3\u30bf\u3067\u30a8\u30e9\u30fc\u767a\u751f\u4f4d\u7f6e\u304c\u8868\u793a\u3055\u308c\u307e\u3057\u305f\u3002\u524d\u8ff0\u3057\u305f`State`\u3092\u4f7f\u3048\u3070\u5b9f\u884c\u6642\u30b3\u30b9\u30c8\u3068\u5f15\u304d\u63db\u3048\u306b\u884c\u30fb\u6841\u3067\u30a8\u30e9\u30fc\u4f4d\u7f6e\u3092\u6559\u3048\u3066\u3082\u3089\u3046\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\n```rust\nprintln!(\"{}\", signed_number.parse(State::new(\"abc\")).unwrap_err());\n```\n\n```\nParse error at line: 1, column: 1\nUnexpected `a`\nExpected `digit`\n```\n\n## 1\\_234\\_567\n\nTOML\u3067\u306f\u3001\u9577\u3044\u6570\u5024\u30ea\u30c6\u30e9\u30eb\u3092\u308f\u304b\u308a\u3084\u3059\u304f\u3059\u308b\u305f\u3081\u6841\u306e\u9593\u306b`_`\u3092\u633f\u5165\u3059\u308b\u3053\u3068\u3092\u8a31\u3057\u3066\u3044\u307e\u3059\u3002\u305f\u3060\u3057`_`\u304c\u9023\u7d9a\u3057\u3066\u306f\u3044\u3051\u307e\u305b\u3093\u3002\u3053\u308c\u3092combine\u3067\u5b9f\u88c5\u3057\u3066\u307f\u307e\u3059\u3002\n\n\u6b63\u898f\u8868\u73fe\u3067\u8003\u3048\u308b\u3068`\\d+(_\\d+)*`\u3068\u3044\u3046\u611f\u3058\u3067\u3057\u3087\u3046\u304b\u3002\u3053\u308c\u3092combine\u306e\u30b3\u30f3\u30d3\u30cd\u30fc\u30bf\u3067\u8868\u73fe\u3059\u308c\u3070\n\n```rust\nuse combine::{Parser, many1, many};\nuse combine::char::{char, digit};\nuse std::iter;\n\nmany1(digit())\n    .and(many(token('_').with(many1(digit()))))\n// Output = (Vec<char>, Vec<Vec<char>>)\n```\n\n\u3068\u306a\u308a\u307e\u3059\u3002`Parser::with`\u30e1\u30bd\u30c3\u30c9\u306f\u305d\u306e\u30d1\u30fc\u30b5\u306e\u7d50\u679c\u3092\u6368\u3066\u3001\u5f15\u6570\u306b\u3068\u3063\u305f\u30d1\u30fc\u30b5\u306e\u51fa\u529b\u3092\u6700\u7d42\u7684\u306a\u51fa\u529b\u3068\u3059\u308b\u30d1\u30fc\u30b5\u3092\u8fd4\u3057\u307e\u3059\u3002\n\n\u3053\u306e\u7d50\u679c\u3092\u6570\u5024\u306b\u5909\u63db\u3059\u308b\u95a2\u6570\u3092`map`\u3057\u3066\u5b8c\u6210\u3067\u3059\u3002\n\n```rust\nlet number = many1(digit())\n    .and(many(token('_').with(many1(digit()))))\n    .map(|(a, b): (Vec<_>, Vec<Vec<_>>)| {\n        a.into_iter()\n            .chain(b.into_iter().flat_map(|x| x))\n            .map(|x: char| x.to_digit(10).unwrap() as i64)\n            .fold(0, |acc, x| acc * 10 + x)\n    });\n```\n\n`.flat_map(|x| x)`\u306f`Vec<Vec<char>>`\u3068\u4e8c\u91cd\u306b\u306a\u3063\u305f\u3082\u306e\u304b\u3089\u30d5\u30e9\u30c3\u30c8\u306a\u30a4\u30c6\u30ec\u30fc\u30bf(`Iterator<Item=char>`)\u3092\u4f5c\u308b\u305f\u3081\u306b\u4f7f\u3063\u3066\u3044\u307e\u3059\u3002\n\u3088\u304f\u4f7f\u3046\u51e6\u7406\u306a\u306e\u3067\u3001\u308f\u3056\u308f\u3056id\u95a2\u6570\u3092\u6e21\u3059\u306e\u304c\u9762\u5012\u306a\u4eba\u306f\u3001[`itertools`](https://docs.rs/itertools/*/itertools/index.html)\u30af\u30ec\u30fc\u30c8\u304c\u8ffd\u52a0\u3059\u308b[`flatten`\u30e1\u30bd\u30c3\u30c9](https://docs.rs/itertools/*/itertools/trait.Itertools.html#method.flatten)\u3092\u4f7f\u3046\u3068\u3088\u3044\u3067\u3059\u3002\n\n# \u6587\u5b57\u5217\u30ea\u30c6\u30e9\u30eb\u3092\u30d1\u30fc\u30b9\u3057\u3066\u307f\u308b\n\n\u6587\u5b57\u5217\u306e\u30d1\u30fc\u30b9\u306f\u7d50\u69cb\u8907\u96d1\u306b\u306a\u308a\u305d\u3046\u3067\u3059\u3002\n\u30d1\u30fc\u30b9\u3057\u305f\u3044\u3082\u306e\u304c\u4f55\u304b\u306e\u9593\u306b\u631f\u307e\u3063\u3066\u3044\u308b\u3053\u3068\u3092\u78ba\u8a8d\u3067\u304d\u308b[`between`](https://docs.rs/combine/2.1.0/combine/fn.between.html)\u3001\n\u8981\u7d20\u3092\u30af\u30ed\u30fc\u30b8\u30e3\u53d7\u3051\u53d6\u3063\u3066\u30de\u30c3\u30c1\u3059\u308b\u304b\u5426\u304b\u3092\u6c7a\u3081\u3089\u308c\u308b[`satisfy`](https://docs.rs/combine/2.1.0/combine/fn.satisfy.html)\u3092\u4f7f\u3048\u3070\u3001\n\u30c0\u30d6\u30eb\u30af\u30aa\u30fc\u30c6\u30fc\u30b7\u30e7\u30f3\u306e\u4e2d\u8eab\u3092\u53d6\u308a\u51fa\u3059\u30d1\u30fc\u30b5\u306f`between(token('\"'), token('\"'), many::<String, _>(satisfy(|c| c != '\"'))`\u3068\u66f8\u3051\u307e\u3059\u3002\n\u3057\u304b\u3057\u3001\u6587\u5b57\u5217\u30ea\u30c6\u30e9\u30eb\u306b\u304a\u3044\u3066\u306f\u30a8\u30b9\u30b1\u30fc\u30d7\u30b7\u30fc\u30b1\u30f3\u30b9\u306a\u3069\u3092\u8003\u616e\u3059\u308b\u5fc5\u8981\u304c\u3042\u308b\u305f\u3081\u3001\u3053\u308c\u3067\u306f\u4e0d\u5341\u5206\u3067\u3059\u3002\n\n\u307e\u305fTOML\u3067\u306f\u6587\u5b57\u5217\u30ea\u30c6\u30e9\u30eb\u304c\u6570\u7a2e\u985e\u3042\u308a\u3001\n\n```\n\"he\\\"llo\"\n\n\"he\\\"\\\n llo\"\n\n\"\"\"\nh\\\n   e\"llo\"\"\"\n\n'he\"llo'\n\n'''\nhe\"llo'''\n```\n\n\u4ee5\u4e0a\u306f\u5168\u3066`he\"llo`\u3068\u3044\u3046\u7b49\u3057\u3044\u6587\u5b57\u5217\u30ea\u30c6\u30e9\u30eb\u3068\u3057\u3066\u89e3\u91c8\u3057\u306a\u3051\u308c\u3070\u306a\u308a\u307e\u305b\u3093\u3002\n\n## \u30a8\u30b9\u30b1\u30fc\u30d7\u30b7\u30fc\u30b1\u30f3\u30b9\u51e6\u7406\n\n`between(token('\"'), token('\"'), *\u3053\u3053*)`\u306b\u3001`\\`\u304c\u6765\u305f\u3089\u4f59\u5206\u306b1\u6587\u5b57\u8aad\u307f\u8fbc\u3093\u3067\u30a8\u30b9\u30b1\u30fc\u30d7\u30b7\u30fc\u30b1\u30f3\u30b9\u3092\u51e6\u7406\u3059\u308b\u3068\u3044\u3046\u30d1\u30fc\u30b5\u3092\u66f8\u3051\u3070\u3044\u3051\u305d\u3046\u3067\u3059\u3002\n\u6a19\u6e96\u306e\u30b3\u30f3\u30d3\u30cd\u30fc\u30bf\u3067\u306f\u51e6\u7406\u3057\u304d\u308c\u306a\u3044\u7d30\u304b\u3044\u52d5\u4f5c\u3067\u3059\u304c\u3001\n`Parser::then`\u3092\u4f7f\u3046\u3068\u30d1\u30fc\u30b5\u51fa\u529b\u306b\u5fdc\u3058\u3066\u6b21\u306b\u884c\u3046\u52d5\u4f5c\u3092\u5909\u3048\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\n`then`\u306b\u6e21\u3059\u30af\u30ed\u30fc\u30b8\u30e3\u306f\u30d1\u30fc\u30b5\u51fa\u529b\u3092\u53d7\u3051\u53d6\u308a\u30d1\u30fc\u30b5\u3092\u8fd4\u3059\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\n\u30ab\u30b9\u30bf\u30e0\u30d1\u30fc\u30b5\u3092\u4f5c\u308b\u624b\u3063\u53d6\u308a\u65e9\u3044\u65b9\u6cd5\u306f`combine::parser`\u95a2\u6570\u3067\u3059\u3002\u3053\u308c\u306f\u5165\u529b\u3092\u53d7\u3051\u53d6\u308a`ParserResult`\u3092\u8fd4\u3059\u95a2\u6570\u3092`Parser`\u306b\u5909\u63db\u3059\u308b\u95a2\u6570\u3067\u3059\u3002\n\u30a8\u30b9\u30b1\u30fc\u30d7\u30b7\u30fc\u30b1\u30f3\u30b9\u304c\u59cb\u307e\u3063\u305f\u3089\u3001\u3053\u308c\u306b\u6e21\u3059\u95a2\u6570\u306e\u306a\u304b\u3067\u3055\u3089\u306b\u30d1\u30fc\u30b9\u30921\u6587\u5b57\u9032\u3081\u307e\u3059\u3002\n\n```rust\nuse combine::{Parser, any, satisfy, parser};\nuse combine::primitives::Consumed;\n\nsatisfy(|c| c != '\"')\n    .then(|c| {\n        parser(move |input| {\n            if c == '\\\\' {\n                any()\n                    .map(|d| match d {\n                        '\\\\' => '\\\\',\n                        '\"' => '\"',\n                        'n' => '\\n',\n                        _ => unimplemented!(),\n                    })\n                    .parse_stream(input)\n            } else {\n                Ok((c, Consumed::Empty(input)))\n            }\n        })\n    })\n```\n\n`ParserResult`\u3092\u8fd4\u3059\u306e\u306f`Parser::parse_stream`\u306a\u306e\u3067\u3059\u304c\u3001\u4eca\u307e\u3067\u4f7f\u3063\u3066\u304d\u305f`Parser::parse`\u306e\u8fd4\u308a\u5024\u3068\u7570\u306a\u3063\u3066\u300c\u30d1\u30fc\u30b5\u304c\u5165\u529b\u3092\u6d88\u8cbb\u3057\u305f\u304b\u300d\u3068\u3044\u3046\u60c5\u5831\u304c\u542b\u307e\u308c\u3066\u3044\u307e\u3059\u3002\u3053\u306e\u60c5\u5831\u304c\u5fc5\u8981\u3068\u306a\u308b\u30d1\u30fc\u30b9\u51e6\u7406\u306e\u9014\u4e2d\u306b\u4f7f\u308f\u308c\u308b\u3082\u306e\u3060\u3068\u601d\u308f\u308c\u307e\u3059(\u4eca\u3072\u3068\u3064\u3088\u304f\u5206\u304b\u3063\u3066\u307e\u305b\u3093)\u3002\n\n\u5b9f\u969b\u306b\u6587\u5b57\u5217\u30ea\u30c6\u30e9\u30eb\u3092\u30d1\u30fc\u30b9\u3057\u3066\u307f\u307e\u3059\u3002\n\n```rust\nextern crate combine;\nuse combine::{Parser, any, token, between, many, satisfy, parser};\nuse combine::primitives::Consumed;\n\nfn main() {\n    let quoted = many::<String, _>(satisfy(|s| s != '\"').then(|c| {\n        parser(move |input| if c == '\\\\' {\n            any()\n                .map(|d| match d {\n                    '\\\\' => '\\\\',\n                    '\"' => '\"',\n                    'n' => '\\n',\n                    _ => unimplemented!(),\n                })\n                .parse_stream(input)\n        } else {\n            Ok((c, Consumed::Empty(input)))\n        })\n    }));\n\n    let mut string = between(token('\"'), token('\"'), quoted);\n\n    assert_eq!(string.parse(\"\\\"hello\\\"\").unwrap().0, \"hello\");\n    assert_eq!(string.parse(\"\\\"he\\\\\\\"llo\\\"\").unwrap().0, \"he\\\"llo\");\n}\n```\n\ncombine\u306e\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u306b\u306f[\u5225\u306e\u3084\u308a\u65b9](https://docs.rs/combine/2.1.0/combine/primitives/enum.Consumed.html#method.combine)\u3082\u66f8\u304b\u308c\u3066\u3044\u307e\u3059\u3002\n\u3053\u3061\u3089\u306f\u4f5c\u308b\u30d1\u30fc\u30b5\u306b`satisfy`\u3092\u542b\u3081\u3066\u3044\u308b\u4f8b\u3067\u3059\u306d\u3002\n\n\u6570\u5024\u30ea\u30c6\u30e9\u30eb\u306b`_`\u304c\u542b\u307e\u308c\u3066\u3044\u308b\u5834\u5408\u306e\u30d1\u30fc\u30b9\u306f\u5358\u7d14\u306a\u306e\u3067\u65e2\u5b58\u306e\u30b3\u30f3\u30d3\u30cd\u30fc\u30bf\u3092\u4f7f\u3063\u3066\u5b9f\u88c5\u3057\u307e\u3057\u305f\u304c\u3001\u540c\u3058\u3088\u3046\u306b`then`\u3092\u4f7f\u3063\u3066\u8aad\u307f\u98db\u3070\u3059\u5b9f\u88c5\u3067\u3082\u51fa\u6765\u305d\u3046\u3067\u3059\u3002\n\n## \u8907\u6570\u884c\u6587\u5b57\u5217(`\"\"\"`)\n\nTOML\u306b\u304a\u3051\u308b\u8907\u6570\u884c\u6587\u5b57\u5217\u306f\u3053\u3093\u306a\u611f\u3058\u3067\u3059\u3002\n\n```\n\"\"\"\nhe\\\n    llo\"\"\"\n\n# => \"\\\"hello\\\"\"\n```\n\n* `\\`\u304a\u3088\u3073\u5236\u5fa1\u6587\u5b57\u306e\u307f\u30a8\u30b9\u30b1\u30fc\u30d7\u304c\u8981\u308b\u3001`\"`\u306f\u305d\u306e\u307e\u307e\u66f8\u3051\u308b(`\"\"\"`\u3068\u3044\u3046\u4e26\u3073\u304c\u51fa\u6765\u308b\u3068\u6587\u5b57\u5217\u304c\u9589\u3058\u3089\u308c\u308b\u306e\u3067\u3001\u305d\u306e\u5834\u5408\u306f\u30a8\u30b9\u30b1\u30fc\u30d7\u3059\u308b)\n* \u958b\u59cb\u5074`\"\"\"`\u76f4\u5f8c\u306e\u6539\u884c\u306f\u7121\u8996\u3055\u308c\u308b\n* `\\`+\u6539\u884c \u4ee5\u964d\u306e\u30db\u30ef\u30a4\u30c8\u30b9\u30da\u30fc\u30b9(\u6539\u884c\u542b\u3080)\u304c\u7121\u8996\u3055\u308c\u308b\n\n\u3068\u3044\u3046\u3082\u306e\u3067\u3059\u3002\n\n\u30a8\u30b9\u30b1\u30fc\u30d7\u51e6\u7406\u306f\u524d\u7bc0\u3068\u540c\u69d8\u3067\u3059\u3002\u30af\u30aa\u30fc\u30c6\u30fc\u30b7\u30e7\u30f3\u304c`\"\"\"`\u30683\u6587\u5b57\u3042\u308b\u305f\u3081\u5148\u8aad\u307f\u3092\u884c\u3046\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\n\n```rust\nuse combine::{Parser, any, parser, not_followed_by, many};\nuse combine::char::string;\nuse combine::primitives::Consumed;\n\n// \u30af\u30aa\u30fc\u30c8\u5185\u306e\u5404\u6587\u5b57\u306e\u30d1\u30fc\u30b5\nlet maybe_escaped = any().then(|c| {\n    parser(move |input| if c == '\\\\' {\n        any()\n            .map(|d| match d {\n                '\\\\' => '\\\\',\n                '\"' => '\"',\n                _ => unimplemented!(),\n            })\n            .parse_stream(input)\n    } else {\n        Ok((c, Consumed::Empty(input)))\n    })\n});\n// Output = char\n\n// \u30af\u30aa\u30fc\u30c8\u5185\u306e\u30d1\u30fc\u30b5\nlet quoted = many::<String, _>(try(\n        not_followed_by(string(\"\\\"\\\"\\\"\")).with(maybe_escaped)\n    ));\n// Output = String\n```\n\n`not_followed_by`\u306f\u4e0e\u3048\u3089\u308c\u305f\u30d1\u30fc\u30b5\u304c\u30d1\u30fc\u30b9\u306b\u6210\u529f\u3057\u306a\u304b\u3063\u305f\u5834\u5408\u306b\u306e\u307f\u6210\u529f\u3059\u308b\u30d1\u30fc\u30b5\u3067\u3059\u3002`try`\u3068\u540c\u69d8\u3001\u4efb\u610f\u306e\u9577\u3055\u306e\u5148\u8aad\u307f\u304c\u53ef\u80fd\u3067\u3059\u3002\n\n\u3053\u3053\u306b\u3001`\\\\`+\u6539\u884c+\u7a7a\u767d\u3092\u7121\u8996\u3059\u308b(`s/\\\\\\n\\s*//`)\u3068\u3044\u3046\u51e6\u7406\u3092\u8ffd\u52a0\u3057\u307e\u3059\u3002\u307e\u305a\u3001\u3053\u306e\u30d1\u30bf\u30fc\u30f3\u306b\u30de\u30c3\u30c1\u3059\u308b\u30d1\u30fc\u30b5\u3092\u66f8\u304d\u307e\u3059\u3002\n\n```rust\nuse combine::{Parser, token, skip_many, satisfy};\nuse combine::char::newline;\n\nlet space_skip = (token('\\\\'), newline(), skip_many(satisfy(|c| c == ' ' || c == '\\t' || c == '\\n' || c == '\\r')));\n```\n\n\u3053\u306e\u30d1\u30fc\u30b5\u304c\u5931\u6557\u3057\u3066\u3082\u6587\u5b57\u5217\u306e\u30d1\u30fc\u30b9\u81ea\u4f53\u304c\u5931\u6557\u3059\u308b\u5fc5\u8981\u306f\u306a\u3044\u306e\u3067`optional`\u3067\u5305\u307f\u307e\u3059\u3002\u307e\u305f\u3001\u3053\u306e\u30d1\u30fc\u30b5\u306f\u5148\u8aad\u307f\u304c\u5fc5\u8981(`\\`\u306e\u6b21\u306b\u6539\u884c\u304c\u6765\u308b\u304b\u5426\u304b\u3092\u5224\u5b9a\u3059\u308b\u5fc5\u8981\u304c\u3042\u308b)\u305f\u3081`try`\u3092\u4f7f\u3044\u307e\u3059\u3002\u4ee5\u4e0a\u3067\u3067\u304d\u305f\u3082\u306e\u3092`Parser::skip`\u3067\u98db\u3070\u3057\u307e\u3059\u3002\n\n\n```rust\nlet quoted = optional(newline()).with(many::<String, _>(try(not_followed_by(string(\"\\\"\\\"\\\"\"))\n    .skip(optional(try(space_skip)))\n    .with(maybe_escaped))));\n// Output = String\n\nlet mut multiline_string = between(string(r#\"\"\"\"\"#), string(r#\"\"\"\"\"#), inquote);\n// Output = String\n\nassert_eq!(string.parse(State::new(r#\"\"\"\"\nh\"\"e\\\\ll\\\n   o\"\"\"\"#)).unwrap().0,\n           r#\"h\"\"e\\llo\"#);\n```\n\n\u8907\u6570\u884c\u6587\u5b57\u5217\u306e\u30d1\u30fc\u30b5\u304c\u51fa\u6765\u307e\u3057\u305f!\n\n## \u30ea\u30c6\u30e9\u30eb\u6587\u5b57\u5217 (`'`)\n\n\u30ea\u30c6\u30e9\u30eb\u6587\u5b57\u5217(`'`\u3067\u56f2\u3063\u305f\u3082\u306e)\u306f\u30a8\u30b9\u30b1\u30fc\u30d7\u304c\u7121\u3044\u305f\u3081\u3001`between(token('\\''), token('\\''), satisfy(|c| c != '\\''))`\u3067\u6e08\u307f\u307e\u3059\u306d\u3002\u30ea\u30c6\u30e9\u30eb\u8907\u6570\u884c\u6587\u5b57\u5217\u3082\u30a8\u30b9\u30b1\u30fc\u30d7\u3068\u884c\u672b`\\`\u306b\u3088\u308b\u7a7a\u767d\u306e\u30b9\u30ad\u30c3\u30d7\u304c\u7121\u3044\u3060\u3051\u3067\u540c\u69d8\u3067\u3059\u3002\n\n# \u30d1\u30fc\u30b5\u3092\u8fd4\u3059\u95a2\u6570\u3092\u4f5c\u308b\n\n\u3053\u3053\u307e\u3067\u306f\u30b3\u30f3\u30d3\u30cd\u30fc\u30bf\u3067\u4f5c\u3063\u305f\u30d1\u30fc\u30b5\u3092`let`\u3067\u5909\u6570\u306b\u675f\u7e1b\u3057\u3066\u3044\u307e\u3057\u305f\u304c\u3001\u5b9f\u969b\u306b\u4f7f\u3046\u3068\u304d\u306f\u30d1\u30fc\u30b5\u3092\u8fd4\u3059\u95a2\u6570\u3092\u7528\u610f\u3057\u3066\u304a\u304f(combine\u306e\u7d44\u307f\u8fbc\u307f\u30d1\u30fc\u30b5\u304c\u305d\u3046\u306a\u3063\u3066\u3044\u308b\u3088\u3046\u306b)\u3068\u4fbf\u5229\u305d\u3046\u3067\u3059\u306d\u3002\n\n```rust\nstruct IntegerLiteral<I>(PhantomData<fn(I) -> I>);\n\nimpl<I: Stream<Item = char>> Parser for IntegerLiteral<I> {\n    type Input = I;\n    type Output = i64;\n\n    fn parse_stream(&mut self, input: I) -> ParseResult<i64, I> {\n        let sign = optional(token('+').or(token('-')));\n\n        let number = many1::<Vec<char>, _>(digit())\n            .map(|ds| {\n                ds.into_iter()\n                    .map(|c| c.to_digit(10).unwrap() as i64)\n                    .fold(0, |acc, x| acc * 10 + x)\n            });\n\n        let mut signed_number = (sign, number)\n            .map(|(s, num)| {\n                match s {\n                    None | Some('+') => num,\n                    Some('-') => -num,\n                    _ => unreachable!(),\n                }\n            });\n\n        signed_number.parse_stream(input)\n    }\n}\n\nfn integer_literal<I: Stream<Item=char>>() -> IntegerLiteral<I> {\n    IntegerLiteral(PhantomData)\n}\n```\n\n\u30d1\u30fc\u30b5\u578b\u3092\u5b9a\u7fa9\u3057\u3066\u3001`Parser`\u3092\u5b9f\u88c5\u3057\u3066\u3044\u307e\u3059\u3002\u3044\u3061\u3044\u3061\u578b\u3092\u5b9a\u7fa9\u3059\u308b\u306e\u304c\u9762\u5012\u3060\u3068\u3044\u3046\u5834\u5408\u306f\u3001\u4f5c\u3063\u305f\u30d1\u30fc\u30b5\u3092\u305d\u306e\u307e\u307e\u8fd4\u3059\u95a2\u6570\u3092\u4f5c\u308b\u3053\u3068\u3082\u3067\u304d\u307e\u3059\u3002\n\n```rust\nfn integer_literal<I: 'static + Stream<Item=char>>() -> Box<Parser<Input = I, Output = i64>> {\n    let sign = optional(token('+').or(token('-')));\n\n    let number = many1::<Vec<char>, _>(digit())\n        .map(|ds| {\n            ds.into_iter()\n                .map(|c| c.to_digit(10).unwrap() as i64)\n                .fold(0, |acc, x| acc * 10 + x)\n        });\n\n    let signed_number = (sign, number)\n        .map(|(s, num)| {\n            match s {\n                None | Some('+') => num,\n                Some('-') => -num,\n                _ => unreachable!(),\n            }\n        });\n\n    Box::new(signed_number)\n}\n```\n\n\u30d1\u30fc\u30b5\u3092\u8fd4\u3059\u306b\u306f\u30a4\u30c6\u30ec\u30fc\u30bf\u3092\u8fd4\u3059\u969b\u3068\u540c\u7a2e\u306e\u554f\u984c\u304c\u3042\u308a\u307e\u3059\u3002\u30d1\u30fc\u30b5\u306e\u578b\u306f\u8907\u96d1\u3067[^type]\u3001\u578b\u3092\u66f8\u304f\u306e\u304c\u5927\u5909\u3067\u3059\u3002\u3057\u304b\u3082\u3053\u306e\u5834\u5408`map`\u306b\u3088\u308b\u30af\u30ed\u30fc\u30b8\u30e3\u3092\u542b\u3093\u3067\u3044\u308b\u305f\u3081\u8a18\u8ff0\u3067\u304d\u306a\u3044\u306e\u3067`Box`\u5316\u3059\u308b\u304b`impl Trait`\u3092\u4f7f\u3046\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\n\n[^type]: `signed_number`\u306e\u578b\u306f`combine::combinator::Map<(combine::combinator::Optional<combine::combinator::Or<combine::combinator::Token<I>, combine::combinator::Token<I>>>, combine::combinator::Map<combine::combinator::Many1<std::vec::Vec<char>, combine::char::Digit<I>>, [closure@src/main.rs:41:14: 45:10]>), [closure@src/main.rs:48:14: 54:6]>`\u3068\u306a\u3063\u3066\u3044\u307e\u3059\u3002\n\n`Parser::parse_stream`\u76f8\u5f53\u306e\u95a2\u6570\u3092\u5358\u4f53\u3067\u7528\u610f\u3059\u308b\u3053\u3068\u3067\u3082\u30d1\u30fc\u30b5\u3092\u8868\u73fe\u3059\u308b\u3053\u3068\u3082\u3067\u304d\u307e\u3059\u3002\u4f7f\u3046\u3068\u304d\u306f\u6587\u5b57\u5217\u306e\u30d1\u30fc\u30b9\u3067\u4f7f\u3063\u305f`parser`\u95a2\u6570\u3092\u901a\u3059\u3053\u3068\u3067`Parser`\u306b\u306a\u308a\u307e\u3059\u3002\n\n```rust\nfn main() {\n    assert_eq!(parser(integer_literal).parse(\"1234\").unwrap(),\n               1234);\n}\n\nfn integer_literal<I: Stream<Item=char>>(input: I) -> ParseResult<i64, I> {\n    ...\n    \n    (sign, number)\n        .map(|(s, num)| {\n            match s {\n                None | Some('+') => num,\n                Some('-') => -num,\n                _ => unreachable!(),\n            }\n    }).parse_stream(input)\n}\n```\n\n# \u304a\u308f\u308a\u306b\n\ncombine\u306f\u30c7\u30b6\u30a4\u30f3\u3082\u7dba\u9e97\u3067\u500b\u4eba\u7684\u306b\u306f\u3051\u3063\u3053\u3046\u597d\u304d\u306a\u30e9\u30a4\u30d6\u30e9\u30ea\u3067\u3059\u3002[\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8](https://docs.rs/combine/)\u304c\u5145\u5b9f\u3057\u3066\u3044\u308b\u306e\u3082\u6709\u308a\u96e3\u3044\u3067\u3059\u3002\n", "tags": ["rust", "\u30d1\u30fc\u30b5\u30b3\u30f3\u30d3\u30cd\u30fc\u30bf", "\u30d1\u30fc\u30b5"]}