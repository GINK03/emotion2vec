{"context": " More than 1 year has passed since last update.\n\nCommit Hooks\n\u5927\u96d1\u628a\u306a\u610f\u8a33\u3001\u8a33\u3057\u306b\u304f\u3044\u7b87\u6240\u306f\u82f1\u6587\u306e\u307e\u307e\u8ee2\u8f09\u3057\u307e\u3059\u3002\nhttp://docs.basho.com/riak/latest/references/appendices/concepts/Commit-Hooks/\n\nOverview\nPre-commit Hook \u3068 Post-commit Hook \u306f\u3001Riak Object \u304c\u30b3\u30df\u30c3\u30c8\u3055\u308c\u308b\u524d\u3042\u308b\u3044\u306f\u5f8c\u306b\u547c\u3073\u51fa\u3055\u308c\u307e\u3059\u3002\u3053\u308c\u306b\u3088\u308a\u3042\u3089\u3086\u308b\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u306e\u6a5f\u80fd\u6027\u3092\u5927\u304d\u304f\u9ad8\u3081\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002Commit Hooks \u306f\u4ee5\u4e0b\u306e\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\nallow a write to occur with an unmodified object\u3000\nmodify the object\u3000\nFail the update and prevent any modifications\u3000\n\nPost-commit Hock \u306f\u30b3\u30df\u30c3\u30c8\u5f8c\u306b\u901a\u77e5\u3055\u308c\u3001Riak Object \u3092\u4fee\u6b63\u3059\u308b\u3079\u304d\u3067\u306f\u3042\u308a\u307e\u305b\u3093\u3002Riak Object \u66f4\u65b0\u6642\u306e Post-commit Hock \u306f\u3001\u4e0d\u5feb\u306a feedback \u30eb\u30fc\u30d7\u3092\u5f15\u304d\u8d77\u3053\u3059\u5834\u5408\u304c\u3042\u308a\u307e\u3059\u3002\u305d\u306e\u3088\u3046\u306a\u30b5\u30a4\u30af\u30eb\u3092\u691c\u77e5\u3057\u77ed\u8def\u3055\u305b\u308b\u3088\u3046\u6ce8\u610f\u6df1\u304f\u66f8\u304b\u306a\u3051\u308c\u3070\u3001\u4e0d\u5feb\u306a\u7121\u9650\u30eb\u30fc\u30d7\u304c\u767a\u751f\u3057\u307e\u3059\u3002\nPre-commit Hook \u3068 Post-commit Hook \u306f\u3001\u5404 bucket \u5358\u4f4d\u3067\u5b9a\u7fa9\u3055\u308c\u3001\u5bfe\u8c61 bucket \u306e\u30d7\u30ed\u30d1\u30c6\u30a3\u306b\u683c\u7d0d\u3055\u308c\u307e\u3059\u3002\u5f7c\u3089\u306f\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u3078\u306e\u6210\u529f\u30ec\u30b9\u30dd\u30f3\u30b9\u6bce\u306b\u4e00\u5ea6\u52d5\u4f5c\u3057\u307e\u3059\u3002\n\nConfiguration\nPre-commit Hook \u3068 Post-commit Hook \u306e\u8a2d\u5b9a\u306f\u975e\u5e38\u306b\u7c21\u5358\u3067\u3059\u3002\u5358\u306b\u3001\u3042\u306a\u305f\u306e hook \u95a2\u6570\u306e\u30ea\u30d5\u30a1\u30ec\u30f3\u30b9\u3092 bucket \u30d7\u30ed\u30d1\u30c6\u30a3\u306e\u95a2\u6570\u304c\u683c\u7d0d\u3055\u308c\u308b\u30ea\u30b9\u30c8\u306b\u8ffd\u52a0\u3057\u3066\u304f\u3060\u3055\u3044\u3002Pre-commit hooks \u306f bucket \u30d7\u30ed\u30d1\u30c6\u30a3\u306e \"precommit\" \u306b\u683c\u7d0d\u3055\u308c\u307e\u3059\u3002Post-commit hooks \u306f bucket \u30d7\u30ed\u30d1\u30c6\u30a3\u306e \"postcommit\" \u306b\u683c\u7d0d\u3055\u308c\u307e\u3059\u3002\nPre-commit Hook \u306f Javascript \u95a2\u6570\u3042\u308b\u3044\u306f Erlang \u95a2\u6570\u306e\u540d\u524d\u4ed8\u304d\u5b9f\u88c5\u304c\u3067\u304d\u307e\u3059\u3002\u5404\u3005\u306e\u305f\u3081\u306e\u8a2d\u5b9a\u306f\u6b21\u306e\u3088\u3046\u306b\u4e0e\u3048\u3089\u308c\u307e\u3059\u3002\nJavascript: {\"name\": \"Foo.beforeWrite\"}\nErlang: {\"mod\": \"foo\", \"fun\": \"beforeWrite\"}\n\nPost-commit Hook \u306f Erlang \u306e\u307f\u3067\u5b9f\u88c5\u3067\u304d\u307e\u3059\u3002\u8a73\u7d30\u306f Erlang Named Functions \u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\u3002\u3053\u306e\u5236\u7d04\u306f JavaScript \u304c Erlang \u306e\u30b3\u30fc\u30c9\u3092\u547c\u3076\u3053\u3068\u304c\u3067\u304d\u306a\u3044\u305f\u3081\u3001\u3042\u3089\u3086\u308b\u6709\u7528\u306a\u51e6\u7406\u304c\u59a8\u3052\u3089\u308c\u308b\u304b\u3089\u3067\u3059\u3002This restriction will be revisited when the state of Erlang/Javascript integration is improved. Post-commit Hook \u306f Pre-commit Hook \u3068\u540c\u3058 function reference syntax \u3092\u4f7f\u7528\u3057\u307e\u3059\u3002See MapReduce Implementation for steps to define your own pre-defined Javascript named functions.\n\nPre-Commit Hooks\n\nAPI & Behavior\nPre-commit Hook \u95a2\u6570\u306f\u3001\u3072\u3068\u3064\u306e\u5f15\u6570 (\u4fee\u6b63\u6e08\u307f\u306e Riak Object) \u3092\u3068\u308b\u3079\u304d\u3067\u3059\u3002\u524a\u9664\u306f\u66f8\u304d\u8fbc\u307f\u3068\u601d\u308f\u308c\u308b\u3053\u3068\u3092\u601d\u3044\u51fa\u3057\u3066\u304f\u3060\u3055\u3044\u3002\u3057\u305f\u304c\u3063\u3066\u3001\u524a\u9664\u304c\u767a\u751f\u3057\u305f\u3068\u304d\u306b Pre-Commit Hook \u304c\u52d5\u4f5c\u3059\u308b\u3067\u3057\u3087\u3046\u3002Hook \u95a2\u6570\u306f\u3001\u3044\u3064\u524a\u9664\u304c\u8d77\u3053\u3063\u3066\u3044\u308b\u304b\u3092\u6c7a\u3081\u308b\u305f\u3081\u306b\u3001Object \u306b X-Riak-Deleted \u30e1\u30bf\u30c7\u30fc\u30bf\u304c\u542b\u307e\u308c\u3066\u3044\u308b\u304b\u3092\u8abf\u3079\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\nErlang \u306e Pre-Commit Hook \u95a2\u6570\u306e\u8fd4\u308a\u5024\u306f\u3001\u6b21\u306e 3 \u3064\u306e\u30b1\u30fc\u30b9\u304c\u3042\u308a\u307e\u3059\u3002\n\nRiak Object: \u95a2\u6570\u306b\u6e21\u3055\u308c\u305f\u540c\u3058 Object \u304b\u3001\u66f4\u65b0\u3057\u305f\u30d0\u30fc\u30b8\u30e7\u30f3\u3092\u8fd4\u3057\u307e\u3059\u3002\u3053\u308c\u306f Hook \u304c Riak \u306b\u66f8\u304d\u8fbc\u307e\u308c\u308b\u524d\u306e Object \u3092\u7de8\u96c6\u3059\u308b\u3053\u3068\u3092\u53ef\u80fd\u306b\u3057\u307e\u3059\u3002\nfail: The atom fail will cause Riak to fail the write and send a 403 Forbidden along with a generic error message about why the write was blocked.\n{fail, Reason}: The tuple {fail, Reason} will cause the same behavior as in #2 with the addition of Reason used as the error text.\n\nErlang Pre-Commit Hook \u95a2\u6570\u306e\u51e6\u7406\u4e2d\u306b\u767a\u751f\u3057\u305f\u30a8\u30e9\u30fc\u306f \"sasl-error.log\" \u30d5\u30a1\u30a4\u30eb\u306b\u30a8\u30e9\u30fc\u304c\u767a\u751f\u3057\u305f\u884c\u756a\u53f7\u3068\u30a8\u30e9\u30fc\u30ec\u30dd\u30fc\u30c8\u304c\u51fa\u529b\u3055\u308c\u307e\u3059\u3002\nErlang Pre-commit Example:\n%% Limits object values to 5MB or smaller\nprecommit_limit_size(Object) ->\n  case erlang:byte_size(riak_object:get_value(Object)) of\n    Size when Size > 5242880 -> {fail, \"Object is larger than 5MB.\"};\n    _ -> Object\n  end.\n\nJavascript Pre-commit Hook \u95a2\u6570\u306f\u3001\u3072\u3068\u3064\u306e\u5f15\u6570 (\u4fee\u6b63\u6e08\u307f\u306e Riak Object \u306e JSON \u30a8\u30f3\u30b3\u30fc\u30c9) \u3092\u3068\u308b\u3079\u304d\u3067\u3059\u3002JSON \u30d5\u30a9\u30fc\u30de\u30c3\u30c8\u306f Riak \u306e map/reduce \u3068\u6b63\u78ba\u306b\u540c\u3058\u3067\u3059\u3002Javascript Pre-Commit Hook \u95a2\u6570\u306e\u8fd4\u308a\u5024\u306f\u3001\u6b21\u306e 3 \u3064\u306e\u30b1\u30fc\u30b9\u304c\u3042\u308a\u307e\u3059\u3002\n\nA JSON encoded Riak object: JSON \u3092\u4f7f\u7528\u3059\u308b\u3053\u3068\u306f\u5225\u3068\u3057\u3066\u3001Erlang \u95a2\u6570\u3068\u5b8c\u5168\u306b\u540c\u3058\u3067\u3059\u3002Riak \u306f\u66f8\u304d\u8fbc\u3080\u524d\u306b Native \u30d5\u30a9\u30fc\u30de\u30c3\u30c8\u306b\u81ea\u52d5\u7684\u306b\u5909\u63db\u3057\u307e\u3059\u3002\nfail: The Javascript string \u201cfail\u201d will cause Riak to fail the write in exactly the same way as #2 for Erlang functions.\n{\"fail\": Reason}: The JSON hash will have the same effect as #3 for Erlang functions. Reason must be a Javascript string.\n\nJavascript Pre-commit Example:\n// Makes sure the object has JSON contents\nfunction precommitMustBeJSON(object){\n  try {\n    Riak.mapValuesJson(object);\n    return object;\n  } catch(e) {\n    return {\"fail\":\"Object is not JSON\"};\n  }\n}\n\n\nChaining\nbucket precommit \u30d7\u30ed\u30d1\u30c6\u30a3\u306e\u30c7\u30d5\u30a9\u30eb\u30c8\u5024\u306f\u7a7a\u306e\u30ea\u30b9\u30c8\u3067\u3059\u3002Adding one or more pre-commit hook functions, as documented above, to the list will cause Riak to start evaluating those hook functions when bucket entries are created, updated, or deleted. Riak stops evaluating pre-commit hooks when a hook function fails the commit.\n\nPre-commit Validation Example\nPre-commit Hook \u306f Riak \u3067\u69d8\u3005\u306a\u65b9\u6cd5\u3067\u4f7f\u7528\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\u3072\u3068\u3064\u306e\u65b9\u6cd5\u3068\u3057\u3066\u3001Riak \u306b\u66f8\u304d\u8fbc\u3080\u524d\u306e\u30c7\u30fc\u30bf\u306e validate \u3059\u308b\u305f\u3081\u306b Pre-commit Hook \u306f\u4f7f\u7528\u3055\u308c\u307e\u3059\u3002Riak \u306b\u66f8\u304b\u308c\u308b\u524d\u306e JSON Object \u3092 validate \u3059\u308b\u305f\u3081\u306b Javascript \u3092\u4f7f\u7528\u3059\u308b\u4f8b\u3092\u6b21\u306b\u8a18\u8f09\u3057\u307e\u3059\u3002\n//Sample Object\n{\n  \"user_info\": {\n    \"name\": \"Mark Phillips\",\n    \"age\": \"25\",\n  },\n  \"session_info\": {\n    \"id\": 3254425,\n    \"items\": [29, 37, 34]\n  }\n}\n\n\nvar PreCommit = {\n    validate: function(obj){\n\n      // A delete is a type of put in Riak so check and see what this\n      // operation is doing\n\n      if (obj.values[[0]][['metadata']][['X-Riak-Deleted']]){\n        return obj;\n      }\n\n      // Make sure the data is valid JSON\n      try{\n         data = JSON.parse(obj.values[[0]].data);\n         validateData(data);\n\n      }catch(error){\n        return {\"fail\": \"Invalid Object: \"+error}\n      }\n      return obj;\n    }\n\n};\n\nfunction validateData(data){\n  // Validates that user_info object is in the data\n  // and that name and age aren't empty, finally\n  // the session_info items array is checked and validated as\n  // being populated\n\n  if(\n      data.user_info != null &&\n      data.user_info.name != null &&\n      data.user_info.age != null &&\n      data.session_info.items.length > 0\n  ){\n    return true;\n  }else{\n    throw( \"Invalid data\" );\n  }\n}\n\n\nPost-Commit Hooks\n\nAPI & Behavior\nPost-commit Hook \u95a2\u6570\u306f\u66f8\u304d\u8fbc\u307f\u304c\u6210\u529f\u3057\u305f\u5f8c\u306b\u52d5\u4f5c\u3057\u307e\u3059\u3002\u5177\u4f53\u7684\u306b\u306f\u3001\u547c\u3073\u51fa\u3057\u305f\u30d7\u30ed\u30bb\u30b9\u304c\u66f8\u304d\u8fbc\u307f\u304c\u6210\u529f\u3057\u305f\u901a\u77e5\u3092\u53d7\u3051\u308b\u76f4\u524d\u306b\u3001riak_kv_put_fsm \u306b\u3088\u3063\u3066 Hook \u95a2\u6570\u304c\u547c\u3070\u308c\u307e\u3059\u3002Hook \u95a2\u6570\u306f\u3072\u3068\u3064\u306e\u5f15\u6570 (\u66f8\u304d\u8fbc\u307e\u308c\u305f\u3070\u304b\u308a\u306e Riak Object \u30a4\u30f3\u30b9\u30bf\u30f3\u30b9) \u3092\u5fc5\u305a\u53d6\u308a\u307e\u3059\u3002Hook \u95a2\u6570\u306e\u8fd4\u308a\u5024\u306f\u7121\u8996\u3055\u308c\u307e\u3059\u3002\nPre-commit Hook \u3068\u540c\u69d8\u306b\u3001\u524a\u9664\u306f\u66f8\u304d\u8fbc\u307f\u3068\u601d\u308f\u308c\u308b\u3053\u3068\u3092\u601d\u3044\u51fa\u3057\u3066\u304f\u3060\u3055\u3044\u3002\u3057\u305f\u304c\u3063\u3066\u3001\u524a\u9664\u304c\u767a\u751f\u3057\u305f\u3068\u304d\u306b Post-Commit Hook \u304c\u52d5\u4f5c\u3059\u308b\u3067\u3057\u3087\u3046\u3002Hook \u95a2\u6570\u306f\u3001\u3044\u3064\u524a\u9664\u304c\u8d77\u3053\u3063\u3066\u3044\u308b\u304b\u3092\u6c7a\u3081\u308b\u305f\u3081\u306b\u3001Object \u306b X-Riak-Deleted \u30e1\u30bf\u30c7\u30fc\u30bf\u304c\u542b\u307e\u308c\u3066\u3044\u308b\u304b\u3092\u8abf\u3079\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002Post-Commit Hook \u95a2\u6570\u306e\u51e6\u7406\u4e2d\u306b\u767a\u751f\u3057\u305f\u30a8\u30e9\u30fc\u306f \"sasl-error.log\" \u30d5\u30a1\u30a4\u30eb\u306b\u30a8\u30e9\u30fc\u304c\u767a\u751f\u3057\u305f\u884c\u756a\u53f7\u3068\u30a8\u30e9\u30fc\u30ec\u30dd\u30fc\u30c8\u304c\u51fa\u529b\u3055\u308c\u307e\u3059\u3002\nPost-commit Example (Erlang):\n%% Creates a naive secondary index on the email field of a JSON object\npostcommit_index_on_email(Object) ->\n    %% Determine the target bucket name\n    Bucket = erlang:iolist_to_binary([riak_object:bucket(Object),\"_by_email\"]),\n    %% Decode the JSON body of the object\n    {struct, Properties} = mochijson2:decode(riak_object:get_value(Object)),\n    %% Extract the email field\n    {<<\"email\">>,Key} = lists:keyfind(<<\"email\">>,1,Properties),\n    %% Create a new object for the target bucket\n    %% NOTE: This doesn't handle the case where the\n    %%       index object already exists!\n    IndexObj = riak_object:new(Bucket, Key,<<>>, %% no object contents\n                               dict:from_list(\n                                 [\n                                  {<<\"content-type\">>, \"text/plain\"},\n                                  {<<\"Links\">>,\n                                   [\n                                    {{riak_object:bucket(Object), riak_object:key(Object)},<<\"indexed\">>}]}\n                                 ])),\n    %% Get a riak client\n    {ok, C} = riak:local_client(),\n    %% Store the object\n    C:put(IndexObj).\n\n\nChaining\nbucket postcommit \u30d7\u30ed\u30d1\u30c6\u30a3\u306e\u30c7\u30d5\u30a9\u30eb\u30c8\u5024\u306f\u7a7a\u306e\u30ea\u30b9\u30c8\u3067\u3059\u3002Adding one or more post-commit hook functions, as documented above, to the list will cause Riak to start evaluating those hook functions immediately after data has been created, updated, or deleted. Each post-commit hook function runs in a separate process so it's possible for several hook functions, triggered by the same update, to execute in parallel. All post-commit hook functions are executed for each create, update, or delete.\n\n\u304a\u308f\u308a\u306b\n\u624b\u629c\u304d\u3067\u30b4\u30e1\u30f3\u3002\n\n# Commit Hooks\n\n\u5927\u96d1\u628a\u306a\u610f\u8a33\u3001\u8a33\u3057\u306b\u304f\u3044\u7b87\u6240\u306f\u82f1\u6587\u306e\u307e\u307e\u8ee2\u8f09\u3057\u307e\u3059\u3002\nhttp://docs.basho.com/riak/latest/references/appendices/concepts/Commit-Hooks/\n\n## Overview\n\nPre-commit Hook \u3068 Post-commit Hook \u306f\u3001Riak Object \u304c\u30b3\u30df\u30c3\u30c8\u3055\u308c\u308b\u524d\u3042\u308b\u3044\u306f\u5f8c\u306b\u547c\u3073\u51fa\u3055\u308c\u307e\u3059\u3002\u3053\u308c\u306b\u3088\u308a\u3042\u3089\u3086\u308b\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u306e\u6a5f\u80fd\u6027\u3092\u5927\u304d\u304f\u9ad8\u3081\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002Commit Hooks \u306f\u4ee5\u4e0b\u306e\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\n* allow a write to occur with an unmodified object\u3000\n* modify the object\u3000\n* Fail the update and prevent any modifications\u3000\n\nPost-commit Hock \u306f\u30b3\u30df\u30c3\u30c8\u5f8c\u306b\u901a\u77e5\u3055\u308c\u3001Riak Object \u3092\u4fee\u6b63\u3059\u308b\u3079\u304d\u3067\u306f\u3042\u308a\u307e\u305b\u3093\u3002Riak Object \u66f4\u65b0\u6642\u306e Post-commit Hock \u306f\u3001\u4e0d\u5feb\u306a feedback \u30eb\u30fc\u30d7\u3092\u5f15\u304d\u8d77\u3053\u3059\u5834\u5408\u304c\u3042\u308a\u307e\u3059\u3002\u305d\u306e\u3088\u3046\u306a\u30b5\u30a4\u30af\u30eb\u3092\u691c\u77e5\u3057\u77ed\u8def\u3055\u305b\u308b\u3088\u3046\u6ce8\u610f\u6df1\u304f\u66f8\u304b\u306a\u3051\u308c\u3070\u3001\u4e0d\u5feb\u306a\u7121\u9650\u30eb\u30fc\u30d7\u304c\u767a\u751f\u3057\u307e\u3059\u3002\n\nPre-commit Hook \u3068 Post-commit Hook \u306f\u3001\u5404 bucket \u5358\u4f4d\u3067\u5b9a\u7fa9\u3055\u308c\u3001\u5bfe\u8c61 bucket \u306e\u30d7\u30ed\u30d1\u30c6\u30a3\u306b\u683c\u7d0d\u3055\u308c\u307e\u3059\u3002\u5f7c\u3089\u306f\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u3078\u306e\u6210\u529f\u30ec\u30b9\u30dd\u30f3\u30b9\u6bce\u306b\u4e00\u5ea6\u52d5\u4f5c\u3057\u307e\u3059\u3002\n\n## Configuration\n\nPre-commit Hook \u3068 Post-commit Hook \u306e\u8a2d\u5b9a\u306f\u975e\u5e38\u306b\u7c21\u5358\u3067\u3059\u3002\u5358\u306b\u3001\u3042\u306a\u305f\u306e hook \u95a2\u6570\u306e\u30ea\u30d5\u30a1\u30ec\u30f3\u30b9\u3092 bucket \u30d7\u30ed\u30d1\u30c6\u30a3\u306e\u95a2\u6570\u304c\u683c\u7d0d\u3055\u308c\u308b\u30ea\u30b9\u30c8\u306b\u8ffd\u52a0\u3057\u3066\u304f\u3060\u3055\u3044\u3002Pre-commit hooks \u306f bucket \u30d7\u30ed\u30d1\u30c6\u30a3\u306e \"precommit\" \u306b\u683c\u7d0d\u3055\u308c\u307e\u3059\u3002Post-commit hooks \u306f bucket \u30d7\u30ed\u30d1\u30c6\u30a3\u306e \"postcommit\" \u306b\u683c\u7d0d\u3055\u308c\u307e\u3059\u3002\n\nPre-commit Hook \u306f Javascript \u95a2\u6570\u3042\u308b\u3044\u306f Erlang \u95a2\u6570\u306e\u540d\u524d\u4ed8\u304d\u5b9f\u88c5\u304c\u3067\u304d\u307e\u3059\u3002\u5404\u3005\u306e\u305f\u3081\u306e\u8a2d\u5b9a\u306f\u6b21\u306e\u3088\u3046\u306b\u4e0e\u3048\u3089\u308c\u307e\u3059\u3002\n\n```\nJavascript: {\"name\": \"Foo.beforeWrite\"}\nErlang: {\"mod\": \"foo\", \"fun\": \"beforeWrite\"}\n```\n\nPost-commit Hook \u306f Erlang \u306e\u307f\u3067\u5b9f\u88c5\u3067\u304d\u307e\u3059\u3002\u8a73\u7d30\u306f [Erlang Named Functions](http://docs.basho.com/riak/latest/cookbooks/Erlang-Named-Functions/) \u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\u3002\u3053\u306e\u5236\u7d04\u306f JavaScript \u304c Erlang \u306e\u30b3\u30fc\u30c9\u3092\u547c\u3076\u3053\u3068\u304c\u3067\u304d\u306a\u3044\u305f\u3081\u3001\u3042\u3089\u3086\u308b\u6709\u7528\u306a\u51e6\u7406\u304c\u59a8\u3052\u3089\u308c\u308b\u304b\u3089\u3067\u3059\u3002This restriction will be revisited when the state of Erlang/Javascript integration is improved. Post-commit Hook \u306f Pre-commit Hook \u3068\u540c\u3058 function reference syntax \u3092\u4f7f\u7528\u3057\u307e\u3059\u3002See [MapReduce Implementation](http://docs.basho.com/riak/latest/references/appendices/MapReduce-Implementation/) for steps to define your own pre-defined Javascript named functions.\n\n## Pre-Commit Hooks\n\n### API & Behavior\n\nPre-commit Hook \u95a2\u6570\u306f\u3001\u3072\u3068\u3064\u306e\u5f15\u6570 (\u4fee\u6b63\u6e08\u307f\u306e Riak Object) \u3092\u3068\u308b\u3079\u304d\u3067\u3059\u3002\u524a\u9664\u306f\u66f8\u304d\u8fbc\u307f\u3068\u601d\u308f\u308c\u308b\u3053\u3068\u3092\u601d\u3044\u51fa\u3057\u3066\u304f\u3060\u3055\u3044\u3002\u3057\u305f\u304c\u3063\u3066\u3001\u524a\u9664\u304c\u767a\u751f\u3057\u305f\u3068\u304d\u306b Pre-Commit Hook \u304c\u52d5\u4f5c\u3059\u308b\u3067\u3057\u3087\u3046\u3002Hook \u95a2\u6570\u306f\u3001\u3044\u3064\u524a\u9664\u304c\u8d77\u3053\u3063\u3066\u3044\u308b\u304b\u3092\u6c7a\u3081\u308b\u305f\u3081\u306b\u3001Object \u306b X-Riak-Deleted \u30e1\u30bf\u30c7\u30fc\u30bf\u304c\u542b\u307e\u308c\u3066\u3044\u308b\u304b\u3092\u8abf\u3079\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\n\nErlang \u306e Pre-Commit Hook \u95a2\u6570\u306e\u8fd4\u308a\u5024\u306f\u3001\u6b21\u306e 3 \u3064\u306e\u30b1\u30fc\u30b9\u304c\u3042\u308a\u307e\u3059\u3002\n\n* **Riak Object:** \u95a2\u6570\u306b\u6e21\u3055\u308c\u305f\u540c\u3058 Object \u304b\u3001\u66f4\u65b0\u3057\u305f\u30d0\u30fc\u30b8\u30e7\u30f3\u3092\u8fd4\u3057\u307e\u3059\u3002\u3053\u308c\u306f Hook \u304c Riak \u306b\u66f8\u304d\u8fbc\u307e\u308c\u308b\u524d\u306e Object \u3092\u7de8\u96c6\u3059\u308b\u3053\u3068\u3092\u53ef\u80fd\u306b\u3057\u307e\u3059\u3002\n\n* **fail:** The atom fail will cause Riak to fail the write and send a 403 Forbidden along with a generic error message about why the write was blocked.\n\n* **{fail, Reason}:** The tuple {fail, Reason} will cause the same behavior as in #2 with the addition of Reason used as the error text.\n\nErlang Pre-Commit Hook \u95a2\u6570\u306e\u51e6\u7406\u4e2d\u306b\u767a\u751f\u3057\u305f\u30a8\u30e9\u30fc\u306f \"sasl-error.log\" \u30d5\u30a1\u30a4\u30eb\u306b\u30a8\u30e9\u30fc\u304c\u767a\u751f\u3057\u305f\u884c\u756a\u53f7\u3068\u30a8\u30e9\u30fc\u30ec\u30dd\u30fc\u30c8\u304c\u51fa\u529b\u3055\u308c\u307e\u3059\u3002\n\nErlang Pre-commit Example:\n\n```\n%% Limits object values to 5MB or smaller\nprecommit_limit_size(Object) ->\n  case erlang:byte_size(riak_object:get_value(Object)) of\n    Size when Size > 5242880 -> {fail, \"Object is larger than 5MB.\"};\n    _ -> Object\n  end.\n```\n\nJavascript Pre-commit Hook \u95a2\u6570\u306f\u3001\u3072\u3068\u3064\u306e\u5f15\u6570 (\u4fee\u6b63\u6e08\u307f\u306e Riak Object \u306e JSON \u30a8\u30f3\u30b3\u30fc\u30c9) \u3092\u3068\u308b\u3079\u304d\u3067\u3059\u3002JSON \u30d5\u30a9\u30fc\u30de\u30c3\u30c8\u306f Riak \u306e map/reduce \u3068\u6b63\u78ba\u306b\u540c\u3058\u3067\u3059\u3002Javascript Pre-Commit Hook \u95a2\u6570\u306e\u8fd4\u308a\u5024\u306f\u3001\u6b21\u306e 3 \u3064\u306e\u30b1\u30fc\u30b9\u304c\u3042\u308a\u307e\u3059\u3002\n\n* **A JSON encoded Riak object:** JSON \u3092\u4f7f\u7528\u3059\u308b\u3053\u3068\u306f\u5225\u3068\u3057\u3066\u3001Erlang \u95a2\u6570\u3068\u5b8c\u5168\u306b\u540c\u3058\u3067\u3059\u3002Riak \u306f\u66f8\u304d\u8fbc\u3080\u524d\u306b Native \u30d5\u30a9\u30fc\u30de\u30c3\u30c8\u306b\u81ea\u52d5\u7684\u306b\u5909\u63db\u3057\u307e\u3059\u3002\n\n* **fail:** The Javascript string \u201cfail\u201d will cause Riak to fail the write in exactly the same way as #2 for Erlang functions.\n\n* **{\"fail\": Reason}:** The JSON hash will have the same effect as #3 for Erlang functions. Reason must be a Javascript string.\n\nJavascript Pre-commit Example:\n\n```\n// Makes sure the object has JSON contents\nfunction precommitMustBeJSON(object){\n  try {\n    Riak.mapValuesJson(object);\n    return object;\n  } catch(e) {\n    return {\"fail\":\"Object is not JSON\"};\n  }\n}\n```\n\n### Chaining\n\nbucket precommit \u30d7\u30ed\u30d1\u30c6\u30a3\u306e\u30c7\u30d5\u30a9\u30eb\u30c8\u5024\u306f\u7a7a\u306e\u30ea\u30b9\u30c8\u3067\u3059\u3002Adding one or more pre-commit hook functions, as documented above, to the list will cause Riak to start evaluating those hook functions when bucket entries are created, updated, or deleted. Riak stops evaluating pre-commit hooks when a hook function fails the commit.\n\n### Pre-commit Validation Example\n\nPre-commit Hook \u306f Riak \u3067\u69d8\u3005\u306a\u65b9\u6cd5\u3067\u4f7f\u7528\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\u3072\u3068\u3064\u306e\u65b9\u6cd5\u3068\u3057\u3066\u3001Riak \u306b\u66f8\u304d\u8fbc\u3080\u524d\u306e\u30c7\u30fc\u30bf\u306e validate \u3059\u308b\u305f\u3081\u306b Pre-commit Hook \u306f\u4f7f\u7528\u3055\u308c\u307e\u3059\u3002Riak \u306b\u66f8\u304b\u308c\u308b\u524d\u306e JSON Object \u3092 validate \u3059\u308b\u305f\u3081\u306b Javascript \u3092\u4f7f\u7528\u3059\u308b\u4f8b\u3092\u6b21\u306b\u8a18\u8f09\u3057\u307e\u3059\u3002\n\n```\n//Sample Object\n{\n  \"user_info\": {\n    \"name\": \"Mark Phillips\",\n    \"age\": \"25\",\n  },\n  \"session_info\": {\n    \"id\": 3254425,\n    \"items\": [29, 37, 34]\n  }\n}\n\n\nvar PreCommit = {\n    validate: function(obj){\n\n      // A delete is a type of put in Riak so check and see what this\n      // operation is doing\n\n      if (obj.values[[0]][['metadata']][['X-Riak-Deleted']]){\n        return obj;\n      }\n\n      // Make sure the data is valid JSON\n      try{\n         data = JSON.parse(obj.values[[0]].data);\n         validateData(data);\n\n      }catch(error){\n        return {\"fail\": \"Invalid Object: \"+error}\n      }\n      return obj;\n    }\n\n};\n\nfunction validateData(data){\n  // Validates that user_info object is in the data\n  // and that name and age aren't empty, finally\n  // the session_info items array is checked and validated as\n  // being populated\n\n  if(\n      data.user_info != null &&\n      data.user_info.name != null &&\n      data.user_info.age != null &&\n      data.session_info.items.length > 0\n  ){\n    return true;\n  }else{\n    throw( \"Invalid data\" );\n  }\n}\n```\n\n## Post-Commit Hooks\n\n### API & Behavior\n\nPost-commit Hook \u95a2\u6570\u306f\u66f8\u304d\u8fbc\u307f\u304c\u6210\u529f\u3057\u305f\u5f8c\u306b\u52d5\u4f5c\u3057\u307e\u3059\u3002\u5177\u4f53\u7684\u306b\u306f\u3001\u547c\u3073\u51fa\u3057\u305f\u30d7\u30ed\u30bb\u30b9\u304c\u66f8\u304d\u8fbc\u307f\u304c\u6210\u529f\u3057\u305f\u901a\u77e5\u3092\u53d7\u3051\u308b\u76f4\u524d\u306b\u3001riak_kv_put_fsm \u306b\u3088\u3063\u3066 Hook \u95a2\u6570\u304c\u547c\u3070\u308c\u307e\u3059\u3002Hook \u95a2\u6570\u306f\u3072\u3068\u3064\u306e\u5f15\u6570 (\u66f8\u304d\u8fbc\u307e\u308c\u305f\u3070\u304b\u308a\u306e Riak Object \u30a4\u30f3\u30b9\u30bf\u30f3\u30b9) \u3092\u5fc5\u305a\u53d6\u308a\u307e\u3059\u3002Hook \u95a2\u6570\u306e\u8fd4\u308a\u5024\u306f\u7121\u8996\u3055\u308c\u307e\u3059\u3002\n\nPre-commit Hook \u3068\u540c\u69d8\u306b\u3001\u524a\u9664\u306f\u66f8\u304d\u8fbc\u307f\u3068\u601d\u308f\u308c\u308b\u3053\u3068\u3092\u601d\u3044\u51fa\u3057\u3066\u304f\u3060\u3055\u3044\u3002\u3057\u305f\u304c\u3063\u3066\u3001\u524a\u9664\u304c\u767a\u751f\u3057\u305f\u3068\u304d\u306b Post-Commit Hook \u304c\u52d5\u4f5c\u3059\u308b\u3067\u3057\u3087\u3046\u3002Hook \u95a2\u6570\u306f\u3001\u3044\u3064\u524a\u9664\u304c\u8d77\u3053\u3063\u3066\u3044\u308b\u304b\u3092\u6c7a\u3081\u308b\u305f\u3081\u306b\u3001Object \u306b X-Riak-Deleted \u30e1\u30bf\u30c7\u30fc\u30bf\u304c\u542b\u307e\u308c\u3066\u3044\u308b\u304b\u3092\u8abf\u3079\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002Post-Commit Hook \u95a2\u6570\u306e\u51e6\u7406\u4e2d\u306b\u767a\u751f\u3057\u305f\u30a8\u30e9\u30fc\u306f \"sasl-error.log\" \u30d5\u30a1\u30a4\u30eb\u306b\u30a8\u30e9\u30fc\u304c\u767a\u751f\u3057\u305f\u884c\u756a\u53f7\u3068\u30a8\u30e9\u30fc\u30ec\u30dd\u30fc\u30c8\u304c\u51fa\u529b\u3055\u308c\u307e\u3059\u3002\n\nPost-commit Example (Erlang):\n\n```\n%% Creates a naive secondary index on the email field of a JSON object\npostcommit_index_on_email(Object) ->\n    %% Determine the target bucket name\n    Bucket = erlang:iolist_to_binary([riak_object:bucket(Object),\"_by_email\"]),\n    %% Decode the JSON body of the object\n    {struct, Properties} = mochijson2:decode(riak_object:get_value(Object)),\n    %% Extract the email field\n    {<<\"email\">>,Key} = lists:keyfind(<<\"email\">>,1,Properties),\n    %% Create a new object for the target bucket\n    %% NOTE: This doesn't handle the case where the\n    %%       index object already exists!\n    IndexObj = riak_object:new(Bucket, Key,<<>>, %% no object contents\n                               dict:from_list(\n                                 [\n                                  {<<\"content-type\">>, \"text/plain\"},\n                                  {<<\"Links\">>,\n                                   [\n                                    {{riak_object:bucket(Object), riak_object:key(Object)},<<\"indexed\">>}]}\n                                 ])),\n    %% Get a riak client\n    {ok, C} = riak:local_client(),\n    %% Store the object\n    C:put(IndexObj).\n```\n\n### Chaining\n\nbucket postcommit \u30d7\u30ed\u30d1\u30c6\u30a3\u306e\u30c7\u30d5\u30a9\u30eb\u30c8\u5024\u306f\u7a7a\u306e\u30ea\u30b9\u30c8\u3067\u3059\u3002Adding one or more post-commit hook functions, as documented above, to the list will cause Riak to start evaluating those hook functions immediately after data has been created, updated, or deleted. Each post-commit hook function runs in a separate process so it's possible for several hook functions, triggered by the same update, to execute in parallel. All post-commit hook functions are executed for each create, update, or delete.\n\n## \u304a\u308f\u308a\u306b\n\n\u624b\u629c\u304d\u3067\u30b4\u30e1\u30f3\u3002", "tags": ["riak"]}