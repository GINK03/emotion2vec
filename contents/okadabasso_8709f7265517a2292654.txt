{"context": ".Net Core \u74b0\u5883\u3067\u4f7f\u3048\u308b Entity Framework Code First \u30d9\u30fc\u30b9\u306e\u81ea\u52d5\u751f\u6210\u6a5f\u80fd\u304c\u306a\u3044\u3063\u307d\u3044\u306e\u3067\u3001\u4f5c\u3063\u3066\u3084\u308d\u3046\u3068\u3057\u305f\u3089\u540d\u524d\u5909\u63db\u3067\u8e93\u3044\u305f\u306e\u3067\u304b\u3063\u3068\u306a\u3063\u3066\u4f5c\u3063\u3066\u307f\u305f\u3002\nC# \u3067\u306e\u5358\u6570\u8907\u6570\u5909\u63db\u306f .Net Framework \u672c\u4f53\u306b\u306f\u3042\u308b\u3063\u307d\u3044\u306e\u3060\u3051\u3069 .Net Core\u3067\u6a19\u6e96\u7684\u306b\u53c2\u7167\u3055\u308c\u308b\u30e9\u30a4\u30d6\u30e9\u30ea\u4e2d\u306b\u306f\u306a\u3044\u306e\u304b\u306a\u3002\n\u307e\u3042\u3001\u3042\u3063\u305f\u3089\u3042\u3063\u305f\u3067\u304a\u52c9\u5f37\u306e\u305f\u3081\u3001\u3068\u5272\u308a\u5207\u308b\u3002\n\nInflector.cs\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing System.IO;\n\nnamespace ClassLibrary1\n{\n    public class Inflector\n    {\n        Dictionary<string, string> PluralIllegular;\n        Dictionary<string, string> SingularIllegular;\n        List<string> Uninflected;\n        Dictionary<string, string> PluralRules;\n        Dictionary<string, string> SingularRules;\n\n        void InitializeUninflected()\n        {\n            Uninflected = new List<string>() {\n                \"deer\",\n                \"fish\",\n                \"measles\",\n                \"ois\",\n                \"pox\",\n                \"rice\",\n                \"sheep\",\n                \"Amoyese\",\n                \"bison\",\n                \"bream\",\n                \"buffalo\",\n                \"cantus\",\n                \"carp\",\n                \"cod\",\n                \"coitus\",\n                \"corps\",\n                \"diabetes\",\n                \"elk\",\n                \"equipment\",\n                \"flounder\",\n                \"gallows\",\n                \"Genevese\",\n                \"Gilbertese\",\n                \"headquarters\",\n                \"herpes\",\n                \"information\",\n                \"innings\",\n                \"Lucchese\",\n                \"mackerel\",\n                \"mews\",\n                \"moose\",\n                \"mumps\",\n                \"news\",\n                \"nexus\",\n                \"Niasese\",\n                \"Pekingese\",\n                \"Portuguese\",\n                \"proceedings\",\n                \"rabies\",\n                \"salmon\",\n                \"scissors\",\n                \"series\",\n                \"shears\",\n                \"siemens\",\n                \"species\",\n                \"trousers\",\n                \"trout\",\n                \"tuna\",\n                \"whiting\",\n                \"wildebeest\",\n                \"Yengeese\" };\n        }\n        void InitializePluralRules()\n        {\n            PluralRules = new Dictionary<string, string>();\n            PluralRules.Add(\"(s)tatus$\", \"$1tatuses\");\n            PluralRules.Add(\"^(ox)$\", \"$1en\");\n            PluralRules.Add(\"([m|l])ouse$\", \"$1ice\");\n            PluralRules.Add(\"(matr|vert|ind)ix|ex$\", \"$1ices\");\n            PluralRules.Add(\"(x|ch|ss|sh)$\", \"$1es\");\n            PluralRules.Add(\"(r|t|c)y$\", \"$1ies\");\n            PluralRules.Add(\"(hive)$\", \"$1s\");\n            PluralRules.Add(\"([^f])fe$\", \"$1ves\");\n            PluralRules.Add(\"([lr])f$\", \"$1ves\");\n            PluralRules.Add(\"(.*)sis$\", \"$1ses\");\n            PluralRules.Add(\"([ti])um$\", \"$1a\");\n            PluralRules.Add(\"(buffal|tomat)o$\", \"$1oes\");\n            PluralRules.Add(\"(bu)s$\", \"$1ses\");\n            PluralRules.Add(\"(alias)\", \"$1es\");\n            PluralRules.Add(\"(octop|vir)us$\", \"$1i\");\n            PluralRules.Add(\"(.*)s$\", \"$1s\");\n            PluralRules.Add(\"^(.*)$\", \"$1s\");\n\n            PluralIllegular = new Dictionary<string, string>();\n            PluralIllegular.Add(\"atlas\", \"atlases\");\n            PluralIllegular.Add(\"child\", \"children\");\n            PluralIllegular.Add(\"corpus\", \"corpuses\");\n            PluralIllegular.Add(\"ganglion\", \"ganglions\");\n            PluralIllegular.Add(\"genus\", \"genera\");\n            PluralIllegular.Add(\"graffito\", \"graffiti\");\n            PluralIllegular.Add(\"leaf\", \"leaves\");\n            PluralIllegular.Add(\"man\", \"men\");\n            PluralIllegular.Add(\"money\", \"monies\");\n            PluralIllegular.Add(\"mythos\", \"mythoi\");\n            PluralIllegular.Add(\"numen\", \"numina\");\n            PluralIllegular.Add(\"opus\", \"opuses\");\n            PluralIllegular.Add(\"penis\", \"penises\");\n            PluralIllegular.Add(\"person\", \"people\");\n            PluralIllegular.Add(\"sex\", \"sexes\");\n            PluralIllegular.Add(\"soliloquy\", \"soliloquies\");\n            PluralIllegular.Add(\"testis\", \"testes\");\n            PluralIllegular.Add(\"woman\", \"women\");\n            PluralIllegular.Add(\"move\", \"moves\");\n            PluralIllegular.Add(\"datum\", \"data\");\n            PluralIllegular.Add(\"criterion\", \"criteria\");\n        }\n        void InitializeSingularRules()\n        {\n            SingularRules = new Dictionary<string, string>();\n            SingularRules.Add(\"(s)tatuses$\", \"$1tatus\");\n            SingularRules.Add(\"^(ox)en$\", \"$1\");\n            SingularRules.Add(\"([m|l])ice$\", \"$1ouse\");\n            SingularRules.Add(\"(matr)ices$\", \"$1ix\");\n            SingularRules.Add(\"(vert|ind)ices$\", \"$1ex\");\n            SingularRules.Add(\"(cris|ax|test)es$\", \"$1is\");\n            SingularRules.Add(\"(x|ch|ss|sh)es$\", \"$1\");\n            SingularRules.Add(\"(r|t|c)ies$\", \"$1y\");\n            SingularRules.Add(\"(movie)s$\", \"$1\");\n            SingularRules.Add(\"(hive)s$\", \"$1\");\n            SingularRules.Add(\"([^f])ves$\", \"$1fe\");\n            SingularRules.Add(\"([lr])ves$\", \"$1f\");\n            SingularRules.Add(\"(analy|ba|diagno|parenthe|synop|the)ses$\", \"$1sis\");\n            SingularRules.Add(\"([ti])a$\", \"$1um\");\n            SingularRules.Add(\"(buffal|tomat)oes$\", \"$1o\");\n            SingularRules.Add(\"(bu)ses$\", \"$1s\");\n            SingularRules.Add(\"(alias)es\", \"$1\");\n            SingularRules.Add(\"(octop|vir)i$\", \"$1us\");\n            SingularRules.Add(\"(.*)s$\", \"$1\");\n            SingularRules.Add(\"(.*)\", \"$1\");\n\n            SingularIllegular = new Dictionary<string, string>();\n            SingularIllegular.Add(\"atlases\", \"atlas\");\n            SingularIllegular.Add(\"children\", \"child\");\n            SingularIllegular.Add(\"corpuses\", \"corpus\");\n            SingularIllegular.Add(\"ganglions\", \"ganglion\");\n            SingularIllegular.Add(\"genera\", \"genus\");\n            SingularIllegular.Add(\"graffiti\", \"graffito\");\n            SingularIllegular.Add(\"leaves\", \"leaf\");\n            SingularIllegular.Add(\"men\", \"man\");\n            SingularIllegular.Add(\"monies\", \"money\");\n            SingularIllegular.Add(\"mythoi\", \"mythos\");\n            SingularIllegular.Add(\"numina\", \"numen\");\n            SingularIllegular.Add(\"opuses\", \"opus\");\n            SingularIllegular.Add(\"penises\", \"penis\");\n            SingularIllegular.Add(\"people\", \"person\");\n            SingularIllegular.Add(\"sexes\", \"sex\");\n            SingularIllegular.Add(\"soliloquies\", \"soliloquy\");\n            SingularIllegular.Add(\"testes\", \"testis\");\n            SingularIllegular.Add(\"women\", \"woman\");\n            SingularIllegular.Add(\"moves\", \"move\");\n            SingularIllegular.Add(\"data\", \"datum\");\n            SingularIllegular.Add(\"criteria\", \"criterion\");\n        }\n\n\n        public string Pluralize(String word)\n        {\n            if (Uninflected == null)\n            {\n                InitializeUninflected();\n            }\n            if (PluralRules == null)\n            {\n                InitializePluralRules();\n            }\n\n            if (Uninflected.Any(x => x.ToLower() == word.ToLower()))\n            {\n                return word;\n            }\n            foreach (var keyValue in PluralIllegular)\n            {\n                if (Regex.IsMatch(word, keyValue.Key, RegexOptions.IgnoreCase))\n                {\n                    return Regex.Replace(word, keyValue.Key, keyValue.Value);\n                }\n            }\n            foreach (var keyValue in PluralRules)\n            {\n                if (Regex.IsMatch(word, keyValue.Key, RegexOptions.IgnoreCase))\n                {\n                    var replaced = Regex.Replace(word, keyValue.Key, keyValue.Value);\n                    return replaced;\n                }\n            }\n\n            return word;\n        }\n        public string Singularize(String word)\n        {\n            if (Uninflected == null)\n            {\n                InitializeUninflected();\n            }\n            if (SingularRules == null)\n            {\n                InitializeSingularRules();\n            }\n\n            if (Uninflected.Any(x => x == word.ToLower()))\n            {\n                return word;\n            }\n            foreach (var keyValue in SingularIllegular)\n            {\n                if (Regex.IsMatch(word, keyValue.Key, RegexOptions.IgnoreCase))\n                {\n                    return Regex.Replace(word, keyValue.Key, keyValue.Value);\n                }\n            }\n            foreach (var keyValue in SingularRules)\n            {\n                if (Regex.IsMatch(word, keyValue.Key, RegexOptions.IgnoreCase))\n                {\n                    return Regex.Replace(word, keyValue.Key, keyValue.Value);\n                }\n            }\n\n            return word;\n\n        }\n        public string Pascalize(string word)\n        {\n            if (string.IsNullOrEmpty(word))\n            {\n                return word;\n            }\n            if (word.Length == 1)\n            {\n                return word.ToUpper();\n            }\n\n            if (word.Contains('_') || word.Contains('-') || word.Contains(' '))\n            {\n                var pascalized = CamelizeDefault(word, true);\n                return pascalized;\n            }\n            else\n            {\n                var pascalized = NormalizeCamelCase(word, true);\n                return pascalized;\n\n            }\n        }\n        public string Camelize(string word)\n        {\n            if (string.IsNullOrEmpty(word))\n            {\n                return word;\n            }\n            if (word.Length == 1)\n            {\n                return word.ToLower();\n            }\n\n            if (word.Contains('_') || word.Contains('-') || word.Contains(' '))\n            {\n                var pascalized = CamelizeDefault(word, false);\n                return pascalized;\n            }\n            else\n            {\n                var pascalized = NormalizeCamelCase(word, false);\n                return pascalized;\n\n            }\n        }\n\n        public string SnakeCase(string word)\n        {\n            var snake = Regex.Replace(word, \"([A-Za-z])([0-9]+)\", \"$1_$2\");\n            snake = Regex.Replace(snake, \"([0-9]+)([A-Za-z])\", \"$1_$2\");\n            snake = Regex.Replace(snake, \"([A-Z]+)([A-Z][a-z])\", \"$1_$2\");\n            snake = Regex.Replace(snake, \"([a-z]+)([A-Z])\", \"$1_$2\");\n            return snake.ToLower();\n\n        }\n        public string UpperSnakeCase(string word)\n        {\n            return SnakeCase(word).ToUpper();\n\n        }\n\n        private string NormalizeCamelCase(string word, bool upcaseFirst)\n        {\n            using (TextWriter writer = new StringWriter())\n            using (TextReader reader = new StringReader(word))\n            {\n                char c1 = (char)reader.Read();\n                char c2 = '\\0';\n                bool b = true;\n                bool upcase = upcaseFirst;\n                while (reader.Peek() >= 0)\n                {\n                    c2 = (char)reader.Read();\n                    if ('A' <= c1 && c1 <= 'Z')\n                    {\n                        if ('A' <= c2 && c2 <= 'Z' || '0' <= c2 && c2 <= '9')\n                        {\n                            writer.Write((b && upcase) ? c1 : (char)(c1 - 'A' + 'a'));\n                        }\n                        else\n                        {\n                            writer.Write(upcase ? c1 : (char)(c1 - 'A' + 'a'));\n                        }\n                        b = false;\n                    }\n                    else if ('a' <= c1 && c1 <= 'z')\n                    {\n                        writer.Write((b && upcase) ? (char)(c1 - 'a' + 'A') : c1);\n                        if ('A' <= c2 && c2 <= 'Z')\n                        {\n                            b = true;\n                        }\n                    }\n                    else\n                    {\n                        writer.Write(c1);\n                        if ('A' <= c2 && c2 <= 'Z' || 'a' <= c2 && c2 <= 'z')\n                        {\n                            b = true;\n                        }\n                    }\n                    c1 = c2;\n                    upcase = true;\n                }\n                // last\n                if ('A' <= c1 && c1 <= 'Z')\n                {\n                    if ('A' <= c2 && c2 <= 'Z')\n                    {\n                        writer.Write((b && upcase) ? c2 :  (char)(c2 - 'A' + 'a'));\n                    }\n                    else\n                    {\n                        writer.Write(c2);\n                    }\n                }\n                else\n                {\n                    writer.Write(c2);\n                }\n                var camelized = writer.ToString();\n                return camelized;\n            }\n        }\n        private string CamelizeDefault(string word, bool upcaseFirst)\n        {\n            using (var writer = new StringWriter())\n            {\n                bool isFirst = true;\n                foreach (var element in word.Split(new char[] { '_', '-', ' ' }))\n                {\n                    writer.Write((upcaseFirst || !isFirst) ? element.Substring(0, 1).ToUpper() : element.Substring(0, 1).ToLower());\n                    if (element.Length > 1)\n                    {\n                        writer.Write(element.Substring(1).ToLower());\n                    }\n                    isFirst = false;\n                }\n                var camelized = writer.ToString();\n                return camelized;\n            }\n\n\n        }\n    }\n}\n\n\n\u5358\u6570\u8907\u6570\u5909\u63db\u306e\u5143\u306f\nhttp://d.hatena.ne.jp/cheesepie/20070131/1170172709\n(javascript\u3067\u306e\u30b5\u30f3\u30d7\u30eb)\n\u4ed6\u306f\u3044\u308d\u3044\u308d\u8a66\u884c\u932f\u8aa4\u3057\u305f\u3002\n\"_\" \u3084 \"-\" \u3067\u533a\u5207\u3089\u308c\u3066\u306a\u3044\u6587\u5b57\u5217\u3092\u6e21\u3057\u305f\u3068\u304d\u306e camel/pascal\u306f\u4ee5\u4e0b\u306e\u30eb\u30fc\u30eb\u306b\u5f93\u3063\u3066\u3044\u308b\u3002\n\n1\u500b\u306e\u5927\u6587\u5b57\u306b\u7d9a\u304f1\u500b\u4ee5\u4e0a\u306e\u5c0f\u6587\u5b57\u30921\u5358\u8a9e\u3068\u307f\u306a\u3059\n\u8907\u6570\u306e\u5927\u6587\u5b57\u306f1\u5358\u8a9e\u3068\u307f\u306a\u3059\n\u6570\u5b57\u306e\u9023\u7d9a\u306f1\u5358\u8a9e\u3068\u307f\u306a\u3059\n\ncamel\u306e\u5834\u5408\u5148\u982d\u304c\u5c0f\u6587\u5b57\u3001pascal \u306e\u5834\u5408\u5148\u982d\u304c\u5927\u6587\u5b57\u306b\u306a\u308b\u3002\n.Net Core \u74b0\u5883\u3067\u4f7f\u3048\u308b Entity Framework Code First \u30d9\u30fc\u30b9\u306e\u81ea\u52d5\u751f\u6210\u6a5f\u80fd\u304c\u306a\u3044\u3063\u307d\u3044\u306e\u3067\u3001\u4f5c\u3063\u3066\u3084\u308d\u3046\u3068\u3057\u305f\u3089\u540d\u524d\u5909\u63db\u3067\u8e93\u3044\u305f\u306e\u3067\u304b\u3063\u3068\u306a\u3063\u3066\u4f5c\u3063\u3066\u307f\u305f\u3002\n\nC# \u3067\u306e\u5358\u6570\u8907\u6570\u5909\u63db\u306f .Net Framework \u672c\u4f53\u306b\u306f\u3042\u308b\u3063\u307d\u3044\u306e\u3060\u3051\u3069 .Net Core\u3067\u6a19\u6e96\u7684\u306b\u53c2\u7167\u3055\u308c\u308b\u30e9\u30a4\u30d6\u30e9\u30ea\u4e2d\u306b\u306f\u306a\u3044\u306e\u304b\u306a\u3002\n\u307e\u3042\u3001\u3042\u3063\u305f\u3089\u3042\u3063\u305f\u3067\u304a\u52c9\u5f37\u306e\u305f\u3081\u3001\u3068\u5272\u308a\u5207\u308b\u3002\n\n```c#:Inflector.cs\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text.RegularExpressions;\nusing System.IO;\n\nnamespace ClassLibrary1\n{\n    public class Inflector\n    {\n        Dictionary<string, string> PluralIllegular;\n        Dictionary<string, string> SingularIllegular;\n        List<string> Uninflected;\n        Dictionary<string, string> PluralRules;\n        Dictionary<string, string> SingularRules;\n\n        void InitializeUninflected()\n        {\n            Uninflected = new List<string>() {\n                \"deer\",\n                \"fish\",\n                \"measles\",\n                \"ois\",\n                \"pox\",\n                \"rice\",\n                \"sheep\",\n                \"Amoyese\",\n                \"bison\",\n                \"bream\",\n                \"buffalo\",\n                \"cantus\",\n                \"carp\",\n                \"cod\",\n                \"coitus\",\n                \"corps\",\n                \"diabetes\",\n                \"elk\",\n                \"equipment\",\n                \"flounder\",\n                \"gallows\",\n                \"Genevese\",\n                \"Gilbertese\",\n                \"headquarters\",\n                \"herpes\",\n                \"information\",\n                \"innings\",\n                \"Lucchese\",\n                \"mackerel\",\n                \"mews\",\n                \"moose\",\n                \"mumps\",\n                \"news\",\n                \"nexus\",\n                \"Niasese\",\n                \"Pekingese\",\n                \"Portuguese\",\n                \"proceedings\",\n                \"rabies\",\n                \"salmon\",\n                \"scissors\",\n                \"series\",\n                \"shears\",\n                \"siemens\",\n                \"species\",\n                \"trousers\",\n                \"trout\",\n                \"tuna\",\n                \"whiting\",\n                \"wildebeest\",\n                \"Yengeese\" };\n        }\n        void InitializePluralRules()\n        {\n            PluralRules = new Dictionary<string, string>();\n            PluralRules.Add(\"(s)tatus$\", \"$1tatuses\");\n            PluralRules.Add(\"^(ox)$\", \"$1en\");\n            PluralRules.Add(\"([m|l])ouse$\", \"$1ice\");\n            PluralRules.Add(\"(matr|vert|ind)ix|ex$\", \"$1ices\");\n            PluralRules.Add(\"(x|ch|ss|sh)$\", \"$1es\");\n            PluralRules.Add(\"(r|t|c)y$\", \"$1ies\");\n            PluralRules.Add(\"(hive)$\", \"$1s\");\n            PluralRules.Add(\"([^f])fe$\", \"$1ves\");\n            PluralRules.Add(\"([lr])f$\", \"$1ves\");\n            PluralRules.Add(\"(.*)sis$\", \"$1ses\");\n            PluralRules.Add(\"([ti])um$\", \"$1a\");\n            PluralRules.Add(\"(buffal|tomat)o$\", \"$1oes\");\n            PluralRules.Add(\"(bu)s$\", \"$1ses\");\n            PluralRules.Add(\"(alias)\", \"$1es\");\n            PluralRules.Add(\"(octop|vir)us$\", \"$1i\");\n            PluralRules.Add(\"(.*)s$\", \"$1s\");\n            PluralRules.Add(\"^(.*)$\", \"$1s\");\n\n            PluralIllegular = new Dictionary<string, string>();\n            PluralIllegular.Add(\"atlas\", \"atlases\");\n            PluralIllegular.Add(\"child\", \"children\");\n            PluralIllegular.Add(\"corpus\", \"corpuses\");\n            PluralIllegular.Add(\"ganglion\", \"ganglions\");\n            PluralIllegular.Add(\"genus\", \"genera\");\n            PluralIllegular.Add(\"graffito\", \"graffiti\");\n            PluralIllegular.Add(\"leaf\", \"leaves\");\n            PluralIllegular.Add(\"man\", \"men\");\n            PluralIllegular.Add(\"money\", \"monies\");\n            PluralIllegular.Add(\"mythos\", \"mythoi\");\n            PluralIllegular.Add(\"numen\", \"numina\");\n            PluralIllegular.Add(\"opus\", \"opuses\");\n            PluralIllegular.Add(\"penis\", \"penises\");\n            PluralIllegular.Add(\"person\", \"people\");\n            PluralIllegular.Add(\"sex\", \"sexes\");\n            PluralIllegular.Add(\"soliloquy\", \"soliloquies\");\n            PluralIllegular.Add(\"testis\", \"testes\");\n            PluralIllegular.Add(\"woman\", \"women\");\n            PluralIllegular.Add(\"move\", \"moves\");\n            PluralIllegular.Add(\"datum\", \"data\");\n            PluralIllegular.Add(\"criterion\", \"criteria\");\n        }\n        void InitializeSingularRules()\n        {\n            SingularRules = new Dictionary<string, string>();\n            SingularRules.Add(\"(s)tatuses$\", \"$1tatus\");\n            SingularRules.Add(\"^(ox)en$\", \"$1\");\n            SingularRules.Add(\"([m|l])ice$\", \"$1ouse\");\n            SingularRules.Add(\"(matr)ices$\", \"$1ix\");\n            SingularRules.Add(\"(vert|ind)ices$\", \"$1ex\");\n            SingularRules.Add(\"(cris|ax|test)es$\", \"$1is\");\n            SingularRules.Add(\"(x|ch|ss|sh)es$\", \"$1\");\n            SingularRules.Add(\"(r|t|c)ies$\", \"$1y\");\n            SingularRules.Add(\"(movie)s$\", \"$1\");\n            SingularRules.Add(\"(hive)s$\", \"$1\");\n            SingularRules.Add(\"([^f])ves$\", \"$1fe\");\n            SingularRules.Add(\"([lr])ves$\", \"$1f\");\n            SingularRules.Add(\"(analy|ba|diagno|parenthe|synop|the)ses$\", \"$1sis\");\n            SingularRules.Add(\"([ti])a$\", \"$1um\");\n            SingularRules.Add(\"(buffal|tomat)oes$\", \"$1o\");\n            SingularRules.Add(\"(bu)ses$\", \"$1s\");\n            SingularRules.Add(\"(alias)es\", \"$1\");\n            SingularRules.Add(\"(octop|vir)i$\", \"$1us\");\n            SingularRules.Add(\"(.*)s$\", \"$1\");\n            SingularRules.Add(\"(.*)\", \"$1\");\n\n            SingularIllegular = new Dictionary<string, string>();\n            SingularIllegular.Add(\"atlases\", \"atlas\");\n            SingularIllegular.Add(\"children\", \"child\");\n            SingularIllegular.Add(\"corpuses\", \"corpus\");\n            SingularIllegular.Add(\"ganglions\", \"ganglion\");\n            SingularIllegular.Add(\"genera\", \"genus\");\n            SingularIllegular.Add(\"graffiti\", \"graffito\");\n            SingularIllegular.Add(\"leaves\", \"leaf\");\n            SingularIllegular.Add(\"men\", \"man\");\n            SingularIllegular.Add(\"monies\", \"money\");\n            SingularIllegular.Add(\"mythoi\", \"mythos\");\n            SingularIllegular.Add(\"numina\", \"numen\");\n            SingularIllegular.Add(\"opuses\", \"opus\");\n            SingularIllegular.Add(\"penises\", \"penis\");\n            SingularIllegular.Add(\"people\", \"person\");\n            SingularIllegular.Add(\"sexes\", \"sex\");\n            SingularIllegular.Add(\"soliloquies\", \"soliloquy\");\n            SingularIllegular.Add(\"testes\", \"testis\");\n            SingularIllegular.Add(\"women\", \"woman\");\n            SingularIllegular.Add(\"moves\", \"move\");\n            SingularIllegular.Add(\"data\", \"datum\");\n            SingularIllegular.Add(\"criteria\", \"criterion\");\n        }\n\n\n        public string Pluralize(String word)\n        {\n            if (Uninflected == null)\n            {\n                InitializeUninflected();\n            }\n            if (PluralRules == null)\n            {\n                InitializePluralRules();\n            }\n\n            if (Uninflected.Any(x => x.ToLower() == word.ToLower()))\n            {\n                return word;\n            }\n            foreach (var keyValue in PluralIllegular)\n            {\n                if (Regex.IsMatch(word, keyValue.Key, RegexOptions.IgnoreCase))\n                {\n                    return Regex.Replace(word, keyValue.Key, keyValue.Value);\n                }\n            }\n            foreach (var keyValue in PluralRules)\n            {\n                if (Regex.IsMatch(word, keyValue.Key, RegexOptions.IgnoreCase))\n                {\n                    var replaced = Regex.Replace(word, keyValue.Key, keyValue.Value);\n                    return replaced;\n                }\n            }\n\n            return word;\n        }\n        public string Singularize(String word)\n        {\n            if (Uninflected == null)\n            {\n                InitializeUninflected();\n            }\n            if (SingularRules == null)\n            {\n                InitializeSingularRules();\n            }\n\n            if (Uninflected.Any(x => x == word.ToLower()))\n            {\n                return word;\n            }\n            foreach (var keyValue in SingularIllegular)\n            {\n                if (Regex.IsMatch(word, keyValue.Key, RegexOptions.IgnoreCase))\n                {\n                    return Regex.Replace(word, keyValue.Key, keyValue.Value);\n                }\n            }\n            foreach (var keyValue in SingularRules)\n            {\n                if (Regex.IsMatch(word, keyValue.Key, RegexOptions.IgnoreCase))\n                {\n                    return Regex.Replace(word, keyValue.Key, keyValue.Value);\n                }\n            }\n\n            return word;\n\n        }\n        public string Pascalize(string word)\n        {\n            if (string.IsNullOrEmpty(word))\n            {\n                return word;\n            }\n            if (word.Length == 1)\n            {\n                return word.ToUpper();\n            }\n\n            if (word.Contains('_') || word.Contains('-') || word.Contains(' '))\n            {\n                var pascalized = CamelizeDefault(word, true);\n                return pascalized;\n            }\n            else\n            {\n                var pascalized = NormalizeCamelCase(word, true);\n                return pascalized;\n\n            }\n        }\n        public string Camelize(string word)\n        {\n            if (string.IsNullOrEmpty(word))\n            {\n                return word;\n            }\n            if (word.Length == 1)\n            {\n                return word.ToLower();\n            }\n\n            if (word.Contains('_') || word.Contains('-') || word.Contains(' '))\n            {\n                var pascalized = CamelizeDefault(word, false);\n                return pascalized;\n            }\n            else\n            {\n                var pascalized = NormalizeCamelCase(word, false);\n                return pascalized;\n\n            }\n        }\n\n        public string SnakeCase(string word)\n        {\n            var snake = Regex.Replace(word, \"([A-Za-z])([0-9]+)\", \"$1_$2\");\n            snake = Regex.Replace(snake, \"([0-9]+)([A-Za-z])\", \"$1_$2\");\n            snake = Regex.Replace(snake, \"([A-Z]+)([A-Z][a-z])\", \"$1_$2\");\n            snake = Regex.Replace(snake, \"([a-z]+)([A-Z])\", \"$1_$2\");\n            return snake.ToLower();\n\n        }\n        public string UpperSnakeCase(string word)\n        {\n            return SnakeCase(word).ToUpper();\n\n        }\n\n        private string NormalizeCamelCase(string word, bool upcaseFirst)\n        {\n            using (TextWriter writer = new StringWriter())\n            using (TextReader reader = new StringReader(word))\n            {\n                char c1 = (char)reader.Read();\n                char c2 = '\\0';\n                bool b = true;\n                bool upcase = upcaseFirst;\n                while (reader.Peek() >= 0)\n                {\n                    c2 = (char)reader.Read();\n                    if ('A' <= c1 && c1 <= 'Z')\n                    {\n                        if ('A' <= c2 && c2 <= 'Z' || '0' <= c2 && c2 <= '9')\n                        {\n                            writer.Write((b && upcase) ? c1 : (char)(c1 - 'A' + 'a'));\n                        }\n                        else\n                        {\n                            writer.Write(upcase ? c1 : (char)(c1 - 'A' + 'a'));\n                        }\n                        b = false;\n                    }\n                    else if ('a' <= c1 && c1 <= 'z')\n                    {\n                        writer.Write((b && upcase) ? (char)(c1 - 'a' + 'A') : c1);\n                        if ('A' <= c2 && c2 <= 'Z')\n                        {\n                            b = true;\n                        }\n                    }\n                    else\n                    {\n                        writer.Write(c1);\n                        if ('A' <= c2 && c2 <= 'Z' || 'a' <= c2 && c2 <= 'z')\n                        {\n                            b = true;\n                        }\n                    }\n                    c1 = c2;\n                    upcase = true;\n                }\n                // last\n                if ('A' <= c1 && c1 <= 'Z')\n                {\n                    if ('A' <= c2 && c2 <= 'Z')\n                    {\n                        writer.Write((b && upcase) ? c2 :  (char)(c2 - 'A' + 'a'));\n                    }\n                    else\n                    {\n                        writer.Write(c2);\n                    }\n                }\n                else\n                {\n                    writer.Write(c2);\n                }\n                var camelized = writer.ToString();\n                return camelized;\n            }\n        }\n        private string CamelizeDefault(string word, bool upcaseFirst)\n        {\n            using (var writer = new StringWriter())\n            {\n                bool isFirst = true;\n                foreach (var element in word.Split(new char[] { '_', '-', ' ' }))\n                {\n                    writer.Write((upcaseFirst || !isFirst) ? element.Substring(0, 1).ToUpper() : element.Substring(0, 1).ToLower());\n                    if (element.Length > 1)\n                    {\n                        writer.Write(element.Substring(1).ToLower());\n                    }\n                    isFirst = false;\n                }\n                var camelized = writer.ToString();\n                return camelized;\n            }\n\n\n        }\n    }\n}\n```\n\n\u5358\u6570\u8907\u6570\u5909\u63db\u306e\u5143\u306f\nhttp://d.hatena.ne.jp/cheesepie/20070131/1170172709\n(javascript\u3067\u306e\u30b5\u30f3\u30d7\u30eb)\n\n\u4ed6\u306f\u3044\u308d\u3044\u308d\u8a66\u884c\u932f\u8aa4\u3057\u305f\u3002\n\n\"_\" \u3084 \"-\" \u3067\u533a\u5207\u3089\u308c\u3066\u306a\u3044\u6587\u5b57\u5217\u3092\u6e21\u3057\u305f\u3068\u304d\u306e camel/pascal\u306f\u4ee5\u4e0b\u306e\u30eb\u30fc\u30eb\u306b\u5f93\u3063\u3066\u3044\u308b\u3002\n\n* 1\u500b\u306e\u5927\u6587\u5b57\u306b\u7d9a\u304f1\u500b\u4ee5\u4e0a\u306e\u5c0f\u6587\u5b57\u30921\u5358\u8a9e\u3068\u307f\u306a\u3059\n* \u8907\u6570\u306e\u5927\u6587\u5b57\u306f1\u5358\u8a9e\u3068\u307f\u306a\u3059\n* \u6570\u5b57\u306e\u9023\u7d9a\u306f1\u5358\u8a9e\u3068\u307f\u306a\u3059\n\ncamel\u306e\u5834\u5408\u5148\u982d\u304c\u5c0f\u6587\u5b57\u3001pascal \u306e\u5834\u5408\u5148\u982d\u304c\u5927\u6587\u5b57\u306b\u306a\u308b\u3002\n", "tags": [".NETFramework", "C#"]}