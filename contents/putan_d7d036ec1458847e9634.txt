{"context": "\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3067\u30ad\u30fc\u30de\u30c3\u30c1\u3059\u308c\u3070switch\u3088\u308a\u5168\u7136\u7121\u99c4\u304c\u306a\u3044\u306f\u305a\u3002\n\u3067\u3082\u3069\u3053\u3092\u898b\u3066\u3082\u307f\u3093\u306aswitch\u3067\u3057\u304b\u66f8\u304b\u308c\u3066\u3044\u306a\u3044\u3002\u3002\u3002\n\u3075\u3001\u4e0d\u5b89\u306a\u306e\u3067\u3001\u3053\u3053\u306f\u4ef2\u9593\u3092\u5897\u3084\u3057\u3066\u3044\u3053\u3046\uff01\n\u3068\u3044\u3046\u3053\u3068\u3067\u3001\u3053\u3061\u3089\u6295\u7a3f\u3057\u3066\u307f\u307e\u3057\u305f\u3002\n\u4f55\u304bswitch\u3067\u66f8\u304b\u3044\u305f\u307b\u3046\u304c\u826f\u3044\u7406\u7531\u306a\u3069\u3042\u308c\u3070\u6559\u3048\u3066\u304f\u3060\u3055\u3044\uff01\n\u4ee5\u4e0b\u3001\u30b5\u30f3\u30d7\u30eb\nimport Immutable  from 'immutable';\nimport * as types from '../const/actionTypes';\n\n// \u521d\u671fstate\u306e\u8a2d\u5b9a\nconst defaultState = {\n    hoge  : false,\n    fuga  : true,\n    error : false,\n};\nconst initialState = Immutable.Map(defaultState);\n\n// \u5171\u901a\u306e\u30a8\u30e9\u30fc\u51e6\u7406\nconst setError = (state) => (\n    state.set('error', true)\n);\n\n// \u4eca\u307e\u3067switch\u306b\u5165\u3063\u3066\u3044\u305f\u51e6\u7406\u3092\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306b\u5165\u308c\u305f\u3068\u3053\u308d\nconst reducers = {\n\n    [types.SET_HOGE] : (state, action) => (\n        state.set('hoge', action.hoge)\n    ),\n\n    [types.SET_ALL_FLAG_FALSE] : (state) => (\n        state.withMutations(m => (\n            m\n                .set('hoge', false)\n                .set('fuga', false)\n        ))\n    ),\n\n    [types.RESET] : () => initialState,\n\n    // fall through \u3067\u66f8\u3044\u3066\u3044\u305f\u3068\u3053\u308d\u306f\u4e00\u5ea6\u95a2\u6570\u3067\u66f8\u3044\u3066\u5f53\u3066\u308b\n    [types.PIYO_ERROR] : setError,\n    [types.PICO_ERROR] : setError,\n\n};\n\n// reducer\u672c\u4f53\nexport default (state = initialState, action) => {\n    if (reducers[action.type]) {\n        return reducers[action.type](state, action);\n    }\n    return state;\n};\n\n\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3067\u30ad\u30fc\u30de\u30c3\u30c1\u3059\u308c\u3070switch\u3088\u308a\u5168\u7136\u7121\u99c4\u304c\u306a\u3044\u306f\u305a\u3002\n\u3067\u3082\u3069\u3053\u3092\u898b\u3066\u3082\u307f\u3093\u306aswitch\u3067\u3057\u304b\u66f8\u304b\u308c\u3066\u3044\u306a\u3044\u3002\u3002\u3002\n\u3075\u3001\u4e0d\u5b89\u306a\u306e\u3067\u3001\u3053\u3053\u306f\u4ef2\u9593\u3092\u5897\u3084\u3057\u3066\u3044\u3053\u3046\uff01\n\n\u3068\u3044\u3046\u3053\u3068\u3067\u3001\u3053\u3061\u3089\u6295\u7a3f\u3057\u3066\u307f\u307e\u3057\u305f\u3002\n\u4f55\u304bswitch\u3067\u66f8\u304b\u3044\u305f\u307b\u3046\u304c\u826f\u3044\u7406\u7531\u306a\u3069\u3042\u308c\u3070\u6559\u3048\u3066\u304f\u3060\u3055\u3044\uff01\n\n\u4ee5\u4e0b\u3001\u30b5\u30f3\u30d7\u30eb\n\n```js\nimport Immutable  from 'immutable';\nimport * as types from '../const/actionTypes';\n\n// \u521d\u671fstate\u306e\u8a2d\u5b9a\nconst defaultState = {\n    hoge  : false,\n    fuga  : true,\n    error : false,\n};\nconst initialState = Immutable.Map(defaultState);\n\n// \u5171\u901a\u306e\u30a8\u30e9\u30fc\u51e6\u7406\nconst setError = (state) => (\n    state.set('error', true)\n);\n\n// \u4eca\u307e\u3067switch\u306b\u5165\u3063\u3066\u3044\u305f\u51e6\u7406\u3092\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306b\u5165\u308c\u305f\u3068\u3053\u308d\nconst reducers = {\n\n    [types.SET_HOGE] : (state, action) => (\n        state.set('hoge', action.hoge)\n    ),\n\n    [types.SET_ALL_FLAG_FALSE] : (state) => (\n        state.withMutations(m => (\n            m\n                .set('hoge', false)\n                .set('fuga', false)\n        ))\n    ),\n\n    [types.RESET] : () => initialState,\n\n    // fall through \u3067\u66f8\u3044\u3066\u3044\u305f\u3068\u3053\u308d\u306f\u4e00\u5ea6\u95a2\u6570\u3067\u66f8\u3044\u3066\u5f53\u3066\u308b\n    [types.PIYO_ERROR] : setError,\n    [types.PICO_ERROR] : setError,\n\n};\n\n// reducer\u672c\u4f53\nexport default (state = initialState, action) => {\n    if (reducers[action.type]) {\n        return reducers[action.type](state, action);\n    }\n    return state;\n};\n```\n", "tags": ["redux", "JavaScript"]}