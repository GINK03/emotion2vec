{"context": "Spark ML\u306b\u306f\u30c7\u30fc\u30bf\u30d5\u30ec\u30fc\u30e0\u306e\u9023\u7d9a\u3057\u305f\u5909\u63db\u64cd\u4f5c\u3092\u4e00\u3064\u306b\u307e\u3068\u3081\u308bPipeline\u3068\u3044\u3046\u4ed5\u7d44\u307f\u304c\u3042\u308a\u307e\u3059\u3002\u3053\u308c\u3092\u4f7f\u3046\u3068\u30b3\u30fc\u30c9\u304c\u30b9\u30c3\u30ad\u30ea\u66f8\u3051\u308b\u3088\u3046\u306b\u306a\u308b\u307b\u304b\u3001Spark\u5185\u90e8\u3067\u306e\u30e1\u30e2\u30ea\u306e\u5229\u7528\u52b9\u7387\u3082\u4e0a\u304c\u308b\u3089\u3057\u3044\u3067\u3059\u3002\n\u5927\u307e\u304b\u306a\u6d41\u308c\u306f\u6b21\u306e\u901a\u308a\n\n\u30b9\u30c6\u30fc\u30b8\u306e\u7528\u610f\n\u30d1\u30a4\u30d7\u30e9\u30a4\u30f3\u69cb\u7bc9\n\u30e2\u30c7\u30eb\u751f\u6210\n\u5b9f\u884c\n\n\u524d\u56de\u6295\u7a3f\u3057\u305fSpark ML\u3067\u4e3b\u6210\u5206\u5206\u6790\u3092Pipeline\u3092\u4f7f\u3063\u3066\u66f8\u304d\u63db\u3048\u3066\u307f\u307e\u3059\u3002\n\n\u30b9\u30c6\u30fc\u30b8\u3068\u30d1\u30a4\u30d7\u30e9\u30a4\u30f3\n\u30d1\u30a4\u30d7\u30e9\u30a4\u30f3\u4e2d\u306e\u6bb5\u968e\u3092\u30b9\u30c6\u30fc\u30b8\u3068\u547c\u3073\u307e\u3059\u3002\u4e3b\u6210\u5206\u5206\u6790\u306e\u4f8b\u3067\u306f\u6b21\u306e\uff13\u6bb5\u968e\u304c\u3042\u308a\u307e\u3057\u305f\u3002\n\n\u30d9\u30af\u30c8\u30eb\u306e\u4f5c\u6210\n\u6a19\u6e96\u5316\nPCA\n\n\u3053\u306e\uff13\u3064\u3092\u4f7f\u3063\u3066\u30d1\u30a4\u30d7\u30e9\u30a4\u30f3\u3092\u5ba3\u8a00\u3057\u307e\u3059\u3002df\u306f\u5165\u529b\u30c7\u30fc\u30bf\u304c\u683c\u7d0d\u3055\u308c\u305f\u30c7\u30fc\u30bf\u30d5\u30ec\u30fc\u30e0\u3067\u3059\u3002df\u306e\u8a73\u7d30\u306f\u524d\u56de\u306e\u8a18\u4e8b\u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\u3002\nfrom pyspark.ml.pipeline import Pipeline\n\n# Pipeline\u306e\u5404\u30b9\u30c6\u30fc\u30b8\nassembler = VectorAssembler(inputCols=df.columns[1:], outputCol=\"\u5909\u91cf\")\nscaler = StandardScaler(inputCol=\"\u5909\u91cf\", outputCol=\"\u6a19\u6e96\u5316\u5909\u91cf\", withStd=True, withMean=True)\npca = PCA(k=3, inputCol=\"\u6a19\u6e96\u5316\u5909\u91cf\", outputCol=\"\u4e3b\u6210\u5206\u5f97\u70b9\")\n\n# Pipeline\u306e\u5ba3\u8a00\npipeline = Pipeline(stages=[\n    assembler,\n    scaler,\n    pca\n])\n\n\n\u30e2\u30c7\u30eb\u306e\u751f\u6210\n\u69cb\u7bc9\u3057\u305f\u30d1\u30a4\u30d7\u30e9\u30a4\u30f3\u306b\u30c7\u30fc\u30bf\u3092\u5165\u529b\u3057\u3001\u30e2\u30c7\u30eb\u3092\u4f5c\u308a\u307e\u3059\u3002\nmodel = pipeline.fit(df)\n\n\n\u30e2\u30c7\u30eb\u306e\u5b9f\u884c\nresult = model.transform(df)\nresult.select(\"\u4e3b\u6210\u5206\u5f97\u70b9\").show(truncate=False)\n\n\n\u5b9f\u884c\u7d50\u679c\n\u524d\u56de\u306e\u8a18\u4e8b\u3067\u500b\u5225\u306b\u5b9f\u884c\u3057\u305f\u6642\u3068\u540c\u3058\u7d50\u679c\u304c\u5f97\u3089\u308c\u307e\u3057\u305f\u3002\n+---------------------------------------------------------------+\n|\u4e3b\u6210\u5206\u5f97\u70b9                                                          |\n+---------------------------------------------------------------+\n|[-2.2620712255691466,0.4021126641946994,0.35861418406317674]   |\n|[1.3672950172090064,-0.516574975843834,0.8240383763102186]     |\n|[-0.35784774304549694,1.0654633785914394,-0.7670998522924913]  |\n|[0.3930334607140129,-1.220525792393691,-0.05437714111925901]   |\n|[0.9712806670593661,1.7644947192188811,-0.2783291638335238]    |\n|[0.8556397135650156,-0.9097726336587761,-1.0627843972001996]   |\n|[1.0076787432724863,0.1504509197015279,1.2009982469039933]     |\n|[-1.8977055313059759,-0.9270196509736093,-0.005660728153863093]|\n|[0.4960234396284956,-0.24274673811341405,-0.6858245266064249]  |\n|[-0.5733265415277634,0.43411810927677885,0.47042500192836967]  |\n+---------------------------------------------------------------+\n\n\n\u30b9\u30c6\u30fc\u30b8\u306e\u53c2\u7167\u65b9\u6cd5\n\u30b9\u30c6\u30fc\u30b8\u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306fmodel.stages[]\u3067\u53c2\u7167\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\u7b2c\uff13\u30b9\u30c6\u30fc\u30b8\u306ePCA\u30e2\u30c7\u30eb\u3092\u53c2\u7167\u3057\u3066\u307f\u307e\u3059\u3002\nprint(\"==== \u56fa\u6709\u30d9\u30af\u30c8\u30eb ====\")\nprint(model.stages[2].pc)\n\nprint(\"==== \u5bc4\u4e0e\u7387 ====\")\nprint(model.stages[2].explainedVariance)\n\n\n\u307e\u3068\u3081\nPipeline\u3092\u4f7f\u3046\u3053\u3068\u3067\u3001\u4e2d\u9593\u306e\u5909\u6570\u304c\u306a\u304f\u306a\u308a\u3001\u30b3\u30fc\u30c9\u304c\u30b9\u30c3\u30ad\u30ea\u66f8\u3051\u307e\u3057\u305f\u3002\n\u5404\u30b9\u30c6\u30fc\u30b8\u306e\u500b\u3005\u306e\u30e2\u30c7\u30eb\u306e\u53c2\u7167\u3082\u53ef\u80fd\u306a\u306e\u3067\u3001Pipeline\u3092\u4f7f\u308f\u306a\u3044\u7406\u7531\u306f\u306a\u3055\u305d\u3046\u3067\u3059\u3002\n\n\u5168\u30bd\u30fc\u30b9\n# -*- coding: utf-8 -*-\nfrom pyspark.sql import SparkSession\nfrom pyspark.ml.pipeline import Pipeline\nfrom pyspark.ml.feature import PCA, VectorAssembler, StandardScaler\n\n# Initialize SparkSession\nspark = (SparkSession\n         .builder\n         .appName(\"news\")\n         .enableHiveSupport()\n         .getOrCreate())\n\n# Read raw data\ndf = spark.read.csv('news.csv', header=True, inferSchema=True, mode=\"DROPMALFORMED\", encoding='UTF-8')\n\nprint(\"==== \u751f\u30c7\u30fc\u30bf ====\")\ndf.show(truncate=False)\n\n# pipeline\u306e\u90e8\u54c1\u3092\u7528\u610f\u3059\u308b\nassembler = VectorAssembler(inputCols=df.columns[1:], outputCol=\"\u5909\u91cf\")\nscaler = StandardScaler(inputCol=\"\u5909\u91cf\", outputCol=\"\u6a19\u6e96\u5316\u5909\u91cf\", withStd=True, withMean=True)\npca = PCA(k=3, inputCol=\"\u6a19\u6e96\u5316\u5909\u91cf\", outputCol=\"\u4e3b\u6210\u5206\u5f97\u70b9\")\n\npipeline = Pipeline(stages=[\n    assembler,\n    scaler,\n    pca\n])\n\n# \u30d1\u30a4\u30d7\u30e9\u30a4\u30f3\u3092\u5b9f\u884c\u3057\u3066\u5165\u529b\u30c7\u30fc\u30bf\u304b\u3089\u30e2\u30c7\u30eb\u3092\u4f5c\u308b\nmodel = pipeline.fit(df)\n\n# \u30e2\u30c7\u30eb\u3092\u5b9f\u884c\u3059\u308b\nresult = model.transform(df)\nresult.show(truncate=False)\n\n# Pipeline\u306e\u30b9\u30c6\u30fc\u30b8\u306f.stages\u3067\u53c2\u7167\u3067\u304d\u308b\nprint(\"==== \u56fa\u6709\u30d9\u30af\u30c8\u30eb ====\")\nprint(model.stages[2].pc)\n\nprint(\"==== \u5bc4\u4e0e\u7387 ====\")\nprint(model.stages[2].explainedVariance)\n\nSpark ML\u306b\u306f\u30c7\u30fc\u30bf\u30d5\u30ec\u30fc\u30e0\u306e\u9023\u7d9a\u3057\u305f\u5909\u63db\u64cd\u4f5c\u3092\u4e00\u3064\u306b\u307e\u3068\u3081\u308b`Pipeline`\u3068\u3044\u3046\u4ed5\u7d44\u307f\u304c\u3042\u308a\u307e\u3059\u3002\u3053\u308c\u3092\u4f7f\u3046\u3068\u30b3\u30fc\u30c9\u304c\u30b9\u30c3\u30ad\u30ea\u66f8\u3051\u308b\u3088\u3046\u306b\u306a\u308b\u307b\u304b\u3001Spark\u5185\u90e8\u3067\u306e\u30e1\u30e2\u30ea\u306e\u5229\u7528\u52b9\u7387\u3082\u4e0a\u304c\u308b\u3089\u3057\u3044\u3067\u3059\u3002\n\n\u5927\u307e\u304b\u306a\u6d41\u308c\u306f\u6b21\u306e\u901a\u308a\n\n* \u30b9\u30c6\u30fc\u30b8\u306e\u7528\u610f\n* \u30d1\u30a4\u30d7\u30e9\u30a4\u30f3\u69cb\u7bc9\n* \u30e2\u30c7\u30eb\u751f\u6210\n* \u5b9f\u884c\n\n\u524d\u56de\u6295\u7a3f\u3057\u305f[Spark ML\u3067\u4e3b\u6210\u5206\u5206\u6790](http://qiita.com/knoguchi/items/7714a1cc9be56588b72a)\u3092Pipeline\u3092\u4f7f\u3063\u3066\u66f8\u304d\u63db\u3048\u3066\u307f\u307e\u3059\u3002\n\n\n# \u30b9\u30c6\u30fc\u30b8\u3068\u30d1\u30a4\u30d7\u30e9\u30a4\u30f3\n\n\u30d1\u30a4\u30d7\u30e9\u30a4\u30f3\u4e2d\u306e\u6bb5\u968e\u3092\u30b9\u30c6\u30fc\u30b8\u3068\u547c\u3073\u307e\u3059\u3002\u4e3b\u6210\u5206\u5206\u6790\u306e\u4f8b\u3067\u306f\u6b21\u306e\uff13\u6bb5\u968e\u304c\u3042\u308a\u307e\u3057\u305f\u3002\n\n* \u30d9\u30af\u30c8\u30eb\u306e\u4f5c\u6210\n* \u6a19\u6e96\u5316\n* PCA\n\n\u3053\u306e\uff13\u3064\u3092\u4f7f\u3063\u3066\u30d1\u30a4\u30d7\u30e9\u30a4\u30f3\u3092\u5ba3\u8a00\u3057\u307e\u3059\u3002df\u306f\u5165\u529b\u30c7\u30fc\u30bf\u304c\u683c\u7d0d\u3055\u308c\u305f\u30c7\u30fc\u30bf\u30d5\u30ec\u30fc\u30e0\u3067\u3059\u3002df\u306e\u8a73\u7d30\u306f\u524d\u56de\u306e\u8a18\u4e8b\u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n\n```py\nfrom pyspark.ml.pipeline import Pipeline\n\n# Pipeline\u306e\u5404\u30b9\u30c6\u30fc\u30b8\nassembler = VectorAssembler(inputCols=df.columns[1:], outputCol=\"\u5909\u91cf\")\nscaler = StandardScaler(inputCol=\"\u5909\u91cf\", outputCol=\"\u6a19\u6e96\u5316\u5909\u91cf\", withStd=True, withMean=True)\npca = PCA(k=3, inputCol=\"\u6a19\u6e96\u5316\u5909\u91cf\", outputCol=\"\u4e3b\u6210\u5206\u5f97\u70b9\")\n\n# Pipeline\u306e\u5ba3\u8a00\npipeline = Pipeline(stages=[\n    assembler,\n    scaler,\n    pca\n])\n```\n\n# \u30e2\u30c7\u30eb\u306e\u751f\u6210\n\u69cb\u7bc9\u3057\u305f\u30d1\u30a4\u30d7\u30e9\u30a4\u30f3\u306b\u30c7\u30fc\u30bf\u3092\u5165\u529b\u3057\u3001\u30e2\u30c7\u30eb\u3092\u4f5c\u308a\u307e\u3059\u3002\n\n```py\nmodel = pipeline.fit(df)\n```\n\n# \u30e2\u30c7\u30eb\u306e\u5b9f\u884c\n```py\nresult = model.transform(df)\nresult.select(\"\u4e3b\u6210\u5206\u5f97\u70b9\").show(truncate=False)\n```\n\n## \u5b9f\u884c\u7d50\u679c\n\n\u524d\u56de\u306e\u8a18\u4e8b\u3067\u500b\u5225\u306b\u5b9f\u884c\u3057\u305f\u6642\u3068\u540c\u3058\u7d50\u679c\u304c\u5f97\u3089\u308c\u307e\u3057\u305f\u3002\n\n```bash\n+---------------------------------------------------------------+\n|\u4e3b\u6210\u5206\u5f97\u70b9                                                          |\n+---------------------------------------------------------------+\n|[-2.2620712255691466,0.4021126641946994,0.35861418406317674]   |\n|[1.3672950172090064,-0.516574975843834,0.8240383763102186]     |\n|[-0.35784774304549694,1.0654633785914394,-0.7670998522924913]  |\n|[0.3930334607140129,-1.220525792393691,-0.05437714111925901]   |\n|[0.9712806670593661,1.7644947192188811,-0.2783291638335238]    |\n|[0.8556397135650156,-0.9097726336587761,-1.0627843972001996]   |\n|[1.0076787432724863,0.1504509197015279,1.2009982469039933]     |\n|[-1.8977055313059759,-0.9270196509736093,-0.005660728153863093]|\n|[0.4960234396284956,-0.24274673811341405,-0.6858245266064249]  |\n|[-0.5733265415277634,0.43411810927677885,0.47042500192836967]  |\n+---------------------------------------------------------------+\n```\n\n# \u30b9\u30c6\u30fc\u30b8\u306e\u53c2\u7167\u65b9\u6cd5\n\n\u30b9\u30c6\u30fc\u30b8\u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306f`model.stages[]`\u3067\u53c2\u7167\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\u7b2c\uff13\u30b9\u30c6\u30fc\u30b8\u306ePCA\u30e2\u30c7\u30eb\u3092\u53c2\u7167\u3057\u3066\u307f\u307e\u3059\u3002\n\n```\nprint(\"==== \u56fa\u6709\u30d9\u30af\u30c8\u30eb ====\")\nprint(model.stages[2].pc)\n\nprint(\"==== \u5bc4\u4e0e\u7387 ====\")\nprint(model.stages[2].explainedVariance)\n```\n\n# \u307e\u3068\u3081\n\nPipeline\u3092\u4f7f\u3046\u3053\u3068\u3067\u3001\u4e2d\u9593\u306e\u5909\u6570\u304c\u306a\u304f\u306a\u308a\u3001\u30b3\u30fc\u30c9\u304c\u30b9\u30c3\u30ad\u30ea\u66f8\u3051\u307e\u3057\u305f\u3002\n\u5404\u30b9\u30c6\u30fc\u30b8\u306e\u500b\u3005\u306e\u30e2\u30c7\u30eb\u306e\u53c2\u7167\u3082\u53ef\u80fd\u306a\u306e\u3067\u3001Pipeline\u3092\u4f7f\u308f\u306a\u3044\u7406\u7531\u306f\u306a\u3055\u305d\u3046\u3067\u3059\u3002\n\n# \u5168\u30bd\u30fc\u30b9\n\n```py\n# -*- coding: utf-8 -*-\nfrom pyspark.sql import SparkSession\nfrom pyspark.ml.pipeline import Pipeline\nfrom pyspark.ml.feature import PCA, VectorAssembler, StandardScaler\n\n# Initialize SparkSession\nspark = (SparkSession\n         .builder\n         .appName(\"news\")\n         .enableHiveSupport()\n         .getOrCreate())\n\n# Read raw data\ndf = spark.read.csv('news.csv', header=True, inferSchema=True, mode=\"DROPMALFORMED\", encoding='UTF-8')\n\nprint(\"==== \u751f\u30c7\u30fc\u30bf ====\")\ndf.show(truncate=False)\n\n# pipeline\u306e\u90e8\u54c1\u3092\u7528\u610f\u3059\u308b\nassembler = VectorAssembler(inputCols=df.columns[1:], outputCol=\"\u5909\u91cf\")\nscaler = StandardScaler(inputCol=\"\u5909\u91cf\", outputCol=\"\u6a19\u6e96\u5316\u5909\u91cf\", withStd=True, withMean=True)\npca = PCA(k=3, inputCol=\"\u6a19\u6e96\u5316\u5909\u91cf\", outputCol=\"\u4e3b\u6210\u5206\u5f97\u70b9\")\n\npipeline = Pipeline(stages=[\n    assembler,\n    scaler,\n    pca\n])\n\n# \u30d1\u30a4\u30d7\u30e9\u30a4\u30f3\u3092\u5b9f\u884c\u3057\u3066\u5165\u529b\u30c7\u30fc\u30bf\u304b\u3089\u30e2\u30c7\u30eb\u3092\u4f5c\u308b\nmodel = pipeline.fit(df)\n\n# \u30e2\u30c7\u30eb\u3092\u5b9f\u884c\u3059\u308b\nresult = model.transform(df)\nresult.show(truncate=False)\n\n# Pipeline\u306e\u30b9\u30c6\u30fc\u30b8\u306f.stages\u3067\u53c2\u7167\u3067\u304d\u308b\nprint(\"==== \u56fa\u6709\u30d9\u30af\u30c8\u30eb ====\")\nprint(model.stages[2].pc)\n\nprint(\"==== \u5bc4\u4e0e\u7387 ====\")\nprint(model.stages[2].explainedVariance)\n```\n", "tags": ["Python", "MLlib", "\u6a5f\u68b0\u5b66\u7fd2", "Spark"]}