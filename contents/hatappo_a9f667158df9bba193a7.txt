{"context": "\u6b21\u306e\u51e6\u7406\u3092\u8272\u3093\u306a\u8a00\u8a9e1\u3067\u66f8\u3044\u3066\u307f\u305f\u30022\u8a00\u8a9e\u3054\u3068\u306b\u7279\u5fb4\u304c\u51fa\u3066\u3066\u9762\u767d\u304b\u3063\u305f\u3067\u3059\u3002\n\u300crange\u7684\u306a\u95a2\u6570\u3067\u4f5c\u3063\u305f1\u304b\u3089\u59cb\u307e\u308b\u6570\u5217\u3092\u3001join\u7684\u306a\u95a2\u6570\u3067,\u533a\u5207\u308a\u3067\u304f\u3063\u3064\u3051\u308b\u3002\u300d\n\n\u30b9\u30af\u30ea\u30d7\u30c8\u8a00\u8a9e\n\nperl\n# perl 5, version 18, subversion 2 (v5.18.2)\n\n# \u7d42\u7aef\u3092\u542b\u3080\nprint(join(\",\", (1..10)), \"\\n\")\n#=> 1,2,3,4,5,6,7,8,9,10\n\n\nphp\n# PHP 7.0.6\n\n# \u7d42\u7aef\u3092\u542b\u3080\necho join(\",\", range(1, 10)), \"\\n\";\n#=> 1,2,3,4,5,6,7,8,9,10\n\n\n\njoin\u95a2\u6570\u306fimplode\u95a2\u6570\u306e\u30a8\u30a4\u30ea\u30a2\u30b9\u306a\u306e\u3067\u3001implode(\",\", range(1, 10));\u3067\u3082OK\u3002\n\n\nruby\n# ruby 2.2.3\n\n# \u7d42\u7aef\u3092\u542b\u307e\u306a\u3044\nputs (1...10).map(&:to_s).join(\",\")\n#=> 1,2,3,4,5,6,7,8,9\n\n# \u7d42\u7aef\u3092\u542b\u3080\nputs (1..10).map(&:to_s).join(\",\")\n#=> 1,2,3,4,5,6,7,8,9,10\n\n\n\n..\u3068...\u304c\u3069\u3063\u3061\u304c\u3069\u3063\u3061\u304b\u3044\u3064\u3082\u4e0d\u5b89\u306b\u306a\u308b\u3002\n\n\npython\n# Python 3.5.1\n\n# \u7d42\u7aef\u3092\u542b\u307e\u306a\u3044\nprint(\",\".join(map(str, range(1, 10))))\n#=> 1,2,3,4,5,6,7,8,9\n\n\n2\u7cfb\u306e\u5834\u5408\u3001\u305d\u306e\u307e\u307e\u3060\u3068\u4e0a\u8a18\u306eprint\u95a2\u6570\u306f\u30a8\u30e9\u30fc\u306b\u306a\u308b\u3002 from __future__ import print_function\u3057\u3066\u304a\u3051\u3070\u52d5\u304f\u3002\n3\u7cfb\u306erange\u95a2\u6570\u306e\u5b9f\u88c5\u306f\u30012\u7cfb\u3060\u3068xrange\u95a2\u6570\u306e\u307b\u3046\u304c\u8fd1\u3044\u3089\u3057\u3044\u3002\u3053\u308c\u3089\u306f\u9045\u5ef6\u8a55\u4fa1\u3055\u308c\u308b\u304c\u30012\u7cfbrange\u95a2\u6570\u306f\u305d\u306e\u7bc4\u56f2\u306e\u5024\u3092\u5168\u3066\u6700\u521d\u306b\u30e1\u30e2\u30ea\u306b\u5c55\u958b\u3059\u308b\u3088\u3046\u3067\u3059\u3002\n\n\n\njavascript\n// node v6.2.1\n\ns1 = [...Array(10).keys()].map(n => n+1).join(',');\nconsole.log(s1);\n//=> 1,2,3,4,5,6,7,8,9,10\n\ns2 = Array.from(Array(10).keys()).map(n => n+1).join(',')\nconsole.log(s2);\n//=> 1,2,3,4,5,6,7,8,9,10\n\n// \u7d42\u7aef\u3092\u542b\u307e\u306a\u3044 by Underscore.js\ns3 = _.range(1, 10).join(',');\nconsole.log(s3);\n//=> 1,2,3,4,5,6,7,8,9\n\n// \u7d42\u7aef\u3092\u542b\u307e\u306a\u3044 by immutable-js\ns4 = Immutable.Range(1, 10).toArray().join(',');\nconsole.log(s4);\n//=> 1,2,3,4,5,6,7,8,9\n\n\n\u7d20\u306eJS\u30671\u304b\u3089\u59cb\u307e\u308brange\u3092\u76f4\u63a5\u53d6\u5f97\u3059\u308b\u65b9\u6cd5\u304c\u5206\u304b\u3089\u306a\u304b\u3063\u305f\u3002\u3002\n\n\nJVM\u8a00\u8a9e\n\njava\npackage jp.sample;\n\nimport java.util.stream.IntStream;\nimport java.util.stream.Collectors;\n\npublic class Main {\n    public static void main(String[] args) throws Exception {\n        // \u7d42\u7aef\u3092\u542b\u307e\u306a\u3044\n        String s1 = String.join(\",\", IntStream.range(1, 10).boxed().map(n -> n.toString()).collect(Collectors.toList()));\n        System.out.println(s1);\n        //=> 1,2,3,4,5,6,7,8,9\n\n        // \u7d42\u7aef\u3092\u542b\u3080\n        String s2 = String.join(\",\", IntStream.rangeClosed(1, 10).boxed().map(n -> n.toString()).collect(Collectors.toList()));\n        System.out.println(s2);\n        //=> 1,2,3,4,5,6,7,8,9,10\n    }\n}\n\n\nscala\n// Scala 2.10.6\n\n// \u7d42\u7aef\u3092\u542b\u307e\u306a\u3044 (1)\nprintln(Range(1, 10).mkString(\",\"))\n//=> 1,2,3,4,5,6,7,8,9\n\n// \u7d42\u7aef\u3092\u542b\u307e\u306a\u3044 (2)\nprintln((1 until 10).mkString(\",\"))\n//=> 1,2,3,4,5,6,7,8,9\n\n// \u7d42\u7aef\u3092\u542b\u3080\nprintln((1 to 10).mkString(\",\"))\n//=> 1,2,3,4,5,6,7,8,9,10\n\n\nclojure\n; Clojure 1.8.0\n\n(require '[clojure.string :refer [join]])\n\n; \u7d42\u7aef\u3092\u542b\u307e\u306a\u3044 (1)\n(println (join \\, (range 1 10)))\n;=> 1,2,3,4,5,6,7,8,9\n\n; \u7d42\u7aef\u3092\u542b\u307e\u306a\u3044 (2) \u30b9\u30ec\u30c3\u30c7\u30a3\u30f3\u30b0\u30de\u30af\u30ed\n(->> 10 (range 1) (join \\,) println)\n;=> 1,2,3,4,5,6,7,8,9\n\n\nCLR\u8a00\u8a9e\n\nc-sharp\n// mono-3.2.8.0 (C#5, CLI4.5)\n\npublic class Hello{\n    public static void Main(){\n        // \u7d42\u7aef\u3092\u542b\u3080\n        System.Console.WriteLine(string.Join(\",\", System.Linq.Enumerable.Range(1, 10)));\n        //=> 1,2,3,4,5,6,7,8,9,10\n    }\n}\n\n\nf-sharp\n// F# 3.0 (Open Source Edition) / mono-3.2.8.0\n\n// \u7d42\u7aef\u3092\u542b\u3080\nSystem.Console.WriteLine([1..10] |> List.map (fun n -> n.ToString()) |> String.concat \",\")\n//=> 1,2,3,4,5,6,7,8,9,10\n\n\n\u30b7\u30b9\u30c6\u30e0\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u8a00\u8a9e\n\nrust\n// rustc 1.8.0\n\nfn main() {\n    // \u7d42\u7aef\u3092\u542b\u307e\u306a\u3044\n    let s: String = (1..10).map(|n| n.to_string()).collect::<Vec<String>>().join(\",\");\n    println!(\"{}\", s)\n    //=> 1,2,3,4,5,6,7,8,9\n}\n\n\ngo\n// go 1.4.2\n\npackage main\nimport (\n    \"fmt\"\n    \"strings\"\n    \"strconv\"\n)\n\nfunc main(){\n    var a []string = make([]string, 10)\n    for i := 0; i < 10; i++ {\n        a[i] = strconv.Itoa(i+1)\n    }\n    fmt.Println(strings.Join(a, \",\"))\n    //=> 1,2,3,4,5,6,7,8,9,10\n}\n\n\nrange\u3092\u76f4\u63a5\u4f5c\u308b\u65b9\u6cd5\u306f\u898b\u3064\u3051\u3089\u308c\u306a\u304b\u3063\u305f\u3002\u3002\n\n\n\u305d\u306e\u4ed6\n\nswift\n// Swift version 2.2\n\n// \u7d42\u7aef\u3092\u542b\u307e\u306a\u3044\nprint((1..<10).map { n in String(n) }.joinWithSeparator(\",\"))\n//=> 1,2,3,4,5,6,7,8,9\n\n// \u7d42\u7aef\u3092\u542b\u3080\nprint((1...10).map { n in String(n) }.joinWithSeparator(\",\"))\n//=> 1,2,3,4,5,6,7,8,9,10\n\n\nhaskell\n-- GHCi, version 7.10.3\n\n-- \u7d42\u7aef\u3092\u542b\u307e\u306a\u3044 (1) \nputStrLn (intercalate \",\" (map (\\n -> show n) [1..10]))\n-- => 1,2,3,4,5,6,7,8,9\n\n-- \u7d42\u7aef\u3092\u542b\u307e\u306a\u3044 (2) \u30ea\u30b9\u30c8\u5185\u5305\nputStrLn (intercalate \",\" [show n | n <- [1..10]])\n-- => 1,2,3,4,5,6,7,8,9\n\n\nshell\n# zsh version 5.0.8\n\n# \u7d42\u7aef\u3092\u542b\u3080\na=`seq -s\",\" 1 10` && echo ${a%,}\n#=> 1,2,3,4,5,6,7,8,9,10\n\n\n\u5909\u6570a\u3092\u4f7f\u3063\u3066\u3044\u308b\u306e\u3067\u3001\u306a\u3093\u3068\u306a\u304f\u4ed6\u3068\u3084\u308a\u65b9\u304c\u9055\u3046\u611f\u3058\u304c\u3042\u308b\u304c\u3001\u81ea\u5206\u306b\u306f\u3053\u3053\u307e\u3067\u3057\u304b\u5206\u304b\u3089\u306a\u304b\u3063\u305f\u3002\nshell\u306f\u307e\u3060\u307e\u3060\u3084\u308a\u65b9\u304c\u305f\u304f\u3055\u3093\u3042\u308a\u305d\u3046\u3002\n\n\n\u307e\u3068\u3081\n\u30e1\u30bd\u30c3\u30c9\u3092\u30c1\u30a7\u30fc\u30f3\u3057\u3066\u66f8\u3051\u308b\u8a00\u8a9e\u306f\u3069\u308c\u3082\u3060\u3044\u305f\u3044\u540c\u3058\u611f\u3058\u306b\u306a\u3063\u305f\u3002\nrange\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u307f\u305f\u3044\u306a\u306e\u3092\u76f4\u63a5\u4f5c\u308c\u308b\u8a00\u8a9e\u306e\u5834\u5408\u3001\u8981\u7d20\u306e\u578b\u304c\u3060\u3044\u305f\u3044\u6570\u5024\u306b\u306a\u308b\u3068\u601d\u3046\u3051\u3069\u3001\u305d\u308c\u3092\u6587\u5b57\u5217\u306b\u5909\u63db\uff08map\uff09\u3059\u308b\u4e00\u624b\u9593\u304c\u3042\u308b\u8a00\u8a9e\u3068\u306a\u3044\u8a00\u8a9e\u3068\u3002\u5f37\u3044\u578b\u4ed8\u3051/\u5f31\u3044\u578b\u4ed8\u3051\u306e\u9055\u3044\u4ee5\u5916\u306bjoin\u7684\u95a2\u6570\u304c\u5185\u90e8\u3067toString()\u7684\u51e6\u7406\u3092\u3059\u308b\u3088\u3046\u306b\u5b9f\u88c5\u3057\u3066\u308b\u304b\u3069\u3046\u304b\u306e\u9055\u3044\u3082\u95a2\u308f\u3063\u3066\u304f\u308b\u3002\n..\u3068\u304b...\u3067\u4f5c\u3089\u308c\u308brange\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306b\u7d42\u7aef\u306e\u6570\u5024\u304c\u542b\u307e\u308c\u308b\u304b\u3069\u3046\u304b\u304c\u3001\u8a00\u8a9e\u306b\u3088\u3063\u3066\u307e\u3061\u307e\u3061\u3002\u899a\u3048\u308b\u306e\u306e\u8ae6\u3081\u304c\u3064\u3044\u305f\u3002\nScala\u306emkString\u306f\u5404\u8a00\u8a9e\u306ejoin\u7684\u95a2\u6570\u306e\u4e0a\u4f4d\u4e92\u63db\u3060\u3068\u601d\u3046\u3002\u3068\u3066\u3082\u4fbf\u5229\u3002\n\n\u53c2\u8003\n\nperl\n\n\nhttp://7ujm.net/Perl/perl.html\n\n\njavascript\n\n\nJavascript\u3067Ruby\u306eRange#to_a\u306e\u3088\u3046\u306a\u914d\u5217\u3092\u8fd4\u3059\u65b9\u6cd5 - rochefort's blog\n\n\npython\n\n\nPython: range \u3068 xrange | CUBE SUGAR STORAGE\n\n\nscala\n\n\nScala\u306e\u30b3\u30ec\u30af\u30b7\u30e7\u30f3\u3068\u304b\u306b\u3064\u3044\u3066 - Qiita\n\n\ngo\n\n\ngo - is there a way to iterate over a range of integers in golang? - Stack Overflow\n\u6025\u3044\u3067\u5b66\u3076Go lang#7 range\u30fbArray\u30fbslice\u30fbmap \uff5c Developers.IO\nGolang\u3067\u306e\u6587\u5b57\u5217\u30fb\u6570\u5024\u5909\u63db - \u5c0f\u91ce\u30de\u30c8\u30da\u306e\u7d0d\u8c46\u30da\u30da\u30ed\u30f3\u30c1\u30fc\u30ce\u65e5\u8a18\nstrings - The Go Programming Language\n\n\nc++\n\n\nIs there a compact equivalent to Python range() in C++/STL - Stack Overflow\nhttp://kaworu.jpn.org/cpp/std::iota\n\n\nswift\n\n\nSwift\u3067\u914d\u5217\u3092join(\u7d50\u5408)\u3057\u3066\u6587\u5b57\u5217\u306b\u3059\u308b\u65b9\u6cd5 | Swift2.2 Web\u5165\u9580\u66f8\nSwift\u306eRange\u306f\u914d\u5217\u3067\u306f\u306a\u3044 - Qiita\n\n\nc#\n\n\n\u3044\u308d\u3044\u308d\u306a\u65b9\u6cd5\u30671\u304b\u3089100\u307e\u3067\u3092\u51fa\u529b\u3059\u308b - Qiita\n\u3010C#/LINQ\u3011LINQ\u306e\u5b66\u7fd2\u3000\u305d\u306e(4) 9\u00d79\u8868\u3092\u4e00\u884c\u3067\u51fa\u529b\u3059\u308b \u2013 \u30b6\u30ef\u30d7\u30ed\uff01\nC# - \u914d\u5217\u3092\u7d50\u5408\u3057\u3066\u6587\u5b57\u5217\u306b\u3059\u308b\n\n\nf#\n\n\nRanges A to B where A > B in F# - Stack Overflow\nf# interactive - F#: String.Join and |> operator - Stack Overflow\nF#\u306e\u6587\u5b57\u5217\u64cd\u4f5c\u95a2\u6570\u3092\u8abf\u3079\u3066\u307f\u305f - komorebikoboshi\u306e\u30d6\u30ed\u30b0\nhttp://stackoverflow.com/questions/12202626/int-and-string-f\n\n\n\n\n\n\n\n\u81ea\u5206\u304c\u89e6\u3063\u305f\u3053\u3068\u304c\u3042\u308b\u8a00\u8a9e\u3060\u3051\u306a\u306e\u3067\u3001\u305d\u3093\u306a\u306b\u591a\u304f\u306f\u306a\u3044\u3067\u3059\u3002\u00a0\u21a9\n\n\n\u3082\u3068\u306fJava8\u3067range\u304c\u4f5c\u308c\u308b\u306e\u304b\u8abf\u3079\u3066\u3044\u3066\u8131\u7dda\u3057\u305f\u3002\u00a0\u21a9\n\n\n\n\n\u6b21\u306e\u51e6\u7406\u3092\u8272\u3093\u306a\u8a00\u8a9e[^1]\u3067\u66f8\u3044\u3066\u307f\u305f\u3002[^2]\u8a00\u8a9e\u3054\u3068\u306b\u7279\u5fb4\u304c\u51fa\u3066\u3066\u9762\u767d\u304b\u3063\u305f\u3067\u3059\u3002\n\n[^1]: \u81ea\u5206\u304c\u89e6\u3063\u305f\u3053\u3068\u304c\u3042\u308b\u8a00\u8a9e\u3060\u3051\u306a\u306e\u3067\u3001\u305d\u3093\u306a\u306b\u591a\u304f\u306f\u306a\u3044\u3067\u3059\u3002\n\n[^2]: \u3082\u3068\u306fJava8\u3067range\u304c\u4f5c\u308c\u308b\u306e\u304b\u8abf\u3079\u3066\u3044\u3066\u8131\u7dda\u3057\u305f\u3002\n\n\u300crange\u7684\u306a\u95a2\u6570\u3067\u4f5c\u3063\u305f`1`\u304b\u3089\u59cb\u307e\u308b\u6570\u5217\u3092\u3001join\u7684\u306a\u95a2\u6570\u3067`,`\u533a\u5207\u308a\u3067\u304f\u3063\u3064\u3051\u308b\u3002\u300d\n\n\n\n\n### \u30b9\u30af\u30ea\u30d7\u30c8\u8a00\u8a9e\n\n#### perl\n\n```perl\n# perl 5, version 18, subversion 2 (v5.18.2)\n\n# \u7d42\u7aef\u3092\u542b\u3080\nprint(join(\",\", (1..10)), \"\\n\")\n#=> 1,2,3,4,5,6,7,8,9,10\n```\n\n#### php\n\n```php\n# PHP 7.0.6\n\n# \u7d42\u7aef\u3092\u542b\u3080\necho join(\",\", range(1, 10)), \"\\n\";\n#=> 1,2,3,4,5,6,7,8,9,10\n```\n\n* `join`\u95a2\u6570\u306f`implode`\u95a2\u6570\u306e\u30a8\u30a4\u30ea\u30a2\u30b9\u306a\u306e\u3067\u3001`implode(\",\", range(1, 10));`\u3067\u3082OK\u3002\n\n#### ruby\n\n```ruby\n# ruby 2.2.3\n\n# \u7d42\u7aef\u3092\u542b\u307e\u306a\u3044\nputs (1...10).map(&:to_s).join(\",\")\n#=> 1,2,3,4,5,6,7,8,9\n\n# \u7d42\u7aef\u3092\u542b\u3080\nputs (1..10).map(&:to_s).join(\",\")\n#=> 1,2,3,4,5,6,7,8,9,10\n```\n\n* `..`\u3068`...`\u304c\u3069\u3063\u3061\u304c\u3069\u3063\u3061\u304b\u3044\u3064\u3082\u4e0d\u5b89\u306b\u306a\u308b\u3002\n\n#### python\n\n```python\n# Python 3.5.1\n\n# \u7d42\u7aef\u3092\u542b\u307e\u306a\u3044\nprint(\",\".join(map(str, range(1, 10))))\n#=> 1,2,3,4,5,6,7,8,9\n```\n\n* 2\u7cfb\u306e\u5834\u5408\u3001\u305d\u306e\u307e\u307e\u3060\u3068\u4e0a\u8a18\u306e`print`\u95a2\u6570\u306f\u30a8\u30e9\u30fc\u306b\u306a\u308b\u3002 `from __future__ import print_function`\u3057\u3066\u304a\u3051\u3070\u52d5\u304f\u3002\n* 3\u7cfb\u306e`range`\u95a2\u6570\u306e\u5b9f\u88c5\u306f\u30012\u7cfb\u3060\u3068`xrange`\u95a2\u6570\u306e\u307b\u3046\u304c\u8fd1\u3044\u3089\u3057\u3044\u3002\u3053\u308c\u3089\u306f\u9045\u5ef6\u8a55\u4fa1\u3055\u308c\u308b\u304c\u30012\u7cfb`range`\u95a2\u6570\u306f\u305d\u306e\u7bc4\u56f2\u306e\u5024\u3092\u5168\u3066\u6700\u521d\u306b\u30e1\u30e2\u30ea\u306b\u5c55\u958b\u3059\u308b\u3088\u3046\u3067\u3059\u3002  \n\n#### javascript\n\n```javascript\n// node v6.2.1\n\ns1 = [...Array(10).keys()].map(n => n+1).join(',');\nconsole.log(s1);\n//=> 1,2,3,4,5,6,7,8,9,10\n\ns2 = Array.from(Array(10).keys()).map(n => n+1).join(',')\nconsole.log(s2);\n//=> 1,2,3,4,5,6,7,8,9,10\n\n// \u7d42\u7aef\u3092\u542b\u307e\u306a\u3044 by Underscore.js\ns3 = _.range(1, 10).join(',');\nconsole.log(s3);\n//=> 1,2,3,4,5,6,7,8,9\n\n// \u7d42\u7aef\u3092\u542b\u307e\u306a\u3044 by immutable-js\ns4 = Immutable.Range(1, 10).toArray().join(',');\nconsole.log(s4);\n//=> 1,2,3,4,5,6,7,8,9\n```\n\n* \u7d20\u306eJS\u3067`1`\u304b\u3089\u59cb\u307e\u308brange\u3092\u76f4\u63a5\u53d6\u5f97\u3059\u308b\u65b9\u6cd5\u304c\u5206\u304b\u3089\u306a\u304b\u3063\u305f\u3002\u3002\n\n\n\n\n### JVM\u8a00\u8a9e\n\n#### java\n\n```java\npackage jp.sample;\n\nimport java.util.stream.IntStream;\nimport java.util.stream.Collectors;\n\npublic class Main {\n    public static void main(String[] args) throws Exception {\n        // \u7d42\u7aef\u3092\u542b\u307e\u306a\u3044\n        String s1 = String.join(\",\", IntStream.range(1, 10).boxed().map(n -> n.toString()).collect(Collectors.toList()));\n        System.out.println(s1);\n        //=> 1,2,3,4,5,6,7,8,9\n\n        // \u7d42\u7aef\u3092\u542b\u3080\n        String s2 = String.join(\",\", IntStream.rangeClosed(1, 10).boxed().map(n -> n.toString()).collect(Collectors.toList()));\n        System.out.println(s2);\n        //=> 1,2,3,4,5,6,7,8,9,10\n    }\n}\n```\n\n\n#### scala\n\n```scala\n// Scala 2.10.6\n\n// \u7d42\u7aef\u3092\u542b\u307e\u306a\u3044 (1)\nprintln(Range(1, 10).mkString(\",\"))\n//=> 1,2,3,4,5,6,7,8,9\n\n// \u7d42\u7aef\u3092\u542b\u307e\u306a\u3044 (2)\nprintln((1 until 10).mkString(\",\"))\n//=> 1,2,3,4,5,6,7,8,9\n\n// \u7d42\u7aef\u3092\u542b\u3080\nprintln((1 to 10).mkString(\",\"))\n//=> 1,2,3,4,5,6,7,8,9,10\n```\n\n#### clojure\n\n```clojure\n; Clojure 1.8.0\n\n(require '[clojure.string :refer [join]])\n\n; \u7d42\u7aef\u3092\u542b\u307e\u306a\u3044 (1)\n(println (join \\, (range 1 10)))\n;=> 1,2,3,4,5,6,7,8,9\n\n; \u7d42\u7aef\u3092\u542b\u307e\u306a\u3044 (2) \u30b9\u30ec\u30c3\u30c7\u30a3\u30f3\u30b0\u30de\u30af\u30ed\n(->> 10 (range 1) (join \\,) println)\n;=> 1,2,3,4,5,6,7,8,9\n```\n\n\n### CLR\u8a00\u8a9e\n\n#### c-sharp\n\n```csharp\n// mono-3.2.8.0 (C#5, CLI4.5)\n\npublic class Hello{\n    public static void Main(){\n        // \u7d42\u7aef\u3092\u542b\u3080\n        System.Console.WriteLine(string.Join(\",\", System.Linq.Enumerable.Range(1, 10)));\n        //=> 1,2,3,4,5,6,7,8,9,10\n    }\n}\n```\n\n#### f-sharp\n\n```fsharp\n// F# 3.0 (Open Source Edition) / mono-3.2.8.0\n\n// \u7d42\u7aef\u3092\u542b\u3080\nSystem.Console.WriteLine([1..10] |> List.map (fun n -> n.ToString()) |> String.concat \",\")\n//=> 1,2,3,4,5,6,7,8,9,10\n```\n\n\n### \u30b7\u30b9\u30c6\u30e0\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u8a00\u8a9e\n\n#### rust\n\n```rust\n// rustc 1.8.0\n\nfn main() {\n    // \u7d42\u7aef\u3092\u542b\u307e\u306a\u3044\n    let s: String = (1..10).map(|n| n.to_string()).collect::<Vec<String>>().join(\",\");\n    println!(\"{}\", s)\n    //=> 1,2,3,4,5,6,7,8,9\n}\n```\n\n#### go\n\n```go\n// go 1.4.2\n\npackage main\nimport (\n    \"fmt\"\n    \"strings\"\n    \"strconv\"\n)\n\nfunc main(){\n    var a []string = make([]string, 10)\n    for i := 0; i < 10; i++ {\n        a[i] = strconv.Itoa(i+1)\n    }\n    fmt.Println(strings.Join(a, \",\"))\n    //=> 1,2,3,4,5,6,7,8,9,10\n}\n```\n\n* range\u3092\u76f4\u63a5\u4f5c\u308b\u65b9\u6cd5\u306f\u898b\u3064\u3051\u3089\u308c\u306a\u304b\u3063\u305f\u3002\u3002\n\n### \u305d\u306e\u4ed6\n\n#### swift\n\n```swift\n// Swift version 2.2\n\n// \u7d42\u7aef\u3092\u542b\u307e\u306a\u3044\nprint((1..<10).map { n in String(n) }.joinWithSeparator(\",\"))\n//=> 1,2,3,4,5,6,7,8,9\n\n// \u7d42\u7aef\u3092\u542b\u3080\nprint((1...10).map { n in String(n) }.joinWithSeparator(\",\"))\n//=> 1,2,3,4,5,6,7,8,9,10\n```\n\n#### haskell\n\n```haskell\n-- GHCi, version 7.10.3\n\n-- \u7d42\u7aef\u3092\u542b\u307e\u306a\u3044 (1) \nputStrLn (intercalate \",\" (map (\\n -> show n) [1..10]))\n-- => 1,2,3,4,5,6,7,8,9\n\n-- \u7d42\u7aef\u3092\u542b\u307e\u306a\u3044 (2) \u30ea\u30b9\u30c8\u5185\u5305\nputStrLn (intercalate \",\" [show n | n <- [1..10]])\n-- => 1,2,3,4,5,6,7,8,9\n```\n\n#### shell\n\n```sh\n# zsh version 5.0.8\n\n# \u7d42\u7aef\u3092\u542b\u3080\na=`seq -s\",\" 1 10` && echo ${a%,}\n#=> 1,2,3,4,5,6,7,8,9,10\n```\n\n* \u5909\u6570`a`\u3092\u4f7f\u3063\u3066\u3044\u308b\u306e\u3067\u3001\u306a\u3093\u3068\u306a\u304f\u4ed6\u3068\u3084\u308a\u65b9\u304c\u9055\u3046\u611f\u3058\u304c\u3042\u308b\u304c\u3001\u81ea\u5206\u306b\u306f\u3053\u3053\u307e\u3067\u3057\u304b\u5206\u304b\u3089\u306a\u304b\u3063\u305f\u3002\n* shell\u306f\u307e\u3060\u307e\u3060\u3084\u308a\u65b9\u304c\u305f\u304f\u3055\u3093\u3042\u308a\u305d\u3046\u3002\n\n\n\n\n## \u307e\u3068\u3081\n\n\u30e1\u30bd\u30c3\u30c9\u3092\u30c1\u30a7\u30fc\u30f3\u3057\u3066\u66f8\u3051\u308b\u8a00\u8a9e\u306f\u3069\u308c\u3082\u3060\u3044\u305f\u3044\u540c\u3058\u611f\u3058\u306b\u306a\u3063\u305f\u3002\n\nrange\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u307f\u305f\u3044\u306a\u306e\u3092\u76f4\u63a5\u4f5c\u308c\u308b\u8a00\u8a9e\u306e\u5834\u5408\u3001\u8981\u7d20\u306e\u578b\u304c\u3060\u3044\u305f\u3044\u6570\u5024\u306b\u306a\u308b\u3068\u601d\u3046\u3051\u3069\u3001\u305d\u308c\u3092\u6587\u5b57\u5217\u306b\u5909\u63db\uff08map\uff09\u3059\u308b\u4e00\u624b\u9593\u304c\u3042\u308b\u8a00\u8a9e\u3068\u306a\u3044\u8a00\u8a9e\u3068\u3002\u5f37\u3044\u578b\u4ed8\u3051/\u5f31\u3044\u578b\u4ed8\u3051\u306e\u9055\u3044\u4ee5\u5916\u306b`join`\u7684\u95a2\u6570\u304c\u5185\u90e8\u3067`toString()`\u7684\u51e6\u7406\u3092\u3059\u308b\u3088\u3046\u306b\u5b9f\u88c5\u3057\u3066\u308b\u304b\u3069\u3046\u304b\u306e\u9055\u3044\u3082\u95a2\u308f\u3063\u3066\u304f\u308b\u3002\n\n`..`\u3068\u304b`...`\u3067\u4f5c\u3089\u308c\u308brange\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306b\u7d42\u7aef\u306e\u6570\u5024\u304c\u542b\u307e\u308c\u308b\u304b\u3069\u3046\u304b\u304c\u3001\u8a00\u8a9e\u306b\u3088\u3063\u3066\u307e\u3061\u307e\u3061\u3002\u899a\u3048\u308b\u306e\u306e\u8ae6\u3081\u304c\u3064\u3044\u305f\u3002\n\nScala\u306e`mkString`\u306f\u5404\u8a00\u8a9e\u306e`join`\u7684\u95a2\u6570\u306e\u4e0a\u4f4d\u4e92\u63db\u3060\u3068\u601d\u3046\u3002\u3068\u3066\u3082\u4fbf\u5229\u3002\n\n\n\n## \u53c2\u8003\n\n* perl\n    * [http://7ujm.net/Perl/perl.html](http://7ujm.net/Perl/perl.html)\n* javascript\n    * [Javascript\u3067Ruby\u306eRange#to_a\u306e\u3088\u3046\u306a\u914d\u5217\u3092\u8fd4\u3059\u65b9\u6cd5 - rochefort's blog](http://rochefort.hatenablog.com/entry/2015/01/08/005043)\n* python\n    * [Python: range \u3068 xrange | CUBE SUGAR STORAGE](http://momijiame.tumblr.com/post/53841042855/python-range-%E3%81%A8-xrange)\n* scala\n    * [Scala\u306e\u30b3\u30ec\u30af\u30b7\u30e7\u30f3\u3068\u304b\u306b\u3064\u3044\u3066 - Qiita](http://qiita.com/544/items/f36c018d0568156d09cb#2-2)\n* go\n    * [go - is there a way to iterate over a range of integers in golang? - Stack Overflow](http://stackoverflow.com/questions/21950244/is-there-a-way-to-iterate-over-a-range-of-integers-in-golang)\n    * [\u6025\u3044\u3067\u5b66\u3076Go lang#7 range\u30fbArray\u30fbslice\u30fbmap \uff5c Developers.IO](http://dev.classmethod.jp/go/golang-7/)\n    * [Golang\u3067\u306e\u6587\u5b57\u5217\u30fb\u6570\u5024\u5909\u63db - \u5c0f\u91ce\u30de\u30c8\u30da\u306e\u7d0d\u8c46\u30da\u30da\u30ed\u30f3\u30c1\u30fc\u30ce\u65e5\u8a18](http://matope.hatenablog.com/entry/2014/04/22/101127)\n    * [strings - The Go Programming Language](https://golang.org/pkg/strings/#Join)\n* c++\n    * [Is there a compact equivalent to Python range() in C++/STL - Stack Overflow](http://stackoverflow.com/questions/13152252/is-there-a-compact-equivalent-to-python-range-in-c-stl)\n    * [http://kaworu.jpn.org/cpp/std::iota](http://kaworu.jpn.org/cpp/std::iota)\n* swift\n    * [Swift\u3067\u914d\u5217\u3092join(\u7d50\u5408)\u3057\u3066\u6587\u5b57\u5217\u306b\u3059\u308b\u65b9\u6cd5 | Swift2.2 Web\u5165\u9580\u66f8](http://swift.tecc0.com/?p=160)\n    * [Swift\u306eRange\u306f\u914d\u5217\u3067\u306f\u306a\u3044 - Qiita](http://qiita.com/karupanerura/items/425b00839c1c358c2d7a)\n* c#\n    * [\u3044\u308d\u3044\u308d\u306a\u65b9\u6cd5\u30671\u304b\u3089100\u307e\u3067\u3092\u51fa\u529b\u3059\u308b - Qiita](http://qiita.com/muro/items/330c6c5a059436bb497b)\n    * [\u3010C#/LINQ\u3011LINQ\u306e\u5b66\u7fd2\u3000\u305d\u306e(4) 9\u00d79\u8868\u3092\u4e00\u884c\u3067\u51fa\u529b\u3059\u308b \u2013 \u30b6\u30ef\u30d7\u30ed\uff01](http://zawapro.com/?p=1285)\n    * [C# - \u914d\u5217\u3092\u7d50\u5408\u3057\u3066\u6587\u5b57\u5217\u306b\u3059\u308b](http://jeanne.wankuma.com/tips/csharp/string/join.html)\n* f#\n    * [Ranges A to B where A > B in F# - Stack Overflow](http://stackoverflow.com/questions/878721/ranges-a-to-b-where-a-b-in-f)\n    * [f# interactive - F#: String.Join and |> operator - Stack Overflow](http://stackoverflow.com/questions/4278531/f-string-join-and-operator)\n    * [F#\u306e\u6587\u5b57\u5217\u64cd\u4f5c\u95a2\u6570\u3092\u8abf\u3079\u3066\u307f\u305f - komorebikoboshi\u306e\u30d6\u30ed\u30b0](http://komorebikoboshi.hatenablog.com/entry/2013/04/09/233613)\n    * [http://stackoverflow.com/questions/12202626/int-and-string-f](Int and String F# - Stack Overflow)\n\n", "tags": ["join", "Range", "java8"]}