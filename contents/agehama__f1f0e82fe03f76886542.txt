{"tags": ["C++", "Siv3D", "photoshop", "effect"], "context": " \u3053\u306e\u8a18\u4e8b\u306f\u6700\u7d42\u66f4\u65b0\u65e5\u304b\u30891\u5e74\u4ee5\u4e0a\u304c\u7d4c\u904e\u3057\u3066\u3044\u307e\u3059\u3002\u3053\u3061\u3089\u306f\u3001Siv3D Advent Calendar 2015 \u306e\uff11\uff17\u65e5\u76ee\u306e\u8a18\u4e8b\u3067\u3059\u3002\n\u30b2\u30fc\u30e0\u5236\u4f5c\u306a\u3069\u3067Photoshop\u306b\u304a\u4e16\u8a71\u306b\u306a\u3063\u3066\u3044\u308b\u3068\u3044\u3046\u65b9\u3082\u591a\u3044\u3068\u601d\u3044\u307e\u3059\u304c\u3001Photoshop\u306b\u306f\u30ec\u30a4\u30e4\u30fc\u30b9\u30bf\u30a4\u30eb\u3068\u3044\u3046\u753b\u50cf\u306b\u3044\u308d\u3044\u308d\u306a\u30a8\u30d5\u30a7\u30af\u30c8\u3092\u4ed8\u3051\u3089\u308c\u308b\u6a5f\u80fd\u304c\u3042\u308a\u307e\u3059\u3002\n\n\u3053\u306e\u30a8\u30d5\u30a7\u30af\u30c8\u3092\u30d7\u30ed\u30b0\u30e9\u30e0\u306e\u4e2d\u3067\u6271\u3048\u305f\u3089\u9762\u767d\u3044\u3068\u601d\u3063\u305f\u306e\u3067\u4e00\u90e8\u5206\u3060\u3051\u5b9f\u88c5\u3057\u3066\u307f\u307e\u3057\u305f\u3002\n\n\u4f5c\u3063\u305f\u3082\u306e\n\n\u3079\u30d9\u30eb\n\n\u3079\u30d9\u30eb\u306f\u3001\u5404\u30d4\u30af\u30bb\u30eb\u304b\u3089\u6700\u3082\u8fd1\u3044\u900f\u660e\u30d4\u30af\u30bb\u30eb\u307e\u3067\u306e\u8ddd\u96e2\u3092\u8a08\u7b97\u3057\u305f\u5f8c\u3001\u305d\u306e\u8ddd\u96e2\u306b\u5fdc\u3058\u3066\u9ad8\u3055\u3092\u8a2d\u5b9a\u3057\u3001\u9ad8\u3055\u3068\u30de\u30a6\u30b9\u306e\u4f4d\u7f6e\u304b\u3089\u30e9\u30a4\u30c6\u30a3\u30f3\u30b0\u3092\u8a08\u7b97\u3057\u307e\u3057\u305f\u3002\u3042\u3068\u4f55\u304b\u77f3\u3063\u307d\u3044\u8cea\u611f\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u304c\u3001\u3053\u308c\u306f\u5225\u306b\u305d\u3046\u3057\u305f\u308f\u3051\u3067\u306f\u306a\u304f\u3066\u900f\u660e\u30d4\u30af\u30bb\u30eb\u307e\u3067\u306e\u8ddd\u96e2\u8a08\u7b97\u306e\u7cbe\u5ea6\u304c\u60aa\u3044\u3060\u3051\u3067\u3059\u3002\n\n\u5149\u5f69\uff08\u5185\u5074\uff09\n\n\u3079\u30d9\u30eb\u3068\u307b\u3068\u3093\u3069\u540c\u3058\u3067\u3059\u3002\u900f\u660e\u30d4\u30af\u30bb\u30eb\u304b\u3089\u306e\u8ddd\u96e2\u306b\u5fdc\u3058\u3066\u8272\u3092\u305d\u306e\u307e\u307e\u52a0\u7b97\u3057\u307e\u3057\u305f\u3002\n\n\u7d44\u307f\u5408\u308f\u305b\u308b\u3068\u3053\u3093\u306a\u611f\u3058\n\n\u3061\u306a\u307f\u306b\u81ea\u5206\u306e\u30ce\u30fc\u30c8PC\u3060\u3068\u9045\u3059\u304e\u3066\u307b\u3068\u3093\u3069\u52d5\u304b\u306a\u304b\u3063\u305f\u306e\u3067\u3001\u30b2\u30fc\u30e0\u306b\u7d44\u307f\u8fbc\u3080\u306b\u306f\u307e\u3060\u3044\u308d\u3044\u308d\u6539\u5584\u304c\u5fc5\u8981\u305d\u3046\u3067\u3059\u3002\n\n\u5b9f\u88c5\n\u5404\u30d4\u30af\u30bb\u30eb\u304b\u3089\u900f\u660e\u30d4\u30af\u30bb\u30eb\u307e\u3067\u306e\u8ddd\u96e2\u304c\u5206\u304b\u308c\u30709\u5272\u5b8c\u6210\u3057\u305f\u3088\u3046\u306a\u3082\u306e\u306a\u306e\u3067\u3001\u3053\u306e\u8a08\u7b97\u304c\u4e00\u756a\u5927\u4e8b\u3067\u3059\u3002\n\u6700\u3082\u7c21\u5358\u306a\u65b9\u6cd5\u306f\u5404\u30d4\u30af\u30bb\u30eb\u304b\u30891\u3064\u305a\u3064\u96a3\u63a5\u30d4\u30af\u30bb\u30eb\u3092\u898b\u3066\u3044\u304f\u65b9\u6cd5\u3067\u3059\u304c\u3001\u3053\u308c\u3060\u3068\u591a\u5206\u9045\u3044\u306e\u3067\u4eca\u56de\u30df\u30c3\u30d7\u30de\u30c3\u30d7\u3092\u4f7f\u3063\u305f\u5b9f\u88c5\u3092\u8a66\u3057\u3066\u307f\u307e\u3057\u305f\u3002\n\u5927\u304d\u3044\u30df\u30c3\u30d7\u30ec\u30d9\u30eb\u306e1\u30d4\u30af\u30bb\u30eb\u306e\u8272\u306f\u3001\u5c0f\u3055\u3044\u30df\u30c3\u30d7\u30ec\u30d9\u30eb\u306e\u305d\u308c\u305e\u308c\u306e\u30d4\u30af\u30bb\u30eb\u306e\u8272\u306e\u5e73\u5747\u306b\u306a\u3063\u3066\u3044\u308b\u306e\u3067\u3001\u5927\u304d\u3044\u30df\u30c3\u30d7\u30ec\u30d9\u30eb\u306e\u30a2\u30eb\u30d5\u30a1\u5024\u3092\u8abf\u3079\u308c\u3070\u305d\u306e\u7bc4\u56f2\u5185\u306b\u534a\u900f\u660e\u30d4\u30af\u30bb\u30eb\u304c\u5b58\u5728\u3059\u308b\u304b\u3069\u3046\u304b\u304c\u5224\u5b9a\u3067\u304d\u307e\u3059\u3002\uff08\u591a\u5206\uff09\n\u3057\u305f\u304c\u3063\u3066\u3001\u305d\u308c\u305e\u308c\u306e\u30d4\u30af\u30bb\u30eb\u306b\u304a\u3044\u3066\u6700\u5927\u30df\u30c3\u30d7\u30de\u30c3\u30d7\u30ec\u30d9\u30eb\u304b\u30891\u3064\u305a\u3064\u4e0b\u3052\u306a\u304c\u3089\u3001\u8fd1\u3044\u30d4\u30af\u30bb\u30eb\u306e\u30a2\u30eb\u30d5\u30a1\u5024\u304c1\u304b\u3069\u3046\u304b\u3092\u898b\u3066\u3044\u3051\u3070\u3001\u52b9\u7387\u3088\u304f\u6700\u3082\u8fd1\u3044\u534a\u900f\u660e\u30d4\u30af\u30bb\u30eb\u306b\u305f\u3069\u308a\u7740\u3051\u308b\u306e\u3067\u306f\u306a\u3044\u304b\u3068\u601d\u3044\u307e\u3057\u305f\u3002\n\nMain.cpp\n# include <Siv3D.hpp>\n\nclass EffectTexture\n{\npublic:\n\n    struct CB\n    {\n        Float2 lightDir;\n        float lightAltitude;\n        float intensity;\n    };\n\n    EffectTexture(const Image& image)\n        :m_texture(image, TextureDesc::Mipped)\n        , m_shader(L\"EffectTexture.hlsl\")\n    {\n        m_cb->lightAltitude = 200.0;\n        m_cb->intensity = 0.0;\n    }\n\n    EffectTexture(const FilePath& filepath)\n        : EffectTexture(Image(filepath))\n    {}\n\n    EffectTexture()\n        : EffectTexture(Image())\n    {}\n\n    void update()\n    {\n        const float speed = Input::KeyShift.pressed ? 0.5 : 0.03;\n        if (Input::KeyZ.pressed)\n        {\n            m_cb->lightAltitude += speed;\n        }\n        if (Input::KeyX.pressed)\n        {\n            m_cb->lightAltitude -= speed;\n        }\n\n        if (Input::KeyUp.pressed)\n        {\n            m_cb->intensity += speed;\n        }\n        if (Input::KeyDown.pressed)\n        {\n            m_cb->intensity -= speed;\n        }\n\n        m_cb->intensity = Clamp(m_cb->intensity, 0.0f, 1.0f);\n    }\n\n    void draw(const Vec2& pos = { 0, 0 })\n    {\n        Graphics2D::BeginShader(m_shader);\n        m_cb->lightDir = Mouse::Pos();\n        Graphics2D::SetConstant(ShaderStage::Pixel, 1, m_cb);\n\n        m_texture.draw(pos);\n\n        Graphics2D::EndShader();\n    }\n\n    void set(const Image& image)\n    {\n        m_texture = Texture(image, TextureDesc::Mipped);\n    }\n\nprivate:\n\n    Texture m_texture;\n    PixelShader m_shader;\n    ConstantBuffer<CB> m_cb;\n};\n\nvoid Main()\n{\n    Graphics::SetBackground(Palette::Black);\n\n    EffectTexture texture(L\"Example/siv3D-kun.png\");\n\n    /*Font font(128, Typeface::Black);\n    Image image(640, 480, Alpha(0));\n    font.overwrite(image, L\"Siv3D\", 50, 50, Palette::Orange);\n    texture.set(image);*/\n\n    while (System::Update())\n    {\n        if (Input::KeyZ.clicked)\n        {\n            ScreenCapture::BeginGIF();\n        }\n        if (Input::KeyX.clicked)\n        {\n            ScreenCapture::EndGIF();\n        }\n\n        texture.update();\n        texture.draw();\n\n        Circle(Mouse::Pos(), 5).draw();\n    }\n}\n\n\n\nEffectTexture.hlsl\nTexture2D texture0 : register( t0 );\nSamplerState sampler0 : register( s0 );\n\nstruct VS_OUTPUT\n{\n    float4 position : SV_POSITION;\n    float4 color : COLOR0;\n    float2 tex : TEXCOORD0;\n};\n\ncbuffer CB : register(b1)\n{\n    float2 lightDir;\n    float lightAltitude;\n    float intensity;\n};\n\n#define BUFFER_SIZE 5\n\n//http://holger.dammertz.org/stuff/notes_HammersleyOnHemisphere.html#sec-SourceCode\nfloat radicalInverse_VdC(uint bits)\n{\n    bits = (bits << 16u) | (bits >> 16u);\n    bits = ((bits & 0x55555555u) << 1u) | ((bits & 0xAAAAAAAAu) >> 1u);\n    bits = ((bits & 0x33333333u) << 2u) | ((bits & 0xCCCCCCCCu) >> 2u);\n    bits = ((bits & 0x0F0F0F0Fu) << 4u) | ((bits & 0xF0F0F0F0u) >> 4u);\n    bits = ((bits & 0x00FF00FFu) << 8u) | ((bits & 0xFF00FF00u) >> 8u);\n    return float(bits) * 2.3283064365386963e-10; // / 0x100000000\n}\n\nfloat2 hammersley2d(uint i, uint N)\n{\n    return float2((float(i) + 0.5) / float(N), radicalInverse_VdC(i));\n}\n\nvoid sortNearBuffer(inout float2 nears[BUFFER_SIZE], in float2 pos)\n{\n    for (int i = 0; i < BUFFER_SIZE - 1; ++i)\n    {\n        for (int j = BUFFER_SIZE - 1; j > i; --j)\n        {\n            const float2 previous = nears[j - 1];\n            const float2 current = nears[j];\n            const float dp2 = dot(previous - pos, previous - pos);\n            const float dc2 = dot(current - pos, current - pos);\n            if (dc2 < dp2)\n            {\n                nears[j] = previous;\n                nears[j - 1] = current;\n            }\n        }\n    }\n}\n\nvoid tryInsert(inout float2 nears[BUFFER_SIZE], in float2 pos, in float2 newElement)\n{\n    int left = 0;\n    int right = BUFFER_SIZE;\n    int mid;\n\n    const float lengthSq = dot(newElement - pos, newElement - pos);\n\n    while (left <= right)\n    {\n        mid = ((left + right) >> 1);\n        const float midLengthSq = dot(nears[mid] - pos, nears[mid] - pos);\n        if (midLengthSq < lengthSq)\n        {\n            left = mid + 1;\n        }\n        else\n        {\n            right = mid - 1;\n        }\n    }\n\n    for (int i = BUFFER_SIZE - 1; mid + 1 <= i; --i)\n    {\n        nears[i] = nears[i - 1];\n    }\n    if (mid <= BUFFER_SIZE - 1)\n    {\n        nears[mid] = newElement;\n    }\n}\n\nfloat4 PS(in VS_OUTPUT input) : SV_Target\n{\n    const float2 uv = input.tex;\n\n    float2 size_;\n    float textureNumOfLevels;\n    texture0.GetDimensions(0, size_.x, size_.y, textureNumOfLevels);\n\n    float4 srcColor = texture0.SampleLevel(sampler0, uv, 0);\n\n    float2 maxLevelSize;\n    texture0.GetDimensions(textureNumOfLevels, maxLevelSize.x, maxLevelSize.y, textureNumOfLevels);\n    float4 maxLevelColor = texture0.Load(int3(int2(maxLevelSize*uv), textureNumOfLevels - 1));\n    if (maxLevelColor.a == 1)\n    {\n        return float4(0, 0, 0, 1);\n    }\n\n    int currentMip = textureNumOfLevels - 2;\n\n    const int numOfSumples = 10;\n\n    float2 nullUV = float2(-10, -10);\n    float2 nearTransperenntPixels[BUFFER_SIZE];\n    nearTransperenntPixels[0] = uv;\n    for (int j = 1; j < BUFFER_SIZE; ++j)\n    {\n        nearTransperenntPixels[j] = nullUV;\n    }\n\n    float2 posUV[4];\n    int indices[4] = { 0, 1, 2, 3 };\n    int iterations = 0;\n\n    const float scl = 2.5;\n    int d = -3;\n    for (; 0 <= currentMip; --currentMip)\n    {\n        int2 currentSize;\n        texture0.GetDimensions(currentMip, currentSize.x, currentSize.y, textureNumOfLevels);\n\n        float2 uvPerPixel = float2(1.0, 1.0) / currentSize;\n\n        for (int i = 0; i < BUFFER_SIZE; ++i)\n        {\n            if (nearTransperenntPixels[i].x == nullUV.x && nearTransperenntPixels[i].y == nullUV.y)\n            {\n                continue;\n            }\n\n            int2 pixelPos = (nearTransperenntPixels[i] + uvPerPixel*0.5) / uvPerPixel;\n            float2 uvCenter = float2(pixelPos) / (currentSize);\n\n            const float alphaCeenter = texture0.SampleLevel(sampler0, uvCenter, currentMip).a;\n            if (alphaCeenter == 1.0)\n            {\n                nearTransperenntPixels[i] = nullUV;\n                sortNearBuffer(nearTransperenntPixels, uv);\n            }\n\n            for (int j = 0; j < numOfSumples; ++j)\n            {\n                const float2 dx = (hammersley2d(j, numOfSumples) - float2(0.5, 0.5))*2.0;\n                const float2 jitteredUV = uvCenter + dx*uvPerPixel*scl;\n                if (texture0.SampleLevel(sampler0, jitteredUV, currentMip + d).a != 1.0)\n                {\n                    tryInsert(nearTransperenntPixels, uv, jitteredUV);\n                }\n            }\n        }\n    }\n\n    sortNearBuffer(nearTransperenntPixels, uv);\n    //\u5931\u6557\u3057\u305f\u6642\u306e\u52d5\u4f5c\n    if (nearTransperenntPixels[0].x == nullUV.x && nearTransperenntPixels[0].y == nullUV.y)\n    {\n        //return float4(1, 0, 1, 1);\n        nearTransperenntPixels[0] = uv;\n    }\n\n    //\u900f\u660e\u30d4\u30af\u30bb\u30eb\u3078\u306e\u76f8\u5bfe\u30d9\u30af\u30c8\u30eb\n    const float2 rel = nearTransperenntPixels[0] - uv;\n\n    //\u3079\u30d9\u30eb\u306e\u9ad8\u3055\n    float height = min(dot(rel, rel)*1000.0, 1.0)*500.0;\n\n    //\u5149\u5f69\u306e\u5f37\u3055\n    float light = 1.0 - min(dot(rel, rel)*10000.0 * (1.0 - intensity), 1.0);\n\n    float x = input.position.x;\n    float y = input.position.y;\n\n    const float3 tangent = normalize(ddx(float3(x, height, y)));\n    const float3 binormal = normalize(ddy(float3(x, height, y)));\n\n    const float3 normal = normalize(cross(tangent, binormal));\n\n    float2 pixelToLight = lightDir - input.position.xy;\n    const float3 lightDir = normalize(-float3(pixelToLight.x, lightAltitude, pixelToLight.y));\n    const float3 eyeDir = float3(0, -1, 0);\n    const float3 halfDir = normalize((lightDir + eyeDir)*0.5);\n    const float diffuse = dot(normal, lightDir);\n\n    const float df = 0.5;\n    const float sf = 0.5;\n    const float shinness = 6.0;\n\n    const float diffuseSpecular = df*dot(normal, lightDir) + sf*(pow(dot(normal, halfDir), shinness));\n\n    const float3 ambient = float3(1, 1, 1)*0.25;\n    const float3 lightColor = float3(0, 0.5, 1)*light*intensity;\n\n    return float4(saturate(lightColor + ambient + srcColor.rgb*diffuseSpecular), srcColor.a);\n}\n\n\n\n\n\u53cd\u7701\n\u30fb\u89e3\u50cf\u5ea6\u304c2\u306e\u7d2f\u4e57\u3067\u306a\u3044\u30c6\u30af\u30b9\u30c1\u30e3\u3060\u3068\u30df\u30c3\u30d7\u30de\u30c3\u30d7\u306e\u89e3\u50cf\u5ea6\u304c\u500d\u3005\u306b\u5897\u3048\u3066\u3044\u304f\u69cb\u9020\u304c\u5d29\u308c\u308b\u306e\u3067\u6271\u3044\u3065\u3089\u3044\u3002\n\u30fb\u7591\u4f3c\u4e71\u6570\u3092\u4f7f\u3063\u3066\u3042\u308b\u7a0b\u5ea6\u306e\u7cbe\u5ea6\u304c\u78ba\u4fdd\u3067\u304d\u308c\u3070\u3044\u3044\u304b\u3068\u601d\u3063\u305f\u304c\u5168\u7136\u7cbe\u5ea6\u304c\u4e0a\u304c\u3089\u306a\u304b\u3063\u305f\u306e\u3067\u3001\u4f55\u304b\u52d8\u9055\u3044\u3057\u3066\u308b\u304b\u30d0\u30b0\u304c\u3042\u308b\u304b\u3082\u3002\n\u30fb\u3042\u3068\u9045\u3044\u3002numOfSumples\u3068BUFFER_SIZE\u3092\u4e0b\u3052\u308c\u3070\u4e00\u5fdc\u901f\u304f\u306f\u306a\u308b\u3051\u3069\u7cbe\u5ea6\u304c\u3055\u3089\u306b\u72a0\u7272\u306b\u306a\u308b\u3002\n\n\u660e\u65e5\u306f@prince_0203\u3055\u3093\u306e\u8a18\u4e8b\u3067\u3059\u3002\u3088\u308d\u3057\u304f\u304a\u9858\u3044\u3057\u307e\u3059\u3002\n\u3053\u3061\u3089\u306f\u3001[Siv3D Advent Calendar 2015](http://qiita.com/advent-calendar/2015/siv3d) \u306e\uff11\uff17\u65e5\u76ee\u306e\u8a18\u4e8b\u3067\u3059\u3002\n\n\u30b2\u30fc\u30e0\u5236\u4f5c\u306a\u3069\u3067Photoshop\u306b\u304a\u4e16\u8a71\u306b\u306a\u3063\u3066\u3044\u308b\u3068\u3044\u3046\u65b9\u3082\u591a\u3044\u3068\u601d\u3044\u307e\u3059\u304c\u3001Photoshop\u306b\u306f\u30ec\u30a4\u30e4\u30fc\u30b9\u30bf\u30a4\u30eb\u3068\u3044\u3046\u753b\u50cf\u306b\u3044\u308d\u3044\u308d\u306a\u30a8\u30d5\u30a7\u30af\u30c8\u3092\u4ed8\u3051\u3089\u308c\u308b\u6a5f\u80fd\u304c\u3042\u308a\u307e\u3059\u3002\n![siv_.png](https://qiita-image-store.s3.amazonaws.com/0/100367/baf9441b-465e-5760-3c93-395d800c3f74.png)\n\n\u3053\u306e\u30a8\u30d5\u30a7\u30af\u30c8\u3092\u30d7\u30ed\u30b0\u30e9\u30e0\u306e\u4e2d\u3067\u6271\u3048\u305f\u3089\u9762\u767d\u3044\u3068\u601d\u3063\u305f\u306e\u3067\u4e00\u90e8\u5206\u3060\u3051\u5b9f\u88c5\u3057\u3066\u307f\u307e\u3057\u305f\u3002\n\n# \u4f5c\u3063\u305f\u3082\u306e\n## \u3079\u30d9\u30eb\n![20151218-005023-025.gif](https://qiita-image-store.s3.amazonaws.com/0/100367/af22b45c-d1c4-784e-db6d-d64946ae997b.gif)\n\n\u3079\u30d9\u30eb\u306f\u3001\u5404\u30d4\u30af\u30bb\u30eb\u304b\u3089\u6700\u3082\u8fd1\u3044\u900f\u660e\u30d4\u30af\u30bb\u30eb\u307e\u3067\u306e\u8ddd\u96e2\u3092\u8a08\u7b97\u3057\u305f\u5f8c\u3001\u305d\u306e\u8ddd\u96e2\u306b\u5fdc\u3058\u3066\u9ad8\u3055\u3092\u8a2d\u5b9a\u3057\u3001\u9ad8\u3055\u3068\u30de\u30a6\u30b9\u306e\u4f4d\u7f6e\u304b\u3089\u30e9\u30a4\u30c6\u30a3\u30f3\u30b0\u3092\u8a08\u7b97\u3057\u307e\u3057\u305f\u3002\u3042\u3068\u4f55\u304b\u77f3\u3063\u307d\u3044\u8cea\u611f\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u304c\u3001\u3053\u308c\u306f\u5225\u306b\u305d\u3046\u3057\u305f\u308f\u3051\u3067\u306f\u306a\u304f\u3066\u900f\u660e\u30d4\u30af\u30bb\u30eb\u307e\u3067\u306e\u8ddd\u96e2\u8a08\u7b97\u306e\u7cbe\u5ea6\u304c\u60aa\u3044\u3060\u3051\u3067\u3059\u3002\n\n## \u5149\u5f69\uff08\u5185\u5074\uff09\n![20151218-011432-464.gif](https://qiita-image-store.s3.amazonaws.com/0/100367/fa682fb7-47cc-77e4-2e4c-0b07cca29d81.gif)\n\n\u3079\u30d9\u30eb\u3068\u307b\u3068\u3093\u3069\u540c\u3058\u3067\u3059\u3002\u900f\u660e\u30d4\u30af\u30bb\u30eb\u304b\u3089\u306e\u8ddd\u96e2\u306b\u5fdc\u3058\u3066\u8272\u3092\u305d\u306e\u307e\u307e\u52a0\u7b97\u3057\u307e\u3057\u305f\u3002\n\n## \u7d44\u307f\u5408\u308f\u305b\u308b\u3068\u3053\u3093\u306a\u611f\u3058\n![20151218-011755-717-compressor.gif](https://qiita-image-store.s3.amazonaws.com/0/100367/2f9af31a-8f06-6f1a-2e1c-c1458c513db5.gif)\n\n\u3061\u306a\u307f\u306b\u81ea\u5206\u306e\u30ce\u30fc\u30c8PC\u3060\u3068\u9045\u3059\u304e\u3066\u307b\u3068\u3093\u3069\u52d5\u304b\u306a\u304b\u3063\u305f\u306e\u3067\u3001\u30b2\u30fc\u30e0\u306b\u7d44\u307f\u8fbc\u3080\u306b\u306f\u307e\u3060\u3044\u308d\u3044\u308d\u6539\u5584\u304c\u5fc5\u8981\u305d\u3046\u3067\u3059\u3002\n\n# \u5b9f\u88c5\n\u5404\u30d4\u30af\u30bb\u30eb\u304b\u3089\u900f\u660e\u30d4\u30af\u30bb\u30eb\u307e\u3067\u306e\u8ddd\u96e2\u304c\u5206\u304b\u308c\u30709\u5272\u5b8c\u6210\u3057\u305f\u3088\u3046\u306a\u3082\u306e\u306a\u306e\u3067\u3001\u3053\u306e\u8a08\u7b97\u304c\u4e00\u756a\u5927\u4e8b\u3067\u3059\u3002\n\n\u6700\u3082\u7c21\u5358\u306a\u65b9\u6cd5\u306f\u5404\u30d4\u30af\u30bb\u30eb\u304b\u30891\u3064\u305a\u3064\u96a3\u63a5\u30d4\u30af\u30bb\u30eb\u3092\u898b\u3066\u3044\u304f\u65b9\u6cd5\u3067\u3059\u304c\u3001\u3053\u308c\u3060\u3068\u591a\u5206\u9045\u3044\u306e\u3067\u4eca\u56de\u30df\u30c3\u30d7\u30de\u30c3\u30d7\u3092\u4f7f\u3063\u305f\u5b9f\u88c5\u3092\u8a66\u3057\u3066\u307f\u307e\u3057\u305f\u3002\n\n\u5927\u304d\u3044\u30df\u30c3\u30d7\u30ec\u30d9\u30eb\u306e1\u30d4\u30af\u30bb\u30eb\u306e\u8272\u306f\u3001\u5c0f\u3055\u3044\u30df\u30c3\u30d7\u30ec\u30d9\u30eb\u306e\u305d\u308c\u305e\u308c\u306e\u30d4\u30af\u30bb\u30eb\u306e\u8272\u306e\u5e73\u5747\u306b\u306a\u3063\u3066\u3044\u308b\u306e\u3067\u3001\u5927\u304d\u3044\u30df\u30c3\u30d7\u30ec\u30d9\u30eb\u306e\u30a2\u30eb\u30d5\u30a1\u5024\u3092\u8abf\u3079\u308c\u3070\u305d\u306e\u7bc4\u56f2\u5185\u306b\u534a\u900f\u660e\u30d4\u30af\u30bb\u30eb\u304c\u5b58\u5728\u3059\u308b\u304b\u3069\u3046\u304b\u304c\u5224\u5b9a\u3067\u304d\u307e\u3059\u3002\uff08\u591a\u5206\uff09\n\n\u3057\u305f\u304c\u3063\u3066\u3001\u305d\u308c\u305e\u308c\u306e\u30d4\u30af\u30bb\u30eb\u306b\u304a\u3044\u3066\u6700\u5927\u30df\u30c3\u30d7\u30de\u30c3\u30d7\u30ec\u30d9\u30eb\u304b\u30891\u3064\u305a\u3064\u4e0b\u3052\u306a\u304c\u3089\u3001\u8fd1\u3044\u30d4\u30af\u30bb\u30eb\u306e\u30a2\u30eb\u30d5\u30a1\u5024\u304c1\u304b\u3069\u3046\u304b\u3092\u898b\u3066\u3044\u3051\u3070\u3001\u52b9\u7387\u3088\u304f\u6700\u3082\u8fd1\u3044\u534a\u900f\u660e\u30d4\u30af\u30bb\u30eb\u306b\u305f\u3069\u308a\u7740\u3051\u308b\u306e\u3067\u306f\u306a\u3044\u304b\u3068\u601d\u3044\u307e\u3057\u305f\u3002\n\n```lang:Main.cpp\n# include <Siv3D.hpp>\n\nclass EffectTexture\n{\npublic:\n\n\tstruct CB\n\t{\n\t\tFloat2 lightDir;\n\t\tfloat lightAltitude;\n\t\tfloat intensity;\n\t};\n\n\tEffectTexture(const Image& image)\n\t\t:m_texture(image, TextureDesc::Mipped)\n\t\t, m_shader(L\"EffectTexture.hlsl\")\n\t{\n\t\tm_cb->lightAltitude = 200.0;\n\t\tm_cb->intensity = 0.0;\n\t}\n\n\tEffectTexture(const FilePath& filepath)\n\t\t: EffectTexture(Image(filepath))\n\t{}\n\n\tEffectTexture()\n\t\t: EffectTexture(Image())\n\t{}\n\n\tvoid update()\n\t{\n\t\tconst float speed = Input::KeyShift.pressed ? 0.5 : 0.03;\n\t\tif (Input::KeyZ.pressed)\n\t\t{\n\t\t\tm_cb->lightAltitude += speed;\n\t\t}\n\t\tif (Input::KeyX.pressed)\n\t\t{\n\t\t\tm_cb->lightAltitude -= speed;\n\t\t}\n\n\t\tif (Input::KeyUp.pressed)\n\t\t{\n\t\t\tm_cb->intensity += speed;\n\t\t}\n\t\tif (Input::KeyDown.pressed)\n\t\t{\n\t\t\tm_cb->intensity -= speed;\n\t\t}\n\n\t\tm_cb->intensity = Clamp(m_cb->intensity, 0.0f, 1.0f);\n\t}\n\n\tvoid draw(const Vec2& pos = { 0, 0 })\n\t{\n\t\tGraphics2D::BeginShader(m_shader);\n\t\tm_cb->lightDir = Mouse::Pos();\n\t\tGraphics2D::SetConstant(ShaderStage::Pixel, 1, m_cb);\n\n\t\tm_texture.draw(pos);\n\n\t\tGraphics2D::EndShader();\n\t}\n\n\tvoid set(const Image& image)\n\t{\n\t\tm_texture = Texture(image, TextureDesc::Mipped);\n\t}\n\nprivate:\n\n\tTexture m_texture;\n\tPixelShader m_shader;\n\tConstantBuffer<CB> m_cb;\n};\n\nvoid Main()\n{\n\tGraphics::SetBackground(Palette::Black);\n\n\tEffectTexture texture(L\"Example/siv3D-kun.png\");\n\n\t/*Font font(128, Typeface::Black);\n\tImage image(640, 480, Alpha(0));\n\tfont.overwrite(image, L\"Siv3D\", 50, 50, Palette::Orange);\n\ttexture.set(image);*/\n\t\n\twhile (System::Update())\n\t{\n\t\tif (Input::KeyZ.clicked)\n\t\t{\n\t\t\tScreenCapture::BeginGIF();\n\t\t}\n\t\tif (Input::KeyX.clicked)\n\t\t{\n\t\t\tScreenCapture::EndGIF();\n\t\t}\n\n\t\ttexture.update();\n\t\ttexture.draw();\n\n\t\tCircle(Mouse::Pos(), 5).draw();\n\t}\n}\n```\n\n```lang:EffectTexture.hlsl\nTexture2D texture0 : register( t0 );\nSamplerState sampler0 : register( s0 );\n\nstruct VS_OUTPUT\n{\n\tfloat4 position : SV_POSITION;\n\tfloat4 color : COLOR0;\n\tfloat2 tex : TEXCOORD0;\n};\n\ncbuffer CB : register(b1)\n{\n\tfloat2 lightDir;\n\tfloat lightAltitude;\n\tfloat intensity;\n};\n\n#define BUFFER_SIZE 5\n\n//http://holger.dammertz.org/stuff/notes_HammersleyOnHemisphere.html#sec-SourceCode\nfloat radicalInverse_VdC(uint bits)\n{\n\tbits = (bits << 16u) | (bits >> 16u);\n\tbits = ((bits & 0x55555555u) << 1u) | ((bits & 0xAAAAAAAAu) >> 1u);\n\tbits = ((bits & 0x33333333u) << 2u) | ((bits & 0xCCCCCCCCu) >> 2u);\n\tbits = ((bits & 0x0F0F0F0Fu) << 4u) | ((bits & 0xF0F0F0F0u) >> 4u);\n\tbits = ((bits & 0x00FF00FFu) << 8u) | ((bits & 0xFF00FF00u) >> 8u);\n\treturn float(bits) * 2.3283064365386963e-10; // / 0x100000000\n}\n\nfloat2 hammersley2d(uint i, uint N)\n{\n\treturn float2((float(i) + 0.5) / float(N), radicalInverse_VdC(i));\n}\n\nvoid sortNearBuffer(inout float2 nears[BUFFER_SIZE], in float2 pos)\n{\n\tfor (int i = 0; i < BUFFER_SIZE - 1; ++i)\n\t{\n\t\tfor (int j = BUFFER_SIZE - 1; j > i; --j)\n\t\t{\n\t\t\tconst float2 previous = nears[j - 1];\n\t\t\tconst float2 current = nears[j];\n\t\t\tconst float dp2 = dot(previous - pos, previous - pos);\n\t\t\tconst float dc2 = dot(current - pos, current - pos);\n\t\t\tif (dc2 < dp2)\n\t\t\t{\n\t\t\t\tnears[j] = previous;\n\t\t\t\tnears[j - 1] = current;\n\t\t\t}\n\t\t}\n\t}\n}\n\nvoid tryInsert(inout float2 nears[BUFFER_SIZE], in float2 pos, in float2 newElement)\n{\n\tint left = 0;\n\tint right = BUFFER_SIZE;\n\tint mid;\n\n\tconst float lengthSq = dot(newElement - pos, newElement - pos);\n\n\twhile (left <= right)\n\t{\n\t\tmid = ((left + right) >> 1);\n\t\tconst float midLengthSq = dot(nears[mid] - pos, nears[mid] - pos);\n\t\tif (midLengthSq < lengthSq)\n\t\t{\n\t\t\tleft = mid + 1;\n\t\t}\n\t\telse\n\t\t{\n\t\t\tright = mid - 1;\n\t\t}\n\t}\n\t\n\tfor (int i = BUFFER_SIZE - 1; mid + 1 <= i; --i)\n\t{\n\t\tnears[i] = nears[i - 1];\n\t}\n\tif (mid <= BUFFER_SIZE - 1)\n\t{\n\t\tnears[mid] = newElement;\n\t}\n}\n\nfloat4 PS(in VS_OUTPUT input) : SV_Target\n{\n\tconst float2 uv = input.tex;\n\t\n\tfloat2 size_;\n\tfloat textureNumOfLevels;\n\ttexture0.GetDimensions(0, size_.x, size_.y, textureNumOfLevels);\n\t\n\tfloat4 srcColor = texture0.SampleLevel(sampler0, uv, 0);\n\n\tfloat2 maxLevelSize;\n\ttexture0.GetDimensions(textureNumOfLevels, maxLevelSize.x, maxLevelSize.y, textureNumOfLevels);\n\tfloat4 maxLevelColor = texture0.Load(int3(int2(maxLevelSize*uv), textureNumOfLevels - 1));\n\tif (maxLevelColor.a == 1)\n\t{\n\t\treturn float4(0, 0, 0, 1);\n\t}\n\t\n\tint currentMip = textureNumOfLevels - 2;\n\t\n\tconst int numOfSumples = 10;\n\n\tfloat2 nullUV = float2(-10, -10);\n\tfloat2 nearTransperenntPixels[BUFFER_SIZE];\n\tnearTransperenntPixels[0] = uv;\n\tfor (int j = 1; j < BUFFER_SIZE; ++j)\n\t{\n\t\tnearTransperenntPixels[j] = nullUV;\n\t}\n\t\n\tfloat2 posUV[4];\n\tint indices[4] = { 0, 1, 2, 3 };\n\tint iterations = 0;\n\n\tconst float scl = 2.5;\n\tint d = -3;\n\tfor (; 0 <= currentMip; --currentMip)\n\t{\n\t\tint2 currentSize;\n\t\ttexture0.GetDimensions(currentMip, currentSize.x, currentSize.y, textureNumOfLevels);\n\t\t\n\t\tfloat2 uvPerPixel = float2(1.0, 1.0) / currentSize;\n\n\t\tfor (int i = 0; i < BUFFER_SIZE; ++i)\n\t\t{\n\t\t\tif (nearTransperenntPixels[i].x == nullUV.x && nearTransperenntPixels[i].y == nullUV.y)\n\t\t\t{\n\t\t\t\tcontinue;\n\t\t\t}\n\t\n\t\t\tint2 pixelPos = (nearTransperenntPixels[i] + uvPerPixel*0.5) / uvPerPixel;\n\t\t\tfloat2 uvCenter = float2(pixelPos) / (currentSize);\n\t\t\t\n\t\t\tconst float alphaCeenter = texture0.SampleLevel(sampler0, uvCenter, currentMip).a;\n\t\t\tif (alphaCeenter == 1.0)\n\t\t\t{\n\t\t\t\tnearTransperenntPixels[i] = nullUV;\n\t\t\t\tsortNearBuffer(nearTransperenntPixels, uv);\n\t\t\t}\n\n\t\t\tfor (int j = 0; j < numOfSumples; ++j)\n\t\t\t{\n\t\t\t\tconst float2 dx = (hammersley2d(j, numOfSumples) - float2(0.5, 0.5))*2.0;\n\t\t\t\tconst float2 jitteredUV = uvCenter + dx*uvPerPixel*scl;\n\t\t\t\tif (texture0.SampleLevel(sampler0, jitteredUV, currentMip + d).a != 1.0)\n\t\t\t\t{\n\t\t\t\t\ttryInsert(nearTransperenntPixels, uv, jitteredUV);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t\n\tsortNearBuffer(nearTransperenntPixels, uv);\n\t//\u5931\u6557\u3057\u305f\u6642\u306e\u52d5\u4f5c\n\tif (nearTransperenntPixels[0].x == nullUV.x && nearTransperenntPixels[0].y == nullUV.y)\n\t{\n\t\t//return float4(1, 0, 1, 1);\n\t\tnearTransperenntPixels[0] = uv;\n\t}\n\n\t//\u900f\u660e\u30d4\u30af\u30bb\u30eb\u3078\u306e\u76f8\u5bfe\u30d9\u30af\u30c8\u30eb\n\tconst float2 rel = nearTransperenntPixels[0] - uv;\n\n\t//\u3079\u30d9\u30eb\u306e\u9ad8\u3055\n\tfloat height = min(dot(rel, rel)*1000.0, 1.0)*500.0;\n\n\t//\u5149\u5f69\u306e\u5f37\u3055\n\tfloat light = 1.0 - min(dot(rel, rel)*10000.0 * (1.0 - intensity), 1.0);\n\n\tfloat x = input.position.x;\n\tfloat y = input.position.y;\n\t\n\tconst float3 tangent = normalize(ddx(float3(x, height, y)));\n\tconst float3 binormal = normalize(ddy(float3(x, height, y)));\n\t\n\tconst float3 normal = normalize(cross(tangent, binormal));\n\t\n\tfloat2 pixelToLight = lightDir - input.position.xy;\n\tconst float3 lightDir = normalize(-float3(pixelToLight.x, lightAltitude, pixelToLight.y));\n\tconst float3 eyeDir = float3(0, -1, 0);\n\tconst float3 halfDir = normalize((lightDir + eyeDir)*0.5);\n\tconst float diffuse = dot(normal, lightDir);\n\n\tconst float df = 0.5;\n\tconst float sf = 0.5;\n\tconst float shinness = 6.0;\n\t\n\tconst float diffuseSpecular = df*dot(normal, lightDir) + sf*(pow(dot(normal, halfDir), shinness));\n\t\n\tconst float3 ambient = float3(1, 1, 1)*0.25;\n\tconst float3 lightColor = float3(0, 0.5, 1)*light*intensity;\n\t\n\treturn float4(saturate(lightColor + ambient + srcColor.rgb*diffuseSpecular), srcColor.a);\n}\n\n```\n\n# \u53cd\u7701\n\u30fb\u89e3\u50cf\u5ea6\u304c2\u306e\u7d2f\u4e57\u3067\u306a\u3044\u30c6\u30af\u30b9\u30c1\u30e3\u3060\u3068\u30df\u30c3\u30d7\u30de\u30c3\u30d7\u306e\u89e3\u50cf\u5ea6\u304c\u500d\u3005\u306b\u5897\u3048\u3066\u3044\u304f\u69cb\u9020\u304c\u5d29\u308c\u308b\u306e\u3067\u6271\u3044\u3065\u3089\u3044\u3002\n\u30fb\u7591\u4f3c\u4e71\u6570\u3092\u4f7f\u3063\u3066\u3042\u308b\u7a0b\u5ea6\u306e\u7cbe\u5ea6\u304c\u78ba\u4fdd\u3067\u304d\u308c\u3070\u3044\u3044\u304b\u3068\u601d\u3063\u305f\u304c\u5168\u7136\u7cbe\u5ea6\u304c\u4e0a\u304c\u3089\u306a\u304b\u3063\u305f\u306e\u3067\u3001\u4f55\u304b\u52d8\u9055\u3044\u3057\u3066\u308b\u304b\u30d0\u30b0\u304c\u3042\u308b\u304b\u3082\u3002\n\u30fb\u3042\u3068\u9045\u3044\u3002numOfSumples\u3068BUFFER_SIZE\u3092\u4e0b\u3052\u308c\u3070\u4e00\u5fdc\u901f\u304f\u306f\u306a\u308b\u3051\u3069\u7cbe\u5ea6\u304c\u3055\u3089\u306b\u72a0\u7272\u306b\u306a\u308b\u3002\n\n\n\n***\n\u660e\u65e5\u306f@prince_0203\u3055\u3093\u306e\u8a18\u4e8b\u3067\u3059\u3002\u3088\u308d\u3057\u304f\u304a\u9858\u3044\u3057\u307e\u3059\u3002\n"}