{"context": "\n\n\u306f\u3058\u3081\u306b\n\u4ee5\u524dAVFundation\u3092\u5229\u7528\u3057\u305f\u30ab\u30e1\u30e9\u306e\u5b9f\u88c5\u30b5\u30f3\u30d7\u30eb\u3092\u66f8\u3044\u305f\u969b\u3001\n\u30d0\u30fc\u30b9\u30c8\uff08\u9023\u5c04\uff09\u30ab\u30e1\u30e9\u306e\u5b9f\u88c5\u30b5\u30f3\u30d7\u30eb\u3082\u66f8\u3044\u3066\u307b\u3057\u3044\u3068\n\u8981\u671b\u304c\u3042\u308a\u307e\u3057\u305f\u306e\u3067\u3001\u7e8f\u3081\u307e\u3057\u305f\u3002\n\u5b8c\u6210\u7248\u306f\u3001Github\u3092\u5fa1\u89a7\u304f\u3060\u3055\u3044\u3002\n\n\u958b\u767a\u74b0\u5883\n\u958b\u767a\u74b0\u5883\u306f\u3001\u4e0b\u8a18\u306e\u3068\u304a\u308a\u3067\u3059\u3002\n\n\n\ncategory\nVersion\n\n\n\n\nXCode\n8.2\n\n\niOS\n10.0\u301c\n\n\nSwift\n3.0.2\n\n\n\n\n\u767b\u5834\u4eba\u7269\n\u30d0\u30fc\u30b9\u30c8\uff08\u9023\u5c04\uff09\u30ab\u30e1\u30e9\u3067\u5229\u7528\u3059\u308b\u4e3b\u306a\u30af\u30e9\u30b9\u306f\u3001\u4e0b\u8a18\u306e\u3068\u304a\u308a\u3067\u3059\u3002\n\n\n\n\u30af\u30e9\u30b9\u540d\n\u8aac\u660e\n\n\n\n\nAVCaptureDeviceInput\n\u5165\u529b\u30c7\u30d0\u30a4\u30b9\u3068\u3057\u3066\u3001\u5168\u9762\u30ab\u30e1\u30e9\u3001\u80cc\u9762\u30ab\u30e1\u30e9\u306a\u3069\u3092\u8a2d\u5b9a\u3059\u308b\n\n\nAVCaptureSession\n\u30ab\u30e1\u30e9\u64ae\u5f71\u7528\u306e\u30bb\u30c3\u30b7\u30e7\u30f3??\n\n\nAVCapturePhotoOutput\n\u51fa\u529b\u306b\u3001\u9759\u6b62\u753b\u3092\u8a2d\u5b9a\u3059\u308b\n\n\nAVCaputreVideoOutput\n\u51fa\u529b\u306b\u3001\u52d5\u753b\u30d5\u30ec\u30fc\u30e0\u30c7\u30fc\u30bf\u3092\u8a2d\u5b9a\u3059\u308b\n\n\n\n\u203biOS10\u3067\u306f\u3001AVCaptureStillImageOutput\u304c\u5ec3\u6b62\u306b\u306a\u308a\u3001\nAVCapturePhotoOutput\u3092\u4f7f\u3044\u307e\u3059\u3002\n\n\u5b9f\u88c5\u624b\u9806\n\n\u30ab\u30e1\u30e9\u306e\u5229\u7528\u8a31\u53ef\u306e\u8a2d\u5b9a\n\u5165\u51fa\u529b\u306e\u521d\u671f\u5316\u304a\u3088\u3073\u3001\u63a5\u7d9a\n\u30bb\u30c3\u30b7\u30e7\u30f3\u306e\u958b\u59cb/\u7d42\u4e86\n\u30d5\u30ec\u30fc\u30e0\u3054\u3068\u306b\u753b\u50cf\u3092\u53d6\u5f97\n\u4f7f\u3063\u3066\u307f\u308b\n\n\n1. \u30ab\u30e1\u30e9\u306e\u5229\u7528\u8a31\u53ef\u306e\u8a2d\u5b9a\n\nInfo.plist\n<key>NSCameraUsageDescription</key>\n<string>\u30ab\u30e1\u30e9\u3078\u30a2\u30af\u30bb\u30b9\u3059\u308b\u305f\u3081\u306b\u5fc5\u8981\u3067\u3059</string>\n\n\n\n2. \u5165\u51fa\u529b\u306e\u521d\u671f\u5316\u304a\u3088\u3073\u3001\u63a5\u7d9a\n\n2.1. \u30bb\u30c3\u30b7\u30e7\u30f3\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u5316\n\nBurstCameraUtil.swift\n    private let session = AVCaptureSession()\n\n\n\n2.2. \u5165\u529b\u30c7\u30d0\u30a4\u30b9\u306e\u521d\u671f\u5316\n\nBurstCameraUtil.swift\n\n    func findDevice(position: AVCaptureDevicePosition) -> AVCaptureDevice? {\n\n        let device = AVCaptureDevice.defaultDevice(withDeviceType: .builtInWideAngleCamera,\n                                                   mediaType: AVMediaTypeVideo,\n                                                   position: position)\n\n        device?.activeVideoMinFrameDuration = CMTimeMake(1, 30)\n        return device\n    }\n\n\n\n2.3. \u5165\u529b\u30c7\u30d0\u30a4\u30b9\u306e\u63a5\u7d9a\n\nBurstCameraUtil.swift\n    func createVideoPreviewLayer(device: AVCaptureDevice?) -> AVCaptureVideoPreviewLayer?{\n\n        let videoInput = try! AVCaptureDeviceInput.init(device: device)\n\n        if (session.canAddInput(videoInput)) {\n            session.addInput(videoInput)\n        }\n\n        if (session.canAddOutput(photoOutput)) {\n            session.addOutput(photoOutput)\n        }\n\n        return AVCaptureVideoPreviewLayer.init(session: session)\n    }\n\n\n\n2.4. \u51fa\u529b\u30c7\u30d0\u30a4\u30b9\u306e\u521d\u671f\u5316\n\nBurstCameraUtil.swift\n\n    private let photoOutput = AVCapturePhotoOutput()\n    private let videoDataOutput = AVCaptureVideoDataOutput()\n\n\n\n2.5. \u51fa\u529b\u30c7\u30d0\u30a4\u30b9\u306e\u63a5\u7d9a\n\nBurstCameraUtil.swift\nfunc createVideoDataOutput() {\n\n        videoDataOutput.videoSettings = [kCVPixelBufferPixelFormatTypeKey as AnyHashable : Int(kCVPixelFormatType_32BGRA)]\n        videoDataOutput.alwaysDiscardsLateVideoFrames = true\n        videoDataOutput.setSampleBufferDelegate(self, queue: DispatchQueue.main)\n\n        session.addOutput(videoDataOutput)\n        session.sessionPreset = AVCaptureSessionPreset1920x1080\n    }\n\n\n\n3. \u30bb\u30c3\u30b7\u30e7\u30f3\u306e\u958b\u59cb/\u7d42\u4e86\n\n3.1. \u30bb\u30c3\u30b7\u30e7\u30f3\u306e\u958b\u59cb\n\nBurstCameraUtil.swift\n\n    func startRunning() {\n        session.startRunning()\n    }\n\n\n\n\n3.2. \u30bb\u30c3\u30b7\u30e7\u30f3\u306e\u7d42\u4e86\n\nBurstCameraUtil.swift\n\n    func stopRunning() {\n        session.stopRunning()\n    }\n\n\n\n4. \u30d5\u30ec\u30fc\u30e0\u3054\u3068\u306b\u753b\u50cf\u3092\u53d6\u5f97\n\n4.1. \u5199\u771f\u3092\u4fdd\u5b58\u3059\u308b\u305f\u3081\u306e\u914d\u5217\u7b49\u3092\u6e96\u5099\u3059\u308b\n\nBurstCameraUtil.swift\n    fileprivate var images:[UIImage] = []\n    fileprivate var isShooting = false\n    fileprivate var counter = 0\n\n\n\n4.2. AVCaptureVideoDataOutputSampleBufferDelegate\n\nBurstCameraUtil.swift\nextension BurstCameraUtil: AVCaptureVideoDataOutputSampleBufferDelegate {\n\n    func captureOutput(_ captureOutput: AVCaptureOutput!,\n                       didOutputSampleBuffer sampleBuffer: CMSampleBuffer!,\n                       from connection: AVCaptureConnection!) {\n\n        if counter % 3 == 0 { // 1/10\u79d2\u3060\u3051\u51e6\u7406\u3059\u308b\n            if isShooting {\n                let image = imageFromSampleBuffer(sampleBuffer: sampleBuffer)\n                images.append(image)\n            }\n        }\n        counter += 1\n    }\n\n    private func imageFromSampleBuffer(sampleBuffer :CMSampleBuffer) -> UIImage {\n\n        let imageBuffer = CMSampleBufferGetImageBuffer(sampleBuffer)!\n\n        CVPixelBufferLockBaseAddress(imageBuffer,\n                                     CVPixelBufferLockFlags(rawValue: 0))\n\n        let base = CVPixelBufferGetBaseAddressOfPlane(imageBuffer, 0)!\n        let bytesPerRow = UInt(CVPixelBufferGetBytesPerRow(imageBuffer))\n        let width = UInt(CVPixelBufferGetWidth(imageBuffer))\n        let height = UInt(CVPixelBufferGetHeight(imageBuffer))\n\n        let colorSpace = CGColorSpaceCreateDeviceRGB()\n        let bitsPerCompornent = 8\n        let bitmapInfo = CGBitmapInfo(rawValue: (CGBitmapInfo.byteOrder32Little.rawValue | CGImageAlphaInfo.premultipliedFirst.rawValue) as UInt32)\n        let newContext = CGContext(data: base,\n                                   width: Int(width),\n                                   height: Int(height),\n                                   bitsPerComponent: Int(bitsPerCompornent),\n                                   bytesPerRow: Int(bytesPerRow),\n                                   space: colorSpace,\n                                   bitmapInfo: bitmapInfo.rawValue)! as CGContext\n\n        let imageRef = newContext.makeImage()!\n        let image = UIImage(cgImage: imageRef,\n                            scale: 1.0,\n                            orientation: UIImageOrientation.right)\n\n        CVPixelBufferUnlockBaseAddress(imageBuffer,\n                                       CVPixelBufferLockFlags(rawValue: 0))\n        return image\n    }\n}\n\n\n\n4.3. \u9023\u5c04\u958b\u59cb\u3001\u7d42\u4e86\u3001\u9023\u5c04\u5199\u771f\u306e\u753b\u50cf\u30ea\u30b9\u30c8\n\nBurstCameraUtil.swift\n    func start() {\n        images = []\n        isShooting = true\n    }\n\n    func stop() {\n        isShooting = false\n    }\n\n    func photos() -> [UIImage] {\n        return images\n    }\n\n\n\n5. \u4f7f\u3063\u3066\u307f\u308b\nUI\u5468\u308a\u306f\u3001\u5272\u611b\u3057\u307e\u3059\u3002\n\nViewController.swift\nimport UIKit\nimport AVFoundation\n\nfinal class ViewController: UIViewController {\n\n    @IBOutlet weak var baseView: UIView!\n\n    private var camera: CameraTakeable?\n\n    override func viewDidLoad() {\n        super.viewDidLoad()\n        setupCameraView(camera: BurstCameraUtil())\n    }\n\n    override func viewWillAppear(_ animated: Bool) {\n        super.viewWillAppear(animated)\n        camera?.startRunning()\n    }\n\n    override func viewDidDisappear(_ animated: Bool) {\n        super.viewDidDisappear(animated)\n        camera?.stopRunning()\n        camera?.removeVideoInput()\n    }\n\n    private func setupCameraView(camera: CameraTakeable?) {\n\n        self.camera = camera\n\n        let device = camera?.findDevice(position: .back)\n        camera?.createVideoDataOutput()\n\n        if let videoLayer = camera?.createVideoPreviewLayer(device: device) {            \n            videoLayer.frame = baseView.bounds\n            videoLayer.videoGravity = AVLayerVideoGravityResizeAspectFill\n            baseView.layer.addSublayer(videoLayer)\n        } else {\n            fatalError(\"VideoLayer is Nil\")\n        }\n    }\n\n    //MARK:- Actions\n    @IBAction func photoDidTapDown(_ sender: UIButton) {\n        camera?.start()\n    }\n\n    @IBAction func photoDidTapUp(_ sender: UIButton) {\n        camera?.stop()\n\n        if let images = camera?.photos() {\n            print(\"I took \\(images.count) photos\")\n        }\n    }\n}\n\n\n\n\u307e\u3068\u3081\n\u5b8c\u6210\u7248\u306f\u3001Github\u3092\u5fa1\u89a7\u304f\u3060\u3055\u3044\u3002\n\u30ab\u30e1\u30e9\u3092\u5229\u7528\u3057\u3066\u3001\u69d8\u3005\u306a\u51fa\u529b\u304c\u51fa\u6765\u307e\u3059\u306d\u3002\n\n\n\n\u30af\u30e9\u30b9\u540d\n\u8aac\u660e\n\n\n\n\nAVCaptureMovieFileOutput\n\u52d5\u753b\u30d5\u30a1\u30a4\u30eb\n\n\nAVCaptureAudioFileOutput\n\u97f3\u58f0\u30d5\u30a1\u30a4\u30eb\n\n\nAVCaptureVideoDataOutput\n\u52d5\u753b\u30d5\u30ec\u30fc\u30e0\u30c7\u30fc\u30bf\n\n\nAVCaptureAudioDataOutput\n\u97f3\u58f0\u30c7\u30fc\u30bf\n\n\nAVCapturePhotoOutput\n\u9759\u6b62\u753b\n\n\nAVCaptureMetadataOutput\n\u30e1\u30bf\u30c7\u30fc\u30bf\n\n\n\n# \u306f\u3058\u3081\u306b\n\u4ee5\u524dAVFundation\u3092\u5229\u7528\u3057\u305f[\u30ab\u30e1\u30e9\u306e\u5b9f\u88c5\u30b5\u30f3\u30d7\u30eb](http://qiita.com/eKushida/items/a9f68daa0518998f2c50)\u3092\u66f8\u3044\u305f\u969b\u3001\n\u30d0\u30fc\u30b9\u30c8\uff08\u9023\u5c04\uff09\u30ab\u30e1\u30e9\u306e\u5b9f\u88c5\u30b5\u30f3\u30d7\u30eb\u3082\u66f8\u3044\u3066\u307b\u3057\u3044\u3068\n\u8981\u671b\u304c\u3042\u308a\u307e\u3057\u305f\u306e\u3067\u3001\u7e8f\u3081\u307e\u3057\u305f\u3002\n\n\u5b8c\u6210\u7248\u306f\u3001[Github](https://github.com/stv-ekushida/ios-burst-camera-demo)\u3092\u5fa1\u89a7\u304f\u3060\u3055\u3044\u3002\n\n# \u958b\u767a\u74b0\u5883\n\u958b\u767a\u74b0\u5883\u306f\u3001\u4e0b\u8a18\u306e\u3068\u304a\u308a\u3067\u3059\u3002\n\n| category | Version | \n|---|---| \n| XCode | 8.2 | \n| iOS | 10.0\u301c | \n| Swift | 3.0.2 | \n\n# \u767b\u5834\u4eba\u7269\n\u30d0\u30fc\u30b9\u30c8\uff08\u9023\u5c04\uff09\u30ab\u30e1\u30e9\u3067\u5229\u7528\u3059\u308b\u4e3b\u306a\u30af\u30e9\u30b9\u306f\u3001\u4e0b\u8a18\u306e\u3068\u304a\u308a\u3067\u3059\u3002\n\n| \u30af\u30e9\u30b9\u540d | \u8aac\u660e |\n|---|---|\n|AVCaptureDeviceInput | \u5165\u529b\u30c7\u30d0\u30a4\u30b9\u3068\u3057\u3066\u3001\u5168\u9762\u30ab\u30e1\u30e9\u3001\u80cc\u9762\u30ab\u30e1\u30e9\u306a\u3069\u3092\u8a2d\u5b9a\u3059\u308b|\n|AVCaptureSession | \u30ab\u30e1\u30e9\u64ae\u5f71\u7528\u306e\u30bb\u30c3\u30b7\u30e7\u30f3?? |\n|AVCapturePhotoOutput | \u51fa\u529b\u306b\u3001\u9759\u6b62\u753b\u3092\u8a2d\u5b9a\u3059\u308b |\n|AVCaputreVideoOutput | \u51fa\u529b\u306b\u3001\u52d5\u753b\u30d5\u30ec\u30fc\u30e0\u30c7\u30fc\u30bf\u3092\u8a2d\u5b9a\u3059\u308b |\n\n\n\u203biOS10\u3067\u306f\u3001AVCaptureStillImageOutput\u304c\u5ec3\u6b62\u306b\u306a\u308a\u3001\nAVCapturePhotoOutput\u3092\u4f7f\u3044\u307e\u3059\u3002\n\n# \u5b9f\u88c5\u624b\u9806\n1. \u30ab\u30e1\u30e9\u306e\u5229\u7528\u8a31\u53ef\u306e\u8a2d\u5b9a\n2. \u5165\u51fa\u529b\u306e\u521d\u671f\u5316\u304a\u3088\u3073\u3001\u63a5\u7d9a\n3. \u30bb\u30c3\u30b7\u30e7\u30f3\u306e\u958b\u59cb/\u7d42\u4e86\n4. \u30d5\u30ec\u30fc\u30e0\u3054\u3068\u306b\u753b\u50cf\u3092\u53d6\u5f97\n5. \u4f7f\u3063\u3066\u307f\u308b\n\n# 1. \u30ab\u30e1\u30e9\u306e\u5229\u7528\u8a31\u53ef\u306e\u8a2d\u5b9a\n\n```xml:Info.plist\n<key>NSCameraUsageDescription</key>\n<string>\u30ab\u30e1\u30e9\u3078\u30a2\u30af\u30bb\u30b9\u3059\u308b\u305f\u3081\u306b\u5fc5\u8981\u3067\u3059</string>\n ```\n\n# 2. \u5165\u51fa\u529b\u306e\u521d\u671f\u5316\u304a\u3088\u3073\u3001\u63a5\u7d9a\n## 2.1. \u30bb\u30c3\u30b7\u30e7\u30f3\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u5316\n\n```swift:BurstCameraUtil.swift\n    private let session = AVCaptureSession()\n```    \n\n## 2.2. \u5165\u529b\u30c7\u30d0\u30a4\u30b9\u306e\u521d\u671f\u5316\n\n```swift:BurstCameraUtil.swift\n\n\tfunc findDevice(position: AVCaptureDevicePosition) -> AVCaptureDevice? {\n        \n        let device = AVCaptureDevice.defaultDevice(withDeviceType: .builtInWideAngleCamera,\n                                                   mediaType: AVMediaTypeVideo,\n                                                   position: position)\n        \n        device?.activeVideoMinFrameDuration = CMTimeMake(1, 30)\n        return device\n    }\n```    \n\n## 2.3. \u5165\u529b\u30c7\u30d0\u30a4\u30b9\u306e\u63a5\u7d9a\n\n```swift:BurstCameraUtil.swift    \n    func createVideoPreviewLayer(device: AVCaptureDevice?) -> AVCaptureVideoPreviewLayer?{\n        \n        let videoInput = try! AVCaptureDeviceInput.init(device: device)\n        \n        if (session.canAddInput(videoInput)) {\n            session.addInput(videoInput)\n        }\n        \n        if (session.canAddOutput(photoOutput)) {\n            session.addOutput(photoOutput)\n        }\n        \n        return AVCaptureVideoPreviewLayer.init(session: session)\n    }\n```\n\n## 2.4. \u51fa\u529b\u30c7\u30d0\u30a4\u30b9\u306e\u521d\u671f\u5316\n\n```swift:BurstCameraUtil.swift\n\n    private let photoOutput = AVCapturePhotoOutput()\n    private let videoDataOutput = AVCaptureVideoDataOutput()\n```\n\n## 2.5. \u51fa\u529b\u30c7\u30d0\u30a4\u30b9\u306e\u63a5\u7d9a\n\n```swift:BurstCameraUtil.swift\nfunc createVideoDataOutput() {\n        \n        videoDataOutput.videoSettings = [kCVPixelBufferPixelFormatTypeKey as AnyHashable : Int(kCVPixelFormatType_32BGRA)]\n        videoDataOutput.alwaysDiscardsLateVideoFrames = true\n        videoDataOutput.setSampleBufferDelegate(self, queue: DispatchQueue.main)\n        \n        session.addOutput(videoDataOutput)\n        session.sessionPreset = AVCaptureSessionPreset1920x1080\n    }\n```\n\n# 3. \u30bb\u30c3\u30b7\u30e7\u30f3\u306e\u958b\u59cb/\u7d42\u4e86\n## 3.1. \u30bb\u30c3\u30b7\u30e7\u30f3\u306e\u958b\u59cb\n\n```swift:BurstCameraUtil.swift\n\n\tfunc startRunning() {\n        session.startRunning()\n    }\n\n```\n\n## 3.2. \u30bb\u30c3\u30b7\u30e7\u30f3\u306e\u7d42\u4e86\n```swift:BurstCameraUtil.swift  \n\n    func stopRunning() {\n        session.stopRunning()\n    }\n```\n\n# 4. \u30d5\u30ec\u30fc\u30e0\u3054\u3068\u306b\u753b\u50cf\u3092\u53d6\u5f97\n## 4.1. \u5199\u771f\u3092\u4fdd\u5b58\u3059\u308b\u305f\u3081\u306e\u914d\u5217\u7b49\u3092\u6e96\u5099\u3059\u308b\n\n```swift:BurstCameraUtil.swift\n    fileprivate var images:[UIImage] = []\n    fileprivate var isShooting = false\n    fileprivate var counter = 0\n```\n\n## 4.2. AVCaptureVideoDataOutputSampleBufferDelegate\n\n```swift:BurstCameraUtil.swift\nextension BurstCameraUtil: AVCaptureVideoDataOutputSampleBufferDelegate {\n    \n    func captureOutput(_ captureOutput: AVCaptureOutput!,\n                       didOutputSampleBuffer sampleBuffer: CMSampleBuffer!,\n                       from connection: AVCaptureConnection!) {\n        \n        if counter % 3 == 0 { // 1/10\u79d2\u3060\u3051\u51e6\u7406\u3059\u308b\n            if isShooting {\n                let image = imageFromSampleBuffer(sampleBuffer: sampleBuffer)\n                images.append(image)\n            }\n        }\n        counter += 1\n    }\n    \n    private func imageFromSampleBuffer(sampleBuffer :CMSampleBuffer) -> UIImage {\n        \n        let imageBuffer = CMSampleBufferGetImageBuffer(sampleBuffer)!\n        \n        CVPixelBufferLockBaseAddress(imageBuffer,\n                                     CVPixelBufferLockFlags(rawValue: 0))\n        \n        let base = CVPixelBufferGetBaseAddressOfPlane(imageBuffer, 0)!\n        let bytesPerRow = UInt(CVPixelBufferGetBytesPerRow(imageBuffer))\n        let width = UInt(CVPixelBufferGetWidth(imageBuffer))\n        let height = UInt(CVPixelBufferGetHeight(imageBuffer))\n        \n        let colorSpace = CGColorSpaceCreateDeviceRGB()\n        let bitsPerCompornent = 8\n        let bitmapInfo = CGBitmapInfo(rawValue: (CGBitmapInfo.byteOrder32Little.rawValue | CGImageAlphaInfo.premultipliedFirst.rawValue) as UInt32)\n        let newContext = CGContext(data: base,\n                                   width: Int(width),\n                                   height: Int(height),\n                                   bitsPerComponent: Int(bitsPerCompornent),\n                                   bytesPerRow: Int(bytesPerRow),\n                                   space: colorSpace,\n                                   bitmapInfo: bitmapInfo.rawValue)! as CGContext\n        \n        let imageRef = newContext.makeImage()!\n        let image = UIImage(cgImage: imageRef,\n                            scale: 1.0,\n                            orientation: UIImageOrientation.right)\n        \n        CVPixelBufferUnlockBaseAddress(imageBuffer,\n                                       CVPixelBufferLockFlags(rawValue: 0))\n        return image\n    }\n}\n```\n\n## 4.3. \u9023\u5c04\u958b\u59cb\u3001\u7d42\u4e86\u3001\u9023\u5c04\u5199\u771f\u306e\u753b\u50cf\u30ea\u30b9\u30c8\n\n```swift:BurstCameraUtil.swift\n    func start() {\n        images = []\n        isShooting = true\n    }\n    \n    func stop() {\n        isShooting = false\n    }\n    \n    func photos() -> [UIImage] {\n        return images\n    }\n```   \n\n#5. \u4f7f\u3063\u3066\u307f\u308b\nUI\u5468\u308a\u306f\u3001\u5272\u611b\u3057\u307e\u3059\u3002\n\n\n```swift:ViewController.swift\nimport UIKit\nimport AVFoundation\n\nfinal class ViewController: UIViewController {\n    \n    @IBOutlet weak var baseView: UIView!\n    \n    private var camera: CameraTakeable?\n    \n    override func viewDidLoad() {\n        super.viewDidLoad()\n        setupCameraView(camera: BurstCameraUtil())\n    }\n    \n    override func viewWillAppear(_ animated: Bool) {\n        super.viewWillAppear(animated)\n        camera?.startRunning()\n    }\n    \n    override func viewDidDisappear(_ animated: Bool) {\n        super.viewDidDisappear(animated)\n        camera?.stopRunning()\n        camera?.removeVideoInput()\n    }\n    \n    private func setupCameraView(camera: CameraTakeable?) {\n        \n        self.camera = camera\n        \n        let device = camera?.findDevice(position: .back)\n        camera?.createVideoDataOutput()\n        \n        if let videoLayer = camera?.createVideoPreviewLayer(device: device) {            \n            videoLayer.frame = baseView.bounds\n            videoLayer.videoGravity = AVLayerVideoGravityResizeAspectFill\n            baseView.layer.addSublayer(videoLayer)\n        } else {\n            fatalError(\"VideoLayer is Nil\")\n        }\n    }\n    \n    //MARK:- Actions\n    @IBAction func photoDidTapDown(_ sender: UIButton) {\n        camera?.start()\n    }\n    \n    @IBAction func photoDidTapUp(_ sender: UIButton) {\n        camera?.stop()\n        \n        if let images = camera?.photos() {\n            print(\"I took \\(images.count) photos\")\n        }\n    }\n}\n```\n\n# \u307e\u3068\u3081\n\u5b8c\u6210\u7248\u306f\u3001[Github](https://github.com/stv-ekushida/ios-burst-camera-demo)\u3092\u5fa1\u89a7\u304f\u3060\u3055\u3044\u3002\n\n\u30ab\u30e1\u30e9\u3092\u5229\u7528\u3057\u3066\u3001\u69d8\u3005\u306a\u51fa\u529b\u304c\u51fa\u6765\u307e\u3059\u306d\u3002\n\n| \u30af\u30e9\u30b9\u540d | \u8aac\u660e |\n|---|---|\n| AVCaptureMovieFileOutput| \u52d5\u753b\u30d5\u30a1\u30a4\u30eb | \n| AVCaptureAudioFileOutput | \u97f3\u58f0\u30d5\u30a1\u30a4\u30eb | \n| AVCaptureVideoDataOutput| \u52d5\u753b\u30d5\u30ec\u30fc\u30e0\u30c7\u30fc\u30bf | \n| AVCaptureAudioDataOutput| \u97f3\u58f0\u30c7\u30fc\u30bf | \n| AVCapturePhotoOutput| \u9759\u6b62\u753b  | \n| AVCaptureMetadataOutput| \u30e1\u30bf\u30c7\u30fc\u30bf  | \n", "tags": ["ios10", "iOS", "Swift", "\u30ab\u30e1\u30e9"]}