{"context": "clojure for the brave and the true chapter 10 \u306e\u30a8\u30af\u30b5\u30b5\u30a4\u30ba\u3092\u3084\u3063\u305f\u6642\u306e\u30e1\u30e2\u3002\n\n\u3084\u308a\u305f\u3044\u3053\u3068\nhttp://www.braveclojure.com/zombie-metaphysics/ \n\u304b\u3089\u6307\u5b9a\u3055\u308c\u305f\u56de\u6570\u3060\u3051\u5f15\u7528\u6587\u3092\u30d1\u30e9\u30ec\u30eb\u3067\u53d6\u5f97\u3059\u308b\u95a2\u6570\u3092\u4f5c\u308a\u305f\u3044\u3002\n\n\u5b9f\u88c5\u65b9\u91dd\nfuture \u306e list \u3092\u4f5c\u6210\u3057\u3066\u3001\n\u305d\u306e\u8981\u7d20\u306b\u5bfe\u3057\u3066 redef \u3092\u9069\u7528\u3057\u3066\u3044\u3051\u3070\u3044\u3051\u308b\uff1f\n\n\u30b3\u30fc\u30c9\n;;; \u30a8\u30af\u30b5\u30b5\u30a4\u30ba\u306f\u5358\u8a9e\u306e\u6570\u3092\u6570\u3048\u308b\u3068\u3044\u3046\u3082\u306e\u3060\u3063\u305f\u306e\u3067\u3001\u305d\u306e\u305f\u3081\u306e\u95a2\u6570\n;;; \u975e\u540c\u671f\u51e6\u7406\u3068\u306f\u95a2\u4fc2\u306a\u3044\u3067\u3059\n(def quote->list\n  (comp\n   #(clojure.string/split % #\"\\s\")\n   #(clojure.string/replace % #\"\\n.*\" \"\")))\n(def count-word (comp #(count (quote->list %)) deref))\n\n;;; \u6307\u5b9a\u3055\u308c\u305f\u6570\u306e future \u306e\u8981\u7d20\u3092\u6301\u3063\u305f list \u306e\u4f5c\u6210\n(defn fetch-quotes\n  [how-many]\n  (map #(future (slurp \"http://www.braveclojure.com/random-quote\"))\n       (range how-many)))\n\n(defn quote-word-count\n  [how-many]\n  (let [quotes (fetch-quotes how-many)\n        fetched-quotes-counts (map count-word quotes)]\n    fetched-quotes-counts))\n\n[clojure for the brave and the true chapter 10 \u306e\u30a8\u30af\u30b5\u30b5\u30a4\u30ba](http://www.braveclojure.com/zombie-metaphysics/)\u3092\u3084\u3063\u305f\u6642\u306e\u30e1\u30e2\u3002\n\n### \u3084\u308a\u305f\u3044\u3053\u3068\nhttp://www.braveclojure.com/zombie-metaphysics/ \n\u304b\u3089\u6307\u5b9a\u3055\u308c\u305f\u56de\u6570\u3060\u3051\u5f15\u7528\u6587\u3092\u30d1\u30e9\u30ec\u30eb\u3067\u53d6\u5f97\u3059\u308b\u95a2\u6570\u3092\u4f5c\u308a\u305f\u3044\u3002\n\n### \u5b9f\u88c5\u65b9\u91dd\n`future` \u306e `list` \u3092\u4f5c\u6210\u3057\u3066\u3001\n\u305d\u306e\u8981\u7d20\u306b\u5bfe\u3057\u3066 `redef` \u3092\u9069\u7528\u3057\u3066\u3044\u3051\u3070\u3044\u3051\u308b\uff1f\n\n### \u30b3\u30fc\u30c9\n```clj\n;;; \u30a8\u30af\u30b5\u30b5\u30a4\u30ba\u306f\u5358\u8a9e\u306e\u6570\u3092\u6570\u3048\u308b\u3068\u3044\u3046\u3082\u306e\u3060\u3063\u305f\u306e\u3067\u3001\u305d\u306e\u305f\u3081\u306e\u95a2\u6570\n;;; \u975e\u540c\u671f\u51e6\u7406\u3068\u306f\u95a2\u4fc2\u306a\u3044\u3067\u3059\n(def quote->list\n  (comp\n   #(clojure.string/split % #\"\\s\")\n   #(clojure.string/replace % #\"\\n.*\" \"\")))\n(def count-word (comp #(count (quote->list %)) deref))\n\n;;; \u6307\u5b9a\u3055\u308c\u305f\u6570\u306e future \u306e\u8981\u7d20\u3092\u6301\u3063\u305f list \u306e\u4f5c\u6210\n(defn fetch-quotes\n  [how-many]\n  (map #(future (slurp \"http://www.braveclojure.com/random-quote\"))\n       (range how-many)))\n\n(defn quote-word-count\n  [how-many]\n  (let [quotes (fetch-quotes how-many)\n        fetched-quotes-counts (map count-word quotes)]\n    fetched-quotes-counts))\n```\n", "tags": ["Clojure", "concurrent", "future"]}