{"context": "\n\n\u307e\u3068\u3081\n\n\nn: nat \u3092\u5341\u9032\u8868\u8a18\u306e\u6587\u5b57\u5217\u306b\u5909\u63db\u3057\u3066\u307f\u305f\n\nFunctional Scheme \u4f7f\u3048\u3070\u5927\u3057\u305f\u624b\u9593\u306f\u304b\u304b\u3089\u306a\u3044\u3002\n\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9(Gist)\n\n\n\u5fc5\u8981\u306a\u30e9\u30a4\u30d6\u30e9\u30ea\nRequire Import Arith Ascii String Recdef Wf_nat.\n\n\u6700\u521d\u306e\u4e09\u3064\u306f\u8a00\u308f\u305a\u3082\u304c\u306a\u3002\n\u4e00\u6841\u306e\u6570\u306f\u6587\u5b57\u5217\u3067\u306f\u306a\u304f\u6587\u5b57\u306b\u3057\u305f\u3044\u306e\u3067\u3001 Ascii \u3082\u5fd8\u308c\u305a\u306b\u3002\nRecdef \u306f Function \u30b3\u30de\u30f3\u30c9\u3092\u4f7f\u3046\u305f\u3081\u3001 Wf_nat \u306f < \u304c well-founded \u3067\u3042\u308b\u3053\u3068\u3092\u5229\u7528\u3059\u308b\u305f\u3081\u306b\u30a4\u30f3\u30dd\u30fc\u30c8\u3059\u308b\u3002\n\n\u88dc\u52a9\u51fd\u6570\u3068\u88dc\u984c\n\u5341\u9032\u8868\u8a18\u3092\u3059\u308b\u306e\u3067\u3001\u81ea\u7136\u6570\u3092 10 \u3067\u5272\u3063\u305f\u5546\u3068\u4f59\u308a\u3092\u6c42\u3081\u308b\u51fd\u6570\u3092\u5b9a\u7fa9\u3059\u308b\u3002\n\u9811\u5f35\u3063\u3066 S \u3092\u5341\u500b\u4e26\u3079\u308b\u3002\nFixpoint div10 (n: nat): nat * nat :=\n  match n with\n  | S (S (S (S (S (S (S (S (S (S n'))))))))) =>\n    let (q, r) := div10 n' in (S q, r)\n  | digit => (0, digit)\n  end.\n\n\u4e00\u5fdc\u3001\u8a08\u7b97\u7d50\u679c\u306f\u30c1\u30a7\u30c3\u30af\u3057\u3066\u304a\u304f\u3002\n\u6614\u3001 \u8a08\u7b97\u7d50\u679c\u3092\u30c1\u30a7\u30c3\u30af\u3059\u308b\u4ed5\u7d44\u307f\u3092\u4f5c\u3063\u305f \u3051\u3069\u3001\u4eca\u56de\u306f\u5c0e\u5165\u304c\u9762\u5012\u306a\u306e\u3067\u4f7f\u308f\u305a\u3002\nEval compute in div10 8.\n(* = (0, 8) *)\n(* : nat * nat *)\n\nEval compute in div10 12.\n(* = (1, 2) *)\n(* : nat * nat *)\n\n\u305d\u3057\u3066\u3001\u6b21\u306e\u88dc\u984c\u304c\u5f8c\u3005\u5fc5\u8981\u306b\u306a\u308b\u306e\u3067\u8a3c\u660e\u3057\u3088\u3046\u3002\nLemma div10_lt:\n  forall (n: nat),\n    let (q, r) := div10 n in (q < n \\/ n = 0).\n\n\u6b32\u3057\u3044\u7d50\u8ad6\u306f 0 < n \u6642\u306e q < n \u306a\u306e\u3060\u304c\u3001 0 < n \u3092\u4eee\u5b9a\u306b\u6301\u3063\u3066\u304f\u308b\u3068\u8a3c\u660e\u304c\u5927\u5909\u306b\u306a\u308b\u306e\u3067(\u6c17\u306b\u306a\u308b\u4eba\u306f\u3084\u3063\u3066\u307f\u3088\u3046)\u3001\u7d50\u8ad6\u90e8\u306b n = 0 \u3092 \\/ \u3059\u308b\u5f62\u306b\u3057\u305f\u3002\n\u3053\u306e\u8a3c\u660e\u3067\u306f div10 \u306b\u95a2\u3059\u308b\u5e30\u7d0d\u6cd5\u3092\u4f7f\u3046\u306e\u3067\u3001\u3042\u3089\u304b\u3058\u3081\nFunctional Scheme div10_ind := Induction for div10 Sort Prop.\n\n\u3068\u3044\u3046\u30b3\u30de\u30f3\u30c9\u3092\u5b9f\u884c\u3057\u3066\u304a\u304f\u3068\u3088\u3044\u3002\n\u3059\u308b\u3068\u3001 div10_lt \u306e\u8a3c\u660e\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u306a\u308b\u3002\nProof.\n  intros n.\n  functional induction div10 n; auto with arith.\n  left.\n  rewrite e9 in IHp.\n  destruct IHp.\n  - apply lt_n_S.\n    now repeat apply lt_S.\n  - subst; simpl in *.\n    injection e9; intros; subst; auto with arith.\nQed.\n\n\u5927\u3057\u3066\u96e3\u3057\u304f\u306a\u3044\u3002\n\n\u5909\u63db\u51fd\u6570\n\u307e\u305a\u3001\u4e00\u6841\u6bce\u306e\u5909\u63db\u51fd\u6570\u3092\u7528\u610f\u3059\u308b\u3002\n\u305d\u308c\u304c print_digit \u3067\u3042\u308b\u3002\nOpen Scope char_scope.\nDefinition print_digit (n: nat): ascii :=\n  match n with \n  | 0 => \"0\"\n  | 1 => \"1\"\n  | 2 => \"2\"\n  | 3 => \"3\"\n  | 4 => \"4\"\n  | 5 => \"5\"\n  | 6 => \"6\"\n  | 7 => \"7\"\n  | 8 => \"8\"\n  | 9 => \"9\"\n  | _ => \" \"\n  end.\n\n\u30c0\u30d6\u30eb\u30af\u30a9\u30fc\u30c6\u30fc\u30b7\u30e7\u30f3\u3067\u62ec\u3063\u3066\u3044\u308b\u304c\u3001 char_scope \u5185\u306a\u306e\u3067\u3053\u308c\u306f\u6587\u5b57\u3092\u8868\u3057\u3066\u3044\u308b\u3002\n\u5909\u63db\u306e\u6b63\u5f53\u6027\u3092\u793a\u3059\u76ee\u7684\u304c\u3042\u308b\u306e\u306a\u3089\u5f15\u6570\u306e\u578b\u306f nat \u3067\u306f\u306a\u304f { n | n < 10 } \u306e\u65b9\u304c\u3088\u3044\u304b\u3082\u3057\u308c\u306a\u3044\u304c\u3001\u4eca\u56de\u306f\u5358\u7d14\u306b\u5909\u63db\u51fd\u6570\u3092\u5b9a\u7fa9\u3059\u308b\u3053\u3068\u306e\u307f\u3092\u76ee\u7684\u3068\u3057\u3066\u3044\u308b\u306e\u3067\u3001\u60f3\u5b9a\u3057\u3066\u3044\u306a\u3044\u5f15\u6570\u306b\u3064\u3044\u3066\u306f\u7a7a\u6587\u5b57\u3092\u8fd4\u3059\u3088\u3046\u306b\u3057\u3066\u3042\u308b\u3002\n\u305d\u3057\u3066\u3001\u3053\u306e print_nat \u3068 div10 \u3092\u4f7f\u3063\u3066\u3001\u81ea\u7136\u6570\u306e\u5341\u9032\u8868\u8a18\u3092\u3059\u308b\u51fd\u6570 print_nat \u304c\u6b21\u306e\u3088\u3046\u306b\u5b9a\u7fa9\u3067\u304d\u308b\u3002\nOpen Scope string_scope.\nFunction print_nat (n: nat){wf lt n}: string :=\n  let (q, r) := div10 n in\n  match q with\n  | O => String (print_digit r) \"\"\n  | S _ => print_nat q ++ String (print_digit r) \"\"\n  end.\n\n\u304c\u3001\u3082\u3061\u308d\u3093\u3053\u308c\u3060\u3051\u3067\u7d42\u308f\u308a\u3067\u306f\u306a\u3044\u3002\u69cb\u9020\u518d\u5e30\u306b\u306a\u3063\u3066\u3044\u306a\u3044\u306e\u3067\u3001\u51fd\u6570\u306e\u505c\u6b62\u6027\u3092\u793a\u3059\u5fc5\u8981\u304c\u3042\u308b\u3002\n\u3053\u306e\u6642\u3001\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u4e8c\u3064\u306e\u30b5\u30d6\u30b4\u30fc\u30eb\u304c\u751f\u6210\u3055\u308c\u3066\u3044\u308b\u306f\u305a\u3067\u3042\u308b\u3002\n(* 2 subgoals, subgoal 1 (ID 832) *)\n\n(*   ============================ *)\n(*   forall n q r n0 : nat, q = S n0 -> div10 n = (S n0, r) -> S n0 < n *)\n\n(* subgoal 2 (ID 833) is: *)\n(*  well_founded lt *)\n(* (dependent evars:) *)\n\n\u4e8c\u3064\u3081\u306b\u3064\u3044\u3066\u306f Wf_nat \u306b lt_wf \u3068\u3044\u3046\u305d\u306e\u307e\u307e\u306e\u88dc\u984c\u304c\u3042\u308b\u306e\u3067\u3001\u305d\u308c\u3092\u4f7f\u3048\u3070\u3088\u3044\u3002\n\u4e00\u3064\u3081\u306e\u30b4\u30fc\u30eb\u306b\u3064\u3044\u3066\u3082\u3001\u5148\u7a0b\u793a\u3057\u305f div10_lt \u304c\u3042\u308c\u3070\u7c21\u5358\u306b\u8a3c\u660e\u3092\u7d42\u3048\u3089\u308c\u308b\u3002\n\u5b9f\u969b\u306e\u8a3c\u660e\u30b9\u30af\u30ea\u30d7\u30c8\u306f\u4e0b\u8a18\u306e\u901a\u308a\u3067\u3042\u308b\u3002\nProof.\n  - intros; subst.\n    generalize (div10_lt n); rewrite teq.\n    intros [Hlt | Heq]; auto.\n    subst; simpl in *; discriminate.\n  - now apply lt_wf.\nDefined.\n\n\u5b9f\u969b\u306b\u5909\u63db\u3092\u3057\u3066\u8a66\u3057\u3066\u307f\u3088\u3046\nEval compute in print_nat 0.\n(* = \"0\" *)\n(* : string *)\n\nEval compute in print_nat 23.\n(* = \"23\" *)\n(* : string *)\n\nEval compute in print_nat 256.\n(* = \"256\" *)\n(* : string *)\n\nEval compute in print_nat 4230.\n(* = \"4230\" *)\n(* : string *)\n\n\u5927\u4e08\u592b\u305d\u3046\u3067\u3042\u308b(\u300c\u305d\u3046\u300d\uff1f\u300d)\u3002\n\n\u304a\u307e\u3051\n\u3061\u306a\u307f\u306b\u30015001 \u304b\u3089\u306f\u30b9\u30bf\u30c3\u30af\u30aa\u30fc\u30d0\u30d5\u30ed\u30fc\u3068\u304b\u3059\u308b\u304b\u3082\u3088\u3068\u3044\u3046\u8b66\u544a\u304c\u8868\u793a\u3055\u308c\u3001\nEval compute in print_nat 5001.\n(* Warning: Stack overflow or segmentation fault happens when working with *)\n(*  large numbers in nat (observed threshold may vary from 5000 to 70000 *)\n(*  depending on your system limits and on the command executed). *)\n(* = \"5001\" *)\n(* : string *)\n\n36185 \u4ee5\u4e0a\u306b\u306a\u308b\u3068\u5b9f\u969b\u306b\u30b9\u30bf\u30c3\u30af\u30aa\u30fc\u30d0\u30d5\u30ed\u30fc\u3059\u308b\u3002\nEval compute in print_nat 36184.\n(* = \"36184\" *)\n(* : string *)\n\nEval compute in print_nat 36185.\n(* Stack overflow. *)\n\n\u306a\u304a\u3001 Check \u306e\u5834\u5408\u306b\u30b9\u30bf\u30c3\u30af\u30aa\u30fc\u30d0\u30d5\u30ed\u30fc\u3059\u308b\u306e\u306f\nCheck 36185.\n(* 36185 *)\n(*      : nat *)\n\nCheck 36186.\n(* Stack overflow. *)\n\n\u306e\u901a\u308a\u3001 36186 \u304b\u3089\u3067\u3042\u308b\u3002\n\n\u4e00\u8a00\nShow \u30af\u30e9\u30b9\u4f5c\u3063\u3066\u8272\u3005\u904a\u307c\u3046\u304b\u306a\u3041\u3068\u601d\u3063\u3066\u3044\u305f\u3068\u304d\u306e\u540d\u6b8b\u3067\u3059\u3002\n# \u307e\u3068\u3081\n\n- `n: nat` \u3092\u5341\u9032\u8868\u8a18\u306e\u6587\u5b57\u5217\u306b\u5909\u63db\u3057\u3066\u307f\u305f\n- `Functional Scheme` \u4f7f\u3048\u3070\u5927\u3057\u305f\u624b\u9593\u306f\u304b\u304b\u3089\u306a\u3044\u3002\n- [\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9(Gist)](https://gist.github.com/mathink/f9d2d9924490abfbbdefc6fbc737b4ee)\n\n# \u5fc5\u8981\u306a\u30e9\u30a4\u30d6\u30e9\u30ea\n\n```coq\nRequire Import Arith Ascii String Recdef Wf_nat.\n```\n\n\u6700\u521d\u306e\u4e09\u3064\u306f\u8a00\u308f\u305a\u3082\u304c\u306a\u3002\n\u4e00\u6841\u306e\u6570\u306f\u6587\u5b57\u5217\u3067\u306f\u306a\u304f\u6587\u5b57\u306b\u3057\u305f\u3044\u306e\u3067\u3001 `Ascii` \u3082\u5fd8\u308c\u305a\u306b\u3002\n\n`Recdef` \u306f `Function` \u30b3\u30de\u30f3\u30c9\u3092\u4f7f\u3046\u305f\u3081\u3001 `Wf_nat` \u306f `<` \u304c well-founded \u3067\u3042\u308b\u3053\u3068\u3092\u5229\u7528\u3059\u308b\u305f\u3081\u306b\u30a4\u30f3\u30dd\u30fc\u30c8\u3059\u308b\u3002\n\n# \u88dc\u52a9\u51fd\u6570\u3068\u88dc\u984c\n\n\u5341\u9032\u8868\u8a18\u3092\u3059\u308b\u306e\u3067\u3001\u81ea\u7136\u6570\u3092 10 \u3067\u5272\u3063\u305f\u5546\u3068\u4f59\u308a\u3092\u6c42\u3081\u308b\u51fd\u6570\u3092\u5b9a\u7fa9\u3059\u308b\u3002\n\u9811\u5f35\u3063\u3066 `S` \u3092\u5341\u500b\u4e26\u3079\u308b\u3002\n\n```coq\nFixpoint div10 (n: nat): nat * nat :=\n  match n with\n  | S (S (S (S (S (S (S (S (S (S n'))))))))) =>\n    let (q, r) := div10 n' in (S q, r)\n  | digit => (0, digit)\n  end.\n```\n\n\u4e00\u5fdc\u3001\u8a08\u7b97\u7d50\u679c\u306f\u30c1\u30a7\u30c3\u30af\u3057\u3066\u304a\u304f\u3002\n\u6614\u3001 [\u8a08\u7b97\u7d50\u679c\u3092\u30c1\u30a7\u30c3\u30af\u3059\u308b\u4ed5\u7d44\u307f\u3092\u4f5c\u3063\u305f](http://qiita.com/mathink/items/5bd5990c9202a3e55858) \u3051\u3069\u3001\u4eca\u56de\u306f\u5c0e\u5165\u304c\u9762\u5012\u306a\u306e\u3067\u4f7f\u308f\u305a\u3002\n\n```coq\nEval compute in div10 8.\n(* = (0, 8) *)\n(* : nat * nat *)\n\nEval compute in div10 12.\n(* = (1, 2) *)\n(* : nat * nat *)\n```\n\n\u305d\u3057\u3066\u3001\u6b21\u306e\u88dc\u984c\u304c\u5f8c\u3005\u5fc5\u8981\u306b\u306a\u308b\u306e\u3067\u8a3c\u660e\u3057\u3088\u3046\u3002\n\n```coq\nLemma div10_lt:\n  forall (n: nat),\n    let (q, r) := div10 n in (q < n \\/ n = 0).\n```\n\n\u6b32\u3057\u3044\u7d50\u8ad6\u306f `0 < n` \u6642\u306e `q < n` \u306a\u306e\u3060\u304c\u3001 `0 < n` \u3092\u4eee\u5b9a\u306b\u6301\u3063\u3066\u304f\u308b\u3068\u8a3c\u660e\u304c\u5927\u5909\u306b\u306a\u308b\u306e\u3067(\u6c17\u306b\u306a\u308b\u4eba\u306f\u3084\u3063\u3066\u307f\u3088\u3046)\u3001\u7d50\u8ad6\u90e8\u306b `n = 0` \u3092 `\\/` \u3059\u308b\u5f62\u306b\u3057\u305f\u3002\n\n\u3053\u306e\u8a3c\u660e\u3067\u306f `div10` \u306b\u95a2\u3059\u308b\u5e30\u7d0d\u6cd5\u3092\u4f7f\u3046\u306e\u3067\u3001\u3042\u3089\u304b\u3058\u3081\n\n```coq\nFunctional Scheme div10_ind := Induction for div10 Sort Prop.\n```\n\n\u3068\u3044\u3046\u30b3\u30de\u30f3\u30c9\u3092\u5b9f\u884c\u3057\u3066\u304a\u304f\u3068\u3088\u3044\u3002\n\u3059\u308b\u3068\u3001 `div10_lt` \u306e\u8a3c\u660e\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u306a\u308b\u3002\n\n```coq\nProof.\n  intros n.\n  functional induction div10 n; auto with arith.\n  left.\n  rewrite e9 in IHp.\n  destruct IHp.\n  - apply lt_n_S.\n    now repeat apply lt_S.\n  - subst; simpl in *.\n    injection e9; intros; subst; auto with arith.\nQed.\n```\n\n\u5927\u3057\u3066\u96e3\u3057\u304f\u306a\u3044\u3002\n\n\n# \u5909\u63db\u51fd\u6570\n\n\u307e\u305a\u3001\u4e00\u6841\u6bce\u306e\u5909\u63db\u51fd\u6570\u3092\u7528\u610f\u3059\u308b\u3002\n\u305d\u308c\u304c `print_digit` \u3067\u3042\u308b\u3002\n\n```coq\nOpen Scope char_scope.\nDefinition print_digit (n: nat): ascii :=\n  match n with \n  | 0 => \"0\"\n  | 1 => \"1\"\n  | 2 => \"2\"\n  | 3 => \"3\"\n  | 4 => \"4\"\n  | 5 => \"5\"\n  | 6 => \"6\"\n  | 7 => \"7\"\n  | 8 => \"8\"\n  | 9 => \"9\"\n  | _ => \" \"\n  end.\n```\n\n\u30c0\u30d6\u30eb\u30af\u30a9\u30fc\u30c6\u30fc\u30b7\u30e7\u30f3\u3067\u62ec\u3063\u3066\u3044\u308b\u304c\u3001 `char_scope` \u5185\u306a\u306e\u3067\u3053\u308c\u306f\u6587\u5b57\u3092\u8868\u3057\u3066\u3044\u308b\u3002\n\u5909\u63db\u306e\u6b63\u5f53\u6027\u3092\u793a\u3059\u76ee\u7684\u304c\u3042\u308b\u306e\u306a\u3089\u5f15\u6570\u306e\u578b\u306f `nat` \u3067\u306f\u306a\u304f `{ n | n < 10 }` \u306e\u65b9\u304c\u3088\u3044\u304b\u3082\u3057\u308c\u306a\u3044\u304c\u3001\u4eca\u56de\u306f\u5358\u7d14\u306b\u5909\u63db\u51fd\u6570\u3092\u5b9a\u7fa9\u3059\u308b\u3053\u3068\u306e\u307f\u3092\u76ee\u7684\u3068\u3057\u3066\u3044\u308b\u306e\u3067\u3001\u60f3\u5b9a\u3057\u3066\u3044\u306a\u3044\u5f15\u6570\u306b\u3064\u3044\u3066\u306f\u7a7a\u6587\u5b57\u3092\u8fd4\u3059\u3088\u3046\u306b\u3057\u3066\u3042\u308b\u3002\n\n\u305d\u3057\u3066\u3001\u3053\u306e `print_nat` \u3068 `div10` \u3092\u4f7f\u3063\u3066\u3001\u81ea\u7136\u6570\u306e\u5341\u9032\u8868\u8a18\u3092\u3059\u308b\u51fd\u6570 `print_nat` \u304c\u6b21\u306e\u3088\u3046\u306b\u5b9a\u7fa9\u3067\u304d\u308b\u3002\n\n```coq\nOpen Scope string_scope.\nFunction print_nat (n: nat){wf lt n}: string :=\n  let (q, r) := div10 n in\n  match q with\n  | O => String (print_digit r) \"\"\n  | S _ => print_nat q ++ String (print_digit r) \"\"\n  end.\n```\n\n\u304c\u3001\u3082\u3061\u308d\u3093\u3053\u308c\u3060\u3051\u3067\u7d42\u308f\u308a\u3067\u306f\u306a\u3044\u3002\u69cb\u9020\u518d\u5e30\u306b\u306a\u3063\u3066\u3044\u306a\u3044\u306e\u3067\u3001\u51fd\u6570\u306e\u505c\u6b62\u6027\u3092\u793a\u3059\u5fc5\u8981\u304c\u3042\u308b\u3002\n\n\u3053\u306e\u6642\u3001\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u4e8c\u3064\u306e\u30b5\u30d6\u30b4\u30fc\u30eb\u304c\u751f\u6210\u3055\u308c\u3066\u3044\u308b\u306f\u305a\u3067\u3042\u308b\u3002\n\n```coq\n(* 2 subgoals, subgoal 1 (ID 832) *)\n  \n(*   ============================ *)\n(*   forall n q r n0 : nat, q = S n0 -> div10 n = (S n0, r) -> S n0 < n *)\n\n(* subgoal 2 (ID 833) is: *)\n(*  well_founded lt *)\n(* (dependent evars:) *)\n```\n\n\u4e8c\u3064\u3081\u306b\u3064\u3044\u3066\u306f `Wf_nat` \u306b `lt_wf` \u3068\u3044\u3046\u305d\u306e\u307e\u307e\u306e\u88dc\u984c\u304c\u3042\u308b\u306e\u3067\u3001\u305d\u308c\u3092\u4f7f\u3048\u3070\u3088\u3044\u3002\n\u4e00\u3064\u3081\u306e\u30b4\u30fc\u30eb\u306b\u3064\u3044\u3066\u3082\u3001\u5148\u7a0b\u793a\u3057\u305f `div10_lt` \u304c\u3042\u308c\u3070\u7c21\u5358\u306b\u8a3c\u660e\u3092\u7d42\u3048\u3089\u308c\u308b\u3002\n\u5b9f\u969b\u306e\u8a3c\u660e\u30b9\u30af\u30ea\u30d7\u30c8\u306f\u4e0b\u8a18\u306e\u901a\u308a\u3067\u3042\u308b\u3002\n\n```coq\nProof.\n  - intros; subst.\n    generalize (div10_lt n); rewrite teq.\n    intros [Hlt | Heq]; auto.\n    subst; simpl in *; discriminate.\n  - now apply lt_wf.\nDefined.\n```\n\n\u5b9f\u969b\u306b\u5909\u63db\u3092\u3057\u3066\u8a66\u3057\u3066\u307f\u3088\u3046\n\n```coq\nEval compute in print_nat 0.\n(* = \"0\" *)\n(* : string *)\n\nEval compute in print_nat 23.\n(* = \"23\" *)\n(* : string *)\n\nEval compute in print_nat 256.\n(* = \"256\" *)\n(* : string *)\n\nEval compute in print_nat 4230.\n(* = \"4230\" *)\n(* : string *)\n```\n\n\u5927\u4e08\u592b\u305d\u3046\u3067\u3042\u308b(\u300c\u305d\u3046\u300d\uff1f\u300d)\u3002\n\n# \u304a\u307e\u3051\n\n\u3061\u306a\u307f\u306b\u3001`5001` \u304b\u3089\u306f\u30b9\u30bf\u30c3\u30af\u30aa\u30fc\u30d0\u30d5\u30ed\u30fc\u3068\u304b\u3059\u308b\u304b\u3082\u3088\u3068\u3044\u3046\u8b66\u544a\u304c\u8868\u793a\u3055\u308c\u3001\n\n```coq\nEval compute in print_nat 5001.\n(* Warning: Stack overflow or segmentation fault happens when working with *)\n(*  large numbers in nat (observed threshold may vary from 5000 to 70000 *)\n(*  depending on your system limits and on the command executed). *)\n(* = \"5001\" *)\n(* : string *)\n```\n\n`36185` \u4ee5\u4e0a\u306b\u306a\u308b\u3068\u5b9f\u969b\u306b\u30b9\u30bf\u30c3\u30af\u30aa\u30fc\u30d0\u30d5\u30ed\u30fc\u3059\u308b\u3002\n\n```\nEval compute in print_nat 36184.\n(* = \"36184\" *)\n(* : string *)\n\nEval compute in print_nat 36185.\n(* Stack overflow. *)\n```\n\n\u306a\u304a\u3001 `Check` \u306e\u5834\u5408\u306b\u30b9\u30bf\u30c3\u30af\u30aa\u30fc\u30d0\u30d5\u30ed\u30fc\u3059\u308b\u306e\u306f\n\n```coq\nCheck 36185.\n(* 36185 *)\n(*      : nat *)\n\nCheck 36186.\n(* Stack overflow. *)\n```\n\n\u306e\u901a\u308a\u3001 `36186` \u304b\u3089\u3067\u3042\u308b\u3002\n\n# \u4e00\u8a00\n\n`Show` \u30af\u30e9\u30b9\u4f5c\u3063\u3066\u8272\u3005\u904a\u307c\u3046\u304b\u306a\u3041\u3068\u601d\u3063\u3066\u3044\u305f\u3068\u304d\u306e\u540d\u6b8b\u3067\u3059\u3002\n", "tags": ["Coq"]}