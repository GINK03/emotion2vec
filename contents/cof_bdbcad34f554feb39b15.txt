{"context": " More than 1 year has passed since last update.\n\n\u554f\u984c\nn\u6841\u30d1\u30f3\u30c7\u30b8\u30bf\u30eb\u3067\u3042\u308b\u3068\u306f, 1\u304b\u3089n\u307e\u3067\u306e\u6570\u3092\u5404\u6841\u306b1\u3064\u305a\u3064\u6301\u3064\u3053\u3068\u3068\u3059\u308b.\n\u4e0b\u306e\u30ea\u30f3\u30af\u5148\u306b\u3042\u308b\u3088\u3046\u306a\u6570\u5b66\u7684\u5b9a\u7fa9\u3068\u306f\u7570\u306a\u308b\n\u4f8b\u3048\u30702143\u306f4\u6841\u30d1\u30f3\u30c7\u30b8\u30bf\u30eb\u6570\u3067\u3042\u308a, \u304b\u3064\u7d20\u6570\u3067\u3042\u308b. n\u6841\uff08\u3053\u306e\u554f\u984c\u306e\u5b9a\u7fa9\u3067\u306f9\u6841\u4ee5\u4e0b\uff09\u30d1\u30f3\u30c7\u30b8\u30bf\u30eb\u306a\u7d20\u6570\u306e\u4e2d\u3067\u6700\u5927\u306e\u6570\u3092\u7b54\u3048\u3088.\nhttp://odz.sakura.ne.jp/projecteuler/index.php?cmd=read&page=Problem%2041\n\n\u6570\u5b66\u7684\u8003\u5bdf\n\u5404\u6841\u306e\u6570\u306e\u548c\u304c3\u306e\u500d\u6570\u306b\u306a\u308c\u3070\u305d\u306e\u6570\u81ea\u4f53\u30823\u306e\u500d\u6570\u306b\u306a\u308b\u3068\u3053\u308d\u30019\u6841\u30018\u6841\u30016\u6841\u30015\u6841\u30013\u6841\u30012\u6841\u306e\u30d1\u30f3\u30c7\u30b8\u30bf\u30eb\u306f\u5404\u6841\u306e\u548c\u304c3\u306e\u500d\u6570\u306b\u306a\u308b\u306e\u3067\u3001\u7d20\u6570\u306b\u306f\u306a\u308a\u3048\u306a\u3044\u3002\u3057\u305f\u304c\u3063\u3066\u30017\u6841\u30684\u6841\u3068\u3092\u30c1\u30a7\u30c3\u30af\u3059\u308c\u3070\u3088\u3044\u3002\n\n\u56de\u7b54\n\u4ee5\u524d\u4f5c\u3063\u305f\u30d1\u30f3\u30c7\u30b8\u30bf\u30eb\u6570\u30b8\u30a7\u30cd\u30ec\u30fc\u30bf\u3092\u4f7f\u3063\u3066\u30d1\u30f3\u30c7\u30b8\u30bf\u30eb\u6570\u3092\u4f5c\u6210\u3059\u308b\u3002\n\u5927\u304d\u306a\u30d1\u30f3\u30c7\u30b8\u30bf\u30eb\u6570\u304b\u3089\u7d20\u6570\u304b\u5426\u304b\u3092\u5224\u5b9a\u3059\u308b\u3002\n# coding: utf-8\n# Here your code !\nimport copy\nimport math\ndef pandigital(digit,seq1,seq2=[]):\n  iter1 = map(str,seq1)\n  if seq2:\n    iter2 = map(str,seq2)\n  else:\n    iter2 = copy.deepcopy(iter1)\n  for d in range(digit-1):\n    iter1 = (x+y for x in iter1 for y in iter2 if not (y in x))\n  return iter1\n\ndef get_prime_boolean(max):\n    bool = [False,False]+[True]*(max-1)\n    # 2\u306e\u500d\u6570\u3092False\u306b\n    bool[4::2] = [False] * (len(bool[4::2]))\n    p = 3\n    p_max = int(math.sqrt(max))+1\n    while p<=p_max:\n        if bool[p]:\n          bool[p**2::p] = [False] * (len(bool[p**2::p]))\n        p+=2\n    return bool\n\ndef get_prime_list(bool):\n    length = len(bool)\n    return [i for i in range(2,length) if bool[i]]\n\ndef get_primes(max):\n    bool = get_prime_boolean(max)\n    list = get_prime_list(bool)\n    return {'bool':bool,'list':list}\n\ndef is_prime(num,pri):\n  num = int(num)\n  if num < len(pri['bool']):\n    return pri['bool'][num]\n\n  M = (num**0.5)+1\n  #print num\n  for p in pri['list']:\n    if p > M:\n      return True\n    if (num % p) == 0:\n      return False\n\n  p = pri['list'][-1]+2\n  while p<M:\n    if (num % p) == 0:\n      return False\n    p += 2\n  return True\n\n\ndef main():\n    MAX=10**7\n    pri = get_primes(MAX)\n    ans = 0\n    for i in [7, 4]:\n        for pdg in pandigital(i,range(i,0,-1)):\n            if is_prime(pdg,pri):\n                ans = pdg\n                break\n        if ans:\n            break\n    print ans    \n\nmain()\n\n\u554f\u984c\n---\nn\u6841\u30d1\u30f3\u30c7\u30b8\u30bf\u30eb\u3067\u3042\u308b\u3068\u306f, 1\u304b\u3089n\u307e\u3067\u306e\u6570\u3092\u5404\u6841\u306b1\u3064\u305a\u3064\u6301\u3064\u3053\u3068\u3068\u3059\u308b.\n\n\u4e0b\u306e\u30ea\u30f3\u30af\u5148\u306b\u3042\u308b\u3088\u3046\u306a\u6570\u5b66\u7684\u5b9a\u7fa9\u3068\u306f\u7570\u306a\u308b\n\n\u4f8b\u3048\u30702143\u306f4\u6841\u30d1\u30f3\u30c7\u30b8\u30bf\u30eb\u6570\u3067\u3042\u308a, \u304b\u3064\u7d20\u6570\u3067\u3042\u308b. n\u6841\uff08\u3053\u306e\u554f\u984c\u306e\u5b9a\u7fa9\u3067\u306f9\u6841\u4ee5\u4e0b\uff09\u30d1\u30f3\u30c7\u30b8\u30bf\u30eb\u306a\u7d20\u6570\u306e\u4e2d\u3067\u6700\u5927\u306e\u6570\u3092\u7b54\u3048\u3088.\nhttp://odz.sakura.ne.jp/projecteuler/index.php?cmd=read&page=Problem%2041\n\n\u6570\u5b66\u7684\u8003\u5bdf\n---\n\u5404\u6841\u306e\u6570\u306e\u548c\u304c3\u306e\u500d\u6570\u306b\u306a\u308c\u3070\u305d\u306e\u6570\u81ea\u4f53\u30823\u306e\u500d\u6570\u306b\u306a\u308b\u3068\u3053\u308d\u30019\u6841\u30018\u6841\u30016\u6841\u30015\u6841\u30013\u6841\u30012\u6841\u306e\u30d1\u30f3\u30c7\u30b8\u30bf\u30eb\u306f\u5404\u6841\u306e\u548c\u304c3\u306e\u500d\u6570\u306b\u306a\u308b\u306e\u3067\u3001\u7d20\u6570\u306b\u306f\u306a\u308a\u3048\u306a\u3044\u3002\u3057\u305f\u304c\u3063\u3066\u30017\u6841\u30684\u6841\u3068\u3092\u30c1\u30a7\u30c3\u30af\u3059\u308c\u3070\u3088\u3044\u3002\n\n\u56de\u7b54\n---\n\u4ee5\u524d\u4f5c\u3063\u305f\u30d1\u30f3\u30c7\u30b8\u30bf\u30eb\u6570\u30b8\u30a7\u30cd\u30ec\u30fc\u30bf\u3092\u4f7f\u3063\u3066\u30d1\u30f3\u30c7\u30b8\u30bf\u30eb\u6570\u3092\u4f5c\u6210\u3059\u308b\u3002\n\u5927\u304d\u306a\u30d1\u30f3\u30c7\u30b8\u30bf\u30eb\u6570\u304b\u3089\u7d20\u6570\u304b\u5426\u304b\u3092\u5224\u5b9a\u3059\u308b\u3002\n\n\n```py\n# coding: utf-8\n# Here your code !\nimport copy\nimport math\ndef pandigital(digit,seq1,seq2=[]):\n  iter1 = map(str,seq1)\n  if seq2:\n    iter2 = map(str,seq2)\n  else:\n    iter2 = copy.deepcopy(iter1)\n  for d in range(digit-1):\n    iter1 = (x+y for x in iter1 for y in iter2 if not (y in x))\n  return iter1\n\ndef get_prime_boolean(max):\n    bool = [False,False]+[True]*(max-1)\n    # 2\u306e\u500d\u6570\u3092False\u306b\n    bool[4::2] = [False] * (len(bool[4::2]))\n    p = 3\n    p_max = int(math.sqrt(max))+1\n    while p<=p_max:\n        if bool[p]:\n          bool[p**2::p] = [False] * (len(bool[p**2::p]))\n        p+=2\n    return bool\n\ndef get_prime_list(bool):\n    length = len(bool)\n    return [i for i in range(2,length) if bool[i]]\n\ndef get_primes(max):\n    bool = get_prime_boolean(max)\n    list = get_prime_list(bool)\n    return {'bool':bool,'list':list}\n\ndef is_prime(num,pri):\n  num = int(num)\n  if num < len(pri['bool']):\n    return pri['bool'][num]\n\n  M = (num**0.5)+1\n  #print num\n  for p in pri['list']:\n    if p > M:\n      return True\n    if (num % p) == 0:\n      return False\n\n  p = pri['list'][-1]+2\n  while p<M:\n    if (num % p) == 0:\n      return False\n    p += 2\n  return True\n\n\ndef main():\n    MAX=10**7\n    pri = get_primes(MAX)\n    ans = 0\n    for i in [7, 4]:\n        for pdg in pandigital(i,range(i,0,-1)):\n            if is_prime(pdg,pri):\n                ans = pdg\n                break\n        if ans:\n            break\n    print ans    \n\nmain()\n```\n", "tags": ["Python", "ProjectEuler"]}