{"tags": ["PowerShell", "C#", ".NET"], "context": " More than 1 year has passed since last update.\n\n\u591a\u5206\u6e90\u6d41\nRuby - \u30de\u30a4\u30ca\u30f3\u30d0\u30fc\u306e\u30c1\u30a7\u30c3\u30af\u30c7\u30b8\u30c3\u30c8\u3092\u8a08\u7b97\u3059\u308b - Qiita\n\n\u3084\u3063\u3066\u307f\u307e\u3057\u3087\u3046\n\nPowerShell\n\nCheck-MyNumber.ps1\nfilter Get-CalcResult{\n    if($_ -le 6 ){\n        return [int]$digits[$digits.Length - 2 - $_] * ($_ + 1)\n    }else{\n        return [int]$digits[$digits.Length - 2 - $_] * ($_ - 5)\n    }\n}\n\nfunction Check-MyNumber{\n    param(\n        [String] $MyNumber\n    )\n    if($MyNumber.Length -ne 12){\n        throw New-Object ArgumentException(\"\u30de\u30a4\u30ca\u30f3\u30d0\u30fc\u306f12\u6841\u3067\u3059\")\n    }\n\n    $digits = $MyNumber -split \"\" \n\n    $checkDigit = $digits[$digits.Length - 2];\n\n    $sum = 0\n    (1..11) | Get-CalcResult | %{$sum += $_}\n\n    $reminder = $sum % 11\n\n    if($reminder -le 1 ){\n        return $checkDigit -eq 0\n    }else{\n        return $checkDigit -eq (11 - $reminder)\n    }\n}\n\nPS C:\\> Check-MyNumber 123456789010\nFalse\nPS C:\\> Check-MyNumber 123456789011\nFalse\nPS C:\\> Check-MyNumber 123456789012\nFalse\nPS C:\\> Check-MyNumber 123456789013\nFalse\nPS C:\\> Check-MyNumber 123456789014\nFalse\nPS C:\\> Check-MyNumber 123456789015\nFalse\nPS C:\\> Check-MyNumber 123456789016\nFalse\nPS C:\\> Check-MyNumber 123456789017\nFalse\nPS C:\\> Check-MyNumber 123456789018\nTrue\nPS C:\\> Check-MyNumber 123456789019\nFalse\nPS C:\\> Check-MyNumber 023456789013\nTrue\n\n\n\nC#\n\u65e2\u306b\u3084\u3089\u308c\u3066\u3044\u308b\u65b9\u3044\u307e\u3059\u304c\nC#\u3067\u30de\u30a4\u30ca\u30f3\u30d0\u30fc\u306e\u30c1\u30a7\u30c3\u30af\u30c7\u30b8\u30c3\u30c8\u3092\u8a08\u7b97\u3059\u308b - Qiita\n\nProgram.cs\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Threading.Tasks;\nusing static System.Console;\n\nnamespace ValidateMyNumber\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            WriteLine(ValidateMyNumber(\"123456789010\")); //=>False\n            WriteLine(ValidateMyNumber(\"123456789011\")); //=>False\n            WriteLine(ValidateMyNumber(\"123456789012\")); //=>False\n            WriteLine(ValidateMyNumber(\"123456789013\")); //=>False\n            WriteLine(ValidateMyNumber(\"123456789014\")); //=>False\n            WriteLine(ValidateMyNumber(\"123456789015\")); //=>False\n            WriteLine(ValidateMyNumber(\"123456789016\")); //=>False\n            WriteLine(ValidateMyNumber(\"123456789017\")); //=>False\n            WriteLine(ValidateMyNumber(\"123456789018\")); //=>True\n            WriteLine(ValidateMyNumber(\"123456789019\")); //=>False\n            WriteLine(ValidateMyNumber(\"023456789013\")); //=>True\n\n            ReadLine();\n        }\n\n        public static bool ValidateMyNumber(string mynumber)\n        {\n            if (mynumber.Length != 12)\n                throw new ArgumentException(\"\u30de\u30a4\u30ca\u30f3\u30d0\u30fc\u306f12\u6841\u3067\u3059\");\n\n            var digits = mynumber.Select(x => int.Parse(x.ToString())).ToArray();\n\n            var checkDigit = digits.Last();\n\n            var reminder = Enumerable.Range(1, 11)\n                .Select(n => digits[digits.Length - 1 - n] * (n <= 6 ? n + 1 : n - 5))\n                .Sum() % 11;\n            return checkDigit == (reminder <= 1 ? 0 : 11 - reminder);\n        }\n    }\n}\n\n\n\n# \u591a\u5206\u6e90\u6d41\n[Ruby - \u30de\u30a4\u30ca\u30f3\u30d0\u30fc\u306e\u30c1\u30a7\u30c3\u30af\u30c7\u30b8\u30c3\u30c8\u3092\u8a08\u7b97\u3059\u308b - Qiita](http://qiita.com/qube81/items/fa6ef94d3c8615b0ce64)\n\n# \u3084\u3063\u3066\u307f\u307e\u3057\u3087\u3046\n\n## PowerShell\n```ps1:Check-MyNumber.ps1\nfilter Get-CalcResult{\n    if($_ -le 6 ){\n        return [int]$digits[$digits.Length - 2 - $_] * ($_ + 1)\n    }else{\n        return [int]$digits[$digits.Length - 2 - $_] * ($_ - 5)\n    }\n}\n\nfunction Check-MyNumber{\n    param(\n        [String] $MyNumber\n    )\n    if($MyNumber.Length -ne 12){\n        throw New-Object ArgumentException(\"\u30de\u30a4\u30ca\u30f3\u30d0\u30fc\u306f12\u6841\u3067\u3059\")\n    }\n\n    $digits = $MyNumber -split \"\" \n\n    $checkDigit = $digits[$digits.Length - 2];\n\n    $sum = 0\n    (1..11) | Get-CalcResult | %{$sum += $_}\n\n    $reminder = $sum % 11\n    \n    if($reminder -le 1 ){\n        return $checkDigit -eq 0\n    }else{\n        return $checkDigit -eq (11 - $reminder)\n    }\n}\n\nPS C:\\> Check-MyNumber 123456789010\nFalse\nPS C:\\> Check-MyNumber 123456789011\nFalse\nPS C:\\> Check-MyNumber 123456789012\nFalse\nPS C:\\> Check-MyNumber 123456789013\nFalse\nPS C:\\> Check-MyNumber 123456789014\nFalse\nPS C:\\> Check-MyNumber 123456789015\nFalse\nPS C:\\> Check-MyNumber 123456789016\nFalse\nPS C:\\> Check-MyNumber 123456789017\nFalse\nPS C:\\> Check-MyNumber 123456789018\nTrue\nPS C:\\> Check-MyNumber 123456789019\nFalse\nPS C:\\> Check-MyNumber 023456789013\nTrue\n```\n\n## C# \n\u65e2\u306b\u3084\u3089\u308c\u3066\u3044\u308b\u65b9\u3044\u307e\u3059\u304c\n[C#\u3067\u30de\u30a4\u30ca\u30f3\u30d0\u30fc\u306e\u30c1\u30a7\u30c3\u30af\u30c7\u30b8\u30c3\u30c8\u3092\u8a08\u7b97\u3059\u308b - Qiita](http://qiita.com/whitebell/items/5982055e6768960496db)\n\n```csharp:Program.cs\nusing System;\nusing System.Collections.Generic;\nusing System.Linq;\nusing System.Text;\nusing System.Threading.Tasks;\nusing static System.Console;\n\nnamespace ValidateMyNumber\n{\n    class Program\n    {\n        static void Main(string[] args)\n        {\n            WriteLine(ValidateMyNumber(\"123456789010\")); //=>False\n            WriteLine(ValidateMyNumber(\"123456789011\")); //=>False\n            WriteLine(ValidateMyNumber(\"123456789012\")); //=>False\n            WriteLine(ValidateMyNumber(\"123456789013\")); //=>False\n            WriteLine(ValidateMyNumber(\"123456789014\")); //=>False\n            WriteLine(ValidateMyNumber(\"123456789015\")); //=>False\n            WriteLine(ValidateMyNumber(\"123456789016\")); //=>False\n            WriteLine(ValidateMyNumber(\"123456789017\")); //=>False\n            WriteLine(ValidateMyNumber(\"123456789018\")); //=>True\n            WriteLine(ValidateMyNumber(\"123456789019\")); //=>False\n            WriteLine(ValidateMyNumber(\"023456789013\")); //=>True\n\n            ReadLine();\n        }\n\n        public static bool ValidateMyNumber(string mynumber)\n        {\n            if (mynumber.Length != 12)\n                throw new ArgumentException(\"\u30de\u30a4\u30ca\u30f3\u30d0\u30fc\u306f12\u6841\u3067\u3059\");\n\n            var digits = mynumber.Select(x => int.Parse(x.ToString())).ToArray();\n\n            var checkDigit = digits.Last();\n\n            var reminder = Enumerable.Range(1, 11)\n                .Select(n => digits[digits.Length - 1 - n] * (n <= 6 ? n + 1 : n - 5))\n                .Sum() % 11;\n            return checkDigit == (reminder <= 1 ? 0 : 11 - reminder);\n        }\n    }\n}\n\n```\n"}