{"context": "\n\n\u6982\u8981\nEloquent \u306f Laravel \u3067\u6a19\u6e96\u3067\u4f7f\u3048\u308b ORM \u3067\u3059\u3002\nActiveRecord \u306a\u306e\u3067\u3001\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u64cd\u4f5c\u3092\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u6307\u5411\u306e\u67a0\u7d44\u307f\u306e\u4e2d\u3067\u884c\u3048\u308b\u306e\u304c\u5927\u5909\u4fbf\u5229\u306a\u3093\u3067\u3059\u304c\u3001DDD \u306b\u304a\u3051\u308b\u30ec\u30a4\u30e4\u30fc\u30c9\u30a2\u30fc\u30ad\u30c6\u30af\u30c1\u30e3\u3092\u9069\u7528\u3057\u3088\u3046\u3068\u3059\u308b\u3068\u3001\u30a4\u30f3\u30d5\u30e9\u30b9\u30c8\u30e9\u30af\u30c1\u30e3\u5c64\u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3067\u3042\u308b ORM \u3068\u30c9\u30e1\u30a4\u30f3\u5c64\u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3067\u3042\u308b\u30a8\u30f3\u30c6\u30a3\u30c6\u30a3\u304c\u540c\u4e00\u306e\u30af\u30e9\u30b9\u306b\u306a\u3063\u3066\u3044\u308b\u306e\u3067\u3001\u3053\u308c\u3089\u3092\u30ec\u30a4\u30e4\u30fc\u3067\u5206\u5272\u3057\u305f\u3044\u306e\u306b\u5206\u3051\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u305b\u3093\u3002\n\u4f55\u304c\u554f\u984c\u304b\u3068\u3044\u3046\u3068\u3001\u5358\u4f53\u30c6\u30b9\u30c8\u3067\u30d3\u30b8\u30cd\u30b9\u30ed\u30b8\u30c3\u30af\u306e\u30c6\u30b9\u30c8\u3092\u3057\u305f\u3044\u306e\u306b\u3001\u305d\u3053\u306b\u30a4\u30f3\u30d5\u30e9\u30b9\u30c8\u30e9\u30af\u30c1\u30e3\u5c64\u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u304c\u30bb\u30c3\u30c8\u3067\u304f\u3063\u3064\u3044\u3066\u304d\u3066\u3057\u307e\u3046\u306e\u3067 (\u53b3\u5bc6\u306b\u8a00\u3046\u3068\u3001\u540c\u4e00\u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3060\u304b\u3089\u30bb\u30c3\u30c8\u3067\u306f\u306a\u3044\u3093\u3067\u3059\u304c)\u3001\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u3078\u306e\u4f9d\u5b58\u95a2\u4fc2\u3092\u5207\u308a\u96e2\u3059\u3053\u3068\u304c\u3067\u304d\u305a\u3001\u5358\u4f53\u30c6\u30b9\u30c8\u3067\u3042\u308b\u306b\u3082\u304b\u304b\u308f\u3089\u305a\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u304c\u306a\u3044\u3068\u30c6\u30b9\u30c8\u304c\u3067\u304d\u306a\u3044\u3001\u3068\u3044\u3046\u70b9\u3067\u3059\u3002\n\u82e6\u8089\u306e\u7b56\u3068\u3057\u3066\u3001\u30ea\u30dd\u30b8\u30c8\u30ea\u30af\u30e9\u30b9\u3092\u3064\u304f\u3063\u3066\u3001\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u64cd\u4f5c\u306f\u30ea\u30dd\u30b8\u30c8\u30ea\u30af\u30e9\u30b9\u3092\u7d4c\u7531\u3057\u3066\u884c\u3046\u3088\u3046\u306b\u3057\u3066\u307f\u307e\u3057\u305f\u3002\n\n\u74b0\u5883\nPHP 5.6.9\nLaravel 5.1\nPHPUnit 4.1 <- \u53e4\u3044\u2026\u3051\u3069\u6700\u65b0\u3067\u3082\u5909\u308f\u3089\u306a\u3044\u3068\u601d\u3044\u307e\u3059\n\n\u8981\u4ef6\n\n\u3042\u308b Entry \u30af\u30e9\u30b9\u3092\u767b\u9332\u3059\u308b\u969b\u306b\u3001yyyymmdd + \u4e09\u6841\u306e\u30b7\u30fc\u30b1\u30f3\u30b7\u30e3\u30eb\u306a\u6570\u5024 (\u524d\u30bc\u30ed\u3042\u308a) \u3067\u4e00\u610f\u306b\u306a\u308b\u756a\u53f7\u3092\u751f\u6210\u3057\u3066\u4fdd\u5b58\u3059\u308b\u5fc5\u8981\u304c\u3042\u308b\n\n\n\u4f8b) 20160701001\n\n\n\u73fe\u5728\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u306b\u767b\u9332\u3055\u308c\u3066\u3044\u308b\u30ec\u30b3\u30fc\u30c9\u306e\u4e2d\u3067\u6700\u5927\u5024\u3092\u63a2\u3057\u3001\u4eca\u65e5\u306e1\u4ef6\u76ee\u3067\u3042\u308c\u3070 20160701001 \u3068\u306a\u308b\u3057\u3001\u3059\u3067\u306b\u767b\u9332\u3055\u308c\u3066\u3044\u308c\u3070 20160701002 \u3068\u306a\u308b\n\u3053\u306e\u307e\u307e\u3060\u3068\u305f\u3057\u304b\u306b\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u306b\u4f9d\u5b58\u3057\u305f\u51e6\u7406\u3067\u306f\u3042\u308b\u304c\u3001\u73fe\u5728\u306e\u6700\u5927\u5024\u3092\u5143\u306b\u7b97\u51fa\u3067\u304d\u308b\u306e\u3067\u3001\u4ee5\u4e0b\u306e\u30a4\u30f3\u30bf\u30d5\u30a7\u30fc\u30b9\u306e\u95a2\u6570\u3092\u4f7f\u3048\u3070\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u306b\u4f9d\u5b58\u305b\u305a\u306b\u66f8\u3051\u308b\u306f\u305a\n\n\n(Max, Date) -> (Next)\n\u4f8b1) ('20160630001', '2016-07-01') -> ('20160701001')\n\u4f8b2) ('20160701001', '2016-07-01') -> ('20160701002')\n\n\n\n\n\u3084\u3063\u305f\u3053\u3068\n\nEntryNumberGenerator \u30af\u30e9\u30b9\u3092\u3064\u304f\u308a\u3001\u756a\u53f7\u3092\u751f\u6210\u3055\u305b\u308b\nEntryRepository \u30af\u30e9\u30b9\u3092\u3064\u304f\u308a\u3001\u6700\u5927\u5024\u3092\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u304b\u3089\u53d6\u5f97\u3055\u305b\u308b\nEntry \u30af\u30e9\u30b9\u306e\u751f\u6210\u6642\u306b\u756a\u53f7\u3092\u30bb\u30c3\u30c8\u3057\u3066\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u306b\u4fdd\u5b58\u3059\u308b\n\n\n\u8a73\u7d30\n\n\u30c6\u30b9\u30c8\u30af\u30e9\u30b9\u3092\u66f8\u304f\n\u30c6\u30b9\u30c8\u30d5\u30a1\u30fc\u30b9\u30c8\u3067\u3084\u308a\u307e\u3059\u3002\n\nEntryNumberGeneratorTest.php\n<?php\n\nclass EntryNumberGeneratorTest extends TestCase\n{\n    /**\n    * @dataProvider getTestDataForTestGenerate\n    */\n    public function testGenerate($maxNo, $date, $expectedResult)\n    {\n        $mockRepo = Mockery::mock('EntryRepository');\n        $mockRepo->shouldReceive('getMaxEntryNumber')->andReturn($maxNo);\n\n        // $date\u306b\u904e\u53bb\u306e\u65e5\u4ed8\u3092\u6307\u5b9a\u3059\u308b\u3068\u4f8b\u5916\n        if ($expectedResult === null) {\n            $this->setExpectedException(\\InvalidArgumentException::class);\n        }\n\n        $generator = new EntryNumberGenerator($mockRepo);\n        $entryNo = $generator->generate($date);\n        $this->assertEquals($expectedResult, $entryNo);\n    }\n\n    public function getTestDataForTestGenerate()\n    {\n        return [\n            // \u3042\u308b\u65e5\u4ed8\u30672\u4ef6\u76ee\n            'success:same date' => [\n                '20160701001', strtotime('2016-07-01'), '20160701002',\n            ],\n            // \u3042\u308b\u65e5\u4ed8\u30671\u4ef6\u76ee\n            'success:another date' => [\n                '20160701001', strtotime('2016-07-02'), '20160702001',\n            ],\n            // entry\u30ec\u30b3\u30fc\u30c9\u304c\u4e00\u4ef6\u3082\u306a\u3044\u3068\u304d\u306fmaxNo\u306fnull\u306b\u306a\u308b\n            'success:first record' => [\n                null, strtotime('2016-07-01'), '20160701001',\n            ],\n            // \u904e\u53bb\u306e\u65e5\u4ed8\u306f\u6307\u5b9a\u3067\u304d\u306a\u3044\n            'failure:another date' => [\n                '20160701001', strtotime('2016-06-30'), null,\n            ],\n        ];\n    }\n\n\n\n\u30c6\u30b9\u30c8\u3092\u5b9f\u884c\u3059\u308b\n(\u5fc5\u305a\u5931\u6557\u3059\u308b\u306e\u3067\u7701\u7565\u3002\u5100\u5f0f\u306e\u3088\u3046\u306a\u3082\u306e)\n\n\u30d7\u30ed\u30c0\u30af\u30c8\u30b3\u30fc\u30c9\u3092\u66f8\u304f\n\nEntryNumberGenerator.php\n<?php\nnamespace App;\n\nuse App\\Repositories\\EntryRepository;\n\nclass EntryNumberGenerator\n{\n    /** @var EntryRepository */\n    private $repository;\n\n    public function __construct(EntryRepository $repository)\n    {\n        $this->repository = $repository;\n    }\n\n    /**\n    * @throws InvalidArgumentException $timestamp \u306b\u904e\u53bb\u306e\u65e5\u6642\u304c\u6307\u5b9a\u3055\u308c\u305f\u3068\u304d\n    */\n    public function generate($timestamp)\n    {\n        $ymd = date('ymd', $timestamp);\n        $maxEntryNo = $this->repository->getMaxEstimateNumber();\n        if ($maxEntryNo) {\n            list($maxYmd, $maxSeq) = sscanf($maxEntryNo, '%6s%3d');\n        } else {\n            $maxYmd = 0;\n            $maxSeq = 0;\n        }\n        if ($maxYmd === $ymd) {\n            $seq = $maxSeq + 1;\n        } elseif ($maxYmd < $ymd) {\n            $seq = 1;\n        } else {\n            throw new \\InvalidArgumentException(sprintf('timestamp should be younger than the date in the max number. max=%s, argument=%s', $maxYmd, $ymd));\n        }\n        return sprintf('%6d%03d', $ymd, $seq);\n    }\n}\n\n\n\n\u30c6\u30b9\u30c8\u3092\u5b9f\u884c\u3059\u308b\n$ ./vendor/bin/phpunit tests/EntryNumberGeneratorTest.php\nPHPUnit 4.1.6 by Sebastian Bergmann.\nConfiguration read from /vagrant/phpunit.xml\n....\nTime: 2.63 seconds, Memory: 25.25MB\nOK (4 tests, 4 assertions)\n\n(\u2229\u00b4\u2200\uff40)\u2229\uff9c\uff70\uff72\n\n\u3061\u306a\u307f\u306b\n\u30ea\u30dd\u30b8\u30c8\u30ea\u30af\u30e9\u30b9\u306e\u5b9f\u88c5\u3082\u3044\u3061\u304a\u3046\u8f09\u305b\u3066\u304a\u304d\u307e\u3059\u3002\n\nEntryRepository.class\n<?php\nnamespace App\\Repositories;\n\nuse App\\Entry;\n\nclass EntryRepository\n{\n    public function getMaxEntryNumber()\n    {\n        $entry = Entry::orderBy('entry_no', 'desc')->first();\n        if (!$entry) {\n            return null;\n        }\n        return $entry->entry_no;\n}\n\n\n\n\u307e\u3068\u3081\n\nDDD \u3081\u3093\u3069\u304f\u3055\u3044\u3051\u3069\u3001\u4f9d\u5b58\u95a2\u4fc2\u3092\u6975\u529b\u6e1b\u3089\u3059\u3063\u3066\u3044\u3046\u70b9\u306b\u304a\u3044\u3066\u306f\u6069\u6075\u3042\u308a\u307e\u3059\u306d\n\nDDD \u7684\u306b\u3053\u3053\u304c\u9055\u3046\u3093\u3058\u3083\u306a\u3044\u304b\u3068\u304b\u3082\u3063\u3068\u3044\u3044\u65b9\u6cd5\u3042\u308b\u3088\u3068\u304b\u3042\u308a\u307e\u3057\u305f\u3089\u30b3\u30e1\u30f3\u30c8\u3057\u3066\u3044\u305f\u3060\u3051\u308c\u3070\u52a9\u304b\u308a\u307e\u3059\u3002\n\n## \u6982\u8981\n\nEloquent \u306f Laravel \u3067\u6a19\u6e96\u3067\u4f7f\u3048\u308b ORM \u3067\u3059\u3002\nActiveRecord \u306a\u306e\u3067\u3001\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u64cd\u4f5c\u3092\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u6307\u5411\u306e\u67a0\u7d44\u307f\u306e\u4e2d\u3067\u884c\u3048\u308b\u306e\u304c\u5927\u5909\u4fbf\u5229\u306a\u3093\u3067\u3059\u304c\u3001DDD \u306b\u304a\u3051\u308b\u30ec\u30a4\u30e4\u30fc\u30c9\u30a2\u30fc\u30ad\u30c6\u30af\u30c1\u30e3\u3092\u9069\u7528\u3057\u3088\u3046\u3068\u3059\u308b\u3068\u3001\u30a4\u30f3\u30d5\u30e9\u30b9\u30c8\u30e9\u30af\u30c1\u30e3\u5c64\u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3067\u3042\u308b ORM \u3068\u30c9\u30e1\u30a4\u30f3\u5c64\u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3067\u3042\u308b\u30a8\u30f3\u30c6\u30a3\u30c6\u30a3\u304c\u540c\u4e00\u306e\u30af\u30e9\u30b9\u306b\u306a\u3063\u3066\u3044\u308b\u306e\u3067\u3001\u3053\u308c\u3089\u3092\u30ec\u30a4\u30e4\u30fc\u3067\u5206\u5272\u3057\u305f\u3044\u306e\u306b\u5206\u3051\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u305b\u3093\u3002\n\n\u4f55\u304c\u554f\u984c\u304b\u3068\u3044\u3046\u3068\u3001\u5358\u4f53\u30c6\u30b9\u30c8\u3067\u30d3\u30b8\u30cd\u30b9\u30ed\u30b8\u30c3\u30af\u306e\u30c6\u30b9\u30c8\u3092\u3057\u305f\u3044\u306e\u306b\u3001\u305d\u3053\u306b\u30a4\u30f3\u30d5\u30e9\u30b9\u30c8\u30e9\u30af\u30c1\u30e3\u5c64\u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u304c\u30bb\u30c3\u30c8\u3067\u304f\u3063\u3064\u3044\u3066\u304d\u3066\u3057\u307e\u3046\u306e\u3067 (\u53b3\u5bc6\u306b\u8a00\u3046\u3068\u3001\u540c\u4e00\u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3060\u304b\u3089\u30bb\u30c3\u30c8\u3067\u306f\u306a\u3044\u3093\u3067\u3059\u304c)\u3001\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u3078\u306e\u4f9d\u5b58\u95a2\u4fc2\u3092\u5207\u308a\u96e2\u3059\u3053\u3068\u304c\u3067\u304d\u305a\u3001\u5358\u4f53\u30c6\u30b9\u30c8\u3067\u3042\u308b\u306b\u3082\u304b\u304b\u308f\u3089\u305a\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u304c\u306a\u3044\u3068\u30c6\u30b9\u30c8\u304c\u3067\u304d\u306a\u3044\u3001\u3068\u3044\u3046\u70b9\u3067\u3059\u3002\n\n\u82e6\u8089\u306e\u7b56\u3068\u3057\u3066\u3001\u30ea\u30dd\u30b8\u30c8\u30ea\u30af\u30e9\u30b9\u3092\u3064\u304f\u3063\u3066\u3001\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u64cd\u4f5c\u306f\u30ea\u30dd\u30b8\u30c8\u30ea\u30af\u30e9\u30b9\u3092\u7d4c\u7531\u3057\u3066\u884c\u3046\u3088\u3046\u306b\u3057\u3066\u307f\u307e\u3057\u305f\u3002\n\n### \u74b0\u5883\n\nPHP 5.6.9\nLaravel 5.1\nPHPUnit 4.1 <- \u53e4\u3044\u2026\u3051\u3069\u6700\u65b0\u3067\u3082\u5909\u308f\u3089\u306a\u3044\u3068\u601d\u3044\u307e\u3059\n\n### \u8981\u4ef6\n\n- \u3042\u308b Entry \u30af\u30e9\u30b9\u3092\u767b\u9332\u3059\u308b\u969b\u306b\u3001yyyymmdd + \u4e09\u6841\u306e\u30b7\u30fc\u30b1\u30f3\u30b7\u30e3\u30eb\u306a\u6570\u5024 (\u524d\u30bc\u30ed\u3042\u308a) \u3067\u4e00\u610f\u306b\u306a\u308b\u756a\u53f7\u3092\u751f\u6210\u3057\u3066\u4fdd\u5b58\u3059\u308b\u5fc5\u8981\u304c\u3042\u308b\n\t- \u4f8b) 20160701001\n- \u73fe\u5728\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u306b\u767b\u9332\u3055\u308c\u3066\u3044\u308b\u30ec\u30b3\u30fc\u30c9\u306e\u4e2d\u3067\u6700\u5927\u5024\u3092\u63a2\u3057\u3001\u4eca\u65e5\u306e1\u4ef6\u76ee\u3067\u3042\u308c\u3070 20160701001 \u3068\u306a\u308b\u3057\u3001\u3059\u3067\u306b\u767b\u9332\u3055\u308c\u3066\u3044\u308c\u3070 20160701002 \u3068\u306a\u308b\n- \u3053\u306e\u307e\u307e\u3060\u3068\u305f\u3057\u304b\u306b\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u306b\u4f9d\u5b58\u3057\u305f\u51e6\u7406\u3067\u306f\u3042\u308b\u304c\u3001\u73fe\u5728\u306e\u6700\u5927\u5024\u3092\u5143\u306b\u7b97\u51fa\u3067\u304d\u308b\u306e\u3067\u3001\u4ee5\u4e0b\u306e\u30a4\u30f3\u30bf\u30d5\u30a7\u30fc\u30b9\u306e\u95a2\u6570\u3092\u4f7f\u3048\u3070\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u306b\u4f9d\u5b58\u305b\u305a\u306b\u66f8\u3051\u308b\u306f\u305a\n\t- (Max, Date) -> (Next)\n\t- \u4f8b1) ('20160630001', '2016-07-01') -> ('20160701001')\n\t- \u4f8b2) ('20160701001', '2016-07-01') -> ('20160701002')\n\n### \u3084\u3063\u305f\u3053\u3068\n\n- EntryNumberGenerator \u30af\u30e9\u30b9\u3092\u3064\u304f\u308a\u3001\u756a\u53f7\u3092\u751f\u6210\u3055\u305b\u308b\n- EntryRepository \u30af\u30e9\u30b9\u3092\u3064\u304f\u308a\u3001\u6700\u5927\u5024\u3092\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u304b\u3089\u53d6\u5f97\u3055\u305b\u308b\n- Entry \u30af\u30e9\u30b9\u306e\u751f\u6210\u6642\u306b\u756a\u53f7\u3092\u30bb\u30c3\u30c8\u3057\u3066\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u306b\u4fdd\u5b58\u3059\u308b\n\n## \u8a73\u7d30\n\n### \u30c6\u30b9\u30c8\u30af\u30e9\u30b9\u3092\u66f8\u304f\n\n\u30c6\u30b9\u30c8\u30d5\u30a1\u30fc\u30b9\u30c8\u3067\u3084\u308a\u307e\u3059\u3002\n\n\n```EntryNumberGeneratorTest.php\n<?php\n\nclass EntryNumberGeneratorTest extends TestCase\n{\n    /**\n    * @dataProvider getTestDataForTestGenerate\n    */\n    public function testGenerate($maxNo, $date, $expectedResult)\n    {\n        $mockRepo = Mockery::mock('EntryRepository');\n        $mockRepo->shouldReceive('getMaxEntryNumber')->andReturn($maxNo);\n\n\t\t// $date\u306b\u904e\u53bb\u306e\u65e5\u4ed8\u3092\u6307\u5b9a\u3059\u308b\u3068\u4f8b\u5916\n        if ($expectedResult === null) {\n            $this->setExpectedException(\\InvalidArgumentException::class);\n        }\n\n        $generator = new EntryNumberGenerator($mockRepo);\n        $entryNo = $generator->generate($date);\n        $this->assertEquals($expectedResult, $entryNo);\n    }\n\n    public function getTestDataForTestGenerate()\n    {\n        return [\n        \t// \u3042\u308b\u65e5\u4ed8\u30672\u4ef6\u76ee\n            'success:same date' => [\n                '20160701001', strtotime('2016-07-01'), '20160701002',\n            ],\n        \t// \u3042\u308b\u65e5\u4ed8\u30671\u4ef6\u76ee\n            'success:another date' => [\n                '20160701001', strtotime('2016-07-02'), '20160702001',\n            ],\n            // entry\u30ec\u30b3\u30fc\u30c9\u304c\u4e00\u4ef6\u3082\u306a\u3044\u3068\u304d\u306fmaxNo\u306fnull\u306b\u306a\u308b\n            'success:first record' => [\n                null, strtotime('2016-07-01'), '20160701001',\n            ],\n            // \u904e\u53bb\u306e\u65e5\u4ed8\u306f\u6307\u5b9a\u3067\u304d\u306a\u3044\n            'failure:another date' => [\n                '20160701001', strtotime('2016-06-30'), null,\n            ],\n        ];\n    }\n```\n\n### \u30c6\u30b9\u30c8\u3092\u5b9f\u884c\u3059\u308b\n\n(\u5fc5\u305a\u5931\u6557\u3059\u308b\u306e\u3067\u7701\u7565\u3002\u5100\u5f0f\u306e\u3088\u3046\u306a\u3082\u306e)\n\n### \u30d7\u30ed\u30c0\u30af\u30c8\u30b3\u30fc\u30c9\u3092\u66f8\u304f\n\n```EntryNumberGenerator.php\n<?php\nnamespace App;\n\nuse App\\Repositories\\EntryRepository;\n\nclass EntryNumberGenerator\n{\n    /** @var EntryRepository */\n    private $repository;\n\n    public function __construct(EntryRepository $repository)\n    {\n        $this->repository = $repository;\n    }\n\n\t/**\n\t* @throws InvalidArgumentException $timestamp \u306b\u904e\u53bb\u306e\u65e5\u6642\u304c\u6307\u5b9a\u3055\u308c\u305f\u3068\u304d\n\t*/\n    public function generate($timestamp)\n    {\n        $ymd = date('ymd', $timestamp);\n        $maxEntryNo = $this->repository->getMaxEstimateNumber();\n        if ($maxEntryNo) {\n            list($maxYmd, $maxSeq) = sscanf($maxEntryNo, '%6s%3d');\n        } else {\n            $maxYmd = 0;\n            $maxSeq = 0;\n        }\n        if ($maxYmd === $ymd) {\n            $seq = $maxSeq + 1;\n        } elseif ($maxYmd < $ymd) {\n            $seq = 1;\n        } else {\n            throw new \\InvalidArgumentException(sprintf('timestamp should be younger than the date in the max number. max=%s, argument=%s', $maxYmd, $ymd));\n        }\n        return sprintf('%6d%03d', $ymd, $seq);\n    }\n}\n```\n\n### \u30c6\u30b9\u30c8\u3092\u5b9f\u884c\u3059\u308b\n\n```console\n$ ./vendor/bin/phpunit tests/EntryNumberGeneratorTest.php\nPHPUnit 4.1.6 by Sebastian Bergmann.\nConfiguration read from /vagrant/phpunit.xml\n....\nTime: 2.63 seconds, Memory: 25.25MB\nOK (4 tests, 4 assertions)\n```\n\n(\u2229\u00b4\u2200\uff40)\u2229\uff9c\uff70\uff72\n\n### \u3061\u306a\u307f\u306b\n\n\u30ea\u30dd\u30b8\u30c8\u30ea\u30af\u30e9\u30b9\u306e\u5b9f\u88c5\u3082\u3044\u3061\u304a\u3046\u8f09\u305b\u3066\u304a\u304d\u307e\u3059\u3002\n\n```EntryRepository.class\n<?php\nnamespace App\\Repositories;\n\nuse App\\Entry;\n\nclass EntryRepository\n{\n    public function getMaxEntryNumber()\n    {\n        $entry = Entry::orderBy('entry_no', 'desc')->first();\n        if (!$entry) {\n            return null;\n        }\n        return $entry->entry_no;\n}\n```\n\n## \u307e\u3068\u3081\n\n- DDD \u3081\u3093\u3069\u304f\u3055\u3044\u3051\u3069\u3001\u4f9d\u5b58\u95a2\u4fc2\u3092\u6975\u529b\u6e1b\u3089\u3059\u3063\u3066\u3044\u3046\u70b9\u306b\u304a\u3044\u3066\u306f\u6069\u6075\u3042\u308a\u307e\u3059\u306d\n\nDDD \u7684\u306b\u3053\u3053\u304c\u9055\u3046\u3093\u3058\u3083\u306a\u3044\u304b\u3068\u304b\u3082\u3063\u3068\u3044\u3044\u65b9\u6cd5\u3042\u308b\u3088\u3068\u304b\u3042\u308a\u307e\u3057\u305f\u3089\u30b3\u30e1\u30f3\u30c8\u3057\u3066\u3044\u305f\u3060\u3051\u308c\u3070\u52a9\u304b\u308a\u307e\u3059\u3002\n", "tags": ["laravel", "PHP", "TDD", "DDD"]}