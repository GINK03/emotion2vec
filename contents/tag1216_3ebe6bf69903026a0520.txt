{"context": " More than 1 year has passed since last update.\u914d\u5217\u3084\u30b3\u30ec\u30af\u30b7\u30e7\u30f3\u3092\u4f7f\u308f\u305a\u306bInputStream\u7b49\u304b\u3089Stream\u3092\u4f5c\u6210\u3059\u308b\u65b9\u6cd5\u3002\n\nStream.of(T... values)\n\n\n\u53ef\u5909\u9577\u5f15\u6570\u3067\u8981\u7d20\u3092\u6307\u5b9a\u3057\u3066Stream\u3092\u4f5c\u6210\u3059\u308b\u3002\n\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u3084\u30b5\u30f3\u30d7\u30eb\u4f5c\u6210\u3067\u3088\u304f\u4f7f\u3046\u3002\n\nStream<String> stream = Stream.of(\"a\", \"b\");\nstream.forEach(System.out::println);\n\n\nStream.builder()\n\n\n\u30d3\u30eb\u30c0\u30fc\u3067Stream\u3092\u4f5c\u6210\u3059\u308b\u3002\n\nStream.Builder<Integer> builder = Stream.builder();\nfor (int i = 0; i < 5; i++) {\n    builder.add(i);\n}\nStream<Integer> stream = builder.build();\nstream.forEach(System.out::println);\n\n\u203b\u4e0a\u8a18\u306fIntStream\u3067\u3082\u53ef\u80fd\u3002\n\nStream.generate(Supplier s)\n\n\n\u9806\u5e8f\u4ed8\u3051\u3055\u308c\u3066\u3044\u306a\u3044\u7121\u9650\u30b9\u30c8\u30ea\u30fc\u30e0\u3092\u4f5c\u6210\u3059\u308b\u3002\n\u4e71\u6570\u306e\u751f\u6210\u306a\u3069\u3001\u6b21\u306e\u5024\u304c\u524d\u306e\u5024\u3068\u95a2\u9023\u6027\u304c\u306a\u3044\u5834\u5408\u306b\u4f7f\u7528\u3059\u308b\u3002\n\nStream<Double> stream = Stream.generate(() -> Math.random());\nstream.limit(3).forEach(System.out::println);\n\n\u203b\u4e0a\u8a18\u306fDoubleStream\u3067\u3082\u53ef\u80fd\u3002\n\u203b\u4e71\u6570\u306e\u751f\u6210\u3059\u308bStream\u306fRandom\u30af\u30e9\u30b9\u306e\u30e1\u30bd\u30c3\u30c9\u3067\u3082\u63d0\u4f9b\u3055\u308c\u3066\u3044\u308b\u3002\n\nStream.iterate(T seed, UnaryOperator f)\n\n\n\u9806\u5e8f\u4ed8\u3051\u3055\u308c\u305f\u7121\u9650\u30b9\u30c8\u30ea\u30fc\u30e0\u3092\u4f5c\u6210\u3059\u308b\u3002\n\u5f15\u6570\u306b\u306f\u521d\u671f\u8981\u7d20seed\u3068\uff12\u756a\u76ee\u4ee5\u964d\u306e\u8981\u7d20\u3092\u751f\u6210\u3059\u308b\u95a2\u6570f\u3092\u6307\u5b9a\u3059\u308b\u3002\n\u95a2\u6570f\u306b\u306f\u524d\u306e\u8981\u7d20\u304c\u6e21\u3055\u308c\u308b\u306e\u3067\u3001\u524d\u306e\u5024\u3092\u52a0\u5de5\u3057\u3066\u6b21\u306e\u5024\u3092\u751f\u6210\u3059\u308b\u5834\u5408\u306b\u4f7f\u7528\u3059\u308b\u3002\n\nStream<Integer> stream = Stream.iterate(2, x -> x * 2);\nstream.limit(8).forEach(System.out::println);\n//\u7d50\u679c\n//2\n//4\n//8\n//16\n//32\n//64\n//128\n//256\n\n\nStreamSupport.stream(Spliterator spliterator, boolean parallel)\n\n\n\nSpliterator\u304b\u3089Stream\u3092\u4f5c\u6210\u3059\u308b\u3002\nSpliterator\u306f\u5206\u5272\u53ef\u80fd\u306aIterator\u306e\u3053\u3068\u3067\u3001Spliterators\u306estatic\u30e1\u30bd\u30c3\u30c9spliterator()\u3084spliteratorUnknownSize()\u3092\u4f7f\u7528\u3057\u3066Iterator\u304b\u3089\u4f5c\u6210\u3059\u308b\u3002\nInputStream\u304b\u3089\u8aad\u307f\u8fbc\u3093\u3060\u30c7\u30fc\u30bf\u3092Stream\u3067\u8fd4\u3059\u3088\u3046\u306a\u5834\u5408\u306b\u4f7f\u7528\u3059\u308b\u3002\n\n\n\u4e71\u6570\u3092\u751f\u6210\u3059\u308bStream\u306e\u4f8b\n\u4ee5\u4e0b\u306f\u4e71\u6570\u3092\u751f\u6210\u3059\u308bIterator\u3092\u4f5c\u6210\u3057\u3001\u305d\u3053\u304b\u3089Spliterator,Stream\u3092\u4f5c\u6210\u3059\u308b\u4f8b\u3002\nIterator<Integer> itr = new Iterator<Integer>() {\n    public boolean hasNext() {\n        return true;\n    }\n    public Integer next() {\n        return (int) (Math.random() * 100);\n    }\n};\nSpliterator<Integer> spliterator = \n        Spliterators.spliteratorUnknownSize(itr, Spliterator.NONNULL);\nStream<Integer> stream = StreamSupport.stream(spliterator, true);\nstream.limit(5).forEach(System.out::println);\n\n\n\u5148\u305a\u4e71\u6570\u3092\u751f\u6210\u3059\u308bIterator\u3092\u4f5c\u6210\u3059\u308b\u3002(itr)\n\u6b21\u306bSpliterators.spliteratorUnknownSize()\u3067Spliterator\u3092\u4f5c\u6210\u3059\u308b\u3002(spliterator)\n\n\n\u7b2c1\u5f15\u6570\u306b\u306fIterator\u3001\u7b2c2\u5f15\u6570\u306b\u306fSpliterator\u306e\u7279\u6027\u3092Spliterator\u306e\u5b9a\u6570\u3067\u6307\u5b9a\u3059\u308b\u3002\n\n\n\u6700\u5f8c\u306bStreamSupport.stream()\u3067Stream\u3092\u4f5c\u6210\u3059\u308b\u3002\n\n\nQiitaAPI\u3067\u6295\u7a3f\u4e00\u89a7\u3092\u53d6\u5f97\u3057\u3066Stream\u3067\u8fd4\u3059\u4f8b\n\u3082\u3046\u5c11\u3057\u5b9f\u8df5\u7684\u306a\u4f8b\u3068\u3057\u3066\u3001QiitaAPI\u3067\u6295\u7a3f\u4e00\u89a7\u3092\u53d6\u5f97\u3057\u3066Stream\u3067\u8fd4\u3059\u4f8b\u3002\nApache HttpClient\u3068google-gson\u3092\u4f7f\u7528\u3002\n\nQiitaApiExamples.java\nimport static java.util.Spliterator.*;\n\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.nio.charset.StandardCharsets;\nimport java.util.Iterator;\nimport java.util.Spliterator;\nimport java.util.Spliterators;\nimport java.util.function.Consumer;\nimport java.util.stream.Stream;\nimport java.util.stream.StreamSupport;\n\nimport org.apache.http.client.ClientProtocolException;\nimport org.apache.http.client.methods.CloseableHttpResponse;\nimport org.apache.http.client.methods.HttpGet;\nimport org.apache.http.impl.client.CloseableHttpClient;\nimport org.apache.http.impl.client.HttpClients;\n\nimport com.google.gson.Gson;\nimport com.google.gson.stream.JsonReader;\n\npublic class QiitaApiExamples {\n\n    public static void items(Consumer<Stream<Item>> consumer)\n            throws ClientProtocolException, IOException {\n        Gson gson = new Gson();\n        HttpGet httpGet = new HttpGet(\"http://qiita.com/api/v2/items\");\n        try (\n                CloseableHttpClient httpClient = HttpClients.createDefault();\n                CloseableHttpResponse res = httpClient.execute(httpGet);\n                JsonReader reader = new JsonReader(new InputStreamReader(\n                        res.getEntity().getContent(), StandardCharsets.UTF_8))\n        ) {\n            reader.beginArray();\n            Iterator<Item> itr = new Iterator<Item>() {\n                public boolean hasNext() {\n                    try {\n                        return reader.hasNext();\n                    } catch (IOException e) {\n                        e.printStackTrace();\n                        return false;\n                    }\n                }\n                public Item next() {\n                    return gson.fromJson(reader, Item.class);\n                }\n            };\n            Spliterator<Item> spliterator = Spliterators.spliteratorUnknownSize(\n                    itr, NONNULL | ORDERED | SIZED);\n            Stream<Item> stream = StreamSupport.stream(spliterator, false);\n            consumer.accept(stream);\n            reader.endArray();\n        }\n    }\n\n    public static void main(String[] args) throws Exception {\n        items(stream -> stream.forEach(System.out::println));\n    }\n}\n\n\n\u30ec\u30b9\u30dd\u30f3\u30b9\u304b\u3089\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u751f\u6210\u3059\u308b\u969b\u306b\u306f\u3001JsonReader\u3092\u4f7f\u7528\u3057\u3066\u6295\u7a3f\u30921\u4ef6\u305a\u3064\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306b\u5909\u63db\u3059\u308b\u3002\n\u901a\u5e38\u306fItem[] items = gson.fromJson(reader, Item[].class)\u3068\u3084\u308c\u3070\u4e00\u5ea6\u306b\u5168\u30c7\u30fc\u30bf\u3092\u53d6\u5f97\u3067\u304d\u308b\u304c\u3001\u3053\u306e\u5834\u5408\u5168\u30c7\u30fc\u30bf\u3092\u30e1\u30e2\u30ea\u306b\u5c55\u958b\u3059\u308b\u3053\u3068\u306b\u306a\u308b\u306e\u3067\u30e1\u30e2\u30ea\u3092\u5727\u8feb\u3059\u308b\u3002\n\u4e0a\u8a18\u306e\u3088\u3046\u306bStream(Iterator)\u3092\u4f7f\u7528\u3059\u308c\u30701\u4ef6\u305a\u3064\u8aad\u307f\u8fbc\u3093\u3067\u51e6\u7406\u3067\u304d\u308b\u306e\u3067\u3001\u5927\u91cf\u306e\u30c7\u30fc\u30bf\u3092\u51e6\u7406\u3059\u308b\u5834\u5408\u3067\u3082\u5bfe\u5fdc\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u308b\u3002\n\u914d\u5217\u3084\u30b3\u30ec\u30af\u30b7\u30e7\u30f3\u3092\u4f7f\u308f\u305a\u306bInputStream\u7b49\u304b\u3089Stream\u3092\u4f5c\u6210\u3059\u308b\u65b9\u6cd5\u3002\n\n## [Stream.of(T... values)](http://docs.oracle.com/javase/jp/8/docs/api/java/util/stream/Stream.html#of-T...-)\n\n- \u53ef\u5909\u9577\u5f15\u6570\u3067\u8981\u7d20\u3092\u6307\u5b9a\u3057\u3066Stream\u3092\u4f5c\u6210\u3059\u308b\u3002\n- \u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u3084\u30b5\u30f3\u30d7\u30eb\u4f5c\u6210\u3067\u3088\u304f\u4f7f\u3046\u3002\n\n```java:\nStream<String> stream = Stream.of(\"a\", \"b\");\nstream.forEach(System.out::println);\n```\n\n## [Stream.builder()](http://docs.oracle.com/javase/jp/8/docs/api/java/util/stream/Stream.html#builder--)\n\n- \u30d3\u30eb\u30c0\u30fc\u3067Stream\u3092\u4f5c\u6210\u3059\u308b\u3002\n\n```java:\nStream.Builder<Integer> builder = Stream.builder();\nfor (int i = 0; i < 5; i++) {\n    builder.add(i);\n}\nStream<Integer> stream = builder.build();\nstream.forEach(System.out::println);\n```\n\n\u203b\u4e0a\u8a18\u306fIntStream\u3067\u3082\u53ef\u80fd\u3002\n\n## [Stream.generate(Supplier<T> s)](http://docs.oracle.com/javase/jp/8/docs/api/java/util/stream/Stream.html#generate-java.util.function.Supplier-)\n\n- \u9806\u5e8f\u4ed8\u3051\u3055\u308c\u3066\u3044\u306a\u3044\u7121\u9650\u30b9\u30c8\u30ea\u30fc\u30e0\u3092\u4f5c\u6210\u3059\u308b\u3002\n- \u4e71\u6570\u306e\u751f\u6210\u306a\u3069\u3001\u6b21\u306e\u5024\u304c\u524d\u306e\u5024\u3068\u95a2\u9023\u6027\u304c\u306a\u3044\u5834\u5408\u306b\u4f7f\u7528\u3059\u308b\u3002\n\n```java:\nStream<Double> stream = Stream.generate(() -> Math.random());\nstream.limit(3).forEach(System.out::println);\n```\n\n\u203b\u4e0a\u8a18\u306fDoubleStream\u3067\u3082\u53ef\u80fd\u3002\n\u203b\u4e71\u6570\u306e\u751f\u6210\u3059\u308bStream\u306f[Random\u30af\u30e9\u30b9](http://docs.oracle.com/javase/jp/8/docs/api/java/util/Random.html)\u306e\u30e1\u30bd\u30c3\u30c9\u3067\u3082\u63d0\u4f9b\u3055\u308c\u3066\u3044\u308b\u3002\n\n## [Stream.iterate(T seed, UnaryOperator<T> f)](http://docs.oracle.com/javase/jp/8/docs/api/java/util/stream/Stream.html#iterate-T-java.util.function.UnaryOperator-)\n\n- \u9806\u5e8f\u4ed8\u3051\u3055\u308c\u305f\u7121\u9650\u30b9\u30c8\u30ea\u30fc\u30e0\u3092\u4f5c\u6210\u3059\u308b\u3002\n- \u5f15\u6570\u306b\u306f\u521d\u671f\u8981\u7d20seed\u3068\uff12\u756a\u76ee\u4ee5\u964d\u306e\u8981\u7d20\u3092\u751f\u6210\u3059\u308b\u95a2\u6570f\u3092\u6307\u5b9a\u3059\u308b\u3002\n- \u95a2\u6570f\u306b\u306f\u524d\u306e\u8981\u7d20\u304c\u6e21\u3055\u308c\u308b\u306e\u3067\u3001\u524d\u306e\u5024\u3092\u52a0\u5de5\u3057\u3066\u6b21\u306e\u5024\u3092\u751f\u6210\u3059\u308b\u5834\u5408\u306b\u4f7f\u7528\u3059\u308b\u3002\n\n```java:\nStream<Integer> stream = Stream.iterate(2, x -> x * 2);\nstream.limit(8).forEach(System.out::println);\n//\u7d50\u679c\n//2\n//4\n//8\n//16\n//32\n//64\n//128\n//256\n```\n\n## [StreamSupport.stream(Spliterator<T> spliterator, boolean parallel)](http://docs.oracle.com/javase/jp/8/docs/api/java/util/stream/StreamSupport.html#stream-java.util.Spliterator-boolean-)\n\n- \b[Spliterator](http://docs.oracle.com/javase/jp/8/docs/api/java/util/Spliterator.html)\u304b\u3089Stream\u3092\u4f5c\u6210\u3059\u308b\u3002\n- Spliterator\u306f\u5206\u5272\u53ef\u80fd\u306aIterator\u306e\u3053\u3068\u3067\u3001[Spliterators](http://docs.oracle.com/javase/jp/8/docs/api/java/util/Spliterators.html)\u306estatic\u30e1\u30bd\u30c3\u30c9`spliterator()`\u3084`spliteratorUnknownSize()`\u3092\u4f7f\u7528\u3057\u3066Iterator\u304b\u3089\u4f5c\u6210\u3059\u308b\u3002\n- InputStream\u304b\u3089\u8aad\u307f\u8fbc\u3093\u3060\u30c7\u30fc\u30bf\u3092Stream\u3067\u8fd4\u3059\u3088\u3046\u306a\u5834\u5408\u306b\u4f7f\u7528\u3059\u308b\u3002\n\n### \u4e71\u6570\u3092\u751f\u6210\u3059\u308bStream\u306e\u4f8b\n\n\u4ee5\u4e0b\u306f\u4e71\u6570\u3092\u751f\u6210\u3059\u308bIterator\u3092\u4f5c\u6210\u3057\u3001\u305d\u3053\u304b\u3089Spliterator,Stream\u3092\u4f5c\u6210\u3059\u308b\u4f8b\u3002\n\n```java:\nIterator<Integer> itr = new Iterator<Integer>() {\n    public boolean hasNext() {\n        return true;\n    }\n    public Integer next() {\n        return (int) (Math.random() * 100);\n    }\n};\nSpliterator<Integer> spliterator = \n        Spliterators.spliteratorUnknownSize(itr, Spliterator.NONNULL);\nStream<Integer> stream = StreamSupport.stream(spliterator, true);\nstream.limit(5).forEach(System.out::println);\n```\n\n- \u5148\u305a\u4e71\u6570\u3092\u751f\u6210\u3059\u308bIterator\u3092\u4f5c\u6210\u3059\u308b\u3002(itr)\n- \u6b21\u306bSpliterators.spliteratorUnknownSize()\u3067Spliterator\u3092\u4f5c\u6210\u3059\u308b\u3002(spliterator)\n  - \u7b2c1\u5f15\u6570\u306b\u306fIterator\u3001\u7b2c2\u5f15\u6570\u306b\u306fSpliterator\u306e\u7279\u6027\u3092Spliterator\u306e\u5b9a\u6570\u3067\u6307\u5b9a\u3059\u308b\u3002\n- \u6700\u5f8c\u306bStreamSupport.stream()\u3067Stream\u3092\u4f5c\u6210\u3059\u308b\u3002\n\n### QiitaAPI\u3067\u6295\u7a3f\u4e00\u89a7\u3092\u53d6\u5f97\u3057\u3066Stream\u3067\u8fd4\u3059\u4f8b\n\u3082\u3046\u5c11\u3057\u5b9f\u8df5\u7684\u306a\u4f8b\u3068\u3057\u3066\u3001QiitaAPI\u3067\u6295\u7a3f\u4e00\u89a7\u3092\u53d6\u5f97\u3057\u3066Stream\u3067\u8fd4\u3059\u4f8b\u3002\n[Apache HttpClient](https://hc.apache.org/httpcomponents-client-ga/)\u3068[google-gson](https://code.google.com/p/google-gson/)\u3092\u4f7f\u7528\u3002\n\n```java:QiitaApiExamples.java\nimport static java.util.Spliterator.*;\n\nimport java.io.IOException;\nimport java.io.InputStreamReader;\nimport java.nio.charset.StandardCharsets;\nimport java.util.Iterator;\nimport java.util.Spliterator;\nimport java.util.Spliterators;\nimport java.util.function.Consumer;\nimport java.util.stream.Stream;\nimport java.util.stream.StreamSupport;\n\nimport org.apache.http.client.ClientProtocolException;\nimport org.apache.http.client.methods.CloseableHttpResponse;\nimport org.apache.http.client.methods.HttpGet;\nimport org.apache.http.impl.client.CloseableHttpClient;\nimport org.apache.http.impl.client.HttpClients;\n\nimport com.google.gson.Gson;\nimport com.google.gson.stream.JsonReader;\n\npublic class QiitaApiExamples {\n    \n    public static void items(Consumer<Stream<Item>> consumer)\n            throws ClientProtocolException, IOException {\n        Gson gson = new Gson();\n        HttpGet httpGet = new HttpGet(\"http://qiita.com/api/v2/items\");\n        try (\n                CloseableHttpClient httpClient = HttpClients.createDefault();\n                CloseableHttpResponse res = httpClient.execute(httpGet);\n                JsonReader reader = new JsonReader(new InputStreamReader(\n                        res.getEntity().getContent(), StandardCharsets.UTF_8))\n        ) {\n            reader.beginArray();\n            Iterator<Item> itr = new Iterator<Item>() {\n                public boolean hasNext() {\n                    try {\n                        return reader.hasNext();\n                    } catch (IOException e) {\n                        e.printStackTrace();\n                        return false;\n                    }\n                }\n                public Item next() {\n                    return gson.fromJson(reader, Item.class);\n                }\n            };\n            Spliterator<Item> spliterator = Spliterators.spliteratorUnknownSize(\n                    itr, NONNULL | ORDERED | SIZED);\n            Stream<Item> stream = StreamSupport.stream(spliterator, false);\n            consumer.accept(stream);\n            reader.endArray();\n        }\n    }\n    \n    public static void main(String[] args) throws Exception {\n        items(stream -> stream.forEach(System.out::println));\n    }\n}\n```\n\n\u30ec\u30b9\u30dd\u30f3\u30b9\u304b\u3089\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u751f\u6210\u3059\u308b\u969b\u306b\u306f\u3001JsonReader\u3092\u4f7f\u7528\u3057\u3066\u6295\u7a3f\u30921\u4ef6\u305a\u3064\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306b\u5909\u63db\u3059\u308b\u3002\n\u901a\u5e38\u306f`Item[] items = gson.fromJson(reader, Item[].class)`\u3068\u3084\u308c\u3070\u4e00\u5ea6\u306b\u5168\u30c7\u30fc\u30bf\u3092\u53d6\u5f97\u3067\u304d\u308b\u304c\u3001\u3053\u306e\u5834\u5408\u5168\u30c7\u30fc\u30bf\u3092\u30e1\u30e2\u30ea\u306b\u5c55\u958b\u3059\u308b\u3053\u3068\u306b\u306a\u308b\u306e\u3067\u30e1\u30e2\u30ea\u3092\u5727\u8feb\u3059\u308b\u3002\n\u4e0a\u8a18\u306e\u3088\u3046\u306bStream(Iterator)\u3092\u4f7f\u7528\u3059\u308c\u30701\u4ef6\u305a\u3064\u8aad\u307f\u8fbc\u3093\u3067\u51e6\u7406\u3067\u304d\u308b\u306e\u3067\u3001\u5927\u91cf\u306e\u30c7\u30fc\u30bf\u3092\u51e6\u7406\u3059\u308b\u5834\u5408\u3067\u3082\u5bfe\u5fdc\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u308b\u3002\n\n\n", "tags": ["Java", "java8"]}