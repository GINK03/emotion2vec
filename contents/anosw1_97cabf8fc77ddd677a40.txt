{"tags": ["Java", "java8", "Stream", "StreamAPI"], "context": "\n\n\u57fa\u672c\u7684\u306aStream\u51e6\u7406(\u6761\u4ef6\u5206\u5c90\u3001\u4e00\u62ec\u51e6\u7406\u3001\u30bd\u30fc\u30c8)\n\njava\n// range\u30e1\u30bd\u30c3\u30c9\u306fInt/LongStream\u3067\u306e\u307f\u4f7f\u7528\u3067\u304d\u308b\u3002Stream<Integer>\u3067\u306f\u4f7f\u7528\u3067\u304d\u306a\u3044\nIntStream.range(0, 10)\n    .filter(i -> i % 2 == 1)\n    .map(i -> i *\u300010)\n    .sorted()\n    .forEach(System.out::println);\n\n// \u30bd\u30fc\u30c8\u624b\u6bb5\u3092\u6307\u5b9a\u3059\u308b\u5834\u5408\u30dc\u30af\u30b7\u30f3\u30b0\u304c\u5fc5\u8981\u3002\u81ea\u7136\u9806\u306fnaturalOrder\nIntStream.range(0, 10)\n    .filter(i -> i % 2 == 1)\n    .map(i -> i *\u300010)\n    .boxed().sorted(Comparator.reverseOrder())\n    .forEach(System.out::println);\n\n\n10\n30\n50\n70\n90\n\n90\n70\n50\n30\n10\n\n\n\u4e8c\u91cd\u306eStream\u51e6\u7406(map\u4f7f\u7528/\u5168\u3066\u306e\u8981\u7d20\u306b\u5bfe\u3057\u3066Function\u3092\u9069\u7528\u3059\u308b\u3002)\n\njava\n// \u884c\u3044\u305f\u3044\u6587\u5b57\u5217\u7cbe\u67fb\u306e\u30ea\u30b9\u30c8\nList<UnaryOperator<String>> vatidators = new ArrayList<>();\nvatidators.add(str -> str.length() < 10 ? \"\" : \"str\u306f10\u6587\u5b57\u672a\u6e80\u306b\u3057\u3066\u304f\u3060\u3055\u3044\u3002\");\nvatidators.add(str -> str.length() >= 4 ? \"\" : \"str\u306f4\u6587\u5b57\u4ee5\u4e0a\u306b\u3057\u3066\u304f\u3060\u3055\u3044\u3002\");\nvatidators.add(str -> !str.contains(\"\u00d7\") ? \"\" : \"str\u306b\u4e0d\u6b63\u306a\u6587\u5b57\u304c\u542b\u307e\u308c\u3066\u3044\u307e\u3059\u3002\");\nvatidators.add(str -> str.contains(\"\u306f\") ? \"\" : \"str\u306b\u5fc5\u8981\u306a\u6587\u5b57\u304c\u542b\u307e\u308c\u3066\u3044\u307e\u305b\u3093\u3002\");\n\n// \u7cbe\u67fb\u5bfe\u8c61\u306e\u6587\u5b57\u5217\u30ea\u30b9\u30c8    \nList<String> strList = Arrays.asList(\"\u00d7\", \"\" , \"\u4eca\u65e5\u306f\u826f\u3044\u5929\u6c17\");\n\n// \u5404\u6587\u5b57\u5217\u3059\u3079\u3066\u306b\u5bfe\u3057\u3066\u30ea\u30b9\u30c8\u5185\u306e\u7cbe\u67fb\u3092\u884c\u3046\nList<List<String>> results = strList.stream()\n    .map(str -> vatidators.stream()\n        .map(valid -> valid.apply(str))\n        .filter(s -> !\"\".equals(s))\n        .collect(Collectors.toList()))\n    .collect(Collectors.toList());\n// \u7d50\u679c\u3092\u8868\u793a\nresults.forEach(System.out::println);\n\n\n[str\u306f4\u6587\u5b57\u4ee5\u4e0a\u306b\u3057\u3066\u304f\u3060\u3055\u3044\u3002, str\u306b\u4e0d\u6b63\u306a\u6587\u5b57\u304c\u542b\u307e\u308c\u3066\u3044\u307e\u3059\u3002, str\u306b\u5fc5\u8981\u306a\u6587\u5b57\u304c\u542b\u307e\u308c\u3066\u3044\u307e\u305b\u3093\u3002]\n[str\u306f4\u6587\u5b57\u4ee5\u4e0a\u306b\u3057\u3066\u304f\u3060\u3055\u3044\u3002, str\u306b\u5fc5\u8981\u306a\u6587\u5b57\u304c\u542b\u307e\u308c\u3066\u3044\u307e\u305b\u3093\u3002]\n[]\n\n\n##\u57fa\u672c\u7684\u306aStream\u51e6\u7406(\u6761\u4ef6\u5206\u5c90\u3001\u4e00\u62ec\u51e6\u7406\u3001\u30bd\u30fc\u30c8)\n\n```java:java\n// range\u30e1\u30bd\u30c3\u30c9\u306fInt/LongStream\u3067\u306e\u307f\u4f7f\u7528\u3067\u304d\u308b\u3002Stream<Integer>\u3067\u306f\u4f7f\u7528\u3067\u304d\u306a\u3044\nIntStream.range(0, 10)\n\t.filter(i -> i % 2 == 1)\n\t.map(i -> i *\u300010)\n\t.sorted()\n\t.forEach(System.out::println);\n\n// \u30bd\u30fc\u30c8\u624b\u6bb5\u3092\u6307\u5b9a\u3059\u308b\u5834\u5408\u30dc\u30af\u30b7\u30f3\u30b0\u304c\u5fc5\u8981\u3002\u81ea\u7136\u9806\u306fnaturalOrder\nIntStream.range(0, 10)\n\t.filter(i -> i % 2 == 1)\n\t.map(i -> i *\u300010)\n\t.boxed().sorted(Comparator.reverseOrder())\n\t.forEach(System.out::println);\n```\n```\n10\n30\n50\n70\n90\n```\n```\n90\n70\n50\n30\n10\n```\n\n##\u4e8c\u91cd\u306eStream\u51e6\u7406(map\u4f7f\u7528/\u5168\u3066\u306e\u8981\u7d20\u306b\u5bfe\u3057\u3066Function\u3092\u9069\u7528\u3059\u308b\u3002)\n```java:java\n// \u884c\u3044\u305f\u3044\u6587\u5b57\u5217\u7cbe\u67fb\u306e\u30ea\u30b9\u30c8\nList<UnaryOperator<String>> vatidators = new ArrayList<>();\nvatidators.add(str -> str.length() < 10 ? \"\" : \"str\u306f10\u6587\u5b57\u672a\u6e80\u306b\u3057\u3066\u304f\u3060\u3055\u3044\u3002\");\nvatidators.add(str -> str.length() >= 4 ? \"\" : \"str\u306f4\u6587\u5b57\u4ee5\u4e0a\u306b\u3057\u3066\u304f\u3060\u3055\u3044\u3002\");\nvatidators.add(str -> !str.contains(\"\u00d7\") ? \"\" : \"str\u306b\u4e0d\u6b63\u306a\u6587\u5b57\u304c\u542b\u307e\u308c\u3066\u3044\u307e\u3059\u3002\");\nvatidators.add(str -> str.contains(\"\u306f\") ? \"\" : \"str\u306b\u5fc5\u8981\u306a\u6587\u5b57\u304c\u542b\u307e\u308c\u3066\u3044\u307e\u305b\u3093\u3002\");\n\n// \u7cbe\u67fb\u5bfe\u8c61\u306e\u6587\u5b57\u5217\u30ea\u30b9\u30c8\t\nList<String> strList = Arrays.asList(\"\u00d7\", \"\" , \"\u4eca\u65e5\u306f\u826f\u3044\u5929\u6c17\");\n\n// \u5404\u6587\u5b57\u5217\u3059\u3079\u3066\u306b\u5bfe\u3057\u3066\u30ea\u30b9\u30c8\u5185\u306e\u7cbe\u67fb\u3092\u884c\u3046\nList<List<String>> results = strList.stream()\n\t.map(str -> vatidators.stream()\n\t\t.map(valid -> valid.apply(str))\n\t\t.filter(s -> !\"\".equals(s))\n\t\t.collect(Collectors.toList()))\n\t.collect(Collectors.toList());\n// \u7d50\u679c\u3092\u8868\u793a\nresults.forEach(System.out::println);\n```\n```\n[str\u306f4\u6587\u5b57\u4ee5\u4e0a\u306b\u3057\u3066\u304f\u3060\u3055\u3044\u3002, str\u306b\u4e0d\u6b63\u306a\u6587\u5b57\u304c\u542b\u307e\u308c\u3066\u3044\u307e\u3059\u3002, str\u306b\u5fc5\u8981\u306a\u6587\u5b57\u304c\u542b\u307e\u308c\u3066\u3044\u307e\u305b\u3093\u3002]\n[str\u306f4\u6587\u5b57\u4ee5\u4e0a\u306b\u3057\u3066\u304f\u3060\u3055\u3044\u3002, str\u306b\u5fc5\u8981\u306a\u6587\u5b57\u304c\u542b\u307e\u308c\u3066\u3044\u307e\u305b\u3093\u3002]\n[]\n```\n\n"}