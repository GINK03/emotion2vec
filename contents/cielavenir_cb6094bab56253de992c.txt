{"context": " More than 1 year has passed since last update.\n\n\n\u554f\u984c\nhttps://paiza.jp/poh/ec-campaign\n\n\n\n\n\u30bf\u30a4\u30e0\u4e00\u89a7/C++\nhttp://qiita.com/cielavenir/items/a61cfe8390eb16866ae5\n\n\nPython/Ruby(1)\nhttp://qiita.com/cielavenir/items/b10ff4d201150f525062\n\n\nC&sharp;/Java/Python/Ruby\nhttp://qiita.com/cielavenir/items/d89e85f069cf570e6786\n\n\nPerl/PHP\nhttp://qiita.com/cielavenir/items/1a650a4c41d7bdd31392\n\n\nJavaScript\nhttp://qiita.com/cielavenir/items/a85b985888fdc15c52b7\n\n\nGo/CoffeeScript/Scala/R/Bash\nhttp://qiita.com/cielavenir/items/79016a0afd30470f440d\n\n\nVB/F&sharp;/D\nhttp://qiita.com/cielavenir/items/cb6094bab56253de992c\n\n\n\nVB\n\npaizapoh1.vb\nmodule PaizaPOH1\n    dim SIZE as integer=9999999\n    dim z(SIZE) as byte\n    dim input_count as integer=0\n\n    function myget() as integer\n        dim r as integer\n        while 48<=z(input_count) andalso z(input_count)<=57\n            r=r*10+z(input_count)-48\n            input_count+=1\n        end while\n        input_count+=1\n        return r\n    end function\n\n    sub Main()\n        Console.OpenStandardInput().Read(z,0,SIZE)\n        dim n as integer=myget()\n        dim d as integer=myget()\n        dim zv(1000000) as integer\n        dim v(n-1) as integer\n\n        for i as integer=0 to n-1\n            zv(myget())+=1\n        next\n        dim x as integer=0\n        for j as integer=0 to 1000000\n            dim k as integer=0\n            while k<zv(j)\n                v(x)=j\n                x+=1\n                k+=1\n            end while\n        next\n        for i as integer=0 to d-1\n            dim m as integer=myget()\n            dim idx as integer=Array.BinarySearch(v,m-v(0)+1)\n            if idx<0\n                idx=not idx\n            end if\n            dim r as integer=0\n            dim j as integer=0\n            dim k as integer=idx-1\n            while r<m andalso j<k andalso v(j)+v(j+1)<=m\n                while v(j)+v(k)>m\n                    k-=1\n                end while\n                if r<v(j)+v(k)\n                    r=v(j)+v(k)\n                end if\n                j+=1\n            end while\n            Console.WriteLine(r)\n        next\n    end sub\nend module\n\n\nF&sharp;\n\npaizapoh1.fs\nopen System\nlet arg:String array=Console.ReadLine().Split(' ')\nlet n=int(arg.[0])\nlet d=int(arg.[1])\nlet _v:int array=Array.zeroCreate(1000001)\nlet v:int array=Array.zeroCreate(n)\nfor i in 0..n-1 do\n let x=int(Console.ReadLine())\n _v.[x]<-_v.[x]+1\nlet mutable x=0\nfor j in 0..1000000 do\n for k in 0.._v.[j]-1 do\n  v.[x]<-j\n  x<-x+1\nfor i in 0..d-1 do\n let m=int(Console.ReadLine())\n let mutable idx=Array.BinarySearch(v,m-v.[0]+1)\n if idx<0 then\n  idx<-(~~~idx)\n let mutable r=0\n let mutable j=0\n let mutable k=idx-1\n while r<m && j<k && v.[j]+v.[j+1]<=m do\n  while v.[j]+v.[k]>m do\n   k<-k-1\n  if r<v.[j]+v.[k] then\n   r<-v.[j]+v.[k]\n  j<-j+1\n Console.WriteLine(r)\n\n\nD\n\npaizapoh1.d\nimport std.stdio;\nint array_binarysearch(int needle, int[] haystack, int size){\n    int high = size-1;\n    int low = 0;\n    int ret = size;\n    while( low <= high ){\n        int probe = (high + low) / 2;\n        int comparison = haystack[probe]-needle;\n        if( comparison <= 0 ){\n            low = probe+1;\n        }else{\n            ret=high;\n            high = probe-1;\n        }\n    }\n    return ret;\n}\nchar[9999999] z;\nint[1000001] _v;\nint[500000] v;\nint get(){\n    static int input_count=0;\n    int r=0;\n    for(;'0'<=z[input_count]&&z[input_count]<='9';)r=r*10+z[input_count++]-'0';\n    input_count++;\n    return r;\n}\nvoid main(){\n    stdin.rawRead(z);\n    int n,d,m,i,j,k,r;\n    n=get(),d=get();\n    for(i=0;i<n;i++)_v[get()]++;\n    for(i=j=0;j<1000001;j++)for(k=0;k<_v[j];k++)v[i++]=j;\n    for(i=0;i<d;i++){\n        m=get();\n        int idx=array_binarysearch(m-v[0],v,n);\n        for(r=j=0,k=idx-1;r<m&&j<k&&v[j]+v[j+1]<=m;j++){\n            for(;v[j]+v[k]>m;)k--;\n            if(r<v[j]+v[k])r=v[j]+v[k];\n        }\n        printf(\"%d\\n\",r);\n    }\n}\n\n\n\n|\u554f\u984c|https://paiza.jp/poh/ec-campaign|\n|:--|:--|\n|\u30bf\u30a4\u30e0\u4e00\u89a7/C++|http://qiita.com/cielavenir/items/a61cfe8390eb16866ae5|\n|Python/Ruby(1)|http://qiita.com/cielavenir/items/b10ff4d201150f525062|\n|C&sharp;/Java/Python/Ruby|http://qiita.com/cielavenir/items/d89e85f069cf570e6786|\n|Perl/PHP|http://qiita.com/cielavenir/items/1a650a4c41d7bdd31392|\n|JavaScript|http://qiita.com/cielavenir/items/a85b985888fdc15c52b7|\n|Go/CoffeeScript/Scala/R/Bash|http://qiita.com/cielavenir/items/79016a0afd30470f440d|\n|VB/F&sharp;/D|http://qiita.com/cielavenir/items/cb6094bab56253de992c|\n\nVB\n\n```vbnet:paizapoh1.vb\nmodule PaizaPOH1\n\tdim SIZE as integer=9999999\n\tdim z(SIZE) as byte\n\tdim input_count as integer=0\n\n\tfunction myget() as integer\n\t\tdim r as integer\n\t\twhile 48<=z(input_count) andalso z(input_count)<=57\n\t\t\tr=r*10+z(input_count)-48\n\t\t\tinput_count+=1\n\t\tend while\n\t\tinput_count+=1\n\t\treturn r\n\tend function\n\n\tsub Main()\n\t\tConsole.OpenStandardInput().Read(z,0,SIZE)\n\t\tdim n as integer=myget()\n\t\tdim d as integer=myget()\n\t\tdim zv(1000000) as integer\n\t\tdim v(n-1) as integer\n\n\t\tfor i as integer=0 to n-1\n\t\t\tzv(myget())+=1\n\t\tnext\n\t\tdim x as integer=0\n\t\tfor j as integer=0 to 1000000\n\t\t\tdim k as integer=0\n\t\t\twhile k<zv(j)\n\t\t\t\tv(x)=j\n\t\t\t\tx+=1\n\t\t\t\tk+=1\n\t\t\tend while\n\t\tnext\n\t\tfor i as integer=0 to d-1\n\t\t\tdim m as integer=myget()\n\t\t\tdim idx as integer=Array.BinarySearch(v,m-v(0)+1)\n\t\t\tif idx<0\n\t\t\t\tidx=not idx\n\t\t\tend if\n\t\t\tdim r as integer=0\n\t\t\tdim j as integer=0\n\t\t\tdim k as integer=idx-1\n\t\t\twhile r<m andalso j<k andalso v(j)+v(j+1)<=m\n\t\t\t\twhile v(j)+v(k)>m\n\t\t\t\t\tk-=1\n\t\t\t\tend while\n\t\t\t\tif r<v(j)+v(k)\n\t\t\t\t\tr=v(j)+v(k)\n\t\t\t\tend if\n\t\t\t\tj+=1\n\t\t\tend while\n\t\t\tConsole.WriteLine(r)\n\t\tnext\n\tend sub\nend module\n```\n\nF&sharp;\n\n```fsharp:paizapoh1.fs\nopen System\nlet arg:String array=Console.ReadLine().Split(' ')\nlet n=int(arg.[0])\nlet d=int(arg.[1])\nlet _v:int array=Array.zeroCreate(1000001)\nlet v:int array=Array.zeroCreate(n)\nfor i in 0..n-1 do\n let x=int(Console.ReadLine())\n _v.[x]<-_v.[x]+1\nlet mutable x=0\nfor j in 0..1000000 do\n for k in 0.._v.[j]-1 do\n  v.[x]<-j\n  x<-x+1\nfor i in 0..d-1 do\n let m=int(Console.ReadLine())\n let mutable idx=Array.BinarySearch(v,m-v.[0]+1)\n if idx<0 then\n  idx<-(~~~idx)\n let mutable r=0\n let mutable j=0\n let mutable k=idx-1\n while r<m && j<k && v.[j]+v.[j+1]<=m do\n  while v.[j]+v.[k]>m do\n   k<-k-1\n  if r<v.[j]+v.[k] then\n   r<-v.[j]+v.[k]\n  j<-j+1\n Console.WriteLine(r)\n```\n\nD\n\n```d:paizapoh1.d\nimport std.stdio;\nint array_binarysearch(int needle, int[] haystack, int size){\n\tint high = size-1;\n\tint low = 0;\n\tint ret = size;\n\twhile( low <= high ){\n\t\tint probe = (high + low) / 2;\n\t\tint comparison = haystack[probe]-needle;\n\t\tif( comparison <= 0 ){\n\t\t\tlow = probe+1;\n\t\t}else{\n\t\t\tret=high;\n\t\t\thigh = probe-1;\n\t\t}\n\t}\n\treturn ret;\n}\nchar[9999999] z;\nint[1000001] _v;\nint[500000] v;\nint get(){\n\tstatic int input_count=0;\n\tint r=0;\n\tfor(;'0'<=z[input_count]&&z[input_count]<='9';)r=r*10+z[input_count++]-'0';\n\tinput_count++;\n\treturn r;\n}\nvoid main(){\n\tstdin.rawRead(z);\n\tint n,d,m,i,j,k,r;\n\tn=get(),d=get();\n\tfor(i=0;i<n;i++)_v[get()]++;\n\tfor(i=j=0;j<1000001;j++)for(k=0;k<_v[j];k++)v[i++]=j;\n\tfor(i=0;i<d;i++){\n\t\tm=get();\n\t\tint idx=array_binarysearch(m-v[0],v,n);\n\t\tfor(r=j=0,k=idx-1;r<m&&j<k&&v[j]+v[j+1]<=m;j++){\n\t\t\tfor(;v[j]+v[k]>m;)k--;\n\t\t\tif(r<v[j]+v[k])r=v[j]+v[k];\n\t\t}\n\t\tprintf(\"%d\\n\",r);\n\t}\n}\n```\n", "tags": ["VB.Net", "F#", "dlang"]}