{"context": "\n\n\u4eca\u56de\u5b9f\u88c5\u3059\u308b AST \u5909\u63db\nGroovy \u304c\u6a19\u6e96\u3067\u63d0\u4f9b\u3057\u3066\u3044\u308b AST \u5909\u63db\u306b @Newify \u3068\u3044\u3046\u306e\u304c\u3042\u308b\u306e\u3067\u3059\u304c\u3001\u3054\u5b58\u77e5\u3067\u3057\u3087\u3046\u304b\u3002Groovy \u3067\u306f\u65b0\u3057\u3044\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u751f\u6210\u3059\u308b\u3068\u304d\u306b new SomeClass()\u3068\u66f8\u304f\u306e\u3067\u3059\u304c\u3001\u3053\u308c\u3092 Ruby \u3063\u307d\u304f SomeClass.new() \u3068\u66f8\u3044\u305f\u308a\u3001Python \u3063\u307d\u304f SomeClass() \u3068\u66f8\u3044\u305f\u308a\u3067\u304d\u308b\u3088\u3046\u306b\u3059\u308b AST \u5909\u63db\u3067\u3059\u3002\n\u3053\u308c\u306b\u4f55\u306e\u610f\u5473\u304c\u3042\u308b\u304b\u3068\u3044\u3046\u3068\u3001\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u3092\u305f\u304f\u3055\u3093\u547c\u3076\u5fc5\u8981\u304c\u3042\u308b\u3068\u304d\u306b\u3001\u898b\u305f\u76ee\u3092\u826f\u304f\u3057\u305f\u308a\u8a18\u8ff0\u3092\u6e1b\u3089\u3057\u305f\u308a\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002Groovydoc \u306b\u3082\u3042\u308b\u4f8b\u3067\u3059\u304c\u3001\u6728\u69cb\u9020\u3092\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3067\u8868\u73fe\u3059\u308b\u3068\u304d\u306b\u3001AST \u5909\u63db\u306a\u3057\u3067\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u66f8\u304f\u3053\u3068\u306b\u306a\u308a\u307e\u3059\u3002\nnew Tree(new Leaf(\"A\"), new Tree(new Tree(new Leaf(\"B\"), new Leaf(\"C\")), new Leaf(\"D\"))\n\n@Newify \u3092\u3064\u3051\u308b\u3053\u3068\u3067\u3001\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u66f8\u3051\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002\u8a18\u8ff0\u91cf\u306f\u6e1b\u3063\u3066\u307e\u305b\u3093\u304c\u3001new \u3068 Leaf \u306a\u3069\u306e\u9593\u306b\u30b9\u30da\u30fc\u30b9\u304c\u306a\u304f\u306a\u308b\u306e\u3067\u898b\u3084\u3059\u304f\u306f\u306a\u3063\u3066\u3044\u308b\u3068\u601d\u3044\u307e\u3059 (\u500b\u4eba\u5dee\u306f\u3042\u308a\u305d\u3046\u3067\u3059\u304c)\u3002\nTree.new(Leaf.new(\"A\"), Tree.new(Tree.new(Leaf.new(\"B\"), Leaf.new(\"C\")), Leaf.new(\"D\"))\n\n\u3082\u3057\u304f\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002new \u304c\u306a\u3044\u5206\u3060\u3051\u8a18\u8ff0\u304c\u7c21\u6f54\u306b\u306a\u308a\u3001\u3055\u3089\u306b\u898b\u3084\u3059\u3044\u3067\u3059\u306d\u3002\nTree(Leaf(\"A\"), Tree(Tree(Leaf(\"B\"), Leaf(\"C\")), Leaf(\"D\"))\n\n\u3055\u3066\u3001\u3053\u306e @Newify \u3067\u3059\u304c\u3001\u914d\u5217\u306b\u95a2\u3057\u3066\u306f\u3046\u307e\u304f\u3044\u304d\u307e\u305b\u3093\u3002new int[3][4] \u306e\u3064\u3082\u308a\u3067 int[][].new(3, 4) \u306a\u3069\u3068\u66f8\u3044\u3066\u3082 new int[][](3, 4) \u306b\u5909\u63db\u3055\u308c\u3066\u3057\u307e\u3044\u3001\u30a8\u30e9\u30fc\u306b\u306a\u308a\u307e\u3059\u3002 \u305d\u3053\u3067\u3001\u3053\u308c\u3092\u3061\u3083\u3093\u3068 new int[3][4] \u306b\u5909\u63db\u3059\u308b AST \u5909\u63db\u3092\u4f5c\u3063\u3066\u307f\u307e\u3059\u3002\u5b9f\u7528\u7684\u304b\u306f\u7f6e\u3044\u3066\u304a\u3044\u3066\u3001\u3068\u306b\u304b\u304f AST \u5909\u63db\u306e\u30b5\u30f3\u30d7\u30eb\u306b\u3067\u3082\u306a\u308c\u3070\u5e78\u3044\u3067\u305912\u3002\n\n\u5b9f\u88c5\n\n\u30a2\u30ce\u30c6\u30fc\u30b7\u30e7\u30f3\u306e\u4f5c\u6210\n\u3044\u305f\u3063\u3066\u666e\u901a\u3067\u3059\u3002\n\nNewifyArrays.groovy\npackage ziphil.transform\n\nimport java.lang.annotation.ElementType\nimport java.lang.annotation.Retention\nimport java.lang.annotation.RetentionPolicy\nimport java.lang.annotation.Target\nimport org.codehaus.groovy.transform.GroovyASTTransformationClass\n\n\n@Retention(RetentionPolicy.SOURCE)\n@Target([ElementType.METHOD, ElementType.CONSTRUCTOR, ElementType.TYPE, ElementType.FIELD])\n@GroovyASTTransformationClass([\"ziphil.transform.NewifyArraysTransformation\"])\npublic @interface NewifyArrays {\n}\n\n\n\u30a2\u30ce\u30c6\u30fc\u30b7\u30e7\u30f3\u306f\u3001\u30e1\u30bd\u30c3\u30c9 (\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u542b\u3080) \u3068\u30af\u30e9\u30b9\u3068\u30d5\u30a3\u30fc\u30eb\u30c9\u306b\u4ed8\u52a0\u3067\u304d\u308b\u3088\u3046\u306b\u3057\u3066\u304a\u304d\u307e\u3059\u3002\n\n\u914d\u5217\u306e\u8981\u7d20\u306e\u578b\u3092\u53d6\u5f97\u3059\u308b\u30e1\u30bd\u30c3\u30c9\u306e\u4f5c\u6210\nAST \u5909\u63db\u3092\u5b9f\u88c5\u3059\u308b\u3068\u304d\u306b\u3001\u914d\u5217\u578b\u3092\u8868\u3059 ClassNode \u304b\u3089\u305d\u306e\u8981\u7d20\u306e\u578b\u3092\u8868\u3059 ClassNode \u3092\u53d6\u5f97\u3059\u308b\u5fc5\u8981\u304c\u51fa\u3066\u304f\u308b\u306e\u3067\u3001\u305d\u308c\u3092\u884c\u3048\u308b\u30e6\u30fc\u30c6\u30a3\u30ea\u30c6\u30a3\u30e1\u30bd\u30c3\u30c9\u3092\u7528\u610f\u3057\u3066\u304a\u304d\u307e\u3059\u3002\n\nTypeConverter.groovy\npackage ziphil.transform\n\nimport groovy.transform.CompileStatic\nimport org.codehaus.groovy.ast.ClassNode\n\n@CompileStatic\npublic class TypeConverter {\n\n  public static ClassNode toComponentType(ClassNode type) {\n    ClassNode componentType = type\n    while (componentType.isArray()) {\n      componentType = componentType.getComponentType()\n    }\n    return componentType\n  }\n\n}\n\n\nClassNode \u30af\u30e9\u30b9\u306e getComponentType \u30e1\u30bd\u30c3\u30c9\u306f\u3001\u914d\u5217\u578b\u306e ClassNode \u306b\u5bfe\u3057\u3066\u305d\u306e\u8981\u7d20\u306e\u578b\u3092\u8fd4\u3057\u307e\u3059\u3002\u305f\u3060\u3057\u3001\u591a\u6b21\u5143\u914d\u5217\u306e\u5834\u5408\u306f\u6b21\u5143\u304c 1 \u3064\u4e0b\u304c\u3063\u305f\u578b\u304c\u8fd4\u3063\u3066\u304f\u308b\u3060\u3051 (String[][] \u306e ClassNode \u306b\u5bfe\u3057\u3066 getComponentType \u3092\u547c\u3076\u3068 String[] \u306e ClassNode \u304c\u8fd4\u308b) \u306a\u306e\u3067\u3001\u305d\u308c\u3092\u7e70\u308a\u8fd4\u3057\u547c\u3093\u3067\u3044\u307e\u3059\u3002\n\nAST \u5909\u63db\u306e\u51e6\u7406\u306e\u5b9f\u88c5\n\u5f0f\u306e\u5909\u63db\u3092\u884c\u3046 AST \u5909\u63db\u306a\u306e\u3067\u3001ClassCodeExpressionTransformer \u3068\u3044\u3046\u30e6\u30fc\u30c6\u30ea\u30c6\u30a3\u30af\u30e9\u30b9\u304c\u5229\u7528\u3067\u304d\u307e\u3059\u3002\u3053\u306e\u30af\u30e9\u30b9\u306e\u8a73\u3057\u3044\u52d5\u4f5c\u306b\u3064\u3044\u3066\u306f\u3001\u3059\u3067\u306b\u3053\u3061\u3089\u3067\u89e3\u8aac\u3057\u3066\u3042\u308b\u306e\u3067\u3001\u3053\u3053\u3067\u306f\u5272\u611b\u3057\u307e\u3059\u3002\n\nNewifyArraysTransformation.groovy\npackage ziphil.transform\n\nimport groovy.transform.CompileStatic\nimport org.codehaus.groovy.ast.AnnotatedNode\nimport org.codehaus.groovy.ast.ASTNode\nimport org.codehaus.groovy.ast.ClassCodeExpressionTransformer\nimport org.codehaus.groovy.ast.ClassNode\nimport org.codehaus.groovy.ast.FieldNode\nimport org.codehaus.groovy.ast.MethodNode\nimport org.codehaus.groovy.ast.Parameter\nimport org.codehaus.groovy.ast.expr.ArgumentListExpression\nimport org.codehaus.groovy.ast.expr.ArrayExpression\nimport org.codehaus.groovy.ast.expr.ConstantExpression\nimport org.codehaus.groovy.ast.expr.ConstructorCallExpression\nimport org.codehaus.groovy.ast.expr.ClassExpression\nimport org.codehaus.groovy.ast.expr.ClosureExpression\nimport org.codehaus.groovy.ast.expr.Expression\nimport org.codehaus.groovy.ast.expr.MethodCallExpression\nimport org.codehaus.groovy.control.CompilePhase\nimport org.codehaus.groovy.control.SourceUnit\nimport org.codehaus.groovy.transform.ASTTransformation\nimport org.codehaus.groovy.transform.GroovyASTTransformation\n\n@GroovyASTTransformation(phase=CompilePhase.CANONICALIZATION)\n@CompileStatic\npublic class NewifyArraysTransformation extends ClassCodeExpressionTransformer implements ASTTransformation {\n\n  private SourceUnit sourceUnit\n\n  public void visit(ASTNode[] nodes, SourceUnit sourceUnit) {\n    AnnotatedNode parent = (AnnotatedNode)nodes[1]\n    this.sourceUnit = sourceUnit\n    if (parent instanceof ClassNode) {\n      visitClass(parent)\n    } else if (parent instanceof MethodNode) {\n      visitMethod(parent)\n    } else if (parent instanceof FieldNode) {\n      visitField(parent)\n    }\n  }\n\n  public Expression transform(Expression expression) {\n    if (expression != null) {\n      // (1) \u30e1\u30bd\u30c3\u30c9\u547c\u3073\u51fa\u3057\u306e\u5834\u5408\n      if (expression instanceof MethodCallExpression) {\n        // (2) \u30ec\u30b7\u30fc\u30d0\u3068\u30e1\u30bd\u30c3\u30c9\u672c\u4f53\u3068\u5f15\u6570\u3092\u305d\u308c\u305e\u308c\u53d6\u5f97\n        Expression receiver = expression.getObjectExpression()\n        Expression method = expression.getMethod()\n        Expression arguments = expression.getArguments()\n        // (3) \u30af\u30e9\u30b9\u3092\u5224\u5b9a\n        if (receiver instanceof ClassExpression && method instanceof ConstantExpression && arguments instanceof ArgumentListExpression) {\n          // (4) \u30e1\u30bd\u30c3\u30c9\u540d\u304c new \u306e\u5834\u5408\n          if (method.getText() == \"new\") {\n            // (5) \u30ec\u30b7\u30fc\u30d0\u306e\u578b\u304c\u914d\u5217\u306e\u5834\u5408\n            if (receiver.getType().isArray()) {\n              // (6) \u914d\u5217\u306e\u8981\u7d20\u306e\u578b\u3092\u53d6\u5f97\n              ClassNode nextType = TypeConverter.toComponentType(receiver.getType())\n              Expression nextArguments = transform(arguments)\n              // (7) \u914d\u5217\u306e\u521d\u671f\u5316\u3092\u8868\u3059 AST \u3092\u751f\u6210\n              Expression nextExpression = new ArrayExpression(nextType, null, ((ArgumentListExpression)nextArguments).getExpressions())\n              // (8) \u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u4e0a\u306e\u4f4d\u7f6e\u3092\u8a2d\u5b9a\n              nextExpression.setSourcePosition(expression)\n              return nextExpression\n            }\n          }\n        }\n      // (9)\n      } else if (expression instanceof ClosureExpression) {\n        expression.getCode().visit(this)\n      // (10)\n      } else if (expression instanceof ConstructorCallExpression) {\n        if (expression.isUsingAnonymousInnerClass()) {\n          expression.getType().visitContents(this)\n        }\n      }\n      return expression.transformExpression(this)\n    } else {\n      return null\n    }\n  }\n\n  public SourceUnit getSourceUnit() {\n    return this.sourceUnit\n  }\n\n}\n\n\n\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u3092\u9806\u756a\u306b\u89e3\u8aac\u3057\u3066\u3044\u304d\u307e\u3059\u3002\n(1): \u30e1\u30bd\u30c3\u30c9\u547c\u3073\u51fa\u3057\u306e AST \u306b\u5bfe\u5fdc\u3059\u308b\u578b\u306f MethodCallExpression \u3067\u3059\u3002\u5909\u63db\u3057\u305f\u3044\u5f0f\u306f int[].new(4) \u306e\u3088\u3046\u306a\u30e1\u30bd\u30c3\u30c9\u547c\u3073\u51fa\u3057\u306e\u5f62\u306a\u306e\u3067\u3001\u307e\u305a expression \u304c\u30e1\u30bd\u30c3\u30c9\u547c\u3073\u51fa\u3057\u306e AST \u304b\u3069\u3046\u304b\u3092\u5224\u5b9a\u3057\u307e\u3059\u3002\n(2): \u30ec\u30b7\u30fc\u30d0\u3068\u30e1\u30bd\u30c3\u30c9\u672c\u4f53\u3068\u5f15\u6570\u3092\u305d\u308c\u305e\u308c\u53d6\u5f97\u3057\u307e\u3059\u3002\u30ec\u30b7\u30fc\u30d0\u3092\u53d6\u5f97\u3059\u308b\u30e1\u30bd\u30c3\u30c9\u306f getObjectExpression \u3068 getReceiver \u3068 2 \u7a2e\u985e\u3042\u308b\u306e\u3067\u3059\u304c\u3001\u9055\u3044\u304c\u3088\u304f\u5206\u304b\u308a\u307e\u305b\u3093\u3067\u3057\u305f\u3002\n(3): (2) \u3067\u53d6\u5f97\u3057\u305f\u5909\u6570\u304c\u60f3\u5b9a\u3057\u3066\u3044\u308b\u578b\u304b\u3069\u3046\u304b\u3092\u5224\u5b9a\u3057\u307e\u3059\u3002\u5909\u63db\u3057\u305f\u3044\u5f0f\u306f int[].new(4) \u306e\u5f62\u5f0f\u306a\u306e\u3067\u3001\u30ec\u30b7\u30fc\u30d0\u304c\u30af\u30e9\u30b9\u3092\u8868\u3059\u5f0f (ClassExpression) \u304b\u3069\u3046\u304b\u3001\u307e\u305f\u30e1\u30bd\u30c3\u30c9\u672c\u4f53\u304c\u5b9a\u6570 (ConstantExpression) \u3067\u3042\u308b\u304b\u3069\u3046\u304b\u3092\u5224\u5b9a\u3057\u3066\u3044\u307e\u3059\u3002\u5f15\u6570\u306f\u5fc5\u305a ArgumentListExpression \u306a\u6c17\u304c\u3059\u308b\u306e\u3067\u5224\u5b9a\u304c\u5fc5\u8981\u304b\u3069\u3046\u304b\u5206\u304b\u308a\u307e\u305b\u3093\u304c\u3001\u30ad\u30e3\u30b9\u30c8\u306e\u610f\u5473\u3082\u8fbc\u3081\u3066\u5224\u5b9a\u3057\u3066\u3044\u307e\u3059\u3002\n(4): \u30e1\u30bd\u30c3\u30c9\u540d\u304c\u300cnew\u300d\u304b\u3069\u3046\u304b\u3092\u5224\u5b9a\u3057\u307e\u3059\u3002getText \u30e1\u30bd\u30c3\u30c9\u3067\u30e1\u30bd\u30c3\u30c9\u540d\u3092 String \u3068\u3057\u3066\u53d6\u5f97\u3067\u304d\u307e\u3059\u3002\n(5): \u30ec\u30b7\u30fc\u30d0\u304c\u30af\u30e9\u30b9\u3092\u8868\u3059\u5f0f\u3067\u3042\u308b\u3053\u3068\u306f\u3059\u3067\u306b\u5224\u5b9a\u3057\u307e\u3057\u305f\u304c\u3001\u4eca\u56de\u5b9f\u88c5\u3059\u308b AST \u5909\u63db\u306f\u30ec\u30b7\u30fc\u30d0\u304c\u914d\u5217\u30af\u30e9\u30b9\u3092\u8868\u3059\u5f0f\u3067\u3042\u308b\u5834\u5408\u306b\u884c\u3046\u306e\u3067\u3001\u914d\u5217\u30af\u30e9\u30b9\u304b\u3069\u3046\u304b\u3092\u5224\u5b9a\u3057\u3066\u3044\u307e\u3059\u3002ClassNode \u306b isArray \u3068\u3044\u3046\u305d\u306e\u307e\u307e\u306e\u30e1\u30bd\u30c3\u30c9\u304c\u3042\u308b\u306e\u3067\u3001\u305d\u308c\u3092\u4f7f\u3063\u3066\u3044\u307e\u3059\u3002\n(6): \u4e0a\u3067\u4f5c\u3063\u305f\u30e1\u30bd\u30c3\u30c9\u3092\u4f7f\u3044\u3001\u914d\u5217\u306e\u8981\u7d20\u306e\u578b\u3092\u53d6\u5f97\u3057\u307e\u3059\u3002\n(7): \u5909\u63db\u5f8c\u306e AST \u3092\u751f\u6210\u3057\u307e\u3059\u3002\u914d\u5217\u306e\u751f\u6210\u306e AST \u306b\u5bfe\u5fdc\u3059\u308b\u578b\u306f ArrayExpression \u306a\u306e\u3067\u3001\u305d\u306e\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u3092\u547c\u3093\u3067\u3044\u307e\u3059\u3002ArrayExpression \u306e\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u306e\u5f15\u6570\u306b\u3064\u3044\u3066\u306f\u3001\u5f8c\u3067\u8a73\u3057\u304f\u8aac\u660e\u3057\u307e\u3059\u3002\n(8): nextExpression \u306f\u3053\u306e\u5834\u3067\u751f\u6210\u3057\u305f AST \u306a\u306e\u3067\u3001\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u4e0a\u306e\u4f4d\u7f6e\u3068\u7d50\u3073\u3064\u3044\u3066\u3044\u307e\u305b\u3093\u3002\u3053\u308c\u3092\u8a2d\u5b9a\u3059\u308b\u306b\u306f lineNumber, columnNumber, lastLineNumber, lastColumnNumber \u3068\u3044\u3046 4 \u3064\u306e\u30d7\u30ed\u30d1\u30c6\u30a3\u3092\u8a2d\u5b9a\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u304c\u3001\u3059\u3067\u306b\u3042\u308b\u5f0f\u3068\u5168\u304f\u540c\u3058\u5024\u3092\u8a2d\u5b9a\u3059\u308b\u3060\u3051\u306a\u3089\u3001setSourcePosition \u3068\u3044\u3046\u4fbf\u5229\u306a\u30e1\u30bd\u30c3\u30c9\u304c\u3042\u308a\u307e\u3059\u3002\u3053\u3053\u3067\u306f\u3001\u3082\u3068\u3082\u3068\u306e\u5f0f\u3067\u3042\u308b expression \u3068\u540c\u3058\u5024\u3092\u8a2d\u5b9a\u3059\u308c\u3070\u826f\u3044\u306e\u3067\u3001\u3053\u306e\u30e1\u30bd\u30c3\u30c9\u3092\u5229\u7528\u3057\u3066\u3044\u307e\u3059\u3002\n(9), (10): ClassCodeExpressionTransformer \u30af\u30e9\u30b9\u306f\u3001visit\uff5e \u30e1\u30bd\u30c3\u30c9\u3092\u547c\u3076\u3068\u305d\u308c\u306b\u542b\u307e\u308c\u308b\u5168\u3066\u306e\u5f0f\u3092\u5f15\u6570\u306b\u3057\u3066 transform \u30e1\u30bd\u30c3\u30c9\u3092\u547c\u3093\u3067\u304f\u308c\u308b\u306e\u3067\u3059\u304c\u3001\u30af\u30ed\u30fc\u30b8\u30e3\u3084\u533f\u540d\u30af\u30e9\u30b9\u306e\u4e2d\u8eab\u306b\u3064\u3044\u3066\u306f transform \u30e1\u30bd\u30c3\u30c9\u3092\u547c\u3093\u3067\u304f\u308c\u307e\u305b\u3093\u3002\u305d\u3053\u3067\u3001\u3053\u306e\u7b87\u6240\u3067\u81ea\u524d\u3067\u547c\u3093\u3067\u3044\u307e\u3059\u3002\n\n\u5b9f\u969b\u306b\u4f7f\u3063\u3066\u307f\u308b\n\u4e0a\u3067\u4f5c\u6210\u3057\u305f 3 \u3064\u306e\u30d5\u30a1\u30a4\u30eb (NewifyArrays.groovy, NewifyArraysTransformation.groovy, TypeConverter.groovy) \u3092 Groovy \u3067\u30b3\u30f3\u30d1\u30a4\u30eb\u3057\u3001\u305d\u308c\u306b\u3088\u3063\u3066\u3067\u304d\u305f\u30af\u30e9\u30b9\u30d5\u30a1\u30a4\u30eb\u304c\u30af\u30e9\u30b9\u30d1\u30b9\u306b\u3042\u308b\u72b6\u614b\u3067\u4ee5\u4e0b\u306e\u30b3\u30fc\u30c9\u3092\u5b9f\u884c\u3057\u3066\u307f\u307e\u3057\u3087\u3046\u3002\nimport ziphil.transform.NewifyArrays\n\npublic class Test { \n\n    @NewifyArrays static int[] field = int[].new(10)\n\n    @NewifyArrays\n    public static void main(java.lang.String[] args) {\n        String[][] array = String[][].new(2, 3)\n        array[0][0] = \"foo\"\n        array[1][2] = \"bar\"\n        field[3] = 3\n        field[4] = 4\n        println(array)\n        println(field)\n    }\n\n}\n\n\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u51fa\u529b\u3055\u308c\u308c\u3070\u6210\u529f\u3067\u3059\u306d\u3002\n[[foo, null, null], [null, null, bar]]\n[0, 0, 0, 3, 4, 0, 0, 0, 0, 0]\n\n\nArrayExpression \u306e\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u306b\u3064\u3044\u3066\nArrayExpression \u306e Groovydoc \u3092\u898b\u308b\u3068\u3001\u7b2c 3 \u5f15\u6570\u3092\u7701\u7565\u3059\u308b\u304b\u3057\u306a\u3044\u304b\u3067\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u304c 2 \u7a2e\u985e\u3042\u308a\u307e\u3059\u3002\n\u7b2c 1 \u5f15\u6570\u306e elementType \u306f\u914d\u5217\u306e\u8981\u7d20\u306e\u578b\u3067\u3059\u3002\u6ce8\u610f\u3059\u3079\u304d\u306a\u306e\u306f\u3001String[] \u578b\u306e\u914d\u5217\u3092\u751f\u6210\u3057\u305f\u3044\u306a\u3089 elementType \u306b\u306f String \u3092\u8868\u3059 ClassNode \u3092\u6e21\u3055\u306a\u3051\u308c\u3070\u306a\u3089\u306a\u3044\u70b9\u3067\u3059\u3002\u6e21\u3059\u578b\u306f\u914d\u5217\u578b\u3067\u306f\u306a\u304f\u914d\u5217\u306e\u8981\u7d20\u306e\u578b\u3067\u3059\u3002\n\u7b2c 3 \u5f15\u6570\u306e sizeExpression \u3067\u306f\u914d\u5217\u306e\u30b5\u30a4\u30ba\u3092\u8868\u3059\u5f0f\u3092\u683c\u7d0d\u3057\u305f\u914d\u5217\u3092\u6307\u5b9a\u3057\u307e\u3059\u3002new int[3][5] \u306a\u3089 3 \u3068 5 \u306e\u90e8\u5206\u3067\u3059\u3002\u3053\u308c\u3092\u7701\u7565\u3059\u308b\u3068\u9577\u3055 0 \u306e 1 \u6b21\u5143\u914d\u5217\u306b\u306a\u308a\u307e\u3059\u3002\u4ee5\u4e0b\u306e\u30b3\u30fc\u30c9\u306f new int[3][5] \u306e AST \u3092\u751f\u6210\u3057\u307e\u3059\u3002\nClassNode type = ClassHelper.make(\"int\")\nExpression firstSize = new ConstantExpression(3)\nExpression secondSize = new ConstantExpression(5)\nExpression expression = new ArrayExpression(type, null, (List<Expression>)[firstSize, secondSize])\n\n\u554f\u984c\u306f\u7b2c 2 \u5f15\u6570\u3067\u3059\u3002\u3044\u308d\u3044\u308d\u8a66\u884c\u932f\u8aa4\u3057\u305f\u7d50\u679c\u3001\u3069\u3046\u3084\u3089\u6307\u5b9a\u3057\u305f\u8981\u7d20\u3092\u683c\u7d0d\u3057\u305f\u72b6\u614b\u306e\u914d\u5217\u3092\u8fd4\u3059\u3088\u3046\u3067\u3059\u3002\u4f8b\u3048\u3070\u3001\u4ee5\u4e0b\u306e\u30b3\u30fc\u30c9\u3067\u306f \"FIRST\" \u3068 \"SECOND\" \u304c\u683c\u7d0d\u3055\u308c\u305f\u9577\u3055 2 \u306e String[] \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e AST \u304c\u751f\u6210\u3055\u308c\u307e\u3059\u3002Java \u306a\u3089 new String[]{\"FIRST\", \"SECOND\"} \u306b\u5bfe\u5fdc\u3059\u308b\u3082\u306e\u3067\u3059 (\u3053\u306e\u8a18\u6cd5\u306f Groovy \u3067\u30b5\u30dd\u30fc\u30c8\u3055\u308c\u3066\u3044\u307e\u305b\u3093)\u3002\nClassNode type = ClassHelper.make(\"java.lang.String\")\nExpression first = new ConstantExpression(\"FIRST\")\nExpression second = new ConstantExpression(\"SECOND\")\nExpression expression = new ArrayExpression(type, (List<Expression>)[first, second])\n\n\u3061\u306a\u307f\u306b\u3001\u7b2c 2 \u5f15\u6570\u3068\u7b2c 3 \u5f15\u6570\u304c\u4e21\u65b9\u6307\u5b9a\u3055\u308c\u3066\u3044\u308b\u5834\u5408\u3001\u7b2c 2 \u5f15\u6570\u306f\u7121\u8996\u3055\u308c\u308b\u3088\u3046\u3067\u3059\u3002\u4ee5\u4e0b\u306e\u30b3\u30fc\u30c9\u3067\u306f\u5404\u8981\u7d20\u304c null \u3067\u521d\u671f\u5316\u3055\u308c\u305f\u9577\u3055 3 \u306e String[] \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e AST \u304c\u751f\u6210\u3055\u308c\u307e\u3059\u3002\u3064\u307e\u308a\u3001\u7b2c 2 \u5f15\u6570\u306b null \u3092\u6307\u5b9a\u3057\u305f\u306e\u3068\u540c\u3058\u7d50\u679c\u306b\u306a\u308a\u307e\u3059\u3002\nClassNode type = ClassHelper.make(\"java.lang.String\")\nExpression first = new ConstantExpression(\"FIRST\")\nExpression second = new ConstantExpression(\"SECOND\")\nExpression size = new ConstantExpression(3)\nExpression expression = new ArrayExpression(type, (List<Expression>)[first, second], (List<Expression>)[size])\n\nGroovy \u306b\u306f\u914d\u5217\u306e\u30ea\u30c6\u30e9\u30eb\u306f\u306a\u3044 (List \u306e\u30ea\u30c6\u30e9\u30eb\u306f\u3042\u308b) \u306f\u305a\u3067\u3059\u304c\u3001\u306a\u305c\u3053\u3093\u306a\u3082\u306e\u304c\u7528\u610f\u3055\u308c\u3066\u3044\u308b\u306e\u3067\u3057\u3087\u3046\u304b\uff65\uff65\uff65\u3002\n\n\n\n\n\u5b9f\u7528\u6027\u306f\u307b\u307c\u306a\u3044\u3068\u601d\u3044\u307e\u3059\u304c\u3001\u30c7\u30d5\u30a9\u30eb\u30c8\u306e @Newify \u3067\u306f\u914d\u5217\u3067\u30a8\u30e9\u30fc\u306b\u306a\u308b\u306e\u304c\u6c17\u306b\u306a\u3063\u305f\u306e\u3067\u3001\u81ea\u5206\u3067\u4fee\u6b63\u7248\u3092\u4f5c\u3063\u3066\u307f\u305f\u304b\u3063\u305f\u3068\u3044\u3046\u52d5\u6a5f\u304c\u3042\u308a\u307e\u3057\u305f\u3002\u00a0\u21a9\n\n\n\u4f5c\u3063\u305f\u5f8c\u306b\u306a\u3063\u3066 new int[][].new(2, 3) \u3067\u306f\u306a\u304f\u3066 int[2][3].new() \u3067\u3082\u826f\u304b\u3063\u305f\u304b\u306a\u3068\u3082\u601d\u3063\u305f\u306e\u3067\u3059\u304c\u3001\u9045\u304b\u3063\u305f\u3067\u3059\uff65\uff65\uff65\u3002\u00a0\u21a9\n\n\n\n## \u4eca\u56de\u5b9f\u88c5\u3059\u308b AST \u5909\u63db\n\nGroovy \u304c\u6a19\u6e96\u3067\u63d0\u4f9b\u3057\u3066\u3044\u308b AST \u5909\u63db\u306b `@Newify` \u3068\u3044\u3046\u306e\u304c\u3042\u308b\u306e\u3067\u3059\u304c\u3001\u3054\u5b58\u77e5\u3067\u3057\u3087\u3046\u304b\u3002Groovy \u3067\u306f\u65b0\u3057\u3044\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u751f\u6210\u3059\u308b\u3068\u304d\u306b `new SomeClass()`\u3068\u66f8\u304f\u306e\u3067\u3059\u304c\u3001\u3053\u308c\u3092 Ruby \u3063\u307d\u304f `SomeClass.new()` \u3068\u66f8\u3044\u305f\u308a\u3001Python \u3063\u307d\u304f `SomeClass()` \u3068\u66f8\u3044\u305f\u308a\u3067\u304d\u308b\u3088\u3046\u306b\u3059\u308b AST \u5909\u63db\u3067\u3059\u3002\n\n\u3053\u308c\u306b\u4f55\u306e\u610f\u5473\u304c\u3042\u308b\u304b\u3068\u3044\u3046\u3068\u3001\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u3092\u305f\u304f\u3055\u3093\u547c\u3076\u5fc5\u8981\u304c\u3042\u308b\u3068\u304d\u306b\u3001\u898b\u305f\u76ee\u3092\u826f\u304f\u3057\u305f\u308a\u8a18\u8ff0\u3092\u6e1b\u3089\u3057\u305f\u308a\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002Groovydoc \u306b\u3082\u3042\u308b\u4f8b\u3067\u3059\u304c\u3001\u6728\u69cb\u9020\u3092\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3067\u8868\u73fe\u3059\u308b\u3068\u304d\u306b\u3001AST \u5909\u63db\u306a\u3057\u3067\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u66f8\u304f\u3053\u3068\u306b\u306a\u308a\u307e\u3059\u3002\n\n```\nnew Tree(new Leaf(\"A\"), new Tree(new Tree(new Leaf(\"B\"), new Leaf(\"C\")), new Leaf(\"D\"))\n```\n\n`@Newify` \u3092\u3064\u3051\u308b\u3053\u3068\u3067\u3001\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u66f8\u3051\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002\u8a18\u8ff0\u91cf\u306f\u6e1b\u3063\u3066\u307e\u305b\u3093\u304c\u3001`new` \u3068 `Leaf` \u306a\u3069\u306e\u9593\u306b\u30b9\u30da\u30fc\u30b9\u304c\u306a\u304f\u306a\u308b\u306e\u3067\u898b\u3084\u3059\u304f\u306f\u306a\u3063\u3066\u3044\u308b\u3068\u601d\u3044\u307e\u3059 (\u500b\u4eba\u5dee\u306f\u3042\u308a\u305d\u3046\u3067\u3059\u304c)\u3002\n\n```\nTree.new(Leaf.new(\"A\"), Tree.new(Tree.new(Leaf.new(\"B\"), Leaf.new(\"C\")), Leaf.new(\"D\"))\n```\n\n\u3082\u3057\u304f\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002`new` \u304c\u306a\u3044\u5206\u3060\u3051\u8a18\u8ff0\u304c\u7c21\u6f54\u306b\u306a\u308a\u3001\u3055\u3089\u306b\u898b\u3084\u3059\u3044\u3067\u3059\u306d\u3002\n\n```\nTree(Leaf(\"A\"), Tree(Tree(Leaf(\"B\"), Leaf(\"C\")), Leaf(\"D\"))\n```\n\n\u3055\u3066\u3001\u3053\u306e `@Newify` \u3067\u3059\u304c\u3001\u914d\u5217\u306b\u95a2\u3057\u3066\u306f\u3046\u307e\u304f\u3044\u304d\u307e\u305b\u3093\u3002`new int[3][4]` \u306e\u3064\u3082\u308a\u3067 `int[][].new(3, 4)` \u306a\u3069\u3068\u66f8\u3044\u3066\u3082 `new int[][](3, 4)` \u306b\u5909\u63db\u3055\u308c\u3066\u3057\u307e\u3044\u3001\u30a8\u30e9\u30fc\u306b\u306a\u308a\u307e\u3059\u3002 \u305d\u3053\u3067\u3001\u3053\u308c\u3092\u3061\u3083\u3093\u3068 `new int[3][4]` \u306b\u5909\u63db\u3059\u308b AST \u5909\u63db\u3092\u4f5c\u3063\u3066\u307f\u307e\u3059\u3002\u5b9f\u7528\u7684\u304b\u306f\u7f6e\u3044\u3066\u304a\u3044\u3066\u3001\u3068\u306b\u304b\u304f AST \u5909\u63db\u306e\u30b5\u30f3\u30d7\u30eb\u306b\u3067\u3082\u306a\u308c\u3070\u5e78\u3044\u3067\u3059[^1][^2]\u3002\n\n## \u5b9f\u88c5\n\n### \u30a2\u30ce\u30c6\u30fc\u30b7\u30e7\u30f3\u306e\u4f5c\u6210\n\n\u3044\u305f\u3063\u3066\u666e\u901a\u3067\u3059\u3002\n\n```groovy:NewifyArrays.groovy\npackage ziphil.transform\n\nimport java.lang.annotation.ElementType\nimport java.lang.annotation.Retention\nimport java.lang.annotation.RetentionPolicy\nimport java.lang.annotation.Target\nimport org.codehaus.groovy.transform.GroovyASTTransformationClass\n\n\n@Retention(RetentionPolicy.SOURCE)\n@Target([ElementType.METHOD, ElementType.CONSTRUCTOR, ElementType.TYPE, ElementType.FIELD])\n@GroovyASTTransformationClass([\"ziphil.transform.NewifyArraysTransformation\"])\npublic @interface NewifyArrays {\n}\n```\n\n\u30a2\u30ce\u30c6\u30fc\u30b7\u30e7\u30f3\u306f\u3001\u30e1\u30bd\u30c3\u30c9 (\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u542b\u3080) \u3068\u30af\u30e9\u30b9\u3068\u30d5\u30a3\u30fc\u30eb\u30c9\u306b\u4ed8\u52a0\u3067\u304d\u308b\u3088\u3046\u306b\u3057\u3066\u304a\u304d\u307e\u3059\u3002\n\n### \u914d\u5217\u306e\u8981\u7d20\u306e\u578b\u3092\u53d6\u5f97\u3059\u308b\u30e1\u30bd\u30c3\u30c9\u306e\u4f5c\u6210\n\nAST \u5909\u63db\u3092\u5b9f\u88c5\u3059\u308b\u3068\u304d\u306b\u3001\u914d\u5217\u578b\u3092\u8868\u3059 `ClassNode` \u304b\u3089\u305d\u306e\u8981\u7d20\u306e\u578b\u3092\u8868\u3059 `ClassNode` \u3092\u53d6\u5f97\u3059\u308b\u5fc5\u8981\u304c\u51fa\u3066\u304f\u308b\u306e\u3067\u3001\u305d\u308c\u3092\u884c\u3048\u308b\u30e6\u30fc\u30c6\u30a3\u30ea\u30c6\u30a3\u30e1\u30bd\u30c3\u30c9\u3092\u7528\u610f\u3057\u3066\u304a\u304d\u307e\u3059\u3002\n\n```groovy:TypeConverter.groovy\npackage ziphil.transform\n\nimport groovy.transform.CompileStatic\nimport org.codehaus.groovy.ast.ClassNode\n\n@CompileStatic\npublic class TypeConverter {\n\n  public static ClassNode toComponentType(ClassNode type) {\n    ClassNode componentType = type\n    while (componentType.isArray()) {\n      componentType = componentType.getComponentType()\n    }\n    return componentType\n  }\n\n}\n```\n\n`ClassNode` \u30af\u30e9\u30b9\u306e `getComponentType` \u30e1\u30bd\u30c3\u30c9\u306f\u3001\u914d\u5217\u578b\u306e `ClassNode` \u306b\u5bfe\u3057\u3066\u305d\u306e\u8981\u7d20\u306e\u578b\u3092\u8fd4\u3057\u307e\u3059\u3002\u305f\u3060\u3057\u3001\u591a\u6b21\u5143\u914d\u5217\u306e\u5834\u5408\u306f\u6b21\u5143\u304c 1 \u3064\u4e0b\u304c\u3063\u305f\u578b\u304c\u8fd4\u3063\u3066\u304f\u308b\u3060\u3051 (`String[][]` \u306e `ClassNode` \u306b\u5bfe\u3057\u3066 `getComponentType` \u3092\u547c\u3076\u3068 `String[]` \u306e `ClassNode` \u304c\u8fd4\u308b) \u306a\u306e\u3067\u3001\u305d\u308c\u3092\u7e70\u308a\u8fd4\u3057\u547c\u3093\u3067\u3044\u307e\u3059\u3002\n\n### AST \u5909\u63db\u306e\u51e6\u7406\u306e\u5b9f\u88c5\n\n\u5f0f\u306e\u5909\u63db\u3092\u884c\u3046 AST \u5909\u63db\u306a\u306e\u3067\u3001`ClassCodeExpressionTransformer` \u3068\u3044\u3046\u30e6\u30fc\u30c6\u30ea\u30c6\u30a3\u30af\u30e9\u30b9\u304c\u5229\u7528\u3067\u304d\u307e\u3059\u3002\u3053\u306e\u30af\u30e9\u30b9\u306e\u8a73\u3057\u3044\u52d5\u4f5c\u306b\u3064\u3044\u3066\u306f\u3001\u3059\u3067\u306b[\u3053\u3061\u3089](http://qiita.com/Ziphil/items/680b63b2d31aa952e1c2#ast-%E5%A4%89%E6%8F%9B%E3%81%AE%E5%87%A6%E7%90%86%E3%81%AE%E5%AE%9F%E8%A3%85-ii-%E3%83%A6%E3%83%BC%E3%83%86%E3%83%AA%E3%83%86%E3%82%A3%E3%82%AF%E3%83%A9%E3%82%B9%E3%81%AE%E5%88%A9%E7%94%A8)\u3067\u89e3\u8aac\u3057\u3066\u3042\u308b\u306e\u3067\u3001\u3053\u3053\u3067\u306f\u5272\u611b\u3057\u307e\u3059\u3002\n\n```groovy:NewifyArraysTransformation.groovy\npackage ziphil.transform\n\nimport groovy.transform.CompileStatic\nimport org.codehaus.groovy.ast.AnnotatedNode\nimport org.codehaus.groovy.ast.ASTNode\nimport org.codehaus.groovy.ast.ClassCodeExpressionTransformer\nimport org.codehaus.groovy.ast.ClassNode\nimport org.codehaus.groovy.ast.FieldNode\nimport org.codehaus.groovy.ast.MethodNode\nimport org.codehaus.groovy.ast.Parameter\nimport org.codehaus.groovy.ast.expr.ArgumentListExpression\nimport org.codehaus.groovy.ast.expr.ArrayExpression\nimport org.codehaus.groovy.ast.expr.ConstantExpression\nimport org.codehaus.groovy.ast.expr.ConstructorCallExpression\nimport org.codehaus.groovy.ast.expr.ClassExpression\nimport org.codehaus.groovy.ast.expr.ClosureExpression\nimport org.codehaus.groovy.ast.expr.Expression\nimport org.codehaus.groovy.ast.expr.MethodCallExpression\nimport org.codehaus.groovy.control.CompilePhase\nimport org.codehaus.groovy.control.SourceUnit\nimport org.codehaus.groovy.transform.ASTTransformation\nimport org.codehaus.groovy.transform.GroovyASTTransformation\n\n@GroovyASTTransformation(phase=CompilePhase.CANONICALIZATION)\n@CompileStatic\npublic class NewifyArraysTransformation extends ClassCodeExpressionTransformer implements ASTTransformation {\n\n  private SourceUnit sourceUnit\n\n  public void visit(ASTNode[] nodes, SourceUnit sourceUnit) {\n    AnnotatedNode parent = (AnnotatedNode)nodes[1]\n    this.sourceUnit = sourceUnit\n    if (parent instanceof ClassNode) {\n      visitClass(parent)\n    } else if (parent instanceof MethodNode) {\n      visitMethod(parent)\n    } else if (parent instanceof FieldNode) {\n      visitField(parent)\n    }\n  }\n\n  public Expression transform(Expression expression) {\n    if (expression != null) {\n      // (1) \u30e1\u30bd\u30c3\u30c9\u547c\u3073\u51fa\u3057\u306e\u5834\u5408\n      if (expression instanceof MethodCallExpression) {\n        // (2) \u30ec\u30b7\u30fc\u30d0\u3068\u30e1\u30bd\u30c3\u30c9\u672c\u4f53\u3068\u5f15\u6570\u3092\u305d\u308c\u305e\u308c\u53d6\u5f97\n        Expression receiver = expression.getObjectExpression()\n        Expression method = expression.getMethod()\n        Expression arguments = expression.getArguments()\n        // (3) \u30af\u30e9\u30b9\u3092\u5224\u5b9a\n        if (receiver instanceof ClassExpression && method instanceof ConstantExpression && arguments instanceof ArgumentListExpression) {\n          // (4) \u30e1\u30bd\u30c3\u30c9\u540d\u304c new \u306e\u5834\u5408\n          if (method.getText() == \"new\") {\n            // (5) \u30ec\u30b7\u30fc\u30d0\u306e\u578b\u304c\u914d\u5217\u306e\u5834\u5408\n            if (receiver.getType().isArray()) {\n              // (6) \u914d\u5217\u306e\u8981\u7d20\u306e\u578b\u3092\u53d6\u5f97\n              ClassNode nextType = TypeConverter.toComponentType(receiver.getType())\n              Expression nextArguments = transform(arguments)\n              // (7) \u914d\u5217\u306e\u521d\u671f\u5316\u3092\u8868\u3059 AST \u3092\u751f\u6210\n              Expression nextExpression = new ArrayExpression(nextType, null, ((ArgumentListExpression)nextArguments).getExpressions())\n              // (8) \u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u4e0a\u306e\u4f4d\u7f6e\u3092\u8a2d\u5b9a\n              nextExpression.setSourcePosition(expression)\n              return nextExpression\n            }\n          }\n        }\n      // (9)\n      } else if (expression instanceof ClosureExpression) {\n        expression.getCode().visit(this)\n      // (10)\n      } else if (expression instanceof ConstructorCallExpression) {\n        if (expression.isUsingAnonymousInnerClass()) {\n          expression.getType().visitContents(this)\n        }\n      }\n      return expression.transformExpression(this)\n    } else {\n      return null\n    }\n  }\n\n  public SourceUnit getSourceUnit() {\n    return this.sourceUnit\n  }\n\n}\n```\n\n\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u3092\u9806\u756a\u306b\u89e3\u8aac\u3057\u3066\u3044\u304d\u307e\u3059\u3002\n\n(1): \u30e1\u30bd\u30c3\u30c9\u547c\u3073\u51fa\u3057\u306e AST \u306b\u5bfe\u5fdc\u3059\u308b\u578b\u306f `MethodCallExpression` \u3067\u3059\u3002\u5909\u63db\u3057\u305f\u3044\u5f0f\u306f `int[].new(4)` \u306e\u3088\u3046\u306a\u30e1\u30bd\u30c3\u30c9\u547c\u3073\u51fa\u3057\u306e\u5f62\u306a\u306e\u3067\u3001\u307e\u305a `expression` \u304c\u30e1\u30bd\u30c3\u30c9\u547c\u3073\u51fa\u3057\u306e AST \u304b\u3069\u3046\u304b\u3092\u5224\u5b9a\u3057\u307e\u3059\u3002\n\n(2): \u30ec\u30b7\u30fc\u30d0\u3068\u30e1\u30bd\u30c3\u30c9\u672c\u4f53\u3068\u5f15\u6570\u3092\u305d\u308c\u305e\u308c\u53d6\u5f97\u3057\u307e\u3059\u3002\u30ec\u30b7\u30fc\u30d0\u3092\u53d6\u5f97\u3059\u308b\u30e1\u30bd\u30c3\u30c9\u306f `getObjectExpression` \u3068 `getReceiver` \u3068 2 \u7a2e\u985e\u3042\u308b\u306e\u3067\u3059\u304c\u3001\u9055\u3044\u304c\u3088\u304f\u5206\u304b\u308a\u307e\u305b\u3093\u3067\u3057\u305f\u3002\n\n(3): (2) \u3067\u53d6\u5f97\u3057\u305f\u5909\u6570\u304c\u60f3\u5b9a\u3057\u3066\u3044\u308b\u578b\u304b\u3069\u3046\u304b\u3092\u5224\u5b9a\u3057\u307e\u3059\u3002\u5909\u63db\u3057\u305f\u3044\u5f0f\u306f `int[].new(4)` \u306e\u5f62\u5f0f\u306a\u306e\u3067\u3001\u30ec\u30b7\u30fc\u30d0\u304c\u30af\u30e9\u30b9\u3092\u8868\u3059\u5f0f (`ClassExpression`) \u304b\u3069\u3046\u304b\u3001\u307e\u305f\u30e1\u30bd\u30c3\u30c9\u672c\u4f53\u304c\u5b9a\u6570 (`ConstantExpression`) \u3067\u3042\u308b\u304b\u3069\u3046\u304b\u3092\u5224\u5b9a\u3057\u3066\u3044\u307e\u3059\u3002\u5f15\u6570\u306f\u5fc5\u305a `ArgumentListExpression` \u306a\u6c17\u304c\u3059\u308b\u306e\u3067\u5224\u5b9a\u304c\u5fc5\u8981\u304b\u3069\u3046\u304b\u5206\u304b\u308a\u307e\u305b\u3093\u304c\u3001\u30ad\u30e3\u30b9\u30c8\u306e\u610f\u5473\u3082\u8fbc\u3081\u3066\u5224\u5b9a\u3057\u3066\u3044\u307e\u3059\u3002\n\n(4): \u30e1\u30bd\u30c3\u30c9\u540d\u304c\u300cnew\u300d\u304b\u3069\u3046\u304b\u3092\u5224\u5b9a\u3057\u307e\u3059\u3002`getText` \u30e1\u30bd\u30c3\u30c9\u3067\u30e1\u30bd\u30c3\u30c9\u540d\u3092 `String` \u3068\u3057\u3066\u53d6\u5f97\u3067\u304d\u307e\u3059\u3002\n\n(5): \u30ec\u30b7\u30fc\u30d0\u304c\u30af\u30e9\u30b9\u3092\u8868\u3059\u5f0f\u3067\u3042\u308b\u3053\u3068\u306f\u3059\u3067\u306b\u5224\u5b9a\u3057\u307e\u3057\u305f\u304c\u3001\u4eca\u56de\u5b9f\u88c5\u3059\u308b AST \u5909\u63db\u306f\u30ec\u30b7\u30fc\u30d0\u304c\u914d\u5217\u30af\u30e9\u30b9\u3092\u8868\u3059\u5f0f\u3067\u3042\u308b\u5834\u5408\u306b\u884c\u3046\u306e\u3067\u3001\u914d\u5217\u30af\u30e9\u30b9\u304b\u3069\u3046\u304b\u3092\u5224\u5b9a\u3057\u3066\u3044\u307e\u3059\u3002`ClassNode` \u306b `isArray` \u3068\u3044\u3046\u305d\u306e\u307e\u307e\u306e\u30e1\u30bd\u30c3\u30c9\u304c\u3042\u308b\u306e\u3067\u3001\u305d\u308c\u3092\u4f7f\u3063\u3066\u3044\u307e\u3059\u3002\n\n(6): \u4e0a\u3067\u4f5c\u3063\u305f\u30e1\u30bd\u30c3\u30c9\u3092\u4f7f\u3044\u3001\u914d\u5217\u306e\u8981\u7d20\u306e\u578b\u3092\u53d6\u5f97\u3057\u307e\u3059\u3002\n\n(7): \u5909\u63db\u5f8c\u306e AST \u3092\u751f\u6210\u3057\u307e\u3059\u3002\u914d\u5217\u306e\u751f\u6210\u306e AST \u306b\u5bfe\u5fdc\u3059\u308b\u578b\u306f `ArrayExpression` \u306a\u306e\u3067\u3001\u305d\u306e\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u3092\u547c\u3093\u3067\u3044\u307e\u3059\u3002`ArrayExpression` \u306e\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u306e\u5f15\u6570\u306b\u3064\u3044\u3066\u306f\u3001\u5f8c\u3067\u8a73\u3057\u304f\u8aac\u660e\u3057\u307e\u3059\u3002\n\n(8): `nextExpression` \u306f\u3053\u306e\u5834\u3067\u751f\u6210\u3057\u305f AST \u306a\u306e\u3067\u3001\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u4e0a\u306e\u4f4d\u7f6e\u3068\u7d50\u3073\u3064\u3044\u3066\u3044\u307e\u305b\u3093\u3002\u3053\u308c\u3092\u8a2d\u5b9a\u3059\u308b\u306b\u306f `lineNumber`, `columnNumber`, `lastLineNumber`, `lastColumnNumber` \u3068\u3044\u3046 4 \u3064\u306e\u30d7\u30ed\u30d1\u30c6\u30a3\u3092\u8a2d\u5b9a\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u304c\u3001\u3059\u3067\u306b\u3042\u308b\u5f0f\u3068\u5168\u304f\u540c\u3058\u5024\u3092\u8a2d\u5b9a\u3059\u308b\u3060\u3051\u306a\u3089\u3001`setSourcePosition` \u3068\u3044\u3046\u4fbf\u5229\u306a\u30e1\u30bd\u30c3\u30c9\u304c\u3042\u308a\u307e\u3059\u3002\u3053\u3053\u3067\u306f\u3001\u3082\u3068\u3082\u3068\u306e\u5f0f\u3067\u3042\u308b `expression` \u3068\u540c\u3058\u5024\u3092\u8a2d\u5b9a\u3059\u308c\u3070\u826f\u3044\u306e\u3067\u3001\u3053\u306e\u30e1\u30bd\u30c3\u30c9\u3092\u5229\u7528\u3057\u3066\u3044\u307e\u3059\u3002\n\n(9), (10): `ClassCodeExpressionTransformer` \u30af\u30e9\u30b9\u306f\u3001`visit\uff5e` \u30e1\u30bd\u30c3\u30c9\u3092\u547c\u3076\u3068\u305d\u308c\u306b\u542b\u307e\u308c\u308b\u5168\u3066\u306e\u5f0f\u3092\u5f15\u6570\u306b\u3057\u3066 `transform` \u30e1\u30bd\u30c3\u30c9\u3092\u547c\u3093\u3067\u304f\u308c\u308b\u306e\u3067\u3059\u304c\u3001\u30af\u30ed\u30fc\u30b8\u30e3\u3084\u533f\u540d\u30af\u30e9\u30b9\u306e\u4e2d\u8eab\u306b\u3064\u3044\u3066\u306f `transform` \u30e1\u30bd\u30c3\u30c9\u3092\u547c\u3093\u3067\u304f\u308c\u307e\u305b\u3093\u3002\u305d\u3053\u3067\u3001\u3053\u306e\u7b87\u6240\u3067\u81ea\u524d\u3067\u547c\u3093\u3067\u3044\u307e\u3059\u3002\n\n## \u5b9f\u969b\u306b\u4f7f\u3063\u3066\u307f\u308b\n\n\u4e0a\u3067\u4f5c\u6210\u3057\u305f 3 \u3064\u306e\u30d5\u30a1\u30a4\u30eb (`NewifyArrays.groovy`, `NewifyArraysTransformation.groovy`, `TypeConverter.groovy`) \u3092 Groovy \u3067\u30b3\u30f3\u30d1\u30a4\u30eb\u3057\u3001\u305d\u308c\u306b\u3088\u3063\u3066\u3067\u304d\u305f\u30af\u30e9\u30b9\u30d5\u30a1\u30a4\u30eb\u304c\u30af\u30e9\u30b9\u30d1\u30b9\u306b\u3042\u308b\u72b6\u614b\u3067\u4ee5\u4e0b\u306e\u30b3\u30fc\u30c9\u3092\u5b9f\u884c\u3057\u3066\u307f\u307e\u3057\u3087\u3046\u3002\n\n```groovy\nimport ziphil.transform.NewifyArrays\n\npublic class Test { \n\n    @NewifyArrays static int[] field = int[].new(10)\n\n    @NewifyArrays\n    public static void main(java.lang.String[] args) {\n        String[][] array = String[][].new(2, 3)\n        array[0][0] = \"foo\"\n        array[1][2] = \"bar\"\n        field[3] = 3\n        field[4] = 4\n        println(array)\n        println(field)\n    }\n\n}\n```\n\n\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u51fa\u529b\u3055\u308c\u308c\u3070\u6210\u529f\u3067\u3059\u306d\u3002\n\n```\n[[foo, null, null], [null, null, bar]]\n[0, 0, 0, 3, 4, 0, 0, 0, 0, 0]\n```\n\n\n## `ArrayExpression` \u306e\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u306b\u3064\u3044\u3066\n\n[`ArrayExpression` \u306e Groovydoc](http://docs.groovy-lang.org/latest/html/gapi/org/codehaus/groovy/ast/expr/ArrayExpression.html) \u3092\u898b\u308b\u3068\u3001\u7b2c 3 \u5f15\u6570\u3092\u7701\u7565\u3059\u308b\u304b\u3057\u306a\u3044\u304b\u3067\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u304c 2 \u7a2e\u985e\u3042\u308a\u307e\u3059\u3002\n\n\u7b2c 1 \u5f15\u6570\u306e `elementType` \u306f\u914d\u5217\u306e\u8981\u7d20\u306e\u578b\u3067\u3059\u3002\u6ce8\u610f\u3059\u3079\u304d\u306a\u306e\u306f\u3001`String[]` \u578b\u306e\u914d\u5217\u3092\u751f\u6210\u3057\u305f\u3044\u306a\u3089 `elementType` \u306b\u306f `String` \u3092\u8868\u3059 `ClassNode` \u3092\u6e21\u3055\u306a\u3051\u308c\u3070\u306a\u3089\u306a\u3044\u70b9\u3067\u3059\u3002\u6e21\u3059\u578b\u306f\u914d\u5217\u578b\u3067\u306f\u306a\u304f\u914d\u5217\u306e\u8981\u7d20\u306e\u578b\u3067\u3059\u3002\n\n\u7b2c 3 \u5f15\u6570\u306e `sizeExpression` \u3067\u306f\u914d\u5217\u306e\u30b5\u30a4\u30ba\u3092\u8868\u3059\u5f0f\u3092\u683c\u7d0d\u3057\u305f\u914d\u5217\u3092\u6307\u5b9a\u3057\u307e\u3059\u3002`new int[3][5]` \u306a\u3089 `3` \u3068 `5` \u306e\u90e8\u5206\u3067\u3059\u3002\u3053\u308c\u3092\u7701\u7565\u3059\u308b\u3068\u9577\u3055 0 \u306e 1 \u6b21\u5143\u914d\u5217\u306b\u306a\u308a\u307e\u3059\u3002\u4ee5\u4e0b\u306e\u30b3\u30fc\u30c9\u306f `new int[3][5]` \u306e AST \u3092\u751f\u6210\u3057\u307e\u3059\u3002\n\n```groovy\nClassNode type = ClassHelper.make(\"int\")\nExpression firstSize = new ConstantExpression(3)\nExpression secondSize = new ConstantExpression(5)\nExpression expression = new ArrayExpression(type, null, (List<Expression>)[firstSize, secondSize])\n```\n\n\u554f\u984c\u306f\u7b2c 2 \u5f15\u6570\u3067\u3059\u3002\u3044\u308d\u3044\u308d\u8a66\u884c\u932f\u8aa4\u3057\u305f\u7d50\u679c\u3001\u3069\u3046\u3084\u3089\u6307\u5b9a\u3057\u305f\u8981\u7d20\u3092\u683c\u7d0d\u3057\u305f\u72b6\u614b\u306e\u914d\u5217\u3092\u8fd4\u3059\u3088\u3046\u3067\u3059\u3002\u4f8b\u3048\u3070\u3001\u4ee5\u4e0b\u306e\u30b3\u30fc\u30c9\u3067\u306f `\"FIRST\"` \u3068 `\"SECOND\"` \u304c\u683c\u7d0d\u3055\u308c\u305f\u9577\u3055 2 \u306e `String[]` \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e AST \u304c\u751f\u6210\u3055\u308c\u307e\u3059\u3002Java \u306a\u3089 `new String[]{\"FIRST\", \"SECOND\"}` \u306b\u5bfe\u5fdc\u3059\u308b\u3082\u306e\u3067\u3059 (\u3053\u306e\u8a18\u6cd5\u306f Groovy \u3067\u30b5\u30dd\u30fc\u30c8\u3055\u308c\u3066\u3044\u307e\u305b\u3093)\u3002\n\n```groovy\nClassNode type = ClassHelper.make(\"java.lang.String\")\nExpression first = new ConstantExpression(\"FIRST\")\nExpression second = new ConstantExpression(\"SECOND\")\nExpression expression = new ArrayExpression(type, (List<Expression>)[first, second])\n```\n\n\u3061\u306a\u307f\u306b\u3001\u7b2c 2 \u5f15\u6570\u3068\u7b2c 3 \u5f15\u6570\u304c\u4e21\u65b9\u6307\u5b9a\u3055\u308c\u3066\u3044\u308b\u5834\u5408\u3001\u7b2c 2 \u5f15\u6570\u306f\u7121\u8996\u3055\u308c\u308b\u3088\u3046\u3067\u3059\u3002\u4ee5\u4e0b\u306e\u30b3\u30fc\u30c9\u3067\u306f\u5404\u8981\u7d20\u304c null \u3067\u521d\u671f\u5316\u3055\u308c\u305f\u9577\u3055 3 \u306e `String[]` \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e AST \u304c\u751f\u6210\u3055\u308c\u307e\u3059\u3002\u3064\u307e\u308a\u3001\u7b2c 2 \u5f15\u6570\u306b null \u3092\u6307\u5b9a\u3057\u305f\u306e\u3068\u540c\u3058\u7d50\u679c\u306b\u306a\u308a\u307e\u3059\u3002\n\n```groovy\nClassNode type = ClassHelper.make(\"java.lang.String\")\nExpression first = new ConstantExpression(\"FIRST\")\nExpression second = new ConstantExpression(\"SECOND\")\nExpression size = new ConstantExpression(3)\nExpression expression = new ArrayExpression(type, (List<Expression>)[first, second], (List<Expression>)[size])\n```\n\nGroovy \u306b\u306f\u914d\u5217\u306e\u30ea\u30c6\u30e9\u30eb\u306f\u306a\u3044 (List \u306e\u30ea\u30c6\u30e9\u30eb\u306f\u3042\u308b) \u306f\u305a\u3067\u3059\u304c\u3001\u306a\u305c\u3053\u3093\u306a\u3082\u306e\u304c\u7528\u610f\u3055\u308c\u3066\u3044\u308b\u306e\u3067\u3057\u3087\u3046\u304b\uff65\uff65\uff65\u3002\n\n[^1]: \u5b9f\u7528\u6027\u306f\u307b\u307c\u306a\u3044\u3068\u601d\u3044\u307e\u3059\u304c\u3001\u30c7\u30d5\u30a9\u30eb\u30c8\u306e `@Newify` \u3067\u306f\u914d\u5217\u3067\u30a8\u30e9\u30fc\u306b\u306a\u308b\u306e\u304c\u6c17\u306b\u306a\u3063\u305f\u306e\u3067\u3001\u81ea\u5206\u3067\u4fee\u6b63\u7248\u3092\u4f5c\u3063\u3066\u307f\u305f\u304b\u3063\u305f\u3068\u3044\u3046\u52d5\u6a5f\u304c\u3042\u308a\u307e\u3057\u305f\u3002\n[^2]: \u4f5c\u3063\u305f\u5f8c\u306b\u306a\u3063\u3066 `new int[][].new(2, 3)` \u3067\u306f\u306a\u304f\u3066 `int[2][3].new()` \u3067\u3082\u826f\u304b\u3063\u305f\u304b\u306a\u3068\u3082\u601d\u3063\u305f\u306e\u3067\u3059\u304c\u3001\u9045\u304b\u3063\u305f\u3067\u3059\uff65\uff65\uff65\u3002\n", "tags": ["Groovy", "AST\u5909\u63db"]}