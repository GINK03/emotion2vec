{"tags": ["Kotlin", "\u4ee3\u6570\u5b66", "Swift"], "context": "Swift\u3067\u4ee3\u6570\u5b66\u5165\u9580\u306b\u3044\u305f\u304f\u611f\u9298\u3092\u53d7\u3051\u305f\u306e\u3067\u81ea\u5206\u3067\u3082\u3084\u3063\u3066\u307f\u3088\u3046\u3068\u601d\u3063\u305f\u306e\u3060\u304c\u578b\u843d\u3061\u306eWindows\u3057\u304b\u306a\u304fSwift\u304c\u52d5\u304b\u306a\u3044\u4e2dJava\u3067\u5c11\u3057\u5b9f\u88c5\u3057\u305f\u3082\u306e\u306e\u6f14\u7b97\u5b50\u30aa\u30fc\u30d0\u30fc\u30ed\u30fc\u30c9\u304c\u307b\u3057\u304f\u3066Kotlin\u306b\u624b\u3092\u51fa\u3057\u3066\u307f\u305f\u3002\n\u3042\u3044\u304b\u308f\u3089\u305a\u4ed6\u4eba\u306e\u890c\u306a\u306e\u306f\u7b11\u3063\u3066\u8a31\u305b\u3001\u3068\u3044\u3046\u304b\u5143\u8a18\u4e8b\u69d8\u306f\u4ee3\u6570\u5b66\u306e\u5b9f\u88c5\u3068\u3044\u3046\u5fd7\u9ad8\u304f\u52c7\u6c17\u3042\u3075\u308c\u308b\u540d\u30a8\u30f3\u30c8\u30ea\u3060\u304c\u3053\u3061\u3089\u306f\u305f\u3093\u306a\u308b\u30b3\u30d4\u30da\u8a18\u4e8b\u306a\u306e\u3067\u898b\u77e5\u308a\u7f6e\u3051\u3002\ngithub\n\n\u7fa4\u3001\u74b0\u3001\u4f53\u306e\u5b9f\u88c5\u307e\u3067\n\n\u6709\u7406\u6570\u307e\u3067\u3067\u6e80\u8db3\u3057\u3066\u3057\u307e\u3063\u305f\u3002\u30c0\u30a4\u30a2\u30e2\u30f3\u30c9\u7d99\u627f\u306b\u306a\u3063\u3066\u308b\u7b87\u6240\u304c\u3042\u308b\u3051\u3069\u5b9a\u7fa9\u4e0a\u6c17\u306b\u3057\u306a\u3044\u3002\n\u3088\u304f\u4f3c\u3066\u3044\u308b\u3068\u5642\u306eSwift\u3068Kotln\u3060\u3051\u3069\u3001\u3069\u3061\u3089\u3082\u77e5\u3089\u306a\u3044\u4ffa\u304c\u3059\u3089\u3059\u3089\u79fb\u690d\u3067\u304d\u305f\u306e\u3067\u3084\u306f\u308a\u4f3c\u3066\u3044\u308b\u306e\u3067\u3057\u3087\u3046\u306d\u3002\u4ee5\u4e0b\u306f\u79fb\u690d\u306e\u969b\u306b\u300c\u3093\u3063\uff1f\u300d\u3066\u306a\u3063\u305f\u3068\u3053\u3002\n\nprotocol \u3068 interface\nSwift \u3067\u306f\u30d7\u30ed\u30c8\u30b3\u30eb\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u304c\u63a8\u5968\u306e\u69d8\u5b50\u3002protocol \u3068 struct \u3067\u5206\u96e2\u3059\u308b\u306e\u306f\u7b4b\u304c\u3088\u3055\u305d\u3046\u3002Java \u3067\u3084\u308b\u306b\u306f interface \u3068 class \u3068\u306a\u308b\u3002Kotlin \u306b\u306f Object \u3084 data class \u304c\u3042\u308b\u304c\u3001\u307e\u3041\u30af\u30e9\u30b9\u3067\u3044\u3044\u3058\u3083\u3093\uff08\u30bf\u30a4\u30d7\u30a8\u30a4\u30ea\u30a2\u30b9\u304c\u3089\u307f\u306f\u5f8c\u8ff0\uff09\u3002\ninterface Ring: AdditiveGroup, Monoid {}\n\nclass Z(value: Int): Ring {\n    ...\n}\n\n\nextension\nSwift \u306b\u304a\u3051\u308b extension \u306f Java8 \u4ee5\u964d\u306a\u3089\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30fc\u30b9\u306e\u30c7\u30d5\u30a9\u30eb\u30c8\u5b9f\u88c5\u3067\u5b9f\u73fe\u3067\u304d\u308b\u3002\ninterface Group: Monoid {\n    ...\n    // extension\n    fun testAssociativity(a: Group, b: Group, c: Group): Boolean {\n        return (a * b) * c == a * (b * c)\n    }\n    ...\n}\n\n\u6b8b\u5ff5\u306a\u304c\u3089\u3001Kotlin\uff08\u3068\u3044\u3046\u304b Java\uff09\u3067\u306f\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30fc\u30b9\u3067\u306e\u30d7\u30ed\u30d1\u30c6\u30a3\u521d\u671f\u5316\u306f\u8a31\u53ef\u3055\u308c\u306a\u3044\u306e\u3067\u3001\u5b9f\u88c5\u5074\u306b\u8ffd\u3044\u51fa\u3055\u308c\u308b\u306e\u3067\u3042\u3063\u305f\uff08\u5f8c\u8ff0\uff09\u3002\n\n\u6f14\u7b97\u5b50\u30aa\u30fc\u30d0\u30fc\u30ed\u30fc\u30c9\nSwift \u3067\u306f\u6f14\u7b97\u5b50\u3092\u76f4\u63a5\u6307\u5b9a\u3057\u3066\u30aa\u30fc\u30d0\u30fc\u30ed\u30fc\u30c9\u3067\u304d\u308b\u3002\u6a19\u6e96\u3067\u7528\u610f\u3055\u308c\u3066\u3044\u308b\u6f14\u7b97\u5b50\u4ee5\u5916\u3082\u6307\u5b9a\u53ef\u80fd\u3002\nKotlin \u3067\u306f\u3042\u3089\u304b\u3058\u3081\u5b9a\u7fa9\u3055\u308c\u305f\u30e1\u30bd\u30c3\u30c9\u306e\u30aa\u30fc\u30d0\u30fc\u30ed\u30fc\u30c9\u306e\u307f\u53ef\u80fd\u3002\u300c*\u300d\u306a\u3089\u300ctimes\u300d\u3001\u300c+\u300d\u306a\u3089\u300cplus\u300d\u30e1\u30bd\u30c3\u30c9\u3092\u6307\u5b9a\u3059\u308b\u3002\n    override operator fun times(other: Monoid): Z = this * other\n    override operator fun plus(other: AdditiveGroup): Z = this + other  \n\nSwift \u3060\u3068\u30d6\u30ec\u30fc\u30b9\u3068 return \u7bc0\u304c\u5fc5\u8981\u3060\u3051\u3069\u3001Kotlin \u3067\u306f\u300c=\u300d\u3067\u76f4\u63a5\u66f8\u3051\u308b\u3002\u826f\u3044\u3002\n\nSelf\nSwift \u304c\u3044\u3044\u306a\u3068\u601d\u3063\u305f\u4e00\u3064\u76ee\u304c\u300cSelf\u300d\u3002\u30b7\u30b0\u30cb\u30c1\u30e3\u3067\u4f7f\u3048\u308b\u306e\u3063\u3066\u3059\u3054\u3044\u826f\u3044\u3002\nSwift \u306a\u3089\u30b7\u30b0\u30cb\u30c1\u30e3\u306b\u300cMonoid\u300d\u306f\u51fa\u73fe\u3057\u306a\u3044\u3002\nprotocol Monoid: Equatable {\n    static func *(a: Self, b: Self) -> Self\n    static var identity: Self {get}\n}\n\nKotlin \u3060\u3068\u660e\u793a\u3057\u306a\u304f\u3061\u3083\u3044\u3051\u306a\u3044\u3002\ninterface Monoid {\n    operator fun times(other: Monoid): Monoid\n    var identity: Monoid\n}\n\n\u306a\u306e\u3067\u3001\u5b9f\u88c5\u5074\u3067\u4e0b\u8a18\u306e\u3088\u3046\u306a\u578b\u5909\u63db\u304c\u5fc5\u8981\u306b\u306a\u308b\u3002\n    override operator fun times(other: Monoid): Q {\n        other as Q\n        return Q(this.p * other.p, this.q * other.q)\n    }\n\n\u3080\u3046\u3002\n\ntype alias\nSwift \u3067\u3082\u3046\u4e00\u3064\u3046\u3089\u3084\u307e\u3057\u3044\u306e\u304c\u578b\u5225\u540d\u3002\u5143\u8a18\u4e8b\u3067\u306f\u5fc5\u8981\u306b\u5fdc\u3058\u3066 Int \u3084 Double \u3092\u6d41\u7528\u3057\u3066\u3044\u308b\u3051\u3069\u3001\u73fe\u6bb5\u968e\u3067\u306f Kotlin \u306f\u578b\u5225\u540d\u306e\u6307\u5b9a\u304c\u3067\u304d\u306a\u3044\u3002\u306e\u3067\u3001\u4e0b\u8a18\u306e\u3088\u3046\u306b\u578b\u3092\u660e\u793a\u3057\u305f\u30d5\u30a3\u30fc\u30eb\u30c9\u3092\u6301\u3064\u3053\u3068\u306b\u306a\u308b\u3002\nclass Z(val value: Int): Ring {}\n\n\u5143\u8a18\u4e8b\u306e\u3088\u3046\u306b Intger \u306e\u6f14\u7b97\u5b50\u3092\u6d41\u7528\u3067\u304d\u306a\u3044\u306e\u3067\u6f14\u7b97\u5b50\u30aa\u30fc\u30d0\u30fc\u30ed\u30fc\u30c9\u5206\u306f\u30d5\u30eb\u8a18\u8ff0\u3059\u308b\u3053\u3068\u306b\u306a\u308b\u3002\u30d7\u30ed\u30d1\u30c6\u30a3\u306e\u521d\u671f\u5316\u3082\u5b9f\u88c5\u5074\u306b\u8ffd\u3044\u51fa\u3055\u308c\u308b\u305f\u3081\u3001\u6700\u7d42\u7684\u306a\u8a18\u8ff0\u306f\u4e0b\u8a18\u306e\u901a\u308a\u3068\u306a\u308b\u3002\nclass Z(val value: Int): Ring {\n    // alias\n    override operator fun times(other: Monoid): Z = this * other\n    override operator fun plus(other: AdditiveGroup): Z = this + other  \n    override operator fun unaryMinus(): Z = -this\n    // extension\n    override var identity: Monoid = Z(1)\n    override var zero: AdditiveGroup = Z(0)\n}\n\n\n\u7dcf\u8ad6\n\u3044\u304f\u3064\u304b Kotlin \u3092 dis \u3063\u3066\u308b\u3088\u3046\u306b\u66f8\u3044\u305f\u304c\u3068\u3093\u3067\u3082\u306a\u3044\u3002Java \u7551\u80b2\u3061\u304b\u3089\u3059\u308b\u3068\u30a8\u30ec\u30ac\u30f3\u30c8\u3067\u76f4\u611f\u7684\u306a\u826f\u8a00\u8a9e\u3067\u3057\u305f\u3002\u4e26\u884c\u3057\u3066 scala \u3067\u3082\u66f8\u3053\u3046\u3068\u3057\u305f\u3051\u3069\u3001\u305d\u3061\u3089\u306f\u5f62\u306b\u306a\u3089\u306a\u3093\u3060\u3002\u500b\u4eba\u7684\u306b\u306f\u6570\u3042\u308b JVM \u8a00\u8a9e\u306e\u4e2d\u3067\u306f\u3068\u3073\u306c\u3051\u3066\u3057\u3063\u304f\u308a\u304f\u308b\u6c17\u6301\u3061\u306e\u3088\u3044\u611f\u89e6\u3060\u3063\u305f\u3053\u3068\u3092\u5f37\u8abf\u3059\u308b\u3002\nSwift \u306f\u6700\u521d Linux \u4e0a\u306e REPL \u3067\u89e6\u3063\u3066\u305f\u3051\u3069\u3001\u3061\u3068\u5236\u7d04\u304c\u304d\u3064\u3059\u304e\u3066\u304a\u52c9\u5f37\u3067\u89e6\u308b\u306b\u3082\u307e\u3060\u65e9\u3044\u306e\u3046\u3002\n[Swift\u3067\u4ee3\u6570\u5b66\u5165\u9580](http://qiita.com/taketo1024/items/bd356c59dc0559ee9a0b)\u306b\u3044\u305f\u304f\u611f\u9298\u3092\u53d7\u3051\u305f\u306e\u3067\u81ea\u5206\u3067\u3082\u3084\u3063\u3066\u307f\u3088\u3046\u3068\u601d\u3063\u305f\u306e\u3060\u304c\u578b\u843d\u3061\u306eWindows\u3057\u304b\u306a\u304fSwift\u304c\u52d5\u304b\u306a\u3044\u4e2dJava\u3067\u5c11\u3057\u5b9f\u88c5\u3057\u305f\u3082\u306e\u306e\u6f14\u7b97\u5b50\u30aa\u30fc\u30d0\u30fc\u30ed\u30fc\u30c9\u304c\u307b\u3057\u304f\u3066Kotlin\u306b\u624b\u3092\u51fa\u3057\u3066\u307f\u305f\u3002\n\n\u3042\u3044\u304b\u308f\u3089\u305a\u4ed6\u4eba\u306e\u890c\u306a\u306e\u306f\u7b11\u3063\u3066\u8a31\u305b\u3001\u3068\u3044\u3046\u304b\u5143\u8a18\u4e8b\u69d8\u306f\u4ee3\u6570\u5b66\u306e\u5b9f\u88c5\u3068\u3044\u3046\u5fd7\u9ad8\u304f\u52c7\u6c17\u3042\u3075\u308c\u308b\u540d\u30a8\u30f3\u30c8\u30ea\u3060\u304c\u3053\u3061\u3089\u306f\u305f\u3093\u306a\u308b\u30b3\u30d4\u30da\u8a18\u4e8b\u306a\u306e\u3067\u898b\u77e5\u308a\u7f6e\u3051\u3002\n\n[github](https://github.com/ueno-t/algebra-kotlin)\n\n# \u7fa4\u3001\u74b0\u3001\u4f53\u306e\u5b9f\u88c5\u307e\u3067\n![2016-04-02.png](https://qiita-image-store.s3.amazonaws.com/0/43992/09582bcf-6663-bace-51e7-cf0c44868a9f.png)\n\u6709\u7406\u6570\u307e\u3067\u3067\u6e80\u8db3\u3057\u3066\u3057\u307e\u3063\u305f\u3002\u30c0\u30a4\u30a2\u30e2\u30f3\u30c9\u7d99\u627f\u306b\u306a\u3063\u3066\u308b\u7b87\u6240\u304c\u3042\u308b\u3051\u3069\u5b9a\u7fa9\u4e0a\u6c17\u306b\u3057\u306a\u3044\u3002\n\u3088\u304f\u4f3c\u3066\u3044\u308b\u3068\u5642\u306eSwift\u3068Kotln\u3060\u3051\u3069\u3001\u3069\u3061\u3089\u3082\u77e5\u3089\u306a\u3044\u4ffa\u304c\u3059\u3089\u3059\u3089\u79fb\u690d\u3067\u304d\u305f\u306e\u3067\u3084\u306f\u308a\u4f3c\u3066\u3044\u308b\u306e\u3067\u3057\u3087\u3046\u306d\u3002\u4ee5\u4e0b\u306f\u79fb\u690d\u306e\u969b\u306b\u300c\u3093\u3063\uff1f\u300d\u3066\u306a\u3063\u305f\u3068\u3053\u3002\n\n# protocol \u3068 interface\nSwift \u3067\u306f\u30d7\u30ed\u30c8\u30b3\u30eb\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u304c\u63a8\u5968\u306e\u69d8\u5b50\u3002protocol \u3068 struct \u3067\u5206\u96e2\u3059\u308b\u306e\u306f\u7b4b\u304c\u3088\u3055\u305d\u3046\u3002Java \u3067\u3084\u308b\u306b\u306f interface \u3068 class \u3068\u306a\u308b\u3002Kotlin \u306b\u306f Object \u3084 data class \u304c\u3042\u308b\u304c\u3001\u307e\u3041\u30af\u30e9\u30b9\u3067\u3044\u3044\u3058\u3083\u3093\uff08\u30bf\u30a4\u30d7\u30a8\u30a4\u30ea\u30a2\u30b9\u304c\u3089\u307f\u306f\u5f8c\u8ff0\uff09\u3002\n\n```kotlin\ninterface Ring: AdditiveGroup, Monoid {}\n```\n\n```kotlin\nclass Z(value: Int): Ring {\n\t...\n}\n```\n\n# extension\nSwift \u306b\u304a\u3051\u308b extension \u306f Java8 \u4ee5\u964d\u306a\u3089\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30fc\u30b9\u306e\u30c7\u30d5\u30a9\u30eb\u30c8\u5b9f\u88c5\u3067\u5b9f\u73fe\u3067\u304d\u308b\u3002\n\n```kotlin\ninterface Group: Monoid {\n\t...\n\t// extension\n\tfun testAssociativity(a: Group, b: Group, c: Group): Boolean {\n        return (a * b) * c == a * (b * c)\n    }\n\t...\n}\n```\n\u6b8b\u5ff5\u306a\u304c\u3089\u3001Kotlin\uff08\u3068\u3044\u3046\u304b Java\uff09\u3067\u306f\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30fc\u30b9\u3067\u306e\u30d7\u30ed\u30d1\u30c6\u30a3\u521d\u671f\u5316\u306f\u8a31\u53ef\u3055\u308c\u306a\u3044\u306e\u3067\u3001\u5b9f\u88c5\u5074\u306b\u8ffd\u3044\u51fa\u3055\u308c\u308b\u306e\u3067\u3042\u3063\u305f\uff08\u5f8c\u8ff0\uff09\u3002\n\n# \u6f14\u7b97\u5b50\u30aa\u30fc\u30d0\u30fc\u30ed\u30fc\u30c9\nSwift \u3067\u306f\u6f14\u7b97\u5b50\u3092\u76f4\u63a5\u6307\u5b9a\u3057\u3066\u30aa\u30fc\u30d0\u30fc\u30ed\u30fc\u30c9\u3067\u304d\u308b\u3002\u6a19\u6e96\u3067\u7528\u610f\u3055\u308c\u3066\u3044\u308b\u6f14\u7b97\u5b50\u4ee5\u5916\u3082\u6307\u5b9a\u53ef\u80fd\u3002\nKotlin \u3067\u306f\u3042\u3089\u304b\u3058\u3081\u5b9a\u7fa9\u3055\u308c\u305f\u30e1\u30bd\u30c3\u30c9\u306e\u30aa\u30fc\u30d0\u30fc\u30ed\u30fc\u30c9\u306e\u307f\u53ef\u80fd\u3002\u300c*\u300d\u306a\u3089\u300ctimes\u300d\u3001\u300c+\u300d\u306a\u3089\u300cplus\u300d\u30e1\u30bd\u30c3\u30c9\u3092\u6307\u5b9a\u3059\u308b\u3002\n\n```kotlin\n\toverride operator fun times(other: Monoid): Z = this * other\n\toverride operator fun plus(other: AdditiveGroup): Z = this + other\t\n````\n\nSwift \u3060\u3068\u30d6\u30ec\u30fc\u30b9\u3068 return \u7bc0\u304c\u5fc5\u8981\u3060\u3051\u3069\u3001Kotlin \u3067\u306f\u300c=\u300d\u3067\u76f4\u63a5\u66f8\u3051\u308b\u3002\u826f\u3044\u3002\n\n# Self\nSwift \u304c\u3044\u3044\u306a\u3068\u601d\u3063\u305f\u4e00\u3064\u76ee\u304c\u300cSelf\u300d\u3002\u30b7\u30b0\u30cb\u30c1\u30e3\u3067\u4f7f\u3048\u308b\u306e\u3063\u3066\u3059\u3054\u3044\u826f\u3044\u3002\n\nSwift \u306a\u3089\u30b7\u30b0\u30cb\u30c1\u30e3\u306b\u300cMonoid\u300d\u306f\u51fa\u73fe\u3057\u306a\u3044\u3002\n\n```swift\nprotocol Monoid: Equatable {\n    static func *(a: Self, b: Self) -> Self\n    static var identity: Self {get}\n}\n```\n\nKotlin \u3060\u3068\u660e\u793a\u3057\u306a\u304f\u3061\u3083\u3044\u3051\u306a\u3044\u3002\n\n```kotlin\ninterface Monoid {\n\toperator fun times(other: Monoid): Monoid\n\tvar identity: Monoid\n}\n```\n\n\u306a\u306e\u3067\u3001\u5b9f\u88c5\u5074\u3067\u4e0b\u8a18\u306e\u3088\u3046\u306a\u578b\u5909\u63db\u304c\u5fc5\u8981\u306b\u306a\u308b\u3002\n\n```kotlin\n\toverride operator fun times(other: Monoid): Q {\n\t\tother as Q\n\t\treturn Q(this.p * other.p, this.q * other.q)\n\t}\n```\n\u3080\u3046\u3002\n\n# type alias\nSwift \u3067\u3082\u3046\u4e00\u3064\u3046\u3089\u3084\u307e\u3057\u3044\u306e\u304c\u578b\u5225\u540d\u3002\u5143\u8a18\u4e8b\u3067\u306f\u5fc5\u8981\u306b\u5fdc\u3058\u3066 Int \u3084 Double \u3092\u6d41\u7528\u3057\u3066\u3044\u308b\u3051\u3069\u3001\u73fe\u6bb5\u968e\u3067\u306f Kotlin \u306f\u578b\u5225\u540d\u306e\u6307\u5b9a\u304c\u3067\u304d\u306a\u3044\u3002\u306e\u3067\u3001\u4e0b\u8a18\u306e\u3088\u3046\u306b\u578b\u3092\u660e\u793a\u3057\u305f\u30d5\u30a3\u30fc\u30eb\u30c9\u3092\u6301\u3064\u3053\u3068\u306b\u306a\u308b\u3002\n\n```kotlin\nclass Z(val value: Int): Ring {}\n```\n\n\u5143\u8a18\u4e8b\u306e\u3088\u3046\u306b Intger \u306e\u6f14\u7b97\u5b50\u3092\u6d41\u7528\u3067\u304d\u306a\u3044\u306e\u3067\u6f14\u7b97\u5b50\u30aa\u30fc\u30d0\u30fc\u30ed\u30fc\u30c9\u5206\u306f\u30d5\u30eb\u8a18\u8ff0\u3059\u308b\u3053\u3068\u306b\u306a\u308b\u3002\u30d7\u30ed\u30d1\u30c6\u30a3\u306e\u521d\u671f\u5316\u3082\u5b9f\u88c5\u5074\u306b\u8ffd\u3044\u51fa\u3055\u308c\u308b\u305f\u3081\u3001\u6700\u7d42\u7684\u306a\u8a18\u8ff0\u306f\u4e0b\u8a18\u306e\u901a\u308a\u3068\u306a\u308b\u3002\n\n```kotlin\nclass Z(val value: Int): Ring {\n\t// alias\n\toverride operator fun times(other: Monoid): Z = this * other\n\toverride operator fun plus(other: AdditiveGroup): Z = this + other\t\n\toverride operator fun unaryMinus(): Z = -this\n\t// extension\n\toverride var identity: Monoid = Z(1)\n\toverride var zero: AdditiveGroup = Z(0)\n}\n```\n\n# \u7dcf\u8ad6\n\u3044\u304f\u3064\u304b Kotlin \u3092 dis \u3063\u3066\u308b\u3088\u3046\u306b\u66f8\u3044\u305f\u304c\u3068\u3093\u3067\u3082\u306a\u3044\u3002Java \u7551\u80b2\u3061\u304b\u3089\u3059\u308b\u3068\u30a8\u30ec\u30ac\u30f3\u30c8\u3067\u76f4\u611f\u7684\u306a\u826f\u8a00\u8a9e\u3067\u3057\u305f\u3002\u4e26\u884c\u3057\u3066 scala \u3067\u3082\u66f8\u3053\u3046\u3068\u3057\u305f\u3051\u3069\u3001\u305d\u3061\u3089\u306f\u5f62\u306b\u306a\u3089\u306a\u3093\u3060\u3002\u500b\u4eba\u7684\u306b\u306f\u6570\u3042\u308b JVM \u8a00\u8a9e\u306e\u4e2d\u3067\u306f\u3068\u3073\u306c\u3051\u3066\u3057\u3063\u304f\u308a\u304f\u308b\u6c17\u6301\u3061\u306e\u3088\u3044\u611f\u89e6\u3060\u3063\u305f\u3053\u3068\u3092\u5f37\u8abf\u3059\u308b\u3002\nSwift \u306f\u6700\u521d Linux \u4e0a\u306e REPL \u3067\u89e6\u3063\u3066\u305f\u3051\u3069\u3001\u3061\u3068\u5236\u7d04\u304c\u304d\u3064\u3059\u304e\u3066\u304a\u52c9\u5f37\u3067\u89e6\u308b\u306b\u3082\u307e\u3060\u65e9\u3044\u306e\u3046\u3002\n"}