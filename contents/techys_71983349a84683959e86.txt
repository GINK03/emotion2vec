{"context": " More than 1 year has passed since last update.\n\ncuisine\u3068\u306f\ncuisine\u306f\u3001fabric\u306b\u51aa\u7b49\u6027\u3092\u6388\u3051\u308b\u30e9\u30a4\u30d6\u30e9\u30ea\u3067\u3059\u3002\n\u51aa\u7b49\u6027\u3068\u306f\u30011\u56de\u5b9f\u884c\u3057\u3066\u3082\u8907\u6570\u56de\u5b9f\u884c\u3057\u3066\u3082\u540c\u3058\u7d50\u679c\u306b\u306a\u308b\u7279\u6027\u306e\u3053\u3068\u3067\u3059\u3002\u30a4\u30f3\u30d5\u30e9\u754c\u9688\u3067\u8a00\u3046\u3068\u3001Chef\u3084Puppet\u3001Ansible\u306a\u3069\u306e\u30c4\u30fc\u30eb\u304c\u51aa\u7b49\u6027\u3092\u6301\u3063\u3066\u3044\u307e\u3059\u3002\u3064\u307e\u308a\u3001\u3053\u308c\u3089\u306e\u30c4\u30fc\u30eb\u306f1\u56de\u5b9f\u884c\u3057\u3066\u3082\u8907\u6570\u56de\u5b9f\u884c\u3057\u3066\u3082\u30b5\u30fc\u30d0\u304c\u540c\u3058\u72b6\u614b\u306b\u306a\u308b\u7279\u6027\u3092\u6301\u3063\u3066\u3044\u307e\u3059\u3002\n\u3057\u304b\u3057\u306a\u304c\u3089\u3001fabric\u306f\u51aa\u7b49\u6027\u304c\u306a\u3044\u305f\u3081\u5b9f\u884c\u6642\u306e\u8a2d\u5b9a\u72b6\u614b\u306b\u914d\u616e\u3057\u306a\u3051\u308c\u3070\u3001\u8907\u6570\u56de\u5b9f\u884c\u3059\u308b\u3068\u30a8\u30e9\u30fc\u306b\u306a\u308a\u307e\u3059\u3002\u4f8b\u3048\u3070\u3001\u30e6\u30fc\u30b6\u3092\u8ffd\u52a0\u3059\u308b\u30b9\u30af\u30ea\u30d7\u30c8\u3092\u66f8\u3044\u305f\u5834\u5408\u30011\u56de\u76ee\u306e\u5b9f\u884c\u306f\u4e0a\u624b\u304f\u8ffd\u52a0\u3055\u308c\u307e\u3059\u304c\u30012\u56de\u76ee\u306f\u3059\u3067\u306b\u30e6\u30fc\u30b6\u304c\u5b58\u5728\u3059\u308b\u305f\u3081\u30a8\u30e9\u30fc\u306b\u306a\u3063\u3066\u3057\u307e\u3044\u307e\u3059\u3002\n\u30b5\u30fc\u30d0\u306e\u521d\u671f\u8a2d\u5b9a\u306bfabric\u3092\u4f7f\u3063\u3066\u3044\u307e\u3057\u305f\u304c\u3001\u521d\u671f\u8a2d\u5b9a\u3057\u304b\u610f\u8b58\u305b\u305a\u306b\u30b9\u30af\u30ea\u30d7\u30c8\u3092\u66f8\u3044\u3066\u3044\u305f\u306e\u3067\u3001\u3061\u3087\u3063\u3068\u3057\u305f\u5909\u66f4\u3084\u4fee\u6b63\u3067\u3082\u518d\u5b9f\u884c\u3067\u304d\u306a\u304f\u3066\u56f0\u3063\u3066\u3044\u307e\u3057\u305f\u3002\u3044\u307e\u3055\u3089\u3001Chef\u3084Puppet\u3001Ansible\u3068\u304b\u51aa\u7b49\u6027\u3092\u7dad\u6301\u3067\u304d\u308b\u30c4\u30fc\u30eb\u3078\u306e\u4e57\u308a\u63db\u3048\u3082\u5927\u5909\u3060\u3057\u3001\u3069\u3046\u3057\u3088\u3046\u304b\u306a\u3068\u3002\u305d\u3053\u3067\u3001cuisine\u3067\u3059\u3088\u3002\ncuisine\u306e\u610f\u5473\u306f\u3001\u30d5\u30e9\u30f3\u30b9\u8a9e\u3067\u8abf\u7406\u3001\u53f0\u6240\u3068\u304b\u305d\u3046\u3044\u3046\u610f\u5473\u3063\u307d\u3044\u3067\u3059\u3002Chef\u306e\u5f71\u97ff\u304b\u306a\uff1f\u6599\u7406\u7cfb\u306e\u7531\u6765\u306a\u3093\u3067\u3059\u304b\u306d\u3002\u8aad\u307f\u65b9\u306f\u300c\u30ad\u30e5\u30a4\u30b8\u30fc\u30cc\u300d\u3067\u3044\u3044\u306e\u304b\u306a\uff1f\n\n\u52b9\u679c\ncuisine\u306b\u3088\u3063\u3066\u3001fabric\u3067\u51aa\u7b49\u6027\u3092\u6301\u3063\u305f\u30b9\u30af\u30ea\u30d7\u30c8\u3092\u8a18\u8ff0\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\u3053\u308c\u306b\u3088\u3063\u3066\u3001\u30b5\u30fc\u30d0\u306e\u72b6\u614b\u3092fabric\u30b9\u30af\u30ea\u30d7\u30c8\u3068\u3057\u3066\u8a18\u8ff0\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u3001\u8907\u6570\u56de\u5b9f\u884c\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002\u521d\u671f\u8a2d\u5b9a\u306e\u4f5c\u308a\u6368\u3066\u30b9\u30af\u30ea\u30d7\u30c8\u3092\u3001\u904b\u7528\u4e2d\u306e\u8a2d\u5b9a\u8ffd\u52a0\u3084\u5909\u66f4\u306b\u3082\u4f7f\u3046\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u306d\u3002\n\n\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u65b9\u6cd5\n\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u306f\u7c21\u5358\u3067\u3059\u3002fabric\u3068\u540c\u69d8\u306b\u3001pip\u3067\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3067\u304d\u307e\u3059\u3002\u3053\u308c\u3060\u3051\u3067\u3059\u306d\u3002\u3042\u3068\u306f\u3001fabric\u30b9\u30af\u30ea\u30d7\u30c8\u306e\u4e2d\u3067import\u3057\u3066\u4f7f\u3046\u3060\u3051\u3067\u3059\u3002\n$ pip install fabric cuisine\n\n\n\u30b9\u30af\u30ea\u30d7\u30c8\u4f8b\n\u4e0b\u8a18\u306f\u3001RPM\u8a2d\u5b9a\u3068\u30e6\u30fc\u30b6\u8a2d\u5b9a\u306efabric\u30b9\u30af\u30ea\u30d7\u30c8\u306e\u30b5\u30f3\u30d7\u30eb\u3067\u3059\u3002\u30b9\u30af\u30ea\u30d7\u30c8\u4e2d\u306epackage_ensure\u3001user_ensure\u3001ssh_authorized\u304ccuisine\u306e\u30e1\u30bd\u30c3\u30c9\u3067\u3059\u3002\u4eca\u56de\u8a66\u3057\u305f\u30b5\u30fc\u30d0\u306fRedHat\u7cfb\u3060\u3063\u305f\u306e\u3067\u30d1\u30c3\u30b1\u30fc\u30b8\u65b9\u5f0f\u306fyum\u3092\u9078\u629e\u3057\u3066\u3044\u307e\u3059\u3002\n\nfabfile.py\n#-*- encoding:utf-8 -*-\n\nfrom fabric.api import *\nfrom fabric.decorators import task\nfrom cuisine import *\n\n# \u30d1\u30c3\u30b1\u30fc\u30b8\u7ba1\u7406\u65b9\u5f0f\u306e\u9078\u629e\nselect_package('yum')\n\n# \u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3057\u305f\u3044RPM\u306e\u30ea\u30b9\u30c8\nrpms = [ 'zip', 'unzip' ]\n\n# \u767b\u9332\u3057\u305f\u3044\u30e6\u30fc\u30b6\u306e\u30ea\u30b9\u30c8\n# \u516c\u958b\u9375\u306fpubkeys/pubkey.username\u3067\u7528\u610f\u3057\u3066\u304a\u304f\nusers = ['hoge', 'fuga' ]\n\n\n@task\ndef setup_rpms():\n  for rpm in rpms:\n    with mode_sudo():\n      # RPM\u8a2d\u5b9a\n      package_ensure(rpm, update=False)\n\n\n@task\ndef setup_users():\n  for user in users:\n    # \u30e6\u30fc\u30b6\u8a2d\u5b9a\n    user_ensure(user, passwd='password')\n\n    # SSH\u9375\u8a2d\u5b9a\n    pubkey = 'pubkeys/pubkey.' + user\n    with open(pubkey) as f:\n      pubkey_str = f.read()\n    with mode_sudo():\n      ssh_authorize(user, pubkey_str)\n\n\n\npydoc\n\u3042\u307e\u308a\u60c5\u5831\u304c\u306a\u3044\u306e\u3067\u3001pydoc cuisine\u3057\u305f\u7d50\u679c\u3092\u8f09\u305b\u3066\u304a\u304d\u307e\u3059\u3002\u4f8b\u3067\u306f\u3001\u30d1\u30c3\u30b1\u30fc\u30b8\u3068\u30e6\u30fc\u30b6\u8a2d\u5b9a\u3092\u4f7f\u3044\u307e\u3057\u305f\u304c\u3001\u4ed6\u306b\u3082\u3044\u304f\u3064\u304b\u51aa\u7b49\u6027\u3092\u7dad\u6301\u3059\u308b\u305f\u3081\u306e\u4ed5\u7d44\u307f\u304c\u7528\u610f\u3055\u308c\u3066\u3044\u307e\u3059\u3002\nHelp on module cuisine:\n\nNAME\n    cuisine\n\nFILE\n    /Library/Python/2.7/site-packages/cuisine.py\n\nDESCRIPTION\n    `cuisine` makes it easy to write automatic server installation\n    and configuration recipes by wrapping common administrative tasks\n    (installing packages, creating users and groups) in Python\n    functions.\n\n    `cuisine` is designed to work with Fabric and provide all you\n    need for getting your new server up and running in minutes.\n\n    Note, that right now, Cuisine only supports Debian-based Linux\n    systems.\n\n    See also:\n\n    - Deploying Django with Fabric\n      <http://lethain.com/entry/2008/nov/04/deploying-django-with-fabric>\n\n    - Notes on Python Fabric 0.9b1\n      <http://www.saltycrane.com/blog/2009/10/notes-python-fabric-09b1>`_\n\n    - EC2, fabric, and \"err: stdin: is not a tty\"\n      <http://blog.markfeeney.com/2009/12/ec2-fabric-and-err-stdin-is-not-tty.html>`_\n\n    :copyright: (c) 2011-2013 by S\u00e9bastien Pierre.\n    :license:   BSD, see LICENSE for more details.\n\nCLASSES\n    __builtin__.object\n        Stats\n    __mode_switcher(__builtin__.object)\n        mode_local\n        mode_remote\n        mode_sudo\n        mode_user\n\n    class Stats(__builtin__.object)\n     |  A work-in-progress class to store cuisine's statistics, so that you\n     |  can have a summary of what has been done.\n     |\n     |  Methods defined here:\n     |\n     |  __init__(self)\n     |\n     |  ----------------------------------------------------------------------\n     |  Data descriptors defined here:\n     |\n     |  __dict__\n     |      dictionary for instance variables (if defined)\n     |\n     |  __weakref__\n     |      list of weak references to the object (if defined)\n\n    class mode_local(__mode_switcher)\n     |  Sets Cuisine into local mode, where run/sudo won't go through\n     |  Fabric's API, but directly through a popen. This allows you to\n     |  easily test your Cuisine scripts without using Fabric.\n     |\n     |  Method resolution order:\n     |      mode_local\n     |      __mode_switcher\n     |      __builtin__.object\n     |\n     |  Data and other attributes defined here:\n     |\n     |  MODE_KEY = 'CUISINE_MODE_LOCAL'\n     |\n     |  MODE_VALUE = True\n     |\n     |  ----------------------------------------------------------------------\n     |  Methods inherited from __mode_switcher:\n     |\n     |  __enter__(self)\n     |\n     |  __exit__(self, type, value, traceback)\n     |\n     |  __init__(self, value=None)\n     |\n     |  ----------------------------------------------------------------------\n     |  Data descriptors inherited from __mode_switcher:\n     |\n     |  __dict__\n     |      dictionary for instance variables (if defined)\n     |\n     |  __weakref__\n     |      list of weak references to the object (if defined)\n\n    class mode_remote(__mode_switcher)\n     |  Comes back to Fabric's API for run/sudo. This basically reverts\n     |  the effect of calling `mode_local()`.\n     |\n     |  Method resolution order:\n     |      mode_remote\n     |      __mode_switcher\n     |      __builtin__.object\n     |\n     |  Data and other attributes defined here:\n     |\n     |  MODE_KEY = 'CUISINE_MODE_LOCAL'\n     |\n     |  MODE_VALUE = False\n     |\n     |  ----------------------------------------------------------------------\n     |  Methods inherited from __mode_switcher:\n     |\n     |  __enter__(self)\n     |\n     |  __exit__(self, type, value, traceback)\n     |\n     |  __init__(self, value=None)\n     |\n     |  ----------------------------------------------------------------------\n     |  Data descriptors inherited from __mode_switcher:\n     |\n     |  __dict__\n     |      dictionary for instance variables (if defined)\n     |\n     |  __weakref__\n     |      list of weak references to the object (if defined)\n\n    class mode_sudo(__mode_switcher)\n     |  Cuisine functions will be executed with sudo.\n     |\n     |  Method resolution order:\n     |      mode_sudo\n     |      __mode_switcher\n     |      __builtin__.object\n     |\n     |  Data and other attributes defined here:\n     |\n     |  MODE_KEY = 'CUISINE_MODE_SUDO'\n     |\n     |  MODE_VALUE = True\n     |\n     |  ----------------------------------------------------------------------\n     |  Methods inherited from __mode_switcher:\n     |\n     |  __enter__(self)\n     |\n     |  __exit__(self, type, value, traceback)\n     |\n     |  __init__(self, value=None)\n     |\n     |  ----------------------------------------------------------------------\n     |  Data descriptors inherited from __mode_switcher:\n     |\n     |  __dict__\n     |      dictionary for instance variables (if defined)\n     |\n     |  __weakref__\n     |      list of weak references to the object (if defined)\n\n    class mode_user(__mode_switcher)\n     |  Cuisine functions will be executed as the current user.\n     |\n     |  Method resolution order:\n     |      mode_user\n     |      __mode_switcher\n     |      __builtin__.object\n     |\n     |  Data and other attributes defined here:\n     |\n     |  MODE_KEY = 'CUISINE_MODE_SUDO'\n     |\n     |  MODE_VALUE = False\n     |\n     |  ----------------------------------------------------------------------\n     |  Methods inherited from __mode_switcher:\n     |\n     |  __enter__(self)\n     |\n     |  __exit__(self, type, value, traceback)\n     |\n     |  __init__(self, value=None)\n     |\n     |  ----------------------------------------------------------------------\n     |  Data descriptors inherited from __mode_switcher:\n     |\n     |  __dict__\n     |      dictionary for instance variables (if defined)\n     |\n     |  __weakref__\n     |      list of weak references to the object (if defined)\n\nFUNCTIONS\n    apt_get(cmd)\n\n    cd(*args, **kwargs)\n        A wrapper around Fabric's cd to change the local directory if\n        mode is local\n\n    command_check(command)\n        Tests if the given command is available on the system.\n\n    command_ensure(command, package=None)\n        Ensures that the given command is present, if not installs the\n        package with the given name, which is the same as the command by\n        default.\n\n    connect(*args, **kwargs)\n        Sets Fabric's current host to the given host. This is useful when\n        using Cuisine in standalone.\n\n    dir_attribs(*args, **kwargs)\n        Updates the mode/owner/group for the given remote directory.\n\n    dir_ensure(location, recursive=False, mode=None, owner=None, group=None)\n        Ensures that there is a remote directory at the given location,\n        optionally updating its mode/owner/group.\n\n        If we are not updating the owner/group then this can be done as a single\n        ssh call, so use that method, otherwise set owner/group after creation.\n\n    dir_exists(location)\n        Tells if there is a remote directory at the given location.\n\n    dir_remove(*args, **kwargs)\n        Removes a directory\n\n    dispatch(prefix=None)\n        Dispatches the current function to specific implementation. The `prefix`\n        parameter indicates the common option prefix, and the `select_[option]()`\n        function will determine the function suffix.\n\n        For instance the package functions are defined like this:\n\n        {{{\n        @dispatch(\"package\")\n        def package_ensure(...):\n                ...\n        def package_ensure_apt(...):\n                ...\n        def package_ensure_yum(...):\n                ...\n        }}}\n\n        and then when a user does\n\n        {{{\n        cuisine.select_package(\"yum\")\n        cuisine.package_ensure(...)\n        }}}\n\n        then the `dispatch` function will dispatch `package_ensure` to\n        `package_ensure_yum`.\n\n        If your prefix is the first word of the function name before the\n        first `_` then you can simply use `@dispatch` without parameters.\n\n    file_append(*args, **kwargs)\n        Appends the given content to the remote file at the given\n        location, optionally updating its mode/owner/group.\n\n    file_attribs(*args, **kwargs)\n        Updates the mode/owner/group for the remote file at the given\n        location.\n\n    file_attribs_get(*args, **kwargs)\n        Return mode, owner, and group for remote path.\n        Return mode, owner, and group if remote path exists, 'None'\n        otherwise.\n\n    file_backup(*args, **kwargs)\n        Backups the file at the given location in the same directory, appending\n        the given suffix. If `once` is True, then the backup will be skipped if\n        there is already a backup file.\n\n    file_base64(*args, **kwargs)\n        Returns the base64-encoded content of the file at the given location.\n\n    file_ensure(*args, **kwargs)\n        Updates the mode/owner/group for the remote file at the given\n        location.\n\n    file_exists(location)\n        Tests if there is a *remote* file at the given location.\n\n    file_is_dir(location)\n\n    file_is_file(location)\n\n    file_is_link(location)\n\n    file_link(*args, **kwargs)\n        Creates a (symbolic) link between source and destination on the remote host,\n        optionally setting its mode/owner/group.\n\n    file_local_read(*args, **kwargs)\n        Reads a *local* file from the given location, expanding '~' and\n        shell variables.\n\n    file_md5(*args, **kwargs)\n        Returns the MD5 sum (as a hex string) for the remote file at the given location.\n\n    file_read(*args, **kwargs)\n        Reads the *remote* file at the given location, if default is not `None`,\n        default will be returned if the file does not exist.\n\n    file_sha256(*args, **kwargs)\n        Returns the SHA-256 sum (as a hex string) for the remote file at the given location.\n\n    file_unlink(*args, **kwargs)\n\n    file_update(*args, **kwargs)\n        Updates the content of the given by passing the existing\n        content of the remote file at the given location to the 'updater'\n        function. Return true if file content was changed.\n\n        For instance, if you'd like to convert an existing file to all\n        uppercase, simply do:\n\n        >   file_update(\"/etc/myfile\", lambda _:_.upper())\n\n        Or restart service on config change:\n\n        >   if file_update(\"/etc/myfile.cfg\", lambda _: text_ensure_line(_, line)): run(\"service restart\")\n\n    file_upload(*args, **kwargs)\n        Uploads the local file to the remote location only if the remote location does not\n        exists or the content are different.\n\n    file_write(*args, **kwargs)\n        Writes the given content to the file at the given remote\n        location, optionally setting mode/owner/group.\n\n    group_check(*args, **kwargs)\n        Checks if there is a group defined with the given name,\n        returning its information as a\n        '{\"name\":<str>,\"gid\":<str>,\"members\":<list[str]>}' or 'None' if\n        the group does not exists.\n\n    group_check_bsd(name)\n        Checks if there is a group defined with the given name,\n        returning its information as:\n        '{\"name\":<str>,\"gid\":<str>,\"members\":<list[str]>}'\n        or\n        '{\"name\":<str>,\"gid\":<str>}' if the group has no members\n        or\n        'None' if the group does not exists.\n\n    group_check_linux(name)\n        Checks if there is a group defined with the given name,\n        returning its information as a\n        '{\"name\":<str>,\"gid\":<str>,\"members\":<list[str]>}' or 'None' if\n        the group does not exists.\n\n    group_create(*args, **kwargs)\n        Creates a group with the given name, and optionally given gid.\n\n    group_create_bsd(name, gid=None)\n        Creates a group with the given name, and optionally given gid.\n\n    group_create_linux(name, gid=None)\n        Creates a group with the given name, and optionally given gid.\n\n    group_ensure(*args, **kwargs)\n        Ensures that the group with the given name (and optional gid)\n        exists.\n\n    group_ensure_bsd(name, gid=None)\n        Ensures that the group with the given name (and optional gid)\n        exists.\n\n    group_ensure_linux(name, gid=None)\n        Ensures that the group with the given name (and optional gid)\n        exists.\n\n    group_remove(*args, **kwargs)\n        Removes the given group, this implies to take members out the group\n        if there are any.  If wipe=True and the group is a primary one,\n        deletes its user as well.\n\n    group_remove_bsd(group=None, wipe=False)\n        Removes the given group, this implies to take members out the group\n        if there are any.  If wipe=True and the group is a primary one,\n        deletes its user as well.\n\n    group_remove_linux(group=None, wipe=False)\n        Removes the given group, this implies to take members out the group\n        if there are any.  If wipe=True and the group is a primary one,\n        deletes its user as well.\n\n    group_user_add(*args, **kwargs)\n        Adds the given user/list of users to the given group/groups.\n\n    group_user_add_bsd(group, user)\n        Adds the given user/list of users to the given group/groups.\n\n    group_user_add_linux(group, user)\n        Adds the given user/list of users to the given group/groups.\n\n    group_user_check(*args, **kwargs)\n        Checks if the given user is a member of the given group. It\n        will return 'False' if the group does not exist.\n\n    group_user_check_bsd(group, user)\n        Checks if the given user is a member of the given group. It\n        will return 'False' if the group does not exist.\n\n    group_user_check_linux(group, user)\n        Checks if the given user is a member of the given group. It\n        will return 'False' if the group does not exist.\n\n    group_user_del(*args, **kwargs)\n        remove the given user from the given group.\n\n    group_user_del_bsd(group, user)\n        remove the given user from the given group.\n\n    group_user_del_linux(group, user)\n        remove the given user from the given group.\n\n    group_user_ensure(*args, **kwargs)\n        Ensure that a given user is a member of a given group.\n\n    group_user_ensure_bsd(group, user)\n        Ensure that a given user is a member of a given group.\n\n    group_user_ensure_linux(group, user)\n        Ensure that a given user is a member of a given group.\n\n    host(name=<module 'base64' from '/System/Library/Framework...framework/Versions/2.7/lib/python2.7/base64.pyc'>)\n        Returns or sets the host\n\n    is_local()\n\n    is_remote()\n\n    is_sudo()\n\n    locale_check(locale)\n\n    locale_ensure(locale)\n\n    log_call(function, args, kwargs)\n        Logs the given function call\n\n    log_message(message)\n        Logs the given message\n\n    logged(message=None)\n        Logs the invoked function name and arguments.\n\n    mode(key)\n        Queries the given Cuisine mode (ie. MODE_LOCAL, MODE_SUDO)\n\n    options()\n        Retrieves the list of options as a dictionary.\n\n    package_clean(*args, **kwargs)\n        Clean the repository for un-needed files.\n\n    package_clean_apt(package=None)\n\n    package_clean_emerge(package=None)\n\n    package_clean_pacman()\n\n    package_clean_pkgin(package=None)\n\n    package_clean_pkgng(package=None)\n\n    package_clean_yum(package=None)\n\n    package_clean_zypper()\n\n    package_ensure(*args, **kwargs)\n        Tests if the given package is installed, and installs it in\n        case it's not already there. If `update` is true, then the\n        package will be updated if it already exists.\n\n    package_ensure_apt(package, update=False)\n        Ensure apt packages are installed\n\n    package_ensure_emerge(package, update=False)\n\n    package_ensure_pacman(package, update=False)\n        Ensure apt packages are installed\n\n    package_ensure_pkgin(package, update=False)\n\n    package_ensure_pkgng(package, update=False)\n\n    package_ensure_yum(package, update=False)\n\n    package_ensure_zypper(package, update=False)\n\n    package_install(*args, **kwargs)\n        Installs the given package/list of package, optionally updating\n        the package database.\n\n    package_install_apt(package, update=False)\n\n    package_install_emerge(package, update=False)\n\n    package_install_pacman(package, update=False)\n\n    package_install_pkgin(package, update=False)\n\n    package_install_pkgng(package, update=False)\n\n    package_install_yum(package, update=False)\n\n    package_install_zypper(package, update=False)\n\n    package_remove(*args, **kwargs)\n        Remove package and optionally clean unused packages\n\n    package_remove_apt(package, autoclean=False)\n\n    package_remove_emerge(package, autoclean=False)\n\n    package_remove_pacman(package, autoclean=False)\n\n    package_update(*args, **kwargs)\n        Updates the package database (when no argument) or update the package\n        or list of packages given as argument.\n\n    package_update_apt(package=None)\n\n    package_update_emerge(package=None)\n\n    package_update_pacman(package=None)\n\n    package_update_pkgin(package=None)\n\n    package_update_pkgng(package=None)\n\n    package_update_yum(package=None)\n\n    package_update_zypper(package=None)\n\n    package_upgrade(*args, **kwargs)\n        Updates every package present on the system.\n\n    package_upgrade_apt(distupgrade=False)\n\n    package_upgrade_emerge(distupgrade=False)\n\n    package_upgrade_pacman()\n\n    package_upgrade_pkgin()\n\n    package_upgrade_pkgng()\n\n    package_upgrade_yum()\n\n    package_upgrade_zypper()\n\n    process_find(*args, **kwargs)\n        Returns the pids of processes with the given name. If exact is `False`\n        it will return the list of all processes that start with the given\n        `name`.\n\n    process_kill(*args, **kwargs)\n        Kills the given processes with the given name. If exact is `False`\n        it will return the list of all processes that start with the given\n        `name`.\n\n    pwd()\n        Returns the current directory.\n\n    python_package_ensure(*args, **kwargs)\n        Tests if the given python package is installed, and installes it in\n        case it's not already there.\n\n    python_package_ensure_easy_install(package)\n        The \"package\" argument, defines the name of the package that will be ensured.\n\n    python_package_ensure_pip(package=None, r=None, pip=None)\n        The \"package\" argument, defines the name of the package that will be ensured.\n        The argument \"r\" referes to the requirements file that will be used by pip and\n        is equivalent to the \"-r\" parameter of pip.\n        Either \"package\" or \"r\" needs to be provided\n\n    python_package_install(*args, **kwargs)\n        Installs the given python package/list of python packages.\n\n    python_package_install_easy_install(package)\n        The \"package\" argument, defines the name of the package that will be installed.\n\n    python_package_install_pip(package=None, r=None, pip=None)\n        The \"package\" argument, defines the name of the package that will be installed.\n        The argument \"r\" referes to the requirements file that will be used by pip and\n        is equivalent to the \"-r\" parameter of pip.\n        Either \"package\" or \"r\" needs to be provided\n        The optional argument \"E\" is equivalent to the \"-E\" parameter of pip. E is the\n        path to a virtualenv. If provided, it will be added to the pip call.\n\n    python_package_remove(*args, **kwargs)\n        Removes the given python package.\n\n    python_package_remove_easy_install(package)\n        The \"package\" argument, defines the name of the package that will be removed.\n\n    python_package_remove_pip(package, pip=None)\n        The \"package\" argument, defines the name of the package that will be ensured.\n        The argument \"r\" referes to the requirements file that will be used by pip and\n        is equivalent to the \"-r\" parameter of pip.\n        Either \"package\" or \"r\" needs to be provided\n\n    python_package_upgrade(*args, **kwargs)\n        Upgrades the defined python package.\n\n    python_package_upgrade_easy_install(package)\n        The \"package\" argument, defines the name of the package that will be upgraded.\n\n    python_package_upgrade_pip(package)\n        The \"package\" argument, defines the name of the package that will be upgraded.\n\n    repository_ensure_apt(*args, **kwargs)\n\n    repository_ensure_emerge(repository)\n\n    repository_ensure_pacman(repository)\n\n    repository_ensure_pkgin(repository)\n        # This should be simple but I have to think it properly\n\n    repository_ensure_pkgng(repository)\n\n    repository_ensure_yum(repository)\n\n    repository_ensure_zypper(repository)\n\n    rsync(local_path, remote_path, compress=True, progress=False, verbose=True, owner=None, group=None)\n        Rsyncs local to remote, using the connection's host and user.\n\n    run(*args, **kwargs)\n        A wrapper to Fabric's run/sudo commands that takes into account\n        the `MODE_LOCAL` and `MODE_SUDO` modes of Cuisine.\n\n    run_local(command, sudo=False, shell=True, pty=True, combine_stderr=None)\n        Local implementation of fabric.api.run() using subprocess.\n\n        Note: pty option exists for function signature compatibility and is\n        ignored.\n\n    select_group(selection=None)\n\n    select_hash(selection=None)\n\n    select_os_flavour(selection=None)\n\n    select_package(selection=None)\n        Selects the type of package subsystem to use (ex:apt, yum, zypper, pacman, or emerge).\n\n    select_python_package(selection=None)\n\n    select_user(selection=None)\n\n    shell_safe(path)\n        Makes sure that the given path/string is escaped and safe for shell\n\n    ssh_authorize(user, key)\n        Adds the given key to the '.ssh/authorized_keys' for the given\n        user.\n\n    ssh_keygen(user, keytype='dsa')\n        Generates a pair of ssh keys in the user's home .ssh directory.\n\n    ssh_unauthorize(user, key)\n        Removes the given key to the remote '.ssh/authorized_keys' for the given\n        user.\n\n    stringify(value)\n        Turns the given value in a user-friendly string that can be displayed\n\n    sudo(*args, **kwargs)\n        A wrapper to Fabric's run/sudo commands, using the\n        'cuisine.MODE_SUDO' global to tell whether the command should be run as\n        regular user or sudo.\n\n    sudo_password(password=None)\n        Sets the password for the sudo command.\n\n    system_uuid()\n        Gets a machines UUID (Universally Unique Identifier).\n\n    system_uuid_alias_add()\n        Adds system UUID alias to /etc/hosts.\n        Some tools/processes rely/want the hostname as an alias in\n        /etc/hosts e.g. `127.0.0.1 localhost <hostname>`.\n\n    text_detect_eol(text)\n\n    text_ensure_line(text, *lines)\n        Ensures that the given lines are present in the given text,\n        otherwise appends the lines that are not already in the text at\n        the end of it.\n\n    text_get_line(text, predicate)\n        Returns the first line that matches the given predicate.\n\n    text_normalize(text)\n        Converts tabs and spaces to single space and strips the text.\n\n    text_nospace(text)\n        Converts tabs and spaces to single space and strips the text.\n\n    text_replace_line(text, old, new, find=<function <lambda>>, process=<function <lambda>>)\n        Replaces lines equal to 'old' with 'new', returning the new\n        text and the count of replacements.\n\n        Returns: (text, number of lines replaced)\n\n        `process` is a function that will pre-process each line (you can think of\n        it as a normalization function, by default it will return the string as-is),\n        and `find` is the function that will compare the current line to the\n        `old` line.\n\n        The finds the line using `find(process(current_line), process(old_line))`,\n        and if this matches, will insert the new line instead.\n\n    text_strip_margin(text, margin='|')\n        Will strip all the characters before the left margin identified\n        by the `margin` character in your text. For instance\n\n        ```\n                        |Hello, world!\n        ```\n\n        will result in\n\n        ```\n        Hello, world!\n        ```\n\n    text_template(text, variables)\n        Substitutes '${PLACEHOLDER}'s within the text with the\n        corresponding values from variables.\n\n    upstart_ensure(name)\n        Ensures that the given upstart service is running, starting\n        it if necessary.\n\n    upstart_reload(name)\n        Reloads the given service, or starts it if it is not running.\n\n    upstart_restart(name)\n        Tries a `restart` command to the given service, if not successful\n        will stop it and start it. If the service is not started, will start it.\n\n    upstart_stop(name)\n        Ensures that the given upstart service is stopped.\n\n    user(name=<module 'base64' from '/System/Library/Framework...framework/Versions/2.7/lib/python2.7/base64.pyc'>)\n        Returns or sets the user\n\n    user_check(*args, **kwargs)\n        Checks if there is a user defined with the given name,\n        returning its information as a\n        '{\"name\":<str>,\"uid\":<str>,\"gid\":<str>,\"home\":<str>,\"shell\":<str>}'\n        or 'None' if the user does not exists.\n        need_passwd (Boolean) indicates if password to be included in result or not.\n                If set to True it parses 'getent shadow' and needs sudo access\n\n    user_check_bsd(name=None, uid=None, need_passwd=True)\n        Checks if there is a user defined with the given name,\n        returning its information as a\n        '{\"name\":<str>,\"uid\":<str>,\"gid\":<str>,\"home\":<str>,\"shell\":<str>}'\n        or 'None' if the user does not exists.\n        need_passwd (Boolean) indicates if password to be included in result or not.\n                If set to True it parses 'getent passwd' and needs sudo access\n\n    user_check_linux(name=None, uid=None, need_passwd=True)\n        Checks if there is a user defined with the given name,\n        returning its information as a\n        '{\"name\":<str>,\"uid\":<str>,\"gid\":<str>,\"home\":<str>,\"shell\":<str>}'\n        or 'None' if the user does not exists.\n        need_passwd (Boolean) indicates if password to be included in result or not.\n                If set to True it parses 'getent shadow' and needs sudo access\n\n    user_create(*args, **kwargs)\n        Creates the user with the given name, optionally giving a\n        specific password/home/uid/gid/shell.\n\n    user_create_bsd(name, passwd=None, home=None, uid=None, gid=None, shell=None, uid_min=None, uid_max=None, encrypted_passwd=True, fullname=None, createhome=True)\n        Creates the user with the given name, optionally giving a\n        specific password/home/uid/gid/shell.\n\n    user_create_linux(name, passwd=None, home=None, uid=None, gid=None, shell=None, uid_min=None, uid_max=None, encrypted_passwd=True, fullname=None, createhome=True)\n        Creates the user with the given name, optionally giving a\n        specific password/home/uid/gid/shell.\n\n    user_create_passwd_bsd(name, passwd=None, home=None, uid=None, gid=None, shell=None, uid_min=None, uid_max=None, encrypted_passwd=True, fullname=None, createhome=True)\n        Creates the user with the given name, optionally giving a\n        specific password/home/uid/gid/shell.\n\n    user_ensure(*args, **kwargs)\n        Ensures that the given users exists, optionally updating their\n        passwd/home/uid/gid/shell.\n\n    user_ensure_bsd(name, passwd=None, home=None, uid=None, gid=None, shell=None, fullname=None, encrypted_passwd=True)\n        Ensures that the given users exists, optionally updating their\n        passwd/home/uid/gid/shell.\n\n    user_ensure_linux(name, passwd=None, home=None, uid=None, gid=None, shell=None, fullname=None, encrypted_passwd=True)\n        Ensures that the given users exists, optionally updating their\n        passwd/home/uid/gid/shell.\n\n    user_passwd(*args, **kwargs)\n        Sets the given user password. Password is expected to be encrypted by default.\n\n    user_passwd_bsd(name, passwd, encrypted_passwd=True)\n        Sets the given user password. Password is expected to be encrypted by default.\n\n    user_passwd_linux(name, passwd, encrypted_passwd=True)\n        Sets the given user password. Password is expected to be encrypted by default.\n\n    user_remove(*args, **kwargs)\n        Removes the user with the given name, optionally\n        removing the home directory and mail spool.\n\n    user_remove_bsd(name, rmhome=None)\n        Removes the user with the given name, optionally\n        removing the home directory and mail spool.\n\n    user_remove_linux(name, rmhome=None)\n        Removes the user with the given name, optionally\n        removing the home directory and mail spool.\n\nDATA\n    AVAILABLE_OPTIONS = {'group': ['linux', 'bsd'], 'hash': ['python', 'op...\n    CMD_APT_GET = 'DEBIAN_FRONTEND=noninteractive apt-get -q --yes ...ce-c...\n    DEFAULT_OPTIONS = {'group': 'linux', 'hash': 'python', 'os_flavour': '...\n    MAC_EOL = '\\n'\n    MODE_LOCAL = 'CUISINE_MODE_LOCAL'\n    MODE_SUDO = 'CUISINE_MODE_SUDO'\n    OPTION_GROUP = 'CUISINE_OPTION_GROUP'\n    OPTION_HASH = 'CUISINE_OPTION_HASH'\n    OPTION_OS_FLAVOUR = 'CUISINE_OPTION_OS_FLAVOUR'\n    OPTION_PACKAGE = 'CUISINE_OPTION_PACKAGE'\n    OPTION_PYTHON_PACKAGE = 'CUISINE_OPTION_PYTHON_PACKAGE'\n    OPTION_USER = 'CUISINE_OPTION_USER'\n    RE_SPACES = <_sre.SRE_Pattern object>\n    SHELL_ESCAPE = ' \\'\";`|'\n    STATS = None\n    STRINGIFY_MAXLISTSTRING = 20\n    STRINGIFY_MAXSTRING = 80\n    SUDO_PASSWORD = 'CUISINE_SUDO_PASSWORD'\n    UNIX_EOL = '\\n'\n    VERSION = '0.7.10'\n    WINDOWS_EOL = '\\r\\n'\n    with_statement = _Feature((2, 5, 0, 'alpha', 1), (2, 6, 0, 'alpha', 0)...\n\n# cuisine\u3068\u306f\n\n[cuisine](https://github.com/sebastien/cuisine)\u306f\u3001[fabric](http://www.fabfile.org/)\u306b\u51aa\u7b49\u6027\u3092\u6388\u3051\u308b\u30e9\u30a4\u30d6\u30e9\u30ea\u3067\u3059\u3002\n\n\u51aa\u7b49\u6027\u3068\u306f\u30011\u56de\u5b9f\u884c\u3057\u3066\u3082\u8907\u6570\u56de\u5b9f\u884c\u3057\u3066\u3082\u540c\u3058\u7d50\u679c\u306b\u306a\u308b\u7279\u6027\u306e\u3053\u3068\u3067\u3059\u3002\u30a4\u30f3\u30d5\u30e9\u754c\u9688\u3067\u8a00\u3046\u3068\u3001[Chef](https://www.chef.io/chef/)\u3084[Puppet](https://puppetlabs.com/)\u3001[Ansible](http://www.ansible.com/)\u306a\u3069\u306e\u30c4\u30fc\u30eb\u304c\u51aa\u7b49\u6027\u3092\u6301\u3063\u3066\u3044\u307e\u3059\u3002\u3064\u307e\u308a\u3001\u3053\u308c\u3089\u306e\u30c4\u30fc\u30eb\u306f1\u56de\u5b9f\u884c\u3057\u3066\u3082\u8907\u6570\u56de\u5b9f\u884c\u3057\u3066\u3082\u30b5\u30fc\u30d0\u304c\u540c\u3058\u72b6\u614b\u306b\u306a\u308b\u7279\u6027\u3092\u6301\u3063\u3066\u3044\u307e\u3059\u3002\n\n\u3057\u304b\u3057\u306a\u304c\u3089\u3001fabric\u306f\u51aa\u7b49\u6027\u304c\u306a\u3044\u305f\u3081\u5b9f\u884c\u6642\u306e\u8a2d\u5b9a\u72b6\u614b\u306b\u914d\u616e\u3057\u306a\u3051\u308c\u3070\u3001\u8907\u6570\u56de\u5b9f\u884c\u3059\u308b\u3068\u30a8\u30e9\u30fc\u306b\u306a\u308a\u307e\u3059\u3002\u4f8b\u3048\u3070\u3001\u30e6\u30fc\u30b6\u3092\u8ffd\u52a0\u3059\u308b\u30b9\u30af\u30ea\u30d7\u30c8\u3092\u66f8\u3044\u305f\u5834\u5408\u30011\u56de\u76ee\u306e\u5b9f\u884c\u306f\u4e0a\u624b\u304f\u8ffd\u52a0\u3055\u308c\u307e\u3059\u304c\u30012\u56de\u76ee\u306f\u3059\u3067\u306b\u30e6\u30fc\u30b6\u304c\u5b58\u5728\u3059\u308b\u305f\u3081\u30a8\u30e9\u30fc\u306b\u306a\u3063\u3066\u3057\u307e\u3044\u307e\u3059\u3002\n\n\u30b5\u30fc\u30d0\u306e\u521d\u671f\u8a2d\u5b9a\u306bfabric\u3092\u4f7f\u3063\u3066\u3044\u307e\u3057\u305f\u304c\u3001\u521d\u671f\u8a2d\u5b9a\u3057\u304b\u610f\u8b58\u305b\u305a\u306b\u30b9\u30af\u30ea\u30d7\u30c8\u3092\u66f8\u3044\u3066\u3044\u305f\u306e\u3067\u3001\u3061\u3087\u3063\u3068\u3057\u305f\u5909\u66f4\u3084\u4fee\u6b63\u3067\u3082\u518d\u5b9f\u884c\u3067\u304d\u306a\u304f\u3066\u56f0\u3063\u3066\u3044\u307e\u3057\u305f\u3002\u3044\u307e\u3055\u3089\u3001Chef\u3084Puppet\u3001Ansible\u3068\u304b\u51aa\u7b49\u6027\u3092\u7dad\u6301\u3067\u304d\u308b\u30c4\u30fc\u30eb\u3078\u306e\u4e57\u308a\u63db\u3048\u3082\u5927\u5909\u3060\u3057\u3001\u3069\u3046\u3057\u3088\u3046\u304b\u306a\u3068\u3002\u305d\u3053\u3067\u3001cuisine\u3067\u3059\u3088\u3002\n\ncuisine\u306e\u610f\u5473\u306f\u3001\u30d5\u30e9\u30f3\u30b9\u8a9e\u3067\u8abf\u7406\u3001\u53f0\u6240\u3068\u304b\u305d\u3046\u3044\u3046\u610f\u5473\u3063\u307d\u3044\u3067\u3059\u3002Chef\u306e\u5f71\u97ff\u304b\u306a\uff1f\u6599\u7406\u7cfb\u306e\u7531\u6765\u306a\u3093\u3067\u3059\u304b\u306d\u3002\u8aad\u307f\u65b9\u306f\u300c\u30ad\u30e5\u30a4\u30b8\u30fc\u30cc\u300d\u3067\u3044\u3044\u306e\u304b\u306a\uff1f\n\n\n# \u52b9\u679c\n\ncuisine\u306b\u3088\u3063\u3066\u3001fabric\u3067\u51aa\u7b49\u6027\u3092\u6301\u3063\u305f\u30b9\u30af\u30ea\u30d7\u30c8\u3092\u8a18\u8ff0\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\u3053\u308c\u306b\u3088\u3063\u3066\u3001\u30b5\u30fc\u30d0\u306e\u72b6\u614b\u3092fabric\u30b9\u30af\u30ea\u30d7\u30c8\u3068\u3057\u3066\u8a18\u8ff0\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u3001\u8907\u6570\u56de\u5b9f\u884c\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002\u521d\u671f\u8a2d\u5b9a\u306e\u4f5c\u308a\u6368\u3066\u30b9\u30af\u30ea\u30d7\u30c8\u3092\u3001\u904b\u7528\u4e2d\u306e\u8a2d\u5b9a\u8ffd\u52a0\u3084\u5909\u66f4\u306b\u3082\u4f7f\u3046\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u306d\u3002\n\n\n# \u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u65b9\u6cd5\n\n\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u306f\u7c21\u5358\u3067\u3059\u3002fabric\u3068\u540c\u69d8\u306b\u3001pip\u3067\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3067\u304d\u307e\u3059\u3002\u3053\u308c\u3060\u3051\u3067\u3059\u306d\u3002\u3042\u3068\u306f\u3001fabric\u30b9\u30af\u30ea\u30d7\u30c8\u306e\u4e2d\u3067import\u3057\u3066\u4f7f\u3046\u3060\u3051\u3067\u3059\u3002\n\n```bash\n$ pip install fabric cuisine\n```\n\n\n# \u30b9\u30af\u30ea\u30d7\u30c8\u4f8b\n\n\u4e0b\u8a18\u306f\u3001RPM\u8a2d\u5b9a\u3068\u30e6\u30fc\u30b6\u8a2d\u5b9a\u306efabric\u30b9\u30af\u30ea\u30d7\u30c8\u306e\u30b5\u30f3\u30d7\u30eb\u3067\u3059\u3002\u30b9\u30af\u30ea\u30d7\u30c8\u4e2d\u306e`package_ensure`\u3001`user_ensure`\u3001`ssh_authorized`\u304ccuisine\u306e\u30e1\u30bd\u30c3\u30c9\u3067\u3059\u3002\u4eca\u56de\u8a66\u3057\u305f\u30b5\u30fc\u30d0\u306fRedHat\u7cfb\u3060\u3063\u305f\u306e\u3067\u30d1\u30c3\u30b1\u30fc\u30b8\u65b9\u5f0f\u306fyum\u3092\u9078\u629e\u3057\u3066\u3044\u307e\u3059\u3002\n\n```python:fabfile.py\n#-*- encoding:utf-8 -*-\n\nfrom fabric.api import *\nfrom fabric.decorators import task\nfrom cuisine import *\n\n# \u30d1\u30c3\u30b1\u30fc\u30b8\u7ba1\u7406\u65b9\u5f0f\u306e\u9078\u629e\nselect_package('yum')\n\n# \u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3057\u305f\u3044RPM\u306e\u30ea\u30b9\u30c8\nrpms = [ 'zip', 'unzip' ]\n\n# \u767b\u9332\u3057\u305f\u3044\u30e6\u30fc\u30b6\u306e\u30ea\u30b9\u30c8\n# \u516c\u958b\u9375\u306fpubkeys/pubkey.username\u3067\u7528\u610f\u3057\u3066\u304a\u304f\nusers = ['hoge', 'fuga' ]\n\n\n@task\ndef setup_rpms():\n  for rpm in rpms:\n    with mode_sudo():\n      # RPM\u8a2d\u5b9a\n      package_ensure(rpm, update=False)\n\n\n@task\ndef setup_users():\n  for user in users:\n    # \u30e6\u30fc\u30b6\u8a2d\u5b9a\n    user_ensure(user, passwd='password')\n\n    # SSH\u9375\u8a2d\u5b9a\n    pubkey = 'pubkeys/pubkey.' + user\n    with open(pubkey) as f:\n      pubkey_str = f.read()\n    with mode_sudo():\n      ssh_authorize(user, pubkey_str)\n```\n\n\n# pydoc\n\n\u3042\u307e\u308a\u60c5\u5831\u304c\u306a\u3044\u306e\u3067\u3001pydoc cuisine\u3057\u305f\u7d50\u679c\u3092\u8f09\u305b\u3066\u304a\u304d\u307e\u3059\u3002\u4f8b\u3067\u306f\u3001\u30d1\u30c3\u30b1\u30fc\u30b8\u3068\u30e6\u30fc\u30b6\u8a2d\u5b9a\u3092\u4f7f\u3044\u307e\u3057\u305f\u304c\u3001\u4ed6\u306b\u3082\u3044\u304f\u3064\u304b\u51aa\u7b49\u6027\u3092\u7dad\u6301\u3059\u308b\u305f\u3081\u306e\u4ed5\u7d44\u307f\u304c\u7528\u610f\u3055\u308c\u3066\u3044\u307e\u3059\u3002\n\n```\nHelp on module cuisine:\n\nNAME\n    cuisine\n\nFILE\n    /Library/Python/2.7/site-packages/cuisine.py\n\nDESCRIPTION\n    `cuisine` makes it easy to write automatic server installation\n    and configuration recipes by wrapping common administrative tasks\n    (installing packages, creating users and groups) in Python\n    functions.\n\n    `cuisine` is designed to work with Fabric and provide all you\n    need for getting your new server up and running in minutes.\n\n    Note, that right now, Cuisine only supports Debian-based Linux\n    systems.\n\n    See also:\n\n    - Deploying Django with Fabric\n      <http://lethain.com/entry/2008/nov/04/deploying-django-with-fabric>\n\n    - Notes on Python Fabric 0.9b1\n      <http://www.saltycrane.com/blog/2009/10/notes-python-fabric-09b1>`_\n\n    - EC2, fabric, and \"err: stdin: is not a tty\"\n      <http://blog.markfeeney.com/2009/12/ec2-fabric-and-err-stdin-is-not-tty.html>`_\n\n    :copyright: (c) 2011-2013 by S\u00e9bastien Pierre.\n    :license:   BSD, see LICENSE for more details.\n\nCLASSES\n    __builtin__.object\n        Stats\n    __mode_switcher(__builtin__.object)\n        mode_local\n        mode_remote\n        mode_sudo\n        mode_user\n\n    class Stats(__builtin__.object)\n     |  A work-in-progress class to store cuisine's statistics, so that you\n     |  can have a summary of what has been done.\n     |\n     |  Methods defined here:\n     |\n     |  __init__(self)\n     |\n     |  ----------------------------------------------------------------------\n     |  Data descriptors defined here:\n     |\n     |  __dict__\n     |      dictionary for instance variables (if defined)\n     |\n     |  __weakref__\n     |      list of weak references to the object (if defined)\n\n    class mode_local(__mode_switcher)\n     |  Sets Cuisine into local mode, where run/sudo won't go through\n     |  Fabric's API, but directly through a popen. This allows you to\n     |  easily test your Cuisine scripts without using Fabric.\n     |\n     |  Method resolution order:\n     |      mode_local\n     |      __mode_switcher\n     |      __builtin__.object\n     |\n     |  Data and other attributes defined here:\n     |\n     |  MODE_KEY = 'CUISINE_MODE_LOCAL'\n     |\n     |  MODE_VALUE = True\n     |\n     |  ----------------------------------------------------------------------\n     |  Methods inherited from __mode_switcher:\n     |\n     |  __enter__(self)\n     |\n     |  __exit__(self, type, value, traceback)\n     |\n     |  __init__(self, value=None)\n     |\n     |  ----------------------------------------------------------------------\n     |  Data descriptors inherited from __mode_switcher:\n     |\n     |  __dict__\n     |      dictionary for instance variables (if defined)\n     |\n     |  __weakref__\n     |      list of weak references to the object (if defined)\n\n    class mode_remote(__mode_switcher)\n     |  Comes back to Fabric's API for run/sudo. This basically reverts\n     |  the effect of calling `mode_local()`.\n     |\n     |  Method resolution order:\n     |      mode_remote\n     |      __mode_switcher\n     |      __builtin__.object\n     |\n     |  Data and other attributes defined here:\n     |\n     |  MODE_KEY = 'CUISINE_MODE_LOCAL'\n     |\n     |  MODE_VALUE = False\n     |\n     |  ----------------------------------------------------------------------\n     |  Methods inherited from __mode_switcher:\n     |\n     |  __enter__(self)\n     |\n     |  __exit__(self, type, value, traceback)\n     |\n     |  __init__(self, value=None)\n     |\n     |  ----------------------------------------------------------------------\n     |  Data descriptors inherited from __mode_switcher:\n     |\n     |  __dict__\n     |      dictionary for instance variables (if defined)\n     |\n     |  __weakref__\n     |      list of weak references to the object (if defined)\n\n    class mode_sudo(__mode_switcher)\n     |  Cuisine functions will be executed with sudo.\n     |\n     |  Method resolution order:\n     |      mode_sudo\n     |      __mode_switcher\n     |      __builtin__.object\n     |\n     |  Data and other attributes defined here:\n     |\n     |  MODE_KEY = 'CUISINE_MODE_SUDO'\n     |\n     |  MODE_VALUE = True\n     |\n     |  ----------------------------------------------------------------------\n     |  Methods inherited from __mode_switcher:\n     |\n     |  __enter__(self)\n     |\n     |  __exit__(self, type, value, traceback)\n     |\n     |  __init__(self, value=None)\n     |\n     |  ----------------------------------------------------------------------\n     |  Data descriptors inherited from __mode_switcher:\n     |\n     |  __dict__\n     |      dictionary for instance variables (if defined)\n     |\n     |  __weakref__\n     |      list of weak references to the object (if defined)\n\n    class mode_user(__mode_switcher)\n     |  Cuisine functions will be executed as the current user.\n     |\n     |  Method resolution order:\n     |      mode_user\n     |      __mode_switcher\n     |      __builtin__.object\n     |\n     |  Data and other attributes defined here:\n     |\n     |  MODE_KEY = 'CUISINE_MODE_SUDO'\n     |\n     |  MODE_VALUE = False\n     |\n     |  ----------------------------------------------------------------------\n     |  Methods inherited from __mode_switcher:\n     |\n     |  __enter__(self)\n     |\n     |  __exit__(self, type, value, traceback)\n     |\n     |  __init__(self, value=None)\n     |\n     |  ----------------------------------------------------------------------\n     |  Data descriptors inherited from __mode_switcher:\n     |\n     |  __dict__\n     |      dictionary for instance variables (if defined)\n     |\n     |  __weakref__\n     |      list of weak references to the object (if defined)\n\nFUNCTIONS\n    apt_get(cmd)\n\n    cd(*args, **kwargs)\n        A wrapper around Fabric's cd to change the local directory if\n        mode is local\n\n    command_check(command)\n        Tests if the given command is available on the system.\n\n    command_ensure(command, package=None)\n        Ensures that the given command is present, if not installs the\n        package with the given name, which is the same as the command by\n        default.\n\n    connect(*args, **kwargs)\n        Sets Fabric's current host to the given host. This is useful when\n        using Cuisine in standalone.\n\n    dir_attribs(*args, **kwargs)\n        Updates the mode/owner/group for the given remote directory.\n\n    dir_ensure(location, recursive=False, mode=None, owner=None, group=None)\n        Ensures that there is a remote directory at the given location,\n        optionally updating its mode/owner/group.\n\n        If we are not updating the owner/group then this can be done as a single\n        ssh call, so use that method, otherwise set owner/group after creation.\n\n    dir_exists(location)\n        Tells if there is a remote directory at the given location.\n\n    dir_remove(*args, **kwargs)\n        Removes a directory\n\n    dispatch(prefix=None)\n        Dispatches the current function to specific implementation. The `prefix`\n        parameter indicates the common option prefix, and the `select_[option]()`\n        function will determine the function suffix.\n\n        For instance the package functions are defined like this:\n\n        {{{\n        @dispatch(\"package\")\n        def package_ensure(...):\n                ...\n        def package_ensure_apt(...):\n                ...\n        def package_ensure_yum(...):\n                ...\n        }}}\n\n        and then when a user does\n\n        {{{\n        cuisine.select_package(\"yum\")\n        cuisine.package_ensure(...)\n        }}}\n\n        then the `dispatch` function will dispatch `package_ensure` to\n        `package_ensure_yum`.\n\n        If your prefix is the first word of the function name before the\n        first `_` then you can simply use `@dispatch` without parameters.\n\n    file_append(*args, **kwargs)\n        Appends the given content to the remote file at the given\n        location, optionally updating its mode/owner/group.\n\n    file_attribs(*args, **kwargs)\n        Updates the mode/owner/group for the remote file at the given\n        location.\n\n    file_attribs_get(*args, **kwargs)\n        Return mode, owner, and group for remote path.\n        Return mode, owner, and group if remote path exists, 'None'\n        otherwise.\n\n    file_backup(*args, **kwargs)\n        Backups the file at the given location in the same directory, appending\n        the given suffix. If `once` is True, then the backup will be skipped if\n        there is already a backup file.\n\n    file_base64(*args, **kwargs)\n        Returns the base64-encoded content of the file at the given location.\n\n    file_ensure(*args, **kwargs)\n        Updates the mode/owner/group for the remote file at the given\n        location.\n\n    file_exists(location)\n        Tests if there is a *remote* file at the given location.\n\n    file_is_dir(location)\n\n    file_is_file(location)\n\n    file_is_link(location)\n\n    file_link(*args, **kwargs)\n        Creates a (symbolic) link between source and destination on the remote host,\n        optionally setting its mode/owner/group.\n\n    file_local_read(*args, **kwargs)\n        Reads a *local* file from the given location, expanding '~' and\n        shell variables.\n\n    file_md5(*args, **kwargs)\n        Returns the MD5 sum (as a hex string) for the remote file at the given location.\n\n    file_read(*args, **kwargs)\n        Reads the *remote* file at the given location, if default is not `None`,\n        default will be returned if the file does not exist.\n\n    file_sha256(*args, **kwargs)\n        Returns the SHA-256 sum (as a hex string) for the remote file at the given location.\n\n    file_unlink(*args, **kwargs)\n\n    file_update(*args, **kwargs)\n        Updates the content of the given by passing the existing\n        content of the remote file at the given location to the 'updater'\n        function. Return true if file content was changed.\n\n        For instance, if you'd like to convert an existing file to all\n        uppercase, simply do:\n\n        >   file_update(\"/etc/myfile\", lambda _:_.upper())\n\n        Or restart service on config change:\n\n        >   if file_update(\"/etc/myfile.cfg\", lambda _: text_ensure_line(_, line)): run(\"service restart\")\n\n    file_upload(*args, **kwargs)\n        Uploads the local file to the remote location only if the remote location does not\n        exists or the content are different.\n\n    file_write(*args, **kwargs)\n        Writes the given content to the file at the given remote\n        location, optionally setting mode/owner/group.\n\n    group_check(*args, **kwargs)\n        Checks if there is a group defined with the given name,\n        returning its information as a\n        '{\"name\":<str>,\"gid\":<str>,\"members\":<list[str]>}' or 'None' if\n        the group does not exists.\n\n    group_check_bsd(name)\n        Checks if there is a group defined with the given name,\n        returning its information as:\n        '{\"name\":<str>,\"gid\":<str>,\"members\":<list[str]>}'\n        or\n        '{\"name\":<str>,\"gid\":<str>}' if the group has no members\n        or\n        'None' if the group does not exists.\n\n    group_check_linux(name)\n        Checks if there is a group defined with the given name,\n        returning its information as a\n        '{\"name\":<str>,\"gid\":<str>,\"members\":<list[str]>}' or 'None' if\n        the group does not exists.\n\n    group_create(*args, **kwargs)\n        Creates a group with the given name, and optionally given gid.\n\n    group_create_bsd(name, gid=None)\n        Creates a group with the given name, and optionally given gid.\n\n    group_create_linux(name, gid=None)\n        Creates a group with the given name, and optionally given gid.\n\n    group_ensure(*args, **kwargs)\n        Ensures that the group with the given name (and optional gid)\n        exists.\n\n    group_ensure_bsd(name, gid=None)\n        Ensures that the group with the given name (and optional gid)\n        exists.\n\n    group_ensure_linux(name, gid=None)\n        Ensures that the group with the given name (and optional gid)\n        exists.\n\n    group_remove(*args, **kwargs)\n        Removes the given group, this implies to take members out the group\n        if there are any.  If wipe=True and the group is a primary one,\n        deletes its user as well.\n\n    group_remove_bsd(group=None, wipe=False)\n        Removes the given group, this implies to take members out the group\n        if there are any.  If wipe=True and the group is a primary one,\n        deletes its user as well.\n\n    group_remove_linux(group=None, wipe=False)\n        Removes the given group, this implies to take members out the group\n        if there are any.  If wipe=True and the group is a primary one,\n        deletes its user as well.\n\n    group_user_add(*args, **kwargs)\n        Adds the given user/list of users to the given group/groups.\n\n    group_user_add_bsd(group, user)\n        Adds the given user/list of users to the given group/groups.\n\n    group_user_add_linux(group, user)\n        Adds the given user/list of users to the given group/groups.\n\n    group_user_check(*args, **kwargs)\n        Checks if the given user is a member of the given group. It\n        will return 'False' if the group does not exist.\n\n    group_user_check_bsd(group, user)\n        Checks if the given user is a member of the given group. It\n        will return 'False' if the group does not exist.\n\n    group_user_check_linux(group, user)\n        Checks if the given user is a member of the given group. It\n        will return 'False' if the group does not exist.\n\n    group_user_del(*args, **kwargs)\n        remove the given user from the given group.\n\n    group_user_del_bsd(group, user)\n        remove the given user from the given group.\n\n    group_user_del_linux(group, user)\n        remove the given user from the given group.\n\n    group_user_ensure(*args, **kwargs)\n        Ensure that a given user is a member of a given group.\n\n    group_user_ensure_bsd(group, user)\n        Ensure that a given user is a member of a given group.\n\n    group_user_ensure_linux(group, user)\n        Ensure that a given user is a member of a given group.\n\n    host(name=<module 'base64' from '/System/Library/Framework...framework/Versions/2.7/lib/python2.7/base64.pyc'>)\n        Returns or sets the host\n\n    is_local()\n\n    is_remote()\n\n    is_sudo()\n\n    locale_check(locale)\n\n    locale_ensure(locale)\n\n    log_call(function, args, kwargs)\n        Logs the given function call\n\n    log_message(message)\n        Logs the given message\n\n    logged(message=None)\n        Logs the invoked function name and arguments.\n\n    mode(key)\n        Queries the given Cuisine mode (ie. MODE_LOCAL, MODE_SUDO)\n\n    options()\n        Retrieves the list of options as a dictionary.\n\n    package_clean(*args, **kwargs)\n        Clean the repository for un-needed files.\n\n    package_clean_apt(package=None)\n\n    package_clean_emerge(package=None)\n\n    package_clean_pacman()\n\n    package_clean_pkgin(package=None)\n\n    package_clean_pkgng(package=None)\n\n    package_clean_yum(package=None)\n\n    package_clean_zypper()\n\n    package_ensure(*args, **kwargs)\n        Tests if the given package is installed, and installs it in\n        case it's not already there. If `update` is true, then the\n        package will be updated if it already exists.\n\n    package_ensure_apt(package, update=False)\n        Ensure apt packages are installed\n\n    package_ensure_emerge(package, update=False)\n\n    package_ensure_pacman(package, update=False)\n        Ensure apt packages are installed\n\n    package_ensure_pkgin(package, update=False)\n\n    package_ensure_pkgng(package, update=False)\n\n    package_ensure_yum(package, update=False)\n\n    package_ensure_zypper(package, update=False)\n\n    package_install(*args, **kwargs)\n        Installs the given package/list of package, optionally updating\n        the package database.\n\n    package_install_apt(package, update=False)\n\n    package_install_emerge(package, update=False)\n\n    package_install_pacman(package, update=False)\n\n    package_install_pkgin(package, update=False)\n\n    package_install_pkgng(package, update=False)\n\n    package_install_yum(package, update=False)\n\n    package_install_zypper(package, update=False)\n\n    package_remove(*args, **kwargs)\n        Remove package and optionally clean unused packages\n\n    package_remove_apt(package, autoclean=False)\n\n    package_remove_emerge(package, autoclean=False)\n\n    package_remove_pacman(package, autoclean=False)\n\n    package_update(*args, **kwargs)\n        Updates the package database (when no argument) or update the package\n        or list of packages given as argument.\n\n    package_update_apt(package=None)\n\n    package_update_emerge(package=None)\n\n    package_update_pacman(package=None)\n\n    package_update_pkgin(package=None)\n\n    package_update_pkgng(package=None)\n\n    package_update_yum(package=None)\n\n    package_update_zypper(package=None)\n\n    package_upgrade(*args, **kwargs)\n        Updates every package present on the system.\n\n    package_upgrade_apt(distupgrade=False)\n\n    package_upgrade_emerge(distupgrade=False)\n\n    package_upgrade_pacman()\n\n    package_upgrade_pkgin()\n\n    package_upgrade_pkgng()\n\n    package_upgrade_yum()\n\n    package_upgrade_zypper()\n\n    process_find(*args, **kwargs)\n        Returns the pids of processes with the given name. If exact is `False`\n        it will return the list of all processes that start with the given\n        `name`.\n\n    process_kill(*args, **kwargs)\n        Kills the given processes with the given name. If exact is `False`\n        it will return the list of all processes that start with the given\n        `name`.\n\n    pwd()\n        Returns the current directory.\n\n    python_package_ensure(*args, **kwargs)\n        Tests if the given python package is installed, and installes it in\n        case it's not already there.\n\n    python_package_ensure_easy_install(package)\n        The \"package\" argument, defines the name of the package that will be ensured.\n\n    python_package_ensure_pip(package=None, r=None, pip=None)\n        The \"package\" argument, defines the name of the package that will be ensured.\n        The argument \"r\" referes to the requirements file that will be used by pip and\n        is equivalent to the \"-r\" parameter of pip.\n        Either \"package\" or \"r\" needs to be provided\n\n    python_package_install(*args, **kwargs)\n        Installs the given python package/list of python packages.\n\n    python_package_install_easy_install(package)\n        The \"package\" argument, defines the name of the package that will be installed.\n\n    python_package_install_pip(package=None, r=None, pip=None)\n        The \"package\" argument, defines the name of the package that will be installed.\n        The argument \"r\" referes to the requirements file that will be used by pip and\n        is equivalent to the \"-r\" parameter of pip.\n        Either \"package\" or \"r\" needs to be provided\n        The optional argument \"E\" is equivalent to the \"-E\" parameter of pip. E is the\n        path to a virtualenv. If provided, it will be added to the pip call.\n\n    python_package_remove(*args, **kwargs)\n        Removes the given python package.\n\n    python_package_remove_easy_install(package)\n        The \"package\" argument, defines the name of the package that will be removed.\n\n    python_package_remove_pip(package, pip=None)\n        The \"package\" argument, defines the name of the package that will be ensured.\n        The argument \"r\" referes to the requirements file that will be used by pip and\n        is equivalent to the \"-r\" parameter of pip.\n        Either \"package\" or \"r\" needs to be provided\n\n    python_package_upgrade(*args, **kwargs)\n        Upgrades the defined python package.\n\n    python_package_upgrade_easy_install(package)\n        The \"package\" argument, defines the name of the package that will be upgraded.\n\n    python_package_upgrade_pip(package)\n        The \"package\" argument, defines the name of the package that will be upgraded.\n\n    repository_ensure_apt(*args, **kwargs)\n\n    repository_ensure_emerge(repository)\n\n    repository_ensure_pacman(repository)\n\n    repository_ensure_pkgin(repository)\n        # This should be simple but I have to think it properly\n\n    repository_ensure_pkgng(repository)\n\n    repository_ensure_yum(repository)\n\n    repository_ensure_zypper(repository)\n\n    rsync(local_path, remote_path, compress=True, progress=False, verbose=True, owner=None, group=None)\n        Rsyncs local to remote, using the connection's host and user.\n\n    run(*args, **kwargs)\n        A wrapper to Fabric's run/sudo commands that takes into account\n        the `MODE_LOCAL` and `MODE_SUDO` modes of Cuisine.\n\n    run_local(command, sudo=False, shell=True, pty=True, combine_stderr=None)\n        Local implementation of fabric.api.run() using subprocess.\n\n        Note: pty option exists for function signature compatibility and is\n        ignored.\n\n    select_group(selection=None)\n\n    select_hash(selection=None)\n\n    select_os_flavour(selection=None)\n\n    select_package(selection=None)\n        Selects the type of package subsystem to use (ex:apt, yum, zypper, pacman, or emerge).\n\n    select_python_package(selection=None)\n\n    select_user(selection=None)\n\n    shell_safe(path)\n        Makes sure that the given path/string is escaped and safe for shell\n\n    ssh_authorize(user, key)\n        Adds the given key to the '.ssh/authorized_keys' for the given\n        user.\n\n    ssh_keygen(user, keytype='dsa')\n        Generates a pair of ssh keys in the user's home .ssh directory.\n\n    ssh_unauthorize(user, key)\n        Removes the given key to the remote '.ssh/authorized_keys' for the given\n        user.\n\n    stringify(value)\n        Turns the given value in a user-friendly string that can be displayed\n\n    sudo(*args, **kwargs)\n        A wrapper to Fabric's run/sudo commands, using the\n        'cuisine.MODE_SUDO' global to tell whether the command should be run as\n        regular user or sudo.\n\n    sudo_password(password=None)\n        Sets the password for the sudo command.\n\n    system_uuid()\n        Gets a machines UUID (Universally Unique Identifier).\n\n    system_uuid_alias_add()\n        Adds system UUID alias to /etc/hosts.\n        Some tools/processes rely/want the hostname as an alias in\n        /etc/hosts e.g. `127.0.0.1 localhost <hostname>`.\n\n    text_detect_eol(text)\n\n    text_ensure_line(text, *lines)\n        Ensures that the given lines are present in the given text,\n        otherwise appends the lines that are not already in the text at\n        the end of it.\n\n    text_get_line(text, predicate)\n        Returns the first line that matches the given predicate.\n\n    text_normalize(text)\n        Converts tabs and spaces to single space and strips the text.\n\n    text_nospace(text)\n        Converts tabs and spaces to single space and strips the text.\n\n    text_replace_line(text, old, new, find=<function <lambda>>, process=<function <lambda>>)\n        Replaces lines equal to 'old' with 'new', returning the new\n        text and the count of replacements.\n\n        Returns: (text, number of lines replaced)\n\n        `process` is a function that will pre-process each line (you can think of\n        it as a normalization function, by default it will return the string as-is),\n        and `find` is the function that will compare the current line to the\n        `old` line.\n\n        The finds the line using `find(process(current_line), process(old_line))`,\n        and if this matches, will insert the new line instead.\n\n    text_strip_margin(text, margin='|')\n        Will strip all the characters before the left margin identified\n        by the `margin` character in your text. For instance\n\n        ```\n                        |Hello, world!\n        ```\n\n        will result in\n\n        ```\n        Hello, world!\n        ```\n\n    text_template(text, variables)\n        Substitutes '${PLACEHOLDER}'s within the text with the\n        corresponding values from variables.\n\n    upstart_ensure(name)\n        Ensures that the given upstart service is running, starting\n        it if necessary.\n\n    upstart_reload(name)\n        Reloads the given service, or starts it if it is not running.\n\n    upstart_restart(name)\n        Tries a `restart` command to the given service, if not successful\n        will stop it and start it. If the service is not started, will start it.\n\n    upstart_stop(name)\n        Ensures that the given upstart service is stopped.\n\n    user(name=<module 'base64' from '/System/Library/Framework...framework/Versions/2.7/lib/python2.7/base64.pyc'>)\n        Returns or sets the user\n\n    user_check(*args, **kwargs)\n        Checks if there is a user defined with the given name,\n        returning its information as a\n        '{\"name\":<str>,\"uid\":<str>,\"gid\":<str>,\"home\":<str>,\"shell\":<str>}'\n        or 'None' if the user does not exists.\n        need_passwd (Boolean) indicates if password to be included in result or not.\n                If set to True it parses 'getent shadow' and needs sudo access\n\n    user_check_bsd(name=None, uid=None, need_passwd=True)\n        Checks if there is a user defined with the given name,\n        returning its information as a\n        '{\"name\":<str>,\"uid\":<str>,\"gid\":<str>,\"home\":<str>,\"shell\":<str>}'\n        or 'None' if the user does not exists.\n        need_passwd (Boolean) indicates if password to be included in result or not.\n                If set to True it parses 'getent passwd' and needs sudo access\n\n    user_check_linux(name=None, uid=None, need_passwd=True)\n        Checks if there is a user defined with the given name,\n        returning its information as a\n        '{\"name\":<str>,\"uid\":<str>,\"gid\":<str>,\"home\":<str>,\"shell\":<str>}'\n        or 'None' if the user does not exists.\n        need_passwd (Boolean) indicates if password to be included in result or not.\n                If set to True it parses 'getent shadow' and needs sudo access\n\n    user_create(*args, **kwargs)\n        Creates the user with the given name, optionally giving a\n        specific password/home/uid/gid/shell.\n\n    user_create_bsd(name, passwd=None, home=None, uid=None, gid=None, shell=None, uid_min=None, uid_max=None, encrypted_passwd=True, fullname=None, createhome=True)\n        Creates the user with the given name, optionally giving a\n        specific password/home/uid/gid/shell.\n\n    user_create_linux(name, passwd=None, home=None, uid=None, gid=None, shell=None, uid_min=None, uid_max=None, encrypted_passwd=True, fullname=None, createhome=True)\n        Creates the user with the given name, optionally giving a\n        specific password/home/uid/gid/shell.\n\n    user_create_passwd_bsd(name, passwd=None, home=None, uid=None, gid=None, shell=None, uid_min=None, uid_max=None, encrypted_passwd=True, fullname=None, createhome=True)\n        Creates the user with the given name, optionally giving a\n        specific password/home/uid/gid/shell.\n\n    user_ensure(*args, **kwargs)\n        Ensures that the given users exists, optionally updating their\n        passwd/home/uid/gid/shell.\n\n    user_ensure_bsd(name, passwd=None, home=None, uid=None, gid=None, shell=None, fullname=None, encrypted_passwd=True)\n        Ensures that the given users exists, optionally updating their\n        passwd/home/uid/gid/shell.\n\n    user_ensure_linux(name, passwd=None, home=None, uid=None, gid=None, shell=None, fullname=None, encrypted_passwd=True)\n        Ensures that the given users exists, optionally updating their\n        passwd/home/uid/gid/shell.\n\n    user_passwd(*args, **kwargs)\n        Sets the given user password. Password is expected to be encrypted by default.\n\n    user_passwd_bsd(name, passwd, encrypted_passwd=True)\n        Sets the given user password. Password is expected to be encrypted by default.\n\n    user_passwd_linux(name, passwd, encrypted_passwd=True)\n        Sets the given user password. Password is expected to be encrypted by default.\n\n    user_remove(*args, **kwargs)\n        Removes the user with the given name, optionally\n        removing the home directory and mail spool.\n\n    user_remove_bsd(name, rmhome=None)\n        Removes the user with the given name, optionally\n        removing the home directory and mail spool.\n\n    user_remove_linux(name, rmhome=None)\n        Removes the user with the given name, optionally\n        removing the home directory and mail spool.\n\nDATA\n    AVAILABLE_OPTIONS = {'group': ['linux', 'bsd'], 'hash': ['python', 'op...\n    CMD_APT_GET = 'DEBIAN_FRONTEND=noninteractive apt-get -q --yes ...ce-c...\n    DEFAULT_OPTIONS = {'group': 'linux', 'hash': 'python', 'os_flavour': '...\n    MAC_EOL = '\\n'\n    MODE_LOCAL = 'CUISINE_MODE_LOCAL'\n    MODE_SUDO = 'CUISINE_MODE_SUDO'\n    OPTION_GROUP = 'CUISINE_OPTION_GROUP'\n    OPTION_HASH = 'CUISINE_OPTION_HASH'\n    OPTION_OS_FLAVOUR = 'CUISINE_OPTION_OS_FLAVOUR'\n    OPTION_PACKAGE = 'CUISINE_OPTION_PACKAGE'\n    OPTION_PYTHON_PACKAGE = 'CUISINE_OPTION_PYTHON_PACKAGE'\n    OPTION_USER = 'CUISINE_OPTION_USER'\n    RE_SPACES = <_sre.SRE_Pattern object>\n    SHELL_ESCAPE = ' \\'\";`|'\n    STATS = None\n    STRINGIFY_MAXLISTSTRING = 20\n    STRINGIFY_MAXSTRING = 80\n    SUDO_PASSWORD = 'CUISINE_SUDO_PASSWORD'\n    UNIX_EOL = '\\n'\n    VERSION = '0.7.10'\n    WINDOWS_EOL = '\\r\\n'\n    with_statement = _Feature((2, 5, 0, 'alpha', 1), (2, 6, 0, 'alpha', 0)...\n```\n", "tags": ["Python", "fabric", "cuisine"]}