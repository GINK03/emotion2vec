{"tags": ["Python", "IPython", "scikit-learn"], "context": " More than 1 year has passed since last update.python\u3067\u3082\u6307\u6298\u308a\u306e\u30e9\u30a4\u30d6\u30e9\u30ea\u3060\u3068\u601d\u3063\u3066\u308b\uff0e\n\u6a5f\u68b0\u5b66\u7fd2\u7528\u306e\u30e9\u30a4\u30d6\u30e9\u30ea\uff0e\u5165\u3063\u3066\u3044\u308b\u5b66\u7fd2\u306f\u4ee5\u4e0b\u306e\u3068\u304a\u308a\uff08\u4e00\u4f8b\uff09\uff0e\n\n\u6559\u5e2b\u3042\u308a\u5b66\u7fd2\n\n\n\u6700\u8fd1\u508d\u6cd5\uff0c\u4e00\u822c\u5316\u7dda\u5f62\u30e2\u30c7\u30eb\uff0c\u7dda\u5f62\u5224\u65ad\u5206\u6790\uff0cSVM\uff0c\u6c7a\u5b9a\u6728\uff0c\u30e9\u30f3\u30c0\u30e0\u30d5\u30a9\u30ec\u30b9\u30c8\uff0c\u30ca\u30a4\u30fc\u30d6\u30d9\u30a4\u30ba\u306a\u3069\n\n\n\u6559\u5e2b\u306a\u3057\u5b66\u7fd2\n\n\n\u6df7\u5408\u30ac\u30a6\u30b9\u30e2\u30c7\u30eb\uff0c\u4e3b\u6210\u5206\u5206\u6790\uff0c\u56e0\u5b50\u5206\u6790\uff0c\u72ec\u7acb\u6210\u5206\u5206\u6790\uff0c\u30af\u30e9\u30b9\u30bf\u30ea\u30f3\u30b0\uff0c\u96a0\u308c\u30de\u30eb\u30b3\u30d5\u30e2\u30c7\u30eb\u306a\u3069\n\n\n\u305d\u306e\u4ed6\n\n\n\u30af\u30ed\u30b9\u30d0\u30ea\u30c7\u30fc\u30b7\u30e7\u30f3\uff0c\u30b0\u30ea\u30c3\u30c9\u30b5\u30fc\u30c1\uff0cAccuracy\u306a\u3069\n\n\n\n\u203b\u30c1\u30fc\u30c8\u30b7\u30fc\u30c8\u306f\u3053\u3063\u3061\n\n\u6559\u5e2b\u3042\u308a\u5b66\u7fd2\n\nSupport Vector Machine\n\n\u56de\u5e30\u5206\u6790\n# \u307e\u305a\u306f\u5b66\u7fd2\u30c7\u30fc\u30bf\u306e\u4f5c\u6210\n>>> import numpy\n>>> np.seed(0) # \u4e71\u6570\u306e\u30b7\u30fc\u30c9\u56fa\u5b9a\n>>> x = numpy.sort(5 * numpy.random.rand(40, 1), axis=0)\n>>> y = numpy.sin(x).ravel()\n>>> y[::5] += 3 * (0.5 - numpy.random.rand(8))\n>>> plot(x, y, 'o')\n\n\u56de\u5e30\u5206\u6790\u306e\u6642\u306fSVR\u3092\u4f7f\u3046\uff08Support Vector Regression\u306e\u7565\u304b\u3068\uff09\uff0e\n\u5f15\u6570\u306e\u30aa\u30d7\u30b7\u30e7\u30f3\u306b\u3064\u3044\u3066\nC (default = 1.0)\n\n\n\u7f70\u5247\u9805\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\n\u5927\u304d\u3044\u3068\u30de\u30fc\u30b8\u30f3\u3092\u8a31\u5bb9\u3057\u306a\u3044\uff08\u30cf\u30fc\u30c9\u30de\u30fc\u30b8\u30f3\uff09\u3001\u5c0f\u3055\u3044\u3068\u8a31\u5bb9\u3059\u308b\n\n\nkernel (default = rbf)\n\n\n\u30ab\u30fc\u30cd\u30eb\u95a2\u6570\u306e\u30bf\u30a4\u30d7\n\u7dda\u5f62: linear, \u591a\u9805\u5f0f: poly, RBF(\u30ac\u30a6\u30b9): rbf, \u30b7\u30b0\u30e2\u30a4\u30c9: sigmoid, \u30d7\u30ec\u30b3\u30f3\u30d4\u30e5\u30fc\u30c6\u30c3\u30c9: precomputed\n\n\ngamma (default = 0.0)\n\n\nRBF\u3001\u591a\u9805\u5f0f\u30ab\u30fc\u30cd\u30eb\u306e\u4fc2\u6570\n\n\ndegree (default = 2)\n\n\nRBF\u3001\u591a\u9805\u5f0f\u3001\u30b7\u30b0\u30e2\u30a4\u30c9\u30ab\u30fc\u30cd\u30eb\u95a2\u6570\u306e\u6b21\u6570\n\n\n>>> from sklearn.svm import SVR\n# \u5b66\u7fd2\u5668\u306e\u4f5c\u6210\n>>> svr_rbf = SVR(kernel='rbf', C=1e3, gamma=0.1)\n>>> svr_lin = SVR(kernel='linear', C=1e3)\n>>> svr_poly = SVR(kernel='poly', C=1e3, degree=2)\n# fit\u3067\u5b66\u7fd2\uff0cpredict\u3067\u4e88\u6e2c\n>>> y_rbf = svr_rbf.fit(x, y).predict(x)\n>>> y_lin = svr_lin.fit(x, y).predict(x)\n>>> y_poly = svr_poly.fit(x, y).predict(x)\n\n\n\u5206\u985e\n\u3044\u308f\u3086\u308bSVM\u306f\u3053\u3063\u3061\u3060\u3068\u601d\u3046\uff0e\nscikit-learn\u3067\u306fSVC(Support Vector Classifier\u306e\u7565)\u3092\u4f7f\u3046\uff0e\n# \u5b66\u7fd2\u30c7\u30fc\u30bf\u4f5c\u6210\n>>> numpy.random.seed(0)\n>>> X = numpy.random.randn(300, 2)\n>>> Y = numpy.logical_xor(X[:,0]>0, X[:,1]>0)\nfrom sklearn.svm import SVC\n# \u5206\u985e\u5668\u306e\u4f5c\u6210\n>>> clf = SVC(kernel='rbf', C=1e3, gamma=0.1)\n# \u5b66\u7fd2\n>>> clf.fit(X, Y)\n# \u6c7a\u5b9a\u95a2\u6570\u307e\u3067\u306e\u8ddd\u96e2\u3092\u8a08\u7b97\n>>> xx, yy = np.meshgrid(linspace(-3, 3, 500), linspace(-3, 3, 500))\n>>> Z = clf.decision_function(np.c_[xx.ravel(), yy.ravel()])\n>>> Z = Z.reshape(xx.shape)\n#\u30b0\u30e9\u30d5\u5316\n>>> imshow(Z, interpolation='nearest', extent=[xx.min(),\n...                                            xx.max(),\n...                                            yy.min(),\n...                                            yy.max()],\n...                                            aspect='auto',\n...                                            origin='lower',\n...                                            cmap=cm.PuOr_r)\n>>> ctr = contour(xx, yy, Z, levels=[0], linetypes='--')\n>>> scatter(X[:, 0], X[:, 1], c=Y, cmap=cm.Paired)\n>>> axis([xx.min(), xx.max(), yy.min(), yy.max()])\n>>> show()\n\nimshow(): \u914d\u5217\u3092\u30b0\u30e9\u30d5\u5316\u3059\u308b\n\u5f15\u6570\u30aa\u30d7\u30b7\u30e7\u30f3:\ninterpolation\n\n\n\u30b0\u30e9\u30d5\u51e6\u7406\u306e\u969b\u306e\u88dc\u5b8c\n\n\n'nearest' - \n\n\n\n\nextent\n\n\n\u7bc4\u56f2\u3092\u6307\u5b9a\n\n\n[\u6c34\u5e73\u65b9\u5411\u306e\u6700\u5c0f\u5024, \u6c34\u5e73\u65b9\u5411\u306e\u6700\u5927\u5024, \u925b\u76f4\u65b9\u5411\u306e\u6700\u5c0f\u5024, \u925b\u76f4\u65b9\u5411\u306e\u6700\u5927\u5024]\n\n\n\n\n\naspect\n\n\n\u30a2\u30b9\u30da\u30af\u30c8\u6bd4\u306e\u8abf\u6574\n\n\norigin\n\n\n\u57fa\u6e96\u70b9\u3092\u8a2d\u5b9a\n\n\n'lower' - Z[0,0]\u3092\u5de6\u4e0b\u306e\u30b3\u30fc\u30ca\u30fc\u306b\u5408\u308f\u305b\u308b\n\n\n\n\ncmap\n\n\n\u30ab\u30e9\u30fc\u30de\u30c3\u30d7\u3092\u6307\u5b9a\n\n\n\n\u6559\u5e2b\u306a\u3057\u5b66\u7fd2\n\nk-means\u6cd5\n\u4e00\u4f8b\u3067k-means\u6cd5\u3092\u793a\u3059\uff0e\n>>> import sklearn.datasets, sklearn.cluster\n>>> #  IRIS\u30c7\u30fc\u30bf\u306e\u8aad\u8fbc\n>>> d = sklearn.datasets.load_iris()\n>>> km = sklearn.cluster.KMeans(3)\n>>> km.fit(d.data)\n>>> for i, e in enumerate(d.data):\n...    scatter(e[0], e[2], c='rgb'[km.labels_[i]])\n\n\n\u305d\u306e\u4ed6\n\u6b8b\u308a\u306f\u516c\u5f0f\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u3067.\n\npython\u3067\u3082\u6307\u6298\u308a\u306e\u30e9\u30a4\u30d6\u30e9\u30ea\u3060\u3068\u601d\u3063\u3066\u308b\uff0e\n\u6a5f\u68b0\u5b66\u7fd2\u7528\u306e\u30e9\u30a4\u30d6\u30e9\u30ea\uff0e\u5165\u3063\u3066\u3044\u308b\u5b66\u7fd2\u306f\u4ee5\u4e0b\u306e\u3068\u304a\u308a\uff08\u4e00\u4f8b\uff09\uff0e\n\n- \u6559\u5e2b\u3042\u308a\u5b66\u7fd2\n    - \u6700\u8fd1\u508d\u6cd5\uff0c\u4e00\u822c\u5316\u7dda\u5f62\u30e2\u30c7\u30eb\uff0c\u7dda\u5f62\u5224\u65ad\u5206\u6790\uff0cSVM\uff0c\u6c7a\u5b9a\u6728\uff0c\u30e9\u30f3\u30c0\u30e0\u30d5\u30a9\u30ec\u30b9\u30c8\uff0c\u30ca\u30a4\u30fc\u30d6\u30d9\u30a4\u30ba\u306a\u3069\n- \u6559\u5e2b\u306a\u3057\u5b66\u7fd2\n    - \u6df7\u5408\u30ac\u30a6\u30b9\u30e2\u30c7\u30eb\uff0c\u4e3b\u6210\u5206\u5206\u6790\uff0c\u56e0\u5b50\u5206\u6790\uff0c\u72ec\u7acb\u6210\u5206\u5206\u6790\uff0c\u30af\u30e9\u30b9\u30bf\u30ea\u30f3\u30b0\uff0c\u96a0\u308c\u30de\u30eb\u30b3\u30d5\u30e2\u30c7\u30eb\u306a\u3069\n- \u305d\u306e\u4ed6\n    - \u30af\u30ed\u30b9\u30d0\u30ea\u30c7\u30fc\u30b7\u30e7\u30f3\uff0c\u30b0\u30ea\u30c3\u30c9\u30b5\u30fc\u30c1\uff0cAccuracy\u306a\u3069\n\n\u203b\u30c1\u30fc\u30c8\u30b7\u30fc\u30c8\u306f[\u3053\u3063\u3061](http://peekaboo-vision.blogspot.jp/2013/01/machine-learning-cheat-sheet-for-scikit.html)\n\n# \u6559\u5e2b\u3042\u308a\u5b66\u7fd2\n\n## Support Vector Machine\n### \u56de\u5e30\u5206\u6790\n```pycon\n# \u307e\u305a\u306f\u5b66\u7fd2\u30c7\u30fc\u30bf\u306e\u4f5c\u6210\n>>> import numpy\n>>> np.seed(0) # \u4e71\u6570\u306e\u30b7\u30fc\u30c9\u56fa\u5b9a\n>>> x = numpy.sort(5 * numpy.random.rand(40, 1), axis=0)\n>>> y = numpy.sin(x).ravel()\n>>> y[::5] += 3 * (0.5 - numpy.random.rand(8))\n>>> plot(x, y, 'o')\n```\n\n\u56de\u5e30\u5206\u6790\u306e\u6642\u306f`SVR`\u3092\u4f7f\u3046\uff08Support Vector Regression\u306e\u7565\u304b\u3068\uff09\uff0e\n\u5f15\u6570\u306e\u30aa\u30d7\u30b7\u30e7\u30f3\u306b\u3064\u3044\u3066\n\n`C (default = 1.0)`\n> * \u7f70\u5247\u9805\u306e\u30d1\u30e9\u30e1\u30fc\u30bf\n> * \u5927\u304d\u3044\u3068\u30de\u30fc\u30b8\u30f3\u3092\u8a31\u5bb9\u3057\u306a\u3044\uff08\u30cf\u30fc\u30c9\u30de\u30fc\u30b8\u30f3\uff09\u3001\u5c0f\u3055\u3044\u3068\u8a31\u5bb9\u3059\u308b\n\n`kernel (default = rbf)`\n> * \u30ab\u30fc\u30cd\u30eb\u95a2\u6570\u306e\u30bf\u30a4\u30d7\n> * \u7dda\u5f62: linear, \u591a\u9805\u5f0f: poly, RBF(\u30ac\u30a6\u30b9): rbf, \u30b7\u30b0\u30e2\u30a4\u30c9: sigmoid, \u30d7\u30ec\u30b3\u30f3\u30d4\u30e5\u30fc\u30c6\u30c3\u30c9: precomputed\n\n`gamma (default = 0.0)`\n> * RBF\u3001\u591a\u9805\u5f0f\u30ab\u30fc\u30cd\u30eb\u306e\u4fc2\u6570\n\n`degree (default = 2)`\n> * RBF\u3001\u591a\u9805\u5f0f\u3001\u30b7\u30b0\u30e2\u30a4\u30c9\u30ab\u30fc\u30cd\u30eb\u95a2\u6570\u306e\u6b21\u6570\n\n```pycon\n>>> from sklearn.svm import SVR\n# \u5b66\u7fd2\u5668\u306e\u4f5c\u6210\n>>> svr_rbf = SVR(kernel='rbf', C=1e3, gamma=0.1)\n>>> svr_lin = SVR(kernel='linear', C=1e3)\n>>> svr_poly = SVR(kernel='poly', C=1e3, degree=2)\n# fit\u3067\u5b66\u7fd2\uff0cpredict\u3067\u4e88\u6e2c\n>>> y_rbf = svr_rbf.fit(x, y).predict(x)\n>>> y_lin = svr_lin.fit(x, y).predict(x)\n>>> y_poly = svr_poly.fit(x, y).predict(x)\n```\n\n### \u5206\u985e\n\n\u3044\u308f\u3086\u308bSVM\u306f\u3053\u3063\u3061\u3060\u3068\u601d\u3046\uff0e\n`scikit-learn`\u3067\u306f`SVC`(Support Vector Classifier\u306e\u7565)\u3092\u4f7f\u3046\uff0e\n\n```pycon\n# \u5b66\u7fd2\u30c7\u30fc\u30bf\u4f5c\u6210\n>>> numpy.random.seed(0)\n>>> X = numpy.random.randn(300, 2)\n>>> Y = numpy.logical_xor(X[:,0]>0, X[:,1]>0)\nfrom sklearn.svm import SVC\n# \u5206\u985e\u5668\u306e\u4f5c\u6210\n>>> clf = SVC(kernel='rbf', C=1e3, gamma=0.1)\n# \u5b66\u7fd2\n>>> clf.fit(X, Y)\n# \u6c7a\u5b9a\u95a2\u6570\u307e\u3067\u306e\u8ddd\u96e2\u3092\u8a08\u7b97\n>>> xx, yy = np.meshgrid(linspace(-3, 3, 500), linspace(-3, 3, 500))\n>>> Z = clf.decision_function(np.c_[xx.ravel(), yy.ravel()])\n>>> Z = Z.reshape(xx.shape)\n#\u30b0\u30e9\u30d5\u5316\n>>> imshow(Z, interpolation='nearest', extent=[xx.min(),\n...                                            xx.max(),\n...                                            yy.min(),\n...                                            yy.max()],\n...                                            aspect='auto',\n...                                            origin='lower',\n...                                            cmap=cm.PuOr_r)\n>>> ctr = contour(xx, yy, Z, levels=[0], linetypes='--')\n>>> scatter(X[:, 0], X[:, 1], c=Y, cmap=cm.Paired)\n>>> axis([xx.min(), xx.max(), yy.min(), yy.max()])\n>>> show()\n```\n\n`imshow()`: \u914d\u5217\u3092\u30b0\u30e9\u30d5\u5316\u3059\u308b\n\u5f15\u6570\u30aa\u30d7\u30b7\u30e7\u30f3:\n`interpolation`\n> * \u30b0\u30e9\u30d5\u51e6\u7406\u306e\u969b\u306e\u88dc\u5b8c\n>    - 'nearest' - \n\n`extent`\n> * \u7bc4\u56f2\u3092\u6307\u5b9a\n>    - [\u6c34\u5e73\u65b9\u5411\u306e\u6700\u5c0f\u5024, \u6c34\u5e73\u65b9\u5411\u306e\u6700\u5927\u5024, \u925b\u76f4\u65b9\u5411\u306e\u6700\u5c0f\u5024, \u925b\u76f4\u65b9\u5411\u306e\u6700\u5927\u5024]  \n\n`aspect`\n> * \u30a2\u30b9\u30da\u30af\u30c8\u6bd4\u306e\u8abf\u6574\n\n`origin`\n> * \u57fa\u6e96\u70b9\u3092\u8a2d\u5b9a\n>    - 'lower' - Z[0,0]\u3092\u5de6\u4e0b\u306e\u30b3\u30fc\u30ca\u30fc\u306b\u5408\u308f\u305b\u308b\n\n`cmap`\n> * \u30ab\u30e9\u30fc\u30de\u30c3\u30d7\u3092\u6307\u5b9a\n\n\n# \u6559\u5e2b\u306a\u3057\u5b66\u7fd2\n\n## k-means\u6cd5\n\u4e00\u4f8b\u3067k-means\u6cd5\u3092\u793a\u3059\uff0e\n\n```pycon\n>>> import sklearn.datasets, sklearn.cluster\n>>> #  IRIS\u30c7\u30fc\u30bf\u306e\u8aad\u8fbc\n>>> d = sklearn.datasets.load_iris()\n>>> km = sklearn.cluster.KMeans(3)\n>>> km.fit(d.data)\n>>> for i, e in enumerate(d.data):\n...    scatter(e[0], e[2], c='rgb'[km.labels_[i]])\n```\n\n#\u305d\u306e\u4ed6\n\n\u6b8b\u308a\u306f[\u516c\u5f0f\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8](http://scikit-learn.org/stable/)\u3067.\n\n"}