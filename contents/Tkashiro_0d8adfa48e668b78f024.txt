{"context": " More than 1 year has passed since last update.\n\n\u6982\u8981\nSublime Text2 \u306b\u306f Emmet\u3092\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3057\u305f\u72b6\u614b\u3067html\u3092\u7de8\u96c6\u6642\u306bcmd + shift + p -> \"Emmet : Update Image Size\"\u3067\u6307\u5b9a\u3057\u305f\u30d1\u30b9\u306e\u753b\u50cf\u3092width\u3068height\u8fbc\u307f\u3067image\u30bf\u30b0\u3092\u633f\u5165\u3057\u3066\u304f\u308c\u308b\u3068\u3044\u3046\u4fbf\u5229\u6a5f\u80fd\u304c\u3042\u308b\u3002\n\nsample.html\n<img src=\"/img/sample.jpg\" height=\"136\" width=\"300\" alt=\"\">\n\n\nRetina\u3092\u8003\u616e\u3057\u305f\u30b9\u30de\u30fc\u30c8\u30d5\u30a9\u30f3\u7528\u306b\u30de\u30fc\u30af\u30a2\u30c3\u30d7\u3057\u3066\u3044\u308b\u969b\u306f\u3053\u306e\u81ea\u52d5\u633f\u5165\u3055\u308c\u308bwidth\u3068height\u306e\u30b5\u30a4\u30ba\u3092\u534a\u5206\u306b\u3059\u308b\u5fc5\u8981\u304c\u3042\u308b\u304c\u305d\u308c\u304c\u3067\u304d\u306a\u3044\u3002\n\u65e2\u5b58\u306e\"Emmet : Update Image Size\"\u3092\u7de8\u96c6\u3057\u3066Retina\u7528\u306b\u534a\u5206\u306e\u30b5\u30a4\u30ba\u3092\u81ea\u52d5\u633f\u5165\u3059\u308b\u65b9\u6cd5\u3092\u8aac\u660e\u3059\u308b\u3002\n\n1. \u30b9\u30af\u30ea\u30d7\u30c8\u30d5\u30a1\u30a4\u30eb\u3092\u958b\u304f\n\n\u30e1\u30cb\u30e5\u30fc\u306ePreferences -> Browse Packages\u2026\u3067Finder\u958b\u304f\n\u958b\u3044\u305fFinder\u306eEmmet -> emmet -> emmet-app.js\u3092\u958b\u304f\n\n\n2. \u7de8\u96c6\n\nupdateImageSizeHTML\u3092\u4e0b\u8a18\u3067\u4e0a\u66f8\u304d\n\nemmet-app.js\nfunction updateImageSizeHTML(editor, isRetina) {\n  var offset = editor.getCaretPos(),\n      rate = isRetina ? 0.5 : 1;\n\n  // find tag from current caret position\n  var info = require('editorUtils').outputInfo(editor);\n  var xmlElem = require('xmlEditTree').parseFromPosition(info.content, offset, true);\n  if (xmlElem && (xmlElem.name() || '').toLowerCase() == 'img') {\n    getImageSizeForSource(editor, xmlElem.value('src'), function(size) {\n      if (size) {\n        var compoundData = xmlElem.range(true);\n        xmlElem.value('width', Math.floor(size.width * rate));\n        xmlElem.value('height', Math.floor(size.height * rate), xmlElem.indexOf('width') + 1);\n\n        require('actionUtils').compoundUpdate(editor, _.extend(compoundData, {\n          data: xmlElem.toString(),\n          caret: offset\n        }));\n      }\n    });\n  }\n}\n\n\n\nupdateImageSizeCSS\u3092\u4e0b\u8a18\u3067\u4e0a\u66f8\u304d\n\nemmet-app.js\nfunction updateImageSizeCSS(editor, isRetina) {\n  var offset = editor.getCaretPos(),\n      rate = isRetina ? 0.5 : 1;\n\n  // find tag from current caret position\n  var info = require('editorUtils').outputInfo(editor);\n  var cssRule = require('cssEditTree').parseFromPosition(info.content, offset, true);\n  if (cssRule) {\n    // check if there is property with image under caret\n    var prop = cssRule.itemFromPosition(offset, true), m;\n    if (prop && (m = /url\\(([\"']?)(.+?)\\1\\)/i.exec(prop.value() || ''))) {\n      getImageSizeForSource(editor, m[2], function(size) {\n        if (size) {\n          var compoundData = cssRule.range(true);\n          cssRule.value('width', Math.floor(size.width * rate) + 'px');\n          cssRule.value('height', Math.floor(size.height * rate) + 'px', cssRule.indexOf('width') + 1);\n\n          require('actionUtils').compoundUpdate(editor, _.extend(compoundData, {\n            data: cssRule.toString(),\n            caret: offset\n          }));\n        }\n      });\n    }\n  }\n}\n\n\n\nupdate_image_size\u306e\u767b\u9332\u90e8\u5206\u306b update_image_size_for_retina \u3092\u8ffd\u8a18\n\nemmet-app.js\nrequire('actions').add('update_image_size', function(editor) {\n  // this action will definitely won\u2019t work in SASS dialect,\n  // but may work in SCSS or LESS\n  if (_.include(['css', 'less', 'scss'], String(editor.getSyntax()))) {\n    updateImageSizeCSS(editor, false);\n  } else {\n    updateImageSizeHTML(editor, false);\n  }\n\n  return true;\n});\n// for Retina \u2605\u4e0b\u8a18\u8ffd\u8a18\nrequire('actions').add('update_image_size_for_retina', function(editor) {\n  // this action will definitely won\u2019t work in SASS dialect,\n  // but may work in SCSS or LESS\n  if (_.include(['css', 'less', 'scss'], String(editor.getSyntax()))) {\n    updateImageSizeCSS(editor, true);\n  } else {\n    updateImageSizeHTML(editor, true);\n  }\n\n  return true;\n});\n\n\n\n3. \u8a2d\u5b9a\u30d5\u30a1\u30a4\u30eb\u3092\u958b\u304f\n\n\u30e1\u30cb\u30e5\u30fc\u306ePreferences -> Browse Packages\u2026\u3067Finder\u958b\u304f\nFinder\u306eEmmet -> Default.sublime-commands\u3092\u958b\u304f\n\n\n4. \u4fee\u6b63\n\nDefault.sublime-commands\n\n    {\n        \"caption\": \"Emmet: Update Image Size for Retina\",\n        \"command\": \"run_emmet_action\",\n        \"args\": {\n            \"action\": \"update_image_size_for_retina\"\n        }\n    },\n\n\n\n5. \u5b9f\u884c\n\nhtml\u30d5\u30a1\u30a4\u30eb\u3092\u958b\u304f\nimg\u30bf\u30b0\u306esrc\u306b\u5b58\u5728\u3059\u308b\u753b\u50cf\u3078\u306e\u30d1\u30b9\u3092\u8a18\u8ff0\n\ncmd + shift + p -> \"Emmet : Update Image Size for Retina\"\u3092\u9078\u629e\u3057\u3066\u3001\u30a8\u30f3\u30bf\u30fc\u30ad\u30fc\u62bc\u4e0b \n\n## \u6982\u8981\nSublime Text2 \u306b\u306f Emmet\u3092\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3057\u305f\u72b6\u614b\u3067html\u3092\u7de8\u96c6\u6642\u306b<code>cmd + shift + p -> \"Emmet : Update Image Size\"</code>\u3067\u6307\u5b9a\u3057\u305f\u30d1\u30b9\u306e\u753b\u50cf\u3092<code>width</code>\u3068<code>height</code>\u8fbc\u307f\u3067image\u30bf\u30b0\u3092\u633f\u5165\u3057\u3066\u304f\u308c\u308b\u3068\u3044\u3046\u4fbf\u5229\u6a5f\u80fd\u304c\u3042\u308b\u3002\n\n```html:sample.html\n<img src=\"/img/sample.jpg\" height=\"136\" width=\"300\" alt=\"\">\n```\n\nRetina\u3092\u8003\u616e\u3057\u305f\u30b9\u30de\u30fc\u30c8\u30d5\u30a9\u30f3\u7528\u306b\u30de\u30fc\u30af\u30a2\u30c3\u30d7\u3057\u3066\u3044\u308b\u969b\u306f\u3053\u306e\u81ea\u52d5\u633f\u5165\u3055\u308c\u308b<code>width</code>\u3068<code>height</code>\u306e\u30b5\u30a4\u30ba\u3092\u534a\u5206\u306b\u3059\u308b\u5fc5\u8981\u304c\u3042\u308b\u304c\u305d\u308c\u304c\u3067\u304d\u306a\u3044\u3002\n\n\u65e2\u5b58\u306e<code>\"Emmet : Update Image Size\"</code>\u3092\u7de8\u96c6\u3057\u3066Retina\u7528\u306b\u534a\u5206\u306e\u30b5\u30a4\u30ba\u3092\u81ea\u52d5\u633f\u5165\u3059\u308b\u65b9\u6cd5\u3092\u8aac\u660e\u3059\u308b\u3002\n\n## 1. \u30b9\u30af\u30ea\u30d7\u30c8\u30d5\u30a1\u30a4\u30eb\u3092\u958b\u304f\n1. \u30e1\u30cb\u30e5\u30fc\u306e<code>Preferences -> Browse Packages\u2026</code>\u3067Finder\u958b\u304f\n2. \u958b\u3044\u305fFinder\u306e<code>Emmet -> emmet -> emmet-app.js</code>\u3092\u958b\u304f\n\n## 2. \u7de8\u96c6\n\n### updateImageSizeHTML\u3092\u4e0b\u8a18\u3067\u4e0a\u66f8\u304d\n\n```javascript:emmet-app.js\nfunction updateImageSizeHTML(editor, isRetina) {\n  var offset = editor.getCaretPos(),\n      rate = isRetina ? 0.5 : 1;\n\n  // find tag from current caret position\n  var info = require('editorUtils').outputInfo(editor);\n  var xmlElem = require('xmlEditTree').parseFromPosition(info.content, offset, true);\n  if (xmlElem && (xmlElem.name() || '').toLowerCase() == 'img') {\n    getImageSizeForSource(editor, xmlElem.value('src'), function(size) {\n      if (size) {\n        var compoundData = xmlElem.range(true);\n        xmlElem.value('width', Math.floor(size.width * rate));\n        xmlElem.value('height', Math.floor(size.height * rate), xmlElem.indexOf('width') + 1);\n\n        require('actionUtils').compoundUpdate(editor, _.extend(compoundData, {\n          data: xmlElem.toString(),\n          caret: offset\n        }));\n      }\n    });\n  }\n}\n```\n\n### updateImageSizeCSS\u3092\u4e0b\u8a18\u3067\u4e0a\u66f8\u304d\n\n```javascript:emmet-app.js\nfunction updateImageSizeCSS(editor, isRetina) {\n  var offset = editor.getCaretPos(),\n      rate = isRetina ? 0.5 : 1;\n\n  // find tag from current caret position\n  var info = require('editorUtils').outputInfo(editor);\n  var cssRule = require('cssEditTree').parseFromPosition(info.content, offset, true);\n  if (cssRule) {\n    // check if there is property with image under caret\n    var prop = cssRule.itemFromPosition(offset, true), m;\n    if (prop && (m = /url\\(([\"']?)(.+?)\\1\\)/i.exec(prop.value() || ''))) {\n      getImageSizeForSource(editor, m[2], function(size) {\n        if (size) {\n          var compoundData = cssRule.range(true);\n          cssRule.value('width', Math.floor(size.width * rate) + 'px');\n          cssRule.value('height', Math.floor(size.height * rate) + 'px', cssRule.indexOf('width') + 1);\n\n          require('actionUtils').compoundUpdate(editor, _.extend(compoundData, {\n            data: cssRule.toString(),\n            caret: offset\n          }));\n        }\n      });\n    }\n  }\n}\n```\n\n### <code>update_image_size</code>\u306e\u767b\u9332\u90e8\u5206\u306b<code> update_image_size_for_retina </code>\u3092\u8ffd\u8a18\n\n```javascript:emmet-app.js\nrequire('actions').add('update_image_size', function(editor) {\n  // this action will definitely won\u2019t work in SASS dialect,\n  // but may work in SCSS or LESS\n  if (_.include(['css', 'less', 'scss'], String(editor.getSyntax()))) {\n    updateImageSizeCSS(editor, false);\n  } else {\n    updateImageSizeHTML(editor, false);\n  }\n\n  return true;\n});\n// for Retina \u2605\u4e0b\u8a18\u8ffd\u8a18\nrequire('actions').add('update_image_size_for_retina', function(editor) {\n  // this action will definitely won\u2019t work in SASS dialect,\n  // but may work in SCSS or LESS\n  if (_.include(['css', 'less', 'scss'], String(editor.getSyntax()))) {\n    updateImageSizeCSS(editor, true);\n  } else {\n    updateImageSizeHTML(editor, true);\n  }\n\n  return true;\n});\n```\n\n## 3. \u8a2d\u5b9a\u30d5\u30a1\u30a4\u30eb\u3092\u958b\u304f\n1. \u30e1\u30cb\u30e5\u30fc\u306e<code>Preferences -> Browse Packages\u2026</code>\u3067Finder\u958b\u304f\n2. Finder\u306e<code>Emmet -> Default.sublime-commands</code>\u3092\u958b\u304f\n\n## 4. \u4fee\u6b63\n\n```javascript:Default.sublime-commands\n\n\t{\n\t\t\"caption\": \"Emmet: Update Image Size for Retina\",\n\t\t\"command\": \"run_emmet_action\",\n\t\t\"args\": {\n\t\t\t\"action\": \"update_image_size_for_retina\"\n\t\t}\n\t},\n```\n\n## 5. \u5b9f\u884c\n\n1. html\u30d5\u30a1\u30a4\u30eb\u3092\u958b\u304f\n2. img\u30bf\u30b0\u306esrc\u306b\u5b58\u5728\u3059\u308b\u753b\u50cf\u3078\u306e\u30d1\u30b9\u3092\u8a18\u8ff0\n3. <code>cmd + shift + p -> \"Emmet : Update Image Size for Retina\"</code>\u3092\u9078\u629e\u3057\u3066\u3001\u30a8\u30f3\u30bf\u30fc\u30ad\u30fc\u62bc\u4e0b \n", "tags": ["SublimeText2", "smartPhone"]}