{"context": " More than 1 year has passed since last update.Adventar\u306ePython Advent Calendar 2015 25\u65e5\u76ee\u306e\u8a18\u4e8b\u3067\u3059\u3002\n\n\u306f\u3058\u3081\u306b\n\u672c\u8a18\u4e8b\u3067\u306fLuigi\u3092\u7528\u3044\u305f\u30b8\u30e7\u30d6\u30d1\u30a4\u30d7\u30e9\u30a4\u30f3\u69cb\u7bc9\u306e\u7c21\u5358\u306a\u5b9f\u4f8b\u3068\u3057\u3066\u3001Pytest\u306e\u30c6\u30b9\u30c8\u518d\u5b9f\u884c\u306b\u3064\u3044\u3066\u8a18\u8ff0\u3059\u308b\u3002\n\nLuigi\u3068\u306f\nLuigi\u306fPython\u88fd\u306e\u30b8\u30e7\u30d6\u30d1\u30a4\u30d7\u30e9\u30a4\u30f3\u69cb\u7bc9\u30c4\u30fc\u30eb\u3067\u3042\u308b\u3002Luigi\u3092\u7528\u3044\u308b\u3053\u3068\u3067\u3001\u30b8\u30e7\u30d6\u30d1\u30a4\u30d7\u30e9\u30a4\u30f3\u69cb\u7bc9\u306b\u5fc5\u8981\u306a\u4ee5\u4e0b\u306e\u4e8b\u67c4\u3092Python\u30b3\u30fc\u30c9\u3067\u8868\u73fe\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u308b\u3002\n\n\u30bf\u30b9\u30af\u306e\u5b9f\u884c\n\u30bf\u30b9\u30af\u9593\u306e\u4f9d\u5b58\u95a2\u4fc2\n\u30bf\u30b9\u30af\u5b9f\u884c\u7d50\u679c\u306e\u4fdd\u5b58\n\nHadoop\u3084Spark\u306e\u30b8\u30e7\u30d6\u5b9f\u884c\u3001\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u304b\u3089\u306e/\u3078\u306e\u30c7\u30fc\u30bf\u30ed\u30fc\u30c9\u306a\u3069\u3001\u305d\u308c\u306a\u308a\u306b\u6642\u9593\u304c\u304b\u304b\u308b\u30bf\u30b9\u30af\u3092\u69cb\u6210\u8981\u7d20\u3068\u3057\u305f\u30b8\u30e7\u30d6\u30d1\u30a4\u30d7\u30e9\u30a4\u30f3\u306e\u69cb\u7bc9\u3092\u30e1\u30a4\u30f3\u30bf\u30fc\u30b2\u30c3\u30c8\u3068\u3057\u3066\u3044\u308b\u3088\u3046\u3067\u3001\u305d\u308c\u3089\u306e\u30c4\u30fc\u30eb\u3068\u9023\u643a\u3059\u308b\u305f\u3081\u306e\u30e2\u30b8\u30e5\u30fc\u30eb\u306f\u30c7\u30d5\u30a9\u30eb\u30c8\u3067\u30b5\u30dd\u30fc\u30c8\u3055\u308c\u3066\u3044\u308b(http://luigi.readthedocs.org/en/stable/api/luigi.contrib.html#submodules)\u3002\n\u4eca\u56de\u53d6\u308a\u3042\u3052\u308b\u4f8b\u3067\u306f\u725b\u5200\u3067\u3042\u308b\u306e\u306f\u7d1b\u308c\u3082\u306a\u3044\u4e8b\u5b9f\u3060\u304c\u3001\u6c7a\u3081\u3089\u308c\u305f\u67a0\u7d44\u307f\u306b\u4e57\u3063\u3066\u30d1\u30a4\u30d7\u30e9\u30a4\u30f3\u306e\u62e1\u5f35\u304c\u3067\u304d\u308b\u3001\u3068\u3044\u3046\u70b9\u306b\u30e1\u30ea\u30c3\u30c8\u3092\u611f\u3058\u3001\u6163\u308c\u308b\u610f\u5473\u3082\u8fbc\u3081\u3066\u4f7f\u7528\u3057\u3066\u307f\u308b\u3053\u3068\u306b\u3057\u305f\u3002\n\n\u30bf\u30b9\u30af\u306e\u5b9a\u7fa9\nLuigi\u306e\u30bf\u30b9\u30af\u5b9a\u7fa9\u306e\u57fa\u672c\u306f\u4ee5\u4e0b\u306e\u901a\u308a\u3067\u3042\u308b\u3002\n\n\nluigi.Task\u3092\u7d99\u627f\u3057\u305f\u30af\u30e9\u30b9\u3092\u5b9a\u7fa9\u3059\u308b\u3002\n\nluigi.Task\u3092\u7d99\u627f\u3057\u305f\u30af\u30e9\u30b9\u3067\u4ee5\u4e0b\u306e\u30e1\u30bd\u30c3\u30c9\u3092\u5b9a\u7fa9\u3059\u308b\u3002\n\n\nrun(self):\u30bf\u30b9\u30af\u306e\u5b9f\u884c\u51e6\u7406\nrequires(self):\u30bf\u30b9\u30af\u306e\u4f9d\u5b58\u95a2\u4fc2\noutput(self):\u30bf\u30b9\u30af\u5b9f\u884c\u7d50\u679c\u306e\u4fdd\u5b58\u51e6\u7406\n\n\n\u30bf\u30b9\u30af\u306b\u5f15\u6570\u304c\u5fc5\u8981\u306a\u5834\u5408\u306f\u3001luigi.Parameter()\u3042\u308b\u3044\u306fluigi.<\u578b:ex. Int>Parameter()\u3092\u30af\u30e9\u30b9\u5909\u6570\u306b\u6301\u305f\u305b\u308b\u3002\n\n\u4ee5\u4e0b\u306f\u3001pytest\u5b9f\u884c\u306e\u30bf\u30b9\u30af\u5b9a\u7fa9\u3067\u3042\u308b\u3002\n\npytest\u5b9f\u884c\u306e\u30bf\u30b9\u30af\nroot = os.path.normpath(os.path.abspath(os.path.dirname(__file__)))\n\nclass PytestTask(luigi.Task):\n\n    # \u30bf\u30b9\u30af\u306e\u5f15\u6570\n    pytest_args = luigi.Parameter(default='tests')\n    repeat_id = luigi.IntParameter()\n\n    # \u30bf\u30b9\u30af\u306e\u5b9f\u884c\u51e6\u7406\n    def run(self):\n        cmd = ['py.test']\n        cmd.extend(self.pytest_args.split(' '))\n\n        os.chdir(root)\n        process = Popen(cmd, stdout=PIPE, stderr=PIPE)\n        for line in iter(process.stdout.readline, ''):\n            print(line.rstrip())\n\n        # self.output()\u304b\u3089\u3001\u5b9f\u884c\u7d50\u679c\u3092\u66f8\u304d\u8fbc\u3080\u30b9\u30c8\u30ea\u30fc\u30e0\u3092\u53d6\u5f97\u3067\u304d\u308b\u3002\n        out = self.output().open('w')\n        with open(lastfailed) as f:\n            out.write(f.read())\n        out.close()\n\n    # \u30bf\u30b9\u30af\u306e\u4f9d\u5b58\u95a2\u4fc2\n    # \u4f9d\u5b58\u3059\u308b\u30bf\u30b9\u30af\u306e\u30ea\u30b9\u30c8\u3092\u8fd4\u3059\u3002(ex. return [A(), B()])\n    # \u4eca\u56de\u306f\u8af8\u4e8b\u60c5\u304b\u3089\u7a7a\u306e\u30ea\u30b9\u30c8(\n    def requires(self):\n        return []\n\n    # \u30bf\u30b9\u30af\u306e\u5b9f\u884c\u7d50\u679c\u306e\u4fdd\u5b58\u51e6\u7406\n    # luigi.Target\u304b\u3089\u6d3e\u751f\u3057\u305f\u30af\u30e9\u30b9\u3092\u8fd4\u3059\u3002\u4ee5\u4e0b\u306e\u4f8b\u3067\u306f\u30ed\u30fc\u30ab\u30eb\u306e\u30d5\u30a1\u30a4\u30eb\u30b7\u30b9\u30c6\u30e0\u306b\u5b9f\u884c\u7d50\u679c\u3092\u4fdd\u5b58\u3059\u308b\n    # (ex) http://luigi.readthedocs.org/en/stable/api/luigi.html#luigi.Target\n    def output(self):\n        return luigi.LocalTarget('test_repeat_{0}.txt'.format(self.repeat_id))\n\n\n\n\u30bf\u30b9\u30af\u306e\u4f9d\u5b58\u95a2\u4fc2\u306e\u52d5\u7684\u5b9a\u7fa9\n\u4eca\u56de\u306f\u3001\u305f\u3060\u5358\u306bLuigi\u304b\u3089pytest\u3092\u5b9f\u884c\u3059\u308b\u3060\u3051\u3067\u306a\u304f\u3001\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u8981\u4ef6\u3092\u6e80\u305f\u3057\u81ea\u52d5\u7684\u306b\u30c6\u30b9\u30c8\u306e\u518d\u5b9f\u884c\u3092\u304b\u3051\u308b\u30d1\u30a4\u30d7\u30e9\u30a4\u30f3\u3092\u69cb\u7bc9\u3057\u305f\u304b\u3063\u305f\u3002\n\n\u30c6\u30b9\u30c8\u304c\u5168\u4ef6\u6210\u529f\u3057\u3066\u3044\u306a\u3044\u5834\u5408\u306f\u518d\u5b9f\u884c\u3059\u308b\u3002\u518d\u5b9f\u884c\u3059\u308b\u56de\u6570\u306e\u4e0a\u9650\u306f\u5f15\u6570\u3067\u4e0e\u3048\u308b\u3002\n\u30c6\u30b9\u30c8\u306e\u518d\u5b9f\u884c\u306e\u969b\u306b\u306f\u3001--lf\u30aa\u30d7\u30b7\u30e7\u30f3\u3092\u7528\u3044\u3066\u5931\u6557\u3057\u305f\u30c6\u30b9\u30c8\u306e\u307f\u5b9f\u884c\u3059\u308b\u3002(\u53c2\u8003)\n\nLuigi\u306f\u524d\u8ff0\u3057\u305frequires(self)\u306b\u3088\u308b\u9759\u7684\u306a\u4f9d\u5b58\u95a2\u4fc2\u306e\u8ffd\u52a0\u306e\u307f\u306a\u3089\u305a\u3001\u6761\u4ef6\u306b\u5fdc\u3058\u3066\u52d5\u7684\u306b\u30bf\u30b9\u30af\u306e\u4f9d\u5b58\u95a2\u4fc2\u3092\u8ffd\u52a0\u3059\u308b\u3053\u3068\u3082\u3067\u304d\u308b\u3002\n\n\u30c6\u30b9\u30c8\u304c\u524d\u4ef6\u6210\u529f\u3057\u306a\u304b\u3063\u305f\u5834\u5408\u306b\u518d\u5b9f\u884c\u3059\u308b\u30bf\u30b9\u30af\n# \u524d\u56de\u5b9f\u884c\u306e\u969b\u306b\u5931\u6557\u3057\u305f\u30c6\u30b9\u30c8\u304c\u8a18\u9332\u3055\u308c\u3066\u3044\u308b\u30d5\u30a1\u30a4\u30eb\nlastfailed = '.cache/v/cache/lastfailed'\n\nclass RepeatPytestTask(luigi.Task):\n\n    pytest_args = luigi.Parameter(default='tests')\n    repeat = luigi.IntParameter(default=1)\n\n    def is_success(self, target):\n        i = target.open('r')\n        # \u5168\u4ef6\u6210\u529f\u3057\u3066\u3044\u308b\u5834\u5408\u3001\u7a7a\u306e\u30c7\u30a3\u30af\u30b7\u30e7\u30ca\u30ea\u304c\u751f\u6210\u3055\u308c\u308b\n        success = bool(not json.load(i))\n        i.close()\n        return success\n\n    def run(self):\n       # \u4e00\u56de\u5b9f\u884c\u3057\u3066\u6210\u529f\u3057\u305f\u3089\u7d42\u4e86\n       out = self.output().open('w')\n       target = yield PytestTask(\n               pytest_args=self.pytest_args, \n               repeat_id=1)\n       if self.is_success(target):\n           out.write('success')\n           out.close()\n           return\n\n       # \u4e8c\u56de\u76ee\u4ee5\u964d\u306flf\u30aa\u30d7\u30b7\u30e7\u30f3\u4ed8\u304d\u3067\u5b9f\u884c\n       for i in range(0, self.repeat - 1):\n           # yield <\u30bf\u30b9\u30af\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9> \u3067\u52d5\u7684\u306a\u4f9d\u5b58\u95a2\u4fc2\u3092\u8ffd\u52a0\u3067\u304d\u308b\n           target = yield PytestTask(\n                   pytest_args='{0} --lf'.format(self.pytest_args), \n                   repeat_id=i + 2)\n           # \u6210\u529f\u3057\u305f\u6642\u70b9\u3067\u5b9f\u884c\u7d42\u4e86\n           if self.is_success(target):\n               out.write('success')\n               out.close()\n               return\n       # \u6700\u5f8c\u307e\u3067\u5931\u6557\u304c\u6b8b\u3063\u305f\n       out.write('failure')\n       out.close()\n\n    def output(self):\n        return luigi.LocalTarget('test_repeats.txt')\n\n\n\n\u30d1\u30a4\u30d7\u30e9\u30a4\u30f3\u306e\u5b9f\u884c\n\u524d\u8ff0\u306e\u30bf\u30b9\u30af\u5b9a\u7fa9\u306b\u52a0\u3048\u3001\u30d1\u30a4\u30d7\u30e9\u30a4\u30f3\u306e\u8d77\u52d5\u51e6\u7406\u3092\u52a0\u3048\u305f\u30d7\u30ed\u30b0\u30e9\u30e0\u5168\u4f53\u304c\u4ee5\u4e0b\u3067\u3042\u308b\u3002\n\npytest_pipeline.py\nimport json\nimport os\nimport sys\nfrom contextlib import contextmanager\nfrom subprocess import Popen, PIPE\n\nimport luigi\n\nroot = os.path.normpath(os.path.abspath(os.path.dirname(__file__)))\nlastfailed = '.cache/v/cache/lastfailed'\n\nclass PytestTask(luigi.Task):\n\n    pytest_args = luigi.Parameter(default='tests')\n    repeat_id = luigi.IntParameter()\n\n    def output(self):\n        return luigi.LocalTarget('test_repeat_{0}.txt'.format(self.repeat_id))\n\n    def run(self):\n        cmd = ['py.test']\n        cmd.extend(self.pytest_args.split(' '))\n\n        os.chdir(root)\n        process = Popen(cmd, stdout=PIPE, stderr=PIPE)\n        for line in iter(process.stdout.readline, ''):\n            print(line.rstrip())\n\n        out = self.output().open('w')\n        with open(lastfailed) as f:\n            out.write(f.read())\n        out.close()\n\nclass RepeatPytestTask(luigi.Task):\n\n    pytest_args = luigi.Parameter(default='tests')\n    # \u7e70\u308a\u8fd4\u3057\u56de\u6570\u306f\u5f15\u6570\u3068\u3057\u3066\u5916\u90e8\u304b\u3089\u4e0e\u3048\u308b\n    repeat = luigi.IntParameter(default=1)\n\n    def is_success(self, target):\n        i = target.open('r')\n        success = bool(not json.load(i))\n        i.close()\n        return success\n\n    def output(self):\n        return luigi.LocalTarget('test_repeats.txt')\n\n    def run(self):\n       out = self.output().open('w')\n       target = yield PytestTask(\n               pytest_args=self.pytest_args, \n               repeat_id=1)\n       if self.is_success(target):\n           out.write('success')\n           out.close()\n           return\n\n       for i in range(0, self.repeat - 1):\n           target = yield PytestTask(\n                   pytest_args='{0} --lf'.format(self.pytest_args), \n                   repeat_id=i + 2)\n           if self.is_success(target):\n               out.write('success')\n               out.close()\n               return\n       out.write('failure')\n       out.close()\n\n# \u30d1\u30a4\u30d7\u30e9\u30a4\u30f3\u306e\u8d77\u52d5\u51e6\u7406\nif __name__ == '__main__':\n    argv = ['RepeatPytestTask']\n    if len(sys.argv) > 1:\n        argv.extend(sys.argv[1:])\n    luigi.run(argv)\n\n\n\u4e0a\u8a18\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u306b\u7e70\u308a\u8fd4\u3057\u56de\u6570(--repeat)\u3092\u4e0e\u3048\u3066\u5b9f\u884c\u3059\u308b\u3053\u3068\u3067\u3001\u5931\u6557\u6642\u306b\u81ea\u52d5\u3067\u518d\u5b9f\u884c\u3059\u308b\u30c6\u30b9\u30c8\u306e\u30d1\u30a4\u30d7\u30e9\u30a4\u30f3\u304c\u5b9f\u73fe\u3067\u304d\u308b\u3002\n\n\u30b8\u30e7\u30d6\u30d1\u30a4\u30d7\u30e9\u30a4\u30f3\u306e\u5b9f\u884c\n# Luigi\u306foutput(self)\u304c\u51fa\u529b\u3055\u308c\u3066\u3044\u308b=\u30bf\u30b9\u30af\u304c\u7d42\u4e86\u3057\u3066\u3044\u308b\u3068\u898b\u306a\u3059\u3002\n# \u6700\u521d\u304b\u3089\u30bf\u30b9\u30af\u3092\u5b9f\u884c\u3057\u305f\u3044\u5834\u5408\u306f\u5168\u3066\u306e\u30a2\u30a6\u30c8\u30d7\u30c3\u30c8\u3092\u6d88\u53bb\u3059\u308b\u3002\n$ rm -rf test_repeat_1.txt test_repeats.txt test_repeat_2.txt\n\n# \u5927\u898f\u6a21\u51e6\u7406\u306e\u5834\u5408\u3001\u30bf\u30b9\u30af\u30b9\u30b1\u30b8\u30e5\u30fc\u30e9\u3092\u5225\u9014\u69cb\u7bc9\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u308b\u3002\n# \u4eca\u56de\u306f\u5c0f\u3055\u3044\u51e6\u7406\u306a\u306e\u3067\u30ed\u30fc\u30ab\u30eb\u3067\u30b9\u30b1\u30b8\u30e5\u30fc\u30eb\u3059\u308b(--local-scheduler\u30aa\u30d7\u30b7\u30e7\u30f3)\n# http://luigi.readthedocs.org/en/stable/central_scheduler.html?highlight=scheduler%20server\n$ python pytest_pipeline.py --local-scheduler --repeat 3\n\n\n[Adventar](http://www.adventar.org/)\u306e[Python Advent Calendar 2015](http://www.adventar.org/calendars/846) 25\u65e5\u76ee\u306e\u8a18\u4e8b\u3067\u3059\u3002\n\n# \u306f\u3058\u3081\u306b\n\n\u672c\u8a18\u4e8b\u3067\u306fLuigi\u3092\u7528\u3044\u305f\u30b8\u30e7\u30d6\u30d1\u30a4\u30d7\u30e9\u30a4\u30f3\u69cb\u7bc9\u306e\u7c21\u5358\u306a\u5b9f\u4f8b\u3068\u3057\u3066\u3001Pytest\u306e\u30c6\u30b9\u30c8\u518d\u5b9f\u884c\u306b\u3064\u3044\u3066\u8a18\u8ff0\u3059\u308b\u3002\n\n# Luigi\u3068\u306f\n\n[Luigi](https://github.com/spotify/luigi)\u306fPython\u88fd\u306e\u30b8\u30e7\u30d6\u30d1\u30a4\u30d7\u30e9\u30a4\u30f3\u69cb\u7bc9\u30c4\u30fc\u30eb\u3067\u3042\u308b\u3002Luigi\u3092\u7528\u3044\u308b\u3053\u3068\u3067\u3001\u30b8\u30e7\u30d6\u30d1\u30a4\u30d7\u30e9\u30a4\u30f3\u69cb\u7bc9\u306b\u5fc5\u8981\u306a\u4ee5\u4e0b\u306e\u4e8b\u67c4\u3092Python\u30b3\u30fc\u30c9\u3067\u8868\u73fe\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u308b\u3002\n\n- \u30bf\u30b9\u30af\u306e\u5b9f\u884c\n- \u30bf\u30b9\u30af\u9593\u306e\u4f9d\u5b58\u95a2\u4fc2\n- \u30bf\u30b9\u30af\u5b9f\u884c\u7d50\u679c\u306e\u4fdd\u5b58\n\nHadoop\u3084Spark\u306e\u30b8\u30e7\u30d6\u5b9f\u884c\u3001\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u304b\u3089\u306e/\u3078\u306e\u30c7\u30fc\u30bf\u30ed\u30fc\u30c9\u306a\u3069\u3001\u305d\u308c\u306a\u308a\u306b\u6642\u9593\u304c\u304b\u304b\u308b\u30bf\u30b9\u30af\u3092\u69cb\u6210\u8981\u7d20\u3068\u3057\u305f\u30b8\u30e7\u30d6\u30d1\u30a4\u30d7\u30e9\u30a4\u30f3\u306e\u69cb\u7bc9\u3092\u30e1\u30a4\u30f3\u30bf\u30fc\u30b2\u30c3\u30c8\u3068\u3057\u3066\u3044\u308b\u3088\u3046\u3067\u3001\u305d\u308c\u3089\u306e\u30c4\u30fc\u30eb\u3068\u9023\u643a\u3059\u308b\u305f\u3081\u306e\u30e2\u30b8\u30e5\u30fc\u30eb\u306f\u30c7\u30d5\u30a9\u30eb\u30c8\u3067\u30b5\u30dd\u30fc\u30c8\u3055\u308c\u3066\u3044\u308b(http://luigi.readthedocs.org/en/stable/api/luigi.contrib.html#submodules)\u3002\n\n\u4eca\u56de\u53d6\u308a\u3042\u3052\u308b\u4f8b\u3067\u306f\u725b\u5200\u3067\u3042\u308b\u306e\u306f\u7d1b\u308c\u3082\u306a\u3044\u4e8b\u5b9f\u3060\u304c\u3001\u6c7a\u3081\u3089\u308c\u305f\u67a0\u7d44\u307f\u306b\u4e57\u3063\u3066\u30d1\u30a4\u30d7\u30e9\u30a4\u30f3\u306e\u62e1\u5f35\u304c\u3067\u304d\u308b\u3001\u3068\u3044\u3046\u70b9\u306b\u30e1\u30ea\u30c3\u30c8\u3092\u611f\u3058\u3001\u6163\u308c\u308b\u610f\u5473\u3082\u8fbc\u3081\u3066\u4f7f\u7528\u3057\u3066\u307f\u308b\u3053\u3068\u306b\u3057\u305f\u3002\n\n# \u30bf\u30b9\u30af\u306e\u5b9a\u7fa9\n\nLuigi\u306e\u30bf\u30b9\u30af\u5b9a\u7fa9\u306e\u57fa\u672c\u306f\u4ee5\u4e0b\u306e\u901a\u308a\u3067\u3042\u308b\u3002\n\n- `luigi.Task`\u3092\u7d99\u627f\u3057\u305f\u30af\u30e9\u30b9\u3092\u5b9a\u7fa9\u3059\u308b\u3002\n- `luigi.Task`\u3092\u7d99\u627f\u3057\u305f\u30af\u30e9\u30b9\u3067\u4ee5\u4e0b\u306e\u30e1\u30bd\u30c3\u30c9\u3092\u5b9a\u7fa9\u3059\u308b\u3002\n    - run(self):\u30bf\u30b9\u30af\u306e\u5b9f\u884c\u51e6\u7406\n    - requires(self):\u30bf\u30b9\u30af\u306e\u4f9d\u5b58\u95a2\u4fc2\n    - output(self):\u30bf\u30b9\u30af\u5b9f\u884c\u7d50\u679c\u306e\u4fdd\u5b58\u51e6\u7406\n- \u30bf\u30b9\u30af\u306b\u5f15\u6570\u304c\u5fc5\u8981\u306a\u5834\u5408\u306f\u3001`luigi.Parameter()`\u3042\u308b\u3044\u306f`luigi.<\u578b:ex. Int>Parameter()`\u3092\u30af\u30e9\u30b9\u5909\u6570\u306b\u6301\u305f\u305b\u308b\u3002\n\n\u4ee5\u4e0b\u306f\u3001`pytest`\u5b9f\u884c\u306e\u30bf\u30b9\u30af\u5b9a\u7fa9\u3067\u3042\u308b\u3002\n\n```py:pytest\u5b9f\u884c\u306e\u30bf\u30b9\u30af\nroot = os.path.normpath(os.path.abspath(os.path.dirname(__file__)))\n\nclass PytestTask(luigi.Task):\n\n    # \u30bf\u30b9\u30af\u306e\u5f15\u6570\n    pytest_args = luigi.Parameter(default='tests')\n    repeat_id = luigi.IntParameter()\n\n    # \u30bf\u30b9\u30af\u306e\u5b9f\u884c\u51e6\u7406\n    def run(self):\n        cmd = ['py.test']\n        cmd.extend(self.pytest_args.split(' '))\n\n        os.chdir(root)\n        process = Popen(cmd, stdout=PIPE, stderr=PIPE)\n        for line in iter(process.stdout.readline, ''):\n            print(line.rstrip())\n\n        # self.output()\u304b\u3089\u3001\u5b9f\u884c\u7d50\u679c\u3092\u66f8\u304d\u8fbc\u3080\u30b9\u30c8\u30ea\u30fc\u30e0\u3092\u53d6\u5f97\u3067\u304d\u308b\u3002\n        out = self.output().open('w')\n        with open(lastfailed) as f:\n            out.write(f.read())\n        out.close()\n\n    # \u30bf\u30b9\u30af\u306e\u4f9d\u5b58\u95a2\u4fc2\n    # \u4f9d\u5b58\u3059\u308b\u30bf\u30b9\u30af\u306e\u30ea\u30b9\u30c8\u3092\u8fd4\u3059\u3002(ex. return [A(), B()])\n    # \u4eca\u56de\u306f\u8af8\u4e8b\u60c5\u304b\u3089\u7a7a\u306e\u30ea\u30b9\u30c8(\n    def requires(self):\n        return []\n\n    # \u30bf\u30b9\u30af\u306e\u5b9f\u884c\u7d50\u679c\u306e\u4fdd\u5b58\u51e6\u7406\n    # luigi.Target\u304b\u3089\u6d3e\u751f\u3057\u305f\u30af\u30e9\u30b9\u3092\u8fd4\u3059\u3002\u4ee5\u4e0b\u306e\u4f8b\u3067\u306f\u30ed\u30fc\u30ab\u30eb\u306e\u30d5\u30a1\u30a4\u30eb\u30b7\u30b9\u30c6\u30e0\u306b\u5b9f\u884c\u7d50\u679c\u3092\u4fdd\u5b58\u3059\u308b\n    # (ex) http://luigi.readthedocs.org/en/stable/api/luigi.html#luigi.Target\n    def output(self):\n        return luigi.LocalTarget('test_repeat_{0}.txt'.format(self.repeat_id))\n```\n\n# \u30bf\u30b9\u30af\u306e\u4f9d\u5b58\u95a2\u4fc2\u306e\u52d5\u7684\u5b9a\u7fa9\n\n\u4eca\u56de\u306f\u3001\u305f\u3060\u5358\u306bLuigi\u304b\u3089`pytest`\u3092\u5b9f\u884c\u3059\u308b\u3060\u3051\u3067\u306a\u304f\u3001\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u8981\u4ef6\u3092\u6e80\u305f\u3057\u81ea\u52d5\u7684\u306b\u30c6\u30b9\u30c8\u306e\u518d\u5b9f\u884c\u3092\u304b\u3051\u308b\u30d1\u30a4\u30d7\u30e9\u30a4\u30f3\u3092\u69cb\u7bc9\u3057\u305f\u304b\u3063\u305f\u3002\n\n- \u30c6\u30b9\u30c8\u304c\u5168\u4ef6\u6210\u529f\u3057\u3066\u3044\u306a\u3044\u5834\u5408\u306f\u518d\u5b9f\u884c\u3059\u308b\u3002\u518d\u5b9f\u884c\u3059\u308b\u56de\u6570\u306e\u4e0a\u9650\u306f\u5f15\u6570\u3067\u4e0e\u3048\u308b\u3002\n- \u30c6\u30b9\u30c8\u306e\u518d\u5b9f\u884c\u306e\u969b\u306b\u306f\u3001`--lf`\u30aa\u30d7\u30b7\u30e7\u30f3\u3092\u7528\u3044\u3066\u5931\u6557\u3057\u305f\u30c6\u30b9\u30c8\u306e\u307f\u5b9f\u884c\u3059\u308b\u3002([\u53c2\u8003](http://qiita.com/FGtatsuro/items/0efebb9b58374d16c5f0#%E5%89%8D%E5%9B%9E%E3%81%AE%E5%AE%9F%E8%A1%8C%E3%81%A7%E5%A4%B1%E6%95%97%E3%81%97%E3%81%9F%E3%83%86%E3%82%B9%E3%83%88%E3%81%AE%E3%81%BF%E5%86%8D%E5%AE%9F%E8%A1%8C%E3%81%99%E3%82%8B))\n\nLuigi\u306f\u524d\u8ff0\u3057\u305f`requires(self)`\u306b\u3088\u308b\u9759\u7684\u306a\u4f9d\u5b58\u95a2\u4fc2\u306e\u8ffd\u52a0\u306e\u307f\u306a\u3089\u305a\u3001\u6761\u4ef6\u306b\u5fdc\u3058\u3066\u52d5\u7684\u306b\u30bf\u30b9\u30af\u306e\u4f9d\u5b58\u95a2\u4fc2\u3092\u8ffd\u52a0\u3059\u308b\u3053\u3068\u3082\u3067\u304d\u308b\u3002\n\n```py:\u30c6\u30b9\u30c8\u304c\u524d\u4ef6\u6210\u529f\u3057\u306a\u304b\u3063\u305f\u5834\u5408\u306b\u518d\u5b9f\u884c\u3059\u308b\u30bf\u30b9\u30af\n# \u524d\u56de\u5b9f\u884c\u306e\u969b\u306b\u5931\u6557\u3057\u305f\u30c6\u30b9\u30c8\u304c\u8a18\u9332\u3055\u308c\u3066\u3044\u308b\u30d5\u30a1\u30a4\u30eb\nlastfailed = '.cache/v/cache/lastfailed'\n\nclass RepeatPytestTask(luigi.Task):\n\n    pytest_args = luigi.Parameter(default='tests')\n    repeat = luigi.IntParameter(default=1)\n\n    def is_success(self, target):\n        i = target.open('r')\n        # \u5168\u4ef6\u6210\u529f\u3057\u3066\u3044\u308b\u5834\u5408\u3001\u7a7a\u306e\u30c7\u30a3\u30af\u30b7\u30e7\u30ca\u30ea\u304c\u751f\u6210\u3055\u308c\u308b\n        success = bool(not json.load(i))\n        i.close()\n        return success\n\n    def run(self):\n       # \u4e00\u56de\u5b9f\u884c\u3057\u3066\u6210\u529f\u3057\u305f\u3089\u7d42\u4e86\n       out = self.output().open('w')\n       target = yield PytestTask(\n               pytest_args=self.pytest_args, \n               repeat_id=1)\n       if self.is_success(target):\n           out.write('success')\n           out.close()\n           return\n\n       # \u4e8c\u56de\u76ee\u4ee5\u964d\u306flf\u30aa\u30d7\u30b7\u30e7\u30f3\u4ed8\u304d\u3067\u5b9f\u884c\n       for i in range(0, self.repeat - 1):\n           # yield <\u30bf\u30b9\u30af\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9> \u3067\u52d5\u7684\u306a\u4f9d\u5b58\u95a2\u4fc2\u3092\u8ffd\u52a0\u3067\u304d\u308b\n           target = yield PytestTask(\n                   pytest_args='{0} --lf'.format(self.pytest_args), \n                   repeat_id=i + 2)\n           # \u6210\u529f\u3057\u305f\u6642\u70b9\u3067\u5b9f\u884c\u7d42\u4e86\n           if self.is_success(target):\n               out.write('success')\n               out.close()\n               return\n       # \u6700\u5f8c\u307e\u3067\u5931\u6557\u304c\u6b8b\u3063\u305f\n       out.write('failure')\n       out.close()\n\n    def output(self):\n        return luigi.LocalTarget('test_repeats.txt')\n```\n\n# \u30d1\u30a4\u30d7\u30e9\u30a4\u30f3\u306e\u5b9f\u884c\n\n\u524d\u8ff0\u306e\u30bf\u30b9\u30af\u5b9a\u7fa9\u306b\u52a0\u3048\u3001\u30d1\u30a4\u30d7\u30e9\u30a4\u30f3\u306e\u8d77\u52d5\u51e6\u7406\u3092\u52a0\u3048\u305f\u30d7\u30ed\u30b0\u30e9\u30e0\u5168\u4f53\u304c\u4ee5\u4e0b\u3067\u3042\u308b\u3002\n\n```py:pytest_pipeline.py\nimport json\nimport os\nimport sys\nfrom contextlib import contextmanager\nfrom subprocess import Popen, PIPE\n\nimport luigi\n\nroot = os.path.normpath(os.path.abspath(os.path.dirname(__file__)))\nlastfailed = '.cache/v/cache/lastfailed'\n\nclass PytestTask(luigi.Task):\n\n    pytest_args = luigi.Parameter(default='tests')\n    repeat_id = luigi.IntParameter()\n\n    def output(self):\n        return luigi.LocalTarget('test_repeat_{0}.txt'.format(self.repeat_id))\n\n    def run(self):\n        cmd = ['py.test']\n        cmd.extend(self.pytest_args.split(' '))\n\n        os.chdir(root)\n        process = Popen(cmd, stdout=PIPE, stderr=PIPE)\n        for line in iter(process.stdout.readline, ''):\n            print(line.rstrip())\n\n        out = self.output().open('w')\n        with open(lastfailed) as f:\n            out.write(f.read())\n        out.close()\n\nclass RepeatPytestTask(luigi.Task):\n    \n    pytest_args = luigi.Parameter(default='tests')\n    # \u7e70\u308a\u8fd4\u3057\u56de\u6570\u306f\u5f15\u6570\u3068\u3057\u3066\u5916\u90e8\u304b\u3089\u4e0e\u3048\u308b\n    repeat = luigi.IntParameter(default=1)\n\n    def is_success(self, target):\n        i = target.open('r')\n        success = bool(not json.load(i))\n        i.close()\n        return success\n\n    def output(self):\n        return luigi.LocalTarget('test_repeats.txt')\n\n    def run(self):\n       out = self.output().open('w')\n       target = yield PytestTask(\n               pytest_args=self.pytest_args, \n               repeat_id=1)\n       if self.is_success(target):\n           out.write('success')\n           out.close()\n           return\n\n       for i in range(0, self.repeat - 1):\n           target = yield PytestTask(\n                   pytest_args='{0} --lf'.format(self.pytest_args), \n                   repeat_id=i + 2)\n           if self.is_success(target):\n               out.write('success')\n               out.close()\n               return\n       out.write('failure')\n       out.close()\n\n# \u30d1\u30a4\u30d7\u30e9\u30a4\u30f3\u306e\u8d77\u52d5\u51e6\u7406\nif __name__ == '__main__':\n    argv = ['RepeatPytestTask']\n    if len(sys.argv) > 1:\n        argv.extend(sys.argv[1:])\n    luigi.run(argv)\n```\n\n\u4e0a\u8a18\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u306b\u7e70\u308a\u8fd4\u3057\u56de\u6570(`--repeat`)\u3092\u4e0e\u3048\u3066\u5b9f\u884c\u3059\u308b\u3053\u3068\u3067\u3001\u5931\u6557\u6642\u306b\u81ea\u52d5\u3067\u518d\u5b9f\u884c\u3059\u308b\u30c6\u30b9\u30c8\u306e\u30d1\u30a4\u30d7\u30e9\u30a4\u30f3\u304c\u5b9f\u73fe\u3067\u304d\u308b\u3002\n\n```bash:\u30b8\u30e7\u30d6\u30d1\u30a4\u30d7\u30e9\u30a4\u30f3\u306e\u5b9f\u884c\n# Luigi\u306foutput(self)\u304c\u51fa\u529b\u3055\u308c\u3066\u3044\u308b=\u30bf\u30b9\u30af\u304c\u7d42\u4e86\u3057\u3066\u3044\u308b\u3068\u898b\u306a\u3059\u3002\n# \u6700\u521d\u304b\u3089\u30bf\u30b9\u30af\u3092\u5b9f\u884c\u3057\u305f\u3044\u5834\u5408\u306f\u5168\u3066\u306e\u30a2\u30a6\u30c8\u30d7\u30c3\u30c8\u3092\u6d88\u53bb\u3059\u308b\u3002\n$ rm -rf test_repeat_1.txt test_repeats.txt test_repeat_2.txt\n\n# \u5927\u898f\u6a21\u51e6\u7406\u306e\u5834\u5408\u3001\u30bf\u30b9\u30af\u30b9\u30b1\u30b8\u30e5\u30fc\u30e9\u3092\u5225\u9014\u69cb\u7bc9\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u308b\u3002\n# \u4eca\u56de\u306f\u5c0f\u3055\u3044\u51e6\u7406\u306a\u306e\u3067\u30ed\u30fc\u30ab\u30eb\u3067\u30b9\u30b1\u30b8\u30e5\u30fc\u30eb\u3059\u308b(--local-scheduler\u30aa\u30d7\u30b7\u30e7\u30f3)\n# http://luigi.readthedocs.org/en/stable/central_scheduler.html?highlight=scheduler%20server\n$ python pytest_pipeline.py --local-scheduler --repeat 3\n```\n\n", "tags": ["Python", "pytest", "Luigi"]}