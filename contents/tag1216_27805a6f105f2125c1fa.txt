{"context": " More than 1 year has passed since last update.@keithseahus \u3055\u3093\u306e Dict\u306e\u5024\u3092\u30ad\u30fc\u306b\u30ad\u30fc\u3092\u96c6\u8a08\u3057\u3001\u96c6\u8a08\u3055\u308c\u305f\u30ad\u30fc\u306b\u5bfe\u3057\u3066\u4efb\u610f\u306e\u95a2\u6570\u3092\u5b9f\u884c\u3057\u305fDict\u3092\u8fd4\u3059 \u3068\u3044\u3046Elixir  \u306b\u95a2\u3059\u308b\u6295\u7a3f\u3092\u8aad\u3093\u3060\u3002\nElixir\u306e\u4e8b\u306f\u5168\u304f\u77e5\u3089\u306a\u3044\u3051\u3069\u3001\u3053\u308cJava8\u306eStreamAPI\u3060\u3068\u3069\u3046\u306a\u308b\u3093\u3060\u308d\u3046\u3068\u601d\u3063\u305f\u306e\u3067\u3084\u3063\u3066\u307f\u305f\u3002\n\n\u3084\u3063\u3066\u308b\u3053\u3068\nDict(Java\u3067\u3044\u3046\u3068Map)\u306e\u30ad\u30fc\u3068\u5024\u3092\u5165\u308c\u66ff\u3048\u305fDict\u306e\u4f5c\u6210\u3002\nHadoop\u3067\u3044\u3046\u3068InverseMapper\u3002\n\u5143\u6295\u7a3f\u306b\u3088\u308b\u3068Elixir\u3067\u306fEnum.group_by/3\u3068\u3044\u3046\u306e\u304c\u3042\u308b\u3089\u3057\u3044\u3002\n\u3053\u308c\u306fJava8\u306eCollectors.groupingBy(Function<? super T,? extends K> classifier)\u306b\u76f8\u5f53\u3059\u308b\u3082\u306e\u3067\u3001\u3053\u308c\u3060\u3068\u5024\u3092\u30de\u30c3\u30d7(\u5909\u63db)\u3059\u308b\u624b\u6bb5\u304c\u306a\u3044\u306e\u3067group_by\u3092\u62e1\u5f35\u3057\u305f\u3068\u3044\u3046\u3053\u3068\u3089\u3057\u3044\u3002\n\nJava8\u3067\u3084\u3063\u3066\u307f\u305f\nJava8\u306eCollectors\u306b\u306fgroupingBy(Function<? super T,? extends K> classifier, Collector<? super T,A,D> downstream\u3068\u3044\u3046\u306e\u3082\u3042\u3063\u3066\u3001\u5024\u306e\u30de\u30c3\u30d7\u3082\u3067\u304d\u308b\u306e\u3067\u3053\u308c\u3092\u4f7f\u3063\u3066\u307f\u305f\u3002\n    public static void main(String[] args) {\n\n        Map<String, Integer> map = new LinkedHashMap<>();\n        map.put(\"a\", 1);\n        map.put(\"b\", 0);\n        map.put(\"c\", 4);\n        map.put(\"d\", 0);\n        map.put(\"e\", 1);\n        map.put(\"f\", 1);\n\n        Map<Integer, List<String>> result = map.entrySet()\n                .stream()\n                .collect(Collectors.groupingBy(\n                        Map.Entry::getValue,\n                        Collectors.mapping(Map.Entry::getKey, Collectors.toList())\n                ));\n\n        System.out.println(result);\n    }\n\n\u5143\u6295\u7a3f\u306b\u5408\u308f\u305b\u3066\u30e1\u30bd\u30c3\u30c9\u306b\u3057\u3066\u307f\u308b\u3002\n    public static void main(String[] args) {\n\n        Map<String, Integer> map = new LinkedHashMap<>();\n        map.put(\"a\", 1);\n        map.put(\"b\", 0);\n        map.put(\"c\", 4);\n        map.put(\"d\", 0);\n        map.put(\"e\", 1);\n        map.put(\"f\", 1);\n\n        Map<Integer, List<String>> result = map.entrySet()\n                .stream()\n                .collect(groupingBy(Map.Entry::getValue, Map.Entry::getKey));\n\n        System.out.println(result); // => {0=[b, d], 1=[a, e, f], 4=[c]}\n    }\n\n    private static <T, K, V> Collector<T, ?, Map<K, List<V>>> groupingBy(\n            Function<T, K> keyMapper,\n            Function<T, V> valueMapper\n    ) {\n        return Collectors.groupingBy(\n                keyMapper,\n                Collectors.mapping(valueMapper, Collectors.toList())\n        );\n    }\n\n\n\u3069\u3053\u304b\u3067\u898b\u305f\u6c17\u304c...\n\u3068\u3053\u3053\u307e\u3067\u66f8\u3044\u3066\u5c11\u3057\u524d\u306b\u898b\u305f @komiya_atsushi \u3055\u3093\u306e [Java 8][Stream API] \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e List \u304b\u3089 Map \u3092\u751f\u6210\u3059\u308b\u65b9\u6cd5\u3092\u6a21\u7d22\u3059\u308b \u3068\u3044\u3046\u6295\u7a3f\u306b\u3042\u3063\u305f\u30b3\u30fc\u30c9\u306b\u4f3c\u3066\u3044\u308b\u6c17\u304c\u3057\u305f\u306e\u3067\u3001\u4f5c\u6210\u3057\u305fgroupingBy\u30e1\u30bd\u30c3\u30c9\u3092\u305d\u3061\u3089\u306e\u30b3\u30fc\u30c9\u3067\u3082\u4f7f\u3063\u3066\u307f\u305f\u3002\n\n\u5143\u306e\u30b3\u30fc\u30c9\n    static Map<String, List<String>> byGroupingByAndMapping(List<GroupUser> groupUsers) {\n        return groupUsers.stream()\n                .collect(Collectors.groupingBy(\n                        GroupUser::groupName,\n                        Collectors.mapping(\n                                GroupUser::userName,\n                                Collectors.toList())));\n    }\n\n\n\n\u4eca\u56de\u4f5c\u6210\u3057\u305fgroupingBy()\u30e1\u30bd\u30c3\u30c9\u3092\u4f7f\u7528\n    static Map<String, List<String>> byGroupingByAndMapping(List<GroupUser> groupUsers) {\n        return groupUsers.stream()\n                .collect(groupingBy(GroupUser::groupName, GroupUser::userName));\n    }\n\n\n\u5358\u306b\u30b7\u30e7\u30fc\u30c8\u30ab\u30c3\u30c8\u7684\u306a\u30e1\u30bd\u30c3\u30c9\u3092\u4f5c\u3063\u3066\u4f7f\u3063\u305f\u3060\u3051\u306a\u3093\u3060\u3051\u3069\u3001\u5c11\u3057\u30b9\u30c3\u30ad\u30ea\u3057\u305f\u3088\u3046\u306a\u6c17\u304c\u3059\u308b\u3002\n\u983b\u7e41\u306b\u4f7f\u3046\u3088\u3046\u3067\u3042\u308c\u3070\u3053\u3046\u3044\u3046\u306e\u3092\u30e6\u30fc\u30c6\u30a3\u30ea\u30c6\u30a3\u30af\u30e9\u30b9\u306b\u7528\u610f\u3057\u3066\u304a\u3044\u305f\u307b\u3046\u304c\u3044\u3044\u304b\u3082\u3057\u308c\u306a\u3044\u3002\n@keithseahus \u3055\u3093\u306e [Dict\u306e\u5024\u3092\u30ad\u30fc\u306b\u30ad\u30fc\u3092\u96c6\u8a08\u3057\u3001\u96c6\u8a08\u3055\u308c\u305f\u30ad\u30fc\u306b\u5bfe\u3057\u3066\u4efb\u610f\u306e\u95a2\u6570\u3092\u5b9f\u884c\u3057\u305fDict\u3092\u8fd4\u3059](http://qiita.com/keithseahus/items/b179b9008d2564f66981) \u3068\u3044\u3046Elixir  \u306b\u95a2\u3059\u308b\u6295\u7a3f\u3092\u8aad\u3093\u3060\u3002\nElixir\u306e\u4e8b\u306f\u5168\u304f\u77e5\u3089\u306a\u3044\u3051\u3069\u3001\u3053\u308cJava8\u306eStreamAPI\u3060\u3068\u3069\u3046\u306a\u308b\u3093\u3060\u308d\u3046\u3068\u601d\u3063\u305f\u306e\u3067\u3084\u3063\u3066\u307f\u305f\u3002\n\n# \u3084\u3063\u3066\u308b\u3053\u3068\n\nDict(Java\u3067\u3044\u3046\u3068Map)\u306e\u30ad\u30fc\u3068\u5024\u3092\u5165\u308c\u66ff\u3048\u305fDict\u306e\u4f5c\u6210\u3002\nHadoop\u3067\u3044\u3046\u3068[InverseMapper](https://hadoop.apache.org/docs/r2.3.0/api/org/apache/hadoop/mapreduce/lib/map/InverseMapper.html)\u3002\n\n\u5143\u6295\u7a3f\u306b\u3088\u308b\u3068Elixir\u3067\u306f`Enum.group_by/3`\u3068\u3044\u3046\u306e\u304c\u3042\u308b\u3089\u3057\u3044\u3002\n\u3053\u308c\u306fJava8\u306e[Collectors.groupingBy(Function<? super T,? extends K> classifier)](http://docs.oracle.com/javase/jp/8/api/java/util/stream/Collectors.html#groupingBy-java.util.function.Function-)\u306b\u76f8\u5f53\u3059\u308b\u3082\u306e\u3067\u3001\u3053\u308c\u3060\u3068\u5024\u3092\u30de\u30c3\u30d7(\u5909\u63db)\u3059\u308b\u624b\u6bb5\u304c\u306a\u3044\u306e\u3067group_by\u3092\u62e1\u5f35\u3057\u305f\u3068\u3044\u3046\u3053\u3068\u3089\u3057\u3044\u3002\n\n# Java8\u3067\u3084\u3063\u3066\u307f\u305f\n\nJava8\u306eCollectors\u306b\u306f[groupingBy(Function<? super T,? extends K> classifier, Collector<? super T,A,D> downstream]()\u3068\u3044\u3046\u306e\u3082\u3042\u3063\u3066\u3001\u5024\u306e\u30de\u30c3\u30d7\u3082\u3067\u304d\u308b\u306e\u3067\u3053\u308c\u3092\u4f7f\u3063\u3066\u307f\u305f\u3002\n\n```java:\n    public static void main(String[] args) {\n        \n        Map<String, Integer> map = new LinkedHashMap<>();\n        map.put(\"a\", 1);\n        map.put(\"b\", 0);\n        map.put(\"c\", 4);\n        map.put(\"d\", 0);\n        map.put(\"e\", 1);\n        map.put(\"f\", 1);\n        \n        Map<Integer, List<String>> result = map.entrySet()\n                .stream()\n                .collect(Collectors.groupingBy(\n                        Map.Entry::getValue,\n                        Collectors.mapping(Map.Entry::getKey, Collectors.toList())\n                ));\n        \n        System.out.println(result);\n    }\n```\n\n\u5143\u6295\u7a3f\u306b\u5408\u308f\u305b\u3066\u30e1\u30bd\u30c3\u30c9\u306b\u3057\u3066\u307f\u308b\u3002\n\n```java:\n    public static void main(String[] args) {\n        \n        Map<String, Integer> map = new LinkedHashMap<>();\n        map.put(\"a\", 1);\n        map.put(\"b\", 0);\n        map.put(\"c\", 4);\n        map.put(\"d\", 0);\n        map.put(\"e\", 1);\n        map.put(\"f\", 1);\n        \n        Map<Integer, List<String>> result = map.entrySet()\n                .stream()\n                .collect(groupingBy(Map.Entry::getValue, Map.Entry::getKey));\n        \n        System.out.println(result); // => {0=[b, d], 1=[a, e, f], 4=[c]}\n    }\n\n    private static <T, K, V> Collector<T, ?, Map<K, List<V>>> groupingBy(\n            Function<T, K> keyMapper,\n            Function<T, V> valueMapper\n    ) {\n        return Collectors.groupingBy(\n                keyMapper,\n                Collectors.mapping(valueMapper, Collectors.toList())\n        );\n    }\n```\n\n# \u3069\u3053\u304b\u3067\u898b\u305f\u6c17\u304c...\n\n\u3068\u3053\u3053\u307e\u3067\u66f8\u3044\u3066\u5c11\u3057\u524d\u306b\u898b\u305f @komiya_atsushi \u3055\u3093\u306e [[Java 8][Stream API] \u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e List \u304b\u3089 Map \u3092\u751f\u6210\u3059\u308b\u65b9\u6cd5\u3092\u6a21\u7d22\u3059\u308b](http://qiita.com/komiya_atsushi/items/8daac1b90d73b958c725) \u3068\u3044\u3046\u6295\u7a3f\u306b\u3042\u3063\u305f\u30b3\u30fc\u30c9\u306b\u4f3c\u3066\u3044\u308b\u6c17\u304c\u3057\u305f\u306e\u3067\u3001\u4f5c\u6210\u3057\u305fgroupingBy\u30e1\u30bd\u30c3\u30c9\u3092\u305d\u3061\u3089\u306e\u30b3\u30fc\u30c9\u3067\u3082\u4f7f\u3063\u3066\u307f\u305f\u3002\n\n```java:\u5143\u306e\u30b3\u30fc\u30c9\n    static Map<String, List<String>> byGroupingByAndMapping(List<GroupUser> groupUsers) {\n        return groupUsers.stream()\n                .collect(Collectors.groupingBy(\n                        GroupUser::groupName,\n                        Collectors.mapping(\n                                GroupUser::userName,\n                                Collectors.toList())));\n    }\n```\n```java:\u4eca\u56de\u4f5c\u6210\u3057\u305fgroupingBy()\u30e1\u30bd\u30c3\u30c9\u3092\u4f7f\u7528\n    static Map<String, List<String>> byGroupingByAndMapping(List<GroupUser> groupUsers) {\n        return groupUsers.stream()\n                .collect(groupingBy(GroupUser::groupName, GroupUser::userName));\n    }\n```\n\u5358\u306b\u30b7\u30e7\u30fc\u30c8\u30ab\u30c3\u30c8\u7684\u306a\u30e1\u30bd\u30c3\u30c9\u3092\u4f5c\u3063\u3066\u4f7f\u3063\u305f\u3060\u3051\u306a\u3093\u3060\u3051\u3069\u3001\u5c11\u3057\u30b9\u30c3\u30ad\u30ea\u3057\u305f\u3088\u3046\u306a\u6c17\u304c\u3059\u308b\u3002\n\u983b\u7e41\u306b\u4f7f\u3046\u3088\u3046\u3067\u3042\u308c\u3070\u3053\u3046\u3044\u3046\u306e\u3092\u30e6\u30fc\u30c6\u30a3\u30ea\u30c6\u30a3\u30af\u30e9\u30b9\u306b\u7528\u610f\u3057\u3066\u304a\u3044\u305f\u307b\u3046\u304c\u3044\u3044\u304b\u3082\u3057\u308c\u306a\u3044\u3002\n", "tags": ["Java8", "Elixir", "java8"]}