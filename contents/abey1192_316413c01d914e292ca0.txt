{"context": " More than 1 year has passed since last update.Groovy\u3068Vert.x\u306e\u52c9\u5f37\u305d\u306e2\u3068\u3057\u3066\u3001\u524d\u306b\u4f5c\u3063\u305f\u7c21\u5358\u306aHTTP\u30b5\u30fc\u30d0\u3092\u62e1\u5f35\u3057\u3066\u307f\u307e\u3057\u305f\u3002\n\u524d\u306b\u4f5c\u3063\u305f\u306e\u306f\u3053\u308c http://qiita.com/i18n/items/72cc2a0c820a8fb0ca72\nRouteMatcher\u3068\u3044\u3046\u30af\u30e9\u30b9\u3092\u30ea\u30af\u30a8\u30b9\u30c8\u30cf\u30f3\u30c9\u30e9\u3068\u3057\u3066\u4f7f\u3046\u3068 Ruby\u306eSinatra\u3063\u307d\u3044\u3053\u3068\u304c\u3067\u304d\u308b\u3088\u3046\u306a\u306e\u3067\u3001\u4eca\u56de\u306f\u305d\u308c\u3092\u8a66\u3057\u3066\u307f\u307e\u3057\u305f\u3002\n\u30eb\u30fc\u30c6\u30a3\u30f3\u30b0\u3068\u51e6\u7406\u306f\u4e0b\u8a18\u306e\u3068\u304a\u308a\u3002\n\u30fbGET / \u3000\u2192\u3000Hello,World\u3092\u8868\u793a\n\u30fbGET  /\u30e6\u30fc\u30b6ID\u3000\u2192\u3000\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u304b\u3089\u30e6\u30fc\u30b6\u3092\u691c\u7d22\u3057\u3066\u304d\u3066\u305d\u306e\u540d\u524d\u3092\u8868\u793a\n\u3053\u306e\u3042\u305f\u308a\u306f\u8907\u96d1\u3067\u3082\u306a\u3044\u3057\u3001\u516c\u5f0f\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u306b\u3082\u3061\u3083\u3093\u3068\u66f8\u3044\u3066\u3042\u308b\u306e\u3067\u5199\u7d4c\u306b\u8fd1\u3044\u611f\u3058\u3067\u3059\u3002\n\u3057\u304b\u3057\u30b3\u30fc\u30eb\u30d0\u30c3\u30af\u304c\u3082\u3046\u5927\u5909\u3067\u3059\u306d\u3002Groovy\u3001\u30af\u30ed\u30fc\u30b8\u30e3\u30fc\u3092\u53d6\u308a\u6271\u3046\u306e\u304c\u7c21\u5358\u3067\u3088\u304b\u3063\u305f\u3002\nimport org.vertx.groovy.platform.Verticle\nimport org.vertx.groovy.core.Vertx\nimport org.vertx.groovy.core.http.RouteMatcher\n\nclass VertxTestServer extends Verticle {\n\n    @Override\n    def start() {\n        container.deployModule( Persistor.moduleName, Persistor.config, 1, { result -> } )\n\n        def server = vertx.createHttpServer()\n        def app = new VertxApplication(vertx: vertx)\n\n        server.requestHandler(app.requestHandler()).listen(8080)\n    }\n\n    // Sinatra\u3067\u3044\u3046 Sinatra::Base \u307f\u305f\u3044\u306a\u30a4\u30e1\u30fc\u30b8\n    class VertxApplication {\n        private def vertx\n\n        def requestHandler() {\n            def router = new RouteMatcher()\n            router.get('/', getIndex)\n            router.get('/:id', getUser)\n            router.noMatch(notFound)\n\n            return router.asClosure()\n        }\n\n        // GET /\n        private def getIndex = { request ->\n            def response = request.response\n            response.putHeader('Content-Type', 'text/plain')\n            response.end('Hello,World')\n        }\n\n        // GET /\u30e6\u30fc\u30b6ID\n        private def getUser = { request ->\n            def response = request.response\n            response.putHeader('Content-Type', 'text/plain')\n\n            String userId = request.params.get('id')\n            if(userId == null) {\n                response.end('no id')\n            }\n            else {\n                def finder = new UserFinder(eventBus:vertx.eventBus)\n\n                finder.onFound { user ->\n                    response.end(\"Hello, ${user['name']}\")\n                }\n                finder.onNotFound {\n                    response.end('No user')\n                }\n                finder.find(userId)\n            }\n        }\n\n        // \u898b\u3064\u304b\u3089\u306a\u304b\u3063\u305f\n        private def notFound = { request ->\n            request.response.statusCode = 404\n            request.response.end('Not found')\n        }\n    }\n\n    // \u691c\u7d22\u7528\u30af\u30e9\u30b9\n    class UserFinder {\n        private def eventBus\n        private def foundCallback\n        private def notFoundCallback\n\n        def find(userId) {\n            eventBus.send(Persistor.address, query(userId)) { message ->\n                callback(message.body)\n            }\n        }\n\n        def onFound(closure) {\n            foundCallback = closure\n        }\n\n        def onNotFound(closure) {\n            notFoundCallback = closure\n        }\n\n        private def callback(result) {\n            if(result['status'] != 'ok') {\n                notFoundCallback.call()\n            }\n            else if(result['result'].size() != 1) {\n                notFoundCallback.call()\n            }\n            else {\n                foundCallback.call(result['result'].first())\n            }\n        }\n\n        private def query(userId) {\n            [\n                action: \"select\",\n                stmt: \"select * from user where id=? limit 1\",\n                values: [[userId]]\n            ]\n        }\n    }\n\n    // DB\u8a2d\u5b9a\u4fdd\u6301\u7528\u30af\u30e9\u30b9\n    class Persistor {\n        static def address = 'test'\n        static def moduleName = 'com.bloidonia~mod-jdbc-persistor~2.0.0-CR1'\n        static def config = [\n            address: 'test',\n            driver: 'com.mysql.jdbc.Driver',\n            url: 'jdbc:mysql://localhost:3306/test',\n            username: 'root',\n            password: ''\n        ]\n    }\n}\n\n\u305d\u308d\u305d\u308d1\u30d5\u30a1\u30a4\u30eb\u3060\u3068\u8f9b\u304f\u306a\u3063\u3066\u304d\u307e\u3057\u305f\u3002\nGroovy\u3068Vert.x\u306e\u52c9\u5f37\u305d\u306e2\u3068\u3057\u3066\u3001\u524d\u306b\u4f5c\u3063\u305f\u7c21\u5358\u306aHTTP\u30b5\u30fc\u30d0\u3092\u62e1\u5f35\u3057\u3066\u307f\u307e\u3057\u305f\u3002\n\u524d\u306b\u4f5c\u3063\u305f\u306e\u306f\u3053\u308c http://qiita.com/i18n/items/72cc2a0c820a8fb0ca72\n\nRouteMatcher\u3068\u3044\u3046\u30af\u30e9\u30b9\u3092\u30ea\u30af\u30a8\u30b9\u30c8\u30cf\u30f3\u30c9\u30e9\u3068\u3057\u3066\u4f7f\u3046\u3068 Ruby\u306eSinatra\u3063\u307d\u3044\u3053\u3068\u304c\u3067\u304d\u308b\u3088\u3046\u306a\u306e\u3067\u3001\u4eca\u56de\u306f\u305d\u308c\u3092\u8a66\u3057\u3066\u307f\u307e\u3057\u305f\u3002\n\u30eb\u30fc\u30c6\u30a3\u30f3\u30b0\u3068\u51e6\u7406\u306f\u4e0b\u8a18\u306e\u3068\u304a\u308a\u3002\n\n\u30fbGET / \u3000\u2192\u3000Hello,World\u3092\u8868\u793a\n\u30fbGET  /\u30e6\u30fc\u30b6ID\u3000\u2192\u3000\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u304b\u3089\u30e6\u30fc\u30b6\u3092\u691c\u7d22\u3057\u3066\u304d\u3066\u305d\u306e\u540d\u524d\u3092\u8868\u793a\n\n\u3053\u306e\u3042\u305f\u308a\u306f\u8907\u96d1\u3067\u3082\u306a\u3044\u3057\u3001\u516c\u5f0f\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u306b\u3082\u3061\u3083\u3093\u3068\u66f8\u3044\u3066\u3042\u308b\u306e\u3067\u5199\u7d4c\u306b\u8fd1\u3044\u611f\u3058\u3067\u3059\u3002\n\u3057\u304b\u3057\u30b3\u30fc\u30eb\u30d0\u30c3\u30af\u304c\u3082\u3046\u5927\u5909\u3067\u3059\u306d\u3002Groovy\u3001\u30af\u30ed\u30fc\u30b8\u30e3\u30fc\u3092\u53d6\u308a\u6271\u3046\u306e\u304c\u7c21\u5358\u3067\u3088\u304b\u3063\u305f\u3002\n\n~~~groovy\nimport org.vertx.groovy.platform.Verticle\nimport org.vertx.groovy.core.Vertx\nimport org.vertx.groovy.core.http.RouteMatcher\n\nclass VertxTestServer extends Verticle {\n\n    @Override\n    def start() {\n        container.deployModule( Persistor.moduleName, Persistor.config, 1, { result -> } )\n\n        def server = vertx.createHttpServer()\n        def app = new VertxApplication(vertx: vertx)\n\n    \tserver.requestHandler(app.requestHandler()).listen(8080)\n\t}\n\n    // Sinatra\u3067\u3044\u3046 Sinatra::Base \u307f\u305f\u3044\u306a\u30a4\u30e1\u30fc\u30b8\n    class VertxApplication {\n        private def vertx\n\n        def requestHandler() {\n            def router = new RouteMatcher()\n            router.get('/', getIndex)\n            router.get('/:id', getUser)\n            router.noMatch(notFound)\n\n            return router.asClosure()\n        }\n\n        // GET /\n        private def getIndex = { request ->\n            def response = request.response\n            response.putHeader('Content-Type', 'text/plain')\n            response.end('Hello,World')\n        }\n\n        // GET /\u30e6\u30fc\u30b6ID\n        private def getUser = { request ->\n            def response = request.response\n            response.putHeader('Content-Type', 'text/plain')\n\n            String userId = request.params.get('id')\n            if(userId == null) {\n                response.end('no id')\n            }\n            else {\n                def finder = new UserFinder(eventBus:vertx.eventBus)\n\n                finder.onFound { user ->\n                    response.end(\"Hello, ${user['name']}\")\n                }\n                finder.onNotFound {\n                    response.end('No user')\n                }\n                finder.find(userId)\n            }\n        }\n\n        // \u898b\u3064\u304b\u3089\u306a\u304b\u3063\u305f\n        private def notFound = { request ->\n            request.response.statusCode = 404\n            request.response.end('Not found')\n        }\n    }\n\n    // \u691c\u7d22\u7528\u30af\u30e9\u30b9\n    class UserFinder {\n        private def eventBus\n        private def foundCallback\n        private def notFoundCallback\n\n        def find(userId) {\n            eventBus.send(Persistor.address, query(userId)) { message ->\n                callback(message.body)\n            }\n        }\n\n        def onFound(closure) {\n            foundCallback = closure\n        }\n        \n        def onNotFound(closure) {\n            notFoundCallback = closure\n        }\n\n        private def callback(result) {\n            if(result['status'] != 'ok') {\n                notFoundCallback.call()\n            }\n            else if(result['result'].size() != 1) {\n                notFoundCallback.call()\n            }\n            else {\n                foundCallback.call(result['result'].first())\n            }\n        }\n\n        private def query(userId) {\n            [\n                action: \"select\",\n                stmt: \"select * from user where id=? limit 1\",\n                values: [[userId]]\n            ]\n        }\n    }\n\n    // DB\u8a2d\u5b9a\u4fdd\u6301\u7528\u30af\u30e9\u30b9\n    class Persistor {\n        static def address = 'test'\n        static def moduleName = 'com.bloidonia~mod-jdbc-persistor~2.0.0-CR1'\n        static def config = [\n            address: 'test',\n            driver: 'com.mysql.jdbc.Driver',\n            url: 'jdbc:mysql://localhost:3306/test',\n            username: 'root',\n            password: ''\n        ]\n    }\n}\n~~~\n\n\u305d\u308d\u305d\u308d1\u30d5\u30a1\u30a4\u30eb\u3060\u3068\u8f9b\u304f\u306a\u3063\u3066\u304d\u307e\u3057\u305f\u3002\n", "tags": ["Groovy2.1.7", "Vert.x2.0.1"]}