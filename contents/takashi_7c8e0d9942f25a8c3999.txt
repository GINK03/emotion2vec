{"context": " More than 1 year has passed since last update.\n\u8ffd\u8a18(2015/10/16)\n\u30b3\u30e1\u30f3\u30c8\u6b04\u306b\u3066 @kawaz\u3055\u3093\u306b\u3054\u6307\u6458\u3044\u305f\u3060\u3044\u305fpackage.json\u5185\u306escripts\u306b\u304a\u3051\u308b\u4f9d\u5b58\u30d1\u30c3\u30b1\u30fc\u30b8\u306e\u30b3\u30de\u30f3\u30c9\u547c\u3073\u51fa\u3057\u3092\u4fee\u6b63\u3057\u307e\u3057\u305f\u3002\n\u8ffd\u8a18(2015/10/10)\nredux\u306bdoc\u8ffd\u52a0\u306epull request\u3092\u9001\u3063\u305f\u3068\u3053\u308d\u3001merge\u3055\u308c\u3066 \u305d\u306e\u5f8c applyMiddleware()\u3092\u4f7f\u3046\u65b9\u6cd5\u306e\u307b\u3046\u304c\u826f\u3044\u3063\u3066\u3053\u3068\u3067tweak\u3055\u308c\u3066\u307e\u3059\u3002 applyMiddleware\u3092\u4f7f\u3046\u65b9\u6cd5\u306f\u3053\u3061\u3089\n\nes6\u3044\u3044\u3067\u3059\u3088\u306d\u3002\u6700\u8fd1redux\u3092\u4f7f\u3063\u3066\u304a\u308a\u3001\u305d\u306e\u95a2\u4fc2\u3067es6\u3067\u306e\u30c6\u30b9\u30c8\u30b3\u30fc\u30c9\u306e\u66f8\u304d\u65b9\u3082\u542b\u3081\u3056\u3063\u3068\u8abf\u3079\u305f\u3044\u3068\u601d\u3063\u305f\u306e\u3067\u307e\u3068\u3081\u307e\u3059\u3002\n\n\u30c6\u30b9\u30c8\u74b0\u5883\u306e\u30bb\u30c3\u30c8\u30a2\u30c3\u30d7\n\u30a2\u30b5\u30fc\u30b7\u30e7\u30f3\u306b\u306f\u3001power-assert\u3092\u4f7f\u3044\u305f\u3044\u3068\u601d\u3044\u307e\u3059\u3002\u30c6\u30b9\u30c8\u30e9\u30f3\u30ca\u30fc\u306fpower-assert\u516c\u5f0f\u3067\u3082\u4f7f\u3063\u3066\u3044\u308bmocha\u3067\u3002\nnpm\u3092\u4f7f\u3063\u3066\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3057\u3066\u3044\u304d\u307e\u3059\u3002\nnpm install -D mocha power-assert espower-babel\n\nespower-babel \u306fbabel\u3092\u7528\u3044\u3066es6\u3067\u66f8\u3044\u305f\u30c6\u30b9\u30c8\u30b3\u30fc\u30c9\u306e\u5909\u63db+power-assert\u3092\u5b9f\u884c\u3059\u308b\u305f\u3081\u306e\u30b3\u30fc\u30c9\u5909\u63db\u3092\u884c\u3046\u305f\u3081\u306e\u30e9\u30a4\u30d6\u30e9\u30ea\u3067\u3059\u3002\u4fbf\u5229\u3067\u3059\u306d\u3002\n\u6b21\u306bpackage.json\u306b\u30c6\u30b9\u30c8\u30b3\u30fc\u30c9\u3092\u5b9f\u884c\u3059\u308b\u305f\u3081\u306escript\u3092\u8ffd\u8a18\u3057\u3066\u3044\u304d\u307e\u3059\u3002\n\u4eca\u56de\u306f\u3001test/ \u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u4ee5\u4e0b\u306b\u30c6\u30b9\u30c8\u30b3\u30fc\u30c9\u3092\u66f8\u3044\u3066\u3044\u304d\u307e\u3059\u3002\n// \u7701\u7565\n\"scripts\": {\n  // \u8ffd\u8a18\n  \"test\": \"mocha --compilers js:espower-babel/guess test/**/*.spec.js\",\n}\n\n\u30d3\u30eb\u30c9\u30b9\u30af\u30ea\u30d7\u30c8\u3082\u542b\u3081\u3066package.json\u306b\u66f8\u3051\u3070\u30c4\u30fc\u30eb\u3054\u3068\u306b\u4f7f\u3044\u65b9\u3092\u77e5\u3089\u306a\u304f\u3066\u3088\u3044\u306e\u3067\u91cd\u5b9d\u3057\u3066\u307e\u3059\u3002\u3042\u3068$(npm bin)\u3092\u4f7f\u3048\u3070\u30b0\u30ed\u30fc\u30d0\u30eb\u306b\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3057\u3066\u3044\u308b\u5fc5\u8981\u304c\u306a\u3044\u306e\u304c\u826f\u3044\u3067\u3059\u306d\u3002\n\u3053\u3053\u307e\u3067\u3067\u30c6\u30b9\u30c8\u30b3\u30fc\u30c9\u306e\u30bb\u30c3\u30c8\u30a2\u30c3\u30d7\u306f\u5b8c\u4e86\u3067\u3059\u3002\u3042\u3068\u306f\u66f8\u3044\u3066\u3044\u304f\u3060\u3051\u3067\u3059\u3002\u7c21\u5358\uff01\uff01\uff01\uff01\uff01\n\nredux\u306e\u30c6\u30b9\u30c8\u30b3\u30fc\u30c9\u3092\u66f8\u304f\nredux\u306f\u4ed6\u306eflux\u306b\u6bd4\u3079\u3066\u307b\u3068\u3093\u3069\u306e\u90e8\u54c1\u304c\u72b6\u614b\u3092\u6301\u305f\u306a\u3044\u305f\u3060\u306e\u95a2\u6570\u306a\u306e\u3067\u3001\u3068\u3066\u3082\u30c6\u30b9\u30c8\u3057\u3084\u3059\u304f\u306a\u3063\u3066\u3044\u307e\u3059\u3002\n\u516c\u5f0f\u306b\u3082\u307e\u3068\u307e\u3063\u3066\u304a\u308a\u3001\u3053\u3061\u3089\u3082\u5927\u5909\u5206\u304b\u308a\u3084\u3059\u3044\u306e\u3067\u3059\u304c\u3001\u975e\u540c\u671f\u306aaction\u306e\u30c6\u30b9\u30c8\u306b\u95a2\u3059\u308b\u8a18\u8ff0\u304c\u306a\u304b\u3063\u305f\u306e\u3067\u305d\u3061\u3089\u3092\u4f8b\u306b\u4e0a\u3052\u3066\u30c6\u30b9\u30c8\u3092\u66f8\u3044\u3066\u898b\u305f\u3044\u3068\u601d\u3044\u307e\u3059\u3002\n\u4f8b\u3068\u3057\u3066\nimport fetch from 'isomorphic-fetch';\nimport {\n  FETCH_USERS_REQUEST,\n  FETCH_USERS_SUCCESS,\n  FETCH_USERS_FAILURE\n} from '../constants/ActionTypes';\n\nfunction fetchUsersRequest() {\n  return {\n    type: FETCH_USERS_REQUEST\n  };\n}\n\nfunction fetchUsersSuccess(body) {\n  return {\n    type: FETCH_USERS_SUCCESS,\n    body\n  };\n}\n\nfunction fetchUsersFailure(ex) {\n  return {\n    type: FETCH_USERS_FAILURE,\n    ex\n  };\n}\n\nexport function fetchUsers() {\n  return dispatch => {\n    dispatch(fetchUsersRequest());\n    return fetch('http://localhost:3000/users')\n      .then(response => response.json())\n      .then(json => dispatch(fetchUsersSuccess(json.body)))\n      .catch(ex => dispatch(fetchUsersFailure(ex)));\n  };\n}\n\n\n\u3053\u3093\u306a\u611f\u3058\u306e\u975e\u540c\u671f\u306aaction creator\u3092\u5b9a\u7fa9\u3057\u305f\u3068\u3057\u307e\u3059\u3002fetch\u3059\u308b\u5148\u306flocalhost\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u304c\u3001API\u30b5\u30fc\u30d0\u304b\u3089\u53d6\u3063\u3066\u304f\u308b\u30a4\u30e1\u30fc\u30b8\u3067\nimport assert from 'power-assert';\nimport nock from 'nock'\nimport * as types from '../../src/constants/ActionTypes';\nimport * as actions from '../../src/actions/users';\n\ndescribe('user actions', () => {\n  afterEach(() => nock.cleanAll() );\n\n  it('creates FETCH_USERS_SUCCESS when fechting user has been done', (done) => {\n    nock('http://localhost:3000/')\n      .get('/users')\n      .reply(200, { users: {name: 'john'} });\n\n    let expectedActions = [\n      { type: types.FETCH_USERS_REQUEST },\n      { type: types.FETCH_USERS_SUCCESS, body: { users: {name: 'john'} } }\n    ]\n\n    function mockDispatch(action) {\n      var expectedAction = expectedActions.shift();\n      assert.deepEqual(action, expectedAction);\n      if (!expectedActions.length) {\n        done();\n      }\n    }\n    actions.fetchUsers()(mockDispatch);\n  });\n\n  it('creates FETCH_USERS_FAILURE when fechting user has been failed', (done) => {\n    nock('http://localhost:3000/')\n      .get('/users')\n      .replyWithError('something happened');\n\n    let expectedActions = [\n      { type: types.FETCH_USERS_REQUEST },\n      { type: types.FETCH_USERS_FAILURE }\n    ]\n\n    function mockDispatch(action) {\n      var expectedAction = expectedActions.shift();\n      assert(action['type'] === expectedAction['type']);\n      if (!expectedActions.length) {\n        done();\n      }\n    }\n    actions.fetchUsers()(mockDispatch);\n  });\n});\n\n\n\u3053\u3093\u306a\u611f\u3058\u306b\u66f8\u3051\u307e\u3059\u3002\n\u7c21\u5358\u306b\u89e3\u8aac\u3059\u308b\u3068\u3001\n\u307e\u305aAPI\u306e\u30e2\u30c3\u30af\u306b\u306fnock\u3092\u4f7f\u3044\u307e\u3057\u305f\u3002\u51c4\u304f\u7c21\u5358\u306b\u4f7f\u3048\u3066\u4fbf\u5229\u3067\u3059\u306d\u3002\n\u6b21\u306bassert\u306e\u90e8\u5206\u3067\u3059\u3002\u975e\u540c\u671f\u306aaction\u306e\u5834\u5408\u3001\u8907\u6570\u306eaction\u304c\u751f\u6210\u3055\u308c\u3066\u9806\u756a\u306b\u51e6\u7406\u3055\u308c\u3066\u3044\u304d\u307e\u3059\u3002\u305d\u306e\u305f\u30811\u3064\u76ee\u306eaction(\u3053\u306e\u5834\u5408\u3060\u3068FETCH_USERS_REQUEST)\u3092\u51e6\u7406\u3057\u305f\u3042\u3068\u3001\u6b21\u306eaction(FETCH_USERS_SUCCESS\u304bFETCH_USERS_FAILURE)\u304c\u51e6\u7406\u3055\u308c\u307e\u3059\u3002\u306a\u306e\u30671\u3064\u306e\u30c6\u30b9\u30c8\u30672\u3064\u306eaction\u304c\u751f\u6210\u3055\u308c\u308b\u3053\u3068\u304c\u30c6\u30b9\u30c8\u3067\u304d\u308c\u3070\u826f\u3055\u305d\u3046\u3067\u3059\u3002\n\u3000\u3000let expectedActions = [\n      { type: types.FETCH_USERS_REQUEST },\n      { type: types.FETCH_USERS_SUCCESS, body: { users: {name: 'john'} } }\n    ]\n\n    function mockDispatch(action) {\n      var expectedAction = expectedActions.shift();\n      assert.deepEqual(action, expectedAction);\n      if (!expectedActions.length) {\n        done();\n      }\n    }\n    actions.fetchUsers()(mockDispatch);\n\n\n\u306a\u306e\u3067\u3001\u3053\u3093\u306a\u611f\u3058\u306b\u66f8\u3044\u3066\u30c6\u30b9\u30c8\u3092\u3057\u3066\u307f\u307e\u3057\u305f\u3002\n\u3053\u3046\u3059\u308c\u3070action\u306e\u751f\u6210\u3055\u308c\u308b\u9806\u756a\u3082\u30c6\u30b9\u30c8\u3067\u304d\u307e\u3059\u3057\u3001\u826f\u3055\u305d\u3046\u3067\u3059\u3002(https://github.com/rackt/redux/issues/546 \u3092\u51c4\u304f\u53c2\u8003\u306b\u3057\u307e\u3057\u305f\u3002\u3002)\nredux\u3001\u307e\u3060\u307e\u3060\u77e5\u898b\u304c\u5c11\u306a\u3044\u3067\u3059\u304c\u697d\u3057\u3044\u3067\u3059\u306d\u3002cycle.js\u3082\u6c17\u306b\u306a\u3063\u3066\u3044\u308b\u306e\u3067\u305d\u3061\u3089\u3082\u8a66\u3057\u3066\u3044\u3053\u3046\u304b\u306a\u3068\u601d\u3044\u307e\u3059\u3002\n\n> \u8ffd\u8a18(2015/10/16)\n\n> [\u30b3\u30e1\u30f3\u30c8\u6b04\u306b\u3066 @kawaz\u3055\u3093\u306b\u3054\u6307\u6458\u3044\u305f\u3060\u3044\u305f](http://qiita.com/takashi/items/7c8e0d9942f25a8c3999#comment-a230249d450e93ddcebc)package.json\u5185\u306escripts\u306b\u304a\u3051\u308b\u4f9d\u5b58\u30d1\u30c3\u30b1\u30fc\u30b8\u306e\u30b3\u30de\u30f3\u30c9\u547c\u3073\u51fa\u3057\u3092\u4fee\u6b63\u3057\u307e\u3057\u305f\u3002\n\n\n\n> \u8ffd\u8a18(2015/10/10)\n\n> redux\u306bdoc\u8ffd\u52a0\u306epull request\u3092\u9001\u3063\u305f\u3068\u3053\u308d\u3001[merge\u3055\u308c\u3066](https://github.com/rackt/redux/pull/876) \u305d\u306e\u5f8c `applyMiddleware()`\u3092\u4f7f\u3046\u65b9\u6cd5\u306e\u307b\u3046\u304c\u826f\u3044\u3063\u3066\u3053\u3068\u3067tweak\u3055\u308c\u3066\u307e\u3059\u3002 [applyMiddleware\u3092\u4f7f\u3046\u65b9\u6cd5\u306f\u3053\u3061\u3089](https://rackt.github.io/redux/docs/recipes/WritingTests.html)\n\nes6\u3044\u3044\u3067\u3059\u3088\u306d\u3002\u6700\u8fd1redux\u3092\u4f7f\u3063\u3066\u304a\u308a\u3001\u305d\u306e\u95a2\u4fc2\u3067es6\u3067\u306e\u30c6\u30b9\u30c8\u30b3\u30fc\u30c9\u306e\u66f8\u304d\u65b9\u3082\u542b\u3081\u3056\u3063\u3068\u8abf\u3079\u305f\u3044\u3068\u601d\u3063\u305f\u306e\u3067\u307e\u3068\u3081\u307e\u3059\u3002\n\n\n## \u30c6\u30b9\u30c8\u74b0\u5883\u306e\u30bb\u30c3\u30c8\u30a2\u30c3\u30d7\n\n\u30a2\u30b5\u30fc\u30b7\u30e7\u30f3\u306b\u306f\u3001power-assert\u3092\u4f7f\u3044\u305f\u3044\u3068\u601d\u3044\u307e\u3059\u3002\u30c6\u30b9\u30c8\u30e9\u30f3\u30ca\u30fc\u306fpower-assert\u516c\u5f0f\u3067\u3082\u4f7f\u3063\u3066\u3044\u308bmocha\u3067\u3002\n\nnpm\u3092\u4f7f\u3063\u3066\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3057\u3066\u3044\u304d\u307e\u3059\u3002\n\n```\nnpm install -D mocha power-assert espower-babel\n```\n\n`espower-babel` \u306fbabel\u3092\u7528\u3044\u3066es6\u3067\u66f8\u3044\u305f\u30c6\u30b9\u30c8\u30b3\u30fc\u30c9\u306e\u5909\u63db+power-assert\u3092\u5b9f\u884c\u3059\u308b\u305f\u3081\u306e\u30b3\u30fc\u30c9\u5909\u63db\u3092\u884c\u3046\u305f\u3081\u306e\u30e9\u30a4\u30d6\u30e9\u30ea\u3067\u3059\u3002\u4fbf\u5229\u3067\u3059\u306d\u3002\n\n\n\u6b21\u306bpackage.json\u306b\u30c6\u30b9\u30c8\u30b3\u30fc\u30c9\u3092\u5b9f\u884c\u3059\u308b\u305f\u3081\u306escript\u3092\u8ffd\u8a18\u3057\u3066\u3044\u304d\u307e\u3059\u3002\n\n\u4eca\u56de\u306f\u3001`test/` \u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u4ee5\u4e0b\u306b\u30c6\u30b9\u30c8\u30b3\u30fc\u30c9\u3092\u66f8\u3044\u3066\u3044\u304d\u307e\u3059\u3002\n\n```\n// \u7701\u7565\n\"scripts\": {\n  // \u8ffd\u8a18\n  \"test\": \"mocha --compilers js:espower-babel/guess test/**/*.spec.js\",\n}\n```\n\n\u30d3\u30eb\u30c9\u30b9\u30af\u30ea\u30d7\u30c8\u3082\u542b\u3081\u3066package.json\u306b\u66f8\u3051\u3070\u30c4\u30fc\u30eb\u3054\u3068\u306b\u4f7f\u3044\u65b9\u3092\u77e5\u3089\u306a\u304f\u3066\u3088\u3044\u306e\u3067\u91cd\u5b9d\u3057\u3066\u307e\u3059\u3002\u3042\u3068`$(npm bin)`\u3092\u4f7f\u3048\u3070\u30b0\u30ed\u30fc\u30d0\u30eb\u306b\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3057\u3066\u3044\u308b\u5fc5\u8981\u304c\u306a\u3044\u306e\u304c\u826f\u3044\u3067\u3059\u306d\u3002\n\n\u3053\u3053\u307e\u3067\u3067\u30c6\u30b9\u30c8\u30b3\u30fc\u30c9\u306e\u30bb\u30c3\u30c8\u30a2\u30c3\u30d7\u306f\u5b8c\u4e86\u3067\u3059\u3002\u3042\u3068\u306f\u66f8\u3044\u3066\u3044\u304f\u3060\u3051\u3067\u3059\u3002\u7c21\u5358\uff01\uff01\uff01\uff01\uff01\n\n\n## redux\u306e\u30c6\u30b9\u30c8\u30b3\u30fc\u30c9\u3092\u66f8\u304f\n\nredux\u306f\u4ed6\u306eflux\u306b\u6bd4\u3079\u3066\u307b\u3068\u3093\u3069\u306e\u90e8\u54c1\u304c\u72b6\u614b\u3092\u6301\u305f\u306a\u3044\u305f\u3060\u306e\u95a2\u6570\u306a\u306e\u3067\u3001\u3068\u3066\u3082\u30c6\u30b9\u30c8\u3057\u3084\u3059\u304f\u306a\u3063\u3066\u3044\u307e\u3059\u3002\n\n[\u516c\u5f0f\u306b\u3082\u307e\u3068\u307e\u3063\u3066\u304a\u308a](https://rackt.github.io/redux/docs/recipes/WritingTests.html)\u3001\u3053\u3061\u3089\u3082\u5927\u5909\u5206\u304b\u308a\u3084\u3059\u3044\u306e\u3067\u3059\u304c\u3001\u975e\u540c\u671f\u306aaction\u306e\u30c6\u30b9\u30c8\u306b\u95a2\u3059\u308b\u8a18\u8ff0\u304c\u306a\u304b\u3063\u305f\u306e\u3067\u305d\u3061\u3089\u3092\u4f8b\u306b\u4e0a\u3052\u3066\u30c6\u30b9\u30c8\u3092\u66f8\u3044\u3066\u898b\u305f\u3044\u3068\u601d\u3044\u307e\u3059\u3002\n\n\u4f8b\u3068\u3057\u3066\n\n```js\nimport fetch from 'isomorphic-fetch';\nimport {\n  FETCH_USERS_REQUEST,\n  FETCH_USERS_SUCCESS,\n  FETCH_USERS_FAILURE\n} from '../constants/ActionTypes';\n\nfunction fetchUsersRequest() {\n  return {\n    type: FETCH_USERS_REQUEST\n  };\n}\n\nfunction fetchUsersSuccess(body) {\n  return {\n    type: FETCH_USERS_SUCCESS,\n    body\n  };\n}\n\nfunction fetchUsersFailure(ex) {\n  return {\n    type: FETCH_USERS_FAILURE,\n    ex\n  };\n}\n\nexport function fetchUsers() {\n  return dispatch => {\n    dispatch(fetchUsersRequest());\n    return fetch('http://localhost:3000/users')\n      .then(response => response.json())\n      .then(json => dispatch(fetchUsersSuccess(json.body)))\n      .catch(ex => dispatch(fetchUsersFailure(ex)));\n  };\n}\n\n```\n\n\u3053\u3093\u306a\u611f\u3058\u306e\u975e\u540c\u671f\u306aaction creator\u3092\u5b9a\u7fa9\u3057\u305f\u3068\u3057\u307e\u3059\u3002fetch\u3059\u308b\u5148\u306flocalhost\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u304c\u3001API\u30b5\u30fc\u30d0\u304b\u3089\u53d6\u3063\u3066\u304f\u308b\u30a4\u30e1\u30fc\u30b8\u3067\n\n\n```js\nimport assert from 'power-assert';\nimport nock from 'nock'\nimport * as types from '../../src/constants/ActionTypes';\nimport * as actions from '../../src/actions/users';\n\ndescribe('user actions', () => {\n  afterEach(() => nock.cleanAll() );\n\n  it('creates FETCH_USERS_SUCCESS when fechting user has been done', (done) => {\n    nock('http://localhost:3000/')\n      .get('/users')\n      .reply(200, { users: {name: 'john'} });\n\n    let expectedActions = [\n      { type: types.FETCH_USERS_REQUEST },\n      { type: types.FETCH_USERS_SUCCESS, body: { users: {name: 'john'} } }\n    ]\n\n    function mockDispatch(action) {\n      var expectedAction = expectedActions.shift();\n      assert.deepEqual(action, expectedAction);\n      if (!expectedActions.length) {\n        done();\n      }\n    }\n    actions.fetchUsers()(mockDispatch);\n  });\n\n  it('creates FETCH_USERS_FAILURE when fechting user has been failed', (done) => {\n    nock('http://localhost:3000/')\n      .get('/users')\n      .replyWithError('something happened');\n\n    let expectedActions = [\n      { type: types.FETCH_USERS_REQUEST },\n      { type: types.FETCH_USERS_FAILURE }\n    ]\n\n    function mockDispatch(action) {\n      var expectedAction = expectedActions.shift();\n      assert(action['type'] === expectedAction['type']);\n      if (!expectedActions.length) {\n        done();\n      }\n    }\n    actions.fetchUsers()(mockDispatch);\n  });\n});\n\n```\n\n\u3053\u3093\u306a\u611f\u3058\u306b\u66f8\u3051\u307e\u3059\u3002\n\n\u7c21\u5358\u306b\u89e3\u8aac\u3059\u308b\u3068\u3001\n\n\u307e\u305aAPI\u306e\u30e2\u30c3\u30af\u306b\u306f[nock](https://github.com/pgte/nock)\u3092\u4f7f\u3044\u307e\u3057\u305f\u3002\u51c4\u304f\u7c21\u5358\u306b\u4f7f\u3048\u3066\u4fbf\u5229\u3067\u3059\u306d\u3002\n\n\u6b21\u306bassert\u306e\u90e8\u5206\u3067\u3059\u3002\u975e\u540c\u671f\u306aaction\u306e\u5834\u5408\u3001\u8907\u6570\u306eaction\u304c\u751f\u6210\u3055\u308c\u3066\u9806\u756a\u306b\u51e6\u7406\u3055\u308c\u3066\u3044\u304d\u307e\u3059\u3002\u305d\u306e\u305f\u30811\u3064\u76ee\u306eaction(\u3053\u306e\u5834\u5408\u3060\u3068FETCH_USERS_REQUEST)\u3092\u51e6\u7406\u3057\u305f\u3042\u3068\u3001\u6b21\u306eaction(FETCH_USERS_SUCCESS\u304bFETCH_USERS_FAILURE)\u304c\u51e6\u7406\u3055\u308c\u307e\u3059\u3002\u306a\u306e\u30671\u3064\u306e\u30c6\u30b9\u30c8\u30672\u3064\u306eaction\u304c\u751f\u6210\u3055\u308c\u308b\u3053\u3068\u304c\u30c6\u30b9\u30c8\u3067\u304d\u308c\u3070\u826f\u3055\u305d\u3046\u3067\u3059\u3002\n\n\n```js\n\u3000\u3000let expectedActions = [\n      { type: types.FETCH_USERS_REQUEST },\n      { type: types.FETCH_USERS_SUCCESS, body: { users: {name: 'john'} } }\n    ]\n\n    function mockDispatch(action) {\n      var expectedAction = expectedActions.shift();\n      assert.deepEqual(action, expectedAction);\n      if (!expectedActions.length) {\n        done();\n      }\n    }\n    actions.fetchUsers()(mockDispatch);\n\n```\n\n\u306a\u306e\u3067\u3001\u3053\u3093\u306a\u611f\u3058\u306b\u66f8\u3044\u3066\u30c6\u30b9\u30c8\u3092\u3057\u3066\u307f\u307e\u3057\u305f\u3002\n\u3053\u3046\u3059\u308c\u3070action\u306e\u751f\u6210\u3055\u308c\u308b\u9806\u756a\u3082\u30c6\u30b9\u30c8\u3067\u304d\u307e\u3059\u3057\u3001\u826f\u3055\u305d\u3046\u3067\u3059\u3002(https://github.com/rackt/redux/issues/546 \u3092\u51c4\u304f\u53c2\u8003\u306b\u3057\u307e\u3057\u305f\u3002\u3002)\n\n\n\nredux\u3001\u307e\u3060\u307e\u3060\u77e5\u898b\u304c\u5c11\u306a\u3044\u3067\u3059\u304c\u697d\u3057\u3044\u3067\u3059\u306d\u3002cycle.js\u3082\u6c17\u306b\u306a\u3063\u3066\u3044\u308b\u306e\u3067\u305d\u3061\u3089\u3082\u8a66\u3057\u3066\u3044\u3053\u3046\u304b\u306a\u3068\u601d\u3044\u307e\u3059\u3002\n\n\n\n\n", "tags": ["redux", "es6", "JavaScript"]}