{"context": " More than 1 year has passed since last update.Project Euler\u3067\u3088\u304f\u4f7f\u3046\u7d20\u6570\u95a2\u4fc2\u306e\u30e1\u30bd\u30c3\u30c9\u3092\u4f5c\u3063\u3066\u307f\u305f\u3002\n\u4e00\u5fdc\u7c21\u5358\u306a\u30c6\u30b9\u30c8\u3082\u66f8\u3044\u3066\u307f\u305f\u3002UnitTest\u306a\u3069\u306e\u30c6\u30b9\u30c8\u30c4\u30fc\u30eb\u306a\u3069\u3092\u4f7f\u3063\u305f\u307b\u3046\u304c\u826f\u3044\u306e\u304b\u3082\u3057\u308c\u306a\u3044\u3051\u3069\u3001\u305d\u308c\u3089\u306e\u30c4\u30fc\u30eb\u306e\u4ed5\u69d8\u3092\u3088\u304f\u77e5\u3089\u306a\u3044\u306e\u3067\u3001\u9069\u5f53\u306b\u30aa\u30ec\u30aa\u30ec\u3067\u66f8\u3044\u3066\u307f\u305f\u3002\n\u30d5\u30a1\u30a4\u30eb\u540d:mymath.py\n# coding:utf-8\nimport math\n\ndef get_prime_boolean(max):\n    bool = [False,False]+[True]*(max-1)\n    # 2\u306e\u500d\u6570\u3092False\u306b\n    bool[4::2] = [False] * (len(bool[4::2]))\n    p = 3\n    p_max = int(math.sqrt(max))+1\n    while p<=p_max:\n        if bool[p]:\n          bool[p*2::p] = [False] * (len(bool[p**2::p]))\n        p+=2\n    return bool\n\ndef get_prime_list(bool):\n    length = len(bool)\n    return [i for i in range(2,length) if bool[i]]\n\ndef get_primes(max):\n    bool = get_prime_boolean(max)\n    list = get_prime_list(bool)\n    return {'bool':bool,'list':list}\n\ndef factor(num,pri):\n    ret=[]\n    max = int(math.sqrt(num))\n    if num < len(pri['bool']) and pri['bool'][num]:\n        return [num]\n    for p in pri['list']:\n        while not num % p:\n            ret.append(p)\n            num //= p\n    if num>=2:\n        ret.append(num)\n    ret.sort()\n    return ret\n\ndef factor_dict(num,pri):\n    fct_list = factor(num,pri)\n    fct_dict = {}\n    for i in set(fct_list):\n        fct_dict[i] = fct_list.count(i)\n    return fct_dict\n\ndef sum_factors(num,pri):\n    if num == 0:\n      return 0\n    fct_dict = factor_dict(num,pri)\n    ans = 1\n    for k,v in fct_dict.items():\n        ans *= (k ** (v+1) - 1) / (k-1)\n    return ans\n\ndef get_number_of_factor(num,pri):\n    d = factor_dict(num,pri)\n    ans = 1\n    for v in d.values():\n        ans *= v+1\n    return ans\n\ndef lcm_dict(num1,num2):\n    ret = {}\n    ret.update(num1)\n    for k in num2.keys():\n        if k in num1 and num1[k] < num2[k]:\n            ret[k] = num2[k]\n        elif not k in num1:\n            ret[k] = num2[k]\n    return ret\n\ndef factor_seq(max):\n  ret = [[0]]\n  for i in range(max):\n    ret += [[1]]\n  seq = range(max+1)\n  for i in seq[2:max//2+1]:\n    for j in seq[i*2::i]:\n      ret[j] += [i]\n  return ret\n\ndef factor_sum_seq(max):\n  ret = [0]  + [1] * max\n  seq = range(max+1)\n  for i in seq[2:max//2+1]:\n    for j in seq[i*2::i]:\n      ret[j] += i\n  return ret\n\ndef factor_num_seq(max):\n  ret = [0]  + [1] * max\n  seq = range(max+1)\n  for i in seq[2:max//2+1]:\n    for j in seq[i*2::i]:\n      ret[j] += 1\n  return ret\n\ndef dict2num(dict):\n  r = 1\n  for k in dict.keys():\n    r *= k**dict[k]\n  return r\n\n\ndef sum_nums(s,l,diff):\n    n = (l - s + diff)//diff\n    return (n*(s+l))/2\n\ndef sum_squars(max):\n    return (max*(max+1)*(2*max+1))/6\n\ndef chk(output,expected,err_msg):\n    if output == expected:\n        return True\n    else:\n        print \"output: %s\" % output\n        print \"expected: %s\" % expected \n        print err_msg\n        return False\n\ndef test_get_prime_boolean1():\n    input = 24\n    output = get_prime_boolean(input)\n    expected = [\n        False, #0\n        False, True, True, False, True, False, True, False, False, False, #1 to 10\n        True, False, True, False, False, False, True, False, True, False, #11 to 20\n        False, False, True, False #21 to 24\n    ]\n    return chk(output, expected, \"test_get_prime_boolean1() error\")\n\ndef test_get_prime_boolean2():\n    input = 25\n    output = get_prime_boolean(input)\n    expected = [\n        False, #0\n        False, True, True, False, True, False, True, False, False, False, #1 to 10\n        True, False, True, False, False, False, True, False, True, False, #11 to 20\n        False, False, True, False, False #21 to 25\n    ]\n    return chk(output, expected, \"test_get_prime_boolean2() error\")\n\ndef test_get_prime_list1():\n    input = [\n        False, #0\n        False, True, True, False, True, False, True, False, False, False, #1 to 10\n        True, False, True, False, False, False, True, False, True, False, #11 to 20\n        False, False, True, False, False #21 to 25\n    ]\n    output = get_prime_list(input)\n    expected = [2, 3, 5, 7, 11, 13, 17, 19, 23]\n    return chk(output, expected, \"test_get_prime_list1() error\")\n\ndef test_get_prime_list2():\n    # last number is prime\n    input = [\n        False, #0\n        False, True, True, False, True, False, True, False, False, False, #1 to 10\n        True, False, True, False, False, False, True, False, True, False, #11 to 20\n        False, False, True #21 to 23\n    ]\n    output = get_prime_list(input)\n    expected = [2, 3, 5, 7, 11, 13, 17, 19, 23]\n    return chk(output, expected, \"test_get_prime_list2() error\")\n\ndef test_get_prime_list3():\n    # last number is not prime\n    input = [\n        False, #0\n        False, True, True, False, True, False, True, False, False, False, #1 to 10\n        True, False, True, False, False, False, True, False, True, False, #11 to 20\n        False, False #21 to 22\n    ]\n    output = get_prime_list(input)\n    expected = [2, 3, 5, 7, 11, 13, 17, 19]\n    return chk(output, expected, \"test_get_prime_list3() error\")\n\ndef test_get_primes():\n    input = 25\n    output = get_primes(input)\n    expected = {'bool':[\n        False, #0\n        False, True, True, False, True, False, True, False, False, False, #1 to 10\n        True, False, True, False, False, False, True, False, True, False, #11 to 20\n        False, False, True, False, False #21 to 25\n    ],\n    'list':[2, 3, 5, 7, 11, 13, 17, 19, 23]}\n    return chk(output, expected, \"test_get_primes() error\")\n\ndef test_factor1():\n    input1 = 23\n    input2 = {'bool':[\n        False, #0\n        False, True, True, False, True, False, True, False, False, False, #1 to 10\n        True, False, True, False, False, False, True, False, True, False, #11 to 20\n        False, False, True, False, False #21 to 25\n    ],\n    'list':[2, 3, 5, 7, 11, 13, 17, 19, 23]}\n    output = factor(input1,input2)\n    expected = [23]\n    return chk(output, expected, \"test_factor1() error\")\n\ndef test_factor2():\n    input1 = 625\n    input2 = {'bool':[\n        False, #0\n        False, True, True, False, True, False, True, False, False, False, #1 to 10\n        True, False, True, False, False, False, True, False, True, False, #11 to 20\n        False, False, True, False, False #21 to 25\n    ],\n    'list':[2, 3, 5, 7, 11, 13, 17, 19, 23]}\n    output = factor(input1,input2)\n    expected = [5,5,5,5]\n    return chk(output, expected, \"test_factor2() error\")\n\ndef test_factor3():\n    input1 = 619\n    input2 = {'bool':[\n        False, #0\n        False, True, True, False, True, False, True, False, False, False, #1 to 10\n        True, False, True, False, False, False, True, False, True, False, #11 to 20\n        False, False, True, False, False #21 to 25\n    ],\n    'list':[2, 3, 5, 7, 11, 13, 17, 19, 23]}\n    output = factor(input1,input2)\n    expected = [619]\n    return chk(output, expected, \"test_factor3() error\")\n\ndef test_factor4():\n    input1 = 100\n    input2 = {'bool':[\n        False, #0\n        False, True, True, False, True, False, True, False, False, False, #1 to 10\n        True, False, True, False, False, False, True, False, True, False, #11 to 20\n        False, False, True, False, False #21 to 25\n    ],\n    'list':[2, 3, 5, 7, 11, 13, 17, 19, 23]}\n    output = factor(input1,input2)\n    expected = [2,2,5,5]\n    return chk(output, expected, \"test_factor4() error\")\n\ndef test_factor_dict1():\n    input1 = 100\n    input2 = {'bool':[\n        False, #0\n        False, True, True, False, True, False, True, False, False, False, #1 to 10\n        True, False, True, False, False, False, True, False, True, False, #11 to 20\n        False, False, True, False, False #21 to 25\n    ],\n    'list':[2, 3, 5, 7, 11, 13, 17, 19, 23]}\n    output = factor_dict(input1,input2)\n    expected = {2:2,5:2}\n    return chk(output, expected, \"test_factor_dict1() error\")\n\ndef test_factor_dict2():\n    input1 = 97\n    input2 = {'bool':[\n        False, #0\n        False, True, True, False, True, False, True, False, False, False, #1 to 10\n        True, False, True, False, False, False, True, False, True, False, #11 to 20\n        False, False, True, False, False #21 to 25\n    ],\n    'list':[2, 3, 5, 7, 11, 13, 17, 19, 23]}\n    output = factor_dict(input1,input2)\n    expected = {97:1}\n    return chk(output, expected, \"test_factor_dict2() error\")\n\ndef test_lcm_dict():\n    input1 = {2:2,3:3}\n    input2 = {2:4,5:1}\n    output = lcm_dict(input1,input2)\n    expected = {2:4,3:3,5:1}\n    return chk(output, expected, \"test_lcm_dict() error\")\n\ndef test_time(func,input,name,ok_time):\n    import time\n    start = time.time()\n    func(input)\n    end = time.time()\n    if end-start <= ok_time:\n        print \"%s finished in time.\" % name\n        print end-start\n        return True\n    else:\n        print \"!!!WARING!!! %s dose not finished in time.\" % name\n        print end-start\n        return False\n\ndef test_time_get_prime_boolean():\n    return test_time(get_prime_boolean,10**6,\"get_prime_boolean\",0.2)\n\ndef tests():\n    test_list = [ \n        test_get_prime_boolean1,\n        test_get_prime_boolean2,\n        test_get_prime_list1,\n        test_get_prime_list2,\n        test_get_prime_list3,\n        test_get_primes,\n        test_factor1,\n        test_factor2,\n        test_factor3,\n        test_factor4,\n        test_factor_dict1,\n        test_factor_dict2,\n        test_lcm_dict,\n        test_time_get_prime_boolean\n    ]\n    fail = 0\n    for test in test_list:\n        if not test():\n            print test\n            fail += 1\n    if fail == 0:\n        print \"All test was successful!\"\n    else:\n        print \"%d tests failed!\" % fail\n\n\nif __name__=='__main__': \n    tests()\n\nProject Euler\u3067\u3088\u304f\u4f7f\u3046\u7d20\u6570\u95a2\u4fc2\u306e\u30e1\u30bd\u30c3\u30c9\u3092\u4f5c\u3063\u3066\u307f\u305f\u3002\n\u4e00\u5fdc\u7c21\u5358\u306a\u30c6\u30b9\u30c8\u3082\u66f8\u3044\u3066\u307f\u305f\u3002UnitTest\u306a\u3069\u306e\u30c6\u30b9\u30c8\u30c4\u30fc\u30eb\u306a\u3069\u3092\u4f7f\u3063\u305f\u307b\u3046\u304c\u826f\u3044\u306e\u304b\u3082\u3057\u308c\u306a\u3044\u3051\u3069\u3001\u305d\u308c\u3089\u306e\u30c4\u30fc\u30eb\u306e\u4ed5\u69d8\u3092\u3088\u304f\u77e5\u3089\u306a\u3044\u306e\u3067\u3001\u9069\u5f53\u306b\u30aa\u30ec\u30aa\u30ec\u3067\u66f8\u3044\u3066\u307f\u305f\u3002\n\u30d5\u30a1\u30a4\u30eb\u540d:mymath.py\n\n```py\n# coding:utf-8\nimport math\n\ndef get_prime_boolean(max):\n    bool = [False,False]+[True]*(max-1)\n    # 2\u306e\u500d\u6570\u3092False\u306b\n    bool[4::2] = [False] * (len(bool[4::2]))\n    p = 3\n    p_max = int(math.sqrt(max))+1\n    while p<=p_max:\n        if bool[p]:\n          bool[p*2::p] = [False] * (len(bool[p**2::p]))\n        p+=2\n    return bool\n\ndef get_prime_list(bool):\n    length = len(bool)\n    return [i for i in range(2,length) if bool[i]]\n\ndef get_primes(max):\n    bool = get_prime_boolean(max)\n    list = get_prime_list(bool)\n    return {'bool':bool,'list':list}\n\ndef factor(num,pri):\n    ret=[]\n    max = int(math.sqrt(num))\n    if num < len(pri['bool']) and pri['bool'][num]:\n        return [num]\n    for p in pri['list']:\n        while not num % p:\n            ret.append(p)\n            num //= p\n    if num>=2:\n        ret.append(num)\n    ret.sort()\n    return ret\n\ndef factor_dict(num,pri):\n    fct_list = factor(num,pri)\n    fct_dict = {}\n    for i in set(fct_list):\n        fct_dict[i] = fct_list.count(i)\n    return fct_dict\n\ndef sum_factors(num,pri):\n    if num == 0:\n      return 0\n    fct_dict = factor_dict(num,pri)\n    ans = 1\n    for k,v in fct_dict.items():\n        ans *= (k ** (v+1) - 1) / (k-1)\n    return ans\n\ndef get_number_of_factor(num,pri):\n    d = factor_dict(num,pri)\n    ans = 1\n    for v in d.values():\n        ans *= v+1\n    return ans\n\ndef lcm_dict(num1,num2):\n    ret = {}\n    ret.update(num1)\n    for k in num2.keys():\n        if k in num1 and num1[k] < num2[k]:\n            ret[k] = num2[k]\n        elif not k in num1:\n            ret[k] = num2[k]\n    return ret\n\ndef factor_seq(max):\n  ret = [[0]]\n  for i in range(max):\n    ret += [[1]]\n  seq = range(max+1)\n  for i in seq[2:max//2+1]:\n    for j in seq[i*2::i]:\n      ret[j] += [i]\n  return ret\n\ndef factor_sum_seq(max):\n  ret = [0]  + [1] * max\n  seq = range(max+1)\n  for i in seq[2:max//2+1]:\n    for j in seq[i*2::i]:\n      ret[j] += i\n  return ret\n\ndef factor_num_seq(max):\n  ret = [0]  + [1] * max\n  seq = range(max+1)\n  for i in seq[2:max//2+1]:\n    for j in seq[i*2::i]:\n      ret[j] += 1\n  return ret\n\ndef dict2num(dict):\n  r = 1\n  for k in dict.keys():\n    r *= k**dict[k]\n  return r\n\n\ndef sum_nums(s,l,diff):\n    n = (l - s + diff)//diff\n    return (n*(s+l))/2\n\ndef sum_squars(max):\n    return (max*(max+1)*(2*max+1))/6\n\ndef chk(output,expected,err_msg):\n    if output == expected:\n        return True\n    else:\n        print \"output: %s\" % output\n        print \"expected: %s\" % expected \n        print err_msg\n        return False\n\ndef test_get_prime_boolean1():\n    input = 24\n    output = get_prime_boolean(input)\n    expected = [\n        False, #0\n        False, True, True, False, True, False, True, False, False, False, #1 to 10\n        True, False, True, False, False, False, True, False, True, False, #11 to 20\n        False, False, True, False #21 to 24\n    ]\n    return chk(output, expected, \"test_get_prime_boolean1() error\")\n\ndef test_get_prime_boolean2():\n    input = 25\n    output = get_prime_boolean(input)\n    expected = [\n        False, #0\n        False, True, True, False, True, False, True, False, False, False, #1 to 10\n        True, False, True, False, False, False, True, False, True, False, #11 to 20\n        False, False, True, False, False #21 to 25\n    ]\n    return chk(output, expected, \"test_get_prime_boolean2() error\")\n\ndef test_get_prime_list1():\n    input = [\n        False, #0\n        False, True, True, False, True, False, True, False, False, False, #1 to 10\n        True, False, True, False, False, False, True, False, True, False, #11 to 20\n        False, False, True, False, False #21 to 25\n    ]\n    output = get_prime_list(input)\n    expected = [2, 3, 5, 7, 11, 13, 17, 19, 23]\n    return chk(output, expected, \"test_get_prime_list1() error\")\n\ndef test_get_prime_list2():\n    # last number is prime\n    input = [\n        False, #0\n        False, True, True, False, True, False, True, False, False, False, #1 to 10\n        True, False, True, False, False, False, True, False, True, False, #11 to 20\n        False, False, True #21 to 23\n    ]\n    output = get_prime_list(input)\n    expected = [2, 3, 5, 7, 11, 13, 17, 19, 23]\n    return chk(output, expected, \"test_get_prime_list2() error\")\n\ndef test_get_prime_list3():\n    # last number is not prime\n    input = [\n        False, #0\n        False, True, True, False, True, False, True, False, False, False, #1 to 10\n        True, False, True, False, False, False, True, False, True, False, #11 to 20\n        False, False #21 to 22\n    ]\n    output = get_prime_list(input)\n    expected = [2, 3, 5, 7, 11, 13, 17, 19]\n    return chk(output, expected, \"test_get_prime_list3() error\")\n\ndef test_get_primes():\n    input = 25\n    output = get_primes(input)\n    expected = {'bool':[\n        False, #0\n        False, True, True, False, True, False, True, False, False, False, #1 to 10\n        True, False, True, False, False, False, True, False, True, False, #11 to 20\n        False, False, True, False, False #21 to 25\n    ],\n    'list':[2, 3, 5, 7, 11, 13, 17, 19, 23]}\n    return chk(output, expected, \"test_get_primes() error\")\n\ndef test_factor1():\n    input1 = 23\n    input2 = {'bool':[\n        False, #0\n        False, True, True, False, True, False, True, False, False, False, #1 to 10\n        True, False, True, False, False, False, True, False, True, False, #11 to 20\n        False, False, True, False, False #21 to 25\n    ],\n    'list':[2, 3, 5, 7, 11, 13, 17, 19, 23]}\n    output = factor(input1,input2)\n    expected = [23]\n    return chk(output, expected, \"test_factor1() error\")\n\ndef test_factor2():\n    input1 = 625\n    input2 = {'bool':[\n        False, #0\n        False, True, True, False, True, False, True, False, False, False, #1 to 10\n        True, False, True, False, False, False, True, False, True, False, #11 to 20\n        False, False, True, False, False #21 to 25\n    ],\n    'list':[2, 3, 5, 7, 11, 13, 17, 19, 23]}\n    output = factor(input1,input2)\n    expected = [5,5,5,5]\n    return chk(output, expected, \"test_factor2() error\")\n\ndef test_factor3():\n    input1 = 619\n    input2 = {'bool':[\n        False, #0\n        False, True, True, False, True, False, True, False, False, False, #1 to 10\n        True, False, True, False, False, False, True, False, True, False, #11 to 20\n        False, False, True, False, False #21 to 25\n    ],\n    'list':[2, 3, 5, 7, 11, 13, 17, 19, 23]}\n    output = factor(input1,input2)\n    expected = [619]\n    return chk(output, expected, \"test_factor3() error\")\n\ndef test_factor4():\n    input1 = 100\n    input2 = {'bool':[\n        False, #0\n        False, True, True, False, True, False, True, False, False, False, #1 to 10\n        True, False, True, False, False, False, True, False, True, False, #11 to 20\n        False, False, True, False, False #21 to 25\n    ],\n    'list':[2, 3, 5, 7, 11, 13, 17, 19, 23]}\n    output = factor(input1,input2)\n    expected = [2,2,5,5]\n    return chk(output, expected, \"test_factor4() error\")\n\ndef test_factor_dict1():\n    input1 = 100\n    input2 = {'bool':[\n        False, #0\n        False, True, True, False, True, False, True, False, False, False, #1 to 10\n        True, False, True, False, False, False, True, False, True, False, #11 to 20\n        False, False, True, False, False #21 to 25\n    ],\n    'list':[2, 3, 5, 7, 11, 13, 17, 19, 23]}\n    output = factor_dict(input1,input2)\n    expected = {2:2,5:2}\n    return chk(output, expected, \"test_factor_dict1() error\")\n\ndef test_factor_dict2():\n    input1 = 97\n    input2 = {'bool':[\n        False, #0\n        False, True, True, False, True, False, True, False, False, False, #1 to 10\n        True, False, True, False, False, False, True, False, True, False, #11 to 20\n        False, False, True, False, False #21 to 25\n    ],\n    'list':[2, 3, 5, 7, 11, 13, 17, 19, 23]}\n    output = factor_dict(input1,input2)\n    expected = {97:1}\n    return chk(output, expected, \"test_factor_dict2() error\")\n\ndef test_lcm_dict():\n    input1 = {2:2,3:3}\n    input2 = {2:4,5:1}\n    output = lcm_dict(input1,input2)\n    expected = {2:4,3:3,5:1}\n    return chk(output, expected, \"test_lcm_dict() error\")\n\ndef test_time(func,input,name,ok_time):\n    import time\n    start = time.time()\n    func(input)\n    end = time.time()\n    if end-start <= ok_time:\n        print \"%s finished in time.\" % name\n        print end-start\n        return True\n    else:\n        print \"!!!WARING!!! %s dose not finished in time.\" % name\n        print end-start\n        return False\n\ndef test_time_get_prime_boolean():\n    return test_time(get_prime_boolean,10**6,\"get_prime_boolean\",0.2)\n\ndef tests():\n    test_list = [ \n        test_get_prime_boolean1,\n        test_get_prime_boolean2,\n        test_get_prime_list1,\n        test_get_prime_list2,\n        test_get_prime_list3,\n        test_get_primes,\n        test_factor1,\n        test_factor2,\n        test_factor3,\n        test_factor4,\n        test_factor_dict1,\n        test_factor_dict2,\n        test_lcm_dict,\n        test_time_get_prime_boolean\n    ]\n    fail = 0\n    for test in test_list:\n        if not test():\n            print test\n            fail += 1\n    if fail == 0:\n        print \"All test was successful!\"\n    else:\n        print \"%d tests failed!\" % fail\n\n\nif __name__=='__main__': \n    tests()\n```\n", "tags": ["ProjectEuler", "Python"]}