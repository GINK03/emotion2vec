{"context": "\n\n\u30e6\u30cb\u30c3\u30c8\u30c6\u30b9\u30c8\u306e\u66f8\u304d\u65b9\nmix\u3092\u4f7f\u3046\u307e\u3067\u306e\u9593\u3001\uff11\u672c\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u3067\u30e6\u30cb\u30c3\u30c8\u30c6\u30b9\u30c8\u3092\u66f8\u3044\u3066\u3086\u304f\u306b\u306f\u3001\u305f\u3068\u3048\u3070\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u66f8\u304d\u307e\u3059\u3002\n\nadd_test.exs\nExUnit.start()\n\ndefmodule AddTest do\n  use ExUnit.Case\n  test \"add test\" do\n    assert 1+1==2\n    assert 1+2==2\n  end\nend\n\n\n\u5b9f\u884c\u3059\u308b\u3068\u3001\n$ elixir add_test.exs \n\n\n  1) test add test (AddTest)\n     add_test.exs:4\n     Assertion with == failed\n     code: 1 + 2 == 2\n     lhs:  3\n     rhs:  2\n     stacktrace:\n       add_test.exs:6: (test)\n\n\n\nFinished in 0.03 seconds (0.03s on load, 0.00s on tests)\n1 test, 1 failure\n\nRandomized with seed 375518\n\n\u30e6\u30cb\u30c3\u30c8\u30c6\u30b9\u30c8\uff11\u65e5\u76ee\u306e\u30b3\u30fc\u30c9\u3067\u3059\u3002\n\nfirst_test.exs\nExUnit.start()\n\ndefmodule StringTest do\n  use ExUnit.Case\n  test \"basic\" do\n    assert \"abc\"<>\"def\" === \"abcdef\"\n    assert String.length(\"abc\") === 3\n    assert String.slice(\"abcdef\",2..3) === \"cd\"\n    assert String.split(\"abc def\",\" \") === [\"abc\",\"def\"]\n    assert Enum.join([\"abc\",\"def\"],\",\") === \"abc,def\"\n\n    assert String.at(\"abcdef\",0) === \"a\"\n    assert String.at(\"abcdef\",1) === \"b\"\n    assert String.starts_with?(\"abcdef\",\"abc\")\n    assert String.ends_with?(\"abcdef\",\"def\")\n    assert String.trim(\"  abc  \\n\") == \"abc\"\n    assert String.upcase(\"aBc\") == \"ABC\"\n    assert String.downcase(\"AbC\") == \"abc\"\n    assert String.to_integer(\"16\") == 16\n    assert String.to_integer(\"1E\",16) == 30\n  end\n  test \"complex\" do\n    assert(Enum.map([\"abc\",\"def\"],&String.upcase(&1)) == [\"ABC\",\"DEF\"])\n    assert Enum.map([\"10\",\"20\"],&(String.to_integer(&1))) == [10,20]\n    assert Enum.map([\"10\",\"20\"],&String.to_integer/1) == [10,20]\n\n    with to_i = &(String.to_integer(&1))\n    do\n      assert to_i.(\"10\") == 10\n      assert Enum.map([\"10\",\"20\"], to_i) == [10,20]\n    end\n\n    with line = \"100 200\\n\"\n    do\n      result = line \n               |> String.trim \n               |> String.split \n               |> (Enum.map &String.to_integer(&1))  # to_integer/1\n      assert result == [100,200]\n    end\n\n  end\n  test \"embed\" do\n    num = 123\n    assert \"num=#{num}\" === \"num=123\"    \n    name = \"foo\"\n    assert \"name=#{name}\" === \"name=foo\"    \n    assert 'name=#{name}' === 'name=foo'    \n  end\n  test \"regex\" do\n    assert String.to_integer(\"1E\",16) == 30\n  end\nend\n\ndefmodule ListTest do\n  use ExUnit.Case\n  test \"list\" do\n    assert Enum.to_list(1..3) == [1,2,3]\n    assert [1,2,3]++[4,5,6] == [1,2,3,4,5,6]\n    assert Enum.concat([1,2,3],[4,5,6]) == [1,2,3,4,5,6]\n\n    with n=1,\n     list=[2,3]\n    do\n      assert [n|list] === [1,2,3]\n    end\n\n    with list = [1,2,3]\n    do\n      assert (hd list) === 1\n      assert (tl list) === [2,3]\n    end\n\n    with list = [1,2,3]\n    do\n      [head|tail] = list\n      assert head === 1\n      assert tail === [2,3]\n    end\n\n    with [first,second] = [1,2]\n    do\n      assert first == 1\n      assert second == 2\n    end\n  end\nend\n\n\n\n\u305d\u306e\u5b9f\u884c\u7d50\u679c\n$ elixir first_test.exs \n.....\n\nFinished in 0.09 seconds (0.08s on load, 0.01s on tests)\n5 tests, 0 failures\n\nRandomized with seed 703309\n\n\u697d\u3057\u3093\u3067\u306d\uff01\n## \u30e6\u30cb\u30c3\u30c8\u30c6\u30b9\u30c8\u306e\u66f8\u304d\u65b9\nmix\u3092\u4f7f\u3046\u307e\u3067\u306e\u9593\u3001\uff11\u672c\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u3067\u30e6\u30cb\u30c3\u30c8\u30c6\u30b9\u30c8\u3092\u66f8\u3044\u3066\u3086\u304f\u306b\u306f\u3001\u305f\u3068\u3048\u3070\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u66f8\u304d\u307e\u3059\u3002\n\n```elixir:add_test.exs\nExUnit.start()\n\ndefmodule AddTest do\n  use ExUnit.Case\n  test \"add test\" do\n    assert 1+1==2\n    assert 1+2==2\n  end\nend\n```\n\u5b9f\u884c\u3059\u308b\u3068\u3001\n\n```elixir:\n$ elixir add_test.exs \n\n\n  1) test add test (AddTest)\n     add_test.exs:4\n     Assertion with == failed\n     code: 1 + 2 == 2\n     lhs:  3\n     rhs:  2\n     stacktrace:\n       add_test.exs:6: (test)\n\n\n\nFinished in 0.03 seconds (0.03s on load, 0.00s on tests)\n1 test, 1 failure\n\nRandomized with seed 375518\n```\n\u30e6\u30cb\u30c3\u30c8\u30c6\u30b9\u30c8\uff11\u65e5\u76ee\u306e\u30b3\u30fc\u30c9\u3067\u3059\u3002\n\n```elixir:first_test.exs\nExUnit.start()\n\ndefmodule StringTest do\n  use ExUnit.Case\n  test \"basic\" do\n    assert \"abc\"<>\"def\" === \"abcdef\"\n    assert String.length(\"abc\") === 3\n    assert String.slice(\"abcdef\",2..3) === \"cd\"\n    assert String.split(\"abc def\",\" \") === [\"abc\",\"def\"]\n    assert Enum.join([\"abc\",\"def\"],\",\") === \"abc,def\"\n\n    assert String.at(\"abcdef\",0) === \"a\"\n    assert String.at(\"abcdef\",1) === \"b\"\n    assert String.starts_with?(\"abcdef\",\"abc\")\n    assert String.ends_with?(\"abcdef\",\"def\")\n    assert String.trim(\"  abc  \\n\") == \"abc\"\n    assert String.upcase(\"aBc\") == \"ABC\"\n    assert String.downcase(\"AbC\") == \"abc\"\n    assert String.to_integer(\"16\") == 16\n    assert String.to_integer(\"1E\",16) == 30\n  end\n  test \"complex\" do\n    assert(Enum.map([\"abc\",\"def\"],&String.upcase(&1)) == [\"ABC\",\"DEF\"])\n    assert Enum.map([\"10\",\"20\"],&(String.to_integer(&1))) == [10,20]\n    assert Enum.map([\"10\",\"20\"],&String.to_integer/1) == [10,20]\n\n    with to_i = &(String.to_integer(&1))\n    do\n      assert to_i.(\"10\") == 10\n      assert Enum.map([\"10\",\"20\"], to_i) == [10,20]\n    end\n\n    with line = \"100 200\\n\"\n    do\n      result = line \n               |> String.trim \n               |> String.split \n               |> (Enum.map &String.to_integer(&1))  # to_integer/1\n      assert result == [100,200]\n    end\n        \n  end\n  test \"embed\" do\n    num = 123\n    assert \"num=#{num}\" === \"num=123\"    \n    name = \"foo\"\n    assert \"name=#{name}\" === \"name=foo\"    \n    assert 'name=#{name}' === 'name=foo'    \n  end\n  test \"regex\" do\n    assert String.to_integer(\"1E\",16) == 30\n  end\nend\n\ndefmodule ListTest do\n  use ExUnit.Case\n  test \"list\" do\n    assert Enum.to_list(1..3) == [1,2,3]\n    assert [1,2,3]++[4,5,6] == [1,2,3,4,5,6]\n    assert Enum.concat([1,2,3],[4,5,6]) == [1,2,3,4,5,6]\n \t\n    with n=1,\n  \t list=[2,3]\n    do\n      assert [n|list] === [1,2,3]\n    end\n    \n    with list = [1,2,3]\n    do\n      assert (hd list) === 1\n      assert (tl list) === [2,3]\n    end\n  \t\n    with list = [1,2,3]\n    do\n      [head|tail] = list\n      assert head === 1\n      assert tail === [2,3]\n    end\n  \t\n    with [first,second] = [1,2]\n    do\n      assert first == 1\n      assert second == 2\n    end\n  end\nend\n\n```\n\n\u305d\u306e\u5b9f\u884c\u7d50\u679c\n\n```elixir:\n$ elixir first_test.exs \n.....\n\nFinished in 0.09 seconds (0.08s on load, 0.01s on tests)\n5 tests, 0 failures\n\nRandomized with seed 703309\n```\n\n\u697d\u3057\u3093\u3067\u306d\uff01\n\n", "tags": ["Elixir", "unittest"]}