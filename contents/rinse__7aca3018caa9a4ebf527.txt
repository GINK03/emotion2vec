{"context": " More than 1 year has passed since last update.\u6700\u8fd1C#\u3092\u52c9\u5f37\u3057\u3088\u3046\u3068\u601d\u3044\u3001\u899a\u3048\u308b\u3053\u3068\u3068\u3044\u3046\u3088\u308a\u306f\u6a5f\u80fd\u306e\u591a\u3055\u306b\u76ee\u7729\u304c\u3057\u3066\u3057\u307e\u3063\u3066C++\u306b\u9003\u3052\u308b\u6bce\u65e5\u304c\u7d9a\u3044\u3066\u3044\u307e\u3059\u3002C#\u306f\u7c21\u5358\u306b\u8272\u3005\u306a\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u304c\u3001\u53cd\u9762\u5c11\u3057\u6df1\u304f\u8155\u3092\u7a81\u3063\u8fbc\u3093\u3067\u307f\u308b\u3068\u9014\u7aef\u306b\u60c5\u5831\u91cf\u306e\u591a\u3055\u306b\u8155\u3092\u6301\u3063\u3066\u884c\u304b\u308c\u3066\u3057\u307e\u3044\u307e\u3059\u3002\n\u3055\u3066\u3001C#\u306b\u306f\u30c7\u30ea\u30b2\u30fc\u30c8\u3068\u3044\u3046\u6a5f\u80fd\u304c\u3042\u308a\u3001\u3053\u308c\u306f\u6700\u3082\u5358\u7d14\u306b\u8a00\u3048\u3070\u540c\u3058\u30b7\u30b0\u30cb\u30c1\u30e3\u3092\u6301\u3064\u95a2\u6570\u3092\u767b\u9332\u3059\u308b\u3068\u4e00\u5ea6\u306b\u5b9f\u884c\u3067\u304d\u308b\u3068\u3044\u3046\u3082\u306e\u3067\u3059\u3002\n\u7c21\u5358\u306b\u8a00\u3048\u3070\u3001\u95a2\u6570\u30dd\u30a4\u30f3\u30bf\u306e\u914d\u5217\u3092\u4f5c\u3063\u3066\u3001\u95a2\u6570\u3092\u767b\u9332\u3057\u3066\u3001\u4e00\u6c17\u306b\u5b9f\u884c\u3059\u308b\u3001\u3068\u3044\u3046\u30a4\u30e1\u30fc\u30b8\u3067\u3059\u306d\u3002\n\u3053\u308c\u3092C++\u3067\u3082\u3068\u601d\u3044\u4f5c\u3063\u3066\u307f\u307e\u3057\u305f\u3002\n\uff08\u6050\u3089\u304f\u8ab0\u3067\u3082\u4e00\u5ea6\u306f\u8003\u3048\u305d\u3046\u306a\u3053\u3068\u306a\u306e\u3067\u8eca\u8f2a\u306e\u518d\u767a\u660e\u3082\u3044\u3044\u3068\u3053\u308d\u3060\u3068\u306f\u601d\u3044\u307e\u3059\u304c\u30fb\u30fb\uff09\n\u9ed2\u9b54\u8853\u3068\u306f\u8a00\u3044\u307e\u305b\u3093\u304c\u3001\u3084\u3063\u3066\u308b\u3053\u3068\u306e\u5272\u306b\u306f\u8907\u96d1\u305d\u3046\u306b\u898b\u3048\u307e\u3059\u3002\n\u3057\u304b\u3057\u5b9f\u969b\u306fstd::function\u306e\u30e9\u30c3\u30d1\u306b\u904e\u304e\u307e\u305b\u3093\u3002\n// \u30d8\u30eb\u30d1\u95a2\u6570\ntemplate < class Ty >\nvoid* union_cast( Ty ptr )\n{ // \u30e1\u30f3\u30d0\u95a2\u6570\u30dd\u30a4\u30f3\u30bf\u3092void*\u306b\u5909\u63db\u3059\u308b\n  // reinterpret_cast\u3067\u3082\u3067\u304d\u306a\u3044\u5371\u967a\u306a\u30ad\u30e3\u30b9\u30c8\n  union\n  {\n    Ty _mem_func_ptr;\n    void* _void_ptr;\n  };\n  _mem_func_ptr = ptr;\n  return _void_ptr;\n}\n\n//\n// \u30c7\u30ea\u30b2\u30fc\u30c8\u30af\u30e9\u30b9\ntemplate < class >\nclass delegate {};\ntemplate < class Ret, class... Args >\nclass delegate < Ret( Args... ) >\n{\n  using _KeyPair = std::pair < void*, void* >;\n  struct _Value\n  {\n    std::function < Ret( Args... ) > function;\n    _KeyPair keys;\n  };\n  std::vector < _Value > value;\n\n  auto find( void* first, void* second = nullptr ) NOEXCEPT\n  {\n    _KeyPair arg { first, second };\n    return std::find_if( value.begin(), value.end(), [&]( _Value& val )\n    { // lambda\n      return val.keys == arg;\n    } );\n  }\n\npublic:\n  //\n  // add function\n  //\n  template < class Ty >\n  void add( Ty* func ) // \u95a2\u6570\u30dd\u30a4\u30f3\u30bf\u7528\n  { // function-pointer\n    if( find( func ) != value.end() ) { return; }\n    value.push_back( { [=]( Args... args ) -> Ret\n    { // lambda\n      return func( std::forward < Args >( args )... );\n    }, _KeyPair( func, nullptr ) } );\n  }\n  template < class Ty >\n  void add( Ty& func ) // \u95a2\u6570\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u7528\n  { // function-object\n    if( find( &func ) != value.end() ) { return; }\n    value.push_back( { [&]( Args... args ) -> Ret\n    { // lambda\n      return func( std::forward < Args >( args )... );\n    }, _KeyPair( &func, nullptr ) } );\n  }\n  template < class Ty >\n  void add( Ty&& func ) // \u95a2\u6570\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u7528\n  { // function-object\n    value.push_back( { [func = std::move( func )] ( Args... args ) mutable -> Ret\n    { // lambda\n      return func( std::forward < Args >( args )... );\n    }, _KeyPair( nullptr, nullptr ) } );\n  }\n  template < class Ty1, class Ty2 >\n  void add( Ty1& obj, Ty2 ptr ) // \u30e1\u30f3\u30d0\u95a2\u6570\u30dd\u30a4\u30f3\u30bf\u7528\n  { // member-function\n    if( find( &obj, union_cast( ptr ) ) != value.end() ) { return; }\n    value.push_back( { [&obj, ptr]( Args... args ) -> Ret\n    { // lambda\n      return ( obj.*ptr )( std::forward < Args >( args )... );\n    }, _KeyPair( &obj, union_cast( ptr ) ) } );\n  }\n\n  //\n  // remove function\n  //\n  template < class Ty >\n  void remove( Ty* func ) // \u95a2\u6570\u30dd\u30a4\u30f3\u30bf\u7528\n  {\n    auto itr = find( func );\n    if( itr != value.end() ) { value.erase( itr ); }\n  }\n  template < class Ty >\n  void remove( Ty& func ) // \u95a2\u6570\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u7528\n  {\n    remove( &func );\n  }\n  template < class Ty1, class Ty2 >\n  void remove( Ty1& obj, Ty2 ptr ) // \u30e1\u30f3\u30d0\u95a2\u6570\u30dd\u30a4\u30f3\u30bf\u7528\n  {\n    auto itr = find( &obj, union_cast( ptr ) );\n    if( itr != value.end() ) { value.erase( itr ); }\n  }\n\n  //\n  // invoke functions\n  //\n  void operator() ( Args... args ) const\n  {\n    for( auto&& elem : value ) { elem.function( std::forward < Args >( args )... ); }\n  }\n};\n\n\u95a2\u6570\u30dd\u30a4\u30f3\u30bf\u3001\u95a2\u6570\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3001\u30e1\u30f3\u30d0\u95a2\u6570\u7528\u3001\u305d\u308c\u305e\u308c\u306eadd\u3068remove\u95a2\u6570\u304c\u3042\u308a\u307e\u3059\u3002\n\u4e00\u756a\u6838\u306b\u306a\u308b\u6a5f\u80fd\u3060\u3051\u8f09\u305b\u3066\u3042\u308a\u307e\u3059\u304c\u3001\u307b\u3093\u3068\u306f\u3061\u3083\u3093\u3068\u3057\u305f\u30e1\u30f3\u30d0\u95a2\u6570\u3092\u3082\u305f\u305b\u308b\u3068\u3044\u3044\u3067\u3059\u306d\u3002swap, reserve, etc...\n\nvoid func();\nstruct func_t { void operator()(); };\nstruct object { void func(); };\n\nint main()\n{\n  delegate < void() > funcs;\n\n  func_t func_obj;\n  object obj;\n\n  // \u767b\u9332\n  funcs.add( &func ); // \u901a\u5e38\u306e\u95a2\u6570\u306f\u95a2\u6570\u30dd\u30a4\u30f3\u30bf\n  funcs.add( func_obj );  // \u95a2\u6570\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306f\u53c2\u7167\n  funcs.add( obj, &object::func );  // this\u53c2\u7167\u3068\u30e1\u30f3\u30d0\u95a2\u6570\u30dd\u30a4\u30f3\u30bf\n  funcs.add( []() { std::cout << \"right lambda\" << std::endl; } ); // \u30e9\u30e0\u30c0\u5f0f\uff08\u53f3\u8fba\u5024\uff09\n  auto lambda = []() { std::cout << \"left lambda\" << std::endl; };\n  funcs.add( lambda ); // \u30e9\u30e0\u30c0\u5f0f\uff08\u5de6\u8fba\u5024\uff09\n\n  funcs(); // invoke all functions\n\n  // \u524a\u9664\n  funcs.remove( &func );\n  funcs.remove( func_obj );\n  funcs.remove( obj, &object::func );\n  funcs.remove( lambda );\n  // \u53f3\u8fba\u5024\u3067\u8ffd\u52a0\u3057\u305f\u95a2\u6570\u306f\u524a\u9664\u3067\u304d\u307e\u305b\u3093\n\n  funcs(); // output \"left lambda\"\n}\n\n\u3067\u304d\u308c\u3070add\u3084remove\u3058\u3083\u306a\u304f\u3066+=\u3084-=\u3092\u4f7f\u3044\u305f\u304b\u3063\u305f\u306e\u3067\u3059\u304c\u3001\u5f15\u6570\u306e\u95a2\u4fc2\u3067\u304a\u3058\u3083\u3093\u306b\u2026\n\u30e1\u30f3\u30d0\u95a2\u6570\u30dd\u30a4\u30f3\u30bf\u3068this\u306e\u4ef2\u3092\u88c2\u304f\u3088\u3046\u306a\u3053\u3068\u306f\u3067\u304d\u307e\u305b\u3093\u306d\u3002\n\u3061\u306a\u307f\u306b\u3053\u306e\u30c7\u30ea\u30b2\u30fc\u30c8\u30af\u30e9\u30b9\u306f\u53c2\u7167\u3092\u4fdd\u6301\u3059\u308b\u305f\u3081\u3001\u95a2\u6570\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3084\u30e1\u30f3\u30d0\u95a2\u6570\u3092\u767b\u9332\u3057\u305f\u5834\u5408\u526f\u4f5c\u7528\u304c\u3042\u308b\u5834\u5408\u304c\u3042\u308a\u307e\u3059\u3002\u307e\u305f\u3001\u5bff\u547d\u304c\u7d42\u4e86\u3057\u305f\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u4fdd\u6301\u3055\u305b\u308b\u3068\u5b9f\u884c\u6642\u306b\u672a\u5b9a\u7fa9\u52d5\u4f5c\u3092\u5f15\u304d\u8d77\u3053\u3057\u307e\u3059\u3002\n\u5b9f\u969b\u306b\u4f7f\u3046\u306a\u3089\u3001add\u3084remove\u95a2\u6570\u306f\u30e1\u30bf\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u3092\u4f7f\u3063\u3066\u5b89\u5168\u6027\u3092\u9ad8\u3081\u305f\u308a\u3001operator()\u3067\u623b\u308a\u5024\u306evector\u3092\u8fd4\u3057\u3066\u3042\u3052\u308b\u306a\u3069\u3059\u308b\u3068\u3088\u3055\u305d\u3046\u3067\u3059\u3002\u623b\u308a\u5024\u3092\u4f5c\u6210\u3059\u308b\u5834\u5408\u306f\u3001Ret\u304cvoid\u578b\u3067\u3042\u308b\u304b\u5426\u304b\u3067tag-dispatching\u3092\u3057\u3066\u3042\u3052\u308b\u306e\u304c\u3088\u3044\u3067\u3057\u3087\u3046\u3002\n\u8ffd\u8a18. \u53f3\u8fba\u5024\u3092\u53d7\u3051\u53d6\u308badd\u95a2\u6570\u3092\u8ffd\u52a0\u3057\u307e\u3057\u305f\u3002\n\u8ffd\u8a182. \u3073\u3063\u304f\u308a\u3059\u308b\u304f\u3089\u3044\u4f3c\u305f\u30bf\u30a4\u30c8\u30eb\u306e\u8a18\u4e8b\u3092\u898b\u3064\u3051\u307e\u3057\u305f\u3002\u4e2d\u8eab\u306f\u5168\u7136\u9055\u3044\u307e\u3059\u304c\u2026\n\u3000=> [C++] C++\u3067C#\u3063\u307d\u3044delegate\u3092\u5b9f\u88c5\u3057\u3066\u307f\u308b(\u4efb\u610f\u30af\u30e9\u30b9\u306e\u4efb\u610f\u30e1\u30bd\u30c3\u30c9\u5b9f\u884c)\n\u3053\u306e\u8a18\u4e8b\u3092\u898b\u308b\u3068\u3001\u30e1\u30f3\u30d0\u95a2\u6570\u306e\u767b\u9332\u306f\u30e6\u30fc\u30b6\u306b\u30e9\u30e0\u30c0\u5f0f\u7b49\u306b\u5305\u3081\u3066\u3082\u3089\u3046\u5f62\u306b\u3057\u3066\u3001+=\u3084-=\u6f14\u7b97\u5b50\u3092\u4f7f\u3046\u3088\u3046\u306b\u3059\u308c\u3070\u3088\u304b\u3063\u305f\u304b\u306a\u3042\u3068\u3082\u601d\u3044\u307e\u3059\u3002\n\u6700\u8fd1C#\u3092\u52c9\u5f37\u3057\u3088\u3046\u3068\u601d\u3044\u3001\u899a\u3048\u308b\u3053\u3068\u3068\u3044\u3046\u3088\u308a\u306f\u6a5f\u80fd\u306e\u591a\u3055\u306b\u76ee\u7729\u304c\u3057\u3066\u3057\u307e\u3063\u3066C++\u306b\u9003\u3052\u308b\u6bce\u65e5\u304c\u7d9a\u3044\u3066\u3044\u307e\u3059\u3002C#\u306f\u7c21\u5358\u306b\u8272\u3005\u306a\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u304c\u3001\u53cd\u9762\u5c11\u3057\u6df1\u304f\u8155\u3092\u7a81\u3063\u8fbc\u3093\u3067\u307f\u308b\u3068\u9014\u7aef\u306b\u60c5\u5831\u91cf\u306e\u591a\u3055\u306b\u8155\u3092\u6301\u3063\u3066\u884c\u304b\u308c\u3066\u3057\u307e\u3044\u307e\u3059\u3002\n\n\u3055\u3066\u3001C#\u306b\u306f\u30c7\u30ea\u30b2\u30fc\u30c8\u3068\u3044\u3046\u6a5f\u80fd\u304c\u3042\u308a\u3001\u3053\u308c\u306f\u6700\u3082\u5358\u7d14\u306b\u8a00\u3048\u3070\u540c\u3058\u30b7\u30b0\u30cb\u30c1\u30e3\u3092\u6301\u3064\u95a2\u6570\u3092\u767b\u9332\u3059\u308b\u3068\u4e00\u5ea6\u306b\u5b9f\u884c\u3067\u304d\u308b\u3068\u3044\u3046\u3082\u306e\u3067\u3059\u3002\n\n\u7c21\u5358\u306b\u8a00\u3048\u3070\u3001\u95a2\u6570\u30dd\u30a4\u30f3\u30bf\u306e\u914d\u5217\u3092\u4f5c\u3063\u3066\u3001\u95a2\u6570\u3092\u767b\u9332\u3057\u3066\u3001\u4e00\u6c17\u306b\u5b9f\u884c\u3059\u308b\u3001\u3068\u3044\u3046\u30a4\u30e1\u30fc\u30b8\u3067\u3059\u306d\u3002\n\n\u3053\u308c\u3092C++\u3067\u3082\u3068\u601d\u3044\u4f5c\u3063\u3066\u307f\u307e\u3057\u305f\u3002\n\uff08\u6050\u3089\u304f\u8ab0\u3067\u3082\u4e00\u5ea6\u306f\u8003\u3048\u305d\u3046\u306a\u3053\u3068\u306a\u306e\u3067\u8eca\u8f2a\u306e\u518d\u767a\u660e\u3082\u3044\u3044\u3068\u3053\u308d\u3060\u3068\u306f\u601d\u3044\u307e\u3059\u304c\u30fb\u30fb\uff09\n\u9ed2\u9b54\u8853\u3068\u306f\u8a00\u3044\u307e\u305b\u3093\u304c\u3001\u3084\u3063\u3066\u308b\u3053\u3068\u306e\u5272\u306b\u306f\u8907\u96d1\u305d\u3046\u306b\u898b\u3048\u307e\u3059\u3002\n\u3057\u304b\u3057\u5b9f\u969b\u306fstd::function\u306e\u30e9\u30c3\u30d1\u306b\u904e\u304e\u307e\u305b\u3093\u3002\n\n```\n// \u30d8\u30eb\u30d1\u95a2\u6570\ntemplate < class Ty >\nvoid* union_cast( Ty ptr )\n{ // \u30e1\u30f3\u30d0\u95a2\u6570\u30dd\u30a4\u30f3\u30bf\u3092void*\u306b\u5909\u63db\u3059\u308b\n  // reinterpret_cast\u3067\u3082\u3067\u304d\u306a\u3044\u5371\u967a\u306a\u30ad\u30e3\u30b9\u30c8\n  union\n  {\n    Ty _mem_func_ptr;\n    void* _void_ptr;\n  };\n  _mem_func_ptr = ptr;\n  return _void_ptr;\n}\n\n//\n// \u30c7\u30ea\u30b2\u30fc\u30c8\u30af\u30e9\u30b9\ntemplate < class >\nclass delegate {};\ntemplate < class Ret, class... Args >\nclass delegate < Ret( Args... ) >\n{\n  using _KeyPair = std::pair < void*, void* >;\n  struct _Value\n  {\n    std::function < Ret( Args... ) > function;\n    _KeyPair keys;\n  };\n  std::vector < _Value > value;\n\n  auto find( void* first, void* second = nullptr ) NOEXCEPT\n  {\n    _KeyPair arg { first, second };\n    return std::find_if( value.begin(), value.end(), [&]( _Value& val )\n    { // lambda\n      return val.keys == arg;\n    } );\n  }\n\npublic:\n  //\n  // add function\n  //\n  template < class Ty >\n  void add( Ty* func ) // \u95a2\u6570\u30dd\u30a4\u30f3\u30bf\u7528\n  { // function-pointer\n    if( find( func ) != value.end() ) { return; }\n    value.push_back( { [=]( Args... args ) -> Ret\n    { // lambda\n      return func( std::forward < Args >( args )... );\n    }, _KeyPair( func, nullptr ) } );\n  }\n  template < class Ty >\n  void add( Ty& func ) // \u95a2\u6570\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u7528\n  { // function-object\n    if( find( &func ) != value.end() ) { return; }\n    value.push_back( { [&]( Args... args ) -> Ret\n    { // lambda\n      return func( std::forward < Args >( args )... );\n    }, _KeyPair( &func, nullptr ) } );\n  }\n  template < class Ty >\n  void add( Ty&& func ) // \u95a2\u6570\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u7528\n  { // function-object\n    value.push_back( { [func = std::move( func )] ( Args... args ) mutable -> Ret\n    { // lambda\n      return func( std::forward < Args >( args )... );\n    }, _KeyPair( nullptr, nullptr ) } );\n  }\n  template < class Ty1, class Ty2 >\n  void add( Ty1& obj, Ty2 ptr ) // \u30e1\u30f3\u30d0\u95a2\u6570\u30dd\u30a4\u30f3\u30bf\u7528\n  { // member-function\n    if( find( &obj, union_cast( ptr ) ) != value.end() ) { return; }\n    value.push_back( { [&obj, ptr]( Args... args ) -> Ret\n    { // lambda\n      return ( obj.*ptr )( std::forward < Args >( args )... );\n    }, _KeyPair( &obj, union_cast( ptr ) ) } );\n  }\n\n  //\n  // remove function\n  //\n  template < class Ty >\n  void remove( Ty* func ) // \u95a2\u6570\u30dd\u30a4\u30f3\u30bf\u7528\n  {\n    auto itr = find( func );\n    if( itr != value.end() ) { value.erase( itr ); }\n  }\n  template < class Ty >\n  void remove( Ty& func ) // \u95a2\u6570\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u7528\n  {\n    remove( &func );\n  }\n  template < class Ty1, class Ty2 >\n  void remove( Ty1& obj, Ty2 ptr ) // \u30e1\u30f3\u30d0\u95a2\u6570\u30dd\u30a4\u30f3\u30bf\u7528\n  {\n    auto itr = find( &obj, union_cast( ptr ) );\n    if( itr != value.end() ) { value.erase( itr ); }\n  }\n\n  //\n  // invoke functions\n  //\n  void operator() ( Args... args ) const\n  {\n    for( auto&& elem : value ) { elem.function( std::forward < Args >( args )... ); }\n  }\n};\n```\n\n\u95a2\u6570\u30dd\u30a4\u30f3\u30bf\u3001\u95a2\u6570\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3001\u30e1\u30f3\u30d0\u95a2\u6570\u7528\u3001\u305d\u308c\u305e\u308c\u306eadd\u3068remove\u95a2\u6570\u304c\u3042\u308a\u307e\u3059\u3002\n\u4e00\u756a\u6838\u306b\u306a\u308b\u6a5f\u80fd\u3060\u3051\u8f09\u305b\u3066\u3042\u308a\u307e\u3059\u304c\u3001\u307b\u3093\u3068\u306f\u3061\u3083\u3093\u3068\u3057\u305f\u30e1\u30f3\u30d0\u95a2\u6570\u3092\u3082\u305f\u305b\u308b\u3068\u3044\u3044\u3067\u3059\u306d\u3002swap, reserve, etc...\n\n```\n\nvoid func();\nstruct func_t { void operator()(); };\nstruct object { void func(); };\n\nint main()\n{\n  delegate < void() > funcs;\n\n  func_t func_obj;\n  object obj;\n\n  // \u767b\u9332\n  funcs.add( &func ); // \u901a\u5e38\u306e\u95a2\u6570\u306f\u95a2\u6570\u30dd\u30a4\u30f3\u30bf\n  funcs.add( func_obj );  // \u95a2\u6570\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306f\u53c2\u7167\n  funcs.add( obj, &object::func );  // this\u53c2\u7167\u3068\u30e1\u30f3\u30d0\u95a2\u6570\u30dd\u30a4\u30f3\u30bf\n  funcs.add( []() { std::cout << \"right lambda\" << std::endl; } ); // \u30e9\u30e0\u30c0\u5f0f\uff08\u53f3\u8fba\u5024\uff09\n  auto lambda = []() { std::cout << \"left lambda\" << std::endl; };\n  funcs.add( lambda ); // \u30e9\u30e0\u30c0\u5f0f\uff08\u5de6\u8fba\u5024\uff09\n\n  funcs(); // invoke all functions\n\n  // \u524a\u9664\n  funcs.remove( &func );\n  funcs.remove( func_obj );\n  funcs.remove( obj, &object::func );\n  funcs.remove( lambda );\n  // \u53f3\u8fba\u5024\u3067\u8ffd\u52a0\u3057\u305f\u95a2\u6570\u306f\u524a\u9664\u3067\u304d\u307e\u305b\u3093\n\n  funcs(); // output \"left lambda\"\n}\n```\n\n\u3067\u304d\u308c\u3070`add`\u3084`remove`\u3058\u3083\u306a\u304f\u3066`+=`\u3084`-=`\u3092\u4f7f\u3044\u305f\u304b\u3063\u305f\u306e\u3067\u3059\u304c\u3001\u5f15\u6570\u306e\u95a2\u4fc2\u3067\u304a\u3058\u3083\u3093\u306b\u2026\n\u30e1\u30f3\u30d0\u95a2\u6570\u30dd\u30a4\u30f3\u30bf\u3068this\u306e\u4ef2\u3092\u88c2\u304f\u3088\u3046\u306a\u3053\u3068\u306f\u3067\u304d\u307e\u305b\u3093\u306d\u3002\n\n\u3061\u306a\u307f\u306b\u3053\u306e\u30c7\u30ea\u30b2\u30fc\u30c8\u30af\u30e9\u30b9\u306f\u53c2\u7167\u3092\u4fdd\u6301\u3059\u308b\u305f\u3081\u3001\u95a2\u6570\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3084\u30e1\u30f3\u30d0\u95a2\u6570\u3092\u767b\u9332\u3057\u305f\u5834\u5408\u526f\u4f5c\u7528\u304c\u3042\u308b\u5834\u5408\u304c\u3042\u308a\u307e\u3059\u3002\u307e\u305f\u3001\u5bff\u547d\u304c\u7d42\u4e86\u3057\u305f\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u4fdd\u6301\u3055\u305b\u308b\u3068\u5b9f\u884c\u6642\u306b\u672a\u5b9a\u7fa9\u52d5\u4f5c\u3092\u5f15\u304d\u8d77\u3053\u3057\u307e\u3059\u3002\n\n\u5b9f\u969b\u306b\u4f7f\u3046\u306a\u3089\u3001add\u3084remove\u95a2\u6570\u306f\u30e1\u30bf\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u3092\u4f7f\u3063\u3066\u5b89\u5168\u6027\u3092\u9ad8\u3081\u305f\u308a\u3001operator()\u3067\u623b\u308a\u5024\u306evector\u3092\u8fd4\u3057\u3066\u3042\u3052\u308b\u306a\u3069\u3059\u308b\u3068\u3088\u3055\u305d\u3046\u3067\u3059\u3002\u623b\u308a\u5024\u3092\u4f5c\u6210\u3059\u308b\u5834\u5408\u306f\u3001Ret\u304cvoid\u578b\u3067\u3042\u308b\u304b\u5426\u304b\u3067tag-dispatching\u3092\u3057\u3066\u3042\u3052\u308b\u306e\u304c\u3088\u3044\u3067\u3057\u3087\u3046\u3002\n\n\u8ffd\u8a18. \u53f3\u8fba\u5024\u3092\u53d7\u3051\u53d6\u308badd\u95a2\u6570\u3092\u8ffd\u52a0\u3057\u307e\u3057\u305f\u3002\n\u8ffd\u8a182. \u3073\u3063\u304f\u308a\u3059\u308b\u304f\u3089\u3044\u4f3c\u305f\u30bf\u30a4\u30c8\u30eb\u306e\u8a18\u4e8b\u3092\u898b\u3064\u3051\u307e\u3057\u305f\u3002\u4e2d\u8eab\u306f\u5168\u7136\u9055\u3044\u307e\u3059\u304c\u2026\n\u3000=> [\\[C++\\] C++\u3067C#\u3063\u307d\u3044delegate\u3092\u5b9f\u88c5\u3057\u3066\u307f\u308b(\u4efb\u610f\u30af\u30e9\u30b9\u306e\u4efb\u610f\u30e1\u30bd\u30c3\u30c9\u5b9f\u884c)](http://ftvoid.com/blog/post/707)\n\u3053\u306e\u8a18\u4e8b\u3092\u898b\u308b\u3068\u3001\u30e1\u30f3\u30d0\u95a2\u6570\u306e\u767b\u9332\u306f\u30e6\u30fc\u30b6\u306b\u30e9\u30e0\u30c0\u5f0f\u7b49\u306b\u5305\u3081\u3066\u3082\u3089\u3046\u5f62\u306b\u3057\u3066\u3001`+=`\u3084`-=`\u6f14\u7b97\u5b50\u3092\u4f7f\u3046\u3088\u3046\u306b\u3059\u308c\u3070\u3088\u304b\u3063\u305f\u304b\u306a\u3042\u3068\u3082\u601d\u3044\u307e\u3059\u3002\n", "tags": ["C++", "C++11"]}