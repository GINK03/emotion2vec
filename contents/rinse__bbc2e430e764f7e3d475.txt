{"tags": ["C++", "C++11", "STL"], "context": " More than 1 year has passed since last update.\u30b3\u30f3\u30c6\u30ca\u306e\u4e2d\u8eab\u3092\u305d\u306e\u307e\u307e\u306b\u3001\u5165\u308c\u7269\u306e\u30b3\u30f3\u30c6\u30ca\u3060\u3051\u3092\u5909\u3048\u308b\u30ad\u30e3\u30b9\u30c8\u3092\u601d\u3044\u3064\u3044\u305f\u306e\u3067\u30ac\u30ea\u30ac\u30ea\u66f8\u3044\u3066\u307f\u307e\u3057\u305f\u3002\nrequirements:\n\u5171\u901a\uff1a\n\u3000\u30d5\u30ea\u30fc\u306ebegin, end\u3092\u4f7f\u3063\u3066\u30a4\u30c6\u30ec\u30fc\u30bf\u304c\u53d6\u5f97\u3067\u304d\u308b\u3053\u3068\u3002\n\u3000\u30ad\u30e3\u30b9\u30c8\u5148\u3068\u30ad\u30e3\u30b9\u30c8\u5143\u306e\u30b3\u30f3\u30c6\u30ca\u306evalue_type\u304c\u7b49\u3057\u3044\u3053\u3068\u3002\n\u30b3\u30d4\u30fc\u3059\u308b\u5834\u5408\uff1a\u3000value_type\u304c\u30b3\u30d4\u30fc\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u3092\u6301\u3064\u3053\u3068\u3002\n\u30e0\u30fc\u30d6\u3059\u308b\u5834\u5408\uff1a\u3000value_type\u304c\u4f8b\u5916\u3092\u6295\u3052\u306a\u3044\u30e0\u30fc\u30d6\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u3092\u6301\u3064\u3053\u3068\u3002\n\u30e0\u30fc\u30d6\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u3092\u6301\u3063\u3066\u3044\u3066\u3082\u3001\u4f8b\u5916\u3092\u6295\u3052\u308b\u304b\u3082\u3057\u308c\u306a\u3044\u5834\u5408\u306f\u4f8b\u3048std::move\u3092\u4f7f\u3063\u3066\u6e21\u305d\u3046\u3068\u3082\u30b3\u30d4\u30fc\u304c\u884c\u308f\u308c\u307e\u3059\u3002\n\u307e\u305f\u3001\u30e0\u30fc\u30d6\u3055\u308c\u305f\u5f8c\u306e\u30b3\u30f3\u30c6\u30ca\u306e\u8981\u7d20\u6570\u306f\u30e0\u30fc\u30d6\u524d\u3068\u5909\u308f\u308a\u307e\u305b\u3093\u3002\u4e2d\u306b\u306f\u30e0\u30fc\u30d6\u3055\u308c\u305f\u8981\u7d20\u306e\u6b8b\u9ab8\u304c\u6b8b\u308a\u307e\u3059\u3002\n\u65e2\u77e5\u306e\u554f\u984c\u70b9\n1.\u3000\u30e0\u30fc\u30d6\u306e\u969b\u306e\u4f8b\u5916\u4fdd\u8a3c\n\u3000\u3059\u306a\u308f\u3061\u3001\u65b0\u3057\u3044\u30b3\u30f3\u30c6\u30ca\u306e\u30e1\u30e2\u30ea\u78ba\u4fdd\u306a\u3069\u3067\u4f8b\u5916\u304c\u767a\u751f\u3057\u305f\u5834\u5408\u306b\u8981\u7d20\u3092\u3061\u3083\u3093\u3068\u5143\u306e\u30b3\u30f3\u30c6\u30ca\u306b\u623b\u3057\u3066\u304f\u308c\u308b\u304b\u3001\u3068\u3044\u3046\u306e\u304c\u6c17\u306b\u306a\u308b\u3068\u3053\u308d\u306a\u306e\u3067\u3059\u3002STL\u306f\u8981\u7d20\u304c\u30e0\u30fc\u30d6\u306e\u969b\u306b\u4f8b\u5916\u3092\u9001\u51fa\u3057\u306a\u3051\u308c\u3070\u3084\u3063\u3066\u304f\u308c\u308b\u3088\u3046\u306b\u8a18\u61b6\u3057\u3066\u3044\u307e\u3059\u304c\u3001\u5c11\u3057\u81ea\u4fe1\u304c\u3042\u308a\u307e\u305b\u3093\u3002\n2.\u3000value_type\u304c\u7b49\u3057\u304f\u306a\u3051\u308c\u3070\u30b3\u30f3\u30d1\u30a4\u30eb\u30a8\u30e9\u30fc\u306b\u306a\u308b\n\u3000\u3053\u308c\u306f\u5b89\u5168\u306e\u305f\u3081\u306b\u308f\u3056\u3068\u3084\u3063\u305f\u306e\u3067\u3059\u304c\u3001convertible\u3067\u3042\u308c\u3070\u30b3\u30f3\u30d1\u30a4\u30eb\u30a8\u30e9\u30fc\u306b\u3057\u306a\u304f\u3066\u3082\u3044\u3044\u3088\u3046\u306a\u6c17\u3082\u3059\u308b\u2026\u3068\u3044\u3046\u306e\u304c\u5fae\u5999\u306a\u3068\u3053\u308d\u3067\u3059\u3002\n\u4f7f\u7528\u4f8b:\nstruct throwable\n{\n  throwable() = default;\n  throwable(throwable&&) {}\n};\nstruct no_throwable {};\n\n...\u4e2d\u7565...\n\n  std::vector< throwable > vec;\n  vec.resize(3);\n  auto list0 = container_cast< std::list< int > >(vec); // copy\n  auto list1 = container_cast< std::list< int > >(std::move(vec)); // copy\n\n  std::vector< no_throwable > vec1;\n  vec1.resize(3);\n  auto list2 = container_cast< std::list< int > >(vec); // copy\n  auto list3 = container_cast< std::list< int > >(std::move(vec)); // move\n\n\u30b3\u30fc\u30c9\u306e\u3059\u3079\u3066\u306f\u4ee5\u4e0b\u306b\u306a\u308a\u307e\u3059\u3002\n#include <iterator>\n#include <type_traits>\n#include <utility>\n\ntemplate< class Container1, class Container2,\n  typename std::enable_if<\n    std::is_same< typename Container1::value_type,\n                  typename Container2::value_type >::value,\n    std::nullptr_t >::type = nullptr >\nContainer1 container_cast(const Container2& c)\n{\n  return {begin(c), end(c)};\n}\n\ntemplate< class Container1, class Container2,\n  // if each value_type is same type.\n  typename std::enable_if<\n    std::is_same< typename Container1::value_type,\n                  typename Container2::value_type >::value,\n    std::nullptr_t >::type = nullptr,\n  // if !is_nothrow_move_constructible and copy_constructible.\n  typename std::enable_if <\n    !std::is_nothrow_move_constructible<\n      typename Container1::value_type >::value\n    && std::is_copy_constructible<\n      typename Container1::value_type >::value,\n    std::nullptr_t >::type = nullptr >\nContainer1 container_cast(Container2&& c)\n{ // copy\n  return container_cast< Container1 >(c);\n}\n\ntemplate< class Container1, class Container2,\n  // if each value_type is same type.\n  typename std::enable_if<\n    std::is_same< typename Container1::value_type,\n                  typename Container2::value_type >::value,\n    std::nullptr_t >::type = nullptr,\n  // if nothrow_move_constructible.\n  typename std::enable_if <\n    std::is_nothrow_move_constructible<\n      typename Container1::value_type >::value,\n    std::nullptr_t >::type = nullptr >\nContainer1 container_cast(Container2&& c)\n{ // move\n  return {\n    std::make_move_iterator(begin(c)),\n    std::make_move_iterator(end(c))};\n}\n\n\u30b3\u30f3\u30c6\u30ca\u306e\u4e2d\u8eab\u3092\u305d\u306e\u307e\u307e\u306b\u3001\u5165\u308c\u7269\u306e\u30b3\u30f3\u30c6\u30ca\u3060\u3051\u3092\u5909\u3048\u308b\u30ad\u30e3\u30b9\u30c8\u3092\u601d\u3044\u3064\u3044\u305f\u306e\u3067\u30ac\u30ea\u30ac\u30ea\u66f8\u3044\u3066\u307f\u307e\u3057\u305f\u3002\nrequirements:\n\u5171\u901a\uff1a\n\u3000\u30d5\u30ea\u30fc\u306ebegin, end\u3092\u4f7f\u3063\u3066\u30a4\u30c6\u30ec\u30fc\u30bf\u304c\u53d6\u5f97\u3067\u304d\u308b\u3053\u3068\u3002\n\u3000\u30ad\u30e3\u30b9\u30c8\u5148\u3068\u30ad\u30e3\u30b9\u30c8\u5143\u306e\u30b3\u30f3\u30c6\u30ca\u306evalue_type\u304c\u7b49\u3057\u3044\u3053\u3068\u3002\n\u30b3\u30d4\u30fc\u3059\u308b\u5834\u5408\uff1a\u3000value_type\u304c\u30b3\u30d4\u30fc\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u3092\u6301\u3064\u3053\u3068\u3002\n\u30e0\u30fc\u30d6\u3059\u308b\u5834\u5408\uff1a\u3000value_type\u304c\u4f8b\u5916\u3092\u6295\u3052\u306a\u3044\u30e0\u30fc\u30d6\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u3092\u6301\u3064\u3053\u3068\u3002\n\n\u30e0\u30fc\u30d6\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u3092\u6301\u3063\u3066\u3044\u3066\u3082\u3001\u4f8b\u5916\u3092\u6295\u3052\u308b\u304b\u3082\u3057\u308c\u306a\u3044\u5834\u5408\u306f\u4f8b\u3048std::move\u3092\u4f7f\u3063\u3066\u6e21\u305d\u3046\u3068\u3082\u30b3\u30d4\u30fc\u304c\u884c\u308f\u308c\u307e\u3059\u3002\n\u307e\u305f\u3001\u30e0\u30fc\u30d6\u3055\u308c\u305f\u5f8c\u306e\u30b3\u30f3\u30c6\u30ca\u306e\u8981\u7d20\u6570\u306f\u30e0\u30fc\u30d6\u524d\u3068\u5909\u308f\u308a\u307e\u305b\u3093\u3002\u4e2d\u306b\u306f\u30e0\u30fc\u30d6\u3055\u308c\u305f\u8981\u7d20\u306e\u6b8b\u9ab8\u304c\u6b8b\u308a\u307e\u3059\u3002\n\n\u65e2\u77e5\u306e\u554f\u984c\u70b9\n1.\u3000\u30e0\u30fc\u30d6\u306e\u969b\u306e\u4f8b\u5916\u4fdd\u8a3c\n\u3000\u3059\u306a\u308f\u3061\u3001\u65b0\u3057\u3044\u30b3\u30f3\u30c6\u30ca\u306e\u30e1\u30e2\u30ea\u78ba\u4fdd\u306a\u3069\u3067\u4f8b\u5916\u304c\u767a\u751f\u3057\u305f\u5834\u5408\u306b\u8981\u7d20\u3092\u3061\u3083\u3093\u3068\u5143\u306e\u30b3\u30f3\u30c6\u30ca\u306b\u623b\u3057\u3066\u304f\u308c\u308b\u304b\u3001\u3068\u3044\u3046\u306e\u304c\u6c17\u306b\u306a\u308b\u3068\u3053\u308d\u306a\u306e\u3067\u3059\u3002STL\u306f\u8981\u7d20\u304c\u30e0\u30fc\u30d6\u306e\u969b\u306b\u4f8b\u5916\u3092\u9001\u51fa\u3057\u306a\u3051\u308c\u3070\u3084\u3063\u3066\u304f\u308c\u308b\u3088\u3046\u306b\u8a18\u61b6\u3057\u3066\u3044\u307e\u3059\u304c\u3001\u5c11\u3057\u81ea\u4fe1\u304c\u3042\u308a\u307e\u305b\u3093\u3002\n\n2.\u3000value_type\u304c\u7b49\u3057\u304f\u306a\u3051\u308c\u3070\u30b3\u30f3\u30d1\u30a4\u30eb\u30a8\u30e9\u30fc\u306b\u306a\u308b\n\u3000\u3053\u308c\u306f\u5b89\u5168\u306e\u305f\u3081\u306b\u308f\u3056\u3068\u3084\u3063\u305f\u306e\u3067\u3059\u304c\u3001convertible\u3067\u3042\u308c\u3070\u30b3\u30f3\u30d1\u30a4\u30eb\u30a8\u30e9\u30fc\u306b\u3057\u306a\u304f\u3066\u3082\u3044\u3044\u3088\u3046\u306a\u6c17\u3082\u3059\u308b\u2026\u3068\u3044\u3046\u306e\u304c\u5fae\u5999\u306a\u3068\u3053\u308d\u3067\u3059\u3002\n\n\u4f7f\u7528\u4f8b:\n\n```cpp\nstruct throwable\n{\n  throwable() = default;\n  throwable(throwable&&) {}\n};\nstruct no_throwable {};\n\n...\u4e2d\u7565...\n\n  std::vector< throwable > vec;\n  vec.resize(3);\n  auto list0 = container_cast< std::list< int > >(vec); // copy\n  auto list1 = container_cast< std::list< int > >(std::move(vec)); // copy\n\n  std::vector< no_throwable > vec1;\n  vec1.resize(3);\n  auto list2 = container_cast< std::list< int > >(vec); // copy\n  auto list3 = container_cast< std::list< int > >(std::move(vec)); // move\n```\n\n\u30b3\u30fc\u30c9\u306e\u3059\u3079\u3066\u306f\u4ee5\u4e0b\u306b\u306a\u308a\u307e\u3059\u3002\n\n\n```cpp\n#include <iterator>\n#include <type_traits>\n#include <utility>\n\ntemplate< class Container1, class Container2,\n  typename std::enable_if<\n    std::is_same< typename Container1::value_type,\n                  typename Container2::value_type >::value,\n    std::nullptr_t >::type = nullptr >\nContainer1 container_cast(const Container2& c)\n{\n  return {begin(c), end(c)};\n}\n\ntemplate< class Container1, class Container2,\n  // if each value_type is same type.\n  typename std::enable_if<\n    std::is_same< typename Container1::value_type,\n                  typename Container2::value_type >::value,\n    std::nullptr_t >::type = nullptr,\n  // if !is_nothrow_move_constructible and copy_constructible.\n  typename std::enable_if <\n    !std::is_nothrow_move_constructible<\n      typename Container1::value_type >::value\n    && std::is_copy_constructible<\n      typename Container1::value_type >::value,\n    std::nullptr_t >::type = nullptr >\nContainer1 container_cast(Container2&& c)\n{ // copy\n  return container_cast< Container1 >(c);\n}\n\ntemplate< class Container1, class Container2,\n  // if each value_type is same type.\n  typename std::enable_if<\n    std::is_same< typename Container1::value_type,\n                  typename Container2::value_type >::value,\n    std::nullptr_t >::type = nullptr,\n  // if nothrow_move_constructible.\n  typename std::enable_if <\n    std::is_nothrow_move_constructible<\n      typename Container1::value_type >::value,\n    std::nullptr_t >::type = nullptr >\nContainer1 container_cast(Container2&& c)\n{ // move\n  return {\n    std::make_move_iterator(begin(c)),\n    std::make_move_iterator(end(c))};\n}\n```\n"}