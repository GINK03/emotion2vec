{"tags": ["Python3", "hadoop"], "context": " More than 1 year has passed since last update.\n\n\u306f\u3058\u3081\u306b\nHadoop Streaming\u3092\u4f7f\u3046\u3068\u3001Java\u4ee5\u5916\u306e\u8a00\u8a9e\u3067\u3082\u6a19\u6e96\u5165\u51fa\u529b\u306e\u30a4\u30f3\u30bf\u30d5\u30a7\u30fc\u30b9\u3055\u3048\u3042\u308c\u3070MapReduce\u304c\u4f7f\u3048\u308b\u3002\n\u3082\u3061\u308d\u3093Python\u3067\u66f8\u304f\u3053\u3068\u3082\u3067\u304d\u308b\u3002\n\u3053\u3053\u3067\u6c17\u3092\u4ed8\u3051\u305f\u3044\u306e\u306f\u3001Streaming\u306b\u3088\u308bMapReduce\u306f\u901a\u5e38\u306eMapReduce\u3068\u306f\u5c11\u3057\u30d1\u30e9\u30c0\u30a4\u30e0\u304c\u7570\u306a\u308b\u3053\u3068\u3002\n\u7c21\u5358\u306b\u8a00\u3046\u3068\u3001\u901a\u5e38\u306eMapReduce\u3067\u306fReducer\u306b (\u30ad\u30fc, \u5024\u306e\u96c6\u5408) \u3092\u6e21\u3059\u306e\u306b\u5bfe\u3057\u3001Streaming\u306eMapReduce\u3067\u306f\u30bd\u30fc\u30c8\u3055\u308c\u305f (\u30ad\u30fc, \u5024) \u30da\u30a2\u306e\u96c6\u5408\u3092\u6e21\u3059\u3002\n\u3053\u306e\u4ed5\u69d8\u306f\u67d4\u8edf\u6027\u304c\u9ad8\u304f\u3001\u4e00\u5ea6\u306eMap\u3084Reduce\u3067\u8907\u6570\u884c\u3092\u51fa\u529b\u3057\u305f\u308a\u3001\u6761\u4ef6\u3092\u6307\u5b9a\u3057\u3066\u884c\u3092\u8aad\u307f\u98db\u3070\u3059\u3068\u3044\u3063\u305f\u51e6\u7406\u304c\u7c21\u5358\u306b\u5b9f\u73fe\u3067\u304d\u308b\u3002\n\u53cd\u9762\u3001\u7279\u306bReducer\u306b\u304a\u3044\u3066\u3001\u30b3\u30fc\u30c9\u306e\u62bd\u8c61\u6027\u30fb\u53ef\u8aad\u6027\u30fb\u52b9\u7387\u6027\u304c\u4f4e\u304f\u306a\u308a\u304c\u3061\u3067\u3042\u308b\u3002\n\u4f8b\u3048\u3070\u5358\u8a9e\u306e\u51fa\u73fe\u56de\u6570\u30ab\u30a6\u30f3\u30c8\u3067\u3001Mapper\u306e\u51fa\u529b\u304c\u6b21\u306e\u3088\u3046\u306b\u306a\u3063\u3066\u304a\u308a\u3001\napple   1\napple   2\napple   3\nberry   1\nberry   2\ncherry  3\n\nReducer\u3067\u6b21\u306e\u51fa\u529b\u3092\u5f97\u305f\u3044\u3068\u3059\u308b\u3002\napple   6\nberry   3\ncherry  3\n\n\nBad Reducer\n\u3088\u304f\u3042\u308b\u30d1\u30bf\u30fc\u30f3\uff08\u3068\u3044\u3046\u304b\u8c61\u672c\u306b\u8f09\u3063\u3066\u308b\uff09\u3002\n\nbad_reducer1.py\nimport sys\n\nlast_key, count = None, 0\nfor line in sys.stdin:\n    key, val = line.strip().split('\\t')\n    if last_key and last_key != key:\n        print('\\t'.join((last_key, count)))\n        last_key, count = key, int(val)\n    else:\n        last_key, count = key, count + int(val)\nelse:\n    print('\\t'.join((last_key, count)))\n\n\n\u4e00\u76ee\u3067\u306f\u4f55\u3092\u3084\u3063\u3066\u3044\u308b\u306e\u304b\u307e\u3063\u305f\u304f\u308f\u304b\u3089\u305a\u3001\u3088\u304f\u3088\u304f\u8aad\u3093\u3067\u307f\u308b\u3068\u3001\u30ad\u30fc\u304c\u524d\u306e\u884c\u3068\u7570\u306a\u308b\u5834\u5408\u306b\u524d\u306e\u30ad\u30fc\u3068\u305d\u308c\u306b\u5bfe\u3059\u308b\u96c6\u8a08\u7d50\u679c\u3092\u51fa\u529b\u3057\u3066\u308b\u3093\u3060\u306a\u3068\u4f55\u3068\u304b\u63a8\u6e2c\u3067\u304d\u308b\u7a0b\u5ea6\u3002\nreduce\u51e6\u7406\u304c\u5165\u51fa\u529b\u306e\u4e2d\u306b\u7d1b\u308c\u8fbc\u3093\u3067\u3044\u308b\u611f\u3058\u3067\u3001\u53ef\u8aad\u6027\u3068\u304b\u62bd\u8c61\u6027\u4ee5\u524d\u306b\u5168\u7136\u30ab\u30c3\u30b3\u3088\u304f\u306a\u3044\u3002\n\nBetter Reducer\n\u307e\u305areduce\u95a2\u6570\u3068\u5165\u51fa\u529b\u306e\u30ed\u30b8\u30c3\u30af\u3092\u5206\u96e2\u3059\u308b\u3002\n\u3055\u3089\u306b\u5168\u3066\u306e\u30a4\u30c6\u30ec\u30fc\u30b7\u30e7\u30f3\u3067\u30a4\u30c6\u30ec\u30fc\u30bf\u3092\u4f7f\u3046\u3053\u3068\u306b\u3088\u308a\u3001\u30b9\u30c8\u30ea\u30fc\u30df\u30f3\u30b0\u51e6\u7406\u306e\u30e1\u30e2\u30ea\u52b9\u7387\u3092\u4fdd\u3064\u3002\n\u3053\u308c\u3067\u3044\u304f\u3089\u304b\u30de\u30b7\u306b\u306a\u3063\u3066\u308b\u3068\u601d\u3046\u3002\n\nbetter_reducer.py\nimport sys\nfrom itertools import groupby\n\ndef reducer(key, vals):\n    count = str(sum(int(v) for v in vals))\n    return '\\t'.join((key, count))\n\nkv_pairs = (l.strip().split('\\t') for l in sys.stdin)\n\nfor key, kv_group in groupby(kv_pairs, key=lambda p: p[0]):\n    vals = (v for k, v in kv_group)\n    print(reducer(key, vals))\n\n\n\u30dd\u30a4\u30f3\u30c8\u306f itertools.groupby() \u3067\u3001\u3053\u308c\u306f\u30a4\u30c6\u30ec\u30fc\u30bf\u3092\u53d7\u3051\u53d6\u3063\u3066\u30ad\u30fc\u3054\u3068\u306b\u30b0\u30eb\u30fc\u30d4\u30f3\u30b0\u3057\u305f\u30a4\u30c6\u30ec\u30fc\u30bf\u3092\u8fd4\u3059\u3002\n\u4f8b\u3048\u3070\u3053\u3093\u306a\u611f\u3058\u3067\u52d5\u4f5c\u3059\u308b\u3002\n>>> from itertools import groupby\n>>> g = groupby(range(10), key=lambda x: x // 2)\n>>> for key, group in g:\n...     print('{0} {1}'.format(key, list(group)))\n...\n0 [0, 1]\n1 [2, 3]\n2 [4, 5]\n3 [6, 7]\n4 [8, 9]\n\ngroupby() \u3092\u4f7f\u3046\u3053\u3068\u3067\u3001\u540c\u3058\u30ad\u30fc\u306b\u5bfe\u3059\u308b\u5024\u3092\u96c6\u7d04\u3059\u308b\u90e8\u5206\u3092\u30a4\u30c6\u30ec\u30fc\u30bf\u3067\u5b9f\u73fe\u3067\u304d\u308b\u3002\n\n\u304a\u308f\u308a\u306b\n\u3082\u3046\u5c11\u3057\u9ad8\u5ea6\u306a\u3053\u3068\u3092\u3057\u305f\u3051\u308c\u3070mrjob\u3068\u3044\u3046\u4fbf\u5229\u306a\u30e9\u30a4\u30d6\u30e9\u30ea\u304c\u3042\u308b\uff08\u305f\u3060\u3057Python3\u975e\u5bfe\u5fdc\uff09\u3002\n## \u306f\u3058\u3081\u306b\n\n[Hadoop Streaming](http://hadoop.apache.org/docs/r1.2.1/streaming.html \"Hadoop Streaming\")\u3092\u4f7f\u3046\u3068\u3001Java\u4ee5\u5916\u306e\u8a00\u8a9e\u3067\u3082\u6a19\u6e96\u5165\u51fa\u529b\u306e\u30a4\u30f3\u30bf\u30d5\u30a7\u30fc\u30b9\u3055\u3048\u3042\u308c\u3070MapReduce\u304c\u4f7f\u3048\u308b\u3002\n\n\u3082\u3061\u308d\u3093[Python\u3067\u66f8\u304f](http://qiita.com/pika-shi@github/items/7fc686a55a3ac6399b04 \"Hadoop\u5c0e\u5165\u3068Python\u306b\u3088\u308bMapReduce - Qiita\")\u3053\u3068\u3082\u3067\u304d\u308b\u3002\n\n\u3053\u3053\u3067\u6c17\u3092\u4ed8\u3051\u305f\u3044\u306e\u306f\u3001Streaming\u306b\u3088\u308bMapReduce\u306f\u901a\u5e38\u306eMapReduce\u3068\u306f\u5c11\u3057\u30d1\u30e9\u30c0\u30a4\u30e0\u304c\u7570\u306a\u308b\u3053\u3068\u3002\n\n\u7c21\u5358\u306b\u8a00\u3046\u3068\u3001\u901a\u5e38\u306eMapReduce\u3067\u306fReducer\u306b (\u30ad\u30fc, \u5024\u306e\u96c6\u5408) \u3092\u6e21\u3059\u306e\u306b\u5bfe\u3057\u3001Streaming\u306eMapReduce\u3067\u306f\u30bd\u30fc\u30c8\u3055\u308c\u305f (\u30ad\u30fc, \u5024) \u30da\u30a2\u306e\u96c6\u5408\u3092\u6e21\u3059\u3002\n\n\u3053\u306e\u4ed5\u69d8\u306f\u67d4\u8edf\u6027\u304c\u9ad8\u304f\u3001\u4e00\u5ea6\u306eMap\u3084Reduce\u3067\u8907\u6570\u884c\u3092\u51fa\u529b\u3057\u305f\u308a\u3001\u6761\u4ef6\u3092\u6307\u5b9a\u3057\u3066\u884c\u3092\u8aad\u307f\u98db\u3070\u3059\u3068\u3044\u3063\u305f\u51e6\u7406\u304c\u7c21\u5358\u306b\u5b9f\u73fe\u3067\u304d\u308b\u3002\n\n\u53cd\u9762\u3001\u7279\u306bReducer\u306b\u304a\u3044\u3066\u3001\u30b3\u30fc\u30c9\u306e\u62bd\u8c61\u6027\u30fb\u53ef\u8aad\u6027\u30fb\u52b9\u7387\u6027\u304c\u4f4e\u304f\u306a\u308a\u304c\u3061\u3067\u3042\u308b\u3002\n\n\u4f8b\u3048\u3070\u5358\u8a9e\u306e\u51fa\u73fe\u56de\u6570\u30ab\u30a6\u30f3\u30c8\u3067\u3001Mapper\u306e\u51fa\u529b\u304c\u6b21\u306e\u3088\u3046\u306b\u306a\u3063\u3066\u304a\u308a\u3001\n\n```text\napple   1\napple   2\napple   3\nberry   1\nberry   2\ncherry  3\n```\n\nReducer\u3067\u6b21\u306e\u51fa\u529b\u3092\u5f97\u305f\u3044\u3068\u3059\u308b\u3002\n\n```text\napple   6\nberry   3\ncherry  3\n```\n\n## Bad Reducer\n\n\u3088\u304f\u3042\u308b\u30d1\u30bf\u30fc\u30f3\uff08\u3068\u3044\u3046\u304b\u8c61\u672c\u306b\u8f09\u3063\u3066\u308b\uff09\u3002\n\n```py3:bad_reducer1.py\nimport sys\n\nlast_key, count = None, 0\nfor line in sys.stdin:\n    key, val = line.strip().split('\\t')\n    if last_key and last_key != key:\n        print('\\t'.join((last_key, count)))\n        last_key, count = key, int(val)\n    else:\n        last_key, count = key, count + int(val)\nelse:\n    print('\\t'.join((last_key, count)))\n```\n\n\u4e00\u76ee\u3067\u306f\u4f55\u3092\u3084\u3063\u3066\u3044\u308b\u306e\u304b\u307e\u3063\u305f\u304f\u308f\u304b\u3089\u305a\u3001\u3088\u304f\u3088\u304f\u8aad\u3093\u3067\u307f\u308b\u3068\u3001\u30ad\u30fc\u304c\u524d\u306e\u884c\u3068\u7570\u306a\u308b\u5834\u5408\u306b\u524d\u306e\u30ad\u30fc\u3068\u305d\u308c\u306b\u5bfe\u3059\u308b\u96c6\u8a08\u7d50\u679c\u3092\u51fa\u529b\u3057\u3066\u308b\u3093\u3060\u306a\u3068\u4f55\u3068\u304b\u63a8\u6e2c\u3067\u304d\u308b\u7a0b\u5ea6\u3002\n\nreduce\u51e6\u7406\u304c\u5165\u51fa\u529b\u306e\u4e2d\u306b\u7d1b\u308c\u8fbc\u3093\u3067\u3044\u308b\u611f\u3058\u3067\u3001\u53ef\u8aad\u6027\u3068\u304b\u62bd\u8c61\u6027\u4ee5\u524d\u306b\u5168\u7136\u30ab\u30c3\u30b3\u3088\u304f\u306a\u3044\u3002\n\n## Better Reducer\n\n\u307e\u305areduce\u95a2\u6570\u3068\u5165\u51fa\u529b\u306e\u30ed\u30b8\u30c3\u30af\u3092\u5206\u96e2\u3059\u308b\u3002\n\n\u3055\u3089\u306b\u5168\u3066\u306e\u30a4\u30c6\u30ec\u30fc\u30b7\u30e7\u30f3\u3067\u30a4\u30c6\u30ec\u30fc\u30bf\u3092\u4f7f\u3046\u3053\u3068\u306b\u3088\u308a\u3001\u30b9\u30c8\u30ea\u30fc\u30df\u30f3\u30b0\u51e6\u7406\u306e\u30e1\u30e2\u30ea\u52b9\u7387\u3092\u4fdd\u3064\u3002\n\n\u3053\u308c\u3067\u3044\u304f\u3089\u304b\u30de\u30b7\u306b\u306a\u3063\u3066\u308b\u3068\u601d\u3046\u3002\n\n```py3:better_reducer.py\nimport sys\nfrom itertools import groupby\n\ndef reducer(key, vals):\n    count = str(sum(int(v) for v in vals))\n    return '\\t'.join((key, count))\n\nkv_pairs = (l.strip().split('\\t') for l in sys.stdin)\n\nfor key, kv_group in groupby(kv_pairs, key=lambda p: p[0]):\n    vals = (v for k, v in kv_group)\n    print(reducer(key, vals))\n```\n\n\u30dd\u30a4\u30f3\u30c8\u306f `itertools.groupby()` \u3067\u3001\u3053\u308c\u306f\u30a4\u30c6\u30ec\u30fc\u30bf\u3092\u53d7\u3051\u53d6\u3063\u3066\u30ad\u30fc\u3054\u3068\u306b\u30b0\u30eb\u30fc\u30d4\u30f3\u30b0\u3057\u305f\u30a4\u30c6\u30ec\u30fc\u30bf\u3092\u8fd4\u3059\u3002\n\n\u4f8b\u3048\u3070\u3053\u3093\u306a\u611f\u3058\u3067\u52d5\u4f5c\u3059\u308b\u3002\n\n```pycon\n>>> from itertools import groupby\n>>> g = groupby(range(10), key=lambda x: x // 2)\n>>> for key, group in g:\n...     print('{0} {1}'.format(key, list(group)))\n...\n0 [0, 1]\n1 [2, 3]\n2 [4, 5]\n3 [6, 7]\n4 [8, 9]\n```\n\n`groupby()` \u3092\u4f7f\u3046\u3053\u3068\u3067\u3001\u540c\u3058\u30ad\u30fc\u306b\u5bfe\u3059\u308b\u5024\u3092\u96c6\u7d04\u3059\u308b\u90e8\u5206\u3092\u30a4\u30c6\u30ec\u30fc\u30bf\u3067\u5b9f\u73fe\u3067\u304d\u308b\u3002\n\n## \u304a\u308f\u308a\u306b\n\n\u3082\u3046\u5c11\u3057\u9ad8\u5ea6\u306a\u3053\u3068\u3092\u3057\u305f\u3051\u308c\u3070[mrjob](https://pythonhosted.org/mrjob/ \"mrjob \u2014 mrjob v0.4.2 documentation\")\u3068\u3044\u3046\u4fbf\u5229\u306a\u30e9\u30a4\u30d6\u30e9\u30ea\u304c\u3042\u308b\uff08\u305f\u3060\u3057Python3\u975e\u5bfe\u5fdc\uff09\u3002\n"}