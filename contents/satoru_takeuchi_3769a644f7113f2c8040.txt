{"context": "\n\n\u306f\u3058\u3081\u306b\nlinux\u30ab\u30fc\u30cd\u30eb\u306fC\u8a00\u8a9e\u306e\u30de\u30af\u30ed\u3092\u99c6\u4f7f\u3057\u3066\u66f8\u304b\u308c\u3066\u3044\u307e\u3059\u3002\u305d\u308c\u3089\u306e\u3046\u3061\u3001\u51dd\u3063\u305f\u30de\u30af\u30ed\u306b\u306a\u3058\u307f\u306e\u7121\u3044\u4eba\u306b\u306f\u521d\u898b\u3067\u306f\u610f\u56f3\u304c\u308f\u304b\u3089\u306a\u3044&\u308f\u304b\u3063\u3066\u307f\u308c\u3070\u9762\u767d\u3044\u3067\u3042\u308d\u3046\u3082\u306e\u3092\u3044\u304f\u3064\u304b\u7d39\u4ecb\u3044\u305f\u3057\u307e\u3059\u3002\u5bfe\u8c61\u8aad\u8005\u306f\u3001C\u8a00\u8a9e\u306e\u30e6\u30fc\u30b6\u3060\u3051\u308c\u3069\u3082\u3001\u30de\u30af\u30ed\u306f\u5b9a\u6570\u5b9a\u7fa9\u304f\u3089\u3044\u306b\u3057\u304b\u4f7f\u308f\u306a\u3044\u3068\u3044\u3046\u30e9\u30a4\u30c8\u306a\u30de\u30af\u30ed\u30e6\u30fc\u30b6\u3067\u3059\u3002\n\n\u30de\u30af\u30ed\u3092\u4f7f\u7528\u3059\u308b\u5834\u6240\u306b\u4f9d\u5b58\u3059\u308b\u30a8\u30e9\u30fc\u3092\u9632\u3050\n\u6b21\u306e\u30de\u30af\u30ed\u306f\u3001\u4e8c\u3064\u306e\u5f15\u304d\u6570\u306e\u5024\u3092\u7f6e\u63db\u3059\u308b\u3060\u3051\u306e\u5358\u7d14\u306a\u3082\u306e\u3067\u3059\u3002\n\ninclude/linux/kernel.h\n#define swap(a, b) \\\n        do { typeof(a) __tmp = (a); (a) = (b); (b) = __tmp; } while (0)\n\n\n\u6ce8\u76ee\u3059\u3079\u304d\u306f\u30de\u30af\u30ed\u306e\u5b9a\u7fa9\u5168\u4f53\u3092\u56f2\u3093\u3067\u3044\u308bdo { ... } while (0)\u3068\u3044\u3046\u8868\u8a18\u3067\u3059\u3002\u521d\u898b\u306e\u4eba\u306b\u306f\u4f55\u306e\u3053\u3068\u304b\u308f\u304b\u3089\u306a\u3044\u3068\u601d\u3044\u307e\u3059\u3002\u8003\u3048\u3089\u308c\u308b\u6700\u3082\u5358\u7d14\u306a\u5b9a\u7fa9\u304b\u3089\u9061\u3063\u3066\u3001\u306a\u305c\u3053\u306e\u3088\u3046\u306a\u5b9a\u7fa9\u306b\u3059\u308b\u3068\u3088\u3044\u306e\u304b\u3092\u898b\u3066\u307f\u307e\u3057\u3087\u3046\u3002\n\u3053\u306e\u30de\u30af\u30ed\u306edo {} while\u6587\u306e\u30d6\u30ed\u30c3\u30af\u3092\u5916\u3057\u305f\u30d0\u30fc\u30b8\u30e7\u30f3\u306e\u30de\u30af\u30ed\u3092\u4f7f\u3063\u3066\u307f\u307e\u3057\u3087\u3046\u3002\n\nswap.c\n#include <stdio.h>\n\n#define swap(a, b) \\\n        typeof(a) __tmp = (a); (a) = (b); (b) = __tmp;\n\nint main(void)\n{\n        int a = 0, b = 1;\n        swap(a, b);\n        printf(\"%d %d\\n\", a, b);\n        return 0;\n}\n\n\n\u5b9f\u884c\u4f8b\u3092\u793a\u3057\u307e\u3059\u3002\n$ make swap\ncc     swap.c   -o swap\n$ ./swap \n1 0\n$ \n\n\u3061\u3083\u3093\u3068\u52d5\u3044\u3066\u3044\u308b\u3088\u3046\u306b\u898b\u3048\u307e\u3059\u3002\u3057\u304b\u3057\u3001\u3053\u308c\u304c\u6b21\u306e\u3088\u3046\u306a\u4f7f\u3044\u65b9\u3060\u3068\u3044\u304b\u304c\u3067\u3057\u3087\u3046\u304b\u3002\n\nswap2.c\n#include <stdio.h>\n\n#define swap(a, b) \\\n        typeof(a) __tmp = (a); (a) = (b); (b) = __tmp;\n\nint main(void)\n{\n        int a = 0, b = 1;\n        if (0)\n                swap(a, b);\n        printf(\"%d %d\\n\", a, b);\n        return 0;\n}\n\n\n\u30b3\u30f3\u30d1\u30a4\u30eb\u3057\u307e\u3059\u3002\n$ make swap2\ncc     swap2.c   -o swap2\nswap2.c: In function 'main':\nswap2.c:4:9: error: expected expression before 'typeof'\n         typeof(a) __tmp = (a); (a) = (b); (b) = __tmp;\n         ^\nswap2.c:10:3: note: in expansion of macro 'swap'\n   swap(a, b);\n   ^~~~\nswap2.c:4:49: error: '__tmp' undeclared (first use in this function)\n         typeof(a) __tmp = (a); (a) = (b); (b) = __tmp;\n...\nmake: *** [swap2] Error 1\n$ \n\n\u671f\u5f85\u5024\u306fif\u6587\u306e\u4e2d\u306eswap()\u30de\u30af\u30ed\u306f\u5b9f\u884c\u305b\u305a\u306b\u7aef\u672b\u4e0a\u306b\"0 1\u00a5n\"\u3068\u3044\u3046\u51fa\u529b\u3092\u3059\u308b\u3001\u3068\u3044\u3046\u3082\u306e\u3067\u3059\u304c\u3001\u5b9f\u969b\u306f\u5c71\u307b\u3069\u30a8\u30e9\u30fc\u304c\u51fa\u3066\u30b3\u30f3\u30d1\u30a4\u30eb\u304c\u5931\u6557\u3057\u307e\u3057\u305f\u3002\u30bd\u30fc\u30b9\u3092\u30b3\u30f3\u30d1\u30a4\u30eb\u305b\u305a\u306b\u30d7\u30ea\u30d7\u30ed\u30bb\u30c3\u30b5\u3060\u3051\u3092\u304b\u3051\u3066\u539f\u56e0\u3092\u63a2\u3063\u3066\u307f\u307e\u3057\u3087\u3046\u3002\n$ cc -E swap2.c\n...\nint main(void)\n{\n int a = 0, b = 1;\n if (0)\n  typeof(a) __tmp = (a); (a) = (b); (b) = __tmp;;\n printf(\"%d %d\\n\", a, b);\n return 0;\n}\n$ \n\n\u4e00\u898b\u6b63\u3057\u3044\u3088\u3046\u306b\u898b\u3048\u307e\u3059\u304c\u3001\u5236\u5fa1\u69cb\u9020\u3092\u610f\u8b58\u3057\u3066\u6574\u5f62\u3057\u3066\u307f\u308b\u3068\u3001\u304a\u304b\u3057\u3044\u70b9\u304c\u308f\u304b\u3063\u3066\u304d\u307e\u3059\u3002\nint main(void)\n{\n        int a = 0, b = 1;\n        if (0)\n                typeof(a) __tmp = (a);\n        (a) = (b);\n        (b) = __tmp;;\n        printf(\"%d %d\\n\", a, b);\n return 0;\n}\n\nswap()\u30de\u30af\u30ed\u5185\u306e3\u3064\u306e\u547d\u4ee4\u306e\u3046\u3061\u3001\u4e00\u884c\u76ee\u306e\u4e00\u6642\u5909\u6570__tmp\u3092\u5ba3\u8a00\u3057\u3066\u3044\u308b\u884c\u306fif\u6587\u306e\u4e2d\u306b\u3042\u308a\u307e\u3059\u304c\u3001\u305d\u308c\u4ee5\u5916\u306e2\u547d\u4ee4\u306fif\u6587\u306e\u5916\u306b\u51fa\u3066\u3057\u307e\u3063\u3066\u3044\u307e\u3059\u3002\u3053\u308c\u3067\u306f\u307e\u3068\u3082\u306b\u52d5\u304f\u306f\u305a\u304c\u3042\u308a\u307e\u305b\u3093\u3002\u3055\u3089\u306b\u3001if\u6587\u306e\u4e2d\u306b\u5909\u6570\u5ba3\u8a00\u306e\u307f\u30921\u884c\u7f6e\u304f\u3053\u3068\u306f\u8a31\u3055\u308c\u306a\u3044\u306e\u3067\u3001\u4e0a\u8a18\u30b3\u30f3\u30d1\u30a4\u30eb\u30ed\u30b0\u306e\u4e00\u884c\u76ee\u306e\u3088\u3046\u306a\u30a8\u30e9\u30fc\u304c\u51fa\u3066\u3044\u307e\u3059\u3002\n\u3067\u306f\u6b21\u306e\u3088\u3046\u306b\u30de\u30af\u30ed\u5b9a\u7fa9\u3092\u5358\u306b\u30d6\u30ed\u30c3\u30af(\"{}\")\u3067\u56f2\u3081\u3070\u3044\u3044\u306e\u3067\u306f\u306a\u3044\u304b\u3001\u3068\u3044\u3046\u304b\u305f\u3082\u3044\u3089\u3063\u3057\u3083\u308b\u304b\u3068\u601d\u3046\u306e\u3067\u3001\u8a66\u3057\u3066\u307f\u307e\u3059\u3002\n\nswap3.c\n#include <stdio.h>\n\n#define swap(a, b) \\\n        { typeof(a) __tmp = (a); (a) = (b); (b) = __tmp; }\n\nint main(void)\n{\n        int a = 0, b = 1;\n        if (0)\n                swap(a, b);\n        printf(\"%d %d\\n\", a, b);\n        return 0;\n}\n\n\n$ make swap3\ncc     swap3.c   -o swap3\n$ ./swap3\n0 1\n$ \n\n\u3053\u3061\u3089\u306f\u3046\u307e\u304f\u3044\u304d\u307e\u3057\u305f\u3002\u3057\u304b\u3057\u3053\u308c\u306f\u6b21\u306e\u3088\u3046\u306a\u30b1\u30fc\u30b9\u3067\u306f\u3046\u307e\u304f\u3044\u304d\u307e\u305b\u3093\u3002\n\nswap4.c\n#include <stdio.h>\n\n#define swap(a, b) \\\n        { typeof(a) __tmp = (a); (a) = (b); (b) = __tmp; }\n\nint main(void)\n{\n        int a = 0, b = 1;\n        if (0)\n                swap(a, b);\n        else\n                printf(\"Always print this message\u00a5n\");\n        printf(\"%d %d\\n\", a, b);\n        return 0;\n}\n\n\n$ make swap4\ncc     swap4.c   -o swap4\nswap4.c: In function 'main':\nswap4.c:11:2: error: 'else' without a previous 'if'\n  else\n  ^~~~\n<builtin>: recipe for target 'swap4' failed\nmake: *** [swap4] Error 1\n$ \n\n\u671f\u5f85\u5024\u306f\"Always print this message\u00a5n\"\u306e\u5f8c\u306b\"0 1\u00a5n\"\u304c\u51fa\u529b\u3055\u308c\u308b\u3001\u306a\u306e\u3067\u3059\u304c\u3001\u8b0e\u306e\u30b3\u30f3\u30d1\u30a4\u30eb\u30a8\u30e9\u30fc\u304c\u767a\u751f\u3057\u307e\u3057\u305f\u3002\u3053\u308c\u306b\u3064\u3044\u3066\u3082\u30d7\u30ea\u30d7\u30ed\u30bb\u30c3\u30b5\u306b\u3088\u308b\u51e6\u7406\u5f8c\u306e\u30bd\u30fc\u30b9\u3092\u898b\u3066\u307f\u307e\u3057\u3087\u3046\u3002\n$ cc -E swap4.c\n...\n# 6 \"swap4.c\"\nint main(void)\n{\n int a = 0, b = 1;\n if (0)\n  { typeof(a) __tmp = (a); (a) = (b); (b) = __tmp; };\n else\n  printf(\"Always print this message\u00a5n\");\n printf(\"%d %d\\n\", a, b);\n return 0;\n}\n\n\u3055\u304d\u307b\u3069\u3068\u540c\u69d8\u306b\u3001\u5236\u5fa1\u69cb\u9020\u3092\u610f\u8b58\u3057\u3066\u30bd\u30fc\u30b9\u3092\u6574\u5f62\u3057\u307e\u3059\u3002\nint main(void)\n{\n        int a = 0, b = 1;\n        if (0)\n                { typeof(a) __tmp = (a); (a) = (b); (b) = __tmp; };                # ... (1)\n        else\n                printf(\"Always print this message\");\n        printf(\"%d %d\\n\", a, b);\n        return 0;\n}\n\n\u3084\u3084\u308f\u304b\u308a\u306b\u304f\u3044\u306e\u3067\u3059\u304c\u3001\u30bd\u30fc\u30b9\u5185\u306e(1)\u306e\u3068\u3053\u308d\u3067C\u306e\u69cb\u6587\u4e0aif\u6587\u306f\u5b8c\u7d50\u3057\u3066\u3044\u307e\u3059\u3002\u3057\u305f\u304c\u3063\u3066\u3001\u305d\u308c\u306b\u7d9a\u304felse\u7bc0\u306f\u30b3\u30f3\u30d1\u30a4\u30e9\u304b\u3089\u898b\u308b\u3068if\u6587\u7121\u3057\u306b\u7a81\u7136\u51fa\u3066\u304d\u305f\u3088\u3046\u306b\u898b\u3048\u308b\u305f\u3081\u3001\u30a8\u30e9\u30fc\u304c\u51fa\u3066\u3044\u305f\u306e\u3067\u3057\u305f\u3002\n\u3053\u306e\u5834\u5408\u306fswap(a,b);\u306e\u672b\u5c3e\u306e\u30bb\u30df\u30b3\u30ed\u30f3\u3092\u7701\u3051\u3070\u3046\u307e\u304f\u52d5\u4f5c\u3057\u307e\u3059\u3002\u3057\u304b\u3057\u3053\u308c\u306f\u660e\u3089\u304b\u306b\u76f4\u611f\u7684\u3067\u306f\u306a\u3044\u306e\u3067\u3001\u3053\u306e\u3088\u3046\u306a\u4f7f\u3044\u65b9\u306f\u3067\u304d\u308c\u3070\u907f\u3051\u305f\u3044\u3067\u3059\u3002\u4e0a\u8a18\u306e\u547d\u4ee4\u5217\u3092\u5358\u306a\u308b\u30d6\u30ed\u30c3\u30af\u3067\u306f\u306a\u304f do {} while (0)\u3067\u56f2\u3081\u3070\u3001\u305d\u308c\u304c\u53ef\u80fd\u306b\u306a\u308a\u307e\u3059\u3002\u30b3\u30fc\u30c9\u4f8b\u306f\u51fa\u3057\u307e\u305b\u3093\u304c\u3001\u3053\u306e\u5834\u5408\u306f\u4e0a\u8a18\u3059\u3079\u3066\u306e\u5834\u5408\u306b\u3064\u3044\u3066\u3046\u307e\u304f\u52d5\u4f5c\u3057\u307e\u3059\u3002\n\u4e0a\u8a18\u306e\u3088\u3046\u306a\u300c\u3046\u307e\u304f\u3044\u304b\u306a\u3044\u30b1\u30fc\u30b9\u300d\u3092\u5168\u3066\u77e5\u3089\u306a\u3044\u3068\u3001\u306a\u304b\u306a\u304b\u3053\u306e do {} while (0) \u306e\u610f\u56f3\u306f\u7406\u89e3\u3067\u304d\u306a\u3044\u3068\u601d\u3044\u307e\u3059\u3002linux\u30ab\u30fc\u30cd\u30eb\u4ee5\u5916\u3067\u3082\u983b\u51fa\u306eC\u30de\u30af\u30ed\u306e\u30a4\u30c7\u30a3\u30aa\u30e0\u306a\u306e\u3067\u3001\u899a\u3048\u3066\u304a\u3044\u3066\u640d\u306f\u306a\u3044\u3068\u601d\u3044\u307e\u3059\u3002\n\n\u30b8\u30a7\u30cd\u30ea\u30c3\u30af\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\n\u3055\u304d\u307b\u3069\u306eswap()\u306e\u4f8b\u3092\u3082\u3046\u4e00\u5ea6\u898b\u3066\u307f\u307e\u3057\u3087\u3046\u3002\n\ninclude/linux/kernel.h\n#define swap(a, b) \\\n        do { typeof(a) __tmp = (a); (a) = (b); (b) = __tmp; } while (0)\n\n\n\u3053\u308c\u306f\u30a4\u30f3\u30e9\u30a4\u30f3\u95a2\u6570\u3067\u5b9f\u88c5\u3057\u3066\u3082\u540c\u3058\u3088\u3046\u306b\u898b\u3048\u307e\u3059\u304c\u3001\u5b9f\u969b\u3084\u3063\u3066\u307f\u308b\u3068\u9762\u5012\u306a\u3053\u3068\u304c\u308f\u304b\u308a\u307e\u3059\u3002\u4ee5\u4e0b\u306e\u30b3\u30fc\u30c9\u3092\u898b\u3066\u4e0b\u3055\u3044\u3002\nstatic inline void swap(int *a, int *b)\n{\n        int tmp = *a;\n        *a = *b;\n        *b = tmp;\n}\n\n\u3053\u308c\u306f\u3053\u308c\u3067\u52d5\u304f\u306e\u3067\u3059\u304c(\u5f15\u6570\u306b\u5909\u6570\u3067\u306a\u304f\u5909\u6570\u3078\u306e\u30dd\u30a4\u30f3\u30bf\u3092\u6307\u5b9a\u3057\u306a\u3044\u3068\u3044\u3051\u306a\u3044\u3068\u3053\u308d\u306f\u7570\u306a\u308a\u307e\u3059)\u3001\u3053\u306eswap()\u306fint\u306b\u3057\u304b\u4f7f\u3048\u307e\u305b\u3093\u3002\u5225\u306e\u578b\u306b\u3064\u3044\u3066\u306f\u5225\u306eswap()\u3092\u5b9a\u7fa9\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\u3057\u304b\u3082\u3001C\u306f\u95a2\u6570\u306e\u30aa\u30fc\u30d0\u30fc\u30ed\u30fc\u30c9\u6a5f\u80fd1\u304c\u7121\u3044\u305f\u3081\u3001\u8907\u6570\u306e\u578b\u306b\u5bfe\u3059\u308bswap()\u3092\u540c\u6642\u306b\u5b9a\u7fa9\u3057\u305f\u3044\u5834\u5408\u306f\u3001\u4f8b\u3048\u3070\u6b21\u306e\u3088\u3046\u306b\u5b9a\u7fa9\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\nstatic inline void swap_int(int *a, int *b)\n{\n        int tmp = *a;\n        *a = *b;\n        *b = tmp;\n}\n\nstatic inline void swap_double(double *a, double *b)\n{\n        int tmp = *a;\n        *a = *b;\n        *b = tmp;\n}\n\n\u547c\u3073\u51fa\u3059\u305f\u3081\u306b\u3044\u3061\u3044\u3061\u578b\u540d\u3092\u6307\u5b9a\u3059\u308b\u5fc5\u8981\u304c\u3042\u308b\u4e0a\u306b\u3001\u540c\u3058\u3088\u3046\u306a\u610f\u5473\u306e\u30b3\u30fc\u30c9\u3092\u91cd\u8907\u3057\u3066\u66f8\u304f\u5fc5\u8981\u304c\u3042\u308b\u306e\u3067\u4fdd\u5b88\u6027\u304c\u975e\u5e38\u306b\u60aa\u3044\u3067\u3059\u3002\u30de\u30af\u30ed\u3092\u4f7f\u3048\u3070\u3053\u306e\u3088\u3046\u306a\u554f\u984c\u3092\u907f\u3051\u3089\u308c\u307e\u3059\u3002\u3061\u3087\u3046\u3069C++\u306e\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u3092\u4f7f\u3063\u305f\u30b8\u30a7\u30cd\u30ea\u30c3\u30af\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u306e\u3088\u3046\u306a\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\n\u30d3\u30eb\u30c9\u306e\u8a2d\u5b9a\u306b\u5fdc\u3058\u3066\u4f55\u3082\u3057\u306a\u3044\u95a2\u6570/\u30de\u30af\u30ed\u3092\u5b9a\u7fa9\u3059\u308b\nlinux\u30ab\u30fc\u30cd\u30eb\u3067\u306f\u3001\u7279\u5b9a\u306e\u30d3\u30eb\u30c9\u8a2d\u5b9a\u306b\u304a\u3044\u3066\u3001\u7279\u5b9a\u306e\u95a2\u6570\u3092\u4f55\u3082\u3057\u306a\u3044\u3088\u3046\u306b\u5b9a\u7fa9\u3057\u3066\u3044\u308b\u7b87\u6240\u304c\u591a\u3005\u3042\u308a\u307e\u3059\u3002\u6b21\u306b\u793a\u3059\u5b9f\u969b\u306e\u30b3\u30fc\u30c9\u3092\u898b\u3066\u307f\u307e\u3057\u3087\u3046\u3002\n\ninclude/linux/fs.h\n...\n#if BITS_PER_LONG==32 && defined(CONFIG_SMP)\n#include <linux/seqlock.h>\n#define __NEED_I_SIZE_ORDERED\n#define i_size_ordered_init(inode) seqcount_init(&inode->i_size_seqcount)\n#else\n#define i_size_ordered_init(inode) do { } while (0)\n#endif\n...\n\n\n\u3053\u306e\u30b3\u30fc\u30c9\u65ad\u7247\u306f\u3001\u3071\u3063\u3068\u898b\u3084\u3084\u3053\u3057\u305d\u3046\u3067\u3059\u304c\u3001\u8a00\u8449\u3067\u8aac\u660e\u3059\u308b\u3068\u6b21\u306e\u3088\u3046\u306a\u3053\u3068\u3092\u3057\u3066\u3044\u307e\u3059\u3002\n\ni_size_ordered_init()\u3068\u3044\u3046\u30de\u30af\u30ed\u3092\u5b9a\u7fa9\u3059\u308b\n\n\n\u30d3\u30eb\u30c9\u5bfe\u8c61\u30a2\u30fc\u30ad\u30c6\u30af\u30c1\u30e3\u306elong\u306e\u30b5\u30a4\u30ba\u304c32\u3067\u3042\u308a\u3001\u304b\u3064\u3001\u30de\u30eb\u30c1\u30d7\u30ed\u30bb\u30c3\u30b5\u74b0\u5883\u3067\u3042\u308c\u3070seqcount_init()\u3092\u547c\u3076\n\u305d\u3046\u3067\u306a\u3051\u308c\u3070\u4f55\u3082\u3057\u306a\u3044\n\n\n\n\u6ce8\u76ee\u3057\u3066\u3082\u3089\u3044\u305f\u3044\u306e\u306fi_size_ordered_init()\u30de\u30af\u30ed\u306edo { } while (0)\u3068\u3044\u3046\u5b9a\u7fa9\u3067\u3059\u3002\u3053\u308c\u306f\u5148\u7a0b\u306e\u4f8b\u306e\u5fdc\u7528\u3067\u3001\u300c\u4f55\u3082\u3057\u306a\u3044\u300d\u95a2\u6570/\u30de\u30af\u30ed\u3092\u5b9a\u7fa9\u3057\u3066\u3044\u307e\u3059\u3002\n\u3053\u306e\u30de\u30af\u30ed\u3092\u547c\u3073\u51fa\u3057\u3066\u3044\u308b\u7b87\u6240\u3067\u3044\u3061\u3044\u3061\n...\n{\n        ...\n#if BITS_PER_LONG==32 && defined(CONFIG_SMP)\n        i_size_ordered_init();\n#endif\n        ...\n}\n...\n\n\u306a\u3069\u3068\u3059\u308b\u3088\u308a\u306f\u308b\u304b\u306b\u30b3\u30fc\u30c9\u306e\u4fdd\u5b88\u6027\u304c\u9ad8\u3044\u3067\u3059\u3002\n\u306a\u304a\u3001#define i_size_ordered_init(inode)(\u30de\u30af\u30ed\u5b9a\u7fa9\u3092\u7a7a\u306b\u3059\u308b)\u3084\u3001#define i_size_ordered_init(inode) {}\u306a\u3069\u3068\u3044\u3046\u5b9a\u7fa9\u306b\u3059\u308b\u3068\u3001\u524d\u8ff0\u306e\u3088\u3046\u306a\u3055\u307e\u3056\u307e\u306a\u30b3\u30fc\u30ca\u30fc\u30b1\u30fc\u30b9\u304c\u5b58\u5728\u3057\u3066\u3057\u307e\u3044\u307e\u3059\u3002\n\n\u5f15\u6570\u306e\u6587\u5b57\u5217\u5316\n\u6b21\u306f\u3001\u30de\u30af\u30ed\u306e\u5f15\u6570\u3092\u6587\u5b57\u5217\u306b\u3059\u308b\u65b9\u6cd5\u306b\u3064\u3044\u3066\u5b66\u3093\u3067\u307f\u307e\u3057\u3087\u3046\u3002\u4f8b\u3068\u3057\u3066\u3001\u4ee5\u4e0b\u306elinux\u30ab\u30fc\u30cd\u30eb\u5185\u306e\u30b3\u30fc\u30c9\u3092\u793a\u3057\u307e\u3059\u3002\n\nkernel/sched/sched.h\n...\n#ifdef CONFIG_SCHED_DEBUG\n#define SCHED_WARN_ON(x)        WARN_ONCE(x, #x)\n#else\n...\n#endif\n...\n\n\n\u3053\u3053\u3067\u306f\u7c21\u5358\u306e\u305f\u3081CONFIG_SCHED_DEBUG\u304c\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u308b\u3068\u8003\u3048\u3066\u3001SCHED_WARN_ON()\u30de\u30af\u30ed\u304c\u4f55\u3092\u3059\u308b\u3082\u306e\u306a\u306e\u304b\u3092\u898b\u3066\u3044\u304d\u307e\u3059\u3002\u3053\u306e\u30de\u30af\u30ed\u306f\u3001\u30b9\u30b1\u30b8\u30e5\u30fc\u30e9\u306e\u30b3\u30fc\u30c9\u306e\u4e2d\u3067\u3001\u30b9\u30b1\u30b8\u30e5\u30fc\u30e9\u304c\u7570\u5e38\u306a\u72b6\u614b\u3067\u3042\u308b\u3053\u3068\u3092\u793a\u3059\u6761\u4ef6\u3092\u6e80\u305f\u3057\u305f(\u6e80\u305f\u3057\u3066\u3057\u307e\u3063\u305f)\u3068\u304d\u306b\u30ab\u30fc\u30cd\u30eb\u306e\u30ed\u30b0\u306b\u3001\u3069\u306e\u6761\u4ef6\u6587\u304c\u6210\u7acb\u3057\u305f\u304b\u3092\u793a\u3059\u8b66\u544a\u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u8868\u793a\u3059\u308b\u305f\u3081\u306e\u3082\u306e\u3067\u3059\u3002\nSCHED_WARN_ON()\u306e\u4e2d\u3067\u4f7f\u308f\u308c\u3066\u3044\u308bWARN_ONCE()\u30de\u30af\u30ed\u306f\u3001\u7b2c\u4e00\u5f15\u6570\u306b\u6307\u5b9a\u3055\u308c\u305f\u6761\u4ef6\u304c\u6e80\u305f\u3055\u308c\u305f\u3068\u304d\u306b\u3001\u7b2c\u4e8c\u5f15\u6570\u306b\u6307\u5b9a\u3055\u308c\u305f\u30c7\u30d0\u30c3\u30b0\u7528\u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u51fa\u529b\u3057\u307e\u30592\u3002\nSCHED_WARN_ON()\u3092\u7d20\u76f4\u306b\u5b9f\u88c5\u3001\u4f7f\u7528\u3057\u3088\u3046\u3068\u3059\u308b\u3068\u6b21\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3059(\u5b9f\u969b\u306e\u3082\u306e\u3068\u306f\u7570\u306a\u308a\u307e\u3059)\u3002\n#define SCHED_WARN_ON(x, msg)        WARN_ONCE(x, msg)\n...\n{\n        ...\n        SCHED_WARN_ON(number_of_runnanble_processes < 0, \"number_of_runnable_processes < 0\");\n        ...\n}\n...\n\n\u3053\u308c\u3067\u4e00\u5fdc\u76ee\u7684\u3092\u9054\u6210\u3067\u304d\u308b\u306e\u3067\u3059\u304c\u3001\u4e00\u898b\u3057\u3066\u308f\u304b\u308b\u3088\u3046\u306b\u3001\u306a\u3093\u3060\u304b\u30c0\u30b5\u3044\u3067\u3059\u3002\u540c\u3058\u30c6\u30ad\u30b9\u30c8(\"number_of_runnable_processes < 0\")\u3092\u4e8c\u56de\u66f8\u304b\u306a\u304f\u3066\u306f\u3044\u3051\u306a\u3044\u305f\u3081\u3001\u66f8\u304f\u306e\u304c\u9762\u5012\u306a\u4e0a\u306b\u3001\u6761\u4ef6\u3092\u5909\u3048\u305f\u3068\u304d\u306b\u30e1\u30c3\u30bb\u30fc\u30b8\u306e\u8ffd\u5f93\u3092\u5fd8\u308c\u305f\u308a\u3059\u308b\u53ef\u80fd\u6027\u304c\u3042\u308a\u3001\u4fdd\u5b88\u6027\u304c\u60aa\u3044\u3067\u3059\u3002\u3053\u308c\u3092\u907f\u3051\u308b\u306e\u304cC\u30de\u30af\u30ed\u306e\u3001\u5f15\u304d\u6570\u306e\u6587\u5b57\u5217\u5316\u6a5f\u80fd\u3067\u3059\u3002\n\u5f15\u6570\u306e\u6587\u5b57\u5217\u5316\u6a5f\u80fd\u306f\u3001\u30de\u30af\u30ed\u306e\u5f15\u6570\u306e\u524d\u306b\"#\"\u3068\u3044\u3046\u6f14\u7b97\u5b50\u3092\u4ed8\u3051\u308b\u3053\u3068\u306b\u3088\u3063\u3066\u5b9f\u73fe\u3057\u307e\u3059\u3002\u305f\u3068\u3048\u3070#define tokenize(a) #a\u3068\u30de\u30af\u30ed\u3092\u5b9a\u7fa9\u3059\u308b\u3068\u3001tokenize(test)\u306f\"test\"\u3068\u8a55\u4fa1\u3055\u308c\u307e\u3059\u3002\u4e0a\u8a18\u306e\u5b9f\u969b\u306eSCHED_WARN_ON()\u306f\u3001\u3053\u308c\u3092\u5fdc\u7528\u3057\u3066\u3001\u7b2c\u4e00\u3001\u305d\u3057\u3066\u552f\u4e00\u306e\u5f15\u6570\u306b\u6761\u4ef6\u6587\u3092\u6e21\u3059\u3053\u3068\u3067\u3001\u5f53\u8a72\u6761\u4ef6\u3092\u6e80\u305f\u3057\u305f\u969b\u306b\u3001\u6761\u4ef6\u5f0f\u3092\u793a\u3059\u6587\u5b57\u5217\u3092\u30ed\u30b0\u306b\u51fa\u529b\u3067\u304d\u307e\u3059\u3002\n\u5b9f\u969b\u306e\u4f7f\u7528\u4f8b\u306f\u6b21\u306e\u901a\u308a\u3067\u3059\u3002\n\nkernel/sched/sched.h\n...\n#define SCHED_WARN_ON(x)        WARN_ONCE(x, #x)\n...\nstatic inline struct cpuidle_state *idle_get_state(struct rq *rq)\n{\n        SCHED_WARN_ON(!rcu_read_lock_held());\n        return rq->idle_state;\n}\n...\n\n\ncpuidle_state()\u95a2\u6570\u306e\u5b9a\u7fa9\u306f\u30d7\u30ea\u30d7\u30ed\u30bb\u30c3\u30b5\u306b\u3088\u3063\u3066\u6b21\u306e\u3088\u3046\u306b\u5909\u63db\u3055\u308c\u307e\u3059\u3002\nstatic inline struct cpuidle_state *idle_get_state(struct rq *rq)\n{\n        WARN_ONCE(!rcu_read_lock_held(), \"!rcu_read_lock_held()\");\n        return rq->idle_state;\n}\n\n\u4e0a\u8a18\u306e\u7d20\u76f4\u306a\u5b9f\u88c5\u4f8b\u3088\u308a\u306f\u308b\u304b\u306b\u66f8\u304f\u306e\u304c\u697d\u3067\u3001\u304b\u3064\u4fdd\u5b88\u6027\u306e\u9ad8\u3044\u30b3\u30fc\u30c9\u306b\u306a\u308b\u3053\u3068\u304c\u308f\u304b\u308a\u307e\u3059\u3002\n\n\u30c8\u30fc\u30af\u30f3\u306e\u9023\u7d50\nC\u306e\u30de\u30af\u30ed\u5b9a\u7fa9\u306e\u4e2d\u3067\u306f\u30012\u3064\u306e\u30c8\u30fc\u30af\u30f33\u306e\u9023\u7d50\u306b\u3088\u3063\u3066\u65b0\u305f\u306a\u30c8\u30fc\u30af\u30f3\u3092\u751f\u6210\u3067\u304d\u307e\u3059\u3002\u3053\u308c\u306f\u6587\u5b57\u5217\u306e\u9023\u7d50\u3068\u306f\u5168\u304f\u7570\u306a\u308a\u307e\u3059\u3002\u4ee5\u4e0b\u306e\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u3092\u3054\u3089\u3093\u304f\u3060\u3055\u3044\u3002\n\nconcat_token.c\n#define concat_token(a)         \\\nstatic int func_##a(void)       \\\n{                               \\\n        return 0;               \\\n}       \n\nconcat_token(foo)\n\nint main(void)\n{       \n        return func_foo();\n}\n\n\n\u5148\u982d\u306econcat_token()\u30de\u30af\u30ed\u306e\u5b9a\u7fa9\u306e\u4e2d\u306efunc_##a\u3068\u3044\u3046\u7b87\u6240\u306b\u6ce8\u76ee\u3057\u3066\u304f\u3060\u3055\u3044\u3002\u3053\u308c\u306f\"func_\"\u3068\u3044\u3046\u30c8\u30fc\u30af\u30f3\u3068\u3001\u5f15\u6570a\u3067\u793a\u3057\u305f\u30c8\u30fc\u30af\u30f3\u306e2\u3064\u3092\u9023\u7d50\u3057\u305f\u30c8\u30fc\u30af\u30f3\u3092\u4f5c\u308b\u3068\u3044\u3046\u610f\u5473\u3067\u3059\u3002\u591a\u5206\u610f\u5473\u4e0d\u660e\u3060\u3068\u601d\u3046\u306e\u3067\u3001\u5b9f\u4f8b\u3092\u898b\u3066\u307f\u307e\u3057\u3087\u3046\u3002\nconat_token(foo)\u3092\u8a55\u4fa1\u3057\u305f\u5834\u5408\u3001func_##a\u306ffunc_foo\u306b\u306a\u308a\u307e\u3059\u3002\u305d\u306e\u5f8c\u3001\u30de\u30af\u30ed\u5168\u4f53\u306e\u8a55\u4fa1\u7d50\u679c\u306f\u6b21\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002\nstatic int func_foo(void)         \\\n{                               \\\n        return 0;               \\\n} \n\n\u30bd\u30fc\u30b9\u5168\u4f53\u3092\u30d7\u30ea\u30d7\u30ed\u30bb\u30c3\u30b5\u306b\u304b\u3051\u3066\u307f\u307e\u3057\u3087\u3046\u3002\n$ cc -E concat_token.c\n...\nstatic int func_foo(void) { return 0; }\n\nint main(void)\n{\n return func_foo();\n}\n$ \n\nfunc_foo()\u3068\u3044\u3046\u95a2\u6570\u304c\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u308b\u3053\u3068\u304c\u308f\u304b\u308a\u307e\u3059\u3002\u3064\u307e\u308a\u3053\u306e\u30de\u30af\u30ed\u306f\u3001\u5f15\u304d\u6570\u306b\u6307\u5b9a\u3057\u305f\u30c8\u30fc\u30af\u30f3(\u3053\u3053\u3067\u306f\"foo\")\u3092\u542b\u3080\u95a2\u6570\u3092\u5b9a\u7fa9\u3059\u308b\u3082\u306e\u3067\u3042\u308b\u3053\u3068\u304c\u308f\u304b\u308a\u307e\u3059\u3002\n\u3053\u308c\u3060\u3051\u3067\u306f\u7528\u9014\u304c\u308f\u304b\u308a\u306b\u304f\u3044\u306e\u3067\u3001linux\u30ab\u30fc\u30cd\u30eb\u5185\u306e\u4f7f\u7528\u4f8b\u3092\u898b\u3066\u307f\u307e\u3057\u3087\u3046\u3002\n\nfs/ext4/ext4.h\n...\n#define EXT4_FEATURE_COMPAT_FUNCS(name, flagname) \\\nstatic inline bool ext4_has_feature_##name(struct super_block *sb) \\\n{ \\\n        return ((EXT4_SB(sb)->s_es->s_feature_compat & \\\n                cpu_to_le32(EXT4_FEATURE_COMPAT_##flagname)) != 0); \\\n} \\\nstatic inline void ext4_set_feature_##name(struct super_block *sb) \\\n{ \\\n        EXT4_SB(sb)->s_es->s_feature_compat |= \\\n                cpu_to_le32(EXT4_FEATURE_COMPAT_##flagname); \\\n} \\\nstatic inline void ext4_clear_feature_##name(struct super_block *sb) \\\n{ \\\n        EXT4_SB(sb)->s_es->s_feature_compat &= \\\n                ~cpu_to_le32(EXT4_FEATURE_COMPAT_##flagname); \\\n}\n...\n\n\n\u4e00\u898b\u8907\u96d1\u3067\u3059\u304c\u3001\u5b9f\u306f\u3084\u3063\u3066\u3044\u308b\u3053\u3068\u306f\u5358\u7d14\u3067\u3059\u3002\u3053\u308c\u306fext4\u30d5\u30a1\u30a4\u30eb\u30b7\u30b9\u30c6\u30e0\u5185\u306e\u5404\u6a5f\u80fd(mkfs.ext4(8)\u3084tune2fs(8)\u306e-O\u30aa\u30d7\u30b7\u30e7\u30f3\u306b\u3088\u3063\u3066\u6709\u52b9/\u7121\u52b9\u3092\u8a2d\u5b9a)\u306b\u95a2\u3059\u308b\u95a2\u6570\u3092\u4e00\u62ec\u5b9a\u7fa9\u3059\u308b\u305f\u3081\u306e\u30de\u30af\u30ed\u3067\u3059\u3002\u7b2c\u4e00\u5f15\u6570name\u304c\u793a\u3059\u6a5f\u80fd\u306b\u3064\u3044\u3066\u3001\u7b2c\u4e8c\u5f15\u6570flagname\u306b\u3088\u3063\u3066\u793a\u3059\u30d5\u30e9\u30b0\u3092\u64cd\u4f5c\u3059\u308b\u3001\u4e00\u9023\u306e\u95a2\u6570\u3092\u5b9a\u7fa9\u3057\u307e\u3059\u3002\n\u4f8b\u3048\u3070\u6b21\u306e\u3088\u3046\u306b\u4f7f\u7528\u3057\u307e\u3059\u3002\n\nfs/ext4/ext4.h\nEXT4_FEATURE_COMPAT_FUNCS(dir_prealloc,         DIR_PREALLOC)\n\n\n\u3053\u308c\u306f\u6b21\u306e\u3088\u3046\u306b\u5c55\u958b\u3055\u308c\u307e\u3059\u3002\n...\nstatic inline bool ext4_has_feature_dir_prealloc(struct super_block *sb) \\\n{ \\\n        return ((EXT4_SB(sb)->s_es->s_feature_compat & \\\n                cpu_to_le32(EXT4_FEATURE_COMPAT_DIR_PREALLOC)) != 0); \\\n} \\\nstatic inline void ext4_set_feature_dir_prealloc(struct super_block *sb) \\\n{ \\\n        EXT4_SB(sb)->s_es->s_feature_compat |= \\\n                cpu_to_le32(EXT4_FEATURE_COMPAT_DIR_PREALLOC); \\\n} \\\nstatic inline void ext4_clear_feature_dir_prealloc(struct super_block *sb) \\\n{ \\\n        EXT4_SB(sb)->s_es->s_feature_compat &= \\\n                ~cpu_to_le32(EXT4_FEATURE_COMPAT_DIR_PREALLOC); \\\n}\n\n\u4e0a\u8a183\u3064\u306e\u95a2\u6570\u306e\u5b9a\u7fa9\u306f\u305d\u308c\u305e\u308c\u6b21\u306e\u901a\u308a\u3067\u3059\u3002\n\next4_has_feature_dir_prealloc: \u5f15\u6570sb\u3067\u6307\u5b9a\u3057\u305fext4\u30d5\u30a1\u30a4\u30eb\u30b7\u30b9\u30c6\u30e0\u304cdir_prealloc\u6a5f\u80fd4\u3092\u6301\u3063\u3066\u3044\u308b\u304b\u3069\u3046\u304b\u3092\u5224\u5b9a\next4_set_feature_dir_prealloc: \u540c\u6a5f\u80fd\u3092\u6709\u52b9\u5316\next4_clear_feature_dir_prealloc: \u540c\u6a5f\u80fd\u3092\u7121\u52b9\u5316\n\n\u4e00\u898b3\u3064\u306e\u95a2\u6570\u3092\u30de\u30af\u30ed\u5185\u3067\u5b9a\u7fa9\u3059\u308b\u306a\u3069\u3068\u3044\u3046\u56de\u308a\u304f\u3069\u3044\u3053\u3068\u3092\u305b\u305a\u306b\u76f4\u63a5\u5b9a\u7fa9\u3057\u305f\u307b\u3046\u304c\u7c21\u5358\u305d\u3046\u306b\u898b\u3048\u307e\u3059\u304c\u3001\u540c\u3058\u3088\u3046\u306a\u5b9a\u7fa9\u304c\u4f55\u5ea6\u3082\u7d9a\u304f\u3088\u3046\u306a\u5834\u5408\u306b\u3053\u306e\u30de\u30af\u30ed\u306f\u5927\u304d\u306a\u5a01\u529b\u3092\u767a\u63ee\u3057\u307e\u3059\u3002\u5b9f\u969b\u3001ext4\u306edir_prealloc\u4ee5\u5916\u306e\u69d8\u3005\u306a\u6a5f\u80fd\u306b\u3064\u3044\u3066\u540c\u69d8\u306a\u5b9a\u7fa9\u304c\u5fc5\u8981\u3067\u3042\u308a\u3001\u305d\u308c\u305e\u308c\u306b\u3064\u3044\u3066\u4e0a\u8a18\u306eEXT4_FEATURE_COMPAT_FUNCS()\u30de\u30af\u30ed5\u3067\u4e00\u62ec\u5b9a\u7fa9\u3057\u3066\u3044\u307e\u3059\u3002\u3053\u308c\u306b\u3088\u3063\u3066\u81a8\u5927\u306a\u91cf\u306e\u6a5f\u68b0\u7684\u306a\u3064\u307e\u3089\u306a\u3044\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0\u3092\u6e1b\u3089\u305b\u307e\u3059\u3002\n\nfs/ext4/ext4.h\nEXT4_FEATURE_COMPAT_FUNCS(dir_prealloc,         DIR_PREALLOC)\nEXT4_FEATURE_COMPAT_FUNCS(imagic_inodes,        IMAGIC_INODES)\nEXT4_FEATURE_COMPAT_FUNCS(journal,              HAS_JOURNAL)\nEXT4_FEATURE_COMPAT_FUNCS(xattr,                EXT_ATTR)\nEXT4_FEATURE_COMPAT_FUNCS(resize_inode,         RESIZE_INODE)\nEXT4_FEATURE_COMPAT_FUNCS(dir_index,            DIR_INDEX)\nEXT4_FEATURE_COMPAT_FUNCS(sparse_super2,        SPARSE_SUPER2)\n\n\n\u30c8\u30fc\u30af\u30f3\u306e\u9023\u7d50\u306f\u4e00\u898b\u4fbf\u5229\u305d\u3046\u3067\u3059\u304c\u3001cscope\u306a\u3069\u306e\u30c4\u30fc\u30eb\u304c\u3001\u30de\u30af\u30ed\u306b\u3088\u3063\u3066\u751f\u6210\u3055\u308c\u308b\u5909\u6570\u3084\u95a2\u6570\u3092\u3046\u307e\u304f\u8a8d\u8b58\u3057\u3066\u304f\u308c\u305a\u306b\u3001\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u30ea\u30fc\u30c7\u30a3\u30f3\u30b0\u304c\u9762\u5012\u306b\u306a\u308b\u306a\u3069\u3068\u3044\u3046\u6b20\u70b9\u3082\u3042\u308a\u307e\u3059\u3002cscope\u306a\u3069\u3092\u4f7f\u3063\u3066\u95a2\u6570\u3084\u30de\u30af\u30ed\u306e\u5b9a\u7fa9\u3092\u63a2\u3057\u3066\u3082\u5168\u304f\u51fa\u3066\u3053\u306a\u3044\u3068\u3044\u3046\u5834\u5408\u306f\u3001##\u6f14\u7b97\u5b50\u3092\u4f7f\u3063\u3066\u5b9a\u7fa9\u3055\u308c\u305f\u3082\u306e\u3067\u3042\u308b\u304b\u3069\u3046\u304b\u3092\u7591\u3063\u3066\u307f\u308b\u3068\u3088\u3044\u3068\u601d\u3044\u307e\u3059\u3002\n\n\u69cb\u9020\u4f53\u306e\u30d5\u30a3\u30fc\u30eb\u30c9\u304b\u3089\u3001\u305d\u308c\u3092\u57cb\u3081\u8fbc\u3093\u3060\u89aa\u69cb\u9020\u4f53\u3078\u306e\u30dd\u30a4\u30f3\u30bf\u3092\u5f97\u308b\n\u6b21\u306b\u793a\u3059\u306e\u306f\u3001\u3042\u308b\u69cb\u9020\u4f53\u306e\u30d5\u30a3\u30fc\u30eb\u30c9\u304b\u3089\u3001\u305d\u308c\u3092\u57cb\u3081\u8fbc\u3093\u3067\u3044\u308b\u89aa\u69cb\u9020\u4f53\u3078\u306e\u30dd\u30a4\u30f3\u30bf\u3092\u5f97\u308b\u30de\u30af\u30ed\u3067\u3059\u3002\n\ninclude/linux/kernel.h\n/**                                                                                                                                                                                                                                           \n * container_of - cast a member of a structure out to the containing structure                                                                                                                                                                \n * @ptr:        the pointer to the member.                                                                                                                                                                                                    \n * @type:       the type of the container struct this is embedded in.                                                                                                                                                                         \n * @member:     the name of the member within the struct.                                                                                                                                                                                     \n *                                                                                                                                                                                                                                            \n */\n#define container_of(ptr, type, member) ({                      \\\n        const typeof( ((type *)0)->member ) *__mptr = (ptr);    \\\n        (type *)( (char *)__mptr - offsetof(type,member) );})\n\n\nptr(\u7b2c\u4e00\u5f15\u6570)\u304cmember(\u7b2c\u4e09\u5f15\u6570)\u3068\u3044\u3046\u30d5\u30a3\u30fc\u30eb\u30c9\u540d\u3067\u57cb\u3081\u8fbc\u307e\u308c\u305ftype(\u7b2c\u4e8c\u5f15\u6570)\u578b\u306e\u30c7\u30fc\u30bf\u306e\u30a2\u30c9\u30ec\u30b9\u3092\u6c42\u3081\u307e\u3059\u3002\u307e\u305a\u306f\u3001\u3069\u3046\u3084\u3063\u3066\u3053\u306e\u3088\u3046\u306a\u6a5f\u80fd\u3092\u5b9f\u88c5\u3057\u3066\u3044\u308b\u304b\u3092\u3001\u3053\u308c\u304b\u3089\u7d10\u89e3\u3044\u3066\u3044\u304d\u307e\u3059\u3002\ncontainer_of()\u306e\u4e2d\u306b\u3042\u308boffsetof()\u306e\u5b9a\u7fa9\u3092\u793a\u3057\u307e\u30596\u3002\n\ninclude/linux/stddef.h\n...\n#define offsetof(TYPE, MEMBER)  ((size_t)&((TYPE *)0)->MEMBER)\n...\n\n\n\n\u3053\u306e\u30de\u30af\u30ed\u306b\u3088\u3063\u3066\u3001TYPE(\u7b2c\u4e00\u5f15\u6570)\u3067\u793a\u3055\u308c\u308b\u69cb\u9020\u4f53\u306e\u4e2d\u306eMEMBER(\u7b2c\u4e8c\u5f15\u6570)\u30d5\u30a3\u30fc\u30eb\u30c9\u306e\u30d0\u30a4\u30c8\u5358\u4f4d\u306e\u30aa\u30d5\u30bb\u30c3\u30c8\u304c\u6c42\u3081\u3089\u308c\u307e\u3059\u3002\u3053\u306e\u30de\u30af\u30ed\u306f\u3001\u30bc\u30ed\u756a\u5730\u306b\u914d\u7f6e\u3057\u305fTYPE\u578b\u30c7\u30fc\u30bf\u306e\u4e2d\u306eMEMBER\u30d5\u30a3\u30fc\u30eb\u30c9\u306e\u30a2\u30c9\u30ec\u30b9(\u3092size_t\u578b\u306b\u30ad\u30e3\u30b9\u30c8\u3057\u305f\u3082\u306e)\u306fTYPE\u5185\u306eMEMBER\u306e\u30aa\u30d5\u30bb\u30c3\u30c8\u306b\u7b49\u3057\u3044\u3068\u3044\u3046\u6027\u8cea\u3092\u5229\u7528\u3057\u3066\u3044\u307e\u3059\u3002\u308f\u304b\u3063\u3066\u3057\u307e\u3048\u3070\u7c21\u5358\u306a\u306e\u3067\u3059\u304c\u3001\u521d\u898b\u3067\u306f\u3051\u3063\u3053\u3046\u610f\u5473\u4e0d\u660e\u3067\u5f15\u3044\u3066\u3057\u307e\u3046\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u3002\n\u3053\u308c\u3092\u8e0f\u307e\u3048\u3066container_of()\u306e\u5b9a\u7fa9\u3092\u518d\u5ea6\u898b\u3066\u307f\u307e\u3057\u3087\u3046\u3002\n\ninclude/linux/kernel.h\n...\n#define container_of(ptr, type, member) ({                      \\\n        const typeof( ((type *)0)->member ) *__mptr = (ptr);    \\\n        (type *)( (char *)__mptr - offsetof(type,member) );})\n\n\n\u4e00\u884c\u76ee\u306f\u3061\u3087\u3063\u3068\u56de\u308a\u304f\u3069\u304f\u898b\u3048\u307e\u3059\u304c\u3001\u5358\u306b __mptr\u5909\u6570\u306bptr(\u7b2c\u4e00\u5f15\u6570)\u3092\u4ee3\u5165\u3057\u3066\u3044\u308b\u3060\u3051\u3067\u3059\u3002\u4e8c\u884c\u76ee\u3067\u306f __mptr(\u3059\u306a\u308f\u3061ptr)\u304b\u3089\u3001type\u5185\u306emember\u306e\u30aa\u30d5\u30bb\u30c3\u30c8\u3092\u5f15\u3044\u3066\u3044\u307e\u3059\u3002\u3064\u307e\u308a\u3001\u3053\u308c\u3067ptr\u306e\u57cb\u3081\u8fbc\u307f\u5143\u3067\u3042\u308btype\u578b\u306e\u30c7\u30fc\u30bf\u304c\u6c42\u307e\u3063\u3066\u3057\u307e\u3046\u3068\u3044\u3046\u3053\u3068\u3067\u3059\u3002\u4e00\u898b\u4e00\u884c\u76ee\u3092\u7701\u3044\u3066\u4e8c\u884c\u76ee\u3092(type *)((char *)ptr - offsetof(type,member))\u3060\u3051\u306b\u3059\u308c\u3070\u6e08\u307f\u305d\u3046\u306b\u898b\u3048\u307e\u3059\u304c\u3001\u4e00\u884c\u76ee\u306b\u3088\u3063\u3066\u3001ptr\u3068member\u306e\u578b\u306e\u5bfe\u5fdc\u304c\u53d6\u308c\u3066\u3044\u306a\u3044\u5834\u5408\u306b\u8b66\u544a\u30e1\u30c3\u30bb\u30fc\u30b8\u304c\u51fa\u308b\u3088\u3046\u306b\u306a\u3063\u3066\u304a\u308a\u3001\u601d\u308f\u306c\u30d0\u30b0\u3092\u9632\u3052\u308b\u3088\u3046\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u3002\n\n\u4f8b\u306b\u3088\u3063\u3066\u3001\u3053\u308c\u3060\u3051\u3067\u306f\u4f55\u304c\u5b09\u3057\u3044\u306e\u304b\u3088\u304f\u308f\u304b\u3089\u306a\u3044\u306e\u3067\u3001linux\u30ab\u30fc\u30cd\u30eb\u306e\u30d5\u30a1\u30a4\u30eb\u30b7\u30b9\u30c6\u30e0\u306e\u30b3\u30fc\u30c9\u3092\u5b9f\u4f8b\u3068\u3057\u3066\u7d39\u4ecb\u3057\u307e\u3059\u3002\nlinux\u30ab\u30fc\u30cd\u30eb\u306b\u304a\u3044\u3066\u3001\u30d5\u30a1\u30a4\u30eb\u30b7\u30b9\u30c6\u30e0\u306e\u30b3\u30fc\u30c9\u306fVirtual File System\u5c64(\u4ee5\u5f8cVFS\u5c64\u3068\u8a18\u8f09)\u3068\u3044\u3046\u5168\u30d5\u30a1\u30a4\u30eb\u30b7\u30b9\u30c6\u30e0(ext4, XFS, Btrfs\u306a\u3069)\u5171\u901a\u306e\u30b3\u30fc\u30c9\u3068\u3001\u5404\u30d5\u30a1\u30a4\u30eb\u30b7\u30b9\u30c6\u30e0\u56fa\u6709\u306e\u30b3\u30fc\u30c9\u306b\u5206\u304b\u308c\u3066\u3044\u307e\u3059\u3002\u305f\u3068\u3048\u3070\u5168\u30d5\u30a1\u30a4\u30eb\u30b7\u30b9\u30c6\u30e0\u306b\u5171\u901a\u3059\u308binode\u306b\u95a2\u3059\u308b\u60c5\u5831\u306fVFS\u5c64\u306b\u5b58\u5728\u3059\u308bstruct inode\u3068\u3044\u3046\u69cb\u9020\u4f53\u306b\u3088\u3063\u3066\u8868\u73fe\u3057\u307e\u3059\u3002\u3053\u308c\u306b\u5bfe\u3057\u3066\u3001\u5404\u30d5\u30a1\u30a4\u30eb\u30b7\u30b9\u30c6\u30e0\u306f\u3001\u81ea\u8eab\u56fa\u6709\u306einode\u60c5\u5831\u3092\u542b\u3080\u69cb\u9020\u4f53\u3092\u6301\u3063\u3066\u304a\u308a\u3001\u305d\u306e\u4e2d\u306bstruct inode\u3092\u57cb\u3081\u8fbc\u3093\u3067\u3044\u307e\u3059\u3002\nBtrfs\u3092\u4f8b\u306b\u3068\u3063\u3066\u8aac\u660e\u3059\u308b\u3068\u3001btrfs\u56fa\u6709\u306einode\u60c5\u5831\u306fstruct btrfs_inode\u69cb\u9020\u4f53\u306b\u683c\u7d0d\u3055\u308c\u307e\u3059\u3002\u305d\u306e\u3046\u3061\u30d5\u30a1\u30a4\u30eb\u30b7\u30b9\u30c6\u30e0\u5171\u901a\u306e\u90e8\u5206\u3001\u3064\u307e\u308a\u3055\u304d\u307b\u3069\u8ff0\u3079\u305fstruct inode\u306f\u3001\u3053\u306e\u69cb\u9020\u4f53\u306e\u4e2d\u306evfs_inode\u3068\u3044\u3046\u30d5\u30a3\u30fc\u30eb\u30c9\u3068\u3057\u3066\u57cb\u3081\u8fbc\u307e\u308c\u3066\u3044\u307e\u3059\u3002\n\nfs/btrfs/btrfs_inode.h\n...\nstruct btrfs_inode {\n        ...\n        struct inode vfs_inode;\n};\n...\n\n\n\nBtrfs\u5185\u306einode\u306e\u5404\u7a2e\u6642\u523b([cma]time)\u3092\u66f4\u65b0\u3059\u308b\u969b\u306f\u3001VFS\u5c64\u304b\u3089btrfs_update_time()\u3068\u3044\u3046\u95a2\u6570\u304c\u547c\u3070\u308c\u307e\u3059\u3002\n\nfs/btrfs/inode.c\nstatic int btrfs_update_time(struct inode *inode, struct timespec *now,\n                             int flags)\n{       \n        struct btrfs_root *root = BTRFS_I(inode)->root;\n...\n}\n\n\n\u3053\u306e\u95a2\u6570\u306e\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30a4\u30b9\u306fBtrfs\u3092\u542b\u3080\u500b\u3005\u306e\u30d5\u30a1\u30a4\u30eb\u30b7\u30b9\u30c6\u30e0\u3067\u306f\u306a\u304fVFS\u5c64\u306b\u3088\u3063\u3066\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u307e\u3059\u306e\u3067\u3001\u305d\u306e\u5f15\u304d\u6570\u306b\u3088\u3063\u3066\u6e21\u3055\u308c\u308binode\u60c5\u5831\u306f\u5fc5\u7136\u7684\u306bstruct btrfs_inode\u3067\u306f\u306a\u304f\u3001struct inode\u306b\u306a\u308a\u307e\u3059\u3002\u3057\u304b\u3057\u3001Btrfs\u3068\u3057\u3066\u306f\u6642\u523b\u306e\u66f4\u65b0\u306b\u4f34\u3063\u3066\u5f8c\u8005\u3060\u3051\u3067\u306f\u306a\u304f\u524d\u8005\u306e\u60c5\u5831\u3092\u4f7f\u3063\u3066\u51e6\u7406\u3092\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\n\u3067\u306f\u3069\u3046\u3059\u308c\u3070\u3044\u3044\u304b\u3068\u3044\u3046\u3068\u3001\u3053\u3053\u3067container_of()\u304c\u767b\u5834\u3057\u307e\u3059\u3002btrfs_update_time()\u5192\u982d\u306eBTRFS_I()\u306e\u4e2d\u3067\u3001container_of()\u3092\u547c\u3073\u51fa\u3059\u3053\u3068\u306b\u3088\u3063\u3066\u3001inode(\u7b2c\u4e00\u5f15\u6570)\u3092vfs_inode(\u7b2c\u4e09\u5f15\u6570)\u3068\u3044\u3046\u30d5\u30a3\u30fc\u30eb\u30c9\u540d\u3067\u57cb\u3081\u8fbc\u3093\u3067\u3044\u308bstruct btrfs_inode(\u7b2c\u4e8c\u5f15\u6570)\u306e\u30a2\u30c9\u30ec\u30b9\u3092\u6c42\u3081\u307e\u3059\u3002\n\nfs/btrfs/btrfs_inode.h\nstatic inline struct btrfs_inode *BTRFS_I(struct inode *inode)\n{\n        return container_of(inode, struct btrfs_inode, vfs_inode);\n...\n}\n\n\n\u5f8c\u306f\u6c42\u3081\u305fstruct btrfs_inode\u306e\u30c7\u30fc\u30bf\u3078\u306e\u30dd\u30a4\u30f3\u30bf\u3092\u4f7f\u3063\u3066\u7c9b\u3005\u3068\u51e6\u7406\u3092\u3059\u308b\u3060\u3051\u3067\u3059\u3002\u5177\u4f53\u7684\u306b\u3069\u3046\u3044\u3046\u51e6\u7406\u3092\u3059\u308b\u304b\u306f\u672c\u66f8\u306e\u5bfe\u8c61\u7bc4\u56f2\u5916\u306a\u306e\u3067\u5272\u611b\u3057\u307e\u3059\u3002\n\n\u30ea\u30b9\u30c8\u64cd\u4f5c\nlinux\u30ab\u30fc\u30cd\u30eb\u306f\u3001\u305d\u306e\u4e2d\u306bstruct list_head\u3068\u3044\u3046\u69cb\u9020\u4f53\u306b\u3088\u3063\u3066\u7ba1\u7406\u3059\u308b\u53cc\u65b9\u5411\u30ea\u30b9\u30c8\u306e\u5b9f\u88c5\u3092\u6301\u3063\u3066\u3044\u307e\u3059\u3002\u3053\u306e\u30ea\u30b9\u30c8\u306f\u4f8b\u306b\u3088\u3063\u3066\u3001C\u8a00\u8a9e\u306e\u30de\u30af\u30ed\u3092\u6700\u5927\u9650\u306b\u6d3b\u7528\u3057\u3066\u5b9f\u88c5\u3055\u308c\u3066\u3044\u307e\u3059\u3002\u3053\u306e\u7bc0\u3067\u306f\u305d\u306e\u5b9f\u88c5\u306b\u3064\u3044\u3066\u6271\u3044\u307e\u3059\u3002\n\u30ea\u30b9\u30c8\u306b\u3064\u3044\u3066\u306e\u57fa\u672c\u7684\u306a\u77e5\u8b58\u306f\u3001\u304a\u624b\u6570\u3067\u3059\u304c\u5225\u8a18\u4e8b\u306e\"\u30ea\u30b9\u30c8\u306e\u69cb\u9020\"\u3068\u3044\u3046\u7bc0\u306b\u66f8\u3044\u3066\u3044\u307e\u3059\u306e\u3067\u3001\u305d\u3061\u3089\u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\u3002\u77ed\u3044\u3057\u5358\u7d14\u306a\u306e\u3067\u3001\u77ed\u6642\u9593\u3067\u8aad\u3081\u308b\u3068\u601d\u3044\u307e\u3059\u3002\n\u30ea\u30b9\u30c8\u3092\u51e6\u7406\u3059\u308b\u305f\u3081\u306e\u30de\u30af\u30ed\u306f\u591a\u304f\u3042\u308a\u307e\u3059\u304c\u3001\u3053\u3053\u3067\u306f\u305d\u306e\u4e2d\u3067\u30de\u30af\u30ed\u3092\u6d3b\u7528\u3057\u3066\u3044\u308b\u51e6\u7406\u306b\u3064\u3044\u30662\u3064\u7d39\u4ecb\u3057\u307e\u3059\u3002\n\u307e\u305a\u306f\u6307\u5b9a\u3057\u305fstruct list_head\u306e\u30c7\u30fc\u30bf\u304b\u3089\u3001\u305d\u308c\u3092\u57cb\u3081\u8fbc\u3093\u3060\u89aa\u69cb\u9020\u4f53\u3092\u6c42\u3081\u308blist_entry()\u30de\u30af\u30ed\u3067\u3059\u3002\n\ninclude/linux/list.h\n/**                                                                                                                                                                                                                                           \n * list_entry - get the struct for this entry                                                                                                                                                                                                 \n * @ptr:        the &struct list_head pointer.                                                                                                                                                                                                \n * @type:       the type of the struct this is embedded in.                                                                                                                                                                                   \n * @member:     the name of the list_head within the struct.                                                                                                                                                                                  \n */\n#define list_entry(ptr, type, member) \\\n        container_of(ptr, type, member)\n\n\n\u3053\u308c\u306f\u5b9a\u7fa9\u3092\u805e\u3044\u305f\u3060\u3051\u3067\u30d4\u30f3\u3068\u6765\u308b\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u304c\u3001\u5185\u90e8\u3067container_of()\u3092\u547c\u3073\u51fa\u3057\u3066\u3044\u308b\u3060\u3051\u3067\u3059\u3002\u3053\u308c\u3067ptr(\u7b2c\u4e00\u5f15\u6570)\u3092member(\u7b2c\u4e09\u5f15\u6570)\u3068\u3044\u3046\u30d5\u30a3\u30fc\u30eb\u30c9\u540d\u3067\u57cb\u3081\u8fbc\u3093\u3067\u3044\u308btype\u578b\u306e\u30c7\u30fc\u30bf\u3078\u306e\u30dd\u30a4\u30f3\u30bf\u3092\u7372\u5f97\u3067\u304d\u307e\u3059\u3002\n\u7d9a\u3044\u3066\u3001\u30ea\u30b9\u30c8\u5185\u306e\u5168\u30a8\u30f3\u30c8\u30ea\u3092\u9806\u756a\u306b\u51e6\u7406\u3059\u308blist_for_each_entry()\u30de\u30af\u30ed\u3092\u898b\u3066\u307f\u307e\u3059\u3002\n\ninclude/linux/list.h\n/**                                                                                                                                                                                                                                           \n * list_for_each_entry  -       iterate over list of given type                                                                                                                                                                               \n * @pos:        the type * to use as a loop cursor.                                                                                                                                                                                           \n * @head:       the head for your list.                                                                                                                                                                                                       \n * @member:     the name of the list_head within the struct.                                                                                                                                                                                  \n */\n#define list_for_each_entry(pos, head, member)                          \\\n        for (pos = list_first_entry(head, typeof(*pos), member);        \\\n             &pos->member != (head);                                    \\\n             pos = list_next_entry(pos, member))\n\n\n\u3053\u306e\u95a2\u6570\u306f\u3001head\u3067\u793a\u3055\u308c\u308b\u30ea\u30b9\u30c8\u306e\u4e2d\u306e\u5168\u8981\u7d20\u306b\u3064\u3044\u3066\u3001\u5404\u8981\u7d20\u3092pos\u3068\u3044\u3046\u540d\u524d\u3067\u53d6\u308a\u51fa\u3059\u3053\u3068\u306b\u3088\u3063\u3066\u305d\u308c\u305e\u308c\u306b\u5bfe\u3057\u3066\u51e6\u7406\u3092\u3057\u307e\u3059\u3002\u3053\u3053\u3067\u3001pos\u306e\u4e2d\u3067head\u306b\u5bfe\u5fdc\u3059\u308b\u30ea\u30b9\u30c8\u306fmember\u3068\u3044\u3046\u30d5\u30a3\u30fc\u30eb\u30c9\u540d\u3067\u57cb\u3081\u8fbc\u307e\u308c\u3066\u3044\u307e\u3059\u3002\n\u4f7f\u7528\u4f8b\u3092\u793a\u3057\u307e\u3059\u3002\u30b5\u30f3\u30d7\u30eb\u30d7\u30ed\u30b0\u30e9\u30e0\u306e\u4ed5\u69d8\u3068\u30bd\u30fc\u30b9\u306f\u6b21\u306e\u901a\u308a\u3067\u3059\u3002\n\u4ed5\u69d8:\n\nmylist\u3068\u3044\u3046\u30ea\u30b9\u30c8\u304c\u3042\u308b\nmylist\u5185\u306e\u30a8\u30f3\u30c8\u30ea\u306fint\u578b\u306en\u3068\u3044\u3046\u540d\u524d\u306e\u552f\u4e00\u306e\u30c7\u30fc\u30bf\u3092\u6301\u3064\nmylist_show()\u306f\u3001mylist\u5185\u306e\u3059\u3079\u3066\u306e\u30a8\u30f3\u30c8\u30ea\u306b\u5bfe\u3057\u3066n\u3092\u30ab\u30fc\u30cd\u30eb\u30ed\u30b0\u306b\u51fa\u529b\u3059\u308b\n\n\ntest.c\nstatic LIST_HEAD(mylist);\n\nstruct mylist_entry {\n        struct list_head list;\n        int n;\n};\n...\nstatic void mylist_show(void) {\n        struct mylist_entry *e;\n\n        printk(KERN_ALERT \"mylist: show contents\\n\");\n\n        list_for_each_entry(e, &mylist, list) {\n                printk(KERN_ALERT \"\\t%d\\n\", e->n);\n        }\n}\n\n\n\u4e00\u898b\u95a2\u6570\u306e\u3088\u3046\u306b\u898b\u3048\u308b list_for_each_entry()\u30de\u30af\u30ed\u304b\u3089\u30d6\u30ed\u30c3\u30af\u304c\u751f\u3048\u3066\u305d\u306e\u4e2d\u3067\u51e6\u7406\u3092\u3057\u3066\u3044\u308b\u3068\u3044\u3046\u306e\u306fC\u8a00\u8a9e\u3092\u77e5\u3063\u3066\u3044\u308c\u3070\u77e5\u3063\u3066\u3044\u308b\u307b\u3069\u9a5a\u304f\u3068\u601d\u3044\u307e\u3059\u304c\u3001\u524d\u8ff0\u306e\u3088\u3046\u306a\u30de\u30af\u30ed\u5b9a\u7fa9\u3092\u3057\u3066\u3044\u308c\u3070\u3053\u306e\u3088\u3046\u306a\u82b8\u5f53\u304c\u53ef\u80fd\u306a\u306e\u3067\u3059\u3002\nlinux\u30ab\u30fc\u30cd\u30eb\u306e\u4e2d\u306b\u306f\u4ed6\u306b\u3082\"for_each\"\u3068\u3044\u3046\u6587\u5b57\u5217\u3092\u542b\u3080\u540d\u524d\u306e\u985e\u4f3c\u306e\u30de\u30af\u30ed\u304c\u968f\u6240\u306b\u51fa\u3066\u304d\u307e\u3059\u3002\u305f\u3068\u3048\u3070\u5404\u30a8\u30f3\u30c8\u30ea\u306e\u51e6\u7406\u4e2d\u306b\u30a8\u30f3\u30c8\u30ea\u306e\u524a\u9664\u304c\u53ef\u80fd\u306alist_for_each_safe()\u304c\u3042\u308a\u307e\u3059\u3002\u4ed6\u306b\u3082\u3001\u30ea\u30b9\u30c8\u3068\u306f\u5225\u306e\u30c7\u30fc\u30bf\u69cb\u9020\u306b\u3082\u985e\u7dad\u6301\u3057\u305fAPI\u304c\u7528\u610f\u3055\u308c\u3066\u3044\u308b\u3053\u3068\u3082\u3042\u308a\u307e\u3059\u3002\u8208\u5473\u304c\u3042\u308c\u3070\u3001\u305d\u308c\u305e\u308c\u306e\u5b9a\u7fa9\u3092\u898b\u3066\u307f\u308b\u3068\u9762\u767d\u3044\u3068\u601d\u3044\u307e\u3059\u3002\n\n\u304a\u308f\u308a\u306b\n\u672c\u8a18\u4e8b\u306f\u57f7\u7b46\u6642\u70b9\u3067\u81ea\u5206\u306e\u8133\u5185\u306b\u305f\u307e\u305f\u307e\u6b8b\u3063\u3066\u3044\u305f\u30de\u30af\u30ed\u306b\u3064\u3044\u3066\u66f8\u3044\u305f\u3060\u3051\u306a\u306e\u3067\u3001\u4ed6\u306b\u3082\u9762\u767d\u3044\u30de\u30af\u30ed\u306f\u3044\u304f\u3089\u3067\u3082\u3042\u308b\u3068\u601d\u3044\u307e\u3059\u3002\u601d\u3044\u51fa\u3057\u305f\u3089\u307e\u305f\u8ffd\u8a18\u3059\u308b\u4e88\u5b9a\u3067\u3059\u3002\u8aad\u8005\u306e\u304b\u305f\u304c\u305f\u3082\u3001\u300c\u3053\u308c\u3082\u7d39\u4ecb\u3057\u3066\u304f\u308c\u300d\u3068\u304b\u300c\u3053\u306e\u30de\u30af\u30ed\u306e\u610f\u5473\u304c\u308f\u304b\u3089\u306a\u3044\u3093\u3060\u3051\u3069\u300d\u306a\u3069\u3042\u308a\u307e\u3057\u305f\u3089\u3001\u6559\u3048\u3066\u3044\u305f\u3060\u3051\u308b\u3068\u3001\u4eca\u5f8c\u8ffd\u8a18\u3059\u308b\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u3002\n\n\n\n\n\u540c\u3058\u540d\u524d\u3067\u5225\u306e\u5f15\u6570\u3001\u623b\u308a\u5024\u3092\u6301\u3064\u95a2\u6570\u3092\u5b9a\u7fa9\u3067\u304d\u308b\u6a5f\u80fd\u3002\u4f8b\u3048\u3070swap(int *a, int *b)\u3068swap(double *a, double *b)\u304c\u5171\u5b58\u3067\u304d\u308b\u3002C\u3067\u3053\u308c\u3092\u3084\u308d\u3046\u3068\u3059\u308b\u3068\u3001\u540c\u540d\u95a2\u6570\u304c2\u3064\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u308b\u3068\u3044\u3046\u65e8\u306e\u30b3\u30f3\u30d1\u30a4\u30eb\u30a8\u30e9\u30fc\u304c\u51fa\u307e\u3059\u3002\u00a0\u21a9\n\n\n\u6700\u521d\u306b\u6761\u4ef6\u3092\u6e80\u305f\u3057\u305f\u3068\u304d\u306e\u307f\u51fa\u529b\u3055\u308c\u307e\u3059\u3002\u305d\u308c\u6545\u306b_ONCE\u3068\u3044\u3046\u540d\u524d\u304c\u4ed8\u3044\u3066\u3044\u307e\u3059)\u3002\u00a0\u21a9\n\n\n\u30c8\u30fc\u30af\u30f3\u3068\u3044\u3046\u8a00\u8449\u304c\u3088\u304f\u308f\u304b\u3089\u306a\u3051\u308c\u3070\u3001\u3053\u3053\u3067\u306f\u306a\u3093\u3068\u306a\u304f\u3001\u30b3\u30f3\u30d1\u30a4\u30e9\u306b\u5909\u6570\u540d\u3084\u95a2\u6570\u540d\u3068\u89e3\u91c8\u3055\u308c\u308b\u6587\u5b57\u5217\u3068\u8003\u3048\u3066\u3082\u3089\u3063\u3066\u3044\u3044\u3067\u3059\u3002\u00a0\u21a9\n\n\n\u3053\u3053\u3067\u306f\u6a5f\u80fd\u305d\u306e\u3082\u306e\u306e\u610f\u5473\u306f\u91cd\u8981\u3067\u306f\u306a\u3044\u306e\u3067\u5272\u611b\u00a0\u21a9\n\n\n\u3088\u308a\u6b63\u78ba\u306b\u306f\u3001\u3053\u308c\u306b\u52a0\u3048\u3066EXT4_FEATURE_RO_COMPAT_FUNCS()\u30de\u30af\u30ed\u3001\u304a\u3088\u3073EXT4_FEATURE_INCOMPAT_FUNCS()\u30de\u30af\u30ed\u3082\u7528\u3044\u308b\u3002\u00a0\u21a9\n\n\n\u5b9f\u969b\u306b\u306f\u4e0b\u8a18\u5b9a\u7fa9\u3092\u76f4\u63a5\u4f7f\u3046\u306e\u3067\u306f\u306a\u304f\u30b3\u30f3\u30d1\u30a4\u30e9(\u901a\u5e38gcc)\u7d44\u307f\u8fbc\u307f\u306e\u540c\u7b49\u6a5f\u80fd\u3092\u4f7f\u3046\u306e\u3067\u3059\u304c\u3001\u7406\u89e3\u3092\u7c21\u5358\u306b\u3059\u308b\u305f\u3081\u306b\u3053\u3061\u3089\u3092\u4f8b\u306b\u4f7f\u3044\u307e\u3059\u3002\u00a0\u21a9\n\n\n\n# \u306f\u3058\u3081\u306b\n\nlinux\u30ab\u30fc\u30cd\u30eb\u306fC\u8a00\u8a9e\u306e\u30de\u30af\u30ed\u3092\u99c6\u4f7f\u3057\u3066\u66f8\u304b\u308c\u3066\u3044\u307e\u3059\u3002\u305d\u308c\u3089\u306e\u3046\u3061\u3001\u51dd\u3063\u305f\u30de\u30af\u30ed\u306b\u306a\u3058\u307f\u306e\u7121\u3044\u4eba\u306b\u306f\u521d\u898b\u3067\u306f\u610f\u56f3\u304c\u308f\u304b\u3089\u306a\u3044&\u308f\u304b\u3063\u3066\u307f\u308c\u3070\u9762\u767d\u3044\u3067\u3042\u308d\u3046\u3082\u306e\u3092\u3044\u304f\u3064\u304b\u7d39\u4ecb\u3044\u305f\u3057\u307e\u3059\u3002\u5bfe\u8c61\u8aad\u8005\u306f\u3001C\u8a00\u8a9e\u306e\u30e6\u30fc\u30b6\u3060\u3051\u308c\u3069\u3082\u3001\u30de\u30af\u30ed\u306f\u5b9a\u6570\u5b9a\u7fa9\u304f\u3089\u3044\u306b\u3057\u304b\u4f7f\u308f\u306a\u3044\u3068\u3044\u3046\u30e9\u30a4\u30c8\u306a\u30de\u30af\u30ed\u30e6\u30fc\u30b6\u3067\u3059\u3002\n\n# \u30de\u30af\u30ed\u3092\u4f7f\u7528\u3059\u308b\u5834\u6240\u306b\u4f9d\u5b58\u3059\u308b\u30a8\u30e9\u30fc\u3092\u9632\u3050\n\n\u6b21\u306e\u30de\u30af\u30ed\u306f\u3001\u4e8c\u3064\u306e\u5f15\u304d\u6570\u306e\u5024\u3092\u7f6e\u63db\u3059\u308b\u3060\u3051\u306e\u5358\u7d14\u306a\u3082\u306e\u3067\u3059\u3002\n\n```c:include/linux/kernel.h\n#define swap(a, b) \\\n        do { typeof(a) __tmp = (a); (a) = (b); (b) = __tmp; } while (0)\n```\n\n\u6ce8\u76ee\u3059\u3079\u304d\u306f\u30de\u30af\u30ed\u306e\u5b9a\u7fa9\u5168\u4f53\u3092\u56f2\u3093\u3067\u3044\u308b`do { ... } while (0)`\u3068\u3044\u3046\u8868\u8a18\u3067\u3059\u3002\u521d\u898b\u306e\u4eba\u306b\u306f\u4f55\u306e\u3053\u3068\u304b\u308f\u304b\u3089\u306a\u3044\u3068\u601d\u3044\u307e\u3059\u3002\u8003\u3048\u3089\u308c\u308b\u6700\u3082\u5358\u7d14\u306a\u5b9a\u7fa9\u304b\u3089\u9061\u3063\u3066\u3001\u306a\u305c\u3053\u306e\u3088\u3046\u306a\u5b9a\u7fa9\u306b\u3059\u308b\u3068\u3088\u3044\u306e\u304b\u3092\u898b\u3066\u307f\u307e\u3057\u3087\u3046\u3002\n\n\u3053\u306e\u30de\u30af\u30ed\u306edo {} while\u6587\u306e\u30d6\u30ed\u30c3\u30af\u3092\u5916\u3057\u305f\u30d0\u30fc\u30b8\u30e7\u30f3\u306e\u30de\u30af\u30ed\u3092\u4f7f\u3063\u3066\u307f\u307e\u3057\u3087\u3046\u3002\n\n```c:swap.c\n#include <stdio.h>\n\n#define swap(a, b) \\\n        typeof(a) __tmp = (a); (a) = (b); (b) = __tmp;\n\nint main(void)\n{\n        int a = 0, b = 1;\n        swap(a, b);\n        printf(\"%d %d\\n\", a, b);\n        return 0;\n}\n```\n\n\u5b9f\u884c\u4f8b\u3092\u793a\u3057\u307e\u3059\u3002\n\n```shell-session\n$ make swap\ncc     swap.c   -o swap\n$ ./swap \n1 0\n$ \n```\n\n\u3061\u3083\u3093\u3068\u52d5\u3044\u3066\u3044\u308b\u3088\u3046\u306b\u898b\u3048\u307e\u3059\u3002\u3057\u304b\u3057\u3001\u3053\u308c\u304c\u6b21\u306e\u3088\u3046\u306a\u4f7f\u3044\u65b9\u3060\u3068\u3044\u304b\u304c\u3067\u3057\u3087\u3046\u304b\u3002\n\n```c:swap2.c\n#include <stdio.h>\n\n#define swap(a, b) \\\n        typeof(a) __tmp = (a); (a) = (b); (b) = __tmp;\n\nint main(void)\n{\n        int a = 0, b = 1;\n        if (0)\n                swap(a, b);\n        printf(\"%d %d\\n\", a, b);\n        return 0;\n}\n```\n\n\u30b3\u30f3\u30d1\u30a4\u30eb\u3057\u307e\u3059\u3002\n\n```shell-session\n$ make swap2\ncc     swap2.c   -o swap2\nswap2.c: In function 'main':\nswap2.c:4:9: error: expected expression before 'typeof'\n         typeof(a) __tmp = (a); (a) = (b); (b) = __tmp;\n         ^\nswap2.c:10:3: note: in expansion of macro 'swap'\n   swap(a, b);\n   ^~~~\nswap2.c:4:49: error: '__tmp' undeclared (first use in this function)\n         typeof(a) __tmp = (a); (a) = (b); (b) = __tmp;\n...\nmake: *** [swap2] Error 1\n$ \n```\n\n\u671f\u5f85\u5024\u306fif\u6587\u306e\u4e2d\u306eswap()\u30de\u30af\u30ed\u306f\u5b9f\u884c\u305b\u305a\u306b\u7aef\u672b\u4e0a\u306b\"0 1\u00a5n\"\u3068\u3044\u3046\u51fa\u529b\u3092\u3059\u308b\u3001\u3068\u3044\u3046\u3082\u306e\u3067\u3059\u304c\u3001\u5b9f\u969b\u306f\u5c71\u307b\u3069\u30a8\u30e9\u30fc\u304c\u51fa\u3066\u30b3\u30f3\u30d1\u30a4\u30eb\u304c\u5931\u6557\u3057\u307e\u3057\u305f\u3002\u30bd\u30fc\u30b9\u3092\u30b3\u30f3\u30d1\u30a4\u30eb\u305b\u305a\u306b\u30d7\u30ea\u30d7\u30ed\u30bb\u30c3\u30b5\u3060\u3051\u3092\u304b\u3051\u3066\u539f\u56e0\u3092\u63a2\u3063\u3066\u307f\u307e\u3057\u3087\u3046\u3002\n\n```shell-session\n$ cc -E swap2.c\n...\nint main(void)\n{\n int a = 0, b = 1;\n if (0)\n  typeof(a) __tmp = (a); (a) = (b); (b) = __tmp;;\n printf(\"%d %d\\n\", a, b);\n return 0;\n}\n$ \n```\n\n\u4e00\u898b\u6b63\u3057\u3044\u3088\u3046\u306b\u898b\u3048\u307e\u3059\u304c\u3001\u5236\u5fa1\u69cb\u9020\u3092\u610f\u8b58\u3057\u3066\u6574\u5f62\u3057\u3066\u307f\u308b\u3068\u3001\u304a\u304b\u3057\u3044\u70b9\u304c\u308f\u304b\u3063\u3066\u304d\u307e\u3059\u3002\n\n```c:\nint main(void)\n{\n        int a = 0, b = 1;\n        if (0)\n                typeof(a) __tmp = (a);\n        (a) = (b);\n        (b) = __tmp;;\n        printf(\"%d %d\\n\", a, b);\n return 0;\n}\n```\n\nswap()\u30de\u30af\u30ed\u5185\u306e3\u3064\u306e\u547d\u4ee4\u306e\u3046\u3061\u3001\u4e00\u884c\u76ee\u306e\u4e00\u6642\u5909\u6570__tmp\u3092\u5ba3\u8a00\u3057\u3066\u3044\u308b\u884c\u306fif\u6587\u306e\u4e2d\u306b\u3042\u308a\u307e\u3059\u304c\u3001\u305d\u308c\u4ee5\u5916\u306e2\u547d\u4ee4\u306fif\u6587\u306e\u5916\u306b\u51fa\u3066\u3057\u307e\u3063\u3066\u3044\u307e\u3059\u3002\u3053\u308c\u3067\u306f\u307e\u3068\u3082\u306b\u52d5\u304f\u306f\u305a\u304c\u3042\u308a\u307e\u305b\u3093\u3002\u3055\u3089\u306b\u3001if\u6587\u306e\u4e2d\u306b\u5909\u6570\u5ba3\u8a00\u306e\u307f\u30921\u884c\u7f6e\u304f\u3053\u3068\u306f\u8a31\u3055\u308c\u306a\u3044\u306e\u3067\u3001\u4e0a\u8a18\u30b3\u30f3\u30d1\u30a4\u30eb\u30ed\u30b0\u306e\u4e00\u884c\u76ee\u306e\u3088\u3046\u306a\u30a8\u30e9\u30fc\u304c\u51fa\u3066\u3044\u307e\u3059\u3002\n\n\u3067\u306f\u6b21\u306e\u3088\u3046\u306b\u30de\u30af\u30ed\u5b9a\u7fa9\u3092\u5358\u306b\u30d6\u30ed\u30c3\u30af(\"{}\")\u3067\u56f2\u3081\u3070\u3044\u3044\u306e\u3067\u306f\u306a\u3044\u304b\u3001\u3068\u3044\u3046\u304b\u305f\u3082\u3044\u3089\u3063\u3057\u3083\u308b\u304b\u3068\u601d\u3046\u306e\u3067\u3001\u8a66\u3057\u3066\u307f\u307e\u3059\u3002\n\n```c:swap3.c\n#include <stdio.h>\n\n#define swap(a, b) \\\n        { typeof(a) __tmp = (a); (a) = (b); (b) = __tmp; }\n\nint main(void)\n{\n        int a = 0, b = 1;\n        if (0)\n                swap(a, b);\n        printf(\"%d %d\\n\", a, b);\n        return 0;\n}\n```\n\n```shell-session\n$ make swap3\ncc     swap3.c   -o swap3\n$ ./swap3\n0 1\n$ \n```\n\n\u3053\u3061\u3089\u306f\u3046\u307e\u304f\u3044\u304d\u307e\u3057\u305f\u3002\u3057\u304b\u3057\u3053\u308c\u306f\u6b21\u306e\u3088\u3046\u306a\u30b1\u30fc\u30b9\u3067\u306f\u3046\u307e\u304f\u3044\u304d\u307e\u305b\u3093\u3002\n\n```c:swap4.c\n#include <stdio.h>\n\n#define swap(a, b) \\\n        { typeof(a) __tmp = (a); (a) = (b); (b) = __tmp; }\n        \nint main(void)\n{\n        int a = 0, b = 1;\n        if (0)\n                swap(a, b);\n        else\n                printf(\"Always print this message\u00a5n\");\n        printf(\"%d %d\\n\", a, b);\n        return 0;\n}\n```\n\n```shell-session\n$ make swap4\ncc     swap4.c   -o swap4\nswap4.c: In function 'main':\nswap4.c:11:2: error: 'else' without a previous 'if'\n  else\n  ^~~~\n<builtin>: recipe for target 'swap4' failed\nmake: *** [swap4] Error 1\n$ \n```\n\n\u671f\u5f85\u5024\u306f\"Always print this message\u00a5n\"\u306e\u5f8c\u306b\"0 1\u00a5n\"\u304c\u51fa\u529b\u3055\u308c\u308b\u3001\u306a\u306e\u3067\u3059\u304c\u3001\u8b0e\u306e\u30b3\u30f3\u30d1\u30a4\u30eb\u30a8\u30e9\u30fc\u304c\u767a\u751f\u3057\u307e\u3057\u305f\u3002\u3053\u308c\u306b\u3064\u3044\u3066\u3082\u30d7\u30ea\u30d7\u30ed\u30bb\u30c3\u30b5\u306b\u3088\u308b\u51e6\u7406\u5f8c\u306e\u30bd\u30fc\u30b9\u3092\u898b\u3066\u307f\u307e\u3057\u3087\u3046\u3002\n\n```shell-session\n$ cc -E swap4.c\n...\n# 6 \"swap4.c\"\nint main(void)\n{\n int a = 0, b = 1;\n if (0)\n  { typeof(a) __tmp = (a); (a) = (b); (b) = __tmp; };\n else\n  printf(\"Always print this message\u00a5n\");\n printf(\"%d %d\\n\", a, b);\n return 0;\n}\n```\n\n\u3055\u304d\u307b\u3069\u3068\u540c\u69d8\u306b\u3001\u5236\u5fa1\u69cb\u9020\u3092\u610f\u8b58\u3057\u3066\u30bd\u30fc\u30b9\u3092\u6574\u5f62\u3057\u307e\u3059\u3002\n\n```c:\nint main(void)\n{\n        int a = 0, b = 1;\n        if (0)\n                { typeof(a) __tmp = (a); (a) = (b); (b) = __tmp; };                # ... (1)\n        else\n                printf(\"Always print this message\");\n        printf(\"%d %d\\n\", a, b);\n        return 0;\n}\n```\n\n\u3084\u3084\u308f\u304b\u308a\u306b\u304f\u3044\u306e\u3067\u3059\u304c\u3001\u30bd\u30fc\u30b9\u5185\u306e(1)\u306e\u3068\u3053\u308d\u3067C\u306e\u69cb\u6587\u4e0aif\u6587\u306f\u5b8c\u7d50\u3057\u3066\u3044\u307e\u3059\u3002\u3057\u305f\u304c\u3063\u3066\u3001\u305d\u308c\u306b\u7d9a\u304felse\u7bc0\u306f\u30b3\u30f3\u30d1\u30a4\u30e9\u304b\u3089\u898b\u308b\u3068if\u6587\u7121\u3057\u306b\u7a81\u7136\u51fa\u3066\u304d\u305f\u3088\u3046\u306b\u898b\u3048\u308b\u305f\u3081\u3001\u30a8\u30e9\u30fc\u304c\u51fa\u3066\u3044\u305f\u306e\u3067\u3057\u305f\u3002\n\n\u3053\u306e\u5834\u5408\u306f`swap(a,b);`\u306e\u672b\u5c3e\u306e\u30bb\u30df\u30b3\u30ed\u30f3\u3092\u7701\u3051\u3070\u3046\u307e\u304f\u52d5\u4f5c\u3057\u307e\u3059\u3002\u3057\u304b\u3057\u3053\u308c\u306f\u660e\u3089\u304b\u306b\u76f4\u611f\u7684\u3067\u306f\u306a\u3044\u306e\u3067\u3001\u3053\u306e\u3088\u3046\u306a\u4f7f\u3044\u65b9\u306f\u3067\u304d\u308c\u3070\u907f\u3051\u305f\u3044\u3067\u3059\u3002\u4e0a\u8a18\u306e\u547d\u4ee4\u5217\u3092\u5358\u306a\u308b\u30d6\u30ed\u30c3\u30af\u3067\u306f\u306a\u304f do {} while (0)\u3067\u56f2\u3081\u3070\u3001\u305d\u308c\u304c\u53ef\u80fd\u306b\u306a\u308a\u307e\u3059\u3002\u30b3\u30fc\u30c9\u4f8b\u306f\u51fa\u3057\u307e\u305b\u3093\u304c\u3001\u3053\u306e\u5834\u5408\u306f\u4e0a\u8a18\u3059\u3079\u3066\u306e\u5834\u5408\u306b\u3064\u3044\u3066\u3046\u307e\u304f\u52d5\u4f5c\u3057\u307e\u3059\u3002\n\n\u4e0a\u8a18\u306e\u3088\u3046\u306a\u300c\u3046\u307e\u304f\u3044\u304b\u306a\u3044\u30b1\u30fc\u30b9\u300d\u3092\u5168\u3066\u77e5\u3089\u306a\u3044\u3068\u3001\u306a\u304b\u306a\u304b\u3053\u306e do {} while (0) \u306e\u610f\u56f3\u306f\u7406\u89e3\u3067\u304d\u306a\u3044\u3068\u601d\u3044\u307e\u3059\u3002linux\u30ab\u30fc\u30cd\u30eb\u4ee5\u5916\u3067\u3082\u983b\u51fa\u306eC\u30de\u30af\u30ed\u306e\u30a4\u30c7\u30a3\u30aa\u30e0\u306a\u306e\u3067\u3001\u899a\u3048\u3066\u304a\u3044\u3066\u640d\u306f\u306a\u3044\u3068\u601d\u3044\u307e\u3059\u3002\n\n# \u30b8\u30a7\u30cd\u30ea\u30c3\u30af\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\n\n\u3055\u304d\u307b\u3069\u306eswap()\u306e\u4f8b\u3092\u3082\u3046\u4e00\u5ea6\u898b\u3066\u307f\u307e\u3057\u3087\u3046\u3002\n\n```c:include/linux/kernel.h\n#define swap(a, b) \\\n        do { typeof(a) __tmp = (a); (a) = (b); (b) = __tmp; } while (0)\n```\n\n\u3053\u308c\u306f\u30a4\u30f3\u30e9\u30a4\u30f3\u95a2\u6570\u3067\u5b9f\u88c5\u3057\u3066\u3082\u540c\u3058\u3088\u3046\u306b\u898b\u3048\u307e\u3059\u304c\u3001\u5b9f\u969b\u3084\u3063\u3066\u307f\u308b\u3068\u9762\u5012\u306a\u3053\u3068\u304c\u308f\u304b\u308a\u307e\u3059\u3002\u4ee5\u4e0b\u306e\u30b3\u30fc\u30c9\u3092\u898b\u3066\u4e0b\u3055\u3044\u3002\n\n```c:\nstatic inline void swap(int *a, int *b)\n{\n        int tmp = *a;\n        *a = *b;\n        *b = tmp;\n}\n```\n\n\u3053\u308c\u306f\u3053\u308c\u3067\u52d5\u304f\u306e\u3067\u3059\u304c(\u5f15\u6570\u306b\u5909\u6570\u3067\u306a\u304f\u5909\u6570\u3078\u306e\u30dd\u30a4\u30f3\u30bf\u3092\u6307\u5b9a\u3057\u306a\u3044\u3068\u3044\u3051\u306a\u3044\u3068\u3053\u308d\u306f\u7570\u306a\u308a\u307e\u3059)\u3001\u3053\u306eswap()\u306fint\u306b\u3057\u304b\u4f7f\u3048\u307e\u305b\u3093\u3002\u5225\u306e\u578b\u306b\u3064\u3044\u3066\u306f\u5225\u306eswap()\u3092\u5b9a\u7fa9\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\u3057\u304b\u3082\u3001C\u306f\u95a2\u6570\u306e\u30aa\u30fc\u30d0\u30fc\u30ed\u30fc\u30c9\u6a5f\u80fd[^overload]\u304c\u7121\u3044\u305f\u3081\u3001\u8907\u6570\u306e\u578b\u306b\u5bfe\u3059\u308bswap()\u3092\u540c\u6642\u306b\u5b9a\u7fa9\u3057\u305f\u3044\u5834\u5408\u306f\u3001\u4f8b\u3048\u3070\u6b21\u306e\u3088\u3046\u306b\u5b9a\u7fa9\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\n\n[^overload]: \u540c\u3058\u540d\u524d\u3067\u5225\u306e\u5f15\u6570\u3001\u623b\u308a\u5024\u3092\u6301\u3064\u95a2\u6570\u3092\u5b9a\u7fa9\u3067\u304d\u308b\u6a5f\u80fd\u3002\u4f8b\u3048\u3070swap(int *a, int *b)\u3068swap(double *a, double *b)\u304c\u5171\u5b58\u3067\u304d\u308b\u3002C\u3067\u3053\u308c\u3092\u3084\u308d\u3046\u3068\u3059\u308b\u3068\u3001\u540c\u540d\u95a2\u6570\u304c2\u3064\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u308b\u3068\u3044\u3046\u65e8\u306e\u30b3\u30f3\u30d1\u30a4\u30eb\u30a8\u30e9\u30fc\u304c\u51fa\u307e\u3059\u3002\n\n```c:\nstatic inline void swap_int(int *a, int *b)\n{\n        int tmp = *a;\n        *a = *b;\n        *b = tmp;\n}\n\nstatic inline void swap_double(double *a, double *b)\n{\n        int tmp = *a;\n        *a = *b;\n        *b = tmp;\n}\n```\n\n\u547c\u3073\u51fa\u3059\u305f\u3081\u306b\u3044\u3061\u3044\u3061\u578b\u540d\u3092\u6307\u5b9a\u3059\u308b\u5fc5\u8981\u304c\u3042\u308b\u4e0a\u306b\u3001\u540c\u3058\u3088\u3046\u306a\u610f\u5473\u306e\u30b3\u30fc\u30c9\u3092\u91cd\u8907\u3057\u3066\u66f8\u304f\u5fc5\u8981\u304c\u3042\u308b\u306e\u3067\u4fdd\u5b88\u6027\u304c\u975e\u5e38\u306b\u60aa\u3044\u3067\u3059\u3002\u30de\u30af\u30ed\u3092\u4f7f\u3048\u3070\u3053\u306e\u3088\u3046\u306a\u554f\u984c\u3092\u907f\u3051\u3089\u308c\u307e\u3059\u3002\u3061\u3087\u3046\u3069C++\u306e\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u3092\u4f7f\u3063\u305f\u30b8\u30a7\u30cd\u30ea\u30c3\u30af\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u306e\u3088\u3046\u306a\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\n# \u30d3\u30eb\u30c9\u306e\u8a2d\u5b9a\u306b\u5fdc\u3058\u3066\u4f55\u3082\u3057\u306a\u3044\u95a2\u6570/\u30de\u30af\u30ed\u3092\u5b9a\u7fa9\u3059\u308b\n\nlinux\u30ab\u30fc\u30cd\u30eb\u3067\u306f\u3001\u7279\u5b9a\u306e\u30d3\u30eb\u30c9\u8a2d\u5b9a\u306b\u304a\u3044\u3066\u3001\u7279\u5b9a\u306e\u95a2\u6570\u3092\u4f55\u3082\u3057\u306a\u3044\u3088\u3046\u306b\u5b9a\u7fa9\u3057\u3066\u3044\u308b\u7b87\u6240\u304c\u591a\u3005\u3042\u308a\u307e\u3059\u3002\u6b21\u306b\u793a\u3059\u5b9f\u969b\u306e\u30b3\u30fc\u30c9\u3092\u898b\u3066\u307f\u307e\u3057\u3087\u3046\u3002\n\n```c:include/linux/fs.h\n...\n#if BITS_PER_LONG==32 && defined(CONFIG_SMP)\n#include <linux/seqlock.h>\n#define __NEED_I_SIZE_ORDERED\n#define i_size_ordered_init(inode) seqcount_init(&inode->i_size_seqcount)\n#else\n#define i_size_ordered_init(inode) do { } while (0)\n#endif\n...\n```\n\n\u3053\u306e\u30b3\u30fc\u30c9\u65ad\u7247\u306f\u3001\u3071\u3063\u3068\u898b\u3084\u3084\u3053\u3057\u305d\u3046\u3067\u3059\u304c\u3001\u8a00\u8449\u3067\u8aac\u660e\u3059\u308b\u3068\u6b21\u306e\u3088\u3046\u306a\u3053\u3068\u3092\u3057\u3066\u3044\u307e\u3059\u3002\n\n- i_size_ordered_init()\u3068\u3044\u3046\u30de\u30af\u30ed\u3092\u5b9a\u7fa9\u3059\u308b\n - \u30d3\u30eb\u30c9\u5bfe\u8c61\u30a2\u30fc\u30ad\u30c6\u30af\u30c1\u30e3\u306elong\u306e\u30b5\u30a4\u30ba\u304c32\u3067\u3042\u308a\u3001\u304b\u3064\u3001\u30de\u30eb\u30c1\u30d7\u30ed\u30bb\u30c3\u30b5\u74b0\u5883\u3067\u3042\u308c\u3070seqcount_init()\u3092\u547c\u3076\n - \u305d\u3046\u3067\u306a\u3051\u308c\u3070\u4f55\u3082\u3057\u306a\u3044\n\n\u6ce8\u76ee\u3057\u3066\u3082\u3089\u3044\u305f\u3044\u306e\u306fi_size_ordered_init()\u30de\u30af\u30ed\u306e`do { } while (0)`\u3068\u3044\u3046\u5b9a\u7fa9\u3067\u3059\u3002\u3053\u308c\u306f\u5148\u7a0b\u306e\u4f8b\u306e\u5fdc\u7528\u3067\u3001\u300c\u4f55\u3082\u3057\u306a\u3044\u300d\u95a2\u6570/\u30de\u30af\u30ed\u3092\u5b9a\u7fa9\u3057\u3066\u3044\u307e\u3059\u3002\n\n\u3053\u306e\u30de\u30af\u30ed\u3092\u547c\u3073\u51fa\u3057\u3066\u3044\u308b\u7b87\u6240\u3067\u3044\u3061\u3044\u3061\n\n```c:\n...\n{\n        ...\n#if BITS_PER_LONG==32 && defined(CONFIG_SMP)\n        i_size_ordered_init();\n#endif\n        ...\n}\n...\n```\n\n\u306a\u3069\u3068\u3059\u308b\u3088\u308a\u306f\u308b\u304b\u306b\u30b3\u30fc\u30c9\u306e\u4fdd\u5b88\u6027\u304c\u9ad8\u3044\u3067\u3059\u3002\n\n\u306a\u304a\u3001`#define i_size_ordered_init(inode) `(\u30de\u30af\u30ed\u5b9a\u7fa9\u3092\u7a7a\u306b\u3059\u308b)\u3084\u3001`#define i_size_ordered_init(inode) {}`\u306a\u3069\u3068\u3044\u3046\u5b9a\u7fa9\u306b\u3059\u308b\u3068\u3001\u524d\u8ff0\u306e\u3088\u3046\u306a\u3055\u307e\u3056\u307e\u306a\u30b3\u30fc\u30ca\u30fc\u30b1\u30fc\u30b9\u304c\u5b58\u5728\u3057\u3066\u3057\u307e\u3044\u307e\u3059\u3002\n\n# \u5f15\u6570\u306e\u6587\u5b57\u5217\u5316\n\n\u6b21\u306f\u3001\u30de\u30af\u30ed\u306e\u5f15\u6570\u3092\u6587\u5b57\u5217\u306b\u3059\u308b\u65b9\u6cd5\u306b\u3064\u3044\u3066\u5b66\u3093\u3067\u307f\u307e\u3057\u3087\u3046\u3002\u4f8b\u3068\u3057\u3066\u3001\u4ee5\u4e0b\u306elinux\u30ab\u30fc\u30cd\u30eb\u5185\u306e\u30b3\u30fc\u30c9\u3092\u793a\u3057\u307e\u3059\u3002\n\n```c:kernel/sched/sched.h\n...\n#ifdef CONFIG_SCHED_DEBUG\n#define SCHED_WARN_ON(x)        WARN_ONCE(x, #x)\n#else\n...\n#endif\n...\n```\n\n\u3053\u3053\u3067\u306f\u7c21\u5358\u306e\u305f\u3081CONFIG_SCHED_DEBUG\u304c\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u308b\u3068\u8003\u3048\u3066\u3001SCHED_WARN_ON()\u30de\u30af\u30ed\u304c\u4f55\u3092\u3059\u308b\u3082\u306e\u306a\u306e\u304b\u3092\u898b\u3066\u3044\u304d\u307e\u3059\u3002\u3053\u306e\u30de\u30af\u30ed\u306f\u3001\u30b9\u30b1\u30b8\u30e5\u30fc\u30e9\u306e\u30b3\u30fc\u30c9\u306e\u4e2d\u3067\u3001\u30b9\u30b1\u30b8\u30e5\u30fc\u30e9\u304c\u7570\u5e38\u306a\u72b6\u614b\u3067\u3042\u308b\u3053\u3068\u3092\u793a\u3059\u6761\u4ef6\u3092\u6e80\u305f\u3057\u305f(\u6e80\u305f\u3057\u3066\u3057\u307e\u3063\u305f)\u3068\u304d\u306b\u30ab\u30fc\u30cd\u30eb\u306e\u30ed\u30b0\u306b\u3001\u3069\u306e\u6761\u4ef6\u6587\u304c\u6210\u7acb\u3057\u305f\u304b\u3092\u793a\u3059\u8b66\u544a\u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u8868\u793a\u3059\u308b\u305f\u3081\u306e\u3082\u306e\u3067\u3059\u3002\n\nSCHED_WARN_ON()\u306e\u4e2d\u3067\u4f7f\u308f\u308c\u3066\u3044\u308bWARN_ONCE()\u30de\u30af\u30ed\u306f\u3001\u7b2c\u4e00\u5f15\u6570\u306b\u6307\u5b9a\u3055\u308c\u305f\u6761\u4ef6\u304c\u6e80\u305f\u3055\u308c\u305f\u3068\u304d\u306b\u3001\u7b2c\u4e8c\u5f15\u6570\u306b\u6307\u5b9a\u3055\u308c\u305f\u30c7\u30d0\u30c3\u30b0\u7528\u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u51fa\u529b\u3057\u307e\u3059[^1]\u3002\n\n[^1]: \u6700\u521d\u306b\u6761\u4ef6\u3092\u6e80\u305f\u3057\u305f\u3068\u304d\u306e\u307f\u51fa\u529b\u3055\u308c\u307e\u3059\u3002\u305d\u308c\u6545\u306b`_ONCE`\u3068\u3044\u3046\u540d\u524d\u304c\u4ed8\u3044\u3066\u3044\u307e\u3059)\u3002\n\nSCHED_WARN_ON()\u3092\u7d20\u76f4\u306b\u5b9f\u88c5\u3001\u4f7f\u7528\u3057\u3088\u3046\u3068\u3059\u308b\u3068\u6b21\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3059(\u5b9f\u969b\u306e\u3082\u306e\u3068\u306f\u7570\u306a\u308a\u307e\u3059)\u3002\n\n```c:\n#define SCHED_WARN_ON(x, msg)        WARN_ONCE(x, msg)\n...\n{\n        ...\n        SCHED_WARN_ON(number_of_runnanble_processes < 0, \"number_of_runnable_processes < 0\");\n        ...\n}\n...\n```\n\n\u3053\u308c\u3067\u4e00\u5fdc\u76ee\u7684\u3092\u9054\u6210\u3067\u304d\u308b\u306e\u3067\u3059\u304c\u3001\u4e00\u898b\u3057\u3066\u308f\u304b\u308b\u3088\u3046\u306b\u3001\u306a\u3093\u3060\u304b\u30c0\u30b5\u3044\u3067\u3059\u3002\u540c\u3058\u30c6\u30ad\u30b9\u30c8(\"number_of_runnable_processes < 0\")\u3092\u4e8c\u56de\u66f8\u304b\u306a\u304f\u3066\u306f\u3044\u3051\u306a\u3044\u305f\u3081\u3001\u66f8\u304f\u306e\u304c\u9762\u5012\u306a\u4e0a\u306b\u3001\u6761\u4ef6\u3092\u5909\u3048\u305f\u3068\u304d\u306b\u30e1\u30c3\u30bb\u30fc\u30b8\u306e\u8ffd\u5f93\u3092\u5fd8\u308c\u305f\u308a\u3059\u308b\u53ef\u80fd\u6027\u304c\u3042\u308a\u3001\u4fdd\u5b88\u6027\u304c\u60aa\u3044\u3067\u3059\u3002\u3053\u308c\u3092\u907f\u3051\u308b\u306e\u304cC\u30de\u30af\u30ed\u306e\u3001\u5f15\u304d\u6570\u306e\u6587\u5b57\u5217\u5316\u6a5f\u80fd\u3067\u3059\u3002\n\n\u5f15\u6570\u306e\u6587\u5b57\u5217\u5316\u6a5f\u80fd\u306f\u3001\u30de\u30af\u30ed\u306e\u5f15\u6570\u306e\u524d\u306b\"#\"\u3068\u3044\u3046\u6f14\u7b97\u5b50\u3092\u4ed8\u3051\u308b\u3053\u3068\u306b\u3088\u3063\u3066\u5b9f\u73fe\u3057\u307e\u3059\u3002\u305f\u3068\u3048\u3070`#define tokenize(a) #a`\u3068\u30de\u30af\u30ed\u3092\u5b9a\u7fa9\u3059\u308b\u3068\u3001`tokenize(test)`\u306f`\"test\"`\u3068\u8a55\u4fa1\u3055\u308c\u307e\u3059\u3002\u4e0a\u8a18\u306e\u5b9f\u969b\u306eSCHED_WARN_ON()\u306f\u3001\u3053\u308c\u3092\u5fdc\u7528\u3057\u3066\u3001\u7b2c\u4e00\u3001\u305d\u3057\u3066\u552f\u4e00\u306e\u5f15\u6570\u306b\u6761\u4ef6\u6587\u3092\u6e21\u3059\u3053\u3068\u3067\u3001\u5f53\u8a72\u6761\u4ef6\u3092\u6e80\u305f\u3057\u305f\u969b\u306b\u3001\u6761\u4ef6\u5f0f\u3092\u793a\u3059\u6587\u5b57\u5217\u3092\u30ed\u30b0\u306b\u51fa\u529b\u3067\u304d\u307e\u3059\u3002\n\n\u5b9f\u969b\u306e\u4f7f\u7528\u4f8b\u306f\u6b21\u306e\u901a\u308a\u3067\u3059\u3002\n\n```c:kernel/sched/sched.h:\n...\n#define SCHED_WARN_ON(x)        WARN_ONCE(x, #x)\n...\nstatic inline struct cpuidle_state *idle_get_state(struct rq *rq)\n{\n        SCHED_WARN_ON(!rcu_read_lock_held());\n        return rq->idle_state;\n}\n...\n```\n\ncpuidle_state()\u95a2\u6570\u306e\u5b9a\u7fa9\u306f\u30d7\u30ea\u30d7\u30ed\u30bb\u30c3\u30b5\u306b\u3088\u3063\u3066\u6b21\u306e\u3088\u3046\u306b\u5909\u63db\u3055\u308c\u307e\u3059\u3002\n\n```c:\nstatic inline struct cpuidle_state *idle_get_state(struct rq *rq)\n{\n        WARN_ONCE(!rcu_read_lock_held(), \"!rcu_read_lock_held()\");\n        return rq->idle_state;\n}\n```\n\n\u4e0a\u8a18\u306e\u7d20\u76f4\u306a\u5b9f\u88c5\u4f8b\u3088\u308a\u306f\u308b\u304b\u306b\u66f8\u304f\u306e\u304c\u697d\u3067\u3001\u304b\u3064\u4fdd\u5b88\u6027\u306e\u9ad8\u3044\u30b3\u30fc\u30c9\u306b\u306a\u308b\u3053\u3068\u304c\u308f\u304b\u308a\u307e\u3059\u3002\n\n# \u30c8\u30fc\u30af\u30f3\u306e\u9023\u7d50\n\nC\u306e\u30de\u30af\u30ed\u5b9a\u7fa9\u306e\u4e2d\u3067\u306f\u30012\u3064\u306e\u30c8\u30fc\u30af\u30f3[^token]\u306e\u9023\u7d50\u306b\u3088\u3063\u3066\u65b0\u305f\u306a\u30c8\u30fc\u30af\u30f3\u3092\u751f\u6210\u3067\u304d\u307e\u3059\u3002\u3053\u308c\u306f\u6587\u5b57\u5217\u306e\u9023\u7d50\u3068\u306f\u5168\u304f\u7570\u306a\u308a\u307e\u3059\u3002\u4ee5\u4e0b\u306e\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u3092\u3054\u3089\u3093\u304f\u3060\u3055\u3044\u3002\n\n[^token]: \u30c8\u30fc\u30af\u30f3\u3068\u3044\u3046\u8a00\u8449\u304c\u3088\u304f\u308f\u304b\u3089\u306a\u3051\u308c\u3070\u3001\u3053\u3053\u3067\u306f\u306a\u3093\u3068\u306a\u304f\u3001\u30b3\u30f3\u30d1\u30a4\u30e9\u306b\u5909\u6570\u540d\u3084\u95a2\u6570\u540d\u3068\u89e3\u91c8\u3055\u308c\u308b\u6587\u5b57\u5217\u3068\u8003\u3048\u3066\u3082\u3089\u3063\u3066\u3044\u3044\u3067\u3059\u3002\n\n```c:concat_token.c\n#define concat_token(a)         \\\nstatic int func_##a(void)       \\\n{                               \\\n        return 0;               \\\n}       \n\nconcat_token(foo)\n\nint main(void)\n{       \n        return func_foo();\n}\n```\n\n\u5148\u982d\u306econcat_token()\u30de\u30af\u30ed\u306e\u5b9a\u7fa9\u306e\u4e2d\u306e`func_##a`\u3068\u3044\u3046\u7b87\u6240\u306b\u6ce8\u76ee\u3057\u3066\u304f\u3060\u3055\u3044\u3002\u3053\u308c\u306f\"func_\"\u3068\u3044\u3046\u30c8\u30fc\u30af\u30f3\u3068\u3001\u5f15\u6570a\u3067\u793a\u3057\u305f\u30c8\u30fc\u30af\u30f3\u306e2\u3064\u3092\u9023\u7d50\u3057\u305f\u30c8\u30fc\u30af\u30f3\u3092\u4f5c\u308b\u3068\u3044\u3046\u610f\u5473\u3067\u3059\u3002\u591a\u5206\u610f\u5473\u4e0d\u660e\u3060\u3068\u601d\u3046\u306e\u3067\u3001\u5b9f\u4f8b\u3092\u898b\u3066\u307f\u307e\u3057\u3087\u3046\u3002\n\nconat_token(foo)\u3092\u8a55\u4fa1\u3057\u305f\u5834\u5408\u3001`func_##a`\u306f`func_foo`\u306b\u306a\u308a\u307e\u3059\u3002\u305d\u306e\u5f8c\u3001\u30de\u30af\u30ed\u5168\u4f53\u306e\u8a55\u4fa1\u7d50\u679c\u306f\u6b21\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002\n\n```\nstatic int func_foo(void)         \\\n{                               \\\n        return 0;               \\\n} \n```\n\n\u30bd\u30fc\u30b9\u5168\u4f53\u3092\u30d7\u30ea\u30d7\u30ed\u30bb\u30c3\u30b5\u306b\u304b\u3051\u3066\u307f\u307e\u3057\u3087\u3046\u3002\n\n```shell-session\n$ cc -E concat_token.c\n...\nstatic int func_foo(void) { return 0; }\n\nint main(void)\n{\n return func_foo();\n}\n$ \n```\n\nfunc_foo()\u3068\u3044\u3046\u95a2\u6570\u304c\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u308b\u3053\u3068\u304c\u308f\u304b\u308a\u307e\u3059\u3002\u3064\u307e\u308a\u3053\u306e\u30de\u30af\u30ed\u306f\u3001\u5f15\u304d\u6570\u306b\u6307\u5b9a\u3057\u305f\u30c8\u30fc\u30af\u30f3(\u3053\u3053\u3067\u306f\"foo\")\u3092\u542b\u3080\u95a2\u6570\u3092\u5b9a\u7fa9\u3059\u308b\u3082\u306e\u3067\u3042\u308b\u3053\u3068\u304c\u308f\u304b\u308a\u307e\u3059\u3002\n\n\u3053\u308c\u3060\u3051\u3067\u306f\u7528\u9014\u304c\u308f\u304b\u308a\u306b\u304f\u3044\u306e\u3067\u3001linux\u30ab\u30fc\u30cd\u30eb\u5185\u306e\u4f7f\u7528\u4f8b\u3092\u898b\u3066\u307f\u307e\u3057\u3087\u3046\u3002\n\n```c:fs/ext4/ext4.h\n...\n#define EXT4_FEATURE_COMPAT_FUNCS(name, flagname) \\\nstatic inline bool ext4_has_feature_##name(struct super_block *sb) \\\n{ \\\n        return ((EXT4_SB(sb)->s_es->s_feature_compat & \\\n                cpu_to_le32(EXT4_FEATURE_COMPAT_##flagname)) != 0); \\\n} \\\nstatic inline void ext4_set_feature_##name(struct super_block *sb) \\\n{ \\\n        EXT4_SB(sb)->s_es->s_feature_compat |= \\\n                cpu_to_le32(EXT4_FEATURE_COMPAT_##flagname); \\\n} \\\nstatic inline void ext4_clear_feature_##name(struct super_block *sb) \\\n{ \\\n        EXT4_SB(sb)->s_es->s_feature_compat &= \\\n                ~cpu_to_le32(EXT4_FEATURE_COMPAT_##flagname); \\\n}\n...\n```\n\n\u4e00\u898b\u8907\u96d1\u3067\u3059\u304c\u3001\u5b9f\u306f\u3084\u3063\u3066\u3044\u308b\u3053\u3068\u306f\u5358\u7d14\u3067\u3059\u3002\u3053\u308c\u306fext4\u30d5\u30a1\u30a4\u30eb\u30b7\u30b9\u30c6\u30e0\u5185\u306e\u5404\u6a5f\u80fd(mkfs.ext4(8)\u3084tune2fs(8)\u306e-O\u30aa\u30d7\u30b7\u30e7\u30f3\u306b\u3088\u3063\u3066\u6709\u52b9/\u7121\u52b9\u3092\u8a2d\u5b9a)\u306b\u95a2\u3059\u308b\u95a2\u6570\u3092\u4e00\u62ec\u5b9a\u7fa9\u3059\u308b\u305f\u3081\u306e\u30de\u30af\u30ed\u3067\u3059\u3002\u7b2c\u4e00\u5f15\u6570name\u304c\u793a\u3059\u6a5f\u80fd\u306b\u3064\u3044\u3066\u3001\u7b2c\u4e8c\u5f15\u6570flagname\u306b\u3088\u3063\u3066\u793a\u3059\u30d5\u30e9\u30b0\u3092\u64cd\u4f5c\u3059\u308b\u3001\u4e00\u9023\u306e\u95a2\u6570\u3092\u5b9a\u7fa9\u3057\u307e\u3059\u3002\n\n\u4f8b\u3048\u3070\u6b21\u306e\u3088\u3046\u306b\u4f7f\u7528\u3057\u307e\u3059\u3002\n\n```c:fs/ext4/ext4.h\nEXT4_FEATURE_COMPAT_FUNCS(dir_prealloc,         DIR_PREALLOC)\n```\n\n\u3053\u308c\u306f\u6b21\u306e\u3088\u3046\u306b\u5c55\u958b\u3055\u308c\u307e\u3059\u3002\n\n```c:\n...\nstatic inline bool ext4_has_feature_dir_prealloc(struct super_block *sb) \\\n{ \\\n        return ((EXT4_SB(sb)->s_es->s_feature_compat & \\\n                cpu_to_le32(EXT4_FEATURE_COMPAT_DIR_PREALLOC)) != 0); \\\n} \\\nstatic inline void ext4_set_feature_dir_prealloc(struct super_block *sb) \\\n{ \\\n        EXT4_SB(sb)->s_es->s_feature_compat |= \\\n                cpu_to_le32(EXT4_FEATURE_COMPAT_DIR_PREALLOC); \\\n} \\\nstatic inline void ext4_clear_feature_dir_prealloc(struct super_block *sb) \\\n{ \\\n        EXT4_SB(sb)->s_es->s_feature_compat &= \\\n                ~cpu_to_le32(EXT4_FEATURE_COMPAT_DIR_PREALLOC); \\\n}\n```\n\n\u4e0a\u8a183\u3064\u306e\u95a2\u6570\u306e\u5b9a\u7fa9\u306f\u305d\u308c\u305e\u308c\u6b21\u306e\u901a\u308a\u3067\u3059\u3002\n\n- ext4_has_feature_dir_prealloc: \u5f15\u6570sb\u3067\u6307\u5b9a\u3057\u305fext4\u30d5\u30a1\u30a4\u30eb\u30b7\u30b9\u30c6\u30e0\u304cdir_prealloc\u6a5f\u80fd[^3]\u3092\u6301\u3063\u3066\u3044\u308b\u304b\u3069\u3046\u304b\u3092\u5224\u5b9a\n- ext4_set_feature_dir_prealloc: \u540c\u6a5f\u80fd\u3092\u6709\u52b9\u5316\n- ext4_clear_feature_dir_prealloc: \u540c\u6a5f\u80fd\u3092\u7121\u52b9\u5316\n\n[^3]: \u3053\u3053\u3067\u306f\u6a5f\u80fd\u305d\u306e\u3082\u306e\u306e\u610f\u5473\u306f\u91cd\u8981\u3067\u306f\u306a\u3044\u306e\u3067\u5272\u611b\n\n\u4e00\u898b3\u3064\u306e\u95a2\u6570\u3092\u30de\u30af\u30ed\u5185\u3067\u5b9a\u7fa9\u3059\u308b\u306a\u3069\u3068\u3044\u3046\u56de\u308a\u304f\u3069\u3044\u3053\u3068\u3092\u305b\u305a\u306b\u76f4\u63a5\u5b9a\u7fa9\u3057\u305f\u307b\u3046\u304c\u7c21\u5358\u305d\u3046\u306b\u898b\u3048\u307e\u3059\u304c\u3001\u540c\u3058\u3088\u3046\u306a\u5b9a\u7fa9\u304c\u4f55\u5ea6\u3082\u7d9a\u304f\u3088\u3046\u306a\u5834\u5408\u306b\u3053\u306e\u30de\u30af\u30ed\u306f\u5927\u304d\u306a\u5a01\u529b\u3092\u767a\u63ee\u3057\u307e\u3059\u3002\u5b9f\u969b\u3001ext4\u306edir_prealloc\u4ee5\u5916\u306e\u69d8\u3005\u306a\u6a5f\u80fd\u306b\u3064\u3044\u3066\u540c\u69d8\u306a\u5b9a\u7fa9\u304c\u5fc5\u8981\u3067\u3042\u308a\u3001\u305d\u308c\u305e\u308c\u306b\u3064\u3044\u3066\u4e0a\u8a18\u306eEXT4_FEATURE_COMPAT_FUNCS()\u30de\u30af\u30ed[^4]\u3067\u4e00\u62ec\u5b9a\u7fa9\u3057\u3066\u3044\u307e\u3059\u3002\u3053\u308c\u306b\u3088\u3063\u3066\u81a8\u5927\u306a\u91cf\u306e\u6a5f\u68b0\u7684\u306a\u3064\u307e\u3089\u306a\u3044\u30b3\u30fc\u30c7\u30a3\u30f3\u30b0\u3092\u6e1b\u3089\u305b\u307e\u3059\u3002\n\n[^4]: \u3088\u308a\u6b63\u78ba\u306b\u306f\u3001\u3053\u308c\u306b\u52a0\u3048\u3066EXT4_FEATURE_RO_COMPAT_FUNCS()\u30de\u30af\u30ed\u3001\u304a\u3088\u3073EXT4_FEATURE_INCOMPAT_FUNCS()\u30de\u30af\u30ed\u3082\u7528\u3044\u308b\u3002\n\n```c:fs/ext4/ext4.h\nEXT4_FEATURE_COMPAT_FUNCS(dir_prealloc,         DIR_PREALLOC)\nEXT4_FEATURE_COMPAT_FUNCS(imagic_inodes,        IMAGIC_INODES)\nEXT4_FEATURE_COMPAT_FUNCS(journal,              HAS_JOURNAL)\nEXT4_FEATURE_COMPAT_FUNCS(xattr,                EXT_ATTR)\nEXT4_FEATURE_COMPAT_FUNCS(resize_inode,         RESIZE_INODE)\nEXT4_FEATURE_COMPAT_FUNCS(dir_index,            DIR_INDEX)\nEXT4_FEATURE_COMPAT_FUNCS(sparse_super2,        SPARSE_SUPER2)\n```\n\n\u30c8\u30fc\u30af\u30f3\u306e\u9023\u7d50\u306f\u4e00\u898b\u4fbf\u5229\u305d\u3046\u3067\u3059\u304c\u3001cscope\u306a\u3069\u306e\u30c4\u30fc\u30eb\u304c\u3001\u30de\u30af\u30ed\u306b\u3088\u3063\u3066\u751f\u6210\u3055\u308c\u308b\u5909\u6570\u3084\u95a2\u6570\u3092\u3046\u307e\u304f\u8a8d\u8b58\u3057\u3066\u304f\u308c\u305a\u306b\u3001\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u30ea\u30fc\u30c7\u30a3\u30f3\u30b0\u304c\u9762\u5012\u306b\u306a\u308b\u306a\u3069\u3068\u3044\u3046\u6b20\u70b9\u3082\u3042\u308a\u307e\u3059\u3002cscope\u306a\u3069\u3092\u4f7f\u3063\u3066\u95a2\u6570\u3084\u30de\u30af\u30ed\u306e\u5b9a\u7fa9\u3092\u63a2\u3057\u3066\u3082\u5168\u304f\u51fa\u3066\u3053\u306a\u3044\u3068\u3044\u3046\u5834\u5408\u306f\u3001##\u6f14\u7b97\u5b50\u3092\u4f7f\u3063\u3066\u5b9a\u7fa9\u3055\u308c\u305f\u3082\u306e\u3067\u3042\u308b\u304b\u3069\u3046\u304b\u3092\u7591\u3063\u3066\u307f\u308b\u3068\u3088\u3044\u3068\u601d\u3044\u307e\u3059\u3002\n\n# \u69cb\u9020\u4f53\u306e\u30d5\u30a3\u30fc\u30eb\u30c9\u304b\u3089\u3001\u305d\u308c\u3092\u57cb\u3081\u8fbc\u3093\u3060\u89aa\u69cb\u9020\u4f53\u3078\u306e\u30dd\u30a4\u30f3\u30bf\u3092\u5f97\u308b\n\n\u6b21\u306b\u793a\u3059\u306e\u306f\u3001\u3042\u308b\u69cb\u9020\u4f53\u306e\u30d5\u30a3\u30fc\u30eb\u30c9\u304b\u3089\u3001\u305d\u308c\u3092\u57cb\u3081\u8fbc\u3093\u3067\u3044\u308b\u89aa\u69cb\u9020\u4f53\u3078\u306e\u30dd\u30a4\u30f3\u30bf\u3092\u5f97\u308b\u30de\u30af\u30ed\u3067\u3059\u3002\n\n```c:include/linux/kernel.h\n/**                                                                                                                                                                                                                                           \n * container_of - cast a member of a structure out to the containing structure                                                                                                                                                                \n * @ptr:        the pointer to the member.                                                                                                                                                                                                    \n * @type:       the type of the container struct this is embedded in.                                                                                                                                                                         \n * @member:     the name of the member within the struct.                                                                                                                                                                                     \n *                                                                                                                                                                                                                                            \n */\n#define container_of(ptr, type, member) ({                      \\\n        const typeof( ((type *)0)->member ) *__mptr = (ptr);    \\\n        (type *)( (char *)__mptr - offsetof(type,member) );})\n```\n\nptr(\u7b2c\u4e00\u5f15\u6570)\u304cmember(\u7b2c\u4e09\u5f15\u6570)\u3068\u3044\u3046\u30d5\u30a3\u30fc\u30eb\u30c9\u540d\u3067\u57cb\u3081\u8fbc\u307e\u308c\u305ftype(\u7b2c\u4e8c\u5f15\u6570)\u578b\u306e\u30c7\u30fc\u30bf\u306e\u30a2\u30c9\u30ec\u30b9\u3092\u6c42\u3081\u307e\u3059\u3002\u307e\u305a\u306f\u3001\u3069\u3046\u3084\u3063\u3066\u3053\u306e\u3088\u3046\u306a\u6a5f\u80fd\u3092\u5b9f\u88c5\u3057\u3066\u3044\u308b\u304b\u3092\u3001\u3053\u308c\u304b\u3089\u7d10\u89e3\u3044\u3066\u3044\u304d\u307e\u3059\u3002\n\ncontainer_of()\u306e\u4e2d\u306b\u3042\u308boffsetof()\u306e\u5b9a\u7fa9\u3092\u793a\u3057\u307e\u3059[^offsetof]\u3002\n\n[^offsetof]: \u5b9f\u969b\u306b\u306f\u4e0b\u8a18\u5b9a\u7fa9\u3092\u76f4\u63a5\u4f7f\u3046\u306e\u3067\u306f\u306a\u304f\u30b3\u30f3\u30d1\u30a4\u30e9(\u901a\u5e38gcc)\u7d44\u307f\u8fbc\u307f\u306e\u540c\u7b49\u6a5f\u80fd\u3092\u4f7f\u3046\u306e\u3067\u3059\u304c\u3001\u7406\u89e3\u3092\u7c21\u5358\u306b\u3059\u308b\u305f\u3081\u306b\u3053\u3061\u3089\u3092\u4f8b\u306b\u4f7f\u3044\u307e\u3059\u3002\n\n```include/linux/stddef.h\n...\n#define offsetof(TYPE, MEMBER)  ((size_t)&((TYPE *)0)->MEMBER)\n...\n```\n\n![offsetof.png](https://qiita-image-store.s3.amazonaws.com/0/31840/3f79ad1f-b7fb-bb77-33e6-ca3fca71768d.png)\n\n\u3053\u306e\u30de\u30af\u30ed\u306b\u3088\u3063\u3066\u3001TYPE(\u7b2c\u4e00\u5f15\u6570)\u3067\u793a\u3055\u308c\u308b\u69cb\u9020\u4f53\u306e\u4e2d\u306eMEMBER(\u7b2c\u4e8c\u5f15\u6570)\u30d5\u30a3\u30fc\u30eb\u30c9\u306e\u30d0\u30a4\u30c8\u5358\u4f4d\u306e\u30aa\u30d5\u30bb\u30c3\u30c8\u304c\u6c42\u3081\u3089\u308c\u307e\u3059\u3002\u3053\u306e\u30de\u30af\u30ed\u306f\u3001\u30bc\u30ed\u756a\u5730\u306b\u914d\u7f6e\u3057\u305fTYPE\u578b\u30c7\u30fc\u30bf\u306e\u4e2d\u306eMEMBER\u30d5\u30a3\u30fc\u30eb\u30c9\u306e\u30a2\u30c9\u30ec\u30b9(\u3092size_t\u578b\u306b\u30ad\u30e3\u30b9\u30c8\u3057\u305f\u3082\u306e)\u306fTYPE\u5185\u306eMEMBER\u306e\u30aa\u30d5\u30bb\u30c3\u30c8\u306b\u7b49\u3057\u3044\u3068\u3044\u3046\u6027\u8cea\u3092\u5229\u7528\u3057\u3066\u3044\u307e\u3059\u3002\u308f\u304b\u3063\u3066\u3057\u307e\u3048\u3070\u7c21\u5358\u306a\u306e\u3067\u3059\u304c\u3001\u521d\u898b\u3067\u306f\u3051\u3063\u3053\u3046\u610f\u5473\u4e0d\u660e\u3067\u5f15\u3044\u3066\u3057\u307e\u3046\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u3002\n\n\u3053\u308c\u3092\u8e0f\u307e\u3048\u3066container_of()\u306e\u5b9a\u7fa9\u3092\u518d\u5ea6\u898b\u3066\u307f\u307e\u3057\u3087\u3046\u3002\n\n```c:include/linux/kernel.h\n...\n#define container_of(ptr, type, member) ({                      \\\n        const typeof( ((type *)0)->member ) *__mptr = (ptr);    \\\n        (type *)( (char *)__mptr - offsetof(type,member) );})\n```\n\n\u4e00\u884c\u76ee\u306f\u3061\u3087\u3063\u3068\u56de\u308a\u304f\u3069\u304f\u898b\u3048\u307e\u3059\u304c\u3001\u5358\u306b __mptr\u5909\u6570\u306bptr(\u7b2c\u4e00\u5f15\u6570)\u3092\u4ee3\u5165\u3057\u3066\u3044\u308b\u3060\u3051\u3067\u3059\u3002\u4e8c\u884c\u76ee\u3067\u306f __mptr(\u3059\u306a\u308f\u3061ptr)\u304b\u3089\u3001type\u5185\u306emember\u306e\u30aa\u30d5\u30bb\u30c3\u30c8\u3092\u5f15\u3044\u3066\u3044\u307e\u3059\u3002\u3064\u307e\u308a\u3001\u3053\u308c\u3067ptr\u306e\u57cb\u3081\u8fbc\u307f\u5143\u3067\u3042\u308btype\u578b\u306e\u30c7\u30fc\u30bf\u304c\u6c42\u307e\u3063\u3066\u3057\u307e\u3046\u3068\u3044\u3046\u3053\u3068\u3067\u3059\u3002\u4e00\u898b\u4e00\u884c\u76ee\u3092\u7701\u3044\u3066\u4e8c\u884c\u76ee\u3092`(type *)((char *)ptr - offsetof(type,member))`\u3060\u3051\u306b\u3059\u308c\u3070\u6e08\u307f\u305d\u3046\u306b\u898b\u3048\u307e\u3059\u304c\u3001\u4e00\u884c\u76ee\u306b\u3088\u3063\u3066\u3001ptr\u3068member\u306e\u578b\u306e\u5bfe\u5fdc\u304c\u53d6\u308c\u3066\u3044\u306a\u3044\u5834\u5408\u306b\u8b66\u544a\u30e1\u30c3\u30bb\u30fc\u30b8\u304c\u51fa\u308b\u3088\u3046\u306b\u306a\u3063\u3066\u304a\u308a\u3001\u601d\u308f\u306c\u30d0\u30b0\u3092\u9632\u3052\u308b\u3088\u3046\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u3002\n\n![container_of.png](https://qiita-image-store.s3.amazonaws.com/0/31840/09bf9183-31ea-74df-e8f3-94f3e9f0643e.png)\n\n\u4f8b\u306b\u3088\u3063\u3066\u3001\u3053\u308c\u3060\u3051\u3067\u306f\u4f55\u304c\u5b09\u3057\u3044\u306e\u304b\u3088\u304f\u308f\u304b\u3089\u306a\u3044\u306e\u3067\u3001linux\u30ab\u30fc\u30cd\u30eb\u306e\u30d5\u30a1\u30a4\u30eb\u30b7\u30b9\u30c6\u30e0\u306e\u30b3\u30fc\u30c9\u3092\u5b9f\u4f8b\u3068\u3057\u3066\u7d39\u4ecb\u3057\u307e\u3059\u3002\n\nlinux\u30ab\u30fc\u30cd\u30eb\u306b\u304a\u3044\u3066\u3001\u30d5\u30a1\u30a4\u30eb\u30b7\u30b9\u30c6\u30e0\u306e\u30b3\u30fc\u30c9\u306fVirtual File System\u5c64(\u4ee5\u5f8cVFS\u5c64\u3068\u8a18\u8f09)\u3068\u3044\u3046\u5168\u30d5\u30a1\u30a4\u30eb\u30b7\u30b9\u30c6\u30e0(ext4, XFS, Btrfs\u306a\u3069)\u5171\u901a\u306e\u30b3\u30fc\u30c9\u3068\u3001\u5404\u30d5\u30a1\u30a4\u30eb\u30b7\u30b9\u30c6\u30e0\u56fa\u6709\u306e\u30b3\u30fc\u30c9\u306b\u5206\u304b\u308c\u3066\u3044\u307e\u3059\u3002\u305f\u3068\u3048\u3070\u5168\u30d5\u30a1\u30a4\u30eb\u30b7\u30b9\u30c6\u30e0\u306b\u5171\u901a\u3059\u308binode\u306b\u95a2\u3059\u308b\u60c5\u5831\u306fVFS\u5c64\u306b\u5b58\u5728\u3059\u308bstruct inode\u3068\u3044\u3046\u69cb\u9020\u4f53\u306b\u3088\u3063\u3066\u8868\u73fe\u3057\u307e\u3059\u3002\u3053\u308c\u306b\u5bfe\u3057\u3066\u3001\u5404\u30d5\u30a1\u30a4\u30eb\u30b7\u30b9\u30c6\u30e0\u306f\u3001\u81ea\u8eab\u56fa\u6709\u306einode\u60c5\u5831\u3092\u542b\u3080\u69cb\u9020\u4f53\u3092\u6301\u3063\u3066\u304a\u308a\u3001\u305d\u306e\u4e2d\u306bstruct inode\u3092\u57cb\u3081\u8fbc\u3093\u3067\u3044\u307e\u3059\u3002\n\nBtrfs\u3092\u4f8b\u306b\u3068\u3063\u3066\u8aac\u660e\u3059\u308b\u3068\u3001btrfs\u56fa\u6709\u306einode\u60c5\u5831\u306fstruct btrfs_inode\u69cb\u9020\u4f53\u306b\u683c\u7d0d\u3055\u308c\u307e\u3059\u3002\u305d\u306e\u3046\u3061\u30d5\u30a1\u30a4\u30eb\u30b7\u30b9\u30c6\u30e0\u5171\u901a\u306e\u90e8\u5206\u3001\u3064\u307e\u308a\u3055\u304d\u307b\u3069\u8ff0\u3079\u305fstruct inode\u306f\u3001\u3053\u306e\u69cb\u9020\u4f53\u306e\u4e2d\u306evfs_inode\u3068\u3044\u3046\u30d5\u30a3\u30fc\u30eb\u30c9\u3068\u3057\u3066\u57cb\u3081\u8fbc\u307e\u308c\u3066\u3044\u307e\u3059\u3002\n\n```c:fs/btrfs/btrfs_inode.h\n...\nstruct btrfs_inode {\n        ...\n        struct inode vfs_inode;\n};\n...\n```\n\n![inode_in_btrfs_inode.png](https://qiita-image-store.s3.amazonaws.com/0/31840/58c48407-f0dc-4bc1-f7f5-6209c21db23f.png)\n\nBtrfs\u5185\u306einode\u306e\u5404\u7a2e\u6642\u523b([cma]time)\u3092\u66f4\u65b0\u3059\u308b\u969b\u306f\u3001VFS\u5c64\u304b\u3089btrfs_update_time()\u3068\u3044\u3046\u95a2\u6570\u304c\u547c\u3070\u308c\u307e\u3059\u3002\n\n```c:fs/btrfs/inode.c\nstatic int btrfs_update_time(struct inode *inode, struct timespec *now,\n                             int flags)\n{       \n        struct btrfs_root *root = BTRFS_I(inode)->root;\n...\n}\n```\n\n\u3053\u306e\u95a2\u6570\u306e\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30a4\u30b9\u306fBtrfs\u3092\u542b\u3080\u500b\u3005\u306e\u30d5\u30a1\u30a4\u30eb\u30b7\u30b9\u30c6\u30e0\u3067\u306f\u306a\u304fVFS\u5c64\u306b\u3088\u3063\u3066\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u307e\u3059\u306e\u3067\u3001\u305d\u306e\u5f15\u304d\u6570\u306b\u3088\u3063\u3066\u6e21\u3055\u308c\u308binode\u60c5\u5831\u306f\u5fc5\u7136\u7684\u306bstruct btrfs_inode\u3067\u306f\u306a\u304f\u3001struct inode\u306b\u306a\u308a\u307e\u3059\u3002\u3057\u304b\u3057\u3001Btrfs\u3068\u3057\u3066\u306f\u6642\u523b\u306e\u66f4\u65b0\u306b\u4f34\u3063\u3066\u5f8c\u8005\u3060\u3051\u3067\u306f\u306a\u304f\u524d\u8005\u306e\u60c5\u5831\u3092\u4f7f\u3063\u3066\u51e6\u7406\u3092\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\n\n\u3067\u306f\u3069\u3046\u3059\u308c\u3070\u3044\u3044\u304b\u3068\u3044\u3046\u3068\u3001\u3053\u3053\u3067container_of()\u304c\u767b\u5834\u3057\u307e\u3059\u3002btrfs_update_time()\u5192\u982d\u306eBTRFS_I()\u306e\u4e2d\u3067\u3001container_of()\u3092\u547c\u3073\u51fa\u3059\u3053\u3068\u306b\u3088\u3063\u3066\u3001inode(\u7b2c\u4e00\u5f15\u6570)\u3092vfs_inode(\u7b2c\u4e09\u5f15\u6570)\u3068\u3044\u3046\u30d5\u30a3\u30fc\u30eb\u30c9\u540d\u3067\u57cb\u3081\u8fbc\u3093\u3067\u3044\u308bstruct btrfs_inode(\u7b2c\u4e8c\u5f15\u6570)\u306e\u30a2\u30c9\u30ec\u30b9\u3092\u6c42\u3081\u307e\u3059\u3002\n\n```c:fs/btrfs/btrfs_inode.h\nstatic inline struct btrfs_inode *BTRFS_I(struct inode *inode)\n{\n        return container_of(inode, struct btrfs_inode, vfs_inode);\n...\n}\n```\n\n\u5f8c\u306f\u6c42\u3081\u305fstruct btrfs_inode\u306e\u30c7\u30fc\u30bf\u3078\u306e\u30dd\u30a4\u30f3\u30bf\u3092\u4f7f\u3063\u3066\u7c9b\u3005\u3068\u51e6\u7406\u3092\u3059\u308b\u3060\u3051\u3067\u3059\u3002\u5177\u4f53\u7684\u306b\u3069\u3046\u3044\u3046\u51e6\u7406\u3092\u3059\u308b\u304b\u306f\u672c\u66f8\u306e\u5bfe\u8c61\u7bc4\u56f2\u5916\u306a\u306e\u3067\u5272\u611b\u3057\u307e\u3059\u3002\n\n# \u30ea\u30b9\u30c8\u64cd\u4f5c\n\nlinux\u30ab\u30fc\u30cd\u30eb\u306f\u3001\u305d\u306e\u4e2d\u306bstruct list_head\u3068\u3044\u3046\u69cb\u9020\u4f53\u306b\u3088\u3063\u3066\u7ba1\u7406\u3059\u308b\u53cc\u65b9\u5411\u30ea\u30b9\u30c8\u306e\u5b9f\u88c5\u3092\u6301\u3063\u3066\u3044\u307e\u3059\u3002\u3053\u306e\u30ea\u30b9\u30c8\u306f\u4f8b\u306b\u3088\u3063\u3066\u3001C\u8a00\u8a9e\u306e\u30de\u30af\u30ed\u3092\u6700\u5927\u9650\u306b\u6d3b\u7528\u3057\u3066\u5b9f\u88c5\u3055\u308c\u3066\u3044\u307e\u3059\u3002\u3053\u306e\u7bc0\u3067\u306f\u305d\u306e\u5b9f\u88c5\u306b\u3064\u3044\u3066\u6271\u3044\u307e\u3059\u3002\n\n\u30ea\u30b9\u30c8\u306b\u3064\u3044\u3066\u306e\u57fa\u672c\u7684\u306a\u77e5\u8b58\u306f\u3001\u304a\u624b\u6570\u3067\u3059\u304c[\u5225\u8a18\u4e8b\u306e\"\u30ea\u30b9\u30c8\u306e\u69cb\u9020\"\u3068\u3044\u3046\u7bc0](http://qiita.com/satoru_takeuchi/items/40771a2429d3fdd64d19#%E3%83%AA%E3%82%B9%E3%83%88%E3%81%AE%E6%A7%8B%E9%80%A0)\u306b\u66f8\u3044\u3066\u3044\u307e\u3059\u306e\u3067\u3001\u305d\u3061\u3089\u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\u3002\u77ed\u3044\u3057\u5358\u7d14\u306a\u306e\u3067\u3001\u77ed\u6642\u9593\u3067\u8aad\u3081\u308b\u3068\u601d\u3044\u307e\u3059\u3002\n\n\u30ea\u30b9\u30c8\u3092\u51e6\u7406\u3059\u308b\u305f\u3081\u306e\u30de\u30af\u30ed\u306f\u591a\u304f\u3042\u308a\u307e\u3059\u304c\u3001\u3053\u3053\u3067\u306f\u305d\u306e\u4e2d\u3067\u30de\u30af\u30ed\u3092\u6d3b\u7528\u3057\u3066\u3044\u308b\u51e6\u7406\u306b\u3064\u3044\u30662\u3064\u7d39\u4ecb\u3057\u307e\u3059\u3002\n\n\u307e\u305a\u306f\u6307\u5b9a\u3057\u305fstruct list_head\u306e\u30c7\u30fc\u30bf\u304b\u3089\u3001\u305d\u308c\u3092\u57cb\u3081\u8fbc\u3093\u3060\u89aa\u69cb\u9020\u4f53\u3092\u6c42\u3081\u308blist_entry()\u30de\u30af\u30ed\u3067\u3059\u3002\n\n```c:include/linux/list.h\n/**                                                                                                                                                                                                                                           \n * list_entry - get the struct for this entry                                                                                                                                                                                                 \n * @ptr:        the &struct list_head pointer.                                                                                                                                                                                                \n * @type:       the type of the struct this is embedded in.                                                                                                                                                                                   \n * @member:     the name of the list_head within the struct.                                                                                                                                                                                  \n */\n#define list_entry(ptr, type, member) \\\n        container_of(ptr, type, member)\n```\n\n\u3053\u308c\u306f\u5b9a\u7fa9\u3092\u805e\u3044\u305f\u3060\u3051\u3067\u30d4\u30f3\u3068\u6765\u308b\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u304c\u3001\u5185\u90e8\u3067container_of()\u3092\u547c\u3073\u51fa\u3057\u3066\u3044\u308b\u3060\u3051\u3067\u3059\u3002\u3053\u308c\u3067ptr(\u7b2c\u4e00\u5f15\u6570)\u3092member(\u7b2c\u4e09\u5f15\u6570)\u3068\u3044\u3046\u30d5\u30a3\u30fc\u30eb\u30c9\u540d\u3067\u57cb\u3081\u8fbc\u3093\u3067\u3044\u308btype\u578b\u306e\u30c7\u30fc\u30bf\u3078\u306e\u30dd\u30a4\u30f3\u30bf\u3092\u7372\u5f97\u3067\u304d\u307e\u3059\u3002\n\n\u7d9a\u3044\u3066\u3001\u30ea\u30b9\u30c8\u5185\u306e\u5168\u30a8\u30f3\u30c8\u30ea\u3092\u9806\u756a\u306b\u51e6\u7406\u3059\u308blist_for_each_entry()\u30de\u30af\u30ed\u3092\u898b\u3066\u307f\u307e\u3059\u3002\n\n```c:include/linux/list.h\n/**                                                                                                                                                                                                                                           \n * list_for_each_entry  -       iterate over list of given type                                                                                                                                                                               \n * @pos:        the type * to use as a loop cursor.                                                                                                                                                                                           \n * @head:       the head for your list.                                                                                                                                                                                                       \n * @member:     the name of the list_head within the struct.                                                                                                                                                                                  \n */\n#define list_for_each_entry(pos, head, member)                          \\\n        for (pos = list_first_entry(head, typeof(*pos), member);        \\\n             &pos->member != (head);                                    \\\n             pos = list_next_entry(pos, member))\n```\n\n\u3053\u306e\u95a2\u6570\u306f\u3001head\u3067\u793a\u3055\u308c\u308b\u30ea\u30b9\u30c8\u306e\u4e2d\u306e\u5168\u8981\u7d20\u306b\u3064\u3044\u3066\u3001\u5404\u8981\u7d20\u3092pos\u3068\u3044\u3046\u540d\u524d\u3067\u53d6\u308a\u51fa\u3059\u3053\u3068\u306b\u3088\u3063\u3066\u305d\u308c\u305e\u308c\u306b\u5bfe\u3057\u3066\u51e6\u7406\u3092\u3057\u307e\u3059\u3002\u3053\u3053\u3067\u3001pos\u306e\u4e2d\u3067head\u306b\u5bfe\u5fdc\u3059\u308b\u30ea\u30b9\u30c8\u306fmember\u3068\u3044\u3046\u30d5\u30a3\u30fc\u30eb\u30c9\u540d\u3067\u57cb\u3081\u8fbc\u307e\u308c\u3066\u3044\u307e\u3059\u3002\n\n\u4f7f\u7528\u4f8b\u3092\u793a\u3057\u307e\u3059\u3002\u30b5\u30f3\u30d7\u30eb\u30d7\u30ed\u30b0\u30e9\u30e0\u306e\u4ed5\u69d8\u3068\u30bd\u30fc\u30b9\u306f\u6b21\u306e\u901a\u308a\u3067\u3059\u3002\n\n\u4ed5\u69d8:\n\n- mylist\u3068\u3044\u3046\u30ea\u30b9\u30c8\u304c\u3042\u308b\n- mylist\u5185\u306e\u30a8\u30f3\u30c8\u30ea\u306fint\u578b\u306en\u3068\u3044\u3046\u540d\u524d\u306e\u552f\u4e00\u306e\u30c7\u30fc\u30bf\u3092\u6301\u3064\n- mylist_show()\u306f\u3001mylist\u5185\u306e\u3059\u3079\u3066\u306e\u30a8\u30f3\u30c8\u30ea\u306b\u5bfe\u3057\u3066n\u3092\u30ab\u30fc\u30cd\u30eb\u30ed\u30b0\u306b\u51fa\u529b\u3059\u308b\n\n```c:test.c\nstatic LIST_HEAD(mylist);\n\nstruct mylist_entry {\n        struct list_head list;\n        int n;\n};\n...\nstatic void mylist_show(void) {\n        struct mylist_entry *e;\n\n        printk(KERN_ALERT \"mylist: show contents\\n\");\n\n        list_for_each_entry(e, &mylist, list) {\n                printk(KERN_ALERT \"\\t%d\\n\", e->n);\n        }\n}\n```\n\n\u4e00\u898b\u95a2\u6570\u306e\u3088\u3046\u306b\u898b\u3048\u308b list_for_each_entry()\u30de\u30af\u30ed\u304b\u3089\u30d6\u30ed\u30c3\u30af\u304c\u751f\u3048\u3066\u305d\u306e\u4e2d\u3067\u51e6\u7406\u3092\u3057\u3066\u3044\u308b\u3068\u3044\u3046\u306e\u306fC\u8a00\u8a9e\u3092\u77e5\u3063\u3066\u3044\u308c\u3070\u77e5\u3063\u3066\u3044\u308b\u307b\u3069\u9a5a\u304f\u3068\u601d\u3044\u307e\u3059\u304c\u3001\u524d\u8ff0\u306e\u3088\u3046\u306a\u30de\u30af\u30ed\u5b9a\u7fa9\u3092\u3057\u3066\u3044\u308c\u3070\u3053\u306e\u3088\u3046\u306a\u82b8\u5f53\u304c\u53ef\u80fd\u306a\u306e\u3067\u3059\u3002\n\nlinux\u30ab\u30fc\u30cd\u30eb\u306e\u4e2d\u306b\u306f\u4ed6\u306b\u3082\"for_each\"\u3068\u3044\u3046\u6587\u5b57\u5217\u3092\u542b\u3080\u540d\u524d\u306e\u985e\u4f3c\u306e\u30de\u30af\u30ed\u304c\u968f\u6240\u306b\u51fa\u3066\u304d\u307e\u3059\u3002\u305f\u3068\u3048\u3070\u5404\u30a8\u30f3\u30c8\u30ea\u306e\u51e6\u7406\u4e2d\u306b\u30a8\u30f3\u30c8\u30ea\u306e\u524a\u9664\u304c\u53ef\u80fd\u306alist_for_each_safe()\u304c\u3042\u308a\u307e\u3059\u3002\u4ed6\u306b\u3082\u3001\u30ea\u30b9\u30c8\u3068\u306f\u5225\u306e\u30c7\u30fc\u30bf\u69cb\u9020\u306b\u3082\u985e\u7dad\u6301\u3057\u305fAPI\u304c\u7528\u610f\u3055\u308c\u3066\u3044\u308b\u3053\u3068\u3082\u3042\u308a\u307e\u3059\u3002\u8208\u5473\u304c\u3042\u308c\u3070\u3001\u305d\u308c\u305e\u308c\u306e\u5b9a\u7fa9\u3092\u898b\u3066\u307f\u308b\u3068\u9762\u767d\u3044\u3068\u601d\u3044\u307e\u3059\u3002\n\n# \u304a\u308f\u308a\u306b\n\n\u672c\u8a18\u4e8b\u306f\u57f7\u7b46\u6642\u70b9\u3067\u81ea\u5206\u306e\u8133\u5185\u306b\u305f\u307e\u305f\u307e\u6b8b\u3063\u3066\u3044\u305f\u30de\u30af\u30ed\u306b\u3064\u3044\u3066\u66f8\u3044\u305f\u3060\u3051\u306a\u306e\u3067\u3001\u4ed6\u306b\u3082\u9762\u767d\u3044\u30de\u30af\u30ed\u306f\u3044\u304f\u3089\u3067\u3082\u3042\u308b\u3068\u601d\u3044\u307e\u3059\u3002\u601d\u3044\u51fa\u3057\u305f\u3089\u307e\u305f\u8ffd\u8a18\u3059\u308b\u4e88\u5b9a\u3067\u3059\u3002\u8aad\u8005\u306e\u304b\u305f\u304c\u305f\u3082\u3001\u300c\u3053\u308c\u3082\u7d39\u4ecb\u3057\u3066\u304f\u308c\u300d\u3068\u304b\u300c\u3053\u306e\u30de\u30af\u30ed\u306e\u610f\u5473\u304c\u308f\u304b\u3089\u306a\u3044\u3093\u3060\u3051\u3069\u300d\u306a\u3069\u3042\u308a\u307e\u3057\u305f\u3089\u3001\u6559\u3048\u3066\u3044\u305f\u3060\u3051\u308b\u3068\u3001\u4eca\u5f8c\u8ffd\u8a18\u3059\u308b\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u3002\n", "tags": ["Linux", "C\u8a00\u8a9e", "macro", "kernel"]}