{"tags": ["neologd", "kuromoji", "mecab0.996", "Python2.7.1", "Elasticsearch5.0.1"], "context": "\n\n\u5e8f\u6587\n\u3069\u3046\u3082\u3001\u518d\u3073\u306e\u65b0\u4eba\u3067\u3059\u3002\n\u524d\u56de\u306e\u7d9a\u304d\u3067\u3059\u3002\n\u524d\u56demecab\u3060\u3051\u3092\u4f7f\u3063\u3066\u3044\u305f\u3089\u3046\u307e\u304f\u3044\u304b\u306a\u304f\u3066\u3001\u305d\u306e\u307e\u307e\u4e16\u306b\u304a\u62ab\u9732\u76ee\u3092\u3057\u305f\u3068\u3053\u308d\u5404\u65b9\u9762\uff08qiita\u3084twitter\u3084\u307b\u307c\u5168\u65b9\u9762\uff09\u304b\u3089\u300cIPA\u8f9e\u66f8\u3060\u3051\u3067\u65e5\u672c\u8a9e\u3044\u3051\u308b\u3068\u601d\u3046\u306a\u3001NEologd\u3092\u4f7f\u3048\u300d\u3068\u306e\u307e\u3055\u304b\u308a\u304c\u98db\u3093\u3067\u304d\u305f\u306e\u3067\u3042\u308a\u304c\u305f\u304f \u9854\u9762 \u6b63\u9762\u304b\u3089\u53d7\u3051\u6b62\u3081\u3066\u307f\u307e\u3057\u305f\u3002\n\u307e\u305f\u3001Elasticsearch\u306ePlugin\u3067\u65e5\u672c\u8a9e\u89e3\u6790\u304c\u3067\u304d\u308b elasticsearch-analysis-kuromoji \u3082\u4f7f\u3063\u3066\u307f\u307e\u3057\u305f\u3002\n\n\u69cb\u60f3\u3057\u305f\u6642\u70b9\u3067\u306e\u6240\u611f\uff08\u53e3\u8a9e\u8abf\uff09\n\nNEologd\u306f\u73fe\u4ee3\u8a9e\u306b\u5bfe\u5fdc\u3057\u3066\u3044\u308b\u3089\u3057\u3044\u3051\u3069\u3001\u4eca\u6d41\u884c\u308a\u3060\u3057\u305f\u3070\u304b\u308a\u306e\u65b0\u8a9e\u304c\u6a2a\u884c\u3059\u308bTwitter\u3067\u3069\u3053\u307e\u3067\u901a\u7528\u3059\u308b\u3060\u308d\u3046\u304b\u3002\nkuromoji\u306f\u65e5\u672c\u8a9e\u5206\u5272\u306f\u3067\u304d\u308b\u3089\u3057\u3044\u3051\u3069\u3001\u3069\u3053\u307e\u3067\u73fe\u4ee3\u8a9e\u7684\u306a\u306e\u3060\u308d\u3046\u304b\u3002\u30ea\u30d7\u3084\u30cf\u30c3\u30b7\u30e5\u30bf\u30b0\u3092\u53d6\u308a\u9664\u304f\u65b9\u6cd5\u306f\u3088\u304f\u5206\u304b\u3089\u306a\u3044\u306a\u3002\n\n\n\u74b0\u5883\n\u524d\u56de\u3092\u3054\u53c2\u7167\u304f\u3060\u3055\u3044\u3002\n\n\u4f5c\u696d\u3057\u305f\u3053\u3068\n\n\nNEologd\u306e\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\n\ngithub\u304b\u3089\u5f15\u3063\u5f35\u3063\u3066\u304d\u307e\u3059\u3002\n$ git clone --depth 1 https://github.com/neologd/mecab-ipadic-neologd.git\n\n\u30a2\u30c3\u30d7\u30c7\u30fc\u30c8\u3092\u53d6\u308a\u8fbc\u3080\u306b\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u3067\u3059\u3002\n$ ./bin/install-mecab-ipadic-neologd -n\n\n\u6b21\u306e\u30b3\u30de\u30f3\u30c9\u3067\u3001NEologd\u304c\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3055\u308c\u305f\u5834\u6240\u3092\u63a2\u3057\u307e\u3059\u3002\n$ echo `mecab-config --dicdir`\"/mecab-ipadic-neologd\"\n\n\u4f7f\u3044\u65b9\u306f\u3001python\u306e\u30b3\u30fc\u30c9\u3067\u3054\u7d39\u4ecb\u3002\n\n\nelasticsearch-analysis-kuromoji\u3092\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\n\nElasticsearch\u304c\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3055\u308c\u3066\u308b\u5834\u6240($ES_HOME)\u3067\u4ee5\u4e0b\u3092\u5b9f\u884c\u3057\u307e\u3059\u3002\n$ sudo bin/elasticsearch-plugin install analysis-kuromoji\n\n\u4eca\u56de\u306f\u3001text\u30d5\u30a3\u30fc\u30eb\u30c9\u3092\u89e3\u6790\u3059\u308b\u306e\u3067\u3001\u4ee5\u4e0b\u306etemplate\u3092\u6295\u5165\u3057\u307e\u3059\u3002\uff08\u3082\u3061\u308d\u3093Elasticsearch\u3092\u8d77\u52d5\u3057\u3066\u304b\u3089\u3067\u3059\u3002\uff09\ncurl -XPUT --user elastic:changeme localhost:9200/_template/text_analysis?pretty -d '{\n  \"template\": \"twitter-*\",\n  \"settings\": {\n    \"analysis\": {\n      \"tokenizer\": {\n        \"kuromoji_user_dict\": {\n          \"type\": \"kuromoji_tokenizer\",\n          \"mode\": \"normal\"\n        }\n      }\n    }\n  },\n  \"mappings\": {\n    \"twitter\": {\n      \"properties\": {\n        \"text\": {\n            \"type\": \"text\",\n            \"fielddata\": true,\n            \"analyzer\": \"kuromoji\",\n          \"fields\": {\n            \"keyword\": {\n              \"type\": \"keyword\"\n            }\n          }\n        }\n      }\n    }\n  }\n}'\n\n--user elastic:changeme \u306f\u3001x-pack\u3092\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3057\u305f\u5f8c\u306ecurl\u306e\u6295\u3052\u65b9\u3067\u3059\u3002\u3061\u306a\u307f\u306busername=elastic\u3001password=changeme\u3067\u3059\u3002\uff08\u3054\u3081\u3093\u306a\u3055\u3044\u307e\u3060\u30d1\u30b9\u30ef\u30fc\u30c9\u5909\u3048\u3066\u307e\u305b\u3093\uff09\n\nTwitter\u304b\u3089\u60c5\u5831\u53ce\u96c6\n\nTwitter API\u306e\u4f7f\u3044\u65b9\u306f\u524d\u56de\u3092\u3054\u89a7\u304f\u3060\u3055\u3044\u3002\n\nsearch.py\n#!/usr/bin/env python                                                                                                                                                                                           \n# -*- coding: utf-8 -*-                                                                                                                                                                                         \n\nfrom requests_oauthlib import OAuth1Session\nimport json\nimport MeCab\n\nCK = '***********'\nCS = '***********'\nAT = '***********'\nAS = '***********'\n\nurl = \"https://api.twitter.com/1.1/search/tweets.json\"\n\n#here can be set ID of tweet (ordered by time), and number of tweets (default is 20, max 200)                                                                                                                   \nparams = {'q':'#\u9003\u3052\u6065', 'count':'200'}\n\n# GET request                                                                                                                                                                                                   \ntwitter = OAuth1Session(CK, CS, AT, AS)\nreq = twitter.get(url, params = params)\n\nf = open(\"json/search_nigehaji.json\",\"a\")\n\nif req.status_code == 200:\n    timeline = json.loads(req.text)\n    print(timeline)\n    for tweet in timeline[\"statuses\"]:\n        word_array = []\n        mecab_combo = [[] for j in range(3)]\n        word_combo = []\n        print(tweet)\n        for word in tweet[\"text\"].split(\" \"):\n            word_array.append(word)\n            print(word)\n            if (not word.startswith('http')) and (not word.startswith('@')) and (word != 'RT'):\n                tagger = MeCab.Tagger(' -d /usr/local/lib/mecab/dic/mecab-ipadic-neologd')\n                text_str = word.encode('utf-8')\n                node = tagger.parseToNode(text_str)\n                mecab_array_noun = [];mecab_array_verb = []\n                while node:\n                    mecab_word = node.surface.decode(\"utf-8\")\n                    pos = node.feature.split(\",\")[0]\n                    mecab_combo[0].append(pos)\n                    mecab_combo[1].append(mecab_word)\n                    mecab_combo[2].append(node.feature.split(\",\")[6])\n                    if pos == \"\u540d\u8a5e\":\n                        mecab_array_noun.append(mecab_word)\n                        print(pos)\n                        print(mecab_word)\n                    elif pos == \"\u52d5\u8a5e\":\n                        mecab_array_verb.append(mecab_word)\n                        print(pos)\n                        print(mecab_word)\n                        print(node.feature.split(\",\")[6])\n                    node = node.next\n                    print(mecab_combo)\n        print(\"###########\")\n        print(len(mecab_combo[0]))\n        for i in xrange(0, len(mecab_combo[0])):\n            print(\"########################################\")\n            print(mecab_combo[0][i])\n            stage_count = 0\n            if mecab_combo[0][i] == \"\u540d\u8a5e\":\n                print(\"start for\")\n                l = []\n                for j in xrange(i, len(mecab_combo[0])):\n                    print(mecab_combo[1][j])\n                    if mecab_combo[0][j] == \"\u540d\u8a5e\":\n                        l.append(mecab_combo[1][j])\n                        word_combo.append(''.join(l))\n                        print(''.join(l))\n                    elif mecab_combo[0][j] in [\"\u52a9\u8a5e\", \"\u52a9\u52d5\u8a5e\", \"\u52d5\u8a5e\"]:\n                        if stage_count != 0:\n                            break\n                        l.append(mecab_combo[1][j])\n                        word_combo.append(''.join(l))\n                        stage_count += 1\n                        print(''.join(l))\n                    else:\n                        print(''.join(l))\n                        print(\"end\")\n                        break\n            if mecab_combo[0][i] == \"\u52d5\u8a5e\":\n                print(\"start for\")\n                l = []\n                for j in xrange(i, len(mecab_combo[0])):\n                    print(mecab_combo[1][j])\n                    if mecab_combo[0][j] == \"\u52d5\u8a5e\":\n                        l.append(mecab_combo[1][j])\n                        word_combo.append(''.join(l))\n                        print(''.join(l))\n                    elif mecab_combo[0][j] in [\"\u5f62\u5bb9\u8a5e\", \"\u52a9\u8a5e\"]:\n                        l.append(mecab_combo[1][j])\n                        word_combo.append(''.join(l))\n                        print(''.join(l))\n                        print(\"end\")\n                        break\n                    else:\n                        print(''.join(l))\n                        print(\"end\")\n                        break\n            print(\"%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\")\n        #injection                                                                                                                                                                                              \n        tweet['words']=word_array;tweet['mecab_noun']=mecab_array_noun;tweet['mecab_verb']=mecab_array_verb;tweet['word_combo']=word_combo\n        json.dump(tweet, f)\n        f.write('\\n')\nelse:\n    print(\"Error: %d\" % req.status_codea)\n\n\n\u524d\u56de\u3068\u9055\u3046\u70b9\u306f\u307e\u305a\u3001NEologd\u3092\u9069\u7528\u3057\u305f\u70b9\u3067\u3059\u3002\n\nsearch.py\ntagger = MeCab.Tagger(' -d /usr/local/lib/mecab/dic/mecab-ipadic-neologd')\n\n\n\u3042\u3068\u306f\u3001\u524d\u56de\u306e\u53cd\u7701\u3092\u751f\u304b\u3057\u3066\u3001URL\u30ea\u30f3\u30af(http\u304b\u3089\u59cb\u307e\u308b)\u3084\u30ea\u30d7\u30e9\u30a4(@\u304b\u3089\u59cb\u307e\u308b)\u3084RT\u3092\u9664\u3044\u305f\u308a\u3082\u3057\u3066\u307e\u3059\u304c\u3001\n\u4e00\u756a\u5927\u304d\u3044\u3068\u3053\u308d\u306f\u3001\u540d\u8a5e+\u540d\u8a5e+\u2026\u3084\u540d\u8a5e+\u52a9\u8a5e+\u540d\u8a5e\u306a\u3069\u3092\u307e\u3068\u3081\u3042\u3052\u3066\u3044\u308b\u3068\u3053\u308d\u3067\u3059\uff01\n\u30d2\u30c3\u30c8\u30ef\u30fc\u30c9\u3092\u62fe\u3046\u305f\u3081\u306b\u5de5\u592b\u3057\u3066\u307f\u307e\u3057\u305f\u3002\n\u30d1\u30bf\u30fc\u30f3\u306f\u3044\u304f\u3089\u3067\u3082\u81ea\u5206\u3067\u5897\u3084\u305b\u307e\u3059\u3002\n\u3053\u308c\u3067\u4f8b\u3048\u3070\u2026\n\u661f\u91ce\u6e90\n\u6708\u66dc\u65e5\u306e\u305f\u308f\u308f\n\n\u7d50\u679c\n\u306a\u3093\u304b\u4eca\u3061\u3087\u3046\u3069\u6700\u7d42\u56de\u306e\u4e00\u756a\u3044\u3044\u30b7\u30fc\u30f3\u3067\u62b1\u304d\u3064\u3044\u3066\u308b\u3093\u3067\u3059\u304c\u2026\u305d\u308c\u306f\u7f6e\u3044\u3066\u304a\u3044\u3066\u3002\u3002\n\n\u3060\u3044\u3076\u3001\u3044\u3044\u7d50\u679c\u304c\u51fa\u305f\u3068\u601d\u3044\u307e\u3059\uff01\n\u30cf\u30c3\u30b7\u30e5\u30bf\u30b0\u4ee5\u5916\u306e\u9003\u3052\u6065\u89e3\u6790\u30b0\u30e9\u30d5\u306b\u306fX-Axis\u306eAdvanced->Exclude Pattern\u306b\n.*https.*|\\#.*|\u9003\u3052\u6065|.|..\n\n\u3092\u6307\u5b9a\u3057\u3066\u3042\u308a\u307e\u3059\u3002\n\u65e5\u672c\u8a9e\u89e3\u6790\u306e\u65b9\u3067\u3059\u304c\u3001kuromoji\u3082\u3001mecab\uff08\u540d\u8a5e\u5206\u6790\uff09\u3082\u3001\u4f55\u3068\u306a\u304f\u767b\u5834\u4eba\u7269\u3084\u5f79\u8005\u3084\u30b7\u30fc\u30f3\u304c\u60f3\u50cf\u3067\u304d\u307e\u3059\u306d\u3002\npython\u3092\u565b\u307e\u305b\u308b\u307b\u3069\u306e\u3084\u308a\u305f\u3044\u3053\u3068\u304c\u306a\u3051\u308c\u3070kuromoji\u3067\u3059\u306d\u3002\n\u305d\u3057\u3066\u30d2\u30c3\u30c8\u30ef\u30fc\u30c9\u89e3\u6790\u3067\u306f\u307f\u3093\u306a\u304c\u30bb\u30ea\u30d5\u3092\u305d\u306e\u307e\u307e\u545f\u304f\u3088\u3046\u3067\u2026\n\u6700\u9ad8\u306b\u30d7\u30ea\u30c6\u30a3\n\u3068\u304b\n\u52b4\u50cd\u529b\u3092\u30bf\u30c0\n\u3068\u304b\n\u4eba\u306e\u5584\u610f\n\u3068\u304b\n15\u5206\u62e1\u5927\n\u3068\u304b\u304c\u30e9\u30f3\u30af\u30a4\u30f3\u3057\u3066\u307e\u3059\u306d\u3002\n\u50d5\u3001\uff12\u8a71\u3060\u3051\u898b\u3066\u304b\u3089\u305a\u3063\u3068\u898b\u3066\u306a\u3044\u3057\u3001\u6700\u7d42\u56de\u3082\u6700\u521d\u3068\u6700\u5f8c\u306e\uff15\u5206\u304f\u3089\u3044\u3057\u304b\u898b\u3066\u306a\u3044\u306e\u3067\u3001\n\u3053\u308c\u3089\u306e\u30ad\u30fc\u30ef\u30fc\u30c9\u304c\u4f55\u306e\u8a71\u3060\u304b\u5206\u304b\u3089\u306a\u3044\u3093\u3067\u3059\u304c\u304d\u3063\u3068\u305d\u3093\u306a\u30bb\u30ea\u30d5\u304c\u3042\u3063\u305f\u3093\u3067\u3057\u3087\u3046\uff08\u3072\u3068\u3054\u3068\uff09\n\u3055\u3066\u3001\u5bdd\u307e\u3057\u3087\u3046\u304b\u3002\u3042\u306e\u30b7\u30fc\u30f3\u306f\u30ef\u30b7\u306b\u306f\u5f37\u3059\u304e\u305f\u2026\u3002\n#\u5e8f\u6587\n\u3069\u3046\u3082\u3001\u518d\u3073\u306e[\u65b0\u4eba](http://qiita.com/advent-calendar/2016/freshman_engineer)\u3067\u3059\u3002\n[\u524d\u56de](http://qiita.com/yamatok/items/408526ccfdb8f8c9e368)\u306e\u7d9a\u304d\u3067\u3059\u3002\n\n\u524d\u56demecab\u3060\u3051\u3092\u4f7f\u3063\u3066\u3044\u305f\u3089\u3046\u307e\u304f\u3044\u304b\u306a\u304f\u3066\u3001\u305d\u306e\u307e\u307e\u4e16\u306b\u304a\u62ab\u9732\u76ee\u3092\u3057\u305f\u3068\u3053\u308d\u5404\u65b9\u9762\uff08qiita\u3084twitter\u3084\u307b\u307c\u5168\u65b9\u9762\uff09\u304b\u3089\u300cIPA\u8f9e\u66f8\u3060\u3051\u3067\u65e5\u672c\u8a9e\u3044\u3051\u308b\u3068\u601d\u3046\u306a\u3001NEologd\u3092\u4f7f\u3048\u300d\u3068\u306e\u307e\u3055\u304b\u308a\u304c\u98db\u3093\u3067\u304d\u305f\u306e\u3067\u3042\u308a\u304c\u305f\u304f ~~\u9854\u9762~~ \u6b63\u9762\u304b\u3089\u53d7\u3051\u6b62\u3081\u3066\u307f\u307e\u3057\u305f\u3002\n\n\u307e\u305f\u3001Elasticsearch\u306ePlugin\u3067\u65e5\u672c\u8a9e\u89e3\u6790\u304c\u3067\u304d\u308b `elasticsearch-analysis-kuromoji` \u3082\u4f7f\u3063\u3066\u307f\u307e\u3057\u305f\u3002\n\n#\u69cb\u60f3\u3057\u305f\u6642\u70b9\u3067\u306e\u6240\u611f\uff08\u53e3\u8a9e\u8abf\uff09\n- NEologd\u306f\u73fe\u4ee3\u8a9e\u306b\u5bfe\u5fdc\u3057\u3066\u3044\u308b\u3089\u3057\u3044\u3051\u3069\u3001\u4eca\u6d41\u884c\u308a\u3060\u3057\u305f\u3070\u304b\u308a\u306e\u65b0\u8a9e\u304c\u6a2a\u884c\u3059\u308bTwitter\u3067\u3069\u3053\u307e\u3067\u901a\u7528\u3059\u308b\u3060\u308d\u3046\u304b\u3002\n- kuromoji\u306f\u65e5\u672c\u8a9e\u5206\u5272\u306f\u3067\u304d\u308b\u3089\u3057\u3044\u3051\u3069\u3001\u3069\u3053\u307e\u3067\u73fe\u4ee3\u8a9e\u7684\u306a\u306e\u3060\u308d\u3046\u304b\u3002\u30ea\u30d7\u3084\u30cf\u30c3\u30b7\u30e5\u30bf\u30b0\u3092\u53d6\u308a\u9664\u304f\u65b9\u6cd5\u306f\u3088\u304f\u5206\u304b\u3089\u306a\u3044\u306a\u3002\n\n#\u74b0\u5883\n\n[\u524d\u56de](http://qiita.com/yamatok/items/408526ccfdb8f8c9e368)\u3092\u3054\u53c2\u7167\u304f\u3060\u3055\u3044\u3002\n\n#\u4f5c\u696d\u3057\u305f\u3053\u3068\n- [NEologd](https://github.com/neologd/mecab-ipadic-neologd)\u306e\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\n\ngithub\u304b\u3089\u5f15\u3063\u5f35\u3063\u3066\u304d\u307e\u3059\u3002\n\n```\n$ git clone --depth 1 https://github.com/neologd/mecab-ipadic-neologd.git\n```\n\u30a2\u30c3\u30d7\u30c7\u30fc\u30c8\u3092\u53d6\u308a\u8fbc\u3080\u306b\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u3067\u3059\u3002\n\n```\n$ ./bin/install-mecab-ipadic-neologd -n\n```\n\n\u6b21\u306e\u30b3\u30de\u30f3\u30c9\u3067\u3001NEologd\u304c\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3055\u308c\u305f\u5834\u6240\u3092\u63a2\u3057\u307e\u3059\u3002\n\n```\n$ echo `mecab-config --dicdir`\"/mecab-ipadic-neologd\"\n```\n\u4f7f\u3044\u65b9\u306f\u3001python\u306e\u30b3\u30fc\u30c9\u3067\u3054\u7d39\u4ecb\u3002\n\n- [elasticsearch-analysis-kuromoji](https://www.elastic.co/guide/en/elasticsearch/plugins/current/analysis-kuromoji.html)\u3092\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\n\nElasticsearch\u304c\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3055\u308c\u3066\u308b\u5834\u6240(`$ES_HOME`)\u3067\u4ee5\u4e0b\u3092\u5b9f\u884c\u3057\u307e\u3059\u3002\n\n```\n$ sudo bin/elasticsearch-plugin install analysis-kuromoji\n```\n\n\u4eca\u56de\u306f\u3001`text`\u30d5\u30a3\u30fc\u30eb\u30c9\u3092\u89e3\u6790\u3059\u308b\u306e\u3067\u3001\u4ee5\u4e0b\u306etemplate\u3092\u6295\u5165\u3057\u307e\u3059\u3002\uff08\u3082\u3061\u308d\u3093Elasticsearch\u3092\u8d77\u52d5\u3057\u3066\u304b\u3089\u3067\u3059\u3002\uff09\n\n```\ncurl -XPUT --user elastic:changeme localhost:9200/_template/text_analysis?pretty -d '{\n  \"template\": \"twitter-*\",\n  \"settings\": {\n    \"analysis\": {\n      \"tokenizer\": {\n        \"kuromoji_user_dict\": {\n          \"type\": \"kuromoji_tokenizer\",\n          \"mode\": \"normal\"\n        }\n      }\n    }\n  },\n  \"mappings\": {\n    \"twitter\": {\n      \"properties\": {\n        \"text\": {\n            \"type\": \"text\",\n            \"fielddata\": true,\n            \"analyzer\": \"kuromoji\",\n          \"fields\": {\n            \"keyword\": {\n              \"type\": \"keyword\"\n            }\n          }\n        }\n      }\n    }\n  }\n}'\n```\n\n`--user elastic:changeme` \u306f\u3001x-pack\u3092\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3057\u305f\u5f8c\u306ecurl\u306e\u6295\u3052\u65b9\u3067\u3059\u3002\u3061\u306a\u307f\u306b`username=elastic`\u3001`password=changeme`\u3067\u3059\u3002\uff08\u3054\u3081\u3093\u306a\u3055\u3044\u307e\u3060\u30d1\u30b9\u30ef\u30fc\u30c9\u5909\u3048\u3066\u307e\u305b\u3093\uff09\n\n- Twitter\u304b\u3089\u60c5\u5831\u53ce\u96c6\n\nTwitter API\u306e\u4f7f\u3044\u65b9\u306f[\u524d\u56de](http://qiita.com/yamatok/items/408526ccfdb8f8c9e368)\u3092\u3054\u89a7\u304f\u3060\u3055\u3044\u3002\n\n```search.py\n#!/usr/bin/env python                                                                                                                                                                                           \n# -*- coding: utf-8 -*-                                                                                                                                                                                         \n\nfrom requests_oauthlib import OAuth1Session\nimport json\nimport MeCab\n\nCK = '***********'\nCS = '***********'\nAT = '***********'\nAS = '***********'\n\nurl = \"https://api.twitter.com/1.1/search/tweets.json\"\n\n#here can be set ID of tweet (ordered by time), and number of tweets (default is 20, max 200)                                                                                                                   \nparams = {'q':'#\u9003\u3052\u6065', 'count':'200'}\n\n# GET request                                                                                                                                                                                                   \ntwitter = OAuth1Session(CK, CS, AT, AS)\nreq = twitter.get(url, params = params)\n\nf = open(\"json/search_nigehaji.json\",\"a\")\n\nif req.status_code == 200:\n    timeline = json.loads(req.text)\n    print(timeline)\n    for tweet in timeline[\"statuses\"]:\n        word_array = []\n        mecab_combo = [[] for j in range(3)]\n        word_combo = []\n        print(tweet)\n        for word in tweet[\"text\"].split(\" \"):\n            word_array.append(word)\n            print(word)\n            if (not word.startswith('http')) and (not word.startswith('@')) and (word != 'RT'):\n                tagger = MeCab.Tagger(' -d /usr/local/lib/mecab/dic/mecab-ipadic-neologd')\n                text_str = word.encode('utf-8')\n                node = tagger.parseToNode(text_str)\n                mecab_array_noun = [];mecab_array_verb = []\n                while node:\n                    mecab_word = node.surface.decode(\"utf-8\")\n                    pos = node.feature.split(\",\")[0]\n                    mecab_combo[0].append(pos)\n                    mecab_combo[1].append(mecab_word)\n                    mecab_combo[2].append(node.feature.split(\",\")[6])\n                    if pos == \"\u540d\u8a5e\":\n                        mecab_array_noun.append(mecab_word)\n                        print(pos)\n                        print(mecab_word)\n                    elif pos == \"\u52d5\u8a5e\":\n                        mecab_array_verb.append(mecab_word)\n                        print(pos)\n                        print(mecab_word)\n                        print(node.feature.split(\",\")[6])\n                    node = node.next\n                    print(mecab_combo)\n        print(\"###########\")\n        print(len(mecab_combo[0]))\n        for i in xrange(0, len(mecab_combo[0])):\n            print(\"########################################\")\n            print(mecab_combo[0][i])\n            stage_count = 0\n            if mecab_combo[0][i] == \"\u540d\u8a5e\":\n                print(\"start for\")\n                l = []\n                for j in xrange(i, len(mecab_combo[0])):\n                    print(mecab_combo[1][j])\n                    if mecab_combo[0][j] == \"\u540d\u8a5e\":\n                        l.append(mecab_combo[1][j])\n                        word_combo.append(''.join(l))\n                        print(''.join(l))\n                    elif mecab_combo[0][j] in [\"\u52a9\u8a5e\", \"\u52a9\u52d5\u8a5e\", \"\u52d5\u8a5e\"]:\n                        if stage_count != 0:\n                            break\n                        l.append(mecab_combo[1][j])\n                        word_combo.append(''.join(l))\n                        stage_count += 1\n                        print(''.join(l))\n                    else:\n                        print(''.join(l))\n                        print(\"end\")\n                        break\n            if mecab_combo[0][i] == \"\u52d5\u8a5e\":\n                print(\"start for\")\n                l = []\n                for j in xrange(i, len(mecab_combo[0])):\n                    print(mecab_combo[1][j])\n                    if mecab_combo[0][j] == \"\u52d5\u8a5e\":\n                        l.append(mecab_combo[1][j])\n                        word_combo.append(''.join(l))\n                        print(''.join(l))\n                    elif mecab_combo[0][j] in [\"\u5f62\u5bb9\u8a5e\", \"\u52a9\u8a5e\"]:\n                        l.append(mecab_combo[1][j])\n                        word_combo.append(''.join(l))\n                        print(''.join(l))\n                        print(\"end\")\n                        break\n                    else:\n                        print(''.join(l))\n                        print(\"end\")\n                        break\n            print(\"%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\")\n        #injection                                                                                                                                                                                              \n        tweet['words']=word_array;tweet['mecab_noun']=mecab_array_noun;tweet['mecab_verb']=mecab_array_verb;tweet['word_combo']=word_combo\n        json.dump(tweet, f)\n        f.write('\\n')\nelse:\n    print(\"Error: %d\" % req.status_codea)\n```\n\n[\u524d\u56de](http://qiita.com/yamatok/items/408526ccfdb8f8c9e368)\u3068\u9055\u3046\u70b9\u306f\u307e\u305a\u3001NEologd\u3092\u9069\u7528\u3057\u305f\u70b9\u3067\u3059\u3002\n\n```search.py\ntagger = MeCab.Tagger(' -d /usr/local/lib/mecab/dic/mecab-ipadic-neologd')\n```\n\n\u3042\u3068\u306f\u3001[\u524d\u56de](http://qiita.com/yamatok/items/408526ccfdb8f8c9e368)\u306e\u53cd\u7701\u3092\u751f\u304b\u3057\u3066\u3001URL\u30ea\u30f3\u30af(http\u304b\u3089\u59cb\u307e\u308b)\u3084\u30ea\u30d7\u30e9\u30a4(@\u304b\u3089\u59cb\u307e\u308b)\u3084`RT`\u3092\u9664\u3044\u305f\u308a\u3082\u3057\u3066\u307e\u3059\u304c\u3001\n\n\u4e00\u756a\u5927\u304d\u3044\u3068\u3053\u308d\u306f\u3001\u540d\u8a5e+\u540d\u8a5e+\u2026\u3084\u540d\u8a5e+\u52a9\u8a5e+\u540d\u8a5e\u306a\u3069\u3092\u307e\u3068\u3081\u3042\u3052\u3066\u3044\u308b\u3068\u3053\u308d\u3067\u3059\uff01\n\u30d2\u30c3\u30c8\u30ef\u30fc\u30c9\u3092\u62fe\u3046\u305f\u3081\u306b\u5de5\u592b\u3057\u3066\u307f\u307e\u3057\u305f\u3002\n\u30d1\u30bf\u30fc\u30f3\u306f\u3044\u304f\u3089\u3067\u3082\u81ea\u5206\u3067\u5897\u3084\u305b\u307e\u3059\u3002\n\u3053\u308c\u3067\u4f8b\u3048\u3070\u2026\n\n`\u661f\u91ce\u6e90`\n\n`\u6708\u66dc\u65e5\u306e\u305f\u308f\u308f`\n\n#\u7d50\u679c\n\n\u306a\u3093\u304b\u4eca\u3061\u3087\u3046\u3069\u6700\u7d42\u56de\u306e\u4e00\u756a\u3044\u3044\u30b7\u30fc\u30f3\u3067\u62b1\u304d\u3064\u3044\u3066\u308b\u3093\u3067\u3059\u304c\u2026\u305d\u308c\u306f\u7f6e\u3044\u3066\u304a\u3044\u3066\u3002\u3002\n\n![\u30b9\u30af\u30ea\u30fc\u30f3\u30b7\u30e7\u30c3\u30c8 2016-12-20 23.20.44.png](https://qiita-image-store.s3.amazonaws.com/0/128458/37ae48c8-3cda-2c1e-8fc4-cf9117cb854b.png)\n\n\u3060\u3044\u3076\u3001\u3044\u3044\u7d50\u679c\u304c\u51fa\u305f\u3068\u601d\u3044\u307e\u3059\uff01\n\u30cf\u30c3\u30b7\u30e5\u30bf\u30b0\u4ee5\u5916\u306e\u9003\u3052\u6065\u89e3\u6790\u30b0\u30e9\u30d5\u306b\u306f`X-Axis`\u306e`Advanced`->`Exclude Pattern`\u306b\n\n```\n.*https.*|\\#.*|\u9003\u3052\u6065|.|..\n```\n\n\u3092\u6307\u5b9a\u3057\u3066\u3042\u308a\u307e\u3059\u3002\n\u65e5\u672c\u8a9e\u89e3\u6790\u306e\u65b9\u3067\u3059\u304c\u3001kuromoji\u3082\u3001mecab\uff08\u540d\u8a5e\u5206\u6790\uff09\u3082\u3001\u4f55\u3068\u306a\u304f\u767b\u5834\u4eba\u7269\u3084\u5f79\u8005\u3084\u30b7\u30fc\u30f3\u304c\u60f3\u50cf\u3067\u304d\u307e\u3059\u306d\u3002\npython\u3092\u565b\u307e\u305b\u308b\u307b\u3069\u306e\u3084\u308a\u305f\u3044\u3053\u3068\u304c\u306a\u3051\u308c\u3070kuromoji\u3067\u3059\u306d\u3002\n\n\u305d\u3057\u3066\u30d2\u30c3\u30c8\u30ef\u30fc\u30c9\u89e3\u6790\u3067\u306f\u307f\u3093\u306a\u304c\u30bb\u30ea\u30d5\u3092\u305d\u306e\u307e\u307e\u545f\u304f\u3088\u3046\u3067\u2026\n\n\u6700\u9ad8\u306b\u30d7\u30ea\u30c6\u30a3\n\n\u3068\u304b\n\n\u52b4\u50cd\u529b\u3092\u30bf\u30c0\n\n\u3068\u304b\n\n\u4eba\u306e\u5584\u610f\n\n\u3068\u304b\n\n15\u5206\u62e1\u5927\n\n\u3068\u304b\u304c\u30e9\u30f3\u30af\u30a4\u30f3\u3057\u3066\u307e\u3059\u306d\u3002\n\n\u50d5\u3001\uff12\u8a71\u3060\u3051\u898b\u3066\u304b\u3089\u305a\u3063\u3068\u898b\u3066\u306a\u3044\u3057\u3001\u6700\u7d42\u56de\u3082\u6700\u521d\u3068\u6700\u5f8c\u306e\uff15\u5206\u304f\u3089\u3044\u3057\u304b\u898b\u3066\u306a\u3044\u306e\u3067\u3001\n\u3053\u308c\u3089\u306e\u30ad\u30fc\u30ef\u30fc\u30c9\u304c\u4f55\u306e\u8a71\u3060\u304b\u5206\u304b\u3089\u306a\u3044\u3093\u3067\u3059\u304c\u304d\u3063\u3068\u305d\u3093\u306a\u30bb\u30ea\u30d5\u304c\u3042\u3063\u305f\u3093\u3067\u3057\u3087\u3046\uff08\u3072\u3068\u3054\u3068\uff09\n\n\u3055\u3066\u3001\u5bdd\u307e\u3057\u3087\u3046\u304b\u3002\u3042\u306e\u30b7\u30fc\u30f3\u306f\u30ef\u30b7\u306b\u306f\u5f37\u3059\u304e\u305f\u2026\u3002\n"}