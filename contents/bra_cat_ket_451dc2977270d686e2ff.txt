{"context": " More than 1 year has passed since last update.Learn You a Haskell for Great Good\u3088\u308a\u3002\nList \u306e\u7d50\u5408\u304c\u9023\u7d9a\u3059\u308b\u3068\u304d\u3001\u3069\u3061\u3089\u304b\u3089\u7d50\u5408\u3055\u305b\u308b\u3088\u3046\u306b\u8a2d\u8a08\u3059\u308b\u3079\u304d\u304b\u3067\u5c11\u3005\u6df7\u4e71\u3057\u305f\u3001\u4ee5\u4e0b\u81ea\u5206\u7528\u306e\u30e1\u30e2\u3002\n\n(++) \u95a2\u6570\nconcatenation (++)\u306f\u4e2d\u7f6e\u6f14\u7b97\u5b50\u3068\u3057\u3066\u4f7f\u308f\u308c\u308b\u3053\u3068\u3082\u591a\u304f\u3063\u3066\u3001\u305d\u306e\u969b\u306e\u5de6\u5074\u306e\u30ea\u30b9\u30c8 \u3064\u307e\u308a\u6700\u521d\u306e\u30ea\u30b9\u30c8\u3092\u8d70\u3063\u305f\u5f8c\u3001\u305d\u306e\u5f8c\u308d\u306b\u3075\u305f\u3064\u76ee\u306e\u30ea\u30b9\u30c8\u3092\u3064\u306a\u3052\u308b\u3068\u3044\u3046\u4f5c\u696d\u3092\u884c\u3046\u3001\u3089\u3057\u3044\u3002\n\u30ea\u30b9\u30c8\u306e\u8aac\u660e\u3067\u3088\u304f\u898b\u308b\u56f3\u3001Lisp\u3067\u3082\u3088\u304f\u898b\u305f\u6c17\u304c\u3059\u308b\n\u3064\u307e\u308a\u3072\u3068\u3064\u76ee\u306e\u30ea\u30b9\u30c8\u306e\u7d42\u7aef\u8a18\u53f7\u3092\u898b\u3064\u3051\u308b\u307e\u3067\u8d70\u3063\u3066\u3001\u7d42\u7aef\u8a18\u53f7\u3092\u3075\u305f\u3064\u76ee\u306e\u30ea\u30b9\u30c8\u306e\u982d\u3092\u6307\u3059\u30dd\u30a4\u30f3\u30bf\u306b\u7f6e\u304d\u63db\u3048\u3066\u308b\u3001\u3068\u3044\u3046\u7406\u89e3\u3060\u308d\u3046\u304b\u3002\n\u3057\u305f\u304c\u3063\u3066Chapter 1 page 8 \u3067\u3082\u8ff0\u3079\u3066\u3044\u308b\u304c\u9023\u7d9a\u3057\u3066\u4f7f\u3046\u5834\u5408\u306f\u5de6\u304b\u3089\u65b0\u3057\u3044\u30ea\u30b9\u30c8\u3092\u4f5c\u7528\u3055\u305b\u3066\u3044\u3063\u305f\u307b\u3046\u304c\u5f97\u3067\u3042\u308b\u3001\u3068\u306e\u3053\u3068\u3002\n\u3064\u307e\u308a\u5de6\u304b\u3089\u65b0\u3057\u3044\u30ea\u30b9\u30c8\u3092\u4f5c\u7528\u3055\u305b\u3066\u3044\u3051\u3070\u3001\u3059\u3067\u306b\u3064\u306a\u3052\u3066\u3042\u308b\u30ea\u30b9\u30c8\u3092\u8d70\u308b\u5fc5\u8981\u306f\u306a\u3044\u3001\u9006\u306b\u53f3\u306b\u3064\u3051\u3066\u3044\u304f\u3068\u3059\u3067\u306b\u3064\u306a\u3052\u305f\u30ea\u30b9\u30c8\u3092\u518d\u5ea6\u8d70\u3063\u3066\u3044\u304f\u5fc5\u8981\u304c\u3042\u308b\u306e\u3067\u5927\u5909\u7121\u99c4\u3067\u3042\u308b\u3001\u3068\u3002\n\nBe careful when repeatedly using the ++ operator on long strings. When you put together two lists, Haskell has to walk through the entire first list (the one on the left side of ++). That\u2019s not a problem when dealing with smaller lists, but appending something to the end of a list with fifty million entries is going to take a while.\n\n\ngcd' \u95a2\u6570\n\u3055\u3066\u3053\u3053\u304b\u3089\u304c\u554f\u984c\u3002\n\ngcd'.hs\ngcd' :: Int -> Int -> Writer [String] Int\ngcd' a b\n  | b == 0 = do\n      tell [\"Finished with \" ++ show a]\n      return a\n  | otherwise = do\n      tell [show a ++ \" mod \" ++ show b ++ \" = \" ++ show (a `mod` b)]\n       gcd' b (a `mod` b)\n\n\n\u3053\u308c\u306f\u826f\u3044\u5b9f\u88c5\u3068\u3055\u308c\u3066\u3066\u3001\u5b9f\u884c\u7d50\u679c\u306f\u6b21\u306e\u3088\u3046\u306a\u611f\u3058\u306b\u3002\n\u3061\u306a\u307f\u306bdo \u8a18\u6cd5\u306f\u9010\u6b21\u5b9f\u884c\u306e\u518d\u767a\u660e\u3089\u3057\u3044\u3001\u3064\u307e\u308a\u624b\u7d9a\u304d\u578b\u3068\u601d\u3063\u305f\u3089\u826f\u3044\u3001\u3068\u306e\u3053\u3068\u3002\n> mapM_ putStrLn $ snd $ runWriter $ gcd' 8 3\n8 mod 3 = 2\n3 mod 2 = 1\n2 mod 1 = 0\nFinished with 1\n\ndo \u8a18\u6cd5\u304c\u82e6\u624b\u306a\u4eba\u306f(>>)\u3092then\u306b\u8aad\u307f\u66ff\u3048\u3066\n\ngcd''.hs\ngcd'' :: Int -> Int -> Writer [String] Int\ngcd'' a b\n  | b == 0 = tell [\"Finished with \" ++ show a]\n             >> (return a)\n  | otherwise = tell [show a ++ \" mod \" ++ show b ++ \" = \" ++ show (a `mod` b)]\n                >> (gcd'' b (a `mod` b))\n\n\n\u3068\u3057\u3066\u3082\u3001\u591a\u5206\u8aad\u307f\u306b\u304f\u3044\u3068\u601d\u3044\u307e\u3059\u3001\u3001\u3001\uff08do \u8a18\u6cd5\u3082\u5acc\u3044\u3067\u304b\u3064\u3053\u308c\u3082\u8aad\u307f\u306b\u304f\u3044\u3068\u306a\u308b\u3068\u3069\u3046\u3057\u305f\u3089\u826f\u3044\u306e\u304b\u3001\u3001\u3001\u307e\u3001\u307e\u305f\u3053\u308c\u306f\u5225\u306e\u554f\u984c\u3067\u3059\u304c\u3001\u3042\u308b\u3044\u306f\u6163\u308c\u306e\u554f\u984c\u3067\u3057\u3087\u3046\u3002\uff09\n\u8aac\u660e\u306e\u524d\u306b\u60aa\u3044\u4f8b\u306e\u5b9f\u88c5\u3092\u3070\u3002\n\ngcdReverse.hs\ngcdReverse :: Int -> Int -> Writer [String] Int\ngcdReverse a b\n  | b == 0 = do\n      tell[\"Finished with \" ++ show a]\n      return a\n  | otherwise = do\n      result <- gcdReverse b (a `mod` b)\n      tell [show a ++ \" mod \" ++ show b ++ \" = \" ++ show (a `mod` b)]\n      return result\n\n\n\u3053\u308c\u306f\u7d50\u679c\u3092\u9006\u9806\u306b\u8fd4\u3057\u307e\u3059\u3002\n> runWriter $ gcdReverse 8 3\n(1,[\"Finished with 1\",\"2 mod 1 = 0\",\"3 mod 2 = 1\",\"8 mod 3 = 2\"])\n\n\nWriter Monad\u306e\u5b9f\u88c5\n\u3055\u3066\u3001\u3053\u3044\u3064\u3089\u3092\u6599\u7406\u3059\u308b\u305f\u3081\u306b\u306fWriter Monad\u304c\u3069\u3046\u5b9f\u88c5\u3055\u308c\u3066\u3044\u308b\u304b\u304c\u5fc5\u8981\u3067\u3001\u4ee5\u4e0b\u306e\u69d8\u306a\u611f\u3058\u3002\ninstance (Monoid w) => Monad (Writer w) where\n    return x = Writer (x, mempty)\n    (Writer (x, v)) >>= f = let (Writer (y, v')) = f x\n                            in Writer (y, v `mappend` v')\n\n\u30e2\u30ce\u30a4\u30c9\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3068\u3057\u3066\u30ea\u30b9\u30c8\u306b\u9650\u5b9a\u3057\u3066\u8003\u3048\u308c\u3070\u30bf\u30d7\u30eb\u306e2\u3064\u3081\u306e\u8981\u7d20\u306f(++)\u3067\u3064\u306a\u304c\u3063\u3066\u3044\u304f\u3068\u3044\u3046\u3053\u3068\u3067\u3042\u308b\u3001\u3057\u305f\u304c\u3063\u3066\u7d50\u5408\u3060\u3051\u8003\u3048\u308c\u3070Writer Monad\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3082\u30ea\u30b9\u30c8\u3060\u3068\u5927\u96d1\u628a\u306b\u8a00\u3063\u3066\u3044\u3044\u3068\u601d\u3046\u3002\n\uff08\u307e\u3041\u570f\u8ad6\u7684\u306b\u8a00\u3048\u3070\u81ea\u5df1\u95a2\u624b\u306e\u570f\u306e\u30e2\u30ce\u30a4\u30c9\u5bfe\u8c61\u304c\u30e2\u30ca\u30c9\u306a\u308f\u3051\u3067\u3001\u305d\u306e\u7a4d\u306f\uff08\u5f31\u3081\u3089\u308c\u3066\u3044\u306a\u3051\u308c\u3070\uff09\u30e2\u30ce\u30a4\u30c9\u3068\u4e00\u7dd2\u306a\u306e\u3067\u3064\u307e\u308b\u3068\u3053\u308d\u306e\u3068\u3053\u308d\u4e00\u7dd2\u3060\u3068\u3044\u3046\u8a71\uff09\n\n\u826f\u3057\u60aa\u3057\n\u9006\u9806\u306b\u5410\u304d\u51fa\u3059gcdReverse\u304c\u52b9\u7387\u304c\u60aa\u305d\u3046\u306a\u5b9f\u88c5\u3067\u3042\u308b\u3001\u3068\u3044\u3046\u306e\u306f\u306a\u3093\u3068\u306a\u304f\u76f4\u89b3\u7684\u306b\u611f\u3058\u308b\u306e\u3067\u89e3\u6790\u3057\u3066\u307f\u3088\u3046\u3001\u3064\u307e\u308a\u306f\u30ea\u30b9\u30c8\u3068\u898b\u305f\u6642\u306b\u4f55\u5ea6\u3082\u540c\u3058\u8981\u7d20\u306e\u4e0a\u3092\u8d70\u3063\u3066\u3057\u307e\u3063\u3066\u3044\u308b\u306e\u3060\u3068\u3044\u3046\u3053\u3068\u3092\u793a\u3057\u305f\u3044\u308f\u3051\u3060\u3002\n\u3069\u3061\u3089\u306e\u5b9f\u88c5\u3082tell \u304c\u5410\u304d\u51fa\u3057\u305f\u30ea\u30b9\u30c8\u3092\u3069\u3046\u7d50\u5408\u3059\u308b\u304b\u3068\u3044\u3046\u3068\u3053\u308d\u304c\u9055\u3046\u306e\u3060\u308d\u3046\u3068\u3042\u305f\u308a\u3092\u3064\u3051\u3066\u307f\u308b\u3001\u3055\u3066gcdReverse \u306b\u3064\u3044\u3066\u306f\n\nIt does the recursion first and binds its resulting value to result. Then it adds the current step to the log, but the current step goes at the end of the log that was produced by the recursion. At the end, it presents the result of the recursion as the final result.\n\n\u3068\u304a\u3063\u3057\u3083\u3063\u3066\u308b\u3001\u305d\u308c\u304b\u3089\u5bdf\u3059\u308b\u306bgcd'\u306ftell\u304c\u5410\u3044\u305f\u30ea\u30b9\u30c8\u3092\nc++(b++a)\n\n\u3068\u7d50\u5408\u3057\u3066\u3044\u3066\u3001\u9006\u306bgcdReverse\u306f\n(c++b)++a\n\n\u3068\u7d50\u5408\u3057\u3066\u3044\u308b\u306e\u3060\u308d\u3046\u3068\u8e0f\u3093\u3060\u3001\u3042\u3068\u306f\u78ba\u8a8d\u3057\u3066\u307f\u308b\u3060\u3051\u3067\u3042\u308b\u3002\n\n\u78ba\u8a8d\n\ngcd'.hs\ngcd' :: Int -> Int -> Writer [String] Int\ngcd' a b\n  | b == 0 = do\n      tell [\"Finished with \" ++ show a]\n      return a\n  | otherwise = do\n      tell [show a ++ \" mod \" ++ show b ++ \" = \" ++ show (a `mod` b)]\n       gcd' b (a `mod` b)\n\n\n\u306a\u306e\u3067tell \u3067\u4f5c\u3089\u308c\u305f\u6587\u5b57\u5217\u30ea\u30b9\u30c8\u306fWriter [String] \u306emappend\u306b\u3088\u3063\u3066\n[\"8 mod 3 = 2\"] ++ ([\"3 mod 2 = 1\"] ++ ([\"2 mod 1 = 0\"] ++ [\"Finished with 1\"]))\n\n\u3068\u7e4b\u304c\u308b\u3068\u3001\u307e\u3041\u305d\u3046\u3067\u3057\u3087\u3046\u3088\u3001\u3067\u306f\u6b21\u3002\n\ngcdReverse.hs\ngcdReverse :: Int -> Int -> Writer [String] Int\ngcdReverse a b\n  | b == 0 = do\n      tell[\"Finished with \" ++ show a]\n      return a\n  | otherwise = do\n      result <- gcdReverse b (a `mod` b)\n      tell [show a ++ \" mod \" ++ show b ++ \" = \" ++ show (a `mod` b)]\n      return result\n\n\n\u4eca\u5ea6\u306f\n\nThis function is inefficient because it ends up associating the use of ++ to the left instead of to the right.\n\n\u3068\u304a\u3063\u3057\u3083\u3066\u308b\u306e\u3067\u3055\u3066\u898b\u3066\u307f\u3088\u3046\u3002\n\u307e\u305a\u306fb==0 \u306b\u30d2\u30c3\u30c8\u3057\u306a\u3044\u306e\u3067result \u306b\u81ea\u5df1\u518d\u8d77\u547c\u3073\u51fa\u3057\u304c\u675f\u7e1b\u3055\u308c\u308b\u3002\n\u305d\u306e\u306e\u3061tell \u304c\u6587\u5b57\u5217\u3092\u5410\u3044\u3066\u3001\u6700\u5f8c\u306breturn \u3067result \u306e\u4e2d\u8eab\u304cWriter Monad\u306e\u5024\u306b\u30e9\u30c3\u30d7\u3055\u308c\u308b\u3001\u3068\u3002\n\u3042\u308b\u3044\u306fdesugar \u3057\u305fgcdReverse' \u3092\u307f\u308b\u3068\u3082\u3063\u3068\u306f\u3063\u304d\u308a\u5206\u304b\u308b\u304b\u3082\u3057\u308c\u306a\u3044\uff1a\n\ngcdReverse'.hs\ngcdReverse' :: Int -> Int -> Writer [String] Int\ngcdReverse' a b\n  | b == 0 = tell[\"Finished with \" ++ show a]\n             >> return a\n  | otherwise = gcdReverse b (a `mod` b)\n                >>= (\\result -> tell [show a ++ \" mod \" ++ show b ++ \" = \" ++ show (    a `mod` b)]\n                >> return result)\n\n\n\u3057\u305f\u304c\u3063\u3066\n[recursion] ++ \"8 mod 3 = 2\" \n\n\u3068\u3044\u3046\u98a8\u306b\u518d\u5e30\u7684\u306b\u81ea\u5206\u3092\u547c\u3073\u51fa\u3057\u3066\u3044\u308b\u3001\u3059\u306a\u308f\u3061\n((\"Finished with 1\" ++ \"2 mod 1 = 0\") ++ \"3 mod 2 = 1\") ++ \"8 mod 3 = 2\"\n\n\u304a\u3049\u3001\u306a\u308b\u307b\u3069\u3001\u3053\u308a\u3083\u78ba\u304b\u306b\u6bce\u5ea6\u6bce\u5ea6\u540c\u3058\u30ea\u30b9\u30c8\u306e\u4e0a\u3092\u8d70\u3063\u3066\u672b\u7aef\u3092\u63a2\u3059\u4f5c\u696d\u3092\u3057\u3066\u3044\u308b\u304b\u3089\u52b9\u7387\u60aa\u3044\u308f\u3051\u3060\u308f\u3002\n\n\u7d50\u8ad6\n\nThis function is inefficient because it ends up associating the use of ++ to the left instead of to the right.\n\n\u3068\u30b7\u30f3\u30d7\u30eb\u306b\u304a\u3063\u3057\u3083\u3063\u3066\u3044\u308b\u3053\u3068\u304c\u6700\u521d\u3055\u3063\u3071\u308a\u308f\u304b\u3089\u306a\u304b\u3063\u305f\u304c\u3053\u3046\u3084\u3063\u3066\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u306b\u305d\u3063\u3066\u7c21\u5358\u306a\u4f8b\u3092\u8ffd\u3063\u304b\u3051\u3066\u307f\u305f\u3089\u3088\u304f\u308f\u304b\u308a\u307e\u3057\u305f\u3002\n\n\u8ffd\u8a18\uff08\u5dee\u5206\u30ea\u30b9\u30c8\uff09\n\u305d\u306e\u76f4\u5f8cpage 307 \u3067\u65b0\u3057\u3044\u30c7\u30fc\u30bf\u69cb\u9020\u3092\u5c0e\u5165\u3057\u3066\u30d1\u30d5\u30a9\u30fc\u30de\u30f3\u30b9\u306e\u6539\u5584\u3092\u56f3\u3063\u3066\u3044\u308b\u3002\n\nDiffList.hs\nnewtype DiffList a = DiffList { getDiffList :: [a] -> [a]}\n\ntoDiffList :: [a] -> DiffList a\ntoDiffList xs = DiffList (xs ++)\nfromDiffList :: DiffList a -> [a]\nfromDiffList (DiffList f) = f []\n\n\n\u3053\u306e\u5dee\u5206\u30ea\u30b9\u30c8\u3092\u7528\u3044\u308b\u3068\u30ea\u30b9\u30c8\u306e\u7d50\u5408\u306f\u305f\u3060\u306e\u95a2\u6570\u306e\u7a4d\u306b\u306a\u308b\nf `append` g = \\xs -> f (g xs)\n\n\u3042\u308b\u3044\u306f\u3088\u308a\u5177\u4f53\u7684\u306b\"dog\" \u3068 \"meat\"\u304c\n\n(\"dog\" ++) `append` (\"meat\" ++) = \\xs -> \"dog\" ++ (\"meat\" ++ xs)\n\n\u3068\u306a\u308a\u3001\u30ea\u30b9\u30c8\u306e\u7d50\u5408\u304c\u9010\u6b21\u6539\u5584\u3055\u308c\u308b\u3089\u3057\u3044\u3001\u898b\u3066\u307f\u308b\u3002\n\u307e\u305a\u306f\u56f0\u3063\u305f\u3061\u3083\u3093\u3092\u7528\u610f\uff1a\n(\"cat\" ++ \"fish\") ++ \"burger\"\n\n\u3053\u308c\u304ctoDiffList\u306b\u3088\u3063\u3066\u5dee\u5206\u30ea\u30b9\u30c8\u306b\u5316\u3051\u3066\u308b\u3001\u3064\u307e\u308a\n(\\xs -> \"cat\" + xs) `append` (\\ys -> \"fish\" ++ ys)\n= \\xs -> \"cat\" ++ (\"fish\" ++ xs)\n\n\u3057\u305f\u304c\u3063\u3066\u5168\u4f53\u3067\u306f\n(\\xs -> \"cat\" ++ (\"fish\" ++ xs)) `append` (\\zs -> \"burger\" ++ zs)\n=\\xs -> \"cat\" ++ (\"fish\" ++ (\"burger\" ++ xs)\n\n\u3068\u306a\u308b\u3001\u3059\u306a\u308f\u3061\n(a ++ b) ++ c => a' ++ (b' ++ c')\n\n\u3068\u306a\u3063\u305f\u3068\u3044\u3046\u3053\u3068\u3067\u3042\u308b\u3001\u3057\u305f\u304c\u3063\u3066\u30ea\u30b9\u30c8\u306e\u7d50\u5408\u306e\u969b\u306e\u30d1\u30d5\u30a9\u30fc\u30de\u30f3\u30b9\u304c\u4e0a\u304c\u308b\u3068\u3044\u3046\u308f\u3051\u3060\u3002\nLearn You a Haskell for Great Good\u3088\u308a\u3002\n\nList \u306e\u7d50\u5408\u304c\u9023\u7d9a\u3059\u308b\u3068\u304d\u3001\u3069\u3061\u3089\u304b\u3089\u7d50\u5408\u3055\u305b\u308b\u3088\u3046\u306b\u8a2d\u8a08\u3059\u308b\u3079\u304d\u304b\u3067\u5c11\u3005\u6df7\u4e71\u3057\u305f\u3001\u4ee5\u4e0b\u81ea\u5206\u7528\u306e\u30e1\u30e2\u3002\n\n#(++) \u95a2\u6570\nconcatenation (++)\u306f\u4e2d\u7f6e\u6f14\u7b97\u5b50\u3068\u3057\u3066\u4f7f\u308f\u308c\u308b\u3053\u3068\u3082\u591a\u304f\u3063\u3066\u3001\u305d\u306e\u969b\u306e\u5de6\u5074\u306e\u30ea\u30b9\u30c8 \u3064\u307e\u308a\u6700\u521d\u306e\u30ea\u30b9\u30c8\u3092\u8d70\u3063\u305f\u5f8c\u3001\u305d\u306e\u5f8c\u308d\u306b\u3075\u305f\u3064\u76ee\u306e\u30ea\u30b9\u30c8\u3092\u3064\u306a\u3052\u308b\u3068\u3044\u3046\u4f5c\u696d\u3092\u884c\u3046\u3001\u3089\u3057\u3044\u3002\n[\u30ea\u30b9\u30c8\u306e\u8aac\u660e\u3067\u3088\u304f\u898b\u308b\u56f3\u3001Lisp\u3067\u3082\u3088\u304f\u898b\u305f\u6c17\u304c\u3059\u308b](https://www.shido.info/hs/haskell10.html)\n\u3064\u307e\u308a\u3072\u3068\u3064\u76ee\u306e\u30ea\u30b9\u30c8\u306e\u7d42\u7aef\u8a18\u53f7\u3092\u898b\u3064\u3051\u308b\u307e\u3067\u8d70\u3063\u3066\u3001\u7d42\u7aef\u8a18\u53f7\u3092\u3075\u305f\u3064\u76ee\u306e\u30ea\u30b9\u30c8\u306e\u982d\u3092\u6307\u3059\u30dd\u30a4\u30f3\u30bf\u306b\u7f6e\u304d\u63db\u3048\u3066\u308b\u3001\u3068\u3044\u3046\u7406\u89e3\u3060\u308d\u3046\u304b\u3002\n\n\u3057\u305f\u304c\u3063\u3066Chapter 1 page 8 \u3067\u3082\u8ff0\u3079\u3066\u3044\u308b\u304c\u9023\u7d9a\u3057\u3066\u4f7f\u3046\u5834\u5408\u306f\u5de6\u304b\u3089\u65b0\u3057\u3044\u30ea\u30b9\u30c8\u3092\u4f5c\u7528\u3055\u305b\u3066\u3044\u3063\u305f\u307b\u3046\u304c\u5f97\u3067\u3042\u308b\u3001\u3068\u306e\u3053\u3068\u3002\n\u3064\u307e\u308a\u5de6\u304b\u3089\u65b0\u3057\u3044\u30ea\u30b9\u30c8\u3092\u4f5c\u7528\u3055\u305b\u3066\u3044\u3051\u3070\u3001\u3059\u3067\u306b\u3064\u306a\u3052\u3066\u3042\u308b\u30ea\u30b9\u30c8\u3092\u8d70\u308b\u5fc5\u8981\u306f\u306a\u3044\u3001\u9006\u306b\u53f3\u306b\u3064\u3051\u3066\u3044\u304f\u3068\u3059\u3067\u306b\u3064\u306a\u3052\u305f\u30ea\u30b9\u30c8\u3092\u518d\u5ea6\u8d70\u3063\u3066\u3044\u304f\u5fc5\u8981\u304c\u3042\u308b\u306e\u3067\u5927\u5909\u7121\u99c4\u3067\u3042\u308b\u3001\u3068\u3002\n\n>Be careful when repeatedly using the ++ operator on long strings. When you put together two lists, Haskell has to walk through the entire first list (the one on the left side of ++). That\u2019s not a problem when dealing with smaller lists, but appending something to the end of a list with fifty million entries is going to take a while.\n\n# gcd' \u95a2\u6570\n\u3055\u3066\u3053\u3053\u304b\u3089\u304c\u554f\u984c\u3002\n\n```gcd'.hs\ngcd' :: Int -> Int -> Writer [String] Int\ngcd' a b\n  | b == 0 = do\n      tell [\"Finished with \" ++ show a]\n      return a\n  | otherwise = do\n      tell [show a ++ \" mod \" ++ show b ++ \" = \" ++ show (a `mod` b)]\n       gcd' b (a `mod` b)\n```\n\u3053\u308c\u306f\u826f\u3044\u5b9f\u88c5\u3068\u3055\u308c\u3066\u3066\u3001\u5b9f\u884c\u7d50\u679c\u306f\u6b21\u306e\u3088\u3046\u306a\u611f\u3058\u306b\u3002\n\u3061\u306a\u307f\u306bdo \u8a18\u6cd5\u306f\u9010\u6b21\u5b9f\u884c\u306e\u518d\u767a\u660e\u3089\u3057\u3044\u3001\u3064\u307e\u308a\u624b\u7d9a\u304d\u578b\u3068\u601d\u3063\u305f\u3089\u826f\u3044\u3001\u3068\u306e\u3053\u3068\u3002\n\n```hs\n> mapM_ putStrLn $ snd $ runWriter $ gcd' 8 3\n8 mod 3 = 2\n3 mod 2 = 1\n2 mod 1 = 0\nFinished with 1\n```\n\ndo \u8a18\u6cd5\u304c\u82e6\u624b\u306a\u4eba\u306f(>>)\u3092then\u306b\u8aad\u307f\u66ff\u3048\u3066\n\n```gcd''.hs\ngcd'' :: Int -> Int -> Writer [String] Int\ngcd'' a b\n  | b == 0 = tell [\"Finished with \" ++ show a]\n             >> (return a)\n  | otherwise = tell [show a ++ \" mod \" ++ show b ++ \" = \" ++ show (a `mod` b)]\n                >> (gcd'' b (a `mod` b))\n```\n\n\u3068\u3057\u3066\u3082\u3001\u591a\u5206\u8aad\u307f\u306b\u304f\u3044\u3068\u601d\u3044\u307e\u3059\u3001\u3001\u3001\uff08do \u8a18\u6cd5\u3082\u5acc\u3044\u3067\u304b\u3064\u3053\u308c\u3082\u8aad\u307f\u306b\u304f\u3044\u3068\u306a\u308b\u3068\u3069\u3046\u3057\u305f\u3089\u826f\u3044\u306e\u304b\u3001\u3001\u3001\u307e\u3001\u307e\u305f\u3053\u308c\u306f\u5225\u306e\u554f\u984c\u3067\u3059\u304c\u3001\u3042\u308b\u3044\u306f\u6163\u308c\u306e\u554f\u984c\u3067\u3057\u3087\u3046\u3002\uff09\n\n\u8aac\u660e\u306e\u524d\u306b\u60aa\u3044\u4f8b\u306e\u5b9f\u88c5\u3092\u3070\u3002\n\n```gcdReverse.hs\ngcdReverse :: Int -> Int -> Writer [String] Int\ngcdReverse a b\n  | b == 0 = do\n      tell[\"Finished with \" ++ show a]\n      return a\n  | otherwise = do\n      result <- gcdReverse b (a `mod` b)\n      tell [show a ++ \" mod \" ++ show b ++ \" = \" ++ show (a `mod` b)]\n      return result\n```\n\n\u3053\u308c\u306f\u7d50\u679c\u3092\u9006\u9806\u306b\u8fd4\u3057\u307e\u3059\u3002\n\n```hs\n> runWriter $ gcdReverse 8 3\n(1,[\"Finished with 1\",\"2 mod 1 = 0\",\"3 mod 2 = 1\",\"8 mod 3 = 2\"])\n```\n\n#Writer Monad\u306e\u5b9f\u88c5\n\u3055\u3066\u3001\u3053\u3044\u3064\u3089\u3092\u6599\u7406\u3059\u308b\u305f\u3081\u306b\u306fWriter Monad\u304c\u3069\u3046\u5b9f\u88c5\u3055\u308c\u3066\u3044\u308b\u304b\u304c\u5fc5\u8981\u3067\u3001\u4ee5\u4e0b\u306e\u69d8\u306a\u611f\u3058\u3002\n\n```hs\ninstance (Monoid w) => Monad (Writer w) where\n    return x = Writer (x, mempty)\n    (Writer (x, v)) >>= f = let (Writer (y, v')) = f x\n                            in Writer (y, v `mappend` v')\n```\n\n\u30e2\u30ce\u30a4\u30c9\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3068\u3057\u3066\u30ea\u30b9\u30c8\u306b\u9650\u5b9a\u3057\u3066\u8003\u3048\u308c\u3070\u30bf\u30d7\u30eb\u306e2\u3064\u3081\u306e\u8981\u7d20\u306f(++)\u3067\u3064\u306a\u304c\u3063\u3066\u3044\u304f\u3068\u3044\u3046\u3053\u3068\u3067\u3042\u308b\u3001\u3057\u305f\u304c\u3063\u3066\u7d50\u5408\u3060\u3051\u8003\u3048\u308c\u3070Writer Monad\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3082\u30ea\u30b9\u30c8\u3060\u3068\u5927\u96d1\u628a\u306b\u8a00\u3063\u3066\u3044\u3044\u3068\u601d\u3046\u3002\n\uff08\u307e\u3041\u570f\u8ad6\u7684\u306b\u8a00\u3048\u3070\u81ea\u5df1\u95a2\u624b\u306e\u570f\u306e\u30e2\u30ce\u30a4\u30c9\u5bfe\u8c61\u304c\u30e2\u30ca\u30c9\u306a\u308f\u3051\u3067\u3001\u305d\u306e\u7a4d\u306f\uff08\u5f31\u3081\u3089\u308c\u3066\u3044\u306a\u3051\u308c\u3070\uff09\u30e2\u30ce\u30a4\u30c9\u3068\u4e00\u7dd2\u306a\u306e\u3067\u3064\u307e\u308b\u3068\u3053\u308d\u306e\u3068\u3053\u308d\u4e00\u7dd2\u3060\u3068\u3044\u3046\u8a71\uff09\n\n#\u826f\u3057\u60aa\u3057\n\u9006\u9806\u306b\u5410\u304d\u51fa\u3059gcdReverse\u304c\u52b9\u7387\u304c\u60aa\u305d\u3046\u306a\u5b9f\u88c5\u3067\u3042\u308b\u3001\u3068\u3044\u3046\u306e\u306f\u306a\u3093\u3068\u306a\u304f\u76f4\u89b3\u7684\u306b\u611f\u3058\u308b\u306e\u3067\u89e3\u6790\u3057\u3066\u307f\u3088\u3046\u3001\u3064\u307e\u308a\u306f\u30ea\u30b9\u30c8\u3068\u898b\u305f\u6642\u306b\u4f55\u5ea6\u3082\u540c\u3058\u8981\u7d20\u306e\u4e0a\u3092\u8d70\u3063\u3066\u3057\u307e\u3063\u3066\u3044\u308b\u306e\u3060\u3068\u3044\u3046\u3053\u3068\u3092\u793a\u3057\u305f\u3044\u308f\u3051\u3060\u3002\n\u3069\u3061\u3089\u306e\u5b9f\u88c5\u3082tell \u304c\u5410\u304d\u51fa\u3057\u305f\u30ea\u30b9\u30c8\u3092\u3069\u3046\u7d50\u5408\u3059\u308b\u304b\u3068\u3044\u3046\u3068\u3053\u308d\u304c\u9055\u3046\u306e\u3060\u308d\u3046\u3068\u3042\u305f\u308a\u3092\u3064\u3051\u3066\u307f\u308b\u3001\u3055\u3066gcdReverse \u306b\u3064\u3044\u3066\u306f\n\n>It does the recursion first and binds its resulting value to result. Then it adds the current step to the log, but the current step goes at the end of the log that was produced by the recursion. At the end, it presents the result of the recursion as the final result.\n\n\u3068\u304a\u3063\u3057\u3083\u3063\u3066\u308b\u3001\u305d\u308c\u304b\u3089\u5bdf\u3059\u308b\u306bgcd'\u306ftell\u304c\u5410\u3044\u305f\u30ea\u30b9\u30c8\u3092\n\n```hs\nc++(b++a)\n```\n\n\u3068\u7d50\u5408\u3057\u3066\u3044\u3066\u3001\u9006\u306bgcdReverse\u306f\n\n```hs\n(c++b)++a\n```\n\n\u3068\u7d50\u5408\u3057\u3066\u3044\u308b\u306e\u3060\u308d\u3046\u3068\u8e0f\u3093\u3060\u3001\u3042\u3068\u306f\u78ba\u8a8d\u3057\u3066\u307f\u308b\u3060\u3051\u3067\u3042\u308b\u3002\n\n#\u78ba\u8a8d\n\n```gcd'.hs\ngcd' :: Int -> Int -> Writer [String] Int\ngcd' a b\n  | b == 0 = do\n      tell [\"Finished with \" ++ show a]\n      return a\n  | otherwise = do\n      tell [show a ++ \" mod \" ++ show b ++ \" = \" ++ show (a `mod` b)]\n       gcd' b (a `mod` b)\n```\n\n\u306a\u306e\u3067tell \u3067\u4f5c\u3089\u308c\u305f\u6587\u5b57\u5217\u30ea\u30b9\u30c8\u306fWriter [String] \u306emappend\u306b\u3088\u3063\u3066\n\n```hs\n[\"8 mod 3 = 2\"] ++ ([\"3 mod 2 = 1\"] ++ ([\"2 mod 1 = 0\"] ++ [\"Finished with 1\"]))\n```\n\n\u3068\u7e4b\u304c\u308b\u3068\u3001\u307e\u3041\u305d\u3046\u3067\u3057\u3087\u3046\u3088\u3001\u3067\u306f\u6b21\u3002\n\n```gcdReverse.hs\ngcdReverse :: Int -> Int -> Writer [String] Int\ngcdReverse a b\n  | b == 0 = do\n      tell[\"Finished with \" ++ show a]\n      return a\n  | otherwise = do\n      result <- gcdReverse b (a `mod` b)\n      tell [show a ++ \" mod \" ++ show b ++ \" = \" ++ show (a `mod` b)]\n      return result\n```\n\n\u4eca\u5ea6\u306f\n\n>This function is inefficient because it ends up associating the use of ++ to the left instead of to the right.\n\n\u3068\u304a\u3063\u3057\u3083\u3066\u308b\u306e\u3067\u3055\u3066\u898b\u3066\u307f\u3088\u3046\u3002\n\n\u307e\u305a\u306fb==0 \u306b\u30d2\u30c3\u30c8\u3057\u306a\u3044\u306e\u3067result \u306b\u81ea\u5df1\u518d\u8d77\u547c\u3073\u51fa\u3057\u304c\u675f\u7e1b\u3055\u308c\u308b\u3002\n\u305d\u306e\u306e\u3061tell \u304c\u6587\u5b57\u5217\u3092\u5410\u3044\u3066\u3001\u6700\u5f8c\u306breturn \u3067result \u306e\u4e2d\u8eab\u304cWriter Monad\u306e\u5024\u306b\u30e9\u30c3\u30d7\u3055\u308c\u308b\u3001\u3068\u3002\n\n\u3042\u308b\u3044\u306fdesugar \u3057\u305fgcdReverse' \u3092\u307f\u308b\u3068\u3082\u3063\u3068\u306f\u3063\u304d\u308a\u5206\u304b\u308b\u304b\u3082\u3057\u308c\u306a\u3044\uff1a\n\n```gcdReverse'.hs\ngcdReverse' :: Int -> Int -> Writer [String] Int\ngcdReverse' a b\n  | b == 0 = tell[\"Finished with \" ++ show a]\n             >> return a\n  | otherwise = gcdReverse b (a `mod` b)\n                >>= (\\result -> tell [show a ++ \" mod \" ++ show b ++ \" = \" ++ show (    a `mod` b)]\n                >> return result)\n```\n\n\u3057\u305f\u304c\u3063\u3066\n\n```hs\n[recursion] ++ \"8 mod 3 = 2\" \n```\n\n\u3068\u3044\u3046\u98a8\u306b\u518d\u5e30\u7684\u306b\u81ea\u5206\u3092\u547c\u3073\u51fa\u3057\u3066\u3044\u308b\u3001\u3059\u306a\u308f\u3061\n\n```hs\n((\"Finished with 1\" ++ \"2 mod 1 = 0\") ++ \"3 mod 2 = 1\") ++ \"8 mod 3 = 2\"\n```\n\n\u304a\u3049\u3001\u306a\u308b\u307b\u3069\u3001\u3053\u308a\u3083\u78ba\u304b\u306b\u6bce\u5ea6\u6bce\u5ea6\u540c\u3058\u30ea\u30b9\u30c8\u306e\u4e0a\u3092\u8d70\u3063\u3066\u672b\u7aef\u3092\u63a2\u3059\u4f5c\u696d\u3092\u3057\u3066\u3044\u308b\u304b\u3089\u52b9\u7387\u60aa\u3044\u308f\u3051\u3060\u308f\u3002\n\n#\u7d50\u8ad6\n\n>This function is inefficient because it ends up associating the use of ++ to the left instead of to the right.\n\n\u3068\u30b7\u30f3\u30d7\u30eb\u306b\u304a\u3063\u3057\u3083\u3063\u3066\u3044\u308b\u3053\u3068\u304c\u6700\u521d\u3055\u3063\u3071\u308a\u308f\u304b\u3089\u306a\u304b\u3063\u305f\u304c\u3053\u3046\u3084\u3063\u3066\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u306b\u305d\u3063\u3066\u7c21\u5358\u306a\u4f8b\u3092\u8ffd\u3063\u304b\u3051\u3066\u307f\u305f\u3089\u3088\u304f\u308f\u304b\u308a\u307e\u3057\u305f\u3002\n\n#\u8ffd\u8a18\uff08\u5dee\u5206\u30ea\u30b9\u30c8\uff09\n\u305d\u306e\u76f4\u5f8cpage 307 \u3067\u65b0\u3057\u3044\u30c7\u30fc\u30bf\u69cb\u9020\u3092\u5c0e\u5165\u3057\u3066\u30d1\u30d5\u30a9\u30fc\u30de\u30f3\u30b9\u306e\u6539\u5584\u3092\u56f3\u3063\u3066\u3044\u308b\u3002\n\n```DiffList.hs\nnewtype DiffList a = DiffList { getDiffList :: [a] -> [a]}\n\ntoDiffList :: [a] -> DiffList a\ntoDiffList xs = DiffList (xs ++)\nfromDiffList :: DiffList a -> [a]\nfromDiffList (DiffList f) = f []\n```\n\n\u3053\u306e\u5dee\u5206\u30ea\u30b9\u30c8\u3092\u7528\u3044\u308b\u3068\u30ea\u30b9\u30c8\u306e\u7d50\u5408\u306f\u305f\u3060\u306e\u95a2\u6570\u306e\u7a4d\u306b\u306a\u308b\n\n```hs\nf `append` g = \\xs -> f (g xs)\n```\n\n\u3042\u308b\u3044\u306f\u3088\u308a\u5177\u4f53\u7684\u306b\"dog\" \u3068 \"meat\"\u304c\n\n```hs\n\n(\"dog\" ++) `append` (\"meat\" ++) = \\xs -> \"dog\" ++ (\"meat\" ++ xs)\n```\n\n\u3068\u306a\u308a\u3001\u30ea\u30b9\u30c8\u306e\u7d50\u5408\u304c\u9010\u6b21\u6539\u5584\u3055\u308c\u308b\u3089\u3057\u3044\u3001\u898b\u3066\u307f\u308b\u3002\n\u307e\u305a\u306f\u56f0\u3063\u305f\u3061\u3083\u3093\u3092\u7528\u610f\uff1a\n\n```hs\n(\"cat\" ++ \"fish\") ++ \"burger\"\n```\n\n\u3053\u308c\u304ctoDiffList\u306b\u3088\u3063\u3066\u5dee\u5206\u30ea\u30b9\u30c8\u306b\u5316\u3051\u3066\u308b\u3001\u3064\u307e\u308a\n\n```hs\n(\\xs -> \"cat\" + xs) `append` (\\ys -> \"fish\" ++ ys)\n= \\xs -> \"cat\" ++ (\"fish\" ++ xs)\n```\n\n\u3057\u305f\u304c\u3063\u3066\u5168\u4f53\u3067\u306f\n\n```hs\n(\\xs -> \"cat\" ++ (\"fish\" ++ xs)) `append` (\\zs -> \"burger\" ++ zs)\n=\\xs -> \"cat\" ++ (\"fish\" ++ (\"burger\" ++ xs)\n```\n\n\u3068\u306a\u308b\u3001\u3059\u306a\u308f\u3061\n\n```hs\n(a ++ b) ++ c => a' ++ (b' ++ c')\n```\n\n\u3068\u306a\u3063\u305f\u3068\u3044\u3046\u3053\u3068\u3067\u3042\u308b\u3001\u3057\u305f\u304c\u3063\u3066\u30ea\u30b9\u30c8\u306e\u7d50\u5408\u306e\u969b\u306e\u30d1\u30d5\u30a9\u30fc\u30de\u30f3\u30b9\u304c\u4e0a\u304c\u308b\u3068\u3044\u3046\u308f\u3051\u3060\u3002\n", "tags": ["Haskell", "Monad", "list"]}