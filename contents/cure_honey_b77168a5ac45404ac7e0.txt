{"context": " More than 1 year has passed since last update.\n\u7a7a\u524d\u306e\u30b7\u30c0\u63cf\u753b\u30d6\u30fc\u30e0\u5230\u6765\uff01\uff1f(^^;)\n\u3042\u306a\u305f\u3082\u5f97\u610f\u306a\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u8a00\u8a9e\u3067\u30b7\u30c0\u3092\u63cf\u753b\u3057\u3066\u307f\u3088\u3046\uff01\n\n\u51fa\u9045\u308c\u3066\u307e\u3059\u304c\u3001\u590f\u4f11\u307f\u3068\u3044\u3046\u3053\u3068\u3067\u3002\nFortran \u306f\u7d75\u304c\u82e6\u624b\u306a\u306e\u3067\u3001BMP \u30d5\u30a1\u30a4\u30eb\u3092\u751f\u6210\u3057\u3066\u66f8\u304d\u8fbc\u3080\u3053\u3068\u306b\u3057\u307e\u3059\u3002\u5229\u70b9\u306f\u30e9\u30a4\u30d6\u30e9\u30ea\u306b\u983c\u3089\u305a\u3001\u5168\u90e8\u81ea\u524d\u3067\u66f8\u3051\u308b\u3053\u3068\u3067\u3059\u3002\n\n\u5b9f\u884c\u7d50\u679c\n\nBMP \u306f MS-Paint \u3067 jpg \u306b\u76f4\u3057\u3066\u304b\u3089 upload \u3057\u307e\u3057\u305f\u3002\n\n\u30bd\u30fc\u30b9\u30d7\u30ed\u30b0\u30e9\u30e0\n\u6ce8\u610f\uff01RGB \u306e \u8d64\u3068\u9752\u304c\u9006\u8ee2\u3057\u3066\u3044\u305f\u306e\u3067\u4fee\u6b63\u3057\u307e\u3057\u305f\u3002(H26.8.20)\n    module m_bmp\n      implicit none\n      type :: t_bmp_file_header\n        sequence  \n        integer(2) :: bfType = transfer('BM', 0_2, 1) ! BitMap\n        integer(4) :: bfSize          ! file size in bytes\n        integer(2) :: bfReserved1 = 0 ! always 0\n        integer(2) :: bfReserved2 = 0 ! always 0\n        integer(4) :: bfOffBits\n      end type t_bmp_file_header\n      !\n      type :: t_bmp_info_header\n        sequence\n        integer(4) :: biSize     = Z'28' ! size of bmp_info_header ; 40bytes \n        integer(4) :: biWidth\n        integer(4) :: biHeight\n        integer(2) :: biPlanes   = 1 ! always 1\n        integer(2) :: biBitCount\n        integer(4) :: biCompression = 0 !0:nocompression,1:8bitRLE,2:4bitRLE,3:bitfield\n        integer(4) :: biSizeImage\n        integer(4) :: biXPelsPerMeter = 3780 ! 96dpi\n        integer(4) :: biYPelsPerMeter = 3780 ! 96dpi \n        integer(4) :: biClrUsed      = 0\n        integer(4) :: biClrImportant = 0 \n      end type t_bmp_info_header\n      !\n      type :: t_rgb\n        sequence\n        character :: b, g, r\n      end type t_rgb \n      type :: t_bmp\n        type(t_rgb), allocatable :: rgb(:, :)\n      contains \n        procedure :: wr => wr_bmp\n      end type  \n    contains   \n      subroutine wr_bmp(bmp, fn)\n        class(t_bmp), intent(in) :: bmp\n        character(len = *), intent(in) :: fn\n        type(t_bmp_file_header) :: bmp_file_header\n        type(t_bmp_info_header) :: bmp_info_header\n        associate(nx => size(bmp%rgb, 1), ny => size(bmp%rgb, 2))\n          bmp_file_header%bfSize      = 14 + 40 + 0 + nx * ny * 3\n          bmp_file_header%bfOffBits   = 14 + 40\n          bmp_info_header%biWidth     = nx\n          bmp_info_header%biHeight    = ny\n          bmp_info_header%biBitCount  = 24 \n          bmp_info_header%biSizeImage = nx * ny * 3\n        end associate\n        open(9, file = fn//'.bmp', form = 'binary', status = 'unknown')\n        write(9) bmp_file_header\n        write(9) bmp_info_header\n        write(9) bmp%rgb\n        close(9)\n        return\n      end subroutine wr_bmp  \n    end module m_bmp\n\n    program fern\n      use m_bmp\n      implicit none\n      integer, parameter :: n = 20, nx_shida = 500, ny_shida = 500\n      type(t_bmp) :: shida\n!\n!  define statement functions\n!      \n      real :: w1x, w1y, w2x, w2y, w3x, w3y, w4x, w4y, x, y\n      w1x(x, y) =  0.836 * x + 0.044 * y\n      w1y(x, y) = -0.044 * x + 0.836 * y + 0.169\n      w2x(x, y) = -0.141 * x + 0.302 * y\n      w2y(x, y) =  0.302 * x + 0.141 * y + 0.127\n      w3x(x, y) =  0.141 * x - 0.302 * y\n      w3y(x, y) =  0.302 * x + 0.141 * y + 0.169\n      w4x(x, y) =  0.0\n      w4y(x, y) =              0.175337 * y\n!\n      call random_seed()\n      allocate(shida%rgb(nx_shida, ny_shida))\n      call f(n, 0.0, 0.0) \n      call shida%wr('shida')\n      stop\n    contains\n      subroutine point(x, y)\n        real, intent(in) :: x, y\n        shida%rgb(nint(x), nint(y) + 1) = t_rgb(achar(0), achar(255), achar(0))\n      end subroutine point  \n\n      recursive subroutine f(k, x, y)\n        integer, intent(in) :: k\n        real, intent(in) :: x, y\n        real :: r\n        if (k > 0) then\n          call f(k - 1, w1x(x, y), w1y(x, y))\n          call random_number(r)\n          if (r < 0.3) call f(k - 1, w2x(x, y), w2y(x, y)) \n          call random_number(r)\n          if (r < 0.3) call f(k - 1, w3x(x, y), w3y(x, y)) \n          call random_number(r)\n          if (r < 0.3) call f(k - 1, w4x(x, y), w4y(x, y)) \n        else\n          call point(x * nx_shida * 0.98 + 0.5 * nx_shida, y * ny_shida * 0.98)\n        end if    \n      end subroutine f\n    end program fern\n\nbmp \u5f62\u5f0f\u306f y \u8ef8\u306e\u5411\u304d\u304c\u666e\u901a\u3068\u4e0a\u4e0b\u9006\u306b\u306a\u3063\u3066\u3044\u308b\u306e\u3067\u3001\u9069\u5b9c\u4fee\u6b63\u3057\u3066\u3042\u308a\u307e\u3059\u3002\u3057\u304b\u3057\u3001\u305d\u306e\u526f\u4f5c\u7528\u3067\u5024\uff10\u304c\u51fa\u3066\u914d\u5217\u3092\u306f\u307f\u51fa\u3059\u306e\u3067\uff11\u30c9\u30c3\u30c8\u5206\u305a\u3089\u3057\u3066\u3042\u308a\u307e\u3059\u3002\n\u5ec3\u6b62\u4e88\u5b9a\u9805\u76ee\u3067\u3059\u304c\u6587\u95a2\u6570\u3082\u4f7f\u3063\u3066\u307f\u307e\u3057\u305f\u3002\n>\u7a7a\u524d\u306e\u30b7\u30c0\u63cf\u753b\u30d6\u30fc\u30e0\u5230\u6765\uff01\uff1f(^^;)\n>\u3042\u306a\u305f\u3082\u5f97\u610f\u306a\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u8a00\u8a9e\u3067\u30b7\u30c0\u3092\u63cf\u753b\u3057\u3066\u307f\u3088\u3046\uff01\n\n\u51fa\u9045\u308c\u3066\u307e\u3059\u304c\u3001\u590f\u4f11\u307f\u3068\u3044\u3046\u3053\u3068\u3067\u3002\n\nFortran \u306f\u7d75\u304c\u82e6\u624b\u306a\u306e\u3067\u3001BMP \u30d5\u30a1\u30a4\u30eb\u3092\u751f\u6210\u3057\u3066\u66f8\u304d\u8fbc\u3080\u3053\u3068\u306b\u3057\u307e\u3059\u3002\u5229\u70b9\u306f\u30e9\u30a4\u30d6\u30e9\u30ea\u306b\u983c\u3089\u305a\u3001\u5168\u90e8\u81ea\u524d\u3067\u66f8\u3051\u308b\u3053\u3068\u3067\u3059\u3002\n###\u5b9f\u884c\u7d50\u679c\n![shida.jpg](https://qiita-image-store.s3.amazonaws.com/0/44522/9383cd31-a9c5-3ec1-a602-955d8003b815.jpeg)\nBMP \u306f MS-Paint \u3067 jpg \u306b\u76f4\u3057\u3066\u304b\u3089 upload \u3057\u307e\u3057\u305f\u3002\n\n###\u30bd\u30fc\u30b9\u30d7\u30ed\u30b0\u30e9\u30e0\n\u6ce8\u610f\uff01RGB \u306e \u8d64\u3068\u9752\u304c\u9006\u8ee2\u3057\u3066\u3044\u305f\u306e\u3067\u4fee\u6b63\u3057\u307e\u3057\u305f\u3002(H26.8.20)\n\n```fortran\n    module m_bmp\n      implicit none\n      type :: t_bmp_file_header\n        sequence  \n        integer(2) :: bfType = transfer('BM', 0_2, 1) ! BitMap\n        integer(4) :: bfSize          ! file size in bytes\n        integer(2) :: bfReserved1 = 0 ! always 0\n        integer(2) :: bfReserved2 = 0 ! always 0\n        integer(4) :: bfOffBits\n      end type t_bmp_file_header\n      !\n      type :: t_bmp_info_header\n        sequence\n        integer(4) :: biSize     = Z'28' ! size of bmp_info_header ; 40bytes \n        integer(4) :: biWidth\n        integer(4) :: biHeight\n        integer(2) :: biPlanes   = 1 ! always 1\n        integer(2) :: biBitCount\n        integer(4) :: biCompression = 0 !0:nocompression,1:8bitRLE,2:4bitRLE,3:bitfield\n        integer(4) :: biSizeImage\n        integer(4) :: biXPelsPerMeter = 3780 ! 96dpi\n        integer(4) :: biYPelsPerMeter = 3780 ! 96dpi \n        integer(4) :: biClrUsed      = 0\n        integer(4) :: biClrImportant = 0 \n      end type t_bmp_info_header\n      !\n      type :: t_rgb\n        sequence\n        character :: b, g, r\n      end type t_rgb \n      type :: t_bmp\n        type(t_rgb), allocatable :: rgb(:, :)\n      contains \n        procedure :: wr => wr_bmp\n      end type  \n    contains   \n      subroutine wr_bmp(bmp, fn)\n        class(t_bmp), intent(in) :: bmp\n        character(len = *), intent(in) :: fn\n        type(t_bmp_file_header) :: bmp_file_header\n        type(t_bmp_info_header) :: bmp_info_header\n        associate(nx => size(bmp%rgb, 1), ny => size(bmp%rgb, 2))\n          bmp_file_header%bfSize      = 14 + 40 + 0 + nx * ny * 3\n          bmp_file_header%bfOffBits   = 14 + 40\n          bmp_info_header%biWidth     = nx\n          bmp_info_header%biHeight    = ny\n          bmp_info_header%biBitCount  = 24 \n          bmp_info_header%biSizeImage = nx * ny * 3\n        end associate\n        open(9, file = fn//'.bmp', form = 'binary', status = 'unknown')\n        write(9) bmp_file_header\n        write(9) bmp_info_header\n        write(9) bmp%rgb\n        close(9)\n        return\n      end subroutine wr_bmp  \n    end module m_bmp\n```\n\n```fortran\n    program fern\n      use m_bmp\n      implicit none\n      integer, parameter :: n = 20, nx_shida = 500, ny_shida = 500\n      type(t_bmp) :: shida\n!\n!  define statement functions\n!      \n      real :: w1x, w1y, w2x, w2y, w3x, w3y, w4x, w4y, x, y\n      w1x(x, y) =  0.836 * x + 0.044 * y\n      w1y(x, y) = -0.044 * x + 0.836 * y + 0.169\n      w2x(x, y) = -0.141 * x + 0.302 * y\n      w2y(x, y) =  0.302 * x + 0.141 * y + 0.127\n      w3x(x, y) =  0.141 * x - 0.302 * y\n      w3y(x, y) =  0.302 * x + 0.141 * y + 0.169\n      w4x(x, y) =  0.0\n      w4y(x, y) =              0.175337 * y\n!\n      call random_seed()\n      allocate(shida%rgb(nx_shida, ny_shida))\n      call f(n, 0.0, 0.0) \n      call shida%wr('shida')\n      stop\n    contains\n      subroutine point(x, y)\n        real, intent(in) :: x, y\n        shida%rgb(nint(x), nint(y) + 1) = t_rgb(achar(0), achar(255), achar(0))\n      end subroutine point  \n    \n      recursive subroutine f(k, x, y)\n        integer, intent(in) :: k\n        real, intent(in) :: x, y\n        real :: r\n        if (k > 0) then\n          call f(k - 1, w1x(x, y), w1y(x, y))\n          call random_number(r)\n          if (r < 0.3) call f(k - 1, w2x(x, y), w2y(x, y)) \n          call random_number(r)\n          if (r < 0.3) call f(k - 1, w3x(x, y), w3y(x, y)) \n          call random_number(r)\n          if (r < 0.3) call f(k - 1, w4x(x, y), w4y(x, y)) \n        else\n          call point(x * nx_shida * 0.98 + 0.5 * nx_shida, y * ny_shida * 0.98)\n        end if    \n      end subroutine f\n    end program fern\n```\nbmp \u5f62\u5f0f\u306f y \u8ef8\u306e\u5411\u304d\u304c\u666e\u901a\u3068\u4e0a\u4e0b\u9006\u306b\u306a\u3063\u3066\u3044\u308b\u306e\u3067\u3001\u9069\u5b9c\u4fee\u6b63\u3057\u3066\u3042\u308a\u307e\u3059\u3002\u3057\u304b\u3057\u3001\u305d\u306e\u526f\u4f5c\u7528\u3067\u5024\uff10\u304c\u51fa\u3066\u914d\u5217\u3092\u306f\u307f\u51fa\u3059\u306e\u3067\uff11\u30c9\u30c3\u30c8\u5206\u305a\u3089\u3057\u3066\u3042\u308a\u307e\u3059\u3002\n\n\u5ec3\u6b62\u4e88\u5b9a\u9805\u76ee\u3067\u3059\u304c\u6587\u95a2\u6570\u3082\u4f7f\u3063\u3066\u307f\u307e\u3057\u305f\u3002\n", "tags": ["Fortran2003", "\u30b7\u30c0"]}