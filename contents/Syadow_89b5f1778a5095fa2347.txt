{"context": " More than 1 year has passed since last update.\u30b0\u30b0\u3063\u3066\u3082\u82f1\u8a9e\u8a18\u4e8b\u304c\u591a\u304f\u3066\u9762\u5012\u306a\u306e\u3067\u3001\u89e3\u6c7a\u3057\u305f\u3089\u30e1\u30e2\u3092\u66f8\u3044\u3066\u3044\u304f\u3053\u3068\u306b\u3057\u307e\u3059\u3002\n\u3042\u3068Qiita\u306e\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u306e\u66f8\u304d\u65b9\u3088\u304f\u308f\u304b\u3093\u306a\u3044\u306e\u3067\u9069\u5f53\u306b\u66f8\u304f\u3002\n\nJson.format[A]\u306b\u3001\u30d5\u30a3\u30fc\u30eb\u30c9\u304c1\u3064\u3067\u305d\u308c\u304c\u30b3\u30ec\u30af\u30b7\u30e7\u30f3\u306ecase class\u3092\u6e21\u3059\u3068\u6012\u3089\u308c\u308b\u3002\n\ntoJson.scala\n  case class Hoge(fuga:Option[Int], piyo:String)\n  implicit val format = Json.format[Hoge]\n\n\n\u3068\u304b\u3060\u3068\u554f\u984c\u306a\u304f\u52d5\u304f\u306e\u3060\u3051\u3069\u3001\n\ntoJson.scala\n  case class Hoge(fuga:Option[Int])\n  implicit val format = Json.format[Hoge]\n\n\n\u3068\u304b\u66f8\u3044\u3061\u3083\u3046\u3068\u3001Json.format[A]\u306bcase class\u3092\u6307\u5b9a\u3059\u308b\u6642\u306b\u3001No apply function found matching unapply parameters\u3000\u3068\u6012\u3089\u308c\u3066\u3057\u307e\u3046\u3002\nhttp://play.lighthouseapp.com/projects/82401/tickets/918-play-21-json-issues\n\u306b\u66f8\u3044\u3066\u3042\u308b\u901a\u308a\u3001\n\ntoJson.scala\n case class A(value: List[Int])\n\n  val areads = (__ \\ 'value).read[List[Int]].map{ l => A(l) } // covariant map\n\n  val awrites = (__ \\ 'value).write[List[Int]].contramap{ a: A => a.value } // contravariant map\n\n  val aformat = (__ \\ 'value).format[List[Int]].inmap(  (l: List[Int]) => A(l), (a: A) => a.value ) // invariant = both    covariant and contravariant\n\n\n\u3068\u304b\u66f8\u3051\u3070\u52d5\u304f\u307f\u305f\u3044\u306a\u3093\u3060\u3051\u3069\u3001\u8a18\u53f7\u304c\u62d2\u5426\u53cd\u5fdc\u3092\u8d77\u3053\u3057\u3066\u3057\u307e\u3046\u4eba\u306f\u3001\u4e0b\u306e\u65b9\u306b\u66f8\u3044\u3066\u3042\u308b\u3084\u308a\u65b9\u3067\u3001\n\ntoJson.scala\n  object MyTypes {\n   type DataPoints = Option[Int]\n  }\n  case class Hoge(fuga: MyTypes.DataPoints)\n  implicit val format = Json.format[Hoge]\n\n\n\u3068\u304b\u66f8\u304f\u3068\u6012\u3089\u308c\u306a\u304f\u306a\u308b\u3002\n\u30b0\u30b0\u3063\u3066\u3082\u82f1\u8a9e\u8a18\u4e8b\u304c\u591a\u304f\u3066\u9762\u5012\u306a\u306e\u3067\u3001\u89e3\u6c7a\u3057\u305f\u3089\u30e1\u30e2\u3092\u66f8\u3044\u3066\u3044\u304f\u3053\u3068\u306b\u3057\u307e\u3059\u3002\n\u3042\u3068Qiita\u306e\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u306e\u66f8\u304d\u65b9\u3088\u304f\u308f\u304b\u3093\u306a\u3044\u306e\u3067\u9069\u5f53\u306b\u66f8\u304f\u3002\n\n## Json.format[A]\u306b\u3001\u30d5\u30a3\u30fc\u30eb\u30c9\u304c1\u3064\u3067\u305d\u308c\u304c\u30b3\u30ec\u30af\u30b7\u30e7\u30f3\u306ecase class\u3092\u6e21\u3059\u3068\u6012\u3089\u308c\u308b\u3002\n\n```scala:toJson.scala\n  case class Hoge(fuga:Option[Int], piyo:String)\n  implicit val format = Json.format[Hoge]\n```\n\n\u3068\u304b\u3060\u3068\u554f\u984c\u306a\u304f\u52d5\u304f\u306e\u3060\u3051\u3069\u3001\n\n```scala:toJson.scala\n  case class Hoge(fuga:Option[Int])\n  implicit val format = Json.format[Hoge]\n```\n\n\u3068\u304b\u66f8\u3044\u3061\u3083\u3046\u3068\u3001Json.format[A]\u306bcase class\u3092\u6307\u5b9a\u3059\u308b\u6642\u306b\u3001No apply function found matching unapply parameters\u3000\u3068\u6012\u3089\u308c\u3066\u3057\u307e\u3046\u3002\n\nhttp://play.lighthouseapp.com/projects/82401/tickets/918-play-21-json-issues\n\n\u306b\u66f8\u3044\u3066\u3042\u308b\u901a\u308a\u3001\n\n```scala:toJson.scala\n case class A(value: List[Int])\n\n  val areads = (__ \\ 'value).read[List[Int]].map{ l => A(l) } // covariant map\n\n  val awrites = (__ \\ 'value).write[List[Int]].contramap{ a: A => a.value } // contravariant map\n\n  val aformat = (__ \\ 'value).format[List[Int]].inmap(  (l: List[Int]) => A(l), (a: A) => a.value ) // invariant = both    covariant and contravariant\n```\n\n\u3068\u304b\u66f8\u3051\u3070\u52d5\u304f\u307f\u305f\u3044\u306a\u3093\u3060\u3051\u3069\u3001\u8a18\u53f7\u304c\u62d2\u5426\u53cd\u5fdc\u3092\u8d77\u3053\u3057\u3066\u3057\u307e\u3046\u4eba\u306f\u3001\u4e0b\u306e\u65b9\u306b\u66f8\u3044\u3066\u3042\u308b\u3084\u308a\u65b9\u3067\u3001\n\n```scala:toJson.scala\n  object MyTypes {\n   type DataPoints = Option[Int]\n  }\n  case class Hoge(fuga: MyTypes.DataPoints)\n  implicit val format = Json.format[Hoge]\n```\n\n\u3068\u304b\u66f8\u304f\u3068\u6012\u3089\u308c\u306a\u304f\u306a\u308b\u3002", "tags": ["PlayFramework2.1.0"]}