{"context": " More than 1 year has passed since last update.\n\n\u3084\u308a\u305f\u3044\u3053\u3068\nSpring JPA\u3092\u4f7f\u3063\u3066Master-Slave\u69cb\u6210\u306e\u6642\u306bSELECT\u306fSlave,\u305d\u306e\u4ed6\u306fMaster\u30b5\u30fc\u30d0\u3078\u30a2\u30af\u30bb\u30b9\u3059\u308b\n\n\u30df\u30c9\u30eb\u30a6\u30a7\u30a2,\u30d5\u30ec\u30fc\u30e0\u30ef\u30fc\u30af\n\nReplicationDriver\nMySQL 5.6\nSpring 3.2.8\nhibernate\n\n\n\u30c6\u30b9\u30c8\u306e\u69cb\u6210\n\nCustomer.java \u30a8\u30f3\u30c6\u30a3\u30c6\u30a3\u30af\u30e9\u30b9\nCustomerRepository.java JpaRepository\u3092\u7d99\u627f\u3057\u305f\u30af\u30e9\u30b9. find\u306a\u3069\u3092\u884c\u3044\u307e\u3059\nCustomerService.java CustomerRepository\u3092\u547c\u3073\u51fa\u3057\u307e\u3059\nTest\u30af\u30e9\u30b9 CustomerService\u3092\u547c\u3073\u51fa\u3057\u307e\u3059\n\n\u30b3\u30fc\u30c9\u306f\u4e0b\u8a18\u306b\nhttps://github.com/hachi-eiji/spring-jpa-practice/\n\n\u5b9f\u73fe\u65b9\u6cd5\nReplicationDriver\u306fautoCommit=false, readOnly=true\u306e\u3068\u304d\u306bselect\u3092\u767a\u884c\u3059\u308b\u3068slave\u3078\u30a2\u30af\u30bb\u30b9\u3057\u307e\u3059\n\u3088\u3063\u3066\u3001find\u51e6\u7406\u3092\u5b9f\u884c\u3059\u308b\u524d\u306b\u30a4\u30f3\u30bf\u30fc\u30bb\u30d7\u30bf\u30fc\u3067\u8a2d\u5b9a\u3092\u884c\u3044\u307e\u3059\n(autoCommit=true\u3067\u3082\u52d5\u304d\u307e\u3057\u305f\u3002\u3053\u3053\u3092false\u306b\u3059\u308b\u7406\u7531\u3092\u3054\u5b58\u3058\u306e\u65b9\u306f\u6559\u3048\u3066\u304f\u3060\u3055\u3044)\n\u307e\u305f\u3001CustomerService.java\u306e\u30e1\u30bd\u30c3\u30c9\u3067 @Transactional \u3092\u3064\u3051\u307e\u3059\n\u3064\u3051\u306a\u3044\u5834\u5408\u306f\u4e0b\u8a18\u306e\u30a8\u30e9\u30fc\u304c\u767a\u751f\u3057\u307e\u3059\u3002\u3053\u308c\u306f\u30a4\u30f3\u30bf\u30fc\u30bb\u30d7\u30bf\u30fc\u306e\u4e2d\u3067 entityManager.unwrap(SessionImpl.class); \u3092\u4f7f\u3046\u3068\u304d\u306f\u30c8\u30e9\u30f3\u30b6\u30af\u30b7\u30e7\u30f3\u304c\u5fc5\u9808\u3060\u304b\u3089\u3067\u3059\u3002\n-> PersistenceContext\u30a2\u30ce\u30c6\u30fc\u30b7\u30e7\u30f3\u304cEXTENDED\u306e\u6642\u306f @Transactinal\u306f\u306a\u304f\u3066\u3082\u3044\u3051\u307e\u3057\u305f\njava.lang.IllegalStateException: No transactional EntityManager available\nat org.springframework.orm.jpa.SharedEntityManagerCreator\n$SharedEntityManagerInvocationHandler.invoke(SharedEntityManagerCreator.java:224)\n\n\n\u6700\u5f8c\u306b\n\u5b9f\u969b\u306b\u7d44\u307f\u8fbc\u3080\u3068\u304d\u306f\u3001\u30a8\u30f3\u30c6\u30a3\u30c6\u30a3\u30af\u30e9\u30b9\u306b\u30de\u30fc\u30ab\u30fc\u30a2\u30ce\u30c6\u30fc\u30b7\u30e7\u30f3\u3092\u3064\u3051\u305f\u307b\u3046\u304c\u3001\u304a\u305d\u3089\u304f\u52b9\u7387\u306f\u3044\u3044\u306f\u305a\u3067\u3059\u3002\n\n\u53c2\u8003\u8cc7\u6599\nReplicationDriver\nMySQL Master/Slave Load Balancing with JPA and Spring\n\n\u30b3\u30fc\u30c9\nhttps://github.com/hachi-eiji/spring-jpa-practice/\n\n\u30a4\u30f3\u30bf\u30fc\u30bb\u30d7\u30bf\u30fc\u306e\u30b3\u30fc\u30c9\n@Aspect\n@Component\npublic class SlaveConnectionInterceptor {\n    private static final Logger LOGGER = LoggerFactory.getLogger(SlaveConnectionInterceptor.class);\n\n    private EntityManager entityManager;\n\n    @PersistenceContext\n    public void setEntityManager(EntityManager entityManager) {\n        this.entityManager = entityManager;\n    }\n\n    @Around(\"execution(public * com.hachiyae.jpa..*.find*(..)) || execution(public * com.hachiyae.jpa..*.count*(..))\")\n    public Object proceed(ProceedingJoinPoint pjp) throws Throwable {\n        LOGGER.info(\"call SlaveConnectionInterceptor from {}\", pjp.getSignature().toShortString());\n        SessionImpl session = entityManager.unwrap(SessionImpl.class);\n        Connection connection = session.connection();\n        boolean autoCommit = connection.getAutoCommit();\n        boolean readOnly = connection.isReadOnly();\n        connection.setAutoCommit(false);\n        connection.setReadOnly(true);\n        try {\n            return pjp.proceed();\n        } finally {\n            connection.setAutoCommit(autoCommit);\n            connection.setReadOnly(readOnly);\n        }\n    }\n}\n\n\n\n## \u3084\u308a\u305f\u3044\u3053\u3068\nSpring JPA\u3092\u4f7f\u3063\u3066Master-Slave\u69cb\u6210\u306e\u6642\u306bSELECT\u306fSlave,\u305d\u306e\u4ed6\u306fMaster\u30b5\u30fc\u30d0\u3078\u30a2\u30af\u30bb\u30b9\u3059\u308b\n\n## \u30df\u30c9\u30eb\u30a6\u30a7\u30a2,\u30d5\u30ec\u30fc\u30e0\u30ef\u30fc\u30af\n- ReplicationDriver\n- MySQL 5.6\n- Spring 3.2.8\n- hibernate\n\n## \u30c6\u30b9\u30c8\u306e\u69cb\u6210\n\n- Customer.java \u30a8\u30f3\u30c6\u30a3\u30c6\u30a3\u30af\u30e9\u30b9\n- CustomerRepository.java JpaRepository\u3092\u7d99\u627f\u3057\u305f\u30af\u30e9\u30b9. find\u306a\u3069\u3092\u884c\u3044\u307e\u3059\n- CustomerService.java CustomerRepository\u3092\u547c\u3073\u51fa\u3057\u307e\u3059\n- Test\u30af\u30e9\u30b9 CustomerService\u3092\u547c\u3073\u51fa\u3057\u307e\u3059\n\n\u30b3\u30fc\u30c9\u306f\u4e0b\u8a18\u306b\nhttps://github.com/hachi-eiji/spring-jpa-practice/\n\n## \u5b9f\u73fe\u65b9\u6cd5\n\nReplicationDriver\u306fautoCommit=false, readOnly=true\u306e\u3068\u304d\u306bselect\u3092\u767a\u884c\u3059\u308b\u3068slave\u3078\u30a2\u30af\u30bb\u30b9\u3057\u307e\u3059\n\u3088\u3063\u3066\u3001find\u51e6\u7406\u3092\u5b9f\u884c\u3059\u308b\u524d\u306b\u30a4\u30f3\u30bf\u30fc\u30bb\u30d7\u30bf\u30fc\u3067\u8a2d\u5b9a\u3092\u884c\u3044\u307e\u3059\n(autoCommit=true\u3067\u3082\u52d5\u304d\u307e\u3057\u305f\u3002\u3053\u3053\u3092false\u306b\u3059\u308b\u7406\u7531\u3092\u3054\u5b58\u3058\u306e\u65b9\u306f\u6559\u3048\u3066\u304f\u3060\u3055\u3044)\n\n\u307e\u305f\u3001CustomerService.java\u306e\u30e1\u30bd\u30c3\u30c9\u3067 ``` @Transactional ``` \u3092\u3064\u3051\u307e\u3059\n\u3064\u3051\u306a\u3044\u5834\u5408\u306f\u4e0b\u8a18\u306e\u30a8\u30e9\u30fc\u304c\u767a\u751f\u3057\u307e\u3059\u3002\u3053\u308c\u306f\u30a4\u30f3\u30bf\u30fc\u30bb\u30d7\u30bf\u30fc\u306e\u4e2d\u3067 ```  entityManager.unwrap(SessionImpl.class); ``` \u3092\u4f7f\u3046\u3068\u304d\u306f\u30c8\u30e9\u30f3\u30b6\u30af\u30b7\u30e7\u30f3\u304c\u5fc5\u9808\u3060\u304b\u3089\u3067\u3059\u3002\n-> PersistenceContext\u30a2\u30ce\u30c6\u30fc\u30b7\u30e7\u30f3\u304cEXTENDED\u306e\u6642\u306f ```@Transactinal```\u306f\u306a\u304f\u3066\u3082\u3044\u3051\u307e\u3057\u305f\n\n```@Transacitonal\u3092\u3064\u3051\u306a\u3044\u6642\u306e\u30a8\u30e9\u30fc\njava.lang.IllegalStateException: No transactional EntityManager available\nat org.springframework.orm.jpa.SharedEntityManagerCreator\n$SharedEntityManagerInvocationHandler.invoke(SharedEntityManagerCreator.java:224)\n```\n\n## \u6700\u5f8c\u306b\n\n\u5b9f\u969b\u306b\u7d44\u307f\u8fbc\u3080\u3068\u304d\u306f\u3001\u30a8\u30f3\u30c6\u30a3\u30c6\u30a3\u30af\u30e9\u30b9\u306b\u30de\u30fc\u30ab\u30fc\u30a2\u30ce\u30c6\u30fc\u30b7\u30e7\u30f3\u3092\u3064\u3051\u305f\u307b\u3046\u304c\u3001\u304a\u305d\u3089\u304f\u52b9\u7387\u306f\u3044\u3044\u306f\u305a\u3067\u3059\u3002\n\n## \u53c2\u8003\u8cc7\u6599\n[ReplicationDriver](http://dev.mysql.com/doc/connector-j/en/connector-j-master-slave-replication-connection.html)\n[MySQL Master/Slave Load Balancing with JPA and Spring](http://www.dragishak.com/?p=307)\n\n## \u30b3\u30fc\u30c9\nhttps://github.com/hachi-eiji/spring-jpa-practice/\n\n```java:\u30a4\u30f3\u30bf\u30fc\u30bb\u30d7\u30bf\u30fc\u306e\u30b3\u30fc\u30c9\n@Aspect\n@Component\npublic class SlaveConnectionInterceptor {\n    private static final Logger LOGGER = LoggerFactory.getLogger(SlaveConnectionInterceptor.class);\n\n    private EntityManager entityManager;\n\n    @PersistenceContext\n    public void setEntityManager(EntityManager entityManager) {\n        this.entityManager = entityManager;\n    }\n\n    @Around(\"execution(public * com.hachiyae.jpa..*.find*(..)) || execution(public * com.hachiyae.jpa..*.count*(..))\")\n    public Object proceed(ProceedingJoinPoint pjp) throws Throwable {\n        LOGGER.info(\"call SlaveConnectionInterceptor from {}\", pjp.getSignature().toShortString());\n        SessionImpl session = entityManager.unwrap(SessionImpl.class);\n        Connection connection = session.connection();\n        boolean autoCommit = connection.getAutoCommit();\n        boolean readOnly = connection.isReadOnly();\n        connection.setAutoCommit(false);\n        connection.setReadOnly(true);\n        try {\n            return pjp.proceed();\n        } finally {\n            connection.setAutoCommit(autoCommit);\n            connection.setReadOnly(readOnly);\n        }\n    }\n}\n```\n", "tags": ["Java", "spring", "jpa"]}