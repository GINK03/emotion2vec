{"context": "\n\n\u306f\u3058\u3081\u306b\n\u914d\u5217\u306b\u5165\u3063\u305f\u30c7\u30fc\u30bf\u306e\u3046\u3061\u3001\u975e\u30bc\u30ed\u8981\u7d20\u3060\u3051\u524d\u306b\u8a70\u3081\u305f\u3044\u3002\n\u3064\u307e\u308a\u3001\u3053\u3093\u306a\u30c7\u30fc\u30bf\u304c\u4e0e\u3048\u3089\u308c\u305f\u6642\u306b\u3001\n0 0 1 2 0 0 0 3 0 0 0 0 0 0 0 4 0 5 6 7 0 0 8 9 0 0 10 0 0 11 12 13 \n\n\u4ee5\u4e0b\u3092\u51fa\u529b\u3057\u305f\u3044\u3002\n1 2 3 4 5 6 7 8 9 10 11 12 13 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 \n\n\u30c7\u30fc\u30bf\u304cdata\u306bSIZE\u500b\u5165\u3063\u3066\u308b\u3068\u3057\u3066\u3001result\u306b\u30d1\u30c3\u30af\u3057\u305f\u30c7\u30fc\u30bf\u3092\u4f5c\u308b\u95a2\u6570\u306e\u30b7\u30ea\u30a2\u30eb\u7248\u306f\u3053\u3093\u306a\u611f\u3058\u306b\u306a\u308b\u3060\u308d\u3046\u3002\nvoid\npack_serial(void) {\n  int pos = 0;\n  for (int i = 0; i < SIZE; i++) {\n    if (data[i] != 0) {\n      result[pos] = data[i];\n      pos++;\n    }\n  }\n}\n\n\u3053\u308c\u3092AVX-512\u3092\u4f7f\u3063\u3066\u5b9f\u88c5\u3057\u3066\u307f\u308b\u3002\u9ad8\u901f\u5316\u3068\u3044\u3046\u304b\u3001AVX-512\u306e\u547d\u4ee4\u3092\u4f7f\u3063\u3066\u307f\u305f\u3044\u3060\u3051\u3067\u3059\u3002\n\n\u65b9\u91dd\n\u305b\u3063\u304b\u304f512bit\u4f7f\u3048\u308b\u306e\u3067\u300116\u500b\u540c\u6642\u306b\u6301\u3063\u3066\u304d\u3066\u3001\u305d\u308c\u3092\u4e00\u5ea6\u306b\u30d1\u30c3\u30af\u3057\u305f\u3044\u3002\u305d\u306e\u70ba\u306b\u306f_mm512_permutevar_epi32\u3092\u4f7f\u3048\u3070\u826f\u3044\u3002\u3067\u300116\u500b\u306e\u30c7\u30fc\u30bf\u3092\u8a70\u3081\u3066\u4e26\u3073\u66ff\u3048\u308b\u65b9\u6cd5\u306f2 ** 16 = 65536\u901a\u308a\u3042\u308b\u306e\u3067\u3001\u4e8b\u524d\u306b\u30c6\u30fc\u30d6\u30eb\u3092\u4f5c\u3063\u3066\u3057\u307e\u304a\u3046\u3002\u305d\u306e\u30c6\u30fc\u30d6\u30eb\u3092offset16\u3068\u3059\u308b\u3002\u305d\u306e\u30aa\u30d5\u30bb\u30c3\u30c8\u306e\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u3092\u4f5c\u308b\u306e\u306b\u306f\u3001\u975e\u30bc\u30ed\u306e\u8981\u7d20\u306e\u307f\u30d3\u30c3\u30c8\u304c\u7acb\u3063\u305f\u30de\u30b9\u30af\u3092\u4f5c\u308c\u3070\u826f\u3044\u3002\u3053\u308c\u306f_mm512_test_epi32_mask\u3067\u3067\u304d\u308b\u3002\n\u307e\u3068\u3081\u308b\u3068\u3001\n\n\n_mm512_loadu_si512\u3000\u3067\u30c7\u30fc\u30bf\u309216\u500b\u53d6\u3063\u3066\u304f\u308b\n\n_mm512_test_epi32_mask\u3067\u975e\u30bc\u30ed\u8981\u7d20\u306e\u30de\u30b9\u30af\u3092\u4f5c\u6210\n\n_mm512_loadu_si512\u3067\u30aa\u30d5\u30bb\u30c3\u30c8\u30c6\u30fc\u30d6\u30eb\u304b\u3089\u30aa\u30d5\u30bb\u30c3\u30c8\u3092\u6301\u3063\u3066\u304f\u308b\n\n_mm512_permutevar_epi32\u3067\u30aa\u30d5\u30bb\u30c3\u30c8\u3092\u5229\u7528\u3057\u3066\u4e26\u3073\u66ff\u3048\u308b\n\n_mm512_store_si512\u3067\u30c7\u30fc\u30bf\u3092store\n\n_mm_popcnt_u32\u3067\u30de\u30b9\u30af\u306e\u30d3\u30c3\u30c8\u304c\u7acb\u3063\u3066\u3044\u308b\u6570\u3060\u3051\u3001\u30b9\u30c8\u30a2\u4f4d\u7f6e\u3092\u305a\u3089\u3059\n\n\u3068\u3044\u3046\u611f\u3058\u3002\n\u4f8b\u3048\u3070\n\n0 0 1 2 0 0 0 3 0 0 0 0 0 0 0 4\n\n\u3068\u3044\u304616\u500b\u306e\u30c7\u30fc\u30bf\u3092\u6301\u3063\u3066\u304d\u305f\u3089\u3001\u3053\u3053\u304b\u3089\n0011000100000001\n\n\u3068\u3044\u3046\u30de\u30b9\u30af\u3092\u4f5c\u3063\u3066\u3001\u305d\u3053\u304b\u3089\n2 3 7 15 0 0 0 0 0 0 0 0 0 0 0 0 \n\n\u3068\u3044\u3046\u30aa\u30d5\u30bb\u30c3\u30c8\u3092\u30c6\u30fc\u30d6\u30eb\u304b\u3089\u5f15\u3044\u3066\u304d\u3066\u3001\u3053\u306e\u30aa\u30d5\u30bb\u30c3\u30c8\u3092\u4f7f\u3063\u3066\u4e26\u3073\u66ff\u3048\u308b\u3068\u3001\n1 2 3 4 0 0 0 0 0 0 0 0 0 0 0 0 \n\n\u3068\u306a\u308b\u3002\u3053\u308c\u3092\u7e70\u308a\u8fd4\u305b\u3070\u826f\u3044\u3002\n\u3053\u308c\u3092\u305d\u306e\u307e\u307e\u5b9f\u88c5\u3059\u308b\u3068\u3053\u3093\u306a\u611f\u3058\u3002\nvoid\npack_512(void) {\n  int pos = 0;\n  for (int i = 0; i < SIZE / 16; i++) {\n    __m512i vdata = _mm512_loadu_si512(data + i * 16);\n    __mmask16 vmask = _mm512_test_epi32_mask(vdata, vdata);\n    __m512i voffset = _mm512_load_si512((__m512i const *)(offset16 + vmask * 16));\n    __m512i vout = _mm512_permutevar_epi32(voffset, vdata);\n    _mm512_store_si512((__m512i *)(result2 + pos), vout);\n    pos += _mm_popcnt_u32(vmask);\n  }\n  for (int i = pos; i < pos + 16 && i < SIZE; i++) {\n    result2[i] = 0;\n  }\n}\n\n\u6700\u5f8c\u306b\u30b4\u30df\u6383\u9664\u3092\u3064\u3051\u3066\u3042\u308b\u304c\u3001\u7d20\u76f4\u306a\u5b9f\u88c5\u306a\u306e\u3067\u96e3\u3057\u3044\u3068\u3053\u308d\u306f\u7121\u3044\u3068\u601d\u3046\u3002\n\n256\u30d3\u30c3\u30c8\u7248\n\u4e0a\u8a18\u3060\u3068\u300165536\u8981\u7d20\u306e\u30c6\u30fc\u30d6\u30eb\u3092\u5f15\u3044\u3066\u308b\u306e\u304c\u3061\u3087\u3063\u3068\u30a2\u30ec\u306a\u6c17\u304c\u3059\u308b\u306e\u3067\u300116\u500b\u30c7\u30fc\u30bf\u3092\u53d6\u3063\u3066\u306f\u304f\u308b\u3093\u3060\u3051\u3069\u3001\u305d\u308c\u30928\u500b\u305a\u3064\u306b\u308f\u3051\u3066\u30d1\u30c3\u30af\u3059\u308b\u3053\u3068\u3092\u8003\u3048\u308b\u3002\u3053\u308c\u3060\u3068\u30c6\u30fc\u30d6\u30eb\u306f256\u8981\u7d20\u3067\u826f\u304f\u306a\u308b\u3002\nzmm\u306b\u30ed\u30fc\u30c9\u3057\u305f\u30c7\u30fc\u30bf\u306e\u4e0b\u4f4d256bit\u3092_mm512_castsi512_si256\u3067\u3001\u4e0a\u4f4d256bit\u3092_mm512_extracti64x4_epi64\u3067\u53d6\u3063\u305f\u3089\u3001\u3084\u308b\u3053\u3068\u306f512bit\u7248\u3068\u307b\u307c\u540c\u3058\u3002\u30de\u30b9\u30af\u306e\u4e0a\u4f4d8bit\u3068\u4e0b\u4f4d8bit\u306e\u5206\u96e2\u3082\u5fc5\u8981\u3002\u5b9f\u88c5\u306f\u3053\u3093\u306a\u611f\u3058\u306b\u306a\u308b\u3002\nvoid\npack_256(void) {\n  int pos = 0;\n  for (int i = 0; i < SIZE / 16; i++) {\n    __m512i vdata = _mm512_loadu_si512(data + i * 16);\n    __mmask16 vmask = _mm512_test_epi32_mask(vdata, vdata);\n    __m256i vlow = _mm512_castsi512_si256(vdata);\n    __m256i vhigh = _mm512_extracti64x4_epi64(vdata, 1);\n    int mask_low = vmask & 255;\n    int mask_high = vmask >> 8;\n    __m256i voffset = _mm256_load_si256((__m256i const *)(offset8 + mask_low * 8));\n    __m256i vout_low = _mm256_permutevar8x32_epi32(vlow, voffset);\n    voffset = _mm256_load_si256((__m256i const *)(offset8 + mask_high * 8));\n    __m256i vout_high = _mm256_permutevar8x32_epi32(vhigh, voffset);\n    _mm256_store_si256((__m256i *)(result3 + pos), vout_low);\n    pos += _mm_popcnt_u32(mask_low);\n    _mm256_store_si256((__m256i *)(result3 + pos), vout_high);\n    pos += _mm_popcnt_u32(mask_high);\n  }\n  for (int i = pos; i < pos + 16 && i < SIZE; i++) {\n    result3[i] = 0;\n  }\n}\n\n\n512 bit + vpcompressd \u7248(2/10 \u8ffd\u8a18)\n\u30b3\u30e1\u30f3\u30c8\u6b04\u306b\u3066\u3001vpcompressd\u3068\u3044\u3046\u3001\u305d\u306e\u3082\u306e\u305a\u3070\u308a\u306e\u547d\u4ee4\u3092\u6559\u3048\u3066\u3044\u305f\u3060\u3044\u305f\u3002\u30de\u30b9\u30af\u30ec\u30b8\u30b9\u30bf\u306e\u7acb\u3063\u3066\u308b\u3068\u3053\u308d\u3060\u3051\u8a70\u3081\u305f\u914d\u5217\u3092\u4f5c\u3063\u3066\u304f\u308c\u308b\u3002\u5bfe\u5fdc\u3059\u308b\u7d44\u307f\u8fbc\u307f\u95a2\u6570\u306f_mm512_mask_compressstoreu_epi32\u3067\u3001\u3053\u308c\u3092\u4f7f\u3046\u3068pack\u30eb\u30fc\u30c1\u30f3\u306f\u3053\u3046\u66f8\u3051\u308b\u3002\nvoid\npack_512c(void) {\n  int pos = 0;\n  for (int i = 0; i < SIZE / 16; i++) {\n    __m512i vdata = _mm512_loadu_si512(data + i * 16);\n    __mmask16 vmask = _mm512_test_epi32_mask(vdata, vdata);\n    _mm512_mask_compressstoreu_epi32(result4 + pos, vmask, vdata);\n    pos += _mm_popcnt_u32(vmask);\n  }\n}\n\n\u30c6\u30fc\u30d6\u30eb\u5f15\u304d\u4e0d\u8981\u3002\u51fa\u529b\u5148\u3092\u30bc\u30ed\u30af\u30ea\u30a2\u3057\u3066\u304a\u3051\u3070\u30b4\u30df\u51e6\u7406\u3082\u4e0d\u8981\u3002\u7c21\u5358\u3059\u304e\u308b\u30fb\u30fb\u30fb\n\n\u7d50\u679c (2/10 \u8ffd\u8a18)\n131072\u500b\u306e\u914d\u5217\u306e\u3046\u3061\u3001\u534a\u5206\u3060\u3051\u975e\u30bc\u30ed\u8981\u7d20\u3092\u4f5c\u3063\u3066\u3001\u305d\u308c\u30921000\u56de\u30d1\u30c3\u30af\u3059\u308b\u306e\u306b\u304b\u304b\u3063\u305f\u6642\u9593\u3092\u8a08\u6e2c\u3057\u305f\u3002\n\nIntel(R) Xeon Phi(TM) CPU 7250 @ 1.40GHz\nicpc (ICC) 17.0.1 20161005\n\u30b3\u30f3\u30d1\u30a4\u30eb\u30aa\u30d7\u30b7\u30e7\u30f3 -std=c++11 -O3\n\n\n\n\n\n\u65b9\u6cd5\n\u6642\u9593 [ms]\n\n\n\n\n\u30b7\u30ea\u30a2\u30eb\n1107\n\n\n512 bit\n291\n\n\n256 bit\n124\n\n\n512 bit + vpcompressd\n86\n\n\n\n65536\u8981\u7d20\u30c6\u30fc\u30d6\u30eb\u5f15\u304d\u4e00\u56de\u3088\u308a\u3001256\u8981\u7d20\u30c6\u30fc\u30d6\u30eb\u5f15\u304d\u4e8c\u56de\u3084\u3063\u305f\u65b9\u304c\u500d\u8fd1\u304f\u65e9\u3044\u3051\u308c\u3069\u3001vpcompressd\u4f7f\u3063\u305f\u65b9\u304c\u3055\u3089\u306b\u65e9\u3044\u3002\n\n\u307e\u3068\u3081\n\u9069\u5f53\u306b\u3084\u3063\u305f\u306e\u3067\u3069\u3053\u304c\u30dc\u30c8\u30eb\u30cd\u30c3\u30af\u306a\u306e\u304b\u3082\u8abf\u3079\u3066\u3044\u306a\u3044\u304c\u3001\u307e\u3041\u30b7\u30ea\u30a2\u30eb\u7248\u3088\u308a\u306f10\u500d\u8fd1\u304f\u65e9\u304f\u306a\u3063\u305f\u304b\u3089\u3088\u304b\u3063\u305f\u3002SIMD\u5316\u4e91\u3005\u3068\u3044\u3046\u3088\u308a\u306f\u3001\u5358\u306b\u30e1\u30e2\u30ea\u30a2\u30af\u30bb\u30b9\u304c\u6e1b\u3063\u305f\u306e\u304c\u9ad8\u901f\u5316\u306e\u8981\u56e0\u306a\u6c17\u3082\u3059\u308b\u3002\u3042\u3068\u3001\u30de\u30b9\u30af\u30ec\u30b8\u30b9\u30bf\u4fbf\u5229\u306a\u6c17\u304c\u3059\u308b\u3002\n\u624b\u629c\u304d\u3060\u3051\u3069\u3001\u4e00\u5fdc\u30bd\u30fc\u30b9\u306f\u4ee5\u4e0b\u306b\u304a\u3044\u3066\u304a\u304d\u307e\u3059(vpcompressd\u7248\u3082\u8ffd\u52a0)\u3002\nhttps://gist.github.com/kaityo256/c5e7a02eef60e98fe8b5b08638476825\n# \u306f\u3058\u3081\u306b\n\n\u914d\u5217\u306b\u5165\u3063\u305f\u30c7\u30fc\u30bf\u306e\u3046\u3061\u3001\u975e\u30bc\u30ed\u8981\u7d20\u3060\u3051\u524d\u306b\u8a70\u3081\u305f\u3044\u3002\n\n\u3064\u307e\u308a\u3001\u3053\u3093\u306a\u30c7\u30fc\u30bf\u304c\u4e0e\u3048\u3089\u308c\u305f\u6642\u306b\u3001\n\n```\n0 0 1 2 0 0 0 3 0 0 0 0 0 0 0 4 0 5 6 7 0 0 8 9 0 0 10 0 0 11 12 13 \n```\n\n\u4ee5\u4e0b\u3092\u51fa\u529b\u3057\u305f\u3044\u3002\n\n```\n1 2 3 4 5 6 7 8 9 10 11 12 13 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 \n```\n\n\n\u30c7\u30fc\u30bf\u304c`data`\u306b`SIZE`\u500b\u5165\u3063\u3066\u308b\u3068\u3057\u3066\u3001`result`\u306b\u30d1\u30c3\u30af\u3057\u305f\u30c7\u30fc\u30bf\u3092\u4f5c\u308b\u95a2\u6570\u306e\u30b7\u30ea\u30a2\u30eb\u7248\u306f\u3053\u3093\u306a\u611f\u3058\u306b\u306a\u308b\u3060\u308d\u3046\u3002\n\n```cpp\nvoid\npack_serial(void) {\n  int pos = 0;\n  for (int i = 0; i < SIZE; i++) {\n    if (data[i] != 0) {\n      result[pos] = data[i];\n      pos++;\n    }\n  }\n}\n```\n\n\u3053\u308c\u3092AVX-512\u3092\u4f7f\u3063\u3066\u5b9f\u88c5\u3057\u3066\u307f\u308b\u3002\u9ad8\u901f\u5316\u3068\u3044\u3046\u304b\u3001AVX-512\u306e\u547d\u4ee4\u3092\u4f7f\u3063\u3066\u307f\u305f\u3044\u3060\u3051\u3067\u3059\u3002\n\n# \u65b9\u91dd\n\n\u305b\u3063\u304b\u304f512bit\u4f7f\u3048\u308b\u306e\u3067\u300116\u500b\u540c\u6642\u306b\u6301\u3063\u3066\u304d\u3066\u3001\u305d\u308c\u3092\u4e00\u5ea6\u306b\u30d1\u30c3\u30af\u3057\u305f\u3044\u3002\u305d\u306e\u70ba\u306b\u306f`_mm512_permutevar_epi32`\u3092\u4f7f\u3048\u3070\u826f\u3044\u3002\u3067\u300116\u500b\u306e\u30c7\u30fc\u30bf\u3092\u8a70\u3081\u3066\u4e26\u3073\u66ff\u3048\u308b\u65b9\u6cd5\u306f2 ** 16 = 65536\u901a\u308a\u3042\u308b\u306e\u3067\u3001\u4e8b\u524d\u306b\u30c6\u30fc\u30d6\u30eb\u3092\u4f5c\u3063\u3066\u3057\u307e\u304a\u3046\u3002\u305d\u306e\u30c6\u30fc\u30d6\u30eb\u3092`offset16`\u3068\u3059\u308b\u3002\u305d\u306e\u30aa\u30d5\u30bb\u30c3\u30c8\u306e\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u3092\u4f5c\u308b\u306e\u306b\u306f\u3001\u975e\u30bc\u30ed\u306e\u8981\u7d20\u306e\u307f\u30d3\u30c3\u30c8\u304c\u7acb\u3063\u305f\u30de\u30b9\u30af\u3092\u4f5c\u308c\u3070\u826f\u3044\u3002\u3053\u308c\u306f`_mm512_test_epi32_mask`\u3067\u3067\u304d\u308b\u3002\n\n\u307e\u3068\u3081\u308b\u3068\u3001\n\n1. `_mm512_loadu_si512`\u3000\u3067\u30c7\u30fc\u30bf\u309216\u500b\u53d6\u3063\u3066\u304f\u308b\n2. `_mm512_test_epi32_mask`\u3067\u975e\u30bc\u30ed\u8981\u7d20\u306e\u30de\u30b9\u30af\u3092\u4f5c\u6210\n3. `_mm512_loadu_si512`\u3067\u30aa\u30d5\u30bb\u30c3\u30c8\u30c6\u30fc\u30d6\u30eb\u304b\u3089\u30aa\u30d5\u30bb\u30c3\u30c8\u3092\u6301\u3063\u3066\u304f\u308b\n4. `_mm512_permutevar_epi32`\u3067\u30aa\u30d5\u30bb\u30c3\u30c8\u3092\u5229\u7528\u3057\u3066\u4e26\u3073\u66ff\u3048\u308b\n5. `_mm512_store_si512`\u3067\u30c7\u30fc\u30bf\u3092store\n6. `_mm_popcnt_u32`\u3067\u30de\u30b9\u30af\u306e\u30d3\u30c3\u30c8\u304c\u7acb\u3063\u3066\u3044\u308b\u6570\u3060\u3051\u3001\u30b9\u30c8\u30a2\u4f4d\u7f6e\u3092\u305a\u3089\u3059\n\n\u3068\u3044\u3046\u611f\u3058\u3002\n\n\u4f8b\u3048\u3070\n```\n0 0 1 2 0 0 0 3 0 0 0 0 0 0 0 4\n```\n\n\u3068\u3044\u304616\u500b\u306e\u30c7\u30fc\u30bf\u3092\u6301\u3063\u3066\u304d\u305f\u3089\u3001\u3053\u3053\u304b\u3089\n\n```\n0011000100000001\n```\n\n\u3068\u3044\u3046\u30de\u30b9\u30af\u3092\u4f5c\u3063\u3066\u3001\u305d\u3053\u304b\u3089\n\n```\n2 3 7 15 0 0 0 0 0 0 0 0 0 0 0 0 \n```\n\n\u3068\u3044\u3046\u30aa\u30d5\u30bb\u30c3\u30c8\u3092\u30c6\u30fc\u30d6\u30eb\u304b\u3089\u5f15\u3044\u3066\u304d\u3066\u3001\u3053\u306e\u30aa\u30d5\u30bb\u30c3\u30c8\u3092\u4f7f\u3063\u3066\u4e26\u3073\u66ff\u3048\u308b\u3068\u3001\n\n```\n1 2 3 4 0 0 0 0 0 0 0 0 0 0 0 0 \n```\n\n\u3068\u306a\u308b\u3002\u3053\u308c\u3092\u7e70\u308a\u8fd4\u305b\u3070\u826f\u3044\u3002\n\n\u3053\u308c\u3092\u305d\u306e\u307e\u307e\u5b9f\u88c5\u3059\u308b\u3068\u3053\u3093\u306a\u611f\u3058\u3002\n\n```cpp\nvoid\npack_512(void) {\n  int pos = 0;\n  for (int i = 0; i < SIZE / 16; i++) {\n    __m512i vdata = _mm512_loadu_si512(data + i * 16);\n    __mmask16 vmask = _mm512_test_epi32_mask(vdata, vdata);\n    __m512i voffset = _mm512_load_si512((__m512i const *)(offset16 + vmask * 16));\n    __m512i vout = _mm512_permutevar_epi32(voffset, vdata);\n    _mm512_store_si512((__m512i *)(result2 + pos), vout);\n    pos += _mm_popcnt_u32(vmask);\n  }\n  for (int i = pos; i < pos + 16 && i < SIZE; i++) {\n    result2[i] = 0;\n  }\n}\n```\n\n\u6700\u5f8c\u306b\u30b4\u30df\u6383\u9664\u3092\u3064\u3051\u3066\u3042\u308b\u304c\u3001\u7d20\u76f4\u306a\u5b9f\u88c5\u306a\u306e\u3067\u96e3\u3057\u3044\u3068\u3053\u308d\u306f\u7121\u3044\u3068\u601d\u3046\u3002\n\n# 256\u30d3\u30c3\u30c8\u7248\n\n\u4e0a\u8a18\u3060\u3068\u300165536\u8981\u7d20\u306e\u30c6\u30fc\u30d6\u30eb\u3092\u5f15\u3044\u3066\u308b\u306e\u304c\u3061\u3087\u3063\u3068\u30a2\u30ec\u306a\u6c17\u304c\u3059\u308b\u306e\u3067\u300116\u500b\u30c7\u30fc\u30bf\u3092\u53d6\u3063\u3066\u306f\u304f\u308b\u3093\u3060\u3051\u3069\u3001\u305d\u308c\u30928\u500b\u305a\u3064\u306b\u308f\u3051\u3066\u30d1\u30c3\u30af\u3059\u308b\u3053\u3068\u3092\u8003\u3048\u308b\u3002\u3053\u308c\u3060\u3068\u30c6\u30fc\u30d6\u30eb\u306f256\u8981\u7d20\u3067\u826f\u304f\u306a\u308b\u3002\n\n`zmm`\u306b\u30ed\u30fc\u30c9\u3057\u305f\u30c7\u30fc\u30bf\u306e\u4e0b\u4f4d256bit\u3092`_mm512_castsi512_si256`\u3067\u3001\u4e0a\u4f4d256bit\u3092`_mm512_extracti64x4_epi64`\u3067\u53d6\u3063\u305f\u3089\u3001\u3084\u308b\u3053\u3068\u306f512bit\u7248\u3068\u307b\u307c\u540c\u3058\u3002\u30de\u30b9\u30af\u306e\u4e0a\u4f4d8bit\u3068\u4e0b\u4f4d8bit\u306e\u5206\u96e2\u3082\u5fc5\u8981\u3002\u5b9f\u88c5\u306f\u3053\u3093\u306a\u611f\u3058\u306b\u306a\u308b\u3002\n\n```cpp\nvoid\npack_256(void) {\n  int pos = 0;\n  for (int i = 0; i < SIZE / 16; i++) {\n    __m512i vdata = _mm512_loadu_si512(data + i * 16);\n    __mmask16 vmask = _mm512_test_epi32_mask(vdata, vdata);\n    __m256i vlow = _mm512_castsi512_si256(vdata);\n    __m256i vhigh = _mm512_extracti64x4_epi64(vdata, 1);\n    int mask_low = vmask & 255;\n    int mask_high = vmask >> 8;\n    __m256i voffset = _mm256_load_si256((__m256i const *)(offset8 + mask_low * 8));\n    __m256i vout_low = _mm256_permutevar8x32_epi32(vlow, voffset);\n    voffset = _mm256_load_si256((__m256i const *)(offset8 + mask_high * 8));\n    __m256i vout_high = _mm256_permutevar8x32_epi32(vhigh, voffset);\n    _mm256_store_si256((__m256i *)(result3 + pos), vout_low);\n    pos += _mm_popcnt_u32(mask_low);\n    _mm256_store_si256((__m256i *)(result3 + pos), vout_high);\n    pos += _mm_popcnt_u32(mask_high);\n  }\n  for (int i = pos; i < pos + 16 && i < SIZE; i++) {\n    result3[i] = 0;\n  }\n}\n```\n\n# 512 bit + vpcompressd \u7248(2/10 \u8ffd\u8a18)\n\n\u30b3\u30e1\u30f3\u30c8\u6b04\u306b\u3066\u3001[vpcompressd](https://software.intel.com/sites/landingpage/IntrinsicsGuide/#text=mm512_mask_compresss&expand=1172,1181)\u3068\u3044\u3046\u3001\u305d\u306e\u3082\u306e\u305a\u3070\u308a\u306e\u547d\u4ee4\u3092\u6559\u3048\u3066\u3044\u305f\u3060\u3044\u305f\u3002\u30de\u30b9\u30af\u30ec\u30b8\u30b9\u30bf\u306e\u7acb\u3063\u3066\u308b\u3068\u3053\u308d\u3060\u3051\u8a70\u3081\u305f\u914d\u5217\u3092\u4f5c\u3063\u3066\u304f\u308c\u308b\u3002\u5bfe\u5fdc\u3059\u308b\u7d44\u307f\u8fbc\u307f\u95a2\u6570\u306f`_mm512_mask_compressstoreu_epi32`\u3067\u3001\u3053\u308c\u3092\u4f7f\u3046\u3068pack\u30eb\u30fc\u30c1\u30f3\u306f\u3053\u3046\u66f8\u3051\u308b\u3002\n\n```cpp\nvoid\npack_512c(void) {\n  int pos = 0;\n  for (int i = 0; i < SIZE / 16; i++) {\n    __m512i vdata = _mm512_loadu_si512(data + i * 16);\n    __mmask16 vmask = _mm512_test_epi32_mask(vdata, vdata);\n    _mm512_mask_compressstoreu_epi32(result4 + pos, vmask, vdata);\n    pos += _mm_popcnt_u32(vmask);\n  }\n}\n```\n\n\u30c6\u30fc\u30d6\u30eb\u5f15\u304d\u4e0d\u8981\u3002\u51fa\u529b\u5148\u3092\u30bc\u30ed\u30af\u30ea\u30a2\u3057\u3066\u304a\u3051\u3070\u30b4\u30df\u51e6\u7406\u3082\u4e0d\u8981\u3002\u7c21\u5358\u3059\u304e\u308b\u30fb\u30fb\u30fb\n\n# \u7d50\u679c (2/10 \u8ffd\u8a18)\n\n131072\u500b\u306e\u914d\u5217\u306e\u3046\u3061\u3001\u534a\u5206\u3060\u3051\u975e\u30bc\u30ed\u8981\u7d20\u3092\u4f5c\u3063\u3066\u3001\u305d\u308c\u30921000\u56de\u30d1\u30c3\u30af\u3059\u308b\u306e\u306b\u304b\u304b\u3063\u305f\u6642\u9593\u3092\u8a08\u6e2c\u3057\u305f\u3002\n\n* Intel(R) Xeon Phi(TM) CPU 7250 @ 1.40GHz\n* icpc (ICC) 17.0.1 20161005\n* \u30b3\u30f3\u30d1\u30a4\u30eb\u30aa\u30d7\u30b7\u30e7\u30f3 `-std=c++11 -O3`\n\n| \u65b9\u6cd5 | \u6642\u9593 [ms] |\n|:-:|:-:|\n| \u30b7\u30ea\u30a2\u30eb| 1107 |\n| 512 bit  | 291  |\n| 256 bit  | 124  |\n| 512 bit + vpcompressd| 86|\n\n65536\u8981\u7d20\u30c6\u30fc\u30d6\u30eb\u5f15\u304d\u4e00\u56de\u3088\u308a\u3001256\u8981\u7d20\u30c6\u30fc\u30d6\u30eb\u5f15\u304d\u4e8c\u56de\u3084\u3063\u305f\u65b9\u304c\u500d\u8fd1\u304f\u65e9\u3044\u3051\u308c\u3069\u3001`vpcompressd`\u4f7f\u3063\u305f\u65b9\u304c\u3055\u3089\u306b\u65e9\u3044\u3002\n\n# \u307e\u3068\u3081\n\n\u9069\u5f53\u306b\u3084\u3063\u305f\u306e\u3067\u3069\u3053\u304c\u30dc\u30c8\u30eb\u30cd\u30c3\u30af\u306a\u306e\u304b\u3082\u8abf\u3079\u3066\u3044\u306a\u3044\u304c\u3001\u307e\u3041\u30b7\u30ea\u30a2\u30eb\u7248\u3088\u308a\u306f10\u500d\u8fd1\u304f\u65e9\u304f\u306a\u3063\u305f\u304b\u3089\u3088\u304b\u3063\u305f\u3002SIMD\u5316\u4e91\u3005\u3068\u3044\u3046\u3088\u308a\u306f\u3001\u5358\u306b\u30e1\u30e2\u30ea\u30a2\u30af\u30bb\u30b9\u304c\u6e1b\u3063\u305f\u306e\u304c\u9ad8\u901f\u5316\u306e\u8981\u56e0\u306a\u6c17\u3082\u3059\u308b\u3002\u3042\u3068\u3001\u30de\u30b9\u30af\u30ec\u30b8\u30b9\u30bf\u4fbf\u5229\u306a\u6c17\u304c\u3059\u308b\u3002\n\n\u624b\u629c\u304d\u3060\u3051\u3069\u3001\u4e00\u5fdc\u30bd\u30fc\u30b9\u306f\u4ee5\u4e0b\u306b\u304a\u3044\u3066\u304a\u304d\u307e\u3059(`vpcompressd`\u7248\u3082\u8ffd\u52a0)\u3002\n\nhttps://gist.github.com/kaityo256/c5e7a02eef60e98fe8b5b08638476825\n", "tags": ["avx512"]}