{"context": " More than 1 year has passed since last update.SublimeLinter\u306fSublimeText2\u306ePackage\u306e\u4e00\u3064\u3067\u3001\u30b3\u30f3\u30d1\u30a4\u30eb\u30a8\u30e9\u30fc\u3084\u30b7\u30f3\u30bf\u30c3\u30af\u30b9\u30a8\u30e9\u30fc\u304c\u8d77\u304d\u305f\u7b87\u6240\u3092\u30cf\u30a4\u30e9\u30a4\u30c8\u3059\u308b\u6a5f\u80fd\u3067\u3059\u3002\n\u4e0b\u306e\u753b\u50cf\u307f\u305f\u3044\u306a\u611f\u3058\u3002\n\nSublimeLinter\u306b\u3064\u3044\u3066\u516c\u5f0f\u306f\u4ee5\u4e0b\u306e\u30da\u30fc\u30b8\u3002\nhttps://github.com/SublimeLinter/SublimeLinter\nSublimeLinter\u306e\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u306f\u4ee5\u4e0b\u306e\u30da\u30fc\u30b8\u53c2\u7167\u3002\nhttp://perl.no-tubo.net/2012/05/03/mac%E3%81%AE%E3%83%86%E3%82%AD%E3%82%B9%E3%83%88%E3%82%A8%E3%83%87%E3%82%A3%E3%82%BF-sublime-text2%E3%81%A7javascript%E3%81%AE%E3%82%B7%E3%83%B3%E3%82%BF%E3%83%83%E3%82%AF%E3%82%B9%E3%82%A8%E3%83%A9/\nhttp://watson1978.github.com/blog/2012/08/23/make-a-sublime-text-environment/\n\u3067\u3001\u3053\u308c\u3067\u3069\u3046\u3084\u3063\u3066D\u8a00\u8a9e\u306e\u30cf\u30a4\u30e9\u30a4\u30c8\u3059\u308b\u304b\u3092\u4ee5\u4e0b\u306b\u3002\n\nD\u8a00\u8a9e\u7528\u30d5\u30a1\u30a4\u30eb\u8ffd\u52a0\nSublimeLinter\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u5f8c\u3001[Sublime Text 2]->[Preference]->[Browse Packages\u2026]\u3067\u30d1\u30c3\u30b1\u30fc\u30b8\u5165\u3063\u3066\u308b\u30d5\u30a9\u30eb\u30c0\u958b\u304f\u3002(MacOS\u306e\u5834\u5408\u3002\u4ed6\u306eOS\u306f\u77e5\u3089\u306a\u3044)\n\n\u3093\u3067\u3001\u30d1\u30c3\u30b1\u30fc\u30b8\u5165\u3063\u3066\u308b\u30d5\u30a9\u30eb\u30c0\u958b\u3044\u305f\u3089\u3001[\u301c\u301c/Packages/SublimeLinter/sublimelinter/modules/]\u30d5\u30a9\u30eb\u30c0\u3092\u958b\u304f\u3002\u4e2d\u306bpython.py\u3068\u304bjava.py\u3068\u304b\u5165\u3063\u3066\u308b\u3068\u601d\u3046\u306e\u3067\u3001d.py\u3092\u4f5c\u6210\u3059\u308b\u3002\n\nd.py\u306e\u30ac\u30ef\u3092\u4f5c\u6210\nd.py\u306b\u3001objective-j.py\u304b\u3089\u30bd\u30fc\u30b9\u3092\u30b3\u30d4\u30da\u3057\u3066\u3001\u5fc5\u8981\u306a\u3044\u6240\u524a\u9664\u3057\u3066\u4ee5\u4e0b\u307f\u305f\u3044\u306b\u3059\u308b\u3002\n\nd.py\nimport re\nimport os\nimport subprocess\n\nfrom base_linter import BaseLinter\n\nCONFIG = {\n    'language': 'D'\n}\n\n\nclass Linter(BaseLinter):\n    def built_in_check(self, view, code, filename):\n        return ''\n\n    def parse_errors(self, view, errors, lines, errorUnderlines, violationUnderlines, warningUnderlines, errorMessages, violationMessages, warningMessages):\n        return ''\n\n\n\nbuilt_in_check\u304c\u30b3\u30fc\u30c9\u3092\u30b3\u30f3\u30d1\u30a4\u30eb\u3057\u3066\u30b3\u30f3\u30d1\u30a4\u30eb\u30a8\u30e9\u30fc\u3092\u8fd4\u3059\u95a2\u6570\u3001parse_errors\u304cbuilt_in_check\u304b\u3089\u6765\u305f\u30a8\u30e9\u30fc\u3092\u5143\u306b\u30cf\u30a4\u30e9\u30a4\u30c8\u3059\u308b\u5834\u6240\u3092\u6c7a\u3081\u308b\u95a2\u6570\u306b\u5f53\u305f\u308b\u3002\n\nbuilt_in_check\u306e\u4e2d\u8eab\nbuilt_in_check\u306e\u5f15\u6570\u306fself,view,code,filename\u3002self\u306f\u81ea\u4fe1\u3067(C#\u3067\u8a00\u3046this)\u3001view\u306f\u307e\u3041\u30bf\u30d6\u306e\u30af\u30e9\u30b9\u3001code\u306f\u7de8\u96c6\u4e2d\u306e\u4fdd\u5b58\u3057\u3066\u306a\u3044\u30d5\u30a1\u30a4\u30eb\u306e\u4e2d\u8eab\u3067\u3001filename\u306f\u305d\u306e\u307e\u307e\u8868\u793a\u4e2d\u306e\u30d5\u30a1\u30a4\u30eb\u306e\u540d\u524d\u3002\n\u3093\u3067\u3001'built_in_check'\u306b\u30b3\u30fc\u30c9\u30b3\u30f3\u30d1\u30a4\u30eb\u3059\u308b\u4e2d\u8eab\u51e6\u7406\u3092\u66f8\u304f\u3093\u3060\u3051\u3069\u3001\u6ce8\u610f\u70b9\u3068\u304b\u306f\u4ee5\u4e0b\u306e\u901a\u308a\u3002\n\n\u30b3\u30f3\u30d1\u30a4\u30eb\u5bfe\u8c61\u306fcode\u306b\u3059\u308b\u3002filename\u306e\u30d5\u30a1\u30a4\u30eb\u3092\u30b3\u30f3\u30d1\u30a4\u30eb\u3059\u308b\u3068\u7de8\u96c6\u524d\u306e\u30d5\u30a1\u30a4\u30eb\u3092\u30b3\u30f3\u30d1\u30a4\u30eb\u3059\u308b\u306e\u3067\u304a\u304b\u3057\u306a\u4e8b\u306b\u306a\u308b\u3002code\u3092d.py\u306e\u3042\u308b\u9069\u5f53\u306a\u30d5\u30a9\u30eb\u30c0\u306b\u4fdd\u5b58\u3057\u3066\u305d\u308c\u3092\u30b3\u30f3\u30d1\u30a4\u30eb\u3059\u308b\ndmd\u306e\u30b3\u30f3\u30d1\u30a4\u30eb\u30aa\u30d7\u30b7\u30e7\u30f3\u306f-c -o- -w -unittest -debug\u3067\n\u5206\u304b\u3089\u306a\u304f\u306a\u3063\u305f\u3089base_linter.py\u3092\u8aad\u3082\u3046\n\n\u3068\u3044\u3046\u3053\u3068\u3067\u305d\u306e\u7d50\u679c\u304c\u4ee5\u4e0b\u3002\n\nd.py\n\u2026\n#\u66f8\u3044\u3066\u308b\u9014\u4e2d\u306e\u30d5\u30a1\u30a4\u30eb\u3092\u66f8\u304d\u51fa\u3059temp\u30d5\u30a9\u30eb\u30c0\nTMPPATH_DIR = os.path.abspath(os.path.join(os.path.dirname(__file__), '.dtmpfiles'))\nif not os.path.exists(TMPPATH_DIR):\n    os.mkdir(TMPPATH_DIR)\n\u2026\nclass Linter(BaseLinter):\n    def built_in_check(self, view, code, filename):\n      def built_in_check(self, view, code, filename):\n        #\u30d1\u30b9\u53d6\u5f97\n        work_path = os.path.dirname(filename)\n        file_name = os.path.basename(filename)\n\n         #\u30b3\u30f3\u30d1\u30a4\u30eb\u5834\u6240\u306e\u8a2d\u5b9a\u53d6\u5f97\n        settings = view.settings().get('SublimeLinter', {}).get(self.language, {})\n        if(settings):\n            dwd = settings.get('working_directory', [])\n            if(dwd):\n                #\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u306b\u8a2d\u5b9a\u3042\u3063\u305f\u3089\u305d\u308c\u3092\u53d6\u5f97\n                work_path = dwd\n\n        #\u66f8\u3044\u3066\u308b\u9014\u4e2d\u306e\u30d5\u30a1\u30a4\u30eb\u3092temp\u30d5\u30a1\u30a4\u30eb\u3068\u3057\u3066d.py\u76f4\u4e0b\u306b\u66f8\u304d\u51fa\u3057\n        tempfilePath = os.path.join(TMPPATH_DIR, file_name)\n\n        with open(tempfilePath, 'w') as f:\n            f.write(code)\n\n        args = [\"dmd\", \"-c\", \"-o-\", \"-w\", \"-unittest\", \"-debug\", tempfilePath]\n\n        try:\n            #\u30b3\u30f3\u30d1\u30a4\u30eb\n            process = subprocess.Popen(args,\n                                        cwd=work_path,\n                                        stdin=subprocess.PIPE,\n                                        stdout=subprocess.PIPE,\n                                        stderr=subprocess.STDOUT,\n                                        startupinfo=self.get_startupinfo())\n            result = process.communicate(None)[0]\n        finally:\n            if tempfilePath:\n                #\u4fdd\u5b58\u3057\u305f\u30d5\u30a1\u30a4\u30eb\u306e\u524a\u9664\n                os.remove(tempfilePath)\n\n        return result.strip()\n\u2026\n\n\nSublimeText2\u306b\u306f\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u7ba1\u7406\u306e\u6a5f\u80fd\u304c\u3042\u308b\u306e\u3060\u3051\u3069\u3001\u305d\u306e\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u30d5\u30a1\u30a4\u30eb\u306b\u8a2d\u5b9a\u3092\u66f8\u304f\u3068\u3001dmd\u3059\u308b\u5834\u6240\u3092\u8a2d\u5b9a\u51fa\u6765\u308b\u3002\u81ea\u5206\u3067\u4f5c\u3063\u305fmodule\u3068\u304b\u3092import\u3057\u3066\u308b\u6642\u306f\u305d\u308c\u3092\u3057\u306a\u3044\u3068import\u90e8\u5206\u3067\u30b3\u30f3\u30d1\u30a4\u30eb\u30a8\u30e9\u30fc\u8d77\u3053\u308b(\u3068\u601d\u3046)\u3002\n\u8a2d\u5b9a\u306f\u4ee5\u4e0b\u306e\u611f\u3058\u3067\u3002\n\nxxx.sublime-project\n{\n    \"folders\":\n    [\n        {\n            //\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u306e\u30d5\u30a9\u30eb\u30c0\n            \"path\": \"~~~~\"\n        }\n    ],\n\n    \"settings\":\n    {\n        \"SublimeLinter\":\n        {\n            \"d\":\n            {\n                //dmd\u52d5\u304b\u3057\u305f\u3044\u30d5\u30a9\u30eb\u30c0\u3002\u4e0a\u306e\u30d5\u30a9\u30eb\u30c0\u3068\u540c\u3058\u306b\u306a\u3063\u305f\u308a\u3059\u308b\u304b\u3082\u3002\n                \"working_directory\": \"~~~~~\"\n            }\n        }\n    }\n}\n\n\n\n\nparse_errors\u306e\u4e2d\u8eab\nbuilt_in_check\u306ereturn\u3067\u6e21\u3055\u308c\u305f\u30b3\u30f3\u30d1\u30a4\u30eb\u30a8\u30e9\u30fc\u306e\u30a8\u30e9\u30fc\u30e1\u30c3\u30bb\u30fc\u30b8\u306fparse_errors\u5f15\u6570\u306elines\u306b\u6e21\u3055\u308c\u308b\u3002\n\u5f8c\u306flines\u306e\u5404\u884c\u306b\u3042\u308b\u30a8\u30e9\u30fc\u30e1\u30c3\u30bb\u30fc\u30b8\u304b\u3089\u3001\u30a8\u30e9\u30fc\u30e1\u30c3\u30bb\u30fc\u30b8\u3068\u305d\u306e\u30a8\u30e9\u30fc\u884c\u3092\u5207\u308a\u51fa\u3057\u3066self.add_message\u95a2\u6570\u306b\u6e21\u305b\u3070\u3044\u3044\u3002\n\u3053\u3053\u3067\u306e\u6ce8\u610f\u70b9\u306f\u4ee5\u4e0b\u306e\u901a\u308a\u3002\n\ndmd\u306ev2.060\u3067\u306f\u3001\u4e00\u90e8\u66f8\u3044\u305f\u30bd\u30fc\u30b9\u610f\u5916\u306e\u5834\u6240\u3067\u306e\u30b3\u30f3\u30d1\u30a4\u30eb\u30a8\u30e9\u30fc\u304c\u5410\u304d\u51fa\u3055\u308c\u308b\u3002\u3053\u308c\u306f\u4fee\u6b63\u3055\u308c\u308b\u4e88\u5b9a\u3002\u3053\u306e\u6bb5\u968e\u3067\u306f\u305d\u3093\u306a\u306e\u5410\u304d\u51fa\u3055\u308c\u305f\u3089import\u3057\u3066\u308b\u3060\u308d\u3063\u3066\u524d\u63d0\u3067import\u3057\u3066\u308b\u884c\u306b\u30a8\u30e9\u30fc\u5168\u90e8\u5165\u308c\u8fbc\u3093\u3067\u308b\u3002\n\nerrorMessages\u6e21\u3057\u3066\u308b\u304c\u3053\u3053\u306f\u3042\u307e\u308a\u610f\u5473\u304c\u7121\u3044\u3002\u3068\u3044\u3046\u304b\u4f55\u304c\u6765\u308b\u304b\u8abf\u3079\u3066\u306a\u3044\u3002\u591a\u5206\u4f55\u3082\u5165\u3063\u3066\u306a\u3044\u3002\n\u5206\u304b\u3089\u306a\u304f\u306a\u3063\u305f\u3089base_linter.py\u3092\u8aad\u3082\u3046(\u5927\u4e8b\u306a\u3053\u3068\u306a\u306e\u3067\u4e8c\u56de\u76ee)\n\n\u3068\u3044\u3046\u3053\u3068\u3067(ry\n\nd.py\n\u2026\n    def parse_errors(self, view, errors, lines, errorUnderlines, violationUnderlines, warningUnderlines, errorMessages, violationMessages, warningMessages):\n        for line in errors.splitlines():\n            match = re.match(r'^(?P<filename>.+\\.d)\\((?P<line>\\d+)\\): Error: (?P<error>.+)', line)\n\n            if match:\n                tab_filename = os.path.basename(view.file_name())\n                error_filename = os.path.basename(match.group('filename'))\n                error, line = match.group('error'), match.group('line')\n                if(tab_filename == error_filename):\n                    self.add_message(int(line), lines, error, errorMessages)\n                else:\n                    line = 1\n                    module_name = error_filename.replace('.d', '')\n                    regions = view.find_all(r'import.*\\.' + module_name)\n                    if(regions):\n                        line = view.rowcol(regions[0].a)[0] + 1\n                    self.add_message(line, lines, error, errorMessages)\n\n\n\u3053\u308c\u3067\u304a\u305d\u3089\u304f\u4e0a\u624b\u304f\u884c\u304f\u306f\u305a\u3067\u3059\u3002\u4e0a\u624b\u304f\u884c\u304b\u306a\u304b\u3063\u305f\u3089\u4fee\u6b63\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n\nSublimeLinter\u306fSublimeText2\u306ePackage\u306e\u4e00\u3064\u3067\u3001\u30b3\u30f3\u30d1\u30a4\u30eb\u30a8\u30e9\u30fc\u3084\u30b7\u30f3\u30bf\u30c3\u30af\u30b9\u30a8\u30e9\u30fc\u304c\u8d77\u304d\u305f\u7b87\u6240\u3092\u30cf\u30a4\u30e9\u30a4\u30c8\u3059\u308b\u6a5f\u80fd\u3067\u3059\u3002\n\u4e0b\u306e\u753b\u50cf\u307f\u305f\u3044\u306a\u611f\u3058\u3002\n\n![SublimeLinter\u4f8b](http://desmond.yfrog.com/Himg610/scaled.php?tn=0&server=610&filename=cyxm.png&xsize=640&ysize=640 \"SulimeLinter\u4f8b\")\n\nSublimeLinter\u306b\u3064\u3044\u3066\u516c\u5f0f\u306f\u4ee5\u4e0b\u306e\u30da\u30fc\u30b8\u3002\nhttps://github.com/SublimeLinter/SublimeLinter\n\nSublimeLinter\u306e\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u306f\u4ee5\u4e0b\u306e\u30da\u30fc\u30b8\u53c2\u7167\u3002\nhttp://perl.no-tubo.net/2012/05/03/mac%E3%81%AE%E3%83%86%E3%82%AD%E3%82%B9%E3%83%88%E3%82%A8%E3%83%87%E3%82%A3%E3%82%BF-sublime-text2%E3%81%A7javascript%E3%81%AE%E3%82%B7%E3%83%B3%E3%82%BF%E3%83%83%E3%82%AF%E3%82%B9%E3%82%A8%E3%83%A9/\nhttp://watson1978.github.com/blog/2012/08/23/make-a-sublime-text-environment/\n\n\u3067\u3001\u3053\u308c\u3067\u3069\u3046\u3084\u3063\u3066D\u8a00\u8a9e\u306e\u30cf\u30a4\u30e9\u30a4\u30c8\u3059\u308b\u304b\u3092\u4ee5\u4e0b\u306b\u3002\n\n###D\u8a00\u8a9e\u7528\u30d5\u30a1\u30a4\u30eb\u8ffd\u52a0\nSublimeLinter\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u5f8c\u3001[Sublime Text 2]->[Preference]->[Browse Packages\u2026]\u3067\u30d1\u30c3\u30b1\u30fc\u30b8\u5165\u3063\u3066\u308b\u30d5\u30a9\u30eb\u30c0\u958b\u304f\u3002(MacOS\u306e\u5834\u5408\u3002\u4ed6\u306eOS\u306f\u77e5\u3089\u306a\u3044)\n![BrowsePackage\u2026](http://a.yfrog.com/img863/6499/hnlb.png)\n\n\u3093\u3067\u3001\u30d1\u30c3\u30b1\u30fc\u30b8\u5165\u3063\u3066\u308b\u30d5\u30a9\u30eb\u30c0\u958b\u3044\u305f\u3089\u3001[\u301c\u301c/Packages/SublimeLinter/sublimelinter/modules/]\u30d5\u30a9\u30eb\u30c0\u3092\u958b\u304f\u3002\u4e2d\u306bpython.py\u3068\u304bjava.py\u3068\u304b\u5165\u3063\u3066\u308b\u3068\u601d\u3046\u306e\u3067\u3001d.py\u3092\u4f5c\u6210\u3059\u308b\u3002\n\n###d.py\u306e\u30ac\u30ef\u3092\u4f5c\u6210\nd.py\u306b\u3001objective-j.py\u304b\u3089\u30bd\u30fc\u30b9\u3092\u30b3\u30d4\u30da\u3057\u3066\u3001\u5fc5\u8981\u306a\u3044\u6240\u524a\u9664\u3057\u3066\u4ee5\u4e0b\u307f\u305f\u3044\u306b\u3059\u308b\u3002\n\n```python:d.py\nimport re\nimport os\nimport subprocess\n\nfrom base_linter import BaseLinter\n\nCONFIG = {\n    'language': 'D'\n}\n\n\nclass Linter(BaseLinter):\n    def built_in_check(self, view, code, filename):\n        return ''\n\n    def parse_errors(self, view, errors, lines, errorUnderlines, violationUnderlines, warningUnderlines, errorMessages, violationMessages, warningMessages):\n\t\treturn ''\n\n```\n`built_in_check`\u304c\u30b3\u30fc\u30c9\u3092\u30b3\u30f3\u30d1\u30a4\u30eb\u3057\u3066\u30b3\u30f3\u30d1\u30a4\u30eb\u30a8\u30e9\u30fc\u3092\u8fd4\u3059\u95a2\u6570\u3001`parse_errors`\u304c`built_in_check`\u304b\u3089\u6765\u305f\u30a8\u30e9\u30fc\u3092\u5143\u306b\u30cf\u30a4\u30e9\u30a4\u30c8\u3059\u308b\u5834\u6240\u3092\u6c7a\u3081\u308b\u95a2\u6570\u306b\u5f53\u305f\u308b\u3002\n\n###`built_in_check`\u306e\u4e2d\u8eab\n`built_in_check`\u306e\u5f15\u6570\u306f`self`,`view`,`code`,`filename`\u3002self\u306f\u81ea\u4fe1\u3067(C#\u3067\u8a00\u3046this)\u3001view\u306f\u307e\u3041\u30bf\u30d6\u306e\u30af\u30e9\u30b9\u3001code\u306f**\u7de8\u96c6\u4e2d\u306e\u4fdd\u5b58\u3057\u3066\u306a\u3044\u30d5\u30a1\u30a4\u30eb\u306e\u4e2d\u8eab**\u3067\u3001filename\u306f\u305d\u306e\u307e\u307e\u8868\u793a\u4e2d\u306e\u30d5\u30a1\u30a4\u30eb\u306e\u540d\u524d\u3002\n\u3093\u3067\u3001'built_in_check'\u306b\u30b3\u30fc\u30c9\u30b3\u30f3\u30d1\u30a4\u30eb\u3059\u308b\u4e2d\u8eab\u51e6\u7406\u3092\u66f8\u304f\u3093\u3060\u3051\u3069\u3001\u6ce8\u610f\u70b9\u3068\u304b\u306f\u4ee5\u4e0b\u306e\u901a\u308a\u3002\n\n1. \u30b3\u30f3\u30d1\u30a4\u30eb\u5bfe\u8c61\u306fcode\u306b\u3059\u308b\u3002filename\u306e\u30d5\u30a1\u30a4\u30eb\u3092\u30b3\u30f3\u30d1\u30a4\u30eb\u3059\u308b\u3068\u7de8\u96c6\u524d\u306e\u30d5\u30a1\u30a4\u30eb\u3092\u30b3\u30f3\u30d1\u30a4\u30eb\u3059\u308b\u306e\u3067\u304a\u304b\u3057\u306a\u4e8b\u306b\u306a\u308b\u3002code\u3092d.py\u306e\u3042\u308b\u9069\u5f53\u306a\u30d5\u30a9\u30eb\u30c0\u306b\u4fdd\u5b58\u3057\u3066\u305d\u308c\u3092\u30b3\u30f3\u30d1\u30a4\u30eb\u3059\u308b\n2. dmd\u306e\u30b3\u30f3\u30d1\u30a4\u30eb\u30aa\u30d7\u30b7\u30e7\u30f3\u306f`-c -o- -w -unittest -debug`\u3067\n3. \u5206\u304b\u3089\u306a\u304f\u306a\u3063\u305f\u3089`base_linter.py`\u3092\u8aad\u3082\u3046\n\n\u3068\u3044\u3046\u3053\u3068\u3067\u305d\u306e\u7d50\u679c\u304c\u4ee5\u4e0b\u3002\n\n```python:d.py\n\u2026\n#\u66f8\u3044\u3066\u308b\u9014\u4e2d\u306e\u30d5\u30a1\u30a4\u30eb\u3092\u66f8\u304d\u51fa\u3059temp\u30d5\u30a9\u30eb\u30c0\nTMPPATH_DIR = os.path.abspath(os.path.join(os.path.dirname(__file__), '.dtmpfiles'))\nif not os.path.exists(TMPPATH_DIR):\n    os.mkdir(TMPPATH_DIR)\n\u2026\nclass Linter(BaseLinter):\n    def built_in_check(self, view, code, filename):\n      def built_in_check(self, view, code, filename):\n        #\u30d1\u30b9\u53d6\u5f97\n        work_path = os.path.dirname(filename)\n        file_name = os.path.basename(filename)\n\n\t\t #\u30b3\u30f3\u30d1\u30a4\u30eb\u5834\u6240\u306e\u8a2d\u5b9a\u53d6\u5f97\n        settings = view.settings().get('SublimeLinter', {}).get(self.language, {})\n        if(settings):\n            dwd = settings.get('working_directory', [])\n            if(dwd):\n                #\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u306b\u8a2d\u5b9a\u3042\u3063\u305f\u3089\u305d\u308c\u3092\u53d6\u5f97\n                work_path = dwd\n\n        #\u66f8\u3044\u3066\u308b\u9014\u4e2d\u306e\u30d5\u30a1\u30a4\u30eb\u3092temp\u30d5\u30a1\u30a4\u30eb\u3068\u3057\u3066d.py\u76f4\u4e0b\u306b\u66f8\u304d\u51fa\u3057\n        tempfilePath = os.path.join(TMPPATH_DIR, file_name)\n\n        with open(tempfilePath, 'w') as f:\n            f.write(code)\n\n        args = [\"dmd\", \"-c\", \"-o-\", \"-w\", \"-unittest\", \"-debug\", tempfilePath]\n\n        try:\n\t\t\t#\u30b3\u30f3\u30d1\u30a4\u30eb\n            process = subprocess.Popen(args,\n                                        cwd=work_path,\n                                        stdin=subprocess.PIPE,\n                                        stdout=subprocess.PIPE,\n                                        stderr=subprocess.STDOUT,\n                                        startupinfo=self.get_startupinfo())\n            result = process.communicate(None)[0]\n        finally:\n            if tempfilePath:\n                #\u4fdd\u5b58\u3057\u305f\u30d5\u30a1\u30a4\u30eb\u306e\u524a\u9664\n                os.remove(tempfilePath)\n\n        return result.strip()\n\u2026\n```\n\nSublimeText2\u306b\u306f\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u7ba1\u7406\u306e\u6a5f\u80fd\u304c\u3042\u308b\u306e\u3060\u3051\u3069\u3001\u305d\u306e\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u30d5\u30a1\u30a4\u30eb\u306b\u8a2d\u5b9a\u3092\u66f8\u304f\u3068\u3001dmd\u3059\u308b\u5834\u6240\u3092\u8a2d\u5b9a\u51fa\u6765\u308b\u3002\u81ea\u5206\u3067\u4f5c\u3063\u305fmodule\u3068\u304b\u3092import\u3057\u3066\u308b\u6642\u306f\u305d\u308c\u3092\u3057\u306a\u3044\u3068import\u90e8\u5206\u3067\u30b3\u30f3\u30d1\u30a4\u30eb\u30a8\u30e9\u30fc\u8d77\u3053\u308b(\u3068\u601d\u3046)\u3002\n\u8a2d\u5b9a\u306f\u4ee5\u4e0b\u306e\u611f\u3058\u3067\u3002\n\n```json:xxx.sublime-project\n{\n\t\"folders\":\n\t[\n\t\t{\n\t\t\t//\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u306e\u30d5\u30a9\u30eb\u30c0\n\t\t\t\"path\": \"~~~~\"\n\t\t}\n\t],\n\n\t\"settings\":\n    {\n        \"SublimeLinter\":\n        {\n            \"d\":\n            {\n\t\t\t\t//dmd\u52d5\u304b\u3057\u305f\u3044\u30d5\u30a9\u30eb\u30c0\u3002\u4e0a\u306e\u30d5\u30a9\u30eb\u30c0\u3068\u540c\u3058\u306b\u306a\u3063\u305f\u308a\u3059\u308b\u304b\u3082\u3002\n                \"working_directory\": \"~~~~~\"\n            }\n        }\n    }\n}\n\n```\n\n\n###`parse_errors`\u306e\u4e2d\u8eab\n`built_in_check`\u306ereturn\u3067\u6e21\u3055\u308c\u305f\u30b3\u30f3\u30d1\u30a4\u30eb\u30a8\u30e9\u30fc\u306e\u30a8\u30e9\u30fc\u30e1\u30c3\u30bb\u30fc\u30b8\u306f`parse_errors`\u5f15\u6570\u306e`lines`\u306b\u6e21\u3055\u308c\u308b\u3002\n\u5f8c\u306f`lines`\u306e\u5404\u884c\u306b\u3042\u308b\u30a8\u30e9\u30fc\u30e1\u30c3\u30bb\u30fc\u30b8\u304b\u3089\u3001\u30a8\u30e9\u30fc\u30e1\u30c3\u30bb\u30fc\u30b8\u3068\u305d\u306e\u30a8\u30e9\u30fc\u884c\u3092\u5207\u308a\u51fa\u3057\u3066`self.add_message`\u95a2\u6570\u306b\u6e21\u305b\u3070\u3044\u3044\u3002\n\u3053\u3053\u3067\u306e\u6ce8\u610f\u70b9\u306f\u4ee5\u4e0b\u306e\u901a\u308a\u3002\n\n1. dmd\u306ev2.060\u3067\u306f\u3001\u4e00\u90e8\u66f8\u3044\u305f\u30bd\u30fc\u30b9\u610f\u5916\u306e\u5834\u6240\u3067\u306e\u30b3\u30f3\u30d1\u30a4\u30eb\u30a8\u30e9\u30fc\u304c\u5410\u304d\u51fa\u3055\u308c\u308b\u3002\u3053\u308c\u306f\u4fee\u6b63\u3055\u308c\u308b\u4e88\u5b9a\u3002\u3053\u306e\u6bb5\u968e\u3067\u306f\u305d\u3093\u306a\u306e\u5410\u304d\u51fa\u3055\u308c\u305f\u3089import\u3057\u3066\u308b\u3060\u308d\u3063\u3066\u524d\u63d0\u3067import\u3057\u3066\u308b\u884c\u306b\u30a8\u30e9\u30fc\u5168\u90e8\u5165\u308c\u8fbc\u3093\u3067\u308b\u3002\n2. `errorMessages`\u6e21\u3057\u3066\u308b\u304c\u3053\u3053\u306f\u3042\u307e\u308a\u610f\u5473\u304c\u7121\u3044\u3002\u3068\u3044\u3046\u304b\u4f55\u304c\u6765\u308b\u304b\u8abf\u3079\u3066\u306a\u3044\u3002\u591a\u5206\u4f55\u3082\u5165\u3063\u3066\u306a\u3044\u3002\n3. \u5206\u304b\u3089\u306a\u304f\u306a\u3063\u305f\u3089`base_linter.py`\u3092\u8aad\u3082\u3046(\u5927\u4e8b\u306a\u3053\u3068\u306a\u306e\u3067\u4e8c\u56de\u76ee)\n\n\u3068\u3044\u3046\u3053\u3068\u3067(ry\n\n```python:d.py\n\u2026\n    def parse_errors(self, view, errors, lines, errorUnderlines, violationUnderlines, warningUnderlines, errorMessages, violationMessages, warningMessages):\n        for line in errors.splitlines():\n            match = re.match(r'^(?P<filename>.+\\.d)\\((?P<line>\\d+)\\): Error: (?P<error>.+)', line)\n\n            if match:\n                tab_filename = os.path.basename(view.file_name())\n                error_filename = os.path.basename(match.group('filename'))\n                error, line = match.group('error'), match.group('line')\n                if(tab_filename == error_filename):\n                    self.add_message(int(line), lines, error, errorMessages)\n                else:\n                    line = 1\n                    module_name = error_filename.replace('.d', '')\n                    regions = view.find_all(r'import.*\\.' + module_name)\n                    if(regions):\n                        line = view.rowcol(regions[0].a)[0] + 1\n                    self.add_message(line, lines, error, errorMessages)\n```\n\n\u3053\u308c\u3067\u304a\u305d\u3089\u304f\u4e0a\u624b\u304f\u884c\u304f\u306f\u305a\u3067\u3059\u3002\u4e0a\u624b\u304f\u884c\u304b\u306a\u304b\u3063\u305f\u3089\u4fee\u6b63\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n", "tags": ["SublimeText2", "Python", "d_lang"]}