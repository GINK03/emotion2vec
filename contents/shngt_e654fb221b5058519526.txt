{"context": "Facebook\u304c\u30bb\u30b0\u30e1\u30f3\u30c6\u30fc\u30b7\u30e7\u30f3\u30d5\u30ec\u30fc\u30e0\u30ef\u30fc\u30af\u3092\u30aa\u30fc\u30d7\u30f3\u30bd\u30fc\u30b9\u5316\u3057\u305f\u3068\u805e\u3044\u3066\u3001\u3061\u3087\u3046\u3069\u30bb\u30b0\u30e1\u30f3\u30c6\u30fc\u30b7\u30e7\u30f3\u304c\u5fc5\u8981\u3060\u3063\u305f\u306e\u3067\u8abf\u3079\u3066\u307f\u305f\u3002\nSegmenting and refining images with SharpMask\nLua\u3060\u3063\u305f\u308aTorch\u3060\u3063\u305f\u308a\u3059\u308b\u306e\u306f\u4ed5\u65b9\u304c\u306a\u3044\u3068\u3057\u3066\u3001\u4eca\u56de\u306f\u6559\u5e2b\u306a\u3057\u3067\u5019\u88dc\u9818\u57df\u3092\u5f97\u305f\u304b\u3063\u305f\u306e\u3060\u304c\u3001\u3053\u306e\u30d5\u30ec\u30fc\u30e0\u30ef\u30fc\u30af\u306f\u6559\u5e2b\u3042\u308a\u306e\u3088\u3046\u3060\u3063\u305f\u306e\u3067\u5229\u7528\u3092\u65ad\u5ff5\u3057\u3066\u4ed6\u306e\u3082\u306e\u3092\u63a2\u3057\u305f\u3002\n\u305d\u3046\u3059\u308b\u3068\u3001OpenCV\u306b\u305d\u306e\u3088\u3046\u306a\u6a5f\u80fd\u304c\u3042\u3063\u305f\u306e\u3067\u8a66\u3057\u3066\u307f\u305f\u3002\n\ngraph_segmentation.py\nimport cv2\nimport numpy as np\n\nsegmentator = cv2.ximgproc.segmentation.createGraphSegmentation(sigma=0.5, k=300, min_size=1000)\nsrc = cv2.imread('image.jpg')\nsegment = segmentator.processImage(src)\nmask = segment.reshape(list(segment.shape) + [1]).repeat(3, axis=2)\nmasked = np.ma.masked_array(src, fill_value=0)\nfor i in range(np.max(segment)):\n    masked.mask = mask != i\n    y, x = np.where(segment == i)\n    top, bottom, left, right = min(y), max(y), min(x), max(x)\n    dst = masked.filled()[top : bottom + 1, left : right + 1]\n    cv2.imwrite('segment_{num}.jpg'.format(num=i), dst)\n\n\n\n\n\n\u30d1\u30e9\u30e1\u30fc\u30bf\n\n\n\n\n\nsigma\n\u5883\u754c\u7dda\u306e\u6ed1\u3089\u304b\u3055\uff08\u8907\u96d1\u306a\u5883\u754c\u7dda\u306b\u306f\u5c0f\u3055\u3044\u5024\u3001\u6ed1\u3089\u304b\u306a\u5883\u754c\u7dda\u306b\u306f\u5927\u304d\u3044\u5024\uff09\n\n\nk\n\u305f\u3076\u3093\u3001\u3069\u308c\u304f\u3089\u3044\u5019\u88dc\u9818\u57df\u3092\u7d71\u5408\u3059\u308b\u304b\uff08\u5024\u304c\u5c0f\u3055\u3044\u3068\u591a\u304f\u306e\u5c0f\u3055\u3044\u9818\u57df\u3001\u5927\u304d\u3044\u3068\u5c11\u306a\u3044\u5927\u304d\u306a\u9818\u57df\u306b\u5206\u5272\uff1f\uff09\n\n\nmin_size\n\u9818\u57df\u306e\u6700\u5c0f\u30b5\u30a4\u30ba\uff08\u305f\u3076\u3093\u9818\u57df\u306e\u30d4\u30af\u30bb\u30eb\u6570\uff09\n\n\n\n\u5730\u5473\u306b\u5019\u88dc\u9818\u57df\u3060\u3051\u3092\u5207\u308a\u51fa\u3059\u3068\u3053\u308d\u304c\u96e3\u3057\u304b\u3063\u305f\u3002\nNumpy\u3067\u3084\u308b\u4ee5\u5916\u306b\u3082\u3001OpenCV\u306eboundingRect\u3092\u4f7f\u3046\u65b9\u6cd5\u304c\u3042\u308b\u3089\u3057\u3044\u3002\n\u8ffd\u8a18\uff1a\nsegmentator.setSigma(value), segmentator.setK(value), segmentator.setMinSize(value)\u3067\u5024\u3092\u5909\u66f4\u53ef\u80fd\u3002\n\u305d\u306e\u307e\u307e\u3067\u306f\u8f09\u305b\u3089\u308c\u306a\u3044Lena\u3055\u3093\u306e\u5168\u8eab\u50cf\u3078\u306e\u9069\u7528\u7d50\u679c\uff08sigma=0.7, k=1200, min_size=5000\uff09\n\nFacebook\u304c\u30bb\u30b0\u30e1\u30f3\u30c6\u30fc\u30b7\u30e7\u30f3\u30d5\u30ec\u30fc\u30e0\u30ef\u30fc\u30af\u3092\u30aa\u30fc\u30d7\u30f3\u30bd\u30fc\u30b9\u5316\u3057\u305f\u3068\u805e\u3044\u3066\u3001\u3061\u3087\u3046\u3069\u30bb\u30b0\u30e1\u30f3\u30c6\u30fc\u30b7\u30e7\u30f3\u304c\u5fc5\u8981\u3060\u3063\u305f\u306e\u3067\u8abf\u3079\u3066\u307f\u305f\u3002\n\n[Segmenting and refining images with SharpMask](https://code.facebook.com/posts/561187904071636)\n\nLua\u3060\u3063\u305f\u308aTorch\u3060\u3063\u305f\u308a\u3059\u308b\u306e\u306f\u4ed5\u65b9\u304c\u306a\u3044\u3068\u3057\u3066\u3001\u4eca\u56de\u306f\u6559\u5e2b\u306a\u3057\u3067\u5019\u88dc\u9818\u57df\u3092\u5f97\u305f\u304b\u3063\u305f\u306e\u3060\u304c\u3001\u3053\u306e\u30d5\u30ec\u30fc\u30e0\u30ef\u30fc\u30af\u306f\u6559\u5e2b\u3042\u308a\u306e\u3088\u3046\u3060\u3063\u305f\u306e\u3067\u5229\u7528\u3092\u65ad\u5ff5\u3057\u3066\u4ed6\u306e\u3082\u306e\u3092\u63a2\u3057\u305f\u3002\n\u305d\u3046\u3059\u308b\u3068\u3001OpenCV\u306b\u305d\u306e\u3088\u3046\u306a\u6a5f\u80fd\u304c\u3042\u3063\u305f\u306e\u3067\u8a66\u3057\u3066\u307f\u305f\u3002\n\n```python:graph_segmentation.py\nimport cv2\nimport numpy as np\n\nsegmentator = cv2.ximgproc.segmentation.createGraphSegmentation(sigma=0.5, k=300, min_size=1000)\nsrc = cv2.imread('image.jpg')\nsegment = segmentator.processImage(src)\nmask = segment.reshape(list(segment.shape) + [1]).repeat(3, axis=2)\nmasked = np.ma.masked_array(src, fill_value=0)\nfor i in range(np.max(segment)):\n    masked.mask = mask != i\n    y, x = np.where(segment == i)\n    top, bottom, left, right = min(y), max(y), min(x), max(x)\n    dst = masked.filled()[top : bottom + 1, left : right + 1]\n    cv2.imwrite('segment_{num}.jpg'.format(num=i), dst)\n```\n\n|\u30d1\u30e9\u30e1\u30fc\u30bf|   |\n|:------:|:--|\n|sigma|\u5883\u754c\u7dda\u306e\u6ed1\u3089\u304b\u3055\uff08\u8907\u96d1\u306a\u5883\u754c\u7dda\u306b\u306f\u5c0f\u3055\u3044\u5024\u3001\u6ed1\u3089\u304b\u306a\u5883\u754c\u7dda\u306b\u306f\u5927\u304d\u3044\u5024\uff09|\n|k|\u305f\u3076\u3093\u3001\u3069\u308c\u304f\u3089\u3044\u5019\u88dc\u9818\u57df\u3092\u7d71\u5408\u3059\u308b\u304b\uff08\u5024\u304c\u5c0f\u3055\u3044\u3068\u591a\u304f\u306e\u5c0f\u3055\u3044\u9818\u57df\u3001\u5927\u304d\u3044\u3068\u5c11\u306a\u3044\u5927\u304d\u306a\u9818\u57df\u306b\u5206\u5272\uff1f\uff09|\n|min_size|\u9818\u57df\u306e\u6700\u5c0f\u30b5\u30a4\u30ba\uff08\u305f\u3076\u3093\u9818\u57df\u306e\u30d4\u30af\u30bb\u30eb\u6570\uff09|\n\n\u5730\u5473\u306b\u5019\u88dc\u9818\u57df\u3060\u3051\u3092\u5207\u308a\u51fa\u3059\u3068\u3053\u308d\u304c\u96e3\u3057\u304b\u3063\u305f\u3002\nNumpy\u3067\u3084\u308b\u4ee5\u5916\u306b\u3082\u3001OpenCV\u306eboundingRect\u3092\u4f7f\u3046\u65b9\u6cd5\u304c\u3042\u308b\u3089\u3057\u3044\u3002\n\n\u8ffd\u8a18\uff1a\nsegmentator.setSigma(value), segmentator.setK(value), segmentator.setMinSize(value)\u3067\u5024\u3092\u5909\u66f4\u53ef\u80fd\u3002\n\n\u305d\u306e\u307e\u307e\u3067\u306f\u8f09\u305b\u3089\u308c\u306a\u3044Lena\u3055\u3093\u306e\u5168\u8eab\u50cf\u3078\u306e\u9069\u7528\u7d50\u679c\uff08sigma=0.7, k=1200, min_size=5000\uff09\n![lena_seg.png](https://qiita-image-store.s3.amazonaws.com/0/103085/336b1754-d8d0-e132-0436-e57f646d7854.png)\n", "tags": ["Python", "OpenCV"]}