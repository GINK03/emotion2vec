{"context": " More than 1 year has passed since last update.http://yhpg.doorkeeper.jp/\u306e\u904e\u53bb\u9580\u3092\u89e3\u3044\u3066\u307f\u305f\u3002\n(def won-pattern [2r111000000 2r000111000 2r000000111 2r100100100 2r010010010 2r001001001 2r100010001 2r001010100])\n\n(defn win? [prots]\n  (if (> 2 (count prots)) false\n    (let [current-bit (apply bit-or (map #(.intValue (Math/pow 2 (- % 1))) prots))]\n      (some (fn [x] (= x (bit-and current-bit x))) won-pattern))))\n\n(defn judge [a-prots b-prots f?]\n  (let [target (if f? a-prots b-prots)\n        enemy (if f? b-prots a-prots)\n        t-name (if f? \"\u25cb\" \"\u00d7\")\n        e-name (if f? \"\u00d7\" \"\u25cb\")]\n    (cond\n     (win? target) (str t-name \" won.\")\n     (not= target (distinct target)) (str \"Foul : \" e-name \" won.\")\n     (some #(.contains target %) enemy) (str \"Foul : \" e-name \" won.\")\n     :else nil)))\n\n(defn solve [all-prots]\n  (loop [a-prots [] b-prots [] r-prots all-prots f? true]\n    (letfn [(add [coll f?] (if f? (conj coll (read-string (str (first r-prots)))) coll))]\n      (let [a-prots (add a-prots f?)\n            b-prots (add b-prots (not f?))\n            result (judge a-prots b-prots f?)]\n        (if result result\n          (if (= (count (concat a-prots b-prots)) 9) \"Draw game.\" (recur a-prots b-prots (rest r-prots) (not f?))))))))\n\n(solve \"79538245\")\n(solve \"35497162193\")\n(solve \"61978543\")\n(solve \"254961323121\")\n(solve \"6134278187\")\n(solve \"9625663381\")\n(solve \"4319581\")\n(solve \"2368799597\")\n(solve \"18652368566\")\n(solve \"965715\")\n(solve \"38745796\")\n(solve \"371929\")\n(solve \"758698769\")\n(solve \"42683953\")\n(solve \"618843927\")\n(solve \"36535224\")\n(solve \"882973\")\n(solve \"653675681\")\n(solve \"9729934662\")\n(solve \"972651483927\")\n(solve \"5439126787\")\n(solve \"142583697\")\n(solve \"42198637563\")\n(solve \"657391482\")\n\nhttp://yhpg.doorkeeper.jp/\u306e\u904e\u53bb\u9580\u3092\u89e3\u3044\u3066\u307f\u305f\u3002\n\n```clj\n(def won-pattern [2r111000000 2r000111000 2r000000111 2r100100100 2r010010010 2r001001001 2r100010001 2r001010100])\n\n(defn win? [prots]\n  (if (> 2 (count prots)) false\n    (let [current-bit (apply bit-or (map #(.intValue (Math/pow 2 (- % 1))) prots))]\n      (some (fn [x] (= x (bit-and current-bit x))) won-pattern))))\n\n(defn judge [a-prots b-prots f?]\n  (let [target (if f? a-prots b-prots)\n        enemy (if f? b-prots a-prots)\n        t-name (if f? \"\u25cb\" \"\u00d7\")\n        e-name (if f? \"\u00d7\" \"\u25cb\")]\n    (cond\n     (win? target) (str t-name \" won.\")\n     (not= target (distinct target)) (str \"Foul : \" e-name \" won.\")\n     (some #(.contains target %) enemy) (str \"Foul : \" e-name \" won.\")\n     :else nil)))\n\n(defn solve [all-prots]\n  (loop [a-prots [] b-prots [] r-prots all-prots f? true]\n    (letfn [(add [coll f?] (if f? (conj coll (read-string (str (first r-prots)))) coll))]\n      (let [a-prots (add a-prots f?)\n            b-prots (add b-prots (not f?))\n            result (judge a-prots b-prots f?)]\n        (if result result\n          (if (= (count (concat a-prots b-prots)) 9) \"Draw game.\" (recur a-prots b-prots (rest r-prots) (not f?))))))))\n\n(solve \"79538245\")\n(solve \"35497162193\")\n(solve \"61978543\")\n(solve \"254961323121\")\n(solve \"6134278187\")\n(solve \"9625663381\")\n(solve \"4319581\")\n(solve \"2368799597\")\n(solve \"18652368566\")\n(solve \"965715\")\n(solve \"38745796\")\n(solve \"371929\")\n(solve \"758698769\")\n(solve \"42683953\")\n(solve \"618843927\")\n(solve \"36535224\")\n(solve \"882973\")\n(solve \"653675681\")\n(solve \"9729934662\")\n(solve \"972651483927\")\n(solve \"5439126787\")\n(solve \"142583697\")\n(solve \"42198637563\")\n(solve \"657391482\")\n```\n", "tags": ["\u3069\u3046\u66f8\u304f", "yhpg", "Clojure"]}