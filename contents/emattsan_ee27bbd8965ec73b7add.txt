{"context": " More than 1 year has passed since last update.\u4e45\u3005\u306e\u30aa\u30f3\u30e9\u30a4\u30f3\u53c2\u52a0\u3002\n\u6700\u521d\u3001\u6642\u9593\u306e\u7bc4\u56f2\u3092\u30af\u30e9\u30b9\u3067\u8868\u73fe\u3057\u3088\u3046\u3068\u3057\u305f\u306e\u3067\u3059\u304c\u3001\u305d\u306e\u6f14\u7b97\u3092\u7528\u610f\u3059\u308b\u3060\u3051\u3067\uff11\u6642\u9593\u304c\u7d4c\u904e\u3057\u3066\u3057\u307e\u3044\u3001\u4e00\u65e6\u3042\u304d\u3089\u3081\u307e\u3057\u305f\u3002\n30\u5206\u307b\u3069\u98a8\u5442\u306b\u5165\u3063\u3066\u982d\u3092\u51b7\u3084\u3057\uff08\uff1f\uff09\u3001\u3082\u3046\u4e00\u3064\u306e\u30a2\u30a4\u30c7\u30a3\u30a2\u3067\u3042\u308b\u30d3\u30c3\u30c8\u30d5\u30a3\u30fc\u30eb\u30c9\u3067\u8868\u73fe\u3059\u308b\u65b9\u6cd5\u3092\u4f7f\u3063\u3066\u66f8\u304d\u76f4\u3057\u3066\u307f\u307e\u3057\u305f\u3002\n\u66f8\u304d\u76f4\u3057\u306745\u5206\u3050\u3089\u3044\u3067\u3057\u305f\u3002\n#include <iostream>\n#include <sstream>\n#include <iomanip>\n#include <iterator>\n#include <algorithm>\n#include <utility>\n#include <vector>\n#include <bitset>\n\ntypedef std::bitset<24 * 60>              TimeSlot;\ntypedef std::vector<std::pair<int, int> > TimeSlots;\n\nvoid reset(TimeSlot& slot, int head, int tail)\n{\n    head = (head / 100) * 60 + (head % 100);\n    tail = (tail / 100) * 60 + (tail % 100);\n    for(int i = head; i < tail; ++i)\n    {\n        slot.reset(i);\n    }\n}\n\nvoid set(TimeSlot& slot, int head, int tail)\n{\n    head = (head / 100) * 60 + (head % 100);\n    tail = (tail / 100) * 60 + (tail % 100);\n    for(int i = head; i < tail; ++i)\n    {\n        slot.set(i);\n    }\n}\n\nTimeSlots find(const TimeSlot& slot, int min)\n{\n    TimeSlots result;\n    int pos = -1;\n    for(int i = 0; i < slot.size(); ++i)\n    {\n        if(slot[i])\n        {\n            if(pos < 0)\n            {\n                pos = i;\n            }\n        }\n        else\n        {\n            if((0 <= pos) && (min <= (i - pos)))\n            {\n                result.push_back(std::make_pair(pos, i - pos));\n            }\n            pos = -1;\n        }\n    }\n\n    if(0 <= pos)\n    {\n        result.push_back(std::make_pair(pos, slot.size() - pos));\n    }\n\n    return result;\n}\n\nvoid test(const std::string& source, const std::string& expected)\n{\n    TimeSlot room;\n    TimeSlot a;\n    TimeSlot b;\n    TimeSlot i;\n    TimeSlot j;\n    TimeSlot z;\n\n    set(room, 1000, 1800);\n    a.flip();\n    b.flip();\n    i.flip();\n    j.flip();\n\n    std::istringstream iss(source);\n    while(iss.good())\n    {\n        char c;\n        char sep;\n        int  head;\n        int  tail;\n        iss >> c >> head >> sep >> tail;\n        switch(c)\n        {\n        case 'A': reset(a, head, tail); break;\n        case 'B': reset(b, head, tail); break;\n        case 'I': reset(i, head, tail); break;\n        case 'J': reset(j, head, tail); break;\n        case 'Z': set(z, head, tail); break;\n        }\n        iss >> sep;\n    }\n\n    room &= z;\n    room &= a;\n    room &= b;\n\n    TimeSlots slots_i = find(room & i, 60);\n    TimeSlots slots_j = find(room & j, 60);\n\n    std::ostringstream oss;\n    oss.fill('0');\n    int time = 0;\n\n    if((slots_i.size() > 0) && (slots_j.size() > 0))\n    {\n        time = std::min(slots_i[0].first, slots_j[0].first);\n    }\n    else if(slots_i.size() > 0)\n    {\n        time = slots_i[0].first;\n    }\n    else if(slots_j.size() > 0)\n    {\n        time = slots_j[0].first;\n    }\n\n    if(time != 0)\n    {\n        int hour = time / 60;\n        int min  = time % 60;\n        oss << std::setw(2) << hour\n            << std::setw(2) << min\n            << '-'\n            << std::setw(2) << (hour + 1)\n            << std::setw(2) << min;\n    }\n    else\n    {\n        oss << \"-\";\n    }\n    std::string actual = oss.str();\n    std::string result = (expected == actual) ? \"o\" : \"x\";\n\n    std::cout\n        << \"expected: \" << expected\n        << \", actual: \" << actual\n        << \", result: \" << result\n        << std::endl;\n}\n\nint main(int argc, char* argv[])\n{\n    /*0*/ test( \"A1050-1130,B1400-1415,I1000-1400,I1600-1800,J1100-1745,Z1400-1421,Z1425-1800\", \"1425-1525\" );\n    /*1*/ test( \"A1000-1200,B1300-1800,Z1000-1215,Z1230-1800\", \"-\" );\n    /*2*/ test( \"Z0800-2200\", \"1000-1100\" );\n    /*3*/ test( \"A1000-1700,Z0800-2200\", \"1700-1800\" );\n    /*4*/ test( \"A1000-1701,Z0800-2200\", \"-\" );\n    /*5*/ test( \"A1000-1130,B1230-1800,Z0800-2200\", \"1130-1230\" );\n    /*6*/ test( \"A1000-1129,B1230-1800,Z0800-2200\", \"1129-1229\" );\n    /*7*/ test( \"A1000-1131,B1230-1800,Z0800-2200\", \"-\" );\n    /*8*/ test( \"A1000-1130,B1229-1800,Z0800-2200\", \"-\" );\n    /*9*/ test( \"A1000-1130,B1231-1800,Z0800-2200\", \"1130-1230\" );\n    /*10*/ test( \"A1000-1130,B1230-1800,Z0800-1130,Z1131-2200\", \"-\" );\n    /*11*/ test( \"A1000-1130,B1231-1800,Z0800-1130,Z1131-2200\", \"1131-1231\" );\n    /*12*/ test( \"Z0800-0801\", \"-\" );\n    /*13*/ test( \"Z0800-1031,Z1129-1220,Z1315-1400,Z1459-1600\", \"1459-1559\" );\n    /*14*/ test( \"Z0800-2200,I1000-1600,J1030-1730\", \"1600-1700\" );\n    /*15*/ test( \"Z0800-2200,I1000-1600,J1130-1730\", \"1000-1100\" );\n    /*16*/ test( \"Z0800-2200,I1000-1600,J1130-1730,A0800-1025\", \"1025-1125\" );\n    /*17*/ test( \"Z0800-2200,I1000-1600,J1130-1730,A0800-1645\", \"1645-1745\" );\n    /*18*/ test( \"Z0800-2200,I1000-1600,J1130-1730,A0800-1645,I1735-2200\", \"-\" );\n    /*19*/ test( \"Z0800-2200,I1000-1600,J1130-1730,A0800-1645,J1735-2200\", \"1645-1745\" );\n    /*20*/ test( \"Z1030-2200,I1000-1600,J1130-1730\", \"1030-1130\" );\n    /*21*/ test( \"Z1035-1500,I1000-1600,J1130-1730,Z1644-2200\", \"1644-1744\" );\n    /*22*/ test( \"I2344-2350,A2016-2253,Z1246-1952\", \"1246-1346\" );\n    /*23*/ test( \"Z2155-2157,B1822-2032,Z1404-2000,Z2042-2147,Z2149-2154\", \"1404-1504\" );\n    /*24*/ test( \"Z2231-2250,Z2128-2219,B2219-2227,B2229-2230,Z0713-2121,A0825-1035,B1834-2001\", \"1035-1135\" );\n    /*25*/ test( \"J0807-1247,I0911-1414,B1004-1553,Z0626-1732,Z1830-1905,A1946-1954,A0623-1921\", \"-\" );\n    /*26*/ test( \"J1539-1733,J0633-1514,Z1831-1939,J1956-1959,I0817-1007,I1052-1524,Z1235-1756,Z0656-1144\", \"1524-1624\" );\n    /*27*/ test( \"Z2319-2350,B0833-2028,I2044-2222,A1410-2201,Z2044-2228,Z0830-2023,Z2242-2306,I2355-2359\", \"-\" );\n    /*28*/ test( \"B2001-2118,Z0712-1634,I1941-2102,B1436-1917\", \"1000-1100\" );\n    /*29*/ test( \"A0755-1417,B2303-2335,Z0854-2150,Z2348-2356,Z2156-2340,I1024-1307,Z2357-2359\", \"1417-1517\" );\n    /*30*/ test( \"A1958-1959,B0822-1155,I1518-1622,Z1406-1947,A1800-1822,A0904-1422,J1730-1924,Z1954-1958,A1946-1956\", \"1422-1522\" );\n    /*31*/ test( \"B1610-1910,I2121-2139,A0619-1412,I2147-2153,Z0602-2111,I0841-2031,A1657-1905,A1956-2047,J0959-1032,Z2131-2147\", \"1412-1512\" );\n    /*32*/ test( \"Z0623-1900,A0703-1129,I1815-1910,J1956-1957,I0844-1518,Z1902-1935,B1312-1342,J1817-1955\", \"1129-1229\" );\n    /*33*/ test( \"J1246-1328,B1323-1449,I1039-1746,Z1218-2111\", \"1449-1549\" );\n    /*34*/ test( \"A1958-1959,I1943-1944,I0731-1722,Z0845-1846,J1044-1513,Z1910-1923,B1216-1249\", \"1513-1613\" );\n    /*35*/ test( \"A1855-2047,Z0946-1849,Z2056-2059,I1855-1910,B1946-2058,I1956-2025,Z1905-2054,J0644-1800,I0720-1618\", \"1618-1718\" );\n    /*36*/ test( \"J1525-1950,Z0905-1933,A1648-1716,I2051-2054,I2015-2044,I0804-1958,B0934-1100,Z1953-2037\", \"1100-1200\" );\n    /*37*/ test( \"Z1914-1956,J0823-1610,Z0641-1841,J1800-1835,A0831-1346,I1926-1941,I1030-1558,I1738-1803\", \"1558-1658\" );\n    /*38*/ test( \"Z0625-1758,J1033-1351,B1816-2236,I0838-1615,J2247-2255\", \"1351-1451\" );\n    /*39*/ test( \"J0603-1233,A1059-1213,I1326-2103,Z0710-1459\", \"1213-1313\" );\n    /*40*/ test( \"B1302-1351,J1410-2038,A0755-1342,J0637-0658,Z2148-2159,Z1050-2131,A1543-1844,I1615-1810\", \"1351-1451\" );\n    /*41*/ test( \"Z0746-2100,A2122-2156,I1022-1144,J0947-1441,A1333-1949\", \"1144-1244\" );\n    /*42*/ test( \"J0718-1243,Z1443-1818,B2055-2057,A0714-1238,Z1045-1344,A1643-1717,B1832-2039,J1623-1931\", \"1238-1338\" );\n    /*43*/ test( \"Z1921-1933,A1208-1418,I0827-1940,Z0757-1917,J0653-1554,B1859-1909\", \"1554-1654\" );\n\n    return 0;\n}\n\n\u4e45\u3005\u306e\u30aa\u30f3\u30e9\u30a4\u30f3\u53c2\u52a0\u3002\n\n\u6700\u521d\u3001\u6642\u9593\u306e\u7bc4\u56f2\u3092\u30af\u30e9\u30b9\u3067\u8868\u73fe\u3057\u3088\u3046\u3068\u3057\u305f\u306e\u3067\u3059\u304c\u3001\u305d\u306e\u6f14\u7b97\u3092\u7528\u610f\u3059\u308b\u3060\u3051\u3067\uff11\u6642\u9593\u304c\u7d4c\u904e\u3057\u3066\u3057\u307e\u3044\u3001\u4e00\u65e6\u3042\u304d\u3089\u3081\u307e\u3057\u305f\u3002\n\n30\u5206\u307b\u3069\u98a8\u5442\u306b\u5165\u3063\u3066\u982d\u3092\u51b7\u3084\u3057\uff08\uff1f\uff09\u3001\u3082\u3046\u4e00\u3064\u306e\u30a2\u30a4\u30c7\u30a3\u30a2\u3067\u3042\u308b\u30d3\u30c3\u30c8\u30d5\u30a3\u30fc\u30eb\u30c9\u3067\u8868\u73fe\u3059\u308b\u65b9\u6cd5\u3092\u4f7f\u3063\u3066\u66f8\u304d\u76f4\u3057\u3066\u307f\u307e\u3057\u305f\u3002\n\u66f8\u304d\u76f4\u3057\u306745\u5206\u3050\u3089\u3044\u3067\u3057\u305f\u3002\n\n\n```cpp\n#include <iostream>\n#include <sstream>\n#include <iomanip>\n#include <iterator>\n#include <algorithm>\n#include <utility>\n#include <vector>\n#include <bitset>\n\ntypedef std::bitset<24 * 60>              TimeSlot;\ntypedef std::vector<std::pair<int, int> > TimeSlots;\n\nvoid reset(TimeSlot& slot, int head, int tail)\n{\n    head = (head / 100) * 60 + (head % 100);\n    tail = (tail / 100) * 60 + (tail % 100);\n    for(int i = head; i < tail; ++i)\n    {\n        slot.reset(i);\n    }\n}\n\nvoid set(TimeSlot& slot, int head, int tail)\n{\n    head = (head / 100) * 60 + (head % 100);\n    tail = (tail / 100) * 60 + (tail % 100);\n    for(int i = head; i < tail; ++i)\n    {\n        slot.set(i);\n    }\n}\n\nTimeSlots find(const TimeSlot& slot, int min)\n{\n    TimeSlots result;\n    int pos = -1;\n    for(int i = 0; i < slot.size(); ++i)\n    {\n        if(slot[i])\n        {\n            if(pos < 0)\n            {\n                pos = i;\n            }\n        }\n        else\n        {\n            if((0 <= pos) && (min <= (i - pos)))\n            {\n                result.push_back(std::make_pair(pos, i - pos));\n            }\n            pos = -1;\n        }\n    }\n\n    if(0 <= pos)\n    {\n        result.push_back(std::make_pair(pos, slot.size() - pos));\n    }\n\n    return result;\n}\n\nvoid test(const std::string& source, const std::string& expected)\n{\n    TimeSlot room;\n    TimeSlot a;\n    TimeSlot b;\n    TimeSlot i;\n    TimeSlot j;\n    TimeSlot z;\n\n    set(room, 1000, 1800);\n    a.flip();\n    b.flip();\n    i.flip();\n    j.flip();\n\n    std::istringstream iss(source);\n    while(iss.good())\n    {\n        char c;\n        char sep;\n        int  head;\n        int  tail;\n        iss >> c >> head >> sep >> tail;\n        switch(c)\n        {\n        case 'A': reset(a, head, tail); break;\n        case 'B': reset(b, head, tail); break;\n        case 'I': reset(i, head, tail); break;\n        case 'J': reset(j, head, tail); break;\n        case 'Z': set(z, head, tail); break;\n        }\n        iss >> sep;\n    }\n\n    room &= z;\n    room &= a;\n    room &= b;\n\n    TimeSlots slots_i = find(room & i, 60);\n    TimeSlots slots_j = find(room & j, 60);\n\n    std::ostringstream oss;\n    oss.fill('0');\n    int time = 0;\n\n    if((slots_i.size() > 0) && (slots_j.size() > 0))\n    {\n        time = std::min(slots_i[0].first, slots_j[0].first);\n    }\n    else if(slots_i.size() > 0)\n    {\n        time = slots_i[0].first;\n    }\n    else if(slots_j.size() > 0)\n    {\n        time = slots_j[0].first;\n    }\n\n    if(time != 0)\n    {\n        int hour = time / 60;\n        int min  = time % 60;\n        oss << std::setw(2) << hour\n            << std::setw(2) << min\n            << '-'\n            << std::setw(2) << (hour + 1)\n            << std::setw(2) << min;\n    }\n    else\n    {\n        oss << \"-\";\n    }\n    std::string actual = oss.str();\n    std::string result = (expected == actual) ? \"o\" : \"x\";\n\n    std::cout\n        << \"expected: \" << expected\n        << \", actual: \" << actual\n        << \", result: \" << result\n        << std::endl;\n}\n\nint main(int argc, char* argv[])\n{\n    /*0*/ test( \"A1050-1130,B1400-1415,I1000-1400,I1600-1800,J1100-1745,Z1400-1421,Z1425-1800\", \"1425-1525\" );\n    /*1*/ test( \"A1000-1200,B1300-1800,Z1000-1215,Z1230-1800\", \"-\" );\n    /*2*/ test( \"Z0800-2200\", \"1000-1100\" );\n    /*3*/ test( \"A1000-1700,Z0800-2200\", \"1700-1800\" );\n    /*4*/ test( \"A1000-1701,Z0800-2200\", \"-\" );\n    /*5*/ test( \"A1000-1130,B1230-1800,Z0800-2200\", \"1130-1230\" );\n    /*6*/ test( \"A1000-1129,B1230-1800,Z0800-2200\", \"1129-1229\" );\n    /*7*/ test( \"A1000-1131,B1230-1800,Z0800-2200\", \"-\" );\n    /*8*/ test( \"A1000-1130,B1229-1800,Z0800-2200\", \"-\" );\n    /*9*/ test( \"A1000-1130,B1231-1800,Z0800-2200\", \"1130-1230\" );\n    /*10*/ test( \"A1000-1130,B1230-1800,Z0800-1130,Z1131-2200\", \"-\" );\n    /*11*/ test( \"A1000-1130,B1231-1800,Z0800-1130,Z1131-2200\", \"1131-1231\" );\n    /*12*/ test( \"Z0800-0801\", \"-\" );\n    /*13*/ test( \"Z0800-1031,Z1129-1220,Z1315-1400,Z1459-1600\", \"1459-1559\" );\n    /*14*/ test( \"Z0800-2200,I1000-1600,J1030-1730\", \"1600-1700\" );\n    /*15*/ test( \"Z0800-2200,I1000-1600,J1130-1730\", \"1000-1100\" );\n    /*16*/ test( \"Z0800-2200,I1000-1600,J1130-1730,A0800-1025\", \"1025-1125\" );\n    /*17*/ test( \"Z0800-2200,I1000-1600,J1130-1730,A0800-1645\", \"1645-1745\" );\n    /*18*/ test( \"Z0800-2200,I1000-1600,J1130-1730,A0800-1645,I1735-2200\", \"-\" );\n    /*19*/ test( \"Z0800-2200,I1000-1600,J1130-1730,A0800-1645,J1735-2200\", \"1645-1745\" );\n    /*20*/ test( \"Z1030-2200,I1000-1600,J1130-1730\", \"1030-1130\" );\n    /*21*/ test( \"Z1035-1500,I1000-1600,J1130-1730,Z1644-2200\", \"1644-1744\" );\n    /*22*/ test( \"I2344-2350,A2016-2253,Z1246-1952\", \"1246-1346\" );\n    /*23*/ test( \"Z2155-2157,B1822-2032,Z1404-2000,Z2042-2147,Z2149-2154\", \"1404-1504\" );\n    /*24*/ test( \"Z2231-2250,Z2128-2219,B2219-2227,B2229-2230,Z0713-2121,A0825-1035,B1834-2001\", \"1035-1135\" );\n    /*25*/ test( \"J0807-1247,I0911-1414,B1004-1553,Z0626-1732,Z1830-1905,A1946-1954,A0623-1921\", \"-\" );\n    /*26*/ test( \"J1539-1733,J0633-1514,Z1831-1939,J1956-1959,I0817-1007,I1052-1524,Z1235-1756,Z0656-1144\", \"1524-1624\" );\n    /*27*/ test( \"Z2319-2350,B0833-2028,I2044-2222,A1410-2201,Z2044-2228,Z0830-2023,Z2242-2306,I2355-2359\", \"-\" );\n    /*28*/ test( \"B2001-2118,Z0712-1634,I1941-2102,B1436-1917\", \"1000-1100\" );\n    /*29*/ test( \"A0755-1417,B2303-2335,Z0854-2150,Z2348-2356,Z2156-2340,I1024-1307,Z2357-2359\", \"1417-1517\" );\n    /*30*/ test( \"A1958-1959,B0822-1155,I1518-1622,Z1406-1947,A1800-1822,A0904-1422,J1730-1924,Z1954-1958,A1946-1956\", \"1422-1522\" );\n    /*31*/ test( \"B1610-1910,I2121-2139,A0619-1412,I2147-2153,Z0602-2111,I0841-2031,A1657-1905,A1956-2047,J0959-1032,Z2131-2147\", \"1412-1512\" );\n    /*32*/ test( \"Z0623-1900,A0703-1129,I1815-1910,J1956-1957,I0844-1518,Z1902-1935,B1312-1342,J1817-1955\", \"1129-1229\" );\n    /*33*/ test( \"J1246-1328,B1323-1449,I1039-1746,Z1218-2111\", \"1449-1549\" );\n    /*34*/ test( \"A1958-1959,I1943-1944,I0731-1722,Z0845-1846,J1044-1513,Z1910-1923,B1216-1249\", \"1513-1613\" );\n    /*35*/ test( \"A1855-2047,Z0946-1849,Z2056-2059,I1855-1910,B1946-2058,I1956-2025,Z1905-2054,J0644-1800,I0720-1618\", \"1618-1718\" );\n    /*36*/ test( \"J1525-1950,Z0905-1933,A1648-1716,I2051-2054,I2015-2044,I0804-1958,B0934-1100,Z1953-2037\", \"1100-1200\" );\n    /*37*/ test( \"Z1914-1956,J0823-1610,Z0641-1841,J1800-1835,A0831-1346,I1926-1941,I1030-1558,I1738-1803\", \"1558-1658\" );\n    /*38*/ test( \"Z0625-1758,J1033-1351,B1816-2236,I0838-1615,J2247-2255\", \"1351-1451\" );\n    /*39*/ test( \"J0603-1233,A1059-1213,I1326-2103,Z0710-1459\", \"1213-1313\" );\n    /*40*/ test( \"B1302-1351,J1410-2038,A0755-1342,J0637-0658,Z2148-2159,Z1050-2131,A1543-1844,I1615-1810\", \"1351-1451\" );\n    /*41*/ test( \"Z0746-2100,A2122-2156,I1022-1144,J0947-1441,A1333-1949\", \"1144-1244\" );\n    /*42*/ test( \"J0718-1243,Z1443-1818,B2055-2057,A0714-1238,Z1045-1344,A1643-1717,B1832-2039,J1623-1931\", \"1238-1338\" );\n    /*43*/ test( \"Z1921-1933,A1208-1418,I0827-1940,Z0757-1917,J0653-1554,B1859-1909\", \"1554-1654\" );\n\n    return 0;\n}\n```", "tags": ["C++", "yhpg", "\u3069\u3046\u66f8\u304f"]}