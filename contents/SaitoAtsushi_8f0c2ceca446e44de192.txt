{"context": "\u300cC++ Builder / String > \u6587\u5b57\u5217\u306e\u8131\u843d\u3092\u3059\u308b\u30af\u30e9\u30b9\u300d\u3068\u3044\u3046\u8a18\u4e8b\u3092\u8aad\u3093\u3067\u3044\u3066\u3001\u305d\u3046\u3044\u3048\u3070 C++11 \u306b\u306f\u5206\u5e03\u751f\u6210\u5668\u304c\u3042\u3063\u305f\u3068\u3044\u3046\u3053\u3068\u3092\u601d\u3044\u51fa\u3057\u307e\u3057\u305f\u3002 C++ \u306b\u8ffd\u52a0\u3055\u308c\u305f random \u30d8\u30c3\u30c0\u306f\u4e71\u6570\u751f\u6210\u5668\u3001\u751f\u6210\u5668\u30a2\u30c0\u30d7\u30bf\u3001\u5206\u5e03\u751f\u6210\u5668\u3068\u3044\u3063\u305f\u6a5f\u80fd\u3092\u63d0\u4f9b\u3057\u3066\u3044\u307e\u3059\u3002 \u5206\u5e03\u751f\u6210\u5668\u306f\u4e71\u6570\u751f\u6210\u5668\u304c\u751f\u6210\u3057\u305f\u30d3\u30c3\u30c8\u5217\u3092\u5143\u306b\u7279\u5b9a\u306e\u6027\u8cea\u3092\u6301\u3064\u5206\u5e03\u3092\u4f5c\u308a\u51fa\u3059\u3082\u306e\u3067\u3059\u3002\n\u3082\u3061\u308d\u3093\u3001\u305d\u306e\u5834\u9650\u308a\u3067\u3057\u304b\u4f7f\u308f\u306a\u3044\u3082\u306e\u306b\u3064\u3044\u3066\u3042\u307e\u308a\u51dd\u3063\u305f\u9020\u308a\u306b\u3059\u308b\u5fc5\u8981\u306f\u3042\u308a\u307e\u305b\u3093\u304c\u3001\u8a00\u8a9e\u304c\u6a19\u6e96\u7684\u306b\u63d0\u4f9b\u3057\u3066\u3044\u308b\u6a5f\u80fd\u306b\u5408\u308f\u305b\u3066\u4f5c\u3063\u3066\u304a\u304f\u3068\u4ed6\u306e\u30e9\u30a4\u30d6\u30e9\u30ea\u3068\u3082\u7d44\u307f\u5408\u308f\u305b\u3084\u3059\u3044\u53ef\u80fd\u6027\u304c\u3042\u308a\u307e\u3059\u3002 \u305d\u3053\u3067\u3001\u504f\u3063\u305f\u771f\u507d\u5024\u3092\u751f\u6210\u3059\u308b\u5206\u5e03\u751f\u6210\u5668\u3092\u8003\u3048\u3066\u307f\u307e\u3057\u305f\u3002 \u5206\u5e03\u751f\u6210\u5668\u306b\u4e0e\u3048\u308b\u30d1\u30e9\u30e1\u30fc\u30bf\u306f\u771f\u5024 (true) \u304c\u8fd4\u3063\u3066\u304f\u308b\u78ba\u7387\u3092\u767e\u5206\u7387\u3067\u8868\u3057\u305f\u6574\u6570\u3067\u3059\u3002\n\u5206\u5e03\u751f\u6210\u5668\u306b\u6c42\u3081\u3089\u308c\u308b\u8981\u4ef6\u306f\u4ed5\u69d8 (N3337) \u306e 26.5.1.6 \u9805\u306b\u3042\u308a\u307e\u3059\u3002 \u82f1\u8a9e\u306b\u660e\u308b\u304f\u306a\u3044\u306e\u3067\u5b8c\u74a7\u306b\u8981\u4ef6\u306b\u5408\u81f4\u3057\u3066\u3044\u308b\u81ea\u4fe1\u306f\u3042\u308a\u307e\u305b\u3093\u3002\n\nbiased_bool_distribution.h\n// -*- mode:c++ -*-\n#ifndef HEADER_6fd279ce7d7f5ac14725748253b34d8f\n#define HEADER_6fd279ce7d7f5ac14725748253b34d8f\n#include <random>\n#include <iostream>\n\nclass biased_bool_distribution {\npublic:\n  void reset(void);\n  typedef bool result_type;\n  typedef int param_type;\nprivate:\n  std::uniform_int_distribution<int> base;\n  param_type bias;\npublic:\n  constexpr static result_type a(void);\n  constexpr static result_type b(void);\n  param_type param(void) const;\n  void param(param_type x);\n  constexpr static result_type max(void);\n  constexpr static result_type min(void);\n  template<class URNG> bool operator()(URNG& g);\n  template<class URNG> bool operator()(URNG& g, param_type bias);\n  biased_bool_distribution(param_type bias);\n};\n\ntemplate<class URNG>\nbool biased_bool_distribution::operator()(URNG& g) {\n  return base(g) < bias;\n}\n\ntemplate<class URNG>\nbool biased_bool_distribution::operator()(URNG& g, param_type bias) {\n  return base(g) < bias;\n}\n\nbool operator==(biased_bool_distribution& x, biased_bool_distribution& y);\nbool operator!=(biased_bool_distribution& x, biased_bool_distribution& y);\nstd::ostream& operator<<(std::ostream& os, biased_bool_distribution& x);\nstd::istream& operator>>(std::istream& is, biased_bool_distribution& x);\n#endif\n\n\n\nbiased_bool_distribution.cpp\n#include \"biased_bool_distribution.h\"\n\nbiased_bool_distribution::biased_bool_distribution(param_type bias)\n  : bias(bias), base(0, 99) {\n}\n\nvoid biased_bool_distribution::reset(void) {\n  base.reset();\n}\n\nconstexpr biased_bool_distribution::result_type\nbiased_bool_distribution::a(void) {\n  return 0;\n}\n\nconstexpr biased_bool_distribution::result_type\nbiased_bool_distribution::b(void) {\n  return 1;\n}\n\nconstexpr biased_bool_distribution::result_type\nbiased_bool_distribution::min(void) {\n  return 0;\n}\n\nconstexpr biased_bool_distribution::result_type\nbiased_bool_distribution::max(void) {\n  return 1;\n}\n\nbiased_bool_distribution::param_type\nbiased_bool_distribution::param(void) const {\n  return bias;\n}\n\nvoid biased_bool_distribution::param(param_type x) {\n  bias = x;\n}\n\nbool operator==(biased_bool_distribution& x, biased_bool_distribution& y) {\n  return x.param()==x.param();\n}\n\nbool operator!=(biased_bool_distribution& x, biased_bool_distribution& y) {\n  return !(x==y);\n}\n\nstd::ostream& operator<<(std::ostream& os, biased_bool_distribution& x) {\n  os << x.param();\n  return os;\n}\n\nstd::istream& operator>>(std::istream& is, biased_bool_distribution& x) {\n  biased_bool_distribution::param_type p=0;\n  is >> p;\n  x.param(p);\n  return is;\n}\n\n\n\u4f7f\u3044\u65b9\u306f\u4ed6\u306e\u5206\u5e03\u751f\u6210\u5668\u3068\u540c\u3058 (\u306b\u306a\u3063\u3066\u3044\u308b\u306f\u305a) \u3067\u3059\u3002\n\nsample.cpp\n#include <iostream>\n#include <random>\n#include \"biased_bool_distribution.h\"\n\nint main() {\n  std::random_device seed_gen;\n  std::mt19937 engine(seed_gen());\n\n  biased_bool_distribution dist(42);\n\n  for (int i = 0; i < 5; ++i) {\n    int result = dist(engine);\n    std::cout << result << std::endl;\n\n  }\n}\n\n\n\u300c[C++ Builder / String > \u6587\u5b57\u5217\u306e\u8131\u843d\u3092\u3059\u308b\u30af\u30e9\u30b9](http://qiita.com/7of9/items/647b202420160682576d)\u300d\u3068\u3044\u3046\u8a18\u4e8b\u3092\u8aad\u3093\u3067\u3044\u3066\u3001\u305d\u3046\u3044\u3048\u3070 C++11 \u306b\u306f\u5206\u5e03\u751f\u6210\u5668\u304c\u3042\u3063\u305f\u3068\u3044\u3046\u3053\u3068\u3092\u601d\u3044\u51fa\u3057\u307e\u3057\u305f\u3002 C++ \u306b\u8ffd\u52a0\u3055\u308c\u305f `random` \u30d8\u30c3\u30c0\u306f\u4e71\u6570\u751f\u6210\u5668\u3001\u751f\u6210\u5668\u30a2\u30c0\u30d7\u30bf\u3001\u5206\u5e03\u751f\u6210\u5668\u3068\u3044\u3063\u305f\u6a5f\u80fd\u3092\u63d0\u4f9b\u3057\u3066\u3044\u307e\u3059\u3002 \u5206\u5e03\u751f\u6210\u5668\u306f\u4e71\u6570\u751f\u6210\u5668\u304c\u751f\u6210\u3057\u305f\u30d3\u30c3\u30c8\u5217\u3092\u5143\u306b\u7279\u5b9a\u306e\u6027\u8cea\u3092\u6301\u3064\u5206\u5e03\u3092\u4f5c\u308a\u51fa\u3059\u3082\u306e\u3067\u3059\u3002\n\n\u3082\u3061\u308d\u3093\u3001\u305d\u306e\u5834\u9650\u308a\u3067\u3057\u304b\u4f7f\u308f\u306a\u3044\u3082\u306e\u306b\u3064\u3044\u3066\u3042\u307e\u308a\u51dd\u3063\u305f\u9020\u308a\u306b\u3059\u308b\u5fc5\u8981\u306f\u3042\u308a\u307e\u305b\u3093\u304c\u3001\u8a00\u8a9e\u304c\u6a19\u6e96\u7684\u306b\u63d0\u4f9b\u3057\u3066\u3044\u308b\u6a5f\u80fd\u306b\u5408\u308f\u305b\u3066\u4f5c\u3063\u3066\u304a\u304f\u3068\u4ed6\u306e\u30e9\u30a4\u30d6\u30e9\u30ea\u3068\u3082\u7d44\u307f\u5408\u308f\u305b\u3084\u3059\u3044\u53ef\u80fd\u6027\u304c\u3042\u308a\u307e\u3059\u3002 \u305d\u3053\u3067\u3001\u504f\u3063\u305f\u771f\u507d\u5024\u3092\u751f\u6210\u3059\u308b\u5206\u5e03\u751f\u6210\u5668\u3092\u8003\u3048\u3066\u307f\u307e\u3057\u305f\u3002 \u5206\u5e03\u751f\u6210\u5668\u306b\u4e0e\u3048\u308b\u30d1\u30e9\u30e1\u30fc\u30bf\u306f\u771f\u5024 (true) \u304c\u8fd4\u3063\u3066\u304f\u308b\u78ba\u7387\u3092\u767e\u5206\u7387\u3067\u8868\u3057\u305f\u6574\u6570\u3067\u3059\u3002\n\n\u5206\u5e03\u751f\u6210\u5668\u306b\u6c42\u3081\u3089\u308c\u308b\u8981\u4ef6\u306f\u4ed5\u69d8 (N3337) \u306e 26.5.1.6 \u9805\u306b\u3042\u308a\u307e\u3059\u3002 \u82f1\u8a9e\u306b\u660e\u308b\u304f\u306a\u3044\u306e\u3067\u5b8c\u74a7\u306b\u8981\u4ef6\u306b\u5408\u81f4\u3057\u3066\u3044\u308b\u81ea\u4fe1\u306f\u3042\u308a\u307e\u305b\u3093\u3002\n\n```cpp:biased_bool_distribution.h\n// -*- mode:c++ -*-\n#ifndef HEADER_6fd279ce7d7f5ac14725748253b34d8f\n#define HEADER_6fd279ce7d7f5ac14725748253b34d8f\n#include <random>\n#include <iostream>\n\nclass biased_bool_distribution {\npublic:\n  void reset(void);\n  typedef bool result_type;\n  typedef int param_type;\nprivate:\n  std::uniform_int_distribution<int> base;\n  param_type bias;\npublic:\n  constexpr static result_type a(void);\n  constexpr static result_type b(void);\n  param_type param(void) const;\n  void param(param_type x);\n  constexpr static result_type max(void);\n  constexpr static result_type min(void);\n  template<class URNG> bool operator()(URNG& g);\n  template<class URNG> bool operator()(URNG& g, param_type bias);\n  biased_bool_distribution(param_type bias);\n};\n\ntemplate<class URNG>\nbool biased_bool_distribution::operator()(URNG& g) {\n  return base(g) < bias;\n}\n\ntemplate<class URNG>\nbool biased_bool_distribution::operator()(URNG& g, param_type bias) {\n  return base(g) < bias;\n}\n\nbool operator==(biased_bool_distribution& x, biased_bool_distribution& y);\nbool operator!=(biased_bool_distribution& x, biased_bool_distribution& y);\nstd::ostream& operator<<(std::ostream& os, biased_bool_distribution& x);\nstd::istream& operator>>(std::istream& is, biased_bool_distribution& x);\n#endif\n```\n\n```cpp:biased_bool_distribution.cpp\n#include \"biased_bool_distribution.h\"\n\nbiased_bool_distribution::biased_bool_distribution(param_type bias)\n  : bias(bias), base(0, 99) {\n}\n\nvoid biased_bool_distribution::reset(void) {\n  base.reset();\n}\n\nconstexpr biased_bool_distribution::result_type\nbiased_bool_distribution::a(void) {\n  return 0;\n}\n\nconstexpr biased_bool_distribution::result_type\nbiased_bool_distribution::b(void) {\n  return 1;\n}\n\nconstexpr biased_bool_distribution::result_type\nbiased_bool_distribution::min(void) {\n  return 0;\n}\n\nconstexpr biased_bool_distribution::result_type\nbiased_bool_distribution::max(void) {\n  return 1;\n}\n\nbiased_bool_distribution::param_type\nbiased_bool_distribution::param(void) const {\n  return bias;\n}\n\nvoid biased_bool_distribution::param(param_type x) {\n  bias = x;\n}\n\nbool operator==(biased_bool_distribution& x, biased_bool_distribution& y) {\n  return x.param()==x.param();\n}\n\nbool operator!=(biased_bool_distribution& x, biased_bool_distribution& y) {\n  return !(x==y);\n}\n\nstd::ostream& operator<<(std::ostream& os, biased_bool_distribution& x) {\n  os << x.param();\n  return os;\n}\n\nstd::istream& operator>>(std::istream& is, biased_bool_distribution& x) {\n  biased_bool_distribution::param_type p=0;\n  is >> p;\n  x.param(p);\n  return is;\n}\n```\n\n\u4f7f\u3044\u65b9\u306f\u4ed6\u306e\u5206\u5e03\u751f\u6210\u5668\u3068\u540c\u3058 (\u306b\u306a\u3063\u3066\u3044\u308b\u306f\u305a) \u3067\u3059\u3002\n\n```cpp:sample.cpp\n#include <iostream>\n#include <random>\n#include \"biased_bool_distribution.h\"\n\nint main() {\n  std::random_device seed_gen;\n  std::mt19937 engine(seed_gen());\n\n  biased_bool_distribution dist(42);\n\n  for (int i = 0; i < 5; ++i) {\n    int result = dist(engine);\n    std::cout << result << std::endl;\n\n  }\n}\n```\n", "tags": ["C++", "C++11", "\u4e71\u6570"]}