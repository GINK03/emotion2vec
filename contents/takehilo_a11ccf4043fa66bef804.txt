{"context": "\n\n\u30d0\u30fc\u30b8\u30e7\u30f3\nMongoDB: 3.0.7\nmongoose: 4.3.6\n\n\u30d3\u30eb\u30c8\u30a4\u30f3\u30d0\u30ea\u30c7\u30fc\u30bf\n\nString\nenum: \u30ea\u30b9\u30c8\u306b\u306a\u3044\u5024\u3092\u306f\u3058\u304f\nvar SakeSchema = new Schema({\n  sakeType: {\n    type: String,\n    enum: ['Junmai', 'Ginjo']\n    // 'Junmai'\u306fOK\n    // 'JunmaiDaiGinjo'\u306f\u30a8\u30e9\u30fc\n  }\n});\n\nmatch: \u6b63\u898f\u8868\u73fe\u306b\u30de\u30c3\u30c1\u3057\u306a\u3044\u5024\u3092\u306f\u3058\u304f\nvar SakeSchema = new Schema({\n  sakeType: {\n    type: String,\n    match: /\\.*Junmai\\.*/\n    // 'JunmaiGinjo'\u306fOK\n    // 'Ginjo'\u306f\u30a8\u30e9\u30fc\n  }\n});\n\nmaxlength, minlength: \u6700\u5927,\u6700\u5c0f\u6587\u5b57\u6570\nvar SakeSchema = new Schema({\n  sakeType: {\n    type: String,\n    maxlength: 10,\n    minlength: 2\n    // 'Junmai'\u306fOK\n    // 'TokubetsuJunmai'\u306f\u30a8\u30e9\u30fc\n  }\n});\n\n\nNumber\nmax, min: \u6700\u5927,\u6700\u5c0f\u5024\nvar SakeSchema = new Schema({\n  alcoholContent: {\n    type: Number,\n    max: 21,\n    min: 0\n    // 21\u306fOK\n    // 0\u306fOK\n    // 22\u306f\u30a8\u30e9\u30fc\n    // -1\u306f\u30a8\u30e9\u30fc\n  }\n});\n\n\n\u5171\u901a\n\u5168\u3066\u306e\u30b9\u30ad\u30fc\u30de\u30bf\u30a4\u30d7\u3067\u4f7f\u3048\u308b\u30d0\u30ea\u30c7\u30fc\u30bf\u306b\u3001required, unique\u304c\u3042\u308b\u3002\u305d\u308c\u305e\u308c\u5fc5\u9808\u5236\u7d04\u3068\u30e6\u30cb\u30fc\u30af\u5236\u7d04\u3092\u304b\u3051\u308b\u30d0\u30ea\u30c7\u30fc\u30bf\u3002\nvar SakeSchema = new Schema({\n  brand: {\n    type: String,\n    required: true,  // \u7a7a\u6587\u5b57\u306f\u30a8\u30e9\u30fc\u306b\u306a\u308b\n    unique: true\n  }\n});\n\n\n\u30ab\u30b9\u30bf\u30e0\u30d0\u30ea\u30c7\u30fc\u30bf\n\u30d3\u30eb\u30c8\u30a4\u30f3\u30d0\u30ea\u30c7\u30fc\u30bf\u3067\u306f\u4e0d\u5341\u5206\u306a\u5834\u5408\u306b\u72ec\u81ea\u306b\u30d0\u30ea\u30c7\u30fc\u30bf\u3092\u4f5c\u308b\u3053\u3068\u304c\u3067\u304d\u308b\u3002\n\u81ea\u5206\u304c\u4f5c\u3063\u305f\u30d0\u30ea\u30c7\u30fc\u30bf\u3092\u7d39\u4ecb\u3002\n\nEmail\u30d0\u30ea\u30c7\u30fc\u30bf\nvar emailValidator = {\n  validator: function(v) {\n    var pattern = /^([\\w-\\.]+@([\\w-]+\\.)+[\\w-]{2,4})?$/;\n    return pattern.test(v);\n  },\n  message: '`{VALUE}` is invalid syntax of `{PATH}`'\n}\n\nvar UserSchema = new Schema({\n  email: {\n    type: String,\n    validate: emailValidator\n  }\n});\n\n\n\u6570\u5024\u30d0\u30ea\u30c7\u30fc\u30bf(0\u4ee5\u4e0a\u306e\u6574\u6570)\nvar positiveIntegerValidator = {\n  validator: function(v) {\n    var pattern = /^([1-9]\\d*|0)$/;\n    return pattern.test(v);\n  },\n  message: '`{VALUE}` is invalid value. `{PATH}` should be a positive integer'\n}\n\nvar SakeSchema = new Schema({\n  polishingRate: {\n    type: Number,\n    max: 100,\n    min: 0,\n    validate: positiveIntegerValidator\n    // 0-100\u306e\u6574\u6570\u4ee5\u5916\u306f\u30a8\u30e9\u30fc\n  }\n});\n\n\n\u914d\u5217\u30b5\u30a4\u30ba\u30d0\u30ea\u30c7\u30fc\u30bf\nvar arrayLengthValidator = function(len) {\n  return {\n    validator: function(v) {\n      return v.length <= len;\n    },\n    message: '`{PATH}` can be stored up to ' + len\n  }\n}\n\nvar SakeSchema = new Schema({\n  pictureUrl: {\n    type: [{\n      type: String\n    }],\n    validate: arrayLengthValidator(10)\n    // \u5199\u771f\u306eURL\u306f10\u500b\u307e\u3067\u4fdd\u5b58\u53ef\u80fd\n  }\n});\n\n\n\u30d7\u30e9\u30b0\u30a4\u30f3\n\u30b9\u30ad\u30fc\u30de\u306f\u30d7\u30e9\u30ac\u30d6\u30eb\u306b\u306a\u3063\u3066\u3044\u3066\u3001\u516c\u958b\u3055\u308c\u3066\u3044\u308b\u30d7\u30e9\u30b0\u30a4\u30f3\u3092\u4f7f\u3063\u3066\u30b9\u30ad\u30fc\u30de\u3092\u62e1\u5f35\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u3063\u3066\u3044\u308b\u3002\n\u4fbf\u5229\u306a\u30d7\u30e9\u30b0\u30a4\u30f3\u3092\u4e00\u3064\u7d39\u4ecb\u3002\nmongoose-id-validator\u306f\u53c2\u7167\u5236\u7d04\u3092\u30c1\u30a7\u30c3\u30af\u3059\u308b\u30d0\u30ea\u30c7\u30fc\u30bf\u3067\u3001\u53c2\u7167\u5148\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u304c\u5b58\u5728\u3057\u306a\u3044\u5834\u5408\u306b\u30a8\u30e9\u30fc\u3092\u51fa\u3057\u3066\u304f\u308c\u308b\u3002\nvar idValidator = require('mongoose-id-validator');\n\n// \u53c2\u7167\u30d0\u30ea\u30c7\u30fc\u30bf\u3092\u5168\u3066\u306e\u30b9\u30ad\u30fc\u30de\u306b\u9069\u7528\nmongoose.plugin(idValidator);\n\nvar SakeSchema = new Schema({\n  customer: {\n    type: Schema.Types.ObjectId,\n    ref: 'Customer'\n    // 'Customer'\u30b3\u30ec\u30af\u30b7\u30e7\u30f3\u306b\u5b58\u5728\u3057\u306a\u3044ObjectId\u3092\u6307\u5b9a\u3057\u305f\u3089\u30a8\u30e9\u30fc\n  }\n});\n\n## \u30d0\u30fc\u30b8\u30e7\u30f3\nMongoDB: 3.0.7\nmongoose: 4.3.6\n\n## \u30d3\u30eb\u30c8\u30a4\u30f3\u30d0\u30ea\u30c7\u30fc\u30bf\n\n### String\n`enum`: \u30ea\u30b9\u30c8\u306b\u306a\u3044\u5024\u3092\u306f\u3058\u304f\n\n```js\nvar SakeSchema = new Schema({\n  sakeType: {\n    type: String,\n    enum: ['Junmai', 'Ginjo']\n    // 'Junmai'\u306fOK\n    // 'JunmaiDaiGinjo'\u306f\u30a8\u30e9\u30fc\n  }\n});\n```\n\n`match`: \u6b63\u898f\u8868\u73fe\u306b\u30de\u30c3\u30c1\u3057\u306a\u3044\u5024\u3092\u306f\u3058\u304f\n\n```js\nvar SakeSchema = new Schema({\n  sakeType: {\n    type: String,\n    match: /\\.*Junmai\\.*/\n    // 'JunmaiGinjo'\u306fOK\n    // 'Ginjo'\u306f\u30a8\u30e9\u30fc\n  }\n});\n```\n\n`maxlength`, `minlength`: \u6700\u5927,\u6700\u5c0f\u6587\u5b57\u6570\n\n```js\nvar SakeSchema = new Schema({\n  sakeType: {\n    type: String,\n    maxlength: 10,\n    minlength: 2\n    // 'Junmai'\u306fOK\n    // 'TokubetsuJunmai'\u306f\u30a8\u30e9\u30fc\n  }\n});\n```\n\n### Number\n`max`, `min`: \u6700\u5927,\u6700\u5c0f\u5024\n\n```js\nvar SakeSchema = new Schema({\n  alcoholContent: {\n    type: Number,\n    max: 21,\n    min: 0\n    // 21\u306fOK\n    // 0\u306fOK\n    // 22\u306f\u30a8\u30e9\u30fc\n    // -1\u306f\u30a8\u30e9\u30fc\n  }\n});\n```\n\n### \u5171\u901a\n\u5168\u3066\u306e\u30b9\u30ad\u30fc\u30de\u30bf\u30a4\u30d7\u3067\u4f7f\u3048\u308b\u30d0\u30ea\u30c7\u30fc\u30bf\u306b\u3001`required`, `unique`\u304c\u3042\u308b\u3002\u305d\u308c\u305e\u308c\u5fc5\u9808\u5236\u7d04\u3068\u30e6\u30cb\u30fc\u30af\u5236\u7d04\u3092\u304b\u3051\u308b\u30d0\u30ea\u30c7\u30fc\u30bf\u3002\n\n```js\nvar SakeSchema = new Schema({\n  brand: {\n    type: String,\n    required: true,  // \u7a7a\u6587\u5b57\u306f\u30a8\u30e9\u30fc\u306b\u306a\u308b\n    unique: true\n  }\n});\n```\n\n## \u30ab\u30b9\u30bf\u30e0\u30d0\u30ea\u30c7\u30fc\u30bf\n\u30d3\u30eb\u30c8\u30a4\u30f3\u30d0\u30ea\u30c7\u30fc\u30bf\u3067\u306f\u4e0d\u5341\u5206\u306a\u5834\u5408\u306b\u72ec\u81ea\u306b\u30d0\u30ea\u30c7\u30fc\u30bf\u3092\u4f5c\u308b\u3053\u3068\u304c\u3067\u304d\u308b\u3002\n\n\u81ea\u5206\u304c\u4f5c\u3063\u305f\u30d0\u30ea\u30c7\u30fc\u30bf\u3092\u7d39\u4ecb\u3002\n\n### Email\u30d0\u30ea\u30c7\u30fc\u30bf\n\n```js\nvar emailValidator = {\n  validator: function(v) {\n    var pattern = /^([\\w-\\.]+@([\\w-]+\\.)+[\\w-]{2,4})?$/;\n    return pattern.test(v);\n  },\n  message: '`{VALUE}` is invalid syntax of `{PATH}`'\n}\n\nvar UserSchema = new Schema({\n  email: {\n    type: String,\n    validate: emailValidator\n  }\n});\n```\n\n### \u6570\u5024\u30d0\u30ea\u30c7\u30fc\u30bf(0\u4ee5\u4e0a\u306e\u6574\u6570)\n\n```js\nvar positiveIntegerValidator = {\n  validator: function(v) {\n    var pattern = /^([1-9]\\d*|0)$/;\n    return pattern.test(v);\n  },\n  message: '`{VALUE}` is invalid value. `{PATH}` should be a positive integer'\n}\n\nvar SakeSchema = new Schema({\n  polishingRate: {\n    type: Number,\n    max: 100,\n    min: 0,\n    validate: positiveIntegerValidator\n    // 0-100\u306e\u6574\u6570\u4ee5\u5916\u306f\u30a8\u30e9\u30fc\n  }\n});\n```\n\n### \u914d\u5217\u30b5\u30a4\u30ba\u30d0\u30ea\u30c7\u30fc\u30bf\n\n```js\nvar arrayLengthValidator = function(len) {\n  return {\n    validator: function(v) {\n      return v.length <= len;\n    },\n    message: '`{PATH}` can be stored up to ' + len\n  }\n}\n\nvar SakeSchema = new Schema({\n  pictureUrl: {\n    type: [{\n      type: String\n    }],\n    validate: arrayLengthValidator(10)\n    // \u5199\u771f\u306eURL\u306f10\u500b\u307e\u3067\u4fdd\u5b58\u53ef\u80fd\n  }\n});\n```\n\n## \u30d7\u30e9\u30b0\u30a4\u30f3\n\u30b9\u30ad\u30fc\u30de\u306f\u30d7\u30e9\u30ac\u30d6\u30eb\u306b\u306a\u3063\u3066\u3044\u3066\u3001\u516c\u958b\u3055\u308c\u3066\u3044\u308b\u30d7\u30e9\u30b0\u30a4\u30f3\u3092\u4f7f\u3063\u3066\u30b9\u30ad\u30fc\u30de\u3092\u62e1\u5f35\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u3063\u3066\u3044\u308b\u3002\n\n\u4fbf\u5229\u306a\u30d7\u30e9\u30b0\u30a4\u30f3\u3092\u4e00\u3064\u7d39\u4ecb\u3002\n[mongoose-id-validator](https://github.com/CampbellSoftwareSolutions/mongoose-id-validator)\u306f\u53c2\u7167\u5236\u7d04\u3092\u30c1\u30a7\u30c3\u30af\u3059\u308b\u30d0\u30ea\u30c7\u30fc\u30bf\u3067\u3001\u53c2\u7167\u5148\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u304c\u5b58\u5728\u3057\u306a\u3044\u5834\u5408\u306b\u30a8\u30e9\u30fc\u3092\u51fa\u3057\u3066\u304f\u308c\u308b\u3002\n\n```js\nvar idValidator = require('mongoose-id-validator');\n\n// \u53c2\u7167\u30d0\u30ea\u30c7\u30fc\u30bf\u3092\u5168\u3066\u306e\u30b9\u30ad\u30fc\u30de\u306b\u9069\u7528\nmongoose.plugin(idValidator);\n\nvar SakeSchema = new Schema({\n  customer: {\n    type: Schema.Types.ObjectId,\n    ref: 'Customer'\n    // 'Customer'\u30b3\u30ec\u30af\u30b7\u30e7\u30f3\u306b\u5b58\u5728\u3057\u306a\u3044ObjectId\u3092\u6307\u5b9a\u3057\u305f\u3089\u30a8\u30e9\u30fc\n  }\n});\n```\n", "tags": ["MongoDB", "mongoose", "Node.js"]}