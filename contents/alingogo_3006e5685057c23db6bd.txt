{"tags": ["Android", "QRcode", "ZXing", "Java"], "context": " More than 1 year has passed since last update.\n\nZXing\u3068\u306f\n\nZXing \u306f Google \u304c\u958b\u767a\u3057\u3066\u516c\u958b\u3057\u3066\u3044\u308b\u3001\u69d8\u3005\u306a\u4e00\u6b21\u5143\u3084\u4e8c\u6b21\u5143\u306e\u30d0\u30fc\u30b3\u30fc\u30c9\u306e\u751f\u6210/\u64cd\u4f5c\u304c\u3067\u304d\u308b\u30aa\u30fc\u30d7\u30f3\u30bd\u30fc\u30b9\u30e9\u30a4\u30d6\u30e9\u30ea\nhttps://github.com/zxing/zxing\n\n\nAndroid\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u306b\u3001ZXing\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u8ffd\u52a0\n\napp/build.gradle\n\ndependencies {\n    compile fileTree(dir: 'libs', include: ['*.jar'])\n    ......\n    compile 'com.journeyapps:zxing-android-embedded:3.0.1@aar'\n    compile 'com.google.zxing:core:3.2.0'\n}\n\n\n\nzxing-android-embedded\u3068\u306f\n\nhttps://github.com/journeyapps/zxing-android-embedded\n\n\nQR\u30b3\u30fc\u30c9\u3092\u53d6\u5f97\u3059\u308b\u305f\u3081\u306b\u3001\u30b3\u30fc\u30c9\u5b9f\u88c5\n\nAndroidManifest.xml\n <uses-permission android:name=\"android.permission.CAMERA\"/>\n <uses-permission android:name=\"android.permission.FLASHLIGHT\"/>\n\n\nActivity\u5b9f\u88c5\n\nAndroidManifest.xml\n <activity\n            android:name=\".CaptureActivityAnyOrientation\"\n            android:screenOrientation=\"fullSensor\"\n            android:stateNotNeeded=\"true\"\n            android:theme=\"@style/zxing_CaptureTheme\"\n            android:windowSoftInputMode=\"stateAlwaysHidden\" />\n\n\n\nCaptureActivityAnyOrientation.java\nimport com.journeyapps.barcodescanner.CaptureActivity;\n\npublic class CaptureActivityAnyOrientation extends CaptureActivity {\n}\n\n\n\nMainActivity.java\n\n        Button mBtnCamera = (Button) findViewById(R.id.camera_button);\n        mBtnCamera.setOnClickListener(new View.OnClickListener() {\n            @Override\n            public void onClick(View v) {\n                IntentIntegrator integrator = new IntentIntegrator(LoginActivity.this);            \n                integrator.setCaptureActivity(CaptureActivityAnyOrientation.class);\n                integrator.setOrientationLocked(false);\n                integrator.initiateScan();\n            }\n        });\n\n\n\nMainActivity.java\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n        super.onActivityResult(requestCode, resultCode, data);\n        IntentResult scanResult = IntentIntegrator.parseActivityResult(requestCode, resultCode, data);\n        if (scanResult != null) {\n            TextView qResultView = (TextView) findViewById(R.id.qr_text_view);\n            qResultView.setText(scanResult.getContents());\n            Log.d(\"scan\", \"==-----:  \" + scanResult.getContents());\n        }\n    }\n\n\n\nQR\u30b3\u30fc\u30c9\u3092\u751f\u6210\u3059\u308b\u305f\u3081\u306b\u3001\u30b3\u30fc\u30c9\u5b9f\u88c5\n\nMainActivity.java\n       Button mBtnCreateQRcode = (Button) findViewById(R.id.create_qrcode);\n        mBtnCreateQRcode.setOnClickListener(new View.OnClickListener() {\n            @Override\n            public void onClick(View v) {\n                createQRcode();\n            }\n        });\n\n......\n\n    private void createQRcode() {\n\n        Bitmap qr = null;\n        try {\n            qr = createQRCodeByZxing(\"http://google.co.jp\", 400);\n        } catch (WriterException e) {\n            Log.d(\"createQRcode\", \"error: \", e);\n        }\n\n        try {\n            File root = Environment.getExternalStorageDirectory();\n\n            // \u65e5\u4ed8\u3067\u30d5\u30a1\u30a4\u30eb\u540d\u3092\u4f5c\u6210\u3000\n            Date mDate = new Date();\n            SimpleDateFormat fileName = new SimpleDateFormat(\"yyyyMMdd_HHmmss\");\n\n            // \u4fdd\u5b58\u51e6\u7406\u958b\u59cb\n            FileOutputStream fos = null;\n            fos = new FileOutputStream(new File(root, fileName.format(mDate) + \".jpg\"));\n\n            // jpeg\u3067\u4fdd\u5b58\n            qr.compress(Bitmap.CompressFormat.JPEG, 100, fos);\n\n            // \u4fdd\u5b58\u51e6\u7406\u7d42\u4e86\n            fos.close();\n        } catch (Exception e) {\n            Log.e(\"Error\", \"\" + e.toString());\n        }\n    }\n\n    public Bitmap createQRCodeByZxing(String contents,int size) throws WriterException {\n        //QR\u30b3\u30fc\u30c9\u3092\u30a8\u30f3\u30b3\u30fc\u30c9\u3059\u308b\u30af\u30e9\u30b9\n        QRCodeWriter writer = new QRCodeWriter();\n\n        //\u7570\u306a\u308b\u578b\u306e\u5024\u3092\u5165\u308c\u308b\u305f\u3081generic\u306f\u4f7f\u3048\u306a\u3044\n        Hashtable encodeHint = new Hashtable();\n\n        //\u65e5\u672c\u8a9e\u3092\u6271\u3046\u305f\u3081\u306b\u30b7\u30d5\u30c8JIS\u3092\u6307\u5b9a\n        encodeHint.put(EncodeHintType.CHARACTER_SET, \"shiftjis\");\n\n        //\u30a8\u30e9\u30fc\u4fee\u5fa9\u30ec\u30d9\u30eb\u3092\u6307\u5b9a\n        //L 7%\u304c\u5fa9\u5143\u53ef\u80fd\n        //M 15%\u304c\u5fa9\u5143\u53ef\u80fd\n        //Q 25%\u304c\u5fa9\u5143\u53ef\u80fd\n        //H 30%\u304c\u5fa9\u5143\u53ef\u80fd\n        encodeHint.put(EncodeHintType.ERROR_CORRECTION, ErrorCorrectionLevel.L);\n\n        BitMatrix qrCodeData = writer.encode(contents, BarcodeFormat.QR_CODE, size, size, encodeHint);\n\n        //QR\u30b3\u30fc\u30c9\u306ebitmap\u753b\u50cf\u3092\u4f5c\u6210\n        Bitmap bitmap = Bitmap.createBitmap(size, size, Bitmap.Config.ARGB_8888);\n        bitmap.eraseColor(Color.argb(255, 255, 255, 255)); //\u3044\u3089\u306a\u3044\u304b\u3082\n        for (int x = 0; x < qrCodeData.getWidth(); x++) {\n            for (int y = 0; y < qrCodeData.getHeight(); y++) {\n                if (qrCodeData.get(x, y) == true) {\n                    //0\u306fBlack\n                    bitmap.setPixel(x, y, Color.argb(255, 0, 0, 0));\n                } else {\n                    //-1\u306fWhite\n                    bitmap.setPixel(x, y, Color.argb(255, 255, 255, 255));\n                }\n            }\n        }\n\n        return bitmap;\n    }\n\n\n# ZXing\u3068\u306f\n\n* ZXing \u306f Google \u304c\u958b\u767a\u3057\u3066\u516c\u958b\u3057\u3066\u3044\u308b\u3001\u69d8\u3005\u306a\u4e00\u6b21\u5143\u3084\u4e8c\u6b21\u5143\u306e\u30d0\u30fc\u30b3\u30fc\u30c9\u306e\u751f\u6210/\u64cd\u4f5c\u304c\u3067\u304d\u308b\u30aa\u30fc\u30d7\u30f3\u30bd\u30fc\u30b9\u30e9\u30a4\u30d6\u30e9\u30ea\n* https://github.com/zxing/zxing\n\n# Android\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u306b\u3001ZXing\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u8ffd\u52a0\n\n```groovy:app/build.gradle\n\ndependencies {\n    compile fileTree(dir: 'libs', include: ['*.jar'])\n    ......\n    compile 'com.journeyapps:zxing-android-embedded:3.0.1@aar'\n    compile 'com.google.zxing:core:3.2.0'\n}\n```\n\n### zxing-android-embedded\u3068\u306f\n* https://github.com/journeyapps/zxing-android-embedded\n\n\n# QR\u30b3\u30fc\u30c9\u3092\u53d6\u5f97\u3059\u308b\u305f\u3081\u306b\u3001\u30b3\u30fc\u30c9\u5b9f\u88c5\n\n### AndroidManifest.xml\n\n```xml\n <uses-permission android:name=\"android.permission.CAMERA\"/>\n <uses-permission android:name=\"android.permission.FLASHLIGHT\"/>\n```\n\n### Activity\u5b9f\u88c5\n\n```xml:AndroidManifest.xml\n <activity\n            android:name=\".CaptureActivityAnyOrientation\"\n            android:screenOrientation=\"fullSensor\"\n            android:stateNotNeeded=\"true\"\n            android:theme=\"@style/zxing_CaptureTheme\"\n            android:windowSoftInputMode=\"stateAlwaysHidden\" />\n```\n\n```java:CaptureActivityAnyOrientation.java\nimport com.journeyapps.barcodescanner.CaptureActivity;\n\npublic class CaptureActivityAnyOrientation extends CaptureActivity {\n}\n```\n\n```java:MainActivity.java\n\n        Button mBtnCamera = (Button) findViewById(R.id.camera_button);\n        mBtnCamera.setOnClickListener(new View.OnClickListener() {\n            @Override\n            public void onClick(View v) {\n                IntentIntegrator integrator = new IntentIntegrator(LoginActivity.this);            \n                integrator.setCaptureActivity(CaptureActivityAnyOrientation.class);\n                integrator.setOrientationLocked(false);\n                integrator.initiateScan();\n            }\n        });\n```\n\n```java:MainActivity.java\n    protected void onActivityResult(int requestCode, int resultCode, Intent data) {\n        super.onActivityResult(requestCode, resultCode, data);\n        IntentResult scanResult = IntentIntegrator.parseActivityResult(requestCode, resultCode, data);\n        if (scanResult != null) {\n            TextView qResultView = (TextView) findViewById(R.id.qr_text_view);\n            qResultView.setText(scanResult.getContents());\n            Log.d(\"scan\", \"==-----:  \" + scanResult.getContents());\n        }\n    }\n```\n\n# QR\u30b3\u30fc\u30c9\u3092\u751f\u6210\u3059\u308b\u305f\u3081\u306b\u3001\u30b3\u30fc\u30c9\u5b9f\u88c5\n\n```java:MainActivity.java\n       Button mBtnCreateQRcode = (Button) findViewById(R.id.create_qrcode);\n        mBtnCreateQRcode.setOnClickListener(new View.OnClickListener() {\n            @Override\n            public void onClick(View v) {\n                createQRcode();\n            }\n        });\n\n......\n\n    private void createQRcode() {\n\n        Bitmap qr = null;\n        try {\n            qr = createQRCodeByZxing(\"http://google.co.jp\", 400);\n        } catch (WriterException e) {\n            Log.d(\"createQRcode\", \"error: \", e);\n        }\n\n        try {\n            File root = Environment.getExternalStorageDirectory();\n\n            // \u65e5\u4ed8\u3067\u30d5\u30a1\u30a4\u30eb\u540d\u3092\u4f5c\u6210\u3000\n            Date mDate = new Date();\n            SimpleDateFormat fileName = new SimpleDateFormat(\"yyyyMMdd_HHmmss\");\n\n            // \u4fdd\u5b58\u51e6\u7406\u958b\u59cb\n            FileOutputStream fos = null;\n            fos = new FileOutputStream(new File(root, fileName.format(mDate) + \".jpg\"));\n\n            // jpeg\u3067\u4fdd\u5b58\n            qr.compress(Bitmap.CompressFormat.JPEG, 100, fos);\n\n            // \u4fdd\u5b58\u51e6\u7406\u7d42\u4e86\n            fos.close();\n        } catch (Exception e) {\n            Log.e(\"Error\", \"\" + e.toString());\n        }\n    }\n\n    public Bitmap createQRCodeByZxing(String contents,int size) throws WriterException {\n        //QR\u30b3\u30fc\u30c9\u3092\u30a8\u30f3\u30b3\u30fc\u30c9\u3059\u308b\u30af\u30e9\u30b9\n        QRCodeWriter writer = new QRCodeWriter();\n\n        //\u7570\u306a\u308b\u578b\u306e\u5024\u3092\u5165\u308c\u308b\u305f\u3081generic\u306f\u4f7f\u3048\u306a\u3044\n        Hashtable encodeHint = new Hashtable();\n\n        //\u65e5\u672c\u8a9e\u3092\u6271\u3046\u305f\u3081\u306b\u30b7\u30d5\u30c8JIS\u3092\u6307\u5b9a\n        encodeHint.put(EncodeHintType.CHARACTER_SET, \"shiftjis\");\n\n        //\u30a8\u30e9\u30fc\u4fee\u5fa9\u30ec\u30d9\u30eb\u3092\u6307\u5b9a\n        //L 7%\u304c\u5fa9\u5143\u53ef\u80fd\n        //M 15%\u304c\u5fa9\u5143\u53ef\u80fd\n        //Q 25%\u304c\u5fa9\u5143\u53ef\u80fd\n        //H 30%\u304c\u5fa9\u5143\u53ef\u80fd\n        encodeHint.put(EncodeHintType.ERROR_CORRECTION, ErrorCorrectionLevel.L);\n\n        BitMatrix qrCodeData = writer.encode(contents, BarcodeFormat.QR_CODE, size, size, encodeHint);\n\n        //QR\u30b3\u30fc\u30c9\u306ebitmap\u753b\u50cf\u3092\u4f5c\u6210\n        Bitmap bitmap = Bitmap.createBitmap(size, size, Bitmap.Config.ARGB_8888);\n        bitmap.eraseColor(Color.argb(255, 255, 255, 255)); //\u3044\u3089\u306a\u3044\u304b\u3082\n        for (int x = 0; x < qrCodeData.getWidth(); x++) {\n            for (int y = 0; y < qrCodeData.getHeight(); y++) {\n                if (qrCodeData.get(x, y) == true) {\n                    //0\u306fBlack\n                    bitmap.setPixel(x, y, Color.argb(255, 0, 0, 0));\n                } else {\n                    //-1\u306fWhite\n                    bitmap.setPixel(x, y, Color.argb(255, 255, 255, 255));\n                }\n            }\n        }\n\n        return bitmap;\n    }\n```\n"}