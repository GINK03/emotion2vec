{"tags": ["Spark", "Scala", "Java", "Python", "ApacheSpark"], "context": " More than 1 year has passed since last update.\u4ee5\u4e0b\u306e\u30da\u30fc\u30b8\u306e\u65e5\u672c\u8a9e\u8a33\u3067\u3059\u3002\u307f\u3093\u306a\u3067Spark\u4f7f\u3044\u306b\u306a\u308a\u307e\u3057\u3087\u3046\u3002\nhttp://spark.apache.org/docs/latest/quick-start.html\nAWS EC2\u3067\u306eSpark\u74b0\u5883\u69cb\u7bc9\u30ac\u30a4\u30c9\u306e\u548c\u8a33\u3082\u4e0b\u8a18\u3067\u4f5c\u3063\u3066\u3044\u308b\u306e\u3067\u3088\u308d\u3057\u3051\u308c\u3070\u3054\u89a7\u304f\u3060\u3055\u3044\u3002\n\nSpark on AWS EC2\nhttp://qiita.com/mychaelstyle/items/b752087a0bee6e41c182\n\nCluster Mode Overview\nhttp://qiita.com/mychaelstyle/items/610b432a1ef1a7e3d2a0\n\n\n\u548c\u8a33\u306b\u304a\u304b\u3057\u306a\u3068\u3053\u308d\u304c\u3042\u308a\u307e\u3057\u305f\u3089\u30b3\u30e1\u30f3\u30c8\u306b\u3066\u3054\u6307\u6458\u304f\u3060\u3055\u3044\u3002\n\nQuick Start\n\nThis tutorial provides a quick introduction to using Spark. We will first introduce the API through Spark\u2019s interactive shell (in Python or Scala), then show how to write standalone applications in Java, Scala, and Python. See the programming guide for a more complete reference.\n\n\u3053\u306e\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb\u306fSpark\u3092\u5229\u7528\u3059\u308b\u70ba\u306e\u7c21\u5358\u306a\u7d39\u4ecb\u3067\u3059\u3002\u79c1\u305f\u3061\u306f\u6700\u521d\u306bSpark\u30a4\u30f3\u30bf\u30e9\u30af\u30c6\u30a3\u30d6\u30b7\u30a7\u30eb\uff08Python\u307e\u305f\u306fScala)\u3092\u901a\u3058\u3066API\u3092\u7d39\u4ecb\u3057\u307e\u3059\u3002\n\u305d\u308c\u304b\u3089\u3069\u306e\u3088\u3046\u306bJava\u3001Scala\u3001Python\u3067\u30b9\u30bf\u30f3\u30c9\u30a2\u30ed\u30f3\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u3092\u8a18\u8ff0\u3059\u308b\u304b\u3092\u7d39\u4ecb\u3057\u307e\u3059\u3002\n\u3088\u308a\u8a73\u7d30\u306a\u30ea\u30d5\u30a1\u30ec\u30f3\u30b9\u306f\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u30ac\u30a4\u30c9\u3092\u3054\u89a7\u304f\u3060\u3055\u3044\u3002\nhttp://spark.apache.org/docs/latest/programming-guide.html\n\nTo follow along with this guide, first download a packaged release of Spark from the Spark website. Since we won\u2019t be using HDFS, you can download a package for any version of Hadoop.\n\n\u3053\u306e\u30ac\u30a4\u30c9\u3092\u7406\u89e3\u3059\u308b\u70ba\u306b\u6700\u521d\u306b\u30d1\u30c3\u30b1\u30fc\u30b8\u30ea\u30ea\u30fc\u30b9\u3055\u308c\u305fSpark\u3092\u30a6\u30a7\u30d6\u30b5\u30a4\u30c8\u304b\u3089\u5165\u624b\u3057\u3066\u304f\u3060\u3055\u3044\u3002HDFS\u3092\u5229\u7528\u3057\u306a\u3044\u306e\u3067\u3069\u306e\u30d0\u30fc\u30b8\u30e7\u30f3\u306eHadoop\u3067\u3082\u304b\u307e\u3044\u307e\u305b\u3093\u3002\n\nInteractive Analysis with the Spark Shell\nSpark Shell\u3092\u5229\u7528\u3057\u305f\u30a4\u30f3\u30bf\u30e9\u30af\u30c6\u30a3\u30d6\u306a\u89e3\u6790\n\nBasics\n\nSpark\u2019s shell provides a simple way to learn the API, as well as a powerful tool to analyze data interactively. It is available in either Scala (which runs on the Java VM and is thus a good way to use existing Java libraries) or Python. Start it by running the following in the Spark directory:\n\nSpark\u30b7\u30a7\u30eb\u306fAPI\u3092\u7c21\u5358\u306b\u5b66\u3076\u3053\u3068\u304c\u3067\u304d\u3001\u30a4\u30f3\u30bf\u30e9\u30af\u30c6\u30a3\u30d6\u306b\u30c7\u30fc\u30bf\u3092\u89e3\u6790\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u308b\u5354\u529b\u306a\u30c4\u30fc\u30eb\u3067\u3059\u3002Scala(JVM\u3067\u52d5\u4f5c\u3057Java\u306e\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u5229\u7528\u3059\u308b\u306e\u306b\u6700\u9069\u3067\u3059)\u304bPython\u3067\u5229\u7528\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002Spark\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u5185\u3067\u4ee5\u4e0b\u306e\u30b3\u30de\u30f3\u30c9\u3092\u5b9f\u884c\u3057\u3066Spark\u30b7\u30a7\u30eb\u3092\u958b\u59cb\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n\nScala\n./bin/spark-shell\n\n\n\nPython\n./bin/pyspark\n\n\n\nSpark\u2019s primary abstraction is a distributed collection of items called a Resilient Distributed Dataset (RDD). RDDs can be created from Hadoop InputFormats (such as HDFS files) or by transforming other RDDs. Let\u2019s make a new RDD from the text of the README file in the Spark source directory:\n\nSpark\u306e\u6700\u3082\u91cd\u8981\u306a\u62bd\u8c61\u6982\u5ff5\u306fResilient Distributed Dataset(RDD:\u5f3e\u529b\u6027\u306e\u3042\u308b\u5206\u5272\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\uff09\u306b\u3088\u308a\u547c\u3073\u51fa\u3055\u308c\u308b\u5206\u5272\u30b3\u30ec\u30af\u30b7\u30e7\u30f3\u3067\u3059\u3002RDD\u306fHadoop InputFormas(HDF\u30d5\u30a1\u30a4\u30eb\u306e\u3088\u3046\u306a\uff09\u3084\u30c8\u30e9\u30f3\u30b9\u30d5\u30a9\u30fc\u30e0\u3055\u308c\u305f\u4ed6\u306eRDDs\u304b\u3089\u4f5c\u6210\u3067\u304d\u307e\u3059\u3002\u65b0\u3057\u3044RDD\u3092Spark\u30bd\u30fc\u30b9\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u306eREADME\u30c6\u30ad\u30b9\u30c8\u30d5\u30a1\u30a4\u30eb\u304b\u3089\u4f5c\u6210\u3057\u3066\u307f\u307e\u3057\u3087\u3046\u3002\n\nScala\nscala> val textFile = sc.textFile(\"README.md\")\ntextFile: spark.RDD[String] = spark.MappedRDD@2ee9b6e3\n\n\n\nPython\n>>> textFile = sc.textFile(\"README.md\")\n\n\n\nRDDs have actions, which return values, and transformations, which return pointers to new RDDs. Let\u2019s start with a few actions:\n\nRDD\u306f\u5024\u3084\u65b0\u3057\u3044RDD\u3078\u306e\u30dd\u30a4\u30f3\u30bf\u30fc\u306e\u5909\u63db\u3092\u8fd4\u3059\u30a2\u30af\u30b7\u30e7\u30f3\u3092\u4fdd\u6301\u3057\u3066\u3044\u307e\u3059\u3002\n\u3044\u304f\u3064\u304b\u306e\u30a2\u30af\u30b7\u30e7\u30f3\u3092\u958b\u59cb\u3057\u3066\u307f\u307e\u3057\u3087\u3046\u3002\n\nScala\nscala> textFile.count() // \u3053\u306eRDD\u306e\u9805\u76ee\u6570\uff08\u884c\u6570\uff09\nres0: Long = 126\n\nscala> textFile.first() // RDD\u306e\u6700\u521d\u306e\u9805\u76ee\uff08\u6700\u521d\u306e\u884c\uff09\nres1: String = # Apache Spark\n\n\n\nPython\n>>> textFile.count() # Number of items in this RDD\n126\n\n>>> textFile.first() # First item in this RDD\nu'# Apache Spark'\n\n\n\nNow let\u2019s use a transformation. We will use the filter transformation to return a new RDD with a subset of the items in the file.\n\n\u4eca\u5ea6\u306f\u30c8\u30e9\u30f3\u30b9\u30d5\u30a9\u30fc\u30e1\u30fc\u30b7\u30e7\u30f3\uff08\u5909\u63db\uff09\u3092\u5229\u7528\u3057\u3066\u307f\u307e\u3057\u3087\u3046\u3002\u79c1\u305f\u3061\u306f\u30d5\u30a1\u30a4\u30eb\u304b\u3089\u4f5c\u3063\u305fRDD\u306e\u30b5\u30d6\u30bb\u30c3\u30c8\u3068\u3057\u3066\u65b0\u3057\u3044RDD\u3092\u8fd4\u3059\u30d5\u30a3\u30eb\u30bf\u30fc\u5909\u63db\u3092\u5229\u7528\u3057\u307e\u3059\u3002\n\nScala\nscala> val linesWithSpark = textFile.filter(line => line.contains(\"Spark\"))\nlinesWithSpark: spark.RDD[String] = spark.FilteredRDD@7dd4af09\n\n\n\nPython\n>>> linesWithSpark = textFile.filter(lambda line: \"Spark\" in line)\n\n\n\nWe can chain together transformations and actions:\n\n\u5909\u63db\u3068\u30a2\u30af\u30b7\u30e7\u30f3\u3092\u30c1\u30a7\u30a4\u30f3\u3059\u308b\u3053\u3068\u3082\u3067\u304d\u307e\u3059\u3002\n\nScala\nscala> textFile.filter(line => line.contains(\"Spark\")).count() // How many lines contain \"Spark\"?\nres3: Long = 15\n\n\n\nPython\n>>> textFile.filter(lambda line: \"Spark\" in line).count() # How many lines contain \"Spark\"?\n15\n\n\n\nMore on RDD Operations\nRDD\u306e\u30aa\u30da\u30ec\u30fc\u30b7\u30e7\u30f3\u3092\u3082\u3063\u3068\u8a73\u3057\u304f\u3002\n\nRDD actions and transformations can be used for more complex computations. Let\u2019s say we want to find the line with the most words:\n\nRDD\u30a2\u30af\u30b7\u30e7\u30f3\u3068\u5909\u63db\u306f\u3088\u308a\u8907\u96d1\u306a\u8a08\u7b97\u306b\u5229\u7528\u3067\u304d\u307e\u3059\u3002\n\nscala\nscala> textFile.map(line => line.split(\" \").size).reduce((a, b) => if (a > b) a else b)\nres4: Long = 15\n\n\n\nThis first maps a line to an integer value, creating a new RDD. reduce is called on that RDD to find the largest line count. The arguments to map and reduce are Scala function literals (closures), and can use any language feature or Scala/Java library. For example, we can easily call functions declared elsewhere. We\u2019ll use Math.max() function to make this code easier to understand:\n\n\u6700\u521d\u306b\u884c\u3068Integer\u5024\u306e\u30de\u30c3\u30d4\u30f3\u30b0\u3067\u65b0\u3057\u3044RDD\u3092\u4f5c\u6210\u3057\u3066\u3044\u307e\u3059\u3002\nreduce\u304c\u6700\u3082\u5927\u304d\u3044\u884c\u3092\u898b\u3064\u3051\u308b\u305f\u3081\u306b\u3053\u306eRDD\u3067\u547c\u3073\u51fa\u3055\u308c\u307e\u3059\u3002\nmap\u3068reduce\u306e\u5f15\u6570\u306fScala\u306e\u30af\u30ed\u30fc\u30b8\u30e3\u95a2\u6570\u3067\u3042\u308a\u3001Scala\u3068Java\u306e\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u306a\u3093\u3067\u3082\u5229\u7528\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\u4f8b\u3048\u3070\u3001\u3069\u3053\u3067\u5ba3\u8a00\u3055\u308c\u305f\u95a2\u6570\u3067\u3082\u7c21\u5358\u306b\u30b3\u30fc\u30eb\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002Math.max()\u95a2\u6570\u3092\u3053\u306e\u30b3\u30fc\u30c9\u306b\u4f7f\u3046\u3068\u5206\u304b\u308a\u3084\u3059\u3044\u3067\u3057\u3087\u3046\u3002\n\nscala\nscala> import java.lang.Math\nimport java.lang.Math\n\nscala> textFile.map(line => line.split(\" \").size).reduce((a, b) => Math.max(a, b))\nres5: Int = 15\n\n\n\nOne common data flow pattern is MapReduce, as popularized by Hadoop. Spark can implement MapReduce flows easily:\n\n\u4e00\u822c\u7684\u306a\u30c7\u30fc\u30bf\u30d5\u30ed\u30fc\u30d1\u30bf\u30fc\u30f3\u306e\u3072\u3068\u3064\u3068\u3057\u3066Hadoop\u3067\u6709\u540d\u306b\u306a\u3063\u305fMapReduce\u304c\u3042\u308a\u307e\u3059\u3002Spark\u306fMapReduce\u30d5\u30ed\u30fc\u3092\u7c21\u5358\u306b\u5b9f\u88c5\u3067\u304d\u307e\u3059\u3002\n\nScala\nscala> val wordCounts = textFile.flatMap(line => line.split(\" \")).map(word => (word, 1)).reduceByKey((a, b) => a + b)\nwordCounts: spark.RDD[(String, Int)] = spark.ShuffledAggregatedRDD@71f027b8\n\n\n\nHere, we combined the flatMap, map and reduceByKey transformations to compute the per-word counts in the file as an RDD of (String, Int) pairs. To collect the word counts in our shell, we can use the collect action:\n\n\u3053\u3053\u3067\u306f\u3001\u30d5\u30a1\u30a4\u30eb\u4e2d\u306e\u5358\u8a9e\u6570\u3092\u6570\u3048\u308b\u70ba\u306bflatMap\u3092\u7d50\u5408\u3057\u3066map\u3068redeceByKey\u5909\u63db\u3092\u3057\u3066String\u3068Int\u30da\u30a2\u306eRDD\u3092\u751f\u6210\u3057\u3066\u3044\u307e\u3059\u3002\n\u5358\u8a9e\u6570\u3092\u30b7\u30a7\u30eb\u4e2d\u3067\u53ce\u96c6\u3059\u308b\u70ba\u306bcollect\u30a2\u30af\u30b7\u30e7\u30f3\u3092\u4f7f\u3048\u307e\u3059\u3002\n\nScala\nscala> wordCounts.collect()\nres6: Array[(String, Int)] = Array((means,1), (under,2), (this,3), (Because,1), (Python,2), (agree,1), (cluster.,1), ...)\n\n\n\nCaching (\u30ad\u30e3\u30c3\u30b7\u30f3\u30b0)\n\nSpark also supports pulling data sets into a cluster-wide in-memory cache. This is very useful when data is accessed repeatedly, such as when querying a small \u201chot\u201d dataset or when running an iterative algorithm like PageRank. As a simple example, let\u2019s mark our linesWithSpark dataset to be cached:\n\nSpark\u306f\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u3092\u30af\u30e9\u30b9\u30bf\u30fc\u30ef\u30a4\u30c9\u306a\u30a4\u30f3\u30e1\u30e2\u30ea\u30fc\u30ad\u30e3\u30c3\u30b7\u30e5\u304b\u3089\u53d6\u5f97\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\u3053\u308c\u306f\u7e70\u308a\u8fd4\u3057\u30a2\u30af\u30bb\u30b9\u3055\u308c\u308b\u30c7\u30fc\u30bf\u3001\u5c11\u91cf\u306e\u30db\u30c3\u30c8\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u306b\u554f\u3044\u5408\u308f\u305b\u305f\u308a\u3001\u30da\u30fc\u30b8\u30e9\u30f3\u30af\u306e\u3088\u3046\u306a\u30a4\u30f3\u30bf\u30e9\u30af\u30c6\u30a3\u30d6\u306a\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u306e\u5834\u5408\u306b\u5927\u5909\u6709\u7528\u3067\u3059\u3002\n\u7c21\u5358\u306a\u4f8b\u3068\u3057\u3066linesWithSpark\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u3092\u30ad\u30e3\u30c3\u30b7\u30e5\u3068\u3057\u3066\u30de\u30fc\u30af\u3057\u3066\u307f\u307e\u3057\u3087\u3046\u3002\n\nScala\nscala> linesWithSpark.cache()\nres7: spark.RDD[String] = spark.FilteredRDD@17e51082\n\nscala> linesWithSpark.count()\nres8: Long = 15\n\nscala> linesWithSpark.count()\nres9: Long = 15\n\n\n\nIt may seem silly to use Spark to explore and cache a 100-line text file. The interesting part is that these same functions can be used on very large data sets, even when they are striped across tens or hundreds of nodes. You can also do this interactively by connecting bin/spark-shell to a cluster, as described in the programming guide.\n\n100\u884c\u7a0b\u5ea6\u306e\u30c6\u30ad\u30b9\u30c8\u30d5\u30a1\u30a4\u30eb\u3092\u30ad\u30e3\u30c3\u30b7\u30e5\u3059\u308b\u3070\u304b\u3070\u304b\u3057\u3044Spark\u306e\u4f7f\u3044\u65b9\u306b\u898b\u3048\u308b\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u3002\u8208\u5473\u6df1\u3044\u70b9\u306f\u3053\u308c\u3089\u306e\u540c\u3058\u95a2\u6570\u7fa4\u304c\u5de8\u5927\u306a\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u3067\u3082\u5229\u7528\u3067\u304d\u308b\u3053\u3068\u3067\u3042\u308a\u3001\u30b9\u30c8\u30e9\u30a4\u30d4\u30f3\u30b0\u3055\u308c\u305f\u6570\u5341\u3001\u6570\u767e\u306e\u30ce\u30fc\u30c9\u3067\u3082\u540c\u3058\u3088\u3046\u306b\u4f7f\u3048\u308b\u3053\u3068\u3067\u3059\u3002\n\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u30ac\u30a4\u30c9\u306b\u63b2\u8f09\u3057\u3066\u3044\u308b\u3088\u3046\u306bbin/spark-shell\u3067\u30af\u30e9\u30b9\u30bf\u30fc\u306b\u63a5\u7d9a\u3057\u3066\u30a4\u30f3\u30bf\u30e9\u30af\u30c6\u30a3\u30d6\u306b\u3053\u308c\u3089\u3092\u5b9f\u884c\u3067\u304d\u307e\u3059\u3002\n\nStandalone Applications (\u30b9\u30bf\u30f3\u30c9\u30a2\u30ed\u30fc\u30f3\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\uff09\n\nScala\n\nNow say we wanted to write a standalone application using the Spark API. We will walk through a simple application in both Scala (with SBT), Java (with Maven), and Python.\n\n\u305d\u308c\u3067\u306fSpark API\u3092\u5229\u7528\u3057\u305f\u30b9\u30bf\u30f3\u30c9\u30a2\u30ed\u30f3\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u3092\u8a18\u8ff0\u3059\u308b\u65b9\u6cd5\u3092\u958b\u8a2d\u3057\u307e\u3059\u3002\nScala(with SBT)\u3001Java(with Maven), Python\u3067\u306e\u7c21\u5358\u306a\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u3092\u898b\u3066\u307f\u307e\u3057\u3087\u3046\u3002\n\nWe\u2019ll create a very simple Spark application in Scala. So simple, in fact, that it\u2019s named SimpleApp.scala:\n\n\u3068\u3066\u3082\u30b7\u30f3\u30d7\u30eb\u306aSpark\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u3092\u4f5c\u308a\u307e\u3057\u3087\u3046\u3002\u3068\u3066\u3082\u30b7\u30f3\u30d7\u30eb\u3067\u5b9f\u8cea\u7684\u306a\u306e\u3067SimpleApp.scala\u3068\u540d\u4ed8\u3051\u307e\u3057\u305f\u3002\n\nSimpleApp.scala\n/* SimpleApp.scala */\nimport org.apache.spark.SparkContext\nimport org.apache.spark.SparkContext._\nimport org.apache.spark.SparkConf\n\nobject SimpleApp {\n  def main(args: Array[String]) {\n    val logFile = \"YOUR_SPARK_HOME/README.md\" // \u3042\u306a\u305f\u306e\u30de\u30b7\u30f3\u4e0a\u306e\u30d1\u30b9\n    val conf = new SparkConf().setAppName(\"Simple Application\")\n    val sc = new SparkContext(conf)\n    val logData = sc.textFile(logFile, 2).cache()\n    val numAs = logData.filter(line => line.contains(\"a\")).count()\n    val numBs = logData.filter(line => line.contains(\"b\")).count()\n    println(\"Lines with a: %s, Lines with b: %s\".format(numAs, numBs))\n  }\n}\n\n\n\nThis program just counts the number of lines containing \u2018a\u2019 and the number containing \u2018b\u2019 in the Spark README. Note that you\u2019ll need to replace YOUR_SPARK_HOME with the location where Spark is installed. Unlike the earlier examples with the Spark shell, which initializes its own SparkContext, we initialize a SparkContext as part of the program.\n\n\u3053\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u306f\u305f\u3060Spark\u306eREADME\u30d5\u30a1\u30a4\u30eb\u4e2d\u306ea\u3068b\u3092\u542b\u3080\u884c\u306e\u6570\u3092\u6570\u3048\u3066\u3044\u308b\u3060\u3051\u3067\u3059\u3002YOUR_SPARK_HOME\u3092\u3042\u306a\u305f\u304cSpark\u3092\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3057\u305f\u30d5\u30a9\u30eb\u30c0\u306e\u30d1\u30b9\u306b\u5909\u66f4\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n\u5148\u307b\u3069\u306espark\u30b7\u30a7\u30eb\u3092\u4f7f\u3063\u305f\u4f8b\u3068\u9055\u3063\u3066\u3001\u3053\u3053\u3067\u306f\u72ec\u81ea\u306eSparkContext\u3092\u521d\u671f\u5316\u3057\u3066\u304a\u308a\u3001\u30d7\u30ed\u30b0\u30e9\u30e0\u306e\u4e00\u90e8\u3068\u3057\u3066\u521d\u671f\u5316\u3057\u3066\u3044\u307e\u3059\u3002\n\nWe pass the SparkContext constructor a SparkConf object which contains information about our application.\n\nSparkContext\u306e\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u306b\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u306e\u60c5\u5831\u3092\u542b\u3080SparkConf\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u6e21\u3057\u3066\u3044\u307e\u3059\u3002\n\nOur application depends on the Spark API, so we\u2019ll also include an sbt configuration file, simple.sbt which explains that Spark is a dependency. This file also adds a repository that Spark depends on:\n\n\u79c1\u305f\u3061\u306e\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u306fSpark API\u306b\u4f9d\u5b58\u3057\u3066\u3044\u308b\u305f\u3081\u3001sbt\u306e\u8a2d\u5b9a\u30d5\u30a1\u30a4\u30eb\u3082\u30a4\u30f3\u30af\u30eb\u30fc\u30c9\u3057\u307e\u3059\u3002\u3053\u306e\u30d5\u30a1\u30a4\u30eb\u306fSpark\u304c\u4f9d\u5b58\u3057\u3066\u3044\u308b\u30ea\u30dd\u30b8\u30c8\u30ea\u3082\u8ffd\u52a0\u3057\u307e\u3059\u3002\nname := \"Simple Project\"\n\nversion := \"1.0\"\n\nscalaVersion := \"2.10.4\"\n\nlibraryDependencies += \"org.apache.spark\" %% \"spark-core\" % \"1.0.0\"\n\nresolvers += \"Akka Repository\" at \"http://repo.akka.io/releases/\"\n\n\nFor sbt to work correctly, we\u2019ll need to layout SimpleApp.scala and simple.sbt according to the typical directory structure. Once that is in place, we can create a JAR package containing the application\u2019s code, then use the spark-submit script to run our program.\n\nsbt\u304c\u6b63\u5e38\u306b\u52d5\u4f5c\u3059\u308b\u70ba\u306b\u3001SympleApp.scala\u3068simple.sbt\u3092\u4e00\u822c\u7684\u306a\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u69cb\u6210\u3067\u30ec\u30a4\u30a2\u30a6\u30c8\u3057\u307e\u3059\u3002\u4e00\u5ea6\u914d\u7f6e\u3059\u308b\u3068\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u30b3\u30fc\u30c9\u3092\u542b\u3080JAR\u30d1\u30c3\u30b1\u30fc\u30b8\u3092\u751f\u6210\u3057\u3001spark-submit\u30b9\u30af\u30ea\u30d7\u30c8\u3067\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u7a3c\u50cd\u3055\u305b\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n# Your directory layout should look like this\n$ find .\n.\n./simple.sbt\n./src\n./src/main\n./src/main/scala\n./src/main/scala/SimpleApp.scala\n\n# Package a jar containing your application\n$ sbt package\n...\n[info] Packaging {..}/{..}/target/scala-2.10/simple-project_2.10-1.0.jar\n\n# Use spark-submit to run your application\n$ YOUR_SPARK_HOME/bin/spark-submit \\\n  --class \"SimpleApp\" \\\n  --master local[4] \\\n  target/scala-2.10/simple-project_2.10-1.0.jar\n...\nLines with a: 46, Lines with b: 23\n\n\nJava\n\nThis example will use Maven to compile an application jar, but any similar build system will work.\nWe\u2019ll create a very simple Spark application, SimpleApp.java:\n\n\u3053\u306e\u4f8b\u306f\u30a2\u30d7\u30ea\u30b8\u30a7\u30fc\u30b7\u30e7\u30f3\u306ejar\u3092\u30b3\u30f3\u30d1\u30a4\u30eb\u3059\u308b\u70ba\u306bMaven\u3092\u5229\u7528\u3057\u3066\u3044\u307e\u3059\u304c\u985e\u4f3c\u306e\u30d3\u30eb\u30c9\u30b7\u30b9\u30c6\u30e0\u3067\u52d5\u4f5c\u3059\u308b\u3067\u3057\u3087\u3046\u3002\n\u3068\u3066\u3082\u30b7\u30f3\u30d7\u30eb\u306aSimpleApp.java\u3068\u3044\u3046Spark\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u3092\u4f5c\u308a\u307e\u3057\u3087\u3046\u3002\n\nSimpleApp.java\n/* SimpleApp.java */\nimport org.apache.spark.api.java.*;\nimport org.apache.spark.SparkConf;\nimport org.apache.spark.api.java.function.Function;\n\npublic class SimpleApp {\n  public static void main(String[] args) {\n    String logFile = \"YOUR_SPARK_HOME/README.md\"; // Should be some file on your system\n    SparkConf conf = new SparkConf().setAppName(\"Simple Application\");\n    JavaSparkContext sc = new JavaSparkContext(conf);\n    JavaRDD<String> logData = sc.textFile(logFile).cache();\n\n    long numAs = logData.filter(new Function<String, Boolean>() {\n      public Boolean call(String s) { return s.contains(\"a\"); }\n    }).count();\n\n    long numBs = logData.filter(new Function<String, Boolean>() {\n      public Boolean call(String s) { return s.contains(\"b\"); }\n    }).count();\n\n    System.out.println(\"Lines with a: \" + numAs + \", lines with b: \" + numBs);\n  }\n}\n\n\n\nThis program just counts the number of lines containing \u2018a\u2019 and the number containing \u2018b\u2019 in a text file. Note that you\u2019ll need to replace YOUR_SPARK_HOME with the location where Spark is installed.\n\n\u3053\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u306f\u30c6\u30ad\u30b9\u30c8\u30d5\u30a1\u30a4\u30eb\u4e2d\u306ea\u3068b\u3092\u542b\u3080\u884c\u6570\u3092\u6570\u3048\u308b\u3060\u3051\u306e\u3082\u306e\u3067\u3059\u3002YOUR_SPARK_HOME\u90e8\u5206\u3092\u3042\u306a\u305f\u306eSpark\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u30d5\u30a9\u30eb\u30c0\u30d1\u30b9\u306b\u7f6e\u304d\u63db\u3048\u3066\u304f\u3060\u3055\u3044\u3002\n\nAs with the Scala example, we initialize a SparkContext, though we use the special JavaSparkContext class to get a Java-friendly one. We also create RDDs (represented by JavaRDD) and run transformations on them. Finally, we pass functions to Spark by creating classes that extend spark.api.java.function.Function. The Spark programming guide describes these differences in more detail.\n\nScala\u306e\u4f8b\u3068\u540c\u69d8\u306b\u3001SparkContext\u3092\u521d\u671f\u5316\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u304c\u3001\u7279\u8a18\u4e8b\u9805\u3068\u3057\u3066JavaSparkContext\u30af\u30e9\u30b9\u3092\u5229\u7528\u3057\u3066Java\u306b\u3088\u308a\u89aa\u548c\u6027\u306e\u9ad8\u3044SparkContext\u3092\u53d6\u5f97\u3057\u307e\u3059\u3002\u540c\u69d8\u306bJavaRDD\u3092\u4ee3\u7528\u3057\u3066RDD\u3092\u751f\u6210\u3057\u3001\u305d\u306e\u4e0a\u3067\u5909\u63db\u3092\u5b9f\u884c\u3057\u307e\u3059\u3002\u6700\u5f8c\u306b\u3001spark.api.java.funtction.Function\u3092extends\u3057\u3066\u30af\u30e9\u30b9\u3092\u4f5c\u6210\u3057\u95a2\u6570\u3092Spark\u306b\u6e21\u3057\u307e\u3059\u3002Spark\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u30ac\u30a4\u30c9\u306b\u3053\u306e\u9055\u3044\u306e\u8a73\u7d30\u3092\u8a18\u8f09\u3057\u3066\u3044\u307e\u3059\u3002\nhttp://spark.apache.org/docs/latest/programming-guide.html\n\nTo build the program, we also write a Maven pom.xml file that lists Spark as a dependency. Note that Spark artifacts are tagged with a Scala version.\n\n\u3053\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u30d3\u30eb\u30c9\u3059\u308b\u70ba\u306bMaven\u306epom.xml\u30d5\u30a1\u30a4\u30eb\u306b\u6b21\u306e\u3088\u3046\u306bSpark\u306e\u4f9d\u5b58\u95a2\u4fc2\u3092\u8a18\u8ff0\u3057\u3066\u304f\u3060\u3055\u3044\u3002Spark\u306e\u30a2\u30fc\u30c6\u30a3\u30d5\u30a1\u30af\u30c8\u306fScala\u306e\u30d0\u30fc\u30b8\u30e7\u30f3\u3067\u30bf\u30b0\u4ed8\u3051\u3055\u308c\u3066\u3044\u308b\u306e\u3067\u6ce8\u610f\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n\npom.xml\n<project>\n  <groupId>edu.berkeley</groupId>\n  <artifactId>simple-project</artifactId>\n  <modelVersion>4.0.0</modelVersion>\n  <name>Simple Project</name>\n  <packaging>jar</packaging>\n  <version>1.0</version>\n  <repositories>\n    <repository>\n      <id>Akka repository</id>\n      <url>http://repo.akka.io/releases</url>\n    </repository>\n  </repositories>\n  <dependencies>\n    <dependency> <!-- Spark dependency -->\n      <groupId>org.apache.spark</groupId>\n      <artifactId>spark-core_2.10</artifactId>\n      <version>1.0.0</version>\n    </dependency>\n  </dependencies>\n</project>\n\n\n\nWe layout these files according to the canonical Maven directory structure:\n\n\u3053\u308c\u3089\u306e\u30d5\u30a1\u30a4\u30eb\u3092Maven\u306e\u4f5c\u6cd5\u306b\u3042\u308f\u305b\u305f\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u69cb\u6210\u3067\u914d\u7f6e\u3057\u307e\u3059\u3002\n$ find .\n./pom.xml\n./src\n./src/main\n./src/main/java\n./src/main/java/SimpleApp.java\n\n\nNow, we can package the application using Maven and execute it with ./bin/spark-submit.\n\n\u305d\u3046\u3059\u308c\u3070Maven\u3092\u4f7f\u3063\u3066./bin/spark-submit\u30b9\u30af\u30ea\u30d7\u30c8\u3067\u5b9f\u884c\u53ef\u80fd\u306aSpark\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u3068\u3057\u3066\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u3092\u30d1\u30c3\u30b1\u30fc\u30b8\u5316\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n# Package a jar containing your application\n$ mvn package\n...\n[INFO] Building jar: {..}/{..}/target/simple-project-1.0.jar\n\n# Use spark-submit to run your application\n$ YOUR_SPARK_HOME/bin/spark-submit \\\n  --class \"SimpleApp\" \\\n  --master local[4] \\\n  target/simple-project-1.0.jar\n...\nLines with a: 46, Lines with b: 23\n\n\nPython\n\nNow we will show how to write a standalone application using the Python API (PySpark).\nAs an example, we\u2019ll create a simple Spark application, SimpleApp.py:\n\n\u305d\u308c\u3067\u306fPython API(PySpark)\u3092\u3064\u304b\u3063\u3066\u30b9\u30bf\u30f3\u30c9\u30a2\u30ed\u30f3\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u3092\u8a18\u8ff0\u3059\u308b\u65b9\u6cd5\u3092\u7d39\u4ecb\u3057\u307e\u3059\u3002\n\u4f8b\u3068\u3057\u3066SimpleApp.py\u3068\u3044\u3046\u30b7\u30f3\u30d7\u30eb\u306aSpark\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u3092\u4f5c\u308a\u307e\u3059\u3002\n\nSimpleApp.py\n\"\"\"SimpleApp.py\"\"\"\nfrom pyspark import SparkContext\n\nlogFile = \"YOUR_SPARK_HOME/README.md\"  # Should be some file on your system\nsc = SparkContext(\"local\", \"Simple App\")\nlogData = sc.textFile(logFile).cache()\n\nnumAs = logData.filter(lambda s: 'a' in s).count()\nnumBs = logData.filter(lambda s: 'b' in s).count()\n\nprint \"Lines with a: %i, lines with b: %i\" % (numAs, numBs)\n\n\n\nThis program just counts the number of lines containing \u2018a\u2019 and the number containing \u2018b\u2019 in a text file. Note that you\u2019ll need to replace YOUR_SPARK_HOME with the location where Spark is installed.\n\n\u3053\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u306f\uff08\u3082\u3046\u4ee5\u4e0b\u7565\uff09\n\nAs with the Scala and Java examples, we use a SparkContext to create RDDs. We can pass Python functions to Spark, which are automatically serialized along with any variables that they reference.\n\nScala\u3068Java\u306e\u4f8b\u3068\u540c\u69d8\u306bRDDs\u3092\u751f\u6210\u3059\u308b\u70ba\u306bSparkContext\u3092\u5229\u7528\u3057\u307e\u3059\u3002Spark\u306b\u76f4\u63a5Python\u306e\u95a2\u6570\u3092\u6e21\u3059\u3053\u3068\u304c\u3067\u304d\u3001\u81ea\u52d5\u7684\u306b\u5f15\u6570\u306e\u5024\u3084\u53c2\u7167\u3068\u3068\u3082\u306b\u30b7\u30ea\u30a2\u30e9\u30a4\u30ba\u3055\u308c\u307e\u3059\u3002\n\nFor applications that use custom classes or third-party libraries, we can also add code dependencies to spark-submit through its --py-files argument by packaging them into a .zip file (see spark-submit --help for details). SimpleApp is simple enough that we do not need to specify any code dependencies.\n\n\u30ab\u30b9\u30bf\u30e0\u30af\u30e9\u30b9\u3084\u30b5\u30fc\u30c9\u30d1\u30fc\u30c6\u30a3\u306e\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u5229\u7528\u3059\u308b\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u306e\u70ba\u306b\u3001\u4f9d\u5b58\u95a2\u4fc2\u3092spark-submit\u306b--py-files\u30aa\u30d7\u30b7\u30e7\u30f3\u3067\u30d1\u30c3\u30b1\u30fc\u30b8\u304b\u3055\u308c\u305fzip\u30d5\u30a1\u30a4\u30eb\u3092\u6e21\u3059\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\uff08spark-submit\u306e--help\u3067\u8a73\u7d30\u3092\u78ba\u8a8d\u3057\u3066\u304f\u3060\u3055\u3044)\nSimpleApp\u3092\u898b\u308c\u3070\u7279\u5225\u306b\u4f9d\u5b58\u95a2\u4fc2\u306e\u30b3\u30fc\u30c9\u3092\u8a18\u8ff0\u3059\u308b\u5fc5\u8981\u304c\u306a\u3044\u3053\u3068\u304c\u308f\u304b\u308a\u307e\u3059\u3002\n\nWe can run this application using the bin/spark-submit script:\n\nbin/spark-submit\u30b9\u30af\u30ea\u30d7\u30c8\u3092\u3064\u304b\u3063\u3066\u3053\u306e\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u3092\u8d77\u52d5\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n# Use spark-submit to run your application\n$ YOUR_SPARK_HOME/bin/spark-submit \\\n  --master local[4] \\\n  SimpleApp.py\n...\nLines with a: 46, Lines with b: 23\n\n\nWhere to Go from Here\n\nCongratulations on running your first Spark application!\nFor an in-depth overview of the API, start with the Spark programming guide, or see \u201cProgramming Guides\u201d menu for other components.\nFor running applications on a cluster, head to the deployment overview.\nFinally, Spark includes several samples in the examples directory (Scala, Java, Python). You can run them as follows:\n\n\u306f\u3058\u3081\u3066\u306eSpark\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u8d77\u52d5\u304a\u3081\u3002\n*\u3088\u308a\u6df1\u3044API\u306e\u6982\u8981\u3092\u77e5\u308b\u70ba\u306bSpark\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u30ac\u30a4\u30c9\u3092\u521d\u3081\u308b\u304b\u3001\u4ed6\u306e\u30b3\u30f3\u30dd\u30fc\u30cd\u30f3\u30c8\u306e\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u30ac\u30a4\u30c9\u306e\u30e1\u30cb\u30e5\u30fc\u3092\u898b\u308b\u304c\u3044\u3044\u3002\nhttp://spark.apache.org/docs/latest/programming-guide.html\n*\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u3092\u30af\u30e9\u30b9\u30bf\u4e0a\u3067\u8d77\u52d5\u3059\u308b\u305f\u3081\u306b\u30c7\u30d7\u30ed\u30a4\u30e1\u30f3\u30c8\u30aa\u30fc\u30d0\u30fc\u30d3\u30e5\u30fc\u306b\u9032\u3080\u304c\u3044\u3044\u3002\nhttp://spark.apache.org/docs/latest/cluster-overview.html\n*\u6700\u5f8c\u306b\u3001Spark\u306b\u306fexamples\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u5185\u306bScala,Java,Python\u306e\u6709\u7528\u306a\u30b5\u30f3\u30d7\u30eb\u3092\u305f\u304f\u3055\u3093\u542b\u307e\u308c\u3066\u3044\u308b\u306e\u3067run-example\u3092\u3064\u304b\u3063\u3066\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u5b9f\u884c\u3057\u3066\u307f\u3066\u304f\u308c\u3002\n# For Scala and Java, use run-example:\n./bin/run-example SparkPi\n\n# For Python examples, use spark-submit directly:\n./bin/spark-submit examples/src/main/python/pi.py\n\n\u4ee5\u4e0a\u3067\u30af\u30a4\u30c3\u30af\u30b9\u30bf\u30fc\u30c8\u306f\u7d42\u4e86\u3060\u3002\n\u4ee5\u4e0b\u306e\u30da\u30fc\u30b8\u306e\u65e5\u672c\u8a9e\u8a33\u3067\u3059\u3002\u307f\u3093\u306a\u3067Spark\u4f7f\u3044\u306b\u306a\u308a\u307e\u3057\u3087\u3046\u3002\nhttp://spark.apache.org/docs/latest/quick-start.html\n\nAWS EC2\u3067\u306eSpark\u74b0\u5883\u69cb\u7bc9\u30ac\u30a4\u30c9\u306e\u548c\u8a33\u3082\u4e0b\u8a18\u3067\u4f5c\u3063\u3066\u3044\u308b\u306e\u3067\u3088\u308d\u3057\u3051\u308c\u3070\u3054\u89a7\u304f\u3060\u3055\u3044\u3002\n\n* Spark on AWS EC2<br>\nhttp://qiita.com/mychaelstyle/items/b752087a0bee6e41c182\n* Cluster Mode Overview<br>\nhttp://qiita.com/mychaelstyle/items/610b432a1ef1a7e3d2a0\n\n\n\u548c\u8a33\u306b\u304a\u304b\u3057\u306a\u3068\u3053\u308d\u304c\u3042\u308a\u307e\u3057\u305f\u3089\u30b3\u30e1\u30f3\u30c8\u306b\u3066\u3054\u6307\u6458\u304f\u3060\u3055\u3044\u3002\n\n# Quick Start\n\n> This tutorial provides a quick introduction to using Spark. We will first introduce the API through Spark\u2019s interactive shell (in Python or Scala), then show how to write standalone applications in Java, Scala, and Python. See the programming guide for a more complete reference.\n\n\u3053\u306e\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb\u306fSpark\u3092\u5229\u7528\u3059\u308b\u70ba\u306e\u7c21\u5358\u306a\u7d39\u4ecb\u3067\u3059\u3002\u79c1\u305f\u3061\u306f\u6700\u521d\u306bSpark\u30a4\u30f3\u30bf\u30e9\u30af\u30c6\u30a3\u30d6\u30b7\u30a7\u30eb\uff08Python\u307e\u305f\u306fScala)\u3092\u901a\u3058\u3066API\u3092\u7d39\u4ecb\u3057\u307e\u3059\u3002\n\u305d\u308c\u304b\u3089\u3069\u306e\u3088\u3046\u306bJava\u3001Scala\u3001Python\u3067\u30b9\u30bf\u30f3\u30c9\u30a2\u30ed\u30f3\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u3092\u8a18\u8ff0\u3059\u308b\u304b\u3092\u7d39\u4ecb\u3057\u307e\u3059\u3002\n\u3088\u308a\u8a73\u7d30\u306a\u30ea\u30d5\u30a1\u30ec\u30f3\u30b9\u306f\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u30ac\u30a4\u30c9\u3092\u3054\u89a7\u304f\u3060\u3055\u3044\u3002\n\nhttp://spark.apache.org/docs/latest/programming-guide.html\n\n> To follow along with this guide, first download a packaged release of Spark from the Spark website. Since we won\u2019t be using HDFS, you can download a package for any version of Hadoop.\n\n\u3053\u306e\u30ac\u30a4\u30c9\u3092\u7406\u89e3\u3059\u308b\u70ba\u306b\u6700\u521d\u306b\u30d1\u30c3\u30b1\u30fc\u30b8\u30ea\u30ea\u30fc\u30b9\u3055\u308c\u305fSpark\u3092\u30a6\u30a7\u30d6\u30b5\u30a4\u30c8\u304b\u3089\u5165\u624b\u3057\u3066\u304f\u3060\u3055\u3044\u3002HDFS\u3092\u5229\u7528\u3057\u306a\u3044\u306e\u3067\u3069\u306e\u30d0\u30fc\u30b8\u30e7\u30f3\u306eHadoop\u3067\u3082\u304b\u307e\u3044\u307e\u305b\u3093\u3002\n\n## Interactive Analysis with the Spark Shell\n\nSpark Shell\u3092\u5229\u7528\u3057\u305f\u30a4\u30f3\u30bf\u30e9\u30af\u30c6\u30a3\u30d6\u306a\u89e3\u6790\n\n### Basics\n\n> Spark\u2019s shell provides a simple way to learn the API, as well as a powerful tool to analyze data interactively. It is available in either Scala (which runs on the Java VM and is thus a good way to use existing Java libraries) or Python. Start it by running the following in the Spark directory:\n\nSpark\u30b7\u30a7\u30eb\u306fAPI\u3092\u7c21\u5358\u306b\u5b66\u3076\u3053\u3068\u304c\u3067\u304d\u3001\u30a4\u30f3\u30bf\u30e9\u30af\u30c6\u30a3\u30d6\u306b\u30c7\u30fc\u30bf\u3092\u89e3\u6790\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u308b\u5354\u529b\u306a\u30c4\u30fc\u30eb\u3067\u3059\u3002Scala(JVM\u3067\u52d5\u4f5c\u3057Java\u306e\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u5229\u7528\u3059\u308b\u306e\u306b\u6700\u9069\u3067\u3059)\u304bPython\u3067\u5229\u7528\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002Spark\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u5185\u3067\u4ee5\u4e0b\u306e\u30b3\u30de\u30f3\u30c9\u3092\u5b9f\u884c\u3057\u3066Spark\u30b7\u30a7\u30eb\u3092\u958b\u59cb\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n\n```shell-session:Scala\n./bin/spark-shell\n```\n\n```shell-session:Python\n./bin/pyspark\n```\n\n> Spark\u2019s primary abstraction is a distributed collection of items called a Resilient Distributed Dataset (RDD). RDDs can be created from Hadoop InputFormats (such as HDFS files) or by transforming other RDDs. Let\u2019s make a new RDD from the text of the README file in the Spark source directory:\n\nSpark\u306e\u6700\u3082\u91cd\u8981\u306a\u62bd\u8c61\u6982\u5ff5\u306fResilient Distributed Dataset(RDD:\u5f3e\u529b\u6027\u306e\u3042\u308b\u5206\u5272\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\uff09\u306b\u3088\u308a\u547c\u3073\u51fa\u3055\u308c\u308b\u5206\u5272\u30b3\u30ec\u30af\u30b7\u30e7\u30f3\u3067\u3059\u3002RDD\u306fHadoop InputFormas(HDF\u30d5\u30a1\u30a4\u30eb\u306e\u3088\u3046\u306a\uff09\u3084\u30c8\u30e9\u30f3\u30b9\u30d5\u30a9\u30fc\u30e0\u3055\u308c\u305f\u4ed6\u306eRDDs\u304b\u3089\u4f5c\u6210\u3067\u304d\u307e\u3059\u3002\u65b0\u3057\u3044RDD\u3092Spark\u30bd\u30fc\u30b9\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u306eREADME\u30c6\u30ad\u30b9\u30c8\u30d5\u30a1\u30a4\u30eb\u304b\u3089\u4f5c\u6210\u3057\u3066\u307f\u307e\u3057\u3087\u3046\u3002\n\n```scala:Scala\nscala> val textFile = sc.textFile(\"README.md\")\ntextFile: spark.RDD[String] = spark.MappedRDD@2ee9b6e3\n```\n\n```py:Python\n>>> textFile = sc.textFile(\"README.md\")\n```\n\n> RDDs have actions, which return values, and transformations, which return pointers to new RDDs. Let\u2019s start with a few actions:\n\nRDD\u306f\u5024\u3084\u65b0\u3057\u3044RDD\u3078\u306e\u30dd\u30a4\u30f3\u30bf\u30fc\u306e\u5909\u63db\u3092\u8fd4\u3059\u30a2\u30af\u30b7\u30e7\u30f3\u3092\u4fdd\u6301\u3057\u3066\u3044\u307e\u3059\u3002\n\u3044\u304f\u3064\u304b\u306e\u30a2\u30af\u30b7\u30e7\u30f3\u3092\u958b\u59cb\u3057\u3066\u307f\u307e\u3057\u3087\u3046\u3002\n\n```scala:Scala\nscala> textFile.count() // \u3053\u306eRDD\u306e\u9805\u76ee\u6570\uff08\u884c\u6570\uff09\nres0: Long = 126\n\nscala> textFile.first() // RDD\u306e\u6700\u521d\u306e\u9805\u76ee\uff08\u6700\u521d\u306e\u884c\uff09\nres1: String = # Apache Spark\n```\n\n```py:Python\n>>> textFile.count() # Number of items in this RDD\n126\n\n>>> textFile.first() # First item in this RDD\nu'# Apache Spark'\n```\n\n> Now let\u2019s use a transformation. We will use the filter transformation to return a new RDD with a subset of the items in the file.\n\n\u4eca\u5ea6\u306f\u30c8\u30e9\u30f3\u30b9\u30d5\u30a9\u30fc\u30e1\u30fc\u30b7\u30e7\u30f3\uff08\u5909\u63db\uff09\u3092\u5229\u7528\u3057\u3066\u307f\u307e\u3057\u3087\u3046\u3002\u79c1\u305f\u3061\u306f\u30d5\u30a1\u30a4\u30eb\u304b\u3089\u4f5c\u3063\u305fRDD\u306e\u30b5\u30d6\u30bb\u30c3\u30c8\u3068\u3057\u3066\u65b0\u3057\u3044RDD\u3092\u8fd4\u3059\u30d5\u30a3\u30eb\u30bf\u30fc\u5909\u63db\u3092\u5229\u7528\u3057\u307e\u3059\u3002\n\n```scala:Scala\nscala> val linesWithSpark = textFile.filter(line => line.contains(\"Spark\"))\nlinesWithSpark: spark.RDD[String] = spark.FilteredRDD@7dd4af09\n```\n\n```py:Python\n>>> linesWithSpark = textFile.filter(lambda line: \"Spark\" in line)\n```\n\n> We can chain together transformations and actions:\n\n\u5909\u63db\u3068\u30a2\u30af\u30b7\u30e7\u30f3\u3092\u30c1\u30a7\u30a4\u30f3\u3059\u308b\u3053\u3068\u3082\u3067\u304d\u307e\u3059\u3002\n\n```scala:Scala\nscala> textFile.filter(line => line.contains(\"Spark\")).count() // How many lines contain \"Spark\"?\nres3: Long = 15\n```\n\n```py:Python\n>>> textFile.filter(lambda line: \"Spark\" in line).count() # How many lines contain \"Spark\"?\n15\n```\n\n### More on RDD Operations\nRDD\u306e\u30aa\u30da\u30ec\u30fc\u30b7\u30e7\u30f3\u3092\u3082\u3063\u3068\u8a73\u3057\u304f\u3002\n\n> RDD actions and transformations can be used for more complex computations. Let\u2019s say we want to find the line with the most words:\n\nRDD\u30a2\u30af\u30b7\u30e7\u30f3\u3068\u5909\u63db\u306f\u3088\u308a\u8907\u96d1\u306a\u8a08\u7b97\u306b\u5229\u7528\u3067\u304d\u307e\u3059\u3002\n\n```scala:scala\nscala> textFile.map(line => line.split(\" \").size).reduce((a, b) => if (a > b) a else b)\nres4: Long = 15\n```\n\n> This first maps a line to an integer value, creating a new RDD. reduce is called on that RDD to find the largest line count. The arguments to map and reduce are Scala function literals (closures), and can use any language feature or Scala/Java library. For example, we can easily call functions declared elsewhere. We\u2019ll use Math.max() function to make this code easier to understand:\n\n\u6700\u521d\u306b\u884c\u3068Integer\u5024\u306e\u30de\u30c3\u30d4\u30f3\u30b0\u3067\u65b0\u3057\u3044RDD\u3092\u4f5c\u6210\u3057\u3066\u3044\u307e\u3059\u3002\nreduce\u304c\u6700\u3082\u5927\u304d\u3044\u884c\u3092\u898b\u3064\u3051\u308b\u305f\u3081\u306b\u3053\u306eRDD\u3067\u547c\u3073\u51fa\u3055\u308c\u307e\u3059\u3002\nmap\u3068reduce\u306e\u5f15\u6570\u306fScala\u306e\u30af\u30ed\u30fc\u30b8\u30e3\u95a2\u6570\u3067\u3042\u308a\u3001Scala\u3068Java\u306e\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u306a\u3093\u3067\u3082\u5229\u7528\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\u4f8b\u3048\u3070\u3001\u3069\u3053\u3067\u5ba3\u8a00\u3055\u308c\u305f\u95a2\u6570\u3067\u3082\u7c21\u5358\u306b\u30b3\u30fc\u30eb\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002Math.max()\u95a2\u6570\u3092\u3053\u306e\u30b3\u30fc\u30c9\u306b\u4f7f\u3046\u3068\u5206\u304b\u308a\u3084\u3059\u3044\u3067\u3057\u3087\u3046\u3002\n\n```scala:scala\nscala> import java.lang.Math\nimport java.lang.Math\n\nscala> textFile.map(line => line.split(\" \").size).reduce((a, b) => Math.max(a, b))\nres5: Int = 15\n```\n\n> One common data flow pattern is MapReduce, as popularized by Hadoop. Spark can implement MapReduce flows easily:\n\n\u4e00\u822c\u7684\u306a\u30c7\u30fc\u30bf\u30d5\u30ed\u30fc\u30d1\u30bf\u30fc\u30f3\u306e\u3072\u3068\u3064\u3068\u3057\u3066Hadoop\u3067\u6709\u540d\u306b\u306a\u3063\u305fMapReduce\u304c\u3042\u308a\u307e\u3059\u3002Spark\u306fMapReduce\u30d5\u30ed\u30fc\u3092\u7c21\u5358\u306b\u5b9f\u88c5\u3067\u304d\u307e\u3059\u3002\n\n```scala:Scala\nscala> val wordCounts = textFile.flatMap(line => line.split(\" \")).map(word => (word, 1)).reduceByKey((a, b) => a + b)\nwordCounts: spark.RDD[(String, Int)] = spark.ShuffledAggregatedRDD@71f027b8\n```\n\n> Here, we combined the flatMap, map and reduceByKey transformations to compute the per-word counts in the file as an RDD of (String, Int) pairs. To collect the word counts in our shell, we can use the collect action:\n\n\u3053\u3053\u3067\u306f\u3001\u30d5\u30a1\u30a4\u30eb\u4e2d\u306e\u5358\u8a9e\u6570\u3092\u6570\u3048\u308b\u70ba\u306bflatMap\u3092\u7d50\u5408\u3057\u3066map\u3068redeceByKey\u5909\u63db\u3092\u3057\u3066String\u3068Int\u30da\u30a2\u306eRDD\u3092\u751f\u6210\u3057\u3066\u3044\u307e\u3059\u3002\n\u5358\u8a9e\u6570\u3092\u30b7\u30a7\u30eb\u4e2d\u3067\u53ce\u96c6\u3059\u308b\u70ba\u306bcollect\u30a2\u30af\u30b7\u30e7\u30f3\u3092\u4f7f\u3048\u307e\u3059\u3002\n\n```scala:Scala\nscala> wordCounts.collect()\nres6: Array[(String, Int)] = Array((means,1), (under,2), (this,3), (Because,1), (Python,2), (agree,1), (cluster.,1), ...)\n```\n\n### Caching (\u30ad\u30e3\u30c3\u30b7\u30f3\u30b0)\n\n> Spark also supports pulling data sets into a cluster-wide in-memory cache. This is very useful when data is accessed repeatedly, such as when querying a small \u201chot\u201d dataset or when running an iterative algorithm like PageRank. As a simple example, let\u2019s mark our linesWithSpark dataset to be cached:\n\nSpark\u306f\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u3092\u30af\u30e9\u30b9\u30bf\u30fc\u30ef\u30a4\u30c9\u306a\u30a4\u30f3\u30e1\u30e2\u30ea\u30fc\u30ad\u30e3\u30c3\u30b7\u30e5\u304b\u3089\u53d6\u5f97\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\u3053\u308c\u306f\u7e70\u308a\u8fd4\u3057\u30a2\u30af\u30bb\u30b9\u3055\u308c\u308b\u30c7\u30fc\u30bf\u3001\u5c11\u91cf\u306e\u30db\u30c3\u30c8\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u306b\u554f\u3044\u5408\u308f\u305b\u305f\u308a\u3001\u30da\u30fc\u30b8\u30e9\u30f3\u30af\u306e\u3088\u3046\u306a\u30a4\u30f3\u30bf\u30e9\u30af\u30c6\u30a3\u30d6\u306a\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u306e\u5834\u5408\u306b\u5927\u5909\u6709\u7528\u3067\u3059\u3002\n\n\u7c21\u5358\u306a\u4f8b\u3068\u3057\u3066linesWithSpark\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u3092\u30ad\u30e3\u30c3\u30b7\u30e5\u3068\u3057\u3066\u30de\u30fc\u30af\u3057\u3066\u307f\u307e\u3057\u3087\u3046\u3002\n\n```scala:Scala\nscala> linesWithSpark.cache()\nres7: spark.RDD[String] = spark.FilteredRDD@17e51082\n\nscala> linesWithSpark.count()\nres8: Long = 15\n\nscala> linesWithSpark.count()\nres9: Long = 15\n```\n\n> It may seem silly to use Spark to explore and cache a 100-line text file. The interesting part is that these same functions can be used on very large data sets, even when they are striped across tens or hundreds of nodes. You can also do this interactively by connecting bin/spark-shell to a cluster, as described in the programming guide.\n\n100\u884c\u7a0b\u5ea6\u306e\u30c6\u30ad\u30b9\u30c8\u30d5\u30a1\u30a4\u30eb\u3092\u30ad\u30e3\u30c3\u30b7\u30e5\u3059\u308b\u3070\u304b\u3070\u304b\u3057\u3044Spark\u306e\u4f7f\u3044\u65b9\u306b\u898b\u3048\u308b\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u3002\u8208\u5473\u6df1\u3044\u70b9\u306f\u3053\u308c\u3089\u306e\u540c\u3058\u95a2\u6570\u7fa4\u304c\u5de8\u5927\u306a\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u3067\u3082\u5229\u7528\u3067\u304d\u308b\u3053\u3068\u3067\u3042\u308a\u3001\u30b9\u30c8\u30e9\u30a4\u30d4\u30f3\u30b0\u3055\u308c\u305f\u6570\u5341\u3001\u6570\u767e\u306e\u30ce\u30fc\u30c9\u3067\u3082\u540c\u3058\u3088\u3046\u306b\u4f7f\u3048\u308b\u3053\u3068\u3067\u3059\u3002\n\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u30ac\u30a4\u30c9\u306b\u63b2\u8f09\u3057\u3066\u3044\u308b\u3088\u3046\u306bbin/spark-shell\u3067\u30af\u30e9\u30b9\u30bf\u30fc\u306b\u63a5\u7d9a\u3057\u3066\u30a4\u30f3\u30bf\u30e9\u30af\u30c6\u30a3\u30d6\u306b\u3053\u308c\u3089\u3092\u5b9f\u884c\u3067\u304d\u307e\u3059\u3002\n\n### Standalone Applications (\u30b9\u30bf\u30f3\u30c9\u30a2\u30ed\u30fc\u30f3\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\uff09\n\n#### Scala\n\n> Now say we wanted to write a standalone application using the Spark API. We will walk through a simple application in both Scala (with SBT), Java (with Maven), and Python.\n\n\u305d\u308c\u3067\u306fSpark API\u3092\u5229\u7528\u3057\u305f\u30b9\u30bf\u30f3\u30c9\u30a2\u30ed\u30f3\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u3092\u8a18\u8ff0\u3059\u308b\u65b9\u6cd5\u3092\u958b\u8a2d\u3057\u307e\u3059\u3002\nScala(with SBT)\u3001Java(with Maven), Python\u3067\u306e\u7c21\u5358\u306a\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u3092\u898b\u3066\u307f\u307e\u3057\u3087\u3046\u3002\n\n> We\u2019ll create a very simple Spark application in Scala. So simple, in fact, that it\u2019s named SimpleApp.scala:\n\n\u3068\u3066\u3082\u30b7\u30f3\u30d7\u30eb\u306aSpark\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u3092\u4f5c\u308a\u307e\u3057\u3087\u3046\u3002\u3068\u3066\u3082\u30b7\u30f3\u30d7\u30eb\u3067\u5b9f\u8cea\u7684\u306a\u306e\u3067SimpleApp.scala\u3068\u540d\u4ed8\u3051\u307e\u3057\u305f\u3002\n\n```scala:SimpleApp.scala\n/* SimpleApp.scala */\nimport org.apache.spark.SparkContext\nimport org.apache.spark.SparkContext._\nimport org.apache.spark.SparkConf\n\nobject SimpleApp {\n  def main(args: Array[String]) {\n    val logFile = \"YOUR_SPARK_HOME/README.md\" // \u3042\u306a\u305f\u306e\u30de\u30b7\u30f3\u4e0a\u306e\u30d1\u30b9\n    val conf = new SparkConf().setAppName(\"Simple Application\")\n    val sc = new SparkContext(conf)\n    val logData = sc.textFile(logFile, 2).cache()\n    val numAs = logData.filter(line => line.contains(\"a\")).count()\n    val numBs = logData.filter(line => line.contains(\"b\")).count()\n    println(\"Lines with a: %s, Lines with b: %s\".format(numAs, numBs))\n  }\n}\n```\n\n> This program just counts the number of lines containing \u2018a\u2019 and the number containing \u2018b\u2019 in the Spark README. Note that you\u2019ll need to replace YOUR_SPARK_HOME with the location where Spark is installed. Unlike the earlier examples with the Spark shell, which initializes its own SparkContext, we initialize a SparkContext as part of the program.\n\n\u3053\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u306f\u305f\u3060Spark\u306eREADME\u30d5\u30a1\u30a4\u30eb\u4e2d\u306ea\u3068b\u3092\u542b\u3080\u884c\u306e\u6570\u3092\u6570\u3048\u3066\u3044\u308b\u3060\u3051\u3067\u3059\u3002YOUR_SPARK_HOME\u3092\u3042\u306a\u305f\u304cSpark\u3092\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3057\u305f\u30d5\u30a9\u30eb\u30c0\u306e\u30d1\u30b9\u306b\u5909\u66f4\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n\u5148\u307b\u3069\u306espark\u30b7\u30a7\u30eb\u3092\u4f7f\u3063\u305f\u4f8b\u3068\u9055\u3063\u3066\u3001\u3053\u3053\u3067\u306f\u72ec\u81ea\u306eSparkContext\u3092\u521d\u671f\u5316\u3057\u3066\u304a\u308a\u3001\u30d7\u30ed\u30b0\u30e9\u30e0\u306e\u4e00\u90e8\u3068\u3057\u3066\u521d\u671f\u5316\u3057\u3066\u3044\u307e\u3059\u3002\n\n> We pass the SparkContext constructor a SparkConf object which contains information about our application.\n\nSparkContext\u306e\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u306b\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u306e\u60c5\u5831\u3092\u542b\u3080SparkConf\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u6e21\u3057\u3066\u3044\u307e\u3059\u3002\n\n> Our application depends on the Spark API, so we\u2019ll also include an sbt configuration file, simple.sbt which explains that Spark is a dependency. This file also adds a repository that Spark depends on:\n\n\u79c1\u305f\u3061\u306e\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u306fSpark API\u306b\u4f9d\u5b58\u3057\u3066\u3044\u308b\u305f\u3081\u3001sbt\u306e\u8a2d\u5b9a\u30d5\u30a1\u30a4\u30eb\u3082\u30a4\u30f3\u30af\u30eb\u30fc\u30c9\u3057\u307e\u3059\u3002\u3053\u306e\u30d5\u30a1\u30a4\u30eb\u306fSpark\u304c\u4f9d\u5b58\u3057\u3066\u3044\u308b\u30ea\u30dd\u30b8\u30c8\u30ea\u3082\u8ffd\u52a0\u3057\u307e\u3059\u3002\n\n```scala:\nname := \"Simple Project\"\n\nversion := \"1.0\"\n\nscalaVersion := \"2.10.4\"\n\nlibraryDependencies += \"org.apache.spark\" %% \"spark-core\" % \"1.0.0\"\n\nresolvers += \"Akka Repository\" at \"http://repo.akka.io/releases/\"\n```\n\n> For sbt to work correctly, we\u2019ll need to layout SimpleApp.scala and simple.sbt according to the typical directory structure. Once that is in place, we can create a JAR package containing the application\u2019s code, then use the spark-submit script to run our program.\n\nsbt\u304c\u6b63\u5e38\u306b\u52d5\u4f5c\u3059\u308b\u70ba\u306b\u3001SympleApp.scala\u3068simple.sbt\u3092\u4e00\u822c\u7684\u306a\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u69cb\u6210\u3067\u30ec\u30a4\u30a2\u30a6\u30c8\u3057\u307e\u3059\u3002\u4e00\u5ea6\u914d\u7f6e\u3059\u308b\u3068\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u30b3\u30fc\u30c9\u3092\u542b\u3080JAR\u30d1\u30c3\u30b1\u30fc\u30b8\u3092\u751f\u6210\u3057\u3001spark-submit\u30b9\u30af\u30ea\u30d7\u30c8\u3067\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u7a3c\u50cd\u3055\u305b\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\n```shell-session\n# Your directory layout should look like this\n$ find .\n.\n./simple.sbt\n./src\n./src/main\n./src/main/scala\n./src/main/scala/SimpleApp.scala\n\n# Package a jar containing your application\n$ sbt package\n...\n[info] Packaging {..}/{..}/target/scala-2.10/simple-project_2.10-1.0.jar\n\n# Use spark-submit to run your application\n$ YOUR_SPARK_HOME/bin/spark-submit \\\n  --class \"SimpleApp\" \\\n  --master local[4] \\\n  target/scala-2.10/simple-project_2.10-1.0.jar\n...\nLines with a: 46, Lines with b: 23\n```\n\n#### Java\n\n> This example will use Maven to compile an application jar, but any similar build system will work.\n> We\u2019ll create a very simple Spark application, SimpleApp.java:\n\n\u3053\u306e\u4f8b\u306f\u30a2\u30d7\u30ea\u30b8\u30a7\u30fc\u30b7\u30e7\u30f3\u306ejar\u3092\u30b3\u30f3\u30d1\u30a4\u30eb\u3059\u308b\u70ba\u306bMaven\u3092\u5229\u7528\u3057\u3066\u3044\u307e\u3059\u304c\u985e\u4f3c\u306e\u30d3\u30eb\u30c9\u30b7\u30b9\u30c6\u30e0\u3067\u52d5\u4f5c\u3059\u308b\u3067\u3057\u3087\u3046\u3002\n\u3068\u3066\u3082\u30b7\u30f3\u30d7\u30eb\u306aSimpleApp.java\u3068\u3044\u3046Spark\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u3092\u4f5c\u308a\u307e\u3057\u3087\u3046\u3002\n\n```java:SimpleApp.java\n/* SimpleApp.java */\nimport org.apache.spark.api.java.*;\nimport org.apache.spark.SparkConf;\nimport org.apache.spark.api.java.function.Function;\n\npublic class SimpleApp {\n  public static void main(String[] args) {\n    String logFile = \"YOUR_SPARK_HOME/README.md\"; // Should be some file on your system\n    SparkConf conf = new SparkConf().setAppName(\"Simple Application\");\n    JavaSparkContext sc = new JavaSparkContext(conf);\n    JavaRDD<String> logData = sc.textFile(logFile).cache();\n\n    long numAs = logData.filter(new Function<String, Boolean>() {\n      public Boolean call(String s) { return s.contains(\"a\"); }\n    }).count();\n\n    long numBs = logData.filter(new Function<String, Boolean>() {\n      public Boolean call(String s) { return s.contains(\"b\"); }\n    }).count();\n\n    System.out.println(\"Lines with a: \" + numAs + \", lines with b: \" + numBs);\n  }\n}\n```\n\n> This program just counts the number of lines containing \u2018a\u2019 and the number containing \u2018b\u2019 in a text file. Note that you\u2019ll need to replace YOUR_SPARK_HOME with the location where Spark is installed.\n\n\u3053\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u306f\u30c6\u30ad\u30b9\u30c8\u30d5\u30a1\u30a4\u30eb\u4e2d\u306ea\u3068b\u3092\u542b\u3080\u884c\u6570\u3092\u6570\u3048\u308b\u3060\u3051\u306e\u3082\u306e\u3067\u3059\u3002YOUR_SPARK_HOME\u90e8\u5206\u3092\u3042\u306a\u305f\u306eSpark\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u30d5\u30a9\u30eb\u30c0\u30d1\u30b9\u306b\u7f6e\u304d\u63db\u3048\u3066\u304f\u3060\u3055\u3044\u3002\n\n> As with the Scala example, we initialize a SparkContext, though we use the special JavaSparkContext class to get a Java-friendly one. We also create RDDs (represented by JavaRDD) and run transformations on them. Finally, we pass functions to Spark by creating classes that extend spark.api.java.function.Function. The Spark programming guide describes these differences in more detail.\n\nScala\u306e\u4f8b\u3068\u540c\u69d8\u306b\u3001SparkContext\u3092\u521d\u671f\u5316\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u304c\u3001\u7279\u8a18\u4e8b\u9805\u3068\u3057\u3066JavaSparkContext\u30af\u30e9\u30b9\u3092\u5229\u7528\u3057\u3066Java\u306b\u3088\u308a\u89aa\u548c\u6027\u306e\u9ad8\u3044SparkContext\u3092\u53d6\u5f97\u3057\u307e\u3059\u3002\u540c\u69d8\u306bJavaRDD\u3092\u4ee3\u7528\u3057\u3066RDD\u3092\u751f\u6210\u3057\u3001\u305d\u306e\u4e0a\u3067\u5909\u63db\u3092\u5b9f\u884c\u3057\u307e\u3059\u3002\u6700\u5f8c\u306b\u3001spark.api.java.funtction.Function\u3092extends\u3057\u3066\u30af\u30e9\u30b9\u3092\u4f5c\u6210\u3057\u95a2\u6570\u3092Spark\u306b\u6e21\u3057\u307e\u3059\u3002Spark\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u30ac\u30a4\u30c9\u306b\u3053\u306e\u9055\u3044\u306e\u8a73\u7d30\u3092\u8a18\u8f09\u3057\u3066\u3044\u307e\u3059\u3002\n\nhttp://spark.apache.org/docs/latest/programming-guide.html\n\n> To build the program, we also write a Maven pom.xml file that lists Spark as a dependency. Note that Spark artifacts are tagged with a Scala version.\n\n\u3053\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u30d3\u30eb\u30c9\u3059\u308b\u70ba\u306bMaven\u306epom.xml\u30d5\u30a1\u30a4\u30eb\u306b\u6b21\u306e\u3088\u3046\u306bSpark\u306e\u4f9d\u5b58\u95a2\u4fc2\u3092\u8a18\u8ff0\u3057\u3066\u304f\u3060\u3055\u3044\u3002Spark\u306e\u30a2\u30fc\u30c6\u30a3\u30d5\u30a1\u30af\u30c8\u306fScala\u306e\u30d0\u30fc\u30b8\u30e7\u30f3\u3067\u30bf\u30b0\u4ed8\u3051\u3055\u308c\u3066\u3044\u308b\u306e\u3067\u6ce8\u610f\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n\n```xml:pom.xml\n<project>\n  <groupId>edu.berkeley</groupId>\n  <artifactId>simple-project</artifactId>\n  <modelVersion>4.0.0</modelVersion>\n  <name>Simple Project</name>\n  <packaging>jar</packaging>\n  <version>1.0</version>\n  <repositories>\n    <repository>\n      <id>Akka repository</id>\n      <url>http://repo.akka.io/releases</url>\n    </repository>\n  </repositories>\n  <dependencies>\n    <dependency> <!-- Spark dependency -->\n      <groupId>org.apache.spark</groupId>\n      <artifactId>spark-core_2.10</artifactId>\n      <version>1.0.0</version>\n    </dependency>\n  </dependencies>\n</project>\n```\n\n> We layout these files according to the canonical Maven directory structure:\n\n\u3053\u308c\u3089\u306e\u30d5\u30a1\u30a4\u30eb\u3092Maven\u306e\u4f5c\u6cd5\u306b\u3042\u308f\u305b\u305f\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u69cb\u6210\u3067\u914d\u7f6e\u3057\u307e\u3059\u3002\n\n```shell-session\n$ find .\n./pom.xml\n./src\n./src/main\n./src/main/java\n./src/main/java/SimpleApp.java\n```\n\n> Now, we can package the application using Maven and execute it with ./bin/spark-submit.\n\n\u305d\u3046\u3059\u308c\u3070Maven\u3092\u4f7f\u3063\u3066./bin/spark-submit\u30b9\u30af\u30ea\u30d7\u30c8\u3067\u5b9f\u884c\u53ef\u80fd\u306aSpark\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u3068\u3057\u3066\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u3092\u30d1\u30c3\u30b1\u30fc\u30b8\u5316\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\n```shell-session\n# Package a jar containing your application\n$ mvn package\n...\n[INFO] Building jar: {..}/{..}/target/simple-project-1.0.jar\n\n# Use spark-submit to run your application\n$ YOUR_SPARK_HOME/bin/spark-submit \\\n  --class \"SimpleApp\" \\\n  --master local[4] \\\n  target/simple-project-1.0.jar\n...\nLines with a: 46, Lines with b: 23\n```\n\n#### Python\n\n> Now we will show how to write a standalone application using the Python API (PySpark).\n> As an example, we\u2019ll create a simple Spark application, SimpleApp.py:\n\n\u305d\u308c\u3067\u306fPython API(PySpark)\u3092\u3064\u304b\u3063\u3066\u30b9\u30bf\u30f3\u30c9\u30a2\u30ed\u30f3\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u3092\u8a18\u8ff0\u3059\u308b\u65b9\u6cd5\u3092\u7d39\u4ecb\u3057\u307e\u3059\u3002\n\u4f8b\u3068\u3057\u3066SimpleApp.py\u3068\u3044\u3046\u30b7\u30f3\u30d7\u30eb\u306aSpark\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u3092\u4f5c\u308a\u307e\u3059\u3002\n\n```py:SimpleApp.py\n\"\"\"SimpleApp.py\"\"\"\nfrom pyspark import SparkContext\n\nlogFile = \"YOUR_SPARK_HOME/README.md\"  # Should be some file on your system\nsc = SparkContext(\"local\", \"Simple App\")\nlogData = sc.textFile(logFile).cache()\n\nnumAs = logData.filter(lambda s: 'a' in s).count()\nnumBs = logData.filter(lambda s: 'b' in s).count()\n\nprint \"Lines with a: %i, lines with b: %i\" % (numAs, numBs)\n```\n\n> This program just counts the number of lines containing \u2018a\u2019 and the number containing \u2018b\u2019 in a text file. Note that you\u2019ll need to replace YOUR_SPARK_HOME with the location where Spark is installed.\n\n\u3053\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u306f\uff08\u3082\u3046\u4ee5\u4e0b\u7565\uff09\n\n> As with the Scala and Java examples, we use a SparkContext to create RDDs. We can pass Python functions to Spark, which are automatically serialized along with any variables that they reference.\n\nScala\u3068Java\u306e\u4f8b\u3068\u540c\u69d8\u306bRDDs\u3092\u751f\u6210\u3059\u308b\u70ba\u306bSparkContext\u3092\u5229\u7528\u3057\u307e\u3059\u3002Spark\u306b\u76f4\u63a5Python\u306e\u95a2\u6570\u3092\u6e21\u3059\u3053\u3068\u304c\u3067\u304d\u3001\u81ea\u52d5\u7684\u306b\u5f15\u6570\u306e\u5024\u3084\u53c2\u7167\u3068\u3068\u3082\u306b\u30b7\u30ea\u30a2\u30e9\u30a4\u30ba\u3055\u308c\u307e\u3059\u3002\n\n> For applications that use custom classes or third-party libraries, we can also add code dependencies to spark-submit through its --py-files argument by packaging them into a .zip file (see spark-submit --help for details). SimpleApp is simple enough that we do not need to specify any code dependencies.\n\n\u30ab\u30b9\u30bf\u30e0\u30af\u30e9\u30b9\u3084\u30b5\u30fc\u30c9\u30d1\u30fc\u30c6\u30a3\u306e\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u5229\u7528\u3059\u308b\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u306e\u70ba\u306b\u3001\u4f9d\u5b58\u95a2\u4fc2\u3092spark-submit\u306b--py-files\u30aa\u30d7\u30b7\u30e7\u30f3\u3067\u30d1\u30c3\u30b1\u30fc\u30b8\u304b\u3055\u308c\u305fzip\u30d5\u30a1\u30a4\u30eb\u3092\u6e21\u3059\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\uff08spark-submit\u306e--help\u3067\u8a73\u7d30\u3092\u78ba\u8a8d\u3057\u3066\u304f\u3060\u3055\u3044)\nSimpleApp\u3092\u898b\u308c\u3070\u7279\u5225\u306b\u4f9d\u5b58\u95a2\u4fc2\u306e\u30b3\u30fc\u30c9\u3092\u8a18\u8ff0\u3059\u308b\u5fc5\u8981\u304c\u306a\u3044\u3053\u3068\u304c\u308f\u304b\u308a\u307e\u3059\u3002\n\n> We can run this application using the bin/spark-submit script:\n\nbin/spark-submit\u30b9\u30af\u30ea\u30d7\u30c8\u3092\u3064\u304b\u3063\u3066\u3053\u306e\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u3092\u8d77\u52d5\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\n```shell-session\n# Use spark-submit to run your application\n$ YOUR_SPARK_HOME/bin/spark-submit \\\n  --master local[4] \\\n  SimpleApp.py\n...\nLines with a: 46, Lines with b: 23\n```\n\n## Where to Go from Here\n\n> Congratulations on running your first Spark application!\n> For an in-depth overview of the API, start with the Spark programming guide, or see \u201cProgramming Guides\u201d menu for other components.\nFor running applications on a cluster, head to the deployment overview.\nFinally, Spark includes several samples in the examples directory (Scala, Java, Python). You can run them as follows:\n\n\u306f\u3058\u3081\u3066\u306eSpark\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u8d77\u52d5\u304a\u3081\u3002\n\n*\u3088\u308a\u6df1\u3044API\u306e\u6982\u8981\u3092\u77e5\u308b\u70ba\u306bSpark\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u30ac\u30a4\u30c9\u3092\u521d\u3081\u308b\u304b\u3001\u4ed6\u306e\u30b3\u30f3\u30dd\u30fc\u30cd\u30f3\u30c8\u306e\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u30ac\u30a4\u30c9\u306e\u30e1\u30cb\u30e5\u30fc\u3092\u898b\u308b\u304c\u3044\u3044\u3002\nhttp://spark.apache.org/docs/latest/programming-guide.html\n*\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u3092\u30af\u30e9\u30b9\u30bf\u4e0a\u3067\u8d77\u52d5\u3059\u308b\u305f\u3081\u306b\u30c7\u30d7\u30ed\u30a4\u30e1\u30f3\u30c8\u30aa\u30fc\u30d0\u30fc\u30d3\u30e5\u30fc\u306b\u9032\u3080\u304c\u3044\u3044\u3002\nhttp://spark.apache.org/docs/latest/cluster-overview.html\n*\u6700\u5f8c\u306b\u3001Spark\u306b\u306fexamples\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u5185\u306bScala,Java,Python\u306e\u6709\u7528\u306a\u30b5\u30f3\u30d7\u30eb\u3092\u305f\u304f\u3055\u3093\u542b\u307e\u308c\u3066\u3044\u308b\u306e\u3067run-example\u3092\u3064\u304b\u3063\u3066\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u5b9f\u884c\u3057\u3066\u307f\u3066\u304f\u308c\u3002\n\n```shell-session\n# For Scala and Java, use run-example:\n./bin/run-example SparkPi\n\n# For Python examples, use spark-submit directly:\n./bin/spark-submit examples/src/main/python/pi.py\n```\n\n\n\n\u4ee5\u4e0a\u3067\u30af\u30a4\u30c3\u30af\u30b9\u30bf\u30fc\u30c8\u306f\u7d42\u4e86\u3060\u3002\n"}