{"context": " More than 1 year has passed since last update.OkHttp\u3067\u3044\u308d\u3044\u308d\u3084\u308d\u3046\u3068\u3057\u305f\u3068\u304d\u306b\u8abf\u3079\u305f\u3082\u306e\u3092\u5217\u6319\uff08\u968f\u6642\u8ffd\u8a18\uff09\n\nBasic\u8a8d\u8a3c\nOkHttpClient\u306bAuthenticator\u3092\u8a2d\u5b9a\u3057\u3066\u304a\u304f\u3068\u30ea\u30af\u30a8\u30b9\u30c8\u306e\u969b\u306b\u305d\u308c\u3092\u3064\u304b\u3063\u3066\u8a8d\u8a3c\u3057\u3066\u304f\u308c\u308b\n\nOkHttpClient client = new OkHttpClient();\nclient.setAuthenticator(new Authenticator() {\n    @Override\n    public Request authenticate(Proxy proxy, Response response) throws IOException {\n        String credential = Credentials.basic(\"\u30e6\u30fc\u30b6\u30fc\u540d\", \"\u30d1\u30b9\u30ef\u30fc\u30c9\");\n         return response.request().newBuilder().header(\"Authorization\", credential).build();\n    }\n\n    @Override\n    public Request authenticateProxy(Proxy proxy, Response response) throws IOException {\n        return null;\n    }\n});\n\n\nSSL\u306e\u30aa\u30ec\u30aa\u30ec\u8a3c\u660e\u66f8\u3092\u8a31\u53ef\u3059\u308b\uff08SSL\u30a8\u30e9\u30fc\u3092\u7121\u8996\u3059\u308b\uff09\nSSL\u8a3c\u660e\u66f8\u306e\u691c\u8a3c\u3092\u884c\u308f\u306a\u3044\u3088\u3046\u306b\u3059\u308b\u306e\u3068\u3001\u5b9f\u969b\u306b\u30a2\u30af\u30bb\u30b9\u3059\u308b\u30db\u30b9\u30c8\u540d\u306e\u691c\u8a3c\u3092\u884c\u308f\u306a\u3044\u3088\u3046\u306b\u3059\u308c\u3070\u3044\u3051\u307e\u3059\u3002\n\ntry {\n    final TrustManager[] trustAllCerts = new TrustManager[]{\n        new X509TrustManager() {\n            @Override\n            public void checkClientTrusted(java.security.cert.X509Certificate[] chain, String authType) \n                    throws CertificateException {\n            }\n\n            @Override\n            public void checkServerTrusted(java.security.cert.X509Certificate[] chain, String authType) \n                    throws CertificateException {\n            }\n\n            @Override\n            public java.security.cert.X509Certificate[] getAcceptedIssuers() {\n                return null;\n            }\n        }\n    };\n\n    final SSLContext sslContext = SSLContext.getInstance(\"SSL\");\n    sslContext.init(null, trustAllCerts, new java.security.SecureRandom());\n    final SSLSocketFactory sslSocketFactory = sslContext.getSocketFactory();\n\n    client.setSslSocketFactory(sslSocketFactory);\n    client.setHostnameVerifier(new HostnameVerifier() {\n        @Override\n        public boolean verify(String hostname, SSLSession session) {\n            return true;\n        }\n    });\n} catch (Exception e) {\n    e.printStackTrace();\n}\n\n\nCookie\u7ba1\u7406\nBasic\u8a8d\u8a3c\u3068\u540c\u3058\u3088\u3046\u306a\u611f\u3058\u3067OkHttpClient\u306bCookieManager\u3092\u8a2d\u5b9a\u3057\u3066\u304a\u3051\u3070\u30af\u30c3\u30ad\u30fc\u7ba1\u7406\u3092\u3057\u3066\u304f\u308c\u308b\nCookiePolicy\u306f\u4ee5\u4e0b\u306e\uff13\u3064\u304b\u3089\u9078\u3079\u308b\n\nCookiePolicy\n\n\nACCEPT_ALL (\u3059\u3079\u3066\u306e Cookie \u3092\u53d7\u3051\u5165\u308c\u308b)\nACCEPT_NONE (Cookie \u3092\u307e\u3063\u305f\u304f\u53d7\u3051\u5165\u308c\u306a\u3044)\nACCEPT_ORIGINAL_SERVER (\u5143\u306e\u30b5\u30fc\u30d0\u30fc\u304b\u3089\u306e Cookie \u3060\u3051\u3092\u53d7\u3051\u5165\u308c\u308b)\n\n\n\n\u305f\u3060\u3057CookieManager\u306f\u3001\u6b21\u56de\u30a2\u30d7\u30ea\u8d77\u52d5\u6642\u306b\u306f\u7a7a\u306b\u306a\u3063\u3066\u3044\u308b\u306e\u3067\u8981\u6ce8\u610f\n\nOkHttpClient client = new OkHttpClient();\nCookieManager cookieManager = new CookieManager();\ncookieManager.setCookiePolicy(CookiePolicy.ACCEPT_ALL);\nclient.setCookieHandler(cookieManager);\n\nOkHttp\u3067\u3044\u308d\u3044\u308d\u3084\u308d\u3046\u3068\u3057\u305f\u3068\u304d\u306b\u8abf\u3079\u305f\u3082\u306e\u3092\u5217\u6319\uff08\u968f\u6642\u8ffd\u8a18\uff09\n\n# Basic\u8a8d\u8a3c\n\nOkHttpClient\u306bAuthenticator\u3092\u8a2d\u5b9a\u3057\u3066\u304a\u304f\u3068\u30ea\u30af\u30a8\u30b9\u30c8\u306e\u969b\u306b\u305d\u308c\u3092\u3064\u304b\u3063\u3066\u8a8d\u8a3c\u3057\u3066\u304f\u308c\u308b\n\n```java\n\nOkHttpClient client = new OkHttpClient();\nclient.setAuthenticator(new Authenticator() {\n    @Override\n    public Request authenticate(Proxy proxy, Response response) throws IOException {\n        String credential = Credentials.basic(\"\u30e6\u30fc\u30b6\u30fc\u540d\", \"\u30d1\u30b9\u30ef\u30fc\u30c9\");\n         return response.request().newBuilder().header(\"Authorization\", credential).build();\n    }\n\n    @Override\n    public Request authenticateProxy(Proxy proxy, Response response) throws IOException {\n        return null;\n    }\n});\n```\n\n# SSL\u306e\u30aa\u30ec\u30aa\u30ec\u8a3c\u660e\u66f8\u3092\u8a31\u53ef\u3059\u308b\uff08SSL\u30a8\u30e9\u30fc\u3092\u7121\u8996\u3059\u308b\uff09\n\nSSL\u8a3c\u660e\u66f8\u306e\u691c\u8a3c\u3092\u884c\u308f\u306a\u3044\u3088\u3046\u306b\u3059\u308b\u306e\u3068\u3001\u5b9f\u969b\u306b\u30a2\u30af\u30bb\u30b9\u3059\u308b\u30db\u30b9\u30c8\u540d\u306e\u691c\u8a3c\u3092\u884c\u308f\u306a\u3044\u3088\u3046\u306b\u3059\u308c\u3070\u3044\u3051\u307e\u3059\u3002\n\n```java\n\ntry {\n    final TrustManager[] trustAllCerts = new TrustManager[]{\n        new X509TrustManager() {\n            @Override\n            public void checkClientTrusted(java.security.cert.X509Certificate[] chain, String authType) \n                    throws CertificateException {\n            }\n\n            @Override\n            public void checkServerTrusted(java.security.cert.X509Certificate[] chain, String authType) \n                    throws CertificateException {\n            }\n\n            @Override\n            public java.security.cert.X509Certificate[] getAcceptedIssuers() {\n                return null;\n            }\n        }\n    };\n\n    final SSLContext sslContext = SSLContext.getInstance(\"SSL\");\n    sslContext.init(null, trustAllCerts, new java.security.SecureRandom());\n    final SSLSocketFactory sslSocketFactory = sslContext.getSocketFactory();\n\n    client.setSslSocketFactory(sslSocketFactory);\n    client.setHostnameVerifier(new HostnameVerifier() {\n        @Override\n        public boolean verify(String hostname, SSLSession session) {\n            return true;\n        }\n    });\n} catch (Exception e) {\n    e.printStackTrace();\n}\n```\n\n# Cookie\u7ba1\u7406\n\nBasic\u8a8d\u8a3c\u3068\u540c\u3058\u3088\u3046\u306a\u611f\u3058\u3067OkHttpClient\u306bCookieManager\u3092\u8a2d\u5b9a\u3057\u3066\u304a\u3051\u3070\u30af\u30c3\u30ad\u30fc\u7ba1\u7406\u3092\u3057\u3066\u304f\u308c\u308b\n\nCookiePolicy\u306f\u4ee5\u4e0b\u306e\uff13\u3064\u304b\u3089\u9078\u3079\u308b\n\n* CookiePolicy\n     * ACCEPT_ALL (\u3059\u3079\u3066\u306e Cookie \u3092\u53d7\u3051\u5165\u308c\u308b)\n     * ACCEPT_NONE (Cookie \u3092\u307e\u3063\u305f\u304f\u53d7\u3051\u5165\u308c\u306a\u3044)\n     * ACCEPT_ORIGINAL_SERVER (\u5143\u306e\u30b5\u30fc\u30d0\u30fc\u304b\u3089\u306e Cookie \u3060\u3051\u3092\u53d7\u3051\u5165\u308c\u308b)\n\n\u305f\u3060\u3057CookieManager\u306f\u3001\u6b21\u56de\u30a2\u30d7\u30ea\u8d77\u52d5\u6642\u306b\u306f\u7a7a\u306b\u306a\u3063\u3066\u3044\u308b\u306e\u3067\u8981\u6ce8\u610f\n\n```java\n\nOkHttpClient client = new OkHttpClient();\nCookieManager cookieManager = new CookieManager();\ncookieManager.setCookiePolicy(CookiePolicy.ACCEPT_ALL);\nclient.setCookieHandler(cookieManager);\n```\n", "tags": ["OkHttp", "Android"]}