{"context": " More than 1 year has passed since last update.\u30ab\u30e1\u30e9\u7cfb\u306e\u30a2\u30d7\u30ea\u3092\u7b46\u982d\u306b\u3001\u753b\u50cf\u51e6\u7406\u3092\u884c\u3046\u30a2\u30d7\u30ea\u3068\u3044\u3046\u306e\u306f\u6570\u591a\u304f\u5b58\u5728\u3057\u307e\u3059\u3002UWP\u30a2\u30d7\u30ea\u306b\u304a\u3051\u308b\u753b\u50cf\u51e6\u7406\u306e\u57fa\u790e\u3092\u7406\u89e3\u3059\u308b\u3079\u304f\u3001\u4ee5\u4e0b\u3067\u300c\u30e6\u30fc\u30b6\u30fc\u304c\u9078\u629e\u3057\u305fJPEG\u753b\u50cf\u3092\u767d\u9ed2\u5316\u3057\u3066UI\u306b\u8868\u793a\u3059\u308b\u300d\u3068\u3044\u3046\u7c21\u5358\u306a\u753b\u50cf\u51e6\u7406\u3092\u5b9f\u88c5\u3057\u3066\u307f\u307e\u3057\u305f\u3002\n\n\u30b3\u30fc\u30c9\n\u5b9f\u88c5\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3057\u305f\u3002JPEG\u30d5\u30a1\u30a4\u30eb\u3092\u30e6\u30fc\u30b6\u30fc\u306b\u9078\u629e\u3055\u305b\u3001\u305d\u306e\u30d5\u30a1\u30a4\u30eb\u306e\u30b9\u30c8\u30ea\u30fc\u30e0\u3092\u8aad\u307f\u8fbc\u307f\u3001\u767d\u9ed2\u5316\u306e\u8a08\u7b97\u3092\u3057\u3066\u304b\u3089\u66f8\u304d\u51fa\u3057\u305f\u306e\u3061\u306bUI\u306b\u8868\u793a\u3059\u308b\u3068\u3044\u3046\u6d41\u308c\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u3002\u767d\u9ed2\u5316\u306b\u95a2\u3057\u3066\u306f\u3001\u305f\u3060\u5358\u306bRGB\u306e\u5e73\u5747\u3092\u3068\u308b\u3060\u3051\u3067\u306f\u9762\u767d\u304f\u306a\u3044\u3068\u601d\u3063\u305f\u306e\u3067\u3001\u691c\u7d22\u3057\u3066\u5b66\u3093\u3060NTSC\u3068\u3044\u3046\u4f01\u753b\u3067\u4f7f\u308f\u308c\u3066\u3044\u308b\u8d64\u9752\u7dd1\u6bd4\u7387\u3092\u4f7f\u3063\u3066\u307f\u307e\u3057\u305f\u3002\nprivate async void MyButton_Click(object sender, RoutedEventArgs e)\n{\n    // Open FileOpenPicker to let the user select a .jpg file\n    var picker = new Windows.Storage.Pickers.FileOpenPicker();\n    picker.FileTypeFilter.Add(\".jpg\");\n    StorageFile sf = await picker.PickSingleFileAsync();\n    if (sf != null)\n    {\n        using (IRandomAccessStream inputStream = await sf.OpenAsync(FileAccessMode.Read))\n        {\n            // Get properties of the image\n            var properties = await sf.Properties.GetImagePropertiesAsync();\n            uint width = properties.Width;\n            uint height = properties.Height;\n\n            // Create a decoder and get information out of it\n            var decoder = await BitmapDecoder.CreateAsync(BitmapDecoder.JpegDecoderId, inputStream);\n            var pixelFormat = decoder.BitmapPixelFormat; // Get the pixel format\n            var alphaMode = decoder.BitmapAlphaMode; // Get the alpha mode\n            var dataProvider = await decoder.GetPixelDataAsync(); // Ge the actual byte data\n            byte[] originalBytes = dataProvider.DetachPixelData();\n            byte[] modifiedBytes = new byte[originalBytes.Length];\n            Array.Copy(originalBytes, modifiedBytes, originalBytes.Length);\n\n            switch (pixelFormat)\n            {\n                case BitmapPixelFormat.Bgra8:\n                case BitmapPixelFormat.Rgba8:\n                    break;\n                default:\n                    throw new Exception($\"This Bitmap format is not supported: {pixelFormat}\");\n            }\n\n            // Create NTSC Black and Whilte byte array data\n            for (int i = 0; i + 3 < originalBytes.Length; i += 4)\n            {\n                byte byteValue = 0;\n                double blueWeight = 0.114478;\n                double greenWeight = 0.586611;\n                double redWeight = 0.298912;\n                if (pixelFormat == BitmapPixelFormat.Bgra8)\n                {\n                    byteValue = (byte)((int)(blueWeight * originalBytes[i]) + \n                                        (int)(greenWeight * originalBytes[i + 1]) +\n                                        (int)(redWeight * originalBytes[i + 2]));\n                }\n                else\n                {\n                    byteValue = (byte)((int)(redWeight * originalBytes[i]) +\n                                        (int)(greenWeight * originalBytes[i + 1]) +\n                                        (int)(blueWeight * originalBytes[i + 2]));\n                }\n                modifiedBytes[i] = byteValue;\n                modifiedBytes[i + 1] = byteValue;\n                modifiedBytes[i + 2] = byteValue;\n                modifiedBytes[i + 3] = originalBytes[i + 3]; // Alpha\n            }\n\n            // Create an encoder with the modified bytes\n            var outputStream = new InMemoryRandomAccessStream();\n            var encoder = await BitmapEncoder.CreateForTranscodingAsync(outputStream, decoder);\n            encoder.SetPixelData(pixelFormat, alphaMode, width, height, 1366.0, 768.0, modifiedBytes);\n\n            // Write the bytes to the stream\n            await encoder.FlushAsync();\n\n            // Show the image to UI\n            var bi = new BitmapImage();\n            await bi.SetSourceAsync(outputStream);\n            MyImage.Source = bi;\n        }\n    }\n}\n\n\n\u767d\u9ed2\u5316\u3092\u5b9f\u969b\u306b\u884c\u3063\u3066\u3044\u308b\u90e8\u5206\n\u7279\u6bb5\u5927\u3057\u305f\u3053\u3068\u3092\u3057\u3066\u3044\u308b\u8a33\u3067\u306f\u3042\u308a\u307e\u305b\u3093\u304c\u3001\u4ee5\u4e0b\u304c\u767d\u9ed2\u5316\u3092\u884c\u3063\u3066\u3044\u308b\u90e8\u5206\u3067\u3059\u3002\u77e5\u3089\u306a\u304b\u3063\u305f\u306e\u3067\u3059\u304c\u3001\u30d4\u30af\u30bb\u30eb\u306e\u30d5\u30a9\u30fc\u30de\u30c3\u30c8\u306f\u4f55\u7a2e\u985e\u3082\u5b9a\u7fa9\u304c\u3042\u308b\u3088\u3046\u3067\u3001\u30e6\u30fc\u30b6\u30fc\u306b\u30d5\u30a1\u30a4\u30eb\u3092\u8aad\u307f\u8fbc\u307e\u305b\u308b\u30a2\u30d7\u30ea\u3067\u3042\u308c\u3070\u30d5\u30a9\u30fc\u30de\u30c3\u30c8\u304c\u3042\u308b\u7279\u5b9a\u306e\u3082\u306e\u3067\u3042\u308b\u3068\u3044\u3046\u671f\u5f85\u306f\u3067\u304d\u307e\u305b\u3093\u3002\u3088\u3063\u3066\u30d5\u30a9\u30fc\u30de\u30c3\u30c8\u306e\u9055\u3044\u306b\u3088\u3063\u3066\u51e6\u7406\u3092\u66f8\u304d\u5206\u3051\u308b\u5fc5\u8981\u304c\u3042\u308b\u306f\u305a\u3067\u3059\u3002\u4eca\u56de\u306f\u5358\u7d14\u306bRGBA8\u3082\u3057\u304f\u306fBGRA8\u30d5\u30a9\u30fc\u30de\u30c3\u30c8\u3067\u306a\u3051\u308c\u3070\u5bfe\u8c61\u5916\u3068\u3057\u307e\u3057\u305f\u3002\n            switch (pixelFormat)\n            {\n                case BitmapPixelFormat.Bgra8:\n                case BitmapPixelFormat.Rgba8:\n                    break;\n                default:\n                    throw new Exception($\"This Bitmap format is not supported: {pixelFormat}\");\n            }\n\n            // Create NTSC Black and Whilte byte array data\n            for (int i = 0; i + 3 < originalBytes.Length; i += 4)\n            {\n                byte byteValue = 0;\n                double blueWeight = 0.114478;\n                double greenWeight = 0.586611;\n                double redWeight = 0.298912;\n                if (pixelFormat == BitmapPixelFormat.Bgra8)\n                {\n                    byteValue = (byte)((int)(blueWeight * originalBytes[i]) + \n                                        (int)(greenWeight * originalBytes[i + 1]) +\n                                        (int)(redWeight * originalBytes[i + 2]));\n                }\n                else\n                {\n                    byteValue = (byte)((int)(redWeight * originalBytes[i]) +\n                                        (int)(greenWeight * originalBytes[i + 1]) +\n                                        (int)(blueWeight * originalBytes[i + 2]));\n                }\n                modifiedBytes[i] = byteValue;\n                modifiedBytes[i + 1] = byteValue;\n                modifiedBytes[i + 2] = byteValue;\n                modifiedBytes[i + 3] = originalBytes[i + 3]; // Alpha\n            }\n\n\n\u30a8\u30f3\u30b3\u30fc\u30c0\u30fc\u306b\u767d\u9ed2\u5316\u3057\u305f\u30d4\u30af\u30bb\u30eb\u30c7\u30fc\u30bf\u3092\u4e0e\u3048\u308b\u90e8\u5206\n\u4ee5\u4e0b\u306e\u90e8\u5206\u3067\u767d\u9ed2\u5316\u3055\u308c\u305f\u5f8c\u306e\u30d4\u30af\u30bb\u30eb\u30c7\u30fc\u30bf\u3092\u6e21\u3057\u3066\u3044\u307e\u3059\u3002\u5b9f\u306fBitmapEncoder#SetPixelData\u306e\u4e94\u756a\u76ee\u3068\u516d\u756a\u76ee\u306e\u5f15\u6570\u306b\u4e0e\u3048\u308b\u3079\u304d\u5024\u304c\u7406\u89e3\u3067\u304d\u306a\u304b\u3063\u305f\u306e\u3067\u3001\u9069\u5f53\u306a\u5024\u3092\u4e0e\u3048\u3066\u3044\u307e\u3059\u3002\u3002\u3053\u308c\u306f\u304d\u3061\u3093\u3068\u7406\u89e3\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u306d\u3002\u5bbf\u984c\u3067\u3059\u3002\n\n            // Create an encoder with the modified bytes\n            var outputStream = new InMemoryRandomAccessStream();\n            var encoder = await BitmapEncoder.CreateForTranscodingAsync(outputStream, decoder);\n            encoder.SetPixelData(pixelFormat, alphaMode, width, height, 1366.0, 768.0, modifiedBytes);\n\n\n\u7d50\u679c\n\u7d50\u679c\u3092\u898b\u6bd4\u3079\u308b\u305f\u3081\u30a2\u30d7\u30ea\u3092\u5c11\u3057\u3060\u3051\u6539\u9020\u3057\u3066\u3001\u5143\u306e\u753b\u50cf\u3068\u51e6\u7406\u6e08\u307f\u306e\u753b\u50cf\u304c\u4e21\u65b9\u8868\u793a\u3055\u308c\u308b\u3088\u3046\u306b\u3057\u3066\u307f\u307e\u3057\u305f\u3002\n\n\u4f59\u8ac7\u3067\u3059\u304c\u3001\u767d\u9ed2\u5316\u3059\u308b\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u3092\u8272\u3005\u3068\u8a66\u3057\u3066\u307f\u3066\u6700\u9069\u306a\u767d\u9ed2\u5316\u306e\u65b9\u6cd5\u3092\u8abf\u67fb\u3057\u3066\u307f\u308b\u306e\u3082\u9762\u767d\u305d\u3046\u3067\u3059\u3002\n\n\u88dc\u8db3\u3084\u53c2\u8003\u60c5\u5831\n\nHow to resize Image in C# WinRT/winmd?\nBitmapDecoder Class\nBitmapEncoder Class\n\u753b\u50cf\u51e6\u7406#\u30e2\u30ce\u30af\u30ed\u5316\n\n\u30ab\u30e1\u30e9\u7cfb\u306e\u30a2\u30d7\u30ea\u3092\u7b46\u982d\u306b\u3001\u753b\u50cf\u51e6\u7406\u3092\u884c\u3046\u30a2\u30d7\u30ea\u3068\u3044\u3046\u306e\u306f\u6570\u591a\u304f\u5b58\u5728\u3057\u307e\u3059\u3002UWP\u30a2\u30d7\u30ea\u306b\u304a\u3051\u308b\u753b\u50cf\u51e6\u7406\u306e\u57fa\u790e\u3092\u7406\u89e3\u3059\u308b\u3079\u304f\u3001\u4ee5\u4e0b\u3067\u300c\u30e6\u30fc\u30b6\u30fc\u304c\u9078\u629e\u3057\u305fJPEG\u753b\u50cf\u3092\u767d\u9ed2\u5316\u3057\u3066UI\u306b\u8868\u793a\u3059\u308b\u300d\u3068\u3044\u3046\u7c21\u5358\u306a\u753b\u50cf\u51e6\u7406\u3092\u5b9f\u88c5\u3057\u3066\u307f\u307e\u3057\u305f\u3002\n\n# \u30b3\u30fc\u30c9\n\u5b9f\u88c5\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3057\u305f\u3002JPEG\u30d5\u30a1\u30a4\u30eb\u3092\u30e6\u30fc\u30b6\u30fc\u306b\u9078\u629e\u3055\u305b\u3001\u305d\u306e\u30d5\u30a1\u30a4\u30eb\u306e\u30b9\u30c8\u30ea\u30fc\u30e0\u3092\u8aad\u307f\u8fbc\u307f\u3001\u767d\u9ed2\u5316\u306e\u8a08\u7b97\u3092\u3057\u3066\u304b\u3089\u66f8\u304d\u51fa\u3057\u305f\u306e\u3061\u306bUI\u306b\u8868\u793a\u3059\u308b\u3068\u3044\u3046\u6d41\u308c\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u3002\u767d\u9ed2\u5316\u306b\u95a2\u3057\u3066\u306f\u3001\u305f\u3060\u5358\u306bRGB\u306e\u5e73\u5747\u3092\u3068\u308b\u3060\u3051\u3067\u306f\u9762\u767d\u304f\u306a\u3044\u3068\u601d\u3063\u305f\u306e\u3067\u3001\u691c\u7d22\u3057\u3066\u5b66\u3093\u3060NTSC\u3068\u3044\u3046\u4f01\u753b\u3067\u4f7f\u308f\u308c\u3066\u3044\u308b\u8d64\u9752\u7dd1\u6bd4\u7387\u3092\u4f7f\u3063\u3066\u307f\u307e\u3057\u305f\u3002\n\n```csharp\nprivate async void MyButton_Click(object sender, RoutedEventArgs e)\n{\n    // Open FileOpenPicker to let the user select a .jpg file\n    var picker = new Windows.Storage.Pickers.FileOpenPicker();\n    picker.FileTypeFilter.Add(\".jpg\");\n    StorageFile sf = await picker.PickSingleFileAsync();\n    if (sf != null)\n    {\n        using (IRandomAccessStream inputStream = await sf.OpenAsync(FileAccessMode.Read))\n        {\n            // Get properties of the image\n            var properties = await sf.Properties.GetImagePropertiesAsync();\n            uint width = properties.Width;\n            uint height = properties.Height;\n\n            // Create a decoder and get information out of it\n            var decoder = await BitmapDecoder.CreateAsync(BitmapDecoder.JpegDecoderId, inputStream);\n            var pixelFormat = decoder.BitmapPixelFormat; // Get the pixel format\n            var alphaMode = decoder.BitmapAlphaMode; // Get the alpha mode\n            var dataProvider = await decoder.GetPixelDataAsync(); // Ge the actual byte data\n            byte[] originalBytes = dataProvider.DetachPixelData();\n            byte[] modifiedBytes = new byte[originalBytes.Length];\n            Array.Copy(originalBytes, modifiedBytes, originalBytes.Length);\n\n            switch (pixelFormat)\n            {\n                case BitmapPixelFormat.Bgra8:\n                case BitmapPixelFormat.Rgba8:\n                    break;\n                default:\n                    throw new Exception($\"This Bitmap format is not supported: {pixelFormat}\");\n            }\n\n            // Create NTSC Black and Whilte byte array data\n            for (int i = 0; i + 3 < originalBytes.Length; i += 4)\n            {\n                byte byteValue = 0;\n                double blueWeight = 0.114478;\n                double greenWeight = 0.586611;\n                double redWeight = 0.298912;\n                if (pixelFormat == BitmapPixelFormat.Bgra8)\n                {\n                    byteValue = (byte)((int)(blueWeight * originalBytes[i]) + \n                                        (int)(greenWeight * originalBytes[i + 1]) +\n                                        (int)(redWeight * originalBytes[i + 2]));\n                }\n                else\n                {\n                    byteValue = (byte)((int)(redWeight * originalBytes[i]) +\n                                        (int)(greenWeight * originalBytes[i + 1]) +\n                                        (int)(blueWeight * originalBytes[i + 2]));\n                }\n                modifiedBytes[i] = byteValue;\n                modifiedBytes[i + 1] = byteValue;\n                modifiedBytes[i + 2] = byteValue;\n                modifiedBytes[i + 3] = originalBytes[i + 3]; // Alpha\n            }\n\n            // Create an encoder with the modified bytes\n            var outputStream = new InMemoryRandomAccessStream();\n            var encoder = await BitmapEncoder.CreateForTranscodingAsync(outputStream, decoder);\n            encoder.SetPixelData(pixelFormat, alphaMode, width, height, 1366.0, 768.0, modifiedBytes);\n\n            // Write the bytes to the stream\n            await encoder.FlushAsync();\n\n            // Show the image to UI\n            var bi = new BitmapImage();\n            await bi.SetSourceAsync(outputStream);\n            MyImage.Source = bi;\n        }\n    }\n}\n```\n\n## \u767d\u9ed2\u5316\u3092\u5b9f\u969b\u306b\u884c\u3063\u3066\u3044\u308b\u90e8\u5206\n\u7279\u6bb5\u5927\u3057\u305f\u3053\u3068\u3092\u3057\u3066\u3044\u308b\u8a33\u3067\u306f\u3042\u308a\u307e\u305b\u3093\u304c\u3001\u4ee5\u4e0b\u304c\u767d\u9ed2\u5316\u3092\u884c\u3063\u3066\u3044\u308b\u90e8\u5206\u3067\u3059\u3002\u77e5\u3089\u306a\u304b\u3063\u305f\u306e\u3067\u3059\u304c\u3001\u30d4\u30af\u30bb\u30eb\u306e\u30d5\u30a9\u30fc\u30de\u30c3\u30c8\u306f\u4f55\u7a2e\u985e\u3082\u5b9a\u7fa9\u304c\u3042\u308b\u3088\u3046\u3067\u3001\u30e6\u30fc\u30b6\u30fc\u306b\u30d5\u30a1\u30a4\u30eb\u3092\u8aad\u307f\u8fbc\u307e\u305b\u308b\u30a2\u30d7\u30ea\u3067\u3042\u308c\u3070\u30d5\u30a9\u30fc\u30de\u30c3\u30c8\u304c\u3042\u308b\u7279\u5b9a\u306e\u3082\u306e\u3067\u3042\u308b\u3068\u3044\u3046\u671f\u5f85\u306f\u3067\u304d\u307e\u305b\u3093\u3002\u3088\u3063\u3066\u30d5\u30a9\u30fc\u30de\u30c3\u30c8\u306e\u9055\u3044\u306b\u3088\u3063\u3066\u51e6\u7406\u3092\u66f8\u304d\u5206\u3051\u308b\u5fc5\u8981\u304c\u3042\u308b\u306f\u305a\u3067\u3059\u3002\u4eca\u56de\u306f\u5358\u7d14\u306bRGBA8\u3082\u3057\u304f\u306fBGRA8\u30d5\u30a9\u30fc\u30de\u30c3\u30c8\u3067\u306a\u3051\u308c\u3070\u5bfe\u8c61\u5916\u3068\u3057\u307e\u3057\u305f\u3002\n\n```csharp\n            switch (pixelFormat)\n            {\n                case BitmapPixelFormat.Bgra8:\n                case BitmapPixelFormat.Rgba8:\n                    break;\n                default:\n                    throw new Exception($\"This Bitmap format is not supported: {pixelFormat}\");\n            }\n\n            // Create NTSC Black and Whilte byte array data\n            for (int i = 0; i + 3 < originalBytes.Length; i += 4)\n            {\n                byte byteValue = 0;\n                double blueWeight = 0.114478;\n                double greenWeight = 0.586611;\n                double redWeight = 0.298912;\n                if (pixelFormat == BitmapPixelFormat.Bgra8)\n                {\n                    byteValue = (byte)((int)(blueWeight * originalBytes[i]) + \n                                        (int)(greenWeight * originalBytes[i + 1]) +\n                                        (int)(redWeight * originalBytes[i + 2]));\n                }\n                else\n                {\n                    byteValue = (byte)((int)(redWeight * originalBytes[i]) +\n                                        (int)(greenWeight * originalBytes[i + 1]) +\n                                        (int)(blueWeight * originalBytes[i + 2]));\n                }\n                modifiedBytes[i] = byteValue;\n                modifiedBytes[i + 1] = byteValue;\n                modifiedBytes[i + 2] = byteValue;\n                modifiedBytes[i + 3] = originalBytes[i + 3]; // Alpha\n            }\n```\n\n## \u30a8\u30f3\u30b3\u30fc\u30c0\u30fc\u306b\u767d\u9ed2\u5316\u3057\u305f\u30d4\u30af\u30bb\u30eb\u30c7\u30fc\u30bf\u3092\u4e0e\u3048\u308b\u90e8\u5206\n\u4ee5\u4e0b\u306e\u90e8\u5206\u3067\u767d\u9ed2\u5316\u3055\u308c\u305f\u5f8c\u306e\u30d4\u30af\u30bb\u30eb\u30c7\u30fc\u30bf\u3092\u6e21\u3057\u3066\u3044\u307e\u3059\u3002\u5b9f\u306f[BitmapEncoder#SetPixelData](https://msdn.microsoft.com/en-us/library/windows/apps/windows.graphics.imaging.bitmapencoder.setpixeldata.aspx)\u306e\u4e94\u756a\u76ee\u3068\u516d\u756a\u76ee\u306e\u5f15\u6570\u306b\u4e0e\u3048\u308b\u3079\u304d\u5024\u304c\u7406\u89e3\u3067\u304d\u306a\u304b\u3063\u305f\u306e\u3067\u3001\u9069\u5f53\u306a\u5024\u3092\u4e0e\u3048\u3066\u3044\u307e\u3059\u3002\u3002\u3053\u308c\u306f\u304d\u3061\u3093\u3068\u7406\u89e3\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u306d\u3002\u5bbf\u984c\u3067\u3059\u3002\n\n```csharp\n\n            // Create an encoder with the modified bytes\n            var outputStream = new InMemoryRandomAccessStream();\n            var encoder = await BitmapEncoder.CreateForTranscodingAsync(outputStream, decoder);\n            encoder.SetPixelData(pixelFormat, alphaMode, width, height, 1366.0, 768.0, modifiedBytes);\n```\n\n# \u7d50\u679c\n\u7d50\u679c\u3092\u898b\u6bd4\u3079\u308b\u305f\u3081\u30a2\u30d7\u30ea\u3092\u5c11\u3057\u3060\u3051\u6539\u9020\u3057\u3066\u3001\u5143\u306e\u753b\u50cf\u3068\u51e6\u7406\u6e08\u307f\u306e\u753b\u50cf\u304c\u4e21\u65b9\u8868\u793a\u3055\u308c\u308b\u3088\u3046\u306b\u3057\u3066\u307f\u307e\u3057\u305f\u3002\n![BlackAndWhitePicSample1.jpg](https://qiita-image-store.s3.amazonaws.com/0/110540/ab408839-1f76-634d-4b54-05b9443d836f.jpeg)\n\u4f59\u8ac7\u3067\u3059\u304c\u3001\u767d\u9ed2\u5316\u3059\u308b\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u3092\u8272\u3005\u3068\u8a66\u3057\u3066\u307f\u3066\u6700\u9069\u306a\u767d\u9ed2\u5316\u306e\u65b9\u6cd5\u3092\u8abf\u67fb\u3057\u3066\u307f\u308b\u306e\u3082\u9762\u767d\u305d\u3046\u3067\u3059\u3002\n\n# \u88dc\u8db3\u3084\u53c2\u8003\u60c5\u5831\n- [How to resize Image in C# WinRT/winmd?](http://stackoverflow.com/questions/12349611/how-to-resize-image-in-c-sharp-winrt-winmd)\n- [BitmapDecoder Class](https://msdn.microsoft.com/en-us/library/system.windows.media.imaging.bitmapdecoder(v=vs.110).aspx)\n- [BitmapEncoder Class](https://msdn.microsoft.com/en-us/library/system.windows.media.imaging.bitmapencoder(v=vs.110).aspx)\n- [\u753b\u50cf\u51e6\u7406#\u30e2\u30ce\u30af\u30ed\u5316](http://www7a.biglobe.ne.jp/~fairytale/article/program/graphics.html#monochrome)\n", "tags": ["UWP", "C#", "\u753b\u50cf\u51e6\u7406"]}