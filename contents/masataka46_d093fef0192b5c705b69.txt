{"context": "\n\n\u74b0\u5883\nGPU GTX1070\nubuntu 14.04\nchainer 1.14.0\n\u306a\u3069\n\n\u306f\u3058\u3081\u306b\nchainer\u3067\u6700\u65b0\u306e\u30e2\u30c7\u30eb\u3092\u5b9f\u88c5\u3059\u308b\u969b\u306b\u306f\u3001links/connection\u3084functions/connection\u3092\u3044\u3058\u308b\u5fc5\u8981\u304c\u3042\u308b\u3002\u305d\u3053\u3067\u6700\u3082\u5358\u7d14\u306alinear.py\u3092\u3044\u3058\u3063\u3066\u3001\u65b0\u3057\u3044\u5c64\u3092\u4f5c\u3063\u3066\u307f\u308b\u3002\n\u524d\u56de\u306fchainer/functions/connection/linear.py\u306eforward\u95a2\u6570\u3092\u3044\u3058\u3063\u3066\u9806\u4f1d\u64ad\u3092\u6539\u826f\u3057\u305f\u3002\nhttp://qiita.com/masataka46/items/1a5d6cbd49279aeaf734\n\u4eca\u56de\u306fbackward\u95a2\u6570\u3092\u3044\u3058\u3063\u3066\u8aa4\u5dee\u9006\u4f1d\u64ad\u3092\u6539\u826f\u3059\u308b\u3002\n\n\u8aa4\u5dee\u9006\u4f1d\u64ad\u306e\u8a08\u7b97\n\u8aa4\u5dee\u9006\u4f1d\u64ad\u306e\u6f14\u7b97\u306f\u4ee5\u4e0b\u306e\u56f3\u306e\u3088\u3046\u306b\u306a\u308b\u3002\n\ngx\u3092\u6c42\u3081\u308b\u306e\u306b\u3001W\u306ein_size / n\u5074\u3092n\u500d\u3059\u308c\u3070\u8a08\u7b97\u304c\u697d\u306b\u306a\u308b\u3002\u307e\u305fgW\u3092\u6c42\u3081\u308b\u6f14\u7b97\u3092\u56f3\u5f0f\u5316\u3059\u308b\u3068\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u306a\u308b\u3002\n\n\u4eca\u5ea6\u306fgx\u3068x\u3068\u306e\u884c\u5217\u7a4d\u3067\u51fa\u529b\u3055\u308c\u305f\u3082\u306e\u3092in_size\u8ef8\u5074\u306b\u5727\u7e2e\u30fb\u8db3\u3057\u3042\u308f\u305b\u308b\u5fc5\u8981\u304c\u3042\u308b\u3002\u3053\u306e\u969b\u3001cupy.sum()\u3092\u4f7f\u3046\u3002\n\nlinear.py\u306e\u5909\u66f4\nchainer/functions/connection/linear.py\u5185\u306ebackward\u95a2\u6570\u3092\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u4fee\u6b63\u3059\u308b\u3002\n    def backward(self, inputs, grad_outputs):\n\n        x = _as_mat(inputs[0])\n        W = inputs[1]\n        gy = grad_outputs[0]\n\n        W_tile = cupy.tile(W, (1, common_num)).astype(W.dtype, copy=False)\n\n        gx = gy.dot(W_tile).astype(gy.dtype, copy=False)\n        gW_wide = gy.T.dot(x).astype(W.dtype, copy=False)\n        gW_cube = gW_wide.reshape(len(gW_wide), common_num, -1).astype(W.dtype, copy=False)\n        gW = gW_cube.sum(axis=1).astype(W.dtype, copy=False)\n\n        if len(inputs) == 3:\n            gb = gy.sum(0)\n            return gx, gW, gb\n        else:\n            return gx, gW\n\n\u884c\u5217\u7a4d\u306e\u7d50\u679c\uff08gW_wide\uff09\u306b\u5bfe\u3057\u3066\u3001\u307e\u305a\u6b21\u5143\u3092\u5897\u3084\u3059\uff08gW_cube\uff09\u3002\u6b21\u306b\u305d\u306e\u6b21\u5143\u306b\u95a2\u3057\u3066\u8db3\u3057\u3042\u308f\u305b\u3066\uff08sum\u95a2\u6570\uff09\u3044\u308b\u3002\n\n\u4fee\u6b63\u30e2\u30c7\u30eb\u306e\u5b66\u7fd2\u7d50\u679c\n\u4fee\u6b63\u30e2\u30c7\u30eb\u3092\u8d70\u3089\u305b\u3066\u3001accuracy\u3068\u51e6\u7406\u901f\u5ea6\u3092\u5143\u306e\u30e2\u30c7\u30eb\u3068\u6bd4\u8f03\u3059\u308b\u3002\npython train_mnist3.py -g=0 -e=50\nGPU: 0\n# unit: 1000\n# Minibatch-size: 100\n# epoch: 50\n\nepoch       main/loss   validation/main/loss  main/accuracy  validation/main/accuracy\n1           0.204286    0.10436               0.936834       0.9683                    \n2           0.0795502   0.0783082             0.975266       0.974\n\u30fb\u30fb\u30fb\n49          0.00331749  0.124306              0.999166       0.9843                    \n50          0.00580243  0.136195              0.998583       0.9836    \n\n\uff15\uff10\u56de\u306e\u5b66\u7fd2\u3067\uff11\u5206\uff13\uff10\u79d2\u3001accuracy\u306f0.968\u304b\u30890.984\u306b\u4e0a\u6607\u3057\u305f\u3002\u5143\u306e\u30e2\u30c7\u30eb\u3060\u3068\u5b66\u7fd2\u6642\u9593\uff11\u5206\uff15\uff14\u79d2\u3067accuracy\u306f0.971\u304b\u30890.985\u3067\u3042\u308b\u3002\u3088\u3063\u3066\u3001\u4e88\u60f3\u901a\u308a\u5b66\u7fd2\u6642\u9593\u304c\u6e1b\u3063\u3066\u3001accuracy\u306f\u308f\u305a\u304b\u306b\u6e1b\u5c11\u3057\u3066\u3044\u308b\u3002\n##\u74b0\u5883\nGPU GTX1070\nubuntu 14.04\nchainer 1.14.0\n\u306a\u3069\n##\u306f\u3058\u3081\u306b\nchainer\u3067\u6700\u65b0\u306e\u30e2\u30c7\u30eb\u3092\u5b9f\u88c5\u3059\u308b\u969b\u306b\u306f\u3001links/connection\u3084functions/connection\u3092\u3044\u3058\u308b\u5fc5\u8981\u304c\u3042\u308b\u3002\u305d\u3053\u3067\u6700\u3082\u5358\u7d14\u306alinear.py\u3092\u3044\u3058\u3063\u3066\u3001\u65b0\u3057\u3044\u5c64\u3092\u4f5c\u3063\u3066\u307f\u308b\u3002\n\n\u524d\u56de\u306f`chainer/functions/connection/linear.py`\u306eforward\u95a2\u6570\u3092\u3044\u3058\u3063\u3066\u9806\u4f1d\u64ad\u3092\u6539\u826f\u3057\u305f\u3002\nhttp://qiita.com/masataka46/items/1a5d6cbd49279aeaf734\n\n\u4eca\u56de\u306fbackward\u95a2\u6570\u3092\u3044\u3058\u3063\u3066\u8aa4\u5dee\u9006\u4f1d\u64ad\u3092\u6539\u826f\u3059\u308b\u3002\n##\u8aa4\u5dee\u9006\u4f1d\u64ad\u306e\u8a08\u7b97\n\u8aa4\u5dee\u9006\u4f1d\u64ad\u306e\u6f14\u7b97\u306f\u4ee5\u4e0b\u306e\u56f3\u306e\u3088\u3046\u306b\u306a\u308b\u3002\n![backward01.png](https://qiita-image-store.s3.amazonaws.com/0/116706/017988e1-664b-8951-ab54-eed8cc1b1813.png)\ngx\u3092\u6c42\u3081\u308b\u306e\u306b\u3001W\u306ein_size / n\u5074\u3092n\u500d\u3059\u308c\u3070\u8a08\u7b97\u304c\u697d\u306b\u306a\u308b\u3002\u307e\u305fgW\u3092\u6c42\u3081\u308b\u6f14\u7b97\u3092\u56f3\u5f0f\u5316\u3059\u308b\u3068\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u306a\u308b\u3002\n![backward02.png](https://qiita-image-store.s3.amazonaws.com/0/116706/b84568d0-8bdf-14bc-beef-53d0b07293b7.png)\n\u4eca\u5ea6\u306fgx\u3068x\u3068\u306e\u884c\u5217\u7a4d\u3067\u51fa\u529b\u3055\u308c\u305f\u3082\u306e\u3092in_size\u8ef8\u5074\u306b\u5727\u7e2e\u30fb\u8db3\u3057\u3042\u308f\u305b\u308b\u5fc5\u8981\u304c\u3042\u308b\u3002\u3053\u306e\u969b\u3001cupy.sum()\u3092\u4f7f\u3046\u3002\n##linear.py\u306e\u5909\u66f4\n`chainer/functions/connection/linear.py`\u5185\u306ebackward\u95a2\u6570\u3092\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u4fee\u6b63\u3059\u308b\u3002\n\n```py\n    def backward(self, inputs, grad_outputs):\n\n        x = _as_mat(inputs[0])\n        W = inputs[1]\n        gy = grad_outputs[0]\n        \n        W_tile = cupy.tile(W, (1, common_num)).astype(W.dtype, copy=False)\n\n        gx = gy.dot(W_tile).astype(gy.dtype, copy=False)\n        gW_wide = gy.T.dot(x).astype(W.dtype, copy=False)\n        gW_cube = gW_wide.reshape(len(gW_wide), common_num, -1).astype(W.dtype, copy=False)\n        gW = gW_cube.sum(axis=1).astype(W.dtype, copy=False)\n\n        if len(inputs) == 3:\n            gb = gy.sum(0)\n            return gx, gW, gb\n        else:\n            return gx, gW\n```\n\n\u884c\u5217\u7a4d\u306e\u7d50\u679c\uff08gW_wide\uff09\u306b\u5bfe\u3057\u3066\u3001\u307e\u305a\u6b21\u5143\u3092\u5897\u3084\u3059\uff08gW_cube\uff09\u3002\u6b21\u306b\u305d\u306e\u6b21\u5143\u306b\u95a2\u3057\u3066\u8db3\u3057\u3042\u308f\u305b\u3066\uff08sum\u95a2\u6570\uff09\u3044\u308b\u3002\n##\u4fee\u6b63\u30e2\u30c7\u30eb\u306e\u5b66\u7fd2\u7d50\u679c\n\u4fee\u6b63\u30e2\u30c7\u30eb\u3092\u8d70\u3089\u305b\u3066\u3001accuracy\u3068\u51e6\u7406\u901f\u5ea6\u3092\u5143\u306e\u30e2\u30c7\u30eb\u3068\u6bd4\u8f03\u3059\u308b\u3002\n\n```\npython train_mnist3.py -g=0 -e=50\nGPU: 0\n# unit: 1000\n# Minibatch-size: 100\n# epoch: 50\n\nepoch       main/loss   validation/main/loss  main/accuracy  validation/main/accuracy\n1           0.204286    0.10436               0.936834       0.9683                    \n2           0.0795502   0.0783082             0.975266       0.974\n\u30fb\u30fb\u30fb\n49          0.00331749  0.124306              0.999166       0.9843                    \n50          0.00580243  0.136195              0.998583       0.9836    \n```\n\n\uff15\uff10\u56de\u306e\u5b66\u7fd2\u3067\uff11\u5206\uff13\uff10\u79d2\u3001accuracy\u306f0.968\u304b\u30890.984\u306b\u4e0a\u6607\u3057\u305f\u3002\u5143\u306e\u30e2\u30c7\u30eb\u3060\u3068\u5b66\u7fd2\u6642\u9593\uff11\u5206\uff15\uff14\u79d2\u3067accuracy\u306f0.971\u304b\u30890.985\u3067\u3042\u308b\u3002\u3088\u3063\u3066\u3001\u4e88\u60f3\u901a\u308a\u5b66\u7fd2\u6642\u9593\u304c\u6e1b\u3063\u3066\u3001accuracy\u306f\u308f\u305a\u304b\u306b\u6e1b\u5c11\u3057\u3066\u3044\u308b\u3002\n", "tags": ["Chainer", "Ubuntu14.04", "python2.7", "numpy", "DeepLearning"]}