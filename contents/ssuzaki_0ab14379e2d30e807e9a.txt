{"tags": ["Android", "Kotlin"], "context": "Kotlin\u3092\u306f\u3058\u3081\u308b\u306b\u3042\u305f\u3063\u3066\n\u8a00\u8a9e\u4ed5\u69d8\u3067\u3053\u3053\u306f\u62bc\u3055\u3048\u3066\u304a\u3053\u3046\u3001\u7684\u306a\u8a18\u4e8b\u3067\u3059\u3002\n\u666e\u6bb5\u306e\u958b\u767a\u3092Java\u304b\u3089Kotlin\u3078\u79fb\u884c\u3057\u3066\u3044\u304f\u904e\u7a0b\u3067\n\u3053\u308c\u306f\u8db3\u308a\u306a\u3044\u3001\u3068\u6c17\u3065\u3044\u305f\u3089\u968f\u6642\u8ffd\u8a18\u3057\u307e\u3059\u3002\n\n\u4f55\u304b\u3089\u306f\u3058\u3081\u308c\u3070\u3044\u3044\u3067\u3059\u304b\nKotlin https://kotlinlang.org/ \u3053\u3053\u3092\u8d77\u70b9\u306b\n\nTry Kotlin\n\u30d6\u30e9\u30a6\u30b6\u4e0a\u3067\u30b5\u30f3\u30d7\u30eb\u3092\u898b\u306a\u304c\u3089\u3001\u305d\u306e\u5834\u3067\u30b3\u30fc\u30c9\u3092\u66f8\u3044\u3066\u52d5\u4f5c\u78ba\u8a8d\u304c\u3067\u304d\u307e\u3059\u3002\nhttp://try.kotlinlang.org/\n\n\u753b\u9762\u5de6\u5074\u306bMy Programs\u3068\u3042\u308b\u3088\u3046\u306b\u3001\u30ed\u30b0\u30a4\u30f3\u3059\u308b\u3068\u81ea\u5206\u306e\u30b3\u30fc\u30c9\u3082\u7f6e\u3051\u307e\u3059\u3002\n\u307e\u305f\u3001\u5909\u66f4\u3057\u305f\u30b5\u30f3\u30d7\u30eb\u306fTree\u4e0a\u306e\u77e2\u5370\u30a2\u30a4\u30b3\u30f3\u3067\u3044\u3064\u3067\u3082Revert\u3067\u304d\u308b\u306e\u3067\n\u5fc3\u7f6e\u304d\u306a\u304f\u66f8\u304d\u76f4\u3057\u307e\u3057\u3087\u3046\u3002\n\nKotlin Language Documentation\n\u82f1\u8a9e\u3067\u3059\u3051\u3069\u30b3\u30fc\u30c9\u306f\u8aad\u3081\u308b\u306e\u3067\u306a\u3093\u3068\u306a\u304f\u610f\u5473\u306f\u308f\u304b\u308a\u307e\u3059\u3002\nhttps://kotlinlang.org/docs/kotlin-docs.pdf\n\n\u5730\u5473\u306a\u3068\u3053\n\n\u6587\u672b\u306e\u30bb\u30df\u30b3\u30ed\u30f3\u304c\u8981\u3089\u306a\u3044\n\u62e1\u5f35\u5b50 .kt\n\n\nval \u3068 var \u306e\u9055\u3044\n\nval\uff1a\u8aad\u307f\u8fbc\u307f\u5c02\u7528\uff08Getter\u306e\u307f\uff09\nvar\uff1a\u66f8\u304d\u63db\u3048\u53ef\u80fd\uff08Getter,Setter\uff09\n\n\nNull-safety\nNULL\u30c1\u30a7\u30c3\u30af\u3057\u3066\u306a\u3044\u30b3\u30fc\u30c9\u306f\u30b3\u30f3\u30d1\u30a4\u30eb\u6bb5\u968e\u3067\u30a8\u30e9\u30fc\n\nnon-null-type\nvar a: String = \"abc\"   // non-null type\na = null                // \u4ee3\u5165\u3060\u3081\u3002\u305c\u3063\u305f\u3044\u3002\u30a8\u30e9\u30fc\nval l = a.length        // ok\n\n\n\nnull-type\uff08\uff1f\u3092\u3064\u3051\u308b\uff09\nvar a: String? = \"abc\"  // null type\na = null                // null\u4ee3\u5165\u3067\u304d\u308b\nval l = a.length        // null\u30c1\u30a7\u30c3\u30af\u3057\u3066\u306a\u3044\u3002\u30a8\u30e9\u30fc\n\n\nnull\u306a\u3089\u5b9f\u884c\u3057\u306a\u3044\n\njava\nThread thread = null;\nif(thread != null)\n    thread.start();\n\n\n\nkotlin\nval thread: Thread? = null\nthread?.start()\n\n\n\nnull\u306e\u4ee3\u66ff\u5024\nnull\u3058\u3083\u306a\u304b\u3063\u305f\u3089\u8a2d\u5b9a\u3001\u306e\u3088\u3046\u306a\u5834\u5408\n\u30a8\u30b9\u30d3\u30b9\u6f14\u7b97\u5b50?:\u3092\u4f7f\u3063\u3066\u5b8c\u7d50\u306b\u3067\u304d\u307e\u3059\u3002\n\njava\nif(name != null){\n    textView.setText(name);\n}else{\n    textView.setText(\"no name\");\n}\n\n\n\nkotlin\ntextView.setText(name?: \"no name\");\n\n\n\n\u6587\u5b57\u5217 string\n\u30c0\u30d6\u30eb\u30af\u30a9\u30fc\u30c6\u30fc\u30b7\u30e7\u30f3\u3067\u56f2\u3046\u306e\u306f\u4e00\u7dd2\n\u6587\u5b57\u5217\u4e2d\u306b\u5909\u6570\u3092\u57cb\u3081\u8fbc\u3080\u5834\u5408\u306f$\u30de\u30fc\u30af\u3092\u4ed8\u3051\u3066\u3001\uff5b\uff5d\u3067\u56f2\u3046\n\nkotlin\nval name: String = \"ssuzaki\"\nprintln(\"${name}\")\n\n\n\u6539\u884c\u3092\u542b\u3081\u3066\u66f8\u3044\u305f\u901a\u308a\u306e\u6587\u5b57\u5217\u3092\u8868\u73fe\u3059\u308b\u5834\u5408\u306f\u30c0\u30d6\u30eb\u30af\u30a9\u30fc\u30c6\u30fc\u30b7\u30e7\u30f3\u3092\uff13\u3063\u3064\u3067\u56f2\u3046\n\nkotlin\nval text: String = \"\"\"\n\u3080\u304b\u3057\u3080\u304b\u3057\n\u3042\u308b\u3068\u3053\u308d\u306b\n\u3058\u30fc\u3055\u3093\u3070\u30fc\u3055\u3093\u304c\n\"\"\"\n\nprintln(\"${text}\")\n\n\n\n\u95a2\u6570 function\n\njava\nint sum(int a, int b){\n    return a + b;\n}\n\n\n\nkotlin\uff08\uff14\u30d1\u30bf\u30fc\u30f3\uff09\nfun sum(a: Int, b: Int): Int{\n    return a + b\n}\n\nfun sum(a: Int, b: Int) = a + b\n\nfun sum(a: Int, b: Int): Unit {  // \u4f55\u3082\u8fd4\u3055\u306a\u3044\u3088\n    print(a + b)\n}\n\nfun sum(a: Int, b: Int) {  // Unit\u306f\u7701\u7565\u3067\u304d\u308b\n    print(a + b)\n}\n\n\n\n\u30c7\u30d5\u30a9\u30eb\u30c8\u5f15\u6570\nCustomView\u3092\u4f5c\u308b\u6642\u306a\u3093\u304b\u306b\u30aa\u30fc\u30d0\u30fc\u30ed\u30fc\u30c9\u304c\u6e1b\u308b\u306e\u3067\u3044\u3044\u3067\u3059\u306d\n\njava\npublic class HogeView extends ImageView {\n    public HogeView(Context context) {\n        super(context);\n    }\n\n    public HogeView(Context context, AttributeSet attrs) {\n        super(context, attrs);\n    }\n\n    public HogeView(Context context, AttributeSet attrs, int defStyleAttr) {\n        super(context, attrs, defStyleAttr);\n    }\n}\n\n\n\nkotlin\nopen class HogeView : ImageView {\n    constructor(context: Context, attrs: AttributeSet? = null, defStyleAttr: Int = 0)\n    : super(context, attrs, defStyleAttr) {\n    }\n}\n\n\n\n\u5236\u5fa1\u6587 Control Flow\n\nif\nif\u306f\u5f0f\u3067\u5024\u3092\u8fd4\u3057\u307e\u3059\u3002\u306a\u306e\u3067\u4e09\u9805\u6f14\u7b97\u5b50\u306f\u3042\u308a\u307e\u305b\u3093\u3002\n\nkotlin\n// \u666e\u901a\u306b\u66f8\u3051\u307e\u3059\u3002\nvar max = a\nif (a < b)\n    max = b\n\n// else\u3082\u66f8\u3051\u307e\u3059\u3002\nvar max: Int\nif (a > b)\n    max = a\nelse\n    max = b\n\n// \u5f0f\nval max = if (a > b) a else b\n\n// \u5206\u5c90\u306f\u30d6\u30ed\u30c3\u30af\u306b\u3067\u304d\u307e\u3059\u3002\u30d6\u30ed\u30c3\u30af\u306e\u6700\u5f8c\u306e\u5f0f\u304c\u5024\u306b\u306a\u308a\u307e\u3059\u3002\nval max = if (a > b) {\n    print(\"Choose a\")\n    a\n} else {\n    print(\"Choose b\")\n    b\n}\n\n\n\nwhen\nswitch\u307f\u305f\u3044\u306a\u306e\u3002\u3068\u3066\u3082\u304a\u4e16\u8a71\u306b\u306a\u308a\u305d\u3046\u3002\n\u5f15\u6570\u3042\u308a\u306a\u3057\u3069\u3063\u3061\u3067\u3082\u3044\u3051\u308b\u3002\n\nwhen(\u5f15\u6570\u3042\u308a) { ... }\nwhen {...} \u5f15\u6570\u306a\u3057\n==, ||, && \u3082\u4f7f\u3048\u308b\n\n\u306e\u3067\u3001if-else,else,else...\u3088\u308a\u3082\u898b\u3084\u3059\u3044\u304b\u3089if\u3088\u308a\u3053\u3063\u3061\u304c\u3044\u3044\u304b\u3082\n\nkotlin\uff08\u5f15\u6570\u3042\u308a\u7248\uff09\nfun cases(obj: Any) {\n    when (obj) {\n        1 -> println(\"One\")\n        \"Hello\"     -> println(\"Greeting\")\n        is Long     -> println(\"Long\")\n        !is String  -> println(\"Not a string\")\n        else        -> println(\"Unknown\")\n    }\n}\n\nfun main(args: Array<String>) {\n    cases(1)\n\n    cases(\"Hello\")\n\n    val a: Long = 1;\n    cases(a)    // when\u306e\u9806\u756a\u7684\u306bOne\u3068\u8868\u793a\u3055\u308c\u308b\u3068\u601d\u3063\u305f\u3089Long\n\n    cases(2)\n\n    cases(\"test\")\n}\n\n\n\n\u7d50\u679c\nOne\nGreeting\nLong\nNot a string\nUnknown\n\n\n\nfor\n\u30a4\u30c6\u30ec\u30fc\u30bf\u304c\u63d0\u4f9b\u3055\u308c\u307e\u3059\u3002\n\nkotlin\n// \u304f\u308b\u304f\u308b\nfor (item in collection)\n    print(item)\n\n// \u30d6\u30ed\u30c3\u30af\u304f\u308b\u304f\u308b\nfor (item: Int in ints) {\n    // ...\n}\n\n// \u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u3067\u304f\u308b\u304f\u308b\nfor (i in array.indices)\n    print(array[i])\n\n// \u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u3068\u5024\u3067\u304f\u308b\u304f\u308b\nfor ((index, value) in array.withIndex()) {\n    println(\"the element at $index is $value\")\n}\n\n\n\nwhile\n\u304a\u99b4\u67d3\u307f\u306e\u524d\u5224\u65ad\u3001\u5f8c\u5224\u65ad\u3001\u3069\u3063\u3061\u3082\u3044\u3051\u307e\u3059\u304c\n\u5f8c\u5224\u65ad\u306e\u30b9\u30b3\u30fc\u30d7\u304c\u4fbf\u5229\u306b\u306a\u3063\u3066\u307e\u3059\u3002\n\nkotlin\n// \u524d\u5224\u65ad\nwhile (x > 0) {\n\n}\n\n// \u5f8c\u5224\u65ad\ndo {\n    val y = retrieveData()\n} while (y != null) // y\u304c\u898b\u3048\u308b\uff01\n\n\n\n\u7bc4\u56f2\u6307\u5b9a range\n\nkotlin\n// \uff58\u304c\uff11\u301c\uff110\nif(x in 1..10)\n    println(\"ok\")\n\n// \uff58\u304c\uff11\u301c\uff110\u3058\u3083\u306a\u3044\nif(x !in 1..10)\n    println(\"ng\")\n\n\n\n\u914d\u5217 array\n\nkotlin\n// \u304a\u597d\u307f\u3067\nval list = arrayOf(1, 2, 3)               // \u578b\u306f\u985e\u63a8\u3055\u308c\u308b\nval list = intArrayOf(1, 2, 3)            // int\u3067\nval list: Array<Int?> = arrayOfNulls(3)   // null\u306a\u8981\u7d20\u3092\uff13\u3063\u3064\n\nlist[0] = list[1] + list[2]       // \u5404\u8981\u7d20\u306f\u304a\u99b4\u67d3\u307f\u306e\u30ab\u30c3\u30b3\u3067\n\nfor(item in list){                // for\u30eb\u30fc\u30d7\u304f\u308b\u304f\u308b\n    println(item)\n}\n\n\n\n\u30b3\u30ec\u30af\u30b7\u30e7\u30f3 collection\n\nlist\n\nkotlin\nval list = listOf(1, 2, 3)\nlist[0] = list[1] + list[2]    // immutable\uff08\u5909\u66f4\u4e0d\u53ef\uff09\u30a8\u30e9\u30fc\n\nval list = mutableListOf(1, 2, 3)\nlist[0] = list[1] + list[2]    // mutalbe\uff08\u5909\u66f4\u53ef\u80fd\uff09\n\n\n\nmap\n\nkotlin\nval list = mapOf(\n    1 to \"one\",\n    2 to \"two\",\n    3 to \"three\"\n)\n//for(item in list){\n//    println(\"${item.key} to ${item.value}\")\n//}\nfor((key, value) in list)\n    println(\"${key} to ${value}\")\n}\nprintln(list[1])\n\n\n\n\u7d50\u679c\n1 to one\n2 to two\n3 to three\none\n\n\n\n\u30c7\u30fc\u30bf\u30af\u30e9\u30b9 data class\n\u5024\u3092\u4fdd\u6301\u3059\u308b\u3060\u3051\u306e\u30af\u30e9\u30b9\u306a\u3089\u3053\u308c\u3067\u3002\u30af\u30e9\u30b9\u540d\u306e\u524d\u306bdata\u3092\u4ed8\u3051\u307e\u3059\u3002\n\nkotlin\ndata class User(val name: String = \"\", val age: Int = 0)\n\n\n\u4f7f\u3044\u65b9\n\nkotlin\nval jack = User(name = \"Jack\", age = 1)  // jack\u3055\u3093\uff11\u6b73\nval olderJack = jack.copy(age = 2)       // jack\u3055\u3093\u306e\u540d\u524d\u306e\u307e\u307e\uff12\u6b73\u306e\u30b3\u30d4\u30fc\u3092\n\nval jane = User(\"Jane\", 35)  // jane\u3055\u3093\uff13\uff15\u6b73\nval (name, age) = jane       // jane\u3055\u3093\u306e\u540d\u524d\u3001\u5e74\u9f62\u3092GET\uff01\n\n\ncopy\u7528\u306e\u95a2\u6570\u304c\u4f5c\u3089\u308c\u308b\u307f\u305f\u3044\n\nkotlin\nfun copy(name: String = this.name, age: Int = this.age) = User(name, age)\n\n\n\nenum\u30af\u30e9\u30b9\n\nkotlin\nenum class Direction {\n    NORTH, SOUTH, WEST, EAST\n}\n\n\n\u5b9a\u7fa9\u3068\u521d\u671f\u5316\n\nkotlin\nenum class Color(val rgb: Int) {\n    RED(0xFF0000),\n    GREEN(0x00FF00),\n    BLUE(0x0000FF)\n}\n\n\n\n\u30b7\u30f3\u30b0\u30eb\u30c8\u30f3 singleton\n\nkotlin\nobject SingletonUser {\n    private var name: String = \"ssuzaki\"\n\n    fun init(data: String) {\n        name = data\n    }\n\n    fun put() {\n        println(\"${name}\")\n    }\n}\n\nfun main(args: Array<String>) {\n    SingletonUser.put()\n}\n\n\n\n\u30b3\u30f3\u30d1\u30cb\u30aa\u30f3\u30aa\u30d6\u30b8\u30a7\u30af\u30c8 companion\nstatic\u306e\u4ee3\u308f\u308a\u307f\u305f\u3044\u306a\u306e\n\nkotlin\nclass MyClass {\n    companion object { }\n}\n\nfun MyClass.Companion.foo() {\n    println(\"hoge\")\n}\n\nfun main(args: Array<String>) {\n    MyClass.foo()\n}\n\n\n\n\u540c\u4e00 equality\n\u540c\u3058\u53c2\u7167\u5148\u304b===\u3067\u6bd4\u8f03\u3002\u9055\u3046\u53c2\u7167\u5148\u306f!==\n\nkotlin\nval taro = User(\"taro\", 10)\nval jiro = User(\"jiro\", 11)\n\nif(taro === jiro)\n    println(\"taro equal jiro\")\n\n\n\n\u4f8b\u5916 Exceptions\n\u4f8b\u5916\u306f\u3059\u3079\u3066 Throwable \u306e\u5b50\u5b6b\u3067\u30e1\u30c3\u30bb\u30fc\u30b8\u3001\u30b9\u30bf\u30c3\u30af\u30c8\u30ec\u30fc\u30b9\u3092\u6301\u3061\n\u30aa\u30d7\u30b7\u30e7\u30f3\u3067\u539f\u56e0\u3092\u6301\u3061\u307e\u3059\u3002\n\n\u4f8b\u5916\u3092\u6295\u3052\u308b throw\n\nkotlin\nthrow MyException(\"Hi There!\")\n\n\n\n\u4f8b\u5916\u3092\u6355\u6349\u3059\u308b try...catch...finally\n\nkotlin\ntry {\n    // some code\n} catch(e: SomeException) {\n    // handler\n} finally {\n    // optional finally block\n}\n\n\n\ntry\u306f\u5f0f\u3067\u5024\u3092\u8fd4\u305b\u308b\n\nkotlin\nval a: Int? = try { parseInt(input) } catch (e: NumberFormatException) { null }\n\n\n\nKotlin\u3092\u306f\u3058\u3081\u308b\u306b\u3042\u305f\u3063\u3066\n\u8a00\u8a9e\u4ed5\u69d8\u3067\u3053\u3053\u306f\u62bc\u3055\u3048\u3066\u304a\u3053\u3046\u3001\u7684\u306a\u8a18\u4e8b\u3067\u3059\u3002\n\n\u666e\u6bb5\u306e\u958b\u767a\u3092Java\u304b\u3089Kotlin\u3078\u79fb\u884c\u3057\u3066\u3044\u304f\u904e\u7a0b\u3067\n\u3053\u308c\u306f\u8db3\u308a\u306a\u3044\u3001\u3068\u6c17\u3065\u3044\u305f\u3089\u968f\u6642\u8ffd\u8a18\u3057\u307e\u3059\u3002\n\n\n# \u4f55\u304b\u3089\u306f\u3058\u3081\u308c\u3070\u3044\u3044\u3067\u3059\u304b\nKotlin https://kotlinlang.org/ \u3053\u3053\u3092\u8d77\u70b9\u306b\n\n## Try Kotlin\n\u30d6\u30e9\u30a6\u30b6\u4e0a\u3067\u30b5\u30f3\u30d7\u30eb\u3092\u898b\u306a\u304c\u3089\u3001\u305d\u306e\u5834\u3067\u30b3\u30fc\u30c9\u3092\u66f8\u3044\u3066\u52d5\u4f5c\u78ba\u8a8d\u304c\u3067\u304d\u307e\u3059\u3002\nhttp://try.kotlinlang.org/\n\n![trykotlin.png](https://qiita-image-store.s3.amazonaws.com/0/76483/c8faace9-4d84-a825-88b4-1b74fe7379c6.png)\n\n\u753b\u9762\u5de6\u5074\u306bMy Programs\u3068\u3042\u308b\u3088\u3046\u306b\u3001\u30ed\u30b0\u30a4\u30f3\u3059\u308b\u3068\u81ea\u5206\u306e\u30b3\u30fc\u30c9\u3082\u7f6e\u3051\u307e\u3059\u3002\n\n\u307e\u305f\u3001\u5909\u66f4\u3057\u305f\u30b5\u30f3\u30d7\u30eb\u306fTree\u4e0a\u306e\u77e2\u5370\u30a2\u30a4\u30b3\u30f3\u3067\u3044\u3064\u3067\u3082Revert\u3067\u304d\u308b\u306e\u3067\n\u5fc3\u7f6e\u304d\u306a\u304f\u66f8\u304d\u76f4\u3057\u307e\u3057\u3087\u3046\u3002\n\n\n## Kotlin Language Documentation\n\u82f1\u8a9e\u3067\u3059\u3051\u3069\u30b3\u30fc\u30c9\u306f\u8aad\u3081\u308b\u306e\u3067\u306a\u3093\u3068\u306a\u304f\u610f\u5473\u306f\u308f\u304b\u308a\u307e\u3059\u3002\nhttps://kotlinlang.org/docs/kotlin-docs.pdf\n\n\n# \u5730\u5473\u306a\u3068\u3053\n- \u6587\u672b\u306e\u30bb\u30df\u30b3\u30ed\u30f3\u304c\u8981\u3089\u306a\u3044\n- \u62e1\u5f35\u5b50 .kt\n\n\n# val \u3068 var \u306e\u9055\u3044\n- val\uff1a\u8aad\u307f\u8fbc\u307f\u5c02\u7528\uff08Getter\u306e\u307f\uff09\n- var\uff1a\u66f8\u304d\u63db\u3048\u53ef\u80fd\uff08Getter,Setter\uff09\n\n\n# Null-safety\nNULL\u30c1\u30a7\u30c3\u30af\u3057\u3066\u306a\u3044\u30b3\u30fc\u30c9\u306f\u30b3\u30f3\u30d1\u30a4\u30eb\u6bb5\u968e\u3067\u30a8\u30e9\u30fc\n\n```kotlin:non-null-type\nvar a: String = \"abc\"\t// non-null type\na = null\t\t\t\t// \u4ee3\u5165\u3060\u3081\u3002\u305c\u3063\u305f\u3044\u3002\u30a8\u30e9\u30fc\nval l = a.length\t\t// ok\n```\n```kotlin:null-type\uff08\uff1f\u3092\u3064\u3051\u308b\uff09\nvar a: String? = \"abc\"\t// null type\na = null\t\t\t\t// null\u4ee3\u5165\u3067\u304d\u308b\nval l = a.length\t\t// null\u30c1\u30a7\u30c3\u30af\u3057\u3066\u306a\u3044\u3002\u30a8\u30e9\u30fc\n```\n\nnull\u306a\u3089\u5b9f\u884c\u3057\u306a\u3044\n\n```java:java\nThread thread = null;\nif(thread != null)\n    thread.start();\n```\n\n```kotlin:kotlin\nval thread: Thread? = null\nthread?.start()\n```\n\n\n# null\u306e\u4ee3\u66ff\u5024\nnull\u3058\u3083\u306a\u304b\u3063\u305f\u3089\u8a2d\u5b9a\u3001\u306e\u3088\u3046\u306a\u5834\u5408\n\u30a8\u30b9\u30d3\u30b9\u6f14\u7b97\u5b50?:\u3092\u4f7f\u3063\u3066\u5b8c\u7d50\u306b\u3067\u304d\u307e\u3059\u3002\n\n```java:java\nif(name != null){\n    textView.setText(name);\n}else{\n    textView.setText(\"no name\");\n}\n```\n\n```kotlin:kotlin\ntextView.setText(name?: \"no name\");\n```\n\n\n# \u6587\u5b57\u5217 string\n\u30c0\u30d6\u30eb\u30af\u30a9\u30fc\u30c6\u30fc\u30b7\u30e7\u30f3\u3067\u56f2\u3046\u306e\u306f\u4e00\u7dd2\n\u6587\u5b57\u5217\u4e2d\u306b\u5909\u6570\u3092\u57cb\u3081\u8fbc\u3080\u5834\u5408\u306f$\u30de\u30fc\u30af\u3092\u4ed8\u3051\u3066\u3001\uff5b\uff5d\u3067\u56f2\u3046\n\n```kotlin:kotlin\nval name: String = \"ssuzaki\"\nprintln(\"${name}\")\n```\n\n\u6539\u884c\u3092\u542b\u3081\u3066\u66f8\u3044\u305f\u901a\u308a\u306e\u6587\u5b57\u5217\u3092\u8868\u73fe\u3059\u308b\u5834\u5408\u306f\u30c0\u30d6\u30eb\u30af\u30a9\u30fc\u30c6\u30fc\u30b7\u30e7\u30f3\u3092\uff13\u3063\u3064\u3067\u56f2\u3046\n\n```kotlin:kotlin\nval text: String = \"\"\"\n\u3080\u304b\u3057\u3080\u304b\u3057\n\u3042\u308b\u3068\u3053\u308d\u306b\n\u3058\u30fc\u3055\u3093\u3070\u30fc\u3055\u3093\u304c\n\"\"\"\n    \nprintln(\"${text}\")\n```\n\n# \u95a2\u6570 function\n```java:java\nint sum(int a, int b){\n\treturn a + b;\n}\n```\n```kotlin:kotlin\uff08\uff14\u30d1\u30bf\u30fc\u30f3\uff09\nfun sum(a: Int, b: Int): Int{\n    return a + b\n}\n\nfun sum(a: Int, b: Int) = a + b\n\nfun sum(a: Int, b: Int): Unit {  // \u4f55\u3082\u8fd4\u3055\u306a\u3044\u3088\n    print(a + b)\n}\n\nfun sum(a: Int, b: Int) {  // Unit\u306f\u7701\u7565\u3067\u304d\u308b\n    print(a + b)\n}\n```\n\n## \u30c7\u30d5\u30a9\u30eb\u30c8\u5f15\u6570\nCustomView\u3092\u4f5c\u308b\u6642\u306a\u3093\u304b\u306b\u30aa\u30fc\u30d0\u30fc\u30ed\u30fc\u30c9\u304c\u6e1b\u308b\u306e\u3067\u3044\u3044\u3067\u3059\u306d\n\n```java:java\npublic class HogeView extends ImageView {\n\tpublic HogeView(Context context) {\n\t\tsuper(context);\n\t}\n\n\tpublic HogeView(Context context, AttributeSet attrs) {\n\t\tsuper(context, attrs);\n\t}\n\n\tpublic HogeView(Context context, AttributeSet attrs, int defStyleAttr) {\n\t\tsuper(context, attrs, defStyleAttr);\n\t}\n}\n```\n\n```kotlin:kotlin\nopen class HogeView : ImageView {\n    constructor(context: Context, attrs: AttributeSet? = null, defStyleAttr: Int = 0)\n    : super(context, attrs, defStyleAttr) {\n    }\n}\n```\n\n# \u5236\u5fa1\u6587 Control Flow\n\n## if\nif\u306f\u5f0f\u3067\u5024\u3092\u8fd4\u3057\u307e\u3059\u3002\u306a\u306e\u3067\u4e09\u9805\u6f14\u7b97\u5b50\u306f\u3042\u308a\u307e\u305b\u3093\u3002\n\n```kotlin:kotlin\n// \u666e\u901a\u306b\u66f8\u3051\u307e\u3059\u3002\nvar max = a\nif (a < b)\n    max = b\n\n// else\u3082\u66f8\u3051\u307e\u3059\u3002\nvar max: Int\nif (a > b)\n    max = a\nelse\n    max = b\n\n// \u5f0f\nval max = if (a > b) a else b\n\n// \u5206\u5c90\u306f\u30d6\u30ed\u30c3\u30af\u306b\u3067\u304d\u307e\u3059\u3002\u30d6\u30ed\u30c3\u30af\u306e\u6700\u5f8c\u306e\u5f0f\u304c\u5024\u306b\u306a\u308a\u307e\u3059\u3002\nval max = if (a > b) {\n\tprint(\"Choose a\")\n\ta\n} else {\n\tprint(\"Choose b\")\n\tb\n}\n```\n\n## when\nswitch\u307f\u305f\u3044\u306a\u306e\u3002\u3068\u3066\u3082\u304a\u4e16\u8a71\u306b\u306a\u308a\u305d\u3046\u3002\n\u5f15\u6570\u3042\u308a\u306a\u3057\u3069\u3063\u3061\u3067\u3082\u3044\u3051\u308b\u3002\n\n- when(\u5f15\u6570\u3042\u308a) { ... }\n- when {...} \u5f15\u6570\u306a\u3057\n- ==, ||, && \u3082\u4f7f\u3048\u308b\n\n\u306e\u3067\u3001if-else,else,else...\u3088\u308a\u3082\u898b\u3084\u3059\u3044\u304b\u3089if\u3088\u308a\u3053\u3063\u3061\u304c\u3044\u3044\u304b\u3082\n\n```kotlin:kotlin\uff08\u5f15\u6570\u3042\u308a\u7248\uff09\nfun cases(obj: Any) {\n    when (obj) {\n        1 -> println(\"One\")\n        \"Hello\" \t-> println(\"Greeting\")\n        is Long \t-> println(\"Long\")\n        !is String \t-> println(\"Not a string\")\n        else \t\t-> println(\"Unknown\")\n    }\n}\n\nfun main(args: Array<String>) {\n    cases(1)\n    \n    cases(\"Hello\")\n    \n    val a: Long = 1;\n    cases(a)\t// when\u306e\u9806\u756a\u7684\u306bOne\u3068\u8868\u793a\u3055\u308c\u308b\u3068\u601d\u3063\u305f\u3089Long\n    \n    cases(2)\n    \n    cases(\"test\")\n}\n```\n```text:\u7d50\u679c\nOne\nGreeting\nLong\nNot a string\nUnknown\n```\n\n## for\n\u30a4\u30c6\u30ec\u30fc\u30bf\u304c\u63d0\u4f9b\u3055\u308c\u307e\u3059\u3002\n\n```kotlin:kotlin\n// \u304f\u308b\u304f\u308b\nfor (item in collection)\n\tprint(item)\n\n// \u30d6\u30ed\u30c3\u30af\u304f\u308b\u304f\u308b\nfor (item: Int in ints) {\n\t// ...\n}\n\n// \u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u3067\u304f\u308b\u304f\u308b\nfor (i in array.indices)\n\tprint(array[i])\n\n// \u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u3068\u5024\u3067\u304f\u308b\u304f\u308b\nfor ((index, value) in array.withIndex()) {\n\tprintln(\"the element at $index is $value\")\n}\n```\n\n## while\n\u304a\u99b4\u67d3\u307f\u306e\u524d\u5224\u65ad\u3001\u5f8c\u5224\u65ad\u3001\u3069\u3063\u3061\u3082\u3044\u3051\u307e\u3059\u304c\n\u5f8c\u5224\u65ad\u306e\u30b9\u30b3\u30fc\u30d7\u304c\u4fbf\u5229\u306b\u306a\u3063\u3066\u307e\u3059\u3002\n\n```kotlin:kotlin\n// \u524d\u5224\u65ad\nwhile (x > 0) {\n\t\n}\n\n// \u5f8c\u5224\u65ad\ndo {\n\tval y = retrieveData()\n} while (y != null) // y\u304c\u898b\u3048\u308b\uff01\n```\n\n\n# \u7bc4\u56f2\u6307\u5b9a range\n```kotlin:kotlin\n// \uff58\u304c\uff11\u301c\uff110\nif(x in 1..10)\n\tprintln(\"ok\")\n\n// \uff58\u304c\uff11\u301c\uff110\u3058\u3083\u306a\u3044\nif(x !in 1..10)\n\tprintln(\"ng\")\n```\n\n\n# \u914d\u5217 array\n```kotlin:kotlin\n// \u304a\u597d\u307f\u3067\nval list = arrayOf(1, 2, 3)               // \u578b\u306f\u985e\u63a8\u3055\u308c\u308b\nval list = intArrayOf(1, 2, 3)            // int\u3067\nval list: Array<Int?> = arrayOfNulls(3)   // null\u306a\u8981\u7d20\u3092\uff13\u3063\u3064\n\nlist[0] = list[1] + list[2]       // \u5404\u8981\u7d20\u306f\u304a\u99b4\u67d3\u307f\u306e\u30ab\u30c3\u30b3\u3067\n\nfor(item in list){                // for\u30eb\u30fc\u30d7\u304f\u308b\u304f\u308b\n    println(item)\n}\n```\n\n\n# \u30b3\u30ec\u30af\u30b7\u30e7\u30f3 collection\n## list\n```kotlin:kotlin\nval list = listOf(1, 2, 3)\nlist[0] = list[1] + list[2]    // immutable\uff08\u5909\u66f4\u4e0d\u53ef\uff09\u30a8\u30e9\u30fc\n\nval list = mutableListOf(1, 2, 3)\nlist[0] = list[1] + list[2]    // mutalbe\uff08\u5909\u66f4\u53ef\u80fd\uff09\n```\n\n\n## map\n```kotlin:kotlin\nval list = mapOf(\n    1 to \"one\",\n    2 to \"two\",\n    3 to \"three\"\n)\n//for(item in list){\n//    println(\"${item.key} to ${item.value}\")\n//}\nfor((key, value) in list)\n    println(\"${key} to ${value}\")\n}\nprintln(list[1])\n```\n```text:\u7d50\u679c\n1 to one\n2 to two\n3 to three\none\n```\n\n\n# \u30c7\u30fc\u30bf\u30af\u30e9\u30b9 data class\n\u5024\u3092\u4fdd\u6301\u3059\u308b\u3060\u3051\u306e\u30af\u30e9\u30b9\u306a\u3089\u3053\u308c\u3067\u3002\u30af\u30e9\u30b9\u540d\u306e\u524d\u306bdata\u3092\u4ed8\u3051\u307e\u3059\u3002\n\n```kotlin:kotlin\ndata class User(val name: String = \"\", val age: Int = 0)\n```\n\u4f7f\u3044\u65b9\n\n```kotlin:kotlin\nval jack = User(name = \"Jack\", age = 1)  // jack\u3055\u3093\uff11\u6b73\nval olderJack = jack.copy(age = 2)       // jack\u3055\u3093\u306e\u540d\u524d\u306e\u307e\u307e\uff12\u6b73\u306e\u30b3\u30d4\u30fc\u3092\n\nval jane = User(\"Jane\", 35)  // jane\u3055\u3093\uff13\uff15\u6b73\nval (name, age) = jane       // jane\u3055\u3093\u306e\u540d\u524d\u3001\u5e74\u9f62\u3092GET\uff01\n```\n\ncopy\u7528\u306e\u95a2\u6570\u304c\u4f5c\u3089\u308c\u308b\u307f\u305f\u3044\n\n```kotlin:kotlin\nfun copy(name: String = this.name, age: Int = this.age) = User(name, age)\n```\n\n\n# enum\u30af\u30e9\u30b9\n```kotlin:kotlin\nenum class Direction {\n    NORTH, SOUTH, WEST, EAST\n}\n```\n\u5b9a\u7fa9\u3068\u521d\u671f\u5316\n\n```kotlin:kotlin\nenum class Color(val rgb: Int) {\n    RED(0xFF0000),\n    GREEN(0x00FF00),\n    BLUE(0x0000FF)\n}\n```\n\n\n# \u30b7\u30f3\u30b0\u30eb\u30c8\u30f3 singleton\n```kotlin:kotlin\nobject SingletonUser {\n    private var name: String = \"ssuzaki\"\n    \n    fun init(data: String) {\n        name = data\n    }\n    \n    fun put() {\n        println(\"${name}\")\n    }\n}\n\nfun main(args: Array<String>) {\n    SingletonUser.put()\n}\n```\n\n# \u30b3\u30f3\u30d1\u30cb\u30aa\u30f3\u30aa\u30d6\u30b8\u30a7\u30af\u30c8 companion\nstatic\u306e\u4ee3\u308f\u308a\u307f\u305f\u3044\u306a\u306e\n\n```kotlin:kotlin\nclass MyClass {\n    companion object { }\n}\n\nfun MyClass.Companion.foo() {\n    println(\"hoge\")\n}\n\nfun main(args: Array<String>) {\n\tMyClass.foo()\n}\n```\n\n\n# \u540c\u4e00 equality\n\u540c\u3058\u53c2\u7167\u5148\u304b===\u3067\u6bd4\u8f03\u3002\u9055\u3046\u53c2\u7167\u5148\u306f!==\n\n```kotlin:kotlin\nval taro = User(\"taro\", 10)\nval jiro = User(\"jiro\", 11)\n\nif(taro === jiro)\n\tprintln(\"taro equal jiro\")\n```\n\n\n# \u4f8b\u5916 Exceptions\n\u4f8b\u5916\u306f\u3059\u3079\u3066 Throwable \u306e\u5b50\u5b6b\u3067\u30e1\u30c3\u30bb\u30fc\u30b8\u3001\u30b9\u30bf\u30c3\u30af\u30c8\u30ec\u30fc\u30b9\u3092\u6301\u3061\n\u30aa\u30d7\u30b7\u30e7\u30f3\u3067\u539f\u56e0\u3092\u6301\u3061\u307e\u3059\u3002\n\n## \u4f8b\u5916\u3092\u6295\u3052\u308b throw\n\n```kotlin:kotlin\nthrow MyException(\"Hi There!\")\n```\n\n## \u4f8b\u5916\u3092\u6355\u6349\u3059\u308b try...catch...finally\n\n```kotlin:kotlin\ntry {\n    // some code\n} catch(e: SomeException) {\n    // handler\n} finally {\n    // optional finally block\n}\n```\n\n## try\u306f\u5f0f\u3067\u5024\u3092\u8fd4\u305b\u308b\n\n```kotlin:kotlin\nval a: Int? = try { parseInt(input) } catch (e: NumberFormatException) { null }\n```\n"}