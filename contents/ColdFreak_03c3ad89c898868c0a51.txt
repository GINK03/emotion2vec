{"tags": ["rebar", "Erlang"], "context": "Rebar\u3092\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\n$ git clone https://github.com/basho/rebar.git\n$ cd rebar && make\n\n\n\nRebar\u306e\u63d0\u4f9b\u3057\u3066\u3044\u308b\u30b3\u30de\u30f3\u30c9\u3092\u30c1\u30a7\u30c3\u30af\n$ ./rebar -c\n\nhelp\u3092\u898b\u305f\u3044\u3068\u304d\u306b\n$ rebar help clean\n==> help clean\n\n=== rebar_cleaner:clean ===\nDelete list of files.\n\nValid rebar.config options:\n  {clean_files,[\"file\",\"file2\"]}\n\n=== rebar_protobuffs_compiler:clean ===\nDelete Protobuffs (*.proto) build results.\n......\n\n\n\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u3092\u4f5c\u6210\n$ ./rebar create-app appid=mysample\n\n\u3053\u308c\u3067src/\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u304c\u4f5c\u6210\u3055\u308c\u308b\n$ tree -L 2\n.\n\u251c\u2500\u2500 rebar\n\u2514\u2500\u2500 src\n    \u251c\u2500\u2500 mysample_app.erl\n    \u251c\u2500\u2500 mysample.app.src\n    \u2514\u2500\u2500 mysample_sup.erl\n\n1 directory, 4 files\n\n\nRebar can fetch and build projects including source code from external sources (git, hg, etc.)\nIt is assumed that these dependencies are available in source form and adhere to the rebar conventions. Moreover, if a project's dependencies have their own dependencies, rebar fetches and builds these transitive dependencies recursively.\n\nDependencies are defined in the rebar.config file by the adding the deps tuple of the following form:\n{deps, [Dependency1, Dependency2, ...]}.\nEach dependency is defined by a triplet {App, VsnRegex, Source} \n{deps, [\n    {em, \".*\", {git, \"https://github.com/sheyll/erlymock.git\"}},\n    {nano_trace, \".*\", {git, \"https://github.com/sheyll/nano_trace.git\", {branch, \"feature/rebar-migration\"}}},\n    {mochiweb, \"2.3.2\", {git, \"https://github.com/mochi/mochiweb.git\", {tag, \"v2.3.2\"}}},\n    % Or specify a revision to refer a particular commit, useful if the project has only the master branch\n    % {mochiweb, \"2.3.2\", {git, \"https://github.com/mochi/mochiweb.git\", \"15bc558d8222b011e2588efbd86c01d68ad73e60\"},\n\n    % An example of a \"raw\" dependency:\n    {rebar, \".*\", {git, \"git://github.com/rebar/rebar.git\", {branch, \"master\"}}, [raw]}\n   ]}.\n\n\nCompile the application with:\n$ rebar compile\nA new directory ebin/ should now exist and contain the .beam files corresponding to the Erlang source files in the src/ directory. In addition, note the presence of the ebin/myapp.app file. Rebar has dynamically generated a proper OTP application specification using the src/myapp.app.src file as a template by adding information about all compiled Erlang modules of the application into the myapp.app file's modules section.\n\nrebar\u3067\u5358\u4f53\u30c6\u30b9\u30c8\u3059\u308b\u65b9\u6cd5\n$ rebar compile eunit\nAdd the following code into the src/myapp_app.erl(\u30a2\u30d7\u30ec\u30b1\u30fc\u30b7\u30e7\u30f3\u30d5\u30a1\u30a4\u30eb) file, right after the -export(...) directive:\n-ifdef(TEST).\n-include_lib(\"eunit/include/eunit.hrl\").\n-endif.\n\nand add the following block of code at the very end of of the file:\n-ifdef(TEST).\n\nsimple_test() ->\n    ok = application:start(myapp),\n    ?assertNot(undefined == whereis(myapp_sup)).\n\n-endif.\n\n\u3042\u308b\u3044\u306f\u95a2\u6570\u3092\u30c6\u30b9\u30c8\n-ifdef(TEST).\nrpn_test() ->\n    ?assertEqual(3, do_rpn(\"1 2 +\")),\n    ?assertEqual(2.0, do_rpn(\"4 2 /\")),\n    ?assertEqual(4, do_rpn(\"6 2 -\")).\n-endif.\n\n\n\n$ rebar list-templates\n==> wang (list-templates)\n  * simplesrv: priv/templates/simplesrv.template (escript) (variables: \"srvid\")\n  * simplenode: priv/templates/simplenode.template (escript) (variables: \"nodeid\")\n  * simplemod: priv/templates/simplemod.template (escript) (variables: \"modid\")\n  * simplelib: priv/templates/simplelib.template (escript) (variables: \"libid\")\n  * simplefsm: priv/templates/simplefsm.template (escript) (variables: \"fsmid\")\n  * simpleevent: priv/templates/simpleevent.template (escript) (variables: \"eventid\")\n  * simpleapp: priv/templates/simpleapp.template (escript) (variables: \"appid\")\n  * ctsuite: priv/templates/ctsuite.template (escript) (variables: \"testmod\")\n  * basicnif: priv/templates/basicnif.template (escript) (variables: \"module\")\n\n\n\n\nRebar\u3092\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\n\n```\n$ git clone https://github.com/basho/rebar.git\n$ cd rebar && make\n\n```\n---\n\nRebar\u306e\u63d0\u4f9b\u3057\u3066\u3044\u308b\u30b3\u30de\u30f3\u30c9\u3092\u30c1\u30a7\u30c3\u30af\n\n```\n$ ./rebar -c\n```\nhelp\u3092\u898b\u305f\u3044\u3068\u304d\u306b\n\n```erlang\n$ rebar help clean\n==> help clean\n\n=== rebar_cleaner:clean ===\nDelete list of files.\n\nValid rebar.config options:\n  {clean_files,[\"file\",\"file2\"]}\n\n=== rebar_protobuffs_compiler:clean ===\nDelete Protobuffs (*.proto) build results.\n......\n```\n---\n\n\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u3092\u4f5c\u6210\n\n```\n$ ./rebar create-app appid=mysample\n```\n\u3053\u308c\u3067src/\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u304c\u4f5c\u6210\u3055\u308c\u308b\n\n```\n$ tree -L 2\n.\n\u251c\u2500\u2500 rebar\n\u2514\u2500\u2500 src\n    \u251c\u2500\u2500 mysample_app.erl\n    \u251c\u2500\u2500 mysample.app.src\n    \u2514\u2500\u2500 mysample_sup.erl\n\n1 directory, 4 files\n```\n---\n\nRebar can fetch and build projects including source code from external sources (git, hg, etc.)\n\nIt is assumed that these dependencies are available in source form and adhere to the rebar conventions. Moreover, if a project's dependencies have their own dependencies, rebar fetches and builds these transitive dependencies recursively.\n\n---\n\nDependencies are defined in the `rebar.config` file by the adding the `deps` tuple of the following form:\n`{deps, [Dependency1, Dependency2, ...]}.`\nEach dependency is defined by a triplet {App, VsnRegex, Source} \n\n```erlang\n{deps, [\n    {em, \".*\", {git, \"https://github.com/sheyll/erlymock.git\"}},\n    {nano_trace, \".*\", {git, \"https://github.com/sheyll/nano_trace.git\", {branch, \"feature/rebar-migration\"}}},\n    {mochiweb, \"2.3.2\", {git, \"https://github.com/mochi/mochiweb.git\", {tag, \"v2.3.2\"}}},\n    % Or specify a revision to refer a particular commit, useful if the project has only the master branch\n    % {mochiweb, \"2.3.2\", {git, \"https://github.com/mochi/mochiweb.git\", \"15bc558d8222b011e2588efbd86c01d68ad73e60\"},\n\n    % An example of a \"raw\" dependency:\n    {rebar, \".*\", {git, \"git://github.com/rebar/rebar.git\", {branch, \"master\"}}, [raw]}\n   ]}.\n```\n\n---\n\nCompile the application with:\n`$ rebar compile`\nA new directory **ebin/** should now exist and contain the .beam files corresponding to the Erlang source files in the src/ directory. In addition, note the presence of the **ebin/myapp.app file. Rebar has dynamically generated a proper OTP application specification using the src/myapp.app.src** file as a template by adding information about all compiled Erlang modules of the application into the myapp.app file's modules section.\n\n---\n\nrebar\u3067\u5358\u4f53\u30c6\u30b9\u30c8\u3059\u308b\u65b9\u6cd5\n\n`$ rebar compile eunit`\n\nAdd the following code into the `src/myapp_app.erl`(\u30a2\u30d7\u30ec\u30b1\u30fc\u30b7\u30e7\u30f3\u30d5\u30a1\u30a4\u30eb) file, right after the -export(...) directive:\n\n```erlang\n-ifdef(TEST).\n-include_lib(\"eunit/include/eunit.hrl\").\n-endif.\n```\n\nand add the following block of code at the very end of of the file:\n\n```erlang\n-ifdef(TEST).\n\nsimple_test() ->\n    ok = application:start(myapp),\n    ?assertNot(undefined == whereis(myapp_sup)).\n\n-endif.\n```\n\n\u3042\u308b\u3044\u306f\u95a2\u6570\u3092\u30c6\u30b9\u30c8\n\n```erlang\n-ifdef(TEST).\nrpn_test() ->\n    ?assertEqual(3, do_rpn(\"1 2 +\")),\n    ?assertEqual(2.0, do_rpn(\"4 2 /\")),\n    ?assertEqual(4, do_rpn(\"6 2 -\")).\n-endif.\n```\n---\n\n```erlang\n\n$ rebar list-templates\n==> wang (list-templates)\n  * simplesrv: priv/templates/simplesrv.template (escript) (variables: \"srvid\")\n  * simplenode: priv/templates/simplenode.template (escript) (variables: \"nodeid\")\n  * simplemod: priv/templates/simplemod.template (escript) (variables: \"modid\")\n  * simplelib: priv/templates/simplelib.template (escript) (variables: \"libid\")\n  * simplefsm: priv/templates/simplefsm.template (escript) (variables: \"fsmid\")\n  * simpleevent: priv/templates/simpleevent.template (escript) (variables: \"eventid\")\n  * simpleapp: priv/templates/simpleapp.template (escript) (variables: \"appid\")\n  * ctsuite: priv/templates/ctsuite.template (escript) (variables: \"testmod\")\n  * basicnif: priv/templates/basicnif.template (escript) (variables: \"module\")\n\n\n\n```\n"}