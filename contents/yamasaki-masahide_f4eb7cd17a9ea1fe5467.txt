{"context": " More than 1 year has passed since last update.\n\n\u6982\u8981\ngoogle\u30ab\u30ec\u30f3\u30c0\u30fc\u3092golang\u3067\u53d6\u5f97\u3001\u8ffd\u52a0\u3001\u66f4\u65b0\u3092\u3084\u3063\u3066\u307f\u307e\u3059\u3002\nGoolge Calendar API v3\u3092\u4f7f\u3046\u306e\u3067\u3059\u304c\u3001OAuth\u306a\u306e\u3067\u3001\u307e\u305a\u4ee5\u4e0b\u306e\u524d\u6e96\u5099\u304c\u5fc5\u8981\u3067\u3059\u3002\n\ngoogle API\u306e Client ID\u306e\u53d6\u5f97\nOAuth\u8a8d\u8a3c\u3067\u30a2\u30af\u30bb\u30b9\u30c8\u30fc\u30af\u30f3\u3092\u53d6\u5f97\u3059\u308b\n\n\u305f\u3060\u3057\u3001\u30a2\u30af\u30bb\u30b9\u30c8\u30fc\u30af\u30f3\u306e\u53d6\u5f97\u90e8\u5206\u306f\ngoauth2\u306e\u8a8d\u8a3c\u624b\u9806\u3092\u3082\u3063\u3068\u7c21\u5358\u306b\u3092\u53c2\u8003\u306b\u3001\u30d7\u30ed\u30b0\u30e9\u30e0\u5074\u3067\u4f5c\u308a\u307e\u3057\u305f\u3002\n\n\u74b0\u5883\n\nOS X 10.9 (or Windows7 \u307e\u3060\u52d5\u4f5c\u78ba\u8a8d\u3057\u3066\u3044\u306a\u3044\u3051\u3069\u3001\u591a\u5c11\u306e\u624b\u76f4\u3057\u3067\u52d5\u304f\u306f\u305a)\ngolang 1.3\n\n\ngoogle API Client ID\u306e\u53d6\u5f97\n\nhttps://console.developers.google.com/project \u304b\u3089\u3001\nCreate Project\u3092\u30af\u30ea\u30c3\u30af\n\u305d\u308c\u305e\u308c\u9069\u5f53\u306a\u540d\u524d\u3092\u3064\u3051\u3066Create\n\nProject Dashboard\u304b\u3089 Enable an API\nCalendar API\u306eStatus\u3092ON\u306b\n\n\u5de6\u306e\u30e1\u30cb\u30e5\u30fc\u306eCredentials\u304b\u3089 Create new Client ID\n\nInstalled application\u3068Other\u3092\u9078\u629e\u3057Create Client ID\n\n\u300cClient ID for native application\u300d\u306eDownload JSON\u304b\u3089Client Secret\u3092\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\n\n\n\n2. OAuth\u8a8d\u8a3c\u3067\u30a2\u30af\u30bb\u30b9\u30c8\u30fc\u30af\u30f3\u3092\u53d6\u5f97\u3059\u308b\ngoauth2\u306e\u8a8d\u8a3c\u624b\u9806\u3092\u3082\u3063\u3068\u7c21\u5358\u306b\u3092\u53c2\u8003\u306b\u3001\u4ee5\u4e0b\u306e\u624b\u9806\u3092\u81ea\u52d5\u51e6\u7406\u3057\u307e\u3059\u3002\n\n\u30ea\u30c0\u30a4\u30ec\u30af\u30c8\u5148\u3068\u306a\u308blocalhost\u306bhttp\u30b5\u30fc\u30d0\u30fc\u3092\u8d77\u52d5\nClientID\u3068ClientSecret\u3092\u4f7f\u3063\u3066\u3001\u8a8d\u8a3c\u30da\u30fc\u30b8URL\u3092\u751f\u6210\n\u30d6\u30e9\u30a6\u30b6\u3092\u8d77\u52d5\u3057\u8a8d\u8a3c\u30da\u30fc\u30b8\u306eURL\u3092\u958b\u304f\nID/Pass\u306e\u5165\u529b(\u3053\u3053\u306f\u624b\u52d5)\n\u30d6\u30e9\u30a6\u30b6\u306e\u30ea\u30c0\u30a4\u30ec\u30af\u30c8\u3067\u3001localhost\u306b\u5e30\u3063\u3066\u304d\u305fGET\u30ea\u30af\u30a8\u30b9\u30c8\u304b\u3089\u8a8d\u8a3c\u30b3\u30fc\u30c9\u3092\u53d6\u5f97\n\n\nlib/google-auth.go\npackage lib\n\nimport (\n    \"fmt\"\n    \"net\"\n    \"net/http\"\n    \"os/exec\"\n    \"strings\"\n    \"time\"\n\n    \"code.google.com/p/goauth2/oauth\"\n)\n\ntype LocalServerConfig struct {\n    Port    int\n    Timeout int\n    OS      string\n}\n\ntype RedirectResult struct {\n    Code string\n    Err  error\n}\n\ntype Redirect struct {\n    Result      chan RedirectResult\n    ServerStart chan bool\n    ServerStop  chan bool\n    Listener    net.Listener\n}\n\n// \u5404\u7a2eOS\u3067\u306e\u30d6\u30e9\u30a6\u30b6\u8d77\u52d5\u30b3\u30de\u30f3\u30c9\u3068URL\u306e\u30a8\u30b9\u30b1\u30fc\u30d7\u30b3\u30fc\u30c9\u7f6e\u63db\u6587\u5b57\u5217\ntype OpenBrowser struct {\n    EscapeAnd string\n    arg       []string\n}\nvar openBrowser = map[string]OpenBrowser{\n    \"windows\": {`&`, []string{\"cmd\", \"/c\", \"start\"}},\n    \"darwin\":  {`&`, []string{\"open\", \"-a\", \"safari\"}},\n    \"test1\":   {`&`, []string{\"echo\", \"\", \"\"}},\n    \"test2\":   {`&`, []string{\"fugafuga\", \"\", \"\"}},\n}\n\nfunc NewRedirect(result chan RedirectResult) *Redirect {\n    return &Redirect{result, make(chan bool, 1), make(chan bool, 1), nil}\n}\n\ntype AuthToken interface {\n    GetTokenCache() error\n    GetAuthCodeURL() string\n    GetAuthToken(string) error\n}\n\ntype GoogleToken struct {\n    Transport *oauth.Transport\n}\n\n// \u30c6\u30b9\u30c8\u3057\u3084\u3059\u3044\u3088\u3046\u306bAuth\u7cfbAPI\u3092\u96a0\u853d\u3059\u308b\nfunc (this *GoogleToken) GetTokenCache() error {\n    _, err := this.Transport.Config.TokenCache.Token()\n    return err\n}\nfunc (this *GoogleToken) GetAuthCodeURL() string {\n    return this.Transport.Config.AuthCodeURL(\"\")\n}\nfunc (this *GoogleToken) GetAuthToken(code string) error {\n    _, err := this.Transport.Exchange(code)\n    return err\n}\n\n// \u30a2\u30af\u30bb\u30b9\u30c8\u30fc\u30af\u30f3\u3092\u53d6\u5f97\nfunc GoogleOauth(transport AuthToken, localServerConfig LocalServerConfig) (err error) {\n\n    // \u30ad\u30e3\u30c3\u30b7\u30e5\u304b\u3089\u30c8\u30fc\u30af\u30f3\u30d5\u30a1\u30a4\u30eb\u3092\u53d6\u5f97\n    err = transport.GetTokenCache()\n    if err == nil {\n        return\n    }\n    url := transport.GetAuthCodeURL()\n    code, err := getAuthCode(url, localServerConfig)\n    if err != nil {\n        err = fmt.Errorf(\"Error getAuthCode: %#v\", err)\n        return\n    }\n    // \u8a8d\u8a3c\u30c8\u30fc\u30af\u30f3\u3092\u53d6\u5f97\u3059\u308b\u3002\uff08\u53d6\u5f97\u5f8c\u3001\u30ad\u30e3\u30c3\u30b7\u30e5\u3078\uff09\n    err = transport.GetAuthToken(code)\n    if err != nil {\n        err = fmt.Errorf(\"Exchange: %#v\", err)\n    }\n    return\n}\n\n// \u30a2\u30af\u30bb\u30b9\u30b3\u30fc\u30c9\u53d6\u5f97\nfunc (this *Redirect) GetCode(w http.ResponseWriter, r *http.Request) {\n    //defer this.Listener.Stop()\n    code := r.URL.Query().Get(\"code\")\n\n    if code == \"\" {\n        fmt.Fprintf(w, `Erorr`)\n        this.Result <- RedirectResult{Err: fmt.Errorf(\"code\u3092\u53d6\u5f97\u3067\u304d\u307e\u305b\u3093\u3067\u3057\u305f\u3002\")}\n        return\n    }\n\n    fmt.Fprintf(w, `<!doctype html> <html lang=\"ja\"> <head> <meta charset=\"utf-8\"> </head>\n            <body onload=\"window.open('about:blank','_self').close();\">\u30d6\u30e9\u30a6\u30b6\u304c\u81ea\u52d5\u3067\u9589\u3058\u306a\u3044\u5834\u5408\u306f\u624b\u52d5\u3067\u9589\u3058\u3066\u304f\u3060\u3055\u3044\u3002</body>\n            </html> `)\n    this.Result <- RedirectResult{Code: code}\n}\n\n// localhost\u306ehttp\u30b5\u30fc\u30d0\u30fc\nfunc (this *Redirect) Server(port int) {\n    mux := http.NewServeMux()\n    mux.HandleFunc(\"/\", this.GetCode)\n    host := fmt.Sprintf(\"localhost:%d\", port)\n    fmt.Printf(\"Start Listen: %s\\n\", host)\n    var err error\n    this.Listener, err = net.Listen(\"tcp\", host)\n    if err != nil {\n        this.Result <- RedirectResult{Err: err}\n        return\n    }\n    server := http.Server{}\n    server.Handler = mux\n    go server.Serve(this.Listener)\n    this.ServerStart <- true\n    <-this.ServerStop\n    this.Listener.Close()\n    this.Result <- RedirectResult{Err: err}\n    return\n}\nfunc (this *Redirect) Stop() {\n    this.ServerStop <- true\n}\n\n// \u30b5\u30fc\u30d0\u30fc\u8d77\u52d5 -> \u30d6\u30e9\u30a6\u30b6\u8d77\u52d5 -> \u30b3\u30fc\u30c9\u53d6\u5f97\nfunc getAuthCode(url string, localServerConfig LocalServerConfig) (string, error) {\n\n    var cmd *exec.Cmd\n\n    //os := runtime.GOOS\n    os := localServerConfig.OS\n    var browser *OpenBrowser\n    for key, value := range openBrowser {\n        if os == key {\n            browser = &value\n            break\n        }\n    }\n    if browser == nil {\n        return \"\", fmt.Errorf(\"\u307e\u3060\u672a\u5bfe\u5fdc\u3067\u3059\u30fb\u30fb\u30fb\\n%s\\n\", url)\n    }\n\n    redirect := NewRedirect(make(chan RedirectResult, 1))\n    go redirect.Server(localServerConfig.Port)\n\n    // set redirect timeout\n    redirectTimeout := time.After(time.Duration(localServerConfig.Timeout) * time.Second)\n    <-redirect.ServerStart\n\n    url = strings.Replace(url, \"&\", browser.EscapeAnd, -1)\n    // \u30d6\u30e9\u30a6\u30b6\u8d77\u52d5\n\n    //fmt.Printf(\"%v %v %v %v\", browser.arg[0], browser.arg[1], browser.arg[2], url)\n    cmd = exec.Command(browser.arg[0], browser.arg[1], browser.arg[2], url)\n    if err := cmd.Start(); err != nil {\n        return \"\", fmt.Errorf(\"Error:  start browser: %v, browser: %v\\n\", err, browser)\n    }\n\n    defer redirect.Stop()\n    var result RedirectResult\n\n    select {\n    case result = <-redirect.Result:\n        //\u30d6\u30e9\u30a6\u30b6\u5074\u306e\u5fdc\u7b54\u304c\u3042\u308c\u3070\u306a\u306b\u3082\u3057\u306a\u3044\n    case <-redirectTimeout:\n        // \u30bf\u30a4\u30e0\u30a2\u30a6\u30c8\n        return \"\", fmt.Errorf(\"\u30ea\u30c0\u30a4\u30ec\u30af\u30c8\u5f85\u3061\u6642\u9593\u304c\u30bf\u30a4\u30e0\u30a2\u30a6\u30c8\u3057\u307e\u3057\u305f\")\n    }\n\n    if result.Err != nil {\n        return \"\", fmt.Errorf(\"Error: \u30ea\u30c0\u30a4\u30ec\u30af\u30c8: %v\\n\", result.Err)\n    }\n\n    fmt.Printf(\"code: %v\\n\", result.Code)\n\n    return result.Code, nil\n}\n\n\n\nCalendar API\u3092\u53e9\u304f\n\u4e8b\u524d\u306b console.developers.google.com\u304b\u3089Download JSON\u3067\u4fdd\u5b58\u3057\u305f\u30d5\u30a1\u30a4\u30eb\u3092google.json \u3068\u3057\u3066\u30ab\u30ec\u30f3\u30c8\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u306b\u4fdd\u5b58\u3057\u3066\u304a\u304f\u3002\n\nmain.go\npackage main\n\nimport (\n    \"flag\"\n    \"fmt\"\n    \"log\"\n    \"runtime\"\n\n    \"code.google.com/p/goauth2/oauth\"\n    \"github.com/masahide/get-cybozu-schedule/lib\"\n)\n\nfunc main() {\n\n    flag.Usage = lib.Usage\n    flag.Parse()\n\n    if *lib.Version {\n        fmt.Printf(\"%s\\n\", lib.ShowVersion())\n        return\n    }\n\n    // ClientID\u7b49\u3092\u8aad\u307f\u8fbc\u3080\n    config, err := lib.Parse(\"google.json\")\n    if err != nil {\n        log.Fatalf(\"Error Server: %v\", err)\n        return\n    }\n\n\n    port := 3000\n    transport := oauth.Transport{\n        Config: &oauth.Config{\n            ClientId:     config.Installed.ClientID,\n            ClientSecret: config.Installed.ClientSecret,\n            RedirectURL:  fmt.Sprintf(\"%s:%d\", \"http://localhost\", port),\n            Scope:        \"https://www.googleapis.com/auth/calendar\",\n            AuthURL:      config.Installed.AuthURL,\n            TokenURL:     config.Installed.TokenURL,\n            TokenCache:   oauth.CacheFile(\"cache.json\"),\n        },\n    }\n\n    // OAuth\u3092\u5b9f\u884c\n    err = lib.GoogleOauth(&lib.GoogleToken{&transport}, lib.LocalServerConfig{port, 30, runtime.GOOS})\n    if err != nil {\n        log.Fatalf(\"Error Server: %v\", err)\n        return\n    }\n\n    // \u3053\u3053\u304b\u3089\u3084\u3063\u3068\u30ab\u30ec\u30f3\u30c0\u30fcAPI\u3092\u4f7f\u3044\u59cb\u3081\u308b\n    svc, err := calendar.New(transport.Client())\n    if err != nil {\n        log.Fatalf(\"Error calendar.New: %v\", err)\n        return\n    }\n\n    // \u30ab\u30ec\u30f3\u30c0\u30fc\u4e00\u89a7\u3092\u53d6\u5f97\n    cl, err := svc.CalendarList.List().Do()\n    if err != nil {\n        log.Fatalf(\"Error CalendarList.List(): %v\", err)\n        return\n    }\n\n    fmt.Printf(\"--- Your calendars ---\\n\")\n    for _, item := range cl.Items {\n        fmt.Printf(\"%# v\\n\", item)\n    }\n\n}\n\n\n\n\n\u6982\u8981\n----\n\ngoogle\u30ab\u30ec\u30f3\u30c0\u30fc\u3092golang\u3067\u53d6\u5f97\u3001\u8ffd\u52a0\u3001\u66f4\u65b0\u3092\u3084\u3063\u3066\u307f\u307e\u3059\u3002\n[Goolge Calendar API v3](https://godoc.org/code.google.com/p/google-api-go-client/calendar/v3)\u3092\u4f7f\u3046\u306e\u3067\u3059\u304c\u3001OAuth\u306a\u306e\u3067\u3001\u307e\u305a\u4ee5\u4e0b\u306e\u524d\u6e96\u5099\u304c\u5fc5\u8981\u3067\u3059\u3002\n\n1. google API\u306e Client ID\u306e\u53d6\u5f97\n1. OAuth\u8a8d\u8a3c\u3067\u30a2\u30af\u30bb\u30b9\u30c8\u30fc\u30af\u30f3\u3092\u53d6\u5f97\u3059\u308b\n\n\u305f\u3060\u3057\u3001\u30a2\u30af\u30bb\u30b9\u30c8\u30fc\u30af\u30f3\u306e\u53d6\u5f97\u90e8\u5206\u306f\n[goauth2\u306e\u8a8d\u8a3c\u624b\u9806\u3092\u3082\u3063\u3068\u7c21\u5358\u306b](http://d.hatena.ne.jp/taknb2nch/20140226/1393394578)\u3092\u53c2\u8003\u306b\u3001\u30d7\u30ed\u30b0\u30e9\u30e0\u5074\u3067\u4f5c\u308a\u307e\u3057\u305f\u3002\n\n\n\u74b0\u5883\n----\n\n* OS X 10.9 (or Windows7 \u307e\u3060\u52d5\u4f5c\u78ba\u8a8d\u3057\u3066\u3044\u306a\u3044\u3051\u3069\u3001\u591a\u5c11\u306e\u624b\u76f4\u3057\u3067\u52d5\u304f\u306f\u305a)\n* golang 1.3\n\n\ngoogle API Client ID\u306e\u53d6\u5f97\n---------------------\n\n\n1. https://console.developers.google.com/project \u304b\u3089\u3001\n```Create Project```\u3092\u30af\u30ea\u30c3\u30af\n\u305d\u308c\u305e\u308c\u9069\u5f53\u306a\u540d\u524d\u3092\u3064\u3051\u3066```Create```\n![New Project](https://qiita-image-store.s3.amazonaws.com/0/26566/5609ac59-fc03-acff-e591-ac38f62ea882.png \"\u30b9\u30af\u30ea\u30fc\u30f3\u30b7\u30e7\u30c3\u30c8 2014-07-19 2.33.54.png\")\n\n2. Project Dashboard\u304b\u3089 ```Enable an API```\nCalendar API\u306eStatus\u3092```ON```\u306b\n![API status](https://qiita-image-store.s3.amazonaws.com/0/26566/df70a809-a833-cb34-b3a7-707d62f0f5c9.png \"\u30b9\u30af\u30ea\u30fc\u30f3\u30b7\u30e7\u30c3\u30c8 2014-07-19 2.40.22.png\")\n\n3. \u5de6\u306e\u30e1\u30cb\u30e5\u30fc\u306e```Credentials```\u304b\u3089 ```Create new Client ID```\n![Credentials](https://qiita-image-store.s3.amazonaws.com/0/26566/9e38ea9e-473a-4caf-1de2-05265bdd069d.png \"\u30b9\u30af\u30ea\u30fc\u30f3\u30b7\u30e7\u30c3\u30c8 2014-07-19 2.42.33.png\")\n```Installed application```\u3068```Other```\u3092\u9078\u629e\u3057```Create Client ID```\n![Create Client ID](https://qiita-image-store.s3.amazonaws.com/0/26566/99c3ccca-0e7c-5dfd-5a09-7a33f59b0198.png \"\u30b9\u30af\u30ea\u30fc\u30f3\u30b7\u30e7\u30c3\u30c8 2014-07-19 2.47.20.png\")\n\n4. \u300cClient ID for native application\u300d\u306e```Download JSON```\u304b\u3089Client Secret\u3092\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\n![Download JSON](https://qiita-image-store.s3.amazonaws.com/0/26566/64a91876-da0f-b29a-63af-26c1bc131c2b.png \"\u30b9\u30af\u30ea\u30fc\u30f3\u30b7\u30e7\u30c3\u30c8 2014-07-19 2.50.43.png\")\n\n2. OAuth\u8a8d\u8a3c\u3067\u30a2\u30af\u30bb\u30b9\u30c8\u30fc\u30af\u30f3\u3092\u53d6\u5f97\u3059\u308b\n-----------------------------------\n\n[goauth2\u306e\u8a8d\u8a3c\u624b\u9806\u3092\u3082\u3063\u3068\u7c21\u5358\u306b](http://d.hatena.ne.jp/taknb2nch/20140226/1393394578)\u3092\u53c2\u8003\u306b\u3001\u4ee5\u4e0b\u306e\u624b\u9806\u3092\u81ea\u52d5\u51e6\u7406\u3057\u307e\u3059\u3002\n\n1. \u30ea\u30c0\u30a4\u30ec\u30af\u30c8\u5148\u3068\u306a\u308blocalhost\u306bhttp\u30b5\u30fc\u30d0\u30fc\u3092\u8d77\u52d5\n1. ClientID\u3068ClientSecret\u3092\u4f7f\u3063\u3066\u3001\u8a8d\u8a3c\u30da\u30fc\u30b8URL\u3092\u751f\u6210\n1. \u30d6\u30e9\u30a6\u30b6\u3092\u8d77\u52d5\u3057\u8a8d\u8a3c\u30da\u30fc\u30b8\u306eURL\u3092\u958b\u304f\n1. ID/Pass\u306e\u5165\u529b(\u3053\u3053\u306f\u624b\u52d5)\n1. \u30d6\u30e9\u30a6\u30b6\u306e\u30ea\u30c0\u30a4\u30ec\u30af\u30c8\u3067\u3001localhost\u306b\u5e30\u3063\u3066\u304d\u305fGET\u30ea\u30af\u30a8\u30b9\u30c8\u304b\u3089\u8a8d\u8a3c\u30b3\u30fc\u30c9\u3092\u53d6\u5f97\n\n```go:lib/google-auth.go\npackage lib\n\nimport (\n\t\"fmt\"\n\t\"net\"\n\t\"net/http\"\n\t\"os/exec\"\n\t\"strings\"\n\t\"time\"\n\n\t\"code.google.com/p/goauth2/oauth\"\n)\n\ntype LocalServerConfig struct {\n\tPort    int\n\tTimeout int\n\tOS      string\n}\n\ntype RedirectResult struct {\n\tCode string\n\tErr  error\n}\n\ntype Redirect struct {\n\tResult      chan RedirectResult\n\tServerStart chan bool\n\tServerStop  chan bool\n\tListener    net.Listener\n}\n\n// \u5404\u7a2eOS\u3067\u306e\u30d6\u30e9\u30a6\u30b6\u8d77\u52d5\u30b3\u30de\u30f3\u30c9\u3068URL\u306e\u30a8\u30b9\u30b1\u30fc\u30d7\u30b3\u30fc\u30c9\u7f6e\u63db\u6587\u5b57\u5217\ntype OpenBrowser struct {\n\tEscapeAnd string\n\targ       []string\n}\nvar openBrowser = map[string]OpenBrowser{\n\t\"windows\": {`&`, []string{\"cmd\", \"/c\", \"start\"}},\n\t\"darwin\":  {`&`, []string{\"open\", \"-a\", \"safari\"}},\n\t\"test1\":   {`&`, []string{\"echo\", \"\", \"\"}},\n\t\"test2\":   {`&`, []string{\"fugafuga\", \"\", \"\"}},\n}\n\nfunc NewRedirect(result chan RedirectResult) *Redirect {\n\treturn &Redirect{result, make(chan bool, 1), make(chan bool, 1), nil}\n}\n\ntype AuthToken interface {\n\tGetTokenCache() error\n\tGetAuthCodeURL() string\n\tGetAuthToken(string) error\n}\n\ntype GoogleToken struct {\n\tTransport *oauth.Transport\n}\n\n// \u30c6\u30b9\u30c8\u3057\u3084\u3059\u3044\u3088\u3046\u306bAuth\u7cfbAPI\u3092\u96a0\u853d\u3059\u308b\nfunc (this *GoogleToken) GetTokenCache() error {\n\t_, err := this.Transport.Config.TokenCache.Token()\n\treturn err\n}\nfunc (this *GoogleToken) GetAuthCodeURL() string {\n\treturn this.Transport.Config.AuthCodeURL(\"\")\n}\nfunc (this *GoogleToken) GetAuthToken(code string) error {\n\t_, err := this.Transport.Exchange(code)\n\treturn err\n}\n\n// \u30a2\u30af\u30bb\u30b9\u30c8\u30fc\u30af\u30f3\u3092\u53d6\u5f97\nfunc GoogleOauth(transport AuthToken, localServerConfig LocalServerConfig) (err error) {\n\n\t// \u30ad\u30e3\u30c3\u30b7\u30e5\u304b\u3089\u30c8\u30fc\u30af\u30f3\u30d5\u30a1\u30a4\u30eb\u3092\u53d6\u5f97\n\terr = transport.GetTokenCache()\n\tif err == nil {\n\t\treturn\n\t}\n\turl := transport.GetAuthCodeURL()\n\tcode, err := getAuthCode(url, localServerConfig)\n\tif err != nil {\n\t\terr = fmt.Errorf(\"Error getAuthCode: %#v\", err)\n\t\treturn\n\t}\n\t// \u8a8d\u8a3c\u30c8\u30fc\u30af\u30f3\u3092\u53d6\u5f97\u3059\u308b\u3002\uff08\u53d6\u5f97\u5f8c\u3001\u30ad\u30e3\u30c3\u30b7\u30e5\u3078\uff09\n\terr = transport.GetAuthToken(code)\n\tif err != nil {\n\t\terr = fmt.Errorf(\"Exchange: %#v\", err)\n\t}\n\treturn\n}\n\n// \u30a2\u30af\u30bb\u30b9\u30b3\u30fc\u30c9\u53d6\u5f97\nfunc (this *Redirect) GetCode(w http.ResponseWriter, r *http.Request) {\n\t//defer this.Listener.Stop()\n\tcode := r.URL.Query().Get(\"code\")\n\n\tif code == \"\" {\n\t\tfmt.Fprintf(w, `Erorr`)\n\t\tthis.Result <- RedirectResult{Err: fmt.Errorf(\"code\u3092\u53d6\u5f97\u3067\u304d\u307e\u305b\u3093\u3067\u3057\u305f\u3002\")}\n\t\treturn\n\t}\n\n\tfmt.Fprintf(w, `<!doctype html> <html lang=\"ja\"> <head> <meta charset=\"utf-8\"> </head>\n\t\t\t<body onload=\"window.open('about:blank','_self').close();\">\u30d6\u30e9\u30a6\u30b6\u304c\u81ea\u52d5\u3067\u9589\u3058\u306a\u3044\u5834\u5408\u306f\u624b\u52d5\u3067\u9589\u3058\u3066\u304f\u3060\u3055\u3044\u3002</body>\n\t\t\t</html> `)\n\tthis.Result <- RedirectResult{Code: code}\n}\n\n// localhost\u306ehttp\u30b5\u30fc\u30d0\u30fc\nfunc (this *Redirect) Server(port int) {\n\tmux := http.NewServeMux()\n\tmux.HandleFunc(\"/\", this.GetCode)\n\thost := fmt.Sprintf(\"localhost:%d\", port)\n\tfmt.Printf(\"Start Listen: %s\\n\", host)\n\tvar err error\n\tthis.Listener, err = net.Listen(\"tcp\", host)\n\tif err != nil {\n\t\tthis.Result <- RedirectResult{Err: err}\n\t\treturn\n\t}\n\tserver := http.Server{}\n\tserver.Handler = mux\n\tgo server.Serve(this.Listener)\n\tthis.ServerStart <- true\n\t<-this.ServerStop\n\tthis.Listener.Close()\n\tthis.Result <- RedirectResult{Err: err}\n\treturn\n}\nfunc (this *Redirect) Stop() {\n\tthis.ServerStop <- true\n}\n\n// \u30b5\u30fc\u30d0\u30fc\u8d77\u52d5 -> \u30d6\u30e9\u30a6\u30b6\u8d77\u52d5 -> \u30b3\u30fc\u30c9\u53d6\u5f97\nfunc getAuthCode(url string, localServerConfig LocalServerConfig) (string, error) {\n\n\tvar cmd *exec.Cmd\n\n\t//os := runtime.GOOS\n\tos := localServerConfig.OS\n\tvar browser *OpenBrowser\n\tfor key, value := range openBrowser {\n\t\tif os == key {\n\t\t\tbrowser = &value\n\t\t\tbreak\n\t\t}\n\t}\n\tif browser == nil {\n\t\treturn \"\", fmt.Errorf(\"\u307e\u3060\u672a\u5bfe\u5fdc\u3067\u3059\u30fb\u30fb\u30fb\\n%s\\n\", url)\n\t}\n\n\tredirect := NewRedirect(make(chan RedirectResult, 1))\n\tgo redirect.Server(localServerConfig.Port)\n\n\t// set redirect timeout\n\tredirectTimeout := time.After(time.Duration(localServerConfig.Timeout) * time.Second)\n\t<-redirect.ServerStart\n\n\turl = strings.Replace(url, \"&\", browser.EscapeAnd, -1)\n\t// \u30d6\u30e9\u30a6\u30b6\u8d77\u52d5\n\n\t//fmt.Printf(\"%v %v %v %v\", browser.arg[0], browser.arg[1], browser.arg[2], url)\n\tcmd = exec.Command(browser.arg[0], browser.arg[1], browser.arg[2], url)\n\tif err := cmd.Start(); err != nil {\n\t\treturn \"\", fmt.Errorf(\"Error:  start browser: %v, browser: %v\\n\", err, browser)\n\t}\n\n\tdefer redirect.Stop()\n\tvar result RedirectResult\n\n\tselect {\n\tcase result = <-redirect.Result:\n\t\t//\u30d6\u30e9\u30a6\u30b6\u5074\u306e\u5fdc\u7b54\u304c\u3042\u308c\u3070\u306a\u306b\u3082\u3057\u306a\u3044\n\tcase <-redirectTimeout:\n\t\t// \u30bf\u30a4\u30e0\u30a2\u30a6\u30c8\n\t\treturn \"\", fmt.Errorf(\"\u30ea\u30c0\u30a4\u30ec\u30af\u30c8\u5f85\u3061\u6642\u9593\u304c\u30bf\u30a4\u30e0\u30a2\u30a6\u30c8\u3057\u307e\u3057\u305f\")\n\t}\n\n\tif result.Err != nil {\n\t\treturn \"\", fmt.Errorf(\"Error: \u30ea\u30c0\u30a4\u30ec\u30af\u30c8: %v\\n\", result.Err)\n\t}\n\n\tfmt.Printf(\"code: %v\\n\", result.Code)\n\n\treturn result.Code, nil\n}\n```\n\nCalendar API\u3092\u53e9\u304f\n-----------------\n\n\u4e8b\u524d\u306b console.developers.google.com\u304b\u3089```Download JSON```\u3067\u4fdd\u5b58\u3057\u305f\u30d5\u30a1\u30a4\u30eb\u3092```google.json``` \u3068\u3057\u3066\u30ab\u30ec\u30f3\u30c8\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u306b\u4fdd\u5b58\u3057\u3066\u304a\u304f\u3002\n\n\n\n```go:main.go\npackage main\n\nimport (\n\t\"flag\"\n\t\"fmt\"\n\t\"log\"\n\t\"runtime\"\n\n\t\"code.google.com/p/goauth2/oauth\"\n\t\"github.com/masahide/get-cybozu-schedule/lib\"\n)\n\nfunc main() {\n\n\tflag.Usage = lib.Usage\n\tflag.Parse()\n\n\tif *lib.Version {\n\t\tfmt.Printf(\"%s\\n\", lib.ShowVersion())\n\t\treturn\n\t}\n\n\t// ClientID\u7b49\u3092\u8aad\u307f\u8fbc\u3080\n\tconfig, err := lib.Parse(\"google.json\")\n\tif err != nil {\n\t\tlog.Fatalf(\"Error Server: %v\", err)\n\t\treturn\n\t}\n\t\n\n\tport := 3000\n\ttransport := oauth.Transport{\n\t\tConfig: &oauth.Config{\n\t\t\tClientId:     config.Installed.ClientID,\n\t\t\tClientSecret: config.Installed.ClientSecret,\n\t\t\tRedirectURL:  fmt.Sprintf(\"%s:%d\", \"http://localhost\", port),\n\t\t\tScope:        \"https://www.googleapis.com/auth/calendar\",\n\t\t\tAuthURL:      config.Installed.AuthURL,\n\t\t\tTokenURL:     config.Installed.TokenURL,\n\t\t\tTokenCache:   oauth.CacheFile(\"cache.json\"),\n\t\t},\n\t}\n\t\n\t// OAuth\u3092\u5b9f\u884c\n\terr = lib.GoogleOauth(&lib.GoogleToken{&transport}, lib.LocalServerConfig{port, 30, runtime.GOOS})\n\tif err != nil {\n\t\tlog.Fatalf(\"Error Server: %v\", err)\n\t\treturn\n\t}\n\n\t// \u3053\u3053\u304b\u3089\u3084\u3063\u3068\u30ab\u30ec\u30f3\u30c0\u30fcAPI\u3092\u4f7f\u3044\u59cb\u3081\u308b\n\tsvc, err := calendar.New(transport.Client())\n\tif err != nil {\n\t\tlog.Fatalf(\"Error calendar.New: %v\", err)\n\t\treturn\n\t}\n\n\t// \u30ab\u30ec\u30f3\u30c0\u30fc\u4e00\u89a7\u3092\u53d6\u5f97\n\tcl, err := svc.CalendarList.List().Do()\n\tif err != nil {\n\t\tlog.Fatalf(\"Error CalendarList.List(): %v\", err)\n\t\treturn\n\t}\n\n\tfmt.Printf(\"--- Your calendars ---\\n\")\n\tfor _, item := range cl.Items {\n\t\tfmt.Printf(\"%# v\\n\", item)\n\t}\n\n}\n```\n\n\n", "tags": ["google", "golang1.3", "Go1.3"]}