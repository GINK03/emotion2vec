{"context": " More than 1 year has passed since last update.\n\nSubject\nSubject\u306f\u3001IObserver<T>\u3001IObservable<T>\u3092\u3069\u3061\u3089\u3082\u5b9f\u88c5\u3057\u305f\u30af\u30e9\u30b9\u3068\u306a\u3063\u3066\u3044\u307e\u3059\u3002\n\u30d7\u30ed\u30d0\u30a4\u30c0\u3067\u3082\u3042\u308a\u3001\u30aa\u30d6\u30b6\u30fc\u30d0\u3067\u3082\u3042\u308b\u306e\u304cSubject\u306e\u7279\u6027\u3067\u3059\u3002\nRx\u306e\u4e16\u754c\u3068Rx\u306e\u5916\u306e\u4e16\u754c\u3092\u3064\u306a\u3050\u5f79\u5272\u3092\u6301\u3064\u306e\u304cSubject\u3068\u306a\u308a\u307e\u3059\u3002\nvar gateway = new Subject<int>();\n\ngateway.Subscribe( x => Console.WriteLine( x ) );\n\ngateway.OnNext( 100 );\ngateway.OnNext( 200 );\ngateway.OnCompleted();\n\n100\n200\n\n100\u3084200\u3068\u3044\u3046\u5024\u306f\u3001Rx\u306e\u5916\u306e\u4e16\u754c\u304b\u3089\u5165\u529b\u3055\u308c\u305f\u5024\u3067\u3059\u3002\n\u5916\u304b\u3089\u5165\u529b\u3055\u308c\u305f100\u3001200\u3068\u3044\u3046\u5024\u3092Subject\u306b\u901a\u3059\u3053\u3068\u3067Rx\u306e\u4e16\u754c\u306b\u653e\u308a\u8fbc\u3093\u3067\u3044\u307e\u3059\u3002\n\nHot \u306a\u6027\u8cea\nSubject\u7cfb\u306f\u3001Hot\u306a\u6027\u8cea\u3092\u6301\u3063\u3066\u3044\u307e\u3059\u3002\nHot\u306a\u6027\u8cea\u3068\u306f\uff1f\n\n\u5206\u914d\u53ef\u80fd\n\u30aa\u30d6\u30b6\u30fc\u30d0\u304c\u5c45\u306a\u304f\u3066\u3082\u7a3c\u50cd\u53ef\u80fd\u3002\n\u8907\u6570\u306e\u30aa\u30d6\u30b6\u30fc\u30d0\u3092\u4fdd\u6301\u53ef\u80fd\u3002\n\nISubject<T>\u306f\u3001Subject\u7cfb\u306e\u30af\u30e9\u30b9\u3092\u5b9f\u88c5\u3059\u308b\u305f\u3081\u306b\u4f7f\u7528\u3059\u308b\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30fc\u30b9\u3067\u3059\u3002\nIObserver<T>, IObservable<T>\u3092\u7d99\u627f\u3057\u3066\u3044\u307e\u3059\u3002\n\u6392\u4ed6\u5236\u5fa1\u306a\u3069\u7d30\u304b\u3044\u3068\u3053\u308d\u306f\u7121\u8996\u3059\u308b\u3068\u3057\u3066\u3001Subject\u306e\u6700\u5c0f\u9650\u306e\u5b9f\u88c5\u306f\u3001\u6b21\u306e\u3088\u3046\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u3002\n\nSubject\u306e\u6700\u5c0f\u9650\u306e\u5b9f\u88c5\npublic sealed class MySubject<T> : ISubject<T> {\n    private readonly List<IObserver<T>> observers = new List<IObserver<T>>();\n\n    public void OnCompleted() {\n        foreach( var o in this.observers )\n            o.OnCompleted();\n        this.observers.Clear();\n    }\n\n    public void OnError( Exception error ) {\n        foreach( var o in this.observers )\n            o.OnError( error );\n        this.observers.Clear();\n    }\n\n    public void OnNext( T value ) {\n        foreach( var o in this.observers )\n            o.OnNext( value );\n    }\n\n    public IDisposable Subscribe( IObserver<T> observer ) {\n        this.observers.Add( observer );\n        return Disposable.Create( () => this.observers.Remove( observer ) );\n    }\n}\n\n\n\u30aa\u30d6\u30b6\u30fc\u30d0\u3092\u30ea\u30b9\u30c8\u306a\u3069\u3092\u7528\u3044\u3066\u8907\u6570\u3001\u4fdd\u6301\u3057\u3066\u304a\u304f\u4ed5\u7d44\u307f\u304c\u3042\u308b\u306e\u304c\u7279\u5fb4\u3067\u3059\u3002\nOnNext\u3001OnError\u3001OnCompleted\u306f\u3001\u4fdd\u6301\u3057\u3066\u3042\u308b\u30aa\u30d6\u30b6\u30fc\u30d0\u3001\u3059\u3079\u3066\u306b\u5206\u914d\u3055\u308c\u307e\u3059\u3002\nHot\u306a\u6027\u8cea\u3092\u6301\u3064\u30d7\u30ed\u30d0\u30a4\u30c0\u306f\u3001Subscribe\u3057\u305f\u3060\u3051\u3067\u306f\u4f55\u3082\u8d77\u304d\u306a\u3044\u306e\u3082\u7279\u5fb4\u306e\u3072\u3068\u3064\u3067\u3059\u3002\n\u30aa\u30d6\u30b6\u30fc\u30d0\u3092\u30ea\u30b9\u30c8\u306a\u308a\u306b\u767b\u9332\u3059\u308b\u3060\u3051\u3067\u3059\u3002\n\u30dc\u30bf\u30f3\u306bClick\u30a4\u30d9\u30f3\u30c8\u3092\u8a2d\u5b9a\u3057\u305f\u3068\u3053\u308d\u3067\u5b9f\u969b\u306b\u30af\u30ea\u30c3\u30af\u3055\u308c\u308b\u307e\u3067\u4f55\u3082\u8d77\u304d\u306a\u3044\u306e\u3068\u540c\u3058\u3053\u3068\u3067\u3059\u3002\n\u30aa\u30d6\u30b6\u30fc\u30d0\u306e\u89e3\u9664\nHot\u306a\u6027\u8cea\u3092\u6301\u3064\u30d7\u30ed\u30d0\u30a4\u30c0\u306e\u591a\u304f\u306f\u3001OnCompleted\u3092\u547c\u3073\u307e\u305b\u3093\u3002\n\u3082\u3061\u308d\u3093\u30d7\u30ed\u30d0\u30a4\u30c0\u306e\u5b9f\u88c5\u306b\u3088\u3063\u3066\u5909\u308f\u308a\u307e\u3059\u304c\u2026\nOnCompleted\u304c\u547c\u3070\u308c\u306a\u3044\u3068\u3044\u3046\u3053\u3068\u306f\u3001\u89e3\u9664\u3057\u306a\u3044\u9650\u308aSubject\u304c\u30aa\u30d6\u30b6\u30fc\u30d0\u306e\u30ea\u30bd\u30fc\u30b9\u3092\u62b1\u3048\u3066\u3044\u308b\u3053\u3068\u306b\u306a\u308a\u307e\u3059\u3002\n\nIObservable\u306e\u516c\u958b\nSubject\u3092\u4f7f\u3046\u5229\u70b9\u306f\u3001\u4f55\u3089\u304b\u306e\u30af\u30e9\u30b9\u3067\u30e2\u30cb\u30bf\u30ea\u30f3\u30b0\u3059\u308b\u306a\u3069\u3057\u3066\u3001\u5916\u90e8\u304b\u3089\u5165\u529b\u3055\u308c\u305f\u5024\u3092\nSubject\u3092\u901a\u3057\u3066IObservable\u3068\u3057\u3066\u6271\u3048\u308b\u3088\u3046\u306b\u3059\u308b\u3053\u3068\u3067\u3059\u3002\n\u6b21\u306e\u3088\u3046\u306a\u5b9f\u88c5\u306f\u3001\u3088\u304f\u306a\u3044\u5b9f\u88c5\u3067\u3059\u3002\nSubject<T>\u306b\u30ad\u30e3\u30b9\u30c8\u3059\u308b\u3053\u3068\u3067\u5916\u90e8\u304b\u3089OnNext\u3084OnError\u3092\u8a31\u53ef\u3057\u3066\u3057\u307e\u3044\u307e\u3059\u3002\n\n\u3088\u304f\u306a\u3044\u5b9f\u88c5\u4f8b\npublic sealed class Hoge {\n    readonly Subject<int> gateway = new Subject<int>();\n    public IObservable<int> Recv => this.gateway;\n} \n\n\nAsObservable\u3092\u631f\u3080\u3053\u3068\u3067\u5916\u90e8\u304b\u3089Subject\u3078\u306e\u30ad\u30e3\u30b9\u30c8\u3092\u7981\u6b62\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u308b\u3002\n\n\u5b89\u5168\u306a\u5b9f\u88c5\u4f8b\npublic sealed class Hoge {\n    readonly Subject<int> gateway = new Subject<int>();\n    public IObservable<int> Recv => this.gateway.AsObservable();\n}\n\n\n\nSubject\u306eDispose\nRx\u3067\u63d0\u4f9b\u3055\u308c\u3066\u3044\u308bSubject\u7cfb\u306e\u30af\u30e9\u30b9\u306f\u3001IDisposable\u306b\u306a\u3063\u3066\u304a\u308a\u3001Dispose\u30e1\u30bd\u30c3\u30c9\u3092\u516c\u958b\u3057\u3066\u3044\u307e\u3059\u3002\nDispose\u3059\u308b\u3068\u3001\u3059\u3079\u3066\u306e\u30aa\u30d6\u30b6\u30fc\u30d0\u3092\u89e3\u9664\u3057\u307e\u3059\u304c\u3001OnCompleted\u306f\u3001\u547c\u3070\u308c\u307e\u305b\u3093\u3002\n\u3042\u304f\u307e\u3067Subject\u304c\u6301\u3064\u30aa\u30d6\u30b6\u30fc\u30d0\u306e\u30ea\u30b9\u30c8\u304b\u3089\u53d6\u308a\u9664\u304f\u3060\u3051\u306b\u904e\u304e\u307e\u305b\u3093\u3002\n\n\n\u3055\u307e\u3056\u307e\u306aSubject\nRx\u306b\u306f\u3001\u3044\u304f\u3064\u304b\u306eSubject\u7cfb\u306e\u30af\u30e9\u30b9\u304c\u7528\u610f\u3055\u308c\u3066\u304a\u308a\u3001\u7528\u9014\u306b\u5fdc\u3058\u3066\u4f7f\u3044\u5206\u3051\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\nSubject<T>\n\u5916\u90e8\u304b\u3089\u306e\u5165\u529b\u3092\u305d\u306e\u307e\u307e\u6d41\u3059\u3060\u3051\u306e\u6700\u3082\u30b7\u30f3\u30d7\u30eb\u306aSubject\u3067\u3059\u3002\nvar gateway = new Subject<int>();\n\ngateway.Subscribe( x => Console.WriteLine( x ) );\n\ngateway.OnNext( 100 );\ngateway.OnNext( 200 );\ngateway.Dispose();\n\n100\n200\n\nBehaviorSubject<T>\n\u521d\u671f\u5024\u3092\u6301\u3064Subject\u3067\u3059\u3002\nSubscribe\u3055\u308c\u308b\u3068\u3001\u76f4\u524d\u306e\u5024\u304cOnNext\u3055\u308c\u308b\u7279\u6027\u304c\u3042\u308a\u307e\u3059\u3002\n\u76f4\u524d\u306e\u5024\u304c\u7121\u3051\u308c\u3070\u3001\u521d\u671f\u5024\u304cOnNext\u3055\u308c\u307e\u3059\u3002\nvar gateway = new BehaviorSubject<int>( 50 );\n\ngateway.Subscribe( x => Console.WriteLine( x ) );\n\ngateway.OnNext( 100 );\n\ngateway.Subscribe( x => Console.WriteLine( x ) );\ngateway.Dispose();\n\n50\n100\n100\n\nReplaySubject<T>\nOnNext\u3055\u308c\u305f\u5024\u3092\u84c4\u7a4d\u3057\u3001Subscribe\u3055\u308c\u308b\u3068\u6307\u5b9a\u3055\u308c\u305f\u6570\u3001\u84c4\u7a4d\u3057\u3066\u304a\u304d\u3001\n\u5f8c\u304b\u3089\u767b\u9332\u3055\u308c\u305f\u30aa\u30d6\u30b6\u30fc\u30d0\u306b\u84c4\u7a4d\u3055\u308c\u3066\u3044\u305f\u5024\u3092\u767a\u884c\u3059\u308b\u7279\u6027\u3092\u6301\u3061\u307e\u3059\u3002\n\n\u6700\u65b0\u306e2\u500b\u4fdd\u6301\u3057\u3066\u304a\u304f\nvar gateway = new ReplaySubject<int>( 2\u3000);\n\ngateway.Subscribe( x => Console.WriteLine( x ) );\n\ngateway.OnNext( 100 );\ngateway.OnNext( 200 );\ngateway.OnNext( 300 );\n\ngateway.Subscribe( x => Console.WriteLine( x ) );\ngateway.Dispose();\n\n\n100\n200\n300\n200\n300\n\n\u307e\u305f\u3001\u4e0a\u8a18\u306e\u4f8b\u3067\u306f\u3001\u500b\u6570\u3092\u6307\u5b9a\u3057\u3066\u3044\u307e\u3059\u304c\u6642\u9593\u3092\u6307\u5b9a\u3059\u308b\u3053\u3068\u3082\u3067\u304d\u307e\u3059\u3002\n\n10\u79d2\u524d\u307e\u3067\u306e\u5024\u3092\u4fdd\u6301\u3057\u3066\u304a\u304f\nvar gateway = new ReplaySubject<int>( TimeSpan.FromSeconds( 10 ) );\n\n\nAsyncSubject<T>\n\u4ed6\u306eSubject\u3068\u306f\u3001\u82e5\u5e72\u7570\u306a\u308b\u6027\u8cea\u3092\u6301\u3064Subject\u3067\u3059\u3002\nAsyncSubject\u306f\u3001OnCompleted\u304c\u547c\u3070\u308c\u308b\u307e\u3067\u30aa\u30d6\u30b6\u30fc\u30d0\u306b\u5024\u304c\u767a\u884c\u3055\u308c\u307e\u305b\u3093\u3002\n\u6700\u5f8c\u306bOnNext\u3055\u308c\u305f\u5024\u3092\u4fdd\u6301\u3057\u3066\u304a\u304d\u3001OnCompleted\u3057\u305f\u6642\u70b9\u3067\u4fdd\u6301\u3055\u308c\u3066\u3044\u308b\u5024\u3092\u30aa\u30d6\u30b6\u30fc\u30d0\u306b\u767a\u884c\u3057\u307e\u3059\u3002\n\u307e\u305f\u3001OnCompleted\u3055\u308c\u305f\u5f8c\u306b\u30aa\u30d6\u30b6\u30fc\u30d0\u304c\u63a5\u7d9a\u3055\u308c\u308b\u3068\u3001\u4fdd\u6301\u3057\u3066\u3042\u308b\u5024\u3092\u65b0\u3057\u3044\u30aa\u30d6\u30b6\u30fc\u30d0\u306b\u767a\u884c\u3057\u307e\u3059\u3002\nvar gateway = new AsyncSubject<int>();\ngateway.Subscribe( x => Console.WriteLine( x ) );\n\ngateway.OnNext( 100 );\ngateway.OnNext( 200 );\ngateway.OnNext( 300 );\ngateway.OnCompleted();\n\ngateway.Subscribe( x => Console.WriteLine( x ) );\ngateway.Dispose();\n\n300\n300\n\n\n\nCold - Hot \u5909\u63db\n\u30d7\u30ed\u30d0\u30a4\u30c0\u306e\u6027\u8cea\u306f\u3001\u4e3b\u306bCold\u3001Hot\u306e2\u901a\u308a\u304c\u3042\u308a\u307e\u3059\u3002\nCold\n\n\u30d7\u30ed\u30d0\u30a4\u30c0\u3068\u30aa\u30d6\u30b6\u30fc\u30d0\u306f\u3001\uff11\uff1a\uff11\u306e\u95a2\u4fc2\nSubscribe\u3055\u308c\u308b\u307e\u3067\u4f55\u3082\u3057\u306a\u3044\u3002\n\u5206\u914d\u3067\u304d\u306a\u3044\u3002\n\nHot\n\n\u30d7\u30ed\u30d0\u30a4\u30c0\u3068\u30aa\u30d6\u30b6\u30fc\u30d0\u306f\u3001\uff11\uff1an\u306e\u95a2\u4fc2\nSubscribe\u3055\u308c\u3066\u3044\u306a\u304f\u3066\u3082\u52d5\u4f5c\u3059\u308b\u3002\n\u5206\u914d\u3067\u304d\u308b\u3002\n\n\nCold\u304b\u3089Hot\u306b\u5909\u63db\u3059\u308b\n\nCold\u306a\u6027\u8cea\u3092\u6301\u3064\u30d7\u30ed\u30d0\u30a4\u30c0\nvar provider = Observable.Create<string>( o => {\n    Console.WriteLine( \"Create.\" );\n    var created = DateTime.Now;\n    int counter = 0;\n    return ThreadPoolScheduler.Instance.SchedulePeriodic( TimeSpan.FromSeconds( 1 ) , () => o.OnNext( $\"{counter++}. {created}\" ) );\n} );\n\nvar A = provider.Subscribe( x => Console.WriteLine( $\"A {x}\" ) );\nThread.Sleep( 3000 );\nvar B = provider.Subscribe( x => Console.WriteLine( $\"B {x}\" ) );\n\n\nCreate.\nA 0. 2015/07/12 16:29:24\nA 1. 2015/07/12 16:29:24\nCreate.\nA 2. 2015/07/12 16:29:24\nB 0. 2015/07/12 16:29:27\nA 3. 2015/07/12 16:29:24\nB 1. 2015/07/12 16:29:27\nA 4. 2015/07/12 16:29:24\n\nCreate\u304c2\u56de\u51fa\u529b\u3055\u308c\u3001A\u3068B\u306e\u7d50\u679c\u304c\u305d\u308c\u305e\u308c\u7570\u306a\u308b\u7279\u5fb4\u304c\u3042\u308b\u3002\n** \u5206\u914d\u53ef\u80fd\u3078 **\nPublish\u30aa\u30da\u30ec\u30fc\u30bf\u3092\u4f7f\u7528\u3059\u308b\u3068Cold\u304b\u3089Hot\u306b\u5909\u63db\u3057\u3001\u5206\u914d\u53ef\u80fd\u306b\u306a\u308b\u3002\nIConnectableObservable<string> provider = Observable.Create<string>( o => {\n    Console.WriteLine( \"Create.\" );\n    var created = DateTime.Now;\n    int counter = 0;\n    return ThreadPoolScheduler.Instance.SchedulePeriodic( TimeSpan.FromSeconds( 1 ) , () => o.OnNext( $\"{counter++}. {created}\" ) );\n} )\n.Publish();\n\nprovider.Connect();\n\nvar A = provider.Subscribe( x => Console.WriteLine( $\"A {x}\" ) );\nThread.Sleep( 3000 );\nvar B = provider.Subscribe( x => Console.WriteLine( $\"B {x}\" ) );\n\nCreate.\nA 0. 2015/07/12 16:33:45\nA 1. 2015/07/12 16:33:45\nA 2. 2015/07/12 16:33:45\nA 3. 2015/07/12 16:33:45\nB 3. 2015/07/12 16:33:45\nA 4. 2015/07/12 16:33:45\nB 4. 2015/07/12 16:33:45\nA 5. 2015/07/12 16:33:45\nB 5. 2015/07/12 16:33:45\n\nCreate\u304c1\u56de\u3057\u304b\u51fa\u529b\u3055\u308c\u3066\u304a\u3089\u305a\u3001A\u3001B\u305d\u308c\u305e\u308c\u306b\u540c\u3058\u5024\u304c\u5206\u914d\u3055\u308c\u3066\u3044\u308b\u3053\u3068\u304b\u3089Hot\u306a\u6027\u8cea\u306b\u5909\u5316\u3057\u3066\u3044\u308b\u3002\nIConnectableObservable<T>\nPublish\u30aa\u30da\u30ec\u30fc\u30bf\u306f\u3001IObservable<T>\u306e\u4ee3\u308f\u308a\u306bIConnectableObservable<T>\u3092\u8fd4\u3059\u3002\n\u3068\u306f\u3044\u3063\u3066\u3082IObservable<T>\u306e\u6d3e\u751f\u306a\u306e\u3067IObservable<T>\u3068\u3057\u3066\u6271\u3048\u308b\u3002\nIConnectableObservable<T>\u306f\u3001Connect\u30e1\u30bd\u30c3\u30c9\u304c\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u308b\u3002\nIDisposable Connect();\n\n\u3053\u306eConnect\u30e1\u30bd\u30c3\u30c9\u306e\u5f79\u5272\u306f\u3001\u30d7\u30ed\u30d0\u30a4\u30c0\u306e\u76e3\u8996\u3092\u958b\u59cb\u3059\u308b\u3001\u3064\u307e\u308a\u63a5\u7d9a\u3092\u884c\u3044\u3001\u5206\u914d\u3059\u308b\u3053\u3068\u306b\u3042\u308b\u3002\n\u306a\u304a\u3001Subscribe\u3057\u306a\u304f\u3066\u3082Connect\u3057\u305f\u6642\u70b9\u3067\u30b9\u30c8\u30ea\u30fc\u30e0\u3092\u751f\u6210\u3059\u308b\u3002\nIConnectableObservable<string> provider = Observable.Create<string>( o => {\n    Console.WriteLine( \"Create.\" );\n    return Disposable.Empty;\n} )\n.Publish();\n\nprovider.Connect();\n\nCreate.\n\nConnect\u306f\u3001IDisposable\u306a\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u8fd4\u3059\u3002\nSubscribe\u3067\u8fd4\u3055\u308c\u308bIDisposable\u3068\u540c\u69d8\u306b\u76e3\u8996\u3092\u89e3\u9664\u3059\u308b\u305f\u3081\u306b\u4f7f\u7528\u3059\u308b\u3002\n\nPublish\u306e\u5b9f\u88c5\nPublish\u306e\u5b9f\u88c5\u306f\u3001\u304b\u306a\u308a\u7701\u7565\u3057\u3066\u3044\u308b\u3068\u3053\u308d\u304c\u3042\u308b\u3082\u306e\u306e\u6b21\u306e\u3088\u3046\u306a\u5b9f\u88c5\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u3002\n\u8981\u3059\u308b\u306bSubject\u3092\u9593\u306b\u631f\u3093\u3067\u3044\u308b\u3060\u3051\u306b\u904e\u304e\u307e\u305b\u3093\u3002\npublic static IConnectableObservable<T> Publish<T>( this IObservable<T> source ) \n    => new MyPublishImp<T>( source );\n\npublic sealed class PublishImp<T> : IConnectableObservable<T> {\n    private readonly IObservable<T> source;\n    private readonly Subject<T> hot;\n\n    public MyPublishImp( IObservable<T> source ) {\n        this.source = source;\n        this.hot = new Subject<T>();\n    }\n\n    public IDisposable Connect() => this.host.Subscribe( this.source );\n\n    public IDisposable Subscribe( IObserver<T> observer ) => this.hot.Subscribe( observer );\n}\n\n\nRefCount\u30aa\u30da\u30ec\u30fc\u30bf\n\u3059\u3079\u3066\u306eSubscribe\u304c\u89e3\u9664\u3055\u308c\u305f\u3089\u3001Connect\u3067\u53d6\u5f97\u3057\u305fIDisposable\u3092Dispose\u3059\u308b\u3088\u3046\u306a\u5b9f\u88c5\u306f\u3001\u624b\u9593\u304c\u639b\u304b\u308a\u307e\u3059\u3002\n\u305d\u3053\u3089\u3078\u3093\u306e\u624b\u9593\u3092\u80a9\u4ee3\u308f\u308a\u3057\u3066\u304f\u308c\u308b\u306e\u304cRefCount\u3067\u3059\u3002\nvar provider = Observable.Create<string>( o => {\n    Console.WriteLine( \"Create.\" );\n    var created = DateTime.Now;\n    int counter = 0;\n    return ThreadPoolScheduler.Instance.SchedulePeriodic( TimeSpan.FromSeconds( 1 ) , () => o.OnNext( $\"{counter++}. {created}\" ) );\n} )\n.Publish()\n.RefCount();\n\nprovider.Subscribe( x => Console.WriteLine( $\"A: {x}\" ) );\nprovider.Subscribe( x => Console.WriteLine( $\"B: {x}\" ) );\n\n\nSubscribe\u3055\u308c\u308b\u5ea6\u306b\u5185\u90e8\u30ab\u30a6\u30f3\u30bf\u3092\u30a4\u30f3\u30af\u30ea\u30e1\u30f3\u30c8\u3059\u308b\u3002\n\u30ab\u30a6\u30f3\u30bf\u304c0\u304b\u30891\u306b\u5207\u308a\u66ff\u308f\u308b\u3068\u3001Connect\u3092\u5b9f\u884c\u3057\u3001\u89b3\u6e2c\u3092\u76e3\u8996\u3059\u308b\u3002\nDispose\u3059\u308b\u3068\u3001\u5185\u90e8\u30ab\u30a6\u30f3\u30bf\u304c\u30c7\u30af\u30ea\u30e1\u30f3\u30c8\u3055\u308c\u308b\u3002\n\u30ab\u30a6\u30f3\u30bf\u304c0\u306b\u306a\u308b\u3068\u3001Connect\u3067\u53d6\u5f97\u3057\u305f\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092Dispose\u3057\u3001\u89b3\u6e2c\u3092\u89e3\u9664\u3059\u308b\u3002\n\nCold\u306a\u3082\u306e\u3092\u304a\u624b\u8efd\u306bHot\u3068\u3057\u3066\u516c\u958b\u3057\u305f\u3044\u306a\u3089Publish\u3057\u3066RefCount\u3068\u3059\u308b\n\nCold->Hot\n.Publish()\n.RefCount();\n\n\n## Subject\n\nSubject\u306f\u3001**IObserver\\<T\\>**\u3001**IObservable\\<T\\>**\u3092\u3069\u3061\u3089\u3082\u5b9f\u88c5\u3057\u305f\u30af\u30e9\u30b9\u3068\u306a\u3063\u3066\u3044\u307e\u3059\u3002\n\u30d7\u30ed\u30d0\u30a4\u30c0\u3067\u3082\u3042\u308a\u3001\u30aa\u30d6\u30b6\u30fc\u30d0\u3067\u3082\u3042\u308b\u306e\u304cSubject\u306e\u7279\u6027\u3067\u3059\u3002\n\nRx\u306e\u4e16\u754c\u3068Rx\u306e\u5916\u306e\u4e16\u754c\u3092\u3064\u306a\u3050\u5f79\u5272\u3092\u6301\u3064\u306e\u304cSubject\u3068\u306a\u308a\u307e\u3059\u3002\n\n```csharp\nvar gateway = new Subject<int>();\n\ngateway.Subscribe( x => Console.WriteLine( x ) );\n\ngateway.OnNext( 100 );\ngateway.OnNext( 200 );\ngateway.OnCompleted();\n```\n\n```\n100\n200\n```\n\n100\u3084200\u3068\u3044\u3046\u5024\u306f\u3001Rx\u306e\u5916\u306e\u4e16\u754c\u304b\u3089\u5165\u529b\u3055\u308c\u305f\u5024\u3067\u3059\u3002\n\u5916\u304b\u3089\u5165\u529b\u3055\u308c\u305f100\u3001200\u3068\u3044\u3046\u5024\u3092Subject\u306b\u901a\u3059\u3053\u3068\u3067Rx\u306e\u4e16\u754c\u306b\u653e\u308a\u8fbc\u3093\u3067\u3044\u307e\u3059\u3002\n\n### Hot \u306a\u6027\u8cea\n\nSubject\u7cfb\u306f\u3001Hot\u306a\u6027\u8cea\u3092\u6301\u3063\u3066\u3044\u307e\u3059\u3002\n\n**Hot\u306a\u6027\u8cea\u3068\u306f\uff1f**\n\n* \u5206\u914d\u53ef\u80fd\n* \u30aa\u30d6\u30b6\u30fc\u30d0\u304c\u5c45\u306a\u304f\u3066\u3082\u7a3c\u50cd\u53ef\u80fd\u3002\n* \u8907\u6570\u306e\u30aa\u30d6\u30b6\u30fc\u30d0\u3092\u4fdd\u6301\u53ef\u80fd\u3002\n\nISubject\\<T\\>\u306f\u3001Subject\u7cfb\u306e\u30af\u30e9\u30b9\u3092\u5b9f\u88c5\u3059\u308b\u305f\u3081\u306b\u4f7f\u7528\u3059\u308b\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30fc\u30b9\u3067\u3059\u3002\nIObserver\\<T\\>, IObservable\\<T\\>\u3092\u7d99\u627f\u3057\u3066\u3044\u307e\u3059\u3002\n\n\u6392\u4ed6\u5236\u5fa1\u306a\u3069\u7d30\u304b\u3044\u3068\u3053\u308d\u306f\u7121\u8996\u3059\u308b\u3068\u3057\u3066\u3001Subject\u306e\u6700\u5c0f\u9650\u306e\u5b9f\u88c5\u306f\u3001\u6b21\u306e\u3088\u3046\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u3002\n\n```csharp:Subject\u306e\u6700\u5c0f\u9650\u306e\u5b9f\u88c5\npublic sealed class MySubject<T> : ISubject<T> {\n\tprivate readonly List<IObserver<T>> observers = new List<IObserver<T>>();\n\n\tpublic void OnCompleted() {\n\t\tforeach( var o in this.observers )\n\t\t\to.OnCompleted();\n\t\tthis.observers.Clear();\n\t}\n\n\tpublic void OnError( Exception error ) {\n\t\tforeach( var o in this.observers )\n\t\t\to.OnError( error );\n\t\tthis.observers.Clear();\n\t}\n\n\tpublic void OnNext( T value ) {\n\t\tforeach( var o in this.observers )\n\t\t\to.OnNext( value );\n\t}\n\n\tpublic IDisposable Subscribe( IObserver<T> observer ) {\n\t\tthis.observers.Add( observer );\n\t\treturn Disposable.Create( () => this.observers.Remove( observer ) );\n\t}\n}\n```\n\n\u30aa\u30d6\u30b6\u30fc\u30d0\u3092\u30ea\u30b9\u30c8\u306a\u3069\u3092\u7528\u3044\u3066\u8907\u6570\u3001\u4fdd\u6301\u3057\u3066\u304a\u304f\u4ed5\u7d44\u307f\u304c\u3042\u308b\u306e\u304c\u7279\u5fb4\u3067\u3059\u3002\nOnNext\u3001OnError\u3001OnCompleted\u306f\u3001\u4fdd\u6301\u3057\u3066\u3042\u308b\u30aa\u30d6\u30b6\u30fc\u30d0\u3001\u3059\u3079\u3066\u306b\u5206\u914d\u3055\u308c\u307e\u3059\u3002\n\nHot\u306a\u6027\u8cea\u3092\u6301\u3064\u30d7\u30ed\u30d0\u30a4\u30c0\u306f\u3001Subscribe\u3057\u305f\u3060\u3051\u3067\u306f\u4f55\u3082\u8d77\u304d\u306a\u3044\u306e\u3082\u7279\u5fb4\u306e\u3072\u3068\u3064\u3067\u3059\u3002\n\u30aa\u30d6\u30b6\u30fc\u30d0\u3092\u30ea\u30b9\u30c8\u306a\u308a\u306b\u767b\u9332\u3059\u308b\u3060\u3051\u3067\u3059\u3002\n\n\u30dc\u30bf\u30f3\u306bClick\u30a4\u30d9\u30f3\u30c8\u3092\u8a2d\u5b9a\u3057\u305f\u3068\u3053\u308d\u3067\u5b9f\u969b\u306b\u30af\u30ea\u30c3\u30af\u3055\u308c\u308b\u307e\u3067\u4f55\u3082\u8d77\u304d\u306a\u3044\u306e\u3068\u540c\u3058\u3053\u3068\u3067\u3059\u3002\n\n**\u30aa\u30d6\u30b6\u30fc\u30d0\u306e\u89e3\u9664**\n\nHot\u306a\u6027\u8cea\u3092\u6301\u3064\u30d7\u30ed\u30d0\u30a4\u30c0\u306e\u591a\u304f\u306f\u3001OnCompleted\u3092\u547c\u3073\u307e\u305b\u3093\u3002\n\u3082\u3061\u308d\u3093\u30d7\u30ed\u30d0\u30a4\u30c0\u306e\u5b9f\u88c5\u306b\u3088\u3063\u3066\u5909\u308f\u308a\u307e\u3059\u304c\u2026\n\nOnCompleted\u304c\u547c\u3070\u308c\u306a\u3044\u3068\u3044\u3046\u3053\u3068\u306f\u3001\u89e3\u9664\u3057\u306a\u3044\u9650\u308aSubject\u304c\u30aa\u30d6\u30b6\u30fc\u30d0\u306e\u30ea\u30bd\u30fc\u30b9\u3092\u62b1\u3048\u3066\u3044\u308b\u3053\u3068\u306b\u306a\u308a\u307e\u3059\u3002\n\n#### IObservable\u306e\u516c\u958b\n\nSubject\u3092\u4f7f\u3046\u5229\u70b9\u306f\u3001\u4f55\u3089\u304b\u306e\u30af\u30e9\u30b9\u3067\u30e2\u30cb\u30bf\u30ea\u30f3\u30b0\u3059\u308b\u306a\u3069\u3057\u3066\u3001\u5916\u90e8\u304b\u3089\u5165\u529b\u3055\u308c\u305f\u5024\u3092\nSubject\u3092\u901a\u3057\u3066IObservable\u3068\u3057\u3066\u6271\u3048\u308b\u3088\u3046\u306b\u3059\u308b\u3053\u3068\u3067\u3059\u3002\n\n\u6b21\u306e\u3088\u3046\u306a\u5b9f\u88c5\u306f\u3001\u3088\u304f\u306a\u3044\u5b9f\u88c5\u3067\u3059\u3002\nSubject\\<T\\>\u306b\u30ad\u30e3\u30b9\u30c8\u3059\u308b\u3053\u3068\u3067\u5916\u90e8\u304b\u3089OnNext\u3084OnError\u3092\u8a31\u53ef\u3057\u3066\u3057\u307e\u3044\u307e\u3059\u3002\n\n```csharp:\u3088\u304f\u306a\u3044\u5b9f\u88c5\u4f8b\npublic sealed class Hoge {\n\treadonly Subject<int> gateway = new Subject<int>();\n\tpublic IObservable<int> Recv => this.gateway;\n} \n```\n\nAsObservable\u3092\u631f\u3080\u3053\u3068\u3067\u5916\u90e8\u304b\u3089Subject<T>\u3078\u306e\u30ad\u30e3\u30b9\u30c8\u3092\u7981\u6b62\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u308b\u3002\n\n```csharp:\u5b89\u5168\u306a\u5b9f\u88c5\u4f8b\npublic sealed class Hoge {\n\treadonly Subject<int> gateway = new Subject<int>();\n\tpublic IObservable<int> Recv => this.gateway.AsObservable();\n}\n```\n\n#### Subject\u306eDispose\n\nRx\u3067\u63d0\u4f9b\u3055\u308c\u3066\u3044\u308bSubject\u7cfb\u306e\u30af\u30e9\u30b9\u306f\u3001IDisposable\u306b\u306a\u3063\u3066\u304a\u308a\u3001Dispose\u30e1\u30bd\u30c3\u30c9\u3092\u516c\u958b\u3057\u3066\u3044\u307e\u3059\u3002\nDispose\u3059\u308b\u3068\u3001\u3059\u3079\u3066\u306e\u30aa\u30d6\u30b6\u30fc\u30d0\u3092\u89e3\u9664\u3057\u307e\u3059\u304c\u3001OnCompleted\u306f\u3001\u547c\u3070\u308c\u307e\u305b\u3093\u3002\n\u3042\u304f\u307e\u3067Subject\u304c\u6301\u3064\u30aa\u30d6\u30b6\u30fc\u30d0\u306e\u30ea\u30b9\u30c8\u304b\u3089\u53d6\u308a\u9664\u304f\u3060\u3051\u306b\u904e\u304e\u307e\u305b\u3093\u3002\n\n---\n\n### \u3055\u307e\u3056\u307e\u306aSubject\n\nRx\u306b\u306f\u3001\u3044\u304f\u3064\u304b\u306eSubject\u7cfb\u306e\u30af\u30e9\u30b9\u304c\u7528\u610f\u3055\u308c\u3066\u304a\u308a\u3001\u7528\u9014\u306b\u5fdc\u3058\u3066\u4f7f\u3044\u5206\u3051\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\n\n**Subject\\<T\\>**\n\n\u5916\u90e8\u304b\u3089\u306e\u5165\u529b\u3092\u305d\u306e\u307e\u307e\u6d41\u3059\u3060\u3051\u306e\u6700\u3082\u30b7\u30f3\u30d7\u30eb\u306aSubject\u3067\u3059\u3002\n\n```csharp\nvar gateway = new Subject<int>();\n\ngateway.Subscribe( x => Console.WriteLine( x ) );\n\ngateway.OnNext( 100 );\ngateway.OnNext( 200 );\ngateway.Dispose();\n```\n\n```\n100\n200\n```\n\n**BehaviorSubject\\<T\\>**\n\n\u521d\u671f\u5024\u3092\u6301\u3064Subject\u3067\u3059\u3002\nSubscribe\u3055\u308c\u308b\u3068\u3001\u76f4\u524d\u306e\u5024\u304cOnNext\u3055\u308c\u308b\u7279\u6027\u304c\u3042\u308a\u307e\u3059\u3002\n\u76f4\u524d\u306e\u5024\u304c\u7121\u3051\u308c\u3070\u3001\u521d\u671f\u5024\u304cOnNext\u3055\u308c\u307e\u3059\u3002\n\n```csharp\nvar gateway = new BehaviorSubject<int>( 50 );\n\ngateway.Subscribe( x => Console.WriteLine( x ) );\n\ngateway.OnNext( 100 );\n\ngateway.Subscribe( x => Console.WriteLine( x ) );\ngateway.Dispose();\n```\n\n```\n50\n100\n100\n```\n\n**ReplaySubject\\<T\\>**\n\nOnNext\u3055\u308c\u305f\u5024\u3092\u84c4\u7a4d\u3057\u3001Subscribe\u3055\u308c\u308b\u3068\u6307\u5b9a\u3055\u308c\u305f\u6570\u3001\u84c4\u7a4d\u3057\u3066\u304a\u304d\u3001\n\u5f8c\u304b\u3089\u767b\u9332\u3055\u308c\u305f\u30aa\u30d6\u30b6\u30fc\u30d0\u306b\u84c4\u7a4d\u3055\u308c\u3066\u3044\u305f\u5024\u3092\u767a\u884c\u3059\u308b\u7279\u6027\u3092\u6301\u3061\u307e\u3059\u3002\n\n```csharp:\u6700\u65b0\u306e2\u500b\u4fdd\u6301\u3057\u3066\u304a\u304f\nvar gateway = new ReplaySubject<int>( 2\u3000);\n\ngateway.Subscribe( x => Console.WriteLine( x ) );\n\ngateway.OnNext( 100 );\ngateway.OnNext( 200 );\ngateway.OnNext( 300 );\n\ngateway.Subscribe( x => Console.WriteLine( x ) );\ngateway.Dispose();\n```\n\n```\n100\n200\n300\n200\n300\n```\n\n\u307e\u305f\u3001\u4e0a\u8a18\u306e\u4f8b\u3067\u306f\u3001\u500b\u6570\u3092\u6307\u5b9a\u3057\u3066\u3044\u307e\u3059\u304c\u6642\u9593\u3092\u6307\u5b9a\u3059\u308b\u3053\u3068\u3082\u3067\u304d\u307e\u3059\u3002\n\n```csharp:10\u79d2\u524d\u307e\u3067\u306e\u5024\u3092\u4fdd\u6301\u3057\u3066\u304a\u304f\nvar gateway = new ReplaySubject<int>( TimeSpan.FromSeconds( 10 ) );\n```\n\n**AsyncSubject\\<T\\>**\n\n\u4ed6\u306eSubject\u3068\u306f\u3001\u82e5\u5e72\u7570\u306a\u308b\u6027\u8cea\u3092\u6301\u3064Subject\u3067\u3059\u3002\nAsyncSubject\u306f\u3001OnCompleted\u304c\u547c\u3070\u308c\u308b\u307e\u3067\u30aa\u30d6\u30b6\u30fc\u30d0\u306b\u5024\u304c\u767a\u884c\u3055\u308c\u307e\u305b\u3093\u3002\n\u6700\u5f8c\u306bOnNext\u3055\u308c\u305f\u5024\u3092\u4fdd\u6301\u3057\u3066\u304a\u304d\u3001OnCompleted\u3057\u305f\u6642\u70b9\u3067\u4fdd\u6301\u3055\u308c\u3066\u3044\u308b\u5024\u3092\u30aa\u30d6\u30b6\u30fc\u30d0\u306b\u767a\u884c\u3057\u307e\u3059\u3002\n\n\u307e\u305f\u3001OnCompleted\u3055\u308c\u305f\u5f8c\u306b\u30aa\u30d6\u30b6\u30fc\u30d0\u304c\u63a5\u7d9a\u3055\u308c\u308b\u3068\u3001\u4fdd\u6301\u3057\u3066\u3042\u308b\u5024\u3092\u65b0\u3057\u3044\u30aa\u30d6\u30b6\u30fc\u30d0\u306b\u767a\u884c\u3057\u307e\u3059\u3002\n\n```csharp\nvar gateway = new AsyncSubject<int>();\ngateway.Subscribe( x => Console.WriteLine( x ) );\n\ngateway.OnNext( 100 );\ngateway.OnNext( 200 );\ngateway.OnNext( 300 );\ngateway.OnCompleted();\n\ngateway.Subscribe( x => Console.WriteLine( x ) );\ngateway.Dispose();\n```\n\n```\n300\n300\n```\n\n----------\n## Cold - Hot \u5909\u63db\n\n\u30d7\u30ed\u30d0\u30a4\u30c0\u306e\u6027\u8cea\u306f\u3001\u4e3b\u306bCold\u3001Hot\u306e2\u901a\u308a\u304c\u3042\u308a\u307e\u3059\u3002\n\n**Cold**\n\n* \u30d7\u30ed\u30d0\u30a4\u30c0\u3068\u30aa\u30d6\u30b6\u30fc\u30d0\u306f\u3001\uff11\uff1a\uff11\u306e\u95a2\u4fc2\n* Subscribe\u3055\u308c\u308b\u307e\u3067\u4f55\u3082\u3057\u306a\u3044\u3002\n* \u5206\u914d\u3067\u304d\u306a\u3044\u3002\n\n**Hot**\n\n* \u30d7\u30ed\u30d0\u30a4\u30c0\u3068\u30aa\u30d6\u30b6\u30fc\u30d0\u306f\u3001\uff11\uff1an\u306e\u95a2\u4fc2\n* Subscribe\u3055\u308c\u3066\u3044\u306a\u304f\u3066\u3082\u52d5\u4f5c\u3059\u308b\u3002\n* \u5206\u914d\u3067\u304d\u308b\u3002\n\n### Cold\u304b\u3089Hot\u306b\u5909\u63db\u3059\u308b\n\n```csharp:Cold\u306a\u6027\u8cea\u3092\u6301\u3064\u30d7\u30ed\u30d0\u30a4\u30c0\nvar provider = Observable.Create<string>( o => {\n\tConsole.WriteLine( \"Create.\" );\n\tvar created = DateTime.Now;\n\tint counter = 0;\n\treturn ThreadPoolScheduler.Instance.SchedulePeriodic( TimeSpan.FromSeconds( 1 ) , () => o.OnNext( $\"{counter++}. {created}\" ) );\n} );\n\nvar A = provider.Subscribe( x => Console.WriteLine( $\"A {x}\" ) );\nThread.Sleep( 3000 );\nvar B = provider.Subscribe( x => Console.WriteLine( $\"B {x}\" ) );\n```\n\n```\nCreate.\nA 0. 2015/07/12 16:29:24\nA 1. 2015/07/12 16:29:24\nCreate.\nA 2. 2015/07/12 16:29:24\nB 0. 2015/07/12 16:29:27\nA 3. 2015/07/12 16:29:24\nB 1. 2015/07/12 16:29:27\nA 4. 2015/07/12 16:29:24\n```\nCreate\u304c2\u56de\u51fa\u529b\u3055\u308c\u3001A\u3068B\u306e\u7d50\u679c\u304c\u305d\u308c\u305e\u308c\u7570\u306a\u308b\u7279\u5fb4\u304c\u3042\u308b\u3002\n\n** \u5206\u914d\u53ef\u80fd\u3078 **\n\nPublish\u30aa\u30da\u30ec\u30fc\u30bf\u3092\u4f7f\u7528\u3059\u308b\u3068Cold\u304b\u3089Hot\u306b\u5909\u63db\u3057\u3001\u5206\u914d\u53ef\u80fd\u306b\u306a\u308b\u3002\n\n```csharp\nIConnectableObservable<string> provider = Observable.Create<string>( o => {\n\tConsole.WriteLine( \"Create.\" );\n\tvar created = DateTime.Now;\n\tint counter = 0;\n\treturn ThreadPoolScheduler.Instance.SchedulePeriodic( TimeSpan.FromSeconds( 1 ) , () => o.OnNext( $\"{counter++}. {created}\" ) );\n} )\n.Publish();\n\nprovider.Connect();\n\nvar A = provider.Subscribe( x => Console.WriteLine( $\"A {x}\" ) );\nThread.Sleep( 3000 );\nvar B = provider.Subscribe( x => Console.WriteLine( $\"B {x}\" ) );\n```\n\n```\nCreate.\nA 0. 2015/07/12 16:33:45\nA 1. 2015/07/12 16:33:45\nA 2. 2015/07/12 16:33:45\nA 3. 2015/07/12 16:33:45\nB 3. 2015/07/12 16:33:45\nA 4. 2015/07/12 16:33:45\nB 4. 2015/07/12 16:33:45\nA 5. 2015/07/12 16:33:45\nB 5. 2015/07/12 16:33:45\n```\n\nCreate\u304c1\u56de\u3057\u304b\u51fa\u529b\u3055\u308c\u3066\u304a\u3089\u305a\u3001A\u3001B\u305d\u308c\u305e\u308c\u306b\u540c\u3058\u5024\u304c\u5206\u914d\u3055\u308c\u3066\u3044\u308b\u3053\u3068\u304b\u3089Hot\u306a\u6027\u8cea\u306b\u5909\u5316\u3057\u3066\u3044\u308b\u3002\n\n**IConnectableObservable\\<T\\>**\n\nPublish\u30aa\u30da\u30ec\u30fc\u30bf\u306f\u3001IObservable\\<T\\>\u306e\u4ee3\u308f\u308a\u306bIConnectableObservable\\<T\\>\u3092\u8fd4\u3059\u3002\n\u3068\u306f\u3044\u3063\u3066\u3082IObservable\\<T\\>\u306e\u6d3e\u751f\u306a\u306e\u3067IObservable\\<T\\>\u3068\u3057\u3066\u6271\u3048\u308b\u3002\n\nIConnectableObservable\\<T\\>\u306f\u3001**Connect**\u30e1\u30bd\u30c3\u30c9\u304c\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u308b\u3002\n\n```csharp\nIDisposable Connect();\n```\n\n\u3053\u306eConnect\u30e1\u30bd\u30c3\u30c9\u306e\u5f79\u5272\u306f\u3001\u30d7\u30ed\u30d0\u30a4\u30c0\u306e\u76e3\u8996\u3092\u958b\u59cb\u3059\u308b\u3001\u3064\u307e\u308a\u63a5\u7d9a\u3092\u884c\u3044\u3001\u5206\u914d\u3059\u308b\u3053\u3068\u306b\u3042\u308b\u3002\n\u306a\u304a\u3001Subscribe\u3057\u306a\u304f\u3066\u3082Connect\u3057\u305f\u6642\u70b9\u3067\u30b9\u30c8\u30ea\u30fc\u30e0\u3092\u751f\u6210\u3059\u308b\u3002\n\n```csharp\nIConnectableObservable<string> provider = Observable.Create<string>( o => {\n\tConsole.WriteLine( \"Create.\" );\n\treturn Disposable.Empty;\n} )\n.Publish();\n\nprovider.Connect();\n```\n\n```\nCreate.\n```\n\nConnect\u306f\u3001IDisposable\u306a\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u8fd4\u3059\u3002\nSubscribe\u3067\u8fd4\u3055\u308c\u308bIDisposable\u3068\u540c\u69d8\u306b\u76e3\u8996\u3092\u89e3\u9664\u3059\u308b\u305f\u3081\u306b\u4f7f\u7528\u3059\u308b\u3002\n\n#### Publish\u306e\u5b9f\u88c5\n\nPublish\u306e\u5b9f\u88c5\u306f\u3001\u304b\u306a\u308a\u7701\u7565\u3057\u3066\u3044\u308b\u3068\u3053\u308d\u304c\u3042\u308b\u3082\u306e\u306e\u6b21\u306e\u3088\u3046\u306a\u5b9f\u88c5\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u3002\n\u8981\u3059\u308b\u306bSubject\u3092\u9593\u306b\u631f\u3093\u3067\u3044\u308b\u3060\u3051\u306b\u904e\u304e\u307e\u305b\u3093\u3002\n\n```csharp\npublic static IConnectableObservable<T> Publish<T>( this IObservable<T> source ) \n    => new MyPublishImp<T>( source );\n\npublic sealed class PublishImp<T> : IConnectableObservable<T> {\n\tprivate readonly IObservable<T> source;\n\tprivate readonly Subject<T> hot;\n\n\tpublic MyPublishImp( IObservable<T> source ) {\n\t\tthis.source = source;\n\t\tthis.hot = new Subject<T>();\n\t}\n\n\tpublic IDisposable Connect() => this.host.Subscribe( this.source );\n\n\tpublic IDisposable Subscribe( IObserver<T> observer ) => this.hot.Subscribe( observer );\n}\n```\n\n### RefCount\u30aa\u30da\u30ec\u30fc\u30bf\n\n\u3059\u3079\u3066\u306eSubscribe\u304c\u89e3\u9664\u3055\u308c\u305f\u3089\u3001Connect\u3067\u53d6\u5f97\u3057\u305fIDisposable\u3092Dispose\u3059\u308b\u3088\u3046\u306a\u5b9f\u88c5\u306f\u3001\u624b\u9593\u304c\u639b\u304b\u308a\u307e\u3059\u3002\n\u305d\u3053\u3089\u3078\u3093\u306e\u624b\u9593\u3092\u80a9\u4ee3\u308f\u308a\u3057\u3066\u304f\u308c\u308b\u306e\u304cRefCount\u3067\u3059\u3002\n\n```csharp\nvar provider = Observable.Create<string>( o => {\n\tConsole.WriteLine( \"Create.\" );\n\tvar created = DateTime.Now;\n\tint counter = 0;\n\treturn ThreadPoolScheduler.Instance.SchedulePeriodic( TimeSpan.FromSeconds( 1 ) , () => o.OnNext( $\"{counter++}. {created}\" ) );\n} )\n.Publish()\n.RefCount();\n\nprovider.Subscribe( x => Console.WriteLine( $\"A: {x}\" ) );\nprovider.Subscribe( x => Console.WriteLine( $\"B: {x}\" ) );\n```\n\n* Subscribe\u3055\u308c\u308b\u5ea6\u306b\u5185\u90e8\u30ab\u30a6\u30f3\u30bf\u3092\u30a4\u30f3\u30af\u30ea\u30e1\u30f3\u30c8\u3059\u308b\u3002\n* \u30ab\u30a6\u30f3\u30bf\u304c0\u304b\u30891\u306b\u5207\u308a\u66ff\u308f\u308b\u3068\u3001Connect\u3092\u5b9f\u884c\u3057\u3001\u89b3\u6e2c\u3092\u76e3\u8996\u3059\u308b\u3002\n* Dispose\u3059\u308b\u3068\u3001\u5185\u90e8\u30ab\u30a6\u30f3\u30bf\u304c\u30c7\u30af\u30ea\u30e1\u30f3\u30c8\u3055\u308c\u308b\u3002\n* \u30ab\u30a6\u30f3\u30bf\u304c0\u306b\u306a\u308b\u3068\u3001Connect\u3067\u53d6\u5f97\u3057\u305f\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092Dispose\u3057\u3001\u89b3\u6e2c\u3092\u89e3\u9664\u3059\u308b\u3002\n\n**Cold\u306a\u3082\u306e\u3092\u304a\u624b\u8efd\u306bHot\u3068\u3057\u3066\u516c\u958b\u3057\u305f\u3044\u306a\u3089Publish\u3057\u3066RefCount\u3068\u3059\u308b**\n\n```csharp:Cold->Hot\n.Publish()\n.RefCount();\n```\n\n\n\n", "tags": ["C#", "Rx"]}