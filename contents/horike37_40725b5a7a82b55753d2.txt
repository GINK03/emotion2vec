{"context": "\n\n\u6982\u8981\nAWS IoT Device Gateway\u306bpublish\u3057\u305f\u30c7\u30fc\u30bf\u3092websocket\u7d4c\u7531\u3067\u30d6\u30e9\u30a6\u30b6\u3067subscribe\u3057\u3066\u3001\u30b0\u30e9\u30d5\u5316\u3057\u307e\u3059\u3002\n\nPublisher\ntopic_2\u3068\u3044\u3046\u30c8\u30d4\u30c3\u30af\u306b\u5bfe\u3057\u3066\u30010,1,2,3\u3068\u30ab\u30a6\u30f3\u30c8\u30a2\u30c3\u30d7\u3057\u305f\u30c7\u30fc\u30bf\u3092publish\u3057\u307e\u3059\u3002\nvar count = 0;\nconst minimumDelay = 250;\ntimeout = setInterval(function() {\n  count++;\n  device.publish('topic_2', JSON.stringify({\n     mode1Process: count\n  }));\n}, minimumDelay);\n\n\nSubscriber\nAWS IoT\u306eMQTT over WebSocket\u306bHTML\u304b\u3089\u63a5\u7d9a\u3057\u3066\u307f\u305f\n\u3092\u53c2\u8003\u306b\u30d6\u30e9\u30a6\u30b6\u304b\u3089websocket\u3067\u30c7\u30fc\u30bf\u3092subscribe\u3057\u307e\u3059\u3002\n\u30ea\u30a2\u30eb\u30bf\u30a4\u30e0\u306a\u30b0\u30e9\u30d5\u53ef\u8996\u5316\u306fEpoch\u3068\u3044\u3046D3.js\u30d9\u30fc\u30b9\u306e\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u4f7f\u3044\u307e\u3059\u3002\n\u30bd\u30fc\u30b9\u306f\u4ee5\u4e0b\u306e\u901a\u308a\n<html lang=\"ja\">\n<body>\n  <script src=\"https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.11.2/moment.min.js\" type=\"text/javascript\"></script>\n  <script src=\"https://cdnjs.cloudflare.com/ajax/libs/crypto-js/3.1.2/components/core-min.js\" type=\"text/javascript\"></script>\n  <script src=\"https://cdnjs.cloudflare.com/ajax/libs/crypto-js/3.1.2/components/hmac-min.js\" type=\"text/javascript\"></script>\n  <script src=\"https://cdnjs.cloudflare.com/ajax/libs/crypto-js/3.1.2/components/sha256-min.js\" type=\"text/javascript\"></script>\n  <script src=\"https://code.jquery.com/jquery-2.2.2.min.js\"></script>\n  <script src=\"./mqttws31.js\" type=\"text/javascript\"></script>\n  <script src=\"http://d3js.org/d3.v3.min.js\" charset=\"utf-8\"></script>\n  <script src=\"./dist/js/epoch.min.js\"></script>\n  <link rel=\"stylesheet\" type=\"text/css\" href=\"./dist/css/epoch.min.css\">\n  <script type=\"text/javascript\">\n    var RealTimeData = function(layers) {\n        this.layers = layers;\n        this.timestamp = ((new Date()).getTime() / 1000)|0;\n    };\n\n\n    RealTimeData.prototype.history = function(entries) {\n        if (typeof(entries) != 'number' || !entries) {\n            entries = 1;\n        }\n\n        var history = [];\n        for (var k = 0; k < this.layers; k++) {\n            history.push({ values: [] });\n        }\n\n        for (var i = 0; i < entries; i++) {\n            for (var j = 0; j < this.layers; j++) {\n                history[j].values.push({time: this.timestamp, y: 10});\n            }\n            this.timestamp++;\n        }\n\n        return history;\n    };\n\n    RealTimeData.prototype.next = function(y) {\n        var entry = [];\n        for (var i = 0; i < this.layers; i++) {\n            entry.push({ time: this.timestamp, y: y });\n        }\n        this.timestamp++;\n        return entry;\n    }\n\n    window.RealTimeData = RealTimeData;\n\n\n$(function(){\n\n  var data = new RealTimeData(1);\n\n  var chart = $('#lineChart')\n   .epoch({\n        type: 'time.line',\n        data: data.history(),\n        axes: ['left', 'bottom']\n    });\n\n    var data_v = {\n      messages: []\n    };\n\n    function SigV4Utils(){}\n\n    SigV4Utils.sign = function(key, msg) {\n      var hash = CryptoJS.HmacSHA256(msg, key);\n      return hash.toString(CryptoJS.enc.Hex);\n    };\n\n    SigV4Utils.sha256 = function(msg) {\n      var hash = CryptoJS.SHA256(msg);\n      return hash.toString(CryptoJS.enc.Hex);\n    };\n\n    SigV4Utils.getSignatureKey = function(key, dateStamp, regionName, serviceName) {\n      var kDate = CryptoJS.HmacSHA256(dateStamp, 'AWS4' + key);\n      var kRegion = CryptoJS.HmacSHA256(regionName, kDate);\n      var kService = CryptoJS.HmacSHA256(serviceName, kRegion);\n      var kSigning = CryptoJS.HmacSHA256('aws4_request', kService);\n      return kSigning;\n    };\n\n    function createEndpoint(regionName, awsIotEndpoint, accessKey, secretKey) {\n      var time = moment.utc();\n      var dateStamp = time.format('YYYYMMDD');\n      var amzdate = dateStamp + 'T' + time.format('HHmmss') + 'Z';\n      var service = 'iotdevicegateway';\n      var region = regionName;\n      var secretKey = secretKey;\n      var accessKey = accessKey;\n      var algorithm = 'AWS4-HMAC-SHA256';\n      var method = 'GET';\n      var canonicalUri = '/mqtt';\n      var host = awsIotEndpoint;\n\n      var credentialScope = dateStamp + '/' + region + '/' + service + '/' + 'aws4_request';\n      var canonicalQuerystring = 'X-Amz-Algorithm=AWS4-HMAC-SHA256';\n      canonicalQuerystring += '&X-Amz-Credential=' + encodeURIComponent(accessKey + '/' + credentialScope);\n      canonicalQuerystring += '&X-Amz-Date=' + amzdate;\n      canonicalQuerystring += '&X-Amz-SignedHeaders=host';\n\n      var canonicalHeaders = 'host:' + host + '\\n';\n      var payloadHash = SigV4Utils.sha256('');\n      var canonicalRequest = method + '\\n' + canonicalUri + '\\n' + canonicalQuerystring + '\\n' + canonicalHeaders + '\\nhost\\n' + payloadHash;\n\n      var stringToSign = algorithm + '\\n' +  amzdate + '\\n' +  credentialScope + '\\n' +  SigV4Utils.sha256(canonicalRequest);\n      var signingKey = SigV4Utils.getSignatureKey(secretKey, dateStamp, region, service);\n      var signature = SigV4Utils.sign(signingKey, stringToSign);\n\n      canonicalQuerystring += '&X-Amz-Signature=' + signature;\n      return 'wss://' + host + canonicalUri + '?' + canonicalQuerystring;\n    }\n\n    var endpoint = createEndpoint(\n        'us-east-1', // Your Region\n        '<aws iot endpoint>', // Require 'lowercamelcase'!!\n        '<YOUR_AWS_ACCESS_KEY>',\n        '<YOUR_AWS_SECRET_ACCESS_KEY>');\n    var clientId = Math.random().toString(36).substring(7);\n    var client = new Paho.MQTT.Client(endpoint, clientId);\n    var connectOptions = {\n      useSSL: true,\n      timeout: 3,\n      mqttVersion: 4,\n      onSuccess: subscribe\n    };\n    client.connect(connectOptions);\n    client.onMessageArrived = onMessage;\n    client.onConnectionLost = function(e) { console.log(e) };\n\n    function subscribe() {\n      client.subscribe(\"topic_2\");\n      console.log(\"subscribed\");\n    }\n\n    function onMessage(message) {\n      console.log(\"message received: \" + message.payloadString);\n      chart.push(data.next(JSON.parse(message.payloadString).mode1Process));\n    }\n});\n  </script>\n  <div id=\"lineChart\" class=\"epoch\" style=\"width: 100%; height: 100px;border:solid 1px #C0C0C0;\"></div>\n<script>\n\n</script>\n</body>\n</html>\n\n\n\u7d50\u679c\n\u3053\u3093\u306a\u611f\u3058\u3067\u30ea\u30a2\u30eb\u30bf\u30a4\u30e0\u306b\u30b0\u30e9\u30d5\u304c\u63cf\u753b\u3055\u308c\u307e\u3059\n\n## \u6982\u8981\nAWS IoT Device Gateway\u306bpublish\u3057\u305f\u30c7\u30fc\u30bf\u3092websocket\u7d4c\u7531\u3067\u30d6\u30e9\u30a6\u30b6\u3067subscribe\u3057\u3066\u3001\u30b0\u30e9\u30d5\u5316\u3057\u307e\u3059\u3002\n\n## Publisher\ntopic_2\u3068\u3044\u3046\u30c8\u30d4\u30c3\u30af\u306b\u5bfe\u3057\u3066\u30010,1,2,3\u3068\u30ab\u30a6\u30f3\u30c8\u30a2\u30c3\u30d7\u3057\u305f\u30c7\u30fc\u30bf\u3092publish\u3057\u307e\u3059\u3002\n\n```js\nvar count = 0;\nconst minimumDelay = 250;\ntimeout = setInterval(function() {\n  count++;\n  device.publish('topic_2', JSON.stringify({\n     mode1Process: count\n  }));\n}, minimumDelay);\n```\n\n## Subscriber\n[AWS IoT\u306eMQTT over WebSocket\u306bHTML\u304b\u3089\u63a5\u7d9a\u3057\u3066\u307f\u305f](http://dev.classmethod.jp/cloud/aws/aws-iot-mqtt-over-websocket/)\n\u3092\u53c2\u8003\u306b\u30d6\u30e9\u30a6\u30b6\u304b\u3089websocket\u3067\u30c7\u30fc\u30bf\u3092subscribe\u3057\u307e\u3059\u3002\n\n\u30ea\u30a2\u30eb\u30bf\u30a4\u30e0\u306a\u30b0\u30e9\u30d5\u53ef\u8996\u5316\u306f[Epoch](http://epochjs.github.io/epoch/)\u3068\u3044\u3046D3.js\u30d9\u30fc\u30b9\u306e\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u4f7f\u3044\u307e\u3059\u3002\n\n\u30bd\u30fc\u30b9\u306f\u4ee5\u4e0b\u306e\u901a\u308a\n\n```js\n<html lang=\"ja\">\n<body>\n  <script src=\"https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.11.2/moment.min.js\" type=\"text/javascript\"></script>\n  <script src=\"https://cdnjs.cloudflare.com/ajax/libs/crypto-js/3.1.2/components/core-min.js\" type=\"text/javascript\"></script>\n  <script src=\"https://cdnjs.cloudflare.com/ajax/libs/crypto-js/3.1.2/components/hmac-min.js\" type=\"text/javascript\"></script>\n  <script src=\"https://cdnjs.cloudflare.com/ajax/libs/crypto-js/3.1.2/components/sha256-min.js\" type=\"text/javascript\"></script>\n  <script src=\"https://code.jquery.com/jquery-2.2.2.min.js\"></script>\n  <script src=\"./mqttws31.js\" type=\"text/javascript\"></script>\n  <script src=\"http://d3js.org/d3.v3.min.js\" charset=\"utf-8\"></script>\n  <script src=\"./dist/js/epoch.min.js\"></script>\n  <link rel=\"stylesheet\" type=\"text/css\" href=\"./dist/css/epoch.min.css\">\n  <script type=\"text/javascript\">\n    var RealTimeData = function(layers) {\n        this.layers = layers;\n        this.timestamp = ((new Date()).getTime() / 1000)|0;\n    };\n\n\n    RealTimeData.prototype.history = function(entries) {\n        if (typeof(entries) != 'number' || !entries) {\n            entries = 1;\n        }\n\n        var history = [];\n        for (var k = 0; k < this.layers; k++) {\n            history.push({ values: [] });\n        }\n\n        for (var i = 0; i < entries; i++) {\n            for (var j = 0; j < this.layers; j++) {\n                history[j].values.push({time: this.timestamp, y: 10});\n            }\n            this.timestamp++;\n        }\n\n        return history;\n    };\n\n    RealTimeData.prototype.next = function(y) {\n        var entry = [];\n        for (var i = 0; i < this.layers; i++) {\n            entry.push({ time: this.timestamp, y: y });\n        }\n        this.timestamp++;\n        return entry;\n    }\n\n    window.RealTimeData = RealTimeData;\n\n\n$(function(){\n\n  var data = new RealTimeData(1);\n\n  var chart = $('#lineChart')\n   .epoch({\n        type: 'time.line',\n        data: data.history(),\n        axes: ['left', 'bottom']\n    });\n\n    var data_v = {\n      messages: []\n    };\n \n    function SigV4Utils(){}\n \n    SigV4Utils.sign = function(key, msg) {\n      var hash = CryptoJS.HmacSHA256(msg, key);\n      return hash.toString(CryptoJS.enc.Hex);\n    };\n \n    SigV4Utils.sha256 = function(msg) {\n      var hash = CryptoJS.SHA256(msg);\n      return hash.toString(CryptoJS.enc.Hex);\n    };\n \n    SigV4Utils.getSignatureKey = function(key, dateStamp, regionName, serviceName) {\n      var kDate = CryptoJS.HmacSHA256(dateStamp, 'AWS4' + key);\n      var kRegion = CryptoJS.HmacSHA256(regionName, kDate);\n      var kService = CryptoJS.HmacSHA256(serviceName, kRegion);\n      var kSigning = CryptoJS.HmacSHA256('aws4_request', kService);\n      return kSigning;\n    };\n \n    function createEndpoint(regionName, awsIotEndpoint, accessKey, secretKey) {\n      var time = moment.utc();\n      var dateStamp = time.format('YYYYMMDD');\n      var amzdate = dateStamp + 'T' + time.format('HHmmss') + 'Z';\n      var service = 'iotdevicegateway';\n      var region = regionName;\n      var secretKey = secretKey;\n      var accessKey = accessKey;\n      var algorithm = 'AWS4-HMAC-SHA256';\n      var method = 'GET';\n      var canonicalUri = '/mqtt';\n      var host = awsIotEndpoint;\n \n      var credentialScope = dateStamp + '/' + region + '/' + service + '/' + 'aws4_request';\n      var canonicalQuerystring = 'X-Amz-Algorithm=AWS4-HMAC-SHA256';\n      canonicalQuerystring += '&X-Amz-Credential=' + encodeURIComponent(accessKey + '/' + credentialScope);\n      canonicalQuerystring += '&X-Amz-Date=' + amzdate;\n      canonicalQuerystring += '&X-Amz-SignedHeaders=host';\n \n      var canonicalHeaders = 'host:' + host + '\\n';\n      var payloadHash = SigV4Utils.sha256('');\n      var canonicalRequest = method + '\\n' + canonicalUri + '\\n' + canonicalQuerystring + '\\n' + canonicalHeaders + '\\nhost\\n' + payloadHash;\n \n      var stringToSign = algorithm + '\\n' +  amzdate + '\\n' +  credentialScope + '\\n' +  SigV4Utils.sha256(canonicalRequest);\n      var signingKey = SigV4Utils.getSignatureKey(secretKey, dateStamp, region, service);\n      var signature = SigV4Utils.sign(signingKey, stringToSign);\n \n      canonicalQuerystring += '&X-Amz-Signature=' + signature;\n      return 'wss://' + host + canonicalUri + '?' + canonicalQuerystring;\n    }\n \n    var endpoint = createEndpoint(\n        'us-east-1', // Your Region\n        '<aws iot endpoint>', // Require 'lowercamelcase'!!\n        '<YOUR_AWS_ACCESS_KEY>',\n        '<YOUR_AWS_SECRET_ACCESS_KEY>');\n    var clientId = Math.random().toString(36).substring(7);\n    var client = new Paho.MQTT.Client(endpoint, clientId);\n    var connectOptions = {\n      useSSL: true,\n      timeout: 3,\n      mqttVersion: 4,\n      onSuccess: subscribe\n    };\n    client.connect(connectOptions);\n    client.onMessageArrived = onMessage;\n    client.onConnectionLost = function(e) { console.log(e) };\n \n    function subscribe() {\n      client.subscribe(\"topic_2\");\n      console.log(\"subscribed\");\n    }\n \n    function onMessage(message) {\n      console.log(\"message received: \" + message.payloadString);\n      chart.push(data.next(JSON.parse(message.payloadString).mode1Process));\n    }\n});\n  </script>\n  <div id=\"lineChart\" class=\"epoch\" style=\"width: 100%; height: 100px;border:solid 1px #C0C0C0;\"></div>\n<script>\n\n</script>\n</body>\n</html>\n```\n\n## \u7d50\u679c\n\u3053\u3093\u306a\u611f\u3058\u3067\u30ea\u30a2\u30eb\u30bf\u30a4\u30e0\u306b\u30b0\u30e9\u30d5\u304c\u63cf\u753b\u3055\u308c\u307e\u3059\n[![AWS IoT\u306eMQTT over WebSocket\u3067HTML\u3067subscribe\u3057\u305f\u30c7\u30fc\u30bf\u3092\u30ea\u30a2\u30eb\u30bf\u30a4\u30e0\u30b0\u30e9\u30d5\u5316\u3059\u308b](https://i.ytimg.com/vi/CbwtFvRbL0I/hqdefault.jpg)](https://www.youtube.com/watch?v=CbwtFvRbL0I)\n", "tags": ["AWS", "awsIoT", "websocket", "d3.js"]}