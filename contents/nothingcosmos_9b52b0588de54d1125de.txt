{"tags": ["C\u8a00\u8a9e", "C++", "api"], "context": " \u3053\u306e\u8a18\u4e8b\u306f\u6700\u7d42\u66f4\u65b0\u65e5\u304b\u30891\u5e74\u4ee5\u4e0a\u304c\u7d4c\u904e\u3057\u3066\u3044\u307e\u3059\u3002C\u8a00\u8a9e\u3078\u306e\u611f\u8b1d\u306e\u6b63\u62f3\u7a81\u304d 4\u65e5\u76ee\u3067\u3059\u3002\n\u3069\u3046\u3082\u6700\u8fd1\u3001\u793e\u5185\u3067\n\u300cC\u306eAdventCalendar\u3092\u4e57\u3063\u53d6\u3063\u3066C++\u306e\u30b9\u30c6\u30de\u3092\u3059\u308b\u306a\u3093\u3066\u3001\u3001\u3001\u3001\u300d\n\u306a\u3069\u3068\u3044\u3046\u8aa4\u89e3\u3092\u62db\u3044\u3066\u3044\u308b\u3089\u3057\u304f\u3001\n\u305d\u306e\u8aa4\u89e3\u3092\u6674\u3089\u3059\u305f\u3081\u306b\u3082\u3001\u30de\u30af\u30ed\u30cd\u30bf\u306f\u6b62\u3081\u3066\u3001\nC\u306eAPI\u306b\u95a2\u3057\u3066\u7d39\u4ecb\u3057\u3088\u3046\u3068\u601d\u3044\u307e\u3059\u3002\n\n\u6982\u8981\nFlat C API\u3068\u3044\u3046\u306e\u306f\u3001\u300cC++\u306e\u305f\u3081\u306eAPI\u30c7\u30b6\u30a4\u30f3\u300d\u3068\u3044\u3046\u672c\u3067\u7d39\u4ecb\u3055\u308c\u3066\u3044\u308bAPI\u306e\u5206\u985e\u306e\u3046\u3061\u306e\u4e00\u3064\u3067\u3001\u3001\n\u3053\u3061\u3089\u306e\u6295\u7a3f\u304c\u5927\u5909\u308f\u304b\u308a\u3084\u3059\u304f\u7e8f\u3081\u3089\u308c\u3066\u3044\u307e\u3059\u3002\nhttp://qiita.com/narumi888/items/dcae9a58dfd63adc68b4\n\u307e\u305f\u306f\u3001\u3053\u3061\u3089\u306eCppCon2014\u306e\u8cc7\u6599\u304c\u5927\u5909\u8a73\u3057\u3044\u3067\u3059\u3002\nhttps://github.com/CppCon/CppCon2014/tree/master/Presentations/Hourglass%20Interfaces%20for%20C%2B%2B%20APIs\nFlat C API\u3068\u3044\u3046\u306e\u306f\u3001\u3056\u3063\u304f\u308a\u3044\u3046\u3068\u3001C89\u306e\u95a2\u6570 + opaque pointer\u3067\u69cb\u6210\u3055\u308c\u305fAPI\u306e\u3053\u3068\u3067\u3001\nC++\u306e\u30e9\u30a4\u30d6\u30e9\u30ea\u304cFlat C API\u3082\u4e26\u884c\u3057\u3066\u63d0\u4f9b\u3057\u3066\u3044\u308b\u3053\u3068\u304c\u3042\u308a\u307e\u3059\u3002\nC++\u306eAPI\u3092Flat C API\u306b\u5909\u63db\u3057\u3066\u5916\u90e8\u306b\u516c\u958b\u3059\u308b\u306e\u306f\u3001C++\u306eAPI\u3092C\u304b\u3089\u4f7f\u3044\u3084\u3059\u304f\u3059\u308b\u3053\u3068\u3082\u3042\u308a\u307e\u3059\u304c\u3001\n\u30e9\u30a4\u30d6\u30e9\u30ea\u306eABI\u4e92\u63db\u6027\u3092\u4fdd\u3061\u3084\u3059\u304f\u3057\u307e\u3059\u3002\n\n\u5177\u4f53\u4f8b\nleveldb\u304b\u3089\u5f15\u7528\u3057\u307e\u3059\u3002\nhttps://github.com/google/leveldb/blob/master/include/leveldb/c.h\n// A DB is a persistent ordered map from keys to values.\n// A DB is safe for concurrent access from multiple threads without\n// any external synchronization.\nclass DB {\n public:\n  // Open the database with the specified \"name\".\n  // Stores a pointer to a heap-allocated database in *dbptr and returns\n  // OK on success.\n  // Stores NULL in *dbptr and returns a non-OK status on error.\n  // Caller should delete *dbptr when it is no longer needed.\n  static Status Open(const Options& options,\n                     const std::string& name,\n                     DB** dbptr);\n\n  DB() { }\n  virtual ~DB();\n\n  // Set the database entry for \"key\" to \"value\".  Returns OK on success,\n  // and a non-OK status on error.\n  // Note: consider setting options.sync = true.\n  virtual Status Put(const WriteOptions& options,\n                     const Slice& key,\n                     const Slice& value) = 0;\n\n  // Remove the database entry (if any) for \"key\".  Returns OK on\n  // success, and a non-OK status on error.  It is not an error if \"key\"\n  // did not exist in the database.\n  // Note: consider setting options.sync = true.\n  virtual Status Delete(const WriteOptions& options, const Slice& key) = 0;\n\n  // If the database contains an entry for \"key\" store the\n  // corresponding value in *value and return OK.\n  //\n  // If there is no entry for \"key\" leave *value unchanged and return\n  // a status for which Status::IsNotFound() returns true.\n  //\n  // May return some other Status on an error.\n  virtual Status Get(const ReadOptions& options,\n                     const Slice& key, std::string* value) = 0;\n\n\nC++\u306eAPI\u4ee5\u5916\u306b\u3001C\u306e\u95a2\u6570\u304c\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u307e\u3059\u3002\n\ninclude/leveldb/c.h\n\n/* Exported types */\n\ntypedef struct leveldb_t               leveldb_t;\ntypedef struct leveldb_options_t       leveldb_options_t;\ntypedef struct leveldb_readoptions_t   leveldb_readoptions_t;\ntypedef struct leveldb_writeoptions_t  leveldb_writeoptions_t;\n/* DB operations */\n\nextern leveldb_t* leveldb_open(\n    const leveldb_options_t* options,\n    const char* name,\n    char** errptr);\n\nextern void leveldb_close(leveldb_t* db);\n\nextern void leveldb_put(\n    leveldb_t* db,\n    const leveldb_writeoptions_t* options,\n    const char* key, size_t keylen,\n    const char* val, size_t vallen,\n    char** errptr);\n\nextern void leveldb_delete(\n    leveldb_t* db,\n    const leveldb_writeoptions_t* options,\n    const char* key, size_t keylen,\n    char** errptr);\n\n/* Returns NULL if not found.  A malloc()ed array otherwise.\n   Stores the length of the array in *vallen. */\nextern char* leveldb_get(\n    leveldb_t* db,\n    const leveldb_readoptions_t* options,\n    const char* key, size_t keylen,\n    size_t* vallen,\n    char** errptr);\n\n\n\n\u6bd4\u8f03\u3057\u3066\u307f\u308b\u3068\u5206\u304b\u308a\u307e\u3059\u304c\u3001\nC++\u306eclass\u3092opaque pointer\u306b\u3057\u3001\n\u5404\u30e1\u30bd\u30c3\u30c9\u306f\u3001\u7b2c\u4e00\u5f15\u6570\u306bopaque pointer\u3092\u3068\u308bC\u306e\u95a2\u6570\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u3002\n\n\u5916\u90e8\u306b\u516c\u958b\u3059\u308b\u30b7\u30f3\u30dc\u30eb\u306e\u5236\u5fa1(attribute)\nFlat C API\u3068\u3057\u3066\u5916\u90e8\u306b\u516c\u958b\u3059\u308b\u4ee5\u5916\u306b\u3082\u3001\n\u4e0d\u8981\u306a\u30b7\u30f3\u30dc\u30eb\u3092\u5916\u90e8\u306b\u516c\u958b\u3057\u306a\u3044\u3088\u3046\u306b\u5236\u5fa1\u3059\u308b\u3053\u3068\u306b\u3088\u308a\u3001ABI\u4e92\u63db\u6027\u3092\u4fdd\u3061\u3084\u3059\u304f\u306a\u308a\u307e\u3059\u3002\nleveldb\u672c\u5bb6\u3067\u306f\u884c\u308f\u308c\u3066\u3044\u307e\u305b\u3093\u304c\u3001BoostCon2014\u306e\u8cc7\u6599\u306e\u307b\u3046\u3067\u306f\u3001\n\u30de\u30af\u30ed(attribute)\u3092\u4f7f\u3063\u3066\u5916\u90e8\u306b\u516c\u958b\u3059\u308b\u95a2\u6570\u306evisibility\u3092\u30b3\u30f3\u30c8\u30ed\u30fc\u30eb\u3057\u3066\u3044\u307e\u3059\u3002\nhttps://github.com/CppCon/CppCon2014/blob/master/Presentations/Hourglass%20Interfaces%20for%20C%2B%2B%20APIs/code/visibility.h\n\nvisibility.h\n#pragma once\n\n#if defined(_WIN32) || defined(__CYGWIN__)\n  #ifdef hairpoll_EXPORTS\n    #ifdef __GNUC__\n      #define HAIRPOLL_EXPORT __attribute__ ((dllexport))\n    #else\n      #define HAIRPOLL_EXPORT __declspec(dllexport)\n    #endif\n  #else\n    #ifdef __GNUC__\n      #define HAIRPOLL_EXPORT __attribute__ ((dllimport))\n    #else\n      #define HAIRPOLL_EXPORT __declspec(dllimport)\n    #endif\n  #endif\n#else\n  #if __GNUC__ >= 4\n    #define HAIRPOLL_EXPORT __attribute__ ((visibility (\"default\")))\n  #else\n    #define HAIRPOLL_EXPORT\n  #endif\n#endif\n\n\n\n\u5916\u90e8\u306b\u516c\u958b\u3059\u308b\u30b7\u30f3\u30dc\u30eb\u306e\u5236\u5fa1(Linker)\n\u5916\u90e8\u306b\u516c\u958b\u3059\u308b\u30b7\u30f3\u30dc\u30eb\u306b\u95a2\u3057\u3066\u306f\u3001linker\u3067\u3055\u3089\u306b\u7d30\u304b\u304f\u5236\u5fa1\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\nLinker\u3067\u306e\u5236\u5fa1\u304c\u5fc5\u8981\u306b\u306a\u308b\u306e\u306f\u3001\u4ed6\u306e\u30e9\u30a4\u30d6\u30e9\u30ea\u3092static link\u3057\u305f\u969b\u306b\u3001\u30e9\u30a4\u30d6\u30e9\u30ea\u306e\u4e0d\u8981\u306a\u30b7\u30f3\u30dc\u30eb\u3092\u96a0\u3057\u305f\u3044\u3068\u304d\u306a\u3069\u3067\u3059\u3002\n\u4f8b\u3092\u3042\u3052\u308b\u3068\u3001C++\u306eAPI\u3092Flat C API\u3068\u3057\u3066\u516c\u958b\u3057\u305f\u4e0a\u3067\u3001\u5185\u90e8\u3067\u4f7f\u7528\u3057\u3066\u3044\u308bSTL\u3084Boost\u306e\u30b7\u30f3\u30dc\u30eb\u304c\u5916\u90e8\u306b\u6f0f\u308c\u306a\u3044\u3088\u3046\u306b\u3059\u308b\u3068\u304d\u3067\u3057\u3087\u3046\u304b\u3002\nWindows\u306e\u5834\u5408\u3001\u30e2\u30b8\u30e5\u30fc\u30eb\u5b9a\u7fa9\u30d5\u30a1\u30a4\u30eb\u3092\u7528\u610f\u3059\u308c\u3070\u3088\u3044\u3067\u3059\u3002\nhttps://msdn.microsoft.com/ja-jp/library/28d6s79h.aspx\n\nleveldb.def\nLIBRARY leveldb\nEXPORTS\n        leveldb_open\n        leveldb_close\n        leveldb_get\n        leveldb_delete\n        leveldb_put\n\n\n\nLinux\u306e\u5834\u5408\u3001ld\u306e\u5165\u529b\u306b\u6307\u5b9a\u3059\u308bversion script\u3067\u540c\u69d8\u306e\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\nhttp://www.scoberlin.de/content/media/http/informatik/gcc_docs/ld_3.html#SEC39\n\nleveldb.map\n{\n  global:\n  leveldb_open;\n  leveldb_close;\n  leveldb_get;\n  leveldb_delete;\n  leveldb_put;\n  local: *;\n};\n\n\n\nmap\u30d5\u30a1\u30a4\u30eb\u306e\u5148\u982d\u306bBOM\u3068\u304b\u4ed8\u3044\u3066\u308b\u3068link error\u306b\u306a\u308b\u306e\u3067\u6ce8\u610f\u304c\u5fc5\u8981\u3067\u3059\u3002\n\u307e\u305f\u3001ld.bfd ld.gold\u306e\u53cc\u65b9\u304c\u30b5\u30dd\u30fc\u30c8\u3057\u3066\u3044\u307e\u3059\u3002\n\n\u6700\u5f8c\u306b\nABI\u4e92\u63db\u304c\u4fdd\u305f\u308c\u305fFlat C API\u306e\u4e0a\u306b\u3001\u3055\u3089\u306bModern\u306aC++\u306e\u30d8\u30c3\u30c0\u30fb\u30aa\u30f3\u30ea\u30fc\u30fb\u30e9\u30a4\u30d6\u30e9\u30ea\u30ec\u30a4\u30e4\u3092\u88ab\u305b\u308b\u3053\u3068\u306b\u3088\u308a\u3001\u3088\u308a\u4f7f\u3044\u3084\u3059\u3044\u30e9\u30a4\u30d6\u30e9\u30ea\u304c\u69cb\u7bc9\u3067\u304d\u308b\u3088\u3046\u3067\u3059\u3002\n\u4ee5\u4e0a\nC\u8a00\u8a9e\u3078\u306e\u611f\u8b1d\u306e\u6b63\u62f3\u7a81\u304d 4\u65e5\u76ee\u3067\u3059\u3002\n\n\u3069\u3046\u3082\u6700\u8fd1\u3001\u793e\u5185\u3067\n\u300cC\u306eAdventCalendar\u3092\u4e57\u3063\u53d6\u3063\u3066C++\u306e\u30b9\u30c6\u30de\u3092\u3059\u308b\u306a\u3093\u3066\u3001\u3001\u3001\u3001\u300d\n\u306a\u3069\u3068\u3044\u3046\u8aa4\u89e3\u3092\u62db\u3044\u3066\u3044\u308b\u3089\u3057\u304f\u3001\n\u305d\u306e\u8aa4\u89e3\u3092\u6674\u3089\u3059\u305f\u3081\u306b\u3082\u3001\u30de\u30af\u30ed\u30cd\u30bf\u306f\u6b62\u3081\u3066\u3001\nC\u306eAPI\u306b\u95a2\u3057\u3066\u7d39\u4ecb\u3057\u3088\u3046\u3068\u601d\u3044\u307e\u3059\u3002\n\n#\u6982\u8981\n\nFlat C API\u3068\u3044\u3046\u306e\u306f\u3001\u300cC++\u306e\u305f\u3081\u306eAPI\u30c7\u30b6\u30a4\u30f3\u300d\u3068\u3044\u3046\u672c\u3067\u7d39\u4ecb\u3055\u308c\u3066\u3044\u308bAPI\u306e\u5206\u985e\u306e\u3046\u3061\u306e\u4e00\u3064\u3067\u3001\u3001\n\u3053\u3061\u3089\u306e\u6295\u7a3f\u304c\u5927\u5909\u308f\u304b\u308a\u3084\u3059\u304f\u7e8f\u3081\u3089\u308c\u3066\u3044\u307e\u3059\u3002\nhttp://qiita.com/narumi888/items/dcae9a58dfd63adc68b4\n\n\u307e\u305f\u306f\u3001\u3053\u3061\u3089\u306eCppCon2014\u306e\u8cc7\u6599\u304c\u5927\u5909\u8a73\u3057\u3044\u3067\u3059\u3002\nhttps://github.com/CppCon/CppCon2014/tree/master/Presentations/Hourglass%20Interfaces%20for%20C%2B%2B%20APIs\n\nFlat C API\u3068\u3044\u3046\u306e\u306f\u3001\u3056\u3063\u304f\u308a\u3044\u3046\u3068\u3001C89\u306e\u95a2\u6570 + opaque pointer\u3067\u69cb\u6210\u3055\u308c\u305fAPI\u306e\u3053\u3068\u3067\u3001\nC++\u306e\u30e9\u30a4\u30d6\u30e9\u30ea\u304cFlat C API\u3082\u4e26\u884c\u3057\u3066\u63d0\u4f9b\u3057\u3066\u3044\u308b\u3053\u3068\u304c\u3042\u308a\u307e\u3059\u3002\nC++\u306eAPI\u3092Flat C API\u306b\u5909\u63db\u3057\u3066\u5916\u90e8\u306b\u516c\u958b\u3059\u308b\u306e\u306f\u3001C++\u306eAPI\u3092C\u304b\u3089\u4f7f\u3044\u3084\u3059\u304f\u3059\u308b\u3053\u3068\u3082\u3042\u308a\u307e\u3059\u304c\u3001\n\u30e9\u30a4\u30d6\u30e9\u30ea\u306eABI\u4e92\u63db\u6027\u3092\u4fdd\u3061\u3084\u3059\u304f\u3057\u307e\u3059\u3002\n\n# \u5177\u4f53\u4f8b\nleveldb\u304b\u3089\u5f15\u7528\u3057\u307e\u3059\u3002\nhttps://github.com/google/leveldb/blob/master/include/leveldb/c.h\n\n```C++:\n// A DB is a persistent ordered map from keys to values.\n// A DB is safe for concurrent access from multiple threads without\n// any external synchronization.\nclass DB {\n public:\n  // Open the database with the specified \"name\".\n  // Stores a pointer to a heap-allocated database in *dbptr and returns\n  // OK on success.\n  // Stores NULL in *dbptr and returns a non-OK status on error.\n  // Caller should delete *dbptr when it is no longer needed.\n  static Status Open(const Options& options,\n                     const std::string& name,\n                     DB** dbptr);\n\n  DB() { }\n  virtual ~DB();\n\n  // Set the database entry for \"key\" to \"value\".  Returns OK on success,\n  // and a non-OK status on error.\n  // Note: consider setting options.sync = true.\n  virtual Status Put(const WriteOptions& options,\n                     const Slice& key,\n                     const Slice& value) = 0;\n\n  // Remove the database entry (if any) for \"key\".  Returns OK on\n  // success, and a non-OK status on error.  It is not an error if \"key\"\n  // did not exist in the database.\n  // Note: consider setting options.sync = true.\n  virtual Status Delete(const WriteOptions& options, const Slice& key) = 0;\n\n  // If the database contains an entry for \"key\" store the\n  // corresponding value in *value and return OK.\n  //\n  // If there is no entry for \"key\" leave *value unchanged and return\n  // a status for which Status::IsNotFound() returns true.\n  //\n  // May return some other Status on an error.\n  virtual Status Get(const ReadOptions& options,\n                     const Slice& key, std::string* value) = 0;\n\n```\n\nC++\u306eAPI\u4ee5\u5916\u306b\u3001C\u306e\u95a2\u6570\u304c\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u307e\u3059\u3002\n\n```C:include/leveldb/c.h\n\n/* Exported types */\n\ntypedef struct leveldb_t               leveldb_t;\ntypedef struct leveldb_options_t       leveldb_options_t;\ntypedef struct leveldb_readoptions_t   leveldb_readoptions_t;\ntypedef struct leveldb_writeoptions_t  leveldb_writeoptions_t;\n/* DB operations */\n\nextern leveldb_t* leveldb_open(\n    const leveldb_options_t* options,\n    const char* name,\n    char** errptr);\n\nextern void leveldb_close(leveldb_t* db);\n\nextern void leveldb_put(\n    leveldb_t* db,\n    const leveldb_writeoptions_t* options,\n    const char* key, size_t keylen,\n    const char* val, size_t vallen,\n    char** errptr);\n\nextern void leveldb_delete(\n    leveldb_t* db,\n    const leveldb_writeoptions_t* options,\n    const char* key, size_t keylen,\n    char** errptr);\n\n/* Returns NULL if not found.  A malloc()ed array otherwise.\n   Stores the length of the array in *vallen. */\nextern char* leveldb_get(\n    leveldb_t* db,\n    const leveldb_readoptions_t* options,\n    const char* key, size_t keylen,\n    size_t* vallen,\n    char** errptr);\n\n```\n\u6bd4\u8f03\u3057\u3066\u307f\u308b\u3068\u5206\u304b\u308a\u307e\u3059\u304c\u3001\nC++\u306eclass\u3092opaque pointer\u306b\u3057\u3001\n\u5404\u30e1\u30bd\u30c3\u30c9\u306f\u3001\u7b2c\u4e00\u5f15\u6570\u306bopaque pointer\u3092\u3068\u308bC\u306e\u95a2\u6570\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u3002\n\n\n# \u5916\u90e8\u306b\u516c\u958b\u3059\u308b\u30b7\u30f3\u30dc\u30eb\u306e\u5236\u5fa1(attribute)\n\nFlat C API\u3068\u3057\u3066\u5916\u90e8\u306b\u516c\u958b\u3059\u308b\u4ee5\u5916\u306b\u3082\u3001\n\u4e0d\u8981\u306a\u30b7\u30f3\u30dc\u30eb\u3092\u5916\u90e8\u306b\u516c\u958b\u3057\u306a\u3044\u3088\u3046\u306b\u5236\u5fa1\u3059\u308b\u3053\u3068\u306b\u3088\u308a\u3001ABI\u4e92\u63db\u6027\u3092\u4fdd\u3061\u3084\u3059\u304f\u306a\u308a\u307e\u3059\u3002\n\nleveldb\u672c\u5bb6\u3067\u306f\u884c\u308f\u308c\u3066\u3044\u307e\u305b\u3093\u304c\u3001BoostCon2014\u306e\u8cc7\u6599\u306e\u307b\u3046\u3067\u306f\u3001\n\u30de\u30af\u30ed(attribute)\u3092\u4f7f\u3063\u3066\u5916\u90e8\u306b\u516c\u958b\u3059\u308b\u95a2\u6570\u306evisibility\u3092\u30b3\u30f3\u30c8\u30ed\u30fc\u30eb\u3057\u3066\u3044\u307e\u3059\u3002\n\nhttps://github.com/CppCon/CppCon2014/blob/master/Presentations/Hourglass%20Interfaces%20for%20C%2B%2B%20APIs/code/visibility.h\n\n\n```C:visibility.h\n#pragma once\n\n#if defined(_WIN32) || defined(__CYGWIN__)\n  #ifdef hairpoll_EXPORTS\n    #ifdef __GNUC__\n      #define HAIRPOLL_EXPORT __attribute__ ((dllexport))\n    #else\n      #define HAIRPOLL_EXPORT __declspec(dllexport)\n    #endif\n  #else\n    #ifdef __GNUC__\n      #define HAIRPOLL_EXPORT __attribute__ ((dllimport))\n    #else\n      #define HAIRPOLL_EXPORT __declspec(dllimport)\n    #endif\n  #endif\n#else\n  #if __GNUC__ >= 4\n    #define HAIRPOLL_EXPORT __attribute__ ((visibility (\"default\")))\n  #else\n    #define HAIRPOLL_EXPORT\n  #endif\n#endif\n```\n\n# \u5916\u90e8\u306b\u516c\u958b\u3059\u308b\u30b7\u30f3\u30dc\u30eb\u306e\u5236\u5fa1(Linker)\n\n\u5916\u90e8\u306b\u516c\u958b\u3059\u308b\u30b7\u30f3\u30dc\u30eb\u306b\u95a2\u3057\u3066\u306f\u3001linker\u3067\u3055\u3089\u306b\u7d30\u304b\u304f\u5236\u5fa1\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\nLinker\u3067\u306e\u5236\u5fa1\u304c\u5fc5\u8981\u306b\u306a\u308b\u306e\u306f\u3001\u4ed6\u306e\u30e9\u30a4\u30d6\u30e9\u30ea\u3092static link\u3057\u305f\u969b\u306b\u3001\u30e9\u30a4\u30d6\u30e9\u30ea\u306e\u4e0d\u8981\u306a\u30b7\u30f3\u30dc\u30eb\u3092\u96a0\u3057\u305f\u3044\u3068\u304d\u306a\u3069\u3067\u3059\u3002\n\u4f8b\u3092\u3042\u3052\u308b\u3068\u3001C++\u306eAPI\u3092Flat C API\u3068\u3057\u3066\u516c\u958b\u3057\u305f\u4e0a\u3067\u3001\u5185\u90e8\u3067\u4f7f\u7528\u3057\u3066\u3044\u308bSTL\u3084Boost\u306e\u30b7\u30f3\u30dc\u30eb\u304c\u5916\u90e8\u306b\u6f0f\u308c\u306a\u3044\u3088\u3046\u306b\u3059\u308b\u3068\u304d\u3067\u3057\u3087\u3046\u304b\u3002\nWindows\u306e\u5834\u5408\u3001\u30e2\u30b8\u30e5\u30fc\u30eb\u5b9a\u7fa9\u30d5\u30a1\u30a4\u30eb\u3092\u7528\u610f\u3059\u308c\u3070\u3088\u3044\u3067\u3059\u3002\nhttps://msdn.microsoft.com/ja-jp/library/28d6s79h.aspx\n\n```C:leveldb.def\nLIBRARY leveldb\nEXPORTS\n        leveldb_open\n        leveldb_close\n        leveldb_get\n        leveldb_delete\n        leveldb_put\n\n```\n\nLinux\u306e\u5834\u5408\u3001ld\u306e\u5165\u529b\u306b\u6307\u5b9a\u3059\u308bversion script\u3067\u540c\u69d8\u306e\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\nhttp://www.scoberlin.de/content/media/http/informatik/gcc_docs/ld_3.html#SEC39\n\n```C:leveldb.map\n{\n  global:\n  leveldb_open;\n  leveldb_close;\n  leveldb_get;\n  leveldb_delete;\n  leveldb_put;\n  local: *;\n};\n\n```\n\nmap\u30d5\u30a1\u30a4\u30eb\u306e\u5148\u982d\u306bBOM\u3068\u304b\u4ed8\u3044\u3066\u308b\u3068link error\u306b\u306a\u308b\u306e\u3067\u6ce8\u610f\u304c\u5fc5\u8981\u3067\u3059\u3002\n\u307e\u305f\u3001ld.bfd ld.gold\u306e\u53cc\u65b9\u304c\u30b5\u30dd\u30fc\u30c8\u3057\u3066\u3044\u307e\u3059\u3002\n\n# \u6700\u5f8c\u306b\n\nABI\u4e92\u63db\u304c\u4fdd\u305f\u308c\u305fFlat C API\u306e\u4e0a\u306b\u3001\u3055\u3089\u306bModern\u306aC++\u306e\u30d8\u30c3\u30c0\u30fb\u30aa\u30f3\u30ea\u30fc\u30fb\u30e9\u30a4\u30d6\u30e9\u30ea\u30ec\u30a4\u30e4\u3092\u88ab\u305b\u308b\u3053\u3068\u306b\u3088\u308a\u3001\u3088\u308a\u4f7f\u3044\u3084\u3059\u3044\u30e9\u30a4\u30d6\u30e9\u30ea\u304c\u69cb\u7bc9\u3067\u304d\u308b\u3088\u3046\u3067\u3059\u3002\n\n\u4ee5\u4e0a\n\n"}