{"tags": ["ESP8266", "ESP-WROOM-02", "milkcocoa", "Arduino", "nefry"], "context": "\u30cf\u30fc\u30c9\u30a6\u30a8\u30a2\u3092\u9060\u9694\u64cd\u4f5c\u3067\u304d\u308b\u3088\u3046\u306b\u3059\u308b\u306e\u306f\u3001Milkcocoa\u3092\u4f7f\u3048\u3070\u7c21\u5358\u306b\u3067\u304d\u307e\u3059\uff01\u8352\u524a\u308a\u306a\u306e\u3067\u5909\u66f4\u304a\u5f85\u3061\u3057\u3066\u304a\u308a\u307e\u3059\u3002\n\n\u5fc5\u8981\u3068\u306a\u308b\u3082\u306e\nESP8266\uff08\u65e5\u672c\u3067\u306fESP-WROOM-02\uff09\n\u30a4\u30f3\u30bf\u30fc\u30cd\u30c3\u30c8\u63a5\u7d9a\nMilkcocoa\u306eAPPID\n\n\u3067\u304d\u308b\u3053\u3068\n\npinMode\npinPullup\ndigitalRead\ndigitalWrite\nanalogRead\nanalogWrite\nuartMode\nuartWrite\nuartRead\nReset\nSleep\n\n\n\u30d7\u30ed\u30b0\u30e9\u30e0\u306e\u89e3\u8aac\n\u3053\u3061\u3089\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u306f\u3001Nefry\u3067\u4f7f\u3046\u3053\u3068\u3092\u30d9\u30fc\u30b9\u306b\u8003\u3048\u3089\u308c\u3066\u3044\u308b\u306e\u3067\u3001Wifi\u63a5\u7d9a\u306a\u3069\u304c\u3042\u308a\u307e\u305b\u3093\u3002Nefry\u4ee5\u5916\u306eESP8266\u3067\u4f7f\u3046\u5834\u5408\u306fWifi\u63a5\u7d9a\u3059\u308b\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u30b3\u30e1\u30f3\u30c8\u30a2\u30a6\u30c8\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n\u30d7\u30ed\u30b0\u30e9\u30e0\u306eAPP_ID\u306b\u3054\u81ea\u8eab\u306eID\u3092\u5165\u529b\u3059\u308b\u3053\u3068\u3067\u4f7f\u3046\u3053\u3068\u304c\u53ef\u80fd\u306b\u306a\u308a\u307e\u3059\uff01\nMilkcocoa\u306b\u30c7\u30fc\u30bf\u3092\u9001\u4fe1\u3059\u308b\u90e8\u5206\u306f\u3054\u81ea\u8eab\u3067\u3064\u304f\u3063\u3066\u307f\u3066\u304f\u3060\u3055\u3044\u3002\uff08\u79c1\u304cWeb\u5074\u304c\u5f37\u304f\u306a\u3044\u306e\u3067\u2026\uff09\n\nMilkcocoa\u304b\u3089ESP8266\u3078\u30c7\u30fc\u30bf\u3092\u9001\u308b\u3068\u304d\npin,mode,state\u3092\u9001\u4fe1\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n\nESP8266\u304b\u3089Milkcocoa\u3078\u30c7\u30fc\u30bf\u3092\u9001\u308b\u3068\u304d\nMilkcocoa\u304b\u3089\u306e\u30c7\u30fc\u30bf\u304c\u5b9f\u884c\u3055\u308c\u305f\u3068\u304d\u30010\u304c\u8fd4\u3055\u308c\u3001ESP8266\u304b\u3089\u30c7\u30fc\u30bf\u53d6\u3063\u305f\u6642\u306b\u306f\u305d\u306e\u30c7\u30fc\u30bf\u3082\u4ed8\u5c5e\u3057\u307e\u3059\u3002\n\narduino.ino\n#include <Milkcocoa.h>\n#include <ESP8266WiFi.h>\n/************************* Your Milkcocoa Setup *********************************/\n#define MILKCOCOA_APP_ID      \"\"\n#define MILKCOCOA_DATASTORE   \"arduino\"\n#define MILKCOCOA_DATASTORE_SEND   \"arduino_send\"\n\n#define MILKCOCOA_SERVERPORT  1883\nWiFiClient client;\nconst char MQTT_SERVER[] PROGMEM    = MILKCOCOA_APP_ID \".mlkcca.com\";\nconst char MQTT_CLIENTID[] PROGMEM  = __TIME__ MILKCOCOA_APP_ID;\n\nMilkcocoa milkcocoa = Milkcocoa(&client, MQTT_SERVER, MILKCOCOA_SERVERPORT, MILKCOCOA_APP_ID, MQTT_CLIENTID);\n\nvoid setup() {\n/*  \n  WiFi.begin(WLAN_SSID, WLAN_PASS);\n  while (WiFi.status() != WL_CONNECTED) {\n    delay(500);\n    Serial.print(\".\");\n  }\n*/\n  milkcocoa.on(MILKCOCOA_DATASTORE, \"push\", arduino);\n}\n\nvoid loop() {\n  milkcocoa.loop();\n}\n\nvoid arduino(DataElement elem) {\n  Serial.println(\"onpush\");\n  DataElement Send = DataElement();\n  String mode_setting = elem.getString(\"mode\");\n  int pin=pins(elem.getString(\"pin\"));\n  String state =states(elem.getString(\"state\"));\n  Serial.println(mode_setting.toInt());\n  switch (mode_setting.toInt()) {\n      int send_data;\n    case 1: //pinMode\n      pinMode(pin,state.toInt()); //state INPUT or OUTPUT\n      Send.setValue(\"return\", 0);\n      break;\n    case 2: //pinPullup\n      pinMode(pin, INPUT_PULLUP);\n      Send.setValue(\"return\", 0);\n      break;\n    case 3: //digitalRead\n      send_data = digitalRead(pin); //HorL\n      Send.setValue(\"return\", 0);\n      Send.setValue(\"send_data\", send_data);\n      //upload\n      break;\n    case 4: //digitalWrite\n      digitalWrite(pin, state.toInt()); //state HIGH(3.3v)orLOW(0v)\n      Send.setValue(\"return\", 0);\n      break;\n    case 5: //analogRead\n      send_data = analogRead(A0); //max1024\n      Send.setValue(\"return\", 0);\n      Send.setValue(\"send_data\", send_data);\n      //upload\n      break;\n    case 6: //analogWrite(pwm)\n      //D2,D3,D4pin\u306e\u307f\u6709\u52b9\n      analogWrite(pin, state.toInt()); //state max255(3.3v)~min0(0v)\n      Send.setValue(\"return\", 0);\n      break;\n    case 7: //uartMode(Baudrate)\n      Serial.begin(state.toInt());//9600,14400,19200,28800,38400,57600,115200\u306e\u4e2d\u304b\u3089\u9078\u629e\n      Send.setValue(\"return\", 0);\n      break;\n    case 8: //uartWrite\n      Serial.print(state);\n      Send.setValue(\"return\", 0);\n      break;\n    case 9: //uartRead\n      Serial.println(\"uartread\");\n      char read_char[128], i, w;\n      i = 0;\n      w = 0;\n      while (Serial.available() <= 0 || w != 10) {\n        Serial.println(\"check\");\n        while (Serial.available() > 0) {\n          Serial.println(\"char get!\");\n          read_char[i] = Serial.read();\n          if (i > 127 || read_char[i] == '\\n' || read_char[i] == '\\r') {\n            read_char[i - 1] = '\\0';\n            Serial.write(read_char);\n            Serial.write(\"\\n\");\n            break;\n          }\n          i++;\n        }\n        if (i != 0)break;\n        delay(500);\n      }\n      Send.setValue(\"return\", 0);\n      Send.setValue(\"send_data\", read_char);\n      //upload\n      break;\n    case 10: //reset\n      Send.setValue(\"return\", 0);\n      Send.setValue(\"mode_setting\", elem.getString(\"mode\"));\n      milkcocoa.push(MILKCOCOA_DATASTORE_SEND, Send);\n      delay(1000);\n      ESP.restart();\n      break;\n    case 11: //sleep\n      Send.setValue(\"return\", 0);\n      Send.setValue(\"mode_setting\",elem.getString(\"mode\"));\n      milkcocoa.push(MILKCOCOA_DATASTORE_SEND, Send);\n      delay(1000);\n      ESP.deepSleep(state.toInt() * 1000 * 1000 , WAKE_RF_DEFAULT);\n      delay(1000);\n      break;\n    case 12: //i2cMode\n      //Wire.begin();\n      break;\n    case 13: //i2cWrite\n      break;\n    case 14: //i2cRead\n      break;\n    case 15:\n      break;\n    case 16:\n      break;\n    case 17:\n      break;\n    //\n    default:\n      Send.setValue(\"return\", 1);\n      break;\n  }\n  Send.setValue(\"mode_setting\", elem.getString(\"mode\"));\n  milkcocoa.push(MILKCOCOA_DATASTORE_SEND, Send);\n  Serial.println(\"Send\");\n}\nint pins(String pinS){\n  int pin;\nif(pinS.toInt()==0){\n    pin=D0;\n  }else if(pinS.toInt()==1){\n    pin=D1;\n  }else if(pinS.toInt()==2){\n    pin=D2;\n  }else if(pinS.toInt()==3){\n    pin=D3;\n  }else if(pinS.toInt()==4){\n    pin=D4;\n  }else if(pinS.toInt()==5){\n    pin=D5;\n  }\nreturn pin;\n}\nString states(String stateS){\n  String state;\nif(stateS.compareTo(\"high\")==0){\n    state=\"1\";\n  }else if(stateS.compareTo(\"HIGH\")==0){\n    state=\"1\";\n  }else if(stateS.compareTo(\"low\")==0){\n    state=\"0\";\n  }else if(stateS.compareTo(\"LOW\")==0){\n    state=\"0\";\n  }else if(stateS.compareTo(\"OUTPUT\")==0){\n    state=\"1\";\n  }else if(stateS.compareTo(\"output\")==0){\n    state=\"1\";\n  }else if(stateS.compareTo(\"INPUT \")==0){\n    state=\"0\";\n  }else if(stateS.compareTo(\"input\")==0){\n    state=\"0\";\n  }else{\n    state=stateS;\n  }\nreturn state;\n}\n\n\n\n\u30c7\u30e2\nLED\u3092Web\u30da\u30fc\u30b8\u304b\u3089\u64cd\u4f5c\u3059\u308b\u30c7\u30e2\u306b\u306a\u308a\u307e\u3059\u3002\n\n\u30cf\u30fc\u30c9\u30a6\u30a8\u30a2\u3092\u9060\u9694\u64cd\u4f5c\u3067\u304d\u308b\u3088\u3046\u306b\u3059\u308b\u306e\u306f\u3001Milkcocoa\u3092\u4f7f\u3048\u3070\u7c21\u5358\u306b\u3067\u304d\u307e\u3059\uff01\u8352\u524a\u308a\u306a\u306e\u3067\u5909\u66f4\u304a\u5f85\u3061\u3057\u3066\u304a\u308a\u307e\u3059\u3002\n\n#\u5fc5\u8981\u3068\u306a\u308b\u3082\u306e\nESP8266\uff08\u65e5\u672c\u3067\u306fESP-WROOM-02\uff09\n\u30a4\u30f3\u30bf\u30fc\u30cd\u30c3\u30c8\u63a5\u7d9a\nMilkcocoa\u306eAPPID\n#\u3067\u304d\u308b\u3053\u3068\n- pinMode\n- pinPullup\n- digitalRead\n- digitalWrite\n- analogRead\n- analogWrite\n- uartMode\n- uartWrite\n- uartRead\n- Reset\n- Sleep\n\n\n#\u30d7\u30ed\u30b0\u30e9\u30e0\u306e\u89e3\u8aac\n\u3053\u3061\u3089\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u306f\u3001Nefry\u3067\u4f7f\u3046\u3053\u3068\u3092\u30d9\u30fc\u30b9\u306b\u8003\u3048\u3089\u308c\u3066\u3044\u308b\u306e\u3067\u3001Wifi\u63a5\u7d9a\u306a\u3069\u304c\u3042\u308a\u307e\u305b\u3093\u3002Nefry\u4ee5\u5916\u306eESP8266\u3067\u4f7f\u3046\u5834\u5408\u306fWifi\u63a5\u7d9a\u3059\u308b\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u30b3\u30e1\u30f3\u30c8\u30a2\u30a6\u30c8\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n\u30d7\u30ed\u30b0\u30e9\u30e0\u306eAPP_ID\u306b\u3054\u81ea\u8eab\u306eID\u3092\u5165\u529b\u3059\u308b\u3053\u3068\u3067\u4f7f\u3046\u3053\u3068\u304c\u53ef\u80fd\u306b\u306a\u308a\u307e\u3059\uff01\nMilkcocoa\u306b\u30c7\u30fc\u30bf\u3092\u9001\u4fe1\u3059\u308b\u90e8\u5206\u306f\u3054\u81ea\u8eab\u3067\u3064\u304f\u3063\u3066\u307f\u3066\u304f\u3060\u3055\u3044\u3002\uff08\u79c1\u304cWeb\u5074\u304c\u5f37\u304f\u306a\u3044\u306e\u3067\u2026\uff09\n\n##Milkcocoa\u304b\u3089ESP8266\u3078\u30c7\u30fc\u30bf\u3092\u9001\u308b\u3068\u304d\npin,mode,state\u3092\u9001\u4fe1\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n##ESP8266\u304b\u3089Milkcocoa\u3078\u30c7\u30fc\u30bf\u3092\u9001\u308b\u3068\u304d\nMilkcocoa\u304b\u3089\u306e\u30c7\u30fc\u30bf\u304c\u5b9f\u884c\u3055\u308c\u305f\u3068\u304d\u30010\u304c\u8fd4\u3055\u308c\u3001ESP8266\u304b\u3089\u30c7\u30fc\u30bf\u53d6\u3063\u305f\u6642\u306b\u306f\u305d\u306e\u30c7\u30fc\u30bf\u3082\u4ed8\u5c5e\u3057\u307e\u3059\u3002\n\n```cpp:arduino.ino\n#include <Milkcocoa.h>\n#include <ESP8266WiFi.h>\n/************************* Your Milkcocoa Setup *********************************/\n#define MILKCOCOA_APP_ID      \"\"\n#define MILKCOCOA_DATASTORE   \"arduino\"\n#define MILKCOCOA_DATASTORE_SEND   \"arduino_send\"\n\n#define MILKCOCOA_SERVERPORT  1883\nWiFiClient client;\nconst char MQTT_SERVER[] PROGMEM    = MILKCOCOA_APP_ID \".mlkcca.com\";\nconst char MQTT_CLIENTID[] PROGMEM  = __TIME__ MILKCOCOA_APP_ID;\n\nMilkcocoa milkcocoa = Milkcocoa(&client, MQTT_SERVER, MILKCOCOA_SERVERPORT, MILKCOCOA_APP_ID, MQTT_CLIENTID);\n\nvoid setup() {\n/*  \n  WiFi.begin(WLAN_SSID, WLAN_PASS);\n  while (WiFi.status() != WL_CONNECTED) {\n    delay(500);\n    Serial.print(\".\");\n  }\n*/\n  milkcocoa.on(MILKCOCOA_DATASTORE, \"push\", arduino);\n}\n\nvoid loop() {\n  milkcocoa.loop();\n}\n\nvoid arduino(DataElement elem) {\n  Serial.println(\"onpush\");\n  DataElement Send = DataElement();\n  String mode_setting = elem.getString(\"mode\");\n  int pin=pins(elem.getString(\"pin\"));\n  String state =states(elem.getString(\"state\"));\n  Serial.println(mode_setting.toInt());\n  switch (mode_setting.toInt()) {\n      int send_data;\n    case 1: //pinMode\n      pinMode(pin,state.toInt()); //state INPUT or OUTPUT\n      Send.setValue(\"return\", 0);\n      break;\n    case 2: //pinPullup\n      pinMode(pin, INPUT_PULLUP);\n      Send.setValue(\"return\", 0);\n      break;\n    case 3: //digitalRead\n      send_data = digitalRead(pin); //HorL\n      Send.setValue(\"return\", 0);\n      Send.setValue(\"send_data\", send_data);\n      //upload\n      break;\n    case 4: //digitalWrite\n      digitalWrite(pin, state.toInt()); //state HIGH(3.3v)orLOW(0v)\n      Send.setValue(\"return\", 0);\n      break;\n    case 5: //analogRead\n      send_data = analogRead(A0); //max1024\n      Send.setValue(\"return\", 0);\n      Send.setValue(\"send_data\", send_data);\n      //upload\n      break;\n    case 6: //analogWrite(pwm)\n      //D2,D3,D4pin\u306e\u307f\u6709\u52b9\n      analogWrite(pin, state.toInt()); //state max255(3.3v)~min0(0v)\n      Send.setValue(\"return\", 0);\n      break;\n    case 7: //uartMode(Baudrate)\n      Serial.begin(state.toInt());//9600,14400,19200,28800,38400,57600,115200\u306e\u4e2d\u304b\u3089\u9078\u629e\n      Send.setValue(\"return\", 0);\n      break;\n    case 8: //uartWrite\n      Serial.print(state);\n      Send.setValue(\"return\", 0);\n      break;\n    case 9: //uartRead\n      Serial.println(\"uartread\");\n      char read_char[128], i, w;\n      i = 0;\n      w = 0;\n      while (Serial.available() <= 0 || w != 10) {\n        Serial.println(\"check\");\n        while (Serial.available() > 0) {\n          Serial.println(\"char get!\");\n          read_char[i] = Serial.read();\n          if (i > 127 || read_char[i] == '\\n' || read_char[i] == '\\r') {\n            read_char[i - 1] = '\\0';\n            Serial.write(read_char);\n            Serial.write(\"\\n\");\n            break;\n          }\n          i++;\n        }\n        if (i != 0)break;\n        delay(500);\n      }\n      Send.setValue(\"return\", 0);\n      Send.setValue(\"send_data\", read_char);\n      //upload\n      break;\n    case 10: //reset\n      Send.setValue(\"return\", 0);\n      Send.setValue(\"mode_setting\", elem.getString(\"mode\"));\n      milkcocoa.push(MILKCOCOA_DATASTORE_SEND, Send);\n      delay(1000);\n      ESP.restart();\n      break;\n    case 11: //sleep\n      Send.setValue(\"return\", 0);\n      Send.setValue(\"mode_setting\",elem.getString(\"mode\"));\n      milkcocoa.push(MILKCOCOA_DATASTORE_SEND, Send);\n      delay(1000);\n      ESP.deepSleep(state.toInt() * 1000 * 1000 , WAKE_RF_DEFAULT);\n      delay(1000);\n      break;\n    case 12: //i2cMode\n      //Wire.begin();\n      break;\n    case 13: //i2cWrite\n      break;\n    case 14: //i2cRead\n      break;\n    case 15:\n      break;\n    case 16:\n      break;\n    case 17:\n      break;\n    //\n    default:\n      Send.setValue(\"return\", 1);\n      break;\n  }\n  Send.setValue(\"mode_setting\", elem.getString(\"mode\"));\n  milkcocoa.push(MILKCOCOA_DATASTORE_SEND, Send);\n  Serial.println(\"Send\");\n}\nint pins(String pinS){\n  int pin;\nif(pinS.toInt()==0){\n    pin=D0;\n  }else if(pinS.toInt()==1){\n    pin=D1;\n  }else if(pinS.toInt()==2){\n    pin=D2;\n  }else if(pinS.toInt()==3){\n    pin=D3;\n  }else if(pinS.toInt()==4){\n    pin=D4;\n  }else if(pinS.toInt()==5){\n    pin=D5;\n  }\nreturn pin;\n}\nString states(String stateS){\n  String state;\nif(stateS.compareTo(\"high\")==0){\n    state=\"1\";\n  }else if(stateS.compareTo(\"HIGH\")==0){\n    state=\"1\";\n  }else if(stateS.compareTo(\"low\")==0){\n    state=\"0\";\n  }else if(stateS.compareTo(\"LOW\")==0){\n    state=\"0\";\n  }else if(stateS.compareTo(\"OUTPUT\")==0){\n    state=\"1\";\n  }else if(stateS.compareTo(\"output\")==0){\n    state=\"1\";\n  }else if(stateS.compareTo(\"INPUT \")==0){\n    state=\"0\";\n  }else if(stateS.compareTo(\"input\")==0){\n    state=\"0\";\n  }else{\n    state=stateS;\n  }\nreturn state;\n}\n```\n\n#\u30c7\u30e2\nLED\u3092Web\u30da\u30fc\u30b8\u304b\u3089\u64cd\u4f5c\u3059\u308b\u30c7\u30e2\u306b\u306a\u308a\u307e\u3059\u3002\n[![\u30cf\u30fc\u30c9\u30a6\u30a8\u30a2\u3092\u30ea\u30e2\u30fc\u30c8\u64cd\u4f5c\u3059\u308b\u30c7\u30e2\u306b\u306a\u308a\u307e\u3059](http://img.youtube.com/vi/DRLvA3r7zU4/0.jpg)](https://youtu.be/DRLvA3r7zU4)\n"}