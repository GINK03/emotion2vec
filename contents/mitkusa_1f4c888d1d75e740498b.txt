{"context": "\n\nSpring Boot Reference Guide\u306e\u81ea\u5206\u7528\u30e1\u30e2(\u4e0b\u66f8\u304d\u4e2d)\nSpringBoot\u3092\u4f7f\u7528\u3057\u305fWeb\u30a2\u30d7\u30ea\u3092\u958b\u767a\u3057\u3088\u3046\u3068\u3057\u3066\u3044\u307e\u3059\u3002\n\u96f0\u56f2\u6c17\u7684\u306b\u306f\u7c21\u5358\u305d\u3046\u3067\u306f\u3042\u308b\u3082\u306e\u306e\u3001\u826f\u304f\u308f\u304b\u3089\u306a\u3044\u3068\u3053\u308d\u304c\u591a\u3044\u306e\u3067\u3001\u307e\u305a\u306fReference Guide\u3092\u8aad\u3093\u3067\u3044\u3066\u5fc5\u8981\u305d\u3046\u306a\u9805\u76ee\u3092\u30d4\u30c3\u30af\u30a2\u30c3\u30d7\u3057\u3066\u30e1\u30e2\u3057\u3066\u3044\u307e\u3059\u3002\n\u539f\u6587\u3068\u65e5\u672c\u8a9e\u30e1\u30e2\u306e\u5bfe\u6bd4\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u304c\u3001\u65e5\u672c\u8a9e\u30e1\u30e2\u306f\u539f\u6587\u3092\u8a33\u3057\u305f\u3082\u306e\u3067\u306f\u306a\u304f\u3001\u81ea\u5206\u7528\u306e\u30e1\u30e2\u3067\u3042\u308b\u70b9\u306b\u6ce8\u610f\u3067\u3059\u3002\n\u69cb\u6210\u30c4\u30fc\u30eb\u306f\u4e3b\u306bGradle\u306b\u95a2\u4fc2\u306e\u3042\u308b\u3082\u306e\u3057\u304b\u30d4\u30c3\u30af\u30a2\u30c3\u30d7\u3057\u3066\u3044\u307e\u305b\u3093\u3002\nReferenceGuide\u3092\u8aad\u3093\u3067\u307f\u305f\u3044\u3051\u3069\u3001\u82f1\u8a9e\u306f\u30c1\u30e7\u30c3\u30c8\u30fb\u30fb\u30fb\u3002\n\u3068\u3044\u3046\u65b9\u306e\u304a\u5f79\u306b\u7acb\u3066\u3070\u5e78\u3044\u3067\u3059\u3002\n\uff03Qiita\u3078\u306e\u6295\u7a3f\u306f\u521d\u3081\u3066\u3067\u3001\u4f7f\u3044\u3053\u306a\u305b\u3066\u3044\u306a\u3044\u90e8\u5206\u304c\u591a\u3005\u3042\u308a\u6050\u7e2e\u3067\u3059\u3002\n\n\u53c2\u7167\u5143\nSpring Boot Reference Guide (version 1.3.5.RELEASE)\n\n\n11.3.1 The @RestController and @RequestMapping annotations\nThe @RequestMapping annotation provides \u201crouting\u201d information. It is telling Spring that any HTTP request with the path \u201c/\u201d should be mapped to the home method. The @RestController annotation tells Spring to render the resulting string directly back to the caller.\n\n@RequestMapping annotation\u306b\u306f\u30eb\u30fc\u30c6\u30a3\u30f3\u30b0\u60c5\u5831\u3092\u8a18\u8f09\u3059\u308b\u3002\n@RequestMapping(\"/hello\")\u3068\u3059\u308b\u3068\u3001\u30ea\u30af\u30a8\u30b9\u30c8URL\u306e/hello\u30d1\u30b9\u3092\u51e6\u7406\u3059\u308b\u3053\u3068\u3092\u5ba3\u8a00\u3057\u305f\u3053\u3068\u306b\u306a\u308b\u3002\n\n\n11.3.2 The @EnableAutoConfiguration annotation\n\n\u81ea\u52d5\u30b3\u30f3\u30d5\u30a3\u30ae\u30e5\u30ec\u30fc\u30b7\u30e7\u30f3\u306e\u6709\u52b9\u5316\n\n\n11.3.3 The \u201cmain\u201d method\nThe final part of our application is the main method. This is just a standard method that follows the Java convention for an application entry point. Our main method delegates to Spring Boot\u2019s SpringApplication class by calling run. \n\nmain()\u30e1\u30bd\u30c3\u30c9\u3092\u7528\u610f\u3057\u3066\u3001\u305d\u306e\u4e2d\u3067SpringApplication.run()\u3092\u5b9f\u884c\u3059\u308b\u3002\nrun()\u30e1\u30bd\u30c3\u30c9\u306e\u5f15\u6570\u306b\u306f\u3001main()\u30e1\u30bd\u30c3\u30c9\u3092\u5b9f\u88c5\u3057\u305f\u30af\u30e9\u30b9\u3092\u8a2d\u5b9a\u3059\u308b\u3002\n\u30b3\u30de\u30f3\u30c9\u30e9\u30a4\u30f3\u5f15\u6570\u306frun()\u30e1\u30bd\u30c3\u30c9\u306b\u900f\u904e\u7684\u306b\u6e21\u3055\u308c\u308b(?)\n\n\n13.3 Gradle\nGradle users can directly import \u201cstarter POMs\u201d in their dependencies section. Unlike Maven, there is no \u201csuper parent\u201d to import to share some configuration.\n\nGradle\u30e6\u30fc\u30b6\u30fc\u306f\u3001\"starter POMs\"\u3092dependencies section\u306b\u8a18\u8f09\u3059\u308b\u3002\nmaven\u306e\u3088\u3046\u306a\u201csuper parent\u201d \u306f\u5b58\u5728\u3057\u306a\u3044\u3002\n\nThe spring-boot-gradle-plugin is also available and provides tasks to create executable jars and run projects from source. \n\nspring-boot-gradle-plugin\u3092\u5229\u7528\u3059\u308b\u3068\u3001\u5b9f\u884c\u53ef\u80fdjar\u3084\u30bf\u30b9\u30af\u306e\u5b9f\u884c\u304c\u53ef\u80fd\n\n\n13.5 Starter POMs\n\nTable 13.1. Spring Boot application starters\n\nStarter POMs\u306e\u4e00\u89a7\u306fTable 13.1\u3092\u53c2\u7167\u3002\n\uff03\u7de8\u96c6\u6ce8\u8a18\uff1a\u4e00\u5ea6\u898b\u3066\u304a\u3044\u305f\u307b\u3046\u304c\u3088\u3055\u305d\u3046\u3002\n\nFinally, Spring Boot includes some starters that can be used if you want to exclude or swap specific technical facets.\n\nTable 13.3. Spring Boot technical starters\n\nSpring Boot\u306f\u3044\u304f\u3064\u304b\u306estarter\u3092\u542b\u3093\u3067\u3044\u308b\u304c\u3001\u9664\u5916\u3057\u305f\u308a\u4ea4\u63db\u3057\u305f\u308a\u3067\u304d\u308b\u3002\n\n\n14. Structuring your code\n\n\u30d5\u30a9\u30eb\u30c0\u30fc\u69cb\u6210\n\n\n14.1 Using the \u201cdefault\u201d package\nWhen a class doesn\u2019t include a package declaration it is considered to be in the \u201cdefault package\u201d. The use of the \u201cdefault package\u201d is generally discouraged, and should be avoided. It can cause particular problems for Spring Boot applications that use @ComponentScan, @EntityScan or @SpringBootApplication annotations, since every class from every jar, will be read.\n\n\"default package\"\u306e\u4f7f\u7528\u306f\u3055\u3051\u308b\u3079\u3057\u3002\n\nWe recommend that you follow Java\u2019s recommended package naming conventions and use a reversed domain name (for example, com.example.project).\n\n\u9006\u30c9\u30e1\u30a4\u30f3\u5f62\u5f0f\u306e\u30d1\u30c3\u30b1\u30fc\u30b8\u304c\u671b\u307e\u3057\u3044\u3002\n\n\n14.2 Locating the main application class\nWe generally recommend that you locate your main application class in a root package above other classes. The @EnableAutoConfiguration annotation is often placed on your main class, and it implicitly defines a base \u201csearch package\u201d for certain items. For example, if you are writing a JPA application, the package of the @EnableAutoConfiguration annotated class will be used to search for @Entity items.\n\n\u30eb\u30fc\u30c8\u30d1\u30c3\u30b1\u30fc\u30b8\u306b\u30e1\u30a4\u30f3\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u30af\u30e9\u30b9\u3092\u914d\u7f6e\u3057\u305f\u307b\u3046\u304c\u3044\u3044\u3002\n@EnableAutoConfiguration\u3092\u8a2d\u5b9a\u3057\u305f\u30af\u30e9\u30b9\u306e\u30d1\u30c3\u30b1\u30fc\u30b8\u914d\u4e0b\u304c\u30b9\u30ad\u30e3\u30f3\u5bfe\u8c61\u306b\u306a\u308b\u3002\n\uff08\u901a\u5e38\u30e1\u30a4\u30f3\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u30af\u30e9\u30b9\u306b@EnableAutoConfiguration\u3092\u8a2d\u5b9a\u3059\u308b\uff09\n\n\n15. Configuration classes\nSpring Boot favors Java-based configuration. Although it is possible to call SpringApplication.run() with an XML source, we generally recommend that your primary source is a @Configuration class. Usually the class that defines the main method is also a good candidate as the primary @Configuration.\n\nConfiguration\u306fXML\u30d5\u30a1\u30a4\u30eb\u3088\u308aJava\u30af\u30e9\u30b9\u30d9\u30fc\u30b9\u304c\u304a\u52e7\u3081\u3002\uff08\u3060\u305d\u3046\u3067\u3059\uff09\n\n\n15.2 Importing XML configuration\nIf you absolutely must use XML based configuration, we recommend that you still start with a @Configuration class. You can then use an additional @ImportResource annotation to load XML configuration files.\n\n\u3069\u3046\u3057\u3066\u3082Configuration\u3092XML\u3067\u884c\u3044\u305f\u3044\u5834\u5408\u3001@ImportResource\u3092\u4f7f\u3046\u3053\u3068\u304c\u3067\u304d\u308b\u3002\n\n\n16. Auto-configuration\nYou need to opt-in to auto-configuration by adding the @EnableAutoConfiguration or @SpringBootApplication annotations to one of your @Configuration classes.\n\n\u81ea\u52d5\u8a2d\u5b9a\u3092\u6709\u52b9\u306b\u3059\u308b\u306b\u306f\u3001@Configuration\u30af\u30e9\u30b9\u306b@EnableAutoConfiguration\u304b@SpringBootApplication\u3092\u8a2d\u5b9a\u3057\u307e\u3059\u3002\n\uff03\u7de8\u96c6\u6ce8\u8a18\uff1a\u5b9f\u306f@SpringBootApplication\u306b@EnableAutoConfiguration\u3068@Configuration\u304c\u542b\u307e\u308c\u3066\u3044\u308b\u3002\n\n\n16.1 Gradually replacing auto-configuration\nAuto-configuration is noninvasive, at any point you can start to define your own configuration to replace specific parts of the auto-configuration. For example, if you add your own DataSource bean, the default embedded database support will back away.\n\n\u81ea\u52d5\u8a2d\u5b9a\u306f\u3001\u7f6e\u304d\u63db\u3048\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3088\u3002\n\nIf you need to find out what auto-configuration is currently being applied, and why, start your application with the --debug switch. This will log an auto-configuration report to the console.\n\n--debug\u30b9\u30a4\u30c3\u30c1\u3092\u4f7f\u3046\u3068\u3001console\u306b\u73fe\u5728\u306e\u81ea\u52d5\u8a2d\u5b9a\u304c\u51fa\u529b\u3055\u308c\u307e\u3059\u3002\n\n\n16.2 Disabling specific auto-configuration\nIf you find that specific auto-configure classes are being applied that you don\u2019t want, you can use the exclude attribute of @EnableAutoConfiguration to disable them.\n\n@EnableAutoConfiguration(exclude={DataSourceAutoConfiguration.class})\u3067\u6307\u5b9a\u3057\u305f\u81ea\u52d5\u8a2d\u5b9a\u3092\u7121\u52b9\u5316\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\nIf the class is not on the classpath, you can use the excludeName attribute of the annotation and specify the fully qualified name instead. Finally, you can also control the list of auto-configuration classes to exclude via the spring.autoconfigure.exclude property.\n\n\u9664\u5916\u3059\u308b\u30af\u30e9\u30b9\u304cclasspath\u306b\u7121\u3044\u5834\u5408\u306fexcludeName\u3092\u6307\u5b9a\u3059\u308b\u3053\u3068\u3082\u3067\u304d\u308b\u3002\n\u307e\u305f\u3001spring.autoconfigure.exclude\u30d7\u30ed\u30d1\u30c6\u30a3\u3067\u3082\u540c\u69d8\u306e\u3053\u3068\u304c\u53ef\u80fd\u3002\n\n\n17. Spring Beans and dependency injection\nYou are free to use any of the standard Spring Framework techniques to define your beans and their injected dependencies. For simplicity, we often find that using @ComponentScan to find your beans, in combination with @Autowired constructor injection works well.\nIf you structure your code as suggested above (locating your application class in a root package), you can add @ComponentScan without any arguments. All of your application components (@Component, @Service, @Repository, @Controller etc.) will be automatically registered as Spring Beans.\nHere is an example @Service Bean that uses constructor injection to obtain a required RiskAssessor bean.\n\n\u30d1\u30c3\u30b1\u30fc\u30b8\u30eb\u30fc\u30c8\u306e\u30af\u30e9\u30b9\u306b@ComponentScan\u3092\u4ed8\u4e0e\u3059\u308b\u3053\u3068\u3067@Autowired\u306b\u3088\u308bDI\u304c\u3046\u307e\u304f\u52d5\u4f5c\u3059\u308b\u3002\n@ComponetScan\u306e\u4f5c\u7528\u306b\u3088\u3063\u3066\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u30fb\u30b3\u30f3\u30dd\u30fc\u30cd\u30f3\u30c8\uff08 @Controller\u306a\u3069@Component \u3001 @Service \u3001 @Repository \u3001 \uff09\u304c\u81ea\u52d5\u7684\u306b\u767b\u9332\u3055\u308c\u308b\u3002\n\n\n18. Using the @SpringBootApplication annotation\nThe @SpringBootApplication annotation is equivalent to using @Configuration, @EnableAutoConfiguration and @ComponentScan with their default attributes:\n\n@SpringBootApplication\u30a2\u30ce\u30c6\u30fc\u30b7\u30e7\u30f3\u306f\u3001\u30c7\u30d5\u30a9\u30eb\u30c8\u306e\u5c5e\u6027\u3067@Configuration \u3001 @EnableAutoConfiguration\u3068@ComponentScan\u3092\u4f7f\u7528\u3059\u308b\u306e\u3068\u540c\u3058\u3067\u3059\u3002\n\n\n19.2 Running as a packaged application\nIf you use the Spring Boot Maven or Gradle plugins to create an executable jar you can run your application using java -jar. For example:\n\nSpringBoot\u306eexecutable jar\u306e\u5b9f\u884c\u306f\u7c21\u5358\u3002java -jar \u30b3\u30de\u30f3\u30c9\u3092\u4f7f\u3044\u307e\u3059\u3002\n\n$ java -jar target/myproject-0.0.1-SNAPSHOT.jar\n\n\n\n19.4 Using the Gradle plugin\nThe Spring Boot Gradle plugin also includes a bootRun task which can be used to run your application in an exploded form. The bootRun task is added whenever you import the spring-boot-gradle-plugin:\n\ngradle\u30d7\u30e9\u30b0\u30a4\u30f3\u3067\u306f\u3001\u4ee5\u4e0b\u306e\u30bf\u30b9\u30af\u3067\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u3092\u5b9f\u884c\u3059\u308b\u3053\u3068\u3082\u3067\u304d\u307e\u3059\u3002\ngradle bootRun\n\n\u3053\u308c\u306f\u30aa\u30d7\u30b7\u30e7\u30f3\u306e\u6307\u5b9a\u65b9\u6cd5\u3000\n\u4f8b\n$ export JAVA_OPTS=-Xmx1024m -XX:MaxPermSize=128M -Djava.security.egd=file:/dev/./urandom\n\n\n\n19.5 Hot swapping\nSince Spring Boot applications are just plain Java applications, JVM hot-swapping should work out of the box.\n\nSpringBoot\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u306f\u7d14\u7c8b\u306aJava\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u3067\u3042\u308b\u305f\u3081\u3001JVM\u306e Hot-Swapping\u3082\u52d5\u4f5c\u3059\u308b\u3002\nspring-boot-devtools module\u3092\u7d44\u307f\u8fbc\u3081\u3070\u3001Hot swapping\u304c\u4f7f\u3048\u308b\u3002\n\n\n20. Developer tools\nSpring Boot includes an additional set of tools that can make the application development experience a little more pleasant. The spring-boot-devtools module can be included in any project to provide additional development-time features. To include devtools support, simply add the module dependency to your build:\n\nDeveloper tools\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u4f9d\u5b58\u95a2\u4fc2\u3092\u69cb\u7bc9\u3059\u308b\u3060\u3051\u3067\u4f7f\u3048\u308b\u3088\u3046\u306b\u306a\u308b\u3002\nGradle\n\ndependencies {\n    compile(\"org.springframework.boot:spring-boot-devtools\")\n}\n\n\nDeveloper tools are automatically disabled when running a fully packaged application. If your application is launched using java -jar or if it\u2019s started using a special classloader,  then it is considered a \u201cproduction application\u201d. \n\nDeveloper Tools\u306ffully packaged application\uff08\u6ce8\uff1a\u305f\u3076\u3093Executable jar\u30d5\u30a1\u30a4\u30eb\u3068\u304b\uff09\u306e\u5834\u5408\u3001\u81ea\u52d5\u7684\u306b\u7121\u52b9\u5316\u3055\u308c\u308b\u3002\n\nIf you want to ensure that devtools is never included in a production build, you can use the excludeDevtools build property to completely remove the JAR. The property is supported with both the Maven and Gradle plugins.\n\n\u30ea\u30ea\u30fc\u30b9\u7528\u306eJar\u306a\u3069\u306bdevtool\u3092\u542b\u3081\u305f\u304f\u306a\u3044\u5834\u5408\u3001build property\u306eexcludeDevtools \u3067remove\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u308b\u3002(maven,gradle\u3068\u3082\u306b\u5bfe\u5fdc\u53ef\u80fd)\n\n\n20.1 Property defaults\nSeveral of the libraries supported by Spring Boot use caches to improve performance. For example, Thymeleaf will cache templates to save repeatedly parsing XML source files. Whilst caching is very beneficial in production, it can be counter productive during development. If you make a change to a template file in your IDE, you\u2019ll likely want to immediately see the result.\nCache options are usually configured by settings in your application.properties file. For example, Thymeleaf offers the spring.thymeleaf.cache property. Rather than needing to set these properties manually, the spring-boot-devtools module will automatically apply sensible development-time configuration.\n\nSpring Boot\u306e\u30e9\u30a4\u30d6\u30e9\u30ea\u306f\u30ad\u30e3\u30c3\u30b7\u30e5\u6a5f\u69cb\u3092\u5099\u3048\u3066\u3044\u308b\u304c\u3001\u958b\u767a\u6642\u306b\u306f\u90aa\u9b54\u306b\u306a\u308b\u306e\u3067\u3001spring-boot-devtools module\u304c\u52d5\u4f5c\u3059\u308b\u5834\u5408\u3001\u3044\u304f\u3064\u304b\u306e\u30ad\u30e3\u30c3\u30b7\u30e5\u6a5f\u69cb\u306f\u81ea\u52d5\u7684\u306b\u7121\u52b9\u306b\u306a\u308b\u3002\n\u5177\u4f53\u7684\u306b\u4f55\u304c\u7121\u52b9\u306b\u306a\u308b\u306e\u304b\u77e5\u308a\u305f\u3044\u5834\u5408\u306f\u3001\u4e0b\u8a18\u3092\u53c2\u7167\nDevToolsPropertyDefaultsPostProcessor.\n\n\n20.2 Automatic restart\nApplications that use spring-boot-devtools will automatically restart whenever files on the classpath change. This can be a useful feature when working in an IDE as it gives a very fast feedback loop for code changes. By default, any entry on the classpath that points to a folder will be monitored for changes. Note that certain resources such as static assets and view templates do not need to restart the application.\n\n\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u304cspring-boot-devtools\u3092\u4f7f\u3063\u3066\u3044\u308b\u5834\u5408\u3001classpath\u306e\u30d5\u30a1\u30a4\u30eb\u306e\u5909\u66f4\u3092\u691c\u77e5\u3057\u81ea\u52d5\u7684\u306brestart\u3057\u307e\u3059\u3002\n\u9759\u7684\u306a\u30d5\u30a1\u30a4\u30eb\u3084template\u306a\u3069\u306e\u5909\u66f4\u3067\u306f\u81ea\u52d5\u518d\u8d77\u52d5\u3059\u308b\u5fc5\u8981\u306f\u3042\u308a\u307e\u305b\u3093\u3002\n\uff03\u7de8\u96c6\u6ce8\u8a18\uff1a\u9759\u7684\u30d5\u30a1\u30a4\u30eb\u306f\u3001\u9664\u5916\u8a2d\u5b9a\u3057\u3066\u306d\u3068\u3044\u3046\u4e8b\u3060\u3068\u601d\u3046\u3002\n\nTriggering a restart\nAs DevTools monitors classpath resources, the only way to trigger a restart is to update the classpath. The way in which you cause the classpath to be updated depends on the IDE that you are using. In Eclipse, saving a modified file will cause the classpath to be updated and trigger a restart. In IntelliJ IDEA, building the project (Build \u2192 Make Project) will have the same effect.\n\n\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u518d\u8d77\u52d5\u306e\u30c8\u30ea\u30ac\u30fc\n\nEclipse\u306e\u5834\u5408\u3001\u30d5\u30a1\u30a4\u30eb\u3092\u5909\u66f4\u3057\u3066\u4fdd\u5b58\u3057\u305f\u30bf\u30a4\u30df\u30f3\u30b0\nIntelliJ IDEA\u306e\u5834\u5408\u3001Build -> Make Project\u3057\u305f\u30bf\u30a4\u30df\u30f3\u30b0\n\n\nDevTools relies on the application context\u2019s shutdown hook to close it during a restart. It will not work correctly if you have disabled the shutdown hook\n\nDevTools \u306f\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u30b3\u30f3\u30c6\u30ad\u30b9\u30c8\u306eShutdown\u3092\u30d5\u30c3\u30af\u306b\u4f9d\u5b58\u3057\u3066\u3044\u308b\u3002\n\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u304c\u30b7\u30e3\u30c3\u30c8\u30c0\u30a6\u30f3\u30d5\u30c3\u30af\u3092\u7121\u52b9\u306b\u3057\u3066\u3044\u308b\u3068DevTools \u306f\u6b63\u5e38\u306b\u52d5\u4f5c\u3057\u306a\u3044\u3002\n\n\n20.2.1 Excluding resources\nCertain resources don\u2019t necessarily need to trigger a restart when they are changed. For example, Thymeleaf templates can just be edited in-place. By default changing resources in /META-INF/maven, /META-INF/resources ,/resources ,/static ,/public or /templates will not trigger a restart but will trigger a live reload. If you want to customize these exclusions you can use the spring.devtools.restart.exclude property. For example, to exclude only /static and /public you would set the following:\n\nspring.devtools.restart.exclude=static/**,public/**\n\nAutomatic restart\u306e\u5bfe\u8c61\u304b\u3089\u9664\u5916\u3057\u305f\u3044\u30d5\u30a1\u30a4\u30eb\u304c\u3042\u308b\u5834\u5408\u3001application.properties\u306b\u4e0a\u8a18\u306e\u3088\u3046\u306b\u8a2d\u5b9a\u3059\u308b\u3002\n\nif you want to keep those defaults and add additional exclusions, use the spring.devtools.restart.additional-exclude property instead.\n\nspring.devtools.restart.exclude=static/**,public/**\n\n\u30c7\u30d5\u30a9\u30eb\u30c8\u306e\u8a2d\u5b9a\u306b\u8ffd\u52a0\u3057\u305f\u3044\u5834\u5408\u3001\u4e0a\u8a18\u306e\u3088\u3046\u306b\u8a18\u8f09\u3059\u308b\u9078\u629e\u80a2\u3082\u3042\u308b\u3002\n\n\n20.2.2 Watching additional paths\nYou may want your application to be restarted or reloaded when you make changes to files that are not on the classpath. To do so, use the spring.devtools.restart.additional-paths property to configure additional paths to watch for changes. You can use the spring.devtools.restart.exclude property described above to control whether changes beneath the additional paths will trigger a full restart or just a live reload.\n\nautomatic restart\u306e\u76e3\u8996\u5bfe\u8c61\u30d1\u30b9\u3092\u5897\u3084\u3057\u305f\u3044\u5834\u5408\u3001spring.devtools.restart.additional-paths propertie\u306b\u8a2d\u5b9a\u3059\u308c\u3070\u3088\u3044\u3002\n\n\n20.2.3 Disabling restart\nIf you don\u2019t want to use the restart feature you can disable it using the spring.devtools.restart.enabled property. In most cases you can set this in your application.properties (this will still initialize the restart classloader but it won\u2019t watch for file changes).\n\nDevTool\u306eauto restart\u3092\u7121\u52b9\u5316\u3057\u305f\u3044\u5834\u5408\u3001spring.devtools.restart.enabled\u30d7\u30ed\u30d1\u30c6\u30a3\u304c\u4f7f\u7528\u3067\u304d\u308b\u3002\n\u901a\u5e38\u306fapplication.properties\u306b\u8a2d\u5b9a\u3059\u308c\u3070\u4e8b\u8db3\u308a\u308b\u304c\u5b8c\u74a7\u306b\u7121\u52b9\u5316\u3057\u305f\u3044\u5834\u5408\u306f\u3001Sample\u306e\u3088\u3046\u306bmain()\u30e1\u30bd\u30c3\u30c9\u3067SpringApplication.run()\u3059\u308b\u524d\u306bSystem\u30d7\u30ed\u30d1\u30c6\u30a3\u306b\u8a2d\u5b9a\u3059\u308b\u65b9\u6cd5\u3082\u3042\u308b\u3002\n\n\n20.3 LiveReload\nThe spring-boot-devtools module includes an embedded LiveReload server that can be used to trigger a browser refresh when a resource is changed. LiveReload browser extensions are freely available for Chrome, Firefox and Safari from livereload.com.\n\nspring-boot-devtools\u306eLiveReload\u6a5f\u80fd\u306f\u30ea\u30bd\u30fc\u30b9\u306e\u5909\u66f4\u6642\u306b\u30d6\u30e9\u30a6\u30b6\u306e\u30ea\u30ed\u30fc\u30c9\u3092\u30c8\u30ea\u30ac\u30fc\u3059\u308b\u3002\nLiveReload Browser Extention\u306fChrome,Firefox,Safari\u7528\u304c\u7121\u6599\u914d\u5e03\u3055\u308c\u3066\u3044\u308b\u3002\n\uff03\u7de8\u96c6\u6ce8\u8a18\uff1aLiveReload\u3092\u4f7f\u7528\u3059\u308b\u306b\u306f\u3042\u3089\u304b\u3058\u3081\u30d6\u30e9\u30a6\u30b6\u306bExtention\u3092\u5165\u308c\u3066\u304a\u304f\u5fc5\u8981\u304c\u3042\u308b\u3063\u3066\u3053\u3068\u304b\u306a\n\n\n20.4 Global settings\nYou can configure global devtools settings by adding a file named .spring-boot-devtools.properties to your $HOME folder (note that the filename starts with \u201c.\u201d). Any properties added to this file will apply to all Spring Boot applications on your machine that use devtools. For example, to configure restart to always use a trigger file, you would add the following:\n\n\u30b0\u30ed\u30fc\u30d0\u30eb\u8a2d\u5b9a\u306f$HOME\u914d\u4e0b\u306e.spring-boot-devtools.properties\u306b\u8a2d\u5b9a\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u308b\u3002\n\n\n20.5 Remote applications\nThe Spring Boot developer tools are not just limited to local development. You can also use several features when running applications remotely. Remote support is opt-in, to enable it you need to set a spring.devtools.remote.secret property. \n\nDevTool\u306f\u30ea\u30e2\u30fc\u30c8\u3067\u52d5\u4f5c\u3057\u3066\u3044\u308b\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u306b\u5bfe\u3057\u3066\u3082\u6709\u52b9\u3002\n\u30ea\u30e2\u30fc\u30c8\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u3067DevTool\u3092\u4f7f\u3046\u5834\u5408spring.devtools.remote.secret\n\u306e\u8a2d\u5b9a\u304c\u5fc5\u8981\u3002\n\uff03\u7de8\u96c6\u6ce8\u8a18\uff1a\u8a2d\u5b9a\u5024\u306f\u306a\u3093\u3067\u3082\u3044\u3044\u3088\u3046\u3067\u3059\u3002\n\nRemote devtools support is provided in two parts; there is a server side endpoint that accepts connections, and a client application that you run in your IDE. The server component is automatically enabled when the >spring.devtools.remote.secret property is set. The client component must be launched manually.\n\nRemote DevTool\u306f2\u3064\u306e\u30d1\u30fc\u30c4\u3067\u69cb\u6210\u3055\u308c\u3066\u3044\u308b\u3002\n\u30b5\u30fc\u30d0\u30fc\u30b5\u30a4\u30c9\u3068\u30af\u30e9\u30a4\u30a2\u30f3\u30c8(IDE).spring.devtools.remote.secret\u30d7\u30ed\u30d1\u30c6\u30a3\u3092\u8a2d\u5b9a\u3059\u308c\u3070\u30b5\u30fc\u30d0\u30fc\u30b5\u30a4\u30c9\u306f\u81ea\u52d5\u7684\u306bRemote Devtool\u304c\u6709\u52b9\u306b\u306a\u308b\u3002\n\u30af\u30e9\u30a4\u30a2\u30f3\u30c8(IDE)\u5074\u306f\u624b\u52d5\u3067\u8d77\u52d5\u3059\u308b\u5fc5\u8981\u304c\u3042\u308b\u3002\n\u3002\n\n\n20.5.1 Running the remote client application\nThe remote client application is designed to be run from within you IDE. You need to run org.springframework.boot.devtools.RemoteSpringApplication using the same classpath as the remote project that you\u2019re connecting to. The non-option argument passed to the application should be the remote URL that you are connecting to.\n\nRemote DevTool\u3092\u4f7f\u3046\u306b\u306f\n\u30ea\u30e2\u30fc\u30c8\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\uff08IDE\uff09\u5074\u3067\u306f\u3001\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\uff08\u30aa\u30d7\u30b7\u30e7\u30f3\u4ee5\u5916\u306e\u5f15\u6570\uff09\u306b\u63a5\u7d9a\u5148\u306e\u30ea\u30e2\u30fc\u30c8URL\u3092\u6e21\u3057\u307e\u3059\u3002\u6b21\u306b\u5b9f\u884c\u6642\u306emain\u30af\u30e9\u30b9\u306borg.springframework.boot.devtools.RemoteSpringApplication\n\u3092\u6307\u5b9a\u3057\u307e\u3059\u3002\n\u3053\u308c\u3060\u3051\u3002\n\n\n20.5.2 Remote update\nJava remote debugging is useful when diagnosing issues on a remote application. Unfortunately, it\u2019s not always possible to enable remote debugging when your application is deployed outside of your data center. Remote debugging can also be tricky to setup if you are using a container based technology such as Docker.\n\n\u30ea\u30e2\u30fc\u30c8\u30c7\u30d0\u30c3\u30b0\u306f\u6709\u52b9\u306a\u624b\u6bb5\u3067\u3059\u304c\u3001\u74b0\u5883\u306b\u3088\u3063\u3066\u306f\u5fc5\u305a\u5b9f\u884c\u3067\u304d\u308b\u3068\u306f\u9650\u308a\u307e\u305b\u3093\u3002\n\u4f8b\u3048\u3070Docker\u3068\u304b\u6ce8\u610f\u304c\u5fc5\u8981\u3067\u3059\u3002\n\n\n21. Packaging your application for production\nExecutable jars can be used for production deployment. As they are self-contained, they are also ideally suited for cloud-based deployment.\n\n\u5b9f\u884c\u5f62\u5f0f\u306ejar\u3092\u672c\u756a\u30ea\u30ea\u30fc\u30b9\u7528\u3068\u3057\u3066\u4f7f\u3048\u307e\u3059\u3002\n\u3053\u308c\u306f\u30af\u30e9\u30a6\u30c9\u30d9\u30fc\u30b9\u3078\u306e\u5c55\u958b\u3078\u9069\u3057\u3066\u3044\u307e\u3059\u3088\u3002\n\n\nPart IV. Spring Boot features\n\n\u3053\u306e\u30bb\u30af\u30b7\u30e7\u30f3\u3067\u306fSpring Boot\u306e\u8a73\u7d30\u306b\u3064\u3044\u3066\u8aac\u660e\u3057\u307e\u3059\u3002\n\n\n23. SpringApplication\nThe SpringApplication class provides a convenient way to bootstrap a Spring application that will be started from a main() method. In many situations you can just delegate to the static SpringApplication.run method:\n\nSpringApplication\u30af\u30e9\u30b9\u306fSpringApplication\u3092\u8d77\u52d5\u3059\u308b\u305f\u3081\u306e\u4fbf\u5229\u306a\u6a5f\u80fd\u3092\u5b9f\u88c5\u3057\u3066\u3044\u307e\u3059\u3002\nmain()\u30e1\u30bd\u30c3\u30c9\u3067SpringApplication.run\u3092\u5b9f\u884c\u3059\u308b\u3060\u3051\u3002\n\n\n23.1 Customizing the Banner\nThe banner that is printed on start up can be changed by adding a banner.txt file to your classpath, or by setting banner.location to the location of such a file. If the file has an unusual encoding you can set banner.charset (default is UTF-8).\n\n\u8d77\u52d5\u6642\u306e\u30d0\u30ca\u30fc\u306f\u5909\u66f4\u3059\u308b\u4e8b\u304c\u51fa\u6765\u307e\u3059\u3002\nbanner.txt\u3001banner.location\u3001banner.charset\u306a\u3069\u3067\u30ab\u30b9\u30bf\u30de\u30a4\u30ba\u3067\u304d\u307e\u3059\u3002\n\nTable 23.1. Banner variables\n\n\u30d0\u30ca\u30fc\u3067\u4f7f\u3048\u308b\u74b0\u5883\u5909\u6570\u306fTable 23.1.\u3092\u53c2\u7167\n\n\n23.2 Customizing SpringApplication\nIf the SpringApplication defaults aren\u2019t to your taste you can instead create a local instance and customize it. For example, to turn off the banner you would write:\n\nSpringApplication \u306e\u30c7\u30d5\u30a9\u30eb\u30c8\u304c\u6c17\u306b\u5165\u3089\u306a\u3051\u308c\u3070\u3001SpringApplication\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u751f\u6210\u3057\u3066\u30aa\u30d7\u30b7\u30e7\u30f3\u3092\u8a2d\u5b9a\u3059\u308b\u4e8b\u304c\u51fa\u6765\u307e\u3059\u3002\n\u4f8b\u3048\u3070\u3001\u3053\u3093\u306a\u611f\u3058\njava\npublic static void main(String[] args) {\n    SpringApplication app = new SpringApplication(MySpringConfiguration.class);\n        app.setBannerMode(Banner.Mode.OFF);\n    app.run(args);\n}\n\n\n\n23.4 Application events and listeners\nIn addition to the usual Spring Framework events, such as ContextRefreshedEvent, a SpringApplication sends some additional application events.\n\nSpringApplication.addListeners(\u2026\u200b)\u306b\u8a2d\u5b9a\u3057\u3066\u304a\u3051\u3070\u3001Spring framework\u306e\u30a4\u30d9\u30f3\u30c8\u3092\u53d7\u3051\u308b\u3053\u3068\u304c\u3067\u304d\u308b\u3002\n\u4ee5\u964d\u3001\u307e\u305f\u6642\u9593\u306e\u3042\u308b\u3068\u304d\u306b\u3002\u3002\n# Spring Boot Reference Guide\u306e\u81ea\u5206\u7528\u30e1\u30e2(\u4e0b\u66f8\u304d\u4e2d)\n\nSpringBoot\u3092\u4f7f\u7528\u3057\u305fWeb\u30a2\u30d7\u30ea\u3092\u958b\u767a\u3057\u3088\u3046\u3068\u3057\u3066\u3044\u307e\u3059\u3002\n\u96f0\u56f2\u6c17\u7684\u306b\u306f\u7c21\u5358\u305d\u3046\u3067\u306f\u3042\u308b\u3082\u306e\u306e\u3001\u826f\u304f\u308f\u304b\u3089\u306a\u3044\u3068\u3053\u308d\u304c\u591a\u3044\u306e\u3067\u3001\u307e\u305a\u306fReference Guide\u3092\u8aad\u3093\u3067\u3044\u3066\u5fc5\u8981\u305d\u3046\u306a\u9805\u76ee\u3092\u30d4\u30c3\u30af\u30a2\u30c3\u30d7\u3057\u3066\u30e1\u30e2\u3057\u3066\u3044\u307e\u3059\u3002\n\n\u539f\u6587\u3068\u65e5\u672c\u8a9e\u30e1\u30e2\u306e\u5bfe\u6bd4\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u304c\u3001\u65e5\u672c\u8a9e\u30e1\u30e2\u306f\u539f\u6587\u3092\u8a33\u3057\u305f\u3082\u306e\u3067\u306f\u306a\u304f\u3001\u81ea\u5206\u7528\u306e\u30e1\u30e2\u3067\u3042\u308b\u70b9\u306b\u6ce8\u610f\u3067\u3059\u3002\n\u69cb\u6210\u30c4\u30fc\u30eb\u306f\u4e3b\u306bGradle\u306b\u95a2\u4fc2\u306e\u3042\u308b\u3082\u306e\u3057\u304b\u30d4\u30c3\u30af\u30a2\u30c3\u30d7\u3057\u3066\u3044\u307e\u305b\u3093\u3002\n\nReferenceGuide\u3092\u8aad\u3093\u3067\u307f\u305f\u3044\u3051\u3069\u3001\u82f1\u8a9e\u306f\u30c1\u30e7\u30c3\u30c8\u30fb\u30fb\u30fb\u3002\n\u3068\u3044\u3046\u65b9\u306e\u304a\u5f79\u306b\u7acb\u3066\u3070\u5e78\u3044\u3067\u3059\u3002\n\n\uff03Qiita\u3078\u306e\u6295\u7a3f\u306f\u521d\u3081\u3066\u3067\u3001\u4f7f\u3044\u3053\u306a\u305b\u3066\u3044\u306a\u3044\u90e8\u5206\u304c\u591a\u3005\u3042\u308a\u6050\u7e2e\u3067\u3059\u3002\n\n***\n\n\u53c2\u7167\u5143\n[Spring Boot Reference Guide (version 1.3.5.RELEASE)](http://docs.spring.io/spring-boot/docs/1.3.5.RELEASE/reference/htmlsingle/)\n\n>### 11.3.1 The @RestController and @RequestMapping annotations\n>The @RequestMapping annotation provides \u201crouting\u201d information. It is telling Spring that any HTTP request with the path \u201c/\u201d should be mapped to the home method. The @RestController annotation tells Spring to render the resulting string directly back to the caller.\n\n@RequestMapping annotation\u306b\u306f\u30eb\u30fc\u30c6\u30a3\u30f3\u30b0\u60c5\u5831\u3092\u8a18\u8f09\u3059\u308b\u3002\n@RequestMapping(\"/hello\")\u3068\u3059\u308b\u3068\u3001\u30ea\u30af\u30a8\u30b9\u30c8URL\u306e/hello\u30d1\u30b9\u3092\u51e6\u7406\u3059\u308b\u3053\u3068\u3092\u5ba3\u8a00\u3057\u305f\u3053\u3068\u306b\u306a\u308b\u3002\n\n>### 11.3.2 The @EnableAutoConfiguration annotation\n\n\u81ea\u52d5\u30b3\u30f3\u30d5\u30a3\u30ae\u30e5\u30ec\u30fc\u30b7\u30e7\u30f3\u306e\u6709\u52b9\u5316\n\n>### 11.3.3 The \u201cmain\u201d method\n>The final part of our application is the main method. This is just a standard method that follows the Java convention for an application entry point. Our main method delegates to Spring Boot\u2019s SpringApplication class by calling run. \n\nmain()\u30e1\u30bd\u30c3\u30c9\u3092\u7528\u610f\u3057\u3066\u3001\u305d\u306e\u4e2d\u3067SpringApplication.run()\u3092\u5b9f\u884c\u3059\u308b\u3002\nrun()\u30e1\u30bd\u30c3\u30c9\u306e\u5f15\u6570\u306b\u306f\u3001main()\u30e1\u30bd\u30c3\u30c9\u3092\u5b9f\u88c5\u3057\u305f\u30af\u30e9\u30b9\u3092\u8a2d\u5b9a\u3059\u308b\u3002\n\u30b3\u30de\u30f3\u30c9\u30e9\u30a4\u30f3\u5f15\u6570\u306frun()\u30e1\u30bd\u30c3\u30c9\u306b\u900f\u904e\u7684\u306b\u6e21\u3055\u308c\u308b(?)\n\n> ## 13.3 Gradle\n> Gradle users can directly import \u201cstarter POMs\u201d in their dependencies section. Unlike Maven, there is no \u201csuper parent\u201d to import to share some configuration.\n\nGradle\u30e6\u30fc\u30b6\u30fc\u306f\u3001\"starter POMs\"\u3092dependencies section\u306b\u8a18\u8f09\u3059\u308b\u3002\nmaven\u306e\u3088\u3046\u306a\u201csuper parent\u201d \u306f\u5b58\u5728\u3057\u306a\u3044\u3002\n\n> The spring-boot-gradle-plugin is also available and provides tasks to create executable jars and run projects from source. \n\nspring-boot-gradle-plugin\u3092\u5229\u7528\u3059\u308b\u3068\u3001\u5b9f\u884c\u53ef\u80fdjar\u3084\u30bf\u30b9\u30af\u306e\u5b9f\u884c\u304c\u53ef\u80fd\n\n>## 13.5 Starter POMs\n>##### Table 13.1. Spring Boot application starters\n\nStarter POMs\u306e\u4e00\u89a7\u306fTable 13.1\u3092\u53c2\u7167\u3002\n\uff03\u7de8\u96c6\u6ce8\u8a18\uff1a\u4e00\u5ea6\u898b\u3066\u304a\u3044\u305f\u307b\u3046\u304c\u3088\u3055\u305d\u3046\u3002\n\n> Finally, Spring Boot includes some starters that can be used if you want to exclude or swap specific technical facets.\n>##### Table 13.3. Spring Boot technical starters\n\nSpring Boot\u306f\u3044\u304f\u3064\u304b\u306estarter\u3092\u542b\u3093\u3067\u3044\u308b\u304c\u3001\u9664\u5916\u3057\u305f\u308a\u4ea4\u63db\u3057\u305f\u308a\u3067\u304d\u308b\u3002\n\n>#14. Structuring your code\n\n\u30d5\u30a9\u30eb\u30c0\u30fc\u69cb\u6210\n\n>## 14.1 Using the \u201cdefault\u201d package\n>When a class doesn\u2019t include a package declaration it is considered to be in the \u201cdefault package\u201d. The use of the \u201cdefault package\u201d is generally discouraged, and should be avoided. It can cause particular problems for Spring Boot applications that use @ComponentScan, @EntityScan or @SpringBootApplication annotations, since every class from every jar, will be read.\n\n\"default package\"\u306e\u4f7f\u7528\u306f\u3055\u3051\u308b\u3079\u3057\u3002\n\n> We recommend that you follow Java\u2019s recommended package naming conventions and use a reversed domain name (for example, com.example.project).\n\n\u9006\u30c9\u30e1\u30a4\u30f3\u5f62\u5f0f\u306e\u30d1\u30c3\u30b1\u30fc\u30b8\u304c\u671b\u307e\u3057\u3044\u3002\n\n>## 14.2 Locating the main application class\n> We generally recommend that you locate your main application class in a root package above other classes. The @EnableAutoConfiguration annotation is often placed on your main class, and it implicitly defines a base \u201csearch package\u201d for certain items. For example, if you are writing a JPA application, the package of the @EnableAutoConfiguration annotated class will be used to search for @Entity items.\n\n\u30eb\u30fc\u30c8\u30d1\u30c3\u30b1\u30fc\u30b8\u306b\u30e1\u30a4\u30f3\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u30af\u30e9\u30b9\u3092\u914d\u7f6e\u3057\u305f\u307b\u3046\u304c\u3044\u3044\u3002\n@EnableAutoConfiguration\u3092\u8a2d\u5b9a\u3057\u305f\u30af\u30e9\u30b9\u306e\u30d1\u30c3\u30b1\u30fc\u30b8\u914d\u4e0b\u304c\u30b9\u30ad\u30e3\u30f3\u5bfe\u8c61\u306b\u306a\u308b\u3002\n\uff08\u901a\u5e38\u30e1\u30a4\u30f3\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u30af\u30e9\u30b9\u306b@EnableAutoConfiguration\u3092\u8a2d\u5b9a\u3059\u308b\uff09\n\n># 15. Configuration classes\n>Spring Boot favors Java-based configuration. Although it is possible to call SpringApplication.run() with an XML source, we generally recommend that your primary source is a @Configuration class. Usually the class that defines the main method is also a good candidate as the primary @Configuration.\n\nConfiguration\u306fXML\u30d5\u30a1\u30a4\u30eb\u3088\u308aJava\u30af\u30e9\u30b9\u30d9\u30fc\u30b9\u304c\u304a\u52e7\u3081\u3002\uff08\u3060\u305d\u3046\u3067\u3059\uff09\n\n>## 15.2 Importing XML configuration\n> If you absolutely must use XML based configuration, we recommend that you still start with a @Configuration class. You can then use an additional @ImportResource annotation to load XML configuration files.\n\n\u3069\u3046\u3057\u3066\u3082Configuration\u3092XML\u3067\u884c\u3044\u305f\u3044\u5834\u5408\u3001@ImportResource\u3092\u4f7f\u3046\u3053\u3068\u304c\u3067\u304d\u308b\u3002\n\n># 16. Auto-configuration\n> You need to opt-in to auto-configuration by adding the @EnableAutoConfiguration or @SpringBootApplication annotations to one of your @Configuration classes.\n\n\u81ea\u52d5\u8a2d\u5b9a\u3092\u6709\u52b9\u306b\u3059\u308b\u306b\u306f\u3001@Configuration\u30af\u30e9\u30b9\u306b@EnableAutoConfiguration\u304b@SpringBootApplication\u3092\u8a2d\u5b9a\u3057\u307e\u3059\u3002\n\n\uff03\u7de8\u96c6\u6ce8\u8a18\uff1a\u5b9f\u306f@SpringBootApplication\u306b@EnableAutoConfiguration\u3068@Configuration\u304c\u542b\u307e\u308c\u3066\u3044\u308b\u3002\n\n>## 16.1 Gradually replacing auto-configuration\n>Auto-configuration is noninvasive, at any point you can start to define your own configuration to replace specific parts of the auto-configuration. For example, if you add your own DataSource bean, the default embedded database support will back away.\n\n\u81ea\u52d5\u8a2d\u5b9a\u306f\u3001\u7f6e\u304d\u63db\u3048\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3088\u3002\n\n> If you need to find out what auto-configuration is currently being applied, and why, start your application with the --debug switch. This will log an auto-configuration report to the console.\n\n--debug\u30b9\u30a4\u30c3\u30c1\u3092\u4f7f\u3046\u3068\u3001console\u306b\u73fe\u5728\u306e\u81ea\u52d5\u8a2d\u5b9a\u304c\u51fa\u529b\u3055\u308c\u307e\u3059\u3002\n\n>## 16.2 Disabling specific auto-configuration\n> If you find that specific auto-configure classes are being applied that you don\u2019t want, you can use the exclude attribute of @EnableAutoConfiguration to disable them.\n\n@EnableAutoConfiguration(exclude={DataSourceAutoConfiguration.class})\u3067\u6307\u5b9a\u3057\u305f\u81ea\u52d5\u8a2d\u5b9a\u3092\u7121\u52b9\u5316\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\n>If the class is not on the classpath, you can use the excludeName attribute of the annotation and specify the fully qualified name instead. Finally, you can also control the list of auto-configuration classes to exclude via the spring.autoconfigure.exclude property.\n\n\u9664\u5916\u3059\u308b\u30af\u30e9\u30b9\u304cclasspath\u306b\u7121\u3044\u5834\u5408\u306fexcludeName\u3092\u6307\u5b9a\u3059\u308b\u3053\u3068\u3082\u3067\u304d\u308b\u3002\n\u307e\u305f\u3001spring.autoconfigure.exclude\u30d7\u30ed\u30d1\u30c6\u30a3\u3067\u3082\u540c\u69d8\u306e\u3053\u3068\u304c\u53ef\u80fd\u3002\n\n># 17. Spring Beans and dependency injection\n> You are free to use any of the standard Spring Framework techniques to define your beans and their injected dependencies. For simplicity, we often find that using @ComponentScan to find your beans, in combination with @Autowired constructor injection works well.\n> If you structure your code as suggested above (locating your application class in a root package), you can add @ComponentScan without any arguments. All of your application components (@Component, @Service, @Repository, @Controller etc.) will be automatically registered as Spring Beans.\n\n> Here is an example @Service Bean that uses constructor injection to obtain a required RiskAssessor bean.\n\n\u30d1\u30c3\u30b1\u30fc\u30b8\u30eb\u30fc\u30c8\u306e\u30af\u30e9\u30b9\u306b@ComponentScan\u3092\u4ed8\u4e0e\u3059\u308b\u3053\u3068\u3067@Autowired\u306b\u3088\u308bDI\u304c\u3046\u307e\u304f\u52d5\u4f5c\u3059\u308b\u3002\n@ComponetScan\u306e\u4f5c\u7528\u306b\u3088\u3063\u3066\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u30fb\u30b3\u30f3\u30dd\u30fc\u30cd\u30f3\u30c8\uff08 @Controller\u306a\u3069@Component \u3001 @Service \u3001 @Repository \u3001 \uff09\u304c\u81ea\u52d5\u7684\u306b\u767b\u9332\u3055\u308c\u308b\u3002\n\n># 18. Using the @SpringBootApplication annotation\n> \n>The @SpringBootApplication annotation is equivalent to using @Configuration, @EnableAutoConfiguration and @ComponentScan with their default attributes:\n\n@SpringBootApplication\u30a2\u30ce\u30c6\u30fc\u30b7\u30e7\u30f3\u306f\u3001\u30c7\u30d5\u30a9\u30eb\u30c8\u306e\u5c5e\u6027\u3067@Configuration \u3001 @EnableAutoConfiguration\u3068@ComponentScan\u3092\u4f7f\u7528\u3059\u308b\u306e\u3068\u540c\u3058\u3067\u3059\u3002\n\n>## 19.2 Running as a packaged application\n> If you use the Spring Boot Maven or Gradle plugins to create an executable jar you can run your application using java -jar. For example:\n\nSpringBoot\u306eexecutable jar\u306e\u5b9f\u884c\u306f\u7c21\u5358\u3002java -jar \u30b3\u30de\u30f3\u30c9\u3092\u4f7f\u3044\u307e\u3059\u3002\n```\n$ java -jar target/myproject-0.0.1-SNAPSHOT.jar\n```\n\n>## 19.4 Using the Gradle plugin\n> The Spring Boot Gradle plugin also includes a bootRun task which can be used to run your application in an exploded form. The bootRun task is added whenever you import the spring-boot-gradle-plugin:\n\ngradle\u30d7\u30e9\u30b0\u30a4\u30f3\u3067\u306f\u3001\u4ee5\u4e0b\u306e\u30bf\u30b9\u30af\u3067\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u3092\u5b9f\u884c\u3059\u308b\u3053\u3068\u3082\u3067\u304d\u307e\u3059\u3002\n\n```\ngradle bootRun\n```\n\n\u3053\u308c\u306f\u30aa\u30d7\u30b7\u30e7\u30f3\u306e\u6307\u5b9a\u65b9\u6cd5\u3000\n```\u4f8b\n$ export JAVA_OPTS=-Xmx1024m -XX:MaxPermSize=128M -Djava.security.egd=file:/dev/./urandom\n```\n\n>## 19.5 Hot swapping\n>Since Spring Boot applications are just plain Java applications, JVM hot-swapping should work out of the box.\n\nSpringBoot\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u306f\u7d14\u7c8b\u306aJava\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u3067\u3042\u308b\u305f\u3081\u3001JVM\u306e Hot-Swapping\u3082\u52d5\u4f5c\u3059\u308b\u3002\nspring-boot-devtools module\u3092\u7d44\u307f\u8fbc\u3081\u3070\u3001Hot swapping\u304c\u4f7f\u3048\u308b\u3002\n\n># 20. Developer tools\n> Spring Boot includes an additional set of tools that can make the application development experience a little more pleasant. The spring-boot-devtools module can be included in any project to provide additional development-time features. To include devtools support, simply add the module dependency to your build:\n\nDeveloper tools\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u4f9d\u5b58\u95a2\u4fc2\u3092\u69cb\u7bc9\u3059\u308b\u3060\u3051\u3067\u4f7f\u3048\u308b\u3088\u3046\u306b\u306a\u308b\u3002\n\nGradle\n```\ndependencies {\n    compile(\"org.springframework.boot:spring-boot-devtools\")\n}\n```\n\n>Developer tools are automatically disabled when running a fully packaged application. If your application is launched using java -jar or if it\u2019s started using a special classloader,  then it is considered a \u201cproduction application\u201d. \n\nDeveloper Tools\u306ffully packaged application\uff08\u6ce8\uff1a\u305f\u3076\u3093Executable jar\u30d5\u30a1\u30a4\u30eb\u3068\u304b\uff09\u306e\u5834\u5408\u3001\u81ea\u52d5\u7684\u306b\u7121\u52b9\u5316\u3055\u308c\u308b\u3002\n\n>If you want to ensure that devtools is never included in a production build, you can use the excludeDevtools build property to completely remove the JAR. The property is supported with both the Maven and Gradle plugins.\n\n\u30ea\u30ea\u30fc\u30b9\u7528\u306eJar\u306a\u3069\u306bdevtool\u3092\u542b\u3081\u305f\u304f\u306a\u3044\u5834\u5408\u3001build property\u306eexcludeDevtools \u3067remove\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u308b\u3002(maven,gradle\u3068\u3082\u306b\u5bfe\u5fdc\u53ef\u80fd)\n\n>## 20.1 Property defaults\n>Several of the libraries supported by Spring Boot use caches to improve performance. For example, Thymeleaf will cache templates to save repeatedly parsing XML source files. Whilst caching is very beneficial in production, it can be counter productive during development. If you make a change to a template file in your IDE, you\u2019ll likely want to immediately see the result.\n\n>Cache options are usually configured by settings in your application.properties file. For example, Thymeleaf offers the spring.thymeleaf.cache property. Rather than needing to set these properties manually, the spring-boot-devtools module will automatically apply sensible development-time configuration.\n\nSpring Boot\u306e\u30e9\u30a4\u30d6\u30e9\u30ea\u306f\u30ad\u30e3\u30c3\u30b7\u30e5\u6a5f\u69cb\u3092\u5099\u3048\u3066\u3044\u308b\u304c\u3001\u958b\u767a\u6642\u306b\u306f\u90aa\u9b54\u306b\u306a\u308b\u306e\u3067\u3001spring-boot-devtools module\u304c\u52d5\u4f5c\u3059\u308b\u5834\u5408\u3001\u3044\u304f\u3064\u304b\u306e\u30ad\u30e3\u30c3\u30b7\u30e5\u6a5f\u69cb\u306f\u81ea\u52d5\u7684\u306b\u7121\u52b9\u306b\u306a\u308b\u3002\n\u5177\u4f53\u7684\u306b\u4f55\u304c\u7121\u52b9\u306b\u306a\u308b\u306e\u304b\u77e5\u308a\u305f\u3044\u5834\u5408\u306f\u3001\u4e0b\u8a18\u3092\u53c2\u7167\n[DevToolsPropertyDefaultsPostProcessor.](http://github.com/spring-projects/spring-boot/tree/v1.3.5.RELEASE/spring-boot-devtools/src/main/java/org/springframework/boot/devtools/env/DevToolsPropertyDefaultsPostProcessor.java)\n\n>## 20.2 Automatic restart\n>Applications that use spring-boot-devtools will automatically restart whenever files on the classpath change. This can be a useful feature when working in an IDE as it gives a very fast feedback loop for code changes. By default, any entry on the classpath that points to a folder will be monitored for changes. Note that certain resources such as static assets and view templates do not need to restart the application.\n\n\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u304cspring-boot-devtools\u3092\u4f7f\u3063\u3066\u3044\u308b\u5834\u5408\u3001classpath\u306e\u30d5\u30a1\u30a4\u30eb\u306e\u5909\u66f4\u3092\u691c\u77e5\u3057\u81ea\u52d5\u7684\u306brestart\u3057\u307e\u3059\u3002\n\u9759\u7684\u306a\u30d5\u30a1\u30a4\u30eb\u3084template\u306a\u3069\u306e\u5909\u66f4\u3067\u306f\u81ea\u52d5\u518d\u8d77\u52d5\u3059\u308b\u5fc5\u8981\u306f\u3042\u308a\u307e\u305b\u3093\u3002\n\n\uff03\u7de8\u96c6\u6ce8\u8a18\uff1a\u9759\u7684\u30d5\u30a1\u30a4\u30eb\u306f\u3001\u9664\u5916\u8a2d\u5b9a\u3057\u3066\u306d\u3068\u3044\u3046\u4e8b\u3060\u3068\u601d\u3046\u3002\n\n> Triggering a restart\n>As DevTools monitors classpath resources, the only way to trigger a restart is to update the classpath. The way in which you cause the classpath to be updated depends on the IDE that you are using. In Eclipse, saving a modified file will cause the classpath to be updated and trigger a restart. In IntelliJ IDEA, building the project (Build \u2192 Make Project) will have the same effect.\n\n\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u518d\u8d77\u52d5\u306e\u30c8\u30ea\u30ac\u30fc\n\n- Eclipse\u306e\u5834\u5408\u3001\u30d5\u30a1\u30a4\u30eb\u3092\u5909\u66f4\u3057\u3066\u4fdd\u5b58\u3057\u305f\u30bf\u30a4\u30df\u30f3\u30b0\n- IntelliJ IDEA\u306e\u5834\u5408\u3001Build -> Make Project\u3057\u305f\u30bf\u30a4\u30df\u30f3\u30b0\n\n> DevTools relies on the application context\u2019s shutdown hook to close it during a restart. It will not work correctly if you have disabled the shutdown hook\n\nDevTools \u306f\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u30b3\u30f3\u30c6\u30ad\u30b9\u30c8\u306eShutdown\u3092\u30d5\u30c3\u30af\u306b\u4f9d\u5b58\u3057\u3066\u3044\u308b\u3002\n\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u304c\u30b7\u30e3\u30c3\u30c8\u30c0\u30a6\u30f3\u30d5\u30c3\u30af\u3092\u7121\u52b9\u306b\u3057\u3066\u3044\u308b\u3068DevTools \u306f\u6b63\u5e38\u306b\u52d5\u4f5c\u3057\u306a\u3044\u3002\n\n>### 20.2.1 Excluding resources\n>Certain resources don\u2019t necessarily need to trigger a restart when they are changed. For example, Thymeleaf templates can just be edited in-place. By default changing resources in /META-INF/maven, /META-INF/resources ,/resources ,/static ,/public or /templates will not trigger a restart but will trigger a live reload. If you want to customize these exclusions you can use the spring.devtools.restart.exclude property. For example, to exclude only /static and /public you would set the following:\n\n```\nspring.devtools.restart.exclude=static/**,public/**\n```\n\nAutomatic restart\u306e\u5bfe\u8c61\u304b\u3089\u9664\u5916\u3057\u305f\u3044\u30d5\u30a1\u30a4\u30eb\u304c\u3042\u308b\u5834\u5408\u3001application.properties\u306b\u4e0a\u8a18\u306e\u3088\u3046\u306b\u8a2d\u5b9a\u3059\u308b\u3002\n\n>if you want to keep those defaults and add additional exclusions, use the spring.devtools.restart.additional-exclude property instead.\n\n```\nspring.devtools.restart.exclude=static/**,public/**\n```\n\n\u30c7\u30d5\u30a9\u30eb\u30c8\u306e\u8a2d\u5b9a\u306b\u8ffd\u52a0\u3057\u305f\u3044\u5834\u5408\u3001\u4e0a\u8a18\u306e\u3088\u3046\u306b\u8a18\u8f09\u3059\u308b\u9078\u629e\u80a2\u3082\u3042\u308b\u3002\n\n>### 20.2.2 Watching additional paths\n>You may want your application to be restarted or reloaded when you make changes to files that are not on the classpath. To do so, use the spring.devtools.restart.additional-paths property to configure additional paths to watch for changes. You can use the spring.devtools.restart.exclude property described above to control whether changes beneath the additional paths will trigger a full restart or just a live reload.\n\nautomatic restart\u306e\u76e3\u8996\u5bfe\u8c61\u30d1\u30b9\u3092\u5897\u3084\u3057\u305f\u3044\u5834\u5408\u3001`spring.devtools.restart.additional-paths` propertie\u306b\u8a2d\u5b9a\u3059\u308c\u3070\u3088\u3044\u3002\n\n>### 20.2.3 Disabling restart\n>If you don\u2019t want to use the restart feature you can disable it using the spring.devtools.restart.enabled property. In most cases you can set this in your application.properties (this will still initialize the restart classloader but it won\u2019t watch for file changes).\n\nDevTool\u306eauto restart\u3092\u7121\u52b9\u5316\u3057\u305f\u3044\u5834\u5408\u3001`spring.devtools.restart.enabled`\u30d7\u30ed\u30d1\u30c6\u30a3\u304c\u4f7f\u7528\u3067\u304d\u308b\u3002\n\u901a\u5e38\u306fapplication.properties\u306b\u8a2d\u5b9a\u3059\u308c\u3070\u4e8b\u8db3\u308a\u308b\u304c\u5b8c\u74a7\u306b\u7121\u52b9\u5316\u3057\u305f\u3044\u5834\u5408\u306f\u3001Sample\u306e\u3088\u3046\u306b`main()`\u30e1\u30bd\u30c3\u30c9\u3067`SpringApplication.run()`\u3059\u308b\u524d\u306bSystem\u30d7\u30ed\u30d1\u30c6\u30a3\u306b\u8a2d\u5b9a\u3059\u308b\u65b9\u6cd5\u3082\u3042\u308b\u3002\n\n>## 20.3 LiveReload\n>The spring-boot-devtools module includes an embedded LiveReload server that can be used to trigger a browser refresh when a resource is changed. LiveReload browser extensions are freely available for Chrome, Firefox and Safari from livereload.com.\n\n`spring-boot-devtools`\u306eLiveReload\u6a5f\u80fd\u306f\u30ea\u30bd\u30fc\u30b9\u306e\u5909\u66f4\u6642\u306b\u30d6\u30e9\u30a6\u30b6\u306e\u30ea\u30ed\u30fc\u30c9\u3092\u30c8\u30ea\u30ac\u30fc\u3059\u308b\u3002\nLiveReload Browser Extention\u306fChrome,Firefox,Safari\u7528\u304c\u7121\u6599\u914d\u5e03\u3055\u308c\u3066\u3044\u308b\u3002\n\n\uff03\u7de8\u96c6\u6ce8\u8a18\uff1aLiveReload\u3092\u4f7f\u7528\u3059\u308b\u306b\u306f\u3042\u3089\u304b\u3058\u3081\u30d6\u30e9\u30a6\u30b6\u306bExtention\u3092\u5165\u308c\u3066\u304a\u304f\u5fc5\u8981\u304c\u3042\u308b\u3063\u3066\u3053\u3068\u304b\u306a\n\n>## 20.4 Global settings\n>You can configure global devtools settings by adding a file named .spring-boot-devtools.properties to your $HOME folder (note that the filename starts with \u201c.\u201d). Any properties added to this file will apply to all Spring Boot applications on your machine that use devtools. For example, to configure restart to always use a trigger file, you would add the following:\n\n\u30b0\u30ed\u30fc\u30d0\u30eb\u8a2d\u5b9a\u306f$HOME\u914d\u4e0b\u306e`.spring-boot-devtools.properties`\u306b\u8a2d\u5b9a\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u308b\u3002\n\n>## 20.5 Remote applications\n>The Spring Boot developer tools are not just limited to local development. You can also use several features when running applications remotely. Remote support is opt-in, to enable it you need to set a spring.devtools.remote.secret property. \n\nDevTool\u306f\u30ea\u30e2\u30fc\u30c8\u3067\u52d5\u4f5c\u3057\u3066\u3044\u308b\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u306b\u5bfe\u3057\u3066\u3082\u6709\u52b9\u3002\n\u30ea\u30e2\u30fc\u30c8\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u3067DevTool\u3092\u4f7f\u3046\u5834\u5408`spring.devtools.remote.secret`\n\u306e\u8a2d\u5b9a\u304c\u5fc5\u8981\u3002\n\n\uff03\u7de8\u96c6\u6ce8\u8a18\uff1a\u8a2d\u5b9a\u5024\u306f\u306a\u3093\u3067\u3082\u3044\u3044\u3088\u3046\u3067\u3059\u3002\n\n\n>Remote devtools support is provided in two parts; there is a server side endpoint that accepts connections, and a client application that you run in your IDE. The server component is automatically enabled when the >spring.devtools.remote.secret property is set. The client component must be launched manually.\n\nRemote DevTool\u306f2\u3064\u306e\u30d1\u30fc\u30c4\u3067\u69cb\u6210\u3055\u308c\u3066\u3044\u308b\u3002\n\u30b5\u30fc\u30d0\u30fc\u30b5\u30a4\u30c9\u3068\u30af\u30e9\u30a4\u30a2\u30f3\u30c8(IDE).`spring.devtools.remote.secret`\u30d7\u30ed\u30d1\u30c6\u30a3\u3092\u8a2d\u5b9a\u3059\u308c\u3070\u30b5\u30fc\u30d0\u30fc\u30b5\u30a4\u30c9\u306f\u81ea\u52d5\u7684\u306bRemote Devtool\u304c\u6709\u52b9\u306b\u306a\u308b\u3002\n\u30af\u30e9\u30a4\u30a2\u30f3\u30c8(IDE)\u5074\u306f\u624b\u52d5\u3067\u8d77\u52d5\u3059\u308b\u5fc5\u8981\u304c\u3042\u308b\u3002\n\u3002\n\n>### 20.5.1 Running the remote client application\n>The remote client application is designed to be run from within you IDE. You need to run org.springframework.boot.devtools.RemoteSpringApplication using the same classpath as the remote project that you\u2019re connecting to. The non-option argument passed to the application should be the remote URL that you are connecting to.\n\nRemote DevTool\u3092\u4f7f\u3046\u306b\u306f\n\u30ea\u30e2\u30fc\u30c8\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\uff08IDE\uff09\u5074\u3067\u306f\u3001\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\uff08\u30aa\u30d7\u30b7\u30e7\u30f3\u4ee5\u5916\u306e\u5f15\u6570\uff09\u306b\u63a5\u7d9a\u5148\u306e\u30ea\u30e2\u30fc\u30c8URL\u3092\u6e21\u3057\u307e\u3059\u3002\u6b21\u306b\u5b9f\u884c\u6642\u306emain\u30af\u30e9\u30b9\u306borg.springframework.boot.devtools.RemoteSpringApplication\n\u3092\u6307\u5b9a\u3057\u307e\u3059\u3002\n\u3053\u308c\u3060\u3051\u3002\n\n>### 20.5.2 Remote update\n>Java remote debugging is useful when diagnosing issues on a remote application. Unfortunately, it\u2019s not always possible to enable remote debugging when your application is deployed outside of your data center. Remote debugging can also be tricky to setup if you are using a container based technology such as Docker.\n\n\u30ea\u30e2\u30fc\u30c8\u30c7\u30d0\u30c3\u30b0\u306f\u6709\u52b9\u306a\u624b\u6bb5\u3067\u3059\u304c\u3001\u74b0\u5883\u306b\u3088\u3063\u3066\u306f\u5fc5\u305a\u5b9f\u884c\u3067\u304d\u308b\u3068\u306f\u9650\u308a\u307e\u305b\u3093\u3002\n\u4f8b\u3048\u3070Docker\u3068\u304b\u6ce8\u610f\u304c\u5fc5\u8981\u3067\u3059\u3002\n\n>## 21. Packaging your application for production\n>Executable jars can be used for production deployment. As they are self-contained, they are also ideally suited for cloud-based deployment.\n\n\u5b9f\u884c\u5f62\u5f0f\u306ejar\u3092\u672c\u756a\u30ea\u30ea\u30fc\u30b9\u7528\u3068\u3057\u3066\u4f7f\u3048\u307e\u3059\u3002\n\u3053\u308c\u306f\u30af\u30e9\u30a6\u30c9\u30d9\u30fc\u30b9\u3078\u306e\u5c55\u958b\u3078\u9069\u3057\u3066\u3044\u307e\u3059\u3088\u3002\n\n># Part IV. Spring Boot features\n\n\u3053\u306e\u30bb\u30af\u30b7\u30e7\u30f3\u3067\u306fSpring Boot\u306e\u8a73\u7d30\u306b\u3064\u3044\u3066\u8aac\u660e\u3057\u307e\u3059\u3002\n\n># 23. SpringApplication\n> The SpringApplication class provides a convenient way to bootstrap a Spring application that will be started from a main() method. In many situations you can just delegate to the static SpringApplication.run method:\n\n`SpringApplication`\u30af\u30e9\u30b9\u306fSpringApplication\u3092\u8d77\u52d5\u3059\u308b\u305f\u3081\u306e\u4fbf\u5229\u306a\u6a5f\u80fd\u3092\u5b9f\u88c5\u3057\u3066\u3044\u307e\u3059\u3002\nmain()\u30e1\u30bd\u30c3\u30c9\u3067`SpringApplication.run`\u3092\u5b9f\u884c\u3059\u308b\u3060\u3051\u3002\n\n>## 23.1 Customizing the Banner\n>The banner that is printed on start up can be changed by adding a banner.txt file to your classpath, or by setting banner.location to the location of such a file. If the file has an unusual encoding you can set banner.charset (default is UTF-8).\n\n\u8d77\u52d5\u6642\u306e\u30d0\u30ca\u30fc\u306f\u5909\u66f4\u3059\u308b\u4e8b\u304c\u51fa\u6765\u307e\u3059\u3002\nbanner.txt\u3001banner.location\u3001banner.charset\u306a\u3069\u3067\u30ab\u30b9\u30bf\u30de\u30a4\u30ba\u3067\u304d\u307e\u3059\u3002\n\n> Table 23.1. Banner variables\n\n\u30d0\u30ca\u30fc\u3067\u4f7f\u3048\u308b\u74b0\u5883\u5909\u6570\u306fTable 23.1.\u3092\u53c2\u7167\n\n>## 23.2 Customizing SpringApplication\n> If the SpringApplication defaults aren\u2019t to your taste you can instead create a local instance and customize it. For example, to turn off the banner you would write:\n\nSpringApplication \u306e\u30c7\u30d5\u30a9\u30eb\u30c8\u304c\u6c17\u306b\u5165\u3089\u306a\u3051\u308c\u3070\u3001`SpringApplication`\u306e\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u751f\u6210\u3057\u3066\u30aa\u30d7\u30b7\u30e7\u30f3\u3092\u8a2d\u5b9a\u3059\u308b\u4e8b\u304c\u51fa\u6765\u307e\u3059\u3002\n\n\u4f8b\u3048\u3070\u3001\u3053\u3093\u306a\u611f\u3058\n```java\npublic static void main(String[] args) {\n    SpringApplication app = new SpringApplication(MySpringConfiguration.class);\n        app.setBannerMode(Banner.Mode.OFF);\n    app.run(args);\n}\n```\n> # 23.4 Application events and listeners\n> In addition to the usual Spring Framework events, such as ContextRefreshedEvent, a SpringApplication sends some additional application events.\n\n`SpringApplication.addListeners(\u2026\u200b)`\u306b\u8a2d\u5b9a\u3057\u3066\u304a\u3051\u3070\u3001Spring framework\u306e\u30a4\u30d9\u30f3\u30c8\u3092\u53d7\u3051\u308b\u3053\u3068\u304c\u3067\u304d\u308b\u3002\n\n\n\u4ee5\u964d\u3001\u307e\u305f\u6642\u9593\u306e\u3042\u308b\u3068\u304d\u306b\u3002\u3002\n\n\n\n\n\n\n\n\n\n\n\n", "tags": ["spring-boot"]}