{"context": "\n\n\u306f\u3058\u3081\u306b\n\u5bdd\u308b\u524d\u306b\u306a\u3093\u3068\u306a\u304f\u601d\u3044\u3064\u3044\u3066\u3001React\u306etic-tac-toe(\u4e09\u76ee\u4e26\u3079)\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb\u306e\u6700\u5f8c\u306b\u3064\u3044\u3066\u3044\u308b\u7df4\u7fd2\u554f\u984c\u3092\u3084\u3063\u3066\u307f\u305f\u3002\nhttps://facebook.github.io/react/tutorial/tutorial.html\n\n\u5143\u306e\u30b3\u30fc\u30c9\n\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb\u306f\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u3092\u66f8\u304d\u63db\u3048\u306a\u304c\u3089\u9032\u3081\u3066\u3044\u304f\u3088\u3046\u306b\u306a\u3063\u3066\u3044\u308b\u3002\u4ee5\u4e0b\u304c\u3001\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb\u3092\u4e00\u901a\u308a\u7d42\u3048\u305f\u3068\u304d\u306e\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u3002\u3053\u308c\u3092\u5143\u306b\u7df4\u7fd2\u554f\u984c\u3092\u3084\u308b\u3002\nfunction Square(props) {\n  return (\n    <button className=\"square\" onClick={() => props.onClick()}>\n      {props.value}\n    </button>\n  );\n}\n\nclass Board extends React.Component {\n  renderSquare(i) {\n    return <Square value={this.props.squares[i]} onClick={() => this.props.onClick(i)} />;\n  }\n  render() {\n    return (\n      <div>\n        <div className=\"status\">{/*status*/}</div>\n        <div className=\"board-row\">\n          {this.renderSquare(0)}\n          {this.renderSquare(1)}\n          {this.renderSquare(2)}\n        </div>\n        <div className=\"board-row\">\n          {this.renderSquare(3)}\n          {this.renderSquare(4)}\n          {this.renderSquare(5)}\n        </div>\n        <div className=\"board-row\">\n          {this.renderSquare(6)}\n          {this.renderSquare(7)}\n          {this.renderSquare(8)}\n        </div>\n      </div>\n    );\n  }\n}\n\nclass Game extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      history: [{\n        squares: Array(9).fill(null)        \n      }],\n      xIsNext: true,\n      stepNumber: 0,\n    };\n  }\n  handleClick(i) {\n    const history = this.state.history;\n    const current = history[this.state.stepNumber];\n    const squares = current.squares.slice();\n    if (calculateWinner(squares) || squares[i]) {\n      return;\n    }\n    squares[i] = this.state.xIsNext ? 'X' : 'O';\n    this.setState({\n      history: history.concat([{\n        squares: squares\n      }]),\n      xIsNext: !this.state.xIsNext,\n      stepNumber: history.length,\n    });\n  }\n  jumpTo(step) {\n    const history = this.state.history;\n    this.setState({\n      stepNumber: step,\n      xIsNext: (step % 2) ? false : true,\n      history: history.slice(0, step + 1),\n    });\n  }\n  render() {\n    const history = this.state.history;\n    const current = history[history.length - 1];\n    const winner = calculateWinner(current.squares);\n    const moves = history.map((step, move) => {\n      const desc = move ?\n        'Move #' + move :\n        'Game start';\n      return (\n        <li key={move}>\n          <a href=\"#\" onClick={() => this.jumpTo(move)}>{desc}</a>\n        </li>\n      );\n    });\n\n    let status;\n    if (winner) {\n      status = 'Winner: ' + winner;\n    } else {\n      status = 'Next player: ' + (this.state.xIsNext ? 'X' : 'O');\n    }\n    return (\n      <div className=\"game\">\n        <div className=\"game-board\">\n          <Board\n            squares={current.squares}\n            onClick={(i) => this.handleClick(i)}\n          />\n        </div>\n        <div className=\"game-info\">\n          <div>{status}</div>\n          <ol>{moves}</ol>\n        </div>\n      </div>\n    );\n  }\n}\n\n// ========================================\n\nReactDOM.render(\n  <Game />,\n  document.getElementById('container')\n);\n\nfunction calculateWinner(squares) {\n  const lines = [\n    [0, 1, 2],\n    [3, 4, 5],\n    [6, 7, 8],\n    [0, 3, 6],\n    [1, 4, 7],\n    [2, 5, 8],\n    [0, 4, 8],\n    [2, 4, 6],\n  ];\n  for (let i = 0; i < lines.length; i++) {\n    const [a, b, c] = lines[i];\n    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n      return squares[a];\n    }\n  }\n  return null;\n}\n\n\n1. Display the move locations in the format \"(1, 3)\" instead of \"6\".\n\u305d\u3082\u305d\u3082\u82f1\u8a9e\u306e\u8cea\u554f\u306e\u610f\u5473\u3092\u8aa4\u89e3\u3057\u3066\u3044\u308b\u304b\u3082\u3057\u308c\u306a\u3044\u306e\u3067\u3042\u3057\u304b\u3089\u305a\u3002Game.state.history.clickedLocation\u3092\u8ffd\u52a0\u3057\u3066\u3001\u30af\u30ea\u30c3\u30af\u3055\u308c\u305f\u76e4\u9762\u306e\u4f4d\u7f6e\u3092\u683c\u7d0d\u3059\u308c\u3070\u826f\u3044\u3002\n\n function Square(props) {\n   return (\n     <button className=\"square\" onClick={() => props.onClick()}>\n       {props.value}\n     </button>\n   );\n }\n\n class Board extends React.Component {\n   renderSquare(i) {\n     return <Square value={this.props.squares[i]} onClick={() => this.props.onClick(i)} />;\n   }\n   render() {\n     return (\n       <div>\n         <div className=\"status\">{/*status*/}</div>\n         <div className=\"board-row\">\n           {this.renderSquare(0)}\n           {this.renderSquare(1)}\n           {this.renderSquare(2)}\n         </div>\n         <div className=\"board-row\">\n           {this.renderSquare(3)}\n           {this.renderSquare(4)}\n           {this.renderSquare(5)}\n         </div>\n         <div className=\"board-row\">\n           {this.renderSquare(6)}\n           {this.renderSquare(7)}\n           {this.renderSquare(8)}\n         </div>\n       </div>\n     );\n   }\n }\n\n class Game extends React.Component {\n   constructor() {\n     super();\n     this.state = {\n       history: [{\n!        squares: Array(9).fill(null),\n+        clickedLocation: [0, 0],\u3000// clickedLocation\u3092\u8ffd\u52a0\n       }],\n       xIsNext: true,\n       stepNumber: 0,\n     };\n   }\n   handleClick(i) {\n     const history = this.state.history;\n     const current = history[this.state.stepNumber];\n     const squares = current.squares.slice();\n     if (calculateWinner(squares) || squares[i]) {\n       return;\n     }\n     squares[i] = this.state.xIsNext ? 'X' : 'O';\n     this.setState({\n       history: history.concat([{\n!        squares: squares,\n+        clickedLocation: [Math.floor(i / 3) + 1, i % 3 + 1], // clickedLocation\u3092\u8ffd\u52a0\n       }]),\n       xIsNext: !this.state.xIsNext,\n       stepNumber: history.length,\n     });\n   }\n   jumpTo(step) {\n     const history = this.state.history;\n     this.setState({\n       stepNumber: step,\n       xIsNext: (step % 2) ? false : true,\n       history: history.slice(0, step + 1),\n     });\n   }\n   render() {\n     const history = this.state.history;\n     const current = history[history.length - 1];\n     const winner = calculateWinner(current.squares);\n     const moves = history.map((step, move) => {\n+      const clickedLocation = step.clickedLocation; // clickedLocation\u3092\u8ffd\u52a0\n       const desc = move ?\n!        'Move #' + move  + ' (' + clickedLocation[0] + ',' + clickedLocation[1] + ')': // // clickedLocation\u3092\u8ffd\u52a0\n         'Game start';\n       return (\n         <li key={move}>\n           <a href=\"#\" onClick={() => this.jumpTo(move)}>{desc}</a>\n         </li>\n       );\n     });\n\n     let status;\n     if (winner) {\n       status = 'Winner: ' + winner;\n     } else {\n       status = 'Next player: ' + (this.state.xIsNext ? 'X' : 'O');\n     }\n     return (\n       <div className=\"game\">\n         <div className=\"game-board\">\n           <Board\n             squares={current.squares}\n             onClick={(i) => this.handleClick(i)}\n           />\n         </div>\n         <div className=\"game-info\">\n           <div>{status}</div>\n           <ol>{moves}</ol>\n         </div>\n       </div>\n     );\n   }\n }\n\n // ========================================\n\n ReactDOM.render(\n   <Game />,\n   document.getElementById('container')\n );\n\n function calculateWinner(squares) {\n   const lines = [\n     [0, 1, 2],\n     [3, 4, 5],\n     [6, 7, 8],\n     [0, 3, 6],\n     [1, 4, 7],\n     [2, 5, 8],\n     [0, 4, 8],\n     [2, 4, 6],\n   ];\n   for (let i = 0; i < lines.length; i++) {\n     const [a, b, c] = lines[i];\n     if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n       return squares[a];\n     }\n   }\n   return null;\n }\n\n\n2. Bold the currently-selected item in the move list.\nstyle={{fontWeight:\"bold\"}}\u3067\u3001font-weight:bold;\u306estyle\u3092\u8ffd\u52a0\u3067\u304d\u308b\u3002\nfunction Square(props) {\n  return (\n    <button className=\"square\" onClick={() => props.onClick()}>\n      {props.value}\n    </button>\n  );\n}\n\nclass Board extends React.Component {\n  renderSquare(i) {\n    return <Square value={this.props.squares[i]} onClick={() => this.props.onClick(i)} />;\n  }\n  render() {\n    return (\n      <div>\n        <div className=\"status\">{/*status*/}</div>\n        <div className=\"board-row\">\n          {this.renderSquare(0)}\n          {this.renderSquare(1)}\n          {this.renderSquare(2)}\n        </div>\n        <div className=\"board-row\">\n          {this.renderSquare(3)}\n          {this.renderSquare(4)}\n          {this.renderSquare(5)}\n        </div>\n        <div className=\"board-row\">\n          {this.renderSquare(6)}\n          {this.renderSquare(7)}\n          {this.renderSquare(8)}\n        </div>\n      </div>\n    );\n  }\n}\n\nclass Game extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      history: [{\n        squares: Array(9).fill(null)        \n      }],\n      xIsNext: true,\n      stepNumber: 0,\n    };\n  }\n  handleClick(i) {\n    const history = this.state.history;\n    const current = history[this.state.stepNumber];\n    const squares = current.squares.slice();\n    if (calculateWinner(squares) || squares[i]) {\n      return;\n    }\n    squares[i] = this.state.xIsNext ? 'X' : 'O';\n    this.setState({\n      history: history.concat([{\n        squares: squares\n      }]),\n      xIsNext: !this.state.xIsNext,\n      stepNumber: history.length,\n    });\n  }\n  jumpTo(step) {\n    const history = this.state.history;\n    this.setState({\n      stepNumber: step,\n      xIsNext: (step % 2) ? false : true,\n      history: history.slice(0, step + 1),\n    });\n  }\n  render() {\n    const history = this.state.history;\n    const current = history[history.length - 1];\n    const winner = calculateWinner(current.squares);\n    const moves = history.map((step, move) => {\n      const desc = move ?\n        'Move #' + move :\n        'Game start';\n      // \u3053\u3053\u3067\u6761\u4ef6\u5206\u5c90\n      if (move == history.length - 1) {\n        return (\n          <li key={move}>\n            <a href=\"#\" onClick={() => this.jumpTo(move)} style={{fontWeight:\"bold\"}}>{desc}</a> // style=\"font-weight:bold;\"\n          </li>\n        );\n      }else {\n        return (\n          <li key={move}>\n            <a href=\"#\" onClick={() => this.jumpTo(move)}>{desc}</a>\n          </li>\n        );\n      }\n    });\n\n    let status;\n    if (winner) {\n      status = 'Winner: ' + winner;\n    } else {\n      status = 'Next player: ' + (this.state.xIsNext ? 'X' : 'O');\n    }\n    return (\n      <div className=\"game\">\n        <div className=\"game-board\">\n          <Board\n            squares={current.squares}\n            onClick={(i) => this.handleClick(i)}\n          />\n        </div>\n        <div className=\"game-info\">\n          <div>{status}</div>\n          <ol>{moves}</ol>\n        </div>\n      </div>\n    );\n  }\n}\n\n// ========================================\n\nReactDOM.render(\n  <Game />,\n  document.getElementById('container')\n);\n\nfunction calculateWinner(squares) {\n  const lines = [\n    [0, 1, 2],\n    [3, 4, 5],\n    [6, 7, 8],\n    [0, 3, 6],\n    [1, 4, 7],\n    [2, 5, 8],\n    [0, 4, 8],\n    [2, 4, 6],\n  ];\n  for (let i = 0; i < lines.length; i++) {\n    const [a, b, c] = lines[i];\n    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n      return squares[a];\n    }\n  }\n  return null;\n}\n\n\n3. Rewrite Board to use two loops to make the squares instead of hardcoding them.\nfor\u6587\u3092\u4f7f\u3063\u3066Square\u3092\u7d44\u307f\u7acb\u3066\u308b\u3002<Square />\u306bkey\u3092\u8a2d\u5b9a\u3057\u306a\u3044\u3068\u3001Each child in an array or iterator should have a unique \"key\" prop.\u306e\u30a8\u30e9\u30fc\u304c\u51fa\u308b\u3002\nfunction Square(props) {\n  return (\n    <button className=\"square\" onClick={() => props.onClick()}>\n      {props.value}\n    </button>\n  );\n}\n\nclass Board extends React.Component {\n  renderSquare(i) {\n    return <Square key={i} value={this.props.squares[i]} onClick={() => this.props.onClick(i)} />; // key\u304c\u5fc5\u8981\n  }\n  render() {\n    // for\u3092\u4f7f\u3063\u3066\u8981\u7d20\u3092\u7d44\u307f\u7acb\u3066\u308b\n    var wrapper = [];\n    for (var i=0; i<=2; i++) {\n      var row = [];\n      for (var j=3 * i; j<=3 * i + 2; j++) {\n        row.push(this.renderSquare(j));\n      }\n      wrapper.push(<div className=\"board-row\" key={i}>{row}</div>);\n    }\n    return (\n      <div>\n        <div className=\"status\">{/*status*/}</div>\n        {wrapper}\n      </div>\n    );\n  }\n}\n\nclass Game extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      history: [{\n        squares: Array(9).fill(null)        \n      }],\n      xIsNext: true,\n      stepNumber: 0,\n    };\n  }\n  handleClick(i) {\n    const history = this.state.history;\n    const current = history[this.state.stepNumber];\n    const squares = current.squares.slice();\n    if (calculateWinner(squares) || squares[i]) {\n      return;\n    }\n    squares[i] = this.state.xIsNext ? 'X' : 'O';\n    this.setState({\n      history: history.concat([{\n        squares: squares\n      }]),\n      xIsNext: !this.state.xIsNext,\n      stepNumber: history.length,\n    });\n  }\n  jumpTo(step) {\n    const history = this.state.history;\n    this.setState({\n      stepNumber: step,\n      xIsNext: (step % 2) ? false : true,\n      history: history.slice(0, step + 1),\n    });\n  }\n  render() {\n    const history = this.state.history;\n    const current = history[history.length - 1];\n    const winner = calculateWinner(current.squares);\n    const moves = history.map((step, move) => {\n      const desc = move ?\n        'Move #' + move :\n        'Game start';\n      return (\n        <li key={move}>\n          <a href=\"#\" onClick={() => this.jumpTo(move)}>{desc}</a>\n        </li>\n      );\n    });\n\n    let status;\n    if (winner) {\n      status = 'Winner: ' + winner;\n    } else {\n      status = 'Next player: ' + (this.state.xIsNext ? 'X' : 'O');\n    }\n    return (\n      <div className=\"game\">\n        <div className=\"game-board\">\n          <Board\n            squares={current.squares}\n            onClick={(i) => this.handleClick(i)}\n          />\n        </div>\n        <div className=\"game-info\">\n          <div>{status}</div>\n          <ol>{moves}</ol>\n        </div>\n      </div>\n    );\n  }\n}\n\n// ========================================\n\nReactDOM.render(\n  <Game />,\n  document.getElementById('container')\n);\n\nfunction calculateWinner(squares) {\n  const lines = [\n    [0, 1, 2],\n    [3, 4, 5],\n    [6, 7, 8],\n    [0, 3, 6],\n    [1, 4, 7],\n    [2, 5, 8],\n    [0, 4, 8],\n    [2, 4, 6],\n  ];\n  for (let i = 0; i < lines.length; i++) {\n    const [a, b, c] = lines[i];\n    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n      return squares[a];\n    }\n  }\n  return null;\n}\n\n\n4. Add a toggle button that lets you sort the moves in either ascending or descending order.\nonClick={() => this.toggleSort()}\u3067\u3001\u30c8\u30b0\u30eb\u30dc\u30bf\u30f3\u306b\u30a4\u30d9\u30f3\u30c8\u30cf\u30f3\u30c9\u30e9\u3092\u3064\u3051\u308b\u3002Game.state.sort\u3067\u30bd\u30fc\u30c8\u9806\u3092\u4fdd\u6301\u3059\u308b\u3002\nfunction Square(props) {\n  return (\n    <button className=\"square\" onClick={() => props.onClick()}>\n      {props.value}\n    </button>\n  );\n}\n\nclass Board extends React.Component {\n  renderSquare(i) {\n    return <Square value={this.props.squares[i]} onClick={() => this.props.onClick(i)} />;\n  }\n  render() {\n    return (\n      <div>\n        <div className=\"status\">{/*status*/}</div>\n        <div className=\"board-row\">\n          {this.renderSquare(0)}\n          {this.renderSquare(1)}\n          {this.renderSquare(2)}\n        </div>\n        <div className=\"board-row\">\n          {this.renderSquare(3)}\n          {this.renderSquare(4)}\n          {this.renderSquare(5)}\n        </div>\n        <div className=\"board-row\">\n          {this.renderSquare(6)}\n          {this.renderSquare(7)}\n          {this.renderSquare(8)}\n        </div>\n      </div>\n    );\n  }\n}\n\nclass Game extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      history: [{\n        squares: Array(9).fill(null)        \n      }],\n      xIsNext: true,\n      stepNumber: 0,\n      sort: 0, // sort\u3092\u521d\u671f\u5316\n    };\n  }\n  handleClick(i) {\n    const history = this.state.history;\n    const current = history[this.state.stepNumber];\n    const squares = current.squares.slice();\n    if (calculateWinner(squares) || squares[i]) {\n      return;\n    }\n    squares[i] = this.state.xIsNext ? 'X' : 'O';\n    this.setState({\n      history: history.concat([{\n        squares: squares\n      }]),\n      xIsNext: !this.state.xIsNext,\n      stepNumber: history.length,\n    });\n  }\n  jumpTo(step) {\n    const history = this.state.history;\n    this.setState({\n      stepNumber: step,\n      xIsNext: (step % 2) ? false : true,\n      history: history.slice(0, step + 1),\n    });\n  }\n  toggleSort() {\n    const sort = this.state.sort;\n    this.setState({\n      sort: ~sort, // \u30d3\u30c3\u30c8\u6f14\u7b97\u5b50\u3067sort\u3092\u30c8\u30b0\u30eb\u3059\u308b(0 or -1) \n    });\n  }\n  render() {\n    const history = this.state.history;\n    const sort = this.state.sort; // sort\u306e\u72b6\u614b\u3092\u53d6\u5f97\n    const current = history[history.length - 1];\n    const winner = calculateWinner(current.squares);\n    const moves = history.map((step, move) => {\n      const desc = move ?\n        'Move #' + move :\n        'Game start';\n      return (\n        <li key={move}>\n          <a href=\"#\" onClick={() => this.jumpTo(move)}>{desc}</a>\n        </li>\n      );\n    });\n\n    let status;\n    if (winner) {\n      status = 'Winner: ' + winner;\n    } else {\n      status = 'Next player: ' + (this.state.xIsNext ? 'X' : 'O');\n    }\n    return (\n      <div className=\"game\">\n        <div className=\"game-board\">\n          <Board\n            squares={current.squares}\n            onClick={(i) => this.handleClick(i)}\n          />\n        </div>\n        <div className=\"game-info\">\n          <div>{status}</div>\n          <button onClick={() => this.toggleSort()}>toggle btn</button> // \u30c8\u30b0\u30eb\u30dc\u30bf\u30f3\u3092\u8ffd\u52a0\n          {(() => {\n            return sort == 0 ? <ol>{moves}</ol> : <ol>{moves.reverse()}</ol> // sort\u306e\u5024\u3092\u898b\u3066moves\u306e\u5411\u304d\u3092\u5909\u3048\u308b\n          })()}\n        </div>\n      </div>\n    );\n  }\n}\n\n// ========================================\n\nReactDOM.render(\n  <Game />,\n  document.getElementById('container')\n);\n\nfunction calculateWinner(squares) {\n  const lines = [\n    [0, 1, 2],\n    [3, 4, 5],\n    [6, 7, 8],\n    [0, 3, 6],\n    [1, 4, 7],\n    [2, 5, 8],\n    [0, 4, 8],\n    [2, 4, 6],\n  ];\n  for (let i = 0; i < lines.length; i++) {\n    const [a, b, c] = lines[i];\n    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n      return squares[a];\n    }\n  }\n  return null;\n}\n\n\n5. When someone wins, highlight the three squares that caused the win.\ncalculateWinner\u95a2\u6570\u3067\u3001\u30e9\u30a4\u30f3\u306e\u60c5\u5831\u3082\u8fd4\u3059\u3088\u3046\u306b\u3059\u308b\u3002Game -> Board -> Square\u3068\u60c5\u5831\u3092\u6e21\u3057\u3066\u3044\u304d\u3001Square\u3067\u30cf\u30a4\u30e9\u30a4\u30c8\u306estyle\u3092\u3064\u3051\u308b\u3002\nfunction Square(props) {\n  if (props.highlight) {\n    return (\n      <button className=\"square\" onClick={() => props.onClick()} style={{color: \"red\"}}> // \u30cf\u30a4\u30e9\u30a4\u30c8\u306e\u305f\u3081style\u8ffd\u52a0\n        {props.value}\n      </button>\n    );\n  }else {\n    return (\n      <button className=\"square\" onClick={() => props.onClick()}>\n        {props.value}\n      </button>\n    );\n  }\n}\n\nclass Board extends React.Component {\n  renderSquare(i) {\n    return <Square value={this.props.squares[i]} onClick={() => this.props.onClick(i)} highlight={this.props.winnerLine.includes(i)} />; // Square\u304cwinnerLine\u306b\u542b\u307e\u308c\u3066\u3044\u308c\u3070\u30cf\u30a4\u30e9\u30a4\u30c8\u3059\u308b\n  }\n  render() {\n    return (\n      <div>\n        <div className=\"status\">{/*status*/}</div>\n        <div className=\"board-row\">\n          {this.renderSquare(0)}\n          {this.renderSquare(1)}\n          {this.renderSquare(2)}\n        </div>\n        <div className=\"board-row\">\n          {this.renderSquare(3)}\n          {this.renderSquare(4)}\n          {this.renderSquare(5)}\n        </div>\n        <div className=\"board-row\">\n          {this.renderSquare(6)}\n          {this.renderSquare(7)}\n          {this.renderSquare(8)}\n        </div>\n      </div>\n    );\n  }\n}\n\nclass Game extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      history: [{\n        squares: Array(9).fill(null)        \n      }],\n      xIsNext: true,\n      stepNumber: 0,\n    };\n  }\n  handleClick(i) {\n    const history = this.state.history;\n    const current = history[this.state.stepNumber];\n    const squares = current.squares.slice();\n    if (calculateWinner(squares) || squares[i]) {\n      return;\n    }\n    squares[i] = this.state.xIsNext ? 'X' : 'O';\n    this.setState({\n      history: history.concat([{\n        squares: squares\n      }]),\n      xIsNext: !this.state.xIsNext,\n      stepNumber: history.length,\n    });\n  }\n  jumpTo(step) {\n    const history = this.state.history;\n    this.setState({\n      stepNumber: step,\n      xIsNext: (step % 2) ? false : true,\n      history: history.slice(0, step + 1),\n    });\n  }\n  render() {\n    const history = this.state.history;\n    const current = history[history.length - 1];\n    const winnerData = calculateWinner(current.squares);\n    const winner = winnerData ? winnerData.winner : null;\n    const winnerLine = winnerData ? winnerData.line : []; // winnerLine\u3092\u53d6\u5f97\n    const moves = history.map((step, move) => {\n      const desc = move ?\n        'Move #' + move :\n        'Game start';\n      return (\n        <li key={move}>\n          <a href=\"#\" onClick={() => this.jumpTo(move)}>{desc}</a>\n        </li>\n      );\n    });\n\n    let status;\n    if (winner) {\n      status = 'Winner: ' + winner;\n    } else {\n      status = 'Next player: ' + (this.state.xIsNext ? 'X' : 'O');\n    }\n    return (\n      <div className=\"game\">\n        <div className=\"game-board\">\n          <Board\n            squares={current.squares}\n            onClick={(i) => this.handleClick(i)}\n            winnerLine={winnerLine} // winnerLine\u3092\u8ffd\u52a0\n          />\n        </div>\n        <div className=\"game-info\">\n          <div>{status}</div>\n          <ol>{moves}</ol>\n        </div>\n      </div>\n    );\n  }\n}\n\n// ========================================\n\nReactDOM.render(\n  <Game />,\n  document.getElementById('container')\n);\n\nfunction calculateWinner(squares) {\n  const lines = [\n    [0, 1, 2],\n    [3, 4, 5],\n    [6, 7, 8],\n    [0, 3, 6],\n    [1, 4, 7],\n    [2, 5, 8],\n    [0, 4, 8],\n    [2, 4, 6],\n  ];\n  for (let i = 0; i < lines.length; i++) {\n    const [a, b, c] = lines[i];\n    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n      return { winner: squares[a], line: [a, b, c] }; // line\u3082\u8fd4\u3059\u3088\u3046\u306b\u3059\u308b\n    }\n  }\n  return null;\n}\n\n\n\u611f\u60f3\n\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u3092\u8cbc\u308a\u4ed8\u3051\u305f\u3089\u4e2d\u8eab\u30b9\u30ab\u30b9\u30ab\u306e\u3084\u305f\u3089\u9577\u3044\u8a18\u4e8b\u306b\u306a\u3063\u3066\u3057\u307e\u3063\u305f\u3002\u3002\u5909\u66f4\u3057\u305f\u7b87\u6240\u3060\u3051\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u306b\u8272\u3092\u3064\u3051\u305f\u3044\u306e\u3060\u304c\u3001\u3069\u3046\u3059\u308b\u306e\u304c\u826f\u3044\u306e\u3060\u308d\u3046\uff1f\n\u3042\u3068\u3001React\u3082\u3063\u3068\u3084\u308a\u305f\u3044\u3002\n## \u306f\u3058\u3081\u306b\n\u5bdd\u308b\u524d\u306b\u306a\u3093\u3068\u306a\u304f\u601d\u3044\u3064\u3044\u3066\u3001React\u306etic-tac-toe(\u4e09\u76ee\u4e26\u3079)\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb\u306e\u6700\u5f8c\u306b\u3064\u3044\u3066\u3044\u308b\u7df4\u7fd2\u554f\u984c\u3092\u3084\u3063\u3066\u307f\u305f\u3002\nhttps://facebook.github.io/react/tutorial/tutorial.html\n\n## \u5143\u306e\u30b3\u30fc\u30c9\n\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb\u306f\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u3092\u66f8\u304d\u63db\u3048\u306a\u304c\u3089\u9032\u3081\u3066\u3044\u304f\u3088\u3046\u306b\u306a\u3063\u3066\u3044\u308b\u3002\u4ee5\u4e0b\u304c\u3001\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb\u3092\u4e00\u901a\u308a\u7d42\u3048\u305f\u3068\u304d\u306e\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u3002\u3053\u308c\u3092\u5143\u306b\u7df4\u7fd2\u554f\u984c\u3092\u3084\u308b\u3002\n\n```\nfunction Square(props) {\n  return (\n    <button className=\"square\" onClick={() => props.onClick()}>\n      {props.value}\n    </button>\n  );\n}\n\nclass Board extends React.Component {\n  renderSquare(i) {\n    return <Square value={this.props.squares[i]} onClick={() => this.props.onClick(i)} />;\n  }\n  render() {\n    return (\n      <div>\n        <div className=\"status\">{/*status*/}</div>\n        <div className=\"board-row\">\n          {this.renderSquare(0)}\n          {this.renderSquare(1)}\n          {this.renderSquare(2)}\n        </div>\n        <div className=\"board-row\">\n          {this.renderSquare(3)}\n          {this.renderSquare(4)}\n          {this.renderSquare(5)}\n        </div>\n        <div className=\"board-row\">\n          {this.renderSquare(6)}\n          {this.renderSquare(7)}\n          {this.renderSquare(8)}\n        </div>\n      </div>\n    );\n  }\n}\n\nclass Game extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      history: [{\n        squares: Array(9).fill(null)        \n      }],\n      xIsNext: true,\n      stepNumber: 0,\n    };\n  }\n  handleClick(i) {\n    const history = this.state.history;\n    const current = history[this.state.stepNumber];\n    const squares = current.squares.slice();\n    if (calculateWinner(squares) || squares[i]) {\n      return;\n    }\n    squares[i] = this.state.xIsNext ? 'X' : 'O';\n    this.setState({\n      history: history.concat([{\n        squares: squares\n      }]),\n      xIsNext: !this.state.xIsNext,\n      stepNumber: history.length,\n    });\n  }\n  jumpTo(step) {\n    const history = this.state.history;\n    this.setState({\n      stepNumber: step,\n      xIsNext: (step % 2) ? false : true,\n      history: history.slice(0, step + 1),\n    });\n  }\n  render() {\n    const history = this.state.history;\n    const current = history[history.length - 1];\n    const winner = calculateWinner(current.squares);\n    const moves = history.map((step, move) => {\n      const desc = move ?\n        'Move #' + move :\n        'Game start';\n      return (\n        <li key={move}>\n          <a href=\"#\" onClick={() => this.jumpTo(move)}>{desc}</a>\n        </li>\n      );\n    });\n\n    let status;\n    if (winner) {\n      status = 'Winner: ' + winner;\n    } else {\n      status = 'Next player: ' + (this.state.xIsNext ? 'X' : 'O');\n    }\n    return (\n      <div className=\"game\">\n        <div className=\"game-board\">\n          <Board\n            squares={current.squares}\n            onClick={(i) => this.handleClick(i)}\n          />\n        </div>\n        <div className=\"game-info\">\n          <div>{status}</div>\n          <ol>{moves}</ol>\n        </div>\n      </div>\n    );\n  }\n}\n\n// ========================================\n\nReactDOM.render(\n  <Game />,\n  document.getElementById('container')\n);\n\nfunction calculateWinner(squares) {\n  const lines = [\n    [0, 1, 2],\n    [3, 4, 5],\n    [6, 7, 8],\n    [0, 3, 6],\n    [1, 4, 7],\n    [2, 5, 8],\n    [0, 4, 8],\n    [2, 4, 6],\n  ];\n  for (let i = 0; i < lines.length; i++) {\n    const [a, b, c] = lines[i];\n    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n      return squares[a];\n    }\n  }\n  return null;\n}\n```\n\n## 1. Display the move locations in the format \"(1, 3)\" instead of \"6\".\n\u305d\u3082\u305d\u3082\u82f1\u8a9e\u306e\u8cea\u554f\u306e\u610f\u5473\u3092\u8aa4\u89e3\u3057\u3066\u3044\u308b\u304b\u3082\u3057\u308c\u306a\u3044\u306e\u3067\u3042\u3057\u304b\u3089\u305a\u3002Game.state.history.clickedLocation\u3092\u8ffd\u52a0\u3057\u3066\u3001\u30af\u30ea\u30c3\u30af\u3055\u308c\u305f\u76e4\u9762\u306e\u4f4d\u7f6e\u3092\u683c\u7d0d\u3059\u308c\u3070\u826f\u3044\u3002\n\n```diff\n\n function Square(props) {\n   return (\n     <button className=\"square\" onClick={() => props.onClick()}>\n       {props.value}\n     </button>\n   );\n }\n \n class Board extends React.Component {\n   renderSquare(i) {\n     return <Square value={this.props.squares[i]} onClick={() => this.props.onClick(i)} />;\n   }\n   render() {\n     return (\n       <div>\n         <div className=\"status\">{/*status*/}</div>\n         <div className=\"board-row\">\n           {this.renderSquare(0)}\n           {this.renderSquare(1)}\n           {this.renderSquare(2)}\n         </div>\n         <div className=\"board-row\">\n           {this.renderSquare(3)}\n           {this.renderSquare(4)}\n           {this.renderSquare(5)}\n         </div>\n         <div className=\"board-row\">\n           {this.renderSquare(6)}\n           {this.renderSquare(7)}\n           {this.renderSquare(8)}\n         </div>\n       </div>\n     );\n   }\n }\n \n class Game extends React.Component {\n   constructor() {\n     super();\n     this.state = {\n       history: [{\n!        squares: Array(9).fill(null),\n+        clickedLocation: [0, 0],\u3000// clickedLocation\u3092\u8ffd\u52a0\n       }],\n       xIsNext: true,\n       stepNumber: 0,\n     };\n   }\n   handleClick(i) {\n     const history = this.state.history;\n     const current = history[this.state.stepNumber];\n     const squares = current.squares.slice();\n     if (calculateWinner(squares) || squares[i]) {\n       return;\n     }\n     squares[i] = this.state.xIsNext ? 'X' : 'O';\n     this.setState({\n       history: history.concat([{\n!        squares: squares,\n+        clickedLocation: [Math.floor(i / 3) + 1, i % 3 + 1], // clickedLocation\u3092\u8ffd\u52a0\n       }]),\n       xIsNext: !this.state.xIsNext,\n       stepNumber: history.length,\n     });\n   }\n   jumpTo(step) {\n     const history = this.state.history;\n     this.setState({\n       stepNumber: step,\n       xIsNext: (step % 2) ? false : true,\n       history: history.slice(0, step + 1),\n     });\n   }\n   render() {\n     const history = this.state.history;\n     const current = history[history.length - 1];\n     const winner = calculateWinner(current.squares);\n     const moves = history.map((step, move) => {\n+      const clickedLocation = step.clickedLocation; // clickedLocation\u3092\u8ffd\u52a0\n       const desc = move ?\n!        'Move #' + move  + ' (' + clickedLocation[0] + ',' + clickedLocation[1] + ')': // // clickedLocation\u3092\u8ffd\u52a0\n         'Game start';\n       return (\n         <li key={move}>\n           <a href=\"#\" onClick={() => this.jumpTo(move)}>{desc}</a>\n         </li>\n       );\n     });\n \n     let status;\n     if (winner) {\n       status = 'Winner: ' + winner;\n     } else {\n       status = 'Next player: ' + (this.state.xIsNext ? 'X' : 'O');\n     }\n     return (\n       <div className=\"game\">\n         <div className=\"game-board\">\n           <Board\n             squares={current.squares}\n             onClick={(i) => this.handleClick(i)}\n           />\n         </div>\n         <div className=\"game-info\">\n           <div>{status}</div>\n           <ol>{moves}</ol>\n         </div>\n       </div>\n     );\n   }\n }\n \n // ========================================\n \n ReactDOM.render(\n   <Game />,\n   document.getElementById('container')\n );\n \n function calculateWinner(squares) {\n   const lines = [\n     [0, 1, 2],\n     [3, 4, 5],\n     [6, 7, 8],\n     [0, 3, 6],\n     [1, 4, 7],\n     [2, 5, 8],\n     [0, 4, 8],\n     [2, 4, 6],\n   ];\n   for (let i = 0; i < lines.length; i++) {\n     const [a, b, c] = lines[i];\n     if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n       return squares[a];\n     }\n   }\n   return null;\n }\n```\n\n## 2. Bold the currently-selected item in the move list.\n\n`style={{fontWeight:\"bold\"}}`\u3067\u3001`font-weight:bold;`\u306estyle\u3092\u8ffd\u52a0\u3067\u304d\u308b\u3002\n\n```\nfunction Square(props) {\n  return (\n    <button className=\"square\" onClick={() => props.onClick()}>\n      {props.value}\n    </button>\n  );\n}\n\nclass Board extends React.Component {\n  renderSquare(i) {\n    return <Square value={this.props.squares[i]} onClick={() => this.props.onClick(i)} />;\n  }\n  render() {\n    return (\n      <div>\n        <div className=\"status\">{/*status*/}</div>\n        <div className=\"board-row\">\n          {this.renderSquare(0)}\n          {this.renderSquare(1)}\n          {this.renderSquare(2)}\n        </div>\n        <div className=\"board-row\">\n          {this.renderSquare(3)}\n          {this.renderSquare(4)}\n          {this.renderSquare(5)}\n        </div>\n        <div className=\"board-row\">\n          {this.renderSquare(6)}\n          {this.renderSquare(7)}\n          {this.renderSquare(8)}\n        </div>\n      </div>\n    );\n  }\n}\n\nclass Game extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      history: [{\n        squares: Array(9).fill(null)        \n      }],\n      xIsNext: true,\n      stepNumber: 0,\n    };\n  }\n  handleClick(i) {\n    const history = this.state.history;\n    const current = history[this.state.stepNumber];\n    const squares = current.squares.slice();\n    if (calculateWinner(squares) || squares[i]) {\n      return;\n    }\n    squares[i] = this.state.xIsNext ? 'X' : 'O';\n    this.setState({\n      history: history.concat([{\n        squares: squares\n      }]),\n      xIsNext: !this.state.xIsNext,\n      stepNumber: history.length,\n    });\n  }\n  jumpTo(step) {\n    const history = this.state.history;\n    this.setState({\n      stepNumber: step,\n      xIsNext: (step % 2) ? false : true,\n      history: history.slice(0, step + 1),\n    });\n  }\n  render() {\n    const history = this.state.history;\n    const current = history[history.length - 1];\n    const winner = calculateWinner(current.squares);\n    const moves = history.map((step, move) => {\n      const desc = move ?\n        'Move #' + move :\n        'Game start';\n      // \u3053\u3053\u3067\u6761\u4ef6\u5206\u5c90\n      if (move == history.length - 1) {\n        return (\n          <li key={move}>\n            <a href=\"#\" onClick={() => this.jumpTo(move)} style={{fontWeight:\"bold\"}}>{desc}</a> // style=\"font-weight:bold;\"\n          </li>\n        );\n      }else {\n        return (\n          <li key={move}>\n            <a href=\"#\" onClick={() => this.jumpTo(move)}>{desc}</a>\n          </li>\n        );\n      }\n    });\n\n    let status;\n    if (winner) {\n      status = 'Winner: ' + winner;\n    } else {\n      status = 'Next player: ' + (this.state.xIsNext ? 'X' : 'O');\n    }\n    return (\n      <div className=\"game\">\n        <div className=\"game-board\">\n          <Board\n            squares={current.squares}\n            onClick={(i) => this.handleClick(i)}\n          />\n        </div>\n        <div className=\"game-info\">\n          <div>{status}</div>\n          <ol>{moves}</ol>\n        </div>\n      </div>\n    );\n  }\n}\n\n// ========================================\n\nReactDOM.render(\n  <Game />,\n  document.getElementById('container')\n);\n\nfunction calculateWinner(squares) {\n  const lines = [\n    [0, 1, 2],\n    [3, 4, 5],\n    [6, 7, 8],\n    [0, 3, 6],\n    [1, 4, 7],\n    [2, 5, 8],\n    [0, 4, 8],\n    [2, 4, 6],\n  ];\n  for (let i = 0; i < lines.length; i++) {\n    const [a, b, c] = lines[i];\n    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n      return squares[a];\n    }\n  }\n  return null;\n}\n```\n\n## 3. Rewrite Board to use two loops to make the squares instead of hardcoding them.\nfor\u6587\u3092\u4f7f\u3063\u3066Square\u3092\u7d44\u307f\u7acb\u3066\u308b\u3002`<Square />`\u306bkey\u3092\u8a2d\u5b9a\u3057\u306a\u3044\u3068\u3001`Each child in an array or iterator should have a unique \"key\" prop.`\u306e\u30a8\u30e9\u30fc\u304c\u51fa\u308b\u3002\n\n```\nfunction Square(props) {\n  return (\n    <button className=\"square\" onClick={() => props.onClick()}>\n      {props.value}\n    </button>\n  );\n}\n\nclass Board extends React.Component {\n  renderSquare(i) {\n    return <Square key={i} value={this.props.squares[i]} onClick={() => this.props.onClick(i)} />; // key\u304c\u5fc5\u8981\n  }\n  render() {\n    // for\u3092\u4f7f\u3063\u3066\u8981\u7d20\u3092\u7d44\u307f\u7acb\u3066\u308b\n    var wrapper = [];\n    for (var i=0; i<=2; i++) {\n      var row = [];\n      for (var j=3 * i; j<=3 * i + 2; j++) {\n        row.push(this.renderSquare(j));\n      }\n      wrapper.push(<div className=\"board-row\" key={i}>{row}</div>);\n    }\n    return (\n      <div>\n        <div className=\"status\">{/*status*/}</div>\n        {wrapper}\n      </div>\n    );\n  }\n}\n\nclass Game extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      history: [{\n        squares: Array(9).fill(null)        \n      }],\n      xIsNext: true,\n      stepNumber: 0,\n    };\n  }\n  handleClick(i) {\n    const history = this.state.history;\n    const current = history[this.state.stepNumber];\n    const squares = current.squares.slice();\n    if (calculateWinner(squares) || squares[i]) {\n      return;\n    }\n    squares[i] = this.state.xIsNext ? 'X' : 'O';\n    this.setState({\n      history: history.concat([{\n        squares: squares\n      }]),\n      xIsNext: !this.state.xIsNext,\n      stepNumber: history.length,\n    });\n  }\n  jumpTo(step) {\n    const history = this.state.history;\n    this.setState({\n      stepNumber: step,\n      xIsNext: (step % 2) ? false : true,\n      history: history.slice(0, step + 1),\n    });\n  }\n  render() {\n    const history = this.state.history;\n    const current = history[history.length - 1];\n    const winner = calculateWinner(current.squares);\n    const moves = history.map((step, move) => {\n      const desc = move ?\n        'Move #' + move :\n        'Game start';\n      return (\n        <li key={move}>\n          <a href=\"#\" onClick={() => this.jumpTo(move)}>{desc}</a>\n        </li>\n      );\n    });\n\n    let status;\n    if (winner) {\n      status = 'Winner: ' + winner;\n    } else {\n      status = 'Next player: ' + (this.state.xIsNext ? 'X' : 'O');\n    }\n    return (\n      <div className=\"game\">\n        <div className=\"game-board\">\n          <Board\n            squares={current.squares}\n            onClick={(i) => this.handleClick(i)}\n          />\n        </div>\n        <div className=\"game-info\">\n          <div>{status}</div>\n          <ol>{moves}</ol>\n        </div>\n      </div>\n    );\n  }\n}\n\n// ========================================\n\nReactDOM.render(\n  <Game />,\n  document.getElementById('container')\n);\n\nfunction calculateWinner(squares) {\n  const lines = [\n    [0, 1, 2],\n    [3, 4, 5],\n    [6, 7, 8],\n    [0, 3, 6],\n    [1, 4, 7],\n    [2, 5, 8],\n    [0, 4, 8],\n    [2, 4, 6],\n  ];\n  for (let i = 0; i < lines.length; i++) {\n    const [a, b, c] = lines[i];\n    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n      return squares[a];\n    }\n  }\n  return null;\n}\n```\n\n## 4. Add a toggle button that lets you sort the moves in either ascending or descending order.\n`onClick={() => this.toggleSort()}`\u3067\u3001\u30c8\u30b0\u30eb\u30dc\u30bf\u30f3\u306b\u30a4\u30d9\u30f3\u30c8\u30cf\u30f3\u30c9\u30e9\u3092\u3064\u3051\u308b\u3002Game.state.sort\u3067\u30bd\u30fc\u30c8\u9806\u3092\u4fdd\u6301\u3059\u308b\u3002\n\n```\nfunction Square(props) {\n  return (\n    <button className=\"square\" onClick={() => props.onClick()}>\n      {props.value}\n    </button>\n  );\n}\n\nclass Board extends React.Component {\n  renderSquare(i) {\n    return <Square value={this.props.squares[i]} onClick={() => this.props.onClick(i)} />;\n  }\n  render() {\n    return (\n      <div>\n        <div className=\"status\">{/*status*/}</div>\n        <div className=\"board-row\">\n          {this.renderSquare(0)}\n          {this.renderSquare(1)}\n          {this.renderSquare(2)}\n        </div>\n        <div className=\"board-row\">\n          {this.renderSquare(3)}\n          {this.renderSquare(4)}\n          {this.renderSquare(5)}\n        </div>\n        <div className=\"board-row\">\n          {this.renderSquare(6)}\n          {this.renderSquare(7)}\n          {this.renderSquare(8)}\n        </div>\n      </div>\n    );\n  }\n}\n\nclass Game extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      history: [{\n        squares: Array(9).fill(null)        \n      }],\n      xIsNext: true,\n      stepNumber: 0,\n      sort: 0, // sort\u3092\u521d\u671f\u5316\n    };\n  }\n  handleClick(i) {\n    const history = this.state.history;\n    const current = history[this.state.stepNumber];\n    const squares = current.squares.slice();\n    if (calculateWinner(squares) || squares[i]) {\n      return;\n    }\n    squares[i] = this.state.xIsNext ? 'X' : 'O';\n    this.setState({\n      history: history.concat([{\n        squares: squares\n      }]),\n      xIsNext: !this.state.xIsNext,\n      stepNumber: history.length,\n    });\n  }\n  jumpTo(step) {\n    const history = this.state.history;\n    this.setState({\n      stepNumber: step,\n      xIsNext: (step % 2) ? false : true,\n      history: history.slice(0, step + 1),\n    });\n  }\n  toggleSort() {\n    const sort = this.state.sort;\n    this.setState({\n      sort: ~sort, // \u30d3\u30c3\u30c8\u6f14\u7b97\u5b50\u3067sort\u3092\u30c8\u30b0\u30eb\u3059\u308b(0 or -1) \n    });\n  }\n  render() {\n    const history = this.state.history;\n    const sort = this.state.sort; // sort\u306e\u72b6\u614b\u3092\u53d6\u5f97\n    const current = history[history.length - 1];\n    const winner = calculateWinner(current.squares);\n    const moves = history.map((step, move) => {\n      const desc = move ?\n        'Move #' + move :\n        'Game start';\n      return (\n        <li key={move}>\n          <a href=\"#\" onClick={() => this.jumpTo(move)}>{desc}</a>\n        </li>\n      );\n    });\n\n    let status;\n    if (winner) {\n      status = 'Winner: ' + winner;\n    } else {\n      status = 'Next player: ' + (this.state.xIsNext ? 'X' : 'O');\n    }\n    return (\n      <div className=\"game\">\n        <div className=\"game-board\">\n          <Board\n            squares={current.squares}\n            onClick={(i) => this.handleClick(i)}\n          />\n        </div>\n        <div className=\"game-info\">\n          <div>{status}</div>\n          <button onClick={() => this.toggleSort()}>toggle btn</button> // \u30c8\u30b0\u30eb\u30dc\u30bf\u30f3\u3092\u8ffd\u52a0\n          {(() => {\n            return sort == 0 ? <ol>{moves}</ol> : <ol>{moves.reverse()}</ol> // sort\u306e\u5024\u3092\u898b\u3066moves\u306e\u5411\u304d\u3092\u5909\u3048\u308b\n          })()}\n        </div>\n      </div>\n    );\n  }\n}\n\n// ========================================\n\nReactDOM.render(\n  <Game />,\n  document.getElementById('container')\n);\n\nfunction calculateWinner(squares) {\n  const lines = [\n    [0, 1, 2],\n    [3, 4, 5],\n    [6, 7, 8],\n    [0, 3, 6],\n    [1, 4, 7],\n    [2, 5, 8],\n    [0, 4, 8],\n    [2, 4, 6],\n  ];\n  for (let i = 0; i < lines.length; i++) {\n    const [a, b, c] = lines[i];\n    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n      return squares[a];\n    }\n  }\n  return null;\n}\n```\n\n## 5. When someone wins, highlight the three squares that caused the win.\n\ncalculateWinner\u95a2\u6570\u3067\u3001\u30e9\u30a4\u30f3\u306e\u60c5\u5831\u3082\u8fd4\u3059\u3088\u3046\u306b\u3059\u308b\u3002Game -> Board -> Square\u3068\u60c5\u5831\u3092\u6e21\u3057\u3066\u3044\u304d\u3001Square\u3067\u30cf\u30a4\u30e9\u30a4\u30c8\u306estyle\u3092\u3064\u3051\u308b\u3002\n\n```\nfunction Square(props) {\n  if (props.highlight) {\n    return (\n      <button className=\"square\" onClick={() => props.onClick()} style={{color: \"red\"}}> // \u30cf\u30a4\u30e9\u30a4\u30c8\u306e\u305f\u3081style\u8ffd\u52a0\n        {props.value}\n      </button>\n    );\n  }else {\n    return (\n      <button className=\"square\" onClick={() => props.onClick()}>\n        {props.value}\n      </button>\n    );\n  }\n}\n\nclass Board extends React.Component {\n  renderSquare(i) {\n    return <Square value={this.props.squares[i]} onClick={() => this.props.onClick(i)} highlight={this.props.winnerLine.includes(i)} />; // Square\u304cwinnerLine\u306b\u542b\u307e\u308c\u3066\u3044\u308c\u3070\u30cf\u30a4\u30e9\u30a4\u30c8\u3059\u308b\n  }\n  render() {\n    return (\n      <div>\n        <div className=\"status\">{/*status*/}</div>\n        <div className=\"board-row\">\n          {this.renderSquare(0)}\n          {this.renderSquare(1)}\n          {this.renderSquare(2)}\n        </div>\n        <div className=\"board-row\">\n          {this.renderSquare(3)}\n          {this.renderSquare(4)}\n          {this.renderSquare(5)}\n        </div>\n        <div className=\"board-row\">\n          {this.renderSquare(6)}\n          {this.renderSquare(7)}\n          {this.renderSquare(8)}\n        </div>\n      </div>\n    );\n  }\n}\n\nclass Game extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      history: [{\n        squares: Array(9).fill(null)        \n      }],\n      xIsNext: true,\n      stepNumber: 0,\n    };\n  }\n  handleClick(i) {\n    const history = this.state.history;\n    const current = history[this.state.stepNumber];\n    const squares = current.squares.slice();\n    if (calculateWinner(squares) || squares[i]) {\n      return;\n    }\n    squares[i] = this.state.xIsNext ? 'X' : 'O';\n    this.setState({\n      history: history.concat([{\n        squares: squares\n      }]),\n      xIsNext: !this.state.xIsNext,\n      stepNumber: history.length,\n    });\n  }\n  jumpTo(step) {\n    const history = this.state.history;\n    this.setState({\n      stepNumber: step,\n      xIsNext: (step % 2) ? false : true,\n      history: history.slice(0, step + 1),\n    });\n  }\n  render() {\n    const history = this.state.history;\n    const current = history[history.length - 1];\n    const winnerData = calculateWinner(current.squares);\n    const winner = winnerData ? winnerData.winner : null;\n    const winnerLine = winnerData ? winnerData.line : []; // winnerLine\u3092\u53d6\u5f97\n    const moves = history.map((step, move) => {\n      const desc = move ?\n        'Move #' + move :\n        'Game start';\n      return (\n        <li key={move}>\n          <a href=\"#\" onClick={() => this.jumpTo(move)}>{desc}</a>\n        </li>\n      );\n    });\n\n    let status;\n    if (winner) {\n      status = 'Winner: ' + winner;\n    } else {\n      status = 'Next player: ' + (this.state.xIsNext ? 'X' : 'O');\n    }\n    return (\n      <div className=\"game\">\n        <div className=\"game-board\">\n          <Board\n            squares={current.squares}\n            onClick={(i) => this.handleClick(i)}\n            winnerLine={winnerLine} // winnerLine\u3092\u8ffd\u52a0\n          />\n        </div>\n        <div className=\"game-info\">\n          <div>{status}</div>\n          <ol>{moves}</ol>\n        </div>\n      </div>\n    );\n  }\n}\n\n// ========================================\n\nReactDOM.render(\n  <Game />,\n  document.getElementById('container')\n);\n\nfunction calculateWinner(squares) {\n  const lines = [\n    [0, 1, 2],\n    [3, 4, 5],\n    [6, 7, 8],\n    [0, 3, 6],\n    [1, 4, 7],\n    [2, 5, 8],\n    [0, 4, 8],\n    [2, 4, 6],\n  ];\n  for (let i = 0; i < lines.length; i++) {\n    const [a, b, c] = lines[i];\n    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n      return { winner: squares[a], line: [a, b, c] }; // line\u3082\u8fd4\u3059\u3088\u3046\u306b\u3059\u308b\n    }\n  }\n  return null;\n}\n```\n\n## \u611f\u60f3\n\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u3092\u8cbc\u308a\u4ed8\u3051\u305f\u3089\u4e2d\u8eab\u30b9\u30ab\u30b9\u30ab\u306e\u3084\u305f\u3089\u9577\u3044\u8a18\u4e8b\u306b\u306a\u3063\u3066\u3057\u307e\u3063\u305f\u3002\u3002\u5909\u66f4\u3057\u305f\u7b87\u6240\u3060\u3051\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u306b\u8272\u3092\u3064\u3051\u305f\u3044\u306e\u3060\u304c\u3001\u3069\u3046\u3059\u308b\u306e\u304c\u826f\u3044\u306e\u3060\u308d\u3046\uff1f\n**\u3042\u3068\u3001React\u3082\u3063\u3068\u3084\u308a\u305f\u3044\u3002**\n", "tags": ["React", "JavaScript"]}