{"context": "\u4e00\u822c\u7684\u306a\u696d\u52d9\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u3092\u958b\u767a\u3057\u3066\u3044\u308b\u969b\u3001\u6728\u69cb\u9020\u3068\u3044\u3046\u306e\u306f\u3044\u305f\u308b\u3068\u3053\u308d\u306b\u51fa\u3066\u304d\u3066\u958b\u767a\u8005\u306e\u982d\u3092\u60a9\u307e\u305b\u307e\u3059\u3002 \u4f8b\u3048\u3070\u4f1a\u793e\u306e\u7d44\u7e54\u306a\u3093\u304b\u306f\u5178\u578b\u7684\u306a\u6728\u69cb\u9020\u306b\u306a\u308b\u3068\u601d\u3046\u306e\u3067\u3001\u305d\u306e\u3042\u305f\u308a\u306b\u8fd1\u3044\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u3092\u958b\u767a\u3055\u308c\u3066\u3044\u308b\u65b9\u3082\u826f\u304f\u906d\u9047\u3057\u305f\u308a\u3059\u308b\u306e\u3067\u306f\u306a\u3044\u3067\u3057\u3087\u3046\u304b\u3002\n\u3068\u3044\u3046\u308f\u3051\u3067\u4eca\u56de\u306f\u8272\u3005\u8003\u3048\u3066\u305f\u3093\u3067\u3059\u304c\u3001\u5b9f\u7528\u7684\u8a71\u984c\u3068\u3057\u3066\u6728\u69cb\u9020\u3092 Clojure \u3067\u6271\u3046\u3068\u3044\u3046\u8a71\u3092\u66f8\u304d\u305f\u3044\u3068\u601d\u3044\u307e\u3059\u3002\n\n\u6728\u69cb\u9020\u3092\u30ca\u30a4\u30fc\u30d6\u30c4\u30ea\u30fc\u306a\u30c7\u30fc\u30bf\u3078\u3068\u5909\u63db\u3059\u308b\n\u4f8b\u3048\u3070\u6b21\u306e\u3088\u3046\u306a\u6728\u69cb\u9020\u306e\u30c7\u30fc\u30bf\u304c\u3042\u3063\u305f\u3068\u3057\u307e\u3059\u3002\n[{:id :A}\n  [{:id :B} {:id :C} {:id :D}]\n  [{:id :E} [{:id :F} {:id :G}]]\n  {:id :H}\n  [{:id :I} {:id :J}]]\n\n\u3060\u3044\u305f\u3044\u3001\u3069\u3046\u3044\u3046\u611f\u3058\u306e\u30c7\u30fc\u30bf\u304b\u5206\u304b\u308a\u307e\u3059\u3088\u306d\uff1f\n\u3082\u3057\u304b\u3057\u305f\u3089\u3061\u3087\u3063\u3068\u5206\u304b\u308a\u96e3\u3044\u304b\u3082\u3057\u308c\u306a\u3044\u306e\u3067\u3001 clojure.spec \u3067\u8a18\u8ff0\u3057\u3066\u307f\u308b\u3068\u3053\u3093\u306a\u611f\u3058\u3067\u3057\u3087\u3046\u304b\u3002\n(s/def ::tree\n  (s/or :leaf ::leaf\n        :node (s/cat :parent ::leaf\n                     :children (s/* ::tree))))\n\n\u3053\u3053\u3067 ::leaf \u306e\u5b9a\u7fa9\u306f\u4e00\u65e6\u5fd8\u308c\u307e\u3057\u3087\u3046\u3002\u305f\u3076\u3093 map? \u3068\u304b\u305d\u3093\u306a\u611f\u3058\u3067\u3059\u3002\u3053\u3046\u3059\u308b\u3068\u610f\u5473\u304c\u3060\u3044\u3076\u5206\u304b\u308a\u307e\u3059\u3088\u306d\u3002\u3061\u306a\u307f\u306b spec \u3092\u66f8\u304d\u307e\u3057\u305f\u304c\u3001\u3053\u306e\u8a18\u4e8b\u306e\u3053\u308c\u4ee5\u964d\u3067\u306f\u5168\u304f\u5229\u7528\u3057\u307e\u305b\u3093\u3002\n\u3053\u3046\u3044\u3046\u30c7\u30fc\u30bf\u3092\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u306b\u4fdd\u5b58\u3057\u305f\u3044\u3068\u3057\u307e\u3057\u3087\u3046\u3002\u6728\u69cb\u9020\u3067\u306f\u89aa\u3068\u5b50\u306e\u95a2\u4fc2\u3082\u8868\u73fe\u3055\u308c\u3066\u3044\u308b\u306e\u3067\u3001\u5f53\u7136\u305d\u308c\u3082\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u306e\u30ec\u30b3\u30fc\u30c9\u306b\u843d\u3068\u3057\u8fbc\u307f\u305f\u3044\u3067\u3059\u3002\n\u6728\u69cb\u9020\u3092\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u306b\u4fdd\u5b58\u3059\u308b\u5834\u5408\u3001\u7d4c\u8def\u5217\u6319\u3084\u5165\u308c\u5b50\u96c6\u5408\u306a\u3069\u3084\u308a\u65b9\u304c\u8272\u3005\u3068\u3042\u308a\u307e\u3059\u304c\u3001\u4eca\u56de\u306f\u6700\u3082\u7c21\u5358\u306a\u30ca\u30a4\u30fc\u30d6\u30c4\u30ea\u30fc\u306b\u5909\u63db\u3057\u305f\u3044\u3068\u601d\u3044\u307e\u3059\u3002 \u3064\u307e\u308a\u3001\u6b21\u306e\u3088\u3046\u306a\u30c7\u30fc\u30bf\u306b\u5909\u63db\u3057\u307e\u3059\u3002\n[{:id :A :parent-id nil}\n {:id :B :parent-id :A}\n ;; ...\n ]\n\nClojure \u306b\u306f\u6728\u69cb\u9020\u3092\u8fbf\u308b\u305f\u3081\u306e\u30cd\u30fc\u30e0\u30b9\u30da\u30fc\u30b9\u304c clojure.zip \u3068\u3057\u3066\u7528\u610f\u3055\u308c\u3066\u3044\u308b\u306e\u3067\u305d\u308c\u3092\u4f7f\u3044\u307e\u3059\u3002\n(require '[clojure.zip :as z])\n\n(defn tree-structure->naive-tree [tree]\n  (flatten\n   (loop [loc (z/vector-zip tree)\n          prev-branch? true]\n     (cond\n       (z/end? loc) (z/root loc)\n       (z/branch? loc) (recur (z/next loc) true)\n       :else (recur (-> (if prev-branch? (-> loc z/up) loc)\n                        z/leftmost\n                        z/node\n                        :id\n                        (->> (z/edit loc assoc :parent-id))\n                        z/next)\n                    false)))))\n\n\u3053\u3093\u306a\u611f\u3058\u306e\u95a2\u6570\u304c\u4f5c\u308c\u308b\u306e\u3067\u3001\u3053\u308c\u3092\u4f7f\u3046\u3068\u6700\u521d\u306e\u30c7\u30fc\u30bf\u306f\u6b21\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002\n(require '[clojure.test :as test])\n\n(test/is\n (= (tree-structure->naive-tree\n     [{:id :A}\n      [{:id :B} {:id :C} {:id :D}]\n      [{:id :E} [{:id :F} {:id :G}]]\n      {:id :H}\n      [{:id :I} {:id :J}]])\n    [{:id :A :parent-id nil}\n     {:id :B :parent-id :A}\n     {:id :C :parent-id :B}\n     {:id :D :parent-id :B}\n     {:id :E :parent-id :A}\n     {:id :F :parent-id :E}\n     {:id :G :parent-id :F}\n     {:id :H :parent-id :A}\n     {:id :I :parent-id :A}\n     {:id :J :parent-id :I}]))\n;; true\n\n\u826f\u3055\u305d\u3046\u3067\u3059\u306d\u3002\u5229\u7528\u3057\u3066\u3044\u305f\u95a2\u6570\u306e\u7d39\u4ecb\u3092\u3057\u307e\u3059\u3002\n\n clojure.zip/vector-zip\n\n  \u30cd\u30b9\u30c8\u3057\u305f\u30d9\u30af\u30bf\u3092 clojure.zip \u3067\u6271\u3048\u308b\u5f62\u5f0f\u306e\u30c7\u30fc\u30bf\u3092\u8fd4\u5374\u3059\u308b\u305f\u3081\u306e\u95a2\u6570\u3067\u3059\u3002\u3053\u306e\u95a2\u6570\u304c\u8fd4\u3059\u30c7\u30fc\u30bf\u306e\u521d\u671f\u4f4d\u7f6e\u306f\u30eb\u30fc\u30c8\u306b\u3044\u308b\u3053\u3068\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u3002\n\n\n clojure.zip/end?\n\n  \u6728\u69cb\u9020\u3092\u63a2\u7d22\u3057\u3066\u3044\u308b\u4e2d\u3067\u73fe\u5728\u4f4d\u7f6e\u304c\u6df1\u3055\u512a\u5148\u63a2\u7d22\u306b\u304a\u3044\u3066\u3001\u7d42\u7aef\u3067\u3042\u308b\u5834\u5408\u306b\u771f\u3092\u8fd4\u3057\u307e\u3059\u3002\n\n\n clojure.zip/root\n\n  \u6728\u69cb\u9020\u306e\u30eb\u30fc\u30c8\u3092\u8fd4\u5374\u3057\u307e\u3059(\u3064\u307e\u308a\u3001\u5168\u4f53)\u3002\u3053\u306e\u95a2\u6570\u3092\u547c\u3073\u51fa\u3057\u305f\u5834\u5408\u3001 clojure.zip/edit \u3067\u8d77\u3053\u3057\u305f\u5168\u3066\u306e\u5909\u66f4\u3092\u9069\u7528\u3057\u307e\u3059\u3002\n\n\n clojure.zip/branch?\n\n  \u73fe\u5728\u4f4d\u7f6e\u306e\u30ce\u30fc\u30c9\u304c\u30d6\u30e9\u30f3\u30c1(\u3053\u306e\u4f8b\u306e\u5834\u5408\u3001\u30d9\u30af\u30bf)\u3067\u3042\u308b\u5834\u5408\u3001\u771f\u3092\u8fd4\u3057\u307e\u3059\u3002\n\n\n clojure.zip/up\n\n  \u73fe\u5728\u4f4d\u7f6e\u306e\u30ce\u30fc\u30c9\u306e\u89aa\u306b\u3042\u305f\u308b\u4f4d\u7f6e\u3092\u8fd4\u3057\u307e\u3059\u3002\n\n\n clojure.zip/leftmost\n\n  \u73fe\u5728\u4f4d\u7f6e\u306e\u30d6\u30e9\u30f3\u30c1\u306e\u4e2d\u3067\u6700\u5de6\u7aef\u306b\u3042\u308b\u30ce\u30fc\u30c9\u3092\u8fd4\u3057\u307e\u3059\u3002\n\n\n clojure.zip/node\n\n  \u73fe\u5728\u4f4d\u7f6e\u306e\u30ce\u30fc\u30c9\u306e\u5024\u3092\u8fd4\u3057\u307e\u3059\u3002\n\n\n clojure.zip/edit\n\n  \u73fe\u5728\u4f4d\u7f6e\u306e\u30ce\u30fc\u30c9\u3092\u7de8\u96c6\u3057\u307e\u3059\u3002\u3053\u306e\u5909\u66f4\u306f\u3059\u3050\u306b\u306f\u53cd\u6620\u3055\u308c\u307e\u305b\u3093\u3002\n\n\n clojure.zip/next\n\n  \u6b21\u306e\u4f4d\u7f6e\u306b\u3042\u308b\u30ce\u30fc\u30c9\u3092\u8fd4\u3057\u307e\u3059\u3002\u3053\u306e\u3068\u304d\u6b21\u306f\u6df1\u3055\u512a\u5148\u3067\u63a2\u7d22\u3055\u308c\u307e\u3059\u3002\n\n\n\n\u3053\u3053\u3067\u3084\u3063\u3066\u3044\u305f\u3053\u3068\u3092\u7c21\u5358\u306b\u8aac\u660e\u3059\u308b\u3068 clojure.zip/next \u304c\u6df1\u3055\u512a\u5148\u3067\u63a2\u7d22\u3059\u308b\u306e\u3092\u5229\u7528\u3057\u3066\u3001\u5358\u7d14\u306a loop / recur \u3067\u51e6\u7406\u3067\u304d\u308b\u3088\u3046\u306b\u843d\u3057\u8fbc\u3093\u3067\u3044\u307e\u3059\u3002 \u5143\u306e\u6728\u69cb\u9020\u306e\u8868\u73fe\u65b9\u6cd5\u306b\u5f93\u3063\u3066\u3001\u76f4\u524d\u306e\u30ce\u30fc\u30c9\u304c\u30d6\u30e9\u30f3\u30c1\u3067\u3042\u3063\u305f\u5834\u5408\u306f\u73fe\u5728\u4f4d\u7f6e\u306e\u30ce\u30fc\u30c9\u306e\u89aa\u306e\u30d6\u30e9\u30f3\u30c1\u5185\u306e\u6700\u5de6\u7aef\u306b\u3042\u308b\u30ce\u30fc\u30c9\u3092\u305d\u306e\u30ce\u30fc\u30c9\u306e\u89aa\u3068\u3057\u3066\u6271\u3044\u3001\u305d\u3046\u3067\u306a\u3051\u308c\u3070\u73fe\u5728\u4f4d\u7f6e\u306e\u30ce\u30fc\u30c9\u306e\u30d6\u30e9\u30f3\u30c1\u5185\u306e\u6700\u5de6\u7aef\u3092\u89aa\u3068\u3059\u308b\u3088\u3046\u306b\u3057\u307e\u3059(\u65e5\u672c\u8a9e\u304c\u96e3\u3057\u3044)\u3002\n\u6728\u69cb\u9020\u3092\u8fbf\u308a\u306a\u304c\u3089\u89aa\u306e id \u3092\u4ed8\u3051\u3066\u3044\u304d\u3001 clojure.zip/root \u3067\u5909\u66f4\u3092\u9069\u7528\u3057\u305f\u6728\u5168\u4f53\u3092\u8fd4\u5374\u3057\u3001 flatten \u3067\u30cd\u30b9\u30c8\u3057\u3066\u3044\u305f\u69cb\u9020\u3092\u5e73\u6ed1\u5316\u3057\u3066\u3044\u307e\u3059\u3002\n\u3068\u3066\u3082\u7c21\u5358\u3067\u3059\u306d\u3002\n\n\u30ca\u30a4\u30fc\u30d6\u30c4\u30ea\u30fc\u306a\u30c7\u30fc\u30bf\u3092\u6728\u69cb\u9020\u3078\u3068\u5909\u63db\u3059\u308b\n\u4eca\u5ea6\u306f\u9006\u3067\u3059\u3002\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u304b\u3089\u53d6\u5f97\u3057\u305f\u30ca\u30a4\u30fc\u30d6\u30c4\u30ea\u30fc\u306a\u30c7\u30fc\u30bf\u3092\u6728\u69cb\u9020\u3078\u3068\u5909\u63db\u3057\u307e\u3059\u3002\n\u3064\u307e\u308a\u3001\u3053\u306e\u30c7\u30fc\u30bf\u3092\u2026\n[{:id :A :parent-id nil}\n {:id :B :parent-id :A}\n {:id :C :parent-id :B}\n {:id :D :parent-id :B}\n {:id :E :parent-id :A}\n {:id :F :parent-id :E}\n {:id :G :parent-id :F}\n {:id :H :parent-id :A}\n {:id :I :parent-id :A}\n {:id :J :parent-id :I}]\n\n\u3053\u3046\u3057\u305f\u3044\u308f\u3051\u3067\u3059\u306d\u3002\n[{:id :A :parent-id nil}\n [{:id :B :parent-id :A}\n  {:id :C :parent-id :B}\n  {:id :D :parent-id :B}]\n [{:id :E :parent-id :A}\n  [{:id :F :parent-id :E} {:id :G :parent-id :F}]]\n {:id :H :parent-id :A}\n [{:id :I :parent-id :A} {:id :J :parent-id :I}]]\n\n\u3053\u3093\u306a\u611f\u3058\u306e\u95a2\u6570\u3092\u66f8\u3051\u3070\u3001\u3044\u3051\u305d\u3046\u306a\u6c17\u304c\u3057\u307e\u3059\u3002\n(defn bad-naive-tree->tree-structure [tree]\n  (let [dependents (group-by :parent-id tree)]\n    (letfn [(make-tree [{:keys [id parent-id] :as m}]\n              (if-let [dependents' (get dependents id)]\n                (apply conj [m] (map make-tree dependents'))\n                m))]\n      (make-tree (first (get dependents nil))))))\n\n\u5b9f\u969b\u306b\u4f7f\u3063\u3066\u307f\u308b\u3068\u3053\u308c\u306f\u52d5\u4f5c\u3057\u307e\u3059\u3002\n(bad-naive-tree->tree-structure\n [{:id :A :parent-id nil}\n  {:id :B :parent-id :A}\n  {:id :C :parent-id :B}\n  {:id :D :parent-id :B}\n  {:id :E :parent-id :A}\n  {:id :F :parent-id :E}\n  {:id :G :parent-id :F}\n  {:id :H :parent-id :A}\n  {:id :I :parent-id :A}\n  {:id :J :parent-id :I}])\n;; [{:id :A, :parent-id nil}\n;;  [{:id :B, :parent-id :A}\n;;   {:id :C, :parent-id :B}\n;;   {:id :D, :parent-id :B}]\n;;  [{:id :E, :parent-id :A}\n;;   [{:id :F, :parent-id :E} {:id :G, :parent-id :F}]]\n;;  {:id :H, :parent-id :A}\n;;  [{:id :I, :parent-id :A} {:id :J, :parent-id :I}]]\n\n\u3067\u3059\u304c\u3001\u5185\u90e8\u3067\u76f4\u63a5\u7684\u306a\u518d\u5e30\u547c\u3073\u51fa\u3057\u3092\u5229\u7528\u3057\u3066\u3044\u308b\u305f\u3081\u3042\u308b\u4e00\u5b9a\u4ee5\u4e0a\u306e\u30c7\u30fc\u30bf\u3092\u4e0e\u3048\u308b\u3068\u30b9\u30bf\u30c3\u30af\u30aa\u30fc\u30d0\u30fc\u30d5\u30ed\u30fc\u304c\u767a\u751f\u3057\u307e\u3059\u3002\n(let [tree (->> (range 1000)\n                (map (comp keyword str))\n                (partition 2 1)\n                (map #(hash-map :id (second %) :parent-id (first %)))\n                (cons {:id :0 :parent-id nil}))]\n  (bad-naive-tree->tree-structure tree))\n;; StackOverflowError   clojure.lang.RestFn.applyTo (RestFn.java:130)\n\n\u3068\u3044\u3046\u308f\u3051\u3067\u3053\u308c\u3092 clojure.zip \u306e\u95a2\u6570\u3092\u5229\u7528\u3057\u3066\u66f8\u304d\u63db\u3048\u307e\u3059\u3002\n(require '[clojure.zip :as z])\n\n(defn naive-tree->tree-structure [tree]\n  (let [dependents-map (group-by :parent-id tree)\n        root (first (get dependents-map nil))]\n    (loop [loc (z/vector-zip [root])\n           [node & rest-nodes] (get dependents-map (:id root))\n           dependents-list ()]\n      (cond\n        (and (nil? node) (empty? dependents-list)) (z/root loc)\n        (nil? node) (recur (z/up loc) (peek dependents-list) (pop dependents-list))\n        :else (if-let [dependents (seq (get dependents-map (:id node)))]\n                (recur (-> loc (z/append-child []) z/down z/rightmost (z/append-child node))\n                       dependents\n                       (conj dependents-list rest-nodes))\n                (recur (z/append-child loc node) rest-nodes dependents-list))))))\n\n(naive-tree->tree-structure\n [{:id :A :parent-id nil}\n  {:id :B :parent-id :A}\n  {:id :C :parent-id :B}\n  {:id :D :parent-id :B}\n  {:id :E :parent-id :A}\n  {:id :F :parent-id :E}\n  {:id :G :parent-id :F}\n  {:id :H :parent-id :A}\n  {:id :I :parent-id :A}\n  {:id :J :parent-id :I}])\n;; [{:id :A, :parent-id nil}\n;;  [{:id :B, :parent-id :A}\n;;   {:id :C, :parent-id :B}\n;;   {:id :D, :parent-id :B}]\n;;  [{:id :E, :parent-id :A}\n;;   [{:id :F, :parent-id :E} {:id :G, :parent-id :F}]]\n;;  {:id :H, :parent-id :A}\n;;  [{:id :I, :parent-id :A} {:id :J, :parent-id :I}]]\n\n\u3053\u3053\u307e\u3067\u306f\u6700\u521d\u306e bad-naive-tree->tree-structure \u3068\u5909\u308f\u308a\u307e\u305b\u3093\u304c\u3001\u5927\u304d\u306a\u30c7\u30fc\u30bf\u3092\u6e21\u3057\u3066\u307f\u307e\u3057\u3087\u3046\u3002\n(let [tree (->> (range 1000)\n                (map (comp keyword str))\n                (partition 2 1)\n                (map #(hash-map :id (second %) :parent-id (first %)))\n                (cons {:id :0 :parent-id nil}))]\n  (naive-tree->tree-structure tree))\n;; [{:id :0, :parent-id nil}\n;;  [{:id :1, :parent-id :0}\n;;   [{:id :2, :parent-id :1}\n;;    [{:id :3, :parent-id :2}\n;;     [{:id :4, :parent-id :3}\n;;      [{:id :5, :parent-id :4}\n;;       [{:id :6, :parent-id :5}\n;;        [{:id :7, :parent-id :6}\n;;         [{:id :8, :parent-id :7}\n;; ... \u7565\n\n\u826f\u3055\u305d\u3046\u3067\u3059\u306d\u3002\n\u3053\u3053\u3067\u65b0\u3057\u304f\u767b\u5834\u3057\u305f\u95a2\u6570\u306f\u6b21\u306e\u901a\u308a\u3067\u3059\u3002\n\n clojure.zip/down\n\n  \u73fe\u5728\u4f4d\u7f6e\u306e\u30ce\u30fc\u30c9\u306e\u5b50\u306e\u6700\u5de6\u7aef\u306e\u4f4d\u7f6e\u3092\u8fd4\u3057\u307e\u3059\u3002\n\n\n clojure.zip/append-child\n\n  \u73fe\u5728\u4f4d\u7f6e\u306e\u30ce\u30fc\u30c9\u306e\u5b50\u306e\u6700\u53f3\u7aef\u306b\u30a2\u30a4\u30c6\u30e0\u3092\u633f\u5165\u3057\u307e\u3059\u3002\u73fe\u5728\u4f4d\u7f6e\u306f\u5909\u308f\u3089\u306a\u3044\u3053\u3068\u306b\u6ce8\u610f\u3057\u307e\u3059\u3002\n\n\n\n\u3053\u306e\u95a2\u6570\u3092\u65e5\u672c\u8a9e\u3067\u8aac\u660e\u3059\u308b\u306e\u96e3\u3057\u3044\u306e\u3067\u30b3\u30fc\u30c9\u3092\u8aad\u3093\u3067\u306a\u3093\u3068\u306a\u304f\u3053\u3093\u306a\u3053\u3068\u3057\u3066\u308b\u3093\u3060\u306a\u30fc\u3068\u611f\u3058\u3066\u3082\u3089\u3048\u305f\u3089\u3068\u601d\u3044\u307e\u3059\u3002\n\n\u307e\u3068\u3081\nclojure.zip \u306e\u95a2\u6570\u3092\u5229\u7528\u3059\u308c\u3070\u3001\u6728\u69cb\u9020\u3092\u8d70\u67fb\u3059\u308b\u5834\u5408\u3067\u3042\u3063\u3066\u3082\u666e\u6bb5\u66f8\u3044\u3066\u3044\u308b\u3088\u3046\u306a Clojure \u306e\u7dba\u9e97\u306a\u30b3\u30fc\u30c9\u3092\u7dad\u6301\u3059\u308b\u3053\u3068\u304c\u51fa\u6765\u307e\u3059\u3002\n\u6728\u69cb\u9020\u3068\u683c\u95d8\u3059\u308b\u6a5f\u4f1a\u306f\u3082\u3057\u304b\u3057\u305f\u3089\u305d\u3093\u306a\u306b\u591a\u304f\u306a\u3044\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u304c\u3001\u3082\u3057\u305d\u306e\u3088\u3046\u306a\u6a5f\u4f1a\u304c\u3042\u308c\u3070\u601d\u3044\u51fa\u3057\u3066\u4f7f\u3063\u3066\u307f\u305f\u3089\u3044\u3044\u306e\u3067\u306f\u306a\u3044\u3067\u3057\u3087\u3046\u304b\u3002\n\n\u53c2\u8003\n\n Tree visitors in Clojure / IBM developerWorks\n\n Clojure flat sequence into tree / stackoverflow\n\n why clojure.zip sucks / clj.orcery\n\n\n\n\u4e00\u822c\u7684\u306a\u696d\u52d9\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u3092\u958b\u767a\u3057\u3066\u3044\u308b\u969b\u3001\u6728\u69cb\u9020\u3068\u3044\u3046\u306e\u306f\u3044\u305f\u308b\u3068\u3053\u308d\u306b\u51fa\u3066\u304d\u3066\u958b\u767a\u8005\u306e\u982d\u3092\u60a9\u307e\u305b\u307e\u3059\u3002 \u4f8b\u3048\u3070\u4f1a\u793e\u306e\u7d44\u7e54\u306a\u3093\u304b\u306f\u5178\u578b\u7684\u306a\u6728\u69cb\u9020\u306b\u306a\u308b\u3068\u601d\u3046\u306e\u3067\u3001\u305d\u306e\u3042\u305f\u308a\u306b\u8fd1\u3044\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u3092\u958b\u767a\u3055\u308c\u3066\u3044\u308b\u65b9\u3082\u826f\u304f\u906d\u9047\u3057\u305f\u308a\u3059\u308b\u306e\u3067\u306f\u306a\u3044\u3067\u3057\u3087\u3046\u304b\u3002\n\n\u3068\u3044\u3046\u308f\u3051\u3067\u4eca\u56de\u306f\u8272\u3005\u8003\u3048\u3066\u305f\u3093\u3067\u3059\u304c\u3001\u5b9f\u7528\u7684\u8a71\u984c\u3068\u3057\u3066\u6728\u69cb\u9020\u3092 Clojure \u3067\u6271\u3046\u3068\u3044\u3046\u8a71\u3092\u66f8\u304d\u305f\u3044\u3068\u601d\u3044\u307e\u3059\u3002\n\n\u6728\u69cb\u9020\u3092\u30ca\u30a4\u30fc\u30d6\u30c4\u30ea\u30fc\u306a\u30c7\u30fc\u30bf\u3078\u3068\u5909\u63db\u3059\u308b\n------------------------------------------\n\n\u4f8b\u3048\u3070\u6b21\u306e\u3088\u3046\u306a\u6728\u69cb\u9020\u306e\u30c7\u30fc\u30bf\u304c\u3042\u3063\u305f\u3068\u3057\u307e\u3059\u3002\n\n``` clojure\n[{:id :A}\n  [{:id :B} {:id :C} {:id :D}]\n  [{:id :E} [{:id :F} {:id :G}]]\n  {:id :H}\n  [{:id :I} {:id :J}]]\n```\n\n\u3060\u3044\u305f\u3044\u3001\u3069\u3046\u3044\u3046\u611f\u3058\u306e\u30c7\u30fc\u30bf\u304b\u5206\u304b\u308a\u307e\u3059\u3088\u306d\uff1f\n\n\u3082\u3057\u304b\u3057\u305f\u3089\u3061\u3087\u3063\u3068\u5206\u304b\u308a\u96e3\u3044\u304b\u3082\u3057\u308c\u306a\u3044\u306e\u3067\u3001 clojure.spec \u3067\u8a18\u8ff0\u3057\u3066\u307f\u308b\u3068\u3053\u3093\u306a\u611f\u3058\u3067\u3057\u3087\u3046\u304b\u3002\n\n``` clojure\n(s/def ::tree\n  (s/or :leaf ::leaf\n        :node (s/cat :parent ::leaf\n                     :children (s/* ::tree))))\n```\n\n\u3053\u3053\u3067 `::leaf` \u306e\u5b9a\u7fa9\u306f\u4e00\u65e6\u5fd8\u308c\u307e\u3057\u3087\u3046\u3002\u305f\u3076\u3093 `map?` \u3068\u304b\u305d\u3093\u306a\u611f\u3058\u3067\u3059\u3002\u3053\u3046\u3059\u308b\u3068\u610f\u5473\u304c\u3060\u3044\u3076\u5206\u304b\u308a\u307e\u3059\u3088\u306d\u3002\u3061\u306a\u307f\u306b spec \u3092\u66f8\u304d\u307e\u3057\u305f\u304c\u3001\u3053\u306e\u8a18\u4e8b\u306e\u3053\u308c\u4ee5\u964d\u3067\u306f\u5168\u304f\u5229\u7528\u3057\u307e\u305b\u3093\u3002\n\n\u3053\u3046\u3044\u3046\u30c7\u30fc\u30bf\u3092\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u306b\u4fdd\u5b58\u3057\u305f\u3044\u3068\u3057\u307e\u3057\u3087\u3046\u3002\u6728\u69cb\u9020\u3067\u306f\u89aa\u3068\u5b50\u306e\u95a2\u4fc2\u3082\u8868\u73fe\u3055\u308c\u3066\u3044\u308b\u306e\u3067\u3001\u5f53\u7136\u305d\u308c\u3082\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u306e\u30ec\u30b3\u30fc\u30c9\u306b\u843d\u3068\u3057\u8fbc\u307f\u305f\u3044\u3067\u3059\u3002\n\n\u6728\u69cb\u9020\u3092\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u306b\u4fdd\u5b58\u3059\u308b\u5834\u5408\u3001\u7d4c\u8def\u5217\u6319\u3084\u5165\u308c\u5b50\u96c6\u5408\u306a\u3069\u3084\u308a\u65b9\u304c\u8272\u3005\u3068\u3042\u308a\u307e\u3059\u304c\u3001\u4eca\u56de\u306f\u6700\u3082\u7c21\u5358\u306a\u30ca\u30a4\u30fc\u30d6\u30c4\u30ea\u30fc\u306b\u5909\u63db\u3057\u305f\u3044\u3068\u601d\u3044\u307e\u3059\u3002 \u3064\u307e\u308a\u3001\u6b21\u306e\u3088\u3046\u306a\u30c7\u30fc\u30bf\u306b\u5909\u63db\u3057\u307e\u3059\u3002\n\n``` clojure\n[{:id :A :parent-id nil}\n {:id :B :parent-id :A}\n ;; ...\n ]\n```\n\nClojure \u306b\u306f\u6728\u69cb\u9020\u3092\u8fbf\u308b\u305f\u3081\u306e\u30cd\u30fc\u30e0\u30b9\u30da\u30fc\u30b9\u304c clojure.zip \u3068\u3057\u3066\u7528\u610f\u3055\u308c\u3066\u3044\u308b\u306e\u3067\u305d\u308c\u3092\u4f7f\u3044\u307e\u3059\u3002\n\n``` clojure\n(require '[clojure.zip :as z])\n\n(defn tree-structure->naive-tree [tree]\n  (flatten\n   (loop [loc (z/vector-zip tree)\n          prev-branch? true]\n     (cond\n       (z/end? loc) (z/root loc)\n       (z/branch? loc) (recur (z/next loc) true)\n       :else (recur (-> (if prev-branch? (-> loc z/up) loc)\n                        z/leftmost\n                        z/node\n                        :id\n                        (->> (z/edit loc assoc :parent-id))\n                        z/next)\n                    false)))))\n```\n\n\u3053\u3093\u306a\u611f\u3058\u306e\u95a2\u6570\u304c\u4f5c\u308c\u308b\u306e\u3067\u3001\u3053\u308c\u3092\u4f7f\u3046\u3068\u6700\u521d\u306e\u30c7\u30fc\u30bf\u306f\u6b21\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002\n\n``` clojure\n(require '[clojure.test :as test])\n\n(test/is\n (= (tree-structure->naive-tree\n     [{:id :A}\n      [{:id :B} {:id :C} {:id :D}]\n      [{:id :E} [{:id :F} {:id :G}]]\n      {:id :H}\n      [{:id :I} {:id :J}]])\n    [{:id :A :parent-id nil}\n     {:id :B :parent-id :A}\n     {:id :C :parent-id :B}\n     {:id :D :parent-id :B}\n     {:id :E :parent-id :A}\n     {:id :F :parent-id :E}\n     {:id :G :parent-id :F}\n     {:id :H :parent-id :A}\n     {:id :I :parent-id :A}\n     {:id :J :parent-id :I}]))\n;; true\n```\n\n\u826f\u3055\u305d\u3046\u3067\u3059\u306d\u3002\u5229\u7528\u3057\u3066\u3044\u305f\u95a2\u6570\u306e\u7d39\u4ecb\u3092\u3057\u307e\u3059\u3002\n\n-   `clojure.zip/vector-zip`\n    -   \u30cd\u30b9\u30c8\u3057\u305f\u30d9\u30af\u30bf\u3092 clojure.zip \u3067\u6271\u3048\u308b\u5f62\u5f0f\u306e\u30c7\u30fc\u30bf\u3092\u8fd4\u5374\u3059\u308b\u305f\u3081\u306e\u95a2\u6570\u3067\u3059\u3002\u3053\u306e\u95a2\u6570\u304c\u8fd4\u3059\u30c7\u30fc\u30bf\u306e\u521d\u671f\u4f4d\u7f6e\u306f\u30eb\u30fc\u30c8\u306b\u3044\u308b\u3053\u3068\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u3002\n-   `clojure.zip/end?`\n    -   \u6728\u69cb\u9020\u3092\u63a2\u7d22\u3057\u3066\u3044\u308b\u4e2d\u3067\u73fe\u5728\u4f4d\u7f6e\u304c\u6df1\u3055\u512a\u5148\u63a2\u7d22\u306b\u304a\u3044\u3066\u3001\u7d42\u7aef\u3067\u3042\u308b\u5834\u5408\u306b\u771f\u3092\u8fd4\u3057\u307e\u3059\u3002\n-   `clojure.zip/root`\n    -   \u6728\u69cb\u9020\u306e\u30eb\u30fc\u30c8\u3092\u8fd4\u5374\u3057\u307e\u3059(\u3064\u307e\u308a\u3001\u5168\u4f53)\u3002\u3053\u306e\u95a2\u6570\u3092\u547c\u3073\u51fa\u3057\u305f\u5834\u5408\u3001 `clojure.zip/edit` \u3067\u8d77\u3053\u3057\u305f\u5168\u3066\u306e\u5909\u66f4\u3092\u9069\u7528\u3057\u307e\u3059\u3002\n-   `clojure.zip/branch?`\n    -   \u73fe\u5728\u4f4d\u7f6e\u306e\u30ce\u30fc\u30c9\u304c\u30d6\u30e9\u30f3\u30c1(\u3053\u306e\u4f8b\u306e\u5834\u5408\u3001\u30d9\u30af\u30bf)\u3067\u3042\u308b\u5834\u5408\u3001\u771f\u3092\u8fd4\u3057\u307e\u3059\u3002\n-   `clojure.zip/up`\n    -   \u73fe\u5728\u4f4d\u7f6e\u306e\u30ce\u30fc\u30c9\u306e\u89aa\u306b\u3042\u305f\u308b\u4f4d\u7f6e\u3092\u8fd4\u3057\u307e\u3059\u3002\n-   `clojure.zip/leftmost`\n    -   \u73fe\u5728\u4f4d\u7f6e\u306e\u30d6\u30e9\u30f3\u30c1\u306e\u4e2d\u3067\u6700\u5de6\u7aef\u306b\u3042\u308b\u30ce\u30fc\u30c9\u3092\u8fd4\u3057\u307e\u3059\u3002\n-   `clojure.zip/node`\n    -   \u73fe\u5728\u4f4d\u7f6e\u306e\u30ce\u30fc\u30c9\u306e\u5024\u3092\u8fd4\u3057\u307e\u3059\u3002\n-   `clojure.zip/edit`\n    -   \u73fe\u5728\u4f4d\u7f6e\u306e\u30ce\u30fc\u30c9\u3092\u7de8\u96c6\u3057\u307e\u3059\u3002\u3053\u306e\u5909\u66f4\u306f\u3059\u3050\u306b\u306f\u53cd\u6620\u3055\u308c\u307e\u305b\u3093\u3002\n-   `clojure.zip/next`\n    -   \u6b21\u306e\u4f4d\u7f6e\u306b\u3042\u308b\u30ce\u30fc\u30c9\u3092\u8fd4\u3057\u307e\u3059\u3002\u3053\u306e\u3068\u304d\u6b21\u306f\u6df1\u3055\u512a\u5148\u3067\u63a2\u7d22\u3055\u308c\u307e\u3059\u3002\n\n\u3053\u3053\u3067\u3084\u3063\u3066\u3044\u305f\u3053\u3068\u3092\u7c21\u5358\u306b\u8aac\u660e\u3059\u308b\u3068 `clojure.zip/next` \u304c\u6df1\u3055\u512a\u5148\u3067\u63a2\u7d22\u3059\u308b\u306e\u3092\u5229\u7528\u3057\u3066\u3001\u5358\u7d14\u306a `loop` / `recur` \u3067\u51e6\u7406\u3067\u304d\u308b\u3088\u3046\u306b\u843d\u3057\u8fbc\u3093\u3067\u3044\u307e\u3059\u3002 \u5143\u306e\u6728\u69cb\u9020\u306e\u8868\u73fe\u65b9\u6cd5\u306b\u5f93\u3063\u3066\u3001\u76f4\u524d\u306e\u30ce\u30fc\u30c9\u304c\u30d6\u30e9\u30f3\u30c1\u3067\u3042\u3063\u305f\u5834\u5408\u306f\u73fe\u5728\u4f4d\u7f6e\u306e\u30ce\u30fc\u30c9\u306e\u89aa\u306e\u30d6\u30e9\u30f3\u30c1\u5185\u306e\u6700\u5de6\u7aef\u306b\u3042\u308b\u30ce\u30fc\u30c9\u3092\u305d\u306e\u30ce\u30fc\u30c9\u306e\u89aa\u3068\u3057\u3066\u6271\u3044\u3001\u305d\u3046\u3067\u306a\u3051\u308c\u3070\u73fe\u5728\u4f4d\u7f6e\u306e\u30ce\u30fc\u30c9\u306e\u30d6\u30e9\u30f3\u30c1\u5185\u306e\u6700\u5de6\u7aef\u3092\u89aa\u3068\u3059\u308b\u3088\u3046\u306b\u3057\u307e\u3059(\u65e5\u672c\u8a9e\u304c\u96e3\u3057\u3044)\u3002\n\n\u6728\u69cb\u9020\u3092\u8fbf\u308a\u306a\u304c\u3089\u89aa\u306e id \u3092\u4ed8\u3051\u3066\u3044\u304d\u3001 `clojure.zip/root` \u3067\u5909\u66f4\u3092\u9069\u7528\u3057\u305f\u6728\u5168\u4f53\u3092\u8fd4\u5374\u3057\u3001 `flatten` \u3067\u30cd\u30b9\u30c8\u3057\u3066\u3044\u305f\u69cb\u9020\u3092\u5e73\u6ed1\u5316\u3057\u3066\u3044\u307e\u3059\u3002\n\n\u3068\u3066\u3082\u7c21\u5358\u3067\u3059\u306d\u3002\n\n\u30ca\u30a4\u30fc\u30d6\u30c4\u30ea\u30fc\u306a\u30c7\u30fc\u30bf\u3092\u6728\u69cb\u9020\u3078\u3068\u5909\u63db\u3059\u308b\n------------------------------------------\n\n\u4eca\u5ea6\u306f\u9006\u3067\u3059\u3002\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u304b\u3089\u53d6\u5f97\u3057\u305f\u30ca\u30a4\u30fc\u30d6\u30c4\u30ea\u30fc\u306a\u30c7\u30fc\u30bf\u3092\u6728\u69cb\u9020\u3078\u3068\u5909\u63db\u3057\u307e\u3059\u3002\n\n\u3064\u307e\u308a\u3001\u3053\u306e\u30c7\u30fc\u30bf\u3092\u2026\n\n``` clojure\n[{:id :A :parent-id nil}\n {:id :B :parent-id :A}\n {:id :C :parent-id :B}\n {:id :D :parent-id :B}\n {:id :E :parent-id :A}\n {:id :F :parent-id :E}\n {:id :G :parent-id :F}\n {:id :H :parent-id :A}\n {:id :I :parent-id :A}\n {:id :J :parent-id :I}]\n```\n\n\u3053\u3046\u3057\u305f\u3044\u308f\u3051\u3067\u3059\u306d\u3002\n\n``` clojure\n[{:id :A :parent-id nil}\n [{:id :B :parent-id :A}\n  {:id :C :parent-id :B}\n  {:id :D :parent-id :B}]\n [{:id :E :parent-id :A}\n  [{:id :F :parent-id :E} {:id :G :parent-id :F}]]\n {:id :H :parent-id :A}\n [{:id :I :parent-id :A} {:id :J :parent-id :I}]]\n```\n\n\u3053\u3093\u306a\u611f\u3058\u306e\u95a2\u6570\u3092\u66f8\u3051\u3070\u3001\u3044\u3051\u305d\u3046\u306a\u6c17\u304c\u3057\u307e\u3059\u3002\n\n``` clojure\n(defn bad-naive-tree->tree-structure [tree]\n  (let [dependents (group-by :parent-id tree)]\n    (letfn [(make-tree [{:keys [id parent-id] :as m}]\n              (if-let [dependents' (get dependents id)]\n                (apply conj [m] (map make-tree dependents'))\n                m))]\n      (make-tree (first (get dependents nil))))))\n```\n\n\u5b9f\u969b\u306b\u4f7f\u3063\u3066\u307f\u308b\u3068\u3053\u308c\u306f\u52d5\u4f5c\u3057\u307e\u3059\u3002\n\n``` clojure\n(bad-naive-tree->tree-structure\n [{:id :A :parent-id nil}\n  {:id :B :parent-id :A}\n  {:id :C :parent-id :B}\n  {:id :D :parent-id :B}\n  {:id :E :parent-id :A}\n  {:id :F :parent-id :E}\n  {:id :G :parent-id :F}\n  {:id :H :parent-id :A}\n  {:id :I :parent-id :A}\n  {:id :J :parent-id :I}])\n;; [{:id :A, :parent-id nil}\n;;  [{:id :B, :parent-id :A}\n;;   {:id :C, :parent-id :B}\n;;   {:id :D, :parent-id :B}]\n;;  [{:id :E, :parent-id :A}\n;;   [{:id :F, :parent-id :E} {:id :G, :parent-id :F}]]\n;;  {:id :H, :parent-id :A}\n;;  [{:id :I, :parent-id :A} {:id :J, :parent-id :I}]]\n```\n\n\u3067\u3059\u304c\u3001\u5185\u90e8\u3067\u76f4\u63a5\u7684\u306a\u518d\u5e30\u547c\u3073\u51fa\u3057\u3092\u5229\u7528\u3057\u3066\u3044\u308b\u305f\u3081\u3042\u308b\u4e00\u5b9a\u4ee5\u4e0a\u306e\u30c7\u30fc\u30bf\u3092\u4e0e\u3048\u308b\u3068\u30b9\u30bf\u30c3\u30af\u30aa\u30fc\u30d0\u30fc\u30d5\u30ed\u30fc\u304c\u767a\u751f\u3057\u307e\u3059\u3002\n\n``` clojure\n(let [tree (->> (range 1000)\n                (map (comp keyword str))\n                (partition 2 1)\n                (map #(hash-map :id (second %) :parent-id (first %)))\n                (cons {:id :0 :parent-id nil}))]\n  (bad-naive-tree->tree-structure tree))\n;; StackOverflowError   clojure.lang.RestFn.applyTo (RestFn.java:130)\n```\n\n\u3068\u3044\u3046\u308f\u3051\u3067\u3053\u308c\u3092 clojure.zip \u306e\u95a2\u6570\u3092\u5229\u7528\u3057\u3066\u66f8\u304d\u63db\u3048\u307e\u3059\u3002\n\n``` clojure\n(require '[clojure.zip :as z])\n\n(defn naive-tree->tree-structure [tree]\n  (let [dependents-map (group-by :parent-id tree)\n        root (first (get dependents-map nil))]\n    (loop [loc (z/vector-zip [root])\n           [node & rest-nodes] (get dependents-map (:id root))\n           dependents-list ()]\n      (cond\n        (and (nil? node) (empty? dependents-list)) (z/root loc)\n        (nil? node) (recur (z/up loc) (peek dependents-list) (pop dependents-list))\n        :else (if-let [dependents (seq (get dependents-map (:id node)))]\n                (recur (-> loc (z/append-child []) z/down z/rightmost (z/append-child node))\n                       dependents\n                       (conj dependents-list rest-nodes))\n                (recur (z/append-child loc node) rest-nodes dependents-list))))))\n```\n\n``` clojure\n(naive-tree->tree-structure\n [{:id :A :parent-id nil}\n  {:id :B :parent-id :A}\n  {:id :C :parent-id :B}\n  {:id :D :parent-id :B}\n  {:id :E :parent-id :A}\n  {:id :F :parent-id :E}\n  {:id :G :parent-id :F}\n  {:id :H :parent-id :A}\n  {:id :I :parent-id :A}\n  {:id :J :parent-id :I}])\n;; [{:id :A, :parent-id nil}\n;;  [{:id :B, :parent-id :A}\n;;   {:id :C, :parent-id :B}\n;;   {:id :D, :parent-id :B}]\n;;  [{:id :E, :parent-id :A}\n;;   [{:id :F, :parent-id :E} {:id :G, :parent-id :F}]]\n;;  {:id :H, :parent-id :A}\n;;  [{:id :I, :parent-id :A} {:id :J, :parent-id :I}]]\n```\n\n\u3053\u3053\u307e\u3067\u306f\u6700\u521d\u306e `bad-naive-tree->tree-structure` \u3068\u5909\u308f\u308a\u307e\u305b\u3093\u304c\u3001\u5927\u304d\u306a\u30c7\u30fc\u30bf\u3092\u6e21\u3057\u3066\u307f\u307e\u3057\u3087\u3046\u3002\n\n``` clojure\n(let [tree (->> (range 1000)\n                (map (comp keyword str))\n                (partition 2 1)\n                (map #(hash-map :id (second %) :parent-id (first %)))\n                (cons {:id :0 :parent-id nil}))]\n  (naive-tree->tree-structure tree))\n;; [{:id :0, :parent-id nil}\n;;  [{:id :1, :parent-id :0}\n;;   [{:id :2, :parent-id :1}\n;;    [{:id :3, :parent-id :2}\n;;     [{:id :4, :parent-id :3}\n;;      [{:id :5, :parent-id :4}\n;;       [{:id :6, :parent-id :5}\n;;        [{:id :7, :parent-id :6}\n;;         [{:id :8, :parent-id :7}\n;; ... \u7565\n```\n\n\u826f\u3055\u305d\u3046\u3067\u3059\u306d\u3002\n\n\u3053\u3053\u3067\u65b0\u3057\u304f\u767b\u5834\u3057\u305f\u95a2\u6570\u306f\u6b21\u306e\u901a\u308a\u3067\u3059\u3002\n\n-   `clojure.zip/down`\n    -   \u73fe\u5728\u4f4d\u7f6e\u306e\u30ce\u30fc\u30c9\u306e\u5b50\u306e\u6700\u5de6\u7aef\u306e\u4f4d\u7f6e\u3092\u8fd4\u3057\u307e\u3059\u3002\n-   `clojure.zip/append-child`\n    -   \u73fe\u5728\u4f4d\u7f6e\u306e\u30ce\u30fc\u30c9\u306e\u5b50\u306e\u6700\u53f3\u7aef\u306b\u30a2\u30a4\u30c6\u30e0\u3092\u633f\u5165\u3057\u307e\u3059\u3002\u73fe\u5728\u4f4d\u7f6e\u306f\u5909\u308f\u3089\u306a\u3044\u3053\u3068\u306b\u6ce8\u610f\u3057\u307e\u3059\u3002\n\n\u3053\u306e\u95a2\u6570\u3092\u65e5\u672c\u8a9e\u3067\u8aac\u660e\u3059\u308b\u306e\u96e3\u3057\u3044\u306e\u3067\u30b3\u30fc\u30c9\u3092\u8aad\u3093\u3067\u306a\u3093\u3068\u306a\u304f\u3053\u3093\u306a\u3053\u3068\u3057\u3066\u308b\u3093\u3060\u306a\u30fc\u3068\u611f\u3058\u3066\u3082\u3089\u3048\u305f\u3089\u3068\u601d\u3044\u307e\u3059\u3002\n\n\u307e\u3068\u3081\n------\n\nclojure.zip \u306e\u95a2\u6570\u3092\u5229\u7528\u3059\u308c\u3070\u3001\u6728\u69cb\u9020\u3092\u8d70\u67fb\u3059\u308b\u5834\u5408\u3067\u3042\u3063\u3066\u3082\u666e\u6bb5\u66f8\u3044\u3066\u3044\u308b\u3088\u3046\u306a Clojure \u306e\u7dba\u9e97\u306a\u30b3\u30fc\u30c9\u3092\u7dad\u6301\u3059\u308b\u3053\u3068\u304c\u51fa\u6765\u307e\u3059\u3002\n\n\u6728\u69cb\u9020\u3068\u683c\u95d8\u3059\u308b\u6a5f\u4f1a\u306f\u3082\u3057\u304b\u3057\u305f\u3089\u305d\u3093\u306a\u306b\u591a\u304f\u306a\u3044\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u304c\u3001\u3082\u3057\u305d\u306e\u3088\u3046\u306a\u6a5f\u4f1a\u304c\u3042\u308c\u3070\u601d\u3044\u51fa\u3057\u3066\u4f7f\u3063\u3066\u307f\u305f\u3089\u3044\u3044\u306e\u3067\u306f\u306a\u3044\u3067\u3057\u3087\u3046\u304b\u3002\n\n\u53c2\u8003\n----\n\n-   [Tree visitors in Clojure / IBM developerWorks](http://www.ibm.com/developerworks/library/j-treevisit/)\n-   [Clojure flat sequence into tree / stackoverflow](http://stackoverflow.com/questions/31549430/clojure-flat-sequence-into-tree)\n-   [why clojure.zip sucks / clj.orcery](http://z.caudate.me/why-clojure-zip-sucks/)\n", "tags": ["Clojure", "ClojureScript"]}