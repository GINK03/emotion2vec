{"context": " More than 1 year has passed since last update.\u3053\u306e\u8a18\u4e8b\u306fC++ Advent Calender 2015\u306e3\u65e5\u76ee\u306e\u8a18\u4e8b\u3067\u3059\uff0e\n\u524d\u306e\u65e5\u306fadatchey\u3055\u3093\u3067\u3057\u305f.\n\u74b0\u5883\u69cb\u7bc9\u3084GPGPU\u81ea\u4f53\u306e\u77e5\u8b58\u306b\u95a2\u3057\u3066\u306f\u5225\u306e\u8a18\u4e8b\u3092\u7acb\u3066\u307e\u3057\u305f\u306e\u3067\u305d\u3061\u3089\u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\uff0e\n\u74b0\u5883\u69cb\u7bc9\u7de8\n\u524d\u8a18\u4e8b\u3092\u8981\u7d04\u3059\u308b\u3068\uff0cGPGPU\u3068\u306fGPU\u3092\u6570\u5024\u8a08\u7b97\u306b\u5229\u7528\u3059\u308b\u305f\u3081\u306e\u6280\u8853\u3067\u3042\u308a\uff0cC++ AMP\u306fCUDA\u3084OpenCL\u3068\u3044\u3063\u305fGPGPU\u5411\u3051API\u3088\u308a\u3082\u3088\u308a\u9ad8\u30ec\u30a4\u30e4\u30fc\u3067\uff0c\u30cf\u30fc\u30c9\u30a6\u30a7\u30a2\u304c\u62bd\u8c61\u5316\u3055\u308c\u305f\u975e\u5e38\u306b\u4f7f\u3044\u3084\u3059\u3044\u30e9\u30a4\u30d6\u30e9\u30ea\u3060\u3068\u3044\u3046\u3053\u3068\u3067\u3059\uff0e\n\u3055\u3066\uff0c C++ AMP\u306b\u95a2\u3057\u3066\u3067\u3059\u304c\uff0c\u899a\u3048\u308b\u3079\u304d\u6700\u5927\u306e\u4e8b\u67c4\u306fGPU\u306b\u9001\u308b\u30ab\u30fc\u30cd\u30eb\uff08GPU\u306b\u5b9f\u884c\u3057\u3066\u3082\u3089\u3046\u30e2\u30b8\u30e5\u30fc\u30eb\uff09\uff0c\u30c7\u30fc\u30bf\u306e\u6761\u4ef6\u3067\u3059\uff0e\n\n\u4e26\u5217\u51e6\u7406\u306e\u57fa\u672c\n\u4ee5\u4e0b\u306e\u30b3\u30fc\u30c9\u3092\u898b\u3066\u3044\u305f\u3060\u304d\u307e\u3057\u3087\u3046\uff0e\nHello World\u3092\u51fa\u529b\u3059\u308b\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u3067\u3059\uff0e(kalmar sandbox\u3088\u308a\u5f15\u7528)\n#include <iostream>\n#include <amp.h>\nusing namespace concurrency;\nint main() {\n  int v[11] = {'G', 'd', 'k', 'k', 'n', 31, 'v', 'n', 'q', 'k', 'c'};\n\n  array_view<int> av(11, v); \n  parallel_for_each(av.get_extent(), [=](index<1> idx) restrict(amp) {\n    av[idx] += 1;\n  });\n\n  for(unsigned int i = 0; i < av.get_extent().size(); i++)\n    std::cout << static_cast<char>(av(i));\n  return 0;\n}\n\n\u4eca\u306f\u6df1\u304f\u8003\u3048\u305a, parallel_for_each\u95a2\u6570\u306b\u306e\u307f\u7740\u76ee\u3057\u3066\u304f\u3060\u3055\u3044.\n\u3053\u306e\u95a2\u6570\u3053\u305d, \u30ab\u30fc\u30cd\u30eb\u3092GPU\u3067\u5b9f\u884c\u3059\u308b\u305f\u3081\u306eC++ AMP\u306e\u4e2d\u5fc3\u3068\u306a\u308b\u95a2\u6570\u3067\u3059.\nparallel_for_each\u95a2\u6570\u306b\u6e21\u3055\u308c\u308b\u30e9\u30e0\u30c0\u5f0f\u306f\uff0c\u30a2\u30af\u30bb\u30e9\u30ec\u30fc\u30bf\uff08GPU\u30c7\u30d0\u30a4\u30b9\u3068\u8003\u3048\u3066\u3088\u3044\uff09\u3067\u5b9f\u884c\u3055\u308c\u307e\u3059\uff0e\nparallel_for_each\u306e\u5f15\u6570\u306f\nparallel_for_each(\u30a2\u30af\u30bb\u30e9\u30ec\u30fc\u30bf\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\uff08\u7701\u7565\u53ef\u80fd\uff09\uff0c\u30b9\u30ec\u30c3\u30c9\u6570\uff0c\u30ab\u30fc\u30cd\u30eb\uff09\n\u3068\u306a\u3063\u3066\u3044\u307e\u3059\uff0e\u30b9\u30ec\u30c3\u30c9\u6570\u306f\u30e1\u30e2\u30ea\u4e0a\u306eN\u6b21\u5143\u7a7a\u9593\u306e\u5883\u754c\u3092\u6307\u5b9a\u3059\u308b\u30d9\u30af\u30c8\u30eb\u3067\u3042\u308bconcurrecy::extent\u30af\u30e9\u30b9\u3067\u6307\u5b9a\u3057\u307e\u3059\uff0e\u57fa\u672c\u306f\u5404\u6b21\u5143\u306e\u8981\u7d20\u6570\u3068\u540c\u3058\u306b\u3057\u307e\u3057\u3087\u3046.\n\u3053\u3053\u3067\uff0cGPU\u4e0a\u3067\u5b9f\u884c\u3059\u308b\u3053\u3068\u306e\u3067\u304d\u308b\u95a2\u6570\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306f(\u30e9\u30e0\u30c0\u5f0f)\u306frestrict\u5236\u9650\u5b50\u306b\u3088\u3063\u3066GPU\u3067\u5b9f\u884c\u53ef\u80fd\u3067\u3042\u308b\u3053\u3068\u304c\u4fee\u98fe\u3055\u308c\u3066\u3044\u306a\u304f\u3066\u306f\u306a\u308a\u307e\u305b\u3093\uff0e\nAMP\u306f\u3001\u95a2\u6570\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3067\u6e21\u3055\u308c\u308b\u30ab\u30fc\u30cd\u30eb\u306b\u95a2\u3057\u3066\u3001restrict\u5236\u9650\u5b50\u306e\u4e2d\u3067\u30b3\u30fc\u30c9\u3092\u66f8\u304f\u305f\u3081\u306e\u591a\u304f\u306e\u30af\u30e9\u30b9\u3092\u30b5\u30dd\u30fc\u30c8\u3057\u3066\u3044\u307e\u3059\u3002\n\u3067\u306f\u3001\u3053\u306eparallel_for_each\u95a2\u6570\u3092\u4f7f\u3046\u305f\u3081\u306b\u5fc5\u8981\u306a\u77e5\u8b58\u3092\u4ee5\u4e0b\u306e\u9806\u5e8f\u3067\u8aac\u660e\u3057\u3066\u3044\u304d\u307e\u3059.\n1.restrict\u5236\u9650\u6307\u5b9a\u5b50\n2.\u30a2\u30af\u30bb\u30e9\u30ec\u30fc\u30bf\n3.\u30ab\u30fc\u30cd\u30eb\u5411\u3051\u30b3\u30f3\u30c6\u30ca\u53ca\u3073\u95a2\u9023\u30af\u30e9\u30b9\n\nrestrict\u5236\u9650\u6307\u5b9a\u5b50\n\nrestrict(cpu)\n\u901a\u5e38\u306e\u95a2\u6570\n\nrestrict(amp)\nGPU\u3067\u5b9f\u884c\u53ef\u80fd\u3067\u3042\u308b\u3053\u3068\u3092\u793a\u3059\uff0e\n\u4ee5\u4e0b\u306e\u6761\u4ef6\u3092\u6e80\u305f\u3055\u306a\u3044\u5834\u5408\uff0c\u30b3\u30f3\u30d1\u30a4\u30eb\u30a8\u30e9\u30fc\u3068\u306a\u308b\uff0e\n\u57fa\u672c\u8981\u4ef6\n1.restrict(amp)\u95a2\u6570\u306frestrict(amp)\u95a2\u6570\u306e\u307f\u547c\u3073\u51fa\u3059\u3053\u3068\u304c\u3067\u304d\u308b\n2.int\u3001unsigned int\u3001float\u3001double\u306e\u5909\u6570\u3068\u3001\u3053\u308c\u3089\u306e\u578b\u3060\u3051\u3092\u542b\u3080\u30af\u30e9\u30b9\u3068\u69cb\u9020\u4f53\u306e\u307f\u3092\u5229\u7528\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u308b\uff0e\u307e\u305f\uff0c\u30dd\u30a4\u30f3\u30bf\u5909\u6570\u3082\u3053\u308c\u3089\u306e\u578b\u306e\u307f\u3092\u30b5\u30dd\u30fc\u30c8\u3059\u308b\n\u7981\u6b62\u4e8b\u9805\n1.restrict(amp)\u30e9\u30e0\u30c0\u5f0f\u306e\u53c2\u7167\u30ad\u30e3\u30d7\u30c1\u30e3\u306e\u5229\u7528\n2.volatile,static\u30ad\u30fc\u30ef\u30fc\u30c9\n3.\u4eee\u60f3\u95a2\u6570\n4.goto\u6587\n5.dynamic_cast\n6.typeid\n7.\u53ef\u5909\u5f15\u6570\u95a2\u6570\n8.\u30b0\u30ed\u30fc\u30d0\u30eb\u5909\u6570\u3078\u306e\u30a2\u30af\u30bb\u30b9\n9.\u518d\u5e30\n\u307e\u3042if,for\u304c\u4f7f\u3048\u308b\u3060\u3051C++11\u306econstexpr\u95a2\u6570\u3088\u308a\u306f\u30de\u30b7\u3067\u3059\u306d\uff0e\nGPU\u4e0a\u3067\u5b9f\u884c\u3055\u308c\u308b\u305f\u3081\uff0cCPU\u306e\u30e1\u30e2\u30ea\u3078\u306e\u30a2\u30af\u30bb\u30b9\u3092\u4f34\u3046\u64cd\u4f5c\u306f\u7981\u6b62\u3055\u308c\u3066\u3044\u307e\u3059\uff0e\n\u307e\u305f\uff0cGPU\u306e\u30a2\u30fc\u30ad\u30c6\u30af\u30c1\u30e3\u4e0a\u30b7\u30a7\u30fc\u30c0\u3067\u5b9f\u73fe\u304c\u56f0\u96e3\u306a\u64cd\u4f5c\u3082\u7981\u6b62\u3055\u308c\u3066\u3044\u307e\u3059\uff0c\n\n\u30a2\u30af\u30bb\u30e9\u30ec\u30fc\u30bf\nGPU\u30c7\u30d0\u30a4\u30b9\u306e\u4e8b\uff0e\n\u5229\u7528\u53ef\u80fd\u306a\u30a2\u30af\u30bb\u30e9\u30ec\u30fc\u30bf\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u3057\u3066\u53d6\u5f97\u3067\u304d\u307e\u3059\uff0e\n#include<iostream>\n#include<algorithm>\n#include<vector>\n\nusing concurrency::accelerator;\n\nstd::vector<accelerator> findAccelerators(){\n    std::vector<accelerator> accels;\n    accels = accelerator::get_all();\n\n    for(int i=0; i<accels.size(); i++){\n        std::wcout << i+1 << \"th device = \" << accels[i].get_description() << \"\\n\";\n    }\n\n    //emulator\u306e\u30a2\u30af\u30bb\u30e9\u30ec\u30fc\u30bf\u3092\u524a\u9664\u3057\u307e\u3059\n    accels.erase(std::remove_if(accels.begin(),accels.end(),[](accelerator& accel){return accel.get_is_emulated();}),accels.end());\n\n    return accels;\n}\n\n\u30aa\u30f3\u30dc\u30fc\u30c9\u3084\u30a8\u30df\u30e5\u30ec\u30fc\u30bf\uff0c\u30b0\u30e9\u30d5\u30a3\u30c3\u30af\u30dc\u30fc\u30c9\u542b\u3081\u3066\u30de\u30b7\u30f3\u5168\u4f53\u3067\u5229\u7528\u53ef\u80fd\u306aGPU\u3092get_all\u95a2\u6570\u3067\u53d6\u5f97\u3067\u304d\u307e\u3059\uff0e\n\u30a8\u30df\u30e5\u30ec\u30fc\u30bf\u306f\u30c7\u30d0\u30c3\u30b0\u30e2\u30fc\u30c9\u3067\u3057\u304b\u52d5\u304b\u306a\u3044\uff1f\u3000\u6b63\u4f53\u4e0d\u660e\u306e\u30c7\u30d0\u30a4\u30b9\u306a\u306e\u3067\u79c1\u306f\u3044\u3064\u3082\u9664\u5916\u3057\u3066\u3044\u307e\u3059\uff0eget_is_emulated\u95a2\u6570\u3067\u53d6\u5f97\u3067\u304d\u307e\u3059\uff0e\n\u53d6\u5f97\u3057\u305f\u30c7\u30d0\u30a4\u30b9\u306e\u60c5\u5831\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u95a2\u6570\u7b49\u3092\u7528\u3044\u3066\u53d6\u5f97\u3067\u304d\u307e\u3059\uff0e\nvoid getAccelDiscription(const accelerator& accel){\n    std::wcout << \"accelerator: \"<< accel.get_description() << std::endl;\n    std::cout << \"version of the accelerator: \" << accel.get_version() << std::endl;\n    std::cout << \"memory: \" << accel.get_dedicated_memory()/1024./1000. << \" [GB]\" << std::endl;;\n    std::cout << \"is supporting double precision: \" << (accel.get_supports_double_precision() ? \"yes\" : \"no\") << std::endl;\n    std::cout << \"is attached to a display: \" << (accel.get_has_display() ? \"yes\" : \"no\") << std::endl;\n    std::cout << \"is supporting cpu shared memory: \" << (accel.get_supports_cpu_shared_memory() ? \"yes\" : \"no\") << std::endl;\n    return;\n}\n\n\u500d\u7cbe\u5ea6\u6d6e\u52d5\u70b9\u5c0f\u6570\u3092\u30b5\u30dd\u30fc\u30c8\u3057\u3066\u3044\u308b\u304b\uff0cCPU\u3068\u306e\u5171\u6709\u30e1\u30e2\u30ea\u3092\u30b5\u30dd\u30fc\u30c8\u3057\u3066\u3044\u308b\u304b\uff0c\u7b49\u306f\u51e6\u7406\u306b\u304a\u3044\u3066\u91cd\u8981\u306a\u60c5\u5831\u3068\u8a00\u3048\u308b\u304b\u3068.\n\u7279\u306b\u5171\u6709\u30e1\u30e2\u30ea\u306f\u540c\u671f\u306e\u30aa\u30fc\u30d0\u30fc\u30d8\u30c3\u30c9\u306b\u304a\u3044\u3066\u5f37\u3044\u30a2\u30c9\u30d0\u30f3\u30c6\u30fc\u30b8\u3092\u6301\u3064\u3068\u601d\u3044\u307e\u3059\uff0e\n\u30e1\u30e2\u30ea\u304c\u6700\u5927\u306e\u30a2\u30af\u30bb\u30e9\u30ec\u30fc\u30bf\u3092\u9078\u3076\u306e\u306f\u3053\u3093\u306a\u611f\u3058\u306e\u8a18\u8ff0\u306b\u306a\u308a\u307e\u3059\u306d\uff0e\nstd::vector<accelerator>::iterator getBiggestMemoryAccelerator(std::vector<accelerator>& accels){\n    return std::max_element(accels.begin(),accels.end(),[](const accelerator& rhs,const accelerator& lhs){return rhs.get_dedicated_memory() < lhs.get_dedicated_memory();});\n}\n\n\n\u30ab\u30fc\u30cd\u30eb\u5411\u3051\u30b3\u30f3\u30c6\u30ca\n\nCPU\u30e1\u30e2\u30ea\u306e\u30ea\u30bd\u30fc\u30b9\u306eGPU\u3067\u306e\u5229\u7528\u65b9\u6cd5\nparallel_for_each\u95a2\u6570\u5185\u3067\u306f\u30e1\u30e2\u30ea\u306b\u30a2\u30af\u30bb\u30b9\u3067\u304d\u307e\u305b\u3093\uff0e\n\u6e21\u3059\u95a2\u6570\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u4e2d\u306b\u30b3\u30d4\u30fc\u3059\u308b\u306a\u308a\uff0c\u30e9\u30e0\u30c0\u5f0f\u3067\u30b3\u30d4\u30fc\u30ad\u30e3\u30d7\u30c1\u30e3\u3092\u884c\u3046\u306a\u308a\u3057\u3066parallel_for_each\u5185\u3067GPU\u30e1\u30e2\u30ea\u3078\u306e\u30b3\u30d4\u30fc\u3092\u884c\u3046\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\uff0e\nparallel_for_each\u306f\u512a\u79c0\u3067\u3059\u306e\u3067\uff0c\u30c7\u30d0\u30a4\u30b9\u3092\u307e\u305f\u3044\u3060\u51e6\u7406\u3067\u3082\u540c\u671f\u51e6\u7406\u3092\u3057\u3066\u3044\u308b\u304b\u306e\u3088\u3046\u306b\u632f\u821e\u3063\u3066\u304f\u308c\u307e\u3059\uff0e\u3064\u307e\u308a\uff0cCPU\u5074\u3067\u30b9\u30ec\u30c3\u30c9\u3068\u6b62\u3081\u308b\u3068\u304b\uff0cGPU\u3068CPU\u9593\u306e\u30e1\u30e2\u30ea\u306e\u540c\u671f\u3092\u5f85\u3064\u3068\u304b\uff0c\u305d\u3046\u3044\u3063\u305f\u3053\u3068\u3092\u6c17\u306b\u3057\u305f\u51e6\u7406\u3092\u66f8\u304f\u5fc5\u8981\u306f\u3042\u308a\u307e\u305b\u3093\uff0e\n\u305f\u3060\u3057,parallel_for_each\u5185\u3067\u5b9f\u884c\u3055\u308c\u308b\u30ab\u30fc\u30cd\u30eb\u306e\u9806\u5e8f\u306f\u4fdd\u8a3c\u3055\u308c\u3066\u3044\u307e\u305b\u3093.\u3053\u306e\u3042\u305f\u308a\u306f\u666e\u901a\u306e\u4e26\u5217\u51e6\u7406\u3068\u4e00\u7dd2\u3067\u3059\u306d.\n\u57fa\u672c\u7684\u306a\u5909\u6570\u306f\u30e9\u30e0\u30c0\u5f0f\u306e\u30b3\u30d4\u30fc\u30ad\u30e3\u30d7\u30c1\u30e3\u3067\u4e8b\u8db3\u308a\u307e\u3059\u304c\uff0c\u914d\u5217\u306e\u5834\u5408\u306f\u30dd\u30a4\u30f3\u30bf\u304c\u4f7f\u3048\u307e\u305b\u3093\u306e\u3067\u4e00\u500b\u4e00\u500b\u30ad\u30e3\u30d7\u30c1\u30e3\u3059\u308b\u304b\uff0c\u3042\u308b\u3044\u306f\u5c02\u7528\u306eAMP\u306e\u30b3\u30f3\u30c6\u30ca\u3092\u4f7f\u3046\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\uff0e\nconcurrency::array\u304c\u305d\u308c\u306b\u8a72\u5f53\u3057\u307e\u3059\uff0e\n\u3053\u306e\u30b3\u30f3\u30c6\u30ca\u306f\u666e\u901a\u306e\u914d\u5217\u3068\u540c\u3058\u3088\u3046\u306b\u6271\u3048\u307e\u3059\u304c\uff0cGPU\u306e\u30e1\u30e2\u30ea\u306b\u8981\u7d20\u304c\u78ba\u4fdd\u3055\u308c\u307e\u3059\uff0e\ntemplate <\n   typename _Value_type,\n   int _Rank                     \n>\nfriend class array;\n\n\u7b2c\u4e00\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u5f15\u6570\u306f\u578b\uff0c\u7b2c\u4e8c\u5f15\u6570\u306f\u300c\u6b21\u5143\u300d\u3067\u3059\uff0e\u8981\u7d20\u6570\u3067\u306f\u3042\u308a\u307e\u305b\u3093\uff0e\nstd::array\u3068\u6df7\u540c\u3057\u306a\u3044\u3088\u3046\u306b\uff0e\n\u307e\u305f\uff0c\u5404\u30b3\u30f3\u30c6\u30ca\u30fc\u3092GPU,CPU\u4e21\u65b9\u3067\u5229\u7528\u53ef\u80fd\u306b\u3059\u308b\u30e9\u30c3\u30d1\u30fc\u30b3\u30f3\u30c6\u30ca\u3067\u3042\u308barray_view\u3068\u3044\u3046\u3082\u306e\u304c\u5b58\u5728\u3057\u307e\u3059\uff0e\ntemplate <\n   typename _Value_type,\n   int _Rank = 1\n>\nclass array_view;\n\n\u3053\u306e\u30e9\u30c3\u30d1\u30fc\u30b3\u30f3\u30c6\u30ca\u306f\u30e1\u30e2\u30ea\u3092\u53c2\u7167\u3057\uff0c\u305d\u306e\u4ef2\u4ecb\u3092\u306a\u3059\u30b3\u30f3\u30c6\u30ca\u3068\u3057\u3066\u6a5f\u80fd\u3057\u307e\u3059\uff0e\narray_view\u306b\u5bfe\u3059\u308b\u5909\u66f4\u306farray_view\u306e\u540c\u671f\u95a2\u6570\u306b\u3088\u3063\u3066\u30e1\u30e2\u30ea\u306e\u53c2\u7167\u5143\u306b\u540c\u671f\u3055\u308c\u307e\u3059\uff0e\u307e\u305f\u30c7\u30b9\u30c8\u30e9\u30af\u30bf\u3084\u7279\u5b9a\u306e\u6761\u4ef6\u3067\u3082\u540c\u671f\u304c\u884c\u308f\u308c\u308b\u3088\u3046\u3067\u3059\uff0e\n\u3053\u306e\u30e9\u30c3\u30d1\u30fc\u30b3\u30f3\u30c6\u30ca\u3092\u5229\u7528\u3059\u308b\u3053\u3068\u3067\uff0cCPU\u306e\u30ea\u30bd\u30fc\u30b9\u3092GPU\u3067\uff0cGPU\u306e\u30ea\u30bd\u30fc\u30b9\u3092CPU\u3067\u6271\u3046\u3053\u3068\u304c\u3067\u304d\u307e\u3059\uff0e\n\u4f8b\u3048\u3070\uff0cGPU\u306e\u30e1\u30e2\u30ea\u306b\u78ba\u4fdd\u3055\u308c\u305fconcurrency::array\u306b\u5bfe\u3057\u3066CPU\u5074\u304b\u3089\u30a2\u30af\u30bb\u30b9\u3059\u308b\u30b3\u30fc\u30c9\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u3082\u306e\u304c\u8003\u3048\u3089\u308c\u307e\u3059\uff0e\n#include\"amp.h\"\n#include<array>\n#include<iostream>\n\ntemplate<class T,int dim,class F>\nvoid accessArray(concurrency::array<T,dim>& vGArray,F&& function){\n    concurrency::array_view<T,dim> vGArrayView = vGArray; //concurrency::array\u306e\u30e9\u30c3\u30d1\u30fc\u3092\u4f5c\u6210\n    function(vGArrayView); //array_view\u306fcpu\u5074\u304b\u3089\u30a2\u30af\u30bb\u30b9\u53ef\u80fd\n}\n\ntemplate<class T, int dim>\nstd::unique_ptr<concurrency::array<T, dim>> createArray(const concurrency::accelerator& accel, int size) {\n    return std::make_unique<concurrency::array<T, dim>>(size, accel.get_default_view());\n}\n\nint main() {\n    constexpr int dim = 1;\n    const int size = 100;\n\n    concurrency::accelerator accel = *getBiggestMemoryAccelerator(findAccelerators());\n\n    auto vGArray(createArray<int, dim>(accel, size));\n\n    accessArray(*vGArray, [&](auto& _array) {\n        for (int i = 0; i<size; i++)_array[i] = i;\n    });\n\n    return 0;\n}\n\namp\u95a2\u6570\u306e\u5236\u9650\u4e0a\uff0cstd::size_t\u306fconcurrency\u540d\u524d\u7a7a\u9593\u3067\u57fa\u672c\u7684\u306b\u4f7f\u308f\u308c\u3066\u3044\u306a\u3044\u3053\u3068\u3082\u7559\u610f\u3057\u3066\u304a\u304f\u3068\u826f\u3044\u3067\u3057\u3087\u3046\uff0e\narray_view\u306f\u30b3\u30d4\u30fc\u30ad\u30e3\u30d7\u30c1\u30e3\u3092\u7528\u3044\u3066GPU\u306b\u8ee2\u9001\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\uff0e\nCPU\u5074\u3067\u78ba\u4fdd\u3057\u305f\u914d\u5217\u3092\u30ab\u30fc\u30cd\u30eb\u3067\u4f7f\u3044\u305f\u3044\u5834\u5408\u306f\u3001\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u30b3\u30fc\u30c9\u306b\u306a\u308b\u3067\u3057\u3087\u3046.\nint main() {\n    constexpr int dim = 1;\n    const int size = 100;\n    std::array<int,size> arr;\n\n    concurrency::accelerator accel = *getBiggestMemoryAccelerator(findAccelerators());\n    concurrency::extent<dim> ex;\n    ex[0] = size;\n\n    concurrency::array_view<int, dim> view(size,reinterpret_cast<int*>(&arr[0])); //iterator\u306b\u5bfe\u5fdc\u3057\u3066\u3044\u306a\u3044\u306e\u3067\u4ed5\u65b9\u306a\u304fbegin()\u3067\u306f\u306a\u304f\u30dd\u30a4\u30f3\u30bf\u3092\u30ad\u30e3\u30b9\u30c8\u3057\u3066\u307e\u3059\n    parallel_for_each(accel.get_default_view(),\n        ex,\n        [=](concurrency::index<dim> gindex) restrict(amp) {\n        view[gindex] = 114514; //array_view\u306f\u30b3\u30d4\u30fc\u30ad\u30e3\u30d7\u30c1\u30e3\u53ef\u80fd\n    }\n    );\n\n    view.synchronize(); //\u30e1\u30e2\u30ea\u53c2\u7167\u5143\u3068\u540c\u671f\u3057\u307e\u3059\n\n    for (int i = 0; i<size; i++) {\n        std::cout << arr[i] << \",\";\n    }\n    std::cout << std::endl;\n\n    return 0;\n}\n\n\n\u5168\u3066\u306e\u8981\u7d20\u3092\u9069\u5f53\u306a\u6570\u5b57\u3067\u521d\u671f\u5316\u3057\u3066\u3044\u307e\u3059.\n\nindex\u30af\u30e9\u30b9\ntemplate <\n   int _Rank\n>\nclass index;\n\nN\u6b21\u5143\u7a7a\u9593\u306e\u8981\u7d20\u3092\u4e00\u610f\u306b\u53c2\u7167\u3059\u308b\u30d9\u30af\u30bf\u30fc\u30af\u30e9\u30b9\u3067\u3059\uff0e\n\u3053\u306e\u30af\u30e9\u30b9\u306fparallel_for_each\u306b\u6e21\u3055\u308c\u308b\u30ab\u30fc\u30cd\u30eb\u306e\u5f15\u6570\u306b\u306a\u308b\u308f\u3051\u3067\u3059\u304c\uff0c\u3053\u306e\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u304c\u30b9\u30ec\u30c3\u30c9\u756a\u53f7\u3068\u7d50\u3073\u3064\u3051\u3089\u308c\uff0c\u30c7\u30fc\u30bf\u306e\u4e26\u5217\u306e\u51e6\u7406\u304c\u5b9f\u73fe\u3055\u308c\u308b\u308f\u3051\u3067\u3059\uff0e\n\u591a\u6b21\u5143\u306earray_view\u306bindex\u3092\u7528\u3044\u3066\u30a2\u30af\u30bb\u30b9\u3059\u308b\u30b3\u30fc\u30c9\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3059.\n\ntemplate<class T,int Rank,typename... Args>\nT& accessArrayByIndex(const concurrency::array_view<T,Rank>& a,Args... indexes) restrict(amp)\n{\n    static_assert(sizeof...(indexes) == Rank,\"number of index is incorrect\");\n\n    concurrency::index<Rank> idx(indexes...);\n    return a[idx];\n}\n\nint main(void){\n    constexpr int COLS=6,ROWS=4;\n    std::array<std::array<float,COLS>,ROWS> data={\n        1,2,3,4,5,6,\n        7,8,9,10,11,12,\n        1,2,3,4,5,6,\n        7,8,9,10,11,12\n    };\n\n    concurrency::array_view<float,2> data_view(ROWS,COLS,reinterpret_cast<float*>(&data[0][0]));\n    //print data_view[3][2] by index<2>;\n    std::cout << accessArrayByIndex(data_view,3,2);\n    std::cout << std::endl;\n    return 0;\n}\n\n\u6b21\u5143\u306b\u304b\u304b\u308f\u3089\u305a\u3001[]\u30aa\u30da\u30ec\u30fc\u30bf\u3067\u4e00\u610f\u306b\u8981\u7d20\u3092\u6307\u5b9a\u3067\u304d\u308b\u306e\u304c\u5f37\u307f\u306a\u308f\u3051\u3067\u3059.\n\u3055\u3066,\u3053\u306e\u8fba\u308a\u3067\u5927\u4f53\u57fa\u672c\u7684\u306a\u8aac\u660e\u306f\u7d42\u308f\u308a\u307e\u3057\u305f.\n\u3053\u306e\u304f\u3089\u3044\u5206\u304b\u308c\u3070\u4e26\u5217\u51e6\u7406\u306f\u305f\u3044\u3066\u3044\u5b9f\u73fe\u3067\u304d\u308b\u3068\u601d\u3044\u307e\u3059.\n\u6700\u5f8c\u306b, \u300c\u30bf\u30a4\u30eb\u300d\u3068\u547c\u3070\u308c\u308b\u6a5f\u80fd\u3092\u4f7f\u3063\u3066, \u7206\u901f\u3067\u753b\u50cf\u51e6\u7406\u3092\u3084\u3063\u3066\u307f\u307e\u3059\u306d.\n\n\u5fdc\u7528 \u30bf\u30a4\u30eb\u306b\u3088\u308b\u7206\u901f\u753b\u50cf\u51e6\u7406\n\u30bf\u30a4\u30eb\u3068\u306f, \u30b9\u30ec\u30c3\u30c9\u3092\u56db\u89d2\u5f62\u306e\u30b5\u30d6\u30bb\u30c3\u30c8\u306b\u5206\u5272\u3059\u308b\u6a5f\u80fd\u3067\u3059.\n\u591a\u6b21\u5143\u3067\u3082\u3067\u304d\u308b\u304b\u3068\u601d\u3044\u307e\u3059\u304c, \u4e8c\u6b21\u5143, \u4f8b\u3048\u3070\u753b\u50cf\u51e6\u7406\u3067\u8003\u3048\u308b\u3068\u308f\u304b\u308a\u3084\u3059\u3044\u3068\u601d\u3044\u307e\u3059.\n\u4f8b\u3048\u30709*9\u30d4\u30af\u30bb\u30eb\u306e\u753b\u50cf\u304c\u3042\u3063\u305f\u3068\u3057\u3066, \u305d\u306e\u753b\u50cf\u30923*3\u306e4\u3064\u306e\u30b5\u30d6\u30bb\u30c3\u30c8\u306b\u5206\u5272\u3057\u3066\u51e6\u7406\u3092\u3057\u307e\u3059.\n\u3053\u306e\u30b5\u30d6\u30bb\u30c3\u30c8\u5316\u306b\u3088\u3063\u3066\u4f55\u304c\u5f97\u306a\u306e\u304b\u3068\u3044\u3046\u3068, \u305d\u306e\u30b5\u30d6\u30bb\u30c3\u30c8\u5358\u4f4d\u3067\u9759\u7684\u5909\u6570\u3092\u6271\u3046\u3053\u3068\u304c\u51fa\u6765, \u540c\u3058\u8a08\u7b97\u3092\u3057\u306a\u304f\u3066\u6e08\u3080\u3088\u3046\u306b\u306a\u3063\u305f\u308a\u3057\u307e\u3059.\n\u5b9f\u969b\u306b\u753b\u50cf\u3092\u9069\u5207\u306a\u30b5\u30a4\u30ba\u306e\u30b5\u30d6\u30bb\u30c3\u30c8\u306b\u5206\u5272\u3057\u3066, \u305d\u306e\u30b5\u30d6\u30bb\u30c3\u30c8\u5358\u4f4d\u3067\u8272\u306e\u5e73\u5747\u3092\u3068\u308b\u51e6\u7406\u3092\u3057\u3066\u307f\u307e\u3057\u3087\u3046.\n\u3059\u306a\u308f\u3061, \u30e2\u30b6\u30a4\u30af\u51e6\u7406\u3067\u3059.\n1\u3064\u306e\u30b5\u30d6\u30bb\u30c3\u30c8\u304c\u30e2\u30b6\u30a4\u30af\u5f8c\u306e\u753b\u50cf\u306e\u5927\u304d\u306a\u30d4\u30af\u30bb\u30eb\u306b\u76f8\u5f53\u3057\u307e\u3059.\n\nindex/tiled_index_modules.hpp\ntemplate<typename T,int TILE_COLS, int TILE_ROWS>\nstd::unique_ptr<T[]> convolutionCalculateAverage(T* data, int rows, int cols,const concurrency::accelerator& accel)\n{\n    std::unique_ptr<T[]> average(new T[rows*cols]);\n\n    concurrency::array_view<T, 2> data_view(rows, cols, data);\n    concurrency::array_view<float, 2> average_view(rows, cols, reinterpret_cast<float*>(average.get()));\n\n    std::cout << \"\\n-------------------parallel calculation-----------------\" << std::endl;\n    std::cout << \"rows/cols \" << rows << \"/\" << cols << std::endl;\n\n    average_view.discard_data();\n    parallel_for_each(\n        data_view.get_extent().tile<TILE_ROWS, TILE_COLS>(),\n        [=](concurrency::tiled_index<TILE_ROWS, TILE_COLS> idx) restrict(amp) {\n        tile_static T nums[TILE_ROWS][TILE_COLS];\n        nums[idx.local[1]][idx.local[0]] = data_view[idx.global];\n        idx.barrier.wait();\n        T sum=0;\n        for (int i = 0; i<TILE_ROWS; i++) {\n            for (int j = 0; j<TILE_COLS; j++) {\n                sum += nums[i][j];\n            }\n        }\n        average_view[idx.global] = sum / static_cast<T>(TILE_ROWS*TILE_COLS);\n    }\n    );\n    average_view.synchronize();\n\n    return std::move(average);\n}\n\n\n\nmain.cpp\n#include\"opencv_include.h\" //\u3053\u308c\u306fopencv\u306e\u74b0\u5883\u69cb\u7bc9\u7528\u306e\u30d8\u30c3\u30c0\u3067\u3059\n#include\"amp.h\"\n#include\"index/tiled_index_modules.hpp\"\n#include<iostream>\n#include<chrono>\n\nvoid image_processing_test(concurrency::accelerator& accel)\n{                                                                                                                                                                                    \n    cv::Mat input;\n    cv::Mat_<float> gray,gray_cpu;\n    input = cv::imread(\"image_middle.jpg\",cv::IMREAD_GRAYSCALE);\n    input.convertTo(gray, CV_32FC1);\n    input.convertTo(gray_cpu, CV_32FC1);\n\n    for (int rows = 0; rows < input.rows; rows++) {\n        for (int cols = 0; cols < input.cols; cols++) {\n            gray.at<float>(rows, cols) /= 255.;\n        }\n    }\n    std::cout << gray.elemSize1() << std::endl;\n    std::cout << gray.channels() << std::endl;\n    std::cout << gray.step << \"/\" << gray.elemSize() * gray.cols << std::endl;\n    std::cout << gray.isContinuous() << std::endl;\n\n    constexpr int convolution_size = 15;\n    {\n        std::chrono::time_point<std::chrono::system_clock> now = std::chrono::system_clock::now();\n        for (int rows = 0; rows < gray.rows; rows++) {\n            for (int cols = 0; cols < gray.cols; cols++) {\n\n                int sum;\n\n                for (int y = -convolution_size; y <= convolution_size; y++) {\n                    for (int x = -convolution_size; x <= convolution_size; x++) {\n                        if (rows + y >= 0 && rows + y < gray.rows && cols + x >= 0 && cols + x < gray.cols)\n                            sum += gray.data[(rows + y) * gray.step + (cols + x) * gray.elemSize()];\n                        else sum += gray.data[rows * gray.step + cols * gray.elemSize()];\n                    }\n                }\n                gray_cpu.data[rows * gray.step + cols * gray.elemSize()] = sum / pow(2 * convolution_size + 1, 2);\n\n            }\n        }\n        std::chrono::time_point<std::chrono::system_clock> after = std::chrono::system_clock::now();\n        std::cout << \"----------------cpu calculation succeeded---------------\" << std::endl;\n        std::chrono::duration<double> diff = after - now;\n        std::cout << \"score \" << diff.count() << \"[s]\" << std::endl;\n    }\n\n    {\n        std::chrono::time_point<std::chrono::system_clock> now = std::chrono::system_clock::now();\n        auto result = convolutionCalculateAverage<float, convolution_size*2, convolution_size*2>(reinterpret_cast<float*>(&gray.data[0]), input.rows, input.cols, accel);\n        std::chrono::time_point<std::chrono::system_clock> after = std::chrono::system_clock::now();\n\n        std::cout << \"----------------gpu calculation succeeded---------------\" << std::endl;\n\n        std::chrono::duration<double> diff = after - now;\n\n        std::cout << \"score \" << diff.count() << \"[s]\" << std::endl;\n\n        for (int rows = 0; rows < input.rows; rows++) {\n            for (int cols = 0; cols < input.cols; cols++) {\n                gray.at<float>(rows, cols) = result[rows*input.cols + cols];\n            }\n        }\n    }\n\n    cv::namedWindow(\"window\", CV_WINDOW_AUTOSIZE);\n    cv::namedWindow(\"window2\", CV_WINDOW_AUTOSIZE);\n\n    cv::imshow(\"window\", gray);\n    cv::imshow(\"window2\", input);\n\n    cv::waitKey(0);\n}\n\n\ncpu\u3068gpu\u4e21\u65b9\u3067\u8a08\u7b97\u3057\u3066, \u30b9\u30b3\u30a2\u3092\u8868\u793a\u3057\u305f\u308a\u3057\u3066\u307e\u3059.\n\u8272\u3005\u8aac\u660e\u3057\u3066\u306a\u3044\u95a2\u6570, \u30af\u30e9\u30b9\u304c\u3042\u308a\u307e\u3059\u304c, \u75b2\u308c\u3061\u3083\u3063\u305f\u306e\u3067\u958b\u767a\u5143\u306emicrosoft\u3055\u3093\u306b\u805e\u3044\u3066\u304f\u3060\u3055\u3044.\n\u305f\u3060\u3057,cv::Mat\u30af\u30e9\u30b9\u306b\u304a\u3044\u3066,\u914d\u5217\u306e\u6b21\u5143\u6570\u30922\u6b21\u5143\u306b\u3059\u308b\u305f\u3081\u30b0\u30ec\u30fc\u30b9\u30b1\u30fc\u30eb\u306b\u3057\u3066\u3044\u308b\u3053\u3068,\nunsigned char\u306fC++ AMP\u306f\u5bfe\u5fdc\u3057\u3066\u3044\u306a\u3044\u306e\u3067, \u753b\u7d20\u306e\u30b5\u30a4\u30ba\u3092float\u306b\u5909\u63db\u3057\u3066\u3044\u308b\u3053\u3068\u306b\u6ce8\u610f\u3057\u3066\u304f\u3060\u3055\u3044.\n\u5b9f\u884c\u7d50\u679c\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306b.\n\u5909\u63db\u524d\n\n\u5909\u63db\u5f8c\n\n\u51fa\u529b\n0th device = NVIDIA GeForce GTX 670\n1th device = Microsoft Basic Render Driver\n2th device = Software Adapter\n3th device = CPU accelerator\naccelerator: NVIDIA GeForce GTX 670\nversion of the accelerator: 720896\nmemory: 1.98681 [GB]\nis supporting double precision: yes\nis attached to a display: yes\nis supporting cpu shared memory: yes\n4\n1\n5760/5760\n1\n----------------cpu calculation succeeded---------------\nscore 1.94933[s]\n-------------------parallel calculation----------------\nrows/cols 810/1440\n----------------gpu calculation succeeded---------------\nscore 0.0314382[s]\n\n\u4ee5\u4e0a\u3067\u3059.\n\u5225\u306e\u74b0\u5883(GTX 630M)\u3067\u3082\u8a66\u3057\u307e\u3057\u305f\u304c, CPU\u306e\u5927\u4f5350~60\u500d\u306e\u30b9\u30b3\u30a2\u306b\u843d\u3061\u7740\u304f\u3088\u3046\u3067\u3059.\n\u753b\u50cf\u306f\u4fb5\u7565\uff01\u30a4\u30ab\u5a18\u3088\u308a\u5f15\u7528\u3057\u307e\u3057\u305f.\n\u3053\u306e\u8a18\u4e8b\u3067\u4f7f\u7528\u3057\u305f\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u306a\u3069\u306fgithub\u3067\u516c\u958b\u3057\u3066\u3044\u307e\u3059.\nRiyaaaaa/Gpu-Accelerated-Cpp\n\u660e\u65e5\u306fmitsutaka-takeda\u3055\u3093\u3067\u3059.\u3088\u308d\u3057\u304f\u304a\u306d\u304c\u3044\u3057\u307e\u3059\uff01\n\n\u3053\u306e\u8a18\u4e8b\u306f[C++ Advent Calender 2015](http://www.adventar.org/calendars/926)\u306e3\u65e5\u76ee\u306e\u8a18\u4e8b\u3067\u3059\uff0e\n\u524d\u306e\u65e5\u306f[adatchey\u3055\u3093](http://qiita.com/adatchey/items/7d721f7670c4cd8f8af0)\u3067\u3057\u305f.\n\n\u74b0\u5883\u69cb\u7bc9\u3084GPGPU\u81ea\u4f53\u306e\u77e5\u8b58\u306b\u95a2\u3057\u3066\u306f\u5225\u306e\u8a18\u4e8b\u3092\u7acb\u3066\u307e\u3057\u305f\u306e\u3067\u305d\u3061\u3089\u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\uff0e\n[\u74b0\u5883\u69cb\u7bc9\u7de8](http://qiita.com/Riyaaaa_a/items/0a791e02a92af5fe8b1c)\n\n\u524d\u8a18\u4e8b\u3092\u8981\u7d04\u3059\u308b\u3068\uff0cGPGPU\u3068\u306f**GPU\u3092\u6570\u5024\u8a08\u7b97\u306b\u5229\u7528\u3059\u308b\u305f\u3081\u306e\u6280\u8853**\u3067\u3042\u308a\uff0cC++ AMP\u306fCUDA\u3084OpenCL\u3068\u3044\u3063\u305fGPGPU\u5411\u3051API\u3088\u308a\u3082\u3088\u308a\u9ad8\u30ec\u30a4\u30e4\u30fc\u3067\uff0c\u30cf\u30fc\u30c9\u30a6\u30a7\u30a2\u304c\u62bd\u8c61\u5316\u3055\u308c\u305f\u975e\u5e38\u306b\u4f7f\u3044\u3084\u3059\u3044\u30e9\u30a4\u30d6\u30e9\u30ea\u3060\u3068\u3044\u3046\u3053\u3068\u3067\u3059\uff0e\n\n\u3055\u3066\uff0c C++ AMP\u306b\u95a2\u3057\u3066\u3067\u3059\u304c\uff0c\u899a\u3048\u308b\u3079\u304d\u6700\u5927\u306e\u4e8b\u67c4\u306fGPU\u306b\u9001\u308b**\u30ab\u30fc\u30cd\u30eb**\uff08GPU\u306b\u5b9f\u884c\u3057\u3066\u3082\u3089\u3046\u30e2\u30b8\u30e5\u30fc\u30eb\uff09\uff0c\u30c7\u30fc\u30bf\u306e\u6761\u4ef6\u3067\u3059\uff0e\n\n# \u4e26\u5217\u51e6\u7406\u306e\u57fa\u672c\n\n\u4ee5\u4e0b\u306e\u30b3\u30fc\u30c9\u3092\u898b\u3066\u3044\u305f\u3060\u304d\u307e\u3057\u3087\u3046\uff0e\nHello World\u3092\u51fa\u529b\u3059\u308b\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u3067\u3059\uff0e(kalmar sandbox\u3088\u308a\u5f15\u7528)\n\n```cpp\n#include <iostream>\n#include <amp.h>\nusing namespace concurrency;\nint main() {\n  int v[11] = {'G', 'd', 'k', 'k', 'n', 31, 'v', 'n', 'q', 'k', 'c'};\n\n  array_view<int> av(11, v); \n  parallel_for_each(av.get_extent(), [=](index<1> idx) restrict(amp) {\n    av[idx] += 1;\n  });\n\n  for(unsigned int i = 0; i < av.get_extent().size(); i++)\n    std::cout << static_cast<char>(av(i));\n  return 0;\n}\n```\n\n\u4eca\u306f\u6df1\u304f\u8003\u3048\u305a, **parallel_for_each\u95a2\u6570**\u306b\u306e\u307f\u7740\u76ee\u3057\u3066\u304f\u3060\u3055\u3044.\n\u3053\u306e\u95a2\u6570\u3053\u305d, \u30ab\u30fc\u30cd\u30eb\u3092GPU\u3067\u5b9f\u884c\u3059\u308b\u305f\u3081\u306eC++ AMP\u306e\u4e2d\u5fc3\u3068\u306a\u308b\u95a2\u6570\u3067\u3059.\n\nparallel_for_each\u95a2\u6570\u306b\u6e21\u3055\u308c\u308b\u30e9\u30e0\u30c0\u5f0f\u306f\uff0c\u30a2\u30af\u30bb\u30e9\u30ec\u30fc\u30bf\uff08GPU\u30c7\u30d0\u30a4\u30b9\u3068\u8003\u3048\u3066\u3088\u3044\uff09\u3067\u5b9f\u884c\u3055\u308c\u307e\u3059\uff0e\nparallel_for_each\u306e\u5f15\u6570\u306f\n\n`parallel_for_each(\u30a2\u30af\u30bb\u30e9\u30ec\u30fc\u30bf\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\uff08\u7701\u7565\u53ef\u80fd\uff09\uff0c\u30b9\u30ec\u30c3\u30c9\u6570\uff0c\u30ab\u30fc\u30cd\u30eb\uff09`\n\n\u3068\u306a\u3063\u3066\u3044\u307e\u3059\uff0e\u30b9\u30ec\u30c3\u30c9\u6570\u306f\u30e1\u30e2\u30ea\u4e0a\u306eN\u6b21\u5143\u7a7a\u9593\u306e\u5883\u754c\u3092\u6307\u5b9a\u3059\u308b\u30d9\u30af\u30c8\u30eb\u3067\u3042\u308bconcurrecy::extent\u30af\u30e9\u30b9\u3067\u6307\u5b9a\u3057\u307e\u3059\uff0e\u57fa\u672c\u306f\u5404\u6b21\u5143\u306e\u8981\u7d20\u6570\u3068\u540c\u3058\u306b\u3057\u307e\u3057\u3087\u3046.\n\u3053\u3053\u3067\uff0cGPU\u4e0a\u3067\u5b9f\u884c\u3059\u308b\u3053\u3068\u306e\u3067\u304d\u308b\u95a2\u6570\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306f(\u30e9\u30e0\u30c0\u5f0f)\u306f**restrict\u5236\u9650\u5b50**\u306b\u3088\u3063\u3066GPU\u3067\u5b9f\u884c\u53ef\u80fd\u3067\u3042\u308b\u3053\u3068\u304c\u4fee\u98fe\u3055\u308c\u3066\u3044\u306a\u304f\u3066\u306f\u306a\u308a\u307e\u305b\u3093\uff0e\n\nAMP\u306f\u3001\u95a2\u6570\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3067\u6e21\u3055\u308c\u308b\u30ab\u30fc\u30cd\u30eb\u306b\u95a2\u3057\u3066\u3001restrict\u5236\u9650\u5b50\u306e\u4e2d\u3067\u30b3\u30fc\u30c9\u3092\u66f8\u304f\u305f\u3081\u306e\u591a\u304f\u306e\u30af\u30e9\u30b9\u3092\u30b5\u30dd\u30fc\u30c8\u3057\u3066\u3044\u307e\u3059\u3002\n\u3067\u306f\u3001\u3053\u306eparallel_for_each\u95a2\u6570\u3092\u4f7f\u3046\u305f\u3081\u306b\u5fc5\u8981\u306a\u77e5\u8b58\u3092\u4ee5\u4e0b\u306e\u9806\u5e8f\u3067\u8aac\u660e\u3057\u3066\u3044\u304d\u307e\u3059.\n\n1.restrict\u5236\u9650\u6307\u5b9a\u5b50\n2.\u30a2\u30af\u30bb\u30e9\u30ec\u30fc\u30bf\n3.\u30ab\u30fc\u30cd\u30eb\u5411\u3051\u30b3\u30f3\u30c6\u30ca\u53ca\u3073\u95a2\u9023\u30af\u30e9\u30b9\n\n## restrict\u5236\u9650\u6307\u5b9a\u5b50\n\n### restrict(cpu)\n\u901a\u5e38\u306e\u95a2\u6570\n### restrict(amp)\nGPU\u3067\u5b9f\u884c\u53ef\u80fd\u3067\u3042\u308b\u3053\u3068\u3092\u793a\u3059\uff0e\n\u4ee5\u4e0b\u306e\u6761\u4ef6\u3092\u6e80\u305f\u3055\u306a\u3044\u5834\u5408\uff0c\u30b3\u30f3\u30d1\u30a4\u30eb\u30a8\u30e9\u30fc\u3068\u306a\u308b\uff0e\n\n\u57fa\u672c\u8981\u4ef6\n1.restrict(amp)\u95a2\u6570\u306frestrict(amp)\u95a2\u6570\u306e\u307f\u547c\u3073\u51fa\u3059\u3053\u3068\u304c\u3067\u304d\u308b\n2.int\u3001unsigned int\u3001float\u3001double\u306e\u5909\u6570\u3068\u3001\u3053\u308c\u3089\u306e\u578b\u3060\u3051\u3092\u542b\u3080\u30af\u30e9\u30b9\u3068\u69cb\u9020\u4f53\u306e\u307f\u3092\u5229\u7528\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u308b\uff0e\u307e\u305f\uff0c\u30dd\u30a4\u30f3\u30bf\u5909\u6570\u3082\u3053\u308c\u3089\u306e\u578b\u306e\u307f\u3092\u30b5\u30dd\u30fc\u30c8\u3059\u308b\n\n\u7981\u6b62\u4e8b\u9805\n1.restrict(amp)\u30e9\u30e0\u30c0\u5f0f\u306e\u53c2\u7167\u30ad\u30e3\u30d7\u30c1\u30e3\u306e\u5229\u7528\n2.volatile,static\u30ad\u30fc\u30ef\u30fc\u30c9\n3.\u4eee\u60f3\u95a2\u6570\n4.goto\u6587\n5.dynamic_cast\n6.typeid\n7.\u53ef\u5909\u5f15\u6570\u95a2\u6570\n8.\u30b0\u30ed\u30fc\u30d0\u30eb\u5909\u6570\u3078\u306e\u30a2\u30af\u30bb\u30b9\n9.\u518d\u5e30\n\n\u307e\u3042if,for\u304c\u4f7f\u3048\u308b\u3060\u3051C++11\u306econstexpr\u95a2\u6570\u3088\u308a\u306f\u30de\u30b7\u3067\u3059\u306d\uff0e\n\nGPU\u4e0a\u3067\u5b9f\u884c\u3055\u308c\u308b\u305f\u3081\uff0cCPU\u306e\u30e1\u30e2\u30ea\u3078\u306e\u30a2\u30af\u30bb\u30b9\u3092\u4f34\u3046\u64cd\u4f5c\u306f\u7981\u6b62\u3055\u308c\u3066\u3044\u307e\u3059\uff0e\n\u307e\u305f\uff0cGPU\u306e\u30a2\u30fc\u30ad\u30c6\u30af\u30c1\u30e3\u4e0a\u30b7\u30a7\u30fc\u30c0\u3067\u5b9f\u73fe\u304c\u56f0\u96e3\u306a\u64cd\u4f5c\u3082\u7981\u6b62\u3055\u308c\u3066\u3044\u307e\u3059\uff0c\n\n##\u30a2\u30af\u30bb\u30e9\u30ec\u30fc\u30bf\nGPU\u30c7\u30d0\u30a4\u30b9\u306e\u4e8b\uff0e\n\u5229\u7528\u53ef\u80fd\u306a\u30a2\u30af\u30bb\u30e9\u30ec\u30fc\u30bf\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u3057\u3066\u53d6\u5f97\u3067\u304d\u307e\u3059\uff0e\n\n```cpp\n#include<iostream>\n#include<algorithm>\n#include<vector>\n\nusing concurrency::accelerator;\n\nstd::vector<accelerator> findAccelerators(){\n\tstd::vector<accelerator> accels;\n\taccels = accelerator::get_all();\n\n\tfor(int i=0; i<accels.size(); i++){\n\t\tstd::wcout << i+1 << \"th device = \" << accels[i].get_description() << \"\\n\";\n\t}\n\n    //emulator\u306e\u30a2\u30af\u30bb\u30e9\u30ec\u30fc\u30bf\u3092\u524a\u9664\u3057\u307e\u3059\n\taccels.erase(std::remove_if(accels.begin(),accels.end(),[](accelerator& accel){return accel.get_is_emulated();}),accels.end());\n\n\treturn accels;\n}\n```\n\n\u30aa\u30f3\u30dc\u30fc\u30c9\u3084\u30a8\u30df\u30e5\u30ec\u30fc\u30bf\uff0c\u30b0\u30e9\u30d5\u30a3\u30c3\u30af\u30dc\u30fc\u30c9\u542b\u3081\u3066\u30de\u30b7\u30f3\u5168\u4f53\u3067\u5229\u7528\u53ef\u80fd\u306aGPU\u3092get_all\u95a2\u6570\u3067\u53d6\u5f97\u3067\u304d\u307e\u3059\uff0e\n\u30a8\u30df\u30e5\u30ec\u30fc\u30bf\u306f\u30c7\u30d0\u30c3\u30b0\u30e2\u30fc\u30c9\u3067\u3057\u304b\u52d5\u304b\u306a\u3044\uff1f\u3000\u6b63\u4f53\u4e0d\u660e\u306e\u30c7\u30d0\u30a4\u30b9\u306a\u306e\u3067\u79c1\u306f\u3044\u3064\u3082\u9664\u5916\u3057\u3066\u3044\u307e\u3059\uff0eget_is_emulated\u95a2\u6570\u3067\u53d6\u5f97\u3067\u304d\u307e\u3059\uff0e\n\n\u53d6\u5f97\u3057\u305f\u30c7\u30d0\u30a4\u30b9\u306e\u60c5\u5831\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u95a2\u6570\u7b49\u3092\u7528\u3044\u3066\u53d6\u5f97\u3067\u304d\u307e\u3059\uff0e\n\n```cpp\nvoid getAccelDiscription(const accelerator& accel){\n\tstd::wcout << \"accelerator: \"<< accel.get_description() << std::endl;\n\tstd::cout << \"version of the accelerator: \" << accel.get_version() << std::endl;\n\tstd::cout << \"memory: \" << accel.get_dedicated_memory()/1024./1000. << \" [GB]\" << std::endl;;\n\tstd::cout << \"is supporting double precision: \" << (accel.get_supports_double_precision() ? \"yes\" : \"no\") << std::endl;\n\tstd::cout << \"is attached to a display: \" << (accel.get_has_display() ? \"yes\" : \"no\") << std::endl;\n\tstd::cout << \"is supporting cpu shared memory: \" << (accel.get_supports_cpu_shared_memory() ? \"yes\" : \"no\") << std::endl;\n\treturn;\n}\n```\n\n\u500d\u7cbe\u5ea6\u6d6e\u52d5\u70b9\u5c0f\u6570\u3092\u30b5\u30dd\u30fc\u30c8\u3057\u3066\u3044\u308b\u304b\uff0cCPU\u3068\u306e\u5171\u6709\u30e1\u30e2\u30ea\u3092\u30b5\u30dd\u30fc\u30c8\u3057\u3066\u3044\u308b\u304b\uff0c\u7b49\u306f\u51e6\u7406\u306b\u304a\u3044\u3066\u91cd\u8981\u306a\u60c5\u5831\u3068\u8a00\u3048\u308b\u304b\u3068.\n\u7279\u306b\u5171\u6709\u30e1\u30e2\u30ea\u306f\u540c\u671f\u306e\u30aa\u30fc\u30d0\u30fc\u30d8\u30c3\u30c9\u306b\u304a\u3044\u3066\u5f37\u3044\u30a2\u30c9\u30d0\u30f3\u30c6\u30fc\u30b8\u3092\u6301\u3064\u3068\u601d\u3044\u307e\u3059\uff0e\n\n\u30e1\u30e2\u30ea\u304c\u6700\u5927\u306e\u30a2\u30af\u30bb\u30e9\u30ec\u30fc\u30bf\u3092\u9078\u3076\u306e\u306f\u3053\u3093\u306a\u611f\u3058\u306e\u8a18\u8ff0\u306b\u306a\u308a\u307e\u3059\u306d\uff0e\n\n```cpp\nstd::vector<accelerator>::iterator getBiggestMemoryAccelerator(std::vector<accelerator>& accels){\n\treturn std::max_element(accels.begin(),accels.end(),[](const accelerator& rhs,const accelerator& lhs){return rhs.get_dedicated_memory() < lhs.get_dedicated_memory();});\n}\n```\n\n##\u30ab\u30fc\u30cd\u30eb\u5411\u3051\u30b3\u30f3\u30c6\u30ca\n\n###CPU\u30e1\u30e2\u30ea\u306e\u30ea\u30bd\u30fc\u30b9\u306eGPU\u3067\u306e\u5229\u7528\u65b9\u6cd5\n\nparallel_for_each\u95a2\u6570\u5185\u3067\u306f**\u30e1\u30e2\u30ea\u306b\u30a2\u30af\u30bb\u30b9\u3067\u304d\u307e\u305b\u3093\uff0e**\n\u6e21\u3059\u95a2\u6570\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306e\u4e2d\u306b\u30b3\u30d4\u30fc\u3059\u308b\u306a\u308a\uff0c\u30e9\u30e0\u30c0\u5f0f\u3067\u30b3\u30d4\u30fc\u30ad\u30e3\u30d7\u30c1\u30e3\u3092\u884c\u3046\u306a\u308a\u3057\u3066parallel_for_each\u5185\u3067GPU\u30e1\u30e2\u30ea\u3078\u306e\u30b3\u30d4\u30fc\u3092\u884c\u3046\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\uff0e\n\nparallel_for_each\u306f\u512a\u79c0\u3067\u3059\u306e\u3067\uff0c\u30c7\u30d0\u30a4\u30b9\u3092\u307e\u305f\u3044\u3060\u51e6\u7406\u3067\u3082\u540c\u671f\u51e6\u7406\u3092\u3057\u3066\u3044\u308b\u304b\u306e\u3088\u3046\u306b\u632f\u821e\u3063\u3066\u304f\u308c\u307e\u3059\uff0e\u3064\u307e\u308a\uff0cCPU\u5074\u3067\u30b9\u30ec\u30c3\u30c9\u3068\u6b62\u3081\u308b\u3068\u304b\uff0cGPU\u3068CPU\u9593\u306e\u30e1\u30e2\u30ea\u306e\u540c\u671f\u3092\u5f85\u3064\u3068\u304b\uff0c\u305d\u3046\u3044\u3063\u305f\u3053\u3068\u3092\u6c17\u306b\u3057\u305f\u51e6\u7406\u3092\u66f8\u304f\u5fc5\u8981\u306f\u3042\u308a\u307e\u305b\u3093\uff0e\n\u305f\u3060\u3057,parallel_for_each\u5185\u3067\u5b9f\u884c\u3055\u308c\u308b\u30ab\u30fc\u30cd\u30eb\u306e\u9806\u5e8f\u306f\u4fdd\u8a3c\u3055\u308c\u3066\u3044\u307e\u305b\u3093.\u3053\u306e\u3042\u305f\u308a\u306f\u666e\u901a\u306e\u4e26\u5217\u51e6\u7406\u3068\u4e00\u7dd2\u3067\u3059\u306d.\n\n\u57fa\u672c\u7684\u306a\u5909\u6570\u306f\u30e9\u30e0\u30c0\u5f0f\u306e\u30b3\u30d4\u30fc\u30ad\u30e3\u30d7\u30c1\u30e3\u3067\u4e8b\u8db3\u308a\u307e\u3059\u304c\uff0c**\u914d\u5217\u306e\u5834\u5408\u306f\u30dd\u30a4\u30f3\u30bf\u304c\u4f7f\u3048\u307e\u305b\u3093**\u306e\u3067\u4e00\u500b\u4e00\u500b\u30ad\u30e3\u30d7\u30c1\u30e3\u3059\u308b\u304b\uff0c\u3042\u308b\u3044\u306f\u5c02\u7528\u306eAMP\u306e\u30b3\u30f3\u30c6\u30ca\u3092\u4f7f\u3046\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\uff0e\n\nconcurrency::array\u304c\u305d\u308c\u306b\u8a72\u5f53\u3057\u307e\u3059\uff0e\n\u3053\u306e\u30b3\u30f3\u30c6\u30ca\u306f\u666e\u901a\u306e\u914d\u5217\u3068\u540c\u3058\u3088\u3046\u306b\u6271\u3048\u307e\u3059\u304c\uff0cGPU\u306e\u30e1\u30e2\u30ea\u306b\u8981\u7d20\u304c\u78ba\u4fdd\u3055\u308c\u307e\u3059\uff0e\n\n```cpp\ntemplate <\n   typename _Value_type,\n   int _Rank                     \n>\nfriend class array;\n```\n\n\u7b2c\u4e00\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u5f15\u6570\u306f\u578b\uff0c\u7b2c\u4e8c\u5f15\u6570\u306f**\u300c\u6b21\u5143\u300d**\u3067\u3059\uff0e\u8981\u7d20\u6570\u3067\u306f\u3042\u308a\u307e\u305b\u3093\uff0e\nstd::array\u3068\u6df7\u540c\u3057\u306a\u3044\u3088\u3046\u306b\uff0e\n\n\u307e\u305f\uff0c\u5404\u30b3\u30f3\u30c6\u30ca\u30fc\u3092GPU,CPU\u4e21\u65b9\u3067\u5229\u7528\u53ef\u80fd\u306b\u3059\u308b\u30e9\u30c3\u30d1\u30fc\u30b3\u30f3\u30c6\u30ca\u3067\u3042\u308barray_view\u3068\u3044\u3046\u3082\u306e\u304c\u5b58\u5728\u3057\u307e\u3059\uff0e\n\n```cpp\ntemplate <\n   typename _Value_type,\n   int _Rank = 1\n>\nclass array_view;\n```\n\n\u3053\u306e\u30e9\u30c3\u30d1\u30fc\u30b3\u30f3\u30c6\u30ca\u306f\u30e1\u30e2\u30ea\u3092\u53c2\u7167\u3057\uff0c\u305d\u306e\u4ef2\u4ecb\u3092\u306a\u3059\u30b3\u30f3\u30c6\u30ca\u3068\u3057\u3066\u6a5f\u80fd\u3057\u307e\u3059\uff0e\narray_view\u306b\u5bfe\u3059\u308b\u5909\u66f4\u306farray_view\u306e\u540c\u671f\u95a2\u6570\u306b\u3088\u3063\u3066\u30e1\u30e2\u30ea\u306e\u53c2\u7167\u5143\u306b\u540c\u671f\u3055\u308c\u307e\u3059\uff0e\u307e\u305f\u30c7\u30b9\u30c8\u30e9\u30af\u30bf\u3084\u7279\u5b9a\u306e\u6761\u4ef6\u3067\u3082\u540c\u671f\u304c\u884c\u308f\u308c\u308b\u3088\u3046\u3067\u3059\uff0e\n\n\u3053\u306e\u30e9\u30c3\u30d1\u30fc\u30b3\u30f3\u30c6\u30ca\u3092\u5229\u7528\u3059\u308b\u3053\u3068\u3067\uff0cCPU\u306e\u30ea\u30bd\u30fc\u30b9\u3092GPU\u3067\uff0cGPU\u306e\u30ea\u30bd\u30fc\u30b9\u3092CPU\u3067\u6271\u3046\u3053\u3068\u304c\u3067\u304d\u307e\u3059\uff0e\n\n\u4f8b\u3048\u3070\uff0cGPU\u306e\u30e1\u30e2\u30ea\u306b\u78ba\u4fdd\u3055\u308c\u305fconcurrency::array\u306b\u5bfe\u3057\u3066CPU\u5074\u304b\u3089\u30a2\u30af\u30bb\u30b9\u3059\u308b\u30b3\u30fc\u30c9\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u3082\u306e\u304c\u8003\u3048\u3089\u308c\u307e\u3059\uff0e\n\n```cpp\n#include\"amp.h\"\n#include<array>\n#include<iostream>\n\ntemplate<class T,int dim,class F>\nvoid accessArray(concurrency::array<T,dim>& vGArray,F&& function){\n\tconcurrency::array_view<T,dim> vGArrayView = vGArray; //concurrency::array\u306e\u30e9\u30c3\u30d1\u30fc\u3092\u4f5c\u6210\n\tfunction(vGArrayView); //array_view\u306fcpu\u5074\u304b\u3089\u30a2\u30af\u30bb\u30b9\u53ef\u80fd\n}\n\ntemplate<class T, int dim>\nstd::unique_ptr<concurrency::array<T, dim>> createArray(const concurrency::accelerator& accel, int size) {\n\treturn std::make_unique<concurrency::array<T, dim>>(size, accel.get_default_view());\n}\n\nint main() {\n\tconstexpr int dim = 1;\n\tconst int size = 100;\n\n\tconcurrency::accelerator accel = *getBiggestMemoryAccelerator(findAccelerators());\n\n\tauto vGArray(createArray<int, dim>(accel, size));\n\n\taccessArray(*vGArray, [&](auto& _array) {\n\t\tfor (int i = 0; i<size; i++)_array[i] = i;\n\t});\n\n    return 0;\n}\n```\n\namp\u95a2\u6570\u306e\u5236\u9650\u4e0a\uff0c**std::size_t\u306fconcurrency\u540d\u524d\u7a7a\u9593\u3067\u57fa\u672c\u7684\u306b\u4f7f\u308f\u308c\u3066\u3044\u306a\u3044**\u3053\u3068\u3082\u7559\u610f\u3057\u3066\u304a\u304f\u3068\u826f\u3044\u3067\u3057\u3087\u3046\uff0e\n\narray_view\u306f\u30b3\u30d4\u30fc\u30ad\u30e3\u30d7\u30c1\u30e3\u3092\u7528\u3044\u3066GPU\u306b\u8ee2\u9001\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\uff0e\nCPU\u5074\u3067\u78ba\u4fdd\u3057\u305f\u914d\u5217\u3092\u30ab\u30fc\u30cd\u30eb\u3067\u4f7f\u3044\u305f\u3044\u5834\u5408\u306f\u3001\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u30b3\u30fc\u30c9\u306b\u306a\u308b\u3067\u3057\u3087\u3046.\n\n```cpp\nint main() {\n\tconstexpr int dim = 1;\n\tconst int size = 100;\n\tstd::array<int,size> arr;\n\n\tconcurrency::accelerator accel = *getBiggestMemoryAccelerator(findAccelerators());\n\tconcurrency::extent<dim> ex;\n\tex[0] = size;\n\n\tconcurrency::array_view<int, dim> view(size,reinterpret_cast<int*>(&arr[0])); //iterator\u306b\u5bfe\u5fdc\u3057\u3066\u3044\u306a\u3044\u306e\u3067\u4ed5\u65b9\u306a\u304fbegin()\u3067\u306f\u306a\u304f\u30dd\u30a4\u30f3\u30bf\u3092\u30ad\u30e3\u30b9\u30c8\u3057\u3066\u307e\u3059\n\tparallel_for_each(accel.get_default_view(),\n\t\tex,\n\t\t[=](concurrency::index<dim> gindex) restrict(amp) {\n\t\tview[gindex] = 114514; //array_view\u306f\u30b3\u30d4\u30fc\u30ad\u30e3\u30d7\u30c1\u30e3\u53ef\u80fd\n\t}\n\t);\n\n\tview.synchronize(); //\u30e1\u30e2\u30ea\u53c2\u7167\u5143\u3068\u540c\u671f\u3057\u307e\u3059\n\n\tfor (int i = 0; i<size; i++) {\n\t\tstd::cout << arr[i] << \",\";\n\t}\n\tstd::cout << std::endl;\n\n\treturn 0;\n}\n\n```\n\n\u5168\u3066\u306e\u8981\u7d20\u3092\u9069\u5f53\u306a\u6570\u5b57\u3067\u521d\u671f\u5316\u3057\u3066\u3044\u307e\u3059.\n\n##index\u30af\u30e9\u30b9\n\n```cpp\ntemplate <\n   int _Rank\n>\nclass index;\n```\n\nN\u6b21\u5143\u7a7a\u9593\u306e\u8981\u7d20\u3092\u4e00\u610f\u306b\u53c2\u7167\u3059\u308b\u30d9\u30af\u30bf\u30fc\u30af\u30e9\u30b9\u3067\u3059\uff0e\n\u3053\u306e\u30af\u30e9\u30b9\u306fparallel_for_each\u306b\u6e21\u3055\u308c\u308b\u30ab\u30fc\u30cd\u30eb\u306e\u5f15\u6570\u306b\u306a\u308b\u308f\u3051\u3067\u3059\u304c\uff0c\u3053\u306e\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u304c\u30b9\u30ec\u30c3\u30c9\u756a\u53f7\u3068\u7d50\u3073\u3064\u3051\u3089\u308c\uff0c\u30c7\u30fc\u30bf\u306e\u4e26\u5217\u306e\u51e6\u7406\u304c\u5b9f\u73fe\u3055\u308c\u308b\u308f\u3051\u3067\u3059\uff0e\n\n\u591a\u6b21\u5143\u306earray_view\u306bindex\u3092\u7528\u3044\u3066\u30a2\u30af\u30bb\u30b9\u3059\u308b\u30b3\u30fc\u30c9\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3059.\n\n```cpp\n\ntemplate<class T,int Rank,typename... Args>\nT& accessArrayByIndex(const concurrency::array_view<T,Rank>& a,Args... indexes) restrict(amp)\n{\n\tstatic_assert(sizeof...(indexes) == Rank,\"number of index is incorrect\");\n\n\tconcurrency::index<Rank> idx(indexes...);\n\treturn a[idx];\n}\n\nint main(void){\n    constexpr int COLS=6,ROWS=4;\n\tstd::array<std::array<float,COLS>,ROWS> data={\n\t\t1,2,3,4,5,6,\n\t\t7,8,9,10,11,12,\n\t\t1,2,3,4,5,6,\n\t\t7,8,9,10,11,12\n\t};\n\n\tconcurrency::array_view<float,2> data_view(ROWS,COLS,reinterpret_cast<float*>(&data[0][0]));\n\t//print data_view[3][2] by index<2>;\n\tstd::cout << accessArrayByIndex(data_view,3,2);\n\tstd::cout << std::endl;\n    return 0;\n}\n```\n\n\u6b21\u5143\u306b\u304b\u304b\u308f\u3089\u305a\u3001**[]\u30aa\u30da\u30ec\u30fc\u30bf\u3067\u4e00\u610f\u306b\u8981\u7d20\u3092\u6307\u5b9a\u3067\u304d\u308b**\u306e\u304c\u5f37\u307f\u306a\u308f\u3051\u3067\u3059.\n\n\u3055\u3066,\u3053\u306e\u8fba\u308a\u3067\u5927\u4f53\u57fa\u672c\u7684\u306a\u8aac\u660e\u306f\u7d42\u308f\u308a\u307e\u3057\u305f.\n\u3053\u306e\u304f\u3089\u3044\u5206\u304b\u308c\u3070\u4e26\u5217\u51e6\u7406\u306f\u305f\u3044\u3066\u3044\u5b9f\u73fe\u3067\u304d\u308b\u3068\u601d\u3044\u307e\u3059.\n\n\u6700\u5f8c\u306b, \u300c\u30bf\u30a4\u30eb\u300d\u3068\u547c\u3070\u308c\u308b\u6a5f\u80fd\u3092\u4f7f\u3063\u3066, \u7206\u901f\u3067\u753b\u50cf\u51e6\u7406\u3092\u3084\u3063\u3066\u307f\u307e\u3059\u306d.\n\n\n# \u5fdc\u7528 \u30bf\u30a4\u30eb\u306b\u3088\u308b\u7206\u901f\u753b\u50cf\u51e6\u7406\n\n\u30bf\u30a4\u30eb\u3068\u306f, \u30b9\u30ec\u30c3\u30c9\u3092\u56db\u89d2\u5f62\u306e\u30b5\u30d6\u30bb\u30c3\u30c8\u306b\u5206\u5272\u3059\u308b\u6a5f\u80fd\u3067\u3059.\n\u591a\u6b21\u5143\u3067\u3082\u3067\u304d\u308b\u304b\u3068\u601d\u3044\u307e\u3059\u304c, \u4e8c\u6b21\u5143, \u4f8b\u3048\u3070\u753b\u50cf\u51e6\u7406\u3067\u8003\u3048\u308b\u3068\u308f\u304b\u308a\u3084\u3059\u3044\u3068\u601d\u3044\u307e\u3059.\n\n\u4f8b\u3048\u30709*9\u30d4\u30af\u30bb\u30eb\u306e\u753b\u50cf\u304c\u3042\u3063\u305f\u3068\u3057\u3066, \u305d\u306e\u753b\u50cf\u30923*3\u306e4\u3064\u306e\u30b5\u30d6\u30bb\u30c3\u30c8\u306b\u5206\u5272\u3057\u3066\u51e6\u7406\u3092\u3057\u307e\u3059.\n\u3053\u306e\u30b5\u30d6\u30bb\u30c3\u30c8\u5316\u306b\u3088\u3063\u3066\u4f55\u304c\u5f97\u306a\u306e\u304b\u3068\u3044\u3046\u3068, \u305d\u306e\u30b5\u30d6\u30bb\u30c3\u30c8\u5358\u4f4d\u3067\u9759\u7684\u5909\u6570\u3092\u6271\u3046\u3053\u3068\u304c\u51fa\u6765, \u540c\u3058\u8a08\u7b97\u3092\u3057\u306a\u304f\u3066\u6e08\u3080\u3088\u3046\u306b\u306a\u3063\u305f\u308a\u3057\u307e\u3059.\n\n\u5b9f\u969b\u306b\u753b\u50cf\u3092\u9069\u5207\u306a\u30b5\u30a4\u30ba\u306e\u30b5\u30d6\u30bb\u30c3\u30c8\u306b\u5206\u5272\u3057\u3066, \u305d\u306e\u30b5\u30d6\u30bb\u30c3\u30c8\u5358\u4f4d\u3067\u8272\u306e\u5e73\u5747\u3092\u3068\u308b\u51e6\u7406\u3092\u3057\u3066\u307f\u307e\u3057\u3087\u3046.\n\u3059\u306a\u308f\u3061, \u30e2\u30b6\u30a4\u30af\u51e6\u7406\u3067\u3059.\n1\u3064\u306e\u30b5\u30d6\u30bb\u30c3\u30c8\u304c\u30e2\u30b6\u30a4\u30af\u5f8c\u306e\u753b\u50cf\u306e\u5927\u304d\u306a\u30d4\u30af\u30bb\u30eb\u306b\u76f8\u5f53\u3057\u307e\u3059.\n\n```cpp:index/tiled_index_modules.hpp\ntemplate<typename T,int TILE_COLS, int TILE_ROWS>\nstd::unique_ptr<T[]> convolutionCalculateAverage(T* data, int rows, int cols,const concurrency::accelerator& accel)\n{\n\tstd::unique_ptr<T[]> average(new T[rows*cols]);\n\n\tconcurrency::array_view<T, 2> data_view(rows, cols, data);\n\tconcurrency::array_view<float, 2> average_view(rows, cols, reinterpret_cast<float*>(average.get()));\n\n\tstd::cout << \"\\n-------------------parallel calculation-----------------\" << std::endl;\n\tstd::cout << \"rows/cols \" << rows << \"/\" << cols << std::endl;\n\n\taverage_view.discard_data();\n\tparallel_for_each(\n\t\tdata_view.get_extent().tile<TILE_ROWS, TILE_COLS>(),\n\t\t[=](concurrency::tiled_index<TILE_ROWS, TILE_COLS> idx) restrict(amp) {\n\t\ttile_static T nums[TILE_ROWS][TILE_COLS];\n\t\tnums[idx.local[1]][idx.local[0]] = data_view[idx.global];\n\t\tidx.barrier.wait();\n\t\tT sum=0;\n\t\tfor (int i = 0; i<TILE_ROWS; i++) {\n\t\t\tfor (int j = 0; j<TILE_COLS; j++) {\n\t\t\t\tsum += nums[i][j];\n\t\t\t}\n\t\t}\n\t\taverage_view[idx.global] = sum / static_cast<T>(TILE_ROWS*TILE_COLS);\n\t}\n\t);\n\taverage_view.synchronize();\n\n\treturn std::move(average);\n}\n```\n\n```cpp:main.cpp\n#include\"opencv_include.h\" //\u3053\u308c\u306fopencv\u306e\u74b0\u5883\u69cb\u7bc9\u7528\u306e\u30d8\u30c3\u30c0\u3067\u3059\n#include\"amp.h\"\n#include\"index/tiled_index_modules.hpp\"\n#include<iostream>\n#include<chrono>\n\nvoid image_processing_test(concurrency::accelerator& accel)\n{                                                                                                                                                                                    \n\tcv::Mat input;\n\tcv::Mat_<float> gray,gray_cpu;\n\tinput = cv::imread(\"image_middle.jpg\",cv::IMREAD_GRAYSCALE);\n\tinput.convertTo(gray, CV_32FC1);\n\tinput.convertTo(gray_cpu, CV_32FC1);\n\n\tfor (int rows = 0; rows < input.rows; rows++) {\n\t\tfor (int cols = 0; cols < input.cols; cols++) {\n\t\t\tgray.at<float>(rows, cols) /= 255.;\n\t\t}\n\t}\n\tstd::cout << gray.elemSize1() << std::endl;\n\tstd::cout << gray.channels() << std::endl;\n\tstd::cout << gray.step << \"/\" << gray.elemSize() * gray.cols << std::endl;\n\tstd::cout << gray.isContinuous() << std::endl;\n\n\tconstexpr int convolution_size = 15;\n\t{\n\t\tstd::chrono::time_point<std::chrono::system_clock> now = std::chrono::system_clock::now();\n\t\tfor (int rows = 0; rows < gray.rows; rows++) {\n\t\t\tfor (int cols = 0; cols < gray.cols; cols++) {\n\n\t\t\t\tint sum;\n\n\t\t\t\tfor (int y = -convolution_size; y <= convolution_size; y++) {\n\t\t\t\t\tfor (int x = -convolution_size; x <= convolution_size; x++) {\n\t\t\t\t\t\tif (rows + y >= 0 && rows + y < gray.rows && cols + x >= 0 && cols + x < gray.cols)\n\t\t\t\t\t\t\tsum += gray.data[(rows + y) * gray.step + (cols + x) * gray.elemSize()];\n\t\t\t\t\t\telse sum += gray.data[rows * gray.step + cols * gray.elemSize()];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tgray_cpu.data[rows * gray.step + cols * gray.elemSize()] = sum / pow(2 * convolution_size + 1, 2);\n\n\t\t\t}\n\t\t}\n\t\tstd::chrono::time_point<std::chrono::system_clock> after = std::chrono::system_clock::now();\n\t\tstd::cout << \"----------------cpu calculation succeeded---------------\" << std::endl;\n\t\tstd::chrono::duration<double> diff = after - now;\n\t\tstd::cout << \"score \" << diff.count() << \"[s]\" << std::endl;\n\t}\n\n\t{\n\t\tstd::chrono::time_point<std::chrono::system_clock> now = std::chrono::system_clock::now();\n\t\tauto result = convolutionCalculateAverage<float, convolution_size*2, convolution_size*2>(reinterpret_cast<float*>(&gray.data[0]), input.rows, input.cols, accel);\n\t\tstd::chrono::time_point<std::chrono::system_clock> after = std::chrono::system_clock::now();\n\n\t\tstd::cout << \"----------------gpu calculation succeeded---------------\" << std::endl;\n\n\t\tstd::chrono::duration<double> diff = after - now;\n\n\t\tstd::cout << \"score \" << diff.count() << \"[s]\" << std::endl;\n\n\t\tfor (int rows = 0; rows < input.rows; rows++) {\n\t\t\tfor (int cols = 0; cols < input.cols; cols++) {\n\t\t\t\tgray.at<float>(rows, cols) = result[rows*input.cols + cols];\n\t\t\t}\n\t\t}\n\t}\n\n\tcv::namedWindow(\"window\", CV_WINDOW_AUTOSIZE);\n\tcv::namedWindow(\"window2\", CV_WINDOW_AUTOSIZE);\n\n\tcv::imshow(\"window\", gray);\n\tcv::imshow(\"window2\", input);\n\n\tcv::waitKey(0);\n}\n```\n\ncpu\u3068gpu\u4e21\u65b9\u3067\u8a08\u7b97\u3057\u3066, \u30b9\u30b3\u30a2\u3092\u8868\u793a\u3057\u305f\u308a\u3057\u3066\u307e\u3059.\n\n\u8272\u3005\u8aac\u660e\u3057\u3066\u306a\u3044\u95a2\u6570, \u30af\u30e9\u30b9\u304c\u3042\u308a\u307e\u3059\u304c, \u75b2\u308c\u3061\u3083\u3063\u305f\u306e\u3067\u958b\u767a\u5143\u306emicrosoft\u3055\u3093\u306b\u805e\u3044\u3066\u304f\u3060\u3055\u3044.\n\n\u305f\u3060\u3057,cv::Mat\u30af\u30e9\u30b9\u306b\u304a\u3044\u3066,\u914d\u5217\u306e\u6b21\u5143\u6570\u30922\u6b21\u5143\u306b\u3059\u308b\u305f\u3081\u30b0\u30ec\u30fc\u30b9\u30b1\u30fc\u30eb\u306b\u3057\u3066\u3044\u308b\u3053\u3068,\nunsigned char\u306fC++ AMP\u306f\u5bfe\u5fdc\u3057\u3066\u3044\u306a\u3044\u306e\u3067, \u753b\u7d20\u306e\u30b5\u30a4\u30ba\u3092float\u306b\u5909\u63db\u3057\u3066\u3044\u308b\u3053\u3068\u306b\u6ce8\u610f\u3057\u3066\u304f\u3060\u3055\u3044.\n\n\u5b9f\u884c\u7d50\u679c\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306b.\n\n\u5909\u63db\u524d\n![image_gray.jpg](https://qiita-image-store.s3.amazonaws.com/0/64357/255519bc-2a18-0ac4-138c-5d607974cdf0.jpeg)\n\n\u5909\u63db\u5f8c\n![image_result.jpg](https://qiita-image-store.s3.amazonaws.com/0/64357/1391befe-5773-d5eb-dcf7-55e1e649bbe4.jpeg)\n\n\u51fa\u529b\n\n```\n0th device = NVIDIA GeForce GTX 670\n1th device = Microsoft Basic Render Driver\n2th device = Software Adapter\n3th device = CPU accelerator\naccelerator: NVIDIA GeForce GTX 670\nversion of the accelerator: 720896\nmemory: 1.98681 [GB]\nis supporting double precision: yes\nis attached to a display: yes\nis supporting cpu shared memory: yes\n4\n1\n5760/5760\n1\n----------------cpu calculation succeeded---------------\nscore 1.94933[s]\n-------------------parallel calculation----------------\nrows/cols 810/1440\n----------------gpu calculation succeeded---------------\nscore 0.0314382[s]\n```\n\n\u4ee5\u4e0a\u3067\u3059.\n\n\u5225\u306e\u74b0\u5883(GTX 630M)\u3067\u3082\u8a66\u3057\u307e\u3057\u305f\u304c, CPU\u306e\u5927\u4f5350~60\u500d\u306e\u30b9\u30b3\u30a2\u306b\u843d\u3061\u7740\u304f\u3088\u3046\u3067\u3059.\n\n\u753b\u50cf\u306f\u4fb5\u7565\uff01\u30a4\u30ab\u5a18\u3088\u308a\u5f15\u7528\u3057\u307e\u3057\u305f.\n\n\u3053\u306e\u8a18\u4e8b\u3067\u4f7f\u7528\u3057\u305f\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u306a\u3069\u306fgithub\u3067\u516c\u958b\u3057\u3066\u3044\u307e\u3059.\n[Riyaaaaa/Gpu-Accelerated-Cpp](https://github.com/Riyaaaaa/GPU-Accelerated-Cpp)\n\n\u660e\u65e5\u306fmitsutaka-takeda\u3055\u3093\u3067\u3059.\u3088\u308d\u3057\u304f\u304a\u306d\u304c\u3044\u3057\u307e\u3059\uff01\n", "tags": ["C++", "C++AMP", "GPGPU"]}