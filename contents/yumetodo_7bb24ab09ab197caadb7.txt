{"context": "\n\n\u306f\u3058\u3081\u306b\nVisual Studio \u3082\u6700\u8fd1\u306f\u3060\u3044\u3076C++\u6a19\u6e96\u3078\u306e\u6e96\u62e0\u304c\u9032\u3093\u3067\u3044\u3066\u3001Visual Studio \"15\" Preview 5\u3067\u306fC++14\u306econstexpr\u3082\u4f7f\u3048\u308b\u305d\u3046\u3067\u3059\u306d\u3002\n\u3057\u304b\u3057\u307e\u3060Visual Studio 2013\u306e\u30b5\u30dd\u30fc\u30c8\u306f\u5207\u308c\u306a\u3044\u3001\u3068\u3044\u3046\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u3082\u591a\u3044\u30cf\u30ba\u3002\n\u3068\u3053\u308d\u3067\u3001C++11\u3067std::error_code, std::error_category, std::system_category(), std::system_error\u3068\u3044\u3063\u305f\u30af\u30e9\u30b9\u30fb\u95a2\u6570\u304c\u8ffd\u52a0\u3055\u308c\u3001Win32API\u306e\u30a8\u30e9\u30fc\u30b3\u30fc\u30c9\u306e\u6587\u5b57\u5217\u5316\u306bFormatMessage\u3092\u81ea\u529b\u3067\u547c\u3073\u51fa\u3055\u306a\u304f\u3066\u826f\u304f\u306a\u308a\u307e\u3057\u305f\u3002\n\nFormatMessage\u3092\u547c\u3070\u306a\u304f\u3066\u3044\u3044\u7d20\u6674\u3089\u3057\u3044\u4e16\u754c\nusing std::system_category;\nusing std::system_error;\nconst auto er = RegOpenKeyEx(parent_key_handle, sub_key_root, 0, r, &this->key);\nif (ERROR_SUCCESS != er) {\n    throw system_error(std::error_code(er, system_category()), \"RegOpenKeyEx:(\" + std::to_string(er) + ')');\n}\n\n\n\n\u3067\u3082\u306d\u3001\u305d\u308cVS2013\u3067\u306f\u4f7f\u3048\u306a\u3044\u3093\u3060\n\u6b8b\u5ff5\u306a\u304c\u3089VS2013\u3067\u306f\u5b9f\u88c5\u304c\u9014\u4e2d\u3067\u4f7f\u3044\u7269\u306b\u306a\u308a\u307e\u305b\u3093\u3002\n\u3044\u3084\u3001\u307e\u3042VS2015\u3067\u3082\u3076\u3063\u58ca\u308c\u3066\u308b\u3058\u3083\u306d\u30fc\u304b\uff01\u3068\u3044\u3046\u8a71\u3082\u3042\u308a\u307e\u3059\u304c\nVS2015\u306estd::error_category\u304c\u5947\u60f3\u5929\u5916\u306a\u4ef6\u306b\u3064\u3044\u3066\n\u898f\u683c\u306b\u6cbf\u3063\u3066\u3044\u306a\u3044\u3068\u3044\u3046\u3060\u3051\u3067\u52d5\u4f5c\u7684\u306b\u306f\u671f\u5f85\u3057\u305f\u3082\u306e\u3067\u3059\u3057\u304a\u5bff\u53f8\u3002\n\n\u3058\u3083\u3042\u81ea\u4f5c\u3057\u3088\u3046\n#include <Windows.h>\n#include <string>\n#include <stdexcept>\n#include <system_error>\n#if defined(_MSC_VER) && _MSC_VER < 1900\nstd::string format_message(DWORD lasterr) {\n    char* buf = nullptr;\n    const DWORD len = FormatMessageA(\n        FORMAT_MESSAGE_ALLOCATE_BUFFER | FORMAT_MESSAGE_FROM_SYSTEM | FORMAT_MESSAGE_ARGUMENT_ARRAY,\n        nullptr,\n        lasterr,\n        LANG_NEUTRAL,\n        reinterpret_cast<LPSTR>(&buf),\n        0,\n        nullptr\n    );\n    DWORD i = (len < 3) ? 0 : len - 3;\n    for (; '\\r' != buf[i] && '\\n' != buf[i] && '\\0' != buf[i]; i++);//\u6539\u884c\u6587\u5b57\u524a\u9664\n    buf[i] = '\\0';\n    std::string ret;\n    try{\n        ret = buf;//\u30a8\u30e9\u30fc\u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u30b3\u30d4\u30fc\n    }\n    catch(...){//\u3053\u3053\u3067\u4f8b\u5916\u3092\u6295\u3052\u308b\u3088\u308a\u306f\u30a8\u30e9\u30fc\u30e1\u30c3\u30bb\u30fc\u30b8\u306a\u3057\u306e\u307b\u3046\u304c\u826f\u3044\u306e\u3067\u63e1\u308a\u3064\u3076\u3059\n    }\n    LocalFree(buf);//FormatMessageA\u3067FORMAT_MESSAGE_ALLOCATE_BUFFER\u3092\u6307\u5b9a\u3057\u305f\u306e\u3067\u5fc5\u305a\u958b\u653e\n    return ret;\n}\nusing std::error_category;\nclass system_error_category_c : public error_category { // categorize an operating system error\npublic:\n    system_error_category_c() : error_category() {}\n    virtual const char *name() const { return \"system\"; }\n    virtual std::string message(int ec) const\n    {\n        try {\n            return format_message(ec);\n        }\n        catch (...) {\n            return \"unknown error\";\n        }\n    }\n};\nnamespace detail {\n    template<typename T> T& put_on_static_storage() {\n        static T storage;\n        return storage;\n    }\n}\nerror_category& system_category() {\n    return detail::put_on_static_storage<system_error_category_c>();\n}\nusing std::runtime_error;\nclass system_error : public runtime_error\n{\npublic:\n    system_error(std::error_code ec, const std::string& m)\n        : ec_(ec), runtime_error((m.empty()) ? ec.message() : m + \": \" + ec.message())\n    {}\n    system_error(std::error_code ec) : system_error(ec, \"\") {}\n    system_error(std::error_code ec, const char *m) : system_error(ec, std::string(m)) {}\n    system_error(int e, const error_category& erct) : system_error(e, erct, \"\") {}\n    system_error(int e, const error_category& erct, const std::string& m) : system_error(std::error_code(e, erct), m) {}\n    system_error(int e, const error_category& erct, const char *m) : system_error(e, erct, std::string(m)) {}\n    const std::error_code& code() const { return ec_; }\nprivate:\n    std::error_code ec_;\n};\n#else\nusing std::system_category;\nusing std::system_error;\n#endif\n\n\n\u4f7f\u7528\u4f8b\nhttps://github.com/yumetodo/windows_registry_manager/blob/master/src/registry_key.cpp\n# \u306f\u3058\u3081\u306b\n\nVisual Studio \u3082\u6700\u8fd1\u306f\u3060\u3044\u3076C++\u6a19\u6e96\u3078\u306e\u6e96\u62e0\u304c\u9032\u3093\u3067\u3044\u3066\u3001Visual Studio \"15\" Preview 5\u3067\u306fC++14\u306econstexpr\u3082\u4f7f\u3048\u308b\u305d\u3046\u3067\u3059\u306d\u3002\n\n\u3057\u304b\u3057\u307e\u3060Visual Studio 2013\u306e\u30b5\u30dd\u30fc\u30c8\u306f\u5207\u308c\u306a\u3044\u3001\u3068\u3044\u3046\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u3082\u591a\u3044\u30cf\u30ba\u3002\n\n\u3068\u3053\u308d\u3067\u3001C++11\u3067[``std::error_code``](http://cpprefjp.github.io/reference/system_error/error_code.html), [``std::error_category``](http://cpprefjp.github.io/reference/system_error/error_category.html), [``std::system_category()``](http://cpprefjp.github.io/reference/system_error/system_category.html), [``std::system_error``](http://cpprefjp.github.io/reference/system_error/system_error.html)\u3068\u3044\u3063\u305f\u30af\u30e9\u30b9\u30fb\u95a2\u6570\u304c\u8ffd\u52a0\u3055\u308c\u3001Win32API\u306e\u30a8\u30e9\u30fc\u30b3\u30fc\u30c9\u306e\u6587\u5b57\u5217\u5316\u306b``FormatMessage``\u3092\u81ea\u529b\u3067\u547c\u3073\u51fa\u3055\u306a\u304f\u3066\u826f\u304f\u306a\u308a\u307e\u3057\u305f\u3002\n\n```cpp:FormatMessage\u3092\u547c\u3070\u306a\u304f\u3066\u3044\u3044\u7d20\u6674\u3089\u3057\u3044\u4e16\u754c\nusing std::system_category;\nusing std::system_error;\nconst auto er = RegOpenKeyEx(parent_key_handle, sub_key_root, 0, r, &this->key);\nif (ERROR_SUCCESS != er) {\n\tthrow system_error(std::error_code(er, system_category()), \"RegOpenKeyEx:(\" + std::to_string(er) + ')');\n}\n```\n\n# \u3067\u3082\u306d\u3001\u305d\u308cVS2013\u3067\u306f\u4f7f\u3048\u306a\u3044\u3093\u3060\n\n\u6b8b\u5ff5\u306a\u304c\u3089VS2013\u3067\u306f\u5b9f\u88c5\u304c\u9014\u4e2d\u3067\u4f7f\u3044\u7269\u306b\u306a\u308a\u307e\u305b\u3093\u3002\n\n\u3044\u3084\u3001\u307e\u3042VS2015\u3067\u3082\u3076\u3063\u58ca\u308c\u3066\u308b\u3058\u3083\u306d\u30fc\u304b\uff01\u3068\u3044\u3046\u8a71\u3082\u3042\u308a\u307e\u3059\u304c\n[VS2015\u306estd::error_category\u304c\u5947\u60f3\u5929\u5916\u306a\u4ef6\u306b\u3064\u3044\u3066](http://qiita.com/yumetodo/items/a184d70a18d4d9a9beea)\n\u898f\u683c\u306b\u6cbf\u3063\u3066\u3044\u306a\u3044\u3068\u3044\u3046\u3060\u3051\u3067\u52d5\u4f5c\u7684\u306b\u306f\u671f\u5f85\u3057\u305f\u3082\u306e\u3067\u3059\u3057\u304a\u5bff\u53f8\u3002\n\n# \u3058\u3083\u3042\u81ea\u4f5c\u3057\u3088\u3046\n\n```cpp\n#include <Windows.h>\n#include <string>\n#include <stdexcept>\n#include <system_error>\n#if defined(_MSC_VER) && _MSC_VER < 1900\nstd::string format_message(DWORD lasterr) {\n    char* buf = nullptr;\n    const DWORD len = FormatMessageA(\n        FORMAT_MESSAGE_ALLOCATE_BUFFER | FORMAT_MESSAGE_FROM_SYSTEM | FORMAT_MESSAGE_ARGUMENT_ARRAY,\n        nullptr,\n        lasterr,\n        LANG_NEUTRAL,\n        reinterpret_cast<LPSTR>(&buf),\n        0,\n        nullptr\n    );\n    DWORD i = (len < 3) ? 0 : len - 3;\n    for (; '\\r' != buf[i] && '\\n' != buf[i] && '\\0' != buf[i]; i++);//\u6539\u884c\u6587\u5b57\u524a\u9664\n    buf[i] = '\\0';\n    std::string ret;\n    try{\n        ret = buf;//\u30a8\u30e9\u30fc\u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u30b3\u30d4\u30fc\n    }\n    catch(...){//\u3053\u3053\u3067\u4f8b\u5916\u3092\u6295\u3052\u308b\u3088\u308a\u306f\u30a8\u30e9\u30fc\u30e1\u30c3\u30bb\u30fc\u30b8\u306a\u3057\u306e\u307b\u3046\u304c\u826f\u3044\u306e\u3067\u63e1\u308a\u3064\u3076\u3059\n    }\n    LocalFree(buf);//FormatMessageA\u3067FORMAT_MESSAGE_ALLOCATE_BUFFER\u3092\u6307\u5b9a\u3057\u305f\u306e\u3067\u5fc5\u305a\u958b\u653e\n    return ret;\n}\nusing std::error_category;\nclass system_error_category_c : public error_category {\t// categorize an operating system error\npublic:\n    system_error_category_c() : error_category() {}\n    virtual const char *name() const { return \"system\"; }\n    virtual std::string message(int ec) const\n    {\n        try {\n            return format_message(ec);\n        }\n        catch (...) {\n            return \"unknown error\";\n        }\n    }\n};\nnamespace detail {\n    template<typename T> T& put_on_static_storage() {\n        static T storage;\n        return storage;\n    }\n}\nerror_category& system_category() {\n    return detail::put_on_static_storage<system_error_category_c>();\n}\nusing std::runtime_error;\nclass system_error : public runtime_error\n{\npublic:\n    system_error(std::error_code ec, const std::string& m)\n        : ec_(ec), runtime_error((m.empty()) ? ec.message() : m + \": \" + ec.message())\n    {}\n    system_error(std::error_code ec) : system_error(ec, \"\") {}\n    system_error(std::error_code ec, const char *m) : system_error(ec, std::string(m)) {}\n    system_error(int e, const error_category& erct) : system_error(e, erct, \"\") {}\n    system_error(int e, const error_category& erct, const std::string& m) : system_error(std::error_code(e, erct), m) {}\n    system_error(int e, const error_category& erct, const char *m) : system_error(e, erct, std::string(m)) {}\n    const std::error_code& code() const { return ec_; }\nprivate:\n    std::error_code ec_;\n};\n#else\nusing std::system_category;\nusing std::system_error;\n#endif\n```\n\n# \u4f7f\u7528\u4f8b\n\nhttps://github.com/yumetodo/windows_registry_manager/blob/master/src/registry_key.cpp\n\n", "tags": ["C++11", "C++", "VisualStudio2013"]}