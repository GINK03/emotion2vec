{"context": "\n\n\u306f\u3058\u3081\u306b\nHTTP\u306eJSON API\u306e\u30ec\u30b9\u30dd\u30f3\u30b9\u3092Object Mapper\u3067\u30de\u30c3\u30d4\u30f3\u30b0\u3059\u308b\u3068\u3053\u308d\u307e\u3067\u3001\nRxSwift\u3067\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u3092\u66f8\u3044\u3066\u307f\u308b\n\u30a8\u30f3\u30c9\u30dd\u30a4\u30f3\u30c8\u306fhttpbin\nhttps://httpbin.org/ip\n\n\u5bfe\u8c61\u306eJSON\n\nresponse.json\n{\n  \"origin\": \"127.0.0.1\"\n}\n\n\n\nObjectMapper\u306e\u30de\u30c3\u30d4\u30f3\u30b0\u30af\u30e9\u30b9\n\nHttpbinIp.swift\nimport ObjectMapper\n\nclass HttpbinIp: Mappable {\n\n    var origin: String?\n\n    required init?(map: Map){\n    }\n\n    func mapping(map: Map) {\n        origin<-map[\"origin\"]\n    }\n}\n\n\n\nURLComponents\u30a8\u30af\u30b9\u30c6\u30f3\u30b7\u30e7\u30f3\nhttps://httpbin.org \u306b\u30a2\u30af\u30bb\u30b9\u3059\u308b\nURLComponents\u3092\u4f5c\u6210\u3057\u3066\u304a\u304f\n\nHttpClient+UrlComponents.swift\nextension URLComponents {\n\n    static func httpbin(_ path_:String) -> URLComponents {\n        var res = URLComponents()\n        res.scheme = \"https\"\n        res.host = \"httpbin.org\"\n        res.path = path_\n        return res\n    }\n\n    static func httpbin(_ path_:String, query_:[URLQueryItem] ) -> URLComponents {\n        var res = URLComponents()\n        res.scheme = \"http\"\n        res.host = \"httpbin.org\"\n        res.path = path_\n        res.queryItems = query_\n        return res\n    }\n\n}\n\n\n\nHTTP\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\n\nHTTPClient.swift\nimport UIKit\nimport Alamofire\nimport RxSwift\nimport RxCocoa\nimport ObjectMapper\n\nclass HTTPClient{\n\n    func request(\n        method: Alamofire.HTTPMethod,\n        path: String,\n        parameters: [String: Any]? = nil\n        ) -> Observable<DataResponse<Any>> {\n        return Observable.create { observer in\n            let req = self.request_base(\n                method: method,\n                urlComponents: URLComponents.httpbin(path),\n                parameters: parameters)\n                .responseJSON { response in\n                    observer.onNext(response)\n                    observer.onCompleted()\n            }\n\n            return Disposables.create(with:){\n                req.cancel()\n            }\n        }\n    }\n\n    func map<T: Mappable>(response:DataResponse<Any>\n        ) -> Observable<T> {\n        return Observable.create { observer in\n            if let m: T = Mapper<T>().map(JSONObject: response.value){\n                observer.onNext(m)\n                observer.onCompleted()\n            }\n            observer.onError(HttpClientError.jsonSerializationFailed.error)\n            return Disposables.create(with:){\n\n            }\n        }\n    }\n}\n\n\n\n\n\u547c\u3073\u51fa\u3057\u4f8b\n\nSomeViewController.swift\n    func getIp() -> Observable<DataResponse<Any>>{\n        return HTTPClient().request(\n            method: .get,\n            path: \"/ip\"\n        )\n    }\n\n    func hoge(){\n        getIp()\n            .flatMap({ it in\n                self.map(response: it)\n            })\n            .subscribe( onNext: { it in\n                print(it)\n            },onError:{ err in\n                print(\"err\",err)\n            }).addDisposableTo(disposeBag)\n    }\n\n\n\n\u30a8\u30e9\u30fc\u30cf\u30f3\u30c9\u30ea\u30f3\u30b0\nstatus code 500\u304c\u8fd4\u3063\u3066\u304d\u305f\u6642\u306e\u30a8\u30e9\u30fc\u51e6\u7406\u3092\u66f8\u3044\u3066\u307f\u308b\nhttps://httpbin.org/status/500\n\n\u30a8\u30e9\u30fc\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\n\nHttpClientError.swift\npublic enum HttpError: Error {\n    case responseSerializationFailed    \n    case statusCodeValidationFailed     \n    case dataSerializationFailed       \n    case jsonSerializationFailed\n}\n\n\n\n\u547c\u3073\u51fa\u3057\u4f8b\n\nSomeViewController.swift\n    func status500() -> Observable<DataResponse<Any>>{\n        return HTTPClient().request(\n            method: .get,\n            path: \"/status/500\"\n        )\n    }\n\n    func someFunction(){\n        let status = status500()\n            .flatMap { it -> Observable<DataResponse<Any>> in\n            if(it.response?.statusCode == 500){\n                return Observable.error(HttpError.statusCodeValidationFailed)\n            }\n            return Observable.just(it)\n        }\n        status.subscribe(onNext: { (it) in\n            print(it)\n        }, onError: { (err) in\n            if let error = err as? HttpError{\n                switch error {\n                case .statusCodeValidationFailed:\n                    print(\"status code validation failed \\(error)\")\n                default:\n                    print(\"other HttpClientError error \\(error)\")\n                }\n            }else{\n                print(\"unknown error \\(err)\")\n            }\n        }).addDisposableTo(disposeBag)\n\n    }\n\n\n\n\n\n\nRxSwift\u306e\u4fbf\u5229\u306a\u6a5f\u80fd\n\ncombineLatest\u3067\u8907\u6570\u306e\u30ec\u30b9\u30dd\u30f3\u30b9\u3092\u307e\u3068\u3081\u308b\nReactiveX - CombineLatest operator\n\u8907\u6570\u306eobservable\u306e\u7d50\u679c\uff08\u306e\u6700\u65b0\u306e\u5024\uff09\u3092\u307e\u3068\u3081\u308b\u3053\u3068\u304c\u3067\u304d\u308b\nhttpbin.org/get\u306borigin\u3068\u3044\u3046\u30d7\u30ed\u30d1\u30c6\u30a3\u304c\u3042\u308b\u3001\n\nget.json\n{\n  \"args\": {}, \n  \"headers\": { [\u7701\u7565]\n  }, \n  \"origin\": \"127.0.0.1\", \n  \"url\": \"http://httpbin.org/get\"\n}\n\n\n\u5148\u306ehttpbin.org/ip\u306e\u30d7\u30ed\u30d1\u30c6\u30a3ip\u3068\n\u540c\u3058\u6587\u5b57\u5217\u304c\u304b\u3069\u3046\u304b\u5224\u5b9a\u3059\u308b\u30b9\u30c8\u30ea\u30fc\u30e0\u3092\u4f5c\u3063\u3066\u307f\u308b\n\u30a8\u30f3\u30c9\u30dd\u30a4\u30f3\u30c8\u9055\u3044\u306eobservable\u3092\u7528\u610f\u3057\u3066...\n\nSomeViewController.swift\n    func getGet() -> Observable<DataResponse<Any>>{\n        return HTTPClient().request(\n            method: .get,\n            path: \"/get\"\n        )\n    }\n\n\n\u30de\u30c3\u30d4\u30f3\u30b0\u30af\u30e9\u30b9\u3092\u7528\u610f\u3057\u3066...\n(\u30ad\u30fc\u540d\u304c\u540c\u3058\"origin\"\u3060\u3063\u305f\u306e\u3067\u672c\u5f53\u306f\u5fc5\u8981\u7121\u3044\u304c\u3001\u8aac\u660e\u306e\u305f\u3081)\n\nHttpbinIp.swift\nimport ObjectMapper\n\nclass HttpbinGet: Mappable {\n\n    var url: String?\n    var origin: String?\n\n    required init?(map: Map) {\n    }\n\n    func mapping(map: Map) {\n        url<-map[\"url\"]\n        origin<-map[\"origin\"]\n    }\n}\n\n\ncombineLatest\u3067\u305d\u308c\u305e\u308c\u306e\u7d50\u679c\u3092\u53d6\u5f97\u3057\u3001\u6bd4\u8f03\u3001\u30b9\u30c8\u30ea\u30fc\u30e0\u3068\u3057\u3066\u7d50\u679c\u3092\u8fd4\u3059\n\nSomeViewController.swift\n    func otherFunction(){\n        let gotIp = getIp()\n            .flatMap({ it -> Observable<HttpbinIp> in\n                self.map(response: it)\n            })\n\n        let gotGet = getGet()\n            .flatMap({ it -> Observable<HttpbinGet> in\n                self.map(response: it)\n            })\n\n        let combined = Observable.combineLatest(gotIp,gotGet) { (gotIp_, gotGet_) -> Bool in\n            if(gotIp_.origin == gotGet_.origin){\n                return true\n            }\n            return false\n        }\n\n        combined.subscribe(onNext: { (it) in\n            print(#function,it)\n        }, onError: { (err) in\n            print(#function,err)\n        }, onCompleted: { \n            print(#function)\n        }).addDisposableTo(disposeBag)\n    }\n\n\n\nretry\u3067\u30a8\u30e9\u30fc\u6642\u3001\u4e00\u5b9a\u56de\u6570\u7e70\u308a\u8fd4\u3059\n\u5148\u306e\u30a8\u30e9\u30fc\u30cf\u30f3\u30c9\u30ea\u30f3\u30b0\u306e\u4f8b\u3067\u4f7f\u7528\u3057\u305f\u3001status500\u3092\u4f7f\u7528\u3057\u3066 \n\uff13\u56destatusCodeValidationFailed\u30a8\u30e9\u30fc\u304c\u7e70\u308a\u8fd4\u3055\u308c\u308b\u307e\u3067\u3001\n\u30ea\u30c8\u30e9\u30a4\u3059\u308b\u3002\n\nSomeViewController.swift\n\n    func someFunction(){\n        let status = status500()\n            .flatMap { it -> Observable<DataResponse<Any>> in\n            if(it.response?.statusCode == 500){\n                return Observable.error(HttpError.statusCodeValidationFailed)\n            }\n            return Observable.just(it)\n        }\n        status.retryWhen { (errors: Observable<HttpError>) in\n            return errors.flatMapWithIndex { error, retryCount -> Observable<Int64> in\n                if(retryCount > 3){\n                    print(\"\u30ea\u30c8\u30e9\u30a4\u30ab\u30a6\u30f3\u30c8\u4e0a\u9650\u3001\u7d42\u4e86\")\n                    return Observable.error(HttpError.statusCodeValidationFailed)\n                }\n                switch error {\n                case .statusCodeValidationFailed:\n                    print(\"\u307e\u3060\u7e70\u308a\u8fd4\u3059\")\n                    return Observable.just(0)\n                default:\n                    print(\"\u672a\u77e5\u306e\u30a8\u30e9\u30fc\u3001\u5373\u7d42\u4e86\")\n                    return Observable.error(HttpError.statusCodeValidationFailed)\n                }\n            }\n        }.subscribe(onNext: { (it) in\n            print(it)\n        }, onError: { (err) in\n           print(\"error \\(err)\")\n        }).addDisposableTo(disposeBag)\n\n    }\n\n\n\n\n\nfilter\u3067\u7279\u5b9a\u306e\u6761\u4ef6\u306e\u6642\u306e\u307f\u51e6\u7406\u3059\u308b\nhttp://httpbin.org/ip \n\u306e\u30ec\u30b9\u30dd\u30f3\u30b9\u306eip\u304c\u7a7a\u3067\u306a\u3044\u3068\u304d\u3060\u3051\u51e6\u7406\u3059\u308b\n\nSomeViewController.swift\n    func someFunction(){\n        getIp()\n            .flatMap({ it -> Observable<HttpbinIp> in\n                self.map(response: it)\n            })\n            .filter({ (it) -> Bool in\n                if(it.origin != nil){\n                    return true\n                }\n                return false\n            })\n            .subscribe( onNext: { it in\n                print(#function,it.toJSONString())\n            }, onError:{ err in\n                print(err)\n            }).addDisposableTo(disposeBag)\n    }\n\n\n\nrx_timer\u3067\u30dd\u30fc\u30ea\u30f3\u30b0\u3059\u308b\n\nSomeViewController.swift\n    fileprivate var disposeBag = DisposeBag()\n\n    /**\n        1\u79d2\u304a\u304d\u306bgetIp\u3059\u308b\n    */\n    func interval(){\n\n        let rx_timer = Observable<Int>\n            .interval(\n                1.0,\n                scheduler: MainScheduler.instance\n        )\n\n        _ = rx_timer\n            .flatMap({ it in\n                self.getIpResponse()\n            }).subscribe(onNext: { (it) in\n                print(it)\n            }).addDisposableTo(disposeBag)\n\n    }\n\n    /**\n    disposeBag\u3092\u518d\u751f\u6210\u3059\u308b\u3053\u3068\u3067\u3001\u30dd\u30fc\u30ea\u30f3\u30b0\u3092\u505c\u6b62\u3059\u308b\n    */\n    @IBAction func buttonPressed(_ sender: UIButton) {\n        disposeBag = DisposeBag()\n    }\n\n    func someFunction(){\n        interval()\n    }\n\n\n\n\ndistinctUntilChanged\u3067\u5024\u304c\u5909\u5316\u3057\u305f\u3068\u304d\u3060\u3051\u51e6\u7406\u3059\u308b\n\nSomwViewController.swift\n    func intervalAndChanged(){\n\n        /**\n            1\u79d2\u304a\u304d\u306bgetIp\u3059\u308b\n        */\n        let rx_timer = Observable<Int>\n            .interval(\n                1.0,\n                scheduler: MainScheduler.instance\n        )\n\n        /**\n            \u5024\u304c\u5909\u5316\u3057\u305f\u6642\u3060\u3051\u51e6\u7406\u3059\u308b\u3001\n            \u30dd\u30fc\u30ea\u30f3\u30b0\u306e\u6700\u521d\u306e1\u56de\u3060\u3051\"changed ---\"\u3092\u8868\u793a\u3059\u308b\n        */        \n        _ = rx_timer\n            .flatMap({ it in\n                self.getIpResponse()\n            })\n            .flatMap({ it -> Observable<HttpbinGet> in\n                self.map(response: it)\n            }).distinctUntilChanged({ (new, old) -> Bool in\n                if(new.origin == old.origin){\n                    return true\n                }\n                return false\n            })\n            .subscribe(onNext: { (it) in\n                print(\"changed: \\(it)\")\n            }).addDisposableTo(disposeBag)\n\n    }\n\n    /**\n    disposeBag\u3092\u518d\u751f\u6210\u3059\u308b\u3053\u3068\u3067\u3001\u30dd\u30fc\u30ea\u30f3\u30b0\u3092\u505c\u6b62\u3059\u308b\n    */\n    @IBAction func buttonPressed(_ sender: UIButton) {\n        disposeBag = DisposeBag()\n    }\n\n    func someFunction(){\n        intervalAndChanged()\n    }\n\n\n\ntimeout\n\n## \u306f\u3058\u3081\u306b\nHTTP\u306eJSON API\u306e\u30ec\u30b9\u30dd\u30f3\u30b9\u3092Object Mapper\u3067\u30de\u30c3\u30d4\u30f3\u30b0\u3059\u308b\u3068\u3053\u308d\u307e\u3067\u3001\nRxSwift\u3067\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u3092\u66f8\u3044\u3066\u307f\u308b\n\n\u30a8\u30f3\u30c9\u30dd\u30a4\u30f3\u30c8\u306fhttpbin\n[https://httpbin.org/ip](https://httpbin.org/ip)\n\n####\u5bfe\u8c61\u306eJSON\n\n~~~response.json\n{\n  \"origin\": \"127.0.0.1\"\n}\n~~~\n\n\n####ObjectMapper\u306e\u30de\u30c3\u30d4\u30f3\u30b0\u30af\u30e9\u30b9\n\n\n~~~ HttpbinIp.swift\nimport ObjectMapper\n\nclass HttpbinIp: Mappable {\n    \n    var origin: String?\n    \n    required init?(map: Map){\n    }\n    \n    func mapping(map: Map) {\n        origin<-map[\"origin\"]\n    }\n}\n~~~\n\n\n####URLComponents\u30a8\u30af\u30b9\u30c6\u30f3\u30b7\u30e7\u30f3 \nhttps://httpbin.org \u306b\u30a2\u30af\u30bb\u30b9\u3059\u308b\nURLComponents\u3092\u4f5c\u6210\u3057\u3066\u304a\u304f\n\n~~~HttpClient+UrlComponents.swift\nextension URLComponents {\n    \n    static func httpbin(_ path_:String) -> URLComponents {\n        var res = URLComponents()\n        res.scheme = \"https\"\n        res.host = \"httpbin.org\"\n        res.path = path_\n        return res\n    }\n    \n    static func httpbin(_ path_:String, query_:[URLQueryItem] ) -> URLComponents {\n        var res = URLComponents()\n        res.scheme = \"http\"\n        res.host = \"httpbin.org\"\n        res.path = path_\n        res.queryItems = query_\n        return res\n    }\n    \n}\n~~~\n\n\n####HTTP\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\n\n~~~HTTPClient.swift\nimport UIKit\nimport Alamofire\nimport RxSwift\nimport RxCocoa\nimport ObjectMapper\n\nclass HTTPClient{\n\n    func request(\n        method: Alamofire.HTTPMethod,\n        path: String,\n        parameters: [String: Any]? = nil\n        ) -> Observable<DataResponse<Any>> {\n        return Observable.create { observer in\n            let req = self.request_base(\n                method: method,\n                urlComponents: URLComponents.httpbin(path),\n                parameters: parameters)\n                .responseJSON { response in\n                    observer.onNext(response)\n                    observer.onCompleted()\n            }\n            \n            return Disposables.create(with:){\n                req.cancel()\n            }\n        }\n    }\n    \n    func map<T: Mappable>(response:DataResponse<Any>\n        ) -> Observable<T> {\n        return Observable.create { observer in\n            if let m: T = Mapper<T>().map(JSONObject: response.value){\n                observer.onNext(m)\n                observer.onCompleted()\n            }\n            observer.onError(HttpClientError.jsonSerializationFailed.error)\n            return Disposables.create(with:){\n                \n            }\n        }\n    }\n}\n\n~~~\n\n\n####\u547c\u3073\u51fa\u3057\u4f8b\n\n\n~~~SomeViewController.swift\n    func getIp() -> Observable<DataResponse<Any>>{\n        return HTTPClient().request(\n            method: .get,\n            path: \"/ip\"\n        )\n    }\n    \n    func hoge(){\n        getIp()\n            .flatMap({ it in\n                self.map(response: it)\n            })\n            .subscribe( onNext: { it in\n                print(it)\n            },onError:{ err in\n                print(\"err\",err)\n            }).addDisposableTo(disposeBag)\n    }\n~~~\n\n\n\n## \u30a8\u30e9\u30fc\u30cf\u30f3\u30c9\u30ea\u30f3\u30b0\n\nstatus code 500\u304c\u8fd4\u3063\u3066\u304d\u305f\u6642\u306e\u30a8\u30e9\u30fc\u51e6\u7406\u3092\u66f8\u3044\u3066\u307f\u308b\n[https://httpbin.org/status/500](https://httpbin.org/status/500)\n\n\n####\u30a8\u30e9\u30fc\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\n\n~~~HttpClientError.swift\npublic enum HttpError: Error {\n    case responseSerializationFailed    \n    case statusCodeValidationFailed     \n    case dataSerializationFailed       \n    case jsonSerializationFailed\n}\n~~~\n\n####\u547c\u3073\u51fa\u3057\u4f8b\n\n~~~SomeViewController.swift\n    func status500() -> Observable<DataResponse<Any>>{\n        return HTTPClient().request(\n            method: .get,\n            path: \"/status/500\"\n        )\n    }\n\n\tfunc someFunction(){\n        let status = status500()\n            .flatMap { it -> Observable<DataResponse<Any>> in\n            if(it.response?.statusCode == 500){\n                return Observable.error(HttpError.statusCodeValidationFailed)\n            }\n            return Observable.just(it)\n        }\n        status.subscribe(onNext: { (it) in\n            print(it)\n        }, onError: { (err) in\n            if let error = err as? HttpError{\n                switch error {\n                case .statusCodeValidationFailed:\n                    print(\"status code validation failed \\(error)\")\n                default:\n                    print(\"other HttpClientError error \\(error)\")\n                }\n            }else{\n                print(\"unknown error \\(err)\")\n            }\n        }).addDisposableTo(disposeBag)\n \t\n\t}\n\t\n\t\n\n~~~\n\n\n## RxSwift\u306e\u4fbf\u5229\u306a\u6a5f\u80fd\n\n\n### combineLatest\u3067\u8907\u6570\u306e\u30ec\u30b9\u30dd\u30f3\u30b9\u3092\u307e\u3068\u3081\u308b\n[ReactiveX - CombineLatest operator](http://reactivex.io/documentation/operators/combinelatest.html)\n\u8907\u6570\u306eobservable\u306e\u7d50\u679c\uff08\u306e\u6700\u65b0\u306e\u5024\uff09\u3092\u307e\u3068\u3081\u308b\u3053\u3068\u304c\u3067\u304d\u308b\n\n[httpbin.org/get](http://httpbin.org/get)\u306borigin\u3068\u3044\u3046\u30d7\u30ed\u30d1\u30c6\u30a3\u304c\u3042\u308b\u3001\n\n~~~get.json\n{\n  \"args\": {}, \n  \"headers\": { [\u7701\u7565]\n  }, \n  \"origin\": \"127.0.0.1\", \n  \"url\": \"http://httpbin.org/get\"\n}\n~~~\n\n\u5148\u306e[httpbin.org/ip](http://httpbin.org/ip)\u306e\u30d7\u30ed\u30d1\u30c6\u30a3ip\u3068\n\u540c\u3058\u6587\u5b57\u5217\u304c\u304b\u3069\u3046\u304b\u5224\u5b9a\u3059\u308b\u30b9\u30c8\u30ea\u30fc\u30e0\u3092\u4f5c\u3063\u3066\u307f\u308b\n\n\u30a8\u30f3\u30c9\u30dd\u30a4\u30f3\u30c8\u9055\u3044\u306eobservable\u3092\u7528\u610f\u3057\u3066...\n\n~~~SomeViewController.swift\n    func getGet() -> Observable<DataResponse<Any>>{\n        return HTTPClient().request(\n            method: .get,\n            path: \"/get\"\n        )\n    }\n~~~\n\n\n\u30de\u30c3\u30d4\u30f3\u30b0\u30af\u30e9\u30b9\u3092\u7528\u610f\u3057\u3066...\n(\u30ad\u30fc\u540d\u304c\u540c\u3058\"origin\"\u3060\u3063\u305f\u306e\u3067\u672c\u5f53\u306f\u5fc5\u8981\u7121\u3044\u304c\u3001\u8aac\u660e\u306e\u305f\u3081)\n\n~~~ HttpbinIp.swift\nimport ObjectMapper\n\nclass HttpbinGet: Mappable {\n    \n    var url: String?\n    var origin: String?\n    \n    required init?(map: Map) {\n    }\n    \n    func mapping(map: Map) {\n        url<-map[\"url\"]\n        origin<-map[\"origin\"]\n    }\n}\n~~~\n\n\ncombineLatest\u3067\u305d\u308c\u305e\u308c\u306e\u7d50\u679c\u3092\u53d6\u5f97\u3057\u3001\u6bd4\u8f03\u3001\u30b9\u30c8\u30ea\u30fc\u30e0\u3068\u3057\u3066\u7d50\u679c\u3092\u8fd4\u3059\n\n\n~~~SomeViewController.swift\n\tfunc otherFunction(){\n        let gotIp = getIp()\n            .flatMap({ it -> Observable<HttpbinIp> in\n                self.map(response: it)\n            })\n        \n        let gotGet = getGet()\n            .flatMap({ it -> Observable<HttpbinGet> in\n                self.map(response: it)\n            })\n        \n        let combined = Observable.combineLatest(gotIp,gotGet) { (gotIp_, gotGet_) -> Bool in\n            if(gotIp_.origin == gotGet_.origin){\n                return true\n            }\n            return false\n        }\n        \n        combined.subscribe(onNext: { (it) in\n            print(#function,it)\n        }, onError: { (err) in\n            print(#function,err)\n        }, onCompleted: { \n            print(#function)\n        }).addDisposableTo(disposeBag)\n\t}\n~~~\n\n\n### retry\u3067\u30a8\u30e9\u30fc\u6642\u3001\u4e00\u5b9a\u56de\u6570\u7e70\u308a\u8fd4\u3059\n\n\u5148\u306e\u30a8\u30e9\u30fc\u30cf\u30f3\u30c9\u30ea\u30f3\u30b0\u306e\u4f8b\u3067\u4f7f\u7528\u3057\u305f\u3001status500\u3092\u4f7f\u7528\u3057\u3066 \n\uff13\u56destatusCodeValidationFailed\u30a8\u30e9\u30fc\u304c\u7e70\u308a\u8fd4\u3055\u308c\u308b\u307e\u3067\u3001\n\u30ea\u30c8\u30e9\u30a4\u3059\u308b\u3002\n\n\n~~~SomeViewController.swift\n\n\tfunc someFunction(){\n        let status = status500()\n            .flatMap { it -> Observable<DataResponse<Any>> in\n            if(it.response?.statusCode == 500){\n                return Observable.error(HttpError.statusCodeValidationFailed)\n            }\n            return Observable.just(it)\n        }\n        status.retryWhen { (errors: Observable<HttpError>) in\n            return errors.flatMapWithIndex { error, retryCount -> Observable<Int64> in\n                if(retryCount > 3){\n                    print(\"\u30ea\u30c8\u30e9\u30a4\u30ab\u30a6\u30f3\u30c8\u4e0a\u9650\u3001\u7d42\u4e86\")\n                    return Observable.error(HttpError.statusCodeValidationFailed)\n                }\n                switch error {\n                case .statusCodeValidationFailed:\n                    print(\"\u307e\u3060\u7e70\u308a\u8fd4\u3059\")\n                    return Observable.just(0)\n                default:\n                    print(\"\u672a\u77e5\u306e\u30a8\u30e9\u30fc\u3001\u5373\u7d42\u4e86\")\n                    return Observable.error(HttpError.statusCodeValidationFailed)\n                }\n            }\n        }.subscribe(onNext: { (it) in\n            print(it)\n        }, onError: { (err) in\n           print(\"error \\(err)\")\n        }).addDisposableTo(disposeBag)\n \t\n\t}\n                   \n            \n~~~\n\n#### filter\u3067\u7279\u5b9a\u306e\u6761\u4ef6\u306e\u6642\u306e\u307f\u51e6\u7406\u3059\u308b\n\nhttp://httpbin.org/ip \n\u306e\u30ec\u30b9\u30dd\u30f3\u30b9\u306eip\u304c\u7a7a\u3067\u306a\u3044\u3068\u304d\u3060\u3051\u51e6\u7406\u3059\u308b\n\n~~~SomeViewController.swift\n\tfunc someFunction(){\n        getIp()\n            .flatMap({ it -> Observable<HttpbinIp> in\n                self.map(response: it)\n            })\n            .filter({ (it) -> Bool in\n                if(it.origin != nil){\n                    return true\n                }\n                return false\n            })\n            .subscribe( onNext: { it in\n                print(#function,it.toJSONString())\n            }, onError:{ err in\n                print(err)\n            }).addDisposableTo(disposeBag)\n\t}\n~~~\n\n#### rx_timer\u3067\u30dd\u30fc\u30ea\u30f3\u30b0\u3059\u308b\n\n~~~SomeViewController.swift\n    fileprivate var disposeBag = DisposeBag()\n\n\t/**\n\t\t1\u79d2\u304a\u304d\u306bgetIp\u3059\u308b\n\t*/\n    func interval(){\n        \n        let rx_timer = Observable<Int>\n            .interval(\n                1.0,\n                scheduler: MainScheduler.instance\n        )\n        \n        _ = rx_timer\n            .flatMap({ it in\n                self.getIpResponse()\n            }).subscribe(onNext: { (it) in\n                print(it)\n            }).addDisposableTo(disposeBag)\n        \n    }\n    \n    /**\n    disposeBag\u3092\u518d\u751f\u6210\u3059\u308b\u3053\u3068\u3067\u3001\u30dd\u30fc\u30ea\u30f3\u30b0\u3092\u505c\u6b62\u3059\u308b\n    */\n    @IBAction func buttonPressed(_ sender: UIButton) {\n        disposeBag = DisposeBag()\n    }\n    \n    func someFunction(){\n    \tinterval()\n    }\n    \n~~~\n\n#### distinctUntilChanged\u3067\u5024\u304c\u5909\u5316\u3057\u305f\u3068\u304d\u3060\u3051\u51e6\u7406\u3059\u308b\n~~~SomwViewController.swift\n    func intervalAndChanged(){\n    \n\t\t/**\n\t\t\t1\u79d2\u304a\u304d\u306bgetIp\u3059\u308b\n\t\t*/\n        let rx_timer = Observable<Int>\n            .interval(\n                1.0,\n                scheduler: MainScheduler.instance\n        )\n\n        /**\n        \t\u5024\u304c\u5909\u5316\u3057\u305f\u6642\u3060\u3051\u51e6\u7406\u3059\u308b\u3001\n        \t\u30dd\u30fc\u30ea\u30f3\u30b0\u306e\u6700\u521d\u306e1\u56de\u3060\u3051\"changed ---\"\u3092\u8868\u793a\u3059\u308b\n        */        \n        _ = rx_timer\n            .flatMap({ it in\n                self.getIpResponse()\n            })\n            .flatMap({ it -> Observable<HttpbinGet> in\n                self.map(response: it)\n            }).distinctUntilChanged({ (new, old) -> Bool in\n                if(new.origin == old.origin){\n                    return true\n                }\n                return false\n            })\n            .subscribe(onNext: { (it) in\n                print(\"changed: \\(it)\")\n            }).addDisposableTo(disposeBag)\n        \n    }\n    \n    /**\n    disposeBag\u3092\u518d\u751f\u6210\u3059\u308b\u3053\u3068\u3067\u3001\u30dd\u30fc\u30ea\u30f3\u30b0\u3092\u505c\u6b62\u3059\u308b\n    */\n    @IBAction func buttonPressed(_ sender: UIButton) {\n        disposeBag = DisposeBag()\n    }\n    \n    func someFunction(){\n    \tintervalAndChanged()\n    }\n~~~\n\n#### timeout\n\n", "tags": ["Alamofire", "Swift", "ObjectMapper", "RxSwift"]}