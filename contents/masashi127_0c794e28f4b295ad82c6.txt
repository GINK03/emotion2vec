{"context": " More than 1 year has passed since last update.\n\n\u80cc\u666f\n\n\nCheckIO\u3067\u7d4c\u8def\u63a2\u7d22\u306e\u554f\u984c\u304c\u591a\u3044\u306e\u3067\u52c9\u5f37\u3057\u3066\u307f\u305f\u3002\n\n\n\u30b3\u30fc\u30c9\n# coding: utf-8\nimport heapq\nimport itertools\n\n\ndef astar(init_pos, goal):\n    # \u63a2\u7d22\u3057\u305f\u5ea7\u6a19\u3092\u683c\u7d0d\u3059\u308b\u7d4c\u8def\u30ea\u30b9\u30c8\n    passed_list = [init_pos]\n    # \u521d\u671f\u30b9\u30b3\u30a2\n    init_score = distance(passed_list) + heuristic(init_pos)\n    # \u63a2\u7d22\u6e08\u307f\u5ea7\u6a19\u3068\u3001\u305d\u306e\u5ea7\u6a19\u306b\u8fbf\u308a\u7740\u3044\u305f\u7d4c\u8def\u306e\u30b9\u30b3\u30a2\u3092\u683c\u7d0d\n    checked = {init_pos: init_score}\n    # \u7d4c\u8def\u30ea\u30b9\u30c8\u3068\u305d\u306e\u30b9\u30b3\u30a2\u3092\u683c\u7d0d\u3059\u308b\u63a2\u7d22\u30d2\u30fc\u30d7\n    searching_heap = []\n    # \u63a2\u7d22\u30d2\u30fc\u30d7\u306b\u7d4c\u8def\u30ea\u30b9\u30c8\u3092\u683c\u7d0d\n    heapq.heappush(searching_heap, (init_score, passed_list))\n    # \u63a2\u7d22\u4e0d\u53ef\u80fd\u306b\u306a\u308b\u307e\u3067\n    while len(searching_heap) > 0:\n        # \u73fe\u5728\u307e\u3067\u306b\u63a2\u7d22\u3057\u305f\u7d4c\u8def\u306e\u4e2d\u304b\u3089\u3001\u30b9\u30b3\u30a2\u304c\u6700\u5c0f\u306b\u306a\u308b\n        # \u3068\u304d\u306e\u30b9\u30b3\u30a2\u3068\u7d4c\u8def\u30ea\u30b9\u30c8\u3092\u53d6\u5f97\n        score, passed_list = heapq.heappop(searching_heap)\n        # \u6700\u5f8c\u306b\u63a2\u7d22\u3057\u305f\u5ea7\u6a19\n        last_passed_pos = passed_list[-1]\n        # \u6700\u5f8c\u306b\u63a2\u7d22\u3057\u305f\u5ea7\u6a19\u304c\u76ee\u7684\u5730\u306a\u3089\u63a2\u7d22\u30d2\u30fc\u30d7\u3092\u8fd4\u3059\n        if last_passed_pos == goal:\n            return passed_list\n        # \u6700\u5f8c\u306b\u63a2\u7d22\u3057\u305f\u5ea7\u6a19\u306e\u516b\u65b9\u3092\u63a2\u7d22\n        for pos in nexts(last_passed_pos):\n            # \u7d4c\u8def\u30ea\u30b9\u30c8\u306b\u63a2\u7d22\u4e2d\u306e\u5ea7\u6a19\u3092\u8ffd\u52a0\u3057\u305f\u4e00\u6642\u30ea\u30b9\u30c8\u3092\u4f5c\u6210\n            new_passed_list = passed_list + [pos]\n            # \u4e00\u6642\u30ea\u30b9\u30c8\u306e\u30b9\u30b3\u30a2\u3092\u8a08\u7b97\n            pos_score = distance(new_passed_list) + heuristic(pos)\n            # \u63a2\u7d22\u4e2d\u306e\u5ea7\u6a19\u304c\u3001\u4ed6\u306e\u7d4c\u8def\u3067\u63a2\u7d22\u6e08\u307f\u304b\u3069\u3046\u304b\u30c1\u30a7\u30c3\u30af\n            # \u63a2\u7d22\u6e08\u307f\u306e\u5834\u5408\u3001\u524d\u56de\u306e\u30b9\u30b3\u30a2\u3068\u4eca\u56de\u306e\u30b9\u30b3\u30a2\u3092\u6bd4\u8f03\n            # \u4eca\u56de\u306e\u30b9\u30b3\u30a2\u306e\u307b\u3046\u304c\u5927\u304d\u3044\u5834\u5408\u3001\u6b21\u306e\u65b9\u89d2\u306e\u5ea7\u6a19\u306e\u63a2\u7d22\u3078\n            if pos in checked and checked[pos] <= pos_score:\n                continue\n            # \u4eca\u56de\u306e\u30b9\u30b3\u30a2\u306e\u307b\u3046\u304c\u5c0f\u3055\u3044\u5834\u5408\u3001\u30c1\u30a7\u30c3\u30af\u6e08\u307f\u30ea\u30b9\u30c8\u306b\u683c\u7d0d\n            # \u63a2\u7d22\u30d2\u30fc\u30d7\u306b\u30b9\u30b3\u30a2\u3068\u7d4c\u8def\u30ea\u30b9\u30c8\u3092\u683c\u7d0d\n            checked[pos] = pos_score\n            heapq.heappush(searching_heap, (pos_score, new_passed_list))\n\n    return []\n\nif __name__ == \"__main__\":\n    dungeon = [\n        'OOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOO',\n        'OS  O     O     O         O          O',\n        'O   O  O  O  O            O    OOOO GO',\n        'O      O     O  O   OOOO  O    O  OOOO',\n        'OOOOOOOOOOOOOOOOOO  O     O    O     O',\n        'O                O  O     O          O',\n        'O        OOO     O  O     OOOOOOOOO  O',\n        'O  OO    O    OOOO  O     O      OO  O',\n        'O   O    O          O     O  O   O   O',\n        'O   OOO  O          O        O   O   O',\n        'O        O          O        O       O',\n        'OOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOO',\n        ]\n\n    def find_ch(ch):\n        for i, l in enumerate(dungeon):\n\n            for j, c in enumerate(l):\n\n                if c == ch:\n                    return (i, j)\n    # \u30b9\u30bf\u30fc\u30c8\n    init = find_ch(\"S\")\n    # \u30b4\u30fc\u30eb\n    goal = find_ch(\"G\")\n\n    def nexts(pos):\n        ''' \u63a2\u7d22\u4e2d\u306e\u5ea7\u6a19\u304b\u3089\u516b\u65b9\u306e\u5ea7\u6a19\u3092\u8a08\u7b97\u3059\u308b\u30b8\u30a7\u30cd\u30ec\u30fc\u30bf\u30fc'''\n        wall = \"O\"\n\n        for a, b in itertools.product([' + 1', ' - 1', ''], repeat=2):\n\n            if a or b:\n\n                if dungeon[eval('pos[0]' + a)][eval('pos[1]' + b)] != wall:\n                    yield (eval('pos[0]' + a), eval('pos[1]' + b))\n\n    def heuristic(pos):\n        ''' \u63a2\u7d22\u4e2d\u306e\u5ea7\u6a19\u304b\u3089\u30b4\u30fc\u30eb\u307e\u3067\u306e\u6700\u77ed\u8ddd\u96e2\u306e\u30b9\u30b3\u30a2 '''\n        return ((pos[0] - goal[0]) ** 2 + (pos[1] - goal[1]) ** 2) ** 0.5\n\n    def distance(path):\n        ''' \u30b9\u30bf\u30fc\u30c8\u304b\u3089\u63a2\u7d22\u4e2d\u306e\u5ea7\u6a19\u307e\u3067\u306e\u8ddd\u96e2\u306e\u30b9\u30b3\u30a2 '''\n        return len(path)\n\n    def render_path(path):\n        ''' \u7d50\u679c\u306e\u51fa\u529b '''\n        buf = [[ch for ch in l] for l in dungeon]\n\n        for pos in path[1:-1]:\n            buf[pos[0]][pos[1]] = \"*\"\n\n        buf[path[0][0]][path[0][1]] = \"s\"\n        buf[path[-1][0]][path[-1][1]] = \"g\"\n        return [\"\".join(l) for l in buf]\n\n    path = astar(init, goal)\n\n    if len(path) > 0:\n        print(\"\\n\".join(render_path(path)))\n\n    else:\n        print('failed')\n\n\n\u53c2\u8003\nPython\u3067A*(A-Star)\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0 - Pashango\u2019s Blog\n\u81ea\u5206\u306a\u3089\u3053\u3046\u66f8\u304f - python\u3067A* - \u30e9\u30b7\u30a6\u30e9\n## \u80cc\u666f\n- [CheckIO](https://www.google.co.jp/url?sa=t&rct=j&q=&esrc=s&source=web&cd=1&cad=rja&uact=8&sqi=2&ved=0CCcQFjAA&url=http%3A%2F%2Fwww.checkio.org%2F&ei=7tBQU53sBI7f8AXrvYDoDQ&usg=AFQjCNGXsrpQkb4DEb4j2GPoN8yXZBOSYA&bvm=bv.65058239,d.dGc)\u3067\u7d4c\u8def\u63a2\u7d22\u306e\u554f\u984c\u304c\u591a\u3044\u306e\u3067\u52c9\u5f37\u3057\u3066\u307f\u305f\u3002\n\n## \u30b3\u30fc\u30c9\n\n```python\n# coding: utf-8\nimport heapq\nimport itertools\n\n\ndef astar(init_pos, goal):\n    # \u63a2\u7d22\u3057\u305f\u5ea7\u6a19\u3092\u683c\u7d0d\u3059\u308b\u7d4c\u8def\u30ea\u30b9\u30c8\n    passed_list = [init_pos]\n    # \u521d\u671f\u30b9\u30b3\u30a2\n    init_score = distance(passed_list) + heuristic(init_pos)\n    # \u63a2\u7d22\u6e08\u307f\u5ea7\u6a19\u3068\u3001\u305d\u306e\u5ea7\u6a19\u306b\u8fbf\u308a\u7740\u3044\u305f\u7d4c\u8def\u306e\u30b9\u30b3\u30a2\u3092\u683c\u7d0d\n    checked = {init_pos: init_score}\n    # \u7d4c\u8def\u30ea\u30b9\u30c8\u3068\u305d\u306e\u30b9\u30b3\u30a2\u3092\u683c\u7d0d\u3059\u308b\u63a2\u7d22\u30d2\u30fc\u30d7\n    searching_heap = []\n    # \u63a2\u7d22\u30d2\u30fc\u30d7\u306b\u7d4c\u8def\u30ea\u30b9\u30c8\u3092\u683c\u7d0d\n    heapq.heappush(searching_heap, (init_score, passed_list))\n    # \u63a2\u7d22\u4e0d\u53ef\u80fd\u306b\u306a\u308b\u307e\u3067\n    while len(searching_heap) > 0:\n        # \u73fe\u5728\u307e\u3067\u306b\u63a2\u7d22\u3057\u305f\u7d4c\u8def\u306e\u4e2d\u304b\u3089\u3001\u30b9\u30b3\u30a2\u304c\u6700\u5c0f\u306b\u306a\u308b\n        # \u3068\u304d\u306e\u30b9\u30b3\u30a2\u3068\u7d4c\u8def\u30ea\u30b9\u30c8\u3092\u53d6\u5f97\n        score, passed_list = heapq.heappop(searching_heap)\n        # \u6700\u5f8c\u306b\u63a2\u7d22\u3057\u305f\u5ea7\u6a19\n        last_passed_pos = passed_list[-1]\n        # \u6700\u5f8c\u306b\u63a2\u7d22\u3057\u305f\u5ea7\u6a19\u304c\u76ee\u7684\u5730\u306a\u3089\u63a2\u7d22\u30d2\u30fc\u30d7\u3092\u8fd4\u3059\n        if last_passed_pos == goal:\n            return passed_list\n        # \u6700\u5f8c\u306b\u63a2\u7d22\u3057\u305f\u5ea7\u6a19\u306e\u516b\u65b9\u3092\u63a2\u7d22\n        for pos in nexts(last_passed_pos):\n            # \u7d4c\u8def\u30ea\u30b9\u30c8\u306b\u63a2\u7d22\u4e2d\u306e\u5ea7\u6a19\u3092\u8ffd\u52a0\u3057\u305f\u4e00\u6642\u30ea\u30b9\u30c8\u3092\u4f5c\u6210\n            new_passed_list = passed_list + [pos]\n            # \u4e00\u6642\u30ea\u30b9\u30c8\u306e\u30b9\u30b3\u30a2\u3092\u8a08\u7b97\n            pos_score = distance(new_passed_list) + heuristic(pos)\n            # \u63a2\u7d22\u4e2d\u306e\u5ea7\u6a19\u304c\u3001\u4ed6\u306e\u7d4c\u8def\u3067\u63a2\u7d22\u6e08\u307f\u304b\u3069\u3046\u304b\u30c1\u30a7\u30c3\u30af\n            # \u63a2\u7d22\u6e08\u307f\u306e\u5834\u5408\u3001\u524d\u56de\u306e\u30b9\u30b3\u30a2\u3068\u4eca\u56de\u306e\u30b9\u30b3\u30a2\u3092\u6bd4\u8f03\n            # \u4eca\u56de\u306e\u30b9\u30b3\u30a2\u306e\u307b\u3046\u304c\u5927\u304d\u3044\u5834\u5408\u3001\u6b21\u306e\u65b9\u89d2\u306e\u5ea7\u6a19\u306e\u63a2\u7d22\u3078\n            if pos in checked and checked[pos] <= pos_score:\n                continue\n            # \u4eca\u56de\u306e\u30b9\u30b3\u30a2\u306e\u307b\u3046\u304c\u5c0f\u3055\u3044\u5834\u5408\u3001\u30c1\u30a7\u30c3\u30af\u6e08\u307f\u30ea\u30b9\u30c8\u306b\u683c\u7d0d\n            # \u63a2\u7d22\u30d2\u30fc\u30d7\u306b\u30b9\u30b3\u30a2\u3068\u7d4c\u8def\u30ea\u30b9\u30c8\u3092\u683c\u7d0d\n            checked[pos] = pos_score\n            heapq.heappush(searching_heap, (pos_score, new_passed_list))\n\n    return []\n\nif __name__ == \"__main__\":\n    dungeon = [\n        'OOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOO',\n        'OS  O     O     O         O          O',\n        'O   O  O  O  O            O    OOOO GO',\n        'O      O     O  O   OOOO  O    O  OOOO',\n        'OOOOOOOOOOOOOOOOOO  O     O    O     O',\n        'O                O  O     O          O',\n        'O        OOO     O  O     OOOOOOOOO  O',\n        'O  OO    O    OOOO  O     O      OO  O',\n        'O   O    O          O     O  O   O   O',\n        'O   OOO  O          O        O   O   O',\n        'O        O          O        O       O',\n        'OOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOO',\n        ]\n\n    def find_ch(ch):\n        for i, l in enumerate(dungeon):\n\n            for j, c in enumerate(l):\n\n                if c == ch:\n                    return (i, j)\n    # \u30b9\u30bf\u30fc\u30c8\n    init = find_ch(\"S\")\n    # \u30b4\u30fc\u30eb\n    goal = find_ch(\"G\")\n\n    def nexts(pos):\n        ''' \u63a2\u7d22\u4e2d\u306e\u5ea7\u6a19\u304b\u3089\u516b\u65b9\u306e\u5ea7\u6a19\u3092\u8a08\u7b97\u3059\u308b\u30b8\u30a7\u30cd\u30ec\u30fc\u30bf\u30fc'''\n        wall = \"O\"\n\n        for a, b in itertools.product([' + 1', ' - 1', ''], repeat=2):\n\n            if a or b:\n\n                if dungeon[eval('pos[0]' + a)][eval('pos[1]' + b)] != wall:\n                    yield (eval('pos[0]' + a), eval('pos[1]' + b))\n\n    def heuristic(pos):\n        ''' \u63a2\u7d22\u4e2d\u306e\u5ea7\u6a19\u304b\u3089\u30b4\u30fc\u30eb\u307e\u3067\u306e\u6700\u77ed\u8ddd\u96e2\u306e\u30b9\u30b3\u30a2 '''\n        return ((pos[0] - goal[0]) ** 2 + (pos[1] - goal[1]) ** 2) ** 0.5\n\n    def distance(path):\n        ''' \u30b9\u30bf\u30fc\u30c8\u304b\u3089\u63a2\u7d22\u4e2d\u306e\u5ea7\u6a19\u307e\u3067\u306e\u8ddd\u96e2\u306e\u30b9\u30b3\u30a2 '''\n        return len(path)\n\n    def render_path(path):\n        ''' \u7d50\u679c\u306e\u51fa\u529b '''\n        buf = [[ch for ch in l] for l in dungeon]\n\n        for pos in path[1:-1]:\n            buf[pos[0]][pos[1]] = \"*\"\n\n        buf[path[0][0]][path[0][1]] = \"s\"\n        buf[path[-1][0]][path[-1][1]] = \"g\"\n        return [\"\".join(l) for l in buf]\n\n    path = astar(init, goal)\n\n    if len(path) > 0:\n        print(\"\\n\".join(render_path(path)))\n\n    else:\n        print('failed')\n```\n\n## \u53c2\u8003\n[Python\u3067A*(A-Star)\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0 - Pashango\u2019s Blog](http://d.hatena.ne.jp/pashango_p/20090713/1247455609)\n[\u81ea\u5206\u306a\u3089\u3053\u3046\u66f8\u304f - python\u3067A* - \u30e9\u30b7\u30a6\u30e9](http://d.hatena.ne.jp/bellbind/20090715/1247656342)", "tags": ["Python", "\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0"]}