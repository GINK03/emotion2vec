{"context": " More than 1 year has passed since last update.\n\n\u6982\u8981\nStatic Website Hosting\u3092\u4f7f\u3063\u3066\u3044\u308b\u5834\u5408\u306b\u306f\u30a2\u30af\u30bb\u30b9\u30ed\u30b0\u7684\u306a\u5f79\u5272\u3092\u679c\u305f\u3059\u3001S3\u3078\u306e\u30ea\u30af\u30a8\u30b9\u30c8\u306e\u30ed\u30b0\u3092\u6307\u5b9a\u3057\u305f\u30d0\u30b1\u30c3\u30c8\u3078\u5410\u304d\u51fa\u3059Logging\u6a5f\u80fd\u3067\u3001\u5bfe\u8c61\u306e\u30d0\u30b1\u30c3\u30c8\u306b\u66f4\u65b0\u901a\u77e5(Event nortification)\u3092\u4ed5\u8fbc\u307f\u3001Lambda\u3092\u8d77\u52d5\u3057\u3066\u53d6\u5f97\u30fb\u30d1\u30fc\u30b9\u3057\u3001\u5206\u6790\u3067\u304d\u308b\u3088\u3046\u306b\u3059\u308b\u305f\u3081\u306bBigQuery\u306b\u7a81\u3063\u8fbc\u307f\u307e\u3059\u3002\n\n\u4e8b\u524d\u6e96\u5099\n\nS3 Logging\nhttps://docs.aws.amazon.com/ja_jp/AmazonS3/latest/dev/ServerLogs.html\n\nS3 Event nortification\nhttp://docs.aws.amazon.com/ja_jp/AmazonS3/latest/dev/NotificationHowTo.html\n\nBigQuery\nhttp://www.apps-gcp.com/bigquery-introduction/\n\n\n\nLambda\u5b9f\u884c\u74b0\u5883\n\n\u30e9\u30f3\u30bf\u30a4\u30e0\u306fPython2.7\n\u5fc5\u8981\u306a\u30e2\u30b8\u30e5\u30fc\u30eb (\u30ab\u30c3\u30b3\u5185\u306f\u5b9f\u969b\u306b\u4f7f\u7528\u3057\u305f\u30d0\u30fc\u30b8\u30e7\u30f3)\n\n\nboto3 (Lambda\u30c7\u30d5\u30a9\u30eb\u30c8)\npytz (2015.7)\ngcloud (0.8.0)\n\n\n\n\nS3 Logging\u306e\u30ed\u30b0\u30d5\u30a9\u30fc\u30de\u30c3\u30c8\u3068BigQuery\u306e\u30b9\u30ad\u30fc\u30de\n\n\u30ed\u30b0\u30d5\u30a9\u30fc\u30de\u30c3\u30c8\n\u3053\u3061\u3089\u306b\u66f8\u3044\u3066\u307e\u3059\u3002\nhttps://docs.aws.amazon.com/AmazonS3/latest/dev/LogFormat.html\n\n\u30ed\u30b0\u3092\u30d1\u30fc\u30b9\u3059\u308b\u305f\u3081\u306e\u6b63\u898f\u8868\u73fe\n\u5404\u30e9\u30d9\u30eb\u304c\u305d\u306e\u307e\u307e\u6b21\u306e\u30b9\u30ad\u30fc\u30de\u306b\u304a\u3051\u308b\u30ab\u30e9\u30e0\u540d\u306b\u5bfe\u5fdc\u3059\u308b\u611f\u3058\u3002\n^(?P<owner>[^ ]+) (?P<bucket>[^ ]+) \\[(?P<datetime>.+)\\] (?P<remote_ip>[^ ]+) (?P<requester>[^ ]+) (?P<request_id>[^ ]+) (?P<operation>[^ ]+) (?P<key>[^ ]+) \"(?P<method>[^ ]+) (?P<uri>[^ ]+) (?P<proto>.+)\" (?P<status>[^ ]+) (?P<error>[^ ]+) (?P<bytes>[^ ]+) (?P<size>[^ ]+) (?P<total_time>[^ ]+) (?P<ta_time>[^ ]+) \"(?P<referrer>.+)\" \"(?P<user_agent>.+)\" (?P<version>.+)$\n\n\n\u30b9\u30ad\u30fc\u30de\n\u30d5\u30a9\u30fc\u30de\u30c3\u30c8\u306b\u5408\u308f\u305b\u3066\u3053\u3093\u306a\u611f\u3058\u3002\ndatetime \u30ab\u30e9\u30e0\u306fTIMESTAMP\u578b\u306e\u65b9\u304c\u826f\u3055\u305d\u3046\u3067\u3059\u304c\u3001\u8a73\u3057\u304f\u306f\u5f8c\u8ff0\u3057\u307e\u3059\u304c\u4e8b\u60c5\u304c\u3042\u308a\u4eca\u56de\u306fSTRING\u306b\u3057\u307e\u3057\u305f\u3002\n\n\n\n\u30ab\u30e9\u30e0\u540d\n\u578b\n\n\n\n\nowner\nSTRING\n\n\nbucket\nSTRING\n\n\ndatetime\nSTRING\n\n\nremote_ip\nSTRING\n\n\nrequester\nSTRING\n\n\nrequest_id\nSTRING\n\n\noperation\nSTRING\n\n\nkey\nSTRING\n\n\nmethod\nSTRING\n\n\nuri\nSTRING\n\n\nproto\nSTRING\n\n\nstatus\nSTRING\n\n\nerror\nSTRING\n\n\nbytes\nINTEGER\n\n\nsize\nINTEGER\n\n\ntotal_time\nINTEGER\n\n\nta_time\nINTEGER\n\n\nreferrer\nSTRING\n\n\nuser_agent\nSTRING\n\n\nversion\nSTRING\n\n\n\n\n\u30bd\u30fc\u30b9\n<your-*>\u306a\u90e8\u5206\u306f\u9069\u5b9c\u7f6e\u304d\u63db\u3048\u3066\u304f\u3060\u3055\u3044\u3002\nimport os\nimport json\nimport urllib\nimport boto3\nimport re\nimport datetime\nimport pytz\nfrom gcloud import bigquery\n\nBQ_PROJECT = '<your-project-id>'\nBQ_DATASET = '<your-dataset-name>'\nBQ_TABLE = '<your-table-name>'\n\ns3 = boto3.client('s3')\nbq = bigquery.Client.from_service_account_json(\n    os.path.join(os.path.dirname(__file__), 'bq.json'),\n    project=BQ_PROJECT)\ndataset = bq.dataset(BQ_DATASET)\ntable = dataset.table(name=BQ_TABLE)\ntable.reload()\n\npattern = ' '.join([\n    '^(?P<owner>[^ ]+)',\n    '(?P<bucket>[^ ]+)',\n    '\\[(?P<datetime>.+)\\]',\n    '(?P<remote_ip>[^ ]+)',\n    '(?P<requester>[^ ]+)',\n    '(?P<request_id>[^ ]+)',\n    '(?P<operation>[^ ]+)',\n    '(?P<key>[^ ]+)',\n    '\"(?P<method>[^ ]+) (?P<uri>[^ ]+) (?P<proto>.+)\"',\n    '(?P<status>[^ ]+)',\n    '(?P<error>[^ ]+)',\n    '(?P<bytes>[^ ]+)',\n    '(?P<size>[^ ]+)',\n    '(?P<total_time>[^ ]+)',\n    '(?P<ta_time>[^ ]+)',\n    '\"(?P<referrer>.+)\"',\n    '\"(?P<user_agent>.+)\"',\n    '(?P<version>.+)$'])\nlog_pattern = re.compile(pattern)\n\ndef to_int(val):\n    try:\n        ret = int(val)\n    except ValueError:\n        ret = None\n    return ret\n\ndef lambda_handler(event, context):\n    bucket = event['Records'][0]['s3']['bucket']['name']\n    key = urllib.unquote_plus(event['Records'][0]['s3']['object']['key']).decode('utf8')\n    res = s3.get_object(Bucket=bucket, Key=key)\n    body = res['Body'].read()\n    rows = []\n\n    for line in body.splitlines():\n        matches = log_pattern.match(line)\n        dt_str = matches.group('datetime').split(' ')[0]\n        timestamp = datetime.datetime.strptime(\n            dt_str, '%d/%b/%Y:%H:%M:%S').replace(tzinfo=pytz.utc)\n\n        rows.append((\n            matches.group('owner'),\n            matches.group('bucket'),\n            timestamp.strftime('%Y-%m-%d %H:%M:%S'),\n            matches.group('remote_ip'),\n            matches.group('requester'),\n            matches.group('request_id'),\n            matches.group('operation'),\n            matches.group('key'),\n            matches.group('method'),\n            matches.group('uri'),\n            matches.group('proto'),\n            matches.group('status'),\n            matches.group('error'),\n            to_int(matches.group('bytes')),\n            to_int(matches.group('size')),\n            to_int(matches.group('total_time')),\n            to_int(matches.group('ta_time')),\n            matches.group('referrer'),\n            matches.group('user_agent'),\n            matches.group('version'),))\n    print(table.insert_data(rows))\n\n\n\u6ce8\u610f\u4e8b\u9805\u306a\u3069\n\nGCP\u306eAPI Manager\u304b\u3089JSON\u5f62\u5f0f\u306e\u8a8d\u8a3c\u60c5\u5831\u3092\u53d6\u5f97\u3057\u3066bq.json\u3068\u3044\u3046\u540d\u524d\u3067Lambda function\u306e\u30c7\u30d7\u30ed\u30a4\u30d1\u30c3\u30b1\u30fc\u30b8\u306b\u542b\u3081\u308b 1\n\n\u672c\u4f53\u306a\u3089datetime\u306e\u90e8\u5206\u306f%d/%b/%Y:%H:%M:%S %z\u3067\u30d1\u30fc\u30b9\u3067\u304d\u308b\u306f\u305a\u3060\u304c\u3001Python < 3.2\u306e\u30d0\u30b0\u3067%z\u304c\u30a8\u30e9\u30fc\u3067\u4f7f\u3048\u306a\u3044\u306e\u3067pytz\u3092\u7d61\u3081\u305f\u5909\u5247\u7684\u306a\u65b9\u6cd5\u306b\u306a\u3063\u3066\u3044\u308b 2\n\n\u672c\u6765\u306fTIMESTAMP\u578b\u30ab\u30e9\u30e0\u306bdatetime\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u6307\u5b9a\u3059\u308b\u306e\u304c\u6b63\u3060\u304c\u3001gcloud (0.8.0)\u306e\u30d0\u30b0\uff1f\u306a\u306e\u304bBigQuery\u304c\u79d2\u5358\u4f4d\u306a\u306e\u306b\u5bfe\u3057\u3066\u30df\u30ea\u79d2\u3067\u4fdd\u5b58\u3057\u3088\u3046\u3068\u3057\u3066\u3042\u308a\u3048\u306a\u3044\u5e74\u6708\u65e5\u306b\u306a\u3063\u3066\u3057\u307e\u3046\u306e\u3067\u6ce8\u610f\n\u30ed\u30b0\u306e\u5404\u9805\u76ee\u306f\u51fa\u529b\u3059\u3079\u304d\u30c7\u30fc\u30bf\u304c\u306a\u3044\u5834\u5408\u306f-\u306b\u306a\u308b\u3002int\u306b\u5909\u63db\u3057\u305f\u3044\u9805\u76ee\u306a\u3069\u306f\u305d\u306e\u307e\u307eint('-')\u3068\u5909\u63db\u3059\u308b\u3068\u4f8b\u5916\u306b\u306a\u308b\u306e\u3067\u6ce8\u610f\nGoogle Cloud Client for Python(gcloud)\u306e\u516c\u5f0f\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u306f\u6240\u3005\u53e4\u3044\u306e\u3067\u30bd\u30fc\u30b9\u898b\u306a\u304c\u3089\u306e\u5b9f\u88c5\u304c\u5fc5\u8981\u3060\u3063\u305f\uff082015.11.26\u73fe\u5728\uff09\n\n\u3061\u306a\u307f\u306b\u95a2\u4fc2\u306a\u3044\u3067\u3059\u304c\u3001Lambda for Python\u306e\u30c7\u30d7\u30ed\u30a4\u306f\u62d9\u4f5c\u3067\u3059\u304c\u4e0b\u8a18\u3092\u4f7f\u3063\u3066\u3044\u307e\u3059\u3002\n\u307e\u3060\u307e\u3060\u958b\u767a\u4e2d\u3067\u3059\u304c\u666e\u901a\u306b\u4f7f\u3063\u3066\u3066\u4fbf\u5229\u306a\u611f\u3058\u306b\u306f\u306a\u3063\u3066\u304d\u3066\u308b\u306e\u3067\u826f\u304b\u3063\u305f\u3089\u304a\u8a66\u3057\u304f\u3060\u3055\u3044\u3002\nhttps://github.com/marcy-terui/lamvery\n\n\n\n\nLambda\u306b\u304a\u3051\u308b\u6a5f\u5bc6\u60c5\u5831\u306e\u6c17\u306e\u5229\u3044\u305f\u53d7\u3051\u6e21\u3057\u65b9\u6c42\u3080\u00a0\u21a9\n\n\n\u65e9\u304fPython3\u5bfe\u5fdc\u3057\u3066\u6b32\u3057\u3044\u3068\u3053\u308d\u00a0\u21a9\n\n\n\n# \u6982\u8981\nStatic Website Hosting\u3092\u4f7f\u3063\u3066\u3044\u308b\u5834\u5408\u306b\u306f\u30a2\u30af\u30bb\u30b9\u30ed\u30b0\u7684\u306a\u5f79\u5272\u3092\u679c\u305f\u3059\u3001S3\u3078\u306e\u30ea\u30af\u30a8\u30b9\u30c8\u306e\u30ed\u30b0\u3092\u6307\u5b9a\u3057\u305f\u30d0\u30b1\u30c3\u30c8\u3078\u5410\u304d\u51fa\u3059Logging\u6a5f\u80fd\u3067\u3001\u5bfe\u8c61\u306e\u30d0\u30b1\u30c3\u30c8\u306b\u66f4\u65b0\u901a\u77e5(Event nortification)\u3092\u4ed5\u8fbc\u307f\u3001Lambda\u3092\u8d77\u52d5\u3057\u3066\u53d6\u5f97\u30fb\u30d1\u30fc\u30b9\u3057\u3001\u5206\u6790\u3067\u304d\u308b\u3088\u3046\u306b\u3059\u308b\u305f\u3081\u306bBigQuery\u306b\u7a81\u3063\u8fbc\u307f\u307e\u3059\u3002\n\n# \u4e8b\u524d\u6e96\u5099\n- S3 Logging  \nhttps://docs.aws.amazon.com/ja_jp/AmazonS3/latest/dev/ServerLogs.html\n- S3 Event nortification  \nhttp://docs.aws.amazon.com/ja_jp/AmazonS3/latest/dev/NotificationHowTo.html\n- BigQuery  \nhttp://www.apps-gcp.com/bigquery-introduction/\n\n# Lambda\u5b9f\u884c\u74b0\u5883\n\n- \u30e9\u30f3\u30bf\u30a4\u30e0\u306fPython2.7\n- \u5fc5\u8981\u306a\u30e2\u30b8\u30e5\u30fc\u30eb (\u30ab\u30c3\u30b3\u5185\u306f\u5b9f\u969b\u306b\u4f7f\u7528\u3057\u305f\u30d0\u30fc\u30b8\u30e7\u30f3)\n    - boto3 (Lambda\u30c7\u30d5\u30a9\u30eb\u30c8)\n    - pytz (2015.7)\n    - gcloud (0.8.0)\n\n\n# S3 Logging\u306e\u30ed\u30b0\u30d5\u30a9\u30fc\u30de\u30c3\u30c8\u3068BigQuery\u306e\u30b9\u30ad\u30fc\u30de\n\n## \u30ed\u30b0\u30d5\u30a9\u30fc\u30de\u30c3\u30c8\n\u3053\u3061\u3089\u306b\u66f8\u3044\u3066\u307e\u3059\u3002\nhttps://docs.aws.amazon.com/AmazonS3/latest/dev/LogFormat.html\n\n## \u30ed\u30b0\u3092\u30d1\u30fc\u30b9\u3059\u308b\u305f\u3081\u306e\u6b63\u898f\u8868\u73fe\n\u5404\u30e9\u30d9\u30eb\u304c\u305d\u306e\u307e\u307e\u6b21\u306e\u30b9\u30ad\u30fc\u30de\u306b\u304a\u3051\u308b\u30ab\u30e9\u30e0\u540d\u306b\u5bfe\u5fdc\u3059\u308b\u611f\u3058\u3002\n\n```\n^(?P<owner>[^ ]+) (?P<bucket>[^ ]+) \\[(?P<datetime>.+)\\] (?P<remote_ip>[^ ]+) (?P<requester>[^ ]+) (?P<request_id>[^ ]+) (?P<operation>[^ ]+) (?P<key>[^ ]+) \"(?P<method>[^ ]+) (?P<uri>[^ ]+) (?P<proto>.+)\" (?P<status>[^ ]+) (?P<error>[^ ]+) (?P<bytes>[^ ]+) (?P<size>[^ ]+) (?P<total_time>[^ ]+) (?P<ta_time>[^ ]+) \"(?P<referrer>.+)\" \"(?P<user_agent>.+)\" (?P<version>.+)$\n```\n\n## \u30b9\u30ad\u30fc\u30de\n\u30d5\u30a9\u30fc\u30de\u30c3\u30c8\u306b\u5408\u308f\u305b\u3066\u3053\u3093\u306a\u611f\u3058\u3002\n`datetime` \u30ab\u30e9\u30e0\u306fTIMESTAMP\u578b\u306e\u65b9\u304c\u826f\u3055\u305d\u3046\u3067\u3059\u304c\u3001\u8a73\u3057\u304f\u306f\u5f8c\u8ff0\u3057\u307e\u3059\u304c\u4e8b\u60c5\u304c\u3042\u308a\u4eca\u56de\u306fSTRING\u306b\u3057\u307e\u3057\u305f\u3002\n\n|\u30ab\u30e9\u30e0\u540d|\u578b|\n|:-----|:---|\n|owner|STRING|\n|bucket|STRING|\n|datetime|STRING|\n|remote_ip|STRING|\n|requester|STRING|\n|request_id|STRING|\n|operation|STRING|\n|key|STRING|\n|method|STRING|\n|uri|STRING|\n|proto|STRING|\n|status|STRING|\n|error|STRING|\n|bytes|INTEGER|\n|size|INTEGER|\n|total_time|INTEGER|\n|ta_time|INTEGER|\n|referrer|STRING|\n|user_agent|STRING|\n|version|STRING|\n\n# \u30bd\u30fc\u30b9\n`<your-*>`\u306a\u90e8\u5206\u306f\u9069\u5b9c\u7f6e\u304d\u63db\u3048\u3066\u304f\u3060\u3055\u3044\u3002\n\n```py\nimport os\nimport json\nimport urllib\nimport boto3\nimport re\nimport datetime\nimport pytz\nfrom gcloud import bigquery\n\nBQ_PROJECT = '<your-project-id>'\nBQ_DATASET = '<your-dataset-name>'\nBQ_TABLE = '<your-table-name>'\n\ns3 = boto3.client('s3')\nbq = bigquery.Client.from_service_account_json(\n    os.path.join(os.path.dirname(__file__), 'bq.json'),\n    project=BQ_PROJECT)\ndataset = bq.dataset(BQ_DATASET)\ntable = dataset.table(name=BQ_TABLE)\ntable.reload()\n\npattern = ' '.join([\n    '^(?P<owner>[^ ]+)',\n    '(?P<bucket>[^ ]+)',\n    '\\[(?P<datetime>.+)\\]',\n    '(?P<remote_ip>[^ ]+)',\n    '(?P<requester>[^ ]+)',\n    '(?P<request_id>[^ ]+)',\n    '(?P<operation>[^ ]+)',\n    '(?P<key>[^ ]+)',\n    '\"(?P<method>[^ ]+) (?P<uri>[^ ]+) (?P<proto>.+)\"',\n    '(?P<status>[^ ]+)',\n    '(?P<error>[^ ]+)',\n    '(?P<bytes>[^ ]+)',\n    '(?P<size>[^ ]+)',\n    '(?P<total_time>[^ ]+)',\n    '(?P<ta_time>[^ ]+)',\n    '\"(?P<referrer>.+)\"',\n    '\"(?P<user_agent>.+)\"',\n    '(?P<version>.+)$'])\nlog_pattern = re.compile(pattern)\n\ndef to_int(val):\n    try:\n        ret = int(val)\n    except ValueError:\n        ret = None\n    return ret\n\ndef lambda_handler(event, context):\n    bucket = event['Records'][0]['s3']['bucket']['name']\n    key = urllib.unquote_plus(event['Records'][0]['s3']['object']['key']).decode('utf8')\n    res = s3.get_object(Bucket=bucket, Key=key)\n    body = res['Body'].read()\n    rows = []\n\n    for line in body.splitlines():\n        matches = log_pattern.match(line)\n        dt_str = matches.group('datetime').split(' ')[0]\n        timestamp = datetime.datetime.strptime(\n            dt_str, '%d/%b/%Y:%H:%M:%S').replace(tzinfo=pytz.utc)\n\n        rows.append((\n            matches.group('owner'),\n            matches.group('bucket'),\n            timestamp.strftime('%Y-%m-%d %H:%M:%S'),\n            matches.group('remote_ip'),\n            matches.group('requester'),\n            matches.group('request_id'),\n            matches.group('operation'),\n            matches.group('key'),\n            matches.group('method'),\n            matches.group('uri'),\n            matches.group('proto'),\n            matches.group('status'),\n            matches.group('error'),\n            to_int(matches.group('bytes')),\n            to_int(matches.group('size')),\n            to_int(matches.group('total_time')),\n            to_int(matches.group('ta_time')),\n            matches.group('referrer'),\n            matches.group('user_agent'),\n            matches.group('version'),))\n    print(table.insert_data(rows))\n```\n\n## \u6ce8\u610f\u4e8b\u9805\u306a\u3069\n- GCP\u306eAPI Manager\u304b\u3089JSON\u5f62\u5f0f\u306e\u8a8d\u8a3c\u60c5\u5831\u3092\u53d6\u5f97\u3057\u3066`bq.json`\u3068\u3044\u3046\u540d\u524d\u3067Lambda function\u306e\u30c7\u30d7\u30ed\u30a4\u30d1\u30c3\u30b1\u30fc\u30b8\u306b\u542b\u3081\u308b [^1]\n- \u672c\u4f53\u306a\u3089`datetime`\u306e\u90e8\u5206\u306f`%d/%b/%Y:%H:%M:%S %z`\u3067\u30d1\u30fc\u30b9\u3067\u304d\u308b\u306f\u305a\u3060\u304c\u3001Python < 3.2\u306e\u30d0\u30b0\u3067`%z`\u304c\u30a8\u30e9\u30fc\u3067\u4f7f\u3048\u306a\u3044\u306e\u3067`pytz`\u3092\u7d61\u3081\u305f\u5909\u5247\u7684\u306a\u65b9\u6cd5\u306b\u306a\u3063\u3066\u3044\u308b [^2]\n- \u672c\u6765\u306fTIMESTAMP\u578b\u30ab\u30e9\u30e0\u306bdatetime\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u6307\u5b9a\u3059\u308b\u306e\u304c\u6b63\u3060\u304c\u3001`gcloud (0.8.0)`\u306e\u30d0\u30b0\uff1f\u306a\u306e\u304bBigQuery\u304c\u79d2\u5358\u4f4d\u306a\u306e\u306b\u5bfe\u3057\u3066\u30df\u30ea\u79d2\u3067\u4fdd\u5b58\u3057\u3088\u3046\u3068\u3057\u3066\u3042\u308a\u3048\u306a\u3044\u5e74\u6708\u65e5\u306b\u306a\u3063\u3066\u3057\u307e\u3046\u306e\u3067\u6ce8\u610f\n- \u30ed\u30b0\u306e\u5404\u9805\u76ee\u306f\u51fa\u529b\u3059\u3079\u304d\u30c7\u30fc\u30bf\u304c\u306a\u3044\u5834\u5408\u306f`-`\u306b\u306a\u308b\u3002int\u306b\u5909\u63db\u3057\u305f\u3044\u9805\u76ee\u306a\u3069\u306f\u305d\u306e\u307e\u307e`int('-')`\u3068\u5909\u63db\u3059\u308b\u3068\u4f8b\u5916\u306b\u306a\u308b\u306e\u3067\u6ce8\u610f\n- Google Cloud Client for Python(gcloud)\u306e[\u516c\u5f0f\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8](http://googlecloudplatform.github.io/gcloud-python/stable/bigquery-usage.html)\u306f\u6240\u3005\u53e4\u3044\u306e\u3067[\u30bd\u30fc\u30b9](https://github.com/GoogleCloudPlatform/gcloud-python)\u898b\u306a\u304c\u3089\u306e\u5b9f\u88c5\u304c\u5fc5\u8981\u3060\u3063\u305f\uff082015.11.26\u73fe\u5728\uff09\n\n\n\u3061\u306a\u307f\u306b\u95a2\u4fc2\u306a\u3044\u3067\u3059\u304c\u3001Lambda for Python\u306e\u30c7\u30d7\u30ed\u30a4\u306f\u62d9\u4f5c\u3067\u3059\u304c\u4e0b\u8a18\u3092\u4f7f\u3063\u3066\u3044\u307e\u3059\u3002\n\u307e\u3060\u307e\u3060\u958b\u767a\u4e2d\u3067\u3059\u304c\u666e\u901a\u306b\u4f7f\u3063\u3066\u3066\u4fbf\u5229\u306a\u611f\u3058\u306b\u306f\u306a\u3063\u3066\u304d\u3066\u308b\u306e\u3067\u826f\u304b\u3063\u305f\u3089\u304a\u8a66\u3057\u304f\u3060\u3055\u3044\u3002\nhttps://github.com/marcy-terui/lamvery\n\n[^1]: Lambda\u306b\u304a\u3051\u308b\u6a5f\u5bc6\u60c5\u5831\u306e\u6c17\u306e\u5229\u3044\u305f\u53d7\u3051\u6e21\u3057\u65b9\u6c42\u3080\n[^2]: \u65e9\u304fPython3\u5bfe\u5fdc\u3057\u3066\u6b32\u3057\u3044\u3068\u3053\u308d\n", "tags": ["AWS", "lambda", "S3", "bigquery", "Python"]}