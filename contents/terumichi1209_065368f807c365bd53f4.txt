{"tags": ["S3", "PHP", "AWS"], "context": " More than 1 year has passed since last update.\u7c21\u6613\u7684\u306bS3\u3092\u5229\u7528\u3059\u308b\u30e1\u30e2\n\u53c2\u7167\uff1aAWSSDKforPHP\n\nS3Model.php\n/*\n$s3Config = array(\n    'access_key' => 'ahoge', // \u30a2\u30af\u30bb\u30b9\u30ad\u30fc\n    'secret_key' => 'shoge', // \u30b7\u30fc\u30af\u30ec\u30c3\u30c8\u30ad\u30fc\n    'bucket'     => 'bhoge'  // \u30d0\u30b1\u30c3\u30c8\u540d\n    );\n*/\n// S3\u63a5\u7d9a\nfunction connectS3($s3Config, $createFlg = true) {\n    $this->_initS3($s3Config);\n    $result = $this->_existBucket($s3Config['bucket']);\n\n    // \u30d0\u30b1\u30c3\u30c8\u304c\u5b58\u5728\u3057\u306a\u3044\u5834\u5408\u3001\u65b0\u898f\u4f5c\u6210\n    if (!$result && $createFlg) {\n        $this->s3->createBucket(array(\n            'LocationConstraint' => 'ap-northeast-1', \n            'Bucket' => $s3Config['bucket']\n            ));\n        /*\n        LocationConstraint\u306e\u5024\u306f\u4ee5\u4e0b\u304b\u3089\u9078\u629e\n            'ap-northeast-1'\n            'us-west-2'\n            'us-west-1'\n            'eu-west-1'\n            'eu-central-1'\n            'ap-southeast-1'\n            'ap-southeast-2'\n            'sa-east-1'\n\n        \u30ed\u30b1\u30fc\u30b7\u30e7\u30f3\u306b\u3088\u308a\u3001S3\u306e\u5229\u7528\u901f\u5ea6\u304c\u5909\u308f\u3063\u3066\u304d\u307e\u3059\u3002\n        \u300cap-northeast-1\u300d\uff08Tokyo\uff09\u56fa\u5b9a\u3067\u826f\u3044\u304b\u3082\u3002\n        */\n    }\n}\n\n\n// S3\u5229\u7528\u6e96\u5099\nprivate function _initS3($s3Config) {\n    if (isset($this->s3)) return;\n\n    $params = array(\n        'key'      => $s3Config['access_key'],\n        'secret'   => $s3Config['secret_key'],\n    );\n    $this->s3 = S3Client::factory($params);\n}\n\n\n// \u30d0\u30b1\u30c3\u30c8\u78ba\u8a8d\nprivate function _existBucket($bucketName) {\n    $bucketList = $this->s3->listBuckets();\n    foreach ($bucketList[\"Buckets\"] as $bucket) {\n        if ($bucket['Name'] === $bucketName) {\n            return true;\n        }\n    }\n    return false;\n}\n\n// \u30d0\u30b1\u30c3\u30c8\u524a\u9664\nfunction deleteBucket($s3Config) {\n    $this->_initS3($s3Config);\n\n    // \u524a\u9664\u3059\u308b\u30d0\u30b1\u30c3\u30c8\u306e\u30ea\u30fc\u30b8\u30e7\u30f3\u3092\u8a2d\u5b9a\n    $this->s3->setRegion('ap-northeast-1');\n\n    return $this->s3->deleteBucket(array(\n        'Bucket' => $s3Config['bucket']\n        ));\n}\n\n\n\n\u7c21\u6613\u7684\u306bS3\u3092\u5229\u7528\u3059\u308b\u30e1\u30e2\n\u53c2\u7167\uff1a[AWSSDKforPHP](http://docs.aws.amazon.com/aws-sdk-php/latest/class-Aws.S3.S3Client.html)\n\n``` php:S3Model.php\n/*\n$s3Config = array(\n\t'access_key' => 'ahoge', // \u30a2\u30af\u30bb\u30b9\u30ad\u30fc\n\t'secret_key' => 'shoge', // \u30b7\u30fc\u30af\u30ec\u30c3\u30c8\u30ad\u30fc\n\t'bucket'     => 'bhoge'  // \u30d0\u30b1\u30c3\u30c8\u540d\n\t);\n*/\n// S3\u63a5\u7d9a\nfunction connectS3($s3Config, $createFlg = true) {\n\t$this->_initS3($s3Config);\n\t$result = $this->_existBucket($s3Config['bucket']);\n\t\n\t// \u30d0\u30b1\u30c3\u30c8\u304c\u5b58\u5728\u3057\u306a\u3044\u5834\u5408\u3001\u65b0\u898f\u4f5c\u6210\n\tif (!$result && $createFlg) {\n\t\t$this->s3->createBucket(array(\n\t\t\t'LocationConstraint' => 'ap-northeast-1', \n\t\t\t'Bucket' => $s3Config['bucket']\n\t\t\t));\n\t\t/*\n\t\tLocationConstraint\u306e\u5024\u306f\u4ee5\u4e0b\u304b\u3089\u9078\u629e\n\t\t\t'ap-northeast-1'\n\t\t\t'us-west-2'\n\t\t\t'us-west-1'\n\t\t\t'eu-west-1'\n\t\t\t'eu-central-1'\n\t\t\t'ap-southeast-1'\n\t\t\t'ap-southeast-2'\n\t\t\t'sa-east-1'\n\t\t\n\t\t\u30ed\u30b1\u30fc\u30b7\u30e7\u30f3\u306b\u3088\u308a\u3001S3\u306e\u5229\u7528\u901f\u5ea6\u304c\u5909\u308f\u3063\u3066\u304d\u307e\u3059\u3002\n\t\t\u300cap-northeast-1\u300d\uff08Tokyo\uff09\u56fa\u5b9a\u3067\u826f\u3044\u304b\u3082\u3002\n\t\t*/\n\t}\n}\n\n\n// S3\u5229\u7528\u6e96\u5099\nprivate function _initS3($s3Config) {\n\tif (isset($this->s3)) return;\n\n\t$params = array(\n\t\t'key'      => $s3Config['access_key'],\n\t\t'secret'   => $s3Config['secret_key'],\n\t);\n\t$this->s3 = S3Client::factory($params);\n}\n\n\n// \u30d0\u30b1\u30c3\u30c8\u78ba\u8a8d\nprivate function _existBucket($bucketName) {\n    $bucketList = $this->s3->listBuckets();\n    foreach ($bucketList[\"Buckets\"] as $bucket) {\n        if ($bucket['Name'] === $bucketName) {\n            return true;\n        }\n    }\n    return false;\n}\n\n// \u30d0\u30b1\u30c3\u30c8\u524a\u9664\nfunction deleteBucket($s3Config) {\n\t$this->_initS3($s3Config);\n\n\t// \u524a\u9664\u3059\u308b\u30d0\u30b1\u30c3\u30c8\u306e\u30ea\u30fc\u30b8\u30e7\u30f3\u3092\u8a2d\u5b9a\n\t$this->s3->setRegion('ap-northeast-1');\n\n\treturn $this->s3->deleteBucket(array(\n\t\t'Bucket' => $s3Config['bucket']\n\t\t));\n}\n\t\n"}