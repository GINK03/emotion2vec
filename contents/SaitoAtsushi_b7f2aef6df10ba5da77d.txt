{"context": " More than 1 year has passed since last update.\u914d\u5217\u306e\u6dfb\u5b57\u3068\u3057\u3066\u5217\u6319\u578b\u3092\u4f7f\u3048\u308b\u3088\u3046\u306a\u5b9a\u7fa9\u3092\u8003\u3048\u307e\u3057\u305f\u3002\n\u3053\u306e\u767a\u60f3\u306e\u5143\u306b\u306a\u3063\u305f\u306e\u306f\u300c\u3010\u4eca\u3055\u3089\u3011ENUM\u3068INT\u3078\u306e\u5909\u63db\u3010\u30ad\u30e3\u30b9\u30c8\u3011\u300d\u3068\u3044\u3046\u8a18\u4e8b\u3067\u3059\u3002\n\u305d\u3053\u3067\u306f\u3001\u914d\u5217\u306b\u30a2\u30af\u30bb\u30b9\u3059\u308b\u305f\u3081\u306b\u5217\u6319\u578b\u3092\u6570\u5024\u3078 static_cast \u3067\u967d\u306b\u5909\u63db\u3057\u3066\u3044\u307e\u3057\u305f\u3002\n\u79c1\u306f\u305d\u308c\u3092\u96a0\u853d\u3067\u304d\u306a\u3044\u304b\u3068\u8003\u3048\u3066\u51fa\u6765\u305f\u306e\u304c\u4ee5\u4e0b\u306e\u5b9a\u7fa9\u3067\u3059\u3002\n#include <initializer_list>\n#include <algorithm>\n#include <type_traits>\n#include <cassert>\n\ntemplate<class V, class IX>\nclass array_wrapper {\nprivate:\n  static_assert(std::is_enum<IX>::value, \"Index class is not enum type.\");\n  size_t size;\npublic:\n  typedef V  value_type;\n  typedef IX index_type;\n  typedef typename std::underlying_type<IX>::type underlying_type;\n  value_type *raw_array;\n\n  array_wrapper(std::initializer_list<V> il)\n    : size (il.size()), raw_array (new V[size]) {\n    std::copy(il.begin(), il.end(), raw_array);\n  }\n\n  value_type& operator[](const index_type index) const {\n    underlying_type index_number = static_cast<underlying_type>(index);\n    assert(index_number < size);\n    return raw_array[index_number];\n  }\n\n  ~array_wrapper() {\n    delete[] raw_array;\n  }\n};\n\n\u3053\u306e\u5b9a\u7fa9 array_wrapper \u3092\u7528\u3044\u3066\u914d\u5217\u3092\u5b9a\u7fa9\u3057\u307e\u3059\u3002\nenum struct index_type {\n  OTTORI,\n  SEKKACHI\n};\n\narray_wrapper<const char*, index_type> gamemodes = {\n  \"score mode\",\n  \"time trial mode\"\n};\n\n\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u5f15\u6570\u306b\u306f\u8981\u7d20\u306e\u578b\u3068\u6dfb\u5b57\u306e\u578b\u3092\u6e21\u3057\u3066\u3044\u307e\u3059\u3002\n\u3053\u306e gamemodes \u3068\u3044\u3046\u914d\u5217\u306b\u30a2\u30af\u30bb\u30b9\u3059\u308b\u306b\u306f\u5b9a\u7fa9\u6642\u306b\u6c7a\u3081\u305f\u6dfb\u5b57\u306e\u578b\u306e\u307f\u304c\u4f7f\u3048\u307e\u3059\u3002\nenum struct another_index_type {\n  MUHU,\n  WAHA\n};\n\nint main(void) {\n  const char* gamemode = gamemodes[index_type::OTTORI];\n  // \u4ed6\u306e\u5217\u6319\u578b\u306e\u5024\u3084\u6570\u5024\u3067\u8981\u7d20\u306b\u30a2\u30af\u30bb\u30b9\u3059\u308b\u3053\u3068\u306f\u51fa\u6765\u306a\u3044\u3002\n  // const char* gamemode2 = gamemodes[another_index_type::MUHU];\n  // const char* gamemode3 = gamemodes[0];\n  return 0;\n}\n\n\u6dfb\u5b57\u306b\u4f7f\u3046\u5217\u6319\u578b\u304c\u914d\u5217\u306e\u5b9a\u7fa9\u6642\u306b\u7d50\u3073\u4ed8\u3051\u3089\u308c\u3066\u3057\u307e\u3046\u306e\u3067\u3001\u3046\u3063\u304b\u308a\u5225\u306e\u578b\u3092\u4f7f\u3063\u3066\u3057\u307e\u3046\u3068\u3044\u3046\u3053\u3068\u304c\u3042\u308a\u307e\u305b\u3093\u3057\u3001\u914d\u5217\u306e\u5927\u304d\u3055\u3092\u8d8a\u3048\u3066\u30a2\u30af\u30bb\u30b9\u3057\u3066\u3057\u307e\u3046\u3068\u3044\u3046\u3053\u3068\u3082\u306a\u3044\u3088\u3046\u306b\u30c1\u30a7\u30c3\u30af\u3092\u5165\u308c\u3066\u3044\u307e\u3059\u3002\n\u30a2\u30af\u30bb\u30b9\u3059\u308b\u305f\u3073\u306b static_cast \u3067\u5909\u63db\u3092\u5165\u308c\u308b\u3068\u3044\u3046\u5fc5\u8981\u3082\u306a\u3044\u306e\u3067\u5c11\u3057\u898b\u305f\u76ee\u3082\u30b9\u30c3\u30ad\u30ea\u3068\u3059\u308b\u3068\u601d\u3044\u307e\u3059\u3002\n\u914d\u5217\u306e\u6dfb\u5b57\u3068\u3057\u3066\u5217\u6319\u578b\u3092\u4f7f\u3048\u308b\u3088\u3046\u306a\u5b9a\u7fa9\u3092\u8003\u3048\u307e\u3057\u305f\u3002\n\n\u3053\u306e\u767a\u60f3\u306e\u5143\u306b\u306a\u3063\u305f\u306e\u306f\u300c[\u3010\u4eca\u3055\u3089\u3011ENUM\u3068INT\u3078\u306e\u5909\u63db\u3010\u30ad\u30e3\u30b9\u30c8\u3011](http://qiita.com/KawabataLemon/items/4451a90158ff523539bf)\u300d\u3068\u3044\u3046\u8a18\u4e8b\u3067\u3059\u3002\n\u305d\u3053\u3067\u306f\u3001\u914d\u5217\u306b\u30a2\u30af\u30bb\u30b9\u3059\u308b\u305f\u3081\u306b\u5217\u6319\u578b\u3092\u6570\u5024\u3078 static_cast \u3067\u967d\u306b\u5909\u63db\u3057\u3066\u3044\u307e\u3057\u305f\u3002\n\u79c1\u306f\u305d\u308c\u3092\u96a0\u853d\u3067\u304d\u306a\u3044\u304b\u3068\u8003\u3048\u3066\u51fa\u6765\u305f\u306e\u304c\u4ee5\u4e0b\u306e\u5b9a\u7fa9\u3067\u3059\u3002\n\n```cpp\n#include <initializer_list>\n#include <algorithm>\n#include <type_traits>\n#include <cassert>\n\ntemplate<class V, class IX>\nclass array_wrapper {\nprivate:\n  static_assert(std::is_enum<IX>::value, \"Index class is not enum type.\");\n  size_t size;\npublic:\n  typedef V  value_type;\n  typedef IX index_type;\n  typedef typename std::underlying_type<IX>::type underlying_type;\n  value_type *raw_array;\n\n  array_wrapper(std::initializer_list<V> il)\n    : size (il.size()), raw_array (new V[size]) {\n    std::copy(il.begin(), il.end(), raw_array);\n  }\n\n  value_type& operator[](const index_type index) const {\n    underlying_type index_number = static_cast<underlying_type>(index);\n    assert(index_number < size);\n    return raw_array[index_number];\n  }\n\n  ~array_wrapper() {\n    delete[] raw_array;\n  }\n};\n```\n\n\u3053\u306e\u5b9a\u7fa9 array_wrapper \u3092\u7528\u3044\u3066\u914d\u5217\u3092\u5b9a\u7fa9\u3057\u307e\u3059\u3002\n\n```cpp\nenum struct index_type {\n  OTTORI,\n  SEKKACHI\n};\n\narray_wrapper<const char*, index_type> gamemodes = {\n  \"score mode\",\n  \"time trial mode\"\n};\n```\n\n\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u5f15\u6570\u306b\u306f\u8981\u7d20\u306e\u578b\u3068\u6dfb\u5b57\u306e\u578b\u3092\u6e21\u3057\u3066\u3044\u307e\u3059\u3002\n\u3053\u306e gamemodes \u3068\u3044\u3046\u914d\u5217\u306b\u30a2\u30af\u30bb\u30b9\u3059\u308b\u306b\u306f\u5b9a\u7fa9\u6642\u306b\u6c7a\u3081\u305f\u6dfb\u5b57\u306e\u578b\u306e\u307f\u304c\u4f7f\u3048\u307e\u3059\u3002\n\n```cpp\nenum struct another_index_type {\n  MUHU,\n  WAHA\n};\n\nint main(void) {\n  const char* gamemode = gamemodes[index_type::OTTORI];\n  // \u4ed6\u306e\u5217\u6319\u578b\u306e\u5024\u3084\u6570\u5024\u3067\u8981\u7d20\u306b\u30a2\u30af\u30bb\u30b9\u3059\u308b\u3053\u3068\u306f\u51fa\u6765\u306a\u3044\u3002\n  // const char* gamemode2 = gamemodes[another_index_type::MUHU];\n  // const char* gamemode3 = gamemodes[0];\n  return 0;\n}\n```\n\n\u6dfb\u5b57\u306b\u4f7f\u3046\u5217\u6319\u578b\u304c\u914d\u5217\u306e\u5b9a\u7fa9\u6642\u306b\u7d50\u3073\u4ed8\u3051\u3089\u308c\u3066\u3057\u307e\u3046\u306e\u3067\u3001\u3046\u3063\u304b\u308a\u5225\u306e\u578b\u3092\u4f7f\u3063\u3066\u3057\u307e\u3046\u3068\u3044\u3046\u3053\u3068\u304c\u3042\u308a\u307e\u305b\u3093\u3057\u3001\u914d\u5217\u306e\u5927\u304d\u3055\u3092\u8d8a\u3048\u3066\u30a2\u30af\u30bb\u30b9\u3057\u3066\u3057\u307e\u3046\u3068\u3044\u3046\u3053\u3068\u3082\u306a\u3044\u3088\u3046\u306b\u30c1\u30a7\u30c3\u30af\u3092\u5165\u308c\u3066\u3044\u307e\u3059\u3002\n\u30a2\u30af\u30bb\u30b9\u3059\u308b\u305f\u3073\u306b static_cast \u3067\u5909\u63db\u3092\u5165\u308c\u308b\u3068\u3044\u3046\u5fc5\u8981\u3082\u306a\u3044\u306e\u3067\u5c11\u3057\u898b\u305f\u76ee\u3082\u30b9\u30c3\u30ad\u30ea\u3068\u3059\u308b\u3068\u601d\u3044\u307e\u3059\u3002\n", "tags": ["C++", "C++11"]}