{"context": " More than 1 year has passed since last update.Today I found that android stdio supported the ndk.\nSo I try to write some code to test it.\nFirst add the jni folder from File->New->Folder->JNI Folder.\nThen create a class called HelloWorld in the jni folder.\nWrite some code like this:\n\nHelloWorld.h\n#ifndef MY_APPLICATION_HELLOWORLD_H\n#define MY_APPLICATION_HELLOWORLD_H\n\n#include <string.h>\n#include <jni.h>\n\n\nclass HelloWorld {\npublic:\n    void say();\n};\n\nextern \"C\" {\njstring Java_jp_myapplication_MainActivity_invokeNativeFunction(JNIEnv* env, jobject javaThis) {\n    HelloWorld *hello_world = new HelloWorld();\n    hello_world->say();\n    delete  hello_world;\n    return env->NewStringUTF(\"Hello from native code!\");\n}\n}\n\n#endif //MY_APPLICATION_HELLOWORLD_\n\n\n\nHelloWorld.cpp\n#include \"HelloWorld.h\"\n#include <cstdio>\n\nvoid HelloWorld::say() {\n    printf(\"Hello world!\");\n}\n\n\nThen in the MainActivity load the library and call the native method.\n\nMainActivity.java\n\npublic class MainActivity extends AppCompatActivity {\n    static {\n        System.loadLibrary(\"app\");\n    }\n\n    private native String invokeNativeFunction();\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_main);\n\n        String hello = invokeNativeFunction();\n\n        new AlertDialog.Builder(this).setMessage(hello).show();\n    }\n}\n\n\nToday I found that android stdio supported the ndk.\nSo I try to write some code to test it.\n\nFirst add the `jni` folder from File->New->Folder->JNI Folder.\n\nThen create a class called `HelloWorld` in the jni folder.\nWrite some code like this:\n\n```cpp:HelloWorld.h\n#ifndef MY_APPLICATION_HELLOWORLD_H\n#define MY_APPLICATION_HELLOWORLD_H\n\n#include <string.h>\n#include <jni.h>\n\n\nclass HelloWorld {\npublic:\n    void say();\n};\n\nextern \"C\" {\njstring Java_jp_myapplication_MainActivity_invokeNativeFunction(JNIEnv* env, jobject javaThis) {\n    HelloWorld *hello_world = new HelloWorld();\n    hello_world->say();\n    delete  hello_world;\n    return env->NewStringUTF(\"Hello from native code!\");\n}\n}\n\n#endif //MY_APPLICATION_HELLOWORLD_\n```\n\n```cpp:HelloWorld.cpp\n#include \"HelloWorld.h\"\n#include <cstdio>\n\nvoid HelloWorld::say() {\n    printf(\"Hello world!\");\n}\n```\n\nThen in the MainActivity load the library and call the native method.\n\n```java:MainActivity.java\n\npublic class MainActivity extends AppCompatActivity {\n    static {\n        System.loadLibrary(\"app\");\n    }\n\n    private native String invokeNativeFunction();\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_main);\n\n        String hello = invokeNativeFunction();\n\n        new AlertDialog.Builder(this).setMessage(hello).show();\n    }\n}\n```\n", "tags": ["AndroidStudio", "NDK"]}