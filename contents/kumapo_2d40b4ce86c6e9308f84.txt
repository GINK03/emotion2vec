{"context": " More than 1 year has passed since last update.RxSwift \u306e\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u3092\u898b\u3066\u3044\u308b\u3068 \u6b21\u306e\u3088\u3046\u306a\u30b3\u30fc\u30c9\u304c\u3088\u304f\u767b\u5834\u3057\u307e\u3059\u3002\n        textField.rx_text\n            .subscribeNext { [weak self] x in\n                self?.debug(\"UITextField text \\(x)\")\n                self?.textField.resignFirstResponder()\n            }\n            .addDisposableTo(disposeBag)\n\nReactiveCocoa \u306b\u306a\u3044\u30e1\u30bd\u30c3\u30c9\u306a\u306e\u3067 \u6c17\u306b\u306a\u3063\u3066\u8abf\u3079\u307e\u3057\u305f\u3002\n\ndispose \u3068\u306f\nsequence \u3092\u305f\u3060\u3061\u306b\u4e2d\u65ad\u3059\u308b\u305f\u3081\u306e\u30e1\u30bd\u30c3\u30c9\u3067\u3059\u3002\n\nhttps://github.com/ReactiveX/RxSwift/blob/master/Documentation/GettingStarted.md: \nTo cancel production of sequence elements and free resources immediatelly, call dispose on returned subscription.\n\n\n\u66f8\u304b\u306a\u3044\u3068 \u30e1\u30e2\u30ea\u30ea\u30fc\u30af\u3059\u308b\u306e\uff1f\nsequence \u304c Complete \u3082\u3057\u304f\u306f Error \u3092 send \u3059\u308b\u3068 \u30ea\u30bd\u30fc\u30b9\u306f\u958b\u653e\u3055\u308c\u307e\u3059\u3002\u3053\u306e\u3042\u305f\u308a\u306f ReactiveCocoa \u3068\u540c\u3058\u3067\u3059\u306d\u3002\n\nWhen sequence sends Complete or Error event all internal resources that compute sequence elements will be freed.\n\n\u306a\u306e\u3067 \u6709\u9650\u6642\u9593\u3067\u5b8c\u7d50\u3059\u308b sequence \u306f dispose \u3057\u306a\u304f\u3066\u3082\u30ea\u30fc\u30af\u3057\u306a\u3044\u3067\u3059\u3002\u3082\u3061\u308d\u3093 \u5b8c\u7d50\u3057\u306a\u3044\u3068 sequence \u306f\u305d\u306e\u9593 \u30ea\u30bd\u30fc\u30b9\u304c\u78ba\u4fdd\u3055\u308c\u307e\u3059\u3002\n\nIf a sequence terminates in finite time, not calling dispose or not using addDisposableTo(disposeBag) won't cause any permanent resource leaks, but those resources will be used until sequence completes in some way (finishes producing elements or error happens).\nIf a sequence doesn't terminate in some way, resources will be allocated permanently unless dispose is being called manually, automatically inside of a disposeBag, scopedDispose, takeUntil or some other way.\n\n\u3068\u3044\u3046\u308f\u3051\u3067 \u63a8\u5968\u3068\u3057\u3066\u306f dispose bags \u3092\u4f7f\u3044\u307e\u3057\u3087\u3046\u3002\n\nwe recommend using them in production even though sequence will terminate in finite time.\n\nRxSwift \u306e\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u3092\u898b\u3066\u3044\u308b\u3068 \u6b21\u306e\u3088\u3046\u306a\u30b3\u30fc\u30c9\u304c\u3088\u304f\u767b\u5834\u3057\u307e\u3059\u3002\n\n```\n        textField.rx_text\n            .subscribeNext { [weak self] x in\n                self?.debug(\"UITextField text \\(x)\")\n                self?.textField.resignFirstResponder()\n            }\n            .addDisposableTo(disposeBag)\n```\n\nReactiveCocoa \u306b\u306a\u3044\u30e1\u30bd\u30c3\u30c9\u306a\u306e\u3067 \u6c17\u306b\u306a\u3063\u3066\u8abf\u3079\u307e\u3057\u305f\u3002\n\n\n# dispose \u3068\u306f\n\nsequence \u3092\u305f\u3060\u3061\u306b\u4e2d\u65ad\u3059\u308b\u305f\u3081\u306e\u30e1\u30bd\u30c3\u30c9\u3067\u3059\u3002\n\n> https://github.com/ReactiveX/RxSwift/blob/master/Documentation/GettingStarted.md: \n\n> To cancel production of sequence elements and free resources immediatelly, call dispose on returned subscription.\n\n# \u66f8\u304b\u306a\u3044\u3068 \u30e1\u30e2\u30ea\u30ea\u30fc\u30af\u3059\u308b\u306e\uff1f\n\nsequence \u304c Complete \u3082\u3057\u304f\u306f Error \u3092 send \u3059\u308b\u3068 \u30ea\u30bd\u30fc\u30b9\u306f\u958b\u653e\u3055\u308c\u307e\u3059\u3002\u3053\u306e\u3042\u305f\u308a\u306f ReactiveCocoa \u3068\u540c\u3058\u3067\u3059\u306d\u3002\n\n> When sequence sends Complete or Error event all internal resources that compute sequence elements will be freed.\n\n\u306a\u306e\u3067 \u6709\u9650\u6642\u9593\u3067\u5b8c\u7d50\u3059\u308b sequence \u306f dispose \u3057\u306a\u304f\u3066\u3082\u30ea\u30fc\u30af\u3057\u306a\u3044\u3067\u3059\u3002\u3082\u3061\u308d\u3093 \u5b8c\u7d50\u3057\u306a\u3044\u3068 sequence \u306f\u305d\u306e\u9593 \u30ea\u30bd\u30fc\u30b9\u304c\u78ba\u4fdd\u3055\u308c\u307e\u3059\u3002\n\n> If a sequence terminates in finite time, not calling dispose or not using addDisposableTo(disposeBag) won't cause any permanent resource leaks, but those resources will be used until sequence completes in some way (finishes producing elements or error happens).\n> If a sequence doesn't terminate in some way, resources will be allocated permanently unless dispose is being called manually, automatically inside of a disposeBag, scopedDispose, takeUntil or some other way.\n\n\n\u3068\u3044\u3046\u308f\u3051\u3067 \u63a8\u5968\u3068\u3057\u3066\u306f dispose bags \u3092\u4f7f\u3044\u307e\u3057\u3087\u3046\u3002\n\n> we recommend using them in production even though sequence will terminate in finite time.\n\n\n", "tags": ["Swift", "RxSwift"]}