{"tags": ["Python", "\u753b\u50cf\u51e6\u7406", "\u6570\u5b66", "\u753b\u50cf\u8a8d\u8b58", "sift"], "context": " More than 1 year has passed since last update.\n\n\u672c\u8a18\u4e8b\u306e\u30b4\u30fc\u30eb\n\u30b9\u30b1\u30fc\u30eb\u306e\u5909\u5316\u3084\u56de\u8ee2\u306b\u5f37\u3044\u753b\u50cf\u306e\u7279\u5fb4\u3092\u8a18\u8ff0\u3059\u308b SIFT (Scale Invariant Feature Transform) \u3092\u652f\u3048\u308b Scale-space \u3092\u7406\u89e3\u3057\u5b9f\u88c5\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u308b\u3002\n\n\u95a2\u9023\u3057\u3066\u5f97\u3089\u308c\u308b\u77e5\u8b58\n\nGaussian convolution \u306b\u3088\u308b\u753b\u50cf\u306e\u5e73\u6ed1\u5316\nFourier \u5909\u63db\u3068\u30b5\u30f3\u30d7\u30ea\u30f3\u30b0\u5b9a\u7406\n\n\n\u4f7f\u7528\u3059\u308b\u74b0\u5883\n\n\n\n\u30bd\u30d5\u30c8\u30a6\u30a7\u30a2\u540d\n\u30d0\u30fc\u30b8\u30e7\u30f3\n\n\n\n\nPython\n3.4 or 3.5\n\n\nPillow\n3.1.0\n\n\nNumpy\n1.10\n\n\nScipy\n0.16.1\n\n\nMatplotlib\n1.5.0\n\n\n\n\n\u6ce8\u91c8\n\u672c\u8a18\u4e8b\u306f Morning Project Samurai \u7b2c41\u56de\u30df\u30fc\u30c6\u30a3\u30f3\u30b0\u306e\u8cc7\u6599\u3068\u3057\u3066\u66f8\u304b\u308c\u305f\u3082\u306e\u3067\u3042\u308b\u3002\n\n\u304a\u9858\u3044\n\u3053\u308c\u306f\u30c9\u30e9\u30d5\u30c8\u30d0\u30fc\u30b8\u30e7\u30f3\u3067\u3059\u3002\u30df\u30b9\u306a\u3069\u3092\u767a\u898b\u3055\u308c\u305f\u5834\u5408\u306f\u3001\u3054\u9023\u7d61\u3044\u305f\u3060\u3051\u308b\u3068\u5e78\u3044\u3067\u3059\u3002\n\nScale-space\n\n\u5b9a\u7fa9\n\n\u4e0e\u3048\u3089\u308c\u305f\u753b\u50cf\u304b\u3089\u30b9\u30b1\u30fc\u30eb\u304c\u7570\u306a\u308b\u8907\u6570\u306e\u753b\u50cf\u3092\u751f\u6210\u3059\u308b\u3002\n\u305d\u308c\u3089\u753b\u50cf\u3067\u69cb\u6210\u3055\u308c\u308b\u7a7a\u9593\u3092 Scale-space \u3068\u547c\u3076\u3002\n\n\n\u30e2\u30c1\u30d9\u30fc\u30b7\u30e7\u30f3\n\u4efb\u610f\u306e\u4e0e\u3048\u3089\u308c\u308b\u753b\u50cf\u304b\u3089\u3042\u308b\u7279\u5b9a\u306e\u7269\u4f53\u306e\u691c\u51fa\u3092\u8003\u3048\u308b\u3002\u4f8b\u3048\u3070\u5e02\u8857\u5730\u9053\u8def\u306e\u52d5\u753b\u306e\u4e00\u5834\u9762 \uff08\u753b\u50cf\uff09\u304b\u3089\u4eba\u3092\u691c\u51fa\u3059\u308b\u3053\u3068\u3092\u8003\u3048\u308b\u3002\u3053\u306e\u6642\u3001\u4eba\u306e\u7740\u3066\u3044\u308b\u670d\u306e\u6a21\u69d8\u306e\u8a73\u7d30\u304c\u308f\u304b\u308b\u3088\u3046\u306a\u30b9\u30b1\u30fc\u30eb\u306e\u753b\u50cf\u306f\u5fc5\u8981\u306a\u3044\u3002\u4eba\u306e\u5f62\u306f\u308f\u304b\u308b\u304c\u7740\u3066\u3044\u308b\u670d\u306f\u3069\u3093\u306a\u3082\u306e\u304b\u308f\u304b\u3089\u306a\u3044\u7a0b\u5ea6\u306e\u30b9\u30b1\u30fc\u30eb\u306e\u753b\u50cf\u306e\u65b9\u304c\u826f\u3044\u3002\u8a73\u7d30\u3059\u304e\u308b\u60c5\u5831\u306f\u3080\u3057\u308d\u30ce\u30a4\u30ba\u3068\u306a\u308b\u3002\n\u4e0a\u8ff0\u306e\u3088\u3046\u306b\u3001\u76ee\u7684\u306e\u7269\u4f53\u3092\u691c\u51fa\u3059\u308b\u306e\u306b\u9069\u3057\u305f\u753b\u50cf\u306e\u30b9\u30b1\u30fc\u30eb\u304c\u5b58\u5728\u3059\u308b\u3002\u3057\u304b\u3057\u3001\u73fe\u5b9f\u3067\u306f\u4e0e\u3048\u3089\u308c\u308b\u753b\u50cf\u304c\u3044\u3064\u3082\u9069\u5207\u306a\u30b9\u30b1\u30fc\u30eb\u3068\u306f\u9650\u3089\u306a\u3044\u3002\u305d\u3053\u3067\u3001\u4e0e\u3048\u3089\u308c\u308b\u753b\u50cf\u304b\u3089\u30b9\u30b1\u30fc\u30eb\u304c\u7570\u306a\u308b\u8907\u6570\u306e\u753b\u50cf\u3092\u751f\u6210\u3057\u3066\u96c6\u3081\u305f Scale-space \u3092\u69cb\u6210\u3057\u3001\u305d\u306e\u4e2d\u304b\u3089\u9069\u5207\u306a\u30b9\u30b1\u30fc\u30eb\u306e\u753b\u50cf\u3092\u898b\u3064\u3051\u7269\u4f53\u691c\u51fa\u3092\u884c\u3046\u3002\n\n\u30b9\u30b1\u30fc\u30eb\u3068\u30b9\u30b1\u30fc\u30eb\u30a2\u30c3\u30d7\nScale-space \u306b\u304a\u3044\u3066\u30b9\u30b1\u30fc\u30eb\u30a2\u30c3\u30d7\u3068\u306f\u3001Gaussian convolution \u3068\u547c\u3070\u308c\u308b\u624b\u6cd5\u3092\u7528\u3044\u3066\u5143\u753b\u50cf\u304b\u3089\u8a73\u7d30\u306a\u60c5\u5831\u3092\u53d6\u308a\u9664\u304f\u3053\u3068\u3067\u3042\u308b\u3002\u30b9\u30b1\u30fc\u30eb\u30a2\u30c3\u30d7\u306e\u5ea6\u5408\u3044\u306f Gaussian convolution \u306e\u30d1\u30e9\u30e1\u30bf \u03c3\u03c3\\sigma \u306b\u3088\u3063\u3066\u6c7a\u5b9a\u3055\u308c\u308b\u3002\u30b9\u30b1\u30fc\u30eb \u03c3\u03c3\\sigma \u304c\u5927\u304d\u304f\u306a\u308b\u307b\u3069\u3088\u308a\u591a\u304f\u306e\u60c5\u5831\u304c\u5143\u753b\u50cf\u304b\u3089\u53d6\u308a\u9664\u304b\u308c\u308b\u3002\n\u4f8b\u3048\u3070\u4e0b\u56f3\u3067\u3042\u308c\u3070\u3001\u4e00\u756a\u5de6\u306e\u30aa\u30ea\u30b8\u30ca\u30eb\u753b\u50cf\u306f\u9854\u306e\u7d30\u90e8\u3084\u5e3d\u5b50\u306e\u30d5\u30a1\u30fc\u306e\u6bdb\u307e\u3067\u306f\u3063\u304d\u308a\u3068\u898b\u3066\u53d6\u308b\u3053\u3068\u304c\u3067\u304d\u308b\u3002\u4e00\u756a\u53f3\u306e\u30b9\u30b1\u30fc\u30eb \u03c3=3.2\u03c3=3.2\\sigma = 3.2 \u306e\u753b\u50cf\u3067\u306f\u3001\u307c\u3093\u3084\u308a\u3068\u5973\u6027\u304c\u304a\u308a\u76ee\u9f3b\u7acb\u304c\u306f\u3063\u304d\u308a\u3057\u3066\u3044\u308b\u306a\u3068\u3044\u3046\u3053\u3068\u306f\u308f\u304b\u308b\u304c\u3001\u305d\u308c\u4ee5\u4e0a\u306e\u3053\u3068\u306f\u308f\u304b\u3089\u306a\u3044\u3002\n\n\n\u69cb\u6210\u65b9\u6cd5\n\n\u5143\u753b\u50cf\uff08\u30b0\u30ec\u30fc\u30b9\u30b1\u30fc\u30eb\uff09\u3092\u6e96\u5099\u3002\n\u30b9\u30b1\u30fc\u30eb \u03c3=kn\u03c30\u03c3=kn\u03c30\\sigma = k^{n}\\sigma_{0} \u3068\u3057\u3001nnn \u306e\u521d\u671f\u5024\u3092 000 \u3068\u3059\u308b\u3002\n\u5143\u753b\u50cf\u3092 Gaussian convolution \u3092\u7528\u3044\u3066\u30b9\u30b1\u30fc\u30eb\u30a2\u30c3\u30d7\u3002 \nkn=2.0kn=2.0k^{n}=2.0 \u3068\u306a\u308b\u307e\u3067 nnn \u3092 1,2,3,...1,2,3,...1, 2, 3,... \u3068\u5897\u52a0\u3055\u305b\u306a\u304c\u3089\u624b\u98063\u3092\u7e70\u308a\u8fd4\u3059\u3002kkk \u306f kn=2.0kn=2.0k^{n}=2.0 \u3068\u306a\u308b\u307e\u3067\u306b\u4f55\u679a\u306e\u753b\u50cf\u3092\u4f5c\u308a\u305f\u3044\u304b\u306b\u3088\u3063\u3066\u6c7a\u5b9a\u3055\u308c\u308b\u3002\n\u30b9\u30b1\u30fc\u30eb \u03c3=2.0\u03c30\u03c3=2.0\u03c30\\sigma = 2.0\\sigma_{0} \u306e\u753b\u50cf\u3092\u7e26\u3068\u6a2a\u304c\u534a\u5206\u306e\u30b5\u30a4\u30ba\u306b\u306a\u308b\u3088\u3046\u30c0\u30a6\u30f3\u30b5\u30f3\u30d7\u30ea\u30f3\u30b0\u3002\n\u30c0\u30a6\u30f3\u30b5\u30f3\u30d7\u30ea\u30f3\u30b0\u3057\u305f\u753b\u50cf\u3092\u5143\u753b\u50cf\u3068\u3057\u3001n=1n=1n=1 \u3068\u3057\u3066\u624b\u9806 3 \u30d8\u623b\u308b\u3002\n\n\u8a73\u3057\u3044\u69cb\u6210\u65b9\u6cd5\u3068\u305d\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u306f\u3001 Gaussian convolution \u3084 Fourier \u5909\u63db\u3001\u30b5\u30f3\u30d7\u30ea\u30f3\u30b0\u5b9a\u7406\u306a\u3069\u3092\u4e00\u901a\u308a\u5b66\u7fd2\u3057\u305f\u306e\u3061\u8ff0\u3079\u308b\u3002\n\nGaussian convolution\n\nScale-space \u3067\u306f\u5143\u753b\u50cf\u304b\u3089\u30b9\u30b1\u30fc\u30eb \u03c3\u03c3\\sigma \u306e\u753b\u50cf\u3092\u751f\u6210\u3059\u308b\u969b\u306b\u7528\u3044\u3089\u308c\u308b\u3002\n\u4e00\u822c\u7684\u306a\u753b\u50cf\u51e6\u7406\u306e\u6587\u8108\u3067\u306f\u753b\u50cf\u306e\u30ce\u30a4\u30ba\u9664\u53bb\u3084\u307c\u304b\u3057\u306b\u7528\u3044\u3089\u308c\u308b\u3002\n\u6570\u5b66\u7684\u306b\u306f Gaussian kernel \u3092\u7528\u3044\u3066\u4efb\u610f\u306e\u95a2\u6570\u306e\u91cd\u307f\u3064\u304d\u5e73\u5747\u306e\u7cfb\u5217\u3092\u6c42\u3081\u308b\u3002\n\n\n1\u6b21\u5143 Gaussian convolution\n1\u6b21\u5143 Gaussian convolution \u306f\u6b21\u5f0f\u3067\u8868\u3055\u308c\u308b\u3002\nF(x, \\sigma)=\\int_{-\\infty}^{\\infty} f(u) \\frac{1}{\\sqrt{2 \\pi \\sigma^{2}}}e^{-\\frac{(u-x)^2}{2\\sigma^{2}}} du\nF(x,\u03c3)=\u222b\u221e\u2212\u221ef(u)1\u221a2\u03c0\u03c32e\u2212(u\u2212x)22\u03c32du{F(x, \\sigma)=\\int_{-\\infty}^{\\infty} f(u) \\frac{1}{\\sqrt{2 \\pi \\sigma^{2}}}e^{-\\frac{(u-x)^2}{2\\sigma^{2}}} du\n}\nff \u306f\u5143\u4fe1\u53f7\u3067\u3042\u308b\u30021\u221a2\u03c0\u03c32e\u2212(u\u2212x)22\u03c32\\frac{1}{\\sqrt{2 \\pi \\sigma^{2}}}e^{-\\frac{(u-x)^2}{2\\sigma^{2}}} \u306f Gaussian kernel \u3068\u547c\u3070\u308c\u308b\u3002\u03c3\\sigma \u306f Gaussian kernel \u306e\u5f62\u72b6\u3092\u6c7a\u5b9a\u3059\u308b\u30d1\u30e9\u30e1\u30bf\u3067\u3042\u308b\u3002 Gaussian kernel \u306f\u4e2d\u5fc3 xx \u3067\u6700\u5927\u5024\u3092\u53d6\u308b\u91e3\u9418\u306e\u3088\u3046\u306a\u5f62\u3092\u3057\u3066\u304a\u308a\u3001\u305d\u306e\u9ad8\u3055\u3068\u5e83\u304c\u308a\u5177\u5408\u304c \u03c3\\sigma \u3067\u6c7a\u5b9a\u3055\u308c\u308b\u3002\n\nGaussian kernel\n\u8a66\u3057\u306b numpy \u3068 scipy \u3001matplotlib \u3092\u7528\u3044\u3066 Gaussian kernel \u3092\u63cf\u753b\u3057\u3066\u307f\u3088\u3046\u3002\nimport numpy as np\nfrom scipy.signal import gaussian\nfrom matplotlib import pyplot as plt\n\n\nif __name__ == '__main__':\n    npoints = 101\n    sigmas = np.array([6.0, 12.0])\n    for i, sigma in enumerate(sigmas):\n        y = gaussian(npoints, sigma) / (np.sqrt(2.0 * np.pi) * sigma)\n        plt.subplot(len(sigmas), 1, i + 1)\n        plt.title('sigma = %s' % sigma)\n        plt.ylim(ymax=0.08)\n        plt.plot(np.arange(npoints/2 - npoints, npoints/2, dtype=np.int), y)\n    plt.tight_layout()\n    plt.show()\n\n\u4e0a\u8a18\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u5b9f\u884c\u3059\u308c\u3070\u3001\u4e0b\u56f3\u304c\u7d50\u679c\u3068\u3057\u3066\u5f97\u3089\u308c\u308b\u3002\n\n[Gaussian kernel \u306e\u6027\u8cea\u3092\u5f8c\u65e5\u8ffd\u8a18]\n\n\u89e3\u91c8\u3068\u9069\u7528\u4f8b\nGaussian convolution \u306e\u5f0f\u306f\u300c\u5143\u4fe1\u53f7 ff \u306b\u4e2d\u5fc3 xx \u5e83\u304c\u308a \u03c3\\sigma \u306e\u91cd\u307f (Gaussian kernel) \u3092\u639b\u3051\u3066\u305d\u306e\u7dcf\u548c\u3092\u3068\u3063\u305f\u3082\u306e\uff08\u52a0\u91cd\u5e73\u5747\uff09\u3092 F(x,\u03c3)F(x, \\sigma) \u3067\u8868\u3059\u300d\u3068\u89e3\u91c8\u3067\u304d\u308b\u3002\u3053\u308c\u3088\u308a\u3001FF \u306f\u300c\u5143\u4fe1\u53f7 f(u)f(u) \u306e u=xu=x \u8fd1\u508d\u306e\u60c5\u5831\u3092 \u03c3\\sigma \u3067\u6c7a\u5b9a\u3065\u3051\u3089\u308c\u308b\u5f37\u3055\u3067\u8272\u6fc3\u304f\u53cd\u6620\u3057\u3064\u3064 ff \u5168\u4f53\u306e\u60c5\u5831\u3092\u6301\u3063\u305f\u70b9 F(x,\u03c3)F(x, \\sigma) \u3067\u69cb\u6210\u3055\u308c\u308b\u65b0\u305f\u306a\u4fe1\u53f7\u300d\u3067\u3042\u308b\u3068\u89e3\u91c8\u3067\u304d\u308b\u3002\u3053\u308c\u306f\u300cFF \u306f\u5143\u4fe1\u53f7 ff \u3092\u5f37\u5ea6 \u03c3\\sigma \u3067\u5e73\u6ed1\u5316\u3057\u305f\uff08\u307c\u304b\u3057\u305f\u3001\u30ce\u30a4\u30ba\u9664\u53bb\u3057\u305f\uff09\u4fe1\u53f7\u300d\u3060\u3068\u3044\u3046\u3053\u3068\u3067\u3042\u308b\u3002Scale-space \u306e\u6587\u8108\u3067\u306f\u300c FF \u306f ff \u3092\u30b9\u30b1\u30fc\u30eb \u03c3\\sigma \u306b\u30b9\u30b1\u30fc\u30eb\u30a2\u30c3\u30d7\u3057\u305f\uff08\u8a73\u7d30\u306a\u60c5\u5831\u3092\u53d6\u308a\u9664\u3044\u305f\uff09\u4fe1\u53f7\u300d\u3060\u3068\u8a00\u3048\u308b\u3002\nGaussian kernel \u306f\u524d\u7bc0\u3067\u898b\u305f\u3088\u3046\u306b \u03c3\\sigma \u304c\u5927\u304d\u304f\u306a\u308b\u307b\u3069\u5e73\u5766\u306b\u306a\u308b\u3002\u3053\u308c\u306f\u3001\u300c\u03c3\\sigma \u304c\u5927\u304d\u304f\u306a\u308b\u307b\u3069 F(x,\u03c3)F(x, \\sigma) \u306b\u542b\u307e\u308c\u308b\u5143\u4fe1\u53f7 ff \u306e u=xu=x \u306e\u8fd1\u508d\u306e\u60c5\u5831\u306e\u8272\u304c\u8584\u308c\u308b\u300d\u3053\u3068\u3092\u610f\u5473\u3057\u3001\u03c3\\sigma \u3092\u3069\u3093\u3069\u3093\u5927\u304d\u304f\u3057\u3066\u3044\u3051\u3070\u6700\u7d42\u7684\u306b FF \u306f\u5168\u3066\u306e xx \u306b\u304a\u3044\u3066\u540c\u3058\u3088\u3046\u306a\u5024\u3092\u3068\u308b\u3088\u3046\u306b\u306a\u308b\u3002Scale-space \u306e\u6587\u8108\u3067\u306f\u300c\u30b9\u30b1\u30fc\u30eb \u03c3\\sigma \u3092\u5927\u304d\u304f\u3059\u308b\u307b\u3069\u5de8\u8996\u7684\u306a\u8996\u70b9\u3067\u4fe1\u53f7\u3092\u773a\u3081\uff08\u8a73\u7d30\u306a\u60c5\u5831\u306f\u5931\u308f\u308c\uff09\u3001\u6700\u7d42\u7684\u306b\u4fe1\u53f7\u306b\u542b\u307e\u308c\u308b\u60c5\u5831\u3092\u3059\u3079\u3066\u540c\u4e00\u8996\u3059\u308b\u3088\u3046\u306b\u306a\u308b\u300d\u3068\u89e3\u91c8\u3067\u304d\u308b\u3002\n\u3053\u3053\u307e\u3067\u306e\u8a71\u3092\u30d7\u30ed\u30b0\u30e9\u30e0\u3067\u53ef\u8996\u5316\u3057\u3066\u307f\u3088\u3046\u3002\nimport numpy as np\nfrom scipy.ndimage.filters import gaussian_filter1d\nfrom matplotlib import pyplot as plt\n\n\nif __name__ == '__main__':\n    x = np.arange(0, 100)\n    f = np.sin(0.5 * x) + np.random.normal(0, 6.0, x.shape)\n\n    sigmas = [1.6, 3.2, 6.4]\n\n    plt.subplot(len(sigmas) + 1, 1, 1)\n    plt.ylim(ymin=np.min(f), ymax=np.max(f))\n    plt.title('Original')\n    plt.plot(f)\n\n    for i, sigma in enumerate(sigmas):\n        plt.subplot(len(sigmas) + 1, 1, 2 + i)\n        plt.title('Sigma = %s' % sigma)\n        plt.plot(gaussian_filter1d(f, sigma))\n    plt.tight_layout()\n    plt.show()\n\n\u4e0a\u8a18\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u5b9f\u884c\u3059\u308b\u3068\u4e0b\u56f3\u304c\u5f97\u3089\u308c\u308b\u3002\n\n\u03c3\\sigma \u304c\u5927\u304d\u304f\u306a\u308b\uff08\u30b9\u30b1\u30fc\u30eb\u30a2\u30c3\u30d7\u3059\u308b\uff09\u306b\u3064\u308c\u3001FF \u304b\u3089\u4fe1\u53f7 ff \u306e\u542b\u3080\u7d30\u304b\u306a\u60c5\u5831\u304c\u3069\u3093\u3069\u3093\u5931\u308f\u308c\u3066\u3044\u304f\u69d8\u304c\u308f\u304b\u308b\u3002\n\n2\u6b21\u5143 Gaussian convolution\n\u753b\u50cf\u306f2\u6b21\u5143\u4fe1\u53f7\u3067\u3042\u308b\u3002\u305d\u3053\u3067\u3001Gaussian convolution \u3092\u7528\u3044\u3066\u753b\u50cf\u3092\u30b9\u30b1\u30fc\u30eb\u30a2\u30c3\u30d7\u3059\u308b\u305f\u3081\u306b\u306f2\u6b21\u5143\u4fe1\u53f7\u306b\u5bfe\u3059\u308b Gaussian convolution \u304c\u5fc5\u8981\u3068\u306a\u308b\u3002\u4ee5\u964d\u3001\u5358\u306b Gaussian convolution \u3068\u66f8\u304f\u6642\u306f\u30012\u6b21\u5143 Gaussian convolution \u3092\u6307\u3059\u3053\u3068\u3068\u3059\u308b\u3002\n2\u6b21\u5143\u4fe1\u53f7\u306b\u5bfe\u3059\u308b Gaussian convolution \u306f\u6b21\u5f0f\u3067\u8868\u3055\u308c\u308b\u3002\nF(x, y, \\sigma) = \\int_{-\\infty}^{\\infty} \\int_{-\\infty}^{\\infty} f(u, v) \\frac{1}{2\\sigma^{2}} e^{-\\frac{(u - x)^2 + (v-y)^{2}}{\\sigma^{2}}} dudv\nF(x,y,\u03c3)=\u222b\u221e\u2212\u221e\u222b\u221e\u2212\u221ef(u,v)12\u03c32e\u2212(u\u2212x)2+(v\u2212y)2\u03c32dudv{F(x, y, \\sigma) = \\int_{-\\infty}^{\\infty} \\int_{-\\infty}^{\\infty} f(u, v) \\frac{1}{2\\sigma^{2}} e^{-\\frac{(u - x)^2 + (v-y)^{2}}{\\sigma^{2}}} dudv\n}\n12\u03c32e\u2212(u\u2212x)2+(v\u2212y)2\u03c32\\frac{1}{2\\sigma^{2}} e^{-\\frac{(u - x)^2 + (v-y)^{2}}{\\sigma^{2}}} \u304c Gaussian kernel \u3067\u3042\u308b\u3002\u3053\u306e Gaussian kernel \u306f\u7acb\u4f53\u306e\u91e3\u9418\u578b\u3067\u3042\u308a\u3001(x,y)(x, y) \u3067\u6700\u5927\u5024\u3092\u53d6\u308a \u03c3\\sigma \u306f\u305d\u306e\u5e83\u304c\u308a\u3092\u8868\u3059\u3002\n\nGaussian kernel\n\u30d7\u30ed\u30b0\u30e9\u30e0\u3067 Gaussian kernel \u3092\u63cf\u753b\u3057\u3066\u307f\u3088\u3046\u3002\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom mpl_toolkits.mplot3d import Axes3D\n\n\ndef gaussian_kernel_2d(x, y, sigma):\n    return np.exp(-(np.power(x/sigma, 2) + np.power(y/sigma, 2)))/(2 * np.power(sigma, 2))\n\n\nif __name__ == '__main__':\n    xrange = np.arange(-10.0, 10.5, 0.5)\n    yrange = np.arange(-10.0, 10.5, 0.5)\n    kernel_values = np.zeros(shape=(len(yrange), len(xrange)))\n\n    sigmas = [1.6, 2.4]\n\n    fig = plt.figure()\n    X, Y = np.meshgrid(xrange, yrange)\n\n    for i, sigma in enumerate(sigmas):\n        ax = fig.add_subplot(len(sigmas), 1, 1 + i,  projection='3d')\n        plt.title('Sigma = %s' % sigma)\n        ax.set_zlim(zmax=0.2)\n        ax.plot_wireframe(X, Y, gaussian_kernel_2d(X, Y, sigma))\n    plt.show()\n\n\u4e0a\u8a18\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u5b9f\u884c\u3059\u308b\u3068\u4e0b\u56f3\u3092\u5f97\u3089\u308c\u308b\u3002\u30de\u30a6\u30b9\u3067\u8996\u70b9\u3092\u5909\u3048\u308b\u3053\u3068\u304c\u53ef\u80fd\u3067\u3042\u308b\u3002\n\n\n\u96e2\u6563\u5316 Gaussian convolution\n\nGaussian filter\n\u30b3\u30f3\u30d4\u30e5\u30fc\u30bf\u306f\u96e2\u6563\u7684\u306a\u5024\u3057\u304b\u6271\u3046\u3053\u3068\u304c\u3067\u304d\u305a\u3001\u307e\u305f\u305d\u306e\u7bc4\u56f2\u306f\u6709\u9650\u3067\u3042\u308b\u3002Gaussian kernel \u306f\u9023\u7d9a\u306a\u95a2\u6570\u3067\u5b9a\u7fa9\u57df\u306f \u00b1\u221e\\pm \\infty \u3067\u3042\u308b\u3002\u305d\u3053\u3067\u3001\u30b3\u30f3\u30d4\u30e5\u30fc\u30bf\u3067\u6271\u3048\u308b\u5f62\u306b\u3059\u308b\u305f\u3081\u3001Gaussian kernel \u3092\u6709\u9650\u500b\u306e\u6570\u5024\u5217\u3067\u8fd1\u4f3c\u3057\u3066\u96e2\u6563\u5316\u3059\u308b\u5fc5\u8981\u304c\u3042\u308b\u3002\nss \u884c tt \u5217\u306e\u683c\u5b50\u3092\u8003\u3048\u308b\u3002\u4ee5\u964d\u3053\u306e\u683c\u5b50\u3092 s\u00d7ts \\times t \u306e filter \u3068\u3044\u3046\u3002\u3053\u308c\u306f\u30d7\u30ed\u30b0\u30e9\u30e0\u4e0a\u3067\u4e0b\u8a18\u306e\u3088\u3046\u306a2\u6b21\u5143\u914d\u5217\u3067\u8868\u73fe\u3055\u308c\u308b\u3002\nfilter = np.zeros(shape=(s, t))\n\n\u5909\u6570 filter \u306e\u3059\u3079\u3066\u306e\u8981\u7d20\u306b u=0u=0 \u306e\u6642\u306e Gaussian kernel \u3092\u3088\u304f\u8868\u73fe\u3059\u308b\u3088\u3046\u5024\u3092\u8a2d\u5b9a\u3067\u304d\u308c\u3070\u3001u=0u=0 \u306e Gaussian kernel \u3092\u96e2\u6563\u5316\u3057\u305f Gaussian filter gg \u304c\u4f5c\u6210\u3067\u304d\u308b\u3002\u3053\u3053\u3067\u306f\u3001gg \u306e kk \u884c ll \u5217\u306e\u8981\u7d20 g(k,l)g(k,l) = 1\u03b1e\u2212l2+k2\u03c32\\frac{1}{\\alpha} e^{-\\frac{l^{2} + k^{2}}{\\sigma^{2}}} \u3068\u8a2d\u5b9a\u3059\u308b\u3002\u3053\u3053\u3067 \u03b1\\alpha \u306f gg \u306e\u5168\u3066\u306e\u8981\u7d20\u3092\u8db3\u3057\u305f\u6642\u306b\u305d\u306e\u5408\u8a08\u304c 11 \u3068\u306a\u308b\u3088\u3046\u306b\u6b63\u898f\u5316\u3059\u308b\u5b9a\u6570\u3067\u3042\u308b\u3002\n\nGaussian filter \u3092\u7528\u3044\u305f Gaussian convolution\n\u6b21\u5f0f\u306f Gaussian filter \u3092\u7528\u3044\u305f Gaussian convolution \u3067\u3042\u308b\u3002\u3053\u308c\u3092\u96e2\u6563\u5316 Gaussian convolution \u3068\u547c\u3076\u3002\u4ee5\u964d\u3001\u5358\u306b Gaussian convolution \u3068\u3044\u3046\u3068\u304d\u306f\u3001\u3053\u306e\u96e2\u6563\u5316 Gaussian convolution \u3092\u6307\u3059\u3082\u306e\u3068\u3059\u308b\u3002\nF(i, j) = \\sum_{k=0}^{s}\\sum_{l=0}^{t} f(i+k-[\\frac{s}{2}], j+l-[\\frac{t}{2}]) g(k, l)\nF(i,j)=s\u2211k=0t\u2211l=0f(i+k\u2212[s2],j+l\u2212[t2])g(k,l){F(i, j) = \\sum_{k=0}^{s}\\sum_{l=0}^{t} f(i+k-[\\frac{s}{2}], j+l-[\\frac{t}{2}]) g(k, l)\n}\n\nff: m\u00d7nm \\times n \u306e\u5143\u753b\u50cf\ngg: s\u00d7ts \\times t \u306e Gaussian filter\nFF: m\u00d7nm \\times n \u306e\u51fa\u529b\u753b\u50cf\n\n\u4e0a\u5f0f\u306e\u901a\u308a\u306b\u7d20\u76f4\u306b\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u4f5c\u6210\u3059\u308b\u3068\u4e0b\u8a18\u306e\u3088\u3046\u306b\u306a\u308b\u3002\nfor k in range(s):\n    for l in range(t):\n        F[i, j] = f[i + k - int(s/2), j + l - int(t/2)] * g(k, l)\n\n\u3053\u306e\u5834\u5408\u51fa\u529b\u753b\u50cf FF \u306e1\u753b\u7d20\u3092\u6c42\u3081\u308b\u305f\u3081\u306b s\u00d7ts \\times t \u56de\u306e\u6f14\u7b97\u304c\u5fc5\u8981\u3067\u3042\u308a\u3001\u51fa\u529b\u753b\u50cf\u5168\u3066\u306e\u753b\u7d20\u3092\u6c42\u3081\u308b\u305f\u3081\u306b\u306f m\u00d7n\u00d7s\u00d7tm \\times n \\times s \\times t \u56de\u306e\u6f14\u7b97\u304c\u5fc5\u8981\u3068\u306a\u308b\u3002320\u00d7240320 \\times 240 \u306e\u753b\u50cf\u3068 5\u00d755 \\times 5 \u306e Gaussian filter \u3067 convolution \u3057\u305f\u5834\u5408\u3001\u5408\u8a08\u3067 1,920,0001,920,000 \u56de\u306e\u6f14\u7b97\u304c\u5fc5\u8981\u3068\u306a\u308b\u3002\u3053\u306e\u6f14\u7b97\u56de\u6570\u304c\u30af\u30ea\u30c6\u30a3\u30ab\u30eb\u3067\u3042\u308b\u304b\u5426\u304b\u306f\u30de\u30b7\u30f3\u30b9\u30da\u30c3\u30af\u3084\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u306b\u3088\u308b\u304c\u3001\u79c1\u306e MacBook Air (13-inch, Early 2015) \u4e0a\u3067\u306f\u30af\u30ea\u30c6\u30a3\u30ab\u30eb\u3067\u3042\u308b\u3002\n\n\u9ad8\u901f\u5316\nGaussian convolution \u306f\u3001s\u00d7ts \\times t \u306e Gaussian filter \u3092\u7528\u3044\u305f Gaussian convolution \u306e\u51fa\u529b\u753b\u50cf FF \u304c\u3001\u6b21\u306e 2 \u30b9\u30c6\u30c3\u30d7\u3067\u51fa\u529b\u3055\u308c\u308b\u753b\u50cf F1F_{1} \u3067\u8868\u3055\u308c\u308b\u3068\u3044\u3046\u6027\u8cea\u3092\u6301\u3063\u3066\u3044\u308b\u3002\n\n1\u00d7t1 \\times t \u306e 1 \u6b21\u5143 Gaussian filter \u3092\u5143\u753b\u50cf ff \u306e\u5404\u884c\u3068 convolution \u3057\u3066\u753b\u50cf F0F_{0} \u3092\u51fa\u529b\u3002\ns\u00d71s \\times 1 \u306e 1 \u6b21\u5143 Gaussian filter \u3092 F0F_{0} \u306e\u5404\u5217\u3068 convolution \u3057\u3066\u753b\u50cf F1F_{1} \u3092\u51fa\u529b\u3002\n\n\u3053\u308c\u306f\u6b21\u306e\u3088\u3046\u306b\u8a3c\u660e\u3055\u308c\u308b\u3002\n\\begin{align}\nF(i, j) &=\\sum_{k=0}^{s}\\sum_{l=0}^{t} f(i+k-[\\frac{s}{2}], j+l-[\\frac{t}{2}]) g(k, l)\\\\\n\n&= \\sum_{k=0}^{s}\\sum_{l=0}^{t} f(i+k-[\\frac{s}{2}], j+l-[\\frac{t}{2}]) \\frac{1}{\\alpha}e^{-\\frac{l^{2} + k^{2}}{\\sigma^{2}}}\\\\\n\n&= \\sum_{k=0}^{s}\\sum_{l=0}^{t} f(i+k-[\\frac{s}{2}], j+l-[\\frac{t}{2}]) \\frac{1}{\\alpha}e^{-\\frac{l^{2}}{\\sigma^{2}}}e^{-\\frac{k^{2}}{\\sigma^{2}}}\\\\\n\n&=\\frac{\\alpha_{0}\\alpha_{1}}{\\alpha} \\sum_{k=0}^{s}\\frac{1}{\\alpha_{1}}e^{\\frac{-k^{2}}{\\sigma^{2}}}\\sum_{l=0}^{t} f(i+k-[\\frac{s}{2}], j+l-[\\frac{t}{2}]) \\frac{1}{\\alpha_{0}}e^{-\\frac{l^{2}}{\\sigma^{2}}}\\\\\n\n&=\\frac{\\alpha_{0}\\alpha_{1}}{\\alpha} \\sum_{k=0}^{s}\\frac{1}{\\alpha_{1}}e^{\\frac{-k^{2}}{\\sigma^{2}}}\\sum_{l=0}^{t} f(i+k-[\\frac{s}{2}], j+l-[\\frac{t}{2}]) g_{0}(l)\\\\\n\n\n&=\\frac{\\alpha_{0}\\alpha_{1}}{\\alpha} \\sum_{k=0}^{s}\\frac{1}{\\alpha_{1}}e^{-\\frac{k^{2}}{\\sigma^{2}}} F_{0}(i, j)\\\\\n\n\n&=\\frac{\\alpha_{0}\\alpha_{1}}{\\alpha} \\sum_{k=0}^{s} F_{0}(i, j) g_{1}(k)\\\\\n\n\n&=\\frac{\\alpha_{0}\\alpha_{1}}{\\alpha} F_{1}(i, j)\n\\end{align}\nF(i,j)=s\u2211k=0t\u2211l=0f(i+k\u2212[s2],j+l\u2212[t2])g(k,l)=s\u2211k=0t\u2211l=0f(i+k\u2212[s2],j+l\u2212[t2])1\u03b1e\u2212l2+k2\u03c32=s\u2211k=0t\u2211l=0f(i+k\u2212[s2],j+l\u2212[t2])1\u03b1e\u2212l2\u03c32e\u2212k2\u03c32=\u03b10\u03b11\u03b1s\u2211k=01\u03b11e\u2212k2\u03c32t\u2211l=0f(i+k\u2212[s2],j+l\u2212[t2])1\u03b10e\u2212l2\u03c32=\u03b10\u03b11\u03b1s\u2211k=01\u03b11e\u2212k2\u03c32t\u2211l=0f(i+k\u2212[s2],j+l\u2212[t2])g0(l)=\u03b10\u03b11\u03b1s\u2211k=01\u03b11e\u2212k2\u03c32F0(i,j)=\u03b10\u03b11\u03b1s\u2211k=0F0(i,j)g1(k)=\u03b10\u03b11\u03b1F1(i,j){\\begin{align}\nF(i, j) &=\\sum_{k=0}^{s}\\sum_{l=0}^{t} f(i+k-[\\frac{s}{2}], j+l-[\\frac{t}{2}]) g(k, l)\\\\\n\n&= \\sum_{k=0}^{s}\\sum_{l=0}^{t} f(i+k-[\\frac{s}{2}], j+l-[\\frac{t}{2}]) \\frac{1}{\\alpha}e^{-\\frac{l^{2} + k^{2}}{\\sigma^{2}}}\\\\\n\n&= \\sum_{k=0}^{s}\\sum_{l=0}^{t} f(i+k-[\\frac{s}{2}], j+l-[\\frac{t}{2}]) \\frac{1}{\\alpha}e^{-\\frac{l^{2}}{\\sigma^{2}}}e^{-\\frac{k^{2}}{\\sigma^{2}}}\\\\\n\n&=\\frac{\\alpha_{0}\\alpha_{1}}{\\alpha} \\sum_{k=0}^{s}\\frac{1}{\\alpha_{1}}e^{\\frac{-k^{2}}{\\sigma^{2}}}\\sum_{l=0}^{t} f(i+k-[\\frac{s}{2}], j+l-[\\frac{t}{2}]) \\frac{1}{\\alpha_{0}}e^{-\\frac{l^{2}}{\\sigma^{2}}}\\\\\n\n&=\\frac{\\alpha_{0}\\alpha_{1}}{\\alpha} \\sum_{k=0}^{s}\\frac{1}{\\alpha_{1}}e^{\\frac{-k^{2}}{\\sigma^{2}}}\\sum_{l=0}^{t} f(i+k-[\\frac{s}{2}], j+l-[\\frac{t}{2}]) g_{0}(l)\\\\\n\n\n&=\\frac{\\alpha_{0}\\alpha_{1}}{\\alpha} \\sum_{k=0}^{s}\\frac{1}{\\alpha_{1}}e^{-\\frac{k^{2}}{\\sigma^{2}}} F_{0}(i, j)\\\\\n\n\n&=\\frac{\\alpha_{0}\\alpha_{1}}{\\alpha} \\sum_{k=0}^{s} F_{0}(i, j) g_{1}(k)\\\\\n\n\n&=\\frac{\\alpha_{0}\\alpha_{1}}{\\alpha} F_{1}(i, j)\n\\end{align}\n}\n\ng0g_{0}: 1\u00d7t1 \\times t \u306e Gaussian filter\ng1g_{1}: s\u00d71s \\times 1 \u306e Gaussian filter\n\u03b1\\alpha: gg \u306e\u6b63\u898f\u5316\u5b9a\u6570\n\u03b10\\alpha_{0}: g0g_{0} \u306e\u6b63\u898f\u5316\u5b9a\u6570\n\u03b1\\alpha: g1g_{1} \u306e\u6b63\u898f\u5316\u5b9a\u6570\n\n\u3053\u306e\u3088\u3046\u306b\u3059\u308b\u3053\u3068\u3067\u6f14\u7b97\u56de\u6570\u306f s\u00d7m+t\u00d7ns \\times m + t \\times n \u3068\u306a\u308b\u3002320\u00d7240320 \\times 240 \u306e\u753b\u50cf\u3068 5\u00d755 \\times 5 \u306e Gaussian filter \u306e convolution \u306e\u5834\u5408\u3001\u6f14\u7b97\u56de\u6570\u306f 768,000768,000 \u56de\u3068\u306a\u308b\u3002\u9ad8\u901f\u5316\u306b\u3088\u308a\u6f14\u7b97\u56de\u6570\u3092 60%60\\% \u6e1b\u3089\u3059\u3053\u3068\u304c\u3067\u304d\u308b\u3002\n\n\u753b\u50cf\u3078\u306e\u9069\u7528\n\u5b9f\u969b\u306b\u753b\u50cf\u306b Gaussian convolution \u3092\u9069\u7528\u3057\u3066\u307f\u3088\u3046\u3002\u4eca\u56de\u306f Pillow, numpy, scipy \u3092\u7528\u3044\u308b\u3002\u4e0b\u8a18\u30d7\u30ed\u30b0\u30e9\u30e0\u3067\u306f\u30b9\u30b1\u30fc\u30eb \u03c3=1.6\\sigma = 1.6 \u306e\u753b\u50cf\u3068\u30b9\u30b1\u30fc\u30eb \u03c3=3.2\\sigma = 3.2 \u306e\u753b\u50cf\u3092\u751f\u6210\u3057\u3066\u3044\u308b\u3002\nfrom PIL import Image\nimport numpy as np\nfrom scipy.ndimage.filters import gaussian_filter\nfrom matplotlib import pyplot as plt\n\nif __name__ == '__main__':\n    orig_image = Image.open('lena.jpg').convert('L')\n    orig_image = np.array(orig_image, dtype=np.uint8)\n\n    sigmas = [1.6, 3.2]\n\n    plt.subplot(1, len(sigmas) + 1, 1)\n    plt.title('Orig')\n    plt.imshow(orig_image, cmap='Greys_r')\n    for i, sigma in enumerate(sigmas):\n        plt.subplot(1, len(sigmas) + 1, 2 + i)\n        plt.title('Sigma=%s' % sigma)\n        plt.imshow(gaussian_filter(orig_image, sigma), cmap='Greys_r')\n    plt.tight_layout()\n    plt.savefig('gausian_convolution_2d_examples.png')\n    plt.show()\n\n\u4e0a\u8a18\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u5b9f\u884c\u3059\u308b\u3068\u4e0b\u56f3\u304c\u5f97\u3089\u308c\u308b\u3002\n\n\u753b\u50cf\u3092\u6271\u3046\u6709\u540d\u306a\u30e9\u30a4\u30d6\u30e9\u30ea\u306b OpenCV \u304c\u3042\u308b\u3002\u305d\u308c\u304c\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3055\u308c\u3066\u3044\u308b\u4eba\u306f\u3001\u305d\u308c\u3092\u4f7f\u3063\u3066\u3082\u826f\u3044\u3002\u307e\u305f\u3001Gaussian convolution \u3092\u81ea\u529b\u3067\u30a4\u30f3\u30d7\u30ea\u30e1\u30f3\u30c8\u3057\u3066\u307f\u308b\u306e\u3082\u826f\u3044\u3002 \n\u3053\u3053\u307e\u3067\u3067\u5143\u753b\u50cf\u306b\u5bfe\u3057\u3066\u4efb\u610f\u306e\u30b9\u30b1\u30fc\u30eb \u03c3\\sigma \u306e\u753b\u50cf\u3092\u751f\u6210\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u3063\u305f\u3002\n\nScale-space 1st octave \u306e\u69cb\u7bc9\n\u3044\u3088\u3044\u3088 Scale-space \u306e\u69cb\u7bc9\u3092\u884c\u3046\u3002\u7ae0\u984c\u4e2d\u306e 1st octave \u3064\u3044\u3066\u306f\u5f8c\u8ff0\u3059\u308b\u3002\n\n\u69cb\u7bc9\u306e\u6d41\u308c\n\n\u30d9\u30fc\u30b9\u3068\u306a\u308b\u30b9\u30b1\u30fc\u30eb \u03c30\\sigma_{0} \u3092\u6c7a\u5b9a\u3002\n\u30b9\u30b1\u30fc\u30eb\u304c kn\u03c3k^{n}\\sigma \u306e\u753b\u50cf\u3092 n=0,...,sn=0,...,s \u306b\u3064\u3044\u3066\u751f\u6210\u3059\u308b\u3002ss \u306f scale-space 1st octave \u306e\u5206\u5272\u6570\u3002 k=21/sk=2^{1/s} \u3067\u8868\u3055\u308c\u308b\u3002\n\n\nScale-space 1st octave \u3092\u69cb\u7bc9\u3059\u308b\u30d7\u30ed\u30b0\u30e9\u30e0\nfrom PIL import Image\nimport numpy as np\nfrom scipy.ndimage.filters import gaussian_filter\nfrom matplotlib import pyplot as plt\n\n\nif __name__ == '__main__':\n    orig_image = Image.open('lena.jpg').convert('L')\n    orig_image = np.array(orig_image, dtype=np.uint8)\n\n    sigma = 1.6\n    s = 3\n    k = np.power(2, 1/s)\n    scale_space = []\n\n    for n in range(s + 1):\n        scale_space.append(gaussian_filter(orig_image, np.power(k, n) * sigma))\n\n    for n, img in enumerate(scale_space):\n        plt.subplot(1, len(scale_space), 1 + n)\n        plt.title('Sigma=%s' % np.round(np.power(k, n) * sigma, 2))\n        plt.imshow(img, cmap='Greys_r')\n    plt.tight_layout()\n    plt.show()\n\n\u4e0a\u8a18\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u5b9f\u884c\u3059\u308b\u3068\u5909\u6570 scale_space \u306b\u30b9\u30b1\u30fc\u30eb\u304c 1.61.6 \u304b\u3089 3.23.2 \u307e\u3067\u306e4\u679a\u306e\u753b\u50cf\u304c\u683c\u7d0d\u3055\u308c\u3001\u4e0b\u56f3\u304c\u8868\u793a\u3055\u308c\u308b\u3002\n\n\u3053\u306e k\u03c3k\\sigma \u304b\u3089 2k\u03c32k\\sigma \u307e\u3067\u306e\u753b\u50cf\u3067\u69cb\u6210\u3055\u308c\u308b\u30b9\u30da\u30fc\u30b9\u3092 1st octave \u3068\u547c\u3076\u3002\n\nFourier \u5909\u63db\u3068\u30b5\u30f3\u30d7\u30ea\u30f3\u30b0\u5b9a\u7406\n2nd octave \u4ee5\u964d\u3092\u4f5c\u6210\u3059\u308b\u306b\u3042\u305f\u3063\u3066\u3001Fourier \u5909\u63db\u3068\u30b5\u30f3\u30d7\u30ea\u30f3\u30b0\u5b9a\u7406\u306b\u3064\u3044\u3066\u89e6\u308c\u3066\u304a\u304f\u5fc5\u8981\u304c\u3042\u308b\u3002\u305f\u3060\u3057\u3001\u4eca\u56de\u306f\u6df1\u5165\u308a\u305b\u305a\u3055\u3089\u3063\u3068\u6d41\u3059\u306e\u307f\u306b\u3068\u3069\u3081\u308b\u3002\n\nFourier \u5909\u63db\nFourier \u5909\u63db\u306f\u753b\u50cf\u3092\u30d4\u30af\u30bb\u30eb\u9818\u57df\u304b\u3089\u5468\u6ce2\u6570\u9818\u57df\u3078\u5909\u63db\u3059\u308b\u3082\u306e\u3067\u3042\u308b\u3002\n\n1\u6b21\u5143 Fourier \u5909\u63db\u306e\u5f0f\nF(j\\omega) = \\int_{-\\infty}^{\\infty} f(x) e^{-j\\omega x} dx\nF(j\u03c9)=\u222b\u221e\u2212\u221ef(x)e\u2212j\u03c9xdx{F(j\\omega) = \\int_{-\\infty}^{\\infty} f(x) e^{-j\\omega x} dx\n}\n\nff: \u5834\u6240\u9818\u57df\u306e\u4fe1\u53f7\uff08\u4f8b\u3048\u3070\u7d30\u9577\u3044\u30b9\u30ea\u30c3\u30c8\u3092\u901a\u904e\u3059\u308b\u5149\u306e\u660e\u5ea6\uff09\nFF: ff \u306e\u5468\u6ce2\u6570\u9818\u57df\u3067\u306e\u8868\u73fe\n\u03c9\\omega: \u89d2\u5468\u6ce2\u6570 (2\u03c0\u03c902\\pi\\omega_{0}\u3001\u3053\u3053\u3067 \u03c90\\omega_{0} \u306f\u5468\u6ce2\u6570)\ne\u2212j\u03c9x=cos(\u03c9x)\u2212jsin(\u03c9x)e^{-j\\omega x} = \\cos(\\omega x) - j \\sin(\\omega x) \njj: \u865a\u6570\u5358\u4f4d\n\n\n1\u6b21\u5143 Fourier \u5909\u63db\u306e\u9069\u7528\u4f8b\nnumpy, scipy, matplotlib \u3092\u7528\u3044\u3066 FFT (Fast Fourier Transform) \u306b\u3088\u308b Fourier \u5909\u63db\u3092\u884c\u3063\u3066\u307f\u308b\u3002\u4e0b\u8a18\u30d7\u30ed\u30b0\u30e9\u30e0\u3067\u306f\u3001\u30b5\u30f3\u30d7\u30ea\u30f3\u30b0\u30ec\u30fc\u30c8\u309220, \u5143\u4fe1\u53f7\u306e\u89d2\u5468\u6ce2\u6570\u3092 2\u03c02\\pi \u3068\u3057\u3066\u3044\u308b\u3002\nimport numpy as np\nfrom scipy.fftpack import fft\nfrom matplotlib import pyplot as plt\n\n\nif __name__ == '__main__':\n    sampling_rate = 20\n    sampling_interval = 1.0/sampling_rate\n    x = np.arange(0, 1, sampling_interval)\n\n    omega0 = 1.0\n    omega = 2.0 * np.pi * omega0\n    f = np.sin(omega * x)\n\n    F = fft(f)\n\n    plt.plot(np.arange(-len(f)/2, len(f)/2), np.abs(np.concatenate((F[len(f)/2:], F[:len(f)/2]))), 'bo-')\n    plt.show()\n\n\u4e0a\u8a18\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u5b9f\u884c\u3059\u308b\u3068\u4e0b\u56f3\u3092\u5f97\u308b\u3002\n\n\u3053\u306e\u56f3\u304b\u3089\u3001\u5143\u4fe1\u53f7 ff \u306b\u306f\u5468\u6ce2\u6570 11 \u306e\u4fe1\u53f7\u304c\u542b\u307e\u308c\u3066\u3044\u308b\u3053\u3068\u304c\u308f\u304b\u308b\u3002\u5e7e\u3064\u304b\u306e\u5468\u671f\u95a2\u6570\u3092\u91cd\u306d\u5408\u308f\u305b\u305f\u3082\u306e\u3092 Fourier \u5909\u63db\u3057\u3066\u307f\u308b\u3068\u826f\u3044\u3002\n[\u5f8c\u65e5\u3082\u3046\u5c11\u3057\u8a73\u3057\u304f\u66f8\u304f]\n\n1\u6b21\u5143\u4fe1\u53f7\u306e\u30b5\u30f3\u30d7\u30ea\u30f3\u30b0\u5b9a\u7406\n\u30b5\u30f3\u30d7\u30ea\u30f3\u30b0\u5b9a\u7406\u306f\u3001\u300c\u5143\u4fe1\u53f7 ff \u306b\u542b\u307e\u308c\u308b\u4fe1\u53f7\u306e\u6700\u5927\u5468\u671f\u304c WW \u3067\u3042\u308b\u3068\u304d\u3001\u5143\u4fe1\u53f7\u306e\u30b5\u30f3\u30d7\u30ea\u30f3\u30b0\u5468\u671f TT \u304c T\u22641WT\\leq \\frac{1}{W} \u3067\u3042\u308c\u3070\u3001\u30b5\u30f3\u30d7\u30ea\u30f3\u30b0\u5f8c\u306e\u4fe1\u53f7 fdf_{d} \u304b\u3089\u5143\u4fe1\u53f7 ff \u304c\u5b8c\u5168\u306b\u5fa9\u5143\u53ef\u80fd\u3067\u3042\u308b\u300d\u3053\u3068\u3092\u4e3b\u5f35\u3059\u308b\u3002\n[\u8a3c\u660e\u306f\u5f8c\u65e5\u8ffd\u52a0]\n\n1\u6b21\u5143\u4fe1\u53f7\u306e\u30b5\u30f3\u30d7\u30ea\u30f3\u30b0\u5b9a\u7406\u306e\u5b9f\u9a13\n\u30b5\u30f3\u30d7\u30ea\u30f3\u30b0\u5468\u671f\u3092 1/201/20 \u3068\u3059\u308b\u3002\u305d\u3046\u3059\u308b\u3068\u30b5\u30f3\u30d7\u30ea\u30f3\u30b0\u5b9a\u7406\u3088\u308a\u3001\u6700\u5927\u5468\u6ce2\u6570\u304c 1010 \u306e\u4fe1\u53f7\u307e\u3067\u306a\u3089 Fourier \u5909\u63db\u3067\u305d\u306e\u5468\u6ce2\u6570\u60c5\u5831\u3092\u5168\u3066\u3046\u307e\u304f\u53d6\u308a\u51fa\u305b\u308b\u306f\u305a\u3067\u3042\u308b\u3002\n\u4e0b\u8a18\u30d7\u30ed\u30b0\u30e9\u30e0\u3067\u78ba\u8a8d\u3057\u3066\u307f\u3088\u3046\u3002\nimport numpy as np\nfrom scipy.fftpack import fft\nfrom matplotlib import pyplot as plt\n\nif __name__ == '__main__':\n    sampling_rate = 20\n    sampling_interval = 1.0/sampling_rate\n    x = np.arange(0, 1, sampling_interval)\n\n    omega0s = [9, 10, 11, 30]\n\n    for i, omega0 in enumerate(omega0s):\n        omega = 2.0 * np.pi * omega0\n        f = np.sin(omega * x)\n\n        F = fft(f)\n\n        plt.subplot(len(omega0s),  1,  1 + i)\n        plt.plot(np.arange(-len(f)/2, len(f)/2), np.abs(np.concatenate((F[len(f)/2:], F[:len(f)/2]))), 'bo-')\n        plt.title('Max frequency = %s' % omega0)\n        plt.xlabel('Frequency')\n        plt.ylabel('Amplitude spectrum')\n    plt.tight_layout()\n    plt.show()\n\n\u5b9f\u884c\u3059\u308b\u3068\u4e0b\u56f3\u304c\u5f97\u3089\u308c\u308b\u3002\u3053\u306e\u7d50\u679c\u3060\u3068\u6700\u5927\u5468\u6ce2\u6570\u304c 99 \u306e\u4fe1\u53f7\u3067\u5468\u6ce2\u6570\u60c5\u5831\u304c\u3046\u307e\u304f\u53d6\u308a\u51fa\u305b\u3066\u3044\u308b\u3053\u3068\u304c\u308f\u304b\u308b\uff08\u5f8c\u65e5\u8a73\u7d30\u8ffd\u8a18\uff09\u3002\n\n\n2\u6b21\u5143 Fourier \u5909\u63db\n[\u5f8c\u65e5\u8ffd\u8a18]\n\n2nd octave \u4ee5\u964d\u306e\u69cb\u7bc9\n\n\u30c0\u30a6\u30f3\u30b5\u30f3\u30d7\u30ea\u30f3\u30b0\n\n\u6982\u8981\n[\u5f8c\u65e5\u8ffd\u8a18]\n\n\u30c0\u30a6\u30f3\u30b5\u30f3\u30d7\u30ea\u30f3\u30b0\u306e\u59a5\u5f53\u6027\u8a3c\u660e\n[\u5f8c\u65e5\u8ffd\u8a18]\n\n2nd octave \u69cb\u7bc9\u30d7\u30ed\u30b0\u30e9\u30e0\n[\u5f8c\u65e5\u8ffd\u8a18]\n\n\u53c2\u8003\u6587\u732e\n\nDistinctive Image Features from Scale-Invariant Keypoints (David G. Lowe)\n\u4fe1\u53f7\u51e6\u7406 (\u68ee\u4e0b \u5dcc, \u5c0f\u7551\u79c0\u6587)\n\n# \u672c\u8a18\u4e8b\u306e\u30b4\u30fc\u30eb\n\u30b9\u30b1\u30fc\u30eb\u306e\u5909\u5316\u3084\u56de\u8ee2\u306b\u5f37\u3044\u753b\u50cf\u306e\u7279\u5fb4\u3092\u8a18\u8ff0\u3059\u308b SIFT (Scale Invariant Feature Transform) \u3092\u652f\u3048\u308b Scale-space \u3092\u7406\u89e3\u3057\u5b9f\u88c5\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u308b\u3002\n\n# \u95a2\u9023\u3057\u3066\u5f97\u3089\u308c\u308b\u77e5\u8b58\n* Gaussian convolution \u306b\u3088\u308b\u753b\u50cf\u306e\u5e73\u6ed1\u5316\n* Fourier \u5909\u63db\u3068\u30b5\u30f3\u30d7\u30ea\u30f3\u30b0\u5b9a\u7406\n\n# \u4f7f\u7528\u3059\u308b\u74b0\u5883\n| \u30bd\u30d5\u30c8\u30a6\u30a7\u30a2\u540d | \u30d0\u30fc\u30b8\u30e7\u30f3  |\n|---------------|------------|\n| Python        | 3.4 or 3.5 |\n| Pillow        | 3.1.0      |\n| Numpy         | 1.10       |\n| Scipy         | 0.16.1     |\n| Matplotlib    | 1.5.0      |\n\n# \u6ce8\u91c8\n\u672c\u8a18\u4e8b\u306f [Morning Project Samurai](https://mpsamurai.org) \u7b2c41\u56de\u30df\u30fc\u30c6\u30a3\u30f3\u30b0\u306e\u8cc7\u6599\u3068\u3057\u3066\u66f8\u304b\u308c\u305f\u3082\u306e\u3067\u3042\u308b\u3002\n\n# \u304a\u9858\u3044\n\u3053\u308c\u306f\u30c9\u30e9\u30d5\u30c8\u30d0\u30fc\u30b8\u30e7\u30f3\u3067\u3059\u3002\u30df\u30b9\u306a\u3069\u3092\u767a\u898b\u3055\u308c\u305f\u5834\u5408\u306f\u3001\u3054\u9023\u7d61\u3044\u305f\u3060\u3051\u308b\u3068\u5e78\u3044\u3067\u3059\u3002\n\n# Scale-space\n\n## \u5b9a\u7fa9\n* \u4e0e\u3048\u3089\u308c\u305f\u753b\u50cf\u304b\u3089\u30b9\u30b1\u30fc\u30eb\u304c\u7570\u306a\u308b\u8907\u6570\u306e\u753b\u50cf\u3092\u751f\u6210\u3059\u308b\u3002\n* \u305d\u308c\u3089\u753b\u50cf\u3067\u69cb\u6210\u3055\u308c\u308b\u7a7a\u9593\u3092 Scale-space \u3068\u547c\u3076\u3002\n\n## \u30e2\u30c1\u30d9\u30fc\u30b7\u30e7\u30f3\n\u4efb\u610f\u306e\u4e0e\u3048\u3089\u308c\u308b\u753b\u50cf\u304b\u3089\u3042\u308b\u7279\u5b9a\u306e\u7269\u4f53\u306e\u691c\u51fa\u3092\u8003\u3048\u308b\u3002\u4f8b\u3048\u3070\u5e02\u8857\u5730\u9053\u8def\u306e\u52d5\u753b\u306e\u4e00\u5834\u9762 \uff08\u753b\u50cf\uff09\u304b\u3089\u4eba\u3092\u691c\u51fa\u3059\u308b\u3053\u3068\u3092\u8003\u3048\u308b\u3002\u3053\u306e\u6642\u3001\u4eba\u306e\u7740\u3066\u3044\u308b\u670d\u306e\u6a21\u69d8\u306e\u8a73\u7d30\u304c\u308f\u304b\u308b\u3088\u3046\u306a\u30b9\u30b1\u30fc\u30eb\u306e\u753b\u50cf\u306f\u5fc5\u8981\u306a\u3044\u3002\u4eba\u306e\u5f62\u306f\u308f\u304b\u308b\u304c\u7740\u3066\u3044\u308b\u670d\u306f\u3069\u3093\u306a\u3082\u306e\u304b\u308f\u304b\u3089\u306a\u3044\u7a0b\u5ea6\u306e\u30b9\u30b1\u30fc\u30eb\u306e\u753b\u50cf\u306e\u65b9\u304c\u826f\u3044\u3002\u8a73\u7d30\u3059\u304e\u308b\u60c5\u5831\u306f\u3080\u3057\u308d\u30ce\u30a4\u30ba\u3068\u306a\u308b\u3002\n\n\u4e0a\u8ff0\u306e\u3088\u3046\u306b\u3001\u76ee\u7684\u306e\u7269\u4f53\u3092\u691c\u51fa\u3059\u308b\u306e\u306b\u9069\u3057\u305f\u753b\u50cf\u306e\u30b9\u30b1\u30fc\u30eb\u304c\u5b58\u5728\u3059\u308b\u3002\u3057\u304b\u3057\u3001\u73fe\u5b9f\u3067\u306f\u4e0e\u3048\u3089\u308c\u308b\u753b\u50cf\u304c\u3044\u3064\u3082\u9069\u5207\u306a\u30b9\u30b1\u30fc\u30eb\u3068\u306f\u9650\u3089\u306a\u3044\u3002\u305d\u3053\u3067\u3001\u4e0e\u3048\u3089\u308c\u308b\u753b\u50cf\u304b\u3089\u30b9\u30b1\u30fc\u30eb\u304c\u7570\u306a\u308b\u8907\u6570\u306e\u753b\u50cf\u3092\u751f\u6210\u3057\u3066\u96c6\u3081\u305f Scale-space \u3092\u69cb\u6210\u3057\u3001\u305d\u306e\u4e2d\u304b\u3089\u9069\u5207\u306a\u30b9\u30b1\u30fc\u30eb\u306e\u753b\u50cf\u3092\u898b\u3064\u3051\u7269\u4f53\u691c\u51fa\u3092\u884c\u3046\u3002\n\n## \u30b9\u30b1\u30fc\u30eb\u3068\u30b9\u30b1\u30fc\u30eb\u30a2\u30c3\u30d7\nScale-space \u306b\u304a\u3044\u3066\u30b9\u30b1\u30fc\u30eb\u30a2\u30c3\u30d7\u3068\u306f\u3001Gaussian convolution \u3068\u547c\u3070\u308c\u308b\u624b\u6cd5\u3092\u7528\u3044\u3066\u5143\u753b\u50cf\u304b\u3089\u8a73\u7d30\u306a\u60c5\u5831\u3092\u53d6\u308a\u9664\u304f\u3053\u3068\u3067\u3042\u308b\u3002\u30b9\u30b1\u30fc\u30eb\u30a2\u30c3\u30d7\u306e\u5ea6\u5408\u3044\u306f Gaussian convolution \u306e\u30d1\u30e9\u30e1\u30bf $\\sigma$ \u306b\u3088\u3063\u3066\u6c7a\u5b9a\u3055\u308c\u308b\u3002\u30b9\u30b1\u30fc\u30eb $\\sigma$ \u304c\u5927\u304d\u304f\u306a\u308b\u307b\u3069\u3088\u308a\u591a\u304f\u306e\u60c5\u5831\u304c\u5143\u753b\u50cf\u304b\u3089\u53d6\u308a\u9664\u304b\u308c\u308b\u3002\n\n\u4f8b\u3048\u3070\u4e0b\u56f3\u3067\u3042\u308c\u3070\u3001\u4e00\u756a\u5de6\u306e\u30aa\u30ea\u30b8\u30ca\u30eb\u753b\u50cf\u306f\u9854\u306e\u7d30\u90e8\u3084\u5e3d\u5b50\u306e\u30d5\u30a1\u30fc\u306e\u6bdb\u307e\u3067\u306f\u3063\u304d\u308a\u3068\u898b\u3066\u53d6\u308b\u3053\u3068\u304c\u3067\u304d\u308b\u3002\u4e00\u756a\u53f3\u306e\u30b9\u30b1\u30fc\u30eb $\\sigma = 3.2$ \u306e\u753b\u50cf\u3067\u306f\u3001\u307c\u3093\u3084\u308a\u3068\u5973\u6027\u304c\u304a\u308a\u76ee\u9f3b\u7acb\u304c\u306f\u3063\u304d\u308a\u3057\u3066\u3044\u308b\u306a\u3068\u3044\u3046\u3053\u3068\u306f\u308f\u304b\u308b\u304c\u3001\u305d\u308c\u4ee5\u4e0a\u306e\u3053\u3068\u306f\u308f\u304b\u3089\u306a\u3044\u3002\n\n<img alt=\"2D Gaussian convolution examples\" src=\"https://qiita-image-store.s3.amazonaws.com/0/108149/df487899-65e5-fc78-f755-5a6ad8fe1bc8.png\" width=\"520\">\n\n## \u69cb\u6210\u65b9\u6cd5\n1. \u5143\u753b\u50cf\uff08\u30b0\u30ec\u30fc\u30b9\u30b1\u30fc\u30eb\uff09\u3092\u6e96\u5099\u3002\n2. \u30b9\u30b1\u30fc\u30eb $\\sigma = k^{n}\\sigma_{0}$ \u3068\u3057\u3001$n$ \u306e\u521d\u671f\u5024\u3092 $0$ \u3068\u3059\u308b\u3002\n3. \u5143\u753b\u50cf\u3092 Gaussian convolution \u3092\u7528\u3044\u3066\u30b9\u30b1\u30fc\u30eb\u30a2\u30c3\u30d7\u3002 \n4. $k^{n}=2.0$ \u3068\u306a\u308b\u307e\u3067 $n$ \u3092 $1, 2, 3,...$ \u3068\u5897\u52a0\u3055\u305b\u306a\u304c\u3089\u624b\u98063\u3092\u7e70\u308a\u8fd4\u3059\u3002$k$ \u306f $k^{n}=2.0$ \u3068\u306a\u308b\u307e\u3067\u306b\u4f55\u679a\u306e\u753b\u50cf\u3092\u4f5c\u308a\u305f\u3044\u304b\u306b\u3088\u3063\u3066\u6c7a\u5b9a\u3055\u308c\u308b\u3002\n5. \u30b9\u30b1\u30fc\u30eb $\\sigma = 2.0\\sigma_{0}$ \u306e\u753b\u50cf\u3092\u7e26\u3068\u6a2a\u304c\u534a\u5206\u306e\u30b5\u30a4\u30ba\u306b\u306a\u308b\u3088\u3046\u30c0\u30a6\u30f3\u30b5\u30f3\u30d7\u30ea\u30f3\u30b0\u3002\n6. \u30c0\u30a6\u30f3\u30b5\u30f3\u30d7\u30ea\u30f3\u30b0\u3057\u305f\u753b\u50cf\u3092\u5143\u753b\u50cf\u3068\u3057\u3001$n=1$ \u3068\u3057\u3066\u624b\u9806 3 \u30d8\u623b\u308b\u3002\n\n\u8a73\u3057\u3044\u69cb\u6210\u65b9\u6cd5\u3068\u305d\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u306f\u3001 Gaussian convolution \u3084 Fourier \u5909\u63db\u3001\u30b5\u30f3\u30d7\u30ea\u30f3\u30b0\u5b9a\u7406\u306a\u3069\u3092\u4e00\u901a\u308a\u5b66\u7fd2\u3057\u305f\u306e\u3061\u8ff0\u3079\u308b\u3002\n\n# Gaussian convolution\n* Scale-space \u3067\u306f\u5143\u753b\u50cf\u304b\u3089\u30b9\u30b1\u30fc\u30eb $\\sigma$ \u306e\u753b\u50cf\u3092\u751f\u6210\u3059\u308b\u969b\u306b\u7528\u3044\u3089\u308c\u308b\u3002\n* \u4e00\u822c\u7684\u306a\u753b\u50cf\u51e6\u7406\u306e\u6587\u8108\u3067\u306f\u753b\u50cf\u306e\u30ce\u30a4\u30ba\u9664\u53bb\u3084\u307c\u304b\u3057\u306b\u7528\u3044\u3089\u308c\u308b\u3002\n* \u6570\u5b66\u7684\u306b\u306f Gaussian kernel \u3092\u7528\u3044\u3066\u4efb\u610f\u306e\u95a2\u6570\u306e\u91cd\u307f\u3064\u304d\u5e73\u5747\u306e\u7cfb\u5217\u3092\u6c42\u3081\u308b\u3002\n\n## 1\u6b21\u5143 Gaussian convolution\n1\u6b21\u5143 Gaussian convolution \u306f\u6b21\u5f0f\u3067\u8868\u3055\u308c\u308b\u3002\n\n```math\nF(x, \\sigma)=\\int_{-\\infty}^{\\infty} f(u) \\frac{1}{\\sqrt{2 \\pi \\sigma^{2}}}e^{-\\frac{(u-x)^2}{2\\sigma^{2}}} du\n```\n\n$f$ \u306f\u5143\u4fe1\u53f7\u3067\u3042\u308b\u3002$\\frac{1}{\\sqrt{2 \\pi \\sigma^{2}}}e^{-\\frac{(u-x)^2}{2\\sigma^{2}}}$ \u306f Gaussian kernel \u3068\u547c\u3070\u308c\u308b\u3002$\\sigma$ \u306f Gaussian kernel \u306e\u5f62\u72b6\u3092\u6c7a\u5b9a\u3059\u308b\u30d1\u30e9\u30e1\u30bf\u3067\u3042\u308b\u3002 Gaussian kernel \u306f\u4e2d\u5fc3 $x$ \u3067\u6700\u5927\u5024\u3092\u53d6\u308b\u91e3\u9418\u306e\u3088\u3046\u306a\u5f62\u3092\u3057\u3066\u304a\u308a\u3001\u305d\u306e\u9ad8\u3055\u3068\u5e83\u304c\u308a\u5177\u5408\u304c $\\sigma$ \u3067\u6c7a\u5b9a\u3055\u308c\u308b\u3002\n\n### Gaussian kernel\n\u8a66\u3057\u306b numpy \u3068 scipy \u3001matplotlib \u3092\u7528\u3044\u3066 Gaussian kernel \u3092\u63cf\u753b\u3057\u3066\u307f\u3088\u3046\u3002\n\n```py3\nimport numpy as np\nfrom scipy.signal import gaussian\nfrom matplotlib import pyplot as plt\n\n\nif __name__ == '__main__':\n    npoints = 101\n    sigmas = np.array([6.0, 12.0])\n    for i, sigma in enumerate(sigmas):\n        y = gaussian(npoints, sigma) / (np.sqrt(2.0 * np.pi) * sigma)\n        plt.subplot(len(sigmas), 1, i + 1)\n        plt.title('sigma = %s' % sigma)\n        plt.ylim(ymax=0.08)\n        plt.plot(np.arange(npoints/2 - npoints, npoints/2, dtype=np.int), y)\n    plt.tight_layout()\n    plt.show()\n```\n\n\u4e0a\u8a18\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u5b9f\u884c\u3059\u308c\u3070\u3001\u4e0b\u56f3\u304c\u7d50\u679c\u3068\u3057\u3066\u5f97\u3089\u308c\u308b\u3002\n\n<img alt=\"Gaussian kernel examples\" src=\"https://qiita-image-store.s3.amazonaws.com/0/108149/dbc4e253-cea7-0fe9-9355-2316161db0e7.png\" width=\"520\">\n\n[Gaussian kernel \u306e\u6027\u8cea\u3092\u5f8c\u65e5\u8ffd\u8a18]\n\n### \u89e3\u91c8\u3068\u9069\u7528\u4f8b\n\nGaussian convolution \u306e\u5f0f\u306f\u300c\u5143\u4fe1\u53f7 $f$ \u306b\u4e2d\u5fc3 $x$ \u5e83\u304c\u308a $\\sigma$ \u306e\u91cd\u307f (Gaussian kernel) \u3092\u639b\u3051\u3066\u305d\u306e\u7dcf\u548c\u3092\u3068\u3063\u305f\u3082\u306e\uff08\u52a0\u91cd\u5e73\u5747\uff09\u3092 $F(x, \\sigma)$ \u3067\u8868\u3059\u300d\u3068\u89e3\u91c8\u3067\u304d\u308b\u3002\u3053\u308c\u3088\u308a\u3001$F$ \u306f\u300c\u5143\u4fe1\u53f7 $f(u)$ \u306e $u=x$ \u8fd1\u508d\u306e\u60c5\u5831\u3092 $\\sigma$ \u3067\u6c7a\u5b9a\u3065\u3051\u3089\u308c\u308b\u5f37\u3055\u3067\u8272\u6fc3\u304f\u53cd\u6620\u3057\u3064\u3064 $f$ \u5168\u4f53\u306e\u60c5\u5831\u3092\u6301\u3063\u305f\u70b9 $F(x, \\sigma)$ \u3067\u69cb\u6210\u3055\u308c\u308b\u65b0\u305f\u306a\u4fe1\u53f7\u300d\u3067\u3042\u308b\u3068\u89e3\u91c8\u3067\u304d\u308b\u3002\u3053\u308c\u306f\u300c$F$ \u306f\u5143\u4fe1\u53f7 $f$ \u3092\u5f37\u5ea6 $\\sigma$ \u3067\u5e73\u6ed1\u5316\u3057\u305f\uff08\u307c\u304b\u3057\u305f\u3001\u30ce\u30a4\u30ba\u9664\u53bb\u3057\u305f\uff09\u4fe1\u53f7\u300d\u3060\u3068\u3044\u3046\u3053\u3068\u3067\u3042\u308b\u3002Scale-space \u306e\u6587\u8108\u3067\u306f\u300c $F$ \u306f $f$ \u3092\u30b9\u30b1\u30fc\u30eb $\\sigma$ \u306b\u30b9\u30b1\u30fc\u30eb\u30a2\u30c3\u30d7\u3057\u305f\uff08\u8a73\u7d30\u306a\u60c5\u5831\u3092\u53d6\u308a\u9664\u3044\u305f\uff09\u4fe1\u53f7\u300d\u3060\u3068\u8a00\u3048\u308b\u3002\n\nGaussian kernel \u306f\u524d\u7bc0\u3067\u898b\u305f\u3088\u3046\u306b $\\sigma$ \u304c\u5927\u304d\u304f\u306a\u308b\u307b\u3069\u5e73\u5766\u306b\u306a\u308b\u3002\u3053\u308c\u306f\u3001\u300c$\\sigma$ \u304c\u5927\u304d\u304f\u306a\u308b\u307b\u3069 $F(x, \\sigma)$ \u306b\u542b\u307e\u308c\u308b\u5143\u4fe1\u53f7 $f$ \u306e $u=x$ \u306e\u8fd1\u508d\u306e\u60c5\u5831\u306e\u8272\u304c\u8584\u308c\u308b\u300d\u3053\u3068\u3092\u610f\u5473\u3057\u3001$\\sigma$ \u3092\u3069\u3093\u3069\u3093\u5927\u304d\u304f\u3057\u3066\u3044\u3051\u3070\u6700\u7d42\u7684\u306b $F$ \u306f\u5168\u3066\u306e $x$ \u306b\u304a\u3044\u3066\u540c\u3058\u3088\u3046\u306a\u5024\u3092\u3068\u308b\u3088\u3046\u306b\u306a\u308b\u3002Scale-space \u306e\u6587\u8108\u3067\u306f\u300c\u30b9\u30b1\u30fc\u30eb $\\sigma$ \u3092\u5927\u304d\u304f\u3059\u308b\u307b\u3069\u5de8\u8996\u7684\u306a\u8996\u70b9\u3067\u4fe1\u53f7\u3092\u773a\u3081\uff08\u8a73\u7d30\u306a\u60c5\u5831\u306f\u5931\u308f\u308c\uff09\u3001\u6700\u7d42\u7684\u306b\u4fe1\u53f7\u306b\u542b\u307e\u308c\u308b\u60c5\u5831\u3092\u3059\u3079\u3066\u540c\u4e00\u8996\u3059\u308b\u3088\u3046\u306b\u306a\u308b\u300d\u3068\u89e3\u91c8\u3067\u304d\u308b\u3002\n\n\u3053\u3053\u307e\u3067\u306e\u8a71\u3092\u30d7\u30ed\u30b0\u30e9\u30e0\u3067\u53ef\u8996\u5316\u3057\u3066\u307f\u3088\u3046\u3002\n\n```py3\nimport numpy as np\nfrom scipy.ndimage.filters import gaussian_filter1d\nfrom matplotlib import pyplot as plt\n\n\nif __name__ == '__main__':\n    x = np.arange(0, 100)\n    f = np.sin(0.5 * x) + np.random.normal(0, 6.0, x.shape)\n\n    sigmas = [1.6, 3.2, 6.4]\n\n    plt.subplot(len(sigmas) + 1, 1, 1)\n    plt.ylim(ymin=np.min(f), ymax=np.max(f))\n    plt.title('Original')\n    plt.plot(f)\n\n    for i, sigma in enumerate(sigmas):\n        plt.subplot(len(sigmas) + 1, 1, 2 + i)\n        plt.title('Sigma = %s' % sigma)\n        plt.plot(gaussian_filter1d(f, sigma))\n    plt.tight_layout()\n    plt.show()\n```\n\n\u4e0a\u8a18\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u5b9f\u884c\u3059\u308b\u3068\u4e0b\u56f3\u304c\u5f97\u3089\u308c\u308b\u3002\n\n<img alt=\"Gaussian convolution examples\" src=\"https://qiita-image-store.s3.amazonaws.com/0/108149/c9f577f4-33b3-3dd8-a225-6431c423558a.png\" width=\"520\">\n\n$\\sigma$ \u304c\u5927\u304d\u304f\u306a\u308b\uff08\u30b9\u30b1\u30fc\u30eb\u30a2\u30c3\u30d7\u3059\u308b\uff09\u306b\u3064\u308c\u3001$F$ \u304b\u3089\u4fe1\u53f7 $f$ \u306e\u542b\u3080\u7d30\u304b\u306a\u60c5\u5831\u304c\u3069\u3093\u3069\u3093\u5931\u308f\u308c\u3066\u3044\u304f\u69d8\u304c\u308f\u304b\u308b\u3002\n\n## 2\u6b21\u5143 Gaussian convolution\n\u753b\u50cf\u306f2\u6b21\u5143\u4fe1\u53f7\u3067\u3042\u308b\u3002\u305d\u3053\u3067\u3001Gaussian convolution \u3092\u7528\u3044\u3066\u753b\u50cf\u3092\u30b9\u30b1\u30fc\u30eb\u30a2\u30c3\u30d7\u3059\u308b\u305f\u3081\u306b\u306f2\u6b21\u5143\u4fe1\u53f7\u306b\u5bfe\u3059\u308b Gaussian convolution \u304c\u5fc5\u8981\u3068\u306a\u308b\u3002\u4ee5\u964d\u3001\u5358\u306b Gaussian convolution \u3068\u66f8\u304f\u6642\u306f\u30012\u6b21\u5143 Gaussian convolution \u3092\u6307\u3059\u3053\u3068\u3068\u3059\u308b\u3002\n\n2\u6b21\u5143\u4fe1\u53f7\u306b\u5bfe\u3059\u308b Gaussian convolution \u306f\u6b21\u5f0f\u3067\u8868\u3055\u308c\u308b\u3002\n\n```math\nF(x, y, \\sigma) = \\int_{-\\infty}^{\\infty} \\int_{-\\infty}^{\\infty} f(u, v) \\frac{1}{2\\sigma^{2}} e^{-\\frac{(u - x)^2 + (v-y)^{2}}{\\sigma^{2}}} dudv\n```\n\n$\\frac{1}{2\\sigma^{2}} e^{-\\frac{(u - x)^2 + (v-y)^{2}}{\\sigma^{2}}}$ \u304c Gaussian kernel \u3067\u3042\u308b\u3002\u3053\u306e Gaussian kernel \u306f\u7acb\u4f53\u306e\u91e3\u9418\u578b\u3067\u3042\u308a\u3001$(x, y)$ \u3067\u6700\u5927\u5024\u3092\u53d6\u308a $\\sigma$ \u306f\u305d\u306e\u5e83\u304c\u308a\u3092\u8868\u3059\u3002\n\n### Gaussian kernel\n\u30d7\u30ed\u30b0\u30e9\u30e0\u3067 Gaussian kernel \u3092\u63cf\u753b\u3057\u3066\u307f\u3088\u3046\u3002\n\n```py\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom mpl_toolkits.mplot3d import Axes3D\n\n\ndef gaussian_kernel_2d(x, y, sigma):\n    return np.exp(-(np.power(x/sigma, 2) + np.power(y/sigma, 2)))/(2 * np.power(sigma, 2))\n\n\nif __name__ == '__main__':\n    xrange = np.arange(-10.0, 10.5, 0.5)\n    yrange = np.arange(-10.0, 10.5, 0.5)\n    kernel_values = np.zeros(shape=(len(yrange), len(xrange)))\n\n    sigmas = [1.6, 2.4]\n\n    fig = plt.figure()\n    X, Y = np.meshgrid(xrange, yrange)\n\n    for i, sigma in enumerate(sigmas):\n        ax = fig.add_subplot(len(sigmas), 1, 1 + i,  projection='3d')\n        plt.title('Sigma = %s' % sigma)\n        ax.set_zlim(zmax=0.2)\n        ax.plot_wireframe(X, Y, gaussian_kernel_2d(X, Y, sigma))\n    plt.show()\n```\n\n\u4e0a\u8a18\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u5b9f\u884c\u3059\u308b\u3068\u4e0b\u56f3\u3092\u5f97\u3089\u308c\u308b\u3002\u30de\u30a6\u30b9\u3067\u8996\u70b9\u3092\u5909\u3048\u308b\u3053\u3068\u304c\u53ef\u80fd\u3067\u3042\u308b\u3002\n\n<img alt=\"2D Gaussian kernel examples\" src=\"https://qiita-image-store.s3.amazonaws.com/0/108149/a04372fb-c400-4871-5f53-2f54279a8959.png\" width=\"520\">\n\n# \u96e2\u6563\u5316 Gaussian convolution \n## Gaussian filter\n\u30b3\u30f3\u30d4\u30e5\u30fc\u30bf\u306f\u96e2\u6563\u7684\u306a\u5024\u3057\u304b\u6271\u3046\u3053\u3068\u304c\u3067\u304d\u305a\u3001\u307e\u305f\u305d\u306e\u7bc4\u56f2\u306f\u6709\u9650\u3067\u3042\u308b\u3002Gaussian kernel \u306f\u9023\u7d9a\u306a\u95a2\u6570\u3067\u5b9a\u7fa9\u57df\u306f $\\pm \\infty$ \u3067\u3042\u308b\u3002\u305d\u3053\u3067\u3001\u30b3\u30f3\u30d4\u30e5\u30fc\u30bf\u3067\u6271\u3048\u308b\u5f62\u306b\u3059\u308b\u305f\u3081\u3001Gaussian kernel \u3092\u6709\u9650\u500b\u306e\u6570\u5024\u5217\u3067\u8fd1\u4f3c\u3057\u3066\u96e2\u6563\u5316\u3059\u308b\u5fc5\u8981\u304c\u3042\u308b\u3002\n\n$s$ \u884c $t$ \u5217\u306e\u683c\u5b50\u3092\u8003\u3048\u308b\u3002\u4ee5\u964d\u3053\u306e\u683c\u5b50\u3092 $s \\times t$ \u306e filter \u3068\u3044\u3046\u3002\u3053\u308c\u306f\u30d7\u30ed\u30b0\u30e9\u30e0\u4e0a\u3067\u4e0b\u8a18\u306e\u3088\u3046\u306a2\u6b21\u5143\u914d\u5217\u3067\u8868\u73fe\u3055\u308c\u308b\u3002\n\n```py\nfilter = np.zeros(shape=(s, t))\n```\n\n\u5909\u6570 filter \u306e\u3059\u3079\u3066\u306e\u8981\u7d20\u306b $u=0$ \u306e\u6642\u306e Gaussian kernel \u3092\u3088\u304f\u8868\u73fe\u3059\u308b\u3088\u3046\u5024\u3092\u8a2d\u5b9a\u3067\u304d\u308c\u3070\u3001$u=0$ \u306e Gaussian kernel \u3092\u96e2\u6563\u5316\u3057\u305f Gaussian filter $g$ \u304c\u4f5c\u6210\u3067\u304d\u308b\u3002\u3053\u3053\u3067\u306f\u3001$g$ \u306e $k$ \u884c $l$ \u5217\u306e\u8981\u7d20 $g(k,l)$ = $\\frac{1}{\\alpha} e^{-\\frac{l^{2} + k^{2}}{\\sigma^{2}}}$ \u3068\u8a2d\u5b9a\u3059\u308b\u3002\u3053\u3053\u3067 $\\alpha$ \u306f $g$ \u306e\u5168\u3066\u306e\u8981\u7d20\u3092\u8db3\u3057\u305f\u6642\u306b\u305d\u306e\u5408\u8a08\u304c $1$ \u3068\u306a\u308b\u3088\u3046\u306b\u6b63\u898f\u5316\u3059\u308b\u5b9a\u6570\u3067\u3042\u308b\u3002\n\n## Gaussian filter \u3092\u7528\u3044\u305f Gaussian convolution\n\u6b21\u5f0f\u306f Gaussian filter \u3092\u7528\u3044\u305f Gaussian convolution \u3067\u3042\u308b\u3002\u3053\u308c\u3092\u96e2\u6563\u5316 Gaussian convolution \u3068\u547c\u3076\u3002\u4ee5\u964d\u3001\u5358\u306b Gaussian convolution \u3068\u3044\u3046\u3068\u304d\u306f\u3001\u3053\u306e\u96e2\u6563\u5316 Gaussian convolution \u3092\u6307\u3059\u3082\u306e\u3068\u3059\u308b\u3002\n\n```math\nF(i, j) = \\sum_{k=0}^{s}\\sum_{l=0}^{t} f(i+k-[\\frac{s}{2}], j+l-[\\frac{t}{2}]) g(k, l)\n```\n\n* $f$: $m \\times n$ \u306e\u5143\u753b\u50cf\n* $g$: $s \\times t$ \u306e Gaussian filter\n* $F$: $m \\times n$ \u306e\u51fa\u529b\u753b\u50cf\n\n\u4e0a\u5f0f\u306e\u901a\u308a\u306b\u7d20\u76f4\u306b\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u4f5c\u6210\u3059\u308b\u3068\u4e0b\u8a18\u306e\u3088\u3046\u306b\u306a\u308b\u3002\n\n```py3\nfor k in range(s):\n    for l in range(t):\n        F[i, j] = f[i + k - int(s/2), j + l - int(t/2)] * g(k, l)\n```\n\n\u3053\u306e\u5834\u5408\u51fa\u529b\u753b\u50cf $F$ \u306e1\u753b\u7d20\u3092\u6c42\u3081\u308b\u305f\u3081\u306b $s \\times t$ \u56de\u306e\u6f14\u7b97\u304c\u5fc5\u8981\u3067\u3042\u308a\u3001\u51fa\u529b\u753b\u50cf\u5168\u3066\u306e\u753b\u7d20\u3092\u6c42\u3081\u308b\u305f\u3081\u306b\u306f $m \\times n \\times s \\times t$ \u56de\u306e\u6f14\u7b97\u304c\u5fc5\u8981\u3068\u306a\u308b\u3002$320 \\times 240$ \u306e\u753b\u50cf\u3068 $5 \\times 5$ \u306e Gaussian filter \u3067 convolution \u3057\u305f\u5834\u5408\u3001\u5408\u8a08\u3067 $1,920,000$ \u56de\u306e\u6f14\u7b97\u304c\u5fc5\u8981\u3068\u306a\u308b\u3002\u3053\u306e\u6f14\u7b97\u56de\u6570\u304c\u30af\u30ea\u30c6\u30a3\u30ab\u30eb\u3067\u3042\u308b\u304b\u5426\u304b\u306f\u30de\u30b7\u30f3\u30b9\u30da\u30c3\u30af\u3084\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u306b\u3088\u308b\u304c\u3001\u79c1\u306e MacBook Air (13-inch, Early 2015) \u4e0a\u3067\u306f\u30af\u30ea\u30c6\u30a3\u30ab\u30eb\u3067\u3042\u308b\u3002\n\n## \u9ad8\u901f\u5316\nGaussian convolution \u306f\u3001$s \\times t$ \u306e Gaussian filter \u3092\u7528\u3044\u305f Gaussian convolution \u306e\u51fa\u529b\u753b\u50cf $F$ \u304c\u3001\u6b21\u306e 2 \u30b9\u30c6\u30c3\u30d7\u3067\u51fa\u529b\u3055\u308c\u308b\u753b\u50cf $F_{1}$ \u3067\u8868\u3055\u308c\u308b\u3068\u3044\u3046\u6027\u8cea\u3092\u6301\u3063\u3066\u3044\u308b\u3002\n\n1. $1 \\times t$ \u306e 1 \u6b21\u5143 Gaussian filter \u3092\u5143\u753b\u50cf $f$ \u306e\u5404\u884c\u3068 convolution \u3057\u3066\u753b\u50cf $F_{0}$ \u3092\u51fa\u529b\u3002\n2. $s \\times 1$ \u306e 1 \u6b21\u5143 Gaussian filter \u3092 $F_{0}$ \u306e\u5404\u5217\u3068 convolution \u3057\u3066\u753b\u50cf $F_{1}$ \u3092\u51fa\u529b\u3002\n\n\u3053\u308c\u306f\u6b21\u306e\u3088\u3046\u306b\u8a3c\u660e\u3055\u308c\u308b\u3002\n\n```math\n\\begin{align}\nF(i, j) &=\\sum_{k=0}^{s}\\sum_{l=0}^{t} f(i+k-[\\frac{s}{2}], j+l-[\\frac{t}{2}]) g(k, l)\\\\\n\n&= \\sum_{k=0}^{s}\\sum_{l=0}^{t} f(i+k-[\\frac{s}{2}], j+l-[\\frac{t}{2}]) \\frac{1}{\\alpha}e^{-\\frac{l^{2} + k^{2}}{\\sigma^{2}}}\\\\\n\n&= \\sum_{k=0}^{s}\\sum_{l=0}^{t} f(i+k-[\\frac{s}{2}], j+l-[\\frac{t}{2}]) \\frac{1}{\\alpha}e^{-\\frac{l^{2}}{\\sigma^{2}}}e^{-\\frac{k^{2}}{\\sigma^{2}}}\\\\\n\n&=\\frac{\\alpha_{0}\\alpha_{1}}{\\alpha} \\sum_{k=0}^{s}\\frac{1}{\\alpha_{1}}e^{\\frac{-k^{2}}{\\sigma^{2}}}\\sum_{l=0}^{t} f(i+k-[\\frac{s}{2}], j+l-[\\frac{t}{2}]) \\frac{1}{\\alpha_{0}}e^{-\\frac{l^{2}}{\\sigma^{2}}}\\\\\n\n&=\\frac{\\alpha_{0}\\alpha_{1}}{\\alpha} \\sum_{k=0}^{s}\\frac{1}{\\alpha_{1}}e^{\\frac{-k^{2}}{\\sigma^{2}}}\\sum_{l=0}^{t} f(i+k-[\\frac{s}{2}], j+l-[\\frac{t}{2}]) g_{0}(l)\\\\\n\n\n&=\\frac{\\alpha_{0}\\alpha_{1}}{\\alpha} \\sum_{k=0}^{s}\\frac{1}{\\alpha_{1}}e^{-\\frac{k^{2}}{\\sigma^{2}}} F_{0}(i, j)\\\\\n\n\n&=\\frac{\\alpha_{0}\\alpha_{1}}{\\alpha} \\sum_{k=0}^{s} F_{0}(i, j) g_{1}(k)\\\\\n\n\n&=\\frac{\\alpha_{0}\\alpha_{1}}{\\alpha} F_{1}(i, j)\n\\end{align}\n```\n\n* $g_{0}$: $1 \\times t$ \u306e Gaussian filter\n* $g_{1}$: $s \\times 1$ \u306e Gaussian filter\n* $\\alpha$: $g$ \u306e\u6b63\u898f\u5316\u5b9a\u6570\n* $\\alpha_{0}$: $g_{0}$ \u306e\u6b63\u898f\u5316\u5b9a\u6570\n* $\\alpha$: $g_{1}$ \u306e\u6b63\u898f\u5316\u5b9a\u6570\n\n\u3053\u306e\u3088\u3046\u306b\u3059\u308b\u3053\u3068\u3067\u6f14\u7b97\u56de\u6570\u306f $s \\times m + t \\times n$ \u3068\u306a\u308b\u3002$320 \\times 240$ \u306e\u753b\u50cf\u3068 $5 \\times 5$ \u306e Gaussian filter \u306e convolution \u306e\u5834\u5408\u3001\u6f14\u7b97\u56de\u6570\u306f $768,000$ \u56de\u3068\u306a\u308b\u3002\u9ad8\u901f\u5316\u306b\u3088\u308a\u6f14\u7b97\u56de\u6570\u3092 $60\\%$ \u6e1b\u3089\u3059\u3053\u3068\u304c\u3067\u304d\u308b\u3002\n\n## \u753b\u50cf\u3078\u306e\u9069\u7528\n\u5b9f\u969b\u306b\u753b\u50cf\u306b Gaussian convolution \u3092\u9069\u7528\u3057\u3066\u307f\u3088\u3046\u3002\u4eca\u56de\u306f Pillow, numpy, scipy \u3092\u7528\u3044\u308b\u3002\u4e0b\u8a18\u30d7\u30ed\u30b0\u30e9\u30e0\u3067\u306f\u30b9\u30b1\u30fc\u30eb $\\sigma = 1.6$ \u306e\u753b\u50cf\u3068\u30b9\u30b1\u30fc\u30eb $\\sigma = 3.2$ \u306e\u753b\u50cf\u3092\u751f\u6210\u3057\u3066\u3044\u308b\u3002\n\n```py3\nfrom PIL import Image\nimport numpy as np\nfrom scipy.ndimage.filters import gaussian_filter\nfrom matplotlib import pyplot as plt\n\nif __name__ == '__main__':\n    orig_image = Image.open('lena.jpg').convert('L')\n    orig_image = np.array(orig_image, dtype=np.uint8)\n\n    sigmas = [1.6, 3.2]\n\n    plt.subplot(1, len(sigmas) + 1, 1)\n    plt.title('Orig')\n    plt.imshow(orig_image, cmap='Greys_r')\n    for i, sigma in enumerate(sigmas):\n        plt.subplot(1, len(sigmas) + 1, 2 + i)\n        plt.title('Sigma=%s' % sigma)\n        plt.imshow(gaussian_filter(orig_image, sigma), cmap='Greys_r')\n    plt.tight_layout()\n    plt.savefig('gausian_convolution_2d_examples.png')\n    plt.show()\n```\n\n\u4e0a\u8a18\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u5b9f\u884c\u3059\u308b\u3068\u4e0b\u56f3\u304c\u5f97\u3089\u308c\u308b\u3002\n\n<img alt=\"2D Gaussian convolution examples\" src=\"https://qiita-image-store.s3.amazonaws.com/0/108149/df487899-65e5-fc78-f755-5a6ad8fe1bc8.png\" width=\"520\">\n\n\u753b\u50cf\u3092\u6271\u3046\u6709\u540d\u306a\u30e9\u30a4\u30d6\u30e9\u30ea\u306b OpenCV \u304c\u3042\u308b\u3002\u305d\u308c\u304c\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3055\u308c\u3066\u3044\u308b\u4eba\u306f\u3001\u305d\u308c\u3092\u4f7f\u3063\u3066\u3082\u826f\u3044\u3002\u307e\u305f\u3001Gaussian convolution \u3092\u81ea\u529b\u3067\u30a4\u30f3\u30d7\u30ea\u30e1\u30f3\u30c8\u3057\u3066\u307f\u308b\u306e\u3082\u826f\u3044\u3002 \n\n\u3053\u3053\u307e\u3067\u3067\u5143\u753b\u50cf\u306b\u5bfe\u3057\u3066\u4efb\u610f\u306e\u30b9\u30b1\u30fc\u30eb $\\sigma$ \u306e\u753b\u50cf\u3092\u751f\u6210\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u3063\u305f\u3002\n\n# Scale-space 1st octave \u306e\u69cb\u7bc9\n\u3044\u3088\u3044\u3088 Scale-space \u306e\u69cb\u7bc9\u3092\u884c\u3046\u3002\u7ae0\u984c\u4e2d\u306e 1st octave \u3064\u3044\u3066\u306f\u5f8c\u8ff0\u3059\u308b\u3002\n\n## \u69cb\u7bc9\u306e\u6d41\u308c\n1. \u30d9\u30fc\u30b9\u3068\u306a\u308b\u30b9\u30b1\u30fc\u30eb $\\sigma_{0}$ \u3092\u6c7a\u5b9a\u3002\n2. \u30b9\u30b1\u30fc\u30eb\u304c $k^{n}\\sigma$ \u306e\u753b\u50cf\u3092 $n=0,...,s$ \u306b\u3064\u3044\u3066\u751f\u6210\u3059\u308b\u3002$s$ \u306f scale-space 1st octave \u306e\u5206\u5272\u6570\u3002 $k=2^{1/s}$ \u3067\u8868\u3055\u308c\u308b\u3002\n\n## Scale-space 1st octave \u3092\u69cb\u7bc9\u3059\u308b\u30d7\u30ed\u30b0\u30e9\u30e0\n\n```py3\nfrom PIL import Image\nimport numpy as np\nfrom scipy.ndimage.filters import gaussian_filter\nfrom matplotlib import pyplot as plt\n\n\nif __name__ == '__main__':\n    orig_image = Image.open('lena.jpg').convert('L')\n    orig_image = np.array(orig_image, dtype=np.uint8)\n\n    sigma = 1.6\n    s = 3\n    k = np.power(2, 1/s)\n    scale_space = []\n\n    for n in range(s + 1):\n        scale_space.append(gaussian_filter(orig_image, np.power(k, n) * sigma))\n\n    for n, img in enumerate(scale_space):\n        plt.subplot(1, len(scale_space), 1 + n)\n        plt.title('Sigma=%s' % np.round(np.power(k, n) * sigma, 2))\n        plt.imshow(img, cmap='Greys_r')\n    plt.tight_layout()\n    plt.show()\n```\n\n\u4e0a\u8a18\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u5b9f\u884c\u3059\u308b\u3068\u5909\u6570 scale_space \u306b\u30b9\u30b1\u30fc\u30eb\u304c $1.6$ \u304b\u3089 $3.2$ \u307e\u3067\u306e4\u679a\u306e\u753b\u50cf\u304c\u683c\u7d0d\u3055\u308c\u3001\u4e0b\u56f3\u304c\u8868\u793a\u3055\u308c\u308b\u3002\n\n<img alt=\"2D Gaussian convolution examples\" src=\"https://qiita-image-store.s3.amazonaws.com/0/108149/4e67f146-2697-82b5-d027-7e0e78f58fe4.png\" width=\"520\">\n\n\u3053\u306e $k\\sigma$ \u304b\u3089 $2k\\sigma$ \u307e\u3067\u306e\u753b\u50cf\u3067\u69cb\u6210\u3055\u308c\u308b\u30b9\u30da\u30fc\u30b9\u3092 1st octave \u3068\u547c\u3076\u3002\n\n# Fourier \u5909\u63db\u3068\u30b5\u30f3\u30d7\u30ea\u30f3\u30b0\u5b9a\u7406\n2nd octave \u4ee5\u964d\u3092\u4f5c\u6210\u3059\u308b\u306b\u3042\u305f\u3063\u3066\u3001Fourier \u5909\u63db\u3068\u30b5\u30f3\u30d7\u30ea\u30f3\u30b0\u5b9a\u7406\u306b\u3064\u3044\u3066\u89e6\u308c\u3066\u304a\u304f\u5fc5\u8981\u304c\u3042\u308b\u3002\u305f\u3060\u3057\u3001\u4eca\u56de\u306f\u6df1\u5165\u308a\u305b\u305a\u3055\u3089\u3063\u3068\u6d41\u3059\u306e\u307f\u306b\u3068\u3069\u3081\u308b\u3002\n\n## Fourier \u5909\u63db\nFourier \u5909\u63db\u306f\u753b\u50cf\u3092\u30d4\u30af\u30bb\u30eb\u9818\u57df\u304b\u3089\u5468\u6ce2\u6570\u9818\u57df\u3078\u5909\u63db\u3059\u308b\u3082\u306e\u3067\u3042\u308b\u3002\n\n### 1\u6b21\u5143 Fourier \u5909\u63db\u306e\u5f0f\n\n```math\nF(j\\omega) = \\int_{-\\infty}^{\\infty} f(x) e^{-j\\omega x} dx\n```\n\n* $f$: \u5834\u6240\u9818\u57df\u306e\u4fe1\u53f7\uff08\u4f8b\u3048\u3070\u7d30\u9577\u3044\u30b9\u30ea\u30c3\u30c8\u3092\u901a\u904e\u3059\u308b\u5149\u306e\u660e\u5ea6\uff09\n* $F$: $f$ \u306e\u5468\u6ce2\u6570\u9818\u57df\u3067\u306e\u8868\u73fe\n* $\\omega$: \u89d2\u5468\u6ce2\u6570 ($2\\pi\\omega_{0}$\u3001\u3053\u3053\u3067 $\\omega_{0}$ \u306f\u5468\u6ce2\u6570)\n* $e^{-j\\omega x} = \\cos(\\omega x) - j \\sin(\\omega x) $\n* $j$: \u865a\u6570\u5358\u4f4d\n\n### 1\u6b21\u5143 Fourier \u5909\u63db\u306e\u9069\u7528\u4f8b\nnumpy, scipy, matplotlib \u3092\u7528\u3044\u3066 FFT (Fast Fourier Transform) \u306b\u3088\u308b Fourier \u5909\u63db\u3092\u884c\u3063\u3066\u307f\u308b\u3002\u4e0b\u8a18\u30d7\u30ed\u30b0\u30e9\u30e0\u3067\u306f\u3001\u30b5\u30f3\u30d7\u30ea\u30f3\u30b0\u30ec\u30fc\u30c8\u309220, \u5143\u4fe1\u53f7\u306e\u89d2\u5468\u6ce2\u6570\u3092 $2\\pi$ \u3068\u3057\u3066\u3044\u308b\u3002\n\n```py3\nimport numpy as np\nfrom scipy.fftpack import fft\nfrom matplotlib import pyplot as plt\n\n\nif __name__ == '__main__':\n    sampling_rate = 20\n    sampling_interval = 1.0/sampling_rate\n    x = np.arange(0, 1, sampling_interval)\n\n    omega0 = 1.0\n    omega = 2.0 * np.pi * omega0\n    f = np.sin(omega * x)\n\n    F = fft(f)\n\n    plt.plot(np.arange(-len(f)/2, len(f)/2), np.abs(np.concatenate((F[len(f)/2:], F[:len(f)/2]))), 'bo-')\n    plt.show()\n```\n\n\u4e0a\u8a18\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u5b9f\u884c\u3059\u308b\u3068\u4e0b\u56f3\u3092\u5f97\u308b\u3002\n\n<img alt=\"2D Gaussian convolution examples\" src=\"https://qiita-image-store.s3.amazonaws.com/0/108149/730f6449-af4f-8ef1-f282-6b25604864b2.png\" width=\"520\">\n\n\u3053\u306e\u56f3\u304b\u3089\u3001\u5143\u4fe1\u53f7 $f$ \u306b\u306f\u5468\u6ce2\u6570 $1$ \u306e\u4fe1\u53f7\u304c\u542b\u307e\u308c\u3066\u3044\u308b\u3053\u3068\u304c\u308f\u304b\u308b\u3002\u5e7e\u3064\u304b\u306e\u5468\u671f\u95a2\u6570\u3092\u91cd\u306d\u5408\u308f\u305b\u305f\u3082\u306e\u3092 Fourier \u5909\u63db\u3057\u3066\u307f\u308b\u3068\u826f\u3044\u3002\n\n[\u5f8c\u65e5\u3082\u3046\u5c11\u3057\u8a73\u3057\u304f\u66f8\u304f]\n\n### 1\u6b21\u5143\u4fe1\u53f7\u306e\u30b5\u30f3\u30d7\u30ea\u30f3\u30b0\u5b9a\u7406\n\u30b5\u30f3\u30d7\u30ea\u30f3\u30b0\u5b9a\u7406\u306f\u3001\u300c\u5143\u4fe1\u53f7 $f$ \u306b\u542b\u307e\u308c\u308b\u4fe1\u53f7\u306e\u6700\u5927\u5468\u671f\u304c $W$ \u3067\u3042\u308b\u3068\u304d\u3001\u5143\u4fe1\u53f7\u306e\u30b5\u30f3\u30d7\u30ea\u30f3\u30b0\u5468\u671f $T$ \u304c $T\\leq \\frac{1}{W}$ \u3067\u3042\u308c\u3070\u3001\u30b5\u30f3\u30d7\u30ea\u30f3\u30b0\u5f8c\u306e\u4fe1\u53f7 $f_{d}$ \u304b\u3089\u5143\u4fe1\u53f7 $f$ \u304c\u5b8c\u5168\u306b\u5fa9\u5143\u53ef\u80fd\u3067\u3042\u308b\u300d\u3053\u3068\u3092\u4e3b\u5f35\u3059\u308b\u3002\n\n[\u8a3c\u660e\u306f\u5f8c\u65e5\u8ffd\u52a0]\n\n### 1\u6b21\u5143\u4fe1\u53f7\u306e\u30b5\u30f3\u30d7\u30ea\u30f3\u30b0\u5b9a\u7406\u306e\u5b9f\u9a13\n\u30b5\u30f3\u30d7\u30ea\u30f3\u30b0\u5468\u671f\u3092 $1/20$ \u3068\u3059\u308b\u3002\u305d\u3046\u3059\u308b\u3068\u30b5\u30f3\u30d7\u30ea\u30f3\u30b0\u5b9a\u7406\u3088\u308a\u3001\u6700\u5927\u5468\u6ce2\u6570\u304c $10$ \u306e\u4fe1\u53f7\u307e\u3067\u306a\u3089 Fourier \u5909\u63db\u3067\u305d\u306e\u5468\u6ce2\u6570\u60c5\u5831\u3092\u5168\u3066\u3046\u307e\u304f\u53d6\u308a\u51fa\u305b\u308b\u306f\u305a\u3067\u3042\u308b\u3002\n\n\u4e0b\u8a18\u30d7\u30ed\u30b0\u30e9\u30e0\u3067\u78ba\u8a8d\u3057\u3066\u307f\u3088\u3046\u3002\n\n```py3\nimport numpy as np\nfrom scipy.fftpack import fft\nfrom matplotlib import pyplot as plt\n\nif __name__ == '__main__':\n    sampling_rate = 20\n    sampling_interval = 1.0/sampling_rate\n    x = np.arange(0, 1, sampling_interval)\n\n    omega0s = [9, 10, 11, 30]\n\n    for i, omega0 in enumerate(omega0s):\n        omega = 2.0 * np.pi * omega0\n        f = np.sin(omega * x)\n\n        F = fft(f)\n\n        plt.subplot(len(omega0s),  1,  1 + i)\n        plt.plot(np.arange(-len(f)/2, len(f)/2), np.abs(np.concatenate((F[len(f)/2:], F[:len(f)/2]))), 'bo-')\n        plt.title('Max frequency = %s' % omega0)\n        plt.xlabel('Frequency')\n        plt.ylabel('Amplitude spectrum')\n    plt.tight_layout()\n    plt.show()\n```\n\n\u5b9f\u884c\u3059\u308b\u3068\u4e0b\u56f3\u304c\u5f97\u3089\u308c\u308b\u3002\u3053\u306e\u7d50\u679c\u3060\u3068\u6700\u5927\u5468\u6ce2\u6570\u304c $9$ \u306e\u4fe1\u53f7\u3067\u5468\u6ce2\u6570\u60c5\u5831\u304c\u3046\u307e\u304f\u53d6\u308a\u51fa\u305b\u3066\u3044\u308b\u3053\u3068\u304c\u308f\u304b\u308b\uff08\u5f8c\u65e5\u8a73\u7d30\u8ffd\u8a18\uff09\u3002\n\n<img alt=\"Sampling theorem examples\" src=\"https://qiita-image-store.s3.amazonaws.com/0/108149/422b5d9d-fd6a-351c-e7f5-2a6ce7f06b52.png\" width=\"520\">\n\n## 2\u6b21\u5143 Fourier \u5909\u63db\n\n[\u5f8c\u65e5\u8ffd\u8a18]\n\n# 2nd octave \u4ee5\u964d\u306e\u69cb\u7bc9\n\n## \u30c0\u30a6\u30f3\u30b5\u30f3\u30d7\u30ea\u30f3\u30b0\n\n### \u6982\u8981\n\n[\u5f8c\u65e5\u8ffd\u8a18]\n\n### \u30c0\u30a6\u30f3\u30b5\u30f3\u30d7\u30ea\u30f3\u30b0\u306e\u59a5\u5f53\u6027\u8a3c\u660e\n\n[\u5f8c\u65e5\u8ffd\u8a18]\n\n### 2nd octave \u69cb\u7bc9\u30d7\u30ed\u30b0\u30e9\u30e0\n\n[\u5f8c\u65e5\u8ffd\u8a18]\n\n# \u53c2\u8003\u6587\u732e\n* [Distinctive Image Features from Scale-Invariant Keypoints (David G. Lowe)](https://www.cs.ubc.ca/~lowe/papers/ijcv04.pdf)\n* [\u4fe1\u53f7\u51e6\u7406 (\u68ee\u4e0b \u5dcc, \u5c0f\u7551\u79c0\u6587)](http://www.amazon.co.jp/gp/product/433908333X/ref=as_li_tf_tl?ie=UTF8&camp=247&creative=1211&creativeASIN=433908333X&linkCode=as2&tag=mpsamurai-22)\n"}