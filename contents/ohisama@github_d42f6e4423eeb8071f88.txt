{"context": "\n\n\u6982\u8981\njsdo\u3067shadertoy\u306e\u30b3\u30fc\u30c9\u3092\u5b9f\u884c\u3057\u305f\u3044\u3002\n\u30b5\u30a6\u30f3\u30c9\u306e\u6642\u9593\u3092\u4f7f\u7528\u3057\u305f\u3044\u3002\n\n\u6210\u679c\u7269\nhttp://jsdo.it/ohisama1/ozjo\n\n\u5199\u771f\n\n\n\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\nprecision mediump float;\nuniform vec2 iResolution;\nuniform float iGlobalTime;\nuniform float iChannelTime[4];\nuniform sampler2D iChannel0;\n\nfloat beat = 0.;\nfloat mb(vec2 p1, vec2 p0) { \n    return (0.04 + beat) / (pow(p1.x - p0.x, 2.) + pow(p1.y - p0.y, 2.)); \n}\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n    float ct = iChannelTime[0];\n    if ((ct > 8.0 && ct < 33.5) || (ct > 38.0 && ct < 88.5) || (ct > 93.0 && ct < 194.5)) beat = pow(sin(ct * 3.1416 * 3.78 + 1.9) * 0.5 + 0.5, 15.0) * 0.05;\n    vec2 mbr, mbg, mbb;\n    vec2 p = (2.0 * fragCoord.xy - iResolution.xy) / iResolution.y;\n    vec2 o = vec2(pow(p.x, 2.), pow(p.y, 2.));\n    vec3 col = vec3(pow(2. * abs(o.x + o.y) + abs(o.x - o.y), 5.));\n    col = max(col, 1.);\n    float t = iGlobalTime + beat * 2.;\n    float t2 = t * 2.0, t3 = t * 3.0, s2 = sin(t2), s3 = sin(t3), s4 = sin(t * 4.0), c2 = cos(t2), c3 = cos(t3);\n    mbr = mbg = mbb = vec2(0.);\n    mbr += vec2(0.10 * s4 + 0.40 * c3, 0.40 * s2 + 0.20 * c3);\n    mbg += vec2(0.15 * s3 + 0.30 * c2, 0.10 * -s4 + 0.30 * c3);\n    mbb += vec2(0.10 * s3 + 0.50 * c3, 0.10 * -s4 + 0.50 * c2);\n    col.r *= length(mbr.xy - p.xy);\n    col.g *= length(mbg.xy - p.xy);\n    col.b *= length(mbb.xy - p.xy);\n    col *= pow(mb(mbr, p) + mb(mbg, p) + mb(mbb, p), 1.75);\n    fragColor = vec4(col, 1.);\n}\n\n\n\nvoid main() \n{\n    vec4 color = vec4(0.0, 0.0, 0.0, 1.0);\n    mainImage(color, gl_FragCoord.xy);\n    color.w = 1.0;\n    gl_FragColor = color;\n}   \n\n\n\u8aac\u660e\niChannelTime\u3092\u5b9f\u88c5\u3057\u305f\u3002\n\u30b5\u30a6\u30f3\u30c9\u306e\u30ab\u30ec\u30f3\u30c8\u30bf\u30a4\u30e0\u3092\u6d41\u3057\u8fbc\u3080\u3002\n#\u6982\u8981\njsdo\u3067shadertoy\u306e\u30b3\u30fc\u30c9\u3092\u5b9f\u884c\u3057\u305f\u3044\u3002\n\u30b5\u30a6\u30f3\u30c9\u306e\u6642\u9593\u3092\u4f7f\u7528\u3057\u305f\u3044\u3002\n#\u6210\u679c\u7269\nhttp://jsdo.it/ohisama1/ozjo\n#\u5199\u771f\n![y.jpg](https://qiita-image-store.s3.amazonaws.com/0/18104/23a6f2ea-6d19-4550-80ce-a618fbbc8a3d.jpeg)\n\n#\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\n```\nprecision mediump float;\nuniform vec2 iResolution;\nuniform float iGlobalTime;\nuniform float iChannelTime[4];\nuniform sampler2D iChannel0;\n    \nfloat beat = 0.;\nfloat mb(vec2 p1, vec2 p0) { \n    return (0.04 + beat) / (pow(p1.x - p0.x, 2.) + pow(p1.y - p0.y, 2.)); \n}\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord)\n{\n\tfloat ct = iChannelTime[0];\n\tif ((ct > 8.0 && ct < 33.5)\t|| (ct > 38.0 && ct < 88.5) || (ct > 93.0 && ct < 194.5)) beat = pow(sin(ct * 3.1416 * 3.78 + 1.9) * 0.5 + 0.5, 15.0) * 0.05;\n\tvec2 mbr, mbg, mbb;\n\tvec2 p = (2.0 * fragCoord.xy - iResolution.xy) / iResolution.y;\n\tvec2 o = vec2(pow(p.x, 2.), pow(p.y, 2.));\n\tvec3 col = vec3(pow(2. * abs(o.x + o.y) + abs(o.x - o.y), 5.));\n\tcol = max(col, 1.);\n\tfloat t = iGlobalTime + beat * 2.;\n\tfloat t2 = t * 2.0, t3 = t * 3.0, s2 = sin(t2), s3 = sin(t3), s4 = sin(t * 4.0), c2 = cos(t2), c3 = cos(t3);\n\tmbr = mbg = mbb = vec2(0.);\n\tmbr += vec2(0.10 * s4 + 0.40 * c3, 0.40 * s2 + 0.20 * c3);\n\tmbg += vec2(0.15 * s3 + 0.30 * c2, 0.10 * -s4 + 0.30 * c3);\n\tmbb += vec2(0.10 * s3 + 0.50 * c3, 0.10 * -s4 + 0.50 * c2);\n\tcol.r *= length(mbr.xy - p.xy);\n\tcol.g *= length(mbg.xy - p.xy);\n\tcol.b *= length(mbb.xy - p.xy);\n\tcol *= pow(mb(mbr, p) + mb(mbg, p) + mb(mbb, p), 1.75);\n    fragColor = vec4(col, 1.);\n}\n\n\n\nvoid main() \n{\n    vec4 color = vec4(0.0, 0.0, 0.0, 1.0);\n    mainImage(color, gl_FragCoord.xy);\n    color.w = 1.0;\n    gl_FragColor = color;\n}   \n```\n#\u8aac\u660e\niChannelTime\u3092\u5b9f\u88c5\u3057\u305f\u3002\n\u30b5\u30a6\u30f3\u30c9\u306e\u30ab\u30ec\u30f3\u30c8\u30bf\u30a4\u30e0\u3092\u6d41\u3057\u8fbc\u3080\u3002\n\n", "tags": ["jsdo", "shadertoy", "GLSL", "WebGL"]}