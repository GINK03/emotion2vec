{"context": " More than 1 year has passed since last update.C\u8a00\u8a9e\u3067\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u306b\u76f4\u63a52\u9032\u6570\u3092\u66f8\u304d\u305f\u3044\u5834\u5408\u304c\u3042\u308b\uff08\u3088\u3046\u306a\u7a2e\u985e\u306e\u696d\u52d9\u304c\u3042\u308b\uff09\u3002\n\u3067\u3002\nC\u8a00\u8a9e\u306a\u306e\u3067\u30de\u30af\u30ed\u3067\u5b9f\u73fe\u3059\u308b\u3002\n\u95a2\u6570\u3067\u5b9f\u73fe\u3059\u308b\u3068 enum \u306b\u5165\u308c\u3089\u308c\u306a\u3044\u3068\u304b\u3001\u3044\u308d\u3044\u308d\u56f0\u308b\u306e\u3067\u3002\n\u8efd\u304f\u691c\u7d22\u3059\u308b\u3068\u3059\u3050\u306b\u5b9f\u88c5\u4f8b\u304c\u898b\u3064\u304b\u308a\u3001\u4f8b\u3048\u3070\nhttp://www.kmc.gr.jp/~tak/memo/c-binary.html\n\u306b\u6b63\u89e3\u304c\u3042\u308b\u3093\u3060\u3051\u3069\u3001\u305b\u3063\u304b\u304f\u306a\u306e\u3067\u3061\u3087\u3063\u3068\u6539\u5909\u3057\u305f\u30d0\u30fc\u30b8\u30e7\u30f3\u3092\u3002\n\nbinary_macro.c\n// compiled with clang -std=c99 -Wall\n#include <stdint.h> // to use UINT64_C\n#include <stdio.h>\n#include <assert.h>\n\n#define B(b) (\\\n        ((UINT64_C(0##b)>> 0) & 7 ? (1U<< 0) : 0U) | \\\n        ((UINT64_C(0##b)>> 3) & 7 ? (1U<< 1) : 0U) | \\\n        ((UINT64_C(0##b)>> 6) & 7 ? (1U<< 2) : 0U) | \\\n        ((UINT64_C(0##b)>> 9) & 7 ? (1U<< 3) : 0U) | \\\n        ((UINT64_C(0##b)>>12) & 7 ? (1U<< 4) : 0U) | \\\n        ((UINT64_C(0##b)>>15) & 7 ? (1U<< 5) : 0U) | \\\n        ((UINT64_C(0##b)>>18) & 7 ? (1U<< 6) : 0U) | \\\n        ((UINT64_C(0##b)>>21) & 7 ? (1U<< 7) : 0U) | \\\n        ((UINT64_C(0##b)>>24) & 7 ? (1U<< 8) : 0U) | \\\n        ((UINT64_C(0##b)>>27) & 7 ? (1U<< 9) : 0U) | \\\n        ((UINT64_C(0##b)>>30) & 7 ? (1U<<10) : 0U) | \\\n        ((UINT64_C(0##b)>>33) & 7 ? (1U<<11) : 0U) | \\\n        ((UINT64_C(0##b)>>36) & 7 ? (1U<<12) : 0U) | \\\n        ((UINT64_C(0##b)>>39) & 7 ? (1U<<13) : 0U) | \\\n        ((UINT64_C(0##b)>>42) & 7 ? (1U<<14) : 0U) | \\\n        ((UINT64_C(0##b)>>45) & 7 ? (1U<<15) : 0U) | \\\n        ((UINT64_C(0##b)>>48) & 7 ? (1U<<16) : 0U) | \\\n        ((UINT64_C(0##b)>>51) & 7 ? (1U<<17) : 0U) | \\\n        ((UINT64_C(0##b)>>54) & 7 ? (1U<<18) : 0U) | \\\n        ((UINT64_C(0##b)>>57) & 7 ? (1U<<19) : 0U) | \\\n        ((UINT64_C(0##b)>>60) & 7 ? (1U<<20) : 0U) | \\\n        ((UINT64_C(0##b)>>63) & 7 ? (1U<<21) : 0U) | \\\n        (0/!((UINT64_C(0##b)) & ~01111111111111111111111 ) ) | \\\n        ( 0 &sizeof&(b[(char*)0] )) \\\n\\\n)\n\nvoid test()\n{\n        enum{ \n                MASK_A = B(1010), // \u5b9a\u6570\u306b\u4f7f\u3048\u308b.\n                MASK_ZERO = B(0000),\n        };\n        printf( \"MASK_A==0x%x\\n\", MASK_A ); // MASK_A==0xa\n        printf( \"MASK_ZERO==0x%x\\n\", MASK_ZERO ); // MASK_ZERO==0x0\n        enum{ ACCEPT_ONLY_ZERO_OR_ONE=B(1234) }; // \u30b3\u30f3\u30d1\u30a4\u30eb\u30a8\u30e9\u30fc\n        enum{ ACCEPT_NO_OPERATOR=B(1+0) }; // \u30b3\u30f3\u30d1\u30a4\u30eb\u30a8\u30e9\u30fc\n        assert( MASK_A==0b1010 ); // clang \u3084 gcc \u3060\u3068 0b \u306b\u3064\u3065\u3051\u30662\u9032\u6570\u304c\u304b\u3051\u308b\u306e\u3067\u3001\u3053\u306e\u30de\u30af\u30ed\u306f\u4e0d\u8981\u3002\n}\n\n\n\u602a\u3057\u3052\u306a\u6700\u5f8c\u306e\u4e8c\u884c\u304c\u3001B(1234) \u3084 B(1+0) \u3092\u30a8\u30e9\u30fc\u306b\u3059\u308b\u3002\n\u3057\u304b\u3057\u3002C\u8a00\u8a9e\u3067 &sizeof& \u3068\u66f8\u3044\u305f\u306e\u306f\u521d\u3081\u3066\u3060\u3068\u601d\u3046\u3002\n\u6295\u7a3f\u3057\u3066\u304b\u3089\u6c17\u3065\u3044\u305f\u3051\u3069\u3001BOOST_BINARY \u304c\u3042\u308b\u3089\u3057\u3044\u3002\nsee http://www.boost.org/doc/libs/1_53_0/libs/utility/utility.htm#BOOST_BINARY\n\u30bd\u30fc\u30b9\u3092\u898b\u308b\u3068\u9b54\u529b\u306e\u9ad8\u3055\u306b\u754f\u308c\u5165\u308b\u3002\nC\u8a00\u8a9e\u3067\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u306b\u76f4\u63a52\u9032\u6570\u3092\u66f8\u304d\u305f\u3044\u5834\u5408\u304c\u3042\u308b\uff08\u3088\u3046\u306a\u7a2e\u985e\u306e\u696d\u52d9\u304c\u3042\u308b\uff09\u3002\n\n\u3067\u3002\nC\u8a00\u8a9e\u306a\u306e\u3067\u30de\u30af\u30ed\u3067\u5b9f\u73fe\u3059\u308b\u3002\n\u95a2\u6570\u3067\u5b9f\u73fe\u3059\u308b\u3068 enum \u306b\u5165\u308c\u3089\u308c\u306a\u3044\u3068\u304b\u3001\u3044\u308d\u3044\u308d\u56f0\u308b\u306e\u3067\u3002\n\u8efd\u304f\u691c\u7d22\u3059\u308b\u3068\u3059\u3050\u306b\u5b9f\u88c5\u4f8b\u304c\u898b\u3064\u304b\u308a\u3001\u4f8b\u3048\u3070\nhttp://www.kmc.gr.jp/~tak/memo/c-binary.html\n\u306b\u6b63\u89e3\u304c\u3042\u308b\u3093\u3060\u3051\u3069\u3001\u305b\u3063\u304b\u304f\u306a\u306e\u3067\u3061\u3087\u3063\u3068\u6539\u5909\u3057\u305f\u30d0\u30fc\u30b8\u30e7\u30f3\u3092\u3002\n\n```c:binary_macro.c\n// compiled with clang -std=c99 -Wall\n#include <stdint.h> // to use UINT64_C\n#include <stdio.h>\n#include <assert.h>\n\n#define B(b) (\\\n        ((UINT64_C(0##b)>> 0) & 7 ? (1U<< 0) : 0U) | \\\n        ((UINT64_C(0##b)>> 3) & 7 ? (1U<< 1) : 0U) | \\\n        ((UINT64_C(0##b)>> 6) & 7 ? (1U<< 2) : 0U) | \\\n        ((UINT64_C(0##b)>> 9) & 7 ? (1U<< 3) : 0U) | \\\n        ((UINT64_C(0##b)>>12) & 7 ? (1U<< 4) : 0U) | \\\n        ((UINT64_C(0##b)>>15) & 7 ? (1U<< 5) : 0U) | \\\n        ((UINT64_C(0##b)>>18) & 7 ? (1U<< 6) : 0U) | \\\n        ((UINT64_C(0##b)>>21) & 7 ? (1U<< 7) : 0U) | \\\n        ((UINT64_C(0##b)>>24) & 7 ? (1U<< 8) : 0U) | \\\n        ((UINT64_C(0##b)>>27) & 7 ? (1U<< 9) : 0U) | \\\n        ((UINT64_C(0##b)>>30) & 7 ? (1U<<10) : 0U) | \\\n        ((UINT64_C(0##b)>>33) & 7 ? (1U<<11) : 0U) | \\\n        ((UINT64_C(0##b)>>36) & 7 ? (1U<<12) : 0U) | \\\n        ((UINT64_C(0##b)>>39) & 7 ? (1U<<13) : 0U) | \\\n        ((UINT64_C(0##b)>>42) & 7 ? (1U<<14) : 0U) | \\\n        ((UINT64_C(0##b)>>45) & 7 ? (1U<<15) : 0U) | \\\n        ((UINT64_C(0##b)>>48) & 7 ? (1U<<16) : 0U) | \\\n        ((UINT64_C(0##b)>>51) & 7 ? (1U<<17) : 0U) | \\\n        ((UINT64_C(0##b)>>54) & 7 ? (1U<<18) : 0U) | \\\n        ((UINT64_C(0##b)>>57) & 7 ? (1U<<19) : 0U) | \\\n        ((UINT64_C(0##b)>>60) & 7 ? (1U<<20) : 0U) | \\\n        ((UINT64_C(0##b)>>63) & 7 ? (1U<<21) : 0U) | \\\n        (0/!((UINT64_C(0##b)) & ~01111111111111111111111 ) ) | \\\n        ( 0 &sizeof&(b[(char*)0] )) \\\n\\\n)\n\nvoid test()\n{\n        enum{ \n                MASK_A = B(1010), // \u5b9a\u6570\u306b\u4f7f\u3048\u308b.\n                MASK_ZERO = B(0000),\n        };\n        printf( \"MASK_A==0x%x\\n\", MASK_A ); // MASK_A==0xa\n        printf( \"MASK_ZERO==0x%x\\n\", MASK_ZERO ); // MASK_ZERO==0x0\n        enum{ ACCEPT_ONLY_ZERO_OR_ONE=B(1234) }; // \u30b3\u30f3\u30d1\u30a4\u30eb\u30a8\u30e9\u30fc\n        enum{ ACCEPT_NO_OPERATOR=B(1+0) }; // \u30b3\u30f3\u30d1\u30a4\u30eb\u30a8\u30e9\u30fc\n        assert( MASK_A==0b1010 ); // clang \u3084 gcc \u3060\u3068 0b \u306b\u3064\u3065\u3051\u30662\u9032\u6570\u304c\u304b\u3051\u308b\u306e\u3067\u3001\u3053\u306e\u30de\u30af\u30ed\u306f\u4e0d\u8981\u3002\n}\n```\n\n\u602a\u3057\u3052\u306a\u6700\u5f8c\u306e\u4e8c\u884c\u304c\u3001`B(1234)` \u3084 `B(1+0)` \u3092\u30a8\u30e9\u30fc\u306b\u3059\u308b\u3002\n\n\n\u3057\u304b\u3057\u3002C\u8a00\u8a9e\u3067 `&sizeof&` \u3068\u66f8\u3044\u305f\u306e\u306f\u521d\u3081\u3066\u3060\u3068\u601d\u3046\u3002\n\n\u6295\u7a3f\u3057\u3066\u304b\u3089\u6c17\u3065\u3044\u305f\u3051\u3069\u3001BOOST_BINARY \u304c\u3042\u308b\u3089\u3057\u3044\u3002\nsee http://www.boost.org/doc/libs/1_53_0/libs/utility/utility.htm#BOOST_BINARY\n\u30bd\u30fc\u30b9\u3092\u898b\u308b\u3068\u9b54\u529b\u306e\u9ad8\u3055\u306b\u754f\u308c\u5165\u308b\u3002\n", "tags": ["C", "C99", "C\u8a00\u8a9e"]}