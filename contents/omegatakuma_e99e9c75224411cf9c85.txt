{"context": " More than 1 year has passed since last update.\nothello.scm\n#!/usr/local/bin/gosh\n\n(define turn 1)\n(define *board* (make-vector 64 'empty))\n(define (board-ref n)(vector-ref *board* n))\n(define (board-set! n m)(vector-set! *board* n m))\n\n(define (jadge? color n)\n  (map\n    (lambda(x)\n      (board-set! x color))\n    (append\n      (solve color n 1)\n      (solve color n 7)\n      (solve color n 8)\n      (solve color n 9))))\n\n(define (solve color n m)\n  (let* ((re+ (postv? (+ n m)))\n         (re- (postv? (- n m)))\n         (color2 (color-change color)))\n    (if (and re+ re-)\n      (cond \n        ((eq? (board-ref re+) color2)\n         (let loop ((lst (cons re+ '())))\n           (cond\n             ((or (negative? (+ (car lst) m)) (> (car lst) 64)) '())             \n             ((eq? (board-ref (+ (car lst) m)) color)\n              lst)\n             ((eq? (board-ref (+ (car lst) m)) 'empty)\n              '())\n             (else \n               (loop (cons (+ (car lst) m) lst))))))\n        ((eq? (board-ref re-) color2)\n         (let loop ((lst (cons re- '())))\n           (cond \n             ((or (negative? (- (car lst) m)) (> (car lst) 64)) '())             \n             ((eq? (board-ref (- (car lst) m)) color)\n              lst)\n             ((eq? (board-ref (- (car lst) m)) 'empty)\n              '())\n             (else \n               (loop (cons (- (car lst) m) lst))))))\n        (else \n          '()))\n      '())))\n\n(define (color-change color)\n  (if (eq? color 'black)\n    'white\n    'black))\n\n(define (postv? n)\n  (if (and (positive? n) (< n 64)) n #f))\n\n(define (position key lst)\n  (let loop ((lst lst)(n 0)(result '()))\n    (cond\n      ((null? lst) (reverse result))\n      ((eq? key (car lst))(loop (cdr lst) (+ n 1) (cons n result)))\n      (else (loop (cdr lst) (+ n 1) result)))))\n\n(define (count key lst)\n  (let loop ((lst lst)(n 0))\n    (cond\n      ((null? lst)n)\n      ((eq? (car lst) key)(loop (cdr lst) (+ n 1)))\n      (else (loop (cdr lst) n)))))\n\n(define (game-end)\n  (and (eq? turn 61)\n       (let ((black-count (count 'black (vector->list *board*)))\n             (white-count (count 'white (vector->list *board*))))\n         (cond \n           ((< black-count white-count)\n            (display \"\\nYou loss!!!!\\n\")(exit))\n           ((> black-count white-count)\n            (display \"\\nYou win!!!!\\n\")(exit))\n           (else (display \"\\nDraw!!!!\\n\")(exit))))))\n\n(define (print-board)\n  (let ((lst '((black . \"\u25cf\") (white . \"\u25ef\") (empty . \".\"))))\n    (display \" 1 2 3 4 5 6 7 8\\n\")\n    (display 1)\n    (let loop ((x 0)(n 2))\n      (format #t \"~A \" (cdr (assq (vector-ref *board* x) lst)))\n      (cond\n        ((= x 63)#t)\n        ((or (= x 7) (= x 15) (= x 23) (= x 31) (= x 39) (= x 47) (= x 55) (= x 63))\n         (begin\n           (newline)\n           (display n)\n           (loop (+ x 1)(+ n 1))))\n        (else (loop (+ x 1) n))))))\n\n(define (input)\n  (let loop ()\n    (display \"\\n> \")(flush)\n    (let ((pos (read)))\n      (cond\n        ((eq? pos 'pass)#t)\n        (else \n          (if (and (<= pos 63) (eq? (board-ref pos) 'empty))\n            (board-set! pos 'black)\n            (begin\n              (display \"Error\")\n              (loop)))\n          (jadge? 'black pos))))))\n\n(define (computer)\n  (let* ((lst (filter-map (lambda(x)(computer-do x)) '(1 7 8 9)))\n         (pos (car lst)))\n    (board-set! pos 'white)\n    (jadge? 'white pos)))\n\n(define (computer-do n)\n  (let ((white (position 'white (vector->list *board*))))\n    (let loop ((white white))\n      (cond\n        ((null? white)#f)\n        ((eq? (board-ref (+ (car white) n)) 'black)\n         (let loop2 ((x (+ (car white) n)))\n           (cond\n             ((eq? (board-ref (+ x n)) 'empty)\n              (+ x n))\n             ((eq? (board-ref (+ x n)) 'white)#f)\n             (else (loop2 (+ x n))))))\n        ((eq? (board-ref (- (car white) n)) 'black)\n         (let loop2 ((x (- (car white) n)))\n           (cond\n             ((eq? (board-ref (- x n)) 'empty)\n              (begin\n                (- x n)))\n             ((eq? (board-ref (- x n)) 'white)#f)            \n             (else\n               (loop2 (- x n))))))\n        (else (loop (cdr white)))))))\n\n(define (main args)\n  (map (lambda(x)(board-set! x 'white)) '(27 36))\n  (map (lambda(x)(board-set! x 'black)) '(28 35))\n  (print-board)\n  (let loop ()\n    (begin\n      (input)\n      (print-board)\n      (newline)\n      (newline)\n      (inc! turn)\n      (game-end)\n      (computer)\n      (print-board)\n      (newline)\n      (inc! turn)\n      (game-end)\n      (loop))))\n\n\n\n\u4f8b\n\n1 2 3 4 5 6 7 8\n1. . . . . . . . \n2. . . . . . . . \n3. . . . . . . . \n4. . . \u25ef \u25cf . . . \n5. . . \u25cf \u25ef . . . \n6. . . . . . . . \n7. . . . . . . . \n8. . . . . . . . \n\n26\n1 2 3 4 5 6 7 8\n1. . . . . . . . \n2. . . . . . . . \n3. . . . . . . . \n4. . \u25cf \u25cf \u25cf . . . \n5. . . \u25cf \u25ef . . . \n6. . . . . . . . \n7. . . . . . . . \n8. . . . . . . .\n1 2 3 4 5 6 7 8\n1. . . . . . . . \n2. . . . . . . . \n3. . . . . . . . \n4. . \u25cf \u25cf \u25cf . . . \n5. . \u25ef \u25ef \u25ef . . . \n6. . . . . . . . \n7. . . . . . . . \n8. . . . . . . .\n44\n1 2 3 4 5 6 7 8\n1. . . . . . . . \n2. . . . . . . . \n3. . . . . . . . \n4. . \u25cf \u25cf \u25cf . . . \n5. . \u25ef \u25cf \u25cf . . . \n6. . . . \u25cf . . . \n7. . . . . . . . \n8. . . . . . . .\n1 2 3 4 5 6 7 8\n1. . . . . . . . \n2. . . . . . . . \n3. . . . . . . . \n4. . \u25cf \u25cf \u25cf . . . \n5. . \u25ef \u25ef \u25ef \u25ef . . \n6. . . . \u25cf . . . \n7. . . . . . . . \n8. . . . . . . .\n43\n1 2 3 4 5 6 7 8\n1. . . . . . . . \n2. . . . . . . . \n3. . . . . . . . \n4. . \u25cf \u25cf \u25cf . . . \n5. . \u25ef \u25cf \u25ef \u25ef . . \n6. . . \u25cf \u25cf . . . \n7. . . . . . . . \n8. . . . . . . .\n1 2 3 4 5 6 7 8\n1. . . . . . . . \n2. . . . . . . . \n3. . . . \u25ef . . . \n4. . \u25cf \u25ef \u25ef . . . \n5. . \u25ef \u25cf \u25ef \u25ef . . \n6. . . \u25cf \u25cf . . . \n7. . . . . . . . \n8. . . . . . . .\n12\n1 2 3 4 5 6 7 8\n1. . . . . . . . \n2. . . . \u25cf . . . \n3. . . . \u25cf . . . \n4. . \u25cf \u25ef \u25cf . . . \n5. . \u25ef \u25cf \u25cf \u25ef . . \n6. . . \u25cf \u25cf . . . \n7. . . . . . . . \n8. . . . . . . .\n1 2 3 4 5 6 7 8\n1. . . . . . . . \n2. . . . \u25cf . . . \n3. . . . \u25cf . . . \n4. . \u25cf \u25ef \u25ef \u25ef . . \n5. . \u25ef \u25cf \u25cf \u25ef . . \n6. . . \u25cf \u25cf . . . \n7. . . . . . . . \n8. . . . . . . .\n30\n1 2 3 4 5 6 7 8\n1. . . . . . . . \n2. . . . \u25cf . . . \n3. . . . \u25cf . . . \n4. . \u25cf \u25cf \u25cf \u25cf \u25cf . \n5. . \u25ef \u25cf \u25cf \u25cf . . \n6. . . \u25cf \u25cf . . . \n7. . . . . . . . \n8. . . . . . . .\n1 2 3 4 5 6 7 8\n1. . . . . . . . \n2. . . . \u25cf . . . \n3. . . . \u25cf . . . \n4. . \u25cf \u25cf \u25cf \u25cf \u25cf . \n5. . \u25ef \u25ef \u25ef \u25ef \u25ef . \n6. . . \u25cf \u25cf . . . \n7. . . . . . . . \n8. . . . . . . .\n44\nError\n45\n1 2 3 4 5 6 7 8\n1. . . . . . . . \n2. . . . \u25cf . . . \n3. . . . \u25cf . . . \n4. . \u25cf \u25cf \u25cf \u25cf \u25cf . \n5. . \u25ef \u25cf \u25cf \u25cf \u25ef . \n6. . . \u25cf \u25cf \u25cf . . \n7. . . . . . . . \n8. . . . . . . .\n1 2 3 4 5 6 7 8\n1. . . . . . . . \n2. . . . \u25cf \u25ef . . \n3. . . . \u25ef . . . \n4. . \u25cf \u25ef \u25cf \u25cf \u25cf . \n5. . \u25ef \u25cf \u25cf \u25cf \u25ef . \n6. . . \u25cf \u25cf \u25cf . . \n7. . . . . . . . \n8. . . . . . . .\n\n\n\u3066\u3044\u3046\u611f\u3058\u3067\u3059\n```scheme:othello.scm\n#!/usr/local/bin/gosh\n\n(define turn 1)\n(define *board* (make-vector 64 'empty))\n(define (board-ref n)(vector-ref *board* n))\n(define (board-set! n m)(vector-set! *board* n m))\n\n(define (jadge? color n)\n  (map\n\t(lambda(x)\n\t  (board-set! x color))\n\t(append\n\t  (solve color n 1)\n\t  (solve color n 7)\n\t  (solve color n 8)\n\t  (solve color n 9))))\n\n(define (solve color n m)\n  (let* ((re+ (postv? (+ n m)))\n\t\t (re- (postv? (- n m)))\n\t\t (color2 (color-change color)))\n\t(if (and re+ re-)\n\t  (cond \n\t\t((eq? (board-ref re+) color2)\n\t\t (let loop ((lst (cons re+ '())))\n\t\t   (cond\n\t\t\t ((or (negative? (+ (car lst) m)) (> (car lst) 64)) '())\t\t\t \n\t\t\t ((eq? (board-ref (+ (car lst) m)) color)\n\t\t\t  lst)\n\t\t\t ((eq? (board-ref (+ (car lst) m)) 'empty)\n\t\t\t  '())\n\t\t\t (else \n\t\t\t   (loop (cons (+ (car lst) m) lst))))))\n\t\t((eq? (board-ref re-) color2)\n\t\t (let loop ((lst (cons re- '())))\n\t\t   (cond \n\t\t\t ((or (negative? (- (car lst) m)) (> (car lst) 64)) '())\t\t\t \n\t\t\t ((eq? (board-ref (- (car lst) m)) color)\n\t\t\t  lst)\n\t\t\t ((eq? (board-ref (- (car lst) m)) 'empty)\n\t\t\t  '())\n\t\t\t (else \n\t\t\t   (loop (cons (- (car lst) m) lst))))))\n\t\t(else \n\t\t  '()))\n\t  '())))\n\n(define (color-change color)\n  (if (eq? color 'black)\n\t'white\n\t'black))\n\n(define (postv? n)\n  (if (and (positive? n) (< n 64)) n #f))\n\n(define (position key lst)\n  (let loop ((lst lst)(n 0)(result '()))\n\t(cond\n\t  ((null? lst) (reverse result))\n\t  ((eq? key (car lst))(loop (cdr lst) (+ n 1) (cons n result)))\n\t  (else (loop (cdr lst) (+ n 1) result)))))\n\n(define (count key lst)\n  (let loop ((lst lst)(n 0))\n\t(cond\n\t  ((null? lst)n)\n\t  ((eq? (car lst) key)(loop (cdr lst) (+ n 1)))\n\t  (else (loop (cdr lst) n)))))\n\n(define (game-end)\n  (and (eq? turn 61)\n\t   (let ((black-count (count 'black (vector->list *board*)))\n\t\t\t (white-count (count 'white (vector->list *board*))))\n\t\t (cond \n\t\t   ((< black-count white-count)\n\t\t\t(display \"\\nYou loss!!!!\\n\")(exit))\n\t\t   ((> black-count white-count)\n\t\t\t(display \"\\nYou win!!!!\\n\")(exit))\n\t\t   (else (display \"\\nDraw!!!!\\n\")(exit))))))\n\n(define (print-board)\n  (let ((lst '((black . \"\u25cf\") (white . \"\u25ef\") (empty . \".\"))))\n\t(display \" 1 2 3 4 5 6 7 8\\n\")\n\t(display 1)\n\t(let loop ((x 0)(n 2))\n\t  (format #t \"~A \" (cdr (assq (vector-ref *board* x) lst)))\n\t  (cond\n\t\t((= x 63)#t)\n\t\t((or (= x 7) (= x 15) (= x 23) (= x 31) (= x 39) (= x 47) (= x 55) (= x 63))\n\t\t (begin\n\t\t   (newline)\n\t\t   (display n)\n\t\t   (loop (+ x 1)(+ n 1))))\n\t\t(else (loop (+ x 1) n))))))\n\n(define (input)\n  (let loop ()\n\t(display \"\\n> \")(flush)\n\t(let ((pos (read)))\n\t  (cond\n\t\t((eq? pos 'pass)#t)\n\t\t(else \n\t\t  (if (and (<= pos 63) (eq? (board-ref pos) 'empty))\n\t\t\t(board-set! pos 'black)\n\t\t\t(begin\n\t\t\t  (display \"Error\")\n\t\t\t  (loop)))\n\t\t  (jadge? 'black pos))))))\n\n(define (computer)\n  (let* ((lst (filter-map (lambda(x)(computer-do x)) '(1 7 8 9)))\n\t\t (pos (car lst)))\n\t(board-set! pos 'white)\n\t(jadge? 'white pos)))\n\n(define (computer-do n)\n  (let ((white (position 'white (vector->list *board*))))\n\t(let loop ((white white))\n\t  (cond\n\t\t((null? white)#f)\n\t\t((eq? (board-ref (+ (car white) n)) 'black)\n\t\t (let loop2 ((x (+ (car white) n)))\n\t\t   (cond\n\t\t\t ((eq? (board-ref (+ x n)) 'empty)\n\t\t\t  (+ x n))\n\t\t\t ((eq? (board-ref (+ x n)) 'white)#f)\n\t\t\t (else (loop2 (+ x n))))))\n\t\t((eq? (board-ref (- (car white) n)) 'black)\n\t\t (let loop2 ((x (- (car white) n)))\n\t\t   (cond\n\t\t\t ((eq? (board-ref (- x n)) 'empty)\n\t\t\t  (begin\n\t\t\t\t(- x n)))\n\t\t\t ((eq? (board-ref (- x n)) 'white)#f)\t\t\t \n\t\t\t (else\n\t\t\t   (loop2 (- x n))))))\n\t\t(else (loop (cdr white)))))))\n\n(define (main args)\n  (map (lambda(x)(board-set! x 'white)) '(27 36))\n  (map (lambda(x)(board-set! x 'black)) '(28 35))\n  (print-board)\n  (let loop ()\n\t(begin\n\t  (input)\n\t  (print-board)\n\t  (newline)\n\t  (newline)\n\t  (inc! turn)\n\t  (game-end)\n\t  (computer)\n\t  (print-board)\n\t  (newline)\n\t  (inc! turn)\n\t  (game-end)\n\t  (loop))))\n```\n\n# \u4f8b #\n\n>\n>1 2 3 4 5 6 7 8\n>1. . . . . . . . \n>2. . . . . . . . \n>3. . . . . . . . \n>4. . . \u25ef \u25cf . . . \n>5. . . \u25cf \u25ef . . . \n>6. . . . . . . . \n>7. . . . . . . . \n>8. . . . . . . . \n>> 26\n>1 2 3 4 5 6 7 8\n>1. . . . . . . . \n>2. . . . . . . . \n>3. . . . . . . . \n>4. . \u25cf \u25cf \u25cf . . . \n>5. . . \u25cf \u25ef . . . \n>6. . . . . . . . \n>7. . . . . . . . \n>8. . . . . . . .\n>1 2 3 4 5 6 7 8\n>1. . . . . . . . \n>2. . . . . . . . \n>3. . . . . . . . \n>4. . \u25cf \u25cf \u25cf . . . \n>5. . \u25ef \u25ef \u25ef . . . \n>6. . . . . . . . \n>7. . . . . . . . \n>8. . . . . . . .\n>> 44\n>1 2 3 4 5 6 7 8\n>1. . . . . . . . \n>2. . . . . . . . \n>3. . . . . . . . \n>4. . \u25cf \u25cf \u25cf . . . \n>5. . \u25ef \u25cf \u25cf . . . \n>6. . . . \u25cf . . . \n>7. . . . . . . . \n>8. . . . . . . .\n>1 2 3 4 5 6 7 8\n>1. . . . . . . . \n>2. . . . . . . . \n>3. . . . . . . . \n>4. . \u25cf \u25cf \u25cf . . . \n>5. . \u25ef \u25ef \u25ef \u25ef . . \n>6. . . . \u25cf . . . \n>7. . . . . . . . \n>8. . . . . . . .\n>> 43\n>1 2 3 4 5 6 7 8\n>1. . . . . . . . \n>2. . . . . . . . \n>3. . . . . . . . \n>4. . \u25cf \u25cf \u25cf . . . \n>5. . \u25ef \u25cf \u25ef \u25ef . . \n>6. . . \u25cf \u25cf . . . \n>7. . . . . . . . \n>8. . . . . . . .\n>1 2 3 4 5 6 7 8\n>1. . . . . . . . \n>2. . . . . . . . \n>3. . . . \u25ef . . . \n>4. . \u25cf \u25ef \u25ef . . . \n>5. . \u25ef \u25cf \u25ef \u25ef . . \n>6. . . \u25cf \u25cf . . . \n>7. . . . . . . . \n>8. . . . . . . .\n>> 12\n>1 2 3 4 5 6 7 8\n>1. . . . . . . . \n>2. . . . \u25cf . . . \n>3. . . . \u25cf . . . \n>4. . \u25cf \u25ef \u25cf . . . \n>5. . \u25ef \u25cf \u25cf \u25ef . . \n>6. . . \u25cf \u25cf . . . \n>7. . . . . . . . \n>8. . . . . . . .\n>1 2 3 4 5 6 7 8\n>1. . . . . . . . \n>2. . . . \u25cf . . . \n>3. . . . \u25cf . . . \n>4. . \u25cf \u25ef \u25ef \u25ef . . \n>5. . \u25ef \u25cf \u25cf \u25ef . . \n>6. . . \u25cf \u25cf . . . \n>7. . . . . . . . \n>8. . . . . . . .\n>> 30\n>1 2 3 4 5 6 7 8\n>1. . . . . . . . \n>2. . . . \u25cf . . . \n>3. . . . \u25cf . . . \n>4. . \u25cf \u25cf \u25cf \u25cf \u25cf . \n>5. . \u25ef \u25cf \u25cf \u25cf . . \n>6. . . \u25cf \u25cf . . . \n>7. . . . . . . . \n>8. . . . . . . .\n>1 2 3 4 5 6 7 8\n>1. . . . . . . . \n>2. . . . \u25cf . . . \n>3. . . . \u25cf . . . \n>4. . \u25cf \u25cf \u25cf \u25cf \u25cf . \n>5. . \u25ef \u25ef \u25ef \u25ef \u25ef . \n>6. . . \u25cf \u25cf . . . \n>7. . . . . . . . \n>8. . . . . . . .\n>> 44\n>Error\n>> 45\n>1 2 3 4 5 6 7 8\n>1. . . . . . . . \n>2. . . . \u25cf . . . \n>3. . . . \u25cf . . . \n>4. . \u25cf \u25cf \u25cf \u25cf \u25cf . \n>5. . \u25ef \u25cf \u25cf \u25cf \u25ef . \n>6. . . \u25cf \u25cf \u25cf . . \n>7. . . . . . . . \n>8. . . . . . . .\n>1 2 3 4 5 6 7 8\n>1. . . . . . . . \n>2. . . . \u25cf \u25ef . . \n>3. . . . \u25ef . . . \n>4. . \u25cf \u25ef \u25cf \u25cf \u25cf . \n>5. . \u25ef \u25cf \u25cf \u25cf \u25ef . \n>6. . . \u25cf \u25cf \u25cf . . \n>7. . . . . . . . \n>8. . . . . . . .\n\n\u3066\u3044\u3046\u611f\u3058\u3067\u3059\n", "tags": ["Scheme"]}