{"context": " More than 1 year has passed since last update.\n\n\u53c2\u8003\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\n\n\u524d\u56de\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\n\n\nASADA\u6c0f\u306e\u516c\u958b\u8a18\u4e8b\n\n\u3053\u306e\u8a18\u4e8b\u304b\u3089\u5f15\u7528\u3057\u305f\u3068\u304d\u306f\u300cChapterXX\u300d\u3068\u3059\u308b\u3002\u4f8b\u3048\u3070\u7b2c15\u56de\u306e\u8a18\u4e8b\u306a\u3089(Chapter15)\u3068\u306a\u308b\u3002\n\nIntel \u00ae Virtualization Technology for Directed I/O Architecture Specification\n\n\u3053\u306e\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u304b\u3089\u5f15\u7528\u3057\u305f\u3068\u304d\u306f(\u4ed5\u69d8\u66f8:XXX)\u3068\u3059\u308b\u3002\n\nmapping\u306e\u958b\u59cb\n\u6b21\u306b\u3001iommu_init()\u306b\u623b\u308a\u3001iommu_create_mapping()\u3092\u547c\u3073\u51fa\u3057\u3001\u5148\u306b\u5272\u308a\u5f53\u3066\u305f\u30c9\u30e1\u30a4\u30f3(\u306e\u30da\u30fc\u30b8\u30c6\u30fc\u30d6\u30eb)\u306b\u5bfe\u3057\u3066\u30de\u30c3\u30d4\u30f3\u30b0\u3092\u884c\u3046\u3002\n\u305d\u306e\u30c9\u30e1\u30a4\u30f3\u306f\u30db\u30b9\u30c8\u7528\u306e(\u7279\u6b8a\u306a)\u30c9\u30e1\u30a4\u30f3\u3067\u3042\u308b\u3053\u3068\u306b\u6ce8\u610f\u3059\u308b\u3002\n\u3053\u306e\u30c9\u30e1\u30a4\u30f3\u81ea\u4f53\u304c\u30db\u30b9\u30c8\u306e\u7269\u7406\u30a2\u30c9\u30ec\u30b9\u7a7a\u9593\u3092\u793a\u3059\u306e\u3067\u3001\u305d\u306e\u30de\u30c3\u30d4\u30f3\u30b0\u306f\u3001\u30db\u30b9\u30c8\u30c9\u30e1\u30a4\u30f3\u3092\u793a\u3059\u7269\u7406\u30a2\u30c9\u30ec\u30b9\u7a7a\u9593 == \u30db\u30b9\u30c8\u306e\u7269\u7406\u30a2\u30c9\u30ec\u30b9\u7a7a\u9593\u3068\u306a\u308b1:1\u306e\u30de\u30c3\u30d4\u30f3\u30b0\u3067\u3042\u308b\u3002\n    /*\n     * Create 1:1 mappings from '0' to 'maxaddr' for devices assigned to\n     * the host\n     */\n    iommu_create_mapping(host_domain, 0, 0, maxaddr);\n\n\nmaxaddr\u306b\u3064\u3044\u3066\n\u3068\u3053\u308d\u3067\u3001maxaddr\u3068\u306f\u306a\u3093\u3060\u308d\u3046\u304b\u3002\u3053\u308c\u306f\u3001\u5148\u306b\u66f8\u3044\u305fIOMMU_CREATE_DOMAIN()\u3092\u5272\u308a\u5f53\u3066\u308b\u76f4\u524d\u306b\u4ee5\u4e0b\u306e\u95a2\u6570\u3092\u547c\u3073\u51fa\u3059\u3053\u3068\u3067\u884c\u3063\u3066\u3044\u308b\u3002\n    maxaddr = vmm_mem_maxaddr();\n\nvmm_mem_maxaddr()\u306f\u4ee5\u4e0b\u306e\u95a2\u6570\u3067\u30b0\u30ed\u30fc\u30d0\u30eb\u5909\u6570Maxmem\u3092\u30da\u30fc\u30b8\u5358\u4f4d\u304b\u3089\u30a2\u30c9\u30ec\u30b9\u5358\u4f4d\u306b\u3057\u305f\u5024\u3092\u8fd4\u3057\u3066\u3044\u308b\u3002\nvm_paddr_t\nvmm_mem_maxaddr(void)\n{\n\n    return (ptoa(Maxmem));\n}\n\nMaxmem\u306f\u30cf\u30a4\u30d1\u30fc\u30d0\u30a4\u30b6\u3068\u306f\u95a2\u4fc2\u306a\u304f\u3001\u6a5f\u7a2e(amd64)\u4f9d\u5b58\u306e\u30ab\u30fc\u30cd\u30eb\u30d6\u30fc\u30c8\u30b3\u30fc\u30c9\u306b\u5b58\u5728\u3059\u308b\u5909\u6570\u3067\u3042\u308a\u3001\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u521d\u671f\u5316\u3055\u308c\u308b\u3002\nstatic void\ngetmemsize(caddr_t kmdp, u_int64_t first)\n{\n(\u7701\u7565)\n    /*\n     * Maxmem isn't the \"maximum memory\", it's one larger than the\n     * highest page of the physical address space.  It should be\n     * called something like \"Maxphyspage\".  We may adjust this\n     * based on ``hw.physmem'' and the results of the memory test.\n     */\n    Maxmem = atop(physmap[physmap_idx + 1]);\n\n\u4e0a\u8a18\u306e\u30b3\u30fc\u30c9\u304b\u3089\u3001\u521d\u671f\u5024\u3068\u3057\u3066\u3001\u30db\u30b9\u30c8\u306e\u7269\u7406\u30a2\u30c9\u30ec\u30b9\u7a7a\u9593\u306e\u6700\u4e0a\u4f4d\u306e\u30a2\u30c9\u30ec\u30b9\u306b\u5bfe\u5fdc\u3057\u305f\u30da\u30fc\u30b8\u756a\u53f7 + 1\u3057\u305f\u5024\u304c\u683c\u7d0d\u3055\u308c\u3066\u3044\u308b\u3053\u3068\u304c\u308f\u304b\u308b\u3002\n\n\u30da\u30fc\u30b8\u30c6\u30fc\u30d6\u30eb\u306e\u5168\u4f53\u56f3\nIOMMU\u3092\u4f7f\u3063\u3066\u3001\u30a2\u30c9\u30ec\u30b9\u5909\u63db\u3092\u3059\u308b\u305f\u3081\u306b\u3001\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u30da\u30fc\u30b8\u30c6\u30fc\u30d6\u30eb\u3092\u4f5c\u308b\u5fc5\u8981\u304c\u3042\u308b\u3002\n\n\u524d\u56de\u8aac\u660e\u3057\u3066\u3044\u306a\u304b\u3063\u305f\u304c\u3001\u524d\u56de\u66f8\u3044\u305fvtd_create_domain()\u5185\u306edomain\u69cb\u9020\u4f53\u5272\u308a\u5f53\u3066\u51e6\u7406\u3067\u5272\u308a\u5f53\u3066\u305f\u30da\u30fc\u30b8\u30c6\u30fc\u30d6\u30eb\u306f\u56f3\u4e2d\u306ePage Map(AGAW\u304c48bit\u306e\u5834\u5408)\u3082\u3057\u304f\u306fPage Directory Pointer(AGAW\u304c39bit)\u3067\u3042\u308b\u3002\n\u305d\u3057\u3066\u3001\u4ee5\u4e0b\u3067\u66f8\u304fiommu_create_mapping()\u3067\u306f\u3001\u5f15\u6570\u3067\u6307\u5b9a\u3055\u308c\u305f\u30a2\u30c9\u30ec\u30b9\u7bc4\u56f2\u3092\u30de\u30c3\u30d4\u30f3\u30b0\u3059\u308b\u306e\u306b\u5fc5\u8981\u306a\u7bc4\u56f2\u3067Page Table\u307e\u3067\u306e\u5272\u308a\u5f53\u3066\u3068\u8a2d\u5b9a\u3092\u884c\u3046\u3002\n\niommu_create_mapping()\n\u3053\u306e\u95a2\u6570\u3067\u306f\u3001gpa(\u30b2\u30b9\u30c8\u7269\u7406\u30a2\u30c9\u30ec\u30b9\u3002\u3053\u3053\u3067\u306f\u30db\u30b9\u30c8\u7528\u306e\u30c9\u30e1\u30a4\u30f3\u306e\u7269\u7406\u30a2\u30c9\u30ec\u30b9\u7a7a\u9593)\u3068hpa(\u30db\u30b9\u30c8\u7269\u7406\u30a2\u30c9\u30ec\u30b9)\u306e\u30de\u30c3\u30d4\u30f3\u30b0\u3092\u6307\u5b9a\u3055\u308c\u305f\u9577\u3055\u5206\u3060\u3051\u884c\u3046\u3002\n\u304a\u304a\u3088\u305d\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u3053\u3068\u3092\u5b9f\u65bd\u3059\u308b\u3002\n(1)\u3059\u3067\u306b\u5272\u308a\u5f53\u3066\u6e08\u307f\u306e\u6700\u4e0a\u4f4d\u306e\u30da\u30fc\u30b8\u30c6\u30fc\u30d6\u30eb(Page Map\u3082\u3057\u304f\u306fPage Directory Pointer)\u306b\u30de\u30c3\u30d4\u30f3\u30b0\u306b\u5fc5\u8981\u306a\u8a2d\u5b9a\u3092\u3059\u308b\u3002\n(2)\u305d\u308c\u4ee5\u4e0b\u306e\u30da\u30fc\u30b8\u30c6\u30fc\u30d6\u30eb(Page Directory Pointer,Page Directory,Page Table)\u3092\u5fc5\u8981\u306a\u7bc4\u56f2\u3067\u5272\u308a\u5f53\u3066\u3066\u305d\u308c\u305e\u308c\u306b\u30de\u30c3\u30d4\u30f3\u30b0\u306b\u5fc5\u8981\u306a\u8a2d\u5b9a\u3092\u3059\u308b\u3002\n\u30de\u30c3\u30d4\u30f3\u30b0\u3092\u884c\u3063\u3066\u3044\u308b\u306e\u306f\u5b9f\u969b\u306b\u306fIOMMU_CREATE_MAPPING(),\u3059\u306a\u308f\u3061vtd_create_mapping()\u3067\u3042\u308b\u3002\n\u306a\u304a\u3001\u5148\u306e\u56f3\u4e2d\u306eRoot-Table\u3068Context-Table\u306f\u3053\u3053\u3067\u306f\u4f55\u3082\u6271\u308f\u306a\u3044\u3002\nRoot-Table\u3068Context-Table\u306f\u7279\u5b9a\u306ePCI\u30c7\u30d0\u30a4\u30b9\u304c\u4f7f\u3046\u30b2\u30b9\u30c8\u7269\u7406\u30a2\u30c9\u30ec\u30b9\u3068\u30db\u30b9\u30c8\u7269\u7406\u30a2\u30c9\u30ec\u30b9\u306e\u5bfe\u5fdc\u3092\u77e5\u308b(=\u30da\u30fc\u30b8\u30c6\u30fc\u30d6\u30eb\u3092\u7279\u5b9a\u3059\u308b)\u305f\u3081\u306b\u5b58\u5728\u3059\u308b\u3082\u306e\u3060\u304b\u3089\u3067\u3042\u308b\u3002\nvoid\niommu_create_mapping(void *dom, vm_paddr_t gpa, vm_paddr_t hpa, size_t len)\n{\n    uint64_t mapped, remaining;\n\n    remaining = len;\n\n    while (remaining > 0) {\n        mapped = IOMMU_CREATE_MAPPING(dom, gpa, hpa, remaining);\n        gpa += mapped;\n        hpa += mapped;\n        remaining -= mapped;\n    }\n}\n\nvtd_create_mapping()\u306fvtd_update_mapping()\u3092\u547c\u3093\u3067\u3044\u308b\u3060\u3051\u306a\u306e\u3067vtd_update_mapping()\u3092\u898b\u308b\u3002\nstatic uint64_t\nvtd_update_mapping(void *arg, vm_paddr_t gpa, vm_paddr_t hpa, uint64_t len,\n           int remove)\n{\n(\u7701\u7565)\n\n\u307e\u305a\u306f\u3001\u30db\u30b9\u30c8\u7528\u306e\u7269\u7406\u30a2\u30c9\u30ec\u30b9\u7a7a\u9593\u30681:1\u5bfe\u5fdc\u306e\u5909\u63db\u3092\u884c\u3046\u305f\u3081\u306b\u5341\u5206\u306a\u30a2\u30c9\u30ec\u30b9\u5e45(\u30b7\u30d5\u30c8\u6570)\u3092\u6c42\u3081\u308b\u3002\n\u3053\u308c\u306f\u3001\u30da\u30fc\u30b8\u30c6\u30fc\u30d6\u30eb\u306e\u6df1\u3055\u3092\u6c7a\u3081\u308b\u305f\u3081\u306b\u5fc5\u8981\u3067\u3042\u308b\u3002\n    /*\n     * Compute the size of the mapping that we can accomodate.\n     *\n     * This is based on three factors:\n     * - supported super page size\n     * - alignment of the region starting at 'gpa' and 'hpa'\n     * - length of the region 'len'\n     */\n    spshift = 48;\n    for (i = 3; i >= 0; i--) {\n        spsize = 1UL << spshift;\n        if ((dom->spsmask & (1 << i)) != 0 &&\n            (gpa & (spsize - 1)) == 0 &&\n            (hpa & (spsize - 1)) == 0 &&\n            (len >= spsize)) {\n            break;\n        }\n        spshift -= 9;\n    }\n\n\u3053\u3053\u3067\u3001\u30db\u30b9\u30c8\u7269\u7406\u30a2\u30c9\u30ec\u30b9\u30681:1\u5bfe\u5fdc\u3057\u305f\u30de\u30c3\u30d4\u30f3\u30b0\u3092\u884c\u3046\u3002\u30de\u30c3\u30d4\u30f3\u30b0\u306f\u6700\u4e0a\u4f4d\u306e\u30da\u30fc\u30b8\u30c6\u30fc\u30d6\u30eb\u304b\u3089\u884c\u3044\u3001\u9806\u6b21\u4e0b\u4f4d\u306b\u5411\u304b\u3063\u3066\u30da\u30fc\u30b8\u30c6\u30fc\u30d6\u30eb\u3092\u5272\u308a\u5f53\u3066\u3066\u3044\u304f\u3088\u3046\u306a\u30a4\u30e1\u30fc\u30b8\u3067\u884c\u3046\u3002\n    ptp = dom->ptp;\n    nlevels = dom->pt_levels;\n    while (--nlevels >= 0) {\n\n\u305d\u306e\u305f\u3081\u306b\u3001\u73fe\u5728\u66f8\u304d\u8fbc\u307f\u5bfe\u8c61\u306b\u306a\u3063\u3066\u3044\u308b\u30da\u30fc\u30b8\u30c6\u30fc\u30d6\u30eb\u306e\u3069\u3053\u306b\u66f8\u304d\u8fbc\u3080\u304b\u3001gpa\u304b\u3089\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u3092\u751f\u6210\u3059\u308b\u3002\n        ptpshift = 12 + nlevels * 9;\n        ptpindex = (gpa >> ptpshift) & 0x1FF;\n\n\u3082\u3061\u308d\u3093\u3001\u672b\u7aef\u306e\u30da\u30fc\u30b8\u30c6\u30fc\u30d6\u30eb(Page Table)\u307e\u3067\u3059\u3079\u3066\u30de\u30c3\u30d4\u30f3\u30b0\u304c\u5b8c\u4e86\u3057\u305f\u3089\u3001\u305d\u3053\u3067\u7d42\u4e86\u3067\u3042\u308b\u3002\n        /* We have reached the leaf mapping */\n        if (spshift >= ptpshift) {\n            break;\n        }\n\n\u5148\u306e\u56f3\u306e\u672b\u7aef\u306e\u30da\u30fc\u30b8\u30c6\u30fc\u30d6\u30eb(Page Table)\u307e\u3067\u8fbf\u308a\u7740\u304b\u306a\u3044\u9650\u308a\u3001\u3072\u305f\u3059\u3089Page Table\u306b\u8fd1\u3044\u5074\u306b\u4e0b\u3063\u3066\u3044\u304f\u3002\n\u305d\u306e\u904e\u7a0b\u3067\u3001\u30da\u30fc\u30b8\u30c6\u30fc\u30d6\u30eb\u672a\u5272\u308a\u5f53\u3066\u306a\u7b87\u6240\u304c\u3042\u308c\u3070\u3001\u30da\u30fc\u30b8\u30c6\u30fc\u30d6\u30eb\u3092\u5272\u308a\u5f53\u3066\u305d\u306e\u7269\u7406\u30a2\u30c9\u30ec\u30b9\u3092\u8a18\u9332\u3059\u308b\u3002\n        /*\n         * We are working on a non-leaf page table page.\n         *\n         * Create a downstream page table page if necessary and point\n         * to it from the current page table.\n         */\n        if (ptp[ptpindex] == 0) {\n            void *nlp = malloc(PAGE_SIZE, M_VTD, M_WAITOK | M_ZERO);\n            ptp[ptpindex] = vtophys(nlp)| VTD_PTE_RD | VTD_PTE_WR;\n        }\n\n\u305d\u3057\u3066\u3001CPU\u304b\u3089\u8a72\u5f53\u30da\u30fc\u30b8\u30c6\u30fc\u30d6\u30eb\u306b\u30a2\u30af\u30bb\u30b9\u3067\u304d\u308b\u3088\u3046\u306b\u3001\u30da\u30fc\u30b8\u30c6\u30fc\u30d6\u30eb\u30a8\u30f3\u30c8\u30ea\u5185\u306e\u7269\u7406\u30a2\u30c9\u30ec\u30b9\u3092\u4eee\u60f3\u30a2\u30c9\u30ec\u30b9\u306b\u5909\u63db\u3059\u308b\u3002\n        ptp = (uint64_t *)PHYS_TO_DMAP(ptp[ptpindex] & VTD_PTE_ADDR_M);\n    }\n\n\u3053\u3053\u307e\u3067\u306e\u6587\u66f8\u3068\u30bd\u30fc\u30b9\u3092\u8aad\u3093\u3060\u4eba\u306f\u300c\u3042\u308c\u3001\u672b\u7aef\u306e\u30da\u30fc\u30b8\u30c6\u30fc\u30d6\u30eb(Page Table)\u306e\u30a8\u30f3\u30c8\u30ea\u3092\u307e\u3060\u8a2d\u5b9a\u3067\u304d\u3066\u3044\u306a\u3044\u306e\u3067\u306f\uff1f\u300d\u3068\u601d\u3046\u3060\u308d\u3046\u3002\n\u305d\u306e\u51e6\u7406\u304c\u4ee5\u4e0b\u306e\u51e6\u7406\u3067\u3042\u308b\u3002\n\u4eca\u56de\u306f\u767b\u9332\u3059\u308b\u51e6\u7406\u306a\u306e\u3067\u3001remove\u30d5\u30e9\u30b0\u306ffalse\u3067\u3042\u308b\u3002\n    /*\n     * Update the 'gpa' -> 'hpa' mapping\n     */\n    if (remove) {\n        ptp[ptpindex] = 0;\n    } else {\n        ptp[ptpindex] = hpa | VTD_PTE_RD | VTD_PTE_WR;\n\n        if (nlevels > 0)\n            ptp[ptpindex] |= VTD_PTE_SUPERPAGE;\n    }\n\n\u3053\u308c\u3067\u3001\u30db\u30b9\u30c8\u306e\u7269\u7406\u30a2\u30c9\u30ec\u30b9\u7a7a\u9593\u30681:1\u5bfe\u5fdc\u3057\u305f\u30c9\u30e1\u30a4\u30f3\u306e\u30de\u30c3\u30d7\u304c\u4f5c\u6210\u3055\u308c\u305f\u3053\u3068\u306b\u306a\u308b\u3002\n\u305d\u3057\u3066\u3001vtd_update_mapping()\u3092\u629c\u3051\u308b\u3002\n\u4eca\u56de\u306f\u3053\u3053\u307e\u3067\u3002\n\u6b21\u306f\u3001iommu_init()\u306e\u5f8c\u534a\u51e6\u7406\u306b\u3064\u3044\u3066\u66f8\u304f\u4e88\u5b9a\u3002\n\u5927\u307e\u304b\u306b\u8a00\u3046\u3068\u4ee5\u4e0b\u4e8c\u70b9\u3002\n(1)\u30c7\u30d0\u30a4\u30b9\u306e\u30b3\u30f3\u30c6\u30ad\u30b9\u30c8\u30c6\u30fc\u30d6\u30eb\u3068\u30da\u30fc\u30b8\u30c6\u30fc\u30d6\u30eb\u306e\u7d10\u4ed8\u3051(IOMMU_ADD_DEVICE)\n(2)IOMMU\u3092\u6709\u52b9\u306b\u3059\u308b(IOMMU_ENABLE)\n## \u53c2\u8003\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\n####[\u524d\u56de\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8](http://qiita.com/akachochin/items/e7d176d241d5c19bf991)\n####[ASADA\u6c0f\u306e\u516c\u958b\u8a18\u4e8b](http://syuu1228.github.io/howto_implement_hypervisor/)\n\u3053\u306e\u8a18\u4e8b\u304b\u3089\u5f15\u7528\u3057\u305f\u3068\u304d\u306f\u300cChapterXX\u300d\u3068\u3059\u308b\u3002\u4f8b\u3048\u3070\u7b2c15\u56de\u306e\u8a18\u4e8b\u306a\u3089(Chapter15)\u3068\u306a\u308b\u3002\n\n####[Intel \u00ae Virtualization Technology for Directed I/O Architecture Specification](http://www.intel.co.jp/content/www/jp/ja/intelligent-systems/intel-technology/vt-directed-io-spec.html) \n\u3053\u306e\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u304b\u3089\u5f15\u7528\u3057\u305f\u3068\u304d\u306f(\u4ed5\u69d8\u66f8:XXX)\u3068\u3059\u308b\u3002\n\n## mapping\u306e\u958b\u59cb\n\u6b21\u306b\u3001iommu_init()\u306b\u623b\u308a\u3001iommu_create_mapping()\u3092\u547c\u3073\u51fa\u3057\u3001\u5148\u306b\u5272\u308a\u5f53\u3066\u305f\u30c9\u30e1\u30a4\u30f3(\u306e\u30da\u30fc\u30b8\u30c6\u30fc\u30d6\u30eb)\u306b\u5bfe\u3057\u3066\u30de\u30c3\u30d4\u30f3\u30b0\u3092\u884c\u3046\u3002\n\u305d\u306e\u30c9\u30e1\u30a4\u30f3\u306f\u30db\u30b9\u30c8\u7528\u306e(\u7279\u6b8a\u306a)\u30c9\u30e1\u30a4\u30f3\u3067\u3042\u308b\u3053\u3068\u306b\u6ce8\u610f\u3059\u308b\u3002\n\u3053\u306e\u30c9\u30e1\u30a4\u30f3\u81ea\u4f53\u304c\u30db\u30b9\u30c8\u306e\u7269\u7406\u30a2\u30c9\u30ec\u30b9\u7a7a\u9593\u3092\u793a\u3059\u306e\u3067\u3001\u305d\u306e\u30de\u30c3\u30d4\u30f3\u30b0\u306f\u3001\u30db\u30b9\u30c8\u30c9\u30e1\u30a4\u30f3\u3092\u793a\u3059\u7269\u7406\u30a2\u30c9\u30ec\u30b9\u7a7a\u9593 == \u30db\u30b9\u30c8\u306e\u7269\u7406\u30a2\u30c9\u30ec\u30b9\u7a7a\u9593\u3068\u306a\u308b1:1\u306e\u30de\u30c3\u30d4\u30f3\u30b0\u3067\u3042\u308b\u3002\n\n```c\n\t/*\n\t * Create 1:1 mappings from '0' to 'maxaddr' for devices assigned to\n\t * the host\n\t */\n\tiommu_create_mapping(host_domain, 0, 0, maxaddr);\n```\n## maxaddr\u306b\u3064\u3044\u3066\n\u3068\u3053\u308d\u3067\u3001maxaddr\u3068\u306f\u306a\u3093\u3060\u308d\u3046\u304b\u3002\u3053\u308c\u306f\u3001\u5148\u306b\u66f8\u3044\u305fIOMMU_CREATE_DOMAIN()\u3092\u5272\u308a\u5f53\u3066\u308b\u76f4\u524d\u306b\u4ee5\u4e0b\u306e\u95a2\u6570\u3092\u547c\u3073\u51fa\u3059\u3053\u3068\u3067\u884c\u3063\u3066\u3044\u308b\u3002\n\n```c\n\tmaxaddr = vmm_mem_maxaddr();\n```\n\nvmm_mem_maxaddr()\u306f\u4ee5\u4e0b\u306e\u95a2\u6570\u3067\u30b0\u30ed\u30fc\u30d0\u30eb\u5909\u6570Maxmem\u3092\u30da\u30fc\u30b8\u5358\u4f4d\u304b\u3089\u30a2\u30c9\u30ec\u30b9\u5358\u4f4d\u306b\u3057\u305f\u5024\u3092\u8fd4\u3057\u3066\u3044\u308b\u3002\n\n```c\nvm_paddr_t\nvmm_mem_maxaddr(void)\n{\n\n\treturn (ptoa(Maxmem));\n}\n```\n\nMaxmem\u306f\u30cf\u30a4\u30d1\u30fc\u30d0\u30a4\u30b6\u3068\u306f\u95a2\u4fc2\u306a\u304f\u3001\u6a5f\u7a2e(amd64)\u4f9d\u5b58\u306e\u30ab\u30fc\u30cd\u30eb\u30d6\u30fc\u30c8\u30b3\u30fc\u30c9\u306b\u5b58\u5728\u3059\u308b\u5909\u6570\u3067\u3042\u308a\u3001\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u521d\u671f\u5316\u3055\u308c\u308b\u3002\n\n```c\nstatic void\ngetmemsize(caddr_t kmdp, u_int64_t first)\n{\n(\u7701\u7565)\n\t/*\n\t * Maxmem isn't the \"maximum memory\", it's one larger than the\n\t * highest page of the physical address space.  It should be\n\t * called something like \"Maxphyspage\".  We may adjust this\n\t * based on ``hw.physmem'' and the results of the memory test.\n\t */\n\tMaxmem = atop(physmap[physmap_idx + 1]);\n```\n\n\u4e0a\u8a18\u306e\u30b3\u30fc\u30c9\u304b\u3089\u3001\u521d\u671f\u5024\u3068\u3057\u3066\u3001\u30db\u30b9\u30c8\u306e\u7269\u7406\u30a2\u30c9\u30ec\u30b9\u7a7a\u9593\u306e\u6700\u4e0a\u4f4d\u306e\u30a2\u30c9\u30ec\u30b9\u306b\u5bfe\u5fdc\u3057\u305f\u30da\u30fc\u30b8\u756a\u53f7 + 1\u3057\u305f\u5024\u304c\u683c\u7d0d\u3055\u308c\u3066\u3044\u308b\u3053\u3068\u304c\u308f\u304b\u308b\u3002\n\n## \u30da\u30fc\u30b8\u30c6\u30fc\u30d6\u30eb\u306e\u5168\u4f53\u56f3\nIOMMU\u3092\u4f7f\u3063\u3066\u3001\u30a2\u30c9\u30ec\u30b9\u5909\u63db\u3092\u3059\u308b\u305f\u3081\u306b\u3001\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u30da\u30fc\u30b8\u30c6\u30fc\u30d6\u30eb\u3092\u4f5c\u308b\u5fc5\u8981\u304c\u3042\u308b\u3002\n\n![table-iommu.jpg](https://qiita-image-store.s3.amazonaws.com/0/19975/a3b01089-9cdd-2487-944d-e7d13e5c88f2.jpeg)\n\n\u524d\u56de\u8aac\u660e\u3057\u3066\u3044\u306a\u304b\u3063\u305f\u304c\u3001\u524d\u56de\u66f8\u3044\u305fvtd_create_domain()\u5185\u306edomain\u69cb\u9020\u4f53\u5272\u308a\u5f53\u3066\u51e6\u7406\u3067\u5272\u308a\u5f53\u3066\u305f\u30da\u30fc\u30b8\u30c6\u30fc\u30d6\u30eb\u306f\u56f3\u4e2d\u306ePage Map(AGAW\u304c48bit\u306e\u5834\u5408)\u3082\u3057\u304f\u306fPage Directory Pointer(AGAW\u304c39bit)\u3067\u3042\u308b\u3002\n\n\u305d\u3057\u3066\u3001\u4ee5\u4e0b\u3067\u66f8\u304fiommu_create_mapping()\u3067\u306f\u3001\u5f15\u6570\u3067\u6307\u5b9a\u3055\u308c\u305f\u30a2\u30c9\u30ec\u30b9\u7bc4\u56f2\u3092\u30de\u30c3\u30d4\u30f3\u30b0\u3059\u308b\u306e\u306b\u5fc5\u8981\u306a\u7bc4\u56f2\u3067Page Table\u307e\u3067\u306e\u5272\u308a\u5f53\u3066\u3068\u8a2d\u5b9a\u3092\u884c\u3046\u3002\n\n## iommu_create_mapping()\n\u3053\u306e\u95a2\u6570\u3067\u306f\u3001gpa(\u30b2\u30b9\u30c8\u7269\u7406\u30a2\u30c9\u30ec\u30b9\u3002\u3053\u3053\u3067\u306f\u30db\u30b9\u30c8\u7528\u306e\u30c9\u30e1\u30a4\u30f3\u306e\u7269\u7406\u30a2\u30c9\u30ec\u30b9\u7a7a\u9593)\u3068hpa(\u30db\u30b9\u30c8\u7269\u7406\u30a2\u30c9\u30ec\u30b9)\u306e\u30de\u30c3\u30d4\u30f3\u30b0\u3092\u6307\u5b9a\u3055\u308c\u305f\u9577\u3055\u5206\u3060\u3051\u884c\u3046\u3002\n\u304a\u304a\u3088\u305d\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u3053\u3068\u3092\u5b9f\u65bd\u3059\u308b\u3002\n(1)\u3059\u3067\u306b\u5272\u308a\u5f53\u3066\u6e08\u307f\u306e\u6700\u4e0a\u4f4d\u306e\u30da\u30fc\u30b8\u30c6\u30fc\u30d6\u30eb(Page Map\u3082\u3057\u304f\u306fPage Directory Pointer)\u306b\u30de\u30c3\u30d4\u30f3\u30b0\u306b\u5fc5\u8981\u306a\u8a2d\u5b9a\u3092\u3059\u308b\u3002\n(2)\u305d\u308c\u4ee5\u4e0b\u306e\u30da\u30fc\u30b8\u30c6\u30fc\u30d6\u30eb(Page Directory Pointer,Page Directory,Page Table)\u3092\u5fc5\u8981\u306a\u7bc4\u56f2\u3067\u5272\u308a\u5f53\u3066\u3066\u305d\u308c\u305e\u308c\u306b\u30de\u30c3\u30d4\u30f3\u30b0\u306b\u5fc5\u8981\u306a\u8a2d\u5b9a\u3092\u3059\u308b\u3002\n\n\u30de\u30c3\u30d4\u30f3\u30b0\u3092\u884c\u3063\u3066\u3044\u308b\u306e\u306f\u5b9f\u969b\u306b\u306fIOMMU_CREATE_MAPPING(),\u3059\u306a\u308f\u3061vtd_create_mapping()\u3067\u3042\u308b\u3002\n\n\u306a\u304a\u3001\u5148\u306e\u56f3\u4e2d\u306eRoot-Table\u3068Context-Table\u306f\u3053\u3053\u3067\u306f\u4f55\u3082\u6271\u308f\u306a\u3044\u3002\nRoot-Table\u3068Context-Table\u306f\u7279\u5b9a\u306ePCI\u30c7\u30d0\u30a4\u30b9\u304c\u4f7f\u3046\u30b2\u30b9\u30c8\u7269\u7406\u30a2\u30c9\u30ec\u30b9\u3068\u30db\u30b9\u30c8\u7269\u7406\u30a2\u30c9\u30ec\u30b9\u306e\u5bfe\u5fdc\u3092\u77e5\u308b(=\u30da\u30fc\u30b8\u30c6\u30fc\u30d6\u30eb\u3092\u7279\u5b9a\u3059\u308b)\u305f\u3081\u306b\u5b58\u5728\u3059\u308b\u3082\u306e\u3060\u304b\u3089\u3067\u3042\u308b\u3002\n\n```c\nvoid\niommu_create_mapping(void *dom, vm_paddr_t gpa, vm_paddr_t hpa, size_t len)\n{\n\tuint64_t mapped, remaining;\n\n\tremaining = len;\n\n\twhile (remaining > 0) {\n\t\tmapped = IOMMU_CREATE_MAPPING(dom, gpa, hpa, remaining);\n\t\tgpa += mapped;\n\t\thpa += mapped;\n\t\tremaining -= mapped;\n\t}\n}\n```\n\nvtd_create_mapping()\u306fvtd_update_mapping()\u3092\u547c\u3093\u3067\u3044\u308b\u3060\u3051\u306a\u306e\u3067vtd_update_mapping()\u3092\u898b\u308b\u3002\n\n```c\nstatic uint64_t\nvtd_update_mapping(void *arg, vm_paddr_t gpa, vm_paddr_t hpa, uint64_t len,\n\t\t   int remove)\n{\n(\u7701\u7565)\n```\n\n\u307e\u305a\u306f\u3001\u30db\u30b9\u30c8\u7528\u306e\u7269\u7406\u30a2\u30c9\u30ec\u30b9\u7a7a\u9593\u30681:1\u5bfe\u5fdc\u306e\u5909\u63db\u3092\u884c\u3046\u305f\u3081\u306b\u5341\u5206\u306a\u30a2\u30c9\u30ec\u30b9\u5e45(\u30b7\u30d5\u30c8\u6570)\u3092\u6c42\u3081\u308b\u3002\n\u3053\u308c\u306f\u3001\u30da\u30fc\u30b8\u30c6\u30fc\u30d6\u30eb\u306e\u6df1\u3055\u3092\u6c7a\u3081\u308b\u305f\u3081\u306b\u5fc5\u8981\u3067\u3042\u308b\u3002\n\n```c\n\t/*\n\t * Compute the size of the mapping that we can accomodate.\n\t *\n\t * This is based on three factors:\n\t * - supported super page size\n\t * - alignment of the region starting at 'gpa' and 'hpa'\n\t * - length of the region 'len'\n\t */\n\tspshift = 48;\n\tfor (i = 3; i >= 0; i--) {\n\t\tspsize = 1UL << spshift;\n\t\tif ((dom->spsmask & (1 << i)) != 0 &&\n\t\t    (gpa & (spsize - 1)) == 0 &&\n\t\t    (hpa & (spsize - 1)) == 0 &&\n\t\t    (len >= spsize)) {\n\t\t\tbreak;\n\t\t}\n\t\tspshift -= 9;\n\t}\n```\n\n\u3053\u3053\u3067\u3001\u30db\u30b9\u30c8\u7269\u7406\u30a2\u30c9\u30ec\u30b9\u30681:1\u5bfe\u5fdc\u3057\u305f\u30de\u30c3\u30d4\u30f3\u30b0\u3092\u884c\u3046\u3002\u30de\u30c3\u30d4\u30f3\u30b0\u306f\u6700\u4e0a\u4f4d\u306e\u30da\u30fc\u30b8\u30c6\u30fc\u30d6\u30eb\u304b\u3089\u884c\u3044\u3001\u9806\u6b21\u4e0b\u4f4d\u306b\u5411\u304b\u3063\u3066\u30da\u30fc\u30b8\u30c6\u30fc\u30d6\u30eb\u3092\u5272\u308a\u5f53\u3066\u3066\u3044\u304f\u3088\u3046\u306a\u30a4\u30e1\u30fc\u30b8\u3067\u884c\u3046\u3002\n\n```c\n\tptp = dom->ptp;\n\tnlevels = dom->pt_levels;\n\twhile (--nlevels >= 0) {\n```\n\n\u305d\u306e\u305f\u3081\u306b\u3001\u73fe\u5728\u66f8\u304d\u8fbc\u307f\u5bfe\u8c61\u306b\u306a\u3063\u3066\u3044\u308b\u30da\u30fc\u30b8\u30c6\u30fc\u30d6\u30eb\u306e\u3069\u3053\u306b\u66f8\u304d\u8fbc\u3080\u304b\u3001gpa\u304b\u3089\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u3092\u751f\u6210\u3059\u308b\u3002\n\n```c\n\t\tptpshift = 12 + nlevels * 9;\n\t\tptpindex = (gpa >> ptpshift) & 0x1FF;\n```\n\n\u3082\u3061\u308d\u3093\u3001\u672b\u7aef\u306e\u30da\u30fc\u30b8\u30c6\u30fc\u30d6\u30eb(Page Table)\u307e\u3067\u3059\u3079\u3066\u30de\u30c3\u30d4\u30f3\u30b0\u304c\u5b8c\u4e86\u3057\u305f\u3089\u3001\u305d\u3053\u3067\u7d42\u4e86\u3067\u3042\u308b\u3002\n\n```c\n\t\t/* We have reached the leaf mapping */\n\t\tif (spshift >= ptpshift) {\n\t\t\tbreak;\n\t\t}\n```\n\n\u5148\u306e\u56f3\u306e\u672b\u7aef\u306e\u30da\u30fc\u30b8\u30c6\u30fc\u30d6\u30eb(Page Table)\u307e\u3067\u8fbf\u308a\u7740\u304b\u306a\u3044\u9650\u308a\u3001\u3072\u305f\u3059\u3089Page Table\u306b\u8fd1\u3044\u5074\u306b\u4e0b\u3063\u3066\u3044\u304f\u3002\n\u305d\u306e\u904e\u7a0b\u3067\u3001\u30da\u30fc\u30b8\u30c6\u30fc\u30d6\u30eb\u672a\u5272\u308a\u5f53\u3066\u306a\u7b87\u6240\u304c\u3042\u308c\u3070\u3001\u30da\u30fc\u30b8\u30c6\u30fc\u30d6\u30eb\u3092\u5272\u308a\u5f53\u3066\u305d\u306e\u7269\u7406\u30a2\u30c9\u30ec\u30b9\u3092\u8a18\u9332\u3059\u308b\u3002\n\n```c\n\t\t/*\n\t\t * We are working on a non-leaf page table page.\n\t\t *\n\t\t * Create a downstream page table page if necessary and point\n\t\t * to it from the current page table.\n\t\t */\n\t\tif (ptp[ptpindex] == 0) {\n\t\t\tvoid *nlp = malloc(PAGE_SIZE, M_VTD, M_WAITOK | M_ZERO);\n\t\t\tptp[ptpindex] = vtophys(nlp)| VTD_PTE_RD | VTD_PTE_WR;\n\t\t}\n```\n\n\u305d\u3057\u3066\u3001CPU\u304b\u3089\u8a72\u5f53\u30da\u30fc\u30b8\u30c6\u30fc\u30d6\u30eb\u306b\u30a2\u30af\u30bb\u30b9\u3067\u304d\u308b\u3088\u3046\u306b\u3001\u30da\u30fc\u30b8\u30c6\u30fc\u30d6\u30eb\u30a8\u30f3\u30c8\u30ea\u5185\u306e\u7269\u7406\u30a2\u30c9\u30ec\u30b9\u3092\u4eee\u60f3\u30a2\u30c9\u30ec\u30b9\u306b\u5909\u63db\u3059\u308b\u3002\n\n```c\n\t\tptp = (uint64_t *)PHYS_TO_DMAP(ptp[ptpindex] & VTD_PTE_ADDR_M);\n\t}\n```\n\n\u3053\u3053\u307e\u3067\u306e\u6587\u66f8\u3068\u30bd\u30fc\u30b9\u3092\u8aad\u3093\u3060\u4eba\u306f\u300c\u3042\u308c\u3001\u672b\u7aef\u306e\u30da\u30fc\u30b8\u30c6\u30fc\u30d6\u30eb(Page Table)\u306e\u30a8\u30f3\u30c8\u30ea\u3092\u307e\u3060\u8a2d\u5b9a\u3067\u304d\u3066\u3044\u306a\u3044\u306e\u3067\u306f\uff1f\u300d\u3068\u601d\u3046\u3060\u308d\u3046\u3002\n\u305d\u306e\u51e6\u7406\u304c\u4ee5\u4e0b\u306e\u51e6\u7406\u3067\u3042\u308b\u3002\n\u4eca\u56de\u306f\u767b\u9332\u3059\u308b\u51e6\u7406\u306a\u306e\u3067\u3001remove\u30d5\u30e9\u30b0\u306ffalse\u3067\u3042\u308b\u3002\n\n```c\n\t/*\n\t * Update the 'gpa' -> 'hpa' mapping\n\t */\n\tif (remove) {\n\t\tptp[ptpindex] = 0;\n\t} else {\n\t\tptp[ptpindex] = hpa | VTD_PTE_RD | VTD_PTE_WR;\n\n\t\tif (nlevels > 0)\n\t\t\tptp[ptpindex] |= VTD_PTE_SUPERPAGE;\n\t}\n```\n\n\u3053\u308c\u3067\u3001\u30db\u30b9\u30c8\u306e\u7269\u7406\u30a2\u30c9\u30ec\u30b9\u7a7a\u9593\u30681:1\u5bfe\u5fdc\u3057\u305f\u30c9\u30e1\u30a4\u30f3\u306e\u30de\u30c3\u30d7\u304c\u4f5c\u6210\u3055\u308c\u305f\u3053\u3068\u306b\u306a\u308b\u3002\n\n\u305d\u3057\u3066\u3001vtd_update_mapping()\u3092\u629c\u3051\u308b\u3002\n\u4eca\u56de\u306f\u3053\u3053\u307e\u3067\u3002\n\u6b21\u306f\u3001iommu_init()\u306e\u5f8c\u534a\u51e6\u7406\u306b\u3064\u3044\u3066\u66f8\u304f\u4e88\u5b9a\u3002\n\u5927\u307e\u304b\u306b\u8a00\u3046\u3068\u4ee5\u4e0b\u4e8c\u70b9\u3002\n(1)\u30c7\u30d0\u30a4\u30b9\u306e\u30b3\u30f3\u30c6\u30ad\u30b9\u30c8\u30c6\u30fc\u30d6\u30eb\u3068\u30da\u30fc\u30b8\u30c6\u30fc\u30d6\u30eb\u306e\u7d10\u4ed8\u3051(IOMMU_ADD_DEVICE)\n(2)IOMMU\u3092\u6709\u52b9\u306b\u3059\u308b(IOMMU_ENABLE)\n", "tags": ["BSD", "Virtualization", "CPU", "hypervisor", "BHyVe"]}