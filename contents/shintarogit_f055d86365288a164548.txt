{"context": "\u30bb\u30ec\u30af\u30bf\u3067\u30e9\u30d9\u30eb\u540d\u304c\u5168\u304f\u540c\u3058\u306e\u30aa\u30d7\u30b7\u30e7\u30ca\u30eb\u306a\u30e1\u30bd\u30c3\u30c9\u3092\u547c\u307c\u3046\u3068\u3057\u305f\u3089Ambiguous reference to member 'method(_:)'\u3068\u3044\u3046\u30d3\u30eb\u30c9\u30a8\u30e9\u30fc\u304c\u767a\u751f\u3057\u3066\u30cf\u30de\u3063\u305f\u306e\u3067\u3001\u89e3\u6c7a\u7b56\u3092\u5171\u6709\u3057\u307e\u3059\u3002\n\nTL;DR\n// selector \u3067\u30011\u756a\u4e0a\u306edoit\u3092\u547c\u3073\u51fa\u3057\u305f\u3044\u3002\nprotocol HogeProtocol: NSObjectProtocol {\n    optional func doit(hoge: Hoge)\n    optional func doit(hoge: String)\n}\n// \u89e3\u6c7a\u7b56\n// 1. \u30ad\u30e3\u30b9\u30c8\u3057\u3066\u3001\u3000\u578b\u3092\u660e\u78ba\u306b\u5ba3\u8a00\u3057\u3066\u3084\u308b\u3053\u3068\u3002\n// 2. \u30aa\u30d7\u30b7\u30e7\u30ca\u30eb\u306f\u3001()?\u3067\u56f2\u3080\u3053\u3068\u3002\nlet selectorHoge = #selector(HogeProtocol.doit(hoge:) as ((HogeProtocol) -> (Hoge) -> Void)?)\n\n\nAmbiguous use of ...\nGithub \u306b\u3042\u3063\u305fCLLocationManager+Rx.swift\u3092\u5199\u7d4c\u3057\u3066\u3001WatchConnectivity(WCSession, WCSessionDelegate\u3042\u305f\u308a)\u306e\u30ea\u30a2\u30af\u30c6\u30a3\u30d6\u62e1\u5f35\u3092\u4f5c\u308d\u3046\u3068\u3057\u3066\u3044\u305f\u3089\u305d\u308c\u306f\u8d77\u3053\u308a\u307e\u3057\u305f\u3002\u3053\u3093\u306a\u611f\u3058\u3067\u3001WCSessionDelegate\u306e\u30a4\u30d9\u30f3\u30c8\u3092\u30cf\u30f3\u30c9\u30ea\u30f3\u30b0\u3057\u3066\u3001Observable\u306b\u5909\u63db\u3059\u308b\u969b\u306bSelector\u3092\u4f7f\u3044\u307e\u3059\u3002\nextension Reactive where Base: WCSession {\n\n    public var delegate: DelegateProxy {\n        return RxWCSessionDelegateProxy.proxyForObject(base)\n    }\n\n    // ... \u4e2d\u7565 ...\n\n    @available(iOS 9.0, *)\n    public var didFinishUserInfoTransfer: Observable<WCSessionUserInfoTransfer> {\n\n        let selector = #selector(WCSessionDelegate.session(_:didFinish:error:)) // \ud83d\ude35\n\n        return delegate.methodInvoked(selector).map{ a in\n\n            if let error = a[2] as? Error {\n                throw error\n            }\n\n            return try self.castOrThrow(WCSessionUserInfoTransfer.self, a[1])\n        }\n\n    }\n}\n\n\u3067\u3059\u304c\u3001\ud83d\ude35 \u306e\u7b87\u6240\u3067\u3001\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u3001\u300c\u66d6\u6627\u306a\u30e1\u30bd\u30c3\u30c9\u3092\u4f7f\u3063\u3066\u307e\u3059\u300d\u3068\u30a8\u30e9\u30fc\u306b\u306a\u3063\u3066\u3057\u307e\u3044\u307e\u3059\u3002\nAmbiguous use of 'session(_:didFinish:error:)'\n\nsession(_:didFinish:error:)\u306f\u30e9\u30d9\u30eb\u3060\u3051\u3067\u30e1\u30bd\u30c3\u30c9\u3092\u7279\u5b9a\u3057\u3088\u3046\u3068\u3057\u3066\u3044\u308b\u304b\u3089\u3001\u30e9\u30d9\u30eb\u540d\u3060\u3051\u304c\u540c\u3058\u3067\u7570\u306a\u308b\u578b\u306e\u30e1\u30bd\u30c3\u30c9\u304c\u3042\u3063\u305f\u308a\u3059\u308b\u3068\u3001\u30e1\u30bd\u30c3\u30c9\u304c\u7279\u5b9a\u3067\u304d\u305a\u306b\u30a8\u30e9\u30fc\u306b\u306a\u308b\u3001\u3068\u3044\u3046\u3053\u3068\u3067\u3057\u3087\u3046\u3002\u5b9f\u969b\u306bWCSessionDelegate\u306e\u5b9a\u7fa9\u3092\u898b\u3066\u307f\u307e\u3059\u3068 ...\npublic protocol WCSessionDelegate : NSObjectProtocol {\n\n    /** Called on the sending side after the user info transfer has successfully completed or failed with an error. Will be called on next launch if the sender was not running when the user info finished. */\n    @available(iOS 9.0, *)\n    optional public func session(_ session: WCSession, didFinish userInfoTransfer: WCSessionUserInfoTransfer, error: Error?)\n\n    // ... \u4e2d\u7565 ...\n\n    /** Called on the sending side after the file transfer has successfully completed or failed with an error. Will be called on next launch if the sender was not running when the transfer finished. */\n    @available(iOS 9.0, *)\n    optional public func session(_ session: WCSession, didFinish fileTransfer: WCSessionFileTransfer, error: Error?)\n\nWCSessionFileTransfer\u3068\u3001WCSessionUserInfoTransfer\u3060\u3051\u304c\u7570\u306a\u308b\u30e1\u30bd\u30c3\u30c9\u304c\u3042\u308a\u307e\u3059\u306d\u3002\u3068\u3044\u3046\u3053\u3068\u3067\u3001#selector\u306b\u5bfe\u3057\u3066\u3001\u578b\u3092\u6559\u3048\u3066\u3042\u3052\u306a\u304f\u3066\u306f\u3044\u3051\u307e\u305b\u3093\u3002\u3053\u3093\u306a\u611f\u3058\u3067\u3084\u308a\u307e\u3059\u3002\n\u53c2\u8003\uff1aStackOverFlow How do I resolve \u201cambiguous use of\u201d compile error with Swift #selector syntax?\n        // ... \u4e2d\u7565 ...\n        let selector = #selector(\n            WCSessionDelegate.session(_:didFinish:error:)\n            as\n            (WCSessionDelegate) -> (WCSession, WCSessionUserInfoTransfer, Error?) -> Void\n        )\n        // ... \u4e2d\u7565 ...\n\n\u305d\u3046\u3059\u308b\u3068\u3001\u5148\u307b\u3069\u306e\u30a8\u30e9\u30fc\u306f\u7121\u304f\u306a\u308a\u307e\u3057\u305f\u304c\u3001\u6b21\u306f\u3053\u3093\u306a\u30a8\u30e9\u30fc\u304c\u51fa\u307e\u3059\u3002\n\nAmbiguous reference to member ...\n\u300c\u66d6\u6627\u306a\u30e1\u30f3\u30d0\u30fc\u53c2\u7167\u3067\u3059\u300d\u30a8\u30e9\u30fc\u3067\u3059\u3002\u305d\u3093\u306a\u30e1\u30bd\u30c3\u30c9\u306f\u7528\u610f\u3055\u308c\u3066\u3044\u307e\u305b\u3093\u3063\u3066\u3044\u3046\u611f\u3058\u3067\u306f\u3042\u308a\u307e\u305b\u3093\u306d\u3002\nAmbiguous reference to member 'session(_:didFinish:error:)'\n\nTypo\u30df\u30b9\u304b\u3068\u76ee\u3092\u51dd\u3089\u3057\u307e\u3057\u305f\u304c\u3001\u9055\u3046\u3088\u3046\u3067\u3057\u305f\u3002\u3053\u3053\u306b\u3001\u56de\u7b54\u304c\u3042\u308a\u307e\u3057\u305f\u3002\nAmbiguous selector in Swift 3 for CoreBluetooth delegate methods\n\njrose Jordan Rose added a comment - 9 Nov 2016 10:31 AM\nOof. Turns out the method being optional is significant. This works for me:\n\nlet selector = #selector(CBPeripheralDelegate.peripheral(_:didUpdateValueFor:error:) as ((CBPeripheralDelegate) -> (CBPeripheral, CBCharacteristic, Error?) -> Void)?)\n\n\n\u30aa\u30d7\u30b7\u30e7\u30ca\u30eb\u306a\u306e\u3067\u3001\u30aa\u30d7\u30b7\u30e7\u30ca\u30eb\u306e\u5ba3\u8a00\u4ed8\u304d\u3067\u30ad\u30e3\u30b9\u30c8\u3057\u3066\u3084\u3089\u306a\u3044\u3068\u3044\u3051\u306a\u3044\u3088\u3046\u3067\u3059\u3002\n        // ... \u4e2d\u7565 ...\n        let selector = #selector(\n            WCSessionDelegate.session(_:didFinish:error:)\n            as\n          // (WCSessionDelegate) -> (WCSession, WCSessionUserInfoTransfer, Error?) -> Void\n            ((WCSessionDelegate) -> (WCSession, WCSessionUserInfoTransfer, Error?) -> Void)?\n        )\n        // ... \u4e2d\u7565 ...\n\n\u305d\u3046\u3059\u308b\u3068\u3001\u7121\u4e8b\u30a8\u30e9\u30fc\u304c\u6d88\u3048\u307e\u3057\u305f\u3002\n\u4ee5\u4e0a\u3067\u3059\u3002\n\u30bb\u30ec\u30af\u30bf\u3067**\u30e9\u30d9\u30eb\u540d\u304c\u5168\u304f\u540c\u3058**\u306e**\u30aa\u30d7\u30b7\u30e7\u30ca\u30eb\u306a\u30e1\u30bd\u30c3\u30c9**\u3092\u547c\u307c\u3046\u3068\u3057\u305f\u3089Ambiguous reference to member 'method(_:)'\u3068\u3044\u3046\u30d3\u30eb\u30c9\u30a8\u30e9\u30fc\u304c\u767a\u751f\u3057\u3066\u30cf\u30de\u3063\u305f\u306e\u3067\u3001\u89e3\u6c7a\u7b56\u3092\u5171\u6709\u3057\u307e\u3059\u3002\n# TL;DR\n```swift\n// selector \u3067\u30011\u756a\u4e0a\u306edoit\u3092\u547c\u3073\u51fa\u3057\u305f\u3044\u3002\nprotocol HogeProtocol: NSObjectProtocol {\n    optional func doit(hoge: Hoge)\n    optional func doit(hoge: String)\n}\n// \u89e3\u6c7a\u7b56\n// 1. \u30ad\u30e3\u30b9\u30c8\u3057\u3066\u3001\u3000\u578b\u3092\u660e\u78ba\u306b\u5ba3\u8a00\u3057\u3066\u3084\u308b\u3053\u3068\u3002\n// 2. \u30aa\u30d7\u30b7\u30e7\u30ca\u30eb\u306f\u3001()?\u3067\u56f2\u3080\u3053\u3068\u3002\nlet selectorHoge = #selector(HogeProtocol.doit(hoge:) as ((HogeProtocol) -> (Hoge) -> Void)?)\n```\n\n# Ambiguous use of ... \nGithub \u306b\u3042\u3063\u305f[CLLocationManager+Rx.swift](https://github.com/ReactiveX/RxSwift/blob/master/RxExample/Extensions/CLLocationManager%2BRx.swift)\u3092\u5199\u7d4c\u3057\u3066\u3001WatchConnectivity(WCSession, WCSessionDelegate\u3042\u305f\u308a)\u306e\u30ea\u30a2\u30af\u30c6\u30a3\u30d6\u62e1\u5f35\u3092\u4f5c\u308d\u3046\u3068\u3057\u3066\u3044\u305f\u3089\u305d\u308c\u306f\u8d77\u3053\u308a\u307e\u3057\u305f\u3002\u3053\u3093\u306a\u611f\u3058\u3067\u3001WCSessionDelegate\u306e\u30a4\u30d9\u30f3\u30c8\u3092\u30cf\u30f3\u30c9\u30ea\u30f3\u30b0\u3057\u3066\u3001Observable\u306b\u5909\u63db\u3059\u308b\u969b\u306bSelector\u3092\u4f7f\u3044\u307e\u3059\u3002\n\n```swift\nextension Reactive where Base: WCSession {\n    \n    public var delegate: DelegateProxy {\n        return RxWCSessionDelegateProxy.proxyForObject(base)\n    }\n    \n    // ... \u4e2d\u7565 ...\n    \n    @available(iOS 9.0, *)\n    public var didFinishUserInfoTransfer: Observable<WCSessionUserInfoTransfer> {\n\n        let selector = #selector(WCSessionDelegate.session(_:didFinish:error:)) // \ud83d\ude35\n        \n        return delegate.methodInvoked(selector).map{ a in\n            \n            if let error = a[2] as? Error {\n                throw error\n            }\n            \n            return try self.castOrThrow(WCSessionUserInfoTransfer.self, a[1])\n        }\n\n    }\n}\n```\n\n\u3067\u3059\u304c\u3001\ud83d\ude35 \u306e\u7b87\u6240\u3067\u3001\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u3001\u300c\u66d6\u6627\u306a\u30e1\u30bd\u30c3\u30c9\u3092\u4f7f\u3063\u3066\u307e\u3059\u300d\u3068\u30a8\u30e9\u30fc\u306b\u306a\u3063\u3066\u3057\u307e\u3044\u307e\u3059\u3002\n\n```text\nAmbiguous use of 'session(_:didFinish:error:)'\n```\n\nsession(_:didFinish:error:)\u306f\u30e9\u30d9\u30eb\u3060\u3051\u3067\u30e1\u30bd\u30c3\u30c9\u3092\u7279\u5b9a\u3057\u3088\u3046\u3068\u3057\u3066\u3044\u308b\u304b\u3089\u3001\u30e9\u30d9\u30eb\u540d\u3060\u3051\u304c\u540c\u3058\u3067\u7570\u306a\u308b\u578b\u306e\u30e1\u30bd\u30c3\u30c9\u304c\u3042\u3063\u305f\u308a\u3059\u308b\u3068\u3001\u30e1\u30bd\u30c3\u30c9\u304c\u7279\u5b9a\u3067\u304d\u305a\u306b\u30a8\u30e9\u30fc\u306b\u306a\u308b\u3001\u3068\u3044\u3046\u3053\u3068\u3067\u3057\u3087\u3046\u3002\u5b9f\u969b\u306bWCSessionDelegate\u306e\u5b9a\u7fa9\u3092\u898b\u3066\u307f\u307e\u3059\u3068 ...\n\n```swift\npublic protocol WCSessionDelegate : NSObjectProtocol {\n\n    /** Called on the sending side after the user info transfer has successfully completed or failed with an error. Will be called on next launch if the sender was not running when the user info finished. */\n    @available(iOS 9.0, *)\n    optional public func session(_ session: WCSession, didFinish userInfoTransfer: WCSessionUserInfoTransfer, error: Error?)\n    \n    // ... \u4e2d\u7565 ...\n\n    /** Called on the sending side after the file transfer has successfully completed or failed with an error. Will be called on next launch if the sender was not running when the transfer finished. */\n    @available(iOS 9.0, *)\n    optional public func session(_ session: WCSession, didFinish fileTransfer: WCSessionFileTransfer, error: Error?)\n```\n\nWCSessionFileTransfer\u3068\u3001WCSessionUserInfoTransfer\u3060\u3051\u304c\u7570\u306a\u308b\u30e1\u30bd\u30c3\u30c9\u304c\u3042\u308a\u307e\u3059\u306d\u3002\u3068\u3044\u3046\u3053\u3068\u3067\u3001#selector\u306b\u5bfe\u3057\u3066\u3001\u578b\u3092\u6559\u3048\u3066\u3042\u3052\u306a\u304f\u3066\u306f\u3044\u3051\u307e\u305b\u3093\u3002\u3053\u3093\u306a\u611f\u3058\u3067\u3084\u308a\u307e\u3059\u3002\n\u53c2\u8003\uff1a[StackOverFlow How do I resolve \u201cambiguous use of\u201d compile error with Swift #selector syntax?](http://stackoverflow.com/questions/35658334/how-do-i-resolve-ambiguous-use-of-compile-error-with-swift-selector-syntax)\n\n```swift\n        // ... \u4e2d\u7565 ...\n        let selector = #selector(\n            WCSessionDelegate.session(_:didFinish:error:)\n            as\n            (WCSessionDelegate) -> (WCSession, WCSessionUserInfoTransfer, Error?) -> Void\n        )\n        // ... \u4e2d\u7565 ...\n```\n\n\u305d\u3046\u3059\u308b\u3068\u3001\u5148\u307b\u3069\u306e\u30a8\u30e9\u30fc\u306f\u7121\u304f\u306a\u308a\u307e\u3057\u305f\u304c\u3001\u6b21\u306f\u3053\u3093\u306a\u30a8\u30e9\u30fc\u304c\u51fa\u307e\u3059\u3002\n# Ambiguous reference to member ... \n\u300c\u66d6\u6627\u306a\u30e1\u30f3\u30d0\u30fc\u53c2\u7167\u3067\u3059\u300d\u30a8\u30e9\u30fc\u3067\u3059\u3002\u305d\u3093\u306a\u30e1\u30bd\u30c3\u30c9\u306f\u7528\u610f\u3055\u308c\u3066\u3044\u307e\u305b\u3093\u3063\u3066\u3044\u3046\u611f\u3058\u3067\u306f\u3042\u308a\u307e\u305b\u3093\u306d\u3002\n\n```text\nAmbiguous reference to member 'session(_:didFinish:error:)'\n```\n\nTypo\u30df\u30b9\u304b\u3068\u76ee\u3092\u51dd\u3089\u3057\u307e\u3057\u305f\u304c\u3001\u9055\u3046\u3088\u3046\u3067\u3057\u305f\u3002\u3053\u3053\u306b\u3001\u56de\u7b54\u304c\u3042\u308a\u307e\u3057\u305f\u3002\n\u001c[Ambiguous selector in Swift 3 for CoreBluetooth delegate methods](https://bugs.swift.org/browse/SR-3062)\n\n>jrose Jordan Rose added a comment - 9 Nov 2016 10:31 AM\nOof. Turns out the method being optional is significant. This works for me:\n>>let selector = #selector(CBPeripheralDelegate.peripheral(_:didUpdateValueFor:error:) as ((CBPeripheralDelegate) -> (CBPeripheral, CBCharacteristic, Error?) -> Void)?)\n\n\u30aa\u30d7\u30b7\u30e7\u30ca\u30eb\u306a\u306e\u3067\u3001\u30aa\u30d7\u30b7\u30e7\u30ca\u30eb\u306e\u5ba3\u8a00\u4ed8\u304d\u3067\u30ad\u30e3\u30b9\u30c8\u3057\u3066\u3084\u3089\u306a\u3044\u3068\u3044\u3051\u306a\u3044\u3088\u3046\u3067\u3059\u3002\n\n```swift\n        // ... \u4e2d\u7565 ...\n        let selector = #selector(\n            WCSessionDelegate.session(_:didFinish:error:)\n            as\n          // (WCSessionDelegate) -> (WCSession, WCSessionUserInfoTransfer, Error?) -> Void\n            ((WCSessionDelegate) -> (WCSession, WCSessionUserInfoTransfer, Error?) -> Void)?\n        )\n        // ... \u4e2d\u7565 ...\n```\n\n\u305d\u3046\u3059\u308b\u3068\u3001\u7121\u4e8b\u30a8\u30e9\u30fc\u304c\u6d88\u3048\u307e\u3057\u305f\u3002\n\n\u4ee5\u4e0a\u3067\u3059\u3002\n", "tags": ["Swift3.0", "Swift", "RxSwift"]}