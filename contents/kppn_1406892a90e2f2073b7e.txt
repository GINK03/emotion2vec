{"context": "\n\n\u52d5\u6a5f\n\n\u578b\u5909\u63db\u3055\u308c\u308b\u30a2\u30c8\u30ea\u30d3\u30e5\u30fc\u30c8\u3067\u300e\u5165\u529b\u305d\u306e\u307e\u307e\u300f\u3092\u30d0\u30ea\u30c7\u30fc\u30b7\u30e7\u30f3\u3057\u305f\u3044\u3053\u3068\u304c\u3042\u308b\n\n\n\u578b\u5909\u63db\u3055\u308c\u308b\u30a2\u30c8\u30ea\u30d3\u30e5\u30fc\u30c8\u306e\u30d0\u30ea\u30c7\u30fc\u30b7\u30e7\u30f3\u306f\u57fa\u672c\u7684\u306b\u578b\u5909\u63db\u5f8c\u306e\u5024\u306b\u5bfe\u3057\u3066\u884c\u308f\u308c\u308b\u3002\n\u4f8b\u3048\u3070\u3001validates numericality\u306fonly integer\u3067\u3082+,-\u8a18\u53f7\u306f\u901a\u3059\u304c\u3001\u7d14\u7c8b\u306b\u6570\u5b57\u5217\u3092\u8a31\u5bb9\u3059\u308b\u969b\u306fformat\u3067\u3084\u308a\u305f\u3044\n\n\n#{attr}_before_type_cast\u3092\u4f7f\u3046\u624b\u304c\u3042\u308b\u3002\u3057\u304b\u3057\u3001\n#{attr}_before_type_cast\u306b\u5bfe\u3057\u3066\u76f4\u63a5\u30d0\u30ea\u30c7\u30fc\u30b7\u30e7\u30f3\u3059\u308b\u3068\u3001errors\u3082\u305d\u306e\u540d\u524d\u306b\u306a\u3063\u3066\u3057\u307e\u3046\u3002\n\n\n\u30d0\u30ea\u30c7\u30fc\u30b7\u30e7\u30f3\u306e\u5bfe\u8c61\u306f#{attr}_before_type_cast\u3060\u304c\u3001\u30e1\u30c3\u30bb\u30fc\u30b8\u305d\u306e\u4ed6\u306fattr\u3092\u5bfe\u8c61\u3068\u3057\u3066\u3044\u308b\u3088\u3046\u306b\u898b\u305b\u305f\u3044\u3002\n\n\n#{attr}_before_type_cast\u306e\u30d0\u30ea\u30c7\u30fc\u30b7\u30e7\u30f3\u306b\u6c4e\u7528\u6027\u3092\u6301\u305f\u305b\u305f\u3044\n\n\n\u65b9\u6cd5\n_before_type_cast\u3092\u30e9\u30c3\u30d7\u3059\u308bValidator\u3092\u4f5c\u308b\u3002\n\u4f7f\u3044\u65b9\u306f\u30b3\u30e1\u30f3\u30c8\u306e\u901a\u308a\u3002\n\nbefore_type_cast_validator.rb\nclass BeforeTypeCastValidator < ActiveModel::EachValidator\n  # usage\n  #\n  #  validates :age, before_type_cast: {\n  #    delegate_to: :format, if_value_class: String, options: {\n  #      with: /\\A[0-9]+\\z/,\n  #      message: \"\u6570\u5b57\u306e\u307f\"\n  #    },\n  #  }\n  #\n  # if_value_class\u30aa\u30d7\u30b7\u30e7\u30f3\u3092\u6307\u5b9a\u3057\u305f\u5834\u5408\u3001\u5b9f\u969b\u306eValidator\u306eif\u6761\u4ef6\u306b\u6307\u5b9a\u3055\u308c\u308b\n  # \u6307\u5b9a\u3055\u308c\u306a\u3051\u308c\u3070BasicObject\u306a\u306e\u3067\u4f55\u3067\u3082\u5f15\u3063\u639b\u304b\u308b(\u6307\u5b9a\u305b\u305a\u3068\u540c\u3058)\n\n  def initialize(options)\n    if options[:delegate_to].blank?\n      raise ArgumentError 'BeforeTypeCastValidator needs :delegate_to option'\n    end\n\n    validator_name = options[:delegate_to].to_sym\n    if_klass = options[:if_value_class] || BasicObject\n\n    options[:attributes].each do |attr|\n      uncast_attr_name = \"#{attr.to_s}_before_type_cast\".to_sym\n\n      delegate_options = options[:options].dup\n      delegate_options[:if] = ->(record) {\n        record.respond_to?(uncast_attr_name) &&\n          record.send(uncast_attr_name).present? &&\n          record.send(uncast_attr_name).kind_of?(if_klass)\n      }\n\n      options[:class].class_eval do\n        validates uncast_attr_name, { validator_name => delegate_options }\n      end\n    end\n\n    super(options)\n  end\n\n  def validate_each(record, attribute, value)\n    # error messages from 'xxx_before_type_cast' to 'xxx'\n\n    uncast_attr_name = \"#{attribute}_before_type_cast\".to_sym\n\n    return unless record.errors.has_key?(uncast_attr_name)\n\n    errors = record.errors.delete uncast_attr_name\n    errors.each do |error|\n      record.errors.add attribute, error\n    end\n  end\nend\n\n\n# \u52d5\u6a5f\n\n- \u578b\u5909\u63db\u3055\u308c\u308b\u30a2\u30c8\u30ea\u30d3\u30e5\u30fc\u30c8\u3067\u300e\u5165\u529b\u305d\u306e\u307e\u307e\u300f\u3092\u30d0\u30ea\u30c7\u30fc\u30b7\u30e7\u30f3\u3057\u305f\u3044\u3053\u3068\u304c\u3042\u308b\n    - \u578b\u5909\u63db\u3055\u308c\u308b\u30a2\u30c8\u30ea\u30d3\u30e5\u30fc\u30c8\u306e\u30d0\u30ea\u30c7\u30fc\u30b7\u30e7\u30f3\u306f\u57fa\u672c\u7684\u306b\u578b\u5909\u63db\u5f8c\u306e\u5024\u306b\u5bfe\u3057\u3066\u884c\u308f\u308c\u308b\u3002\n    - \u4f8b\u3048\u3070\u3001validates numericality\u306fonly integer\u3067\u3082+,-\u8a18\u53f7\u306f\u901a\u3059\u304c\u3001\u7d14\u7c8b\u306b\u6570\u5b57\u5217\u3092\u8a31\u5bb9\u3059\u308b\u969b\u306fformat\u3067\u3084\u308a\u305f\u3044\n- #{attr}_before_type_cast\u3092\u4f7f\u3046\u624b\u304c\u3042\u308b\u3002\u3057\u304b\u3057\u3001\n- #{attr}_before_type_cast\u306b\u5bfe\u3057\u3066\u76f4\u63a5\u30d0\u30ea\u30c7\u30fc\u30b7\u30e7\u30f3\u3059\u308b\u3068\u3001errors\u3082\u305d\u306e\u540d\u524d\u306b\u306a\u3063\u3066\u3057\u307e\u3046\u3002\n    - \u30d0\u30ea\u30c7\u30fc\u30b7\u30e7\u30f3\u306e\u5bfe\u8c61\u306f#{attr}_before_type_cast\u3060\u304c\u3001\u30e1\u30c3\u30bb\u30fc\u30b8\u305d\u306e\u4ed6\u306fattr\u3092\u5bfe\u8c61\u3068\u3057\u3066\u3044\u308b\u3088\u3046\u306b\u898b\u305b\u305f\u3044\u3002\n- #{attr}_before_type_cast\u306e\u30d0\u30ea\u30c7\u30fc\u30b7\u30e7\u30f3\u306b\u6c4e\u7528\u6027\u3092\u6301\u305f\u305b\u305f\u3044\n\n# \u65b9\u6cd5\n\n_before_type_cast\u3092\u30e9\u30c3\u30d7\u3059\u308bValidator\u3092\u4f5c\u308b\u3002\n\u4f7f\u3044\u65b9\u306f\u30b3\u30e1\u30f3\u30c8\u306e\u901a\u308a\u3002\n\n```before_type_cast_validator.rb\nclass BeforeTypeCastValidator < ActiveModel::EachValidator\n  # usage\n  #\n  #  validates :age, before_type_cast: {\n  #    delegate_to: :format, if_value_class: String, options: {\n  #      with: /\\A[0-9]+\\z/,\n  #      message: \"\u6570\u5b57\u306e\u307f\"\n  #    },\n  #  }\n  #\n  # if_value_class\u30aa\u30d7\u30b7\u30e7\u30f3\u3092\u6307\u5b9a\u3057\u305f\u5834\u5408\u3001\u5b9f\u969b\u306eValidator\u306eif\u6761\u4ef6\u306b\u6307\u5b9a\u3055\u308c\u308b\n  # \u6307\u5b9a\u3055\u308c\u306a\u3051\u308c\u3070BasicObject\u306a\u306e\u3067\u4f55\u3067\u3082\u5f15\u3063\u639b\u304b\u308b(\u6307\u5b9a\u305b\u305a\u3068\u540c\u3058)\n\n  def initialize(options)\n    if options[:delegate_to].blank?\n      raise ArgumentError 'BeforeTypeCastValidator needs :delegate_to option'\n    end\n\n    validator_name = options[:delegate_to].to_sym\n    if_klass = options[:if_value_class] || BasicObject\n\n    options[:attributes].each do |attr|\n      uncast_attr_name = \"#{attr.to_s}_before_type_cast\".to_sym\n\n      delegate_options = options[:options].dup\n      delegate_options[:if] = ->(record) {\n        record.respond_to?(uncast_attr_name) &&\n          record.send(uncast_attr_name).present? &&\n          record.send(uncast_attr_name).kind_of?(if_klass)\n      }\n\n      options[:class].class_eval do\n        validates uncast_attr_name, { validator_name => delegate_options }\n      end\n    end\n\n    super(options)\n  end\n\n  def validate_each(record, attribute, value)\n    # error messages from 'xxx_before_type_cast' to 'xxx'\n    \n    uncast_attr_name = \"#{attribute}_before_type_cast\".to_sym\n    \n    return unless record.errors.has_key?(uncast_attr_name)\n\n    errors = record.errors.delete uncast_attr_name\n    errors.each do |error|\n      record.errors.add attribute, error\n    end\n  end\nend\n```\n", "tags": ["Rails4.2"]}