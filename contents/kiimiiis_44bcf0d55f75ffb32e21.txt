{"context": " More than 1 year has passed since last update.\n\nPHP\u30672\u5206\u6728\u306e\u8ffd\u52a0\u3001\u691c\u7d22\u3001\u524a\u9664\n\n\u30c6\u30b9\u30c8\u306b\u4f7f\u7528\u3057\u305f\u6728\u69cb\u9020\u3068\u524a\u9664\u30eb\u30fc\u30eb\n\n\n\u30b3\u30fc\u30c9\n\nTreeNode.php\n/* \n\u6728\u69cb\u9020\u3067\u4f7f\u7528\u3059\u308b\u30ce\u30fc\u30c9\n */\n\nclass TreeNode {\n    public $value;\n    public $leftNode;\n    public $rightNode;\n}\n\n\n\nBinaryTree.php\n/*\n\u30d0\u30a4\u30ca\u30ea\u30fc\u30c4\u30ea\u30fc\n */\n\nrequire_once 'TreeNode.php';\n\nclass BinaryTree {\n    public static function createNewNode($value) {\n        $node            = new TreeNode();\n        $node->value     = $value;\n        $node->leftNode  = null;\n        $node->rightNode = null;\n        return $node;\n    }\n\n    public static function insertNode($value, $node) {\n        if ($node->value == $value) {\n            return false;\n        }\n\n        if ($node->value > $value) {\n            //\u30ce\u30fc\u30c9\u306e\u5024\u3088\u308a\u5c0f\u3055\u3044\u6642\u3002\u5de6\u306e\u5b50\u306e\u30ce\u30fc\u30c9\u306b\n            if ($node->leftNode != null) {\n                //\u65e2\u306b\u5de6\u306e\u30ce\u30fc\u30c9\u306b\u30c7\u30fc\u30bf\u304c\u3042\u308b\u6642\u3001\u6b21\u306e\u30ce\u30fc\u30c9\u306b\u9032\u3080\n                self::insertNode($value, $node->leftNode);\n            } else {\n                //\u5de6\u306e\u30ce\u30fc\u30c9\u306b\u30c7\u30fc\u30bf\u3092\u633f\u5165\n                $node->leftNode = self::createNewNode($value);\n                return true;\n            }\n        } else {\n            //\u30ce\u30fc\u30c9\u306e\u5024\u3088\u308a\u5927\u304d\u3044\u6642\u3002\u53f3\u306e\u5b50\u306e\u30ce\u30fc\u30c9\u306b\n            if ($node->rightNode != null) {\n                //\u65e2\u306b\u53f3\u306e\u30ce\u30fc\u30c9\u306b\u30c7\u30fc\u30bf\u304c\u3042\u308b\u6642\u3001\u6b21\u306e\u30ce\u30fc\u30c9\u306b\u9032\u3080\n                self::insertNode($value, $node->rightNode);\n            } else {\n                //\u53f3\u306e\u30ce\u30fc\u30c9\u306b\u30c7\u30fc\u30bf\u3092\u633f\u5165\n                $node->rightNode = self::createNewNode($value);\n                return true;\n            }\n        }\n    }\n\n    public static function find($value, $node) {\n        if ($node->value == $value) {\n            //\u5024\u304c\u898b\u3064\u304b\u3063\u305f\u6642\n            return true;\n        }\n\n        if ($node->value > $value) {\n            if (empty($node->leftNode)) {\n                return false;\n            }\n            //\u63a2\u3057\u3066\u3044\u308b\u5024\u304c\u5bfe\u8c61\u306e\u30ce\u30fc\u30c9\u3088\u308a\u5c0f\u3055\u3044\u6642\u306f\u5de6\u306e\u30ce\u30fc\u30c9\u3078\n            return self::find($value, $node->leftNode);\n        } else {\n            if (empty($node->rightNode)) {\n                return false;\n            }\n            //\u53f3\u306e\u30ce\u30fc\u30c9\u3078\n            return self::find($value, $node->rightNode);\n        }\n    }\n\n    public static function delete($value, &$tree) {\n        $rootNode  = &$tree; //\u30eb\u30fc\u30c8\u30ce\u30fc\u30c9\u306e\u30a2\u30c9\u30ec\u30b9\n        $node      = &$tree; //1\u500b\u305a\u3064\u8abf\u3079\u3001\u6700\u5f8c\u306f\u524a\u9664\u5bfe\u8c61\u306e\u30ce\u30fc\u30c9\n        $parent    = null;   //$node\u306e\u89aa\u306e\u30ce\u30fc\u30c9\u306e\u30a2\u30c9\u30ec\u30b9\n        $direction = 0; //\u6839\u306e\u5834\u5408\u306f0\u3002\u5de6\u306e\u5b50\u306b\u9032\u3080\u6642\u306f-1\u3092\u53f3\u306e\u6642\u306f1\n\n        //\u524a\u9664\u5bfe\u8c61\u306e\u30ce\u30fc\u30c9\u3092\u63a2\u7d22\n        while ($node !== null && $node->value != $value) {\n            if ($node->value > $value) {\n                $parent    = &$node;\n                $node      = &$node->leftNode;\n                $direction = -1;\n            } else {\n                $parent    = &$node;\n                $node      = &$node->rightNode;\n                $direction = 1;\n            }\n        }\n        //\u524a\u9664\u5bfe\u8c61\u304c\u6728\u306b\u7121\u304b\u3063\u305f\u6642\n        if ($node == null) {\n            return false;\n        }\n\n        //\u524a\u9664\u5bfe\u8c61\u306e\u30ce\u30fc\u30c9\u304c\u3042\u308b\u6642\n        if ($node->leftNode == null && $node->rightNode == null) {\n            //\u53f3\u3068\u5de6\u306e\u30ce\u30fc\u30c9\u304c\u7121\u3044\u6642\u3002\u3064\u307e\u308a\u3001\u30ea\u30fc\u30d5\u3092\u524a\u9664\n            if ($direction == -1) {\n                $parent->leftNode = null;\n            } else {\n                $parent->rightNode = null;\n            }\n        } else if ($node->leftNode == null && $node->rightNode != null) {\n            //\u5de6\u306e\u30ce\u30fc\u30c9\u304c\u7121\u304f\u304b\u3064\u53f3\u306e\u30ce\u30fc\u30c9\u304c\u3042\u308b\u6642\n            if ($direction == -1) {\n                $parent->leftNode = $node->rightNode;\n            } else if ($direction == 1) {\n                $parent->rightNode = $node->rightNode;\n            } else if ($direction == 0) {\n                //\u6728\u69cb\u9020\u3067\u53f3\u306e\u30ce\u30fc\u30c9\u3057\u304b\u306a\u304f\u30eb\u30fc\u30c8\u3092\u524a\u9664\u3059\u308b\u6642\n                $rootNode = $node->rightNode;\n            }\n        } else if ($node->leftNode != null && $node->rightNode == null) {\n            //\u5de6\u306e\u30ce\u30fc\u30c9\u304c\u3042\u3063\u3066\u304b\u3064\u53f3\u306e\u30ce\u30fc\u30c9\u304c\u7121\u3044\u6642\n            if ($direction == -1) {\n                $parent->leftNode = $node->leftNode;\n            } else if ($direction == 1) {\n                $parent->rightNode = $node->leftNode;\n            } else if ($direction == 0) {\n                //\u6728\u69cb\u9020\u3067\u5de6\u306e\u30ce\u30fc\u30c9\u3057\u304b\u306a\u304f\u30eb\u30fc\u30c8\u3092\u524a\u9664\u3059\u308b\u6642\n                $rootNode = $node->leftNode;\n            }\n        } else {\n            //\u53f3\u3068\u5de6\u306e\u5b50\u304c\u3042\u308b\u5834\u5408\u3002\n            //\u5de6\u306e\u30ce\u30fc\u30c9\u306e\u6700\u5927\u5024\u3068\u524a\u9664\u3057\u305f\u3044\u30ce\u30fc\u30c9\u3068\u4ea4\u63db\u3059\u308b\n            $leftBiggest = &$node->leftNode;\n            $parent = &$node;\n            $direction = -1;\n            //\u53f3\u306e\u30ce\u30fc\u30c9\u304c\u3042\u308b\u9650\u308a\u4e0a\u66f8\u304d\u3057\u3066\u3044\u304f\u3002\n            while ($leftBiggest->rightNode != null) {\n                $parent = &$leftBiggest;\n                $leftBiggest = &$leftBiggest->rightNode;\n                $direction = 1;\n            }\n\n            $node->value = $leftBiggest->value;\n            if ($direction == -1) {\n                $parent->leftNode = &$leftBiggest->leftNode;\n            } else {\n                $parent->rightNode = &$leftBiggest->leftNode;\n            }\n        }\n        return true;\n    }\n}\n\n\n\n\u30c6\u30b9\u30c8\u30b3\u30fc\u30c9\n\nbinaryTreeTest.php\n/*\n2\u5206\u6728\u306e\u30c6\u30b9\u30c8\n */\n\nrequire_once './../part/TreeNode.php';\nrequire_once './../part/BinaryTree.php';\n\n$tree = new TreeNode();\n$tree->value = 1000;\nBinaryTree::insertNode(2000, $tree);\nBinaryTree::insertNode(300, $tree);\nBinaryTree::insertNode(4000, $tree);\nBinaryTree::insertNode(5000, $tree);\nBinaryTree::insertNode(100, $tree);\nBinaryTree::insertNode(50, $tree);\nBinaryTree::insertNode(10, $tree);\nBinaryTree::insertNode(200, $tree);\nBinaryTree::insertNode(400, $tree);\necho '<pre>';\nvar_dump($tree);\necho '</pre>';\n\necho '<br>';\necho '\u3053\u3053\u304b\u3089\u691c\u7d22\u30c6\u30b9\u30c8';\nvar_dump(BinaryTree::find(1000, $tree));\nvar_dump(BinaryTree::find(2000, $tree));\nvar_dump(BinaryTree::find(300, $tree));\nvar_dump(BinaryTree::find(4000, $tree));\nvar_dump(BinaryTree::find(5000, $tree));\nvar_dump(BinaryTree::find(100, $tree));\nvar_dump(BinaryTree::find(50, $tree));\nvar_dump(BinaryTree::find(10, $tree));\nvar_dump(BinaryTree::find(200, $tree));\nvar_dump(BinaryTree::find(400, $tree));\nvar_dump(BinaryTree::find(1, $tree));\necho '<br>';\necho '\u3053\u3053\u304b\u3089\u6d88\u53bb\u30c6\u30b9\u30c8';\nvar_dump(BinaryTree::delete(1, $tree));\necho '<br>';\n//\u30ea\u30fc\u30d5\u306e\u524a\u9664\u30c6\u30b9\u30c8\n//var_dump(BinaryTree::delete(400, $tree));\n//\u53f3\u306e\u30ce\u30fc\u30c9\u3057\u304b\u306a\u3044\u6642\u306e\u524a\u9664\u30c6\u30b9\u30c8\n//var_dump(BinaryTree::delete(2000, $tree));\n//\u5de6\u306e\u30ce\u30fc\u30c9\u3057\u304b\u306a\u3044\u6642\u306e\u524a\u9664\u30c6\u30b9\u30c8\n//var_dump(BinaryTree::delete(50, $tree));\n//\u53f3\u3068\u5de6\u306e\u30ce\u30fc\u30c9\u304c\u3042\u308b\u6642\u306e\u30c6\u30b9\u30c8\n//var_dump(BinaryTree::delete(300, $tree));\n//\u53f3\u3068\u5de6\u306e\u30ce\u30fc\u30c9\u304c\u3042\u308b\u6642\u306e\u30c6\u30b9\u30c8\n////var_dump(BinaryTree::delete(100, $tree));\n//\u30eb\u30fc\u30c8\u306e\u524a\u9664\u30c6\u30b9\u30c8\n//var_dump(BinaryTree::delete(1000, $tree));\n//\u6728\u3092\u5de6\u306e\u30ce\u30fc\u30c9\u3057\u304b\u306a\u3044\u3088\u3046\u306b\u3057\u3066\u30eb\u30fc\u30c8\u3092\u524a\u9664\n//\u6728\u3092\u53f3\u306e\u30ce\u30fc\u30c9\u306b\u3057\u3066\u30eb\u30fc\u30c8\u3092\u524a\u9664\nvar_dump(BinaryTree::delete(1000, $tree));\n\necho '<pre>';\nvar_dump($tree);\necho '</pre>';\n\n\n\n\u30bd\u30fc\u30b9\u5168\u90e8\nhttps://github.com/Khanashima/algorithm\n#PHP\u30672\u5206\u6728\u306e\u8ffd\u52a0\u3001\u691c\u7d22\u3001\u524a\u9664\n\n##\u30c6\u30b9\u30c8\u306b\u4f7f\u7528\u3057\u305f\u6728\u69cb\u9020\u3068\u524a\u9664\u30eb\u30fc\u30eb\n![2\u5206\u6728.png](https://qiita-image-store.s3.amazonaws.com/0/25382/7303e0ae-00a6-aa7e-e398-192c64f8b4ef.png)\n\n##\u30b3\u30fc\u30c9\n```php:TreeNode.php\n/* \n\u6728\u69cb\u9020\u3067\u4f7f\u7528\u3059\u308b\u30ce\u30fc\u30c9\n */\n\nclass TreeNode {\n    public $value;\n    public $leftNode;\n    public $rightNode;\n}\n```\n\n```php:BinaryTree.php\n/*\n\u30d0\u30a4\u30ca\u30ea\u30fc\u30c4\u30ea\u30fc\n */\n\nrequire_once 'TreeNode.php';\n\nclass BinaryTree {\n    public static function createNewNode($value) {\n        $node            = new TreeNode();\n        $node->value     = $value;\n        $node->leftNode  = null;\n        $node->rightNode = null;\n        return $node;\n    }\n\n    public static function insertNode($value, $node) {\n        if ($node->value == $value) {\n            return false;\n        }\n\n        if ($node->value > $value) {\n            //\u30ce\u30fc\u30c9\u306e\u5024\u3088\u308a\u5c0f\u3055\u3044\u6642\u3002\u5de6\u306e\u5b50\u306e\u30ce\u30fc\u30c9\u306b\n            if ($node->leftNode != null) {\n                //\u65e2\u306b\u5de6\u306e\u30ce\u30fc\u30c9\u306b\u30c7\u30fc\u30bf\u304c\u3042\u308b\u6642\u3001\u6b21\u306e\u30ce\u30fc\u30c9\u306b\u9032\u3080\n                self::insertNode($value, $node->leftNode);\n            } else {\n                //\u5de6\u306e\u30ce\u30fc\u30c9\u306b\u30c7\u30fc\u30bf\u3092\u633f\u5165\n                $node->leftNode = self::createNewNode($value);\n                return true;\n            }\n        } else {\n            //\u30ce\u30fc\u30c9\u306e\u5024\u3088\u308a\u5927\u304d\u3044\u6642\u3002\u53f3\u306e\u5b50\u306e\u30ce\u30fc\u30c9\u306b\n            if ($node->rightNode != null) {\n                //\u65e2\u306b\u53f3\u306e\u30ce\u30fc\u30c9\u306b\u30c7\u30fc\u30bf\u304c\u3042\u308b\u6642\u3001\u6b21\u306e\u30ce\u30fc\u30c9\u306b\u9032\u3080\n                self::insertNode($value, $node->rightNode);\n            } else {\n                //\u53f3\u306e\u30ce\u30fc\u30c9\u306b\u30c7\u30fc\u30bf\u3092\u633f\u5165\n                $node->rightNode = self::createNewNode($value);\n                return true;\n            }\n        }\n    }\n\n    public static function find($value, $node) {\n        if ($node->value == $value) {\n            //\u5024\u304c\u898b\u3064\u304b\u3063\u305f\u6642\n            return true;\n        }\n\n        if ($node->value > $value) {\n            if (empty($node->leftNode)) {\n                return false;\n            }\n            //\u63a2\u3057\u3066\u3044\u308b\u5024\u304c\u5bfe\u8c61\u306e\u30ce\u30fc\u30c9\u3088\u308a\u5c0f\u3055\u3044\u6642\u306f\u5de6\u306e\u30ce\u30fc\u30c9\u3078\n            return self::find($value, $node->leftNode);\n        } else {\n            if (empty($node->rightNode)) {\n                return false;\n            }\n            //\u53f3\u306e\u30ce\u30fc\u30c9\u3078\n            return self::find($value, $node->rightNode);\n        }\n    }\n\n    public static function delete($value, &$tree) {\n        $rootNode  = &$tree; //\u30eb\u30fc\u30c8\u30ce\u30fc\u30c9\u306e\u30a2\u30c9\u30ec\u30b9\n        $node      = &$tree; //1\u500b\u305a\u3064\u8abf\u3079\u3001\u6700\u5f8c\u306f\u524a\u9664\u5bfe\u8c61\u306e\u30ce\u30fc\u30c9\n        $parent    = null;   //$node\u306e\u89aa\u306e\u30ce\u30fc\u30c9\u306e\u30a2\u30c9\u30ec\u30b9\n        $direction = 0; //\u6839\u306e\u5834\u5408\u306f0\u3002\u5de6\u306e\u5b50\u306b\u9032\u3080\u6642\u306f-1\u3092\u53f3\u306e\u6642\u306f1\n\n        //\u524a\u9664\u5bfe\u8c61\u306e\u30ce\u30fc\u30c9\u3092\u63a2\u7d22\n        while ($node !== null && $node->value != $value) {\n            if ($node->value > $value) {\n                $parent    = &$node;\n                $node      = &$node->leftNode;\n                $direction = -1;\n            } else {\n                $parent    = &$node;\n                $node      = &$node->rightNode;\n                $direction = 1;\n            }\n        }\n        //\u524a\u9664\u5bfe\u8c61\u304c\u6728\u306b\u7121\u304b\u3063\u305f\u6642\n        if ($node == null) {\n            return false;\n        }\n\n        //\u524a\u9664\u5bfe\u8c61\u306e\u30ce\u30fc\u30c9\u304c\u3042\u308b\u6642\n        if ($node->leftNode == null && $node->rightNode == null) {\n            //\u53f3\u3068\u5de6\u306e\u30ce\u30fc\u30c9\u304c\u7121\u3044\u6642\u3002\u3064\u307e\u308a\u3001\u30ea\u30fc\u30d5\u3092\u524a\u9664\n            if ($direction == -1) {\n                $parent->leftNode = null;\n            } else {\n                $parent->rightNode = null;\n            }\n        } else if ($node->leftNode == null && $node->rightNode != null) {\n            //\u5de6\u306e\u30ce\u30fc\u30c9\u304c\u7121\u304f\u304b\u3064\u53f3\u306e\u30ce\u30fc\u30c9\u304c\u3042\u308b\u6642\n            if ($direction == -1) {\n                $parent->leftNode = $node->rightNode;\n            } else if ($direction == 1) {\n                $parent->rightNode = $node->rightNode;\n            } else if ($direction == 0) {\n                //\u6728\u69cb\u9020\u3067\u53f3\u306e\u30ce\u30fc\u30c9\u3057\u304b\u306a\u304f\u30eb\u30fc\u30c8\u3092\u524a\u9664\u3059\u308b\u6642\n                $rootNode = $node->rightNode;\n            }\n        } else if ($node->leftNode != null && $node->rightNode == null) {\n            //\u5de6\u306e\u30ce\u30fc\u30c9\u304c\u3042\u3063\u3066\u304b\u3064\u53f3\u306e\u30ce\u30fc\u30c9\u304c\u7121\u3044\u6642\n            if ($direction == -1) {\n                $parent->leftNode = $node->leftNode;\n            } else if ($direction == 1) {\n                $parent->rightNode = $node->leftNode;\n            } else if ($direction == 0) {\n                //\u6728\u69cb\u9020\u3067\u5de6\u306e\u30ce\u30fc\u30c9\u3057\u304b\u306a\u304f\u30eb\u30fc\u30c8\u3092\u524a\u9664\u3059\u308b\u6642\n                $rootNode = $node->leftNode;\n            }\n        } else {\n            //\u53f3\u3068\u5de6\u306e\u5b50\u304c\u3042\u308b\u5834\u5408\u3002\n            //\u5de6\u306e\u30ce\u30fc\u30c9\u306e\u6700\u5927\u5024\u3068\u524a\u9664\u3057\u305f\u3044\u30ce\u30fc\u30c9\u3068\u4ea4\u63db\u3059\u308b\n            $leftBiggest = &$node->leftNode;\n            $parent = &$node;\n            $direction = -1;\n            //\u53f3\u306e\u30ce\u30fc\u30c9\u304c\u3042\u308b\u9650\u308a\u4e0a\u66f8\u304d\u3057\u3066\u3044\u304f\u3002\n            while ($leftBiggest->rightNode != null) {\n                $parent = &$leftBiggest;\n                $leftBiggest = &$leftBiggest->rightNode;\n                $direction = 1;\n            }\n\n            $node->value = $leftBiggest->value;\n            if ($direction == -1) {\n                $parent->leftNode = &$leftBiggest->leftNode;\n            } else {\n                $parent->rightNode = &$leftBiggest->leftNode;\n            }\n        }\n        return true;\n    }\n}\n```\n\n##\u30c6\u30b9\u30c8\u30b3\u30fc\u30c9\n```php:binaryTreeTest.php\n/*\n2\u5206\u6728\u306e\u30c6\u30b9\u30c8\n */\n\nrequire_once './../part/TreeNode.php';\nrequire_once './../part/BinaryTree.php';\n\n$tree = new TreeNode();\n$tree->value = 1000;\nBinaryTree::insertNode(2000, $tree);\nBinaryTree::insertNode(300, $tree);\nBinaryTree::insertNode(4000, $tree);\nBinaryTree::insertNode(5000, $tree);\nBinaryTree::insertNode(100, $tree);\nBinaryTree::insertNode(50, $tree);\nBinaryTree::insertNode(10, $tree);\nBinaryTree::insertNode(200, $tree);\nBinaryTree::insertNode(400, $tree);\necho '<pre>';\nvar_dump($tree);\necho '</pre>';\n\necho '<br>';\necho '\u3053\u3053\u304b\u3089\u691c\u7d22\u30c6\u30b9\u30c8';\nvar_dump(BinaryTree::find(1000, $tree));\nvar_dump(BinaryTree::find(2000, $tree));\nvar_dump(BinaryTree::find(300, $tree));\nvar_dump(BinaryTree::find(4000, $tree));\nvar_dump(BinaryTree::find(5000, $tree));\nvar_dump(BinaryTree::find(100, $tree));\nvar_dump(BinaryTree::find(50, $tree));\nvar_dump(BinaryTree::find(10, $tree));\nvar_dump(BinaryTree::find(200, $tree));\nvar_dump(BinaryTree::find(400, $tree));\nvar_dump(BinaryTree::find(1, $tree));\necho '<br>';\necho '\u3053\u3053\u304b\u3089\u6d88\u53bb\u30c6\u30b9\u30c8';\nvar_dump(BinaryTree::delete(1, $tree));\necho '<br>';\n//\u30ea\u30fc\u30d5\u306e\u524a\u9664\u30c6\u30b9\u30c8\n//var_dump(BinaryTree::delete(400, $tree));\n//\u53f3\u306e\u30ce\u30fc\u30c9\u3057\u304b\u306a\u3044\u6642\u306e\u524a\u9664\u30c6\u30b9\u30c8\n//var_dump(BinaryTree::delete(2000, $tree));\n//\u5de6\u306e\u30ce\u30fc\u30c9\u3057\u304b\u306a\u3044\u6642\u306e\u524a\u9664\u30c6\u30b9\u30c8\n//var_dump(BinaryTree::delete(50, $tree));\n//\u53f3\u3068\u5de6\u306e\u30ce\u30fc\u30c9\u304c\u3042\u308b\u6642\u306e\u30c6\u30b9\u30c8\n//var_dump(BinaryTree::delete(300, $tree));\n//\u53f3\u3068\u5de6\u306e\u30ce\u30fc\u30c9\u304c\u3042\u308b\u6642\u306e\u30c6\u30b9\u30c8\n////var_dump(BinaryTree::delete(100, $tree));\n//\u30eb\u30fc\u30c8\u306e\u524a\u9664\u30c6\u30b9\u30c8\n//var_dump(BinaryTree::delete(1000, $tree));\n//\u6728\u3092\u5de6\u306e\u30ce\u30fc\u30c9\u3057\u304b\u306a\u3044\u3088\u3046\u306b\u3057\u3066\u30eb\u30fc\u30c8\u3092\u524a\u9664\n//\u6728\u3092\u53f3\u306e\u30ce\u30fc\u30c9\u306b\u3057\u3066\u30eb\u30fc\u30c8\u3092\u524a\u9664\nvar_dump(BinaryTree::delete(1000, $tree));\n\necho '<pre>';\nvar_dump($tree);\necho '</pre>';\n```\n##\u30bd\u30fc\u30b9\u5168\u90e8\nhttps://github.com/Khanashima/algorithm\n", "tags": ["PHP", "\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0"]}