{"tags": ["\u3069\u3046\u66f8\u304f", "Prolog"], "context": " More than 1 year has passed since last update.\u304a\u984c\u306f \u3053\u3061\u3089 http://qiita.com/items/4364285801d1c9f370a1\nHaskell\u3067\u30d1\u30bf\u30f3\u30de\u30c3\u30c1\u30f3\u30b0\u3067\u66f8\u304f\u3053\u3068\u304c\u3067\u304d\u305f\u306e\u3067\u3001Prolog\u306b\u7ffb\u8a33\u3057\u3066\u307f\u307e\u3057\u305f\uff08Haskell\u3067\u6295\u7a3f\u3057\u305f\u3082\u306e\u304b\u3089\u3061\u3087\u3063\u3068\u3060\u3051\u624b\u3092\u52a0\u3048\u3066\u3042\u308a\u307e\u3059\u3001\u756a\u5175\u306e\u3068\u3053\u308d\uff09\u3002\n\u30c6\u30b9\u30c8\u306e\u5b9f\u884c\u306b\u306f https://github.com/hiratara/offline-DOUKAKU-skeletons \u306etest.prolog \u3092\u5229\u7528\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n\nanswer.prolog\nsitdown3([0'+, 0'-, 0'-|CS], P, [0'+, P, 0'-|CS]).\nsitdown3([0'-, 0'-, 0'-|CS], P, [0'-, P, 0'-|CS]).\nsitdown3([C|CS], P, [C|RS] ) :- sitdown3(CS, P, RS).\n\nsitdown2([0'+, 0'-|CS], P, [0'+, P|CS]).\nsitdown2([0'-, 0'-|CS], P, [P, 0'-|CS]).\nsitdown2([C|CS], P, [C|RS] ) :- sitdown2(CS, P, RS).\n\nsitdown1([0'-|CS], P, [P|CS] ).\nsitdown1([C|CS], P, [C|RS] ) :- sitdown1(CS, P, RS).\n\nsitdown(CS, P, RS) :- sitdown3(CS, P, RS), !.\nsitdown(CS, P, RS) :- sitdown2(CS, P, RS), !.\nsitdown(CS, P, RS) :- sitdown1(CS, P, RS), !.\n\nleave([P|CS], P, [0'-|CS]).\nleave([C|CS], P, [C|RS] ) :- leave(CS, P, RS).\n\ntraffic([], CS, CS).\ntraffic([P|PS], CS, RS) :- between(0'A, 0'Z, P), sitdown(CS, P, NS), traffic(PS, NS, RS).\ntraffic([P|PS], CS, RS) :- between(0'a, 0'z, P), to_upper(P, Q), leave(CS, Q, NS), traffic(PS, NS, RS).\n\nsentinel(XS, H, T, [H|YS]) :- sentinel(XS, T, YS).\nsentinel([], T, [T]).\nsentinel([X|XS], T, [X|YS]) :- sentinel(XS, T, YS).\n\nsplit(D, [D|XS], [], XS).\nsplit(D, [X|XS], [X|YS], ZS) :- D \\= X, split(D, XS, YS, ZS).\n\nget_source(Input, Count, Source) :- split(0':, Input, NS, Source), number_chars(Count, NS).\n\nreplicate(0, _, []).\nreplicate(N, C, [C|CS]) :- N1 is N - 1, replicate(N1, C, CS).\n\nsolve(Input, Actual) :-\n  get_source(Input, Count, Source),\n  replicate(Count, 0'-, CS0),\n  sentinel(CS0, 0'+, 0'-, CS1),\n  traffic(Source, CS1, CS2),\n  sentinel(Actual, 0'+, 0'-, CS2),\n  format(\"~s~n\", [Actual]).\n\n\n\u304a\u984c\u306f \u3053\u3061\u3089 http://qiita.com/items/4364285801d1c9f370a1\n\nHaskell\u3067\u30d1\u30bf\u30f3\u30de\u30c3\u30c1\u30f3\u30b0\u3067\u66f8\u304f\u3053\u3068\u304c\u3067\u304d\u305f\u306e\u3067\u3001Prolog\u306b\u7ffb\u8a33\u3057\u3066\u307f\u307e\u3057\u305f\uff08Haskell\u3067\u6295\u7a3f\u3057\u305f\u3082\u306e\u304b\u3089\u3061\u3087\u3063\u3068\u3060\u3051\u624b\u3092\u52a0\u3048\u3066\u3042\u308a\u307e\u3059\u3001\u756a\u5175\u306e\u3068\u3053\u308d\uff09\u3002\n\n\u30c6\u30b9\u30c8\u306e\u5b9f\u884c\u306b\u306f https://github.com/hiratara/offline-DOUKAKU-skeletons \u306etest.prolog \u3092\u5229\u7528\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n\n```prolog:answer.prolog\nsitdown3([0'+, 0'-, 0'-|CS], P, [0'+, P, 0'-|CS]).\nsitdown3([0'-, 0'-, 0'-|CS], P, [0'-, P, 0'-|CS]).\nsitdown3([C|CS], P, [C|RS] ) :- sitdown3(CS, P, RS).\n\nsitdown2([0'+, 0'-|CS], P, [0'+, P|CS]).\nsitdown2([0'-, 0'-|CS], P, [P, 0'-|CS]).\nsitdown2([C|CS], P, [C|RS] ) :- sitdown2(CS, P, RS).\n\nsitdown1([0'-|CS], P, [P|CS] ).\nsitdown1([C|CS], P, [C|RS] ) :- sitdown1(CS, P, RS).\n\nsitdown(CS, P, RS) :- sitdown3(CS, P, RS), !.\nsitdown(CS, P, RS) :- sitdown2(CS, P, RS), !.\nsitdown(CS, P, RS) :- sitdown1(CS, P, RS), !.\n\nleave([P|CS], P, [0'-|CS]).\nleave([C|CS], P, [C|RS] ) :- leave(CS, P, RS).\n\ntraffic([], CS, CS).\ntraffic([P|PS], CS, RS) :- between(0'A, 0'Z, P), sitdown(CS, P, NS), traffic(PS, NS, RS).\ntraffic([P|PS], CS, RS) :- between(0'a, 0'z, P), to_upper(P, Q), leave(CS, Q, NS), traffic(PS, NS, RS).\n\nsentinel(XS, H, T, [H|YS]) :- sentinel(XS, T, YS).\nsentinel([], T, [T]).\nsentinel([X|XS], T, [X|YS]) :- sentinel(XS, T, YS).\n\nsplit(D, [D|XS], [], XS).\nsplit(D, [X|XS], [X|YS], ZS) :- D \\= X, split(D, XS, YS, ZS).\n\nget_source(Input, Count, Source) :- split(0':, Input, NS, Source), number_chars(Count, NS).\n\nreplicate(0, _, []).\nreplicate(N, C, [C|CS]) :- N1 is N - 1, replicate(N1, C, CS).\n\nsolve(Input, Actual) :-\n  get_source(Input, Count, Source),\n  replicate(Count, 0'-, CS0),\n  sentinel(CS0, 0'+, 0'-, CS1),\n  traffic(Source, CS1, CS2),\n  sentinel(Actual, 0'+, 0'-, CS2),\n  format(\"~s~n\", [Actual]).\n```"}