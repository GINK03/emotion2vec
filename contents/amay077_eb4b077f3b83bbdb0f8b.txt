{"tags": ["C#", "ReactiveProperty", "ReactiveX"], "context": "\nReactiveProperty\u30672\u5ea6\u62bc\u3057\u9632\u6b62 - \u7720\u3044\u3057\u304a\u8179\u3059\u3044\u305f\u3057(\u00b4\u30fb\u03c9\u30fb`)\n\n\u3092\u62dd\u898b\u3057\u307e\u3057\u3066\u3001\u524d\u304b\u3089\u6c17\u306b\u306a\u3063\u3066\u305f\u306e\u3067\u8003\u3048\u3066\u307f\u307e\u3057\u305f\u3002\n\u5148\u306b\u5225\u4ef6\u3002\nReactiveCommand \u306f IObservable<T>\u3001\u305d\u3057\u3066\u30ed\u30b8\u30c3\u30af\u306e\u65b9\u3082 IObservable<T> \u3067\u4f5c\u308b\u3053\u3068\u304c\u591a\u3044\u306e\u3067\u3059\u304c\u3001\u305d\u306e\u5834\u5408\u300c\u30dc\u30bf\u30f3\u3092\u30af\u30ea\u30c3\u30af\u3057\u305f\u6642\u306b\u3001\u30ed\u30b8\u30c3\u30af\u3092\u5b9f\u884c\u3059\u308b\u300d\u3068\u3044\u3046\u30b3\u30fc\u30c9\u306f\u5927\u62b5\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002\n\nMainViewModel.cs\npublic class MainViewModel\n{\n    public ReactiveCommand TestCommand { get; }\n    public ReactiveProperty<bool> IsBusy { get; } = new ReactiveProperty<bool>(false);\n\n    public MainViewModel()\n    {\n        TestCommand = IsBusy.Select(x => !x).ToReactiveCommand();\n        TestCommand.Subscribe(_ =>\n        {\n            // log(\"\u30dc\u30bf\u30f3\u304c\u62bc\u3055\u308c\u305f\u3088\");\n            IsBusy.Value = true;\n            SomeLogicAsObservable.Subscribe(__ =>\n            {\n                // log(\"\u51e6\u7406\u304c\u5b9f\u884c\u3055\u308c\u305f\u3088\");\n                IsBusy.Value = false; // \u307b\u3093\u3068\u306f OnCompleted \u3068 OnError \u3067\u3084\u308b\u3079\u304d\n            };\n        });\n    }\n\n    // \u306a\u3093\u304b\u91cd\u3044\u975e\u540c\u671f\u306a\u51e6\u7406\n    private IObservable<Unit> SomeLogicAsObservable()\n    {\n        return Observable.Delay(Observable.Return(Unit.Default), \n                TimeSpan.FromSeconds(3));\n    }    \n}\n\n\n\u3053\u3046\u3044\u3046\u30b3\u30fc\u30c9\u3092\u66f8\u3044\u3066\u3044\u3066\u3044\u3064\u3082\u300c\u306a\u3093\u304b\u30ab\u30c3\u30b3\u60aa\u3044\u306a\u30fc\u300d\u3068\u601d\u3063\u3066\u3044\u307e\u3057\u305f\u3002\n\u305d\u3046\u601d\u3046\u70b9\u306f\u3001Subscribe \u30922\u56de\u66f8\u3044\u3066\u3044\u308b\u3053\u3068\u3002\u30dc\u30bf\u30f3\u304c\u30af\u30ea\u30c3\u30af\u3055\u308c\u305f\u4e8b\u306e\u8cfc\u8aad\u306e\u4e2d\u3067\u3055\u3089\u306b\u30ed\u30b8\u30c3\u30af\u304c\u5b9f\u884c\u3055\u308c\u305f\u4e8b\u3092\u8cfc\u8aad\u3057\u3066\u3044\u308b\u70b9\u3067\u3059\u3002\n\u3069\u3061\u3089\u3082 Stream \u306a\u306e\u3060\u304b\u3089\u3001\u3046\u307e\u304f\u30de\u30fc\u30b8\u3067\u304d\u306a\u3044\u304b\u306a\u3068\u601d\u3063\u3066\u3044\u307e\u3057\u305f\u3002\n\u3053\u308c\u306e\u89e3\u6c7a\u3082\u4e00\u7dd2\u306b\u8003\u3048\u3066\u307f\u307e\u3057\u305f\u3002\n\u306f\u3044\u3001\n\nMainViewModel.cs\npublic class MainViewModel\n{\n    public ReactiveCommand TestCommand { get; }\n    public ReactiveProperty<bool> IsBusy { get; } = new ReactiveProperty<bool>(false);\n\n    public MainViewModel()\n    {\n        TestCommand = TestCommand = IsBusy.Select(x => !x).ToReactiveCommand();\n\n        TestCommand\n            .SelectMany(_ => UsingIsBusy(SomeLogicAsObservable()))\n            .Subscribe(_ => { /* log(\"\u30dc\u30bf\u30f3\u304c\u62bc\u3055\u308c\u3066\u30ed\u30b8\u30c3\u30af\u304c\u5b9f\u884c\u3055\u308c\u305f\u3088\") \u203b */ });\n            // \u203b\u30ed\u30b8\u30c3\u30af\u304c\u305f\u304f\u3055\u3093 OnNext \u3092\u547c\u3093\u3067\u3044\u305f\u3089\u3053\u3053\u3082\u305f\u304f\u3055\u3093\u547c\u3070\u308c\u308b\u304b\u3089\u6ce8\u610f\n    }\n\n    private IObservable<T> UsingIsBusy<T>(IObservable<T> observable)\n    {\n        return Observable.Using(\n            () =>\n            {\n                IsBusy.Value = true;\n                return Disposable.Create(() => IsBusy.Value = false);\n            },\n            _ => observable);\n    }\n\n    // \u306a\u3093\u304b\u91cd\u3044\u975e\u540c\u671f\u306a\u51e6\u7406\n    private IObservable<Unit> SomeLogicAsObservable()\n    {\n        return Observable.Delay(Observable.Return(Unit.Default),\n                                TimeSpan.FromSeconds(3));\n    }\n}\n\n\nIsBusy \u306e ON/OFF \u3092 Observable.Using \u306b\u4efb\u305b\u308b\u3088\u3046\u306b\u3057\u307e\u3057\u305f\u3002\u3053\u308c\u306f\u3001\u7b2c2\u5f15\u6570\u306b\u6307\u5b9a\u3057\u305f IObservable<T> \u304c\u5b8c\u4e86\u307e\u305f\u306f\u5931\u6557\u3057\u305f\u6642\u306b\u30ea\u30bd\u30fc\u30b9\u3092\u89e3\u653e\u3057\u3066\u304f\u308c\u308b C# \u306e using \u53e5 \u306e\u3088\u3046\u306a\u3082\u306e\u3067\u3001\u3053\u3053\u3067\u306f\u7b2c2\u5f15\u6570\u306b\u30ed\u30b8\u30c3\u30af\u306e IObservable<T> \u3092\u6e21\u3059\u3053\u3068\u3067\u3001\u30ed\u30b8\u30c3\u30af\u304c\u5b8c\u4e86\u3057\u305f\u3089\u81ea\u52d5\u7684\u306b IsBusy.Value = false \u304c\u5b9f\u884c\u3055\u308c\u307e\u3059\u3002\n\u6b21\u306b\u300cSubscribe\u30922\u56de\u3057\u3066\u308b\u554f\u984c\u300d\u306f\u3001\u30dc\u30bf\u30f3\u304c\u30af\u30ea\u30c3\u30af\u3055\u308c\u305fIObserbale<T> \u304b\u3089 SelectMany \u3067\u7e4b\u3044\u3067\u3042\u3052\u308b\u3053\u3068\u3067\u89e3\u6c7a\u3057\u3066\u3044\u307e\u3059\u3002\n\u3053\u306e\u30b3\u30fc\u30c9\u306e\u8981\u6ce8\u610f\u306f\u3001IsBusy.Value = false \u304c\u5b9f\u884c\u3055\u308c\u308b\u306e\u304cUI\u30b9\u30ec\u30c3\u30c9\u3068\u306f\u9650\u3089\u306a\u3044\u306e\u3067\u3001View\u5074\u3067\u30d0\u30a4\u30f3\u30c9\u3059\u308b\u307e\u3067\u306b ObserveOnUIDispatcher \u306a\u3069\u3092\u3057\u3066\u3042\u3052\u306a\u3044\u3068\u3044\u3051\u306a\u3044\u3053\u3068\u3067\u3059\uff08\u5c11\u306a\u304f\u3068\u3082 Xamarin.Android + ReactiveProperty \u3067\u306f\u305d\u3046\u3067\u3057\u305f\u3002WPF\u3060\u3068\u6c17\u306b\u3057\u306a\u3044\u306e\u3067\u3057\u3087\u3046\u304b\uff1f\uff09\u3002\n\u3082\u3046\u5c11\u3057\u6c4e\u7528\u6027\u3092\u9ad8\u3081\u3066\u3001\u300cIsBusy \u30d7\u30ed\u30d1\u30c6\u30a3\u3092\u6301\u3063\u305f ReactiveCommand\u300d\u306e\u3088\u3046\u306a\u3082\u306e\u3092\u4f5c\u3063\u305f\u3089\u4fbf\u5229\u306a\u306e\u304b\u3082\u3057\u308c\u306a\u3044\u3067\u3059\u3002\n\n* [ReactiveProperty\u30672\u5ea6\u62bc\u3057\u9632\u6b62 - \u7720\u3044\u3057\u304a\u8179\u3059\u3044\u305f\u3057(\u00b4\u30fb\u03c9\u30fb`)](http://tamafuyou.hatenablog.com/entry/2016/04/06/213633)\n\n\u3092\u62dd\u898b\u3057\u307e\u3057\u3066\u3001\u524d\u304b\u3089\u6c17\u306b\u306a\u3063\u3066\u305f\u306e\u3067\u8003\u3048\u3066\u307f\u307e\u3057\u305f\u3002\n\n\u5148\u306b\u5225\u4ef6\u3002\n\nReactiveCommand \u306f ``IObservable<T>``\u3001\u305d\u3057\u3066\u30ed\u30b8\u30c3\u30af\u306e\u65b9\u3082 ``IObservable<T>`` \u3067\u4f5c\u308b\u3053\u3068\u304c\u591a\u3044\u306e\u3067\u3059\u304c\u3001\u305d\u306e\u5834\u5408\u300c\u30dc\u30bf\u30f3\u3092\u30af\u30ea\u30c3\u30af\u3057\u305f\u6642\u306b\u3001\u30ed\u30b8\u30c3\u30af\u3092\u5b9f\u884c\u3059\u308b\u300d\u3068\u3044\u3046\u30b3\u30fc\u30c9\u306f\u5927\u62b5\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002\n\n```csharp:MainViewModel.cs\npublic class MainViewModel\n{\n    public ReactiveCommand TestCommand { get; }\n    public ReactiveProperty<bool> IsBusy { get; } = new ReactiveProperty<bool>(false);\n\n    public MainViewModel()\n    {\n        TestCommand = IsBusy.Select(x => !x).ToReactiveCommand();\n        TestCommand.Subscribe(_ =>\n        {\n            // log(\"\u30dc\u30bf\u30f3\u304c\u62bc\u3055\u308c\u305f\u3088\");\n            IsBusy.Value = true;\n            SomeLogicAsObservable.Subscribe(__ =>\n            {\n                // log(\"\u51e6\u7406\u304c\u5b9f\u884c\u3055\u308c\u305f\u3088\");\n                IsBusy.Value = false; // \u307b\u3093\u3068\u306f OnCompleted \u3068 OnError \u3067\u3084\u308b\u3079\u304d\n            };\n        });\n    }\n    \n    // \u306a\u3093\u304b\u91cd\u3044\u975e\u540c\u671f\u306a\u51e6\u7406\n    private IObservable<Unit> SomeLogicAsObservable()\n    {\n        return Observable.Delay(Observable.Return(Unit.Default), \n                TimeSpan.FromSeconds(3));\n    }    \n}\n```\n\n\u3053\u3046\u3044\u3046\u30b3\u30fc\u30c9\u3092\u66f8\u3044\u3066\u3044\u3066\u3044\u3064\u3082\u300c\u306a\u3093\u304b\u30ab\u30c3\u30b3\u60aa\u3044\u306a\u30fc\u300d\u3068\u601d\u3063\u3066\u3044\u307e\u3057\u305f\u3002\n\u305d\u3046\u601d\u3046\u70b9\u306f\u3001``Subscribe`` \u30922\u56de\u66f8\u3044\u3066\u3044\u308b\u3053\u3068\u3002\u30dc\u30bf\u30f3\u304c\u30af\u30ea\u30c3\u30af\u3055\u308c\u305f\u4e8b\u306e\u8cfc\u8aad\u306e\u4e2d\u3067\u3055\u3089\u306b\u30ed\u30b8\u30c3\u30af\u304c\u5b9f\u884c\u3055\u308c\u305f\u4e8b\u3092\u8cfc\u8aad\u3057\u3066\u3044\u308b\u70b9\u3067\u3059\u3002\n\u3069\u3061\u3089\u3082 Stream \u306a\u306e\u3060\u304b\u3089\u3001\u3046\u307e\u304f\u30de\u30fc\u30b8\u3067\u304d\u306a\u3044\u304b\u306a\u3068\u601d\u3063\u3066\u3044\u307e\u3057\u305f\u3002\n\n\u3053\u308c\u306e\u89e3\u6c7a\u3082\u4e00\u7dd2\u306b\u8003\u3048\u3066\u307f\u307e\u3057\u305f\u3002\n\n\u306f\u3044\u3001\n\n\n```csharp:MainViewModel.cs\npublic class MainViewModel\n{\n    public ReactiveCommand TestCommand { get; }\n    public ReactiveProperty<bool> IsBusy { get; } = new ReactiveProperty<bool>(false);\n\n    public MainViewModel()\n    {\n        TestCommand = TestCommand = IsBusy.Select(x => !x).ToReactiveCommand();\n\n        TestCommand\n            .SelectMany(_ => UsingIsBusy(SomeLogicAsObservable()))\n            .Subscribe(_ => { /* log(\"\u30dc\u30bf\u30f3\u304c\u62bc\u3055\u308c\u3066\u30ed\u30b8\u30c3\u30af\u304c\u5b9f\u884c\u3055\u308c\u305f\u3088\") \u203b */ });\n            // \u203b\u30ed\u30b8\u30c3\u30af\u304c\u305f\u304f\u3055\u3093 OnNext \u3092\u547c\u3093\u3067\u3044\u305f\u3089\u3053\u3053\u3082\u305f\u304f\u3055\u3093\u547c\u3070\u308c\u308b\u304b\u3089\u6ce8\u610f\n    }\n\n    private IObservable<T> UsingIsBusy<T>(IObservable<T> observable)\n    {\n        return Observable.Using(\n            () =>\n            {\n                IsBusy.Value = true;\n                return Disposable.Create(() => IsBusy.Value = false);\n            },\n            _ => observable);\n    }\n\n    // \u306a\u3093\u304b\u91cd\u3044\u975e\u540c\u671f\u306a\u51e6\u7406\n    private IObservable<Unit> SomeLogicAsObservable()\n    {\n        return Observable.Delay(Observable.Return(Unit.Default),\n                                TimeSpan.FromSeconds(3));\n    }\n}\n```\n\n``IsBusy`` \u306e ON/OFF \u3092 ``Observable.Using`` \u306b\u4efb\u305b\u308b\u3088\u3046\u306b\u3057\u307e\u3057\u305f\u3002\u3053\u308c\u306f\u3001\u7b2c2\u5f15\u6570\u306b\u6307\u5b9a\u3057\u305f ``IObservable<T>`` \u304c\u5b8c\u4e86\u307e\u305f\u306f\u5931\u6557\u3057\u305f\u6642\u306b\u30ea\u30bd\u30fc\u30b9\u3092\u89e3\u653e\u3057\u3066\u304f\u308c\u308b C# \u306e ``using \u53e5`` \u306e\u3088\u3046\u306a\u3082\u306e\u3067\u3001\u3053\u3053\u3067\u306f\u7b2c2\u5f15\u6570\u306b\u30ed\u30b8\u30c3\u30af\u306e ``IObservable<T>`` \u3092\u6e21\u3059\u3053\u3068\u3067\u3001\u30ed\u30b8\u30c3\u30af\u304c\u5b8c\u4e86\u3057\u305f\u3089\u81ea\u52d5\u7684\u306b ``IsBusy.Value = false`` \u304c\u5b9f\u884c\u3055\u308c\u307e\u3059\u3002\n\n\u6b21\u306b\u300c``Subscribe``\u30922\u56de\u3057\u3066\u308b\u554f\u984c\u300d\u306f\u3001\u30dc\u30bf\u30f3\u304c\u30af\u30ea\u30c3\u30af\u3055\u308c\u305f``IObserbale<T>`` \u304b\u3089 ``SelectMany`` \u3067\u7e4b\u3044\u3067\u3042\u3052\u308b\u3053\u3068\u3067\u89e3\u6c7a\u3057\u3066\u3044\u307e\u3059\u3002\n\n\u3053\u306e\u30b3\u30fc\u30c9\u306e\u8981\u6ce8\u610f\u306f\u3001``IsBusy.Value = false`` \u304c\u5b9f\u884c\u3055\u308c\u308b\u306e\u304cUI\u30b9\u30ec\u30c3\u30c9\u3068\u306f\u9650\u3089\u306a\u3044\u306e\u3067\u3001View\u5074\u3067\u30d0\u30a4\u30f3\u30c9\u3059\u308b\u307e\u3067\u306b ``ObserveOnUIDispatcher`` \u306a\u3069\u3092\u3057\u3066\u3042\u3052\u306a\u3044\u3068\u3044\u3051\u306a\u3044\u3053\u3068\u3067\u3059\uff08\u5c11\u306a\u304f\u3068\u3082 Xamarin.Android + ReactiveProperty \u3067\u306f\u305d\u3046\u3067\u3057\u305f\u3002WPF\u3060\u3068\u6c17\u306b\u3057\u306a\u3044\u306e\u3067\u3057\u3087\u3046\u304b\uff1f\uff09\u3002\n\n\n\u3082\u3046\u5c11\u3057\u6c4e\u7528\u6027\u3092\u9ad8\u3081\u3066\u3001\u300c``IsBusy \u30d7\u30ed\u30d1\u30c6\u30a3\u3092\u6301\u3063\u305f ReactiveCommand``\u300d\u306e\u3088\u3046\u306a\u3082\u306e\u3092\u4f5c\u3063\u305f\u3089\u4fbf\u5229\u306a\u306e\u304b\u3082\u3057\u308c\u306a\u3044\u3067\u3059\u3002\n"}