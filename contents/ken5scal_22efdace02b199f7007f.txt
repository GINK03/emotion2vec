{"context": "\u524d\u56de\u3067\u306fAES\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u3092\u7528\u3044\u305f\u6697\u53f7\u5316\u30fb\u5fa9\u53f7\u3092Go\u3067\u5b9f\u88c5\u3057\u3066\u307f\u305f\u306e\u7d9a\u304d\u3067\u3059\u3002\n\n\u4eca\u65e5\u306e\u5185\u5bb9\n\u305f\u3060AES\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u306b\u3088\u308b\u6697\u53f7\u306e\u307f\u3060\u3068\u3001\u653b\u6483\u8005\u306f\u6697\u53f7\u6587\u3092\u64cd\u4f5c => \u5e73\u6587\u3092\u64cd\u4f5c\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\u3053\u308c\u3092\u89e3\u6c7a\u3059\u308b\u305f\u3081\u306e\uff11\u3064\u306e\u3084\u308a\u65b9\u304c\u3001SSL/TLS\u306b\u3082\u7528\u3044\u3089\u308c\u3066\u3044\u308bCBC(Cipher Block Chaining)\u30e2\u30fc\u30c9\u3067\u3059\u3002\u30e2\u30fc\u30c9\u3068\u306f\u3001\u56fa\u5b9a\u9577\u4ee5\u4e0a\u306e\u5e73\u6587\u3092\u30d6\u30ed\u30c3\u30af\u306b\u308f\u3051\u3001\u5404\u30d6\u30ed\u30c3\u30af\u3092\u6697\u53f7\u5316\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u3067\u6697\u53f7\u5316\u3059\u308b\u624b\u6cd5\u3092\u3055\u3057\u307e\u3059\u3002\n\nCBC\u30e2\u30fc\u30c9\u3068\u306f\u306a\u3093\u305e\u3084\nCBC\u30e2\u30fc\u30c9\u306f\u30011\u3064\u524d\u306e\u6697\u53f7\u6587\u30d6\u30ed\u30c3\u30af\u3068\u5e73\u6587\u30d6\u30ed\u30c3\u30af\u3092XOR\u3057\u305f\u3082\u306e\u3092\u6697\u53f7\u5316\u3059\u308b\u3053\u3068\u3092\u7e70\u308a\u8fd4\u3059\u624b\u6cd5\u306b\u306a\u308a\u307e\u3059\u3002\u6700\u521d\u306e\u6697\u53f7\u6587\u30d6\u30ed\u30c3\u30af\u3092\u751f\u6210\u3059\u308b\u969b\u306b\u306f\u3001\u30e9\u30f3\u30c0\u30e0\u306b\u751f\u6210\u3057\u305f\u521d\u671f\u5316\u30d9\u30af\u30c8\u30eb(IV)\u3092\u5e73\u6587\u30d6\u30ed\u30c3\u30af\u3068XOR\u3059\u308b\u5f62\u306b\u306a\u308a\u307e\u3059\u3002\u3053\u306eIV\u306f\u5fa9\u53f7\u6642\u306b\u3082\u5229\u7528\u306a\u306e\u3067\u5225\u9014\u4fdd\u5b58\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u3001\u6700\u7d42\u7684\u306b\u751f\u6210\u3055\u308c\u308b\u6697\u53f7\u6587\u306bappend\u3057\u3066\u4fdd\u5b58\u3059\u308b\u306e\u304c\u4e00\u822c\u7684\u3089\u3057\u3044\u3067\u3059\u3002\n\n\u307e\u305f\u3001\u5fa9\u53f7\u6642\u306b\u306f1\u3064\u524d\u306e\u6697\u53f7\u6587\u30d6\u30ed\u30c3\u30af\u3068\u3001\u5fa9\u53f7\u3055\u308c\u305f\u6697\u53f7\u6587\u30d6\u30ed\u30c3\u30af\u3092XOR\u3057\u305f\u3082\u306e\u304c\u5e73\u6587\u30d6\u30ed\u30c3\u30af\u306b\u306a\u308a\u307e\u3059\u3002\u3053\u3053\u3067\u3082IV\u304c\u5fc5\u8981\u306a\u306e\u3067\u3001\u4fdd\u5b58\u3057\u305f\u6697\u53f7\u6587\u304b\u3089IV\u3092\u53d6\u5f97\u3057\u307e\u3059\u3002\n\n\u3053\u308c\u306b\u3088\u308a\u3001\u653b\u6483\u8005\u306b\u3088\u308b\u6697\u53f7\u6587\u306e\u64cd\u4f5c\u3057\u305f\u3068\u3057\u3066\u3082\u76ee\u7684\u901a\u308a\u306e\u7d50\u679c\u306b\u3055\u305b\u306a\u3044\u3053\u3068\u304c\u53ef\u80fd\u306b\u306a\u308a\u307e\u3059\u3002\n\nCBC\u30e2\u30fc\u30c9\u306b\u304a\u3051\u308b\u6697\u53f7\u6587\u30d6\u30ed\u30c3\u30af\u306e\u5909\u5316\u306b\u5bfe\u3059\u308b\u52d5\u304d\n\n\u7834\u640d\u6642(\u6697\u53f7\u6587\u30d6\u30ed\u30c3\u30af\u306e\u5024\u304c\u4f55\u3089\u304b\u306e\u7406\u7531\u306b\u3088\u308a\u5909\u308f\u3063\u305f\u5834\u5408): \u7834\u640d\u3057\u305f\u6697\u53f7\u6587\u30d6\u30ed\u30c3\u30af\u306b\u3088\u308a\u5fa9\u53f7\u3055\u308c\u308b\u5e73\u6587\u30d6\u30ed\u30c3\u30af\u3068\u3001\u305d\u306e\u5f8c\u306b\u5fa9\u53f7\u3055\u308c\u308b\u5e73\u6587\u30d6\u30ed\u30c3\u30af\u306b\u5f71\u97ff\u3057\u307e\u3059\u3002\n\u30d3\u30c3\u30c8\u6b20\u843d: \u6b20\u843d\u3057\u305f\u6697\u53f7\u6587\u30d6\u30ed\u30c3\u30af\u306b\u3088\u308a\u5fa9\u53f7\u3055\u308c\u308b\u5e73\u6587\u30d6\u30ed\u30c3\u30af\u3068\u305d\u306e\u5f8c\u306e\u5e73\u6587\u30d6\u30ed\u30c3\u30af\u306e\u3059\u3079\u3066\n\n\nGo\u306b\u3088\u308bAES CBC\u30e2\u30fc\u30c9\u306e\u5b9f\u88c5\n\u3067\u306fGo\u3067\u306e\u5b9f\u88c5\u65b9\u6cd5\u3092\u898b\u3066\u307f\u307e\u3057\u3087\u3046.\nfunc EncryptByCBCMode(key []byte, plainText string) ([]byte, error) {\n    if len(plainText) % aes.BlockSize != 0 {\n        panic(\"Plain text must be multiple of 128bit\")\n    }\n\n    block, err := aes.NewCipher(key); if err != nil {\n        return nil, err\n    }\n\n    cipherText := make([]byte,  aes.BlockSize + len(plainText)) // \u521d\u671f\u5316\u30d9\u30af\u30c8\u30eb\u3092\u4fdd\u5b58\u3059\u308b\u305f\u3081\u306baes.BlockSize\u3092\u52a0\u3048\u3066\u3044\u308b\n    iv := cipherText[:aes.BlockSize] // Unique iv is required\n    _, err = rand.Read(iv); if err != nil {\n        return nil, err\n    }\n\n    cbc := cipher.NewCBCEncrypter(block, iv)\n    cbc.CryptBlocks(cipherText[aes.BlockSize:], []byte(plainText))\n\n    return cipherText, nil\n}\n\nfunc DecryptByCBCMode(key []byte, cipherText []byte) (string ,error) {\n    block , err := aes.NewCipher(key); if err != nil {\n        return \"\", err\n    }\n\n    if len(cipherText) < aes.BlockSize {\n        panic(\"cipher text must be longer than blocksize\")\n    } else if len(cipherText) % aes.BlockSize != 0 {\n        panic(\"cipher text must be multiple of blocksize(128bit)\")\n    }\n    iv := cipherText[:aes.BlockSize] // assuming iv is stored in the first block of ciphertext\n    cipherText = cipherText[aes.BlockSize:]\n    plainText := make([]byte, len(cipherText))\n\n    cbc := cipher.NewCBCDecrypter(block, iv)\n    cbc.CryptBlocks(plainText, cipherText)\n    fmt.Println(plainText)\n    return string(plainText), nil\n}\n\nfunc main() {\n    cipherText, _ = EncryptByCBCMode(key, \"1234567891234567\") // 16bye\n    fmt.Println(cipherText)\n    cipherText, _ = EncryptByCBCMode(key, \"12345678912345671234123412341234\") // 32byte\n    fmt.Println(cipherText)\n        // iv(32 byte) + 16byte\n\n    plainText, _ = DecryptByCBCMode(key, cipherText)\n    fmt.Println(plainText)\n        // 12345678912345671234123412341234\n}\n\n\u4ee5\u4e0a\u3002\u305f\u3060\u3001\u7d50\u5c4016\u306e\u500d\u6570 Byte\u306e\u56fa\u5b9a\u9577\u5e73\u6587\u3057\u304b\u6697\u53f7\u5316\u3067\u304d\u306a\u3044\u3002\u30d6\u30ed\u30c3\u30af\u6697\u53f7\u306e\u4ed5\u69d8\u4e0a\u3001\u3057\u3087\u3046\u304c\u306a\u3044\u306e\u3067\u304c\u3001\u4efb\u610f\u306e\u9577\u3055\u306e\u5e73\u6587\u3092\u6697\u53f7\u5316\u3057\u305f\u3044\u306e\u306f\u5f53\u7136\u306e\u6b32\u6c42\u3060\u3002\u305d\u306e\u5834\u5408\u3001(16 - \u5e73\u6587%16)\u30d0\u30a4\u30c8\u6587\u306e\u30d1\u30c7\u30a3\u30f3\u30b0\u3092\u8ffd\u52a0\u3059\u308b\u5fc5\u8981\u304c\u3042\u308b\u3002\u6b21\u56de\u306f\u3001\u305d\u308c\u3092\u304b\u304f\u3002\n[\u524d\u56de\u3067\u306fAES\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u3092\u7528\u3044\u305f](http://ken5scal.hatenablog.com/)\u6697\u53f7\u5316\u30fb\u5fa9\u53f7\u3092Go\u3067\u5b9f\u88c5\u3057\u3066\u307f\u305f\u306e\u7d9a\u304d\u3067\u3059\u3002\n\n# \u4eca\u65e5\u306e\u5185\u5bb9\n\u305f\u3060AES\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u306b\u3088\u308b\u6697\u53f7\u306e\u307f\u3060\u3068\u3001\u653b\u6483\u8005\u306f\u6697\u53f7\u6587\u3092\u64cd\u4f5c => \u5e73\u6587\u3092\u64cd\u4f5c\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\u3053\u308c\u3092\u89e3\u6c7a\u3059\u308b\u305f\u3081\u306e\uff11\u3064\u306e\u3084\u308a\u65b9\u304c\u3001SSL/TLS\u306b\u3082\u7528\u3044\u3089\u308c\u3066\u3044\u308bCBC(Cipher Block Chaining)\u30e2\u30fc\u30c9\u3067\u3059\u3002\u30e2\u30fc\u30c9\u3068\u306f\u3001\u56fa\u5b9a\u9577\u4ee5\u4e0a\u306e\u5e73\u6587\u3092\u30d6\u30ed\u30c3\u30af\u306b\u308f\u3051\u3001\u5404\u30d6\u30ed\u30c3\u30af\u3092\u6697\u53f7\u5316\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u3067\u6697\u53f7\u5316\u3059\u308b\u624b\u6cd5\u3092\u3055\u3057\u307e\u3059\u3002\n\n# CBC\u30e2\u30fc\u30c9\u3068\u306f\u306a\u3093\u305e\u3084\nCBC\u30e2\u30fc\u30c9\u306f\u30011\u3064\u524d\u306e\u6697\u53f7\u6587\u30d6\u30ed\u30c3\u30af\u3068\u5e73\u6587\u30d6\u30ed\u30c3\u30af\u3092XOR\u3057\u305f\u3082\u306e\u3092\u6697\u53f7\u5316\u3059\u308b\u3053\u3068\u3092\u7e70\u308a\u8fd4\u3059\u624b\u6cd5\u306b\u306a\u308a\u307e\u3059\u3002\u6700\u521d\u306e\u6697\u53f7\u6587\u30d6\u30ed\u30c3\u30af\u3092\u751f\u6210\u3059\u308b\u969b\u306b\u306f\u3001\u30e9\u30f3\u30c0\u30e0\u306b\u751f\u6210\u3057\u305f\u521d\u671f\u5316\u30d9\u30af\u30c8\u30eb(IV)\u3092\u5e73\u6587\u30d6\u30ed\u30c3\u30af\u3068XOR\u3059\u308b\u5f62\u306b\u306a\u308a\u307e\u3059\u3002\u3053\u306eIV\u306f\u5fa9\u53f7\u6642\u306b\u3082\u5229\u7528\u306a\u306e\u3067\u5225\u9014\u4fdd\u5b58\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u3001\u6700\u7d42\u7684\u306b\u751f\u6210\u3055\u308c\u308b\u6697\u53f7\u6587\u306bappend\u3057\u3066\u4fdd\u5b58\u3059\u308b\u306e\u304c\u4e00\u822c\u7684\u3089\u3057\u3044\u3067\u3059\u3002\n\n![image](https://qiita-image-store.s3.amazonaws.com/0/59166/21b48f5f-2bd3-194f-dfaa-c4be24c87905.png)\n\n\n\u307e\u305f\u3001\u5fa9\u53f7\u6642\u306b\u306f1\u3064\u524d\u306e\u6697\u53f7\u6587\u30d6\u30ed\u30c3\u30af\u3068\u3001\u5fa9\u53f7\u3055\u308c\u305f\u6697\u53f7\u6587\u30d6\u30ed\u30c3\u30af\u3092XOR\u3057\u305f\u3082\u306e\u304c\u5e73\u6587\u30d6\u30ed\u30c3\u30af\u306b\u306a\u308a\u307e\u3059\u3002\u3053\u3053\u3067\u3082IV\u304c\u5fc5\u8981\u306a\u306e\u3067\u3001\u4fdd\u5b58\u3057\u305f\u6697\u53f7\u6587\u304b\u3089IV\u3092\u53d6\u5f97\u3057\u307e\u3059\u3002\n\n![image](https://qiita-image-store.s3.amazonaws.com/0/59166/8572b640-b373-e7be-f3f7-4afdac3ead20.png)\n\n\n\u3053\u308c\u306b\u3088\u308a\u3001\u653b\u6483\u8005\u306b\u3088\u308b\u6697\u53f7\u6587\u306e\u64cd\u4f5c\u3057\u305f\u3068\u3057\u3066\u3082\u76ee\u7684\u901a\u308a\u306e\u7d50\u679c\u306b\u3055\u305b\u306a\u3044\u3053\u3068\u304c\u53ef\u80fd\u306b\u306a\u308a\u307e\u3059\u3002\n\n# CBC\u30e2\u30fc\u30c9\u306b\u304a\u3051\u308b\u6697\u53f7\u6587\u30d6\u30ed\u30c3\u30af\u306e\u5909\u5316\u306b\u5bfe\u3059\u308b\u52d5\u304d\n* \u7834\u640d\u6642(\u6697\u53f7\u6587\u30d6\u30ed\u30c3\u30af\u306e\u5024\u304c\u4f55\u3089\u304b\u306e\u7406\u7531\u306b\u3088\u308a\u5909\u308f\u3063\u305f\u5834\u5408): \u7834\u640d\u3057\u305f\u6697\u53f7\u6587\u30d6\u30ed\u30c3\u30af\u306b\u3088\u308a\u5fa9\u53f7\u3055\u308c\u308b\u5e73\u6587\u30d6\u30ed\u30c3\u30af\u3068\u3001\u305d\u306e\u5f8c\u306b\u5fa9\u53f7\u3055\u308c\u308b\u5e73\u6587\u30d6\u30ed\u30c3\u30af\u306b\u5f71\u97ff\u3057\u307e\u3059\u3002\n* \u30d3\u30c3\u30c8\u6b20\u843d: \u6b20\u843d\u3057\u305f\u6697\u53f7\u6587\u30d6\u30ed\u30c3\u30af\u306b\u3088\u308a\u5fa9\u53f7\u3055\u308c\u308b\u5e73\u6587\u30d6\u30ed\u30c3\u30af\u3068\u305d\u306e\u5f8c\u306e\u5e73\u6587\u30d6\u30ed\u30c3\u30af\u306e\u3059\u3079\u3066\n\n# Go\u306b\u3088\u308bAES CBC\u30e2\u30fc\u30c9\u306e\u5b9f\u88c5\n\u3067\u306fGo\u3067\u306e\u5b9f\u88c5\u65b9\u6cd5\u3092\u898b\u3066\u307f\u307e\u3057\u3087\u3046.\n\n```\u6697\u53f7\u5316\nfunc EncryptByCBCMode(key []byte, plainText string) ([]byte, error) {\n\tif len(plainText) % aes.BlockSize != 0 {\n\t\tpanic(\"Plain text must be multiple of 128bit\")\n\t}\n\n\tblock, err := aes.NewCipher(key); if err != nil {\n\t\treturn nil, err\n\t}\n\n\tcipherText := make([]byte,  aes.BlockSize + len(plainText)) // \u521d\u671f\u5316\u30d9\u30af\u30c8\u30eb\u3092\u4fdd\u5b58\u3059\u308b\u305f\u3081\u306baes.BlockSize\u3092\u52a0\u3048\u3066\u3044\u308b\n\tiv := cipherText[:aes.BlockSize] // Unique iv is required\n\t_, err = rand.Read(iv); if err != nil {\n\t\treturn nil, err\n\t}\n\n\tcbc := cipher.NewCBCEncrypter(block, iv)\n\tcbc.CryptBlocks(cipherText[aes.BlockSize:], []byte(plainText))\n\n\treturn cipherText, nil\n}\n```\n\n```\u5fa9\u53f7\nfunc DecryptByCBCMode(key []byte, cipherText []byte) (string ,error) {\n\tblock , err := aes.NewCipher(key); if err != nil {\n\t\treturn \"\", err\n\t}\n\n\tif len(cipherText) < aes.BlockSize {\n\t\tpanic(\"cipher text must be longer than blocksize\")\n\t} else if len(cipherText) % aes.BlockSize != 0 {\n\t\tpanic(\"cipher text must be multiple of blocksize(128bit)\")\n\t}\n\tiv := cipherText[:aes.BlockSize] // assuming iv is stored in the first block of ciphertext\n\tcipherText = cipherText[aes.BlockSize:]\n\tplainText := make([]byte, len(cipherText))\n\n\tcbc := cipher.NewCBCDecrypter(block, iv)\n\tcbc.CryptBlocks(plainText, cipherText)\n\tfmt.Println(plainText)\n\treturn string(plainText), nil\n}\n```\n\n```\nfunc main() {\n\tcipherText, _ = EncryptByCBCMode(key, \"1234567891234567\") // 16bye\n\tfmt.Println(cipherText)\n\tcipherText, _ = EncryptByCBCMode(key, \"12345678912345671234123412341234\") // 32byte\n\tfmt.Println(cipherText)\n        // iv(32 byte) + 16byte\n\n\tplainText, _ = DecryptByCBCMode(key, cipherText)\n\tfmt.Println(plainText)\n        // 12345678912345671234123412341234\n}\n```\n\n\u4ee5\u4e0a\u3002\u305f\u3060\u3001\u7d50\u5c4016\u306e\u500d\u6570 Byte\u306e\u56fa\u5b9a\u9577\u5e73\u6587\u3057\u304b\u6697\u53f7\u5316\u3067\u304d\u306a\u3044\u3002\u30d6\u30ed\u30c3\u30af\u6697\u53f7\u306e\u4ed5\u69d8\u4e0a\u3001\u3057\u3087\u3046\u304c\u306a\u3044\u306e\u3067\u304c\u3001\u4efb\u610f\u306e\u9577\u3055\u306e\u5e73\u6587\u3092\u6697\u53f7\u5316\u3057\u305f\u3044\u306e\u306f\u5f53\u7136\u306e\u6b32\u6c42\u3060\u3002\u305d\u306e\u5834\u5408\u3001(16 - \u5e73\u6587%16)\u30d0\u30a4\u30c8\u6587\u306e\u30d1\u30c7\u30a3\u30f3\u30b0\u3092\u8ffd\u52a0\u3059\u308b\u5fc5\u8981\u304c\u3042\u308b\u3002\u6b21\u56de\u306f\u3001\u305d\u308c\u3092\u304b\u304f\u3002\n", "tags": ["\u30bb\u30ad\u30e5\u30ea\u30c6\u30a3", "Go1.7.1", "Security"]}