{"context": " More than 1 year has passed since last update.\n\nMyHDL\u3068\u306f\nhttp://www.myhdl.org/ \n\u3067\u958b\u767a\u3055\u308c\u3066\u3044\u308b\u3001Python\u3067\u30cf\u30fc\u30c9\u30a6\u30a7\u30a2\u306e\u30e2\u30c7\u30ea\u30f3\u30b0\u3092\u884c\u3046\u305f\u3081\u306e\u30e9\u30a4\u30d6\u30e9\u30ea\u3067\u3059\u3002\u4eca\u56de\u3001MyHDL\u3092\u4f7f\u3063\u3066\u753b\u50cf\u51e6\u7406\u3092\u30e2\u30c7\u30ea\u30f3\u30b0\u3057\u3066\u307f\u307e\u3057\u305f\u3002\u30ec\u30a4\u30e4\u30fc\u7684\u306b\u306f\u3001SystemC\u3068\u540c\u3058\u4f4d\u7f6e\u306b\u3044\u308b\u3068\u611f\u3058\u307e\u3057\u305f\u3002\n\u5168\u3066\u306e\u30bd\u30fc\u30b9\u306f\u3053\u3061\u3089\u306bup\u3057\u3066\u3044\u307e\u3059\u3002\nhttps://github.com/natsutan/computervision/tree/master/LOCV/chap5\n\n\u753b\u50cf\u51e6\u7406\u306e\u8aac\u660e\n\u5165\u529b\u753b\u50cf\u306e\u3042\u308b\u7bc4\u56f2\u306b\u305f\u3044\u3057\u3066\u3001\u5358\u7d14\u306a\u307c\u304b\u3057\u3092\u5165\u308c\u3066\u307f\u307e\u3057\u305f\u3002\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u306f\u6ce8\u76ee\u753b\u7d20\u306b\u5bfe\u3057\u3066\u3001\u5468\u8fba5x5\u306e\u5e73\u5747\u5024\u3092\u305d\u306e\u753b\u7d20\u3068\u3057\u3066\u3044\u307e\u3059\u3002\n\nOpenCV\u3067\u306e\u8a18\u8ff0\n\u3053\u3053\u306fOpenCV\u3092\u4f7f\u3063\u3066\u3055\u304f\u3063\u3068\u66f8\u304d\u307e\u3059\u3002\ndef run_opencv():\n    src = cv2.imread('../../image/twittan/twittan.jpg')\n    dst = src.copy()\n\n    roi_x = 100\n    roi_y = 100\n    roi_w = 150\n    roi_h = 200\n\n    dst[roi_y:roi_y + roi_h, roi_x:roi_x + roi_w] = cv2.blur(src[roi_y:roi_y + roi_h, roi_x:roi_x + roi_w], (5, 5),\n                                                             (-1, -1))\n    print(\"image size:width = %d, height = %d\" % (dst.shape[1], dst.shape[0]))\n\n    cv2.imwrite('twi_blur_cv.jpg', dst)\n\n\n\u5165\u529b\u753b\u50cf\n\n\n\u51fa\u529b\u753b\u50cf\n\u3059\u3053\u3057\u9854\u9762\u306b\u307c\u304b\u3057\u304c\u5165\u3063\u3066\u307e\u3059\u3002\n\n\nMyHDL\u3067\u306e\u8a18\u8ff0\n\n\u30d5\u30a1\u30a4\u30eb\u69cb\u6210\n\u4eca\u56de\u306f5\u3064\u306e\u30d5\u30a1\u30a4\u30eb\u3092\u4f7f\u3063\u3066\u3044\u307e\u3059\u3002\n- smooth.py\u3000OpenCV\u306e\u51e6\u7406\u3092\u542b\u3080\u5168\u4f53\u306eTOP\u3067\u3059\u3002python smooty.py \u3067Sim\u5b9f\u884c\u3057\u307e\u3059\u3002\n- myhdl_top.py MyHDL\u74b0\u5883\u306eTOP\u3067\u3059\u3002Clk, Reset\u304c\u542b\u307e\u308c\u307e\u3059\u3002\n- smooth_hdl.py RTL\u304c\u8a18\u8f09\u3055\u308c\u3066\u3044\u307e\u3059\u3002\n- mem.py\u3000MyHDL\u306e\u30b7\u30df\u30e5\u30ec\u30fc\u30b7\u30e7\u30f3\u7528\u30e1\u30e2\u30ea\u30e2\u30c7\u30eb\u3067\u3059\u3002\n- reg_driver.py \u30ec\u30b8\u30b9\u30bf\u8a2d\u5b9a\u3092\u884c\u3044\u307e\u3059\u3002\n\n\u30c6\u30b9\u30c8\u30d9\u30f3\u30c1\u5074\n\u30c6\u30b9\u30c8\u30d9\u30f3\u30c1\u5074\u306e\u8a18\u8ff0\u3067\u3059\u3002\n\nCLK, Reset\u7b49\n\u30b5\u30f3\u30d7\u30eb\u3068\u307b\u307c\u540c\u3058\u306a\u306e\u3067\u7701\u7565\n\n\u30ec\u30b8\u30b9\u30bf\u8a2d\u5b9a\n\u6b63\u8ad6\u7406\u306e\u30ea\u30bb\u30c3\u30c8\u304c1clk\u3060\u3051\u6765\u308b\u306e\u3067\u3001\u305d\u308c\u3092\u5f85\u3063\u3066\u30ec\u30b8\u30b9\u30bf\u8a2d\u5b9a\u3092\u884c\u3063\u3066\u3044\u307e\u3059\u3002\u305d\u306e\u5f8c\u3001start\u30ec\u30b8\u30b9\u30bf\u30921clk\u3060\u30511\u306b\u3057\u51e6\u7406\u3092\u958b\u59cb\u3001end\u30ec\u30b8\u30b9\u30bf\u304c1\u306b\u306a\u308b\u306e\u3092\u5f85\u3063\u3066\u51e6\u7406\u7d42\u4e86\u3067\u3059\u3002 yield clk.posedge \u304cwait posedge(clk); \u306b\u76f8\u5f53\u3057\u307e\u3059\u3002\n\nreg_driver.py\n# -*- coding: utf-8 -*-\n__author__ = 'natu'\nfrom myhdl import *\n\ndef reg_driver_top(\n        clk, reset,\n        reg_start, reg_end,\n        reg_width, reg_height,\n        reg_roi_x, reg_roi_y, reg_roi_h, reg_roi_w\n        ):\n\n    @instance\n    def regDriver():\n        while reset == 0:\n            yield clk.posedge\n        while reset == 1:\n            yield clk.posedge\n\n        reg_width.next = 358\n        reg_height.next = 557\n        reg_roi_x.next = 100\n        reg_roi_y.next = 100\n        reg_roi_h.next = 200\n        reg_roi_w.next = 150\n        yield clk.posedge\n\n        reg_start.next = 1\n        yield clk.posedge\n        reg_start.next = 0\n        yield clk.posedge\n\n        while reg_end == 0:\n            yield clk.posedge\n\n        print(\"end == 1\")\n        yield clk.posedge\n\n    return regDriver\n\n\n\n\u30e1\u30e2\u30ea\n\u3053\u3053\u306fPython\u306e\u30d1\u30ef\u30fc\u304c\u767a\u63ee\u3067\u304d\u308b\u3068\u3053\u308d\u3067\u3057\u305f\u3002OpenCV\u306eimread\u3092\u4f7f\u3063\u3066jpeg\u30d5\u30a1\u30a4\u30eb\u3092\u76f4\u63a5\u30aa\u30fc\u30d7\u30f3\u3057\u3066Sim\u306b\u4f7f\u7528\u3067\u304d\u307e\u3059\u3002Hex\u30c0\u30f3\u30d7\u3057\u3066\u3001readmemh \u3092\u4f7f\u308f\u306a\u304f\u3066\u3082\u5927\u4e08\u592b\u3067\u3059\u3002\u51fa\u529b\u3082\u540c\u69d8\u306bOpenCV\u3067\u76f4\u63a5\u753b\u50cf\u306b\u843d\u3068\u305b\u307e\u3059\u3002\nread\u5074\u306f\u7d44\u307f\u5408\u308f\u305b\u56de\u8def\u3067radr\u304c\u5909\u5316\u3057\u305f\u3089read_r, read_g, read_b\u3092\u66f4\u65b0\u3001write\u5074\u306fclk\u540c\u671f\u3067wen\u304c1\u306e\u6642\u30e1\u30e2\u30ea\u306b\u66f8\u304d\u8fbc\u307f\u307e\u3059\u3002\n\nmem.py\n# -*- coding: utf-8 -*-\n__author__ = 'natu'\nfrom myhdl import *\nimport numpy\nimport cv2\n\ndst = None\n\ndef mem_top(\n        clk, reset,\n        read_r, read_g, read_b, radr,\n        write_r, write_g, write_b, wadr, wen):\n    global dst\n\n    src = cv2.imread('../../image/twittan/twittan.jpg')\n    dst = numpy.zeros(src.shape)\n\n    @always_comb\n    def mem_read():\n        x, y = adr_dec(radr)\n        read_r.next = clop_8bit(src[y][x][0])\n        read_g.next = clop_8bit(src[y][x][1])\n        read_b.next = clop_8bit(src[y][x][2])\n\n\n    @instance\n    def mem_write():\n        while True:\n            if wen == 1:\n                x, y = adr_dec(wadr)\n                dst[y][x][0] = write_r\n                dst[y][x][1] = write_g\n                dst[y][x][2] = write_b\n            yield clk.posedge\n\n    return mem_read, mem_write\n\ndef write_image():\n    cv2.imwrite('twi_blur_rtl.jpg', dst)\n\ndef adr_dec(adr):\n    width = dst.shape[1]\n    x = int(adr) % width\n    y = int(adr) / width\n    return x, y\n\ndef clop_8bit(x):\n    if x >= 255:\n        return 255\n\n    return int(x)\n\n\n\nRTL\u5074\n\u30b9\u30c6\u30fc\u30c8\u30de\u30b7\u30fc\u30f3\u306f\u30b5\u30f3\u30d7\u30eb\u306b\u3042\u3063\u305f\u306e\u3067\u3068\u308a\u3042\u3048\u305a\u5165\u308c\u3066\u307e\u3059\u304c\u3001\u3042\u307e\u308a\u91cd\u8981\u306a\u52d5\u304d\u306f\u3057\u3066\u3044\u307e\u305b\u3093\u3002x, y\u306e\u51e6\u7406\u3092\u3059\u308b\u306e\u306b\u3001for\u3067\u56de\u305b\u308b\u306e\u304c\u4fbf\u5229\u3067\u3059\u306d\u3002\n\u3053\u306e2\u91cd\u30eb\u30fc\u30d7\u3067\u3001\u6ce8\u76ee\u753b\u7d20\u306e\u5468\u8fba5x5\u3092\u53d6\u5f97\u3057\u3066\u3044\u307e\u3059\u3002\n      for ry in range(-2,3):\n          for rx in range(-2,3):\n\nsum_r, sum_g, sum_b\u306b\u5024\u3092\u8db3\u3057\u3053\u3093\u3067\u3044\u3063\u3066\u3001//25\u3067\u5e73\u5747\u5024\u3092\u8a08\u7b97\u3057\u3066\u3044\u307e\u3059\u3002\u3053\u308c\u3060\u3051\u3067\u5408\u6210\u3057\u3066\u304f\u308c\u305f\u3089\u3059\u3054\u304f\u4fbf\u5229\u3067\u3059\u306d\u3002\n\u4ee5\u4e0b\u3001\u5168\u30bd\u30fc\u30b9\n\nsmooth_hdl.py\n# -*- coding: utf-8 -*-\n__author__ = 'natu'\nfrom myhdl import *\n\nt_State = enum('IDLE', 'RUNNING')\n\ndef smoother_top(\n        clk, reset,\n        rin, gin, bin, radr,\n        rout, gout, bout, wadr, wen,\n        reg_start, reg_end,\n        reg_width, reg_height,\n        reg_roi_x, reg_roi_y, reg_roi_h, reg_roi_w\n    ):\n\n    state = Signal(t_State.IDLE)\n\n    @instance\n    def main_proc():\n        while 1:\n            if state == t_State.RUNNING:\n                for y in range(reg_height):\n                    print(\"y = %d\" % y)\n                    for x in range(reg_width):\n                        if reg_roi_x <= x and x < reg_roi_x + reg_roi_w and reg_roi_y <= y and y < reg_roi_y + reg_roi_h:\n                            # ROI\n                            sum_r = 0\n                            sum_g = 0\n                            sum_b = 0\n                            for ry in range(-2,3):\n                                for rx in range(-2,3):\n                                    radr.next = adr(x + rx, y + ry)\n                                    yield  clk.posedge\n                                    sum_r = sum_r + rin\n                                    sum_g = sum_g + gin\n                                    sum_b = sum_b + bin\n                                    yield  clk.posedge\n                            wadr.next = adr(x, y)\n                            rout.next = sum_r // 25\n                            gout.next = sum_g // 25\n                            bout.next = sum_b // 25\n                            wen.next = 1\n                            yield  clk.posedge\n                            wen.next = 0\n                        else:\n                            radr.next = adr(x, y)\n                            yield  clk.posedge\n                            wadr.next = adr(x, y)\n                            rout.next = rin\n                            gout.next = gin\n                            bout.next = bin\n                            wen.next = 1\n                            yield  clk.posedge\n                            wen.next = 0\n                reg_end.next = 1\n                yield  clk.posedge\n\n            yield  clk.posedge\n\n\n    def adr(x, y):\n        return y * reg_width + x\n\n    @always_seq(clk.posedge, reset=reset)\n    def fsm():\n        if state == t_State.IDLE:\n            if reg_start == 1:\n                state.next = t_State.RUNNING\n        elif state == t_State.RUNNING:\n            if reg_end == 1:\n                state.next = t_State.IDLE\n        else:\n            raise ValueError(\"Undefined state\")\n\n    return fsm, main_proc\n\n\n\n\u51e6\u7406\u7d50\u679c\n\nMyHDL\u306b\u3088\u308b\u51fa\u529b\u753b\u50cf\nOpenCV\u306e\u7d50\u679c\u3068\u307b\u307c\u540c\u3058\u3067\u3059\u3002\n\n\nvcd\u51fa\u529b\nvcd\u3082\u51fa\u529b\u3067\u304d\u308b\u306e\u3067\u3001gtkwave\u3067\u6ce2\u5f62\u304c\u78ba\u8a8d\u3067\u304d\u307e\u3059\u3002\u601d\u3063\u305f\u3068\u304a\u308a\u306b\u52d5\u3044\u3066\u307e\u3059\u3002\n\n\nVerilog\u3078\u306e\u5909\u63db\n\n\u5909\u63db\u65b9\u6cd5\nVerilog\u3078\u306e\u5909\u63db\u3082\u3001toVerilog\u95a2\u6570\u3092\u4f7f\u3046\u3068\u4e00\u767a\u3067\u3059\u3002\nwhile 1:\u306fOK\u306a\u306e\u306bwhile True\u306f\u99c4\u76ee\u3068\u304b\u3001\u5fae\u5999\u306a\u58c1\u306f\u3042\u308a\u307e\u3057\u305f\u304c\u3001\u3053\u306e\u8a18\u8ff0\u3067Verilog\u3067\u304d\u307e\u3057\u305f\u3002\n    toVerilog(smoother_top,\n        clk, reset,\n        rin, gin, bin, radr,\n        rout, gout, bout, wadr, wen,\n        reg_start, reg_end,\n        reg_width, reg_height,\n        reg_roi_x, reg_roi_y, reg_roi_h, reg_roi_w\n    )\n\n\n\u5909\u63db\u7d50\u679c\n\u308f\u304f\u308f\u304f\u3057\u307e\u3059\u306d\u3002\n// File: smoother_top.v\n// Generated by MyHDL 0.9.dev0\n// Date: Tue May 19 14:30:05 2015\n\n\n`timescale 1ns/10ps\n\nmodule smoother_top (\n    clk,\n    reset,\n    rin,\n    gin,\n    bin,\n    radr,\n    rout,\n    gout,\n    bout,\n    wadr,\n    wen,\n    reg_start,\n    reg_end,\n    reg_width,\n    reg_height,\n    reg_roi_x,\n    reg_roi_y,\n    reg_roi_h,\n    reg_roi_w\n);\n\n\ninput clk;\ninput reset;\ninput [7:0] rin;\ninput [7:0] gin;\ninput [7:0] bin;\noutput [19:0] radr;\nreg [19:0] radr;\noutput [7:0] rout;\nreg [7:0] rout;\noutput [7:0] gout;\nreg [7:0] gout;\noutput [7:0] bout;\nreg [7:0] bout;\noutput [19:0] wadr;\nreg [19:0] wadr;\noutput wen;\nreg wen;\ninput reg_start;\noutput reg_end;\nreg reg_end;\ninput [9:0] reg_width;\ninput [9:0] reg_height;\ninput [9:0] reg_roi_x;\ninput [9:0] reg_roi_y;\ninput [9:0] reg_roi_h;\ninput [9:0] reg_roi_w;\n\nreg [0:0] state;\n\n\n\n\nfunction integer MYHDL13_adr;\n    input x;\n    integer x;\n    input y;\n    integer y;\nbegin: MYHDL17_RETURN\n    MYHDL13_adr = ((y * $signed({1'b0, reg_width})) + x);\n    disable MYHDL17_RETURN;\nend\nendfunction\n\nfunction integer MYHDL14_adr;\n    input x;\n    integer x;\n    input y;\n    integer y;\nbegin: MYHDL18_RETURN\n    MYHDL14_adr = ((y * $signed({1'b0, reg_width})) + x);\n    disable MYHDL18_RETURN;\nend\nendfunction\n\nfunction integer MYHDL15_adr;\n    input x;\n    integer x;\n    input y;\n    integer y;\nbegin: MYHDL19_RETURN\n    MYHDL15_adr = ((y * $signed({1'b0, reg_width})) + x);\n    disable MYHDL19_RETURN;\nend\nendfunction\n\nfunction integer MYHDL16_adr;\n    input x;\n    integer x;\n    input y;\n    integer y;\nbegin: MYHDL20_RETURN\n    MYHDL16_adr = ((y * $signed({1'b0, reg_width})) + x);\n    disable MYHDL20_RETURN;\nend\nendfunction\n\n\nalways @(posedge clk, posedge reset) begin: SMOOTHER_TOP_FSM\n    if (reset == 1) begin\n        state <= 1'b0;\n    end\n    else begin\n        case (state)\n            1'b0: begin\n                if ((reg_start == 1)) begin\n                    state <= 1'b1;\n                end\n            end\n            1'b1: begin\n                if ((reg_end == 1)) begin\n                    state <= 1'b0;\n                end\n            end\n            default: begin\n                $finish;\n            end\n        endcase\n    end\nend\n\n\ninitial begin: SMOOTHER_TOP_MAIN_PROC\n    integer sum_b;\n    integer rx;\n    integer ry;\n    integer sum_g;\n    integer y;\n    integer x;\n    integer sum_r;\n    while (1) begin\n        if ((state == 1'b1)) begin\n            for (y=0; y<reg_height; y=y+1) begin\n                $write(\"y = \");\n                $write(\"%0d\", y);\n                $write(\"\\n\");\n                for (x=0; x<reg_width; x=x+1) begin\n                    if ((($signed({1'b0, reg_roi_x}) <= x) && (x < (reg_roi_x + reg_roi_w)) && ($signed({1'b0, reg_roi_y}) <= y) && (y < (reg_roi_y + reg_roi_h)))) begin\n                        sum_r = 0;\n                        sum_g = 0;\n                        sum_b = 0;\n                        for (ry=(-2); ry<3; ry=ry+1) begin\n                            for (rx=(-2); rx<3; rx=rx+1) begin\n                                radr <= MYHDL13_adr((x + rx), (y + ry));\n                                @(posedge clk);\n                                sum_r = (sum_r + rin);\n                                sum_g = (sum_g + gin);\n                                sum_b = (sum_b + bin);\n                                @(posedge clk);\n                            end\n                        end\n                        wadr <= MYHDL14_adr(x, y);\n                        rout <= (sum_r / 25);\n                        gout <= (sum_g / 25);\n                        bout <= (sum_b / 25);\n                        wen <= 1;\n                        @(posedge clk);\n                        wen <= 0;\n                    end\n                    else begin\n                        radr <= MYHDL15_adr(x, y);\n                        @(posedge clk);\n                        wadr <= MYHDL16_adr(x, y);\n                        rout <= rin;\n                        gout <= gin;\n                        bout <= bin;\n                        wen <= 1;\n                        @(posedge clk);\n                        wen <= 0;\n                    end\n                end\n            end\n            reg_end <= 1;\n            @(posedge clk);\n        end\n        @(posedge clk);\n    end\nend\n\nendmodule\n\ninitial begin: SMOOTHER_TOP_MAIN_PROC\u3001\u3001\u3001\n(\u3064\u0434\u2282)\uff7a\uff9e\uff7c\uff7a\uff9e\uff7c\u2192\uff08\uff1b\uff9f \u0414\uff9f\uff09 \u2026\uff01\uff1f\n\uff3f\u4eba\u4eba\u4eba\u4eba\u4eba\u4eba\u4eba\u4eba\uff3f\n\uff1e\u3000initial begin:\u3000\uff1c\n\uffe3Y^Y^Y^Y^Y^Y^\uffe3\n\u5408\u6210\u3067\u304d\u306a\u3044\uff01\n\u3060\u3081\u3058\u3083\u3093\uff1e\uff1c\n\n\u611f\u60f3\n\n\u826f\u304b\u3063\u305f\u3068\u3053\u308d\n\nPyCharm\u304c\u4fbf\u5229\u3002\u672a\u4f7f\u7528\u306e\u4fe1\u53f7\u3092\u6559\u3048\u3066\u304f\u308c\u305f\u308a\u3001\u30b9\u30b3\u30fc\u30d7\u3092\u7406\u89e3\u3057\u305f\u5909\u6570\u306e\u4e00\u62ec\u7f6e\u63db\u306a\u3069\u3002\u305f\u3060\u3001\u30c7\u30d5\u30a9\u30eb\u30c8\u306e\u72b6\u614b\u3060\u3068\u8b66\u544a\u304c\u591a\u3059\u304e\u3066\u4f7f\u3044\u306b\u304f\u3044\u3002\u3084\u308c\u3001\u6539\u884c\u304c\u591a\u3044\u3060\u306e\u5c11\u306a\u3044\u3060\u306e\u3001\u3053\u3053\u306b\u30b9\u30da\u30fc\u30b9\u304c\u3044\u308b\u3060\u306e\u3044\u3089\u3093\u3060\u306e\u3001\u3061\u3087\u3063\u3068\u8f9b\u304f\u306a\u3063\u3066\u3057\u307e\u3063\u305f\u3002\nPython\u306e\u30e9\u30a4\u30d6\u30e9\u30ea\u304c\u4fbf\u5229\u3002\n\n\u30a2\u30b5\u30fc\u30b7\u30e7\u30f3\u3068\u304b\u30ab\u30d0\u30ec\u30c3\u30b8\u3082\u6311\u6226\u3057\u305f\u304b\u3063\u305f\u3051\u3069\u3001\u81ea\u5206\u306e\u4f5c\u3063\u305f\u56de\u8def\u304c\u5408\u6210\u3067\u304d\u306a\u3044\u3068\u77e5\u3063\u3066\u304c\u3063\u304f\u3057\u304d\u3066\u3057\u307e\u3044\u3001\u305d\u3053\u307e\u3067\u8e0f\u307f\u8fbc\u3081\u305a\u3002\n\n\u99c4\u76ee\u3060\u3063\u305f\u3068\u3053\u308d\n\n\u52d5\u304f\u56de\u8def\u3092\u66f8\u304d\u304d\u308b\u96e3\u6613\u5ea6\u304c\u9ad8\u3044\u3002\u56de\u8def\u306e\u52d5\u304d\u3092\u8a18\u8f09\u3057\u305f\u95a2\u6570\u3092\u8fd4\u3059\u3068\u3044\u3046\u306e\u304c\u76f4\u611f\u7684\u3067\u306f\u306a\u3044\u3002\u30c7\u30d0\u30c3\u30b0\u3057\u306b\u304f\u3044\u3002\n\u30a8\u30e9\u30fc\u304c\u5206\u304b\u308a\u306b\u304f\u3044\u3002Python\u306e\u69cb\u6587\u30c4\u30ea\u30fc\u3092\u76f4\u63a5\u898b\u3066\u3044\u308b\u306e\u304b\u3001\u30a8\u30e9\u30fc\u30e1\u30c3\u30bb\u30fc\u30b8\u304c\u9577\u304fC++\u306e\u3088\u3046\u306a\u7d76\u671b\u611f\u304c\u3042\u308b\u3002 sum_r = 0 \u3092\u9593\u9055\u3048\u3066 sum_r == 0 \u3068\u3059\u308b\u3060\u3051\u306767\u884c\u306e\u30a8\u30e9\u30fc\u30e1\u30c3\u30bb\u30fc\u30b8\u304c\u51fa\u3066\u304f\u308b\u3002\n\u5408\u6210\u3067\u304d\u308b\u8a18\u8ff0\u304c\u975e\u5e38\u306b\u9650\u3089\u308c\u3066\u3044\u308b\u3002\u4eca\u56de\u306e\u56de\u8def\u3067\u3082\u5168\u4f53\u306f\u7121\u9650\u30eb\u30fc\u30d7\u3001wait\u304c\u5165\u308b\u306e\u306f\u5168\u3066clk\u306e\u7acb\u3061\u4e0a\u304c\u308a\u306a\u306e\u3067\u3001\u3053\u308c\u306f\u5408\u6210\u53ef\u80fd\u306aVerilog\u306b\u7f6e\u304d\u63db\u3048\u3066\u304f\u308c\u308b\u3060\u308d\u3046\u3068\u601d\u3063\u3066\u66f8\u3044\u3066\u3044\u305f\u304c\u3001\u3053\u306e\u8a18\u8ff0\u3060\u3068\u99c4\u76ee\u3067\u3057\u305f\u3002\n\n    @always_seq(clk.posedge, reset=reset)\n    def fsm():\n        if state == t_State.IDLE:\n            if reg_start == 1:\n                state.next = t_State.RUNNING\n        elif state == t_State.RUNNING:\n            if reg_end == 1:\n                state.next = t_State.IDLE\n        else:\n            raise ValueError(\"Undefined state\")\n\n\u5408\u6210\u53ef\u80fd\u306a\u8a18\u8ff0\u306f\u3053\u306e\u30d1\u30bf\u30fc\u30f3\u3067\u3001\u9014\u4e2d\u306byield\u304c\u5165\u3063\u3066\u3053\u306a\u3044\u30b8\u30a7\u30cd\u30ec\u30fc\u30bf\u3092\u66f8\u304d\u304d\u3089\u306a\u3044\u3068\u3044\u3051\u306a\u3044\u3002\u3064\u307e\u308aVerilog-HDL\u3068\u540c\u3058\u3002\u3042\u304f\u307e\u3067\u30e2\u30c7\u30ea\u30f3\u30b0\u306e\u8a00\u8a9e\u3067\u3059\u306d\u3002\n\n# MyHDL\u3068\u306f\nhttp://www.myhdl.org/ \n\u3067\u958b\u767a\u3055\u308c\u3066\u3044\u308b\u3001Python\u3067\u30cf\u30fc\u30c9\u30a6\u30a7\u30a2\u306e\u30e2\u30c7\u30ea\u30f3\u30b0\u3092\u884c\u3046\u305f\u3081\u306e\u30e9\u30a4\u30d6\u30e9\u30ea\u3067\u3059\u3002\u4eca\u56de\u3001MyHDL\u3092\u4f7f\u3063\u3066\u753b\u50cf\u51e6\u7406\u3092\u30e2\u30c7\u30ea\u30f3\u30b0\u3057\u3066\u307f\u307e\u3057\u305f\u3002\u30ec\u30a4\u30e4\u30fc\u7684\u306b\u306f\u3001SystemC\u3068\u540c\u3058\u4f4d\u7f6e\u306b\u3044\u308b\u3068\u611f\u3058\u307e\u3057\u305f\u3002\n\n\u5168\u3066\u306e\u30bd\u30fc\u30b9\u306f\u3053\u3061\u3089\u306bup\u3057\u3066\u3044\u307e\u3059\u3002\nhttps://github.com/natsutan/computervision/tree/master/LOCV/chap5\n\n# \u753b\u50cf\u51e6\u7406\u306e\u8aac\u660e\n\u5165\u529b\u753b\u50cf\u306e\u3042\u308b\u7bc4\u56f2\u306b\u305f\u3044\u3057\u3066\u3001\u5358\u7d14\u306a\u307c\u304b\u3057\u3092\u5165\u308c\u3066\u307f\u307e\u3057\u305f\u3002\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u306f\u6ce8\u76ee\u753b\u7d20\u306b\u5bfe\u3057\u3066\u3001\u5468\u8fba5x5\u306e\u5e73\u5747\u5024\u3092\u305d\u306e\u753b\u7d20\u3068\u3057\u3066\u3044\u307e\u3059\u3002\n\n## OpenCV\u3067\u306e\u8a18\u8ff0\n\u3053\u3053\u306fOpenCV\u3092\u4f7f\u3063\u3066\u3055\u304f\u3063\u3068\u66f8\u304d\u307e\u3059\u3002\n\n```py\ndef run_opencv():\n    src = cv2.imread('../../image/twittan/twittan.jpg')\n    dst = src.copy()\n\n    roi_x = 100\n    roi_y = 100\n    roi_w = 150\n    roi_h = 200\n\n    dst[roi_y:roi_y + roi_h, roi_x:roi_x + roi_w] = cv2.blur(src[roi_y:roi_y + roi_h, roi_x:roi_x + roi_w], (5, 5),\n                                                             (-1, -1))\n    print(\"image size:width = %d, height = %d\" % (dst.shape[1], dst.shape[0]))\n\n    cv2.imwrite('twi_blur_cv.jpg', dst)\n```\n## \u5165\u529b\u753b\u50cf\n\n![twi.jpg](https://qiita-image-store.s3.amazonaws.com/0/327/2bb6f06c-74e6-3aaa-5373-a088fd36c1fb.jpeg)\n\n## \u51fa\u529b\u753b\u50cf\n\u3059\u3053\u3057\u9854\u9762\u306b\u307c\u304b\u3057\u304c\u5165\u3063\u3066\u307e\u3059\u3002\n![twi_blur_cv.jpg](https://qiita-image-store.s3.amazonaws.com/0/327/f5c2cc12-7017-43ec-988a-8220e5589dea.jpeg)\n\n# MyHDL\u3067\u306e\u8a18\u8ff0\n## \u30d5\u30a1\u30a4\u30eb\u69cb\u6210\n\u4eca\u56de\u306f5\u3064\u306e\u30d5\u30a1\u30a4\u30eb\u3092\u4f7f\u3063\u3066\u3044\u307e\u3059\u3002\n- smooth.py\u3000OpenCV\u306e\u51e6\u7406\u3092\u542b\u3080\u5168\u4f53\u306eTOP\u3067\u3059\u3002python smooty.py \u3067Sim\u5b9f\u884c\u3057\u307e\u3059\u3002\n- myhdl_top.py MyHDL\u74b0\u5883\u306eTOP\u3067\u3059\u3002Clk, Reset\u304c\u542b\u307e\u308c\u307e\u3059\u3002\n- smooth_hdl.py RTL\u304c\u8a18\u8f09\u3055\u308c\u3066\u3044\u307e\u3059\u3002\n- mem.py\u3000MyHDL\u306e\u30b7\u30df\u30e5\u30ec\u30fc\u30b7\u30e7\u30f3\u7528\u30e1\u30e2\u30ea\u30e2\u30c7\u30eb\u3067\u3059\u3002\n- reg_driver.py \u30ec\u30b8\u30b9\u30bf\u8a2d\u5b9a\u3092\u884c\u3044\u307e\u3059\u3002\n \n## \u30c6\u30b9\u30c8\u30d9\u30f3\u30c1\u5074\n\u30c6\u30b9\u30c8\u30d9\u30f3\u30c1\u5074\u306e\u8a18\u8ff0\u3067\u3059\u3002\n### CLK, Reset\u7b49\n\u30b5\u30f3\u30d7\u30eb\u3068\u307b\u307c\u540c\u3058\u306a\u306e\u3067\u7701\u7565\n###  \u30ec\u30b8\u30b9\u30bf\u8a2d\u5b9a\n\u6b63\u8ad6\u7406\u306e\u30ea\u30bb\u30c3\u30c8\u304c1clk\u3060\u3051\u6765\u308b\u306e\u3067\u3001\u305d\u308c\u3092\u5f85\u3063\u3066\u30ec\u30b8\u30b9\u30bf\u8a2d\u5b9a\u3092\u884c\u3063\u3066\u3044\u307e\u3059\u3002\u305d\u306e\u5f8c\u3001start\u30ec\u30b8\u30b9\u30bf\u30921clk\u3060\u30511\u306b\u3057\u51e6\u7406\u3092\u958b\u59cb\u3001end\u30ec\u30b8\u30b9\u30bf\u304c1\u306b\u306a\u308b\u306e\u3092\u5f85\u3063\u3066\u51e6\u7406\u7d42\u4e86\u3067\u3059\u3002 yield clk.posedge \u304cwait posedge(clk); \u306b\u76f8\u5f53\u3057\u307e\u3059\u3002\n\n\n```py:reg_driver.py\n# -*- coding: utf-8 -*-\n__author__ = 'natu'\nfrom myhdl import *\n\ndef reg_driver_top(\n        clk, reset,\n        reg_start, reg_end,\n        reg_width, reg_height,\n        reg_roi_x, reg_roi_y, reg_roi_h, reg_roi_w\n        ):\n\n    @instance\n    def regDriver():\n        while reset == 0:\n            yield clk.posedge\n        while reset == 1:\n            yield clk.posedge\n\n        reg_width.next = 358\n        reg_height.next = 557\n        reg_roi_x.next = 100\n        reg_roi_y.next = 100\n        reg_roi_h.next = 200\n        reg_roi_w.next = 150\n        yield clk.posedge\n\n        reg_start.next = 1\n        yield clk.posedge\n        reg_start.next = 0\n        yield clk.posedge\n\n        while reg_end == 0:\n            yield clk.posedge\n\n        print(\"end == 1\")\n        yield clk.posedge\n\n    return regDriver\n```\n\n### \u30e1\u30e2\u30ea\n\u3053\u3053\u306fPython\u306e\u30d1\u30ef\u30fc\u304c\u767a\u63ee\u3067\u304d\u308b\u3068\u3053\u308d\u3067\u3057\u305f\u3002OpenCV\u306eimread\u3092\u4f7f\u3063\u3066jpeg\u30d5\u30a1\u30a4\u30eb\u3092\u76f4\u63a5\u30aa\u30fc\u30d7\u30f3\u3057\u3066Sim\u306b\u4f7f\u7528\u3067\u304d\u307e\u3059\u3002Hex\u30c0\u30f3\u30d7\u3057\u3066\u3001readmemh \u3092\u4f7f\u308f\u306a\u304f\u3066\u3082\u5927\u4e08\u592b\u3067\u3059\u3002\u51fa\u529b\u3082\u540c\u69d8\u306bOpenCV\u3067\u76f4\u63a5\u753b\u50cf\u306b\u843d\u3068\u305b\u307e\u3059\u3002\n\nread\u5074\u306f\u7d44\u307f\u5408\u308f\u305b\u56de\u8def\u3067radr\u304c\u5909\u5316\u3057\u305f\u3089read_r, read_g, read_b\u3092\u66f4\u65b0\u3001write\u5074\u306fclk\u540c\u671f\u3067wen\u304c1\u306e\u6642\u30e1\u30e2\u30ea\u306b\u66f8\u304d\u8fbc\u307f\u307e\u3059\u3002\n\n```py:mem.py\n# -*- coding: utf-8 -*-\n__author__ = 'natu'\nfrom myhdl import *\nimport numpy\nimport cv2\n\ndst = None\n\ndef mem_top(\n        clk, reset,\n        read_r, read_g, read_b, radr,\n        write_r, write_g, write_b, wadr, wen):\n    global dst\n\n    src = cv2.imread('../../image/twittan/twittan.jpg')\n    dst = numpy.zeros(src.shape)\n\n    @always_comb\n    def mem_read():\n        x, y = adr_dec(radr)\n        read_r.next = clop_8bit(src[y][x][0])\n        read_g.next = clop_8bit(src[y][x][1])\n        read_b.next = clop_8bit(src[y][x][2])\n\n\n    @instance\n    def mem_write():\n        while True:\n            if wen == 1:\n                x, y = adr_dec(wadr)\n                dst[y][x][0] = write_r\n                dst[y][x][1] = write_g\n                dst[y][x][2] = write_b\n            yield clk.posedge\n\n    return mem_read, mem_write\n\ndef write_image():\n    cv2.imwrite('twi_blur_rtl.jpg', dst)\n\ndef adr_dec(adr):\n    width = dst.shape[1]\n    x = int(adr) % width\n    y = int(adr) / width\n    return x, y\n\ndef clop_8bit(x):\n    if x >= 255:\n        return 255\n\n    return int(x)\n```\n\n## RTL\u5074\n\u30b9\u30c6\u30fc\u30c8\u30de\u30b7\u30fc\u30f3\u306f\u30b5\u30f3\u30d7\u30eb\u306b\u3042\u3063\u305f\u306e\u3067\u3068\u308a\u3042\u3048\u305a\u5165\u308c\u3066\u307e\u3059\u304c\u3001\u3042\u307e\u308a\u91cd\u8981\u306a\u52d5\u304d\u306f\u3057\u3066\u3044\u307e\u305b\u3093\u3002x, y\u306e\u51e6\u7406\u3092\u3059\u308b\u306e\u306b\u3001for\u3067\u56de\u305b\u308b\u306e\u304c\u4fbf\u5229\u3067\u3059\u306d\u3002\n\n\u3053\u306e2\u91cd\u30eb\u30fc\u30d7\u3067\u3001\u6ce8\u76ee\u753b\u7d20\u306e\u5468\u8fba5x5\u3092\u53d6\u5f97\u3057\u3066\u3044\u307e\u3059\u3002\n\n```py\n      for ry in range(-2,3):\n          for rx in range(-2,3):\n```\nsum_r, sum_g, sum_b\u306b\u5024\u3092\u8db3\u3057\u3053\u3093\u3067\u3044\u3063\u3066\u3001//25\u3067\u5e73\u5747\u5024\u3092\u8a08\u7b97\u3057\u3066\u3044\u307e\u3059\u3002\u3053\u308c\u3060\u3051\u3067\u5408\u6210\u3057\u3066\u304f\u308c\u305f\u3089\u3059\u3054\u304f\u4fbf\u5229\u3067\u3059\u306d\u3002\n\n\u4ee5\u4e0b\u3001\u5168\u30bd\u30fc\u30b9\n\n```py:smooth_hdl.py\n# -*- coding: utf-8 -*-\n__author__ = 'natu'\nfrom myhdl import *\n\nt_State = enum('IDLE', 'RUNNING')\n\ndef smoother_top(\n        clk, reset,\n        rin, gin, bin, radr,\n        rout, gout, bout, wadr, wen,\n        reg_start, reg_end,\n        reg_width, reg_height,\n        reg_roi_x, reg_roi_y, reg_roi_h, reg_roi_w\n    ):\n\n    state = Signal(t_State.IDLE)\n\n    @instance\n    def main_proc():\n        while 1:\n            if state == t_State.RUNNING:\n                for y in range(reg_height):\n                    print(\"y = %d\" % y)\n                    for x in range(reg_width):\n                        if reg_roi_x <= x and x < reg_roi_x + reg_roi_w and reg_roi_y <= y and y < reg_roi_y + reg_roi_h:\n                            # ROI\n                            sum_r = 0\n                            sum_g = 0\n                            sum_b = 0\n                            for ry in range(-2,3):\n                                for rx in range(-2,3):\n                                    radr.next = adr(x + rx, y + ry)\n                                    yield  clk.posedge\n                                    sum_r = sum_r + rin\n                                    sum_g = sum_g + gin\n                                    sum_b = sum_b + bin\n                                    yield  clk.posedge\n                            wadr.next = adr(x, y)\n                            rout.next = sum_r // 25\n                            gout.next = sum_g // 25\n                            bout.next = sum_b // 25\n                            wen.next = 1\n                            yield  clk.posedge\n                            wen.next = 0\n                        else:\n                            radr.next = adr(x, y)\n                            yield  clk.posedge\n                            wadr.next = adr(x, y)\n                            rout.next = rin\n                            gout.next = gin\n                            bout.next = bin\n                            wen.next = 1\n                            yield  clk.posedge\n                            wen.next = 0\n                reg_end.next = 1\n                yield  clk.posedge\n\n            yield  clk.posedge\n\n\n    def adr(x, y):\n        return y * reg_width + x\n\n    @always_seq(clk.posedge, reset=reset)\n    def fsm():\n        if state == t_State.IDLE:\n            if reg_start == 1:\n                state.next = t_State.RUNNING\n        elif state == t_State.RUNNING:\n            if reg_end == 1:\n                state.next = t_State.IDLE\n        else:\n            raise ValueError(\"Undefined state\")\n            \n    return fsm, main_proc\n```\n\n# \u51e6\u7406\u7d50\u679c\n## MyHDL\u306b\u3088\u308b\u51fa\u529b\u753b\u50cf\nOpenCV\u306e\u7d50\u679c\u3068\u307b\u307c\u540c\u3058\u3067\u3059\u3002\n\n![twi_blur_rtl.jpg](https://qiita-image-store.s3.amazonaws.com/0/327/d7d99932-976b-f122-f1b0-d06dd655bd9c.jpeg)\n\n## vcd\u51fa\u529b\nvcd\u3082\u51fa\u529b\u3067\u304d\u308b\u306e\u3067\u3001gtkwave\u3067\u6ce2\u5f62\u304c\u78ba\u8a8d\u3067\u304d\u307e\u3059\u3002\u601d\u3063\u305f\u3068\u304a\u308a\u306b\u52d5\u3044\u3066\u307e\u3059\u3002\n![gtkwave.png](https://qiita-image-store.s3.amazonaws.com/0/327/30cf4f5d-96e9-1abf-c472-f2d7db81a241.png)\n\n# Verilog\u3078\u306e\u5909\u63db\n## \u5909\u63db\u65b9\u6cd5\nVerilog\u3078\u306e\u5909\u63db\u3082\u3001toVerilog\u95a2\u6570\u3092\u4f7f\u3046\u3068\u4e00\u767a\u3067\u3059\u3002\nwhile 1:\u306fOK\u306a\u306e\u306bwhile True\u306f\u99c4\u76ee\u3068\u304b\u3001\u5fae\u5999\u306a\u58c1\u306f\u3042\u308a\u307e\u3057\u305f\u304c\u3001\u3053\u306e\u8a18\u8ff0\u3067Verilog\u3067\u304d\u307e\u3057\u305f\u3002\n\n```py\n    toVerilog(smoother_top,\n        clk, reset,\n        rin, gin, bin, radr,\n        rout, gout, bout, wadr, wen,\n        reg_start, reg_end,\n        reg_width, reg_height,\n        reg_roi_x, reg_roi_y, reg_roi_h, reg_roi_w\n    )\n```\n##\u5909\u63db\u7d50\u679c\n\u308f\u304f\u308f\u304f\u3057\u307e\u3059\u306d\u3002\n\n```verilog\n// File: smoother_top.v\n// Generated by MyHDL 0.9.dev0\n// Date: Tue May 19 14:30:05 2015\n\n\n`timescale 1ns/10ps\n\nmodule smoother_top (\n    clk,\n    reset,\n    rin,\n    gin,\n    bin,\n    radr,\n    rout,\n    gout,\n    bout,\n    wadr,\n    wen,\n    reg_start,\n    reg_end,\n    reg_width,\n    reg_height,\n    reg_roi_x,\n    reg_roi_y,\n    reg_roi_h,\n    reg_roi_w\n);\n\n\ninput clk;\ninput reset;\ninput [7:0] rin;\ninput [7:0] gin;\ninput [7:0] bin;\noutput [19:0] radr;\nreg [19:0] radr;\noutput [7:0] rout;\nreg [7:0] rout;\noutput [7:0] gout;\nreg [7:0] gout;\noutput [7:0] bout;\nreg [7:0] bout;\noutput [19:0] wadr;\nreg [19:0] wadr;\noutput wen;\nreg wen;\ninput reg_start;\noutput reg_end;\nreg reg_end;\ninput [9:0] reg_width;\ninput [9:0] reg_height;\ninput [9:0] reg_roi_x;\ninput [9:0] reg_roi_y;\ninput [9:0] reg_roi_h;\ninput [9:0] reg_roi_w;\n\nreg [0:0] state;\n\n\n\n\nfunction integer MYHDL13_adr;\n    input x;\n    integer x;\n    input y;\n    integer y;\nbegin: MYHDL17_RETURN\n    MYHDL13_adr = ((y * $signed({1'b0, reg_width})) + x);\n    disable MYHDL17_RETURN;\nend\nendfunction\n\nfunction integer MYHDL14_adr;\n    input x;\n    integer x;\n    input y;\n    integer y;\nbegin: MYHDL18_RETURN\n    MYHDL14_adr = ((y * $signed({1'b0, reg_width})) + x);\n    disable MYHDL18_RETURN;\nend\nendfunction\n\nfunction integer MYHDL15_adr;\n    input x;\n    integer x;\n    input y;\n    integer y;\nbegin: MYHDL19_RETURN\n    MYHDL15_adr = ((y * $signed({1'b0, reg_width})) + x);\n    disable MYHDL19_RETURN;\nend\nendfunction\n\nfunction integer MYHDL16_adr;\n    input x;\n    integer x;\n    input y;\n    integer y;\nbegin: MYHDL20_RETURN\n    MYHDL16_adr = ((y * $signed({1'b0, reg_width})) + x);\n    disable MYHDL20_RETURN;\nend\nendfunction\n\n\nalways @(posedge clk, posedge reset) begin: SMOOTHER_TOP_FSM\n    if (reset == 1) begin\n        state <= 1'b0;\n    end\n    else begin\n        case (state)\n            1'b0: begin\n                if ((reg_start == 1)) begin\n                    state <= 1'b1;\n                end\n            end\n            1'b1: begin\n                if ((reg_end == 1)) begin\n                    state <= 1'b0;\n                end\n            end\n            default: begin\n                $finish;\n            end\n        endcase\n    end\nend\n\n\ninitial begin: SMOOTHER_TOP_MAIN_PROC\n    integer sum_b;\n    integer rx;\n    integer ry;\n    integer sum_g;\n    integer y;\n    integer x;\n    integer sum_r;\n    while (1) begin\n        if ((state == 1'b1)) begin\n            for (y=0; y<reg_height; y=y+1) begin\n                $write(\"y = \");\n                $write(\"%0d\", y);\n                $write(\"\\n\");\n                for (x=0; x<reg_width; x=x+1) begin\n                    if ((($signed({1'b0, reg_roi_x}) <= x) && (x < (reg_roi_x + reg_roi_w)) && ($signed({1'b0, reg_roi_y}) <= y) && (y < (reg_roi_y + reg_roi_h)))) begin\n                        sum_r = 0;\n                        sum_g = 0;\n                        sum_b = 0;\n                        for (ry=(-2); ry<3; ry=ry+1) begin\n                            for (rx=(-2); rx<3; rx=rx+1) begin\n                                radr <= MYHDL13_adr((x + rx), (y + ry));\n                                @(posedge clk);\n                                sum_r = (sum_r + rin);\n                                sum_g = (sum_g + gin);\n                                sum_b = (sum_b + bin);\n                                @(posedge clk);\n                            end\n                        end\n                        wadr <= MYHDL14_adr(x, y);\n                        rout <= (sum_r / 25);\n                        gout <= (sum_g / 25);\n                        bout <= (sum_b / 25);\n                        wen <= 1;\n                        @(posedge clk);\n                        wen <= 0;\n                    end\n                    else begin\n                        radr <= MYHDL15_adr(x, y);\n                        @(posedge clk);\n                        wadr <= MYHDL16_adr(x, y);\n                        rout <= rin;\n                        gout <= gin;\n                        bout <= bin;\n                        wen <= 1;\n                        @(posedge clk);\n                        wen <= 0;\n                    end\n                end\n            end\n            reg_end <= 1;\n            @(posedge clk);\n        end\n        @(posedge clk);\n    end\nend\n\nendmodule\n```\n\ninitial begin: SMOOTHER_TOP_MAIN_PROC\u3001\u3001\u3001\n\n(\u3064\u0434\u2282)\uff7a\uff9e\uff7c\uff7a\uff9e\uff7c\u2192\uff08\uff1b\uff9f \u0414\uff9f\uff09 \u2026\uff01\uff1f\n\n\uff3f\u4eba\u4eba\u4eba\u4eba\u4eba\u4eba\u4eba\u4eba\uff3f\n\uff1e\u3000initial begin:\u3000\uff1c\n\uffe3Y^Y^Y^Y^Y^Y^\uffe3\n\n\u5408\u6210\u3067\u304d\u306a\u3044\uff01\n\u3060\u3081\u3058\u3083\u3093\uff1e\uff1c\n\n# \u611f\u60f3\n## \u826f\u304b\u3063\u305f\u3068\u3053\u308d\n- PyCharm\u304c\u4fbf\u5229\u3002\u672a\u4f7f\u7528\u306e\u4fe1\u53f7\u3092\u6559\u3048\u3066\u304f\u308c\u305f\u308a\u3001\u30b9\u30b3\u30fc\u30d7\u3092\u7406\u89e3\u3057\u305f\u5909\u6570\u306e\u4e00\u62ec\u7f6e\u63db\u306a\u3069\u3002\u305f\u3060\u3001\u30c7\u30d5\u30a9\u30eb\u30c8\u306e\u72b6\u614b\u3060\u3068\u8b66\u544a\u304c\u591a\u3059\u304e\u3066\u4f7f\u3044\u306b\u304f\u3044\u3002\u3084\u308c\u3001\u6539\u884c\u304c\u591a\u3044\u3060\u306e\u5c11\u306a\u3044\u3060\u306e\u3001\u3053\u3053\u306b\u30b9\u30da\u30fc\u30b9\u304c\u3044\u308b\u3060\u306e\u3044\u3089\u3093\u3060\u306e\u3001\u3061\u3087\u3063\u3068\u8f9b\u304f\u306a\u3063\u3066\u3057\u307e\u3063\u305f\u3002\n- Python\u306e\u30e9\u30a4\u30d6\u30e9\u30ea\u304c\u4fbf\u5229\u3002\n\n\u30a2\u30b5\u30fc\u30b7\u30e7\u30f3\u3068\u304b\u30ab\u30d0\u30ec\u30c3\u30b8\u3082\u6311\u6226\u3057\u305f\u304b\u3063\u305f\u3051\u3069\u3001\u81ea\u5206\u306e\u4f5c\u3063\u305f\u56de\u8def\u304c\u5408\u6210\u3067\u304d\u306a\u3044\u3068\u77e5\u3063\u3066\u304c\u3063\u304f\u3057\u304d\u3066\u3057\u307e\u3044\u3001\u305d\u3053\u307e\u3067\u8e0f\u307f\u8fbc\u3081\u305a\u3002\n\n## \u99c4\u76ee\u3060\u3063\u305f\u3068\u3053\u308d\n- \u52d5\u304f\u56de\u8def\u3092\u66f8\u304d\u304d\u308b\u96e3\u6613\u5ea6\u304c\u9ad8\u3044\u3002\u56de\u8def\u306e\u52d5\u304d\u3092\u8a18\u8f09\u3057\u305f\u95a2\u6570\u3092\u8fd4\u3059\u3068\u3044\u3046\u306e\u304c\u76f4\u611f\u7684\u3067\u306f\u306a\u3044\u3002\u30c7\u30d0\u30c3\u30b0\u3057\u306b\u304f\u3044\u3002\n- \u30a8\u30e9\u30fc\u304c\u5206\u304b\u308a\u306b\u304f\u3044\u3002Python\u306e\u69cb\u6587\u30c4\u30ea\u30fc\u3092\u76f4\u63a5\u898b\u3066\u3044\u308b\u306e\u304b\u3001\u30a8\u30e9\u30fc\u30e1\u30c3\u30bb\u30fc\u30b8\u304c\u9577\u304fC++\u306e\u3088\u3046\u306a\u7d76\u671b\u611f\u304c\u3042\u308b\u3002 sum_r = 0 \u3092\u9593\u9055\u3048\u3066 sum_r == 0 \u3068\u3059\u308b\u3060\u3051\u306767\u884c\u306e\u30a8\u30e9\u30fc\u30e1\u30c3\u30bb\u30fc\u30b8\u304c\u51fa\u3066\u304f\u308b\u3002\n- \u5408\u6210\u3067\u304d\u308b\u8a18\u8ff0\u304c\u975e\u5e38\u306b\u9650\u3089\u308c\u3066\u3044\u308b\u3002\u4eca\u56de\u306e\u56de\u8def\u3067\u3082\u5168\u4f53\u306f\u7121\u9650\u30eb\u30fc\u30d7\u3001wait\u304c\u5165\u308b\u306e\u306f\u5168\u3066clk\u306e\u7acb\u3061\u4e0a\u304c\u308a\u306a\u306e\u3067\u3001\u3053\u308c\u306f\u5408\u6210\u53ef\u80fd\u306aVerilog\u306b\u7f6e\u304d\u63db\u3048\u3066\u304f\u308c\u308b\u3060\u308d\u3046\u3068\u601d\u3063\u3066\u66f8\u3044\u3066\u3044\u305f\u304c\u3001\u3053\u306e\u8a18\u8ff0\u3060\u3068\u99c4\u76ee\u3067\u3057\u305f\u3002\n\n```py\n    @always_seq(clk.posedge, reset=reset)\n    def fsm():\n        if state == t_State.IDLE:\n            if reg_start == 1:\n                state.next = t_State.RUNNING\n        elif state == t_State.RUNNING:\n            if reg_end == 1:\n                state.next = t_State.IDLE\n        else:\n            raise ValueError(\"Undefined state\")\n```\n\n\u5408\u6210\u53ef\u80fd\u306a\u8a18\u8ff0\u306f\u3053\u306e\u30d1\u30bf\u30fc\u30f3\u3067\u3001\u9014\u4e2d\u306byield\u304c\u5165\u3063\u3066\u3053\u306a\u3044\u30b8\u30a7\u30cd\u30ec\u30fc\u30bf\u3092\u66f8\u304d\u304d\u3089\u306a\u3044\u3068\u3044\u3051\u306a\u3044\u3002\u3064\u307e\u308aVerilog-HDL\u3068\u540c\u3058\u3002\u3042\u304f\u307e\u3067\u30e2\u30c7\u30ea\u30f3\u30b0\u306e\u8a00\u8a9e\u3067\u3059\u306d\u3002\n", "tags": ["Python", "MyHDL", "HDL"]}