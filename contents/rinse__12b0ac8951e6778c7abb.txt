{"context": " More than 1 year has passed since last update.\u6025\u6fc0\u306b\u5bd2\u304f\u306a\u3063\u3066\u304d\u307e\u3057\u3066\u3001\u30ad\u30fc\u30dc\u30fc\u30c9\u3092\u53e9\u304f\u624b\u304c\u304b\u3058\u304b\u3093\u3067\u3044\u307e\u3059\u3002\n\u4eca\u65e5\u306fis_xxx\u30e1\u30bf\u95a2\u6570\u3092\u751f\u6210\u3059\u308b\u30e1\u30bf\u95a2\u6570\u3092\u4f5c\u3063\u3066\u307f\u307e\u3057\u305f\u3002\n\u3053\u306e\u5834\u5408\u306f\u30e1\u30bf\u30e1\u30bf\u95a2\u6570\u3068\u3044\u3046\u3053\u3068\u306b\u306a\u308b\u3093\u3067\u3057\u3087\u3046\u304b\u3002\n\u3053\u306e\u767a\u60f3\u306f\u3001\u30d8\u30c3\u30c0\u3092\u306a\u3093\u3068\u3082\u306a\u3057\u306b\u773a\u3081\u3066\u3044\u305f\u3068\u3053\u308d\u3001std::is_integral\u30e1\u30bf\u95a2\u6570\u306e\u5b9f\u88c5\u304c\ntemplate < class >\nstruct is_integral : false_type {};\ntemplate <>\nstruct is_integral < char > : true_type {};\ntemplate <>\nstruct is_integral < short > : true_type {};\ntemplate <>\nstruct is_integral < int > : true_type {};\n\n\u3068\u4e26\u3093\u3067\u3044\u305f\u3053\u3068\u306b\u3042\u308a\u307e\u3057\u305f\u3002\n\u305d\u3053\u3067\u3001\u3053\u3046\u3044\u3046\u3082\u306e\u3092\u30b5\u30af\u3063\u3068\u4f5c\u308c\u308b\u30e1\u30bf\u95a2\u6570\u3092\u8003\u3048\u3066\u307f\u305f\u306e\u3067\u3059\u304c\u3001\u6848\u5916\u30b5\u30af\u30c3\u3068\u3067\u304d\u305d\u3046\u3060\u305e\u3068\u601d\u3063\u305f\u306e\u3067\u3001\u5b9f\u969b\u306b\u30b3\u30fc\u30c9\u306b\u8d77\u3053\u3057\u3066\u307f\u305f\u306e\u3067\u3059\u3002\n\u65e9\u901f\u30b3\u30fc\u30c9\u3092\u66f8\u3044\u3066\u307f\u307e\u3059\u3002\n\u3053\u3053\u306b\u3067\u3066\u304f\u308b meta_or \u306f\u30a8\u30a4\u30ea\u30a2\u30b9\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u3044\u308d\u3044\u308d\u3002\u3067\u7d39\u4ecb\u3055\u305b\u3066\u3044\u305f\u3060\u3044\u305f\u3082\u306e\u3068\u540c\u69d8\u306e\u3082\u306e\u3067\u3057\u3066\u3001std::true_type\u304bstd::false_type\u3092\u5f15\u6570\u306b\u53d6\u3063\u3066\u305d\u306e\u8ad6\u7406\u548c\u3092\u7d99\u627f\u3059\u308b\u3068\u3044\u3046\u30e1\u30bf\u95a2\u6570\u3067\u3059\u3002std::is_same\u306f\u53d7\u3051\u53d6\u3063\u305f\u578b\u306b\u3088\u3063\u3066std::true_type\u304bstd::false_type\u3092\u7d99\u627f\u3059\u308b\u306e\u3067\u3001\u3053\u306e\u95a2\u6570\u306e\u5f15\u6570\u8db3\u308a\u3048\u308b\u3068\u3044\u3046\u3053\u3068\u3067\u3059\u306d\u3002\ntemplate < class... >\nstruct make_is_something\n{ // Ty is empty\n};\ntemplate < class Ty, class... Args >\nstruct make_is_something < Ty, Args... >\n{\n  template < class U >\n  using type = meta_or < std::is_same < U, Ty >, typename make_is_something < Args... >::template type < U > >;\n};\ntemplate < class Ty >\nstruct make_is_something < Ty >\n{\n  template < class U >\n  using type = std::is_same < U, Ty >;\n};\n\n\u30b3\u30e1\u30f3\u30c8\u3082\u3064\u3051\u3088\u3046\u304c\u306a\u3044\u307b\u3069\u7c21\u5358\u306a\u5b9f\u88c5\u306b\u306a\u308a\u307e\u3057\u305f\u3002\n\u4e00\u756a\u57fa\u672c\u7684\u306a\u3082\u306e\u306f\u5f15\u6570\u306e\u6570\u304c0\u3068\u3044\u3046\u5834\u5408\u3067\u3059\u3002\u3053\u306e\u5834\u5408\u306f\u307b\u3068\u3093\u3069\u306e\u5834\u5408substitution fault\u3092\u8d77\u3053\u3059\u3053\u3068\u306b\u306a\u308b\u3068\u601d\u3044\u307e\u3059\u3002\n\u5b9f\u969b\u306e\u7528\u4f8b\u3068\u3057\u3066\u306f\u3001\ntemplate < class Ty >\nusing is_integral =\n  typename make_is_something < \n    char, short, int, long, long long,\n    unsigned char, unsigned short, unsigned int, unsigned long, unsigned long long\n  >::template type < remove_cv_t < remove_reference_t < Ty > > >;\n\n\u4e0d\u5fc5\u8981\u3068\u3082\u601d\u3044\u307e\u3059\u304c\u3001remove_cv_t \u3068 remove_reference_t \u306e\u5b9f\u88c5\u306f\u4ee5\u4e0b\u3067\u3059\u3002\n// remove_cv\ntemplate < class T >\nusing remove_cv_t = typename std::remove_cv< T >::type;\n// remove_reference\ntemplate < class T >\nusing remove_reference_t = typename std::remove_reference< T >::type;\n\n\u3053\u308c\u3060\u3051\u3067 is_integral \u304c\u5b8c\u6210\u3057\u307e\u3059\u3002\u3053\u3063\u3061\u306e\u65b9\u304c\u30b9\u30de\u30fc\u30c8\u3067\u30ab\u30c3\u30b3\u30a4\u30a4\u3068\u601d\u3044\u307e\u3059\u3002\u3082\u3061\u308d\u3093\u3001is_xxx\u30e1\u30bf\u95a2\u6570\u306a\u3089\u4f55\u3067\u3082\u4f5c\u308c\u308b\u3068\u3044\u3046\u308f\u3051\u3067\u306f\u306a\u304f\u3001\u5358\u7d14\u4f5c\u696d\u3092\u524a\u6e1b\u3059\u308b\u7a0b\u5ea6\u306e\u5a01\u529b\u3067\u3059\u304c\u3001\u5927\u5207\u306a\u3053\u3053\u308d\u304c\u3051\u3067\u3042\u308b\u3068\u601d\u3044\u307e\u3059\u3002\n\u305d\u308c\u3067\u306f\u3001\u307f\u304b\u3093\u3067\u771f\u3063\u9ec4\u8272\u306b\u306a\u3063\u305f\u6307\u304c\u304b\u3058\u304b\u3093\u3067\u3057\u3087\u3046\u304c\u306a\u3044\u306e\u3067\u4eca\u65e5\u306f\u3053\u306e\u8fba\u3067\u3002\n\u6025\u6fc0\u306b\u5bd2\u304f\u306a\u3063\u3066\u304d\u307e\u3057\u3066\u3001\u30ad\u30fc\u30dc\u30fc\u30c9\u3092\u53e9\u304f\u624b\u304c\u304b\u3058\u304b\u3093\u3067\u3044\u307e\u3059\u3002\n\u4eca\u65e5\u306fis_xxx\u30e1\u30bf\u95a2\u6570\u3092\u751f\u6210\u3059\u308b\u30e1\u30bf\u95a2\u6570\u3092\u4f5c\u3063\u3066\u307f\u307e\u3057\u305f\u3002\n\n\u3053\u306e\u5834\u5408\u306f\u30e1\u30bf\u30e1\u30bf\u95a2\u6570\u3068\u3044\u3046\u3053\u3068\u306b\u306a\u308b\u3093\u3067\u3057\u3087\u3046\u304b\u3002\n\n\u3053\u306e\u767a\u60f3\u306f\u3001<type_traits>\u30d8\u30c3\u30c0\u3092\u306a\u3093\u3068\u3082\u306a\u3057\u306b\u773a\u3081\u3066\u3044\u305f\u3068\u3053\u308d\u3001std::is_integral\u30e1\u30bf\u95a2\u6570\u306e\u5b9f\u88c5\u304c\n\n```\ntemplate < class >\nstruct is_integral : false_type {};\ntemplate <>\nstruct is_integral < char > : true_type {};\ntemplate <>\nstruct is_integral < short > : true_type {};\ntemplate <>\nstruct is_integral < int > : true_type {};\n```\n\n\u3068\u4e26\u3093\u3067\u3044\u305f\u3053\u3068\u306b\u3042\u308a\u307e\u3057\u305f\u3002\n\u305d\u3053\u3067\u3001\u3053\u3046\u3044\u3046\u3082\u306e\u3092\u30b5\u30af\u3063\u3068\u4f5c\u308c\u308b\u30e1\u30bf\u95a2\u6570\u3092\u8003\u3048\u3066\u307f\u305f\u306e\u3067\u3059\u304c\u3001\u6848\u5916\u30b5\u30af\u30c3\u3068\u3067\u304d\u305d\u3046\u3060\u305e\u3068\u601d\u3063\u305f\u306e\u3067\u3001\u5b9f\u969b\u306b\u30b3\u30fc\u30c9\u306b\u8d77\u3053\u3057\u3066\u307f\u305f\u306e\u3067\u3059\u3002\n\n\u65e9\u901f\u30b3\u30fc\u30c9\u3092\u66f8\u3044\u3066\u307f\u307e\u3059\u3002\n\u3053\u3053\u306b\u3067\u3066\u304f\u308b `meta_or` \u306f[\u30a8\u30a4\u30ea\u30a2\u30b9\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u3044\u308d\u3044\u308d\u3002](http://qiita.com/rinse_/items/1fb1ddcc14bf8d530625)\u3067\u7d39\u4ecb\u3055\u305b\u3066\u3044\u305f\u3060\u3044\u305f\u3082\u306e\u3068\u540c\u69d8\u306e\u3082\u306e\u3067\u3057\u3066\u3001`std::true_type`\u304b`std::false_type`\u3092\u5f15\u6570\u306b\u53d6\u3063\u3066\u305d\u306e\u8ad6\u7406\u548c\u3092\u7d99\u627f\u3059\u308b\u3068\u3044\u3046\u30e1\u30bf\u95a2\u6570\u3067\u3059\u3002`std::is_same`\u306f\u53d7\u3051\u53d6\u3063\u305f\u578b\u306b\u3088\u3063\u3066`std::true_type`\u304b`std::false_type`\u3092\u7d99\u627f\u3059\u308b\u306e\u3067\u3001\u3053\u306e\u95a2\u6570\u306e\u5f15\u6570\u8db3\u308a\u3048\u308b\u3068\u3044\u3046\u3053\u3068\u3067\u3059\u306d\u3002\n\n```\ntemplate < class... >\nstruct make_is_something\n{ // Ty is empty\n};\ntemplate < class Ty, class... Args >\nstruct make_is_something < Ty, Args... >\n{\n  template < class U >\n  using type = meta_or < std::is_same < U, Ty >, typename make_is_something < Args... >::template type < U > >;\n};\ntemplate < class Ty >\nstruct make_is_something < Ty >\n{\n  template < class U >\n  using type = std::is_same < U, Ty >;\n};\n```\n\n\u30b3\u30e1\u30f3\u30c8\u3082\u3064\u3051\u3088\u3046\u304c\u306a\u3044\u307b\u3069\u7c21\u5358\u306a\u5b9f\u88c5\u306b\u306a\u308a\u307e\u3057\u305f\u3002\n\u4e00\u756a\u57fa\u672c\u7684\u306a\u3082\u306e\u306f\u5f15\u6570\u306e\u6570\u304c0\u3068\u3044\u3046\u5834\u5408\u3067\u3059\u3002\u3053\u306e\u5834\u5408\u306f\u307b\u3068\u3093\u3069\u306e\u5834\u5408substitution fault\u3092\u8d77\u3053\u3059\u3053\u3068\u306b\u306a\u308b\u3068\u601d\u3044\u307e\u3059\u3002\n\n\u5b9f\u969b\u306e\u7528\u4f8b\u3068\u3057\u3066\u306f\u3001\n\n```\ntemplate < class Ty >\nusing is_integral =\n  typename make_is_something < \n    char, short, int, long, long long,\n    unsigned char, unsigned short, unsigned int, unsigned long, unsigned long long\n  >::template type < remove_cv_t < remove_reference_t < Ty > > >;\n```\n\n\u4e0d\u5fc5\u8981\u3068\u3082\u601d\u3044\u307e\u3059\u304c\u3001`remove_cv_t` \u3068 `remove_reference_t` \u306e\u5b9f\u88c5\u306f\u4ee5\u4e0b\u3067\u3059\u3002\n\n```\n// remove_cv\ntemplate < class T >\nusing remove_cv_t = typename std::remove_cv< T >::type;\n// remove_reference\ntemplate < class T >\nusing remove_reference_t = typename std::remove_reference< T >::type;\n```\n\n\u3053\u308c\u3060\u3051\u3067 `is_integral` \u304c\u5b8c\u6210\u3057\u307e\u3059\u3002\u3053\u3063\u3061\u306e\u65b9\u304c\u30b9\u30de\u30fc\u30c8\u3067\u30ab\u30c3\u30b3\u30a4\u30a4\u3068\u601d\u3044\u307e\u3059\u3002\u3082\u3061\u308d\u3093\u3001is_xxx\u30e1\u30bf\u95a2\u6570\u306a\u3089\u4f55\u3067\u3082\u4f5c\u308c\u308b\u3068\u3044\u3046\u308f\u3051\u3067\u306f\u306a\u304f\u3001\u5358\u7d14\u4f5c\u696d\u3092\u524a\u6e1b\u3059\u308b\u7a0b\u5ea6\u306e\u5a01\u529b\u3067\u3059\u304c\u3001\u5927\u5207\u306a\u3053\u3053\u308d\u304c\u3051\u3067\u3042\u308b\u3068\u601d\u3044\u307e\u3059\u3002\n\u305d\u308c\u3067\u306f\u3001\u307f\u304b\u3093\u3067\u771f\u3063\u9ec4\u8272\u306b\u306a\u3063\u305f\u6307\u304c\u304b\u3058\u304b\u3093\u3067\u3057\u3087\u3046\u304c\u306a\u3044\u306e\u3067\u4eca\u65e5\u306f\u3053\u306e\u8fba\u3067\u3002\n", "tags": ["C++", "C++11"]}