{"context": "\n\nmac\u3067dbgsh\n(\u672c\u5f53\u306f\u5148\u9031\u306e\u6295\u7a3f\u3067\u3053\u3053\u307e\u3067\u66f8\u304f\u306f\u305a\u3060\u3063\u305f\u306e\u304c\uff0c\u529b\u5c3d\u304d\u3066\u5012\u308c\u3066\u3057\u307e\u3063\u305f\u306e\u3067\u3053\u3053\u306b\u66f8\u304d\u307e\u3059m(_ _)m)\nmac\u3067dbgsh\u306f\u52d5\u304f\u306e\u3067\u3057\u3087\u3046\u304b\uff0e\u65e9\u901f\u8a66\u3057\u3066\u307f\u307e\u3057\u3087\u3046\uff0e\n(OS: macOS Sierra 10.12.1, \u30b3\u30f3\u30d1\u30a4\u30e9: Apple LLVM version 8.0.0 (clang-800.0.42.1))\n\u666e\u901a\u306bdbgsh\u3092make\u3057\u3088\u3046\u3068\u3059\u308b\u3068mingw\u304c\u306a\u3044\u3068\u6012\u3089\u308c\u3066\u3057\u307e\u3046\u306e\u3067\uff0c\u76f4\u63a5\u30b3\u30f3\u30d1\u30a4\u30eb\u30b3\u30de\u30f3\u30c9\u3092\u6253\u3061\u8fbc\u3093\u3067\u307f\u307e\u3059\uff0e\n% cd bitvisor/tools/dbgsh\n% cc -o dbgsh dbgsh.c ../common/call_vmm.c\nfatal error: error in backend: 32-bit absolute addressing is not supported in 64-bit mode\nfatal error: error in backend: 32-bit absolute addressing is not supported in 64-bit mode\n\n...\u4f55\u3084\u3089\u6012\u3089\u308c\u3066\u3057\u307e\u3044\u307e\u3057\u305f\uff0ehomebrew\u3067\u5165\u308c\u305fgcc\u3067\u3082\u8a66\u3057\u3066\u307f\u307e\u3059\uff0e\n% gcc-6  -s -o dbgsh dbgsh.c ../common/call_vmm.c\n/var/folders/wq/nk3z_f6s6kb5chkssxy5n8sc0000gn/T//ccZ9UxUo.s:42:4: error: 32-bit absolute addressing is not supported in 64-bit mode\n2: mov $0b,%rdx; mov $1b,%rsi\n   ^\n/var/folders/wq/nk3z_f6s6kb5chkssxy5n8sc0000gn/T//ccZ9UxUo.s:42:18: error: 32-bit absolute addressing is not supported in 64-bit mode\n2: mov $0b,%rdx; mov $1b,%rsi\n                 ^\n/var/folders/wq/nk3z_f6s6kb5chkssxy5n8sc0000gn/T//ccZ9UxUo.s:96:2: error: 32-bit absolute addressing is not supported in 64-bit mode\n        mov $1f,%rsi\n        ^\n\n\u540c\u3058\u30a8\u30e9\u30fc\u3067\u3059\u304c\u3053\u3061\u3089\u3067\u306f\u89aa\u5207\u306b\u3069\u3053\u304c\u554f\u984c\u304b\u3092\u793a\u3057\u3066\u304f\u308c\u3066\u3044\u307e\u3059\uff0e\n\u3053\u306e \"32-bit absolute addressing is not supported in 64-bit mode\" \u3068\u3044\u3046\u30a8\u30e9\u30fc\u3067\u3059\u304c\uff0c\u3069\u3046\u3084\u308964bit\u306eMach-O\u3067\u306f32bit absolute\u306e\u518d\u914d\u7f6e\u304c\u3067\u304d\u306a\u3044\u3068\u3044\u3046\u4ed5\u69d8\u304c\u539f\u56e0\u306e\u3088\u3046\u3067\u3059\uff0e(\u305f\u3076\u3093ELF\u306eR_X86_64_32\u76f8\u5f53\u306e\u3082\u306e\u304c\u306a\u3044)\uff0e\n\u30a2\u30bb\u30f3\u30d6\u30e9yasm\u306e\u30bd\u30fc\u30b9\u306b\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u8a18\u8ff0\u304c\u3042\u308a\u307e\u3059\uff0e\nhttps://github.com/yasm/yasm/blob/master/modules/objfmts/macho/macho-objfmt.c#L50\n  2.2) data referencing in 64 bit mode\n       While ELF allows 32 bit absolute relocations in 64 bit mode, Mach-O\n       does not. Therefore code like\n        lea rbx,[_foo]  ;48 8d 1c 25 00 00 00 00\n        mov rcx,[_bar]  ;48 8b 0c 25 00 00 00 00\n       with a 32 bit address field cannot be relocated into an address >= 0x100000000 (OSX actually\n       uses that).\n\n       Actually, the only register where a 64 bit displacement is allowed in x86-64, is rax\n       as in the example 1).\n       A plausible workaround is either classic PIC (like in C), which is in turn\n       not implemented in this object format. The recommended was is PC relative \n       code (called RIP-relative in x86-64). So instead of the lines above, just write:\n        lea rbx,[_foo wrt rip]\n        mov rcx,[_bar wrt rip]\n\n\u305d\u3053\u3067rip\u76f8\u5bfe\u3092\u4f7f\u3046\u3088\u3046\u306b\u30b3\u30fc\u30c9\u3092\u66f8\u304d\u63db\u3048\u3066\u307f\u307e\u3059\uff0e\ndiff -r 76db0ae4260b tools/common/call_vmm.c\n--- a/tools/common/call_vmm.c   Mon Sep 12 20:01:54 2016 +0900\n+++ b/tools/common/call_vmm.c   Sat Dec 10 02:41:50 2016 +0900\n@@ -78,7 +78,7 @@\n        intptr_t tmp;\n\n        p = data;\n-       asm volatile (\"mov $1f,%1\\n\"\n+       asm volatile (\"lea 1f(%%rip),%1\\n\"\n                      \"jmp *%4\\n\"\n                      \"1:\"\n                      : \"=a\" (p->ret), \"=&S\" (tmp)\n\ndiff -r 76db0ae4260b tools/common/call_vmm.h\n--- a/tools/common/call_vmm.h   Mon Sep 12 20:01:54 2016 +0900\n+++ b/tools/common/call_vmm.h   Sat Dec 10 02:42:14 2016 +0900\n@@ -7,7 +7,7 @@\n                      \"   .org 0b+10; .string \\\"\" name \"\\\"\\n\" \\\n                      \"1: vmcall; jmp *%1; .org 1b+5; vmmcall; jmp *%1;\" \\\n                      \"   .org 1b+10; .string \\\"\" name \"\\\"\\n\" \\\n-                     \"2: mov $0b,%0; mov $1b,%1\" \\\n+                     \"2: lea 0b(%%rip),%0; lea 1b(%%rip),%1\" \\\n                      : \"=r\" (call_vmm__addr0), \"=S\" (call_vmm__addr1)); \\\n        call_vmm_get_function (call_vmm__addr0, call_vmm__addr1, \\\n                               5, 10, (ret)); \\\n\n% cc -o dbgsh dbgsh.c ../common/call_vmm.c\n\n\u554f\u984c\u306a\u304f\u30b3\u30f3\u30d1\u30a4\u30eb\u304c\u5b8c\u4e86\u3057\u307e\u3057\u305f\uff0e\u65e9\u901f\u8a66\u3057\u3066\u307f\u307e\u3057\u3087\u3046\uff0e\n% ./dbgsh\n> log\nStarting BitVisor...\nCopyright (c) 2007, 2008 University of Tsukuba\nAll rights reserved.\nACPI DMAR found.\nFACS address 0x8AD1C000\nModule not found.\nProcessor 0 (BSP)\n..................................................                                                  oooooooooooooooooooooooooooooooooooooooooooooooooo\nUsing VMX.\nProcessor 0 2400020992 Hz (Invariant TSC)\nLoading drivers.\nAES/AES-XTS Encryption Engine initialized (AES=openssl)\nCopyright (c) 1998-2002 The OpenSSL Project.  All rights reserved.\nGeneric ATA/ATAPI para pass-through driver 0.4 registered\nGeneric AHCI para pass-through driver registered\nGeneric RAID para pass-through driver registered\nGeneric IEEE1394 para pass-through driver 0.1 registered\nBroadcom NetXtreme Gigabit Ethernet Driver registered\nVPN for Intel PRO/100 registered\nIntel PRO/1000 driver registered\nPCI device concealer registered\nPCI device monitor registered\nGeneric EHCI para pass-through driver 0.9 registered\nGeneric EHCI para pass-through driver 0.9 registered\nGeneric UHCI para pass-through driver 1.0 registered\nIntel Corporation Ethernet Controller 10 Gigabit X540 Driver registered\nPCI: finding devices...\nPCI: 23 devices found\nMCFG [0] 0000:00-9B (E0000000,9C00000)\nStarting a virtual machine.\nProcessor 1 (AP)\nProcessor 2 (AP)\nProcessor 3 (AP)\nProcessor 1 2400035856 Hz (Invariant TSC)\nProcessor 3 2400032256 Hz (Invariant TSC)\nProcessor 2 2400033120 Hz (Invariant TSC)\n\n\u3072\u3068\u307e\u305a\u7121\u4e8b\u52d5\u3044\u3066\u3044\u308b\u3088\u3046\u3067\u3059\uff3c(^^)\uff0f\n\u3061\u306a\u307f\u306b\uff0cCALL_VMM_GET_FUNCTION\u304c\u4f55\u3092\u3057\u3066\u3044\u308b\u304b\u306f\uff0c\u4ee5\u4e0b\u306b\u89e3\u8aac\u304c\u3042\u308a\u307e\u3059\uff0e\nhttp://qiita.com/hdk_2/items/c8c47ac91ab59b75549c#%E9%AB%98%E3%83%AC%E3%83%99%E3%83%ABapi%E5%AE%9F%E8%A3%85\n\ndbgsh\u306b\u6a5f\u80fd\u3092\u8ffd\u52a0\n\u3053\u308c\u3060\u3051\u3060\u3068\u5473\u6c17\u304c\u306a\u3044\u306e\u3067\uff0cdbgsh\u306b\u7c21\u5358\u306a\u6a5f\u80fd\u3092\u8ffd\u52a0\u3057\u3066\u307f\u307e\u3057\u3087\u3046\uff0e\nVMM\u30b3\u30fc\u30eb\u3092\u8ffd\u52a0\u3059\u308b\u3088\u308a\u3082\uff0c\u5834\u5408\u306b\u3088\u3063\u3066\u306f\u6709\u7528\u306a\u3053\u3068\u304c\u3042\u308b\u304b\u3082\u3057\u308c\u307e\u305b\u3093\uff0e\ndbgsh\u306e\u5404\u7a2e\u30b3\u30de\u30f3\u30c9\uff08\u3068dbgsh\u672c\u4f53\uff09\u306f\u5168\u3066BitVisor\u306e\u30d7\u30ed\u30bb\u30b9\u3068\u3057\u3066\u5b9f\u73fe\u3055\u308c\u3066\u3044\u307e\u3059\uff0e\u30bd\u30fc\u30b9\u306fprocess/\u4ee5\u4e0b\u306b\u3042\u308a\u307e\u3059\uff0e\n\u7c21\u5358\u306a\u30b3\u30de\u30f3\u30c9\u3092\u8ffd\u52a0\u3057\u3066\u307f\u307e\u3059\uff0eprocess/myprocess.c \u3068\u3057\u3066\u4ee5\u4e0b\u306e\u30d5\u30a1\u30a4\u30eb\u3092\u4f5c\u6210\u3057\u307e\u3059\uff0e\n#include <lib_lineinput.h>\n#include <lib_printf.h>\n#include <lib_string.h>\n#include <lib_syscalls.h>\n\nint\n_start (int a1, int a2)\n{\n    printf(\"myprocess\\n\");\n    exitprocess (0);\n    return 0;\n}\n\n\nprocess/Makefile\u3082\u4fee\u6b63\u3057\u307e\u3059\uff0e\ndiff -r cf65f2b45794 process/Makefile\n--- a/process/Makefile  Wed Apr 06 14:06:39 2016 +0900\n+++ b/process/Makefile  Sun Dec 11 15:43:30 2016 +0900\n@@ -8,6 +8,7 @@\n asubdirs-1 += lib\n bins-$(CONFIG_IP) += echoctl\n bins-$(CONFIG_PCI_MONITOR) += monitor\n+bins-1 += myprocess\n\n debug-objs = debug.o\n help-objs = help.o\n@@ -27,3 +28,5 @@\n vpn-libs = vpn/lib/$(outa) crypto/$(outa)\n echoctl-objs = echoctl.o\n monitor-objs = monitor.o\n+myprocess-objs = myprocess.o\n\n\u3053\u308c\u3067\u30b3\u30f3\u30d1\u30a4\u30eb\u3057\u3066BitVisor\u3092\u8d77\u52d5\u3059\u308c\u3070\uff0cdbgsh\u304b\u3089myprocess\u30b3\u30de\u30f3\u30c9\u304c\u4f7f\u3048\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3059\uff0e\uff08dbgsh\u3067help\u3057\u305f\u3068\u304d\u306b\u4f5c\u6210\u3057\u305f\u30b3\u30de\u30f3\u30c9\u306e\u60c5\u5831\u3092\u8868\u793a\u3055\u305b\u305f\u3044\u5834\u5408\u306f\uff0cprocess/help.c\u3092\u7de8\u96c6\u3057\u307e\u3059\uff09\n% ./dbgsh\n> myprocess\nmyprocess\n>\n\n(\u305f\u3060\"myprocess\"\u3068print\u3057\u3066\u7d42\u4e86\u3057\u307e\u3059)\uff0e\n\u30d7\u30ed\u30bb\u30b9\u306fBitVisor\u306e\u4fdd\u8b77\u30c9\u30e1\u30a4\u30f3\u4e0a\u3067\u52d5\u4f5c\u3057\u307e\u3059\uff0e\n\u30d7\u30ed\u30bb\u30b9\u306e\u30a8\u30f3\u30c8\u30ea\u30dd\u30a4\u30f3\u30c8\u306f_start()\u95a2\u6570\u306b\u306a\u308a\u307e\u3059\uff0e_start()\u306f\u5f15\u6570\u30922\u3064\u53d7\u3051\u53d6\u308a\u307e\u3059\u304c\uff0c\u3053\u308c\u3089\u306f\u901a\u5e38\u4f7f\u7528\u3057\u307e\u305b\u3093\uff08\u5185\u90e8\u7684\u306b\u30d7\u30ed\u30bb\u30b9\u306e\u8d77\u52d5\u304c\u5f8c\u8ff0\u3059\u308bmsgsendint()\u30cf\u30f3\u30c9\u30e9\u306e\u547c\u3073\u51fa\u3057\u3068\u3057\u3066\u5b9f\u73fe\u3055\u308c\u3066\u3044\u308b\u305f\u3081\u5f15\u6570\u304c\u3042\u308a\u307e\u3059\uff09\uff0e\ndbgsh\u3067\u5b9f\u884c\u3057\u305f\u30d7\u30ed\u30bb\u30b9\u5185\u3067print\u3057\u305f\u5834\u5408\uff0c\u7d50\u679c\u306flog\u306b\u306f\u51fa\u529b\u3055\u308c\u305a\uff0cdbgsh\u306e\u65b9\u306b\u51fa\u529b\u3055\u308c\u307e\u3059\uff0e\n\u30d7\u30ed\u30bb\u30b9\u5185\u3067\u5229\u7528\u3067\u304d\u308b\u30e9\u30a4\u30d6\u30e9\u30ea\u95a2\u6570\u304cprocess/lib\u4ee5\u4e0b\u306b\u5b58\u5728\u3057\u307e\u3059\uff0e\n\u3055\u3066\uff0c\u3053\u306e\u3088\u3046\u306b\u3057\u3066\u30d7\u30ed\u30bb\u30b9\u304c\u4f5c\u6210\u3067\u304d\u307e\u3059\u304c\uff0c\u3053\u308c\u3060\u3051\u3060\u3068BitVisor\u672c\u4f53\u3068\u3084\u308a\u3068\u308a\u3067\u304d\u306a\u3044\u306e\u3067\u3042\u307e\u308a\u5b09\u3057\u304f\u3042\u308a\u307e\u305b\u3093\uff0eBitVisor\u672c\u4f53\u3084\u4ed6\u306e\u30d7\u30ed\u30bb\u30b9\u3068\u306e\u30c7\u30fc\u30bf\u306e\u3084\u308a\u3068\u308a\u306f\u30e1\u30c3\u30bb\u30fc\u30b8\u3067\u304a\u3053\u306a\u3044\u307e\u3059\uff0e\n\u57fa\u672c\u7684\u306a\u30e1\u30c3\u30bb\u30fc\u30b8\u306e\u4f7f\u3044\u65b9\u306f\uff0c\n\n\u53d7\u4fe1\u5074: msgregister(name, func) \u3067\u30e1\u30c3\u30bb\u30fc\u30b8\u540d\u3068\u5bfe\u5fdc\u3059\u308b\u30b3\u30fc\u30eb\u30d0\u30c3\u30af\u95a2\u6570\u3092\u8ffd\u52a0\n\u9001\u4fe1\u5074: msgopen(name) \u3057\u305f\u5f8c msgsendint()\u3084msgsendbuf()\u3067\u30c7\u30fc\u30bf\u3092\u9001\u4fe1 (\u30b3\u30fc\u30eb\u30d0\u30c3\u30af\u95a2\u6570\u304c\u547c\u3070\u308c\u308b)\n\n\u3068\u306a\u308a\u307e\u3059\uff0c\n\u4ee5\u4e0b\u306bmsgsendint()\u3092\u4f7f\u3063\u305f\u7c21\u5358\u306a\u4f8b\u3092\u793a\u3057\u307e\u3059\uff0e\nBitVisor\u3067tty\u51fa\u529b\u3092ON\u306b\u3059\u308b\u3068\uff0clogflag\u3068\u3044\u3046\u5909\u6570\u3067putchar()\u306e\u7d50\u679c\u3092tty\u306e\u4ed6\u306blog\u306b\u51fa\u529b\u3059\u308b\u304b\u3069\u3046\u304b\u5224\u65ad\u3057\u3066\u3044\u308b\u306e\u3067\uff0c\u3053\u308c\u3092dbgsh\u304b\u3089\u5909\u66f4\u3067\u304d\u308b\u3088\u3046\u306b\u3057\u307e\u3059\uff0e\ncore/tty.c \u3092\u7de8\u96c6\u3057\u307e\u3059\uff0e\ndiff -r cf65f2b45794 core/tty.c\n--- a/core/tty.c        Wed Apr 06 14:06:39 2016 +0900\n+++ b/core/tty.c        Sun Dec 11 15:43:30 2016 +0900\n@@ -109,6 +109,39 @@\n        logflag = false;\n }\n\n+void\n+ttylog_start (void)\n+{\n+       logflag = true;\n+}\n+\n+enum ttyctl_command {\n+       TTY_CMD_LOG_START = 0,\n+       TTY_CMD_LOG_STOP = 1,\n+};\n+\n+static int\n+ttyctl_msghandler (int m, int c)\n+{\n+    printf(\"ttyctl_msghandler: %d, %d\\n\",m,c);\n+    if (m == MSG_INT){\n+        switch (c) {\n+            case TTY_CMD_LOG_START:\n+                printf(\"tty log start\\n\");\n+                ttylog_start();\n+                break;\n+            case TTY_CMD_LOG_STOP:\n+                printf(\"tty log stop\\n\");\n+                ttylog_stop();\n+                break;\n+            default:\n+                break;\n+        }\n+    }\n+    return 0;\n+}\n+\n+\n static void\n wshort (char *off, unsigned short x)\n {\n@@ -393,6 +426,7 @@\n        msgregister (\"ttyin\", ttyin_msghandler);\n        msgregister (\"ttyout\", ttyout_msghandler);\n        msgregister (\"ttylog\", ttylog_msghandler);\n+       msgregister (\"ttyctl\", ttyctl_msghandler);\n }\n\nprocess/ttyctl.c\u3068\u3057\u3066\u4ee5\u4e0b\u3092\u4f5c\u6210\u3057\u307e\u3059\uff0e(Makefile\u3082\u9069\u5b9c\u4fee\u6b63)\n#include <lib_lineinput.h>\n#include <lib_printf.h>\n#include <lib_stdlib.h>\n#include <lib_string.h>\n#include <lib_syscalls.h>\n\nint\n_start (int a1, int a2)\n{\n    char buf[100];\n    int d;\n\n    d = msgopen (\"ttyctl\");\n    if (d < 0) {\n        printf (\"ttyctl not found.\\n\");\n        exitprocess (1);\n    }\n    for (;;) {\n        printf (\"ttyctl> \");\n        lineinput (buf, 100);\n        if (!strcmp (buf, \"exit\"))\n            break;\n        if (!strcmp (buf, \"log_start\")){\n            msgsendint(d, 0);\n            continue;\n        }\n        if (!strcmp (buf, \"log_stop\")){\n            msgsendint(d, 1);\n            continue;\n        }\n        printf(\"command not found.\\n\");\n    }\n    msgclose (d);\n    exitprocess (0);\n    return 0;\n}\n\n\u5b9f\u884c\u4f8b\n% ./dbgsh\n> ttyctl\nttyctl> log_stop  // msgsendint()\u304c\u5b9f\u884c\u3055\u308c\u308b\nttyctl> exit\n\n\u3053\u306e\u3088\u3046\u306a\u611f\u3058\u3067msgsendint()\u3067\u6570\u5024\u3092\u9001\u4fe1\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\uff0e\n\u5b9f\u3092\u3044\u3046\u3068\uff0cdbgsh\u306b\u306f\u7279\u5b9a\u306e\u30e1\u30c3\u30bb\u30fc\u30b8\u306b\u5bfe\u3057\u3066msgsendint\u3059\u308b\u30b3\u30de\u30f3\u30c9sendint\u304c\u3042\u308b\u306e\u3067\uff0c\u308f\u3056\u308f\u3056ttyctl\u3092\u4f5c\u6210\u3057\u306a\u304f\u3066\u3082\u306a\u3093\u3068\u304b\u306a\u308a\u307e\u3059\uff0e\n% ./dbgsh\n> sendint\nsendint> ttyctl 1   // d = msgopen(\"ttyctl\"); msgsendint(d, 1); \u3068\u540c\u3058 \n\n\u3053\u308c\u3092\u4f7f\u3048\u3070\u7c21\u5358\u306b\u767b\u9332\u3057\u305fBitVisor\u5185\u306e\u95a2\u6570\u3092\u547c\u3073\u51fa\u3059\u3053\u3068\u304c\u3067\u304d\u307e\u3059\uff0e\n\u30d0\u30c3\u30d5\u30a1\u3092\u9001\u4fe1\u3057\u305f\u3044\u5834\u5408\u306fmsgsendbuf()\u304c\u4f7f\u3048\u307e\u3059\uff0e\nprocess/{recvexample,sendexample}.c \u306bmsgsendbuf\u3092\u4f7f\u3063\u305f\u4f8b\u304c\u3042\u308a\u307e\u3059\uff0e\n% ./dbgsh\n> recvexample\nrecvex registered -1\n> sendexample\nsendexample> h\ns data : send\nq : quit\nsendexample> s hoge\nsending buf 0x3fffef8c len 0x6 recvbuf 0x3fffef40 len 0x20\n***recvexample start***\nrecvbuf 0x2fffff8c recvlen 0x6\nsendbuf 0x2fffef40 sendlen 0x20\nrecvbuf: 0x73 0x20 0x68 0x6f 0x67 0x65\nsendbuf: 0x74 0x21 0x69 0x70 0x68 0x66 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01\n***recvexample end***\nreceived: 0x74 0x21 0x69 0x70 0x68 0x66 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00\nsendexample>\n\n## mac\u3067dbgsh\n(\u672c\u5f53\u306f\u5148\u9031\u306e\u6295\u7a3f\u3067\u3053\u3053\u307e\u3067\u66f8\u304f\u306f\u305a\u3060\u3063\u305f\u306e\u304c\uff0c\u529b\u5c3d\u304d\u3066\u5012\u308c\u3066\u3057\u307e\u3063\u305f\u306e\u3067\u3053\u3053\u306b\u66f8\u304d\u307e\u3059m(_ _)m)\n\nmac\u3067dbgsh\u306f\u52d5\u304f\u306e\u3067\u3057\u3087\u3046\u304b\uff0e\u65e9\u901f\u8a66\u3057\u3066\u307f\u307e\u3057\u3087\u3046\uff0e\n(OS: macOS Sierra 10.12.1, \u30b3\u30f3\u30d1\u30a4\u30e9: Apple LLVM version 8.0.0 (clang-800.0.42.1))\n\n\u666e\u901a\u306bdbgsh\u3092make\u3057\u3088\u3046\u3068\u3059\u308b\u3068mingw\u304c\u306a\u3044\u3068\u6012\u3089\u308c\u3066\u3057\u307e\u3046\u306e\u3067\uff0c\u76f4\u63a5\u30b3\u30f3\u30d1\u30a4\u30eb\u30b3\u30de\u30f3\u30c9\u3092\u6253\u3061\u8fbc\u3093\u3067\u307f\u307e\u3059\uff0e\n\n```sh\n% cd bitvisor/tools/dbgsh\n% cc -o dbgsh dbgsh.c ../common/call_vmm.c\nfatal error: error in backend: 32-bit absolute addressing is not supported in 64-bit mode\nfatal error: error in backend: 32-bit absolute addressing is not supported in 64-bit mode\n```\n\n...\u4f55\u3084\u3089\u6012\u3089\u308c\u3066\u3057\u307e\u3044\u307e\u3057\u305f\uff0ehomebrew\u3067\u5165\u308c\u305fgcc\u3067\u3082\u8a66\u3057\u3066\u307f\u307e\u3059\uff0e\n\n```sh\n% gcc-6  -s -o dbgsh dbgsh.c ../common/call_vmm.c\n/var/folders/wq/nk3z_f6s6kb5chkssxy5n8sc0000gn/T//ccZ9UxUo.s:42:4: error: 32-bit absolute addressing is not supported in 64-bit mode\n2: mov $0b,%rdx; mov $1b,%rsi\n   ^\n/var/folders/wq/nk3z_f6s6kb5chkssxy5n8sc0000gn/T//ccZ9UxUo.s:42:18: error: 32-bit absolute addressing is not supported in 64-bit mode\n2: mov $0b,%rdx; mov $1b,%rsi\n                 ^\n/var/folders/wq/nk3z_f6s6kb5chkssxy5n8sc0000gn/T//ccZ9UxUo.s:96:2: error: 32-bit absolute addressing is not supported in 64-bit mode\n        mov $1f,%rsi\n        ^\n```\n\n\u540c\u3058\u30a8\u30e9\u30fc\u3067\u3059\u304c\u3053\u3061\u3089\u3067\u306f\u89aa\u5207\u306b\u3069\u3053\u304c\u554f\u984c\u304b\u3092\u793a\u3057\u3066\u304f\u308c\u3066\u3044\u307e\u3059\uff0e\n\n\n\u3053\u306e \"32-bit absolute addressing is not supported in 64-bit mode\" \u3068\u3044\u3046\u30a8\u30e9\u30fc\u3067\u3059\u304c\uff0c\u3069\u3046\u3084\u308964bit\u306eMach-O\u3067\u306f32bit absolute\u306e\u518d\u914d\u7f6e\u304c\u3067\u304d\u306a\u3044\u3068\u3044\u3046\u4ed5\u69d8\u304c\u539f\u56e0\u306e\u3088\u3046\u3067\u3059\uff0e(\u305f\u3076\u3093ELF\u306e`R_X86_64_32`\u76f8\u5f53\u306e\u3082\u306e\u304c\u306a\u3044)\uff0e\n\n\n\u30a2\u30bb\u30f3\u30d6\u30e9yasm\u306e\u30bd\u30fc\u30b9\u306b\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u8a18\u8ff0\u304c\u3042\u308a\u307e\u3059\uff0e\n\nhttps://github.com/yasm/yasm/blob/master/modules/objfmts/macho/macho-objfmt.c#L50\n\n```\n  2.2) data referencing in 64 bit mode\n       While ELF allows 32 bit absolute relocations in 64 bit mode, Mach-O\n       does not. Therefore code like\n        lea rbx,[_foo]  ;48 8d 1c 25 00 00 00 00\n        mov rcx,[_bar]  ;48 8b 0c 25 00 00 00 00\n       with a 32 bit address field cannot be relocated into an address >= 0x100000000 (OSX actually\n       uses that).\n\n       Actually, the only register where a 64 bit displacement is allowed in x86-64, is rax\n       as in the example 1).\n       A plausible workaround is either classic PIC (like in C), which is in turn\n       not implemented in this object format. The recommended was is PC relative \n       code (called RIP-relative in x86-64). So instead of the lines above, just write:\n        lea rbx,[_foo wrt rip]\n        mov rcx,[_bar wrt rip]\n```\n\n\n\u305d\u3053\u3067rip\u76f8\u5bfe\u3092\u4f7f\u3046\u3088\u3046\u306b\u30b3\u30fc\u30c9\u3092\u66f8\u304d\u63db\u3048\u3066\u307f\u307e\u3059\uff0e\n\n```diff\ndiff -r 76db0ae4260b tools/common/call_vmm.c\n--- a/tools/common/call_vmm.c   Mon Sep 12 20:01:54 2016 +0900\n+++ b/tools/common/call_vmm.c   Sat Dec 10 02:41:50 2016 +0900\n@@ -78,7 +78,7 @@\n        intptr_t tmp;\n\n        p = data;\n-       asm volatile (\"mov $1f,%1\\n\"\n+       asm volatile (\"lea 1f(%%rip),%1\\n\"\n                      \"jmp *%4\\n\"\n                      \"1:\"\n                      : \"=a\" (p->ret), \"=&S\" (tmp)\n\ndiff -r 76db0ae4260b tools/common/call_vmm.h\n--- a/tools/common/call_vmm.h   Mon Sep 12 20:01:54 2016 +0900\n+++ b/tools/common/call_vmm.h   Sat Dec 10 02:42:14 2016 +0900\n@@ -7,7 +7,7 @@\n                      \"   .org 0b+10; .string \\\"\" name \"\\\"\\n\" \\\n                      \"1: vmcall; jmp *%1; .org 1b+5; vmmcall; jmp *%1;\" \\\n                      \"   .org 1b+10; .string \\\"\" name \"\\\"\\n\" \\\n-                     \"2: mov $0b,%0; mov $1b,%1\" \\\n+                     \"2: lea 0b(%%rip),%0; lea 1b(%%rip),%1\" \\\n                      : \"=r\" (call_vmm__addr0), \"=S\" (call_vmm__addr1)); \\\n        call_vmm_get_function (call_vmm__addr0, call_vmm__addr1, \\\n                               5, 10, (ret)); \\\n```\n\n\n```\n% cc -o dbgsh dbgsh.c ../common/call_vmm.c\n```\n\n\u554f\u984c\u306a\u304f\u30b3\u30f3\u30d1\u30a4\u30eb\u304c\u5b8c\u4e86\u3057\u307e\u3057\u305f\uff0e\u65e9\u901f\u8a66\u3057\u3066\u307f\u307e\u3057\u3087\u3046\uff0e\n\n\n```\n% ./dbgsh\n> log\nStarting BitVisor...\nCopyright (c) 2007, 2008 University of Tsukuba\nAll rights reserved.\nACPI DMAR found.\nFACS address 0x8AD1C000\nModule not found.\nProcessor 0 (BSP)\n..................................................                                                  oooooooooooooooooooooooooooooooooooooooooooooooooo\nUsing VMX.\nProcessor 0 2400020992 Hz (Invariant TSC)\nLoading drivers.\nAES/AES-XTS Encryption Engine initialized (AES=openssl)\nCopyright (c) 1998-2002 The OpenSSL Project.  All rights reserved.\nGeneric ATA/ATAPI para pass-through driver 0.4 registered\nGeneric AHCI para pass-through driver registered\nGeneric RAID para pass-through driver registered\nGeneric IEEE1394 para pass-through driver 0.1 registered\nBroadcom NetXtreme Gigabit Ethernet Driver registered\nVPN for Intel PRO/100 registered\nIntel PRO/1000 driver registered\nPCI device concealer registered\nPCI device monitor registered\nGeneric EHCI para pass-through driver 0.9 registered\nGeneric EHCI para pass-through driver 0.9 registered\nGeneric UHCI para pass-through driver 1.0 registered\nIntel Corporation Ethernet Controller 10 Gigabit X540 Driver registered\nPCI: finding devices...\nPCI: 23 devices found\nMCFG [0] 0000:00-9B (E0000000,9C00000)\nStarting a virtual machine.\nProcessor 1 (AP)\nProcessor 2 (AP)\nProcessor 3 (AP)\nProcessor 1 2400035856 Hz (Invariant TSC)\nProcessor 3 2400032256 Hz (Invariant TSC)\nProcessor 2 2400033120 Hz (Invariant TSC)\n```\n\n\u3072\u3068\u307e\u305a\u7121\u4e8b\u52d5\u3044\u3066\u3044\u308b\u3088\u3046\u3067\u3059\uff3c(^^)\uff0f\n\n\n\u3061\u306a\u307f\u306b\uff0c`CALL_VMM_GET_FUNCTION`\u304c\u4f55\u3092\u3057\u3066\u3044\u308b\u304b\u306f\uff0c\u4ee5\u4e0b\u306b\u89e3\u8aac\u304c\u3042\u308a\u307e\u3059\uff0e\nhttp://qiita.com/hdk_2/items/c8c47ac91ab59b75549c#%E9%AB%98%E3%83%AC%E3%83%99%E3%83%ABapi%E5%AE%9F%E8%A3%85\n\n\n## dbgsh\u306b\u6a5f\u80fd\u3092\u8ffd\u52a0\n\u3053\u308c\u3060\u3051\u3060\u3068\u5473\u6c17\u304c\u306a\u3044\u306e\u3067\uff0cdbgsh\u306b\u7c21\u5358\u306a\u6a5f\u80fd\u3092\u8ffd\u52a0\u3057\u3066\u307f\u307e\u3057\u3087\u3046\uff0e\nVMM\u30b3\u30fc\u30eb\u3092\u8ffd\u52a0\u3059\u308b\u3088\u308a\u3082\uff0c\u5834\u5408\u306b\u3088\u3063\u3066\u306f\u6709\u7528\u306a\u3053\u3068\u304c\u3042\u308b\u304b\u3082\u3057\u308c\u307e\u305b\u3093\uff0e\n\n\ndbgsh\u306e\u5404\u7a2e\u30b3\u30de\u30f3\u30c9\uff08\u3068dbgsh\u672c\u4f53\uff09\u306f\u5168\u3066BitVisor\u306e\u30d7\u30ed\u30bb\u30b9\u3068\u3057\u3066\u5b9f\u73fe\u3055\u308c\u3066\u3044\u307e\u3059\uff0e\u30bd\u30fc\u30b9\u306fprocess/\u4ee5\u4e0b\u306b\u3042\u308a\u307e\u3059\uff0e\n\n\u7c21\u5358\u306a\u30b3\u30de\u30f3\u30c9\u3092\u8ffd\u52a0\u3057\u3066\u307f\u307e\u3059\uff0eprocess/myprocess.c \u3068\u3057\u3066\u4ee5\u4e0b\u306e\u30d5\u30a1\u30a4\u30eb\u3092\u4f5c\u6210\u3057\u307e\u3059\uff0e\n\n```c\n#include <lib_lineinput.h>\n#include <lib_printf.h>\n#include <lib_string.h>\n#include <lib_syscalls.h>\n\nint\n_start (int a1, int a2)\n{\n    printf(\"myprocess\\n\");\n    exitprocess (0);\n    return 0;\n}\n\n```\n\nprocess/Makefile\u3082\u4fee\u6b63\u3057\u307e\u3059\uff0e\n\n```diff\ndiff -r cf65f2b45794 process/Makefile\n--- a/process/Makefile  Wed Apr 06 14:06:39 2016 +0900\n+++ b/process/Makefile  Sun Dec 11 15:43:30 2016 +0900\n@@ -8,6 +8,7 @@\n asubdirs-1 += lib\n bins-$(CONFIG_IP) += echoctl\n bins-$(CONFIG_PCI_MONITOR) += monitor\n+bins-1 += myprocess\n\n debug-objs = debug.o\n help-objs = help.o\n@@ -27,3 +28,5 @@\n vpn-libs = vpn/lib/$(outa) crypto/$(outa)\n echoctl-objs = echoctl.o\n monitor-objs = monitor.o\n+myprocess-objs = myprocess.o\n```\n\n\u3053\u308c\u3067\u30b3\u30f3\u30d1\u30a4\u30eb\u3057\u3066BitVisor\u3092\u8d77\u52d5\u3059\u308c\u3070\uff0cdbgsh\u304b\u3089myprocess\u30b3\u30de\u30f3\u30c9\u304c\u4f7f\u3048\u308b\u3088\u3046\u306b\u306a\u308a\u307e\u3059\uff0e\uff08dbgsh\u3067help\u3057\u305f\u3068\u304d\u306b\u4f5c\u6210\u3057\u305f\u30b3\u30de\u30f3\u30c9\u306e\u60c5\u5831\u3092\u8868\u793a\u3055\u305b\u305f\u3044\u5834\u5408\u306f\uff0cprocess/help.c\u3092\u7de8\u96c6\u3057\u307e\u3059\uff09\n\n```\n% ./dbgsh\n> myprocess\nmyprocess\n>\n```\n(\u305f\u3060\"myprocess\"\u3068print\u3057\u3066\u7d42\u4e86\u3057\u307e\u3059)\uff0e\n\n\u30d7\u30ed\u30bb\u30b9\u306fBitVisor\u306e\u4fdd\u8b77\u30c9\u30e1\u30a4\u30f3\u4e0a\u3067\u52d5\u4f5c\u3057\u307e\u3059\uff0e\n\u30d7\u30ed\u30bb\u30b9\u306e\u30a8\u30f3\u30c8\u30ea\u30dd\u30a4\u30f3\u30c8\u306f`_start()`\u95a2\u6570\u306b\u306a\u308a\u307e\u3059\uff0e`_start()`\u306f\u5f15\u6570\u30922\u3064\u53d7\u3051\u53d6\u308a\u307e\u3059\u304c\uff0c\u3053\u308c\u3089\u306f\u901a\u5e38\u4f7f\u7528\u3057\u307e\u305b\u3093\uff08\u5185\u90e8\u7684\u306b\u30d7\u30ed\u30bb\u30b9\u306e\u8d77\u52d5\u304c\u5f8c\u8ff0\u3059\u308b`msgsendint()`\u30cf\u30f3\u30c9\u30e9\u306e\u547c\u3073\u51fa\u3057\u3068\u3057\u3066\u5b9f\u73fe\u3055\u308c\u3066\u3044\u308b\u305f\u3081\u5f15\u6570\u304c\u3042\u308a\u307e\u3059\uff09\uff0e\ndbgsh\u3067\u5b9f\u884c\u3057\u305f\u30d7\u30ed\u30bb\u30b9\u5185\u3067print\u3057\u305f\u5834\u5408\uff0c\u7d50\u679c\u306flog\u306b\u306f\u51fa\u529b\u3055\u308c\u305a\uff0cdbgsh\u306e\u65b9\u306b\u51fa\u529b\u3055\u308c\u307e\u3059\uff0e\n\u30d7\u30ed\u30bb\u30b9\u5185\u3067\u5229\u7528\u3067\u304d\u308b\u30e9\u30a4\u30d6\u30e9\u30ea\u95a2\u6570\u304cprocess/lib\u4ee5\u4e0b\u306b\u5b58\u5728\u3057\u307e\u3059\uff0e\n\n\n\u3055\u3066\uff0c\u3053\u306e\u3088\u3046\u306b\u3057\u3066\u30d7\u30ed\u30bb\u30b9\u304c\u4f5c\u6210\u3067\u304d\u307e\u3059\u304c\uff0c\u3053\u308c\u3060\u3051\u3060\u3068BitVisor\u672c\u4f53\u3068\u3084\u308a\u3068\u308a\u3067\u304d\u306a\u3044\u306e\u3067\u3042\u307e\u308a\u5b09\u3057\u304f\u3042\u308a\u307e\u305b\u3093\uff0eBitVisor\u672c\u4f53\u3084\u4ed6\u306e\u30d7\u30ed\u30bb\u30b9\u3068\u306e\u30c7\u30fc\u30bf\u306e\u3084\u308a\u3068\u308a\u306f\u30e1\u30c3\u30bb\u30fc\u30b8\u3067\u304a\u3053\u306a\u3044\u307e\u3059\uff0e\n\n\u57fa\u672c\u7684\u306a\u30e1\u30c3\u30bb\u30fc\u30b8\u306e\u4f7f\u3044\u65b9\u306f\uff0c\n\n- \u53d7\u4fe1\u5074: `msgregister(name, func)` \u3067\u30e1\u30c3\u30bb\u30fc\u30b8\u540d\u3068\u5bfe\u5fdc\u3059\u308b\u30b3\u30fc\u30eb\u30d0\u30c3\u30af\u95a2\u6570\u3092\u8ffd\u52a0\n- \u9001\u4fe1\u5074: `msgopen(name)` \u3057\u305f\u5f8c `msgsendint()`\u3084`msgsendbuf()`\u3067\u30c7\u30fc\u30bf\u3092\u9001\u4fe1 (\u30b3\u30fc\u30eb\u30d0\u30c3\u30af\u95a2\u6570\u304c\u547c\u3070\u308c\u308b)\n\n\u3068\u306a\u308a\u307e\u3059\uff0c\n\n\n\u4ee5\u4e0b\u306b`msgsendint()`\u3092\u4f7f\u3063\u305f\u7c21\u5358\u306a\u4f8b\u3092\u793a\u3057\u307e\u3059\uff0e\nBitVisor\u3067tty\u51fa\u529b\u3092ON\u306b\u3059\u308b\u3068\uff0c`logflag`\u3068\u3044\u3046\u5909\u6570\u3067`putchar()`\u306e\u7d50\u679c\u3092tty\u306e\u4ed6\u306blog\u306b\u51fa\u529b\u3059\u308b\u304b\u3069\u3046\u304b\u5224\u65ad\u3057\u3066\u3044\u308b\u306e\u3067\uff0c\u3053\u308c\u3092dbgsh\u304b\u3089\u5909\u66f4\u3067\u304d\u308b\u3088\u3046\u306b\u3057\u307e\u3059\uff0e\n\ncore/tty.c \u3092\u7de8\u96c6\u3057\u307e\u3059\uff0e\n\n```diff\ndiff -r cf65f2b45794 core/tty.c\n--- a/core/tty.c        Wed Apr 06 14:06:39 2016 +0900\n+++ b/core/tty.c        Sun Dec 11 15:43:30 2016 +0900\n@@ -109,6 +109,39 @@\n        logflag = false;\n }\n\n+void\n+ttylog_start (void)\n+{\n+       logflag = true;\n+}\n+\n+enum ttyctl_command {\n+       TTY_CMD_LOG_START = 0,\n+       TTY_CMD_LOG_STOP = 1,\n+};\n+\n+static int\n+ttyctl_msghandler (int m, int c)\n+{\n+    printf(\"ttyctl_msghandler: %d, %d\\n\",m,c);\n+    if (m == MSG_INT){\n+        switch (c) {\n+            case TTY_CMD_LOG_START:\n+                printf(\"tty log start\\n\");\n+                ttylog_start();\n+                break;\n+            case TTY_CMD_LOG_STOP:\n+                printf(\"tty log stop\\n\");\n+                ttylog_stop();\n+                break;\n+            default:\n+                break;\n+        }\n+    }\n+    return 0;\n+}\n+\n+\n static void\n wshort (char *off, unsigned short x)\n {\n@@ -393,6 +426,7 @@\n        msgregister (\"ttyin\", ttyin_msghandler);\n        msgregister (\"ttyout\", ttyout_msghandler);\n        msgregister (\"ttylog\", ttylog_msghandler);\n+       msgregister (\"ttyctl\", ttyctl_msghandler);\n }\n```\n\nprocess/ttyctl.c\u3068\u3057\u3066\u4ee5\u4e0b\u3092\u4f5c\u6210\u3057\u307e\u3059\uff0e(Makefile\u3082\u9069\u5b9c\u4fee\u6b63)\n\n```c\n#include <lib_lineinput.h>\n#include <lib_printf.h>\n#include <lib_stdlib.h>\n#include <lib_string.h>\n#include <lib_syscalls.h>\n\nint\n_start (int a1, int a2)\n{\n    char buf[100];\n    int d;\n\n    d = msgopen (\"ttyctl\");\n    if (d < 0) {\n        printf (\"ttyctl not found.\\n\");\n        exitprocess (1);\n    }\n    for (;;) {\n        printf (\"ttyctl> \");\n        lineinput (buf, 100);\n        if (!strcmp (buf, \"exit\"))\n            break;\n        if (!strcmp (buf, \"log_start\")){\n            msgsendint(d, 0);\n            continue;\n        }\n        if (!strcmp (buf, \"log_stop\")){\n            msgsendint(d, 1);\n            continue;\n        }\n        printf(\"command not found.\\n\");\n    }\n    msgclose (d);\n    exitprocess (0);\n    return 0;\n}\n```\n\n\u5b9f\u884c\u4f8b\n\n```\n% ./dbgsh\n> ttyctl\nttyctl> log_stop  // msgsendint()\u304c\u5b9f\u884c\u3055\u308c\u308b\nttyctl> exit\n```\n\n\u3053\u306e\u3088\u3046\u306a\u611f\u3058\u3067`msgsendint()`\u3067\u6570\u5024\u3092\u9001\u4fe1\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\uff0e\n\n\u5b9f\u3092\u3044\u3046\u3068\uff0cdbgsh\u306b\u306f\u7279\u5b9a\u306e\u30e1\u30c3\u30bb\u30fc\u30b8\u306b\u5bfe\u3057\u3066msgsendint\u3059\u308b\u30b3\u30de\u30f3\u30c9`sendint`\u304c\u3042\u308b\u306e\u3067\uff0c\u308f\u3056\u308f\u3056ttyctl\u3092\u4f5c\u6210\u3057\u306a\u304f\u3066\u3082\u306a\u3093\u3068\u304b\u306a\u308a\u307e\u3059\uff0e\n\n```\n% ./dbgsh\n> sendint\nsendint> ttyctl 1   // d = msgopen(\"ttyctl\"); msgsendint(d, 1); \u3068\u540c\u3058 \n```\n\n\u3053\u308c\u3092\u4f7f\u3048\u3070\u7c21\u5358\u306b\u767b\u9332\u3057\u305fBitVisor\u5185\u306e\u95a2\u6570\u3092\u547c\u3073\u51fa\u3059\u3053\u3068\u304c\u3067\u304d\u307e\u3059\uff0e\n\n\n\u30d0\u30c3\u30d5\u30a1\u3092\u9001\u4fe1\u3057\u305f\u3044\u5834\u5408\u306f`msgsendbuf()`\u304c\u4f7f\u3048\u307e\u3059\uff0e\nprocess/{recvexample,sendexample}.c \u306b`msgsendbuf`\u3092\u4f7f\u3063\u305f\u4f8b\u304c\u3042\u308a\u307e\u3059\uff0e\n\n```\n% ./dbgsh\n> recvexample\nrecvex registered -1\n> sendexample\nsendexample> h\ns data : send\nq : quit\nsendexample> s hoge\nsending buf 0x3fffef8c len 0x6 recvbuf 0x3fffef40 len 0x20\n***recvexample start***\nrecvbuf 0x2fffff8c recvlen 0x6\nsendbuf 0x2fffef40 sendlen 0x20\nrecvbuf: 0x73 0x20 0x68 0x6f 0x67 0x65\nsendbuf: 0x74 0x21 0x69 0x70 0x68 0x66 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01\n***recvexample end***\nreceived: 0x74 0x21 0x69 0x70 0x68 0x66 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x01 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00\nsendexample>\n```\n", "tags": ["BitVisor"]}