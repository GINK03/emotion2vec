{"context": " More than 1 year has passed since last update.(\u524d\u56de\u306e\u7d9a\u304d)\n\u672c\u8a18\u4e8b\u306f\u3001\u8003\u3048\u3066\u307f\u305f\u3089\u300cJava + Spring \u3092\u4f7f\u3063\u305f\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u306b\u304a\u3051\u308b\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u7ba1\u7406\u300d\u304c\u6b63\u3057\u304b\u3063\u305f\u304b\u3082\u3057\u308c\u306a\u3044\u3002\u3068\u3044\u3046\u306e\u3082\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u30a2\u30af\u30bb\u30b9\u306b\u95a2\u3057\u3066Spring\u3092\u5229\u7528\u3059\u308b\u524d\u63d0\u3068\u3057\u3066\u3044\u308b\u304c\u3001\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u306b\u95a2\u3057\u3066\u306fSpring\u306b\u3053\u3060\u308f\u308b\u5fc5\u8981\u306f\u306a\u3044\u304b\u3089\u3067\u3042\u308b\u3002\n\u305d\u3046\u3044\u3046\u308f\u3051\u3067\u3001CSV\u3067\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u3092\u6e96\u5099\u3059\u308b\u305f\u3081\u306bopencsv\u3092\u4f7f\u3063\u3066\u307f\u308b\u3002\n\nopencsv \u3092\u4f7f\u3046\n\u306a\u305c\u3001opencsv\u3092\u4f7f\u3046\u304b\u3068\u3044\u3046\u3068\n\nCSV \u304b\u3089 Bean \u306b\u5909\u63db\u3059\u308b\u30af\u30e9\u30b9\u304c\u7528\u610f\u3055\u308c\u3066\u3044\u308b\n\u4f5c\u308a\u304c\u30b7\u30f3\u30d7\u30eb\u3067\u7406\u89e3\u3057\u3084\u3059\u3044\n\u30bd\u30fc\u30b9\u304c\u516c\u958b\u3055\u308c\u3066\u3044\u308b\u305f\u3081\u3001\u81ea\u5206\u306e\u90fd\u5408\u306e\u826f\u3044\u3088\u3046\u306b\u5909\u66f4\u304c\u3067\u304d\u308b(\u3053\u3053\u3067\u3082\u30b7\u30f3\u30d7\u30eb\u3067\u3042\u308b\u3053\u3068\u306b\u5229\u70b9\u304c\u3042\u308b)\n\n\u307e\u305a\u306f\u3001build.gradle \u3067\u3042\u308b\u3002\u3053\u308c\u306f testCompile \"net.sf.opencsv:opencsv:2.+\"\n\u3092 dependencies \u306b\u4ed8\u3051\u8db3\u305b\u3070\u3044\u3044\u3060\u3051\u3067\u3042\u308b\u3002\n\nbuild.gradle\napply plugin: 'java'\n\nrepositories {\n    mavenCentral()\n}\n\next {\n    springVersion = '4.0.5.RELEASE'\n}\n\ndependencies {\n    compile \"org.springframework:spring-beans:$springVersion\"\n    compile \"org.springframework:spring-context:$springVersion\"\n    compile \"org.springframework:spring-context-support:$springVersion\"\n    compile \"org.springframework:spring-tx:$springVersion\"\n    compile \"org.springframework:spring-jdbc:$springVersion\"\n\n\n    compile 'org.apache.derby:derby:10.+'\n\n    testCompile 'junit:junit:4.+'\n    testCompile \"org.springframework:spring-test:$springVersion\"\n\n    compile \"org.projectlombok:lombok:1.12.+\"\n\n    testCompile \"net.sf.opencsv:opencsv:2.+\"\n}\n\n\n\u7d9a\u3044\u3066\u3001CSV\u304b\u3089Bean\u3092\u4f5c\u6210\u3059\u308b\u305f\u3081\u306e\u30e6\u30fc\u30c6\u30a3\u30ea\u30c6\u30a3\u30af\u30e9\u30b9\u3092\u7528\u610f\u3059\u308b\u3002\n\nsrc/test/java/jp/sample/TestDataUtils.java\npackage jp.sample;\n\nimport java.io.Reader;\nimport java.util.List;\n\nimport au.com.bytecode.opencsv.bean.HeaderColumnNameMappingStrategy;\nimport au.com.bytecode.opencsv.bean.CsvToBean;\n\npublic class TestDataUtils {\n    public static <T> List<T> getBeans(Class<T> clazz, Reader reader) {\n        HeaderColumnNameMappingStrategy<T> strategy = new HeaderColumnNameMappingStrategy<T>();\n        strategy.setType(clazz);\n\n        CsvToBean<T> csv = new CsvToBean<T>();\n        return csv.parse(strategy, reader);\n    }\n}\n\n\n\u3044\u304f\u3064\u304b\u30dd\u30a4\u30f3\u30c8\u304c\u3042\u308b\u3002\n\nopencsv \u306e\u4f7f\u3044\u65b9\u3068\u3057\u3066\u3001HeaderColumnNameMappingStrategy\u306b\u3088\u308a\u3001CSV\u30d5\u30a1\u30a4\u30eb\u306e1\u884c\u76ee\u306e\u30d8\u30c3\u30c0\u304b\u3089\u9805\u76ee\u540d\u3092\u53d6\u5f97\u3057Bean\u3078\u306e\u30de\u30c3\u30d7\u306b\u5229\u7528\u3059\u308b\u3002CsvToBean#parse \u3067CSV\u3092\u8aad\u307f\u8fbc\u3093\u3067 Bean \u306eList\u3092\u8fd4\u3059\u3002\n\u6c4e\u7528\u306e\u30e1\u30bd\u30c3\u30c9\u3068\u3059\u308b\u305f\u3081\u306bBean\u306e\u578b\u306f\u7dcf\u79f0\u578bT\u3067\u5b9a\u7fa9\u3059\u308b\u3002\u3042\u307e\u308a\u898b\u306a\u3044\u304c\u3001static\u30e1\u30bd\u30c3\u30c9\u306e\u7dcf\u79f0\u578b\u3067\u5b9a\u7fa9\u3057\u3066\u307f\u305f\u3002\u547c\u3073\u51fa\u3057\u65b9\u306f TestDataUtils.getBeans(Sample.class, reader); \u306a\u3069\u3068\u306a\u308b\u3002\u7dcf\u79f0\u578b\u306b\u95a2\u3057\u3066\u8a73\u3057\u304f\u306f\u3053\u3053\u3092\u898b\u308b\u3068\u826f\u3044\u3002\n\n\u3053\u306eTestDataUtils\u3092\u4f7f\u3046\u3068\u3001\u30c6\u30b9\u30c8\u30af\u30e9\u30b9\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u306a\u308b\u3002\n\nsrc/test/java/jp/sample/JavaDBSample4Test.java\npackage jp.sample;\n\nimport java.io.InputStreamReader;\nimport java.io.IOException;\nimport java.io.LineNumberReader;\nimport java.io.Reader;\nimport java.io.StringReader;\nimport java.sql.Connection;\nimport java.util.List;\nimport java.util.Map;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.core.io.ClassPathResource;\nimport org.springframework.core.io.Resource;\nimport org.springframework.jdbc.core.JdbcTemplate;\nimport org.springframework.jdbc.core.namedparam.BeanPropertySqlParameterSource;\nimport org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate;\nimport org.springframework.jdbc.datasource.DataSourceUtils;\nimport org.springframework.jdbc.datasource.init.ResourceDatabasePopulator;\nimport org.springframework.jdbc.datasource.init.ScriptUtils;\nimport org.springframework.test.context.junit4.SpringJUnit4ClassRunner;\nimport org.springframework.test.context.ContextConfiguration;\n\nimport org.junit.runner.RunWith;\nimport org.junit.*;\n\nimport static org.junit.Assert.*;\nimport static org.hamcrest.CoreMatchers.*;\n\n@RunWith(SpringJUnit4ClassRunner.class)\n@ContextConfiguration(locations=\"classpath:applicationContext.xml\")\npublic class JavaDBSample4Test {\n\n    @Autowired\n    JdbcTemplate jdbcTemplate;\n\n    @Autowired\n    JavaDBSample4 obj;\n\n    @Before\n    public void setUp() {\n        executeScript(\"/create.sql\");\n    }\n\n    @Test\n    public void test() throws IOException {\n        String s = \"\"+\n            \"id,str\" + \"\\n\" +\n            \"5,e\" + \"\\n\";\n\n        List<Sample> samplesIn = TestDataUtils.getBeans(Sample.class, new StringReader(s));\n\n        insert(\"/insert.sql\", samplesIn);\n\n        List<Sample> samplesOut = obj.select();\n\n        assertThat(samplesOut.size(), is(1));\n        assertThat(samplesOut.get(0).getId(), is(5));\n        assertThat(samplesOut.get(0).getStr(), is(\"e\"));\n        assertEquals(samplesIn, samplesOut);\n    }\n\n    public void insert(String file, List<Sample> samples) throws IOException {\n        Resource resource = new ClassPathResource(file, getClass());\n        String script;\n        try (\n            LineNumberReader reader = new LineNumberReader(new InputStreamReader(resource.getInputStream()));\n        ) {\n\n            script = ScriptUtils.readScript(reader, \"--\", \";\");\n        }\n\n        NamedParameterJdbcTemplate npjt = new NamedParameterJdbcTemplate(jdbcTemplate);\n\n        for (Sample sample: samples) {\n            npjt.update(script, new BeanPropertySqlParameterSource(sample));\n        }\n    }\n\n    public void executeScript(String file) {\n        Resource resource = new ClassPathResource(file, getClass());\n\n        ResourceDatabasePopulator rdp = new ResourceDatabasePopulator();\n        rdp.addScript(resource);\n        rdp.setSqlScriptEncoding(\"UTF-8\");\n        rdp.setIgnoreFailedDrops(true);\n        rdp.setContinueOnError(false);\n\n        Connection conn = DataSourceUtils.getConnection(jdbcTemplate.getDataSource());\n        rdp.populate(conn);\n    }\n}\n\n\n\u524d\u56de\u304b\u3089\u306e\u5dee\u5206\u306f\u4ee5\u4e0b\u3002\n\ncsv\u30d5\u30a1\u30a4\u30eb\u306f\u307e\u3060\u6e96\u5099\u6bb5\u968e\u3068\u3057\u3001String\u3067\u30bd\u30fc\u30b9\u306b\u57cb\u3081\u8fbc\u3093\u3060\u3002\n\u5165\u529b\u30c7\u30fc\u30bf samplesIn \u3092\u5148\u307b\u3069\u7528\u610f\u3057\u305f TestDataUtils.getBeans()\u3067\u53d6\u5f97\u3059\u308b\u3088\u3046\u306b\u3057\u305f\ninsert() \u30e1\u30bd\u30c3\u30c9\u306f\u3001Sample \u304b\u3089 List<Sample> \u3092\u53d7\u3051\u53d6\u308b\u3088\u3046\u306b\u5909\u66f4\u3057\u305f\u3002\n\u5165\u529b\u30c7\u30fc\u30bf samplesIn \u3068 samplesOut \u304c\u4e00\u81f4\u3059\u308b\u3053\u3068\u3092\u78ba\u8a8d\u3059\u308b\u305f\u3081\u306b\u3001assertEquals() \u3092\u4f7f\u3063\u3066\u307f\u305f\u3002\u3053\u308c\u306f LomBok \u306b\u3088\u308aBean\u306bequals()\u30e1\u30bd\u30c3\u30c9\u304c\u518d\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u308b\u305f\u3081\u306b\u3046\u307e\u304f\u884c\u304f\u3002\n\ngradle check \u3057\u3066\u52d5\u304f\u3053\u3068\u3092\u78ba\u8a8d\u3057\u305f\u3089\u5c11\u3057\u6574\u7406\u3057\u3088\u3046\u3002\n\n\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u3092create.sql \u3084 insert.sql \u3068\u540c\u3058\u3068\u3053\u308d\u3067\u7ba1\u7406\u3059\u308b\nexecuteScript(), insert() \u306a\u3069\u306e\u30e1\u30bd\u30c3\u30c9\u306f TestDataUtils\u306b\u62bc\u3057\u8fbc\u3080\n\n\u307e\u305a\u306f\u30011 \u3092\u8a66\u3059\u3002\n\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u3067\u3042\u308bCSV\u30d5\u30a1\u30a4\u30eb\u3092\u30af\u30e9\u30b9\u30d1\u30b9\u304b\u3089\u53d6\u5f97\u3057\u3088\u3046\u3002\n\u3053\u308c\u306f\u3001executeScript()\u30e1\u30bd\u30c3\u30c9\u3068\u540c\u3058\u65b9\u6cd5\u3067\u3001spring\u306eClassPathResource\u3092\u4f7f\u3048\u3070\u826f\u3055\u305d\u3046\u3060\u3002\n    public static <T> List<T> getBeans(Class<T> clazz, String csvPath) throws IOException {\n        Resource resource = new ClassPathResource(csvPath, clazz);\n\n        HeaderColumnNameMappingStrategy<T> strategy = new HeaderColumnNameMappingStrategy<T>();\n        strategy.setType(clazz);\n\n        CsvToBean<T> csv = new CsvToBean<T>();\n        try (Reader reader = new InputStreamReader(resource.getInputStream())) {\n            return csv.parse(strategy, reader);\n        }\n    }\n\nClassPathResource() \u306e\u7b2c2\u5f15\u6570\u306b\u6e21\u3059\u30af\u30e9\u30b9\u30af\u30e9\u30b9\u306fBean\u306e\u30af\u30e9\u30b9\u3092\u6d41\u7528\u3057\u305f\u3002\u30a4\u30de\u30a4\u30c1\u306a\u6c17\u306f\u3059\u308b\u304c\u3068\u308a\u3042\u3048\u305a\u52d5\u304f\u306e\u3067\u826f\u3057\u3068\u3059\u308b\u3002(\u5f8c\u3067\u3059\u3050\u306b\u4fee\u6b63\u3059\u308b)\nCSV\u30d5\u30a1\u30a4\u30eb\u3092\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u7528\u610f\u3057\u3001\u547c\u3073\u51fa\u3057\u5074\u3067\u305d\u306e\u30d1\u30b9\u3092\u6307\u5b9a\u3059\u308c\u3070\u826f\u3044\u3002(\u30bd\u30fc\u30b9\u5168\u4f53\u306f\u6700\u5f8c\u306b\u793a\u305d\u3046)\n\nsrc/test/resources/sample.csv\nID,STR\n5,e\n\n\n\u6b21\u306b\u30012.\u306einsert() \u304a\u3088\u3073 executeScript()\u30e1\u30bd\u30c3\u30c9\u3092TestDataUtils\u30af\u30e9\u30b9\u306b\u79fb\u52d5\u3059\u308b\u3002\n\nsrc/test/java/jp/sample/TestDataUtils.java\npackage jp.sample;\n\nimport java.io.InputStreamReader;\nimport java.io.IOException;\nimport java.io.LineNumberReader;\nimport java.io.Reader;\nimport java.sql.Connection;\nimport java.util.List;\n\nimport javax.sql.DataSource;\n\nimport org.springframework.core.io.ClassPathResource;\nimport org.springframework.core.io.Resource;\nimport org.springframework.jdbc.core.namedparam.BeanPropertySqlParameterSource;\nimport org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate;\nimport org.springframework.jdbc.datasource.DataSourceUtils;\nimport org.springframework.jdbc.datasource.init.ResourceDatabasePopulator;\nimport org.springframework.jdbc.datasource.init.ScriptUtils;\n\nimport au.com.bytecode.opencsv.bean.HeaderColumnNameMappingStrategy;\nimport au.com.bytecode.opencsv.bean.CsvToBean;\n\npublic class TestDataUtils {\n    DataSource dataSource;\n\n    public TestDataUtils(DataSource dataSource) {\n        this.dataSource = dataSource;\n    }\n\n    public <T> List<T> getBeans(Class<T> clazz, String csvPath) throws IOException {\n        Resource resource = new ClassPathResource(csvPath, getClass());\n\n        HeaderColumnNameMappingStrategy<T> strategy = new HeaderColumnNameMappingStrategy<T>();\n        strategy.setType(clazz);\n\n        CsvToBean<T> csv = new CsvToBean<T>();\n        try (Reader reader = new InputStreamReader(resource.getInputStream())) {\n            return csv.parse(strategy, reader);\n        }\n    }\n\n    public void insert(String file, List<Sample> samples) throws IOException {\n        Resource resource = new ClassPathResource(file, getClass());\n        String script;\n        try (\n            LineNumberReader reader = new LineNumberReader(new InputStreamReader(resource.getInputStream()));\n        ) {\n\n            script = ScriptUtils.readScript(reader, \"--\", \";\");\n        }\n\n        NamedParameterJdbcTemplate npjt = new NamedParameterJdbcTemplate(dataSource);\n\n        for (Sample sample: samples) {\n            npjt.update(script, new BeanPropertySqlParameterSource(sample));\n        }\n    }\n\n    public void executeScript(String file) {\n        Resource resource = new ClassPathResource(file, getClass());\n\n        ResourceDatabasePopulator rdp = new ResourceDatabasePopulator();\n        rdp.addScript(resource);\n        rdp.setSqlScriptEncoding(\"UTF-8\");\n        rdp.setIgnoreFailedDrops(true);\n        rdp.setContinueOnError(false);\n\n        Connection conn = DataSourceUtils.getConnection(dataSource);\n        rdp.populate(conn);\n    }\n}\n\n\n\u79fb\u52d5\u306b\u4f34\u3044\u3001\u4ee5\u4e0b\u306e\u5909\u66f4\u3082\u884c\u3063\u305f\u3002\n\ninsert(), executeScript() \u3092\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u30e1\u30bd\u30c3\u30c9\u306b\u3057\u3066\u3001dataSource\u3084\u30af\u30e9\u30b9\u30ed\u30fc\u30c0\u3092\u5171\u901a\u5316\u3057\u305f\u3002\u305d\u3053\u3067\u3001getBeans() \u3082\u540c\u3058\u3088\u3046\u306b\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u30e1\u30bd\u30c3\u30c9\u306b\u3059\u308b\u3002\n\u5f15\u6570\u3092JdbcTemplate \u3067\u306f\u306a\u304fDataSource\u306b\u5909\u66f4\u3059\u308b\u3002\u305d\u306e\u65b9\u304c\u6c4e\u7528\u6027\u304c\u9ad8\u307e\u308b\u304b\u306a\u3068\u601d\u3063\u305f\u304b\u3089\u3067\u3042\u308b\u3002\n\n\u96d1\u591a\u306a\u3082\u306e\u3092\u307b\u3068\u3093\u3069TestDataUtils\u306b\u62bc\u3057\u8fbc\u3093\u3060\u306e\u3067\u3001\u30c6\u30b9\u30c8\u672c\u4f53\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u30b7\u30f3\u30d7\u30eb\u306b\u3067\u304d\u305f\u3002\n\nsrc/test/java/jp/sample/JavaDBSample4Test.java\npackage jp.sample;\n\nimport java.io.IOException;\nimport java.io.Reader;\nimport java.util.List;\n\nimport javax.sql.DataSource;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.test.context.junit4.SpringJUnit4ClassRunner;\nimport org.springframework.test.context.ContextConfiguration;\n\nimport org.junit.runner.RunWith;\nimport org.junit.*;\n\nimport static org.junit.Assert.*;\nimport static org.hamcrest.CoreMatchers.*;\n\n@RunWith(SpringJUnit4ClassRunner.class)\n@ContextConfiguration(locations=\"classpath:applicationContext.xml\")\npublic class JavaDBSample4Test {\n\n    @Autowired\n    DataSource dataSource;\n\n    @Autowired\n    JavaDBSample4 obj;\n\n    TestDataUtils td;\n\n    @Before\n    public void setUp() {\n        td = new TestDataUtils(dataSource);\n        td.executeScript(\"/create.sql\");\n    }\n\n    @Test\n    public void test() throws IOException {\n        List<Sample> samplesIn = td.getBeans(Sample.class, \"/sample.csv\");\n\n        td.insert(\"/insert.sql\", samplesIn);\n\n        List<Sample> samplesOut = obj.select();\n\n        assertThat(samplesOut.size(), is(1));\n        assertThat(samplesOut.get(0).getId(), is(5));\n        assertThat(samplesOut.get(0).getStr(), is(\"e\"));\n        assertEquals(samplesIn, samplesOut);\n    }\n}\n\n\n\u3060\u3044\u3076\u5f62\u304c\u3067\u304d\u3066\u304d\u305f\u3002\u306a\u3093\u3068\u306a\u304fTestDataUtils\u306a\u3093\u3066\u30af\u30e9\u30b9\u3082\u4f5c\u6210\u3067\u304d\u3066\u3001\u3044\u3088\u3044\u3088\u52b9\u7387\u5316\u3068\u3044\u3046\u70b9\u306b\u30af\u30ed\u30fc\u30ba\u30a2\u30c3\u30d7\u3067\u304d\u305d\u3046\u306a\u6c17\u304c\u3057\u3066\u304d\u305f\u3002\n\u4eca\u5f8c\u3001\u89e3\u6c7a\u3057\u305f\u3044\u70b9\u306f\u4ee5\u4e0b\u3067\u3042\u308b\u3002\n\n\u30c6\u30fc\u30d6\u30eb\u5b9a\u7fa9(create.sql), \u30c7\u30fc\u30bf\u6295\u5165(insert.sql), \u30c6\u30b9\u30c8\u30c7\u30fc\u30bf(sample.csv) \u306f\u91cd\u8907\u304c\u3042\u308b\u3002\u30c6\u30fc\u30d6\u30eb\u9805\u76ee\u5b9a\u7fa9\u3092\u5909\u66f4\u3059\u308c\u3070\u3001\u3053\u308c\u3089\u306f\u9023\u52d5\u3057\u3066\u5909\u66f4\u3057\u306a\u3051\u308c\u3070\u306a\u3089\u306a\u3044\u3002\n\u30c6\u30b9\u30c8\u30e1\u30bd\u30c3\u30c9\u306b\u5bfe\u5fdc\u3059\u308b\u30c6\u30b9\u30c8\u30d1\u30bf\u30fc\u30f3\u306e\u5bfe\u5fdc\u4ed8\u3051\u306b\u30eb\u30fc\u30eb\u3092\u8a2d\u3051\u305f\u3044\u3002\n\n\u6b21\u56de\u4ee5\u964d\u3001\u305d\u3093\u306a\u52b9\u7387\u5316\u306b\u3064\u3044\u3066\u691c\u8a0e\u3057\u3066\u3044\u304d\u305f\u3044\u3002\n(\u524d\u56de\u306e\u7d9a\u304d)\n\n\u672c\u8a18\u4e8b\u306f\u3001\u8003\u3048\u3066\u307f\u305f\u3089\u300cJava + Spring \u3092\u4f7f\u3063\u305f\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u306b\u304a\u3051\u308b\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u7ba1\u7406\u300d\u304c\u6b63\u3057\u304b\u3063\u305f\u304b\u3082\u3057\u308c\u306a\u3044\u3002\u3068\u3044\u3046\u306e\u3082\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u30a2\u30af\u30bb\u30b9\u306b\u95a2\u3057\u3066Spring\u3092\u5229\u7528\u3059\u308b\u524d\u63d0\u3068\u3057\u3066\u3044\u308b\u304c\u3001\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u306b\u95a2\u3057\u3066\u306fSpring\u306b\u3053\u3060\u308f\u308b\u5fc5\u8981\u306f\u306a\u3044\u304b\u3089\u3067\u3042\u308b\u3002\n\n\u305d\u3046\u3044\u3046\u308f\u3051\u3067\u3001CSV\u3067\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u3092\u6e96\u5099\u3059\u308b\u305f\u3081\u306b[opencsv](http://opencsv.sourceforge.net/)\u3092\u4f7f\u3063\u3066\u307f\u308b\u3002\n\nopencsv \u3092\u4f7f\u3046\n-------------\n\n\u306a\u305c\u3001opencsv\u3092\u4f7f\u3046\u304b\u3068\u3044\u3046\u3068\n\n* CSV \u304b\u3089 Bean \u306b\u5909\u63db\u3059\u308b\u30af\u30e9\u30b9\u304c\u7528\u610f\u3055\u308c\u3066\u3044\u308b\n* \u4f5c\u308a\u304c\u30b7\u30f3\u30d7\u30eb\u3067\u7406\u89e3\u3057\u3084\u3059\u3044\n* \u30bd\u30fc\u30b9\u304c\u516c\u958b\u3055\u308c\u3066\u3044\u308b\u305f\u3081\u3001\u81ea\u5206\u306e\u90fd\u5408\u306e\u826f\u3044\u3088\u3046\u306b\u5909\u66f4\u304c\u3067\u304d\u308b(\u3053\u3053\u3067\u3082\u30b7\u30f3\u30d7\u30eb\u3067\u3042\u308b\u3053\u3068\u306b\u5229\u70b9\u304c\u3042\u308b)\n\n\u307e\u305a\u306f\u3001build.gradle \u3067\u3042\u308b\u3002\u3053\u308c\u306f `testCompile \"net.sf.opencsv:opencsv:2.+\"`\n\u3092 dependencies \u306b\u4ed8\u3051\u8db3\u305b\u3070\u3044\u3044\u3060\u3051\u3067\u3042\u308b\u3002\n\n```groovy:build.gradle\napply plugin: 'java'\n\nrepositories {\n    mavenCentral()\n}\n\next {\n    springVersion = '4.0.5.RELEASE'\n}\n\ndependencies {\n    compile \"org.springframework:spring-beans:$springVersion\"\n    compile \"org.springframework:spring-context:$springVersion\"\n    compile \"org.springframework:spring-context-support:$springVersion\"\n    compile \"org.springframework:spring-tx:$springVersion\"\n    compile \"org.springframework:spring-jdbc:$springVersion\"\n\n\n    compile 'org.apache.derby:derby:10.+'\n\n    testCompile 'junit:junit:4.+'\n    testCompile \"org.springframework:spring-test:$springVersion\"\n\n    compile \"org.projectlombok:lombok:1.12.+\"\n\n    testCompile \"net.sf.opencsv:opencsv:2.+\"\n}\n```\n\n\u7d9a\u3044\u3066\u3001CSV\u304b\u3089Bean\u3092\u4f5c\u6210\u3059\u308b\u305f\u3081\u306e\u30e6\u30fc\u30c6\u30a3\u30ea\u30c6\u30a3\u30af\u30e9\u30b9\u3092\u7528\u610f\u3059\u308b\u3002\n\n```java:src/test/java/jp/sample/TestDataUtils.java\npackage jp.sample;\n\nimport java.io.Reader;\nimport java.util.List;\n\nimport au.com.bytecode.opencsv.bean.HeaderColumnNameMappingStrategy;\nimport au.com.bytecode.opencsv.bean.CsvToBean;\n\npublic class TestDataUtils {\n    public static <T> List<T> getBeans(Class<T> clazz, Reader reader) {\n        HeaderColumnNameMappingStrategy<T> strategy = new HeaderColumnNameMappingStrategy<T>();\n        strategy.setType(clazz);\n\n        CsvToBean<T> csv = new CsvToBean<T>();\n        return csv.parse(strategy, reader);\n    }\n}\n```\n\n\u3044\u304f\u3064\u304b\u30dd\u30a4\u30f3\u30c8\u304c\u3042\u308b\u3002\n\n* opencsv \u306e\u4f7f\u3044\u65b9\u3068\u3057\u3066\u3001HeaderColumnNameMappingStrategy\u306b\u3088\u308a\u3001CSV\u30d5\u30a1\u30a4\u30eb\u306e1\u884c\u76ee\u306e\u30d8\u30c3\u30c0\u304b\u3089\u9805\u76ee\u540d\u3092\u53d6\u5f97\u3057Bean\u3078\u306e\u30de\u30c3\u30d7\u306b\u5229\u7528\u3059\u308b\u3002CsvToBean#parse \u3067CSV\u3092\u8aad\u307f\u8fbc\u3093\u3067 Bean \u306eList\u3092\u8fd4\u3059\u3002\n* \u6c4e\u7528\u306e\u30e1\u30bd\u30c3\u30c9\u3068\u3059\u308b\u305f\u3081\u306bBean\u306e\u578b\u306f\u7dcf\u79f0\u578bT\u3067\u5b9a\u7fa9\u3059\u308b\u3002\u3042\u307e\u308a\u898b\u306a\u3044\u304c\u3001static\u30e1\u30bd\u30c3\u30c9\u306e\u7dcf\u79f0\u578b\u3067\u5b9a\u7fa9\u3057\u3066\u307f\u305f\u3002\u547c\u3073\u51fa\u3057\u65b9\u306f `TestDataUtils.getBeans(Sample.class, reader);` \u306a\u3069\u3068\u306a\u308b\u3002\u7dcf\u79f0\u578b\u306b\u95a2\u3057\u3066\u8a73\u3057\u304f\u306f[\u3053\u3053](http://www.ne.jp/asahi/hishidama/home/tech/java/generics.html)\u3092\u898b\u308b\u3068\u826f\u3044\u3002\n\n\u3053\u306eTestDataUtils\u3092\u4f7f\u3046\u3068\u3001\u30c6\u30b9\u30c8\u30af\u30e9\u30b9\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u306a\u308b\u3002\n\n```java:src/test/java/jp/sample/JavaDBSample4Test.java\npackage jp.sample;\n\nimport java.io.InputStreamReader;\nimport java.io.IOException;\nimport java.io.LineNumberReader;\nimport java.io.Reader;\nimport java.io.StringReader;\nimport java.sql.Connection;\nimport java.util.List;\nimport java.util.Map;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.core.io.ClassPathResource;\nimport org.springframework.core.io.Resource;\nimport org.springframework.jdbc.core.JdbcTemplate;\nimport org.springframework.jdbc.core.namedparam.BeanPropertySqlParameterSource;\nimport org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate;\nimport org.springframework.jdbc.datasource.DataSourceUtils;\nimport org.springframework.jdbc.datasource.init.ResourceDatabasePopulator;\nimport org.springframework.jdbc.datasource.init.ScriptUtils;\nimport org.springframework.test.context.junit4.SpringJUnit4ClassRunner;\nimport org.springframework.test.context.ContextConfiguration;\n\nimport org.junit.runner.RunWith;\nimport org.junit.*;\n\nimport static org.junit.Assert.*;\nimport static org.hamcrest.CoreMatchers.*;\n\n@RunWith(SpringJUnit4ClassRunner.class)\n@ContextConfiguration(locations=\"classpath:applicationContext.xml\")\npublic class JavaDBSample4Test {\n\n    @Autowired\n    JdbcTemplate jdbcTemplate;\n\n    @Autowired\n    JavaDBSample4 obj;\n\n    @Before\n    public void setUp() {\n        executeScript(\"/create.sql\");\n    }\n\n    @Test\n    public void test() throws IOException {\n        String s = \"\"+\n            \"id,str\" + \"\\n\" +\n            \"5,e\" + \"\\n\";\n\n        List<Sample> samplesIn = TestDataUtils.getBeans(Sample.class, new StringReader(s));\n\n        insert(\"/insert.sql\", samplesIn);\n\n        List<Sample> samplesOut = obj.select();\n\n        assertThat(samplesOut.size(), is(1));\n        assertThat(samplesOut.get(0).getId(), is(5));\n        assertThat(samplesOut.get(0).getStr(), is(\"e\"));\n        assertEquals(samplesIn, samplesOut);\n    }\n\n    public void insert(String file, List<Sample> samples) throws IOException {\n        Resource resource = new ClassPathResource(file, getClass());\n        String script;\n        try (\n            LineNumberReader reader = new LineNumberReader(new InputStreamReader(resource.getInputStream()));\n        ) {\n\n            script = ScriptUtils.readScript(reader, \"--\", \";\");\n        }\n\n        NamedParameterJdbcTemplate npjt = new NamedParameterJdbcTemplate(jdbcTemplate);\n\n        for (Sample sample: samples) {\n            npjt.update(script, new BeanPropertySqlParameterSource(sample));\n        }\n    }\n\n    public void executeScript(String file) {\n        Resource resource = new ClassPathResource(file, getClass());\n\n        ResourceDatabasePopulator rdp = new ResourceDatabasePopulator();\n        rdp.addScript(resource);\n        rdp.setSqlScriptEncoding(\"UTF-8\");\n        rdp.setIgnoreFailedDrops(true);\n        rdp.setContinueOnError(false);\n\n        Connection conn = DataSourceUtils.getConnection(jdbcTemplate.getDataSource());\n        rdp.populate(conn);\n    }\n}\n```\n\n\u524d\u56de\u304b\u3089\u306e\u5dee\u5206\u306f\u4ee5\u4e0b\u3002\n\n* csv\u30d5\u30a1\u30a4\u30eb\u306f\u307e\u3060\u6e96\u5099\u6bb5\u968e\u3068\u3057\u3001String\u3067\u30bd\u30fc\u30b9\u306b\u57cb\u3081\u8fbc\u3093\u3060\u3002\n* \u5165\u529b\u30c7\u30fc\u30bf samplesIn \u3092\u5148\u307b\u3069\u7528\u610f\u3057\u305f `TestDataUtils.getBeans()`\u3067\u53d6\u5f97\u3059\u308b\u3088\u3046\u306b\u3057\u305f\n* insert() \u30e1\u30bd\u30c3\u30c9\u306f\u3001Sample \u304b\u3089 List\\<Sample\\> \u3092\u53d7\u3051\u53d6\u308b\u3088\u3046\u306b\u5909\u66f4\u3057\u305f\u3002\n* \u5165\u529b\u30c7\u30fc\u30bf samplesIn \u3068 samplesOut \u304c\u4e00\u81f4\u3059\u308b\u3053\u3068\u3092\u78ba\u8a8d\u3059\u308b\u305f\u3081\u306b\u3001assertEquals() \u3092\u4f7f\u3063\u3066\u307f\u305f\u3002\u3053\u308c\u306f LomBok \u306b\u3088\u308aBean\u306bequals()\u30e1\u30bd\u30c3\u30c9\u304c\u518d\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u308b\u305f\u3081\u306b\u3046\u307e\u304f\u884c\u304f\u3002\n\n`gradle check` \u3057\u3066\u52d5\u304f\u3053\u3068\u3092\u78ba\u8a8d\u3057\u305f\u3089\u5c11\u3057\u6574\u7406\u3057\u3088\u3046\u3002\n\n1. \u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u3092create.sql \u3084 insert.sql \u3068\u540c\u3058\u3068\u3053\u308d\u3067\u7ba1\u7406\u3059\u308b\n2. executeScript(), insert() \u306a\u3069\u306e\u30e1\u30bd\u30c3\u30c9\u306f TestDataUtils\u306b\u62bc\u3057\u8fbc\u3080\n\n\u307e\u305a\u306f\u30011 \u3092\u8a66\u3059\u3002\n\n\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u3067\u3042\u308bCSV\u30d5\u30a1\u30a4\u30eb\u3092\u30af\u30e9\u30b9\u30d1\u30b9\u304b\u3089\u53d6\u5f97\u3057\u3088\u3046\u3002\n\u3053\u308c\u306f\u3001executeScript()\u30e1\u30bd\u30c3\u30c9\u3068\u540c\u3058\u65b9\u6cd5\u3067\u3001spring\u306eClassPathResource\u3092\u4f7f\u3048\u3070\u826f\u3055\u305d\u3046\u3060\u3002\n\n```java\n    public static <T> List<T> getBeans(Class<T> clazz, String csvPath) throws IOException {\n        Resource resource = new ClassPathResource(csvPath, clazz);\n\n        HeaderColumnNameMappingStrategy<T> strategy = new HeaderColumnNameMappingStrategy<T>();\n        strategy.setType(clazz);\n\n        CsvToBean<T> csv = new CsvToBean<T>();\n        try (Reader reader = new InputStreamReader(resource.getInputStream())) {\n            return csv.parse(strategy, reader);\n        }\n    }\n```\n\nClassPathResource() \u306e\u7b2c2\u5f15\u6570\u306b\u6e21\u3059\u30af\u30e9\u30b9\u30af\u30e9\u30b9\u306fBean\u306e\u30af\u30e9\u30b9\u3092\u6d41\u7528\u3057\u305f\u3002\u30a4\u30de\u30a4\u30c1\u306a\u6c17\u306f\u3059\u308b\u304c\u3068\u308a\u3042\u3048\u305a\u52d5\u304f\u306e\u3067\u826f\u3057\u3068\u3059\u308b\u3002(\u5f8c\u3067\u3059\u3050\u306b\u4fee\u6b63\u3059\u308b)\n\nCSV\u30d5\u30a1\u30a4\u30eb\u3092\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u7528\u610f\u3057\u3001\u547c\u3073\u51fa\u3057\u5074\u3067\u305d\u306e\u30d1\u30b9\u3092\u6307\u5b9a\u3059\u308c\u3070\u826f\u3044\u3002(\u30bd\u30fc\u30b9\u5168\u4f53\u306f\u6700\u5f8c\u306b\u793a\u305d\u3046)\n\n```src/test/resources/sample.csv \nID,STR\n5,e\n```\n\n\u6b21\u306b\u30012.\u306einsert() \u304a\u3088\u3073 executeScript()\u30e1\u30bd\u30c3\u30c9\u3092TestDataUtils\u30af\u30e9\u30b9\u306b\u79fb\u52d5\u3059\u308b\u3002\n\n```java:src/test/java/jp/sample/TestDataUtils.java \npackage jp.sample;\n\nimport java.io.InputStreamReader;\nimport java.io.IOException;\nimport java.io.LineNumberReader;\nimport java.io.Reader;\nimport java.sql.Connection;\nimport java.util.List;\n\nimport javax.sql.DataSource;\n\nimport org.springframework.core.io.ClassPathResource;\nimport org.springframework.core.io.Resource;\nimport org.springframework.jdbc.core.namedparam.BeanPropertySqlParameterSource;\nimport org.springframework.jdbc.core.namedparam.NamedParameterJdbcTemplate;\nimport org.springframework.jdbc.datasource.DataSourceUtils;\nimport org.springframework.jdbc.datasource.init.ResourceDatabasePopulator;\nimport org.springframework.jdbc.datasource.init.ScriptUtils;\n\nimport au.com.bytecode.opencsv.bean.HeaderColumnNameMappingStrategy;\nimport au.com.bytecode.opencsv.bean.CsvToBean;\n\npublic class TestDataUtils {\n    DataSource dataSource;\n\n    public TestDataUtils(DataSource dataSource) {\n        this.dataSource = dataSource;\n    }\n\n    public <T> List<T> getBeans(Class<T> clazz, String csvPath) throws IOException {\n        Resource resource = new ClassPathResource(csvPath, getClass());\n\n        HeaderColumnNameMappingStrategy<T> strategy = new HeaderColumnNameMappingStrategy<T>();\n        strategy.setType(clazz);\n\n        CsvToBean<T> csv = new CsvToBean<T>();\n        try (Reader reader = new InputStreamReader(resource.getInputStream())) {\n            return csv.parse(strategy, reader);\n        }\n    }\n\n    public void insert(String file, List<Sample> samples) throws IOException {\n        Resource resource = new ClassPathResource(file, getClass());\n        String script;\n        try (\n            LineNumberReader reader = new LineNumberReader(new InputStreamReader(resource.getInputStream()));\n        ) {\n\n            script = ScriptUtils.readScript(reader, \"--\", \";\");\n        }\n\n        NamedParameterJdbcTemplate npjt = new NamedParameterJdbcTemplate(dataSource);\n\n        for (Sample sample: samples) {\n            npjt.update(script, new BeanPropertySqlParameterSource(sample));\n        }\n    }\n\n    public void executeScript(String file) {\n        Resource resource = new ClassPathResource(file, getClass());\n\n        ResourceDatabasePopulator rdp = new ResourceDatabasePopulator();\n        rdp.addScript(resource);\n        rdp.setSqlScriptEncoding(\"UTF-8\");\n        rdp.setIgnoreFailedDrops(true);\n        rdp.setContinueOnError(false);\n\n        Connection conn = DataSourceUtils.getConnection(dataSource);\n        rdp.populate(conn);\n    }\n}\n```\n\n\u79fb\u52d5\u306b\u4f34\u3044\u3001\u4ee5\u4e0b\u306e\u5909\u66f4\u3082\u884c\u3063\u305f\u3002\n\n* insert(), executeScript() \u3092\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u30e1\u30bd\u30c3\u30c9\u306b\u3057\u3066\u3001dataSource\u3084\u30af\u30e9\u30b9\u30ed\u30fc\u30c0\u3092\u5171\u901a\u5316\u3057\u305f\u3002\u305d\u3053\u3067\u3001getBeans() \u3082\u540c\u3058\u3088\u3046\u306b\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u30e1\u30bd\u30c3\u30c9\u306b\u3059\u308b\u3002\n* \u5f15\u6570\u3092JdbcTemplate \u3067\u306f\u306a\u304fDataSource\u306b\u5909\u66f4\u3059\u308b\u3002\u305d\u306e\u65b9\u304c\u6c4e\u7528\u6027\u304c\u9ad8\u307e\u308b\u304b\u306a\u3068\u601d\u3063\u305f\u304b\u3089\u3067\u3042\u308b\u3002\n\n\u96d1\u591a\u306a\u3082\u306e\u3092\u307b\u3068\u3093\u3069TestDataUtils\u306b\u62bc\u3057\u8fbc\u3093\u3060\u306e\u3067\u3001\u30c6\u30b9\u30c8\u672c\u4f53\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u30b7\u30f3\u30d7\u30eb\u306b\u3067\u304d\u305f\u3002\n\n```java:src/test/java/jp/sample/JavaDBSample4Test.java\npackage jp.sample;\n\nimport java.io.IOException;\nimport java.io.Reader;\nimport java.util.List;\n\nimport javax.sql.DataSource;\n\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.test.context.junit4.SpringJUnit4ClassRunner;\nimport org.springframework.test.context.ContextConfiguration;\n\nimport org.junit.runner.RunWith;\nimport org.junit.*;\n\nimport static org.junit.Assert.*;\nimport static org.hamcrest.CoreMatchers.*;\n\n@RunWith(SpringJUnit4ClassRunner.class)\n@ContextConfiguration(locations=\"classpath:applicationContext.xml\")\npublic class JavaDBSample4Test {\n\n    @Autowired\n    DataSource dataSource;\n\n    @Autowired\n    JavaDBSample4 obj;\n\n    TestDataUtils td;\n\n    @Before\n    public void setUp() {\n        td = new TestDataUtils(dataSource);\n        td.executeScript(\"/create.sql\");\n    }\n\n    @Test\n    public void test() throws IOException {\n        List<Sample> samplesIn = td.getBeans(Sample.class, \"/sample.csv\");\n\n        td.insert(\"/insert.sql\", samplesIn);\n\n        List<Sample> samplesOut = obj.select();\n\n        assertThat(samplesOut.size(), is(1));\n        assertThat(samplesOut.get(0).getId(), is(5));\n        assertThat(samplesOut.get(0).getStr(), is(\"e\"));\n        assertEquals(samplesIn, samplesOut);\n    }\n}\n```\n\n\u3060\u3044\u3076\u5f62\u304c\u3067\u304d\u3066\u304d\u305f\u3002\u306a\u3093\u3068\u306a\u304fTestDataUtils\u306a\u3093\u3066\u30af\u30e9\u30b9\u3082\u4f5c\u6210\u3067\u304d\u3066\u3001\u3044\u3088\u3044\u3088\u52b9\u7387\u5316\u3068\u3044\u3046\u70b9\u306b\u30af\u30ed\u30fc\u30ba\u30a2\u30c3\u30d7\u3067\u304d\u305d\u3046\u306a\u6c17\u304c\u3057\u3066\u304d\u305f\u3002\n\n\u4eca\u5f8c\u3001\u89e3\u6c7a\u3057\u305f\u3044\u70b9\u306f\u4ee5\u4e0b\u3067\u3042\u308b\u3002\n\n* \u30c6\u30fc\u30d6\u30eb\u5b9a\u7fa9(create.sql), \u30c7\u30fc\u30bf\u6295\u5165(insert.sql), \u30c6\u30b9\u30c8\u30c7\u30fc\u30bf(sample.csv) \u306f\u91cd\u8907\u304c\u3042\u308b\u3002\u30c6\u30fc\u30d6\u30eb\u9805\u76ee\u5b9a\u7fa9\u3092\u5909\u66f4\u3059\u308c\u3070\u3001\u3053\u308c\u3089\u306f\u9023\u52d5\u3057\u3066\u5909\u66f4\u3057\u306a\u3051\u308c\u3070\u306a\u3089\u306a\u3044\u3002\n* \u30c6\u30b9\u30c8\u30e1\u30bd\u30c3\u30c9\u306b\u5bfe\u5fdc\u3059\u308b\u30c6\u30b9\u30c8\u30d1\u30bf\u30fc\u30f3\u306e\u5bfe\u5fdc\u4ed8\u3051\u306b\u30eb\u30fc\u30eb\u3092\u8a2d\u3051\u305f\u3044\u3002\n\n\u6b21\u56de\u4ee5\u964d\u3001\u305d\u3093\u306a\u52b9\u7387\u5316\u306b\u3064\u3044\u3066\u691c\u8a0e\u3057\u3066\u3044\u304d\u305f\u3044\u3002\n", "tags": ["Java", "spring"]}