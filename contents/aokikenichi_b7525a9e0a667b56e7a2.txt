{"context": "\u300eR\u306b\u3088\u308b\u30c7\u30fc\u30bf\u30b5\u30a4\u30a8\u30f3\u30b9-\u30c7\u30fc\u30bf\u89e3\u6790\u306e\u57fa\u790e\u304b\u3089\u6700\u65b0\u624b\u6cd5\u307e\u3067\u300f\n\n\u306b\u3042\u308b\u5404\u5b9f\u884c\u3092R\u306ecaret\u30d1\u30c3\u30b1\u30fc\u30b8\u3067\u8a66\u3057\u307e\u3059\u3002\n\n\u5bfe\u8c61\u5916\n\ncaret\u306f\u6559\u5e2b\u3042\u308a\u5b66\u7fd2\u306e\u5224\u5225\u3068\u4e88\u6e2c\u304c\u30e1\u30a4\u30f3\u306a\u306e\u3067\u3001\u6559\u5e2b\u306a\u3057\u5b66\u7fd2\u3084\u751f\u5b58\u5206\u6790\u3001\u6642\u7cfb\u5217\u30e2\u30c7\u30eb\u306a\u3069\u306f\u5bfe\u8c61\u5916\u3002\n\u5bfe\u8c61\u5916\uff1a\u7b2c1-6\u7ae0\u3001\u7b2c11-12\u7ae0\u3001\u7b2c17\u7ae0\n\n\n\u5168\u4f53\u306e\u30e1\u30e2\n\nlm\u306a\u3069\u901a\u5e38\u306e\u95a2\u6570\u3067\u4f5c\u6210\u3057\u305f\u30e2\u30c7\u30eb\u306b\u5bfe\u5fdc\u3059\u308bcaret\u4f7f\u7528\u306e\u30e2\u30c7\u30eb\u306f $finalModel \u3068\u306a\u308b\u3002\n\u305f\u3060\u4e00\u90e8\u9805\u76ee\u306f\u7570\u306a\u308b\u3088\u3046\u3067\u3059\u3002\n\n\n\u4f8b lm\n\n\ncars.lm<-lm(dist ~ speed, data = cars)\ncars.caret.lm<-train(dist ~ speed, data = cars, method = 'lm')\ncars.lm \u306b\u5bfe\u5fdc\u3059\u308b\u306e\u306f cars.caret.lm$finalModel \n\n\n\u4e88\u60f3\u7d50\u679c\u7b49\u306f\u4e00\u81f4\u3059\u308b\n\u30e2\u30c7\u30eb\u306e\u7d71\u8a08\u5024\u7b49\u306e\u9805\u76ee\u304c\u7570\u306a\u308b\u5834\u5408\u304c\u3042\u308b\u306e\u3067\u3001\u56f3\u793a\u3084\u7d71\u8a08\u5024\u62bd\u51fa\u306e\u5834\u5408\u306f\u8981\u6ce8\u610f\n\n\n\n\n\n\n\n\n\u7b2c7\u7ae0\u3000\u7dda\u5f62\u56de\u5e30\u5206\u6790\n\n7.2 \u7dda\u5f62\u5358\u56de\u5e30\u5206\u6790 lm\nlibrary(caret)\n\n# \u30e2\u30c7\u30eb\u4f5c\u6210\ncars.lm<-train(dist ~ speed, data = cars, method = 'lm')\nsummary(cars.lm)\n\n# \u6b8b\u5dee\nresiduals(cars.lm)\ncars.lm$finalModel$residuals\n\n# \u56de\u5e30\u4fc2\u6570\nround(coefficients(cars.lm$finalModel), 2)\nround(cars.lm$finalModel$coefficients, 2)\n\n# \u4e88\u6e2c\n\u4e88\u6e2c\u5024<-predict(cars.lm)\n\u6b8b\u5dee<-residuals(cars.lm)\ndata.frame(cars, \u4e88\u6e2c\u5024, \u6b8b\u5dee)\n\n# \u30b0\u30e9\u30d5\nplot(cars)\nabline(cars.lm$finalModel, lwd = 2)\n\npar(oma = c(0, 0, 4, 0))\npar(mfrow = c(2, 2))\nplot(cars.lm$finalModel)\npar(mfrow = c(1, 1))\npar(oma = c(0, 0, 0, 0))\n\n\n7.3 \u7dda\u5f62\u91cd\u56de\u5e30\u5206\u6790 lm\n# \u30e2\u30c7\u30eb\u4f5c\u6210\nair.lm<-train(Ozone ~ Solar.R + Wind + Temp, data = airquality, method = 'lm')\nsummary(air.lm)\n\n# \u56de\u5e30\u4fc2\u6570\nround(coefficients(air.lm$finalModel), 2)\n\n# \u76f8\u4e92\u4f5c\u7528\u30e2\u30c7\u30eb\nair.lm2<-train(Ozone ~ (Solar.R + Wind + Temp)^2, data = airquality, method = 'lm')\nsummary(air.lm2)\n\n# \u5909\u6570\u30fb\u30e2\u30c7\u30eb\u306e\u9078\u629e\n#air.lm3<-step(air.lm2$finalModel) \u306f\u30a8\u30e9\u30fc\u3068\u306a\u308b\n\n\n\u7b2c8\u7ae0 \u975e\u7dda\u5f62\u56de\u5e30\u5206\u6790\n\n8.2 \u30ed\u30b8\u30b9\u30c6\u30a3\u30c3\u30af\u56de\u5e30\u30018.3 \u591a\u9805\u5f0f\u56de\u5e30\n\n\u975e\u7dda\u5f62\u56de\u5e30nls\u306f\u5bfe\u5fdc\u306a\u3057\u3002\n\n\n8.4 \u4e00\u822c\u5316\u7dda\u5f62\u30e2\u30c7\u30eb\nair.glm1<-train(Ozone ~ Solar.R + Wind + Temp, data = airquality, method = 'glm', family = 'gaussian')\nair.glm2<-train(Ozone ~ Solar.R + Wind + Temp, data = airquality, method = 'glm', family = 'Gamma')\nAIC(air.glm1$finalModel)\nAIC(air.glm2$finalModel)\n\n\n\u4e00\u822c\u5316\u7dda\u5f62\u30e2\u30c7\u30eb\u306b\u3088\u308b\u30ed\u30b8\u30b9\u30c6\u30a3\u30c3\u30af\u56de\u5e30\n\n\u5e74\u5ea6<-c(1966:1984)\n\u666e\u53ca\u7387<-c(0.003, 0.016, 0.054, 0.139, 0.263, 0.423, 0.611, 0.758, 0.859, 0.903, 0.937, 0.954, 0.978, 0.978, 0.982, 0.985, 0.989, 0.988, 0.992)\nTV<-data.frame(\u5e74\u5ea6, \u666e\u53ca\u7387)\n\n# \u30e2\u30c7\u30eb\u4f5c\u6210\nfm5<-train(\u666e\u53ca\u7387 ~ \u5e74\u5ea6, data = TV, method = 'glm', family = 'binomial')\nplot(\u5e74\u5ea6, \u666e\u53ca\u7387, type = 'l')\nlines(\u5e74\u5ea6, fitted(fm5), lty = 2, col = 'red', lwd = 2)\nlegend(locator(1), c('\u5b9f\u6e2c\u5024', '\u4e88\u6e2c\u5024'), col = 1:2, lty = 1:2)\n\n# \u4e88\u6e2c\npredict(fm5$finalModel, type = 'response')\n\nnames(fm5); names(fm5$finalModel)  # \u3069\u3061\u3089\u3082glm\u3067\u4f5c\u6210\u3057\u305f\u30e2\u30c7\u30eb\u3068\u306f\u5c11\u3057\u7570\u306a\u308b\n\n\u4e88\u6e2c\u7d50\u679c\u306b\u76f4\u63a5\u5f71\u97ff\u306a\u3044\u304c\u3001caret\u3092\u7528\u3044\u3066\u3044\u308b\u305f\u3081\u3001fm5\u3082fm5$finalModel\u3082glm\u304b\u3089\u76f4\u63a5\u6c42\u3081\u305f\u30e2\u30c7\u30eb\u3068\u306f\u7d50\u679c\u306e\u9805\u76ee\u304c\u7570\u306a\u3063\u3066\u3044\u308b\u3002\n\n8.5 \u5e73\u6ed1\u5316\u56de\u5e30\u3068\u52a0\u6cd5\u30e2\u30c7\u30eb\n\n\u5e73\u6ed1\u5316\u56de\u5e30\u3068\u52a0\u6cd5\u30e2\u30c7\u30eb\n\u6bd4\u8f03\u306e\u305f\u3081\u306e\u591a\u9805\u5f0f\u30e2\u30c7\u30eb\u306f\u4e0b\u8a18\u3067\u5b9f\u884c\u53ef\u80fd\u3060\u304c\u3001\u5e73\u6ed1\u5316\u56de\u5e30\u306f\u5bfe\u5fdc\u306a\u3057\u3002\n\ndf<-data.frame(x1, y1)\nlmp2<-fitted(train(y1 ~ poly(x1, 2), data = df, method = 'lm'))\nlines(x1, lmp2, lty = 4, col = 4, lwd = 2)\nlmp5<-fitted(train(y1 ~ poly(x1, 5), data = df, method = 'lm'))\nlines(x1, lmp5, lty = 2, col = 2, lwd = 2)\nlmp8<-fitted(train(y1 ~ poly(x1, 8), data = df, method = 'lm'))\nlines(x1, lmp8)\nlegend(locator(1), c('poly(x1, 2)', 'poly(x1, 5)', 'poly(x1, 8)'), col = c(4, 2, 1), lty = c(4, 2, 1), lwd = 2)\n\n\n\u52a0\u6cd5\u30e2\u30c7\u30eb\n\n\n\u5e73\u6ed1\u5316\u30b9\u30d7\u30e9\u30a4\u30f3\u306e\u5bfe\u5fdc\u304c\u306a\u3044\u306e\u3067\u3001gam\u306e\u5024\u304c\u30c6\u30ad\u30b9\u30c8\u3068\u7570\u306a\u308b\u3002\n\n\n\nairq2<-na.exclude(airquality[, 1:4])\nairq.gam<-train(Ozone ~ Solar.R + Wind + Temp, data = airq2, method = 'gam')\nAIC(airq.gam$finalModel)\nairq.glm<-train(Ozone ~ Solar.R + Wind + Temp, data = airq2, method = 'glm')\nAIC(airq.glm$finalModel)\n\n\n\u7b2c9\u7ae0 \u7dda\u5f62\u5224\u5225\u5206\u6790\n\n9.3 \u30b1\u30fc\u30b9\u30b9\u30bf\u30c7\u30a3\uff08lda\uff09\niris.lab<-c(rep('S', 50), rep('C', 50), rep('V', 50))\niris1<-data.frame(iris[, 1:4], Species = iris.lab)\neven.n<-2 * (1:75) - 1\niris.train<-iris1[even.n, ]\niris.test<-iris1[-even.n, ]\n\nZ.lda<-train(Species ~., data = iris.train, method = 'lda')\nZ.lda$finalModel\n\napply(Z.lda$finalModel$means%*%Z.lda$finalModel$scaling, 2, mean)\n\ntable(iris.train[, 5], predict(Z.lda))\n\n#plot(Z.lda$finalModel$fitted, dimen = 1) \u30d7\u30ed\u30c3\u30c8\u3067\u304d\u306a\u3044\n#plot(Z.lda$finalModel$fitted, dimen = 2) \u30d7\u30ed\u30c3\u30c8\u3067\u304d\u306a\u3044\nZ<-predict(Z.lda$finalModel, iris.train[, -5])\nplot(Z$x, type = 'n', ylim = c(-8, 8))\ntext(Z$x, labels = iris.train$Species)\n\nY<-predict(Z.lda$finalModel, iris.test[, -5])\ntable(iris.test[, 5], Y$class)\n\nplot(Y$x, type = 'n')\ntext(Y$x, labels = iris.test$Species)\n\n\u56f39.2\u306b\u5bfe\u5fdc\u3059\u308b\u3082\u306e\u306f\u30d7\u30ed\u30c3\u30c8\u51fa\u6765\u306a\u3044\u3002lda\u3068caret/lda\u3067\u51fa\u529b\u5f62\u5f0f\u304c\u9055\u3046\u305f\u3081\u3067\u3001\u63a2\u305b\u3070\u898b\u3064\u304b\u308b\u3068\u601d\u3046\u304c\u5206\u304b\u3089\u305a\n\u56f39.3\u3082\u540c\u69d8\u306b\u76f4\u63a5\u306f\u30d7\u30ed\u30c3\u30c8\u3067\u304d\u306a\u304b\u3063\u305f\u3002\u56f39.3(a)\u306fpredict\u3092\u7528\u3044\u3066\u307b\u307c\u540c\u7b49\u306e\u56f3\u304c\u30d7\u30ed\u30c3\u30c8\u51fa\u6765\u305f\u3002\n\n9.4 \u4ea4\u5dee\u78ba\u8a8d\niris.CV<-train(Species ~., data = iris, method = 'lda', trControl = trainControl(method = 'LOOCV'))\n(lda.tab<-table(iris[, 5], predict(iris.CV)))\n\nsum(lda.tab[row(lda.tab) == col(lda.tab)]) / sum(lda.tab)\nsum(lda.tab[row(lda.tab) != col(lda.tab)]) / sum(lda.tab)\n\n\n\u7b2c10\u7ae0 \u975e\u7dda\u5f62\u5224\u5225\u5206\u6790\n\n10.2 \u5224\u5225\u95a2\u6570\u306b\u3088\u308b\u5224\u5225\u5206\u6790 (qda)\n\u524d\u7ae0\u3067\u4f5c\u6210\u3057\u305firis.train, iris.test\u30c7\u30fc\u30bf\u3092\u7528\u3044\u308b\nZ.qda<-train(Species ~., data = iris.train, method = 'qda')\ntable(iris.train[, 5], predict(Z.qda))\n\nY.qda<-predict(Z.qda, iris.test[, -5])\ntable(iris.test[, 5], Y.qda)\n\n\n10.3 \u8ddd\u96e2\u306b\u3088\u308b\u5224\u5225\u5206\u6790\n\n\u5bfe\u5fdc\u306a\u3057\n\n\n10.4 \u591a\u6570\u6c7a\u306b\u3088\u308b\u5224\u5225\u5206\u6790 \uff08k\u6700\u8fd1\u508d\u6cd5 k-Nearest Neighbor\uff09\n\n\nK-Nearest-Neighbor & Tuning By Caret\u3092\u53c2\u8003\u306b\u3055\u305b\u3066\u3044\u305f\u3060\u3044\u305f\u3002\n\niris.knn<-train(Species ~., data = iris.train, method = 'knn', tuneGrid = expand.grid(k = 5))\niris.test.knn<-predict(iris.knn, iris.test[, -5])\ntable(iris.test.knn, iris.test[, 5])\n\n# \u56f3\u793a\npairs(iris[, 1:4], pch = as.character(iris.test[ ,5]), col = c(3, 2)[(iris.test$Species != iris.test.knn) + 1])\n\n\n# \u4ea4\u5dee\u78ba\u8a8d\niris.cv<-train(Species ~., data = iris, method = 'knn', trControl = trainControl(method = 'LOOCV'), tuneGrid = expand.grid(k = 5))\ntable(iris[, 5], predict(iris.cv))\n\n\n\u4eca\u56de\u306fk=5\u3068\u6307\u5b9a\u3055\u308c\u305f\u304c\u3001k\u306e\u6700\u9069\u5024\u3092\u6c42\u3081\u308b\u306b\u306f\u4e0b\u8a18\u306e\u3088\u3046\u306a\u611f\u3058\uff081<=k<=10\u306e\u7bc4\u56f2\u3067\u63a2\u3057\u3066\u3044\u308b\uff09\n\nknnGrid <- expand.grid(k = c(1:10))\niris.knn<-train(Species ~., data = iris.train, method = 'knn', tuneGrid = knnGrid)\niris.test.knn<-predict(iris.knn, iris.test[, -5])\ntable(iris.test.knn, iris.test[, 5])\n\n\n10.5 \u30d9\u30a4\u30ba\u5224\u5b9a\u6cd5\nlibrary(mlbench); data(Glass); G<-Glass[, c(1:5, 10)]\n\n# NaiveBayes\u306f\u30c7\u30d5\u30a9\u30eb\u30c8\u3067\u306f\u30ab\u30fc\u30cd\u30eb\u6cd5\u3092\u7528\u3044\u306a\u3044\u304ccaret\u306enb\u306f\u30ab\u30fc\u30cd\u30eb\u6cd5\u3092\u7528\u3044\u308b\u306e\u3067\u30aa\u30d7\u30b7\u30e7\u30f3\u3067FALSE\u306b\u3059\u308b\nm1<-train(Type ~., data = G, method = 'nb', tuneGrid = data.frame(fL = 0, usekernel = F))\nm1.p<-predict(m1)\ntem1<-table(G$Type, m1.p)\n1 - sum(diag(tem1)) / sum(tem1)\n\n# \u30ab\u30fc\u30cd\u30eb\u6cd5\u3092\u7528\u3044\u308b \nm1<-train(Type ~., data = G, method = 'nb')\nm1.p<-predict(m1)\ntem1<-table(G$Type, m1.p)\n1 - sum(diag(tem1)) / sum(tem1)\n\n\n\u7b2c13\u7ae0 \u6a39\u6728\u30e2\u30c7\u30eb\n\n\u5206\u985e\u6728\nset.seed(20)\niris.rp<-train(Species ~., data = iris, method = 'rpart')\nprint(iris.rp$finalModel, digit = 1)\n\n\u30c6\u30ad\u30b9\u30c8\u306e\u6728\u3068\u5c11\u3057\u7570\u306a\u308b\u3002\u305f\u3060\u3001rpart\u3067\u5b9f\u884c\u3057\u3066\u3082\u3053\u306e\u7d50\u679c\u3068\u540c\u3058\u3002\u30c6\u30ad\u30b9\u30c8\u3067\u306fmvpart\u3092\u7528\u3044\u3066\u3044\u308b\u306e\u3067\u7570\u306a\u308b\u304b\uff1f\u305f\u3060\u3001mvpart\u306f\u3082\u3046R\u3067\u30b5\u30dd\u30fc\u30c8\u3055\u308c\u3066\u3044\u306a\u3044\u3002\nplot(iris.rp$finalModel, uniform = T, branch = 0.6, margin = 0.05)\ntext(iris.rp$finalModel, use.n = T, all = T)\n\n\u6728\u306e\u30d7\u30ed\u30c3\u30c8\u3082mvpart\u3092\u7528\u3044\u3066\u3044\u308b\u30c6\u30ad\u30b9\u30c8\u306e\u56f313.4\u3068\u306f\u7570\u306a\u308b\u304c\u3001rpart\u306e\u307f\u306e\u56f3\u3068\u4e00\u81f4\u3057\u3066\u3044\u308b\u306e\u3067\u3001\u554f\u984c\u306a\u3057\u3002\n\n\u6728\u306e\u526a\u5b9a\n\nprintcp(iris.rp$finalModel)\n\niris.rp1<-prune(iris.rp$finalModel, cp = 0.02)\nplot(iris.rp1, uniform = T, branch = 0.6, margin = 0.05)\ntext(iris.rp1, use.n = T)\n\nmvpart\u4f7f\u7528\u3088\u308a\u6700\u521d\u304b\u3089\u679d\u304c\u5c11\u306a\u3044\u306e\u3067\u3001\u5909\u5316\u306a\u3057\u3002\n# plotcp(iris.rp$finalModel) \u306f\u52d5\u304b\u305a\u3001\u3001\u3001\n\ncaret\u306a\u3089tuneGrid\u3067\u884c\u304f\u306e\u3060\u308d\u3046\u3002\u4f8b\u3048\u3070\u3053\u3093\u306a\u304b\n(iris.rp.test<-train(Species ~., data = iris, method = 'rpart', tuneGrid = expand.grid(cp = seq(0.01, 0.50, 0.01))))\n\n\n\u5224\u5225\n\neven.n<-2 * (1:75) - 1\niris.train<-iris[even.n, ]\niris.test<-iris[-even.n, ]\nset.seed(20)\niris.rp2<-train(Species ~., data = iris.train, method = 'rpart')\n#plotcp\u306f\u52d5\u304b\u306a\u3044\u306e\u3067\u7565\niris.rp3<-predict(iris.rp2, iris.test[, -5])\ntable(iris.test[, 5], iris.rp3)\n\n\n\u56de\u5e30\u6728\ncars.rp<-train(dist ~ speed, data = cars, method = 'rpart')\ncars.rp$finalModel\n\n#printcp\u306f\u7565\n\ncars.rp1<-prune(cars.rp$finalModel, cp = 0.044)\nplot(cars.rp1, uniform = T, margin = 0.05)\ntext(cars.rp1, use.n = T)\n\n\n\u591a\u5909\u91cf\u56de\u5e30\u6728\n\nmvpart\u306e\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8spider\u304c\u5fc5\u8981\u3067\u3042\u308b\u3053\u3068\u3068\u3001\u76ee\u7684\u5909\u6570\u304c\u8907\u6570\u3067\u3042\u308b\u56de\u5e30\u306f\u3042\u307e\u308a\u983b\u5ea6\u304c\u9ad8\u304f\u306a\u3044\u3068\u601d\u308f\u308c\u3001\u7565\n\n\n13.4 \u6355\u9063\u3068\u6ce8\u91c8\n\ntree\u306f\u306a\u3057\nJ48\n\niris.j48<-train(Species ~., data = iris, method = 'J48')\niris.j48$finalModel\n\nlibrary(party)\nplot(iris.j48$finalModel)\nplot(iris.j48$finalModel, type = c('extended'))\n\n\u30c6\u30ad\u30b9\u30c8\u3067\u306f\u56f313.14\u306e(a), (b)\u304c\u51fa\u529b\u3055\u308c\u308b\u3068\u306a\u3063\u3066\u3044\u308b\u304c\u3001extended\u306e\u6307\u5b9a\u306b\u95a2\u308f\u3089\u305a\u540c\u3058\u56f3\u3067\u3001\u30c6\u30ad\u30b9\u30c8\u3068\u3082\u8868\u793a\u304c\u3084\u3084\u7570\u306a\u308b\u3002RWeka/J48\u3067\u3082caret\u306ej48\u3067\u3082\u540c\u3058\u56f3\u3002\n\n\nctree\n\ncars.ctr<-train(dist ~., data = cars, method = 'ctree')\nplot(cars.ctr$finalModel)\nt.style<-node_hist(cars.ctr$finalModel, ymax = 0.06, xscale = c(0, 150), col = 'red', fill = hsv(0.6, 0.5, 1))\nplot(cars.ctr$finalModel, terminal_panel = t.style)\n\n\n\u7b2c14\u7ae0 \u30cb\u30e5\u30fc\u30e9\u30eb\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\neven.n<-2 * (1:75)\niris.train<-iris[even.n, ]\niris.test<-iris[-even.n, ]\n\niris.nnet<-train(Species ~., data = iris.train, method = 'nnet', tuneGrid = data.frame(size = 3, decay = 0.1))\niris.nnetp<-predict(iris.nnet, iris.test[, -5])\ntable(iris.test[, 5], iris.nnetp)\n\n\nlvq\n\u4ee5\u4e0b\u306e\u901a\u308a\u306b\u4e00\u5fdclvq\u306f\u5b9f\u65bd\u3067\u304d\u308b\u304clvqinit\u306b\u5bfe\u5fdc\u3059\u308b\u3082\u306e\u3084\u3001lvq1, lvq2, lvq3, olvq1\u306e\u5225\u306b\u5bfe\u5fdc\u3059\u308b\u3082\u306e\u306f\u306a\u3044\u3088\u3046\u3060\u3002\ncd1<-train(Species ~., data = iris.train, method = 'lvq')\ntest.re<-predict(cd1, iris.test[, -5])\ntable(iris.test[, 5], test.re)\n\n\n\u7b2c15\u7ae0 \u30ab\u30fc\u30cd\u30eb\u6cd5\u3068\u30b5\u30dd\u30fc\u30c8\u30d9\u30af\u30bf\u30fc\u30de\u30b7\u30f3\n\nkpca\u306f\u306a\u3057\u3002\n\n\n\u5224\u5225\n\nksvm\n\nlibrary(kernlab); data(spam)\nset.seed(50)\ntr.num<-sample(4601, 2500)\nspam.train<-spam[tr.num, ]\nspam.test<-spam[-tr.num, ]\n\n#set.seed(50) #\u30c6\u30ad\u30b9\u30c8\u3068\u540c\u69d8\u306b\u3053\u3053\u3067\u521d\u671f\u5316\u3092\u3059\u308b\u3068\u5024\u304c\u305a\u308c\u308b\u3002SVM\u306e\u672c\u8cea\u3067\u306f\u306a\u3044\u306e\u3067\u3069\u3046\u3067\u3082\u3088\u3044\u304c\u3053\u3053\u3067\u306f\u521d\u671f\u5316\u3092\u306a\u304f\u3057\u305f\u3002\n\n(spam.svm<-train(type ~., data = spam.train, method = 'svmRadial', trControl = \ntrainControl(method = 'CV', number = 3)))\n\nSupport Vector Machines with Radial Basis Function Kernel \n\n2500 samples\n  57 predictor\n   2 classes: 'nonspam', 'spam' \n\nNo pre-processing\nResampling: Cross-Validated (3 fold) \nSummary of sample sizes: 1667, 1666, 1667 \nResampling results across tuning parameters:\n\n  C     Accuracy   Kappa    \n  0.25  0.9044001  0.7960315\n  0.50  0.9152011  0.8200693\n  1.00  0.9215993  0.8345351\n\nTuning parameter 'sigma' was held constant at a value\n of 0.02769061\nAccuracy was used to select the optimal model using \n the largest value.\nThe final values used for the model were sigma =\n 0.02769061 and C = 1. \n\nspam.pre<-predict(spam.svm, spam.test[, -58])\n(spam.tab<-table(spam.test[, 58], spam.pre))\n\n         spam.pre\n          nonspam spam\n  nonspam    1224   58\n  spam         95  724\n\n1 - sum(diag(spam.tab)) / sum(spam.tab)\n\n0.07282247\n\n\u30c6\u30ad\u30b9\u30c8\u3068\u5024\u304c\u7570\u306a\u308b\u304cksvm\u3067\u3082\u540c\u3058\u5024\u3068\u306a\u308b\u3002\ny<-as.matrix(iris[51:150, 5])\niris1<-data.frame(iris[51:150, 3:4], y)\nset.seed(0)\nir.ksvm<-train(y ~., data = iris1, method = 'svmRadial')\n#plot(ir.ksvm, data = iris1[, 1:2]) #\u52d5\u304b\u305a\u3001 ir.ksvm$finalModel\u3060\u3068\u4f5c\u56f3\u3055\u308c\u308b\u304c\u9055\u3046\u56f3\ntable(iris1$y, predict(ir.ksvm, iris1[, 1:2]))\n\n             versicolor virginica\n  versicolor         47         3\n  virginica           2        48\n\n\u30c6\u30ad\u30b9\u30c8\u3068\u5024\u304c\u7570\u306a\u308b\u304cksvm\u3067\u3082\u540c\u3058\u5024\u3068\u306a\u308b\u3002\n\n\u56de\u5e30\nx1<-seq(-10, 10, 0.1); set.seed(10)\ny1<-50 * sin(x1) + x1^2 + 10 * rnorm(length(x1), 0, 1)\nxy.svm<-train(y1 ~ x1, data = data.frame(x1, y1), method = 'svmRadial')\nsy.pre<-predict(xy.svm, x1)\nplot(x1, y1, type = 'l')\nlines(x1, sy.pre, col = 'red', lty = 2)\nlegend(locator(1), c('\u5b9f\u6e2c\u5024', '\u4e88\u6e2c\u5024'), lty = c(1, 2), col = c(1, 2))\n\nepsilon\u3092\u6307\u5b9a\u3059\u308b\u30e1\u30bd\u30c3\u30c9\u304ccaret\u306esvm\u306b\u306f\u306a\u3044\u306e\u3067\u7565\u3002\n\n\u7b2c16\u7ae0 \u96c6\u56e3\u5b66\u7fd2\n\u30c6\u30ad\u30b9\u30c8\u3067\u306f adabag \u30d1\u30c3\u30b1\u30fc\u30b8\u3092\u4f7f\u7528\u3057\u3066\u3044\u308b\u3002caret\u3067\u306f adabag \u30d1\u30c3\u30b1\u30fc\u30b8\u3092\u4f7f\u7528\u3059\u308b\u3082\u306e\u3068\u3057\u3066\u3001AdaBag, AdaBoost.M1 \u304c\u3042\u308a\u3001\u524d\u8005\u306f\u30d0\u30ae\u30f3\u30b0\u3068\u30d6\u30fc\u30b9\u30c6\u30a3\u30f3\u30b0\u306e\u4e21\u65b9\u3068\u3057\u3066\u7d39\u4ecb\u3055\u308c\u3001\u5f8c\u8005\u306f\u30d6\u30fc\u30b9\u30c6\u30a3\u30f3\u30b0\u3068\u3057\u3066\u7d39\u4ecb\u3055\u308c\u3066\u3044\u308b\u3002\u3053\u3053\u3067\u306f\u524d\u8005\u3092\u30d0\u30ae\u30f3\u30b0\u3001\u5f8c\u8005\u3092\u30d6\u30fc\u30b9\u30c6\u30a3\u30f3\u30b0\u3068\u3057\u3066\u793a\u3057\u307e\u3059\u3002\n\n\u30d0\u30ae\u30f3\u30b0\nlibrary(mlbench)\ndata(BreastCancer)\neven.n<-2 * (1:349)\nBC.train<-BreastCancer[even.n, -1]\nBC.test<-BreastCancer[-even.n, -1]\nfor(i in 1:9) {\n  BC.train[, i]<-as.integer(BC.train[, i])\n  BC.test[, i]<-as.integer(BC.test[, i])\n}\n\n# BC.train \u306b\u306f\u6b20\u640d\u5024\u304c\u3042\u308a\u3001bagging \u3067\u306f\u305d\u306e\u307e\u307e\u6271\u3048\u308b\u3088\u3046\u3060\u304c\u3001\u4e0b\u8a18\u3067\u306f\u305d\u306e\u307e\u307e\u6271\u3048\u306a\u3044\u306e\u3067\u6b20\u640d\u5024\u3092\u57cb\u3081\u308b\u51e6\u7406\u3092\u3059\u308b\u3002\nset.seed(20)\ntmp.pre<-preProcess(BC.train, method = 'bagImpute')\nBC.train<-predict(tmp.pre, BC.train)\n\nset.seed(20)\nBC.ba<-train(Class ~., data = BC.train, method = 'AdaBag')\n\n# \u540c\u69d8\u306bBC.test  \u306b\u3082\u6b20\u640d\u5024\u304c\u3042\u308a\u57cb\u3081\u308b\u51e6\u7406\u3092\u3059\u308b\u3002\nset.seed(20)\ntmp.pre<-preProcess(BC.test, method = 'bagImpute')\nBC.test<-predict(tmp.pre, BC.test)\n\nBC.bap<-predict(BC.ba, BC.test)\nBC.bap<-data.frame(BC.bap); names(BC.bap)<-'class'\n(ta.ba<-table(BC.test[, 10], BC.bap$class))\n\n            benign malignant\n  benign       216        11\n  malignant      3       120\n\n\u30c6\u30ad\u30b9\u30c8\u3068\u5024\u304c\u7570\u306a\u3063\u3066\u3057\u307e\u3063\u3066\u3044\u308b\u3002\u6b20\u640d\u5024\u306e\u88dc\u5b8c\u306e\u554f\u984c\u3060\u308d\u3046\u304b\u3001\u3001\u3001\n1 - sum(diag(tb.ba)) / sum(tb.ba)\n\n[1] 0.04\n\n\n\u30d6\u30fc\u30b9\u30c6\u30a3\u30f3\u30b0\nset.seed(20)\nBC.ad<-train(Class ~., data = BC.train, method = 'AdaBoost.M1')\n\nBC.adp<-predict(BC.ad, newdata = BC.test[, -10])\nBC.adp<-data.frame(BC.adp); names(BC.adp)<-'class'\n(tb.ad<-table(BC.adp$class, BC.test[, 10]))\n\n            benign malignant\n  benign       219         3\n  malignant      8       120\n\n\u30c6\u30ad\u30b9\u30c8\u3068\u5024\u304c\u7570\u306a\u3063\u3066\u3057\u307e\u3063\u3066\u3044\u308b\u3002\u6b20\u640d\u5024\u306e\u88dc\u5b8c\u306e\u554f\u984c\u304b\u3082\u3057\u308c\u306a\u3044\u3002\n1 - sum(diag(tb.ad)) / sum(tb.ad)\n\n[1] 0.03142857\n\n\n\u30e9\u30f3\u30c0\u30e0\u30d5\u30a9\u30ec\u30b9\u30c8\ndata(BreastCancer)\neven.n<-2 * (1:349)\nBC.train<-BreastCancer[even.n, -1]\nBC.test<-BreastCancer[-even.n, -1]\nfor(i in 1:9) {\n  BC.train[, i]<-as.integer(BC.train[, i])\n  BC.test[, i]<-as.integer(BC.test[, i])\n}\n\nBC.train<-na.omit(BC.train)\n\nset.seed(20)\nBC.rf<-train(Class ~., data = BC.train, method = 'rf')\nprint(BC.rf$finalModel)\n\nCall:\n randomForest(x = x, y = y, mtry = param$mtry) \n               Type of random forest: classification\n                     Number of trees: 500\nNo. of variables tried at each split: 2\n\n        OOB estimate of  error rate: 3.85%\nConfusion matrix:\n          benign malignant class.error\nbenign       214         7  0.03167421\nmalignant      6       111  0.05128205\n\n\u30c6\u30ad\u30b9\u30c8\u3068\u306f\u5024\u304c\u7570\u306a\u3063\u3066\u3057\u307e\u3063\u3066\u3044\u308b\u3002\u30c6\u30ad\u30b9\u30c8\u3068\u306f\u7570\u306a\u308a\u3001 mtry = param$mtry \u304c\u6307\u5b9a\u3055\u308c\u3066\u3057\u307e\u3063\u3066\u3044\u308b\u305f\u3081\u304b\u3002\u30d1\u30e9\u30e1\u30fc\u30bf\u306e\u6307\u5b9a\u3067\u3069\u3046\u306b\u304b\u306a\u308b\u304b\u3082\u77e5\u308c\u306a\u3044\u304c\u3001\u3053\u3053\u3067\u306f\u30b9\u30eb\u30fc\u3057\u307e\u3059\u3002\nsummary(BC.rf$finalModel)\n\n                Length Class      Mode     \ncall               4   -none-     call     \ntype               1   -none-     character\npredicted        338   factor     numeric  \nerr.rate        1500   -none-     numeric  \nconfusion          6   -none-     numeric  \nvotes            676   matrix     numeric  \noob.times        338   -none-     numeric  \nclasses            2   -none-     character\nimportance         9   -none-     numeric  \nimportanceSD       0   -none-     NULL     \nlocalImportance    0   -none-     NULL     \nproximity          0   -none-     NULL     \nntree              1   -none-     numeric  \nmtry               1   -none-     numeric  \nforest            14   -none-     list     \ny                338   factor     numeric  \ntest               0   -none-     NULL     \ninbag              0   -none-     NULL     \nxNames             9   -none-     character\nproblemType        1   -none-     character\ntuneValue          1   data.frame list     \nobsLevels          2   -none-     character\n\ncaret\u4f7f\u7528\u6642\u306f\u3001BC.rf$finalModel \u304c randomForest \u306e\u30e2\u30c7\u30eb\u306b\u8a72\u5f53\u3059\u308b\u4ee5\u4e0b\u3082\u540c\u69d8\u3002\nBC.rf$finalModel$type\n\n[1] \"classification\"\n\nplot(BC.rf$finalModel)\n\nBC.rf$finalModel$importance\n\n                MeanDecreaseGini\nCl.thickness          10.3031669\nCell.size             31.0735166\nCell.shape            25.1238751\nMarg.adhesion         10.2548693\nEpith.c.size          13.5882463\nBare.nuclei           20.6794913\nBl.cromatin           20.7562703\nNormal.nucleoli       19.0439173\nMitoses                0.9920097\n\nvarImpPlot(BC.rf$finalModel)\n\nBC.rfp<-predict(BC.rf, BC.test[, -10])\n(BC.rft<-table(BC.test[, 10], BC.rfp))\n\n           BC.rfp\n            benign malignant\n  benign       219         8\n  malignant      3       120\n\n(1 - sum(diag(BC.rft)) / sum(BC.rft))\n\n[1] 0.03142857\n\n\u300e<a  href=\"https://www.amazon.co.jp/gp/product/4627096011/ref=as_li_qf_sp_asin_tl?ie=UTF8&camp=247&creative=1211&creativeASIN=4627096011&linkCode=as2&tag=aokikenichi-22\">R\u306b\u3088\u308b\u30c7\u30fc\u30bf\u30b5\u30a4\u30a8\u30f3\u30b9-\u30c7\u30fc\u30bf\u89e3\u6790\u306e\u57fa\u790e\u304b\u3089\u6700\u65b0\u624b\u6cd5\u307e\u3067</a><img src=\"http://ir-jp.amazon-adsystem.com/e/ir?t=aokikenichi-22&l=as2&o=9&a=4627096011\" width=\"1\" height=\"1\" border=\"0\" alt=\"\" style=\"border:none !important; margin:0px !important;\" />\u300f\n<a  href=\"https://www.amazon.co.jp/gp/product/4627096011/ref=as_li_qf_sp_asin_il?ie=UTF8&camp=247&creative=1211&creativeASIN=4627096011&linkCode=as2&tag=aokikenichi-22\"><img border=\"0\" src=\"http://ws-fe.amazon-adsystem.com/widgets/q?_encoding=UTF8&ASIN=4627096011&Format=_SL110_&ID=AsinImage&MarketPlace=JP&ServiceVersion=20070822&WS=1&tag=aokikenichi-22\" ></a><img src=\"http://ir-jp.amazon-adsystem.com/e/ir?t=aokikenichi-22&l=as2&o=9&a=4627096011\" width=\"1\" height=\"1\" border=\"0\" alt=\"\" style=\"border:none !important; margin:0px !important;\" />\n\u306b\u3042\u308b\u5404\u5b9f\u884c\u3092R\u306ecaret\u30d1\u30c3\u30b1\u30fc\u30b8\u3067\u8a66\u3057\u307e\u3059\u3002\n\n# \u5bfe\u8c61\u5916\n* caret\u306f\u6559\u5e2b\u3042\u308a\u5b66\u7fd2\u306e\u5224\u5225\u3068\u4e88\u6e2c\u304c\u30e1\u30a4\u30f3\u306a\u306e\u3067\u3001\u6559\u5e2b\u306a\u3057\u5b66\u7fd2\u3084\u751f\u5b58\u5206\u6790\u3001\u6642\u7cfb\u5217\u30e2\u30c7\u30eb\u306a\u3069\u306f\u5bfe\u8c61\u5916\u3002\n* \u5bfe\u8c61\u5916\uff1a\u7b2c1-6\u7ae0\u3001\u7b2c11-12\u7ae0\u3001\u7b2c17\u7ae0\n\n# \u5168\u4f53\u306e\u30e1\u30e2\n* lm\u306a\u3069\u901a\u5e38\u306e\u95a2\u6570\u3067\u4f5c\u6210\u3057\u305f\u30e2\u30c7\u30eb\u306b\u5bfe\u5fdc\u3059\u308bcaret\u4f7f\u7528\u306e\u30e2\u30c7\u30eb\u306f $finalModel \u3068\u306a\u308b\u3002\n* \u305f\u3060\u4e00\u90e8\u9805\u76ee\u306f\u7570\u306a\u308b\u3088\u3046\u3067\u3059\u3002\n    * \u4f8b lm\n        * cars.lm<-lm(dist ~ speed, data = cars)\n        * cars.caret.lm<-train(dist ~ speed, data = cars, method = 'lm')\n        * cars.lm \u306b\u5bfe\u5fdc\u3059\u308b\u306e\u306f cars.caret.lm$finalModel \n            * \u4e88\u60f3\u7d50\u679c\u7b49\u306f\u4e00\u81f4\u3059\u308b\n            * \u30e2\u30c7\u30eb\u306e\u7d71\u8a08\u5024\u7b49\u306e\u9805\u76ee\u304c\u7570\u306a\u308b\u5834\u5408\u304c\u3042\u308b\u306e\u3067\u3001\u56f3\u793a\u3084\u7d71\u8a08\u5024\u62bd\u51fa\u306e\u5834\u5408\u306f\u8981\u6ce8\u610f\n\n# \u7b2c7\u7ae0\u3000\u7dda\u5f62\u56de\u5e30\u5206\u6790\n## 7.2 \u7dda\u5f62\u5358\u56de\u5e30\u5206\u6790 lm\n\n```r\nlibrary(caret)\n\n# \u30e2\u30c7\u30eb\u4f5c\u6210\ncars.lm<-train(dist ~ speed, data = cars, method = 'lm')\nsummary(cars.lm)\n\n# \u6b8b\u5dee\nresiduals(cars.lm)\ncars.lm$finalModel$residuals\n\n# \u56de\u5e30\u4fc2\u6570\nround(coefficients(cars.lm$finalModel), 2)\nround(cars.lm$finalModel$coefficients, 2)\n\n# \u4e88\u6e2c\n\u4e88\u6e2c\u5024<-predict(cars.lm)\n\u6b8b\u5dee<-residuals(cars.lm)\ndata.frame(cars, \u4e88\u6e2c\u5024, \u6b8b\u5dee)\n\n# \u30b0\u30e9\u30d5\nplot(cars)\nabline(cars.lm$finalModel, lwd = 2)\n\npar(oma = c(0, 0, 4, 0))\npar(mfrow = c(2, 2))\nplot(cars.lm$finalModel)\npar(mfrow = c(1, 1))\npar(oma = c(0, 0, 0, 0))\n```\n\n## 7.3 \u7dda\u5f62\u91cd\u56de\u5e30\u5206\u6790 lm\n```r\n# \u30e2\u30c7\u30eb\u4f5c\u6210\nair.lm<-train(Ozone ~ Solar.R + Wind + Temp, data = airquality, method = 'lm')\nsummary(air.lm)\n\n# \u56de\u5e30\u4fc2\u6570\nround(coefficients(air.lm$finalModel), 2)\n\n# \u76f8\u4e92\u4f5c\u7528\u30e2\u30c7\u30eb\nair.lm2<-train(Ozone ~ (Solar.R + Wind + Temp)^2, data = airquality, method = 'lm')\nsummary(air.lm2)\n\n# \u5909\u6570\u30fb\u30e2\u30c7\u30eb\u306e\u9078\u629e\n#air.lm3<-step(air.lm2$finalModel) \u306f\u30a8\u30e9\u30fc\u3068\u306a\u308b\n```\n\n# \u7b2c8\u7ae0 \u975e\u7dda\u5f62\u56de\u5e30\u5206\u6790\n## 8.2 \u30ed\u30b8\u30b9\u30c6\u30a3\u30c3\u30af\u56de\u5e30\u30018.3 \u591a\u9805\u5f0f\u56de\u5e30\n* \u975e\u7dda\u5f62\u56de\u5e30nls\u306f\u5bfe\u5fdc\u306a\u3057\u3002\n\n## 8.4 \u4e00\u822c\u5316\u7dda\u5f62\u30e2\u30c7\u30eb\n```r\nair.glm1<-train(Ozone ~ Solar.R + Wind + Temp, data = airquality, method = 'glm', family = 'gaussian')\nair.glm2<-train(Ozone ~ Solar.R + Wind + Temp, data = airquality, method = 'glm', family = 'Gamma')\nAIC(air.glm1$finalModel)\nAIC(air.glm2$finalModel)\n```\n\n* \u4e00\u822c\u5316\u7dda\u5f62\u30e2\u30c7\u30eb\u306b\u3088\u308b\u30ed\u30b8\u30b9\u30c6\u30a3\u30c3\u30af\u56de\u5e30\n\n```r\n\u5e74\u5ea6<-c(1966:1984)\n\u666e\u53ca\u7387<-c(0.003, 0.016, 0.054, 0.139, 0.263, 0.423, 0.611, 0.758, 0.859, 0.903, 0.937, 0.954, 0.978, 0.978, 0.982, 0.985, 0.989, 0.988, 0.992)\nTV<-data.frame(\u5e74\u5ea6, \u666e\u53ca\u7387)\n\n# \u30e2\u30c7\u30eb\u4f5c\u6210\nfm5<-train(\u666e\u53ca\u7387 ~ \u5e74\u5ea6, data = TV, method = 'glm', family = 'binomial')\nplot(\u5e74\u5ea6, \u666e\u53ca\u7387, type = 'l')\nlines(\u5e74\u5ea6, fitted(fm5), lty = 2, col = 'red', lwd = 2)\nlegend(locator(1), c('\u5b9f\u6e2c\u5024', '\u4e88\u6e2c\u5024'), col = 1:2, lty = 1:2)\n\n# \u4e88\u6e2c\npredict(fm5$finalModel, type = 'response')\n\nnames(fm5); names(fm5$finalModel)  # \u3069\u3061\u3089\u3082glm\u3067\u4f5c\u6210\u3057\u305f\u30e2\u30c7\u30eb\u3068\u306f\u5c11\u3057\u7570\u306a\u308b\n```\n\u4e88\u6e2c\u7d50\u679c\u306b\u76f4\u63a5\u5f71\u97ff\u306a\u3044\u304c\u3001caret\u3092\u7528\u3044\u3066\u3044\u308b\u305f\u3081\u3001fm5\u3082fm5$finalModel\u3082glm\u304b\u3089\u76f4\u63a5\u6c42\u3081\u305f\u30e2\u30c7\u30eb\u3068\u306f\u7d50\u679c\u306e\u9805\u76ee\u304c\u7570\u306a\u3063\u3066\u3044\u308b\u3002\n\n## 8.5 \u5e73\u6ed1\u5316\u56de\u5e30\u3068\u52a0\u6cd5\u30e2\u30c7\u30eb\n\n* \u5e73\u6ed1\u5316\u56de\u5e30\u3068\u52a0\u6cd5\u30e2\u30c7\u30eb\n\u6bd4\u8f03\u306e\u305f\u3081\u306e\u591a\u9805\u5f0f\u30e2\u30c7\u30eb\u306f\u4e0b\u8a18\u3067\u5b9f\u884c\u53ef\u80fd\u3060\u304c\u3001\u5e73\u6ed1\u5316\u56de\u5e30\u306f\u5bfe\u5fdc\u306a\u3057\u3002\n\n```r\ndf<-data.frame(x1, y1)\nlmp2<-fitted(train(y1 ~ poly(x1, 2), data = df, method = 'lm'))\nlines(x1, lmp2, lty = 4, col = 4, lwd = 2)\nlmp5<-fitted(train(y1 ~ poly(x1, 5), data = df, method = 'lm'))\nlines(x1, lmp5, lty = 2, col = 2, lwd = 2)\nlmp8<-fitted(train(y1 ~ poly(x1, 8), data = df, method = 'lm'))\nlines(x1, lmp8)\nlegend(locator(1), c('poly(x1, 2)', 'poly(x1, 5)', 'poly(x1, 8)'), col = c(4, 2, 1), lty = c(4, 2, 1), lwd = 2)\n```\n\n* \u52a0\u6cd5\u30e2\u30c7\u30eb\n    * \u5e73\u6ed1\u5316\u30b9\u30d7\u30e9\u30a4\u30f3\u306e\u5bfe\u5fdc\u304c\u306a\u3044\u306e\u3067\u3001gam\u306e\u5024\u304c\u30c6\u30ad\u30b9\u30c8\u3068\u7570\u306a\u308b\u3002\n\n```r\nairq2<-na.exclude(airquality[, 1:4])\nairq.gam<-train(Ozone ~ Solar.R + Wind + Temp, data = airq2, method = 'gam')\nAIC(airq.gam$finalModel)\nairq.glm<-train(Ozone ~ Solar.R + Wind + Temp, data = airq2, method = 'glm')\nAIC(airq.glm$finalModel)\n```\n\n# \u7b2c9\u7ae0 \u7dda\u5f62\u5224\u5225\u5206\u6790\n## 9.3 \u30b1\u30fc\u30b9\u30b9\u30bf\u30c7\u30a3\uff08lda\uff09\n\n```r\niris.lab<-c(rep('S', 50), rep('C', 50), rep('V', 50))\niris1<-data.frame(iris[, 1:4], Species = iris.lab)\neven.n<-2 * (1:75) - 1\niris.train<-iris1[even.n, ]\niris.test<-iris1[-even.n, ]\n\nZ.lda<-train(Species ~., data = iris.train, method = 'lda')\nZ.lda$finalModel\n\napply(Z.lda$finalModel$means%*%Z.lda$finalModel$scaling, 2, mean)\n\ntable(iris.train[, 5], predict(Z.lda))\n\n#plot(Z.lda$finalModel$fitted, dimen = 1) \u30d7\u30ed\u30c3\u30c8\u3067\u304d\u306a\u3044\n#plot(Z.lda$finalModel$fitted, dimen = 2) \u30d7\u30ed\u30c3\u30c8\u3067\u304d\u306a\u3044\nZ<-predict(Z.lda$finalModel, iris.train[, -5])\nplot(Z$x, type = 'n', ylim = c(-8, 8))\ntext(Z$x, labels = iris.train$Species)\n\nY<-predict(Z.lda$finalModel, iris.test[, -5])\ntable(iris.test[, 5], Y$class)\n\nplot(Y$x, type = 'n')\ntext(Y$x, labels = iris.test$Species)\n```\n\u56f39.2\u306b\u5bfe\u5fdc\u3059\u308b\u3082\u306e\u306f\u30d7\u30ed\u30c3\u30c8\u51fa\u6765\u306a\u3044\u3002lda\u3068caret/lda\u3067\u51fa\u529b\u5f62\u5f0f\u304c\u9055\u3046\u305f\u3081\u3067\u3001\u63a2\u305b\u3070\u898b\u3064\u304b\u308b\u3068\u601d\u3046\u304c\u5206\u304b\u3089\u305a\n\u56f39.3\u3082\u540c\u69d8\u306b\u76f4\u63a5\u306f\u30d7\u30ed\u30c3\u30c8\u3067\u304d\u306a\u304b\u3063\u305f\u3002\u56f39.3(a)\u306fpredict\u3092\u7528\u3044\u3066\u307b\u307c\u540c\u7b49\u306e\u56f3\u304c\u30d7\u30ed\u30c3\u30c8\u51fa\u6765\u305f\u3002\n\n## 9.4 \u4ea4\u5dee\u78ba\u8a8d\n\n```r\niris.CV<-train(Species ~., data = iris, method = 'lda', trControl = trainControl(method = 'LOOCV'))\n(lda.tab<-table(iris[, 5], predict(iris.CV)))\n\nsum(lda.tab[row(lda.tab) == col(lda.tab)]) / sum(lda.tab)\nsum(lda.tab[row(lda.tab) != col(lda.tab)]) / sum(lda.tab)\n```\n\n# \u7b2c10\u7ae0 \u975e\u7dda\u5f62\u5224\u5225\u5206\u6790\n\n## 10.2 \u5224\u5225\u95a2\u6570\u306b\u3088\u308b\u5224\u5225\u5206\u6790 (qda)\n\u524d\u7ae0\u3067\u4f5c\u6210\u3057\u305firis.train, iris.test\u30c7\u30fc\u30bf\u3092\u7528\u3044\u308b\n\n```r\nZ.qda<-train(Species ~., data = iris.train, method = 'qda')\ntable(iris.train[, 5], predict(Z.qda))\n\nY.qda<-predict(Z.qda, iris.test[, -5])\ntable(iris.test[, 5], Y.qda)\n```\n\n## 10.3 \u8ddd\u96e2\u306b\u3088\u308b\u5224\u5225\u5206\u6790\n* \u5bfe\u5fdc\u306a\u3057\n\n## 10.4 \u591a\u6570\u6c7a\u306b\u3088\u308b\u5224\u5225\u5206\u6790 \uff08k\u6700\u8fd1\u508d\u6cd5 k-Nearest Neighbor\uff09\n* [K-Nearest-Neighbor & Tuning By Caret](http://testblog234wfhb.blogspot.jp/2014/06/k-nearest-neighbor-tuning-by-caret.html)\u3092\u53c2\u8003\u306b\u3055\u305b\u3066\u3044\u305f\u3060\u3044\u305f\u3002\n\n```r\niris.knn<-train(Species ~., data = iris.train, method = 'knn', tuneGrid = expand.grid(k = 5))\niris.test.knn<-predict(iris.knn, iris.test[, -5])\ntable(iris.test.knn, iris.test[, 5])\n\n# \u56f3\u793a\npairs(iris[, 1:4], pch = as.character(iris.test[ ,5]), col = c(3, 2)[(iris.test$Species != iris.test.knn) + 1])\n```\n![Rplot.png](https://qiita-image-store.s3.amazonaws.com/0/116049/7d2af108-c888-6335-3d70-c6b7eb57e335.png)\n\n```r\n# \u4ea4\u5dee\u78ba\u8a8d\niris.cv<-train(Species ~., data = iris, method = 'knn', trControl = trainControl(method = 'LOOCV'), tuneGrid = expand.grid(k = 5))\ntable(iris[, 5], predict(iris.cv))\n```\n\n* \u4eca\u56de\u306fk=5\u3068\u6307\u5b9a\u3055\u308c\u305f\u304c\u3001k\u306e\u6700\u9069\u5024\u3092\u6c42\u3081\u308b\u306b\u306f\u4e0b\u8a18\u306e\u3088\u3046\u306a\u611f\u3058\uff081<=k<=10\u306e\u7bc4\u56f2\u3067\u63a2\u3057\u3066\u3044\u308b\uff09\n\n```r\nknnGrid <- expand.grid(k = c(1:10))\niris.knn<-train(Species ~., data = iris.train, method = 'knn', tuneGrid = knnGrid)\niris.test.knn<-predict(iris.knn, iris.test[, -5])\ntable(iris.test.knn, iris.test[, 5])\n```\n\n## 10.5 \u30d9\u30a4\u30ba\u5224\u5b9a\u6cd5\n\n```r\nlibrary(mlbench); data(Glass); G<-Glass[, c(1:5, 10)]\n\n# NaiveBayes\u306f\u30c7\u30d5\u30a9\u30eb\u30c8\u3067\u306f\u30ab\u30fc\u30cd\u30eb\u6cd5\u3092\u7528\u3044\u306a\u3044\u304ccaret\u306enb\u306f\u30ab\u30fc\u30cd\u30eb\u6cd5\u3092\u7528\u3044\u308b\u306e\u3067\u30aa\u30d7\u30b7\u30e7\u30f3\u3067FALSE\u306b\u3059\u308b\nm1<-train(Type ~., data = G, method = 'nb', tuneGrid = data.frame(fL = 0, usekernel = F))\nm1.p<-predict(m1)\ntem1<-table(G$Type, m1.p)\n1 - sum(diag(tem1)) / sum(tem1)\n\n# \u30ab\u30fc\u30cd\u30eb\u6cd5\u3092\u7528\u3044\u308b \nm1<-train(Type ~., data = G, method = 'nb')\nm1.p<-predict(m1)\ntem1<-table(G$Type, m1.p)\n1 - sum(diag(tem1)) / sum(tem1)\n```\n\n# \u7b2c13\u7ae0 \u6a39\u6728\u30e2\u30c7\u30eb\n\n## \u5206\u985e\u6728\n```r\nset.seed(20)\niris.rp<-train(Species ~., data = iris, method = 'rpart')\nprint(iris.rp$finalModel, digit = 1)\n```\n\u30c6\u30ad\u30b9\u30c8\u306e\u6728\u3068\u5c11\u3057\u7570\u306a\u308b\u3002\u305f\u3060\u3001rpart\u3067\u5b9f\u884c\u3057\u3066\u3082\u3053\u306e\u7d50\u679c\u3068\u540c\u3058\u3002\u30c6\u30ad\u30b9\u30c8\u3067\u306fmvpart\u3092\u7528\u3044\u3066\u3044\u308b\u306e\u3067\u7570\u306a\u308b\u304b\uff1f\u305f\u3060\u3001mvpart\u306f\u3082\u3046R\u3067\u30b5\u30dd\u30fc\u30c8\u3055\u308c\u3066\u3044\u306a\u3044\u3002\n\n```rb\nplot(iris.rp$finalModel, uniform = T, branch = 0.6, margin = 0.05)\ntext(iris.rp$finalModel, use.n = T, all = T)\n```\n\u6728\u306e\u30d7\u30ed\u30c3\u30c8\u3082mvpart\u3092\u7528\u3044\u3066\u3044\u308b\u30c6\u30ad\u30b9\u30c8\u306e\u56f313.4\u3068\u306f\u7570\u306a\u308b\u304c\u3001rpart\u306e\u307f\u306e\u56f3\u3068\u4e00\u81f4\u3057\u3066\u3044\u308b\u306e\u3067\u3001\u554f\u984c\u306a\u3057\u3002\n\n* \u6728\u306e\u526a\u5b9a\n\n```r\nprintcp(iris.rp$finalModel)\n\niris.rp1<-prune(iris.rp$finalModel, cp = 0.02)\nplot(iris.rp1, uniform = T, branch = 0.6, margin = 0.05)\ntext(iris.rp1, use.n = T)\n```\nmvpart\u4f7f\u7528\u3088\u308a\u6700\u521d\u304b\u3089\u679d\u304c\u5c11\u306a\u3044\u306e\u3067\u3001\u5909\u5316\u306a\u3057\u3002\n\n```r\n# plotcp(iris.rp$finalModel) \u306f\u52d5\u304b\u305a\u3001\u3001\u3001\n```\ncaret\u306a\u3089tuneGrid\u3067\u884c\u304f\u306e\u3060\u308d\u3046\u3002\u4f8b\u3048\u3070\u3053\u3093\u306a\u304b\n\n```r\n(iris.rp.test<-train(Species ~., data = iris, method = 'rpart', tuneGrid = expand.grid(cp = seq(0.01, 0.50, 0.01))))\n```\n\n* \u5224\u5225\n\n```r\neven.n<-2 * (1:75) - 1\niris.train<-iris[even.n, ]\niris.test<-iris[-even.n, ]\nset.seed(20)\niris.rp2<-train(Species ~., data = iris.train, method = 'rpart')\n#plotcp\u306f\u52d5\u304b\u306a\u3044\u306e\u3067\u7565\niris.rp3<-predict(iris.rp2, iris.test[, -5])\ntable(iris.test[, 5], iris.rp3)\n```\n\n## \u56de\u5e30\u6728\n\n```r\ncars.rp<-train(dist ~ speed, data = cars, method = 'rpart')\ncars.rp$finalModel\n\n#printcp\u306f\u7565\n\ncars.rp1<-prune(cars.rp$finalModel, cp = 0.044)\nplot(cars.rp1, uniform = T, margin = 0.05)\ntext(cars.rp1, use.n = T)\n```\n\n### \u591a\u5909\u91cf\u56de\u5e30\u6728\n* mvpart\u306e\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8spider\u304c\u5fc5\u8981\u3067\u3042\u308b\u3053\u3068\u3068\u3001\u76ee\u7684\u5909\u6570\u304c\u8907\u6570\u3067\u3042\u308b\u56de\u5e30\u306f\u3042\u307e\u308a\u983b\u5ea6\u304c\u9ad8\u304f\u306a\u3044\u3068\u601d\u308f\u308c\u3001\u7565\n\n## 13.4 \u6355\u9063\u3068\u6ce8\u91c8\n* tree\u306f\u306a\u3057\n* J48\n\n```r\niris.j48<-train(Species ~., data = iris, method = 'J48')\niris.j48$finalModel\n\nlibrary(party)\nplot(iris.j48$finalModel)\nplot(iris.j48$finalModel, type = c('extended'))\n```\n\u30c6\u30ad\u30b9\u30c8\u3067\u306f\u56f313.14\u306e(a), (b)\u304c\u51fa\u529b\u3055\u308c\u308b\u3068\u306a\u3063\u3066\u3044\u308b\u304c\u3001extended\u306e\u6307\u5b9a\u306b\u95a2\u308f\u3089\u305a\u540c\u3058\u56f3\u3067\u3001\u30c6\u30ad\u30b9\u30c8\u3068\u3082\u8868\u793a\u304c\u3084\u3084\u7570\u306a\u308b\u3002RWeka/J48\u3067\u3082caret\u306ej48\u3067\u3082\u540c\u3058\u56f3\u3002\n![Rplot01.png](https://qiita-image-store.s3.amazonaws.com/0/116049/33899ba3-3a11-5642-b880-5dca0ec56079.png)\n\n* ctree\n\n```r\ncars.ctr<-train(dist ~., data = cars, method = 'ctree')\nplot(cars.ctr$finalModel)\nt.style<-node_hist(cars.ctr$finalModel, ymax = 0.06, xscale = c(0, 150), col = 'red', fill = hsv(0.6, 0.5, 1))\nplot(cars.ctr$finalModel, terminal_panel = t.style)\n```\n\n# \u7b2c14\u7ae0 \u30cb\u30e5\u30fc\u30e9\u30eb\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\n\n```r\neven.n<-2 * (1:75)\niris.train<-iris[even.n, ]\niris.test<-iris[-even.n, ]\n\niris.nnet<-train(Species ~., data = iris.train, method = 'nnet', tuneGrid = data.frame(size = 3, decay = 0.1))\niris.nnetp<-predict(iris.nnet, iris.test[, -5])\ntable(iris.test[, 5], iris.nnetp)\n```\n\n## lvq\n\n\u4ee5\u4e0b\u306e\u901a\u308a\u306b\u4e00\u5fdclvq\u306f\u5b9f\u65bd\u3067\u304d\u308b\u304clvqinit\u306b\u5bfe\u5fdc\u3059\u308b\u3082\u306e\u3084\u3001lvq1, lvq2, lvq3, olvq1\u306e\u5225\u306b\u5bfe\u5fdc\u3059\u308b\u3082\u306e\u306f\u306a\u3044\u3088\u3046\u3060\u3002\n\n```r\ncd1<-train(Species ~., data = iris.train, method = 'lvq')\ntest.re<-predict(cd1, iris.test[, -5])\ntable(iris.test[, 5], test.re)\n```\n\n# \u7b2c15\u7ae0 \u30ab\u30fc\u30cd\u30eb\u6cd5\u3068\u30b5\u30dd\u30fc\u30c8\u30d9\u30af\u30bf\u30fc\u30de\u30b7\u30f3\n* kpca\u306f\u306a\u3057\u3002\n\n## \u5224\u5225\n* ksvm\n\n```r\nlibrary(kernlab); data(spam)\nset.seed(50)\ntr.num<-sample(4601, 2500)\nspam.train<-spam[tr.num, ]\nspam.test<-spam[-tr.num, ]\n\n#set.seed(50) #\u30c6\u30ad\u30b9\u30c8\u3068\u540c\u69d8\u306b\u3053\u3053\u3067\u521d\u671f\u5316\u3092\u3059\u308b\u3068\u5024\u304c\u305a\u308c\u308b\u3002SVM\u306e\u672c\u8cea\u3067\u306f\u306a\u3044\u306e\u3067\u3069\u3046\u3067\u3082\u3088\u3044\u304c\u3053\u3053\u3067\u306f\u521d\u671f\u5316\u3092\u306a\u304f\u3057\u305f\u3002\n\n(spam.svm<-train(type ~., data = spam.train, method = 'svmRadial', trControl = \ntrainControl(method = 'CV', number = 3)))\n```\n\n```r\nSupport Vector Machines with Radial Basis Function Kernel \n\n2500 samples\n  57 predictor\n   2 classes: 'nonspam', 'spam' \n\nNo pre-processing\nResampling: Cross-Validated (3 fold) \nSummary of sample sizes: 1667, 1666, 1667 \nResampling results across tuning parameters:\n\n  C     Accuracy   Kappa    \n  0.25  0.9044001  0.7960315\n  0.50  0.9152011  0.8200693\n  1.00  0.9215993  0.8345351\n\nTuning parameter 'sigma' was held constant at a value\n of 0.02769061\nAccuracy was used to select the optimal model using \n the largest value.\nThe final values used for the model were sigma =\n 0.02769061 and C = 1. \n```\n\n```r\nspam.pre<-predict(spam.svm, spam.test[, -58])\n(spam.tab<-table(spam.test[, 58], spam.pre))\n```\n\n```r\n         spam.pre\n          nonspam spam\n  nonspam    1224   58\n  spam         95  724\n```\n\n```r\n1 - sum(diag(spam.tab)) / sum(spam.tab)\n```\n\n```r\n0.07282247\n```\n\u30c6\u30ad\u30b9\u30c8\u3068\u5024\u304c\u7570\u306a\u308b\u304cksvm\u3067\u3082\u540c\u3058\u5024\u3068\u306a\u308b\u3002\n\n```r\ny<-as.matrix(iris[51:150, 5])\niris1<-data.frame(iris[51:150, 3:4], y)\nset.seed(0)\nir.ksvm<-train(y ~., data = iris1, method = 'svmRadial')\n#plot(ir.ksvm, data = iris1[, 1:2]) #\u52d5\u304b\u305a\u3001 ir.ksvm$finalModel\u3060\u3068\u4f5c\u56f3\u3055\u308c\u308b\u304c\u9055\u3046\u56f3\ntable(iris1$y, predict(ir.ksvm, iris1[, 1:2]))\n```\n\n```r\n             versicolor virginica\n  versicolor         47         3\n  virginica           2        48\n```\n\u30c6\u30ad\u30b9\u30c8\u3068\u5024\u304c\u7570\u306a\u308b\u304cksvm\u3067\u3082\u540c\u3058\u5024\u3068\u306a\u308b\u3002\n\n## \u56de\u5e30\n\n```r\nx1<-seq(-10, 10, 0.1); set.seed(10)\ny1<-50 * sin(x1) + x1^2 + 10 * rnorm(length(x1), 0, 1)\nxy.svm<-train(y1 ~ x1, data = data.frame(x1, y1), method = 'svmRadial')\nsy.pre<-predict(xy.svm, x1)\nplot(x1, y1, type = 'l')\nlines(x1, sy.pre, col = 'red', lty = 2)\nlegend(locator(1), c('\u5b9f\u6e2c\u5024', '\u4e88\u6e2c\u5024'), lty = c(1, 2), col = c(1, 2))\n```\nepsilon\u3092\u6307\u5b9a\u3059\u308b\u30e1\u30bd\u30c3\u30c9\u304ccaret\u306esvm\u306b\u306f\u306a\u3044\u306e\u3067\u7565\u3002\n\n# \u7b2c16\u7ae0 \u96c6\u56e3\u5b66\u7fd2\n\u30c6\u30ad\u30b9\u30c8\u3067\u306f adabag \u30d1\u30c3\u30b1\u30fc\u30b8\u3092\u4f7f\u7528\u3057\u3066\u3044\u308b\u3002caret\u3067\u306f adabag \u30d1\u30c3\u30b1\u30fc\u30b8\u3092\u4f7f\u7528\u3059\u308b\u3082\u306e\u3068\u3057\u3066\u3001AdaBag, AdaBoost.M1 \u304c\u3042\u308a\u3001\u524d\u8005\u306f\u30d0\u30ae\u30f3\u30b0\u3068\u30d6\u30fc\u30b9\u30c6\u30a3\u30f3\u30b0\u306e\u4e21\u65b9\u3068\u3057\u3066\u7d39\u4ecb\u3055\u308c\u3001\u5f8c\u8005\u306f\u30d6\u30fc\u30b9\u30c6\u30a3\u30f3\u30b0\u3068\u3057\u3066\u7d39\u4ecb\u3055\u308c\u3066\u3044\u308b\u3002\u3053\u3053\u3067\u306f\u524d\u8005\u3092\u30d0\u30ae\u30f3\u30b0\u3001\u5f8c\u8005\u3092\u30d6\u30fc\u30b9\u30c6\u30a3\u30f3\u30b0\u3068\u3057\u3066\u793a\u3057\u307e\u3059\u3002\n\n## \u30d0\u30ae\u30f3\u30b0\n```r\nlibrary(mlbench)\ndata(BreastCancer)\neven.n<-2 * (1:349)\nBC.train<-BreastCancer[even.n, -1]\nBC.test<-BreastCancer[-even.n, -1]\nfor(i in 1:9) {\n  BC.train[, i]<-as.integer(BC.train[, i])\n  BC.test[, i]<-as.integer(BC.test[, i])\n}\n\n# BC.train \u306b\u306f\u6b20\u640d\u5024\u304c\u3042\u308a\u3001bagging \u3067\u306f\u305d\u306e\u307e\u307e\u6271\u3048\u308b\u3088\u3046\u3060\u304c\u3001\u4e0b\u8a18\u3067\u306f\u305d\u306e\u307e\u307e\u6271\u3048\u306a\u3044\u306e\u3067\u6b20\u640d\u5024\u3092\u57cb\u3081\u308b\u51e6\u7406\u3092\u3059\u308b\u3002\nset.seed(20)\ntmp.pre<-preProcess(BC.train, method = 'bagImpute')\nBC.train<-predict(tmp.pre, BC.train)\n\nset.seed(20)\nBC.ba<-train(Class ~., data = BC.train, method = 'AdaBag')\n\n# \u540c\u69d8\u306bBC.test  \u306b\u3082\u6b20\u640d\u5024\u304c\u3042\u308a\u57cb\u3081\u308b\u51e6\u7406\u3092\u3059\u308b\u3002\nset.seed(20)\ntmp.pre<-preProcess(BC.test, method = 'bagImpute')\nBC.test<-predict(tmp.pre, BC.test)\n\nBC.bap<-predict(BC.ba, BC.test)\nBC.bap<-data.frame(BC.bap); names(BC.bap)<-'class'\n(ta.ba<-table(BC.test[, 10], BC.bap$class))\n```\n\n```r\n            benign malignant\n  benign       216        11\n  malignant      3       120\n```\n\u30c6\u30ad\u30b9\u30c8\u3068\u5024\u304c\u7570\u306a\u3063\u3066\u3057\u307e\u3063\u3066\u3044\u308b\u3002\u6b20\u640d\u5024\u306e\u88dc\u5b8c\u306e\u554f\u984c\u3060\u308d\u3046\u304b\u3001\u3001\u3001\n\n```r\n1 - sum(diag(tb.ba)) / sum(tb.ba)\n```\n\n```r\n[1] 0.04\n```\n\n## \u30d6\u30fc\u30b9\u30c6\u30a3\u30f3\u30b0\n```r\nset.seed(20)\nBC.ad<-train(Class ~., data = BC.train, method = 'AdaBoost.M1')\n\nBC.adp<-predict(BC.ad, newdata = BC.test[, -10])\nBC.adp<-data.frame(BC.adp); names(BC.adp)<-'class'\n(tb.ad<-table(BC.adp$class, BC.test[, 10]))\n```\n\n```r\n            benign malignant\n  benign       219         3\n  malignant      8       120\n```\n\u30c6\u30ad\u30b9\u30c8\u3068\u5024\u304c\u7570\u306a\u3063\u3066\u3057\u307e\u3063\u3066\u3044\u308b\u3002\u6b20\u640d\u5024\u306e\u88dc\u5b8c\u306e\u554f\u984c\u304b\u3082\u3057\u308c\u306a\u3044\u3002\n\n```r\n1 - sum(diag(tb.ad)) / sum(tb.ad)\n```\n\n```r\n[1] 0.03142857\n```\n\n## \u30e9\u30f3\u30c0\u30e0\u30d5\u30a9\u30ec\u30b9\u30c8\n```r\ndata(BreastCancer)\neven.n<-2 * (1:349)\nBC.train<-BreastCancer[even.n, -1]\nBC.test<-BreastCancer[-even.n, -1]\nfor(i in 1:9) {\n  BC.train[, i]<-as.integer(BC.train[, i])\n  BC.test[, i]<-as.integer(BC.test[, i])\n}\n\nBC.train<-na.omit(BC.train)\n\nset.seed(20)\nBC.rf<-train(Class ~., data = BC.train, method = 'rf')\nprint(BC.rf$finalModel)\n```\n\n```r\nCall:\n randomForest(x = x, y = y, mtry = param$mtry) \n               Type of random forest: classification\n                     Number of trees: 500\nNo. of variables tried at each split: 2\n\n        OOB estimate of  error rate: 3.85%\nConfusion matrix:\n          benign malignant class.error\nbenign       214         7  0.03167421\nmalignant      6       111  0.05128205\n```\n\u30c6\u30ad\u30b9\u30c8\u3068\u306f\u5024\u304c\u7570\u306a\u3063\u3066\u3057\u307e\u3063\u3066\u3044\u308b\u3002\u30c6\u30ad\u30b9\u30c8\u3068\u306f\u7570\u306a\u308a\u3001 mtry = param$mtry \u304c\u6307\u5b9a\u3055\u308c\u3066\u3057\u307e\u3063\u3066\u3044\u308b\u305f\u3081\u304b\u3002\u30d1\u30e9\u30e1\u30fc\u30bf\u306e\u6307\u5b9a\u3067\u3069\u3046\u306b\u304b\u306a\u308b\u304b\u3082\u77e5\u308c\u306a\u3044\u304c\u3001\u3053\u3053\u3067\u306f\u30b9\u30eb\u30fc\u3057\u307e\u3059\u3002\n\n```r\nsummary(BC.rf$finalModel)\n```\n\n```r\n                Length Class      Mode     \ncall               4   -none-     call     \ntype               1   -none-     character\npredicted        338   factor     numeric  \nerr.rate        1500   -none-     numeric  \nconfusion          6   -none-     numeric  \nvotes            676   matrix     numeric  \noob.times        338   -none-     numeric  \nclasses            2   -none-     character\nimportance         9   -none-     numeric  \nimportanceSD       0   -none-     NULL     \nlocalImportance    0   -none-     NULL     \nproximity          0   -none-     NULL     \nntree              1   -none-     numeric  \nmtry               1   -none-     numeric  \nforest            14   -none-     list     \ny                338   factor     numeric  \ntest               0   -none-     NULL     \ninbag              0   -none-     NULL     \nxNames             9   -none-     character\nproblemType        1   -none-     character\ntuneValue          1   data.frame list     \nobsLevels          2   -none-     character\n```\ncaret\u4f7f\u7528\u6642\u306f\u3001BC.rf$finalModel \u304c randomForest \u306e\u30e2\u30c7\u30eb\u306b\u8a72\u5f53\u3059\u308b\u4ee5\u4e0b\u3082\u540c\u69d8\u3002\n\n```r\nBC.rf$finalModel$type\n```\n\n```r\n[1] \"classification\"\n```\n\n```r\nplot(BC.rf$finalModel)\n```\n\n```r\nBC.rf$finalModel$importance\n```\n\n```r\n                MeanDecreaseGini\nCl.thickness          10.3031669\nCell.size             31.0735166\nCell.shape            25.1238751\nMarg.adhesion         10.2548693\nEpith.c.size          13.5882463\nBare.nuclei           20.6794913\nBl.cromatin           20.7562703\nNormal.nucleoli       19.0439173\nMitoses                0.9920097\n```\n\n```r\nvarImpPlot(BC.rf$finalModel)\n```\n\n```r\nBC.rfp<-predict(BC.rf, BC.test[, -10])\n(BC.rft<-table(BC.test[, 10], BC.rfp))\n```\n\n```r\n           BC.rfp\n            benign malignant\n  benign       219         8\n  malignant      3       120\n```\n\n```r\n(1 - sum(diag(BC.rft)) / sum(BC.rft))\n```\n\n```r\n[1] 0.03142857\n```\n", "tags": ["R", "caret", "\u30c7\u30fc\u30bf\u30b5\u30a4\u30a8\u30f3\u30b9", "\u30c7\u30fc\u30bf\u5206\u6790", "\u6a5f\u68b0\u5b66\u7fd2"]}