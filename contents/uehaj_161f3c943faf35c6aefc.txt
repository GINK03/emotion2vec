{"context": " More than 1 year has passed since last update.TAPL\u672c(Types And Programming Language\u3001\u578b\u30b7\u30b9\u30c6\u30e0\u5165\u9580)\u306e\u5404\u7ae0\u306b\u3042\u308b\u300cML\u5b9f\u88c5\u300d\u306e\u4f8b\u3092Rust\u306b\u30dd\u30fc\u30c6\u30a3\u30f3\u30b0\u3057\u3066\u307f\u308b\u30b7\u30ea\u30fc\u30ba\u3001\u300c7\u7ae0\u306e\u30e9\u30e0\u30c0\u8a08\u7b97\u306eML\u5b9f\u88c5\u300d\u3067\u3059\u30024\u7ae0\u306e\u306b\u6bd4\u3079\u308b\u3068\u3044\u304d\u306a\u308a\u96e3\u6613\u5ea6\u304c\u4e0a\u304c\u308a\u307e\u3059\u3002\u5168\u4f53\u304b\u3089\u3057\u305f\u3089\u5e8f\u306e\u53e3\u3067\u3057\u3087\u3046\u304c\u3002\n\n\u8aac\u660e\n\nunstable\u306a\u30b2\u30fc\u30c8\u5316\u3055\u308c\u305f\u6a5f\u80fdbox_patterns\u30921\u7b87\u6240\u3067\u4f7f\u7528\u3057\u3066\u3044\u308b\u306e\u3067\u3001Rust 1.0 beta\u3067\u306f\u30b3\u30f3\u30d1\u30a4\u30eb\u3067\u304d\u305a\u3001unstable\u6a5f\u80fd\u304cerror\u306b\u306a\u3089\u306a\u3044nightly\u7248\u3067\u3057\u304b\u30b3\u30f3\u30d1\u30a4\u30eb\u3067\u304d\u307e\u305b\u3093\u3002\u8da3\u65e8\u304b\u3089\u3057\u3066\u3001\u304a\u305d\u3089\u304f1.0 release\u7248\u3067\u3082\u5b9f\u884c\u3067\u304d\u306a\u3044\u3067\u3057\u3087\u3046\u3002\u3067\u3082\u3053\u308c\u3092\u4f7f\u308f\u305a\u306b\u5b9f\u88c5\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u306a\u304b\u3063\u305f\u306e\u3067\u3084\u3080\u306a\u304f\u3002(\u53c2\u8003)\n\u4ee5\u4e0b\u3067named.rs\u306f\u3001\u540d\u7121\u3057\u9805\u3067\u306f\u306a\u304f\u3001\u901a\u5e38\u306e\u9805\u3092\u8868\u73fe\u3059\u308b\u3082\u306e\u3067\u3059\u30027\u7ae0\u306b\u306f\u6307\u5c0e\u304c\u306a\u3044\u304c\u3001\u540d\u7121\u3057\u9805\u3078\u306e\u5909\u63db\u304c\u306a\u3044\u3068\u4f59\u308a\u306b\u4e0d\u4fbf\u306a\u306e\u3067\u4f5c\u308a\u307e\u3057\u305f\u3002\n\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u03bb\u8a08\u7b97\u304c\u8a55\u4fa1\u3067\u304d\u307e\u3059\u3002\n\n     println!(\"{:?}\",\n             apply(abst(\"a\", \n                         apply(abst(\"b\",\n                                    apply(var(\"b\"), abst(\"x\", var(\"b\")))),\n                               apply(var(\"a\"), abst(\"z\", var(\"a\")))\n                               )),\n                    abst(\"w\", var(\"w\"))\n                    ).remove_names().eval());\n// \u7d50\u679c\u306f(lambda w. w)\n\n\n\u6c17\u3065\u3044\u305f\u3053\u3068\u3084\u5de5\u592b\n\nTerm\u306e\u3088\u3046\u306a\u518d\u5e30\u7684\u30c7\u30fc\u30bf\u69cb\u9020\u3092\u5b9f\u73fe\u3059\u308b\u305f\u3081\u306b\u3001enum\u3067owned pointer\u3092\u4f7f\u7528\u3059\u308b\u3068\u3001Box::new\u304c\u983b\u51fa\u3057\u305f\u308a\u3057\u3066\u53ef\u8aad\u6027\u304c\u60aa\u5316\u3059\u308b\u304c\u3001enum\u306e\u30c7\u30fc\u30bf\u69cb\u7bc9\u5b50\u3092\u305d\u306e\u307e\u307e\u4f7f\u3046\u306e\u3067\u306f\u306a\u304f\u3001\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u3001\u5f15\u6570\u306bTerm\u3092\u53d7\u3051\u3068\u3063\u3066Box::new\u3092\u5b9f\u884c\u3057\u305f\u4e0a\u3067\u30c7\u30fc\u30bf\u69cb\u7bc9\u3092\u884c\u3046\u3088\u3046\u306a\u3001\u7c21\u5358\u306a\u30e9\u30c3\u30d1\u30fc\u3092\u4f5c\u308b\u3068\u69cb\u7bc9\u306b\u95a2\u3057\u3066\u306f\u7c21\u6f54\u3055\u3092\u7dad\u6301\u3067\u304d\u308b\u3002\u3064\u3044\u3067\u306b&str\u2192String\u5909\u63db\u3057\u3066\u304a\u304f\u3002\u6b32\u3092\u51fa\u3059\u3068\u3001\u305d\u3046\u3044\u3046\u95a2\u6570\u7fa4\u3092\u81ea\u52d5\u7684derive\u3057\u3066\u304f\u308c\u308b\u3088\u3046\u306aTrait\u304c\u3042\u308c\u3070\u3044\u3044\u306e\u306b\u3002 \n\nfn abst(s:&str, t:Term) -> Term {\n    Abst(s.to_string(), Box::new(t))\n}\n\nfn apply(t1:Term, t2:Term) -> Term {\n    Apply(Box::new(t1), Box::new(t2))\n}\n\n\nde Bruijn Index\u306f\u3001\u6570\u5b66\u7684\u8a3c\u660e\u3068\u306e\u5bfe\u5fdc\u304c\u3057\u3084\u3059\u3044\u4ee5\u5916\u306e\u30e1\u30ea\u30c3\u30c8\u306f\u305f\u3076\u3093\u306a\u304f\u3001\u672c\u5f53\u306e\u30b3\u30f3\u30d1\u30a4\u30e9\u306e\u5b9f\u88c5\u3067\u306f\u5c0e\u5165\u3057\u306a\u3044\u7a2e\u985e\u306e\u3082\u306e\u3068\u601d\u308f\u308c\u308b\u3002\u307e\u3042\u5909\u6570\u540d\u96c6\u5408\u306e\u96c6\u5408\u64cd\u4f5c\u3067\u3084\u308b\u3088\u308a\u306f\u30d7\u30ed\u30b0\u30e9\u30e0\u3063\u307d\u3044\u304c\u3002\n\u4f55\u5ea6\u3082\u8a00\u3046\u304crust\u306e\u30d1\u30bf\u30fc\u30f3\u30de\u30c3\u30c1\u306f\u96e3\u3057\u3044\u6c17\u304c\u3059\u308b\u3002&,mut,ref,box,\u306a\u3069\u304c\u3084\u3063\u304b\u3044\u306b\u3057\u3066\u3044\u308b\u3002\u3082\u3063\u3068\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u3082\u3057\u304f\u306f\u7d4c\u9a13\u304c\u5fc5\u8981\u3060\u3002\nRust\u3067\u306fHaskell\u3084ML\u306e\u3088\u3046\u306b\u5165\u308c\u5b50\u306b\u306a\u3063\u305f\u95a2\u6570\u3067\u89aa\u3092\u30a2\u30af\u30bb\u30b9\u3059\u308b\u3082\u306e\u306f\u5b9a\u7fa9\u3067\u304d\u306a\u3044\u3089\u3057\u3044(\u53c2\u8003)\u3002Closure\u4f7f\u3048\u3070\u3044\u3044\u306e\u3060\u308d\u3046\u304c\u3001\u518d\u5e30\u547c\u3073\u51fa\u3057\u3059\u308bClosure\u306f\u304d\u308c\u3044\u306b\u306f\u5b9a\u7fa9\u3067\u304d\u306a\u3044(\u53c2\u8003)\u3002\n\u74b0\u5883\u5909\u6570RUST_BACKTRACE\u30921\u306b\u3059\u308b\u3068panic!\u6642\u306a\u3069\u306b\u30b9\u30bf\u30c3\u30af\u30c8\u30ec\u30fc\u30b9\u304c\u8868\u793a\u3055\u308c\u308b\u3002env RUST_BACKTRACE=1 cargo test \u307f\u305f\u3044\u306b\u4f7f\u3046\u3068\u3088\u308d\u3057\u3002\n\n\nnameless.rs\n// http://www.cis.upenn.edu/~bcpierce/tapl/checkers/untyped/\n#![allow(dead_code)]\n#![allow(unused_variables)]\n#![allow(unused_imports)]\n\nuse std::fmt::Debug;\nuse std::fmt::Formatter;\nuse std::fmt::Error;\n\n#[derive(Clone,PartialEq)]\npub enum Term {\n    // Single Varialbe\n    Var(isize, // de Bruijn Index.\n        usize), // length of Context where this variable appealed.\n    // Abstraction\n    Abst(String, // lambda variable name\n         Box<Term>), // lambda body\n    // Application\n    Apply(Box<Term>, // function\n          Box<Term>) // argument\n}\n\n#[derive(Debug,Clone)]\npub enum Binding {\n    NameBind\n}\n\npub type Context = Vec<(String, Binding)>;\n\nfn index2name(ctx: &Context, idx: isize) -> String {\n    if idx > ctx.len() as isize-1 {\n        return format!(\"fv{}\", idx)\n    }\n    ctx[(ctx.len() as isize-idx-1) as usize].0.to_string()\n}\n\nuse nameless::Term::*;\n\npub fn add_name(ctx:&Context, name:&String) -> Context {\n    let mut new_ctx = ctx.clone();\n    new_ctx.push((name.clone(), Binding::NameBind));\n    new_ctx\n}\n\nfn pick_fresh_name(ctx:&Context, x:&String) -> (Context, String) {\n    if ctx.iter().any(|&(ref var_name,_)|{*var_name==*x}) {\n        //\u540d\u524dx\u304cctx\u306b\u5b58\u5728(\u91cd\u8907)\u3057\u3066\u3044\u305f\u3089\u3001\u65b0\u898f\u540d\u79f0\u306b\u5909\u66f4\u3057\u3066\u518d\u30c8\u30e9\u30a4\n        pick_fresh_name(ctx, &format!(\"{}'\", x))\n    }\n    else { // \u91cd\u8907\u3057\u306a\u3044\u540d\u524d\u3092\u5f97\u305f\u3089\n        // ctx\u306b\u305d\u306e\u540d\u524d\u3092\u767b\u9332\u3057\u3066\u3001(ctx,\u305d\u306e\u540d\u524d)\u3092\u8fd4\u3059\u3002\n        (add_name(ctx, x), x.clone())\n    }\n}\n\nfn print_term(ctx:&Context, t:&Term) -> String {\n    match *t {\n        Abst(ref var_name, ref t1) => {\n            // \u03bb var_name . t1 \u306f\u3001var_name\u3092\u74b0\u5883ctx\u3067\u30e6\u30cb\u30fc\u30af\u3067\u3042\u308bx_\u306b\u3057\u305f\u4e0a\u3067\u3001\n            // x_\u3092ctx\u306b\u767b\u9332\u3057\u305d\u306ex_\u3092\u767b\u9332\u3057\u305fctx(ctx_)\u306e\u5143\u3067\u3001t1\u3092\u8868\u793a\u3059\u308b\u3002\n            let (ctx_, x_) = pick_fresh_name(ctx, var_name);\n            format!(\"(lambda {}. {})\", x_, print_term(&ctx_, &t1))\n        },\n        Apply(ref t1, ref t2) => {\n            format!(\"({} {})\", print_term(ctx, &t1), print_term(ctx, &t2))\n        },\n        Var(x, n) => {\n            if ctx.len() == n {\n                format!(\"{}\", index2name(ctx, x))\n            } else {\n                format!(\"[bad index, ctx.len={}, n={}]\", ctx.len(), n).to_string()\n            }\n        }\n    }\n}\n\nimpl Debug for Term {\n    fn fmt(&self, fmt:&mut Formatter) -> Result<(), Error> {\n        fmt.write_str(&format!(\"{}\", print_term(&vec![], self)))\n    }\n}\n\nfn term_shift(d:isize, t:&Term) -> Term {\n    fn term_shift_helper(c:isize, d:isize, t:&Term) -> Term {\n        match *t {\n            Var(x, n) =>\n                if x >= c { Var(x+d, (n as isize + d) as usize) }\n                else { Var(x, (n as isize + d) as usize) },\n            Abst(ref x, ref t1) =>\n                Abst(x.clone(), Box::new(term_shift_helper(c+1, d, &t1))),\n            Apply(ref t1, ref t2) =>\n                Apply(Box::new(term_shift_helper(c, d, t1)), Box::new(term_shift_helper(c, d, t2)))\n        }\n    }\n\n    term_shift_helper(0, d, t)\n}\n\nfn term_subst(j:isize, s:&Term, t:&Term) -> Term {\n    fn term_subst_helper(j:isize, s:&Term, c:isize, t:&Term) -> Term {\n        match *t {\n            Var(x, n) =>\n                if x == j+c { term_shift(c, s) } else { Var(x, n) },\n            Abst(ref x, ref t1) =>\n                Abst(x.clone(), Box::new(term_subst_helper(j, s, c+1, t1))),\n            Apply(ref t1, ref t2) =>\n                Apply(Box::new(term_subst_helper(j, s, c, t1)), Box::new(term_subst_helper(j, s, c, t2)))\n        }\n    }\n    term_subst_helper(j, s, 0, t)\n}\n\nfn term_subst_top(s:&Term, t:&Term) -> Term {\n    // Apply(Abst(x, t12), v2@Abst(_,_))\n    //\n    //                        -1        1\n    // (\u03bb.t12) v2    \u2192    \u2191   ([0\u2192\u2191  (v2)] t12)\n    //\n    // \u300cApply(Abst(x, t12), v2@Abst(_,_))\u300d\u306e\u8a55\u4fa1\u306f\u3001t12\u304c\u4f7f\u7528\u3057\u3066\n    // \u3044\u308b\u5909\u6570x(de Bruijn index=0)\u3092v2\u3067\u7f6e\u63db\u3059\u308b\u3068\u3044\u3046\u3053\u3068\u3067\u3042\u308b\n    // (\u03b2\u7c21\u7d04)\u3002\u3057\u304b\u3057\u3001v2\u3082(de Bruijn index 0)\u3092\u53c2\u7167\u3057\u3066\u3044\u308b\u53ef\u80fd\n    // \u6027\u304c\u3042\u308b\u306e\u3067\u3001\u5358\u306a\u308b\u7f6e\u63db\u306f\u3067\u304d\u306a\u3044\u3002\u305d\u306e\u305f\u3081\u306b\u306f\u3001v2\u306e(de\n    // Bruijn index 0)\u3092(de Bruijn index 1)\u306b\u3059\u308b\u5fc5\u8981\u304c\u3042\u308b\u3002\u3055\u3089\u306b\u3001\n    // v2\u306f\u3082\u3068\u3082\u3068(de Bruijn index 1)\u3092\u4f7f\u7528\u3057\u3066\u3044\u308b\u304b\u3082\u3057\u308c\u306a\u3044\u306e\n    // \u3067\u30010\u21921\u30011\u21922\u30012\u21923...\u3068\u3044\u3046\u3088\u3046\u306bv2\u3067\u4f7f\u7528\u3057\u3066\u3044\u308b\u5909\u6570\u3059\u3079\n    // \u3066\u306e\u7389\u3064\u304d\u3067\u306e\u5897\u52a0\u304c\u5fc5\u8981\u3002\u3053\u308c\u304c\u5185\u5074\u306e\u30b7\u30d5\u30c8\u64cd\u4f5c\n    //      1\n    // 0\u2192\u2191  (v2) \n    // \u306e\u610f\u5473\u3067\u3042\u308b\u3002\n    // \u4e0a\u8a18\u3088\u308a\u3001\u7121\u4e8bv2\u304b\u3089(de Bruijn index 0)\u3092\u6d88\u53bb\u3067\u304d\u305f\u3068\u3057\u3066\u3001\n    // \u03bb\u306e\u4e2d\u306b\u3042\u3063\u305ft12\u3092\u3001\u03bb\u53d6\u3063\u3066\u305d\u306e\u5916\u5074\u306e\u4e2d\u3067\u901a\u7528\u3059\u308b\u5024\u3068\u3057\u3066\n    // \u6a5f\u80fd\u3055\u305b\u308b\u306b\u306f\u3001\u30cd\u30b9\u30c8\u30ec\u30d9\u30eb\u3092\u4e00\u500b\u6d45\u304f\u3059\u308b\u5fc5\u8981\u304c\u3042\u308b\u3002\u3053\u308c\u304c\n    // \u5916\u5074\u306e\n    //   -1\n    // \u2191\n    // \u306e\u64cd\u4f5c\u3067\u3042\u308b\u3002\u3053\u308c\u304c\u610f\u5473\u3059\u308b\u306e\u306f\u6700\u5185\u5468\u306e\u5909\u6570(de Bruijn\n    // index 0)\u306e\u524a\u9664\u3067\u3042\u308a\u3001de Bruijn index 1\u4ee5\u4e0a\u306e\u5909\u6570\u3092\u305d\u308c\u305e\u308c\n    // 1\u500b\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u304c\u6e1b\u308b\u3088\u3046\u306b\u305a\u3089\u3059\u3002t12\u306e(de Bruijn index 0)\n    // \u3092v2\u3067\u7f6e\u63db\u3057\u305f\u7d50\u679c\u306b\u306f\u3001(de Bruijn index 0)\u306f(\u7f6e\u63db\u3055\u308c\u3066\u3044\u308b\n    // \u306e\u3067)\u3082\u3046\u5b58\u5728\u3057\u3066\u3044\u306a\u3044\u306e\u3067\u3001\u3053\u308c\u306f\u5b89\u5168\u306b\u5b9f\u884c\u3067\u304d\u308b\u3002\n    term_shift(-1, &term_subst(0, &term_shift(1, s), t))\n}\n\nfn is_val(t: &Term) -> bool {\n    match *t {\n        Abst(_,_) => true,\n        _ => false\n    }\n}\n\nfn eval1(ctx:&Context, t:&Term) -> Option<Term> {\n    match t {\n        &Apply(box Abst(ref x, box ref t12), ref v2) if is_val(v2) => {\n            Some(term_subst_top(v2, &t12))\n        },\n        // Apply(v1@Abst(_,_), t2)\n        // (\u03bb _._) t2\n        &Apply(ref v1, ref t2) if is_val(v1) => {\n            match eval1(ctx, t2) {\n                Some(t2_) => {\n                    // (\u03bb _._) t2_\n                    Some(Apply(v1.clone(), Box::new(t2_)))\n                },\n                None => None\n            }\n        },\n        // Apply(t1, t2)\n        &Apply(ref t1, ref t2) => {\n            match eval1(ctx, &t1) {\n                Some(t1_) => Some(Apply(Box::new(t1_), t2.clone())),\n                None => None\n            }\n        },\n        _ => None\n    }\n}\n\nfn eval(ctx:&Context, t:&Term) -> Term {\n    match eval1(ctx, &t) {\n        Some(x) => x.eval(),\n        None => t.clone()\n    }\n}\n\nimpl Term {\n    pub fn eval(&self) -> Term {\n        eval(&vec![], self)\n    }\n}\n\nfn abst(s:&str, t:Term) -> Term {\n    Abst(s.to_string(), Box::new(t))\n}\n\nfn apply(t1:Term, t2:Term) -> Term {\n    Apply(Box::new(t1), Box::new(t2))\n}\n\n\n\n\u30c6\u30b9\u30c8\u30b3\u30fc\u30c9\u3092\u542b\u3081\u305f\u3082\u306e\u306f\u3053\u3061\u3089\u306egist\u306b\u3042\u308a\u307e\u3059\u3002\n[TAPL\u672c(Types And Programming Language\u3001\u578b\u30b7\u30b9\u30c6\u30e0\u5165\u9580)](http://www.amazon.co.jp/exec/obidos/ASIN/4274069117/uehaj-22/ref=nosim/)\u306e\u5404\u7ae0\u306b\u3042\u308b\u300cML\u5b9f\u88c5\u300d\u306e\u4f8b\u3092Rust\u306b\u30dd\u30fc\u30c6\u30a3\u30f3\u30b0\u3057\u3066\u307f\u308b\u30b7\u30ea\u30fc\u30ba\u3001\u300c7\u7ae0\u306e\u30e9\u30e0\u30c0\u8a08\u7b97\u306eML\u5b9f\u88c5\u300d\u3067\u3059\u3002[4\u7ae0\u306e](http://qiita.com/uehaj/items/1ac71855d05132d54eb8)\u306b\u6bd4\u3079\u308b\u3068\u3044\u304d\u306a\u308a\u96e3\u6613\u5ea6\u304c\u4e0a\u304c\u308a\u307e\u3059\u3002\u5168\u4f53\u304b\u3089\u3057\u305f\u3089\u5e8f\u306e\u53e3\u3067\u3057\u3087\u3046\u304c\u3002\n\n\n# \u8aac\u660e\n\n- unstable\u306a\u30b2\u30fc\u30c8\u5316\u3055\u308c\u305f\u6a5f\u80fd[box_patterns](https://doc.rust-lang.org/book/box-syntax-and-patterns.html)\u30921\u7b87\u6240\u3067\u4f7f\u7528\u3057\u3066\u3044\u308b\u306e\u3067\u3001Rust 1.0 beta\u3067\u306f\u30b3\u30f3\u30d1\u30a4\u30eb\u3067\u304d\u305a\u3001unstable\u6a5f\u80fd\u304cerror\u306b\u306a\u3089\u306a\u3044nightly\u7248\u3067\u3057\u304b\u30b3\u30f3\u30d1\u30a4\u30eb\u3067\u304d\u307e\u305b\u3093\u3002\u8da3\u65e8\u304b\u3089\u3057\u3066\u3001\u304a\u305d\u3089\u304f1.0 release\u7248\u3067\u3082\u5b9f\u884c\u3067\u304d\u306a\u3044\u3067\u3057\u3087\u3046\u3002\u3067\u3082\u3053\u308c\u3092\u4f7f\u308f\u305a\u306b\u5b9f\u88c5\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u306a\u304b\u3063\u305f\u306e\u3067\u3084\u3080\u306a\u304f\u3002([\u53c2\u8003](https://github.com/rust-lang/rfcs/blob/master/text/0469-feature-gate-box-patterns.md))\n- \u4ee5\u4e0b\u3067named.rs\u306f\u3001\u540d\u7121\u3057\u9805\u3067\u306f\u306a\u304f\u3001\u901a\u5e38\u306e\u9805\u3092\u8868\u73fe\u3059\u308b\u3082\u306e\u3067\u3059\u30027\u7ae0\u306b\u306f\u6307\u5c0e\u304c\u306a\u3044\u304c\u3001\u540d\u7121\u3057\u9805\u3078\u306e\u5909\u63db\u304c\u306a\u3044\u3068\u4f59\u308a\u306b\u4e0d\u4fbf\u306a\u306e\u3067\u4f5c\u308a\u307e\u3057\u305f\u3002\n- \u4ee5\u4e0b\u306e\u3088\u3046\u306a\u03bb\u8a08\u7b97\u304c\u8a55\u4fa1\u3067\u304d\u307e\u3059\u3002\n \n```rust\n     println!(\"{:?}\",\n             apply(abst(\"a\", \n                         apply(abst(\"b\",\n                                    apply(var(\"b\"), abst(\"x\", var(\"b\")))),\n                               apply(var(\"a\"), abst(\"z\", var(\"a\")))\n                               )),\n                    abst(\"w\", var(\"w\"))\n                    ).remove_names().eval());\n// \u7d50\u679c\u306f(lambda w. w)\n```\n\n# \u6c17\u3065\u3044\u305f\u3053\u3068\u3084\u5de5\u592b\n\n- Term\u306e\u3088\u3046\u306a\u518d\u5e30\u7684\u30c7\u30fc\u30bf\u69cb\u9020\u3092\u5b9f\u73fe\u3059\u308b\u305f\u3081\u306b\u3001enum\u3067owned pointer\u3092\u4f7f\u7528\u3059\u308b\u3068\u3001Box::new\u304c\u983b\u51fa\u3057\u305f\u308a\u3057\u3066\u53ef\u8aad\u6027\u304c\u60aa\u5316\u3059\u308b\u304c\u3001enum\u306e\u30c7\u30fc\u30bf\u69cb\u7bc9\u5b50\u3092\u305d\u306e\u307e\u307e\u4f7f\u3046\u306e\u3067\u306f\u306a\u304f\u3001\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u3001\u5f15\u6570\u306bTerm\u3092\u53d7\u3051\u3068\u3063\u3066Box::new\u3092\u5b9f\u884c\u3057\u305f\u4e0a\u3067\u30c7\u30fc\u30bf\u69cb\u7bc9\u3092\u884c\u3046\u3088\u3046\u306a\u3001\u7c21\u5358\u306a\u30e9\u30c3\u30d1\u30fc\u3092\u4f5c\u308b\u3068\u69cb\u7bc9\u306b\u95a2\u3057\u3066\u306f\u7c21\u6f54\u3055\u3092\u7dad\u6301\u3067\u304d\u308b\u3002\u3064\u3044\u3067\u306b&str\u2192String\u5909\u63db\u3057\u3066\u304a\u304f\u3002\u6b32\u3092\u51fa\u3059\u3068\u3001\u305d\u3046\u3044\u3046\u95a2\u6570\u7fa4\u3092\u81ea\u52d5\u7684derive\u3057\u3066\u304f\u308c\u308b\u3088\u3046\u306aTrait\u304c\u3042\u308c\u3070\u3044\u3044\u306e\u306b\u3002 \n\n```\nfn abst(s:&str, t:Term) -> Term {\n    Abst(s.to_string(), Box::new(t))\n}\n\nfn apply(t1:Term, t2:Term) -> Term {\n    Apply(Box::new(t1), Box::new(t2))\n}\n```\n\n- de Bruijn Index\u306f\u3001\u6570\u5b66\u7684\u8a3c\u660e\u3068\u306e\u5bfe\u5fdc\u304c\u3057\u3084\u3059\u3044\u4ee5\u5916\u306e\u30e1\u30ea\u30c3\u30c8\u306f\u305f\u3076\u3093\u306a\u304f\u3001\u672c\u5f53\u306e\u30b3\u30f3\u30d1\u30a4\u30e9\u306e\u5b9f\u88c5\u3067\u306f\u5c0e\u5165\u3057\u306a\u3044\u7a2e\u985e\u306e\u3082\u306e\u3068\u601d\u308f\u308c\u308b\u3002\u307e\u3042\u5909\u6570\u540d\u96c6\u5408\u306e\u96c6\u5408\u64cd\u4f5c\u3067\u3084\u308b\u3088\u308a\u306f\u30d7\u30ed\u30b0\u30e9\u30e0\u3063\u307d\u3044\u304c\u3002\n- \u4f55\u5ea6\u3082\u8a00\u3046\u304crust\u306e\u30d1\u30bf\u30fc\u30f3\u30de\u30c3\u30c1\u306f\u96e3\u3057\u3044\u6c17\u304c\u3059\u308b\u3002&,mut,ref,box,\u306a\u3069\u304c\u3084\u3063\u304b\u3044\u306b\u3057\u3066\u3044\u308b\u3002\u3082\u3063\u3068\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u3082\u3057\u304f\u306f\u7d4c\u9a13\u304c\u5fc5\u8981\u3060\u3002\n- Rust\u3067\u306fHaskell\u3084ML\u306e\u3088\u3046\u306b\u5165\u308c\u5b50\u306b\u306a\u3063\u305f\u95a2\u6570\u3067\u89aa\u3092\u30a2\u30af\u30bb\u30b9\u3059\u308b\u3082\u306e\u306f\u5b9a\u7fa9\u3067\u304d\u306a\u3044\u3089\u3057\u3044([\u53c2\u8003](http://stackoverflow.com/questions/26685666/a-local-function-in-rust))\u3002Closure\u4f7f\u3048\u3070\u3044\u3044\u306e\u3060\u308d\u3046\u304c\u3001\u518d\u5e30\u547c\u3073\u51fa\u3057\u3059\u308bClosure\u306f\u304d\u308c\u3044\u306b\u306f\u5b9a\u7fa9\u3067\u304d\u306a\u3044([\u53c2\u8003](http://stackoverflow.com/questions/16946888/recursive-closure-in-rust))\u3002\n- \u74b0\u5883\u5909\u6570RUST_BACKTRACE\u30921\u306b\u3059\u308b\u3068panic!\u6642\u306a\u3069\u306b\u30b9\u30bf\u30c3\u30af\u30c8\u30ec\u30fc\u30b9\u304c\u8868\u793a\u3055\u308c\u308b\u3002```env RUST_BACKTRACE=1 cargo test``` \u307f\u305f\u3044\u306b\u4f7f\u3046\u3068\u3088\u308d\u3057\u3002\n\n```rust:nameless.rs\n// http://www.cis.upenn.edu/~bcpierce/tapl/checkers/untyped/\n#![allow(dead_code)]\n#![allow(unused_variables)]\n#![allow(unused_imports)]\n\nuse std::fmt::Debug;\nuse std::fmt::Formatter;\nuse std::fmt::Error;\n\n#[derive(Clone,PartialEq)]\npub enum Term {\n    // Single Varialbe\n    Var(isize, // de Bruijn Index.\n        usize), // length of Context where this variable appealed.\n    // Abstraction\n    Abst(String, // lambda variable name\n         Box<Term>), // lambda body\n    // Application\n    Apply(Box<Term>, // function\n          Box<Term>) // argument\n}\n\n#[derive(Debug,Clone)]\npub enum Binding {\n    NameBind\n}\n\npub type Context = Vec<(String, Binding)>;\n\nfn index2name(ctx: &Context, idx: isize) -> String {\n    if idx > ctx.len() as isize-1 {\n        return format!(\"fv{}\", idx)\n    }\n    ctx[(ctx.len() as isize-idx-1) as usize].0.to_string()\n}\n\nuse nameless::Term::*;\n\npub fn add_name(ctx:&Context, name:&String) -> Context {\n    let mut new_ctx = ctx.clone();\n    new_ctx.push((name.clone(), Binding::NameBind));\n    new_ctx\n}\n\nfn pick_fresh_name(ctx:&Context, x:&String) -> (Context, String) {\n    if ctx.iter().any(|&(ref var_name,_)|{*var_name==*x}) {\n        //\u540d\u524dx\u304cctx\u306b\u5b58\u5728(\u91cd\u8907)\u3057\u3066\u3044\u305f\u3089\u3001\u65b0\u898f\u540d\u79f0\u306b\u5909\u66f4\u3057\u3066\u518d\u30c8\u30e9\u30a4\n        pick_fresh_name(ctx, &format!(\"{}'\", x))\n    }\n    else { // \u91cd\u8907\u3057\u306a\u3044\u540d\u524d\u3092\u5f97\u305f\u3089\n        // ctx\u306b\u305d\u306e\u540d\u524d\u3092\u767b\u9332\u3057\u3066\u3001(ctx,\u305d\u306e\u540d\u524d)\u3092\u8fd4\u3059\u3002\n        (add_name(ctx, x), x.clone())\n    }\n}\n\nfn print_term(ctx:&Context, t:&Term) -> String {\n    match *t {\n        Abst(ref var_name, ref t1) => {\n            // \u03bb var_name . t1 \u306f\u3001var_name\u3092\u74b0\u5883ctx\u3067\u30e6\u30cb\u30fc\u30af\u3067\u3042\u308bx_\u306b\u3057\u305f\u4e0a\u3067\u3001\n            // x_\u3092ctx\u306b\u767b\u9332\u3057\u305d\u306ex_\u3092\u767b\u9332\u3057\u305fctx(ctx_)\u306e\u5143\u3067\u3001t1\u3092\u8868\u793a\u3059\u308b\u3002\n            let (ctx_, x_) = pick_fresh_name(ctx, var_name);\n            format!(\"(lambda {}. {})\", x_, print_term(&ctx_, &t1))\n        },\n        Apply(ref t1, ref t2) => {\n            format!(\"({} {})\", print_term(ctx, &t1), print_term(ctx, &t2))\n        },\n        Var(x, n) => {\n            if ctx.len() == n {\n                format!(\"{}\", index2name(ctx, x))\n            } else {\n                format!(\"[bad index, ctx.len={}, n={}]\", ctx.len(), n).to_string()\n            }\n        }\n    }\n}\n\nimpl Debug for Term {\n    fn fmt(&self, fmt:&mut Formatter) -> Result<(), Error> {\n        fmt.write_str(&format!(\"{}\", print_term(&vec![], self)))\n    }\n}\n\nfn term_shift(d:isize, t:&Term) -> Term {\n    fn term_shift_helper(c:isize, d:isize, t:&Term) -> Term {\n        match *t {\n            Var(x, n) =>\n                if x >= c { Var(x+d, (n as isize + d) as usize) }\n                else { Var(x, (n as isize + d) as usize) },\n            Abst(ref x, ref t1) =>\n                Abst(x.clone(), Box::new(term_shift_helper(c+1, d, &t1))),\n            Apply(ref t1, ref t2) =>\n                Apply(Box::new(term_shift_helper(c, d, t1)), Box::new(term_shift_helper(c, d, t2)))\n        }\n    }\n\n    term_shift_helper(0, d, t)\n}\n\nfn term_subst(j:isize, s:&Term, t:&Term) -> Term {\n    fn term_subst_helper(j:isize, s:&Term, c:isize, t:&Term) -> Term {\n        match *t {\n            Var(x, n) =>\n                if x == j+c { term_shift(c, s) } else { Var(x, n) },\n            Abst(ref x, ref t1) =>\n                Abst(x.clone(), Box::new(term_subst_helper(j, s, c+1, t1))),\n            Apply(ref t1, ref t2) =>\n                Apply(Box::new(term_subst_helper(j, s, c, t1)), Box::new(term_subst_helper(j, s, c, t2)))\n        }\n    }\n    term_subst_helper(j, s, 0, t)\n}\n\nfn term_subst_top(s:&Term, t:&Term) -> Term {\n    // Apply(Abst(x, t12), v2@Abst(_,_))\n    //\n    //                        -1        1\n    // (\u03bb.t12) v2    \u2192    \u2191   ([0\u2192\u2191  (v2)] t12)\n    //\n    // \u300cApply(Abst(x, t12), v2@Abst(_,_))\u300d\u306e\u8a55\u4fa1\u306f\u3001t12\u304c\u4f7f\u7528\u3057\u3066\n    // \u3044\u308b\u5909\u6570x(de Bruijn index=0)\u3092v2\u3067\u7f6e\u63db\u3059\u308b\u3068\u3044\u3046\u3053\u3068\u3067\u3042\u308b\n    // (\u03b2\u7c21\u7d04)\u3002\u3057\u304b\u3057\u3001v2\u3082(de Bruijn index 0)\u3092\u53c2\u7167\u3057\u3066\u3044\u308b\u53ef\u80fd\n    // \u6027\u304c\u3042\u308b\u306e\u3067\u3001\u5358\u306a\u308b\u7f6e\u63db\u306f\u3067\u304d\u306a\u3044\u3002\u305d\u306e\u305f\u3081\u306b\u306f\u3001v2\u306e(de\n    // Bruijn index 0)\u3092(de Bruijn index 1)\u306b\u3059\u308b\u5fc5\u8981\u304c\u3042\u308b\u3002\u3055\u3089\u306b\u3001\n    // v2\u306f\u3082\u3068\u3082\u3068(de Bruijn index 1)\u3092\u4f7f\u7528\u3057\u3066\u3044\u308b\u304b\u3082\u3057\u308c\u306a\u3044\u306e\n    // \u3067\u30010\u21921\u30011\u21922\u30012\u21923...\u3068\u3044\u3046\u3088\u3046\u306bv2\u3067\u4f7f\u7528\u3057\u3066\u3044\u308b\u5909\u6570\u3059\u3079\n    // \u3066\u306e\u7389\u3064\u304d\u3067\u306e\u5897\u52a0\u304c\u5fc5\u8981\u3002\u3053\u308c\u304c\u5185\u5074\u306e\u30b7\u30d5\u30c8\u64cd\u4f5c\n    //      1\n    // 0\u2192\u2191  (v2) \n    // \u306e\u610f\u5473\u3067\u3042\u308b\u3002\n    // \u4e0a\u8a18\u3088\u308a\u3001\u7121\u4e8bv2\u304b\u3089(de Bruijn index 0)\u3092\u6d88\u53bb\u3067\u304d\u305f\u3068\u3057\u3066\u3001\n    // \u03bb\u306e\u4e2d\u306b\u3042\u3063\u305ft12\u3092\u3001\u03bb\u53d6\u3063\u3066\u305d\u306e\u5916\u5074\u306e\u4e2d\u3067\u901a\u7528\u3059\u308b\u5024\u3068\u3057\u3066\n    // \u6a5f\u80fd\u3055\u305b\u308b\u306b\u306f\u3001\u30cd\u30b9\u30c8\u30ec\u30d9\u30eb\u3092\u4e00\u500b\u6d45\u304f\u3059\u308b\u5fc5\u8981\u304c\u3042\u308b\u3002\u3053\u308c\u304c\n    // \u5916\u5074\u306e\n    //   -1\n    // \u2191\n    // \u306e\u64cd\u4f5c\u3067\u3042\u308b\u3002\u3053\u308c\u304c\u610f\u5473\u3059\u308b\u306e\u306f\u6700\u5185\u5468\u306e\u5909\u6570(de Bruijn\n    // index 0)\u306e\u524a\u9664\u3067\u3042\u308a\u3001de Bruijn index 1\u4ee5\u4e0a\u306e\u5909\u6570\u3092\u305d\u308c\u305e\u308c\n    // 1\u500b\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u304c\u6e1b\u308b\u3088\u3046\u306b\u305a\u3089\u3059\u3002t12\u306e(de Bruijn index 0)\n    // \u3092v2\u3067\u7f6e\u63db\u3057\u305f\u7d50\u679c\u306b\u306f\u3001(de Bruijn index 0)\u306f(\u7f6e\u63db\u3055\u308c\u3066\u3044\u308b\n    // \u306e\u3067)\u3082\u3046\u5b58\u5728\u3057\u3066\u3044\u306a\u3044\u306e\u3067\u3001\u3053\u308c\u306f\u5b89\u5168\u306b\u5b9f\u884c\u3067\u304d\u308b\u3002\n    term_shift(-1, &term_subst(0, &term_shift(1, s), t))\n}\n\nfn is_val(t: &Term) -> bool {\n    match *t {\n        Abst(_,_) => true,\n        _ => false\n    }\n}\n\nfn eval1(ctx:&Context, t:&Term) -> Option<Term> {\n    match t {\n        &Apply(box Abst(ref x, box ref t12), ref v2) if is_val(v2) => {\n            Some(term_subst_top(v2, &t12))\n        },\n        // Apply(v1@Abst(_,_), t2)\n        // (\u03bb _._) t2\n        &Apply(ref v1, ref t2) if is_val(v1) => {\n            match eval1(ctx, t2) {\n                Some(t2_) => {\n                    // (\u03bb _._) t2_\n                    Some(Apply(v1.clone(), Box::new(t2_)))\n                },\n                None => None\n            }\n        },\n        // Apply(t1, t2)\n        &Apply(ref t1, ref t2) => {\n            match eval1(ctx, &t1) {\n                Some(t1_) => Some(Apply(Box::new(t1_), t2.clone())),\n                None => None\n            }\n        },\n        _ => None\n    }\n}\n\nfn eval(ctx:&Context, t:&Term) -> Term {\n    match eval1(ctx, &t) {\n        Some(x) => x.eval(),\n        None => t.clone()\n    }\n}\n\nimpl Term {\n    pub fn eval(&self) -> Term {\n        eval(&vec![], self)\n    }\n}\n\nfn abst(s:&str, t:Term) -> Term {\n    Abst(s.to_string(), Box::new(t))\n}\n\nfn apply(t1:Term, t2:Term) -> Term {\n    Apply(Box::new(t1), Box::new(t2))\n}\n\n```\n\n\u30c6\u30b9\u30c8\u30b3\u30fc\u30c9\u3092\u542b\u3081\u305f\u3082\u306e\u306f[\u3053\u3061\u3089\u306egist](https://gist.github.com/uehaj/07a2f4856a2c51df4e1f)\u306b\u3042\u308a\u307e\u3059\u3002\n", "tags": ["rustrustc 1.0.0-nightly (6790b0e51 2015-04-11) (built 2015-04-11)"]}