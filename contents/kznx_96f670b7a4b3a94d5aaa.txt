{"context": "\n\n\u306f\u3058\u3081\u306b\n\u6697\u53f7\u5316\u3055\u308c\u305f\u901a\u4fe1\u304b\u3001\u6697\u53f7\u5316\u3055\u308c\u3066\u306a\u3044\u901a\u4fe1\u304b\u3001\u30dd\u30fc\u30c8\u756a\u53f7\u306a\u3069\u306e\u60c5\u5831\u3092\u4f7f\u308f\u305a\u306b\u901a\u4fe1\u306e\u7279\u5fb4\u91cf\u3060\u3051\u3092\u4f7f\u3063\u3066\u3001\u30cb\u30e5\u30fc\u30e9\u30eb\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u3067\u8b58\u5225\u3067\u304d\u308b\u304b\u8a66\u3057\u3066\u307f\u307e\u3057\u305f\u3002\u7d50\u679c\u3068\u3057\u3066\u306f99%\u4ee5\u4e0a\u306e\u7cbe\u5ea6\u3067\u8b58\u5225\u3067\u304d\u307e\u3057\u305f\u3002\n\n\u8a66\u3057\u3066\u307f\u305f\u6761\u4ef6\n\u30cb\u30e5\u30fc\u30e9\u30eb\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\uff1a\u5168\u7d50\u5408\u306e2\u5c64\n\u30d5\u30ec\u30fc\u30e0\u30ef\u30fc\u30af\uff1akeras (tensorflow backend)\n\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\uff1aDARPA 1999 Week3 data set ( https://projects.cs.dal.ca/projectx/Download.html ) \u3092\u4e00\u90e8\u5909\u66f4\u3057\u3066\u5229\u7528\n\n\u30b3\u30fc\u30c9\u3068\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\ngithub\u306b\u7f6e\u304d\u307e\u3057\u305f\u3002\nhttps://github.com/kznx/traffic_classification/tree/master/ssh_or_not\n\n\u8aac\u660e\n\n\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u306e\u8aad\u307f\u8fbc\u307f\n\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u304c arff \u3068\u3044\u3046\u30d5\u30a9\u30fc\u30de\u30c3\u30c8\u306a\u306e\u3067\u3001\u4e0b\u8a18\u306e\u3088\u3046\u306b\u8aad\u307f\u8fbc\u307f\u3001numpy\u306earray\u306b\u3057\u307e\u3059\u3002\nhttp://qiita.com/kznx/items/59c4b50f944c0d6079c1\n\n\u6b63\u898f\u5316\nkeras\u3067\u306f\u3001\u30c7\u30fc\u30bf\u3092\u6b63\u898f\u5316\u3059\u308b\u5fc5\u8981\u304c\u3042\u308b\u3088\u3046\u306a\u306e\u3067\u3001scikit-learn\u306eMinMaxScaler\u3092\u4f7f\u3044\u3001\u6b63\u898f\u5316\u3057\u307e\u3059\u3002\nmms = MinMaxScaler()\nx_norm = mms.fit_transform(train)\n\n\n\u30c7\u30fc\u30bf\u306e\u5206\u96e2\n\u8a13\u7df4\u7528\u30c7\u30fc\u30bf\u3068\u30c6\u30b9\u30c8\u7528\u30c7\u30fc\u30bf\u306b\u5206\u96e2\u3057\u307e\u3059\u3002scikit-learn\u306ecross_validation\u3092\u4f7f\u3044\u307e\u3059\u3002\ntrain_x, test_x, train_y, test_y = cross_validation.train_test_split(\n    x_norm, target, test_size=0.2\n)\n\n\n\u6b63\u89e3\u30c7\u30fc\u30bf\u306e\u30d5\u30a9\u30fc\u30de\u30c3\u30c8\u3092\u5909\u66f4\u3057\u307e\u3059\ny_train = np_utils.to_categorical(train_y, 2)\ny_test = np_utils.to_categorical(test_y, 2)\n\n\n\u30e2\u30c7\u30eb\u5b9a\u7fa9\u3001\u5b66\u7fd2\u3001\u8a55\u4fa1\n\u3053\u3061\u3089\u306e\u6295\u7a3f\u3092\u53c2\u8003\u306b\u30e2\u30c7\u30eb\u5b9a\u7fa9\u3057\u3066\u307f\u307e\u3057\u305f\u3002\nhttp://qiita.com/rindai87/items/546991f5ecae0ef7cde3\n# \u30e2\u30c7\u30eb\u306e\u5b9a\u7fa9\nmodel = Sequential()\n\n# \u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u306e\u5b9a\u7fa9\nmodel.add(Dense(input_dim=21, output_dim=20))\nmodel.add(Activation('relu'))\nmodel.add(Dropout(0.2))\n\nmodel.add(Dense(input_dim=20, output_dim=20))\nmodel.add(Activation('relu'))\nmodel.add(Dropout(0.2))\n\nmodel.add(Dense(input_dim=20, output_dim=10))\nmodel.add(Activation('relu'))\nmodel.add(Dropout(0.2))\n\n## OUTPUT  SSH or NOTSSH\nmodel.add(Dense(output_dim=2))\nmodel.add(Activation('softmax'))\n\n# \u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u306e\u30b3\u30f3\u30d1\u30a4\u30eb\nmodel.compile(loss = 'categorical_crossentropy',\n              optimizer = 'sgd',\n              metrics = ['accuracy'])\n\n# \u5b66\u7fd2\u51e6\u7406\nhist = model.fit(train_x, y_train, nb_epoch = 10, batch_size = 100, verbose=1)\n\n# \u5b66\u7fd2\u7d50\u679c\u306e\u8a55\u4fa1\nscore = model.evaluate(test_x, y_test)\nprint('Test loss:', score[0])\nprint('Test accuracy:', score[1])\n\n\n\u7d50\u679c\n99.7%\u3068\u3044\u3046\u4e88\u60f3\u4ee5\u4e0a\u306b\u3044\u3044\u7cbe\u5ea6\u3067\u3057\u305f\u3002\nEpoch 1/10\n50606/50606 [==============================] - 1s - loss: 0.2669 - acc: 0.9484     \nEpoch 2/10\n50606/50606 [==============================] - 1s - loss: 0.1090 - acc: 0.9832     \nEpoch 3/10\n50606/50606 [==============================] - 1s - loss: 0.0733 - acc: 0.9869     \nEpoch 4/10\n50606/50606 [==============================] - 1s - loss: 0.0597 - acc: 0.9892     \nEpoch 5/10\n50606/50606 [==============================] - 1s - loss: 0.0495 - acc: 0.9913     \nEpoch 6/10\n50606/50606 [==============================] - 1s - loss: 0.0458 - acc: 0.9923     \nEpoch 7/10\n50606/50606 [==============================] - 1s - loss: 0.0427 - acc: 0.9925     \nEpoch 8/10\n50606/50606 [==============================] - 1s - loss: 0.0400 - acc: 0.9935     \nEpoch 9/10\n50606/50606 [==============================] - 1s - loss: 0.0374 - acc: 0.9938     \nEpoch 10/10\n50606/50606 [==============================] - 1s - loss: 0.0357 - acc: 0.9942     \n12096/12652 [===========================>..] - ETA: 0sTest loss: 0.0282513894941\nTest accuracy: 0.997707872273\n\n# \u306f\u3058\u3081\u306b\n\u6697\u53f7\u5316\u3055\u308c\u305f\u901a\u4fe1\u304b\u3001\u6697\u53f7\u5316\u3055\u308c\u3066\u306a\u3044\u901a\u4fe1\u304b\u3001\u30dd\u30fc\u30c8\u756a\u53f7\u306a\u3069\u306e\u60c5\u5831\u3092\u4f7f\u308f\u305a\u306b\u901a\u4fe1\u306e\u7279\u5fb4\u91cf\u3060\u3051\u3092\u4f7f\u3063\u3066\u3001\u30cb\u30e5\u30fc\u30e9\u30eb\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u3067\u8b58\u5225\u3067\u304d\u308b\u304b\u8a66\u3057\u3066\u307f\u307e\u3057\u305f\u3002\u7d50\u679c\u3068\u3057\u3066\u306f99%\u4ee5\u4e0a\u306e\u7cbe\u5ea6\u3067\u8b58\u5225\u3067\u304d\u307e\u3057\u305f\u3002\n\n# \u8a66\u3057\u3066\u307f\u305f\u6761\u4ef6\n\u30cb\u30e5\u30fc\u30e9\u30eb\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\uff1a\u5168\u7d50\u5408\u306e2\u5c64\n\u30d5\u30ec\u30fc\u30e0\u30ef\u30fc\u30af\uff1akeras (tensorflow backend)\n\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\uff1aDARPA 1999 Week3 data set ( https://projects.cs.dal.ca/projectx/Download.html ) \u3092\u4e00\u90e8\u5909\u66f4\u3057\u3066\u5229\u7528\n\n# \u30b3\u30fc\u30c9\u3068\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\ngithub\u306b\u7f6e\u304d\u307e\u3057\u305f\u3002\nhttps://github.com/kznx/traffic_classification/tree/master/ssh_or_not\n\n# \u8aac\u660e\n\n## \u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u306e\u8aad\u307f\u8fbc\u307f\n\u30c7\u30fc\u30bf\u30bb\u30c3\u30c8\u304c arff \u3068\u3044\u3046\u30d5\u30a9\u30fc\u30de\u30c3\u30c8\u306a\u306e\u3067\u3001\u4e0b\u8a18\u306e\u3088\u3046\u306b\u8aad\u307f\u8fbc\u307f\u3001numpy\u306earray\u306b\u3057\u307e\u3059\u3002\nhttp://qiita.com/kznx/items/59c4b50f944c0d6079c1\n\n## \u6b63\u898f\u5316\nkeras\u3067\u306f\u3001\u30c7\u30fc\u30bf\u3092\u6b63\u898f\u5316\u3059\u308b\u5fc5\u8981\u304c\u3042\u308b\u3088\u3046\u306a\u306e\u3067\u3001scikit-learn\u306eMinMaxScaler\u3092\u4f7f\u3044\u3001\u6b63\u898f\u5316\u3057\u307e\u3059\u3002\n\n```\nmms = MinMaxScaler()\nx_norm = mms.fit_transform(train)\n```\n\n## \u30c7\u30fc\u30bf\u306e\u5206\u96e2\n\u8a13\u7df4\u7528\u30c7\u30fc\u30bf\u3068\u30c6\u30b9\u30c8\u7528\u30c7\u30fc\u30bf\u306b\u5206\u96e2\u3057\u307e\u3059\u3002scikit-learn\u306ecross_validation\u3092\u4f7f\u3044\u307e\u3059\u3002\n\n```\ntrain_x, test_x, train_y, test_y = cross_validation.train_test_split(\n    x_norm, target, test_size=0.2\n)\n```\n\n## \u6b63\u89e3\u30c7\u30fc\u30bf\u306e\u30d5\u30a9\u30fc\u30de\u30c3\u30c8\u3092\u5909\u66f4\u3057\u307e\u3059\n\n```\ny_train = np_utils.to_categorical(train_y, 2)\ny_test = np_utils.to_categorical(test_y, 2)\n```\n\n## \u30e2\u30c7\u30eb\u5b9a\u7fa9\u3001\u5b66\u7fd2\u3001\u8a55\u4fa1\n\u3053\u3061\u3089\u306e\u6295\u7a3f\u3092\u53c2\u8003\u306b\u30e2\u30c7\u30eb\u5b9a\u7fa9\u3057\u3066\u307f\u307e\u3057\u305f\u3002\nhttp://qiita.com/rindai87/items/546991f5ecae0ef7cde3\n\n```\n# \u30e2\u30c7\u30eb\u306e\u5b9a\u7fa9\nmodel = Sequential()\n\n# \u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u306e\u5b9a\u7fa9\nmodel.add(Dense(input_dim=21, output_dim=20))\nmodel.add(Activation('relu'))\nmodel.add(Dropout(0.2))\n\nmodel.add(Dense(input_dim=20, output_dim=20))\nmodel.add(Activation('relu'))\nmodel.add(Dropout(0.2))\n\nmodel.add(Dense(input_dim=20, output_dim=10))\nmodel.add(Activation('relu'))\nmodel.add(Dropout(0.2))\n\n## OUTPUT  SSH or NOTSSH\nmodel.add(Dense(output_dim=2))\nmodel.add(Activation('softmax'))\n\n# \u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u306e\u30b3\u30f3\u30d1\u30a4\u30eb\nmodel.compile(loss = 'categorical_crossentropy',\n              optimizer = 'sgd',\n              metrics = ['accuracy'])\n\n# \u5b66\u7fd2\u51e6\u7406\nhist = model.fit(train_x, y_train, nb_epoch = 10, batch_size = 100, verbose=1)\n\n# \u5b66\u7fd2\u7d50\u679c\u306e\u8a55\u4fa1\nscore = model.evaluate(test_x, y_test)\nprint('Test loss:', score[0])\nprint('Test accuracy:', score[1])\n```\n\n# \u7d50\u679c\n99.7%\u3068\u3044\u3046\u4e88\u60f3\u4ee5\u4e0a\u306b\u3044\u3044\u7cbe\u5ea6\u3067\u3057\u305f\u3002\n\n```\nEpoch 1/10\n50606/50606 [==============================] - 1s - loss: 0.2669 - acc: 0.9484     \nEpoch 2/10\n50606/50606 [==============================] - 1s - loss: 0.1090 - acc: 0.9832     \nEpoch 3/10\n50606/50606 [==============================] - 1s - loss: 0.0733 - acc: 0.9869     \nEpoch 4/10\n50606/50606 [==============================] - 1s - loss: 0.0597 - acc: 0.9892     \nEpoch 5/10\n50606/50606 [==============================] - 1s - loss: 0.0495 - acc: 0.9913     \nEpoch 6/10\n50606/50606 [==============================] - 1s - loss: 0.0458 - acc: 0.9923     \nEpoch 7/10\n50606/50606 [==============================] - 1s - loss: 0.0427 - acc: 0.9925     \nEpoch 8/10\n50606/50606 [==============================] - 1s - loss: 0.0400 - acc: 0.9935     \nEpoch 9/10\n50606/50606 [==============================] - 1s - loss: 0.0374 - acc: 0.9938     \nEpoch 10/10\n50606/50606 [==============================] - 1s - loss: 0.0357 - acc: 0.9942     \n12096/12652 [===========================>..] - ETA: 0sTest loss: 0.0282513894941\nTest accuracy: 0.997707872273\n```\n", "tags": ["traffic", "TensorFlow", "Keras"]}