{"context": "\u6700\u8fd1\u306f Java \u3092\u4f7f\u3063\u3066\u3044\u3066\u3082\u4f59\u308a DI \u3092\u4f7f\u308f\u306a\u3044\u3088\u3046\u306b\u3057\u3066\u3044\u308b\u306e\u3060\u3051\u3069\u3001\u305f\u307e\u306b\u300c\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u69cb\u7bc9\u3059\u308b\u306e\u304c\u9762\u5012\u304f\u3055\u3044\u306a\u301c\u300d\u3068\u3044\u3046\u3053\u3068\u304c\u3042\u308b\u3002\u5177\u4f53\u7684\u306b\u306f\u3001\u3061\u3087\u3063\u3068\u3057\u305f\u5c0f\u3055\u306a\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u3092\u4f5c\u3063\u3066\u3044\u308b\u3068\u304d\u3001\u300c\u30b3\u30f3\u30dd\u30fc\u30cd\u30f3\u30c8\u306f interface \u30d9\u30fc\u30b9\u3067\u66f8\u3044\u3066\u3044\u308b\u3051\u3069\u3001DI \u30b3\u30f3\u30c6\u30ca\u306f\u5927\u8888\u88df\u3060\u3057\u3001\u30d5\u30a1\u30af\u30c8\u30ea\u3092\u4f5c\u308b\u306e\u3082\u9762\u5012\u304f\u3055\u3044\u306a\u301c\uff08\u3042\u308b\u3044\u306f static \u306a Factory \u306b\u4f9d\u5b58\u3057\u305f\u304f\u306a\u3044\uff09\u300d\u307f\u305f\u3044\u306a\u30b1\u30fc\u30b9\u304c\u305d\u308c\u306b\u5f53\u305f\u308b\u3002\n\u305d\u3046\u3044\u3046\u3068\u304d\u306f\u7c21\u6613\u306a\u30b3\u30f3\u30c6\u30ca\u3092\u4f5c\u3063\u3066\u9069\u5f53\u306b\u6e08\u307e\u3059\u3053\u3068\u304c\u591a\u3044\u3002\u30b3\u30f3\u30c6\u30ca\u3068\u8a00\u3063\u3066\u3082\u52dd\u624b\u306b\u767b\u9332\u3055\u308c\u3066\u3044\u308b\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u7d44\u307f\u5408\u308f\u305b\u3066\u304f\u308c\u308b\u3060\u3051\u306e\u30b7\u30f3\u30d7\u30eb\u306a\u3082\u306e\u3002AOP \u306a\u3069\u3082\u51fa\u6765\u306a\u3044\u306e\u3067\u3001\u672c\u5f53\u306b\u305f\u3060\u306e\u30d5\u30a1\u30af\u30c8\u30ea\u306e\u4ee3\u308f\u308a\u306b\u4f7f\u3063\u3066\u3044\u308b\u3002\u5177\u8c61\u30af\u30e9\u30b9\u3092\u767b\u9332\u3057\u3066\u304a\u3051\u3070 interface \u30d9\u30fc\u30b9\u3067\u4efb\u610f\u306e\u30b3\u30f3\u30dd\u30fc\u30cd\u30f3\u30c8\u3092\u53d6\u5f97\u3067\u304d\u308b\u3002\n/**\n * \u7c21\u6613\u306a\u30b3\u30f3\u30dd\u30fc\u30cd\u30f3\u30c8\u30b3\u30f3\u30c6\u30ca\u3067\u3059\u3002\n */\npublic interface ComponentProvider {\n\n    /**\n     * \u30af\u30e9\u30b9\u3092\u6307\u5b9a\u3057\u3066\u30b3\u30f3\u30dd\u30fc\u30cd\u30f3\u30c8\u3092\u53d6\u5f97\u3057\u307e\u3059\u3002\n     * <p>\n     * \u5bfe\u5fdc\u3059\u308b\u30b3\u30f3\u30dd\u30fc\u30cd\u30f3\u30c8\u304c\u8907\u6570\u5b58\u5728\u3059\u308b\u5834\u5408\u30fb\u3082\u3057\u304f\u306f\u30b3\u30f3\u30dd\u30fc\u30cd\u30f3\u30c8\u304c\u5b58\u5728\u3057\u306a\u3044\u5834\u5408\u306b\u306f\u4f8b\u5916\u304c\u9001\u51fa\u3055\u308c\u307e\u3059\u3002\n     * \n     * @param componentClass \u30b3\u30f3\u30dd\u30fc\u30cd\u30f3\u30c8\u306e\u578b\n     * @param <T> \u30b3\u30f3\u30dd\u30fc\u30cd\u30f3\u30c8\u306e\u578b\n     * @return \u30b3\u30f3\u30dd\u30fc\u30cd\u30f3\u30c8\n     */\n    @Nonnull\n    <T> T getComponent(@Nonnull Class<? extends T> componentClass);\n\n    /**\n     * \u30af\u30e9\u30b9\u3092\u6307\u5b9a\u3057\u3066\u8907\u6570\u306e\u30b3\u30f3\u30dd\u30fc\u30cd\u30f3\u30c8\u3092\u53d6\u5f97\u3057\u307e\u3059\u3002\n     * \n     * @param componentClass \u30b3\u30f3\u30dd\u30fc\u30cd\u30f3\u30c8\u306e\u578b\n     * @param <T> \u30b3\u30f3\u30dd\u30fc\u30cd\u30f3\u30c8\u306e\u578b\n     * @return \u30b3\u30f3\u30dd\u30fc\u30cd\u30f3\u30c8\n     */\n    @Nonnull\n    <T> List<? extends T> getComponents(@Nonnull Class<? extends T> componentClass);\n\n}\n\n\u3060\u3044\u305f\u3044 Singleton \u306a\u306e\u3067\u3053\u3053\u3067\u306f Singleton \u9650\u5b9a\u3002\n/**\n * \u7c21\u6613\u306a\u30b3\u30f3\u30dd\u30fc\u30cd\u30f3\u30c8\u30b3\u30f3\u30c6\u30ca\u306e\u5b9f\u88c5\u3067\u3059\u3002\n */\n@Slf4j\npublic class Container implements ComponentProvider {\n\n    private final Map<String, Provider<?>> cache;\n\n    public Container() {\n        cache = new ConcurrentHashMap<>();\n    }\n\n    public <T> void registerComponent(@Nonnull Class<? super T> componentName, @Nonnull Provider<? extends T> provider) {\n        registerComponent(componentName.getName(), provider);\n    }\n\n    public <T> void registerComponent(@Nonnull String componentName, @Nonnull Provider<? extends T> provider) {\n        cache.putIfAbsent(componentName, provider);\n    }\n\n    public <T> void registerComponent(@Nonnull T component) {\n        registerComponent(component.getClass().getName(), component);\n    }\n\n    public <T> void registerComponent(@Nonnull Class<? super T> componentName, @Nonnull T component) {\n        registerComponent(componentName.getName(), component);\n    }\n\n    public <T> void registerComponent(@Nonnull String componentName, @Nonnull T component) {\n        registerComponent(componentName, new SingletonProvider<>((Class<? super T>) component.getClass(), component));\n    }\n\n    public <T> void registerComponent(@Nonnull Class<? super T> componentName, @Nonnull Class<? extends T> componentClass) {\n        registerComponent(componentName.getName(), componentClass);\n    }\n\n    public <T> void registerComponent(@Nonnull String componentName, @Nonnull Class<? extends T> componentClass) {\n        cache.putIfAbsent(componentName, new LazySingletonProvider<>(componentClass));\n    }\n\n    @Override\n    @Nonnull\n    public <T> T getComponent(@Nonnull Class<? extends T> componentClass) {\n        return getComponent(componentClass, true);\n    }\n\n    @Nullable\n    private <T> T getComponent(@Nonnull Class<? extends T> componentClass, boolean throwException) {\n        Provider<?> provider = cache.get(componentClass);\n        if (provider != null) {\n            return (T) provider.getComponent();\n        }\n        List<? extends T> components = getComponents(componentClass);\n        if (components.isEmpty() && throwException) {\n            throw new ComponentNotFoundException(componentClass);\n        }\n        if (components.size() == 1) {\n            return components.iterator().next();\n        }\n        if (throwException) {\n            throw new TooManyComponentException(componentClass);\n        }\n        return null;\n    }\n\n    @Override\n    @Nonnull\n    public <T> List<? extends T> getComponents(@Nonnull Class<? extends T> componentClass) {\n        return (List<? extends T>) cache.values().stream().filter(provider -> provider.test(componentClass)).map(provider -> provider.getComponent()).collect(Collectors.toList());\n    }\n\n    public interface Provider<T> extends Predicate<Class<?>> {\n\n        @Nonnull\n        Class<? super T> getComponentClass();\n\n        @Nonnull\n        T getComponent();\n\n        default boolean test(@Nonnull Class<?> clazz) {\n            Class<?> componentClass = getComponentClass();\n            do {\n                if (clazz.isAssignableFrom(componentClass)) {\n                    return true;\n                }\n                for (Class<?> interfaceClass : componentClass.getInterfaces()) {\n                    if (clazz.isAssignableFrom(interfaceClass)) {\n                        return true;\n                    }\n                }\n                componentClass = componentClass.getSuperclass();\n            } while (componentClass != null);\n            return false;\n        }\n\n    }\n\n    @RequiredArgsConstructor\n    private class SingletonProvider<T> implements Provider<T> {\n\n        @Nonnull\n        private final Class<? super T> componentClass;\n\n        @Nonnull\n        private final T component;\n\n        @Nonnull\n        @Override\n        public Class<? super T> getComponentClass() {\n            return componentClass;\n        }\n\n        @Nonnull\n        @Override\n        public T getComponent() {\n            return component;\n        }\n\n    }\n\n    @RequiredArgsConstructor\n    private class LazySingletonProvider<T> implements Provider<T> {\n\n        @Nonnull\n        private final Class<T> componentClass;\n\n        @Nonnull\n        private final AtomicReference<T> componentReference = new AtomicReference<>();\n\n        @Override\n        @Nonnull\n        public Class<? super T> getComponentClass() {\n            return componentClass;\n        }\n\n        @Nonnull\n        @Override\n        public T getComponent() {\n            T component = componentReference.get();\n            if (component == null) {\n                component = instantiate();\n                componentReference.compareAndSet(null, component);\n            }\n            return component;\n        }\n\n        private T instantiate() {\n            // \u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u5f15\u6570\u306e\u9577\u3044\u9806\u306b\u8d70\u67fb\u3057\u3066\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u5316\u3092\u8a66\u307f\u308b\n            for (Constructor<?> constructor : collect(getComponentClass())) {\n                Class<?>[] types = constructor.getParameterTypes();\n                List<?> args = Arrays.stream(types).map(type -> Container.this.getComponent(type, false)).filter(Objects::nonNull).collect(Collectors.toList());\n                if (types.length == args.size()) {\n                    try {\n                        return (T) constructor.newInstance(args.toArray());\n                    } catch (InstantiationException | IllegalAccessException | InvocationTargetException e) {\n                        log.warn(\"Failed to create a component: \" + componentClass.getName(), e);\n                        continue;\n                    }\n                }\n            }\n            throw new ComponentInstantiationException(getComponentClass());\n        }\n\n        private List<Constructor<?>> collect(Class<?> componentClass) {\n            return Arrays\n                .stream(componentClass.getConstructors())\n                .filter(constructor -> Modifier.isPublic(constructor.getModifiers()))\n                .sorted(Comparator.comparing(constructor -> constructor.getParameterTypes().length, Comparator.reverseOrder()))\n                .collect(Collectors.toList());\n        }\n\n    }\n\n    private static class ComponentNotFoundException extends RuntimeException {\n\n        ComponentNotFoundException(@Nonnull Class<?> componentClass) {\n            super(String.format(\"Failed to get a component: class=%s\", componentClass.getName()));\n        }\n\n    }\n\n    private static class TooManyComponentException extends RuntimeException {\n\n        TooManyComponentException(@Nonnull Class<?> componentClass) {\n            super(String.format(\"Failed to get a component. Too many components has been registered to %s\", componentClass.getName()));\n        }\n\n    }\n\n    private static class ComponentInstantiationException extends RuntimeException {\n\n        ComponentInstantiationException(@Nonnull Class<?> componentClass) {\n            super(String.format(\"Failed to instantiate a component: class=%s\", componentClass.getName()));\n        }\n\n    }\n\n}\n\n\u3053\u308c\u3067\u9069\u5f53\u306b\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u4f5c\u308b\u3053\u3068\u304c\u51fa\u6765\u3066\u697d\u3002\u5148\u65e5\u306f Vert.x \u3092\u4f7f\u3063\u3066\u3044\u308b\u6642\u306b\u5fc5\u8981\u6027\u3092\u611f\u3058\u3066\u4f3c\u305f\u3088\u3046\u306a\u3082\u306e\u3092\u4f5c\u308a\u307e\u3057\u305f\u3002\u4f7f\u3044\u65b9\u306f\u3053\u3093\u306a\u611f\u3058\u3002\npublic class ContainerTest {\n\n    private Container subject;\n\n    @Before\n    public void setup() {\n        subject = new Container();\n    }\n\n    @Test\n    public void testContainer() {\n\n        VertxOptions options = new VertxOptions();\n        CustomVertx vertx = new CustomVertx(options, subject);\n\n        RESTClientManager rest = new RESTClientManager(vertx);\n        JDBCClientManager jdbc = new JDBCClientManager(vertx);\n\n        subject.registerComponent(rest);\n        subject.registerComponent(JDBCClientProvider.class, jdbc);\n        subject.registerComponent(CountryRepository.class, CountryRepositoryImpl.class);\n\n        {\n            JDBCClientProvider component = subject.getComponent(JDBCClientProvider.class);\n            assertNotNull(component);\n            assertTrue(component instanceof JDBCClientManager);\n        }\n        {\n            JDBCClientManager component = subject.getComponent(JDBCClientManager.class);\n            assertNotNull(component);\n            assertTrue(component instanceof JDBCClientManager);\n        }\n        {\n            RESTClientManager component = subject.getComponent(RESTClientManager.class);\n            assertNotNull(component);\n            assertTrue(component instanceof RESTClientManager);\n        }\n        {\n            // lazy\n            CountryRepository component = subject.getComponent(CountryRepository.class);\n            assertNotNull(component);\n            assertTrue(component instanceof CountryRepositoryImpl);\n        }\n        {\n            // components\n            List<? extends ResourceManager> components = subject.getComponents(ResourceManager.class);\n            assertNotNull(components);\n            assertThat(components.size(), is(2));\n            assertThat(components, hasItems(is(instanceOf(JDBCClientManager.class)), is(instanceOf(RESTClientManager.class))));\n        }\n\n\n    }\n\n}\n\n\u771f\u9762\u76ee\u306b\u66f8\u3044\u3066\u308b\u308f\u3051\u3067\u306f\u306a\u3044\u306e\u3067\u6027\u80fd\u3068\u304b\u306f\u3054\u5bdf\u3057\u3002\u5c0f\u3055\u3044\u30a2\u30d7\u30ea\u3092\u4f5c\u308b\u5ea6\u306b\u4f3c\u305f\u3088\u3046\u306a\u3082\u306e\u3092\u4f5c\u3063\u3066\u3044\u308b\u6c17\u304c\u3059\u308b\u306e\u3067\u3001\u81ea\u5206\u3067\u771f\u9762\u76ee\u306b\u30c1\u30e5\u30fc\u30cb\u30f3\u30b0\u3057\u305f\u30de\u30a4\u30af\u30ed\u30b3\u30f3\u30c6\u30ca\u307f\u305f\u3044\u306a\u306e\u3092\u4f5c\u3063\u3066\u3082\u826f\u3044\u304b\u3082\u3057\u308c\u306a\u3044\u3067\u3059\u306d\u3068\u66f8\u304d\u306a\u304c\u3089\u601d\u3044\u307e\u3057\u305f\u3002\n\u6700\u8fd1\u306f Java \u3092\u4f7f\u3063\u3066\u3044\u3066\u3082\u4f59\u308a DI \u3092\u4f7f\u308f\u306a\u3044\u3088\u3046\u306b\u3057\u3066\u3044\u308b\u306e\u3060\u3051\u3069\u3001\u305f\u307e\u306b\u300c\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u69cb\u7bc9\u3059\u308b\u306e\u304c\u9762\u5012\u304f\u3055\u3044\u306a\u301c\u300d\u3068\u3044\u3046\u3053\u3068\u304c\u3042\u308b\u3002\u5177\u4f53\u7684\u306b\u306f\u3001\u3061\u3087\u3063\u3068\u3057\u305f\u5c0f\u3055\u306a\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u3092\u4f5c\u3063\u3066\u3044\u308b\u3068\u304d\u3001\u300c\u30b3\u30f3\u30dd\u30fc\u30cd\u30f3\u30c8\u306f `interface` \u30d9\u30fc\u30b9\u3067\u66f8\u3044\u3066\u3044\u308b\u3051\u3069\u3001DI \u30b3\u30f3\u30c6\u30ca\u306f\u5927\u8888\u88df\u3060\u3057\u3001\u30d5\u30a1\u30af\u30c8\u30ea\u3092\u4f5c\u308b\u306e\u3082\u9762\u5012\u304f\u3055\u3044\u306a\u301c\uff08\u3042\u308b\u3044\u306f `static` \u306a `Factory` \u306b\u4f9d\u5b58\u3057\u305f\u304f\u306a\u3044\uff09\u300d\u307f\u305f\u3044\u306a\u30b1\u30fc\u30b9\u304c\u305d\u308c\u306b\u5f53\u305f\u308b\u3002\n\n\u305d\u3046\u3044\u3046\u3068\u304d\u306f\u7c21\u6613\u306a\u30b3\u30f3\u30c6\u30ca\u3092\u4f5c\u3063\u3066\u9069\u5f53\u306b\u6e08\u307e\u3059\u3053\u3068\u304c\u591a\u3044\u3002\u30b3\u30f3\u30c6\u30ca\u3068\u8a00\u3063\u3066\u3082\u52dd\u624b\u306b\u767b\u9332\u3055\u308c\u3066\u3044\u308b\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u7d44\u307f\u5408\u308f\u305b\u3066\u304f\u308c\u308b\u3060\u3051\u306e\u30b7\u30f3\u30d7\u30eb\u306a\u3082\u306e\u3002\b\bAOP \u306a\u3069\u3082\u51fa\u6765\u306a\u3044\u306e\u3067\u3001\u672c\u5f53\u306b\u305f\u3060\u306e\u30d5\u30a1\u30af\u30c8\u30ea\u306e\u4ee3\u308f\u308a\u306b\u4f7f\u3063\u3066\u3044\u308b\u3002\u5177\u8c61\u30af\u30e9\u30b9\u3092\u767b\u9332\u3057\u3066\u304a\u3051\u3070 `interface` \u30d9\u30fc\u30b9\u3067\u4efb\u610f\u306e\u30b3\u30f3\u30dd\u30fc\u30cd\u30f3\u30c8\u3092\u53d6\u5f97\u3067\u304d\u308b\u3002\n\n```java\n/**\n * \u7c21\u6613\u306a\u30b3\u30f3\u30dd\u30fc\u30cd\u30f3\u30c8\u30b3\u30f3\u30c6\u30ca\u3067\u3059\u3002\n */\npublic interface ComponentProvider {\n\n    /**\n     * \u30af\u30e9\u30b9\u3092\u6307\u5b9a\u3057\u3066\u30b3\u30f3\u30dd\u30fc\u30cd\u30f3\u30c8\u3092\u53d6\u5f97\u3057\u307e\u3059\u3002\n     * <p>\n     * \u5bfe\u5fdc\u3059\u308b\u30b3\u30f3\u30dd\u30fc\u30cd\u30f3\u30c8\u304c\u8907\u6570\u5b58\u5728\u3059\u308b\u5834\u5408\u30fb\u3082\u3057\u304f\u306f\u30b3\u30f3\u30dd\u30fc\u30cd\u30f3\u30c8\u304c\u5b58\u5728\u3057\u306a\u3044\u5834\u5408\u306b\u306f\u4f8b\u5916\u304c\u9001\u51fa\u3055\u308c\u307e\u3059\u3002\n     * \n     * @param componentClass \u30b3\u30f3\u30dd\u30fc\u30cd\u30f3\u30c8\u306e\u578b\n     * @param <T> \u30b3\u30f3\u30dd\u30fc\u30cd\u30f3\u30c8\u306e\u578b\n     * @return \u30b3\u30f3\u30dd\u30fc\u30cd\u30f3\u30c8\n     */\n    @Nonnull\n    <T> T getComponent(@Nonnull Class<? extends T> componentClass);\n\n    /**\n     * \u30af\u30e9\u30b9\u3092\u6307\u5b9a\u3057\u3066\u8907\u6570\u306e\u30b3\u30f3\u30dd\u30fc\u30cd\u30f3\u30c8\u3092\u53d6\u5f97\u3057\u307e\u3059\u3002\n     * \n     * @param componentClass \u30b3\u30f3\u30dd\u30fc\u30cd\u30f3\u30c8\u306e\u578b\n     * @param <T> \u30b3\u30f3\u30dd\u30fc\u30cd\u30f3\u30c8\u306e\u578b\n     * @return \u30b3\u30f3\u30dd\u30fc\u30cd\u30f3\u30c8\n     */\n    @Nonnull\n    <T> List<? extends T> getComponents(@Nonnull Class<? extends T> componentClass);\n\n}\n```\n\n\u3060\u3044\u305f\u3044 Singleton \u306a\u306e\u3067\u3053\u3053\u3067\u306f Singleton \u9650\u5b9a\u3002\n\n```java\n/**\n * \u7c21\u6613\u306a\u30b3\u30f3\u30dd\u30fc\u30cd\u30f3\u30c8\u30b3\u30f3\u30c6\u30ca\u306e\u5b9f\u88c5\u3067\u3059\u3002\n */\n@Slf4j\npublic class Container implements ComponentProvider {\n\n    private final Map<String, Provider<?>> cache;\n\n    public Container() {\n        cache = new ConcurrentHashMap<>();\n    }\n\n    public <T> void registerComponent(@Nonnull Class<? super T> componentName, @Nonnull Provider<? extends T> provider) {\n        registerComponent(componentName.getName(), provider);\n    }\n\n    public <T> void registerComponent(@Nonnull String componentName, @Nonnull Provider<? extends T> provider) {\n        cache.putIfAbsent(componentName, provider);\n    }\n\n    public <T> void registerComponent(@Nonnull T component) {\n        registerComponent(component.getClass().getName(), component);\n    }\n\n    public <T> void registerComponent(@Nonnull Class<? super T> componentName, @Nonnull T component) {\n        registerComponent(componentName.getName(), component);\n    }\n\n    public <T> void registerComponent(@Nonnull String componentName, @Nonnull T component) {\n        registerComponent(componentName, new SingletonProvider<>((Class<? super T>) component.getClass(), component));\n    }\n\n    public <T> void registerComponent(@Nonnull Class<? super T> componentName, @Nonnull Class<? extends T> componentClass) {\n        registerComponent(componentName.getName(), componentClass);\n    }\n\n    public <T> void registerComponent(@Nonnull String componentName, @Nonnull Class<? extends T> componentClass) {\n        cache.putIfAbsent(componentName, new LazySingletonProvider<>(componentClass));\n    }\n\n    @Override\n    @Nonnull\n    public <T> T getComponent(@Nonnull Class<? extends T> componentClass) {\n        return getComponent(componentClass, true);\n    }\n\n    @Nullable\n    private <T> T getComponent(@Nonnull Class<? extends T> componentClass, boolean throwException) {\n        Provider<?> provider = cache.get(componentClass);\n        if (provider != null) {\n            return (T) provider.getComponent();\n        }\n        List<? extends T> components = getComponents(componentClass);\n        if (components.isEmpty() && throwException) {\n            throw new ComponentNotFoundException(componentClass);\n        }\n        if (components.size() == 1) {\n            return components.iterator().next();\n        }\n        if (throwException) {\n            throw new TooManyComponentException(componentClass);\n        }\n        return null;\n    }\n\n    @Override\n    @Nonnull\n    public <T> List<? extends T> getComponents(@Nonnull Class<? extends T> componentClass) {\n        return (List<? extends T>) cache.values().stream().filter(provider -> provider.test(componentClass)).map(provider -> provider.getComponent()).collect(Collectors.toList());\n    }\n\n    public interface Provider<T> extends Predicate<Class<?>> {\n\n        @Nonnull\n        Class<? super T> getComponentClass();\n\n        @Nonnull\n        T getComponent();\n\n        default boolean test(@Nonnull Class<?> clazz) {\n            Class<?> componentClass = getComponentClass();\n            do {\n                if (clazz.isAssignableFrom(componentClass)) {\n                    return true;\n                }\n                for (Class<?> interfaceClass : componentClass.getInterfaces()) {\n                    if (clazz.isAssignableFrom(interfaceClass)) {\n                        return true;\n                    }\n                }\n                componentClass = componentClass.getSuperclass();\n            } while (componentClass != null);\n            return false;\n        }\n\n    }\n\n    @RequiredArgsConstructor\n    private class SingletonProvider<T> implements Provider<T> {\n\n        @Nonnull\n        private final Class<? super T> componentClass;\n\n        @Nonnull\n        private final T component;\n\n        @Nonnull\n        @Override\n        public Class<? super T> getComponentClass() {\n            return componentClass;\n        }\n\n        @Nonnull\n        @Override\n        public T getComponent() {\n            return component;\n        }\n\n    }\n\n    @RequiredArgsConstructor\n    private class LazySingletonProvider<T> implements Provider<T> {\n\n        @Nonnull\n        private final Class<T> componentClass;\n\n        @Nonnull\n        private final AtomicReference<T> componentReference = new AtomicReference<>();\n\n        @Override\n        @Nonnull\n        public Class<? super T> getComponentClass() {\n            return componentClass;\n        }\n\n        @Nonnull\n        @Override\n        public T getComponent() {\n            T component = componentReference.get();\n            if (component == null) {\n                component = instantiate();\n                componentReference.compareAndSet(null, component);\n            }\n            return component;\n        }\n\n        private T instantiate() {\n            // \u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u5f15\u6570\u306e\u9577\u3044\u9806\u306b\u8d70\u67fb\u3057\u3066\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u5316\u3092\u8a66\u307f\u308b\n            for (Constructor<?> constructor : collect(getComponentClass())) {\n                Class<?>[] types = constructor.getParameterTypes();\n                List<?> args = Arrays.stream(types).map(type -> Container.this.getComponent(type, false)).filter(Objects::nonNull).collect(Collectors.toList());\n                if (types.length == args.size()) {\n                    try {\n                        return (T) constructor.newInstance(args.toArray());\n                    } catch (InstantiationException | IllegalAccessException | InvocationTargetException e) {\n                        log.warn(\"Failed to create a component: \" + componentClass.getName(), e);\n                        continue;\n                    }\n                }\n            }\n            throw new ComponentInstantiationException(getComponentClass());\n        }\n\n        private List<Constructor<?>> collect(Class<?> componentClass) {\n            return Arrays\n                .stream(componentClass.getConstructors())\n                .filter(constructor -> Modifier.isPublic(constructor.getModifiers()))\n                .sorted(Comparator.comparing(constructor -> constructor.getParameterTypes().length, Comparator.reverseOrder()))\n                .collect(Collectors.toList());\n        }\n\n    }\n\n    private static class ComponentNotFoundException extends RuntimeException {\n\n        ComponentNotFoundException(@Nonnull Class<?> componentClass) {\n            super(String.format(\"Failed to get a component: class=%s\", componentClass.getName()));\n        }\n\n    }\n\n    private static class TooManyComponentException extends RuntimeException {\n\n        TooManyComponentException(@Nonnull Class<?> componentClass) {\n            super(String.format(\"Failed to get a component. Too many components has been registered to %s\", componentClass.getName()));\n        }\n\n    }\n\n    private static class ComponentInstantiationException extends RuntimeException {\n\n        ComponentInstantiationException(@Nonnull Class<?> componentClass) {\n            super(String.format(\"Failed to instantiate a component: class=%s\", componentClass.getName()));\n        }\n\n    }\n\n}\n```\n\n\u3053\u308c\u3067\u9069\u5f53\u306b\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9\u3092\u4f5c\u308b\u3053\u3068\u304c\u51fa\u6765\u3066\u697d\u3002\u5148\u65e5\u306f Vert.x \u3092\u4f7f\u3063\u3066\u3044\u308b\u6642\u306b\u5fc5\u8981\u6027\u3092\u611f\u3058\u3066\u4f3c\u305f\u3088\u3046\u306a\u3082\u306e\u3092\u4f5c\u308a\u307e\u3057\u305f\u3002\u4f7f\u3044\u65b9\u306f\u3053\u3093\u306a\u611f\u3058\u3002\n\n```java\npublic class ContainerTest {\n\n    private Container subject;\n\n    @Before\n    public void setup() {\n        subject = new Container();\n    }\n\n    @Test\n    public void testContainer() {\n\n        VertxOptions options = new VertxOptions();\n        CustomVertx vertx = new CustomVertx(options, subject);\n\n        RESTClientManager rest = new RESTClientManager(vertx);\n        JDBCClientManager jdbc = new JDBCClientManager(vertx);\n\n        subject.registerComponent(rest);\n        subject.registerComponent(JDBCClientProvider.class, jdbc);\n        subject.registerComponent(CountryRepository.class, CountryRepositoryImpl.class);\n\n        {\n            JDBCClientProvider component = subject.getComponent(JDBCClientProvider.class);\n            assertNotNull(component);\n            assertTrue(component instanceof JDBCClientManager);\n        }\n        {\n            JDBCClientManager component = subject.getComponent(JDBCClientManager.class);\n            assertNotNull(component);\n            assertTrue(component instanceof JDBCClientManager);\n        }\n        {\n            RESTClientManager component = subject.getComponent(RESTClientManager.class);\n            assertNotNull(component);\n            assertTrue(component instanceof RESTClientManager);\n        }\n        {\n            // lazy\n            CountryRepository component = subject.getComponent(CountryRepository.class);\n            assertNotNull(component);\n            assertTrue(component instanceof CountryRepositoryImpl);\n        }\n        {\n            // components\n            List<? extends ResourceManager> components = subject.getComponents(ResourceManager.class);\n            assertNotNull(components);\n            assertThat(components.size(), is(2));\n            assertThat(components, hasItems(is(instanceOf(JDBCClientManager.class)), is(instanceOf(RESTClientManager.class))));\n        }\n\n\n    }\n\n}\n```\n\n\u771f\u9762\u76ee\u306b\u66f8\u3044\u3066\u308b\u308f\u3051\u3067\u306f\u306a\u3044\u306e\u3067\u6027\u80fd\u3068\u304b\u306f\u3054\u5bdf\u3057\u3002\u5c0f\u3055\u3044\u30a2\u30d7\u30ea\u3092\u4f5c\u308b\u5ea6\u306b\u4f3c\u305f\u3088\u3046\u306a\u3082\u306e\u3092\u4f5c\u3063\u3066\u3044\u308b\u6c17\u304c\u3059\u308b\u306e\u3067\u3001\u81ea\u5206\u3067\b\u771f\u9762\u76ee\u306b\u30c1\u30e5\u30fc\u30cb\u30f3\u30b0\u3057\u305f\u30de\u30a4\u30af\u30ed\u30b3\u30f3\u30c6\u30ca\u307f\u305f\u3044\u306a\u306e\u3092\u4f5c\u3063\u3066\u3082\u826f\u3044\u304b\u3082\u3057\u308c\u306a\u3044\u3067\u3059\u306d\u3068\u66f8\u304d\u306a\u304c\u3089\u601d\u3044\u307e\u3057\u305f\u3002\n\n", "tags": ["Java", "DI"]}