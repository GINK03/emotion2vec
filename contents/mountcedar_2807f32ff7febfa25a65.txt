{"context": " More than 1 year has passed since last update.\n\n\u306f\u3058\u3081\u306b\nGmail\u306eLabs\u306b\u3042\u3063\u305fgmail\u306e\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u51fa\u529b\u6a5f\u80fd\u304c\u306a\u304f\u306a\u3063\u3066\u3057\u307e\u3063\u305f\u305f\u3081\u3001Google Apps\u306eGmailAPI\u3092\u4f7f\u3063\u3066python\u3067\u7c21\u5358\u306b\u66f8\u3044\u3066\u307f\u305f\u3002\n\n\u6e96\u5099\n\u4ee5\u4e0b\u306e\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8(\u82f1\u8a9e)\u3092\u8aad\u3093\u3067\u3001client_secret.json\u3092\u5165\u624b\u3057\u3088\u3046\u3002\n\nhttps://developers.google.com/gmail/api/quickstart/python\n\n\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u3092\u5b9a\u7fa9\u3057\u3066\u3001\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3059\u308b\u3060\u3051\u306a\u306e\u3067\u30011\u5206\u304f\u3089\u3044\u3067\u3067\u304d\u308b\u3002\n\n\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\npip\u3067api client\u3092\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3002\n$ pip install --upgrade google-api-python-client\n\n\n\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\n\u4e0a\u8a18\u306e\u30a2\u30c9\u30ec\u30b9\u306e\u4f8b\u3060\u3068\u3001\u30e9\u30d9\u30eb\u306e\u51fa\u529b\u3067\u7d42\u308f\u3063\u3066\u3057\u307e\u3046\u306e\u3067\u3001\u30e1\u30c3\u30bb\u30fc\u30b8\u672c\u6587\u3092\u624b\u306b\u5165\u308c\u308b\u30b3\u30fc\u30c9\u3092\u8ffd\u8a18\u3001\u4ee5\u4e0a\u3002\n\nsample.py\n#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\n# from __future__ import print_function\nimport httplib2\nimport os\nimport base64\nimport logging\nimport traceback\n\nfrom apiclient import discovery\nimport oauth2client\nfrom oauth2client import client\nfrom oauth2client import tools\n\ntry:\n    import argparse\n    flags = argparse.ArgumentParser(parents=[tools.argparser]).parse_args()\nexcept ImportError:\n    flags = None\n\nSCOPES = 'https://www.googleapis.com/auth/gmail.readonly'\nCLIENT_SECRET_FILE = 'client_secret.json'\nAPPLICATION_NAME = 'Gmail API Python Quickstart'\n\n\ndef get_credentials():\n    \"\"\"Gets valid user credentials from storage.\n\n    If nothing has been stored, or if the stored credentials are invalid,\n    the OAuth2 flow is completed to obtain the new credentials.\n\n    Returns:\n        Credentials, the obtained credential.\n    \"\"\"\n    home_dir = os.path.expanduser('~')\n    credential_dir = os.path.join(home_dir, '.credentials')\n    if not os.path.exists(credential_dir):\n        os.makedirs(credential_dir)\n    credential_path = os.path.join(\n        credential_dir,\n        'gmail-python-quickstart.json'\n    )\n\n    store = oauth2client.file.Storage(credential_path)\n    credentials = store.get()\n    if not credentials or credentials.invalid:\n        flow = client.flow_from_clientsecrets(CLIENT_SECRET_FILE, SCOPES)\n        flow.user_agent = APPLICATION_NAME\n        if flags:\n            credentials = tools.run_flow(flow, store, flags)\n        else:  # Needed only for compatibility with Python 2.6\n            credentials = tools.run(flow, store)\n        print('Storing credentials to ' + credential_path)\n    return credentials\n\n\ndef extract_message(service, message):\n    try:\n        msg_obj = service.users().messages().get(userId='me', id=message['id'], format='raw').execute()\n        return base64.urlsafe_b64decode(msg_obj['raw'].encode('ASCII'))\n    except:\n        logging.error(traceback.format_exc())\n\n\ndef extract_message_body(service, message):\n    try:\n        email_str = extract_message(service, message)\n        subject_idx = email_str.find('Subject:')\n        body_idx = email_str[subject_idx:].find(os.linesep)\n        return email_str[subject_idx + body_idx:].strip()\n    except:\n        logging.error(traceback.format_exc())\n\n\ndef main():\n    \"\"\"Shows basic usage of the Gmail API.\n\n    Creates a Gmail API service object and outputs a list of label names\n    of the user's Gmail account.\n    \"\"\"\n    credentials = get_credentials()\n    http = credentials.authorize(httplib2.Http())\n    service = discovery.build('gmail', 'v1', http=http)\n\n    results = service.users().messages().list(userId='me', q=\"\").execute()\n    print results\n    messages = results.get('messages', [])\n\n    if not messages:\n        print 'No messages found.'\n    else:\n        print 'messages:'\n        for message in messages:\n            print 'message body: ', extract_message_body(service, message)\n\n\nif __name__ == '__main__':\n    main()\n\n\n\u691c\u7d22\u30ad\u30fc\u30ef\u30fc\u30c9\u306f\u3001list\u95a2\u6570\u306eq\u306b\u6587\u5b57\u5217\u3067\u653e\u308a\u8fbc\u3080\u3002\u66f8\u5f0f\u306fgmail\u306e\u691c\u7d22\u3068\u540c\u3058\u3002\n# \u306f\u3058\u3081\u306b\n\nGmail\u306eLabs\u306b\u3042\u3063\u305fgmail\u306e\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8\u51fa\u529b\u6a5f\u80fd\u304c\u306a\u304f\u306a\u3063\u3066\u3057\u307e\u3063\u305f\u305f\u3081\u3001Google Apps\u306eGmailAPI\u3092\u4f7f\u3063\u3066python\u3067\u7c21\u5358\u306b\u66f8\u3044\u3066\u307f\u305f\u3002\n\n## \u6e96\u5099\n\n\u4ee5\u4e0b\u306e\u30c9\u30ad\u30e5\u30e1\u30f3\u30c8(\u82f1\u8a9e)\u3092\u8aad\u3093\u3067\u3001client_secret.json\u3092\u5165\u624b\u3057\u3088\u3046\u3002\n\n* https://developers.google.com/gmail/api/quickstart/python\n\n\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u3092\u5b9a\u7fa9\u3057\u3066\u3001\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\u3059\u308b\u3060\u3051\u306a\u306e\u3067\u30011\u5206\u304f\u3089\u3044\u3067\u3067\u304d\u308b\u3002\n\n## \u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\n\npip\u3067api client\u3092\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3002\n\n```\n$ pip install --upgrade google-api-python-client\n```\n\n## \u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\n\n\u4e0a\u8a18\u306e\u30a2\u30c9\u30ec\u30b9\u306e\u4f8b\u3060\u3068\u3001\u30e9\u30d9\u30eb\u306e\u51fa\u529b\u3067\u7d42\u308f\u3063\u3066\u3057\u307e\u3046\u306e\u3067\u3001\u30e1\u30c3\u30bb\u30fc\u30b8\u672c\u6587\u3092\u624b\u306b\u5165\u308c\u308b\u30b3\u30fc\u30c9\u3092\u8ffd\u8a18\u3001\u4ee5\u4e0a\u3002\n\n```sample.py\n#!/usr/bin/env python\n# -*- coding: utf-8 -*-\n\n# from __future__ import print_function\nimport httplib2\nimport os\nimport base64\nimport logging\nimport traceback\n\nfrom apiclient import discovery\nimport oauth2client\nfrom oauth2client import client\nfrom oauth2client import tools\n\ntry:\n    import argparse\n    flags = argparse.ArgumentParser(parents=[tools.argparser]).parse_args()\nexcept ImportError:\n    flags = None\n\nSCOPES = 'https://www.googleapis.com/auth/gmail.readonly'\nCLIENT_SECRET_FILE = 'client_secret.json'\nAPPLICATION_NAME = 'Gmail API Python Quickstart'\n\n\ndef get_credentials():\n    \"\"\"Gets valid user credentials from storage.\n\n    If nothing has been stored, or if the stored credentials are invalid,\n    the OAuth2 flow is completed to obtain the new credentials.\n\n    Returns:\n        Credentials, the obtained credential.\n    \"\"\"\n    home_dir = os.path.expanduser('~')\n    credential_dir = os.path.join(home_dir, '.credentials')\n    if not os.path.exists(credential_dir):\n        os.makedirs(credential_dir)\n    credential_path = os.path.join(\n        credential_dir,\n        'gmail-python-quickstart.json'\n    )\n\n    store = oauth2client.file.Storage(credential_path)\n    credentials = store.get()\n    if not credentials or credentials.invalid:\n        flow = client.flow_from_clientsecrets(CLIENT_SECRET_FILE, SCOPES)\n        flow.user_agent = APPLICATION_NAME\n        if flags:\n            credentials = tools.run_flow(flow, store, flags)\n        else:  # Needed only for compatibility with Python 2.6\n            credentials = tools.run(flow, store)\n        print('Storing credentials to ' + credential_path)\n    return credentials\n\n\ndef extract_message(service, message):\n    try:\n        msg_obj = service.users().messages().get(userId='me', id=message['id'], format='raw').execute()\n        return base64.urlsafe_b64decode(msg_obj['raw'].encode('ASCII'))\n    except:\n        logging.error(traceback.format_exc())\n\n\ndef extract_message_body(service, message):\n    try:\n        email_str = extract_message(service, message)\n        subject_idx = email_str.find('Subject:')\n        body_idx = email_str[subject_idx:].find(os.linesep)\n        return email_str[subject_idx + body_idx:].strip()\n    except:\n        logging.error(traceback.format_exc())\n\n\ndef main():\n    \"\"\"Shows basic usage of the Gmail API.\n\n    Creates a Gmail API service object and outputs a list of label names\n    of the user's Gmail account.\n    \"\"\"\n    credentials = get_credentials()\n    http = credentials.authorize(httplib2.Http())\n    service = discovery.build('gmail', 'v1', http=http)\n\n    results = service.users().messages().list(userId='me', q=\"\").execute()\n    print results\n    messages = results.get('messages', [])\n\n    if not messages:\n        print 'No messages found.'\n    else:\n        print 'messages:'\n        for message in messages:\n            print 'message body: ', extract_message_body(service, message)\n\n\nif __name__ == '__main__':\n    main()\n```\n\n\u691c\u7d22\u30ad\u30fc\u30ef\u30fc\u30c9\u306f\u3001list\u95a2\u6570\u306eq\u306b\u6587\u5b57\u5217\u3067\u653e\u308a\u8fbc\u3080\u3002\u66f8\u5f0f\u306fgmail\u306e\u691c\u7d22\u3068\u540c\u3058\u3002\n", "tags": ["gmail", "Python"]}