{"context": " More than 1 year has passed since last update.Problem 3 - Project Euler\n\n\n\u300c\u6700\u5927\u306e\u7d20\u56e0\u6570\u300d\n\n13195 \u306e\u7d20\u56e0\u6570\u306f 5, 7, 13, 29 \u3067\u3042\u308b.\n600851475143 \u306e\u7d20\u56e0\u6570\u306e\u3046\u3061\u6700\u5927\u306e\u3082\u306e\u3092\u6c42\u3081\u3088.\n\n\n\u89e3\u6cd5\n2\u304b\u3089\u59cb\u3081\u3066\u5c0f\u3055\u3044\u9806\u306b\u56e0\u6570\u3092\u63a2\u3057\u3066\u3044\u3063\u3066\u3001\u56e0\u6570\u304c\u898b\u3064\u304b\u308b\u305f\u3073\u306b\u305d\u306e\u5024\u3067\u5272\u3063\u3066\u3044\u304f\u3068\u3044\u3046\u3053\u3068\u3092\u518d\u5e30\u7684\u306b\u7e70\u308a\u8fd4\u3057\u3066\u6700\u5927\u306e\u7d20\u56e0\u6570\u3092\u898b\u3064\u3051\u307e\u3059\u3002\n\u5f15\u6570\u3068\u3057\u3066\u53d7\u3051\u53d6\u3063\u305f\u6574\u6570\u3092\u5272\u308a\u5207\u308c\u308b\u3068\u3044\u3046\u6761\u4ef6\u306b\u4e00\u81f4\u3059\u308b\u6700\u521d\u306e\u8981\u7d20\u3092\u898b\u3064\u3051\u308b\u3068\u3053\u308d\u3067\u95a2\u6570\u578b\u306e\u624b\u6cd5\u3092\u5229\u7528\u3057\u307e\u3059\u3002\n\n\u6700\u521d\u306e\u8981\u7d20\u3092\u898b\u3064\u3051\u308b\u95a2\u6570\n\u95a2\u6570\u578b\u8a00\u8a9e\u306b\u306f\u6307\u5b9a\u3057\u305f\u6761\u4ef6\u306b\u4e00\u81f4\u3059\u308b\u6700\u521d\u306e\u8981\u7d20\u3092\u898b\u3064\u3051\u308b\u95a2\u6570\u304c\u7528\u610f\u3055\u308c\u3066\u3044\u308b\u306e\u304c\u666e\u901a\u3058\u3083\u306a\u3044\u304b\u3068\u601d\u3044\u307e\u3059\u3002\n\n\n\n\u8a00\u8a9e\n\u95a2\u6570\u540d\n\n\n\n\nF#\nfind\n\n\nScala\nfind\n\n\nC# (LINQ)\nFirst\n\n\nJava 8\n-\n\n\n\nPython\u306b\u306f\u540c\u3058\u3088\u3046\u306a\u95a2\u6570\u304c\u306a\u3044\u306e\u3067\u65e2\u5b58\u306e\u95a2\u6570\u3092\u7d44\u307f\u5408\u308f\u305b\u3066\u4f5c\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\nfilter\u95a2\u6570\u3067\u6761\u4ef6\u306b\u5408\u3046\u3082\u306e\u3060\u3051\u3092\u8fd4\u3059\u30a4\u30c6\u30ec\u30fc\u30bf\u3092\u751f\u6210\u3057\u3001\u305d\u306e\u30a4\u30c6\u30ec\u30fc\u30bf\u3092next\u95a2\u6570\u306b\u6e21\u3059\u3053\u3068\u3067\u6700\u521d\u306e\u8981\u7d20\u3092\u5f97\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\ndef find(condition, iterable):\n    return next(filter(condition, iterable), None)\n\n\u4e0a\u306e\u95a2\u6570\u5b9a\u7fa9\u3067condition\u306f\u6761\u4ef6\u3092\u5224\u5b9a\u3059\u308b\u95a2\u6570\u3001iterable\u306f\u30ea\u30b9\u30c8\u306a\u3069\u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3001\u6700\u5f8c\u306eNone\u306f\u8981\u7d20\u304c\u306a\u304b\u3063\u305f\u6642\u306b\u8fd4\u3059\u5024\u3067\u3059\u3002\n\n\u89e3\u7b54\u4f8b\n\nPython_3.x\n# -*- coding: UTF-8 -*-\nfrom math import sqrt\n\n\ndef find(pred, iterable):\n    '''\u6761\u4ef6\u306b\u4e00\u81f4\u3059\u308b\u6700\u521d\u306e\u8981\u7d20\u3092\u63a2\u3059\u3002\u4e00\u81f4\u3059\u308b\u8981\u7d20\u304c\u306a\u3051\u308c\u3070None\u3092\u8fd4\u3059\u3002'''\n    return next(filter(pred, iterable), None)\n\n\ndef getMaxPrimeFactor(n):\n    '''\u6700\u5927\u306e\u7d20\u56e0\u6570\u3092\u6c42\u3081\u308b\u3002'''\n    #\ufe0f 2\u301c\u221an\u306e\u7bc4\u56f2\u3067\u6700\u5c0f\u306e\u56e0\u6570\u3092\u63a2\u3059\u3002\n    limit = int(sqrt(n))\n    smallestFactor = find(lambda i: n % i == 0, range(2, limit + 1))\n    if smallestFactor is None:\n        # \u56e0\u6570\u304c\u898b\u3064\u304b\u3089\u306a\u304b\u3063\u305f\u5834\u5408\u306fn\u3092\u8fd4\u3059\u3002\n        return n\n    else:\n        #\ufe0f \u56e0\u6570\u304c\u898b\u3064\u304b\u3063\u305f\u5834\u5408\u306fn\u3092\u56e0\u6570\u3067\u5272\u3063\u305f\u5024\u3067\u518d\u5e30\u547c\u3073\u51fa\u3057\u3002\n        return getMaxPrimeFactor(n // smallestFactor)\n\n\nanswer = getMaxPrimeFactor(600851475143)\nprint(answer)\n\n\nPython 2.x\u3067\u5b9f\u884c\u3059\u308b\u3068\u30a8\u30e9\u30fc\u3068\u306a\u308b\u306e\u3067filter\u95a2\u6570\u3092itertools\u30e2\u30b8\u30e5\u30fc\u30eb\u306eifilter\u95a2\u6570\u306b\u5165\u308c\u66ff\u3048\u308b\u3068\u6b63\u3057\u304f\u5b9f\u884c\u3067\u304d\u307e\u3059\u3002\n\nPython_2.x\n# -*- coding: UTF-8 -*-\nfrom math import sqrt\nfrom itertools import ifilter\n\n\ndef find(pred, iterable):\n    '''\u6761\u4ef6\u306b\u4e00\u81f4\u3059\u308b\u6700\u521d\u306e\u8981\u7d20\u3092\u63a2\u3059\u3002\u4e00\u81f4\u3059\u308b\u8981\u7d20\u304c\u306a\u3051\u308c\u3070None\u3092\u8fd4\u3059\u3002'''\n    return next(ifilter(pred, iterable), None)\n\n\ndef getMaxPrimeFactor(n):\n    '''\u6700\u5927\u306e\u7d20\u56e0\u6570\u3092\u6c42\u3081\u308b\u3002'''\n    #\ufe0f 2\u301c\u221an\u306e\u7bc4\u56f2\u3067\u6700\u5c0f\u306e\u56e0\u6570\u3092\u63a2\u3059\u3002\n    limit = int(sqrt(n))\n    smallestFactor = find(lambda i: n % i == 0, range(2, limit + 1))\n    if smallestFactor is None:\n        # \u56e0\u6570\u304c\u898b\u3064\u304b\u3089\u306a\u304b\u3063\u305f\u5834\u5408\u306fn\u3092\u8fd4\u3059\u3002\n        return n\n    else:\n        #\ufe0f \u56e0\u6570\u304c\u898b\u3064\u304b\u3063\u305f\u5834\u5408\u306fn\u3092\u56e0\u6570\u3067\u5272\u3063\u305f\u5024\u3067\u518d\u5e30\u547c\u3073\u51fa\u3057\u3002\n        return getMaxPrimeFactor(n // smallestFactor)\n\n\nanswer = getMaxPrimeFactor(600851475143)\nprint(answer)\n\n\n[Problem 3 - Project Euler](https://projecteuler.net/problem=3)\n> # [\u300c\u6700\u5927\u306e\u7d20\u56e0\u6570\u300d](http://odz.sakura.ne.jp/projecteuler/index.php?cmd=read&page=Problem%203)\n\n> 13195 \u306e\u7d20\u56e0\u6570\u306f 5, 7, 13, 29 \u3067\u3042\u308b.\n\n> 600851475143 \u306e\u7d20\u56e0\u6570\u306e\u3046\u3061\u6700\u5927\u306e\u3082\u306e\u3092\u6c42\u3081\u3088.\n\n# \u89e3\u6cd5\n2\u304b\u3089\u59cb\u3081\u3066\u5c0f\u3055\u3044\u9806\u306b\u56e0\u6570\u3092\u63a2\u3057\u3066\u3044\u3063\u3066\u3001\u56e0\u6570\u304c\u898b\u3064\u304b\u308b\u305f\u3073\u306b\u305d\u306e\u5024\u3067\u5272\u3063\u3066\u3044\u304f\u3068\u3044\u3046\u3053\u3068\u3092\u518d\u5e30\u7684\u306b\u7e70\u308a\u8fd4\u3057\u3066\u6700\u5927\u306e\u7d20\u56e0\u6570\u3092\u898b\u3064\u3051\u307e\u3059\u3002\n\u5f15\u6570\u3068\u3057\u3066\u53d7\u3051\u53d6\u3063\u305f\u6574\u6570\u3092\u5272\u308a\u5207\u308c\u308b\u3068\u3044\u3046\u6761\u4ef6\u306b\u4e00\u81f4\u3059\u308b\u6700\u521d\u306e\u8981\u7d20\u3092\u898b\u3064\u3051\u308b\u3068\u3053\u308d\u3067\u95a2\u6570\u578b\u306e\u624b\u6cd5\u3092\u5229\u7528\u3057\u307e\u3059\u3002\n\n# \u6700\u521d\u306e\u8981\u7d20\u3092\u898b\u3064\u3051\u308b\u95a2\u6570\n\u95a2\u6570\u578b\u8a00\u8a9e\u306b\u306f\u6307\u5b9a\u3057\u305f\u6761\u4ef6\u306b\u4e00\u81f4\u3059\u308b\u6700\u521d\u306e\u8981\u7d20\u3092\u898b\u3064\u3051\u308b\u95a2\u6570\u304c\u7528\u610f\u3055\u308c\u3066\u3044\u308b\u306e\u304c\u666e\u901a\u3058\u3083\u306a\u3044\u304b\u3068\u601d\u3044\u307e\u3059\u3002\n\n| \u8a00\u8a9e\t\t\t| \u95a2\u6570\u540d\t\t|\n|---\t\t\t|---\t\t|\n| F#\t\t\t| find\t\t|\n| Scala\t\t\t| find\t\t|\n| C# (LINQ)\t| First\t\t|\n| Java 8\t\t| -\t\t\t|\n\nPython\u306b\u306f\u540c\u3058\u3088\u3046\u306a\u95a2\u6570\u304c\u306a\u3044\u306e\u3067\u65e2\u5b58\u306e\u95a2\u6570\u3092\u7d44\u307f\u5408\u308f\u305b\u3066\u4f5c\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\nfilter\u95a2\u6570\u3067\u6761\u4ef6\u306b\u5408\u3046\u3082\u306e\u3060\u3051\u3092\u8fd4\u3059\u30a4\u30c6\u30ec\u30fc\u30bf\u3092\u751f\u6210\u3057\u3001\u305d\u306e\u30a4\u30c6\u30ec\u30fc\u30bf\u3092next\u95a2\u6570\u306b\u6e21\u3059\u3053\u3068\u3067\u6700\u521d\u306e\u8981\u7d20\u3092\u5f97\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\n```python3\ndef find(condition, iterable):\n    return next(filter(condition, iterable), None)\n```\n\u4e0a\u306e\u95a2\u6570\u5b9a\u7fa9\u3067condition\u306f\u6761\u4ef6\u3092\u5224\u5b9a\u3059\u308b\u95a2\u6570\u3001iterable\u306f\u30ea\u30b9\u30c8\u306a\u3069\u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3001\u6700\u5f8c\u306eNone\u306f\u8981\u7d20\u304c\u306a\u304b\u3063\u305f\u6642\u306b\u8fd4\u3059\u5024\u3067\u3059\u3002\n\n# \u89e3\u7b54\u4f8b\n\n```python3:Python_3.x\n# -*- coding: UTF-8 -*-\nfrom math import sqrt\n\n\ndef find(pred, iterable):\n    '''\u6761\u4ef6\u306b\u4e00\u81f4\u3059\u308b\u6700\u521d\u306e\u8981\u7d20\u3092\u63a2\u3059\u3002\u4e00\u81f4\u3059\u308b\u8981\u7d20\u304c\u306a\u3051\u308c\u3070None\u3092\u8fd4\u3059\u3002'''\n    return next(filter(pred, iterable), None)\n\n\ndef getMaxPrimeFactor(n):\n    '''\u6700\u5927\u306e\u7d20\u56e0\u6570\u3092\u6c42\u3081\u308b\u3002'''\n    #\ufe0f 2\u301c\u221an\u306e\u7bc4\u56f2\u3067\u6700\u5c0f\u306e\u56e0\u6570\u3092\u63a2\u3059\u3002\n    limit = int(sqrt(n))\n    smallestFactor = find(lambda i: n % i == 0, range(2, limit + 1))\n    if smallestFactor is None:\n        # \u56e0\u6570\u304c\u898b\u3064\u304b\u3089\u306a\u304b\u3063\u305f\u5834\u5408\u306fn\u3092\u8fd4\u3059\u3002\n        return n\n    else:\n        #\ufe0f \u56e0\u6570\u304c\u898b\u3064\u304b\u3063\u305f\u5834\u5408\u306fn\u3092\u56e0\u6570\u3067\u5272\u3063\u305f\u5024\u3067\u518d\u5e30\u547c\u3073\u51fa\u3057\u3002\n        return getMaxPrimeFactor(n // smallestFactor)\n\n\nanswer = getMaxPrimeFactor(600851475143)\nprint(answer)\n```\n\nPython 2.x\u3067\u5b9f\u884c\u3059\u308b\u3068\u30a8\u30e9\u30fc\u3068\u306a\u308b\u306e\u3067filter\u95a2\u6570\u3092itertools\u30e2\u30b8\u30e5\u30fc\u30eb\u306eifilter\u95a2\u6570\u306b\u5165\u308c\u66ff\u3048\u308b\u3068\u6b63\u3057\u304f\u5b9f\u884c\u3067\u304d\u307e\u3059\u3002\n\n\n```python:Python_2.x\n# -*- coding: UTF-8 -*-\nfrom math import sqrt\nfrom itertools import ifilter\n\n\ndef find(pred, iterable):\n    '''\u6761\u4ef6\u306b\u4e00\u81f4\u3059\u308b\u6700\u521d\u306e\u8981\u7d20\u3092\u63a2\u3059\u3002\u4e00\u81f4\u3059\u308b\u8981\u7d20\u304c\u306a\u3051\u308c\u3070None\u3092\u8fd4\u3059\u3002'''\n    return next(ifilter(pred, iterable), None)\n\n\ndef getMaxPrimeFactor(n):\n    '''\u6700\u5927\u306e\u7d20\u56e0\u6570\u3092\u6c42\u3081\u308b\u3002'''\n    #\ufe0f 2\u301c\u221an\u306e\u7bc4\u56f2\u3067\u6700\u5c0f\u306e\u56e0\u6570\u3092\u63a2\u3059\u3002\n    limit = int(sqrt(n))\n    smallestFactor = find(lambda i: n % i == 0, range(2, limit + 1))\n    if smallestFactor is None:\n        # \u56e0\u6570\u304c\u898b\u3064\u304b\u3089\u306a\u304b\u3063\u305f\u5834\u5408\u306fn\u3092\u8fd4\u3059\u3002\n        return n\n    else:\n        #\ufe0f \u56e0\u6570\u304c\u898b\u3064\u304b\u3063\u305f\u5834\u5408\u306fn\u3092\u56e0\u6570\u3067\u5272\u3063\u305f\u5024\u3067\u518d\u5e30\u547c\u3073\u51fa\u3057\u3002\n        return getMaxPrimeFactor(n // smallestFactor)\n\n\nanswer = getMaxPrimeFactor(600851475143)\nprint(answer)\n```\n", "tags": ["\u95a2\u6570\u578b\u8a00\u8a9e", "python3", "Python", "ProjectEuler"]}