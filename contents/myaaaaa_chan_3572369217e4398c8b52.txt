{"tags": ["ios6"], "context": " More than 1 year has passed since last update.XML\u3092\u89e3\u6790\u3057\u3066JSON\u5f62\u5f0f\u306b\u5909\u63db\u3057\u3066\u304f\u308c\u308b\u3042\u308a\u304c\u305f\u3044\u30e9\u30a4\u30d6\u30e9\u30ea\u3067\u3059\u3002\nXML-to-NSDictionary GitHub\nARC\u3092\u6709\u52b9\u306b\u3057\u3066\u3044\u308b\u3068\u30b3\u30f3\u30d1\u30a4\u30eb\u30a8\u30e9\u30fc\u304c\u3044\u304f\u3064\u304b\u767a\u751f\u3059\u308b\u306e\u3067\u3001\u5b9f\u88c5\u30d5\u30a1\u30a4\u30eb\u3092\u4fee\u6b63\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\u9577\u304f\u306a\u3063\u3061\u3083\u3046\u3051\u3069\u3001\u5fd8\u308c\u308b\u3068\u56f0\u308b\u304b\u3089\u307e\u308b\u3063\u3068\u8cbc\u4ed8\u3051\u3066\u304a\u304d\u307e\u3059\u306d\u3002\n\n\u3042\u3093\u307e\u308a\u78ba\u8a8d\u3057\u3066\u306a\u3044\u3051\u3069\u3001\u30b3\u30f3\u30d1\u30a4\u30eb\u306e\u6642\u306b\u6012\u3089\u308c\u3066\u306a\u3044\u304b\u3089\u30e1\u30e2\u30ea\u30ea\u30fc\u30af\u3068\u304b\u5927\u4e08\u592b\u3060\u3088\u306d\u30fb\u30fb\u30fb\u30fb\n\nXMLReader.h\n#import <Foundation/Foundation.h>\n\n@interface XMLReader : NSObject <NSXMLParserDelegate>\n{\n    NSMutableArray *dictionaryStack;\n    NSMutableString *textInProgress;\n    NSError *errorPointer;\n}\n\n+ (NSDictionary *)dictionaryForPath:(NSString *)path error:(NSError *)errorPointer;\n+ (NSDictionary *)dictionaryForXMLData:(NSData *)data error:(NSError *)errorPointer;\n+ (NSDictionary *)dictionaryForXMLString:(NSString *)string error:(NSError *)errorPointer;\n\n@end\n\n@interface NSDictionary (XMLReaderNavigation)\n\n- (id)retrieveForPath:(NSString *)navPath;\n\n@end\n\n\n\nXMLReader.m\n//\n//  XMLReader.m\n//\n\n#import \"XMLReader.h\"\n\nNSString *const kXMLReaderTextNodeKey = @\"text\";\n\n@interface XMLReader (Internal)\n\n- (id)initWithError:(NSError *)error;\n- (NSDictionary *)objectWithData:(NSData *)data;\n\n@end\n\n@implementation NSDictionary (XMLReaderNavigation)\n\n- (id)retrieveForPath:(NSString *)navPath\n{\n    // Split path on dots\n    NSArray *pathItems = [navPath componentsSeparatedByString:@\".\"];\n\n    // Enumerate through array\n    NSEnumerator *e = [pathItems objectEnumerator];\n    NSString *path;\n\n    // Set first branch from self\n    id branch = [self objectForKey:[e nextObject]];\n    int count = 1;\n\n    while ((path = [e nextObject]))\n    {\n        // Check if this branch is an NSArray\n        if([branch isKindOfClass:[NSArray class]])\n        {\n            if ([path isEqualToString:@\"last\"])\n            {\n                branch = [branch lastObject];\n            }\n            else\n            {\n                if ([branch count] > [path intValue])\n                {\n                    branch = [branch objectAtIndex:[path intValue]];\n                }\n                else\n                {\n                    branch = nil;\n                }\n            }\n        }\n        else\n        {\n            // branch is assumed to be an NSDictionary\n            branch = [branch objectForKey:path];\n        }\n\n        count++;\n    }\n\n    return branch;\n}\n\n@end\n\n@implementation XMLReader\n\n#pragma mark -\n#pragma mark Public methods\n\n+ (NSDictionary *)dictionaryForPath:(NSString *)path error:(NSError *)errorPointer\n{\n    NSString *fullpath = [[NSBundle bundleForClass:self] pathForResource:path ofType:@\"xml\"];\n    NSData *data = [[NSFileManager defaultManager] contentsAtPath:fullpath];\n    NSDictionary *rootDictionary = [XMLReader dictionaryForXMLData:data error:errorPointer];\n\n    return rootDictionary;\n}\n\n+ (NSDictionary *)dictionaryForXMLData:(NSData *)data error:(NSError *)error\n{\n    XMLReader *reader = [[XMLReader alloc] initWithError:error];\n    NSDictionary *rootDictionary = [reader objectWithData:data];\n    //[reader release];\n\n    return rootDictionary;\n}\n\n+ (NSDictionary *)dictionaryForXMLString:(NSString *)string error:(NSError *)error\n{\n    NSArray* lines = [string componentsSeparatedByString:@\"\\n\"];\n    NSMutableString* strData = [NSMutableString stringWithString:@\"\"];\n\n    for (int i = 0; i < [lines count]; i++)\n    {\n        [strData appendString:[[lines objectAtIndex:i] stringByTrimmingCharactersInSet:[NSCharacterSet whitespaceAndNewlineCharacterSet]]];\n    }\n\n    NSData *data = [strData dataUsingEncoding:NSUTF8StringEncoding];\n    return [XMLReader dictionaryForXMLData:data error:error];\n}\n\n#pragma mark -\n#pragma mark Parsing\n\n- (id)initWithError:(NSError *)error\n{\n    if ((self = [super init]))\n    {\n        errorPointer = error;\n    }\n\n    return self;\n}\n\n- (void)dealloc\n{\n    //[dictionaryStack release];\n    //[textInProgress release];\n\n    //[super dealloc];\n}\n\n- (NSDictionary *)objectWithData:(NSData *)data\n{\n    // Clear out any old data\n    //[dictionaryStack release];\n    //[textInProgress release];\n\n    dictionaryStack = [[NSMutableArray alloc] init];\n    textInProgress = [[NSMutableString alloc] init];\n\n    // Initialize the stack with a fresh dictionary\n    [dictionaryStack addObject:[NSMutableDictionary dictionary]];\n\n    // Parse the XML\n    NSXMLParser *parser = [[NSXMLParser alloc] initWithData:data];\n    parser.delegate = self;\n    BOOL success = [parser parse];\n    //[parser release];\n\n    // Return the stack's root dictionary on success\n    if (success)\n    {\n        NSDictionary *resultDict = [dictionaryStack objectAtIndex:0];\n\n        return resultDict;\n    }\n\n    return nil;\n}\n\n#pragma mark -\n#pragma mark NSXMLParserDelegate methods\n\n- (void)parser:(NSXMLParser *)parser didStartElement:(NSString *)elementName namespaceURI:(NSString *)namespaceURI qualifiedName:(NSString *)qName attributes:(NSDictionary *)attributeDict\n{\n    // Get the dictionary for the current level in the stack\n    NSMutableDictionary *parentDict = [dictionaryStack lastObject];\n\n    // Create the child dictionary for the new element\n    NSMutableDictionary *childDict = [NSMutableDictionary dictionary];\n\n    // Initialize child dictionary with the attributes, prefixed with '@'\n    for (NSString *key in attributeDict) {\n        [childDict setValue:[attributeDict objectForKey:key]\n                     forKey:[NSString stringWithFormat:@\"@%@\", key]];\n    }\n\n    // If there's already an item for this key, it means we need to create an array\n    id existingValue = [parentDict objectForKey:elementName];\n\n    if (existingValue)\n    {\n        NSMutableArray *array = nil;\n\n        if ([existingValue isKindOfClass:[NSMutableArray class]])\n        {\n            // The array exists, so use it\n            array = (NSMutableArray *) existingValue;\n        }\n        else\n        {\n            // Create an array if it doesn't exist\n            array = [NSMutableArray array];\n            [array addObject:existingValue];\n\n            // Replace the child dictionary with an array of children dictionaries\n            [parentDict setObject:array forKey:elementName];\n        }\n\n        // Add the new child dictionary to the array\n        [array addObject:childDict];\n    }\n    else\n    {\n        // No existing value, so update the dictionary\n        [parentDict setObject:childDict forKey:elementName];\n    }\n\n    // Update the stack\n    [dictionaryStack addObject:childDict];\n}\n\n- (void)parser:(NSXMLParser *)parser didEndElement:(NSString *)elementName namespaceURI:(NSString *)namespaceURI qualifiedName:(NSString *)qName\n{\n    // Update the parent dict with text info\n    NSMutableDictionary *dictInProgress = [dictionaryStack lastObject];\n\n    // Pop the current dict\n    [dictionaryStack removeLastObject];\n\n    // Set the text property\n    if ([textInProgress length] > 0)\n    {\n        if ([dictInProgress count] > 0)\n        {\n            [dictInProgress setObject:textInProgress forKey:kXMLReaderTextNodeKey];\n        }\n        else\n        {\n            // Given that there will only ever be a single value in this dictionary, let's replace the dictionary with a simple string.\n            NSMutableDictionary *parentDict = [dictionaryStack lastObject];\n            id parentObject = [parentDict objectForKey:elementName];\n\n            // Parent is an Array\n            if ([parentObject isKindOfClass:[NSArray class]])\n            {\n                [parentObject removeLastObject];\n                [parentObject addObject:textInProgress];\n            }\n\n            // Parent is a Dictionary\n            else\n            {\n                [parentDict removeObjectForKey:elementName];\n                [parentDict setObject:textInProgress forKey:elementName];\n            }\n        }\n\n        // Reset the text\n        //[textInProgress release];\n        textInProgress = [[NSMutableString alloc] init];\n    }\n\n    // If there was no value for the tag, and no attribute, then remove it from the dictionary.\n    else if ([dictInProgress count] == 0)\n    {\n        NSMutableDictionary *parentDict = [dictionaryStack lastObject];\n        [parentDict removeObjectForKey:elementName];\n    }\n}\n\n- (void)parser:(NSXMLParser *)parser foundCharacters:(NSString *)string\n{\n    // Build the text value\n    [textInProgress appendString:[string stringByTrimmingCharactersInSet:[NSCharacterSet whitespaceAndNewlineCharacterSet]]];\n}\n\n- (void)parser:(NSXMLParser *)parser parseErrorOccurred:(NSError *)parseError\n{\n    // Set the error pointer to the parser's error object\n    if (errorPointer)\n        errorPointer = parseError;\n}\n\n@end\n\n\nXML\u3092\u89e3\u6790\u3057\u3066JSON\u5f62\u5f0f\u306b\u5909\u63db\u3057\u3066\u304f\u308c\u308b\u3042\u308a\u304c\u305f\u3044\u30e9\u30a4\u30d6\u30e9\u30ea\u3067\u3059\u3002\n\n[XML-to-NSDictionary GitHub](https://github.com/bcaccinolo/XML-to-NSDictionary)\n\nARC\u3092\u6709\u52b9\u306b\u3057\u3066\u3044\u308b\u3068\u30b3\u30f3\u30d1\u30a4\u30eb\u30a8\u30e9\u30fc\u304c\u3044\u304f\u3064\u304b\u767a\u751f\u3059\u308b\u306e\u3067\u3001\u5b9f\u88c5\u30d5\u30a1\u30a4\u30eb\u3092\u4fee\u6b63\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\u9577\u304f\u306a\u3063\u3061\u3083\u3046\u3051\u3069\u3001\u5fd8\u308c\u308b\u3068\u56f0\u308b\u304b\u3089\u307e\u308b\u3063\u3068\u8cbc\u4ed8\u3051\u3066\u304a\u304d\u307e\u3059\u306d\u3002\n\n###\u3042\u3093\u307e\u308a\u78ba\u8a8d\u3057\u3066\u306a\u3044\u3051\u3069\u3001\u30b3\u30f3\u30d1\u30a4\u30eb\u306e\u6642\u306b\u6012\u3089\u308c\u3066\u306a\u3044\u304b\u3089\u30e1\u30e2\u30ea\u30ea\u30fc\u30af\u3068\u304b\u5927\u4e08\u592b\u3060\u3088\u306d\u30fb\u30fb\u30fb\u30fb\n\n```objc:XMLReader.h\n#import <Foundation/Foundation.h>\n\n@interface XMLReader : NSObject <NSXMLParserDelegate>\n{\n    NSMutableArray *dictionaryStack;\n    NSMutableString *textInProgress;\n    NSError *errorPointer;\n}\n\n+ (NSDictionary *)dictionaryForPath:(NSString *)path error:(NSError *)errorPointer;\n+ (NSDictionary *)dictionaryForXMLData:(NSData *)data error:(NSError *)errorPointer;\n+ (NSDictionary *)dictionaryForXMLString:(NSString *)string error:(NSError *)errorPointer;\n\n@end\n\n@interface NSDictionary (XMLReaderNavigation)\n\n- (id)retrieveForPath:(NSString *)navPath;\n\n@end\n```\n\n```objc:XMLReader.m\n//\n//  XMLReader.m\n//\n\n#import \"XMLReader.h\"\n\nNSString *const kXMLReaderTextNodeKey = @\"text\";\n\n@interface XMLReader (Internal)\n\n- (id)initWithError:(NSError *)error;\n- (NSDictionary *)objectWithData:(NSData *)data;\n\n@end\n\n@implementation NSDictionary (XMLReaderNavigation)\n\n- (id)retrieveForPath:(NSString *)navPath\n{\n    // Split path on dots\n    NSArray *pathItems = [navPath componentsSeparatedByString:@\".\"];\n    \n    // Enumerate through array\n    NSEnumerator *e = [pathItems objectEnumerator];\n    NSString *path;\n    \n    // Set first branch from self\n    id branch = [self objectForKey:[e nextObject]];\n    int count = 1;\n    \n    while ((path = [e nextObject]))\n    {\n        // Check if this branch is an NSArray\n        if([branch isKindOfClass:[NSArray class]])\n        {\n            if ([path isEqualToString:@\"last\"])\n            {\n                branch = [branch lastObject];\n            }\n            else\n            {\n                if ([branch count] > [path intValue])\n                {\n                    branch = [branch objectAtIndex:[path intValue]];\n                }\n                else\n                {\n                    branch = nil;\n                }\n            }\n        }\n        else\n        {\n            // branch is assumed to be an NSDictionary\n            branch = [branch objectForKey:path];\n        }\n        \n        count++;\n    }\n    \n    return branch;\n}\n\n@end\n\n@implementation XMLReader\n\n#pragma mark -\n#pragma mark Public methods\n\n+ (NSDictionary *)dictionaryForPath:(NSString *)path error:(NSError *)errorPointer\n{\n    NSString *fullpath = [[NSBundle bundleForClass:self] pathForResource:path ofType:@\"xml\"];\n\tNSData *data = [[NSFileManager defaultManager] contentsAtPath:fullpath];\n    NSDictionary *rootDictionary = [XMLReader dictionaryForXMLData:data error:errorPointer];\n    \n\treturn rootDictionary;\n}\n\n+ (NSDictionary *)dictionaryForXMLData:(NSData *)data error:(NSError *)error\n{\n    XMLReader *reader = [[XMLReader alloc] initWithError:error];\n    NSDictionary *rootDictionary = [reader objectWithData:data];\n    //[reader release];\n    \n    return rootDictionary;\n}\n\n+ (NSDictionary *)dictionaryForXMLString:(NSString *)string error:(NSError *)error\n{\n    NSArray* lines = [string componentsSeparatedByString:@\"\\n\"];\n    NSMutableString* strData = [NSMutableString stringWithString:@\"\"];\n\n    for (int i = 0; i < [lines count]; i++)\n    {\n        [strData appendString:[[lines objectAtIndex:i] stringByTrimmingCharactersInSet:[NSCharacterSet whitespaceAndNewlineCharacterSet]]];\n    }\n\n    NSData *data = [strData dataUsingEncoding:NSUTF8StringEncoding];\n    return [XMLReader dictionaryForXMLData:data error:error];\n}\n\n#pragma mark -\n#pragma mark Parsing\n\n- (id)initWithError:(NSError *)error\n{\n    if ((self = [super init]))\n    {\n        errorPointer = error;\n    }\n    \n    return self;\n}\n\n- (void)dealloc\n{\n    //[dictionaryStack release];\n    //[textInProgress release];\n    \n    //[super dealloc];\n}\n\n- (NSDictionary *)objectWithData:(NSData *)data\n{\n    // Clear out any old data\n    //[dictionaryStack release];\n    //[textInProgress release];\n    \n    dictionaryStack = [[NSMutableArray alloc] init];\n    textInProgress = [[NSMutableString alloc] init];\n    \n    // Initialize the stack with a fresh dictionary\n    [dictionaryStack addObject:[NSMutableDictionary dictionary]];\n    \n    // Parse the XML\n    NSXMLParser *parser = [[NSXMLParser alloc] initWithData:data];\n    parser.delegate = self;\n    BOOL success = [parser parse];\n\t//[parser release];\n    \n    // Return the stack's root dictionary on success\n    if (success)\n    {\n        NSDictionary *resultDict = [dictionaryStack objectAtIndex:0];\n        \n        return resultDict;\n    }\n    \n    return nil;\n}\n\n#pragma mark -\n#pragma mark NSXMLParserDelegate methods\n\n- (void)parser:(NSXMLParser *)parser didStartElement:(NSString *)elementName namespaceURI:(NSString *)namespaceURI qualifiedName:(NSString *)qName attributes:(NSDictionary *)attributeDict\n{\n    // Get the dictionary for the current level in the stack\n    NSMutableDictionary *parentDict = [dictionaryStack lastObject];\n    \n    // Create the child dictionary for the new element\n    NSMutableDictionary *childDict = [NSMutableDictionary dictionary];\n\n    // Initialize child dictionary with the attributes, prefixed with '@'\n    for (NSString *key in attributeDict) {\n        [childDict setValue:[attributeDict objectForKey:key]\n                     forKey:[NSString stringWithFormat:@\"@%@\", key]];\n    }\n    \n    // If there's already an item for this key, it means we need to create an array\n    id existingValue = [parentDict objectForKey:elementName];\n    \n    if (existingValue)\n    {\n        NSMutableArray *array = nil;\n        \n        if ([existingValue isKindOfClass:[NSMutableArray class]])\n        {\n            // The array exists, so use it\n            array = (NSMutableArray *) existingValue;\n        }\n        else\n        {\n            // Create an array if it doesn't exist\n            array = [NSMutableArray array];\n            [array addObject:existingValue];\n            \n            // Replace the child dictionary with an array of children dictionaries\n            [parentDict setObject:array forKey:elementName];\n        }\n        \n        // Add the new child dictionary to the array\n        [array addObject:childDict];\n    }\n    else\n    {\n        // No existing value, so update the dictionary\n        [parentDict setObject:childDict forKey:elementName];\n    }\n    \n    // Update the stack\n    [dictionaryStack addObject:childDict];\n}\n\n- (void)parser:(NSXMLParser *)parser didEndElement:(NSString *)elementName namespaceURI:(NSString *)namespaceURI qualifiedName:(NSString *)qName\n{\n    // Update the parent dict with text info\n    NSMutableDictionary *dictInProgress = [dictionaryStack lastObject];\n    \n    // Pop the current dict\n    [dictionaryStack removeLastObject];\n    \n    // Set the text property\n    if ([textInProgress length] > 0)\n    {\n        if ([dictInProgress count] > 0)\n        {\n            [dictInProgress setObject:textInProgress forKey:kXMLReaderTextNodeKey];\n        }\n        else\n        {\n            // Given that there will only ever be a single value in this dictionary, let's replace the dictionary with a simple string.\n            NSMutableDictionary *parentDict = [dictionaryStack lastObject];\n            id parentObject = [parentDict objectForKey:elementName];\n            \n            // Parent is an Array\n            if ([parentObject isKindOfClass:[NSArray class]])\n            {\n                [parentObject removeLastObject];\n                [parentObject addObject:textInProgress];\n            }\n            \n            // Parent is a Dictionary\n            else\n            {\n                [parentDict removeObjectForKey:elementName];\n                [parentDict setObject:textInProgress forKey:elementName];\n            }\n        }\n        \n        // Reset the text\n        //[textInProgress release];\n        textInProgress = [[NSMutableString alloc] init];\n    }\n    \n    // If there was no value for the tag, and no attribute, then remove it from the dictionary.\n    else if ([dictInProgress count] == 0)\n    {\n        NSMutableDictionary *parentDict = [dictionaryStack lastObject];\n        [parentDict removeObjectForKey:elementName];\n    }\n}\n\n- (void)parser:(NSXMLParser *)parser foundCharacters:(NSString *)string\n{\n    // Build the text value\n\t[textInProgress appendString:[string stringByTrimmingCharactersInSet:[NSCharacterSet whitespaceAndNewlineCharacterSet]]];\n}\n\n- (void)parser:(NSXMLParser *)parser parseErrorOccurred:(NSError *)parseError\n{\n    // Set the error pointer to the parser's error object\n    if (errorPointer)\n        errorPointer = parseError;\n}\n\n@end\n```"}