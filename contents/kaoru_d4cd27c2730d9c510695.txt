{"tags": ["C++", "\u8a2d\u8a08", "C\u8a00\u8a9e"], "context": " More than 1 year has passed since last update.PHP\u306b\u306f\u6587\u5b57\u5217\u578b\u304c\u6700\u521d\u304b\u3089\u3042\u308b\u3002\n<?php\n$s = \"test\";\n?>\n\n\u30d0\u30a4\u30ca\u30ea\u30fc\u30bb\u30fc\u30d5\u3060\u3057\u3001\u6587\u5b57\u5217\u306e\u9023\u7d50\u3082\u7c21\u5358\u3067\u3042\u308b\u3002\n<?php\n$s = \"Hello\" . \" \" . \"world\" . \"!!\";\necho \"$s\u00a5n\";\n?>\n\nC\u8a00\u8a9e\u306b\u306f\u4f55\u3082\u306a\u3044\u3002\u56f0\u3063\u305f\u3002\n\u3068\u3044\u3046\u308f\u3051\u3067\u4f5c\u3063\u3066\u307f\u307e\u3057\u305f\u3002\n\nbinary_safe_string.c\n#include <stdio.h>\n#include <stdlib.h>\n#include <stdarg.h>\n#include <string.h>\n\n#define BSS_OK 0\n#define BSS_GENERIC_ERROR 1\n\ntypedef struct binary_safe_string_tag {\n    size_t allocated;\n    size_t length;\n    char *buf;\n} binary_safe_string;\n\nvoid bss_init(binary_safe_string *bss) {\n    memset(bss, 0, sizeof(binary_safe_string));\n}\n\nvoid bss_release(binary_safe_string *bss) {\n    free(bss->buf);\n    memset(bss, 0, sizeof(binary_safe_string));\n}\n\nint bss_reserve(binary_safe_string *bss, size_t sz) {\n    if (bss->allocated < sz) {\n        bss->buf = realloc(bss->buf, sz);\n        if (bss->buf) {\n            bss->allocated = sz;\n        }\n        else {\n            return BSS_GENERIC_ERROR;\n        }\n    }\n\n    return BSS_OK;\n}\n\nint bss_set_data(binary_safe_string *bss, const void *data, size_t len) {\n    int ret = bss_reserve(bss, len);\n    if (ret)\n        return ret;\n\n    memcpy(bss->buf, data, len);\n    bss->length = len;\n    return BSS_OK;\n}\n\nint bss_set_cstring(binary_safe_string *bss, const char *s) {\n    size_t len = strlen(s);\n    return bss_set_data(bss, s, len);\n}\n\nint bss_append_data(binary_safe_string *bss, const void *data, size_t len) {\n    int ret = bss_reserve(bss, (bss->length + len) * 2);   // allocate extra space to avoid memory allocation too often\n    if (ret)\n        return ret;\n\n    memcpy(&bss->buf[bss->length], data, len);\n    bss->length += len;\n    return BSS_OK;\n}\n\nint bss_append_cstring(binary_safe_string *bss, const char *s) {\n    size_t len = strlen(s);\n    return bss_append_data(bss, s, len);\n}\n\nint bss_concat(binary_safe_string *bss, ...) {\n    va_list ap;\n    char *s;\n    int ret = BSS_OK;\n\n    va_start(ap, bss);\n    while (1) {\n        s = va_arg(ap, char *);\n        if (!s)\n            break;\n        ret = bss_append_cstring(bss, s);\n        if (ret)\n            break;\n    }\n    va_end(ap);\n\n    return ret;\n}\n\nint main()\n{\n    binary_safe_string s;\n    bss_init(&s);\n\n    bss_concat(&s, \"Hello\", \" \", \"world\", \"!!\", NULL);\n\n    fwrite(s.buf, 1, s.length, stdout);\n    printf(\"\\n\");\n\n    bss_release(&s);\n\n    return 0;\n}\n\n\n\u30d3\u30eb\u30c9\u65b9\u6cd5\ngcc -Wall binary_safe_string.c\n\u5b9f\u884c\u7d50\u679c\nHello world!!\n\n\u3055\u3066\u3001\u3053\u3093\u306a\u8eca\u8f2a\u306e\u518d\u767a\u660e\u3092\u3059\u308b\u3088\u308a\u30e9\u30a4\u30d6\u30e9\u30ea\u30fc\u3092\u4f7f\u3063\u305f\u65b9\u304c\u305f\u3076\u3093\u3044\u3044\u3067\u3059\u3002\n\u4f55\u3088\u308a\u3001C++\u306b\u306fstd::string\u304c\u3042\u308b\u306e\u3067\u3001\u3053\u3063\u3061\u3092\u4f7f\u3063\u305f\u65b9\u304c\u3044\u3044\u3067\u3059\u306d\u3002\n\u305d\u308c\u3067\u3082\u3001\u3042\u3048\u3066\u8eca\u8f2a\u306e\u518d\u767a\u660e\u3092\u3057\u3066\u307f\u3066\u6a19\u6e96\u30e9\u30a4\u30d6\u30e9\u30ea\u3084STL\u306e\u3042\u308a\u304c\u305f\u307f\u3092\u611f\u3058\u308b\u306e\u3082\u697d\u3057\u3044\u3068\u601d\u3044\u307e\u3059\u3002\nPHP\u306b\u306f\u6587\u5b57\u5217\u578b\u304c\u6700\u521d\u304b\u3089\u3042\u308b\u3002\n\n```php\n<?php\n$s = \"test\";\n?>\n```\n\n\u30d0\u30a4\u30ca\u30ea\u30fc\u30bb\u30fc\u30d5\u3060\u3057\u3001\u6587\u5b57\u5217\u306e\u9023\u7d50\u3082\u7c21\u5358\u3067\u3042\u308b\u3002\n\n```php\n<?php\n$s = \"Hello\" . \" \" . \"world\" . \"!!\";\necho \"$s\u00a5n\";\n?>\n```\n\nC\u8a00\u8a9e\u306b\u306f\u4f55\u3082\u306a\u3044\u3002\u56f0\u3063\u305f\u3002\n\n\u3068\u3044\u3046\u308f\u3051\u3067\u4f5c\u3063\u3066\u307f\u307e\u3057\u305f\u3002\n\n```c:binary_safe_string.c\n#include <stdio.h>\n#include <stdlib.h>\n#include <stdarg.h>\n#include <string.h>\n\n#define BSS_OK 0\n#define BSS_GENERIC_ERROR 1\n\ntypedef struct binary_safe_string_tag {\n    size_t allocated;\n    size_t length;\n    char *buf;\n} binary_safe_string;\n\nvoid bss_init(binary_safe_string *bss) {\n    memset(bss, 0, sizeof(binary_safe_string));\n}\n\nvoid bss_release(binary_safe_string *bss) {\n    free(bss->buf);\n    memset(bss, 0, sizeof(binary_safe_string));\n}\n\nint bss_reserve(binary_safe_string *bss, size_t sz) {\n    if (bss->allocated < sz) {\n        bss->buf = realloc(bss->buf, sz);\n        if (bss->buf) {\n            bss->allocated = sz;\n        }\n        else {\n            return BSS_GENERIC_ERROR;\n        }\n    }\n\n    return BSS_OK;\n}\n\nint bss_set_data(binary_safe_string *bss, const void *data, size_t len) {\n    int ret = bss_reserve(bss, len);\n    if (ret)\n        return ret;\n\n    memcpy(bss->buf, data, len);\n    bss->length = len;\n    return BSS_OK;\n}\n\nint bss_set_cstring(binary_safe_string *bss, const char *s) {\n    size_t len = strlen(s);\n    return bss_set_data(bss, s, len);\n}\n\nint bss_append_data(binary_safe_string *bss, const void *data, size_t len) {\n    int ret = bss_reserve(bss, (bss->length + len) * 2);   // allocate extra space to avoid memory allocation too often\n    if (ret)\n        return ret;\n\n    memcpy(&bss->buf[bss->length], data, len);\n    bss->length += len;\n    return BSS_OK;\n}\n\nint bss_append_cstring(binary_safe_string *bss, const char *s) {\n    size_t len = strlen(s);\n    return bss_append_data(bss, s, len);\n}\n\nint bss_concat(binary_safe_string *bss, ...) {\n    va_list ap;\n    char *s;\n    int ret = BSS_OK;\n\n    va_start(ap, bss);\n    while (1) {\n        s = va_arg(ap, char *);\n        if (!s)\n            break;\n        ret = bss_append_cstring(bss, s);\n        if (ret)\n            break;\n    }\n    va_end(ap);\n\n    return ret;\n}\n\nint main()\n{\n    binary_safe_string s;\n    bss_init(&s);\n\n    bss_concat(&s, \"Hello\", \" \", \"world\", \"!!\", NULL);\n\n    fwrite(s.buf, 1, s.length, stdout);\n    printf(\"\\n\");\n\n    bss_release(&s);\n\n    return 0;\n}\n```\n\n\u30d3\u30eb\u30c9\u65b9\u6cd5\n\n`gcc -Wall binary_safe_string.c`\n\n\u5b9f\u884c\u7d50\u679c\n\n```\nHello world!!\n```\n\n\n\u3055\u3066\u3001\u3053\u3093\u306a\u8eca\u8f2a\u306e\u518d\u767a\u660e\u3092\u3059\u308b\u3088\u308a\u30e9\u30a4\u30d6\u30e9\u30ea\u30fc\u3092\u4f7f\u3063\u305f\u65b9\u304c\u305f\u3076\u3093\u3044\u3044\u3067\u3059\u3002\n\n\u4f55\u3088\u308a\u3001C++\u306b\u306fstd::string\u304c\u3042\u308b\u306e\u3067\u3001\u3053\u3063\u3061\u3092\u4f7f\u3063\u305f\u65b9\u304c\u3044\u3044\u3067\u3059\u306d\u3002\n\n\u305d\u308c\u3067\u3082\u3001\u3042\u3048\u3066\u8eca\u8f2a\u306e\u518d\u767a\u660e\u3092\u3057\u3066\u307f\u3066\u6a19\u6e96\u30e9\u30a4\u30d6\u30e9\u30ea\u3084STL\u306e\u3042\u308a\u304c\u305f\u307f\u3092\u611f\u3058\u308b\u306e\u3082\u697d\u3057\u3044\u3068\u601d\u3044\u307e\u3059\u3002\n"}