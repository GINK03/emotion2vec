{"context": " More than 1 year has passed since last update.(defpackage :parallel\n  (:use)\n  (:export :dotimes\n           :cpu-cores)\n  (:shadow :dotimes))\n\n(defun parallel:cpu-cores ()\n  #+linux\n  (with-open-file (in \"/proc/cpuinfo\")\n    (cl:loop\n       :for line := (read-line in nil) :while line\n       :when (search \"cpu cores\" line)\n         :return (values (parse-integer line :start (1+ (position #\\: line))))))\n  #-linux :not-implemented)\n\n\n(define-compiler-macro parallel:cpu-cores ()\n  `,(parallel:cpu-cores))\n\n\n(defmacro parallel:dotimes ((var count &optional result) &body body)\n  (sb-int:with-unique-names (cores start end ths s e task/core rem\n                             ans dotask block abortp result/abort win)\n    `(let* ((,cores (parallel:cpu-cores))\n            (,start 0)\n            (,end 0)\n            (,ths (make-list ,cores))\n            (,result/abort ',win))\n       (declare (fixnum ,start ,end ,cores)\n                (list ,ths) )\n       (multiple-value-bind (,task/core ,rem)\n                            (floor ,count ,cores)\n         (declare (fixnum ,task/core ,rem))\n         (unwind-protect\n            (flet ((,dotask (,s ,e)\n                     (declare (fixnum ,s ,e))\n                     (let* ((,abortp ',abortp)\n                            (,ans (block nil\n                                    (loop\n                                      :named ,block\n                                      :for ,var :of-type fixnum :from ,s :below ,e\n                                      :do (let ((,var ,var)) ,@body)\n                                      :finally (setq ,abortp nil)\n                                               (return-from ,block ,var)))))\n                       (if (eq ',abortp ,abortp)\n                           (setq ,result/abort ,ans)\n                           ,ans))))\n              (incf ,end (+ ,task/core ,rem))\n              ;; first thread\n              (setf (car ,ths)\n                    (sb-thread:make-thread #',dotask\n                                           :arguments (list 0 ,end)) )\n              (setq ,start ,end)\n              (incf ,end ,task/core)\n              ;; rest threads\n              (map-into (cdr ,ths)\n                        (lambda ()\n                          (prog1\n                            (sb-thread:make-thread #',dotask\n                                                   :arguments (list ,start ,end))\n                            (incf ,start ,task/core)\n                            (incf ,end ,task/core) ))))\n           ;; clean-up\n           (mapc #'sb-thread:join-thread ,ths))\n         ;; result-form\n         (if (eq ',win ,result/abort)\n             (let ((,var ,count))\n               (declare (ignorable ,var))\n               ,result)\n             ,result/abort)))))\n\n\n\u5b9f\u884c\n\n(declaim ((simple-array fixnum (65536)) *a*))\n(defparameter *a*\n  (make-array 65536 :element-type 'fixnum :initial-element 1) )\n\n(parallel:dotimes (i 65536 (reduce #'+ *a*))\n;  (and (= (random 100) 55) (return :abort!))\n  (setf (cl:aref *a* i)\n        (fib 15)))\n;\u21d2 39976960\n#|------------------------------------------------------------|\nEvaluation took:\n  1.978 seconds of real time\n  3.676230 seconds of total run time (3.672230 user, 0.004000 system)\n  185.84% CPU\n  4,734,659,880 processor cycles\n  2,131,408 bytes consed\n\nIntel(R) Core(TM)2 Duo CPU     P8600  @ 2.40GHz\n |------------------------------------------------------------|#\n\n\n(dotimes (i 65536 (reduce #'+ *a*))\n;  (and (= (random 100) 55) (return :abort!))\n  (setf (cl:aref *a* i)\n        (fib 15)))\n;\u21d2 39976960\n#|------------------------------------------------------------|\nEvaluation took:\n  3.641 seconds of real time\n  3.644228 seconds of total run time (3.644228 user, 0.000000 system)\n  100.08% CPU\n  8,715,282,210 processor cycles\n  2,280,224 bytes consed\n\nIntel(R) Core(TM)2 Duo CPU     P8600  @ 2.40GHz\n |------------------------------------------------------------|#\n\n\u3053\u3093\u306a\u611f\u3058\u3067\u3001\u901a\u5e38\u306e\u66f8\u304d\u65b9\u3068\u540c\u3058\u611f\u3058\u66f8\u3044\u305f\u3089\u81ea\u52d5\u3067\u30d1\u30e9\u30ec\u30eb\u306b\u306a\u308b\u3088\u3046\u306a\u3001C#\u3067\u3044\u3046\u3001System.Threading.Tasks\u7684\u306a\u30e9\u30a4\u30d6\u30e9\u30ea\u3067\u304a\u52e7\u3081\u306e\u3082\u306e\u3092\u6559\u3048\u3066\u304f\u3060\u3055\u3044\n```cl\n(defpackage :parallel\n  (:use)\n  (:export :dotimes\n           :cpu-cores)\n  (:shadow :dotimes))\n\n(defun parallel:cpu-cores ()\n  #+linux\n  (with-open-file (in \"/proc/cpuinfo\")\n    (cl:loop\n       :for line := (read-line in nil) :while line\n       :when (search \"cpu cores\" line)\n         :return (values (parse-integer line :start (1+ (position #\\: line))))))\n  #-linux :not-implemented)\n\n\n(define-compiler-macro parallel:cpu-cores ()\n  `,(parallel:cpu-cores))\n\n\n(defmacro parallel:dotimes ((var count &optional result) &body body)\n  (sb-int:with-unique-names (cores start end ths s e task/core rem\n                             ans dotask block abortp result/abort win)\n    `(let* ((,cores (parallel:cpu-cores))\n            (,start 0)\n            (,end 0)\n            (,ths (make-list ,cores))\n            (,result/abort ',win))\n       (declare (fixnum ,start ,end ,cores)\n                (list ,ths) )\n       (multiple-value-bind (,task/core ,rem)\n                            (floor ,count ,cores)\n         (declare (fixnum ,task/core ,rem))\n         (unwind-protect\n            (flet ((,dotask (,s ,e)\n                     (declare (fixnum ,s ,e))\n                     (let* ((,abortp ',abortp)\n                            (,ans (block nil\n                                    (loop\n                                      :named ,block\n                                      :for ,var :of-type fixnum :from ,s :below ,e\n                                      :do (let ((,var ,var)) ,@body)\n                                      :finally (setq ,abortp nil)\n                                               (return-from ,block ,var)))))\n                       (if (eq ',abortp ,abortp)\n                           (setq ,result/abort ,ans)\n                           ,ans))))\n              (incf ,end (+ ,task/core ,rem))\n              ;; first thread\n              (setf (car ,ths)\n                    (sb-thread:make-thread #',dotask\n                                           :arguments (list 0 ,end)) )\n              (setq ,start ,end)\n              (incf ,end ,task/core)\n              ;; rest threads\n              (map-into (cdr ,ths)\n                        (lambda ()\n                          (prog1\n                            (sb-thread:make-thread #',dotask\n                                                   :arguments (list ,start ,end))\n                            (incf ,start ,task/core)\n                            (incf ,end ,task/core) ))))\n           ;; clean-up\n           (mapc #'sb-thread:join-thread ,ths))\n         ;; result-form\n         (if (eq ',win ,result/abort)\n             (let ((,var ,count))\n               (declare (ignorable ,var))\n               ,result)\n             ,result/abort)))))\n```\n- \u5b9f\u884c\n\n```cl\n(declaim ((simple-array fixnum (65536)) *a*))\n(defparameter *a*\n  (make-array 65536 :element-type 'fixnum :initial-element 1) )\n\n(parallel:dotimes (i 65536 (reduce #'+ *a*))\n;  (and (= (random 100) 55) (return :abort!))\n  (setf (cl:aref *a* i)\n        (fib 15)))\n;\u21d2 39976960\n#|------------------------------------------------------------|\nEvaluation took:\n  1.978 seconds of real time\n  3.676230 seconds of total run time (3.672230 user, 0.004000 system)\n  185.84% CPU\n  4,734,659,880 processor cycles\n  2,131,408 bytes consed\n\nIntel(R) Core(TM)2 Duo CPU     P8600  @ 2.40GHz\n |------------------------------------------------------------|#\n\n\n(dotimes (i 65536 (reduce #'+ *a*))\n;  (and (= (random 100) 55) (return :abort!))\n  (setf (cl:aref *a* i)\n        (fib 15)))\n;\u21d2 39976960\n#|------------------------------------------------------------|\nEvaluation took:\n  3.641 seconds of real time\n  3.644228 seconds of total run time (3.644228 user, 0.000000 system)\n  100.08% CPU\n  8,715,282,210 processor cycles\n  2,280,224 bytes consed\n\nIntel(R) Core(TM)2 Duo CPU     P8600  @ 2.40GHz\n |------------------------------------------------------------|#\n```\n\u3053\u3093\u306a\u611f\u3058\u3067\u3001\u901a\u5e38\u306e\u66f8\u304d\u65b9\u3068\u540c\u3058\u611f\u3058\u66f8\u3044\u305f\u3089\u81ea\u52d5\u3067\u30d1\u30e9\u30ec\u30eb\u306b\u306a\u308b\u3088\u3046\u306a\u3001C#\u3067\u3044\u3046\u3001System.Threading.Tasks\u7684\u306a\u30e9\u30a4\u30d6\u30e9\u30ea\u3067\u304a\u52e7\u3081\u306e\u3082\u306e\u3092\u6559\u3048\u3066\u304f\u3060\u3055\u3044\n", "tags": ["common-lisp"]}