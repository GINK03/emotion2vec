{"context": " More than 1 year has passed since last update.\u554f\u984c http://nabetani.sakura.ne.jp/hena/ord25rotcell/\n\u89e3\u7b54\u30ea\u30f3\u30af\u96c6 http://qiita.com/Nabetani/items/636fce060e1ebbc95f9b\n\u30a4\u30d9\u30f3\u30c8 http://yhpg.doorkeeper.jp/events/13947\n\u5f53\u65e5\u304a\u898b\u305b\u3057\u305f\u5b9f\u88c5\u3002\nmodule RotCell\n  class Rotater\n    def initialize(board)\n      @board = board\n    end\n\n    def rot_core(ix, cx, cy)\n      ix = ix.sort_by{ |i|\n        y, x = i.divmod(5)\n        Math.atan2(y - cy, x - cx)\n      }\n      v = @board.values_at(*ix)\n      v.size.times.each do |i|\n        @board[ix[i]] = v[i - 1]\n      end\n    end\n\n    def rot(cmd)\n      positions = cmd.chars.map { |c| @board.index(c).divmod(5) }\n      left, right = positions.map { |xy| xy[1] }.minmax\n      top, bottom = positions.map { |xy| xy[0] }.minmax\n      indices_from = @board.size.times.select{ |xy|\n        y, x = xy.divmod(5)\n        (((x == left - 1 || x == right + 1) && ((top - 1..bottom + 1) === y)) ||\n            ((y == top - 1 || y == bottom + 1) && ((left - 1..right + 1) === x)))\n      }\n      rot_core(indices_from, (left + right) / 2r, (top + bottom) / 2r)\n      indices_from.map { |ix| @board[ix] }.sort.join\n    end\n  end\n\n  def self.solve(s)\n    cells = ('a'..'y').to_a\n    commands = s.split(',')\n    ro = Rotater.new(cells)\n    commands.each do |c|\n      ro.rot(c)\n    end\n    r = ro.rot(commands[-1])\n    r.empty? ? 'none' : r\n  end\nend\n\nDATA.map do |line|\n  id, src, expected = line.split(/\\s+/)\n  actual = RotCell.solve(src)\n  ok = actual == expected\n  puts '***NG*** : %s %s->%s ( %s )' % [id, src, actual, expected] unless ok\n  ok\nend.all?.tap { |r| puts ( r ? 'ok' : 'NG') }\n\n__END__\n0 ab,gg,uj,pt,an,ir,rr  hpqsvwxy\n1 gs,ok abcdftvwxy\n2 gs,sg,ok  none\n\n\u3044\u3064\u3082\u901a\u308a\u3001\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u306e\u5927\u534a\u306f\u7701\u7565\u3002\n\u5b9f\u88c5\u6226\u7565\u3067\u9078\u629e\u306f\u3044\u304f\u3064\u304b\u3042\u3063\u3066\u3002\n\n\u30c7\u30fc\u30bf\u306e\u6301\u3061\u65b9\na) \u76e4\u9762\u30922\u6b21\u5143\u307e\u305f\u306f1\u6b21\u5143\u306e\u914d\u5217\u3067\u6301\u3064\nb) \u6587\u5b57\u3068\u5ea7\u6a19\u306e\u5bfe\u5fdc\u3092\u3001key-value pair \u3067\u6301\u3064\n\u56de\u8ee2\u95a2\u9023\np) \u56de\u308b\u65b9\u5411\u306b\u305d\u3063\u3066\u30bb\u30eb\u3092\u96c6\u3081\u308b\nq) \u9069\u5f53\u306b\u96c6\u3081\u3066\u3001\u3042\u3068\u3067\u6574\u5217\u3059\u308b\n\n\u3042\u305f\u308a\u304c\u91cd\u8981\u3060\u3068\u601d\u3046\u3002\n\u3067\u3002\n\u3053\u306e\u5b9f\u88c5\u306f aq \u3068\u3044\u3046\u6226\u7565\u306b\u3057\u305f\u3002\n\u4f1a\u5834\u3067\u306f ap \u3068 bp \u306e\u65b9\u304c\u3044\u3089\u3063\u3057\u3083\u3063\u305f\u3051\u3069 q \u3092\u9078\u3093\u3060\u65b9\u306f\u3044\u306a\u304b\u3063\u305f\u3002\nruby \u306a\u306e\u3067 minmax \u3084 divmod \u306e\u7d50\u679c\u3092\u591a\u91cd\u4ee3\u5165\u3067\u53d6\u5f97\u3068\u304b\u3001ary[-1] \u304c ary.last \u3068\u540c\u7b49\u3067\u3042\u308b\u3053\u3068\u3092\u5229\u7528\u3059\u308b\u3068\u304b\u3001\u305d\u3046\u3044\u3046\u5c0f\u30cd\u30bf\u3092\u7a4d\u307f\u91cd\u306d\u3066\u3044\u308b\u3002\n\u5168\u4f53\u7684\u306b\u7f8e\u3057\u304f\u306a\u3044\u5b9f\u88c5\u3060\u3068\u611f\u3058\u3066\u306f\u3044\u308b\u3082\u306e\u306e\u3001\u3053\u3093\u306a\u611f\u3058\u3067\u3002\nruby \u306b\u504f\u3063\u3066\u3044\u308b\u306e\u3067\u5225\u306e\u8a00\u8a9e\u3067\u3044\u304f\u3079\u304d\u3060\u3063\u305f\u306a\u3041\u3068\u601d\u3063\u305f\u308a\u3002\n\n\u554f\u984c http://nabetani.sakura.ne.jp/hena/ord25rotcell/\n\u89e3\u7b54\u30ea\u30f3\u30af\u96c6 http://qiita.com/Nabetani/items/636fce060e1ebbc95f9b\n\u30a4\u30d9\u30f3\u30c8 http://yhpg.doorkeeper.jp/events/13947\n\n\u5f53\u65e5\u304a\u898b\u305b\u3057\u305f\u5b9f\u88c5\u3002\n\n```ruby\nmodule RotCell\n  class Rotater\n    def initialize(board)\n      @board = board\n    end\n\n    def rot_core(ix, cx, cy)\n      ix = ix.sort_by{ |i|\n        y, x = i.divmod(5)\n        Math.atan2(y - cy, x - cx)\n      }\n      v = @board.values_at(*ix)\n      v.size.times.each do |i|\n        @board[ix[i]] = v[i - 1]\n      end\n    end\n\n    def rot(cmd)\n      positions = cmd.chars.map { |c| @board.index(c).divmod(5) }\n      left, right = positions.map { |xy| xy[1] }.minmax\n      top, bottom = positions.map { |xy| xy[0] }.minmax\n      indices_from = @board.size.times.select{ |xy|\n        y, x = xy.divmod(5)\n        (((x == left - 1 || x == right + 1) && ((top - 1..bottom + 1) === y)) ||\n            ((y == top - 1 || y == bottom + 1) && ((left - 1..right + 1) === x)))\n      }\n      rot_core(indices_from, (left + right) / 2r, (top + bottom) / 2r)\n      indices_from.map { |ix| @board[ix] }.sort.join\n    end\n  end\n\n  def self.solve(s)\n    cells = ('a'..'y').to_a\n    commands = s.split(',')\n    ro = Rotater.new(cells)\n    commands.each do |c|\n      ro.rot(c)\n    end\n    r = ro.rot(commands[-1])\n    r.empty? ? 'none' : r\n  end\nend\n\nDATA.map do |line|\n  id, src, expected = line.split(/\\s+/)\n  actual = RotCell.solve(src)\n  ok = actual == expected\n  puts '***NG*** : %s %s->%s ( %s )' % [id, src, actual, expected] unless ok\n  ok\nend.all?.tap { |r| puts ( r ? 'ok' : 'NG') }\n\n__END__\n0 ab,gg,uj,pt,an,ir,rr  hpqsvwxy\n1 gs,ok abcdftvwxy\n2 gs,sg,ok  none\n```\n\n\u3044\u3064\u3082\u901a\u308a\u3001\u30c6\u30b9\u30c8\u30c7\u30fc\u30bf\u306e\u5927\u534a\u306f\u7701\u7565\u3002\n\n\u5b9f\u88c5\u6226\u7565\u3067\u9078\u629e\u306f\u3044\u304f\u3064\u304b\u3042\u3063\u3066\u3002\n\n* \u30c7\u30fc\u30bf\u306e\u6301\u3061\u65b9<br>\n a) \u76e4\u9762\u30922\u6b21\u5143\u307e\u305f\u306f1\u6b21\u5143\u306e\u914d\u5217\u3067\u6301\u3064<br>\n b) \u6587\u5b57\u3068\u5ea7\u6a19\u306e\u5bfe\u5fdc\u3092\u3001key-value pair \u3067\u6301\u3064\n* \u56de\u8ee2\u95a2\u9023<br>\n p) \u56de\u308b\u65b9\u5411\u306b\u305d\u3063\u3066\u30bb\u30eb\u3092\u96c6\u3081\u308b<br>\n q) \u9069\u5f53\u306b\u96c6\u3081\u3066\u3001\u3042\u3068\u3067\u6574\u5217\u3059\u308b\n\n\u3042\u305f\u308a\u304c\u91cd\u8981\u3060\u3068\u601d\u3046\u3002\n\n\u3067\u3002\n\u3053\u306e\u5b9f\u88c5\u306f aq \u3068\u3044\u3046\u6226\u7565\u306b\u3057\u305f\u3002\n\u4f1a\u5834\u3067\u306f ap \u3068 bp \u306e\u65b9\u304c\u3044\u3089\u3063\u3057\u3083\u3063\u305f\u3051\u3069 q \u3092\u9078\u3093\u3060\u65b9\u306f\u3044\u306a\u304b\u3063\u305f\u3002\n\nruby \u306a\u306e\u3067 `minmax` \u3084 `divmod` \u306e\u7d50\u679c\u3092\u591a\u91cd\u4ee3\u5165\u3067\u53d6\u5f97\u3068\u304b\u3001`ary[-1]` \u304c `ary.last` \u3068\u540c\u7b49\u3067\u3042\u308b\u3053\u3068\u3092\u5229\u7528\u3059\u308b\u3068\u304b\u3001\u305d\u3046\u3044\u3046\u5c0f\u30cd\u30bf\u3092\u7a4d\u307f\u91cd\u306d\u3066\u3044\u308b\u3002\n\n\u5168\u4f53\u7684\u306b\u7f8e\u3057\u304f\u306a\u3044\u5b9f\u88c5\u3060\u3068\u611f\u3058\u3066\u306f\u3044\u308b\u3082\u306e\u306e\u3001\u3053\u3093\u306a\u611f\u3058\u3067\u3002\n\nruby \u306b\u504f\u3063\u3066\u3044\u308b\u306e\u3067\u5225\u306e\u8a00\u8a9e\u3067\u3044\u304f\u3079\u304d\u3060\u3063\u305f\u306a\u3041\u3068\u601d\u3063\u305f\u308a\u3002\n\n\n\n\n\n", "tags": ["yhpg", "\u3069\u3046\u66f8\u304f", "Ruby"]}