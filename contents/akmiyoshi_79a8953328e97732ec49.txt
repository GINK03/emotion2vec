{"context": " More than 1 year has passed since last update.\n\n\u306f\u3058\u3081\u306b\n\u3053\u306e\u9023\u8f09\u3067\u306fCommon Lisp\u306eLOOP\u30de\u30af\u30ed\u3092\u30b5\u30f3\u30d7\u30eb\u3092\u4f7f\u3063\u3066\u7d39\u4ecb\u3059\u308b\u3002\nLOOP\u30de\u30af\u30ed\u306f (cl\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u30ed\u30fc\u30c9\u3059\u308b\u3053\u3068\u3067) Emacs Lisp\u3067\u3082\u5229\u7528\u53ef\u80fd\u3067\u3042\u308b\u3002\n\u3010Common Lisp: loop\u30de\u30af\u30ed\u7528\u6cd5\u6284\u3088\u308a\u5f15\u7528\u3011\n\nGraham\u306e ANSI Common Lisp \u3067\u306f\u5acc\u308f\u308c\u3066\u3044\u3066\u788c\u306b\u8aac\u660e\u306e\u306a\u3044loop\u30de\u30af\u30ed\u3002\u4e00\u65b9\u3001 \u5b9f\u8df5Common Lisp \u3067\u306f\u5bfe\u7167\u7684\u306b\u597d\u3093\u3067\u7528\u3044\u3089\u308c\u3066\u3044\u3066\u3001\u5168\u7de8\u306b\u6e21\u3063\u3066\u983b\u7e41\u306b\u4f7f\u308f\u308c\u3066\u3044\u308b\u3002\u3057\u304b\u3057loop\u30de\u30af\u30ed\u306f\u96e3\u3057\u3044\u3068\u3044\u3046\u610f\u8b58\u304c\u3042\u308b\u306e\u304b\u305d\u306e\u8aac\u660e\u306f\u7b2c22\u7ae0\u3068\u304b\u306a\u308a\u5f8c\u56de\u3057\u306b\u3055\u308c\u3066\u304a\u308a\u3001\u3061\u3050\u306f\u3050\u306a\u611f\u3092\u53d7\u3051\u308b\u3002\u3053\u3053\u3067\u306f\u3001 \u9ed2\u5e2f\u306e\u305f\u3081\u306eLOOP \u3068\u3044\u3046\u984c\u306e\u3064\u3051\u3089\u308c\u305f\u305d\u306e\u7ae0\u3067\u89e3\u8aac\u3055\u308c\u3066\u3044\u308bloop\u30de\u30af\u30ed\u306e\u7528\u6cd5\u3092\u6574\u7406\u3057\u3066\u307f\u305f\u3002\nANSI Common Lisp \u3067\u306e\u9ed2\u9b54\u8853\u6271\u3044\u306b\u656c\u9060\u3057\u3066\u3044\u305floop\u30de\u30af\u30ed\u3060\u3063\u305f\u304c\u3001\u3053\u3046\u3057\u3066\u6574\u7406\u3057\u3066\u307f\u308b\u3068\u305d\u308c\u307b\u3069\u96e3\u3057\u304f\u8003\u3048\u305a\u3068\u3082\u4fbf\u5229\u306b\u4f7f\u3046\u3053\u3068\u304c\u3067\u304d\u305d\u3046\u3060\u3002\n\u5b9f\u8df5Common Lisp\n\u4f5c\u8005: Peter Seibel,\u4f50\u91ce\u5321\u4fca,\u6c34\u4e38\u6df3,\u5712\u57ce\u96c5\u4e4b,\u91d1\u5b50\u7950\u4ecb\n\u51fa\u7248\u793e/\u30e1\u30fc\u30ab\u30fc: \u30aa\u30fc\u30e0\u793e\n\u767a\u58f2\u65e5: 2008/07/26\n\u30e1\u30c7\u30a3\u30a2: \u5358\u884c\u672c\uff08\u30bd\u30d5\u30c8\u30ab\u30d0\u30fc\uff09\n\n\nLOOP\u306e\u30d1\u30fc\u30c4(\u9ed2\u5e2f\u306e\u305f\u3081\u306eLOOP\u3088\u308a)\nLOOP\u306e\u4e2d\u3067\u306f\u6b21\u306e\u3088\u3046\u306a\u3053\u3068\u304c\u3067\u304d\u308b\u3002\n\n\u6570\u5024\u7684\u306a\u5909\u6570\u3084\u591a\u69d8\u306a\u30c7\u30fc\u30bf\u69cb\u9020\u306b\u308f\u305f\u308b\u5909\u6570\u3092\u66f4\u65b0\u3057\u3066\u3044\u304f\n\u30eb\u30fc\u30d7\u3057\u3066\u3044\u308b\u9593\u306b\u898b\u3048\u308b\u5024\u3092\u53ce\u96c6(collect)\u3001\u8a08\u6570(count)\u3001\u5408\u8a08(sum)\u3001\u6700\u5c0f\u5316(minimize)\u3001\u6700\u5927\u5316(maximize)\u3059\u308b\n\u4efb\u610f\u306eLisp\u5f0f\u3092\u5b9f\u884c\u3059\u308b\n\u3044\u3064\u30eb\u30fc\u30d7\u3092\u7d42\u4e86\u3059\u308b\u304b\u3092\u6c7a\u5b9a\u3059\u308b\n\u305d\u308c\u3089\u3092\u6761\u4ef6\u4ed8\u304d\u3067\u5b9f\u884c\u3059\u308b\n\n\u4e0a\u8a18\u306b\u52a0\u3048\u3066\u3001LOOP\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u30b7\u30f3\u30bf\u30c3\u30af\u30b9\u3092\u63d0\u4f9b\u3059\u308b\u3002\n\n\u30eb\u30fc\u30d7\u5185\u3067\u4f7f\u7528\u3059\u308b\u30ed\u30fc\u30ab\u30eb\u5909\u6570\u306e\u751f\u6210\n\u30eb\u30fc\u30d7\u306e\u524d\u5f8c\u306b\u5b9f\u884c\u3059\u308b\u4efb\u610f\u306eLisp\u5f0f\u306e\u6307\u5b9a\n\n\n\u30b5\u30f3\u30d7\u30eb (Emacs Lisp \u304a\u3088\u3073 GNU CLISP 2.49 \u3067\u52d5\u4f5c\u78ba\u8a8d\u3057\u3066\u3044\u307e\u3059)\n\n\u6700\u3082\u5358\u7d14\u306a\u30eb\u30fc\u30d7\n\n\u30ea\u30b9\u30c8\u8981\u7d20\u3092\u53cd\u5fa9\u3057\u3066\u305d\u308c\u305e\u308c\u306e\u8981\u7d20\u3092print\u3059\u308b\u3002\n\n\n\u30de\u30af\u30ed\u5c55\u958b\n> (require 'cl)\n> (loop for x in '(a b c d e)\n        do (print x))\n\u21d3\n(let* ((--cl-var-0-- '(a b c d e))\n       (x nil))\n  (while (consp --cl-var-0--)\n    (setq x (car --cl-var-0--))\n    (print x)\n    (setq --cl-var-0-- (cdr --cl-var-0--)))\n  nil)\n\n\n\n\u5b9f\u884c\u7d50\u679c\n> (require 'cl)\n> (loop for x in '(a b c d e)\n        do (print x))\na\nb\nc\nd\ne\n\u21d2nil\n\n\n\n2\u3064\u306e\u30ea\u30b9\u30c8\u306e\u8981\u7d20\u3092\u4e26\u5217\u306b\u53cd\u5fa9\u3057\u3066\u3001collect \u3067\u6307\u5b9a\u3055\u308c\u305f\u30d5\u30a9\u30fc\u30e0\u3092\u8a55\u4fa1\u3057\u305f\u5024\u3092\u30ea\u30b9\u30c8\u306b\u3064\u306a\u3044\u3067LOOP\u306e\u623b\u308a\u5024\u3068\u3059\u308b\u3002\n\n\n\u30de\u30af\u30ed\u5c55\u958b\n> (require 'cl)\n> (loop for x in '(a b c d e)\n        for y in '(1 2 3 4 5)\n        collect (list x y))\n\u21d3\n(let* ((--cl-var-0-- '(a b c d e))\n       (x nil)\n       (--cl-var-1-- '(1 2 3 4 5))\n       (y nil)\n       (--cl-var-2-- nil))\n  (while\n      (and\n       (consp --cl-var-0--)\n       (progn\n         (setq x (car --cl-var-0--))\n         (consp --cl-var-1--)))\n    (setq y (car --cl-var-1--))\n    (push (list x y) --cl-var-2--)\n    (setq --cl-var-0-- (cdr --cl-var-0--))\n    (setq --cl-var-1-- (cdr --cl-var-1--)))\n  (nreverse --cl-var-2--))\n\n\n\n\u5b9f\u884c\u7d50\u679c\n> (require 'cl)\n> (loop for x in '(a b c d e)\n        for y in '(1 2 3 4 5)\n        collect (list x y))\n\u21d2((a 1) (b 2) (c 3) (d 4) (e 5))\n\n\n\n\u6761\u4ef6\u4ed8\u304ddo (when, if \uff5e else \uff5e)\n\n1\u3064\u306e\u30ea\u30b9\u30c8\u30681\u3064\u306e\u30ab\u30a6\u30f3\u30bf\u30fc\u3092\u4e26\u5217\u306b\u53cd\u5fa9\u3059\u308b\u3002\u53cd\u5fa9\u306e\u7d42\u4e86\u30bf\u30a4\u30df\u30f3\u30b0\u306f\u30ea\u30b9\u30c8\u306e\u9577\u3055\u306b\u3088\u3063\u3066\u6c7a\u307e\u308b\u30022\u30bb\u30c3\u30c8\u306e\u30a2\u30af\u30b7\u30e7\u30f3(do)\u304c\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u3066\u30011\u3064\u306f\u6761\u4ef6\u4ed8\u304d\u3067\u5b9f\u884c\u3055\u308c\u308b\u3002\n\n\n\u30de\u30af\u30ed\u5c55\u958b\n> (require 'cl)\n> (loop for x in '(a b c d e)\n        for y from 1\n        when (> y 1) do (princ \", \")\n        do (princ x))\n\u21d3\n(let* ((--cl-var-0-- '(a b c d e))\n       (x nil)\n       (y 1))\n  (while (consp --cl-var-0--)\n    (setq x (car --cl-var-0--))\n    (if (> y 1) (princ \", \"))\n    (princ x)\n    (setq --cl-var-0-- (cdr --cl-var-0--))\n    (setq y (+ y 1)))\n  nil)\n\n\n\n\u5b9f\u884c\u7d50\u679c\n> (require 'cl)\n> (loop for x in '(a b c d e)\n        for y from 1\n        when (> y 1) do (princ \", \")\n        do (princ x))\na, b, c, d, e\n\u21d2nil\n\n\n\n\u76f4\u524d\u306e loop \u306f if \u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30c8\u3092\u7528\u3044\u3066\u66f8\u304f\u3053\u3068\u3082\u3067\u304d\u308b\u3002\n\n\n\u30de\u30af\u30ed\u5c55\u958b\n> (require 'cl)\n> (loop for x in '(a b c d e)\n        for y from 1\n        if (> y 1) do (princ \", \") (princ x)\n        else do (princ x))\n\u21d3\n(let* ((--cl-var-0-- '(a b c d e))\n       (x nil)\n       (y 1))\n  (while (consp --cl-var-0--)\n    (setq x (car --cl-var-0--))\n    (if (> y 1)\n        (progn (princ \", \") (princ x))\n      (princ x))\n    (setq --cl-var-0-- (cdr --cl-var-0--))\n    (setq y (+ y 1)))\n  nil)\n\n\n\n\u5b9f\u884c\u7d50\u679c\n> (require 'cl)\n> (loop for x in '(a b c d e)\n        for y from 1\n        if (> y 1) do (princ \", \") (princ x)\n        else do (princ x))\na, b, c, d, e\n\u21d2nil\n\n\n\nuntil, while\n\n\u30c6\u30b9\u30c8\u3092\u7528\u3044\u3066 loop \u3092\u65e9\u671f\u306b\u7d42\u4e86\u3055\u305b\u308b\u3053\u3068\u304c\u3067\u304d\u308b\u3002(\u3053\u306e\u4f8b\u3067\u306f until \u3067\u6307\u5b9a\u3057\u305f(numberp x))\n\n\n\u30de\u30af\u30ed\u5c55\u958b\n> (require 'cl)\n> (loop for x in '(a b c d e 1 2 3 4)\n        until (numberp x)\n        collect (list x 'foo))\n\u21d3\n(let* ((--cl-var-0-- '(a b c d e 1 2 3 4))\n       (x nil)\n       (--cl-var-1-- nil))\n  (while\n      (and\n       (consp --cl-var-0--)\n       (progn\n         (setq x (car --cl-var-0--))\n         (not (numberp x))))\n    (push (list x 'foo) --cl-var-1--)\n    (setq --cl-var-0-- (cdr --cl-var-0--)))\n  (nreverse --cl-var-1--))\n\n\n\n\u5b9f\u884c\u7d50\u679c\n> (require 'cl)\n> (loop for x in '(a b c d e 1 2 3 4)\n        until (numberp x)\n        collect (list x 'foo))\n\u21d2((a foo) (b foo) (c foo) (d foo) (e foo))\n\n\n\nwhile \u3082\u7d42\u4e86\u30c1\u30a7\u30c3\u30af\u3068\u3057\u3066\u306e\u5f79\u76ee\u3092\u679c\u305f\u3059\u3053\u3068\u304c\u3067\u304d\u308b\u3002do \u3068 collect \u306e\u4e21\u65b9\u304c1\u3064\u306e\u30eb\u30fc\u30d7\u8868\u73fe\u306e\u4e2d\u3067\u4f75\u305b\u3066\u5229\u7528\u3067\u304d\u308b\u3002\n\n\n\u30de\u30af\u30ed\u5c55\u958b\n> (require 'cl)\n> (loop for x from 1\n        for y = (* x 10)\n        while (< y 100)\n        do (print (* x 5))\n        collect y)\n\u21d3\n(let* ((x 1)\n       (y nil)\n       (--cl-var-0-- nil))\n  (while\n      (progn\n        (setq y (* x 10))\n        (< y 100))\n    (print (* x 5))\n    (push y --cl-var-0--)\n    (setq x (+ x 1)))\n  (nreverse --cl-var-0--))\n\n\n\n\u5b9f\u884c\u7d50\u679c\n> (require 'cl)\n> (loop for x from 1\n        for y = (* x 10)\n        while (< y 100)\n        do (print (* x 5))\n        collect y)\n5\n10\n15\n20\n25\n30\n35\n40\n45\n\u21d2(10 20 30 40 50 60 70 80 90)\n\n\n\n\u7d42\u308f\u308a\u306b\nEmacs Lisp \u3067 LOOP \u30de\u30af\u30ed\u3092\u5c55\u958b\u3059\u308b\u3068\u5272\u3068\u8aad\u307f\u3084\u3059\u3044\u30bd\u30fc\u30b9\u306b\u306a\u308b\u306e\u3067\u3001\u3053\u306e\u5f62\u5f0f(\u30de\u30af\u30ed\u5c55\u958b\u3068\u5b9f\u884c\u7d50\u679c\u306e\u7d44\u307f\u5408\u308f\u305b)\u3067\u3001LOOP \u30de\u30af\u30ed\u306e\u7d39\u4ecb\u3092\u3057\u305f\u3044\u3068\u601d\u3046\u3002\u4eca\u56de\u306f(1)\u3067\u5c3b\u5207\u308c\u30c8\u30f3\u30dc\u307f\u305f\u3044\u306b\u306a\u3063\u3066\u3044\u308b\u304c\u3001\u4f55\u756a\u307e\u3067\u7d9a\u304f\u304b\u306f\u672a\u5b9a\u3002(\u8aac\u660e\u5411\u3051\u306e\u30b5\u30f3\u30d7\u30eb\u3092\u53ce\u96c6\u4e2d\uff01)\n\u306f\u3058\u3081\u306b\n========\n\n\u3053\u306e\u9023\u8f09\u3067\u306fCommon Lisp\u306eLOOP\u30de\u30af\u30ed\u3092\u30b5\u30f3\u30d7\u30eb\u3092\u4f7f\u3063\u3066\u7d39\u4ecb\u3059\u308b\u3002\nLOOP\u30de\u30af\u30ed\u306f (cl\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u30ed\u30fc\u30c9\u3059\u308b\u3053\u3068\u3067) Emacs Lisp\u3067\u3082\u5229\u7528\u53ef\u80fd\u3067\u3042\u308b\u3002\n\n\u3010[Common Lisp: loop\u30de\u30af\u30ed\u7528\u6cd5\u6284](http://smpl.seesaa.net/article/29800843.html)\u3088\u308a\u5f15\u7528\u3011\n> Graham\u306e _ANSI Common Lisp_ \u3067\u306f\u5acc\u308f\u308c\u3066\u3044\u3066\u788c\u306b\u8aac\u660e\u306e\u306a\u3044loop\u30de\u30af\u30ed\u3002\u4e00\u65b9\u3001 _\u5b9f\u8df5Common Lisp_ \u3067\u306f\u5bfe\u7167\u7684\u306b\u597d\u3093\u3067\u7528\u3044\u3089\u308c\u3066\u3044\u3066\u3001\u5168\u7de8\u306b\u6e21\u3063\u3066\u983b\u7e41\u306b\u4f7f\u308f\u308c\u3066\u3044\u308b\u3002\u3057\u304b\u3057loop\u30de\u30af\u30ed\u306f\u96e3\u3057\u3044\u3068\u3044\u3046\u610f\u8b58\u304c\u3042\u308b\u306e\u304b\u305d\u306e\u8aac\u660e\u306f\u7b2c22\u7ae0\u3068\u304b\u306a\u308a\u5f8c\u56de\u3057\u306b\u3055\u308c\u3066\u304a\u308a\u3001\u3061\u3050\u306f\u3050\u306a\u611f\u3092\u53d7\u3051\u308b\u3002\u3053\u3053\u3067\u306f\u3001 **\u9ed2\u5e2f\u306e\u305f\u3081\u306eLOOP** \u3068\u3044\u3046\u984c\u306e\u3064\u3051\u3089\u308c\u305f\u305d\u306e\u7ae0\u3067\u89e3\u8aac\u3055\u308c\u3066\u3044\u308bloop\u30de\u30af\u30ed\u306e\u7528\u6cd5\u3092\u6574\u7406\u3057\u3066\u307f\u305f\u3002\n> \n> _ANSI Common Lisp_ \u3067\u306e\u9ed2\u9b54\u8853\u6271\u3044\u306b\u656c\u9060\u3057\u3066\u3044\u305floop\u30de\u30af\u30ed\u3060\u3063\u305f\u304c\u3001\u3053\u3046\u3057\u3066\u6574\u7406\u3057\u3066\u307f\u308b\u3068\u305d\u308c\u307b\u3069\u96e3\u3057\u304f\u8003\u3048\u305a\u3068\u3082\u4fbf\u5229\u306b\u4f7f\u3046\u3053\u3068\u304c\u3067\u304d\u305d\u3046\u3060\u3002\n> \n> [\u5b9f\u8df5Common Lisp](http://www.amazon.co.jp/exec/obidos/ASIN/4274067211/)\n> \u4f5c\u8005: Peter Seibel,\u4f50\u91ce\u5321\u4fca,\u6c34\u4e38\u6df3,\u5712\u57ce\u96c5\u4e4b,\u91d1\u5b50\u7950\u4ecb\n> \u51fa\u7248\u793e/\u30e1\u30fc\u30ab\u30fc: \u30aa\u30fc\u30e0\u793e\n> \u767a\u58f2\u65e5: 2008/07/26\n> \u30e1\u30c7\u30a3\u30a2: \u5358\u884c\u672c\uff08\u30bd\u30d5\u30c8\u30ab\u30d0\u30fc\uff09\n\nLOOP\u306e\u30d1\u30fc\u30c4(**\u9ed2\u5e2f\u306e\u305f\u3081\u306eLOOP**\u3088\u308a)\n============\n\nLOOP\u306e\u4e2d\u3067\u306f\u6b21\u306e\u3088\u3046\u306a\u3053\u3068\u304c\u3067\u304d\u308b\u3002\n\n* \u6570\u5024\u7684\u306a\u5909\u6570\u3084\u591a\u69d8\u306a\u30c7\u30fc\u30bf\u69cb\u9020\u306b\u308f\u305f\u308b\u5909\u6570\u3092\u66f4\u65b0\u3057\u3066\u3044\u304f\n* \u30eb\u30fc\u30d7\u3057\u3066\u3044\u308b\u9593\u306b\u898b\u3048\u308b\u5024\u3092\u53ce\u96c6(collect)\u3001\u8a08\u6570(count)\u3001\u5408\u8a08(sum)\u3001\u6700\u5c0f\u5316(minimize)\u3001\u6700\u5927\u5316(maximize)\u3059\u308b\n* \u4efb\u610f\u306eLisp\u5f0f\u3092\u5b9f\u884c\u3059\u308b\n* \u3044\u3064\u30eb\u30fc\u30d7\u3092\u7d42\u4e86\u3059\u308b\u304b\u3092\u6c7a\u5b9a\u3059\u308b\n* \u305d\u308c\u3089\u3092\u6761\u4ef6\u4ed8\u304d\u3067\u5b9f\u884c\u3059\u308b\n\n\u4e0a\u8a18\u306b\u52a0\u3048\u3066\u3001LOOP\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u30b7\u30f3\u30bf\u30c3\u30af\u30b9\u3092\u63d0\u4f9b\u3059\u308b\u3002\n\n* \u30eb\u30fc\u30d7\u5185\u3067\u4f7f\u7528\u3059\u308b\u30ed\u30fc\u30ab\u30eb\u5909\u6570\u306e\u751f\u6210\n* \u30eb\u30fc\u30d7\u306e\u524d\u5f8c\u306b\u5b9f\u884c\u3059\u308b\u4efb\u610f\u306eLisp\u5f0f\u306e\u6307\u5b9a\n\n\u30b5\u30f3\u30d7\u30eb (Emacs Lisp \u304a\u3088\u3073 GNU CLISP 2.49 \u3067\u52d5\u4f5c\u78ba\u8a8d\u3057\u3066\u3044\u307e\u3059)\n=======\n\n##\u6700\u3082\u5358\u7d14\u306a\u30eb\u30fc\u30d7\n\n* \u30ea\u30b9\u30c8\u8981\u7d20\u3092\u53cd\u5fa9\u3057\u3066\u305d\u308c\u305e\u308c\u306e\u8981\u7d20\u3092print\u3059\u308b\u3002\n\n```el:\u30de\u30af\u30ed\u5c55\u958b\n> (require 'cl)\n> (loop for x in '(a b c d e)\n        do (print x))\n\u21d3\n(let* ((--cl-var-0-- '(a b c d e))\n       (x nil))\n  (while (consp --cl-var-0--)\n    (setq x (car --cl-var-0--))\n    (print x)\n    (setq --cl-var-0-- (cdr --cl-var-0--)))\n  nil)\n```\n\n```el:\u5b9f\u884c\u7d50\u679c\n> (require 'cl)\n> (loop for x in '(a b c d e)\n        do (print x))\na\nb\nc\nd\ne\n\u21d2nil\n```\n\n* 2\u3064\u306e\u30ea\u30b9\u30c8\u306e\u8981\u7d20\u3092\u4e26\u5217\u306b\u53cd\u5fa9\u3057\u3066\u3001collect \u3067\u6307\u5b9a\u3055\u308c\u305f\u30d5\u30a9\u30fc\u30e0\u3092\u8a55\u4fa1\u3057\u305f\u5024\u3092\u30ea\u30b9\u30c8\u306b\u3064\u306a\u3044\u3067LOOP\u306e\u623b\u308a\u5024\u3068\u3059\u308b\u3002\n\n```el:\u30de\u30af\u30ed\u5c55\u958b\n> (require 'cl)\n> (loop for x in '(a b c d e)\n        for y in '(1 2 3 4 5)\n        collect (list x y))\n\u21d3\n(let* ((--cl-var-0-- '(a b c d e))\n       (x nil)\n       (--cl-var-1-- '(1 2 3 4 5))\n       (y nil)\n       (--cl-var-2-- nil))\n  (while\n      (and\n       (consp --cl-var-0--)\n       (progn\n         (setq x (car --cl-var-0--))\n         (consp --cl-var-1--)))\n    (setq y (car --cl-var-1--))\n    (push (list x y) --cl-var-2--)\n    (setq --cl-var-0-- (cdr --cl-var-0--))\n    (setq --cl-var-1-- (cdr --cl-var-1--)))\n  (nreverse --cl-var-2--))\n```\n\n```el:\u5b9f\u884c\u7d50\u679c\n> (require 'cl)\n> (loop for x in '(a b c d e)\n        for y in '(1 2 3 4 5)\n        collect (list x y))\n\u21d2((a 1) (b 2) (c 3) (d 4) (e 5))\n```\n\n##\u6761\u4ef6\u4ed8\u304ddo (when, if \uff5e else \uff5e)\n\n* 1\u3064\u306e\u30ea\u30b9\u30c8\u30681\u3064\u306e\u30ab\u30a6\u30f3\u30bf\u30fc\u3092\u4e26\u5217\u306b\u53cd\u5fa9\u3059\u308b\u3002\u53cd\u5fa9\u306e\u7d42\u4e86\u30bf\u30a4\u30df\u30f3\u30b0\u306f\u30ea\u30b9\u30c8\u306e\u9577\u3055\u306b\u3088\u3063\u3066\u6c7a\u307e\u308b\u30022\u30bb\u30c3\u30c8\u306e\u30a2\u30af\u30b7\u30e7\u30f3(do)\u304c\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u3066\u30011\u3064\u306f\u6761\u4ef6\u4ed8\u304d\u3067\u5b9f\u884c\u3055\u308c\u308b\u3002\n\n```el:\u30de\u30af\u30ed\u5c55\u958b\n> (require 'cl)\n> (loop for x in '(a b c d e)\n        for y from 1\n        when (> y 1) do (princ \", \")\n        do (princ x))\n\u21d3\n(let* ((--cl-var-0-- '(a b c d e))\n       (x nil)\n       (y 1))\n  (while (consp --cl-var-0--)\n    (setq x (car --cl-var-0--))\n    (if (> y 1) (princ \", \"))\n    (princ x)\n    (setq --cl-var-0-- (cdr --cl-var-0--))\n    (setq y (+ y 1)))\n  nil)\n```\n\n```el:\u5b9f\u884c\u7d50\u679c\n> (require 'cl)\n> (loop for x in '(a b c d e)\n        for y from 1\n        when (> y 1) do (princ \", \")\n        do (princ x))\na, b, c, d, e\n\u21d2nil\n```\n\n* \u76f4\u524d\u306e loop \u306f if \u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30c8\u3092\u7528\u3044\u3066\u66f8\u304f\u3053\u3068\u3082\u3067\u304d\u308b\u3002\n\n```el:\u30de\u30af\u30ed\u5c55\u958b\n> (require 'cl)\n> (loop for x in '(a b c d e)\n        for y from 1\n        if (> y 1) do (princ \", \") (princ x)\n        else do (princ x))\n\u21d3\n(let* ((--cl-var-0-- '(a b c d e))\n       (x nil)\n       (y 1))\n  (while (consp --cl-var-0--)\n    (setq x (car --cl-var-0--))\n    (if (> y 1)\n        (progn (princ \", \") (princ x))\n      (princ x))\n    (setq --cl-var-0-- (cdr --cl-var-0--))\n    (setq y (+ y 1)))\n  nil)\n```\n\n```el:\u5b9f\u884c\u7d50\u679c\n> (require 'cl)\n> (loop for x in '(a b c d e)\n        for y from 1\n        if (> y 1) do (princ \", \") (princ x)\n        else do (princ x))\na, b, c, d, e\n\u21d2nil\n```\n\n##until, while\n\n* \u30c6\u30b9\u30c8\u3092\u7528\u3044\u3066 loop \u3092\u65e9\u671f\u306b\u7d42\u4e86\u3055\u305b\u308b\u3053\u3068\u304c\u3067\u304d\u308b\u3002(\u3053\u306e\u4f8b\u3067\u306f until \u3067\u6307\u5b9a\u3057\u305f(numberp x))\n\n```el:\u30de\u30af\u30ed\u5c55\u958b\n> (require 'cl)\n> (loop for x in '(a b c d e 1 2 3 4)\n        until (numberp x)\n        collect (list x 'foo))\n\u21d3\n(let* ((--cl-var-0-- '(a b c d e 1 2 3 4))\n       (x nil)\n       (--cl-var-1-- nil))\n  (while\n      (and\n       (consp --cl-var-0--)\n       (progn\n         (setq x (car --cl-var-0--))\n         (not (numberp x))))\n    (push (list x 'foo) --cl-var-1--)\n    (setq --cl-var-0-- (cdr --cl-var-0--)))\n  (nreverse --cl-var-1--))\n```\n\n```el:\u5b9f\u884c\u7d50\u679c\n> (require 'cl)\n> (loop for x in '(a b c d e 1 2 3 4)\n        until (numberp x)\n        collect (list x 'foo))\n\u21d2((a foo) (b foo) (c foo) (d foo) (e foo))\n```\n\n* while \u3082\u7d42\u4e86\u30c1\u30a7\u30c3\u30af\u3068\u3057\u3066\u306e\u5f79\u76ee\u3092\u679c\u305f\u3059\u3053\u3068\u304c\u3067\u304d\u308b\u3002do \u3068 collect \u306e\u4e21\u65b9\u304c1\u3064\u306e\u30eb\u30fc\u30d7\u8868\u73fe\u306e\u4e2d\u3067\u4f75\u305b\u3066\u5229\u7528\u3067\u304d\u308b\u3002\n\n```el:\u30de\u30af\u30ed\u5c55\u958b\n> (require 'cl)\n> (loop for x from 1\n        for y = (* x 10)\n        while (< y 100)\n        do (print (* x 5))\n        collect y)\n\u21d3\n(let* ((x 1)\n       (y nil)\n       (--cl-var-0-- nil))\n  (while\n      (progn\n        (setq y (* x 10))\n        (< y 100))\n    (print (* x 5))\n    (push y --cl-var-0--)\n    (setq x (+ x 1)))\n  (nreverse --cl-var-0--))\n```\n\n```el:\u5b9f\u884c\u7d50\u679c\n> (require 'cl)\n> (loop for x from 1\n        for y = (* x 10)\n        while (< y 100)\n        do (print (* x 5))\n        collect y)\n5\n10\n15\n20\n25\n30\n35\n40\n45\n\u21d2(10 20 30 40 50 60 70 80 90)\n```\n\n\u7d42\u308f\u308a\u306b\n=======\nEmacs Lisp \u3067 LOOP \u30de\u30af\u30ed\u3092\u5c55\u958b\u3059\u308b\u3068\u5272\u3068\u8aad\u307f\u3084\u3059\u3044\u30bd\u30fc\u30b9\u306b\u306a\u308b\u306e\u3067\u3001\u3053\u306e\u5f62\u5f0f(\u30de\u30af\u30ed\u5c55\u958b\u3068\u5b9f\u884c\u7d50\u679c\u306e\u7d44\u307f\u5408\u308f\u305b)\u3067\u3001LOOP \u30de\u30af\u30ed\u306e\u7d39\u4ecb\u3092\u3057\u305f\u3044\u3068\u601d\u3046\u3002\u4eca\u56de\u306f(1)\u3067\u5c3b\u5207\u308c\u30c8\u30f3\u30dc\u307f\u305f\u3044\u306b\u306a\u3063\u3066\u3044\u308b\u304c\u3001\u4f55\u756a\u307e\u3067\u7d9a\u304f\u304b\u306f\u672a\u5b9a\u3002(\u8aac\u660e\u5411\u3051\u306e\u30b5\u30f3\u30d7\u30eb\u3092\u53ce\u96c6\u4e2d\uff01)\n", "tags": ["Emacs", "common-lisp", "Windows", "Linux", "Mac"]}