{"context": " More than 1 year has passed since last update.Chromecast\u304c\u3044\u3088\u3044\u3088\u65e5\u672c\u3067\u767a\u58f2\u3055\u308c\u307e\u3057\u305f\u3002\n\u30b9\u30de\u30db\u3084Chrome\u30d6\u30e9\u30a6\u30b6\u304b\u3089\u3001\u753b\u9762\u51fa\u529b\u3059\u308b\u3060\u3051\u3067\u3057\u3087\uff1f\u3068\u601d\u3063\u3066\u3044\u308b\u4eba\u304c\u7d50\u69cb\u591a\u3044\u3068\u601d\u3046\u306e\u3067\u3059\u304c\u3001\u305d\u308c\u306f\u3001Miracast\u306e\u5f79\u5272\u3067\u3057\u3066\u3001Chromecast\u306f\u3001Chromecast\u304c\u30a4\u30f3\u30bf\u30fc\u30cd\u30c3\u30c8\u306b\u30a2\u30af\u30bb\u30b9\u3057\u3066\u3001\u30b3\u30f3\u30c6\u30f3\u30c4\u3092\u8868\u793a\u3059\u308b\u306e\u304c\u3001\u672c\u6765\u306e\u5f79\u5272\u3067\u3059\u3002\nAndroid\u7aef\u672b\u304b\u3089\u3001Chromecast\u306b\u547d\u4ee4\u3092\u51fa\u3057\u3066\u3001Web\u4e0a\u306e\u30b3\u30f3\u30c6\u30f3\u30c4\u3092\u8868\u793a\u3059\u308b\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u3092\u4f5c\u3063\u3066\u307f\u307e\u3057\u305f\u3002\uff08\u30a8\u30e9\u30fc\u51e6\u7406\u3068\u304b\u57fa\u672c\u7121\u8996\u3067\u3059\uff57\uff57\uff57\uff09\n\u3053\u3053\u3067\u306f\u3001\u81ea\u7531\u306b\u30ab\u30b9\u30bf\u30de\u30a4\u30ba\u3067\u304d\u308bCustom Receiver\u3092\u4f7f\u3063\u305f\u3082\u306e\u3067\u3059\u3002\n\u8a66\u3059\u70ba\u306b\u306f\u3001Google Cast SDK Developer\u5951\u7d04\uff085\u30c9\u30eb\uff09\u6255\u308f\u306a\u304f\u3066\u306f\u306a\u308a\u307e\u305b\u3093\u306e\u3067\u3042\u3057\u304b\u3089\u305a\u3002\nReceiver\u306e\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u306f\u3001HTML5(HTML,CSS,Javascript)\u3067\u4f5c\u308a\u307e\u3059\u3002\u3053\u3053\u3067\u306f\u3001\u4e0b\u8a18\u306e\u3088\u3046\u306a\u7c21\u5358\u306aHTML\u3092Web\u30b5\u30fc\u30d0\u306b\u30a2\u30c3\u30d7\u30ed\u30fc\u30c9\u3057\u3066\u304a\u304d\u307e\u3059\u3002\n\nmini.html\n<!DOCTYPE html>\n<html>\n<head>\n  <meta charset=\"UTF-8\"/>\n  <style type=\"text/css\">\n    body {\n      overflow:hidden;\n    }\n\n    div {\n      height:720PX;\n      width:1280PX;\n      text-align:center;\n      border:0px solid silver;\n      display: table-cell;\n      vertical-align:middle;\n      color:#FFFFFF;\n      background-color:#000000;\n      font-weight:bold;\n      font-family:Verdana, Geneva, sans-serif;\n      font-size:40px;\n    }\n  </style>\n  <title>Chromecast\u30c6\u30b9\u30c8\u30da\u30fc\u30b8</title>\n  <script src=\"//www.gstatic.com/cast/sdk/libs/receiver/2.0.0/cast_receiver.js\"></script>\n  <script type=\"text/javascript\">\n      window.onload = function() {\n        cast.receiver.logger.setLevelValue(0);\n        window.castReceiverManager = cast.receiver.CastReceiverManager.getInstance();\n        console.log('Starting Receiver Manager');\n\n        // handler for the 'ready' event\n        castReceiverManager.onReady = function(event) {\n          console.log('Received Ready event: ' + JSON.stringify(event.data));\n          window.castReceiverManager.setApplicationState(\"Application status is ready...\");\n        };\n\n        // handler for 'senderconnected' event\n        castReceiverManager.onSenderConnected = function(event) {\n          console.log('Received Sender Connected event: ' + event.data);\n          console.log(window.castReceiverManager.getSender(event.data).userAgent);\n        };\n\n        // handler for 'senderdisconnected' event\n        castReceiverManager.onSenderDisconnected = function(event) {\n          console.log('Received Sender Disconnected event: ' + event.data);\n          if (window.castReceiverManager.getSenders().length == 0) {\n            window.close();\n          }\n        };\n\n        // handler for 'systemvolumechanged' event\n        castReceiverManager.onSystemVolumeChanged = function(event) {\n          console.log('Received System Volume Changed event: ' + event.data['level'] + ' ' +\n              event.data['muted']);\n        };\n\n        // initialize the CastReceiverManager with an application status message\n        window.castReceiverManager.start({statusText: \"Application is starting\"});\n        console.log('Receiver Manager started');\n      };\n  </script>\n</head>\n<body>\n<div>Chromecast\u30c6\u30b9\u30c8\u307a\u30fc\u3058\u3060\u3088\u301c\u301c\u301c\u3093</div>\n</body>\n</html>\n\n\nGoogle Cast SDK Developer Console\u4e0a\u3067\u306f\u3001mini.html\u3092\u7f6e\u3044\u305f\u30b5\u30a4\u30c8\u306eURL\u3092\u8a18\u8ff0\u3057\u307e\u3059\u3002\n\n\u3053\u3053\u3067\u3001Custom Receiver\u3092\u9078\u629e\u3057\u3066\n\nApplecation ID\u304c\u767a\u884c\u3055\u308c\u308b\u306e\u3067\u3001Android\u5074\u306e\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u306b\u3053\u306eApplication ID\u3092\u8a18\u8ff0\u3059\u308b\u3053\u3068\u306b\u306a\u308a\u307e\u3059\u3002\n\u30b3\u30f3\u30c6\u30f3\u30c4\u306e\u6e96\u5099\u304c\u3067\u304d\u305f\u3068\u3044\u3046\u3053\u3068\u3067\u3001\u6b21\u306f\u3001Android\u5074\u306e\u6e96\u5099\u3092\u3059\u308b\u3053\u3068\u306b\u306a\u308a\u307e\u3059\u3002\nAndroid SDK Manager\u3067\u3001\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u8ffd\u52a0\u3057\u307e\u3059\u3002\n\u5fc5\u8981\u306a\u306e\u306f\nAndroid Support Library\nGoogle Play Services\n\u306e\uff12\u3064\u3067\u3059\u3002\n\n\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3059\u308b\u3068\u3001Android SDK\u306e\u30d5\u30a9\u30eb\u30c0\u306eextras\u306b\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3055\u308c\u308b\u306e\u3067\u3001Eclipse\u3067\u30a4\u30f3\u30dd\u30fc\u30c8\u3057\u307e\u3059\uff01\nimport\u3059\u308b\u30e9\u30a4\u30d6\u30e9\u30ea\u306f\uff12\u3064\u3067\u3059\u3002\nandroid-support-v7-mediarouter\ngoogle-play-services_lib\n\n\n\nandroid-support-v7-mediarouter\u3092\u30a4\u30f3\u30dd\u30fc\u30c8\u3057\u305f\u969b\u306b\u30a8\u30e9\u30fc\u304c\u51fa\u308b\u5834\u5408\u304c\u3042\u308a\u307e\u3059\u306e\u3067\u3001\u305d\u306e\u6642\u306f\u3001\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u306e\u30d7\u30ed\u30d0\u30c6\u30a3\u3067\u3001app_compact_v7\u306e\u30e9\u30a4\u30d6\u30e9\u30ea\u306e\u30d1\u30b9\u3092\u4fee\u6b63\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n\n\u3053\u308c\u3067\u3001\u65b0\u898f\u306b\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u3092\u4f5c\u3063\u3066\u958b\u767a\u3092\u59cb\u3081\u3089\u308c\u307e\u3059\u3002\n\u65b0\u898f\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u3092\u4f5c\u3063\u305f\u3089\u3001\u305d\u306e\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u306b\u30e9\u30a4\u30d6\u30e9\u30ea\u30fc\u3092\u8ffd\u52a0\u3057\u307e\u3059\u3002\n\n\u3053\u308c\u304c\u7d42\u308f\u3063\u305f\u3089\u3001\u4eca\u5ea6\u306f\u3001Manifest\u30d5\u30a1\u30a4\u30eb\u306e\u8a2d\u5b9a\u3092\u5909\u66f4\u3057\u307e\u3059\u3002\nApplication\u30bf\u30b0\u3067\u3001Google Service\u306eAPI\u3092\u4f7f\u3046\u306e\u3067\u3001meta\u30bf\u30b0\u3092\u8ffd\u52a0\u3057\u307e\u3059\u3002\n\n\u6b21\u306b\u3001Parmission\u3067\u3059\u3002\nWifi\u3067\u901a\u4fe1\u3057\u307e\u3059\u306e\u3067\u3001INTERNET\u306e\u30d1\u30fc\u30df\u30c3\u30b7\u30e7\u30f3\u3092\u8ffd\u52a0\u3057\u307e\u3059\u3002\n\nGoogle Play\u306b\u30a2\u30c3\u30d7\u3059\u308b\u306a\u3089\u3001\u3082\u3063\u3068\u5fc5\u8981\u3067\u3059\u304c\u3001\u52d5\u4f5c\u78ba\u8a8d\u306b\u306f\u3001\u3053\u308c\u3067\u5341\u5206\u3067\u3057\u3087\u3046\u3002\n\nMainActivity.java\npackage com.example.castcast;\n\nimport com.google.android.gms.cast.CastMediaControlIntent;\nimport android.app.Activity;\nimport android.os.Bundle;\nimport android.support.v7.media.MediaRouteSelector;\nimport android.support.v7.media.MediaRouter;\nimport android.support.v7.media.MediaRouter.RouteInfo;\nimport android.util.Log;\n\npublic class MainActivity extends Activity\n{\n    private String TAG = \"test\";\n\n    // Google Cast SDK Developer Console\u304b\u3089\u53d6\u5f97\u3057\u305f Application ID\u3092\u8a2d\u5b9a\u3057\u3066\u304f\u3060\u3055\u3044\n    private static String APPLICATION_ID = \"hogehoge\";\n\n    // Chromecast\u3092\u63a2\u7d22\u3059\u308b\u306e\u306b\u4f7f\u3046\u5909\u6570\u985e\n    private MediaRouter mRouter;\n    private MediaRouteSelector mMediaRouteSelector;\n    private MediaRouter.Callback mCB;\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState)\n    {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_main);\n\n        // Chromecast\u3092\u63a2\u3059\u6e96\u5099\n        mRouter = MediaRouter.getInstance(this);\n        mMediaRouteSelector = new MediaRouteSelector.Builder().addControlCategory(CastMediaControlIntent.categoryForCast(APPLICATION_ID)).build();\n        mCB = new MediaRouter.Callback()\n        {\n            @Override\n            public void onRouteAdded(MediaRouter router, RouteInfo route)\n            {\n                Log.d(TAG,\"onRouteAdded=\" + route.getName());\n            }\n\n            @Override\n            public void onRouteRemoved(MediaRouter router, RouteInfo route)\n            {\n                Log.d(TAG,\"onRouteRemoved\" + route.getName());\n            }\n        };\n    }\n\n    @Override\n    protected void onResume()\n    {\n        super.onResume();\n        // Chromecast\u3092\u63a2\u3059\n        mRouter.addCallback(mMediaRouteSelector, mCB,MediaRouter.CALLBACK_FLAG_PERFORM_ACTIVE_SCAN);\n    }\n\n    @Override\n    protected void onPause()\n    {\n        if (isFinishing())\n        {\n            mRouter.removeCallback(mCB);\n        }\n        super.onPause();\n    }\n}\n\n\n\n\u3053\u308c\u3060\u3051\u306e\u30bd\u30fc\u30b9\u3067\u3001\u540c\u4e00\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u306b\u63a5\u7d9a\u3055\u308c\u3066\u3044\u308bChromecast\u306e\u30ea\u30b9\u30c8\u3092\u53d6\u5f97\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\u5b9f\u884c\u4f8bLogcat\u51fa\u529b\n\n\u30c7\u30d0\u30a4\u30b9\u304c\u898b\u3064\u304b\u3063\u305f\u3089\u3001\u63a5\u7d9a\u3092\u884c\u3044\u307e\u3059\u3002\n\nMainActivity.java\u306e\u629c\u7c8b\n// \u6700\u521d\u306b\u898b\u3064\u3051\u305f\u30c7\u30d0\u30a4\u30b9\u306b\u63a5\u7d9a\u3092\u884c\u3046\u3002\nif(mSelectedDevice == null)\n{\n    mSelectedDevice = CastDevice.getFromBundle(route.getExtras());\n\n    Cast.CastOptions.Builder apiOptionsBuilder = Cast.CastOptions.builder(mSelectedDevice, mCastClientListener);\n    apiOptionsBuilder.setVerboseLoggingEnabled(true);\n\n    mApiClient = new GoogleApiClient.Builder(getBaseContext())\n    .addApi(Cast.API, apiOptionsBuilder.build())\n    .addConnectionCallbacks(mConnectionCallbacks)\n    .addOnConnectionFailedListener(mConnectionFailedListener)\n    .build();\n\n    mApiClient.connect();\n}\n\n\n\u305d\u306e\u4ed6\u5fc5\u8981\u306a\u30b3\u30fc\u30c9\u306f\u4e0b\u8a18\u306e\u901a\u308a\u3067\u3059\u3002\n\nMainActivity.java\u629c\u7c8b\n    // Chromecast\u306b\u63a5\u7d9a\u78ba\u8a8d\u7528\u30b3\u30fc\u30eb\u30d0\u30c3\u30af\n    private GoogleApiClient.ConnectionCallbacks mConnectionCallbacks = new GoogleApiClient.ConnectionCallbacks()\n    {\n        @Override\n        public void onConnected(Bundle connectionHint)\n        {\n            Log.d(TAG,\"onConnected\");\n\n            try\n            {\n                Cast.CastApi.launchApplication(mApiClient, APPLICATION_ID, false)\n                 .setResultCallback(new ResultCallback<Cast.ApplicationConnectionResult>()\n                {\n                    @Override\n                    public void onResult(ApplicationConnectionResult result)\n                    {\n                        Status status = result.getStatus();\n                        if (status.isSuccess())\n                        {\n                            mSessionId = result.getSessionId();\n                            Log.d(TAG,\"mSessionID=\" + mSessionId);\n                        }\n                    }\n                });\n            }\n            catch(Exception ex)\n            {\n                Log.d(TAG,ex.toString());\n            }           \n        }\n\n        @Override\n        public void onConnectionSuspended(int cause)\n        {\n        }\n    };\n\n    // Chromecast\u306b\u63a5\u7d9a\u5931\u6557\u3057\u305f\u5834\u5408\u306b\u547c\u3070\u308c\u308b\n    private GoogleApiClient.OnConnectionFailedListener mConnectionFailedListener = new GoogleApiClient.OnConnectionFailedListener()\n    {\n        @Override\n        public void onConnectionFailed(ConnectionResult result)\n        {\n        }\n    };\n\n    // Chromecast\u3068\u306e\u63a5\u7d9a\u3092\u89e3\u9664\u3059\u308b\n    private void peardown()\n    {       \n        if (mApiClient != null)\n        {\n            if (mApiClient.isConnected())\n            {\n                try\n                {\n                    Cast.CastApi.stopApplication(mApiClient, mSessionId);\n                }\n                catch (Exception e)\n                {\n                    Log.e(TAG, \"Exception while removing channel\", e);\n                }\n\n                mApiClient.disconnect();\n            }\n\n            mApiClient = null;\n            mSelectedDevice = null;\n            mSessionId = null;\n        }\n    }\n\n\nGitHub\u306b\u52d5\u304f\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u30d5\u30a1\u30a4\u30eb\u4e00\u5f0f\uff08SampleCast\uff09\u3092\u30a2\u30c3\u30d7\u30c7\u30fc\u30c8\u3057\u3066\u3042\u308a\u307e\u3059\u306e\u3067\u3001\u5fc5\u8981\u306b\u5fdc\u3058\u3066\u3054\u5229\u7528\u304f\u3060\u3055\u3044\u3002\n\u4ee5\u4e0a\u3001\u30cf\u30c3\u30d4\u30fc\u30ad\u30e3\u30b9\u30c6\u30a3\u30f3\u30b0\uff01\nChromecast\u304c\u3044\u3088\u3044\u3088\u65e5\u672c\u3067\u767a\u58f2\u3055\u308c\u307e\u3057\u305f\u3002\n\n\u30b9\u30de\u30db\u3084Chrome\u30d6\u30e9\u30a6\u30b6\u304b\u3089\u3001\u753b\u9762\u51fa\u529b\u3059\u308b\u3060\u3051\u3067\u3057\u3087\uff1f\u3068\u601d\u3063\u3066\u3044\u308b\u4eba\u304c\u7d50\u69cb\u591a\u3044\u3068\u601d\u3046\u306e\u3067\u3059\u304c\u3001\u305d\u308c\u306f\u3001Miracast\u306e\u5f79\u5272\u3067\u3057\u3066\u3001Chromecast\u306f\u3001Chromecast\u304c\u30a4\u30f3\u30bf\u30fc\u30cd\u30c3\u30c8\u306b\u30a2\u30af\u30bb\u30b9\u3057\u3066\u3001\u30b3\u30f3\u30c6\u30f3\u30c4\u3092\u8868\u793a\u3059\u308b\u306e\u304c\u3001\u672c\u6765\u306e\u5f79\u5272\u3067\u3059\u3002\n\nAndroid\u7aef\u672b\u304b\u3089\u3001Chromecast\u306b\u547d\u4ee4\u3092\u51fa\u3057\u3066\u3001Web\u4e0a\u306e\u30b3\u30f3\u30c6\u30f3\u30c4\u3092\u8868\u793a\u3059\u308b\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u3092\u4f5c\u3063\u3066\u307f\u307e\u3057\u305f\u3002\uff08\u30a8\u30e9\u30fc\u51e6\u7406\u3068\u304b\u57fa\u672c\u7121\u8996\u3067\u3059\uff57\uff57\uff57\uff09\n\n\u3053\u3053\u3067\u306f\u3001\u81ea\u7531\u306b\u30ab\u30b9\u30bf\u30de\u30a4\u30ba\u3067\u304d\u308bCustom Receiver\u3092\u4f7f\u3063\u305f\u3082\u306e\u3067\u3059\u3002\n\n\u8a66\u3059\u70ba\u306b\u306f\u3001Google Cast SDK Developer\u5951\u7d04\uff085\u30c9\u30eb\uff09\u6255\u308f\u306a\u304f\u3066\u306f\u306a\u308a\u307e\u305b\u3093\u306e\u3067\u3042\u3057\u304b\u3089\u305a\u3002\n\nReceiver\u306e\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u306f\u3001HTML5(HTML,CSS,Javascript)\u3067\u4f5c\u308a\u307e\u3059\u3002\u3053\u3053\u3067\u306f\u3001\u4e0b\u8a18\u306e\u3088\u3046\u306a\u7c21\u5358\u306aHTML\u3092Web\u30b5\u30fc\u30d0\u306b\u30a2\u30c3\u30d7\u30ed\u30fc\u30c9\u3057\u3066\u304a\u304d\u307e\u3059\u3002\n\n```html:mini.html\n<!DOCTYPE html>\n<html>\n<head>\n  <meta charset=\"UTF-8\"/>\n  <style type=\"text/css\">\n\tbody {\n      overflow:hidden;\n\t}\n    \n    div {\n\t  height:720PX;\n\t  width:1280PX;\n\t  text-align:center;\n\t  border:0px solid silver;\n\t  display: table-cell;\n\t  vertical-align:middle;\n\t  color:#FFFFFF;\n\t  background-color:#000000;\n\t  font-weight:bold;\n\t  font-family:Verdana, Geneva, sans-serif;\n\t  font-size:40px;\n\t}\n  </style>\n  <title>Chromecast\u30c6\u30b9\u30c8\u30da\u30fc\u30b8</title>\n  <script src=\"//www.gstatic.com/cast/sdk/libs/receiver/2.0.0/cast_receiver.js\"></script>\n  <script type=\"text/javascript\">\n      window.onload = function() {\n        cast.receiver.logger.setLevelValue(0);\n        window.castReceiverManager = cast.receiver.CastReceiverManager.getInstance();\n        console.log('Starting Receiver Manager');\n        \n        // handler for the 'ready' event\n        castReceiverManager.onReady = function(event) {\n          console.log('Received Ready event: ' + JSON.stringify(event.data));\n          window.castReceiverManager.setApplicationState(\"Application status is ready...\");\n        };\n        \n        // handler for 'senderconnected' event\n        castReceiverManager.onSenderConnected = function(event) {\n          console.log('Received Sender Connected event: ' + event.data);\n          console.log(window.castReceiverManager.getSender(event.data).userAgent);\n        };\n        \n        // handler for 'senderdisconnected' event\n        castReceiverManager.onSenderDisconnected = function(event) {\n          console.log('Received Sender Disconnected event: ' + event.data);\n          if (window.castReceiverManager.getSenders().length == 0) {\n\t        window.close();\n\t      }\n        };\n        \n        // handler for 'systemvolumechanged' event\n        castReceiverManager.onSystemVolumeChanged = function(event) {\n          console.log('Received System Volume Changed event: ' + event.data['level'] + ' ' +\n              event.data['muted']);\n        };\n\n        // initialize the CastReceiverManager with an application status message\n        window.castReceiverManager.start({statusText: \"Application is starting\"});\n        console.log('Receiver Manager started');\n      };\n  </script>\n</head>\n<body>\n<div>Chromecast\u30c6\u30b9\u30c8\u307a\u30fc\u3058\u3060\u3088\u301c\u301c\u301c\u3093</div>\n</body>\n</html>\n```\n\n[Google Cast SDK Developer Console](https://cast.google.com/publish/)\u4e0a\u3067\u306f\u3001mini.html\u3092\u7f6e\u3044\u305f\u30b5\u30a4\u30c8\u306eURL\u3092\u8a18\u8ff0\u3057\u307e\u3059\u3002\n\n![140605-0001.png](https://qiita-image-store.s3.amazonaws.com/0/33220/47b5c658-4d47-37ea-62db-b11b1b69a3f1.png)\n\n\u3053\u3053\u3067\u3001Custom Receiver\u3092\u9078\u629e\u3057\u3066\n\n![140605-0002.png](https://qiita-image-store.s3.amazonaws.com/0/33220/25279625-d388-cc5a-5fe9-0a991ec6ebf8.png)\n\nApplecation ID\u304c\u767a\u884c\u3055\u308c\u308b\u306e\u3067\u3001Android\u5074\u306e\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u306b\u3053\u306eApplication ID\u3092\u8a18\u8ff0\u3059\u308b\u3053\u3068\u306b\u306a\u308a\u307e\u3059\u3002\n\n\u30b3\u30f3\u30c6\u30f3\u30c4\u306e\u6e96\u5099\u304c\u3067\u304d\u305f\u3068\u3044\u3046\u3053\u3068\u3067\u3001\u6b21\u306f\u3001Android\u5074\u306e\u6e96\u5099\u3092\u3059\u308b\u3053\u3068\u306b\u306a\u308a\u307e\u3059\u3002\n\nAndroid SDK Manager\u3067\u3001\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u8ffd\u52a0\u3057\u307e\u3059\u3002\n\n\u5fc5\u8981\u306a\u306e\u306f\nAndroid Support Library\nGoogle Play Services\n\u306e\uff12\u3064\u3067\u3059\u3002\n\n![140605-0003.png](https://qiita-image-store.s3.amazonaws.com/0/33220/f5dcc756-57fd-2f0c-cefe-70e18973c305.png)\n\n\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3059\u308b\u3068\u3001Android SDK\u306e\u30d5\u30a9\u30eb\u30c0\u306eextras\u306b\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3055\u308c\u308b\u306e\u3067\u3001Eclipse\u3067\u30a4\u30f3\u30dd\u30fc\u30c8\u3057\u307e\u3059\uff01\n\nimport\u3059\u308b\u30e9\u30a4\u30d6\u30e9\u30ea\u306f\uff12\u3064\u3067\u3059\u3002\n\nandroid-support-v7-mediarouter\ngoogle-play-services_lib\n\n![140605-0004.png](https://qiita-image-store.s3.amazonaws.com/0/33220/137e0c61-1c9d-fc43-5af4-88337852f9f3.png)\n\n![140605-0005.png](https://qiita-image-store.s3.amazonaws.com/0/33220/4e236f2c-ca9c-ca07-f364-c3983c642f58.png)\n\n![140605-0006.png](https://qiita-image-store.s3.amazonaws.com/0/33220/64cbec0b-cdd4-b143-6e23-059bcd81d4eb.png)\n\nandroid-support-v7-mediarouter\u3092\u30a4\u30f3\u30dd\u30fc\u30c8\u3057\u305f\u969b\u306b\u30a8\u30e9\u30fc\u304c\u51fa\u308b\u5834\u5408\u304c\u3042\u308a\u307e\u3059\u306e\u3067\u3001\u305d\u306e\u6642\u306f\u3001\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u306e\u30d7\u30ed\u30d0\u30c6\u30a3\u3067\u3001app_compact_v7\u306e\u30e9\u30a4\u30d6\u30e9\u30ea\u306e\u30d1\u30b9\u3092\u4fee\u6b63\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n\n![140605-0007.png](https://qiita-image-store.s3.amazonaws.com/0/33220/276234ff-cf27-4ccd-9c50-0bea842d421c.png)\n\n\u3053\u308c\u3067\u3001\u65b0\u898f\u306b\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u3092\u4f5c\u3063\u3066\u958b\u767a\u3092\u59cb\u3081\u3089\u308c\u307e\u3059\u3002\n\n\u65b0\u898f\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u3092\u4f5c\u3063\u305f\u3089\u3001\u305d\u306e\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u306b\u30e9\u30a4\u30d6\u30e9\u30ea\u30fc\u3092\u8ffd\u52a0\u3057\u307e\u3059\u3002\n\n![140605-0008.png](https://qiita-image-store.s3.amazonaws.com/0/33220/8295dbbe-c1cb-5dd5-c565-d9490e4257a5.png)\n\n\u3053\u308c\u304c\u7d42\u308f\u3063\u305f\u3089\u3001\u4eca\u5ea6\u306f\u3001Manifest\u30d5\u30a1\u30a4\u30eb\u306e\u8a2d\u5b9a\u3092\u5909\u66f4\u3057\u307e\u3059\u3002\n\nApplication\u30bf\u30b0\u3067\u3001Google Service\u306eAPI\u3092\u4f7f\u3046\u306e\u3067\u3001meta\u30bf\u30b0\u3092\u8ffd\u52a0\u3057\u307e\u3059\u3002\n\n![140605-0009.png](https://qiita-image-store.s3.amazonaws.com/0/33220/cc7e5497-4240-757b-52a9-f95c58eec14a.png)\n\n\u6b21\u306b\u3001Parmission\u3067\u3059\u3002\nWifi\u3067\u901a\u4fe1\u3057\u307e\u3059\u306e\u3067\u3001INTERNET\u306e\u30d1\u30fc\u30df\u30c3\u30b7\u30e7\u30f3\u3092\u8ffd\u52a0\u3057\u307e\u3059\u3002\n\n![140605-0010.png](https://qiita-image-store.s3.amazonaws.com/0/33220/6c32a870-522a-9851-64b8-3b49185190b4.png)\n\nGoogle Play\u306b\u30a2\u30c3\u30d7\u3059\u308b\u306a\u3089\u3001\u3082\u3063\u3068\u5fc5\u8981\u3067\u3059\u304c\u3001\u52d5\u4f5c\u78ba\u8a8d\u306b\u306f\u3001\u3053\u308c\u3067\u5341\u5206\u3067\u3057\u3087\u3046\u3002\n\n```java:MainActivity.java\npackage com.example.castcast;\n\nimport com.google.android.gms.cast.CastMediaControlIntent;\nimport android.app.Activity;\nimport android.os.Bundle;\nimport android.support.v7.media.MediaRouteSelector;\nimport android.support.v7.media.MediaRouter;\nimport android.support.v7.media.MediaRouter.RouteInfo;\nimport android.util.Log;\n\npublic class MainActivity extends Activity\n{\n\tprivate String TAG = \"test\";\n\t\n\t// Google Cast SDK Developer Console\u304b\u3089\u53d6\u5f97\u3057\u305f Application ID\u3092\u8a2d\u5b9a\u3057\u3066\u304f\u3060\u3055\u3044\n\tprivate static String APPLICATION_ID = \"hogehoge\";\n\t\t\n\t// Chromecast\u3092\u63a2\u7d22\u3059\u308b\u306e\u306b\u4f7f\u3046\u5909\u6570\u985e\n\tprivate MediaRouter mRouter;\n\tprivate MediaRouteSelector mMediaRouteSelector;\n\tprivate MediaRouter.Callback mCB;\n\t\n\t@Override\n\tprotected void onCreate(Bundle savedInstanceState)\n\t{\n\t\tsuper.onCreate(savedInstanceState);\n\t\tsetContentView(R.layout.activity_main);\n\t\t\n\t\t// Chromecast\u3092\u63a2\u3059\u6e96\u5099\n\t\tmRouter = MediaRouter.getInstance(this);\n\t\tmMediaRouteSelector = new MediaRouteSelector.Builder().addControlCategory(CastMediaControlIntent.categoryForCast(APPLICATION_ID)).build();\n\t\tmCB = new MediaRouter.Callback()\n\t\t{\n\t\t\t@Override\n\t\t\tpublic void onRouteAdded(MediaRouter router, RouteInfo route)\n\t\t\t{\n\t\t\t\tLog.d(TAG,\"onRouteAdded=\" + route.getName());\n\t\t\t}\n\n\t\t\t@Override\n\t\t\tpublic void onRouteRemoved(MediaRouter router, RouteInfo route)\n\t\t\t{\n\t\t\t\tLog.d(TAG,\"onRouteRemoved\" + route.getName());\n\t\t\t}\n\t\t};\n\t}\n\t\n\t@Override\n\tprotected void onResume()\n\t{\n\t\tsuper.onResume();\n\t\t// Chromecast\u3092\u63a2\u3059\n\t\tmRouter.addCallback(mMediaRouteSelector, mCB,MediaRouter.CALLBACK_FLAG_PERFORM_ACTIVE_SCAN);\n\t}\n\n\t@Override\n\tprotected void onPause()\n\t{\n\t\tif (isFinishing())\n\t\t{\n\t\t    mRouter.removeCallback(mCB);\n\t\t}\n\t\tsuper.onPause();\n\t}\n}\n\n```\n\n\u3053\u308c\u3060\u3051\u306e\u30bd\u30fc\u30b9\u3067\u3001\u540c\u4e00\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u306b\u63a5\u7d9a\u3055\u308c\u3066\u3044\u308bChromecast\u306e\u30ea\u30b9\u30c8\u3092\u53d6\u5f97\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\n\u5b9f\u884c\u4f8bLogcat\u51fa\u529b\n![140605-0011.png](https://qiita-image-store.s3.amazonaws.com/0/33220/1356bdbf-0202-b11b-20ed-7fdc5c257340.png)\n\n\u30c7\u30d0\u30a4\u30b9\u304c\u898b\u3064\u304b\u3063\u305f\u3089\u3001\u63a5\u7d9a\u3092\u884c\u3044\u307e\u3059\u3002\n\n```java:MainActivity.java\u306e\u629c\u7c8b\n// \u6700\u521d\u306b\u898b\u3064\u3051\u305f\u30c7\u30d0\u30a4\u30b9\u306b\u63a5\u7d9a\u3092\u884c\u3046\u3002\nif(mSelectedDevice == null)\n{\n    mSelectedDevice = CastDevice.getFromBundle(route.getExtras());\n    \n    Cast.CastOptions.Builder apiOptionsBuilder = Cast.CastOptions.builder(mSelectedDevice, mCastClientListener);\n    apiOptionsBuilder.setVerboseLoggingEnabled(true);\n    \n    mApiClient = new GoogleApiClient.Builder(getBaseContext())\n    .addApi(Cast.API, apiOptionsBuilder.build())\n    .addConnectionCallbacks(mConnectionCallbacks)\n    .addOnConnectionFailedListener(mConnectionFailedListener)\n    .build();\n    \n    mApiClient.connect();\n}\n```\n\n\u305d\u306e\u4ed6\u5fc5\u8981\u306a\u30b3\u30fc\u30c9\u306f\u4e0b\u8a18\u306e\u901a\u308a\u3067\u3059\u3002\n\n```java:MainActivity.java\u629c\u7c8b\n\t// Chromecast\u306b\u63a5\u7d9a\u78ba\u8a8d\u7528\u30b3\u30fc\u30eb\u30d0\u30c3\u30af\n\tprivate GoogleApiClient.ConnectionCallbacks mConnectionCallbacks = new GoogleApiClient.ConnectionCallbacks()\n\t{\n\t\t@Override\n\t\tpublic void onConnected(Bundle connectionHint)\n\t\t{\n\t\t\tLog.d(TAG,\"onConnected\");\n\t\t\t\n\t\t\ttry\n\t\t\t{\n\t\t\t\tCast.CastApi.launchApplication(mApiClient, APPLICATION_ID, false)\n\t\t\t\t .setResultCallback(new ResultCallback<Cast.ApplicationConnectionResult>()\n\t\t\t\t{\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic void onResult(ApplicationConnectionResult result)\n\t\t\t\t\t{\n\t\t\t\t\t\tStatus status = result.getStatus();\n\t\t                if (status.isSuccess())\n\t\t                {\n\t\t                \tmSessionId = result.getSessionId();\n\t\t                \tLog.d(TAG,\"mSessionID=\" + mSessionId);\n\t\t                }\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\t\t\tcatch(Exception ex)\n\t\t\t{\n\t\t\t\tLog.d(TAG,ex.toString());\n\t\t\t}\t\t\t\n\t\t}\n\n\t\t@Override\n\t\tpublic void onConnectionSuspended(int cause)\n\t\t{\n\t\t}\n\t};\n\n\t// Chromecast\u306b\u63a5\u7d9a\u5931\u6557\u3057\u305f\u5834\u5408\u306b\u547c\u3070\u308c\u308b\n\tprivate GoogleApiClient.OnConnectionFailedListener mConnectionFailedListener = new GoogleApiClient.OnConnectionFailedListener()\n\t{\n\t\t@Override\n\t\tpublic void onConnectionFailed(ConnectionResult result)\n\t\t{\n\t\t}\n\t};\n\t\n\t// Chromecast\u3068\u306e\u63a5\u7d9a\u3092\u89e3\u9664\u3059\u308b\n\tprivate void peardown()\n\t{\t\t\n\t\tif (mApiClient != null)\n\t\t{\n\t\t\tif (mApiClient.isConnected())\n\t\t\t{\n\t\t\t\ttry\n\t\t\t\t{\n\t\t            Cast.CastApi.stopApplication(mApiClient, mSessionId);\n\t\t        }\n\t\t\t\tcatch (Exception e)\n\t\t        {\n\t\t        \tLog.e(TAG, \"Exception while removing channel\", e);\n\t\t        }\n\t\t\t\t\n\t\t\t\tmApiClient.disconnect();\n\t\t    }\n\t\t\t\n\t\t    mApiClient = null;\n\t\t    mSelectedDevice = null;\n\t\t    mSessionId = null;\n\t\t}\n\t}\n```\n\nGitHub\u306b\u52d5\u304f\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u30d5\u30a1\u30a4\u30eb\u4e00\u5f0f\uff08[SampleCast](https://github.com/KazuyukiEguchi/SampleCast)\uff09\u3092\u30a2\u30c3\u30d7\u30c7\u30fc\u30c8\u3057\u3066\u3042\u308a\u307e\u3059\u306e\u3067\u3001\u5fc5\u8981\u306b\u5fdc\u3058\u3066\u3054\u5229\u7528\u304f\u3060\u3055\u3044\u3002\n\n\n\n\u4ee5\u4e0a\u3001\u30cf\u30c3\u30d4\u30fc\u30ad\u30e3\u30b9\u30c6\u30a3\u30f3\u30b0\uff01\n", "tags": ["Android", "ChromeCast", "GoogleCastSDK", "HTML5"]}