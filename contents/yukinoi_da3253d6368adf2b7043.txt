{"context": " More than 1 year has passed since last update.Cython\u3067\u4f5c\u3063\u305fPython\u30e2\u30b8\u30e5\u30fc\u30eb\u3092Travis CI\u3067\u30c6\u30b9\u30c8\u3057\u3088\u3046\u3068\u3057\u305f\u3089\u3001\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u611f\u3058\u3067\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3067\u3053\u3051\u305f\u3002 \n$ python setup.py build install\nrunning build\nrunning build_ext\nbuilding 'neologdn' extension\ncreating build\ncreating build/temp.linux-x86_64-2.6\ngcc -pthread -fno-strict-aliasing -g -fstack-protector --param=ssp-buffer-size=4 -Wformat -Werror=format-security -DNDEBUG -g -fwrapv -O3 -Wall -Wstrict-prototypes -fPIC -I/opt/python/2.6.9/include/python2.6 -c neologdn.cpp -o build/temp.linux-x86_64-2.6/neologdn.o\ncc1plus: warning: command line option \u2018-Wstrict-prototypes\u2019 is valid for Ada/C/ObjC but not for C++ [enabled by default]\nIn file included from /usr/include/c++/4.6/unordered_map:35:0,\n                 from neologdn.cpp:255:\n/usr/include/c++/4.6/bits/c++0x_warning.h:32:2: error: #error This file requires compiler and library support for the upcoming ISO C++ standard, C++0x. This support is currently experimental, and must be enabled with the -std=c++0x or -std=gnu++0x compiler options.\nneologdn.cpp:663:8: error: \u2018unordered_map\u2019 in namespace \u2018std\u2019 does not name a type\nneologdn.cpp:666:8: error: \u2018unordered_set\u2019 in namespace \u2018std\u2019 does not name a type\n\nTravis CI\u306egcc\u306e\u30d0\u30fc\u30b8\u30e7\u30f3(4.6)\u304c\u53e4\u304f\u3066C++11\u306b\u5bfe\u5fdc\u3057\u3066\u306a\u3044\u305f\u3081\u3001std::unordered_map \u3084 std::unordered_set \u304c\u306a\u3044\u306e\u304c\u539f\u56e0\u3002\n.travis.yml \u3067 gcc \u3068 g++ \u3092\u30a2\u30c3\u30d7\u30b0\u30ec\u30fc\u30c9\u3057\u3066 CFLAGS \u3092\u8a2d\u5b9a\u3057\u3066\u3042\u3052\u3088\u3046\u3002\ninstall:\n  - sudo add-apt-repository -y ppa:ubuntu-toolchain-r/test\n  - sudo apt-get update -qq\n  - sudo apt-get install -qq gcc-4.8\n  - sudo apt-get install -qq g++-4.8\n  - export CC=\"gcc-4.8\"\n  - export CXX=\"g++-4.8\"\n  - export CFLAGS=-std=c++11\n  - export CXXFLAGS=-std=c++11\n  - python setup.py build install\n\n\u305d\u3057\u3066 setup.py \u3067C++11\u3060\u3088\u3063\u3066\u660e\u793a\u7684\u306b\u6307\u5b9a\u3059\u308b\u3068Travis\u3060\u3051\u3058\u3083\u306a\u304f\u3066\u307f\u3093\u306a\u3057\u3042\u308f\u305b\u306b\u306a\u308c\u307e\u3059\u3002\nsetup(\n...\n    ext_modules=[Extension('hoge', ['hoge.cpp'], language='c++', extra_compile_args=[\"-std=c++11\"])],\n...\n\n\u3042\u308b\u3044\u306f\u3001\u4ee5\u4e0b\u306e\u3088\u3046\u306bCython\u3067 unordered_map \u304c tr1 \u5185\u306b\u3042\u308b\u3053\u3068\u3092\u6307\u5b9a\u3057\u3066\u3082\u3067\u304d\u308b\u3002\n\n# from https://github.com/ikuyamada/cython-cpp-experiment/blob/master/unordered_map.pxd\nfrom libcpp.utility cimport pair\n\ncdef extern from \"<tr1/unordered_map>\" namespace \"std::tr1\":\n    cdef cppclass unordered_map[T, U]:\n        cppclass iterator:\n            pair[T, U]& operator*() nogil\n            iterator operator++() nogil\n            iterator operator--() nogil\n            bint operator==(iterator) nogil\n            bint operator!=(iterator) nogil\n        unordered_map()\n        unordered_map(unordered_map&)\n        U& operator[](T&) nogil\n        # unordered_map& operator=(unordered_map&)\n        U& at(T&) nogil\n        iterator begin() nogil\n        void clear() nogil\n        size_t count(T&) nogil\n        bint empty() nogil\n        iterator end() nogil\n        pair[iterator, iterator] equal_range(T&) nogil\n        void erase(iterator) nogil\n        void erase(iterator, iterator) nogil\n        size_t erase(T&) nogil\n        iterator find(T&) nogil\n        pair[iterator, bint] insert(pair[T, U]) nogil\n        iterator insert(iterator, pair[T, U]) nogil\n        void insert(input_iterator, input_iterator)\n        size_t max_size() nogil\n        void rehash(size_t)\n        size_t size() nogil\n        void swap(unordered_map&) nogil\n\n[Cython](http://cython.org/)\u3067\u4f5c\u3063\u305fPython\u30e2\u30b8\u30e5\u30fc\u30eb\u3092[Travis CI](https://travis-ci.org/)\u3067\u30c6\u30b9\u30c8\u3057\u3088\u3046\u3068\u3057\u305f\u3089\u3001\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u611f\u3058\u3067\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3067\u3053\u3051\u305f\u3002 \n\n```shell-session\n$ python setup.py build install\nrunning build\nrunning build_ext\nbuilding 'neologdn' extension\ncreating build\ncreating build/temp.linux-x86_64-2.6\ngcc -pthread -fno-strict-aliasing -g -fstack-protector --param=ssp-buffer-size=4 -Wformat -Werror=format-security -DNDEBUG -g -fwrapv -O3 -Wall -Wstrict-prototypes -fPIC -I/opt/python/2.6.9/include/python2.6 -c neologdn.cpp -o build/temp.linux-x86_64-2.6/neologdn.o\ncc1plus: warning: command line option \u2018-Wstrict-prototypes\u2019 is valid for Ada/C/ObjC but not for C++ [enabled by default]\nIn file included from /usr/include/c++/4.6/unordered_map:35:0,\n                 from neologdn.cpp:255:\n/usr/include/c++/4.6/bits/c++0x_warning.h:32:2: error: #error This file requires compiler and library support for the upcoming ISO C++ standard, C++0x. This support is currently experimental, and must be enabled with the -std=c++0x or -std=gnu++0x compiler options.\nneologdn.cpp:663:8: error: \u2018unordered_map\u2019 in namespace \u2018std\u2019 does not name a type\nneologdn.cpp:666:8: error: \u2018unordered_set\u2019 in namespace \u2018std\u2019 does not name a type\n```\n\nTravis CI\u306egcc\u306e\u30d0\u30fc\u30b8\u30e7\u30f3(4.6)\u304c\u53e4\u304f\u3066C++11\u306b\u5bfe\u5fdc\u3057\u3066\u306a\u3044\u305f\u3081\u3001`std::unordered_map` \u3084 `std::unordered_set` \u304c\u306a\u3044\u306e\u304c\u539f\u56e0\u3002\n`.travis.yml` \u3067 gcc \u3068 g++ \u3092\u30a2\u30c3\u30d7\u30b0\u30ec\u30fc\u30c9\u3057\u3066 `CFLAGS` \u3092\u8a2d\u5b9a\u3057\u3066\u3042\u3052\u3088\u3046\u3002\n\n```yaml\ninstall:\n  - sudo add-apt-repository -y ppa:ubuntu-toolchain-r/test\n  - sudo apt-get update -qq\n  - sudo apt-get install -qq gcc-4.8\n  - sudo apt-get install -qq g++-4.8\n  - export CC=\"gcc-4.8\"\n  - export CXX=\"g++-4.8\"\n  - export CFLAGS=-std=c++11\n  - export CXXFLAGS=-std=c++11\n  - python setup.py build install\n```\n\n\u305d\u3057\u3066 `setup.py` \u3067C++11\u3060\u3088\u3063\u3066\u660e\u793a\u7684\u306b\u6307\u5b9a\u3059\u308b\u3068Travis\u3060\u3051\u3058\u3083\u306a\u304f\u3066\u307f\u3093\u306a\u3057\u3042\u308f\u305b\u306b\u306a\u308c\u307e\u3059\u3002\n\n```python\nsetup(\n...\n    ext_modules=[Extension('hoge', ['hoge.cpp'], language='c++', extra_compile_args=[\"-std=c++11\"])],\n...\n```\n\n\u3042\u308b\u3044\u306f\u3001\u4ee5\u4e0b\u306e\u3088\u3046\u306bCython\u3067 `unordered_map` \u304c `tr1` \u5185\u306b\u3042\u308b\u3053\u3068\u3092\u6307\u5b9a\u3057\u3066\u3082\u3067\u304d\u308b\u3002\n\n```cython\n\n# from https://github.com/ikuyamada/cython-cpp-experiment/blob/master/unordered_map.pxd\nfrom libcpp.utility cimport pair\n \ncdef extern from \"<tr1/unordered_map>\" namespace \"std::tr1\":\n    cdef cppclass unordered_map[T, U]:\n        cppclass iterator:\n            pair[T, U]& operator*() nogil\n            iterator operator++() nogil\n            iterator operator--() nogil\n            bint operator==(iterator) nogil\n            bint operator!=(iterator) nogil\n        unordered_map()\n        unordered_map(unordered_map&)\n        U& operator[](T&) nogil\n        # unordered_map& operator=(unordered_map&)\n        U& at(T&) nogil\n        iterator begin() nogil\n        void clear() nogil\n        size_t count(T&) nogil\n        bint empty() nogil\n        iterator end() nogil\n        pair[iterator, iterator] equal_range(T&) nogil\n        void erase(iterator) nogil\n        void erase(iterator, iterator) nogil\n        size_t erase(T&) nogil\n        iterator find(T&) nogil\n        pair[iterator, bint] insert(pair[T, U]) nogil\n        iterator insert(iterator, pair[T, U]) nogil\n        void insert(input_iterator, input_iterator)\n        size_t max_size() nogil\n        void rehash(size_t)\n        size_t size() nogil\n        void swap(unordered_map&) nogil\n```\n", "tags": ["Python", "TravisCI", "\u30c6\u30b9\u30c8"]}