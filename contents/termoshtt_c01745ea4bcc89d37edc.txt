{"context": " More than 1 year has passed since last update.\u524d\u56de\u306f\u975e\u540c\u671f\u51e6\u7406\u306b\u3064\u3044\u3066\u307e\u3068\u3081\u305f\u304c\u3001\n\u4eca\u56de\u306f\u4e26\u884c(concurrent)\u51e6\u7406\u4e2d\u306e\u540c\u671f\u304c\u5fc5\u8981\u306a\u51e6\u7406\u3092C++11\u3067\u5b9f\u884c\u3059\u308b\u305f\u3081\u306b\u5fc5\u8981\u306a\u77e5\u8b58\u3092\u307e\u3068\u3081\u3066\u3044\u304f\u3002\nThreadPool\u3092\u5b9f\u88c5\u3059\u308b\u305f\u3081\u306b\u5fc5\u8981\u306a\u77e5\u8b58\u3068\u3057\u3066\u3001\n\nmutex\u306b\u3088\u308b\u30ed\u30c3\u30af\n\u6761\u4ef6\u5909\u6570\u306e\u4f7f\u3044\u65b9\n\n\u3092\u307e\u3068\u3081\u308b\u3002\nThreadPool\u306f\u307e\u305f\u6b21\u56de\u306b\u6301\u3061\u8d8a\u3057\u3067\u3042\u308b\u3002\n\nmutex\u3092\u7528\u3044\u305f\u30ed\u30c3\u30af: std::unique_lock or std::lock_guard ?\n\u30b9\u30ec\u30c3\u30c9\u9593\u3067\u3082\u30d7\u30ed\u30bb\u30b9\u9593\u3067\u3082\u76f8\u4e92\u6392\u4ed6\u51e6\u7406\u3001\n\u3064\u307e\u308a\u3042\u308b\u64cd\u4f5c\u3092\u540c\u6642\u306b\u5b9f\u884c\u3059\u308b\u30b9\u30ec\u30c3\u30c9/\u30d7\u30ed\u30bb\u30b9\u304c\u4e00\u3064\u3067\u3042\u308b\u4e8b\u3092\u4fdd\u8a3c\u3059\u308b\u5fc5\u8981\u304c\u3042\u308b\u5834\u5408\u304c\u3042\u308b\u3002\n\u3053\u306e\u3088\u3046\u306a\u6392\u4ed6\u7684\u306b\u5b9f\u884c\u3059\u308b\u5fc5\u8981\u306e\u3042\u308b\u51e6\u7406\u3092\u30af\u30ea\u30c6\u30a3\u30ab\u30eb\u30bb\u30c3\u30b7\u30e7\u30f3\u3068\u547c\u3076\u3002\n\u76f8\u4e92\u6392\u4ed6\u51e6\u7406\u3092\u5b9f\u73fe\u3059\u308b\u305f\u3081\u306e\u540c\u671f\u6a5f\u69cb\u3068\u3057\u3066mutex\u3068\u3044\u3046\u3082\u306e\u304c\u3042\u308b\u3002\nWikipedia\u306b\u3088\u308c\u3070\u76f8\u4e92\u6392\u4ed6(MUTual EXclusion)\u306e\u7701\u7565\u5f62\u304c\u8a9e\u6e90\u3060\u305d\u3046\u3060\u3002\nC++11\u3067\u306fmutex\u3092\u7c21\u5358\u306b\u6271\u3046\u305f\u3081\u30d8\u30c3\u30c0<mutex>\u304c\u7528\u610f\u3055\u308c\u3066\u3044\u308b\u3002\n\u4ee5\u4e0b\u306e\u30af\u30e9\u30b9\u304c\u3053\u3053\u3067\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u308b\u3002\n\n\nstd::mutex: mutex\u306e\u672c\u4f53\u3002\u5358\u72ec\u3067\u3082\u4f7f\u3048\u308b\u304c\u3001\u81ea\u52d5\u3067\u30ed\u30c3\u30af\u3092\u89e3\u9664\u3057\u306a\u3044\u306e\u3067\u4ee5\u4e0b\u3092\u4f7f\u3046\u4e8b\u304c\u63a8\u5968\u3055\u308c\u308b\u3002\n\nstd::lock_guard<Mutex>: \u5358\u7d14\u306aScoped Locking Pattern\u3092\u5b9f\u88c5\u3059\u308b\u3002\n\u3064\u307e\u308a\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u3067mutex\u3092\u30ed\u30c3\u30af\u3057\u3066\u4ed6\u306e\u30b9\u30ec\u30c3\u30c9\u304c\u30af\u30ea\u30c6\u30a3\u30ab\u30eb\u30bb\u30c3\u30b7\u30e7\u30f3\u306b\u5165\u308b\u306e\u3092\u9632\u6b62\u3057\u3001\n\u30c7\u30b9\u30c8\u30e9\u30af\u30bf\u3067\u30ed\u30c3\u30af\u3092\u958b\u653e\u3059\u308b\u3002\n\nstd::unique_lock<Mutex>: Scoped Locking Pattern\u3092\u5b9f\u88c5\u3059\u308b\u9ad8\u6a5f\u80fd\u306a\u30ed\u30c3\u30af\u30af\u30e9\u30b9\u3002\nstd::lock_gurad<Mutex>\u304c\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u3067\u3057\u304b\u30ed\u30c3\u30af\u3067\u304d\u306a\u3044\u306e\u306b\u5bfe\u3057\u3001\u3053\u3061\u3089\u306f\u4efb\u610f\u306e\u30bf\u30a4\u30df\u30f3\u30b0\u3067\u30ed\u30c3\u30af\u3092\u53d6\u5f97\u3067\u304d\u308b\u3002\n\u3055\u3089\u306b\u30ed\u30c3\u30af\u306e\u6240\u6709\u6a29\u3092\u79fb\u8b72\u3059\u308b\u3088\u3046\u306a\u51e6\u7406\u304c\u66f8\u3051\u308b\u3002\nstd::lock_gurad<Mutex>\u306e\u4e0a\u4f4d\u4e92\u63db\u3060\u304c\u3001\u305d\u306e\u5206\u5b9f\u884c\u6642\u30b3\u30b9\u30c8\u304c\u3042\u308b\u3002\n\n\n\u4f7f\u3044\u65b9\n\u57fa\u672c\u7684\u306aScoped Locking Pattern:\nstd::mutex mtx;\n{\n    std::lock_guard<std::mutex> lock(mtx); // mtx\u3092\u4f7f\u3063\u3066\u30ed\u30c3\u30af\u3059\u308b\n    do_critical_session(); // \u3053\u306e\u90e8\u5206\u3092\u5b9f\u884c\u3057\u3066\u3044\u308b\u9593\u306f\n                           // \u4ed6\u306e\u30b9\u30ec\u30c3\u30c9\u3067mtx\u3092\u4f7f\u3063\u3066\u30ed\u30c3\u30af\u3067\u304d\u306a\u3044\n} // \u30c7\u30b9\u30c8\u30e9\u30af\u30bf\u3067\u30ed\u30c3\u30af\u304c\u958b\u653e\u3055\u308c\u308b\n\n\u5358\u72ec\u3067\u4f7f\u7528\u3059\u308b\u5206\u306b\u306fstd::lock_guard<Mutex>\u3067\u5341\u5206\u306a\u3088\u3046\u306b\u601d\u3046\u3002\nstd::unique_lock<Mutex>\u306f\u6761\u4ef6\u5909\u6570\u306e\u9805\u3067\u6271\u3046\u3002\n\n\u6ce8\u610f\n\n\nstd::mutex\u306e\u521d\u671f\u5316\u306b\u3064\u3044\u3066(mutex\u306econstexpr\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u3088\u308a\u8ee2\u8f09, \u6539\u884c\u3092\u8abf\u6574)\uff1a\n\n\n\u3053\u308c\u306b\u3088\u308a\u975e\u30ed\u30fc\u30ab\u30eb\u306astd::mutex\u578b\u5909\u6570\u306e\u521d\u671f\u5316\u306f\u9759\u7684\u521d\u671f\u5316(static initialization)\u3068\u3057\u3066\u6271\u308f\u308c\u3001\n\u4efb\u610f\u306e\u4ed6\u30b9\u30ec\u30c3\u30c9\u958b\u59cb\uff08\uff1dstd::thread\u578b\u5909\u6570\u306e\u52d5\u7684\u521d\u671f\u5316\uff09\u3088\u308a\u3082\u524d\u306bmutex\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u304c\u521d\u671f\u5316\u6e08\u307f\u3067\u3042\u308b\u4e8b\u304c\u4fdd\u8a3c\u3055\u308c\u308b\u3002\n\n\n\u53c2\u8003\u6587\u732e\n\n\nstd::unique_lockstd::mutex or std::lock_guardstd::mutex? - Stack Overflow\nstd::unique_lock\u306f\u30df\u30e5\u30fc\u30c6\u30c3\u30af\u30b9\u30a4\u30f3\u30bf\u30d5\u30a7\u30fc\u30b9\u3092\u6301\u3064 - Faith and Brave - C++\u3067\u904a\u307c\u3046\nstd::unique_lock - cppreference.com\nstd::unique_lock - cpprefjp\nstd::lock_guard - cpprefjp\n\n\n\u6761\u4ef6\u5909\u6570\u306e\u4f7f\u3044\u65b9 : std::condition_variable\n\n\u6761\u4ef6\u5909\u6570\u306f\u5143\u3005POSIX\u30b9\u30ec\u30c3\u30c9\u306b\u304a\u3051\u308b\u7528\u8a9e\u3060\u3063\u305f\u304c\u3001\u4ed6\u306e\u5b9f\u88c5\u3067\u3082\u540c\u69d8\u306e\u6a5f\u80fd\u306b\u5bfe\u3057\u3066\u540c\u3058\u540d\u524d\u3092\u7528\u3044\u308b\u3002\n\u4ee5\u4e0b\u306e\u8aac\u660e\u304c\u308f\u304b\u308a\u3084\u3059\u3044:\n\n\u540c\u671f\u51e6\u7406\u3092\u884c\u3046\u969b\u3001\u3042\u308b\u5171\u6709\u60c5\u5831\u304c\u6761\u4ef6\u3092\u6e80\u305f\u3057\u305f\u3089\u30b9\u30ec\u30c3\u30c9\u304c\u52d5\u3044\u3066\u6b32\u3057\u3044\u3001\u3068\u3044\u3046\u6642\u304c\u3042\u308a\u307e\u3059\u3002\n\u305d\u308c\u307e\u3067\u306f\u30b5\u30b9\u30da\u30f3\u30c9\u3057\u3066\u3066\u6b32\u3057\u3044\u3067\u3059\u304c\u3001\u6761\u4ef6\u304c\u6e80\u305f\u3055\u308c\u305f\u6642\u306b\u4ed6\u306e\u30b9\u30ec\u30c3\u30c9\u304b\u3089\u51e6\u7406\u3092\u59cb\u3081\u308b\u3088\u3046\u5408\u56f3\u3059\u308b\u4ed5\u7d44\u307f\u304c\u5fc5\u8981\u3067\u3059\u3002\n\u6761\u4ef6\u5909\u6570\u306f\u4e0a\u8a18\u306e\u3088\u3046\u306a\u4ed5\u7d44\u307f\u3092\u63d0\u4f9b\u3057\u307e\u3059\u3002\n\u6df7\u4e71\u3057\u306a\u3044\u3088\u3046\u306b\u8ff0\u3079\u307e\u3059\u304c\u3001mutex\u306f\u5171\u6709\u60c5\u5831\u3078\u306e\u540c\u6642\u591a\u91cd\u30a2\u30af\u30bb\u30b9\u3092\u56de\u907f\u3059\u308b\u305f\u3081\u306e\u6a5f\u80fd\u3067\u3001\n\u6761\u4ef6\u5909\u6570\u306f\u3082\u3063\u3068\u5358\u7d14\u3067\u3001\u30b9\u30ec\u30c3\u30c9\u306e\u505c\u6b62\u30fb\u518d\u958b\u3092\u6307\u793a\u3059\u308b\u4fe1\u53f7\u306e\u3088\u3046\u306a\u6a5f\u80fd\u3067\u3059\u3002\n\n(pthread\u306b\u3064\u3044\u3066\uff08\u6761\u4ef6\u5909\u6570\u30fb\u30e2\u30c7\u30eb\uff09 - CodeZine \u3088\u308a\u8ee2\u8f09, \u6539\u884c\u3092\u8abf\u6574)\n\u57fa\u672c\u7684\u306b\u3001\u30b9\u30ec\u30c3\u30c9\u306e\u5b9f\u884c\u3092\u4e00\u6642\u505c\u6b62\u3057\u3066\u3001\u4ed6\u306e\u30b9\u30ec\u30c3\u30c9\u306e\u5b9f\u884c\u3092\u5f85\u3064\u5834\u5408\u306b\u4f7f\u7528\u3059\u308b\u3002\n\n\u4f7f\u3044\u65b9\n\u4ee5\u4e0b\u306b\u3054\u304f\u5358\u7d14\u306a\u4f8b\u3092\u793a\u3059\u3002\n\u30e1\u30c3\u30bb\u30fc\u30b8\u304c\u51fa\u529b\u3055\u308c\u308b\u30bf\u30a4\u30df\u30f3\u30b0\u306b\u6ce8\u76ee\u3057\u3066\u307b\u3057\u3044\u3002\n\ncondition_variable.cpp\n#include <mutex>\n#include <condition_variable>\n#include <atomic>\n#include <iostream>\n#include <thread>\n\nstd::mutex mtx;\nstd::condition_variable cv;\nbool is_ready = false; // for spurious wakeup\n\nvoid do_preparing_process(){\n  std::cout << \"Start Preparing\" << std::endl;\n  // preparing\n  // ... \u03c3(^_^;)\uff71\uff7e\uff71\uff7e...\n  std::this_thread::sleep_for(std::chrono::seconds(3));\n  // finish preparing\n  std::cout << \"Finish Preparing\" << std::endl;;\n  {\n    std::lock_guard<std::mutex> lock(mtx);\n    is_ready = true;\n  }\n  cv.notify_one();\n}\n\nvoid do_main_process(){\n  std::this_thread::sleep_for(std::chrono::seconds(1));\n  std::cout << \"Start Main Thread\" << std::endl;\n  {\n    std::unique_lock<std::mutex> uniq_lk(mtx); // \u3053\u3053\u3067\u30ed\u30c3\u30af\u3055\u308c\u308b\n    cv.wait(uniq_lk, []{ return is_ready;});\n    // 1. uniq_lk\u3092\u30a2\u30f3\u30ed\u30c3\u30af\u3059\u308b\n    // 2. \u901a\u77e5\u3092\u53d7\u3051\u308b\u307e\u3067\u3053\u306e\u30b9\u30ec\u30c3\u30c9\u3092\u30d6\u30ed\u30c3\u30af\u3059\u308b\n    // 3. \u901a\u77e5\u3092\u53d7\u3051\u305f\u3089uniq_lk\u3092\u30ed\u30c3\u30af\u3059\u308b\n\n    /* \u3053\u3053\u3067\u306funiq_lk\u306f\u30ed\u30c3\u30af\u3055\u308c\u305f\u307e\u307e */\n\n  } // \u30c7\u30b9\u30c8\u30e9\u30af\u30bf\u3067\u30a2\u30f3\u30ed\u30c3\u30af\u3059\u308b\n  std::cout << \"Finish Main Thread\" << std::endl;\n}\n\nint main(int argc, char const* argv[])\n{\n  std::thread th_prepare([&]{ do_preparing_process(); });\n  std::thread th_main([&]{ do_main_process(); });\n\n  th_prepare.join();\n  th_main.join();\n\n  return 0;\n}\n\n\n\u5b9f\u884c\u7d50\u679c\u306f\u4ee5\u4e0b\u306e\u901a\u308a\nclang++ -std=c++11 condition_variable.cpp -pthread\n\nStart Preparing     # \u3053\u3053\u30671\u79d2\u307e\u3064\nStart Main Process  # \u3053\u3053\u30673\u79d2\u307e\u3064\nFinish Preparing\nFinish Main Thread\n\n\u6e96\u5099(do_preparing_process())\u304c\u7d42\u4e86\u3059\u308b\u307e\u3067\u30e1\u30a4\u30f3\u30b9\u30ec\u30c3\u30c9(do_main_process())\u304c\u5f85\u6a5f\u3057\u3066\u3044\u308b\u4e8b\u304c\u51fa\u529b\u7d50\u679c\u304b\u3089\u8aad\u307f\u3068\u308c\u308b\u3002\n\nspurious wakeup\n\u3053\u3053\u3067\u554f\u984c\u306a\u306e\u306f\u3001\u4f55\u6545is_ready\u5909\u6570\u304c\u5fc5\u8981\u306a\u306e\u304b\u3068\u3044\u3046\u4e8b\u3060\u3002\ndo_preparing_process()\u306fcv.notify_one()\u306b\u3088\u3063\u3066\u6e96\u5099\u304c\u7d42\u4e86\u3057\u305f\u4e8b\u3092\u901a\u77e5\u3057\u3066\u3044\u308b\u7b48\u3067\u3042\u308b\u3002\n\u3068\u3044\u3046\u4e8b\u306fis_ready\u306a\u3093\u3066\u5909\u6570\u306f\u5fc5\u8981\u306a\u3044\u306e\u3067\u306f\u306a\u3044\u304b\uff1f\u3068\u601d\u3048\u308b\u3002\n\u3053\u308c\u306f\u5927\u62b5\u306e\u30e9\u30a4\u30d6\u30e9\u30ea\u304cwait()\u72b6\u614b\u304b\u3089\u51e6\u7406\u3092\u518d\u958b\u3059\u308b\u969b\u306b\u3001\nnotify_one()\u3042\u308b\u3044\u306f\u4ed6\u306e\u901a\u77e5\u3092\u53d7\u3051\u3068\u3063\u305f\u4e8b\u3092\u4fdd\u8a3c\u3057\u3066\u3044\u306a\u3044\u304b\u3089\u3067\u3042\u308b\u3002\n\u3064\u307e\u308a\u3069\u306e\u30b9\u30ec\u30c3\u30c9\u3082\u901a\u77e5\u3092\u6761\u4ef6\u5909\u6570\u306b\u9001\u3063\u3066\u3044\u306a\u3044\u306e\u306bwait()\u72b6\u614b\u304c\u89e3\u9664\u3055\u308c\u308b\u4e8b\u304c\u3042\u308b\u3002\n\u3053\u308c\u3092spurious wakeup\u3068\u547c\u3076\u3002\u65e5\u672c\u8a9e\u304c\u78ba\u5b9a\u3057\u3066\u3044\u306a\u3044\u3088\u3046\u3060\u304c\u3001 \u898b\u305b\u639b\u3051\u306e\u76ee\u899a\u3081 \u3067\u3042\u308b\u3002\n\u306a\u306e\u3067\u3053\u306e\u5834\u5408\u3001\u6e96\u5099\u304c\u78ba\u5b9f\u306b\u7d42\u4e86\u3057\u305f\u4e8b\u3092\u901a\u77e5\u3059\u308b\u5fc5\u8981\u304c\u3042\u308b\u3002\n\u305d\u306e\u305f\u3081\u306b\u7528\u3044\u3066\u3044\u308b\u306e\u304cis_ready\u3067\u3042\u308b\u3002\n\u307e\u305f\ncv.wait(uniq_lk, []{ return is_ready;});\n\n\u306e\u7b2c\u4e8c\u5f15\u6570\u306e\u30e9\u30e0\u30c0\u5f0f\u306f\u3001\u4e0a\u8ff0\u306espurious wakeup\u306b\u5bfe\u5fdc\u3059\u308b\u305f\u3081\u306eoverload\u3067\u3001\n\u3053\u306e\u95a2\u6570\u304cfalse\u3092\u8fd4\u3059\u9650\u308a\u3001wait()\u72b6\u614b\u304c\u89e3\u3051\u306a\u3044\u3088\u3046\u306b\u306a\u3063\u3066\u3044\u308b\u3002\n(2014/5/30 \u8ffd\u52a0) \u4e0b\u8a18\u306e@yohhoy\u3055\u3093\u306e\u30b3\u30e1\u30f3\u30c8\u3082\u53c2\u7167\u306e\u3053\u3068\u3002\n(2014/5/30 \u4fee\u6b63)\n\u56e0\u307f\u306b\u3053\u306e\u95a2\u6570\u306e\u8a55\u4fa1\u306f\u7b2c\u4e00\u5f15\u6570\u306e\u30ed\u30c3\u30af\u3092\u4f7f\u7528\u3059\u308b\u3002\ntemplate <typename _Lock> void wait(_Lock &__lock) {\n  unique_lock<mutex> __my_lock(_M_mutex);\n  _Unlock<_Lock> __unlock(__lock);\n  // _M_mutex must be unlocked before re-locking __lock so move\n  // ownership of _M_mutex lock to an object with shorter lifetime.\n  unique_lock<mutex> __my_lock2(std::move(__my_lock));\n  _M_cond.wait(__my_lock2);\n}\n\ntemplate <typename _Lock, typename _Predicate>\nvoid wait(_Lock &__lock, _Predicate __p) {\n  while (!__p())\n    wait(__lock);\n}\n\n\u5c11\u306a\u304f\u3068\u3082\u79c1\u306e\u74b0\u5883\u306e/usr/include/c++/4.8.2/condition_variable\u3067\u306e\u5b9f\u88c5\u3067\u306f\u30ed\u30c3\u30af\u3057\u3066\u306a\u3044\u3088\u3046\u306b\u898b\u3048\u308b\u3002\n\nnotify_one()\u304cwait()\u3088\u308a\u5148\u306b\u547c\u3070\u308c\u305f\u3089\u3069\u3046\u306a\u308b\u306e\u304b\uff1f\n(2014/5/30 \u4fee\u6b63, @yohhoy \u3055\u3093\u306b\u611f\u8b1d)\n\u57fa\u672c\u7684\u306bnotify_one()\u306f\u7121\u8996\u3055\u308c\u308b\u3002\n\u3067\u306f\u30d7\u30ed\u30b0\u30e9\u30de\u304cwait()\u304cnotify_one()\u3088\u308a\u5148\u306b\u547c\u3070\u308c\u308b\u306e\u3092\u4fdd\u8a3c\u3057\u306a\u3044\u3068\u3044\u3051\u306a\u3044\u304b\u3068\u3044\u3046\u3068\u3001\u305d\u3046\u3067\u306f\u306a\u3044:\n\ncondition_variable2.cpp\n\n#include <mutex>\n#include <condition_variable>\n#include <atomic>\n#include <iostream>\n#include <thread>\n\nstd::mutex mtx;\nstd::condition_variable cv;\nbool is_ready = false; // for spurious wakeup\n\nvoid do_preparing_process(){\n  std::cout << \"Start Preparing\" << std::endl;\n  // preparing\n  // ... \u03c3(^_^;)\uff71\uff7e\uff71\uff7e...\n  std::this_thread::sleep_for(std::chrono::seconds(3));\n  // finish preparing\n  std::cout << \"Finish Preparing\" << std::endl;;\n  {\n    std::lock_guard<std::mutex> lock(mtx);\n    is_ready = true;\n  }\n  cv.notify_one();\n}\n\nvoid do_main_process(){\n  std::this_thread::sleep_for(std::chrono::seconds(1));\n  std::cout << \"Start Main Thread\" << std::endl;\n  /* \u3053\u3053\u3067\u6e96\u5099\u304c\u3044\u3089\u306a\u3044\u64cd\u4f5c\u304c\u53ef\u80fd */\n  std::cout << \"Doing task without Preparing...\" << std::endl;\n  std::this_thread::sleep_for(std::chrono::seconds(5));\n  {\n    std::unique_lock<std::mutex> uniq_lk(mtx); // \u3053\u3053\u3067\u30ed\u30c3\u30af\u3055\u308c\u308b\n    cv.wait(uniq_lk, []{ return is_ready;});\n    // 1. uniq_lk\u3092\u30a2\u30f3\u30ed\u30c3\u30af\u3059\u308b\n    // 2. \u901a\u77e5\u3092\u53d7\u3051\u308b\u307e\u3067\u3053\u306e\u30b9\u30ec\u30c3\u30c9\u3092\u30d6\u30ed\u30c3\u30af\u3059\u308b\n    // 3. \u901a\u77e5\u3092\u53d7\u3051\u305f\u3089uniq_lk\u3092\u30ed\u30c3\u30af\u3059\u308b\n\n    /* \u3053\u3053\u3067\u306funiq_lk\u306f\u30ed\u30c3\u30af\u3055\u308c\u305f\u307e\u307e */\n\n  } // \u30c7\u30b9\u30c8\u30e9\u30af\u30bf\u3067\u30a2\u30f3\u30ed\u30c3\u30af\u3059\u308b\n  std::cout << \"Finish Main Thread\" << std::endl;\n}\n\nint main(int argc, char const* argv[])\n{\n  std::thread th_prepare([&]{ do_preparing_process(); });\n  std::thread th_main([&]{ do_main_process(); });\n\n  th_prepare.join();\n  th_main.join();\n\n  return 0;\n}\n\n\n\nStart Preparing\nStart Main Thread\nDoing task without Preparing...\nFinish Preparing\nFinish Main Thread\n\n\u8abf\u5b50\u306b\u306e\u3063\u3066\u4ed6\u306e\u4f5c\u696d\u306b\u71b1\u4e2d\u3057\u3066\u3044\u308b\u9593\u306b\u3001\u6e96\u5099\u30b9\u30ec\u30c3\u30c9\u3067\u6e96\u5099\u304c\u7d42\u308f\u3063\u3066\u3057\u307e\u3063\u305f\u3002\n\u3064\u307e\u308await()\u3059\u308b\u524d\u306bnotify_one()\u304c\u6765\u3066\u3044\u308b\u4e8b\u306b\u306a\u308b\u3002\nwait()\u3059\u308b\u524d\u306b\u6765\u305fnotify_one()\u306f\u5168\u3066\u7121\u8996\u3055\u308c\u308b\u3002\n\u305f\u3060\u3057wait(lock, pred)\u306eoverload\u3067\u547c\u3073\u3060\u3057\u305f\u5834\u5408\u3001\n\u6700\u521d\u306b\u3082pred()\u3092\u8a55\u4fa1\u3057\u65e2\u306btrue\u3067\u3042\u308c\u3070\u305d\u3082\u305d\u3082wait()\u3057\u306a\u3044\u306e\u3067\u554f\u984c\u306a\u3044\u3002\n\u3064\u307e\u308a\u6e96\u5099\u306f\u5225\u30b9\u30ec\u30c3\u30c9\u306b\u307e\u304b\u305b\u305f\u307e\u307e\u3001\u3044\u304f\u3089\u3067\u3082\u4f5c\u696d\u3067\u304d\u308b\u3002\n\n\u6ce8\u610f\u4e8b\u9805\n\nmutex\u306e\u30ed\u30c3\u30af\u306fstd::unique_lock<std::mutex>\u3092\u4f7f\u7528\u3057\u306a\u3051\u308c\u3070\u306a\u3089\u306a\u3044\n\u305d\u308c\u4ee5\u5916\u306e\u30ed\u30c3\u30af\u578b\u3092\u4f7f\u7528\u3059\u308b\u5834\u5408\u306fstd::condition_variable_any\u3092\u7528\u3044\u308b\n\u307b\u3068\u3093\u3069\u306e\u5b9f\u88c5\u3067\u6761\u4ef6\u5909\u6570\u3092wait\u3057\u3066\u3044\u308b\u30b9\u30ec\u30c3\u30c9\u304c\u3001\nnotify\u3055\u308c\u3066\u3044\u306a\u3044\u306e\u306b\u9593\u9055\u3063\u3066\u8d77\u52d5\u3059\u308b\u73fe\u8c61(spurious wakeup)\u304c\u8d77\u308b\u3002\n\n\n\u53c2\u8003\u6587\u732e\n\npthread\u306b\u3064\u3044\u3066\uff08\u6761\u4ef6\u5909\u6570\u30fb\u30e2\u30c7\u30eb\uff09 - CodeZine\n\u30df\u30e5\u30fc\u30c6\u30c3\u30af\u30b9\u3001\u30bb\u30de\u30d5\u30a9\u3001\u6761\u4ef6\u5909\u6570\u3001\u9055\u3044\u3092\u6574\u7406\u3057\u3066\u307f\u3088\u3046\n\u6761\u4ef6\u5909\u6570\u3068spurious wakeup - yohhoy\u306e\u65e5\u8a18\nstd::condition_variable - cppreference.com\ncondition_variable (C++11) - cpprefjp\n\n\n\u88dc\u8db3\n\u3053\u306e\u8a18\u4e8b\u3092\u66f8\u3044\u3066\u3044\u3066cpprefjp - C++ Library Reference\u306e\u5b58\u5728\u3092\u77e5\u3063\u305f\u3002\n\u65e5\u672c\u8a9e\u3067C++\u306e\u6a19\u6e96\u30e9\u30a4\u30d6\u30e9\u30ea\u306e\u89e3\u8aac\u304c\u8aad\u3081\u308b\u3002\n\u3057\u304b\u3082\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u304c\u5404\u9805\u76ee\u306b\u3042\u308a\u3001Creative Commons\u3067\u516c\u958b\u3055\u308c\u3066\u3044\u308b\u3002\n\u975e\u5e38\u306b\u7d20\u6674\u3057\u3044\u3002\n\n\u5909\u66f4\u5c65\u6b74\n\n2014/5/30\n\n\n\nsleep\u3092std::this_thread::sleep_for\u306b\u5909\u66f4\nspurious wakeup \u306e\u30bb\u30af\u30b7\u30e7\u30f3\u306b\u5618\u304c\u66f8\u3044\u3066\u3042\u3063\u305f\u306e\u3067\u4fee\u6b63\n\"notify_one()\u304cwait()\u3088\u308a\u5148\u306b\u547c\u3070\u308c\u305f\u3089\u3069\u3046\u306a\u308b\u306e\u304b\uff1f\"\u306e\u7bc0\u3092\u66f8\u304d\u63db\u3048\n\n\n\n[\u524d\u56de](http://qiita.com/termoshtt/items/d3cb7fe226cdd498d2ef)\u306f\u975e\u540c\u671f\u51e6\u7406\u306b\u3064\u3044\u3066\u307e\u3068\u3081\u305f\u304c\u3001\n\u4eca\u56de\u306f\u4e26\u884c(concurrent)\u51e6\u7406\u4e2d\u306e\u540c\u671f\u304c\u5fc5\u8981\u306a\u51e6\u7406\u3092C++11\u3067\u5b9f\u884c\u3059\u308b\u305f\u3081\u306b\u5fc5\u8981\u306a\u77e5\u8b58\u3092\u307e\u3068\u3081\u3066\u3044\u304f\u3002\nThreadPool\u3092\u5b9f\u88c5\u3059\u308b\u305f\u3081\u306b\u5fc5\u8981\u306a\u77e5\u8b58\u3068\u3057\u3066\u3001\n\n- mutex\u306b\u3088\u308b\u30ed\u30c3\u30af\n- \u6761\u4ef6\u5909\u6570\u306e\u4f7f\u3044\u65b9\n\n\u3092\u307e\u3068\u3081\u308b\u3002\nThreadPool\u306f\u307e\u305f\u6b21\u56de\u306b\u6301\u3061\u8d8a\u3057\u3067\u3042\u308b\u3002\n\n## mutex\u3092\u7528\u3044\u305f\u30ed\u30c3\u30af: `std::unique_lock` or `std::lock_guard` ?\n\u30b9\u30ec\u30c3\u30c9\u9593\u3067\u3082\u30d7\u30ed\u30bb\u30b9\u9593\u3067\u3082\u76f8\u4e92\u6392\u4ed6\u51e6\u7406\u3001\n\u3064\u307e\u308a\u3042\u308b\u64cd\u4f5c\u3092\u540c\u6642\u306b\u5b9f\u884c\u3059\u308b\u30b9\u30ec\u30c3\u30c9/\u30d7\u30ed\u30bb\u30b9\u304c\u4e00\u3064\u3067\u3042\u308b\u4e8b\u3092\u4fdd\u8a3c\u3059\u308b\u5fc5\u8981\u304c\u3042\u308b\u5834\u5408\u304c\u3042\u308b\u3002\n\u3053\u306e\u3088\u3046\u306a\u6392\u4ed6\u7684\u306b\u5b9f\u884c\u3059\u308b\u5fc5\u8981\u306e\u3042\u308b\u51e6\u7406\u3092\u30af\u30ea\u30c6\u30a3\u30ab\u30eb\u30bb\u30c3\u30b7\u30e7\u30f3\u3068\u547c\u3076\u3002\n\u76f8\u4e92\u6392\u4ed6\u51e6\u7406\u3092\u5b9f\u73fe\u3059\u308b\u305f\u3081\u306e\u540c\u671f\u6a5f\u69cb\u3068\u3057\u3066mutex\u3068\u3044\u3046\u3082\u306e\u304c\u3042\u308b\u3002\n[Wikipedia](http://ja.wikipedia.org/wiki/\u30df\u30e5\u30fc\u30c6\u30c3\u30af\u30b9)\u306b\u3088\u308c\u3070\u76f8\u4e92\u6392\u4ed6(MUTual EXclusion)\u306e\u7701\u7565\u5f62\u304c\u8a9e\u6e90\u3060\u305d\u3046\u3060\u3002\n\nC++11\u3067\u306fmutex\u3092\u7c21\u5358\u306b\u6271\u3046\u305f\u3081\u30d8\u30c3\u30c0`<mutex>`\u304c\u7528\u610f\u3055\u308c\u3066\u3044\u308b\u3002\n\u4ee5\u4e0b\u306e\u30af\u30e9\u30b9\u304c\u3053\u3053\u3067\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u308b\u3002\n\n- `std::mutex`: mutex\u306e\u672c\u4f53\u3002\u5358\u72ec\u3067\u3082\u4f7f\u3048\u308b\u304c\u3001\u81ea\u52d5\u3067\u30ed\u30c3\u30af\u3092\u89e3\u9664\u3057\u306a\u3044\u306e\u3067\u4ee5\u4e0b\u3092\u4f7f\u3046\u4e8b\u304c\u63a8\u5968\u3055\u308c\u308b\u3002\n- `std::lock_guard<Mutex>`: \u5358\u7d14\u306aScoped Locking Pattern\u3092\u5b9f\u88c5\u3059\u308b\u3002\n  \u3064\u307e\u308a\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u3067mutex\u3092\u30ed\u30c3\u30af\u3057\u3066\u4ed6\u306e\u30b9\u30ec\u30c3\u30c9\u304c\u30af\u30ea\u30c6\u30a3\u30ab\u30eb\u30bb\u30c3\u30b7\u30e7\u30f3\u306b\u5165\u308b\u306e\u3092\u9632\u6b62\u3057\u3001\n  \u30c7\u30b9\u30c8\u30e9\u30af\u30bf\u3067\u30ed\u30c3\u30af\u3092\u958b\u653e\u3059\u308b\u3002\n- `std::unique_lock<Mutex>`: Scoped Locking Pattern\u3092\u5b9f\u88c5\u3059\u308b\u9ad8\u6a5f\u80fd\u306a\u30ed\u30c3\u30af\u30af\u30e9\u30b9\u3002\n  `std::lock_gurad<Mutex>`\u304c\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u3067\u3057\u304b\u30ed\u30c3\u30af\u3067\u304d\u306a\u3044\u306e\u306b\u5bfe\u3057\u3001\u3053\u3061\u3089\u306f\u4efb\u610f\u306e\u30bf\u30a4\u30df\u30f3\u30b0\u3067\u30ed\u30c3\u30af\u3092\u53d6\u5f97\u3067\u304d\u308b\u3002\n  \u3055\u3089\u306b\u30ed\u30c3\u30af\u306e\u6240\u6709\u6a29\u3092\u79fb\u8b72\u3059\u308b\u3088\u3046\u306a\u51e6\u7406\u304c\u66f8\u3051\u308b\u3002\n  `std::lock_gurad<Mutex>`\u306e\u4e0a\u4f4d\u4e92\u63db\u3060\u304c\u3001\u305d\u306e\u5206\u5b9f\u884c\u6642\u30b3\u30b9\u30c8\u304c\u3042\u308b\u3002\n\n### \u4f7f\u3044\u65b9\n\n\u57fa\u672c\u7684\u306aScoped Locking Pattern:\n\n```cpp\nstd::mutex mtx;\n{\n    std::lock_guard<std::mutex> lock(mtx); // mtx\u3092\u4f7f\u3063\u3066\u30ed\u30c3\u30af\u3059\u308b\n    do_critical_session(); // \u3053\u306e\u90e8\u5206\u3092\u5b9f\u884c\u3057\u3066\u3044\u308b\u9593\u306f\n                           // \u4ed6\u306e\u30b9\u30ec\u30c3\u30c9\u3067mtx\u3092\u4f7f\u3063\u3066\u30ed\u30c3\u30af\u3067\u304d\u306a\u3044\n} // \u30c7\u30b9\u30c8\u30e9\u30af\u30bf\u3067\u30ed\u30c3\u30af\u304c\u958b\u653e\u3055\u308c\u308b\n```\n\n\u5358\u72ec\u3067\u4f7f\u7528\u3059\u308b\u5206\u306b\u306f`std::lock_guard<Mutex>`\u3067\u5341\u5206\u306a\u3088\u3046\u306b\u601d\u3046\u3002\n`std::unique_lock<Mutex>`\u306f\u6761\u4ef6\u5909\u6570\u306e\u9805\u3067\u6271\u3046\u3002\n\n### \u6ce8\u610f\n\n- `std::mutex`\u306e\u521d\u671f\u5316\u306b\u3064\u3044\u3066([mutex\u306econstexpr\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf](http://d.hatena.ne.jp/yohhoy/20120621/p1)\u3088\u308a\u8ee2\u8f09, \u6539\u884c\u3092\u8abf\u6574)\uff1a\n\n> \u3053\u308c\u306b\u3088\u308a\u975e\u30ed\u30fc\u30ab\u30eb\u306astd::mutex\u578b\u5909\u6570\u306e\u521d\u671f\u5316\u306f\u9759\u7684\u521d\u671f\u5316(static initialization)\u3068\u3057\u3066\u6271\u308f\u308c\u3001\n> \u4efb\u610f\u306e\u4ed6\u30b9\u30ec\u30c3\u30c9\u958b\u59cb\uff08\uff1dstd::thread\u578b\u5909\u6570\u306e\u52d5\u7684\u521d\u671f\u5316\uff09\u3088\u308a\u3082\u524d\u306bmutex\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u304c\u521d\u671f\u5316\u6e08\u307f\u3067\u3042\u308b\u4e8b\u304c\u4fdd\u8a3c\u3055\u308c\u308b\u3002\n\n\n### \u53c2\u8003\u6587\u732e\n\n- [std::unique_lock<std::mutex> or std::lock_guard<std::mutex>? - Stack Overflow](http://stackoverflow.com/questions/20516773/stdunique-lockstdmutex-or-stdlock-guardstdmutex)\n- [std::unique_lock\u306f\u30df\u30e5\u30fc\u30c6\u30c3\u30af\u30b9\u30a4\u30f3\u30bf\u30d5\u30a7\u30fc\u30b9\u3092\u6301\u3064 - Faith and Brave - C++\u3067\u904a\u307c\u3046](http://faithandbrave.hateblo.jp/entry/20120904/1346740388)\n- [std::unique_lock - cppreference.com](http://en.cppreference.com/w/cpp/thread/unique_lock)\n- [std::unique_lock - cpprefjp](https://sites.google.com/site/cpprefjp/reference/mutex/unique_lock)\n- [std::lock_guard - cpprefjp](https://sites.google.com/site/cpprefjp/reference/mutex/lock_guard)\n\n\n## \u6761\u4ef6\u5909\u6570\u306e\u4f7f\u3044\u65b9 : `std::condition_variable`\n\n\u6761\u4ef6\u5909\u6570\u306f\u5143\u3005POSIX\u30b9\u30ec\u30c3\u30c9\u306b\u304a\u3051\u308b\u7528\u8a9e\u3060\u3063\u305f\u304c\u3001\u4ed6\u306e\u5b9f\u88c5\u3067\u3082\u540c\u69d8\u306e\u6a5f\u80fd\u306b\u5bfe\u3057\u3066\u540c\u3058\u540d\u524d\u3092\u7528\u3044\u308b\u3002\n\u4ee5\u4e0b\u306e\u8aac\u660e\u304c\u308f\u304b\u308a\u3084\u3059\u3044:\n\n> \u540c\u671f\u51e6\u7406\u3092\u884c\u3046\u969b\u3001\u3042\u308b\u5171\u6709\u60c5\u5831\u304c\u6761\u4ef6\u3092\u6e80\u305f\u3057\u305f\u3089\u30b9\u30ec\u30c3\u30c9\u304c\u52d5\u3044\u3066\u6b32\u3057\u3044\u3001\u3068\u3044\u3046\u6642\u304c\u3042\u308a\u307e\u3059\u3002\n> \u305d\u308c\u307e\u3067\u306f\u30b5\u30b9\u30da\u30f3\u30c9\u3057\u3066\u3066\u6b32\u3057\u3044\u3067\u3059\u304c\u3001\u6761\u4ef6\u304c\u6e80\u305f\u3055\u308c\u305f\u6642\u306b\u4ed6\u306e\u30b9\u30ec\u30c3\u30c9\u304b\u3089\u51e6\u7406\u3092\u59cb\u3081\u308b\u3088\u3046\u5408\u56f3\u3059\u308b\u4ed5\u7d44\u307f\u304c\u5fc5\u8981\u3067\u3059\u3002\n> \u6761\u4ef6\u5909\u6570\u306f\u4e0a\u8a18\u306e\u3088\u3046\u306a\u4ed5\u7d44\u307f\u3092\u63d0\u4f9b\u3057\u307e\u3059\u3002\n> \u6df7\u4e71\u3057\u306a\u3044\u3088\u3046\u306b\u8ff0\u3079\u307e\u3059\u304c\u3001mutex\u306f\u5171\u6709\u60c5\u5831\u3078\u306e\u540c\u6642\u591a\u91cd\u30a2\u30af\u30bb\u30b9\u3092\u56de\u907f\u3059\u308b\u305f\u3081\u306e\u6a5f\u80fd\u3067\u3001\n> \u6761\u4ef6\u5909\u6570\u306f\u3082\u3063\u3068\u5358\u7d14\u3067\u3001\u30b9\u30ec\u30c3\u30c9\u306e\u505c\u6b62\u30fb\u518d\u958b\u3092\u6307\u793a\u3059\u308b\u4fe1\u53f7\u306e\u3088\u3046\u306a\u6a5f\u80fd\u3067\u3059\u3002\n\n([pthread\u306b\u3064\u3044\u3066\uff08\u6761\u4ef6\u5909\u6570\u30fb\u30e2\u30c7\u30eb\uff09 - CodeZine](http://codezine.jp/article/detail/1894) \u3088\u308a\u8ee2\u8f09, \u6539\u884c\u3092\u8abf\u6574)\n\n\u57fa\u672c\u7684\u306b\u3001\u30b9\u30ec\u30c3\u30c9\u306e\u5b9f\u884c\u3092\u4e00\u6642\u505c\u6b62\u3057\u3066\u3001\u4ed6\u306e\u30b9\u30ec\u30c3\u30c9\u306e\u5b9f\u884c\u3092\u5f85\u3064\u5834\u5408\u306b\u4f7f\u7528\u3059\u308b\u3002\n\n### \u4f7f\u3044\u65b9\n\u4ee5\u4e0b\u306b\u3054\u304f\u5358\u7d14\u306a\u4f8b\u3092\u793a\u3059\u3002\n\u30e1\u30c3\u30bb\u30fc\u30b8\u304c\u51fa\u529b\u3055\u308c\u308b\u30bf\u30a4\u30df\u30f3\u30b0\u306b\u6ce8\u76ee\u3057\u3066\u307b\u3057\u3044\u3002\n\n```cpp:condition_variable.cpp\n#include <mutex>\n#include <condition_variable>\n#include <atomic>\n#include <iostream>\n#include <thread>\n\nstd::mutex mtx;\nstd::condition_variable cv;\nbool is_ready = false; // for spurious wakeup\n\nvoid do_preparing_process(){\n  std::cout << \"Start Preparing\" << std::endl;\n  // preparing\n  // ... \u03c3(^_^;)\uff71\uff7e\uff71\uff7e...\n  std::this_thread::sleep_for(std::chrono::seconds(3));\n  // finish preparing\n  std::cout << \"Finish Preparing\" << std::endl;;\n  {\n    std::lock_guard<std::mutex> lock(mtx);\n    is_ready = true;\n  }\n  cv.notify_one();\n}\n\nvoid do_main_process(){\n  std::this_thread::sleep_for(std::chrono::seconds(1));\n  std::cout << \"Start Main Thread\" << std::endl;\n  {\n    std::unique_lock<std::mutex> uniq_lk(mtx); // \u3053\u3053\u3067\u30ed\u30c3\u30af\u3055\u308c\u308b\n    cv.wait(uniq_lk, []{ return is_ready;});\n    // 1. uniq_lk\u3092\u30a2\u30f3\u30ed\u30c3\u30af\u3059\u308b\n    // 2. \u901a\u77e5\u3092\u53d7\u3051\u308b\u307e\u3067\u3053\u306e\u30b9\u30ec\u30c3\u30c9\u3092\u30d6\u30ed\u30c3\u30af\u3059\u308b\n    // 3. \u901a\u77e5\u3092\u53d7\u3051\u305f\u3089uniq_lk\u3092\u30ed\u30c3\u30af\u3059\u308b\n\n    /* \u3053\u3053\u3067\u306funiq_lk\u306f\u30ed\u30c3\u30af\u3055\u308c\u305f\u307e\u307e */\n\n  } // \u30c7\u30b9\u30c8\u30e9\u30af\u30bf\u3067\u30a2\u30f3\u30ed\u30c3\u30af\u3059\u308b\n  std::cout << \"Finish Main Thread\" << std::endl;\n}\n\nint main(int argc, char const* argv[])\n{\n  std::thread th_prepare([&]{ do_preparing_process(); });\n  std::thread th_main([&]{ do_main_process(); });\n\n  th_prepare.join();\n  th_main.join();\n  \n  return 0;\n}\n```\n\n\u5b9f\u884c\u7d50\u679c\u306f\u4ee5\u4e0b\u306e\u901a\u308a\n\n```command\nclang++ -std=c++11 condition_variable.cpp -pthread\n```\n\n```console\nStart Preparing     # \u3053\u3053\u30671\u79d2\u307e\u3064\nStart Main Process  # \u3053\u3053\u30673\u79d2\u307e\u3064\nFinish Preparing\nFinish Main Thread\n```\n\n\u6e96\u5099(`do_preparing_process()`)\u304c\u7d42\u4e86\u3059\u308b\u307e\u3067\u30e1\u30a4\u30f3\u30b9\u30ec\u30c3\u30c9(`do_main_process()`)\u304c\u5f85\u6a5f\u3057\u3066\u3044\u308b\u4e8b\u304c\u51fa\u529b\u7d50\u679c\u304b\u3089\u8aad\u307f\u3068\u308c\u308b\u3002\n\n### spurious wakeup\n\u3053\u3053\u3067\u554f\u984c\u306a\u306e\u306f\u3001\u4f55\u6545`is_ready`\u5909\u6570\u304c\u5fc5\u8981\u306a\u306e\u304b\u3068\u3044\u3046\u4e8b\u3060\u3002\n`do_preparing_process()`\u306f`cv.notify_one()`\u306b\u3088\u3063\u3066\u6e96\u5099\u304c\u7d42\u4e86\u3057\u305f\u4e8b\u3092\u901a\u77e5\u3057\u3066\u3044\u308b\u7b48\u3067\u3042\u308b\u3002\n\u3068\u3044\u3046\u4e8b\u306f`is_ready`\u306a\u3093\u3066\u5909\u6570\u306f\u5fc5\u8981\u306a\u3044\u306e\u3067\u306f\u306a\u3044\u304b\uff1f\u3068\u601d\u3048\u308b\u3002\n\n\u3053\u308c\u306f\u5927\u62b5\u306e\u30e9\u30a4\u30d6\u30e9\u30ea\u304c`wait()`\u72b6\u614b\u304b\u3089\u51e6\u7406\u3092\u518d\u958b\u3059\u308b\u969b\u306b\u3001\n`notify_one()`\u3042\u308b\u3044\u306f\u4ed6\u306e\u901a\u77e5\u3092\u53d7\u3051\u3068\u3063\u305f\u4e8b\u3092\u4fdd\u8a3c\u3057\u3066\u3044\u306a\u3044\u304b\u3089\u3067\u3042\u308b\u3002\n\u3064\u307e\u308a\u3069\u306e\u30b9\u30ec\u30c3\u30c9\u3082\u901a\u77e5\u3092\u6761\u4ef6\u5909\u6570\u306b\u9001\u3063\u3066\u3044\u306a\u3044\u306e\u306b`wait()`\u72b6\u614b\u304c\u89e3\u9664\u3055\u308c\u308b\u4e8b\u304c\u3042\u308b\u3002\n\u3053\u308c\u3092spurious wakeup\u3068\u547c\u3076\u3002\u65e5\u672c\u8a9e\u304c\u78ba\u5b9a\u3057\u3066\u3044\u306a\u3044\u3088\u3046\u3060\u304c\u3001 *\u898b\u305b\u639b\u3051\u306e\u76ee\u899a\u3081* \u3067\u3042\u308b\u3002\n\u306a\u306e\u3067\u3053\u306e\u5834\u5408\u3001\u6e96\u5099\u304c\u78ba\u5b9f\u306b\u7d42\u4e86\u3057\u305f\u4e8b\u3092\u901a\u77e5\u3059\u308b\u5fc5\u8981\u304c\u3042\u308b\u3002\n\u305d\u306e\u305f\u3081\u306b\u7528\u3044\u3066\u3044\u308b\u306e\u304c`is_ready`\u3067\u3042\u308b\u3002\n\n\u307e\u305f\n\n```cpp\ncv.wait(uniq_lk, []{ return is_ready;});\n```\n\n\u306e\u7b2c\u4e8c\u5f15\u6570\u306e\u30e9\u30e0\u30c0\u5f0f\u306f\u3001\u4e0a\u8ff0\u306espurious wakeup\u306b\u5bfe\u5fdc\u3059\u308b\u305f\u3081\u306eoverload\u3067\u3001\n\u3053\u306e\u95a2\u6570\u304c`false`\u3092\u8fd4\u3059\u9650\u308a\u3001`wait()`\u72b6\u614b\u304c\u89e3\u3051\u306a\u3044\u3088\u3046\u306b\u306a\u3063\u3066\u3044\u308b\u3002\n(2014/5/30 \u8ffd\u52a0) \u4e0b\u8a18\u306e@yohhoy\u3055\u3093\u306e\u30b3\u30e1\u30f3\u30c8\u3082\u53c2\u7167\u306e\u3053\u3068\u3002\n(2014/5/30 \u4fee\u6b63)\n<del>\u56e0\u307f\u306b\u3053\u306e\u95a2\u6570\u306e\u8a55\u4fa1\u306f\u7b2c\u4e00\u5f15\u6570\u306e\u30ed\u30c3\u30af\u3092\u4f7f\u7528\u3059\u308b\u3002</del>\n\n```cpp\ntemplate <typename _Lock> void wait(_Lock &__lock) {\n  unique_lock<mutex> __my_lock(_M_mutex);\n  _Unlock<_Lock> __unlock(__lock);\n  // _M_mutex must be unlocked before re-locking __lock so move\n  // ownership of _M_mutex lock to an object with shorter lifetime.\n  unique_lock<mutex> __my_lock2(std::move(__my_lock));\n  _M_cond.wait(__my_lock2);\n}\n\ntemplate <typename _Lock, typename _Predicate>\nvoid wait(_Lock &__lock, _Predicate __p) {\n  while (!__p())\n    wait(__lock);\n}\n```\n\n\u5c11\u306a\u304f\u3068\u3082\u79c1\u306e\u74b0\u5883\u306e`/usr/include/c++/4.8.2/condition_variable`\u3067\u306e\u5b9f\u88c5\u3067\u306f\u30ed\u30c3\u30af\u3057\u3066\u306a\u3044\u3088\u3046\u306b\u898b\u3048\u308b\u3002\n\n\n### `notify_one()`\u304c`wait()`\u3088\u308a\u5148\u306b\u547c\u3070\u308c\u305f\u3089\u3069\u3046\u306a\u308b\u306e\u304b\uff1f\n(2014/5/30 \u4fee\u6b63, @yohhoy \u3055\u3093\u306b\u611f\u8b1d)\n\u57fa\u672c\u7684\u306b`notify_one()`\u306f\u7121\u8996\u3055\u308c\u308b\u3002\n\u3067\u306f\u30d7\u30ed\u30b0\u30e9\u30de\u304c`wait()`\u304c`notify_one()`\u3088\u308a\u5148\u306b\u547c\u3070\u308c\u308b\u306e\u3092\u4fdd\u8a3c\u3057\u306a\u3044\u3068\u3044\u3051\u306a\u3044\u304b\u3068\u3044\u3046\u3068\u3001\u305d\u3046\u3067\u306f\u306a\u3044:\n\n```cpp:condition_variable2.cpp\n\n#include <mutex>\n#include <condition_variable>\n#include <atomic>\n#include <iostream>\n#include <thread>\n\nstd::mutex mtx;\nstd::condition_variable cv;\nbool is_ready = false; // for spurious wakeup\n\nvoid do_preparing_process(){\n  std::cout << \"Start Preparing\" << std::endl;\n  // preparing\n  // ... \u03c3(^_^;)\uff71\uff7e\uff71\uff7e...\n  std::this_thread::sleep_for(std::chrono::seconds(3));\n  // finish preparing\n  std::cout << \"Finish Preparing\" << std::endl;;\n  {\n    std::lock_guard<std::mutex> lock(mtx);\n    is_ready = true;\n  }\n  cv.notify_one();\n}\n\nvoid do_main_process(){\n  std::this_thread::sleep_for(std::chrono::seconds(1));\n  std::cout << \"Start Main Thread\" << std::endl;\n  /* \u3053\u3053\u3067\u6e96\u5099\u304c\u3044\u3089\u306a\u3044\u64cd\u4f5c\u304c\u53ef\u80fd */\n  std::cout << \"Doing task without Preparing...\" << std::endl;\n  std::this_thread::sleep_for(std::chrono::seconds(5));\n  {\n    std::unique_lock<std::mutex> uniq_lk(mtx); // \u3053\u3053\u3067\u30ed\u30c3\u30af\u3055\u308c\u308b\n    cv.wait(uniq_lk, []{ return is_ready;});\n    // 1. uniq_lk\u3092\u30a2\u30f3\u30ed\u30c3\u30af\u3059\u308b\n    // 2. \u901a\u77e5\u3092\u53d7\u3051\u308b\u307e\u3067\u3053\u306e\u30b9\u30ec\u30c3\u30c9\u3092\u30d6\u30ed\u30c3\u30af\u3059\u308b\n    // 3. \u901a\u77e5\u3092\u53d7\u3051\u305f\u3089uniq_lk\u3092\u30ed\u30c3\u30af\u3059\u308b\n\n    /* \u3053\u3053\u3067\u306funiq_lk\u306f\u30ed\u30c3\u30af\u3055\u308c\u305f\u307e\u307e */\n\n  } // \u30c7\u30b9\u30c8\u30e9\u30af\u30bf\u3067\u30a2\u30f3\u30ed\u30c3\u30af\u3059\u308b\n  std::cout << \"Finish Main Thread\" << std::endl;\n}\n\nint main(int argc, char const* argv[])\n{\n  std::thread th_prepare([&]{ do_preparing_process(); });\n  std::thread th_main([&]{ do_main_process(); });\n\n  th_prepare.join();\n  th_main.join();\n  \n  return 0;\n}\n```\n\n```console\n\nStart Preparing\nStart Main Thread\nDoing task without Preparing...\nFinish Preparing\nFinish Main Thread\n```\n\n\u8abf\u5b50\u306b\u306e\u3063\u3066\u4ed6\u306e\u4f5c\u696d\u306b\u71b1\u4e2d\u3057\u3066\u3044\u308b\u9593\u306b\u3001\u6e96\u5099\u30b9\u30ec\u30c3\u30c9\u3067\u6e96\u5099\u304c\u7d42\u308f\u3063\u3066\u3057\u307e\u3063\u305f\u3002\n\u3064\u307e\u308a`wait()`\u3059\u308b\u524d\u306b`notify_one()`\u304c\u6765\u3066\u3044\u308b\u4e8b\u306b\u306a\u308b\u3002\n`wait()`\u3059\u308b\u524d\u306b\u6765\u305f`notify_one()`\u306f\u5168\u3066\u7121\u8996\u3055\u308c\u308b\u3002\n\u305f\u3060\u3057`wait(lock, pred)`\u306eoverload\u3067\u547c\u3073\u3060\u3057\u305f\u5834\u5408\u3001\n\u6700\u521d\u306b\u3082`pred()`\u3092\u8a55\u4fa1\u3057\u65e2\u306b`true`\u3067\u3042\u308c\u3070\u305d\u3082\u305d\u3082`wait()`\u3057\u306a\u3044\u306e\u3067\u554f\u984c\u306a\u3044\u3002\n\u3064\u307e\u308a\u6e96\u5099\u306f\u5225\u30b9\u30ec\u30c3\u30c9\u306b\u307e\u304b\u305b\u305f\u307e\u307e\u3001\u3044\u304f\u3089\u3067\u3082\u4f5c\u696d\u3067\u304d\u308b\u3002\n\n### \u6ce8\u610f\u4e8b\u9805\n\n- mutex\u306e\u30ed\u30c3\u30af\u306f`std::unique_lock<std::mutex>`\u3092\u4f7f\u7528\u3057\u306a\u3051\u308c\u3070\u306a\u3089\u306a\u3044\n- \u305d\u308c\u4ee5\u5916\u306e\u30ed\u30c3\u30af\u578b\u3092\u4f7f\u7528\u3059\u308b\u5834\u5408\u306f`std::condition_variable_any`\u3092\u7528\u3044\u308b\n- \u307b\u3068\u3093\u3069\u306e\u5b9f\u88c5\u3067\u6761\u4ef6\u5909\u6570\u3092wait\u3057\u3066\u3044\u308b\u30b9\u30ec\u30c3\u30c9\u304c\u3001\n  notify\u3055\u308c\u3066\u3044\u306a\u3044\u306e\u306b\u9593\u9055\u3063\u3066\u8d77\u52d5\u3059\u308b\u73fe\u8c61(spurious wakeup)\u304c\u8d77\u308b\u3002\n\n### \u53c2\u8003\u6587\u732e\n- [pthread\u306b\u3064\u3044\u3066\uff08\u6761\u4ef6\u5909\u6570\u30fb\u30e2\u30c7\u30eb\uff09 - CodeZine](http://codezine.jp/article/detail/1894)\n- [\u30df\u30e5\u30fc\u30c6\u30c3\u30af\u30b9\u3001\u30bb\u30de\u30d5\u30a9\u3001\u6761\u4ef6\u5909\u6570\u3001\u9055\u3044\u3092\u6574\u7406\u3057\u3066\u307f\u3088\u3046](http://hiroakiuno.hatenablog.com/entry/20070321/p1)\n- [\u6761\u4ef6\u5909\u6570\u3068spurious wakeup - yohhoy\u306e\u65e5\u8a18](http://d.hatena.ne.jp/yohhoy/20120326/p1)\n- [std::condition_variable - cppreference.com](http://en.cppreference.com/w/cpp/thread/condition_variable)\n- [condition_variable (C++11) - cpprefjp](https://sites.google.com/site/cpprefjp/reference/condition_variable/condition_variable)\n\n## \u88dc\u8db3\n\n\u3053\u306e\u8a18\u4e8b\u3092\u66f8\u3044\u3066\u3044\u3066[cpprefjp - C++ Library Reference](https://sites.google.com/site/cpprefjp/)\u306e\u5b58\u5728\u3092\u77e5\u3063\u305f\u3002\n\u65e5\u672c\u8a9e\u3067C++\u306e\u6a19\u6e96\u30e9\u30a4\u30d6\u30e9\u30ea\u306e\u89e3\u8aac\u304c\u8aad\u3081\u308b\u3002\n\u3057\u304b\u3082\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u304c\u5404\u9805\u76ee\u306b\u3042\u308a\u3001Creative Commons\u3067\u516c\u958b\u3055\u308c\u3066\u3044\u308b\u3002\n\u975e\u5e38\u306b\u7d20\u6674\u3057\u3044\u3002\n\n## \u5909\u66f4\u5c65\u6b74\n\n- 2014/5/30\n    - `sleep`\u3092`std::this_thread::sleep_for`\u306b\u5909\u66f4\n    - spurious wakeup \u306e\u30bb\u30af\u30b7\u30e7\u30f3\u306b\u5618\u304c\u66f8\u3044\u3066\u3042\u3063\u305f\u306e\u3067\u4fee\u6b63\n    - \"`notify_one()`\u304c`wait()`\u3088\u308a\u5148\u306b\u547c\u3070\u308c\u305f\u3089\u3069\u3046\u306a\u308b\u306e\u304b\uff1f\"\u306e\u7bc0\u3092\u66f8\u304d\u63db\u3048\n", "tags": ["C++11", "C++11"]}