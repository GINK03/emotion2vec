{"context": "\u4ed5\u4e8b\u306e\u4e2d\u3067\u30b7\u30a7\u30eb\u30b9\u30af\u30ea\u30d7\u30c8\u306e\u6027\u80fd\u6539\u5584\u3092\u3059\u308b\u3053\u3068\u306b\u306a\u3063\u305f\u3002\u305d\u306e\u305f\u3081\u306e\u6027\u80fd\u6539\u5584\u3092\u3059\u308b\u305f\u3081\u306e\u4e8b\u524d\u8abf\u67fb\u3068\u3044\u3046\u5f62\u3067\u3001\n- \u60f3\u5b9a\u3057\u3046\u308b\u5b9f\u88c5\n- \u5b9f\u88c5\u306e\u9055\u3044\u306b\u3088\u308b\u6027\u80fd\u5dee\n\u3053\u308c\u3092\u78ba\u8a8d\u3057\u3088\u3046\u3001\u3068\u3044\u3046\u3082\u306e\u3002\n\nOracle\u306e\u76e3\u67fbXML\u304c16\u4e07\u30d5\u30a1\u30a4\u30eb\u2026\u2026\nOracle\u306eXML\u76e3\u67fb\u306e\u96c6\u7d04\u3092\u884c\u3046\u51e6\u7406\u3092\u30b7\u30a7\u30eb\u3067\u5b9f\u88c5\u3002\n\u3067\u3001\u51fa\u529b\u3055\u308c\u3066\u304d\u305f\u76e3\u67fb\u304c16\u4e07\u30d5\u30a1\u30a4\u30eb\u3082\u3042\u3063\u3066\u3048\u3089\u30fc\u30fc\u30fc\u30fc\u30fc\u30fc\u30fc\u304f\u51e6\u7406\u306b\u6642\u9593\u304c\u304b\u304b\u308b\u3002\u51fa\u529b\u3055\u308c\u305f\u30d5\u30a1\u30a4\u30eb\u3092\u8ee2\u9001\u3059\u308b\u6642\u9593\u304c\u6c7a\u307e\u3063\u3066\u3044\u308b\u305f\u3081\u3001\u305d\u306e\u6642\u9593\u307e\u3067\u306b\u51e6\u7406\u3092\u7d42\u308f\u3089\u305b\u306a\u3051\u308c\u3070\u306a\u3089\u306a\u3044\u3002\u3044\u3056\u3001\u6027\u80fd\u6539\u5584\uff01\u3000\u3068\u3044\u3046\u6b21\u7b2c\u3002\n\n\u6bd4\u8f03\u3059\u308b\u5b9f\u88c5\n\n\u4eca\u306e\u5b9f\u88c5\n\n\u30d5\u30a1\u30a4\u30eb\u3092\u5165\u529b\u30ea\u30c0\u30a4\u30ec\u30af\u30c8\u3057\u3066while\u3068read\u3067\u3084\u308a\u304f\u308a\u3059\u308b\u65b9\u6cd5\nwhile read LINE\ndo\n    # \u3042\u308c\u3084\u3053\u308c\u3084\ndone < \u30d5\u30a1\u30a4\u30eb\n\n\n\u65b0\u3057\u3044\u5b9f\u88c5\n\n\u3082\u3046\u5168\u90e8\u3001awk\u3067\u3044\u3044\u3093\u3058\u3083\u306d\uff1f\n\n\u691c\u8a3c\u3059\u308b\u30b3\u30fc\u30c9\n16\u4e07\u30d5\u30a1\u30a4\u30eb\u3092\u5b9f\u969b\u306b\u4f5c\u308b\u3082\u306e\u3042\u308c\u306a\u306e\u3067\u3001\n16\u4e07\u30d5\u30a1\u30a4\u30eb \u00d7 5\u30ec\u30b3\u30fc\u30c9\u5206 + \u03b1 = 100\u4e07\u30ec\u30b3\u30fc\u30c9\n\u3068\u3044\u3046\u611f\u3058\u3067XML\u306e\u30ec\u30b3\u30fc\u30c9\u304c100\u4e07\u4ef6\u306e\u30c0\u30df\u30fc\u30c7\u30fc\u30bf\u30d5\u30a1\u30a4\u30eb\uff11\u3064\u3092\u5165\u529b\u306b\u3059\u308b\u3002\n\u305d\u306e\u4e2d\u306euser\u30bf\u30b0\u306e\u4e2d\u306bmarkus\u307e\u305f\u306fjacob\u3068\u3044\u3046\u6587\u5b57\u5217\u3092\u6301\u3064\u60c5\u5831\u3092\u62bd\u51fa\u3059\u308b\u3002\n\u3068\u3044\u3063\u305f\u5869\u6885\u3002\u8a73\u3057\u304f\u306f\u6700\u5f8c\u306b\u8f09\u305b\u308b\u30c6\u30b9\u30c8\u7528\u30b3\u30fc\u30c9\u3092\u53c2\u7167\u3002\n\n\u7d50\u679c\n\n\n\n\u30d1\u30bf\u30fc\u30f3\n\u6240\u8981\u6642\u9593(sec)\n\n\n\n\n\nwhile+read\n\n15381\n\n\nawk\n8\n\n\n\nawk\u3059\u3052\u30fc\u30fc\u30fc\u30fc\u30fc\u30fc\u30fc\u30fc\uff01\n\n\u691c\u8a3c\u7528\u30b3\u30fc\u30c9\n\u4e0a\u306b\u66f8\u3044\u3066\u3044\u306a\u3044\u3053\u3068\u3082\u3044\u308d\u3044\u308d\u3084\u3063\u3066\u3044\u308b\u30b3\u30fc\u30c9\u3002\n\ntest_performance.sh\n#!/bin/bash\n#\ngen_records=$1\n\n# \u7b2c1\u5f15\u6570\u306e\u51fa\u529b\u30ec\u30b3\u30fc\u30c9\u6570\u304c\u306a\u304b\u3063\u305f\u3089\u300110\u4e07\u30ec\u30b3\u30fc\u30c9\u3068\u3059\u308b\u3002\nif [ -z ${gen_records} ]; then\n    gen_records=100000\nfi\n\nTEST_FILE=\"testdata.xml\"\nTEST_TARGET=\"testTarget.dat\"\n\n# \u691c\u8a3c\u306b\u4f7f\u7528\u3059\u308b\u30c7\u30fc\u30bf\u3092\u7528\u610f\u3059\u308b\u3002\nfunction prepare(){\n\n    max_gen=$1\n\n    # create test XML data\n    echo '<?xml version=\"1.0\" encoding=\"utf-8\">' > ${TEST_FILE}\n    for i in $(seq 1 ${max_gen})\n    do\n        printf \"%s%s%s%s%s%s%s%s%s\\n\" \\\n        \"<record>\" \\\n        \"<keyset><key>${i}</key><key>none</key></keyset>\" \\\n        \"<user>kevin</user>\" \\\n        \"<sequence>\" \\\n        \"<data>fix</data><data>fix</data><data>fix</data><data>fix</data><data>fix</data><data>fix</data>\" \\\n        \"<data>value_${i}</data><data>value_2</data>\" \\\n        \"</sequence>\" \\\n        \"<Action>${i}</Action>\" \\\n        \"</record>\" >> ${TEST_FILE}\n\n\n    done\n    i=100001\n        printf \"%s%s%s%s%s%s%s%s%s\\n\" \\\n        \"<record>\" \\\n        \"<keyset><key>${i}</key><key>none</key></keyset>\" \\\n        \"<user>markus</user>\" \\\n        \"<sequence>\" \\\n        \"<data>fix</data><data>fix</data><data>fix</data><data>fix</data><data>fix</data><data>fix</data>\" \\\n        \"<data>value_${i}</data><data>value_2</data>\" \\\n        \"</sequence>\" \\\n        \"<Action>100</Action>\" \\\n        \"</record>\" >> ${TEST_FILE}\n    i=100002\n        printf \"%s%s%s%s%s%s%s%s%s\\n\" \\\n        \"<record>\" \\\n        \"<keyset><key>${i}</key><key>none</key></keyset>\" \\\n        \"<user>markus</user>\" \\\n        \"<sequence>\" \\\n        \"<data>fix</data><data>fix</data><data>fix</data><data>fix</data><data>fix</data><data>fix</data>\" \\\n        \"<data>value_${i}</data><data>value_2</data>\" \\\n        \"</sequence>\" \\\n        \"<Action>101</Action>\" \\\n        \"</record>\" >> ${TEST_FILE}\n\n    # create test target user list\n    {\n        echo \"markus\"\n        echo \"jacob\"\n    } > ${TEST_TARGET}\n\n}\n\n# while\u3092\u4f7f\u3063\u305f\u30eb\u30fc\u30d7\u3067\u5168\u4ef6\u62bd\u51fa\nfunction perform_while_all(){\n\n\n    local readonly output=\"testresult_for.xml\"\n    echo -n \"\" > ${output}\n\n    while read file_line\n    do\n\n        printf \"%s\\n\" ${file_line} >> ${output} \n\n    done < ${TEST_FILE}\n\n}\n\n# while\u3092\u4f7f\u3063\u305f\u30eb\u30fc\u30d7\u3067user\u30bf\u30b0\u306e\u30c6\u30ad\u30b9\u30c8\u304cmarkus\u306e\u307f\u3092\u62bd\u51fa\nfunction perform_while_markus(){\n\n\n    local readonly output=\"testresult_for.xml\"\n    echo -n \"\" > ${output}\n\n    while read file_line\n    do\n\n        availablity=$(echo \"${file_line}\" | grep '<user>\\(.*\\)</user>' | wc -l )\n\n        if [ 0 -eq ${availablity} ]; then\n            continue\n        fi\n\n        user=$(echo \"${file_line}\" | sed -e 's|^.*<user>\\(.*\\)</user>.*$|\\1|g' )\n\n        isMarkus=$(grep ${user} ${TEST_TARGET} | wc -l )\n\n        if [ 0 -eq ${isMarkus} ]; then\n            continue\n        fi\n\n        printf \"%s\\n\" ${file_line} >> ${output} \n\n    done < ${TEST_FILE}\n\n}\n\n# awk\u3092\u4f7f\u3063\u305f\u30eb\u30fc\u30d7\u3067\u5168\u4ef6\u62bd\u51fa\nfunction perform_awk_all(){\n\n    local readonly output=\"testresult_awk.xml\"\n    echo -n \"\" > ${output}\n\n\n    awk -v output=${output} '\n    {\n        print $0 >> output\n    }\n    ' ${TEST_FILE}\n\n}\n\n# awk\u3092\u4f7f\u3063\u305f\u30eb\u30fc\u30d7\u3067user\u30bf\u30b0\u306e\u30c6\u30ad\u30b9\u30c8\u304cmarkus\u306e\u307f\u3092\u62bd\u51fa\nfunction perform_awk_markus(){\n\n    local readonly output=\"testresult_awk.xml\"\n    echo -n \"\" > ${output}\n\n\n    awk -v matchfile=${TEST_TARGET} '\n        # \u5bfe\u8c61\u30e6\u30fc\u30b6\u4e00\u89a7\u3092\u53d6\u5f97\n        BEGIN {\n            matchlist = \"|\";\n            CAT = \"cat \" matchfile;\n            while ((CAT | getline) > 0) {\n                matchlist = matchlist \"\" $0 \"|\";\n            } \n            close(CAT)\n        }\n        # \u30e1\u30a4\u30f3\u51e6\u7406\n        {\n            user = $0\n            sub(/^.*<user>/, \"\", user)\n            sub(/<\\/user>.*/,\"\", user)\n\n            item = \"|\" user \"|\"\n\n            if (index(matchlist, item) > 0) {\n                print $0\n            }\n        }\n    ' ${TEST_FILE} >> ${output}\n\n}\n\n# awk\u3092\u4f7f\u3063\u305f\u30eb\u30fc\u30d7\u3067user\u30bf\u30b0\u306e\u30c6\u30ad\u30b9\u30c8\u304cmarkus\u306e\u307f\u3092\u62bd\u51fa\u3002\n# \u3057\u304b\u3082\u30d1\u30bf\u30fc\u30f3\u3068\u3057\u3066Action\u30bf\u30b0\u306e\u30c6\u30ad\u30b9\u30c8\u304c100\u307e\u305f\u306f101\u306e\u5834\u5408\u306e\u307f\u51e6\u7406\u3059\u308b\u3002\nfunction perform_awk_markus_withAction(){\n\n    local readonly output=\"testresult_awk2.xml\"\n    echo -n \"\" > ${output}\n\n\n    awk -v matchfile=${TEST_TARGET} '\n        # \u5bfe\u8c61\u30e6\u30fc\u30b6\u4e00\u89a7\u3092\u53d6\u5f97\n        BEGIN {\n            matchlist = \"|\";\n            CAT = \"cat \" matchfile;\n            while ((CAT | getline) > 0) {\n                matchlist = matchlist \"\" $0 \"|\";\n            } \n            close(CAT)\n        }\n        # \u30e1\u30a4\u30f3\u51e6\u7406\n        $0 ~ /<Action>10[01]<\\/Action>/{\n            user = $0\n            sub(/^.*<user>/, \"\", user)\n            sub(/<\\/user>.*/,\"\", user)\n\n            item = \"|\" user \"|\"\n\n            if (index(matchlist, item) > 0) {\n                print $0\n            }\n        }\n    ' ${TEST_FILE} >> ${output}\n\n}\n\n\n# gawk\u3092\u4f7f\u3063\u305f\u30eb\u30fc\u30d7\u3067user\u30bf\u30b0\u306e\u30c6\u30ad\u30b9\u30c8\u304cmarkus\u306e\u307f\u3092\u62bd\u51fa\u3002\nfunction perform_gawk_markus(){\n\n    local readonly output=\"testresult_gawk.xml\"\n    echo -n \"\" > ${output}\n\n\n    gawk -v matchfile=${TEST_TARGET} '\n        # \u5bfe\u8c61\u30e6\u30fc\u30b6\u4e00\u89a7\u3092\u53d6\u5f97\n        BEGIN {\n            matchlist = \"|\";\n            CAT = \"cat \" matchfile;\n            while ((CAT | getline) > 0) {\n                matchlist = matchlist \"\" $0 \"|\";\n            } \n            close(CAT)\n        }\n        # \u30e1\u30a4\u30f3\u51e6\u7406\n        {\n            user = $0\n            sub(/^.*<user>/, \"\", user)\n            sub(/<\\/user>.*/,\"\", user)\n\n            item = \"|\" user \"|\"\n\n            if (index(matchlist, item) > 0) {\n                print $0\n            }       \n        }\n    ' ${TEST_FILE} >> ${output}\n\n}\n\n# gawk\u3092\u4f7f\u3063\u305f\u30eb\u30fc\u30d7\u3067user\u30bf\u30b0\u306e\u30c6\u30ad\u30b9\u30c8\u304cmarkus\u306e\u307f\u3092\u62bd\u51fa\u3002\n# \u3057\u304b\u3082\u30d1\u30bf\u30fc\u30f3\u3068\u3057\u3066Action\u30bf\u30b0\u306e\u30c6\u30ad\u30b9\u30c8\u304c100\u307e\u305f\u306f101\u306e\u5834\u5408\u306e\u307f\u51e6\u7406\u3059\u308b\u3002\nfunction perform_gawk_markus_withAction(){\n\n    local readonly output=\"testresult_awk2.xml\"\n    echo -n \"\" > ${output}\n\n\n    gawk -v matchfile=${TEST_TARGET} '\n        # \u5bfe\u8c61\u30e6\u30fc\u30b6\u4e00\u89a7\u3092\u53d6\u5f97\n        BEGIN {\n            matchlist = \"|\";\n            CAT = \"cat \" matchfile;\n            while ((CAT | getline) > 0) {\n                matchlist = matchlist \"\" $0 \"|\";\n            } \n            close(CAT)\n        }\n        # \u30e1\u30a4\u30f3\u51e6\u7406\n        $0 ~ /<Action>10[01]<\\/Action>/{\n            user = $0\n            sub(/^.*<user>/, \"\", user)\n            sub(/<\\/user>.*/,\"\", user)\n\n            item = \"|\" user \"|\"\n\n            if (index(matchlist, item) > 0) {\n                print $0\n            }\n        }\n    ' ${TEST_FILE} >> ${output}\n\n}\n\n\necho \"-------------PERFORMANCE TEST--------------------\"\necho \"##PREPARE##\"\nprepare ${gen_records}\necho \"records: $(wc -l ${TEST_FILE}) lines\"\necho \"kevin records: $(grep kevin ${TEST_FILE} | wc -l)\"\necho \"markus records: $(grep markus ${TEST_FILE} | wc -l)\"\necho \"Action 100 OR 101 records: $(grep -E '<Action>10[01]<\\/Action>' ${TEST_FILE} | wc -l)\"\necho \"##PREPARE FINISH##\"\n\necho \"##EXAMINE##\"\nSECONDS=0\nperform_while_all\necho \"perform_while_all:Performance time: ${SECONDS} sec\"\n\nSECONDS=0\nperform_awk_all\necho \"perform_awk_all:Performance time: ${SECONDS} sec\"\n\nSECONDS=0\nperform_while_markus\necho \"perform_while_markus:Performance time: ${SECONDS} sec\"\n\nSECONDS=0\nperform_awk_markus\necho \"perform_awk_markus:Performance time: ${SECONDS} sec\"\n\nSECONDS=0\nperform_gawk_markus\necho \"perform_gawk_markus:Performance time: ${SECONDS} sec\"\n\nSECONDS=0\nperform_awk_markus_withAction\necho \"perform_awk_markus_withAction:Performance time: ${SECONDS} sec\"\n\nSECONDS=0\nperform_gawk_markus_withAction\necho \"perform_gawk_markus_withAction:Performance time: ${SECONDS} sec\"\n\n\necho \"-------------PERFORMANCE TEST--------------------\"\n\n\n\n\u4ed5\u4e8b\u306e\u4e2d\u3067\u30b7\u30a7\u30eb\u30b9\u30af\u30ea\u30d7\u30c8\u306e\u6027\u80fd\u6539\u5584\u3092\u3059\u308b\u3053\u3068\u306b\u306a\u3063\u305f\u3002\u305d\u306e\u305f\u3081\u306e\u6027\u80fd\u6539\u5584\u3092\u3059\u308b\u305f\u3081\u306e\u4e8b\u524d\u8abf\u67fb\u3068\u3044\u3046\u5f62\u3067\u3001\n- \u60f3\u5b9a\u3057\u3046\u308b\u5b9f\u88c5\n- \u5b9f\u88c5\u306e\u9055\u3044\u306b\u3088\u308b\u6027\u80fd\u5dee\n\u3053\u308c\u3092\u78ba\u8a8d\u3057\u3088\u3046\u3001\u3068\u3044\u3046\u3082\u306e\u3002\n\n# Oracle\u306e\u76e3\u67fbXML\u304c16\u4e07\u30d5\u30a1\u30a4\u30eb\u2026\u2026\n\nOracle\u306eXML\u76e3\u67fb\u306e\u96c6\u7d04\u3092\u884c\u3046\u51e6\u7406\u3092\u30b7\u30a7\u30eb\u3067\u5b9f\u88c5\u3002\n\u3067\u3001\u51fa\u529b\u3055\u308c\u3066\u304d\u305f\u76e3\u67fb\u304c16\u4e07\u30d5\u30a1\u30a4\u30eb\u3082\u3042\u3063\u3066\u3048\u3089\u30fc\u30fc\u30fc\u30fc\u30fc\u30fc\u30fc\u304f\u51e6\u7406\u306b\u6642\u9593\u304c\u304b\u304b\u308b\u3002\u51fa\u529b\u3055\u308c\u305f\u30d5\u30a1\u30a4\u30eb\u3092\u8ee2\u9001\u3059\u308b\u6642\u9593\u304c\u6c7a\u307e\u3063\u3066\u3044\u308b\u305f\u3081\u3001\u305d\u306e\u6642\u9593\u307e\u3067\u306b\u51e6\u7406\u3092\u7d42\u308f\u3089\u305b\u306a\u3051\u308c\u3070\u306a\u3089\u306a\u3044\u3002\u3044\u3056\u3001\u6027\u80fd\u6539\u5584\uff01\u3000\u3068\u3044\u3046\u6b21\u7b2c\u3002\n\n# \u6bd4\u8f03\u3059\u308b\u5b9f\u88c5\n\n- \u4eca\u306e\u5b9f\u88c5\n\n\u30d5\u30a1\u30a4\u30eb\u3092\u5165\u529b\u30ea\u30c0\u30a4\u30ec\u30af\u30c8\u3057\u3066`while`\u3068`read`\u3067\u3084\u308a\u304f\u308a\u3059\u308b\u65b9\u6cd5\n\n```while\u3068read\u306e\u5408\u308f\u305b\u6280\nwhile read LINE\ndo\n    # \u3042\u308c\u3084\u3053\u308c\u3084\ndone < \u30d5\u30a1\u30a4\u30eb\n```\n\n- \u65b0\u3057\u3044\u5b9f\u88c5\n\n\u3082\u3046\u5168\u90e8\u3001`awk`\u3067\u3044\u3044\u3093\u3058\u3083\u306d\uff1f\n\n# \u691c\u8a3c\u3059\u308b\u30b3\u30fc\u30c9\n\n16\u4e07\u30d5\u30a1\u30a4\u30eb\u3092\u5b9f\u969b\u306b\u4f5c\u308b\u3082\u306e\u3042\u308c\u306a\u306e\u3067\u3001\n\n16\u4e07\u30d5\u30a1\u30a4\u30eb \u00d7 5\u30ec\u30b3\u30fc\u30c9\u5206 + \u03b1 = 100\u4e07\u30ec\u30b3\u30fc\u30c9\n\n\u3068\u3044\u3046\u611f\u3058\u3067XML\u306e\u30ec\u30b3\u30fc\u30c9\u304c100\u4e07\u4ef6\u306e\u30c0\u30df\u30fc\u30c7\u30fc\u30bf\u30d5\u30a1\u30a4\u30eb\uff11\u3064\u3092\u5165\u529b\u306b\u3059\u308b\u3002\n\u305d\u306e\u4e2d\u306e`user`\u30bf\u30b0\u306e\u4e2d\u306b`markus`\u307e\u305f\u306f`jacob`\u3068\u3044\u3046\u6587\u5b57\u5217\u3092\u6301\u3064\u60c5\u5831\u3092\u62bd\u51fa\u3059\u308b\u3002\n\n\u3068\u3044\u3063\u305f\u5869\u6885\u3002\u8a73\u3057\u304f\u306f\u6700\u5f8c\u306b\u8f09\u305b\u308b\u30c6\u30b9\u30c8\u7528\u30b3\u30fc\u30c9\u3092\u53c2\u7167\u3002\n\n# \u7d50\u679c\n\n|\u30d1\u30bf\u30fc\u30f3       |\u6240\u8981\u6642\u9593(sec) |\n|-------------:|:------------:|\n|`while`+`read`|15381         |\n|`awk`         |8             |\n\n**awk\u3059\u3052\u30fc\u30fc\u30fc\u30fc\u30fc\u30fc\u30fc\u30fc\uff01**\n\n# \u691c\u8a3c\u7528\u30b3\u30fc\u30c9\n\n\u4e0a\u306b\u66f8\u3044\u3066\u3044\u306a\u3044\u3053\u3068\u3082\u3044\u308d\u3044\u308d\u3084\u3063\u3066\u3044\u308b\u30b3\u30fc\u30c9\u3002\n\n```test_performance.sh\n#!/bin/bash\n#\ngen_records=$1\n\n# \u7b2c1\u5f15\u6570\u306e\u51fa\u529b\u30ec\u30b3\u30fc\u30c9\u6570\u304c\u306a\u304b\u3063\u305f\u3089\u300110\u4e07\u30ec\u30b3\u30fc\u30c9\u3068\u3059\u308b\u3002\nif [ -z ${gen_records} ]; then\n    gen_records=100000\nfi\n\nTEST_FILE=\"testdata.xml\"\nTEST_TARGET=\"testTarget.dat\"\n\n# \u691c\u8a3c\u306b\u4f7f\u7528\u3059\u308b\u30c7\u30fc\u30bf\u3092\u7528\u610f\u3059\u308b\u3002\nfunction prepare(){\n    \n    max_gen=$1\n\n    # create test XML data\n    echo '<?xml version=\"1.0\" encoding=\"utf-8\">' > ${TEST_FILE}\n    for i in $(seq 1 ${max_gen})\n    do\n        printf \"%s%s%s%s%s%s%s%s%s\\n\" \\\n        \"<record>\" \\\n        \"<keyset><key>${i}</key><key>none</key></keyset>\" \\\n        \"<user>kevin</user>\" \\\n        \"<sequence>\" \\\n        \"<data>fix</data><data>fix</data><data>fix</data><data>fix</data><data>fix</data><data>fix</data>\" \\\n        \"<data>value_${i}</data><data>value_2</data>\" \\\n        \"</sequence>\" \\\n        \"<Action>${i}</Action>\" \\\n        \"</record>\" >> ${TEST_FILE}\n\n\n    done\n    i=100001\n        printf \"%s%s%s%s%s%s%s%s%s\\n\" \\\n        \"<record>\" \\\n        \"<keyset><key>${i}</key><key>none</key></keyset>\" \\\n        \"<user>markus</user>\" \\\n        \"<sequence>\" \\\n        \"<data>fix</data><data>fix</data><data>fix</data><data>fix</data><data>fix</data><data>fix</data>\" \\\n        \"<data>value_${i}</data><data>value_2</data>\" \\\n        \"</sequence>\" \\\n        \"<Action>100</Action>\" \\\n        \"</record>\" >> ${TEST_FILE}\n    i=100002\n        printf \"%s%s%s%s%s%s%s%s%s\\n\" \\\n        \"<record>\" \\\n        \"<keyset><key>${i}</key><key>none</key></keyset>\" \\\n        \"<user>markus</user>\" \\\n        \"<sequence>\" \\\n        \"<data>fix</data><data>fix</data><data>fix</data><data>fix</data><data>fix</data><data>fix</data>\" \\\n        \"<data>value_${i}</data><data>value_2</data>\" \\\n        \"</sequence>\" \\\n        \"<Action>101</Action>\" \\\n        \"</record>\" >> ${TEST_FILE}\n\n    # create test target user list\n    {\n        echo \"markus\"\n        echo \"jacob\"\n    } > ${TEST_TARGET}\n\n}\n\n# while\u3092\u4f7f\u3063\u305f\u30eb\u30fc\u30d7\u3067\u5168\u4ef6\u62bd\u51fa\nfunction perform_while_all(){\n\n\n    local readonly output=\"testresult_for.xml\"\n    echo -n \"\" > ${output}\n\n    while read file_line\n    do\n\n        printf \"%s\\n\" ${file_line} >> ${output} \n\n    done < ${TEST_FILE}\n\n}\n\n# while\u3092\u4f7f\u3063\u305f\u30eb\u30fc\u30d7\u3067user\u30bf\u30b0\u306e\u30c6\u30ad\u30b9\u30c8\u304cmarkus\u306e\u307f\u3092\u62bd\u51fa\nfunction perform_while_markus(){\n\n\n    local readonly output=\"testresult_for.xml\"\n    echo -n \"\" > ${output}\n\n    while read file_line\n    do\n    \n        availablity=$(echo \"${file_line}\" | grep '<user>\\(.*\\)</user>' | wc -l )\n\n        if [ 0 -eq ${availablity} ]; then\n            continue\n        fi\n\n        user=$(echo \"${file_line}\" | sed -e 's|^.*<user>\\(.*\\)</user>.*$|\\1|g' )\n\n        isMarkus=$(grep ${user} ${TEST_TARGET} | wc -l )\n\n        if [ 0 -eq ${isMarkus} ]; then\n            continue\n        fi\n\n        printf \"%s\\n\" ${file_line} >> ${output} \n\n    done < ${TEST_FILE}\n\n}\n\n# awk\u3092\u4f7f\u3063\u305f\u30eb\u30fc\u30d7\u3067\u5168\u4ef6\u62bd\u51fa\nfunction perform_awk_all(){\n\n    local readonly output=\"testresult_awk.xml\"\n    echo -n \"\" > ${output}\n\n\n    awk -v output=${output} '\n    {\n        print $0 >> output\n    }\n    ' ${TEST_FILE}\n\n}\n\n# awk\u3092\u4f7f\u3063\u305f\u30eb\u30fc\u30d7\u3067user\u30bf\u30b0\u306e\u30c6\u30ad\u30b9\u30c8\u304cmarkus\u306e\u307f\u3092\u62bd\u51fa\nfunction perform_awk_markus(){\n\n    local readonly output=\"testresult_awk.xml\"\n    echo -n \"\" > ${output}\n\n\n    awk -v matchfile=${TEST_TARGET} '\n        # \u5bfe\u8c61\u30e6\u30fc\u30b6\u4e00\u89a7\u3092\u53d6\u5f97\n        BEGIN {\n            matchlist = \"|\";\n            CAT = \"cat \" matchfile;\n            while ((CAT | getline) > 0) {\n                matchlist = matchlist \"\" $0 \"|\";\n            } \n            close(CAT)\n        }\n        # \u30e1\u30a4\u30f3\u51e6\u7406\n        {\n            user = $0\n            sub(/^.*<user>/, \"\", user)\n            sub(/<\\/user>.*/,\"\", user)\n\n            item = \"|\" user \"|\"\n\n            if (index(matchlist, item) > 0) {\n                print $0\n            }\n        }\n    ' ${TEST_FILE} >> ${output}\n\n}\n\n# awk\u3092\u4f7f\u3063\u305f\u30eb\u30fc\u30d7\u3067user\u30bf\u30b0\u306e\u30c6\u30ad\u30b9\u30c8\u304cmarkus\u306e\u307f\u3092\u62bd\u51fa\u3002\n# \u3057\u304b\u3082\u30d1\u30bf\u30fc\u30f3\u3068\u3057\u3066Action\u30bf\u30b0\u306e\u30c6\u30ad\u30b9\u30c8\u304c100\u307e\u305f\u306f101\u306e\u5834\u5408\u306e\u307f\u51e6\u7406\u3059\u308b\u3002\nfunction perform_awk_markus_withAction(){\n\n    local readonly output=\"testresult_awk2.xml\"\n    echo -n \"\" > ${output}\n\n\n    awk -v matchfile=${TEST_TARGET} '\n        # \u5bfe\u8c61\u30e6\u30fc\u30b6\u4e00\u89a7\u3092\u53d6\u5f97\n        BEGIN {\n            matchlist = \"|\";\n            CAT = \"cat \" matchfile;\n            while ((CAT | getline) > 0) {\n                matchlist = matchlist \"\" $0 \"|\";\n            } \n            close(CAT)\n        }\n        # \u30e1\u30a4\u30f3\u51e6\u7406\n        $0 ~ /<Action>10[01]<\\/Action>/{\n            user = $0\n            sub(/^.*<user>/, \"\", user)\n            sub(/<\\/user>.*/,\"\", user)\n\n            item = \"|\" user \"|\"\n\n            if (index(matchlist, item) > 0) {\n                print $0\n            }\n        }\n    ' ${TEST_FILE} >> ${output}\n\n}\n\n\n# gawk\u3092\u4f7f\u3063\u305f\u30eb\u30fc\u30d7\u3067user\u30bf\u30b0\u306e\u30c6\u30ad\u30b9\u30c8\u304cmarkus\u306e\u307f\u3092\u62bd\u51fa\u3002\nfunction perform_gawk_markus(){\n\n    local readonly output=\"testresult_gawk.xml\"\n    echo -n \"\" > ${output}\n\n\n    gawk -v matchfile=${TEST_TARGET} '\n        # \u5bfe\u8c61\u30e6\u30fc\u30b6\u4e00\u89a7\u3092\u53d6\u5f97\n        BEGIN {\n            matchlist = \"|\";\n            CAT = \"cat \" matchfile;\n            while ((CAT | getline) > 0) {\n                matchlist = matchlist \"\" $0 \"|\";\n            } \n            close(CAT)\n        }\n        # \u30e1\u30a4\u30f3\u51e6\u7406\n        {\n            user = $0\n            sub(/^.*<user>/, \"\", user)\n            sub(/<\\/user>.*/,\"\", user)\n\n            item = \"|\" user \"|\"\n\n            if (index(matchlist, item) > 0) {\n                print $0\n            }       \n        }\n    ' ${TEST_FILE} >> ${output}\n\n}\n\n# gawk\u3092\u4f7f\u3063\u305f\u30eb\u30fc\u30d7\u3067user\u30bf\u30b0\u306e\u30c6\u30ad\u30b9\u30c8\u304cmarkus\u306e\u307f\u3092\u62bd\u51fa\u3002\n# \u3057\u304b\u3082\u30d1\u30bf\u30fc\u30f3\u3068\u3057\u3066Action\u30bf\u30b0\u306e\u30c6\u30ad\u30b9\u30c8\u304c100\u307e\u305f\u306f101\u306e\u5834\u5408\u306e\u307f\u51e6\u7406\u3059\u308b\u3002\nfunction perform_gawk_markus_withAction(){\n\n    local readonly output=\"testresult_awk2.xml\"\n    echo -n \"\" > ${output}\n\n\n    gawk -v matchfile=${TEST_TARGET} '\n        # \u5bfe\u8c61\u30e6\u30fc\u30b6\u4e00\u89a7\u3092\u53d6\u5f97\n        BEGIN {\n            matchlist = \"|\";\n            CAT = \"cat \" matchfile;\n            while ((CAT | getline) > 0) {\n                matchlist = matchlist \"\" $0 \"|\";\n            } \n            close(CAT)\n        }\n        # \u30e1\u30a4\u30f3\u51e6\u7406\n        $0 ~ /<Action>10[01]<\\/Action>/{\n            user = $0\n            sub(/^.*<user>/, \"\", user)\n            sub(/<\\/user>.*/,\"\", user)\n\n            item = \"|\" user \"|\"\n\n            if (index(matchlist, item) > 0) {\n                print $0\n            }\n        }\n    ' ${TEST_FILE} >> ${output}\n\n}\n\n\necho \"-------------PERFORMANCE TEST--------------------\"\necho \"##PREPARE##\"\nprepare ${gen_records}\necho \"records: $(wc -l ${TEST_FILE}) lines\"\necho \"kevin records: $(grep kevin ${TEST_FILE} | wc -l)\"\necho \"markus records: $(grep markus ${TEST_FILE} | wc -l)\"\necho \"Action 100 OR 101 records: $(grep -E '<Action>10[01]<\\/Action>' ${TEST_FILE} | wc -l)\"\necho \"##PREPARE FINISH##\"\n\necho \"##EXAMINE##\"\nSECONDS=0\nperform_while_all\necho \"perform_while_all:Performance time: ${SECONDS} sec\"\n\nSECONDS=0\nperform_awk_all\necho \"perform_awk_all:Performance time: ${SECONDS} sec\"\n\nSECONDS=0\nperform_while_markus\necho \"perform_while_markus:Performance time: ${SECONDS} sec\"\n\nSECONDS=0\nperform_awk_markus\necho \"perform_awk_markus:Performance time: ${SECONDS} sec\"\n\nSECONDS=0\nperform_gawk_markus\necho \"perform_gawk_markus:Performance time: ${SECONDS} sec\"\n\nSECONDS=0\nperform_awk_markus_withAction\necho \"perform_awk_markus_withAction:Performance time: ${SECONDS} sec\"\n\nSECONDS=0\nperform_gawk_markus_withAction\necho \"perform_gawk_markus_withAction:Performance time: ${SECONDS} sec\"\n\n\necho \"-------------PERFORMANCE TEST--------------------\"\n\n```\n\n\n", "tags": ["Linux", "Bash", "ShellScript", "awk", "while"]}