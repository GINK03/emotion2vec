{"context": " More than 1 year has passed since last update.rx.Observable<T> \u306e\u30aa\u30da\u30ec\u30fc\u30bf\u306f\u3001\u901a\u5e38\u306f\u975e\u540c\u671f\u3067\u3001\u4e26\u5217\u306b\u51e6\u7406\u3055\u308c\u307e\u3059\u3002\n\u4f8b\u3048\u3070\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u5834\u5408:\npublic void start() {\n    Observable.range(1, 5)\n        .flatMap(x -> fatTask(x))\n        .subscribe(x -> Log.d(TAG, \"onNext - \" + x));\n}\n\nprivate final Random rand = new Random();\nprivate final ScheduledExecutorService executor = Executors.newScheduledThreadPool(5);\n\n// \u30e9\u30f3\u30c0\u30e0\u306b\u30b9\u30ea\u30fc\u30d7\u3057\u305f\u5f8c x \u3092 onNext \u3059\u308b\nprivate Observable<Integer> fatTask(final int x) {\n    return Observable.create(subscriber -> {\n        long sleep = (long) (rand.nextDouble() * 10000L);\n        Log.d(TAG, \"fatTask(\" + x + \") - start.\");\n\n        executor.schedule(() -> {\n            subscriber.onNext(x);\n            subscriber.onCompleted();\n        }, sleep, TimeUnit.MILLISECONDS);\n    });\n}\n\n\u3053\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u306e\u51fa\u529b\u306f\u3053\u3046\u306a\u308a\u307e\u3059\u3002\n\n\u51fa\u529b:\nfatTask(1) - start.\nfatTask(2) - start.\nfatTask(3) - start.\nfatTask(4) - start.\nfatTask(5) - start.\nonNext - 3\nonNext - 5\nonNext - 4\nonNext - 2\nonNext - 1\n\nfatTask \u306f 1,2,3,4,5 \u306e\u9806\u3067 \u5b8c\u4e86\u3092\u5f85\u305f\u305a\u306b \u547c\u3073\u3060\u3055\u308c\u307e\u3059\u3002\n\u304c\u3001\u305d\u308c\u305e\u308c\u51e6\u7406\u306b\u304b\u304b\u308b\u6642\u9593\u304c\u7570\u306a\u308b\u306e\u3067\u3001 onNext \u304c\u547c\u3070\u308c\u308b\u9806\u306f 1\u301c \u3068\u306f\u9650\u308a\u307e\u305b\u3093\u3002\n\u30bd\u30fc\u30b9\u3068\u306a\u308b Stream \u306e\u9806\u756a\u3092\u5d29\u3057\u305f\u304f\u306a\u3044\u5834\u5408\u306f\u3001 fatTask(1) \u304c\u5b8c\u4e86\u3057\u3066\u304b\u3089 fatTask(2) \u3092\u958b\u59cb\u3059\u308b\u3001\u3068\u3044\u3046\u3088\u3046\u306b\u76f4\u5217\u5316\u3057\u306a\u3051\u308c\u3070\u306a\u308a\u307e\u305b\u3093\u3002\n\nObservable.Concat(concatWith)\n\u3053\u308c\u3092\u884c\u3046\u306e\u304c Observable.Concat \u3067\u3059(RxJava \u3067\u306f Observable.concatWith \u306e\u3088\u3046\u3067\u3059\u306d)\u3002\n\u8907\u6570\u306e Observable \u3092\u9806\u306b\uff08\u5b8c\u4e86\u3057\u3066\u304b\u3089\u6b21\u3078\uff09\u51e6\u7406\u3057\u3066\u3044\u304d\u307e\u3059\u3002\n\n\u4f7f\u3044\u65b9\ntoList \u3067\u4e00\u65e6\u305f\u3060\u306e List \u306b\u3057\u3066\u304b\u3089\u3001concatWith \u3067\u6570\u73e0\u3064\u306a\u304e\u306b\u3057\u307e\u3059\u3002\npublic void start() {\n    Observable.range(1, 5)\n        .toList()\n        .flatMap(list -> {\n            // fatTask(1).contat(fatTask(2)).contat(fatTask(3))... \n            // \u306b\u3059\u308b\uff08fold \u4f7f\u3048\u308c\u3070\u2026)\n            Observable<Integer> task = null;\n            for (int x : list) {\n                if (task == null) {\n                    task = fatTask(x);\n                } else {\n                    task = task.concatWith(fatTask(x));\n                }\n            }\n            return task;\n        })\n        .subscribe(x -> Log.d(TAG, \"onNext - \" + x));\n}\n\n\u3053\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u306e\u51fa\u529b\u306f\u3053\u3046\u306a\u308a\u307e\u3059\u3002\n\n\u51fa\u529b\nfatTask(1) - start.\nonNext - 1\nfatTask(2) - start.\nonNext - 2\nfatTask(3) - start.\nonNext - 3\nfatTask(4) - start.\nonNext - 4\nfatTask(5) - start.\nonNext - 5\n\nfatTask(1) \u306e\u5b8c\u4e86\u3092\u5f85\u3063\u3066\u304b\u3089\u3001\u6b21\u306e fatTask(2) \u304c\u5b9f\u884c\u3055\u308c\u3066\u3044\u307e\u3059\u3002\n\u203b\nRx.NET \u3067\u306f\u3001 \nstatic IObservable<T> Concat<T>(IEnumerable<IObservable<T>> sources)\n\n\u3067\u3001\u8907\u6570\u306e IObservable \u3092\u4e00\u62ec\u3067\u6e21\u305b\u308b\u306e\u3067\u3059\u304c\u3001 RxJava \u306b\u306f\u306a\u3044\u3088\u3046\u3067\u3001\u3001\u3001\u3002\nstatic <T> Observable<T> concatEager(Iterable<? extends Observable<? extends T>> sources)\n\n\u3068\u3044\u3046\u306e\u304c\u3042\u3063\u305f\u3093\u3067\u3059\u304c\u3001\u671f\u5f85\u901a\u308a\u3046\u3054\u3044\u3066\u304f\u308c\u305a\u3001 Eager? \u306a\u3093\u3067\u3057\u3087\u3046\uff1f\n\n\u30bd\u30fc\u30b9\u304c\u7121\u9650\u30ea\u30b9\u30c8\u3060\u3063\u305f\u3089\uff1f\ntoList \u3067\u4e00\u65e6\u305f\u3060\u306e List \u306b\u3057\u3066\u3044\u308b\u306e\u304c\u975e\u5e38\u306b\u6c17\u306b\u5165\u3089\u306a\u3044\u3067\u3059\u306d\u3002\nrange(1, 5) \u304c interval(1, TimeUnit.SECONDS) \u306e\u3088\u3046\u306b\u7121\u9650\u306e Stream \u3060\u3063\u305f\u3089\u4f7f\u3048\u307e\u305b\u3093\u3002\n\u305d\u3053\u3067\u3001 concat \u306b\u306f\u3001\u3053\u3093\u306a overload \u3082\u3042\u308a\u307e\u3059\u3002\nstatic <T> Observable<T> concat(Observable<? extends Observable<? extends T>> observables)\n\nObservable \u3092\u901a\u77e5\u3059\u308b Observable\uff1f \u3084\u3084\u3053\u3057\u3044\u3067\u3059\u304c\u3053\u3046\u4f7f\u3044\u307e\u3059\u3002\npublic void start() {\n    // 2. \u3092 concat \u3059\u308b\n    Observable.concat( \n        // 1. Observable<Long>\n        Observable.interval(1, TimeUnit.SECONDS) \n            // 2. Long \u3092 Observable<Integer> \u306b\u5909\u63db \n            //    \u2192 Observable<Observable<Integer>> \u306b\u306a\u308b\n            .map(x -> fatTask(x.intValue()))) \n        .subscribe(x -> Log.d(TAG, \"onNext - \" + x));\n}\n\n\u3053\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u306e\u51fa\u529b\u306f\u3053\u3046\u306a\u308a\u307e\u3059\u3002\n\n\u51fa\u529b\nfatTask(0) - start.\nonNext - 0\nfatTask(1) - start.\nonNext - 1\nfatTask(2) - start.\nonNext - 2\n\u2026\u3064\u3065\u304f\n\n\u7121\u9650\u30ea\u30b9\u30c8\u306a\u304c\u3089\u3001\u4e26\u5217\u51e6\u7406\u305b\u305a\u306b\u9806\u5e8f\u901a\u308a\u52d5\u3044\u3066\u304f\u308c\u307e\u3059\u3002\ninterval \u306e\u5024\u3092\u5358\u7d14\u306b map \u3067 Observable<Integer> \u306b\u5909\u63db\u3057\u3066\u3084\u308a\u307e\u3059\u3002\u3059\u308b\u3068\u3053\u308c\u306f Observable<Observable<Integer>> \u306b\u306a\u308a\u3001concat \u53ef\u80fd\u306b\u306a\u308a\u307e\u3059\u3002 flatMap \u3060\u3068\u5e73\u5766\u5316\u3055\u308c\u3061\u3083\u3046\u306e\u3067\u305f\u3060\u306e map \u3067\u3059\u3002\n\n\u307e\u3068\u3081\nObservable \u306f\u666e\u901a\u306f\u975e\u540c\u671f\u3067\u4e26\u5217\u51e6\u7406\u3002\n\u975e\u540c\u671f\u306a\u304c\u3089\u76f4\u5217\u5316\u3057\u305f\u3044\u5834\u5408\u306f Observable.concat \u3067\u3067\u304d\u307e\u3059\u3002\n\nGPS \u304b\u3089\u7def\u5ea6\u7d4c\u5ea6\u3092\u53d6\u5f97\n\u306a\u3093\u304b\u91cd\u3044\u8a08\u7b97\u3092\u884c\u3046\n\u7d50\u679c\u3092\u30c6\u30ad\u30b9\u30c8\u30d5\u30a1\u30a4\u30eb\u306b\u66f8\u304d\u51fa\u3059\n\n\u307f\u305f\u3044\u306a\u51e6\u7406\u3092\u3059\u308b\u3068\u304d 3. \u3092 1. \u306e\u9806\u5e8f\u3068\u540c\u3058\u306b\u3057\u305f\u3044\u306e\u3067\u3053\u308c\u3092\u4f7f\u3044\u307e\u3059\u3002\n\u306f\u3058\u3081\u81ea\u5206\u306f flatMap \u3067\u7e4b\u3044\u3067\u3044\u304f\u3060\u3051\u3067\u3059\u3079\u3066\u76f4\u5217\u5316\u3055\u308c\u3066\u3044\u308b\u306e\u304b\u306a\u30fc\u3068\u52d8\u9055\u3044\u3057\u3066\u3044\u305f\u306e\u3067\u3001\u3053\u308c\u3092\u77e5\u3063\u305f\u6642\u306f\u76ee\u304b\u3089\u30a6\u30ed\u30b3\u3067\u3057\u305f\u3002\n\n\u53c2\u8003\n\nIntro to Rx - Combining sequences\nReactiveX - Concat operator\nReactive Extensions\u518d\u5165\u9580 \u305d\u306e\uff14\uff11\u300c\u3069\u3093\u3069\u3093\u5408\u6210\u3059\u308b\u3088\u300d - \u304b\u305a\u304d\u306eBlog@hatena\n\nhttps://twitter.com/neuecc/status/695604984763650050 - @neuecc \u3055\u3093\u3042\u308a\u304c\u3068\u3046\u3054\u3056\u3044\u307e\u3059\uff01\n\n``rx.Observable<T>`` \u306e\u30aa\u30da\u30ec\u30fc\u30bf\u306f\u3001\u901a\u5e38\u306f\u975e\u540c\u671f\u3067\u3001\u4e26\u5217\u306b\u51e6\u7406\u3055\u308c\u307e\u3059\u3002\n\n\u4f8b\u3048\u3070\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u5834\u5408:\n\n```java:\npublic void start() {\n    Observable.range(1, 5)\n        .flatMap(x -> fatTask(x))\n        .subscribe(x -> Log.d(TAG, \"onNext - \" + x));\n}\n \nprivate final Random rand = new Random();\nprivate final ScheduledExecutorService executor = Executors.newScheduledThreadPool(5);\n\n// \u30e9\u30f3\u30c0\u30e0\u306b\u30b9\u30ea\u30fc\u30d7\u3057\u305f\u5f8c x \u3092 onNext \u3059\u308b\nprivate Observable<Integer> fatTask(final int x) {\n    return Observable.create(subscriber -> {\n        long sleep = (long) (rand.nextDouble() * 10000L);\n        Log.d(TAG, \"fatTask(\" + x + \") - start.\");\n\n        executor.schedule(() -> {\n            subscriber.onNext(x);\n            subscriber.onCompleted();\n        }, sleep, TimeUnit.MILLISECONDS);\n    });\n}\n```\n\n\u3053\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u306e\u51fa\u529b\u306f\u3053\u3046\u306a\u308a\u307e\u3059\u3002\n\n> \u51fa\u529b:\n> fatTask(1) - start.\nfatTask(2) - start.\nfatTask(3) - start.\nfatTask(4) - start.\nfatTask(5) - start.\nonNext - 3\nonNext - 5\nonNext - 4\nonNext - 2\nonNext - 1\n\nfatTask \u306f 1,2,3,4,5 \u306e\u9806\u3067 *\u5b8c\u4e86\u3092\u5f85\u305f\u305a\u306b* \u547c\u3073\u3060\u3055\u308c\u307e\u3059\u3002\n\u304c\u3001\u305d\u308c\u305e\u308c\u51e6\u7406\u306b\u304b\u304b\u308b\u6642\u9593\u304c\u7570\u306a\u308b\u306e\u3067\u3001 ``onNext`` \u304c\u547c\u3070\u308c\u308b\u9806\u306f 1\u301c \u3068\u306f\u9650\u308a\u307e\u305b\u3093\u3002\n\n\u30bd\u30fc\u30b9\u3068\u306a\u308b Stream \u306e\u9806\u756a\u3092\u5d29\u3057\u305f\u304f\u306a\u3044\u5834\u5408\u306f\u3001 ``fatTask(1)`` \u304c\u5b8c\u4e86\u3057\u3066\u304b\u3089 ``fatTask(2)`` \u3092\u958b\u59cb\u3059\u308b\u3001\u3068\u3044\u3046\u3088\u3046\u306b\u76f4\u5217\u5316\u3057\u306a\u3051\u308c\u3070\u306a\u308a\u307e\u305b\u3093\u3002\n\n## Observable.Concat(concatWith)\n\n\u3053\u308c\u3092\u884c\u3046\u306e\u304c ``Observable.Concat`` \u3067\u3059(RxJava \u3067\u306f ``Observable.concatWith`` \u306e\u3088\u3046\u3067\u3059\u306d)\u3002\n\u8907\u6570\u306e ``Observable`` \u3092\u9806\u306b\uff08\u5b8c\u4e86\u3057\u3066\u304b\u3089\u6b21\u3078\uff09\u51e6\u7406\u3057\u3066\u3044\u304d\u307e\u3059\u3002\n\n### \u4f7f\u3044\u65b9\n\n``toList`` \u3067\u4e00\u65e6\u305f\u3060\u306e ``List`` \u306b\u3057\u3066\u304b\u3089\u3001``concatWith`` \u3067\u6570\u73e0\u3064\u306a\u304e\u306b\u3057\u307e\u3059\u3002\n\n```java:\npublic void start() {\n    Observable.range(1, 5)\n        .toList()\n        .flatMap(list -> {\n            // fatTask(1).contat(fatTask(2)).contat(fatTask(3))... \n            // \u306b\u3059\u308b\uff08fold \u4f7f\u3048\u308c\u3070\u2026)\n            Observable<Integer> task = null;\n            for (int x : list) {\n                if (task == null) {\n                    task = fatTask(x);\n                } else {\n                    task = task.concatWith(fatTask(x));\n                }\n            }\n            return task;\n        })\n        .subscribe(x -> Log.d(TAG, \"onNext - \" + x));\n}\n```\n\n\u3053\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u306e\u51fa\u529b\u306f\u3053\u3046\u306a\u308a\u307e\u3059\u3002\n\n> \u51fa\u529b\nfatTask(1) - start.\nonNext - 1\nfatTask(2) - start.\nonNext - 2\nfatTask(3) - start.\nonNext - 3\nfatTask(4) - start.\nonNext - 4\nfatTask(5) - start.\nonNext - 5\n\n``fatTask(1)`` \u306e\u5b8c\u4e86\u3092\u5f85\u3063\u3066\u304b\u3089\u3001\u6b21\u306e ``fatTask(2)`` \u304c\u5b9f\u884c\u3055\u308c\u3066\u3044\u307e\u3059\u3002\n\n\u203b\nRx.NET \u3067\u306f\u3001 \n\n```csharp:\nstatic IObservable<T> Concat<T>(IEnumerable<IObservable<T>> sources)\n```\n \n\u3067\u3001\u8907\u6570\u306e ``IObservable`` \u3092\u4e00\u62ec\u3067\u6e21\u305b\u308b\u306e\u3067\u3059\u304c\u3001 RxJava \u306b\u306f\u306a\u3044\u3088\u3046\u3067\u3001\u3001\u3001\u3002\n\n```java:\nstatic <T> Observable<T> concatEager(Iterable<? extends Observable<? extends T>> sources)\n``` \n\n\u3068\u3044\u3046\u306e\u304c\u3042\u3063\u305f\u3093\u3067\u3059\u304c\u3001\u671f\u5f85\u901a\u308a\u3046\u3054\u3044\u3066\u304f\u308c\u305a\u3001 Eager? \u306a\u3093\u3067\u3057\u3087\u3046\uff1f\n\n## \u30bd\u30fc\u30b9\u304c\u7121\u9650\u30ea\u30b9\u30c8\u3060\u3063\u305f\u3089\uff1f\n\n``toList`` \u3067\u4e00\u65e6\u305f\u3060\u306e List \u306b\u3057\u3066\u3044\u308b\u306e\u304c\u975e\u5e38\u306b\u6c17\u306b\u5165\u3089\u306a\u3044\u3067\u3059\u306d\u3002\n``range(1, 5)`` \u304c ``interval(1, TimeUnit.SECONDS)`` \u306e\u3088\u3046\u306b\u7121\u9650\u306e Stream \u3060\u3063\u305f\u3089\u4f7f\u3048\u307e\u305b\u3093\u3002\n\n\u305d\u3053\u3067\u3001 ``concat`` \u306b\u306f\u3001\u3053\u3093\u306a overload \u3082\u3042\u308a\u307e\u3059\u3002\n\n```java:\nstatic <T> Observable<T> concat(Observable<? extends Observable<? extends T>> observables)\n```\n\nObservable<T> \u3092\u901a\u77e5\u3059\u308b Observable\uff1f \u3084\u3084\u3053\u3057\u3044\u3067\u3059\u304c\u3053\u3046\u4f7f\u3044\u307e\u3059\u3002\n\n```java:\npublic void start() {\n    // 2. \u3092 concat \u3059\u308b\n    Observable.concat( \n        // 1. Observable<Long>\n        Observable.interval(1, TimeUnit.SECONDS) \n            // 2. Long \u3092 Observable<Integer> \u306b\u5909\u63db \n            //    \u2192 Observable<Observable<Integer>> \u306b\u306a\u308b\n            .map(x -> fatTask(x.intValue()))) \n        .subscribe(x -> Log.d(TAG, \"onNext - \" + x));\n}\n```\n\n\u3053\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u306e\u51fa\u529b\u306f\u3053\u3046\u306a\u308a\u307e\u3059\u3002\n\n> \u51fa\u529b\nfatTask(0) - start.\nonNext - 0\nfatTask(1) - start.\nonNext - 1\nfatTask(2) - start.\nonNext - 2\n\u2026\u3064\u3065\u304f\n\n\u7121\u9650\u30ea\u30b9\u30c8\u306a\u304c\u3089\u3001\u4e26\u5217\u51e6\u7406\u305b\u305a\u306b\u9806\u5e8f\u901a\u308a\u52d5\u3044\u3066\u304f\u308c\u307e\u3059\u3002\n\n``interval`` \u306e\u5024\u3092\u5358\u7d14\u306b ``map`` \u3067 ``Observable<Integer>`` \u306b\u5909\u63db\u3057\u3066\u3084\u308a\u307e\u3059\u3002\u3059\u308b\u3068\u3053\u308c\u306f ``Observable<Observable<Integer>>`` \u306b\u306a\u308a\u3001``concat`` \u53ef\u80fd\u306b\u306a\u308a\u307e\u3059\u3002 ``flatMap`` \u3060\u3068\u5e73\u5766\u5316\u3055\u308c\u3061\u3083\u3046\u306e\u3067\u305f\u3060\u306e ``map`` \u3067\u3059\u3002\n\n## \u307e\u3068\u3081\n\nObservable \u306f\u666e\u901a\u306f\u975e\u540c\u671f\u3067\u4e26\u5217\u51e6\u7406\u3002\n\u975e\u540c\u671f\u306a\u304c\u3089\u76f4\u5217\u5316\u3057\u305f\u3044\u5834\u5408\u306f ``Observable.concat`` \u3067\u3067\u304d\u307e\u3059\u3002\n\n1. GPS \u304b\u3089\u7def\u5ea6\u7d4c\u5ea6\u3092\u53d6\u5f97\n2. \u306a\u3093\u304b\u91cd\u3044\u8a08\u7b97\u3092\u884c\u3046\n3. \u7d50\u679c\u3092\u30c6\u30ad\u30b9\u30c8\u30d5\u30a1\u30a4\u30eb\u306b\u66f8\u304d\u51fa\u3059\n\n\u307f\u305f\u3044\u306a\u51e6\u7406\u3092\u3059\u308b\u3068\u304d 3. \u3092 1. \u306e\u9806\u5e8f\u3068\u540c\u3058\u306b\u3057\u305f\u3044\u306e\u3067\u3053\u308c\u3092\u4f7f\u3044\u307e\u3059\u3002\n\n\u306f\u3058\u3081\u81ea\u5206\u306f ``flatMap`` \u3067\u7e4b\u3044\u3067\u3044\u304f\u3060\u3051\u3067\u3059\u3079\u3066\u76f4\u5217\u5316\u3055\u308c\u3066\u3044\u308b\u306e\u304b\u306a\u30fc\u3068\u52d8\u9055\u3044\u3057\u3066\u3044\u305f\u306e\u3067\u3001\u3053\u308c\u3092\u77e5\u3063\u305f\u6642\u306f\u76ee\u304b\u3089\u30a6\u30ed\u30b3\u3067\u3057\u305f\u3002\n\n## \u53c2\u8003\n\n* [Intro to Rx - Combining sequences](http://www.introtorx.com/content/v1.0.10621.0/12_CombiningSequences.html)\n* [ReactiveX - Concat operator](http://reactivex.io/documentation/operators/concat.html)\n* [Reactive Extensions\u518d\u5165\u9580 \u305d\u306e\uff14\uff11\u300c\u3069\u3093\u3069\u3093\u5408\u6210\u3059\u308b\u3088\u300d - \u304b\u305a\u304d\u306eBlog@hatena](http://blog.okazuki.jp/entry/20120219/1329663635)\n* https://twitter.com/neuecc/status/695604984763650050 - @neuecc \u3055\u3093\u3042\u308a\u304c\u3068\u3046\u3054\u3056\u3044\u307e\u3059\uff01\n", "tags": ["RxJava", "Java"]}