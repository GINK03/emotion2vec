{"context": "\n\n\u306f\u3058\u3081\u306b\n\u4ee5\u524d\u3001\u300cPylearn2\u3067\u4e09\u76ee\u4e26\u3079\u306eAI\u3092\u3064\u304f\u3063\u3066\u307f\u308b\u300d\u3068\u3044\u3046\u8a18\u4e8b\u3092\u66f8\u304d\u307e\u3057\u305f\u3002\n\u3053\u306e\u3068\u304d\u306f\u554f\u984c\u3092\u7c21\u5358\u306b\u3057\u3066\u4e09\u76ee\u4e26\u3079\u306b\u3057\u307e\u3057\u305f\u304c\u3001\u4eca\u56de\u306f\u30aa\u30bb\u30ed\u306eAI\u3092\u30cb\u30e5\u30fc\u30e9\u30eb\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u3067\u4f5c\u6210\u3059\u308b\u3068\u3044\u3046\u5f53\u521d\u306e\u76ee\u6a19\u306b\u30c1\u30e3\u30ec\u30f3\u30b8\u3057\u307e\u3059\u3002\n\u30c8\u30e9\u30a4\uff06\u30a8\u30e9\u30fc\u304c\u591a\u3044\u8a18\u4e8b\u306b\u306a\u308b\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u304c\u3054\u5bb9\u8d66\u304f\u3060\u3055\u3044\u3002\n\u4eca\u56de\u306fDeep Learning\u7528\u30e9\u30a4\u30d6\u30e9\u30ea\u3068\u3057\u3066Chainer\u3092\u4f7f\u3063\u3066\u307f\u307e\u3059\u3002\n\u8a18\u4e8b\u306f2\u90e8\u69cb\u6210\u3067\u3059\u3002\n\n\u524d\u7de8(\u3053\u306e\u8a18\u4e8b)\n\n\n\u6559\u5e2b\u30c7\u30fc\u30bf\u306e\u5909\u63db\nMLP\u306e\u8a2d\u8a08\n\u30e2\u30c7\u30eb\u306e\u30c8\u30ec\u30fc\u30cb\u30f3\u30b0\u3068\u4fdd\u5b58\n\n\n\n\u5f8c\u7de8\n\n\u30aa\u30bb\u30ed\u30b2\u30fc\u30e0\u3078\u306e\u5b9f\u88c5\n\u30d7\u30ec\u30a4\u30a2\u30d6\u30eb\u304b\u3069\u3046\u304b\u306e\u78ba\u8a8d\uff08\u30eb\u30fc\u30eb\u3092\u9038\u8131\u305b\u305a\u306b\u30b2\u30fc\u30e0\u3067\u304d\u308b\u304b\uff09\n\n\n\u3053\u3053\u3067\u30d7\u30ec\u30a4\u30a2\u30d6\u30eb\u3067\u306a\u3044\u3068\u5206\u304b\u3063\u305f\u3089\u3001MLP\u30e2\u30c7\u30eb\u306e\u4f5c\u6210\u306b\u623b\u308b\n\n\n\n\n\n\u5f8c\u7de8\u3067AI\u306e\u5b9f\u88c5\u3092\u884c\u3044\u307e\u3059\u304c\u3001\u4e0a\u624b\u304f\u3044\u304b\u306a\u3051\u308c\u3070\u3001\u30cb\u30e5\u30fc\u30e9\u30eb\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u306e\u69cb\u6210\u304b\u3089\u8003\u3048\u76f4\u3059\u3053\u3068\u306b\u306a\u308a\u307e\u3059...\n\u2192\u52d5\u4f5c\u78ba\u8a8d\u3068\u7d50\u8ad6\u304c\u51fa\u307e\u3057\u305f\n\n\u6559\u5e2b\u30c7\u30fc\u30bf\u306e\u6e96\u5099\n\u3053\u3061\u3089\u304b\u3089\u68cb\u8b5c\u30c7\u30fc\u30bf\u3092\u62dd\u501f\u3055\u305b\u3066\u3044\u305f\u3060\u304d\u307e\u3057\u305f\u3002\nggf\u5f62\u5f0f\u3067\u4fdd\u5b58\u3055\u308c\u3066\u3044\u308b\u5927\u91cf\u306e\u5bfe\u6226\u30c7\u30fc\u30bf\u3067\u3059\u3002\n\u30c6\u30ad\u30b9\u30c8\u5f62\u5f0f\u3067\u53ef\u8aad\u6027\u304c\u3042\u308a\u307e\u3059\u3002\n\nMLP\u306e\u8a2d\u8a08\n\u307e\u305a\u306f\u3001\u5165\u529b\u3068\u51fa\u529b\u3092\u6c7a\u3081\u307e\u3059\u3002\n\u30aa\u30bb\u30ed\u306eAI\u3092\u4f5c\u6210\u3059\u308b\u306e\u3067\u3001\u5165\u529b\u3092\u76e4\u9762\u306e\u72b6\u614b\u3068\u3057\u3001\u305d\u306e\u6b21\u306e\u4e00\u624b\u3092\u51fa\u529b\u3068\u3057\u307e\u3059\u3002\n\u56f3\u3067\u66f8\u304f\u3068\u4ee5\u4e0b\u306e\u30a4\u30e1\u30fc\u30b8\u3067\u3059\u3002\n\n\u5177\u4f53\u7684\u306b\u30cb\u30e5\u30fc\u30e9\u30eb\u30cd\u30c3\u30c8\u306b\u843d\u3068\u3057\u8fbc\u307f\u307e\u3059\u3002\n\u5165\u529b\u306f\u76e4\u9762\u306e\u72b6\u614b\u3001\u3064\u307e\u308a 8 x 8 \u306e\u30d9\u30af\u30c8\u30eb\u3068\u3057\u307e\u3059\u3002\n\u30d9\u30af\u30c8\u30eb\u306e\u8981\u7d20\u306f\u3001'0' : \u306a\u3057\u3001'1' : \u9ed2\u3001'2' : \u767d\u3068\u3057\u307e\u3059\u3002\n\u51fa\u529b\u306f\u76e4\u9762\u306e\u3069\u3053\u306b\u6b21\u306e\u4e00\u624b\u3092\u6253\u3064\u304b\u3001\u3067\u30af\u30e9\u30b9\u5206\u3051\u3059\u308b\u306e\u306764\u901a\u308a\u306a\u306e\u3067\u3059\u304c\u3001\u53d6\u308a\u3046\u308b\u5834\u5408\u3068\u3057\u3066\u306fPass\u3092\u3059\u308b\u5834\u5408\u3082\u3042\u308a\u307e\u3059\u306e\u3067\u3001\u5168\u90e8\u306765\u901a\u308a\u306b\u30af\u30e9\u30b9\u5206\u3051\u3059\u308b\u3053\u3068\u306b\u306a\u308a\u307e\u3059\u3002\n0\uff5e63\u3067\u76e4\u9762\u4f4d\u7f6e\u3092\u8868\u3057\u3001Pass\u309264\u3068\u3057\u307e\u3059\u3002\n\n\u3042\u3068\u306f\u96a0\u308c\u5c64\u306e\u8a2d\u8a08\u3067\u3059\u3002\n\u3068\u308a\u3042\u3048\u305a\u30012\u5c64\u3001\u3068\u3082\u306b\u30cb\u30e5\u30fc\u30ed\u30f3\u6570100\u3068\u3057\u3066\u3044\u307e\u3059\u3002\n\u3053\u3053\u306e\u8a2d\u8a08\u3092\u7406\u8ad6\u7684\u306b\u3084\u308b\u306b\u306f\u3069\u3046\u3059\u308c\u3070\u3044\u3044\u306e\u304b...\n\u56f3\u306b\u8868\u3059\u3068\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002\n\n\n\u5b9f\u88c5\n\u4ee5\u4e0b\u3092\u884c\u3046python\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u793a\u3057\u307e\u3059\u3002\n\n\u6559\u5e2b\u30c7\u30fc\u30bf\u306e\u8aad\u307f\u8fbc\u307f\u3068\u5909\u63db\nChainer\u306b\u3088\u308bMLP\u30e2\u30c7\u30eb\u4f5c\u6210\u3068\u4fdd\u5b58\u3001\u30c8\u30ec\u30fc\u30cb\u30f3\u30b0\n\u7c21\u5358\u306a\u30c6\u30b9\u30c8\n\n\nbuild_mlp.py\n#!/usr/bin/env python\n# coding=utf-8\n# \n# 0 : none\n# 1 : black\n# 2 : white\n# \n\nimport sys\nimport numpy as np\nimport chainer\nfrom chainer import cuda, Function, gradient_check, report, training, utils, Variable\nfrom chainer import datasets, iterators, optimizers, serializers\nfrom chainer import Link, Chain, ChainList\nimport chainer.functions as F\nimport chainer.links as L\nfrom chainer.training import extensions\n\ngVec = [(-1,-1),(-1,0),(-1,1),(0,-1),(0,1),(1,-1),(1,0),(1,1)]\ngCol = ('A','B','C','D','E','F','G','H')\ngRow = ('1','2','3','4','5','6','7','8')\n\n# (1)\nclass MLP(Chain):\n    def __init__(self):\n        super(MLP, self).__init__(\n                l1=L.Linear(64, 100),\n                l2=L.Linear(100, 100),\n                l3=L.Linear(100, 65),\n        )\n\n    def __call__(self, x):\n        h1 = F.relu(self.l1(x))\n        h2 = F.relu(self.l2(h1))\n        y = self.l3(h2)\n        return y\n\nclass Classifier(Chain):\n    def __init__(self, predictor):\n        super(Classifier, self).__init__(predictor=predictor)\n\n    def __call__(self, x, t):\n        y = self.predictor(x)\n        loss = F.softmax_cross_entropy(y, t)\n        accuracy = F.accuracy(y, t)\n        report({'loss': loss, 'accuracy': accuracy}, self)\n        return loss\n\n\ndef print_board(board):\n    for i in range(8):\n        print board[i]\n\n    print \"\"\n\ndef update_board(board, pos_str, clr):\n    assert clr!=0, \"stone color is not black or white.\"\n    updated_board = [[0 for col in range(8)] for row in range(8)]\n    rev_list = []\n    pos = pos_str2pos_index(pos_str)\n    for v in gVec:\n        temp_list = []\n        for i in range(1, 8):\n            # out of board\n            if pos[0]+v[0]*(i+1) > 7 or pos[1]+v[1]*(i+1) > 7 or\\\n               pos[0]+v[0]*(i+1) < 0 or pos[1]+v[1]*(i+1) < 0:\n                continue\n\n            if board[pos[0]+v[0]*i][pos[1]+v[1]*i] == (clr % 2 + 1):\n                temp_list.append([pos[0]+v[0]*i, pos[1]+v[1]*i])\n\n                if board[pos[0]+v[0]*(i+1)][pos[1]+v[1]*(i+1)] == clr:\n                    for j in temp_list:\n                        rev_list.append(j)\n\n                    break\n            else:\n                break\n\n    rev_list.append(pos)  # put stone at pos\n    assert board[pos[0]][pos[1]] == 0, \"put position is not empty.\"\n    print \"rev_list = \" + str(rev_list)\n    for i in range(0, 8):\n        for j in range(0, 8):\n            if [i, j] in rev_list:\n                updated_board[i][j] = clr\n            else:\n                updated_board[i][j] = board[i][j]\n\n    return updated_board\n\ndef who_is_winner(board):\n    # ret : 0  draw\n    #       1  black win\n    #       2  white win\n    ret = 0\n    score_b = 0\n    score_w = 0\n    for i in range(0, 8):\n        for j in range(0, 8):\n            if board[i][j] == 1:\n                score_b += 1\n            elif board[i][j] == 2:\n                score_w += 1\n\n    if score_b > score_w:\n        ret = 1\n    elif score_b < score_w:\n        ret = 2\n\n    print \"Black vs White : \" + str(score_b) + \" vs \" + str(score_w)\n    return ret\n\ndef pos_str2pos_index(pos_str):\n    pos_index = []\n    for i, c in enumerate(gRow):\n        if pos_str[1] == c:\n            pos_index.append(i)\n\n    for i, c in enumerate(gCol):\n        if pos_str[0] == c:\n            pos_index.append(i)\n\n\n    return pos_index\n\ndef pos_str2pos_index_flat(pos_str):\n    pos_index = pos_str2pos_index(pos_str)\n    index = pos_index[0] * 8 + pos_index[1]\n    return index\n\n\n#==== Main ====#\nrecord_X = []    # MLP input (board list)\nrecord_y = []    # MLP output(class(0-64) list)\ntemp_X = []\ntemp_y = []\ntemp2_X = []\ntemp2_y = []\nboard = []\nrow = []\n\nargv = sys.argv\nargc = len(argv)\n\nif argc != 3:\n    print 'Usage'\n    print '    python ' + str(argv[0]) + ' <record_filename> <type>'\n    print '        type : black'\n    print '               black_win'\n    print '               white'\n    print '               white_win'\n    quit()\n\n# check type\nbuild_type = ''\nfor t in ['black', 'black_win', 'white', 'white_win']:\n    if argv[2] == t:\n        build_type = t\n\nif build_type == '':\n    print 'record type is illegal.'\n    quit()\n\n#(2)-- load record --#\nf = open(argv[1], \"r\")\nline_cnt = 1\nfor line in f:\n    print 'Line Count = ' + str(line_cnt)\n    idx = line.find(\"BO[8\")\n    if idx == -1:\n        continue\n\n    idx += 5\n    # make board initial state\n    for i in range(idx, idx+9*8):\n        if line[i] == '-':\n            row.append(0)\n        elif line[i] == 'O':\n            row.append(2)\n        elif line[i] == '*':\n            row.append(1)\n\n        if (i-idx)%9 == 8:\n            board.append(row)\n            row = []\n            if len(board) == 8:\n                break\n\n    row = []\n    print_board(board)\n    # record progress of game\n    i = idx+9*8+2\n    while line[i] != ';':\n        if (line[i] == 'B' or line[i] == 'W') and line[i+1] == '[':\n            temp_X.append(board)\n            pos_str = line[i+2] + line[i+3]\n            if pos_str == \"pa\":    # pass\n                temp_y.append(64)\n                # board state is not change\n                print_board(board)\n            else:\n                if line[i] == 'B':\n                    clr = 1\n                elif line[i] == 'W':\n                    clr = 2\n                else:\n                    clr = 0\n                    assert False, \"Stone Color is illegal.\"\n\n                pos_index_flat = pos_str2pos_index_flat(pos_str)\n                temp_y.append(pos_index_flat)\n                board = update_board(board, pos_str, clr)\n\n            if (line[i] == 'B' and (build_type == 'black' or build_type == 'black_win')) or \\\n               (line[i] == 'W' and (build_type == 'white' or build_type == 'white_win')):\n                temp2_X.append(temp_X[0])\n                temp2_y.append(temp_y[0])\n                print 'X = '\n                print_board(temp_X[0])\n                print 'y = ' + str(temp_y[0]) + ' (' + \\\n                               str(pos_str2pos_index(pos_str)) + ') ' + \\\n                               '(' + pos_str + ')'\n                print ''\n\n            temp_X = []\n            temp_y = []\n\n        i += 1\n\n    print \"End of game\"\n    print_board(board)\n\n    winner = who_is_winner(board)\n    if (winner == 1 and build_type == 'black_win') or \\\n       (winner == 2 and build_type == 'white_win') or \\\n       build_type == 'black' or build_type == 'white':\n        record_X.extend(temp2_X)\n        record_y.extend(temp2_y)\n\n    board = []\n    temp2_X = []\n    temp2_y = []\n    line_cnt += 1\n\n\n#(3)-- MLP model and Training --#\nX = np.array(record_X, dtype=np.float32)\ny = np.array(record_y, dtype=np.int32)\n\ntrain = datasets.TupleDataset(X, y)\ntrain_iter = iterators.SerialIterator(train, batch_size=100)\n\nmodel = Classifier(MLP())\noptimizer = optimizers.SGD()\noptimizer.setup(model)\n\nupdater = training.StandardUpdater(train_iter, optimizer)\ntrainer = training.Trainer(updater, (1000, 'epoch'), out='result')\n\ntrainer.extend(extensions.ProgressBar())\ntrainer.run()\n\n#(4)-- save model --#\nserializers.save_npz('reversi_model.npz', model)\n\n\n#(5)-- prediction example --#\nX1_ = [[[0,0,0,0,0,0,0,0],\\\n        [0,0,0,0,0,0,0,0],\\\n        [0,0,0,0,0,0,0,0],\\\n        [0,0,0,2,1,0,0,0],\\\n        [0,0,0,1,2,0,0,0],\\\n        [0,0,0,0,0,0,0,0],\\\n        [0,0,0,0,0,0,0,0],\\\n        [0,0,0,0,0,0,0,0]]]\n\nX1 = np.array(X1_, dtype=np.float32)\ny1 = F.softmax(model.predictor(X1))\nprint \"X1 = \"\nprint_board(X1[0])\nprint \"y1 = \" + str(y1.data.argmax(1)) + '\\n' \n\nX2_ = [[[0,0,0,0,0,0,0,0],\\\n        [0,0,0,0,0,0,0,0],\\\n        [0,0,2,2,2,0,0,0],\\\n        [0,0,2,1,1,1,0,0],\\\n        [0,2,2,2,1,1,0,0],\\\n        [0,0,2,1,0,0,0,0],\\\n        [0,0,0,0,0,0,0,0],\\\n        [0,0,0,0,0,0,0,0]]]\n\nX2 = np.array(X2_, dtype=np.float32)\ny2 = F.softmax(model.predictor(X2))\nprint \"X2 = \"\nprint_board(X2[0])\nprint \"y2 = \" + str(y2.data.argmax(1)) + '\\n'\n\n\n\u7c21\u5358\u306b\u89e3\u8aac\u3057\u3066\u3044\u304d\u307e\u3059\u3002\u30b3\u30fc\u30c9\u5185\u306e(1)\uff5e(5)\u3068\u5bfe\u5fdc\u3055\u305b\u3066\u8aad\u3093\u3067\u304f\u3060\u3055\u3044\u3002\n(1) Chainer\u306eMLP\u5b9a\u7fa9\nMLP\u30af\u30e9\u30b9\u3067MLP\u306e\u69cb\u9020\u3092\u5b9a\u7fa9\u3057\u307e\u3059\u3002\u524d\u8ff0\u306e\u3068\u304a\u308a\u3001\u5165\u529b=8x8=64\u3001\u51fa\u529b=65\u3001\u96a0\u308c\u5c642\u5c64(\u30cb\u30e5\u30fc\u30ed\u30f3\u6570100)\u3067\u5b9a\u7fa9\u3057\u3066\u3044\u307e\u3059\u3002\n\u6d3b\u6027\u5316\u95a2\u6570\u3068\u5c64\u69cb\u9020\u306f _call_ \u5185\u3067\u5b9a\u7fa9\u3057\u3066\u3044\u307e\u3059\u3002\nClassifier\u30af\u30e9\u30b9\u3067Softmax\u3067\u306e\u30af\u30e9\u30b9\u5206\u3051\u3092\u5b9a\u7fa9\u3057\u3066\u3044\u307e\u3059\u3002\n(2) \u68cb\u8b5c\u306e\u8aad\u307f\u8fbc\u307f\u3068\u5909\u63db\n\u9577\u3044\u30eb\u30fc\u30d7\u3067\u3059\u304c\u3001\u68cb\u8b5c\u306e\u8aad\u307f\u8fbc\u307f\u3068\u3001\u305d\u308c\u3092\u5165\u529b(8x8)\u3068\u51fa\u529b(0\uff5e64)\u306b\u5909\u63db\u3057\u3066\u3044\u307e\u3059\u3002\n\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u306e\u4f55\u304c\u5927\u5909\u3063\u3066\u3053\u3053\u304c\u4e00\u756a\u5927\u5909\u3067\u3057\u305f...\n(3) MLP\u30e2\u30c7\u30eb\u306e\u30c8\u30ec\u30fc\u30cb\u30f3\u30b0\n\u5909\u63db\u3057\u305f\u68cb\u8b5c\u3092\u30e2\u30c7\u30eb\u306b\u5165\u529b\u3057\u3066\u30c8\u30ec\u30fc\u30cb\u30f3\u30b0\u3057\u307e\u3059\u3002\n\u5165\u529b\u3001\u51fa\u529b\u3068\u3082\u306bNumpy\u306earray\u5f62\u5f0f\u306b\u3057\u3066\u3001dataset.TupleDataset \u3067\u8a2d\u5b9a\u3067\u304d\u307e\u3059\u3002\n\u3053\u306e\u969b\u3001\u578b\u306b\u6ce8\u610f\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n\u3042\u3068\u306f\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u306e\u3088\u3046\u306b\n\nbatch_size\u306e\u8a2d\u5b9a\n\u6700\u9069\u5316\u65b9\u6cd5(\u4eca\u56de\u306fSGD)\u306e\u8a2d\u5b9a\n\u5b9f\u884c\u56de\u6570(epoch)\u306e\u8a2d\u5b9a\n\n\u3092\u884c\u3044\u307e\u3059\u3002\ntrainer.run \u3067\u30c8\u30ec\u30fc\u30cb\u30f3\u30b0\u5b9f\u884c\u3067\u3059\u3002\n(4) \u30e2\u30c7\u30eb\u306e\u4fdd\u5b58\n\u30c8\u30ec\u30fc\u30cb\u30f3\u30b0\u6e08\u307f\u306e\u30e2\u30c7\u30eb\u3092\u4fdd\u5b58\u3057\u307e\u3059\u3002NPZ\u5f62\u5f0f\u3067\u3059\u3002\n\u5f8c\u7de8\u3067\u30aa\u30bb\u30ed\u30b2\u30fc\u30e0\u306b\u30a4\u30f3\u30d7\u30ea\u3059\u308b\u3068\u304d\u306b\u4f7f\u7528\u3057\u307e\u3059\u3002\n(5) \u7c21\u5358\u306a\u30c6\u30b9\u30c8\n\u30c8\u30ec\u30fc\u30cb\u30f3\u30b0\u6e08\u307f\u306e\u30e2\u30c7\u30eb\u3067\u6b63\u3057\u304f\u6b21\u306e\u4e00\u624b\u3092\u5c0e\u51fa\u3067\u304d\u308b\u304b\u3092\u8a66\u3057\u307e\u3059\u3002\n\u5b9f\u884c\u7d50\u679c\u306e\u4f8b\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002\n\u6559\u5e2b\u30c7\u30fc\u30bf\u3068\u3057\u3066'Othello.01e4.ggf'\u3092\u4f7f\u7528\u3057\u3001\u5148\u624b(\u9ed2)\u306e\u52dd\u5229\u3057\u305f\u30c7\u30fc\u30bf\u3060\u3051\u3067AI\u306e\u4f5c\u6210\u3092\u884c\u3063\u3066\u3044\u307e\u3059\u3002\n$ python build_mlp.py Othello.01e4.ggf black_win\n...\n\nX1 = \n[ 0.  0.  0.  0.  0.  0.  0.  0.]\n[ 0.  0.  0.  0.  0.  0.  0.  0.]\n[ 0.  0.  0.  0.  0.  0.  0.  0.]\n[ 0.  0.  0.  2.  1.  0.  0.  0.]\n[ 0.  0.  0.  1.  2.  0.  0.  0.]\n[ 0.  0.  0.  0.  0.  0.  0.  0.]\n[ 0.  0.  0.  0.  0.  0.  0.  0.]\n[ 0.  0.  0.  0.  0.  0.  0.  0.]\n\ny1 = [37]\n\nX2 = \n[ 0.  0.  0.  0.  0.  0.  0.  0.]\n[ 0.  0.  0.  0.  0.  0.  0.  0.]\n[ 0.  0.  2.  2.  2.  0.  0.  0.]\n[ 0.  0.  2.  1.  1.  1.  0.  0.]\n[ 0.  2.  2.  2.  1.  1.  0.  0.]\n[ 0.  0.  2.  1.  0.  0.  0.  0.]\n[ 0.  0.  0.  0.  0.  0.  0.  0.]\n[ 0.  0.  0.  0.  0.  0.  0.  0.]\n\ny2 = [25]\n\n\n\u30c8\u30ec\u30fc\u30cb\u30f3\u30b0\u306bGPU\u306f\u4f7f\u7528\u3057\u306a\u3044\u3088\u3046\u306b\u66f8\u3044\u3066\u3044\u307e\u3059\u3002\n\u5b9f\u884c\u3059\u308b\u3068\u8ca7\u5f31\u306aPC\u3060\u30681\u6642\u9593\u304f\u3089\u3044\u304b\u304b\u308b\u3068\u601d\u3044\u307e\u3059\u3002\nChainer\u306e\u6a5f\u80fd\u3067Progress Bar\u304c\u8868\u793a\u3055\u308c\u308b\u3088\u3046\u306b\u3057\u3066\u3044\u307e\u3059\u306e\u3067\u3001\u3054\u81ea\u8eab\u306e\u74b0\u5883\u3067\u884c\u3046\u5834\u5408\u306b\u306f\u307e\u3068\u3082\u306a\u6642\u9593\u3067\u5b8c\u4e86\u3059\u308b\u306e\u304b\u3069\u3046\u304b\u306e\u53c2\u8003\u306b\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n\u307e\u305f\u3001\u4f8b\u3067\u306f Othello.01e4.ggf \u3092\u4f7f\u7528\u3057\u3066\u3044\u307e\u3059\u304c\u3001\u60f3\u5b9a\u30d5\u30a9\u30fc\u30de\u30c3\u30c8\u3092\u9038\u8131\u3057\u3066\u3044\u308b\u30c7\u30fc\u30bf\u304c2\u4ef6(85\u884c\u76ee\u30012699\u884c\u76ee)\u3042\u3063\u305f\u306e\u3067\u3001\u524a\u9664\u3057\u3066\u5b9f\u884c\u3057\u307e\u3057\u305f\u3002\n\u7d50\u679c\u306b\u8868\u793a\u3055\u308c\u3066\u3044\u308bprediction example\u3092\u898b\u308b\u3068\u3001AI\u306f\u6b21\u306e\u3088\u3046\u306b\u6253\u3064\u3068\u5206\u304b\u308a\u307e\u3059\u3002\n\n2\u901a\u308a\u3060\u3051\u3067\u3059\u304c\u3001\u7c21\u5358\u306a\u30c6\u30b9\u30c8\u3067\u306f\u4e0a\u624b\u304f\u6b21\u306e\u4e00\u624b\u3092\u5c0e\u51fa\u3067\u304d\u3066\u3044\u308b\u3088\u3046\u3067\u3059\u3002\n\u5f8c\u7de8\u3067\u306f\u3001\u3053\u306e\u30c8\u30ec\u30fc\u30cb\u30f3\u30b0\u6e08\u307f\u306e\u30e2\u30c7\u30eb\u3092\u5b9f\u969b\u306b\u30aa\u30bb\u30ed\u30b2\u30fc\u30e0\u306bAI\u3068\u3057\u3066\u30a4\u30f3\u30d7\u30ea\u3057\u3066\u3001\u30aa\u30bb\u30ed\u306e\u52d5\u4f5c\u3092\u78ba\u8a8d\u3057\u307e\u3059\u3002\n\u2192\u52d5\u4f5c\u78ba\u8a8d\u3068\u7d50\u8ad6\u304c\u51fa\u307e\u3057\u305f\u3002\n\n\u53c2\u8003\n\n\nGGS data base / Othello : \u30aa\u30bb\u30ed\u68cb\u8b5c\u30c7\u30fc\u30bf\u53d6\u5f97\u5143\nchainer\u3067\u81ea\u7136\u8a00\u8a9e\u51e6\u7406\u3067\u304d\u308b\u304b\u30de\u30f3 - XOR\u306e\u5b66\u7fd2\nChainer Reference Manual\n\n# \u306f\u3058\u3081\u306b\n\u4ee5\u524d\u3001[\u300cPylearn2\u3067\u4e09\u76ee\u4e26\u3079\u306eAI\u3092\u3064\u304f\u3063\u3066\u307f\u308b\u300d](http://qiita.com/kanlkan/items/c8c537dbd55d38cb5084)\u3068\u3044\u3046\u8a18\u4e8b\u3092\u66f8\u304d\u307e\u3057\u305f\u3002\n\u3053\u306e\u3068\u304d\u306f\u554f\u984c\u3092\u7c21\u5358\u306b\u3057\u3066\u4e09\u76ee\u4e26\u3079\u306b\u3057\u307e\u3057\u305f\u304c\u3001\u4eca\u56de\u306f\u30aa\u30bb\u30ed\u306eAI\u3092\u30cb\u30e5\u30fc\u30e9\u30eb\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u3067\u4f5c\u6210\u3059\u308b\u3068\u3044\u3046\u5f53\u521d\u306e\u76ee\u6a19\u306b\u30c1\u30e3\u30ec\u30f3\u30b8\u3057\u307e\u3059\u3002\n\u30c8\u30e9\u30a4\uff06\u30a8\u30e9\u30fc\u304c\u591a\u3044\u8a18\u4e8b\u306b\u306a\u308b\u304b\u3082\u3057\u308c\u307e\u305b\u3093\u304c\u3054\u5bb9\u8d66\u304f\u3060\u3055\u3044\u3002\n\u4eca\u56de\u306fDeep Learning\u7528\u30e9\u30a4\u30d6\u30e9\u30ea\u3068\u3057\u3066[Chainer](http://docs.chainer.org/en/stable/index.html#)\u3092\u4f7f\u3063\u3066\u307f\u307e\u3059\u3002\n\n\u8a18\u4e8b\u306f2\u90e8\u69cb\u6210\u3067\u3059\u3002\n\n + \u524d\u7de8(\u3053\u306e\u8a18\u4e8b)\n    + \u6559\u5e2b\u30c7\u30fc\u30bf\u306e\u5909\u63db\n    + MLP\u306e\u8a2d\u8a08\n    + \u30e2\u30c7\u30eb\u306e\u30c8\u30ec\u30fc\u30cb\u30f3\u30b0\u3068\u4fdd\u5b58\n + [\u5f8c\u7de8](http://qiita.com/kanlkan/items/ce126272be2f7873e46d)\n    + \u30aa\u30bb\u30ed\u30b2\u30fc\u30e0\u3078\u306e\u5b9f\u88c5\n    + \u30d7\u30ec\u30a4\u30a2\u30d6\u30eb\u304b\u3069\u3046\u304b\u306e\u78ba\u8a8d\uff08\u30eb\u30fc\u30eb\u3092\u9038\u8131\u305b\u305a\u306b\u30b2\u30fc\u30e0\u3067\u304d\u308b\u304b\uff09\n       + \u3053\u3053\u3067\u30d7\u30ec\u30a4\u30a2\u30d6\u30eb\u3067\u306a\u3044\u3068\u5206\u304b\u3063\u305f\u3089\u3001MLP\u30e2\u30c7\u30eb\u306e\u4f5c\u6210\u306b\u623b\u308b\n\n\u5f8c\u7de8\u3067AI\u306e\u5b9f\u88c5\u3092\u884c\u3044\u307e\u3059\u304c\u3001\u4e0a\u624b\u304f\u3044\u304b\u306a\u3051\u308c\u3070\u3001\u30cb\u30e5\u30fc\u30e9\u30eb\u30cd\u30c3\u30c8\u30ef\u30fc\u30af\u306e\u69cb\u6210\u304b\u3089\u8003\u3048\u76f4\u3059\u3053\u3068\u306b\u306a\u308a\u307e\u3059...\n**\u2192[\u52d5\u4f5c\u78ba\u8a8d\u3068\u7d50\u8ad6\u304c\u51fa\u307e\u3057\u305f](http://qiita.com/kanlkan/items/ce126272be2f7873e46d)**\n\n# \u6559\u5e2b\u30c7\u30fc\u30bf\u306e\u6e96\u5099\n[\u3053\u3061\u3089](https://www.skatgame.net/mburo/ggs/game-archive/Othello/)\u304b\u3089\u68cb\u8b5c\u30c7\u30fc\u30bf\u3092\u62dd\u501f\u3055\u305b\u3066\u3044\u305f\u3060\u304d\u307e\u3057\u305f\u3002\nggf\u5f62\u5f0f\u3067\u4fdd\u5b58\u3055\u308c\u3066\u3044\u308b\u5927\u91cf\u306e\u5bfe\u6226\u30c7\u30fc\u30bf\u3067\u3059\u3002\n\u30c6\u30ad\u30b9\u30c8\u5f62\u5f0f\u3067\u53ef\u8aad\u6027\u304c\u3042\u308a\u307e\u3059\u3002\n\n# MLP\u306e\u8a2d\u8a08\n\u307e\u305a\u306f\u3001\u5165\u529b\u3068\u51fa\u529b\u3092\u6c7a\u3081\u307e\u3059\u3002\n\u30aa\u30bb\u30ed\u306eAI\u3092\u4f5c\u6210\u3059\u308b\u306e\u3067\u3001\u5165\u529b\u3092\u76e4\u9762\u306e\u72b6\u614b\u3068\u3057\u3001\u305d\u306e\u6b21\u306e\u4e00\u624b\u3092\u51fa\u529b\u3068\u3057\u307e\u3059\u3002\n\u56f3\u3067\u66f8\u304f\u3068\u4ee5\u4e0b\u306e\u30a4\u30e1\u30fc\u30b8\u3067\u3059\u3002\n![reversi-nn.png](https://qiita-image-store.s3.amazonaws.com/0/127380/70adc678-e717-1cea-8e5c-e4a6e6830a19.png)\n\n\u5177\u4f53\u7684\u306b\u30cb\u30e5\u30fc\u30e9\u30eb\u30cd\u30c3\u30c8\u306b\u843d\u3068\u3057\u8fbc\u307f\u307e\u3059\u3002\n\u5165\u529b\u306f\u76e4\u9762\u306e\u72b6\u614b\u3001\u3064\u307e\u308a 8 x 8 \u306e\u30d9\u30af\u30c8\u30eb\u3068\u3057\u307e\u3059\u3002\n\u30d9\u30af\u30c8\u30eb\u306e\u8981\u7d20\u306f\u3001'0' : \u306a\u3057\u3001'1' : \u9ed2\u3001'2' : \u767d\u3068\u3057\u307e\u3059\u3002\n\u51fa\u529b\u306f\u76e4\u9762\u306e\u3069\u3053\u306b\u6b21\u306e\u4e00\u624b\u3092\u6253\u3064\u304b\u3001\u3067\u30af\u30e9\u30b9\u5206\u3051\u3059\u308b\u306e\u306764\u901a\u308a\u306a\u306e\u3067\u3059\u304c\u3001\u53d6\u308a\u3046\u308b\u5834\u5408\u3068\u3057\u3066\u306fPass\u3092\u3059\u308b\u5834\u5408\u3082\u3042\u308a\u307e\u3059\u306e\u3067\u3001\u5168\u90e8\u306765\u901a\u308a\u306b\u30af\u30e9\u30b9\u5206\u3051\u3059\u308b\u3053\u3068\u306b\u306a\u308a\u307e\u3059\u3002\n0\uff5e63\u3067\u76e4\u9762\u4f4d\u7f6e\u3092\u8868\u3057\u3001Pass\u309264\u3068\u3057\u307e\u3059\u3002\n![board_num.png](https://qiita-image-store.s3.amazonaws.com/0/127380/8c058531-a04e-6b5b-be38-f0dbb9dbc00c.png)\n\n\u3042\u3068\u306f\u96a0\u308c\u5c64\u306e\u8a2d\u8a08\u3067\u3059\u3002\n\u3068\u308a\u3042\u3048\u305a\u30012\u5c64\u3001\u3068\u3082\u306b\u30cb\u30e5\u30fc\u30ed\u30f3\u6570100\u3068\u3057\u3066\u3044\u307e\u3059\u3002\n\u3053\u3053\u306e\u8a2d\u8a08\u3092\u7406\u8ad6\u7684\u306b\u3084\u308b\u306b\u306f\u3069\u3046\u3059\u308c\u3070\u3044\u3044\u306e\u304b...\n\u56f3\u306b\u8868\u3059\u3068\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002\n\n![reversi-nn_02.png](https://qiita-image-store.s3.amazonaws.com/0/127380/f03dbeb2-dcb1-f8fe-75ee-ef030be2b590.png)\n\n# \u5b9f\u88c5\n\u4ee5\u4e0b\u3092\u884c\u3046python\u306e\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u793a\u3057\u307e\u3059\u3002\n\n + \u6559\u5e2b\u30c7\u30fc\u30bf\u306e\u8aad\u307f\u8fbc\u307f\u3068\u5909\u63db\n + Chainer\u306b\u3088\u308bMLP\u30e2\u30c7\u30eb\u4f5c\u6210\u3068\u4fdd\u5b58\u3001\u30c8\u30ec\u30fc\u30cb\u30f3\u30b0\n + \u7c21\u5358\u306a\u30c6\u30b9\u30c8\n\n```py:build_mlp.py\n#!/usr/bin/env python\n# coding=utf-8\n# \n# 0 : none\n# 1 : black\n# 2 : white\n# \n\nimport sys\nimport numpy as np\nimport chainer\nfrom chainer import cuda, Function, gradient_check, report, training, utils, Variable\nfrom chainer import datasets, iterators, optimizers, serializers\nfrom chainer import Link, Chain, ChainList\nimport chainer.functions as F\nimport chainer.links as L\nfrom chainer.training import extensions\n\ngVec = [(-1,-1),(-1,0),(-1,1),(0,-1),(0,1),(1,-1),(1,0),(1,1)]\ngCol = ('A','B','C','D','E','F','G','H')\ngRow = ('1','2','3','4','5','6','7','8')\n\n# (1)\nclass MLP(Chain):\n    def __init__(self):\n        super(MLP, self).__init__(\n                l1=L.Linear(64, 100),\n                l2=L.Linear(100, 100),\n                l3=L.Linear(100, 65),\n        )\n\n    def __call__(self, x):\n        h1 = F.relu(self.l1(x))\n        h2 = F.relu(self.l2(h1))\n        y = self.l3(h2)\n        return y\n\nclass Classifier(Chain):\n    def __init__(self, predictor):\n        super(Classifier, self).__init__(predictor=predictor)\n\n    def __call__(self, x, t):\n        y = self.predictor(x)\n        loss = F.softmax_cross_entropy(y, t)\n        accuracy = F.accuracy(y, t)\n        report({'loss': loss, 'accuracy': accuracy}, self)\n        return loss\n\n\ndef print_board(board):\n    for i in range(8):\n        print board[i]\n\n    print \"\"\n\ndef update_board(board, pos_str, clr):\n    assert clr!=0, \"stone color is not black or white.\"\n    updated_board = [[0 for col in range(8)] for row in range(8)]\n    rev_list = []\n    pos = pos_str2pos_index(pos_str)\n    for v in gVec:\n        temp_list = []\n        for i in range(1, 8):\n            # out of board\n            if pos[0]+v[0]*(i+1) > 7 or pos[1]+v[1]*(i+1) > 7 or\\\n               pos[0]+v[0]*(i+1) < 0 or pos[1]+v[1]*(i+1) < 0:\n                continue\n\n            if board[pos[0]+v[0]*i][pos[1]+v[1]*i] == (clr % 2 + 1):\n                temp_list.append([pos[0]+v[0]*i, pos[1]+v[1]*i])\n\n                if board[pos[0]+v[0]*(i+1)][pos[1]+v[1]*(i+1)] == clr:\n                    for j in temp_list:\n                        rev_list.append(j)\n\n                    break\n            else:\n                break\n\n    rev_list.append(pos)  # put stone at pos\n    assert board[pos[0]][pos[1]] == 0, \"put position is not empty.\"\n    print \"rev_list = \" + str(rev_list)\n    for i in range(0, 8):\n        for j in range(0, 8):\n            if [i, j] in rev_list:\n                updated_board[i][j] = clr\n            else:\n                updated_board[i][j] = board[i][j]\n\n    return updated_board\n\ndef who_is_winner(board):\n    # ret : 0  draw\n    #       1  black win\n    #       2  white win\n    ret = 0\n    score_b = 0\n    score_w = 0\n    for i in range(0, 8):\n        for j in range(0, 8):\n            if board[i][j] == 1:\n                score_b += 1\n            elif board[i][j] == 2:\n                score_w += 1\n\n    if score_b > score_w:\n        ret = 1\n    elif score_b < score_w:\n        ret = 2\n\n    print \"Black vs White : \" + str(score_b) + \" vs \" + str(score_w)\n    return ret\n\ndef pos_str2pos_index(pos_str):\n    pos_index = []\n    for i, c in enumerate(gRow):\n        if pos_str[1] == c:\n            pos_index.append(i)\n    \n    for i, c in enumerate(gCol):\n        if pos_str[0] == c:\n            pos_index.append(i)\n\n\n    return pos_index\n\ndef pos_str2pos_index_flat(pos_str):\n    pos_index = pos_str2pos_index(pos_str)\n    index = pos_index[0] * 8 + pos_index[1]\n    return index\n\n\n#==== Main ====#\nrecord_X = []    # MLP input (board list)\nrecord_y = []    # MLP output(class(0-64) list)\ntemp_X = []\ntemp_y = []\ntemp2_X = []\ntemp2_y = []\nboard = []\nrow = []\n\nargv = sys.argv\nargc = len(argv)\n\nif argc != 3:\n    print 'Usage'\n    print '    python ' + str(argv[0]) + ' <record_filename> <type>'\n    print '        type : black'\n    print '               black_win'\n    print '               white'\n    print '               white_win'\n    quit()\n\n# check type\nbuild_type = ''\nfor t in ['black', 'black_win', 'white', 'white_win']:\n    if argv[2] == t:\n        build_type = t\n\nif build_type == '':\n    print 'record type is illegal.'\n    quit()\n\n#(2)-- load record --#\nf = open(argv[1], \"r\")\nline_cnt = 1\nfor line in f:\n    print 'Line Count = ' + str(line_cnt)\n    idx = line.find(\"BO[8\")\n    if idx == -1:\n        continue\n\n    idx += 5\n    # make board initial state\n    for i in range(idx, idx+9*8):\n        if line[i] == '-':\n            row.append(0)\n        elif line[i] == 'O':\n            row.append(2)\n        elif line[i] == '*':\n            row.append(1)\n\n        if (i-idx)%9 == 8:\n            board.append(row)\n            row = []\n            if len(board) == 8:\n                break\n\n    row = []\n    print_board(board)\n    # record progress of game\n    i = idx+9*8+2\n    while line[i] != ';':\n        if (line[i] == 'B' or line[i] == 'W') and line[i+1] == '[':\n            temp_X.append(board)\n            pos_str = line[i+2] + line[i+3]\n            if pos_str == \"pa\":    # pass\n                temp_y.append(64)\n                # board state is not change\n                print_board(board)\n            else:\n                if line[i] == 'B':\n                    clr = 1\n                elif line[i] == 'W':\n                    clr = 2\n                else:\n                    clr = 0\n                    assert False, \"Stone Color is illegal.\"\n\n                pos_index_flat = pos_str2pos_index_flat(pos_str)\n                temp_y.append(pos_index_flat)\n                board = update_board(board, pos_str, clr)\n\n            if (line[i] == 'B' and (build_type == 'black' or build_type == 'black_win')) or \\\n               (line[i] == 'W' and (build_type == 'white' or build_type == 'white_win')):\n                temp2_X.append(temp_X[0])\n                temp2_y.append(temp_y[0])\n                print 'X = '\n                print_board(temp_X[0])\n                print 'y = ' + str(temp_y[0]) + ' (' + \\\n                               str(pos_str2pos_index(pos_str)) + ') ' + \\\n                               '(' + pos_str + ')'\n                print ''\n\n            temp_X = []\n            temp_y = []\n        \n        i += 1\n\n    print \"End of game\"\n    print_board(board)\n\n    winner = who_is_winner(board)\n    if (winner == 1 and build_type == 'black_win') or \\\n       (winner == 2 and build_type == 'white_win') or \\\n       build_type == 'black' or build_type == 'white':\n        record_X.extend(temp2_X)\n        record_y.extend(temp2_y)\n\n    board = []\n    temp2_X = []\n    temp2_y = []\n    line_cnt += 1\n\n\n#(3)-- MLP model and Training --#\nX = np.array(record_X, dtype=np.float32)\ny = np.array(record_y, dtype=np.int32)\n\ntrain = datasets.TupleDataset(X, y)\ntrain_iter = iterators.SerialIterator(train, batch_size=100)\n\nmodel = Classifier(MLP())\noptimizer = optimizers.SGD()\noptimizer.setup(model)\n\nupdater = training.StandardUpdater(train_iter, optimizer)\ntrainer = training.Trainer(updater, (1000, 'epoch'), out='result')\n\ntrainer.extend(extensions.ProgressBar())\ntrainer.run()\n\n#(4)-- save model --#\nserializers.save_npz('reversi_model.npz', model)\n\n\n#(5)-- prediction example --#\nX1_ = [[[0,0,0,0,0,0,0,0],\\\n        [0,0,0,0,0,0,0,0],\\\n        [0,0,0,0,0,0,0,0],\\\n        [0,0,0,2,1,0,0,0],\\\n        [0,0,0,1,2,0,0,0],\\\n        [0,0,0,0,0,0,0,0],\\\n        [0,0,0,0,0,0,0,0],\\\n        [0,0,0,0,0,0,0,0]]]\n\nX1 = np.array(X1_, dtype=np.float32)\ny1 = F.softmax(model.predictor(X1))\nprint \"X1 = \"\nprint_board(X1[0])\nprint \"y1 = \" + str(y1.data.argmax(1)) + '\\n' \n\nX2_ = [[[0,0,0,0,0,0,0,0],\\\n        [0,0,0,0,0,0,0,0],\\\n        [0,0,2,2,2,0,0,0],\\\n        [0,0,2,1,1,1,0,0],\\\n        [0,2,2,2,1,1,0,0],\\\n        [0,0,2,1,0,0,0,0],\\\n        [0,0,0,0,0,0,0,0],\\\n        [0,0,0,0,0,0,0,0]]]\n\nX2 = np.array(X2_, dtype=np.float32)\ny2 = F.softmax(model.predictor(X2))\nprint \"X2 = \"\nprint_board(X2[0])\nprint \"y2 = \" + str(y2.data.argmax(1)) + '\\n'\n```\n\n\u7c21\u5358\u306b\u89e3\u8aac\u3057\u3066\u3044\u304d\u307e\u3059\u3002\u30b3\u30fc\u30c9\u5185\u306e(1)\uff5e(5)\u3068\u5bfe\u5fdc\u3055\u305b\u3066\u8aad\u3093\u3067\u304f\u3060\u3055\u3044\u3002\n(1) Chainer\u306eMLP\u5b9a\u7fa9\nMLP\u30af\u30e9\u30b9\u3067MLP\u306e\u69cb\u9020\u3092\u5b9a\u7fa9\u3057\u307e\u3059\u3002\u524d\u8ff0\u306e\u3068\u304a\u308a\u3001\u5165\u529b=8x8=64\u3001\u51fa\u529b=65\u3001\u96a0\u308c\u5c642\u5c64(\u30cb\u30e5\u30fc\u30ed\u30f3\u6570100)\u3067\u5b9a\u7fa9\u3057\u3066\u3044\u307e\u3059\u3002\n\u6d3b\u6027\u5316\u95a2\u6570\u3068\u5c64\u69cb\u9020\u306f \\__call\\__ \u5185\u3067\u5b9a\u7fa9\u3057\u3066\u3044\u307e\u3059\u3002\nClassifier\u30af\u30e9\u30b9\u3067Softmax\u3067\u306e\u30af\u30e9\u30b9\u5206\u3051\u3092\u5b9a\u7fa9\u3057\u3066\u3044\u307e\u3059\u3002\n\n(2) \u68cb\u8b5c\u306e\u8aad\u307f\u8fbc\u307f\u3068\u5909\u63db\n\u9577\u3044\u30eb\u30fc\u30d7\u3067\u3059\u304c\u3001\u68cb\u8b5c\u306e\u8aad\u307f\u8fbc\u307f\u3068\u3001\u305d\u308c\u3092\u5165\u529b(8x8)\u3068\u51fa\u529b(0\uff5e64)\u306b\u5909\u63db\u3057\u3066\u3044\u307e\u3059\u3002\n\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u306e\u4f55\u304c\u5927\u5909\u3063\u3066\u3053\u3053\u304c\u4e00\u756a\u5927\u5909\u3067\u3057\u305f...\n\n(3) MLP\u30e2\u30c7\u30eb\u306e\u30c8\u30ec\u30fc\u30cb\u30f3\u30b0\n\u5909\u63db\u3057\u305f\u68cb\u8b5c\u3092\u30e2\u30c7\u30eb\u306b\u5165\u529b\u3057\u3066\u30c8\u30ec\u30fc\u30cb\u30f3\u30b0\u3057\u307e\u3059\u3002\n\u5165\u529b\u3001\u51fa\u529b\u3068\u3082\u306bNumpy\u306earray\u5f62\u5f0f\u306b\u3057\u3066\u3001dataset.TupleDataset \u3067\u8a2d\u5b9a\u3067\u304d\u307e\u3059\u3002\n\u3053\u306e\u969b\u3001\u578b\u306b\u6ce8\u610f\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n\u3042\u3068\u306f\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u306e\u3088\u3046\u306b\n\n + batch_size\u306e\u8a2d\u5b9a\n + \u6700\u9069\u5316\u65b9\u6cd5(\u4eca\u56de\u306fSGD)\u306e\u8a2d\u5b9a\n + \u5b9f\u884c\u56de\u6570(epoch)\u306e\u8a2d\u5b9a\n\n\u3092\u884c\u3044\u307e\u3059\u3002\ntrainer.run \u3067\u30c8\u30ec\u30fc\u30cb\u30f3\u30b0\u5b9f\u884c\u3067\u3059\u3002\n\n(4) \u30e2\u30c7\u30eb\u306e\u4fdd\u5b58\n\u30c8\u30ec\u30fc\u30cb\u30f3\u30b0\u6e08\u307f\u306e\u30e2\u30c7\u30eb\u3092\u4fdd\u5b58\u3057\u307e\u3059\u3002NPZ\u5f62\u5f0f\u3067\u3059\u3002\n\u5f8c\u7de8\u3067\u30aa\u30bb\u30ed\u30b2\u30fc\u30e0\u306b\u30a4\u30f3\u30d7\u30ea\u3059\u308b\u3068\u304d\u306b\u4f7f\u7528\u3057\u307e\u3059\u3002\n\n(5) \u7c21\u5358\u306a\u30c6\u30b9\u30c8\n\u30c8\u30ec\u30fc\u30cb\u30f3\u30b0\u6e08\u307f\u306e\u30e2\u30c7\u30eb\u3067\u6b63\u3057\u304f\u6b21\u306e\u4e00\u624b\u3092\u5c0e\u51fa\u3067\u304d\u308b\u304b\u3092\u8a66\u3057\u307e\u3059\u3002\n\n\n\u5b9f\u884c\u7d50\u679c\u306e\u4f8b\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u306a\u308a\u307e\u3059\u3002\n\u6559\u5e2b\u30c7\u30fc\u30bf\u3068\u3057\u3066'Othello.01e4.ggf'\u3092\u4f7f\u7528\u3057\u3001\u5148\u624b(\u9ed2)\u306e\u52dd\u5229\u3057\u305f\u30c7\u30fc\u30bf\u3060\u3051\u3067AI\u306e\u4f5c\u6210\u3092\u884c\u3063\u3066\u3044\u307e\u3059\u3002\n\n```sh\n$ python build_mlp.py Othello.01e4.ggf black_win\n...\n\nX1 = \n[ 0.  0.  0.  0.  0.  0.  0.  0.]\n[ 0.  0.  0.  0.  0.  0.  0.  0.]\n[ 0.  0.  0.  0.  0.  0.  0.  0.]\n[ 0.  0.  0.  2.  1.  0.  0.  0.]\n[ 0.  0.  0.  1.  2.  0.  0.  0.]\n[ 0.  0.  0.  0.  0.  0.  0.  0.]\n[ 0.  0.  0.  0.  0.  0.  0.  0.]\n[ 0.  0.  0.  0.  0.  0.  0.  0.]\n\ny1 = [37]\n\nX2 = \n[ 0.  0.  0.  0.  0.  0.  0.  0.]\n[ 0.  0.  0.  0.  0.  0.  0.  0.]\n[ 0.  0.  2.  2.  2.  0.  0.  0.]\n[ 0.  0.  2.  1.  1.  1.  0.  0.]\n[ 0.  2.  2.  2.  1.  1.  0.  0.]\n[ 0.  0.  2.  1.  0.  0.  0.  0.]\n[ 0.  0.  0.  0.  0.  0.  0.  0.]\n[ 0.  0.  0.  0.  0.  0.  0.  0.]\n\ny2 = [25]\n\n```\n\u30c8\u30ec\u30fc\u30cb\u30f3\u30b0\u306bGPU\u306f\u4f7f\u7528\u3057\u306a\u3044\u3088\u3046\u306b\u66f8\u3044\u3066\u3044\u307e\u3059\u3002\n\u5b9f\u884c\u3059\u308b\u3068\u8ca7\u5f31\u306aPC\u3060\u30681\u6642\u9593\u304f\u3089\u3044\u304b\u304b\u308b\u3068\u601d\u3044\u307e\u3059\u3002\nChainer\u306e\u6a5f\u80fd\u3067Progress Bar\u304c\u8868\u793a\u3055\u308c\u308b\u3088\u3046\u306b\u3057\u3066\u3044\u307e\u3059\u306e\u3067\u3001\u3054\u81ea\u8eab\u306e\u74b0\u5883\u3067\u884c\u3046\u5834\u5408\u306b\u306f\u307e\u3068\u3082\u306a\u6642\u9593\u3067\u5b8c\u4e86\u3059\u308b\u306e\u304b\u3069\u3046\u304b\u306e\u53c2\u8003\u306b\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n\u307e\u305f\u3001\u4f8b\u3067\u306f Othello.01e4.ggf \u3092\u4f7f\u7528\u3057\u3066\u3044\u307e\u3059\u304c\u3001\u60f3\u5b9a\u30d5\u30a9\u30fc\u30de\u30c3\u30c8\u3092\u9038\u8131\u3057\u3066\u3044\u308b\u30c7\u30fc\u30bf\u304c2\u4ef6(85\u884c\u76ee\u30012699\u884c\u76ee)\u3042\u3063\u305f\u306e\u3067\u3001\u524a\u9664\u3057\u3066\u5b9f\u884c\u3057\u307e\u3057\u305f\u3002\n\n\u7d50\u679c\u306b\u8868\u793a\u3055\u308c\u3066\u3044\u308bprediction example\u3092\u898b\u308b\u3068\u3001AI\u306f\u6b21\u306e\u3088\u3046\u306b\u6253\u3064\u3068\u5206\u304b\u308a\u307e\u3059\u3002\n![prediction-example.png](https://qiita-image-store.s3.amazonaws.com/0/127380/0066393d-3188-0296-8815-1e02443a409f.png)\n\n2\u901a\u308a\u3060\u3051\u3067\u3059\u304c\u3001\u7c21\u5358\u306a\u30c6\u30b9\u30c8\u3067\u306f\u4e0a\u624b\u304f\u6b21\u306e\u4e00\u624b\u3092\u5c0e\u51fa\u3067\u304d\u3066\u3044\u308b\u3088\u3046\u3067\u3059\u3002\n[\u5f8c\u7de8](http://qiita.com/kanlkan/items/ce126272be2f7873e46d)\u3067\u306f\u3001\u3053\u306e\u30c8\u30ec\u30fc\u30cb\u30f3\u30b0\u6e08\u307f\u306e\u30e2\u30c7\u30eb\u3092\u5b9f\u969b\u306b\u30aa\u30bb\u30ed\u30b2\u30fc\u30e0\u306bAI\u3068\u3057\u3066\u30a4\u30f3\u30d7\u30ea\u3057\u3066\u3001\u30aa\u30bb\u30ed\u306e\u52d5\u4f5c\u3092\u78ba\u8a8d\u3057\u307e\u3059\u3002\n**\u2192[\u52d5\u4f5c\u78ba\u8a8d\u3068\u7d50\u8ad6\u304c\u51fa\u307e\u3057\u305f\u3002](http://qiita.com/kanlkan/items/ce126272be2f7873e46d)**\n\n# \u53c2\u8003\n + [GGS data base / Othello](https://www.skatgame.net/mburo/ggs/game-archive/Othello/) : \u30aa\u30bb\u30ed\u68cb\u8b5c\u30c7\u30fc\u30bf\u53d6\u5f97\u5143\n + [chainer\u3067\u81ea\u7136\u8a00\u8a9e\u51e6\u7406\u3067\u304d\u308b\u304b\u30de\u30f3 - XOR\u306e\u5b66\u7fd2](http://chainernlpman.hatenablog.com/entry/2016/02/17/024158)\n + [Chainer Reference Manual](http://docs.chainer.org/en/stable/reference/index.html)\n", "tags": ["Chainer", "DeepLearning", "\u6a5f\u68b0\u5b66\u7fd2", "Python", "AI"]}