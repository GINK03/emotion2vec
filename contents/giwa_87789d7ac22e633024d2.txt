{"context": " More than 1 year has passed since last update.This article is a brief memo for how to use SQLAlchemy and DB migration using Alembic. The best way to learn them is to read their document directly though they are nice volume. I, therefore, pick up some useful and basic snipets from document. \nSQLAlchemy is ORM(Object-relational mapping). You can map your Python code to DB. It means you do not need to write SQL directly for handling data. But ORM library does not provide what you expected. You might write SQL.\nDB migration is a way of changing your database schema from one version into another. When you add, delete schema and so on, these action can be managed by DB migration tools.\nI will write abour how to qury using SQLAlchemy later.\n\nSQLAlchemy\n\nHow to connect to DBs\nhttp://docs.sqlalchemy.org/en/rel_1_0/core/engines.html#database-urls\nfrom sqlalchemy import create_engine\n\n\nMySQL\n# default\nengine = create_engine('mysql://scott:tiger@localhost/foo')\n\n# mysql-python\nengine = create_engine('mysql+mysqldb://scott:tiger@localhost/foo')\n\n# MySQL-connector-python\nengine = create_engine('mysql+mysqlconnector://scott:tiger@localhost/foo')\n\n# OurSQL\nengine = create_engine('mysql+oursql://scott:tiger@localhost/foo')\n\n\n\nSQLite\n# sqlite://<nohostname>/<path>\n# where <path> is relative:\nengine = create_engine('sqlite:///foo.db')\n\n\nPostgres\n# default\nengine = create_engine('postgresql://scott:tiger@localhost/mydatabase')\n\n# psycopg2\nengine = create_engine('postgresql+psycopg2://scott:tiger@localhost/mydatabase')\n\n# pg8000\nengine = create_engine('postgresql+pg8000://scott:tiger@localhost/mydatabase')\n\n\nDeclare a Mapping\nDeclaretive is mapping python class to DB schema. This is done by inheriting declaretive base class\nhttp://docs.sqlalchemy.org/en/rel_1_0/orm/extensions/declarative/index.html\nfrom sqlalchemy.ext.declarative import declarative_base\n\nBase = declarative_base()\n\nclass User(Base):\n    __tablename__ = 'some_table'\n    id = Column(Integer, primary_key=True)\n    name =  Column(String(50))\n\n\nMixin class allows to  declare primary key easy.\nfrom sqlalchemy.ext.declarative import declared_attr\n\nclass DBMixin(object):\n\n    @declared_attr\n    def __tablename__(cls):\n        return cls.__name__.lower()\n\n    __table_args__ = {'mysql_engine': 'InnoDB'}\n    __mapper_args__= {'always_refresh': True}\n\n    id =  Column(Integer, primary_key=True)\n\n\nIf DBMixin is inherited by a declarative class for Table definition, the above User example becomes simpler.\n\nclass User(DBmixin, Base):\n    name =  Column(String(50))\n\n\n\ncreated_at, update_at\nhttp://docs.sqlalchemy.org/en/rel_1_0/core/defaults.html\ndefault is invoked when INSERT query is executed if no other value is supplied.\nonupadte is invovoked when UPDATE query is executed and no values is supplied.\nThese are call by sqlalchemy; therefore it should be callable object(function etc..).\nimport datetime\nfrom sqlalchemy import Column, Integer, DateTime\nfrom sqlalchemy.ext.declarative import declarative_base\n\nBase = declarative_base()\n\nclass Test(Base):\n    __tablename__ = 'test'\n\n    id = Column(Integer, primary_key=True)\n    created_at = Column(DateTime, default=datetime.datetime.now)\n    updated_at = Column(DateTime, default=datetime.datetime.now, onpudate=datetime.datetime.now)\n\n\nConstrants and Indexes\nhttp://docs.sqlalchemy.org/en/rel_1_0/core/constraints.html\nBasically, these are defined by argument in Column\n\nPrimary Key\n   Column('id', Integer, primary_key=True)\n\n\nComposite Primary Key\nPrimaryKeyConstraint('id', 'version_id', name='mytable_pk')\n\n    Column('id', Integer, primary_key=True),\n    Column('version_id', Integer, primary_key=True),\n\n\nForegin Key\nColumn('user_id', Integer, ForeignKey(\"user.user_id\"), nullable=False),\n\n\nComposite Foregin Key\nAdd primary_key in different row. SQLAlchemy atuomatically handles it.\n\nUnique\nColumn('col1', Integer, unique=True)\n\n\nComposite Unique\nThis is more explicit way.\nfrom sqlalchemy import UniqueConstraint\n\nUniqueConstraint('col2', 'col3', name='uix_1')\n\n\nIndex\nColumn('col1', Integer, index=True),\n\nColumn('col2', Integer, index=True, unique=True),\n\n\nComposite Index\n    # place an index on col1, col2\n    Index('idx_col12', 'col1', 'col2'),\n\n    # place a unique index on col3, col4\n    Index('idx_col34', 'col3', 'col4', unique=True)\n\n\nNullable\n    Column('pref_name', String(40), nullable=False),\n\n\ndata type\nhttp://docs.sqlalchemy.org/en/rel_0_9/core/type_basics.html#generic-types\n\nInteger\nFloat\nString\nDate\nDatetime\nText\netc...\n\nThere are some each DB specific data types.\n\nRelation\n\none to one\nAn important thing,here is to specify uselist=False . \nclass Parent(Base):\n    __tablename__ = 'parent'\n    id = Column(Integer, primary_key=True)\n    child = relationship(\"Child\", uselist=False, backref=\"parent\")\n\nclass Child(Base):\n    __tablename__ = 'child'\n    id = Column(Integer, primary_key=True)\n    parent_id = Column(Integer, ForeignKey('parent.id'))\n\n\n\none to many\nclass Department(Base):\n    __tablename__ = 'department'\n    id = Column(Integer, primary_key=True)\n    name = Column(String)\n\nclass Employee(Base):\n    __tablename__ = 'employee'\n    id = Column(Integer, primary_key=True)\n    name = Column(String)\n    # employees is added in Department as an attribute for birateral relationship \n    departments = relationship(\n        Department,\n        backref='employees'\n    )\n\n\nmany to many\nclass Department(Base):\n    __tablename__ = 'department'\n    id = Column(Integer, primary_key=True)\n    name = Column(String)\n    # employees can be hanlded as python list.\n    # the string of name of class is okay for first arguemnt of relationship\n    employees = relationship(\n        'Employee',\n        secondary='department_employee'\n    )\n\nclass Employee(Base):\n    __tablename__ = 'employee'\n    id = Column(Integer, primary_key=True)\n    name = Column(String)\n    # employees can be hanlded as python list.\n    departments = relationship(\n        Department,\n        secondary='department_employee'\n    )\n\n\nclass DepartmentEmployee(Base):\n    __tablename__ = 'department_employee'\n    department_id = Column(Integer, ForeignKey('department.id'))\n    employee_id = Column(Integer, ForeignKey('employee.id'))\n    Index('deparment_employee_idx, 'deparment_id', 'employee_id', unique=True)\n\n\nMigration\nUse alembic\nSQLAlchemy-migrate is not under active development. It seems that it stopped to adopt new SQLAlchemy(0.8 of SQLAlchemy is the latest support). While, alembic is maintained by SQLAlemy author. Bug fix is done really quick. Alembic is develped in Bitbucket. Github is a mirror of BitBucket.\nref:\nhttps://alembic.readthedocs.org/en/latest/\n\nInstall Alembic\npip install alembic\n\n\nInitiation\n\nDirectory hierarchy\n$ alembic init alembic\n\napp\n\u251c\u2500\u2500 alembic\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 README\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 env.py\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 script.py.mako\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 versions\n\u251c\u2500\u2500 model.py\n\n\nAuto migrate template detection\nCool feature of alembic is detect changes automatically compared database and revison files. NOTE: auto migration does no detect all changes.\n\nSet up\nModify env.py\n# imprt model.py\nimport os\nimport sys\nMODEL_PATH = os.path.join(os.path.abspath(os.path.dirname(__file__)), \"..\")\nsys.path.append(MODEL_PATH)\nimport model\n\n\n# edit this line and pass metadata\ntarget_metadata = model.Base.metadata\n\n\n\nCan\n\nTable additions, removals.\nColumn additions, removals.\nChange of nullable status on columns.\nBasic changes in indexes and explcitly-named unique constraints\nBasic changes in foreign key constraints\n\n\nCannot\n\nChanges clumn name\nChanges table name\nSpecial SQLALchemy types such as Enum\n\n\nmigrate\nhttps://alembic.readthedocs.org/en/latest/tutorial.html#creating-an-environment\nCreate auto migrate template\n$ alembic revision --autogenerate -m \"initial\"\n\n\nExecute migration\nhead means the most recent change. It will migrate untill the most recent one.\n$ alembic upgrade head\n\n\nShow migration\n$ alembic history --verbose\n\noutput\nRev: 340434aac9a (head)\nParent: 14db12dc041\nPath: /Users/ken/proto/python/sqlalchemy/test/alembic/versions/340434aac9a_add_address.py\n\n    add address\n\n    Revision ID: 340434aac9a\n    Revises: 14db12dc041\n    Create Date: 2015-10-25 23:40:55.398984\n\nRev: 14db12dc041\nParent: <base>\nPath: /Users/ken/proto/python/sqlalchemy/test/alembic/versions/14db12dc041_initial.py\n\n    initial\n\n    Revision ID: 14db12dc041\n    Revises:\n    Create Date: 2015-10-25 23:27:39.622146\n\n\nLicense\nSQLAlchemy\n\nMIT License\n\nAlembic\n\nMIT License\n\n\nRef\nhttp://docs.sqlalchemy.org/en/rel_1_0/contents.html\nhttp://pythoncentral.io/series/python-sqlalchemy-database-tutorial/\n\nThis article is a brief memo for how to use SQLAlchemy and DB migration using Alembic. The best way to learn them is to read their document directly though they are nice volume. I, therefore, pick up some useful and basic snipets from document. \n\n\nSQLAlchemy is ORM(Object-relational mapping). You can map your Python code to DB. It means you do not need to write SQL directly for handling data. But ORM library does not provide what you expected. You might write SQL.\n\nDB migration is a way of changing your database schema from one version into another. When you add, delete schema and so on, these action can be managed by DB migration tools.\n\nI will write abour how to qury using SQLAlchemy later.\n\n\n# SQLAlchemy\n\n## How to connect to DBs\nhttp://docs.sqlalchemy.org/en/rel_1_0/core/engines.html#database-urls\n\n```\nfrom sqlalchemy import create_engine\n```\n\n\n### MySQL\n\n\n\n```\n# default\nengine = create_engine('mysql://scott:tiger@localhost/foo')\n\n# mysql-python\nengine = create_engine('mysql+mysqldb://scott:tiger@localhost/foo')\n\n# MySQL-connector-python\nengine = create_engine('mysql+mysqlconnector://scott:tiger@localhost/foo')\n\n# OurSQL\nengine = create_engine('mysql+oursql://scott:tiger@localhost/foo')\n\n```\n\n### SQLite\n```\n# sqlite://<nohostname>/<path>\n# where <path> is relative:\nengine = create_engine('sqlite:///foo.db')\n```\n\n### Postgres\n```\n# default\nengine = create_engine('postgresql://scott:tiger@localhost/mydatabase')\n\n# psycopg2\nengine = create_engine('postgresql+psycopg2://scott:tiger@localhost/mydatabase')\n\n# pg8000\nengine = create_engine('postgresql+pg8000://scott:tiger@localhost/mydatabase')\n```\n\n## Declare a Mapping\n\nDeclaretive is mapping python class to DB schema. This is done by inheriting declaretive base class\n\nhttp://docs.sqlalchemy.org/en/rel_1_0/orm/extensions/declarative/index.html\n\n\n```\nfrom sqlalchemy.ext.declarative import declarative_base\n\nBase = declarative_base()\n\nclass User(Base):\n    __tablename__ = 'some_table'\n    id = Column(Integer, primary_key=True)\n    name =  Column(String(50))\n\n```\n\n\n\nMixin class allows to  declare primary key easy.\n\n```\nfrom sqlalchemy.ext.declarative import declared_attr\n\nclass DBMixin(object):\n\n    @declared_attr\n    def __tablename__(cls):\n        return cls.__name__.lower()\n\n    __table_args__ = {'mysql_engine': 'InnoDB'}\n    __mapper_args__= {'always_refresh': True}\n\n    id =  Column(Integer, primary_key=True)\n\n```\n\nIf `DBMixin` is inherited by a declarative class for Table definition, the above `User` example becomes simpler.\n\n```\n\nclass User(DBmixin, Base):\n    name =  Column(String(50))\n\n```\n\n\n### created_at, update_at\n\nhttp://docs.sqlalchemy.org/en/rel_1_0/core/defaults.html\n\n`default` is invoked when INSERT query is executed if no other value is supplied.\n\n\n`onupadte` is invovoked when UPDATE query is executed and no values is supplied.\n\nThese are call by sqlalchemy; therefore it should be callable object(function etc..).\n\n\n\n```python\nimport datetime\nfrom sqlalchemy import Column, Integer, DateTime\nfrom sqlalchemy.ext.declarative import declarative_base\n\nBase = declarative_base()\n\nclass Test(Base):\n    __tablename__ = 'test'\n\n    id = Column(Integer, primary_key=True)\n    created_at = Column(DateTime, default=datetime.datetime.now)\n    updated_at = Column(DateTime, default=datetime.datetime.now, onpudate=datetime.datetime.now)\n```\n\n### Constrants and Indexes\nhttp://docs.sqlalchemy.org/en/rel_1_0/core/constraints.html\n\nBasically, these are defined by argument in `Column`\n\n#### Primary Key\n\n\n```\n   Column('id', Integer, primary_key=True)\n```\n\n\n##### Composite Primary Key\n\n```\nPrimaryKeyConstraint('id', 'version_id', name='mytable_pk')\n```\n\n```\n    Column('id', Integer, primary_key=True),\n    Column('version_id', Integer, primary_key=True),\n```\n\n\n#### Foregin Key\n\n```\nColumn('user_id', Integer, ForeignKey(\"user.user_id\"), nullable=False),\n```\n\n##### Composite Foregin Key\n\nAdd primary_key in different row. SQLAlchemy atuomatically handles it.\n\n\n\n#### Unique\n```\nColumn('col1', Integer, unique=True)\n```\n\n##### Composite Unique \n\nThis is more explicit way.\n\n```\nfrom sqlalchemy import UniqueConstraint\n\nUniqueConstraint('col2', 'col3', name='uix_1')\n```\n\n\n#### Index\n\n```\nColumn('col1', Integer, index=True),\n\nColumn('col2', Integer, index=True, unique=True),\n```\n\n\n##### Composite Index\n\n```\n\t# place an index on col1, col2\n    Index('idx_col12', 'col1', 'col2'),\n\n    # place a unique index on col3, col4\n    Index('idx_col34', 'col3', 'col4', unique=True)\n```\n\n\n#### Nullable\n\n```\n    Column('pref_name', String(40), nullable=False),\n```\n\n\n## data type\n\nhttp://docs.sqlalchemy.org/en/rel_0_9/core/type_basics.html#generic-types\n\n- Integer\n- Float\n- String\n- Date\n- Datetime\n- Text\n- etc...\n\nThere are some each DB specific data types.\n\n\n## Relation\n\n### one to one\n\nAn important thing,here is to specify `uselist=False` . \n\n```python\nclass Parent(Base):\n    __tablename__ = 'parent'\n    id = Column(Integer, primary_key=True)\n    child = relationship(\"Child\", uselist=False, backref=\"parent\")\n\nclass Child(Base):\n    __tablename__ = 'child'\n    id = Column(Integer, primary_key=True)\n    parent_id = Column(Integer, ForeignKey('parent.id'))\n\n```\n\n### one to many\n```python\nclass Department(Base):\n    __tablename__ = 'department'\n    id = Column(Integer, primary_key=True)\n    name = Column(String)\n\nclass Employee(Base):\n    __tablename__ = 'employee'\n    id = Column(Integer, primary_key=True)\n    name = Column(String)\n    # employees is added in Department as an attribute for birateral relationship \n    departments = relationship(\n        Department,\n        backref='employees'\n    )\n```\n\n### many to many\n\n```python\nclass Department(Base):\n    __tablename__ = 'department'\n    id = Column(Integer, primary_key=True)\n    name = Column(String)\n    # employees can be hanlded as python list.\n    # the string of name of class is okay for first arguemnt of relationship\n    employees = relationship(\n        'Employee',\n        secondary='department_employee'\n    )\n \nclass Employee(Base):\n    __tablename__ = 'employee'\n    id = Column(Integer, primary_key=True)\n    name = Column(String)\n    # employees can be hanlded as python list.\n    departments = relationship(\n        Department,\n        secondary='department_employee'\n    )\n \n \nclass DepartmentEmployee(Base):\n    __tablename__ = 'department_employee'\n    department_id = Column(Integer, ForeignKey('department.id'))\n    employee_id = Column(Integer, ForeignKey('employee.id'))\n    Index('deparment_employee_idx, 'deparment_id', 'employee_id', unique=True)\n```\n\n# Migration\n\nUse alembic\n\nSQLAlchemy-migrate is not under active development. It seems that it stopped to adopt new SQLAlchemy(0.8 of SQLAlchemy is the latest support). While, alembic is maintained by SQLAlemy author. Bug fix is done really quick. Alembic is develped in Bitbucket. Github is a mirror of BitBucket.\n\nref:\nhttps://alembic.readthedocs.org/en/latest/\n\n## Install Alembic\n\n```\npip install alembic\n```\n\n## Initiation\n\n### Directory hierarchy\n\n```\n$ alembic init alembic\n```\n\n\n```\napp\n\u251c\u2500\u2500 alembic\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 README\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 env.py\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 script.py.mako\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 versions\n\u251c\u2500\u2500 model.py\n```\n\n## Auto migrate template detection\nCool feature of alembic is detect changes automatically compared database and revison files. NOTE: auto migration does no detect all changes.\n\n### Set up\n\nModify env.py\n\n```\n# imprt model.py\nimport os\nimport sys\nMODEL_PATH = os.path.join(os.path.abspath(os.path.dirname(__file__)), \"..\")\nsys.path.append(MODEL_PATH)\nimport model\n\n\n# edit this line and pass metadata\ntarget_metadata = model.Base.metadata\n\n```\n\n### Can\n\n- Table additions, removals.\n- Column additions, removals.\n- Change of nullable status on columns.\n- Basic changes in indexes and explcitly-named unique constraints\n- Basic changes in foreign key constraints\n\n\n### Cannot\n\n- Changes clumn name\n- Changes table name\n- Special SQLALchemy types such as Enum\n\n\n## migrate \n\nhttps://alembic.readthedocs.org/en/latest/tutorial.html#creating-an-environment\n\nCreate auto migrate template\n\n```\n$ alembic revision --autogenerate -m \"initial\"\n```\n\n### Execute migration\n\nhead means the most recent change. It will migrate untill the most recent one.\n\n```\n$ alembic upgrade head\n```\n\n### Show migration\n\n```\n$ alembic history --verbose\n```\n\noutput\n\n\n```\nRev: 340434aac9a (head)\nParent: 14db12dc041\nPath: /Users/ken/proto/python/sqlalchemy/test/alembic/versions/340434aac9a_add_address.py\n\n    add address\n\n    Revision ID: 340434aac9a\n    Revises: 14db12dc041\n    Create Date: 2015-10-25 23:40:55.398984\n\nRev: 14db12dc041\nParent: <base>\nPath: /Users/ken/proto/python/sqlalchemy/test/alembic/versions/14db12dc041_initial.py\n\n    initial\n\n    Revision ID: 14db12dc041\n    Revises:\n    Create Date: 2015-10-25 23:27:39.622146\n```\n\n\n# License \n\nSQLAlchemy\n\n- MIT License\n\nAlembic\n\n- MIT License\n\n\n# Ref\nhttp://docs.sqlalchemy.org/en/rel_1_0/contents.html\n\nhttp://pythoncentral.io/series/python-sqlalchemy-database-tutorial/\n", "tags": ["DB", "sqlalchemy", "Alembic", "Python"]}