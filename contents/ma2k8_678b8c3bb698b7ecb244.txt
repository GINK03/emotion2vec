{"context": "\n\n\u7b2c3\u7ae0 \u95a2\u6570\u578b\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u306e\u30c7\u30fc\u30bf\u69cb\u9020\n\n\u30a2\u30ad\u30e5\u30fc\u30e0\u30ec\u30fc\u30bf\n\n\n\u84c4\u5727\u6a5f\u3002fold\u3067\u7573\u307f\u8fbc\u3093\u3060\u7d50\u679c\u3092\u4fdd\u6301\u3059\u308b\u5909\u6570\u3092\u30a2\u30ad\u30e5\u30fc\u30e0\u30ec\u30fc\u30bf(acc)\u3068\u547c\u3076\u3053\u3068\u304c\u3042\u308b\u3002\n\n\n\n\nEXERCISE 3.1\n// Q\n\u4ee5\u4e0b\u306e\u30de\u30c3\u30c1\u5f0f\u306f\u3069\u306e\u3088\u3046\u306a\u7d50\u679c\u306b\u306a\u308b\u304b\n\nscala> val x = List(1,2,3,4,5) match {\n     | case Cons(x, Cons(2, Cons(4, _))) => x\n     | case Nil => 42\n     | case Cons(x, Cons(y, Cons(3, Cons(4,_)))) => x + y\n     | case Cons(h,t) => h+List.sum(t)\n     | case _ => 101\n     | }\nx: Int = 3\n\n\nEXERCISE 3.2\n// Q\nList\u306e\u6700\u521d\u306e\u8981\u7d20\u3092\u524a\u9664\u3059\u308b\u95a2\u6570tail\u3092\u5b9f\u88c5\u305b\u3088\u3002\n\u5b9f\u884c\u6642\u9593\u306f\u4e00\u5b9a\n\n// answer\ndef tail[A](l: List[A]): List[A] = {\n  l match {\n    case Nil => throw new RuntimeException(\"empty list\")\n    case Cons(_,t) => t\n  }\n}\n\n// \u516c\u5f0f\u306eanswer\ndef tail[A](l: List[A]): List[A] = l match {\n    case Nil => sys.error(\"tail of empty list\")\n    case Cons(_,t) => t\n  }\n}\n\n\u4e00\u81f4\n\nEXERCISE 3.3\n// Q\nEXERCISE 3.2\u3068\u540c\u3058\u8003\u3048\u306b\u57fa\u3065\u3044\u3066\u3001List\u306e\u6700\u521d\u306e\u8981\u7d20\u3092\u5225\u306e\u5024\u3068\u7f6e\u304d\u63db\u3048\u308bsetHead\u95a2\u6570\u3092\u5b9f\u88c5\u305b\u3088\n\n// answer\ndef setHead[A](l: List[A], h: A): List[A] = {\n  l match {\n    case Nil => throw new RuntimeException(\"empty list\")\n    case Cons(_,t) => Cons(h,t)\n  }\n}\n\n// \u516c\u5f0f\u306eanswer\ndef setHead[A](l: List[A], h: A): List[A] = l match {\n  case Nil => sys.error(\"setHead on empty list\")\n  case Cons(_,t) => Cons(h,t)\n}\n\n\u4e00\u81f4\n\nEXERCISE 3.4\n// Q\ntail\u3092\u4e00\u822c\u5316\u3057\u3066\u3001\u30ea\u30b9\u30c8\u306e\u5148\u982d\u304b\u3089n\u500b\u306e\u8981\u7d20\u3092\u524a\u9664\u3059\u308bdrop\u3068\u3044\u3046\u95a2\u6570\u306b\u7f6e\u304d\u63db\u3048\u3088\u3002\n\u3053\u306e\u95a2\u6570\u306e\u5b9f\u884c\u6642\u9593\u306f\u524a\u9664\u3059\u308b\u8981\u7d20\u306e\u6570\u306b\u306e\u307f\u6bd4\u4f8b\u3059\u308b\u3053\u3068\u306b\u6ce8\u610f\u3002List\u5168\u4f53\u306e\u30b3\u30d4\u30fc\u3092\u4f5c\u6210\u3059\u308b\u5fc5\u8981\u306f\u306a\u3044\u3002\n\n// answer\ndef drop[A](l: List[A], n: Int): List[A] = {\n  if (0 <= n) drop(tail(l), n-1)\n  else l match {\n    case Nil => Nil\n    case Cons(_,t) => drop(t, n-1)\n  }\n}\n\n// \u516c\u5f0f\u306eanswer\ndef drop[A](l: List[A], n: Int): List[A] =\n  if (n <= 0) l\n  else l match {\n    case Nil => Nil\n    case Cons(_,t) => drop(t, n-1)\n  }\n\n\n\u4e00\u81f4\n\nEXERCISE 3.5\n// Q\n\u8ff0\u8a9e\u3068\u30de\u30c3\u30c1\u3059\u308b\u5834\u5408\u306b\u9650\u308a\u3001List\u304b\u3089\u305d\u306e\u8981\u7d20\u307e\u3067\u306e\u8981\u7d20\u3092\u524a\u9664\u3059\u308bdropWhile\u3092\u5b9f\u88c5\u305b\u3088\u3002\n\n// answer\ndef dropWhile[A](l: List[A], f: A => Boolean): List[A] = {\n  l match {\n    case Cons(h,t) if f(h) => dropWhile(t, f)\n    case _ => l\n  }\n}\n\n// \u516c\u5f0f\u306eanswer\ndef dropWhile[A](l: List[A], f: A => Boolean): List[A] =\n  l match {\n    case Cons(h,t) if f(h) => dropWhile(t, f)\n    case _ => l\n  }\n\n\n\u4e00\u81f4\u3002\n\nEXERCISE 3.6\n// Q\n\u3059\u3079\u3066\u304c\u3053\u306e\u3088\u3046\u306b\u3046\u307e\u304f\u3044\u304f\u308f\u3051\u3067\u306f\u306a\u3044\u3002List\u306e\u672b\u5c3e\u3092\u9664\u304f\u5168\u3066\u306e\u8981\u7d20\u3067\u69cb\u6210\u3055\u308c\u305fList\u3092\u8fd4\u3059init\u95a2\u6570\u3092\u5b9f\u88c5\u305b\u3088\u3002\nList(1,2,3,4)\u304c\u4e0e\u3048\u3089\u308c\u305f\u5834\u5408\u3001init\u306fList(1,2,3)\u3092\u8fd4\u3059\u3002\u3053\u306e\u95a2\u6570\u3092tail\u306e\u3088\u3046\u306b\u4e00\u5b9a\u6642\u9593\u3067\u5b9f\u88c5\u3067\u304d\u306a\u3044\u306e\u306f\u306a\u305c\u304b\u3002\n\n// answer\ndef init[A](l: List[A]): List[A] = {\n  l match {\n    case Nil => sys.error(\"empty list\")\n    case Cons(_,Nil) => Nil\n    case Cons(h,t) => Cons(h, init(t))\n  }\n}\n\nList\u304c\u5358\u65b9\u5411List\u3067\u3042\u308b\u305f\u3081\u3001\u305d\u308c\u306b\u81f3\u308b\u307e\u3067\u306e\u5168\u3066\u306e\u8981\u7d20\u3092\u8d70\u67fb\u3057\u306a\u3051\u308c\u3070\u306a\u3089\u306a\u3044\u3002\n\u3088\u3063\u3066\u3001\u30ea\u30b9\u30c8\u306e\u8981\u7d20\u6570\u306b\u5fdc\u3058\u305f\u51e6\u7406\u6642\u9593\u306b\u306a\u308b\u3002\n\n// \u516c\u5f0f\u306eanswer\ndef init[A](l: List[A]): List[A] =\n  l match {\n    case Nil => sys.error(\"init of empty list\")\n    case Cons(_,Nil) => Nil\n    case Cons(h,t) => Cons(h,init(t))\n  }\n\n\n\nEXERCISE 3.7\n// Q\nfoldRight\u3092\u4f7f\u3063\u3066\u5b9f\u88c5\u3055\u308c\u305fproduct\u306f\u30010.0\u3092\u691c\u51fa\u3057\u305f\u5834\u5408\u306b\u3001\u76f4\u3061\u306b\u518d\u5e30\u3092\u4e2d\u6b62\u3057\u30660.0\u3092\u8fd4\u305b\u308b\u304b\u3002\u305d\u306e\u7406\u7531\u3092\u8aac\u660e\u305b\u3088\u3002\n\u5927\u304d\u306a\u30ea\u30b9\u30c8\u3067foldRight\u3092\u547c\u3073\u51fa\u3057\u305f\u5834\u5408\u306e\u77ed\u7d61\u306e\u4ed5\u7d44\u307f\u306b\u3064\u3044\u3066\u691c\u8a0e\u305b\u3088\u3002\u3053\u306e\u554f\u984c\u306f\u5965\u304c\u6df1\u3044\u305f\u3081\u3001\u7b2c5\u7ae0\u3067\u6539\u3081\u3066\u53d6\u308a\u4e0a\u3052\u308b\u3002\n\n// answer\n- foldRight\u3092\u4f7f\u3063\u3066\u5b9f\u88c5\u3055\u308c\u305fproduct\u306f\u30010.0\u3092\u691c\u51fa\u3057\u305f\u5834\u5408\u306b\u3001\u76f4\u3061\u306b\u518d\u5e30\u3092\u4e2d\u6b62\u3057\u30660.0\u3092\u8fd4\u305b\u308b\u304b\u3002 \n \u8fd4\u305b\u306a\u3044\u3002\u672b\u5c3e\u304b\u3089\u7573\u307f\u8fbc\u3080\u305f\u3081\u3002f(x, foldRight(xs, z)(f))\u3068\u306a\u3063\u3066\u304a\u308a\u3001\n foldRight(xs, z)\u3092\u6700\u5f8c\u307e\u3067\u6398\u3063\u3066\u3044\u304d\u3001\u5f0f\u304c\u5b8c\u6210\u3057\u305f\u5f8c\u306b\u9806\u6b21\u5024\u3092\u8fd4\u3057\u3066\u3044\u304f\u3002\u5de6->\u53f3\u3067\u5f0f\u3092\u5b8c\u6210\u3055\u305b\u3001\u53f3<-\u5de6\u3067\u5024\u3092\u8fd4\u3059\u3002\n \u3053\u306e\u305f\u3081\u3001\u76f4\u3061\u306b\u518d\u5e30\u3092\u4e2d\u6b62\u3057\u3066\u5024\u3092\u8fd4\u3059\u3053\u3068\u306f\u4e0d\u53ef\u80fd\u3002\n\n- \u5927\u304d\u306a\u30ea\u30b9\u30c8\u3067foldRight\u3092\u547c\u3073\u51fa\u3057\u305f\u5834\u5408\u306e\u77ed\u7d61\u306e\u4ed5\u7d44\u307f\u306b\u3064\u3044\u3066\u691c\u8a0e\u305b\u3088\u3002\n\u3000\u554f\u984c\u6587\u304c\u3061\u3087\u3063\u3068\u8aad\u307f\u53d6\u308c\u306a\u3044\u3002\u547c\u3073\u51fa\u3057\u305f\u969b\u306e\u30c7\u30e1\u30ea\u30c3\u30c8\u3060\u308d\u3046\u304b\u3002\n\u3000\u30b9\u30bf\u30c3\u30af\u30bb\u30fc\u30d5\u3067\u306f\u306a\u3044\u305f\u3081\u30b9\u30bf\u30c3\u30af\u30aa\u30fc\u30d0\u30fc\u30d5\u30ed\u30fc\u3059\u308b\u53ef\u80fd\u6027\u304c\u3042\u308b\u3002\n\n\nEXERCISE 3.8\n// Q\nfoldRight(List(1,2,3),Nil:List[Int])(Cons(_,_))\u306e\u3088\u3046\u306b\u3001Nil\u304a\u3088\u3073Cons\u81ea\u4f53\u3092foldRight\u306b\u6e21\u3057\u305f\u5834\u5408\u306f\u3069\u3046\u306a\u308b\u304b\u3002\n\u3053\u308c\u304cfoldRight\u3068List\u306e\u30c7\u30fc\u30bf\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u3068\u306e\u95a2\u4fc2\u306b\u3064\u3044\u3066\u4f55\u3092\u8868\u3057\u3066\u3044\u308b\u3068\u601d\u3046\u304b\u3002\n\n// answer\n- foldRight(List(1,2,3), Nil:List[Int])(Cons(_,_))\u306e\u3088\u3046\u306b\u3001Nil\u304a\u3088\u3073Cons\u81ea\u4f53\u3092foldRight\u306b\u6e21\u3057\u305f\u5834\u5408\u306f\u3069\u3046\u306a\u308b\u304b\u3002\n\u3000Cons(1,Cons(2,Cons(3,Nil)))\u3092\u8fd4\u3059\n\n- \u3053\u308c\u304cfoldRight\u3068List\u306e\u30c7\u30fc\u30bf\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u3068\u306e\u95a2\u4fc2\u306b\u3064\u3044\u3066\u4f55\u3092\u8868\u3057\u3066\u3044\u308b\u3068\u601d\u3046\u304b\u3002\nNil\u306e\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u304c\u30a2\u30ad\u30e5\u30fc\u30e0\u30ec\u30fc\u30bf\u306e\u5f79\u5272\u3092\u679c\u305f\u3057\u3066\u3044\u308b\u3053\u3068\u306b\u3064\u3044\u3066\u8a00\u53ca\u3059\u308c\u3070\u3088\u3044\u306e\u3060\u308d\u3046\u304b\u30fb\u30fb\u30fb\uff1f\uff08\u6b63\u76f4\u826f\u304f\u5206\u304b\u3089\u306a\u3044\uff09\n\n\nEXERCISE 3.9\n// Q\nfoldRight\u3092\u4f7f\u3063\u3066\u30ea\u30b9\u30c8\u306e\u9577\u3055\u3092\u8a08\u7b97\u305b\u3088\u3002\n\n// answer\ndef length[A](l: List[A]): Int = foldRight(l, 0)((_,cnt) => cnt + 1)\n\n// \u516c\u5f0f\u306eanswer\ndef length[A](l: List[A]): Int =\n  foldRight(l, 0)((_,acc) => acc + 1)\n\nacc\u3063\u3066\u306a\u3093\u3058\u3083\u3002\u3068\u8abf\u3079\u3066\u307f\u308b\u3068\u30a2\u30ad\u30e5\u30fc\u30e0\u30ec\u30fc\u30bf(\u84c4\u5727\u6a5f)\u306e\u7565\u3089\u3057\u3044\u3002\n\u4eca\u5f8c\u4f7f\u3046\u3002\n\nEXERCISE 3.10\n// Q\n\u3053\u306efoldRight\u306e\u5b9f\u88c5\u306f\u672b\u5c3e\u518d\u5e30\u3067\u306f\u306a\u304f\u3001\u30ea\u30b9\u30c8\u304c\u5927\u304d\u3044\u5834\u5408\u306fStackOverFlowError\u306b\u306a\u3063\u3066\u3057\u307e\u3046\u3002\u3053\u308c\u3092\u30b9\u30bf\u30c3\u30af\u30bb\u30fc\u30d5\u3067\u306f\u306a\u3044\u3068\u8a00\u3046\u3002\n\u305d\u3046\u3057\u305f\u72b6\u6cc1\u3067\u3042\u308b\u3068\u4eee\u5b9a\u3057\u3001\u524d\u7ae0\u3067\u8aac\u660e\u3057\u305f\u624b\u6cd5\u3092\u4f7f\u3063\u3066\u3001\u30ea\u30b9\u30c8\u518d\u5e30\u306e\u7dcf\u79f0\u95a2\u6570foldLeft\u3092\u8a18\u8ff0\u305b\u3088\u3002\u30b7\u30b0\u30cd\u30c1\u30e3\u306f\u4ee5\u4e0b\u306e\u3068\u304a\u308a\ndef foldLeft[A,B](l: List[A], z: B)(f: (B, A) => B): B\n\n// answer \ndef foldLeft[A,B](l: List[A], z: B)(f: (B, A) => B): B = l match {\n  case Nil => z\n  case Cons(h,t) => foldLeft(t, f(z,h))(f)\n}\n\n\n// \u516c\u5f0f\u306eanswer\ndef foldLeft[A,B](l: List[A], z: B)(f: (B, A) => B): B = l match {\n  case Nil => z\n  case Cons(h,t) => foldLeft(t, f(z,h))(f)\n}\n\n\n\nEXERCISE 3.11\n// Q\nfoldLeft\u3092\u4f7f\u3063\u3066sum,product,\u304a\u3088\u3073\u30ea\u30b9\u30c8\u306e\u9577\u3055\u3092\u8a08\u7b97\u3059\u308b\u95a2\u6570\u3092\u8a18\u8ff0\u305b\u3088\u3002\n\n// answer\ndef sum(l: List[Int]): Int = foldLeft(l,0)(_+_)\ndef product(l: List[Int]): Int = foldLeft(l,1.0)(_*_)\ndef length[A](l: List[A]): Int = foldLeft(l,0)( (acc,_) => cnt + 1)\n\n// \u516c\u5f0f\u306eanswer\ndef sum3(l: List[Int]) = foldLeft(l, 0)(_ + _)\ndef product3(l: List[Double]) = foldLeft(l, 1.0)(_ * _)\ndef length2[A](l: List[A]): Int = foldLeft(l, 0)((acc,h) => acc + 1)\n\n\nEXERCISE 3.12\n// Q\n\u8981\u7d20\u304c\u9006\u306b\u4e26\u3093\u3060\u30ea\u30b9\u30c8\u3092\u8fd4\u3059\u95a2\u6570\u3092\u8a18\u8ff0\u305b\u3088\u3002List(1,2,3)\u304c\u4e0e\u3048\u3089\u308c\u305f\u5834\u5408\u3001\u3053\u306e\u95a2\u6570\u306fList(3,2,1)\u3092\u8fd4\u3059\u3002\n\u7573\u307f\u8fbc\u307f\u3092\u4f7f\u3063\u3066\u8a18\u8ff0\u3067\u304d\u308b\u304b\u3069\u3046\u304b\u3092\u78ba\u8a8d\u3059\u308b\u3053\u3068\u3002\n\n// answer\ndef reverse[A](l: List[A]): List[A] = foldLeft(l, List[A]())((acc,h) => Cons(h,acc))\n\n// \u516c\u5f0f\u306eanswer\ndef reverse[A](l: List[A]): List[A] = foldLeft(l, List[A]())((acc,h) => Cons(h,acc))\n\n\nEXERCISE 3.13\n// Q\n\u96e3\u554f: foldRight\u3092\u30d9\u30fc\u30b9\u3068\u3057\u3066foldLeft\u3092\u8a18\u8ff0\u3059\u308b\u3053\u3068\u306f\u53ef\u80fd\u304b\u3002\u305d\u306e\u9006\u306f\u3069\u3046\u304b\u3002\nfoldLeft\u3092\u4f7f\u3063\u3066foldRight\u3092\u5b9f\u88c5\u3059\u308b\u3068\u3001foldRight\u3092\u672b\u5c3e\u518d\u5e30\u7684\u306b\u5b9f\u88c5\u3059\u308b\u3053\u3068\u304c\u53ef\u80fd\u3068\u306a\u308a\u3001\n\u5927\u304d\u306a\u30ea\u30b9\u30c8\u3067\u3082\u30b9\u30bf\u30c3\u30af\u30aa\u30fc\u30d0\u30fc\u30d5\u30ed\u30fc\u304c\u767a\u751f\u3057\u306a\u304f\u306a\u308b\u306e\u3067\u4fbf\u5229\u3067\u3042\u308b\u3002\n\n// \u516c\u5f0f\u306eanswer\ndef foldRightLeft[A,B](l: List[A], z: B)(f: (A,B) => B): B = foldLeft(l, (b:B) => b)((e,a) => b => e(f(a,b)))(z)\ndef foldLeftRight[A,B](l: List[A], z: B)(f: (B,A) => B): B = foldRight(l, (b:B) => b)((a,e) => b => e(f(b,a)))(z)\n\n\u3071\u3063\u3068\u51fa\u3066\u3053\u306a\u304b\u3063\u305f\u306e\u3067\u516c\u5f0f\u306e\u56de\u7b54\u3092\u78ba\u8a8d\n\nEXERCISE 3.14\n// Q\nfoldLeft\u307e\u305f\u306ffoldRight\u3092\u30d9\u30fc\u30b9\u3068\u3057\u3066append\u3092\u5b9f\u88c5\u305b\u3088\u3002\n\n// answer\ndef append[A](l: List[A], z: A) = foldRight(l,List(z))(Cons(_,_))\ndef append[A](l: List[A], z: List[A]) = foldRight(l,z)(Cons(_,_))\n\n// \u516c\u5f0f\u306eanswer\ndef appendViaFoldRight[A](l: List[A], r: List[A]): List[A] =\n  foldRight(l, r)(Cons(_,_))\n\n1\u8981\u7d20\u3092append\u3059\u308b\u30e1\u30bd\u30c3\u30c9\u3082\u3064\u3051\u3066\u307f\u305f\n\nEXERCISE 3.15\n// Q \n\u96e3\u554f: \u8907\u6570\u306e\u30ea\u30b9\u30c8\u304b\u3089\u306a\u308b\u30ea\u30b9\u30c8\u30921\u3064\u306e\u30ea\u30b9\u30c8\u3068\u3057\u3066\u9023\u7d50\u3059\u308b\u95a2\u6570\u3092\u8a18\u8ff0\u305b\u3088\u3002\n\u3053\u306e\u95a2\u6570\u306e\u5b9f\u884c\u6642\u9593\u306f\u3059\u3079\u3066\u306e\u30ea\u30b9\u30c8\u306e\u9577\u3055\u306e\u5408\u8a08\u306b\u5bfe\u3057\u3066\u7dda\u5f62\u306b\u306a\u308b\u306f\u305a\u3067\u3042\u308b\u3002\n\u3059\u3067\u306b\u5b9a\u7fa9\u3057\u305f\u95a2\u6570\u3092\u4f7f\u3063\u3066\u307f\u308b\u3053\u3068\u3002\n\n// answer\ndef flatten[A](l: List[List[A]]): List[A] = foldRight(l, List[A]())((l,h) => append(_,_))\n\n// \u516c\u5f0f\u306eanswer\ndef concat[A](l: List[List[A]]): List[A] =\n  foldRight(l, Nil:List[A])(append)\n\n\nEXERCISE 3.16\n// Q\n\u5404\u8981\u7d20\u306b1\u3092\u8db3\u3059\u3053\u3068\u3067\u6574\u6570\u306e\u30ea\u30b9\u30c8\u3092\u5909\u63db\u3059\u308b\u95a2\u6570\u3092\u8a18\u8ff0\u305b\u3088\u3002\n\u6ce8\u610f: \u3053\u308c\u306f\u65b0\u3057\u3044List\u3092\u8fd4\u3059\u7d14\u7c8b\u95a2\u6570\u306b\u306a\u308b\u306f\u305a\u3067\u3042\u308b\u3002\n\n// answer\ndef allIncrement(l: List[Int]): List[Int] = foldRightLeft(l, List[Int]())( (a,b) => Cons(a + 1,b))\n\n//\u516c\u5f0f\u306eanswer\ndef add1(l: List[Int]): List[Int] =\n  foldRight(l, Nil:List[Int])((h,t) => Cons(h+1,t))\n\nfoldLeft\u3060\u3068\u9806\u756a\u304c\u5909\u308f\u308b\u306e\u3067Right\u3067\u3002\n\u30b9\u30ec\u30c3\u30c9\u30bb\u30fc\u30d5\u306b\u3059\u308b\u305f\u3081\u5148\u307b\u3069\u66f8\u3044\u305ffoldRightLeft\u3092\u4f7f\u7528\n\nEXERCISE 3.17\n// Q\nList[Double]\u306e\u5404\u5024\u3092String\u306b\u5909\u63db\u3059\u308b\u95a2\u6570\u3092\u8a18\u8ff0\u305b\u3088\u3002\nd.toString\u3068\u3044\u3046\u5f0f\u3092\u4f7f\u3063\u3066d: Double\u3092String\u306b\u5909\u63db\u3067\u304d\u308b\n\n// answer\ndef double2string(l: List[Double]): List[String] =\n  foldRightLeft(l, Nil:List[String])((h,t) => Cons(h.toString,t))\n\n// \u516c\u5f0f\u306eanswer\ndef doubleToString(l: List[Double]): List[String] = foldRight(l, Nil: List[String])((a, b) => Cons(a.toString, b))\n\n3.16\u306e\u5fdc\u7528\u3002\u7c21\u5358\n\nEXERCISE 3.18\n// Q\n\u30ea\u30b9\u30c8\u306e\u5404\u8981\u7d20\u3092\u5909\u66f4\u3057\u3001\u304b\u3064\u30ea\u30b9\u30c8\u306e\u69cb\u9020\u3092\u305d\u306e\u307e\u307e\u4fdd\u3064\u7dcf\u79f0\u95a2\u6570map\u3092\u8a18\u8ff0\u305b\u3088\u3002\n\u3053\u306e\u95a2\u6570\u306e\u30b7\u30b0\u30cd\u30c1\u30e3\u306f\u4ee5\u4e0b\u306e\u3068\u304a\u308a\ndef map[A,B](as: List[A])(f: A => B): List[B]\n\n// answer\ndef map[A,B](as: List[A])(f: A => B): List[B] = \n  foldRightLeft(as, Nil: List[B])((a,b) => Cons(f(a), b))\n\n// \u516c\u5f0f\u306eanswer\ndef map[A,B](l: List[A])(f: A => B): List[B] =\n  foldRight(l, Nil:List[B])((h,t) => Cons(f(h),t))\n\n3.16,3.17\u3067\u3084\u3063\u3066\u3044\u305f\u3053\u3068\u306f\u8981\u306fmap\u306a\u306e\u3067\u3053\u308c\u3089\u3092\u4e00\u822c\u5316\u3057\u3066\u307f\u305f\u3002\nlist\u304cl\u3060\u3063\u305f\u308aas\u3060\u3063\u305f\u308a\u3057\u3066\u30ad\u30e2\u30c1\u60aa\u3044\u3002 \n\nEXERCISE 3.19\n// Q\n\u4e0e\u3048\u3089\u308c\u305f\u8ff0\u8a9e\u6761\u4ef6\u304c\u6e80\u305f\u3055\u308c\u308b\u307e\u3067\u30ea\u30b9\u30c8\u304b\u3089\u8981\u7d20\u3092\u524a\u9664\u3059\u308bfilter\u95a2\u6570\u3092\u8a18\u8ff0\u305b\u3088\u3002\u3053\u306e\u95a2\u6570\u3092\u4f7f\u3063\u3066List[Int]\u304b\u3089\u5947\u6570\u3092\u3059\u3079\u3066\u524a\u9664\u305b\u3088\u3002\ndef filter[A](as: List[A])(f: A => Boolean): List[A]\n\n// answer \ndef filter[A](as: List[A])(f: A => Boolean): List[A] =\n  foldRightLeft(as, Nil: List[A])( (a, b) => if (f(a)) Cons(a, b) else b)\n\n// \u516c\u5f0f\u306eanswer\ndef filter[A](l: List[A])(f: A => Boolean): List[A] =\n  foldRight(l, Nil:List[A])((h,t) => if (f(h)) Cons(h,t) else t)\n\n\nEXERCISE 3.20\n// Q\nmap\u3068\u540c\u3058\u3088\u3046\u306a\u52d5\u304d\u3092\u3059\u308bflatMap\u95a2\u6570\u3092\u8a18\u8ff0\u305b\u3088\u3002\n\u3053\u306e\u95a2\u6570\u306f\u5358\u4e00\u306e\u7d50\u679c\u3067\u306f\u306a\u304f\u30ea\u30b9\u30c8\u3092\u8fd4\u3057\u3001\u305d\u306e\u30ea\u30b9\u30c8\u306f\u6700\u7d42\u7684\u306a\u7d50\u679c\u306e\u30ea\u30b9\u30c8\u306b\u633f\u5165\u3055\u308c\u306a\u3051\u308c\u3070\u306a\u3089\u306a\u3044\u3002\n\u3053\u306e\u95a2\u6570\u306e\u30b7\u30b0\u30cd\u30c1\u30e3\u306f\u4ee5\u4e0b\u306e\u3068\u304a\u308a\u3002\ndef flatMap[A,B](as: List[A])(f: A => List[B]): List[B]\n\n// answer\n\n// \u516c\u5f0f\u306eanswer\ndef flatMap[A,B](l: List[A])(f: A => List[B]): List[B] =\n  concat(map(l)(f))\n\n\u308f\u304b\u3089\u306a\u304b\u3063\u305f\u306e\u3067\u516c\u5f0f\u306e\u56de\u7b54\u3092\u78ba\u8a8d\u3002\nf\u306f\u306a\u305c\u3053\u308c\u3067\u3044\u3044\u306e\u3060\u308d\u3046\u3002map\u306e\u30b7\u30b0\u30cb\u30c1\u30e3\u306fA => B\u306a\u306e\u306b\u30fb\u30fb\u30fb\n\nEXERCISE 3.21\n// Q\nflatMap\u3092\u4f7f\u3063\u3066filter\u3092\u5b9f\u88c5\u305b\u3088\n\n// answer\ndef filter[A](as: List[A])(f: A => Boolean): List[A] = flatMap(as)(a => if (f(a)) List(a) else Nil)\n\n// \u516c\u5f0f\u306eanswer\ndef filterViaFlatMap[A](l: List[A])(f: A => Boolean): List[A] =\n  flatMap(l)(a => if (f(a)) List(a) else Nil)\n\n\nEXERCISE 3.22\n// Q\n\u30ea\u30b9\u30c8\u30922\u3064\u53d7\u3051\u53d6\u308a\u3001\u5bfe\u5fdc\u3059\u308b\u8981\u7d20\u52d5\u8a5e\u3092\u8db3\u3057\u3042\u308f\u305b\u3066\u65b0\u3057\u3044\u30ea\u30b9\u30c8\u3092\u751f\u6210\u3059\u308b\u95a2\u6570\u3092\u8a18\u8ff0\u305b\u3088\u3002\n\u305f\u3068\u3048\u3070\u3001List(1,2,3)\u3068List(4,5,6)\u306fList(5,7,9)\u306b\u306a\u308b\u3002\n\n// answer\ndef zipWithSum(a: List[Int], b: List[Int]): List[Int] = (a, b) match {\n  case (Nil, _) => Nil\n  case (_, Nil) => Nil\n  case (Cons(h1,t1), Cons(h2,t2)) => Cons(h1+h2,zipWithSum(t1,t2))\n}\n\n// \u516c\u5f0f\u306eanswer\ndef addPairwise(a: List[Int], b: List[Int]): List[Int] = (a,b) match {\n  case (Nil, _) => Nil\n  case (_, Nil) => Nil\n  case (Cons(h1,t1), Cons(h2,t2)) => Cons(h1+h2, addPairwise(t1,t2))\n}\n\n\nEXERCISE 3.23\n// Q\nEXERCISE 3.22\u3067\u4f5c\u6210\u3057\u305f\u95a2\u6570\u3092\u3001\u6574\u6570\u53c8\u306f\u52a0\u7b97\u306b\u9650\u5b9a\u3055\u308c\u306a\u3044\u3088\u3046\u306b\u4e00\u822c\u5316\u305b\u3088\u3002\n\u4e00\u822c\u5316\u3055\u308c\u305f\u95a2\u6570\u306b\u306fzipWith\u3068\u3044\u3046\u540d\u524d\u3092\u3064\u3051\u308b\u3053\u3068\u3002\n\n// answer\ndef zipWith[A,B,C](a: List[A], b: List[B])(f: (A,B) => C): List[C] = (a, b) match {\n  case (Nil, _) => Nil\n  case (_, Nil) => Nil\n  case (Cons(h1,t1), Cons(h2,t2)) => Cons(f(h1,h2),zipWith(t1,t2)(f))\n}\n\n// \u516c\u5f0f\u306eanswer\ndef zipWith[A,B,C](a: List[A], b: List[B])(f: (A,B) => C): List[C] = (a,b) match {\n  case (Nil, _) => Nil\n  case (_, Nil) => Nil\n  case (Cons(h1,t1), Cons(h2,t2)) => Cons(f(h1,h2), zipWith(t1,t2)(f))\n}\n\n\u516c\u5f0f\u306eList\u3067\u306fCons\u306f\uff1a\uff1a\u3068\u3057\u3066\u53c2\u7167\u3055\u308c\u308b\u3002\nList(1,2) == 1 :: 2 :: Nil == 1 :: (2 :: Nil)\ncase Cons(h,t) == case h :: t\n\nEXERCISE 3.24\n// Q\n\u96e3\u554f: \u4f8b\u3068\u3057\u3066\u3001List\u306b\u5225\u306eList\u304c\u30b5\u30d6\u30b7\u30fc\u30b1\u30f3\u30b9\u3068\u3057\u3066\u542b\u307e\u308c\u3066\u3044\u308b\u304b\u3069\u3046\u304b\u3092\u8abf\u3079\u308bhasSubsequence\u3092\u5b9f\u88c5\u305b\u3088\u3002\n\u305f\u3068\u3048\u3070List(1,2,3,4)\u306b\u306f\u3001List(1,2),List(2,3),List(4)\u306a\u3069\u304c\u30b5\u30d6\u30b7\u30fc\u30b1\u30f3\u30b9\u3068\u3057\u3066\u542b\u307e\u308c\u3066\u3044\u308b\u3002\n\u7d14\u7c8b\u95a2\u6570\u578b\u3067\u3001\u30b3\u30f3\u30d1\u30af\u30c8\u3067\u3001\u304b\u3064\u52b9\u7387\u7684\u306a\u5b9f\u88c5\u3092\u898b\u3064\u3051\u51fa\u3059\u306e\u306f\u96e3\u3057\u3044\u304b\u3082\u3057\u308c\u306a\u3044\u3002\u305d\u306e\u5834\u5408\u306f\u3001\u305d\u308c\u3067\u304b\u307e\u308f\u306a\u3044\u3002\n\u3069\u306e\u3088\u3046\u306a\u3082\u306e\u3067\u3042\u308c\u3001\u6700\u3082\u81ea\u7136\u306a\u95a2\u6570\u3092\u5b9f\u88c5\u3059\u308b\u3053\u3068\u3002\u3053\u306e\u5b9f\u88c5\u306b\u3064\u3044\u3066\u306f\u3001\u7b2c5\u7ae0\u3067\u6539\u3081\u3066\u53d6\u308a\u4e0a\u3052\u3001\u6539\u826f\u3059\u308b\u4e88\u5b9a\u3067\u3042\u308b\u3002\n\u306a\u304aScala\u3067\u306f\u3001\u4efb\u610f\u306e\u5024x\u304a\u3088\u3073y\u306b\u5bfe\u3057\u3001x == y\u3068\u3044\u3046\u5f0f\u3092\u4f7f\u3063\u3066\u7b49\u3057\u3044\u304b\u3069\u3046\u304b\u3092\u6bd4\u8f03\u3067\u304d\u308b\u3002\ndef hasSubsequence[A](sup: List[A], sub: List[A]): Boolean\n\n// \u516c\u5f0f\u306eanswer\n  @annotation.tailrec\n  def startsWith[A](l: List[A], prefix: List[A]): Boolean = (l,prefix) match {\n    case (_,Nil) => true\n    case (Cons(h,t),Cons(h2,t2)) if h == h2 => startsWith(t, t2)\n    case _ => false\n  }\n  @annotation.tailrec\n  def hasSubsequence[A](sup: List[A], sub: List[A]): Boolean = sup match {\n    case Nil => sub == Nil\n    case _ if startsWith(sup, sub) => true\n    case Cons(h,t) => hasSubsequence(t, sub)\n  }\n\n\n\u304e\u3076\n\nEXERCISE 3.25\n// Q\n2\u5206\u6728\u306e\u30ce\u30fc\u30c9(Leaf\u3068Branch)\u306e\u6570\u3092\u6570\u3048\u308bsize\u95a2\u6570\u3092\u8a18\u8ff0\u305b\u3088\u3002\n\n// answer\ndef size[A](tr: Tree[A]): Int = tr match {\n  case Leaf(_) => 1\n  case Branch(a,b) => 1 + size(a) + size(b)\n}\n\n// \u516c\u5f0f\u306eanswer\ndef size[A](t: Tree[A]): Int = t match {\n  case Leaf(_) => 1\n  case Branch(l,r) => 1 + size(l) + size(r)\n}\n\n\nEXERCISE 3.26\n// Q\nTree[Int]\u306e\u6700\u5927\u306e\u8981\u7d20\u3092\u8fd4\u3059maximum\u95a2\u6570\u3092\u8a18\u8ff0\u305b\u3088\u3002\n\u306a\u304aScala\u3067\u306f\u3001x.max(y)\u307e\u305f\u306fx max y\u3092\u4f7f\u3063\u30662\u3064\u306e\u6574\u6570x\u3068y\u306e\u6700\u5927\u5024\u3092\u8a08\u7b97\u3067\u304d\u308b\n\n// answer\ndef maximum(tr: Tree[Int]): Int = tr match {\n  case Leaf(x) => x\n  case Branch(a,b) => maximum(a) max maximum(b) \n}\n\n// \u516c\u5f0f\u306eanswer\ndef maximum(t: Tree[Int]): Int = t match {\n  case Leaf(n) => n\n  case Branch(l,r) => maximum(l) max maximum(r)\n}\n\n\nEXERCISE 3.27\n// Q\n2\u5206\u6728\u306e\u30eb\u30fc\u30c8\u304b\u3089\u4efb\u610f\u306eLeaf\u307e\u3067\u6700\u9577\u306e\u30d1\u30b9\u3092\u8fd4\u3059depth\u95a2\u6570\u3092\u8a18\u8ff0\u305b\u3088\u3002  \n\n// answer\ndef depth[A](t: Tree[A]): Int = t match {\n  case Leaf(_) => 0\n  case Branch(a,b) => 1 + (depth(a) max depth(b))  \n}\n\n// \u516c\u5f0f\u306eanswer\ndef depth[A](t: Tree[A]): Int = t match {\n  case Leaf(_) => 0\n  case Branch(l,r) => 1 + (depth(l) max depth(r))\n}\n\n\nEXERCISE 3.28\n// Q\n2\u5206\u6728\u306e\u5404\u8981\u7d20\u3092\u7279\u5b9a\u306e\u95a2\u6570\u3092\u4f7f\u3063\u3066\u5909\u66f4\u3059\u308bmap\u95a2\u6570\u3092\u8a18\u8ff0\u305b\u3088\u3002\n\u3053\u306e\u95a2\u6570\u306fList\u306e\u540c\u3058\u540d\u524d\u306e\u30e1\u30bd\u30c3\u30c9\u306b\u985e\u4f3c\u3057\u3066\u3044\u308b\u3002\n\ndef map[A,B](t: Tree[A])(f: A => B): Tree[B] = t match {\n  case Leaf(x) => Leaf(f(x))\n  case Branch(a,b) => Branch(map(a)(f),map(b)(f))\n}\n\n\nEXERCISE 3.29\n// Q\nsize,maximum,depth,map\u3092\u4e00\u822c\u5316\u3057\u3001\u305d\u308c\u3089\u306e\u985e\u4f3c\u70b9\u3092\u62bd\u8c61\u5316\u3059\u308b\u65b0\u3057\u3044fold\u95a2\u6570\u3092\u8a18\u8ff0\u305b\u3088\u3002\n\u305d\u3057\u3066\u3001\u3053\u306e\u3088\u308a\u6c4e\u7528\u7684\u306afold\u95a2\u6570\u3092\u4f7f\u3063\u3066\u305d\u308c\u3089\u3092\u518d\u5b9f\u88c5\u305b\u3088\u3002\n\u3053\u306efold\u95a2\u6570\u3068List\u306e\u5de6\u7573\u307f\u8fbc\u307f\u53ca\u3073\u53f3\u7573\u307f\u8fbc\u307f\u306e\u9593\u306b\u3042\u308b\u985e\u4f3c\u6027\u3092\u62bd\u51fa\u3059\u308b\u3053\u3068\u306f\u53ef\u80fd\u304b\u3002\n\n// answer \ndef fold[A,B](tr: Tree[A])(f1: A => B)(f2: (B,B) => B): B = tr match {\n  case Leaf(x) => f1(x)\n  case Branch(a,b) => f2(fold(a)(f1)(f2) ,fold(b)(f1)(f2)) \n}\n\ndef size[A](tr: Tree[A]): Int = fold(tr)(a => 1)(1 + _ + _)\ndef maximum(tr: Tree[Int]): Int = fold(tr)(a => a)(_ max _)\ndef depth[A](tr: Tree[A]): Int = fold(tr)(a => 0)(1 + _ max _)\ndef map[A,B](tr: Tree[A])(f: A => B): Tree[B] = fold(tr)(f)\n\n\n// \u516c\u5f0f\u306eanswer\ndef fold[A,B](t: Tree[A])(f: A => B)(g: (B,B) => B): B = t match {\n  case Leaf(a) => f(a)\n  case Branch(l,r) => g(fold(l)(f)(g), fold(r)(f)(g))\n}\n\ndef sizeViaFold[A](t: Tree[A]): Int = \n  fold(t)(a => 1)(1 + _ + _)\n\ndef maximumViaFold(t: Tree[Int]): Int = \n  fold(t)(a => a)(_ max _)\n\ndef depthViaFold[A](t: Tree[A]): Int = \n  fold(t)(a => 0)((d1,d2) => 1 + (d1 max d2))\n\ndef mapViaFold[A,B](t: Tree[A])(f: A => B): Tree[B] = \n  fold(t)(a => Leaf(f(a)): Tree[B])(Branch(_,_))\n\n\n# \u7b2c3\u7ae0 \u95a2\u6570\u578b\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u306e\u30c7\u30fc\u30bf\u69cb\u9020\n\n- \u30a2\u30ad\u30e5\u30fc\u30e0\u30ec\u30fc\u30bf\n\t- \u84c4\u5727\u6a5f\u3002fold\u3067\u7573\u307f\u8fbc\u3093\u3060\u7d50\u679c\u3092\u4fdd\u6301\u3059\u308b\u5909\u6570\u3092\u30a2\u30ad\u30e5\u30fc\u30e0\u30ec\u30fc\u30bf(acc)\u3068\u547c\u3076\u3053\u3068\u304c\u3042\u308b\u3002\n\n\n## EXERCISE 3.1\n\n```\n// Q\n\u4ee5\u4e0b\u306e\u30de\u30c3\u30c1\u5f0f\u306f\u3069\u306e\u3088\u3046\u306a\u7d50\u679c\u306b\u306a\u308b\u304b\n\nscala> val x = List(1,2,3,4,5) match {\n     | case Cons(x, Cons(2, Cons(4, _))) => x\n     | case Nil => 42\n     | case Cons(x, Cons(y, Cons(3, Cons(4,_)))) => x + y\n     | case Cons(h,t) => h+List.sum(t)\n     | case _ => 101\n     | }\nx: Int = 3\n```\n\n\n## EXERCISE 3.2\n\n```\n// Q\nList\u306e\u6700\u521d\u306e\u8981\u7d20\u3092\u524a\u9664\u3059\u308b\u95a2\u6570tail\u3092\u5b9f\u88c5\u305b\u3088\u3002\n\u5b9f\u884c\u6642\u9593\u306f\u4e00\u5b9a\n\n// answer\ndef tail[A](l: List[A]): List[A] = {\n  l match {\n    case Nil => throw new RuntimeException(\"empty list\")\n    case Cons(_,t) => t\n  }\n}\n\n// \u516c\u5f0f\u306eanswer\ndef tail[A](l: List[A]): List[A] = l match {\n    case Nil => sys.error(\"tail of empty list\")\n    case Cons(_,t) => t\n  }\n}\n```\n\n\u4e00\u81f4\n\n\n## EXERCISE 3.3\n\n```\n// Q\nEXERCISE 3.2\u3068\u540c\u3058\u8003\u3048\u306b\u57fa\u3065\u3044\u3066\u3001List\u306e\u6700\u521d\u306e\u8981\u7d20\u3092\u5225\u306e\u5024\u3068\u7f6e\u304d\u63db\u3048\u308bsetHead\u95a2\u6570\u3092\u5b9f\u88c5\u305b\u3088\n\n// answer\ndef setHead[A](l: List[A], h: A): List[A] = {\n  l match {\n    case Nil => throw new RuntimeException(\"empty list\")\n    case Cons(_,t) => Cons(h,t)\n  }\n}\n\n// \u516c\u5f0f\u306eanswer\ndef setHead[A](l: List[A], h: A): List[A] = l match {\n  case Nil => sys.error(\"setHead on empty list\")\n  case Cons(_,t) => Cons(h,t)\n}\n```\n\n\u4e00\u81f4\n\n\n## EXERCISE 3.4\n\n```\n// Q\ntail\u3092\u4e00\u822c\u5316\u3057\u3066\u3001\u30ea\u30b9\u30c8\u306e\u5148\u982d\u304b\u3089n\u500b\u306e\u8981\u7d20\u3092\u524a\u9664\u3059\u308bdrop\u3068\u3044\u3046\u95a2\u6570\u306b\u7f6e\u304d\u63db\u3048\u3088\u3002\n\u3053\u306e\u95a2\u6570\u306e\u5b9f\u884c\u6642\u9593\u306f\u524a\u9664\u3059\u308b\u8981\u7d20\u306e\u6570\u306b\u306e\u307f\u6bd4\u4f8b\u3059\u308b\u3053\u3068\u306b\u6ce8\u610f\u3002List\u5168\u4f53\u306e\u30b3\u30d4\u30fc\u3092\u4f5c\u6210\u3059\u308b\u5fc5\u8981\u306f\u306a\u3044\u3002\n\n// answer\ndef drop[A](l: List[A], n: Int): List[A] = {\n  if (0 <= n) drop(tail(l), n-1)\n  else l match {\n    case Nil => Nil\n    case Cons(_,t) => drop(t, n-1)\n  }\n}\n\n// \u516c\u5f0f\u306eanswer\ndef drop[A](l: List[A], n: Int): List[A] =\n  if (n <= 0) l\n  else l match {\n    case Nil => Nil\n    case Cons(_,t) => drop(t, n-1)\n  }\n\n```\n\n\u4e00\u81f4\n\n\n## EXERCISE 3.5\n\n```\n// Q\n\u8ff0\u8a9e\u3068\u30de\u30c3\u30c1\u3059\u308b\u5834\u5408\u306b\u9650\u308a\u3001List\u304b\u3089\u305d\u306e\u8981\u7d20\u307e\u3067\u306e\u8981\u7d20\u3092\u524a\u9664\u3059\u308bdropWhile\u3092\u5b9f\u88c5\u305b\u3088\u3002\n\n// answer\ndef dropWhile[A](l: List[A], f: A => Boolean): List[A] = {\n  l match {\n    case Cons(h,t) if f(h) => dropWhile(t, f)\n    case _ => l\n  }\n}\n\n// \u516c\u5f0f\u306eanswer\ndef dropWhile[A](l: List[A], f: A => Boolean): List[A] =\n  l match {\n    case Cons(h,t) if f(h) => dropWhile(t, f)\n    case _ => l\n  }\n\n```\n\n\u4e00\u81f4\u3002\n\n\n## EXERCISE 3.6\n\n```\n// Q\n\u3059\u3079\u3066\u304c\u3053\u306e\u3088\u3046\u306b\u3046\u307e\u304f\u3044\u304f\u308f\u3051\u3067\u306f\u306a\u3044\u3002List\u306e\u672b\u5c3e\u3092\u9664\u304f\u5168\u3066\u306e\u8981\u7d20\u3067\u69cb\u6210\u3055\u308c\u305fList\u3092\u8fd4\u3059init\u95a2\u6570\u3092\u5b9f\u88c5\u305b\u3088\u3002\nList(1,2,3,4)\u304c\u4e0e\u3048\u3089\u308c\u305f\u5834\u5408\u3001init\u306fList(1,2,3)\u3092\u8fd4\u3059\u3002\u3053\u306e\u95a2\u6570\u3092tail\u306e\u3088\u3046\u306b\u4e00\u5b9a\u6642\u9593\u3067\u5b9f\u88c5\u3067\u304d\u306a\u3044\u306e\u306f\u306a\u305c\u304b\u3002\n\n// answer\ndef init[A](l: List[A]): List[A] = {\n  l match {\n    case Nil => sys.error(\"empty list\")\n    case Cons(_,Nil) => Nil\n    case Cons(h,t) => Cons(h, init(t))\n  }\n}\n\nList\u304c\u5358\u65b9\u5411List\u3067\u3042\u308b\u305f\u3081\u3001\u305d\u308c\u306b\u81f3\u308b\u307e\u3067\u306e\u5168\u3066\u306e\u8981\u7d20\u3092\u8d70\u67fb\u3057\u306a\u3051\u308c\u3070\u306a\u3089\u306a\u3044\u3002\n\u3088\u3063\u3066\u3001\u30ea\u30b9\u30c8\u306e\u8981\u7d20\u6570\u306b\u5fdc\u3058\u305f\u51e6\u7406\u6642\u9593\u306b\u306a\u308b\u3002\n\n// \u516c\u5f0f\u306eanswer\ndef init[A](l: List[A]): List[A] =\n  l match {\n    case Nil => sys.error(\"init of empty list\")\n    case Cons(_,Nil) => Nil\n    case Cons(h,t) => Cons(h,init(t))\n  }\n\n```\n\n\n## EXERCISE 3.7\n\n```\n// Q\nfoldRight\u3092\u4f7f\u3063\u3066\u5b9f\u88c5\u3055\u308c\u305fproduct\u306f\u30010.0\u3092\u691c\u51fa\u3057\u305f\u5834\u5408\u306b\u3001\u76f4\u3061\u306b\u518d\u5e30\u3092\u4e2d\u6b62\u3057\u30660.0\u3092\u8fd4\u305b\u308b\u304b\u3002\u305d\u306e\u7406\u7531\u3092\u8aac\u660e\u305b\u3088\u3002\n\u5927\u304d\u306a\u30ea\u30b9\u30c8\u3067foldRight\u3092\u547c\u3073\u51fa\u3057\u305f\u5834\u5408\u306e\u77ed\u7d61\u306e\u4ed5\u7d44\u307f\u306b\u3064\u3044\u3066\u691c\u8a0e\u305b\u3088\u3002\u3053\u306e\u554f\u984c\u306f\u5965\u304c\u6df1\u3044\u305f\u3081\u3001\u7b2c5\u7ae0\u3067\u6539\u3081\u3066\u53d6\u308a\u4e0a\u3052\u308b\u3002\n\n// answer\n- foldRight\u3092\u4f7f\u3063\u3066\u5b9f\u88c5\u3055\u308c\u305fproduct\u306f\u30010.0\u3092\u691c\u51fa\u3057\u305f\u5834\u5408\u306b\u3001\u76f4\u3061\u306b\u518d\u5e30\u3092\u4e2d\u6b62\u3057\u30660.0\u3092\u8fd4\u305b\u308b\u304b\u3002 \n \u8fd4\u305b\u306a\u3044\u3002\u672b\u5c3e\u304b\u3089\u7573\u307f\u8fbc\u3080\u305f\u3081\u3002f(x, foldRight(xs, z)(f))\u3068\u306a\u3063\u3066\u304a\u308a\u3001\n foldRight(xs, z)\u3092\u6700\u5f8c\u307e\u3067\u6398\u3063\u3066\u3044\u304d\u3001\u5f0f\u304c\u5b8c\u6210\u3057\u305f\u5f8c\u306b\u9806\u6b21\u5024\u3092\u8fd4\u3057\u3066\u3044\u304f\u3002\u5de6->\u53f3\u3067\u5f0f\u3092\u5b8c\u6210\u3055\u305b\u3001\u53f3<-\u5de6\u3067\u5024\u3092\u8fd4\u3059\u3002\n \u3053\u306e\u305f\u3081\u3001\u76f4\u3061\u306b\u518d\u5e30\u3092\u4e2d\u6b62\u3057\u3066\u5024\u3092\u8fd4\u3059\u3053\u3068\u306f\u4e0d\u53ef\u80fd\u3002\n\n- \u5927\u304d\u306a\u30ea\u30b9\u30c8\u3067foldRight\u3092\u547c\u3073\u51fa\u3057\u305f\u5834\u5408\u306e\u77ed\u7d61\u306e\u4ed5\u7d44\u307f\u306b\u3064\u3044\u3066\u691c\u8a0e\u305b\u3088\u3002\n\u3000\u554f\u984c\u6587\u304c\u3061\u3087\u3063\u3068\u8aad\u307f\u53d6\u308c\u306a\u3044\u3002\u547c\u3073\u51fa\u3057\u305f\u969b\u306e\u30c7\u30e1\u30ea\u30c3\u30c8\u3060\u308d\u3046\u304b\u3002\n\u3000\u30b9\u30bf\u30c3\u30af\u30bb\u30fc\u30d5\u3067\u306f\u306a\u3044\u305f\u3081\u30b9\u30bf\u30c3\u30af\u30aa\u30fc\u30d0\u30fc\u30d5\u30ed\u30fc\u3059\u308b\u53ef\u80fd\u6027\u304c\u3042\u308b\u3002\n```\n\n\n## EXERCISE 3.8\n\n```\n// Q\nfoldRight(List(1,2,3),Nil:List[Int])(Cons(_,_))\u306e\u3088\u3046\u306b\u3001Nil\u304a\u3088\u3073Cons\u81ea\u4f53\u3092foldRight\u306b\u6e21\u3057\u305f\u5834\u5408\u306f\u3069\u3046\u306a\u308b\u304b\u3002\n\u3053\u308c\u304cfoldRight\u3068List\u306e\u30c7\u30fc\u30bf\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u3068\u306e\u95a2\u4fc2\u306b\u3064\u3044\u3066\u4f55\u3092\u8868\u3057\u3066\u3044\u308b\u3068\u601d\u3046\u304b\u3002\n\n// answer\n- foldRight(List(1,2,3), Nil:List[Int])(Cons(_,_))\u306e\u3088\u3046\u306b\u3001Nil\u304a\u3088\u3073Cons\u81ea\u4f53\u3092foldRight\u306b\u6e21\u3057\u305f\u5834\u5408\u306f\u3069\u3046\u306a\u308b\u304b\u3002\n\u3000Cons(1,Cons(2,Cons(3,Nil)))\u3092\u8fd4\u3059\n\n- \u3053\u308c\u304cfoldRight\u3068List\u306e\u30c7\u30fc\u30bf\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u3068\u306e\u95a2\u4fc2\u306b\u3064\u3044\u3066\u4f55\u3092\u8868\u3057\u3066\u3044\u308b\u3068\u601d\u3046\u304b\u3002\nNil\u306e\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u304c\u30a2\u30ad\u30e5\u30fc\u30e0\u30ec\u30fc\u30bf\u306e\u5f79\u5272\u3092\u679c\u305f\u3057\u3066\u3044\u308b\u3053\u3068\u306b\u3064\u3044\u3066\u8a00\u53ca\u3059\u308c\u3070\u3088\u3044\u306e\u3060\u308d\u3046\u304b\u30fb\u30fb\u30fb\uff1f\uff08\u6b63\u76f4\u826f\u304f\u5206\u304b\u3089\u306a\u3044\uff09\n```\n\n\n## EXERCISE 3.9\n\n```\n// Q\nfoldRight\u3092\u4f7f\u3063\u3066\u30ea\u30b9\u30c8\u306e\u9577\u3055\u3092\u8a08\u7b97\u305b\u3088\u3002\n\n// answer\ndef length[A](l: List[A]): Int = foldRight(l, 0)((_,cnt) => cnt + 1)\n\n// \u516c\u5f0f\u306eanswer\ndef length[A](l: List[A]): Int =\n  foldRight(l, 0)((_,acc) => acc + 1)\n```\n\nacc\u3063\u3066\u306a\u3093\u3058\u3083\u3002\u3068\u8abf\u3079\u3066\u307f\u308b\u3068\u30a2\u30ad\u30e5\u30fc\u30e0\u30ec\u30fc\u30bf(\u84c4\u5727\u6a5f)\u306e\u7565\u3089\u3057\u3044\u3002\n\u4eca\u5f8c\u4f7f\u3046\u3002\n\n\n## EXERCISE 3.10\n\n```\n// Q\n\u3053\u306efoldRight\u306e\u5b9f\u88c5\u306f\u672b\u5c3e\u518d\u5e30\u3067\u306f\u306a\u304f\u3001\u30ea\u30b9\u30c8\u304c\u5927\u304d\u3044\u5834\u5408\u306fStackOverFlowError\u306b\u306a\u3063\u3066\u3057\u307e\u3046\u3002\u3053\u308c\u3092\u30b9\u30bf\u30c3\u30af\u30bb\u30fc\u30d5\u3067\u306f\u306a\u3044\u3068\u8a00\u3046\u3002\n\u305d\u3046\u3057\u305f\u72b6\u6cc1\u3067\u3042\u308b\u3068\u4eee\u5b9a\u3057\u3001\u524d\u7ae0\u3067\u8aac\u660e\u3057\u305f\u624b\u6cd5\u3092\u4f7f\u3063\u3066\u3001\u30ea\u30b9\u30c8\u518d\u5e30\u306e\u7dcf\u79f0\u95a2\u6570foldLeft\u3092\u8a18\u8ff0\u305b\u3088\u3002\u30b7\u30b0\u30cd\u30c1\u30e3\u306f\u4ee5\u4e0b\u306e\u3068\u304a\u308a\ndef foldLeft[A,B](l: List[A], z: B)(f: (B, A) => B): B\n\n// answer \ndef foldLeft[A,B](l: List[A], z: B)(f: (B, A) => B): B = l match {\n  case Nil => z\n  case Cons(h,t) => foldLeft(t, f(z,h))(f)\n}\n\n\n// \u516c\u5f0f\u306eanswer\ndef foldLeft[A,B](l: List[A], z: B)(f: (B, A) => B): B = l match {\n  case Nil => z\n  case Cons(h,t) => foldLeft(t, f(z,h))(f)\n}\n\n```\n\n\n## EXERCISE 3.11\n\n```\n// Q\nfoldLeft\u3092\u4f7f\u3063\u3066sum,product,\u304a\u3088\u3073\u30ea\u30b9\u30c8\u306e\u9577\u3055\u3092\u8a08\u7b97\u3059\u308b\u95a2\u6570\u3092\u8a18\u8ff0\u305b\u3088\u3002\n\n// answer\ndef sum(l: List[Int]): Int = foldLeft(l,0)(_+_)\ndef product(l: List[Int]): Int = foldLeft(l,1.0)(_*_)\ndef length[A](l: List[A]): Int = foldLeft(l,0)( (acc,_) => cnt + 1)\n\n// \u516c\u5f0f\u306eanswer\ndef sum3(l: List[Int]) = foldLeft(l, 0)(_ + _)\ndef product3(l: List[Double]) = foldLeft(l, 1.0)(_ * _)\ndef length2[A](l: List[A]): Int = foldLeft(l, 0)((acc,h) => acc + 1)\n```\n\n\n## EXERCISE 3.12\n\n```\n// Q\n\u8981\u7d20\u304c\u9006\u306b\u4e26\u3093\u3060\u30ea\u30b9\u30c8\u3092\u8fd4\u3059\u95a2\u6570\u3092\u8a18\u8ff0\u305b\u3088\u3002List(1,2,3)\u304c\u4e0e\u3048\u3089\u308c\u305f\u5834\u5408\u3001\u3053\u306e\u95a2\u6570\u306fList(3,2,1)\u3092\u8fd4\u3059\u3002\n\u7573\u307f\u8fbc\u307f\u3092\u4f7f\u3063\u3066\u8a18\u8ff0\u3067\u304d\u308b\u304b\u3069\u3046\u304b\u3092\u78ba\u8a8d\u3059\u308b\u3053\u3068\u3002\n\n// answer\ndef reverse[A](l: List[A]): List[A] = foldLeft(l, List[A]())((acc,h) => Cons(h,acc))\n\n// \u516c\u5f0f\u306eanswer\ndef reverse[A](l: List[A]): List[A] = foldLeft(l, List[A]())((acc,h) => Cons(h,acc))\n```\n\n\n## EXERCISE 3.13\n\n```\n// Q\n\u96e3\u554f: foldRight\u3092\u30d9\u30fc\u30b9\u3068\u3057\u3066foldLeft\u3092\u8a18\u8ff0\u3059\u308b\u3053\u3068\u306f\u53ef\u80fd\u304b\u3002\u305d\u306e\u9006\u306f\u3069\u3046\u304b\u3002\nfoldLeft\u3092\u4f7f\u3063\u3066foldRight\u3092\u5b9f\u88c5\u3059\u308b\u3068\u3001foldRight\u3092\u672b\u5c3e\u518d\u5e30\u7684\u306b\u5b9f\u88c5\u3059\u308b\u3053\u3068\u304c\u53ef\u80fd\u3068\u306a\u308a\u3001\n\u5927\u304d\u306a\u30ea\u30b9\u30c8\u3067\u3082\u30b9\u30bf\u30c3\u30af\u30aa\u30fc\u30d0\u30fc\u30d5\u30ed\u30fc\u304c\u767a\u751f\u3057\u306a\u304f\u306a\u308b\u306e\u3067\u4fbf\u5229\u3067\u3042\u308b\u3002\n\n// \u516c\u5f0f\u306eanswer\ndef foldRightLeft[A,B](l: List[A], z: B)(f: (A,B) => B): B = foldLeft(l, (b:B) => b)((e,a) => b => e(f(a,b)))(z)\ndef foldLeftRight[A,B](l: List[A], z: B)(f: (B,A) => B): B = foldRight(l, (b:B) => b)((a,e) => b => e(f(b,a)))(z)\n```\n\u3071\u3063\u3068\u51fa\u3066\u3053\u306a\u304b\u3063\u305f\u306e\u3067\u516c\u5f0f\u306e\u56de\u7b54\u3092\u78ba\u8a8d\n\n\n## EXERCISE 3.14\n\n```\n// Q\nfoldLeft\u307e\u305f\u306ffoldRight\u3092\u30d9\u30fc\u30b9\u3068\u3057\u3066append\u3092\u5b9f\u88c5\u305b\u3088\u3002\n\n// answer\ndef append[A](l: List[A], z: A) = foldRight(l,List(z))(Cons(_,_))\ndef append[A](l: List[A], z: List[A]) = foldRight(l,z)(Cons(_,_))\n\n// \u516c\u5f0f\u306eanswer\ndef appendViaFoldRight[A](l: List[A], r: List[A]): List[A] =\n  foldRight(l, r)(Cons(_,_))\n```\n\n1\u8981\u7d20\u3092append\u3059\u308b\u30e1\u30bd\u30c3\u30c9\u3082\u3064\u3051\u3066\u307f\u305f\n\n\n## EXERCISE 3.15\n\n```\n// Q \n\u96e3\u554f: \u8907\u6570\u306e\u30ea\u30b9\u30c8\u304b\u3089\u306a\u308b\u30ea\u30b9\u30c8\u30921\u3064\u306e\u30ea\u30b9\u30c8\u3068\u3057\u3066\u9023\u7d50\u3059\u308b\u95a2\u6570\u3092\u8a18\u8ff0\u305b\u3088\u3002\n\u3053\u306e\u95a2\u6570\u306e\u5b9f\u884c\u6642\u9593\u306f\u3059\u3079\u3066\u306e\u30ea\u30b9\u30c8\u306e\u9577\u3055\u306e\u5408\u8a08\u306b\u5bfe\u3057\u3066\u7dda\u5f62\u306b\u306a\u308b\u306f\u305a\u3067\u3042\u308b\u3002\n\u3059\u3067\u306b\u5b9a\u7fa9\u3057\u305f\u95a2\u6570\u3092\u4f7f\u3063\u3066\u307f\u308b\u3053\u3068\u3002\n\n// answer\ndef flatten[A](l: List[List[A]]): List[A] = foldRight(l, List[A]())((l,h) => append(_,_))\n\n// \u516c\u5f0f\u306eanswer\ndef concat[A](l: List[List[A]]): List[A] =\n  foldRight(l, Nil:List[A])(append)\n```\n\n\n## EXERCISE 3.16\n\n```\n// Q\n\u5404\u8981\u7d20\u306b1\u3092\u8db3\u3059\u3053\u3068\u3067\u6574\u6570\u306e\u30ea\u30b9\u30c8\u3092\u5909\u63db\u3059\u308b\u95a2\u6570\u3092\u8a18\u8ff0\u305b\u3088\u3002\n\u6ce8\u610f: \u3053\u308c\u306f\u65b0\u3057\u3044List\u3092\u8fd4\u3059\u7d14\u7c8b\u95a2\u6570\u306b\u306a\u308b\u306f\u305a\u3067\u3042\u308b\u3002\n\n// answer\ndef allIncrement(l: List[Int]): List[Int] = foldRightLeft(l, List[Int]())( (a,b) => Cons(a + 1,b))\n\n//\u516c\u5f0f\u306eanswer\ndef add1(l: List[Int]): List[Int] =\n  foldRight(l, Nil:List[Int])((h,t) => Cons(h+1,t))\n```\n\nfoldLeft\u3060\u3068\u9806\u756a\u304c\u5909\u308f\u308b\u306e\u3067Right\u3067\u3002\n\u30b9\u30ec\u30c3\u30c9\u30bb\u30fc\u30d5\u306b\u3059\u308b\u305f\u3081\u5148\u307b\u3069\u66f8\u3044\u305ffoldRightLeft\u3092\u4f7f\u7528\n\n\n## EXERCISE 3.17\n\n```\n// Q\nList[Double]\u306e\u5404\u5024\u3092String\u306b\u5909\u63db\u3059\u308b\u95a2\u6570\u3092\u8a18\u8ff0\u305b\u3088\u3002\nd.toString\u3068\u3044\u3046\u5f0f\u3092\u4f7f\u3063\u3066d: Double\u3092String\u306b\u5909\u63db\u3067\u304d\u308b\n\n// answer\ndef double2string(l: List[Double]): List[String] =\n  foldRightLeft(l, Nil:List[String])((h,t) => Cons(h.toString,t))\n\n// \u516c\u5f0f\u306eanswer\ndef doubleToString(l: List[Double]): List[String] = foldRight(l, Nil: List[String])((a, b) => Cons(a.toString, b))\n```\n\n3.16\u306e\u5fdc\u7528\u3002\u7c21\u5358\n\n\n## EXERCISE 3.18\n\n```\n// Q\n\u30ea\u30b9\u30c8\u306e\u5404\u8981\u7d20\u3092\u5909\u66f4\u3057\u3001\u304b\u3064\u30ea\u30b9\u30c8\u306e\u69cb\u9020\u3092\u305d\u306e\u307e\u307e\u4fdd\u3064\u7dcf\u79f0\u95a2\u6570map\u3092\u8a18\u8ff0\u305b\u3088\u3002\n\u3053\u306e\u95a2\u6570\u306e\u30b7\u30b0\u30cd\u30c1\u30e3\u306f\u4ee5\u4e0b\u306e\u3068\u304a\u308a\ndef map[A,B](as: List[A])(f: A => B): List[B]\n\n// answer\ndef map[A,B](as: List[A])(f: A => B): List[B] = \n  foldRightLeft(as, Nil: List[B])((a,b) => Cons(f(a), b))\n\n// \u516c\u5f0f\u306eanswer\ndef map[A,B](l: List[A])(f: A => B): List[B] =\n  foldRight(l, Nil:List[B])((h,t) => Cons(f(h),t))\n```\n\n3.16,3.17\u3067\u3084\u3063\u3066\u3044\u305f\u3053\u3068\u306f\u8981\u306fmap\u306a\u306e\u3067\u3053\u308c\u3089\u3092\u4e00\u822c\u5316\u3057\u3066\u307f\u305f\u3002\nlist\u304cl\u3060\u3063\u305f\u308aas\u3060\u3063\u305f\u308a\u3057\u3066\u30ad\u30e2\u30c1\u60aa\u3044\u3002 \n\n\n## EXERCISE 3.19\n\n```\n// Q\n\u4e0e\u3048\u3089\u308c\u305f\u8ff0\u8a9e\u6761\u4ef6\u304c\u6e80\u305f\u3055\u308c\u308b\u307e\u3067\u30ea\u30b9\u30c8\u304b\u3089\u8981\u7d20\u3092\u524a\u9664\u3059\u308bfilter\u95a2\u6570\u3092\u8a18\u8ff0\u305b\u3088\u3002\u3053\u306e\u95a2\u6570\u3092\u4f7f\u3063\u3066List[Int]\u304b\u3089\u5947\u6570\u3092\u3059\u3079\u3066\u524a\u9664\u305b\u3088\u3002\ndef filter[A](as: List[A])(f: A => Boolean): List[A]\n\n// answer \ndef filter[A](as: List[A])(f: A => Boolean): List[A] =\n  foldRightLeft(as, Nil: List[A])( (a, b) => if (f(a)) Cons(a, b) else b)\n\n// \u516c\u5f0f\u306eanswer\ndef filter[A](l: List[A])(f: A => Boolean): List[A] =\n  foldRight(l, Nil:List[A])((h,t) => if (f(h)) Cons(h,t) else t)\n```\n\n\n## EXERCISE 3.20\n\n```\n// Q\nmap\u3068\u540c\u3058\u3088\u3046\u306a\u52d5\u304d\u3092\u3059\u308bflatMap\u95a2\u6570\u3092\u8a18\u8ff0\u305b\u3088\u3002\n\u3053\u306e\u95a2\u6570\u306f\u5358\u4e00\u306e\u7d50\u679c\u3067\u306f\u306a\u304f\u30ea\u30b9\u30c8\u3092\u8fd4\u3057\u3001\u305d\u306e\u30ea\u30b9\u30c8\u306f\u6700\u7d42\u7684\u306a\u7d50\u679c\u306e\u30ea\u30b9\u30c8\u306b\u633f\u5165\u3055\u308c\u306a\u3051\u308c\u3070\u306a\u3089\u306a\u3044\u3002\n\u3053\u306e\u95a2\u6570\u306e\u30b7\u30b0\u30cd\u30c1\u30e3\u306f\u4ee5\u4e0b\u306e\u3068\u304a\u308a\u3002\ndef flatMap[A,B](as: List[A])(f: A => List[B]): List[B]\n\n// answer\n\n// \u516c\u5f0f\u306eanswer\ndef flatMap[A,B](l: List[A])(f: A => List[B]): List[B] =\n  concat(map(l)(f))\n```\n\n\u308f\u304b\u3089\u306a\u304b\u3063\u305f\u306e\u3067\u516c\u5f0f\u306e\u56de\u7b54\u3092\u78ba\u8a8d\u3002\nf\u306f\u306a\u305c\u3053\u308c\u3067\u3044\u3044\u306e\u3060\u308d\u3046\u3002map\u306e\u30b7\u30b0\u30cb\u30c1\u30e3\u306fA => B\u306a\u306e\u306b\u30fb\u30fb\u30fb\n\n\n## EXERCISE 3.21\n\n```\n// Q\nflatMap\u3092\u4f7f\u3063\u3066filter\u3092\u5b9f\u88c5\u305b\u3088\n\n// answer\ndef filter[A](as: List[A])(f: A => Boolean): List[A] = flatMap(as)(a => if (f(a)) List(a) else Nil)\n\n// \u516c\u5f0f\u306eanswer\ndef filterViaFlatMap[A](l: List[A])(f: A => Boolean): List[A] =\n  flatMap(l)(a => if (f(a)) List(a) else Nil)\n```\n\n\n## EXERCISE 3.22\n\n```\n// Q\n\u30ea\u30b9\u30c8\u30922\u3064\u53d7\u3051\u53d6\u308a\u3001\u5bfe\u5fdc\u3059\u308b\u8981\u7d20\u52d5\u8a5e\u3092\u8db3\u3057\u3042\u308f\u305b\u3066\u65b0\u3057\u3044\u30ea\u30b9\u30c8\u3092\u751f\u6210\u3059\u308b\u95a2\u6570\u3092\u8a18\u8ff0\u305b\u3088\u3002\n\u305f\u3068\u3048\u3070\u3001List(1,2,3)\u3068List(4,5,6)\u306fList(5,7,9)\u306b\u306a\u308b\u3002\n\n// answer\ndef zipWithSum(a: List[Int], b: List[Int]): List[Int] = (a, b) match {\n  case (Nil, _) => Nil\n  case (_, Nil) => Nil\n  case (Cons(h1,t1), Cons(h2,t2)) => Cons(h1+h2,zipWithSum(t1,t2))\n}\n\n// \u516c\u5f0f\u306eanswer\ndef addPairwise(a: List[Int], b: List[Int]): List[Int] = (a,b) match {\n  case (Nil, _) => Nil\n  case (_, Nil) => Nil\n  case (Cons(h1,t1), Cons(h2,t2)) => Cons(h1+h2, addPairwise(t1,t2))\n}\n```\n\n\n## EXERCISE 3.23\n\n```\n// Q\nEXERCISE 3.22\u3067\u4f5c\u6210\u3057\u305f\u95a2\u6570\u3092\u3001\u6574\u6570\u53c8\u306f\u52a0\u7b97\u306b\u9650\u5b9a\u3055\u308c\u306a\u3044\u3088\u3046\u306b\u4e00\u822c\u5316\u305b\u3088\u3002\n\u4e00\u822c\u5316\u3055\u308c\u305f\u95a2\u6570\u306b\u306fzipWith\u3068\u3044\u3046\u540d\u524d\u3092\u3064\u3051\u308b\u3053\u3068\u3002\n\n// answer\ndef zipWith[A,B,C](a: List[A], b: List[B])(f: (A,B) => C): List[C] = (a, b) match {\n  case (Nil, _) => Nil\n  case (_, Nil) => Nil\n  case (Cons(h1,t1), Cons(h2,t2)) => Cons(f(h1,h2),zipWith(t1,t2)(f))\n}\n\n// \u516c\u5f0f\u306eanswer\ndef zipWith[A,B,C](a: List[A], b: List[B])(f: (A,B) => C): List[C] = (a,b) match {\n  case (Nil, _) => Nil\n  case (_, Nil) => Nil\n  case (Cons(h1,t1), Cons(h2,t2)) => Cons(f(h1,h2), zipWith(t1,t2)(f))\n}\n```\n\n\u516c\u5f0f\u306eList\u3067\u306fCons\u306f\uff1a\uff1a\u3068\u3057\u3066\u53c2\u7167\u3055\u308c\u308b\u3002\nList(1,2) == 1 :: 2 :: Nil == 1 :: (2 :: Nil)\ncase Cons(h,t) == case h :: t\n\n\n## EXERCISE 3.24\n\n```\n// Q\n\u96e3\u554f: \u4f8b\u3068\u3057\u3066\u3001List\u306b\u5225\u306eList\u304c\u30b5\u30d6\u30b7\u30fc\u30b1\u30f3\u30b9\u3068\u3057\u3066\u542b\u307e\u308c\u3066\u3044\u308b\u304b\u3069\u3046\u304b\u3092\u8abf\u3079\u308bhasSubsequence\u3092\u5b9f\u88c5\u305b\u3088\u3002\n\u305f\u3068\u3048\u3070List(1,2,3,4)\u306b\u306f\u3001List(1,2),List(2,3),List(4)\u306a\u3069\u304c\u30b5\u30d6\u30b7\u30fc\u30b1\u30f3\u30b9\u3068\u3057\u3066\u542b\u307e\u308c\u3066\u3044\u308b\u3002\n\u7d14\u7c8b\u95a2\u6570\u578b\u3067\u3001\u30b3\u30f3\u30d1\u30af\u30c8\u3067\u3001\u304b\u3064\u52b9\u7387\u7684\u306a\u5b9f\u88c5\u3092\u898b\u3064\u3051\u51fa\u3059\u306e\u306f\u96e3\u3057\u3044\u304b\u3082\u3057\u308c\u306a\u3044\u3002\u305d\u306e\u5834\u5408\u306f\u3001\u305d\u308c\u3067\u304b\u307e\u308f\u306a\u3044\u3002\n\u3069\u306e\u3088\u3046\u306a\u3082\u306e\u3067\u3042\u308c\u3001\u6700\u3082\u81ea\u7136\u306a\u95a2\u6570\u3092\u5b9f\u88c5\u3059\u308b\u3053\u3068\u3002\u3053\u306e\u5b9f\u88c5\u306b\u3064\u3044\u3066\u306f\u3001\u7b2c5\u7ae0\u3067\u6539\u3081\u3066\u53d6\u308a\u4e0a\u3052\u3001\u6539\u826f\u3059\u308b\u4e88\u5b9a\u3067\u3042\u308b\u3002\n\u306a\u304aScala\u3067\u306f\u3001\u4efb\u610f\u306e\u5024x\u304a\u3088\u3073y\u306b\u5bfe\u3057\u3001x == y\u3068\u3044\u3046\u5f0f\u3092\u4f7f\u3063\u3066\u7b49\u3057\u3044\u304b\u3069\u3046\u304b\u3092\u6bd4\u8f03\u3067\u304d\u308b\u3002\ndef hasSubsequence[A](sup: List[A], sub: List[A]): Boolean\n\n// \u516c\u5f0f\u306eanswer\n  @annotation.tailrec\n  def startsWith[A](l: List[A], prefix: List[A]): Boolean = (l,prefix) match {\n    case (_,Nil) => true\n    case (Cons(h,t),Cons(h2,t2)) if h == h2 => startsWith(t, t2)\n    case _ => false\n  }\n  @annotation.tailrec\n  def hasSubsequence[A](sup: List[A], sub: List[A]): Boolean = sup match {\n    case Nil => sub == Nil\n    case _ if startsWith(sup, sub) => true\n    case Cons(h,t) => hasSubsequence(t, sub)\n  }\n\n```\n\n\u304e\u3076\n\n\n## EXERCISE 3.25\n\n```\n// Q\n2\u5206\u6728\u306e\u30ce\u30fc\u30c9(Leaf\u3068Branch)\u306e\u6570\u3092\u6570\u3048\u308bsize\u95a2\u6570\u3092\u8a18\u8ff0\u305b\u3088\u3002\n\n// answer\ndef size[A](tr: Tree[A]): Int = tr match {\n  case Leaf(_) => 1\n  case Branch(a,b) => 1 + size(a) + size(b)\n}\n\n// \u516c\u5f0f\u306eanswer\ndef size[A](t: Tree[A]): Int = t match {\n  case Leaf(_) => 1\n  case Branch(l,r) => 1 + size(l) + size(r)\n}\n```\n\n\n## EXERCISE 3.26\n\n```\n// Q\nTree[Int]\u306e\u6700\u5927\u306e\u8981\u7d20\u3092\u8fd4\u3059maximum\u95a2\u6570\u3092\u8a18\u8ff0\u305b\u3088\u3002\n\u306a\u304aScala\u3067\u306f\u3001x.max(y)\u307e\u305f\u306fx max y\u3092\u4f7f\u3063\u30662\u3064\u306e\u6574\u6570x\u3068y\u306e\u6700\u5927\u5024\u3092\u8a08\u7b97\u3067\u304d\u308b\n\n// answer\ndef maximum(tr: Tree[Int]): Int = tr match {\n  case Leaf(x) => x\n  case Branch(a,b) => maximum(a) max maximum(b) \n}\n\n// \u516c\u5f0f\u306eanswer\ndef maximum(t: Tree[Int]): Int = t match {\n  case Leaf(n) => n\n  case Branch(l,r) => maximum(l) max maximum(r)\n}\n```\n\n\n## EXERCISE 3.27\n\n```\n// Q\n2\u5206\u6728\u306e\u30eb\u30fc\u30c8\u304b\u3089\u4efb\u610f\u306eLeaf\u307e\u3067\u6700\u9577\u306e\u30d1\u30b9\u3092\u8fd4\u3059depth\u95a2\u6570\u3092\u8a18\u8ff0\u305b\u3088\u3002  \n\n// answer\ndef depth[A](t: Tree[A]): Int = t match {\n  case Leaf(_) => 0\n  case Branch(a,b) => 1 + (depth(a) max depth(b))  \n}\n\n// \u516c\u5f0f\u306eanswer\ndef depth[A](t: Tree[A]): Int = t match {\n  case Leaf(_) => 0\n  case Branch(l,r) => 1 + (depth(l) max depth(r))\n}\n```\n\n\n## EXERCISE 3.28\n\n```\n// Q\n2\u5206\u6728\u306e\u5404\u8981\u7d20\u3092\u7279\u5b9a\u306e\u95a2\u6570\u3092\u4f7f\u3063\u3066\u5909\u66f4\u3059\u308bmap\u95a2\u6570\u3092\u8a18\u8ff0\u305b\u3088\u3002\n\u3053\u306e\u95a2\u6570\u306fList\u306e\u540c\u3058\u540d\u524d\u306e\u30e1\u30bd\u30c3\u30c9\u306b\u985e\u4f3c\u3057\u3066\u3044\u308b\u3002\n\ndef map[A,B](t: Tree[A])(f: A => B): Tree[B] = t match {\n  case Leaf(x) => Leaf(f(x))\n  case Branch(a,b) => Branch(map(a)(f),map(b)(f))\n}\n```\n\n\n## EXERCISE 3.29\n\n```\n// Q\nsize,maximum,depth,map\u3092\u4e00\u822c\u5316\u3057\u3001\u305d\u308c\u3089\u306e\u985e\u4f3c\u70b9\u3092\u62bd\u8c61\u5316\u3059\u308b\u65b0\u3057\u3044fold\u95a2\u6570\u3092\u8a18\u8ff0\u305b\u3088\u3002\n\u305d\u3057\u3066\u3001\u3053\u306e\u3088\u308a\u6c4e\u7528\u7684\u306afold\u95a2\u6570\u3092\u4f7f\u3063\u3066\u305d\u308c\u3089\u3092\u518d\u5b9f\u88c5\u305b\u3088\u3002\n\u3053\u306efold\u95a2\u6570\u3068List\u306e\u5de6\u7573\u307f\u8fbc\u307f\u53ca\u3073\u53f3\u7573\u307f\u8fbc\u307f\u306e\u9593\u306b\u3042\u308b\u985e\u4f3c\u6027\u3092\u62bd\u51fa\u3059\u308b\u3053\u3068\u306f\u53ef\u80fd\u304b\u3002\n\n// answer \ndef fold[A,B](tr: Tree[A])(f1: A => B)(f2: (B,B) => B): B = tr match {\n  case Leaf(x) => f1(x)\n  case Branch(a,b) => f2(fold(a)(f1)(f2) ,fold(b)(f1)(f2)) \n}\n\ndef size[A](tr: Tree[A]): Int = fold(tr)(a => 1)(1 + _ + _)\ndef maximum(tr: Tree[Int]): Int = fold(tr)(a => a)(_ max _)\ndef depth[A](tr: Tree[A]): Int = fold(tr)(a => 0)(1 + _ max _)\ndef map[A,B](tr: Tree[A])(f: A => B): Tree[B] = fold(tr)(f)\n\n\n// \u516c\u5f0f\u306eanswer\ndef fold[A,B](t: Tree[A])(f: A => B)(g: (B,B) => B): B = t match {\n  case Leaf(a) => f(a)\n  case Branch(l,r) => g(fold(l)(f)(g), fold(r)(f)(g))\n}\n \ndef sizeViaFold[A](t: Tree[A]): Int = \n  fold(t)(a => 1)(1 + _ + _)\n  \ndef maximumViaFold(t: Tree[Int]): Int = \n  fold(t)(a => a)(_ max _)\n  \ndef depthViaFold[A](t: Tree[A]): Int = \n  fold(t)(a => 0)((d1,d2) => 1 + (d1 max d2))\n  \ndef mapViaFold[A,B](t: Tree[A])(f: A => B): Tree[B] = \n  fold(t)(a => Leaf(f(a)): Tree[B])(Branch(_,_))\n```\n", "tags": ["\u95a2\u6570\u578b\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0", "Scala"]}