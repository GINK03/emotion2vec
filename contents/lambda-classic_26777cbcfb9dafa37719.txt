{"context": " More than 1 year has passed since last update.paiza\u306e\u30aa\u30f3\u30e9\u30f3\u30cf\u30c3\u30ab\u30bd\u30f3 Vol.5 Mission MINAMI\u306eC++\u30d7\u30ed\u30b0\u30e9\u30e0\u3067\u3059\uff0e\n#include <iostream>\n#include <vector>\n#include <algorithm>\n\nusing namespace std;\n\ntemplate<class Type>\nclass Matrix{\nprivate:\n    using vector_matrix = vector<vector<Type>>;\n    const pair<int, int> size;\n    vector_matrix data;\npublic:\n    Matrix(const pair<size_t, size_t>& _size)\n        :size{_size}, data(size.first, vector<Type>(size.second, 0)){\n    };\n\n    ~Matrix() = default;\n\n    Matrix(const Matrix<Type>&) = default;\n    Matrix<Type>& operator=(const Matrix<Type>&) = default;\n\n    const vector<Type>& operator[](const int index) const{\n        return this->data[index];\n    }\n\n    vector<Type>& operator[](const int index){\n        return this->data[index];\n    }\n\n    pair<size_t, size_t> getSize() const{\n        return this->size;\n    }\n\n    typename vector_matrix::iterator begin(){\n        return this->data.begin();\n    }\n\n    typename vector_matrix::iterator end(){\n        return this->data.end();\n    }\n};\n\ntemplate<class Type, class OutputStream>\nOutputStream& operator<<(OutputStream& stream, const Matrix<Type>& data){\n    const pair<int, int>& size = data.getSize();\n\n    for(size_t row = 0; row < size.second; ++row){\n        for(size_t column = 0; column < size.first; ++column){\n             stream << data[column][row] << ((column < size.first - 1) ? \" \" : \"\");\n        }\n\n        stream << endl;\n     }\n\n     return stream;\n}\n\ntemplate<class Type, class InputStream>\nMatrix<Type> createMatirxData(InputStream& stream, const pair<size_t, size_t>& size){\n     Matrix<Type> data(size);\n     for(int row = 0; row < size.second; ++row){\n        for(int column = 0; column < size.first; ++column){\n             stream >> data[column][row];\n        }\n     }\n\n     return data;\n}\n\ntemplate<class Type>\nvoid deleteBom(vector<Type>& record){\n    const auto last = remove(record.rbegin(), record.rend(), 2);\n    transform(last, record.rend(), last, [](const Type){ return 0;});\n}\n\ntemplate<class Type>\nvoid deleteBom(Matrix<Type>& board){\n    for_each(board.begin(), board.end(), [](vector<Type>& record){\n        deleteBom(record);\n    });\n}\n\nint main(void){\n    size_t column, row;\n    cin >> column >> row;\n\n    Matrix<int> board = createMatirxData<int>(cin, make_pair(column, row));\n    deleteBom(board);\n\n    cout << board;\n\n    return 0;\n}\n\n\u25a0\u7d50\u679c\n\u3000\u63d0\u51fa\u8a00\u8a9e\uff1aC++\n\u3000\u5f97\u70b9\uff1a100 \u70b9\n\u3000\u7d50\u679c\uff1a\n\u3000\u30c6\u30b9\u30c8\u30b1\u30fc\u30b91\uff1asuccess\u30000.01\u79d2\n\u3000\u30c6\u30b9\u30c8\u30b1\u30fc\u30b92\uff1asuccess\u30000.01\u79d2\n\u3000\u30c6\u30b9\u30c8\u30b1\u30fc\u30b93\uff1asuccess\u30000.01\u79d2\n\u3000\u30c6\u30b9\u30c8\u30b1\u30fc\u30b94\uff1asuccess\u30000.01\u79d2\n\u3000\u30c6\u30b9\u30c8\u30b1\u30fc\u30b95\uff1asuccess\u30000.01\u79d2\n\npaiza\u306e\u30aa\u30f3\u30e9\u30f3\u30cf\u30c3\u30ab\u30bd\u30f3 Vol.5 Mission MINAMI\u306eC++\u30d7\u30ed\u30b0\u30e9\u30e0\u3067\u3059\uff0e\n\n```cpp\n#include <iostream>\n#include <vector>\n#include <algorithm>\n\nusing namespace std;\n\ntemplate<class Type>\nclass Matrix{\nprivate:\n    using vector_matrix = vector<vector<Type>>;\n    const pair<int, int> size;\n    vector_matrix data;\npublic:\n    Matrix(const pair<size_t, size_t>& _size)\n        :size{_size}, data(size.first, vector<Type>(size.second, 0)){\n    };\n    \n    ~Matrix() = default;\n    \n    Matrix(const Matrix<Type>&) = default;\n    Matrix<Type>& operator=(const Matrix<Type>&) = default;\n\n    const vector<Type>& operator[](const int index) const{\n        return this->data[index];\n    }\n    \n    vector<Type>& operator[](const int index){\n        return this->data[index];\n    }\n    \n    pair<size_t, size_t> getSize() const{\n        return this->size;\n    }\n    \n    typename vector_matrix::iterator begin(){\n        return this->data.begin();\n    }\n\n    typename vector_matrix::iterator end(){\n        return this->data.end();\n    }\n};\n\ntemplate<class Type, class OutputStream>\nOutputStream& operator<<(OutputStream& stream, const Matrix<Type>& data){\n    const pair<int, int>& size = data.getSize();\n    \n    for(size_t row = 0; row < size.second; ++row){\n        for(size_t column = 0; column < size.first; ++column){\n             stream << data[column][row] << ((column < size.first - 1) ? \" \" : \"\");\n        }\n        \n        stream << endl;\n     }\n     \n     return stream;\n}\n\ntemplate<class Type, class InputStream>\nMatrix<Type> createMatirxData(InputStream& stream, const pair<size_t, size_t>& size){\n     Matrix<Type> data(size);\n     for(int row = 0; row < size.second; ++row){\n        for(int column = 0; column < size.first; ++column){\n             stream >> data[column][row];\n        }\n     }\n     \n     return data;\n}\n\ntemplate<class Type>\nvoid deleteBom(vector<Type>& record){\n    const auto last = remove(record.rbegin(), record.rend(), 2);\n    transform(last, record.rend(), last, [](const Type){ return 0;});\n}\n\ntemplate<class Type>\nvoid deleteBom(Matrix<Type>& board){\n    for_each(board.begin(), board.end(), [](vector<Type>& record){\n        deleteBom(record);\n    });\n}\n\nint main(void){\n    size_t column, row;\n    cin >> column >> row;\n    \n    Matrix<int> board = createMatirxData<int>(cin, make_pair(column, row));\n    deleteBom(board);\n    \n    cout << board;\n    \n    return 0;\n}\n```\n\n\u25a0\u7d50\u679c\n\u3000\u63d0\u51fa\u8a00\u8a9e\uff1aC++\n\u3000\u5f97\u70b9\uff1a100 \u70b9\n\n\u3000\u7d50\u679c\uff1a\n\u3000\u30c6\u30b9\u30c8\u30b1\u30fc\u30b91\uff1asuccess\u30000.01\u79d2\n\u3000\u30c6\u30b9\u30c8\u30b1\u30fc\u30b92\uff1asuccess\u30000.01\u79d2\n\u3000\u30c6\u30b9\u30c8\u30b1\u30fc\u30b93\uff1asuccess\u30000.01\u79d2\n\u3000\u30c6\u30b9\u30c8\u30b1\u30fc\u30b94\uff1asuccess\u30000.01\u79d2\n\u3000\u30c6\u30b9\u30c8\u30b1\u30fc\u30b95\uff1asuccess\u30000.01\u79d2\n", "tags": ["C++", "C++11", "paiza"]}