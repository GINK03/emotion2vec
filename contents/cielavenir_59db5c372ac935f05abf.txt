{"tags": ["C#", "codeiq", "Python", "Ruby", "\u7af6\u6280\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0"], "context": "CodeIQ 2812 \u300c\u30ec\u30c3\u30c9\u30fb\u30a2\u30f3\u30c9\u30fb\u30db\u30ef\u30a4\u30c8\u300d\u554f\u984c\u3002\u554f\u984c\u306e\u6982\u8981\u306f\u89e3\u8aac\u3092\u53c2\u7167\u3057\u3066\u3044\u305f\u3060\u304f\u3068\u3057\u3066\u3001\u8981\u3059\u308b\u306b\u30011<<popcount(n)\u3092\u51fa\u529b\u3059\u308c\u3070\u826f\u3044\u3002\nC\u8a00\u8a9e\u3067\u89e3\u304f\u306a\u3089\u3001\nn;main(){scanf(\"%d\",&n);n=!printf(\"%d\\n\",1<<__builtin_popcount(n));}\n\n\u3068\u306a\u308b\u304c\u3001\u3053\u306e__builtin_popcount\u3092C\u4ee5\u5916\u304b\u3089\u547c\u3076\u306b\u306f\u4e00\u5de5\u592b\u5fc5\u8981\u306b\u306a\u308b\u3002\n\u8abf\u67fb\u306e\u7d50\u679c\u3001Linux\u3067\u306f__sched_popcount()\u3001OSX\u3067\u306f__popcountdi2()\u304c\u4f7f\u3048\u308b\u3053\u3068\u304c\u5224\u660e\u3057\u305f\u3002\nint __sched_popcount(size_t siz,long *a)\u3068\u3044\u3046\u30b7\u30b0\u30cd\u30c1\u30e3\u3067\u3042\u308b\u304c\u3001(8,long long[1]{\u2026})\u3092\u6e21\u3057\u3066\u3082\u3068\u308a\u3042\u3048\u305a\u52d5\u304f\u3002\u5f8c\u8005\u304c\u300132bit\u74b0\u5883\u3067\u306fint[2]{\u2026}\u3068\u89e3\u91c8\u3055\u308c\u3001__sched_popcount\u306f\u305d\u306e\u548c\u3092\u8fd4\u3059\u305f\u3081\u3067\u3042\u308b\u3002\nRuby/Python/C#\u3067\u3001\u3053\u308c\u3089\u306e\u95a2\u6570\u3092\u547c\u3076\u306b\u306f\u6b21\u306b\u3088\u3046\u306b\u3059\u308b\u3002\n\u306a\u304a\u3001\u30de\u30b8\u30c3\u30af\u30ca\u30f3\u30d0\u30fc8\u306f\u3067\u304d\u308c\u3070\u907f\u3051\u308b\u3079\u304d\u3082\u306e\u3067\u3042\u308b\u3002Python\u306fctypes.sizeof(ctypes.c_long)\u3068\u3057\u3066\u3044\u308b\u306e\u3067\u6700\u3082\u6b63\u78ba\u3067\u3042\u308b\u3002\n\nRuby\n\n#!/usr/bin/ruby\nif RUBY_PLATFORM=~/linux/\n    if true\n        require 'fiddle'\n        __popcount_fn=Fiddle::Function.new(Fiddle::Handle::DEFAULT['__sched_cpucount'],[Fiddle::TYPE_INT,Fiddle::TYPE_VOIDP],Fiddle::TYPE_INT)\n        define_method(:popcount){|n|__popcount_fn.call(8,[n].pack('q'))}\n    else\n        require 'fiddle/import'\n        module LibC\n            extend Fiddle::Importer\n            dlload 'libc.so.6'\n            extern 'int __sched_cpucount(int,long long*)'\n        end\n        def popcount(n) LibC.__popcountdi2(8,[n]) end\n    end\nelsif RUBY_PLATFORM=~/darwin/\n    if true\n        require 'fiddle'\n        __popcount_fn=Fiddle::Function.new(Fiddle::Handle::DEFAULT['__popcountdi2'],[Fiddle::TYPE_LONG],Fiddle::TYPE_INT)\n        define_method(:popcount){|n|__popcount_fn.call(n)}\n    else\n        require 'fiddle/import'\n        module LibC\n            extend Fiddle::Importer\n            dlload 'libSystem.dylib'\n            extern 'int __popcountdi2(long)'\n        end\n        def popcount(n) LibC.__popcountdi2(n) end\n    end\nelse\n    def popcount(n) n==0 ? 0 : popcount(n/2)+n%2 end\nend\n\np 1<<popcount(gets.to_i)\n\n\u306a\u304a\u3001CodeIQ\u306eRuby\u306f1.9.3\u3067\u3042\u308b\u305f\u3081\u3001\u6b21\u306e\u3088\u3046\u306b\u3059\u308b\u3002\u30b0\u30ed\u30fc\u30d0\u30eb\u5909\u6570\u304c\u3042\u308b\u306e\u3067\u6c5a\u3044\u304c\u3001\u3084\u3080\u3092\u5f97\u306a\u3044\u3002\nrequire 'fiddle'\nrequire 'dl'\n$__popcount_fn=Fiddle::Function.new(DL::Handle::DEFAULT['__sched_cpucount'],[Fiddle::TYPE_INT,Fiddle::TYPE_VOIDP],Fiddle::TYPE_INT)\ndef popcount(n) $__popcount_fn.call(8,[n].pack('q')) end\n\n\nPython\n\n#!/usr/bin/python\nimport sys,ctypes\nif sys.version_info[0]>=3:\n    raw_input=input\n    xrange=range\n\nif sys.platform.startswith('linux'):\n    libc=ctypes.cdll.LoadLibrary('libc.so.6')\n    popcount=lambda n:libc.__sched_cpucount(ctypes.sizeof(ctypes.c_long),(ctypes.c_long*1)(n))\nelif sys.platform=='darwin':\n    libc=ctypes.cdll.LoadLibrary('libSystem.dylib')\n    popcount=lambda n:libc.__popcountdi2(n)\nelse:\n    popcount=lambda n:0 if n==0 else popcount(n/2)+n%2\n\nprint(1<<popcount(int(raw_input())))\n\n\nC#\n\nusing System;\nusing System.Runtime.InteropServices;\n\nclass CodeIQ2812{\n    [DllImport(\"msvcrt\",CallingConvention=CallingConvention.Cdecl)]static extern int __popcountdi2(long n);\n    [DllImport(\"msvcrt\",CallingConvention=CallingConvention.Cdecl)]static extern int __sched_cpucount(int n, long[] a);\n\n    static int popcount(long n){\n        //\u30b3\u30f3\u30d1\u30a4\u30eb\u6642\u306b\u5224\u5225\u3059\u308b\u624b\u6bb5\u304c\u306a\u3044\u306e\u3067\u9069\u5207\u306b\u30b3\u30e1\u30f3\u30c8\u30a2\u30a6\u30c8\u3059\u308b\u3053\u3068\n        //return __popcountdi2(n);\n        return __sched_cpucount(8,new long[]{n});\n        //return n==0 ? 0 : popcount(n/2)+(int)(n%2);\n    }\n    static void Main(){\n        int n=int.Parse(Console.ReadLine());\n        Console.WriteLine(1<<popcount(n));\n    }\n}\n\n\n\u6700\u5f8c\u306b\n\n\u30de\u30fc\u30b7\u30e3\u30ea\u30f3\u30b0\u306e\u30aa\u30fc\u30d0\u30fc\u30d8\u30c3\u30c9\u306e\u307b\u3046\u304c\u5927\u304d\u3044\u5834\u5408\u304c\u3042\u308b\u306e\u3067\u306f\u306a\u3044\u304b\u3068\u601d\u3063\u305f\u65b9\u3001\u591a\u5206\u5f53\u305f\u308a\u3067\u3059\u3002\u3053\u306e\u65b9\u6cd5\u306e\u3054\u5229\u7528\u306f\u8a08\u753b\u7684\u306b\u3002\n\n[CodeIQ 2812 \u300c\u30ec\u30c3\u30c9\u30fb\u30a2\u30f3\u30c9\u30fb\u30db\u30ef\u30a4\u30c8\u300d\u554f\u984c](https://codeiq.jp/q/2812)\u3002\u554f\u984c\u306e\u6982\u8981\u306f[\u89e3\u8aac](https://codeiq.jp/magazine/2016/05/41263/)\u3092\u53c2\u7167\u3057\u3066\u3044\u305f\u3060\u304f\u3068\u3057\u3066\u3001\u8981\u3059\u308b\u306b\u3001`1<<popcount(n)`\u3092\u51fa\u529b\u3059\u308c\u3070\u826f\u3044\u3002\nC\u8a00\u8a9e\u3067\u89e3\u304f\u306a\u3089\u3001\n\n```c\nn;main(){scanf(\"%d\",&n);n=!printf(\"%d\\n\",1<<__builtin_popcount(n));}\n```\n\n\u3068\u306a\u308b\u304c\u3001\u3053\u306e`__builtin_popcount`\u3092C\u4ee5\u5916\u304b\u3089\u547c\u3076\u306b\u306f\u4e00\u5de5\u592b\u5fc5\u8981\u306b\u306a\u308b\u3002\n\u8abf\u67fb\u306e\u7d50\u679c\u3001Linux\u3067\u306f`__sched_popcount()`\u3001OSX\u3067\u306f`__popcountdi2()`\u304c\u4f7f\u3048\u308b\u3053\u3068\u304c\u5224\u660e\u3057\u305f\u3002\n`int __sched_popcount(size_t siz,long *a)`\u3068\u3044\u3046\u30b7\u30b0\u30cd\u30c1\u30e3\u3067\u3042\u308b\u304c\u3001`(8,long long[1]{\u2026})`\u3092\u6e21\u3057\u3066\u3082\u3068\u308a\u3042\u3048\u305a\u52d5\u304f\u3002\u5f8c\u8005\u304c\u300132bit\u74b0\u5883\u3067\u306f`int[2]{\u2026}`\u3068\u89e3\u91c8\u3055\u308c\u3001__sched_popcount\u306f\u305d\u306e\u548c\u3092\u8fd4\u3059\u305f\u3081\u3067\u3042\u308b\u3002\n\nRuby/Python/C#\u3067\u3001\u3053\u308c\u3089\u306e\u95a2\u6570\u3092\u547c\u3076\u306b\u306f\u6b21\u306b\u3088\u3046\u306b\u3059\u308b\u3002\n\u306a\u304a\u3001\u30de\u30b8\u30c3\u30af\u30ca\u30f3\u30d0\u30fc8\u306f\u3067\u304d\u308c\u3070\u907f\u3051\u308b\u3079\u304d\u3082\u306e\u3067\u3042\u308b\u3002Python\u306f`ctypes.sizeof(ctypes.c_long)`\u3068\u3057\u3066\u3044\u308b\u306e\u3067\u6700\u3082\u6b63\u78ba\u3067\u3042\u308b\u3002\n\n- [Ruby](http://ideone.com/ffgjbt)\n\n```rb\n#!/usr/bin/ruby\nif RUBY_PLATFORM=~/linux/\n\tif true\n\t\trequire 'fiddle'\n\t\t__popcount_fn=Fiddle::Function.new(Fiddle::Handle::DEFAULT['__sched_cpucount'],[Fiddle::TYPE_INT,Fiddle::TYPE_VOIDP],Fiddle::TYPE_INT)\n\t\tdefine_method(:popcount){|n|__popcount_fn.call(8,[n].pack('q'))}\n\telse\n\t\trequire 'fiddle/import'\n\t\tmodule LibC\n\t\t\textend Fiddle::Importer\n\t\t\tdlload 'libc.so.6'\n\t\t\textern 'int __sched_cpucount(int,long long*)'\n\t\tend\n\t\tdef popcount(n) LibC.__popcountdi2(8,[n]) end\n\tend\nelsif RUBY_PLATFORM=~/darwin/\n\tif true\n\t\trequire 'fiddle'\n\t\t__popcount_fn=Fiddle::Function.new(Fiddle::Handle::DEFAULT['__popcountdi2'],[Fiddle::TYPE_LONG],Fiddle::TYPE_INT)\n\t\tdefine_method(:popcount){|n|__popcount_fn.call(n)}\n\telse\n\t\trequire 'fiddle/import'\n\t\tmodule LibC\n\t\t\textend Fiddle::Importer\n\t\t\tdlload 'libSystem.dylib'\n\t\t\textern 'int __popcountdi2(long)'\n\t\tend\n\t\tdef popcount(n) LibC.__popcountdi2(n) end\n\tend\nelse\n\tdef popcount(n) n==0 ? 0 : popcount(n/2)+n%2 end\nend\n\np 1<<popcount(gets.to_i)\n```\n\n\u306a\u304a\u3001CodeIQ\u306eRuby\u306f1.9.3\u3067\u3042\u308b\u305f\u3081\u3001\u6b21\u306e\u3088\u3046\u306b\u3059\u308b\u3002\u30b0\u30ed\u30fc\u30d0\u30eb\u5909\u6570\u304c\u3042\u308b\u306e\u3067\u6c5a\u3044\u304c\u3001\u3084\u3080\u3092\u5f97\u306a\u3044\u3002\n\n```rb\nrequire 'fiddle'\nrequire 'dl'\n$__popcount_fn=Fiddle::Function.new(DL::Handle::DEFAULT['__sched_cpucount'],[Fiddle::TYPE_INT,Fiddle::TYPE_VOIDP],Fiddle::TYPE_INT)\ndef popcount(n) $__popcount_fn.call(8,[n].pack('q')) end\n```\n\n- [Python](http://ideone.com/4DBkKM)\n\n```py\n#!/usr/bin/python\nimport sys,ctypes\nif sys.version_info[0]>=3:\n\traw_input=input\n\txrange=range\n\nif sys.platform.startswith('linux'):\n\tlibc=ctypes.cdll.LoadLibrary('libc.so.6')\n\tpopcount=lambda n:libc.__sched_cpucount(ctypes.sizeof(ctypes.c_long),(ctypes.c_long*1)(n))\nelif sys.platform=='darwin':\n\tlibc=ctypes.cdll.LoadLibrary('libSystem.dylib')\n\tpopcount=lambda n:libc.__popcountdi2(n)\nelse:\n\tpopcount=lambda n:0 if n==0 else popcount(n/2)+n%2\n\nprint(1<<popcount(int(raw_input())))\n```\n\n- [C#](http://ideone.com/HTYKpR)\n\n```\nusing System;\nusing System.Runtime.InteropServices;\n \nclass CodeIQ2812{\n\t[DllImport(\"msvcrt\",CallingConvention=CallingConvention.Cdecl)]static extern int __popcountdi2(long n);\n\t[DllImport(\"msvcrt\",CallingConvention=CallingConvention.Cdecl)]static extern int __sched_cpucount(int n, long[] a);\n\n\tstatic int popcount(long n){\n\t\t//\u30b3\u30f3\u30d1\u30a4\u30eb\u6642\u306b\u5224\u5225\u3059\u308b\u624b\u6bb5\u304c\u306a\u3044\u306e\u3067\u9069\u5207\u306b\u30b3\u30e1\u30f3\u30c8\u30a2\u30a6\u30c8\u3059\u308b\u3053\u3068\n\t\t//return __popcountdi2(n);\n\t\treturn __sched_cpucount(8,new long[]{n});\n\t\t//return n==0 ? 0 : popcount(n/2)+(int)(n%2);\n\t}\n\tstatic void Main(){\n\t\tint n=int.Parse(Console.ReadLine());\n\t\tConsole.WriteLine(1<<popcount(n));\n\t}\n}\n```\n\n- \u6700\u5f8c\u306b\n\n\u30de\u30fc\u30b7\u30e3\u30ea\u30f3\u30b0\u306e\u30aa\u30fc\u30d0\u30fc\u30d8\u30c3\u30c9\u306e\u307b\u3046\u304c\u5927\u304d\u3044\u5834\u5408\u304c\u3042\u308b\u306e\u3067\u306f\u306a\u3044\u304b\u3068\u601d\u3063\u305f\u65b9\u3001\u591a\u5206\u5f53\u305f\u308a\u3067\u3059\u3002\u3053\u306e\u65b9\u6cd5\u306e\u3054\u5229\u7528\u306f\u8a08\u753b\u7684\u306b\u3002\n"}