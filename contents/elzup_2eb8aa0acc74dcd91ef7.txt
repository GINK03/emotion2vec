{"context": " More than 1 year has passed since last update.<?php\n\ndefine('ACCOUNT_ARZZUP', 0);\ndefine('ACCOUNT_TEST', 1);\ndefine('ACCOUNT', ACCOUNT_TEST);\nrequire_once('./vendor/autoload.php');\nrequire_once('./keys.php');\n\n$to = new TwistOAuth(CONSUMER_KEY, CONSUMER_SECRET, OAUTH_TOKEN, OAUTH_TOKEN_SECRET);\n\n$hashes = get_friends_profile_image_hashes();\necho implode(\"\\n\", $hashes);\n\nfunction get_friends_profile_image_hashes($screen_name = NULL) {\n    $hashes = array();\n    foreach (get_friends_profile_image($screen_name) as $url) {\n        if (preg_match('#profile_images/\\d+/(?<hash>.*)_normal#', $url, $m)) {\n            $hashes[] = $m['hash'];\n        } else {\n            echo 'no-hits -> ' . $url . PHP_EOL;\n         }\n    }\n    return $hashes;\n}\n\nfunction get_friends_profile_image($screen_name = NULL) {\n    global $to;\n    $param = array(\n        'count' => 5000,\n    );\n    $res = $to->get('friends/ids', $param);\n    if (isset($res->errors)) {\n        var_dump($res->errors);\n        return;\n    }\n    $urls = array();\n    foreach (array_chunk($res->ids, 100) as $ids) {\n        $ids_str = implode(',', $ids);\n        $res = $to->get('users/lookup', array(\n            'user_id' => $ids_str,\n        ));\n        if (isset($res->errors)) {\n            var_dump($res->errors);\n            return;\n        }\n        foreach ($res as $user) {\n            $urls[] = $user->profile_image_url;\n        }\n    }\n    return $urls;\n}\n\n\n\nkeys.php\n<?php\nswitch (ACCOUNT) {\ncase ACCOUNT_TEST:\n    define('CONSUMER_KEY'       , '********');\n    define('CONSUMER_SECRET'    , '********');\n    define('OAUTH_TOKEN'        , '********');\n    define('OAUTH_TOKEN_SECRET' , '********');\n    break;\ncase ACCOUNT_ARZZUP:\n    define('CONSUMER_KEY'       , '********');\n    define('CONSUMER_SECRET'    , '********');\n    define('OAUTH_TOKEN'        , '********');\n    define('OAUTH_TOKEN_SECRET' , '********');\n    break;\ndefault:\n    break;\n}\n\n\n\nTwistOAuth \u3068\u3044\u3046 TwitterAPI \u30e9\u30c3\u30d1\u30fc\u3092\u4f7f\u3046\n\n\u30d5\u30a9\u30ed\u30fc\u4e00\u89a7\u306e\u53d6\u5f97('friends/ids')\n\u30e6\u30fc\u30b6\u60c5\u5831\u306e\u53d6\u5f97('ids/lookup')\nurl\u304b\u3089\u30cf\u30c3\u30b7\u30e5\u306e\u53d6\u5f97\n\n\u306e\u6d41\u308c\n```php\n<?php\n\ndefine('ACCOUNT_ARZZUP', 0);\ndefine('ACCOUNT_TEST', 1);\ndefine('ACCOUNT', ACCOUNT_TEST);\nrequire_once('./vendor/autoload.php');\nrequire_once('./keys.php');\n\n$to = new TwistOAuth(CONSUMER_KEY, CONSUMER_SECRET, OAUTH_TOKEN, OAUTH_TOKEN_SECRET);\n\n$hashes = get_friends_profile_image_hashes();\necho implode(\"\\n\", $hashes);\n\nfunction get_friends_profile_image_hashes($screen_name = NULL) {\n    $hashes = array();\n    foreach (get_friends_profile_image($screen_name) as $url) {\n        if (preg_match('#profile_images/\\d+/(?<hash>.*)_normal#', $url, $m)) {\n            $hashes[] = $m['hash'];\n        } else {\n            echo 'no-hits -> ' . $url . PHP_EOL;\n         }\n    }\n    return $hashes;\n}\n\nfunction get_friends_profile_image($screen_name = NULL) {\n    global $to;\n    $param = array(\n        'count' => 5000,\n    );\n    $res = $to->get('friends/ids', $param);\n    if (isset($res->errors)) {\n        var_dump($res->errors);\n        return;\n    }\n    $urls = array();\n    foreach (array_chunk($res->ids, 100) as $ids) {\n        $ids_str = implode(',', $ids);\n        $res = $to->get('users/lookup', array(\n            'user_id' => $ids_str,\n        ));\n        if (isset($res->errors)) {\n            var_dump($res->errors);\n            return;\n        }\n        foreach ($res as $user) {\n            $urls[] = $user->profile_image_url;\n        }\n    }\n    return $urls;\n}\n\n```\n\n```php:keys.php\n<?php\nswitch (ACCOUNT) {\ncase ACCOUNT_TEST:\n    define('CONSUMER_KEY'       , '********');\n    define('CONSUMER_SECRET'    , '********');\n    define('OAUTH_TOKEN'        , '********');\n    define('OAUTH_TOKEN_SECRET' , '********');\n    break;\ncase ACCOUNT_ARZZUP:\n    define('CONSUMER_KEY'       , '********');\n    define('CONSUMER_SECRET'    , '********');\n    define('OAUTH_TOKEN'        , '********');\n    define('OAUTH_TOKEN_SECRET' , '********');\n    break;\ndefault:\n    break;\n}\n\n```\n\nTwistOAuth \u3068\u3044\u3046 TwitterAPI \u30e9\u30c3\u30d1\u30fc\u3092\u4f7f\u3046\n\n* \u30d5\u30a9\u30ed\u30fc\u4e00\u89a7\u306e\u53d6\u5f97('friends/ids')\n* \u30e6\u30fc\u30b6\u60c5\u5831\u306e\u53d6\u5f97('ids/lookup')\n* url\u304b\u3089\u30cf\u30c3\u30b7\u30e5\u306e\u53d6\u5f97\n\n\u306e\u6d41\u308c\n", "tags": ["TwitterAPI", "TwistOAuth"]}