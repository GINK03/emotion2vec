{"context": "\u3053\u308c\u304b\u3089\u306f\u3058\u3081\u308bTDD \u30c6\u30b9\u30c8\u99c6\u52d5\u958b\u767a\u5165\u9580 ThinkIT Books \u3088\u308a\n\n\u30dc\u30fc\u30ea\u30f3\u30b0\u306e\u70b9\u6570\u8a08\u7b97\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u4f5c\u308b\n\n\u30d5\u30ec\u30fc\u30e0\u5358\u4f4d\u3067\u306e\u30b9\u30b3\u30a2\u3092\u53d6\u5f97\u3059\u308b\n\n\u30c0\u30d6\u30eb\u30b9\u30c8\u30e9\u30a4\u30af\u3068\u30bf\u30fc\u30ad\u30fc\u306e\u51e6\u7406\u3092\u79fb\u3057\u3066\u3044\u304f\n\u30c6\u30b9\u30c8\n\nBowlingGameTest.php\n    /**\n     * 2\u7403\u9023\u7d9a\u30b9\u30c8\u30e9\u30a4\u30af\u306e\u30b1\u30fc\u30b9\n     *\n     * 1\u6295\u76ee: \u30b9\u30c8\u30e9\u30a4\u30af\n     * 2\u6295\u76ee: \u30b9\u30c8\u30e9\u30a4\u30af\n     * 3\u6295\u76ee: 3\n     * 4\u6295\u76ee: 1\n     *\n     * \u6b8b\u308a\u30ac\u30bf\u30fc\n     *\n     */\n    public function testDoubleStrikeAtFirstFlame()\n    {\n        $this->BowlingGame->recordShot(10); //10+(10+3)\n        $this->BowlingGame->recordShot(10); //10+(3+1)\n        $this->BowlingGame->recordShot(3); //3\n        $this->BowlingGame->recordShot(1); //1           [\u8a0841]\n\n        $this->loopRecordShot(14, 0);\n\n        $this->assertEquals(41, $this->BowlingGame->calculateScore());\n\n        //\u30b9\u30c8\u30e9\u30a4\u30af\u6642\u306b1\u30d5\u30ec\u30fc\u30e0\u76ee\u30682\u30d5\u30ec\u30fc\u30e0\u76ee\u306e\u70b9\u6570\u304c\u305f\u3060\u3057\u4ee5\u4e0b\n        $this->assertEquals(23, $this->BowlingGame->flameScore(0));\n        $this->assertEquals(14, $this->BowlingGame->flameScore(1));\n    }\n\n\n\u30c6\u30b9\u30c8\u5b9f\u884c\n1) BowlingGameTest::testDoubleStrikeAtFirstFlame\nFailed asserting that 20 matches expected 23.\n\n/var/www/html/test/testDrivenBowling/tests/BowlingGameTest.php:142\n\nFAILURES!\nTests: 18, Assertions: 32, Failures: 1.\n\n\u30ed\u30b8\u30c3\u30af\u4fee\u6b63\n\nBowlingGame.php\n    /** @var  int \u30c0\u30d6\u30eb\u30b9\u30c8\u30e9\u30a4\u30af\u306e\u30d5\u30ec\u30fc\u30e0\u3092\u8a18\u9332 */\n    private $strikeDoubleFlameNo;\n\n    /**\n     * \u30c0\u30d6\u30eb\u6642\u306e\u5f97\u70b9\u8a08\u7b97\n     * @param  int    $pin [description]\n     * @return void      [description]\n     */\n    private function calculateDoubleBonus(int $pin)\n    {\n        if ($this->doubleBonusCount > 0) {\n\n            //\u30c0\u30d6\u30eb\u306e\u4e00\u6295\u76ee\u306f\u4e8c\u3064\u524d\u306e\u30d5\u30ec\u30fc\u30e0\u306b\u9001\u308b\n            if ($this->doubleBonusCount === 2) {\n                $this->Flames[$this->strikeDoubleFlameNo-1]->addBonus($pin);\n            } else {\n                $this->Flames[$this->strikeDoubleFlameNo]->addBonus($pin);\n            }\n\n            $this->score += $pin;\n            --$this->doubleBonusCount;\n\n        }\n    }\n\n/**\n     * \u30b9\u30c8\u30e9\u30a4\u30af\u6642\u306b\u30dc\u30fc\u30ca\u30b9\u7ba1\u7406\u306e\u5909\u6570\u3092\u30bb\u30c3\u30c8\n     * @return void      [description]\n     */\n    private function isStrike()\n    {\n        if ($this->Flames[count($this->Flames)-1]->isStrike()) {\n\n            $this->strikeFlameNo = count($this->Flames)-1;\n\n            if ($this->strikeBonusCount !== 0) {\n                $this->strikeDoubleFlameNo = count($this->Flames)-1;\n                $this->doubleBonusCount = 2;\n            }\n\n            if ($this->strikeBonusCount === 0) {\n                $this->strikeBonusCount = 2;\n            }\n        }\n    }\n\n\n\u30c6\u30b9\u30c8\u5b9f\u884c\nOK (18 tests, 33 assertions)\n\n\n\u30aa\u30fc\u30d7\u30f3\u30d5\u30ec\u30fc\u30e0\u306e\u6982\u5ff5\u3092\u53d6\u308a\u8fbc\u3093\u3067\u304a\u304f\n\n\u30dc\u30fc\u30ca\u30b9\u8a08\u7b97\u304c\u767a\u751f\u3057\u306a\u3044\u30d5\u30ec\u30fc\u30e0\u306e\u3053\u3068\n\nFlame\u306bneedBonus()\u3092\u5b9f\u88c5\u3057\u3001\u30b9\u30da\u30a2\u3068\u30b9\u30c8\u30e9\u30a4\u30af\u4ee5\u5916\u3067\u306f\nfalse\u3092\u8fd4\u3059\u3088\u3046\u306b\u3059\u308b\n\u4e00\u6c17\u306b\u3084\u308b\u3053\u3068\u306b\u3057\u307e\u3059\u3002\n\u3082\u3046\u305d\u308d\u305d\u308d\u3081\u3093\u3069\u304f\u3055\u304f\u306a\u3063\u3066\u304d\u305fw\n\u30c6\u30b9\u30c8\n    /**\n     * @test\n     */\n    public function _\u30aa\u30fc\u30d7\u30f3\u30d5\u30ec\u30fc\u30e0\u306b\u30dc\u30fc\u30ca\u30b9\u306f\u4e0d\u8981()\n    {\n        $this->Flame->recordShot(3);\n        $this->Flame->recordShot(3);\n        $this->assertFalse($this->Flame->needBonus());\n    }\n\n    /**\n     * @test\n     */\n    public function _\u30b9\u30da\u30a2\u306e\u30dc\u30fc\u30ca\u30b9\u306f1\u6295\u5206\u3067\u5b8c\u4e86()\n    {\n        $this->Flame->recordShot(5);\n        $this->Flame->recordShot(5);\n        $this->assertTrue($this->Flame->needBonus()); //\u30dc\u30fc\u30ca\u30b9\u4ed8\u4e0e\u524d\n        $this->Flame->addBonus(5);\n        $this->assertFalse($this->Flame->needBonus());\n    }\n\n    /**\n     * @test\n     */\n    public function _\u30b9\u30c8\u30e9\u30a4\u30af\u306e\u30dc\u30fc\u30ca\u30b9\u306f2\u6295\u5206\u3067\u5b8c\u4e86()\n    {\n        $this->Flame->recordShot(10);\n        $this->Flame->addBonus(5);\n        $this->assertTrue($this->Flame->needBonus()); //\u30dc\u30fc\u30ca\u30b9\u4ed8\u4e0e\u5f8c\u2460\n        $this->Flame->addBonus(5);\n        $this->assertFalse($this->Flame->needBonus()); //\u30dc\u30fc\u30ca\u30b9\u4ed8\u4e0e\u5f8c\u2461\n    }\n\n\u3053\u308c\u304c\u901a\u308b\u30ed\u30b8\u30c3\u30af\u306f\u2193\n\u30ed\u30b8\u30c3\u30af\u4fee\u6b63\n\nFlame.php\n    /** @var  int */\n    private $bonusCount=0;\n\n    /**\n     * @param int $pin\n     */\n    public function addBonus(int $pin)\n    {\n        $this->bonus += $pin;\n        $this->bonusCount += 1;\n    }\n\n\n    /**\n     * @return bool\n     */\n    public function needBonus(): bool\n    {\n        if ($this->isSpare()) {\n            return $this->bonusCount < 1;\n        }\n\n        if ($this->isStrike()) {\n            return $this->bonusCount < 2;\n        }\n\n        return false;\n    }\n\n\n\u30c6\u30b9\u30c8\u5b9f\u884c\nOK (21 tests, 38 assertions)\n\n\n\u30b2\u30fc\u30e0\u306e\u5408\u7b97\u5024\u3092Flame\u304b\u3089\u8fd4\u3059($score\u30d7\u30ed\u30d1\u30c6\u30a3\u306e\u6392\u9664)\n\u3053\u308c\u3092\n\nBowlingGameTest.php\n    /**\n     * @return int [description]\n     */\n    public function calculateScore(): int\n    {\n        return $this->score;\n    }\n\n\n\u3053\u3046\n\nBowlingGame.php\n    /**\n     * @return int [description]\n     */\n    public function calculateScore(): int\n    {\n        $total = 0;\n        foreach ($this->Flames as $Flame) {\n            $total += $Flame->getScore();\n        }\n\n        return $total;\n    }\n\n\n\u30c6\u30b9\u30c8\u3082\u901a\u308b\nOK (21 tests, 38 assertions)\n\n\n\u7d42\u4e86\n\u307e\u3060\u6539\u826f\u3067\u304d\u308b\u70b9\u306f\u3042\u308b\u3082\u306e\u306e\u3001\u3082\u3046\u6d41\u308c\u306f\u3064\u304b\u3081\u305f\u3057\n\u8cac\u52d9\u3082\u5206\u62c5\u3067\u304d\u305f\u3057\u4e00\u65e6\u30af\u30ed\u30fc\u30ba\u3002\n\u6c17\u304c\u5411\u3044\u305f\u3089\u6c17\u5408\u306e\u5165\u3063\u305f\u30ea\u30d5\u30a1\u30a6\u30bf\u30ea\u30f3\u30b0\u3092\u884c\u3063\u3066\u30a2\u30c3\u30d7\u3057\u305f\u3044\n\u3053\u308c\u304b\u3089\u306f\u3058\u3081\u308bTDD \u30c6\u30b9\u30c8\u99c6\u52d5\u958b\u767a\u5165\u9580 ThinkIT Books \u3088\u308a\n\n# \u30dc\u30fc\u30ea\u30f3\u30b0\u306e\u70b9\u6570\u8a08\u7b97\u30d7\u30ed\u30b0\u30e9\u30e0\u3092\u4f5c\u308b\n\n## \u30d5\u30ec\u30fc\u30e0\u5358\u4f4d\u3067\u306e\u30b9\u30b3\u30a2\u3092\u53d6\u5f97\u3059\u308b\n\n### \u30c0\u30d6\u30eb\u30b9\u30c8\u30e9\u30a4\u30af\u3068\u30bf\u30fc\u30ad\u30fc\u306e\u51e6\u7406\u3092\u79fb\u3057\u3066\u3044\u304f\n\n__\u30c6\u30b9\u30c8__\n\n```php:BowlingGameTest.php\n    /**\n     * 2\u7403\u9023\u7d9a\u30b9\u30c8\u30e9\u30a4\u30af\u306e\u30b1\u30fc\u30b9\n     *\n     * 1\u6295\u76ee: \u30b9\u30c8\u30e9\u30a4\u30af\n     * 2\u6295\u76ee: \u30b9\u30c8\u30e9\u30a4\u30af\n     * 3\u6295\u76ee: 3\n     * 4\u6295\u76ee: 1\n     *\n     * \u6b8b\u308a\u30ac\u30bf\u30fc\n     *\n     */\n    public function testDoubleStrikeAtFirstFlame()\n    {\n        $this->BowlingGame->recordShot(10); //10+(10+3)\n        $this->BowlingGame->recordShot(10); //10+(3+1)\n        $this->BowlingGame->recordShot(3); //3\n        $this->BowlingGame->recordShot(1); //1           [\u8a0841]\n\n        $this->loopRecordShot(14, 0);\n\n        $this->assertEquals(41, $this->BowlingGame->calculateScore());\n\n        //\u30b9\u30c8\u30e9\u30a4\u30af\u6642\u306b1\u30d5\u30ec\u30fc\u30e0\u76ee\u30682\u30d5\u30ec\u30fc\u30e0\u76ee\u306e\u70b9\u6570\u304c\u305f\u3060\u3057\u4ee5\u4e0b\n        $this->assertEquals(23, $this->BowlingGame->flameScore(0));\n        $this->assertEquals(14, $this->BowlingGame->flameScore(1));\n    }\n```\n\n__\u30c6\u30b9\u30c8\u5b9f\u884c__\n\n```bash\n1) BowlingGameTest::testDoubleStrikeAtFirstFlame\nFailed asserting that 20 matches expected 23.\n\n/var/www/html/test/testDrivenBowling/tests/BowlingGameTest.php:142\n\nFAILURES!\nTests: 18, Assertions: 32, Failures: 1.\n```\n\n__\u30ed\u30b8\u30c3\u30af\u4fee\u6b63__\n\n```php:BowlingGame.php\n    /** @var  int \u30c0\u30d6\u30eb\u30b9\u30c8\u30e9\u30a4\u30af\u306e\u30d5\u30ec\u30fc\u30e0\u3092\u8a18\u9332 */\n    private $strikeDoubleFlameNo;\n\n    /**\n     * \u30c0\u30d6\u30eb\u6642\u306e\u5f97\u70b9\u8a08\u7b97\n     * @param  int    $pin [description]\n     * @return void      [description]\n     */\n    private function calculateDoubleBonus(int $pin)\n    {\n        if ($this->doubleBonusCount > 0) {\n\n            //\u30c0\u30d6\u30eb\u306e\u4e00\u6295\u76ee\u306f\u4e8c\u3064\u524d\u306e\u30d5\u30ec\u30fc\u30e0\u306b\u9001\u308b\n            if ($this->doubleBonusCount === 2) {\n                $this->Flames[$this->strikeDoubleFlameNo-1]->addBonus($pin);\n            } else {\n                $this->Flames[$this->strikeDoubleFlameNo]->addBonus($pin);\n            }\n\n            $this->score += $pin;\n            --$this->doubleBonusCount;\n\n        }\n    }\n\n/**\n     * \u30b9\u30c8\u30e9\u30a4\u30af\u6642\u306b\u30dc\u30fc\u30ca\u30b9\u7ba1\u7406\u306e\u5909\u6570\u3092\u30bb\u30c3\u30c8\n     * @return void      [description]\n     */\n    private function isStrike()\n    {\n        if ($this->Flames[count($this->Flames)-1]->isStrike()) {\n\n            $this->strikeFlameNo = count($this->Flames)-1;\n\n            if ($this->strikeBonusCount !== 0) {\n                $this->strikeDoubleFlameNo = count($this->Flames)-1;\n                $this->doubleBonusCount = 2;\n            }\n\n            if ($this->strikeBonusCount === 0) {\n                $this->strikeBonusCount = 2;\n            }\n        }\n    }\n```\n\n__\u30c6\u30b9\u30c8\u5b9f\u884c__\n\n```bash\nOK (18 tests, 33 assertions)\n```\n\n### \u30aa\u30fc\u30d7\u30f3\u30d5\u30ec\u30fc\u30e0\u306e\u6982\u5ff5\u3092\u53d6\u308a\u8fbc\u3093\u3067\u304a\u304f\n\n* \u30dc\u30fc\u30ca\u30b9\u8a08\u7b97\u304c\u767a\u751f\u3057\u306a\u3044\u30d5\u30ec\u30fc\u30e0\u306e\u3053\u3068\n\nFlame\u306bneedBonus()\u3092\u5b9f\u88c5\u3057\u3001\u30b9\u30da\u30a2\u3068\u30b9\u30c8\u30e9\u30a4\u30af\u4ee5\u5916\u3067\u306f\nfalse\u3092\u8fd4\u3059\u3088\u3046\u306b\u3059\u308b\n\n\u4e00\u6c17\u306b\u3084\u308b\u3053\u3068\u306b\u3057\u307e\u3059\u3002\n\u3082\u3046\u305d\u308d\u305d\u308d\u3081\u3093\u3069\u304f\u3055\u304f\u306a\u3063\u3066\u304d\u305fw\n\n\n__\u30c6\u30b9\u30c8__\n\n```php\n    /**\n     * @test\n     */\n    public function _\u30aa\u30fc\u30d7\u30f3\u30d5\u30ec\u30fc\u30e0\u306b\u30dc\u30fc\u30ca\u30b9\u306f\u4e0d\u8981()\n    {\n        $this->Flame->recordShot(3);\n        $this->Flame->recordShot(3);\n        $this->assertFalse($this->Flame->needBonus());\n    }\n\n    /**\n     * @test\n     */\n    public function _\u30b9\u30da\u30a2\u306e\u30dc\u30fc\u30ca\u30b9\u306f1\u6295\u5206\u3067\u5b8c\u4e86()\n    {\n        $this->Flame->recordShot(5);\n        $this->Flame->recordShot(5);\n        $this->assertTrue($this->Flame->needBonus()); //\u30dc\u30fc\u30ca\u30b9\u4ed8\u4e0e\u524d\n        $this->Flame->addBonus(5);\n        $this->assertFalse($this->Flame->needBonus());\n    }\n\n    /**\n     * @test\n     */\n    public function _\u30b9\u30c8\u30e9\u30a4\u30af\u306e\u30dc\u30fc\u30ca\u30b9\u306f2\u6295\u5206\u3067\u5b8c\u4e86()\n    {\n        $this->Flame->recordShot(10);\n        $this->Flame->addBonus(5);\n        $this->assertTrue($this->Flame->needBonus()); //\u30dc\u30fc\u30ca\u30b9\u4ed8\u4e0e\u5f8c\u2460\n        $this->Flame->addBonus(5);\n        $this->assertFalse($this->Flame->needBonus()); //\u30dc\u30fc\u30ca\u30b9\u4ed8\u4e0e\u5f8c\u2461\n    }\n```\n\n\u3053\u308c\u304c\u901a\u308b\u30ed\u30b8\u30c3\u30af\u306f\u2193\n\n__\u30ed\u30b8\u30c3\u30af\u4fee\u6b63__\n\n```php:Flame.php\n    /** @var  int */\n    private $bonusCount=0;\n\n    /**\n     * @param int $pin\n     */\n    public function addBonus(int $pin)\n    {\n        $this->bonus += $pin;\n        $this->bonusCount += 1;\n    }\n\n\n    /**\n     * @return bool\n     */\n    public function needBonus(): bool\n    {\n        if ($this->isSpare()) {\n            return $this->bonusCount < 1;\n        }\n\n        if ($this->isStrike()) {\n            return $this->bonusCount < 2;\n        }\n\n        return false;\n    }\n```\n\n__\u30c6\u30b9\u30c8\u5b9f\u884c__\n\n```bash\nOK (21 tests, 38 assertions)\n```\n\n### \u30b2\u30fc\u30e0\u306e\u5408\u7b97\u5024\u3092Flame\u304b\u3089\u8fd4\u3059($score\u30d7\u30ed\u30d1\u30c6\u30a3\u306e\u6392\u9664)\n\n\u3053\u308c\u3092\n\n```php:BowlingGameTest.php\n    /**\n     * @return int [description]\n     */\n    public function calculateScore(): int\n    {\n        return $this->score;\n    }\n```\n\n\u3053\u3046\n\n```php:BowlingGame.php\n    /**\n     * @return int [description]\n     */\n    public function calculateScore(): int\n    {\n        $total = 0;\n        foreach ($this->Flames as $Flame) {\n            $total += $Flame->getScore();\n        }\n\n        return $total;\n    }\n```\n\n\u30c6\u30b9\u30c8\u3082\u901a\u308b\n\n```bash\nOK (21 tests, 38 assertions)\n```\n\n### \u7d42\u4e86\n\n\u307e\u3060\u6539\u826f\u3067\u304d\u308b\u70b9\u306f\u3042\u308b\u3082\u306e\u306e\u3001\u3082\u3046\u6d41\u308c\u306f\u3064\u304b\u3081\u305f\u3057\n\u8cac\u52d9\u3082\u5206\u62c5\u3067\u304d\u305f\u3057\u4e00\u65e6\u30af\u30ed\u30fc\u30ba\u3002\n\n\u6c17\u304c\u5411\u3044\u305f\u3089\u6c17\u5408\u306e\u5165\u3063\u305f\u30ea\u30d5\u30a1\u30a6\u30bf\u30ea\u30f3\u30b0\u3092\u884c\u3063\u3066\u30a2\u30c3\u30d7\u3057\u305f\u3044\n\n\n", "tags": ["PHP", "PHPUnit"]}