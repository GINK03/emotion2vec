{"context": " More than 1 year has passed since last update.\n\n\u6982\u8981\n\u4eca\u671d\u307b\u3069 boostjp \u306e boost::variant \u306b boost::make_recursive_variant \u306e\u4f8b\u3092\u66f8\u304d\u307e\u3057\u305f\u3002\u307e\u305f\u3001\u4eca\u65e5\u306f\u65e5\u4e2d\u306b\u304a\u4ed5\u4e8b\u3067\u3082 cereal \u3092\u4fbf\u5229\u306b\u4f7f\u3063\u3066\u306b\u3083\u3093\u306b\u3083\u3093\u30b7\u30ea\u30a2\u30e9\u30a4\u30ba\u3057\u3066\u3044\u307e\u3057\u305f\u3002\n\u3068\u3001\u3044\u3046\u308f\u3051\u3067\u3001 boost::variant \u3068 cereal \u3092\u4f7f\u3044\u3001\u300c\u4f55\u3067\u3082\u307b\u3044\u307b\u3044\u5165\u308c\u3066\u30b7\u30ea\u30a2\u30e9\u30a4\u30ba\u3067\u304d\u3061\u3083\u3046\u7d20\u6575\u304b\u3082\u3057\u308c\u306a\u3044\u4f55\u304b\u300d\u306e\u5b9f\u88c5\u4f8b\u3092\u7d39\u4ecb\u3057\u305f\u3044\u3068\u601d\u3044\u307e\u3059\u3002\n\n\u4f8b\n#include <cereal/cereal.hpp>\n#include <cereal/archives/json.hpp>\n#include <cereal/types/vector.hpp>\n#include <cereal/types/unordered_map.hpp>\n#include <cereal/types/string.hpp>\n#include <cereal/types/boost_variant.hpp>\n\nusing variant_data_type = boost::make_recursive_variant\n< std::string\n, std::uint8_t, std::uint16_t, std::uint32_t, std::uint64_t\n, std::int8_t, std::int16_t, std::int32_t, std::int64_t\n, float, double, long double\n, bool\n, std::vector< boost::recursive_variant_ >\n, std::unordered_map< std::string, boost::recursive_variant_ >\n>::type;\n\nusing variant_array_type = std::vector< variant_data_type >;\nusing variant_map_type   = std::unordered_map< std::string, variant_data_type >;\n\nauto main() -> int\n{\n  using namespace std::literals::string_literals;\n\n  variant_array_type array{ \"hoge\"s, true, false, 0x12345678 };\n  variant_map_type   map{ { \"key-1\"s, \"value\"s }, { \"key-2\"s, 3.14f }, { \"key-3\"s, array } };\n  variant_data_type  data = map;\n  cereal::JSONOutputArchive( std::cout )( data );\n}\n\n\n\u51fa\u529b\n{\n    \"value0\": {\n        \"which\": 14,\n        \"data\": [\n            {\n                \"key\": \"key-3\",\n                \"value\": {\n                    \"which\": 13,\n                    \"data\": [\n                        {\n                            \"which\": 0,\n                            \"data\": \"hoge\"\n                        },\n                        {\n                            \"which\": 12,\n                            \"data\": true\n                        },\n                        {\n                            \"which\": 12,\n                            \"data\": false\n                        },\n                        {\n                            \"which\": 7,\n                            \"data\": 305419896\n                        }\n                    ]\n                }\n            },\n            {\n                \"key\": \"key-1\",\n                \"value\": {\n                    \"which\": 0,\n                    \"data\": \"value\"\n                }\n            },\n            {\n                \"key\": \"key-2\",\n                \"value\": {\n                    \"which\": 9,\n                    \"data\": 3.1400001049041748\n                }\n            }\n        ]\n    }\n}\n\n\n\u6240\u611f\n( \uff9f\u2200\uff9f)\uff71\uff8a\uff8a\u516b\u516b\uff89\u30fd\uff89\u30fd\uff89\u30fd\uff89 \uff3c / \uff3c/ \uff3c\n\u30fb\u30fb\u30fb\u307b\u3068\u3093\u3069\u308f\u305f\u3057\u4f55\u3082\u30b3\u30fc\u30c9\u66f8\u3044\u3066\u306a\u304f\u3066\u306a\u305c\u304b\u3042\u3084\u307e\u308a\u305f\u304f\u306a\u308b\u307b\u3069\u5feb\u9069\u306b\u7d20\u6575\u306a\u306a\u3093\u3067\u3082\u307b\u3044\u307b\u3044\u3092\u5b9f\u88c5\u3067\u304d\u3066\u3057\u307e\u3044\u307e\u3057\u305f\u3002\u5feb\u9069\u3002\n\nReference\n\nQiita - C++\u306ecereal\u306e\u30b7\u30ea\u30a2\u30e9\u30a4\u30ba\u304c\u5feb\u9069\u3059\u304e\u308b\u3084\u3070\u3044\nQiita - cereal \u3092\u4f7f\u3044\u306f\u3058\u3081\u308b\u306b\u3042\u305f\u3063\u3066\u78ba\u8a8d\u3057\u305f\u4e8b\u3001\u306f\u307e\u3063\u305f\u4e8b\ncereal - Documentation\n\ncerael - source code\n\ncereal/include/cereal/types/boost_variant.hpp\n\n\n\n# \u6982\u8981\n\n\u4eca\u671d\u307b\u3069 [boostjp \u306e boost::variant \u306b boost::make_recursive_variant \u306e\u4f8b](http://boostjp.github.io/tips/variant.html#recursive-variant)\u3092\u66f8\u304d\u307e\u3057\u305f\u3002\u307e\u305f\u3001\u4eca\u65e5\u306f\u65e5\u4e2d\u306b\u304a\u4ed5\u4e8b\u3067\u3082 [cereal](http://uscilab.github.io/cereal/) \u3092\u4fbf\u5229\u306b\u4f7f\u3063\u3066\u306b\u3083\u3093\u306b\u3083\u3093\u30b7\u30ea\u30a2\u30e9\u30a4\u30ba\u3057\u3066\u3044\u307e\u3057\u305f\u3002\n\n\u3068\u3001\u3044\u3046\u308f\u3051\u3067\u3001 `boost::variant` \u3068 `cereal` \u3092\u4f7f\u3044\u3001\u300c\u4f55\u3067\u3082\u307b\u3044\u307b\u3044\u5165\u308c\u3066\u30b7\u30ea\u30a2\u30e9\u30a4\u30ba\u3067\u304d\u3061\u3083\u3046\u7d20\u6575\u304b\u3082\u3057\u308c\u306a\u3044\u4f55\u304b\u300d\u306e\u5b9f\u88c5\u4f8b\u3092\u7d39\u4ecb\u3057\u305f\u3044\u3068\u601d\u3044\u307e\u3059\u3002\n\n# \u4f8b\n\n```\n#include <cereal/cereal.hpp>\n#include <cereal/archives/json.hpp>\n#include <cereal/types/vector.hpp>\n#include <cereal/types/unordered_map.hpp>\n#include <cereal/types/string.hpp>\n#include <cereal/types/boost_variant.hpp>\n\nusing variant_data_type = boost::make_recursive_variant\n< std::string\n, std::uint8_t, std::uint16_t, std::uint32_t, std::uint64_t\n, std::int8_t, std::int16_t, std::int32_t, std::int64_t\n, float, double, long double\n, bool\n, std::vector< boost::recursive_variant_ >\n, std::unordered_map< std::string, boost::recursive_variant_ >\n>::type;\n\nusing variant_array_type = std::vector< variant_data_type >;\nusing variant_map_type   = std::unordered_map< std::string, variant_data_type >;\n\nauto main() -> int\n{\n  using namespace std::literals::string_literals;\n  \n  variant_array_type array{ \"hoge\"s, true, false, 0x12345678 };\n  variant_map_type   map{ { \"key-1\"s, \"value\"s }, { \"key-2\"s, 3.14f }, { \"key-3\"s, array } };\n  variant_data_type  data = map;\n  cereal::JSONOutputArchive( std::cout )( data );\n}\n```\n\n## \u51fa\u529b\n\n```json\n{\n    \"value0\": {\n        \"which\": 14,\n        \"data\": [\n            {\n                \"key\": \"key-3\",\n                \"value\": {\n                    \"which\": 13,\n                    \"data\": [\n                        {\n                            \"which\": 0,\n                            \"data\": \"hoge\"\n                        },\n                        {\n                            \"which\": 12,\n                            \"data\": true\n                        },\n                        {\n                            \"which\": 12,\n                            \"data\": false\n                        },\n                        {\n                            \"which\": 7,\n                            \"data\": 305419896\n                        }\n                    ]\n                }\n            },\n            {\n                \"key\": \"key-1\",\n                \"value\": {\n                    \"which\": 0,\n                    \"data\": \"value\"\n                }\n            },\n            {\n                \"key\": \"key-2\",\n                \"value\": {\n                    \"which\": 9,\n                    \"data\": 3.1400001049041748\n                }\n            }\n        ]\n    }\n}\n```\n\n## \u6240\u611f\n\n( \uff9f\u2200\uff9f)\uff71\uff8a\uff8a\u516b\u516b\uff89\u30fd\uff89\u30fd\uff89\u30fd\uff89 \uff3c / \uff3c/ \uff3c\n\n\u30fb\u30fb\u30fb\u307b\u3068\u3093\u3069\u308f\u305f\u3057\u4f55\u3082\u30b3\u30fc\u30c9\u66f8\u3044\u3066\u306a\u304f\u3066\u306a\u305c\u304b\u3042\u3084\u307e\u308a\u305f\u304f\u306a\u308b\u307b\u3069\u5feb\u9069\u306b\u7d20\u6575\u306a\u306a\u3093\u3067\u3082\u307b\u3044\u307b\u3044\u3092\u5b9f\u88c5\u3067\u304d\u3066\u3057\u307e\u3044\u307e\u3057\u305f\u3002\u5feb\u9069\u3002\n\n# Reference\n\n- [Qiita - C++\u306ecereal\u306e\u30b7\u30ea\u30a2\u30e9\u30a4\u30ba\u304c\u5feb\u9069\u3059\u304e\u308b\u3084\u3070\u3044](http://qiita.com/Ushio@github/items/827cf026dcf74328efb7)\n- [Qiita - cereal \u3092\u4f7f\u3044\u306f\u3058\u3081\u308b\u306b\u3042\u305f\u3063\u3066\u78ba\u8a8d\u3057\u305f\u4e8b\u3001\u306f\u307e\u3063\u305f\u4e8b](http://qiita.com/usagi/items/8e00f23b2508c98947b3)\n- [cereal - Documentation](http://uscilab.github.io/cereal/)\n- [cerael - source code](https://github.com/USCiLab/cereal)\n    - [cereal/include/cereal/types/boost_variant.hpp](https://github.com/USCiLab/cereal/blob/master/include/cereal/types/boost_variant.hpp)\n", "tags": ["cereal", "C++", "boost", "Boost.Variant", "Seriallizer"]}