{"context": "\n\nSakuraScript\u30a4\u30f3\u30bf\u30d7\u30ea\u30bf\u3092Free\u30e2\u30ca\u30c9\u3067\u5b9f\u88c5\u3059\u308b\n\u3053\u306e\u8a18\u4e8b\u306f \u4f3a\u304b Advent Calendar 2016\u306e4\u65e5\u76ee\u306e\u8a18\u4e8b\u3067\u3059\u3002\nFree \u30e2\u30ca\u30c9\u3092\u4f7f\u3048\u3070\u30a4\u30f3\u30bf\u30d7\u30ea\u30bf\u304c\u7c21\u5358\u306b\u5b9f\u88c5\u3067\u304d\u308b\u3068\u805e\u3044\u3066 PureScript \u3067 Aff \u3092\u4f7f\u3044\u304c\u3066\u3089\u7c21\u6613\u7684\u306a SakuraScript \u30a4\u30f3\u30bf\u30d7\u30ea\u30bf\u3092\u66f8\u3044\u3066\u307f\u305f\u3002\nFree \u30e2\u30ca\u30c9\u3068\u306f\u306a\u3093\u306a\u306e\u304b\u306b\u3064\u3044\u3066\u306f\u53c2\u8003\u30ea\u30f3\u30af\u3092\u53c2\u7167\u3002\n\n\u30b3\u30fc\u30c9\nmodule Main where\n\nimport Prelude \n\nimport Control.Monad.Eff (Eff)\nimport Control.Monad.Eff.Exception (EXCEPTION)\nimport Control.Monad.Eff.Console (CONSOLE)\nimport Control.Monad.Eff.Class (liftEff)\n\nimport Test.Unit.Console (TESTOUTPUT, print)\n\nimport Control.Monad.Aff (Aff, forkAff, launchAff, later')\nimport Control.Monad.Aff.Console (log)\n\nimport Control.Monad.Free (Free, foldFree, liftF)\n\nimport Data.Maybe (Maybe(..))\nimport Data.String (split, Pattern(..))\nimport Data.Array (foldM)\nimport Data.NaturalTransformation (NaturalTransformation)\n\n\n\ndata SakuraScriptF a =\n    ChangeScope Int a\n  | ChangeSurface Int a\n  | Talk String a\n  | Wait Int a\n  | YenE a\n\ntype SakuraScript a = Free SakuraScriptF a\n\n--                           + type NaturalTransformation f g = forall a. f a -> g a\n--                           |                                    + data Aff :: # ! -> * -> *\n--                           |                                    |\nsakuraScriptN :: forall eff. NaturalTransformation SakuraScriptF (Aff (console :: CONSOLE, testOutput :: TESTOUTPUT | eff))\nsakuraScriptN (Wait n a)          = const a <$> do\n                                      log (\"\\\\_w[\" <> (show n) <> \"]\")\n                                      later' n do pure unit\n--                                    |\n--                                    + later' :: forall e a. Int -> Aff e a -> Aff e a\n--                                    : Runs the specified asynchronous computation later, by the specified number of milliseconds.\nsakuraScriptN (Talk s a)          = const a <$> do\n                                      let arr = (split (Pattern \"\") s)\n                                      foldM wait unit arr -- 1\u6587\u5b57\u3065\u3064\u51fa\u529b\n                                      log \"\" -- \u6539\u884c\n                                      where \n                                        wait _ c = later' 50 do liftEff $ print c -- \u6539\u884c\u305b\u305a\u6587\u5b57\u51fa\u529b\nsakuraScriptN (ChangeScope n a)   = const a <$> log (\"\\\\p[\" <> (show n) <> \"]\")\nsakuraScriptN (ChangeSurface n a) = const a <$> log (\"\\\\s[\" <> (show n) <> \"]\")\n--                                  |       |   |                     |\n--                                  |       |   |                     + append :: a -> a -> a\n--                                  |       |   + log :: forall eff. String -> Aff (console :: CONSOLE | eff) Unit\n--                                  |       + map :: forall a b. (a -> b) -> f a -> f b\n--                                  + const :: forall a b. a -> b -> a\n--                                  : Returns its first argument and ignores its second.\nsakuraScriptN (YenE a)            = const a <$> log \"\\\\e\"\n\n\nrun :: forall eff. NaturalTransformation SakuraScript (Aff (console :: CONSOLE, testOutput :: TESTOUTPUT | eff))\nrun = foldFree sakuraScriptN\n--    |\n--    + foldFree :: forall f m. MonadRec m => (f ~> m) -> (Free f) ~> m\n\nonBoot :: SakuraScript Unit\nonBoot = do\n  liftF (ChangeScope 1 unit)\n  liftF (ChangeSurface 10 unit)\n  liftF (Talk \"\u306a\u3093\u3084\u3001\u3048\u3089\u3044\u96e3\u3057\u3044\u8a00\u8a9e\u3084\u306a\u3002\" unit)\n  liftF (Wait 1000 unit)\n  liftF (ChangeScope 0 unit)\n  liftF (ChangeSurface 0 unit)\n  liftF (Talk \"\u305d\u3046\u3060\u306d\u30fc\u3002\" unit)\n  liftF (YenE unit)\n-- |\n-- + liftF :: forall f. f ~> Free f\n\n\nmain :: forall eff. Eff ( console :: CONSOLE , err :: EXCEPTION, testOutput :: TESTOUTPUT | eff ) Unit\nmain = do\n  void $ launchAff do\n-- |     |\n-- |     + launchAff :: forall e a. Aff e a -> Eff (err :: EXCEPTION | e) (Canceler e)\n-- |     : Converts the asynchronous computation into a synchronous one. All values are ignored, and if the computation produces an error, it is thrown.\n-- + void :: forall f a. Functor f => f a -> f Unit\n    forkAff do\n      run $ onBoot\n--  |\n--  + forkAff :: forall e a. Aff e a -> Aff e (Canceler e)\n--  : Forks the specified asynchronous computation so subsequent computations will not block on the result of the computation.\n--  : Returns a canceler that can be used to attempt cancellation of the forked computation.\n\n\n\n\u7d50\u679c\n$ psc --version\n0.10.2\n$ pulp run\n* Building project in ***/purs-free\nCompiling Main\n* Build successful.\n\\p[1]\n\\s[10]\n\u306a\u3093\u3084\u3001\u3048\u3089\u3044\u96e3\u3057\u3044\u8a00\u8a9e\u3084\u306a\u3002\n\\_w[1000]\n\\p[0]\n\\s[0]\n\u305d\u3046\u3060\u306d\u30fc\u3002\n\\e\n\n\n\n\u5c0f\u5b66\u751f\u4e26\u307f\u306e\u611f\u60f3\n\n\u6587\u5b57\u5217\u7d50\u5408\u306f <> \u3067 Semigroup \u306b\u3042\u308b\n\n~> \u3068\u306f\u4e00\u4f53\u4f55\u306a\u306e\u304b\uff1f(Natural\u3067\u3001\u81ea\u7136\u5909\u63db\u3067\u3059\u3002\u578b\u30aa\u30da\u30ec\u30fc\u30bf\u3082\u5b9a\u7fa9\u3067\u304d\u308b\u306e\u3067\n\nYenE \u3067\u51e6\u7406\u3092\u6253\u3061\u5207\u308a\u305f\u304b\u3063\u305f\u304c\u65b9\u6cd5\u304c\u5206\u304b\u3089\u306a\u304b\u3063\u305f\u3002 Nothing \u3068\u304b\u4f7f\u3048\u3070\u3044\u3044\u306e\u3060\u308d\u3046\u304b\uff1f\n\n\u2237 \u3084 \u2192 \u3084 \u2200 \u304c\u4f7f\u3048\u308b\u3088\u3046\u306b\u306a\u3063\u305f\u3088\u3046\u3060\uff1f\n\u6539\u884c\u306a\u3057\u51fa\u529b\u306e\u305f\u3081\u306b Test.Unit.Console \u3092\u4f7f\u3063\u305f\n\n\n\u53c2\u8003\n\nhttp://d.hatena.ne.jp/fumiexcel/20121111/1352614885\nhttp://d.hatena.ne.jp/its_out_of_tune/comment/20121111/1352632815\nhttps://github.com/purescript/purescript-free\nhttp://ssp.shillest.net/ukadoc/manual/list_sakura_script.html\n\n# SakuraScript\u30a4\u30f3\u30bf\u30d7\u30ea\u30bf\u3092Free\u30e2\u30ca\u30c9\u3067\u5b9f\u88c5\u3059\u308b\n\n\u3053\u306e\u8a18\u4e8b\u306f [\u4f3a\u304b Advent Calendar 2016](http://www.adventar.org/calendars/1472)\u306e4\u65e5\u76ee\u306e\u8a18\u4e8b\u3067\u3059\u3002\n\nFree \u30e2\u30ca\u30c9\u3092\u4f7f\u3048\u3070\u30a4\u30f3\u30bf\u30d7\u30ea\u30bf\u304c\u7c21\u5358\u306b\u5b9f\u88c5\u3067\u304d\u308b\u3068\u805e\u3044\u3066 PureScript \u3067 Aff \u3092\u4f7f\u3044\u304c\u3066\u3089\u7c21\u6613\u7684\u306a SakuraScript \u30a4\u30f3\u30bf\u30d7\u30ea\u30bf\u3092\u66f8\u3044\u3066\u307f\u305f\u3002\n\nFree \u30e2\u30ca\u30c9\u3068\u306f\u306a\u3093\u306a\u306e\u304b\u306b\u3064\u3044\u3066\u306f\u53c2\u8003\u30ea\u30f3\u30af\u3092\u53c2\u7167\u3002\n\n## \u30b3\u30fc\u30c9\n\n```haskell\nmodule Main where\n\nimport Prelude \n\nimport Control.Monad.Eff (Eff)\nimport Control.Monad.Eff.Exception (EXCEPTION)\nimport Control.Monad.Eff.Console (CONSOLE)\nimport Control.Monad.Eff.Class (liftEff)\n\nimport Test.Unit.Console (TESTOUTPUT, print)\n\nimport Control.Monad.Aff (Aff, forkAff, launchAff, later')\nimport Control.Monad.Aff.Console (log)\n\nimport Control.Monad.Free (Free, foldFree, liftF)\n\nimport Data.Maybe (Maybe(..))\nimport Data.String (split, Pattern(..))\nimport Data.Array (foldM)\nimport Data.NaturalTransformation (NaturalTransformation)\n\n\n\ndata SakuraScriptF a =\n    ChangeScope Int a\n  | ChangeSurface Int a\n  | Talk String a\n  | Wait Int a\n  | YenE a\n\ntype SakuraScript a = Free SakuraScriptF a\n\n--                           + type NaturalTransformation f g = forall a. f a -> g a\n--                           |                                    + data Aff :: # ! -> * -> *\n--                           |                                    |\nsakuraScriptN :: forall eff. NaturalTransformation SakuraScriptF (Aff (console :: CONSOLE, testOutput :: TESTOUTPUT | eff))\nsakuraScriptN (Wait n a)          = const a <$> do\n                                      log (\"\\\\_w[\" <> (show n) <> \"]\")\n                                      later' n do pure unit\n--                                    |\n--                                    + later' :: forall e a. Int -> Aff e a -> Aff e a\n--                                    : Runs the specified asynchronous computation later, by the specified number of milliseconds.\nsakuraScriptN (Talk s a)          = const a <$> do\n                                      let arr = (split (Pattern \"\") s)\n                                      foldM wait unit arr -- 1\u6587\u5b57\u3065\u3064\u51fa\u529b\n                                      log \"\" -- \u6539\u884c\n                                      where \n                                        wait _ c = later' 50 do liftEff $ print c -- \u6539\u884c\u305b\u305a\u6587\u5b57\u51fa\u529b\nsakuraScriptN (ChangeScope n a)   = const a <$> log (\"\\\\p[\" <> (show n) <> \"]\")\nsakuraScriptN (ChangeSurface n a) = const a <$> log (\"\\\\s[\" <> (show n) <> \"]\")\n--                                  |       |   |                     |\n--                                  |       |   |                     + append :: a -> a -> a\n--                                  |       |   + log :: forall eff. String -> Aff (console :: CONSOLE | eff) Unit\n--                                  |       + map :: forall a b. (a -> b) -> f a -> f b\n--                                  + const :: forall a b. a -> b -> a\n--                                  : Returns its first argument and ignores its second.\nsakuraScriptN (YenE a)            = const a <$> log \"\\\\e\"\n\n\nrun :: forall eff. NaturalTransformation SakuraScript (Aff (console :: CONSOLE, testOutput :: TESTOUTPUT | eff))\nrun = foldFree sakuraScriptN\n--    |\n--    + foldFree :: forall f m. MonadRec m => (f ~> m) -> (Free f) ~> m\n\nonBoot :: SakuraScript Unit\nonBoot = do\n  liftF (ChangeScope 1 unit)\n  liftF (ChangeSurface 10 unit)\n  liftF (Talk \"\u306a\u3093\u3084\u3001\u3048\u3089\u3044\u96e3\u3057\u3044\u8a00\u8a9e\u3084\u306a\u3002\" unit)\n  liftF (Wait 1000 unit)\n  liftF (ChangeScope 0 unit)\n  liftF (ChangeSurface 0 unit)\n  liftF (Talk \"\u305d\u3046\u3060\u306d\u30fc\u3002\" unit)\n  liftF (YenE unit)\n-- |\n-- + liftF :: forall f. f ~> Free f\n\n\nmain :: forall eff. Eff ( console :: CONSOLE , err :: EXCEPTION, testOutput :: TESTOUTPUT | eff ) Unit\nmain = do\n  void $ launchAff do\n-- |     |\n-- |     + launchAff :: forall e a. Aff e a -> Eff (err :: EXCEPTION | e) (Canceler e)\n-- |     : Converts the asynchronous computation into a synchronous one. All values are ignored, and if the computation produces an error, it is thrown.\n-- + void :: forall f a. Functor f => f a -> f Unit\n    forkAff do\n      run $ onBoot\n--  |\n--  + forkAff :: forall e a. Aff e a -> Aff e (Canceler e)\n--  : Forks the specified asynchronous computation so subsequent computations will not block on the result of the computation.\n--  : Returns a canceler that can be used to attempt cancellation of the forked computation.\n\n```\n\n## \u7d50\u679c\n\n```shell-session\n$ psc --version\n0.10.2\n$ pulp run\n* Building project in ***/purs-free\nCompiling Main\n* Build successful.\n\\p[1]\n\\s[10]\n\u306a\u3093\u3084\u3001\u3048\u3089\u3044\u96e3\u3057\u3044\u8a00\u8a9e\u3084\u306a\u3002\n\\_w[1000]\n\\p[0]\n\\s[0]\n\u305d\u3046\u3060\u306d\u30fc\u3002\n\\e\n\n```\n\n\n## \u5c0f\u5b66\u751f\u4e26\u307f\u306e\u611f\u60f3\n\n* \u6587\u5b57\u5217\u7d50\u5408\u306f `<>` \u3067 Semigroup \u306b\u3042\u308b\n* `~>` \u3068\u306f\u4e00\u4f53\u4f55\u306a\u306e\u304b\uff1f(Natural\u3067\u3001\u81ea\u7136\u5909\u63db\u3067\u3059\u3002\u578b\u30aa\u30da\u30ec\u30fc\u30bf\u3082\u5b9a\u7fa9\u3067\u304d\u308b\u306e\u3067\n* `YenE` \u3067\u51e6\u7406\u3092\u6253\u3061\u5207\u308a\u305f\u304b\u3063\u305f\u304c\u65b9\u6cd5\u304c\u5206\u304b\u3089\u306a\u304b\u3063\u305f\u3002 Nothing \u3068\u304b\u4f7f\u3048\u3070\u3044\u3044\u306e\u3060\u308d\u3046\u304b\uff1f\n* `\u2237` \u3084 `\u2192` \u3084 `\u2200` \u304c\u4f7f\u3048\u308b\u3088\u3046\u306b\u306a\u3063\u305f\u3088\u3046\u3060\uff1f\n* \u6539\u884c\u306a\u3057\u51fa\u529b\u306e\u305f\u3081\u306b `Test.Unit.Console` \u3092\u4f7f\u3063\u305f\n\n\n## \u53c2\u8003\n* http://d.hatena.ne.jp/fumiexcel/20121111/1352614885\n* http://d.hatena.ne.jp/its_out_of_tune/comment/20121111/1352632815\n* https://github.com/purescript/purescript-free\n* http://ssp.shillest.net/ukadoc/manual/list_sakura_script.html\n", "tags": ["purescript", "\u4f3a\u304b", "SakuraScript"]}