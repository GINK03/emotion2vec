{"tags": ["PlayFramework2.2.3", "Java", "websocket"], "context": " More than 1 year has passed since last update.\u524d\u56de\u306e\u7d9a\u304d\u3002\u4eca\u56de\u306f\u30b5\u30fc\u30d0\u5074\u306eWebSocket\u3092\u898b\u3066\u307f\u308b\u3002\n\nApplication.java\n\nApplication.java\npublic static WebSocket<JsonNode> chat(final String username) {\n\n    return new WebSocket<JsonNode>() {\n        // Called when the Websocket Handshake is done.\n        public void onReady(WebSocket.In<JsonNode> in, WebSocket.Out<JsonNode> out){\n\n            // Join the chat room.\n            try { \n                ChatRoom.join(username, in, out);\n            } catch (Exception ex) {\n                ex.printStackTrace();\n            }\n        }\n    };\n}\n\n\n\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u306bWebSocket\u3092\u8fd4\u3059\u3068\u3053\u308d\u3067\u3001\u7121\u540d\u30af\u30e9\u30b9\u3092\u5b9a\u7fa9\u3057\u3066\u3044\u308b\u3002\u3053\u306e\u30af\u30e9\u30b9\u306b\u306fonReady\u3068\u3044\u3046\u30e1\u30bd\u30c3\u30c9\u304c\u3042\u308b\u304c\u3001\u3053\u308c\u306f\u30cf\u30f3\u30c9\u30b7\u30a7\u30a4\u30af\u304c\u5b8c\u4e86\u3057\u305f\u6642\u70b9\u3067\u5b9f\u884c\u3055\u308c\u308b\u3068\u306e\u3053\u3068\u3002\u304a\u305d\u3089\u304f\u6700\u521d\u306b\u4e00\u56de\u547c\u3070\u308c\u308b\u306e\u3060\u308d\u3046\u306d\u3002\u5f15\u6570\u306bWebSocket\u306e\u5165\u529b\u3001\u51fa\u529b\u3092\u53d7\u3051\u53d6\u308a\u3001\u4e2d\u3067\u3084\u3063\u3066\u3044\u308b\u3053\u3068\u3068\u8a00\u3048\u3070\u3001\u30e6\u30fc\u30b6\u540d\u3068\u5165\u529b\u3001\u51fa\u529b\u3092\u6e21\u3057ChatRoom\u306ejoin\u3068\u3044\u3046\u30e1\u30bd\u30c3\u30c9\u3092\u547c\u3073\u51fa\u3057\u3066\u3044\u308b\u3060\u3051\u3067\u3042\u308b\u3002\u65e9\u901fChatRoom.java\u306ejoin\u30e1\u30bd\u30c3\u30c9\u3092\u898b\u3066\u307f\u3088\u3046\u3002\n\nChatRoom.java\n\nChatRoom.java\npackage models;\n\nimport play.mvc.*;\nimport play.libs.*;\nimport play.libs.F.*;\n\nimport scala.concurrent.Await;\nimport scala.concurrent.duration.Duration;\nimport akka.actor.*;\nimport static akka.pattern.Patterns.ask;\n\nimport com.fasterxml.jackson.databind.JsonNode;\nimport com.fasterxml.jackson.databind.node.ObjectNode;\nimport com.fasterxml.jackson.databind.node.ArrayNode;\n\n\n\nimport java.util.*;\n\nimport static java.util.concurrent.TimeUnit.*;\n\n/**\n * A chat room is an Actor.\n */\npublic class ChatRoom extends UntypedActor {\n\n    // Default room.\n    static ActorRef defaultRoom = Akka.system().actorOf(Props.create(ChatRoom.class));\n\n    // Create a Robot, just for fun.\n    static {\n        new Robot(defaultRoom);\n    }\n\n    /**\n     * Join the default room.\n     */\n    public static void join(final String username, WebSocket.In<JsonNode> in, WebSocket.Out<JsonNode> out) throws Exception{\n\n        // Send the Join message to the room\n        String result = (String)Await.result(ask(defaultRoom,new Join(username, out), 1000), Duration.create(1, SECONDS));\n\n        if(\"OK\".equals(result)) {\n\n            // For each event received on the socket,\n            in.onMessage(new Callback<JsonNode>() {\n               public void invoke(JsonNode event) {\n\n                   // Send a Talk message to the room.\n                   defaultRoom.tell(new Talk(username, event.get(\"text\").asText()), null);\n\n               } \n            });\n\n            // When the socket is closed.\n            in.onClose(new Callback0() {\n               public void invoke() {\n\n                   // Send a Quit message to the room.\n                   defaultRoom.tell(new Quit(username), null);\n\n               }\n            });\n\n        } else {\n\n            // Cannot connect, create a Json error.\n            ObjectNode error = Json.newObject();\n            error.put(\"error\", result);\n\n            // Send the error to the socket.\n            out.write(error);\n\n        }\n\n    }\n\n    // Members of this room.\n    Map<String, WebSocket.Out<JsonNode>> members = new HashMap<String, WebSocket.Out<JsonNode>>();\n\n    public void onReceive(Object message) throws Exception {\n\n        if(message instanceof Join) {\n\n            // Received a Join message\n            Join join = (Join)message;\n\n            // Check if this username is free.\n            if(members.containsKey(join.username)) {\n                getSender().tell(\"This username is already used\", getSelf());\n            } else {\n                members.put(join.username, join.channel);\n                notifyAll(\"join\", join.username, \"has entered the room\");\n                getSender().tell(\"OK\", getSelf());\n            }\n\n        } else if(message instanceof Talk)  {\n\n            // Received a Talk message\n            Talk talk = (Talk)message;\n\n            notifyAll(\"talk\", talk.username, talk.text);\n\n        } else if(message instanceof Quit)  {\n\n            // Received a Quit message\n            Quit quit = (Quit)message;\n\n            members.remove(quit.username);\n\n            notifyAll(\"quit\", quit.username, \"has left the room\");\n\n        } else {\n            unhandled(message);\n        }\n\n    }\n\n    // Send a Json event to all members\n    public void notifyAll(String kind, String user, String text) {\n        for(WebSocket.Out<JsonNode> channel: members.values()) {\n\n            ObjectNode event = Json.newObject();\n            event.put(\"kind\", kind);\n            event.put(\"user\", user);\n            event.put(\"message\", text);\n\n            ArrayNode m = event.putArray(\"members\");\n            for(String u: members.keySet()) {\n                m.add(u);\n            }\n\n            channel.write(event);\n        }\n    }\n\n    // -- Messages\n\n    public static class Join {\n\n        final String username;\n        final WebSocket.Out<JsonNode> channel;\n\n        public Join(String username, WebSocket.Out<JsonNode> channel) {\n            this.username = username;\n            this.channel = channel;\n        }\n\n    }\n\n    public static class Talk {\n\n        final String username;\n        final String text;\n\n        public Talk(String username, String text) {\n            this.username = username;\n            this.text = text;\n        }\n\n    }\n\n    public static class Quit {\n\n        final String username;\n\n        public Quit(String username) {\n            this.username = username;\n        }\n\n    }\n\n}\n\n\njoin\u30e1\u30bd\u30c3\u30c9\u3001\u6700\u521d\u306e\u4e00\u6587\u306f\u3053\u308c\u3067\u3042\u308b\u3002\n\nChatRoom.java\nString result = (String)Await.result(\n    ask(defaultRoom,new Join(username, out), 1000), \n    Duration.create(1, SECONDS));\n\n\nAwait.result\u3001ask\u3001Duration.create\u3001\u3069\u308c\u3082\u898b\u6163\u308c\u306a\u3044\u304c\u3001\u305d\u308c\u305e\u308c\nAwait.result \u306f scala.concurrent.Await.result\u3001\nask \u306f akka.pattern.Patterns.ask\u3001\nDuration.create \u306f scala.concurrent.duration.Duration.create\n\u306e\u3053\u3068\u3067\u3042\u308b\u3002\u3061\u3087\u3063\u3068API\u30ea\u30d5\u30a1\u30ec\u30f3\u30b9\u3092\u898b\u3066\u307f\u308b\u3002\n\nscala.concurrent.Await.result\u2192API\n\ndef result[T](awaitable: Awaitable[T], atMost: Duration): T\nAwait and return the result (of type T) of an Awaitable.\n\n\u51e6\u7406\u5f85\u3061\u3057\u3066\u3001Awaitable\u306e\u7d50\u679c(T)\u3092\u8fd4\u3059\u3001\u3068\u8a00\u3063\u3066\u3044\u308b\u3002\n\u5f15\u6570\u306b\u306fAwaitable(T)\u3068Duration\u3092\u53d7\u3051\u53d6\u308b\u3068\u8a00\u3063\u3066\u3044\u308b\u3002\n\nakka.pattern.Patterns.ask\u2192API\n\n\u7d9a\u3044\u3066ask\n def ask (actor: ActorRef, message: Any, timeoutMillis: Long): Future[AnyRef]\n\nJava API for `akka.pattern.ask`: Sends a message asynchronously and returns a Future holding the eventual reply message; this means that the target actor needs to send the result to the sender reference provided. The Future will be completed with an akka.actor.AskTimeoutException after the given timeout has expired; this is independent from any timeout applied while awaiting a result for this future (i.e. in Await.result(..., timeout)).\n\n\u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u975e\u540c\u671f\u3067\u9001\u308a\u3001\u7d50\u679c\u3001\u5fdc\u7b54\u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u542b\u3093\u3060Future\u3092\u53d7\u3051\u53d6\u308b\u3068\u8a00\u3063\u3066\u3044\u308b\u3002\n\u5f15\u6570\u306b\u306fActorRef\u3068\u30e1\u30c3\u30bb\u30fc\u30b8(Any)\u3068Long\u3092\u53d7\u3051\u53d6\u308b\u3001\u3068\u8a00\u3063\u3066\u3044\u308b\u3002\nFuture\u306fAwaitable\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30a4\u30b9\u3092\u5b9f\u88c5\u3057\u3066\u3044\u308b\u3088\u3046\u306a\u306e\u3067\u3001\u4e0a\u8a18Await.result\u306e\u7b2c\u4e00\u5f15\u6570\u306b\u306a\u308c\u305f\u306e\u3060\u306d\u3002\n\nChatRoom.java\nask(defaultRoom,new Join(username, out), 1000)\n\n\n\u3092\u3082\u3046\u5c11\u3057\u898b\u3066\u307f\u308b\u3068\u3001\ndefaultRoom\u2192\u7b2c1\u5f15\u6570ActorRef\nnew Join(username, out)\u2192\u7b2c2\u5f15\u6570Any(Java\u3067\u3044\u3046'Object')\u306e\u30e1\u30c3\u30bb\u30fc\u30b8\n1000\u2192\u7b2c3\u5f15\u6570Long\u306e\u30bf\u30a4\u30e0\u30a2\u30a6\u30c8\n\u3068\u306a\u3063\u3066\u3044\u308b\u3002\ndefaultRoom\u3068\u3044\u3046\u306e\u306fChatRoom\u30af\u30e9\u30b9\u306e\u982d\u306e\u65b9\u306b\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u308bstatic\u306aActorRef\u578b\u306e\u5909\u6570\u3067\u3042\u308b\u3002\n\nChatRoom.java\nstatic ActorRef defaultRoom = Akka.system().actorOf(Props.create(ChatRoom.class));\n\n\nAkka.system \u2192 play.libs.Akka.system\nactorOf \u2192 akka.actor.ActorSystem.actorOf\nProps.create \u2192 akka.actor.Props.create\n\u3053\u308c\u3089\u3092\u305d\u308c\u305e\u308c\u898b\u3066\u3044\u304f\u3002\n\nplay.libs.Akka.system()\u2192API\n\npublic static akka.actor.ActorSystem system()\n\n    Retrieve the application Akka Actor system. \n\nakka.actor.ActorSystem\u3092\u53d6\u3063\u3066\u304f\u308b\u3068\u8a00\u3063\u3066\u3044\u308b\u3002\n\nakka.actor.ActorSystem.actorOf\u2192API\n\n def actorOf (props: Props): ActorRef\n\nCreate new actor as child of this context and give it an automatically generated name (currently similar to base64-encoded integer count, reversed and with \u201c$\u201d prepended, may change in the future).\n\n\u3053\u306e\u30b3\u30f3\u30c6\u30ad\u30b9\u30c8(?)\u306e\u5b50\u3068\u3057\u3066\u65b0\u3057\u3044\u30a2\u30af\u30bf\u30fc\u3092\u4f5c\u6210\u3057\u3001\u81ea\u52d5\u3067\u540d\u524d\u3092\u3064\u3051\u3001ActorRef\u3092\u8fd4\u3059\u3068\u8a00\u3063\u3066\u3044\u308b\u3002\nProps(\u4ee5\u4e0b\u3067\u8aac\u660e)\u3092\u5f15\u6570\u3068\u3057\u3066\u53d7\u3051\u53d6\u308b\u3068\u8a00\u3063\u3066\u3044\u308b\u3002\n\nakka.actor.Props.create\u2192API\n\n static Props   create(java.lang.Class<?> clazz, java.lang.Object... args)\n          Java API: create a Props given a class and its constructor arguments.\n\nClass\u30af\u30e9\u30b9\u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u53d7\u3051\u53d6\u308a\u3001Props\u3092\u4f5c\u6210\u3059\u308b\u3068\u8a00\u3063\u3066\u3044\u308b\u3002\n\n\u3044\u3063\u305f\u3093\u307e\u3068\u3081\njoin\u30e1\u30bd\u30c3\u30c9\u3001\u6700\u521d\u306e\u4e00\u6587\u306e\u3053\u308c\u3067\n\nChatRoom.java\nString result = (String)Await.result(\n    ask(defaultRoom,new Join(username, out), 1000), \n    Duration.create(1, SECONDS));\n\n\nActor(ChatRoom)\u306bJoin\u578b\u306e\u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u975e\u540c\u671f\u3067\u9001\u4fe1\u3057\u3001\u51e6\u7406\u7d50\u679c\u3092Future\u578b\u3067\u53d7\u3051\u53d6\u3063\u3066(ask)\u3001Awaitable\u578b\u3067\u53d7\u3051\u53d6\u3063\u3066(result)\u3001String\u578b\u306b\u5909\u63db\u3057\u3066\u3044\u308b\u3002\n\u7aef\u7684\u306b\u8a00\u3046\u3068\u3001\u30c1\u30e3\u30c3\u30c8\u306e\u30cf\u30d6\u3068\u306a\u3063\u3066\u3044\u308bChatRoom\u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8(Actor)\u306b\u3001\u5165\u5ba4\u306e\u65e8\u3092\u4f1d\u3048\u3001\u53cd\u5fdc\u3092\u5f85\u3063\u3066\u3044\u308b\u308f\u3051\u3067\u3042\u308b\u3002\nJoin\u306f\u81ea\u5206\u3067\u5b9a\u7fa9\u3057\u305f\u30af\u30e9\u30b9\u3067\u3001username\u3068WebSocket\u306e\u51fa\u529b\u30c1\u30e3\u30f3\u30cd\u30eb\u304c\u5165\u3063\u3066\u3044\u308b\u3002\n\u3061\u306a\u307f\u306b\u3001ask\u306b\u5b9a\u7fa9\u3057\u3066\u3042\u308b\u30bf\u30a4\u30e0\u30a2\u30a6\u30c8\u306b\u9054\u3057\u3066\u3082\u5fdc\u7b54\u304c\u8fd4\u3089\u306a\u3044\u5834\u5408\u3001akka.actor.AskTimeoutException\u304c\u767a\u751f\u3059\u308b\u3002Await.result\u306e\u7b2c2\u5f15\u6570\u3067\u5b9a\u7fa9\u3057\u3066\u3042\u308b\u30bf\u30a4\u30e0\u30a2\u30a6\u30c8\u306b\u9054\u3057\u3066\u3082\u5fdc\u7b54\u304c\u8fd4\u3089\u306a\u3044\u5834\u5408\u3001java.util.concurrent.TimeoutException\u304c\u767a\u751f\u3059\u308b\u3002\u5fae\u5999\u306b\u9055\u3046\u306e\u3067\u6ce8\u610f\u3002\n\n\u7d9a\u30fbChatRoom.java(join\u30e1\u30bd\u30c3\u30c9)\n\nChatRoom.java\nif(\"OK\".equals(result)) {\n\n    // For each event received on the socket,\n    in.onMessage(new Callback<JsonNode>() {\n       public void invoke(JsonNode event) {\n\n           // Send a Talk message to the room.\n           defaultRoom.tell(new Talk(username, event.get(\"text\").asText()), null);\n\n       } \n    });\n\n    // When the socket is closed.\n    in.onClose(new Callback0() {\n       public void invoke() {\n\n           // Send a Quit message to the room.\n           defaultRoom.tell(new Quit(username), null);\n\n       }\n    });\n\n} else {\n\n    // Cannot connect, create a Json error.\n    ObjectNode error = Json.newObject();\n    error.put(\"error\", result);\n\n    // Send the error to the socket.\n    out.write(error);\n\n}\n\n\nChatRoom\u30a2\u30af\u30bf\u30fc\u306b\u5165\u5ba4\u3092\u554f\u3044\u5408\u308f\u305b\u3001\u3059\u3067\u306b\u30e6\u30fc\u30b6\u540d\u304c\u4f7f\u308f\u308c\u3066\u3044\u308b\u306a\u3069\u3067\u30a8\u30e9\u30fc\u306b\u306a\u3063\u305f\u5834\u5408\u3001WebSocket\u306e\u51fa\u529b\u30c1\u30e3\u30f3\u30cd\u30eb\u306b\u30a8\u30e9\u30fc\u7528\u306eJSON\u3092\u66f8\u304d\u51fa\u3057\u3066\u3044\u308b\u3002\u3053\u308c\u3067\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u5074\u306eWebSocket\u306eonmessage\u304c\u53cd\u5fdc\u3059\u308b\u3002\n\u5165\u5ba4\u304c\u7121\u4e8bOK\u3060\u3063\u305f\u5834\u5408\u306f\u3001WebSocket\u306e\u5165\u529b\u7528\u30c1\u30e3\u30f3\u30cd\u30eb\u306bin.onmessage\u3067\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u304b\u3089\u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u53d7\u4fe1\u3057\u305f\u6642\u306e\u30cf\u30f3\u30c9\u30e9\u3001in.onClose\u3067WebSocket\u304c\u9589\u3058\u3089\u308c\u305f\u6642\u306e\u30cf\u30f3\u30c9\u30e9\u3092play.libs.F\u306eCallback\u306e\u7121\u540d\u30af\u30e9\u30b9\u3067\u767b\u9332\u3057\u3066\u3044\u308b\u3002\nonMessage\u6642\u306f\u3001defaultRoom\u306etell\u30e1\u30bd\u30c3\u30c9\u3067\u3001Talk\u3068\u3044\u3046\u30aa\u30d6\u30b8\u30a7\u30af\u30c8(\u30c1\u30e3\u30c3\u30c8\u306e\u30c6\u30ad\u30b9\u30c8\u3092\u8868\u3059)\u3092\u3001onClose\u6642\u306fQuit\u3068\u3044\u3046\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u6e21\u3057\u3066\u3044\u308b\u3002\n\n\u3055\u3066\u3001ask\u3067\u9001\u3089\u308c\u3066\u304d\u305fJoin\u3082\u3001tell\u3067\u9001\u3089\u308c\u3066\u304d\u305fTalk\u3082Quit\u3082\u3001\u3059\u3079\u3066ChatRoom.java\u306eonReceive\u3067\u53d7\u3051\u6b62\u3081\u3066\u51e6\u7406\u3092\u884c\u3046\u306e\u3060\u304c\u30fb\u30fb\u30fb\u9577\u304f\u306a\u3063\u305f\u306e\u3067\u307e\u305f\u6b21\u56de\uff01\n\nPlayframework\u4ed8\u5c5e\u306e\u30b5\u30f3\u30d7\u30eb'websocket-chat'\u3092\u898b\u3066\u307f\u308b(1/4)\nPlayframework\u4ed8\u5c5e\u306e\u30b5\u30f3\u30d7\u30eb'websocket-chat'\u3092\u898b\u3066\u307f\u308b(2/4)\nPlayframework\u4ed8\u5c5e\u306e\u30b5\u30f3\u30d7\u30eb'websocket-chat'\u3092\u898b\u3066\u307f\u308b(4/4)\n[\u524d\u56de](http://qiita.com/yyyske/items/0d00e5e352b7078a501e)\u306e\u7d9a\u304d\u3002\u4eca\u56de\u306f\u30b5\u30fc\u30d0\u5074\u306eWebSocket\u3092\u898b\u3066\u307f\u308b\u3002\n\n#Application.java\n```java:Application.java\npublic static WebSocket<JsonNode> chat(final String username) {\n\t\n    return new WebSocket<JsonNode>() {\n        // Called when the Websocket Handshake is done.\n        public void onReady(WebSocket.In<JsonNode> in, WebSocket.Out<JsonNode> out){\n            \n            // Join the chat room.\n            try { \n                ChatRoom.join(username, in, out);\n            } catch (Exception ex) {\n                ex.printStackTrace();\n            }\n        }\n    };\n}\n```\n\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u306bWebSocket\u3092\u8fd4\u3059\u3068\u3053\u308d\u3067\u3001\u7121\u540d\u30af\u30e9\u30b9\u3092\u5b9a\u7fa9\u3057\u3066\u3044\u308b\u3002\u3053\u306e\u30af\u30e9\u30b9\u306b\u306f`onReady`\u3068\u3044\u3046\u30e1\u30bd\u30c3\u30c9\u304c\u3042\u308b\u304c\u3001\u3053\u308c\u306f\u30cf\u30f3\u30c9\u30b7\u30a7\u30a4\u30af\u304c\u5b8c\u4e86\u3057\u305f\u6642\u70b9\u3067\u5b9f\u884c\u3055\u308c\u308b\u3068\u306e\u3053\u3068\u3002\u304a\u305d\u3089\u304f\u6700\u521d\u306b\u4e00\u56de\u547c\u3070\u308c\u308b\u306e\u3060\u308d\u3046\u306d\u3002\u5f15\u6570\u306bWebSocket\u306e\u5165\u529b\u3001\u51fa\u529b\u3092\u53d7\u3051\u53d6\u308a\u3001\u4e2d\u3067\u3084\u3063\u3066\u3044\u308b\u3053\u3068\u3068\u8a00\u3048\u3070\u3001\u30e6\u30fc\u30b6\u540d\u3068\u5165\u529b\u3001\u51fa\u529b\u3092\u6e21\u3057`ChatRoom`\u306e`join`\u3068\u3044\u3046\u30e1\u30bd\u30c3\u30c9\u3092\u547c\u3073\u51fa\u3057\u3066\u3044\u308b\u3060\u3051\u3067\u3042\u308b\u3002\u65e9\u901f`ChatRoom.java`\u306e`join\u30e1\u30bd\u30c3\u30c9`\u3092\u898b\u3066\u307f\u3088\u3046\u3002\n\n#ChatRoom.java\n```java:ChatRoom.java\npackage models;\n\nimport play.mvc.*;\nimport play.libs.*;\nimport play.libs.F.*;\n\nimport scala.concurrent.Await;\nimport scala.concurrent.duration.Duration;\nimport akka.actor.*;\nimport static akka.pattern.Patterns.ask;\n\nimport com.fasterxml.jackson.databind.JsonNode;\nimport com.fasterxml.jackson.databind.node.ObjectNode;\nimport com.fasterxml.jackson.databind.node.ArrayNode;\n\n\n\nimport java.util.*;\n\nimport static java.util.concurrent.TimeUnit.*;\n\n/**\n * A chat room is an Actor.\n */\npublic class ChatRoom extends UntypedActor {\n    \n    // Default room.\n    static ActorRef defaultRoom = Akka.system().actorOf(Props.create(ChatRoom.class));\n    \n    // Create a Robot, just for fun.\n    static {\n        new Robot(defaultRoom);\n    }\n    \n    /**\n     * Join the default room.\n     */\n    public static void join(final String username, WebSocket.In<JsonNode> in, WebSocket.Out<JsonNode> out) throws Exception{\n        \n        // Send the Join message to the room\n        String result = (String)Await.result(ask(defaultRoom,new Join(username, out), 1000), Duration.create(1, SECONDS));\n        \n        if(\"OK\".equals(result)) {\n            \n            // For each event received on the socket,\n            in.onMessage(new Callback<JsonNode>() {\n               public void invoke(JsonNode event) {\n                   \n                   // Send a Talk message to the room.\n                   defaultRoom.tell(new Talk(username, event.get(\"text\").asText()), null);\n                   \n               } \n            });\n            \n            // When the socket is closed.\n            in.onClose(new Callback0() {\n               public void invoke() {\n                   \n                   // Send a Quit message to the room.\n                   defaultRoom.tell(new Quit(username), null);\n                   \n               }\n            });\n            \n        } else {\n            \n            // Cannot connect, create a Json error.\n            ObjectNode error = Json.newObject();\n            error.put(\"error\", result);\n            \n            // Send the error to the socket.\n            out.write(error);\n            \n        }\n        \n    }\n    \n    // Members of this room.\n    Map<String, WebSocket.Out<JsonNode>> members = new HashMap<String, WebSocket.Out<JsonNode>>();\n    \n    public void onReceive(Object message) throws Exception {\n        \n        if(message instanceof Join) {\n            \n            // Received a Join message\n            Join join = (Join)message;\n            \n            // Check if this username is free.\n            if(members.containsKey(join.username)) {\n                getSender().tell(\"This username is already used\", getSelf());\n            } else {\n                members.put(join.username, join.channel);\n                notifyAll(\"join\", join.username, \"has entered the room\");\n                getSender().tell(\"OK\", getSelf());\n            }\n            \n        } else if(message instanceof Talk)  {\n            \n            // Received a Talk message\n            Talk talk = (Talk)message;\n            \n            notifyAll(\"talk\", talk.username, talk.text);\n            \n        } else if(message instanceof Quit)  {\n            \n            // Received a Quit message\n            Quit quit = (Quit)message;\n            \n            members.remove(quit.username);\n            \n            notifyAll(\"quit\", quit.username, \"has left the room\");\n        \n        } else {\n            unhandled(message);\n        }\n        \n    }\n    \n    // Send a Json event to all members\n    public void notifyAll(String kind, String user, String text) {\n        for(WebSocket.Out<JsonNode> channel: members.values()) {\n            \n            ObjectNode event = Json.newObject();\n            event.put(\"kind\", kind);\n            event.put(\"user\", user);\n            event.put(\"message\", text);\n            \n            ArrayNode m = event.putArray(\"members\");\n            for(String u: members.keySet()) {\n                m.add(u);\n            }\n            \n            channel.write(event);\n        }\n    }\n    \n    // -- Messages\n    \n    public static class Join {\n        \n        final String username;\n        final WebSocket.Out<JsonNode> channel;\n        \n        public Join(String username, WebSocket.Out<JsonNode> channel) {\n            this.username = username;\n            this.channel = channel;\n        }\n        \n    }\n    \n    public static class Talk {\n        \n        final String username;\n        final String text;\n        \n        public Talk(String username, String text) {\n            this.username = username;\n            this.text = text;\n        }\n        \n    }\n    \n    public static class Quit {\n        \n        final String username;\n        \n        public Quit(String username) {\n            this.username = username;\n        }\n        \n    }\n    \n}\n```\n`join\u30e1\u30bd\u30c3\u30c9`\u3001\u6700\u521d\u306e\u4e00\u6587\u306f\u3053\u308c\u3067\u3042\u308b\u3002\n\n```java:ChatRoom.java\nString result = (String)Await.result(\n    ask(defaultRoom,new Join(username, out), 1000), \n    Duration.create(1, SECONDS));\n```\n`Await.result`\u3001`ask`\u3001`Duration.create`\u3001\u3069\u308c\u3082\u898b\u6163\u308c\u306a\u3044\u304c\u3001\u305d\u308c\u305e\u308c\n`Await.result` \u306f `scala.concurrent.Await.result`\u3001\n`ask` \u306f `akka.pattern.Patterns.ask`\u3001\n`Duration.create` \u306f `scala.concurrent.duration.Duration.create`\n\u306e\u3053\u3068\u3067\u3042\u308b\u3002\u3061\u3087\u3063\u3068API\u30ea\u30d5\u30a1\u30ec\u30f3\u30b9\u3092\u898b\u3066\u307f\u308b\u3002\n\n##scala.concurrent.Await.result\u2192[API](http://www.scala-lang.org/files/archive/nightly/docs/library/index.html#scala.concurrent.Await$)\n\n```text\ndef result[T](awaitable: Awaitable[T], atMost: Duration): T\nAwait and return the result (of type T) of an Awaitable.\n```\n\u51e6\u7406\u5f85\u3061\u3057\u3066\u3001Awaitable\u306e\u7d50\u679c(T)\u3092\u8fd4\u3059\u3001\u3068\u8a00\u3063\u3066\u3044\u308b\u3002\n\u5f15\u6570\u306b\u306fAwaitable(T)\u3068Duration\u3092\u53d7\u3051\u53d6\u308b\u3068\u8a00\u3063\u3066\u3044\u308b\u3002\n\n##akka.pattern.Patterns.ask\u2192[API](http://doc.akka.io/api/akka/2.0/akka/pattern/Patterns$.html)\n\u7d9a\u3044\u3066ask\n\n```text\n def ask (actor: ActorRef, message: Any, timeoutMillis: Long): Future[AnyRef]\n\nJava API for `akka.pattern.ask`: Sends a message asynchronously and returns a Future holding the eventual reply message; this means that the target actor needs to send the result to the sender reference provided. The Future will be completed with an akka.actor.AskTimeoutException after the given timeout has expired; this is independent from any timeout applied while awaiting a result for this future (i.e. in Await.result(..., timeout)).\n```\n\u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u975e\u540c\u671f\u3067\u9001\u308a\u3001\u7d50\u679c\u3001\u5fdc\u7b54\u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u542b\u3093\u3060`Future`\u3092\u53d7\u3051\u53d6\u308b\u3068\u8a00\u3063\u3066\u3044\u308b\u3002\n\u5f15\u6570\u306b\u306f`ActorRef`\u3068\u30e1\u30c3\u30bb\u30fc\u30b8(`Any`)\u3068`Long`\u3092\u53d7\u3051\u53d6\u308b\u3001\u3068\u8a00\u3063\u3066\u3044\u308b\u3002\n\n`Future`\u306f`Awaitable\u30a4\u30f3\u30bf\u30fc\u30d5\u30a7\u30a4\u30b9`\u3092\u5b9f\u88c5\u3057\u3066\u3044\u308b\u3088\u3046\u306a\u306e\u3067\u3001\u4e0a\u8a18`Await.result`\u306e\u7b2c\u4e00\u5f15\u6570\u306b\u306a\u308c\u305f\u306e\u3060\u306d\u3002\n\n```java:ChatRoom.java\nask(defaultRoom,new Join(username, out), 1000)\n```\n\u3092\u3082\u3046\u5c11\u3057\u898b\u3066\u307f\u308b\u3068\u3001\n`defaultRoom`\u2192\u7b2c1\u5f15\u6570`ActorRef`\n`new Join(username, out)`\u2192\u7b2c2\u5f15\u6570`Any(Java\u3067\u3044\u3046'Object')`\u306e\u30e1\u30c3\u30bb\u30fc\u30b8\n`1000`\u2192\u7b2c3\u5f15\u6570`Long`\u306e\u30bf\u30a4\u30e0\u30a2\u30a6\u30c8\n\u3068\u306a\u3063\u3066\u3044\u308b\u3002\n\ndefaultRoom\u3068\u3044\u3046\u306e\u306fChatRoom\u30af\u30e9\u30b9\u306e\u982d\u306e\u65b9\u306b\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u308bstatic\u306aActorRef\u578b\u306e\u5909\u6570\u3067\u3042\u308b\u3002\n\n```java:ChatRoom.java\nstatic ActorRef defaultRoom = Akka.system().actorOf(Props.create(ChatRoom.class));\n```\n`Akka.system` \u2192 `play.libs.Akka.system`\n`actorOf` \u2192 `akka.actor.ActorSystem.actorOf`\n`Props.create` \u2192 `akka.actor.Props.create `\n\u3053\u308c\u3089\u3092\u305d\u308c\u305e\u308c\u898b\u3066\u3044\u304f\u3002\n\n##play.libs.Akka.system()\u2192[API](http://www.playframework.com/documentation/2.0/api/java/play/libs/Akka.html)\n```\npublic static akka.actor.ActorSystem system()\n\n    Retrieve the application Akka Actor system. \n```\nakka.actor.ActorSystem\u3092\u53d6\u3063\u3066\u304f\u308b\u3068\u8a00\u3063\u3066\u3044\u308b\u3002\n\n##akka.actor.ActorSystem.actorOf\u2192[API](http://doc.akka.io/api/akka/2.0/akka/actor/ActorSystem.html)\n```text\n def actorOf (props: Props): ActorRef\n\nCreate new actor as child of this context and give it an automatically generated name (currently similar to base64-encoded integer count, reversed and with \u201c$\u201d prepended, may change in the future).\n```\n\n\u3053\u306e\u30b3\u30f3\u30c6\u30ad\u30b9\u30c8(?)\u306e\u5b50\u3068\u3057\u3066\u65b0\u3057\u3044\u30a2\u30af\u30bf\u30fc\u3092\u4f5c\u6210\u3057\u3001\u81ea\u52d5\u3067\u540d\u524d\u3092\u3064\u3051\u3001ActorRef\u3092\u8fd4\u3059\u3068\u8a00\u3063\u3066\u3044\u308b\u3002\nProps(\u4ee5\u4e0b\u3067\u8aac\u660e)\u3092\u5f15\u6570\u3068\u3057\u3066\u53d7\u3051\u53d6\u308b\u3068\u8a00\u3063\u3066\u3044\u308b\u3002\n\n##akka.actor.Props.create\u2192[API](http://doc.akka.io/japi/akka/2.3-M1/akka/actor/Props.html)\n```\n static Props \tcreate(java.lang.Class<?> clazz, java.lang.Object... args)\n          Java API: create a Props given a class and its constructor arguments.\n```\nClass\u30af\u30e9\u30b9\u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u53d7\u3051\u53d6\u308a\u3001Props\u3092\u4f5c\u6210\u3059\u308b\u3068\u8a00\u3063\u3066\u3044\u308b\u3002\n\n##\u3044\u3063\u305f\u3093\u307e\u3068\u3081\n`join`\u30e1\u30bd\u30c3\u30c9\u3001\u6700\u521d\u306e\u4e00\u6587\u306e\u3053\u308c\u3067\n\n```java:ChatRoom.java\nString result = (String)Await.result(\n    ask(defaultRoom,new Join(username, out), 1000), \n    Duration.create(1, SECONDS));\n```\n\nActor(ChatRoom)\u306b`Join`\u578b\u306e\u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u975e\u540c\u671f\u3067\u9001\u4fe1\u3057\u3001\u51e6\u7406\u7d50\u679c\u3092`Future`\u578b\u3067\u53d7\u3051\u53d6\u3063\u3066(ask)\u3001`Awaitable`\u578b\u3067\u53d7\u3051\u53d6\u3063\u3066(result)\u3001String\u578b\u306b\u5909\u63db\u3057\u3066\u3044\u308b\u3002\n\u7aef\u7684\u306b\u8a00\u3046\u3068\u3001<b>\u30c1\u30e3\u30c3\u30c8\u306e\u30cf\u30d6\u3068\u306a\u3063\u3066\u3044\u308bChatRoom\u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8(Actor)\u306b\u3001\u5165\u5ba4\u306e\u65e8\u3092\u4f1d\u3048\u3001\u53cd\u5fdc\u3092\u5f85\u3063\u3066\u3044\u308b</b>\u308f\u3051\u3067\u3042\u308b\u3002\n`Join`\u306f\u81ea\u5206\u3067\u5b9a\u7fa9\u3057\u305f\u30af\u30e9\u30b9\u3067\u3001`username`\u3068WebSocket\u306e\u51fa\u529b\u30c1\u30e3\u30f3\u30cd\u30eb\u304c\u5165\u3063\u3066\u3044\u308b\u3002\n\u3061\u306a\u307f\u306b\u3001`ask`\u306b\u5b9a\u7fa9\u3057\u3066\u3042\u308b\u30bf\u30a4\u30e0\u30a2\u30a6\u30c8\u306b\u9054\u3057\u3066\u3082\u5fdc\u7b54\u304c\u8fd4\u3089\u306a\u3044\u5834\u5408\u3001`akka.actor.AskTimeoutException`\u304c\u767a\u751f\u3059\u308b\u3002`Await.result`\u306e\u7b2c2\u5f15\u6570\u3067\u5b9a\u7fa9\u3057\u3066\u3042\u308b\u30bf\u30a4\u30e0\u30a2\u30a6\u30c8\u306b\u9054\u3057\u3066\u3082\u5fdc\u7b54\u304c\u8fd4\u3089\u306a\u3044\u5834\u5408\u3001`java.util.concurrent.TimeoutException`\u304c\u767a\u751f\u3059\u308b\u3002\u5fae\u5999\u306b\u9055\u3046\u306e\u3067\u6ce8\u610f\u3002\n\n#\u7d9a\u30fbChatRoom.java(join\u30e1\u30bd\u30c3\u30c9)\n```java:ChatRoom.java\nif(\"OK\".equals(result)) {\n    \n    // For each event received on the socket,\n    in.onMessage(new Callback<JsonNode>() {\n       public void invoke(JsonNode event) {\n           \n           // Send a Talk message to the room.\n           defaultRoom.tell(new Talk(username, event.get(\"text\").asText()), null);\n           \n       } \n    });\n    \n    // When the socket is closed.\n    in.onClose(new Callback0() {\n       public void invoke() {\n           \n           // Send a Quit message to the room.\n           defaultRoom.tell(new Quit(username), null);\n           \n       }\n    });\n    \n} else {\n    \n    // Cannot connect, create a Json error.\n    ObjectNode error = Json.newObject();\n    error.put(\"error\", result);\n    \n    // Send the error to the socket.\n    out.write(error);\n    \n}\n```\nChatRoom\u30a2\u30af\u30bf\u30fc\u306b\u5165\u5ba4\u3092\u554f\u3044\u5408\u308f\u305b\u3001\u3059\u3067\u306b\u30e6\u30fc\u30b6\u540d\u304c\u4f7f\u308f\u308c\u3066\u3044\u308b\u306a\u3069\u3067\u30a8\u30e9\u30fc\u306b\u306a\u3063\u305f\u5834\u5408\u3001WebSocket\u306e\u51fa\u529b\u30c1\u30e3\u30f3\u30cd\u30eb\u306b\u30a8\u30e9\u30fc\u7528\u306eJSON\u3092\u66f8\u304d\u51fa\u3057\u3066\u3044\u308b\u3002\u3053\u308c\u3067\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u5074\u306eWebSocket\u306e`onmessage`\u304c\u53cd\u5fdc\u3059\u308b\u3002\n\n\u5165\u5ba4\u304c\u7121\u4e8bOK\u3060\u3063\u305f\u5834\u5408\u306f\u3001WebSocket\u306e\u5165\u529b\u7528\u30c1\u30e3\u30f3\u30cd\u30eb\u306b`in.onmessage`\u3067\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u304b\u3089\u30e1\u30c3\u30bb\u30fc\u30b8\u3092\u53d7\u4fe1\u3057\u305f\u6642\u306e\u30cf\u30f3\u30c9\u30e9\u3001`in.onClose`\u3067WebSocket\u304c\u9589\u3058\u3089\u308c\u305f\u6642\u306e\u30cf\u30f3\u30c9\u30e9\u3092`play.libs.F`\u306e`Callback`\u306e\u7121\u540d\u30af\u30e9\u30b9\u3067\u767b\u9332\u3057\u3066\u3044\u308b\u3002\n\n`onMessage`\u6642\u306f\u3001`defaultRoom`\u306e`tell`\u30e1\u30bd\u30c3\u30c9\u3067\u3001`Talk`\u3068\u3044\u3046\u30aa\u30d6\u30b8\u30a7\u30af\u30c8(\u30c1\u30e3\u30c3\u30c8\u306e\u30c6\u30ad\u30b9\u30c8\u3092\u8868\u3059)\u3092\u3001`onClose`\u6642\u306f`Quit`\u3068\u3044\u3046\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u3092\u6e21\u3057\u3066\u3044\u308b\u3002\n\n---\n\u3055\u3066\u3001`ask`\u3067\u9001\u3089\u308c\u3066\u304d\u305f`Join`\u3082\u3001`tell`\u3067\u9001\u3089\u308c\u3066\u304d\u305f`Talk`\u3082`Quit`\u3082\u3001\u3059\u3079\u3066`ChatRoom.java`\u306e`onReceive`\u3067\u53d7\u3051\u6b62\u3081\u3066\u51e6\u7406\u3092\u884c\u3046\u306e\u3060\u304c\u30fb\u30fb\u30fb\u9577\u304f\u306a\u3063\u305f\u306e\u3067\u307e\u305f[\u6b21\u56de](http://qiita.com/yyyske/items/a6f5090f555038d6ff01)\uff01\n\n---\n[Playframework\u4ed8\u5c5e\u306e\u30b5\u30f3\u30d7\u30eb'websocket-chat'\u3092\u898b\u3066\u307f\u308b(1/4)](http://qiita.com/yyyske/items/d9e3cf69f7a6f5fb732b)\n[Playframework\u4ed8\u5c5e\u306e\u30b5\u30f3\u30d7\u30eb'websocket-chat'\u3092\u898b\u3066\u307f\u308b(2/4)](http://qiita.com/yyyske/items/0d00e5e352b7078a501e)\n[Playframework\u4ed8\u5c5e\u306e\u30b5\u30f3\u30d7\u30eb'websocket-chat'\u3092\u898b\u3066\u307f\u308b(4/4)](http://qiita.com/yyyske/items/a6f5090f555038d6ff01)\n"}