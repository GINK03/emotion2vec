{"context": "\n\n\u6982\u8981\nXamarin\u304c\u697d\u3057\u305d\u3046\u3060\u3063\u305f\u306e\u3067\u3001\u7df4\u7fd2\u3092\u517c\u306d\u3066\u4f5c\u3063\u3066\u307f\u305f\u3082\u306e\u3092\u6295\u7a3f\u3057\u307e\u3059\u3002\n\u5358\u7d14\u306b\u6587\u5b57\u3092\u5165\u529b\u3057\u3066\u30c4\u30a4\u30fc\u30c8\u3059\u308b\u3060\u3051\u306a\u7c21\u5358\u306a\u30a2\u30d7\u30ea\u3067\u3059\u3002\niOS\u3067\u3082Android\u3067\u3082\u52d5\u4f5c\u3057\u307e\u3059(\uff40\u30fb\u03c9\u30fb\u00b4)\n\n\u74b0\u5883\n\nMacOS X 10.11.5\nXamarin Studio Community 6.1(Alpha channel)\n\n\n\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u306e\u7a2e\u985e\n\nXamarin.Forms FormApp\nShared Code\u306fPCL (Portable Class Library)\n\n\nNuGet\u3067\u5c0e\u5165\u3059\u308b\u30d1\u30c3\u30b1\u30fc\u30b8\n\nCoreTweet Version 0.5.3\nCoreTweet.Streaming.Reactive Version 0.5.3\n\nCorcav.Behaviors Version 2.1.1\n\u203bCoreTweet\u306f\u3001\u306a\u305c\u304b\u6700\u65b0\u7248\u304c\u5c0e\u5165\u3067\u304d\u305a\u3001\u5c0e\u5165\u3067\u304d\u308b\u4e2d\u3067\u6700\u65b0\u306e\u30d0\u30fc\u30b8\u30e7\u30f3\u304c0.5.3\u306e\u305f\u3081\u3001\nCoreTweet\u306f0.5.3\u3092\u5c0e\u5165\u3057\u3066\u3044\u307e\u3059\u3002(\u00b4\u30fb\u03c9\u30fb\uff40)\n(\u672c\u4ef6\u306f\u30b3\u30e1\u30f3\u30c8\u3092\u9802\u3044\u305f\u306e\u3067\u305d\u3061\u3089\u3092\u53c2\u8003\u306b\u3057\u3066\u304f\u3060\u3055\u3044)\n\n\u306a\u304a\u3001\u4e0a\u8a18\u3092\u5c0e\u5165\u3059\u308b\u3068\u4e0b\u8a18\u304c\u81ea\u52d5\u3067\u5165\u308a\u307e\u3059\u3002\n\nNewtonsoft.Json\nRx-Core\nRx-Interfaces\nRx-Linq\n\n\n\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u540d\n\u4eca\u56de\u306f\u3001TwitterSample \u3068\u3044\u3046\u540d\u524d\u3067\u4f5c\u308a\u307e\u3057\u305f\u3002\n\n\u6ce8\u610f\u4e8b\u9805\n\nAndroid\u3067\u6b63\u3057\u304f\u52d5\u4f5c\u3055\u305b\u308b\u306b\u306f\u3001AndroidManifest.xml\u304b\u3089\u300cInternet\u300d\u306ePermission\u3092\u8a2d\u5b9a\u3057\u3066\u304f\u3060\u3055\u3044\u3002\niOS\u306eAppDelegate.cs\u5185\u306e LoadApplication(new App()); \u306e\u524d\u884c\u306b\u4e0b\u8a18\u3092\u8ffd\u8a18\u3057\u3066\u304f\u3060\u3055\u3044\u3002\nCorcav.Behaviors.Infrastructure.Init();\n\n\n\u30bd\u30fc\u30b9\n\nMainPage.xaml\nXAML\u3067UI\u3092\u66f8\u304d\u307e\u3059\u3002\n\u753b\u9762\u3092\u6a2a\u306b\u5411\u3051\u305f\u5834\u5408\u306a\u3069\u3001UI\u304c\u753b\u9762\u5916\u306b\u306f\u307f\u51fa\u305f\u6642\u306b\u64cd\u4f5c\u3067\u304d\u306a\u304f\u306a\u3063\u3066\u3057\u307e\u3046\u306e\u3067\u3001\nStackLayout\u3092ScrollView\u3067\u56f2\u3093\u3067\u3044\u307e\u3059\u3002\n\nMainPage.xaml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<ContentPage xmlns=\"http://xamarin.com/schemas/2014/forms\" \n        xmlns:x=\"http://schemas.microsoft.com/winfx/2009/xaml\"\n        xmlns:behaviors=\"clr-namespace:Corcav.Behaviors;assembly=Corcav.Behaviors\"\n        x:Class=\"TwitterSample.MainPage\">\n\n    <ScrollView Padding=\"30,60,30,30\">\n        <StackLayout>\n            <Label Text=\"Tweet\u3059\u308b\u3088\uff01\" HorizontalTextAlignment=\"Center\" />\n\n            <Editor Text=\"{Binding TweetText,Mode=TwoWay}\" HeightRequest=\"200\" BackgroundColor=\"Silver\">\n                <behaviors:Interaction.Behaviors>\n                    <behaviors:BehaviorCollection>\n                        <behaviors:EventToCommand EventName=\"TextChanged\" Command=\"{Binding CountWord}\" />\n                    </behaviors:BehaviorCollection>\n                </behaviors:Interaction.Behaviors>  \n            </Editor>\n\n            <Label Text=\"{Binding WordCount,Mode=OneWay}\" HorizontalTextAlignment=\"End\"/>\n\n            <Button Command=\"{Binding Tweet}\" Text=\"Tweet\u3059\u308b\uff01\" />\n        </StackLayout>\n    </ScrollView>\n\n</ContentPage>\n\n\n\nMainPage.xaml.cs\nBindingContext\u3092\u4f7f\u3044\u307e\u3059\u3002\n\nMainPage.xaml.cs\nusing Xamarin.Forms;\n\nnamespace TwitterSample\n{\n    public partial class MainPage : ContentPage\n    {\n        public MainPage()\n        {\n            InitializeComponent();\n\n            var View = new ViewModel(){};\n            this.BindingContext = View;\n        }\n    }\n}\n\n\n\nTwitterSample.cs\n\u6700\u521d\u306b\u5165\u3063\u3066\u3044\u305f\u30b3\u30fc\u30c9\u306f\u307b\u3068\u3093\u3069\u5168\u3066\u6d88\u3057\u3066\u3001MainPage = new MainPage(); \u3060\u3051\u306b\u3057\u307e\u3059\u3002\n\nTwitterSample.cs\nusing Xamarin.Forms;\n\nnamespace TwitterSample\n{\n    public class App : Application\n    {\n        public App()\n        {\n            // The root page of your application\n            MainPage = new MainPage();\n        }\n\n        protected override void OnStart()\n        {\n            // Handle when your app starts\n        }\n\n        protected override void OnSleep()\n        {\n            // Handle when your app sleeps\n        }\n\n        protected override void OnResume()\n        {\n            // Handle when your app resumes\n        }\n    }\n}\n\n\n\nViewModelBase.cs\nViewModel\u7528\u306e\u57fa\u5e95\u30af\u30e9\u30b9\u3092INotifyPropertyChanged\u3092\u7d99\u627f\u3057\u3066\u4f5c\u308a\u307e\u3059\u3002\n\nViewModelBase.cs\nusing System.ComponentModel;\n\nnamespace TwitterSample\n{\n    public class ViewModelBase : INotifyPropertyChanged\n    {\n        public event PropertyChangedEventHandler PropertyChanged;\n\n        public void NotityPropertyChanged(string info)\n        {\n            if (PropertyChanged != null)\n            {\n                PropertyChanged(this, new PropertyChangedEventArgs(info));\n            }\n        }\n    }\n}\n\n\n\nViewModel.cs\nViewModelBase\u304b\u3089ViewModel\u3092\u4f5c\u308a\u3001MainPage.xaml\u3068Binding\u3055\u305b\u308b\u30b3\u30de\u30f3\u30c9\u306a\u3069\u3092\u5b9a\u7fa9\u3057\u307e\u3059\u3002\n\nViewModel.cs\nusing System.Windows.Input;\nusing Xamarin.Forms;\n\nnamespace TwitterSample\n{\n    public class ViewModel : ViewModelBase\n    {\n        public ICommand CountWord { get; set; }\n        public ICommand Tweet { get; set; }\n\n        Model Model = new Model(){};\n\n        public ViewModel()\n        {\n            CountWord = new Command(() => WordCount = Model.CountWord(TweetText));\n            Tweet = new Command(() => Model.TweetAsync(TweetText));\n        }\n\n        private string _TweetText;\n        public string TweetText\n        {\n            get { return _TweetText; }\n            set\n            {\n                _TweetText = value;\n                NotityPropertyChanged(\"TweetText\");\n            }\n        }\n\n        private int _WordCount;\n        public int WordCount\n        {\n            get { return _WordCount; }\n            set\n            {\n                _WordCount = value;\n                NotityPropertyChanged(\"WordCount\");\n            }\n        }\n    }\n}\n\n\n\nModel.cs\n\u3053\u3053\u306bTweet\u3055\u305b\u308b\u30b3\u30fc\u30c9\u306a\u3069\u3092\u66f8\u304d\u307e\u3059\u3002\nKey\u3084Secret\u306f\u300cTwitter Apps\u300d\u304b\u3089\u53d6\u5f97\u3067\u304d\u307e\u3059\u3002\n\nModel.cs\nusing System.Threading.Tasks;\nusing CoreTweet;\nnamespace TwitterSample\n{\n    public class Model\n    {\n\n        public int CountWord(string TweetText)\n        {\n            return TweetText.Length;\n        }\n\n        async public Task TweetAsync(string TweetText)\n        {\n            var tokens = Tokens.Create(\"API key\",\n                                       \"API secret\",\n                                       \"Access token\",\n                                       \"Access token secret\");\n\n            var accepted = await Xamarin.Forms.Application.Current.MainPage.DisplayAlert(\"\u78ba\u8a8d\", \"Tweet\u3057\u307e\u3059\u304b\uff1f\", \"OK\",\"Cancel\");\n            if (accepted)\n            {\n                tokens.Statuses.UpdateAsync(status => TweetText);\n                await Xamarin.Forms.Application.Current.MainPage.DisplayAlert(\"(\uff40\u30fb\u03c9\u30fb\u00b4)\", \"Tweet\u3057\u307e\u3057\u305f\uff01\", \"OK\");\n            }\n        }\n    }\n}\n\n\n\n\u3067\u304d\u305f\u3082\u306e\n\u3053\u308c\u3067\u3001\u5358\u7d14\u306b\u30c4\u30a4\u30fc\u30c8\u3059\u308b\u3060\u3051\u306e\u30a2\u30d7\u30ea\u304c\u3067\u304d\u307e\u3057\u305f(\uff40\u30fb\u03c9\u30fb\u00b4)\n(\u6587\u5b57\u3092\u5165\u529b\u3059\u308b\u3068\u81ea\u52d5\u3067\u53f3\u4e0b\u306e\u6587\u5b57\u6570\u304c\u5909\u5316\u3057\u307e\u3059\u3002)\n\u3053\u3053\u9593\u9055\u3063\u3066\u3044\u308b\u3088\u30fc\u3068\u304b\u3001Qiita\u306e\u6295\u7a3f\u65b9\u6cd5\u304a\u304b\u3057\u3044\u3088\u30fc\u3068\u304b\u306a\u3069\u3042\u308c\u3070\u6559\u3048\u3066\u304f\u3060\u3055\u3044\uff01\n(\u6295\u7a3f\u521d\u3081\u3066\u306a\u306e\u3067\u3059\u3002)\n\n#\u6982\u8981\nXamarin\u304c\u697d\u3057\u305d\u3046\u3060\u3063\u305f\u306e\u3067\u3001\u7df4\u7fd2\u3092\u517c\u306d\u3066\u4f5c\u3063\u3066\u307f\u305f\u3082\u306e\u3092\u6295\u7a3f\u3057\u307e\u3059\u3002\n\u5358\u7d14\u306b\u6587\u5b57\u3092\u5165\u529b\u3057\u3066\u30c4\u30a4\u30fc\u30c8\u3059\u308b\u3060\u3051\u306a\u7c21\u5358\u306a\u30a2\u30d7\u30ea\u3067\u3059\u3002\niOS\u3067\u3082Android\u3067\u3082\u52d5\u4f5c\u3057\u307e\u3059(\uff40\u30fb\u03c9\u30fb\u00b4)\n\n##\u74b0\u5883\n- MacOS X 10.11.5\n- Xamarin Studio Community 6.1(Alpha channel)\n\n##\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u306e\u7a2e\u985e\n- Xamarin.Forms FormApp\n- Shared Code\u306fPCL (Portable Class Library)\n\n##NuGet\u3067\u5c0e\u5165\u3059\u308b\u30d1\u30c3\u30b1\u30fc\u30b8\n- CoreTweet Version 0.5.3\n- CoreTweet.Streaming.Reactive Version 0.5.3  \n- Corcav.Behaviors Version 2.1.1  \n\u203bCoreTweet\u306f\u3001\u306a\u305c\u304b\u6700\u65b0\u7248\u304c\u5c0e\u5165\u3067\u304d\u305a\u3001\u5c0e\u5165\u3067\u304d\u308b\u4e2d\u3067\u6700\u65b0\u306e\u30d0\u30fc\u30b8\u30e7\u30f3\u304c0.5.3\u306e\u305f\u3081\u3001  \nCoreTweet\u306f0.5.3\u3092\u5c0e\u5165\u3057\u3066\u3044\u307e\u3059\u3002(\u00b4\u30fb\u03c9\u30fb\uff40)   \n(\u672c\u4ef6\u306f\u30b3\u30e1\u30f3\u30c8\u3092\u9802\u3044\u305f\u306e\u3067\u305d\u3061\u3089\u3092\u53c2\u8003\u306b\u3057\u3066\u304f\u3060\u3055\u3044)\n\n\u306a\u304a\u3001\u4e0a\u8a18\u3092\u5c0e\u5165\u3059\u308b\u3068\u4e0b\u8a18\u304c\u81ea\u52d5\u3067\u5165\u308a\u307e\u3059\u3002\n\n- Newtonsoft.Json\n- Rx-Core\n- Rx-Interfaces\n- Rx-Linq\n\n##\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u540d\n\u4eca\u56de\u306f\u3001TwitterSample \u3068\u3044\u3046\u540d\u524d\u3067\u4f5c\u308a\u307e\u3057\u305f\u3002\n\n##\u6ce8\u610f\u4e8b\u9805\n- Android\u3067\u6b63\u3057\u304f\u52d5\u4f5c\u3055\u305b\u308b\u306b\u306f\u3001AndroidManifest.xml\u304b\u3089\u300cInternet\u300d\u306ePermission\u3092\u8a2d\u5b9a\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n- iOS\u306eAppDelegate.cs\u5185\u306e LoadApplication(new App()); \u306e\u524d\u884c\u306b\u4e0b\u8a18\u3092\u8ffd\u8a18\u3057\u3066\u304f\u3060\u3055\u3044\u3002  \nCorcav.Behaviors.Infrastructure.Init();\n\n#\u30bd\u30fc\u30b9\n\n##MainPage.xaml\nXAML\u3067UI\u3092\u66f8\u304d\u307e\u3059\u3002\n\u753b\u9762\u3092\u6a2a\u306b\u5411\u3051\u305f\u5834\u5408\u306a\u3069\u3001UI\u304c\u753b\u9762\u5916\u306b\u306f\u307f\u51fa\u305f\u6642\u306b\u64cd\u4f5c\u3067\u304d\u306a\u304f\u306a\u3063\u3066\u3057\u307e\u3046\u306e\u3067\u3001\nStackLayout\u3092ScrollView\u3067\u56f2\u3093\u3067\u3044\u307e\u3059\u3002\n\n```xml:MainPage.xaml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<ContentPage xmlns=\"http://xamarin.com/schemas/2014/forms\" \n\t\txmlns:x=\"http://schemas.microsoft.com/winfx/2009/xaml\"\n\t\txmlns:behaviors=\"clr-namespace:Corcav.Behaviors;assembly=Corcav.Behaviors\"\n\t\tx:Class=\"TwitterSample.MainPage\">\n\n\t<ScrollView Padding=\"30,60,30,30\">\n\t\t<StackLayout>\n\t\t\t<Label Text=\"Tweet\u3059\u308b\u3088\uff01\" HorizontalTextAlignment=\"Center\" />\n\n\t\t\t<Editor Text=\"{Binding TweetText,Mode=TwoWay}\" HeightRequest=\"200\" BackgroundColor=\"Silver\">\n\t\t\t\t<behaviors:Interaction.Behaviors>\n\t\t\t\t\t<behaviors:BehaviorCollection>\n\t\t\t\t\t\t<behaviors:EventToCommand EventName=\"TextChanged\" Command=\"{Binding CountWord}\" />\n\t\t\t\t\t</behaviors:BehaviorCollection>\n\t\t\t\t</behaviors:Interaction.Behaviors>\t\n\t\t\t</Editor>\n\t\t\t\n\t\t\t<Label Text=\"{Binding WordCount,Mode=OneWay}\" HorizontalTextAlignment=\"End\"/>\n\n\t\t\t<Button Command=\"{Binding Tweet}\" Text=\"Tweet\u3059\u308b\uff01\" />\n\t\t</StackLayout>\n\t</ScrollView>\n\t\n</ContentPage>\n```\n##MainPage.xaml.cs\nBindingContext\u3092\u4f7f\u3044\u307e\u3059\u3002\n\n```csharp:MainPage.xaml.cs\nusing Xamarin.Forms;\n\nnamespace TwitterSample\n{\n    public partial class MainPage : ContentPage\n    {\n        public MainPage()\n        {\n            InitializeComponent();\n\n            var View = new ViewModel(){};\n            this.BindingContext = View;\n        }\n    }\n}\n```\n\n##TwitterSample.cs\n\u6700\u521d\u306b\u5165\u3063\u3066\u3044\u305f\u30b3\u30fc\u30c9\u306f\u307b\u3068\u3093\u3069\u5168\u3066\u6d88\u3057\u3066\u3001MainPage = new MainPage(); \u3060\u3051\u306b\u3057\u307e\u3059\u3002\n\n```csharp:TwitterSample.cs\nusing Xamarin.Forms;\n\nnamespace TwitterSample\n{\n    public class App : Application\n    {\n        public App()\n        {\n            // The root page of your application\n            MainPage = new MainPage();\n        }\n\n        protected override void OnStart()\n        {\n            // Handle when your app starts\n        }\n\n        protected override void OnSleep()\n        {\n            // Handle when your app sleeps\n        }\n\n        protected override void OnResume()\n        {\n            // Handle when your app resumes\n        }\n    }\n}\n```\n\n##ViewModelBase.cs\nViewModel\u7528\u306e\u57fa\u5e95\u30af\u30e9\u30b9\u3092INotifyPropertyChanged\u3092\u7d99\u627f\u3057\u3066\u4f5c\u308a\u307e\u3059\u3002\n\n```csharp:ViewModelBase.cs\nusing System.ComponentModel;\n\nnamespace TwitterSample\n{\n    public class ViewModelBase : INotifyPropertyChanged\n    {\n        public event PropertyChangedEventHandler PropertyChanged;\n\n        public void NotityPropertyChanged(string info)\n        {\n            if (PropertyChanged != null)\n            {\n                PropertyChanged(this, new PropertyChangedEventArgs(info));\n            }\n        }\n    }\n}\n```\n\n##ViewModel.cs\nViewModelBase\u304b\u3089ViewModel\u3092\u4f5c\u308a\u3001MainPage.xaml\u3068Binding\u3055\u305b\u308b\u30b3\u30de\u30f3\u30c9\u306a\u3069\u3092\u5b9a\u7fa9\u3057\u307e\u3059\u3002\n\n```csharp:ViewModel.cs\nusing System.Windows.Input;\nusing Xamarin.Forms;\n\nnamespace TwitterSample\n{\n    public class ViewModel : ViewModelBase\n    {\n        public ICommand CountWord { get; set; }\n        public ICommand Tweet { get; set; }\n\n        Model Model = new Model(){};\n\n        public ViewModel()\n        {\n            CountWord = new Command(() => WordCount = Model.CountWord(TweetText));\n            Tweet = new Command(() => Model.TweetAsync(TweetText));\n        }\n\n        private string _TweetText;\n        public string TweetText\n        {\n            get { return _TweetText; }\n            set\n            {\n                _TweetText = value;\n                NotityPropertyChanged(\"TweetText\");\n            }\n        }\n\n        private int _WordCount;\n        public int WordCount\n        {\n            get { return _WordCount; }\n            set\n            {\n                _WordCount = value;\n                NotityPropertyChanged(\"WordCount\");\n            }\n        }\n    }\n}\n```\n\n##Model.cs\n\u3053\u3053\u306bTweet\u3055\u305b\u308b\u30b3\u30fc\u30c9\u306a\u3069\u3092\u66f8\u304d\u307e\u3059\u3002\nKey\u3084Secret\u306f\u300c[Twitter Apps](https://apps.twitter.com/)\u300d\u304b\u3089\u53d6\u5f97\u3067\u304d\u307e\u3059\u3002\n\n```csharp:Model.cs\nusing System.Threading.Tasks;\nusing CoreTweet;\nnamespace TwitterSample\n{\n    public class Model\n    {\n\n        public int CountWord(string TweetText)\n        {\n            return TweetText.Length;\n        }\n\n        async public Task TweetAsync(string TweetText)\n        {\n            var tokens = Tokens.Create(\"API key\",\n                                       \"API secret\",\n                                       \"Access token\",\n                                       \"Access token secret\");\n            \n            var accepted = await Xamarin.Forms.Application.Current.MainPage.DisplayAlert(\"\u78ba\u8a8d\", \"Tweet\u3057\u307e\u3059\u304b\uff1f\", \"OK\",\"Cancel\");\n            if (accepted)\n            {\n                tokens.Statuses.UpdateAsync(status => TweetText);\n                await Xamarin.Forms.Application.Current.MainPage.DisplayAlert(\"(\uff40\u30fb\u03c9\u30fb\u00b4)\", \"Tweet\u3057\u307e\u3057\u305f\uff01\", \"OK\");\n            }\n        }\n    }\n}\n```\n\n#\u3067\u304d\u305f\u3082\u306e\n\u3053\u308c\u3067\u3001\u5358\u7d14\u306b\u30c4\u30a4\u30fc\u30c8\u3059\u308b\u3060\u3051\u306e\u30a2\u30d7\u30ea\u304c\u3067\u304d\u307e\u3057\u305f(\uff40\u30fb\u03c9\u30fb\u00b4)\n(\u6587\u5b57\u3092\u5165\u529b\u3059\u308b\u3068\u81ea\u52d5\u3067\u53f3\u4e0b\u306e\u6587\u5b57\u6570\u304c\u5909\u5316\u3057\u307e\u3059\u3002)\n\n\u3053\u3053\u9593\u9055\u3063\u3066\u3044\u308b\u3088\u30fc\u3068\u304b\u3001Qiita\u306e\u6295\u7a3f\u65b9\u6cd5\u304a\u304b\u3057\u3044\u3088\u30fc\u3068\u304b\u306a\u3069\u3042\u308c\u3070\u6559\u3048\u3066\u304f\u3060\u3055\u3044\uff01\n(\u6295\u7a3f\u521d\u3081\u3066\u306a\u306e\u3067\u3059\u3002)\n\n<img width=\"1911\" alt=\"iOS\u3001Android\u30a8\u30df\u30e5\u30ec\u30fc\u30bf\" src=\"https://qiita-image-store.s3.amazonaws.com/0/65764/c4713a7a-7784-e70d-3893-72c2fa13796f.png\">\n", "tags": ["Xamarin"]}