{"context": "\n\n\u6982\u8981\n\u53d7\u4fe1\u30d7\u30ed\u30b0\u30e9\u30e0\u306f\u3001\u76f4\u4ea4\u5fa9\u8abf\u306e\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u3002\nR\u3001puredata\u3001python\u3067\u5b9f\u9a13\u3057\u305f\u3002\n\u5b9f\u969b\u306b\u306f\u3001javascript\u3067\u66f8\u3044\u3066\u3001jsdo\u306b\u7f6e\u3044\u305f\u3002\n\n\u76f4\u4ea4\u5fa9\u8abf\n\u4fe1\u53f7\u306b\u3001sin\u6ce2\u3068cos\u6ce2\u3092\u4e57\u7b97\u3057\u3066\u3001\u30ed\u30fc\u30d1\u30b9\u30d5\u30a3\u30eb\u30bf\u30fc\u3092\u901a\u3057\u3066\u3001\u81ea\u4e57\u306e\u548c\u306e\u5e73\u65b9\u6839\u3092\u3068\u308b\u3002\n\n\n\u5199\u771f\n\u4e0a\u304b\u3089\u3001\u30bd\u30fc\u30b9\u6ce2\u5f62\u3001\u5909\u8abf\u6ce2\u5f62\u3001\u5fa9\u8abf\u6ce2\u5f62\u3002\n\n\n\u5b9f\u9a13\nR\nR\npuredata\npuredata\npython\npython\n\n\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\nsin\u6ce2\u3001cos\u6ce2\u306f\u3001\uff15\uff10\uff10\uff10\uff48\uff5a\u3002\n\u30ed\u30fc\u30d1\u30b9\u30d5\u30a3\u30eb\u30bf\u30fc\u306f\u3001\uff11\uff15\uff10\uff10\uff48\uff5a\u3002\n\u30b5\u30f3\u30d7\u30ea\u30f3\u30b0\u5468\u6ce2\u6570\u306f\u3001\uff14\uff18\uff10\uff10\uff10\u3002\n\u30b2\u30a4\u30f3\u306f\u3001\uff15\nDC\u88dc\u6b63\u306f\u3001\uff0d\uff11\uff0e\uff10\nvar ws = new WebSocket('ws://ohijs0.paas.jp-e1.cloudn-service.com/sdr');\nvar ac = new (window.AudioContext || window.webkitAudioContext);\nfunction lpf(input, samplerate, freq) {\n    var q = 1.0;\n    var omega = 2.0 * 3.14159265 * freq / samplerate;\n    var alpha = Math.sin(omega) / (2.0 * q);\n    var a0 = 1.0 + alpha;\n    var a1 = -2.0 * Math.cos(omega);\n    var a2 = 1.0 - alpha;\n    var b0 = (1.0 - Math.cos(omega)) / 2.0;\n    var b1 = 1.0 - Math.cos(omega);\n    var b2 = (1.0 - Math.cos(omega)) / 2.0;\n    var size = input.length;\n    var output = new Float32Array(size);    \n    var in1 = 0;\n    var in2 = 0;\n    var out1 = 0;\n    var out2 = 0;\n    for (var i = 0; i < size; i++)\n    {\n        output[i] = b0 / a0 * input[i] + b1 / a0 * in1 + b2 / a0 * in2 - a1 / a0 * out1 - a2 / a0 * out2;\n        in2 = in1;\n        in1 = input[i];\n        out2 = out1;\n        out1 = output[i];\n    }\n    return output;\n}\nvar initial_delay_sec = 0;\nvar scheduled_time = 0;\nfunction playAudioStream(vam) {\n    var audio_buf = ac.createBuffer(1, vam.length, ac.sampleRate);\n    var audio_src = ac.createBufferSource();\n    var current_time = ac.currentTime;\n    var t;\n    var I = new Float32Array(vam.length);\n    var Q = new Float32Array(vam.length);\n    var I2;\n    var Q2;\n    var o = new Float32Array(vam.length);\n    for (t = 0; t < vam.length; t++)\n    {\n        I[t] = vam[t] * Math.cos(t / 48000 * 2 * Math.PI * 5000);\n        Q[t] = vam[t] * Math.sin(t / 48000 * 2 * Math.PI * 5000);\n    }\n    I2 = lpf(I, 48000, 1500);\n    Q2 = lpf(Q, 48000, 1500);\n    for (t = 0; t < vam.length; t++)\n    {\n        o[t] = Math.sqrt(I2[t] * I2[t] + Q2[t] * Q2[t]) * 5 - 1.0;\n    }\n    audio_buf.getChannelData(0).set(o);\n    audio_src.buffer = audio_buf;\n    audio_src.connect(ac.destination);\n    if (current_time < scheduled_time) \n    {\n        audio_src.start(scheduled_time);\n        scheduled_time += audio_buf.duration;\n    }\n    else\n    {\n        audio_src.start(current_time);\n        scheduled_time = current_time + audio_buf.duration + initial_delay_sec;\n    }    \n}\nws.binaryType = 'arraybuffer';\nws.onopen = function() {\n};\nws.onerror = function(e) {\n    alert(String(e));\n};\nws.onmessage = function(evt) {\n    if (evt.data.constructor !== ArrayBuffer) throw 'expecting ArrayBuffer';\n    playAudioStream(new Float32Array(evt.data));\n};\n\n\n#\u6982\u8981\n\u53d7\u4fe1\u30d7\u30ed\u30b0\u30e9\u30e0\u306f\u3001\u76f4\u4ea4\u5fa9\u8abf\u306e\u30a2\u30eb\u30b4\u30ea\u30ba\u30e0\u3002\nR\u3001puredata\u3001python\u3067\u5b9f\u9a13\u3057\u305f\u3002\n\u5b9f\u969b\u306b\u306f\u3001javascript\u3067\u66f8\u3044\u3066\u3001jsdo\u306b\u7f6e\u3044\u305f\u3002\n#\u76f4\u4ea4\u5fa9\u8abf\n\u4fe1\u53f7\u306b\u3001sin\u6ce2\u3068cos\u6ce2\u3092\u4e57\u7b97\u3057\u3066\u3001\u30ed\u30fc\u30d1\u30b9\u30d5\u30a3\u30eb\u30bf\u30fc\u3092\u901a\u3057\u3066\u3001\u81ea\u4e57\u306e\u548c\u306e\u5e73\u65b9\u6839\u3092\u3068\u308b\u3002\n![iq.JPG](https://qiita-image-store.s3.amazonaws.com/0/18104/5bc1bbbd-7962-41a4-ecb8-ae506643d667.jpeg)\n\n#\u5199\u771f\n\u4e0a\u304b\u3089\u3001\u30bd\u30fc\u30b9\u6ce2\u5f62\u3001\u5909\u8abf\u6ce2\u5f62\u3001\u5fa9\u8abf\u6ce2\u5f62\u3002\n![](https://qiita-image-store.s3.amazonaws.com/0/18104/770f2e8e-448a-4ae7-0b5e-1418678738fd.jpeg)\n#\u5b9f\u9a13\nR\n[R](http://qiita.com/ohisama@github/items/b3baca758e2dd0258692)\npuredata\n[puredata](http://qiita.com/ohisama@github/items/ba73362cb085b597003f)\npython\n[python](http://qiita.com/ohisama@github/items/21d6a8bf93b39595f8c7)\n#\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\nsin\u6ce2\u3001cos\u6ce2\u306f\u3001\uff15\uff10\uff10\uff10\uff48\uff5a\u3002\n\u30ed\u30fc\u30d1\u30b9\u30d5\u30a3\u30eb\u30bf\u30fc\u306f\u3001\uff11\uff15\uff10\uff10\uff48\uff5a\u3002\n\u30b5\u30f3\u30d7\u30ea\u30f3\u30b0\u5468\u6ce2\u6570\u306f\u3001\uff14\uff18\uff10\uff10\uff10\u3002\n\u30b2\u30a4\u30f3\u306f\u3001\uff15\nDC\u88dc\u6b63\u306f\u3001\uff0d\uff11\uff0e\uff10\n\n```\nvar ws = new WebSocket('ws://ohijs0.paas.jp-e1.cloudn-service.com/sdr');\nvar ac = new (window.AudioContext || window.webkitAudioContext);\nfunction lpf(input, samplerate, freq) {\n    var q = 1.0;\n    var omega = 2.0 * 3.14159265 * freq / samplerate;\n    var alpha = Math.sin(omega) / (2.0 * q);\n    var a0 = 1.0 + alpha;\n    var a1 = -2.0 * Math.cos(omega);\n    var a2 = 1.0 - alpha;\n    var b0 = (1.0 - Math.cos(omega)) / 2.0;\n    var b1 = 1.0 - Math.cos(omega);\n    var b2 = (1.0 - Math.cos(omega)) / 2.0;\n    var size = input.length;\n    var output = new Float32Array(size);    \n    var in1 = 0;\n    var in2 = 0;\n    var out1 = 0;\n    var out2 = 0;\n    for (var i = 0; i < size; i++)\n    {\n    \toutput[i] = b0 / a0 * input[i] + b1 / a0 * in1 + b2 / a0 * in2 - a1 / a0 * out1 - a2 / a0 * out2;\n     \tin2 = in1;\n     \tin1 = input[i];\n    \tout2 = out1;\n    \tout1 = output[i];\n    }\n    return output;\n}\nvar initial_delay_sec = 0;\nvar scheduled_time = 0;\nfunction playAudioStream(vam) {\n    var audio_buf = ac.createBuffer(1, vam.length, ac.sampleRate);\n    var audio_src = ac.createBufferSource();\n    var current_time = ac.currentTime;\n    var t;\n    var I = new Float32Array(vam.length);\n    var Q = new Float32Array(vam.length);\n    var I2;\n    var Q2;\n    var o = new Float32Array(vam.length);\n    for (t = 0; t < vam.length; t++)\n    {\n        I[t] = vam[t] * Math.cos(t / 48000 * 2 * Math.PI * 5000);\n        Q[t] = vam[t] * Math.sin(t / 48000 * 2 * Math.PI * 5000);\n    }\n    I2 = lpf(I, 48000, 1500);\n    Q2 = lpf(Q, 48000, 1500);\n    for (t = 0; t < vam.length; t++)\n    {\n        o[t] = Math.sqrt(I2[t] * I2[t] + Q2[t] * Q2[t]) * 5 - 1.0;\n    }\n    audio_buf.getChannelData(0).set(o);\n    audio_src.buffer = audio_buf;\n    audio_src.connect(ac.destination);\n    if (current_time < scheduled_time) \n    {\n        audio_src.start(scheduled_time);\n        scheduled_time += audio_buf.duration;\n    }\n    else\n    {\n        audio_src.start(current_time);\n        scheduled_time = current_time + audio_buf.duration + initial_delay_sec;\n    }    \n}\nws.binaryType = 'arraybuffer';\nws.onopen = function() {\n};\nws.onerror = function(e) {\n    alert(String(e));\n};\nws.onmessage = function(evt) {\n    if (evt.data.constructor !== ArrayBuffer) throw 'expecting ArrayBuffer';\n    playAudioStream(new Float32Array(evt.data));\n};\n\n```\n\n", "tags": ["IoT", "\u30e9\u30b8\u30aa", "jsdo"]}