{"context": " More than 1 year has passed since last update.Original post is http://blog.ik.am/#/entries/290 (Japanese)\nPlease correct my poor English ;)\n\nWhat is Spring Cloud Config?\nSpring Cloud Config project provides a mechanism of configuration in a distributed system.\nMy most interested topic in SpringOne 2gx 2014.\nSpring Cloud Config consists of Client and Server.\nSever manages the external configuration such as Git and properties file, provides the centralized configuration to all of Client.\nClient holds the configuration from Server using the abstraction mechanism Spring Framework originally has such as EnvironmentandPropertySource.\nIt also enables reloading the configuration.\nThe minimum system using them is as follows:\n\n\"Normal application\" requires the configuration is a Client. Even though there are many Clients, Server can mange them centrally.\n\nHow to use\nNote that the following contents are for 1.0.0.M1 version, these can be changed drastically in the future.\n\nSetup Config Server\nBuilding Config Server is very simple. Add dependency on org.springframework.cloud:spring-cloud-config-server and just put EnableConfigServer to the entry point class.\nSetting example of pom.xml is described later.\nEntry point  class is like as follows:\npackage demo;\n\nimport org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.EnableAutoConfiguration;\nimport org.springframework.cloud.config.server.EnableConfigServer;\nimport org.springframework.context.annotation.ComponentScan;\n\n@EnableAutoConfiguration\n@EnableConfigServer // important!!\n@ComponentScan\npublic class App {\n    public static void main(String[] args) {\n        SpringApplication.run(App.class, args);\n    }\n}\n\nDescribe the configuration where to fetch the configuration in bootstrap.yml just under the classpath (Note that it's not application.yml). \nAs a default, spring-cloud-samples/config-repo is configured to fetch. In this case, because I want to change properties,  I'm using my making/config-repo forked from it and set the url of  Git share repository url in spring.platform.config.server.uri property like:\nspring.platform.config.server.uri: https://github.com/making/config-repo\n\nFinally, the setting of the pom.xml. Since the official version has not been released yet, it has a little redundant configuration, it would be more simple after 1.0.0.RELEASE. The important part is the dependency on org.springframework.cloud:spring-cloud-config-server.\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n    <modelVersion>4.0.0</modelVersion>\n\n    <groupId>demo</groupId>\n    <artifactId>configserver</artifactId>\n    <version>1.0-SNAPSHOT</version>\n    <packaging>jar</packaging>\n\n    <parent>\n        <groupId>org.springframework.boot</groupId>\n        <artifactId>spring-boot-starter-parent</artifactId>\n        <version>1.1.5.RELEASE</version>\n        <relativePath/>\n    </parent>\n\n    <dependencyManagement>\n        <dependencies>\n            <dependency>\n                <groupId>org.springframework.cloud</groupId>\n                <artifactId>spring-cloud-starters</artifactId>\n                <version>1.0.0.M1</version>\n                <type>pom</type>\n                <scope>import</scope>\n            </dependency>\n        </dependencies>\n    </dependencyManagement>\n\n    <properties>\n        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n        <start-class>demo.App</start-class>\n        <java.version>1.8</java.version>\n    </properties>\n    <dependencies>\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-web</artifactId>\n        </dependency>\n        <dependency>\n            <groupId>org.springframework.cloud</groupId>\n            <artifactId>spring-cloud-config-server</artifactId>\n        </dependency>\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-test</artifactId>\n            <scope>test</scope>\n        </dependency>\n    </dependencies>\n    <repositories>\n        <repository>\n            <id>spring-milestones</id>\n            <name>Spring Milestones</name>\n            <url>http://repo.spring.io/milestone</url>\n            <snapshots>\n                <enabled>false</enabled>\n            </snapshots>\n        </repository>\n    </repositories>\n    <pluginRepositories>\n        <pluginRepository>\n            <id>spring-milestones</id>\n            <name>Spring Milestones</name>\n            <url>http://repo.spring.io/milestone</url>\n            <snapshots>\n                <enabled>false</enabled>\n            </snapshots>\n        </pluginRepository>\n    </pluginRepositories>\n    <build>\n        <plugins>\n            <plugin>\n                <groupId>org.springframework.boot</groupId>\n                <artifactId>spring-boot-maven-plugin</artifactId>\n                <dependencies>\n                    <dependency>\n                        <groupId>org.springframework</groupId>\n                        <artifactId>springloaded</artifactId>\n                        <version>${spring-loaded.version}</version>\n                    </dependency>\n                </dependencies>\n            </plugin>\n        </plugins>\n    </build>\n\n</project>\n\nThe project structure is as follows:\n\nServer runs on 8888 port when you run App class. Defaut configured application.yml is included in spring-cloud-config-server-1.0.0.M1.jar.\nBy accessing http://localhost:8888/{name}/{env}/{label}, you can get the configuration for each environment(profile) of each application.\nProbably you can regard\n\n\nname as application name\n\nenv as profile name (default is default)\n\nlabel as branch name (default is master)\n\nlabel can be omitted.\nIn the making/config-repo example, these are the following pic:\n\n\nBy accessing http://localhost:8888/foo/default ,you can get the configuration of foo.properties.\nBy accessing http://localhost:8888/foo/development ,you can get the configuration foo.properties overwritten by foo-development.properties.\n\n$ curl -X GET http://localhost:8888/foo/default | jq .\n{\n  \"propertySources\": [\n    {\n      \"source\": {\n        \"foo\": \"b\",\n        \"test\": \"This is a test\",\n        \"bar\": \"123456\"\n      },\n      \"name\": \"https://github.com/making/config-repo/foo.properties\"\n    },\n    {\n      \"source\": {\n        \"info.url\": \"https://github.com/spring-cloud-samples\",\n        \"info.description\": \"Spring Cloud Samples\"\n      },\n      \"name\": \"https://github.com/making/config-repo/application.yml\"\n    }\n  ],\n  \"label\": \"master\",\n  \"name\": \"default\"\n}\n\nThen set development to env and send a request:\n$ curl -X GET http://localhost:8888/foo/development | jq .\n{\n  \"propertySources\": [\n    {\n      \"source\": {\n        \"bar\": \"spam\"\n      },\n      \"name\": \"https://github.com/making/config-repo/foo-development.properties\"\n    },\n    {\n      \"source\": {\n        \"foo\": \"b\",\n        \"test\": \"This is a test\",\n        \"bar\": \"123456\"\n      },\n      \"name\": \"https://github.com/making/config-repo/foo.properties\"\n    },\n    {\n      \"source\": {\n        \"info.url\": \"https://github.com/spring-cloud-samples\",\n        \"info.description\": \"Spring Cloud Samples\"\n      },\n      \"name\": \"https://github.com/making/config-repo/application.yml\"\n    }\n  ],\n  \"label\": \"master\",\n  \"name\": \"development\"\n}\n\nReturned both values default anddevelopment. Which to use is determined at Client side. (this case,developmentis prioritized)\nLet's change foo-development.properties on Github as follows:\nbar: Updated!\nfoo: Added!\n\nThen send a request tohttp://localhost:8888/foo/development again\n$ curl -X GET http://localhost:8888/foo/development | jq .\n{\n  \"propertySources\": [\n    {\n      \"source\": {\n        \"foo\": \"Added!\",\n        \"bar\": \"Updated!\"\n      },\n      \"name\": \"https://github.com/making/config-repo/foo-development.properties\"\n    },\n    {\n      \"source\": {\n        \"foo\": \"b\",\n        \"test\": \"This is a test\",\n        \"bar\": \"123456\"\n      },\n      \"name\": \"https://github.com/making/config-repo/foo.properties\"\n    },\n    {\n      \"source\": {\n        \"info.url\": \"https://github.com/spring-cloud-samples\",\n        \"info.description\": \"Spring Cloud Samples\"\n      },\n      \"name\": \"https://github.com/making/config-repo/application.yml\"\n    }\n  ],\n  \"label\": \"master\",\n  \"name\": \"development\"\n}\n\nReturned latest value though pulling Git(In the following description, the original contents are reverted with git push -f origin HEAD^:master)\nHow to configure authentication/authorization and encrypt/decrypt are described in the official document.\n\nSetup Client\nLet's move on to the Client side. Client is a Spring Boot application with the dependency on org.springframework.cloud:spring-cloud-config-client, which enables to connect Config Server automatically and use properties via Config Server.\nAlso add the dependency on org.springframework.boot:spring-boot-starter-actuator.\nThe application name of Client can be defined with spring.application.name key in bootstrap.yml.\nspring:\n  application:\n    name: foo\n\nBy default, Config Server connects to http://localhost:8888 with env=default and label=master. To override, configure as bellow:\nspring:\n  application:\n    name: foo\n  cloud:\n    config:\n      env: default # optional\n      label: master # optional\n      uri: http://localhost:8888 # optional\n\nIn ClientAppclass which is the entry point for Client, implement a simple controller uses bar property.\npackage demo;\n\nimport org.springframework.beans.factory.annotation.Value;\nimport org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.EnableAutoConfiguration;\nimport org.springframework.context.annotation.ComponentScan;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RestController;\n\n@EnableAutoConfiguration\n@ComponentScan\n@RestController\npublic class ClientApp {\n    @Value(\"${bar:World!}\")\n    String bar;\n\n    @RequestMapping(\"/\")\n    String hello() {\n        return \"Hello \" + bar + \"!\";\n    }\n\n    public static void main(String[] args) {\n        SpringApplication.run(ClientApp.class, args);\n    }\n}\n\npom.xml is as follows\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n    <modelVersion>4.0.0</modelVersion>\n\n    <groupId>demo</groupId>\n    <artifactId>configclient</artifactId>\n    <version>1.0-SNAPSHOT</version>\n    <packaging>jar</packaging>\n\n    <parent>\n        <groupId>org.springframework.boot</groupId>\n        <artifactId>spring-boot-starter-parent</artifactId>\n        <version>1.1.5.RELEASE</version>\n        <relativePath/>\n    </parent>\n\n    <dependencyManagement>\n        <dependencies>\n            <dependency>\n                <groupId>org.springframework.cloud</groupId>\n                <artifactId>spring-cloud-starters</artifactId>\n                <version>1.0.0.M1</version>\n                <type>pom</type>\n                <scope>import</scope>\n            </dependency>\n        </dependencies>\n    </dependencyManagement>\n\n    <properties>\n        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n        <start-class>demo.ClientApp</start-class>\n        <java.version>1.8</java.version>\n    </properties>\n\n    <dependencies>\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-web</artifactId>\n        </dependency>\n        <dependency>\n            <groupId>org.springframework.cloud</groupId>\n            <artifactId>spring-cloud-config-client</artifactId>\n        </dependency>\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-actuator</artifactId>\n        </dependency>\n\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-test</artifactId>\n            <scope>test</scope>\n        </dependency>\n    </dependencies>\n    <repositories>\n        <repository>\n            <id>spring-milestones</id>\n            <name>Spring Milestones</name>\n            <url>http://repo.spring.io/milestone</url>\n            <snapshots>\n                <enabled>false</enabled>\n            </snapshots>\n        </repository>\n    </repositories>\n    <pluginRepositories>\n        <pluginRepository>\n            <id>spring-milestones</id>\n            <name>Spring Milestones</name>\n            <url>http://repo.spring.io/milestone</url>\n            <snapshots>\n                <enabled>false</enabled>\n            </snapshots>\n        </pluginRepository>\n    </pluginRepositories>\n    <build>\n        <plugins>\n            <plugin>\n                <groupId>org.springframework.boot</groupId>\n                <artifactId>spring-boot-maven-plugin</artifactId>\n                <dependencies>\n                    <dependency>\n                        <groupId>org.springframework</groupId>\n                        <artifactId>springloaded</artifactId>\n                        <version>${spring-loaded.version}</version>\n                    </dependency>\n                </dependencies>\n            </plugin>\n        </plugins>\n    </build>\n\n</project>\n\nProject structure is as follows. (application.yml is described later.)\n\nYou can find properties are obtained from Config Server by listing PropertiesSource using the feature of Spring Boot Actuator (http://localhost:8080/env).\n\nYou can also see a single property.\n$ curl http://localhost:8080/env/bar\n123456\n\nWhen you access to the controller,\n$ curl http://localhost:8080\nHello 123456!\n\nyou can find the property on Config Server is injected.\n\nChange configuration dynamically\nThen rewrite a property value on the Config Server as follows:\nbar: Spring Boot\n\nWhen you access a single property,\n$ curl http://localhost:8080/env/bar\n123456\n\nthe change on the Config Server is not reflected at this stage. In order to reflect it, accessing refresh endpoint with POST method is required.\n$ curl -X POST http://localhost:8080/refresh\n[\"bar\"]\n$ curl http://localhost:8080/env/bar\nSpring Boot\n\nYou can find PropertySourceis reflected in the client. \nAgain,\n$ curl http://localhost:8080\nHello 123456!\n\nIt is not possible to refresh the properties which are already \"DI\"ed (because this Controller is a singleton scope).\nIn order to re\"DI\", restart DI container is required by accessing restartendpoint with POST method.\n$ curl -X POST http://localhost:8080/restart\n{\"message\":\"Restarting\"}\n\nYou can find DI container restarted from log (but it takes a few seconds).\n$ curl http://localhost:8080\nHello Spring Boot!\n\nAt last, I could refresh the configuration without restarting the application!\nBy the way, restartendpoint is disabled by default. To enable it application.yml is needed to set as follows:\nendpoints:\n  restart:\n    enabled: true\n\n\nAd-hoc configuration change\nWithout rewriting the Config Server, it is possible to change the configuration in the Client side ad hoc.\nPOST properties to env endpoint as follows:\n$ curl -X POST http://localhost:8080/env -d bar=\"Spring Cloud\"\n{\"bar\":\"Spring Cloud\"}\n\nAt this point, PropertySource of this application is re-written, updated value can be obtained by GETting the property.\n$ curl http://localhost:8080/env/bar\nSpring Cloud\n\nHowever, the result of the controller is unchanged since re-DI is not performed.\n$ curl http://localhost:8080\nHello Spring Boot!\n\nAlso refesh cannot change the result.\n$ curl -X POST http://localhost:8080/refresh\n[]\n$ curl http://localhost:8080\nHello Spring Boot!\n\nAgain restart by restarting the DI container, it is possible to rewrite the result of the controller.\n$ curl -X POST http://localhost:8080/restart\n{\"message\":\"Restarting\"}\n$ curl http://localhost:8080\nHello Spring Cloud!\n\n\nIntroduction of Refresh scope\nSo far, you may feel unhappy to restart DI container because it takes a long time.\nSo refresh scope is introduced.  A bean annotated with@RefreshScopeare re-instantiated without restarting the DI container by POSTing refresh endpoint.\nModify ClientApp\npackage demo;\n\nimport org.springframework.beans.factory.annotation.Value;\nimport org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.EnableAutoConfiguration;\nimport org.springframework.cloud.context.config.annotation.RefreshScope;\nimport org.springframework.context.annotation.ComponentScan;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RestController;\n\n@EnableAutoConfiguration\n@ComponentScan\n@RestController\n@RefreshScope // important!\npublic class ClientApp {\n    @Value(\"${bar:World!}\")\n    String bar;\n\n    @RequestMapping(\"/\")\n    String hello() {\n        return \"Hello \" + bar + \"!\";\n    }\n\n    public static void main(String[] args) {\n        SpringApplication.run(ClientApp.class, args);\n    }\n}\n\nWhen the application is restarted, it can be seen that ad hoc changes has been lost.\n$ curl http://localhost:8080\nHello Spring Boot!\n\nAgain, change the value\n$ curl -X POST http://localhost:8080/env -d bar=\"Spring Cloud Config\"\n{\"bar\":\"Spring Cloud Config\"}\n\nThe send a POST request to refresh endpoint.\n\n$ curl -X POST http://localhost:8080/refresh\n[]\n\nAlthough a little while ago I did not changed this controller anything, this time @RefreshScope is anontated.\n$ curl http://localhost:8080\nHello Spring Cloud Config!\n\nIt was possible to reflect the properties!\nBy the way,\n\nThe beans annotated @ConfigurationProperties\n\nThe properties for the log level logging.level. *\n\nhas a refresh scope from the beginning.\n\nSample code is here\u3002\nI thought again Spring's DI container was excellent! \nThis feature should be prepared in Spring core.\nIntroduction of @Conditional (rather than Spring Boot) was revolutionary for Spring which provides like this functionality without almost any settings. \nOriginal post is http://blog.ik.am/#/entries/290 (Japanese)\n\nPlease correct my poor English ;)\n\n## What is Spring Cloud Config?\n\n[Spring Cloud Config](http://cloud.spring.io/spring-cloud-config/) project provides a mechanism of configuration in a distributed system.\nMy most interested topic in [SpringOne 2gx 2014](http://springone2gx.com/).\n\nSpring Cloud Config consists of Client and Server.\n\nSever manages the external configuration such as Git and properties file, provides the centralized configuration to all of Client.\nClient holds the configuration from Server using the abstraction mechanism Spring Framework originally has such as `Environment`and`PropertySource`.\nIt also enables reloading the configuration.\n\nThe minimum system using them is as follows:\n\n<a href=\"http://blog.ik.am/api/v1/files/593b022c-594e-4502-9144-2c4789118ada/config-architecture.png\"><img src=\"http://blog.ik.am/api/v1/files/593b022c-594e-4502-9144-2c4789118ada/config-architecture.png\" width=\"80%\"></a>\n\n\"Normal application\" requires the configuration is a Client. Even though there are many Clients, Server can mange them centrally.\n\n## How to use\n**Note that the following contents are for 1.0.0.M1 version, these can be changed drastically in the future.**\n\n### Setup Config Server\nBuilding Config Server is very simple. Add dependency on `org.springframework.cloud:spring-cloud-config-server` and just put `EnableConfigServer` to the entry point class.\n\nSetting example of pom.xml is described later.\n\nEntry point  class is like as follows:\n\n``` java\npackage demo;\n\nimport org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.EnableAutoConfiguration;\nimport org.springframework.cloud.config.server.EnableConfigServer;\nimport org.springframework.context.annotation.ComponentScan;\n\n@EnableAutoConfiguration\n@EnableConfigServer // important!!\n@ComponentScan\npublic class App {\n    public static void main(String[] args) {\n        SpringApplication.run(App.class, args);\n    }\n}\n```\nDescribe the configuration where to fetch the configuration in ` bootstrap.yml` just under the classpath (Note that it's not `application.yml`). \n\nAs a default, [spring-cloud-samples/config-repo](https://github.com/spring-cloud-samples/config-repo) is configured to fetch. In this case, because I want to change properties,  I'm using my [making/config-repo](https://github.com/making/config-repo) forked from it and set the url of  Git share repository url in `spring.platform.config.server.uri` property like:\n\n```\nspring.platform.config.server.uri: https://github.com/making/config-repo\n```\n\nFinally, the setting of the pom.xml. Since the official version has not been released yet, it has a little redundant configuration, it would be more simple after 1.0.0.RELEASE. The important part is the dependency on `org.springframework.cloud:spring-cloud-config-server`.\n\n``` xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n    <modelVersion>4.0.0</modelVersion>\n\n    <groupId>demo</groupId>\n    <artifactId>configserver</artifactId>\n    <version>1.0-SNAPSHOT</version>\n    <packaging>jar</packaging>\n\n    <parent>\n        <groupId>org.springframework.boot</groupId>\n        <artifactId>spring-boot-starter-parent</artifactId>\n        <version>1.1.5.RELEASE</version>\n        <relativePath/>\n    </parent>\n\n    <dependencyManagement>\n        <dependencies>\n            <dependency>\n                <groupId>org.springframework.cloud</groupId>\n                <artifactId>spring-cloud-starters</artifactId>\n                <version>1.0.0.M1</version>\n                <type>pom</type>\n                <scope>import</scope>\n            </dependency>\n        </dependencies>\n    </dependencyManagement>\n\n    <properties>\n        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n        <start-class>demo.App</start-class>\n        <java.version>1.8</java.version>\n    </properties>\n    <dependencies>\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-web</artifactId>\n        </dependency>\n        <dependency>\n            <groupId>org.springframework.cloud</groupId>\n            <artifactId>spring-cloud-config-server</artifactId>\n        </dependency>\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-test</artifactId>\n            <scope>test</scope>\n        </dependency>\n    </dependencies>\n    <repositories>\n        <repository>\n            <id>spring-milestones</id>\n            <name>Spring Milestones</name>\n            <url>http://repo.spring.io/milestone</url>\n            <snapshots>\n                <enabled>false</enabled>\n            </snapshots>\n        </repository>\n    </repositories>\n    <pluginRepositories>\n        <pluginRepository>\n            <id>spring-milestones</id>\n            <name>Spring Milestones</name>\n            <url>http://repo.spring.io/milestone</url>\n            <snapshots>\n                <enabled>false</enabled>\n            </snapshots>\n        </pluginRepository>\n    </pluginRepositories>\n    <build>\n        <plugins>\n            <plugin>\n                <groupId>org.springframework.boot</groupId>\n                <artifactId>spring-boot-maven-plugin</artifactId>\n                <dependencies>\n                    <dependency>\n                        <groupId>org.springframework</groupId>\n                        <artifactId>springloaded</artifactId>\n                        <version>${spring-loaded.version}</version>\n                    </dependency>\n                </dependencies>\n            </plugin>\n        </plugins>\n    </build>\n\n</project>\n```\n\nThe project structure is as follows:\n\n<a href=\"http://blog.ik.am/api/v1/files/a1949d15-b358-4b2c-9f44-09e29b5e8a7a/configserver-structure.png\"><img src=\"http://blog.ik.am/api/v1/files/a1949d15-b358-4b2c-9f44-09e29b5e8a7a/configserver-structure.png\" width=\"40%\"></a>\n\nServer runs on 8888 port when you run `App` class. Defaut configured `application.yml` is included in spring-cloud-config-server-1.0.0.M1.jar.\n\nBy accessing `http://localhost:8888/{name}/{env}/{label}`, you can get the configuration for each environment(profile) of each application.\n\nProbably you can regard\n\n* `name` as application name\n* `env` as profile name (default is `default`)\n* `label` as branch name (default is `master`)\n\n`label` can be omitted.\n\nIn the [making/config-repo](https://github.com/making/config-repo) example, these are the following pic:\n\n<a href=\"http://blog.ik.am/api/v1/files/e9ec6c76-a971-431b-9496-408321285975/env-on-github.png\"><img src=\"http://blog.ik.am/api/v1/files/e9ec6c76-a971-431b-9496-408321285975/env-on-github.png\" width=\"80%\"></a>\n\n* By accessing http://localhost:8888/foo/default ,you can get the configuration of [foo.properties](https://github.com/making/config-repo/blob/master/foo.properties).\n* By accessing http://localhost:8888/foo/development ,you can get the configuration [foo.properties](https://github.com/making/config-repo/blob/master/foo.properties) overwritten by [foo-development.properties](https://github.com/making/config-repo/blob/master/foo-development.properties).\n\n``` bash\n$ curl -X GET http://localhost:8888/foo/default | jq .\n{\n  \"propertySources\": [\n    {\n      \"source\": {\n        \"foo\": \"b\",\n        \"test\": \"This is a test\",\n        \"bar\": \"123456\"\n      },\n      \"name\": \"https://github.com/making/config-repo/foo.properties\"\n    },\n    {\n      \"source\": {\n        \"info.url\": \"https://github.com/spring-cloud-samples\",\n        \"info.description\": \"Spring Cloud Samples\"\n      },\n      \"name\": \"https://github.com/making/config-repo/application.yml\"\n    }\n  ],\n  \"label\": \"master\",\n  \"name\": \"default\"\n}\n```\nThen set `development` to `env` and send a request:\n\n``` bash\n$ curl -X GET http://localhost:8888/foo/development | jq .\n{\n  \"propertySources\": [\n    {\n      \"source\": {\n        \"bar\": \"spam\"\n      },\n      \"name\": \"https://github.com/making/config-repo/foo-development.properties\"\n    },\n    {\n      \"source\": {\n        \"foo\": \"b\",\n        \"test\": \"This is a test\",\n        \"bar\": \"123456\"\n      },\n      \"name\": \"https://github.com/making/config-repo/foo.properties\"\n    },\n    {\n      \"source\": {\n        \"info.url\": \"https://github.com/spring-cloud-samples\",\n        \"info.description\": \"Spring Cloud Samples\"\n      },\n      \"name\": \"https://github.com/making/config-repo/application.yml\"\n    }\n  ],\n  \"label\": \"master\",\n  \"name\": \"development\"\n}\n```\nReturned both values `default` and`development`. Which to use is determined at Client side. (this case,`development`is prioritized)\n\nLet's change `foo-development.properties` on Github as follows:\n\n```\nbar: Updated!\nfoo: Added!\n```\n\nThen send a request to`http://localhost:8888/foo/development` again\n\n``` bash\n$ curl -X GET http://localhost:8888/foo/development | jq .\n{\n  \"propertySources\": [\n    {\n      \"source\": {\n        \"foo\": \"Added!\",\n        \"bar\": \"Updated!\"\n      },\n      \"name\": \"https://github.com/making/config-repo/foo-development.properties\"\n    },\n    {\n      \"source\": {\n        \"foo\": \"b\",\n        \"test\": \"This is a test\",\n        \"bar\": \"123456\"\n      },\n      \"name\": \"https://github.com/making/config-repo/foo.properties\"\n    },\n    {\n      \"source\": {\n        \"info.url\": \"https://github.com/spring-cloud-samples\",\n        \"info.description\": \"Spring Cloud Samples\"\n      },\n      \"name\": \"https://github.com/making/config-repo/application.yml\"\n    }\n  ],\n  \"label\": \"master\",\n  \"name\": \"development\"\n}\n```\n\nReturned latest value though pulling Git(In the following description, the original contents are reverted with `git push -f origin HEAD^:master`)\n\nHow to configure authentication/authorization and encrypt/decrypt are described in the [official document](http://cloud.spring.io/spring-cloud-config/spring-cloud-config.html#_spring_cloud_config_server).\n\n### Setup Client\nLet's move on to the Client side. Client is a Spring Boot application with the dependency on `org.springframework.cloud:spring-cloud-config-client`, which enables to connect Config Server automatically and use properties via Config Server.\nAlso add the dependency on `org.springframework.boot:spring-boot-starter-actuator`.\n\nThe application name of Client can be defined with `spring.application.name` key in `bootstrap.yml`.\n\n```\nspring:\n  application:\n    name: foo\n```\n\nBy default, Config Server connects to `http://localhost:8888` with `env=default` and `label=master`. To override, configure as bellow:\n\n```\nspring:\n  application:\n    name: foo\n  cloud:\n    config:\n      env: default # optional\n      label: master # optional\n      uri: http://localhost:8888 # optional\n```\n\nIn `ClientApp`class which is the entry point for Client, implement a simple controller uses `bar` property.\n\n``` java\npackage demo;\n\nimport org.springframework.beans.factory.annotation.Value;\nimport org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.EnableAutoConfiguration;\nimport org.springframework.context.annotation.ComponentScan;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RestController;\n\n@EnableAutoConfiguration\n@ComponentScan\n@RestController\npublic class ClientApp {\n    @Value(\"${bar:World!}\")\n    String bar;\n\n    @RequestMapping(\"/\")\n    String hello() {\n        return \"Hello \" + bar + \"!\";\n    }\n\n    public static void main(String[] args) {\n        SpringApplication.run(ClientApp.class, args);\n    }\n}\n```\n\npom.xml is as follows\n\n``` xml\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n    <modelVersion>4.0.0</modelVersion>\n\n    <groupId>demo</groupId>\n    <artifactId>configclient</artifactId>\n    <version>1.0-SNAPSHOT</version>\n    <packaging>jar</packaging>\n\n    <parent>\n        <groupId>org.springframework.boot</groupId>\n        <artifactId>spring-boot-starter-parent</artifactId>\n        <version>1.1.5.RELEASE</version>\n        <relativePath/>\n    </parent>\n\n    <dependencyManagement>\n        <dependencies>\n            <dependency>\n                <groupId>org.springframework.cloud</groupId>\n                <artifactId>spring-cloud-starters</artifactId>\n                <version>1.0.0.M1</version>\n                <type>pom</type>\n                <scope>import</scope>\n            </dependency>\n        </dependencies>\n    </dependencyManagement>\n\n    <properties>\n        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n        <start-class>demo.ClientApp</start-class>\n        <java.version>1.8</java.version>\n    </properties>\n\n    <dependencies>\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-web</artifactId>\n        </dependency>\n        <dependency>\n            <groupId>org.springframework.cloud</groupId>\n            <artifactId>spring-cloud-config-client</artifactId>\n        </dependency>\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-actuator</artifactId>\n        </dependency>\n\n        <dependency>\n            <groupId>org.springframework.boot</groupId>\n            <artifactId>spring-boot-starter-test</artifactId>\n            <scope>test</scope>\n        </dependency>\n    </dependencies>\n    <repositories>\n        <repository>\n            <id>spring-milestones</id>\n            <name>Spring Milestones</name>\n            <url>http://repo.spring.io/milestone</url>\n            <snapshots>\n                <enabled>false</enabled>\n            </snapshots>\n        </repository>\n    </repositories>\n    <pluginRepositories>\n        <pluginRepository>\n            <id>spring-milestones</id>\n            <name>Spring Milestones</name>\n            <url>http://repo.spring.io/milestone</url>\n            <snapshots>\n                <enabled>false</enabled>\n            </snapshots>\n        </pluginRepository>\n    </pluginRepositories>\n    <build>\n        <plugins>\n            <plugin>\n                <groupId>org.springframework.boot</groupId>\n                <artifactId>spring-boot-maven-plugin</artifactId>\n                <dependencies>\n                    <dependency>\n                        <groupId>org.springframework</groupId>\n                        <artifactId>springloaded</artifactId>\n                        <version>${spring-loaded.version}</version>\n                    </dependency>\n                </dependencies>\n            </plugin>\n        </plugins>\n    </build>\n\n</project>\n```\n\n\nProject structure is as follows. (`application.yml` is described later.)\n\n<a href=\"http://blog.ik.am/api/v1/files/4153a2ac-8aae-41b1-b3cb-1b5a4d58eefd/configclient-structure.png\"><img src=\"http://blog.ik.am/api/v1/files/4153a2ac-8aae-41b1-b3cb-1b5a4d58eefd/configclient-structure.png\" width=\"40%\"></a>\n\nYou can find properties are obtained from Config Server by listing `PropertiesSource` using the feature of Spring Boot Actuator ([http://localhost:8080/env](http://localhost:8080/env)).\n\n\n<a href=\"http://blog.ik.am/api/v1/files/90ea7ff7-e99c-4dfd-915f-aa923c955faa/client-env.png\"><img src=\"http://blog.ik.am/api/v1/files/90ea7ff7-e99c-4dfd-915f-aa923c955faa/client-env.png\" width=\"80%\"></a>\n\nYou can also see a single property.\n\n``` bash\n$ curl http://localhost:8080/env/bar\n123456\n```\n\nWhen you access to the controller,\n\n``` bash\n$ curl http://localhost:8080\nHello 123456!\n```\nyou can find the property on Config Server is injected.\n\n#### Change configuration dynamically\n\nThen [rewrite](https://github.com/making/config-repo/commit/28a401b163cc77daba5478946b845362e28cb306) a property value on the Config Server as follows:\n\n```\nbar: Spring Boot\n```\n\nWhen you access a single property,\n\n``` bash\n$ curl http://localhost:8080/env/bar\n123456\n```\n\nthe change on the Config Server is not reflected at this stage. In order to reflect it, accessing `refresh` endpoint with POST method is required.\n\n``` bash\n$ curl -X POST http://localhost:8080/refresh\n[\"bar\"]\n$ curl http://localhost:8080/env/bar\nSpring Boot\n```\n\nYou can find `PropertySource`is reflected in the client. \n\nAgain,\n\n``` bash\n$ curl http://localhost:8080\nHello 123456!\n```\nIt is not possible to refresh the properties which are already \"DI\"ed (because this Controller is a singleton scope).\n\nIn order to re\"DI\", restart DI container is required by accessing `restart`endpoint with POST method.\n\n``` bash\n$ curl -X POST http://localhost:8080/restart\n{\"message\":\"Restarting\"}\n```\n\nYou can find DI container restarted from log (but it takes a few seconds).\n\n``` bash\n$ curl http://localhost:8080\nHello Spring Boot!\n```\nAt last, I could refresh the configuration without restarting the application!\n\nBy the way, `restart`endpoint is disabled by default. To enable it `application.yml` is needed to set as follows:\n\n```\nendpoints:\n  restart:\n    enabled: true\n```\n\n#### Ad-hoc configuration change\n\nWithout rewriting the Config Server, it is possible to change the configuration in the Client side ad hoc.\n\n\nPOST properties to `env` endpoint as follows:\n\n``` bash\n$ curl -X POST http://localhost:8080/env -d bar=\"Spring Cloud\"\n{\"bar\":\"Spring Cloud\"}\n```\n\nAt this point, `PropertySource` of this application is re-written, updated value can be obtained by GETting the property.\n\n``` bash\n$ curl http://localhost:8080/env/bar\nSpring Cloud\n```\nHowever, the result of the controller is unchanged since re-DI is not performed.\n\n``` bash\n$ curl http://localhost:8080\nHello Spring Boot!\n```\n\nAlso `refesh` cannot change the result.\n\n``` bash\n$ curl -X POST http://localhost:8080/refresh\n[]\n$ curl http://localhost:8080\nHello Spring Boot!\n```\nAgain `restart` by restarting the DI container, it is possible to rewrite the result of the controller.\n\n``` bash\n$ curl -X POST http://localhost:8080/restart\n{\"message\":\"Restarting\"}\n$ curl http://localhost:8080\nHello Spring Cloud!\n```\n\n#### Introduction of Refresh scope\nSo far, you may feel unhappy to restart DI container because it takes a long time.\n\nSo refresh scope is introduced.  A bean annotated with`@RefreshScope`are re-instantiated without restarting the DI container by POSTing `refresh` endpoint.\n\n\nModify `ClientApp`\n\n``` java\npackage demo;\n\nimport org.springframework.beans.factory.annotation.Value;\nimport org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.EnableAutoConfiguration;\nimport org.springframework.cloud.context.config.annotation.RefreshScope;\nimport org.springframework.context.annotation.ComponentScan;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RestController;\n\n@EnableAutoConfiguration\n@ComponentScan\n@RestController\n@RefreshScope // important!\npublic class ClientApp {\n    @Value(\"${bar:World!}\")\n    String bar;\n\n    @RequestMapping(\"/\")\n    String hello() {\n        return \"Hello \" + bar + \"!\";\n    }\n\n    public static void main(String[] args) {\n        SpringApplication.run(ClientApp.class, args);\n    }\n}\n```\n\nWhen the application is restarted, it can be seen that ad hoc changes has been lost.\n\n```\n$ curl http://localhost:8080\nHello Spring Boot!\n```\n\nAgain, change the value\n\n```\n$ curl -X POST http://localhost:8080/env -d bar=\"Spring Cloud Config\"\n{\"bar\":\"Spring Cloud Config\"}\n```\n\nThe send a POST request to `refresh` endpoint.\n```\n$ curl -X POST http://localhost:8080/refresh\n[]\n```\nAlthough a little while ago I did not changed this controller anything, this time `@RefreshScope` is anontated.\n\n\n```\n$ curl http://localhost:8080\nHello Spring Cloud Config!\n```\n\nIt was possible to reflect the properties!\n\nBy the way,\n\n* The beans annotated `@ConfigurationProperties`\n* The properties for the log level logging.level. *\n\nhas a refresh scope from the beginning.\n\n\n----\nSample code is [here](https://github.com/making/config)\u3002\n\nI thought again Spring's DI container was excellent! \nThis feature should be prepared in Spring core.\n\nIntroduction of `@Conditional` (rather than Spring Boot) was revolutionary for Spring which provides like this functionality without almost any settings. \n", "tags": ["spring", "spring-boot", "spring-cloud"]}