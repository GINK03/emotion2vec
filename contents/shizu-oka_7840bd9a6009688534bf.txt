{"context": "emacs25\u304b\u3089dynamic module\u3068\u3044\u3046\u6a5f\u80fd\u304c\u3042\u308b\u3088\u3046\u3067\u3059\u3002\n\u6298\u89d2\u306a\u306e\u3067\u3001rust\u3092\u4f7f\u3063\u3066\u305d\u306e\u6a5f\u80fd\u3092\u5229\u7528\u3057\u3066\u307f\u3088\u3046\u3068\u601d\u3044\u307e\u3059\u3002\n\n\u53c2\u8003\nEmacs\u306b mruby\u3092\u7d44\u307f\u8fbc\u3093\u3067\u307f\u305f\n\n\u7528\u610f\u3059\u308b\u3082\u306e\n\nrust(1.9.0)\nemacs(25.x)\n\n\nemacs\n$ git clone -b emacs-25 https://github.com/emacs-mirror/emacs.git --depth 1\n$ ./autogen.sh\n$ ./configure --with-modules\n$ make\n\n\n\nCargo+Rust\ncrates\u306bemacs\u3068\u3044\u3046\u305d\u308c\u3063\u307d\u3044\u3082\u306e\u304c\u3042\u308a\u307e\u3057\u305f\u3002\n\nCargo.toml\n\n[package]\nname = \"emacs-rust-fib\"\n\n[lib]\npath = \"src/lib.rs\"\ncrate-type = [\"dylib\"]\n\n[dependencies]\nlibc = \"*\"\nemacs = \"*\"\n\n\n\n\nsrc/lib.rs\n#![allow(non_snake_case, non_camel_case_types)]\nextern crate libc;\nextern crate emacs;\n\nuse std::os::raw::{c_int, c_void, c_char};\nuse std::ptr::null_mut;\n\nuse std::ffi::{CString, CStr};\nuse emacs::{get_environment, provide, bind_function, make_function, find_function};\nuse emacs::emacs_module::{emacs_env, emacs_value, intmax_t, ptrdiff_t, Struct_emacs_runtime};\n\n\n// \u30d5\u30a3\u30dc\u30ca\u30c3\u30c1\u6570\nfn fib(i: intmax_t) -> intmax_t {\n    match i {\n        0 | 1 => i,\n        n => fib(n-1) + fib(n-2),\n    }\n}\n\nunsafe extern fn f_fib(\n    env: *mut emacs_env,\n    _: ptrdiff_t,\n    args: *mut emacs_value,\n    _: *mut c_void\n) -> emacs_value {\n    // \u5f15\u6570\u30921\u3064\u3068\u3063\u3066\u304d\u3066\n    let arg0 = *args.offset(0) as emacs_value;\n    // rust\u3067\u5229\u7528\u3059\u308b\u5f62\u306b\u5909\u66f4\n    let r_i = (* env).extract_integer.unwrap()(env, arg0);\n    // \u8a08\u7b97\u7d50\u679c\u3092emacs\u7528\u306b\u5909\u63db\n    (*env).make_integer.unwrap()(env, fib(r_i))\n}\n\n// (buffer-substring-no-properties (point-min) (point-max))\nunsafe extern fn f_buffer_substring_from_rust (\n    env: *mut emacs_env,\n    _: ptrdiff_t,\n    _: *mut emacs_value,\n    _: *mut c_void\n) -> emacs_value {\n    let buffer_substring_no_properties = find_function(env, \"buffer-substring-no-properties\".to_string());\n    let point_min = find_function(env, \"point-min\".to_string());\n    let point_max = find_function(env, \"point-max\".to_string());\n\n    let args1: *mut emacs_value = [].as_mut_ptr();\n    let args2: *mut emacs_value = [].as_mut_ptr();\n\n    let pmin: emacs_value = (* env).funcall.unwrap()(env, point_min, 0, args1);\n    let pmax: emacs_value = (* env).funcall.unwrap()(env, point_max, 0, args2);\n    let args3: *mut emacs_value = [pmin, pmax].as_mut_ptr();\n    let text: emacs_value = (* env).funcall.unwrap()(env, buffer_substring_no_properties, 2, args3);\n\n    let mut buf_size: Box<i64> = Box::new(0);\n    (* env).copy_string_contents.unwrap()(env, text, null_mut(), &mut *buf_size);\n\n    let mut buf: Vec<c_char> = Vec::with_capacity(*buf_size as usize);\n    let buf_ptr: *mut c_char = buf.as_mut_slice().as_mut_ptr();\n    (* env).copy_string_contents.unwrap()(env, text, buf_ptr, &mut *buf_size);\n\n    let buf_str: &[c_char] = std::slice::from_raw_parts_mut(buf_ptr, *buf_size as usize);\n    let buf_str_ptr: &CStr = std::ffi::CStr::from_ptr(buf_str.as_ptr());\n    let buf_string: String = buf_str_ptr.to_string_lossy().into_owned();\n    let new_buf_string: String = format!(\"{} from rust\", buf_string);\n\n    (* env).make_string.unwrap()(env, CString::new(new_buf_string.as_str()).unwrap().as_ptr(), new_buf_string.len() as i64)\n}\n\n#[no_mangle]\npub extern fn plugin_is_GPL_compatible() -> libc::c_int { 1 } \n\n#[no_mangle]\npub extern fn emacs_module_init(ert: *mut Struct_emacs_runtime) -> c_int {\n    let env = get_environment(ert);\n    // \u5f15\u65701\u3064\n    let defun_fib = make_function(env, 1, 1, Some(f_fib), \"fibonacci\".to_string(), null_mut());\n    // (fib-r 10)\n    bind_function(env, \"fib-r\".to_string(), defun_fib);\n\n    // (buffer-substring-r)\n    let defun_buffer_substring = make_function(env, 0, 0, Some(f_buffer_substring_from_rust), \"\".to_string(), null_mut());\n    bind_function(env, \"buffer-substring-r\".to_string(), defun_buffer_substring);\n\n    // (prove 'rust-fib)\n    provide(env, \"rust-fib\".to_string());\n\n    0\n}\n\n\n\n\u30d3\u30eb\u30c9\n.so\u30d5\u30a1\u30a4\u30eb\u306b\u3057\u306a\u3044\u3068\u8aad\u307f\u8fbc\u307e\u306a\u304b\u3063\u305f\u306e\u3067\u2026\n$ cargo build\n\n$ mv target/debug/libemacs_rust_fib.dylib  target/debug/rust-fib.so\n\n\nemacs\u304b\u3089\u5229\u7528\n\nrust-fib-test.el\n(require 'rust-fib)\n\n(message (format \"fib(10): %d\" (fib-r 10)))\n\n\n$ src/emacs -Q -L <cargo\u306e\u30d1\u30b9>/target/debug -batch -l rust-fib-test.el\nfib(10): 55\n\n\n\u307e\u3068\u3081\nrust\u306e\u307f\u3067emacs\u306edynamic module\u3092\u5229\u7528\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3057\u305f\u3002\ncargo build --release\u3060\u3068\u4e0a\u624b\u304f\u3044\u304b\u306a\u304b\u3063\u305f\u306e\u3067\u3001\u8981\u8abf\u67fb\u3002\n\nemacs25\u304b\u3089dynamic module\u3068\u3044\u3046\u6a5f\u80fd\u304c\u3042\u308b\u3088\u3046\u3067\u3059\u3002\n\u6298\u89d2\u306a\u306e\u3067\u3001rust\u3092\u4f7f\u3063\u3066\u305d\u306e\u6a5f\u80fd\u3092\u5229\u7528\u3057\u3066\u307f\u3088\u3046\u3068\u601d\u3044\u307e\u3059\u3002\n\n# \u53c2\u8003\n\n[Emacs\u306b mruby\u3092\u7d44\u307f\u8fbc\u3093\u3067\u307f\u305f](http://qiita.com/syohex/items/fa71f1c61107b5e30c43)\n\n# \u7528\u610f\u3059\u308b\u3082\u306e\n\n1. rust(1.9.0)\n2. emacs(25.x)\n\n# emacs\n\n```bash\n$ git clone -b emacs-25 https://github.com/emacs-mirror/emacs.git --depth 1\n$ ./autogen.sh\n$ ./configure --with-modules\n$ make\n\n```\n\n# Cargo+Rust\n\ncrates\u306bemacs\u3068\u3044\u3046\u305d\u308c\u3063\u307d\u3044\u3082\u306e\u304c\b\u3042\u308a\u307e\u3057\u305f\u3002\n\n```Cargo.toml\n\n[package]\nname = \"emacs-rust-fib\"\n\n[lib]\npath = \"src/lib.rs\"\ncrate-type = [\"dylib\"]\n\n[dependencies]\nlibc = \"*\"\nemacs = \"*\"\n\n```\n\n```rust:src/lib.rs\n#![allow(non_snake_case, non_camel_case_types)]\nextern crate libc;\nextern crate emacs;\n\nuse std::os::raw::{c_int, c_void, c_char};\nuse std::ptr::null_mut;\n\nuse std::ffi::{CString, CStr};\nuse emacs::{get_environment, provide, bind_function, make_function, find_function};\nuse emacs::emacs_module::{emacs_env, emacs_value, intmax_t, ptrdiff_t, Struct_emacs_runtime};\n\n\n// \u30d5\u30a3\u30dc\u30ca\u30c3\u30c1\u6570\nfn fib(i: intmax_t) -> intmax_t {\n    match i {\n        0 | 1 => i,\n        n => fib(n-1) + fib(n-2),\n    }\n}\n\nunsafe extern fn f_fib(\n    env: *mut emacs_env,\n    _: ptrdiff_t,\n    args: *mut emacs_value,\n    _: *mut c_void\n) -> emacs_value {\n\t// \u5f15\u6570\u30921\u3064\u3068\u3063\u3066\u304d\u3066\n    let arg0 = *args.offset(0) as emacs_value;\n    // rust\u3067\u5229\u7528\u3059\u308b\u5f62\u306b\u5909\u66f4\n    let r_i = (* env).extract_integer.unwrap()(env, arg0);\n    // \u8a08\u7b97\u7d50\u679c\u3092emacs\u7528\u306b\u5909\u63db\n    (*env).make_integer.unwrap()(env, fib(r_i))\n}\n\n// (buffer-substring-no-properties (point-min) (point-max))\nunsafe extern fn f_buffer_substring_from_rust (\n    env: *mut emacs_env,\n    _: ptrdiff_t,\n    _: *mut emacs_value,\n    _: *mut c_void\n) -> emacs_value {\n    let buffer_substring_no_properties = find_function(env, \"buffer-substring-no-properties\".to_string());\n    let point_min = find_function(env, \"point-min\".to_string());\n    let point_max = find_function(env, \"point-max\".to_string());\n\n    let args1: *mut emacs_value = [].as_mut_ptr();\n    let args2: *mut emacs_value = [].as_mut_ptr();\n\n    let pmin: emacs_value = (* env).funcall.unwrap()(env, point_min, 0, args1);\n    let pmax: emacs_value = (* env).funcall.unwrap()(env, point_max, 0, args2);\n    let args3: *mut emacs_value = [pmin, pmax].as_mut_ptr();\n    let text: emacs_value = (* env).funcall.unwrap()(env, buffer_substring_no_properties, 2, args3);\n\n    let mut buf_size: Box<i64> = Box::new(0);\n    (* env).copy_string_contents.unwrap()(env, text, null_mut(), &mut *buf_size);\n\n    let mut buf: Vec<c_char> = Vec::with_capacity(*buf_size as usize);\n    let buf_ptr: *mut c_char = buf.as_mut_slice().as_mut_ptr();\n    (* env).copy_string_contents.unwrap()(env, text, buf_ptr, &mut *buf_size);\n\n    let buf_str: &[c_char] = std::slice::from_raw_parts_mut(buf_ptr, *buf_size as usize);\n    let buf_str_ptr: &CStr = std::ffi::CStr::from_ptr(buf_str.as_ptr());\n    let buf_string: String = buf_str_ptr.to_string_lossy().into_owned();\n    let new_buf_string: String = format!(\"{} from rust\", buf_string);\n\n    (* env).make_string.unwrap()(env, CString::new(new_buf_string.as_str()).unwrap().as_ptr(), new_buf_string.len() as i64)\n}\n\n#[no_mangle]\npub extern fn plugin_is_GPL_compatible() -> libc::c_int { 1 } \n\n#[no_mangle]\npub extern fn emacs_module_init(ert: *mut Struct_emacs_runtime) -> c_int {\n    let env = get_environment(ert);\n    // \u5f15\u65701\u3064\n    let defun_fib = make_function(env, 1, 1, Some(f_fib), \"fibonacci\".to_string(), null_mut());\n    // (fib-r 10)\n    bind_function(env, \"fib-r\".to_string(), defun_fib);\n\n    // (buffer-substring-r)\n    let defun_buffer_substring = make_function(env, 0, 0, Some(f_buffer_substring_from_rust), \"\".to_string(), null_mut());\n    bind_function(env, \"buffer-substring-r\".to_string(), defun_buffer_substring);\n\n    // (prove 'rust-fib)\n    provide(env, \"rust-fib\".to_string());\n\n    0\n}\n```\n\n# \u30d3\u30eb\u30c9\n\n.so\u30d5\u30a1\u30a4\u30eb\u306b\u3057\u306a\u3044\u3068\u8aad\u307f\u8fbc\u307e\u306a\u304b\u3063\u305f\u306e\u3067\u2026\n\n```bash\n$ cargo build\n\n$ mv target/debug/libemacs_rust_fib.dylib  target/debug/rust-fib.so\n```\n\n# emacs\u304b\u3089\u5229\u7528\n```elisp:rust-fib-test.el\n(require 'rust-fib)\n\n(message (format \"fib(10): %d\" (fib-r 10)))\n```\n\n```bash\n$ src/emacs -Q -L <cargo\u306e\u30d1\u30b9>/target/debug -batch -l rust-fib-test.el\nfib(10): 55\n```\n\n# \u307e\u3068\u3081\n\nrust\u306e\u307f\u3067emacs\u306edynamic module\u3092\u5229\u7528\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3057\u305f\u3002\n`cargo build --release`\u3060\u3068\u4e0a\u624b\u304f\u3044\u304b\u306a\u304b\u3063\u305f\u306e\u3067\u3001\u8981\u8abf\u67fb\u3002\n", "tags": ["Emacs", "rust"]}