{"tags": ["Bash", "Security"], "context": " More than 1 year has passed since last update.http://ftp.gnu.org/pub/gnu/bash/bash-4.3-patches/bash43-025 \u3092\u5c11\u3057\u307f\u3066\u307f\u305f\u3002\u3042\u307e\u308a\u3061\u3083\u3093\u3068\u8aad\u3093\u3067\u3044\u306a\u3044\u306e\u3067\u3001\u53c2\u8003\u7a0b\u5ea6\u306b\u3002\n\n\u8106\u5f31\u6027\u306e\u6982\u8981\nseclists\u306e\u6295\u7a3f\u306b\u3088\u308b\u3068\u3001\n\nBash supports exporting not just shell variables, but also shell functions to other bash instances, via the process environment to\n(indirect) child processes.  Current bash versions use an environment\nvariable named by the function name, and a function definition\nstarting with \u201c() {\u201d in the variable value to propagate function\ndefinitions through the environment.  The vulnerability occurs because\nbash does not stop after processing the function definition; it\ncontinues to parse and execute shell commands following the function\ndefinition.  For example, an environment variable setting of\n\n\u3069\u3046\u3082\u3001\u74b0\u5883\u5909\u6570\u306b() {\u304b\u3089\u59cb\u307e\u308b\u95a2\u6570\u306e\u5b9a\u7fa9\u304c\u3042\u308b\u3068\u3001bash\u306f\u305d\u306e\u95a2\u6570\u306e\u5b9a\u7fa9\u3060\u3051\u3067\u51e6\u7406\u3092\u505c\u6b62\u305b\u305a\u306b\u30d1\u30fc\u30ba\u3057\u3066\u3057\u307e\u3044\u3001\u95a2\u6570\u5b9a\u7fa9\u306b\u7d9a\u304f\u30b3\u30de\u30f3\u30c9\u304c\u5b9f\u884c\u3055\u308c\u308b\u3068\u3044\u3046\u3053\u3068\u3089\u3057\u3044\u3002\n\n\u3069\u3046\u3057\u3066\u3053\u3046\u306a\u3063\u305f\u306e\u3060\u308d\u3046\u304b\n\nvariables.c\n\u307e\u305a\u3001\u30d1\u30c3\u30c1\u306e variables.c \u3092\u66f8\u304d\u304b\u3048\u3066\u3044\u308b\u90e8\u5206\u304c\u3053\u3046\u306a\u3063\u3066\u3044\u308b\u3002\n*** ../bash-4.3-patched/variables.c 2014-05-15 08:26:50.000000000 -0400\n--- variables.c 2014-09-14 14:23:35.000000000 -0400\n***************\n*** 359,369 ****\n      strcpy (temp_string + char_index + 1, string);\n\n!     if (posixly_correct == 0 || legal_identifier (name))\n!       parse_and_execute (temp_string, name, SEVAL_NONINT|SEVAL_NOHIST);\n! \n!     /* Ancient backwards compatibility.  Old versions of bash exported\n!        functions like name()=() {...} */\n!     if (name[char_index - 1] == ')' && name[char_index - 2] == '(')\n!       name[char_index - 2] = '\\0';\n\n      if (temp_var = find_function (name))\n--- 364,372 ----\n      strcpy (temp_string + char_index + 1, string);\n\n!     /* Don't import function names that are invalid identifiers from the\n!        environment, though we still allow them to be defined as shell\n!        variables. */\n!     if (legal_identifier (name))\n!       parse_and_execute (temp_string, name, SEVAL_NONINT|SEVAL_NOHIST|SEVAL_FUNCDEF|SEVAL_ONECMD);\n\n      if (temp_var = find_function (name))\n\n\u3069\u3046\u3082 variables.c \u304c\u602a\u3057\u3044\u3088\u3046\u306a\u306e\u3067\u30bd\u30fc\u30b9\u3092\u5f15\u3063\u5f35\u3063\u3066\u304d\u3066\u5468\u8fba\u3092\u898b\u308b\u3002318\u884c\u76ee\u304b\u3089\u3001\u3069\u3046\u3084\u3089\u30d1\u30c3\u30c1\u3092\u5f53\u3066\u3066\u3044\u308b\u306e\u306finitialize_shell_variables\u95a2\u6570\u306e\u3088\u3046\u3060\u3002\n/* Initialize the shell variables from the current environment.\n   If PRIVMODE is nonzero, don't import functions from ENV or\n   parse $SHELLOPTS. */\nvoid\ninitialize_shell_variables (env, privmode)\n     char **env;\n     int privmode;\n{\n\n\u307e\u305a\u5909\u6570\u3092\u5ba3\u8a00\u3057\u3066\u3088\u304f\u5206\u304b\u3089\u306a\u3044\u95a2\u6570\u3092\u5b9f\u884c\u3002\n  char *name, *string, *temp_string;\n  int c, char_index, string_index, string_length, ro;\n  SHELL_VAR *temp_var;\n\n  create_variable_tables ();\n\n\u305d\u306e\u5f8c\u74b0\u5883\uff08env\uff09\u304b\u3089\u4e00\u3064\u305a\u3064\u74b0\u5883\u5909\u6570\u3068\u601d\u308f\u308c\u308b\u6587\u5b57\u5217\u3092\u53d6\u308a\u51fa\u3059\u3002\nfor (string_index = 0; string = env[string_index++]; )\n    {\n\nchar_index\u30920\u3067\u521d\u671f\u5316\u3057\u305f\u5f8c\u3001name\u306b\u74b0\u5883\u5909\u6570\uff08string\uff09\u306e\u30dd\u30a4\u30f3\u30bf\u3092\u30b3\u30d4\u30fc\u3057\u3066\u3001while\u3067=\u304c\u51fa\u73fe\u3059\u308b\u307e\u3067\u56de\u3059\u3002*string++\u306f\u5909\u6570c\u306b\u4ee3\u5165\u3057\u305f\u5f8c\u306b\u30dd\u30a4\u30f3\u30bf\u3092\u9032\u3081\u308b\u306e\u3067\u3001\u3053\u306e\u51e6\u7406\u304c\u7d42\u308f\u308b\u3068string\u306f=\u306e\u6b21\u306e\u6587\u5b57\u3092\u6307\u3059\u3088\u3046\u306b\u306a\u308b\u3002\n      char_index = 0;\n      name = string;\n      while ((c = *string++) && c != '=')\n    ;\n\n=\u304c\u306a\u304b\u3063\u305f\u308a\u3057\u305f\u5834\u5408\u306f\u30a8\u30e9\u30fc\u306b\u306a\u308b\u3088\u3046\u306b\u3059\u308b\u3002\u30a8\u30e9\u30fc\u306b\u306a\u3089\u306a\u304b\u3063\u305f\u5834\u5408\u306fchar_index\u306b=\u306e\u4f4d\u7f6e\uff08\u6570\u5b57\uff09\u3092\u5165\u308c\u308b\u3002\n      if (string[-1] == '=')\n    char_index = string - name - 1;\n\n      /* If there are weird things in the environment, like `=xxx' or a\n     string without an `=', just skip them. */\n      if (char_index == 0)\n    continue;\n\nname\u306e=\u3092\u6f70\u3057\u3066\\0\u306b\u3059\u308b\u3002\n      /* ASSERT(name[char_index] == '=') */\n      name[char_index] = '\\0';\n\n\u8b0e\u306e\u5909\u6570temp_var\u3092\u521d\u671f\u5316\u3002\n      temp_var = (SHELL_VAR *)NULL;\n\nstring\u306e\u5148\u982d\u304b\u30894\u30d0\u30a4\u30c8\u3092\u30c1\u30a7\u30c3\u30af\u3057\u3066\u3001\u305d\u308c\u304c() {\u3060\u3063\u305f\u3089\u95a2\u6570\u5b9a\u7fa9\u306e\u958b\u59cb\u3068\u5224\u65ad\u3057\u3066\u95a2\u6570\u3092\u51e6\u7406\u3059\u308b\u3002\n      /* If exported function, define it now.  Don't import functions from\n     the environment in privileged mode. */\n      if (privmode == 0 && read_but_dont_execute == 0 && STREQN (\"() {\", string, 4))\n    {\n\n\u5909\u6570temp_string\u306b\"name +  + string\"\u3092\u683c\u7d0d\u3002\n      string_length = strlen (string);\n      temp_string = (char *)xmalloc (3 + string_length + char_index);\n\n      strcpy (temp_string, name);\n      temp_string[char_index] = ' ';\n      strcpy (temp_string + char_index + 1, string);\n\nname\u304clegal_identifier\u306a\u3089\u3001parse_and_execute\u3067temp_string\u3092\u30d1\u30fc\u30b9\u3057\u3066\u5b9f\u884c\u3002\n      if (posixly_correct == 0 || legal_identifier (name))\n        parse_and_execute (temp_string, name, SEVAL_NONINT|SEVAL_NOHIST);\n\n\u3053\u3053\u306b\u30d1\u30c3\u30c1\u304c\u5f53\u3066\u3089\u308c\u3066\u3001\u6b21\u306e\u3088\u3046\u306b\u5909\u66f4\u3055\u308c\u305f\u3002\n      /* Don't import function names that are invalid identifiers from the\n         environment, though we still allow them to be defined as shell\n         variables. */\n      if (legal_identifier (name))\n        parse_and_execute (temp_string, name, SEVAL_NONINT|SEVAL_NOHIST|SEVAL_FUNCDEF|SEVAL_ONECMD);\n\nSEVAL_FUNCDEF\u3068SEVAL_ONECMD\u3068\u3044\u3046\u3082\u306e\u304c\u5897\u3048\u3066\u3044\u308b\u3002\u6050\u3089\u304ftemp_string\u306b\"\u95a2\u6570\u540d +  + () { ... }\"\u3068\u3044\u3046\u6587\u5b57\u5217\u304c\u305d\u306e\u307e\u307eparse_and_execute\u95a2\u6570\u306b\u6e21\u3055\u308c\u3066\u5b9f\u884c\u3055\u308c\u3066\u3044\u308b\u306e\u304c\u4e0d\u5473\u3044\u611f\u3058\u3060\u3063\u305f\u3088\u3046\u3060\u3002\n\ncommon.h\nSEVAL_FUNCDEF\u3068SEVAL_ONECMD\u3092\u8ffd\u52a0\u3057\u305f\u3089\u3057\u3044\u3002\n*** ../bash-4.3-patched/builtins/common.h   2013-07-08 16:54:47.000000000 -0400\n--- builtins/common.h   2014-09-12 14:25:47.000000000 -0400\n***************\n*** 34,37 ****\n--- 49,54 ----\n  #define SEVAL_PARSEONLY   0x020\n  #define SEVAL_NOLONGJMP 0x040\n+ #define SEVAL_FUNCDEF 0x080       /* only allow function definitions */\n+ #define SEVAL_ONECMD  0x100       /* only allow a single command */\n\n  /* Flags for describe_command, shared between type.def and command.def */\n\n\nbuiltins/evalstring.c\nparse_and_execute\u95a2\u6570\u3092\u6539\u9020\u3057\u3066\u3001\u95a2\u6570\u5b9a\u7fa9\u3068\u304b\u3057\u304b\u3067\u304d\u306a\u3044\u3088\u3046\u306b\u3059\u308b\u30d5\u30e9\u30b0\u304c\u6307\u5b9a\u3055\u308c\u305f\u6642\u306e\u51e6\u7406\u304c\u8ffd\u52a0\u3055\u308c\u3066\u3044\u308b\u3002\n189\u884c\u76ee\u304f\u3089\u3044\u306bparse_and_execute\u95a2\u6570\u306e\u5b9a\u7fa9\u304c\u3042\u308a\u3001\u3053\u308c\u3067\u5f15\u6570\u306e\u610f\u5473\u304c\u306a\u3093\u3068\u306a\u304f\u5206\u304b\u308b\u3002\n/* Parse and execute the commands in STRING.  Returns whatever\n   execute_command () returns.  This frees STRING.  FLAGS is a\n   flags word; look in common.h for the possible values.  Actions\n   are:\n    (flags & SEVAL_NONINT) -> interactive = 0;\n    (flags & SEVAL_INTERACT) -> interactive = 1;\n    (flags & SEVAL_NOHIST) -> call bash_history_disable ()\n    (flags & SEVAL_NOFREE) -> don't free STRING when finished\n    (flags & SEVAL_RESETLINE) -> reset line_number to 1\n*/\n\nint\nparse_and_execute (string, from_file, flags)\n     char *string;\n     const char *from_file;\n     int flags;\n{\n\n\u3069\u3046\u3084\u3089\u7b2c\u4e00\u5f15\u6570\u3092\u5b9f\u884c\u3057\u3066\u3001\u7b2c\u4e09\u5f15\u6570\u306f\u30d5\u30e9\u30b0\u3067\u3069\u3053\u307e\u3067\u306e\u51e6\u7406\u304c\u3067\u304d\u308b\u306e\u304b\u3092\u6307\u5b9a\u3057\u3066\u3044\u308b\u307f\u305f\u3044\u3002\n\u30d1\u30c3\u30c1\u3067\u306f\u3053\u3053\u306b\u3082\u4fee\u6b63\u304c\u5165\u3063\u3066\u3044\u308b\u3002\n*** ../bash-4.3-patched/builtins/evalstring.c   2014-02-11 09:42:10.000000000 -0500\n--- builtins/evalstring.c   2014-09-14 14:15:13.000000000 -0400\n***************\n*** 309,312 ****\n--- 313,324 ----\n          struct fd_bitmap *bitmap;\n\n+         if ((flags & SEVAL_FUNCDEF) && command->type != cm_function_def)\n+       {\n+         internal_warning (\"%s: ignoring function definition attempt\", from_file);\n+         should_jump_to_top_level = 0;\n+         last_result = last_command_exit_value = EX_BADUSAGE;\n+         break;\n+       }\n+ \n          bitmap = new_fd_bitmap (FD_BITMAP_SIZE);\n          begin_unwind_frame (\"pe_dispose\");\n***************\n\n\u3053\u3053\u3067\u306f\u6050\u3089\u304f\u3001\u30d5\u30e9\u30b0\u3067\u95a2\u6570\u306e\u5b9a\u7fa9\u304c\u671f\u5f85\u3055\u308c\u3066\u3044\u308b\u306b\u3082\u95a2\u308f\u3089\u305a\u3001command->type\uff08\u3053\u308c\u306f\u30b3\u30de\u30f3\u30c9\u3092\u30d1\u30fc\u30b9\u3057\u305f\u7d50\u679c\u304b\uff1f\uff09\u304c\u95a2\u6570\u3067\u306f\u306a\u304b\u3063\u305f\u3089\u8b66\u544a\u3092\u51fa\u3059\u3068\u3044\u3046\u611f\u3058\u304b\u3002\n*** 369,372 ****\n--- 381,387 ----\n          dispose_fd_bitmap (bitmap);\n          discard_unwind_frame (\"pe_dispose\");\n+ \n+         if (flags & SEVAL_ONECMD)\n+       break;\n        }\n    }\n\nSEVAL_ONECMD\u304c\u30d5\u30e9\u30b0\u3067\u6307\u5b9a\u3055\u308c\u3066\u3044\u305f\u3089\u3001\u4e00\u5ea6\u5b9f\u884c\u3057\u305f\u3089break\u3067\u305d\u308c\u4ee5\u4e0a\u51e6\u7406\u3057\u306a\u304f\u3059\u308b\u3068\u304b\u3060\u308d\u3046\u3002\n\n\u8b0e\n\nsubst.c\n*** ../bash-4.3-patched/subst.c 2014-08-11 11:16:35.000000000 -0400\n--- subst.c 2014-09-12 15:31:04.000000000 -0400\n***************\n*** 8048,8052 ****\n      goto return0;\n    }\n!       else if (var = find_variable_last_nameref (temp1))\n    {\n      temp = nameref_cell (var);\n--- 8118,8124 ----\n      goto return0;\n    }\n!       else if (var && (invisible_p (var) || var_isset (var) == 0))\n!   temp = (char *)NULL;\n!       else if ((var = find_variable_last_nameref (temp1)) && var_isset (var) && invisible_p (var) == 0)\n    {\n      temp = nameref_cell (var);\n\n\u3088\u304f\u308f\u304b\u308a\u307e\u305b\u3093\u3067\u3057\u305f\u3002\n\nAncient backwards compatibility \u306e\u6d88\u6ec5\n\u30d1\u30c3\u30c1\u3067 variables.c \u306e364\u884c\u76ee\u306e\u3053\u306e\u8fba\u304c\u524a\u9664\u3055\u308c\u3066\u3044\u308b\u3002\n      /* Ancient backwards compatibility.  Old versions of bash exported\n         functions like name()=() {...} */\n      if (name[char_index - 1] == ')' && name[char_index - 2] == '(')\n        name[char_index - 2] = '\\0';\n\n....\n\n      /* ( */\n      if (name[char_index - 1] == ')' && name[char_index - 2] == '\\0')\n        name[char_index - 2] = '(';     /* ) */\n\n\u3053\u308c\u304c\u3042\u308b\u3068\u4f55\u304c\u4e0d\u5473\u3044\u306e\u304b\u3002\n\n\u3053\u306e\u30d1\u30c3\u30c1\u3060\u3051\u3067\u306f\u307e\u305a\u3044\u3089\u3057\u3044\n\n\u307e\u3042\u3001\u306a\u3093\u304b\u30d1\u30fc\u30ba\u306b\u306f\u4ed6\u306b\u3082\u554f\u984c\u304c\u3042\u308b\u307f\u305f\u3044\u3002\nhttp://ftp.gnu.org/pub/gnu/bash/bash-4.3-patches/bash43-025 \u3092\u5c11\u3057\u307f\u3066\u307f\u305f\u3002\u3042\u307e\u308a\u3061\u3083\u3093\u3068\u8aad\u3093\u3067\u3044\u306a\u3044\u306e\u3067\u3001\u53c2\u8003\u7a0b\u5ea6\u306b\u3002\n\n# \u8106\u5f31\u6027\u306e\u6982\u8981\n\n[seclists\u306e\u6295\u7a3f](http://seclists.org/oss-sec/2014/q3/650)\u306b\u3088\u308b\u3068\u3001\n\n> Bash supports exporting not just shell variables, but also shell functions to other bash instances, via the process environment to\n(indirect) child processes.  Current bash versions use an environment\nvariable named by the function name, and a function definition\nstarting with \u201c() {\u201d in the variable value to propagate function\ndefinitions through the environment.  The vulnerability occurs because\nbash does not stop after processing the function definition; it\ncontinues to parse and execute shell commands following the function\ndefinition.  For example, an environment variable setting of\n\n\u3069\u3046\u3082\u3001\u74b0\u5883\u5909\u6570\u306b`() {`\u304b\u3089\u59cb\u307e\u308b\u95a2\u6570\u306e\u5b9a\u7fa9\u304c\u3042\u308b\u3068\u3001bash\u306f\u305d\u306e\u95a2\u6570\u306e\u5b9a\u7fa9\u3060\u3051\u3067\u51e6\u7406\u3092\u505c\u6b62\u305b\u305a\u306b\u30d1\u30fc\u30ba\u3057\u3066\u3057\u307e\u3044\u3001\u95a2\u6570\u5b9a\u7fa9\u306b\u7d9a\u304f\u30b3\u30de\u30f3\u30c9\u304c\u5b9f\u884c\u3055\u308c\u308b\u3068\u3044\u3046\u3053\u3068\u3089\u3057\u3044\u3002\n\n# \u3069\u3046\u3057\u3066\u3053\u3046\u306a\u3063\u305f\u306e\u3060\u308d\u3046\u304b\n\n## variables.c\n\n\u307e\u305a\u3001\u30d1\u30c3\u30c1\u306e _variables.c_ \u3092\u66f8\u304d\u304b\u3048\u3066\u3044\u308b\u90e8\u5206\u304c\u3053\u3046\u306a\u3063\u3066\u3044\u308b\u3002\n\n```diff\n*** ../bash-4.3-patched/variables.c\t2014-05-15 08:26:50.000000000 -0400\n--- variables.c\t2014-09-14 14:23:35.000000000 -0400\n***************\n*** 359,369 ****\n  \t  strcpy (temp_string + char_index + 1, string);\n  \n! \t  if (posixly_correct == 0 || legal_identifier (name))\n! \t    parse_and_execute (temp_string, name, SEVAL_NONINT|SEVAL_NOHIST);\n! \n! \t  /* Ancient backwards compatibility.  Old versions of bash exported\n! \t     functions like name()=() {...} */\n! \t  if (name[char_index - 1] == ')' && name[char_index - 2] == '(')\n! \t    name[char_index - 2] = '\\0';\n  \n  \t  if (temp_var = find_function (name))\n--- 364,372 ----\n  \t  strcpy (temp_string + char_index + 1, string);\n  \n! \t  /* Don't import function names that are invalid identifiers from the\n! \t     environment, though we still allow them to be defined as shell\n! \t     variables. */\n! \t  if (legal_identifier (name))\n! \t    parse_and_execute (temp_string, name, SEVAL_NONINT|SEVAL_NOHIST|SEVAL_FUNCDEF|SEVAL_ONECMD);\n  \n  \t  if (temp_var = find_function (name))\n```\n\n\u3069\u3046\u3082 _variables.c_ \u304c\u602a\u3057\u3044\u3088\u3046\u306a\u306e\u3067[\u30bd\u30fc\u30b9](https://ftp.gnu.org/gnu/bash/bash-4.3.tar.gz)\u3092\u5f15\u3063\u5f35\u3063\u3066\u304d\u3066\u5468\u8fba\u3092\u898b\u308b\u3002318\u884c\u76ee\u304b\u3089\u3001\u3069\u3046\u3084\u3089\u30d1\u30c3\u30c1\u3092\u5f53\u3066\u3066\u3044\u308b\u306e\u306f`initialize_shell_variables`\u95a2\u6570\u306e\u3088\u3046\u3060\u3002\n\n```c\n/* Initialize the shell variables from the current environment.\n   If PRIVMODE is nonzero, don't import functions from ENV or\n   parse $SHELLOPTS. */\nvoid\ninitialize_shell_variables (env, privmode)\n     char **env;\n     int privmode;\n{\n```\n\n\u307e\u305a\u5909\u6570\u3092\u5ba3\u8a00\u3057\u3066\u3088\u304f\u5206\u304b\u3089\u306a\u3044\u95a2\u6570\u3092\u5b9f\u884c\u3002\n\n```c\n  char *name, *string, *temp_string;\n  int c, char_index, string_index, string_length, ro;\n  SHELL_VAR *temp_var;\n\n  create_variable_tables ();\n```\n\n\u305d\u306e\u5f8c\u74b0\u5883\uff08`env`\uff09\u304b\u3089\u4e00\u3064\u305a\u3064\u74b0\u5883\u5909\u6570\u3068\u601d\u308f\u308c\u308b\u6587\u5b57\u5217\u3092\u53d6\u308a\u51fa\u3059\u3002\n\n```c\nfor (string_index = 0; string = env[string_index++]; )\n    {\n```\n\n`char_index`\u30920\u3067\u521d\u671f\u5316\u3057\u305f\u5f8c\u3001`name`\u306b\u74b0\u5883\u5909\u6570\uff08`string`\uff09\u306e\u30dd\u30a4\u30f3\u30bf\u3092\u30b3\u30d4\u30fc\u3057\u3066\u3001`while`\u3067`=`\u304c\u51fa\u73fe\u3059\u308b\u307e\u3067\u56de\u3059\u3002`*string++`\u306f\u5909\u6570`c`\u306b\u4ee3\u5165\u3057\u305f\u5f8c\u306b\u30dd\u30a4\u30f3\u30bf\u3092\u9032\u3081\u308b\u306e\u3067\u3001\u3053\u306e\u51e6\u7406\u304c\u7d42\u308f\u308b\u3068`string`\u306f`=`\u306e\u6b21\u306e\u6587\u5b57\u3092\u6307\u3059\u3088\u3046\u306b\u306a\u308b\u3002\n\n```c\n      char_index = 0;\n      name = string;\n      while ((c = *string++) && c != '=')\n\t;\n```\n\n`=`\u304c\u306a\u304b\u3063\u305f\u308a\u3057\u305f\u5834\u5408\u306f\u30a8\u30e9\u30fc\u306b\u306a\u308b\u3088\u3046\u306b\u3059\u308b\u3002\u30a8\u30e9\u30fc\u306b\u306a\u3089\u306a\u304b\u3063\u305f\u5834\u5408\u306f`char_index`\u306b`=`\u306e\u4f4d\u7f6e\uff08\u6570\u5b57\uff09\u3092\u5165\u308c\u308b\u3002\n\n```c\n      if (string[-1] == '=')\n\tchar_index = string - name - 1;\n\n      /* If there are weird things in the environment, like `=xxx' or a\n\t string without an `=', just skip them. */\n      if (char_index == 0)\n\tcontinue;\n```\n\n`name`\u306e`=`\u3092\u6f70\u3057\u3066`\\0`\u306b\u3059\u308b\u3002\n\n```c\n      /* ASSERT(name[char_index] == '=') */\n      name[char_index] = '\\0';\n```\n\n\u8b0e\u306e\u5909\u6570`temp_var`\u3092\u521d\u671f\u5316\u3002\n\n```c\n      temp_var = (SHELL_VAR *)NULL;\n```\n\n`string`\u306e\u5148\u982d\u304b\u30894\u30d0\u30a4\u30c8\u3092\u30c1\u30a7\u30c3\u30af\u3057\u3066\u3001\u305d\u308c\u304c`() {`\u3060\u3063\u305f\u3089\u95a2\u6570\u5b9a\u7fa9\u306e\u958b\u59cb\u3068\u5224\u65ad\u3057\u3066\u95a2\u6570\u3092\u51e6\u7406\u3059\u308b\u3002\n\n```c\n      /* If exported function, define it now.  Don't import functions from\n\t the environment in privileged mode. */\n      if (privmode == 0 && read_but_dont_execute == 0 && STREQN (\"() {\", string, 4))\n\t{\n```\n\n\u5909\u6570`temp_string`\u306b\"`name` + ` ` + `string`\"\u3092\u683c\u7d0d\u3002\n\n```c\n\t  string_length = strlen (string);\n\t  temp_string = (char *)xmalloc (3 + string_length + char_index);\n\n\t  strcpy (temp_string, name);\n\t  temp_string[char_index] = ' ';\n\t  strcpy (temp_string + char_index + 1, string);\n```\n\n`name`\u304c`legal_identifier`\u306a\u3089\u3001`parse_and_execute`\u3067`temp_string`\u3092\u30d1\u30fc\u30b9\u3057\u3066\u5b9f\u884c\u3002\n\n```c\n\t  if (posixly_correct == 0 || legal_identifier (name))\n\t    parse_and_execute (temp_string, name, SEVAL_NONINT|SEVAL_NOHIST);\n```\n\n\u3053\u3053\u306b\u30d1\u30c3\u30c1\u304c\u5f53\u3066\u3089\u308c\u3066\u3001\u6b21\u306e\u3088\u3046\u306b\u5909\u66f4\u3055\u308c\u305f\u3002\n\n```c\n \t  /* Don't import function names that are invalid identifiers from the\n \t     environment, though we still allow them to be defined as shell\n \t     variables. */\n \t  if (legal_identifier (name))\n \t    parse_and_execute (temp_string, name, SEVAL_NONINT|SEVAL_NOHIST|SEVAL_FUNCDEF|SEVAL_ONECMD);\n```  \n\n`SEVAL_FUNCDEF`\u3068`SEVAL_ONECMD`\u3068\u3044\u3046\u3082\u306e\u304c\u5897\u3048\u3066\u3044\u308b\u3002\u6050\u3089\u304f`temp_string`\u306b\"`\u95a2\u6570\u540d` + ` ` + `() { ... }`\"\u3068\u3044\u3046\u6587\u5b57\u5217\u304c\u305d\u306e\u307e\u307e`parse_and_execute`\u95a2\u6570\u306b\u6e21\u3055\u308c\u3066\u5b9f\u884c\u3055\u308c\u3066\u3044\u308b\u306e\u304c\u4e0d\u5473\u3044\u611f\u3058\u3060\u3063\u305f\u3088\u3046\u3060\u3002\n\n## common.h\n\n`SEVAL_FUNCDEF`\u3068`SEVAL_ONECMD`\u3092\u8ffd\u52a0\u3057\u305f\u3089\u3057\u3044\u3002\n\n```diff\n*** ../bash-4.3-patched/builtins/common.h\t2013-07-08 16:54:47.000000000 -0400\n--- builtins/common.h\t2014-09-12 14:25:47.000000000 -0400\n***************\n*** 34,37 ****\n--- 49,54 ----\n  #define SEVAL_PARSEONLY\t0x020\n  #define SEVAL_NOLONGJMP 0x040\n+ #define SEVAL_FUNCDEF\t0x080\t\t/* only allow function definitions */\n+ #define SEVAL_ONECMD\t0x100\t\t/* only allow a single command */\n  \n  /* Flags for describe_command, shared between type.def and command.def */\n```\n\n## builtins/evalstring.c\n\n`parse_and_execute`\u95a2\u6570\u3092\u6539\u9020\u3057\u3066\u3001\u95a2\u6570\u5b9a\u7fa9\u3068\u304b\u3057\u304b\u3067\u304d\u306a\u3044\u3088\u3046\u306b\u3059\u308b\u30d5\u30e9\u30b0\u304c\u6307\u5b9a\u3055\u308c\u305f\u6642\u306e\u51e6\u7406\u304c\u8ffd\u52a0\u3055\u308c\u3066\u3044\u308b\u3002\n189\u884c\u76ee\u304f\u3089\u3044\u306b`parse_and_execute`\u95a2\u6570\u306e\u5b9a\u7fa9\u304c\u3042\u308a\u3001\u3053\u308c\u3067\u5f15\u6570\u306e\u610f\u5473\u304c\u306a\u3093\u3068\u306a\u304f\u5206\u304b\u308b\u3002\n\n```c\n/* Parse and execute the commands in STRING.  Returns whatever\n   execute_command () returns.  This frees STRING.  FLAGS is a\n   flags word; look in common.h for the possible values.  Actions\n   are:\n   \t(flags & SEVAL_NONINT) -> interactive = 0;\n   \t(flags & SEVAL_INTERACT) -> interactive = 1;\n   \t(flags & SEVAL_NOHIST) -> call bash_history_disable ()\n   \t(flags & SEVAL_NOFREE) -> don't free STRING when finished\n   \t(flags & SEVAL_RESETLINE) -> reset line_number to 1\n*/\n\nint\nparse_and_execute (string, from_file, flags)\n     char *string;\n     const char *from_file;\n     int flags;\n{\n```\n\n\u3069\u3046\u3084\u3089\u7b2c\u4e00\u5f15\u6570\u3092\u5b9f\u884c\u3057\u3066\u3001\u7b2c\u4e09\u5f15\u6570\u306f\u30d5\u30e9\u30b0\u3067\u3069\u3053\u307e\u3067\u306e\u51e6\u7406\u304c\u3067\u304d\u308b\u306e\u304b\u3092\u6307\u5b9a\u3057\u3066\u3044\u308b\u307f\u305f\u3044\u3002\n\n\u30d1\u30c3\u30c1\u3067\u306f\u3053\u3053\u306b\u3082\u4fee\u6b63\u304c\u5165\u3063\u3066\u3044\u308b\u3002\n\n```diff\n*** ../bash-4.3-patched/builtins/evalstring.c\t2014-02-11 09:42:10.000000000 -0500\n--- builtins/evalstring.c\t2014-09-14 14:15:13.000000000 -0400\n***************\n*** 309,312 ****\n--- 313,324 ----\n  \t      struct fd_bitmap *bitmap;\n  \n+ \t      if ((flags & SEVAL_FUNCDEF) && command->type != cm_function_def)\n+ \t\t{\n+ \t\t  internal_warning (\"%s: ignoring function definition attempt\", from_file);\n+ \t\t  should_jump_to_top_level = 0;\n+ \t\t  last_result = last_command_exit_value = EX_BADUSAGE;\n+ \t\t  break;\n+ \t\t}\n+ \n  \t      bitmap = new_fd_bitmap (FD_BITMAP_SIZE);\n  \t      begin_unwind_frame (\"pe_dispose\");\n***************\n```\n\n\u3053\u3053\u3067\u306f\u6050\u3089\u304f\u3001\u30d5\u30e9\u30b0\u3067\u95a2\u6570\u306e\u5b9a\u7fa9\u304c\u671f\u5f85\u3055\u308c\u3066\u3044\u308b\u306b\u3082\u95a2\u308f\u3089\u305a\u3001`command->type`\uff08\u3053\u308c\u306f\u30b3\u30de\u30f3\u30c9\u3092\u30d1\u30fc\u30b9\u3057\u305f\u7d50\u679c\u304b\uff1f\uff09\u304c\u95a2\u6570\u3067\u306f\u306a\u304b\u3063\u305f\u3089\u8b66\u544a\u3092\u51fa\u3059\u3068\u3044\u3046\u611f\u3058\u304b\u3002\n\n```diff\n*** 369,372 ****\n--- 381,387 ----\n  \t      dispose_fd_bitmap (bitmap);\n  \t      discard_unwind_frame (\"pe_dispose\");\n+ \n+ \t      if (flags & SEVAL_ONECMD)\n+ \t\tbreak;\n  \t    }\n  \t}\n```\n\n`SEVAL_ONECMD`\u304c\u30d5\u30e9\u30b0\u3067\u6307\u5b9a\u3055\u308c\u3066\u3044\u305f\u3089\u3001\u4e00\u5ea6\u5b9f\u884c\u3057\u305f\u3089`break`\u3067\u305d\u308c\u4ee5\u4e0a\u51e6\u7406\u3057\u306a\u304f\u3059\u308b\u3068\u304b\u3060\u308d\u3046\u3002\n\n# \u8b0e\n\n## subst.c\n\n```diff\n*** ../bash-4.3-patched/subst.c\t2014-08-11 11:16:35.000000000 -0400\n--- subst.c\t2014-09-12 15:31:04.000000000 -0400\n***************\n*** 8048,8052 ****\n  \t  goto return0;\n  \t}\n!       else if (var = find_variable_last_nameref (temp1))\n  \t{\n  \t  temp = nameref_cell (var);\n--- 8118,8124 ----\n  \t  goto return0;\n  \t}\n!       else if (var && (invisible_p (var) || var_isset (var) == 0))\n! \ttemp = (char *)NULL;\n!       else if ((var = find_variable_last_nameref (temp1)) && var_isset (var) && invisible_p (var) == 0)\n  \t{\n  \t  temp = nameref_cell (var);\n```\n\n\u3088\u304f\u308f\u304b\u308a\u307e\u305b\u3093\u3067\u3057\u305f\u3002\n\n## Ancient backwards compatibility \u306e\u6d88\u6ec5\n\n\u30d1\u30c3\u30c1\u3067 _variables.c_ \u306e364\u884c\u76ee\u306e\u3053\u306e\u8fba\u304c\u524a\u9664\u3055\u308c\u3066\u3044\u308b\u3002\n\n```c\n\t  /* Ancient backwards compatibility.  Old versions of bash exported\n\t     functions like name()=() {...} */\n\t  if (name[char_index - 1] == ')' && name[char_index - 2] == '(')\n\t    name[char_index - 2] = '\\0';\n\n....\n\n\t  /* ( */\n\t  if (name[char_index - 1] == ')' && name[char_index - 2] == '\\0')\n\t    name[char_index - 2] = '(';\t\t/* ) */\n```\n\n\u3053\u308c\u304c\u3042\u308b\u3068\u4f55\u304c\u4e0d\u5473\u3044\u306e\u304b\u3002\n\n# \u3053\u306e\u30d1\u30c3\u30c1\u3060\u3051\u3067\u306f\u307e\u305a\u3044\u3089\u3057\u3044\n\n<blockquote class=\"twitter-tweet\" lang=\"ja\"><p>The bash patch seems incomplete to me, function parsing is still brittle. e.g. $ env X=&#39;() { (a)=&gt;\\&#39; sh -c &quot;echo date&quot;; cat echo</p>&mdash; Tavis Ormandy (@taviso) <a href=\"https://twitter.com/taviso/status/514887394294652929\">2014, 9\u6708 24</a></blockquote>\n<script async src=\"//platform.twitter.com/widgets.js\" charset=\"utf-8\"></script>\n\n\u307e\u3042\u3001\u306a\u3093\u304b\u30d1\u30fc\u30ba\u306b\u306f\u4ed6\u306b\u3082\u554f\u984c\u304c\u3042\u308b\u307f\u305f\u3044\u3002\n"}