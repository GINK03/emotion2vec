{"context": " More than 1 year has passed since last update.Web\u30b5\u30fc\u30d3\u30b9\u3092\u4f5c\u308b\u4f8b\u3002\n\u3044\u308d\u3093\u306a\u4eba\u304c\u6563\u3005\u3084\u3063\u3066\u3044\u308b\u3068\u3053\u308d\u3067\u306f\u3042\u308b\u304c\u3001\u3068\u308a\u3042\u3048\u305a\u7df4\u7fd2\u3067\u4f5c\u3063\u3066\u304a\u3051\u3070\u3044\u3056\u3068\u3044\u3046\u3068\u304d\u306b\u5f79\u306b\u7acb\u3064\u3068\u3044\u3046\u3001\u7d20\u632f\u308a\u7df4\u7fd2\u7684\u306a\u610f\u5473\u3067\u3002\n\u5168\u4f53\u306f\u3053\u3061\u3089: https://github.com/t2ru/webexample\n\n\u30b5\u30fc\u30d0\u5074\n\n\u4f7f\u7528\u30e9\u30a4\u30d6\u30e9\u30ea\n\nImmutant (JBoss)\nLiberator\nCompojure\norg.clojure/\n\n\ndata.json\njava.jdbc\n\n\n\n\n\u8a2d\u8a08\u30dd\u30ea\u30b7\n\nImmutant\u3067JBoss\u306e\u30a4\u30f3\u30d5\u30e9\u3092\u306a\u308b\u3079\u304f\u6d3b\u7528\u3059\u308b\u3002\n\n\nWeb\u30b5\u30fc\u30d0\n\u30c8\u30e9\u30f3\u30b6\u30af\u30b7\u30e7\u30f3\u5236\u5fa1\n\n\nDB\u30a2\u30af\u30bb\u30b9\u306fclojure.java.jdbc\u3092\u76f4\u3067\u4f7f\u3046\u3002\n\n\n\u5f8c\u3067\u30c1\u30e5\u30fc\u30cb\u30f3\u30b0\u3057\u3084\u3059\u3044\u3088\u3046\u306b\u3001SQL\u306e\u62bd\u8c61\u5316\u306f\u4f7f\u308f\u306a\u3044\u3002\nXA\u30c8\u30e9\u30f3\u30b6\u30af\u30b7\u30e7\u30f3\u3067\u56f2\u3046\u3002(\u305f\u3060\u3057\u3001XA\u306e\u4fe1\u3058\u3059\u304e\u826f\u304f\u306a\u3044\u3002)\n\u30b5\u30f3\u30d7\u30eb\u306eDB\u306fH2\uff08\u30d5\u30a1\u30a4\u30ebDB\uff09\u3092\u4f7f\u3046\u3002\u5546\u7528\u3067JBoss\u306e\u30b3\u30f3\u30c6\u30ca\u306b\u8f09\u305b\u308b\u3068\u304d\u306b\u3001datasource\u306b\u5909\u3048\u3066\u30b3\u30cd\u30af\u30b7\u30e7\u30f3\u30d7\u30fc\u30eb\u3092\u4f7f\u3048\u3070\u826f\u3044\u3002\n\n\nWeb\u30b5\u30fc\u30d3\u30b9\u306fLiberator\u3092\u4f7f\u3063\u3066REST\u6e96\u62e0\u306b\u3059\u308b\u3002\n\n\nURL\u30d1\u30b9\u3067\u306e\u30eb\u30fc\u30c6\u30a3\u30f3\u30b0\u306b\u306fCompojure\u3092\u4f7f\u3046\u3002\n\n\nCompojure\u306e\u30cf\u30f3\u30c9\u30e9\u5185\u306b\u5168\u90e8\u66f8\u3044\u3066\u3057\u307e\u3046\u3002\n\n\nAPI\u5185\u3067\u4f7f\u3063\u3066\u3044\u308bSQL\u3092\u5168\u90e8\u628a\u63e1\u3067\u304d\u308b\u305f\u3081\u3001\u975e\u52b9\u7387\u306aSQL\u767a\u884c\u306f\u4e00\u76ee\u77ad\u7136\u3002\n\u8a8d\u53ef\u60c5\u5831\u3084SQL\u306a\u3069\u3092\u5168\u3066\u4e00\u89a7\u3067\u304d\u308b\u3088\u3046\u306b\u3059\u308b\u3053\u3068\u3067\u3001\u76ee\u8996\u306e\u30bb\u30ad\u30e5\u30ea\u30c6\u30a3\u30c1\u30a7\u30c3\u30af\u3092\u3084\u308a\u3084\u3059\u304f\u306a\u308b\u3002\n\n\nSQL\u30a4\u30f3\u30b8\u30a7\u30af\u30b7\u30e7\u30f3\u3084XSS\u306e\u653b\u6483\u3092\u3055\u308c\u306a\u3044\u8a2d\u8a08\n\n\n\u30b3\u30fc\u30c9\u4f8b\n\nsrc/webexample/core.clj\n(defroutes task-service\n  ;; \u30b3\u30f3\u30c6\u30ca\u7cfb\u30ea\u30bd\u30fc\u30b9\n  (GET \"/task\" {:keys [db]}\n    (resource\n      :allowed-methods [:get]\n      :available-media-types [\"application/json\"]\n      :handle-ok (list-tasks db)))\n\n  (POST \"/task\" {:keys [db body]}\n    (let [data (try (as-json body :key-fn keyword :eof-error? false)\n                    (catch Exception e nil))\n          new-id (or (:newid (first (next-task-id db))) 0)]\n      (resource\n        :allowed-methods [:post]\n        :available-media-types [\"application/json\"]\n        :malformed? (nil? (:title data))\n        :handle-malformed (pr-str data)\n        :post! (fn [_] (new-task! db new-id (:title data)))\n        :handle-created {:id new-id})))\n\n  ;; \u30a8\u30ec\u30e1\u30f3\u30c8\u7cfb\u30ea\u30bd\u30fc\u30b9\n  (GET \"/task/:id\" [id :as {:keys [db]}]\n    (resource\n      :allowed-methods [:get]\n      :available-media-types [\"application/json\"]\n      :handle-ok (fn [_] (first (get-task db)))))\n\n  (PUT \"/task/:id\" [id :as {:keys [db body]}]\n    (let [data (try (as-json body :key-fn keyword :eof-error? false)\n                    (catch Exception e nil))]\n      (resource\n        :allowed-methods [:put]\n        :available-media-types [\"application/json\"]\n        :malformed? (nil? (:title data))\n        :put! (fn [_] (update-task! db (:title data) id))\n        :new? false)))\n\n  (DELETE \"/task/:id\" [id :as {:keys [db]}]\n    (resource\n      :allowed-methods [:delete]\n      :available-media-types [\"application/json\"]\n      :delete! (fn [_] (delete-task! db id)))))\n\n\nSQL\u306fyesql\u3092\u4f7f\u3063\u3066\u5916\u51fa\u3057\u3002\n\nresource/data/task.sql\n-- name: create-task-table!\nCREATE TABLE IF NOT EXISTS task (\n    id INTEGER PRIMARY KEY,\n    title VARCHAR(255))\n\n-- name: list-tasks\nSELECT id, title FROM task ORDER BY id DESC\n\n-- name: next-task-id\nSELECT MAX(id)+1 AS newid FROM task\n\n-- name: new-task!\nINSERT INTO task (id, title) VALUES (:id, :title)\n\n-- name: get-task\nSELECT id, title FROM task WHERE id = :id\n\n-- name: update-task!\nUPDATE task SET title = :title WHERE id = :id\n\n-- name: delete-task!\nDELETE FROM task WHERE id = :id\n\n\n\n\u8a2d\u8a08\u306e\u3053\u3053\u308d\n\u91cd\u8981\u306a\u3082\u306e\u3092\u660e\u793a\u3057\u3001\u4e00\u89a7\u3067\u304d\u308b\u3088\u3046\u306b\u3059\u308b\u3053\u3068\u3002\u305d\u3046\u3059\u308b\u3053\u3068\u3067\u3001\u6027\u80fd\u554f\u984c\u3084\u30bb\u30ad\u30e5\u30ea\u30c6\u30a3\u554f\u984c\u306e\u767a\u751f\u3092\u9632\u3050\u3002\u30c6\u30b9\u30c8\u3084\u30bb\u30ad\u30e5\u30ea\u30c6\u30a3\u30c1\u30a7\u30c3\u30af\u30c4\u30fc\u30eb\u306b\u983c\u3089\u305a1\u3001\u4f5c\u308b\u6642\u306b\u30d0\u30b0\u3092\u6392\u9664\u3067\u304d\u308b\u3088\u3046\u306b\u3059\u308b\u3002 (Correctness by Construction)\n\n\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u5074\n\n\u4f7f\u7528\u30e9\u30a4\u30d6\u30e9\u30ea\n\nReagent (react.js)\ncljs-ajax\n\n\n\u8a2d\u8a08\u30dd\u30ea\u30b7\n\nDOM\u751f\u6210\u90e8\u5206\u3068\u30cf\u30f3\u30c9\u30e9\u90e8\u5206\u306b\u5206\u3051\u3066\u6574\u7406\u3059\u308b\u3002\n\n\nreact.js (Clojure\u304b\u3089\u306fReagent) \u3092\u4f7f\u3048\u3070\u3001\u7d30\u304b\u3044\u30cf\u30f3\u30c9\u30e9\u90e8\u5206\u3092\u304b\u306a\u308a\u7701\u7565\u3067\u304d\u308b\u3002\n\n\nWeb\u30c7\u30b6\u30a4\u30ca\u3068\u306e\u5206\u696d\u3092\u8996\u91ce\u306b\u5165\u308c\u3001JavaScript\u306eDOM\u751f\u6210\u3067\u5168\u90e8\u4f5c\u3063\u3066\u3057\u307e\u3046\u306e\u306f\u907f\u3051\u308b\u3002(\u30b5\u30f3\u30d7\u30eb\u3067\u306f\u3084\u3063\u3066\u306a\u3044)\n\u30ec\u30f3\u30c0\u30ea\u30f3\u30b0\u3092\u306a\u308b\u3079\u304f\u4e00\u5ea6\u3067\u6e08\u307e\u305b\u308b\u3088\u3046\u306b\u3057\u3066\u3001\u6027\u80fd\u52a3\u5316\u3092\u9632\u3050\u3002\n\n\nReagent\u306b\u306a\u308b\u3079\u304f\u4efb\u305b\u3066\u81ea\u5206\u3067\u3084\u3089\u306a\u3044\u307b\u3046\u304c\u3044\u3044\u6c17\u304c\u3059\u308b\u3002\n\n\nJQuery UI\u307f\u305f\u3044\u306aUI\u8981\u7d20\u3054\u3068\u306e\u90e8\u54c1\u5316(\u3053\u308c\u3082\u3084\u3063\u3066\u306a\u3044)\n\n\n\u30b3\u30fc\u30c9\u4f8b\na\u306f\u3001\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u72b6\u614b\u3092\u4fdd\u5b58\u3059\u308batom\u3002\n\u30b5\u30fc\u30d0\u3078\u306eCRUD\u3068\u30d6\u30e9\u30a6\u30b6\u5185\u90e8\u306e\u72b6\u614b\u66f4\u65b0\u3092\u884c\u3046\u3002\n\n\u30cf\u30f3\u30c9\u30e9\u90e8(src-cljs/webexample/core.cljs)\n(defn list-tasks [a]\n  (GET \"task\"\n       {:handler #(reset! a %)\n        :error-handler #(js/alert %)}))\n\n(defn add-task [a]\n  (let [elem (dom/get-element \"newtask\")\n        title (.-value elem)\n        f (fn [v response] (cons {\"id\" (get response \"id\") \"title\" title} v))]\n    (when-not (= title \"\")\n      (set! (.-value elem) \"\")\n      (POST \"task\"\n            {:params {:title title}\n             :format :json\n             :handler #(swap! a f %)\n             :error-handler #(js/alert %)})))\n  false)\n\n(defn update-task [a id]\n  (let [elem (dom/get-element \"newtitle\")\n        new-title (.-value elem)\n        f (fn [v] (map (fn [{xid \"id\" xtitle \"title\" :as t}]\n                         (if (= id xid) {\"id\" id \"title\" new-title} t)) v))]\n    (when-not (= new-title \"\")\n      (PUT (str \"task/\" id)\n           {:params {:title new-title}\n            :format :json\n            :handler #(swap! a f)\n            :error-handler #(js/alert %)})))\n  false)\n\n(defn delete-task [a id]\n  (let [f (fn [v] (filter #(not= id (get % \"id\")) v))]\n    (DELETE (str \"task/\" id)\n            {:format :json\n             :handler #(swap! a f)\n             :error-handler #(js/alert %)})))\n\n\n\nDOM\u751f\u6210\u90e8(src-cljs/webexample/core.cljs)\n(defn task-app []\n  (let [task-list (atom nil)\n        editing (atom nil)]\n    (list-tasks task-list)\n    (fn []\n      [:div\n       [:input {:type :submit :value \"Sync\"\n                :on-click (fn []\n                             (reset! editing nil)\n                             (list-tasks task-list))}]\n       [:form {:on-submit #(add-task task-list)}\n        [:input#newtask {:type :text}]\n        [:input {:type :submit}]]\n       (->> (for [task @task-list\n                  :let [{id \"id\" title \"title\"} task]]\n              [:li {:on-click #(reset! editing id)}\n               id \" \"\n               (if (= id @editing)\n                 [:input#newtitle\n                  {:type :text :defaultValue title\n                   :on-blur\n                   (fn []\n                     (reset! editing nil)\n                     (update-task task-list id))}]\n                 [:span title \" \"\n                  [:span {:on-click #(delete-task task-list id)} \"[x]\"]])])\n            (cons :ul)\n            vec)])))\n\n(defn main-app []\n  [:div\n   [:h1 \"list tasks\"]\n   [(task-app)]])\n\n(defn ^:export run []\n  (reagent/render-component [main-app] (.-body js/document)))\n\n\n\n\u307e\u3060\u3084\u3063\u3066\u306a\u3044\u3053\u3068\n\n\u8a8d\u8a3c\n\u5165\u529b\u306e\u30d0\u30ea\u30c7\u30fc\u30b7\u30e7\u30f3\n\u4e00\u89a7\u306e\u30da\u30fc\u30b8\u30f3\u30b0\n\u56fd\u969b\u5316\n\u898b\u305f\u76ee\u306e\u30c7\u30b6\u30a4\u30f3\n\u30cd\u30c3\u30c8\u63a5\u7d9a\u304c\u4e0d\u5b89\u5b9a\u306a\u74b0\u5883\u3078\u306e\u5bfe\u5fdc\ncore.async\u304c\u4f7f\u3048\u308b\u304b\u3082\u3057\u308c\u306a\u3044\u3002\u4e3b\u306b\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u5074\u3067\u3002\netc...\n\n\u6c17\u304c\u5411\u3044\u305f\u3089\u66f4\u65b0\u3059\u308b\u304b\u3082\u3002\n\n\n\n\n\u30c6\u30b9\u30c8\u3044\u3089\u306a\u3044\u3068\u3044\u3046\u3053\u3068\u3067\u306f\u306a\u304f\u3001\u30d0\u30b0\u767a\u898b\u3092\u30c6\u30b9\u30c8\u306b\u983c\u308b\u3079\u304d\u3067\u306a\u3044\u3068\u3044\u3046\u610f\u5473\u3002\u00a0\u21a9\n\n\n\nWeb\u30b5\u30fc\u30d3\u30b9\u3092\u4f5c\u308b\u4f8b\u3002\n\n\u3044\u308d\u3093\u306a\u4eba\u304c\u6563\u3005\u3084\u3063\u3066\u3044\u308b\u3068\u3053\u308d\u3067\u306f\u3042\u308b\u304c\u3001\u3068\u308a\u3042\u3048\u305a\u7df4\u7fd2\u3067\u4f5c\u3063\u3066\u304a\u3051\u3070\u3044\u3056\u3068\u3044\u3046\u3068\u304d\u306b\u5f79\u306b\u7acb\u3064\u3068\u3044\u3046\u3001\u7d20\u632f\u308a\u7df4\u7fd2\u7684\u306a\u610f\u5473\u3067\u3002\n\n\u5168\u4f53\u306f\u3053\u3061\u3089: https://github.com/t2ru/webexample\n\n# \u30b5\u30fc\u30d0\u5074\n\n## \u4f7f\u7528\u30e9\u30a4\u30d6\u30e9\u30ea\n\n* Immutant (JBoss)\n* Liberator\n* Compojure\n* org.clojure/\n  - data.json\n  - java.jdbc\n\n## \u8a2d\u8a08\u30dd\u30ea\u30b7\n\n* Immutant\u3067JBoss\u306e\u30a4\u30f3\u30d5\u30e9\u3092\u306a\u308b\u3079\u304f\u6d3b\u7528\u3059\u308b\u3002\n  - Web\u30b5\u30fc\u30d0\n  - \u30c8\u30e9\u30f3\u30b6\u30af\u30b7\u30e7\u30f3\u5236\u5fa1\n* DB\u30a2\u30af\u30bb\u30b9\u306fclojure.java.jdbc\u3092\u76f4\u3067\u4f7f\u3046\u3002\n  - \u5f8c\u3067\u30c1\u30e5\u30fc\u30cb\u30f3\u30b0\u3057\u3084\u3059\u3044\u3088\u3046\u306b\u3001SQL\u306e\u62bd\u8c61\u5316\u306f\u4f7f\u308f\u306a\u3044\u3002\n  - XA\u30c8\u30e9\u30f3\u30b6\u30af\u30b7\u30e7\u30f3\u3067\u56f2\u3046\u3002(\u305f\u3060\u3057\u3001XA\u306e\u4fe1\u3058\u3059\u304e\u826f\u304f\u306a\u3044\u3002)\n  - \u30b5\u30f3\u30d7\u30eb\u306eDB\u306fH2\uff08\u30d5\u30a1\u30a4\u30ebDB\uff09\u3092\u4f7f\u3046\u3002\u5546\u7528\u3067JBoss\u306e\u30b3\u30f3\u30c6\u30ca\u306b\u8f09\u305b\u308b\u3068\u304d\u306b\u3001datasource\u306b\u5909\u3048\u3066\u30b3\u30cd\u30af\u30b7\u30e7\u30f3\u30d7\u30fc\u30eb\u3092\u4f7f\u3048\u3070\u826f\u3044\u3002\n* Web\u30b5\u30fc\u30d3\u30b9\u306fLiberator\u3092\u4f7f\u3063\u3066REST\u6e96\u62e0\u306b\u3059\u308b\u3002\n  - URL\u30d1\u30b9\u3067\u306e\u30eb\u30fc\u30c6\u30a3\u30f3\u30b0\u306b\u306fCompojure\u3092\u4f7f\u3046\u3002\n* Compojure\u306e\u30cf\u30f3\u30c9\u30e9\u5185\u306b\u5168\u90e8\u66f8\u3044\u3066\u3057\u307e\u3046\u3002\n  - API\u5185\u3067\u4f7f\u3063\u3066\u3044\u308bSQL\u3092\u5168\u90e8\u628a\u63e1\u3067\u304d\u308b\u305f\u3081\u3001\u975e\u52b9\u7387\u306aSQL\u767a\u884c\u306f\u4e00\u76ee\u77ad\u7136\u3002\n  - \u8a8d\u53ef\u60c5\u5831\u3084SQL\u306a\u3069\u3092\u5168\u3066\u4e00\u89a7\u3067\u304d\u308b\u3088\u3046\u306b\u3059\u308b\u3053\u3068\u3067\u3001\u76ee\u8996\u306e\u30bb\u30ad\u30e5\u30ea\u30c6\u30a3\u30c1\u30a7\u30c3\u30af\u3092\u3084\u308a\u3084\u3059\u304f\u306a\u308b\u3002\n* SQL\u30a4\u30f3\u30b8\u30a7\u30af\u30b7\u30e7\u30f3\u3084XSS\u306e\u653b\u6483\u3092\u3055\u308c\u306a\u3044\u8a2d\u8a08\n\n\n## \u30b3\u30fc\u30c9\u4f8b\n\n```clojure:src/webexample/core.clj\n(defroutes task-service\n  ;; \u30b3\u30f3\u30c6\u30ca\u7cfb\u30ea\u30bd\u30fc\u30b9\n  (GET \"/task\" {:keys [db]}\n    (resource\n      :allowed-methods [:get]\n      :available-media-types [\"application/json\"]\n      :handle-ok (list-tasks db)))\n\n  (POST \"/task\" {:keys [db body]}\n    (let [data (try (as-json body :key-fn keyword :eof-error? false)\n                    (catch Exception e nil))\n          new-id (or (:newid (first (next-task-id db))) 0)]\n      (resource\n        :allowed-methods [:post]\n        :available-media-types [\"application/json\"]\n        :malformed? (nil? (:title data))\n        :handle-malformed (pr-str data)\n        :post! (fn [_] (new-task! db new-id (:title data)))\n        :handle-created {:id new-id})))\n\n  ;; \u30a8\u30ec\u30e1\u30f3\u30c8\u7cfb\u30ea\u30bd\u30fc\u30b9\n  (GET \"/task/:id\" [id :as {:keys [db]}]\n    (resource\n      :allowed-methods [:get]\n      :available-media-types [\"application/json\"]\n      :handle-ok (fn [_] (first (get-task db)))))\n\n  (PUT \"/task/:id\" [id :as {:keys [db body]}]\n    (let [data (try (as-json body :key-fn keyword :eof-error? false)\n                    (catch Exception e nil))]\n      (resource\n        :allowed-methods [:put]\n        :available-media-types [\"application/json\"]\n        :malformed? (nil? (:title data))\n        :put! (fn [_] (update-task! db (:title data) id))\n        :new? false)))\n\n  (DELETE \"/task/:id\" [id :as {:keys [db]}]\n    (resource\n      :allowed-methods [:delete]\n      :available-media-types [\"application/json\"]\n      :delete! (fn [_] (delete-task! db id)))))\n```\n\nSQL\u306fyesql\u3092\u4f7f\u3063\u3066\u5916\u51fa\u3057\u3002\n\n```sql:resource/data/task.sql\n-- name: create-task-table!\nCREATE TABLE IF NOT EXISTS task (\n\tid INTEGER PRIMARY KEY,\n\ttitle VARCHAR(255))\n\n-- name: list-tasks\nSELECT id, title FROM task ORDER BY id DESC\n\n-- name: next-task-id\nSELECT MAX(id)+1 AS newid FROM task\n\n-- name: new-task!\nINSERT INTO task (id, title) VALUES (:id, :title)\n\n-- name: get-task\nSELECT id, title FROM task WHERE id = :id\n\n-- name: update-task!\nUPDATE task SET title = :title WHERE id = :id\n\n-- name: delete-task!\nDELETE FROM task WHERE id = :id\n```\n\n## \u8a2d\u8a08\u306e\u3053\u3053\u308d\n\n\u91cd\u8981\u306a\u3082\u306e\u3092\u660e\u793a\u3057\u3001\u4e00\u89a7\u3067\u304d\u308b\u3088\u3046\u306b\u3059\u308b\u3053\u3068\u3002\u305d\u3046\u3059\u308b\u3053\u3068\u3067\u3001\u6027\u80fd\u554f\u984c\u3084\u30bb\u30ad\u30e5\u30ea\u30c6\u30a3\u554f\u984c\u306e\u767a\u751f\u3092\u9632\u3050\u3002\u30c6\u30b9\u30c8\u3084\u30bb\u30ad\u30e5\u30ea\u30c6\u30a3\u30c1\u30a7\u30c3\u30af\u30c4\u30fc\u30eb\u306b\u983c\u3089\u305a[^1]\u3001\u4f5c\u308b\u6642\u306b\u30d0\u30b0\u3092\u6392\u9664\u3067\u304d\u308b\u3088\u3046\u306b\u3059\u308b\u3002 (Correctness by Construction)\n\n[^1]: \u30c6\u30b9\u30c8\u3044\u3089\u306a\u3044\u3068\u3044\u3046\u3053\u3068\u3067\u306f\u306a\u304f\u3001\u30d0\u30b0\u767a\u898b\u3092\u30c6\u30b9\u30c8\u306b\u983c\u308b\u3079\u304d\u3067\u306a\u3044\u3068\u3044\u3046\u610f\u5473\u3002\n\n# \u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u5074\n\n## \u4f7f\u7528\u30e9\u30a4\u30d6\u30e9\u30ea\n\n* Reagent (react.js)\n* cljs-ajax\n\n## \u8a2d\u8a08\u30dd\u30ea\u30b7\n\n* DOM\u751f\u6210\u90e8\u5206\u3068\u30cf\u30f3\u30c9\u30e9\u90e8\u5206\u306b\u5206\u3051\u3066\u6574\u7406\u3059\u308b\u3002\n  - react.js (Clojure\u304b\u3089\u306fReagent) \u3092\u4f7f\u3048\u3070\u3001\u7d30\u304b\u3044\u30cf\u30f3\u30c9\u30e9\u90e8\u5206\u3092\u304b\u306a\u308a\u7701\u7565\u3067\u304d\u308b\u3002\n* Web\u30c7\u30b6\u30a4\u30ca\u3068\u306e\u5206\u696d\u3092\u8996\u91ce\u306b\u5165\u308c\u3001JavaScript\u306eDOM\u751f\u6210\u3067\u5168\u90e8\u4f5c\u3063\u3066\u3057\u307e\u3046\u306e\u306f\u907f\u3051\u308b\u3002(\u30b5\u30f3\u30d7\u30eb\u3067\u306f\u3084\u3063\u3066\u306a\u3044)\n* \u30ec\u30f3\u30c0\u30ea\u30f3\u30b0\u3092\u306a\u308b\u3079\u304f\u4e00\u5ea6\u3067\u6e08\u307e\u305b\u308b\u3088\u3046\u306b\u3057\u3066\u3001\u6027\u80fd\u52a3\u5316\u3092\u9632\u3050\u3002\n  - Reagent\u306b\u306a\u308b\u3079\u304f\u4efb\u305b\u3066\u81ea\u5206\u3067\u3084\u3089\u306a\u3044\u307b\u3046\u304c\u3044\u3044\u6c17\u304c\u3059\u308b\u3002\n* JQuery UI\u307f\u305f\u3044\u306aUI\u8981\u7d20\u3054\u3068\u306e\u90e8\u54c1\u5316(\u3053\u308c\u3082\u3084\u3063\u3066\u306a\u3044)\n\n\n## \u30b3\u30fc\u30c9\u4f8b\n\na\u306f\u3001\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u72b6\u614b\u3092\u4fdd\u5b58\u3059\u308batom\u3002\n\n\u30b5\u30fc\u30d0\u3078\u306eCRUD\u3068\u30d6\u30e9\u30a6\u30b6\u5185\u90e8\u306e\u72b6\u614b\u66f4\u65b0\u3092\u884c\u3046\u3002\n\n```clojure:\u30cf\u30f3\u30c9\u30e9\u90e8(src-cljs/webexample/core.cljs)\n(defn list-tasks [a]\n  (GET \"task\"\n       {:handler #(reset! a %)\n        :error-handler #(js/alert %)}))\n\n(defn add-task [a]\n  (let [elem (dom/get-element \"newtask\")\n        title (.-value elem)\n        f (fn [v response] (cons {\"id\" (get response \"id\") \"title\" title} v))]\n    (when-not (= title \"\")\n      (set! (.-value elem) \"\")\n      (POST \"task\"\n            {:params {:title title}\n             :format :json\n             :handler #(swap! a f %)\n             :error-handler #(js/alert %)})))\n  false)\n\n(defn update-task [a id]\n  (let [elem (dom/get-element \"newtitle\")\n        new-title (.-value elem)\n        f (fn [v] (map (fn [{xid \"id\" xtitle \"title\" :as t}]\n                         (if (= id xid) {\"id\" id \"title\" new-title} t)) v))]\n    (when-not (= new-title \"\")\n      (PUT (str \"task/\" id)\n           {:params {:title new-title}\n            :format :json\n            :handler #(swap! a f)\n            :error-handler #(js/alert %)})))\n  false)\n\n(defn delete-task [a id]\n  (let [f (fn [v] (filter #(not= id (get % \"id\")) v))]\n    (DELETE (str \"task/\" id)\n            {:format :json\n             :handler #(swap! a f)\n             :error-handler #(js/alert %)})))\n```\n\n```clojure:DOM\u751f\u6210\u90e8(src-cljs/webexample/core.cljs)\n(defn task-app []\n  (let [task-list (atom nil)\n        editing (atom nil)]\n    (list-tasks task-list)\n    (fn []\n      [:div\n       [:input {:type :submit :value \"Sync\"\n                :on-click (fn []\n                             (reset! editing nil)\n                             (list-tasks task-list))}]\n       [:form {:on-submit #(add-task task-list)}\n        [:input#newtask {:type :text}]\n        [:input {:type :submit}]]\n       (->> (for [task @task-list\n                  :let [{id \"id\" title \"title\"} task]]\n              [:li {:on-click #(reset! editing id)}\n               id \" \"\n               (if (= id @editing)\n                 [:input#newtitle\n                  {:type :text :defaultValue title\n                   :on-blur\n                   (fn []\n                     (reset! editing nil)\n                     (update-task task-list id))}]\n                 [:span title \" \"\n                  [:span {:on-click #(delete-task task-list id)} \"[x]\"]])])\n            (cons :ul)\n            vec)])))\n\n(defn main-app []\n  [:div\n   [:h1 \"list tasks\"]\n   [(task-app)]])\n\n(defn ^:export run []\n  (reagent/render-component [main-app] (.-body js/document)))\n```\n\n\n# \u307e\u3060\u3084\u3063\u3066\u306a\u3044\u3053\u3068\n\n* \u8a8d\u8a3c\n* \u5165\u529b\u306e\u30d0\u30ea\u30c7\u30fc\u30b7\u30e7\u30f3\n* \u4e00\u89a7\u306e\u30da\u30fc\u30b8\u30f3\u30b0\n* \u56fd\u969b\u5316\n* \u898b\u305f\u76ee\u306e\u30c7\u30b6\u30a4\u30f3\n* \u30cd\u30c3\u30c8\u63a5\u7d9a\u304c\u4e0d\u5b89\u5b9a\u306a\u74b0\u5883\u3078\u306e\u5bfe\u5fdc\n* core.async\u304c\u4f7f\u3048\u308b\u304b\u3082\u3057\u308c\u306a\u3044\u3002\u4e3b\u306b\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u5074\u3067\u3002\n* etc...\n\n\u6c17\u304c\u5411\u3044\u305f\u3089\u66f4\u65b0\u3059\u308b\u304b\u3082\u3002\n", "tags": ["Clojure", "jboss", "ClojureScript", "reactjs", "Liberator"]}