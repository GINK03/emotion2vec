{"context": " More than 1 year has passed since last update.\n\n\u89e3\u6c7a\u3059\u3079\u304d\u554f\u984c\n\nIntelliJ/PHPStorm\u3067\u306fcake\u306etest suite\u3092IDE\u304b\u3089\u76f4\u63a5\u8d77\u52d5\u3067\u304d\u306a\u3044\u3002\n\u3044\u3061\u3061\u30b3\u30f3\u30bd\u30fc\u30eb\u304b\u3089TestShell\u3092\u8d77\u52d5\u3057\u306a\u304f\u3066\u306f\u3044\u3051\u306a\u3044\u3002\n\n\nIDE\u30dc\u30bf\u30f3\u4e00\u767a\u3067\u8d77\u52d5\u3057\u306a\u3044\n\n\n\u30b3\u30fc\u30c9\u30ab\u30d0\u30ec\u30c3\u30b8\u304cIDE\u4e0a\u3067\u7c21\u5358\u306b\u8868\u793a\u3067\u304d\u306a\u3044\u3002\n\n\n\u30b3\u30f3\u30bd\u30fc\u30eb\u3067\u30ab\u30d0\u30ec\u30c3\u30b8\u3092\u51fa\u3057\u3066\u7d50\u679c\u3092\u8a60\u8fbc\u3080\u3053\u3068\u306f\u53ef\u80fd\u3060\u304c\u624b\u9806\u304c\u591a\u3044\u3002\n\n\n\n\n\u8abf\u67fb\n\u3050\u3050\u3063\u3066\u307f\u305f\u304c\n\nphpunit\u304b\u3089\u76f4\u63a5CakePHP\u306e\u30c6\u30b9\u30c8\u306f\u8d77\u52d5\u3067\u304d\u306a\u3044\u3002\n\n\nbootstrap\u3092\u547c\u3070\u306a\u3044\u3068\u5fc5\u8981\u306a\u30e9\u30a4\u30d6\u30e9\u30ea\u304c\u547c\u3079\u306a\u3044\u3002\n\n\ncakephp\u7528\u306e\u30a2\u30c0\u30d6\u30bf\u304c\u904e\u53bb\u306b\u4f5c\u3089\u308c\u305f\u3088\u3046\u3060\u304c\u3001\u3082\u306f\u3084\u540c\u3058\u624b\u9806\u3067\u306f\u52d5\u304b\u306a\u3044\u3002\n\n\nCakePHP2.7\u3067\u3082\u52d5\u4f5c\u3059\u308b\u3088\u3046\u306b\u4f5c\u308a\u76f4\u3059\u5fc5\u8981\u304c\u3042\u308a\u3002\n\n\n\n\n\u30a2\u30d7\u30ed\u30fc\u30c1\nIDE\u304cPhpunit\u3092\u8d77\u52d5\u3059\u308b\u969b\u3001phpunit.php\u3068\u3044\u3046\u30b9\u30af\u30ea\u30d7\u30c8\u304b\u3089\u8d77\u52d5\u3055\u308c\u308b\u3002\nssh://vagrant@192.168.33.20:22/usr/bin/php -dxdebug.coverage_enable=1 /home/vagrant/.phpstorm_helpers/phpunit.php --coverage-clover /home/vagrant/.phpstorm_helpers/coverage/bushiroad_bushi_unit.coverage --no-configuration AllTests /var/www/html/app/Test/Case/AllTestsTest.php\n\n\n\n\u3053\u306e\u30b3\u30fc\u30c9\u3092\u8fc2\u56de\u3057\u3066Cake\u306e\u30c6\u30b9\u30c8\u30b7\u30a7\u30eb\u3092\u8d77\u52d5\u3059\u308c\u3070\u305d\u306e\u307e\u307e\u52d5\u304f\u306f\u305a\u3002\nIDE\u306b\u6b63\u3057\u304f\u30c6\u30b9\u30c8\u306e\u9032\u6357\u3084\u7d50\u679c\u3092\u8fd4\u3059\u306b\u306flisner\u3068printer\u3092\u767b\u9332\u3059\u308b\u5fc5\u8981\u304c\u3042\u308b\u3002\n\n\n\u30b3\u30fc\u30c9\n\n<?php\nset_time_limit(0);\nini_set('display_errors', 1);\n/**\n * Use the DS to separate the directories in other defines\n */\nif (!defined('DS')) {\n    define('DS', DIRECTORY_SEPARATOR);\n}\n\n/**\n * These defines should only be edited if you have cake installed in\n * a directory layout other than the way it is distributed.\n * When using custom settings be sure to use the DS and do not add a trailing DS.\n */\n\n/**\n * The full path to the directory which holds \"app\", WITHOUT a trailing DS.\n *\n */\nif (!defined('ROOT')) {\n    define('ROOT', dirname(dirname(__FILE__)));\n}\n\n/**\n * The actual directory name for the \"app\".\n *\n */\nif (!defined('APP_DIR')) {\n    define('APP_DIR', basename(dirname($_SERVER['SCRIPT_FILENAME'])));\n}\n\n/**\n * Editing below this line should not be necessary.\n * Change at your own risk.\n *\n */\nif (!defined('WEBROOT_DIR')) {\n    define('WEBROOT_DIR', basename(dirname(__FILE__)));\n}\nif (!defined('WWW_ROOT')) {\n    define('WWW_ROOT', dirname(__FILE__) . DS);\n}\n/**\n * The absolute path to the \"Cake\" directory, WITHOUT a trailing DS.\n *\n * For ease of development CakePHP uses PHP's include_path. If you\n * need to cannot modify your include_path, you can set this path.\n *\n * Leaving this constant undefined will result in it being defined in Cake/bootstrap.php\n *\n * The following line differs from its sibling\n * /lib/Cake/Console/Templates/skel/webroot/test.php\n */\ndefine('CAKE_CORE_INCLUDE_PATH', WWW_ROOT . DS . 'Vendor' . DS . 'cakephp' . DS . 'cakephp' . DS . 'lib');\n\n\nif (!defined('CAKE_CORE_INCLUDE_PATH')) {\n    if (function_exists('ini_set')) {\n        ini_set('include_path', WWW_ROOT . 'lib' . PATH_SEPARATOR . ini_get('include_path'));\n    }\n    if (!include ('Cake' . DS . 'bootstrap.php')) {\n        $failed = true;\n    }\n} else {\n    if (!include (CAKE_CORE_INCLUDE_PATH . DS . 'Cake' . DS . 'bootstrap.php')) {\n        $failed = true;\n    }\n}\nif (!empty($failed)) {\n    trigger_error(\"CakePHP core could not be found. Check the value of CAKE_CORE_INCLUDE_PATH in APP/webroot/index.php. It should point to the directory containing your \" . DS . \"cake core directory and your \" . DS . \"vendors root directory.\", E_USER_ERROR);\n}\n\nif (Configure::read('debug') < 1) {\n    throw new NotFoundException(__d('cake_dev', 'Debug setting does not allow access to this url.'));\n}\nConfigure::write('Error', array());\nConfigure::write('Exception', array());\n\nrequire_once CAKE . 'TestSuite' . DS . 'CakeTestSuiteDispatcher.php';\n\n$helper = $_SERVER['argv'][1];\nunset($_SERVER['argv'][1]);\n\n$helper_code = file_get_contents($helper);\n$helper_code = preg_replace('/^<\\?php(.*)(\\?>)?$/s', '$1', $helper_code);\n$helper_code = str_replace('IDE_PHPUnit_TextUI_Command::main();', '', $helper_code);\n\n$ret = eval($helper_code);\n\n\nclass CakeIDE_PHPUnit_TextUI_ResultPrinterReporter extends IDE_PHPUnit_TextUI_ResultPrinter {\n}\n\nclass MyCakeTestSuiteCommand extends CakeTestSuiteCommand\n{\n    protected function handleArguments(array $argv)\n    {\n        parent::handleArguments($argv);\n        $this->arguments['printer'] = new IDE_PHPUnit_TextUI_ResultPrinter(null);\n        $this->arguments['listeners'][] = new IDE_PHPUnit_Framework_TestListener($this->arguments['printer']);\n    }\n}\n\nclass MyCakeTestSuiteDispatcher extends CakeTestSuiteDispatcher {\n    public static function main() {\n        $dispatcher = new MyCakeTestSuiteDispatcher();\n        $dispatcher->dispatch();\n    }\n    /**\n     * Runs the actions required by the URL parameters.\n     *\n     * @return void\n     */\n    public function dispatch() {\n        $this->_checkPHPUnit();\n        $this->_parseParams();\n\n        if ($this->params['case']) {\n            $value = $this->_myrunTestCase();\n        } else {\n            $value = $this->_testCaseList();\n        }\n\n        $output = ob_get_clean();\n        echo $output;\n        return $value;\n    }\n    /**\n     * Runs a test case file.\n     *\n     * @return void\n     */\n    protected function _myrunTestCase() {\n        $this->params['output'] = \"IDE_PHPUnit_TextUI_ResultPrinter\";\n        $commandArgs = array(\n            'case' => $this->params['case'],\n            'core' => $this->params['core'],\n            'app' => $this->params['app'],\n            'plugin' => $this->params['plugin'],\n            'codeCoverage' => $this->params['codeCoverage'],\n            'showPasses' => !empty($this->params['show_passes']),\n            'baseUrl' => $this->_baseUrl,\n            'baseDir' => $this->_baseDir,\n        );\n\n        $options = array(\n            '--filter', $this->params['filter'],\n            '--output', $this->params['output'],\n            '--fixture', $this->params['fixture']\n        );\n        restore_error_handler();\n\n        try {\n            static::time();\n            $command = new MyCakeTestSuiteCommand('CakeTestLoader', $commandArgs);\n            $command->run($options);\n        } catch (MissingConnectionException $exception) {\n            ob_end_clean();\n            $baseDir = $this->_baseDir;\n            include CAKE . 'TestSuite' . DS . 'templates' . DS . 'missing_connection.php';\n            exit();\n        }\n    }\n\n}\n\nApp::uses(\"TestShell\",\"Console/Command\");\n\n/**\n * Class MyTestShell\n */\nclass MyTestShell extends TestShell\n{\n    /**\n     * Main entry point to this shell\n     *\n     * @return void\n     */\n    public function main() {\n        $args = $this->_parseArgs();\n\n        if (empty($args['case'])) {\n            return $this->available();\n        }\n\n        $options = $this->_runnerOptions();\n        restore_error_handler();\n        restore_error_handler();\n\n        $testCli = new MyCakeTestSuiteCommand('CakeTestLoader', $args);\n        $testCli->run($options);\n    }\n}\n\n$shell = new MyTestShell();\n$shell->initialize();\narray_shift($_SERVER['argv']);\n$_SERVER['argc'] = count($_SERVER['argv']);\n$shell->runCommand(\"app\",$_SERVER['argv']);\n\n\n\u30bd\u30fc\u30b9\u306f\u3053\u3061\u3089\u3002\nhttps://github.com/kazuhiko-hotta/IntelliJCakePHPUnitTestAdaptor\n\n\u8a2d\u5b9a\nAllTest\u3092\u5b9f\u884c\u3059\u308b\u5834\u5408\u306f\u3053\u3093\u306a\u611f\u3058\u306b\u8a2d\u5b9a\n\u7279\u5b9a\u306e\u30e1\u30bd\u30c3\u30c9\u3060\u3051\u30c6\u30b9\u30c8\u3057\u305f\u3044\u5834\u5408\u306fMethod\u3067\u8a2d\u5b9a\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n\n\n\n\u7d50\u679c\nIntelliJ\u304b\u3089\u30dc\u30bf\u30f3\u4e00\u767a\u3067\u3001\u5b9f\u884c\u30fb\u30c7\u30d0\u30c3\u30b0\u30fb\u30c6\u30b9\u30c8\u30fb\u30ab\u30d0\u30ec\u30c3\u30b8\u306e\u30ec\u30dd\u30fc\u30c8\u304c\u53d6\u5f97\u51fa\u6765\u308b\u3088\u3046\u306b\u306a\u3063\u305f\u3002\n\n\nRemote\u306ePHPUnit\u5b9f\u884c\n\n\n\u30d7\u30e9\u30b0\u30a4\u30f3\uff1aPHP Remote Interpreter \u3092\u5165\u308c\u308b\nLanguages & Framework->PHP->Interpreter\u304b\u3089\"...\"\u3092\u30af\u30ea\u30c3\u30af\n\"+\"\u3092\u304a\u3057\u3066Remote\u3068\u3044\u3046\u9805\u76ee\u3092\u9078\u629e\u3057IP\u30a2\u30c9\u30ec\u30b9\u3084SSH\u306e\u30ad\u30fc\u306a\u3069\u3092\u5165\u529b\nProject\u306edebug\u8a2d\u5b9a\u3067Use alternative configuration file\u306e\u53f3\u7aef\u306e\u30ec\u30f3\u30c1\u30de\u30fc\u30af\u3092\u30af\u30ea\u30c3\u30af\n\u5148\u307b\u3069\u306eRemote PHP\u304c\u9078\u629e\u3067\u304d\u308b\u306e\u3067\u9078\u629e\u3057\u3066\u304f\u3060\u3055\u3044\n\n\u5b9f\u884c\u306e\u624b\u9806\u306f\u5148\u306b\u8aac\u660e\u3057\u305f\u306e\u3068\u540c\u69d8\u3067\u3059\u3002\n# \u89e3\u6c7a\u3059\u3079\u304d\u554f\u984c\n\n* IntelliJ/PHPStorm\u3067\u306fcake\u306etest suite\u3092IDE\u304b\u3089\u76f4\u63a5\u8d77\u52d5\u3067\u304d\u306a\u3044\u3002\n* \u3044\u3061\u3061\u30b3\u30f3\u30bd\u30fc\u30eb\u304b\u3089TestShell\u3092\u8d77\u52d5\u3057\u306a\u304f\u3066\u306f\u3044\u3051\u306a\u3044\u3002\n    * IDE\u30dc\u30bf\u30f3\u4e00\u767a\u3067\u8d77\u52d5\u3057\u306a\u3044\n* \u30b3\u30fc\u30c9\u30ab\u30d0\u30ec\u30c3\u30b8\u304cIDE\u4e0a\u3067\u7c21\u5358\u306b\u8868\u793a\u3067\u304d\u306a\u3044\u3002\n    * \u30b3\u30f3\u30bd\u30fc\u30eb\u3067\u30ab\u30d0\u30ec\u30c3\u30b8\u3092\u51fa\u3057\u3066\u7d50\u679c\u3092\u8a60\u8fbc\u3080\u3053\u3068\u306f\u53ef\u80fd\u3060\u304c\u624b\u9806\u304c\u591a\u3044\u3002\n\n# \u8abf\u67fb\n\n\u3050\u3050\u3063\u3066\u307f\u305f\u304c\n\n* phpunit\u304b\u3089\u76f4\u63a5CakePHP\u306e\u30c6\u30b9\u30c8\u306f\u8d77\u52d5\u3067\u304d\u306a\u3044\u3002\n    * bootstrap\u3092\u547c\u3070\u306a\u3044\u3068\u5fc5\u8981\u306a\u30e9\u30a4\u30d6\u30e9\u30ea\u304c\u547c\u3079\u306a\u3044\u3002\n* cakephp\u7528\u306e\u30a2\u30c0\u30d6\u30bf\u304c\u904e\u53bb\u306b\u4f5c\u3089\u308c\u305f\u3088\u3046\u3060\u304c\u3001\u3082\u306f\u3084\u540c\u3058\u624b\u9806\u3067\u306f\u52d5\u304b\u306a\u3044\u3002\n    * CakePHP2.7\u3067\u3082\u52d5\u4f5c\u3059\u308b\u3088\u3046\u306b\u4f5c\u308a\u76f4\u3059\u5fc5\u8981\u304c\u3042\u308a\u3002\n\n# \u30a2\u30d7\u30ed\u30fc\u30c1\n\nIDE\u304cPhpunit\u3092\u8d77\u52d5\u3059\u308b\u969b\u3001phpunit.php\u3068\u3044\u3046\u30b9\u30af\u30ea\u30d7\u30c8\u304b\u3089\u8d77\u52d5\u3055\u308c\u308b\u3002\n\n```bash\nssh://vagrant@192.168.33.20:22/usr/bin/php -dxdebug.coverage_enable=1 /home/vagrant/.phpstorm_helpers/phpunit.php --coverage-clover /home/vagrant/.phpstorm_helpers/coverage/bushiroad_bushi_unit.coverage --no-configuration AllTests /var/www/html/app/Test/Case/AllTestsTest.php\n\n```\n\n* \u3053\u306e\u30b3\u30fc\u30c9\u3092\u8fc2\u56de\u3057\u3066Cake\u306e\u30c6\u30b9\u30c8\u30b7\u30a7\u30eb\u3092\u8d77\u52d5\u3059\u308c\u3070\u305d\u306e\u307e\u307e\u52d5\u304f\u306f\u305a\u3002\n* IDE\u306b\u6b63\u3057\u304f\u30c6\u30b9\u30c8\u306e\u9032\u6357\u3084\u7d50\u679c\u3092\u8fd4\u3059\u306b\u306flisner\u3068printer\u3092\u767b\u9332\u3059\u308b\u5fc5\u8981\u304c\u3042\u308b\u3002\n\n# \u30b3\u30fc\u30c9\n\n```php\n\n<?php\nset_time_limit(0);\nini_set('display_errors', 1);\n/**\n * Use the DS to separate the directories in other defines\n */\nif (!defined('DS')) {\n\tdefine('DS', DIRECTORY_SEPARATOR);\n}\n\n/**\n * These defines should only be edited if you have cake installed in\n * a directory layout other than the way it is distributed.\n * When using custom settings be sure to use the DS and do not add a trailing DS.\n */\n\n/**\n * The full path to the directory which holds \"app\", WITHOUT a trailing DS.\n *\n */\nif (!defined('ROOT')) {\n\tdefine('ROOT', dirname(dirname(__FILE__)));\n}\n\n/**\n * The actual directory name for the \"app\".\n *\n */\nif (!defined('APP_DIR')) {\n\tdefine('APP_DIR', basename(dirname($_SERVER['SCRIPT_FILENAME'])));\n}\n\n/**\n * Editing below this line should not be necessary.\n * Change at your own risk.\n *\n */\nif (!defined('WEBROOT_DIR')) {\n\tdefine('WEBROOT_DIR', basename(dirname(__FILE__)));\n}\nif (!defined('WWW_ROOT')) {\n\tdefine('WWW_ROOT', dirname(__FILE__) . DS);\n}\n/**\n * The absolute path to the \"Cake\" directory, WITHOUT a trailing DS.\n *\n * For ease of development CakePHP uses PHP's include_path. If you\n * need to cannot modify your include_path, you can set this path.\n *\n * Leaving this constant undefined will result in it being defined in Cake/bootstrap.php\n *\n * The following line differs from its sibling\n * /lib/Cake/Console/Templates/skel/webroot/test.php\n */\ndefine('CAKE_CORE_INCLUDE_PATH', WWW_ROOT . DS . 'Vendor' . DS . 'cakephp' . DS . 'cakephp' . DS . 'lib');\n\n\nif (!defined('CAKE_CORE_INCLUDE_PATH')) {\n\tif (function_exists('ini_set')) {\n\t\tini_set('include_path', WWW_ROOT . 'lib' . PATH_SEPARATOR . ini_get('include_path'));\n\t}\n\tif (!include ('Cake' . DS . 'bootstrap.php')) {\n\t\t$failed = true;\n\t}\n} else {\n\tif (!include (CAKE_CORE_INCLUDE_PATH . DS . 'Cake' . DS . 'bootstrap.php')) {\n\t\t$failed = true;\n\t}\n}\nif (!empty($failed)) {\n\ttrigger_error(\"CakePHP core could not be found. Check the value of CAKE_CORE_INCLUDE_PATH in APP/webroot/index.php. It should point to the directory containing your \" . DS . \"cake core directory and your \" . DS . \"vendors root directory.\", E_USER_ERROR);\n}\n\nif (Configure::read('debug') < 1) {\n\tthrow new NotFoundException(__d('cake_dev', 'Debug setting does not allow access to this url.'));\n}\nConfigure::write('Error', array());\nConfigure::write('Exception', array());\n\nrequire_once CAKE . 'TestSuite' . DS . 'CakeTestSuiteDispatcher.php';\n\n$helper = $_SERVER['argv'][1];\nunset($_SERVER['argv'][1]);\n\n$helper_code = file_get_contents($helper);\n$helper_code = preg_replace('/^<\\?php(.*)(\\?>)?$/s', '$1', $helper_code);\n$helper_code = str_replace('IDE_PHPUnit_TextUI_Command::main();', '', $helper_code);\n\n$ret = eval($helper_code);\n\n\nclass CakeIDE_PHPUnit_TextUI_ResultPrinterReporter extends IDE_PHPUnit_TextUI_ResultPrinter {\n}\n\nclass MyCakeTestSuiteCommand extends CakeTestSuiteCommand\n{\n\tprotected function handleArguments(array $argv)\n\t{\n\t\tparent::handleArguments($argv);\n\t\t$this->arguments['printer'] = new IDE_PHPUnit_TextUI_ResultPrinter(null);\n\t\t$this->arguments['listeners'][] = new IDE_PHPUnit_Framework_TestListener($this->arguments['printer']);\n\t}\n}\n\nclass MyCakeTestSuiteDispatcher extends CakeTestSuiteDispatcher {\n\tpublic static function main() {\n\t\t$dispatcher = new MyCakeTestSuiteDispatcher();\n\t\t$dispatcher->dispatch();\n\t}\n\t/**\n\t * Runs the actions required by the URL parameters.\n\t *\n\t * @return void\n\t */\n\tpublic function dispatch() {\n\t\t$this->_checkPHPUnit();\n\t\t$this->_parseParams();\n\n\t\tif ($this->params['case']) {\n\t\t\t$value = $this->_myrunTestCase();\n\t\t} else {\n\t\t\t$value = $this->_testCaseList();\n\t\t}\n\n\t\t$output = ob_get_clean();\n\t\techo $output;\n\t\treturn $value;\n\t}\n\t/**\n\t * Runs a test case file.\n\t *\n\t * @return void\n\t */\n\tprotected function _myrunTestCase() {\n\t\t$this->params['output'] = \"IDE_PHPUnit_TextUI_ResultPrinter\";\n\t\t$commandArgs = array(\n\t\t\t'case' => $this->params['case'],\n\t\t\t'core' => $this->params['core'],\n\t\t\t'app' => $this->params['app'],\n\t\t\t'plugin' => $this->params['plugin'],\n\t\t\t'codeCoverage' => $this->params['codeCoverage'],\n\t\t\t'showPasses' => !empty($this->params['show_passes']),\n\t\t\t'baseUrl' => $this->_baseUrl,\n\t\t\t'baseDir' => $this->_baseDir,\n\t\t);\n\n\t\t$options = array(\n\t\t\t'--filter', $this->params['filter'],\n\t\t\t'--output', $this->params['output'],\n\t\t\t'--fixture', $this->params['fixture']\n\t\t);\n\t\trestore_error_handler();\n\n\t\ttry {\n\t\t\tstatic::time();\n\t\t\t$command = new MyCakeTestSuiteCommand('CakeTestLoader', $commandArgs);\n\t\t\t$command->run($options);\n\t\t} catch (MissingConnectionException $exception) {\n\t\t\tob_end_clean();\n\t\t\t$baseDir = $this->_baseDir;\n\t\t\tinclude CAKE . 'TestSuite' . DS . 'templates' . DS . 'missing_connection.php';\n\t\t\texit();\n\t\t}\n\t}\n\n}\n\nApp::uses(\"TestShell\",\"Console/Command\");\n\n/**\n * Class MyTestShell\n */\nclass MyTestShell extends TestShell\n{\n\t/**\n\t * Main entry point to this shell\n\t *\n\t * @return void\n\t */\n\tpublic function main() {\n\t\t$args = $this->_parseArgs();\n\n\t\tif (empty($args['case'])) {\n\t\t\treturn $this->available();\n\t\t}\n\n\t\t$options = $this->_runnerOptions();\n\t\trestore_error_handler();\n\t\trestore_error_handler();\n\n\t\t$testCli = new MyCakeTestSuiteCommand('CakeTestLoader', $args);\n\t\t$testCli->run($options);\n\t}\n}\n\n$shell = new MyTestShell();\n$shell->initialize();\narray_shift($_SERVER['argv']);\n$_SERVER['argc'] = count($_SERVER['argv']);\n$shell->runCommand(\"app\",$_SERVER['argv']);\n\n```\n\n\u30bd\u30fc\u30b9\u306f\u3053\u3061\u3089\u3002\nhttps://github.com/kazuhiko-hotta/IntelliJCakePHPUnitTestAdaptor\n\n# \u8a2d\u5b9a\n\nAllTest\u3092\u5b9f\u884c\u3059\u308b\u5834\u5408\u306f\u3053\u3093\u306a\u611f\u3058\u306b\u8a2d\u5b9a\n\n\u7279\u5b9a\u306e\u30e1\u30bd\u30c3\u30c9\u3060\u3051\u30c6\u30b9\u30c8\u3057\u305f\u3044\u5834\u5408\u306fMethod\u3067\u8a2d\u5b9a\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n\n\n<img width=\"428\" alt=\"Run_Debug_Configurations_and_AppModel_php_-_bushiroad_-____github_bushiroad_.png\" src=\"https://qiita-image-store.s3.amazonaws.com/0/74521/bc0f353e-0042-ffd1-704f-d04fed74cb76.png\">\n\n<img width=\"341\" alt=\"Run_Debug_Configurations.png\" src=\"https://qiita-image-store.s3.amazonaws.com/0/74521/c11b256a-c2c1-2450-d7ea-c246146b76dd.png\">\n\n\n# \u7d50\u679c\n\nIntelliJ\u304b\u3089\u30dc\u30bf\u30f3\u4e00\u767a\u3067\u3001\u5b9f\u884c\u30fb\u30c7\u30d0\u30c3\u30b0\u30fb\u30c6\u30b9\u30c8\u30fb\u30ab\u30d0\u30ec\u30c3\u30b8\u306e\u30ec\u30dd\u30fc\u30c8\u304c\u53d6\u5f97\u51fa\u6765\u308b\u3088\u3046\u306b\u306a\u3063\u305f\u3002\n\n\n<img width=\"208\" alt=\"Command_php_-_bushiroad_-____github_bushiroad_.png\" src=\"https://qiita-image-store.s3.amazonaws.com/0/74521/f80e9297-97fc-2c03-82de-f177abf0cbb5.png\">\n\n* Remote\u306ePHPUnit\u5b9f\u884c\n\n1. \u30d7\u30e9\u30b0\u30a4\u30f3\uff1aPHP Remote Interpreter \u3092\u5165\u308c\u308b\n2. Languages & Framework->PHP->Interpreter\u304b\u3089\"...\"\u3092\u30af\u30ea\u30c3\u30af\n3. \"+\"\u3092\u304a\u3057\u3066Remote\u3068\u3044\u3046\u9805\u76ee\u3092\u9078\u629e\u3057IP\u30a2\u30c9\u30ec\u30b9\u3084SSH\u306e\u30ad\u30fc\u306a\u3069\u3092\u5165\u529b\n4. Project\u306edebug\u8a2d\u5b9a\u3067Use alternative configuration file\u306e\u53f3\u7aef\u306e\u30ec\u30f3\u30c1\u30de\u30fc\u30af\u3092\u30af\u30ea\u30c3\u30af\n5. \u5148\u307b\u3069\u306eRemote PHP\u304c\u9078\u629e\u3067\u304d\u308b\u306e\u3067\u9078\u629e\u3057\u3066\u304f\u3060\u3055\u3044\n\n\u5b9f\u884c\u306e\u624b\u9806\u306f\u5148\u306b\u8aac\u660e\u3057\u305f\u306e\u3068\u540c\u69d8\u3067\u3059\u3002\n", "tags": ["CakePHP", "IntelliJ", "PhpStorm", "PHPUnit", "coverage"]}