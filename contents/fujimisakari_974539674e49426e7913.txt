{"context": " More than 1 year has passed since last update.\n\n\u306f\u3058\u3081\u306b\nDjango\u3068AngularJS\u3067\u5229\u7528\u3057\u3066WebSocket\u901a\u4fe1\u3092\u5b9f\u88c5\u3057\u3066\u307f\u3088\u3046\u3068\u601d\u3044\u30d1\u30c3\u30b1\u30fc\u30b8\u3092\u63a2\u3057\u305f\u3068\u3053\u308d\u3001\nDjango\u3067WebSocket\u901a\u4fe1\u3059\u308b\u305f\u3081\u306e\u30c4\u30fc\u30eb\u304c\u3059\u3079\u3066\u63c3\u3063\u3066\u308bSwampDragon\u3068\u3044\u3046\u3082\u306e\u304c\u3042\u3063\u305f\u306e\u3067\n\u5b9a\u756a\u306eTodo\u7ba1\u7406\u30b5\u30a4\u30c8\u3092\u4f5c\u3063\u3066\u307f\u305f\u3002\nswampdragon: http://swampdragon.net/\ngithub: https://github.com/jonashagstedt/swampdragon \n\nSwampDragon\u306e\u7279\u5fb4\n\nWebSocket\u5c02\u7528\u30b5\u30fc\u30d0\u30fc\u304c\u3042\u308b\nDjango\u306eWSGI\u306fHTTP\u306a\u306e\u3067WebSocket\u901a\u4fe1\u3067\u304d\u306a\u3044\u306e\u3067\u5225\u30b5\u30fc\u30d0\u30fc\u3092\u7acb\u3066\u308b\u5fc5\u8981\u304c\u3042\u308b\u3002\nSwampDragon\u7d4c\u7531\u3067\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u4f5c\u6210\u6642\u306b\u306f\u3001server.py \u3068\u3044\u3046\u30d5\u30a1\u30a4\u30eb\u304c\u751f\u6210\u3055\u308c\n\u3053\u308c\u3067\u30b5\u30fc\u30d0\u30fc\u3092\u8d77\u52d5\u3059\u308b\u3002(/manage.py runsd.py\u3067\u3082\u3067\u304d\u308b)\n\u30b5\u30fc\u30d0\u30fc\u306fWeb\u30d5\u30ec\u30fc\u30e0\u30ef\u30fc\u30af\u306eTornado\u304c\u52d5\u4f5c\u3057\u3066\u304a\u308a\nserver.py\u306e\u5185\u90e8\u3067\u306f\u3001Connection\u3059\u308b\u305f\u3081\u306b\u5fc5\u8981\u306aURL\u751f\u6210\u3057\u3066\u8d77\u52d5\u3055\u305b\u3066\u3044\u308b\u3002\n\n\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u3068\u30b5\u30fc\u30d0\u30fc\u306e\u901a\u4fe1\u81ea\u4f53\u306fSockJS\u3092\u5229\u7528\u3057\u3066\u308b\nserver.py\u306eURL\u306bRouter\u30af\u30e9\u30b9\u304c\u30de\u30c3\u30d4\u30f3\u30b0\u3055\u308c\u3066\u3044\u3066\nRouter\u30af\u30e9\u30b9\u304c\u4fdd\u6301\u3057\u3066\u308bSockJS\u306econnection\u3092\u5229\u7528\u3057\u3066\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u3078Send\u3057\u3066\u3044\u308b\u3002\n\nmodel\u306e\u30de\u30c3\u30d1\u30fc\u6a5f\u80fd\u306e\u304c\u3042\u308b\nDjango\u306emodel\u3068redis\u3092\u30b7\u30ea\u30a2\u30ea\u30ba\u3055\u305b\u3066\u30de\u30c3\u30d4\u30f3\u30b0\u3057\u3066\u304f\u308c\u308b\u3002\nmodel\u306esave\u6642\u306bredis\u306ePub/Sub\u306e\u6a5f\u80fd\u3067\u30ea\u30a2\u30eb\u30bf\u30a4\u30e0\u306b\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u306b\u901a\u77e5\u3057\u3066\u304f\u308c\u308b\u3002\n\u203b\u300cpub/sub\u300d\n\u300cpublish\u300d\u3068\u300csubscribe\u300d\u306e\u7565\u3067\u65e5\u672c\u8a9e\u3067\u306f\u300c\u767a\u884c\u300d\u3068\u300c\u8cfc\u8aad\u300d\u306b\u306a\u308b\u3002\n\u7279\u5b9a\u306e\u30c1\u30e3\u30f3\u30cd\u30eb\u306b\u8ab0\u304b\u304c\u30a4\u30d9\u30f3\u30c8\u3092\u300c\u767a\u884c\u300d\u3059\u308b\u3068\u3001\n\u305d\u306e\u30c1\u30e3\u30f3\u30cd\u30eb\u3092\u300c\u8cfc\u8aad\u300d\u3057\u3066\u3044\u308b\u4eba\u3059\u3079\u3066\u306b\u305d\u306e\u30a4\u30d9\u30f3\u30c8\u304c\u901a\u77e5\u3055\u308c\u308b\u3002\n\n\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u304c\u5229\u7528\u3059\u308b\u30b5\u30fc\u30d3\u30b9\u3082\u7528\u610f\u3055\u308c\u3066\u308b\n\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u304c\u30b5\u30fc\u30d0\u30fc\u306bConnection\u3092\u306f\u3063\u3066\u3001\u30c7\u30fc\u30bf\u3092\u64cd\u4f5c\u3059\u308b\u30b5\u30fc\u30d3\u30b9(js)\u304c\n\u3059\u3079\u3066\u7528\u610f\u3055\u308c\u3066\u308b\u306e\u3067\u624b\u9593\u304c\u3042\u307e\u308a\u304b\u304b\u3089\u306a\u3044\u3002\n(\u30b5\u30fc\u30c9\u30d1\u30fc\u30c6\u30a3\u3067Objective-c\u3060\u3051\u3069iOS\u7528\u306e\u3082\u306e\u3082\u3042\u3063\u305f)\n\n\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u304b\u3089\u5b9f\u884c\u3067\u304d\u308b\u64cd\u4f5c\n\n\u30c7\u30fc\u30bf\u306e\u4e00\u89a7\u53d6\u5f97\n\u30c7\u30fc\u30bf\u306e\u4e00\u89a7\u53d6\u5f97(Pager\u4ed8\u304d)\n\u30c7\u30fc\u30bf\u306e\u5358\u4e00\u53d6\u5f97\n\u30c7\u30fc\u30bf\u306e\u65b0\u898f\u8ffd\u52a0\n\u30c7\u30fc\u30bf\u306e\u66f4\u65b0\n\u30c7\u30fc\u30bf\u306e\u524a\u9664\n\u30c7\u30fc\u30bf\u306e\u8cfc\u8aad\n\u30c7\u30fc\u30bf\u306e\u8cfc\u8aad\u89e3\u9664\n\n\n\u63a5\u7d9a\u30e6\u30fc\u30b6\u30fc\u306e\u30bb\u30c3\u30b7\u30e7\u30f3\u3082\u4fdd\u6301\u3067\u304d\u308b\n\u30ed\u30b0\u30a4\u30f3\u3057\u305f\u5f8c\u306e\u30e6\u30fc\u30b6\u30fc\u60c5\u5831\u3092\u30b5\u30fc\u30d0\u30fc\u30b5\u30a4\u30c9\u3067\u4fdd\u6301\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u308b\u306e\u3067\n\u30c7\u30fc\u30bf\u53d6\u5f97\u3001\u66f4\u65b0\u6642\u306a\u3069\u306e\u30af\u30a8\u30ea\u306b\u30e6\u30fc\u30b6\u30fcID\u306a\u3069\u3082\u542b\u3081\u308b\u3053\u3068\u304c\u53ef\u80fd\u3002\n\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u5074\u3067\u306f\u30e6\u30fc\u30b6\u30fc\u60c5\u5831\u3092\u6301\u3064\u5fc5\u8981\u306f\u306a\u304f\u306a\u308b\u3002\n\u30bb\u30c3\u30b7\u30e7\u30f3\u3092\u4fdd\u6301\u3059\u308b\u306b\u306f\u3001SwampDragon\u306e\u4f5c\u8005\u304c\u7528\u610f\u3057\u3066\u308b\nSwampDragon-auth\u3092\u30d1\u30c3\u30b1\u30fc\u30b8\u3092\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3059\u308b\u5fc5\u8981\u304c\u3042\u308b\u3002\n\nDjango\u306eSwampDragon\u3092\u5229\u7528\u3057\u3066Todo\u7ba1\u7406\u30b5\u30a4\u30c8\u4f5c\u6210\u3059\u308b\n\n\u5b9f\u884c\u74b0\u5883\n\nPython 2.7.11\nDjango 1.8.7\nSwampDragon 0.4.2.2\nSwampDragon-auth 0.1.3\n\n\n\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u69cb\u6210\n\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u69cb\u6210\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u306a\u3063\u3066\u308b\napp\u306fAngularJS\u4f7f\u3063\u3066\u3044\u3066JS\u30d5\u30a1\u30a4\u30eb\u304c\u8907\u6570\u3042\u3063\u305f\u3051\u3069\u5272\u611b\u3057\u3066\u308b\napplication\n\u251c\u2500\u2500 app\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 index.html\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 login.html\n\u251c\u2500\u2500 manage.py\n\u251c\u2500\u2500 module\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 middleware.py\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 todo\n\u2502\u00a0\u00a0     \u251c\u2500\u2500 models.py\n\u2502\u00a0\u00a0     \u251c\u2500\u2500 routers.py\n\u2502\u00a0\u00a0     \u2514\u2500\u2500 serializers.py\n\u251c\u2500\u2500 server.py\n\u251c\u2500\u2500 settings.py\n\u251c\u2500\u2500 urls.py\n\u2514\u2500\u2500 wsgi.py\n\n\nsettings.py\nmiddleware\u3068swampdragon\u7528\u306e\u8a2d\u5b9a\nINSTALLED_APPS = (\n    :\n    'swampdragon',\n    'module.todo',\n)\n\nMIDDLEWARE_CLASSES = (\n    :\n    'module.middleware.AuthenticationMiddleware',\n)\n\n# SwampDragon settings\nSWAMP_DRAGON_CONNECTION = ('swampdragon_auth.socketconnection.HttpDataConnection', '/data')\nDRAGON_URL = 'http://localhost:9999/'\n\n\nurls.py\nViews\u76f8\u5f53\u306e\u51e6\u7406\u306f\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u306eAngularJS\u3067\u884c\u3046\u306e\u3067index.html\u306e\u307f\u306eURL\u3092\u7528\u610f\n# -*- coding: utf-8 -*-\n\nfrom django.conf.urls import include, url\nfrom django.contrib import admin\nfrom django.views.generic import TemplateView\n\nurlpatterns = [\n    url(r'^$', TemplateView.as_view(template_name='index.html'), name='index'),\n    url(r'^login', 'django.contrib.auth.views.login', kwargs={'template_name': 'login.html'}, name='login'),\n    url(r'^logout', 'django.contrib.auth.views.logout_then_login', kwargs={'login_url': 'login'}, name='logout'),\n    url(r'^admin/', include(admin.site.urls)),\n]\n\n\nmiddleware.py\n\u30ed\u30b0\u30a4\u30f3\u3057\u3066\u3044\u306a\u3044\u30a2\u30af\u30bb\u30b9\u306f\u30ed\u30b0\u30a4\u30f3\u30da\u30fc\u30b8\u306b\u98db\u3070\u3059\u3088\u3046\u306b\u3059\u308b\n# -*- coding: utf-8 -*-\n\nfrom django.shortcuts import redirect\n\n\nclass AuthenticationMiddleware(object):\n\n    def process_request(self, request):\n        if request.user.is_authenticated():\n            if request.path.startswith('/login'):\n                return redirect('/')\n        elif request.path == '/':\n            return redirect('login')\n\n\nserializers.py\n\u30d5\u30ed\u30f3\u30c8\u30a8\u30f3\u30c9\u3068\u30c7\u30fc\u30bf\u306e\u3084\u308a\u3068\u308a\u3092\u5b9a\u7fa9\u3059\u308b\u30af\u30e9\u30b9\n- model: \u30e2\u30c7\u30eb\u3092\u300c\u30e2\u30b8\u30e5\u30fc\u30eb\u540d.\u30e2\u30c7\u30eb\u30af\u30e9\u30b9\u540d\u300d\u3067\u5b9a\u7fa9\n- publish_fields: \u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u3078\u901a\u77e5\u3059\u308b\u30ab\u30e9\u30e0\u306e\u5b9a\u7fa9\n- update_fields: \u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u304b\u3089\u66f4\u65b0\u53ef\u80fd\u306a\u30ab\u30e9\u30e0\u3092\u5b9a\u7fa9\nfrom swampdragon.serializers.model_serializer import ModelSerializer\n\n\nclass UserSerializer(ModelSerializer):\n\n    class Meta:\n        model = 'auth.User'\n        publish_fields = ('username',)\n\n\nclass TodoListSerializer(ModelSerializer):\n\n    class Meta:\n        model = 'todo.TodoList'\n        publish_fields = ('name', 'description')\n        update_fields = ('name', 'description')\n\n\nclass TodoItemSerializer(ModelSerializer):\n\n    class Meta:\n        model = 'todo.TodoItem'\n        publish_fields = ('todolist_id', 'done', 'name', 'updated_at')\n        update_fields = ('todolist_id', 'done', 'name')\n\n\nmodels.py\nSelfPublishModel\u3092\u7d99\u627f\u3055\u305b\u3066save\u6642\u306bPublish\u304c\u901a\u77e5\u3055\u308c\u308b\u3088\u3046\u306b\u3059\u308b\u3002\nserializer_class\u3067\u30b7\u30ea\u30a2\u30e9\u30a4\u30ba\u8a2d\u5b9a\u3057\u305f\u30af\u30e9\u30b9\u3092\u5b9a\u7fa9\u3059\u308b\u3002\n# -*- coding: utf-8 -*-\n\nfrom django.db import models\nfrom swampdragon.models import SelfPublishModel\nfrom .serializers import TodoListSerializer, TodoItemSerializer\n\n\nclass TodoList(SelfPublishModel, models.Model):\n    serializer_class = TodoListSerializer\n    user_id = models.IntegerField()\n    name = models.CharField(max_length=100)\n    description = models.TextField(u'\u8aac\u660e', blank=True, null=True)\n    created_at = models.DateTimeField(u'\u4f5c\u6210\u65e5\u6642', auto_now_add=True)\n    updated_at = models.DateTimeField(u'\u66f4\u65b0\u65e5\u6642', auto_now=True)\n\n    class Meta:\n        index_together = ['user_id', 'id']\n\n\nclass TodoItem(SelfPublishModel, models.Model):\n    serializer_class = TodoItemSerializer\n    user_id = models.IntegerField()\n    name = models.CharField(max_length=100)\n    todolist_id = models.IntegerField()\n    done = models.BooleanField(u'\u5b8c\u4e86\u30d5\u30e9\u30b0', default=False)\n    created_at = models.DateTimeField(u'\u4f5c\u6210\u65e5\u6642', auto_now_add=True)\n    updated_at = models.DateTimeField(u'\u66f4\u65b0\u65e5\u6642', auto_now=True)\n\n    class Meta:\n        index_together = ['user_id', 'id']\n\n\nrouters.py\nWebSocket\u5c02\u7528\u30b5\u30fc\u30d0\u30fc\u306b\u767b\u9332\u3059\u308bURL\u3001\u30de\u30c3\u30d4\u30f3\u30b0\u3057\u305f\u51e6\u7406\u3092\u5b9a\u7fa9\u3059\u308b\u30af\u30e9\u30b9\n- route_name: WebSocket\u5c02\u7528\u30b5\u30fc\u30d0\u30fc\u306b\u767b\u9332\u3055\u308c\u308bURL\u306ePath\u306b\u306a\u308b(http://localhost:9999/todo-list\u306a\u611f\u3058)\n- get_initial: \u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u304b\u3089\u30c7\u30fc\u30bf\u306e\u8ffd\u52a0\u3001\u66f4\u65b0\u3001\u524a\u9664\u3059\u308b\u3068\u304d\u306b\u8ffd\u52a0\u3067\u542b\u307e\u305b\u308b\u30d1\u30e9\u30e1\u30fc\u30bf\u30fc\u3092\u5b9a\u7fa9\n- get_subscription_contexts: \u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u304csubscription\u3057\u305f\u3068\u304d\u306e\u30c1\u30e3\u30cd\u30eb\u306b\u542b\u307e\u305b\u308b\u30d1\u30e9\u30e1\u30fc\u30bf\u30fc\u3092\u5b9a\u7fa9\n- get_object: \u30c7\u30fc\u30bf\u3092\u5358\u4f53\u3067\u8981\u6c42\u3055\u308c\u305f\u3068\u304d\u306e\u30af\u30a8\u30ea\u30fc\u51e6\u7406(\u5fc5\u9808)\n- get_query_set: \u30c7\u30fc\u30bf\u3092\u30ea\u30b9\u30c8\u3067\u8981\u6c42\u3055\u308c\u305f\u3068\u304d\u306e\u30af\u30a8\u30ea\u30fc\u51e6\u7406(\u5fc5\u9808)\n# -*- coding: utf-8 -*-\n\nfrom swampdragon import route_handler\nfrom swampdragon.route_handler import ModelRouter\nfrom module.todo.models import TodoList, TodoItem\nfrom module.todo.serializers import UserSerializer, TodoListSerializer, TodoItemSerializer\n\n\nclass UserRouter(ModelRouter):\n    route_name = 'user'\n    serializer_class = UserSerializer\n\n    def get_object(self, **kwargs):\n        return self.connection.user\n\n    def get_query_set(self, **kwargs):\n        pass\n\n\nclass TodoListRouter(ModelRouter):\n    route_name = 'todo-list'\n    serializer_class = TodoListSerializer\n    model = TodoList\n\n    def get_initial(self, verb, **kwargs):\n        kwargs['user_id'] = self.connection.user.id\n        return kwargs\n\n    def get_subscription_contexts(self, **kwargs):\n        # \u66f4\u65b0\u901a\u77e5\u304c\u30ed\u30b0\u30a4\u30f3\u30e6\u30fc\u30b6\u30fc\u306e\u307f\u306b\u9001\u3089\u308c\u308b\u3088\u3046\u30e6\u30fc\u30b6\u30fcID\u3092\u5165\u308c\u3066\u30e6\u30cb\u30fc\u30af\u306a\u30c1\u30e3\u30cd\u30eb\u3092\u4f5c\u308b(todolist|user_id:1\u306a\u30c1\u30e3\u30cd\u30eb\u306b\u306a\u308b)\n        kwargs['user_id'] = self.connection.user.id\n        return kwargs\n\n    def get_object(self, **kwargs):\n        user_list = self.model.objects.filter(id=kwargs['id'], user_id=self.connection.user.id)\n        return user_list[0] if user_list else None\n\n    def get_query_set(self, **kwargs):\n        user_id = self.connection.user.id\n        return self.model.objects.filter(user_id=user_id)\n\n\nclass TodoItemRouter(ModelRouter):\n    route_name = 'todo-item'\n    serializer_class = TodoItemSerializer\n    model = TodoItem\n\n    def get_initial(self, verb, **kwargs):\n        kwargs['user_id'] = self.connection.user.id\n        return kwargs\n\n    def get_subscription_contexts(self, **kwargs):\n        kwargs['user_id'] = self.connection.user.id\n        return kwargs\n\n    def get_object(self, **kwargs):\n        user_list = self.model.objects.filter(id=kwargs['id'], user_id=self.connection.user.id)\n        return user_list[0] if user_list else None\n\n    def get_query_set(self, **kwargs):\n        user_id = self.connection.user.id\n        return self.model.objects.filter(user_id=user_id)\n\n\nroute_handler.register(UserRouter)\nroute_handler.register(TodoListRouter)\nroute_handler.register(TodoItemRouter)\n\n\n\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\n\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u306fAngularJS\u5074\u3092\u5229\u7528\u3059\u308b\n$dragon\u304cSwampDragon\u304c\u7528\u610f\u3057\u3066\u308b\u30b5\u30fc\u30d3\u30b9\u3002\nangular.module('todoApp')\n  .controller('PageController', ['$scope', '$dragon', '$dataHandler',\n                                 function ($scope, $dragon, $dataHandler) {\n    $scope.todoListChannel = 'todoListClient';\n    $scope.todoItemChannel = 'todoItemClient';\n\n    // \u521d\u56de\u30da\u30fc\u30b8\u30a2\u30af\u30bb\u30b9\u6642\n    $dragon.onReady(function() {\n        // todolist, todoItem\u306e\u60c5\u5831\u3092\u8cfc\u8aad\u3059\u308b(\u5909\u66f4\u901a\u77e5\u3055\u308c\u308b\u3088\u3046\u306a\u308b)\n        $dragon.subscribe('todo-list', $scope.todoListChannel, {}).then(function(response) {\n            $scope.TodoListMapper = new DataMapper(response.data);\n        });\n\n        $dragon.subscribe('todo-item', $scope.todoItemChannel, {}).then(function(response) {\n            $scope.todoItemMapper = new DataMapper(response.data);\n        });\n\n        // todolist, todoItem, user\u306e\u30c7\u30fc\u30bf\u3092\u53d6\u5f97\n        $dragon.getSingle('user', {}).then(function(response) {\n            $dataHandler.user = response.data;\n        });\n\n        $dragon.getList('todo-list', {list_id: 1}).then(function(response) {\n            $dataHandler.todoLists = response.data;\n        });\n\n        $dragon.getList('todo-item', {list_id: 1}).then(function(response) {\n            $dataHandler.todoItems = response.data;\n        });\n    });\n\n    // todolist, todoItem\u3067save\u304c\u3042\u3063\u305f\u5834\u5408\u306e\u5909\u66f4\u901a\u77e5\n    $dragon.onChannelMessage(function(channels, message) {\n\n        if (indexOf.call(channels, $scope.todoListChannel) > -1) {\n            $scope.$apply(function() {\n                $scope.TodoListMapper.mapData($dataHandler.todoLists, message);\n            });\n        }\n\n        if (indexOf.call(channels, $scope.todoItemChannel) > -1) {\n            $scope.$apply(function() {\n                $scope.todoItemMapper.mapData($dataHandler.todoItems, message);\n            });\n        }\n    });\n\n}]);\n\n\n\n\u8d77\u52d5\npython ./manage.py runserver\npython server.py\n\n\n\u307e\u3068\u3081\n\u30b5\u30fc\u30d0\u30fc\u30b5\u30a4\u30c9\u306f\u3059\u3054\u304f\u7c21\u5358\u306b\u3067\u304d\u3001Django\u3092\u3055\u308f\u3063\u305f\u3053\u3068\u304c\u3042\u308b\u4eba\u306b\u306f\u99b4\u67d3\u307f\u3084\u3059\u3044\u3068\u601d\u3046\u3002\n\u305f\u3060\u3001\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u5074\u306f\u30ea\u30a2\u30eb\u30bf\u30a4\u30e0\u3067HTML\u3078\u753b\u9762\u66f4\u65b0\u3055\u305b\u308bJS\u306e\u30b3\u30fc\u30eb\u30d0\u30c3\u30af\u306a\u3069\u306e\u51e6\u7406\u304c\n\u304c\u3093\u3070\u3089\u306a\u3044\u3068\u3044\u3051\u306a\u3055\u305d\u3046\u306a\u96f0\u56f2\u6c17\u3002\nAngularJS\u3092\u5229\u7528\u3059\u308b\u3068HTML\u3068JS\u5909\u6570\u306e\u30c7\u30fc\u30bf\u30d0\u30a4\u30f3\u30c7\u30a3\u30f3\u30b0\u304c\u3067\u304d\u308b\u306e\u3067\u753b\u9762\u66f4\u65b0\u306e\u624b\u9593\u306f\u6539\u5584\u3067\u304d\u305d\u3046\u3002\n\u65e5\u672c\u3067\u306f\u3042\u307e\u308a\u5c0e\u5165\u5b9f\u7e3e\u306f\u306a\u3055\u305d\u3046\u3060\u3051\u3069\u3001github\u3092\u898b\u308b\u3068\n\u3061\u3089\u307b\u3089\u4f7f\u308f\u308c\u3066\u3044\u308b\u3088\u3046\u306a\u306e\u3067\u4eca\u5f8c\u306b\u671f\u5f85\u3057\u305f\u3044\u3002\n\u4eca\u56de\u4f5c\u6210\u3057\u305fTodo\u7ba1\u7406\u30b5\u30a4\u30c8\u306e\u30b3\u30fc\u30c9\u306fgithub\u306b\u7f6e\u3044\u3066\u307e\u3059.\nhttps://github.com/fujimisakari/todo-server\n# \u306f\u3058\u3081\u306b\nDjango\u3068AngularJS\u3067\u5229\u7528\u3057\u3066WebSocket\u901a\u4fe1\u3092\u5b9f\u88c5\u3057\u3066\u307f\u3088\u3046\u3068\u601d\u3044\u30d1\u30c3\u30b1\u30fc\u30b8\u3092\u63a2\u3057\u305f\u3068\u3053\u308d\u3001\nDjango\u3067WebSocket\u901a\u4fe1\u3059\u308b\u305f\u3081\u306e\u30c4\u30fc\u30eb\u304c\u3059\u3079\u3066\u63c3\u3063\u3066\u308bSwampDragon\u3068\u3044\u3046\u3082\u306e\u304c\u3042\u3063\u305f\u306e\u3067\n\u5b9a\u756a\u306eTodo\u7ba1\u7406\u30b5\u30a4\u30c8\u3092\u4f5c\u3063\u3066\u307f\u305f\u3002\n\nswampdragon: http://swampdragon.net/\ngithub: https://github.com/jonashagstedt/swampdragon \n\n# SwampDragon\u306e\u7279\u5fb4\n\n## WebSocket\u5c02\u7528\u30b5\u30fc\u30d0\u30fc\u304c\u3042\u308b\nDjango\u306eWSGI\u306fHTTP\u306a\u306e\u3067WebSocket\u901a\u4fe1\u3067\u304d\u306a\u3044\u306e\u3067\u5225\u30b5\u30fc\u30d0\u30fc\u3092\u7acb\u3066\u308b\u5fc5\u8981\u304c\u3042\u308b\u3002\nSwampDragon\u7d4c\u7531\u3067\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u4f5c\u6210\u6642\u306b\u306f\u3001server.py \u3068\u3044\u3046\u30d5\u30a1\u30a4\u30eb\u304c\u751f\u6210\u3055\u308c\n\u3053\u308c\u3067\u30b5\u30fc\u30d0\u30fc\u3092\u8d77\u52d5\u3059\u308b\u3002(/manage.py runsd.py\u3067\u3082\u3067\u304d\u308b)\n\u30b5\u30fc\u30d0\u30fc\u306fWeb\u30d5\u30ec\u30fc\u30e0\u30ef\u30fc\u30af\u306eTornado\u304c\u52d5\u4f5c\u3057\u3066\u304a\u308a\nserver.py\u306e\u5185\u90e8\u3067\u306f\u3001Connection\u3059\u308b\u305f\u3081\u306b\u5fc5\u8981\u306aURL\u751f\u6210\u3057\u3066\u8d77\u52d5\u3055\u305b\u3066\u3044\u308b\u3002\n\n## \u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u3068\u30b5\u30fc\u30d0\u30fc\u306e\u901a\u4fe1\u81ea\u4f53\u306fSockJS\u3092\u5229\u7528\u3057\u3066\u308b\nserver.py\u306eURL\u306bRouter\u30af\u30e9\u30b9\u304c\u30de\u30c3\u30d4\u30f3\u30b0\u3055\u308c\u3066\u3044\u3066\nRouter\u30af\u30e9\u30b9\u304c\u4fdd\u6301\u3057\u3066\u308bSockJS\u306econnection\u3092\u5229\u7528\u3057\u3066\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u3078Send\u3057\u3066\u3044\u308b\u3002\n\n## model\u306e\u30de\u30c3\u30d1\u30fc\u6a5f\u80fd\u306e\u304c\u3042\u308b\nDjango\u306emodel\u3068redis\u3092\u30b7\u30ea\u30a2\u30ea\u30ba\u3055\u305b\u3066\u30de\u30c3\u30d4\u30f3\u30b0\u3057\u3066\u304f\u308c\u308b\u3002\nmodel\u306esave\u6642\u306bredis\u306ePub/Sub\u306e\u6a5f\u80fd\u3067\u30ea\u30a2\u30eb\u30bf\u30a4\u30e0\u306b\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u306b\u901a\u77e5\u3057\u3066\u304f\u308c\u308b\u3002\n\n\u203b\u300cpub/sub\u300d\n\u300cpublish\u300d\u3068\u300csubscribe\u300d\u306e\u7565\u3067\u65e5\u672c\u8a9e\u3067\u306f\u300c\u767a\u884c\u300d\u3068\u300c\u8cfc\u8aad\u300d\u306b\u306a\u308b\u3002\n\u7279\u5b9a\u306e\u30c1\u30e3\u30f3\u30cd\u30eb\u306b\u8ab0\u304b\u304c\u30a4\u30d9\u30f3\u30c8\u3092\u300c\u767a\u884c\u300d\u3059\u308b\u3068\u3001\n\u305d\u306e\u30c1\u30e3\u30f3\u30cd\u30eb\u3092\u300c\u8cfc\u8aad\u300d\u3057\u3066\u3044\u308b\u4eba\u3059\u3079\u3066\u306b\u305d\u306e\u30a4\u30d9\u30f3\u30c8\u304c\u901a\u77e5\u3055\u308c\u308b\u3002\n\n## \u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u304c\u5229\u7528\u3059\u308b\u30b5\u30fc\u30d3\u30b9\u3082\u7528\u610f\u3055\u308c\u3066\u308b\n\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u304c\u30b5\u30fc\u30d0\u30fc\u306bConnection\u3092\u306f\u3063\u3066\u3001\u30c7\u30fc\u30bf\u3092\u64cd\u4f5c\u3059\u308b\u30b5\u30fc\u30d3\u30b9(js)\u304c\n\u3059\u3079\u3066\u7528\u610f\u3055\u308c\u3066\u308b\u306e\u3067\u624b\u9593\u304c\u3042\u307e\u308a\u304b\u304b\u3089\u306a\u3044\u3002\n(\u30b5\u30fc\u30c9\u30d1\u30fc\u30c6\u30a3\u3067Objective-c\u3060\u3051\u3069iOS\u7528\u306e\u3082\u306e\u3082\u3042\u3063\u305f)\n\n## \u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u304b\u3089\u5b9f\u884c\u3067\u304d\u308b\u64cd\u4f5c\n- \u30c7\u30fc\u30bf\u306e\u4e00\u89a7\u53d6\u5f97\n- \u30c7\u30fc\u30bf\u306e\u4e00\u89a7\u53d6\u5f97(Pager\u4ed8\u304d)\n- \u30c7\u30fc\u30bf\u306e\u5358\u4e00\u53d6\u5f97\n- \u30c7\u30fc\u30bf\u306e\u65b0\u898f\u8ffd\u52a0\n- \u30c7\u30fc\u30bf\u306e\u66f4\u65b0\n- \u30c7\u30fc\u30bf\u306e\u524a\u9664\n- \u30c7\u30fc\u30bf\u306e\u8cfc\u8aad\n- \u30c7\u30fc\u30bf\u306e\u8cfc\u8aad\u89e3\u9664\n\n## \u63a5\u7d9a\u30e6\u30fc\u30b6\u30fc\u306e\u30bb\u30c3\u30b7\u30e7\u30f3\u3082\u4fdd\u6301\u3067\u304d\u308b\n\u30ed\u30b0\u30a4\u30f3\u3057\u305f\u5f8c\u306e\u30e6\u30fc\u30b6\u30fc\u60c5\u5831\u3092\u30b5\u30fc\u30d0\u30fc\u30b5\u30a4\u30c9\u3067\u4fdd\u6301\u3067\u304d\u308b\u3088\u3046\u306b\u306a\u308b\u306e\u3067\n\u30c7\u30fc\u30bf\u53d6\u5f97\u3001\u66f4\u65b0\u6642\u306a\u3069\u306e\u30af\u30a8\u30ea\u306b\u30e6\u30fc\u30b6\u30fcID\u306a\u3069\u3082\u542b\u3081\u308b\u3053\u3068\u304c\u53ef\u80fd\u3002\n\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u5074\u3067\u306f\u30e6\u30fc\u30b6\u30fc\u60c5\u5831\u3092\u6301\u3064\u5fc5\u8981\u306f\u306a\u304f\u306a\u308b\u3002\n\u30bb\u30c3\u30b7\u30e7\u30f3\u3092\u4fdd\u6301\u3059\u308b\u306b\u306f\u3001SwampDragon\u306e\u4f5c\u8005\u304c\u7528\u610f\u3057\u3066\u308b\nSwampDragon-auth\u3092\u30d1\u30c3\u30b1\u30fc\u30b8\u3092\u30a4\u30f3\u30b9\u30c8\u30fc\u30eb\u3059\u308b\u5fc5\u8981\u304c\u3042\u308b\u3002\n\n\n# Django\u306eSwampDragon\u3092\u5229\u7528\u3057\u3066Todo\u7ba1\u7406\u30b5\u30a4\u30c8\u4f5c\u6210\u3059\u308b\n\n## \u5b9f\u884c\u74b0\u5883\n- Python 2.7.11\n- Django 1.8.7\n- SwampDragon 0.4.2.2\n- SwampDragon-auth 0.1.3\n\n## \u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u69cb\u6210\n\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u69cb\u6210\u306f\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u306a\u3063\u3066\u308b\napp\u306fAngularJS\u4f7f\u3063\u3066\u3044\u3066JS\u30d5\u30a1\u30a4\u30eb\u304c\u8907\u6570\u3042\u3063\u305f\u3051\u3069\u5272\u611b\u3057\u3066\u308b\n\n```bash\napplication\n\u251c\u2500\u2500 app\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 index.html\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 login.html\n\u251c\u2500\u2500 manage.py\n\u251c\u2500\u2500 module\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 middleware.py\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 todo\n\u2502\u00a0\u00a0     \u251c\u2500\u2500 models.py\n\u2502\u00a0\u00a0     \u251c\u2500\u2500 routers.py\n\u2502\u00a0\u00a0     \u2514\u2500\u2500 serializers.py\n\u251c\u2500\u2500 server.py\n\u251c\u2500\u2500 settings.py\n\u251c\u2500\u2500 urls.py\n\u2514\u2500\u2500 wsgi.py\n```\n\n## settings.py\nmiddleware\u3068swampdragon\u7528\u306e\u8a2d\u5b9a\n\n```py\nINSTALLED_APPS = (\n    :\n    'swampdragon',\n    'module.todo',\n)\n\nMIDDLEWARE_CLASSES = (\n    :\n    'module.middleware.AuthenticationMiddleware',\n)\n\n# SwampDragon settings\nSWAMP_DRAGON_CONNECTION = ('swampdragon_auth.socketconnection.HttpDataConnection', '/data')\nDRAGON_URL = 'http://localhost:9999/'\n```\n\n## urls.py\nViews\u76f8\u5f53\u306e\u51e6\u7406\u306f\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u306eAngularJS\u3067\u884c\u3046\u306e\u3067index.html\u306e\u307f\u306eURL\u3092\u7528\u610f\n\n```py\n# -*- coding: utf-8 -*-\n\nfrom django.conf.urls import include, url\nfrom django.contrib import admin\nfrom django.views.generic import TemplateView\n\nurlpatterns = [\n    url(r'^$', TemplateView.as_view(template_name='index.html'), name='index'),\n    url(r'^login', 'django.contrib.auth.views.login', kwargs={'template_name': 'login.html'}, name='login'),\n    url(r'^logout', 'django.contrib.auth.views.logout_then_login', kwargs={'login_url': 'login'}, name='logout'),\n    url(r'^admin/', include(admin.site.urls)),\n]\n```\n\n## middleware.py\n\u30ed\u30b0\u30a4\u30f3\u3057\u3066\u3044\u306a\u3044\u30a2\u30af\u30bb\u30b9\u306f\u30ed\u30b0\u30a4\u30f3\u30da\u30fc\u30b8\u306b\u98db\u3070\u3059\u3088\u3046\u306b\u3059\u308b\n\n```py\n# -*- coding: utf-8 -*-\n\nfrom django.shortcuts import redirect\n\n\nclass AuthenticationMiddleware(object):\n\n    def process_request(self, request):\n        if request.user.is_authenticated():\n            if request.path.startswith('/login'):\n                return redirect('/')\n        elif request.path == '/':\n            return redirect('login')\n```\n\n## serializers.py\n\u30d5\u30ed\u30f3\u30c8\u30a8\u30f3\u30c9\u3068\u30c7\u30fc\u30bf\u306e\u3084\u308a\u3068\u308a\u3092\u5b9a\u7fa9\u3059\u308b\u30af\u30e9\u30b9\n- model: \u30e2\u30c7\u30eb\u3092\u300c\u30e2\u30b8\u30e5\u30fc\u30eb\u540d.\u30e2\u30c7\u30eb\u30af\u30e9\u30b9\u540d\u300d\u3067\u5b9a\u7fa9\n- publish_fields: \u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u3078\u901a\u77e5\u3059\u308b\u30ab\u30e9\u30e0\u306e\u5b9a\u7fa9\n- update_fields: \u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u304b\u3089\u66f4\u65b0\u53ef\u80fd\u306a\u30ab\u30e9\u30e0\u3092\u5b9a\u7fa9\n\n```py\nfrom swampdragon.serializers.model_serializer import ModelSerializer\n\n\nclass UserSerializer(ModelSerializer):\n\n    class Meta:\n        model = 'auth.User'\n        publish_fields = ('username',)\n\n\nclass TodoListSerializer(ModelSerializer):\n\n    class Meta:\n        model = 'todo.TodoList'\n        publish_fields = ('name', 'description')\n        update_fields = ('name', 'description')\n\n\nclass TodoItemSerializer(ModelSerializer):\n\n    class Meta:\n        model = 'todo.TodoItem'\n        publish_fields = ('todolist_id', 'done', 'name', 'updated_at')\n        update_fields = ('todolist_id', 'done', 'name')\n```\n\n## models.py\nSelfPublishModel\u3092\u7d99\u627f\u3055\u305b\u3066save\u6642\u306bPublish\u304c\u901a\u77e5\u3055\u308c\u308b\u3088\u3046\u306b\u3059\u308b\u3002\nserializer_class\u3067\u30b7\u30ea\u30a2\u30e9\u30a4\u30ba\u8a2d\u5b9a\u3057\u305f\u30af\u30e9\u30b9\u3092\u5b9a\u7fa9\u3059\u308b\u3002\n\n```py\n# -*- coding: utf-8 -*-\n\nfrom django.db import models\nfrom swampdragon.models import SelfPublishModel\nfrom .serializers import TodoListSerializer, TodoItemSerializer\n\n\nclass TodoList(SelfPublishModel, models.Model):\n    serializer_class = TodoListSerializer\n    user_id = models.IntegerField()\n    name = models.CharField(max_length=100)\n    description = models.TextField(u'\u8aac\u660e', blank=True, null=True)\n    created_at = models.DateTimeField(u'\u4f5c\u6210\u65e5\u6642', auto_now_add=True)\n    updated_at = models.DateTimeField(u'\u66f4\u65b0\u65e5\u6642', auto_now=True)\n\n    class Meta:\n        index_together = ['user_id', 'id']\n\n\nclass TodoItem(SelfPublishModel, models.Model):\n    serializer_class = TodoItemSerializer\n    user_id = models.IntegerField()\n    name = models.CharField(max_length=100)\n    todolist_id = models.IntegerField()\n    done = models.BooleanField(u'\u5b8c\u4e86\u30d5\u30e9\u30b0', default=False)\n    created_at = models.DateTimeField(u'\u4f5c\u6210\u65e5\u6642', auto_now_add=True)\n    updated_at = models.DateTimeField(u'\u66f4\u65b0\u65e5\u6642', auto_now=True)\n\n    class Meta:\n        index_together = ['user_id', 'id']\n```\n\n## routers.py\nWebSocket\u5c02\u7528\u30b5\u30fc\u30d0\u30fc\u306b\u767b\u9332\u3059\u308bURL\u3001\u30de\u30c3\u30d4\u30f3\u30b0\u3057\u305f\u51e6\u7406\u3092\u5b9a\u7fa9\u3059\u308b\u30af\u30e9\u30b9\n- route_name: WebSocket\u5c02\u7528\u30b5\u30fc\u30d0\u30fc\u306b\u767b\u9332\u3055\u308c\u308bURL\u306ePath\u306b\u306a\u308b(http://localhost:9999/todo-list\u306a\u611f\u3058)\n- get_initial: \u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u304b\u3089\u30c7\u30fc\u30bf\u306e\u8ffd\u52a0\u3001\u66f4\u65b0\u3001\u524a\u9664\u3059\u308b\u3068\u304d\u306b\u8ffd\u52a0\u3067\u542b\u307e\u305b\u308b\u30d1\u30e9\u30e1\u30fc\u30bf\u30fc\u3092\u5b9a\u7fa9\n- get_subscription_contexts: \u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u304csubscription\u3057\u305f\u3068\u304d\u306e\u30c1\u30e3\u30cd\u30eb\u306b\u542b\u307e\u305b\u308b\u30d1\u30e9\u30e1\u30fc\u30bf\u30fc\u3092\u5b9a\u7fa9\n- get_object: \u30c7\u30fc\u30bf\u3092\u5358\u4f53\u3067\u8981\u6c42\u3055\u308c\u305f\u3068\u304d\u306e\u30af\u30a8\u30ea\u30fc\u51e6\u7406(\u5fc5\u9808)\n- get_query_set: \u30c7\u30fc\u30bf\u3092\u30ea\u30b9\u30c8\u3067\u8981\u6c42\u3055\u308c\u305f\u3068\u304d\u306e\u30af\u30a8\u30ea\u30fc\u51e6\u7406(\u5fc5\u9808)\n\n```py\n# -*- coding: utf-8 -*-\n\nfrom swampdragon import route_handler\nfrom swampdragon.route_handler import ModelRouter\nfrom module.todo.models import TodoList, TodoItem\nfrom module.todo.serializers import UserSerializer, TodoListSerializer, TodoItemSerializer\n\n\nclass UserRouter(ModelRouter):\n    route_name = 'user'\n    serializer_class = UserSerializer\n\n    def get_object(self, **kwargs):\n        return self.connection.user\n\n    def get_query_set(self, **kwargs):\n        pass\n\n\nclass TodoListRouter(ModelRouter):\n    route_name = 'todo-list'\n    serializer_class = TodoListSerializer\n    model = TodoList\n\n    def get_initial(self, verb, **kwargs):\n        kwargs['user_id'] = self.connection.user.id\n        return kwargs\n\n    def get_subscription_contexts(self, **kwargs):\n        # \u66f4\u65b0\u901a\u77e5\u304c\u30ed\u30b0\u30a4\u30f3\u30e6\u30fc\u30b6\u30fc\u306e\u307f\u306b\u9001\u3089\u308c\u308b\u3088\u3046\u30e6\u30fc\u30b6\u30fcID\u3092\u5165\u308c\u3066\u30e6\u30cb\u30fc\u30af\u306a\u30c1\u30e3\u30cd\u30eb\u3092\u4f5c\u308b(todolist|user_id:1\u306a\u30c1\u30e3\u30cd\u30eb\u306b\u306a\u308b)\n        kwargs['user_id'] = self.connection.user.id\n        return kwargs\n\n    def get_object(self, **kwargs):\n        user_list = self.model.objects.filter(id=kwargs['id'], user_id=self.connection.user.id)\n        return user_list[0] if user_list else None\n\n    def get_query_set(self, **kwargs):\n        user_id = self.connection.user.id\n        return self.model.objects.filter(user_id=user_id)\n\n\nclass TodoItemRouter(ModelRouter):\n    route_name = 'todo-item'\n    serializer_class = TodoItemSerializer\n    model = TodoItem\n\n    def get_initial(self, verb, **kwargs):\n        kwargs['user_id'] = self.connection.user.id\n        return kwargs\n\n    def get_subscription_contexts(self, **kwargs):\n        kwargs['user_id'] = self.connection.user.id\n        return kwargs\n\n    def get_object(self, **kwargs):\n        user_list = self.model.objects.filter(id=kwargs['id'], user_id=self.connection.user.id)\n        return user_list[0] if user_list else None\n\n    def get_query_set(self, **kwargs):\n        user_id = self.connection.user.id\n        return self.model.objects.filter(user_id=user_id)\n\n\nroute_handler.register(UserRouter)\nroute_handler.register(TodoListRouter)\nroute_handler.register(TodoItemRouter)\n```\n\n## \u30af\u30e9\u30a4\u30a2\u30f3\u30c8\n\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u306fAngularJS\u5074\u3092\u5229\u7528\u3059\u308b\n$dragon\u304cSwampDragon\u304c\u7528\u610f\u3057\u3066\u308b\u30b5\u30fc\u30d3\u30b9\u3002\n\n```js\nangular.module('todoApp')\n  .controller('PageController', ['$scope', '$dragon', '$dataHandler',\n                                 function ($scope, $dragon, $dataHandler) {\n    $scope.todoListChannel = 'todoListClient';\n    $scope.todoItemChannel = 'todoItemClient';\n\n    // \u521d\u56de\u30da\u30fc\u30b8\u30a2\u30af\u30bb\u30b9\u6642\n    $dragon.onReady(function() {\n        // todolist, todoItem\u306e\u60c5\u5831\u3092\u8cfc\u8aad\u3059\u308b(\u5909\u66f4\u901a\u77e5\u3055\u308c\u308b\u3088\u3046\u306a\u308b)\n        $dragon.subscribe('todo-list', $scope.todoListChannel, {}).then(function(response) {\n            $scope.TodoListMapper = new DataMapper(response.data);\n        });\n\n        $dragon.subscribe('todo-item', $scope.todoItemChannel, {}).then(function(response) {\n            $scope.todoItemMapper = new DataMapper(response.data);\n        });\n\n        // todolist, todoItem, user\u306e\u30c7\u30fc\u30bf\u3092\u53d6\u5f97\n        $dragon.getSingle('user', {}).then(function(response) {\n            $dataHandler.user = response.data;\n        });\n\n        $dragon.getList('todo-list', {list_id: 1}).then(function(response) {\n            $dataHandler.todoLists = response.data;\n        });\n\n        $dragon.getList('todo-item', {list_id: 1}).then(function(response) {\n            $dataHandler.todoItems = response.data;\n        });\n    });\n\n    // todolist, todoItem\u3067save\u304c\u3042\u3063\u305f\u5834\u5408\u306e\u5909\u66f4\u901a\u77e5\n    $dragon.onChannelMessage(function(channels, message) {\n\n        if (indexOf.call(channels, $scope.todoListChannel) > -1) {\n            $scope.$apply(function() {\n                $scope.TodoListMapper.mapData($dataHandler.todoLists, message);\n            });\n        }\n\n        if (indexOf.call(channels, $scope.todoItemChannel) > -1) {\n            $scope.$apply(function() {\n                $scope.todoItemMapper.mapData($dataHandler.todoItems, message);\n            });\n        }\n    });\n\n}]);\n\n```\n\n\n# \u8d77\u52d5\n\n```py\npython ./manage.py runserver\npython server.py\n```\n\n\n# \u307e\u3068\u3081\n\u30b5\u30fc\u30d0\u30fc\u30b5\u30a4\u30c9\u306f\u3059\u3054\u304f\u7c21\u5358\u306b\u3067\u304d\u3001Django\u3092\u3055\u308f\u3063\u305f\u3053\u3068\u304c\u3042\u308b\u4eba\u306b\u306f\u99b4\u67d3\u307f\u3084\u3059\u3044\u3068\u601d\u3046\u3002\n\u305f\u3060\u3001\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u5074\u306f\u30ea\u30a2\u30eb\u30bf\u30a4\u30e0\u3067HTML\u3078\u753b\u9762\u66f4\u65b0\u3055\u305b\u308bJS\u306e\u30b3\u30fc\u30eb\u30d0\u30c3\u30af\u306a\u3069\u306e\u51e6\u7406\u304c\n\u304c\u3093\u3070\u3089\u306a\u3044\u3068\u3044\u3051\u306a\u3055\u305d\u3046\u306a\u96f0\u56f2\u6c17\u3002\nAngularJS\u3092\u5229\u7528\u3059\u308b\u3068HTML\u3068JS\u5909\u6570\u306e\u30c7\u30fc\u30bf\u30d0\u30a4\u30f3\u30c7\u30a3\u30f3\u30b0\u304c\u3067\u304d\u308b\u306e\u3067\u753b\u9762\u66f4\u65b0\u306e\u624b\u9593\u306f\u6539\u5584\u3067\u304d\u305d\u3046\u3002\n\n\u65e5\u672c\u3067\u306f\u3042\u307e\u308a\u5c0e\u5165\u5b9f\u7e3e\u306f\u306a\u3055\u305d\u3046\u3060\u3051\u3069\u3001github\u3092\u898b\u308b\u3068\n\u3061\u3089\u307b\u3089\u4f7f\u308f\u308c\u3066\u3044\u308b\u3088\u3046\u306a\u306e\u3067\u4eca\u5f8c\u306b\u671f\u5f85\u3057\u305f\u3044\u3002\n\n\u4eca\u56de\u4f5c\u6210\u3057\u305fTodo\u7ba1\u7406\u30b5\u30a4\u30c8\u306e\u30b3\u30fc\u30c9\u306fgithub\u306b\u7f6e\u3044\u3066\u307e\u3059.\nhttps://github.com/fujimisakari/todo-server\n", "tags": ["Python", "Django", "websocket", "AngularJS"]}