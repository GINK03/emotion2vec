{"tags": ["Emacs", "Markdown"], "context": " More than 1 year has passed since last update.(setq marked/buffer-name \"marked\")\n(setq marked/process nil)\n(setq marked/queue nil)\n\n(defun marked/buffer ()\n  (get-buffer-create (concat \"*\" marked/buffer-name \"*\")))\n\n(defun marked/tempbuffer ()\n  (get-buffer-create (concat \"**\" marked/buffer-name \"**\")))\n\n(defun marked/show ()\n  (if (one-window-p) (split-window))\n  (other-window 1)\n  (switch-to-buffer (marked/buffer))\n  (other-window 1))\n\n(defun marked/process-sentinel (process signal)\n  (if (string= signal \"finished\\n\")\n      (let ((document))\n        (with-current-buffer (process-buffer process)\n          (setq document (libxml-parse-html-region (point-min) (point-max))))\n        (kill-buffer (process-buffer process))\n        (with-current-buffer (marked/buffer)\n          (save-excursion\n            (erase-buffer)\n            (goto-char (point-min))\n            (shr-insert-document document)))\n        (marked/do))))\n\n(defun marked/processable? ()\n  (and (> (length marked/queue) 0)\n       (or (null marked/process)\n           (not (eq (process-status marked/process) 'run)))))\n\n(defun marked/do ()\n  (if (marked/processable?)\n      (let ((process-connection-type nil))\n        (setq marked/process (start-process \"marked\" (marked/tempbuffer) \"marked\" \"--gfm\"))\n        (set-process-query-on-exit-flag marked/process nil)\n        (set-process-buffer marked/process (marked/tempbuffer))\n        (set-process-sentinel marked/process 'marked/process-sentinel)\n        (process-send-string marked/process (car marked/queue))\n        (process-send-eof marked/process)\n        (setq marked/queue (cdr marked/queue)))))\n\n(defun marked/invoke (markdown-text)\n  (setq marked/queue (append marked/queue (list markdown-text)))\n  (marked/do))\n\n(defun marked-invoke ()\n  (interactive)\n  (marked/invoke (buffer-substring-no-properties (point-min) (point-max))))\n\n(defun marked/after-change (begin end length)\n  (marked-invoke))\n\n(defun marked-preview ()\n  (interactive)\n  (add-hook 'after-change-functions 'marked/after-change nil t)\n  (marked/show)\n  (marked-invoke))\n\n(defun marked-preview-off ()\n  (interactive)\n  (remove-hook 'after-change-functions 'marked/after-change t))\n\nafter-change-functions\u3063\u3066\u30d0\u30c3\u30d5\u30a1\u30ed\u30fc\u30ab\u30eb\u5909\u6570\u3058\u3083\u306a\u3044\u304b\u3089\u3001emacs\u306b\u306a\u3093\u304b\u6253\u3064\u305f\u3073\u306bmarked\u3092\u8d77\u52d5\u3057\u3066\u305f\u3063\u307d\u3044\u3002\n\u52d5\u4f5c\u30b5\u30f3\u30d7\u30eb\n\n```el\n(setq marked/buffer-name \"marked\")\n(setq marked/process nil)\n(setq marked/queue nil)\n\n(defun marked/buffer ()\n  (get-buffer-create (concat \"*\" marked/buffer-name \"*\")))\n\n(defun marked/tempbuffer ()\n  (get-buffer-create (concat \"**\" marked/buffer-name \"**\")))\n\n(defun marked/show ()\n  (if (one-window-p) (split-window))\n  (other-window 1)\n  (switch-to-buffer (marked/buffer))\n  (other-window 1))\n\n(defun marked/process-sentinel (process signal)\n  (if (string= signal \"finished\\n\")\n      (let ((document))\n        (with-current-buffer (process-buffer process)\n          (setq document (libxml-parse-html-region (point-min) (point-max))))\n        (kill-buffer (process-buffer process))\n        (with-current-buffer (marked/buffer)\n          (save-excursion\n            (erase-buffer)\n            (goto-char (point-min))\n            (shr-insert-document document)))\n        (marked/do))))\n\n(defun marked/processable? ()\n  (and (> (length marked/queue) 0)\n       (or (null marked/process)\n           (not (eq (process-status marked/process) 'run)))))\n\n(defun marked/do ()\n  (if (marked/processable?)\n      (let ((process-connection-type nil))\n        (setq marked/process (start-process \"marked\" (marked/tempbuffer) \"marked\" \"--gfm\"))\n        (set-process-query-on-exit-flag marked/process nil)\n        (set-process-buffer marked/process (marked/tempbuffer))\n        (set-process-sentinel marked/process 'marked/process-sentinel)\n        (process-send-string marked/process (car marked/queue))\n        (process-send-eof marked/process)\n        (setq marked/queue (cdr marked/queue)))))\n\n(defun marked/invoke (markdown-text)\n  (setq marked/queue (append marked/queue (list markdown-text)))\n  (marked/do))\n\n(defun marked-invoke ()\n  (interactive)\n  (marked/invoke (buffer-substring-no-properties (point-min) (point-max))))\n\n(defun marked/after-change (begin end length)\n  (marked-invoke))\n\n(defun marked-preview ()\n  (interactive)\n  (add-hook 'after-change-functions 'marked/after-change nil t)\n  (marked/show)\n  (marked-invoke))\n\n(defun marked-preview-off ()\n  (interactive)\n  (remove-hook 'after-change-functions 'marked/after-change t))\n```\n\n`after-change-functions`\u3063\u3066\u30d0\u30c3\u30d5\u30a1\u30ed\u30fc\u30ab\u30eb\u5909\u6570\u3058\u3083\u306a\u3044\u304b\u3089\u3001emacs\u306b\u306a\u3093\u304b\u6253\u3064\u305f\u3073\u306bmarked\u3092\u8d77\u52d5\u3057\u3066\u305f\u3063\u307d\u3044\u3002\n\n\u52d5\u4f5c\u30b5\u30f3\u30d7\u30eb\n![Untitled.gif](https://qiita-image-store.s3.amazonaws.com/0/5360/88da29d6-127d-5b99-75ca-3cb667839ae7.gif)\n"}