{"context": " More than 1 year has passed since last update.\n\n\u4f55\u3092\u3057\u305f\u3044\u306e\u304b\uff1f\n\u5927\u6614\u3001\u6c4e\u7528IsNull,IsNotNull\u306e\u5b9f\u88c5\u3068\u8a00\u3046\u30a8\u30f3\u30c8\u30ea\u3092\u66f8\u3044\u305f\u306e\u3067\u3059\u304c\u3001\n\u3069\u3046\u306b\u3082\u3053\u3046\u306b\u3082\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u4e0d\u6e80\u304c\u3042\u308a\u307e\u3057\u305f\u3002\n\n\u672c\u6765\u4e0d\u8981\u306a\u30dc\u30c3\u30af\u30b9\u5316\u304c\u767a\u751f\u3059\u308b\n\u4e0a\u8a18\u306b\u4f34\u3046\u3001\u5024\u578b\u306e\u30dc\u30af\u30b7\u30f3\u30b0\u30b3\u30b9\u30c8\u3084\u3001\u305d\u308c\u306b\u4ed8\u968f\u3059\u308b\u30de\u30cd\u30fc\u30b8\u30d2\u30fc\u30d7\u3092\u5229\u7528\u3057\u3001GC\u304c\u52d5\u304f\u3053\u3068\u306b\u3088\u308b\u30d1\u30d5\u30a9\u30fc\u30de\u30f3\u30b9\u306e\u4f4e\u4e0b\n\n\u3068\u3044\u3046\u3001\u4e0d\u6e80\u304c\u3042\u3063\u305f\u3051\u3069\u3001\u5f53\u6642\u306f\u89e3\u6c7a\u3067\u304d\u306a\u304b\u3063\u305f\u3002\n\u3067\u3001\u4eca\u56de\u3001\u305d\u306e\u8fba\u5272\u3068\u3046\u307e\u304f\u634c\u3051\u305f\u306e\u3067\u3061\u3087\u3063\u3068\u66f8\u3044\u3066\u307f\u3088\u3046\u304b\u306a\u3068\u8a00\u3046\u306e\u304c\u4eca\u65e5\u306e\u304a\u984c\u3002\n\n\u524d\u63d0\u3068\u3057\u3066\u3044\u308b\u6761\u4ef6\n\u4ee5\u4e0b\u306e\u8b70\u8ad6\u3067\u306f\u3001\u6b21\u306e\u3088\u3046\u306a\u6761\u4ef6\u3092\u8a2d\u3051\u3066\u3044\u308b\u306e\u3067\u3054\u4e86\u627f\u306e\u7a0b\u3002\n\nNullable\uff1cT\uff1e\u3092\u9664\u304f\u5024\u578b\u306f\u3001Null\u3068\u6bd4\u8f03\u3057\u305f\u7d50\u679c\u306f\u5e38\u306bFalse\u3068\u306a\u308b\u3002\n\n\n\u4eca\u56de\u306e\u30b4\u30fc\u30eb\n\nNullable\uff1cT\uff1e\u306e\u5224\u5225\u6642\u30dc\u30c3\u30af\u30b9\u5316\u3055\u305b\u306a\u3044\u3002\nNullable\uff1cT\uff1e\u3092\u9664\u304f\u5024\u578b\u306b\u5bfe\u3059\u308b\u8fd4\u5374\u5024\u306e\u5b9a\u6570\u5316\n\n\u5f53\u305f\u308a\u304c\u76ee\u7684\u306b\u306a\u3063\u3066\u307e\u3059\u3002\n\n\u5b9f\u88c5\n\u5b9f\u88c5\u306b\u95a2\u3057\u3066\u306f\u4ee5\u4e0b\u306e\u901a\u308a\u3002\n\nNullCheckExtensions.cs\n\n    public static class NullCheckExtensions\n    {\n        //\u65b0\u578b\u306eNull/IsNull\n        public static bool IsNull<T>(this T value) => NullChecker<T>.IsNull(value);\n        public static bool IsNotNull<T>(this T value) => !IsNull(value);\n        //\u5f93\u6765\u578b\u306e\u6c4e\u7528Null/IsNull\n        public static bool TraditionalIsNull(this object obj) => obj == null;\n        public static bool TraditionalIsNotNull(this object obj) => obj != null;\n\n        private static class NullChecker<T>\n        {\n            private static readonly TypeType _type;\n\n            static NullChecker()\n            {\n                var type = typeof (T);\n\n                if (type.IsGenericType && type.GetGenericTypeDefinition() == typeof (Nullable<>))\n                {\n                    _type = TypeType.Nullable;\n                }\n                else if (type.IsValueType)\n                {\n                    _type = TypeType.Value;\n                }\n                else\n                {\n                    _type = TypeType.Reference;\n                }\n            }\n\n            public static bool IsNull(T value)\n            {\n                switch (_type)\n                {\n                    //\u5024\u578b\u306a\u3089\u5e38\u306bFalse\u3092\u8fd4\u3059\u3002\n                    case TypeType.Value:\n                        return false;\n\n                    //\u53c2\u7167\u5f62\u306f\u90fd\u5ea6\u5224\u5b9a\n                    case TypeType.Reference:\n                        return value == null;\n\n                    //Nullable\u306fEqual\u30e1\u30bd\u30c3\u30c9\u547c\u3073\u51fa\u3059\u3002\n                    case TypeType.Nullable:\n                        return value.Equals(null);\n\n                    default:\n                        throw new InvalidOperationException(\"Unexpected type\");\n                }\n            }\n\n            private enum TypeType\n            {\n                //Nullable\u4ee5\u5916\u306e\u5024\u578b\n                Value,\n                //\u53c2\u7167\u5f62\n                Reference,\n                //Null\u8a31\u5bb9\u5f62\n                Nullable\n            }\n        }\n    }\n\n\n\n\u5b9f\u88c5\u306e\u304a\u304a\u307e\u304b\u306a\u89e3\u8aac\n\u3053\u3053\u3067\u3001\u30ad\u30e2\u306b\u306a\u308b\u306e\u306f\u3001\u5185\u90e8\u306bNullChecker\u3068\u3044\u3046StaticClass\u3092\u6301\u3063\u3066\u3044\u308b\u70b9\u3068\u306a\u308a\u307e\u3059\u3002\n\u30b3\u30ec\u306f\u4f55\u3092\u3057\u3066\u308b\u304b\u3068\u3044\u3046\u3068\u3001NullChecker\u306f\u30b8\u30a7\u30cd\u30ea\u30c3\u30af\u578b\u306a\u306e\u3067\u3001T\u306e\u7a2e\u985e\u3060\u3051\u30af\u30e9\u30b9\u304c\u751f\u6210\u3055\u308c\u308b\u3053\u3068\u306b\u306a\u308a\u3001\n\u751f\u6210\u6bce\u306bNullCheker\u306e\u9759\u7684\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u306b\u3088\u3063\u3066\u3001\u6240\u4e0e\u306eT\u304c\u3069\u306e\u3088\u3046\u578b\u306a\u306e\u304b\u3001\u3088\u308a\u5177\u4f53\u7684\u306b\u306f\u3001\n\nNullable\uff1c\uff1e\u578b\n\u5024\u578b\n\u53c2\u7167\u578b\n\n\u3092\u5224\u5b9a\u3057\u3001IsNull\u30e1\u30bd\u30c3\u30c9\u306e\u547c\u3073\u51fa\u3057\u6642\u306b\u3001\u304b\u3064\u3066\u306e\u3088\u3046\u306bObject\u578b\u3078\u306e\u30ad\u30e3\u30b9\u30c8\u7121\u3057\u306b\u5224\u5b9a\u3092\u5b9f\u884c\u53ef\u80fd\u306b\u3057\u3066\u3044\u307e\u3059\u3002\n\u307e\u305f\u3001\u9759\u7684\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u306f\u3001\u9759\u7684\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u30fc (C# \u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0 \u30ac\u30a4\u30c9)\u8a18\u8f09\u306e\u901a\u308a\u3001\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u306e\u30e9\u30a4\u30d5\u30b5\u30a4\u30af\u30eb\u306e\u4e2d\u3067\u5fc5\u8981\u3067\u3042\u308c\u30701\u56de\u3060\u3051\u5b9f\u884c\u3055\u308c\u308b\u306e\u3067\u3001\u968f\u6642\u5224\u5b9a\u3088\u308a\u7279\u306b\u5024\u578b\u306e\u5224\u5b9a\u306b\u5927\u304d\u306a\u30a2\u30c9\u30d0\u30f3\u30c7\u30fc\u30b8\u3092\u6301\u3064\u3053\u3068\u306b\u306a\u308a\u307e\u3059\u3002\n\nNullable\u3092\u7279\u6b8a\u6271\u3044\u3057\u3066\u3044\u308b\u308f\u3051\nNullable\u306b\u5bfe\u3057\u3066\u306f\u3001\u5b9f\u88c5\u3092\u898b\u308c\u3070\u308f\u304b\u308b\u3068\u304a\u308a\u3001\u7279\u6b8a\u6271\u3044\u3092\u884c\u3063\u3066\u3044\u307e\u3059\u3002\u3053\u308c\u306f\u3001\u6587\u5b57\u901a\u308a\u3001Nullable\u306f\u5024\u578b\u304b\u3064Null\u3092\u8a31\u5bb9\u3067\u304d\u308b\u306e\u3067\u3001\u4e00\u822c\u7684\u306a\u5024\u578b\u306e\u30b3\u30f3\u30c6\u30ad\u30b9\u30c8\u3067\u5224\u5b9a\u3057\u3066\u3057\u307e\u3046\u3068\u3001HasValue\u304cfalse\u3067\u3042\u3063\u3066\u3082\u3001IsNull\u30e1\u30bd\u30c3\u30c9\u304ctrue\u306b\u306a\u3063\u3066\u3057\u307e\u3046\u306e\u3067\u3001\u3053\u306e\u70b9\u3092\u4f55\u3068\u304b\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3057\u305f\u3002\n\u5bfe\u7b56\u3068\u3057\u3066\u3001Equals\u30e1\u30bd\u30c3\u30c9\u3092\u660e\u793a\u7684\u306b\u547c\u3073\u51fa\u3059\u3053\u3068\u306b\u3088\u308a\u3001\u30dc\u30c3\u30af\u30b9\u5316\u3092\u7d4c\u308b\u3053\u3068\u7121\u304f\u5224\u5b9a\u3092\u53ef\u80fd\u306b\u3057\u3066\u3044\u307e\u3059\u3002\n\n\u53c2\u7167\u578b\u3067Equals\u30e1\u30bd\u30c3\u30c9\u3092\u5229\u7528\u3059\u308b\u3068\u9177\u3044\u76ee\u306b\u906d\u3046\ncase TypeType.Reference:\n    return value == null;\n\n\u3053\u306e\u90e8\u5206\u3092\u3001\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u66f8\u304d\u63db\u3048\u308b\u3068\u3001\ncase TypeType.Reference:\n    return value.Equals(null);\n\n\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u30b7\u30ca\u30ea\u30aa\u3067\u3001StackOverFlow\u304c\u767a\u751f\u3059\u308b\u306e\u3067\u3001\u6ce8\u610f\u304c\u5fc5\u8981\u3067\u3059\u3002\n\n    public class RecursiveCall\n    {\n        public int Value { get; set; }\n\n        public override bool Equals(object obj)\n        {\n            var tmp = obj as RecursiveCall;\n\n            if (tmp == null) return false;\n\n            //\u3053\u3053\u3067OpEqual\u304c\u547c\u3070\u308c\u3066\u3001\u7121\u9650\u518d\u5e30\u304c\u5b8c\u6210\u3059\u308b\u3002\n            return tmp == this;\n        }\n\n        public static bool operator ==(RecursiveCall x, RecursiveCall y)\n        {\n            //\u3053\u3053\u3067\u3001Equals\u304c\u547c\u3070\u308c\u308b\u3002\n            if (x.IsNull() && y.IsNull()) return true;\n            return (y.IsNotNull()) && (x.IsNotNull()) && (x.Value == y.Value);\n        }\n\n        public static bool operator !=(RecursiveCall x, RecursiveCall y) => !(x == y);\n    }\n\n\n\n\u3069\u308c\u304f\u3089\u3044\u901f\u304f\u306a\u3063\u305f\u304b\uff1f\n\u6700\u5f8c\u306b\u3001\u30d1\u30d5\u30a9\u30fc\u30de\u30f3\u30b9\u304c\u3069\u306e\u7a0b\u5ea6\u6539\u5584\u3057\u305f\u306e\u304c\u691c\u8a3c\u3057\u3066\u307f\u305f\u3044\u3068\u601d\u3044\u307e\u3059\u3002\n\u307e\u305a\u6700\u521d\u306b\u3001\n\nNullable\nstring\nint\n\n\u578b\u306eIsNotNull\u3092\u5224\u5b9a\u3055\u305b\u3066\u307f\u307e\u3057\u305f\u3002\n\n        private static void Main()\n        {\n\n            const int seed = 42;\n            const int count = 25000000;\n\n            var chrono = new Stopwatch();\n\n            var rnd = MiscExtensions.GetRandomSequence(seed, count);\n\n            // \u4eca\u56de\u65b0\u305f\u306b\u5b9f\u88c5\u3057\u305f\u65b9\u5f0f\u3002\n            chrono.Start();\n            var cnt = GcCounter.GetCurrent();\n\n            var nullableCount = rnd.Select(x => x%3 == 0 ? null : new int?(x)).Count(x => x.IsNotNull());\n            var stringCount = rnd.Select(x => x%3 == 0 ? null : x.ToString()).Count(x => x.IsNotNull());\n            var intCount = rnd.Select(x => x).Count(x => x.IsNotNull());\n\n            chrono.Stop();\n            cnt = GcCounter.GetCurrent() - cnt;\n\n            Console.WriteLine(\"NewMethod\");\n            Console.WriteLine($\"Nullable:{nullableCount} String:{stringCount} Integer:{intCount}\");\n            Console.WriteLine($\"Elapsed:{chrono.Elapsed}\");\n            Console.WriteLine(cnt.ToString());\n\n            Console.WriteLine();\n            Console.WriteLine();\n\n\n            //\u5f93\u6765\u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306b\u30ad\u30e3\u30b9\u30c8\u3059\u308b\u65b9\u5f0f\n            rnd = MiscExtensions.GetRandomSequence(seed, count);\n            chrono.Restart();\n            cnt = GcCounter.GetCurrent(true);\n\n            nullableCount = rnd.Select(x => x%3 == 0 ? null : new int?(x)).Count(x => x.TraditionalIsNotNull());\n            stringCount = rnd.Select(x => x % 3 == 0 ? null : x.ToString()).Count(x => x.TraditionalIsNotNull());\n            intCount = rnd.Select(x => x).Count(x => x.TraditionalIsNotNull());\n\n            chrono.Stop();\n            cnt = GcCounter.GetCurrent() - cnt;\n\n            Console.WriteLine(\"TraditionalMethod\");\n            Console.WriteLine($\"Nullable:{nullableCount} String:{stringCount} Integer:{intCount}\");\n            Console.WriteLine($\"Elapsed:{chrono.Elapsed}\");\n            Console.WriteLine(cnt.ToString());\n        }\n\n\u3053\u306e\u30b5\u30f3\u30d7\u30eb\u306e\u7d50\u679c\u306f\u3001\u30c7\u30d0\u30c3\u30ac\u30a2\u30bf\u30c3\u30c1\u7121\u3057\u306e\u30ea\u30ea\u30fc\u30b9\u30d3\u30eb\u30c9\u3067\u3001\u4ee5\u4e0b\u306e\u901a\u308a\u3067\u3057\u305f\u3002\nNewMethod\nNullable:16671891 String:16664383 Integer:25000000\nElapsed:00:00:05.1121741\nGen0:135  Gen1:0  Gen2:0  TTL:135\nTraditionalMethod\nNullable:16671891 String:16664383 Integer:25000000\nElapsed:00:00:06.3988913\nGen0:254  Gen1:0  Gen2:0  TTL:254\n\u30d1\u30d5\u30a9\u30fc\u30de\u30f3\u30b9\u306b\u3001\u4e00\u5fdc\u5dee\u304c\u4ed8\u3044\u3066\u3044\u308b\u306e\u304c\u308f\u304b\u308a\u307e\u3059\u3002\n\u3055\u3089\u306b\u3001\u4eca\u56de\u30c1\u30e5\u30fc\u30cb\u30f3\u30b0\u3092\u884c\u3063\u305f\u3001\u5024\u578b\u3001Nullable\u578b\u306b\u52d5\u4f5c\u3092\u7d5e\u3063\u305f\u4ee5\u4e0b\u306e\u30b5\u30f3\u30d7\u30eb\u3092\u4f5c\u308a\u30c6\u30b9\u30c8\u3057\u3066\u307f\u305f\u5834\u5408\u3001\n\n        private static void Main()\n        {\n\n            const int seed = 42;\n            const int count = 25000000;\n\n            var chrono = new Stopwatch();\n\n            var rnd = MiscExtensions.GetRandomSequence(seed, count);\n\n            // \u4eca\u56de\u65b0\u305f\u306b\u5b9f\u88c5\u3057\u305f\u65b9\u5f0f\u3002\n            chrono.Start();\n            var cnt = GcCounter.GetCurrent();\n\n            var nullableCount = rnd.Select(x => x%3 == 0 ? null : new int?(x)).Count(x => x.IsNotNull());\n            var intCount = rnd.Select(x => x).Count(x => x.IsNotNull());\n\n            chrono.Stop();\n            cnt = GcCounter.GetCurrent() - cnt;\n\n            Console.WriteLine(\"NewMethod\");\n            Console.WriteLine($\"Nullable:{nullableCount} Integer:{intCount}\");\n            Console.WriteLine($\"Elapsed:{chrono.Elapsed}\");\n            Console.WriteLine(cnt.ToString());\n\n            Console.WriteLine();\n            Console.WriteLine();\n\n\n            //\u5f93\u6765\u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306b\u30ad\u30e3\u30b9\u30c8\u3059\u308b\u65b9\u5f0f\n            rnd = MiscExtensions.GetRandomSequence(seed, count);\n            chrono.Restart();\n            cnt = GcCounter.GetCurrent(true);\n\n            nullableCount = rnd.Select(x => x%3 == 0 ? null : new int?(x)).Count(x => x.TraditionalIsNotNull());\n            intCount = rnd.Select(x => x).Count(x => x.TraditionalIsNotNull());\n\n            chrono.Stop();\n            cnt = GcCounter.GetCurrent() - cnt;\n\n            Console.WriteLine(\"TraditionalMethod\");\n            Console.WriteLine($\"Nullable:{nullableCount} Integer:{intCount}\");\n            Console.WriteLine($\"Elapsed:{chrono.Elapsed}\");\n            Console.WriteLine(cnt.ToString());\n        }\n\nNewMethod\nNullable:16671891 Integer:25000000\nElapsed:00:00:01.7142565\nGen0:0  Gen1:0  Gen2:0  TTL:0\nTraditionalMethod\nNullable:16671891 Integer:25000000\nElapsed:00:00:03.3442754\nGen0:119  Gen1:0  Gen2:0  TTL:119\n\u3088\u308a\u30d1\u30d5\u30a9\u30fc\u30de\u30f3\u30b9\u306e\u5dee\u7570\u304c\u9855\u8457\u306b\u306a\u308a\u307e\u3059\u3002\n\n\u307e\u3068\u3081\n\u4ee5\u524d\u3001\u4e0d\u5099\u304c\u6709\u308a\u3064\u3064\u3082\u305d\u308c\u4ee5\u4e0a\u3067\u304d\u306a\u3044\u3068\u8003\u3048\u3066\u3044\u305f\u3001\u5024\u578b\u306eIsNull/IsNotNull\u5224\u5b9a\u3092\u6bd4\u8f03\u7684\u3046\u307e\u304f\u634c\u3051\u305f\u304b\u306a\u3068\u601d\u3044\u307e\u3059\u3002\n\u305d\u306e\u969b\u3001Nullable\u304c\u554f\u984c\u306b\u306a\u308a\u307e\u3057\u305f\u304c\u3001\u30b3\u30ec\u3082\u53c8\u3001Equals\u30e1\u30bd\u30c3\u30c9\u306e\u547c\u3073\u51fa\u3057\u3067\u30de\u30cd\u30fc\u30b8\u30d2\u30fc\u30d7\u3092\u4f7f\u3046\u3053\u3068\u7121\u304f\u5224\u5b9a\u53ef\u80fd\u306b\u306a\u308a\u307e\u3057\u305f\u3002\n\u6b21\u671fC#\u3067\u5b9f\u88c5\u304c\u4e88\u5b9a\u3055\u308c\u3066\u3044\u308b\u3001Null\u975e\u8a31\u5bb9\u306e\u53c2\u7167\u578b\u304c\u8ffd\u52a0\u3055\u308c\u305f\u5834\u5408\u306f\u3001\u5225\u9014\u8abf\u6574\u304c\u5fc5\u8981\u3068\u306a\u308b\u3068\u601d\u3044\u307e\u3059\u30021\n\n\u8272\u3005\u306a\u5b9f\u88c5\n\u672c\u30a8\u30f3\u30c8\u30ea\u3092\u30a2\u30c3\u30d7\u5f8c\u3001@haxe\u5148\u751f\u3068\u3001@yfakariya\u5148\u751f\u304b\u3089\u3001\u5225\u5b9f\u88c5\u306e\u3054\u63d0\u6848\u3092\u9802\u3044\u305f\u306e\u3067\u3001\n\u3053\u3053\u306b\u7d39\u4ecb\u3055\u305b\u3066\u9802\u304d\u307e\u3059\u3002\n\u3053\u306e\u5834\u3092\u304a\u501f\u308a\u3057\u3066\u3001\u4e21\u5148\u751f\u306b\u304a\u793c\u7533\u3057\u4e0a\u3052\u307e\u3059\u3002\n\nyfakariya\u5148\u751f\u306e\u5b9f\u88c5\n\u30aa\u30ea\u30b8\u30ca\u30eb\u306f\u3053\u3061\u3089\nsing System;\n\nstatic class Program\n{\n    static void Main()\n    {\n        Test( \"a\" );\n        Test( 1 );\n        Test<int?>( 1 );\n    }\n\n    static void Test<T>( T nonNull)\n    {\n        Console.WriteLine( \"IsNull<{0}>(default({0})) :{1}\", typeof( T ).Name, NullChecker<T>.IsNull( default( T ) ) );\n        Console.WriteLine( \"IsNull<{0}>(nonNull) :{1}\", typeof( T ).Name, NullChecker<T>.IsNull( nonNull ) );\n    }\n}\n\ninternal static class NullChecker<T>\n{\n    private static readonly Func<T, bool> _isNull =\n        InitializeIsNull();\n\n    private static Func<T, bool> InitializeIsNull()\n    {\n        if ( !typeof( T ).IsValueType )\n        {\n            return value => value == null;\n        }\n\n        var nullableUnderlyingType = Nullable.GetUnderlyingType( typeof( T ) );\n        if ( nullableUnderlyingType != null )\n        {\n            return\n                ( Func<T, bool> )\n                typeof( NullableNullChecker<> )\n                .MakeGenericType( nullableUnderlyingType )\n                .GetMethod( \"IsNull\" )\n                .CreateDelegate( typeof( Func<T, bool> ) );\n        }\n\n        return _ => false;\n    }\n\n    public static bool IsNull( T value )\n    {\n        return _isNull( value );\n    }\n}\n\ninternal static class NullableNullChecker<T>\n    where T : struct\n{\n    public static bool IsNull( Nullable<T> value )\n    {\n        return !value.HasValue;\n    }\n}\n\n\u52d5\u7684\u306b\u3001Nullable.HasValue\u30d7\u30ed\u30d1\u30c6\u30a3\u3092\u547c\u3073\u51fa\u3059\u5b9f\u88c5\u3068\u306a\u3063\u3066\u304a\u308a\u307e\u3059\u3002\n\nhaxe\u5148\u751f\u306e\u5b9f\u88c5\n\u30aa\u30ea\u30b8\u30ca\u30eb\u306f\u3053\u3061\u3089\n\u5143\u5b9f\u88c5\u306eNullChecker\u306e\u307f\u629c\u7c8b\n\n    static class NullableChecker<T>\n    {\n        private static readonly bool IsValueType;\n\n        static NullableChecker()\n        {\n            Type type = typeof (T);\n            IsValueType = type.IsValueType && Nullable.GetUnderlyingType(type) == null;\n        }\n\n        public static bool IsNull(T value) => IsValueType ? false : value == null;\n\n    }\n\nSwitch\u3092\u30b7\u30f3\u30d7\u30eb\u3067\u30af\u30fc\u30eb\u306a\u6761\u4ef6\u5224\u5b9a\u306b\u306a\u3055\u3063\u3066\u3044\u307e\u3059\u3002\n\n\n\n\n\u3068\u306f\u3044\u3048\u3001\u591a\u5206\u52b9\u7387\u3092\u5225\u3068\u3059\u308c\u3070\u52d5\u304f\u3068\u306f\u601d\u3044\u307e\u3059\u3002\u00a0\u21a9\n\n\n\n# \u4f55\u3092\u3057\u305f\u3044\u306e\u304b\uff1f\n\u5927\u6614\u3001[\u6c4e\u7528IsNull,IsNotNull\u306e\u5b9f\u88c5](http://qiita.com/NetSeed/items/949cf2e2be301f031178)\u3068\u8a00\u3046\u30a8\u30f3\u30c8\u30ea\u3092\u66f8\u3044\u305f\u306e\u3067\u3059\u304c\u3001\n\u3069\u3046\u306b\u3082\u3053\u3046\u306b\u3082\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u4e0d\u6e80\u304c\u3042\u308a\u307e\u3057\u305f\u3002\n\n1. \u672c\u6765\u4e0d\u8981\u306a\u30dc\u30c3\u30af\u30b9\u5316\u304c\u767a\u751f\u3059\u308b\n2. \u4e0a\u8a18\u306b\u4f34\u3046\u3001\u5024\u578b\u306e\u30dc\u30af\u30b7\u30f3\u30b0\u30b3\u30b9\u30c8\u3084\u3001\u305d\u308c\u306b\u4ed8\u968f\u3059\u308b\u30de\u30cd\u30fc\u30b8\u30d2\u30fc\u30d7\u3092\u5229\u7528\u3057\u3001GC\u304c\u52d5\u304f\u3053\u3068\u306b\u3088\u308b\u30d1\u30d5\u30a9\u30fc\u30de\u30f3\u30b9\u306e\u4f4e\u4e0b\n\n\u3068\u3044\u3046\u3001\u4e0d\u6e80\u304c\u3042\u3063\u305f\u3051\u3069\u3001\u5f53\u6642\u306f\u89e3\u6c7a\u3067\u304d\u306a\u304b\u3063\u305f\u3002\n\u3067\u3001\u4eca\u56de\u3001\u305d\u306e\u8fba\u5272\u3068\u3046\u307e\u304f\u634c\u3051\u305f\u306e\u3067\u3061\u3087\u3063\u3068\u66f8\u3044\u3066\u307f\u3088\u3046\u304b\u306a\u3068\u8a00\u3046\u306e\u304c\u4eca\u65e5\u306e\u304a\u984c\u3002\n\n# \u524d\u63d0\u3068\u3057\u3066\u3044\u308b\u6761\u4ef6\n\u4ee5\u4e0b\u306e\u8b70\u8ad6\u3067\u306f\u3001\u6b21\u306e\u3088\u3046\u306a\u6761\u4ef6\u3092\u8a2d\u3051\u3066\u3044\u308b\u306e\u3067\u3054\u4e86\u627f\u306e\u7a0b\u3002\n\n- Nullable\uff1cT\uff1e\u3092\u9664\u304f\u5024\u578b\u306f\u3001Null\u3068\u6bd4\u8f03\u3057\u305f\u7d50\u679c\u306f\u5e38\u306bFalse\u3068\u306a\u308b\u3002\n\n\n# \u4eca\u56de\u306e\u30b4\u30fc\u30eb\n\n - Nullable\uff1cT\uff1e\u306e\u5224\u5225\u6642\u30dc\u30c3\u30af\u30b9\u5316\u3055\u305b\u306a\u3044\u3002\n - Nullable\uff1cT\uff1e\u3092\u9664\u304f\u5024\u578b\u306b\u5bfe\u3059\u308b\u8fd4\u5374\u5024\u306e\u5b9a\u6570\u5316\n\n\u5f53\u305f\u308a\u304c\u76ee\u7684\u306b\u306a\u3063\u3066\u307e\u3059\u3002\n\n# \u5b9f\u88c5\n\u5b9f\u88c5\u306b\u95a2\u3057\u3066\u306f\u4ee5\u4e0b\u306e\u901a\u308a\u3002\n\n```csharp:NullCheckExtensions.cs\n\n\tpublic static class NullCheckExtensions\n\t{\n\t\t//\u65b0\u578b\u306eNull/IsNull\n\t\tpublic static bool IsNull<T>(this T value) => NullChecker<T>.IsNull(value);\n\t\tpublic static bool IsNotNull<T>(this T value) => !IsNull(value);\n\t\t//\u5f93\u6765\u578b\u306e\u6c4e\u7528Null/IsNull\n\t\tpublic static bool TraditionalIsNull(this object obj) => obj == null;\n\t\tpublic static bool TraditionalIsNotNull(this object obj) => obj != null;\n\n\t\tprivate static class NullChecker<T>\n\t\t{\n\t\t\tprivate static readonly TypeType _type;\n\n\t\t\tstatic NullChecker()\n\t\t\t{\n\t\t\t\tvar type = typeof (T);\n\n\t\t\t\tif (type.IsGenericType && type.GetGenericTypeDefinition() == typeof (Nullable<>))\n\t\t\t\t{\n\t\t\t\t\t_type = TypeType.Nullable;\n\t\t\t\t}\n\t\t\t\telse if (type.IsValueType)\n\t\t\t\t{\n\t\t\t\t\t_type = TypeType.Value;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\t_type = TypeType.Reference;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tpublic static bool IsNull(T value)\n\t\t\t{\n\t\t\t\tswitch (_type)\n\t\t\t\t{\n\t\t\t\t\t//\u5024\u578b\u306a\u3089\u5e38\u306bFalse\u3092\u8fd4\u3059\u3002\n\t\t\t\t\tcase TypeType.Value:\n\t\t\t\t\t\treturn false;\n\n\t\t\t\t\t//\u53c2\u7167\u5f62\u306f\u90fd\u5ea6\u5224\u5b9a\n\t\t\t\t\tcase TypeType.Reference:\n\t\t\t\t\t\treturn value == null;\n\n\t\t\t\t\t//Nullable\u306fEqual\u30e1\u30bd\u30c3\u30c9\u547c\u3073\u51fa\u3059\u3002\n\t\t\t\t\tcase TypeType.Nullable:\n\t\t\t\t\t\treturn value.Equals(null);\n\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tthrow new InvalidOperationException(\"Unexpected type\");\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tprivate enum TypeType\n\t\t\t{\n\t\t\t\t//Nullable\u4ee5\u5916\u306e\u5024\u578b\n\t\t\t\tValue,\n\t\t\t\t//\u53c2\u7167\u5f62\n\t\t\t\tReference,\n\t\t\t\t//Null\u8a31\u5bb9\u5f62\n\t\t\t\tNullable\n\t\t\t}\n\t\t}\n\t}\n```\n\n## \u5b9f\u88c5\u306e\u304a\u304a\u307e\u304b\u306a\u89e3\u8aac\n\u3053\u3053\u3067\u3001\u30ad\u30e2\u306b\u306a\u308b\u306e\u306f\u3001\u5185\u90e8\u306bNullChecker\u3068\u3044\u3046StaticClass\u3092\u6301\u3063\u3066\u3044\u308b\u70b9\u3068\u306a\u308a\u307e\u3059\u3002\n\u30b3\u30ec\u306f\u4f55\u3092\u3057\u3066\u308b\u304b\u3068\u3044\u3046\u3068\u3001NullChecker\u306f\u30b8\u30a7\u30cd\u30ea\u30c3\u30af\u578b\u306a\u306e\u3067\u3001T\u306e\u7a2e\u985e\u3060\u3051\u30af\u30e9\u30b9\u304c\u751f\u6210\u3055\u308c\u308b\u3053\u3068\u306b\u306a\u308a\u3001\n\u751f\u6210\u6bce\u306bNullCheker\u306e\u9759\u7684\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u306b\u3088\u3063\u3066\u3001\u6240\u4e0e\u306eT\u304c\u3069\u306e\u3088\u3046\u578b\u306a\u306e\u304b\u3001\u3088\u308a\u5177\u4f53\u7684\u306b\u306f\u3001\n\n - Nullable\uff1c\uff1e\u578b\n - \u5024\u578b\n - \u53c2\u7167\u578b\n\n\u3092\u5224\u5b9a\u3057\u3001IsNull\u30e1\u30bd\u30c3\u30c9\u306e\u547c\u3073\u51fa\u3057\u6642\u306b\u3001\u304b\u3064\u3066\u306e\u3088\u3046\u306bObject\u578b\u3078\u306e\u30ad\u30e3\u30b9\u30c8\u7121\u3057\u306b\u5224\u5b9a\u3092\u5b9f\u884c\u53ef\u80fd\u306b\u3057\u3066\u3044\u307e\u3059\u3002\n\u307e\u305f\u3001\u9759\u7684\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u306f\u3001[\u9759\u7684\u30b3\u30f3\u30b9\u30c8\u30e9\u30af\u30bf\u30fc (C# \u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0 \u30ac\u30a4\u30c9)](https://msdn.microsoft.com/ja-jp/library/k9x6w0hc.aspx)\u8a18\u8f09\u306e\u901a\u308a\u3001\u30a2\u30d7\u30ea\u30b1\u30fc\u30b7\u30e7\u30f3\u306e\u30e9\u30a4\u30d5\u30b5\u30a4\u30af\u30eb\u306e\u4e2d\u3067\u5fc5\u8981\u3067\u3042\u308c\u30701\u56de\u3060\u3051\u5b9f\u884c\u3055\u308c\u308b\u306e\u3067\u3001\u968f\u6642\u5224\u5b9a\u3088\u308a\u7279\u306b\u5024\u578b\u306e\u5224\u5b9a\u306b\u5927\u304d\u306a\u30a2\u30c9\u30d0\u30f3\u30c7\u30fc\u30b8\u3092\u6301\u3064\u3053\u3068\u306b\u306a\u308a\u307e\u3059\u3002\n\n## Nullable\u3092\u7279\u6b8a\u6271\u3044\u3057\u3066\u3044\u308b\u308f\u3051\nNullable\u306b\u5bfe\u3057\u3066\u306f\u3001\u5b9f\u88c5\u3092\u898b\u308c\u3070\u308f\u304b\u308b\u3068\u304a\u308a\u3001\u7279\u6b8a\u6271\u3044\u3092\u884c\u3063\u3066\u3044\u307e\u3059\u3002\u3053\u308c\u306f\u3001\u6587\u5b57\u901a\u308a\u3001Nullable\u306f\u5024\u578b\u304b\u3064Null\u3092\u8a31\u5bb9\u3067\u304d\u308b\u306e\u3067\u3001\u4e00\u822c\u7684\u306a\u5024\u578b\u306e\u30b3\u30f3\u30c6\u30ad\u30b9\u30c8\u3067\u5224\u5b9a\u3057\u3066\u3057\u307e\u3046\u3068\u3001HasValue\u304cfalse\u3067\u3042\u3063\u3066\u3082\u3001IsNull\u30e1\u30bd\u30c3\u30c9\u304ctrue\u306b\u306a\u3063\u3066\u3057\u307e\u3046\u306e\u3067\u3001\u3053\u306e\u70b9\u3092\u4f55\u3068\u304b\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3057\u305f\u3002\n\u5bfe\u7b56\u3068\u3057\u3066\u3001Equals\u30e1\u30bd\u30c3\u30c9\u3092\u660e\u793a\u7684\u306b\u547c\u3073\u51fa\u3059\u3053\u3068\u306b\u3088\u308a\u3001\u30dc\u30c3\u30af\u30b9\u5316\u3092\u7d4c\u308b\u3053\u3068\u7121\u304f\u5224\u5b9a\u3092\u53ef\u80fd\u306b\u3057\u3066\u3044\u307e\u3059\u3002\n\n## \u53c2\u7167\u578b\u3067Equals\u30e1\u30bd\u30c3\u30c9\u3092\u5229\u7528\u3059\u308b\u3068\u9177\u3044\u76ee\u306b\u906d\u3046\n\n```csharp\ncase TypeType.Reference:\n\treturn value == null;\n```\n\u3053\u306e\u90e8\u5206\u3092\u3001\u4ee5\u4e0b\u306e\u3088\u3046\u306b\u66f8\u304d\u63db\u3048\u308b\u3068\u3001\n\n```csharp\ncase TypeType.Reference:\n\treturn value.Equals(null);\n```\n\n\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u30b7\u30ca\u30ea\u30aa\u3067\u3001StackOverFlow\u304c\u767a\u751f\u3059\u308b\u306e\u3067\u3001\u6ce8\u610f\u304c\u5fc5\u8981\u3067\u3059\u3002\n\n```csharp\n\n\tpublic class RecursiveCall\n\t{\n\t\tpublic int Value { get; set; }\n\n\t\tpublic override bool Equals(object obj)\n\t\t{\n\t\t\tvar tmp = obj as RecursiveCall;\n\n\t\t\tif (tmp == null) return false;\n\n\t\t\t//\u3053\u3053\u3067OpEqual\u304c\u547c\u3070\u308c\u3066\u3001\u7121\u9650\u518d\u5e30\u304c\u5b8c\u6210\u3059\u308b\u3002\n\t\t\treturn tmp == this;\n\t\t}\n\n\t\tpublic static bool operator ==(RecursiveCall x, RecursiveCall y)\n\t\t{\n\t\t\t//\u3053\u3053\u3067\u3001Equals\u304c\u547c\u3070\u308c\u308b\u3002\n\t\t\tif (x.IsNull() && y.IsNull()) return true;\n\t\t\treturn (y.IsNotNull()) && (x.IsNotNull()) && (x.Value == y.Value);\n\t\t}\n\n\t\tpublic static bool operator !=(RecursiveCall x, RecursiveCall y) => !(x == y);\n\t}\n\n```\n\n# \u3069\u308c\u304f\u3089\u3044\u901f\u304f\u306a\u3063\u305f\u304b\uff1f\n\u6700\u5f8c\u306b\u3001\u30d1\u30d5\u30a9\u30fc\u30de\u30f3\u30b9\u304c\u3069\u306e\u7a0b\u5ea6\u6539\u5584\u3057\u305f\u306e\u304c\u691c\u8a3c\u3057\u3066\u307f\u305f\u3044\u3068\u601d\u3044\u307e\u3059\u3002\n\n\u307e\u305a\u6700\u521d\u306b\u3001\n\n- Nullable<int>\n- string\n- int\n\n\u578b\u306eIsNotNull\u3092\u5224\u5b9a\u3055\u305b\u3066\u307f\u307e\u3057\u305f\u3002\n\n```csharp\n\n\t\tprivate static void Main()\n\t\t{\n\n\t\t\tconst int seed = 42;\n\t\t\tconst int count = 25000000;\n\n\t\t\tvar chrono = new Stopwatch();\n\n\t\t\tvar rnd = MiscExtensions.GetRandomSequence(seed, count);\n\n\t\t\t// \u4eca\u56de\u65b0\u305f\u306b\u5b9f\u88c5\u3057\u305f\u65b9\u5f0f\u3002\n\t\t\tchrono.Start();\n\t\t\tvar cnt = GcCounter.GetCurrent();\n\n\t\t\tvar nullableCount = rnd.Select(x => x%3 == 0 ? null : new int?(x)).Count(x => x.IsNotNull());\n\t\t\tvar stringCount = rnd.Select(x => x%3 == 0 ? null : x.ToString()).Count(x => x.IsNotNull());\n\t\t\tvar intCount = rnd.Select(x => x).Count(x => x.IsNotNull());\n\n\t\t\tchrono.Stop();\n\t\t\tcnt = GcCounter.GetCurrent() - cnt;\n\n\t\t\tConsole.WriteLine(\"NewMethod\");\n\t\t\tConsole.WriteLine($\"Nullable:{nullableCount} String:{stringCount} Integer:{intCount}\");\n\t\t\tConsole.WriteLine($\"Elapsed:{chrono.Elapsed}\");\n\t\t\tConsole.WriteLine(cnt.ToString());\n\n\t\t\tConsole.WriteLine();\n\t\t\tConsole.WriteLine();\n\n\n\t\t\t//\u5f93\u6765\u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306b\u30ad\u30e3\u30b9\u30c8\u3059\u308b\u65b9\u5f0f\n\t\t\trnd = MiscExtensions.GetRandomSequence(seed, count);\n\t\t\tchrono.Restart();\n\t\t\tcnt = GcCounter.GetCurrent(true);\n\n\t\t\tnullableCount = rnd.Select(x => x%3 == 0 ? null : new int?(x)).Count(x => x.TraditionalIsNotNull());\n\t\t\tstringCount = rnd.Select(x => x % 3 == 0 ? null : x.ToString()).Count(x => x.TraditionalIsNotNull());\n\t\t\tintCount = rnd.Select(x => x).Count(x => x.TraditionalIsNotNull());\n\n\t\t\tchrono.Stop();\n\t\t\tcnt = GcCounter.GetCurrent() - cnt;\n\n\t\t\tConsole.WriteLine(\"TraditionalMethod\");\n\t\t\tConsole.WriteLine($\"Nullable:{nullableCount} String:{stringCount} Integer:{intCount}\");\n\t\t\tConsole.WriteLine($\"Elapsed:{chrono.Elapsed}\");\n\t\t\tConsole.WriteLine(cnt.ToString());\n\t\t}\n```\n\u3053\u306e\u30b5\u30f3\u30d7\u30eb\u306e\u7d50\u679c\u306f\u3001\u30c7\u30d0\u30c3\u30ac\u30a2\u30bf\u30c3\u30c1\u7121\u3057\u306e\u30ea\u30ea\u30fc\u30b9\u30d3\u30eb\u30c9\u3067\u3001\u4ee5\u4e0b\u306e\u901a\u308a\u3067\u3057\u305f\u3002\n\nNewMethod\nNullable:16671891 String:16664383 Integer:25000000\nElapsed:00:00:05.1121741\nGen0:135  Gen1:0  Gen2:0  TTL:135\n\n\nTraditionalMethod\nNullable:16671891 String:16664383 Integer:25000000\nElapsed:00:00:06.3988913\nGen0:254  Gen1:0  Gen2:0  TTL:254\n\n\u30d1\u30d5\u30a9\u30fc\u30de\u30f3\u30b9\u306b\u3001\u4e00\u5fdc\u5dee\u304c\u4ed8\u3044\u3066\u3044\u308b\u306e\u304c\u308f\u304b\u308a\u307e\u3059\u3002\n\n\u3055\u3089\u306b\u3001\u4eca\u56de\u30c1\u30e5\u30fc\u30cb\u30f3\u30b0\u3092\u884c\u3063\u305f\u3001\u5024\u578b\u3001Nullable\u578b\u306b\u52d5\u4f5c\u3092\u7d5e\u3063\u305f\u4ee5\u4e0b\u306e\u30b5\u30f3\u30d7\u30eb\u3092\u4f5c\u308a\u30c6\u30b9\u30c8\u3057\u3066\u307f\u305f\u5834\u5408\u3001\n\n```csharp\n\n\t\tprivate static void Main()\n\t\t{\n\n\t\t\tconst int seed = 42;\n\t\t\tconst int count = 25000000;\n\n\t\t\tvar chrono = new Stopwatch();\n\n\t\t\tvar rnd = MiscExtensions.GetRandomSequence(seed, count);\n\n\t\t\t// \u4eca\u56de\u65b0\u305f\u306b\u5b9f\u88c5\u3057\u305f\u65b9\u5f0f\u3002\n\t\t\tchrono.Start();\n\t\t\tvar cnt = GcCounter.GetCurrent();\n\n\t\t\tvar nullableCount = rnd.Select(x => x%3 == 0 ? null : new int?(x)).Count(x => x.IsNotNull());\n\t\t\tvar intCount = rnd.Select(x => x).Count(x => x.IsNotNull());\n\n\t\t\tchrono.Stop();\n\t\t\tcnt = GcCounter.GetCurrent() - cnt;\n\n\t\t\tConsole.WriteLine(\"NewMethod\");\n\t\t\tConsole.WriteLine($\"Nullable:{nullableCount} Integer:{intCount}\");\n\t\t\tConsole.WriteLine($\"Elapsed:{chrono.Elapsed}\");\n\t\t\tConsole.WriteLine(cnt.ToString());\n\n\t\t\tConsole.WriteLine();\n\t\t\tConsole.WriteLine();\n\n\n\t\t\t//\u5f93\u6765\u306e\u30aa\u30d6\u30b8\u30a7\u30af\u30c8\u306b\u30ad\u30e3\u30b9\u30c8\u3059\u308b\u65b9\u5f0f\n\t\t\trnd = MiscExtensions.GetRandomSequence(seed, count);\n\t\t\tchrono.Restart();\n\t\t\tcnt = GcCounter.GetCurrent(true);\n\n\t\t\tnullableCount = rnd.Select(x => x%3 == 0 ? null : new int?(x)).Count(x => x.TraditionalIsNotNull());\n\t\t\tintCount = rnd.Select(x => x).Count(x => x.TraditionalIsNotNull());\n\n\t\t\tchrono.Stop();\n\t\t\tcnt = GcCounter.GetCurrent() - cnt;\n\n\t\t\tConsole.WriteLine(\"TraditionalMethod\");\n\t\t\tConsole.WriteLine($\"Nullable:{nullableCount} Integer:{intCount}\");\n\t\t\tConsole.WriteLine($\"Elapsed:{chrono.Elapsed}\");\n\t\t\tConsole.WriteLine(cnt.ToString());\n\t\t}\n```\n\nNewMethod\nNullable:16671891 Integer:25000000\nElapsed:00:00:01.7142565\nGen0:0  Gen1:0  Gen2:0  TTL:0\n\n\nTraditionalMethod\nNullable:16671891 Integer:25000000\nElapsed:00:00:03.3442754\nGen0:119  Gen1:0  Gen2:0  TTL:119\n\n\u3088\u308a\u30d1\u30d5\u30a9\u30fc\u30de\u30f3\u30b9\u306e\u5dee\u7570\u304c\u9855\u8457\u306b\u306a\u308a\u307e\u3059\u3002\n\n# \u307e\u3068\u3081\n\u4ee5\u524d\u3001\u4e0d\u5099\u304c\u6709\u308a\u3064\u3064\u3082\u305d\u308c\u4ee5\u4e0a\u3067\u304d\u306a\u3044\u3068\u8003\u3048\u3066\u3044\u305f\u3001\u5024\u578b\u306eIsNull/IsNotNull\u5224\u5b9a\u3092\u6bd4\u8f03\u7684\u3046\u307e\u304f\u634c\u3051\u305f\u304b\u306a\u3068\u601d\u3044\u307e\u3059\u3002\n\u305d\u306e\u969b\u3001Nullable\u304c\u554f\u984c\u306b\u306a\u308a\u307e\u3057\u305f\u304c\u3001\u30b3\u30ec\u3082\u53c8\u3001Equals\u30e1\u30bd\u30c3\u30c9\u306e\u547c\u3073\u51fa\u3057\u3067\u30de\u30cd\u30fc\u30b8\u30d2\u30fc\u30d7\u3092\u4f7f\u3046\u3053\u3068\u7121\u304f\u5224\u5b9a\u53ef\u80fd\u306b\u306a\u308a\u307e\u3057\u305f\u3002\n\n\u6b21\u671fC#\u3067\u5b9f\u88c5\u304c\u4e88\u5b9a\u3055\u308c\u3066\u3044\u308b\u3001Null\u975e\u8a31\u5bb9\u306e\u53c2\u7167\u578b\u304c\u8ffd\u52a0\u3055\u308c\u305f\u5834\u5408\u306f\u3001\u5225\u9014\u8abf\u6574\u304c\u5fc5\u8981\u3068\u306a\u308b\u3068\u601d\u3044\u307e\u3059\u3002[^1]\n\n# \u8272\u3005\u306a\u5b9f\u88c5\n\u672c\u30a8\u30f3\u30c8\u30ea\u3092\u30a2\u30c3\u30d7\u5f8c\u3001[@haxe](https://twitter.com/haxe)\u5148\u751f\u3068\u3001[@yfakariya](https://twitter.com/yfakariya)\u5148\u751f\u304b\u3089\u3001\u5225\u5b9f\u88c5\u306e\u3054\u63d0\u6848\u3092\u9802\u3044\u305f\u306e\u3067\u3001\n\u3053\u3053\u306b\u7d39\u4ecb\u3055\u305b\u3066\u9802\u304d\u307e\u3059\u3002\n\n\u3053\u306e\u5834\u3092\u304a\u501f\u308a\u3057\u3066\u3001\u4e21\u5148\u751f\u306b\u304a\u793c\u7533\u3057\u4e0a\u3052\u307e\u3059\u3002\n\n##yfakariya\u5148\u751f\u306e\u5b9f\u88c5\n\u30aa\u30ea\u30b8\u30ca\u30eb\u306f[\u3053\u3061\u3089](https://gist.github.com/yfakariya/4abca54df34e24f1757c)\n\n```csharp\nsing System;\n\nstatic class Program\n{\n\tstatic void Main()\n\t{\n\t\tTest( \"a\" );\n\t\tTest( 1 );\n\t\tTest<int?>( 1 );\n\t}\n\n\tstatic void Test<T>( T nonNull)\n\t{\n\t\tConsole.WriteLine( \"IsNull<{0}>(default({0})) :{1}\", typeof( T ).Name, NullChecker<T>.IsNull( default( T ) ) );\n\t\tConsole.WriteLine( \"IsNull<{0}>(nonNull) :{1}\", typeof( T ).Name, NullChecker<T>.IsNull( nonNull ) );\n\t}\n}\n\ninternal static class NullChecker<T>\n{\n\tprivate static readonly Func<T, bool> _isNull =\n\t\tInitializeIsNull();\n\n\tprivate static Func<T, bool> InitializeIsNull()\n\t{\n\t\tif ( !typeof( T ).IsValueType )\n\t\t{\n\t\t\treturn value => value == null;\n\t\t}\n\n\t\tvar nullableUnderlyingType = Nullable.GetUnderlyingType( typeof( T ) );\n\t\tif ( nullableUnderlyingType != null )\n\t\t{\n\t\t\treturn\n\t\t\t\t( Func<T, bool> )\n\t\t\t\ttypeof( NullableNullChecker<> )\n\t\t\t\t.MakeGenericType( nullableUnderlyingType )\n\t\t\t\t.GetMethod( \"IsNull\" )\n\t\t\t\t.CreateDelegate( typeof( Func<T, bool> ) );\n\t\t}\n\n\t\treturn _ => false;\n\t}\n\n\tpublic static bool IsNull( T value )\n\t{\n\t\treturn _isNull( value );\n\t}\n}\n\ninternal static class NullableNullChecker<T>\n\twhere T : struct\n{\n\tpublic static bool IsNull( Nullable<T> value )\n\t{\n\t\treturn !value.HasValue;\n\t}\n}\n```\n\n\u52d5\u7684\u306b\u3001Nullable.HasValue\u30d7\u30ed\u30d1\u30c6\u30a3\u3092\u547c\u3073\u51fa\u3059\u5b9f\u88c5\u3068\u306a\u3063\u3066\u304a\u308a\u307e\u3059\u3002\n\n##haxe\u5148\u751f\u306e\u5b9f\u88c5\n\n\u30aa\u30ea\u30b8\u30ca\u30eb\u306f[\u3053\u3061\u3089](https://twitter.com/haxe/status/659373478026448896)\n**\u5143\u5b9f\u88c5\u306eNullChecker<T>**\u306e\u307f\u629c\u7c8b\n\n```csharp\n\n\tstatic class NullableChecker<T>\n\t{\n\t\tprivate static readonly bool IsValueType;\n\n\t\tstatic NullableChecker()\n\t\t{\n\t\t\tType type = typeof (T);\n\t\t\tIsValueType = type.IsValueType && Nullable.GetUnderlyingType(type) == null;\n\t\t}\n\n\t\tpublic static bool IsNull(T value) => IsValueType ? false : value == null;\n\n\t}\n```\n\nSwitch\u3092\u30b7\u30f3\u30d7\u30eb\u3067\u30af\u30fc\u30eb\u306a\u6761\u4ef6\u5224\u5b9a\u306b\u306a\u3055\u3063\u3066\u3044\u307e\u3059\u3002\n\n\n\n\n\n[^1]: \u3068\u306f\u3044\u3048\u3001\u591a\u5206\u52b9\u7387\u3092\u5225\u3068\u3059\u308c\u3070\u52d5\u304f\u3068\u306f\u601d\u3044\u307e\u3059\u3002\n", "tags": ["C#6.0", ".NET"]}