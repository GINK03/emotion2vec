{"tags": ["Linux", "\u4eee\u60f3\u8a18\u61b6", "kernel", "kernelvm"], "context": " \u3053\u306e\u8a18\u4e8b\u306f\u6700\u7d42\u66f4\u65b0\u65e5\u304b\u30891\u5e74\u4ee5\u4e0a\u304c\u7d4c\u904e\u3057\u3066\u3044\u307e\u3059\u3002\n\n\u524d\u7f6e\u304d\n\u524d\u56de\u306e\u8cc7\u6599\u306f\u3001Linux\u3082\u304f\u3082\u304f\u4f1a\u3068\u3044\u3046\u52c9\u5f37\u4f1a\u3067\u4f1a\u793e\u5e30\u308a\u306b\u79cb\u8449\u539f\u3067\u30bd\u30fc\u30b9\u8aad\u3093\u3067\u6295\u7a3f\u3057\u307e\u3057\u305f\u3002\n\u3053\u306e\u8cc7\u6599\u3082\u5927\u90e8\u5206\u306fLinux\u3082\u304f\u3082\u304f\u4f1a\u3067\u66f8\u304d\u307e\u3057\u305f\u3002\n\n\u524d\u56de\u306e\u3042\u3089\u307e\u3057\u3068\u4eca\u56de\u898b\u3066\u3044\u304f\u3068\u3053\u308d\n\u524d\u56de\u3001\u30ab\u30fc\u30cd\u30eb\u7a7a\u9593\u306fvmalloc\u5411\u3051\u3068\u601d\u308f\u308c\u308b\u30e1\u30e2\u30ea\u9818\u57df\u3092\u5883\u306b\u4eee\u60f3\u30a2\u30c9\u30ec\u30b9 - \u7269\u7406\u30a2\u30c9\u30ec\u30b9\u306e\u30cf\u30f3\u30c9\u30ea\u30f3\u30b0\u304c\u7570\u306a\u308a\u305d\u3046\u3060\u3068\u3044\u3046\u3068\u3053\u308d\u3092\u898b\u3066\u304d\u307e\u3057\u305f\u3002\n\u3055\u3066\u3001\u4eca\u56de\u306fvmalloc()\u4ee5\u964d\u306e\u4eee\u60f3 - \u7269\u7406\u30a2\u30c9\u30ec\u30b9\u306e\u5909\u63db\u306f\u3069\u3046\u306a\u3063\u3066\u3044\u308b\u306e\u304b\u3001\u3053\u3053\u3092\u898b\u3066\u307f\u307e\u3057\u3087\u3046\u3002\n\nvmalloc\u3092\u6b69\u3044\u3066\u307f\u308b\nvmalloc\u3068\u3044\u3046\u3053\u3068\u306f\u3001\u305d\u308c\u3063\u307d\u3044\u30bd\u30fc\u30b9\u3092\u63a2\u305b\u3070\u826f\u3044\u3084\u3002\u3048\u3044\u3002\u3068\u3044\u3046\u3053\u3068\u3067mm/vmalloc.c\u3092\u8aad\u307f\u307e\u3059\u3002\n\u3059\u308b\u3068\u3001\u4ee5\u4e0b\u306e\u95a2\u6570\u304c\u76ee\u306b\u6b62\u307e\u308a\u307e\u3059\u3002\n\nmm/vmalloc.c\nunsigned long vmalloc_to_pfn(const void *vmalloc_addr)\n{\n  return page_to_pfn(vmalloc_to_page(vmalloc_addr));\n}\nEXPORT_SYMBOL(vmalloc_to_pfn);\n\n\nvmalloc_to_page()\u304c\u30da\u30fc\u30b8\u69cb\u9020\u4f53\u306e\u30a2\u30c9\u30ec\u30b9\u3092\u8fd4\u3057\u3001\u305d\u308c\u3092page_to_pfn\u3067\u7269\u7406\u30d5\u30ec\u30fc\u30e0\u756a\u53f7\u306b\u5909\u63db\u3059\u308b\u306e\u3060\u308d\u3046\u3002\u305d\u308c\u3067\u306fvmalloc_to_page()\u3092\u898b\u3066\u307f\u307e\u3057\u3087\u3046\u3002\n\nmm/vmalloc.c\nstruct page *vmalloc_to_page(const void *vmalloc_addr)\n{\n  unsigned long addr = (unsigned long) vmalloc_addr;\n  struct page *page = NULL;\n  pgd_t *pgd = pgd_offset_k(addr);\n\n  /*\n   * XXX we might need to change this if we add VIRTUAL_BUG_ON for\n   * architectures that do not vmalloc module space\n   */\n  VIRTUAL_BUG_ON(!is_vmalloc_or_module_addr(vmalloc_addr));\n\n  if (!pgd_none(*pgd)) {\n    pud_t *pud = pud_offset(pgd, addr);\n    if (!pud_none(*pud)) {\n      pmd_t *pmd = pmd_offset(pud, addr);\n      if (!pmd_none(*pmd)) {\n        pte_t *ptep, pte;\n\n        ptep = pte_offset_map(pmd, addr);\n        pte = *ptep;\n        if (pte_present(pte))\n          page = pte_page(pte);\n        pte_unmap(ptep);\n      }\n    }\n  }\n  return page;\n}\nEXPORT_SYMBOL(vmalloc_to_page);\n\n\n\u5642\u306b\u306f\u805e\u3044\u3066\u3044\u307e\u3057\u305f\u304c\u3001\u58ee\u89b3\u3067\u3059\u306d\u3002\n\u30c7\u30fc\u30bf\u69cb\u9020\u3068\u3057\u3066\u306f\u3001PGD - PUD - PMD - PTE\u306e4\u6bb5\u968e\u69cb\u6210\u306e\u30da\u30fc\u30b8\u30c6\u30fc\u30d6\u30eb\u306b\u306a\u3063\u3066\u3044\u308b\u3088\u3046\u306b\u898b\u3048\u307e\u3059\u3002\n\u30da\u30fc\u30b8\u30c6\u30fc\u30d6\u30eb\u3068\u3044\u3046\u3053\u3068\u3092\u8e0f\u307e\u3048\u308b\u3068\u3001\u4eee\u60f3\u30a2\u30c9\u30ec\u30b9\u3092\u5206\u5272\u3057\u3066\u3001\u5206\u5272\u3059\u308b\u3053\u3068\u306b\u3088\u3063\u3066\u751f\u6210\u3057\u305f\u5024\u3092\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u3068\u3057\u3066\u30014\u6bb5\u306e\u30c6\u30fc\u30d6\u30eb\u3092\u4e0b\u308a\u3001\u6700\u5f8c\u306ePTE\u306b\u304b\u304b\u308c\u3066\u3044\u308b\u7269\u7406\u30a2\u30c9\u30ec\u30b9\u3092\u53d6\u5f97\u3059\u308b\u3068\u601d\u308f\u308c\u307e\u3059\u3002\n(x86\u306e\u30da\u30fc\u30b8\u30c6\u30fc\u30d6\u30eb\u306f\u307e\u3055\u306b\u3053\u3046\u306a\u3063\u3066\u3044\u307e\u3059\u306d\u3002)\n\u3055\u3066\u3001\u5b9f\u969b\u306e\u3068\u3053\u308d\u306f\u3069\u3046\u306a\u3063\u3066\u3044\u308b\u306e\u304b\u3001\u305d\u308c\u3092\u898b\u307e\u3057\u3087\u3046\u3002\n\nx86(32bit)\u306ePGE\u4ee5\u4e0b\u306e\u30c7\u30fc\u30bf\u306e\u4f7f\u308f\u308c\u65b9\n\u7d50\u8ad6\u304b\u3089\n\u8a00\u3046\u3068\u3001\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u69cb\u6210\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u3002\n(x86(32bit/PAE\u306a\u3057)\n\n(x86(32bit/PAE\u3042\u308a)\n\n\u3064\u307e\u308a\u3001x86\u30a2\u30fc\u30ad\u30c6\u30af\u30c1\u30e3\u306e\u30da\u30fc\u30b8\u30c6\u30fc\u30d6\u30eb\u305d\u306e\u307e\u3093\u307e\u3067\u3059\u3002\n\u4f55\u3068\u8a00\u3046\u3053\u3068\u306f\u306a\u3044\u3001\u30da\u30fc\u30b8\u30c6\u30fc\u30d6\u30eb\u3092\u898b\u3066\u3001\u4eee\u60f3\u30a2\u30c9\u30ec\u30b9\u3068\u7269\u7406\u30a2\u30c9\u30ec\u30b9\u306e\u5909\u63db\u3092\u3057\u3066\u3044\u308b\u3060\u3051\u3067\u3059\u3002\n(\u826f\u3044\u5b50\u306e\u307f\u3093\u306a\u306f\u3001Intel SDM\u306b\u76ee\u3092\u901a\u3057\u3066\u307f\u3088\u3046)\n\u300c\u3067\u306f\u3001\u4f7f\u308f\u308c\u3066\u3044\u306a\u3044\u30c6\u30fc\u30d6\u30eb(PUD\u3068\u304b)\u306f\u3069\u3046\u6271\u3063\u3066\u3044\u308b\u3093\u3060\uff1f\u300d\u3068\u3044\u3046\u4eba\u306f\u3001\u3053\u306e\u6587\u66f8\u306e\u6700\u5f8c\u306bAppendix\u3068\u3057\u3066\u6982\u8981\u3092\u8f09\u305b\u307e\u3057\u305f\u306e\u3067\u3001\u53c2\u8003\u306b\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n\u672c\u6587\u3067\u306f\u3001\u9014\u4e2d\u306f\u7701\u7565\u3057\u3001pte\u306e\u3068\u3053\u308d\u3060\u3051\u898b\u3066\u307f\u307e\u3057\u3087\u3046\u3002\n\ninclude/asm/pgtable.h\n#define pte_val(x)  native_pte_val(x)\n/* \u7565 */\nstatic inline unsigned long pte_pfn(pte_t pte)\n{\n  return (pte_val(pte) & PTE_PFN_MASK) >> PAGE_SHIFT;\n}\n/* \u7565 */\n#define pte_page(pte) pfn_to_page(pte_pfn(pte))\n\n\n\u8981\u3059\u308b\u306b\u3001PTE\u306e\u4e2d\u8eab\u304b\u3089\u7269\u7406\u30a2\u30c9\u30ec\u30b9\u306b\u8a72\u5f53\u3059\u308b\u3068\u3053\u308d\u3092\u629c\u304d\u51fa\u3057\u3066\u3044\u307e\u3059\u3002\n\u3061\u306a\u307f\u306b\u3001\u6b8b\u308a\u306e\u5b9a\u7fa9\u306f\u4ee5\u4e0b\u306e\u3068\u304a\u308a\u3067\u3059\u3002\n\narch/x86/include/asm/pgtable_types.h\n/* PTE_PFN_MASK extracts the PFN from a (pte|pmd|pud|pgd)val_t */\n#define PTE_PFN_MASK    ((pteval_t)PHYSICAL_PAGE_MASK)\nstatic inline pteval_t native_pte_val(pte_t pte)\n{\n  return pte.pte;\n}\n\n\n\narch/x86/include/asm/page_types.h\n#define PAGE_SHIFT  12\n#define PAGE_SIZE (_AC(1,UL) << PAGE_SHIFT)\n#define PAGE_MASK (~(PAGE_SIZE-1))\n\n#define __PHYSICAL_MASK   ((phys_addr_t)((1ULL << __PHYSICAL_MASK_SHIFT) - 1    ))\n/* \u7565 */\n#define PHYSICAL_PAGE_MASK  (((signed long)PAGE_MASK) & __PHYSICAL_MASK)\n\n\n\narch/x86/include/asm/page_32_types.h\n#ifdef CONFIG_X86_PAE\n/* 44=32+12, the limit we can fit into an unsigned long pfn */\n#define __PHYSICAL_MASK_SHIFT 44\n#define __VIRTUAL_MASK_SHIFT  32\n\n#else  /* !CONFIG_X86_PAE */\n#define __PHYSICAL_MASK_SHIFT 32\n#define __VIRTUAL_MASK_SHIFT  32\n#endif  /* CONFIG_X86_PAE */\n\n\n\u3053\u3053\u307e\u3067\u898b\u305f\u3068\u304a\u308a\u3001x86\u306e\u5834\u5408\u306f\u3001\u305d\u306e\u307e\u307e\u3053\u306e\u30c7\u30fc\u30bf\u69cb\u9020\u304c\u751f\u304b\u3055\u308c\u3066\u3044\u307e\u3059\u306d\u3002\nPTE\u306e\u4e2d\u8eab\u3092\u898b\u308b\u7b87\u6240\u306a\u3069\u306f\u3001CPU\u30a2\u30fc\u30ad\u30c6\u30af\u30c1\u30e3\u4f9d\u5b58\u306e\u51e6\u7406\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u306e\u3067\u3001\u4ed6\u306eCPU\u30a2\u30fc\u30ad\u30c6\u30af\u30c1\u30e3\u3067\u3082\u3053\u306e\u30c7\u30fc\u30bf\u69cb\u9020\u3092\u4f7f\u3048\u308b\u308f\u3051\u3067\u3059\u3002\n(\u3082\u3061\u308d\u3093\u3001\u30a2\u30fc\u30ad\u30c6\u30af\u30c1\u30e3\u306e\u4e2d\u306b\u306f\u591a\u5c11\u7121\u7406\u77e2\u7406\u611f\u304c\u51fa\u3066\u3057\u307e\u3046\u3082\u306e\u3082\u3042\u308b\u306e\u3067\u3057\u3087\u3046\u304b?ARM\u3082\u30da\u30fc\u30b8\u30c6\u30fc\u30d6\u30eb\u65b9\u5f0f\u306a\u306e\u3067\u3001\u3053\u306e\u30c7\u30fc\u30bf\u5f62\u5f0f\u3067\u3082\u7121\u7406\u306f\u306a\u3044\u304b\u3068\u601d\u3044\u307e\u3059)\n\u307e\u308b\u3063\u3068CPU\u30a2\u30fc\u30ad\u30c6\u30af\u30c1\u30e3\u306e\u51e6\u7406\u3068\u30c7\u30fc\u30bf\u69cb\u9020\u304c\u5206\u96e2\u3055\u308c\u305fBSD\u3068\u7570\u306a\u308b\u3053\u306e\u5b9f\u88c5\u3001\u65b0\u9bae\u3067\u3059\u3002\n* \u5ff5\u306e\u70ba\u306b\u66f8\u304d\u307e\u3059\u304c\u3001\u3069\u3061\u3089\u306e\u8a2d\u8a08\u3082\u3042\u308a\u3060\u3068\u601d\u3044\u307e\u3059\u3057\u3001\u512a\u52a3\u3092\u3064\u3051\u308b\u6c17\u306f\n  \u3042\u308a\u307e\u305b\u3093\u3002\n\u4f55\u3068\u306a\u304f\u4eee\u60f3\u8a18\u61b6\u5b9f\u88c5\u306e\u96f0\u56f2\u6c17\u304c\u5c11\u3057\u305a\u3064\u3064\u304b\u3081\u3066\u304d\u307e\u3057\u305f\u3002\n\n\u6b21\u56de\u306e\u4e88\u5b9a\n\u6b21\u56de\u306f\u3001\u30e1\u30e2\u30ea\u30de\u30c3\u30d7\u3068\u3044\u3048\u3070\u3053\u306e\u30b7\u30b9\u30c6\u30e0\u30b3\u30fc\u30eb\u3001mmap()\u3092\u8aad\u3093\u3067\u307f\u308b\u4e88\u5b9a\u3067\u3059\u3002\n\nAppendix\n\u6700\u521d\u306f\u3001pgd_offset_k()\u3092\u898b\u3066\u307f\u307e\u3057\u3087\u3046\u3002\n\narch/x86/include/asm/pgtable.h\n#define pgd_index(address) (((address) >> PGDIR_SHIFT) & (PTRS_PER_PGD - 1))\n\n/*\n * pgd_offset() returns a (pgd_t *)\n * pgd_index() is used get the offset into the pgd page's array of \u3000t's;\n */\n#define pgd_offset(mm, address) ((mm)->pgd + pgd_index((address)))\n/*\n * a shortcut which implies the use of the kernel's pgd, instead\n * of a process's\n */\n#define pgd_offset_k(address) pgd_offset(&init_mm, (address))\n\n\nstruct mm\u306e\u4e2d\u306epgd\u304c\u30d7\u30ed\u30bb\u30b9\u306e\u30a2\u30c9\u30ec\u30b9\u7a7a\u9593\u3092\u8868\u73fe\u3059\u308b\u30da\u30fc\u30b8\u30c7\u30a3\u30ec\u30af\u30c8\u30ea(Linux\u306e\u5b9f\u88c5\u3060\u3068PGD)\u3092\u6307\u3057\u3066\u3044\u308b\u3053\u3068\u3001\u305d\u3057\u3066\u3001\u30ab\u30fc\u30cd\u30eb\u306e\u30a2\u30c9\u30ec\u30b9\u7a7a\u9593\u3092\u8868\u3059struct mm\u306f\u3069\u3046\u3084\u3089init_mm\u306e\u3088\u3046\u3060\u3068\u3044\u3046\u3053\u3068\u304c\u8aad\u307f\u53d6\u308c\u307e\u3059\u3002\n\u6b21\u306b\u3001\u4ee5\u4e0b\u306e\u30d8\u30c3\u30c0\u3092\u898b\u307e\u3057\u3087\u3046\u3002\n\narch/x86/include/asm/pgtable_32_types.h\n#ifdef CONFIG_X86_PAE\n# include <asm/pgtable-3level_types.h>\n# define PMD_SIZE (1UL << PMD_SHIFT)\n# define PMD_MASK (~(PMD_SIZE - 1))\n#else\n# include <asm/pgtable-2level_types.h>\n#endif\n\n\n\u3053\u3053\u304b\u3089\u3001\u4eee\u60f3\u30a2\u30c9\u30ec\u30b9\u304c32bit\u3067\u3042\u3063\u3066\u3082\u3001PAE\u304c\u6709\u52b9\u306a\u5834\u5408\u3068\u305d\u3046\u3067\u306a\u3044\u5834\u5408\u3068\u3067\u30c6\u30fc\u30d6\u30eb\u306e\u4f5c\u308a\u304c\u9055\u3046\u3053\u3068\u304c\u4f3a\u3048\u307e\u3059\u3002(x86\u30a2\u30fc\u30ad\u30c6\u30af\u30c1\u30e3\u306e\u4ed5\u69d8\u4e0a\u3001\u305d\u308c\u306f\u5f53\u7136\u3067\u3042\u308a\u307e\u3059\u3002)\nPGD\u306e\u5834\u5408\u306f\u3001\nc:arch/x86/include/asm/pgtable.h\n646 #define pgd_index(address) (((address) >> PGDIR_SHIFT) & (PTRS_PER_PGD - 1))\n\nPGDIR_SHIFT\u3068PTRS_PER_PGD\u306f\u4ee5\u4e0b\u306e\u3068\u304a\u308a\u3067\u3059\u3002\n\narch/x86/include/asm/pgtable-3level_types.h\n#define PGDIR_SHIFT 30\n#define PTRS_PER_PGD  4\n\n\n\narch/x86/include/asm/pgtable-2level_types.h\n#define PGDIR_SHIFT 22\n#define PTRS_PER_PGD  1024\n\n\n\narch/x86/include/asm/pgtable.h\nstatic inline unsigned long pgd_page_vaddr(pgd_t pgd)\n{\n  return (unsigned long)__va((unsigned long)pgd_val(pgd) & PTE_PFN_MASK);\n}\n/* \u7565 */\nstatic inline unsigned long pud_index(unsigned long address)\n{\n  return (address >> PUD_SHIFT) & (PTRS_PER_PUD - 1);\n}\n\nstatic inline pud_t *pud_offset(pgd_t *pgd, unsigned long address)\n{\n  return (pud_t *)pgd_page_vaddr(*pgd) + pud_index(address);\n}\n\n\n\narch/x86/include/asm/pgtable.h\n#define pgd_val(x)  native_pgd_val(x)\n\n\n\narch/x86/include/asm/pgtable_types.h\nstatic inline pgdval_t native_pgd_val(pgd_t pgd)\n{\n  return pgd.pgd;\n}\n\n\n\u3064\u307e\u308a\u3001pgd\u306e\u4e2d\u8eab\u3092\u305d\u306e\u307e\u307e\u8fd4\u3057\u3066\u3044\u308b\u3060\u3051\u3067\u3059\u3002\n\u3042\u308c\u3001grep\u3057\u3066\u307f\u308b\u3068\u3001x86\u306epgtable_64_types.h\u306b\u306f\u5b9a\u7fa9\u304c\u3042\u308b\u304c\u3001x86(32bit)\u5411\u3051\u306e\u5b9a\u7fa9\u304c\u306a\u3044\uff01\u3068\u601d\u3063\u305f\u3042\u306a\u305f\u3002\u5b9f\u306fpud\u3092\u4f7f\u3063\u3066\u3044\u306a\u3044\u30a2\u30fc\u30ad\u30c6\u30af\u30c1\u30e3\u306e\u5834\u5408\u3001\ninclude/asm-generic/pgtable-nopud.h\u5185\u306e\u5b9a\u7fa9\u304c\u4f7f\u308f\u308c\u307e\u3059\u3002\n\ninclude/asm-generic/pgtable-nopud.h\n/*\n * Having the pud type consist of a pgd gets the size right, and allows\n * us to conceptually access the pgd entry that this pud is folded into\n * without casting.\n */\ntypedef struct { pgd_t pgd; } pud_t;\n\n#define PUD_SHIFT PGDIR_SHIFT\n#define PTRS_PER_PUD  1\n#define PUD_SIZE    (1UL << PUD_SHIFT)\n#define PUD_MASK    (~(PUD_SIZE-1))\n\n\nPUD\u306b\u3064\u3044\u3066\u3082\u540c\u3058\u8981\u9818\u3068\u306a\u308a\u307e\u3059\u3002(\u6c17\u306b\u306a\u308b\u65b9\u306f\u30bd\u30fc\u30b9\u8ffd\u3063\u3066\u307f\u3066\u304f\u3060\u3055\u3044\u3002)\n## \u524d\u7f6e\u304d\n[\u524d\u56de](http://qiita.com/akachochin/items/5bf126a6218aff220ab6)\u306e\u8cc7\u6599\u306f\u3001Linux\u3082\u304f\u3082\u304f\u4f1a\u3068\u3044\u3046\u52c9\u5f37\u4f1a\u3067\u4f1a\u793e\u5e30\u308a\u306b\u79cb\u8449\u539f\u3067\u30bd\u30fc\u30b9\u8aad\u3093\u3067\u6295\u7a3f\u3057\u307e\u3057\u305f\u3002\n\u3053\u306e\u8cc7\u6599\u3082\u5927\u90e8\u5206\u306fLinux\u3082\u304f\u3082\u304f\u4f1a\u3067\u66f8\u304d\u307e\u3057\u305f\u3002\n\n## \u524d\u56de\u306e\u3042\u3089\u307e\u3057\u3068\u4eca\u56de\u898b\u3066\u3044\u304f\u3068\u3053\u308d\n[\u524d\u56de](http://qiita.com/akachochin/items/5bf126a6218aff220ab6)\u3001\u30ab\u30fc\u30cd\u30eb\u7a7a\u9593\u306fvmalloc\u5411\u3051\u3068\u601d\u308f\u308c\u308b\u30e1\u30e2\u30ea\u9818\u57df\u3092\u5883\u306b\u4eee\u60f3\u30a2\u30c9\u30ec\u30b9 - \u7269\u7406\u30a2\u30c9\u30ec\u30b9\u306e\u30cf\u30f3\u30c9\u30ea\u30f3\u30b0\u304c\u7570\u306a\u308a\u305d\u3046\u3060\u3068\u3044\u3046\u3068\u3053\u308d\u3092\u898b\u3066\u304d\u307e\u3057\u305f\u3002\n\n\u3055\u3066\u3001\u4eca\u56de\u306fvmalloc()\u4ee5\u964d\u306e\u4eee\u60f3 - \u7269\u7406\u30a2\u30c9\u30ec\u30b9\u306e\u5909\u63db\u306f\u3069\u3046\u306a\u3063\u3066\u3044\u308b\u306e\u304b\u3001\u3053\u3053\u3092\u898b\u3066\u307f\u307e\u3057\u3087\u3046\u3002\n\n## vmalloc\u3092\u6b69\u3044\u3066\u307f\u308b\nvmalloc\u3068\u3044\u3046\u3053\u3068\u306f\u3001\u305d\u308c\u3063\u307d\u3044\u30bd\u30fc\u30b9\u3092\u63a2\u305b\u3070\u826f\u3044\u3084\u3002\u3048\u3044\u3002\u3068\u3044\u3046\u3053\u3068\u3067mm/vmalloc.c\u3092\u8aad\u307f\u307e\u3059\u3002\n\u3059\u308b\u3068\u3001\u4ee5\u4e0b\u306e\u95a2\u6570\u304c\u76ee\u306b\u6b62\u307e\u308a\u307e\u3059\u3002\n\n```c:mm/vmalloc.c\nunsigned long vmalloc_to_pfn(const void *vmalloc_addr)\n{\n  return page_to_pfn(vmalloc_to_page(vmalloc_addr));\n}\nEXPORT_SYMBOL(vmalloc_to_pfn);\n```\n\nvmalloc_to_page()\u304c\u30da\u30fc\u30b8\u69cb\u9020\u4f53\u306e\u30a2\u30c9\u30ec\u30b9\u3092\u8fd4\u3057\u3001\u305d\u308c\u3092page_to_pfn\u3067\u7269\u7406\u30d5\u30ec\u30fc\u30e0\u756a\u53f7\u306b\u5909\u63db\u3059\u308b\u306e\u3060\u308d\u3046\u3002\u305d\u308c\u3067\u306fvmalloc_to_page()\u3092\u898b\u3066\u307f\u307e\u3057\u3087\u3046\u3002\n\n```c:mm/vmalloc.c\nstruct page *vmalloc_to_page(const void *vmalloc_addr)\n{\n  unsigned long addr = (unsigned long) vmalloc_addr;\n  struct page *page = NULL;\n  pgd_t *pgd = pgd_offset_k(addr);\n\n  /*\n   * XXX we might need to change this if we add VIRTUAL_BUG_ON for\n   * architectures that do not vmalloc module space\n   */\n  VIRTUAL_BUG_ON(!is_vmalloc_or_module_addr(vmalloc_addr));\n\n  if (!pgd_none(*pgd)) {\n    pud_t *pud = pud_offset(pgd, addr);\n    if (!pud_none(*pud)) {\n      pmd_t *pmd = pmd_offset(pud, addr);\n      if (!pmd_none(*pmd)) {\n        pte_t *ptep, pte;\n\n        ptep = pte_offset_map(pmd, addr);\n        pte = *ptep;\n        if (pte_present(pte))\n          page = pte_page(pte);\n        pte_unmap(ptep);\n      }\n    }\n  }\n  return page;\n}\nEXPORT_SYMBOL(vmalloc_to_page);\n```\n\n\u5642\u306b\u306f\u805e\u3044\u3066\u3044\u307e\u3057\u305f\u304c\u3001\u58ee\u89b3\u3067\u3059\u306d\u3002\n\u30c7\u30fc\u30bf\u69cb\u9020\u3068\u3057\u3066\u306f\u3001PGD - PUD - PMD - PTE\u306e4\u6bb5\u968e\u69cb\u6210\u306e\u30da\u30fc\u30b8\u30c6\u30fc\u30d6\u30eb\u306b\u306a\u3063\u3066\u3044\u308b\u3088\u3046\u306b\u898b\u3048\u307e\u3059\u3002\n\n\u30da\u30fc\u30b8\u30c6\u30fc\u30d6\u30eb\u3068\u3044\u3046\u3053\u3068\u3092\u8e0f\u307e\u3048\u308b\u3068\u3001\u4eee\u60f3\u30a2\u30c9\u30ec\u30b9\u3092\u5206\u5272\u3057\u3066\u3001\u5206\u5272\u3059\u308b\u3053\u3068\u306b\u3088\u3063\u3066\u751f\u6210\u3057\u305f\u5024\u3092\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\u3068\u3057\u3066\u30014\u6bb5\u306e\u30c6\u30fc\u30d6\u30eb\u3092\u4e0b\u308a\u3001\u6700\u5f8c\u306ePTE\u306b\u304b\u304b\u308c\u3066\u3044\u308b\u7269\u7406\u30a2\u30c9\u30ec\u30b9\u3092\u53d6\u5f97\u3059\u308b\u3068\u601d\u308f\u308c\u307e\u3059\u3002\n(x86\u306e\u30da\u30fc\u30b8\u30c6\u30fc\u30d6\u30eb\u306f\u307e\u3055\u306b\u3053\u3046\u306a\u3063\u3066\u3044\u307e\u3059\u306d\u3002)\n\n\u3055\u3066\u3001\u5b9f\u969b\u306e\u3068\u3053\u308d\u306f\u3069\u3046\u306a\u3063\u3066\u3044\u308b\u306e\u304b\u3001\u305d\u308c\u3092\u898b\u307e\u3057\u3087\u3046\u3002\n\n## x86(32bit)\u306ePGE\u4ee5\u4e0b\u306e\u30c7\u30fc\u30bf\u306e\u4f7f\u308f\u308c\u65b9\n\u7d50\u8ad6\u304b\u3089\n\u8a00\u3046\u3068\u3001\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u69cb\u6210\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u3002\n\n(x86(32bit/PAE\u306a\u3057)\n![linux_page_trans_x86_32_nopae.jpg](https://qiita-image-store.s3.amazonaws.com/0/19975/833a0719-74b9-ca08-28ea-0adb1e9efaa6.jpeg)\n\n(x86(32bit/PAE\u3042\u308a)\n![linux_page_trans_x86_32_pae.jpg](https://qiita-image-store.s3.amazonaws.com/0/19975/f27436f8-f92d-02dc-6ce1-34fad1691b00.jpeg)\n\n\u3064\u307e\u308a\u3001x86\u30a2\u30fc\u30ad\u30c6\u30af\u30c1\u30e3\u306e\u30da\u30fc\u30b8\u30c6\u30fc\u30d6\u30eb\u305d\u306e\u307e\u3093\u307e\u3067\u3059\u3002\n\u4f55\u3068\u8a00\u3046\u3053\u3068\u306f\u306a\u3044\u3001\u30da\u30fc\u30b8\u30c6\u30fc\u30d6\u30eb\u3092\u898b\u3066\u3001\u4eee\u60f3\u30a2\u30c9\u30ec\u30b9\u3068\u7269\u7406\u30a2\u30c9\u30ec\u30b9\u306e\u5909\u63db\u3092\u3057\u3066\u3044\u308b\u3060\u3051\u3067\u3059\u3002\n(\u826f\u3044\u5b50\u306e\u307f\u3093\u306a\u306f\u3001Intel SDM\u306b\u76ee\u3092\u901a\u3057\u3066\u307f\u3088\u3046)\n\n\u300c\u3067\u306f\u3001\u4f7f\u308f\u308c\u3066\u3044\u306a\u3044\u30c6\u30fc\u30d6\u30eb(PUD\u3068\u304b)\u306f\u3069\u3046\u6271\u3063\u3066\u3044\u308b\u3093\u3060\uff1f\u300d\u3068\u3044\u3046\u4eba\u306f\u3001\u3053\u306e\u6587\u66f8\u306e\u6700\u5f8c\u306bAppendix\u3068\u3057\u3066\u6982\u8981\u3092\u8f09\u305b\u307e\u3057\u305f\u306e\u3067\u3001\u53c2\u8003\u306b\u3057\u3066\u304f\u3060\u3055\u3044\u3002\n\n\u672c\u6587\u3067\u306f\u3001\u9014\u4e2d\u306f\u7701\u7565\u3057\u3001pte\u306e\u3068\u3053\u308d\u3060\u3051\u898b\u3066\u307f\u307e\u3057\u3087\u3046\u3002\n\n```c:include/asm/pgtable.h\n#define pte_val(x)  native_pte_val(x)\n/* \u7565 */\nstatic inline unsigned long pte_pfn(pte_t pte)\n{\n  return (pte_val(pte) & PTE_PFN_MASK) >> PAGE_SHIFT;\n}\n/* \u7565 */\n#define pte_page(pte) pfn_to_page(pte_pfn(pte))\n```\n\n\u8981\u3059\u308b\u306b\u3001PTE\u306e\u4e2d\u8eab\u304b\u3089\u7269\u7406\u30a2\u30c9\u30ec\u30b9\u306b\u8a72\u5f53\u3059\u308b\u3068\u3053\u308d\u3092\u629c\u304d\u51fa\u3057\u3066\u3044\u307e\u3059\u3002\n\u3061\u306a\u307f\u306b\u3001\u6b8b\u308a\u306e\u5b9a\u7fa9\u306f\u4ee5\u4e0b\u306e\u3068\u304a\u308a\u3067\u3059\u3002\n\n```c:arch/x86/include/asm/pgtable_types.h\n/* PTE_PFN_MASK extracts the PFN from a (pte|pmd|pud|pgd)val_t */\n#define PTE_PFN_MASK    ((pteval_t)PHYSICAL_PAGE_MASK)\nstatic inline pteval_t native_pte_val(pte_t pte)\n{\n  return pte.pte;\n}\n```\n\n```c:arch/x86/include/asm/page_types.h\n#define PAGE_SHIFT  12\n#define PAGE_SIZE (_AC(1,UL) << PAGE_SHIFT)\n#define PAGE_MASK (~(PAGE_SIZE-1))\n\n#define __PHYSICAL_MASK   ((phys_addr_t)((1ULL << __PHYSICAL_MASK_SHIFT) - 1    ))\n/* \u7565 */\n#define PHYSICAL_PAGE_MASK  (((signed long)PAGE_MASK) & __PHYSICAL_MASK)\n```\n\n```c:arch/x86/include/asm/page_32_types.h\n#ifdef CONFIG_X86_PAE\n/* 44=32+12, the limit we can fit into an unsigned long pfn */\n#define __PHYSICAL_MASK_SHIFT 44\n#define __VIRTUAL_MASK_SHIFT  32\n\n#else  /* !CONFIG_X86_PAE */\n#define __PHYSICAL_MASK_SHIFT 32\n#define __VIRTUAL_MASK_SHIFT  32\n#endif  /* CONFIG_X86_PAE */\n```\n\n\u3053\u3053\u307e\u3067\u898b\u305f\u3068\u304a\u308a\u3001x86\u306e\u5834\u5408\u306f\u3001\u305d\u306e\u307e\u307e\u3053\u306e\u30c7\u30fc\u30bf\u69cb\u9020\u304c\u751f\u304b\u3055\u308c\u3066\u3044\u307e\u3059\u306d\u3002\nPTE\u306e\u4e2d\u8eab\u3092\u898b\u308b\u7b87\u6240\u306a\u3069\u306f\u3001CPU\u30a2\u30fc\u30ad\u30c6\u30af\u30c1\u30e3\u4f9d\u5b58\u306e\u51e6\u7406\u306b\u306a\u3063\u3066\u3044\u307e\u3059\u306e\u3067\u3001\u4ed6\u306eCPU\u30a2\u30fc\u30ad\u30c6\u30af\u30c1\u30e3\u3067\u3082\u3053\u306e\u30c7\u30fc\u30bf\u69cb\u9020\u3092\u4f7f\u3048\u308b\u308f\u3051\u3067\u3059\u3002\n(\u3082\u3061\u308d\u3093\u3001\u30a2\u30fc\u30ad\u30c6\u30af\u30c1\u30e3\u306e\u4e2d\u306b\u306f\u591a\u5c11\u7121\u7406\u77e2\u7406\u611f\u304c\u51fa\u3066\u3057\u307e\u3046\u3082\u306e\u3082\u3042\u308b\u306e\u3067\u3057\u3087\u3046\u304b?ARM\u3082\u30da\u30fc\u30b8\u30c6\u30fc\u30d6\u30eb\u65b9\u5f0f\u306a\u306e\u3067\u3001\u3053\u306e\u30c7\u30fc\u30bf\u5f62\u5f0f\u3067\u3082\u7121\u7406\u306f\u306a\u3044\u304b\u3068\u601d\u3044\u307e\u3059)\n\n\u307e\u308b\u3063\u3068CPU\u30a2\u30fc\u30ad\u30c6\u30af\u30c1\u30e3\u306e\u51e6\u7406\u3068\u30c7\u30fc\u30bf\u69cb\u9020\u304c\u5206\u96e2\u3055\u308c\u305fBSD\u3068\u7570\u306a\u308b\u3053\u306e\u5b9f\u88c5\u3001\u65b0\u9bae\u3067\u3059\u3002\n* \u5ff5\u306e\u70ba\u306b\u66f8\u304d\u307e\u3059\u304c\u3001\u3069\u3061\u3089\u306e\u8a2d\u8a08\u3082\u3042\u308a\u3060\u3068\u601d\u3044\u307e\u3059\u3057\u3001\u512a\u52a3\u3092\u3064\u3051\u308b\u6c17\u306f\n  \u3042\u308a\u307e\u305b\u3093\u3002\n\n\u4f55\u3068\u306a\u304f\u4eee\u60f3\u8a18\u61b6\u5b9f\u88c5\u306e\u96f0\u56f2\u6c17\u304c\u5c11\u3057\u305a\u3064\u3064\u304b\u3081\u3066\u304d\u307e\u3057\u305f\u3002\n\n## \u6b21\u56de\u306e\u4e88\u5b9a\n\u6b21\u56de\u306f\u3001\u30e1\u30e2\u30ea\u30de\u30c3\u30d7\u3068\u3044\u3048\u3070\u3053\u306e\u30b7\u30b9\u30c6\u30e0\u30b3\u30fc\u30eb\u3001mmap()\u3092\u8aad\u3093\u3067\u307f\u308b\u4e88\u5b9a\u3067\u3059\u3002\n\n## Appendix\n\u6700\u521d\u306f\u3001pgd_offset_k()\u3092\u898b\u3066\u307f\u307e\u3057\u3087\u3046\u3002\n\n```c:arch/x86/include/asm/pgtable.h\n#define pgd_index(address) (((address) >> PGDIR_SHIFT) & (PTRS_PER_PGD - 1))\n\n/*\n * pgd_offset() returns a (pgd_t *)\n * pgd_index() is used get the offset into the pgd page's array of \u3000t's;\n */\n#define pgd_offset(mm, address) ((mm)->pgd + pgd_index((address)))\n/*\n * a shortcut which implies the use of the kernel's pgd, instead\n * of a process's\n */\n#define pgd_offset_k(address) pgd_offset(&init_mm, (address))\n```\nstruct mm\u306e\u4e2d\u306epgd\u304c\u30d7\u30ed\u30bb\u30b9\u306e\u30a2\u30c9\u30ec\u30b9\u7a7a\u9593\u3092\u8868\u73fe\u3059\u308b\u30da\u30fc\u30b8\u30c7\u30a3\u30ec\u30af\u30c8\u30ea(Linux\u306e\u5b9f\u88c5\u3060\u3068PGD)\u3092\u6307\u3057\u3066\u3044\u308b\u3053\u3068\u3001\u305d\u3057\u3066\u3001\u30ab\u30fc\u30cd\u30eb\u306e\u30a2\u30c9\u30ec\u30b9\u7a7a\u9593\u3092\u8868\u3059struct mm\u306f\u3069\u3046\u3084\u3089init_mm\u306e\u3088\u3046\u3060\u3068\u3044\u3046\u3053\u3068\u304c\u8aad\u307f\u53d6\u308c\u307e\u3059\u3002\n\n\u6b21\u306b\u3001\u4ee5\u4e0b\u306e\u30d8\u30c3\u30c0\u3092\u898b\u307e\u3057\u3087\u3046\u3002\n\n```c:arch/x86/include/asm/pgtable_32_types.h\n#ifdef CONFIG_X86_PAE\n# include <asm/pgtable-3level_types.h>\n# define PMD_SIZE (1UL << PMD_SHIFT)\n# define PMD_MASK (~(PMD_SIZE - 1))\n#else\n# include <asm/pgtable-2level_types.h>\n#endif\n```\n\n\u3053\u3053\u304b\u3089\u3001\u4eee\u60f3\u30a2\u30c9\u30ec\u30b9\u304c32bit\u3067\u3042\u3063\u3066\u3082\u3001PAE\u304c\u6709\u52b9\u306a\u5834\u5408\u3068\u305d\u3046\u3067\u306a\u3044\u5834\u5408\u3068\u3067\u30c6\u30fc\u30d6\u30eb\u306e\u4f5c\u308a\u304c\u9055\u3046\u3053\u3068\u304c\u4f3a\u3048\u307e\u3059\u3002(x86\u30a2\u30fc\u30ad\u30c6\u30af\u30c1\u30e3\u306e\u4ed5\u69d8\u4e0a\u3001\u305d\u308c\u306f\u5f53\u7136\u3067\u3042\u308a\u307e\u3059\u3002)\n\nPGD\u306e\u5834\u5408\u306f\u3001\n```c:arch/x86/include/asm/pgtable.h\n646 #define pgd_index(address) (((address) >> PGDIR_SHIFT) & (PTRS_PER_PGD - 1))\n```\n\nPGDIR_SHIFT\u3068PTRS_PER_PGD\u306f\u4ee5\u4e0b\u306e\u3068\u304a\u308a\u3067\u3059\u3002\n\n```c:arch/x86/include/asm/pgtable-3level_types.h\n#define PGDIR_SHIFT 30\n#define PTRS_PER_PGD  4\n```\n\n```c:arch/x86/include/asm/pgtable-2level_types.h\n#define PGDIR_SHIFT 22\n#define PTRS_PER_PGD  1024\n```\n\n\n```c:arch/x86/include/asm/pgtable.h\nstatic inline unsigned long pgd_page_vaddr(pgd_t pgd)\n{\n  return (unsigned long)__va((unsigned long)pgd_val(pgd) & PTE_PFN_MASK);\n}\n/* \u7565 */\nstatic inline unsigned long pud_index(unsigned long address)\n{\n  return (address >> PUD_SHIFT) & (PTRS_PER_PUD - 1);\n}\n\nstatic inline pud_t *pud_offset(pgd_t *pgd, unsigned long address)\n{\n  return (pud_t *)pgd_page_vaddr(*pgd) + pud_index(address);\n}\n```\n\n```c:arch/x86/include/asm/pgtable.h\n#define pgd_val(x)\tnative_pgd_val(x)\n```\n\n```c:arch/x86/include/asm/pgtable_types.h\nstatic inline pgdval_t native_pgd_val(pgd_t pgd)\n{\n  return pgd.pgd;\n}\n```\n\u3064\u307e\u308a\u3001pgd\u306e\u4e2d\u8eab\u3092\u305d\u306e\u307e\u307e\u8fd4\u3057\u3066\u3044\u308b\u3060\u3051\u3067\u3059\u3002\n\u3042\u308c\u3001grep\u3057\u3066\u307f\u308b\u3068\u3001x86\u306epgtable_64_types.h\u306b\u306f\u5b9a\u7fa9\u304c\u3042\u308b\u304c\u3001x86(32bit)\u5411\u3051\u306e\u5b9a\u7fa9\u304c\u306a\u3044\uff01\u3068\u601d\u3063\u305f\u3042\u306a\u305f\u3002\u5b9f\u306fpud\u3092\u4f7f\u3063\u3066\u3044\u306a\u3044\u30a2\u30fc\u30ad\u30c6\u30af\u30c1\u30e3\u306e\u5834\u5408\u3001\ninclude/asm-generic/pgtable-nopud.h\u5185\u306e\u5b9a\u7fa9\u304c\u4f7f\u308f\u308c\u307e\u3059\u3002\n\n```c:include/asm-generic/pgtable-nopud.h\n/*\n * Having the pud type consist of a pgd gets the size right, and allows\n * us to conceptually access the pgd entry that this pud is folded into\n * without casting.\n */\ntypedef struct { pgd_t pgd; } pud_t;\n\n#define PUD_SHIFT PGDIR_SHIFT\n#define PTRS_PER_PUD  1\n#define PUD_SIZE    (1UL << PUD_SHIFT)\n#define PUD_MASK    (~(PUD_SIZE-1))\n```\nPUD\u306b\u3064\u3044\u3066\u3082\u540c\u3058\u8981\u9818\u3068\u306a\u308a\u307e\u3059\u3002(\u6c17\u306b\u306a\u308b\u65b9\u306f\u30bd\u30fc\u30b9\u8ffd\u3063\u3066\u307f\u3066\u304f\u3060\u3055\u3044\u3002)\n\n\n"}