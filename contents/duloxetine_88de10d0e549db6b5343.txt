{"context": " More than 1 year has passed since last update.\n\nEvil\u3067\u306ef\u30b3\u30de\u30f3\u30c9\n\u5c06\u6765\u7684\u306b\u306f\u4f55\u3089\u304b\u306e\u5bfe\u5fdc\u304c\u3042\u308b\u306e\u3067\u3057\u3087\u3046\u304c\u3001f\u30b3\u30de\u30f3\u30c9\u3067\u65e5\u672c\u8a9e\u306e\u53e5\u8aad\u70b9\u306b\n\u30de\u30c3\u30c1\u3057\u3066\u307b\u3057\u3044\u3068\u601d\u3044\u307e\u3057\u305f\u3002\n(defun skk-char-taiou (char)\n  (if (symbol-value skk-mode)\n      (progn\n        (if (eq char ?.)\n            (if (or (eq skk-kutouten-type 'jp) (eq skk-kutouten-type 'jp-en))\n                (setq char ?\u3002)\n              (setq char ?\uff0e) ))\n        (if (eq char ?,)\n            (if (or (eq skk-kutouten-type 'jp) (eq skk-kutouten-type 'en-jp))\n                (setq char ?\u3001)\n              (setq char ?\uff0c) ))))\n  char)\n\n\u306a\u3093\u3068\u6c5a\u3044\u30b3\u30fc\u30c9\u3060\u3068\u601d\u3046\u3002\u3053\u308c\u3092evil-find-char\u306b\u5165\u308c\u308b\u3002\n(evil-define-motion evil-find-char (count char)\n  \"Move to the next COUNT'th occurrence of CHAR.\"\n  :jump t\n  :type inclusive\n  (interactive \"<c><C>\")\n  (setq count (or count 1))\n  (setq char (skk-char-taiou char))\n (let ((fwd (> count 0)))\n    (setq evil-last-find (list #'evil-find-char char fwd))\n    (when fwd (forward-char))\n    (let ((case-fold-search nil))\n      (unless (prog1\n                  (search-forward (char-to-string char)\n                                  (unless evil-cross-lines\n                                    (if fwd\n                                        (line-end-position)\n                                      (line-beginning-position)))\n                                  t count)\n                (when fwd (backward-char)))\n        (error \"Can't find %c\" char)))))\n\n\u4e00\u5fdc\u306f\u76ee\u7684\u9054\u6210\u3002SKK\u30e6\u30fc\u30b6\u3067\u306a\u3044\u4eba\u306f\u3069\u3046\u3084\u308b\u306e\u304b\n\u308f\u304b\u308a\u307e\u305b\u3093\u3002\u3059\u307f\u307e\u305b\u3093\u3002\n\u8ffd\u8a18:\n\u4e00\u5fdc\u304d\u308c\u3044\u3060\u3068\u601d\u3046\u30b3\u30fc\u30c9\u306b\u3057\u3066\u307f\u307e\u3057\u305f\u3002\n(defun skk-char-taiou (char)\n  (if (and (symbol-value skk-mode) (not skk-latin-mode))\n      (cond ((or (eq skk-kutouten-type 'jp) (eq skk-kutouten-type 'jp-en))\n             (if (eq char ?.) ?\u3002 char) )\n            ((or (eq skk-kutouten-type 'jp) (eq skk-kutouten-type 'en-jp))\n             (if (eq char ?,) ?\u3001 char) )\n            (t char))\n    char))\n\n\u5be9\u7f8e\u306f\u4eba\u305d\u308c\u305e\u308c\u3067\u3057\u3087\u3046\u3051\u308c\u3069\u3082\u3002\n\u3055\u3089\u306b\u8ffd\u8a18:\n(advice-add #'evil-find-char :filter-args #'skk-char-taiou-function)\n(defun skk-char-taiou-function (args)\n  (list (car args) (skk-char-taiou (cadr args))))\n\n\u3068\u3057\u3066\u304a\u304f\u3068\u3001evil-find-char\u3092\u6c5a\u3055\u306a\u3044\u3067\u6e08\u3080\u3088\u3046\u3067\u3059\u3002\n\u8ffd\u8a18:\n\u30d0\u30b0\u304c\u3042\u308a\u307e\u3057\u305f\u3002\n(defun skk-char-taiou (char)\n  (if (and (symbol-value skk-mode) (not skk-latin-mode))\n      (cond ((eq skk-kutouten-type 'jp)\n             (cond ((eq char ?.) ?\u3002) \n                   ((eq char ?,) ?\u3001)\n                   (t char)))\n            ((eq skk-kutouten-type 'jp-en)\n             (cond ((eq char ?.) ?\u3002)\n                   ((eq char ?,) ?\uff0c)\n                   (t char)))\n            ((eq skk-kutouten-type 'en-jp)\n             (cond ((eq char ?.) ?\uff0e)\n                   ((eq char ?,) ?\u3001)\n                   (t char)))\n            ((eq skk-kutouten-type 'en)\n             (cond ((eq char ?.) ?\uff0e)\n                   ((eq char ?,) ?\uff0c)\n                   (t char)))\n            (t char))\n    char))\n\n\u3067\u3057\u305f\u3002cond\u306e\u4f7f\u3044\u65b9\u3092\u9593\u9055\u3048\u3066\u3044\u307e\u3057\u305f\u3002\n## Evil\u3067\u306ef\u30b3\u30de\u30f3\u30c9\n\n\u5c06\u6765\u7684\u306b\u306f\u4f55\u3089\u304b\u306e\u5bfe\u5fdc\u304c\u3042\u308b\u306e\u3067\u3057\u3087\u3046\u304c\u3001f\u30b3\u30de\u30f3\u30c9\u3067\u65e5\u672c\u8a9e\u306e\u53e5\u8aad\u70b9\u306b\n\u30de\u30c3\u30c1\u3057\u3066\u307b\u3057\u3044\u3068\u601d\u3044\u307e\u3057\u305f\u3002\n\n```el\n(defun skk-char-taiou (char)\n  (if (symbol-value skk-mode)\n      (progn\n        (if (eq char ?.)\n            (if (or (eq skk-kutouten-type 'jp) (eq skk-kutouten-type 'jp-en))\n                (setq char ?\u3002)\n              (setq char ?\uff0e) ))\n        (if (eq char ?,)\n            (if (or (eq skk-kutouten-type 'jp) (eq skk-kutouten-type 'en-jp))\n                (setq char ?\u3001)\n              (setq char ?\uff0c) ))))\n  char)\n```\n\n\u306a\u3093\u3068\u6c5a\u3044\u30b3\u30fc\u30c9\u3060\u3068\u601d\u3046\u3002\u3053\u308c\u3092evil-find-char\u306b\u5165\u308c\u308b\u3002\n\n```el\n(evil-define-motion evil-find-char (count char)\n  \"Move to the next COUNT'th occurrence of CHAR.\"\n  :jump t\n  :type inclusive\n  (interactive \"<c><C>\")\n  (setq count (or count 1))\n  (setq char (skk-char-taiou char))\n (let ((fwd (> count 0)))\n    (setq evil-last-find (list #'evil-find-char char fwd))\n    (when fwd (forward-char))\n    (let ((case-fold-search nil))\n      (unless (prog1\n                  (search-forward (char-to-string char)\n                                  (unless evil-cross-lines\n                                    (if fwd\n                                        (line-end-position)\n                                      (line-beginning-position)))\n                                  t count)\n                (when fwd (backward-char)))\n        (error \"Can't find %c\" char)))))\n```\n\n\u4e00\u5fdc\u306f\u76ee\u7684\u9054\u6210\u3002SKK\u30e6\u30fc\u30b6\u3067\u306a\u3044\u4eba\u306f\u3069\u3046\u3084\u308b\u306e\u304b\n\u308f\u304b\u308a\u307e\u305b\u3093\u3002\u3059\u307f\u307e\u305b\u3093\u3002\n\n\u8ffd\u8a18:\n\n\u4e00\u5fdc\u304d\u308c\u3044\u3060\u3068\u601d\u3046\u30b3\u30fc\u30c9\u306b\u3057\u3066\u307f\u307e\u3057\u305f\u3002\n\n```el\n(defun skk-char-taiou (char)\n  (if (and (symbol-value skk-mode) (not skk-latin-mode))\n      (cond ((or (eq skk-kutouten-type 'jp) (eq skk-kutouten-type 'jp-en))\n             (if (eq char ?.) ?\u3002 char) )\n            ((or (eq skk-kutouten-type 'jp) (eq skk-kutouten-type 'en-jp))\n             (if (eq char ?,) ?\u3001 char) )\n            (t char))\n    char))\n```\n\u5be9\u7f8e\u306f\u4eba\u305d\u308c\u305e\u308c\u3067\u3057\u3087\u3046\u3051\u308c\u3069\u3082\u3002\n\n\u3055\u3089\u306b\u8ffd\u8a18:\n\n```el\n(advice-add #'evil-find-char :filter-args #'skk-char-taiou-function)\n(defun skk-char-taiou-function (args)\n  (list (car args) (skk-char-taiou (cadr args))))\n```\n\n\u3068\u3057\u3066\u304a\u304f\u3068\u3001`evil-find-char`\u3092\u6c5a\u3055\u306a\u3044\u3067\u6e08\u3080\u3088\u3046\u3067\u3059\u3002\n\n\u8ffd\u8a18:\n\n\u30d0\u30b0\u304c\u3042\u308a\u307e\u3057\u305f\u3002\n\n```el\n(defun skk-char-taiou (char)\n  (if (and (symbol-value skk-mode) (not skk-latin-mode))\n      (cond ((eq skk-kutouten-type 'jp)\n             (cond ((eq char ?.) ?\u3002) \n                   ((eq char ?,) ?\u3001)\n                   (t char)))\n            ((eq skk-kutouten-type 'jp-en)\n             (cond ((eq char ?.) ?\u3002)\n                   ((eq char ?,) ?\uff0c)\n                   (t char)))\n            ((eq skk-kutouten-type 'en-jp)\n             (cond ((eq char ?.) ?\uff0e)\n                   ((eq char ?,) ?\u3001)\n                   (t char)))\n            ((eq skk-kutouten-type 'en)\n             (cond ((eq char ?.) ?\uff0e)\n                   ((eq char ?,) ?\uff0c)\n                   (t char)))\n            (t char))\n    char))\n```\n\n\u3067\u3057\u305f\u3002`cond`\u306e\u4f7f\u3044\u65b9\u3092\u9593\u9055\u3048\u3066\u3044\u307e\u3057\u305f\u3002\n", "tags": ["Evil", "SKK", "Emacs"]}