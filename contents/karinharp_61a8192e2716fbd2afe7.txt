{"tags": ["Away3D", "ActionScript"], "context": " More than 1 year has passed since last update.http://away3d.com/forum/viewthread/476/\n\u3053\u306e\u30d5\u30a9\u30fc\u30e9\u30e0\u3067\u4e0a\u304c\u3063\u3066\u308b\u65b9\u6cd5\u3067\u3000override \u3057\u3066\u307f\u305f\u3089\u3055\u3063\u304f\u308a\u52d5\u3044\u305f\u306e\u3067\u30e1\u30e2\u3002\n\u8b0e\u306einclude\u306f\u7121\u8996\u3057\u3066\u4e0b\u3055\u3044\u3002\n\nAmCubeGeometry.as\n\n#include <cpp/AmDevelop.h>\n\npackage am.graphics\n{\n    import away3d.primitives.*;\n    import away3d.core.base.*;\n\npublic class AmCubeGeometry extends CubeGeometry\n{\n\n    public function AmCubeGeometry(width:Number, height:Number, depth:Number, segmentsW:uint, segmentsH:uint, segmentsD:uint, tile6:Boolean = true):void {\n    super(width, height, depth, segmentsW, segmentsH, segmentsD, tile6);    \n    }\n\n    override protected function buildUVs(target : SubGeometry) : void\n    {\n    var uvData : Vector.<Number>;\n    var i : uint, j : uint, uidx  :  uint; // indices\n    var hw : Number, hh : Number, hd : Number; // halves\n    var dw : Number, dh : Number, dd : Number; // deltas\n\n    var u_tile_dim : Number, v_tile_dim : Number;\n    var u_tile_step : Number, v_tile_step : Number;\n    var outer_uv : Number;\n\n    var numUvs : uint = ((segmentsW + 1) * (segmentsH + 1) +\n                 (segmentsW + 1) * (segmentsD + 1) +\n                 (segmentsH + 1) * (segmentsD + 1)) * 4;\n\n    if (target.UVData && numUvs == target.UVData.length)\n        uvData = target.UVData;\n    else\n        uvData = new Vector.<Number>(numUvs, true);\n\n\n    // half cube dimensions\n    hw = width/2;\n    hh = height/2;\n    hd = height/2;\n\n    // Segment dimensions\n    dw = width/segmentsW;\n    dh = height/segmentsH;\n    dd = depth/segmentsD;\n\n    if (tile6) {\n        u_tile_dim = u_tile_step = 1/3;\n        v_tile_dim = v_tile_step = 1/2;\n    }\n    else {\n        u_tile_dim = v_tile_dim = 1;\n        u_tile_step = v_tile_step = 0;\n    }\n\n    for (i = 0; i <= segmentsW; i++) {\n        outer_uv = u_tile_dim * (i/segmentsW);\n\n        for (j = 0; j <= segmentsH; j++) {\n        uvData[uidx++] = outer_uv;\n        uvData[uidx++] = 1-v_tile_dim * (j/segmentsH);\n        uvData[uidx++] = 1-outer_uv;\n        uvData[uidx++] = 1-(v_tile_step + v_tile_dim * (j/segmentsH));\n        }\n    }\n\n    for (i = 0; i <= segmentsW; i++) {\n        outer_uv = u_tile_step + u_tile_dim * (i/segmentsW);\n\n        for (j = 0; j <= segmentsD; j++) {\n        uvData[uidx++] = outer_uv;\n        uvData[uidx++] = 1-v_tile_dim * (j/segmentsD);\n        uvData[uidx++] = 1-outer_uv;\n        uvData[uidx++] = 1-(v_tile_step + v_tile_dim * (j/segmentsD));\n        }\n    }\n\n    for (i = 0; i <= segmentsH; i++) {\n        outer_uv = v_tile_step + v_tile_dim * (i/segmentsW);\n\n        for (j = 0; j <= segmentsD; j++) {\n        uvData[uidx++] = (u_tile_dim * ((segmentsD-j)/segmentsD));\n        uvData[uidx++] = 1-outer_uv;\n        uvData[uidx++] = 1-(u_tile_dim * ((segmentsD-j)/segmentsD));\n        uvData[uidx++] = v_tile_step + v_tile_dim * ((segmentsW-i)/segmentsW);\n        }\n    }\n\n    target.updateUVData(uvData);\n    }\n\n}\n}\n\n/*\n * Local variables:\n * compile-command: \"make --directory=../../ all\"\n * End:\n */\n\n\n\n\nhttp://away3d.com/forum/viewthread/476/\n\n\u3053\u306e\u30d5\u30a9\u30fc\u30e9\u30e0\u3067\u4e0a\u304c\u3063\u3066\u308b\u65b9\u6cd5\u3067\u3000override \u3057\u3066\u307f\u305f\u3089\u3055\u3063\u304f\u308a\u52d5\u3044\u305f\u306e\u3067\u30e1\u30e2\u3002\n\u8b0e\u306einclude\u306f\u7121\u8996\u3057\u3066\u4e0b\u3055\u3044\u3002\n\n```ruby:AmCubeGeometry.as\n\n#include <cpp/AmDevelop.h>\n\npackage am.graphics\n{\n    import away3d.primitives.*;\n    import away3d.core.base.*;\n\npublic class AmCubeGeometry extends CubeGeometry\n{\n\n    public function AmCubeGeometry(width:Number, height:Number, depth:Number, segmentsW:uint, segmentsH:uint, segmentsD:uint, tile6:Boolean = true):void {\n\tsuper(width, height, depth, segmentsW, segmentsH, segmentsD, tile6);    \n    }\n\n    override protected function buildUVs(target : SubGeometry) : void\n    {\n\tvar uvData : Vector.<Number>;\n\tvar i : uint, j : uint, uidx  :  uint; // indices\n\tvar hw : Number, hh : Number, hd : Number; // halves\n\tvar dw : Number, dh : Number, dd : Number; // deltas\n\n\tvar u_tile_dim : Number, v_tile_dim : Number;\n\tvar u_tile_step : Number, v_tile_step : Number;\n\tvar outer_uv : Number;\n\n\tvar numUvs : uint = ((segmentsW + 1) * (segmentsH + 1) +\n\t\t\t     (segmentsW + 1) * (segmentsD + 1) +\n\t\t\t     (segmentsH + 1) * (segmentsD + 1)) * 4;\n\n\tif (target.UVData && numUvs == target.UVData.length)\n\t    uvData = target.UVData;\n\telse\n\t    uvData = new Vector.<Number>(numUvs, true);\n\n\n\t// half cube dimensions\n\thw = width/2;\n\thh = height/2;\n\thd = height/2;\n\n\t// Segment dimensions\n\tdw = width/segmentsW;\n\tdh = height/segmentsH;\n\tdd = depth/segmentsD;\n\n\tif (tile6) {\n\t    u_tile_dim = u_tile_step = 1/3;\n\t    v_tile_dim = v_tile_step = 1/2;\n\t}\n\telse {\n\t    u_tile_dim = v_tile_dim = 1;\n\t    u_tile_step = v_tile_step = 0;\n\t}\n\n\tfor (i = 0; i <= segmentsW; i++) {\n\t    outer_uv = u_tile_dim * (i/segmentsW);\n\n\t    for (j = 0; j <= segmentsH; j++) {\n\t\tuvData[uidx++] = outer_uv;\n\t\tuvData[uidx++] = 1-v_tile_dim * (j/segmentsH);\n\t\tuvData[uidx++] = 1-outer_uv;\n\t\tuvData[uidx++] = 1-(v_tile_step + v_tile_dim * (j/segmentsH));\n\t    }\n\t}\n\n\tfor (i = 0; i <= segmentsW; i++) {\n\t    outer_uv = u_tile_step + u_tile_dim * (i/segmentsW);\n\n\t    for (j = 0; j <= segmentsD; j++) {\n\t\tuvData[uidx++] = outer_uv;\n\t\tuvData[uidx++] = 1-v_tile_dim * (j/segmentsD);\n\t\tuvData[uidx++] = 1-outer_uv;\n\t\tuvData[uidx++] = 1-(v_tile_step + v_tile_dim * (j/segmentsD));\n\t    }\n\t}\n\n\tfor (i = 0; i <= segmentsH; i++) {\n\t    outer_uv = v_tile_step + v_tile_dim * (i/segmentsW);\n\n\t    for (j = 0; j <= segmentsD; j++) {\n\t\tuvData[uidx++] = (u_tile_dim * ((segmentsD-j)/segmentsD));\n\t\tuvData[uidx++] = 1-outer_uv;\n\t\tuvData[uidx++] = 1-(u_tile_dim * ((segmentsD-j)/segmentsD));\n\t\tuvData[uidx++] = v_tile_step + v_tile_dim * ((segmentsW-i)/segmentsW);\n\t    }\n\t}\n\n\ttarget.updateUVData(uvData);\n    }\n\n}\n}\n\n/*\n * Local variables:\n * compile-command: \"make --directory=../../ all\"\n * End:\n */\n\n```"}