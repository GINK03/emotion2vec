{"context": " More than 1 year has passed since last update.\u4ee5\u524d\u8a66\u3057\u305f\u30b3\u30fc\u30c9\u3092\u7121\u304f\u3055\u306a\u3044\u3046\u3061\u306b\u30e1\u30e2\u3002\nC/C++\u3067libcurl\u3092\u4f7f\u3063\u3066www.google.com\u304b\u3089GET\u3059\u308b\u30b5\u30f3\u30d7\u30eb\u3067\u3059\u3002\nFreeBSD 9.1\u3067clang/clang++\u3092\u4f7f\u3063\u3066\u8a66\u3057\u3066\u307f\u307e\u3057\u305f\u3002\n\u307e\u305a\u306fC\u3002\n\nlibcurl_test.c\n#include <stdio.h>\n#include <string.h>\n#include <curl/curl.h>\n\n#define MAX_BUF 65535\n\nstatic char wr_buf[MAX_BUF];\nstatic int  wr_index = 0;\n\nsize_t write_data(void *buffer, size_t size, size_t nmemb, void *userp)\n{\n        int segsize = size * nmemb;\n\n        if ((wr_index + segsize) > MAX_BUF) {\n                *(int *)userp = 1;\n                return 0;\n        }\n\n        memcpy((void *)&wr_buf[wr_index], buffer, (size_t)segsize);\n\n        wr_index += segsize;\n\n        wr_buf[wr_index] = '\\0';\n\n        return segsize;\n}\n\nint main(void)\n{\n        CURL *curl;\n        CURLcode ret;\n        int wr_error = 0;\n\n        curl = curl_easy_init();\n        if (curl == NULL) {\n                fprintf(stderr, \"curl_easy_init failed.\\n\");\n                return 1;\n        }\n\n        curl_easy_setopt(curl, CURLOPT_URL, \"www.google.co.jp\");\n        curl_easy_setopt(curl, CURLOPT_WRITEDATA, (void *)&wr_error);\n        curl_easy_setopt(curl, CURLOPT_WRITEFUNCTION, write_data);\n\n        //\n        ret = curl_easy_perform(curl);\n\n        printf(\"ret=%d (write_error=%d)\\n\", ret, wr_error);\n\n        if (ret == 0) {\n                printf(\"%s\\n\", wr_buf);\n        }\n\n        curl_easy_cleanup(curl);\n\n        return 0;\n}\n\n\n\u7d9a\u3044\u3066C++\u3002\n\nlibcurl_test.cpp\n#include <string> \n#include <iostream> \n#include <curl/curl.h> \n\nusing namespace std;\n\nsize_t callbackWrite(char *ptr, size_t size, size_t nmemb, string *stream)\n{\n        int dataLength = size * nmemb;\n        stream->append(ptr, dataLength);\n        return dataLength;\n}\n\nint main()\n{\n        CURL *curl;\n        CURLcode ret;\n\n        curl = curl_easy_init();\n        string chunk;\n\n        if (curl == NULL) {\n                cerr << \"curl_easy_init() failed\" << endl;\n                return 1;\n        }\n\n        curl_easy_setopt(curl, CURLOPT_URL, \"https://www.google.co.jp/\");\n        curl_easy_setopt(curl, CURLOPT_WRITEFUNCTION, callbackWrite);\n        curl_easy_setopt(curl, CURLOPT_WRITEDATA, &chunk);\n        ret = curl_easy_perform(curl);\n        curl_easy_cleanup(curl);\n\n        if (ret != CURLE_OK) {\n                cerr << \"curl_easy_perform() failed.\" << endl;\n                return 1;\n        }\n\n        cout << chunk << endl;\n\n        return 0;\n}\n\n\n\u4ee5\u524d\u8a66\u3057\u305f\u30b3\u30fc\u30c9\u3092\u7121\u304f\u3055\u306a\u3044\u3046\u3061\u306b\u30e1\u30e2\u3002\nC/C++\u3067libcurl\u3092\u4f7f\u3063\u3066www.google.com\u304b\u3089GET\u3059\u308b\u30b5\u30f3\u30d7\u30eb\u3067\u3059\u3002\n\nFreeBSD 9.1\u3067clang/clang++\u3092\u4f7f\u3063\u3066\u8a66\u3057\u3066\u307f\u307e\u3057\u305f\u3002\n\n\u307e\u305a\u306fC\u3002\n\n```c:libcurl_test.c\n#include <stdio.h>\n#include <string.h>\n#include <curl/curl.h>\n \n#define MAX_BUF 65535\n \nstatic char wr_buf[MAX_BUF];\nstatic int  wr_index = 0;\n \nsize_t write_data(void *buffer, size_t size, size_t nmemb, void *userp)\n{\n        int segsize = size * nmemb;\n \n        if ((wr_index + segsize) > MAX_BUF) {\n                *(int *)userp = 1;\n                return 0;\n        }\n \n        memcpy((void *)&wr_buf[wr_index], buffer, (size_t)segsize);\n \n        wr_index += segsize;\n \n        wr_buf[wr_index] = '\\0';\n \n        return segsize;\n}\n \nint main(void)\n{\n        CURL *curl;\n        CURLcode ret;\n        int wr_error = 0;\n \n        curl = curl_easy_init();\n        if (curl == NULL) {\n                fprintf(stderr, \"curl_easy_init failed.\\n\");\n                return 1;\n        }\n \n        curl_easy_setopt(curl, CURLOPT_URL, \"www.google.co.jp\");\n        curl_easy_setopt(curl, CURLOPT_WRITEDATA, (void *)&wr_error);\n        curl_easy_setopt(curl, CURLOPT_WRITEFUNCTION, write_data);\n \n        //\n        ret = curl_easy_perform(curl);\n \n        printf(\"ret=%d (write_error=%d)\\n\", ret, wr_error);\n \n        if (ret == 0) {\n                printf(\"%s\\n\", wr_buf);\n        }\n \n        curl_easy_cleanup(curl);\n \n        return 0;\n}\n```\n\n\u7d9a\u3044\u3066C++\u3002\n\n```cpp:libcurl_test.cpp\n#include <string> \n#include <iostream> \n#include <curl/curl.h> \n \nusing namespace std;\n \nsize_t callbackWrite(char *ptr, size_t size, size_t nmemb, string *stream)\n{\n        int dataLength = size * nmemb;\n        stream->append(ptr, dataLength);\n        return dataLength;\n}\n \nint main()\n{\n        CURL *curl;\n        CURLcode ret;\n \n        curl = curl_easy_init();\n        string chunk;\n \n        if (curl == NULL) {\n                cerr << \"curl_easy_init() failed\" << endl;\n                return 1;\n        }\n \n        curl_easy_setopt(curl, CURLOPT_URL, \"https://www.google.co.jp/\");\n        curl_easy_setopt(curl, CURLOPT_WRITEFUNCTION, callbackWrite);\n        curl_easy_setopt(curl, CURLOPT_WRITEDATA, &chunk);\n        ret = curl_easy_perform(curl);\n        curl_easy_cleanup(curl);\n \n        if (ret != CURLE_OK) {\n                cerr << \"curl_easy_perform() failed.\" << endl;\n                return 1;\n        }\n \n        cout << chunk << endl;\n \n        return 0;\n}\n```", "tags": ["C", "C++", "FreeBSD"]}