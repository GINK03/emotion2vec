{"context": "Distributed computing (Apache Hadoop, Spark, ...) Advent Calendar 2016\u306e\u4e8c\u65e5\u76ee\u3067\u3059\u3002HBase 1.2\u3067\u5c0e\u5165\u3055\u308c\u3001CDH 5.7\u4ee5\u964d\u306b\u542b\u307e\u308c\u308bSimpleRegionNormalizer\u3092\u7d39\u4ecb\u3057\u307e\u3059\u3002\u672c\u8a18\u4e8b\u3067\u5bfe\u8c61\u3068\u3059\u308b\u30ed\u30b8\u30c3\u30af\u306fCDH 5.9.0\u3068\u3057\u307e\u3059\u3002\n\u3055\u3066\u3001\u305d\u306e\u540d\u306e\u3068\u304a\u308a\u3053\u308c\u306f\u975e\u5e38\u306b\u30b7\u30f3\u30d7\u30eb\u306a\u6a5f\u80fd\u3067\u3001\u5b9a\u671f\u7684\u306b\u6307\u5b9a\u3055\u308c\u305f\u30c6\u30fc\u30d6\u30eb\u306e\u5e73\u5747\u30ea\u30fc\u30b8\u30e7\u30f3\u30b5\u30a4\u30ba\u3092\u30c1\u30a7\u30c3\u30af\u3057\u3001\uff08\u7b97\u8853\uff09\u5e73\u5747\u304b\u3089\u4e0a\u4e0b\u306b\u5927\u304d\u304f\u5916\u308c\u305f\u30b5\u30a4\u30ba\u306e\u30ea\u30fc\u30b8\u30e7\u30f3\u3092\u30b9\u30d7\u30ea\u30c3\u30c8\u3001\u3042\u308b\u3044\u306f\u30de\u30fc\u30b8\u3059\u308b\u3053\u3068\u3067\u30ea\u30fc\u30b8\u30e7\u30f3\u30b5\u30a4\u30ba\u306e\u504f\u308a\u3092\u89e3\u6d88\u3059\u308b\u3082\u306e\u3067\u3059\u3002\u30c1\u30a7\u30c3\u30af\u9593\u9694\u306f\u30c7\u30d5\u30a9\u30eb\u30c8\u30675\u5206(300000ms)\u3001HMaster\u306ehbase.normalizer.period\u306b\u3066ms\u3067\u660e\u793a\u7684\u306b\u6307\u5b9a\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\u305f\u3060\u3057\u3001\u30c6\u30fc\u30d6\u30eb\u5358\u4f4d\u3067\u52d5\u4f5c\u3059\u308b\u3053\u306e\u30c1\u30a7\u30c3\u30af\u306f\u3059\u3079\u3066\u306e\u30c6\u30fc\u30d6\u30eb\u3067\u30c7\u30d5\u30a9\u30eb\u30c8\u7121\u52b9\u3067\u3059\u3002\u6709\u52b9\u5316\u3059\u308b\u306b\u306f\u30c6\u30fc\u30d6\u30eb\u306e\u30d7\u30ed\u30d1\u30c6\u30a3\u3067\u660e\u793a\u7684\u306b\u8a2d\u5b9a\u3057\u3066\u3084\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\n> disable 'table_name'\n> alter 'table_name', 'NORMALIZATION_ENABLED' => true\n> normalizer_switch true\n> normalizer_enabled\ntrue\n> enable 'table_name'\n\n\u5177\u4f53\u7684\u306a\u30ed\u30b8\u30c3\u30af\u3092\u898b\u3066\u307f\u307e\u3057\u3087\u3046\u3002\n\nSimpleRegionNormalizer.java\n...\n    int candidateIdx = 0;\n    while (candidateIdx < tableRegions.size()) {\n      HRegionInfo hri = tableRegions.get(candidateIdx);\n      long regionSize = getRegionSize(hri);\n      // if the region is > 2 times larger than average, we split it, split\n      // is more high priority normalization action than merge.\n      if (regionSize > 2 * avgRegionSize) {\n        LOG.info(\"Table \" + table + \", large region \" + hri.getRegionNameAsString() + \" has size \"\n            + regionSize + \", more than twice avg size, splitting\");\n        plans.add(new SplitNormalizationPlan(hri, null));\n      } else {\n        if (candidateIdx == tableRegions.size()-1) {\n          break;\n        }\n        HRegionInfo hri2 = tableRegions.get(candidateIdx+1);\n        long regionSize2 = getRegionSize(hri2);\n        if (regionSize + regionSize2 < avgRegionSize) {\n          LOG.info(\"Table \" + table + \", small region size: \" + regionSize\n            + \" plus its neighbor size: \" + regionSize2\n            + \", less than the avg size \" + avgRegionSize + \", merging them\");\n          plans.add(new MergeNormalizationPlan(hri, hri2));\n          candidateIdx++;\n        }\n      }\n      candidateIdx++;\n    }\n...\n\n\n\u305f\u3063\u305f\u3053\u308c\u3060\u3051\u3067\u3059\u7b11 \nSimpleRegionNormalizer\u306f\u3001\u30c6\u30fc\u30d6\u30eb\u306e\u30ea\u30fc\u30b8\u30e7\u30f3\u3092\u3072\u3068\u3064\u305a\u3064\u3001\u307e\u305a\u306f\u5e73\u5747\u30b5\u30a4\u30ba\u306e2\u500d\u3092\u8d8a\u3048\u308b\u304b\u3069\u3046\u304b\u78ba\u8a8d\u3057\u307e\u3059\u3002\u3082\u30572\u500d\u4ee5\u4e0a\u3067\u3042\u308c\u3070\u30b9\u30d7\u30ea\u30c3\u30c8\u5bfe\u8c61\u3068\u3057\u3001\u6b21\u306e\u30ea\u30fc\u30b8\u30e7\u30f3\u3092\u7cbe\u67fb\u3057\u307e\u3059\u3002\u305d\u3046\u3067\u306a\u3051\u308c\u3070\u6b21\u306e\u30ea\u30fc\u30b8\u30e7\u30f3\u3068\u8db3\u3057\u305f\u30b5\u30a4\u30ba\u304c\u5e73\u5747\u4ee5\u4e0b\u304b\u3069\u3046\u304b\u78ba\u8a8d\u3057\u3001\u3082\u3057\u5e73\u5747\u306b\u6e80\u305f\u306a\u3051\u308c\u3070\u4e21\u30ea\u30fc\u30b8\u30e7\u30f3\u3092\u30de\u30fc\u30b8\u5bfe\u8c61\u3068\u3057\u3066\u6b21\u306e\u6b21\u306e\u30ea\u30fc\u30b8\u30e7\u30f3\u306e\u7cbe\u67fb\u306b\u5165\u308a\u307e\u3059\u3002\n\u3053\u306e\u3088\u3046\u306b\u30b9\u30d7\u30ea\u30c3\u30c8\u3042\u308b\u3044\u306f\u30de\u30fc\u30b8\u5bfe\u8c61\u306e\u30ea\u30fc\u30b8\u30e7\u30f3\u3092\u96c6\u3081\u3001HMaster\u304c\u3072\u3068\u3064\u305a\u3064\u5b9f\u884c\u3059\u308b\u308f\u3051\u3067\u3059\u3002\n\u306a\u304a\u3001\u30ea\u30fc\u30b8\u30e7\u30f3\u306e\u5408\u8a08\u30b5\u30a4\u30ba\u304c1MB\u306b\u6e80\u305f\u306a\u3044\u5834\u5408\u3001\u30b9\u30d7\u30ea\u30c3\u30c8\u3082\u30de\u30fc\u30b8\u3082\u767a\u751f\u3057\u307e\u305b\u3093\u3002\n[Distributed computing (Apache Hadoop, Spark, ...) Advent Calendar 2016](http://qiita.com/advent-calendar/2016/distributed-computing)\u306e\u4e8c\u65e5\u76ee\u3067\u3059\u3002HBase 1.2\u3067\u5c0e\u5165\u3055\u308c\u3001CDH 5.7\u4ee5\u964d\u306b\u542b\u307e\u308c\u308bSimpleRegionNormalizer\u3092\u7d39\u4ecb\u3057\u307e\u3059\u3002\u672c\u8a18\u4e8b\u3067\u5bfe\u8c61\u3068\u3059\u308b\u30ed\u30b8\u30c3\u30af\u306f[CDH 5.9.0](https://github.com/cloudera/hbase/blob/cdh5.9.0-release/hbase-server/src/main/java/org/apache/hadoop/hbase/master/normalizer/SimpleRegionNormalizer.java)\u3068\u3057\u307e\u3059\u3002\n\n\u3055\u3066\u3001\u305d\u306e\u540d\u306e\u3068\u304a\u308a\u3053\u308c\u306f\u975e\u5e38\u306b\u30b7\u30f3\u30d7\u30eb\u306a\u6a5f\u80fd\u3067\u3001\u5b9a\u671f\u7684\u306b\u6307\u5b9a\u3055\u308c\u305f\u30c6\u30fc\u30d6\u30eb\u306e\u5e73\u5747\u30ea\u30fc\u30b8\u30e7\u30f3\u30b5\u30a4\u30ba\u3092\u30c1\u30a7\u30c3\u30af\u3057\u3001\uff08\u7b97\u8853\uff09\u5e73\u5747\u304b\u3089\u4e0a\u4e0b\u306b\u5927\u304d\u304f\u5916\u308c\u305f\u30b5\u30a4\u30ba\u306e\u30ea\u30fc\u30b8\u30e7\u30f3\u3092\u30b9\u30d7\u30ea\u30c3\u30c8\u3001\u3042\u308b\u3044\u306f\u30de\u30fc\u30b8\u3059\u308b\u3053\u3068\u3067\u30ea\u30fc\u30b8\u30e7\u30f3\u30b5\u30a4\u30ba\u306e\u504f\u308a\u3092\u89e3\u6d88\u3059\u308b\u3082\u306e\u3067\u3059\u3002\u30c1\u30a7\u30c3\u30af\u9593\u9694\u306f\u30c7\u30d5\u30a9\u30eb\u30c8\u30675\u5206(300000ms)\u3001HMaster\u306e`hbase.normalizer.period`\u306b\u3066ms\u3067\u660e\u793a\u7684\u306b\u6307\u5b9a\u3059\u308b\u3053\u3068\u304c\u3067\u304d\u307e\u3059\u3002\n\n\u305f\u3060\u3057\u3001\u30c6\u30fc\u30d6\u30eb\u5358\u4f4d\u3067\u52d5\u4f5c\u3059\u308b\u3053\u306e\u30c1\u30a7\u30c3\u30af\u306f\u3059\u3079\u3066\u306e\u30c6\u30fc\u30d6\u30eb\u3067\u30c7\u30d5\u30a9\u30eb\u30c8\u7121\u52b9\u3067\u3059\u3002\u6709\u52b9\u5316\u3059\u308b\u306b\u306f\u30c6\u30fc\u30d6\u30eb\u306e\u30d7\u30ed\u30d1\u30c6\u30a3\u3067\u660e\u793a\u7684\u306b\u8a2d\u5b9a\u3057\u3066\u3084\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\u3002\n\n```\n> disable 'table_name'\n> alter 'table_name', 'NORMALIZATION_ENABLED' => true\n> normalizer_switch true\n> normalizer_enabled\ntrue\n> enable 'table_name'\n```\n\n\u5177\u4f53\u7684\u306a\u30ed\u30b8\u30c3\u30af\u3092\u898b\u3066\u307f\u307e\u3057\u3087\u3046\u3002\n\n```SimpleRegionNormalizer.java\n...\n    int candidateIdx = 0;\n    while (candidateIdx < tableRegions.size()) {\n      HRegionInfo hri = tableRegions.get(candidateIdx);\n      long regionSize = getRegionSize(hri);\n      // if the region is > 2 times larger than average, we split it, split\n      // is more high priority normalization action than merge.\n      if (regionSize > 2 * avgRegionSize) {\n        LOG.info(\"Table \" + table + \", large region \" + hri.getRegionNameAsString() + \" has size \"\n            + regionSize + \", more than twice avg size, splitting\");\n        plans.add(new SplitNormalizationPlan(hri, null));\n      } else {\n        if (candidateIdx == tableRegions.size()-1) {\n          break;\n        }\n        HRegionInfo hri2 = tableRegions.get(candidateIdx+1);\n        long regionSize2 = getRegionSize(hri2);\n        if (regionSize + regionSize2 < avgRegionSize) {\n          LOG.info(\"Table \" + table + \", small region size: \" + regionSize\n            + \" plus its neighbor size: \" + regionSize2\n            + \", less than the avg size \" + avgRegionSize + \", merging them\");\n          plans.add(new MergeNormalizationPlan(hri, hri2));\n          candidateIdx++;\n        }\n      }\n      candidateIdx++;\n    }\n...\n```\n\n\u305f\u3063\u305f\u3053\u308c\u3060\u3051\u3067\u3059\u7b11 \nSimpleRegionNormalizer\u306f\u3001\u30c6\u30fc\u30d6\u30eb\u306e\u30ea\u30fc\u30b8\u30e7\u30f3\u3092\u3072\u3068\u3064\u305a\u3064\u3001\u307e\u305a\u306f\u5e73\u5747\u30b5\u30a4\u30ba\u306e2\u500d\u3092\u8d8a\u3048\u308b\u304b\u3069\u3046\u304b\u78ba\u8a8d\u3057\u307e\u3059\u3002\u3082\u30572\u500d\u4ee5\u4e0a\u3067\u3042\u308c\u3070\u30b9\u30d7\u30ea\u30c3\u30c8\u5bfe\u8c61\u3068\u3057\u3001\u6b21\u306e\u30ea\u30fc\u30b8\u30e7\u30f3\u3092\u7cbe\u67fb\u3057\u307e\u3059\u3002\u305d\u3046\u3067\u306a\u3051\u308c\u3070\u6b21\u306e\u30ea\u30fc\u30b8\u30e7\u30f3\u3068\u8db3\u3057\u305f\u30b5\u30a4\u30ba\u304c\u5e73\u5747\u4ee5\u4e0b\u304b\u3069\u3046\u304b\u78ba\u8a8d\u3057\u3001\u3082\u3057\u5e73\u5747\u306b\u6e80\u305f\u306a\u3051\u308c\u3070\u4e21\u30ea\u30fc\u30b8\u30e7\u30f3\u3092\u30de\u30fc\u30b8\u5bfe\u8c61\u3068\u3057\u3066\u6b21\u306e\u6b21\u306e\u30ea\u30fc\u30b8\u30e7\u30f3\u306e\u7cbe\u67fb\u306b\u5165\u308a\u307e\u3059\u3002\n\n\u3053\u306e\u3088\u3046\u306b\u30b9\u30d7\u30ea\u30c3\u30c8\u3042\u308b\u3044\u306f\u30de\u30fc\u30b8\u5bfe\u8c61\u306e\u30ea\u30fc\u30b8\u30e7\u30f3\u3092\u96c6\u3081\u3001HMaster\u304c\u3072\u3068\u3064\u305a\u3064\u5b9f\u884c\u3059\u308b\u308f\u3051\u3067\u3059\u3002\n\n\u306a\u304a\u3001\u30ea\u30fc\u30b8\u30e7\u30f3\u306e\u5408\u8a08\u30b5\u30a4\u30ba\u304c1MB\u306b\u6e80\u305f\u306a\u3044\u5834\u5408\u3001\u30b9\u30d7\u30ea\u30c3\u30c8\u3082\u30de\u30fc\u30b8\u3082\u767a\u751f\u3057\u307e\u305b\u3093\u3002\n", "tags": ["hadoop", "HBase"]}