{"context": "NoSQL\u88fd\u54c1\u3067\u3042\u308bMarkLogic\u306e\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb\u7b2c\uff13\u56de\u3067\u3059\u3002\n\u30d0\u30a4\u30ca\u30ea\u30d5\u30a1\u30a4\u30eb\u3092\u8aad\u307f\u66f8\u304d\u3059\u308b\u30b5\u30f3\u30d7\u30eb\u3092\u4f5c\u3063\u3066\u307f\u307e\u3059\u3002\n\u4ee5\u4e0b\u306e\u624b\u9806\u3092\u65e2\u306b\u6e08\u307e\u305b\u3066\u3044\u308b\u524d\u63d0\u3067\u8aac\u660e\u3057\u307e\u3059\u3002\n\nMarkLogic\u306e\u30e6\u30fc\u30b6\u30fc\u306e\u4f5c\u6210\nJava\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u306e\u4f5c\u6210\nJava API\u30e9\u30a4\u30d6\u30e9\u30ea\u306e\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9\n\n\n\u6e96\u5099\n\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u306e\u30eb\u30fc\u30c8\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u306bmy.png\u3068\u3044\u3046\u540d\u79f0\u3067\u30d0\u30a4\u30ca\u30ea\u30d5\u30a1\u30a4\u30eb\u3092\u7f6e\u304d\u307e\u3059\u3002\n\n\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u306b\u66f8\u304d\u8fbc\u3080\u30af\u30e9\u30b9\u306e\u4f5c\u6210\n\nWriteBinaryData.java\n    public static void main(String[] args) {\n        // \u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u306e\u53d6\u5f97\n        DatabaseClient client = DatabaseClientFactory.newClient(\n                \"localhost\", 8000, \"aaa\", \"pass\", DatabaseClientFactory.Authentication.DIGEST\n        );\n\n        // DocumentManager\u306e\u53d6\u5f97\n        BinaryDocumentManager biMgr = client.newBinaryDocumentManager();\n\n        // \u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u306b\u30e1\u30bf\u30c7\u30fc\u30bf\u3082\u66f8\u304d\u8fbc\u307e\u308c\u308b\u3088\u3046\u306b\u6307\u5b9a\n        // (\u6307\u5b9a\u304c\u7121\u3044\u5834\u5408\u3001\u66f8\u304d\u8fbc\u307e\u308c\u306a\u3044)\n        biMgr.setMetadataExtraction(BinaryDocumentManager.MetadataExtraction.PROPERTIES);\n\n        // \u30d0\u30a4\u30ca\u30ea\u30c7\u30fc\u30bf\u3092\u66f8\u304d\u8fbc\u307f\n        biMgr.write(\n                \"/example/my.png\",\n                new FileHandle().with(new File(\"my.png\")).withMimetype(\"image/png\")\n        );\n\n        // \u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u306e\u89e3\u653e\n        client.release();\n\n    }\n\n\n\n\nBinaryDocumentManager\u3092\u4f7f\u3044\u307e\u3059\u3002\n\u3053\u306e\u30b5\u30f3\u30d7\u30eb\u3067\u306fFileHandle\u3092\u4f7f\u3063\u3066\u3044\u307e\u3059\u304c\u3001\u4ee5\u4e0b\u306eHandle\u306e\u3069\u308c\u3092\u4f7f\u3063\u3066\u3082\u826f\u3044\u3067\u3059\u3002\n\n\nFileHandle\nBytesHandle\nInputStreamHandle\nOutputStreamHandle\nURIHandle\n\n\n\n\n\u5b9f\u884c\n\u30d3\u30eb\u30c9\u3057\u3066\u5b9f\u884c\u3057\u307e\u3059\u3002\n19:47:01.551 [main] DEBUG c.m.client.DatabaseClientFactory - Creating new database client for server at localhost:8000\n19:47:01.576 [main] DEBUG c.m.client.impl.JerseyServices - Connecting to localhost at 8000 as aaa\n19:47:01.854 [main] INFO  c.m.client.impl.DocumentManagerImpl - Writing content for /example/my.png\n19:47:01.855 [main] DEBUG c.m.client.impl.JerseyServices - Sending /example/my.png document in transaction null\n19:47:03.121 [main] INFO  c.m.client.impl.DatabaseClientImpl - Releasing connection\n19:47:03.121 [main] DEBUG c.m.client.impl.JerseyServices - Releasing connection\n\n\u30af\u30a8\u30ea\u30b3\u30f3\u30bd\u30fc\u30eb\u3067\u78ba\u8a8d\u3057\u307e\u3059\u3002http://localhost:8000/qconsole/\n\n\u30ea\u30f3\u30af\u3092\u30af\u30ea\u30c3\u30af\u3059\u308b\u3068\u3001\u30a2\u30c3\u30d7\u30ed\u30fc\u30c9\u3057\u305f\u753b\u50cf\u304c\u8868\u793a\u3055\u308c\u307e\u3059\u3002\n\n\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u304b\u3089\u8aad\u307f\u8fbc\u3080\u30af\u30e9\u30b9\u306e\u4f5c\u6210\n\nReadBinaryData.java\n    public static void main(String[] args) {\n\n        // \u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u306e\u53d6\u5f97\n        DatabaseClient client = DatabaseClientFactory.newClient(\n                \"localhost\", 8000, \"aaa\", \"pass\", DatabaseClientFactory.Authentication.DIGEST\n        );\n\n        // DocumentManager\u306e\u53d6\u5f97\n        BinaryDocumentManager biMgr = client.newBinaryDocumentManager();\n\n        // \u30b9\u30c8\u30ea\u30fc\u30e0\u306b\u8aad\u307f\u8fbc\u3080\n        InputStream is =\n                biMgr.read(\"/example/my.png\", new InputStreamHandle()).get();\n\n        // \u30ed\u30fc\u30ab\u30eb\u30d5\u30a1\u30a4\u30eb\u306e\u30b9\u30c8\u30ea\u30fc\u30e0\u3092\u958b\u304f\n        try (FileOutputStream fos = new FileOutputStream(\"/tmp/my.png\")) {\n            // \u8aad\u307f\u8fbc\u3093\u3060\u5185\u5bb9\u3092\u8ee2\u8a18\n            ReadableByteChannel rbc = Channels.newChannel(is);\n            fos.getChannel().transferFrom(rbc, 0, Long.MAX_VALUE);\n\n        } catch (IOException e) {\n            // \u30a8\u30e9\u30fc\u304c\u767a\u751f\u3057\u305f\u3089\u4e2d\u65ad\n            throw new RuntimeException(e);\n\n        } finally {\n            // \u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u306e\u89e3\u653e\n            client.release();\n        }\n\n    }\n\n\n\n\nBinaryDocumentManager\u3092\u4f7f\u3044\u307e\u3059\u3002\n\u3053\u306e\u30b5\u30f3\u30d7\u30eb\u3067\u306fInputStreamHandle\u3092\u4f7f\u3063\u3066\u3044\u307e\u3059\u304c\u3001\u66f8\u304d\u8fbc\u307f\u306e\u5834\u5408\u3068\u540c\u69d8\u3001\u4ed6\u3082\u4f7f\u3048\u307e\u3059\u3002\n\n\n\u5b9f\u884c\n\u30d3\u30eb\u30c9\u3057\u3066\u5b9f\u884c\u3057\u307e\u3059\u3002\n19:50:15.740 [main] DEBUG c.m.client.DatabaseClientFactory - Creating new database client for server at localhost:8000\n19:50:15.761 [main] DEBUG c.m.client.impl.JerseyServices - Connecting to localhost at 8000 as aaa\n19:50:16.065 [main] INFO  c.m.client.impl.DocumentManagerImpl - Reading metadata and content for /example/my.png\n19:50:16.066 [main] DEBUG c.m.client.impl.JerseyServices - Getting /example/my.png in transaction null\n19:50:16.642 [main] INFO  c.m.client.impl.DatabaseClientImpl - Releasing connection\n19:50:16.642 [main] DEBUG c.m.client.impl.JerseyServices - Releasing connection\n\n\u5148\u307b\u3069\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u306b\u30a2\u30c3\u30d7\u30ed\u30fc\u30c9\u3057\u305f\u30d5\u30a1\u30a4\u30eb\u3068\u540c\u3058\u5185\u5bb9\u306e\u30d5\u30a1\u30a4\u30eb\u304c\u3001/tmp/my.png\u306b\u4f5c\u6210\u3055\u308c\u3066\u3044\u308b\u306f\u305a\u3067\u3059\u3002\nNoSQL\u88fd\u54c1\u3067\u3042\u308bMarkLogic\u306e\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb\u7b2c\uff13\u56de\u3067\u3059\u3002\n\n\u30d0\u30a4\u30ca\u30ea\u30d5\u30a1\u30a4\u30eb\u3092\u8aad\u307f\u66f8\u304d\u3059\u308b\u30b5\u30f3\u30d7\u30eb\u3092\u4f5c\u3063\u3066\u307f\u307e\u3059\u3002\n\n\u4ee5\u4e0b\u306e\u624b\u9806\u3092\u65e2\u306b\u6e08\u307e\u305b\u3066\u3044\u308b\u524d\u63d0\u3067\u8aac\u660e\u3057\u307e\u3059\u3002\n\n* [MarkLogic\u306e\u30e6\u30fc\u30b6\u30fc\u306e\u4f5c\u6210](http://qiita.com/makopo/items/0d024b827880111f8a8f#marklogic\u306e\u30e6\u30fc\u30b6\u30fc\u306e\u4f5c\u6210)\n* [Java\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u306e\u4f5c\u6210](http://qiita.com/makopo/items/0d024b827880111f8a8f#java\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u306e\u4f5c\u6210)\n* [Java API\u30e9\u30a4\u30d6\u30e9\u30ea\u306e\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9](http://qiita.com/makopo/items/0d024b827880111f8a8f#marklogic-java-api\u30e9\u30a4\u30d6\u30e9\u30ea\u306e\u30c0\u30a6\u30f3\u30ed\u30fc\u30c9)\n\n## \u6e96\u5099\n\n\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u306e\u30eb\u30fc\u30c8\u30c7\u30a3\u30ec\u30af\u30c8\u30ea\u306b```my.png```\u3068\u3044\u3046\u540d\u79f0\u3067\u30d0\u30a4\u30ca\u30ea\u30d5\u30a1\u30a4\u30eb\u3092\u7f6e\u304d\u307e\u3059\u3002\n\n## \u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u306b\u66f8\u304d\u8fbc\u3080\u30af\u30e9\u30b9\u306e\u4f5c\u6210\n\n```java:WriteBinaryData.java\n    public static void main(String[] args) {\n        // \u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u306e\u53d6\u5f97\n        DatabaseClient client = DatabaseClientFactory.newClient(\n                \"localhost\", 8000, \"aaa\", \"pass\", DatabaseClientFactory.Authentication.DIGEST\n        );\n\n        // DocumentManager\u306e\u53d6\u5f97\n        BinaryDocumentManager biMgr = client.newBinaryDocumentManager();\n\n        // \u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u306b\u30e1\u30bf\u30c7\u30fc\u30bf\u3082\u66f8\u304d\u8fbc\u307e\u308c\u308b\u3088\u3046\u306b\u6307\u5b9a\n        // (\u6307\u5b9a\u304c\u7121\u3044\u5834\u5408\u3001\u66f8\u304d\u8fbc\u307e\u308c\u306a\u3044)\n        biMgr.setMetadataExtraction(BinaryDocumentManager.MetadataExtraction.PROPERTIES);\n\n        // \u30d0\u30a4\u30ca\u30ea\u30c7\u30fc\u30bf\u3092\u66f8\u304d\u8fbc\u307f\n        biMgr.write(\n                \"/example/my.png\",\n                new FileHandle().with(new File(\"my.png\")).withMimetype(\"image/png\")\n        );\n\n        // \u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u306e\u89e3\u653e\n        client.release();\n\n    }\n```\n\n* ```BinaryDocumentManager```\u3092\u4f7f\u3044\u307e\u3059\u3002\n* \u3053\u306e\u30b5\u30f3\u30d7\u30eb\u3067\u306f```FileHandle```\u3092\u4f7f\u3063\u3066\u3044\u307e\u3059\u304c\u3001\u4ee5\u4e0b\u306eHandle\u306e\u3069\u308c\u3092\u4f7f\u3063\u3066\u3082\u826f\u3044\u3067\u3059\u3002\n    * ```FileHandle```\n    * ```BytesHandle```\n    * ```InputStreamHandle```\n    * ```OutputStreamHandle```\n    * ```URIHandle```\n\n### \u5b9f\u884c\n\n\u30d3\u30eb\u30c9\u3057\u3066\u5b9f\u884c\u3057\u307e\u3059\u3002\n\n```shell-session\n19:47:01.551 [main] DEBUG c.m.client.DatabaseClientFactory - Creating new database client for server at localhost:8000\n19:47:01.576 [main] DEBUG c.m.client.impl.JerseyServices - Connecting to localhost at 8000 as aaa\n19:47:01.854 [main] INFO  c.m.client.impl.DocumentManagerImpl - Writing content for /example/my.png\n19:47:01.855 [main] DEBUG c.m.client.impl.JerseyServices - Sending /example/my.png document in transaction null\n19:47:03.121 [main] INFO  c.m.client.impl.DatabaseClientImpl - Releasing connection\n19:47:03.121 [main] DEBUG c.m.client.impl.JerseyServices - Releasing connection\n```\n\n\u30af\u30a8\u30ea\u30b3\u30f3\u30bd\u30fc\u30eb\u3067\u78ba\u8a8d\u3057\u307e\u3059\u3002http://localhost:8000/qconsole/\n![png.png](https://qiita-image-store.s3.amazonaws.com/0/10290/a6970e50-bd51-12c2-00a3-a44594e4432d.png)\n\n\u30ea\u30f3\u30af\u3092\u30af\u30ea\u30c3\u30af\u3059\u308b\u3068\u3001\u30a2\u30c3\u30d7\u30ed\u30fc\u30c9\u3057\u305f\u753b\u50cf\u304c\u8868\u793a\u3055\u308c\u307e\u3059\u3002\n\n## \u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u304b\u3089\u8aad\u307f\u8fbc\u3080\u30af\u30e9\u30b9\u306e\u4f5c\u6210\n\n```java:ReadBinaryData.java\n    public static void main(String[] args) {\n\n        // \u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u306e\u53d6\u5f97\n        DatabaseClient client = DatabaseClientFactory.newClient(\n                \"localhost\", 8000, \"aaa\", \"pass\", DatabaseClientFactory.Authentication.DIGEST\n        );\n\n        // DocumentManager\u306e\u53d6\u5f97\n        BinaryDocumentManager biMgr = client.newBinaryDocumentManager();\n\n        // \u30b9\u30c8\u30ea\u30fc\u30e0\u306b\u8aad\u307f\u8fbc\u3080\n        InputStream is =\n                biMgr.read(\"/example/my.png\", new InputStreamHandle()).get();\n\n        // \u30ed\u30fc\u30ab\u30eb\u30d5\u30a1\u30a4\u30eb\u306e\u30b9\u30c8\u30ea\u30fc\u30e0\u3092\u958b\u304f\n        try (FileOutputStream fos = new FileOutputStream(\"/tmp/my.png\")) {\n            // \u8aad\u307f\u8fbc\u3093\u3060\u5185\u5bb9\u3092\u8ee2\u8a18\n            ReadableByteChannel rbc = Channels.newChannel(is);\n            fos.getChannel().transferFrom(rbc, 0, Long.MAX_VALUE);\n\n        } catch (IOException e) {\n            // \u30a8\u30e9\u30fc\u304c\u767a\u751f\u3057\u305f\u3089\u4e2d\u65ad\n            throw new RuntimeException(e);\n\n        } finally {\n            // \u30af\u30e9\u30a4\u30a2\u30f3\u30c8\u306e\u89e3\u653e\n            client.release();\n        }\n\n    }\n```\n\n* ```BinaryDocumentManager```\u3092\u4f7f\u3044\u307e\u3059\u3002\n* \u3053\u306e\u30b5\u30f3\u30d7\u30eb\u3067\u306f```InputStreamHandle```\u3092\u4f7f\u3063\u3066\u3044\u307e\u3059\u304c\u3001\u66f8\u304d\u8fbc\u307f\u306e\u5834\u5408\u3068\u540c\u69d8\u3001\u4ed6\u3082\u4f7f\u3048\u307e\u3059\u3002\n\n### \u5b9f\u884c\n\n\u30d3\u30eb\u30c9\u3057\u3066\u5b9f\u884c\u3057\u307e\u3059\u3002\n\n```shell-session\n19:50:15.740 [main] DEBUG c.m.client.DatabaseClientFactory - Creating new database client for server at localhost:8000\n19:50:15.761 [main] DEBUG c.m.client.impl.JerseyServices - Connecting to localhost at 8000 as aaa\n19:50:16.065 [main] INFO  c.m.client.impl.DocumentManagerImpl - Reading metadata and content for /example/my.png\n19:50:16.066 [main] DEBUG c.m.client.impl.JerseyServices - Getting /example/my.png in transaction null\n19:50:16.642 [main] INFO  c.m.client.impl.DatabaseClientImpl - Releasing connection\n19:50:16.642 [main] DEBUG c.m.client.impl.JerseyServices - Releasing connection\n```\n\n\u5148\u307b\u3069\u30c7\u30fc\u30bf\u30d9\u30fc\u30b9\u306b\u30a2\u30c3\u30d7\u30ed\u30fc\u30c9\u3057\u305f\u30d5\u30a1\u30a4\u30eb\u3068\u540c\u3058\u5185\u5bb9\u306e\u30d5\u30a1\u30a4\u30eb\u304c\u3001```/tmp/my.png```\u306b\u4f5c\u6210\u3055\u308c\u3066\u3044\u308b\u306f\u305a\u3067\u3059\u3002\n", "tags": ["MarkLogic", "nosql"]}