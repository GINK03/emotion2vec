{"context": " More than 1 year has passed since last update.\n\nBLE\u306e\u30da\u30ea\u30d5\u30a7\u30e9\u30eb\u3092\u4eca\u66f4\u5b9f\u88c5\u3057\u3066\u307f\u305f(iOS\u7de8)\n\n\u6e96\u5099\n\n(1) BLE\u7528\u306eUUID\u3092\u4f5c\u6210\u3059\u308b\n\u30bf\u30fc\u30df\u30ca\u30eb\u3092\u8d77\u52d5\u3057\u3066\u4ee5\u4e0b\u30b3\u30de\u30f3\u30c9\u3092\u5165\u529b\n$ uuidgen\n\n\u3059\u308b\u3068\u4ee5\u4e0b\u306e\u3088\u3046\u306aUUID\u304c\u81ea\u52d5\u751f\u6210\u3055\u308c\u308b\u306e\u3067\u30b3\u30d4\u30fc\u3057\u3066\u304a\u304f\n71DA3FD1-7E10-41C1-B16F-4430B506CDE7\n\nCCUUID\u3068\u3057\u3066\u5b9a\u7fa9\n\nBLEDefine.swift\n\n/** BLE\u3067\u7528\u3044\u308b\u30b5\u30fc\u30d3\u30b9\u7528\u306eUUID */\nlet BLEServiceUUID = CBUUID(string:\"71DA3FD1-7E10-41C1-B16F-4430B506CDE7\")\n\n/** BLE\u3067\u7528\u3044\u308b\u30ad\u30e3\u30e9\u30af\u30bf\u30ea\u30b9\u30c6\u30a3\u30c3\u30af\u7528\u306eUUID */\nlet BLECharacteristicUUID = CBUUID(string:\"E977DFF0-36D0-4B3B-89D5-575AAE17B6B3\")\n\n\n\n(2) CoreBluetooth Framework\u3092\u8ffd\u52a0\n\n\n(3) CoreBluetooth\u3092\u30a4\u30f3\u30dd\u30fc\u30c8\n\u4f7f\u3046\u30d5\u30a1\u30a4\u30eb\u5185\u306e\u5148\u982d\u8fba\u308a\u3067\u30a4\u30f3\u30dd\u30fc\u30c8\u6587\u3092\u66f8\u304f\n\nimport CoreBluetooth\n\n\n\nCoreBluetooth\u306eEnum\u5024\n\u30ed\u30b0\u3092\u51fa\u3059\u3068\u304d\u306b\u697d\u306a\u306e\u3067 name \u30d7\u30ed\u30d1\u30c6\u30a3\u3092\u8ffd\u52a0\u3057\u3066\u304a\u304d\u307e\u3059\n\nBLEEnumExtension.swift\nextension CBCentralManagerState\n{\n    var name : NSString {\n        get{\n            var enumName = \"CBCentralManagerState\"\n            var valueName = \"\"\n\n            switch self {\n            case .PoweredOff:\n            valueName = enumName + \"PoweredOff\"\n            case .PoweredOn:\n            valueName = enumName + \"PoweredOn\"\n            case .Resetting:\n            valueName = enumName + \"Resetting\"\n            case .Unauthorized:\n            valueName = enumName + \"Unauthorized\"\n            case .Unknown:\n            valueName = enumName + \"Unknown\"\n            case .Unsupported:\n            valueName = enumName + \"Unsupported\"\n            }\n\n            return valueName\n        }\n    }\n}\n\nextension CBPeripheralState\n{\n    var name : NSString {\n        get{\n            var enumName = \"CBPeripheralState\"\n            var valueName = \"\"\n\n            switch self {\n            case .Connected:\n                valueName = enumName + \"Connected\"\n            case .Connecting:\n                valueName = enumName + \"Connecting\"\n            case .Disconnected:\n                valueName = enumName + \"Disconnected\"\n            }\n\n            return valueName\n        }\n    }\n}\n\nextension CBPeripheralManagerState\n{\n    var name : NSString {\n        get{\n            var enumName = \"CBPeripheralManagerState\"\n            var valueName = \"\"\n\n            switch self {\n            case .PoweredOff:\n                valueName = enumName + \"PoweredOff\"\n            case .PoweredOn:\n                valueName = enumName + \"PoweredOn\"\n            case .Resetting:\n                valueName = enumName + \"Resetting\"\n            case .Unauthorized:\n                valueName = enumName + \"Unauthorized\"\n            case .Unknown:\n                valueName = enumName + \"Unknown\"\n            case .Unsupported:\n                valueName = enumName + \"Unsupported\"\n            }\n\n            return valueName\n        }\n    }\n}\n\n\n\n\u5b9f\u88c5\n\nBLEPeripheralManager.swift\n\nclass BLEPeripheralManager : NSObject {\n\n    // MARK: - Property\n\n    /** \u30b7\u30f3\u30b0\u30eb\u30c8\u30f3\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9 */\n    class var sharedManager : BLEPeripheralManager {\n        struct Static {\n            static let instance : BLEPeripheralManager = BLEPeripheralManager()\n        }\n        return Static.instance\n    }\n\n    /** BLE\u306e\u30da\u30ea\u30d5\u30a7\u30e9\u30eb\u30de\u30cd\u30fc\u30b8\u30e3\u30fc\u3001BLE\u767a\u4fe1\u5074\u3068\u3057\u3066\u306e\u6a5f\u80fd\u3092\u30b5\u30dd\u30fc\u30c8\u3059\u308b */\n    private var peripheralManager : CBPeripheralManager?\n\n    /** \u767a\u4fe1\u3059\u308b\u30ad\u30e3\u30e9\u30af\u30bf\u30ea\u30b9\u30c6\u30a3\u30c3\u30af */\n    private var characteristic = CBMutableCharacteristic(\n        type:BLECharacteristicUUID,\n        properties:CBCharacteristicProperties.Notify,\n        value:nil,\n        permissions:CBAttributePermissions.Readable)\n\n    /** \u767a\u4fe1\u3059\u308b\u30c7\u30fc\u30bf */\n    var dataToSend = NSData()\n\n    /** \u767a\u4fe1\u3059\u308b\u30c7\u30fc\u30bf\u306e\u30a4\u30f3\u30c7\u30c3\u30af\u30b9 */\n    private var sendDataIndex = 0\n\n    /** \u30d5\u30e9\u30b0\u5024 */\n    private var sendingEOM : Bool = false\n\n    // MARK: - Public\n\n    /** BLE\u306e\u30da\u30ea\u30d5\u30a7\u30e9\u30eb\u3092\u4f7f\u7528\u958b\u59cb\u3067\u304d\u308b\u72b6\u614b\u306b\u30bb\u30c3\u30c8\u30a2\u30c3\u30d7 */\n    func setup()\n    {\n        self.peripheralManager = CBPeripheralManager(delegate:self, queue:nil)\n    }\n\n    /** BLE\u306e\u30da\u30ea\u30d5\u30a7\u30e9\u30eb\u3092\u4f7f\u7528\u3067\u304d\u306a\u3044\u72b6\u614b\u306b\u3059\u308b */\n    func teardown()\n    {\n        self.peripheralManager = nil\n    }\n\n    /** \u30a2\u30c9\u30d0\u30bf\u30a4\u30ba\u3092\u958b\u59cb */\n    func startAdvertising()\n    {\n        self.peripheralManager?.startAdvertising([CBAdvertisementDataServiceUUIDsKey:[BLEServiceUUID]])\n    }\n\n    /** \u30a2\u30c9\u30d0\u30bf\u30a4\u30ba\u3092\u505c\u6b62 */\n    func stopAdvertising()\n    {\n        self.peripheralManager?.stopAdvertising()\n    }\n\n    // MARK: Private\n\n    /** \u30c7\u30fc\u30bf\u3092\u9001\u4fe1\u3059\u308b */\n    func sendData()\n    {\n        if self.sendingEOM {\n\n            var data = \"EOM\".dataUsingEncoding(NSUTF8StringEncoding)\n\n            var didSend : Bool = self.peripheralManager!.updateValue(\n                data,\n                forCharacteristic:self.characteristic,\n                onSubscribedCentrals: nil)\n\n            if didSend {\n                self.sendingEOM = false\n                return\n            }\n        }\n\n        var didSend = true\n\n        while didSend {\n\n            var amountToSend = self.dataToSend.length - self.sendDataIndex\n\n            if amountToSend > 20 {\n                amountToSend = 20\n            }\n\n            var chunk = NSData(bytes:self.dataToSend.bytes+self.sendDataIndex, length: amountToSend)\n\n            didSend = self.peripheralManager!.updateValue(\n                chunk,\n                forCharacteristic:self.characteristic,\n                onSubscribedCentrals: nil)\n\n            if !didSend {\n                return\n            }\n\n            var stringFromData = NSString(data:chunk, encoding:NSUTF8StringEncoding)\n\n            self.sendDataIndex += amountToSend\n\n            if self.sendDataIndex >= self.dataToSend.length {\n\n                self.sendingEOM = false\n\n                let eomSent : Bool = self.peripheralManager!.updateValue(\n                    \"EOM\".dataUsingEncoding(NSUTF8StringEncoding),\n                    forCharacteristic:self.characteristic,\n                    onSubscribedCentrals: nil)\n\n                if eomSent {\n                    sendingEOM = false\n                }\n\n                return\n            }\n        }\n    }\n}\n\n// MARK: - CBPeripheralManagerDelegate\n\nextension BLEPeripheralManager : CBPeripheralManagerDelegate\n{\n    func peripheralManager(\n        peripheral: CBPeripheralManager!,\n        central: CBCentral!,\n        didSubscribeToCharacteristic characteristic: CBCharacteristic!)\n    {\n        self.sendDataIndex = 0\n        self.sendData()\n    }\n\n    func peripheralManager(\n        peripheral: CBPeripheralManager!,\n        central: CBCentral!,\n        didUnsubscribeFromCharacteristic characteristic: CBCharacteristic!)\n    {\n        println(\"didUnsubscribeFromCharacteristic\")\n    }\n\n    func peripheralManager(\n        peripheral: CBPeripheralManager!,\n        didAddService service: CBService!,\n        error: NSError!)\n    {\n        if error == nil {\n            println(\"\u6b63\u5e38\u306b\u30b5\u30fc\u30d3\u30b9\u306e\u8ffd\u52a0\u304c\u5b8c\u4e86\u3057\u307e\u3057\u305f\")\n        } else {\n            println(\"\u30b5\u30fc\u30d3\u30b9\u306e\u8ffd\u52a0\u306b\u5931\u6557\u3057\u307e\u3057\u305f\")\n        }\n    }\n\n    func peripheralManager(\n        peripheral: CBPeripheralManager!,\n        didReceiveReadRequest request: CBATTRequest!)\n    {\n        println(\"didReceiveReadRequest\")\n    }\n\n    func peripheralManager(\n        peripheral: CBPeripheralManager!,\n        didReceiveWriteRequests requests: [AnyObject]!)\n    {\n        println(\"didReceiveWriteRequests\")\n    }\n\n    func peripheralManager(\n        peripheral: CBPeripheralManager!,\n        willRestoreState dict: [NSObject : AnyObject]!)\n    {\n        println(\"willRestoreState\")\n    }\n\n    func peripheralManagerDidStartAdvertising(\n        peripheral: CBPeripheralManager!,\n        error: NSError!)\n    {\n        if error == nil {\n            println(\"Peripheral\u304cAdvertising\u3092\u958b\u59cb\u3057\u307e\u3057\u305f\")\n        } else {\n            println(\"Peripheral\u304cAdvertising\u306e\u958b\u59cb\u306b\u5931\u6557\u3057\u307e\u3057\u305f\\(error)\")\n        }\n    }\n\n    func peripheralManagerDidUpdateState(peripheral: CBPeripheralManager!)\n    {\n        println(\"Peripheral\u306eState\u304c\u5909\u66f4\u3055\u308c\u307e\u3057\u305f(\u73fe\u5728\u306eState:\\(peripheral.state.name))\")\n\n        if peripheral.state != CBPeripheralManagerState.PoweredOn {\n            println(\"\u7570\u5e38\u306aState\u306e\u305f\u3081\u51e6\u7406\u3092\u7d42\u4e86\u3057\u307e\u3059\")\n            return;\n        }\n\n        var service = CBMutableService(type:BLEServiceUUID, primary:true)\n        service.characteristics = [self.characteristic]\n        self.peripheralManager?.addService(service)\n    }\n\n    func peripheralManagerIsReadyToUpdateSubscribers(peripheral: CBPeripheralManager!)\n    {\n        self.sendData()\n    }\n}\n\n\n\n# BLE\u306e\u30da\u30ea\u30d5\u30a7\u30e9\u30eb\u3092\u4eca\u66f4\u5b9f\u88c5\u3057\u3066\u307f\u305f(iOS\u7de8)\n\n## \u6e96\u5099\n\n### (1) BLE\u7528\u306eUUID\u3092\u4f5c\u6210\u3059\u308b\n\n\u30bf\u30fc\u30df\u30ca\u30eb\u3092\u8d77\u52d5\u3057\u3066\u4ee5\u4e0b\u30b3\u30de\u30f3\u30c9\u3092\u5165\u529b\n\n```\n$ uuidgen\n```\n\n\u3059\u308b\u3068\u4ee5\u4e0b\u306e\u3088\u3046\u306aUUID\u304c\u81ea\u52d5\u751f\u6210\u3055\u308c\u308b\u306e\u3067\u30b3\u30d4\u30fc\u3057\u3066\u304a\u304f\n\n```\n71DA3FD1-7E10-41C1-B16F-4430B506CDE7\n```\n\nCCUUID\u3068\u3057\u3066\u5b9a\u7fa9\n\n```swift:BLEDefine.swift\n\n/** BLE\u3067\u7528\u3044\u308b\u30b5\u30fc\u30d3\u30b9\u7528\u306eUUID */\nlet BLEServiceUUID = CBUUID(string:\"71DA3FD1-7E10-41C1-B16F-4430B506CDE7\")\n\n/** BLE\u3067\u7528\u3044\u308b\u30ad\u30e3\u30e9\u30af\u30bf\u30ea\u30b9\u30c6\u30a3\u30c3\u30af\u7528\u306eUUID */\nlet BLECharacteristicUUID = CBUUID(string:\"E977DFF0-36D0-4B3B-89D5-575AAE17B6B3\")\n```\n\n### (2) CoreBluetooth Framework\u3092\u8ffd\u52a0\n\n![add_corebluetooth_framework.png](https://qiita-image-store.s3.amazonaws.com/0/46751/024bac92-24d6-f1c8-21f6-fcd1b6150a2b.png)\n\n### (3) CoreBluetooth\u3092\u30a4\u30f3\u30dd\u30fc\u30c8\n\n\u4f7f\u3046\u30d5\u30a1\u30a4\u30eb\u5185\u306e\u5148\u982d\u8fba\u308a\u3067\u30a4\u30f3\u30dd\u30fc\u30c8\u6587\u3092\u66f8\u304f\n\n```swift\n\nimport CoreBluetooth\n\n```\n\n## CoreBluetooth\u306eEnum\u5024\n\n\u30ed\u30b0\u3092\u51fa\u3059\u3068\u304d\u306b\u697d\u306a\u306e\u3067 name \u30d7\u30ed\u30d1\u30c6\u30a3\u3092\u8ffd\u52a0\u3057\u3066\u304a\u304d\u307e\u3059\n\n```swift:BLEEnumExtension.swift\nextension CBCentralManagerState\n{\n    var name : NSString {\n        get{\n            var enumName = \"CBCentralManagerState\"\n            var valueName = \"\"\n            \n            switch self {\n            case .PoweredOff:\n            valueName = enumName + \"PoweredOff\"\n            case .PoweredOn:\n            valueName = enumName + \"PoweredOn\"\n            case .Resetting:\n            valueName = enumName + \"Resetting\"\n            case .Unauthorized:\n            valueName = enumName + \"Unauthorized\"\n            case .Unknown:\n            valueName = enumName + \"Unknown\"\n            case .Unsupported:\n            valueName = enumName + \"Unsupported\"\n            }\n            \n            return valueName\n        }\n    }\n}\n\nextension CBPeripheralState\n{\n    var name : NSString {\n        get{\n            var enumName = \"CBPeripheralState\"\n            var valueName = \"\"\n            \n            switch self {\n            case .Connected:\n                valueName = enumName + \"Connected\"\n            case .Connecting:\n                valueName = enumName + \"Connecting\"\n            case .Disconnected:\n                valueName = enumName + \"Disconnected\"\n            }\n            \n            return valueName\n        }\n    }\n}\n\nextension CBPeripheralManagerState\n{\n    var name : NSString {\n        get{\n            var enumName = \"CBPeripheralManagerState\"\n            var valueName = \"\"\n            \n            switch self {\n            case .PoweredOff:\n                valueName = enumName + \"PoweredOff\"\n            case .PoweredOn:\n                valueName = enumName + \"PoweredOn\"\n            case .Resetting:\n                valueName = enumName + \"Resetting\"\n            case .Unauthorized:\n                valueName = enumName + \"Unauthorized\"\n            case .Unknown:\n                valueName = enumName + \"Unknown\"\n            case .Unsupported:\n                valueName = enumName + \"Unsupported\"\n            }\n            \n            return valueName\n        }\n    }\n}\n```\n\n## \u5b9f\u88c5\n\n```swift:BLEPeripheralManager.swift\n\nclass BLEPeripheralManager : NSObject {\n    \n    // MARK: - Property\n    \n    /** \u30b7\u30f3\u30b0\u30eb\u30c8\u30f3\u30a4\u30f3\u30b9\u30bf\u30f3\u30b9 */\n    class var sharedManager : BLEPeripheralManager {\n        struct Static {\n            static let instance : BLEPeripheralManager = BLEPeripheralManager()\n        }\n        return Static.instance\n    }\n    \n    /** BLE\u306e\u30da\u30ea\u30d5\u30a7\u30e9\u30eb\u30de\u30cd\u30fc\u30b8\u30e3\u30fc\u3001BLE\u767a\u4fe1\u5074\u3068\u3057\u3066\u306e\u6a5f\u80fd\u3092\u30b5\u30dd\u30fc\u30c8\u3059\u308b */\n    private var peripheralManager : CBPeripheralManager?\n    \n    /** \u767a\u4fe1\u3059\u308b\u30ad\u30e3\u30e9\u30af\u30bf\u30ea\u30b9\u30c6\u30a3\u30c3\u30af */\n    private var characteristic = CBMutableCharacteristic(\n        type:BLECharacteristicUUID,\n        properties:CBCharacteristicProperties.Notify,\n        value:nil,\n        permissions:CBAttributePermissions.Readable)\n    \n    /** \u767a\u4fe1\u3059\u308b\u30c7\u30fc\u30bf */\n    var dataToSend = NSData()\n    \n    /** \u767a\u4fe1\u3059\u308b\u30c7\u30fc\u30bf\u306e\u30a4\u30f3\u30c7\u30c3\u30af\u30b9 */\n    private var sendDataIndex = 0\n    \n    /** \u30d5\u30e9\u30b0\u5024 */\n    private var sendingEOM : Bool = false\n    \n    // MARK: - Public\n    \n    /** BLE\u306e\u30da\u30ea\u30d5\u30a7\u30e9\u30eb\u3092\u4f7f\u7528\u958b\u59cb\u3067\u304d\u308b\u72b6\u614b\u306b\u30bb\u30c3\u30c8\u30a2\u30c3\u30d7 */\n    func setup()\n    {\n        self.peripheralManager = CBPeripheralManager(delegate:self, queue:nil)\n    }\n    \n    /** BLE\u306e\u30da\u30ea\u30d5\u30a7\u30e9\u30eb\u3092\u4f7f\u7528\u3067\u304d\u306a\u3044\u72b6\u614b\u306b\u3059\u308b */\n    func teardown()\n    {\n        self.peripheralManager = nil\n    }\n    \n    /** \u30a2\u30c9\u30d0\u30bf\u30a4\u30ba\u3092\u958b\u59cb */\n    func startAdvertising()\n    {\n        self.peripheralManager?.startAdvertising([CBAdvertisementDataServiceUUIDsKey:[BLEServiceUUID]])\n    }\n    \n    /** \u30a2\u30c9\u30d0\u30bf\u30a4\u30ba\u3092\u505c\u6b62 */\n    func stopAdvertising()\n    {\n        self.peripheralManager?.stopAdvertising()\n    }\n    \n    // MARK: Private\n    \n    /** \u30c7\u30fc\u30bf\u3092\u9001\u4fe1\u3059\u308b */\n    func sendData()\n    {\n        if self.sendingEOM {\n            \n            var data = \"EOM\".dataUsingEncoding(NSUTF8StringEncoding)\n            \n            var didSend : Bool = self.peripheralManager!.updateValue(\n                data,\n                forCharacteristic:self.characteristic,\n                onSubscribedCentrals: nil)\n            \n            if didSend {\n                self.sendingEOM = false\n                return\n            }\n        }\n        \n        var didSend = true\n        \n        while didSend {\n            \n            var amountToSend = self.dataToSend.length - self.sendDataIndex\n            \n            if amountToSend > 20 {\n                amountToSend = 20\n            }\n            \n            var chunk = NSData(bytes:self.dataToSend.bytes+self.sendDataIndex, length: amountToSend)\n            \n            didSend = self.peripheralManager!.updateValue(\n                chunk,\n                forCharacteristic:self.characteristic,\n                onSubscribedCentrals: nil)\n            \n            if !didSend {\n                return\n            }\n            \n            var stringFromData = NSString(data:chunk, encoding:NSUTF8StringEncoding)\n            \n            self.sendDataIndex += amountToSend\n            \n            if self.sendDataIndex >= self.dataToSend.length {\n                \n                self.sendingEOM = false\n                \n                let eomSent : Bool = self.peripheralManager!.updateValue(\n                    \"EOM\".dataUsingEncoding(NSUTF8StringEncoding),\n                    forCharacteristic:self.characteristic,\n                    onSubscribedCentrals: nil)\n                \n                if eomSent {\n                    sendingEOM = false\n                }\n                \n                return\n            }\n        }\n    }\n}\n\n// MARK: - CBPeripheralManagerDelegate\n\nextension BLEPeripheralManager : CBPeripheralManagerDelegate\n{\n    func peripheralManager(\n        peripheral: CBPeripheralManager!,\n        central: CBCentral!,\n        didSubscribeToCharacteristic characteristic: CBCharacteristic!)\n    {\n        self.sendDataIndex = 0\n        self.sendData()\n    }\n    \n    func peripheralManager(\n        peripheral: CBPeripheralManager!,\n        central: CBCentral!,\n        didUnsubscribeFromCharacteristic characteristic: CBCharacteristic!)\n    {\n        println(\"didUnsubscribeFromCharacteristic\")\n    }\n    \n    func peripheralManager(\n        peripheral: CBPeripheralManager!,\n        didAddService service: CBService!,\n        error: NSError!)\n    {\n        if error == nil {\n            println(\"\u6b63\u5e38\u306b\u30b5\u30fc\u30d3\u30b9\u306e\u8ffd\u52a0\u304c\u5b8c\u4e86\u3057\u307e\u3057\u305f\")\n        } else {\n            println(\"\u30b5\u30fc\u30d3\u30b9\u306e\u8ffd\u52a0\u306b\u5931\u6557\u3057\u307e\u3057\u305f\")\n        }\n    }\n    \n    func peripheralManager(\n        peripheral: CBPeripheralManager!,\n        didReceiveReadRequest request: CBATTRequest!)\n    {\n        println(\"didReceiveReadRequest\")\n    }\n    \n    func peripheralManager(\n        peripheral: CBPeripheralManager!,\n        didReceiveWriteRequests requests: [AnyObject]!)\n    {\n        println(\"didReceiveWriteRequests\")\n    }\n    \n    func peripheralManager(\n        peripheral: CBPeripheralManager!,\n        willRestoreState dict: [NSObject : AnyObject]!)\n    {\n        println(\"willRestoreState\")\n    }\n    \n    func peripheralManagerDidStartAdvertising(\n        peripheral: CBPeripheralManager!,\n        error: NSError!)\n    {\n        if error == nil {\n            println(\"Peripheral\u304cAdvertising\u3092\u958b\u59cb\u3057\u307e\u3057\u305f\")\n        } else {\n            println(\"Peripheral\u304cAdvertising\u306e\u958b\u59cb\u306b\u5931\u6557\u3057\u307e\u3057\u305f\\(error)\")\n        }\n    }\n    \n    func peripheralManagerDidUpdateState(peripheral: CBPeripheralManager!)\n    {\n        println(\"Peripheral\u306eState\u304c\u5909\u66f4\u3055\u308c\u307e\u3057\u305f(\u73fe\u5728\u306eState:\\(peripheral.state.name))\")\n        \n        if peripheral.state != CBPeripheralManagerState.PoweredOn {\n            println(\"\u7570\u5e38\u306aState\u306e\u305f\u3081\u51e6\u7406\u3092\u7d42\u4e86\u3057\u307e\u3059\")\n            return;\n        }\n        \n        var service = CBMutableService(type:BLEServiceUUID, primary:true)\n        service.characteristics = [self.characteristic]\n        self.peripheralManager?.addService(service)\n    }\n    \n    func peripheralManagerIsReadyToUpdateSubscribers(peripheral: CBPeripheralManager!)\n    {\n        self.sendData()\n    }\n}\n\n```\n", "tags": ["Swift", "bluetooth", "iOS"]}