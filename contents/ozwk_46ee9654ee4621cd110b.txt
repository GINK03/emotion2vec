{"tags": ["FPGA", "Verilog", "Chisel", "Scala", "HDL"], "context": "Chisel\u306f\u306a\u304b\u306a\u304b\u7d20\u6575\u306a\u3093\u3060\u3051\u3069\u3001\n\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb\u304c\u5f53\u7136\u306e\u3054\u3068\u304f\u30b3\u30f3\u30bd\u30fc\u30eb\u4f7f\u3063\u3066\u3066 \u6016\u3044 \u9762\u5012\u3060\u304b\u3089\u30a4\u30de\u30a4\u30c1\u624b\u304c\u51fa\u305b\u306a\u3044\u3002\n\u3058\u3083\u3042IDE\u3067\u4f7f\u3048\u3070\u79c1\u306e\u3088\u3046\u306aIT\u3086\u3068\u308a\u3082\u5b89\u5fc3\u3057\u3066\u304b\u3051\u307e\u3059\u306d\u3002\n\u306a\u304aEclipse\u521d\u3081\u3066\u89e6\u308b\u30ec\u30d9\u30eb\u306e\u4eba\u304c\u66f8\u3044\u3066\u307e\u3059\u3002\n\nChisel\nScala\u3067HDL\u304c\u66f8\u3051\u308b\u7d20\u6674\u3089\u3057\u3044\u30e9\u30a4\u30d6\u30e9\u30ea\u3002\nScala\u3092HDL\u306b\u5909\u63db(\u9ad8\u4f4d\u5408\u6210)\u3059\u308b\u306e\u3067\u306f\u306a\u3044\u3002\n\u3042\u304f\u307e\u3067\u5185\u90e8DSL\u3001Scala\u3067Verilog\u3092\u66f8\u304f\u305f\u3081\u306e\u30e9\u30a4\u30d6\u30e9\u30ea\u3002\nRISC-V\u3068\u3044\u3046\u547d\u4ee4\u30bb\u30c3\u30c8\u306eCPU\u304cChisel\u3067\u8a2d\u8a08\u3055\u308c\u3066\u516c\u958b\u3055\u308c\u3066\u3044\u308b\u3002\n\n\u5fc5\u8981\u306a\u3082\u306e\n\nScala IDE for Eclipse\nhttp://scala-ide.org/\n\nChisel + \u03b1\u304c\u65e2\u306b\u5c0e\u5165\u3055\u308c\u3066\u3044\u308b\u3061\u3087\u3046\u3069\u3044\u3044Eclipse\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\n\u81ea\u5206\u3067\u4f5c\u308b\u3088\u308a\nEclipse\u3067\u66f8\u3044\u3066\u3044\u308b\u4eba\u306e\u30ea\u30dd\u30b8\u30c8\u30ea\u63a2\u3057\u3066\u5f15\u3063\u5f35\u3063\u3066\u304f\u308b\u306e\u304c\u624b\u3063\u53d6\u308a\u65e9\u3044\n\u3068\u3044\u3046\u3053\u3068\u3067\u3053\u308c\u3092\u4f7f\u308f\u305b\u3066\u3082\u3089\u3046\u3002\nhttps://github.com/althebaker43/simple_chisel_counter\n\nMaven\u30d7\u30e9\u30b0\u30a4\u30f3\n\u4e0a\u8a18\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u304cMaven\u4f7f\u3063\u3066\u3044\u308b\u3088\u3046\u306a\u306e\u3067\u3002\n\n\u3068\u308a\u3042\u3048\u305a\u52d5\u304b\u3057\u3066\u307f\u308b\nN\u30d3\u30c3\u30c8\u30ab\u30a6\u30f3\u30bf\u30fc\u3068\u305d\u306e\u30c6\u30b9\u30c8(Scala JUnit)\u304c\u5165\u3063\u3066\u3044\u3066\n\u30c6\u30b9\u30c8\u3092\u8d70\u3089\u305b\u308b\u3068\u3061\u3083\u3093\u3068\u30d1\u30b9\u3059\u308b\u3002\n\nVerilog\u51fa\u529b\u3057\u3066\u307f\u308b\nobject example {\n  def main(args: Array[String]): Unit = {\n    val mainArgs = Array(\"--backend\",\"v\",\"--targetDir\",\"./verilog\")\n    chiselMain(mainArgs, () => Module(new Counter()))\n  }\n}\n\n\u3053\u3093\u306a\u30b3\u30fc\u30c9\u3092\u8ffd\u52a0\u3057\u3066\u5b9f\u884c\u3059\u308c\u3070verilog\u4e0b\u306b.v\u30d5\u30a1\u30a4\u30eb\u304c\u751f\u6210\u3055\u308c\u308b\n\nCounter.v\nmodule Counter(input clk, input reset,\n    output[3:0] io_out,\n    input  io_reset\n);\n\n  reg [3:0] countReg;\n  wire[3:0] T4;\n  wire[3:0] T0;\n  wire[3:0] T1;\n  wire[3:0] T2;\n  wire T3;\n\n`ifndef SYNTHESIS\n// synthesis translate_off\n  integer initvar;\n  initial begin\n    #0.002;\n    countReg = {1{$random}};\n  end\n// synthesis translate_on\n`endif\n\n  assign io_out = countReg;\n  assign T4 = reset ? 4'h0 : T0;\n  assign T0 = T3 ? T2 : T1;\n  assign T1 = io_reset ? 4'h0 : countReg;\n  assign T2 = countReg + 4'h1;\n  assign T3 = io_reset ^ 1'h1;\n\n  always @(posedge clk) begin\n    if(reset) begin\n      countReg <= 4'h0;\n    end else if(T3) begin\n      countReg <= T2;\n    end else if(io_reset) begin\n      countReg <= 4'h0;\n    end\n  end\nendmodule\n\n\n\u751f\u6210\u3055\u308c\u308b\u30b3\u30fc\u30c9\u306f\u53ef\u8aad\u6027\u7686\u7121\u306a\u306e\u3067\u3001\u30d6\u30e9\u30c3\u30af\u30dc\u30c3\u30af\u30b9\u3068\u3057\u3066\u5272\u308a\u304d\u308a\u307e\u3057\u3087\u3046\u3002\nChisel\u306f\u306a\u304b\u306a\u304b\u7d20\u6575\u306a\u3093\u3060\u3051\u3069\u3001\n\u30c1\u30e5\u30fc\u30c8\u30ea\u30a2\u30eb\u304c\u5f53\u7136\u306e\u3054\u3068\u304f\u30b3\u30f3\u30bd\u30fc\u30eb\u4f7f\u3063\u3066\u3066 <s>\u6016\u3044</s> \u9762\u5012\u3060\u304b\u3089\u30a4\u30de\u30a4\u30c1\u624b\u304c\u51fa\u305b\u306a\u3044\u3002\n\u3058\u3083\u3042IDE\u3067\u4f7f\u3048\u3070\u79c1\u306e\u3088\u3046\u306aIT\u3086\u3068\u308a\u3082\u5b89\u5fc3\u3057\u3066\u304b\u3051\u307e\u3059\u306d\u3002\n\n\u306a\u304aEclipse\u521d\u3081\u3066\u89e6\u308b\u30ec\u30d9\u30eb\u306e\u4eba\u304c\u66f8\u3044\u3066\u307e\u3059\u3002\n\n#Chisel\nScala\u3067HDL\u304c\u66f8\u3051\u308b\u7d20\u6674\u3089\u3057\u3044\u30e9\u30a4\u30d6\u30e9\u30ea\u3002\nScala\u3092HDL\u306b\u5909\u63db(\u9ad8\u4f4d\u5408\u6210)\u3059\u308b<b>\u306e\u3067\u306f\u306a\u3044</b>\u3002\n\u3042\u304f\u307e\u3067\u5185\u90e8DSL\u3001Scala\u3067Verilog\u3092\u66f8\u304f\u305f\u3081\u306e\u30e9\u30a4\u30d6\u30e9\u30ea\u3002\n\nRISC-V\u3068\u3044\u3046\u547d\u4ee4\u30bb\u30c3\u30c8\u306eCPU\u304cChisel\u3067\u8a2d\u8a08\u3055\u308c\u3066\u516c\u958b\u3055\u308c\u3066\u3044\u308b\u3002\n\n#\u5fc5\u8981\u306a\u3082\u306e\n##Scala IDE for Eclipse\nhttp://scala-ide.org/\n\n##Chisel + \u03b1\u304c\u65e2\u306b\u5c0e\u5165\u3055\u308c\u3066\u3044\u308b\u3061\u3087\u3046\u3069\u3044\u3044Eclipse\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\n\u81ea\u5206\u3067\u4f5c\u308b\u3088\u308a\nEclipse\u3067\u66f8\u3044\u3066\u3044\u308b\u4eba\u306e\u30ea\u30dd\u30b8\u30c8\u30ea\u63a2\u3057\u3066\u5f15\u3063\u5f35\u3063\u3066\u304f\u308b\u306e\u304c\u624b\u3063\u53d6\u308a\u65e9\u3044\n\u3068\u3044\u3046\u3053\u3068\u3067\u3053\u308c\u3092\u4f7f\u308f\u305b\u3066\u3082\u3089\u3046\u3002\nhttps://github.com/althebaker43/simple_chisel_counter\n\n##Maven\u30d7\u30e9\u30b0\u30a4\u30f3\n\u4e0a\u8a18\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u304cMaven\u4f7f\u3063\u3066\u3044\u308b\u3088\u3046\u306a\u306e\u3067\u3002\n\n#\u3068\u308a\u3042\u3048\u305a\u52d5\u304b\u3057\u3066\u307f\u308b\nN\u30d3\u30c3\u30c8\u30ab\u30a6\u30f3\u30bf\u30fc\u3068\u305d\u306e\u30c6\u30b9\u30c8(Scala JUnit)\u304c\u5165\u3063\u3066\u3044\u3066\n\u30c6\u30b9\u30c8\u3092\u8d70\u3089\u305b\u308b\u3068\u3061\u3083\u3093\u3068\u30d1\u30b9\u3059\u308b\u3002\n\n#Verilog\u51fa\u529b\u3057\u3066\u307f\u308b\n\n```scala\nobject example {\n  def main(args: Array[String]): Unit = {\n    val mainArgs = Array(\"--backend\",\"v\",\"--targetDir\",\"./verilog\")\n    chiselMain(mainArgs, () => Module(new Counter()))\n  }\n}\n```\n\n\u3053\u3093\u306a\u30b3\u30fc\u30c9\u3092\u8ffd\u52a0\u3057\u3066\u5b9f\u884c\u3059\u308c\u3070verilog\u4e0b\u306b.v\u30d5\u30a1\u30a4\u30eb\u304c\u751f\u6210\u3055\u308c\u308b\n\n```verilog:Counter.v\nmodule Counter(input clk, input reset,\n    output[3:0] io_out,\n    input  io_reset\n);\n\n  reg [3:0] countReg;\n  wire[3:0] T4;\n  wire[3:0] T0;\n  wire[3:0] T1;\n  wire[3:0] T2;\n  wire T3;\n\n`ifndef SYNTHESIS\n// synthesis translate_off\n  integer initvar;\n  initial begin\n    #0.002;\n    countReg = {1{$random}};\n  end\n// synthesis translate_on\n`endif\n\n  assign io_out = countReg;\n  assign T4 = reset ? 4'h0 : T0;\n  assign T0 = T3 ? T2 : T1;\n  assign T1 = io_reset ? 4'h0 : countReg;\n  assign T2 = countReg + 4'h1;\n  assign T3 = io_reset ^ 1'h1;\n\n  always @(posedge clk) begin\n    if(reset) begin\n      countReg <= 4'h0;\n    end else if(T3) begin\n      countReg <= T2;\n    end else if(io_reset) begin\n      countReg <= 4'h0;\n    end\n  end\nendmodule\n```\n\n\u751f\u6210\u3055\u308c\u308b\u30b3\u30fc\u30c9\u306f\u53ef\u8aad\u6027\u7686\u7121\u306a\u306e\u3067\u3001\u30d6\u30e9\u30c3\u30af\u30dc\u30c3\u30af\u30b9\u3068\u3057\u3066\u5272\u308a\u304d\u308a\u307e\u3057\u3087\u3046\u3002\n"}