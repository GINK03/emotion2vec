{"context": "\u79cb\u6708\u306eTFT\u6db2\u6676\u30e2\u30b8\u30e5\u30fc\u30eb\u3067\u753b\u50cf\u3092\u7c21\u5358\u306b\u8868\u793a\u51fa\u6765\u305f\u306e\u3067\u8a18\u4e8b\u3092\u66f8\u3044\u3066\u307f\u307e\u3057\u305f\u3002\n\u4eca\u56de\u306f\u3068\u308a\u3042\u3048\u305a\u753b\u50cf\u3092\u8868\u793a\u3057\u3066\u307f\u305f\u304b\u3063\u305f\u306e\u3067\u3001\u51fa\u6765\u308b\u3060\u3051\u7c21\u5358\u306b\u59a5\u5354\u3057\u3066\u4f5c\u6210\u3057\u307e\u3057\u305f\u3002\u307e\u305a\u59a5\u5354\u70b91\u306f\u3001TFT\u6db2\u6676\u306fRGB\u304c\u305d\u308c\u305e\u308c8bit\u5206\u3042\u308b\u304c\u914d\u7dda\u304c\u5927\u5909\u306a\u306e\u30674bit\u5206\u51fa\u529b\u3057\u3001TFT\u6db2\u6676\u306eRGB\u305d\u308c\u305e\u308c\u306e\u4e0a\u4f4d4bit\u3068\u63a5\u7d9a\u3057\u307e\u3057\u305f(\u8868\u793a\u51fa\u6765\u308c\u3070\u3042\u3068\u304b\u3089bit\u62e1\u5f35\u3059\u308b\u3060\u3051\u306a\u306e\u3067)\u3002\u59a5\u5354\u70b92\u306f\u3001TFT\u6db2\u6676\u306f\u753b\u7d20\u6570480x272\u3067\u3042\u308b\u304c\u30e1\u30e2\u30ea\u30d6\u30ed\u30c3\u30af\uff11\u3064\u3067\u306f\u53ce\u307e\u3089\u306a\u3044\u306e\u3067240x136\u3092\u62e1\u5927\u3057\u3066\u51fa\u529b\u3059\u308b(dram\u304b\u30e1\u30e2\u30ea\u30d6\u30ed\u30c3\u30af\u30924\u3064\u306b\u3059\u308c\u3070\u6539\u5584\u53ef\u80fd\u3060\u3068\u601d\u3044\u307e\u3059)\u3002\n\n\n\u4f7f\u7528\u3057\u305f\u74b0\u5883\n\nVivado 2015.4\nVisual Studio 2013\n\n\n\n\u4f7f\u7528\u3057\u305f\u3082\u306e\n\n\uff34\uff26\uff34\u6db2\u6676\u30e2\u30b8\u30e5\u30fc\u30eb\uff21\uff34\uff2d\uff10\uff14\uff13\uff10\uff24\uff12\uff15\n\uff3a\uff39\uff22\uff2f\u3000\uff3a\uff59\uff4e\uff51\uff0d\uff17\uff10\uff10\uff10\u3000\u8a55\u4fa1\u30dc\u30fc\u30c9\n\u30d5\u30ec\u30ad\u30b3\u30cd\u30af\u30bf\uff24\uff29\uff30\u5316\u57fa\u677f\n\n\n\n\u69cb\u6210\n\nZYBO\u306eClock Sources\u3067\u3042\u308b125MHz\u304b\u3089IP Catalog\u306eClocking Wizard\u3092\u7528\u3044\u30669MHz\u3092\u751f\u6210\u3057\u307e\u3059(dclk\u3067\u3042\u308a\u3053\u308c\u3088\u308ahsync,vsync\u751f\u6210)\u3002IP Catalog\u306eBlock Memory Generator\u3092\u7528\u3044\u306612bit\u306e240x136words\u306e\u30d6\u30ed\u30c3\u30afRAM\u3092\u751f\u6210\u3057\u3001Memory Initialization\u3067\u4e88\u3081\u753b\u50cf\u30c7\u30fc\u30bf\u3092\u5165\u529b\u3057\u3001\u305d\u308c\u3092\u8aad\u307f\u51fa\u3057TFT\u6db2\u6676\u306b\u8868\u793a\u3057\u307e\u3057\u305f\u3002\n\uff34\uff26\uff34\u6db2\u6676\u30e2\u30b8\u30e5\u30fc\u30eb\u306e\u30bf\u30a4\u30df\u30f3\u30b0\u30c1\u30e3\u30fc\u30c8\u3088\u308adclk\u3092\u7528\u3044\u3066hsync\u3068vsync\u3092\u751f\u6210\u3057\u3001\u30bf\u30a4\u30df\u30f3\u30b0\u3092\u5408\u308f\u305b\u3066\u753b\u7d20\u30c7\u30fc\u30bf\u3092\u8aad\u307f\u51fa\u3059\u3088\u3046\u306b\u8a18\u8ff0\u3057\u307e\u3059\u3002\u4ee5\u4e0b\u306b\u52d5\u304b\u3057\u305f\u6642\u306e\u30b3\u30fc\u30c9\u3092\u8f09\u305b\u307e\u3059(\u52d5\u4f5c\u306f\u78ba\u8a8d\u3057\u307e\u3057\u305f\u304c\u30bf\u30a4\u30df\u30f3\u30b0\u306e\u6b63\u78ba\u6027\u306f\u4fdd\u8a3c\u3057\u307e\u305b\u3093)\u3002\nmodule display_test(\n    input        reset,\n    input        clk,\n    output [3:0] r,\n    output [3:0] g,\n    output [3:0] b,\n    output reg hsync,\n    output reg vsync,\n    output wire dclk\n    );\n\n    //125MHz to 9MHz\n    clk_wiz_0 clk_wiz_0_inst(\n       .clk_in1(clk),\n       .clk_out1(dclk),\n       .reset(1'b0)\n    );\n\n    //block RAM 240 x 136\n    blk_mem_gen_0 blk_mem_gen_0_inst(\n      .clka(dclk),    // input wire clka\n      .wea(1'b0),      // input wire [0 : 0] wea\n      .addra(16'h0),  // input wire [15 : 0] addra\n      .dina(12'h0),    // input wire [11 : 0] dina\n      .clkb(dclk),    // input wire clkb\n      .enb(1'b1),      // input wire enb\n      .addrb(addrb),  // input wire [15 : 0] addrb\n      .doutb({r,g,b})  // output wire [11 : 0] doutb\n    );\n\n    //display parameter\n    parameter H_PERIOD = 531;\n    parameter H_BPORCH = 43;\n    parameter V_PERIOD = 288;\n    parameter V_BPORCH = 12;\n\n    reg  [9:0]  hcnt;\n    reg  [9:0]  pcnt;\n    wire [15:0] addrb;\n    wire [9:0] p_addr;\n    wire [9:0] h_addr;\n\n    always @(posedge dclk) begin\n        if(pcnt == (H_PERIOD-1)) begin\n            pcnt <= 0;\n        end else begin\n            pcnt <= pcnt + 1;\n        end\n    end\n\n    always @(posedge dclk) begin\n        if(pcnt < (H_BPORCH-1))begin\n            hsync <= 0;        \n        end else begin\n            hsync <= 1;\n        end\n    end\n\n    always @(posedge hsync) begin\n        if((V_PERIOD-1) == hcnt) begin\n            hcnt <= 0;            \n        end else begin\n            hcnt <= hcnt + 1;\n        end\n    end\n\n    always @(posedge dclk) begin\n        if((V_BPORCH-1) < hcnt) begin\n            vsync <= 1;\n        end else begin\n            vsync <= 0;\n        end\n    end\n\n    assign p_addr = (hsync == 1 && vsync == 1) ? pcnt - 43 : 10'h0;\n    assign h_addr = (hsync == 1 && vsync == 1) ? hcnt - 12 : 10'h0;\n    assign addrb  = (hsync == 1 && vsync == 1) ? p_addr[9:1] + h_addr[9:1] * 240 : 12'h0;\n\nendmodule\n\n\u30cf\u30fc\u30c9\u95a2\u9023\u306f\u3053\u308c\u3067\u7d42\u4e86\u3067\u3059\u3002\u66f8\u3044\u305f\u30b3\u30fc\u30c9\u3082\u3053\u308c\u304f\u3089\u3044\u306a\u306e\u3067\u7c21\u5358\u3060\u3068\u601d\u3044\u307e\u3059\u3002\n\u6b21\u306bMemory Initialization\u306e\u30c7\u30fc\u30bf\u751f\u6210\u306b\u3064\u3044\u3066\u66f8\u304d\u307e\u3059\u3002\u5165\u529b\u753b\u50cf\u306f240x136\u3092\u7528\u3044\u307e\u3059\u3002Visual Studio2013\u3067OpenCV(2.4.10)\u3092\u7528\u3044\u3066jpg\u3084png\u753b\u50cf\u304b\u3089raw\u30c7\u30fc\u30bf(RGB\u30924bit\u5316)\u3092\u53d6\u308a\u51fa\u3057\u304b\u3064Memory Initialization\u306e\u30d5\u30a9\u30fc\u30de\u30c3\u30c8\u306b\u5408\u308f\u305b\u3066\u30c6\u30ad\u30b9\u30c8\u3092\u51fa\u529b\u3059\u308b\u30b3\u30fc\u30c9\u3092\u8a18\u8ff0\u3057\u307e\u3059\u3002\u4ee5\u4e0b\u306b\u30b3\u30fc\u30c9\u3092\u8f09\u305b\u307e\u3059(\u79c1\u306e\u74b0\u5883\u3067\u306f\u4e0a\u624b\u304f\u884c\u304d\u307e\u3057\u305f\u304c\u52d5\u4f5c\u4fdd\u8a3c\u51fa\u6765\u307e\u305b\u3093)\u3002\n#include <opencv2/nonfree/nonfree.hpp>\n#include <opencv/highgui.h>\nvoid main()\n{\n\n    FILE *outputfile;         \n    outputfile = fopen(\"d.txt\", \"w\");  \n    if (outputfile == NULL) {         \n        printf(\"cannot open\\n\");         \n        exit(1);                         \n    }\n\n    // \u753b\u50cf\u306e\u8aad\u307f\u8fbc\u307f\n    cv::Mat srcImg = cv::imread(\"yamada.jpg\");\n\n    for (int y = 0; y < srcImg.rows; y++) {\n        cv::Vec3b* ptr = srcImg.ptr(y);\n        for (int x = 0; x < srcImg.cols; x++) {\n            cv::Vec3b bgr = ptr[x];\n            fprintf(outputfile, \"%x%x%x,\\n\", bgr[2] >> 4, bgr[1] >> 4, bgr[0] >> 4); \n        }\n    }\n    fclose(outputfile);\n}\n\n\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u306e\u4f5c\u308a\u65b9\u306f\u3001\u8aac\u660e\u3057\u3066\u3044\u307e\u305b\u3093\u304c\u4e0a\uff12\u3064\u306e\u30b3\u30fc\u30c9\u3067\u3053\u3093\u306a\u611f\u3058\u3067\u753b\u50cf\u304c\u51fa\u307e\u3057\u305f\u3002\n\u3063\u306d\u3059\u3054\u304f\u7c21\u5358\u3067\u3057\u3087\uff01\uff1f\n\n\u753b\u50cf\u306e\u901a\u308a\u4eca\u306f\u30b8\u30e3\u30f3\u30d1\u7dda\u3067\u63a5\u7d9a\u3057\u3066\u3044\u308b\u306e\u3067\u3001\u4eca\u5ea6\u306f\u57fa\u677f\u306b\u3057\u3066\u904a\u3073\u3084\u3059\u304f\u3057\u305f\u3044\u3067\u3059\u3002\n\u53c2\u8003URL\nMemory Initialization\u306ecoe\u30d5\u30a9\u30fc\u30de\u30c3\u30c8\nOpencv \u753b\u7d20\u62bd\u51fa\nC\u8a00\u8a9e\u30d5\u30a1\u30a4\u30eb\u51fa\u529b\n\u79cb\u6708\u306eTFT\u6db2\u6676\u30e2\u30b8\u30e5\u30fc\u30eb\u3067\u753b\u50cf\u3092\u7c21\u5358\u306b\u8868\u793a\u51fa\u6765\u305f\u306e\u3067\u8a18\u4e8b\u3092\u66f8\u3044\u3066\u307f\u307e\u3057\u305f\u3002\n\u4eca\u56de\u306f\u3068\u308a\u3042\u3048\u305a\u753b\u50cf\u3092\u8868\u793a\u3057\u3066\u307f\u305f\u304b\u3063\u305f\u306e\u3067\u3001\u51fa\u6765\u308b\u3060\u3051\u7c21\u5358\u306b\u59a5\u5354\u3057\u3066\u4f5c\u6210\u3057\u307e\u3057\u305f\u3002\u307e\u305a\u59a5\u5354\u70b91\u306f\u3001TFT\u6db2\u6676\u306fRGB\u304c\u305d\u308c\u305e\u308c8bit\u5206\u3042\u308b\u304c\u914d\u7dda\u304c\u5927\u5909\u306a\u306e\u30674bit\u5206\u51fa\u529b\u3057\u3001TFT\u6db2\u6676\u306eRGB\u305d\u308c\u305e\u308c\u306e\u4e0a\u4f4d4bit\u3068\u63a5\u7d9a\u3057\u307e\u3057\u305f(\u8868\u793a\u51fa\u6765\u308c\u3070\u3042\u3068\u304b\u3089bit\u62e1\u5f35\u3059\u308b\u3060\u3051\u306a\u306e\u3067)\u3002\u59a5\u5354\u70b92\u306f\u3001TFT\u6db2\u6676\u306f\u753b\u7d20\u6570480x272\u3067\u3042\u308b\u304c\u30e1\u30e2\u30ea\u30d6\u30ed\u30c3\u30af\uff11\u3064\u3067\u306f\u53ce\u307e\u3089\u306a\u3044\u306e\u3067240x136\u3092\u62e1\u5927\u3057\u3066\u51fa\u529b\u3059\u308b(dram\u304b\u30e1\u30e2\u30ea\u30d6\u30ed\u30c3\u30af\u30924\u3064\u306b\u3059\u308c\u3070\u6539\u5584\u53ef\u80fd\u3060\u3068\u601d\u3044\u307e\u3059)\u3002\n\n- \u4f7f\u7528\u3057\u305f\u74b0\u5883\n - Vivado 2015.4\n - Visual Studio 2013\n\n- \u4f7f\u7528\u3057\u305f\u3082\u306e\n - [\uff34\uff26\uff34\u6db2\u6676\u30e2\u30b8\u30e5\u30fc\u30eb\uff21\uff34\uff2d\uff10\uff14\uff13\uff10\uff24\uff12\uff15](http://akizukidenshi.com/catalog/g/gP-09250/)\n - [\uff3a\uff39\uff22\uff2f\u3000\uff3a\uff59\uff4e\uff51\uff0d\uff17\uff10\uff10\uff10\u3000\u8a55\u4fa1\u30dc\u30fc\u30c9](http://akizukidenshi.com/catalog/g/gM-07740/)\n - [\u30d5\u30ec\u30ad\u30b3\u30cd\u30af\u30bf\uff24\uff29\uff30\u5316\u57fa\u677f](http://akizukidenshi.com/catalog/g/gP-10187/)\n\n\u69cb\u6210\n![20160602222332.png](https://qiita-image-store.s3.amazonaws.com/0/97833/a846fe98-f901-2ede-a6cb-755da256cd0b.png)\n\nZYBO\u306eClock Sources\u3067\u3042\u308b125MHz\u304b\u3089IP Catalog\u306eClocking Wizard\u3092\u7528\u3044\u30669MHz\u3092\u751f\u6210\u3057\u307e\u3059(dclk\u3067\u3042\u308a\u3053\u308c\u3088\u308ahsync,vsync\u751f\u6210)\u3002IP Catalog\u306eBlock Memory Generator\u3092\u7528\u3044\u306612bit\u306e240x136words\u306e\u30d6\u30ed\u30c3\u30afRAM\u3092\u751f\u6210\u3057\u3001Memory Initialization\u3067\u4e88\u3081\u753b\u50cf\u30c7\u30fc\u30bf\u3092\u5165\u529b\u3057\u3001\u305d\u308c\u3092\u8aad\u307f\u51fa\u3057TFT\u6db2\u6676\u306b\u8868\u793a\u3057\u307e\u3057\u305f\u3002\n\n\uff34\uff26\uff34\u6db2\u6676\u30e2\u30b8\u30e5\u30fc\u30eb\u306e\u30bf\u30a4\u30df\u30f3\u30b0\u30c1\u30e3\u30fc\u30c8\u3088\u308adclk\u3092\u7528\u3044\u3066hsync\u3068vsync\u3092\u751f\u6210\u3057\u3001\u30bf\u30a4\u30df\u30f3\u30b0\u3092\u5408\u308f\u305b\u3066\u753b\u7d20\u30c7\u30fc\u30bf\u3092\u8aad\u307f\u51fa\u3059\u3088\u3046\u306b\u8a18\u8ff0\u3057\u307e\u3059\u3002\u4ee5\u4e0b\u306b\u52d5\u304b\u3057\u305f\u6642\u306e\u30b3\u30fc\u30c9\u3092\u8f09\u305b\u307e\u3059(\u52d5\u4f5c\u306f\u78ba\u8a8d\u3057\u307e\u3057\u305f\u304c\u30bf\u30a4\u30df\u30f3\u30b0\u306e\u6b63\u78ba\u6027\u306f\u4fdd\u8a3c\u3057\u307e\u305b\u3093)\u3002\n\n```verilog\nmodule display_test(\n  \tinput        reset,\n  \tinput        clk,\n\toutput [3:0] r,\n\toutput [3:0] g,\n\toutput [3:0] b,\n\toutput reg hsync,\n\toutput reg vsync,\n\toutput wire dclk\n\t);\n\t\n\t//125MHz to 9MHz\n\tclk_wiz_0 clk_wiz_0_inst(\n\t   .clk_in1(clk),\n\t   .clk_out1(dclk),\n\t   .reset(1'b0)\n\t);\n    \n    //block RAM 240 x 136\n    blk_mem_gen_0 blk_mem_gen_0_inst(\n      .clka(dclk),    // input wire clka\n      .wea(1'b0),      // input wire [0 : 0] wea\n      .addra(16'h0),  // input wire [15 : 0] addra\n      .dina(12'h0),    // input wire [11 : 0] dina\n      .clkb(dclk),    // input wire clkb\n      .enb(1'b1),      // input wire enb\n      .addrb(addrb),  // input wire [15 : 0] addrb\n      .doutb({r,g,b})  // output wire [11 : 0] doutb\n    );\n    \n    //display parameter\n    parameter H_PERIOD = 531;\n    parameter H_BPORCH = 43;\n    parameter V_PERIOD = 288;\n    parameter V_BPORCH = 12;\n    \n    reg  [9:0]  hcnt;\n    reg  [9:0]  pcnt;\n    wire [15:0] addrb;\n    wire [9:0] p_addr;\n    wire [9:0] h_addr;\n    \n    always @(posedge dclk) begin\n        if(pcnt == (H_PERIOD-1)) begin\n            pcnt <= 0;\n        end else begin\n            pcnt <= pcnt + 1;\n        end\n    end\n    \n    always @(posedge dclk) begin\n        if(pcnt < (H_BPORCH-1))begin\n            hsync <= 0;        \n        end else begin\n            hsync <= 1;\n        end\n    end\n    \n    always @(posedge hsync) begin\n        if((V_PERIOD-1) == hcnt) begin\n            hcnt <= 0;            \n        end else begin\n            hcnt <= hcnt + 1;\n        end\n    end\n    \n    always @(posedge dclk) begin\n        if((V_BPORCH-1) < hcnt) begin\n            vsync <= 1;\n        end else begin\n            vsync <= 0;\n        end\n    end\n    \n    assign p_addr = (hsync == 1 && vsync == 1) ? pcnt - 43 : 10'h0;\n    assign h_addr = (hsync == 1 && vsync == 1) ? hcnt - 12 : 10'h0;\n    assign addrb  = (hsync == 1 && vsync == 1) ? p_addr[9:1] + h_addr[9:1] * 240 : 12'h0;\n\nendmodule\n```\n\u30cf\u30fc\u30c9\u95a2\u9023\u306f\u3053\u308c\u3067\u7d42\u4e86\u3067\u3059\u3002\u66f8\u3044\u305f\u30b3\u30fc\u30c9\u3082\u3053\u308c\u304f\u3089\u3044\u306a\u306e\u3067\u7c21\u5358\u3060\u3068\u601d\u3044\u307e\u3059\u3002\n\u6b21\u306bMemory Initialization\u306e\u30c7\u30fc\u30bf\u751f\u6210\u306b\u3064\u3044\u3066\u66f8\u304d\u307e\u3059\u3002\u5165\u529b\u753b\u50cf\u306f240x136\u3092\u7528\u3044\u307e\u3059\u3002Visual Studio2013\u3067OpenCV(2.4.10)\u3092\u7528\u3044\u3066jpg\u3084png\u753b\u50cf\u304b\u3089raw\u30c7\u30fc\u30bf(RGB\u30924bit\u5316)\u3092\u53d6\u308a\u51fa\u3057\u304b\u3064Memory Initialization\u306e\u30d5\u30a9\u30fc\u30de\u30c3\u30c8\u306b\u5408\u308f\u305b\u3066\u30c6\u30ad\u30b9\u30c8\u3092\u51fa\u529b\u3059\u308b\u30b3\u30fc\u30c9\u3092\u8a18\u8ff0\u3057\u307e\u3059\u3002\u4ee5\u4e0b\u306b\u30b3\u30fc\u30c9\u3092\u8f09\u305b\u307e\u3059(\u79c1\u306e\u74b0\u5883\u3067\u306f\u4e0a\u624b\u304f\u884c\u304d\u307e\u3057\u305f\u304c\u52d5\u4f5c\u4fdd\u8a3c\u51fa\u6765\u307e\u305b\u3093)\u3002\n\n```cpp\n#include <opencv2/nonfree/nonfree.hpp>\n#include <opencv/highgui.h>\nvoid main()\n{\n\n\tFILE *outputfile;         \n\toutputfile = fopen(\"d.txt\", \"w\");  \n\tif (outputfile == NULL) {         \n\t\tprintf(\"cannot open\\n\");         \n\t\texit(1);                         \n\t}\n\n\t// \u753b\u50cf\u306e\u8aad\u307f\u8fbc\u307f\n\tcv::Mat srcImg = cv::imread(\"yamada.jpg\");\n\n\tfor (int y = 0; y < srcImg.rows; y++) {\n\t\tcv::Vec3b* ptr = srcImg.ptr(y);\n\t\tfor (int x = 0; x < srcImg.cols; x++) {\n\t\t\tcv::Vec3b bgr = ptr[x];\n\t\t\tfprintf(outputfile, \"%x%x%x,\\n\", bgr[2] >> 4, bgr[1] >> 4, bgr[0] >> 4); \n\t\t}\n\t}\n\tfclose(outputfile);\n}\n```\n\n\u30d7\u30ed\u30b8\u30a7\u30af\u30c8\u306e\u4f5c\u308a\u65b9\u306f\u3001\u8aac\u660e\u3057\u3066\u3044\u307e\u305b\u3093\u304c\u4e0a\uff12\u3064\u306e\u30b3\u30fc\u30c9\u3067\u3053\u3093\u306a\u611f\u3058\u3067\u753b\u50cf\u304c\u51fa\u307e\u3057\u305f\u3002\n\u3063\u306d\u3059\u3054\u304f\u7c21\u5358\u3067\u3057\u3087\uff01\uff1f\n![DSC_0532.JPG](https://qiita-image-store.s3.amazonaws.com/0/97833/4884e574-5d18-0c56-1e78-5736c2777155.jpeg)\n\u753b\u50cf\u306e\u901a\u308a\u4eca\u306f\u30b8\u30e3\u30f3\u30d1\u7dda\u3067\u63a5\u7d9a\u3057\u3066\u3044\u308b\u306e\u3067\u3001\u4eca\u5ea6\u306f\u57fa\u677f\u306b\u3057\u3066\u904a\u3073\u3084\u3059\u304f\u3057\u305f\u3044\u3067\u3059\u3002\n\n\u53c2\u8003URL\nMemory Initialization\u306e[coe\u30d5\u30a9\u30fc\u30de\u30c3\u30c8](http://japan.xilinx.com/support/documentation/sw_manuals_j/xilinx11/cgn_r_coe_file_syntax.htm)\n[Opencv \u753b\u7d20\u62bd\u51fa](http://d.akiroom.com/2012-06/opencv-pixel-read-write-get-set/)\n[C\u8a00\u8a9e\u30d5\u30a1\u30a4\u30eb\u51fa\u529b](http://ylb.jp/2006b/proc/fileio/fileoutput.html)\n\n\n\n", "tags": ["FPGA", "\u96fb\u5b50\u5de5\u4f5c"]}