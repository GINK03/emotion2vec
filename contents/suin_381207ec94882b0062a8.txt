{"context": " More than 1 year has passed since last update.\u4ee5\u524d\u3001Scala\u3067\u5217\u6319\u578b(enum)\u3092\u4f5c\u308b\u3067Enumeration\u3092\u4f7f\u308f\u305a\u306bsealed trait\u3068object\u3092\u4f7f\u3063\u3066\u5217\u6319\u578b\u3092\u5b9f\u73fe\u3059\u308b\u65b9\u6cd5\u3092\u7d39\u4ecb\u3057\u305f\u3002\u4eca\u56de\u306f\u3053\u306e\u5217\u6319\u578b\u3092spray-json\u3092\u4f7f\u3063\u3066object\u3092JSON\u306b\u5909\u63db\u3059\u308b\u65b9\u6cd5\u3092\u7d39\u4ecb\u3059\u308b\u3002\u57fa\u672c\u7684\u306aspray-json\u306e\u4f7f\u3044\u65b9\u306fScala\u3067JSON\u3092\u30a8\u30f3\u30b3\u30fc\u30c9\u30fb\u30c7\u30b3\u30fc\u30c9\u3057\u305f\u3044\u3067\u5c11\u3057\u8aac\u660e\u3057\u3066\u3044\u308b\u3002\nspray-json\u3067object\u3092JSON\u306b\u30a8\u30f3\u30b3\u30fc\u30c9\u30fb\u30c7\u30b3\u30fc\u30c9\u3059\u308b\u306b\u306f\u3001\u81ea\u524d\u3067\u8aad\u307f\u66f8\u304d\u306e\u51e6\u7406\u3092\u5b9a\u7fa9\u3059\u308b\u5fc5\u8981\u304c\u3042\u308b\u3002\u4e0b\u306e\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u3067\u306fTestResultStatusFormat\u304c\u305d\u308c\u306b\u5f53\u305f\u308b\u3002\n// \u30c9\u30e1\u30a4\u30f3\u30aa\u30d6\u30b8\u30a7\u30af\u30c8(\u53c2\u52a0\u8005\u62db\u5f85\u30b7\u30b9\u30c6\u30e0\u306e\u4f8b)\ncase class Invitee(name: String, status: AttendingStatus) // \u62db\u5f85\u5ba2\nsealed trait AttendingStatus\ncase object Going extends AttendingStatus // \u53c2\u52a0\ncase object NotGoing extends AttendingStatus // \u4e0d\u53c2\u52a0\ncase object Maybe extends AttendingStatus // \u672a\u5b9a\n\n// JSON\u306e\u30de\u30c3\u30d4\u30f3\u30b0\u3092\u5b9a\u7fa9\u3059\u308b\nimport spray.json._\nobject MyJsonProtocol extends DefaultJsonProtocol {\n  implicit object TestResultStatusFormat extends RootJsonFormat[AttendingStatus] {\n    override def read(json: JsValue): AttendingStatus = json match {\n      case JsString(\"going\")     => Going\n      case JsString(\"not_going\") => NotGoing\n      case JsString(\"maybe\")     => Maybe\n      case x                     => deserializationError(\"Expected AttendingStatus as `going`, `not_going` or `maybe`, but got \" + x)\n    }\n    override def write(obj: AttendingStatus): JsValue = obj match {\n      case Going    => JsString(\"going\")\n      case NotGoing => JsString(\"not_going\")\n      case Maybe    => JsString(\"maybe\")\n    }\n  }\n  implicit lazy val InviteeFormat = jsonFormat2(Invitee)\n}\n\ndef json\u306b\u5909\u63db\u3059\u308b() = {\n  import MyJsonProtocol._\n  val invitee = Invitee(\"alice\", NotGoing)\n  assert(invitee.toJson.compactPrint == \"\"\"{\"name\":\"alice\",\"status\":\"not_going\"}\"\"\")\n}\n\ndef json\u304b\u3089\u5909\u63db\u3059\u308b() = {\n  import MyJsonProtocol._\n  val jsonData = \"\"\"{\"name\":\"bob\",\"status\":\"maybe\"}\"\"\"\n  assert(jsonData.parseJson.convertTo[Invitee] == Invitee(\"bob\", Maybe))\n}\n\njson\u306b\u5909\u63db\u3059\u308b()\njson\u304b\u3089\u5909\u63db\u3059\u308b()\n\n\n\n\u4ee5\u524d\u3001[Scala\u3067\u5217\u6319\u578b(enum)\u3092\u4f5c\u308b]\u3067`Enumeration`\u3092\u4f7f\u308f\u305a\u306b`sealed trait`\u3068`object`\u3092\u4f7f\u3063\u3066\u5217\u6319\u578b\u3092\u5b9f\u73fe\u3059\u308b\u65b9\u6cd5\u3092\u7d39\u4ecb\u3057\u305f\u3002\u4eca\u56de\u306f\u3053\u306e\u5217\u6319\u578b\u3092spray-json\u3092\u4f7f\u3063\u3066`object`\u3092JSON\u306b\u5909\u63db\u3059\u308b\u65b9\u6cd5\u3092\u7d39\u4ecb\u3059\u308b\u3002\u57fa\u672c\u7684\u306aspray-json\u306e\u4f7f\u3044\u65b9\u306f[Scala\u3067JSON\u3092\u30a8\u30f3\u30b3\u30fc\u30c9\u30fb\u30c7\u30b3\u30fc\u30c9\u3057\u305f\u3044]\u3067\u5c11\u3057\u8aac\u660e\u3057\u3066\u3044\u308b\u3002\n\nspray-json\u3067`object`\u3092JSON\u306b\u30a8\u30f3\u30b3\u30fc\u30c9\u30fb\u30c7\u30b3\u30fc\u30c9\u3059\u308b\u306b\u306f\u3001\u81ea\u524d\u3067\u8aad\u307f\u66f8\u304d\u306e\u51e6\u7406\u3092\u5b9a\u7fa9\u3059\u308b\u5fc5\u8981\u304c\u3042\u308b\u3002\u4e0b\u306e\u30b5\u30f3\u30d7\u30eb\u30b3\u30fc\u30c9\u3067\u306f`TestResultStatusFormat`\u304c\u305d\u308c\u306b\u5f53\u305f\u308b\u3002\n\n```scala\n// \u30c9\u30e1\u30a4\u30f3\u30aa\u30d6\u30b8\u30a7\u30af\u30c8(\u53c2\u52a0\u8005\u62db\u5f85\u30b7\u30b9\u30c6\u30e0\u306e\u4f8b)\ncase class Invitee(name: String, status: AttendingStatus) // \u62db\u5f85\u5ba2\nsealed trait AttendingStatus\ncase object Going extends AttendingStatus // \u53c2\u52a0\ncase object NotGoing extends AttendingStatus // \u4e0d\u53c2\u52a0\ncase object Maybe extends AttendingStatus // \u672a\u5b9a\n\n// JSON\u306e\u30de\u30c3\u30d4\u30f3\u30b0\u3092\u5b9a\u7fa9\u3059\u308b\nimport spray.json._\nobject MyJsonProtocol extends DefaultJsonProtocol {\n  implicit object TestResultStatusFormat extends RootJsonFormat[AttendingStatus] {\n    override def read(json: JsValue): AttendingStatus = json match {\n      case JsString(\"going\")     => Going\n      case JsString(\"not_going\") => NotGoing\n      case JsString(\"maybe\")     => Maybe\n      case x                     => deserializationError(\"Expected AttendingStatus as `going`, `not_going` or `maybe`, but got \" + x)\n    }\n    override def write(obj: AttendingStatus): JsValue = obj match {\n      case Going    => JsString(\"going\")\n      case NotGoing => JsString(\"not_going\")\n      case Maybe    => JsString(\"maybe\")\n    }\n  }\n  implicit lazy val InviteeFormat = jsonFormat2(Invitee)\n}\n\ndef json\u306b\u5909\u63db\u3059\u308b() = {\n  import MyJsonProtocol._\n  val invitee = Invitee(\"alice\", NotGoing)\n  assert(invitee.toJson.compactPrint == \"\"\"{\"name\":\"alice\",\"status\":\"not_going\"}\"\"\")\n}\n\ndef json\u304b\u3089\u5909\u63db\u3059\u308b() = {\n  import MyJsonProtocol._\n  val jsonData = \"\"\"{\"name\":\"bob\",\"status\":\"maybe\"}\"\"\"\n  assert(jsonData.parseJson.convertTo[Invitee] == Invitee(\"bob\", Maybe))\n}\n\njson\u306b\u5909\u63db\u3059\u308b()\njson\u304b\u3089\u5909\u63db\u3059\u308b()\n```\n\n[Scala\u3067\u5217\u6319\u578b(enum)\u3092\u4f5c\u308b]: http://qiita.com/suin/items/5e514e8edef7aba4a0fa\n[Scala\u3067JSON\u3092\u30a8\u30f3\u30b3\u30fc\u30c9\u30fb\u30c7\u30b3\u30fc\u30c9\u3057\u305f\u3044]: http://qiita.com/suin/items/f69e1e9ca638538e6e27\n", "tags": ["JSON", "Scala", "spray"]}