{"context": "\n\n\u672cQiita\u306b\u3064\u3044\u3066\nJSON\u306e\u914d\u5217\u3092JsonUtility\u3067\u51e6\u7406\u3059\u308b\u65b9\u6cd5\u306b\u3064\u3044\u3066\u8a18\u8f09\n\n\u95a2\u9023Qiita\n\nDayDream\u958b\u767a\u6a5f\u306e\u8a2d\u5b9a\nUnity\u3067\u306eDayDream\u30c7\u30e2\u30a2\u30d7\u30ea\u306eBuild\nDayDream Ready\u306e\u30b9\u30de\u30d5\u30a9\nDayDream\u958b\u767a\u6a5f\u306e\u4f5c\u308a\u65b9\nDayDream\u95a2\u9023\u30ea\u30f3\u30af\nUnity\u5411\u3051\u306eWebSocket\u30e9\u30a4\u30d6\u30e9\u30ea\u306e\u7d44\u307f\u8fbc\u307f\nUnity\u3067REST\u3067\u30a2\u30af\u30bb\u30b9\n\n\nJsonUtility\n{[\n{a:11,b:12},\n{a:21,b:22},\n{a:31,b:32},\n]}\n\n\u306f\u51e6\u7406\u3067\u304d\u306a\u3044\u3002\n{Items:[\n{a:11,b:12},\n{a:21,b:22},\n{a:31,b:32},\n]}\n\n\u306f\u51e6\u7406\u3067\u304d\u308b\u3002\n\nLivedoor\u306e\u304a\u5929\u6c17WebAPI\u3092\u4f7f\u3063\u3066\u30b5\u30f3\u30d7\u30eb\u3092\u4f5c\u308b\n\u4f1a\u6d25\u82e5\u677e\u306e\u5929\u6c17\u306eJSON\nhttp://weather.livedoor.com/forecast/webservice/json/v1?city=070030\n\"forecasts\" :\u306e\u914d\u5217\u3092\u53d6\u5f97\u3057\u683c\u7d0d\u3057\u3066\u307f\u308b\nJsonHelper.cs\nusing System;\nusing UnityEngine;\nusing System.Collections;\n\npublic static class JsonHelper\n{\n    public static T[] FromJson<T>(string json)\n    {\n        Wrapper<T> wrapper = UnityEngine.JsonUtility.FromJson<Wrapper<T>>(json);\n        return wrapper.forecasts;\n    }\n\n    [Serializable]\n    private class Wrapper<T>\n    {\n        public T[] forecasts;\n    }\n}\n\nRestClient.cs\nusing UnityEngine;\nusing System.Collections;\nusing UnityEngine.Networking;\nusing System.Text;\n\n[System.Serializable]\npublic class tenki\n{\n    public string dateLabel;\n    public string telop;\n    public string date;\n}\n\npublic class RestClient : MonoBehaviour {\n\n    public tenki[] tenkiInstance;\n\n    // Use this for initialization\n    void Start () {\n\n    }\n\n    // Update is called once per frame\n    void Update () {\n        if (Input.GetKeyUp(\"g\"))\n        {\n            Debug.Log (\"GET\");\n            StartCoroutine(Get(\"http://weather.livedoor.com/forecast/webservice/json/v1?city=070030\"));\n        }\n    }\n\n    public IEnumerator Get (string url) {\n        Debug.Log (\"GET\");\n\n        var request = new UnityWebRequest();\n        request.downloadHandler = new DownloadHandlerBuffer();\n        request.url = url;\n        request.SetRequestHeader(\"Content-Type\", \"application/json; charset=UTF-8\");\n        request.method = UnityWebRequest.kHttpVerbGET;\n        yield return request.Send();\n\n        if(request.isError) {\n            Debug.Log(request.error);\n        }\n        else {\n            if (request.responseCode == 200) {\n                Debug.Log (\"success\");\n                Debug.Log (\"--------------------------------\");\n                Debug.Log(request.downloadHandler.text);\n                Debug.Log (\"--------------------------------\");\n                tenkiInstance = JsonHelper.FromJson<tenki>(request.downloadHandler.text);\n\n                for (int i = 0; i < tenkiInstance.Length; i++) {\n                    Debug.Log (tenkiInstance [i].dateLabel);\n                    Debug.Log (tenkiInstance [i].telop);\n                    Debug.Log (tenkiInstance [i].date);\n                }\n            } else {\n                Debug.Log (\"failed\");\n            }\n        }\n    }\n}\n\n\nToDo\n\u5165\u308c\u5b50\u306e\u914d\u5217\u306e\u51e6\u7406.\n# \u672cQiita\u306b\u3064\u3044\u3066\n\nJSON\u306e\u914d\u5217\u3092JsonUtility\u3067\u51e6\u7406\u3059\u308b\u65b9\u6cd5\u306b\u3064\u3044\u3066\u8a18\u8f09\n\n# \u95a2\u9023Qiita\n\n\n* [DayDream\u958b\u767a\u6a5f\u306e\u8a2d\u5b9a](http://qiita.com/akira-sasaki/items/582d84b6e3e717aaf661)\n* [Unity\u3067\u306eDayDream\u30c7\u30e2\u30a2\u30d7\u30ea\u306eBuild](http://qiita.com/akira-sasaki/items/6065e926b76620c12424)\n* [DayDream Ready\u306e\u30b9\u30de\u30d5\u30a9](http://qiita.com/akira-sasaki/items/4d648f9da28ff89973d4)\n* [DayDream\u958b\u767a\u6a5f\u306e\u4f5c\u308a\u65b9](http://qiita.com/akira-sasaki/items/78e86d82dd307c494596)\n* [DayDream\u95a2\u9023\u30ea\u30f3\u30af](http://qiita.com/akira-sasaki/items/3f37d7908be802191705)\n* [Unity\u5411\u3051\u306eWebSocket\u30e9\u30a4\u30d6\u30e9\u30ea\u306e\u7d44\u307f\u8fbc\u307f](http://qiita.com/akira-sasaki/items/18a72f6b99acaa9601b8)\n* [Unity\u3067REST\u3067\u30a2\u30af\u30bb\u30b9](http://qiita.com/akira-sasaki/items/09e4556ec4ad55a19a14)\n\n\n# JsonUtility\n\n```\n{[\n{a:11,b:12},\n{a:21,b:22},\n{a:31,b:32},\n]}\n```\n\n\u306f\u51e6\u7406\u3067\u304d\u306a\u3044\u3002\n\n```\n{Items:[\n{a:11,b:12},\n{a:21,b:22},\n{a:31,b:32},\n]}\n```\n\n\u306f\u51e6\u7406\u3067\u304d\u308b\u3002\n\n# Livedoor\u306e\u304a\u5929\u6c17WebAPI\u3092\u4f7f\u3063\u3066\u30b5\u30f3\u30d7\u30eb\u3092\u4f5c\u308b\n\n\u4f1a\u6d25\u82e5\u677e\u306e\u5929\u6c17\u306eJSON\nhttp://weather.livedoor.com/forecast/webservice/json/v1?city=070030\n\n\"forecasts\" :\u306e\u914d\u5217\u3092\u53d6\u5f97\u3057\u683c\u7d0d\u3057\u3066\u307f\u308b\n\nJsonHelper.cs\n\n```csharp\nusing System;\nusing UnityEngine;\nusing System.Collections;\n\npublic static class JsonHelper\n{\n\tpublic static T[] FromJson<T>(string json)\n\t{\n\t\tWrapper<T> wrapper = UnityEngine.JsonUtility.FromJson<Wrapper<T>>(json);\n\t\treturn wrapper.forecasts;\n\t}\n\n\t[Serializable]\n\tprivate class Wrapper<T>\n\t{\n\t\tpublic T[] forecasts;\n\t}\n}\n```\n\nRestClient.cs\n\n```csharp\nusing UnityEngine;\nusing System.Collections;\nusing UnityEngine.Networking;\nusing System.Text;\n\n[System.Serializable]\npublic class tenki\n{\n\tpublic string dateLabel;\n\tpublic string telop;\n\tpublic string date;\n}\n\npublic class RestClient : MonoBehaviour {\n\n\tpublic tenki[] tenkiInstance;\n\n\t// Use this for initialization\n\tvoid Start () {\n\t\t\n\t}\n\t\n\t// Update is called once per frame\n\tvoid Update () {\n\t\tif (Input.GetKeyUp(\"g\"))\n\t\t{\n\t\t\tDebug.Log (\"GET\");\n\t\t\tStartCoroutine(Get(\"http://weather.livedoor.com/forecast/webservice/json/v1?city=070030\"));\n\t\t}\n\t}\n\n\tpublic IEnumerator Get (string url) {\n\t\tDebug.Log (\"GET\");\n\n\t\tvar request = new UnityWebRequest();\n\t\trequest.downloadHandler = new DownloadHandlerBuffer();\n\t\trequest.url = url;\n\t\trequest.SetRequestHeader(\"Content-Type\", \"application/json; charset=UTF-8\");\n\t\trequest.method = UnityWebRequest.kHttpVerbGET;\n\t\tyield return request.Send();\n\n\t\tif(request.isError) {\n\t\t\tDebug.Log(request.error);\n\t\t}\n\t\telse {\n\t\t\tif (request.responseCode == 200) {\n\t\t\t\tDebug.Log (\"success\");\n\t\t\t\tDebug.Log (\"--------------------------------\");\n\t\t\t\tDebug.Log(request.downloadHandler.text);\n\t\t\t\tDebug.Log (\"--------------------------------\");\n\t\t\t\ttenkiInstance = JsonHelper.FromJson<tenki>(request.downloadHandler.text);\n\n\t\t\t\tfor (int i = 0; i < tenkiInstance.Length; i++) {\n\t\t\t\t\tDebug.Log (tenkiInstance [i].dateLabel);\n\t\t\t\t\tDebug.Log (tenkiInstance [i].telop);\n\t\t\t\t\tDebug.Log (tenkiInstance [i].date);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tDebug.Log (\"failed\");\n\t\t\t}\n\t\t}\n\t}\n}\n```\n\n# ToDo\n\n\u5165\u308c\u5b50\u306e\u914d\u5217\u306e\u51e6\u7406.\n", "tags": ["daydream", "Android", "VR", "Unity"]}