{"tags": ["OpenCV", "\u753b\u50cf\u51e6\u7406", "SIMD"], "context": " More than 1 year has passed since last update.\n\n\u306f\u3058\u3081\u306b\n\u3053\u308c\u306f\uff0cOpenCV Advent Calendar 2015\u306e\u8a18\u4e8b\u3067\u3059\uff0e\u95a2\u9023\u8a18\u4e8b\u306f\uff0c\u30ea\u30f3\u30af\u5148\u306b\u76ee\u6b21\u3068\u3057\u3066\u307e\u3068\u3081\u3089\u308c\u3066\u3044\u307e\u3059\uff0e\nOpenCV\u306e\u95a2\u6570\u306e\u591a\u304f\u306f\uff0c\u5165\u529b\u30c7\u30fc\u30bf\u306e\u30c1\u30e3\u30cd\u30eb\u6570\u3084\u30d3\u30c3\u30c8\u6df1\u5ea6\u306b\u5fdc\u3058\u3066\u547c\u3073\u51fa\u3059\u95a2\u6570\u3092\u30b9\u30a4\u30c3\u30c1\u3057\u3066\u3044\u307e\u3059\uff0e\u3064\u307e\u308a\uff0cOpenCV\u306e\u95a2\u6570\uff08\u3084IPP\u306e\u95a2\u6570\uff09\u306f\uff0c\u5404\u578b\u3068\u30c1\u30e3\u30cd\u30eb\u6570\u306b\u5fdc\u3058\u3066\u5fb9\u5e95\u7684\u306b\u30c1\u30e5\u30fc\u30f3\u3055\u308c\u305f\u95a2\u6570\u3092\u6301\u3063\u3066\u3044\u307e\u3059\uff0ePython\u3084Matlab\u3068\u3044\u3063\u305f\uff0c\u73fe\u4ee3\u306b\u5408\u308f\u305b\u305f\u5bcc\u8c6a\u7684\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u3092\u884c\u3046\u74b0\u5883\u304b\u3089\u771f\u9006\u306e\u767a\u60f3\u3092\u884c\u3063\u3066\u3044\u308b\u611f\u899a\u3082\u3042\u308a\u307e\u3059\u304c\uff0c\u7d50\u5c40\uff0cPython\u3084Matlab\u304b\u3089\u547c\u3073\u51fa\u3055\u308c\u308b\u95a2\u6570\u304cOpenCV\u306a\u3069\u306e\u30c1\u30e5\u30fc\u30f3\u3055\u308c\u305f\u30e9\u30a4\u30d6\u30e9\u30ea\u95a2\u6570\u3067\u3042\u308b\u305f\u3081\uff0c\u3069\u3053\u304b\u306e\u6bb5\u968e\u3067\u306f\u6700\u9069\u5316\u3055\u308c\u305f\u95a2\u6570\u7fa4\u3092\u7528\u610f\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\uff0e\n\u3053\u3053\u3067\u306f\uff0c\n1. OpenCV\u306e\u4f8b\n2. IPP\u306e\u4f8b\n3. \u5b9f\u969b\u306b\u81ea\u5206\u3067\u95a2\u6570\u3092\u4f5c\u308b\u4f8b\n\u306e3\u3064\u306e\u4f8b\u3092\u6319\u3052\u3066\u8aac\u660e\u3057\u307e\u3059\uff0e\n\n\u4f8b\uff11\uff1aOpenCV\u306e\u30dc\u30c3\u30af\u30b9\u30d5\u30a3\u30eb\u30bf\n\u4f8b\uff11\u3067\u306f\uff0c\u5168\u3066\u540c\u3058\u91cd\u307f\u3067\u5e73\u6ed1\u5316\u3059\u308b\u30dc\u30c3\u30af\u30b9\u30d5\u30a3\u30eb\u30bf\u306e\u4e00\u90e8\u3067\u3042\u308bgetColumnSumFilter\u3092\u4f8b\u306b\u3068\u3063\u3066\u8aac\u660e\u3057\u307e\u3059\uff0e\uff08\u3053\u306e\u95a2\u6570\u3068getRowSumFilter\u3092\u3042\u308f\u305b\u3066\u7e26\u6a2a\u306e\u30d5\u30a3\u30eb\u30bf\u3092\u4f5c\u3063\u3066\u30dc\u30c3\u30af\u30b9\u30d5\u30a3\u30eb\u30bf\u306b\u3057\u307e\u3059\uff0e\uff09\u4e0b\u8a18\u306b\u95a2\u6570\u3092\u629c\u7c8b\u3057\u307e\u3059\uff08\u4e00\u3064\u76ee\u306e\u30b3\u30fc\u30c9\uff09\uff0e\u3053\u306e\u95a2\u6570\u3067\u306f\uff0c\u5165\u529b\u3059\u308bMat\u306e\u30d3\u30c3\u30c8\u6df1\u5ea6\u3068\u51fa\u529b\u3059\u308bMat\u306e\u30d3\u30c3\u30c8\u6df1\u5ea6\u306e\u7d44\u307f\u5408\u308f\u305b\u3054\u3068\u306b\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u95a2\u6570ColumnSum\u3092\u7528\u610f\u3057\u3066\u5207\u308a\u66ff\u3048\u308b\u5b9f\u88c5\u3092\u3057\u3066\u3044\u307e\u3059\uff0eColumnSum\u306f\uff0c\u753b\u50cf\u3092\u6a2a\u65b9\u5411\u306b\u7a4d\u5206\u3059\u308b\u95a2\u6570\u3067\u3059\uff0e\n\u660e\u3089\u304b\u306b\u5165\u51fa\u529b\u306e\u7d44\u307f\u5408\u308f\u305b\u304c\u7206\u767a\u3057\u3066\u3044\u307e\u3059\u304c\uff0c\u7279\u5b9a\u306e\u826f\u304f\u4f7f\u308f\u308c\u308b\u7d44\u307f\u5408\u308f\u305b\u306b\u5bfe\u3057\u3066\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u95a2\u6570\u306e\u7279\u6b8a\u5316\u3092\u3057\u3066\u304a\u308a\uff0c\u826f\u304f\u4f7f\u3046\u95a2\u6570\u306f\u9ad8\u901f\u5316\u3055\u308c\u3066\u3044\u307e\u3059\uff0e\u4f8b\u3048\u3070\uff0cint\u5165\u529bfloat\u51fa\u529b\u306e\u5834\u5408\u306e\u4f8b\u3082\u8868\u793a\u3057\u307e\u3059\uff08\uff12\u3064\u76ee\u306e\u30b3\u30fc\u30c9\uff09\uff0e\ngetColumnSumFilter\n//smooth.cpp\ncv::Ptr<cv::BaseColumnFilter> cv::getColumnSumFilter(int sumType, int dstType, int ksize,\n                                                     int anchor, double scale)\n{\n    int sdepth = CV_MAT_DEPTH(sumType), ddepth = CV_MAT_DEPTH(dstType);\n    CV_Assert( CV_MAT_CN(sumType) == CV_MAT_CN(dstType) );\n\n    if( anchor < 0 )\n        anchor = ksize/2;\n\n    if( ddepth == CV_8U && sdepth == CV_32S )\n        return makePtr<ColumnSum<int, uchar> >(ksize, anchor, scale);\n    if( ddepth == CV_8U && sdepth == CV_64F )\n        return makePtr<ColumnSum<double, uchar> >(ksize, anchor, scale);\n    if( ddepth == CV_16U && sdepth == CV_32S )\n        return makePtr<ColumnSum<int, ushort> >(ksize, anchor, scale);\n    if( ddepth == CV_16U && sdepth == CV_64F )\n        return makePtr<ColumnSum<double, ushort> >(ksize, anchor, scale);\n    if( ddepth == CV_16S && sdepth == CV_32S )\n        return makePtr<ColumnSum<int, short> >(ksize, anchor, scale);\n    if( ddepth == CV_16S && sdepth == CV_64F )\n        return makePtr<ColumnSum<double, short> >(ksize, anchor, scale);\n    if( ddepth == CV_32S && sdepth == CV_32S )\n        return makePtr<ColumnSum<int, int> >(ksize, anchor, scale);\n    if( ddepth == CV_32F && sdepth == CV_32S )\n        return makePtr<ColumnSum<int, float> >(ksize, anchor, scale);\n    if( ddepth == CV_32F && sdepth == CV_64F )\n        return makePtr<ColumnSum<double, float> >(ksize, anchor, scale);\n    if( ddepth == CV_64F && sdepth == CV_32S )\n        return makePtr<ColumnSum<int, double> >(ksize, anchor, scale);\n    if( ddepth == CV_64F && sdepth == CV_64F )\n        return makePtr<ColumnSum<double, double> >(ksize, anchor, scale);\n\n    CV_Error_( CV_StsNotImplemented,\n        (\"Unsupported combination of sum format (=%d), and destination format (=%d)\",\n        sumType, dstType));\n\n    return Ptr<BaseColumnFilter>();\n}\n\nint\u5165\u529bfloat\u51fa\u529b\u306etemplate\u306e\u7279\u6b8a\u5316\ntemplate<>\nstruct ColumnSum<int, float> :\n        public BaseColumnFilter\n{\n    ColumnSum( int _ksize, int _anchor, double _scale ) :\n        BaseColumnFilter()\n    {\n        ksize = _ksize;\n        anchor = _anchor;\n        scale = _scale;\n        sumCount = 0;\n    }\n\n    virtual void reset() { sumCount = 0; }\n\n    virtual void operator()(const uchar** src, uchar* dst, int dststep, int count, int width)\n    {\n        int i;\n        int* SUM;\n        bool haveScale = scale != 1;\n        double _scale = scale;\n\n        #if CV_SSE2\n        bool haveSSE2 =  checkHardwareSupport(CV_CPU_SSE2);\n        #endif\n\n        if( width != (int)sum.size() )\n        {\n            sum.resize(width);\n            sumCount = 0;\n        }\n\n        SUM = &sum[0];\n        if( sumCount == 0 )\n        {\n            memset((void *)SUM, 0, sizeof(int) * width);\n\n            for( ; sumCount < ksize - 1; sumCount++, src++ )\n            {\n                const int* Sp = (const int*)src[0];\n                i = 0;\n\n                #if CV_SSE2\n                if(haveSSE2)\n                {\n                    for( ; i < width-4; i+=4 )\n                    {\n                        __m128i _sum = _mm_loadu_si128((const __m128i*)(SUM+i));\n                        __m128i _sp = _mm_loadu_si128((const __m128i*)(Sp+i));\n                        _mm_storeu_si128((__m128i*)(SUM+i), _mm_add_epi32(_sum, _sp));\n                    }\n                }\n                #elif CV_NEON\n                for( ; i <= width - 4; i+=4 )\n                    vst1q_s32(SUM + i, vaddq_s32(vld1q_s32(SUM + i), vld1q_s32(Sp + i)));\n                #endif\n\n                for( ; i < width; i++ )\n                    SUM[i] += Sp[i];\n            }\n        }\n        else\n        {\n            CV_Assert( sumCount == ksize-1 );\n            src += ksize-1;\n        }\n\n        for( ; count--; src++ )\n        {\n            const int * Sp = (const int*)src[0];\n            const int * Sm = (const int*)src[1-ksize];\n            float* D = (float*)dst;\n            if( haveScale )\n            {\n                i = 0;\n\n                #if CV_SSE2\n                if(haveSSE2)\n                {\n                    const __m128 scale4 = _mm_set1_ps((float)_scale);\n\n                    for( ; i < width-4; i+=4)\n                    {\n                        __m128i _sm   = _mm_loadu_si128((const __m128i*)(Sm+i));\n                        __m128i _s0   = _mm_add_epi32(_mm_loadu_si128((const __m128i*)(SUM+i)),\n                                                      _mm_loadu_si128((const __m128i*)(Sp+i)));\n\n                        _mm_storeu_ps(D+i, _mm_mul_ps(scale4, _mm_cvtepi32_ps(_s0)));\n                        _mm_storeu_si128((__m128i*)(SUM+i), _mm_sub_epi32(_s0,_sm));\n                    }\n                }\n                #elif CV_NEON\n                float32x4_t v_scale = vdupq_n_f32((float)_scale);\n                for( ; i <= width-8; i+=8 )\n                {\n                    int32x4_t v_s0 = vaddq_s32(vld1q_s32(SUM + i), vld1q_s32(Sp + i));\n                    int32x4_t v_s01 = vaddq_s32(vld1q_s32(SUM + i + 4), vld1q_s32(Sp + i + 4));\n\n                    vst1q_f32(D + i, vmulq_f32(vcvtq_f32_s32(v_s0), v_scale));\n                    vst1q_f32(D + i + 4, vmulq_f32(vcvtq_f32_s32(v_s01), v_scale));\n\n                    vst1q_s32(SUM + i, vsubq_s32(v_s0, vld1q_s32(Sm + i)));\n                    vst1q_s32(SUM + i + 4, vsubq_s32(v_s01, vld1q_s32(Sm + i + 4)));\n                }\n                #endif\n\n                for( ; i < width; i++ )\n                {\n                    int s0 = SUM[i] + Sp[i];\n                    D[i] = (float)(s0*_scale);\n                    SUM[i] = s0 - Sm[i];\n                }\n            }\n            else\n            {\n                i = 0;\n\n                #if CV_SSE2\n                if(haveSSE2)\n                {\n                    for( ; i < width-4; i+=4)\n                    {\n                        __m128i _sm   = _mm_loadu_si128((const __m128i*)(Sm+i));\n                        __m128i _s0   = _mm_add_epi32(_mm_loadu_si128((const __m128i*)(SUM+i)),\n                                                      _mm_loadu_si128((const __m128i*)(Sp+i)));\n\n                        _mm_storeu_ps(D+i, _mm_cvtepi32_ps(_s0));\n                        _mm_storeu_si128((__m128i*)(SUM+i), _mm_sub_epi32(_s0,_sm));\n                    }\n                }\n                #elif CV_NEON\n                for( ; i <= width-8; i+=8 )\n                {\n                    int32x4_t v_s0 = vaddq_s32(vld1q_s32(SUM + i), vld1q_s32(Sp + i));\n                    int32x4_t v_s01 = vaddq_s32(vld1q_s32(SUM + i + 4), vld1q_s32(Sp + i + 4));\n\n                    vst1q_f32(D + i, vcvtq_f32_s32(v_s0));\n                    vst1q_f32(D + i + 4, vcvtq_f32_s32(v_s01));\n\n                    vst1q_s32(SUM + i, vsubq_s32(v_s0, vld1q_s32(Sm + i)));\n                    vst1q_s32(SUM + i + 4, vsubq_s32(v_s01, vld1q_s32(Sm + i + 4)));\n                }\n                #endif\n\n                for( ; i < width; i++ )\n                {\n                    int s0 = SUM[i] + Sp[i];\n                    D[i] = (float)(s0);\n                    SUM[i] = s0 - Sm[i];\n                }\n            }\n            dst += dststep;\n        }\n    }\n\n    double scale;\n    int sumCount;\n    std::vector<int> sum;\n};\n\n\n\u4f8b\uff12\uff1aIPP\u306e\u5834\u5408\n\u5b9f\u969b\u306b\uff0cOpenCV\u9ad8\u901f\u5316\u306e\u305f\u3081\u306b\u4f7f\u308f\u308c\u3066\u3044\u308bIntel\u306eIPP\u30e9\u30a4\u30d6\u30e9\u30ea\u95a2\u6570\u3067\u3082\uff0c\u7d30\u304b\u304f\u9ad8\u901f\u5316\u3057\u3066\u304a\u308a\uff0c\u4f8b\u3048\u3070\u56db\u5247\u6f14\u7b97\u306f\u304b\u306a\u308a\u7d30\u304b\u304f\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u307e\u3059\uff0e\u4f8b\u3068\u3057\u3066\uff0cOpenCV\u306e\u30d5\u30a9\u30eb\u30c0\u5185\u306e3rdparty\\ippicv\\unpack\\ippicv_win\\include\\ipp.h\u5185\u306e\u4e00\u90e8\u3092\u629c\u7c8b\u3057\u307e\u3059\uff0e\u3053\u306e\u3088\u3046\u306b\uff0c\u540c\u3058\u3088\u3046\u3067\uff0c\u5c11\u3057\u3060\u3051\u3053\u3068\u306a\u308b\u95a2\u6570\u3092\u3044\u304f\u3064\u3082\u6301\u3063\u3066\u3044\u307e\u3059\uff0e\u5404\u95a2\u6570\u306e8u\u306fuchar\u7528,16s\u306fshort\u7528\uff0c16u\u306fushort\u7528\u306e\u95a2\u6570\u3092\u3042\u3089\u308f\u3057\u3066\u304a\u308a\uff0cC1\u306f1\u30c1\u30e3\u30cd\u30eb\u7528C3\u306f3\u30c1\u30e3\u30cd\u30eb\uff0cC4\u306f4\u30c1\u30e3\u30cd\u30eb\u3092\u8868\u3057\u3066\u3044\u307e\u3059\uff0e\uff08\u4e0b\u8a18\u306eAC4\u306f4\u30c1\u30e3\u30cd\u30eb\u76ee\u304c\u30a2\u30eb\u30d5\u30a1\u30c1\u30e3\u30cd\u30eb\u4ed8\u306e\u5834\u5408\u3060\u3063\u305f\u3088\u3046\u306a\u8a18\u61b6\u304c\u3042\u308a\u307e\u3059\u304c\uff0c\u8a73\u3057\u304f\u306f\u899a\u3048\u3066\u3044\u307e\u305b\u3093\uff0e\u8abf\u3079\u308c\u3070\u51fa\u3066\u304d\u307e\u3059\uff0e\uff09\n\u3053\u306eIPP\u306b\u3064\u3044\u3066\u306e\u5177\u4f53\u7684\u306a\u8a71\u306f\u6b21\u56de\u306b\u8aac\u660e\u3057\u307e\u3059\uff0e\n  Name: ippiAddC_8u_C1IRSfs,  ippiAddC_8u_C3IRSfs,  ippiAddC_8u_C4IRSfs,   ippiAddC_8u_AC4IRSfs,\n        ippiAddC_16s_C1IRSfs, ippiAddC_16s_C3IRSfs, ippiAddC_16s_C4IRSfs,  ippiAddC_16s_AC4IRSfs,\n        ippiAddC_16u_C1IRSfs, ippiAddC_16u_C3IRSfs, ippiAddC_16u_C4IRSfs,  ippiAddC_16u_AC4IRSfs,\n        ippiSubC_8u_C1IRSfs,  ippiSubC_8u_C3IRSfs,  ippiSubC_8u_C4IRSfs,   ippiSubC_8u_AC4IRSfs,\n        ippiSubC_16s_C1IRSfs, ippiSubC_16s_C3IRSfs, ippiSubC_16s_C4IRSfs,  ippiSubC_16s_AC4IRSfs,\n        ippiSubC_16u_C1IRSfs, ippiSubC_16u_C3IRSfs, ippiSubC_16u_C4IRSfs,  ippiSubC_16u_AC4IRSfs,\n        ippiMulC_8u_C1IRSfs,  ippiMulC_8u_C3IRSfs,  ippiMulC_8u_C4IRSfs,   ippiMulC_8u_AC4IRSfs,\n        ippiMulC_16s_C1IRSfs, ippiMulC_16s_C3IRSfs, ippiMulC_16s_C4IRSfs,  ippiMulC_16s_AC4IRSfs\n        ippiMulC_16u_C1IRSfs, ippiMulC_16u_C3IRSfs, ippiMulC_16u_C4IRSfs,  ippiMulC_16u_AC4IRSfs\n\n\n\u4f8b\uff13\uff1a\u30c1\u30e3\u30cd\u30eb\u6bce\u306b\u30aa\u30d5\u30bb\u30c3\u30c8\u3092\u52a0\u7b97\u3059\u308b\u95a2\u6570\u3092\u81ea\u4f5c\u3059\u308b\u5834\u5408\n\u5404\u30c1\u30e3\u30cd\u30eb\uff0c\u30d3\u30c3\u30c8\u6df1\u5ea6\u6bce\u306b\u5b9a\u7fa9\u3055\u308c\u308b\u95a2\u6570\u306f\uff0c\u5177\u4f53\u7684\u306b\u3069\u306e\u3088\u3046\u306b\u9055\u3063\u3066\u3044\u308b\u306e\u3067\u3057\u3087\u3046\u304b\uff1f\u3053\u3053\u3067\u306f\uff0c\u30c1\u30e3\u30cd\u30eb\u6bce\u306b\u9069\u5f53\u306a\u5024\u3092\u52a0\u7b97\u3059\u308b\u95a2\u6570func\u3092\u4f5c\u308b\u3053\u3068\u3092\u60f3\u5b9a\u3057\uff0c\u305d\u308c\u3089\u306e\u9055\u3044\u3092\u7406\u89e3\u3057\u3066\u3044\u304d\u307e\u3059\uff0e\n\n\u4f5c\u6210\u3059\u308b\u95a2\u6570\n\u307e\u305a\uff0c\u60f3\u5b9a\u3059\u308b\u95a2\u6570\u306f\u4e0b\u8a18\u306e\u3088\u3046\u306b\u5b9f\u88c5\u3067\u304d\u307e\u3059\uff0e\u4efb\u610f\u306e\u30b5\u30a4\u30ba\uff0c\u4efb\u610f\u306e\u30c1\u30e3\u30cd\u30eb\u3092\u6301\u3064\u914d\u5217\u306b\u5bfe\u3057\u3066\u30c1\u30e3\u30cd\u30eb\u6bce\u306b\u30aa\u30d5\u30bb\u30c3\u30c8\u3092\u52a0\u7b97\u3059\u308b\u95a2\u6570\u3067\u3059\uff0e\nvoid func(double* src, double* dest, int size, double* offset, int channels)\n{\n    for (int i = 0; i < size; ++i)\n    {\n        for (int c = 0; c < channels; ++c)\n        {\n            dest[channels*i + c] = src[channels*i + c] + offset[c] ;\n        }\n    }\n}\n\n\u4f7f\u3044\u6368\u3066\u306e\u30b3\u30fc\u30c9\u306a\u3089\u3070\uff0c\u3053\u308c\u3067\u5341\u5206\u306a\u5b9f\u88c5\u3067\u3059\uff0e\u4efb\u610f\u30b5\u30a4\u30ba\u30fb\u30c1\u30e3\u30cd\u30eb\u306b\u5bfe\u5fdc\u3057\u3066\u304a\u308a\uff0cdouble\u578b\u3067\u8a08\u7b97\u3067\u304d\u308c\u3070\uff0c\u307b\u3068\u3093\u3069\u306e\u72b6\u6cc1\u306b\u5bfe\u5fdc\u53ef\u80fd\u306a\u95a2\u6570\u306b\u306a\u3063\u3066\u3044\u308b\u3068\u601d\u3044\u307e\u3059\uff0e\u3057\u304b\u3057\uff0c\u5e83\u304f\u4f7f\u308f\u308c\u308b\u30e9\u30a4\u30d6\u30e9\u30ea\u95a2\u6570\u3068\u3057\u3066\u306f\u4e0d\u9069\u683c\u3067\u3059\uff0e\n\u3082\u3057\uff0c\u30c1\u30e5\u30fc\u30f3\u3057\u305f\u95a2\u6570\u304c\u7528\u610f\u3055\u308c\u3066\u3044\u308b\u3068\u3057\u305f\u3089\uff0c\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u95a2\u6570\u7fa4\u304c\u5b9a\u7fa9\u3055\u308c\u308b\u3053\u3068\u306b\u306a\u308a\u307e\u3059\uff0e\u4e0b\u8a18\u306e\u30b5\u30d5\u30a3\u30c3\u30af\u30b9\u306f\uff0c8U\u306f8bit\u306e\u30d3\u30c3\u30c8\u6df1\u5ea6\u3092\u8868\u3057\u3066\u304a\u308a8UC3\u306f\uff13\u30c1\u30e3\u30cd\u30eb\u306e8bit\u306e\u30c7\u30fc\u30bf\u3092\u8868\u3057\u3066\u3044\u307e\u3059\uff0e\u540c\u69d8\u306b\u3057\u306632FC4\u306f\uff14\u30c1\u30e3\u30cd\u30eb\u306e32bit float\u578b\u3092\u6307\u3057\u3066\u3044\u307e\u3059\uff0e(\u5f15\u6570\u306a\u3069\u3067\u985e\u63a8\u53ef\u80fd\u306a\u3082\u306e\u306f\u7701\u7565)\nfunc_8UC1(uchar* src, uchar* dest);\nfunc_8UC2(uchar* src, uchar* dest);\nfunc_8UC3(uchar* src, uchar* dest);\nfunc_8UC4(uchar* src, uchar* dest);\nfunc_8UC1(uchar* srcdest);\nfunc_8UC2(uchar* srcdest);\nfunc_8UC3(uchar* srcdest);\nfunc_8UC4(uchar* srcdest);\n...\nfunc_16SC1(short* src, short* dest);\nfunc_16SC2(short* src, short* dest);\n...\nfunc_32SC1(int* src, int * dest);\nfunc_32SC2(int* src, int * dest);\n...\nfunc_32FC1(float* src, float* dest);\nfunc_32FC2(float* src, float* dest);\n...\nfunc_64FC1(double* src, double* dest);\nfunc_64FC2(double* src, double* dest);\n...\n\n\n\u95a2\u6570\u5185\u3067\u306e\u5207\u308a\u66ff\u3048\n\u5165\u529b\u3055\u308c\u305f\u30c7\u30fc\u30bf\u306e\u30c1\u30e3\u30cd\u30eb\u6570\u3084\u30d3\u30c3\u30c8\u6df1\u5ea6\u306f\uff0cInputArray\u3084Mat\u306e\u30e1\u30bd\u30c3\u30c9\u3067\u3042\u308bchannels()\u3084depth()\uff0c\u3082\u3057\u304f\u306f\u4e21\u8005\u3092\u53d6\u308c\u308btype()\u3068\u3044\u3046\u57fa\u672c\u7684\u306a\u95a2\u6570\u3067\u60c5\u5831\u306e\u53d6\u5f97\u304c\u3067\u304d\u307e\u3059\uff0e\u3055\u3089\u306b\u306f\uff0cinplace\u304b\u3069\u3046\u304b\uff08\u5165\u529b\u3068\u51fa\u529b\u304c\u540c\u3058\u3082\u306e\u3092\u5165\u308c\u3066\u3044\u308b\u5834\u5408\uff09\u3067\u95a2\u6570\u3092\u7528\u610f\u3057\u3066\u3044\u308b\u5834\u5408\u3082\u3042\u308a\u307e\u3059\uff0e\u4f8b\u3048\u3070\uff0c\u7528\u610f\u3055\u308c\u305f\u6700\u9069\u5316\u95a2\u6570\u3092\u30c1\u30e3\u30cd\u30eb\u6570\u3084\u30d3\u30c3\u30c8\u6df1\u5ea6\u306b\u5fdc\u3058\u3066\u5207\u308a\u66ff\u3048\u308b\u95a2\u6570funcOpt\u306f\u4e0b\u8a18\u306e\u3088\u3046\u306b\u5b9a\u7fa9\u3059\u308b\u3053\u3068\u304c\u51fa\u6765\u307e\u3059\uff0e\uff08depth\u3060\u3051\uff0cchannles\u3060\u3051\u306e\u5206\u5c90\u3067\u3059\u3080\u306e\u3067\u3042\u308c\u3070\uff0c\u6761\u4ef6\u6570\u306f\u5c11\u306a\u304f\u306a\u308a\u307e\u3059\uff0e\uff09\nvoid funcOpt(InputArray src, InputArray offset, OutputArray dest)\n{\n    //src\u3068dest\u304c\u540c\u3058\u304b\u30c1\u30a7\u30c3\u30af\uff0e\n    if (src.getMat().data != dest.getMat().data)\n    {\n        switch (src.type())\n        {\n        case CV_8UC1: func_8UC1(); break;\n        case CV_8UC2: func_8UC2(); break;\n        case CV_8UC3: func_8UC3(); break;\n        case CV_8UC4: func_8UC4(); break;\n            ...\n        case CV_32FC1: func_32FC1(); break;\n            ...\n        }\n    }\n    else\n    {\n        switch (src.type())\n        {\n        case CV_8UC1: func_8UC1(); break;\n        case CV_8UC2: func_8UC2(); break;\n        case CV_8UC3: func_8UC3(); break;\n        case CV_8UC4: func_8UC4(); break;\n            ...\n        case CV_32FC1: func_32FC1(); break;\n            ...\n    }   \n}\n\n\n\u5177\u4f53\u7684\u306a\u5b9f\u88c5\n\u5b9f\u969b\u306b\u5404\u6761\u4ef6\u306e\u4e2d\u8eab\u3092\u66f8\u3044\u3066\u307f\u307e\u3057\u3087\u3046\uff0e\u5404\u95a2\u6570\u3092\u9ad8\u901f\u306b\u52d5\u4f5c\u3055\u305b\u308b\u305f\u3081\u306b\uff0cSIMD\u3067\u30d9\u30af\u30c8\u30eb\u5316\u3057\u3066\u5b9a\u7fa9\u3057\u307e\u3059\uff0e\u8a73\u3057\u304f\u306f\uff0c\u6614\u306b\u66f8\u3044\u305f\uff0c\u7d44\u307f\u8fbc\u307f\u95a2\u6570\uff08intrinsic\uff09\u306b\u3088\u308bSIMD\u5165\u9580\u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\uff0e\n\n8bit\u3067\uff11\u30c1\u30e3\u30cd\u30eb\u306e\u5834\u5408\nuchar\u306e\u578b\u304c\u5165\u529b\u3055\u308c\u308b\u3053\u3068\u3092\u524d\u63d0\u306b\u3057\u305f\u547d\u4ee4\u30bb\u30c3\u30c8\u3092\u767a\u884c\u3057\u307e\u3059\uff0e\nvoid func_8UC1(uchar* src, uchar* dest, int size, uchar offset, int channels)\n{\n    int sse_uchar_size = size / 16;\n    const __m128i moffset = _mm_set1_epi8(offset);\n    for (int i = 0; i < sse_uchar_size; ++i)\n    {\n        __m128i ms = _mm_load_si128((const __m128i*)src);\n        ms = _mm_add_epi8(ms, moffset);\n        _mm_store_si128((__m128i*)dest, ms);\n        src += 16; dest += 16;\n    }\n}\n\n\n\n8bit\u3067\uff11\u30c1\u30e3\u30cd\u30eb\u306e\u5834\u5408\uff08inplace\u306e\u5834\u5408\uff09\n\u307e\u305f\uff0c\u5165\u529b\u3068\u51fa\u529b\u304c\u540c\u3058inplace\u306a\u5b9f\u88c5\u306e\u5834\u5408\uff0c\u30e1\u30e2\u30ea\u30a2\u30af\u30bb\u30b9\u3084\u30ad\u30e3\u30c3\u30b7\u30e5\u306e\u64cd\u4f5c\u304c\u51fa\u6765\u307e\u3059\uff0e\u30e1\u30e2\u30ea\u306e\u30dd\u30a4\u30f3\u30bf\u306e\u79fb\u52d5\u304c\u4e00\u56de\u3067\u3059\u3093\u3060\u308a\uff0cstream\u547d\u4ee4\u306b\u3088\u308a\u7121\u99c4\u306a\u30ad\u30e3\u30c3\u30b7\u30e5\u3092\u9632\u3050\u3053\u3068\u3092CPU\u306b\u547d\u4ee4\u3059\u308b\u3053\u3068\u304c\u51fa\u6765\u307e\u3059\uff0e\nvoid func_incpace_8UC1(uchar* srcdest, int size, uchar offset, int channels)\n{\n    int sse_uchar_size = size / 16;\n    const __m128i moffset = _mm_set1_epi8(offset);\n    for (int i = 0; i < sse_uchar_size; ++i)\n    {\n        __m128i ms = _mm_load_si128((const __m128i*)srcdest);\n        ms = _mm_add_epi8(ms, moffset);\n        _mm_stream_si128((__m128i*)srcdest, ms);\n        srcdest += 16; \n    }\n}\n\n\n32bit\u6d6e\u52d5\u5c0f\u6570\u70b9\u3067\uff11\u30c1\u30e3\u30cd\u30eb\u306e\u5834\u5408\n\u6d6e\u52d5\u5c0f\u6570\u70b9\u306b\u306a\u308b\u3068\u547d\u4ee4\u30bb\u30c3\u30c8\u304c\u4ee3\u308f\u308a\uff0c\u30d9\u30af\u30c8\u30eb\u5316\u306e\u51e6\u7406\u5358\u4f4d\u3082\u5c0f\u3055\u304f\u306a\u308a\u307e\u3059\uff0e\nvoid func_32FC1(float* src, float* dest, int size, float offset, int channels)\n{\n    int sse_float_size = size / 4;\n    const __m128 moffset = _mm_set1_ps(offset);\n    for (int i = 0; i < sse_float_size; ++i)\n    {\n        __m128 ms = _mm_load_ps(src);\n        ms = _mm_add_ps(ms, moffset);\n        _mm_store_ps(dest, ms);\n        src += 4; dest += 4;\n    }\n}\n\n\n32bit\u6d6e\u52d5\u5c0f\u6570\u70b9\u30673\u30c1\u30e3\u30cd\u30eb\u306e\u5834\u5408\n\u30c1\u30e3\u30cd\u30eb\u6570\u304c\u5897\u3048\u308b\u3068\u30e1\u30e2\u30ea\u306e\u30ec\u30a4\u30a2\u30a6\u30c8\u3092\u5909\u3048\u308b\u5fc5\u8981\u304c\u51fa\u3066\u304d\u307e\u3059\uff0e\u901a\u5e38\uff0c\u753b\u50cf\u3092\u4fdd\u5b58\u3059\u308b\u5834\u5408\uff0c\u69cb\u9020\u4f53\u914d\u5217AoS(Array of Structure)\u5f62\u5f0f\u3067\u4fdd\u5b58\u3055\u308c\u3066\u3044\u308b\u5834\u5408\u304c\u591a\u304f\uff0c\u30ab\u30e9\u30fc\u306e\u5834\u5408\uff0cRGB\u306e\u753b\u7d20\u304c\u4e26\u3076RGBRGBRGB\u306e\u3088\u3046\u306a\u69cb\u9020\u3067\u30c7\u30fc\u30bf\u304c\u4fdd\u6301\u3055\u308c\u3066\u3044\u307e\u3059\uff0e\u3057\u304b\u3057\uff0c\u30c1\u30e3\u30cd\u30eb\u6bce\u306b\u51e6\u7406\u3092\u5909\u3048\u308b\u5834\u5408\uff0cSIMD\u6f14\u7b97\u306b\u306f\u90fd\u5408\u304c\u308f\u308b\u304f\u305d\u308c\u3092\u914d\u5217\u69cb\u9020\u4f53SoA(Structure of Array)\uff0c\u30ab\u30e9\u30fc\u306e\u5834\u5408\u306a\u3089\uff0c\u5168\u90e8R\uff0c\u5168\u90e8G\uff0c\u5168\u90e8B\u306e\u914d\u5217\u306b\u5909\u63db\u3059\u308b\u307b\u3046\u304c\u52b9\u7387\u304c\u3088\u304f\u306a\u308a\u307e\u3059\uff0e\n\u6ce8\u610f\uff09\u3053\u306e\u4f8b\u3067\u3042\u308b\uff0cRGB\u306e3\u30c1\u30e3\u30cd\u30eb\u306e\u5834\u5408\u304c\u6700\u3082\u8907\u96d1\u3067\u3059\uff0e2\u306e\u500d\u6570\u3067\u3042\u308b2\u30c1\u30e3\u30f3\u30cd\u30eb\uff0c4\u30c1\u30e3\u30f3\u30cd\u30eb\u306e\u5834\u5408\u306f\uff0c\u3088\u308a\u7c21\u5358\u306bSIMD\u30d9\u30af\u30c8\u30eb\u5316\u3067\u304d\u307e\u3059\uff0e\u306a\u304a\uff0c\u3053\u306e\u8a18\u4e8b\u3082\u53c2\u8003\u306b\u306a\u308a\u307e\u3059\uff0e\nvoid func_32FC3(float* src, float* dest, int size, float* offset, int channels)\n{\n    int sse_floatc3_size = size / 12;\n    const __m128 moffset0 = _mm_set1_ps(offset[0]);\n    const __m128 moffset1 = _mm_set1_ps(offset[1]);\n    const __m128 moffset2 = _mm_set1_ps(offset[2]);\n\n    for (int i = 0; i < sse_floatc3_size; ++i)\n    {\n        //AoS 2 SoA\n        __m128 a = _mm_load_ps(src);\n        __m128 b = _mm_load_ps(src + 4);\n        __m128 c = _mm_load_ps(src + 8);\n\n        __m128 rrrr, gggg, bbbb;\n        __m128 aa = _mm_shuffle_ps(a, a, _MM_SHUFFLE(1, 2, 3, 0));\n        aa = _mm_blend_ps(aa, b, 4);\n        __m128 cc = _mm_shuffle_ps(c, c, _MM_SHUFFLE(1, 3, 2, 0));\n        aa = _mm_blend_ps(aa, cc, 8);\n        bbbb = aa;\n\n        aa = _mm_shuffle_ps(a, a, _MM_SHUFFLE(3, 2, 0, 1));\n        __m128 bb = _mm_shuffle_ps(b, b, _MM_SHUFFLE(2, 3, 0, 1));\n        bb = _mm_blend_ps(bb, aa, 1);\n        cc = _mm_shuffle_ps(c, c, _MM_SHUFFLE(2, 3, 1, 0));\n        bb = _mm_blend_ps(bb, cc, 8);\n        gggg = bb;\n\n        aa = _mm_shuffle_ps(a, a, _MM_SHUFFLE(3, 1, 0, 2));\n        bb = _mm_blend_ps(aa, b, 2);\n        cc = _mm_shuffle_ps(c, c, _MM_SHUFFLE(3, 0, 1, 2));\n        cc = _mm_blend_ps(bb, cc, 12);\n        rrrr = cc;\n\n        //add operation\n        bbbb = _mm_add_ps(rrrr, moffset0);\n        gggg = _mm_add_ps(rrrr, moffset1);\n        rrrr = _mm_add_ps(rrrr, moffset2);\n\n        ////SoS 2 AoS\n        a = _mm_shuffle_ps(bbbb, bbbb, _MM_SHUFFLE(2, 3, 0, 1));\n        b = _mm_shuffle_ps(gggg, gggg, _MM_SHUFFLE(1, 2, 3, 0));\n        c = _mm_shuffle_ps(rrrr, rrrr, _MM_SHUFFLE(3, 0, 1, 2));\n        _mm_stream_ps((dest), _mm_blend_ps(_mm_blend_ps(b, a, 4), c, 2));\n        _mm_stream_ps((dest + 4), _mm_blend_ps(_mm_blend_ps(c, b, 4), a, 2));\n        _mm_stream_ps((dest + 8), _mm_blend_ps(_mm_blend_ps(a, c, 4), b, 2));\n\n        src += 12; dest += 12;\n    }\n}\n\n\n\u7406\u60f3\u3068\u73fe\u5b9f\n\u4e0a\u8a18\u306e\u3088\u3046\u306b\u3057\u3066\uff0cOpenCV\u306e\u95a2\u6570\u306f\uff0c\u30d3\u30c3\u30c8\u6df1\u5ea6\u3084\u30c1\u30e3\u30f3\u30cd\u30eb\u6570\uff0cinplace\u304b\u3069\u3046\u304b\u306b\u5fdc\u3058\u3066\u95a2\u6570\u3092\u5207\u308a\u66ff\u3048\u3066\u6700\u9069\u306a\u95a2\u6570\u3092\u9078\u3093\u3067\u3044\u307e\u3059\uff0e\n\u56db\u5247\u6f14\u7b97\u3084sin, cos, exp, pow\u306a\u3069\u306e\u57fa\u790e\u7684\u306a\u6f14\u7b97\u95a2\u6570\u306f\u4e01\u5be7\u306b\u4f5c\u3089\u308c\u3066\u3044\u308b\u3053\u3068\u304c\u591a\u3044\u3067\u3059\u304c\uff0c\u73fe\u5b9f\u554f\u984c\u3068\u3057\u3066\u5168\u3066\u306e\u95a2\u6570\u3092\u3053\u306e\u3088\u3046\u306b\u5b9f\u88c5\u3059\u308b\u3068\u6050\u308d\u3057\u304f\u5b9f\u88c5\u6642\u9593\u304c\u304b\u304b\u3063\u3066\u3057\u307e\u3044\u307e\u3059\uff0e\u305d\u3053\u3067\uff0c\u6700\u9069\u5316\u3055\u308c\u305f\u95a2\u6570\u304c\u306a\u3044\u5834\u5408\u306f\uff0cCV_Error\u3084CV_Assert\u304c\u547c\u3070\u308c\u308b\u3053\u3068\u306b\u306a\u308a\u307e\u3059\uff08@dandelion1124 \u3055\u3093\u306e\u3053\u306e\u8a18\u4e8b\u3068\u304b\u3042\u306e\u8a18\u4e8b\u3068\u304b\u3092\u53c2\u7167\uff09\uff0e\u3082\u3057\u304f\u306f\uff0c\u826f\u304f\u4f7f\u3046\u30c1\u30e3\u30cd\u30eb\u6570\u3084\u30d3\u30c3\u30c8\u6df1\u5ea6\u306b\u5fdc\u3058\u305f\u95a2\u6570\u3060\u3051\u3092\u7528\u610f\u3057\u3066\uff0c\u5f8c\u306fconvert\u3084\u30ad\u30e3\u30b9\u30c8\u306a\u3069\u306e\u578b\u5909\u63db\u3067\u5bfe\u5fdc\u3059\u308b\u5834\u5408\u3082\u3042\u308a\u307e\u3059\uff0e\u305f\u3068\u3048\u3070\uff0c\u6700\u901f\u3067\u51e6\u7406\u3057\u305f\u30448U\u306e\u5834\u5408\u3068\u4efb\u610f\u306e\u95a2\u6570\u3092\u52d5\u304b\u3059\u305f\u3081\u306bfloat\u306e\u95a2\u6570\u3060\u3051\u3092\u6700\u9069\u5316\u3057\uff0c\u305d\u308c\u4ee5\u5916\u306f\u30ad\u30e3\u30b9\u30c8\u3057\u3066\u4f7f\u3046\u3088\u3046\u306b\u5b9f\u88c5\u3059\u308b\u306e\u3082\u3072\u3068\u3064\u306e\u624b\u3067\u3059\uff0e\nOpenCV\u306e\u95a2\u6570\u3067\u3082\uff0cCV_8U\u3057\u304b\u5bfe\u5fdc\u3057\u3066\u3044\u306a\u3044\u95a2\u6570\uff08\u30e9\u30d9\u30ea\u30f3\u30b0\u306a\u3069\u591a\u6570\uff09\u3084\u30ab\u30e9\u30fc\u3057\u304b\u53d7\u3051\u4ed8\u3051\u306a\u3044\u95a2\u6570(cvtColor\u306a\u3069)\u306a\u3069\u304c\u307b\u3068\u3093\u3069\u3067\u3042\u308a\uff0c\u3053\u308c\u3089\u306f\uff0c\u4e0d\u9069\u5207\u306a\u5165\u529b\u30c7\u30fc\u30bf\u304c\u5165\u3063\u3066\u304f\u308b\u3068\u30a8\u30e9\u30fc\u3092\u51fa\u529b\u3059\u308b\u3088\u3046\u306b\u4f5c\u3089\u308c\u3066\u3044\u307e\u3059\uff0e\u3053\u306e\u3088\u3046\u306a\u975e\u5bfe\u5fdc\u306e\u30c1\u30e3\u30cd\u30eb\u6570\u3084\u30d3\u30c3\u30c8\u6df1\u5ea6\u306e\u3082\u306e\u304c\u5fc5\u8981\u3068\u306a\u3063\u305f\u3068\u304d\u306b\uff0c\u81ea\u8eab\u3067\u5b9f\u88c5\u3057\u3066OpenCV\u3078\u30b3\u30f3\u30c8\u30ea\u30d3\u30e5\u30fc\u30c8\u3059\u308c\u3070\u5927\u5909\u559c\u3070\u308c\u308b\u3067\u3057\u3087\u3046\uff0e\n\n\u307e\u3068\u3081\n\u3053\u306e\u8a18\u4e8b\u3067\u306f\uff0cOpenCV\u3067\u306f\uff0c\u30c1\u30e3\u30cd\u30eb\u6570\uff0c\u30d3\u30c3\u30c8\u6df1\u5ea6\u306b\u5fdc\u3058\u3066\u9ad8\u5ea6\u306b\u6700\u9069\u5316\u3055\u308c\u305f\u95a2\u6570\u304c\u547c\u3070\u308c\u3066\u3044\u308b\u3053\u3068\u3092\u8aac\u660e\u3057\u307e\u3057\u305f\uff0e\nSIMD\u30d9\u30af\u30c8\u30eb\u5316\u306f20\u5e74\u4ee5\u4e0a\u306e\u6b74\u53f2\u304c\u3042\u308b\u306b\u3082\u304b\u304b\u308f\u3089\u305a\uff0c\u3053\u308c\u3089\u306e\u6700\u9069\u5316\u3092\u81ea\u52d5\u7684\u306b\u3084\u3063\u3066\u304f\u308c\u308b\u307b\u3069\u30b3\u30f3\u30d1\u30a4\u30e9\u306e\u9032\u5316\u306f\u8ffd\u3044\u3064\u3044\u3066\u304a\u3089\u305a\uff0c\u307e\u3060\u307e\u3060\u4eba\u306e\u624b\u3067\u3084\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\uff0e\n\u30af\u30cc\u30fc\u30b9\u5148\u751f\u306e\u9ad8\u901f\u5316\u306e\u539f\u5247\u3067\uff0c\u300c\u65e9\u3059\u304e\u308b\u6700\u9069\u5316\u306f\u8af8\u60aa\u306e\u6839\u6e90\u3060\u300d\u3068\u3044\u3046\u8a00\u8449\u306f\u826f\u304f\u77e5\u3089\u308c\u3066\u3044\u308b\u683c\u8a00\u3060\u3068\u601d\u3044\u307e\u3059\uff0e\u3057\u304b\u3057\uff0c\u305d\u306e\u524d\u5f8c\u306b\u7d9a\u304f\u672c\u5f53\u306e\u8a00\u8449\u3092\u77e5\u3063\u3066\u3044\u308b\u3067\u3057\u3087\u3046\u304b\uff1f\u5b9f\u969b\u306f\u3053\u306e\u3088\u3046\u306b\u8ff0\u3079\u3066\u3044\u307e\u3059\uff0e\n\"We should forget about small efficiencies, say about 97% of the time: \npremature optimization is the root of all evil. Yet we should not pass up \nour opportunities in that critical 3%\u201d\nDonald Knuth\n\"\u7d30\u304b\u306a\u52b9\u7387\u306e\u3053\u3068\u306a\u3093\u304b\u306f\u3055\u3063\u3071\u308a\u5fd8\u308c\u3066\uff0c\u6642\u9593\u306e97\uff05\u306b\u3064\u3044\u3066\u8003\u3048\u3088\u3046\uff0e\u3064\u307e\u308a\uff0c\u65e9\u3059\u304e\u308b\u6700\u9069\u5316\u306f\u8af8\u60aa\u306e\u6839\u6e90\u3060\uff0e\u305d\u308c\u3067\u3082\u6b8b\u308a\uff13\uff05\u306e\u6a5f\u4f1a\u3092\u6c7a\u3057\u3066\u9003\u3059\u3079\u304d\u3067\u306f\u306a\u3044\uff0e\"\n\u305d\u3057\u3066\uff0cOpenCV\u306e\u30c1\u30fc\u30e0\u306f\u3055\u3089\u306b\u3053\u3046\u7d9a\u3051\u3066\u3044\u307e\u3059\uff0e\n\u2026 especially when you are doing computer vision on a cell phone\nOpenCV team\n...\u7279\u306b\uff0c\u30e2\u30d0\u30a4\u30eb\u3067\u30b3\u30f3\u30d4\u30e5\u30fc\u30bf\u30d3\u30b8\u30e7\u30f3\u3092\u5b9f\u73fe\u3057\u3088\u3046\u3068\u3059\u308b\u306a\u3089\u306d\uff0e\n\u8aad\u3081\u3070\u5206\u304b\u308b\u3068\u304a\u308a\uff0c\u6700\u9069\u5316\u306f\u975e\u5e38\u306b\u3081\u3093\u3069\u304f\u3055\u3044\u3082\u306e\u3067\u3059\uff0e\u305d\u306e\u305f\u3081\uff0cOpenCV\u306e\u30b3\u30fc\u30c9\u3082\u305c\u3093\u305c\u3093\u6700\u9069\u5316\u3055\u308c\u3066\u3044\u307e\u305b\u3093\uff0e\u3057\u304b\u3057\uff0c\u624b\u9593\u3092\u60dc\u3057\u307e\u306a\u3051\u308c\u3070\uff0cOpenCV\u3088\u308a\u3082\u901f\u3044\u30b3\u30fc\u30c9\u306f\u7c21\u5358\u306b\u304b\u3051\u307e\u3059\uff0e\n\u7686\u69d8\u3082\u6b8b\u308a\uff13\uff05\u306e\u6700\u9069\u5316\u306b\u52b1\u307f\u307e\u3057\u3087\u3046\uff01\uff01\n\u6b21\u56de\u306f\uff0c\u9ad8\u901f\u5316\u306e\u305f\u3081\u306e\u30e2\u30b8\u30e5\u30fc\u30eb\u3067\u3042\u308bHAL\u30e2\u30b8\u30e5\u30fc\u30eb\u3084\u305d\u306e\u4ed6\u306e\u9ad8\u901f\u5316\u30e9\u30a4\u30d6\u30e9\u30ea\u306b\u3064\u3044\u3066\u66f8\u304d\u307e\u3059\uff0e\n#\u306f\u3058\u3081\u306b\n\u3053\u308c\u306f\uff0cOpenCV Advent Calendar 2015\u306e\u8a18\u4e8b\u3067\u3059\uff0e\u95a2\u9023\u8a18\u4e8b\u306f\uff0c\u30ea\u30f3\u30af\u5148\u306b[**\u76ee\u6b21**](http://qiita.com/fukushima1981/items/9211e3586a25db5632a3)\u3068\u3057\u3066\u307e\u3068\u3081\u3089\u308c\u3066\u3044\u307e\u3059\uff0e\n\n\nOpenCV\u306e\u95a2\u6570\u306e\u591a\u304f\u306f\uff0c\u5165\u529b\u30c7\u30fc\u30bf\u306e\u30c1\u30e3\u30cd\u30eb\u6570\u3084\u30d3\u30c3\u30c8\u6df1\u5ea6\u306b\u5fdc\u3058\u3066\u547c\u3073\u51fa\u3059\u95a2\u6570\u3092\u30b9\u30a4\u30c3\u30c1\u3057\u3066\u3044\u307e\u3059\uff0e\u3064\u307e\u308a\uff0cOpenCV\u306e\u95a2\u6570\uff08\u3084IPP\u306e\u95a2\u6570\uff09\u306f\uff0c\u5404\u578b\u3068\u30c1\u30e3\u30cd\u30eb\u6570\u306b\u5fdc\u3058\u3066\u5fb9\u5e95\u7684\u306b\u30c1\u30e5\u30fc\u30f3\u3055\u308c\u305f\u95a2\u6570\u3092\u6301\u3063\u3066\u3044\u307e\u3059\uff0ePython\u3084Matlab\u3068\u3044\u3063\u305f\uff0c\u73fe\u4ee3\u306b\u5408\u308f\u305b\u305f**\u5bcc\u8c6a\u7684\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0**\u3092\u884c\u3046\u74b0\u5883\u304b\u3089\u771f\u9006\u306e\u767a\u60f3\u3092\u884c\u3063\u3066\u3044\u308b\u611f\u899a\u3082\u3042\u308a\u307e\u3059\u304c\uff0c\u7d50\u5c40\uff0cPython\u3084Matlab\u304b\u3089\u547c\u3073\u51fa\u3055\u308c\u308b\u95a2\u6570\u304cOpenCV\u306a\u3069\u306e\u30c1\u30e5\u30fc\u30f3\u3055\u308c\u305f\u30e9\u30a4\u30d6\u30e9\u30ea\u95a2\u6570\u3067\u3042\u308b\u305f\u3081\uff0c\u3069\u3053\u304b\u306e\u6bb5\u968e\u3067\u306f\u6700\u9069\u5316\u3055\u308c\u305f\u95a2\u6570\u7fa4\u3092\u7528\u610f\u3059\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\uff0e\n\n\u3053\u3053\u3067\u306f\uff0c\n1. OpenCV\u306e\u4f8b\n2. IPP\u306e\u4f8b\n3. \u5b9f\u969b\u306b\u81ea\u5206\u3067\u95a2\u6570\u3092\u4f5c\u308b\u4f8b\n\u306e3\u3064\u306e\u4f8b\u3092\u6319\u3052\u3066\u8aac\u660e\u3057\u307e\u3059\uff0e\n\n#\u4f8b\uff11\uff1aOpenCV\u306e\u30dc\u30c3\u30af\u30b9\u30d5\u30a3\u30eb\u30bf\n\u4f8b\uff11\u3067\u306f\uff0c\u5168\u3066\u540c\u3058\u91cd\u307f\u3067\u5e73\u6ed1\u5316\u3059\u308b\u30dc\u30c3\u30af\u30b9\u30d5\u30a3\u30eb\u30bf\u306e\u4e00\u90e8\u3067\u3042\u308b`getColumnSumFilter`\u3092\u4f8b\u306b\u3068\u3063\u3066\u8aac\u660e\u3057\u307e\u3059\uff0e\uff08\u3053\u306e\u95a2\u6570\u3068getRowSumFilter\u3092\u3042\u308f\u305b\u3066\u7e26\u6a2a\u306e\u30d5\u30a3\u30eb\u30bf\u3092\u4f5c\u3063\u3066\u30dc\u30c3\u30af\u30b9\u30d5\u30a3\u30eb\u30bf\u306b\u3057\u307e\u3059\uff0e\uff09\u4e0b\u8a18\u306b\u95a2\u6570\u3092\u629c\u7c8b\u3057\u307e\u3059\uff08\u4e00\u3064\u76ee\u306e\u30b3\u30fc\u30c9\uff09\uff0e\u3053\u306e\u95a2\u6570\u3067\u306f\uff0c\u5165\u529b\u3059\u308bMat\u306e\u30d3\u30c3\u30c8\u6df1\u5ea6\u3068\u51fa\u529b\u3059\u308bMat\u306e\u30d3\u30c3\u30c8\u6df1\u5ea6\u306e\u7d44\u307f\u5408\u308f\u305b\u3054\u3068\u306b\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u95a2\u6570`ColumnSum`\u3092\u7528\u610f\u3057\u3066\u5207\u308a\u66ff\u3048\u308b\u5b9f\u88c5\u3092\u3057\u3066\u3044\u307e\u3059\uff0eColumnSum\u306f\uff0c\u753b\u50cf\u3092\u6a2a\u65b9\u5411\u306b\u7a4d\u5206\u3059\u308b\u95a2\u6570\u3067\u3059\uff0e\n\n\u660e\u3089\u304b\u306b\u5165\u51fa\u529b\u306e\u7d44\u307f\u5408\u308f\u305b\u304c\u7206\u767a\u3057\u3066\u3044\u307e\u3059\u304c\uff0c\u7279\u5b9a\u306e\u826f\u304f\u4f7f\u308f\u308c\u308b\u7d44\u307f\u5408\u308f\u305b\u306b\u5bfe\u3057\u3066\u30c6\u30f3\u30d7\u30ec\u30fc\u30c8\u95a2\u6570\u306e\u7279\u6b8a\u5316\u3092\u3057\u3066\u304a\u308a\uff0c\u826f\u304f\u4f7f\u3046\u95a2\u6570\u306f\u9ad8\u901f\u5316\u3055\u308c\u3066\u3044\u307e\u3059\uff0e\u4f8b\u3048\u3070\uff0cint\u5165\u529bfloat\u51fa\u529b\u306e\u5834\u5408\u306e\u4f8b\u3082\u8868\u793a\u3057\u307e\u3059\uff08\uff12\u3064\u76ee\u306e\u30b3\u30fc\u30c9\uff09\uff0e\n\n**getColumnSumFilter**\n\n```\n//smooth.cpp\ncv::Ptr<cv::BaseColumnFilter> cv::getColumnSumFilter(int sumType, int dstType, int ksize,\n                                                     int anchor, double scale)\n{\n    int sdepth = CV_MAT_DEPTH(sumType), ddepth = CV_MAT_DEPTH(dstType);\n    CV_Assert( CV_MAT_CN(sumType) == CV_MAT_CN(dstType) );\n\n    if( anchor < 0 )\n        anchor = ksize/2;\n\n    if( ddepth == CV_8U && sdepth == CV_32S )\n        return makePtr<ColumnSum<int, uchar> >(ksize, anchor, scale);\n    if( ddepth == CV_8U && sdepth == CV_64F )\n        return makePtr<ColumnSum<double, uchar> >(ksize, anchor, scale);\n    if( ddepth == CV_16U && sdepth == CV_32S )\n        return makePtr<ColumnSum<int, ushort> >(ksize, anchor, scale);\n    if( ddepth == CV_16U && sdepth == CV_64F )\n        return makePtr<ColumnSum<double, ushort> >(ksize, anchor, scale);\n    if( ddepth == CV_16S && sdepth == CV_32S )\n        return makePtr<ColumnSum<int, short> >(ksize, anchor, scale);\n    if( ddepth == CV_16S && sdepth == CV_64F )\n        return makePtr<ColumnSum<double, short> >(ksize, anchor, scale);\n    if( ddepth == CV_32S && sdepth == CV_32S )\n        return makePtr<ColumnSum<int, int> >(ksize, anchor, scale);\n    if( ddepth == CV_32F && sdepth == CV_32S )\n        return makePtr<ColumnSum<int, float> >(ksize, anchor, scale);\n    if( ddepth == CV_32F && sdepth == CV_64F )\n        return makePtr<ColumnSum<double, float> >(ksize, anchor, scale);\n    if( ddepth == CV_64F && sdepth == CV_32S )\n        return makePtr<ColumnSum<int, double> >(ksize, anchor, scale);\n    if( ddepth == CV_64F && sdepth == CV_64F )\n        return makePtr<ColumnSum<double, double> >(ksize, anchor, scale);\n\n    CV_Error_( CV_StsNotImplemented,\n        (\"Unsupported combination of sum format (=%d), and destination format (=%d)\",\n        sumType, dstType));\n\n    return Ptr<BaseColumnFilter>();\n}\n```\n\n**int\u5165\u529bfloat\u51fa\u529b\u306etemplate\u306e\u7279\u6b8a\u5316**\n\n```\ntemplate<>\nstruct ColumnSum<int, float> :\n        public BaseColumnFilter\n{\n    ColumnSum( int _ksize, int _anchor, double _scale ) :\n        BaseColumnFilter()\n    {\n        ksize = _ksize;\n        anchor = _anchor;\n        scale = _scale;\n        sumCount = 0;\n    }\n\n    virtual void reset() { sumCount = 0; }\n\n    virtual void operator()(const uchar** src, uchar* dst, int dststep, int count, int width)\n    {\n        int i;\n        int* SUM;\n        bool haveScale = scale != 1;\n        double _scale = scale;\n\n        #if CV_SSE2\n        bool haveSSE2 =  checkHardwareSupport(CV_CPU_SSE2);\n        #endif\n\n        if( width != (int)sum.size() )\n        {\n            sum.resize(width);\n            sumCount = 0;\n        }\n\n        SUM = &sum[0];\n        if( sumCount == 0 )\n        {\n            memset((void *)SUM, 0, sizeof(int) * width);\n\n            for( ; sumCount < ksize - 1; sumCount++, src++ )\n            {\n                const int* Sp = (const int*)src[0];\n                i = 0;\n\n                #if CV_SSE2\n                if(haveSSE2)\n                {\n                    for( ; i < width-4; i+=4 )\n                    {\n                        __m128i _sum = _mm_loadu_si128((const __m128i*)(SUM+i));\n                        __m128i _sp = _mm_loadu_si128((const __m128i*)(Sp+i));\n                        _mm_storeu_si128((__m128i*)(SUM+i), _mm_add_epi32(_sum, _sp));\n                    }\n                }\n                #elif CV_NEON\n                for( ; i <= width - 4; i+=4 )\n                    vst1q_s32(SUM + i, vaddq_s32(vld1q_s32(SUM + i), vld1q_s32(Sp + i)));\n                #endif\n\n                for( ; i < width; i++ )\n                    SUM[i] += Sp[i];\n            }\n        }\n        else\n        {\n            CV_Assert( sumCount == ksize-1 );\n            src += ksize-1;\n        }\n\n        for( ; count--; src++ )\n        {\n            const int * Sp = (const int*)src[0];\n            const int * Sm = (const int*)src[1-ksize];\n            float* D = (float*)dst;\n            if( haveScale )\n            {\n                i = 0;\n\n                #if CV_SSE2\n                if(haveSSE2)\n                {\n                    const __m128 scale4 = _mm_set1_ps((float)_scale);\n\n                    for( ; i < width-4; i+=4)\n                    {\n                        __m128i _sm   = _mm_loadu_si128((const __m128i*)(Sm+i));\n                        __m128i _s0   = _mm_add_epi32(_mm_loadu_si128((const __m128i*)(SUM+i)),\n                                                      _mm_loadu_si128((const __m128i*)(Sp+i)));\n\n                        _mm_storeu_ps(D+i, _mm_mul_ps(scale4, _mm_cvtepi32_ps(_s0)));\n                        _mm_storeu_si128((__m128i*)(SUM+i), _mm_sub_epi32(_s0,_sm));\n                    }\n                }\n                #elif CV_NEON\n                float32x4_t v_scale = vdupq_n_f32((float)_scale);\n                for( ; i <= width-8; i+=8 )\n                {\n                    int32x4_t v_s0 = vaddq_s32(vld1q_s32(SUM + i), vld1q_s32(Sp + i));\n                    int32x4_t v_s01 = vaddq_s32(vld1q_s32(SUM + i + 4), vld1q_s32(Sp + i + 4));\n\n                    vst1q_f32(D + i, vmulq_f32(vcvtq_f32_s32(v_s0), v_scale));\n                    vst1q_f32(D + i + 4, vmulq_f32(vcvtq_f32_s32(v_s01), v_scale));\n\n                    vst1q_s32(SUM + i, vsubq_s32(v_s0, vld1q_s32(Sm + i)));\n                    vst1q_s32(SUM + i + 4, vsubq_s32(v_s01, vld1q_s32(Sm + i + 4)));\n                }\n                #endif\n\n                for( ; i < width; i++ )\n                {\n                    int s0 = SUM[i] + Sp[i];\n                    D[i] = (float)(s0*_scale);\n                    SUM[i] = s0 - Sm[i];\n                }\n            }\n            else\n            {\n                i = 0;\n\n                #if CV_SSE2\n                if(haveSSE2)\n                {\n                    for( ; i < width-4; i+=4)\n                    {\n                        __m128i _sm   = _mm_loadu_si128((const __m128i*)(Sm+i));\n                        __m128i _s0   = _mm_add_epi32(_mm_loadu_si128((const __m128i*)(SUM+i)),\n                                                      _mm_loadu_si128((const __m128i*)(Sp+i)));\n\n                        _mm_storeu_ps(D+i, _mm_cvtepi32_ps(_s0));\n                        _mm_storeu_si128((__m128i*)(SUM+i), _mm_sub_epi32(_s0,_sm));\n                    }\n                }\n                #elif CV_NEON\n                for( ; i <= width-8; i+=8 )\n                {\n                    int32x4_t v_s0 = vaddq_s32(vld1q_s32(SUM + i), vld1q_s32(Sp + i));\n                    int32x4_t v_s01 = vaddq_s32(vld1q_s32(SUM + i + 4), vld1q_s32(Sp + i + 4));\n\n                    vst1q_f32(D + i, vcvtq_f32_s32(v_s0));\n                    vst1q_f32(D + i + 4, vcvtq_f32_s32(v_s01));\n\n                    vst1q_s32(SUM + i, vsubq_s32(v_s0, vld1q_s32(Sm + i)));\n                    vst1q_s32(SUM + i + 4, vsubq_s32(v_s01, vld1q_s32(Sm + i + 4)));\n                }\n                #endif\n\n                for( ; i < width; i++ )\n                {\n                    int s0 = SUM[i] + Sp[i];\n                    D[i] = (float)(s0);\n                    SUM[i] = s0 - Sm[i];\n                }\n            }\n            dst += dststep;\n        }\n    }\n\n    double scale;\n    int sumCount;\n    std::vector<int> sum;\n};\n```\n\n#\u4f8b\uff12\uff1aIPP\u306e\u5834\u5408\n\u5b9f\u969b\u306b\uff0cOpenCV\u9ad8\u901f\u5316\u306e\u305f\u3081\u306b\u4f7f\u308f\u308c\u3066\u3044\u308bIntel\u306eIPP\u30e9\u30a4\u30d6\u30e9\u30ea\u95a2\u6570\u3067\u3082\uff0c\u7d30\u304b\u304f\u9ad8\u901f\u5316\u3057\u3066\u304a\u308a\uff0c\u4f8b\u3048\u3070\u56db\u5247\u6f14\u7b97\u306f\u304b\u306a\u308a\u7d30\u304b\u304f\u5b9a\u7fa9\u3055\u308c\u3066\u3044\u307e\u3059\uff0e\u4f8b\u3068\u3057\u3066\uff0cOpenCV\u306e\u30d5\u30a9\u30eb\u30c0\u5185\u306e`3rdparty\\ippicv\\unpack\\ippicv_win\\include\\ipp.h`\u5185\u306e\u4e00\u90e8\u3092\u629c\u7c8b\u3057\u307e\u3059\uff0e\u3053\u306e\u3088\u3046\u306b\uff0c\u540c\u3058\u3088\u3046\u3067\uff0c\u5c11\u3057\u3060\u3051\u3053\u3068\u306a\u308b\u95a2\u6570\u3092\u3044\u304f\u3064\u3082\u6301\u3063\u3066\u3044\u307e\u3059\uff0e\u5404\u95a2\u6570\u306e8u\u306fuchar\u7528,16s\u306fshort\u7528\uff0c16u\u306fushort\u7528\u306e\u95a2\u6570\u3092\u3042\u3089\u308f\u3057\u3066\u304a\u308a\uff0cC1\u306f1\u30c1\u30e3\u30cd\u30eb\u7528C3\u306f3\u30c1\u30e3\u30cd\u30eb\uff0cC4\u306f4\u30c1\u30e3\u30cd\u30eb\u3092\u8868\u3057\u3066\u3044\u307e\u3059\uff0e\uff08\u4e0b\u8a18\u306eAC4\u306f4\u30c1\u30e3\u30cd\u30eb\u76ee\u304c\u30a2\u30eb\u30d5\u30a1\u30c1\u30e3\u30cd\u30eb\u4ed8\u306e\u5834\u5408\u3060\u3063\u305f\u3088\u3046\u306a\u8a18\u61b6\u304c\u3042\u308a\u307e\u3059\u304c\uff0c\u8a73\u3057\u304f\u306f\u899a\u3048\u3066\u3044\u307e\u305b\u3093\uff0e\u8abf\u3079\u308c\u3070\u51fa\u3066\u304d\u307e\u3059\uff0e\uff09\n\n\u3053\u306eIPP\u306b\u3064\u3044\u3066\u306e\u5177\u4f53\u7684\u306a\u8a71\u306f\u6b21\u56de\u306b\u8aac\u660e\u3057\u307e\u3059\uff0e\n\n```\n  Name: ippiAddC_8u_C1IRSfs,  ippiAddC_8u_C3IRSfs,  ippiAddC_8u_C4IRSfs,   ippiAddC_8u_AC4IRSfs,\n        ippiAddC_16s_C1IRSfs, ippiAddC_16s_C3IRSfs, ippiAddC_16s_C4IRSfs,  ippiAddC_16s_AC4IRSfs,\n        ippiAddC_16u_C1IRSfs, ippiAddC_16u_C3IRSfs, ippiAddC_16u_C4IRSfs,  ippiAddC_16u_AC4IRSfs,\n        ippiSubC_8u_C1IRSfs,  ippiSubC_8u_C3IRSfs,  ippiSubC_8u_C4IRSfs,   ippiSubC_8u_AC4IRSfs,\n        ippiSubC_16s_C1IRSfs, ippiSubC_16s_C3IRSfs, ippiSubC_16s_C4IRSfs,  ippiSubC_16s_AC4IRSfs,\n        ippiSubC_16u_C1IRSfs, ippiSubC_16u_C3IRSfs, ippiSubC_16u_C4IRSfs,  ippiSubC_16u_AC4IRSfs,\n        ippiMulC_8u_C1IRSfs,  ippiMulC_8u_C3IRSfs,  ippiMulC_8u_C4IRSfs,   ippiMulC_8u_AC4IRSfs,\n        ippiMulC_16s_C1IRSfs, ippiMulC_16s_C3IRSfs, ippiMulC_16s_C4IRSfs,  ippiMulC_16s_AC4IRSfs\n        ippiMulC_16u_C1IRSfs, ippiMulC_16u_C3IRSfs, ippiMulC_16u_C4IRSfs,  ippiMulC_16u_AC4IRSfs\n```\n\n#\u4f8b\uff13\uff1a\u30c1\u30e3\u30cd\u30eb\u6bce\u306b\u30aa\u30d5\u30bb\u30c3\u30c8\u3092\u52a0\u7b97\u3059\u308b\u95a2\u6570\u3092\u81ea\u4f5c\u3059\u308b\u5834\u5408\n\n\u5404\u30c1\u30e3\u30cd\u30eb\uff0c\u30d3\u30c3\u30c8\u6df1\u5ea6\u6bce\u306b\u5b9a\u7fa9\u3055\u308c\u308b\u95a2\u6570\u306f\uff0c\u5177\u4f53\u7684\u306b\u3069\u306e\u3088\u3046\u306b\u9055\u3063\u3066\u3044\u308b\u306e\u3067\u3057\u3087\u3046\u304b\uff1f\u3053\u3053\u3067\u306f\uff0c\u30c1\u30e3\u30cd\u30eb\u6bce\u306b\u9069\u5f53\u306a\u5024\u3092\u52a0\u7b97\u3059\u308b\u95a2\u6570func\u3092\u4f5c\u308b\u3053\u3068\u3092\u60f3\u5b9a\u3057\uff0c\u305d\u308c\u3089\u306e\u9055\u3044\u3092\u7406\u89e3\u3057\u3066\u3044\u304d\u307e\u3059\uff0e\n\n##\u4f5c\u6210\u3059\u308b\u95a2\u6570\n\u307e\u305a\uff0c\u60f3\u5b9a\u3059\u308b\u95a2\u6570\u306f\u4e0b\u8a18\u306e\u3088\u3046\u306b\u5b9f\u88c5\u3067\u304d\u307e\u3059\uff0e\u4efb\u610f\u306e\u30b5\u30a4\u30ba\uff0c\u4efb\u610f\u306e\u30c1\u30e3\u30cd\u30eb\u3092\u6301\u3064\u914d\u5217\u306b\u5bfe\u3057\u3066\u30c1\u30e3\u30cd\u30eb\u6bce\u306b\u30aa\u30d5\u30bb\u30c3\u30c8\u3092\u52a0\u7b97\u3059\u308b\u95a2\u6570\u3067\u3059\uff0e\n\n```\nvoid func(double* src, double* dest, int size, double* offset, int channels)\n{\n\tfor (int i = 0; i < size; ++i)\n\t{\n\t\tfor (int c = 0; c < channels; ++c)\n\t\t{\n\t\t\tdest[channels*i + c] = src[channels*i + c] + offset[c] ;\n\t\t}\n\t}\n}\n```\n\n\u4f7f\u3044\u6368\u3066\u306e\u30b3\u30fc\u30c9\u306a\u3089\u3070\uff0c\u3053\u308c\u3067\u5341\u5206\u306a\u5b9f\u88c5\u3067\u3059\uff0e\u4efb\u610f\u30b5\u30a4\u30ba\u30fb\u30c1\u30e3\u30cd\u30eb\u306b\u5bfe\u5fdc\u3057\u3066\u304a\u308a\uff0cdouble\u578b\u3067\u8a08\u7b97\u3067\u304d\u308c\u3070\uff0c\u307b\u3068\u3093\u3069\u306e\u72b6\u6cc1\u306b\u5bfe\u5fdc\u53ef\u80fd\u306a\u95a2\u6570\u306b\u306a\u3063\u3066\u3044\u308b\u3068\u601d\u3044\u307e\u3059\uff0e\u3057\u304b\u3057\uff0c**\u5e83\u304f\u4f7f\u308f\u308c\u308b\u30e9\u30a4\u30d6\u30e9\u30ea\u95a2\u6570\u3068\u3057\u3066\u306f\u4e0d\u9069\u683c**\u3067\u3059\uff0e\n\n\u3082\u3057\uff0c\u30c1\u30e5\u30fc\u30f3\u3057\u305f\u95a2\u6570\u304c\u7528\u610f\u3055\u308c\u3066\u3044\u308b\u3068\u3057\u305f\u3089\uff0c\u4ee5\u4e0b\u306e\u3088\u3046\u306a\u95a2\u6570\u7fa4\u304c\u5b9a\u7fa9\u3055\u308c\u308b\u3053\u3068\u306b\u306a\u308a\u307e\u3059\uff0e\u4e0b\u8a18\u306e\u30b5\u30d5\u30a3\u30c3\u30af\u30b9\u306f\uff0c8U\u306f8bit\u306e\u30d3\u30c3\u30c8\u6df1\u5ea6\u3092\u8868\u3057\u3066\u304a\u308a8UC3\u306f\uff13\u30c1\u30e3\u30cd\u30eb\u306e8bit\u306e\u30c7\u30fc\u30bf\u3092\u8868\u3057\u3066\u3044\u307e\u3059\uff0e\u540c\u69d8\u306b\u3057\u306632FC4\u306f\uff14\u30c1\u30e3\u30cd\u30eb\u306e32bit float\u578b\u3092\u6307\u3057\u3066\u3044\u307e\u3059\uff0e(\u5f15\u6570\u306a\u3069\u3067\u985e\u63a8\u53ef\u80fd\u306a\u3082\u306e\u306f\u7701\u7565)\n\n```\nfunc_8UC1(uchar* src, uchar* dest);\nfunc_8UC2(uchar* src, uchar* dest);\nfunc_8UC3(uchar* src, uchar* dest);\nfunc_8UC4(uchar* src, uchar* dest);\nfunc_8UC1(uchar* srcdest);\nfunc_8UC2(uchar* srcdest);\nfunc_8UC3(uchar* srcdest);\nfunc_8UC4(uchar* srcdest);\n...\nfunc_16SC1(short* src, short* dest);\nfunc_16SC2(short* src, short* dest);\n...\nfunc_32SC1(int* src, int * dest);\nfunc_32SC2(int* src, int * dest);\n...\nfunc_32FC1(float* src, float* dest);\nfunc_32FC2(float* src, float* dest);\n...\nfunc_64FC1(double* src, double* dest);\nfunc_64FC2(double* src, double* dest);\n...\n```\n##\u95a2\u6570\u5185\u3067\u306e\u5207\u308a\u66ff\u3048\n\u5165\u529b\u3055\u308c\u305f\u30c7\u30fc\u30bf\u306e\u30c1\u30e3\u30cd\u30eb\u6570\u3084\u30d3\u30c3\u30c8\u6df1\u5ea6\u306f\uff0cInputArray\u3084Mat\u306e\u30e1\u30bd\u30c3\u30c9\u3067\u3042\u308b`channels()`\u3084`depth()`\uff0c\u3082\u3057\u304f\u306f\u4e21\u8005\u3092\u53d6\u308c\u308b`type()`\u3068\u3044\u3046\u57fa\u672c\u7684\u306a\u95a2\u6570\u3067\u60c5\u5831\u306e\u53d6\u5f97\u304c\u3067\u304d\u307e\u3059\uff0e\u3055\u3089\u306b\u306f\uff0cinplace\u304b\u3069\u3046\u304b\uff08\u5165\u529b\u3068\u51fa\u529b\u304c\u540c\u3058\u3082\u306e\u3092\u5165\u308c\u3066\u3044\u308b\u5834\u5408\uff09\u3067\u95a2\u6570\u3092\u7528\u610f\u3057\u3066\u3044\u308b\u5834\u5408\u3082\u3042\u308a\u307e\u3059\uff0e\u4f8b\u3048\u3070\uff0c\u7528\u610f\u3055\u308c\u305f\u6700\u9069\u5316\u95a2\u6570\u3092\u30c1\u30e3\u30cd\u30eb\u6570\u3084\u30d3\u30c3\u30c8\u6df1\u5ea6\u306b\u5fdc\u3058\u3066\u5207\u308a\u66ff\u3048\u308b\u95a2\u6570`funcOpt`\u306f\u4e0b\u8a18\u306e\u3088\u3046\u306b\u5b9a\u7fa9\u3059\u308b\u3053\u3068\u304c\u51fa\u6765\u307e\u3059\uff0e\uff08depth\u3060\u3051\uff0cchannles\u3060\u3051\u306e\u5206\u5c90\u3067\u3059\u3080\u306e\u3067\u3042\u308c\u3070\uff0c\u6761\u4ef6\u6570\u306f\u5c11\u306a\u304f\u306a\u308a\u307e\u3059\uff0e\uff09\n\n```\nvoid funcOpt(InputArray src, InputArray offset, OutputArray dest)\n{\n\t//src\u3068dest\u304c\u540c\u3058\u304b\u30c1\u30a7\u30c3\u30af\uff0e\n\tif (src.getMat().data != dest.getMat().data)\n\t{\n\t\tswitch (src.type())\n\t\t{\n\t\tcase CV_8UC1: func_8UC1(); break;\n\t\tcase CV_8UC2: func_8UC2(); break;\n\t\tcase CV_8UC3: func_8UC3(); break;\n\t\tcase CV_8UC4: func_8UC4(); break;\n\t\t\t...\n\t\tcase CV_32FC1: func_32FC1(); break;\n\t\t\t...\n\t\t}\n\t}\n\telse\n\t{\n\t\tswitch (src.type())\n\t\t{\n\t\tcase CV_8UC1: func_8UC1(); break;\n\t\tcase CV_8UC2: func_8UC2(); break;\n\t\tcase CV_8UC3: func_8UC3(); break;\n\t\tcase CV_8UC4: func_8UC4(); break;\n\t\t\t...\n\t\tcase CV_32FC1: func_32FC1(); break;\n\t\t\t...\n\t}\t\n}\n```\n\n##\u5177\u4f53\u7684\u306a\u5b9f\u88c5\n\u5b9f\u969b\u306b\u5404\u6761\u4ef6\u306e\u4e2d\u8eab\u3092\u66f8\u3044\u3066\u307f\u307e\u3057\u3087\u3046\uff0e\u5404\u95a2\u6570\u3092\u9ad8\u901f\u306b\u52d5\u4f5c\u3055\u305b\u308b\u305f\u3081\u306b\uff0cSIMD\u3067\u30d9\u30af\u30c8\u30eb\u5316\u3057\u3066\u5b9a\u7fa9\u3057\u307e\u3059\uff0e\u8a73\u3057\u304f\u306f\uff0c\u6614\u306b\u66f8\u3044\u305f\uff0c[\u7d44\u307f\u8fbc\u307f\u95a2\u6570\uff08intrinsic\uff09\u306b\u3088\u308bSIMD\u5165\u9580](http://www.slideshare.net/FukushimaNorishige/simd-10548373)\u3092\u53c2\u7167\u3057\u3066\u304f\u3060\u3055\u3044\uff0e\n\n###8bit\u3067\uff11\u30c1\u30e3\u30cd\u30eb\u306e\u5834\u5408\nuchar\u306e\u578b\u304c\u5165\u529b\u3055\u308c\u308b\u3053\u3068\u3092\u524d\u63d0\u306b\u3057\u305f\u547d\u4ee4\u30bb\u30c3\u30c8\u3092\u767a\u884c\u3057\u307e\u3059\uff0e\n\n```\nvoid func_8UC1(uchar* src, uchar* dest, int size, uchar offset, int channels)\n{\n\tint sse_uchar_size = size / 16;\n\tconst __m128i moffset = _mm_set1_epi8(offset);\n\tfor (int i = 0; i < sse_uchar_size; ++i)\n\t{\n\t\t__m128i ms = _mm_load_si128((const __m128i*)src);\n\t\tms = _mm_add_epi8(ms, moffset);\n\t\t_mm_store_si128((__m128i*)dest, ms);\n\t\tsrc += 16; dest += 16;\n\t}\n}\n\n```\n\n###8bit\u3067\uff11\u30c1\u30e3\u30cd\u30eb\u306e\u5834\u5408\uff08inplace\u306e\u5834\u5408\uff09\n\u307e\u305f\uff0c\u5165\u529b\u3068\u51fa\u529b\u304c\u540c\u3058inplace\u306a\u5b9f\u88c5\u306e\u5834\u5408\uff0c\u30e1\u30e2\u30ea\u30a2\u30af\u30bb\u30b9\u3084\u30ad\u30e3\u30c3\u30b7\u30e5\u306e\u64cd\u4f5c\u304c\u51fa\u6765\u307e\u3059\uff0e\u30e1\u30e2\u30ea\u306e\u30dd\u30a4\u30f3\u30bf\u306e\u79fb\u52d5\u304c\u4e00\u56de\u3067\u3059\u3093\u3060\u308a\uff0cstream\u547d\u4ee4\u306b\u3088\u308a\u7121\u99c4\u306a\u30ad\u30e3\u30c3\u30b7\u30e5\u3092\u9632\u3050\u3053\u3068\u3092CPU\u306b\u547d\u4ee4\u3059\u308b\u3053\u3068\u304c\u51fa\u6765\u307e\u3059\uff0e\n\n```\nvoid func_incpace_8UC1(uchar* srcdest, int size, uchar offset, int channels)\n{\n\tint sse_uchar_size = size / 16;\n\tconst __m128i moffset = _mm_set1_epi8(offset);\n\tfor (int i = 0; i < sse_uchar_size; ++i)\n\t{\n\t\t__m128i ms = _mm_load_si128((const __m128i*)srcdest);\n\t\tms = _mm_add_epi8(ms, moffset);\n\t\t_mm_stream_si128((__m128i*)srcdest, ms);\n\t\tsrcdest += 16; \n\t}\n}\n```\n\n###32bit\u6d6e\u52d5\u5c0f\u6570\u70b9\u3067\uff11\u30c1\u30e3\u30cd\u30eb\u306e\u5834\u5408\n\u6d6e\u52d5\u5c0f\u6570\u70b9\u306b\u306a\u308b\u3068\u547d\u4ee4\u30bb\u30c3\u30c8\u304c\u4ee3\u308f\u308a\uff0c\u30d9\u30af\u30c8\u30eb\u5316\u306e\u51e6\u7406\u5358\u4f4d\u3082\u5c0f\u3055\u304f\u306a\u308a\u307e\u3059\uff0e\n\n```\nvoid func_32FC1(float* src, float* dest, int size, float offset, int channels)\n{\n\tint sse_float_size = size / 4;\n\tconst __m128 moffset = _mm_set1_ps(offset);\n\tfor (int i = 0; i < sse_float_size; ++i)\n\t{\n\t\t__m128 ms = _mm_load_ps(src);\n\t\tms = _mm_add_ps(ms, moffset);\n\t\t_mm_store_ps(dest, ms);\n\t\tsrc += 4; dest += 4;\n\t}\n}\n```\n\n###32bit\u6d6e\u52d5\u5c0f\u6570\u70b9\u30673\u30c1\u30e3\u30cd\u30eb\u306e\u5834\u5408\n\u30c1\u30e3\u30cd\u30eb\u6570\u304c\u5897\u3048\u308b\u3068\u30e1\u30e2\u30ea\u306e\u30ec\u30a4\u30a2\u30a6\u30c8\u3092\u5909\u3048\u308b\u5fc5\u8981\u304c\u51fa\u3066\u304d\u307e\u3059\uff0e\u901a\u5e38\uff0c\u753b\u50cf\u3092\u4fdd\u5b58\u3059\u308b\u5834\u5408\uff0c\u69cb\u9020\u4f53\u914d\u5217AoS(Array of Structure)\u5f62\u5f0f\u3067\u4fdd\u5b58\u3055\u308c\u3066\u3044\u308b\u5834\u5408\u304c\u591a\u304f\uff0c\u30ab\u30e9\u30fc\u306e\u5834\u5408\uff0cRGB\u306e\u753b\u7d20\u304c\u4e26\u3076RGBRGBRGB\u306e\u3088\u3046\u306a\u69cb\u9020\u3067\u30c7\u30fc\u30bf\u304c\u4fdd\u6301\u3055\u308c\u3066\u3044\u307e\u3059\uff0e\u3057\u304b\u3057\uff0c\u30c1\u30e3\u30cd\u30eb\u6bce\u306b\u51e6\u7406\u3092\u5909\u3048\u308b\u5834\u5408\uff0cSIMD\u6f14\u7b97\u306b\u306f\u90fd\u5408\u304c\u308f\u308b\u304f\u305d\u308c\u3092\u914d\u5217\u69cb\u9020\u4f53SoA(Structure of Array)\uff0c\u30ab\u30e9\u30fc\u306e\u5834\u5408\u306a\u3089\uff0c\u5168\u90e8R\uff0c\u5168\u90e8G\uff0c\u5168\u90e8B\u306e\u914d\u5217\u306b\u5909\u63db\u3059\u308b\u307b\u3046\u304c\u52b9\u7387\u304c\u3088\u304f\u306a\u308a\u307e\u3059\uff0e\n\u6ce8\u610f\uff09\u3053\u306e\u4f8b\u3067\u3042\u308b\uff0cRGB\u306e3\u30c1\u30e3\u30cd\u30eb\u306e\u5834\u5408\u304c\u6700\u3082\u8907\u96d1\u3067\u3059\uff0e2\u306e\u500d\u6570\u3067\u3042\u308b2\u30c1\u30e3\u30f3\u30cd\u30eb\uff0c4\u30c1\u30e3\u30f3\u30cd\u30eb\u306e\u5834\u5408\u306f\uff0c\u3088\u308a\u7c21\u5358\u306bSIMD\u30d9\u30af\u30c8\u30eb\u5316\u3067\u304d\u307e\u3059\uff0e\u306a\u304a\uff0c\u3053\u306e[\u8a18\u4e8b](http://www.isus.jp/article/mic-article/memory-layout/)\u3082\u53c2\u8003\u306b\u306a\u308a\u307e\u3059\uff0e\n\n```\nvoid func_32FC3(float* src, float* dest, int size, float* offset, int channels)\n{\n\tint sse_floatc3_size = size / 12;\n\tconst __m128 moffset0 = _mm_set1_ps(offset[0]);\n\tconst __m128 moffset1 = _mm_set1_ps(offset[1]);\n\tconst __m128 moffset2 = _mm_set1_ps(offset[2]);\n\n\tfor (int i = 0; i < sse_floatc3_size; ++i)\n\t{\n\t\t//AoS 2 SoA\n\t\t__m128 a = _mm_load_ps(src);\n\t\t__m128 b = _mm_load_ps(src + 4);\n\t\t__m128 c = _mm_load_ps(src + 8);\n\n\t\t__m128 rrrr, gggg, bbbb;\n\t\t__m128 aa = _mm_shuffle_ps(a, a, _MM_SHUFFLE(1, 2, 3, 0));\n\t\taa = _mm_blend_ps(aa, b, 4);\n\t\t__m128 cc = _mm_shuffle_ps(c, c, _MM_SHUFFLE(1, 3, 2, 0));\n\t\taa = _mm_blend_ps(aa, cc, 8);\n\t\tbbbb = aa;\n\n\t\taa = _mm_shuffle_ps(a, a, _MM_SHUFFLE(3, 2, 0, 1));\n\t\t__m128 bb = _mm_shuffle_ps(b, b, _MM_SHUFFLE(2, 3, 0, 1));\n\t\tbb = _mm_blend_ps(bb, aa, 1);\n\t\tcc = _mm_shuffle_ps(c, c, _MM_SHUFFLE(2, 3, 1, 0));\n\t\tbb = _mm_blend_ps(bb, cc, 8);\n\t\tgggg = bb;\n\n\t\taa = _mm_shuffle_ps(a, a, _MM_SHUFFLE(3, 1, 0, 2));\n\t\tbb = _mm_blend_ps(aa, b, 2);\n\t\tcc = _mm_shuffle_ps(c, c, _MM_SHUFFLE(3, 0, 1, 2));\n\t\tcc = _mm_blend_ps(bb, cc, 12);\n\t\trrrr = cc;\n\n\t\t//add operation\n\t\tbbbb = _mm_add_ps(rrrr, moffset0);\n\t\tgggg = _mm_add_ps(rrrr, moffset1);\n\t\trrrr = _mm_add_ps(rrrr, moffset2);\n\n\t\t////SoS 2 AoS\n\t\ta = _mm_shuffle_ps(bbbb, bbbb, _MM_SHUFFLE(2, 3, 0, 1));\n\t\tb = _mm_shuffle_ps(gggg, gggg, _MM_SHUFFLE(1, 2, 3, 0));\n\t\tc = _mm_shuffle_ps(rrrr, rrrr, _MM_SHUFFLE(3, 0, 1, 2));\n\t\t_mm_stream_ps((dest), _mm_blend_ps(_mm_blend_ps(b, a, 4), c, 2));\n\t\t_mm_stream_ps((dest + 4), _mm_blend_ps(_mm_blend_ps(c, b, 4), a, 2));\n\t\t_mm_stream_ps((dest + 8), _mm_blend_ps(_mm_blend_ps(a, c, 4), b, 2));\n\n\t\tsrc += 12; dest += 12;\n\t}\n}\n```\n\n\n#\u7406\u60f3\u3068\u73fe\u5b9f\n\u4e0a\u8a18\u306e\u3088\u3046\u306b\u3057\u3066\uff0cOpenCV\u306e\u95a2\u6570\u306f\uff0c**\u30d3\u30c3\u30c8\u6df1\u5ea6**\u3084**\u30c1\u30e3\u30f3\u30cd\u30eb\u6570**\uff0c**inplace\u304b\u3069\u3046\u304b**\u306b\u5fdc\u3058\u3066\u95a2\u6570\u3092\u5207\u308a\u66ff\u3048\u3066\u6700\u9069\u306a\u95a2\u6570\u3092\u9078\u3093\u3067\u3044\u307e\u3059\uff0e\n\n\u56db\u5247\u6f14\u7b97\u3084sin, cos, exp, pow\u306a\u3069\u306e\u57fa\u790e\u7684\u306a\u6f14\u7b97\u95a2\u6570\u306f\u4e01\u5be7\u306b\u4f5c\u3089\u308c\u3066\u3044\u308b\u3053\u3068\u304c\u591a\u3044\u3067\u3059\u304c\uff0c\u73fe\u5b9f\u554f\u984c\u3068\u3057\u3066\u5168\u3066\u306e\u95a2\u6570\u3092\u3053\u306e\u3088\u3046\u306b\u5b9f\u88c5\u3059\u308b\u3068\u6050\u308d\u3057\u304f\u5b9f\u88c5\u6642\u9593\u304c\u304b\u304b\u3063\u3066\u3057\u307e\u3044\u307e\u3059\uff0e\u305d\u3053\u3067\uff0c\u6700\u9069\u5316\u3055\u308c\u305f\u95a2\u6570\u304c\u306a\u3044\u5834\u5408\u306f\uff0cCV_Error\u3084CV_Assert\u304c\u547c\u3070\u308c\u308b\u3053\u3068\u306b\u306a\u308a\u307e\u3059\uff08@dandelion1124 \u3055\u3093\u306e[\u3053\u306e\u8a18\u4e8b](http://qiita.com/dandelion1124/items/2f92eb1ecca204ba33ed)\u3068\u304b\u3042\u306e[\u8a18\u4e8b](http://qiita.com/dandelion1124/items/b80cd4378462f88e34b6)\u3068\u304b\u3092\u53c2\u7167\uff09\uff0e\u3082\u3057\u304f\u306f\uff0c\u826f\u304f\u4f7f\u3046\u30c1\u30e3\u30cd\u30eb\u6570\u3084\u30d3\u30c3\u30c8\u6df1\u5ea6\u306b\u5fdc\u3058\u305f\u95a2\u6570\u3060\u3051\u3092\u7528\u610f\u3057\u3066\uff0c\u5f8c\u306fconvert\u3084\u30ad\u30e3\u30b9\u30c8\u306a\u3069\u306e\u578b\u5909\u63db\u3067\u5bfe\u5fdc\u3059\u308b\u5834\u5408\u3082\u3042\u308a\u307e\u3059\uff0e\u305f\u3068\u3048\u3070\uff0c\u6700\u901f\u3067\u51e6\u7406\u3057\u305f\u30448U\u306e\u5834\u5408\u3068\u4efb\u610f\u306e\u95a2\u6570\u3092\u52d5\u304b\u3059\u305f\u3081\u306bfloat\u306e\u95a2\u6570\u3060\u3051\u3092\u6700\u9069\u5316\u3057\uff0c\u305d\u308c\u4ee5\u5916\u306f\u30ad\u30e3\u30b9\u30c8\u3057\u3066\u4f7f\u3046\u3088\u3046\u306b\u5b9f\u88c5\u3059\u308b\u306e\u3082\u3072\u3068\u3064\u306e\u624b\u3067\u3059\uff0e\n\nOpenCV\u306e\u95a2\u6570\u3067\u3082\uff0cCV_8U\u3057\u304b\u5bfe\u5fdc\u3057\u3066\u3044\u306a\u3044\u95a2\u6570\uff08\u30e9\u30d9\u30ea\u30f3\u30b0\u306a\u3069\u591a\u6570\uff09\u3084\u30ab\u30e9\u30fc\u3057\u304b\u53d7\u3051\u4ed8\u3051\u306a\u3044\u95a2\u6570(cvtColor\u306a\u3069)\u306a\u3069\u304c\u307b\u3068\u3093\u3069\u3067\u3042\u308a\uff0c\u3053\u308c\u3089\u306f\uff0c\u4e0d\u9069\u5207\u306a\u5165\u529b\u30c7\u30fc\u30bf\u304c\u5165\u3063\u3066\u304f\u308b\u3068\u30a8\u30e9\u30fc\u3092\u51fa\u529b\u3059\u308b\u3088\u3046\u306b\u4f5c\u3089\u308c\u3066\u3044\u307e\u3059\uff0e\u3053\u306e\u3088\u3046\u306a\u975e\u5bfe\u5fdc\u306e\u30c1\u30e3\u30cd\u30eb\u6570\u3084\u30d3\u30c3\u30c8\u6df1\u5ea6\u306e\u3082\u306e\u304c\u5fc5\u8981\u3068\u306a\u3063\u305f\u3068\u304d\u306b\uff0c\u81ea\u8eab\u3067\u5b9f\u88c5\u3057\u3066OpenCV\u3078\u30b3\u30f3\u30c8\u30ea\u30d3\u30e5\u30fc\u30c8\u3059\u308c\u3070\u5927\u5909\u559c\u3070\u308c\u308b\u3067\u3057\u3087\u3046\uff0e\n\n\n#\u307e\u3068\u3081\n\u3053\u306e\u8a18\u4e8b\u3067\u306f\uff0cOpenCV\u3067\u306f\uff0c\u30c1\u30e3\u30cd\u30eb\u6570\uff0c\u30d3\u30c3\u30c8\u6df1\u5ea6\u306b\u5fdc\u3058\u3066\u9ad8\u5ea6\u306b\u6700\u9069\u5316\u3055\u308c\u305f\u95a2\u6570\u304c\u547c\u3070\u308c\u3066\u3044\u308b\u3053\u3068\u3092\u8aac\u660e\u3057\u307e\u3057\u305f\uff0e\nSIMD\u30d9\u30af\u30c8\u30eb\u5316\u306f20\u5e74\u4ee5\u4e0a\u306e\u6b74\u53f2\u304c\u3042\u308b\u306b\u3082\u304b\u304b\u308f\u3089\u305a\uff0c\u3053\u308c\u3089\u306e\u6700\u9069\u5316\u3092\u81ea\u52d5\u7684\u306b\u3084\u3063\u3066\u304f\u308c\u308b\u307b\u3069\u30b3\u30f3\u30d1\u30a4\u30e9\u306e\u9032\u5316\u306f\u8ffd\u3044\u3064\u3044\u3066\u304a\u3089\u305a\uff0c\u307e\u3060\u307e\u3060\u4eba\u306e\u624b\u3067\u3084\u308b\u5fc5\u8981\u304c\u3042\u308a\u307e\u3059\uff0e\n\n\u30af\u30cc\u30fc\u30b9\u5148\u751f\u306e\u9ad8\u901f\u5316\u306e\u539f\u5247\u3067\uff0c\u300c\u65e9\u3059\u304e\u308b\u6700\u9069\u5316\u306f\u8af8\u60aa\u306e\u6839\u6e90\u3060\u300d\u3068\u3044\u3046\u8a00\u8449\u306f\u826f\u304f\u77e5\u3089\u308c\u3066\u3044\u308b\u683c\u8a00\u3060\u3068\u601d\u3044\u307e\u3059\uff0e\u3057\u304b\u3057\uff0c\u305d\u306e\u524d\u5f8c\u306b\u7d9a\u304f\u672c\u5f53\u306e\u8a00\u8449\u3092\u77e5\u3063\u3066\u3044\u308b\u3067\u3057\u3087\u3046\u304b\uff1f\u5b9f\u969b\u306f\u3053\u306e\u3088\u3046\u306b\u8ff0\u3079\u3066\u3044\u307e\u3059\uff0e\n\n\"We should forget about small efficiencies, say about 97% of the time: \npremature optimization is the root of all evil. **Yet we should not pass up \nour opportunities in that critical 3%**\u201d\nDonald Knuth\n\"\u7d30\u304b\u306a\u52b9\u7387\u306e\u3053\u3068\u306a\u3093\u304b\u306f\u3055\u3063\u3071\u308a\u5fd8\u308c\u3066\uff0c\u6642\u9593\u306e97\uff05\u306b\u3064\u3044\u3066\u8003\u3048\u3088\u3046\uff0e\u3064\u307e\u308a\uff0c\u65e9\u3059\u304e\u308b\u6700\u9069\u5316\u306f\u8af8\u60aa\u306e\u6839\u6e90\u3060\uff0e**\u305d\u308c\u3067\u3082\u6b8b\u308a\uff13\uff05\u306e\u6a5f\u4f1a\u3092\u6c7a\u3057\u3066\u9003\u3059\u3079\u304d\u3067\u306f\u306a\u3044**\uff0e\"\n\n\u305d\u3057\u3066\uff0cOpenCV\u306e\u30c1\u30fc\u30e0\u306f\u3055\u3089\u306b\u3053\u3046\u7d9a\u3051\u3066\u3044\u307e\u3059\uff0e\n\u2026 especially when you are doing computer vision on a cell phone\nOpenCV team\n...\u7279\u306b\uff0c\u30e2\u30d0\u30a4\u30eb\u3067\u30b3\u30f3\u30d4\u30e5\u30fc\u30bf\u30d3\u30b8\u30e7\u30f3\u3092\u5b9f\u73fe\u3057\u3088\u3046\u3068\u3059\u308b\u306a\u3089\u306d\uff0e\n\n\u8aad\u3081\u3070\u5206\u304b\u308b\u3068\u304a\u308a\uff0c\u6700\u9069\u5316\u306f\u975e\u5e38\u306b\u3081\u3093\u3069\u304f\u3055\u3044\u3082\u306e\u3067\u3059\uff0e\u305d\u306e\u305f\u3081\uff0cOpenCV\u306e\u30b3\u30fc\u30c9\u3082\u305c\u3093\u305c\u3093\u6700\u9069\u5316\u3055\u308c\u3066\u3044\u307e\u305b\u3093\uff0e\u3057\u304b\u3057\uff0c\u624b\u9593\u3092\u60dc\u3057\u307e\u306a\u3051\u308c\u3070\uff0cOpenCV\u3088\u308a\u3082\u901f\u3044\u30b3\u30fc\u30c9\u306f\u7c21\u5358\u306b\u304b\u3051\u307e\u3059\uff0e\n\u7686\u69d8\u3082\u6b8b\u308a**\uff13\uff05**\u306e\u6700\u9069\u5316\u306b\u52b1\u307f\u307e\u3057\u3087\u3046\uff01\uff01\n\n\u6b21\u56de\u306f\uff0c\u9ad8\u901f\u5316\u306e\u305f\u3081\u306e\u30e2\u30b8\u30e5\u30fc\u30eb\u3067\u3042\u308b[HAL\u30e2\u30b8\u30e5\u30fc\u30eb\u3084\u305d\u306e\u4ed6\u306e\u9ad8\u901f\u5316\u30e9\u30a4\u30d6\u30e9\u30ea](http://qiita.com/fukushima1981/items/69c653e09f553b2d4134)\u306b\u3064\u3044\u3066\u66f8\u304d\u307e\u3059\uff0e\n\n\n"}