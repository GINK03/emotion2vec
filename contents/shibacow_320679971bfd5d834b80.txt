{"context": "\n\ngolang-echo\u3068python-flask\u306e\u5b9f\u884c\u901f\u5ea6\u3092\u6bd4\u8f03\u3057\u3066\u307f\u308b\n\u4eca\u307e\u3067\u305a\u3063\u3068python\u3092\u89e6\u3063\u3066\u3044\u3066\u7279\u306b\u4e0d\u6e80\u3082\u306a\u304b\u3063\u305f\u304c\u3001\u6700\u8fd1golang\u3092\u89e6\u3063\u3066\u3044\u308b\u3002\n\u4f55\u304b\u3092\u3061\u3087\u3053\u3061\u3087\u3053\u3068\u4f5c\u308b\u306e\u306bpython\u306f\u4fbf\u5229\u3060\u304c\u901f\u5ea6\u304c\u5fc5\u8981\u306a\u3068\u304d\u306bgolang\u3092\u4f7f\u3063\u3066\u3069\u306e\u7a0b\u5ea6\u65e9\u304f\u306a\u308b\u306e\u304b\u611f\u899a\u7684\u306b\u63b4\u307f\u305f\u3044\u3068\u601d\u3044\u3001golang\u3067\u4ee3\u8868\u7684\u306aweb\u30d5\u30ec\u30fc\u30e0\u30ef\u30fc\u30afecho\u3068python\u306e\u8efd\u91cfwebframework\u306eflask\u3092\u6bd4\u8f03\u3057\u3066\u3001\u3069\u306e\u7a0b\u5ea6\u901f\u5ea6\u306b\u5dee\u304c\u3042\u308b\u304b\u8abf\u3079\u3066\u307f\u305f\u3002\n\n\u30c6\u30b9\u30c8\u74b0\u5883\nvmware\u4e0a\u306b\u69cb\u7bc9\u3057\u305fubuntu 16.04 hdd\u306f\u666e\u901a\u306e\u3084\u3064\u3067ssd\u3067\u306f\u306a\u3044\u3002\ni7,memory 6GB\npython2.7\ngolang 1.6\n\n\u30b7\u30f3\u30d7\u30eb\u306a\u6587\u5b57\u5217\u3092\u8fd4\u3059web\u30a2\u30d7\u30ea\n\u307e\u305a\u611f\u89e6\u3092\u3064\u304b\u3080\u305f\u3081\u306b\u7c21\u5358\u306aweb\u30a2\u30d7\u30ea\u3092\u4f5c\u3063\u3066\u307f\u308b\n\ngolang-echo\u3092\u4f7f\u3063\u305f\u30b7\u30f3\u30d7\u30eb\u306a\u30a2\u30d7\u30ea\n\u307e\u305a\u306f\u3001golang\u3092\u4f7f\u3063\u305f\u30b7\u30f3\u30d7\u30eb\u306aweb\u30a2\u30d7\u30ea\u304b\u3089\n\nsimple_server.go\n\npackage main\nimport (\n        \"net/http\"\n        \"github.com/labstack/echo\"\n        \"github.com/labstack/echo/engine/standard\"\n)\nfunc main() {\n        e := echo.New()\n        e.GET(\"/\", func(c echo.Context) error {\n                return c.String(http.StatusOK, \"Hello, World!\")\n        })\n        e.Run(standard.New(\":1323\"))\n}\n\n\ngolang\u3067echo\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u4f7f\u3048\u3070\u3053\u308c\u3060\u3051\u66f8\u3051\u3070\u3001Hello World \u3092\u8fd4\u3059web\u30a2\u30d7\u30ea\u306b\u306a\u308a\u624b\u8efd\u3060\u3002\n\ngolang-echo\u306e\u901f\u5ea6\u306e\u901f\u5ea6\u3092\u8a08\u6e2c\u3057\u3066\u307f\u308b\napach bench\u3092\u4f7f\u3063\u3066\u901f\u5ea6\u3092\u898b\u3066\u307f\u308b\nshibacow@ubuntu:~/prog/golang/echo_test$ ab -n 100000 -c 100 http://localhost:1323/\nThis is ApacheBench, Version 2.3 <$Revision: 1706008 $>\nCopyright 1996 Adam Twiss, Zeus Technology Ltd, http://www.zeustech.net/\nLicensed to The Apache Software Foundation, http://www.apache.org/\n\nBenchmarking localhost (be patient)\nCompleted 10000 requests\n...\nCompleted 100000 requests\nFinished 100000 requests\n\nServer Software:\nServer Hostname:        localhost\nServer Port:            1323\n\nDocument Path:          /\nDocument Length:        13 bytes\n\nConcurrency Level:      100\nTime taken for tests:   9.525 seconds\nComplete requests:      100000\nFailed requests:        0\nTotal transferred:      13000000 bytes\nHTML transferred:       1300000 bytes\nRequests per second:    10498.93 [#/sec] (mean)\nTime per request:       9.525 [ms] (mean)\nTime per request:       0.095 [ms] (mean, across all concurrent requests)\nTransfer rate:          1332.87 [Kbytes/sec] received\n\nConnection Times (ms)\n              min  mean[+/-sd] median   max\nConnect:        0    3   2.8      2      19\nProcessing:     0    6   3.2      7      31\nWaiting:        0    5   2.5      4      26\nTotal:          0    9   4.1      9      33\n\nPercentage of the requests served within a certain time (ms)\n  50%      9\n  66%     11\n  75%     12\n  80%     13\n  90%     15\n  95%     17\n  98%     18\n  99%     19\n100% 33 (longest request)\n\n\nRequests per second:    10498.93 #/sec\n\n\u3068\u5bfe\u3057\u3066\u30c1\u30e5\u30fc\u30cb\u30f3\u30b0\u3057\u306a\u304f\u3066\u30821\u4e07req/sec\u304f\u3089\u3044\u51fa\u308b\u3088\u3046\u3060\n\npython-flask\u3092\u4f7f\u3063\u305f\u30b7\u30f3\u30d7\u30eb\u306a\u30a2\u30d7\u30ea\n\u6b21\u306bflask\u3092\u8abf\u3079\u3066\u307f\u308b\n\nsimple_server.py\n#!/usr/bin/env python\n# -*- coding:utf-8 -*-\n\nfrom flask import Flask\napp = Flask(__name__)\n\n@app.route(\"/\")\ndef hello():\n    return \"Hello World!\"\n\nif __name__ == '__main__':\napp.run()\n\n\nflask\u3082\u3053\u308c\u3067\u3001Hello World \u3092\u8fd4\u3059\n\npython-flask\u306e\u30d9\u30f3\u30c1\u30de\u30fc\u30af\nshibacow@ubuntu:~/prog/golang/echo_test$ ab -n 10000 -c 100  http://localhost:5000/\nThis is ApacheBench, Version 2.3 <$Revision: 1706008 $>\nCopyright 1996 Adam Twiss, Zeus Technology Ltd, http://www.zeustech.net/\nLicensed to The Apache Software Foundation, http://www.apache.org/\n\nBenchmarking localhost (be patient)\nCompleted 1000 requests\n...\nCompleted 10000 requests\nFinished 10000 requests\n\n\nServer Software:        Werkzeug/0.11.10\nServer Hostname:        localhost\nServer Port:            5000\n\nDocument Path:          /\nDocument Length:        12 bytes\n\nConcurrency Level:      100\nTime taken for tests:   8.190 seconds\nComplete requests:      10000\nFailed requests:        0\nTotal transferred:      1680000 bytes\nHTML transferred:       120000 bytes\nRequests per second:    1220.97 [#/sec] (mean)\nTime per request:       81.902 [ms] (mean)\nTime per request:       0.819 [ms] (mean, across all concurrent requests)\nTransfer rate:          200.32 [Kbytes/sec] received\n\nConnection Times (ms)\n              min  mean[+/-sd] median   max\nConnect:        0    0   0.7      0       8\nProcessing:     2   81  12.6     81     148\nWaiting:        1   81  12.5     81     148\nTotal:          6   81  12.2     81     148\n\nPercentage of the requests served within a certain time (ms)\n  50%     81\n  66%     90\n  75%     91\n  80%     92\n  90%     95\n  95%     98\n  98%    101\n  99%    106\n 100%    148 (longest request)\n\n\nRequests per second:    1220.97 #/sec\n\n\u7279\u306b\u4f55\u3082\u305b\u305a\u30011220req/sec\u4f4d\u51fa\u308b\n\nMongo\u306b\u63a5\u7d9a\u3057\u3066\u3001\u691c\u7d22\u3057\u3066\u7d50\u679c\u3092\u8fd4\u3059web\u30a2\u30d7\u30ea\n\u30b7\u30f3\u30d7\u30eb\u306a\u30a2\u30d7\u30ea\u3060\u3068\u73fe\u5b9f\u306e\u554f\u984c\u3068\u305a\u308c\u3066\u3057\u307e\u3046\u306e\u3067\u3001mongo\u306b\u63a5\u7d9a\u3057\u3001\u691c\u7d22\u3057\u3066\u7d50\u679c\u3092\u8fd4\u3059\u306a\u3069\u3001\u5c11\u3057\u73fe\u5b9f\u3088\u308a\u306e\u3082\u306e\u3092\u5165\u308c\u308b\u3002\n\u3053\u3061\u3089\u306e\u30b5\u30a4\u30c8\u3092\u53c2\u8003\u306b\u3057\u305f\u3002\n\ngolang-echo\u3092\u4f7f\u3063\u305fmongo\u306b\u63a5\u7d9a\u3059\u308bweb\u30a2\u30d7\u30ea\n\nmgo_server.go\n\npackage main\n\nimport (\n        // \u30b5\u30fc\u30d0\u7cfb\n        \"net/http\"\n        \"github.com/labstack/echo\"\n        \"github.com/labstack/echo/engine/standard\"\n\n        // mongo\u7cfb\n        \"fmt\"\n        \"gopkg.in/mgo.v2\"\n        \"gopkg.in/mgo.v2/bson\"\n\n        // \u578b\n        \"strconv\"\n        //\"reflect\"\n)\n\n// \u30e6\u30fc\u30b6\u30af\u30e9\u30b9\ntype User struct {\n        Name  string `bson:\"name\"`\n        Id int `bson:\"id\"`\n}\n\nfunc main() {\n        e := echo.New()\n        e.GET(\"/\", func(c echo.Context) error {\n                return c.String(http.StatusOK, \"Hello, World!\")\n        })\n\n        // :id, :name \u306b\u5024\u304c\u5165\u3063\u3066\u3044\u306a\u3044\u3068Not Found\u306b\u306a\u308b\n        e.GET(\"/users/id/:id\", func(c echo.Context) error {\n\n                // \u6570\u5024\u306b\u5909\u63db\u3059\u308b\u5fc5\u8981\u3042\u308a\n                var id int\n                id, _ = strconv.Atoi(c.Param(\"id\"))\n\n                //id\u3067DB\u3092\u5f15\u304f\n                session, _ := mgo.Dial(\"mongodb://localhost\")\n                defer session.Close()\n                db := session.DB(\"test\")\n\n                // id\u6307\u5b9a\u3067\u30e6\u30fc\u30b6\u53d6\u5f97\n                var results []User\n                fmt.Println(id)\n                db.C(\"user\").Find(bson.M{\"id\": id}).All(&results)\n\n                fmt.Println(\"Results of one user: \", results)\n                fmt.Println(len(results))\n\n                if len(results) == 0 {\n                        return c.String(http.StatusOK, \"No user\")\n                }else{\n                        name := results[0].Name\n                        return c.String(http.StatusOK, \"Hello, \" + name)\n                }\n        })\n\n        e.POST(\"/user\", func(c echo.Context) error {\n                return c.String(http.StatusOK, \"Hello, POST user\")\n        })\n\n        // \u30dd\u30fc\u30c8\n        e.Run(standard.New(\":1323\"))\n}\n\n\n\n\ngolang-echo mongo\u63a5\u7d9a\u306e\u30d9\u30f3\u30c1\u30de\u30fc\u30af\nmongo\u306b\u63a5\u7d9a\u3057\u3066\u3001\u7d50\u679c\u3092\u8fd4\u3059\u3082\u306e\u306e\u30d9\u30f3\u30c1\u30de\u30fc\u30af\nshibacow@ubuntu:~/prog/golang/echo_test$ ab -n 10000 -c 100  http://localhost:1323/users/id/1\nThis is ApacheBench, Version 2.3 <$Revision: 1706008 $>\nCopyright 1996 Adam Twiss, Zeus Technology Ltd, http://www.zeustech.net/\nLicensed to The Apache Software Foundation, http://www.apache.org/\n\nBenchmarking localhost (be patient)\nCompleted 1000 requests\n.....\nCompleted 10000 requests\nFinished 10000 requests\n\nServer Software:\nServer Hostname:        localhost\nServer Port:            1323\n\nDocument Path:          /users/id/1\nDocument Length:        11 bytes\n\nConcurrency Level:      100\nTime taken for tests:   9.156 seconds\nComplete requests:      10000\nFailed requests:        0\nTotal transferred:      1280000 bytes\nHTML transferred:       110000 bytes\nRequests per second:    1092.21 [#/sec] (mean)\nTime per request:       91.557 [ms] (mean)\nTime per request:       0.916 [ms] (mean, across all concurrent requests)\nTransfer rate:          136.53 [Kbytes/sec] received\n\nConnection Times (ms)\n              min  mean[+/-sd] median   max\nConnect:        0    1   4.4      0      29\nProcessing:     9   90  24.9     88     213\nWaiting:        9   89  25.1     87     213\nTotal:         25   91  24.3     89     213\n\nPercentage of the requests served within a certain time (ms)\n  50%     89\n  66%    100\n  75%    107\n  80%    112\n  90%    123\n  95%    134\n  98%    147\n  99%    156\n 100%    213 (longest request)\n\n\n\nRequests per second:    1092.21 #/sec\n\n\npytho-flask \u3092\u4f7f\u3063\u3066mongo\u3092\u63a5\u7d9a\u3057\u3001\u7d50\u679c\u3092\u53d6\u5f97\u3059\u308b\nmongo\u3067\u63a5\u7d9a\u3059\u308b\u30a2\u30d7\u30ea\u3092\u4f5c\u308b\u3002\n\nmongo_server.py\n\n#!/usr/bin/env python\n# -*- coding:utf-8 -*-\n\nfrom flask import Flask\nfrom flask_pymongo import PyMongo\napp = Flask(__name__)\napp.config['MONGO_HOST']='localhost'\napp.config['MONGO_DBNAME'] = 'test'\nmongo = PyMongo(app)\n\n@app.route(\"/users/id/<int:id>\")\ndef user_id(id):\n    user= mongo.db.user.find_one({\"id\":id})\n    msg=\"Hello id={} name={}\".format(user[\"id\"],user['name'])\n    return msg\n\n@app.route(\"/\")\ndef hello():\n    return \"Hello World!\"\n\nif __name__ == '__main__':\n    app.run(host=\"0.0.0.0\",debug=False)\n\n\n\npython-flask\u3092\u4f7f\u3063\u305f\u30d9\u30f3\u30c1\u30de\u30fc\u30af\nshibacow@ubuntu:~/prog/python/flask_test$ ab -n 10000 -c100 http://localhost:500\n0/users/id/1\nThis is ApacheBench, Version 2.3 <$Revision: 1706008 $>\nCopyright 1996 Adam Twiss, Zeus Technology Ltd, http://www.zeustech.net/\nLicensed to The Apache Software Foundation, http://www.apache.org/\n\nBenchmarking localhost (be patient)\nCompleted 1000 requests\n.....\nCompleted 10000 requests\nFinished 10000 requests\n\nServer Software:        Werkzeug/0.11.10\nServer Hostname:        localhost\nServer Port:            5000\n\nDocument Path:          /users/id/1\nDocument Length:        20 bytes\n\nConcurrency Level:      100\nTime taken for tests:   12.639 seconds\nComplete requests:      10000\nFailed requests:        0\nTotal transferred:      1760000 bytes\nHTML transferred:       200000 bytes\nRequests per second:    791.22 [#/sec] (mean)\nTime per request:       126.387 [ms] (mean)\nTime per request:       1.264 [ms] (mean, across all concurrent requests)\nTransfer rate:          135.99 [Kbytes/sec] received\n\nConnection Times (ms)\n              min  mean[+/-sd] median   max\nConnect:        0    0   0.7      0       8\nProcessing:     6  126  11.8    125     164\nWaiting:        6  125  11.8    125     163\nTotal:         11  126  11.5    125     164\n\nPercentage of the requests served within a certain time (ms)\n  50%    125\n  66%    129\n  75%    131\n  80%    132\n  90%    138\n  95%    143\n  98%    149\n  99%    153\n 100%    164 (longest request)\n\n\n\nRequests per second:    791.22 #/sec\n\n\n\u307e\u3068\u3081\ngolang-echo\u3068python-flask\u306e\u901f\u5ea6\u3092\u6bd4\u8f03\u3057\u305f\u3002\n\n\n\n\u6bd4\u8f03\n\u30b7\u30f3\u30d7\u30eb\u306a\u30a2\u30d7\u30ea\n\u8907\u96d1\u306a\u30a2\u30d7\u30ea\n\n\n\n\ngolang-echo\n\n10498 req/sec\n\n1092 req/sec\n\n\npython-flask\n\n1220 req/sec\n\n791 req/sec\n\n\n\n\u30b7\u30f3\u30d7\u30eb\u306a\u30a2\u30d7\u30ea\u3067\u306f\u3001\uff11\uff10\u500d\u4f4d\u6027\u80fd\u304c\u9055\u3046\u304c\u3001mongo\u306b\u63a5\u7d9a\u3059\u308b\u5834\u5408\u306f\u3001\u305d\u3053\u307e\u3067\u901f\u5ea6\u5dee\u304c\u51fa\u306a\u3044\u3002\u30ea\u30af\u30a8\u30b9\u30c8\u306e\u305f\u3073\u306bmongo\u306b\u63a5\u7d9a\u3059\u308b\u306e\u3067\u305d\u3061\u3089\u306e\u65b9\u304c\u3001\u8ca0\u8377\u304c\u9ad8\u3044\u306e\u304b\u3082\u3057\u308c\u306a\u3044\u3002echo\u3082pymongo\u3082\u30b3\u30cd\u30af\u30b7\u30e7\u30f3\u30d7\u30fc\u30eb\u3092\u4f7f\u3048\u3070\u307e\u305f\u7d50\u679c\u306f\u5909\u308f\u308b\u306e\u304b\u3082\u3057\u308c\u306a\u3044\u3002\ngolang\u3068python\u3092\u6bd4\u8f03\u3057\u305f\u306e\u306f\u5225\u306bpython\u306e\u6027\u80fd\u3092\u8cb6\u3081\u305f\u3044\u308f\u3051\u3067\u306f\u306a\u304f\u3001\u5358\u306b\u5927\u4f53\u3069\u3053\u304f\u3089\u3044\u5dee\u304c\u3042\u308b\u306e\u304b\u3092\u4f53\u611f\u3057\u305f\u3044\u304b\u3089\u3060\u3002\n\n\u307e\u3068\u3081(\u8ffd\u8a18)\n\u4e0b\u8a18\u8ffd\u8a18\u306b\u3042\u308b\u304c\u3001mongo\u3078\u306e\u6bce\u56de\u3078\u306e\u63a5\u7d9a\u3092\u3084\u3081\u3066\u3001\u4e00\u56de\u63a5\u7d9a\u3092\u3057\u3066\u4f7f\u3044\u56de\u3057\u7528\u306b\u3057\u305f\u3089\u3001\u3060\u3044\u3076\u9ad8\u901f\u5316\u3057\u305f\u3002\u305f\u3060\u3001\u30bb\u30c3\u30b7\u30e7\u30f3\u304c\u72b6\u614b\u3092\u6301\u3061\u7d9a\u3051\u308b\u306e\u3067\u3001\u4f8b\u3048\u3070\u30a2\u30c3\u30d7\u30c7\u30fc\u30c8\u3057\u305f\u308a\u3068\u304b\u3001\u30b3\u30df\u30c3\u30c8\u3057\u305f\u308a\u3059\u308b\u3068\u304d\u306b\u3069\u306e\u3088\u3046\u306b\u306a\u308b\u304b\u306f\u308f\u304b\u3089\u306a\u3044\u306e\u3067\u3001\u30d9\u30f3\u30c1\u30de\u30fc\u30af\u4ee5\u5916\u306e\u672c\u756a\u74b0\u5883\u3067\u4f7f\u3046\u306b\u306f\u691c\u8a3c\u304c\u5fc5\u8981\u3060\u308d\u3046\u3002\n\n\n\n\u6bd4\u8f03\n\u30b7\u30f3\u30d7\u30eb\u306a\u30a2\u30d7\u30ea\n\u8907\u96d1\u306a\u30a2\u30d7\u30ea\n\n\n\n\ngolang-echo\n\n10498 req/sec\n\n1092 req/sec\n\n\ngolang-echo(\u4e0b\u8a18\u6539\u826f\u7248)\n\u306a\u3057\n\n6283.74 req/sec\n\n\npython-flask\n\n1220 req/sec\n\n791 req/sec\n\n\n\n\n\u8ffd\u8a18 golang-echo mongo\u63a5\u7d9a\u3057\u3066\u7d50\u679c\u3092\u53d6\u5f97\u306e\u9ad8\u901f\u5316\n\ngolang-echo mongo\u63a5\u7d9a\u6539\u826f\n\u4e0a\u306e\u4f8b\u3067\u306f\u3001\u4e00\u30ea\u30af\u30a8\u30b9\u30c8\u3042\u305f\u308a\u3001mongo\u3078\u306e\u63a5\u7d9a\u3068\u5207\u65ad\u3092\u7e70\u308a\u8fd4\u3057\u3066\u3044\u305f\u3002\u305d\u308c\u3092\u3084\u3081\u3066GET\u306e\u5916\u5074\u3067\u63a5\u7d9a\u3068\u5207\u65ad\u3092\u3084\u308b\u3002\u6a19\u6e96\u51fa\u529b\u3078\u306e\u8868\u793a\u306f\u9045\u304f\u306a\u308b\u5143\u306a\u306e\u3067\u305d\u308c\u3092\u3084\u3081\u305f\u3002\n\nmgo_server.go\npackage main\n\nimport (\n        // \u30b5\u30fc\u30d0\u7cfb\n        \"net/http\"\n        \"github.com/labstack/echo\"\n        \"github.com/labstack/echo/engine/standard\"\n\n        // mongo\u7cfb\n        //\"fmt\" //\u6a19\u6e96\u51fa\u529b\u306f\u9045\u3044\u306e\u3067\u3001\u6b62\u3081\u308b\n        \"gopkg.in/mgo.v2\"\n        \"gopkg.in/mgo.v2/bson\"\n\n        // \u578b\n        \"strconv\"\n        //\"reflect\"\n)\n\n// \u30e6\u30fc\u30b6\u30af\u30e9\u30b9\ntype User struct {\n        Name  string `bson:\"name\"`\n        Id int `bson:\"id\"`\n}\n\nfunc main() {\n        e := echo.New()\n        //id\u3067DB\u3092\u5f15\u304fGET\u306e\u5916\u5074\u306b\u51fa\u3057\u3066\u3001\u6bce\u56de\u306e\u63a5\u7d9a\u30fb\u5207\u65ad\u3092\u3084\u3081\u305f\n        session, _ := mgo.Dial(\"mongodb://localhost\")\n        defer session.Close()\n        db := session.DB(\"test\")\n\n        e.GET(\"/\", func(c echo.Context) error {\n                return c.String(http.StatusOK, \"Hello, World!\")\n        })\n\n        // :id, :name \u306b\u5024\u304c\u5165\u3063\u3066\u3044\u306a\u3044\u3068Not Found\u306b\u306a\u308b\n        e.GET(\"/users/id/:id\", func(c echo.Context) error {\n\n                // \u6570\u5024\u306b\u5909\u63db\u3059\u308b\u5fc5\u8981\u3042\u308a\n                var id int\n                id, _ = strconv.Atoi(c.Param(\"id\"))\n\n\n                // id\u6307\u5b9a\u3067\u30e6\u30fc\u30b6\u53d6\u5f97\n                var results []User\n                //fmt.Println(id)\n                db.C(\"user\").Find(bson.M{\"id\": id}).All(&results)\n\n                //fmt.Println(\"Results of one user: \", results)\n                //fmt.Println(len(results))\n\n                if len(results) == 0 {\n                        return c.String(http.StatusOK, \"No user\")\n                }else{\n                        name := results[0].Name\n                        return c.String(http.StatusOK, \"Hello, \" + name)\n                }\n        })\n\n        e.POST(\"/user\", func(c echo.Context) error {\n                return c.String(http.StatusOK, \"Hello, POST user\")\n        })\n\n        // \u30dd\u30fc\u30c8\n        e.Run(standard.New(\":1323\"))\n}\n\n\n\n\n\u6539\u826f\u7248\u30d9\u30f3\u30c1\u30de\u30fc\u30af\n\u4e0a\u8a18\u6539\u826f\u3092\u884c\u3063\u305f\u3068\u3053\u308d\u3001\u3060\u3044\u3076\u9ad8\u901f\u5316\u3057\u30016282 req/sec\u306b\u306a\u3063\u305f\u3002\nshibacow@ubuntu:~$ ab -n 100000 -c 100 http://localhost:1323/users/id/1\nThis is ApacheBench, Version 2.3 <$Revision: 1706008 $>\nCopyright 1996 Adam Twiss, Zeus Technology Ltd, http://www.zeustech.net/\nLicensed to The Apache Software Foundation, http://www.apache.org/\n\nBenchmarking localhost (be patient)\nCompleted 10000 requests\n....\nCompleted 100000 requests\nFinished 100000 requests\n\n\nServer Software:\nServer Hostname:        localhost\nServer Port:            1323\n\nDocument Path:          /users/id/1\nDocument Length:        11 bytes\n\nConcurrency Level:      100\nTime taken for tests:   15.914 seconds\nComplete requests:      100000\nFailed requests:        0\nTotal transferred:      12800000 bytes\nHTML transferred:       1100000 bytes\nRequests per second:    6283.74 [#/sec] (mean)\nTime per request:       15.914 [ms] (mean)\nTime per request:       0.159 [ms] (mean, across all concurrent requests)\nTransfer rate:          785.47 [Kbytes/sec] received\n\nConnection Times (ms)\n              min  mean[+/-sd] median   max\nConnect:        0    4   3.2      3      21\nProcessing:     0   12   5.0     12      44\nWaiting:        0   10   4.9     10      44\nTotal:          0   16   5.2     15      45\n\nPercentage of the requests served within a certain time (ms)\n  50%     15\n  66%     17\n  75%     19\n  80%     20\n  90%     22\n  95%     25\n  98%     29\n  99%     32\n 100%     45 (longest request)\n\n\nRequests per second:  6283.74 #/sec\n\n\u3060\u3044\u3076\u9ad8\u901f\u5316\u3057\u305f\u3002\n# golang-echo\u3068python-flask\u306e\u5b9f\u884c\u901f\u5ea6\u3092\u6bd4\u8f03\u3057\u3066\u307f\u308b\n\n\u4eca\u307e\u3067\u305a\u3063\u3068python\u3092\u89e6\u3063\u3066\u3044\u3066\u7279\u306b\u4e0d\u6e80\u3082\u306a\u304b\u3063\u305f\u304c\u3001\u6700\u8fd1golang\u3092\u89e6\u3063\u3066\u3044\u308b\u3002\n\u4f55\u304b\u3092\u3061\u3087\u3053\u3061\u3087\u3053\u3068\u4f5c\u308b\u306e\u306bpython\u306f\u4fbf\u5229\u3060\u304c\u901f\u5ea6\u304c\u5fc5\u8981\u306a\u3068\u304d\u306bgolang\u3092\u4f7f\u3063\u3066\u3069\u306e\u7a0b\u5ea6\u65e9\u304f\u306a\u308b\u306e\u304b\u611f\u899a\u7684\u306b\u63b4\u307f\u305f\u3044\u3068\u601d\u3044\u3001golang\u3067\u4ee3\u8868\u7684\u306aweb\u30d5\u30ec\u30fc\u30e0\u30ef\u30fc\u30afecho\u3068python\u306e\u8efd\u91cfwebframework\u306eflask\u3092\u6bd4\u8f03\u3057\u3066\u3001\u3069\u306e\u7a0b\u5ea6\u901f\u5ea6\u306b\u5dee\u304c\u3042\u308b\u304b\u8abf\u3079\u3066\u307f\u305f\u3002\n\n## \u30c6\u30b9\u30c8\u74b0\u5883\n\nvmware\u4e0a\u306b\u69cb\u7bc9\u3057\u305fubuntu 16.04 hdd\u306f\u666e\u901a\u306e\u3084\u3064\u3067ssd\u3067\u306f\u306a\u3044\u3002\ni7,memory 6GB\npython2.7\ngolang 1.6\n\n# \u30b7\u30f3\u30d7\u30eb\u306a\u6587\u5b57\u5217\u3092\u8fd4\u3059web\u30a2\u30d7\u30ea\n\n\u307e\u305a\u611f\u89e6\u3092\u3064\u304b\u3080\u305f\u3081\u306b\u7c21\u5358\u306aweb\u30a2\u30d7\u30ea\u3092\u4f5c\u3063\u3066\u307f\u308b\n\n## golang-echo\u3092\u4f7f\u3063\u305f\u30b7\u30f3\u30d7\u30eb\u306a\u30a2\u30d7\u30ea\n\n\u307e\u305a\u306f\u3001golang\u3092\u4f7f\u3063\u305f\u30b7\u30f3\u30d7\u30eb\u306aweb\u30a2\u30d7\u30ea\u304b\u3089\n\n```simple_server.go\n\npackage main\nimport (\n        \"net/http\"\n        \"github.com/labstack/echo\"\n        \"github.com/labstack/echo/engine/standard\"\n)\nfunc main() {\n        e := echo.New()\n        e.GET(\"/\", func(c echo.Context) error {\n                return c.String(http.StatusOK, \"Hello, World!\")\n        })\n        e.Run(standard.New(\":1323\"))\n}\n```\n\ngolang\u3067echo\u30e9\u30a4\u30d6\u30e9\u30ea\u3092\u4f7f\u3048\u3070\u3053\u308c\u3060\u3051\u66f8\u3051\u3070\u3001`Hello World` \u3092\u8fd4\u3059web\u30a2\u30d7\u30ea\u306b\u306a\u308a\u624b\u8efd\u3060\u3002\n\n## golang-echo\u306e\u901f\u5ea6\u306e\u901f\u5ea6\u3092\u8a08\u6e2c\u3057\u3066\u307f\u308b\n\napach bench\u3092\u4f7f\u3063\u3066\u901f\u5ea6\u3092\u898b\u3066\u307f\u308b\n\n```\nshibacow@ubuntu:~/prog/golang/echo_test$ ab -n 100000 -c 100 http://localhost:1323/\nThis is ApacheBench, Version 2.3 <$Revision: 1706008 $>\nCopyright 1996 Adam Twiss, Zeus Technology Ltd, http://www.zeustech.net/\nLicensed to The Apache Software Foundation, http://www.apache.org/\n\nBenchmarking localhost (be patient)\nCompleted 10000 requests\n...\nCompleted 100000 requests\nFinished 100000 requests\n\nServer Software:\nServer Hostname:        localhost\nServer Port:            1323\n\nDocument Path:          /\nDocument Length:        13 bytes\n\nConcurrency Level:      100\nTime taken for tests:   9.525 seconds\nComplete requests:      100000\nFailed requests:        0\nTotal transferred:      13000000 bytes\nHTML transferred:       1300000 bytes\nRequests per second:    10498.93 [#/sec] (mean)\nTime per request:       9.525 [ms] (mean)\nTime per request:       0.095 [ms] (mean, across all concurrent requests)\nTransfer rate:          1332.87 [Kbytes/sec] received\n\nConnection Times (ms)\n              min  mean[+/-sd] median   max\nConnect:        0    3   2.8      2      19\nProcessing:     0    6   3.2      7      31\nWaiting:        0    5   2.5      4      26\nTotal:          0    9   4.1      9      33\n\nPercentage of the requests served within a certain time (ms)\n  50%      9\n  66%     11\n  75%     12\n  80%     13\n  90%     15\n  95%     17\n  98%     18\n  99%     19\n100% 33 (longest request)\n```\n\n> Requests per second:    **10498.93**  [#/sec] (mean)\n\n\u3068\u5bfe\u3057\u3066\u30c1\u30e5\u30fc\u30cb\u30f3\u30b0\u3057\u306a\u304f\u3066\u30821\u4e07req/sec\u304f\u3089\u3044\u51fa\u308b\u3088\u3046\u3060\n\n## python-flask\u3092\u4f7f\u3063\u305f\u30b7\u30f3\u30d7\u30eb\u306a\u30a2\u30d7\u30ea\n\n\u6b21\u306bflask\u3092\u8abf\u3079\u3066\u307f\u308b\n\n```simple_server.py\n#!/usr/bin/env python\n# -*- coding:utf-8 -*-\n\nfrom flask import Flask\napp = Flask(__name__)\n\n@app.route(\"/\")\ndef hello():\n    return \"Hello World!\"\n\nif __name__ == '__main__':\napp.run()\n```\nflask\u3082\u3053\u308c\u3067\u3001`Hello World` \u3092\u8fd4\u3059\n\n## python-flask\u306e\u30d9\u30f3\u30c1\u30de\u30fc\u30af\n\n```\nshibacow@ubuntu:~/prog/golang/echo_test$ ab -n 10000 -c 100  http://localhost:5000/\nThis is ApacheBench, Version 2.3 <$Revision: 1706008 $>\nCopyright 1996 Adam Twiss, Zeus Technology Ltd, http://www.zeustech.net/\nLicensed to The Apache Software Foundation, http://www.apache.org/\n\nBenchmarking localhost (be patient)\nCompleted 1000 requests\n...\nCompleted 10000 requests\nFinished 10000 requests\n\n\nServer Software:        Werkzeug/0.11.10\nServer Hostname:        localhost\nServer Port:            5000\n\nDocument Path:          /\nDocument Length:        12 bytes\n\nConcurrency Level:      100\nTime taken for tests:   8.190 seconds\nComplete requests:      10000\nFailed requests:        0\nTotal transferred:      1680000 bytes\nHTML transferred:       120000 bytes\nRequests per second:    1220.97 [#/sec] (mean)\nTime per request:       81.902 [ms] (mean)\nTime per request:       0.819 [ms] (mean, across all concurrent requests)\nTransfer rate:          200.32 [Kbytes/sec] received\n\nConnection Times (ms)\n              min  mean[+/-sd] median   max\nConnect:        0    0   0.7      0       8\nProcessing:     2   81  12.6     81     148\nWaiting:        1   81  12.5     81     148\nTotal:          6   81  12.2     81     148\n\nPercentage of the requests served within a certain time (ms)\n  50%     81\n  66%     90\n  75%     91\n  80%     92\n  90%     95\n  95%     98\n  98%    101\n  99%    106\n 100%    148 (longest request)\n```\n\n> Requests per second:    **1220.97** [#/sec] (mean)\n\n\u7279\u306b\u4f55\u3082\u305b\u305a\u30011220req/sec\u4f4d\u51fa\u308b\n\n# Mongo\u306b\u63a5\u7d9a\u3057\u3066\u3001\u691c\u7d22\u3057\u3066\u7d50\u679c\u3092\u8fd4\u3059web\u30a2\u30d7\u30ea\n\n\u30b7\u30f3\u30d7\u30eb\u306a\u30a2\u30d7\u30ea\u3060\u3068\u73fe\u5b9f\u306e\u554f\u984c\u3068\u305a\u308c\u3066\u3057\u307e\u3046\u306e\u3067\u3001mongo\u306b\u63a5\u7d9a\u3057\u3001\u691c\u7d22\u3057\u3066\u7d50\u679c\u3092\u8fd4\u3059\u306a\u3069\u3001\u5c11\u3057\u73fe\u5b9f\u3088\u308a\u306e\u3082\u306e\u3092\u5165\u308c\u308b\u3002\n\u3053\u3061\u3089\u306e[\u30b5\u30a4\u30c8](http://peroon.hatenablog.com/entry/2016/08/04/181956)\u3092\u53c2\u8003\u306b\u3057\u305f\u3002\n\n## golang-echo\u3092\u4f7f\u3063\u305fmongo\u306b\u63a5\u7d9a\u3059\u308bweb\u30a2\u30d7\u30ea\n\n```mgo_server.go\n\npackage main\n\nimport (\n        // \u30b5\u30fc\u30d0\u7cfb\n        \"net/http\"\n        \"github.com/labstack/echo\"\n        \"github.com/labstack/echo/engine/standard\"\n\n        // mongo\u7cfb\n        \"fmt\"\n        \"gopkg.in/mgo.v2\"\n        \"gopkg.in/mgo.v2/bson\"\n\n        // \u578b\n        \"strconv\"\n        //\"reflect\"\n)\n\n// \u30e6\u30fc\u30b6\u30af\u30e9\u30b9\ntype User struct {\n        Name  string `bson:\"name\"`\n        Id int `bson:\"id\"`\n}\n\nfunc main() {\n        e := echo.New()\n        e.GET(\"/\", func(c echo.Context) error {\n                return c.String(http.StatusOK, \"Hello, World!\")\n        })\n\n        // :id, :name \u306b\u5024\u304c\u5165\u3063\u3066\u3044\u306a\u3044\u3068Not Found\u306b\u306a\u308b\n        e.GET(\"/users/id/:id\", func(c echo.Context) error {\n\n                // \u6570\u5024\u306b\u5909\u63db\u3059\u308b\u5fc5\u8981\u3042\u308a\n                var id int\n                id, _ = strconv.Atoi(c.Param(\"id\"))\n\n                //id\u3067DB\u3092\u5f15\u304f\n                session, _ := mgo.Dial(\"mongodb://localhost\")\n                defer session.Close()\n                db := session.DB(\"test\")\n\n                // id\u6307\u5b9a\u3067\u30e6\u30fc\u30b6\u53d6\u5f97\n                var results []User\n                fmt.Println(id)\n                db.C(\"user\").Find(bson.M{\"id\": id}).All(&results)\n\n                fmt.Println(\"Results of one user: \", results)\n                fmt.Println(len(results))\n\n                if len(results) == 0 {\n                        return c.String(http.StatusOK, \"No user\")\n                }else{\n                        name := results[0].Name\n                        return c.String(http.StatusOK, \"Hello, \" + name)\n                }\n        })\n\n        e.POST(\"/user\", func(c echo.Context) error {\n                return c.String(http.StatusOK, \"Hello, POST user\")\n        })\n\n        // \u30dd\u30fc\u30c8\n        e.Run(standard.New(\":1323\"))\n}\n\n```\n\n## golang-echo mongo\u63a5\u7d9a\u306e\u30d9\u30f3\u30c1\u30de\u30fc\u30af\n\nmongo\u306b\u63a5\u7d9a\u3057\u3066\u3001\u7d50\u679c\u3092\u8fd4\u3059\u3082\u306e\u306e\u30d9\u30f3\u30c1\u30de\u30fc\u30af\n\n```\nshibacow@ubuntu:~/prog/golang/echo_test$ ab -n 10000 -c 100  http://localhost:1323/users/id/1\nThis is ApacheBench, Version 2.3 <$Revision: 1706008 $>\nCopyright 1996 Adam Twiss, Zeus Technology Ltd, http://www.zeustech.net/\nLicensed to The Apache Software Foundation, http://www.apache.org/\n\nBenchmarking localhost (be patient)\nCompleted 1000 requests\n.....\nCompleted 10000 requests\nFinished 10000 requests\n\nServer Software:\nServer Hostname:        localhost\nServer Port:            1323\n\nDocument Path:          /users/id/1\nDocument Length:        11 bytes\n\nConcurrency Level:      100\nTime taken for tests:   9.156 seconds\nComplete requests:      10000\nFailed requests:        0\nTotal transferred:      1280000 bytes\nHTML transferred:       110000 bytes\nRequests per second:    1092.21 [#/sec] (mean)\nTime per request:       91.557 [ms] (mean)\nTime per request:       0.916 [ms] (mean, across all concurrent requests)\nTransfer rate:          136.53 [Kbytes/sec] received\n\nConnection Times (ms)\n              min  mean[+/-sd] median   max\nConnect:        0    1   4.4      0      29\nProcessing:     9   90  24.9     88     213\nWaiting:        9   89  25.1     87     213\nTotal:         25   91  24.3     89     213\n\nPercentage of the requests served within a certain time (ms)\n  50%     89\n  66%    100\n  75%    107\n  80%    112\n  90%    123\n  95%    134\n  98%    147\n  99%    156\n 100%    213 (longest request)\n\n```\n\n> Requests per second:    **1092.21** [#/sec] (mean)\n\n\n## pytho-flask \u3092\u4f7f\u3063\u3066mongo\u3092\u63a5\u7d9a\u3057\u3001\u7d50\u679c\u3092\u53d6\u5f97\u3059\u308b\n\nmongo\u3067\u63a5\u7d9a\u3059\u308b\u30a2\u30d7\u30ea\u3092\u4f5c\u308b\u3002\n\n```mongo_server.py\n\n#!/usr/bin/env python\n# -*- coding:utf-8 -*-\n\nfrom flask import Flask\nfrom flask_pymongo import PyMongo\napp = Flask(__name__)\napp.config['MONGO_HOST']='localhost'\napp.config['MONGO_DBNAME'] = 'test'\nmongo = PyMongo(app)\n\n@app.route(\"/users/id/<int:id>\")\ndef user_id(id):\n    user= mongo.db.user.find_one({\"id\":id})\n    msg=\"Hello id={} name={}\".format(user[\"id\"],user['name'])\n    return msg\n\n@app.route(\"/\")\ndef hello():\n    return \"Hello World!\"\n\nif __name__ == '__main__':\n    app.run(host=\"0.0.0.0\",debug=False)\n```\n\n## python-flask\u3092\u4f7f\u3063\u305f\u30d9\u30f3\u30c1\u30de\u30fc\u30af\n\n```\nshibacow@ubuntu:~/prog/python/flask_test$ ab -n 10000 -c100 http://localhost:500\n0/users/id/1\nThis is ApacheBench, Version 2.3 <$Revision: 1706008 $>\nCopyright 1996 Adam Twiss, Zeus Technology Ltd, http://www.zeustech.net/\nLicensed to The Apache Software Foundation, http://www.apache.org/\n\nBenchmarking localhost (be patient)\nCompleted 1000 requests\n.....\nCompleted 10000 requests\nFinished 10000 requests\n\nServer Software:        Werkzeug/0.11.10\nServer Hostname:        localhost\nServer Port:            5000\n\nDocument Path:          /users/id/1\nDocument Length:        20 bytes\n\nConcurrency Level:      100\nTime taken for tests:   12.639 seconds\nComplete requests:      10000\nFailed requests:        0\nTotal transferred:      1760000 bytes\nHTML transferred:       200000 bytes\nRequests per second:    791.22 [#/sec] (mean)\nTime per request:       126.387 [ms] (mean)\nTime per request:       1.264 [ms] (mean, across all concurrent requests)\nTransfer rate:          135.99 [Kbytes/sec] received\n\nConnection Times (ms)\n              min  mean[+/-sd] median   max\nConnect:        0    0   0.7      0       8\nProcessing:     6  126  11.8    125     164\nWaiting:        6  125  11.8    125     163\nTotal:         11  126  11.5    125     164\n\nPercentage of the requests served within a certain time (ms)\n  50%    125\n  66%    129\n  75%    131\n  80%    132\n  90%    138\n  95%    143\n  98%    149\n  99%    153\n 100%    164 (longest request)\n\n```\n\n> Requests per second:    **791.22** [#/sec] (mean)\n\n# \u307e\u3068\u3081\n\ngolang-echo\u3068python-flask\u306e\u901f\u5ea6\u3092\u6bd4\u8f03\u3057\u305f\u3002\n\n| \u6bd4\u8f03             |    \u30b7\u30f3\u30d7\u30eb\u306a\u30a2\u30d7\u30ea |    \u8907\u96d1\u306a\u30a2\u30d7\u30ea    |\n|:-----------------|:-----------------:|:------------------:|\n| golang-echo      | **10498** req/sec |  **1092** req/sec      |\n| python-flask     | **1220** req/sec  |    **791** req/sec     |\n\n\n\u30b7\u30f3\u30d7\u30eb\u306a\u30a2\u30d7\u30ea\u3067\u306f\u3001\uff11\uff10\u500d\u4f4d\u6027\u80fd\u304c\u9055\u3046\u304c\u3001mongo\u306b\u63a5\u7d9a\u3059\u308b\u5834\u5408\u306f\u3001\u305d\u3053\u307e\u3067\u901f\u5ea6\u5dee\u304c\u51fa\u306a\u3044\u3002\u30ea\u30af\u30a8\u30b9\u30c8\u306e\u305f\u3073\u306bmongo\u306b\u63a5\u7d9a\u3059\u308b\u306e\u3067\u305d\u3061\u3089\u306e\u65b9\u304c\u3001\u8ca0\u8377\u304c\u9ad8\u3044\u306e\u304b\u3082\u3057\u308c\u306a\u3044\u3002echo\u3082pymongo\u3082\u30b3\u30cd\u30af\u30b7\u30e7\u30f3\u30d7\u30fc\u30eb\u3092\u4f7f\u3048\u3070\u307e\u305f\u7d50\u679c\u306f\u5909\u308f\u308b\u306e\u304b\u3082\u3057\u308c\u306a\u3044\u3002\ngolang\u3068python\u3092\u6bd4\u8f03\u3057\u305f\u306e\u306f\u5225\u306bpython\u306e\u6027\u80fd\u3092\u8cb6\u3081\u305f\u3044\u308f\u3051\u3067\u306f\u306a\u304f\u3001\u5358\u306b\u5927\u4f53\u3069\u3053\u304f\u3089\u3044\u5dee\u304c\u3042\u308b\u306e\u304b\u3092\u4f53\u611f\u3057\u305f\u3044\u304b\u3089\u3060\u3002\n\n## \u307e\u3068\u3081(\u8ffd\u8a18)\n\n\u4e0b\u8a18\u8ffd\u8a18\u306b\u3042\u308b\u304c\u3001mongo\u3078\u306e\u6bce\u56de\u3078\u306e\u63a5\u7d9a\u3092\u3084\u3081\u3066\u3001\u4e00\u56de\u63a5\u7d9a\u3092\u3057\u3066\u4f7f\u3044\u56de\u3057\u7528\u306b\u3057\u305f\u3089\u3001\u3060\u3044\u3076\u9ad8\u901f\u5316\u3057\u305f\u3002\u305f\u3060\u3001\u30bb\u30c3\u30b7\u30e7\u30f3\u304c\u72b6\u614b\u3092\u6301\u3061\u7d9a\u3051\u308b\u306e\u3067\u3001\u4f8b\u3048\u3070\u30a2\u30c3\u30d7\u30c7\u30fc\u30c8\u3057\u305f\u308a\u3068\u304b\u3001\u30b3\u30df\u30c3\u30c8\u3057\u305f\u308a\u3059\u308b\u3068\u304d\u306b\u3069\u306e\u3088\u3046\u306b\u306a\u308b\u304b\u306f\u308f\u304b\u3089\u306a\u3044\u306e\u3067\u3001\u30d9\u30f3\u30c1\u30de\u30fc\u30af\u4ee5\u5916\u306e\u672c\u756a\u74b0\u5883\u3067\u4f7f\u3046\u306b\u306f\u691c\u8a3c\u304c\u5fc5\u8981\u3060\u308d\u3046\u3002\n\n| \u6bd4\u8f03             |    \u30b7\u30f3\u30d7\u30eb\u306a\u30a2\u30d7\u30ea |    \u8907\u96d1\u306a\u30a2\u30d7\u30ea    |\n|:-----------------|:-----------------:|:------------------:|\n| golang-echo      | **10498** req/sec |  **1092** req/sec      |\n| golang-echo(\u4e0b\u8a18\u6539\u826f\u7248) | \u306a\u3057 |  **6283.74** req/sec     |\n| python-flask     | **1220** req/sec  |    **791** req/sec     |\n\n\n# \u8ffd\u8a18 golang-echo mongo\u63a5\u7d9a\u3057\u3066\u7d50\u679c\u3092\u53d6\u5f97\u306e\u9ad8\u901f\u5316\n\n## golang-echo mongo\u63a5\u7d9a\u6539\u826f\n\n\u4e0a\u306e\u4f8b\u3067\u306f\u3001\u4e00\u30ea\u30af\u30a8\u30b9\u30c8\u3042\u305f\u308a\u3001mongo\u3078\u306e\u63a5\u7d9a\u3068\u5207\u65ad\u3092\u7e70\u308a\u8fd4\u3057\u3066\u3044\u305f\u3002\u305d\u308c\u3092\u3084\u3081\u3066GET\u306e\u5916\u5074\u3067\u63a5\u7d9a\u3068\u5207\u65ad\u3092\u3084\u308b\u3002\u6a19\u6e96\u51fa\u529b\u3078\u306e\u8868\u793a\u306f\u9045\u304f\u306a\u308b\u5143\u306a\u306e\u3067\u305d\u308c\u3092\u3084\u3081\u305f\u3002\n\n```mgo_server.go\npackage main\n\nimport (\n        // \u30b5\u30fc\u30d0\u7cfb\n        \"net/http\"\n        \"github.com/labstack/echo\"\n        \"github.com/labstack/echo/engine/standard\"\n\n        // mongo\u7cfb\n        //\"fmt\" //\u6a19\u6e96\u51fa\u529b\u306f\u9045\u3044\u306e\u3067\u3001\u6b62\u3081\u308b\n        \"gopkg.in/mgo.v2\"\n        \"gopkg.in/mgo.v2/bson\"\n\n        // \u578b\n        \"strconv\"\n        //\"reflect\"\n)\n\n// \u30e6\u30fc\u30b6\u30af\u30e9\u30b9\ntype User struct {\n        Name  string `bson:\"name\"`\n        Id int `bson:\"id\"`\n}\n\nfunc main() {\n        e := echo.New()\n        //id\u3067DB\u3092\u5f15\u304fGET\u306e\u5916\u5074\u306b\u51fa\u3057\u3066\u3001\u6bce\u56de\u306e\u63a5\u7d9a\u30fb\u5207\u65ad\u3092\u3084\u3081\u305f\n        session, _ := mgo.Dial(\"mongodb://localhost\")\n        defer session.Close()\n        db := session.DB(\"test\")\n\n        e.GET(\"/\", func(c echo.Context) error {\n                return c.String(http.StatusOK, \"Hello, World!\")\n        })\n\n        // :id, :name \u306b\u5024\u304c\u5165\u3063\u3066\u3044\u306a\u3044\u3068Not Found\u306b\u306a\u308b\n        e.GET(\"/users/id/:id\", func(c echo.Context) error {\n\n                // \u6570\u5024\u306b\u5909\u63db\u3059\u308b\u5fc5\u8981\u3042\u308a\n                var id int\n                id, _ = strconv.Atoi(c.Param(\"id\"))\n\n\n                // id\u6307\u5b9a\u3067\u30e6\u30fc\u30b6\u53d6\u5f97\n                var results []User\n                //fmt.Println(id)\n                db.C(\"user\").Find(bson.M{\"id\": id}).All(&results)\n\n                //fmt.Println(\"Results of one user: \", results)\n                //fmt.Println(len(results))\n\n                if len(results) == 0 {\n                        return c.String(http.StatusOK, \"No user\")\n                }else{\n                        name := results[0].Name\n                        return c.String(http.StatusOK, \"Hello, \" + name)\n                }\n        })\n\n        e.POST(\"/user\", func(c echo.Context) error {\n                return c.String(http.StatusOK, \"Hello, POST user\")\n        })\n\n        // \u30dd\u30fc\u30c8\n        e.Run(standard.New(\":1323\"))\n}\n\n```\n\n## \u6539\u826f\u7248\u30d9\u30f3\u30c1\u30de\u30fc\u30af\n\n\u4e0a\u8a18\u6539\u826f\u3092\u884c\u3063\u305f\u3068\u3053\u308d\u3001\u3060\u3044\u3076\u9ad8\u901f\u5316\u3057\u3001**6282** req/sec\u306b\u306a\u3063\u305f\u3002\n\n```\nshibacow@ubuntu:~$ ab -n 100000 -c 100 http://localhost:1323/users/id/1\nThis is ApacheBench, Version 2.3 <$Revision: 1706008 $>\nCopyright 1996 Adam Twiss, Zeus Technology Ltd, http://www.zeustech.net/\nLicensed to The Apache Software Foundation, http://www.apache.org/\n\nBenchmarking localhost (be patient)\nCompleted 10000 requests\n....\nCompleted 100000 requests\nFinished 100000 requests\n\n\nServer Software:\nServer Hostname:        localhost\nServer Port:            1323\n\nDocument Path:          /users/id/1\nDocument Length:        11 bytes\n\nConcurrency Level:      100\nTime taken for tests:   15.914 seconds\nComplete requests:      100000\nFailed requests:        0\nTotal transferred:      12800000 bytes\nHTML transferred:       1100000 bytes\nRequests per second:    6283.74 [#/sec] (mean)\nTime per request:       15.914 [ms] (mean)\nTime per request:       0.159 [ms] (mean, across all concurrent requests)\nTransfer rate:          785.47 [Kbytes/sec] received\n\nConnection Times (ms)\n              min  mean[+/-sd] median   max\nConnect:        0    4   3.2      3      21\nProcessing:     0   12   5.0     12      44\nWaiting:        0   10   4.9     10      44\nTotal:          0   16   5.2     15      45\n\nPercentage of the requests served within a certain time (ms)\n  50%     15\n  66%     17\n  75%     19\n  80%     20\n  90%     22\n  95%     25\n  98%     29\n  99%     32\n 100%     45 (longest request)\n```\n\n> Requests per second:  **6283.74** [#/sec] (mean)\n\n\u3060\u3044\u3076\u9ad8\u901f\u5316\u3057\u305f\u3002\n", "tags": ["golang", "Python", "Flask", "Go"]}