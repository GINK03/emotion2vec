{"context": " More than 1 year has passed since last update.\n\n\u6982\u8981\n\n\u795d!Swift\u30aa\u30fc\u30d7\u30f3\u30bd\u30fc\u30b9\u5316\u304b\u30891\u65e5\u7d4c\u3061\u307e\u3057\u305f\ud83d\udc7c\n\u7686\u3055\u3093\u305d\u308d\u305d\u308dC++\u306b\u6163\u308c\u3066\u304d\u305f\u9803\u3067\u3057\u3087\u3046\u304b\n\u305b\u3063\u304b\u304f\u306a\u306e\u3067\u69cb\u6587\u89e3\u6790\u306e\u90e8\u5206\u3092\u8aad\u307f\u305f\u3044!\n\u3068\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u3092\u773a\u3081\u3066\u3044\u305f\u3089\u3001IDE\u306e\u30c6\u30b9\u30c8\u30b1\u30fc\u30b9\u3067 \u300c\u30ce\u30fc\u30c9\u306e\u7a2e\u985e(\u4e88\u7d04\u8a9e\u306a\u306e\u304b\u30b3\u30e1\u30f3\u30c8\u306a\u306e\u304b\u306a\u3069)\u306b\u3088\u3063\u3066\u30bf\u30fc\u30df\u30ca\u30eb\u306b\u30ab\u30e9\u30fc\u30b3\u30fc\u30c9\u3092\u51fa\u529b\u3059\u308b\u300d\u30b3\u30fc\u30c9\u3092\u898b\u3064\u3051\u305f\u306e\u3067\u3001\u3075\u3093\u308f\u308a\u8ffd\u3063\u3066\u307f\u307e\u3057\u305f\n\n\n\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u306b\u51fa\u3066\u304d\u305f\u7528\u8a9e\u305f\u3061\n\n\n\nLex, Lexical Analysis : \u5b57\u53e5\u89e3\u6790\u3002\u6587\u5b57\u5217\u3092\u5b57\u53e5(\u30c8\u30fc\u30af\u30f3)\u306b\u5206\u5272\u3059\u308b\n\nParse / Syntax Analysis : \u69cb\u6587\u89e3\u6790\u3002\u30c8\u30fc\u30af\u30f3\u306e\u5217\u304b\u3089\u62bd\u8c61\u69cb\u6587\u6728\u3092\u4f5c\u6210\n\nSema, Semantic Analysis : \u610f\u5473\u89e3\u6790\u3002\u578b\u30c1\u30a7\u30c3\u30af\u3084\u5f15\u6570\u306e\u500b\u6570\u30c1\u30a7\u30c3\u30af\u306a\u3069\n\nToken : \u5b57\u53e5\u89e3\u6790\u306e\u7d50\u679c\u3001\u5206\u5272\u3055\u308c\u305f\u6587\u5b57\u305f\u3061\n\nAST, Abstract Syntax Tree: \u62bd\u8c61\u69cb\u6587\u6728. \u5fc5\u8981\u306a\u30c8\u30fc\u30af\u30f3\u3092\u7cbe\u67fb\u3057\u6728\u69cb\u9020\u3067\u8868\u3057\u305f\u30c7\u30fc\u30bf\n\nNode : \u69cb\u6587\u6728\u306e\u5404\u8981\u7d20\n\n\n\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\n\nIDE\u306e\u30c6\u30b9\u30c8\u30b1\u30fc\u30b9\n\n\nswift/tools/swift-ide-test/swift-ide-test.cpp\n\n\nIDE\u306e\u69cb\u6587\u5b9a\u7fa9\u306a\u3069(\u898b\u3066\u308b\u3060\u3051\u3067\u9762\u767d\u3044)\n\n\nswift/include/swift/IDE/SyntaxModel.h\nswift/include/swift/lib/IDE/SyntaxModel.cpp\n\n\n\n\n\u672c\u984c\n\n\u30c6\u30b9\u30c8\u30e1\u30bd\u30c3\u30c9\n\n\u6700\u7d42\u7684\u306b\u547c\u3073\u51fa\u3057\u3066\u3044\u308b\u306e\u306f\u3001\u4ee5\u4e0b\u306e\u30c6\u30b9\u30c8\u7528\u30e1\u30bd\u30c3\u30c9\u3067\u3059\n\n\u30ce\u30fc\u30c9\u306e\u7a2e\u985e(\u4e88\u7d04\u8a9e\u306a\u306e\u304b\u30b3\u30e1\u30f3\u30c8\u306a\u306e\u304b\u306a\u3069)\u306b\u5fdc\u3058\u3066\u30ab\u30e9\u30fc\u30b3\u30fc\u30c9\u3092\u30bf\u30fc\u30df\u30ca\u30eb\u306b\u51fa\u529b\u3057\u3066\u3044\u307e\u3059\n\n\nswift-ide-test.cpp(733-768_PrintSyntaxColorWalker\u30af\u30e9\u30b9\u5185)\n  void wrapForTerminal(SyntaxNodeKind Kind, bool Begin) {\n    llvm::raw_ostream::Colors Col;\n    switch (Kind) {\n    case SyntaxNodeKind::Keyword: Col = llvm::raw_ostream::MAGENTA; break;\n    // Skip identifier.\n    case SyntaxNodeKind::Identifier: return;\n    case SyntaxNodeKind::DollarIdent: Col = llvm::raw_ostream::MAGENTA; break;\n    case SyntaxNodeKind::Integer: Col = llvm::raw_ostream::BLUE; break;\n    case SyntaxNodeKind::Floating: Col = llvm::raw_ostream::BLUE; break;\n    case SyntaxNodeKind::String: Col = llvm::raw_ostream::RED; break;\n    case SyntaxNodeKind::StringInterpolationAnchor: Col = llvm::raw_ostream::CYAN; break;\n    case SyntaxNodeKind::CommentLine: Col = llvm::raw_ostream::GREEN; break;\n    case SyntaxNodeKind::CommentBlock: Col = llvm::raw_ostream::GREEN; break;\n    case SyntaxNodeKind::CommentMarker: Col = llvm::raw_ostream::MAGENTA; break;\n    case SyntaxNodeKind::DocCommentLine: Col = llvm::raw_ostream::CYAN; break;\n    case SyntaxNodeKind::DocCommentBlock: Col = llvm::raw_ostream::CYAN; break;\n    case SyntaxNodeKind::DocCommentField: Col = llvm::raw_ostream::WHITE; break;\n    case SyntaxNodeKind::CommentURL: Col = llvm::raw_ostream::RED; break;\n    case SyntaxNodeKind::TypeId: Col = llvm::raw_ostream::CYAN; break;\n    case SyntaxNodeKind::BuildConfigKeyword: Col = llvm::raw_ostream::YELLOW; break;\n    case SyntaxNodeKind::BuildConfigId: Col = llvm::raw_ostream::YELLOW; break;\n    case SyntaxNodeKind::AttributeId: Col = llvm::raw_ostream::CYAN; break;\n    case SyntaxNodeKind::AttributeBuiltin: Col = llvm::raw_ostream::MAGENTA; break;\n    case SyntaxNodeKind::EditorPlaceholder: Col = llvm::raw_ostream::YELLOW; break;\n    case SyntaxNodeKind::ObjectLiteral: return;\n    }\n\n    if (Begin) {\n      if (const char *CStr =\n          llvm::sys::Process::OutputColor(Col, false, false)) {\n        OS << CStr;\n      }\n    } else {\n      OS << llvm::sys::Process::ResetColor();\n    }\n  }\n\n\n\n\nmain\u95a2\u6570\n\n\nswift-ide-test.cpp\u306e2434\u884c\u76ee\u3042\u305f\u308a\u306b\u3042\u308bmain\u95a2\u6570\u304b\u3089\u3001ActionType\u3054\u3068\u306b\u5206\u5c90\u3057\u3066\u3001doSyntaxColoring\u3068\u3044\u3046\u95a2\u6570\u3092\u547c\u3073\u51fa\u3057\u3066\u3044\u307e\u3059\n\u7b2c\u4e8c\u5f15\u6570\u304c\u30bd\u30fc\u30b9\u30d5\u30a1\u30a4\u30eb\u540d\u3067\u3059\u306d\n\n\nswift-ide-test.cpp(2652-2657_main\u95a2\u6570\u5185)\n  case ActionType::SyntaxColoring:\n    ExitCode = doSyntaxColoring(InitInvok,\n                                options::SourceFilename,\n                                options::TerminalOutput,\n                                options::Typecheck);\n    break;\n\n\n\n\u69cb\u6587\u89e3\u6790~\u30c6\u30b9\u30c8\u30e1\u30bd\u30c3\u30c9\u306e\u547c\u3073\u51fa\u3057\n\n\u3053\u306edoSyntaxColoring\u95a2\u6570\u5185\u3067 \n\n\n\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u3092\u69cb\u6587\u89e3\u6790\n\u53d6\u5f97\u3057\u305f\u30ce\u30fc\u30c9\u3092\u3059\u3079\u3066\u8d70\u67fb\n\u30ce\u30fc\u30c9\u3054\u3068\u306b\u5148\u307b\u3069\u306ewrapForTerminal\u30c6\u30b9\u30c8\u30e1\u30bd\u30c3\u30c9\u3092\u547c\u3073\u51fa\u3057\u3066\u51fa\u529b\n\n\n\u3092\u884c\u3063\u3066\u308b\u3088\u3046\u3067\u3059\u3002(\u8a73\u7d30\u307e\u3067\u7406\u89e3\u3067\u304d\u3066\u3044\u307e\u305b\u3093)\n\nCI.performParseOnly()\u3084CI.performSema()\u3042\u305f\u308a\u306f\u3001\u306a\u3093\u3068\u306a\u304f\u3084\u3063\u3066\u308b\u3053\u3068\u304c\u60f3\u50cf\u3067\u304d\u307e\u3059\u306d\n\n\nswift-ide-test.cpp(777-803_doSyntaxColoring\u95a2\u6570\u524d\u534a)\nstatic int doSyntaxColoring(const CompilerInvocation &InitInvok,\n                            StringRef SourceFilename,\n                            bool TerminalOutput,\n                            bool RunTypeChecker) {\n  CompilerInvocation Invocation(InitInvok);\n  Invocation.addInputFilename(SourceFilename);\n  Invocation.getLangOptions().DisableAvailabilityChecking = false;\n\n  CompilerInstance CI;\n\n  // Display diagnostics to stderr.\n  PrintingDiagnosticConsumer PrintDiags;\n  CI.addDiagnosticConsumer(&PrintDiags);\n  if (CI.setup(Invocation))\n    return 1;\n  if (!RunTypeChecker)\n    CI.performParseOnly();\n  else\n    CI.performSema();\n\n  unsigned BufID = CI.getInputBufferIDs().back();\n  SourceFile *SF = nullptr;\n  for (auto Unit : CI.getMainModule()->getFiles()) {\n    SF = dyn_cast<SourceFile>(Unit);\n    if (SF)\n      break;\n  }\n\n\n\n\u5f8c\u534a\u306b\u51fa\u3066\u304f\u308bWalker\u30af\u30e9\u30b9\u304c\u30e1\u30f3\u30d0\u5909\u6570\u306bChar *\u3092\u6301\u3063\u3066\u304a\u308a\u3001\u89e3\u6790\u6e08\u307f\u306e\u30bd\u30fc\u30b9\u30d5\u30a1\u30a4\u30eb\u306e\u30ce\u30fc\u30c9\u3092\u982d\u304b\u3089\u8210\u3081\u3066\u3044\u307e\u3059\n\n\nswift-ide-test.cpp(804-812_doSyntaxColoring\u95a2\u6570\u5f8c\u534a)\n  assert(SF && \"no source file?\");\n  ide::SyntaxModelContext ColorContext(*SF);\n  PrintSyntaxColorWalker ColorWalker(CI.getSourceMgr(), BufID, llvm::outs(),\n                                     TerminalOutput);\n  ColorContext.walk(ColorWalker);\n  ColorWalker.finished();\n\n  return 0;\n}\n\n\n\nPrintSyntaxColorWalker\u306e\u30e1\u30f3\u30d0\u5909\u6570\u306e\u4e00\u90e8\n  const char *BufStart;\n  const char *BufEnd;\n  const char *CurrBufPtr;\n\n\n\n\u7d99\u627f\u95a2\u4fc2\n\n\u809d\u5fc3\u306edoSyntaxColoring\u95a2\u6570\u3092\u547c\u3073\u51fa\u3057\u3066\u3044\u308b\u306e\u306f\u3069\u3053\u3067\u3057\u3087\u3046\u304b\u3002\n\u3058\u3064\u306f\u3001PrintSyntaxColorWalker\u30af\u30e9\u30b9\u306f\u89aa\u30af\u30e9\u30b9\u3067\u3042\u308bSyntaxModelWalker\u30af\u30e9\u30b9\u306e\u4e0b\u8a18\u30e1\u30bd\u30c3\u30c9\u3092\u30aa\u30fc\u30d0\u30fc\u30e9\u30a4\u30c9\u3057\u3066\u3044\u307e\u3059\u3002\n\u305d\u306e\u305f\u3081\u3001SyntaxModelContext::walk\u30e1\u30bd\u30c3\u30c9\u306e\u4e2d\u3067ModelASTWalker::passNode\u30e1\u30bd\u30c3\u30c9\u304c\u547c\u3070\u308c\u308b\u5ea6\u306b\u30c6\u30b9\u30c8\u30e1\u30bd\u30c3\u30c9\u3082\u547c\u3073\u51fa\u3055\u308c\u308b\u3088\u3046\u3067\u3059\n\n\nSyntaxModel.h(154-167)\nclass SyntaxModelWalker {\n// (\u4e2d\u7565)\n  /// \\brief Called when first visiting a syntax node, before walking into its\n  /// children.  If it returns false, the subtree is skipped.\n  ///\n  virtual bool walkToNodePre(SyntaxNode Node) { return true; }\n\n  /// \\brief Called after visiting the children of a syntax node. If it returns\n  /// false, the remaining traversal is terminated and returns failure.\n  virtual bool walkToNodePost(SyntaxNode Node) { return true; }\n\n\n\n\u307e\u3068\u3081\n\n\u4eca\u56de\u306f\u69cb\u6587\u89e3\u6790\u306e\u30ed\u30b8\u30c3\u30af\u3092\u7406\u89e3\u3059\u308b\u306b\u306f\u81f3\u308a\u307e\u305b\u3093\u3067\u3057\u305f\u3002\n\u3067\u3059\u304c\u3001CompilerInstance::performSema()\u30e1\u30bd\u30c3\u30c9\u3042\u305f\u308a\u3092\u6df1\u8ffd\u3044\u3059\u308c\u3070\u3001Parse\u3084Sema\u306e\u6d41\u308c\u304c\u3044\u3044\u611f\u3058\u306b\u628a\u63e1\u3067\u304d\u305d\u3046\u3067\u3059\n\u30c6\u30b9\u30c8\u30b1\u30fc\u30b9\u304b\u3089\u8ffd\u3063\u3066\u3044\u304f\u306e\u306f\u3068\u3063\u3064\u304d\u3084\u3059\u304f\u3066GOOD\u3060\u3068\u601d\u3044\u307e\u3057\u305f\ud83d\ude07\n\n\n\u305d\u306e\u4ed6\n\n\u3042...\u3042\u308a\u306e\u307e\u307e\u4eca\u8d77\u3053\u3063\u305f\u4e8b\u3092\u8a71\u3059\u305c... Swift\u3092\u8aad\u307f\u306b\u6765\u305f\u3089C++\u3060\u3063\u305f...\u4f55\u3092\u8a00\u3063\u3066\u308b\u306e\u304b\u308f\u304b\n\u2191Swift\u30ea\u30dd\u30b8\u30c8\u30ea\u3092\u898b\u305f\u6642\u306e\u81ea\u5206\u306e\u53cd\u5fdc\u3067\u3059\u304c\u3001\u3053\u306e\u8a18\u4e8b\u3092\u898b\u305f\u4eba\u306e\u53cd\u5fdc\u3067\u3082\u3042\u308b\u304b\u3082\u3057\u308c\u306a\u3044\u3068\u6295\u7a3f\u3057\u3066\u304b\u3089\u6c17\u4ed8\u304d\u307e\u3057\u305f\u3002\u3059\u307f\u307e\u305b\u3093\u3002\n\n\u3068\u308a\u3042\u3048\u305aFix typo\u3057\u305f\u30892\u6642\u9593\u3067\u30de\u30fc\u30b8\u3055\u308c\u3066\u80f8\u71b1\u3067\u3057\u305f\u3002\n\u304a\u6c17\u3065\u304d\u306e\u70b9\u304c\u3054\u3056\u3044\u307e\u3057\u305f\u3089\u3001\u304a\u6c17\u8efd\u306b\u30b3\u30e1\u30f3\u30c8\u304f\u3060\u3055\u3044! \u9593\u9055\u3044\u306a\u3069\u3054\u6307\u6458\u3044\u305f\u3060\u3051\u308b\u3068\u5927\u5909\u3042\u308a\u304c\u305f\u3044\u3067\u3059\ud83d\udc7c\n\n\n\u53c2\u8003\n\n\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u8a00\u8a9e\u306e\u5b9f\u88c5\u306e\u57fa\u790e\n\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u8a00\u8a9e\u51e6\u7406: \u30b3\u30f3\u30d1\u30a4\u30e9\u306e\u69cb\u9020\n\u554f20 \u610f\u5473\u89e3\u6790\u306e\u30d5\u30a7\u30fc\u30ba\u3067\u884c\u3046\u51e6\u7406 \u5e73\u621025\u5e74\u79cb\u671f\uff5c\u5fdc\u7528\u60c5\u5831\u6280\u8853\u8005\u8a66\u9a13.com\nClang \u306e\u30b3\u30fc\u30c9\u88dc\u5b8c - Backnumbers: Steps to Phantasien\n\n# \u6982\u8981\n\n* \u795d!Swift\u30aa\u30fc\u30d7\u30f3\u30bd\u30fc\u30b9\u5316\u304b\u30891\u65e5\u7d4c\u3061\u307e\u3057\u305f\ud83d\udc7c\n* **\u7686\u3055\u3093\u305d\u308d\u305d\u308dC++\u306b\u6163\u308c\u3066\u304d\u305f\u9803\u3067\u3057\u3087\u3046\u304b**\n* \u305b\u3063\u304b\u304f\u306a\u306e\u3067\u69cb\u6587\u89e3\u6790\u306e\u90e8\u5206\u3092\u8aad\u307f\u305f\u3044!\n* \u3068\u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u3092\u773a\u3081\u3066\u3044\u305f\u3089\u3001IDE\u306e\u30c6\u30b9\u30c8\u30b1\u30fc\u30b9\u3067 **\u300c\u30ce\u30fc\u30c9\u306e\u7a2e\u985e(\u4e88\u7d04\u8a9e\u306a\u306e\u304b\u30b3\u30e1\u30f3\u30c8\u306a\u306e\u304b\u306a\u3069)\u306b\u3088\u3063\u3066\u30bf\u30fc\u30df\u30ca\u30eb\u306b\u30ab\u30e9\u30fc\u30b3\u30fc\u30c9\u3092\u51fa\u529b\u3059\u308b\u300d**\u30b3\u30fc\u30c9\u3092\u898b\u3064\u3051\u305f\u306e\u3067\u3001\u3075\u3093\u308f\u308a\u8ffd\u3063\u3066\u307f\u307e\u3057\u305f\n\n# \u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u306b\u51fa\u3066\u304d\u305f\u7528\u8a9e\u305f\u3061\n<img width=\"200\" alt=\"\u30b9\u30af\u30ea\u30fc\u30f3\u30b7\u30e7\u30c3\u30c8 2015-12-05 22.56.12.png\" src=\"https://qiita-image-store.s3.amazonaws.com/0/25820/b8c2f690-c4a7-ad7d-acb9-0104a1e88ca1.png\">\n\n* **Lex**, Lexical Analysis : \u5b57\u53e5\u89e3\u6790\u3002\u6587\u5b57\u5217\u3092\u5b57\u53e5(\u30c8\u30fc\u30af\u30f3)\u306b\u5206\u5272\u3059\u308b\n* **Parse** / Syntax Analysis : \u69cb\u6587\u89e3\u6790\u3002\u30c8\u30fc\u30af\u30f3\u306e\u5217\u304b\u3089\u62bd\u8c61\u69cb\u6587\u6728\u3092\u4f5c\u6210\n* **Sema**, Semantic Analysis : \u610f\u5473\u89e3\u6790\u3002\u578b\u30c1\u30a7\u30c3\u30af\u3084\u5f15\u6570\u306e\u500b\u6570\u30c1\u30a7\u30c3\u30af\u306a\u3069\n* **Token** : \u5b57\u53e5\u89e3\u6790\u306e\u7d50\u679c\u3001\u5206\u5272\u3055\u308c\u305f\u6587\u5b57\u305f\u3061\n* **AST**, Abstract Syntax Tree: [\u62bd\u8c61\u69cb\u6587\u6728](http://home.a00.itscom.net/hatada/c-tips/ast/ast01.html). \u5fc5\u8981\u306a\u30c8\u30fc\u30af\u30f3\u3092\u7cbe\u67fb\u3057\u6728\u69cb\u9020\u3067\u8868\u3057\u305f\u30c7\u30fc\u30bf\n* **Node** : \u69cb\u6587\u6728\u306e\u5404\u8981\u7d20\n\n\n# \u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\n* IDE\u306e\u30c6\u30b9\u30c8\u30b1\u30fc\u30b9\n * [swift/tools/swift-ide-test/swift-ide-test.cpp](https://github.com/apple/swift/blob/master/tools/swift-ide-test/swift-ide-test.cpp#L2434)\n* IDE\u306e\u69cb\u6587\u5b9a\u7fa9\u306a\u3069(\u898b\u3066\u308b\u3060\u3051\u3067\u9762\u767d\u3044)\n * [swift/include/swift/IDE/SyntaxModel.h](https://github.com/apple/swift/blob/master/include/swift/IDE/SyntaxModel.h#L29)\n * [swift/include/swift/lib/IDE/SyntaxModel.cpp](https://github.com/apple/swift/blob/master/lib/IDE/SyntaxModel.cpp#L209)\n\n\n# \u672c\u984c\n## \u30c6\u30b9\u30c8\u30e1\u30bd\u30c3\u30c9\n* \u6700\u7d42\u7684\u306b\u547c\u3073\u51fa\u3057\u3066\u3044\u308b\u306e\u306f\u3001\u4ee5\u4e0b\u306e\u30c6\u30b9\u30c8\u7528\u30e1\u30bd\u30c3\u30c9\u3067\u3059\n* **\u30ce\u30fc\u30c9\u306e\u7a2e\u985e(\u4e88\u7d04\u8a9e\u306a\u306e\u304b\u30b3\u30e1\u30f3\u30c8\u306a\u306e\u304b\u306a\u3069)\u306b\u5fdc\u3058\u3066\u30ab\u30e9\u30fc\u30b3\u30fc\u30c9\u3092\u30bf\u30fc\u30df\u30ca\u30eb\u306b\u51fa\u529b**\u3057\u3066\u3044\u307e\u3059\n\n```cpp:swift-ide-test.cpp(733-768_PrintSyntaxColorWalker\u30af\u30e9\u30b9\u5185)\n  void wrapForTerminal(SyntaxNodeKind Kind, bool Begin) {\n    llvm::raw_ostream::Colors Col;\n    switch (Kind) {\n    case SyntaxNodeKind::Keyword: Col = llvm::raw_ostream::MAGENTA; break;\n    // Skip identifier.\n    case SyntaxNodeKind::Identifier: return;\n    case SyntaxNodeKind::DollarIdent: Col = llvm::raw_ostream::MAGENTA; break;\n    case SyntaxNodeKind::Integer: Col = llvm::raw_ostream::BLUE; break;\n    case SyntaxNodeKind::Floating: Col = llvm::raw_ostream::BLUE; break;\n    case SyntaxNodeKind::String: Col = llvm::raw_ostream::RED; break;\n    case SyntaxNodeKind::StringInterpolationAnchor: Col = llvm::raw_ostream::CYAN; break;\n    case SyntaxNodeKind::CommentLine: Col = llvm::raw_ostream::GREEN; break;\n    case SyntaxNodeKind::CommentBlock: Col = llvm::raw_ostream::GREEN; break;\n    case SyntaxNodeKind::CommentMarker: Col = llvm::raw_ostream::MAGENTA; break;\n    case SyntaxNodeKind::DocCommentLine: Col = llvm::raw_ostream::CYAN; break;\n    case SyntaxNodeKind::DocCommentBlock: Col = llvm::raw_ostream::CYAN; break;\n    case SyntaxNodeKind::DocCommentField: Col = llvm::raw_ostream::WHITE; break;\n    case SyntaxNodeKind::CommentURL: Col = llvm::raw_ostream::RED; break;\n    case SyntaxNodeKind::TypeId: Col = llvm::raw_ostream::CYAN; break;\n    case SyntaxNodeKind::BuildConfigKeyword: Col = llvm::raw_ostream::YELLOW; break;\n    case SyntaxNodeKind::BuildConfigId: Col = llvm::raw_ostream::YELLOW; break;\n    case SyntaxNodeKind::AttributeId: Col = llvm::raw_ostream::CYAN; break;\n    case SyntaxNodeKind::AttributeBuiltin: Col = llvm::raw_ostream::MAGENTA; break;\n    case SyntaxNodeKind::EditorPlaceholder: Col = llvm::raw_ostream::YELLOW; break;\n    case SyntaxNodeKind::ObjectLiteral: return;\n    }\n\n    if (Begin) {\n      if (const char *CStr =\n          llvm::sys::Process::OutputColor(Col, false, false)) {\n        OS << CStr;\n      }\n    } else {\n      OS << llvm::sys::Process::ResetColor();\n    }\n  }\n\n``` \n\n## main\u95a2\u6570\n* `swift-ide-test.cpp`\u306e2434\u884c\u76ee\u3042\u305f\u308a\u306b\u3042\u308bmain\u95a2\u6570\u304b\u3089\u3001`ActionType`\u3054\u3068\u306b\u5206\u5c90\u3057\u3066\u3001`doSyntaxColoring`\u3068\u3044\u3046\u95a2\u6570\u3092\u547c\u3073\u51fa\u3057\u3066\u3044\u307e\u3059\n* \u7b2c\u4e8c\u5f15\u6570\u304c\u30bd\u30fc\u30b9\u30d5\u30a1\u30a4\u30eb\u540d\u3067\u3059\u306d\n\n```cpp:swift-ide-test.cpp(2652-2657_main\u95a2\u6570\u5185) \n  case ActionType::SyntaxColoring:\n    ExitCode = doSyntaxColoring(InitInvok,\n                                options::SourceFilename,\n                                options::TerminalOutput,\n                                options::Typecheck);\n    break;\n```\n\n\n\n\n## \u69cb\u6587\u89e3\u6790~\u30c6\u30b9\u30c8\u30e1\u30bd\u30c3\u30c9\u306e\u547c\u3073\u51fa\u3057\n* \u3053\u306e`doSyntaxColoring`\u95a2\u6570\u5185\u3067 \n * \u30bd\u30fc\u30b9\u30b3\u30fc\u30c9\u3092\u69cb\u6587\u89e3\u6790\n * \u53d6\u5f97\u3057\u305f\u30ce\u30fc\u30c9\u3092\u3059\u3079\u3066\u8d70\u67fb\n * \u30ce\u30fc\u30c9\u3054\u3068\u306b\u5148\u307b\u3069\u306e`wrapForTerminal`\u30c6\u30b9\u30c8\u30e1\u30bd\u30c3\u30c9\u3092\u547c\u3073\u51fa\u3057\u3066\u51fa\u529b\n* \u3092\u884c\u3063\u3066\u308b\u3088\u3046\u3067\u3059\u3002(\u8a73\u7d30\u307e\u3067\u7406\u89e3\u3067\u304d\u3066\u3044\u307e\u305b\u3093)\n* `CI.performParseOnly()`\u3084`CI.performSema()`\u3042\u305f\u308a\u306f\u3001\u306a\u3093\u3068\u306a\u304f\u3084\u3063\u3066\u308b\u3053\u3068\u304c\u60f3\u50cf\u3067\u304d\u307e\u3059\u306d\n\n```cpp:swift-ide-test.cpp(777-803_doSyntaxColoring\u95a2\u6570\u524d\u534a)\nstatic int doSyntaxColoring(const CompilerInvocation &InitInvok,\n                            StringRef SourceFilename,\n                            bool TerminalOutput,\n                            bool RunTypeChecker) {\n  CompilerInvocation Invocation(InitInvok);\n  Invocation.addInputFilename(SourceFilename);\n  Invocation.getLangOptions().DisableAvailabilityChecking = false;\n\n  CompilerInstance CI;\n\n  // Display diagnostics to stderr.\n  PrintingDiagnosticConsumer PrintDiags;\n  CI.addDiagnosticConsumer(&PrintDiags);\n  if (CI.setup(Invocation))\n    return 1;\n  if (!RunTypeChecker)\n    CI.performParseOnly();\n  else\n    CI.performSema();\n\n  unsigned BufID = CI.getInputBufferIDs().back();\n  SourceFile *SF = nullptr;\n  for (auto Unit : CI.getMainModule()->getFiles()) {\n    SF = dyn_cast<SourceFile>(Unit);\n    if (SF)\n      break;\n  }\n```\n\n* \u5f8c\u534a\u306b\u51fa\u3066\u304f\u308b`Walker`\u30af\u30e9\u30b9\u304c\u30e1\u30f3\u30d0\u5909\u6570\u306b`Char *`\u3092\u6301\u3063\u3066\u304a\u308a\u3001\u89e3\u6790\u6e08\u307f\u306e\u30bd\u30fc\u30b9\u30d5\u30a1\u30a4\u30eb\u306e\u30ce\u30fc\u30c9\u3092\u982d\u304b\u3089\u8210\u3081\u3066\u3044\u307e\u3059\n\n\n```cpp:swift-ide-test.cpp(804-812_doSyntaxColoring\u95a2\u6570\u5f8c\u534a)\n  assert(SF && \"no source file?\");\n  ide::SyntaxModelContext ColorContext(*SF);\n  PrintSyntaxColorWalker ColorWalker(CI.getSourceMgr(), BufID, llvm::outs(),\n                                     TerminalOutput);\n  ColorContext.walk(ColorWalker);\n  ColorWalker.finished();\n\n  return 0;\n}\n```\n\n```cpp:PrintSyntaxColorWalker\u306e\u30e1\u30f3\u30d0\u5909\u6570\u306e\u4e00\u90e8\n  const char *BufStart;\n  const char *BufEnd;\n  const char *CurrBufPtr;\n```\n\n## \u7d99\u627f\u95a2\u4fc2\n* \u809d\u5fc3\u306e`doSyntaxColoring`\u95a2\u6570\u3092\u547c\u3073\u51fa\u3057\u3066\u3044\u308b\u306e\u306f\u3069\u3053\u3067\u3057\u3087\u3046\u304b\u3002\n* \u3058\u3064\u306f\u3001`PrintSyntaxColorWalker`\u30af\u30e9\u30b9\u306f\u89aa\u30af\u30e9\u30b9\u3067\u3042\u308b`SyntaxModelWalker`\u30af\u30e9\u30b9\u306e\u4e0b\u8a18\u30e1\u30bd\u30c3\u30c9\u3092\u30aa\u30fc\u30d0\u30fc\u30e9\u30a4\u30c9\u3057\u3066\u3044\u307e\u3059\u3002\n* \u305d\u306e\u305f\u3081\u3001`SyntaxModelContext::walk`\u30e1\u30bd\u30c3\u30c9\u306e\u4e2d\u3067`ModelASTWalker::passNode`\u30e1\u30bd\u30c3\u30c9\u304c\u547c\u3070\u308c\u308b\u5ea6\u306b\u30c6\u30b9\u30c8\u30e1\u30bd\u30c3\u30c9\u3082\u547c\u3073\u51fa\u3055\u308c\u308b\u3088\u3046\u3067\u3059\n\n```cpp:SyntaxModel.h(154-167)\nclass SyntaxModelWalker {\n// (\u4e2d\u7565)\n  /// \\brief Called when first visiting a syntax node, before walking into its\n  /// children.  If it returns false, the subtree is skipped.\n  ///\n  virtual bool walkToNodePre(SyntaxNode Node) { return true; }\n\n  /// \\brief Called after visiting the children of a syntax node. If it returns\n  /// false, the remaining traversal is terminated and returns failure.\n  virtual bool walkToNodePost(SyntaxNode Node) { return true; }\n```\n\n# \u307e\u3068\u3081\n* \u4eca\u56de\u306f\u69cb\u6587\u89e3\u6790\u306e\u30ed\u30b8\u30c3\u30af\u3092\u7406\u89e3\u3059\u308b\u306b\u306f\u81f3\u308a\u307e\u305b\u3093\u3067\u3057\u305f\u3002\n* \u3067\u3059\u304c\u3001`CompilerInstance::performSema()`\u30e1\u30bd\u30c3\u30c9\u3042\u305f\u308a\u3092\u6df1\u8ffd\u3044\u3059\u308c\u3070\u3001Parse\u3084Sema\u306e\u6d41\u308c\u304c\u3044\u3044\u611f\u3058\u306b\u628a\u63e1\u3067\u304d\u305d\u3046\u3067\u3059\n* \u30c6\u30b9\u30c8\u30b1\u30fc\u30b9\u304b\u3089\u8ffd\u3063\u3066\u3044\u304f\u306e\u306f\u3068\u3063\u3064\u304d\u3084\u3059\u304f\u3066GOOD\u3060\u3068\u601d\u3044\u307e\u3057\u305f\ud83d\ude07\n\n# \u305d\u306e\u4ed6\n* **\u3042...\u3042\u308a\u306e\u307e\u307e\u4eca\u8d77\u3053\u3063\u305f\u4e8b\u3092\u8a71\u3059\u305c... Swift\u3092\u8aad\u307f\u306b\u6765\u305f\u3089C++\u3060\u3063\u305f...\u4f55\u3092\u8a00\u3063\u3066\u308b\u306e\u304b\u308f\u304b**\n* \u2191[Swift\u30ea\u30dd\u30b8\u30c8\u30ea](https://github.com/apple/swift)\u3092\u898b\u305f\u6642\u306e\u81ea\u5206\u306e\u53cd\u5fdc\u3067\u3059\u304c\u3001**\u3053\u306e\u8a18\u4e8b\u3092\u898b\u305f\u4eba\u306e\u53cd\u5fdc\u3067\u3082\u3042\u308b\u304b\u3082\u3057\u308c\u306a\u3044**\u3068\u6295\u7a3f\u3057\u3066\u304b\u3089\u6c17\u4ed8\u304d\u307e\u3057\u305f\u3002\u3059\u307f\u307e\u305b\u3093\u3002\n* [\u3068\u308a\u3042\u3048\u305aFix typo\u3057\u305f\u30892\u6642\u9593\u3067\u30de\u30fc\u30b8\u3055\u308c](https://github.com/apple/swift/pull/172)\u3066\u80f8\u71b1\u3067\u3057\u305f\u3002\n* \u304a\u6c17\u3065\u304d\u306e\u70b9\u304c\u3054\u3056\u3044\u307e\u3057\u305f\u3089\u3001\u304a\u6c17\u8efd\u306b\u30b3\u30e1\u30f3\u30c8\u304f\u3060\u3055\u3044! \u9593\u9055\u3044\u306a\u3069\u3054\u6307\u6458\u3044\u305f\u3060\u3051\u308b\u3068\u5927\u5909\u3042\u308a\u304c\u305f\u3044\u3067\u3059\ud83d\udc7c\n\n# \u53c2\u8003\n* [\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u8a00\u8a9e\u306e\u5b9f\u88c5\u306e\u57fa\u790e](http://www.score.cs.tsukuba.ac.jp/~minamide/compiler-jikken/compiler003.html)\n\n* [\u30d7\u30ed\u30b0\u30e9\u30df\u30f3\u30b0\u8a00\u8a9e\u51e6\u7406: \u30b3\u30f3\u30d1\u30a4\u30e9\u306e\u69cb\u9020]\n(http://www.seto.nanzan-u.ac.jp/~hachisu/compiler/samp/comp0104.html)\n\n* [\u554f20 \u610f\u5473\u89e3\u6790\u306e\u30d5\u30a7\u30fc\u30ba\u3067\u884c\u3046\u51e6\u7406 \u5e73\u621025\u5e74\u79cb\u671f\uff5c\u5fdc\u7528\u60c5\u5831\u6280\u8853\u8005\u8a66\u9a13.com]\n(http://www.ap-siken.com/kakomon/25_aki/q20.html)\n\n* [Clang \u306e\u30b3\u30fc\u30c9\u88dc\u5b8c - Backnumbers: Steps to Phantasien](http://steps.dodgson.org/bn/2011/04/26/)\n", "tags": ["Swift", "clang", "OSS", "compiler", "IDE"]}